WEBVTT

1
00:00:00.054 --> 00:00:03.454
&gt;&gt; Maximiliano Firtman: After that,
we have to create the server.

2
00:00:03.454 --> 00:00:06.871
And you can see we do have a public
folder here we haven't seen yet

3
00:00:06.871 --> 00:00:08.657
what we have in the asset folder.

4
00:00:08.657 --> 00:00:12.108
You have a copy of the slide, so
that's actually not part of the project,

5
00:00:12.108 --> 00:00:13.173
part of the training.

6
00:00:13.173 --> 00:00:17.667
In the public folder,
we are going to store all

7
00:00:17.667 --> 00:00:22.515
the static files that will
be sent To the browser.

8
00:00:22.515 --> 00:00:26.823
In this case we are talking
about the front end, okay?

9
00:00:26.823 --> 00:00:33.833
So far, we have just one web manifest that
maybe we don't know what that is yet.

10
00:00:33.833 --> 00:00:36.026
We have CSS, okay?

11
00:00:36.026 --> 00:00:39.263
We have some CSS code,
not complicated, okay?

12
00:00:39.263 --> 00:00:44.037
We don't have even HTML and
then we have a couple of images,

13
00:00:44.037 --> 00:00:48.141
like we have an icon,
the logo in PNG and in SVG, and

14
00:00:48.141 --> 00:00:52.171
generic author,
in case actor, generic actor.

15
00:00:52.171 --> 00:00:56.299
In case we don't have a picture for that
actor, and kind of, that's all we have.

16
00:00:56.299 --> 00:01:02.038
Okay, so the first step will
be to just create a server and

17
00:01:02.038 --> 00:01:07.539
make that server serve that
public directory, okay,

18
00:01:07.539 --> 00:01:12.698
so to do that in Go,
it's actually pretty simple.

19
00:01:12.698 --> 00:01:15.794
If you are using Node js 99% of the time,

20
00:01:15.794 --> 00:01:20.271
you will be installing Express
js like a framework to create.

21
00:01:20.271 --> 00:01:24.129
It's a server, but go was optimized for

22
00:01:24.129 --> 00:01:28.451
this from the beginning, from its origins.

23
00:01:28.451 --> 00:01:33.208
So that's why you just go and
create for example,

24
00:01:33.208 --> 00:01:37.852
let's say the address that
we will be using, and

25
00:01:37.852 --> 00:01:45.008
we are going to say it's :8080 or
8000, this is the port number.

26
00:01:45.008 --> 00:01:49.346
You can also use local host,
an IP address,

27
00:01:49.346 --> 00:01:52.874
a host, wherever you want to open.

28
00:01:52.874 --> 00:01:57.916
So in this case, you decide the host
that you want to open a port from and

29
00:01:57.916 --> 00:02:02.887
if you don't know the host,
you have used colon and the port number.

30
00:02:02.887 --> 00:02:08.101
In this case, it's going to open
that incoming connection from

31
00:02:08.101 --> 00:02:13.516
every available host in your computer or
in the current computer.

32
00:02:13.516 --> 00:02:16.234
So if you deploy that to a web server,

33
00:02:16.234 --> 00:02:20.359
it will use whatever host it
has connected through DNS or

34
00:02:20.359 --> 00:02:25.559
the API P address or whatever on
maybe later we will use directly 80.

35
00:02:25.559 --> 00:02:29.540
But for development purposes, we use 8080,

36
00:02:29.540 --> 00:02:34.370
in the future as a best practice,
we may want to move that port

37
00:02:34.370 --> 00:02:39.037
number to the .m file, so
then we can easily change that.

38
00:02:39.037 --> 00:02:42.189
Or even have different
.env environment files,

39
00:02:42.189 --> 00:02:46.924
one for development, another one for
staging, another one for testing.

40
00:02:46.924 --> 00:02:51.483
So even on the same computer, we can be
running more than one instance of the same

41
00:02:51.483 --> 00:02:53.473
server just by changing the port.

42
00:02:53.473 --> 00:02:56.398
Okay, but for now, for our first step,

43
00:02:56.398 --> 00:03:02.353
it's okay to create a constant like that,
and then we can start trying to listen.

44
00:03:02.353 --> 00:03:05.177
So we're going to use the http package.

45
00:03:05.177 --> 00:03:07.016
This is coming directly from Go.

46
00:03:07.016 --> 00:03:11.320
Listen and serve and
we are going to pass that address.

47
00:03:11.320 --> 00:03:15.474
And then there is a second argument that
is known as a handler that we are not

48
00:03:15.474 --> 00:03:16.818
going to use right now.

49
00:03:16.818 --> 00:03:20.633
We will talk about
handlers later like this.

50
00:03:20.633 --> 00:03:24.564
So, that will, will do something, okay?

51
00:03:24.564 --> 00:03:30.197
The problem is that this is
probably returning an error.

52
00:03:30.197 --> 00:03:35.062
So we should be able to
store that error and

53
00:03:35.062 --> 00:03:37.981
do something with that.

54
00:03:37.981 --> 00:03:43.697
Okay, so we can, receive that and
then check if there is an error,

55
00:03:43.697 --> 00:03:47.590
and if there is an error,
do something that.

56
00:03:47.590 --> 00:03:50.876
If it's not nil, we wanna render
a message or something okay,

57
00:03:50.876 --> 00:03:52.246
we can talk to the logger.

58
00:03:52.246 --> 00:03:54.792
We'll talk about logging later.

59
00:03:54.792 --> 00:03:59.850
For example,
log.fatal says that you know what?

60
00:03:59.850 --> 00:04:03.670
This is not working at all,
so it's a fatal error.

61
00:04:03.670 --> 00:04:06.574
We should stop executing
the app right now.

62
00:04:06.574 --> 00:04:11.765
Okay, it's not like any normal error,
and you have fatal and fatal F.

63
00:04:11.765 --> 00:04:17.003
F is going to format the string so
we can say something like

64
00:04:17.003 --> 00:04:22.350
the server has failed, and
we use, then a placeholder for

65
00:04:22.350 --> 00:04:26.742
a value, and
we pass that error as an argument.

66
00:04:26.742 --> 00:04:30.990
So this is pretty simple.

67
00:04:30.990 --> 00:04:36.841
It's just opening a server and
actually doing nothing, okay?

68
00:04:36.841 --> 00:04:39.555
So it's opening a server,
it's listening for connections, but.

69
00:04:39.555 --> 00:04:46.092
Any connection that comes will
actually respond in the same way.

70
00:04:46.092 --> 00:04:50.203
So to run the server,
I will just use, go run.

71
00:04:50.203 --> 00:04:52.291
That's the current folder.

72
00:04:52.291 --> 00:04:57.456
Nothing happens, no message, nothing.

73
00:04:57.456 --> 00:04:59.955
But I can go.

74
00:05:02.137 --> 00:05:04.669
&gt;&gt; Maximiliano Firtman: To a browser,
local host,

75
00:05:04.669 --> 00:05:07.994
8080,
&gt;&gt; Maximiliano Firtman: And

76
00:05:07.994 --> 00:05:10.837
I'm seeing 404 patient phone,

77
00:05:10.837 --> 00:05:16.909
not matter the URL you are trying your
server, you are getting your 404.

78
00:05:16.909 --> 00:05:18.163
Why is that?

79
00:05:18.163 --> 00:05:20.860
Because we don't have any handler.

80
00:05:20.860 --> 00:05:25.848
That's how we work in
go with different URLs.

81
00:05:25.848 --> 00:05:30.610
If I want to serve something, if I
want to respond something on that URL,

82
00:05:30.610 --> 00:05:33.043
I need to add something to my server.

83
00:05:33.043 --> 00:05:34.707
But my server is up and running.

84
00:05:34.707 --> 00:05:37.281
&gt;&gt; Speaker 2: Is there a package for
the log?

85
00:05:37.281 --> 00:05:40.626
For some reason I'm getting [INAUDIBLE]
&gt;&gt; Maximiliano Firtman: So

86
00:05:40.626 --> 00:05:44.330
the log actually,
[CROSSTALK] it's a package.

87
00:05:44.330 --> 00:05:46.941
The same happens with HTTP,
but I didn't type those.

88
00:05:46.941 --> 00:05:53.545
By the way, this is an import block, and
actually VS code when I was writing log.

89
00:05:53.545 --> 00:05:55.774
Let me remove that from here.

90
00:05:55.774 --> 00:06:02.442
When you remove that and
you're typing log,

91
00:06:02.442 --> 00:06:10.172
if you press return it's
adding that importfolio.

92
00:06:10.172 --> 00:06:15.742
But if it's not happening,
now you know what's the problem, okay?

93
00:06:15.742 --> 00:06:18.824
But those packages are part of Go,
so they are main packages.

94
00:06:18.824 --> 00:06:20.948
So you don't need to install.

95
00:06:20.948 --> 00:06:23.469
Anything, okay?

96
00:06:23.469 --> 00:06:28.787
Cool, so we need a handler ListenAndServe,
it's a synchronous, cool.

97
00:06:28.787 --> 00:06:33.207
Which means the execution will stop there.

98
00:06:33.207 --> 00:06:39.044
Anything that you put after this,
if the server is actually working and

99
00:06:39.044 --> 00:06:42.264
listening, It will be stopped there.

100
00:06:42.264 --> 00:06:47.075
Of course, we can use concurrency and
go with Go routines,

101
00:06:47.075 --> 00:06:49.489
but we don't need to do that.

102
00:06:49.489 --> 00:06:54.298
So before listening and serve,
we can do that probably here,

103
00:06:54.298 --> 00:06:56.341
even before the address.

104
00:06:56.341 --> 00:06:59.284
We can create the handler.

105
00:06:59.284 --> 00:07:03.047
With go and again,
this is kind of a review of Go.

106
00:07:03.047 --> 00:07:06.584
We go,
there are two ways to create handlers.

107
00:07:06.584 --> 00:07:12.125
You can use the second argument
that I'm not using right now.

108
00:07:12.125 --> 00:07:14.720
In that case,
you can create another value, and

109
00:07:14.720 --> 00:07:16.819
that value will have all the handlers.

110
00:07:16.819 --> 00:07:18.597
What are handlers?

111
00:07:18.597 --> 00:07:23.721
They are the waste Let's say objects for
now, we don't have objects in Go,

112
00:07:23.721 --> 00:07:27.498
but that are actually listening for
different routes.

113
00:07:27.498 --> 00:07:31.795
Okay, if you are looking for that API,
this is what you need to do.

114
00:07:31.795 --> 00:07:35.661
If you're using the Tada API,
this is what you need to do.

115
00:07:35.661 --> 00:07:39.526
So we can use that argument,
or we can be global and

116
00:07:39.526 --> 00:07:44.127
talk directly again to the http and
we can say we wanna handle

117
00:07:44.127 --> 00:07:48.378
the rightly route with the function or
with an option.

118
00:07:48.378 --> 00:07:53.076
So we're going to handle then
receive a pattern, for example,

119
00:07:53.076 --> 00:07:54.905
the route of the server.

120
00:07:54.905 --> 00:07:59.404
And we're going to say, you know what, for

121
00:07:59.404 --> 00:08:03.057
these, we will have a File server.

122
00:08:03.057 --> 00:08:07.413
The file server will actually take a file,
one file, or

123
00:08:07.413 --> 00:08:11.503
it can be a whole directory,
and it will serve that.

124
00:08:11.503 --> 00:08:13.676
So this is kind of, I mean,

125
00:08:13.676 --> 00:08:18.316
that line will kind of emulate
an Apache or any web server.

126
00:08:18.316 --> 00:08:23.807
So it will take a file system, A folder
in your file system as and serve that.

127
00:08:23.807 --> 00:08:25.053
Okay, makes sense.

128
00:08:25.053 --> 00:08:29.870
Later, we'll talk about
the architecture of our app.

129
00:08:29.870 --> 00:08:36.404
But let's say that in a real project, you
can decide if you want go to be just for

130
00:08:36.404 --> 00:08:41.354
serving the API,
like it's kind of a micro service Only for

131
00:08:41.354 --> 00:08:45.022
the API, or
if you want Go to be everything.

132
00:08:45.022 --> 00:08:49.754
It's the web server for
the static files, and

133
00:08:49.754 --> 00:08:52.795
also the API handler, both.

134
00:08:52.795 --> 00:08:56.855
Right now,
today we will be using Go for both.

135
00:08:56.855 --> 00:09:00.738
But have in mind that also you can
have completely two separate projects.

136
00:09:00.738 --> 00:09:02.510
The front end and the back end and

137
00:09:02.510 --> 00:09:05.469
the back end doesn't know
about the front end files.

138
00:09:05.469 --> 00:09:07.146
They're not serving the front end files.

139
00:09:07.146 --> 00:09:10.772
And you will use another
server mechanism for

140
00:09:10.772 --> 00:09:16.414
the front end can be just a static server,
okay, and not served by go.

141
00:09:16.414 --> 00:09:19.118
But now we are serving everything by go or
using go, so

142
00:09:19.118 --> 00:09:20.751
we're going to pass it direct.

143
00:09:20.751 --> 00:09:23.671
Directory and the director is public.

144
00:09:23.671 --> 00:09:27.308
&gt;&gt; Speaker 2: Does that need
to be a relative location, or?

145
00:09:27.308 --> 00:09:29.023
&gt;&gt; Maximiliano Firtman: That's
interesting.

146
00:09:29.023 --> 00:09:33.209
So should we, by default, is relative,

147
00:09:33.209 --> 00:09:37.164
which also might lead to some problem.

148
00:09:37.164 --> 00:09:44.191
For example, what if you run the project
or the server from another folder.

149
00:09:44.191 --> 00:09:47.856
If I stop this, I go in here and

150
00:09:47.856 --> 00:09:53.149
I'm saying, go run Project/main.go.

151
00:09:53.149 --> 00:09:57.610
So now, the current folder,
I'm one folder up.

152
00:09:57.610 --> 00:10:01.315
So now, it's gonna be a problem
because it's not gonna find.

153
00:10:01.315 --> 00:10:04.764
That public folder, okay?

154
00:10:04.764 --> 00:10:09.476
Yeah, you need to be very careful with
that because by default it's relative.

155
00:10:09.476 --> 00:10:13.829
You can also get an absolute
value if you want, okay?

156
00:10:13.829 --> 00:10:15.679
Make sense?

157
00:10:15.679 --> 00:10:20.196
&gt;&gt; Speaker 2: Could you always
just use an absolute path instead.

158
00:10:20.196 --> 00:10:24.412
&gt;&gt; Maximiliano Firtman: Yes, you can but
have in mind that this is hard coded in

159
00:10:24.412 --> 00:10:28.363
your go project, and
that will be go is compiled.

160
00:10:28.363 --> 00:10:31.985
So when you deploy that,
this already hard coded, and

161
00:10:31.985 --> 00:10:37.105
if you are deploying that on the cloud,
you probably don't know the absolute

162
00:10:37.105 --> 00:10:41.950
folder in the file in the build profile
system of that cloud beforehand.

163
00:10:41.950 --> 00:10:45.678
So typically, you have to ask for
that dynamically most of the time, so

164
00:10:45.678 --> 00:10:47.242
we still have an error there.

165
00:10:47.242 --> 00:10:50.467
So if you try to see what's going on,
so remember,

166
00:10:50.467 --> 00:10:53.775
you can go here in VS code and
try to see the problems.

167
00:10:53.775 --> 00:10:57.046
It says that we cannot use
File serve with handle, func.

168
00:10:57.046 --> 00:10:57.956
Why is that?

169
00:10:57.956 --> 00:11:00.579
Because this is expecting a function and.

170
00:11:00.579 --> 00:11:03.157
Passing a value, not a function.

171
00:11:03.157 --> 00:11:08.144
So it's because, in this case,
we use handle and not handle func.

172
00:11:08.144 --> 00:11:09.950
Func will receive a function.

173
00:11:09.950 --> 00:11:13.663
In this case, we pass a value
that is a file server, just that.

174
00:11:13.663 --> 00:11:19.362
So if I want to try this now,
I can open the terminal and

175
00:11:19.362 --> 00:11:25.208
run again with Go Run and
see what happens if I refresh.

176
00:11:25.208 --> 00:11:26.900
And now I'm seeing this.

177
00:11:26.900 --> 00:11:30.985
There is actually the list of
files that I have right now.

178
00:11:30.985 --> 00:11:35.991
I can even get into the CSS file and
I can see the CSS file.

179
00:11:35.991 --> 00:11:36.962
Why is that?

180
00:11:36.962 --> 00:11:42.633
Because I don't have an index or
a default edge HTML file,

181
00:11:42.633 --> 00:11:46.002
I don't have a default document.

182
00:11:46.002 --> 00:11:48.912
So just to see if this is working, so

183
00:11:48.912 --> 00:11:52.894
I want to create a very
basic HTML inside public.

184
00:11:52.894 --> 00:11:58.880
So I will create a new file, index.html,
and I will write the minimum

185
00:11:58.880 --> 00:12:04.270
possible value HTML file,
by the way, you can use if you want.

186
00:12:04.270 --> 00:12:08.962
You use a clamation mark Tav
if you're using VS code and

187
00:12:08.962 --> 00:12:13.144
thanks to a pattern or
a framework known as EMET,

188
00:12:13.144 --> 00:12:19.273
is going to write a basic HTML for
you, but I can even write it manually.

189
00:12:19.273 --> 00:12:24.406
HTML with a title, hello from go,

190
00:12:24.406 --> 00:12:30.074
and maybe an edge one, hello from go.

191
00:12:30.074 --> 00:12:35.109
With that in mind,
now I can go back to the browser, but

192
00:12:35.109 --> 00:12:40.376
I have a question for you, so
I have just changed my HTML.

193
00:12:40.376 --> 00:12:44.069
Should I stop my server and
rerun the server or not?

194
00:12:44.069 --> 00:12:46.518
What do you think?

195
00:12:46.518 --> 00:12:50.064
&gt;&gt; Speaker 2: No, because it just
renders whatever is in there.

196
00:12:50.064 --> 00:12:52.978
&gt;&gt; Maximiliano Firtman: Exactly,
because it's rendering the file system.

197
00:12:52.978 --> 00:12:56.350
So it's actually I don't
need to restart my server.

198
00:12:56.350 --> 00:13:01.087
I need to restart my server only
when I change go files, okay.

199
00:13:01.087 --> 00:13:03.949
Okay, when I change the server,
in this case,

200
00:13:03.949 --> 00:13:08.747
I'm changing the assets that the server
is serving from the public directory,

201
00:13:08.747 --> 00:13:11.049
so I don't need to restart my server.

202
00:13:11.049 --> 00:13:14.931
So I will refresh and
I'm seeing now my index HTML.

203
00:13:14.931 --> 00:13:19.260
Okay, pretty basic, but
now we have our web server for

204
00:13:19.260 --> 00:13:21.623
static files up and running.

205
00:13:21.623 --> 00:13:24.919
By the way, how do you restart
the server for now, at least,

206
00:13:24.919 --> 00:13:26.871
because we will change that later.

207
00:13:26.871 --> 00:13:32.350
It's Control C, so you go to the terminal
Control C, it just interrupts that

208
00:13:32.350 --> 00:13:38.188
process, and then you can run it again in
case you are changing the server, okay?

209
00:13:38.188 --> 00:13:45.661
But again, this is just a very basic
web server that we have already set up.

