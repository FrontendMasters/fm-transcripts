WEBVTT

1
00:00:00.000 --> 00:00:03.020
So, we are half of our project.

2
00:00:03.020 --> 00:00:07.573
So, let's make a review, it's a good time
to make a review of what we have so far.

3
00:00:07.573 --> 00:00:10.608
So, let's start with the client side.

4
00:00:10.608 --> 00:00:15.890
So, client side, we have app.js,
so that's our JavaScript

5
00:00:15.890 --> 00:00:20.982
file that actually it's acting
as our connection to the UI.

6
00:00:20.982 --> 00:00:26.947
So, or example, from the HTML, we are
calling app dot something at some point,

7
00:00:26.947 --> 00:00:30.566
app.search, for example,
in our search box.

8
00:00:30.566 --> 00:00:35.041
Then we have one service so
far, it's API.js.

9
00:00:35.041 --> 00:00:38.841
This is the one that is making
the requests to the backend.

10
00:00:38.841 --> 00:00:44.592
So we are centralizing, making requests to
the backend and maybe parsing the response

11
00:00:44.592 --> 00:00:49.964
at this in terms of if it's coming with
an HTTP 200, meaning that it's okay.

12
00:00:49.964 --> 00:00:54.218
Or if there is an error, we are going
to handle that directly in API changes,

13
00:00:54.218 --> 00:00:56.090
we are centralizing that there.

14
00:00:56.090 --> 00:00:58.840
Then we have a couple of components.

15
00:00:58.840 --> 00:01:00.315
So far, we have only one, but

16
00:01:00.315 --> 00:01:03.637
the idea is that we will have
components in the components folder.

17
00:01:03.637 --> 00:01:08.123
Remember, each web component is at
least one class in JavaScript, and

18
00:01:08.123 --> 00:01:12.160
we are creating one JavaScript
file per component, by the way,

19
00:01:12.160 --> 00:01:13.761
that's not mandatory.

20
00:01:13.761 --> 00:01:18.233
In JavaScript, you can just put
all the components in one file and

21
00:01:18.233 --> 00:01:19.542
it will just work.

22
00:01:19.542 --> 00:01:24.861
Server side, we have our main.go,
that in this case is the entry

23
00:01:24.861 --> 00:01:30.196
point of our app and it's also
where we are setting up our server.

24
00:01:30.196 --> 00:01:34.972
So there we are, for example,
connecting to the database,

25
00:01:34.972 --> 00:01:38.916
reading the .m file with
the connection string.

26
00:01:38.916 --> 00:01:44.281
We are setting up everything,
including setting up the handlers.

27
00:01:44.281 --> 00:01:49.028
So we're also creating a logger
that is just a utility that we

28
00:01:49.028 --> 00:01:53.226
have to store in a file every
problem that we may have.

29
00:01:53.226 --> 00:01:55.531
Remember, in the future,
we can replace that,

30
00:01:55.531 --> 00:01:59.029
we can change that with a logger that
connects to a cloud-based service.

31
00:01:59.029 --> 00:02:03.759
That there are many, and different cloud
services that are offering login systems,

32
00:02:03.759 --> 00:02:05.147
or we can use a database.

33
00:02:05.147 --> 00:02:09.837
Also, we have handlers so
far also we have only one.

34
00:02:09.837 --> 00:02:11.981
It's the handler for movies.

35
00:02:11.981 --> 00:02:15.398
In this case,
this is gonna handle the HTTP request.

36
00:02:15.398 --> 00:02:18.416
And this is the one that
is reading the request.

37
00:02:18.416 --> 00:02:23.462
And based on the request and
the route is actually sending something

38
00:02:23.462 --> 00:02:29.672
back to the client, and the handler is not
the one making requests to the database.

39
00:02:29.672 --> 00:02:30.846
The handler for

40
00:02:30.846 --> 00:02:36.539
that is communicating with actually
a model repository that uses a model.

41
00:02:36.539 --> 00:02:42.453
So that's why we have a model or
several models, basically per entity.

42
00:02:42.453 --> 00:02:45.127
So we have users that we
haven't used them so far.

43
00:02:45.127 --> 00:02:48.771
We have movies, we have genre,
and we have actor.

44
00:02:48.771 --> 00:02:54.315
And then, the repository, actually right
now in the data package, are the one

45
00:02:54.315 --> 00:02:59.639
that is actually making the query to
the database and sending the data back.

46
00:02:59.639 --> 00:03:04.246
In the form of a model or a collection
of models and a slice of model,

47
00:03:04.246 --> 00:03:06.403
talking about go vocabulary.

48
00:03:06.403 --> 00:03:11.444
And you're sending that back to a handler
most of the time, and the handler is

49
00:03:11.444 --> 00:03:16.501
sending that back in JSON to the client
that is actually been taken by the API.

50
00:03:16.501 --> 00:03:20.848
And maybe the API is sending
that back to the app to

51
00:03:20.848 --> 00:03:24.889
whoever was asking for that content, okay?

52
00:03:24.889 --> 00:03:29.285
Remember, this is the structure
that we have so far.

53
00:03:29.285 --> 00:03:34.132
The only thing that we are missing,
that we will do in a few minutes,

54
00:03:34.132 --> 00:03:38.741
is the router to actually manage
different routes client side.

55
00:03:38.741 --> 00:03:43.878
But the rest, at least all the pieces
are actually there in our code.

