WEBVTT

1
00:00:00.000 --> 00:00:04.870
&gt;&gt; Maximiliano Firtman: The next step
is C4 if you're following along with

2
00:00:04.870 --> 00:00:10.995
the documentation, we had C4 we
need to create an API service.

3
00:00:10.995 --> 00:00:11.810
What is that?

4
00:00:11.810 --> 00:00:17.337
This is gonna be an object client
side that will talk through HTTP,

5
00:00:17.337 --> 00:00:19.517
show our backend, okay?

6
00:00:19.517 --> 00:00:22.895
So we're going to create that file, API.

7
00:00:22.895 --> 00:00:27.442
It's a service, and what's a service
from a front-end perspective?

8
00:00:27.442 --> 00:00:30.331
Actually, nothing, it's a design pattern.

9
00:00:30.331 --> 00:00:33.730
So we don't have services in
JavaScript as a concept, okay?

10
00:00:33.730 --> 00:00:35.286
It's just a design pattern.

11
00:00:35.286 --> 00:00:39.896
So I'm going to create inside public
because we are in the front-end.

12
00:00:39.896 --> 00:00:44.677
A services folder and
we're going to store there

13
00:00:44.677 --> 00:00:48.991
every script that has
to do with services and

14
00:00:48.991 --> 00:00:53.780
we're going to have one called API.js,
okay?

15
00:00:53.780 --> 00:00:59.537
An API.js will export a constant
that we can call API,

16
00:00:59.537 --> 00:01:03.050
that will have all the API calls.

17
00:01:03.050 --> 00:01:10.041
So for example, we can have getTopMovies.

18
00:01:10.041 --> 00:01:13.504
Little warning here,
I'm going to refactor the code.

19
00:01:13.504 --> 00:01:17.475
So I'm going to write something and
then I'm going to change, okay?

20
00:01:17.475 --> 00:01:23.301
So for example, getTopMovies will
be a function, and what's the idea?

21
00:01:23.301 --> 00:01:27.695
I want to call my API,
my backend API, okay?

22
00:01:27.695 --> 00:01:30.834
So for that, I will use a fetch API.

23
00:01:30.834 --> 00:01:32.966
The fetch API receives a URL.

24
00:01:32.966 --> 00:01:37.145
So I need to say, well,
I want API forward slash movies,

25
00:01:37.145 --> 00:01:40.206
forward slash top forward slash, okay?

26
00:01:40.206 --> 00:01:42.864
But that's a promise.

27
00:01:42.864 --> 00:01:49.842
So typically when we have a promise,
we can use, say, sink await, right?

28
00:01:49.842 --> 00:01:55.228
So I need to await for this, and
that will give me actually the response.

29
00:01:55.228 --> 00:01:59.675
The problem is that, if I'm using await,

30
00:01:59.675 --> 00:02:04.872
I need to add the flag
async to my function, okay?

31
00:02:04.872 --> 00:02:09.406
Now I have the response is
that the array of movies?

32
00:02:09.406 --> 00:02:13.556
No, it's the HTTP response option,

33
00:02:13.556 --> 00:02:18.103
if I want the data, so the result of that.

34
00:02:18.103 --> 00:02:23.672
I need to call fetch.json,
so parse this adjacent and

35
00:02:23.672 --> 00:02:27.192
this is also receiving a promise.

36
00:02:27.192 --> 00:02:30.530
This is plain vanilla JavaScript,
I'm not using any library.

37
00:02:30.530 --> 00:02:32.405
This is how JavaScript works, okay?

38
00:02:32.405 --> 00:02:37.779
The Fetch API works after I did the fetch,
and I have the HTTP response.

39
00:02:37.779 --> 00:02:43.311
To get the result as a JSON object,
I need to take the response and

40
00:02:43.311 --> 00:02:49.679
call JSON that will parse this as a JSON,
and this also returns a promise.

41
00:02:49.679 --> 00:02:54.260
So I need to await for the actual JSON,
I don't want the promise.

42
00:02:54.260 --> 00:02:58.154
And then I can return the result, okay?

43
00:02:58.154 --> 00:03:05.255
So if this is working,
I could go to my browser refresh,

44
00:03:05.255 --> 00:03:13.174
I can open the console,
&gt;&gt; Maximiliano Firtman: And

45
00:03:13.174 --> 00:03:15.148
try to call this, how?

46
00:03:15.148 --> 00:03:20.507
API, actually I can't, why?

47
00:03:20.507 --> 00:03:25.040
Because this is exporting a constant.

48
00:03:25.040 --> 00:03:29.843
So I need to find a way to get here, okay?

49
00:03:29.843 --> 00:03:31.895
It's not a global variable.

50
00:03:31.895 --> 00:03:33.545
When I'm using modules,

51
00:03:33.545 --> 00:03:38.273
everything that you are creating in
a file will not be available globally.

52
00:03:38.273 --> 00:03:42.220
So for now, for
the bagging purposes only, okay?

53
00:03:42.220 --> 00:03:46.993
For the bagging purposes only,

54
00:03:46.993 --> 00:03:53.899
I will say API is equals to,
and I will say API.

55
00:03:53.899 --> 00:04:00.401
So you can see now it's
importing API from this, okay?

56
00:04:00.401 --> 00:04:03.743
Big warning, really, big warning,

57
00:04:03.743 --> 00:04:08.757
when you're using VScode and
JavaScript, by default,

58
00:04:08.757 --> 00:04:13.994
VScode thinks you're using
a JavaScript bundler, okay?

59
00:04:13.994 --> 00:04:18.564
So a JavaScript bundler is something
that typically you have when you

60
00:04:18.564 --> 00:04:22.524
are doing React and
with your view JS, blah, blah, blah.

61
00:04:22.524 --> 00:04:27.650
But we are not using
a JavaScript bundler right now,

62
00:04:27.650 --> 00:04:33.243
which means if I run this,
I'm getting an error 404,

63
00:04:33.243 --> 00:04:40.836
it says services API is 404 and
say why it's 404 services API is there?

64
00:04:40.836 --> 00:04:44.735
Does anyone know why it's 404?

65
00:04:44.735 --> 00:04:46.986
&gt;&gt; Speaker 2: The .JS.

66
00:04:46.986 --> 00:04:50.552
&gt;&gt; Maximiliano Firtman: I don't
have the full extension here,

67
00:04:50.552 --> 00:04:54.125
I need to add the.js, what happened?

68
00:04:54.125 --> 00:05:01.159
VScode thinks that I have a bundler, and
bundlers are solving that problem for

69
00:05:01.159 --> 00:05:05.222
you, but that's not how the browser works.

70
00:05:05.222 --> 00:05:08.676
The browser doesn't know
that they have to add .js to

71
00:05:08.676 --> 00:05:11.684
actually get the file from the server,
okay?

72
00:05:11.684 --> 00:05:12.876
Does it make sense?

73
00:05:12.876 --> 00:05:18.584
So be careful when you do a bundler
JavaScript that you might have a problem,

74
00:05:18.584 --> 00:05:19.126
okay?

75
00:05:19.126 --> 00:05:23.879
Every auto import that you get,
at least not every, the first one.

76
00:05:23.879 --> 00:05:25.123
Because now what happens?

77
00:05:25.123 --> 00:05:30.755
If you have another one, VScode, realize
that you're adding .js and it will add

78
00:05:30.755 --> 00:05:36.401
.js on the rest of the imports, but the
first one profile will not have that .js.

79
00:05:36.401 --> 00:05:39.880
So that's a Vanilla JS problem.

80
00:05:39.880 --> 00:05:45.437
So now it seems like I
have exposed that API.

81
00:05:45.437 --> 00:05:50.762
So if I refresh,
I have exposed that API through app, okay?

82
00:05:50.762 --> 00:05:55.694
So I can getTopMovies and it's a promise,

83
00:05:55.694 --> 00:06:01.452
because it's a promise,
so I need to wait for it.

84
00:06:01.452 --> 00:06:08.132
Actually, I do have my 20 top movies,
so it's working, okay?

85
00:06:08.132 --> 00:06:12.676
I'm getting in my app the top movies.

86
00:06:12.676 --> 00:06:15.754
Does that make sense?

87
00:06:15.754 --> 00:06:20.419
Again, I'm exposing the API to the console
is not a good idea, and I don't wanna do

88
00:06:20.419 --> 00:06:24.299
that, but at least for debugging,
at this point, I think it works.

89
00:06:27.423 --> 00:06:29.089
&gt;&gt; Maximiliano Firtman: Okay,
does it make sense?

90
00:06:29.089 --> 00:06:33.405
Cool, well,
now we need to also on the API,

91
00:06:33.405 --> 00:06:37.370
get random movies, get movie by ID, and

92
00:06:37.370 --> 00:06:43.099
everything looks kind of the same or
very similar, okay?

93
00:06:43.099 --> 00:06:46.892
We just changed the URL, right?

94
00:06:46.892 --> 00:06:51.602
So maybe we can try to make
a general fetch from my API,

95
00:06:51.602 --> 00:06:55.057
and then we call that fetch, because,

96
00:06:55.057 --> 00:07:00.412
if not we will be copying and
pasting and that's pretty bad.

97
00:07:00.412 --> 00:07:05.197
So let's say that fetch
will be an async function

98
00:07:05.197 --> 00:07:09.631
that will receive the URL or
the service URL,

99
00:07:09.631 --> 00:07:14.312
and maybe some arguments
that we can add later.

100
00:07:14.312 --> 00:07:18.183
And it will do this instead of this,

101
00:07:18.183 --> 00:07:22.839
maybe you will see that forward slash API.

102
00:07:22.839 --> 00:07:26.321
It's like a prefix that we need
to use on every service, right?

103
00:07:26.321 --> 00:07:29.819
So maybe we can create a constant.

104
00:07:29.819 --> 00:07:33.743
It's not really a constant,
but kind of a constant for

105
00:07:33.743 --> 00:07:36.484
that typically we call that base URL.

106
00:07:41.289 --> 00:07:42.466
&gt;&gt; Maximiliano Firtman: Like that.

107
00:07:42.466 --> 00:07:47.653
So getTopMovies first, it's gonna just

108
00:07:47.653 --> 00:07:53.282
return the call to API
fetch with movies top,

109
00:07:53.282 --> 00:07:56.550
just that part of the URL.

110
00:07:56.550 --> 00:07:59.055
Does that make sense?

111
00:07:59.055 --> 00:08:03.392
So then we'll receive this here,
the fetch, and we're going to say, well,

112
00:08:03.392 --> 00:08:04.256
you know what?

113
00:08:04.256 --> 00:08:06.569
I'm going to take the base URL,

114
00:08:06.569 --> 00:08:10.860
I'm going to concatenate the service or
the service name.

115
00:08:10.860 --> 00:08:15.860
Let's call it however you want,
service, service name.

116
00:08:15.860 --> 00:08:19.887
And then we may have some
arguments at some point, okay?

117
00:08:19.887 --> 00:08:21.389
And I have a question for you.

118
00:08:21.389 --> 00:08:23.246
What happens if there is any error?

119
00:08:26.873 --> 00:08:29.837
&gt;&gt; Maximiliano Firtman: How
can I catch the error?

120
00:08:29.837 --> 00:08:34.177
I mean, the URL does not exceed,
the server is down,

121
00:08:34.177 --> 00:08:36.788
the server is giving me 500.

122
00:08:36.788 --> 00:08:38.378
&gt;&gt; Speaker 3: 500 error.

123
00:08:38.378 --> 00:08:39.090
&gt;&gt; Maximiliano Firtman: Sorry, what?

124
00:08:39.090 --> 00:08:40.506
&gt;&gt; Speaker 3: 500 error.

125
00:08:40.506 --> 00:08:42.719
&gt;&gt; Maximiliano Firtman: But how?

126
00:08:42.719 --> 00:08:50.312
With async await,
do you know how to catch errors?

127
00:08:50.312 --> 00:08:52.163
Try catch.

128
00:08:52.163 --> 00:08:56.570
So it's as simple as using try catch.

129
00:08:56.570 --> 00:09:00.600
So in JavaScript, you can use try catch,
even from async operations,

130
00:09:00.600 --> 00:09:01.754
if it's a promise.

131
00:09:01.754 --> 00:09:06.061
So try catch, I don't need to receive
the error now anymore, it's not mandatory.

132
00:09:06.061 --> 00:09:11.515
But maybe I want it, because at
least I wanna see in the console so

133
00:09:11.515 --> 00:09:17.984
I can say console error e, and later
we'll see we do something else, okay?

134
00:09:17.984 --> 00:09:25.528
So now we have getTopMovies, and I just
need to clone this for the rest, okay?

135
00:09:25.528 --> 00:09:30.924
So getRandomMovies is pretty similar,

136
00:09:30.924 --> 00:09:34.581
and we just change the URL.

137
00:09:34.581 --> 00:09:39.378
GetMovieById, in this case,
we received ID as an argument,

138
00:09:39.378 --> 00:09:42.253
we may receive the ID as an argument.

139
00:09:42.253 --> 00:09:46.449
We can check if the ID is a number or not.

140
00:09:46.449 --> 00:09:51.997
And then we return fetch movies,

141
00:09:51.997 --> 00:09:56.166
this is gonna be movies.

142
00:09:56.166 --> 00:10:02.825
And the ID, we can concatenate or
use a template string.

143
00:10:02.825 --> 00:10:07.099
And by the way,
I'm returning the fetch, so

144
00:10:07.099 --> 00:10:12.161
the promise,
also if you wanna return just the data,

145
00:10:12.161 --> 00:10:16.457
the JSON,
we can also await on each of those.

146
00:10:16.457 --> 00:10:16.975
Does it make sense?

147
00:10:16.975 --> 00:10:24.733
So then whoever is calling you
will receive the data, okay?

148
00:10:24.733 --> 00:10:28.955
GetMovieById, then we have search movies.

149
00:10:28.955 --> 00:10:31.539
This one has a couple of arguments.

150
00:10:31.539 --> 00:10:34.370
So it's gonna be a little different.

151
00:10:34.370 --> 00:10:36.748
We're going to receive a query.

152
00:10:36.748 --> 00:10:38.441
Typically, we call this Q.

153
00:10:38.441 --> 00:10:42.708
I mean, you can call it however you want,
but the argument, and

154
00:10:42.708 --> 00:10:47.527
I think that we are all copying Google
here that they were using Q in the URL

155
00:10:47.527 --> 00:10:53.080
when you google something, it's
google.com/q=, it's actually the query.

156
00:10:53.080 --> 00:10:59.499
So we have the query,
the order and the genre,

157
00:10:59.499 --> 00:11:05.103
okay, like that, and we have one more.

158
00:11:05.103 --> 00:11:08.889
So in this case,
we are going to receive movies.

159
00:11:08.889 --> 00:11:16.367
It was search and actually,
I wanna pass the arguments.

160
00:11:16.367 --> 00:11:21.140
I mean, I can do it manually,
I can say query string, so

161
00:11:21.140 --> 00:11:26.440
question mark, query equals to query,
I can do that, okay?

162
00:11:26.440 --> 00:11:33.859
Or I can create a little tool where I can
pass an object with the three arguments,

163
00:11:33.859 --> 00:11:39.537
and here I can just create
the query string manually, okay?

164
00:11:39.537 --> 00:11:44.586
So if you have arguments that you
wanna send over the query string,

165
00:11:44.586 --> 00:11:46.850
you just pass it as an object.

166
00:11:46.850 --> 00:11:52.058
And from this side, you say,
if I do have an argument, I will say,

167
00:11:52.058 --> 00:11:58.676
new URLSearchParans, this is pure Vanilla
JavaScript arguments, just a string.

168
00:11:58.676 --> 00:12:01.972
And if I don't have arguments,
I will just say empty string.

169
00:12:01.972 --> 00:12:10.044
So then I concatenate this
with that query string, okay?

170
00:12:10.044 --> 00:12:11.147
Yeah.

171
00:12:11.147 --> 00:12:18.212
&gt;&gt; Speaker 2: Why did you say it was not
good to expose the API to the console?

172
00:12:18.212 --> 00:12:21.453
If it's client side,
they can see the code anyway.

173
00:12:21.453 --> 00:12:25.139
&gt;&gt; Maximiliano Firtman: Yeah,
I mean, it's true it's client side,

174
00:12:25.139 --> 00:12:27.131
anyone can see the code.

175
00:12:27.131 --> 00:12:30.770
But the thing is that
when we're using modules,

176
00:12:30.770 --> 00:12:36.030
you can encapsulate objects and
make them hidden to the lowest scope.

177
00:12:36.030 --> 00:12:41.064
I mean, if you have a bad actor,
the bad actor can get into that anywhere.

178
00:12:41.064 --> 00:12:45.570
But it's like another barrier
that you put there and

179
00:12:45.570 --> 00:12:49.668
also you're not exposing
that in the console or

180
00:12:49.668 --> 00:12:54.191
to a plugin that is in Chrome,
and things like that.

181
00:12:54.191 --> 00:12:58.425
I mean, it's not like a very
secure system, no, it's not.

182
00:12:58.425 --> 00:13:01.599
But every new barrier that
you add makes things better.

183
00:13:01.599 --> 00:13:06.439
In this case, we are encapsulating this,
and only our objects or

184
00:13:06.439 --> 00:13:11.460
only scripts that are actually
importing API will be able to use it.

185
00:13:11.460 --> 00:13:14.483
But if you wanna hack into that,
you can't pretty easily.

186
00:13:14.483 --> 00:13:19.245
I mean, these days, in JavaScript,
if you don't have access to something,

187
00:13:19.245 --> 00:13:21.710
you can always use import as a function.

188
00:13:21.710 --> 00:13:26.955
So you will be able to import,
like services,

189
00:13:26.955 --> 00:13:31.259
api.js, like so it waits for it, and

190
00:13:31.259 --> 00:13:36.113
when you have it, actually we can do this.

191
00:13:36.113 --> 00:13:39.789
It's API services, API JS, yeah,

192
00:13:39.789 --> 00:13:44.187
well, I don't maybe we've removed that.

193
00:13:44.187 --> 00:13:48.039
I'm not sure why features or
modules specifier,

194
00:13:48.039 --> 00:13:51.991
something's wrong with the URL,
no, it's not.

195
00:13:51.991 --> 00:13:57.213
But anyway, let's remove that and
just explain that briefly.

196
00:13:57.213 --> 00:14:03.478
So even today with modern JavaScript,
you can do live module import.

197
00:14:03.478 --> 00:14:09.194
So you can import a module like this,
and then we would have access to it,

198
00:14:09.194 --> 00:14:13.531
if you have the right permission
at the network layer.

199
00:14:13.531 --> 00:14:16.399
But it doesn't matter,
I mean, in this case,

200
00:14:16.399 --> 00:14:21.658
I think that from an organization point of
view, it's a good idea to hide that, okay?

201
00:14:21.658 --> 00:14:26.641
Because that means that you
have to explicitly have the API

202
00:14:26.641 --> 00:14:30.612
import when you need it,
okay, makes sense?

203
00:14:30.612 --> 00:14:35.576
So now that means that we have the API
service available from a client

204
00:14:35.576 --> 00:14:37.067
side point of view.

