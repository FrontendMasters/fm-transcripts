WEBVTT

1
00:00:00.000 --> 00:00:01.972
&gt;&gt; Maximiliano Firtman: So
I have some homework for you,

2
00:00:01.972 --> 00:00:05.261
in case you wanna continue
working on this project and

3
00:00:05.261 --> 00:00:09.736
see if you have learned something and
you are able to modify the project.

4
00:00:09.736 --> 00:00:12.878
First, you can add delete account.

5
00:00:12.878 --> 00:00:17.859
So in that case, the user can
delete its own account, and for

6
00:00:17.859 --> 00:00:20.310
that you can do it in two ways.

7
00:00:20.310 --> 00:00:25.412
You can do a physical deletion, that is,
you can remove from the database

8
00:00:25.412 --> 00:00:30.840
the record, or if you look at the users
table, you already have one particular

9
00:00:30.840 --> 00:00:36.625
field that is actually deleted with a
timestamp, that's for a logical deletion.

10
00:00:36.625 --> 00:00:40.497
So you can try both, in that case,
if you keep the user, but

11
00:00:40.497 --> 00:00:43.681
you add a flag saying this
user has been deleted.

12
00:00:43.681 --> 00:00:47.049
So in that case, you still keep
the history, sometimes you have to do

13
00:00:47.049 --> 00:00:50.261
that even for legal reasons,
it depends on the project, right?

14
00:00:50.261 --> 00:00:53.443
But in some countries,
you have some legal reasons,

15
00:00:53.443 --> 00:00:57.912
you have to store user data even if
the user is deleting the account, okay.

16
00:00:57.912 --> 00:01:01.032
You can also add confirmation for
the account,

17
00:01:01.032 --> 00:01:04.621
sending an OTP that's
a one-time password by email.

18
00:01:04.621 --> 00:01:08.862
Right now we are not verifying if
the email actually exists or not, so

19
00:01:08.862 --> 00:01:11.952
we can send an email to the user,
creating an OTP.

20
00:01:11.952 --> 00:01:17.004
And then we need another web
service to receive that OTP so

21
00:01:17.004 --> 00:01:22.805
you can try to see if you can work
with that, forget the password.

22
00:01:22.805 --> 00:01:27.664
Also, in that case we have our password
is hashed server-side, so we cannot

23
00:01:27.664 --> 00:01:32.629
send the password by email, things like
that, but we can reset the password.

24
00:01:32.629 --> 00:01:38.803
Also sending an OTP go to email,
you can try to follow that flow.

25
00:01:38.803 --> 00:01:42.371
You can also check if a movie is
already a favorite or in watch list,

26
00:01:42.371 --> 00:01:46.472
because right now, it's always letting
you add to favorite on watch list.

27
00:01:46.472 --> 00:01:51.420
So you can add that so you need another
web service that will let you know if

28
00:01:51.420 --> 00:01:56.549
the current user has that movie in
the collection, and then update the UI.

29
00:01:56.549 --> 00:01:59.330
So that's a little nice exercise to do.

30
00:01:59.330 --> 00:02:03.504
Remove from watches and favorites,
that's also pretty simple actually.

31
00:02:03.504 --> 00:02:06.448
It's just adding another web service,

32
00:02:06.448 --> 00:02:11.826
another API web service that will just
delete that record from the table.

33
00:02:11.826 --> 00:02:15.636
Add more validations,
error control that never ends.

34
00:02:15.636 --> 00:02:20.777
Okay, there are a lot of other validations
and error control that you can do,

35
00:02:20.777 --> 00:02:26.074
actually, I encourage you to try to hack
the system, try to open the terminal,

36
00:02:26.074 --> 00:02:29.973
try to send instead of an ID letter,
and see what happens.

37
00:02:29.973 --> 00:02:34.855
And see if your server is reacting
properly and sending the right error,

38
00:02:34.855 --> 00:02:36.224
okay, so try that.

39
00:02:36.224 --> 00:02:41.005
Find Similar movies,
the data set is ready for you to do that.

40
00:02:41.005 --> 00:02:45.723
So when you're in a movie,
you could create a web service that

41
00:02:45.723 --> 00:02:50.183
returns similar movies,
based for example on keywords.

42
00:02:50.183 --> 00:02:54.819
So then you make a query, SQL query,
another you can reated and to change

43
00:02:54.819 --> 00:03:00.140
a little bit your data repository, to make
that work, but you make a Query, okay?

44
00:03:00.140 --> 00:03:02.788
And on that query,
you will get similar movies.

45
00:03:02.788 --> 00:03:06.874
And then you suggest at the bottom,
similar movies, okay,

46
00:03:06.874 --> 00:03:09.612
that's a pretty good exercise as well.

47
00:03:09.612 --> 00:03:14.865
Then you can also create an actors page so
you can get into the details of an actor,

48
00:03:14.865 --> 00:03:19.284
or you can search actors as well and
then see all the movies by actor.

49
00:03:19.284 --> 00:03:24.231
Okay, the data set is ready for
you to do that, so

50
00:03:24.231 --> 00:03:30.770
we have already seen the steps for
you to actually go and do this.

51
00:03:30.770 --> 00:03:36.779
So you're ready to actually create all
these new sections in the project.

52
00:03:36.779 --> 00:03:39.436
Okay, any final question?

53
00:03:39.436 --> 00:03:46.961
&gt;&gt; Speaker 2: Does GO have a email client
or has some TMP or, I can't remember?

54
00:03:46.961 --> 00:03:49.269
&gt;&gt; Maximiliano Firtman: So, yeah, SMTP?

55
00:03:49.269 --> 00:03:50.253
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Maximiliano Firtman: Simple Mail

56
00:03:50.253 --> 00:03:51.286
Transfer Protocol.

57
00:03:51.286 --> 00:03:55.965
So actually, the answer is,
it's not directly related to GO,

58
00:03:55.965 --> 00:03:58.835
because it applies to every language.

59
00:03:58.835 --> 00:04:05.128
So you may have an SMTP client or
not, it doesn't matter.

60
00:04:05.128 --> 00:04:08.057
So because if you have it or
not, if you don't have it,

61
00:04:08.057 --> 00:04:10.047
you can use a community-based one.

62
00:04:10.047 --> 00:04:11.744
So forget about that.

63
00:04:11.744 --> 00:04:16.422
But why I'm not directly answering
your questions in a straight way?

64
00:04:16.422 --> 00:04:20.608
Because today, if you want that to work,
to send emails and

65
00:04:20.608 --> 00:04:24.460
those emails to go through and
get to users' inboxes,

66
00:04:24.460 --> 00:04:28.177
probably you don't wanna
use your own SMTP server.

67
00:04:28.177 --> 00:04:31.049
That doesn't work anymore
like 10 years ago.

68
00:04:31.049 --> 00:04:35.728
And the best way to do that is to use
a cloud-based provider for email sending.

69
00:04:35.728 --> 00:04:39.296
And there are some that they have
even a free tire in It depends on how

70
00:04:39.296 --> 00:04:40.842
many emails you wanna send.

71
00:04:40.842 --> 00:04:46.073
So in that case, you don't care about
the SMTP email sending protocol,

72
00:04:46.073 --> 00:04:48.661
it's just a cloud API call, okay.

73
00:04:48.661 --> 00:04:53.032
You just do a get with a key, and
that's the email, that's the address, and

74
00:04:53.032 --> 00:04:54.454
that's the recipient.

75
00:04:54.454 --> 00:04:58.757
Because if not today, mostly on Gmail or
Microsoft business account or

76
00:04:58.757 --> 00:05:01.710
even Yahoo accounts that
most people are using.

77
00:05:01.710 --> 00:05:06.129
The email will not go
through because of a spam.

78
00:05:06.129 --> 00:05:09.500
And there are filters they
have that it's very difficult.

79
00:05:09.500 --> 00:05:13.182
I mean, it's not impossible, but it's very
difficult for you to create your own.

80
00:05:13.182 --> 00:05:17.216
You have your own SMTP server,
set it up properly.

81
00:05:17.216 --> 00:05:21.908
You have to do a lot of stuff,
type of security and privacy and

82
00:05:21.908 --> 00:05:28.264
handshaking with the servers to actually
make those emails go through the inbox.

83
00:05:28.264 --> 00:05:30.644
So I suggest you to go
directly with the provider,

84
00:05:30.644 --> 00:05:33.488
with a cloud-based provider
that will help you with that.

85
00:05:33.488 --> 00:05:39.066
Well, then our full stack project with
Vanilla JavaScript and GO is ready.

86
00:05:39.066 --> 00:05:40.403
So, thank you.

87
00:05:40.403 --> 00:05:46.203
&gt;&gt; [APPLAUSE].

