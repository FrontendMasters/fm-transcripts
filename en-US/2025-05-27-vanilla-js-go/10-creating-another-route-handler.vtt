WEBVTT

1
00:00:00.000 --> 00:00:07.974
Of course, the next step will be to
replace the dummy data with real data.

2
00:00:07.974 --> 00:00:13.423
But before doing that, let's create

3
00:00:13.423 --> 00:00:21.603
another api/movies/random
that right now is 404.

4
00:00:21.603 --> 00:00:24.994
Why random because, I mean,
in our homepage, maybe later,

5
00:00:24.994 --> 00:00:29.247
we wanna show random movies just recommend
random movies from the database.

6
00:00:29.247 --> 00:00:35.827
So just to review the process,
to create a new handler,

7
00:00:35.827 --> 00:00:41.567
we need to go now to
handlers &gt;movie_handler,

8
00:00:41.567 --> 00:00:45.070
and we do have GetTopMovies.

9
00:00:45.070 --> 00:00:50.309
So I need another one, I will copy and
paste, I know that copy and

10
00:00:50.309 --> 00:00:55.646
pasting code is not a good idea,
but for this particular reason,

11
00:00:55.646 --> 00:00:59.837
I will copy and paste and
get random movies, okay?

12
00:00:59.837 --> 00:01:02.840
Let's just change the dummy data,

13
00:01:02.840 --> 00:01:07.252
we will remove the dummy
data in a couple of minutes.

14
00:01:07.252 --> 00:01:13.309
And here you can see we have a moment
like setting the content type,

15
00:01:13.309 --> 00:01:18.949
checking encoding the data into JSON,
verifying the error.

16
00:01:18.949 --> 00:01:22.211
We need to do this on every web service,
right?

17
00:01:22.211 --> 00:01:27.374
So every call, every web service call,
will need that, so maybe it's a good idea,

18
00:01:27.374 --> 00:01:31.013
instead of copy and pasting and
duplicating the same code,

19
00:01:31.013 --> 00:01:34.757
just create a function for
that, so that's pretty common.

20
00:01:34.757 --> 00:01:37.390
If you're using a framework
that we are not, okay?

21
00:01:37.390 --> 00:01:41.158
But if you're using a Go framework,
such as the Gin web framework,

22
00:01:41.158 --> 00:01:43.021
they will do that for you, okay?

23
00:01:43.021 --> 00:01:46.316
But in this case,
we are not using a framework we can create

24
00:01:46.316 --> 00:01:49.014
our own micro library that
will do that for you.

25
00:01:49.014 --> 00:01:54.303
So we can create a function
that will just have this part,

26
00:01:54.303 --> 00:02:01.916
that's the idea, and then we call that on
every API, on every handler for an API.

27
00:02:01.916 --> 00:02:07.358
So, anywhere in this file, we can create

28
00:02:07.358 --> 00:02:12.497
a function that, is gonna be a method.

29
00:02:12.497 --> 00:02:17.485
So again, remember, every time you
create a method in parentheses before

30
00:02:17.485 --> 00:02:21.699
the signature, or actually part
of the signature as a prefix.

31
00:02:21.699 --> 00:02:28.854
In parentheses, we put the name of
the structure where this method belongs,

32
00:02:28.854 --> 00:02:33.477
and I'm going to call this
writeJSONResponse and

33
00:02:33.477 --> 00:02:37.456
if you pay attention, it's lowercase w.

34
00:02:37.456 --> 00:02:40.812
That's because I don't want
to make this available

35
00:02:40.812 --> 00:02:43.490
from the outside of this package, okay?

36
00:02:43.490 --> 00:02:49.236
It's a private method, so
it's gonna have the same, or

37
00:02:49.236 --> 00:02:55.713
when you shot the writer,
we don't need actually the request.

38
00:02:55.713 --> 00:02:59.535
So we're going to have
the w as a response writer,

39
00:02:59.535 --> 00:03:05.178
because we are going to write there
the JSON, and we have the data, okay?

40
00:03:05.178 --> 00:03:09.644
But the thing is that we
want this function to be

41
00:03:09.644 --> 00:03:15.255
compatible with any kind of data
that we want to respond and

42
00:03:15.255 --> 00:03:21.575
in Go we don't have the any type or
object or something like that.

43
00:03:21.575 --> 00:03:26.183
So I'm not sure if you remember
how to define asset type anything,

44
00:03:26.183 --> 00:03:29.074
does anyone remember how to do that in Go?

45
00:03:29.074 --> 00:03:30.075
Interface.

46
00:03:30.075 --> 00:03:35.607
Interface, and code block which means

47
00:03:35.607 --> 00:03:44.168
any value that has that interface
that has no rules applies.

48
00:03:44.168 --> 00:03:48.603
So because he has no rules,
he has no protocol, no list of method,

49
00:03:48.603 --> 00:03:50.361
any value will fit there.

50
00:03:50.361 --> 00:03:54.538
So this is kind of any as
in other languages, okay?

51
00:03:54.538 --> 00:03:59.244
We receive the data and actually
what we need to do is this part, so

52
00:03:59.244 --> 00:04:03.950
I will copy this and maybe I need
to make some changes for example,

53
00:04:03.950 --> 00:04:07.570
it's not movies anymore,
it's actually data.

54
00:04:07.570 --> 00:04:11.138
Let me close the folder view so

55
00:04:11.138 --> 00:04:17.007
I need to send the data,
need to encode the data.

56
00:04:17.007 --> 00:04:21.470
And then we can
&gt;&gt; Maximiliano Firtman: Finish

57
00:04:21.470 --> 00:04:24.561
this later with login, the error, okay?

58
00:04:24.561 --> 00:04:29.732
But now then on GetTopMovies
instead of doing this,

59
00:04:29.732 --> 00:04:35.031
I just need to call that
bright JSON response, okay?

60
00:04:35.031 --> 00:04:36.418
That makes sense.

61
00:04:36.418 --> 00:04:40.212
Remember how to call a method
of your own structure.

62
00:04:40.212 --> 00:04:44.851
I know that your brain, if you're coming
from JavaScript or other languages,

63
00:04:44.851 --> 00:04:47.565
think about this but
we don't have this here.

64
00:04:47.565 --> 00:04:53.121
We use the name of this special
argument we receive here,

65
00:04:53.121 --> 00:04:57.540
so in this case, is H.writeJSONResponse.

66
00:04:57.540 --> 00:05:02.758
We pass the response writer and
the data that is movies,

67
00:05:02.758 --> 00:05:06.430
and we do the same on get random movies.

68
00:05:08.199 --> 00:05:11.862
&gt;&gt; Maximiliano Firtman: So
we will use that a lot, so every API,

69
00:05:11.862 --> 00:05:15.636
we need to respond with a JSON response so

70
00:05:15.636 --> 00:05:19.751
let's focus that code only in one section.

71
00:05:19.751 --> 00:05:25.180
Now, I created the handler but
I didn't set to HTTP,

72
00:05:25.180 --> 00:05:28.451
hey, you have another handle.

73
00:05:28.451 --> 00:05:33.132
So in main.go, I have api/movie/stop,

74
00:05:33.132 --> 00:05:36.673
and I need to create another one,

75
00:05:36.673 --> 00:05:42.503
another HandleFunc that
says api/movies/random.

76
00:05:42.503 --> 00:05:46.312
That will call movieHandler,
GetRandomMovies.

77
00:05:46.312 --> 00:05:51.915
Remember, be careful,
don't add parentheses.

78
00:05:51.915 --> 00:05:56.283
We are passing the function
as an argument; we are not

79
00:05:56.283 --> 00:06:00.950
executing the function,
I have a missing C here, okay?

80
00:06:00.950 --> 00:06:05.884
That so I have an error here,
because it's H,

81
00:06:05.884 --> 00:06:09.313
that's why it's not working.

82
00:06:09.313 --> 00:06:13.342
And now, do I need to restart the server?

83
00:06:13.342 --> 00:06:16.143
No, it should have already happened.

84
00:06:16.143 --> 00:06:22.350
So I go to the browser, I refresh,
and I'm still not getting it, why?

85
00:06:22.350 --> 00:06:25.291
Because I didn't save.

86
00:06:25.291 --> 00:06:30.515
So remember that you need to save
every time you wanna get this?

87
00:06:30.515 --> 00:06:35.096
&gt;&gt; Student: Does that trailing
slash matter to random.

88
00:06:35.096 --> 00:06:37.592
&gt;&gt; Maximiliano Firtman: Yeah,
so also in this case,

89
00:06:37.592 --> 00:06:41.754
we added this trailing
slash just to test this.

90
00:06:41.754 --> 00:06:48.184
It's important to decide if you want or
not the trailing slash, it's not the same.

91
00:06:48.184 --> 00:06:53.315
Also, it's important the order in
when we are registering the handlers,

92
00:06:53.315 --> 00:06:54.868
why I'm saying this?

93
00:06:54.868 --> 00:07:00.586
For example,
what if we first serve the static file and

94
00:07:00.586 --> 00:07:03.579
then we add these handlers.

95
00:07:06.332 --> 00:07:08.055
&gt;&gt; Maximiliano Firtman: Will it work or
not?

96
00:07:08.055 --> 00:07:15.182
The order here matters because we
are registering handlers in order and

97
00:07:15.182 --> 00:07:20.526
in this case we are actually
taking the whole folder so

98
00:07:20.526 --> 00:07:24.342
maybe API will also fit into that URL.

99
00:07:24.342 --> 00:07:31.585
And also the file server sometimes it's
when the trailing slash is tricky,

100
00:07:31.585 --> 00:07:35.660
because if you're trying, for example,

101
00:07:35.660 --> 00:07:40.887
forward /api and
it's getting into the file server.

102
00:07:40.887 --> 00:07:45.779
And the file server realizes or
let's try with images,

103
00:07:45.779 --> 00:07:50.789
because we do have an images
folder in the public folder.

104
00:07:50.789 --> 00:07:55.983
Because there is a folder,
if I try the URL/images,

105
00:07:55.983 --> 00:08:02.917
the file server will respond with
a redirect so images trailing slash.

106
00:08:04.741 --> 00:08:09.415
&gt;&gt; Maximiliano Firtman: And that will do
a lot of trick situations in your app, so

107
00:08:09.415 --> 00:08:15.183
be careful in this case, I don't
think we need the trailing slash for

108
00:08:15.183 --> 00:08:20.563
the API, URLs, it's up to you,
if you like them, it's okay.

109
00:08:20.563 --> 00:08:26.023
And I will just put the order
back as we did before so

110
00:08:26.023 --> 00:08:30.972
static files at the end,
the last fallback.

111
00:08:30.972 --> 00:08:36.460
If no API, if no handler actually
took responsibility of that URL,

112
00:08:36.460 --> 00:08:40.812
let's go to the file system
that's kind of the idea.

113
00:08:40.812 --> 00:08:43.476
The same happens on other servers, I mean,

114
00:08:43.476 --> 00:08:46.932
if you have experience with Express.js,
for example,

115
00:08:46.932 --> 00:08:51.479
it's pretty similar in terms of the order
where you register your routes.

