WEBVTT

1
00:00:00.000 --> 00:00:06.782
&gt;&gt; Maximiliano Firtman: So,
now with that, that is actually the key.

2
00:00:06.782 --> 00:00:09.412
So, we need to store
the key in our pocket.

3
00:00:09.412 --> 00:00:15.576
In this case, the browser's
pocket is actually local storage,

4
00:00:15.576 --> 00:00:20.631
index DB,
any place where you can access that later.

5
00:00:20.631 --> 00:00:23.451
Okay, does it make sense?

6
00:00:23.451 --> 00:00:28.421
So then, so we need to store that
client side, and then send that.

7
00:00:28.421 --> 00:00:33.060
We will see how to send
that later on other

8
00:00:33.060 --> 00:00:37.700
requests that are actually targeting,

9
00:00:37.700 --> 00:00:43.300
let's say actions that
needs authentication.

10
00:00:43.300 --> 00:00:46.282
Not on every action because we
can get movies and that's free.

11
00:00:46.282 --> 00:00:49.342
You don't need a key to get your movies,
but

12
00:00:49.342 --> 00:00:52.585
you need the key to save
a movie in a watch list.

13
00:00:52.585 --> 00:00:59.865
You need a key to get into some section
that is actually special, okay?.

14
00:00:59.865 --> 00:01:04.021
So to do that, just store the key first.

15
00:01:04.021 --> 00:01:08.046
We will go back to the client now,
so to the Public folder.

16
00:01:08.046 --> 00:01:11.733
And within services,
we are going to create a new service.

17
00:01:11.733 --> 00:01:17.303
We will call that store,
where we are going to store data, okay?

18
00:01:17.303 --> 00:01:22.958
And the store will be just,
for now, just the wt,

19
00:01:22.958 --> 00:01:28.893
the token,
that is gonna be null by default, okay?

20
00:01:31.700 --> 00:01:33.958
&gt;&gt; Maximiliano Firtman: I'm
missing an equals.

21
00:01:33.958 --> 00:01:40.773
And also, I'm not sure if you
are used to properties with getters.

22
00:01:40.773 --> 00:01:45.965
So I can just say, get loggedIn

23
00:01:45.965 --> 00:01:51.170
is equals to if jwt is not null.

24
00:01:51.170 --> 00:01:55.952
So that means, you need a comma here.

25
00:01:55.952 --> 00:02:00.160
If at any time you wanna know if
the user is logged in, clients style, or

26
00:02:00.160 --> 00:02:04.860
you think the user is logged in, because
maybe the token is expired, okay, but

27
00:02:04.860 --> 00:02:06.148
we don't know that.

28
00:02:06.148 --> 00:02:09.864
To actually know if the token is expired,
we need to make a request to the server.

29
00:02:09.864 --> 00:02:13.694
The server is the only one that can open
the package and see if it's expired.

30
00:02:13.694 --> 00:02:17.766
Okay, so if we have a token we
think that we are logged in.

31
00:02:17.766 --> 00:02:19.338
Make sense?

32
00:02:19.338 --> 00:02:24.859
So we just call store.loggedIn and it will
give you true or false based on the jwt.

33
00:02:24.859 --> 00:02:29.636
But in the future we change how we
define if the user is logged in or

34
00:02:29.636 --> 00:02:31.324
not, we change that.

35
00:02:31.324 --> 00:02:35.256
And also something that we can do,

36
00:02:35.256 --> 00:02:39.601
is that we are going to create a proxy.

37
00:02:39.601 --> 00:02:43.729
Do you know what a proxy is in JavaScript?

38
00:02:49.511 --> 00:02:53.763
&gt;&gt; Maximiliano Firtman: Have you
ever seen this before, new Proxy?

39
00:02:53.763 --> 00:02:58.845
A proxy is a design pattern, but
also it's an implementation that

40
00:02:58.845 --> 00:03:03.652
we do have in JavaScript,
that will let us wrap, like decorate

41
00:03:03.652 --> 00:03:08.938
an object with another object that
is gonna be our public interface.

42
00:03:08.938 --> 00:03:12.491
Now that proxy has, for example, events.

43
00:03:12.491 --> 00:03:16.229
So every time you're trying
to change the store,

44
00:03:16.229 --> 00:03:20.859
I can do something here, so
we can hook events over the store.

45
00:03:20.859 --> 00:03:25.673
For example, one event is set,
we receive the target,

46
00:03:25.673 --> 00:03:28.747
so the object that we are changing,

47
00:03:28.747 --> 00:03:33.885
the property that we are changing and
the new value, okay?

48
00:03:33.885 --> 00:03:38.369
So I will actually do something like this,
if the user I can use it for switch.

49
00:03:38.369 --> 00:03:39.773
Most of the time it's a switch.

50
00:03:39.773 --> 00:03:43.569
Each in case you have different
properties, okay, but

51
00:03:43.569 --> 00:03:46.329
we have only one jwt, so let's do an if.

52
00:03:46.329 --> 00:03:52.081
If the property that someone is changing,
you will understand this in a second,

53
00:03:52.081 --> 00:03:55.139
is jwt, so it's the one that I care about.

54
00:03:55.139 --> 00:04:00.940
I will first say, I wanna change
the current property, so let's change it.

55
00:04:00.940 --> 00:04:07.148
But also I'm going to store
that one in local storage.

56
00:04:07.148 --> 00:04:10.836
Do you all know what local storage is?

57
00:04:10.836 --> 00:04:18.150
It's a client side storage, key value, key
strings, value strings, both are strings.

58
00:04:18.150 --> 00:04:21.870
It's limited in size, it's five megabytes,

59
00:04:21.870 --> 00:04:26.246
typically in every browser per origin,
so per domain.

60
00:04:26.246 --> 00:04:29.278
And it's five megabytes, but
most WebKit based browsers,

61
00:04:29.278 --> 00:04:33.571
including Chromium-based browsers,
because it's coming from WebKit Chromium.

62
00:04:33.571 --> 00:04:40.287
They're using UTF 16 to store strings,
which means that they're five megabytes.

63
00:04:40.287 --> 00:04:45.603
It's actually half of that because
this is two bytes per character, okay?

64
00:04:45.603 --> 00:04:49.808
So it's two megabytes, I mean for
the JSON Web Tokens, good enough.

65
00:04:49.808 --> 00:04:54.362
But if you have other stuff,
be careful because you may wanna go and

66
00:04:54.362 --> 00:04:56.080
use IndexedDB for that.

67
00:04:56.080 --> 00:05:01.115
And if you wanna get more details into
all those topics, I have another course

68
00:05:01.115 --> 00:05:06.242
in Frontend Masters on data storage,
where we cover all these topics, okay?

69
00:05:06.242 --> 00:05:09.445
Local storage, IndexedDB, and so on.

70
00:05:09.445 --> 00:05:13.798
So in this case, that means that
every time I'm changing jwt, for

71
00:05:13.798 --> 00:05:16.753
example, if I'm saying store.jwt = new,

72
00:05:16.753 --> 00:05:21.135
I'm also saving that in local storage,
that's what I'm doing.

73
00:05:21.135 --> 00:05:28.041
I'm changing the value here, but
I'm also saving it in local storage.

74
00:05:28.041 --> 00:05:34.697
Okay, so it's like an event listener for
changing the jwt value from my store.

75
00:05:34.697 --> 00:05:36.518
Does it make sense?

76
00:05:36.518 --> 00:05:41.677
And finally, I need to return true,
this is mandatory on every setter.

77
00:05:41.677 --> 00:05:46.390
That means that you manage the change,
you change the value.

78
00:05:46.390 --> 00:05:53.286
And then I need to export that
proxiedStore, default or not?

79
00:05:53.286 --> 00:05:57.509
Actually, if I'm doing this here,
it should be equal default.

80
00:05:57.509 --> 00:06:00.621
That means that from the outside,

81
00:06:00.621 --> 00:06:06.646
people will see the proxiedStore,
not the natural store, okay?

82
00:06:06.646 --> 00:06:10.125
So if they change the jwt, we know for

83
00:06:10.125 --> 00:06:15.413
sure that we will save it a copy
of that in local storage.

84
00:06:15.413 --> 00:06:17.179
Does it make sense?

85
00:06:17.179 --> 00:06:21.338
So because we are saving
a copy in local storage,

86
00:06:21.338 --> 00:06:25.802
that means that here somewhere
when the page loads or

87
00:06:25.802 --> 00:06:32.002
when this module loads, I can check if
I do have a value in local storage.

88
00:06:32.002 --> 00:06:37.792
And if I do have a value,
I will do the reverse operation.

89
00:06:37.792 --> 00:06:40.118
And I have a request for you.

90
00:06:40.118 --> 00:06:43.661
Do I have an infinite loop here,
or something like that?

91
00:06:43.661 --> 00:06:48.509
Because the same file is setting in jwt,
and then we think that

92
00:06:48.509 --> 00:06:53.651
when we are changing jwt,
we are going back to the local storage.

93
00:06:53.651 --> 00:06:58.052
So it's not actually infinite loop,
it's like we are setting the value and

94
00:06:58.052 --> 00:07:00.664
we are saving the value in local storage,
but

95
00:07:00.664 --> 00:07:05.031
we are setting the value from local
storage, so say it's like a triangle.

96
00:07:05.031 --> 00:07:11.252
Actually, the answer is no, because here
I'm actually accessing directly this one.

97
00:07:11.252 --> 00:07:13.884
I'm not going through the proxiedStore.

98
00:07:13.884 --> 00:07:17.534
From the outside of this module,
they will use the proxiedStore.

99
00:07:17.534 --> 00:07:22.091
But internally I can save directly a value

100
00:07:22.091 --> 00:07:27.178
without the proxy being aware of that,
okay?

101
00:07:27.178 --> 00:07:28.396
Does it make sense?

102
00:07:28.396 --> 00:07:31.159
Kind of, yeah.

103
00:07:31.159 --> 00:07:35.860
So
&gt;&gt; Maximiliano Firtman: Now in app js,

104
00:07:35.860 --> 00:07:40.034
after a successful login and
registration, so here,

105
00:07:40.034 --> 00:07:44.771
when we are going to the account,
I need to talk with my store.

106
00:07:44.771 --> 00:07:47.098
By the way, how can I access the store?

107
00:07:47.098 --> 00:07:51.786
Well, my app should have the router and

108
00:07:51.786 --> 00:07:59.898
also a reference to the store that
is actually in a separate module.

109
00:07:59.898 --> 00:08:02.715
Does that make sense?

110
00:08:02.715 --> 00:08:07.544
And then that store is getting
the proxiedStore automatically

111
00:08:07.544 --> 00:08:09.830
because I'm in the outside.

112
00:08:09.830 --> 00:08:14.200
So now if I'm registering,
I should get app.store now.

113
00:08:14.200 --> 00:08:18.368
And app.store, we have, for
example, the jwt property.

114
00:08:18.368 --> 00:08:21.624
I'm setting that,
I'm reading that from the response.

115
00:08:21.624 --> 00:08:28.759
Okay, makes sense, and
the same happens after logging.

116
00:08:28.759 --> 00:08:34.144
So if this works, let's see.

117
00:08:34.144 --> 00:08:39.952
Let me check if app js is importing
the supporting the router,

118
00:08:39.952 --> 00:08:45.537
I'm not seeing the import for
the store, which actually,

119
00:08:45.537 --> 00:08:50.355
this is the one,
I can call it a store here, right?

120
00:08:52.156 --> 00:08:53.857
&gt;&gt; Maximiliano Firtman: Now,
we are talking.

121
00:08:53.857 --> 00:08:57.989
So I'm importing the store,
even if it's called proxiedStore,

122
00:08:57.989 --> 00:09:01.404
the other side, I don't care,
I call it a store here.

123
00:09:01.404 --> 00:09:02.910
So now it should work.

124
00:09:02.910 --> 00:09:07.567
So let's try, let's use Canary.

125
00:09:07.567 --> 00:09:12.583
So, let's go back to the login screen.

126
00:09:12.583 --> 00:09:17.086
So if I try to log in, one, two, three,

127
00:09:17.086 --> 00:09:21.205
four, five, seven login, I mean.

128
00:09:21.205 --> 00:09:25.984
So I don't know if I save first,
I can check my store from here.

129
00:09:28.936 --> 00:09:32.660
&gt;&gt; Maximiliano Firtman: It's there,
so I have it client side now,

130
00:09:32.660 --> 00:09:35.875
and I can check also on application.

131
00:09:35.875 --> 00:09:41.515
I have a section for local storage,
and I can see here as well.

132
00:09:41.515 --> 00:09:48.046
That means that if I refresh, if I come
back in a month, jwt will be there.

133
00:09:48.046 --> 00:09:53.318
Unless I clear my browser cache or
whatever, that jwt will be there.

134
00:09:53.318 --> 00:10:00.402
So now I have the token saved client side
after registration and after logging.

