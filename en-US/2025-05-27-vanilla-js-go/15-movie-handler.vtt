WEBVTT

1
00:00:00.253 --> 00:00:01.985
&gt;&gt; Maximiliano Firtman: What's
the deal here?

2
00:00:01.985 --> 00:00:07.856
Now we need to send somehow that movie
repository to the movie handler.

3
00:00:07.856 --> 00:00:10.153
Remember, we have handlers.

4
00:00:10.153 --> 00:00:15.405
The handler is the one that is handling
the http request, so it speaks http,

5
00:00:15.405 --> 00:00:21.336
both the request and the writer, the
response writer, okay, that's the handler.

6
00:00:21.336 --> 00:00:25.826
Now we have the repository
that is picked SQL.

7
00:00:25.826 --> 00:00:30.268
It talks to the database,
that's the repository.

8
00:00:30.268 --> 00:00:34.999
We have the handler,
we have the repository.

9
00:00:34.999 --> 00:00:38.431
Now we need to connect both somehow, okay?

10
00:00:38.431 --> 00:00:40.731
For that, when we go to the handler,

11
00:00:40.731 --> 00:00:45.426
probably you don't remember that at
this point, but there is a to do here.

12
00:00:45.426 --> 00:00:49.973
So the movie handler was
a structure with no values, but

13
00:00:49.973 --> 00:00:54.054
now we can add value,
we can request values here.

14
00:00:54.054 --> 00:01:02.418
So for example, we can request that
we will have a storage of type.

15
00:01:02.418 --> 00:01:06.797
And here I can use movie repository or
movie storage.

16
00:01:06.797 --> 00:01:09.469
Those are the two types
that I have available.

17
00:01:09.469 --> 00:01:12.165
Which one do you feel we should use?

18
00:01:12.165 --> 00:01:15.947
Movie storage, movie repository?

19
00:01:15.947 --> 00:01:18.463
Probably you don't remember both.

20
00:01:18.463 --> 00:01:24.112
Movie storage is actually the interface.

21
00:01:24.112 --> 00:01:29.063
A movie repository is one
implementation of that interface.

22
00:01:29.063 --> 00:01:33.143
So which one should I use?

23
00:01:33.143 --> 00:01:36.184
The abstract or the implementation one?

24
00:01:36.184 --> 00:01:39.818
I'm defining the structure right now.

25
00:01:39.818 --> 00:01:43.212
I'm not creating the object,
so I should use?

26
00:01:43.212 --> 00:01:44.664
&gt;&gt; Speaker 2: It would be the interface.

27
00:01:44.664 --> 00:01:45.457
&gt;&gt; Maximiliano Firtman: The interface.

28
00:01:45.457 --> 00:01:46.528
So why?

29
00:01:46.528 --> 00:01:51.869
Because then we can finish
the rest of the code without

30
00:01:51.869 --> 00:01:57.693
actually knowing which exactly
implementation we have.

31
00:01:57.693 --> 00:01:59.389
So it's an abstraction layer.

32
00:01:59.389 --> 00:02:04.869
So we use the interface,
which means, anyone implementing

33
00:02:04.869 --> 00:02:10.032
those methods can be used as
our storage for the handler.

34
00:02:10.032 --> 00:02:15.494
So that will let us in the future
change the data provider.

35
00:02:15.494 --> 00:02:16.229
Does it make sense?

36
00:02:16.229 --> 00:02:18.685
Kind of?

37
00:02:18.685 --> 00:02:22.778
Then we can also have a logger as well.

38
00:02:22.778 --> 00:02:26.341
We can pass a pointer like that.

39
00:02:30.702 --> 00:02:35.436
&gt;&gt; Maximiliano Firtman: Now complaining
that I'm not using the movie repo,

40
00:02:35.436 --> 00:02:40.396
which is okay,
because I'm not passing it right now.

41
00:02:44.519 --> 00:02:46.584
&gt;&gt; Maximiliano Firtman: To
the MovieHandler.

42
00:02:46.584 --> 00:02:51.947
The logger is, in case you wanna
use the same logger, because here,

43
00:02:51.947 --> 00:02:56.479
it says to do logger error, so
now, instead of that to do,

44
00:02:56.479 --> 00:03:02.120
we can actually talk to h.logger, and
just this is an error, so we can,

45
00:03:02.120 --> 00:03:07.695
log that we have a JSON Encoding error,
so we can log that in our logger.

46
00:03:07.695 --> 00:03:11.657
So let's look back on this.

47
00:03:11.657 --> 00:03:16.975
We get the movies,
it's still returning an empty array,

48
00:03:16.975 --> 00:03:19.912
so we don't want that, right?

49
00:03:19.912 --> 00:03:23.354
So we want to access the database.

50
00:03:23.354 --> 00:03:25.750
Actually, that's the goal.

51
00:03:25.750 --> 00:03:27.865
So we will get there.

52
00:03:27.865 --> 00:03:32.785
So, one more thing is that
if you go to main.go,

53
00:03:32.785 --> 00:03:39.391
it's complaining a movieRepo is
not being used and it's right.

54
00:03:39.391 --> 00:03:45.965
So we are creating our instance of
movie handler here, okay, at the top.

55
00:03:45.965 --> 00:03:52.783
Let me move that down a little bit
after we initialize the repository.

56
00:03:52.783 --> 00:03:56.797
The thing is that this is the we
are contracting the instance here.

57
00:03:56.797 --> 00:04:00.621
Well, we can define here.

58
00:04:00.621 --> 00:04:03.965
In our movie handler,
this is kind of a constructor, right?

59
00:04:03.965 --> 00:04:10.299
Or we can create our own factory as well
because we need to pass the movie repo.

60
00:04:10.299 --> 00:04:11.427
Does it make sense?

61
00:04:11.427 --> 00:04:15.315
So the movie repo should go to
the movie handler as something

62
00:04:15.315 --> 00:04:19.685
very similar as what we did here
when we were passing the database.

63
00:04:19.685 --> 00:04:21.323
Does it make sense?

64
00:04:21.323 --> 00:04:27.011
&gt;&gt; Maximiliano Firtman: Remember, we have
the handler, we have the repository.

65
00:04:27.011 --> 00:04:30.511
The handler needs the repository.

66
00:04:30.511 --> 00:04:37.398
So that's why when we created this,
the structure has now the storage.

67
00:04:37.398 --> 00:04:39.348
So how can I pass the storage
to that movie handler?

68
00:04:42.228 --> 00:04:43.076
&gt;&gt; Maximiliano Firtman: Question for
you, .storage.

69
00:04:45.225 --> 00:04:50.150
&gt;&gt; Speaker 2: You just
initialize it in line.

70
00:04:50.150 --> 00:04:51.127
Couldn't you?

71
00:04:51.127 --> 00:04:54.053
&gt;&gt; Maximiliano Firtman: I can
just initialize in line, how?

72
00:04:54.053 --> 00:04:57.776
&gt;&gt; Speaker 2: Storage:
&gt;&gt; Maximiliano Firtman: Storage: here and

73
00:04:57.776 --> 00:04:59.479
I pass the movieRepo.

74
00:04:59.479 --> 00:05:00.551
The repo, okay?

75
00:05:00.551 --> 00:05:07.706
And then we'll see if it's complaining or
not and why it's complaining.

76
00:05:07.706 --> 00:05:10.362
I can also pass the logger.

77
00:05:12.787 --> 00:05:17.020
&gt;&gt; Maximiliano Firtman: This is
the automatic initializer that we have

78
00:05:17.020 --> 00:05:20.284
available in go for go structures.

79
00:05:20.284 --> 00:05:23.957
This is kind of a new so
think about JavaScript.

80
00:05:23.957 --> 00:05:28.883
If it is JavaScript,
this is gonna be like new movie handler,

81
00:05:28.883 --> 00:05:33.432
and you're passing the movie repo and
the log instance,

82
00:05:33.432 --> 00:05:37.056
and internally, it will save those values.

83
00:05:37.056 --> 00:05:41.226
Why is like I cannot access
the storage like this.

84
00:05:41.226 --> 00:05:44.592
There is a quick and
straight answer to that.

85
00:05:44.592 --> 00:05:46.041
&gt;&gt; Speaker 2: Lowercase s.

86
00:05:46.041 --> 00:05:47.262
&gt;&gt; Maximiliano Firtman: Lowercase s.

87
00:05:47.262 --> 00:05:51.469
My storage is lowercase s,
so I can it's not public,

88
00:05:51.469 --> 00:05:55.768
if not the other option is you,
it was uppercase S, and

89
00:05:55.768 --> 00:06:01.492
then you pass it like this from here,
like storage = movieRepo, okay?

90
00:06:01.492 --> 00:06:04.674
Does it make sense?

91
00:06:04.674 --> 00:06:07.573
&gt;&gt; Speaker 2: But when you do it directly,
you don't have to,

92
00:06:07.573 --> 00:06:10.486
it doesn't matter if it's upper or
lower case.

93
00:06:10.486 --> 00:06:14.160
&gt;&gt; Maximiliano Firtman: What I'm
doing here.

94
00:06:14.160 --> 00:06:15.286
You say?

95
00:06:15.286 --> 00:06:18.051
Yeah, because this is
kind of an initializer.

96
00:06:18.051 --> 00:06:22.056
The idea is that every structure,
when you create a structure,

97
00:06:22.056 --> 00:06:25.469
you have an initializer,
an automatic initializer,

98
00:06:25.469 --> 00:06:30.306
where you can pass the values of each
property that you have in the structure.

99
00:06:30.306 --> 00:06:32.395
&gt;&gt; Speaker 2: Then it doesn't
really matter the case.

100
00:06:32.395 --> 00:06:35.207
&gt;&gt; Maximiliano Firtman: No,
in that case doesn't really matter.

101
00:06:35.207 --> 00:06:39.244
So when you construct
an instance of that structure,

102
00:06:39.244 --> 00:06:42.575
you can pass anything, okay, make sense?

103
00:06:42.575 --> 00:06:46.054
It's complaining because it says,

104
00:06:46.054 --> 00:06:51.559
what do you think about this
missing coma before new line?

105
00:06:51.559 --> 00:06:53.878
Do you know what's going on
there with the trailing coma?

106
00:07:01.567 --> 00:07:04.107
&gt;&gt; Maximiliano Firtman: So
there is a trailing comma always in Go.

107
00:07:04.107 --> 00:07:07.084
That depends on how you're writing this,

108
00:07:07.084 --> 00:07:10.893
it should be there or not,
the trailing comma, okay?

109
00:07:10.893 --> 00:07:14.803
To be honest here,
there are many ways to solve the problem.

110
00:07:14.803 --> 00:07:17.884
So in Go,
you decide how you wanna do that.

111
00:07:17.884 --> 00:07:22.631
I mean, if you prefer to make
the storage public, you can do that.

112
00:07:22.631 --> 00:07:25.167
So we go to the handler.

113
00:07:25.167 --> 00:07:30.254
The only thing is that S storage
like this, or, let's say that they

114
00:07:30.254 --> 00:07:35.718
prefer ways to create the new factory,
as we did with the other options.

115
00:07:35.718 --> 00:07:40.330
Okay, so well, now it's complaining

116
00:07:40.330 --> 00:07:44.673
because my logger is L, it's okay.

117
00:07:44.673 --> 00:07:51.211
And so movieHandler, so
now I can pass the storage from here,

118
00:07:51.211 --> 00:07:56.238
so it's up to you, okay,
have the movie repo,

119
00:07:56.238 --> 00:08:00.170
and then I have the logger like that.

120
00:08:03.595 --> 00:08:11.446
&gt;&gt; Maximiliano Firtman: So I think it's
a good time to go back to our diagram.

121
00:08:11.446 --> 00:08:16.899
Let's see where we are.

122
00:08:16.899 --> 00:08:20.602
So we are, remember, at the backend GO.

123
00:08:20.602 --> 00:08:25.710
So we have handlers,
we have modelRepositories,

124
00:08:25.710 --> 00:08:29.049
we have models and the database.

125
00:08:29.049 --> 00:08:32.854
So the handler is the one
that speaks HTTP.

126
00:08:32.854 --> 00:08:37.634
Now the handler has a pointer
to a model repository,

127
00:08:37.634 --> 00:08:40.674
that repository is in this case,

128
00:08:40.674 --> 00:08:46.214
movie repository speaks sequel,
so it talks to our tables,

129
00:08:46.214 --> 00:08:52.211
and from there it actually creates
models to slices of our model.

130
00:08:52.211 --> 00:08:58.813
So a collection of movies and
is giving to the handler movies.

131
00:08:58.813 --> 00:09:04.142
And then the handler will actually
take those movies and send JSON back.

132
00:09:06.199 --> 00:09:09.065
&gt;&gt; Maximiliano Firtman: Does
it make sense?

133
00:09:09.065 --> 00:09:16.890
So we're missing the last part because
now our handler here now has movies.

134
00:09:16.890 --> 00:09:21.176
It's hard coded, so I don't want that.

135
00:09:21.176 --> 00:09:22.166
What do we want?

136
00:09:22.166 --> 00:09:25.710
To ask-
&gt;&gt; Speaker 2: Storage.

137
00:09:25.710 --> 00:09:26.825
&gt;&gt; Maximiliano Firtman: Storage.

138
00:09:26.825 --> 00:09:28.350
&gt;&gt; Speaker 2: Method.

139
00:09:28.350 --> 00:09:29.878
&gt;&gt; Maximiliano Firtman: To GetTopMovies.

140
00:09:31.089 --> 00:09:34.248
&gt;&gt; Maximiliano Firtman: Okay,
it's giving an error, why?

141
00:09:34.248 --> 00:09:42.125
Because the signature of GetTopMovies
is two variables, not one.

142
00:09:42.125 --> 00:09:43.436
Why is that?

143
00:09:43.436 --> 00:09:46.540
Because you may always get an error.

144
00:09:50.582 --> 00:09:51.870
&gt;&gt; Maximiliano Firtman: Makes sense?

145
00:09:51.870 --> 00:09:57.138
In this case, the error is being
propagated from the database

146
00:09:57.138 --> 00:10:01.697
to the repository,
the repository to the handler and

147
00:10:01.697 --> 00:10:05.461
the handler should send
that to the client.

148
00:10:05.461 --> 00:10:09.943
Okay, so
if there is if error is not nil, so

149
00:10:09.943 --> 00:10:14.435
if there is an error nil,
what should I do?

150
00:10:14.435 --> 00:10:19.847
Now I need to send propagate
that error to the client.

151
00:10:19.847 --> 00:10:25.517
Client of the handler,
I mean, the handler is HTTP,

152
00:10:25.517 --> 00:10:30.431
so I should call, for
example, the error send

153
00:10:30.431 --> 00:10:35.110
this writer, the error is, I don't know.

154
00:10:35.110 --> 00:10:39.861
We don't know why, okay,
but it's not working.

155
00:10:39.861 --> 00:10:43.961
We couldn't get the top movies.

156
00:10:43.961 --> 00:10:48.423
So we are propagating the error.

157
00:10:48.423 --> 00:10:54.021
We are always receiving the error,
and each layer decides what to do.

158
00:10:54.021 --> 00:10:57.522
Also here we can talk to our logger.

159
00:10:57.522 --> 00:11:00.681
So h, we should have a logger.

160
00:11:00.681 --> 00:11:04.959
And we can save something like,

161
00:11:04.959 --> 00:11:10.029
let's say, Get Top Movies, error,

162
00:11:10.029 --> 00:11:14.788
we can pass the error to our logger.

163
00:11:17.830 --> 00:11:20.599
&gt;&gt; Maximiliano Firtman: Okay, make sense?

164
00:11:20.599 --> 00:11:24.921
So we have now basic backend in layers.

165
00:11:24.921 --> 00:11:27.849
HTTP talks to a handler.

166
00:11:27.849 --> 00:11:30.598
Actually we go to main.

167
00:11:30.598 --> 00:11:34.222
In main we take based on the URL,

168
00:11:34.222 --> 00:11:38.398
based on the path, we use a handler.

169
00:11:38.398 --> 00:11:43.173
The handler has all this information.

170
00:11:43.173 --> 00:11:45.142
The movie handler has the storage and
the logger.

171
00:11:45.142 --> 00:11:50.141
So when we get into the handler,
the handler is talking to each storage.

172
00:11:50.141 --> 00:11:51.824
It's an abstract storage.

173
00:11:51.824 --> 00:11:56.784
It's an interface, it doesn't know
the exact implementation of that,

174
00:11:56.784 --> 00:12:00.951
and it's asking for get the movies and
get the movies will go.

175
00:12:00.951 --> 00:12:05.497
The implementation of that,
it's a repository will go to SQL.

176
00:12:05.497 --> 00:12:09.556
There is one disadvantage of
using this abstract layer,

177
00:12:09.556 --> 00:12:14.458
the interface, is that if I use
control click or command click here,

178
00:12:14.458 --> 00:12:20.564
I'm not going to the implementation of
GetTopMovies, I'm going to the interface.

179
00:12:20.564 --> 00:12:24.472
A little issue when you
are browsing in your code,

180
00:12:24.472 --> 00:12:27.357
because it goes to the abstract one,

181
00:12:27.357 --> 00:12:32.677
it doesn't know exactly which one
is going to be used in execution.

182
00:12:32.677 --> 00:12:36.439
So you need to go and
find it here and GetMovies,

183
00:12:36.439 --> 00:12:40.309
it's the one that is
actually making the query.

184
00:12:40.309 --> 00:12:43.336
It's actually this one GetTopMovies.

185
00:12:43.336 --> 00:12:46.802
I know it feels like a lot,
but once you have it,

186
00:12:46.802 --> 00:12:50.618
the rest of the services
are more straightforward,

187
00:12:50.618 --> 00:12:55.474
okay, and you understand the layers
that we have, the handlers,

188
00:12:55.474 --> 00:13:00.678
handling http, then we have data
repositories that are handling SQL,

189
00:13:00.678 --> 00:13:04.441
and they communication
between both is the model.

