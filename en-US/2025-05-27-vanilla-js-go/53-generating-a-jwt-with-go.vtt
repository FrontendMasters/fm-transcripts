WEBVTT

1
00:00:00.245 --> 00:00:04.717
&gt;&gt; Maximiliano Firtman: So to do that,
we also need to create a web token.

2
00:00:04.717 --> 00:00:10.152
And for that, there is another package for
go, because we are not going

3
00:00:10.152 --> 00:00:16.141
to do it manually from this, it's called
Golang JWT, JSON web token, okay.

4
00:00:16.141 --> 00:00:19.865
So we are going to use that library
because, I mean, we can do it manually,

5
00:00:19.865 --> 00:00:24.319
but again, we are encrypting, decrypting,
but we don't wanna do it manually, okay?

6
00:00:24.319 --> 00:00:29.258
So we are going to also
install this as well.

7
00:00:29.258 --> 00:00:32.326
So following the readme,

8
00:00:32.326 --> 00:00:38.182
we are currently getting
to the end of the course,

9
00:00:38.182 --> 00:00:41.807
so we are right now here at G6,

10
00:00:41.807 --> 00:00:46.421
so we need to also add this dependency.

11
00:00:46.421 --> 00:00:47.722
So I'm going to open a terminal.

12
00:00:50.761 --> 00:00:54.787
&gt;&gt; Maximiliano Firtman: I'm
gonna stop my server,

13
00:00:54.787 --> 00:00:59.345
add Golang JWT, there we are.

14
00:00:59.345 --> 00:01:03.332
Now let's restart a sever there.

15
00:01:03.332 --> 00:01:08.657
And now we can create a token,
okay and make it work.

16
00:01:08.657 --> 00:01:12.083
And now we need to go back
to the server for a while,

17
00:01:12.083 --> 00:01:17.075
to make all the code to actually create
the token and validate the token.

18
00:01:17.075 --> 00:01:22.330
And the idea will be, the token will
be just a string, an encrypted data.

19
00:01:22.330 --> 00:01:24.988
We will send that token after login,

20
00:01:24.988 --> 00:01:29.199
successful login, and
after successful registration.

21
00:01:29.199 --> 00:01:34.157
And then the client will
store that somewhere, so

22
00:01:34.157 --> 00:01:39.007
next API calls,
it will also attach that token.

23
00:01:39.007 --> 00:01:42.842
So it will say, hey, this is me, this
is me, I have credentials, this is me,

24
00:01:42.842 --> 00:01:43.959
that's how it works.

25
00:01:43.959 --> 00:01:48.682
Now we need to create, we're going
to create a new package for this, so

26
00:01:48.682 --> 00:01:52.647
with a new folder,
not inside handlers, actually there.

27
00:01:52.647 --> 00:01:57.519
So let's call this token, and
inside token, we're going to create

28
00:01:57.519 --> 00:02:02.561
actually 3 files, I mean,
lemme just one file with three functions,

29
00:02:02.561 --> 00:02:06.448
we need three functions, so
we just to separate this.

30
00:02:06.448 --> 00:02:11.270
We actually encrypt the token
remember that I mentioned

31
00:02:11.270 --> 00:02:16.205
that the JWT is encrypted,
and the server knows the key.

32
00:02:16.205 --> 00:02:19.417
So the key is string, so

33
00:02:19.417 --> 00:02:24.718
the first thing that we will need to do is

34
00:02:24.718 --> 00:02:29.872
to actually get the JWT secret dot go.

35
00:02:29.872 --> 00:02:32.119
What's the secret, the key.

36
00:02:32.119 --> 00:02:35.644
And where are we going to store that,

37
00:02:35.644 --> 00:02:41.004
we can hard code it, or
we can use dot m, remember dot m?

38
00:02:41.004 --> 00:02:46.496
So I can add here another thing
can be JWT secret for example.

39
00:02:46.496 --> 00:02:51.553
And we can put a string here,
anything, the larger, the better.

40
00:02:51.553 --> 00:02:54.635
And you should store this safely.

41
00:02:54.635 --> 00:02:56.939
No one should access this anymore,.

42
00:02:56.939 --> 00:03:02.311
You can do random strings wherever,
okay, where are websites that

43
00:03:02.311 --> 00:03:07.693
you can will give you a secret,
we can even ask chatgpt for a secret.

44
00:03:07.693 --> 00:03:12.941
I'm not sure if that's a good idea,
but create a secret for JWT for

45
00:03:12.941 --> 00:03:19.221
me, anything that's the key, okay,
that we will use to encrypt that token and

46
00:03:19.221 --> 00:03:23.293
decrypt that token when
the client send us a token.

47
00:03:23.293 --> 00:03:28.824
Okay, so we need to get that,
that that secret we can and

48
00:03:28.824 --> 00:03:33.431
we don't need,
we can write this, get them.

49
00:03:33.431 --> 00:03:37.596
We have already done this, so
I will just get it from here, we have it.

50
00:03:37.596 --> 00:03:39.365
We've done this is pretty straightforward.

51
00:03:39.365 --> 00:03:43.363
It's reading from
the environmental variable needs.

52
00:03:43.363 --> 00:03:46.150
&gt;&gt; Speaker 2: That one
needs a dot go extension.

53
00:03:46.150 --> 00:03:49.622
&gt;&gt; Maximiliano Firtman: Yeah,
you're right, not a dot o, a dot go and

54
00:03:49.622 --> 00:03:55.069
also it's complaining because I need
to start always with the package.

55
00:03:55.069 --> 00:03:59.937
And what I'm saving now,
it's adding the logger and everything, and

56
00:03:59.937 --> 00:04:04.402
I'm receiving the logger because
if we cannot read that, okay,

57
00:04:04.402 --> 00:04:08.075
we should log that we
couldn't read that log, okay?

58
00:04:08.075 --> 00:04:11.775
So that's the first step,
then we need to create a token.

59
00:04:11.775 --> 00:04:16.122
So we need to create another one for
creation,

60
00:04:16.122 --> 00:04:20.138
can be creation dot go,
and this is a code.

61
00:04:20.138 --> 00:04:24.651
This case, we are using the library,
it's not complicated, but

62
00:04:24.651 --> 00:04:29.496
let me show you how that works based
on this, there we are, create JWT.

63
00:04:29.496 --> 00:04:32.231
So I'm receiving a user and a logger.

64
00:04:32.231 --> 00:04:36.300
The logger is for
sending messages to the logger, so

65
00:04:36.300 --> 00:04:40.380
we need to create the JWT secret,
okay, like this.

66
00:04:40.380 --> 00:04:42.747
So this is that, I'm sorry,

67
00:04:42.747 --> 00:04:47.588
this is actually calling our get
WT secret that we have here.

68
00:04:47.588 --> 00:04:51.258
It's reading the secret from the dot m,
that's the secret.

69
00:04:51.258 --> 00:04:55.453
Then we integrate a new token with claims,
I say, with what with claims.

70
00:04:55.453 --> 00:04:59.733
First, it needs the method that
we are using to sign this.

71
00:04:59.733 --> 00:05:03.437
It had to do with internals of
the cryptography, it doesn't matter, and

72
00:05:03.437 --> 00:05:04.525
then we have claims.

73
00:05:04.525 --> 00:05:09.489
What's the claim, this is data
that we will save in the token,

74
00:05:09.489 --> 00:05:11.745
and then we will encrypt it.

75
00:05:11.745 --> 00:05:17.034
So that is known as a claim
from the JWT spec, right?

76
00:05:17.034 --> 00:05:22.307
In this case, I'm saving the user ID,
the user email, and

77
00:05:22.307 --> 00:05:28.007
the name and the expiration,
72 hours, you can change that.

78
00:05:28.007 --> 00:05:31.510
It needs a time in Unix timestamp.

79
00:05:31.510 --> 00:05:38.337
So the amount of milliseconds that
happened since 1st of January, 1970.

80
00:05:38.337 --> 00:05:43.362
But here you say this is now,
plus 72 hours, so

81
00:05:43.362 --> 00:05:48.633
we can say days, okay,
and you multiply these by,

82
00:05:48.633 --> 00:05:55.760
five days or things like that,
okay, we have some constants there.

83
00:05:55.760 --> 00:05:59.826
And then we sign the token
with the secret, and

84
00:05:59.826 --> 00:06:05.155
that's the token string, and
that's we are getting back.

85
00:06:05.155 --> 00:06:09.296
Okay, so
that's how you create a JSON web token.

86
00:06:09.296 --> 00:06:14.257
And then we need another one, not for
the creation, but actually for validation.

87
00:06:14.257 --> 00:06:19.599
So we have creation, and
let's add validation also that.

88
00:06:19.599 --> 00:06:23.352
I mean, it's pretty similar, but

89
00:06:23.352 --> 00:06:27.982
it's calling a different API, because for

90
00:06:27.982 --> 00:06:33.501
validation, we also need
to get the secret, okay?

91
00:06:33.501 --> 00:06:36.621
So we need to get the secret,
but what we're going to do,

92
00:06:36.621 --> 00:06:39.034
we're going to unsign the package, okay?

93
00:06:39.034 --> 00:06:43.440
And we're going to return the information.

94
00:06:43.440 --> 00:06:48.755
So validate JWT,
it returns the token that is unencrypted,

95
00:06:48.755 --> 00:06:51.882
so you can actually go back there and

96
00:06:51.882 --> 00:06:56.796
get the data from there, okay,
and we can get an email.

97
00:06:56.796 --> 00:07:02.172
So it's interesting to see that we
are actually saving users email in users'

98
00:07:02.172 --> 00:07:07.065
devices, but because it's encrypted,
you cannot go and change it.

99
00:07:07.065 --> 00:07:12.233
Because why JSON web token, why not
storing directly the email client side?

100
00:07:12.233 --> 00:07:16.964
So send me your email every time you
wanna do something, and I trust you.

101
00:07:16.964 --> 00:07:21.488
The problem is that I can go client
side and change the email and

102
00:07:21.488 --> 00:07:25.490
then I can act as someone else
because I can easily go and

103
00:07:25.490 --> 00:07:29.074
change my email and
you will trust that it's me.

104
00:07:29.074 --> 00:07:33.398
So with JWT, we are also saving
the email client side, but

105
00:07:33.398 --> 00:07:39.235
it's encrypted if you try to change that,
I will recognize server side that.

106
00:07:39.235 --> 00:07:45.440
That's wrong because when I
unencrypt that, it's not gonna work.

107
00:07:45.440 --> 00:07:49.210
So that's the idea, okay,
that's why the secret is so important,

108
00:07:49.210 --> 00:07:51.875
because the secret is
the one that you open that.

109
00:07:51.875 --> 00:07:55.304
And if your users get
access to your secret key,

110
00:07:55.304 --> 00:08:00.448
they will be able to open the JSON
web token, change the email address,

111
00:08:00.448 --> 00:08:04.856
pack it again and send you another
credential that is on you.

112
00:08:04.856 --> 00:08:10.788
And your server will trust it, so
we don't want that, okay, make sense?

113
00:08:10.788 --> 00:08:14.036
Okay, so now the next step, server side,

114
00:08:14.036 --> 00:08:20.017
is that we need to touch our two web
services for authentication and creation.

115
00:08:20.017 --> 00:08:25.729
Also, to our handlers,
when you have an account handler,

116
00:08:25.729 --> 00:08:30.986
remember that we do have
an authentication response,

117
00:08:30.986 --> 00:08:34.778
we are also going to add here the token.

118
00:08:34.778 --> 00:08:40.204
We can call it token or
JWT token or something,

119
00:08:40.204 --> 00:08:44.947
that in the in the readme, I call it JWT.

120
00:08:44.947 --> 00:08:49.218
So let's stay with that name,
there's gonna be a string, and for

121
00:08:49.218 --> 00:08:53.206
the JSON point of view,
it's just going to be lowercase jwt.

122
00:08:53.206 --> 00:08:58.382
So now when I'm responding
a registration or a login,

123
00:08:58.382 --> 00:09:04.806
I'm also sending you a JSON web
token to the client, okay, so now.

124
00:09:04.806 --> 00:09:07.909
&gt;&gt; Speaker 3: I think your
JWT needs a closing quote.

125
00:09:07.909 --> 00:09:10.214
&gt;&gt; Maximiliano Firtman: Yeah,
you're right, so I have a typo here,

126
00:09:10.214 --> 00:09:12.592
I'm not closing,
that will quote for there.

127
00:09:14.665 --> 00:09:16.730
&gt;&gt; Maximiliano Firtman: So now,
when we are registering here,

128
00:09:16.730 --> 00:09:19.745
when I'm creating the response,
so what do I need to do?

129
00:09:19.745 --> 00:09:25.763
I need to also set that new property,
and I'm going to get that from where?

130
00:09:25.763 --> 00:09:30.731
So it's token dot create token, but when
I'm trying this, I'm not seeing this, so

131
00:09:30.731 --> 00:09:34.329
be careful, because maybe it
auto imported the wrong token.

132
00:09:34.329 --> 00:09:39.585
So let me go up and, yeah,
it's important importing from go token,

133
00:09:39.585 --> 00:09:43.937
and I need to import from
frontend masters dom com token,

134
00:09:43.937 --> 00:09:48.399
movies token, okay, so
that's why it wasn't working.

135
00:09:48.399 --> 00:09:53.362
So when you do this, be careful and
check which one do you wanna import,

136
00:09:53.362 --> 00:09:54.291
I want mine.

137
00:09:54.291 --> 00:09:59.097
So now I will create
JWT that needs a user.

138
00:09:59.097 --> 00:10:05.783
So I can create a user like this very
quickly with, for example, the email.

139
00:10:05.783 --> 00:10:09.155
And that's the only thing that I
actually need to validate the user.

140
00:10:09.155 --> 00:10:14.445
But let's pass the name also just
because I have it right now, like that.

141
00:10:14.445 --> 00:10:21.216
Also it needs a logger in case
there is a problem with this.

142
00:10:22.447 --> 00:10:26.615
&gt;&gt; Maximiliano Firtman: And
I do have a logger there,

143
00:10:26.615 --> 00:10:32.710
let me adjust the parenthesis like this.

144
00:10:32.710 --> 00:10:37.446
So and also, I need to close the object.

145
00:10:37.446 --> 00:10:40.146
Let me see, I'm missing something here.

146
00:10:40.146 --> 00:10:45.558
So it's giving me an error because this is
Go, and in Go when you're doing multi-line

147
00:10:45.558 --> 00:10:50.838
initialization, you need the trailing
comma, it's a mandatory trailing comma.

148
00:10:50.838 --> 00:10:55.844
If you don't want the trailing comma,
you need to put everything in one line.

149
00:10:55.844 --> 00:10:58.596
Okay, that's for registration,
I also need to do, so

150
00:10:58.596 --> 00:11:01.476
that's because after registration,
you are logged in.

151
00:11:01.476 --> 00:11:04.519
I don't wanna log in, I mean,
you're already logged in.

152
00:11:04.519 --> 00:11:08.463
And authentication,
we need to do something similar.

153
00:11:08.463 --> 00:11:14.197
So we are going to set JWT and from token,
we're going to create the token.

154
00:11:14.197 --> 00:11:16.346
We also need to create the user.

155
00:11:16.346 --> 00:11:21.168
Right now, we don't have the name,
because we are logging in the user,

156
00:11:21.168 --> 00:11:25.451
we only have the email, which,
I mean, it's enough, for us.

157
00:11:25.451 --> 00:11:30.218
And then you also need to
pass the logger that I

158
00:11:30.218 --> 00:11:34.244
got from the outside, like so, and.

159
00:11:38.124 --> 00:11:42.439
&gt;&gt; Maximiliano Firtman: Actually
the email is coming for, from request,

160
00:11:42.439 --> 00:11:45.016
dot email, and that's all.

161
00:11:45.016 --> 00:11:46.928
So how do I know if this is working?

162
00:11:46.928 --> 00:11:51.670
Before going to the client, something
that I can do is I can use postman.

163
00:11:51.670 --> 00:11:56.586
So if I go to postman, I can try to
authenticate again and see what happens.

164
00:11:56.586 --> 00:11:58.541
And I'm getting it, I'm getting a 200.

165
00:12:03.684 --> 00:12:08.124
&gt;&gt; Maximiliano Firtman: And if I look
at the answer, I have the success,

166
00:12:08.124 --> 00:12:12.461
the message, and
I do have the JSON web token.

167
00:12:12.461 --> 00:12:16.244
So it's actually sending
me encrypted inside,

168
00:12:16.244 --> 00:12:21.423
we have the expiration, and also,
we have our own email address.

