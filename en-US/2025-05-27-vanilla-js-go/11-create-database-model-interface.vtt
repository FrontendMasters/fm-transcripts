WEBVTT

1
00:00:00.000 --> 00:00:02.997
&gt;&gt; Maximiliano Firtman: Okay, so we
need to get rid of the dummy data, okay?

2
00:00:02.997 --> 00:00:06.130
So it's time to go with real data.

3
00:00:06.130 --> 00:00:12.706
So we will start working
with our database, okay?

4
00:00:12.706 --> 00:00:17.456
So our database is actually
based in a SQL database.

5
00:00:17.456 --> 00:00:22.028
Of course, we could use a no
SQL database as well, but for

6
00:00:22.028 --> 00:00:25.857
this project,
I picked a SQL based structure.

7
00:00:25.857 --> 00:00:30.440
So in that case,
we have these entities and relationship

8
00:00:30.440 --> 00:00:35.507
between entities, so
we have users that we haven't used yet.

9
00:00:35.507 --> 00:00:40.861
This case, this is accounts, so
the users will have saved Movies.

10
00:00:40.861 --> 00:00:45.667
Movies have actors, that's the cast.

11
00:00:45.667 --> 00:00:50.241
And movies have genre and keywords.

12
00:00:50.241 --> 00:00:52.010
That's how it looks like.

13
00:00:52.010 --> 00:00:56.776
We need to normalize this,
because it's a SQL-like database.

14
00:00:56.776 --> 00:01:02.933
So in terms of tables that we will have,
we will have the users table,

15
00:01:02.933 --> 00:01:08.665
the movies table, the genre tables,
actors, user_movies,

16
00:01:08.665 --> 00:01:14.950
because the relationship between users and
movies is one to n, okay?

17
00:01:14.950 --> 00:01:17.224
So one user, many movies.

18
00:01:17.224 --> 00:01:20.220
I can bookmark,
I can make a fabric, many movies.

19
00:01:20.220 --> 00:01:26.428
So it's one to n, so
I need another table there.

20
00:01:26.428 --> 00:01:32.868
And of course, one movie can be added from
many users, so it's actually end to end.

21
00:01:32.868 --> 00:01:35.610
So that's why we need
a table in the middle.

22
00:01:35.610 --> 00:01:41.645
The same happens with actors, because
the same actor can be in many movies,

23
00:01:41.645 --> 00:01:44.111
and one movie has many actors.

24
00:01:44.111 --> 00:01:47.619
The same with keyboards and genres.

25
00:01:47.619 --> 00:01:52.113
So that's why we have user_movies,
movie_cast, movie_genre.

26
00:01:52.113 --> 00:01:59.031
So those are intermediate
tables with foreign keys, okay?

27
00:01:59.031 --> 00:02:01.015
Does it make sense?

28
00:02:01.015 --> 00:02:03.292
So that will be our table structure.

29
00:02:03.292 --> 00:02:08.337
We also have movie keywords, okay,
that will be, it's just strings,

30
00:02:08.337 --> 00:02:12.556
but the idea is that,
because it's many collection later,

31
00:02:12.556 --> 00:02:17.292
we can add another feature, for
example, to find similar movies.

32
00:02:17.292 --> 00:02:19.502
I mean, if you like the movie,

33
00:02:19.502 --> 00:02:23.763
you can find similar movies by
verifying the same keyword.

34
00:02:23.763 --> 00:02:30.345
For example, again, you are watching
a movie, a history movie, on World War II.

35
00:02:30.345 --> 00:02:37.289
Well, those are keyword,
World War II, history, maybe boats,

36
00:02:37.289 --> 00:02:43.005
and then you find other movies
with the same keywords.

37
00:02:43.005 --> 00:02:47.746
In that case, that would be homework,
so they prepare this, so then you

38
00:02:47.746 --> 00:02:52.669
will have by the end more work to do and
more features to add to this project.

39
00:02:52.669 --> 00:02:56.024
It's time to actually create our database.

40
00:02:56.024 --> 00:02:58.453
So to do that, first we need a provider.

41
00:02:58.453 --> 00:03:02.986
So you need to pick,
where are you going to save your database?

42
00:03:02.986 --> 00:03:07.642
If you have a Postgres local server,
you can use it.

43
00:03:07.642 --> 00:03:13.484
If not, you can use any of
the providers that we have available.

44
00:03:13.484 --> 00:03:18.391
Remember, let's go back to the list of

45
00:03:18.391 --> 00:03:23.159
providers that I know they will work.

46
00:03:23.159 --> 00:03:29.449
Supabase or aiven.io or neon.tech.

47
00:03:29.449 --> 00:03:31.563
Any of those will work.

48
00:03:31.563 --> 00:03:36.701
For example, let's take aiven.io,
for example.

49
00:03:36.701 --> 00:03:41.719
So I go
&gt;&gt; Maximiliano Firtman: To their website,

50
00:03:41.719 --> 00:03:47.567
they have many solutions, but
one specifically, it's for PostgreSQL.

51
00:03:47.567 --> 00:03:49.669
And there is a free plan available.

52
00:03:49.669 --> 00:03:55.308
You can always go to pricing and see if
that plan will be good enough for you.

53
00:03:55.308 --> 00:04:00.394
There are many information here,
okay, the features, and the free

54
00:04:00.394 --> 00:04:06.006
plan that fortunately has no credit
card requirements, so you need to add,

55
00:04:06.006 --> 00:04:11.195
it's five gigabytes of a storage,
which is a lot for our needs today.

56
00:04:11.195 --> 00:04:14.166
So you click, Get started for free.

57
00:04:14.166 --> 00:04:15.633
You just need to log in.

58
00:04:15.633 --> 00:04:17.438
I think I'm already logged in.

59
00:04:17.438 --> 00:04:22.147
And you can just log in with your Google
account or with your GitHub account and

60
00:04:22.147 --> 00:04:24.544
it creates an account in five minutes.

61
00:04:24.544 --> 00:04:26.284
Actually, five seconds.

62
00:04:26.284 --> 00:04:29.310
From here, you need to create a service.

63
00:04:29.310 --> 00:04:32.900
And there are many services
that they have, and

64
00:04:32.900 --> 00:04:35.697
you create the PostgresSQL server.

65
00:04:35.697 --> 00:04:39.283
So you pick that database that we want.

66
00:04:39.283 --> 00:04:41.735
And it says, do you want a full platform?

67
00:04:41.735 --> 00:04:46.177
Like a trial of 30 days for
free of the paid account or free plan.

68
00:04:46.177 --> 00:04:48.320
So let's go with the free plan.

69
00:04:48.320 --> 00:04:51.912
You can select the server,
the continent, or

70
00:04:51.912 --> 00:04:57.553
the country where that server will say,
remember, it's in the cloud.

71
00:04:57.553 --> 00:05:01.844
You can just pick wherever, and you set
a name, this is the name of an instance.

72
00:05:01.844 --> 00:05:06.072
I can call it on a that's
name of our project.

73
00:05:06.072 --> 00:05:09.316
And then you create the the service, okay?

74
00:05:09.316 --> 00:05:14.543
And for me, it's not giving the option
because I have only one for free.

75
00:05:14.543 --> 00:05:18.762
So that's why when I'm going back,
I really have one here,

76
00:05:18.762 --> 00:05:21.089
okay, that is already running.

77
00:05:21.089 --> 00:05:29.065
So when you get into it, the most
important part here is this service URI.

78
00:05:29.065 --> 00:05:35.021
So, this is the string that we'll
need to copy and paste in our code.

79
00:05:35.021 --> 00:05:36.539
So that will be the next step.

80
00:05:36.539 --> 00:05:38.410
Actually, it says,
click to reveal password.

81
00:05:38.410 --> 00:05:42.326
So if you click here, okay,
I'm gonna delete my instance anyway later.

82
00:05:42.326 --> 00:05:47.144
So it doesn't matter if you
see my password, but actually,

83
00:05:47.144 --> 00:05:51.029
this is what we need to copy and
paste in our code.

84
00:05:51.029 --> 00:05:53.644
We're going to do that
actually in two places.

85
00:05:53.644 --> 00:05:56.288
One is gonna be for the import or

86
00:05:56.288 --> 00:06:01.899
installation script that will
actually populate the database.

87
00:06:01.899 --> 00:06:06.407
And then for our actually server, okay?

88
00:06:06.407 --> 00:06:11.006
But first, before actually trying
to connect to the database,

89
00:06:11.006 --> 00:06:13.829
let's populate the database, okay?

90
00:06:13.829 --> 00:06:15.999
It doesn't matter if it's
your local instance or

91
00:06:15.999 --> 00:06:17.454
if it's one of these providers.

92
00:06:17.454 --> 00:06:19.759
Going back to our project,

93
00:06:19.759 --> 00:06:24.879
there is an import folder here
that has a database dump file.

94
00:06:24.879 --> 00:06:29.417
There is actually a dump
that I did from my instance.

95
00:06:29.417 --> 00:06:34.518
So here we have everything we
need to create the tables and

96
00:06:34.518 --> 00:06:38.145
to insert the data in the tables, okay?

97
00:06:38.145 --> 00:06:43.865
So here we can see the structure
of the table, for example, actors,

98
00:06:43.865 --> 00:06:49.695
we have an ID that they have a sequence,
it's actually auto numeric.

99
00:06:49.695 --> 00:06:53.394
It's creating an ID,
an automatic ID, first name,

100
00:06:53.394 --> 00:06:57.027
last name, image, URL,
and the primary key is ID.

101
00:06:57.027 --> 00:06:59.308
So, pretty straightforward.

102
00:06:59.308 --> 00:07:04.461
Then we have genre, it's ID and
name and primary key, nothing so fancy.

103
00:07:04.461 --> 00:07:09.970
The same for keywords, movie cast,
it's movie ID and actor ID.

104
00:07:09.970 --> 00:07:14.277
And it's compound primary key,
both are the primary key.

105
00:07:14.277 --> 00:07:18.868
So the same actor cannot
be twice in the same movie.

106
00:07:18.868 --> 00:07:21.971
Movie genre, so nothing really important.

107
00:07:21.971 --> 00:07:26.527
And the largest table that
we have is actually movies,

108
00:07:26.527 --> 00:07:33.175
with all the properties and the primary
key, and actually that's all, okay?

109
00:07:33.175 --> 00:07:37.833
And, well, users, and
then we have the data, okay?

110
00:07:37.833 --> 00:07:40.503
We insert into blah, blah, blah value.

111
00:07:40.503 --> 00:07:45.538
So, how we put this Is into our database.

112
00:07:45.538 --> 00:07:50.349
If you have a tool to connect to your
database, for example, I have one here,

113
00:07:50.349 --> 00:07:55.249
it's called TablePlus it's for Mac only,
but there are for Windows as well.

114
00:07:55.249 --> 00:08:02.340
You can even use the same tools
that we typically use for MySQL.

115
00:08:02.340 --> 00:08:03.711
So you connect to a Postgres.

116
00:08:03.711 --> 00:08:08.597
You can use .ui, so
it's a desktop UI to connect to

117
00:08:08.597 --> 00:08:13.598
your table, and then you can copy and
paste the SQL or

118
00:08:13.598 --> 00:08:19.071
you can go to file import and
you can import from SQL dump.

119
00:08:19.071 --> 00:08:20.337
Okay, that's one option.

120
00:08:20.337 --> 00:08:25.381
But maybe you don't have these tools or,
this is important,

121
00:08:25.381 --> 00:08:30.912
maybe you wanna automatize the idea
of installing this in a server.

122
00:08:30.912 --> 00:08:34.077
So you wanna deploy this in a server, and

123
00:08:34.077 --> 00:08:39.489
as part of your initial script,
you just wanna do it automatically.

124
00:08:39.489 --> 00:08:41.782
You don't wanna do it manually.

125
00:08:41.782 --> 00:08:46.669
So for that, ARA have for
you an install.go script.

126
00:08:46.669 --> 00:08:50.312
There is actually,
right now it's in the same project, but

127
00:08:50.312 --> 00:08:52.680
it's kind of a separate thing, okay?

128
00:08:52.680 --> 00:08:56.963
It's a separate Go file, that will
actually connect to your database,

129
00:08:56.963 --> 00:09:00.768
take that file, and
will execute that file over your database.

130
00:09:00.768 --> 00:09:05.907
So it will create the tables, and
it will populate all the data.

131
00:09:05.907 --> 00:09:07.366
Does it make sense?

132
00:09:07.366 --> 00:09:12.413
The only mandatory part is that we
need to replace the connection string.

133
00:09:12.413 --> 00:09:18.396
So if you're going to use
&gt;&gt; Maximiliano Firtman: Aiven,

134
00:09:18.396 --> 00:09:23.206
well, I can copy this,
so I can copy this and

135
00:09:23.206 --> 00:09:27.371
then replace the connection string.

136
00:09:27.371 --> 00:09:30.480
I mean, if you look at the code,
it's pretty straightforward.

137
00:09:30.480 --> 00:09:35.511
It opens the file, then just to tell
you quickly what this is actually

138
00:09:35.511 --> 00:09:40.736
doing is removing the comments, so
it's not executing the comments.

139
00:09:40.736 --> 00:09:44.742
And also,
it's splitting the string by semi colon,

140
00:09:44.742 --> 00:09:49.462
which means it's actually
recognizing all the statements and

141
00:09:49.462 --> 00:09:53.127
then it's executing each
statement one by one.

142
00:09:53.127 --> 00:09:57.357
So now if I open the terminal,
I open a new terminal,

143
00:09:57.357 --> 00:10:01.405
the other one is my server,
I get into the folder.

144
00:10:01.405 --> 00:10:04.877
So, change directory into import.

145
00:10:08.233 --> 00:10:13.091
&gt;&gt; Maximiliano Firtman: Now, I don't
need to use AR, just a plain script.

146
00:10:13.091 --> 00:10:17.602
Go, run, install.go.

147
00:10:19.974 --> 00:10:24.462
&gt;&gt; Maximiliano Firtman: It will go there
to the database and install everything.

148
00:10:24.462 --> 00:10:25.208
In my case,

149
00:10:25.208 --> 00:10:30.597
it's complaining because I already have
the data in this particular server, okay?

150
00:10:30.597 --> 00:10:35.899
So if I wanna execute this,
I can delete everything first.

151
00:10:35.899 --> 00:10:41.174
So I can delete everything because it's
complaining because of the ordering,

152
00:10:41.174 --> 00:10:44.480
why I'm in order in which
I'm deleting the data,

153
00:10:44.480 --> 00:10:47.961
because I need to delete
the data in cascade, okay?

154
00:10:47.961 --> 00:10:54.275
But if I truncate all the tables and
drop all the tables, okay, it will work.

155
00:10:54.275 --> 00:10:59.690
Have in mind it will take some time,
just 40 seconds, 1 minute,

156
00:10:59.690 --> 00:11:04.725
not more than that, okay, to send and
execute all the table for

157
00:11:04.725 --> 00:11:08.242
you, and you will get something like this.

158
00:11:08.242 --> 00:11:15.478
So you will get all your movies in
a table with all the properties inside.

159
00:11:15.478 --> 00:11:21.469
There are other ways to do that as well,
if you have the data in CSV format.

160
00:11:21.469 --> 00:11:27.498
PostgresSQL has a way to send or
import from CSV.

161
00:11:27.498 --> 00:11:31.144
In this case, you typically use
the Postgres terminal to do that.

162
00:11:31.144 --> 00:11:35.208
It has to do more with specific
of this particular database, but

163
00:11:35.208 --> 00:11:36.723
this script will work.

164
00:11:36.723 --> 00:11:43.424
And later, if you need to change that for
other database, it will probably work.

165
00:11:43.424 --> 00:11:47.502
So if everything works,
now we have data in the database.

166
00:11:47.502 --> 00:11:52.639
So we need to move on and of course,
the next step will be, well,

167
00:11:52.639 --> 00:11:58.079
we need to go to our Go project and
actually connect to the database.

