WEBVTT

1
00:00:00.017 --> 00:00:05.134
&gt;&gt; Maximiliano Flirtman: So far, the only
thing that we have is the model here.

2
00:00:05.134 --> 00:00:06.660
Why are we creating the model?

3
00:00:06.660 --> 00:00:12.664
Because we want the handler
to actually grab from a URL,

4
00:00:12.664 --> 00:00:17.914
grab the movies and
download the movies in JSON.

5
00:00:17.914 --> 00:00:22.096
Okay, so
we are we are now coding the back In, and

6
00:00:22.096 --> 00:00:27.298
the whole idea of making a model
is that we want to have an API,

7
00:00:27.298 --> 00:00:32.708
a Restful API, that can let us
take the movies from the server.

8
00:00:32.708 --> 00:00:35.396
And the server is taking
that from database.

9
00:00:35.396 --> 00:00:37.836
For that, we use handlers.

10
00:00:37.836 --> 00:00:39.742
So we need a handler.

11
00:00:39.742 --> 00:00:44.713
So far, we are using the server
only to serve static files.

12
00:00:44.713 --> 00:00:47.933
We need to move one step further and

13
00:00:47.933 --> 00:00:53.166
actually create a handler for,
for example, movies.

14
00:00:53.166 --> 00:00:56.345
Let's start with movies,
and then we do the others.

15
00:00:56.345 --> 00:00:58.477
So where are the handlers right now?

16
00:00:58.477 --> 00:01:01.003
They are at main.go.

17
00:01:01.003 --> 00:01:03.309
In our main.go I have only one handler.

18
00:01:03.309 --> 00:01:10.485
This is our handler for
static files, okay?

19
00:01:10.485 --> 00:01:12.463
The frontend.

20
00:01:12.463 --> 00:01:19.149
So now we need another handler
to actually do something else.

21
00:01:19.149 --> 00:01:24.608
But for that, instead of writing
everything here as a function,

22
00:01:24.608 --> 00:01:30.082
maybe it's a good idea to create
something like the file server.

23
00:01:30.082 --> 00:01:33.386
The file server has its own I mean,
it's from the from go,

24
00:01:33.386 --> 00:01:35.015
from the standard library.

25
00:01:35.015 --> 00:01:38.443
It's actually doing its
stuff somewhere else.

26
00:01:38.443 --> 00:01:40.482
So something similar when you hear.

27
00:01:40.482 --> 00:01:44.056
So I'm going to create another package for
my handlers.

28
00:01:44.056 --> 00:01:46.149
Remember, what's a handler?

29
00:01:46.149 --> 00:01:52.568
It's a value that will handle
one particular type of URL,

30
00:01:52.568 --> 00:01:57.157
in this case, the API for movies, okay?

31
00:01:57.157 --> 00:01:59.922
So my goal is something like this.

32
00:01:59.922 --> 00:02:06.240
I wanna type localhost
8080/api/movies/,top.

33
00:02:06.240 --> 00:02:10.077
And then when I get all the top movies,
okay, of course, now it's 404.

34
00:02:10.077 --> 00:02:17.072
So my goal is to see a JSON file there
with the top movies from the database.

35
00:02:17.072 --> 00:02:21.680
So I need a handler, and
we're going to write that

36
00:02:21.680 --> 00:02:25.761
handler directly in another value, okay?

37
00:02:25.761 --> 00:02:31.476
So that's why I'm creating a package for
a folder for

38
00:02:31.476 --> 00:02:38.715
my handlers, and within that package
I'm going to create a movie,

39
00:02:38.715 --> 00:02:43.682
can be handler or handlers.go, it depends.

40
00:02:43.682 --> 00:02:46.474
Why?
Because we can use the same file to write

41
00:02:46.474 --> 00:02:51.106
different handlers because maybe we
have the top movies, we have another

42
00:02:51.106 --> 00:02:55.608
handler for one movie, so give me
the digits of only one movie and so on.

43
00:02:55.608 --> 00:02:58.825
So we create package handlers.

44
00:03:01.008 --> 00:03:05.787
&gt;&gt; Maximiliano Flirtman: And
the whole idea here is that I'm going

45
00:03:05.787 --> 00:03:09.592
to create a type movie handler.

46
00:03:09.592 --> 00:03:11.095
There is an instructor.

47
00:03:11.095 --> 00:03:12.943
For now, I will keep that empty.

48
00:03:12.943 --> 00:03:14.878
Remember, why are we doing this?

49
00:03:14.878 --> 00:03:20.421
This is how you create something
similar to object, you can go.

50
00:03:20.421 --> 00:03:23.296
So I'm creating a movie handler object.

51
00:03:23.296 --> 00:03:27.336
Let's say it's called value,
it's a structure but

52
00:03:27.336 --> 00:03:29.954
let's say object for now, okay?

53
00:03:29.954 --> 00:03:34.202
It's pretty bad that term from
a goal point of view, okay?

54
00:03:34.202 --> 00:03:38.340
We don't use the idea of objects but
anyway.

55
00:03:38.340 --> 00:03:42.641
So then,
do you remember how to create methods?

56
00:03:42.641 --> 00:03:46.586
How to create methods in structures,
in Go?

57
00:03:46.586 --> 00:03:48.534
Does anyone remember?

58
00:03:48.534 --> 00:03:53.009
&gt;&gt; Speaker 2: You wrapped the handler
before the function name.

59
00:03:53.009 --> 00:03:54.323
&gt;&gt; Maximiliano Flirtman: So
it's a function.

60
00:03:54.323 --> 00:03:56.599
So we create a function, okay?

61
00:03:56.599 --> 00:04:02.253
For example,
we can create the function GetTopMovies,

62
00:04:02.253 --> 00:04:05.313
okay, by the way, handlers,

63
00:04:05.313 --> 00:04:09.927
every HTTP handler,
has the same signature.

64
00:04:09.927 --> 00:04:14.844
It has an HTTP.Rsponsewriter and

65
00:04:14.844 --> 00:04:22.480
an HTTP.Request that is
actually a pointer, oops.

66
00:04:22.480 --> 00:04:23.222
What is this?

67
00:04:23.222 --> 00:04:28.176
Well, the request is the incoming
data that is coming from from

68
00:04:28.176 --> 00:04:29.864
the from the client.

69
00:04:29.864 --> 00:04:34.432
So you have the user agent,
the headers, what's the URL?

70
00:04:34.432 --> 00:04:37.417
Cookies, everything that
the client is sending.

71
00:04:37.417 --> 00:04:43.116
And we use the writer to send
data back to the client.

72
00:04:43.116 --> 00:04:48.862
So we get the data, we send data back,
that's how that works.

73
00:04:48.862 --> 00:04:56.563
But this is just a public function
in a package, it's not a method.

74
00:04:56.563 --> 00:05:02.959
As he was mentioning, to actually
make it a method of my movie handler,

75
00:05:02.959 --> 00:05:07.328
I need I have this special
syntax of adding here,

76
00:05:07.328 --> 00:05:11.612
let's call it h,
a pointer to a movie handler.

77
00:05:11.612 --> 00:05:17.026
So now this is my signature, okay?

78
00:05:17.026 --> 00:05:17.807
Yes.

79
00:05:17.807 --> 00:05:22.281
&gt;&gt; Speaker 3: Why the Pointer and
HTTP request.

80
00:05:22.281 --> 00:05:24.564
&gt;&gt; Maximiliano Flirtman: This
is how that works.

81
00:05:24.564 --> 00:05:27.421
I mean, this is how HTTP handler works.

82
00:05:27.421 --> 00:05:32.508
So let me explain that in
a second when we go back here to

83
00:05:32.508 --> 00:05:38.840
the main when we are sending handle,
handle has the the pattern and

84
00:05:38.840 --> 00:05:43.038
then a handler that
come from HTTP handler.

85
00:05:43.038 --> 00:05:49.801
When we look at that HTTP handler, see if
I can get into, it has that interface.

86
00:05:49.801 --> 00:05:56.010
So the quick answer is, because that's
the interface that we must match.

87
00:05:56.010 --> 00:05:58.434
So if not, it's not gonna work, okay?

88
00:05:58.434 --> 00:06:03.343
The only way to create a handler
is to follow that interface,

89
00:06:03.343 --> 00:06:08.260
and that interface is receiving
a pointer to their request.

90
00:06:08.260 --> 00:06:12.215
The whole deal here is that Go or, I mean,

91
00:06:12.215 --> 00:06:16.396
the developers of Go, who coded that part,

92
00:06:16.396 --> 00:06:22.161
they didn't want to send you a copy,
a clone of the request.

93
00:06:22.161 --> 00:06:26.493
Because if there is no pointer here,
when they're sending you a request,

94
00:06:26.493 --> 00:06:28.843
it's creating a clone, another copy.

95
00:06:28.843 --> 00:06:34.222
And it doesn't make sense, so
they're sending the argument as a pointer,

96
00:06:34.222 --> 00:06:36.751
as a reference, and not as a value.

97
00:06:36.751 --> 00:06:37.909
Does it make sense?

98
00:06:37.909 --> 00:06:39.923
That's why?

99
00:06:39.923 --> 00:06:42.409
So the short answer is
that it's mandatory.

100
00:06:42.409 --> 00:06:47.638
Okay, so that's why we have to
follow exactly that interface.

101
00:06:47.638 --> 00:06:51.537
So that's the interface that
I'm following here, okay?

102
00:06:51.537 --> 00:06:55.508
So what's the whole idea where, for now,

103
00:06:55.508 --> 00:06:59.699
I will just instead of
going to the database,

104
00:06:59.699 --> 00:07:04.796
let's try to test this step by step,
like baby steps.

105
00:07:04.796 --> 00:07:09.958
And we're going to create
a list of movies here.

106
00:07:09.958 --> 00:07:18.624
So I'm going to create
an array of models.movie.

107
00:07:18.624 --> 00:07:25.981
Remember you create things
like this with curly braces,

108
00:07:25.981 --> 00:07:32.119
and then I can create
a movie with an ID one TMDB.

109
00:07:32.119 --> 00:07:36.928
I'm going to just fake,
you have one to copy and

110
00:07:36.928 --> 00:07:43.071
paste if you want from with me,
but you got the idea, right?

111
00:07:43.071 --> 00:07:47.600
Remember this is the automatic initializer
that we have available for this.

112
00:07:47.600 --> 00:07:51.052
We have release here,

113
00:07:51.052 --> 00:07:57.055
the genres it's another collection.

114
00:07:57.055 --> 00:07:59.336
Remember to use here, Cali braces.

115
00:07:59.336 --> 00:08:06.135
We have an ID and a name
&gt;&gt; Maximiliano Flirtman: And so on.

116
00:08:06.135 --> 00:08:10.745
We have keywords,
&gt;&gt; Maximiliano Flirtman: We can add

117
00:08:10.745 --> 00:08:11.563
keywords or not.

118
00:08:11.563 --> 00:08:16.904
And we have the Castings,
it's a collection of actors.

119
00:08:16.904 --> 00:08:23.197
So, we can create an actor,
just one, name Max.

120
00:08:23.197 --> 00:08:25.465
I'm an actor for the movie, okay?

121
00:08:25.465 --> 00:08:31.289
So this is one movie and
of course I can another movie just for

122
00:08:31.289 --> 00:08:34.094
dummy data to do a baby step.

123
00:08:34.094 --> 00:08:39.792
I will just change this
back to the future.

124
00:08:39.792 --> 00:08:44.096
Think it was 90,
I think it was 84 the release year,

125
00:08:44.096 --> 00:08:49.700
not the year where the movies, but
84 or 85 doesn't matter, okay?

126
00:08:49.700 --> 00:08:55.684
So I have that array of movies and
what I need, I wanna write this, okay?

127
00:08:55.684 --> 00:09:01.166
So I wanna write this to the output.

128
00:09:01.166 --> 00:09:03.693
I wanna send this JSON to the output.

129
00:09:03.693 --> 00:09:04.875
Who is the output, the client?

130
00:09:04.875 --> 00:09:06.048
Who is the client?

131
00:09:06.048 --> 00:09:08.097
In this case, my browser.

132
00:09:08.097 --> 00:09:13.909
Okay, so
I want to see that in JSON format, okay?

133
00:09:13.909 --> 00:09:21.086
That's like my my first step,
to send JSON, I need to say so, how?

134
00:09:21.086 --> 00:09:23.006
I need to talk to the writer.

135
00:09:23.006 --> 00:09:29.556
Remember the writer is this argument W and
I need to talk to the headers.

136
00:09:29.556 --> 00:09:31.624
I need to set the header.

137
00:09:31.624 --> 00:09:37.024
And the header this is
HTTP spec content type.

138
00:09:37.024 --> 00:09:42.156
And the mini type is application/json.

139
00:09:42.156 --> 00:09:47.525
This is how the browser will know or
the client, it can be the browser,

140
00:09:47.525 --> 00:09:52.809
it can be my app, will know that we
are actually sending JSON, okay?

141
00:09:52.809 --> 00:09:55.286
That's the first step.

142
00:09:55.286 --> 00:10:00.386
Then we need to encode our model,
our value,

143
00:10:00.386 --> 00:10:05.085
the collection of two movies that I have,

144
00:10:05.085 --> 00:10:09.397
or three movies that I have into JSON.

145
00:10:09.397 --> 00:10:16.641
Fortunately, we have JSON compatibility
in Go, a standard library, okay?

146
00:10:16.641 --> 00:10:19.792
We can talk to JSON, the JSON package.

147
00:10:19.792 --> 00:10:26.114
And what we're going to do with JSON is
create a new encoder over the writer.

148
00:10:26.114 --> 00:10:32.051
So we're going to say, hey,
what I want is to send JSON to the output.

149
00:10:32.051 --> 00:10:32.748
Does that make sense?

150
00:10:32.748 --> 00:10:38.734
So I don't need the JSON as a string
first, I don't wanna look at the string.

151
00:10:38.734 --> 00:10:42.294
I just wanna,
once you are creating a JSON,

152
00:10:42.294 --> 00:10:47.009
just send it directly to the output,
so to the writer, and

153
00:10:47.009 --> 00:10:52.128
that's the new encoder, and
we're going to encode the data.

154
00:10:52.128 --> 00:10:54.962
The data is actually movies, okay?

155
00:10:54.962 --> 00:10:57.651
So I'm sending movies.

156
00:10:57.651 --> 00:11:02.078
The problem is that this
can lead to an error, okay?

157
00:11:02.078 --> 00:11:05.863
So it can return an error.

158
00:11:05.863 --> 00:11:07.918
So what happens?

159
00:11:07.918 --> 00:11:11.726
Maybe because it couldn't
convert that into JSON,

160
00:11:11.726 --> 00:11:15.544
something was wrong,
something happened, okay?

161
00:11:15.544 --> 00:11:22.164
So that's the moment where I
need to do something else.

162
00:11:22.164 --> 00:11:28.076
The most common way to solve this
problem in Go is to ask for this.

163
00:11:28.076 --> 00:11:33.196
I'm not sure if you have seen this in
Go when you're using if conditionals,

164
00:11:33.196 --> 00:11:35.843
you can have more than one expression.

165
00:11:35.843 --> 00:11:41.533
In that case, the last one is
the condition, the Boolean condition.

166
00:11:41.533 --> 00:11:46.418
For example, in this case, I can just
go and say if the error is not nil,

167
00:11:46.418 --> 00:11:49.687
that means there was an error a problem,
okay?

168
00:11:49.687 --> 00:11:54.444
We will load this, okay?

169
00:11:54.444 --> 00:11:55.491
Something like that.

