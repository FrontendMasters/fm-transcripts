WEBVTT

1
00:00:00.333 --> 00:00:04.534
&gt;&gt; Maximiliano Firtman: So we will
continue creating another package that is

2
00:00:04.534 --> 00:00:06.256
gonna be our models.

3
00:00:06.256 --> 00:00:11.085
So I'm going to create another
package in the root there models.

4
00:00:11.085 --> 00:00:12.693
What's a model?

5
00:00:12.693 --> 00:00:17.544
We will create the structures for
every entity,

6
00:00:17.544 --> 00:00:24.536
let's talk about entities for now,
that we will have in our project.

7
00:00:24.536 --> 00:00:25.803
So what about entities?

8
00:00:25.803 --> 00:00:30.769
So let me go back to a slide first,
I'm going to close it.

9
00:00:30.769 --> 00:00:35.337
So the entities that we will
have are actually the movie

10
00:00:35.337 --> 00:00:38.125
that's kind of the main entity.

11
00:00:38.125 --> 00:00:43.327
So it represents one movie,
in the system, in the database.

12
00:00:43.327 --> 00:00:46.273
Genre, and why is it a different entity?

13
00:00:46.273 --> 00:00:50.222
Because one movie can have several genres,
so

14
00:00:50.222 --> 00:00:54.687
it can be science fiction and
comedy, for example.

15
00:00:54.687 --> 00:00:55.649
It's actually pretty simple.

16
00:00:55.649 --> 00:01:00.004
It's just maybe ID and name, in the future
you may have other things, but just that.

17
00:01:00.004 --> 00:01:04.009
Actor, actress, okay.

18
00:01:04.009 --> 00:01:09.429
In this case, it has the name,
first name, last name, image and so on.

19
00:01:09.429 --> 00:01:14.194
And user, we will use the user or
the account for

20
00:01:14.194 --> 00:01:19.569
logging in, the user, for
authentication, okay?

21
00:01:19.569 --> 00:01:21.044
So we need to create these models.

22
00:01:21.044 --> 00:01:27.165
At least let's start with the first three
that they have to do with the movies,

23
00:01:27.165 --> 00:01:27.736
okay?

24
00:01:27.736 --> 00:01:31.601
So then, we will go and create the model.

25
00:01:31.601 --> 00:01:36.997
So I'm going to create one file,

26
00:01:36.997 --> 00:01:40.667
genre, oops, .go.

27
00:01:40.667 --> 00:01:43.803
Of course it's giving me an error
because I don't have the package header,

28
00:01:43.803 --> 00:01:45.967
that's why it's giving
you an error immediately.

29
00:01:45.967 --> 00:01:50.799
Actor.go, and then we have movie.go.

30
00:01:50.799 --> 00:01:57.488
And if we add the package models,
now it's not giving us Errors,

31
00:01:57.488 --> 00:02:03.690
if we don't have any structure yet,
any type declaration,

32
00:02:03.690 --> 00:02:07.590
but at least we don't get any errors.

33
00:02:09.275 --> 00:02:14.384
&gt;&gt; Maximiliano Firtman: Remember,
later we will map these models with

34
00:02:14.384 --> 00:02:21.067
the data coming from the database,
thanks to a repository.

35
00:02:21.067 --> 00:02:24.967
So let's start with the simplest one,
with genre.

36
00:02:24.967 --> 00:02:29.053
So we create a type,
we use the name capital G.

37
00:02:29.053 --> 00:02:32.694
Remember, if not, we won't be
able to use it from the outside.

38
00:02:32.694 --> 00:02:37.641
And it's a structure, we have an ID,
we typically, it's a pattern.

39
00:02:37.641 --> 00:02:43.689
Use the ID with capital I capital D,
so all caps for the ID.

40
00:02:43.689 --> 00:02:48.444
It's kind of a go pattern and the name.

41
00:02:48.444 --> 00:02:55.093
Remember capital, we use title case here,
so we can use it outside as well.

42
00:02:55.093 --> 00:02:58.587
So that's genre, it's pretty simple.

43
00:02:58.587 --> 00:03:01.665
Then you have actor.

44
00:03:01.665 --> 00:03:07.656
So we create type, actor is another
structure in a3 in the documentation

45
00:03:07.656 --> 00:03:12.401
the readme you have this in case
you want to copy and paste.

46
00:03:12.401 --> 00:03:16.728
But also for our brain to
actually get the information and

47
00:03:16.728 --> 00:03:22.696
store that information inside our memory
it's a good idea to type sometimes.

48
00:03:22.696 --> 00:03:27.746
So we have an ID,
we have a first name as a string,

49
00:03:27.746 --> 00:03:32.575
we have a last name as a string and
an image URL.

50
00:03:32.575 --> 00:03:34.234
It's also a string, but

51
00:03:34.234 --> 00:03:38.188
one of the problems is that
the image URL might not be there.

52
00:03:38.188 --> 00:03:40.779
Remember, I mentioned that it's optional.

53
00:03:40.779 --> 00:03:46.481
So maybe we don't have
the picture of every actor.

54
00:03:46.481 --> 00:03:52.810
So that's why we are adding an asteric,
a pointer there.

55
00:03:52.810 --> 00:03:57.245
That means it's nullable or

56
00:03:57.245 --> 00:04:01.503
nullable in a Go language.

57
00:04:01.503 --> 00:04:05.082
Okay, make sense?

58
00:04:05.082 --> 00:04:06.569
And finally, the movie.

59
00:04:06.569 --> 00:04:12.238
This is probably the most important one,
and the one that has more data.

60
00:04:12.238 --> 00:04:15.147
We also have an ID integer.

61
00:04:15.147 --> 00:04:20.960
There is a TMDB_ID that maybe I don't need
it, but this is because we have on our own

62
00:04:20.960 --> 00:04:26.460
idea, remember I mentioned that I created
a subset of the full TMDB database.

63
00:04:26.460 --> 00:04:30.648
The TMDB database has around,
if I remember correctly,

64
00:04:30.648 --> 00:04:33.622
70,000 entries, which is a lot.

65
00:04:33.622 --> 00:04:38.132
So I just picked 5,000 and
we can still have

66
00:04:38.132 --> 00:04:43.334
the idea of the original TMDB
in case you need it later.

67
00:04:43.334 --> 00:04:45.920
Why you may need that later?

68
00:04:45.920 --> 00:04:47.879
Let's talk about this for a second.

69
00:04:47.879 --> 00:04:53.697
Let's say you wanna publish this as
a real website for movies, okay?

70
00:04:53.697 --> 00:04:56.293
So you wanna create the movie database.

71
00:04:56.293 --> 00:05:01.456
The problem is that you got the database,
and this is static.

72
00:05:01.456 --> 00:05:04.416
And of course,
we have new movies every week.

73
00:05:04.416 --> 00:05:07.914
So, you need to update your database,

74
00:05:07.914 --> 00:05:12.586
and TMDB has an API, so
you can query latest movies.

75
00:05:12.586 --> 00:05:15.145
And how do you know if you
already have the movie or not?

76
00:05:15.145 --> 00:05:17.724
Well, you use that ID.

77
00:05:17.724 --> 00:05:22.580
Okay, you don't use the title because
maybe the title of the movie ID

78
00:05:22.580 --> 00:05:27.534
can be duplicated, okay, so
don't use the title, just use that ID.

79
00:05:27.534 --> 00:05:30.595
So we have the ID,
we have the title again, so

80
00:05:30.595 --> 00:05:35.202
we have a tagline that's something
from marketing from the movie.

81
00:05:35.202 --> 00:05:42.705
ReleaseYear, Genres,
and this is important,

82
00:05:42.705 --> 00:05:47.650
this is a collection, not one.

83
00:05:47.650 --> 00:05:52.138
Overview, it's a string, but some of these

84
00:05:52.138 --> 00:05:57.700
properties might be optional,
so I will use a pointer.

85
00:05:57.700 --> 00:05:59.360
We have a score.

86
00:05:59.360 --> 00:06:04.058
Actually, you know that IMDB,
they have a score,

87
00:06:04.058 --> 00:06:09.762
users are voting and sending a score,
so you have an average.

88
00:06:09.762 --> 00:06:14.849
This is not coming from copyright issues,
so it's coming from other websites

89
00:06:14.849 --> 00:06:20.261
like Rotten Tomatoes and others, so they
create an average of user rating, okay?

90
00:06:20.261 --> 00:06:22.240
Okay, that's kind of a score.

91
00:06:22.240 --> 00:06:28.465
Popularity is also coming from different
providers, it might not be there.

92
00:06:28.465 --> 00:06:29.807
Then, we have keywords.

93
00:06:33.960 --> 00:06:37.841
&gt;&gt; Maximiliano Firtman: Keywords, this is
just a collection of array of strings.

94
00:06:37.841 --> 00:06:42.324
Keywords, for example, if a movie is

95
00:06:42.324 --> 00:06:47.228
space related, so space, time travel,

96
00:06:47.228 --> 00:06:52.146
themes, animals, so things like that.

97
00:06:52.146 --> 00:06:54.327
So we have an array of keywords.

98
00:06:54.327 --> 00:06:59.487
A language, this is the original
language of the movie, so a string.

99
00:06:59.487 --> 00:07:01.170
Can be optional in the data.

100
00:07:01.170 --> 00:07:09.046
The poster URL, we have the trailer URL,
that's the video.

101
00:07:09.046 --> 00:07:13.788
And finally, the cast, or the casting,

102
00:07:13.788 --> 00:07:17.049
where we use actors, okay?

103
00:07:17.049 --> 00:07:20.808
So that's how the movie structure
looks like, that's our model.

104
00:07:22.192 --> 00:07:24.718
&gt;&gt; Maximiliano Firtman: Is it
mandatory to create the model?

105
00:07:24.718 --> 00:07:25.764
Not really.

106
00:07:25.764 --> 00:07:28.898
You can just grab the data
from the database,

107
00:07:28.898 --> 00:07:32.459
convert that into JSON and
send that to the client.

108
00:07:32.459 --> 00:07:38.082
But the advantage of creating
a structure is to mimic the idea of OOP.

109
00:07:38.082 --> 00:07:43.181
So we kind of created an object, and then
later we can add methods to that object.

110
00:07:43.181 --> 00:07:48.978
So it's better to do this, also for
security purposes and also for

111
00:07:48.978 --> 00:07:56.136
future proof, because what happens if
someone is changing the database schema?

112
00:07:56.136 --> 00:08:01.018
I mean, we are changing the name
of the fields in the database.

113
00:08:01.018 --> 00:08:03.710
Well, you're downloading
the field as it is.

114
00:08:03.710 --> 00:08:07.527
You're conforming that into a JSON and
sending that to the client, and

115
00:08:07.527 --> 00:08:09.383
the client will give you an error.

116
00:08:09.383 --> 00:08:12.163
Well, for error management here,

117
00:08:12.163 --> 00:08:16.714
we will know if the structure
is matching or not our model.

118
00:08:16.714 --> 00:08:20.401
So that's why it's important
to have a model here.

119
00:08:20.401 --> 00:08:23.720
It feels like a lot of work or
more work, but

120
00:08:23.720 --> 00:08:28.065
the advantage is that we will
get a better future for us.

121
00:08:28.065 --> 00:08:31.427
Okay, when we have our models.

122
00:08:31.427 --> 00:08:34.994
Any question so far on models?

123
00:08:34.994 --> 00:08:40.502
&gt;&gt; Speaker 2: The data type makes
it an optional field, right?

124
00:08:40.502 --> 00:08:41.813
The star.
&gt;&gt; Maximiliano Firtman: The star means

125
00:08:41.813 --> 00:08:42.630
pointer.

126
00:08:42.630 --> 00:08:48.269
It's a pointer to a string, it's a pointer
to a float, it's a pointer to whatever.

127
00:08:48.269 --> 00:08:54.789
And it means a pointer, from this point
of view, it means that it may be nil.

128
00:08:54.789 --> 00:08:58.250
So when we create an actor,
so let's create here,

129
00:08:58.250 --> 00:09:01.317
like a quick actor,
like a temporary actor.

130
00:09:01.317 --> 00:09:06.283
We create an actor, and that actor
may have different properties and

131
00:09:06.283 --> 00:09:09.545
different, even I can
pass the values here.

132
00:09:09.545 --> 00:09:13.583
So when I'm creating actually,
this is a I'm in a movie.

133
00:09:13.583 --> 00:09:18.906
So let's create a movie, actually,
when you're creating the movie.

134
00:09:18.906 --> 00:09:22.638
Now, for example, the title is mandatory.

135
00:09:22.638 --> 00:09:29.595
You must have a title because it says
it's a string, it cannot be nil.

136
00:09:29.595 --> 00:09:33.828
For some optional when
you have optional values,

137
00:09:33.828 --> 00:09:40.300
like they can store new in a database
from the database here, it goes to nil.

138
00:09:40.300 --> 00:09:44.286
And to do that, we use the asterisk,
but having mine,

139
00:09:44.286 --> 00:09:50.628
the asterisk by itself doesn't mean it's
an optional value, like a new level value.

140
00:09:50.628 --> 00:09:54.273
It's a pointer with a lot of things
that have to do with pointer,

141
00:09:54.273 --> 00:09:55.567
pointer management.

142
00:09:55.567 --> 00:09:58.496
If you wanna get deeper into that,

143
00:09:58.496 --> 00:10:03.243
check my other course basics
of Go at Front End Masters,

144
00:10:03.243 --> 00:10:07.097
where we actually get
into the pointer idea.

145
00:10:07.097 --> 00:10:12.424
Because by default, when you pass
in values actually as an argument,

146
00:10:12.424 --> 00:10:17.860
it's always passing as a value, so
as a copy, unless it's a pointer.

147
00:10:17.860 --> 00:10:19.188
So it has to do with that.

148
00:10:19.188 --> 00:10:21.372
But for our use case.

149
00:10:21.372 --> 00:10:26.597
We can say that the asterisk is for
optional attributes, okay,

150
00:10:26.597 --> 00:10:31.556
so that means that we can set
nil on those attributes as well.

151
00:10:31.556 --> 00:10:33.683
Okay, make sense?

152
00:10:33.683 --> 00:10:36.845
&gt;&gt; Speaker 3: Otherwise, if you don't
put it, it just if it's a string,

153
00:10:36.845 --> 00:10:38.773
it's just an empty string, right?

154
00:10:38.773 --> 00:10:40.684
So it will be there, but
it will just be there.

155
00:10:40.684 --> 00:10:43.979
&gt;&gt; Maximiliano Firtman: There is
a difference from a database point of

156
00:10:43.979 --> 00:10:48.670
view between empty string and
null, and the same happens here.

157
00:10:48.670 --> 00:10:54.710
The problem is that if in the database
you have null store as a value for

158
00:10:54.710 --> 00:11:00.558
one field, when you're trying to
fill your model, it will fail.

159
00:11:00.558 --> 00:11:04.649
Because there is no way to store that null
unless you have an if you have a condition

160
00:11:04.649 --> 00:11:08.280
saying, if it's null in the database,
I will save empty string here.

161
00:11:08.280 --> 00:11:11.138
Okay, but yeah,
it's kind of a hack that you're doing.

162
00:11:11.138 --> 00:11:16.224
To actually automatically
map your data with the data

163
00:11:16.224 --> 00:11:21.994
that is coming from the database
you have to add the pointer.

164
00:11:21.994 --> 00:11:27.930
So then, if it's null in the database,
it will be nil automatically here.

165
00:11:27.930 --> 00:11:32.732
But remember that empty strings
are not the same as nulls.

166
00:11:32.732 --> 00:11:37.717
Also, when you have here,
float for the score popularity,

167
00:11:37.717 --> 00:11:42.606
it's even more complicated
because if it's not no level,

168
00:11:42.606 --> 00:11:45.270
what do you store for Node Zero?

169
00:11:45.270 --> 00:11:49.476
But maybe zero is a pretty,
pretty bad movie, so

170
00:11:49.476 --> 00:11:52.663
zero may be an actual value, value.

171
00:11:52.663 --> 00:11:58.385
So then you need to start hacking this,
and say, minus one, but it's really hack.

172
00:11:58.385 --> 00:12:05.322
So it's much better to let the system
store the new ability of that body.

173
00:12:05.322 --> 00:12:06.829
&gt;&gt; Speaker 3: Got it, makes sense.

174
00:12:06.829 --> 00:12:08.120
&gt;&gt; Maximiliano Firtman: Okay, makes sense?

