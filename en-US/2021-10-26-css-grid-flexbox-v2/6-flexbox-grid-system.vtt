WEBVTT

1
00:00:00.015 --> 00:00:04.883
Let me just give you a little bit of
background about the Flexbox grid system

2
00:00:04.883 --> 00:00:08.824
and how it works and
then we'll jump into the next code pen and

3
00:00:08.824 --> 00:00:11.383
we'll build a grid system using this.

4
00:00:11.383 --> 00:00:16.023
So, the way we wanna think about the grid
system with Flexbox is that we're

5
00:00:16.023 --> 00:00:18.024
going to have a series of boxes.

6
00:00:18.024 --> 00:00:22.661
Whatever they happen to be, they have
some kind of content inside of them, and

7
00:00:22.661 --> 00:00:25.071
your HTML may look something like this.

8
00:00:25.071 --> 00:00:29.909
I'm using just the div element here
because they're clearly no content,

9
00:00:29.909 --> 00:00:31.534
no meaning whatsoever.

10
00:00:31.534 --> 00:00:33.178
This does not have to be divs.

11
00:00:33.178 --> 00:00:37.273
And in fact, in a moment,
you'll see we do things with figures or

12
00:00:37.273 --> 00:00:41.306
you could do articles and sections and
any of the HTML elements.

13
00:00:41.306 --> 00:00:45.266
But the critical piece of this
HTML is that you have one element

14
00:00:45.266 --> 00:00:49.695
that wraps around it all,
that's the parent, the flex container.

15
00:00:49.695 --> 00:00:54.087
And you're gonna have the individual
boxes, those are the flex items or

16
00:00:54.087 --> 00:00:55.028
the children.

17
00:00:55.028 --> 00:00:59.172
And so that's the way
the HTML would look for that.

18
00:00:59.172 --> 00:01:02.459
The CSS winds up looking
something like this.

19
00:01:02.459 --> 00:01:07.054
So on the row the parent we're
going to say display flex,

20
00:01:07.054 --> 00:01:09.368
we do a flex flow of row wrap.

21
00:01:09.368 --> 00:01:13.596
Justify the content however we want to
justify it, it might be center it might be

22
00:01:13.596 --> 00:01:17.080
space between something else, and
then you can also set up a gap.

23
00:01:17.080 --> 00:01:22.052
This is a new property in Flexbox, you may
be familiar if you know a little bit about

24
00:01:22.052 --> 00:01:25.164
CSS Grid,
there used to be a thing called grid gap.

25
00:01:25.164 --> 00:01:28.470
Now it is all just gap,
gap on the grid side and

26
00:01:28.470 --> 00:01:33.256
on the Flexbox side gap is a new
property that's available to us.

27
00:01:33.256 --> 00:01:37.770
So you can in fact specify
a gap now inside of Flexbox.

28
00:01:37.770 --> 00:01:40.150
Then for your individual boxes,

29
00:01:40.150 --> 00:01:44.743
you can set up a series of flex basis,
this is not real code here.

30
00:01:44.743 --> 00:01:47.665
I need a whole lot more stuff,
a lot of media queries in order for

31
00:01:47.665 --> 00:01:49.219
this to actually be a real thing.

32
00:01:49.219 --> 00:01:52.840
But the idea is that you can set
your flex spaces to one size for

33
00:01:52.840 --> 00:01:57.244
desktop, a larger size for a tablet,
and a really big size for the phone.

34
00:01:57.244 --> 00:02:01.175
That's typically the way you
would set this kind of thing up.

35
00:02:01.175 --> 00:02:05.428
So, that's the way the code is going to
look broadly speaking as we start to set

36
00:02:05.428 --> 00:02:07.180
up a Flexbox based grid system.

37
00:02:07.180 --> 00:02:10.978
And if you take a look at Bootstrap and
Foundation and UI Kit and

38
00:02:10.978 --> 00:02:15.816
all the rest of them, you will discover
that they use Flexbox in this very way.

39
00:02:17.708 --> 00:02:20.569
Okay, you can also rearrange your columns.

40
00:02:20.569 --> 00:02:25.932
That is something else we're gonna try
here in our Flexbox grid system in just

41
00:02:25.932 --> 00:02:31.293
a moment so that you can put things in
order that are appropriate to your HTML,

42
00:02:31.293 --> 00:02:33.623
to search engine optimization.

43
00:02:33.623 --> 00:02:37.579
That you have the important information
listed first in the source order,

44
00:02:37.579 --> 00:02:40.280
the less important
information listed later, and

45
00:02:40.280 --> 00:02:43.637
then just reorder using the order
property inside of Flexbox.

46
00:02:43.637 --> 00:02:46.947
All right, so
we are on to chapter two in our notes.

47
00:02:46.947 --> 00:02:51.693
And so this is divided up this next
exercise that we're going to do,

48
00:02:51.693 --> 00:02:54.626
we're going to try three pieces of this.

49
00:02:54.626 --> 00:02:56.786
So the first thing that we're going to do,

50
00:02:56.786 --> 00:02:59.377
we're going to build
a desktop based system only.

51
00:02:59.377 --> 00:03:02.757
Just so you can see how this works without
having to deal with media queries.

52
00:03:02.757 --> 00:03:05.936
Then we'll go back and
retrofit our grid system so

53
00:03:05.936 --> 00:03:09.123
that does in fact work
across different devices.

54
00:03:09.123 --> 00:03:12.849
So we'll add the media queries and
make changes to our values.

55
00:03:12.849 --> 00:03:15.430
And then I have a little challenge for
you to try, so

56
00:03:15.430 --> 00:03:18.864
that is the order of the next few
things that we're going to do here.

57
00:03:18.864 --> 00:03:22.696
So let's start here by
part 2A: Desktop only and

58
00:03:22.696 --> 00:03:28.002
says the Starting CodePen, and
this is the layout that we have here.

59
00:03:28.002 --> 00:03:32.292
So as you'll see, we have got a whole
bunch of these beautiful boxes,

60
00:03:32.292 --> 00:03:33.687
aren't they lovely?

61
00:03:33.687 --> 00:03:35.853
And they're all different colors and

62
00:03:35.853 --> 00:03:38.837
they have this lovely SVG
based background, okay?

63
00:03:38.837 --> 00:03:42.875
And they're all just stacked on top of
each other because we have no layout code

64
00:03:42.875 --> 00:03:43.679
here present.

65
00:03:43.679 --> 00:03:47.576
So let's just check out our HTML first.

66
00:03:47.576 --> 00:03:51.291
So you'll notice that I have
a series of comments here.

67
00:03:51.291 --> 00:03:57.502
We have one row or one box per column,
we're going to build a four column layout.

68
00:03:57.502 --> 00:04:02.703
And as we scroll down, here's we have
two boxes, each spanning two columns.

69
00:04:02.703 --> 00:04:05.253
So this is what we're gonna code.

70
00:04:05.253 --> 00:04:10.297
And so forth, there's five rows in all,
you can just read the comments there.

71
00:04:10.297 --> 00:04:14.467
For each unit of content,
we have it set up as follows,

72
00:04:14.467 --> 00:04:19.649
this might be a new HTML element to you,
this is the figure element.

73
00:04:19.649 --> 00:04:23.606
And figures are incredibly
useful HTML elements.

74
00:04:23.606 --> 00:04:26.788
They start with figure,
they end with figure, and

75
00:04:26.788 --> 00:04:31.228
inside of them you might be under
the that conception that a figure would

76
00:04:31.228 --> 00:04:34.645
have an image and
then some text that goes underneath.

77
00:04:34.645 --> 00:04:37.003
The image would be in an image tag and

78
00:04:37.003 --> 00:04:40.475
the text underneath would
be in the fig caption tag.

79
00:04:40.475 --> 00:04:43.897
However, you can use figures for
a whole bunch of different things.

80
00:04:43.897 --> 00:04:48.794
So you see here I don't actually have
an image I just have a div with a class

81
00:04:48.794 --> 00:04:53.213
of one that has the styling that
makes the textured background and

82
00:04:53.213 --> 00:04:54.836
the color and so forth.

83
00:04:54.836 --> 00:04:56.618
I'll show you that in a second.

84
00:04:56.618 --> 00:05:00.758
You could do this with the pre-element,
the pre-element, and

85
00:05:00.758 --> 00:05:04.981
you could put an ASCII art,
that would be one way you could do this.

86
00:05:04.981 --> 00:05:08.005
You could use the pre-element,
maybe the code element,

87
00:05:08.005 --> 00:05:11.718
you could put in some code here as
an example with a caption underneath.

88
00:05:11.718 --> 00:05:15.366
You can reverse the order of these,
you can have the figure caption first and

89
00:05:15.366 --> 00:05:17.599
whatever it is you're demonstrating later.

90
00:05:17.599 --> 00:05:21.014
You can have multiple images
inside of your figure.

91
00:05:21.014 --> 00:05:26.393
So in other words, you could either put up
a nice layout of some number of images,

92
00:05:26.393 --> 00:05:29.716
or you could do something
like an image carousel or

93
00:05:29.716 --> 00:05:32.346
some other interactive kind of image.

94
00:05:32.346 --> 00:05:35.628
So figures are incredibly useful, and

95
00:05:35.628 --> 00:05:41.305
what they are intended to indicate
is that this is a unit of content.

96
00:05:41.305 --> 00:05:46.217
So we have a graphic or code or something
then an explanation that goes with it.

97
00:05:46.217 --> 00:05:50.057
That is the right semantic markup for
that type of thing.

98
00:05:52.542 --> 00:05:55.185
Okay, so it's pretty much like
this all the way through.

99
00:05:55.185 --> 00:05:59.390
I've got some notes in here,
we'll go through all of that in detail.

100
00:05:59.390 --> 00:06:02.984
And then down here in the CSS,
let's look at what we've got.

101
00:06:02.984 --> 00:06:06.111
I've got an empty spot here where
we'll start writing some CSS.

102
00:06:06.111 --> 00:06:11.111
But I've already given you some obviously,
so just so you know what's here we

103
00:06:11.111 --> 00:06:15.305
have our border box declaration
that I described to you earlier.

104
00:06:15.305 --> 00:06:20.792
And then underneath of that we have
the body tag, turning off our padding.

105
00:06:20.792 --> 00:06:25.498
It looks like I didn't turn off the
margin, hm, wonder why I didn't do that.

106
00:06:25.498 --> 00:06:28.856
We turn off the border,
we have a font family and then,

107
00:06:28.856 --> 00:06:32.951
I have a background that happens
to be a gradient background here.

108
00:06:32.951 --> 00:06:35.199
The figure itself has
a little bit of margin and

109
00:06:35.199 --> 00:06:37.742
padding associated with
it which I've turned off.

110
00:06:37.742 --> 00:06:42.507
Here's the caption styling,
just the background color, a color and

111
00:06:42.507 --> 00:06:45.666
a little bit of padding
to make it look pretty.

112
00:06:45.666 --> 00:06:49.090
Here is a style that's going
to reduce some of the margins.

113
00:06:49.090 --> 00:06:54.708
Remember that H2 in particular by default
has a big margin associated with it.

114
00:06:54.708 --> 00:07:00.355
This reduces all of those margins to half
a rem with this particular selector,

115
00:07:00.355 --> 00:07:03.192
makes it look pretty and symmetrical.

116
00:07:03.192 --> 00:07:08.284
And then we've got this is
the textured background here.

117
00:07:08.284 --> 00:07:11.997
The texture comes right from
within code pen itself,

118
00:07:11.997 --> 00:07:15.555
it's something you can just download and
plug in.

119
00:07:15.555 --> 00:07:22.504
So here it is, it's an SVG, and
this is the formula that makes it display.

120
00:07:22.504 --> 00:07:27.073
I've set a minimum height on these,
again, just for demonstration purposes.

121
00:07:27.073 --> 00:07:31.281
If I didn't put in a minimum height
with this kind of background SVG,

122
00:07:31.281 --> 00:07:33.541
you wouldn't see it at all, right?

123
00:07:33.541 --> 00:07:37.083
Because it has no actual
content inside of that div, so

124
00:07:37.083 --> 00:07:41.627
you would just see nothing, so
we have to put in a little bit of height.

125
00:07:41.627 --> 00:07:44.185
And then each of these
have a class associated

126
00:07:44.185 --> 00:07:46.754
with them which give
them a different color.

127
00:07:46.754 --> 00:07:51.933
So that's the code here
that we have to start with.

128
00:07:51.933 --> 00:07:57.782
All right, so with this HTML let's
start with our first row here.

129
00:07:57.782 --> 00:08:00.248
We wanna have one box per column.

130
00:08:00.248 --> 00:08:03.353
We are going to have 4 columns
going across the page,

131
00:08:03.353 --> 00:08:07.011
the reason I pick 4 columns it's
a nice symmetrical number and

132
00:08:07.011 --> 00:08:11.097
all of the responsive design
frameworks use 12 columns on the page.

133
00:08:11.097 --> 00:08:15.838
It's a lot of work to code 12 columns, and
I'm not sure you actually learn a whole

134
00:08:15.838 --> 00:08:19.180
lot more by going all the way
up to 12 than you do using 4.

135
00:08:19.180 --> 00:08:24.850
So what we're going to do first here
is what I like to do is this, I

136
00:08:24.850 --> 00:08:31.900
actually like to click the little triangle
right next to each of those figures.

137
00:08:31.900 --> 00:08:34.955
And you'll just condense them
into a single line of code.

138
00:08:34.955 --> 00:08:37.922
So you can think about those
as those are our boxes,

139
00:08:37.922 --> 00:08:41.100
we don't actually need to
add any HTML inside of them.

140
00:08:41.100 --> 00:08:42.688
Those are our four boxes.

141
00:08:42.688 --> 00:08:45.808
If those then our boxes on the page,

142
00:08:45.808 --> 00:08:51.842
we need to have a parent around them
to give them flex powers, right?

143
00:08:51.842 --> 00:09:00.039
So to do that we're going to put a div
around this with a class of row, why div?

144
00:09:00.039 --> 00:09:04.486
Because this is doing nothing
except holding a class for us.

145
00:09:04.486 --> 00:09:09.468
It's not trying to convey any
meaning here whatsoever, okay?

146
00:09:09.468 --> 00:09:15.060
So div with a class of row series of
figures that come inside of it, right?

147
00:09:15.060 --> 00:09:20.156
We can do the same type of thing here for
all of our other examples.

148
00:09:20.156 --> 00:09:26.348
So here in row two, let's do that again,
div with a class of row.

149
00:09:26.348 --> 00:09:28.783
That's going to go around to figures.

150
00:09:28.783 --> 00:09:31.462
So again, nothing is going to happen,

151
00:09:31.462 --> 00:09:36.592
we haven't written any CSS to deal
with this row that we're writing here.

152
00:09:36.592 --> 00:09:41.707
It's just going on along down the page.

153
00:09:41.707 --> 00:09:45.280
In row three, we have a big box and
a little box.

154
00:09:49.131 --> 00:09:51.066
Still a div with a class of row.

155
00:09:54.720 --> 00:09:57.015
/div, and then here in row four,

156
00:09:57.015 --> 00:10:02.017
we've got just a single box that's
gonna span all the way across the page.

157
00:10:02.017 --> 00:10:03.835
We can still do that with Flexbox.

158
00:10:13.752 --> 00:10:19.648
And then finally in row five
we're gonna have small,

159
00:10:19.648 --> 00:10:23.851
bigger, small going across our row.

160
00:10:23.851 --> 00:10:29.818
So let's set that up as well,
div with a class of row.

161
00:10:33.262 --> 00:10:38.362
Okay, so the person who was asking
before how do you keep some

162
00:10:38.362 --> 00:10:43.677
number of boxes on the row,
this is the way that you would do it.

163
00:10:43.677 --> 00:10:47.352
We're artificially
constraining them using HTML.

164
00:10:47.352 --> 00:10:51.686
And so we've specified exactly
where each row should occur,

165
00:10:51.686 --> 00:10:56.616
now we're gonna write the CSS to make
it look the way we want it to look.

166
00:10:56.616 --> 00:11:03.067
Okay, so in our CSS box here,
clearly we need to make a row class.

167
00:11:03.067 --> 00:11:09.412
And so this is going to start
with a display of flex and

168
00:11:09.412 --> 00:11:15.628
a flex flow of row rap,
just like I told you before.

169
00:11:15.628 --> 00:11:20.049
By default, it'll do a row, but
by default it'll also do no wrap,

170
00:11:20.049 --> 00:11:24.103
we do actually want it to
wrap on to other lines.

171
00:11:24.103 --> 00:11:30.657
Then I want to say justify
content space between.

172
00:11:33.790 --> 00:11:37.570
Okay it looks a little
odd at the moment but

173
00:11:37.570 --> 00:11:41.680
just putting the space
in between the boxes.

174
00:11:41.680 --> 00:11:45.910
And then we can add to this a gap of 4%.

175
00:11:45.910 --> 00:11:48.085
So, in some of my previous courses,

176
00:11:48.085 --> 00:11:52.027
we've actually had to calculate
what this gap is and work with it.

177
00:11:52.027 --> 00:11:55.625
Now we can actually just declare it like
this with this new gap property which is

178
00:11:55.625 --> 00:11:56.288
really nice.

179
00:12:00.331 --> 00:12:04.749
Obviously that's not quite
the look we were looking for, so

180
00:12:04.749 --> 00:12:07.703
let's continue writing some CSS here.

181
00:12:07.703 --> 00:12:14.717
So if I just say my figure has
a flex basis of something like 22%,

182
00:12:14.717 --> 00:12:21.000
that will go ahead and
put my boxes here all on the first row.

