WEBVTT

1
00:00:00.190 --> 00:00:04.557
Let me just give you a little bit of
background about the Flexbox grid system

2
00:00:04.557 --> 00:00:08.091
and how it works and
then we'll jump into the next code pen and

3
00:00:08.091 --> 00:00:10.402
we'll build a grid system using this.

4
00:00:10.402 --> 00:00:15.156
So the way we want to think about a grid
system with Flexbox is that we're

5
00:00:15.156 --> 00:00:19.513
going to have a series of boxes
whatever they happen to be they have

6
00:00:19.513 --> 00:00:21.988
some kind of content inside of them.

7
00:00:21.988 --> 00:00:26.959
And your HTML may look something like
this I'm using just the div element

8
00:00:26.959 --> 00:00:31.538
here because they're clearly no
content no meaning whatsoever.

9
00:00:31.538 --> 00:00:36.456
This does not have to be divs and in fact
in a moment you'll see we do things with

10
00:00:36.456 --> 00:00:41.300
figures or you could do articles and
sections and any of the HTML elements but

11
00:00:41.300 --> 00:00:44.403
the critical piece of this
HTML is that you have,

12
00:00:44.403 --> 00:00:47.220
I have one element that
wraps around at all.

13
00:00:47.220 --> 00:00:49.960
That's the parent, the flex container.

14
00:00:49.960 --> 00:00:52.220
And you're gonna have
the individual boxes.

15
00:00:52.220 --> 00:00:55.583
Those are the flex items, or the children.

16
00:00:55.583 --> 00:00:59.630
So that's the way the HTML would look for
that.

17
00:00:59.630 --> 00:01:02.680
The CSS winds up looking
something like this.

18
00:01:02.680 --> 00:01:06.950
So on the row, the parent,
we're going to say display flex.

19
00:01:06.950 --> 00:01:09.510
We do a flex flow of row wrap.

20
00:01:09.510 --> 00:01:12.976
Justify the content however we want
to justify it, might be centered,

21
00:01:12.976 --> 00:01:15.660
might be spaced between something else.

22
00:01:15.660 --> 00:01:17.570
And then you can also set up a gap.

23
00:01:17.570 --> 00:01:20.098
This is a new property in Flexbox.

24
00:01:20.098 --> 00:01:23.040
You may be familiar if you know
a little bit about CSS grid.

25
00:01:23.040 --> 00:01:25.480
There used to be a thing called grid gap.

26
00:01:25.480 --> 00:01:28.498
Now it is all just gap on the grid side,
and

27
00:01:28.498 --> 00:01:33.620
on the Flexbox side gap is a new
property that's available to us.

28
00:01:33.620 --> 00:01:38.085
So you can in fact specify
a gap now inside of Flexbox.

29
00:01:38.085 --> 00:01:43.220
Then for your individual boxes,
you can set up a series of flex basis.

30
00:01:43.220 --> 00:01:45.020
This is not real code here.

31
00:01:45.020 --> 00:01:48.518
I need a whole lot more stuff,
a lot of media queries in order for

32
00:01:48.518 --> 00:01:52.742
this to actually be a real thing but the
idea is that you can set your flex basis

33
00:01:52.742 --> 00:01:56.702
to one size for desktop a larger size for
a tablet and a really big size for

34
00:01:56.702 --> 00:02:01.083
the phone that's typically the way you
would set this, just kind of thing up.

35
00:02:01.083 --> 00:02:04.650
So, that's the way the code is
going to look broadly speaking,

36
00:02:04.650 --> 00:02:07.370
as we start to set up
a Flexbox based grid system.

37
00:02:07.370 --> 00:02:11.044
And if you take a look at Bootstrap and
Foundation and UI kit and

38
00:02:11.044 --> 00:02:15.720
all the rest of them, you will discover
that they use Flexbox in this very way.

39
00:02:17.920 --> 00:02:20.645
Okay, you can also rearrange your columns.

40
00:02:20.645 --> 00:02:25.520
That is something else we're gonna try
here in our Flexbox grid system in just

41
00:02:25.520 --> 00:02:30.395
a moment so that you can put things in
order that are appropriate to your HTML to

42
00:02:30.395 --> 00:02:35.495
search engine optimization with that you
have the important information listed

43
00:02:35.495 --> 00:02:40.145
first in the source order the less
important information listed later and

44
00:02:40.145 --> 00:02:44.120
then just reorder using the order
property inside of Flexbox.

45
00:02:44.120 --> 00:02:47.760
Alright so
we are on two chapter two in our notes.

46
00:02:47.760 --> 00:02:51.971
And so this is divided up this
next exercise that we're gonna do,

47
00:02:51.971 --> 00:02:54.750
we're gonna try three pieces of this.

48
00:02:54.750 --> 00:02:56.677
So the first thing that we're going to do,

49
00:02:56.677 --> 00:02:59.290
we're gonna build a desktop
based system only.

50
00:02:59.290 --> 00:03:03.200
Just so you can see how this works without
having to deal with media queries.

51
00:03:03.200 --> 00:03:06.244
Then we'll go back and
retrofit our grid system so

52
00:03:06.244 --> 00:03:09.360
that does in fact work
across different devices.

53
00:03:09.360 --> 00:03:13.310
So we'll add the media queries and
make changes to our values.

54
00:03:13.310 --> 00:03:15.770
And then I have a little challenge for
you to try.

55
00:03:15.770 --> 00:03:19.270
So that is the order of the next few
things that we're gonna do here.

56
00:03:19.270 --> 00:03:25.065
So let's start here by part to a desktop
only, and says the starting code pen.

57
00:03:25.065 --> 00:03:27.998
And this is the layout that we have here.

58
00:03:27.998 --> 00:03:32.504
So as you'll see, we have a whole
bunch of these beautiful boxes, right.

59
00:03:32.504 --> 00:03:35.718
They lovely, and
they're all different colors and

60
00:03:35.718 --> 00:03:38.940
they have this lovely SVG
based background, okay?

61
00:03:38.940 --> 00:03:42.656
And they're all just stacked on top of
each other because we have no layout code

62
00:03:42.656 --> 00:03:43.920
here present.

63
00:03:43.920 --> 00:03:47.060
So let's just check out our HTML first.

64
00:03:48.240 --> 00:03:51.490
So you'll notice that I have
a series of comments here.

65
00:03:51.490 --> 00:03:57.145
We have one row or one box per column
we're gonna build a four column layout and

66
00:03:57.145 --> 00:04:02.279
as we scroll down here's we have two
boxes each spanning two columns so

67
00:04:02.279 --> 00:04:05.498
this is what we're gonna code and
so forth,

68
00:04:05.498 --> 00:04:10.312
there's five rows in all,
you can just read the comments there.

69
00:04:10.312 --> 00:04:14.380
For each unit of content,
we have it set up as follows.

70
00:04:14.380 --> 00:04:19.020
This might be a new HTML element to you,
this is the figure element.

71
00:04:19.020 --> 00:04:23.840
And figures are incredibly
useful HTML elements.

72
00:04:23.840 --> 00:04:25.950
They start with figure
they end with figure.

73
00:04:25.950 --> 00:04:30.873
And inside of them, you might be under
the conception that a figure would

74
00:04:30.873 --> 00:04:35.798
have an image and then some text that
goes underneath the image would be in

75
00:04:35.798 --> 00:04:40.575
an image tag, and the text underneath
would be in the fig caption tag.

76
00:04:40.575 --> 00:04:44.990
However, you can use figures for
a whole bunch of different things so

77
00:04:44.990 --> 00:04:49.630
you see here I don't actually have
an image I just have a div with a class of

78
00:04:49.630 --> 00:04:54.348
one that has the styling that makes
the little the textured background and

79
00:04:54.348 --> 00:04:57.803
the color and so
forth I'll show you that in a second.

80
00:04:57.803 --> 00:05:03.505
You could do this with the pre element and
you could put in ASCII art.

81
00:05:03.505 --> 00:05:05.053
That would be one way you could do this.

82
00:05:05.053 --> 00:05:07.545
You could use the pre element,
maybe the code element.

83
00:05:07.545 --> 00:05:11.733
You could put in some code here as
an example with a caption underneath.

84
00:05:11.733 --> 00:05:13.275
You can reverse the order of these.

85
00:05:13.275 --> 00:05:18.619
You can have the figure caption first and
whatever it is you're demonstrating later.

86
00:05:18.619 --> 00:05:23.487
You can have multiple images inside of
your figure, so in other words you could

87
00:05:23.487 --> 00:05:28.132
either put up a nice layout of some number
of images or you could do something

88
00:05:28.132 --> 00:05:32.570
like an image carousel or
some other interactive kind of image.

89
00:05:32.570 --> 00:05:37.326
So figures are incredibly useful and
what they are intended to

90
00:05:37.326 --> 00:05:42.082
indicate is that this is a unit of
content so we have a graphic or

91
00:05:42.082 --> 00:05:47.030
code or something and
then an explanation that goes with it.

92
00:05:47.030 --> 00:05:52.577
That is the right semantic markup for
that type of thing.

93
00:05:52.577 --> 00:05:55.600
Okay, so it's pretty much like
this all the way through.

94
00:05:55.600 --> 00:05:57.210
I've got some notes in here.

95
00:05:57.210 --> 00:05:58.820
We'll go through all of that in detail.

96
00:05:59.910 --> 00:06:03.131
And then down here in the CSS,
let's look at what we've got.

97
00:06:03.131 --> 00:06:04.630
I've got an empty spot here.

98
00:06:04.630 --> 00:06:08.410
We'll start writing some CSS, but
I've already given you some obviously.

99
00:06:08.410 --> 00:06:12.055
So just so you know what's here we
have our border box declaration that I

100
00:06:12.055 --> 00:06:14.000
described to you earlier.

101
00:06:14.000 --> 00:06:19.925
And then underneath of that we have
the body tag turning off our padding,

102
00:06:19.925 --> 00:06:22.370
we turn off the border.

103
00:06:22.370 --> 00:06:23.555
We have a font family and

104
00:06:23.555 --> 00:06:26.880
then I have a background happens
to be a gradient background here.

105
00:06:27.990 --> 00:06:30.082
The figure itself has
a little bit of margin and

106
00:06:30.082 --> 00:06:32.970
padding associated with
it which I've turned off.

107
00:06:32.970 --> 00:06:37.587
Here's the caption styling,
just the background color, a color and

108
00:06:37.587 --> 00:06:40.652
a little bit of padding
to make it look pretty.

109
00:06:40.652 --> 00:06:44.510
Here is a style that's going
to reduce some of the margins.

110
00:06:44.510 --> 00:06:49.800
Remember that H2, in particular by default
has a big margin associated with it.

111
00:06:49.800 --> 00:06:54.130
This reduces all of those margins
to half a realm with this

112
00:06:54.130 --> 00:06:58.820
particular selector makes it
look pretty and symmetrical and

113
00:06:58.820 --> 00:07:02.968
then we've got this is
the textured background here,

114
00:07:02.968 --> 00:07:07.658
the texture comes from right
from within code pen itself it's

115
00:07:07.658 --> 00:07:12.916
something you can just download and
plug in so here it is it's an SVG.

116
00:07:12.916 --> 00:07:15.310
And this is the formula
that makes it display.

117
00:07:17.790 --> 00:07:21.085
I've set a minimum height on these,
again, just for

118
00:07:21.085 --> 00:07:25.334
demonstration purposes if I didn't
put it a minimum height with this

119
00:07:25.334 --> 00:07:29.142
kind of background SVG,
you wouldn't see it at all, right,

120
00:07:29.142 --> 00:07:34.470
because it has no actual content inside of
that div so you would just see nothing.

121
00:07:34.470 --> 00:07:37.867
So we have to put in a little bit of
height and then each of these have a class

122
00:07:37.867 --> 00:07:40.620
associated with them which
gives them a different color.

123
00:07:42.180 --> 00:07:44.200
So that's the code here
that we have to start with.

124
00:07:47.270 --> 00:07:53.000
All right, so with this HTML,
let's start with our first row here.

125
00:07:53.000 --> 00:07:55.092
We wanna have one box per column,

126
00:07:55.092 --> 00:07:58.980
we are going to have four
columns going across the page.

127
00:07:58.980 --> 00:08:02.376
Reason I pick four columns it's
a nice symmetrical number and

128
00:08:02.376 --> 00:08:06.241
all of the responsive design
frameworks use 12 columns on the page.

129
00:08:06.241 --> 00:08:11.515
It's a lot of work to code 12 columns and
I'm not sure you actually learn

130
00:08:11.515 --> 00:08:16.385
a whole lot more by going all the way
up to 12 than you do using four.

131
00:08:16.385 --> 00:08:21.556
So what we're going to do first here
is what I like to do is this I actually

132
00:08:21.556 --> 00:08:27.090
like to click the little triangle
right next to each of those figures.

133
00:08:27.090 --> 00:08:30.890
And you'll just condense them
into a single line of code.

134
00:08:30.890 --> 00:08:33.358
So you can think about those
as those are our boxes,

135
00:08:33.358 --> 00:08:36.140
we don't actually need to
add any HTML inside of them.

136
00:08:36.140 --> 00:08:38.080
Those are our four boxes.

137
00:08:38.080 --> 00:08:40.889
If those then our boxes on the page,

138
00:08:40.889 --> 00:08:47.100
we need to have a parent around them
to give them flex powers, right.

139
00:08:47.100 --> 00:08:53.630
So to do that, we're gonna put a div
around this with a class of row.

140
00:08:53.630 --> 00:08:55.077
Why div?

141
00:08:55.077 --> 00:08:59.260
Because this is doing nothing
except holding a class for us.

142
00:08:59.260 --> 00:09:04.670
It's not trying to convey any
meaning here whatsoever, okay?

143
00:09:04.670 --> 00:09:07.959
Div with a class of row series of
figures that come inside of it.

144
00:09:09.800 --> 00:09:15.992
All right we can do the same type of thing
here for all of our other examples so

145
00:09:15.992 --> 00:09:21.201
here in row two let's do that again
div with a class of row let's

146
00:09:21.201 --> 00:09:28.320
go into go around to figures So
again, nothing is going to happen.

147
00:09:28.320 --> 00:09:32.020
We haven't written any CSS to deal
with this row that we're writing here.

148
00:09:32.020 --> 00:09:38.094
It's just going on a long
down the page In row three,

149
00:09:38.094 --> 00:09:40.381
we have a big box and a little box

150
00:09:44.411 --> 00:09:51.836
Still div with a class of row Slash div.

151
00:09:51.836 --> 00:09:53.193
And then here in row four,

152
00:09:53.193 --> 00:09:57.120
we've got just a single box that's
gonna span all the way across the page.

153
00:09:57.120 --> 00:09:59.114
We can still do that with Flexbox.

154
00:10:08.821 --> 00:10:13.855
And then finally in row five,
we're going to have small,

155
00:10:13.855 --> 00:10:16.949
bigger small going across our row.

156
00:10:16.949 --> 00:10:23.140
So let's set that up as well.

157
00:10:23.140 --> 00:10:28.042
Div with a class of row,
okay, so the person who was

158
00:10:28.042 --> 00:10:33.058
asking before how do you keep
some of them some number

159
00:10:33.058 --> 00:10:38.420
of boxes on the row,
this is the way that you would do it.

160
00:10:38.420 --> 00:10:42.373
You were artificially constraining
him using HTML and so

161
00:10:42.373 --> 00:10:46.610
we've specified exactly
where each row should occur.

162
00:10:46.610 --> 00:10:49.540
Now we're gonna write the CSS to make
it look the way we want it to look.

163
00:10:51.860 --> 00:10:57.690
Okay, so in our CSS box here,
clearly we need to make a row class.

