[00:00:00]
>> Now that we have a desktop version of our grid system, let's go through and add to this now, the mobile versions of this. So to get started with that, what I'm going to do is, I'm going to take my, just these span type of items that are down here at the bottom, the span, two, three and four.

[00:00:21]
I'm going to contain those inside of a media query. And I'm just a add media. And we'll say it's a mean width of 1000 pixels, which may not work well on the display that I'm using here right now, so I may need to adjust that a little bit.

[00:00:40]
But it probably will work fine on your monitor. I've got mine kinda scrunched down a little bit here, so you can see my code nice and big. Or we get in depth that a little bit. Now notice I did not include my grid declaration here inside of this particular media query and the reason why is.

[00:01:00]
Because, in this particular case, I'm gonna have a tablet media query where I'm gonna declare my grid and all of the parameters there in that will cascade into my desktop media query later. So I don't need to redeclarer, display grid and all of that other additional information, I can declare it once inside of the tablet and it will cascade into my desktop media queries because I'm using men with media queries and we'll stack them up on top of each other.

[00:01:32]
In fact, I'm gonna back this off to 800 pixels, so we have a little bit more room on my particular monitor. You can keep yours at a thousand if that works better. Maybe I even need to back it off further. Like 700, something like that anyway, then up here, around my wrapper.

[00:01:54]
I'm gonna set this up with a media query as well. This will be at media and we'll say a min width have 600 pixels And well, the curly bracket down here on the bottom. We'll dump this. So that'll get us started here looking at this both on tablet and then later on desktop.

[00:02:27]
What we need to do now is to think about exactly how this is going to work across our various breakpoints. And we are going to use exactly the same model that we use with Flexbox. So we're gonna have to think about how some of these layouts are gonna change over the course of working on this.

[00:02:47]
We go, so right now here's the desktop layout. Okay, so there's the desktop layout as we've got it. And one of the things we need to add to that desktop layout real quick before I move on is some ordering down here on the bottom for this last row.

[00:03:06]
Remember we wanted that in the 121 configuration, and right now we have 211 for that configuration. So let's add that before we move on, and so down here in desktop media query, let's add some additional styles to this. We can add ordering to this, it works exactly the same way it does in Flexbox, exactly the same property and all the rest of it which is really nice.

[00:03:34]
So I'm gonna create a class of order let's say order 2. With an order of 2 and we'll set up one with an order of 1 just like that, and then in our HTML you have small I can make this go up here in our HTML, then we can add to this additional classes to deal with the ordering.

[00:04:15]
So, here in our first cell we want this to be order 2. And then in these other figures, this next figure specifically, we'll have a class of order 1, and that will swap things around nicely. And maybe we have to add one more with a class of order 3, and we can write in that class down here, order 3.

[00:04:54]
And so now you should see that the way that you wanted it to go. All right, so order 1, order 2, order 3 all lined up here in that particular row as you would expect, because it's here on the desktop that will reorder here It won't reorder necessarily on the tablet, unless we specifically want to do something different on the tablet, which we don't necessarily.

[00:05:15]
And then of course on mobile, it's going to display in source order. We won't actually put anything outside the media queries here dealing with layout because what we'll do outside of the media queries, these are just a bunch of figures which are block display by default. They will just stack on top of each other going down the page, which is often the layout that you want on mobile anyway.

[00:05:40]
There are some other styles that are down here later in the document that provide the default styling. None of these styles have anything to do with the layout of the web page. Okay, so now the desktop is done as we move on to our tablet display. Let's get to our appropriate breakpoint, which looks like right about in there.

[00:06:05]
And so here, what I'd like to have happen is I'd like my this row of four boxes that first row, I'd like it to turn into two boxes spanning over two columns, or effectively that followed by two more boxes spanning over two columns. So we can write that fairly easily here as well.

[00:06:31]
And we're gonna leverage more of those span properties that we used earlier. So here what I'm gonna do, is I'm gonna say figure, just my generic HTML figure element. Remember, all the classes come later. They're also more specific. So they're gonna override whatever I put here. So for figure I'm going to say grid column span 2, see how nicely that is we don't have to do it once again, still no math, no worrying about the gap, taking that into consideration, all of that kind of thing.

[00:07:07]
So here's my first row. Very simply went ahead and distributed itself very, very nicely. We'll have some more tweaks here to make a little bit later on. When we go to our desktop though, notice that It's gonna continue on. And that is because these in this first row, we just have a series of figure elements.

[00:07:32]
We're gonna need to override that layout when we get to our desktop. So here in our desktop layout, we can say our figure. We'll wind up being a grid column Of span one, basically span across one column. So there it is working nicely on desktop. And when we go to tablet there it is working nicely on tablet.

[00:08:02]
So row one is all done. Row two, we want it to be two across here. And when we go to tablet layouts, we want it to remain that way so we don't have any changes we need to make here on tablet for that particular item. For row number three, remember, we want the one on desktop that took up three columns.

[00:08:32]
We want it to take up the full width here. And the one next to it, we want it to take up the full width as well. So let's write some styling for that. We had a class of span three which now we can repurpose here in our tablet media query will just simply say grid column of spanned four.

[00:08:57]
So now it will take up that full row. Now this other individual box here inside of row three, it's just a figure all by itself. We want this one to behave a little bit differently. Its default figure behavior is to take up one column on desktop and two columns on tablet.

[00:09:22]
But in this case, we wanted to take up one column on desktop and four columns on tablet. So we are going to write a style for that as well And I'm gonna call this style Class of you could do something like span 1, LG, something like that. And what might be your name for that particular class and then you can write it here.

[00:09:54]
Span, in fact we can combine it. Right here with span 3, we could say, span 1-LG. So that's gonna have that property of spanning 4 columns. And now it does but I will also do so on desktop because we haven't told it to go back to one column on desktop.

[00:10:21]
So we'll need to override that when we get to desktop. And so here with our figure that now spans one column, we can combine that and say that span 1-LG. We'll also span 1 column. And so it does, so far, things are looking good for our first three rows on both tablet, there it is.

[00:10:52]
There's the tablet And on the desktop. So, now, row number four, remember it needs to span across four columns on tablet, and on desktop. We actually have that style here on desktop already. We could just simply cut and paste that from the desktop to the tablet media query because we actually want the same behavior at both breakpoints.

[00:11:23]
So we'll specify it on tablet and it'll carry through into the desktop media query. So there that one is on tablet there it is on desktop. And then in our last row always a little bit trickier than the other ones. We want to have this first cell we'd like that to stretch across maybe the full width.

[00:11:48]
And then the other two cells to be on the next row just as they were, and so we can set up some styling for that. So what I'm gonna do here for row number five, this first box we've called it a just a regular old span 2 before, what I'm going to do now is change this and I'm gonna call it a span 2 hyphen, whatever.

[00:12:14]
-Medium, -large, something like that. And and then we can set up a class for that. What I'd like it to do at the tablet media query is I'd like it to span across four columns So we can say span 4-MD. Let me fix the HTML. This is a span 4-MD as well.

[00:12:52]
And then all we have to do is just change it down here inside of the desktop. So span 2, and span 4-MD will have that same behavior. Oops. Okay, so there's the lineup here on the desktop and when we go to our tablet layout, there's the one spanning across the full width.

[00:13:21]
And we have the two cells here that show up underneath. Everything is looking great. If the grid gap here strikes you is a little bit big you could always change that here inside of your tablet media query maybe you wanna go down to something like 2% here on the wrapper, maybe tighten things up a little bit, even 1% maybe you want them even a little bit tighter.

[00:13:47]
You could do a combination of numbers here 2% 1% sorry, the other way around 1%, 2%. We'll get you slightly different dimensions when it will be columns the other will be rows. So you can put in two numbers like that to make this look a little bit better on tablet.

[00:14:11]
And of course then when you get down here to your desktop, if you want to go back to that full 4% gap then you just write a style for that wrapper gap 4%. So you can override anything anywhere along the way. Again, that's not necessarily something that we do so much with Flexbox, but it is absolutely possible to do very easily with grid.

[00:14:36]
And it's really nice because always the math is done for you in grid, whereas you're gonna have to do that math yourself with Flexbox. So this is some pointers on how you can write your own grid system using CSS grid. So again, this is something that you can do to get away from using some of the responsive design frameworks.

[00:14:57]
You don't have to buy into a bootstrap type of grid system or anything else you as you see here, it's pretty straightforward to write something with grid that's very, very lightweight and will do exactly what you want. You can program all of the behaviors that you want across the various breakpoints really pretty easily, just by counting how wide you want things in terms of the number of boxes as opposed to Flexbox where you do have to do real math.

