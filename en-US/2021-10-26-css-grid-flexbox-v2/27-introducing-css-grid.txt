[00:00:00]
>> Time to move on to CSS Grid. So first of all, why CSS Grid? Why would we ever want to use that Flexbox team pretty good? Why would we want to move on to a grid based layout? First of all, it is built in the CSS specification just like Flexbox is so it is totally a legit way of laying out web pages unlike floats, unlike table based layouts, and all of the other hacks that we've used in the history of CSS.

[00:00:27]
The other interesting thing about grid is that there's no row markup required. In the past, we have written a lot of row markup well as it pertains to Flexbox, but now with grid, we don't have to do that anymore because we can specify our layouts in two dimensions.

[00:00:48]
And as always, we're gonna have to mind our parents and children to make sure that we get the correct set of properties on the parents and the children appropriately. Grid is designed to work in two dimensions. That means we have to think about not only going across the page and just the next row on top of each other, we have to think about items that are going to span across various rows or various columns on the page, so we have to think about that.

[00:01:17]
The last point here I want to make is in the first time I recorded this course, and at that point in time, really in 2017. We talked a lot about how we use Flex for UI elements and use grid for major layout. And that was pretty much the recommendation that came from the what wig people from MDN and so forth.

[00:01:38]
But I think after four years of people working with Flexbox, and grid, I think the better recommendation at this point in time is to use Either methodology where they make the most sense. So rather than trying to dogmatically stick to grid for major layout on webpages, and then Flexbox for the UI inside of various cells hat I'm here to tell you is use what works where it works best because there are strengths and weaknesses to each of these.

[00:02:07]
And we're going to dig into a lot of those today. This is a screenshot of grid and Flexbox explained right from the website. As you see here with Flexbox, we have a series of rows just like we have seen all through this course one right after the other.

[00:02:27]
And you can have different numbers of boxes on each of those rows. But it is still row after row after row of boxes. This is what I mean when I say it's one dimensional. All we think about are these various rows or potentially the columns. But realistically, we don't necessarily use columns in our layout processes that often.

[00:02:46]
With grid, we are truly thinking about going across rows, going across columns, which makes for more interesting types of layouts. If you're old enough to remember the table based layout days where we dealt with row spans and col spans, we're back to that again, but with legit, straight up CSS instead of a hack in HTML the way we used to do it.

[00:03:08]
So, this is the major difference between these two methodologies. You need to think very carefully about how you are going to work in two dimensions when you're working with grid. In terms of the browser support, it's all there now. And you don't need to worry about that anymore.

[00:03:27]
So the level one specification, which is CSS Grid, pretty much as maybe you are somewhat familiar with it at this point is supported by all major browsers. And it's been supported by all major browsers for some time now. There is a new type of grid layout called sub grid.

[00:03:46]
It's currently under development and it's only supported by Firefox at this moment in time. For that reason I'm not going to be talking about sub grid today. There's a lot of excitement around sub grid people are very interested in how sub grid is going to change their lives.

[00:04:01]
We'll see, we'll see. And, of course, the partial support or no support is with our usual browser suspects. So any version of Internet Explorer, older versions of Edge, those are going to have issues with support. So pretty much par for the course. All right, so let's talk a little bit about the kinds of markup that we're going to use with grid and then the types of CSS, this is one of the things with grid.

[00:04:32]
Whereas Flexbox had just a few types of Properties that we needed to leverage to make a web page layout, grid actually has several different types of syntax, potentially to do the same kind of thing and you can pick one of those along the way and decide what works best for you.

[00:04:52]
There are some advantages to using one kind of syntax sometimes and other syntaxes at other times. But that is what I want you to be aware of. That's where a lot of the confusion comes from, because there's so many different ways to say the same thing with grit.

[00:05:07]
So this is what your HTML might look like. This is for the starting type of syntax I'm going to lead you through first, which is the line based placement and I'll tell you what that means in just a moment. So your HTML here looks similar to what we had with Flexbox.

[00:05:22]
Before there is a parent or a grid container, there are children or the grid items. And each one of those grid items now has its own class. Reason why is because we're gonna have to spell out potentially where each one of those grid cells is going to go with this first type of syntax.

[00:05:43]
So we set up our CSS, very simply, we tell the wrapper to display grid And we can use the gap property here. Now again, if some of you have some background in grid, we used to say grid hyphen gap that is no longer a thing that has now been displaced by the gap property and the gap property works in both Flexbox and in grid.

[00:06:06]
So if we said just a gap of 10 pixels, that's gonna put a gap horizontally and vertically all the way around these boxes at 10 pixels in this case. With line based placement, we have a series of lines in this case we're working with columns. Those lines also apply to rows.

[00:06:27]
They count like humans, we start with one and you start to the outside of your first grid cell. That becomes line number one. After that first grid cell before the second one That's line number two, and so on across the screen. So in that first cell there we've set our grid column goes from one to two.

[00:06:51]
Our second cell goes from two to three. Our third cell goes from three to four, and our last cell would go from Four to five. So this is a shorthand here. This is a start and an end. You can spell these out with grid hyphen column hyphen, start, grid hyphen, column hyphen, end, or you can just use the shorthand that I've used here where we're indicating the start and finish of both of those lines.

[00:07:20]
Then you can start thinking about the two dimensional aspect of it. What I showed you there before was just a very simple row. If you were laying this out in a more complicated grid fashion, then we're gonna think about what happens if we have a cell that goes over several rows are over several columns.

[00:07:38]
Then for example, here with column one, that dot call hyphen one. It starts at row line number one, it skips over a line number two, because that's part of that cell, and it ends at line number three. So we're going to say our grid hyphen row has a value of one slash three, that is how we go about specifying these.

[00:08:03]
So as you see with this type of syntax, we're very, very specific about where each cell is placed in space using these types of numbers. It's kinda absolutish, where it's saying exactly where we want each cell here inside of the grid. There's nothing wrong with that. If you are very particular about where things are going to go, and this code is not necessarily going to be reused somewhere else.

[00:08:31]
And you don't have necessarily a bunch of, maybe you have a bunch of press releases or a bunch of images or a bunch of some other type of content, little chunks that you want to display nicely on a page. This type of syntax is going to be more difficult to work with under those kinds of conditions where you don't necessarily know how many items you need inside of a grid based layout.

[00:08:53]
Under those kinds of conditions, you might work with Flexbox much more easily. That's kind of what Flexbox was designed to do. Or there are some other grid syntaxes that are a little bit more flexible In terms of where you start and where you end in this line based syntax, we'll take a look at that as well.

[00:09:15]
So as I mentioned, this is the hard part of grid, all these kinds of syntax, so. The numbers we just talked about, the lines actually have their have these numbers. There's a span notation we're going to talk about momentarily. You also have the option of naming your lines.

[00:09:33]
So rather than just going by the numbers, which to me is very simple and straightforward. You can in fact, name your lines. If that is an easier approach for you and then, use those names inside of your syntax. I'm not gonna cover that today, but there's lots of places you can look up what that syntax is.

[00:09:51]
You can also create names, grid, template areas which we will cover a little bit later on. And then of course there's tons of shorthand and longhand properties. So this to me, again is one of the most confusing parts of grid and the best way to mitigate this is to take a look at the CSS tricks page, which is called The Complete Guide to Grid, and I've given that to you on today's notes in the website.

[00:10:17]
And it will give you a link to that particular page on CSS tricks where you can look up all of that syntax. That's probably the best way to go with this. There is another game for practicing your grid syntax if you're interested in that, for the same people who made Flexbox Froggy, we had the CSS Grid garden.

[00:10:37]
It's a great game, I thoroughly encourage you to go play it if you want to explore all of the different ways of saying the same thing inside of grid. The other interesting part of this is tracking your parents and children, the containers and the items. And so this moves through space so we can have a single element that starts as a grid item.

[00:11:02]
Okay, so somewhere out here, we have a grid container. We have this grid item. It's also a grid container for the next element inside of it. That element could be a grid item and a flex item, and a flex container, and so forth. So managing these parents and children can get very complicated.

[00:11:22]
We're gonna look at an example like this a little bit later on. So as I said here, so grid container one goes to grid item one, it also becomes grid container number two, that might become a grid item number two and a flex container with a flex item associated with it.

[00:11:38]
You can in fact stack these up in all kinds of crazy ways. So just sort of know that at this point in time that this is possible and by the end of today you'll know how to do this.

