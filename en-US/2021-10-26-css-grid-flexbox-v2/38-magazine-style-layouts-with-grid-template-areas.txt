[00:00:00]
>> Next up, let's take a look at some possible sort of magazine style layout. So I use the word magazine loosely here. Typically on a website, maybe a content management system based website or a blog-based website where you have a whole bunch of units of content, maybe there's an image, a little bit of title, a little bit of starter text.

[00:00:22]
That type of thing, you may want to play around with the look of that page. So you have a lot of different units that are coming in from a database or from an API, wherever it happens to be coming from. And you wanna lay out a bunch of different boxes here on the web page.

[00:00:38]
In flexbox you would just read those in and they would wrap on two lines, so it actually kinda look just like this. Here's all of the kittens of place kitten, and they're all just lined up here in a row. And that looks great. But maybe you want to emphasize some of these, maybe there are particularly important articles that happened here inside of your system.

[00:01:04]
Maybe you want to make some of these bigger, some of them different types of layouts. It may even be something you wanna program into, say an admin side on a content management system. Where your user could check off that something is a featured article or it's a main article and it would consequently display differently inside of your web page.

[00:01:26]
So those are the kinds of problems that I'm thinking of here next. I'm once again sticking with figures here. But you could very easily do these as little units of content. Maybe they're inside of div tags or article tags and they have the same kind of information. Images and headings and maybe a little bit of text, a link, that kind of thing.

[00:01:49]
So what I've got here to start with is just all of these figures, they're coded up the same way you've seen me code up figures throughout this course. And then down here in RCSS we have our images are set to 100%. Remember again, that's our hack for responsive images so that they flex with the size of the web page, just like that.

[00:02:11]
And I've also eliminated the figure caption, I set a margin top of -4px. You may have noticed in the default styling inside of the figure that there is a small gap between the image and the figure caption. This is eliminating most of it, it looks like maybe there's still a little bit there.

[00:02:28]
Maybe it needs negative 5px. And then inside of my media query, I have laid these out just in a simple grid system. So I said display: grid. I created four evenly sized columns, however many rows we needed, and I set my gap to be 1%. So now the question is, how do I set up exceptions to these rules?

[00:02:49]
So not all of these are equally important. Which is what this type of display indicates. How would I indicate that something is more important here on the grid system, or less important here on the grid system. So let's go through how we might set up something like that.

[00:03:06]
Let's say that I want to set up a featured item. And you can define featured however you want but let's just say in this particular situation that I want the featured item to be particularly large, maybe I want it to go across a couple of rows and a couple of columns.

[00:03:28]
So that one is particularly big and then everything else can kind of wrap around it. So I could just simply set this up to say the class of featured would have a grid row of say span 2 and a grid column of span 2, just like that. From wherever it is, make it span across two columns and two rows.

[00:03:54]
So then when I go and drop that in, I could just pick any of these particular articles and say that it's a featured item. So this one's gonna be featured and that one's gonna be featured. So just by picking two things and putting them here inside of the layout, you'll see here that grid will very nicely take that particular item.

[00:04:24]
It blows it up over two rows and two columns, and it will just wrap the other kittens around it just like that, okay? So you could continue to tweak these a little bit more if you wanted, to make sure that your larger image, maybe you wanna pull that down a little bit.

[00:04:42]
Or you maybe there's more text that goes here with a featured image that shows, that type of thing would be one possibility. But as you can see here, it's very easy just to apply this type of thing wherever you want it to occur. If you wanted to be very specific about where that specific featured item occurred, so it's kinda weird to have it here in the middle of the page.

[00:05:06]
Maybe you really want it towards the top of the page. Then as always, you could be more specific about your grid rows and your grid columns. So let's just say, for example, our grid row is gonna be 1/ span 2. In our grid column is gonna be 1/ span 2.

[00:05:24]
So now here's my featured image up here at the top and all of the others wrap around. But be very careful when you use this type of notation because we have said that the class of featured always starts at a grid row of 1, always starts at a grid column of 1.

[00:05:46]
I had originally applied this to two different cats, hadn't I? So if we double check here, we've got 1, 2, 3, and then 5, so 4 is missing. 4 has the class of featured on it right here. And then we go through 6, 7, 8, and then 10.

[00:06:07]
So cat number 9 has the class of featured on it. But if you'll notice, we see cat number 9, but we do not see cat number 4. Why is that?
>> Override.
>> Not quite an override. What's going on here is we've started at row 1, line number 1 and the column line number 1.

[00:06:34]
So these two cats are on top of each other. Cat number 4 is here, but it's underneath cat number 9.
>> Yeah, underneath, overlap.
>> Yeah, yep, underneath overlap, exactly. Exactly, you can use the z-index property to change the order of these. So if you wanted to, let's say, cat number 4, we'll say featured and we'll say top.

[00:07:01]
We could set up a class of top just for fun. And then we could say a z-index of whatever, will be extreme and say 1,000. And now cat number 4 is on top, the cat number 8 is underneath, okay? So remember that won't happen if you're not specifying where these are supposed to start.

[00:07:24]
If we Instead specify these as just a generic span 2, they show up wherever they are, and you'll see both of them. So you'll need to give that a little bit of thought as you work through an example like this. That is one type of syntax that you can use for a problem like this.

[00:07:40]
So you can use that span notation with the lines that we've talked about quite a bit to this point in the course. There is a another kind of syntax, this is called the grid template areas. So let's go through exactly how we would go about doing that. And a couple of other pointers along the way here as well.

[00:07:59]
So first of all, we've specified how many columns and how many rows we have. Now I can actually name certain combinations of columns and rows into a very specific area. And the way that I would go about doing that is using the grid-template-areas syntax. And the way that that one works, it's a little bit weird in CSS, a very odd looking syntax, but this is how it goes.

[00:08:32]
We are going to say grid-template-areas, that's our property colon, just like you normally do in CSS. And then inside of the quotes, this is going to be my first row. Here, I'm going to say, featured featured featured featured. That looks very, very repetitive, but basically I'm saying that in my first row all four of those cells are assigned a area name of featured.

[00:09:02]
And then if I wanted to add to this a second row of information, I could say something like this ......main main. So here I'm saying we're gonna have, on the next row, we're gonna have two items here they're gonna be called main. And then we'll put in the semi colon.

[00:09:26]
You could continue on like this for as long as you wanted. You could make things span over the rows in addition to spanning over the columns, whatever you want it to do. But basically you're taking each cell going across in that row and you're giving it a name and if there are two cells that have the same name next to each other, they fuse into a single area.

[00:09:47]
If you have two cells in different rows, they have the same name, they fuse into different areas. That's how that all works. So once you have these names established, then you can go through and change around your styling here. So rather than saying featured with using the span notation.

[00:10:08]
Here what we're going to do instead is we're gonna say grid-area: featured. So whatever has the class of featured is now assigned to the featured area. So here's that cat that is going to occupy that full first row, and in fact we have two cats occupying that because we have two cats with the class of featured.

[00:10:32]
And this time cat number 4 also has the class of top on it with the z-index of 1,000. So that one winds up on top and the other cat is underneath. Likewise, we could say, set up a class of main, And we could say it has a grid area of main.

[00:10:56]
And that will be our other location for some kind of cat here, and we can just go ahead and assign that here in our HTML. So, cat number, whatever this was, cat number 8, let's just say we wanted to put that in the main location. So we'll give it a class of main.

[00:11:21]
And now you'll see, There's the cat with the class of main. And we have the other cats filling in all the way around it just like that. Kind of a nice sort of setup. And so once again, if you're on a content management system, this might be a better approach to getting those images, or units of information, whatever they happen to be, off the server and then arranging them here on the page.

[00:11:48]
You could set some UI that will allow your content creators to assign specific areas, like feature domain, or you can call them whatever you want. And that would allow them to set up a web page configuration like this, that type of thing. Doesn't have to be in the top edges, the way that I've drawn it here, but that's generally a good way of doing that.

[00:12:14]
You're also not prevented from combining these techniques. So just because we started here with grid area, does not mean that we can't use the span syntax anymore. So we could start setting up some span syntax as well. So if I had another one here, let's call it middle.

[00:12:37]
I could say a grid row of span 2. Oops, span space 2 and a grid column of span space 2, and we can then take that and assign it to any of these class as well. So let's say cat number 1, we actually want it to go to the middle.

[00:13:03]
Actually not cat 1. Let's do cat here in the middle. Class, Class=middle. There we go. And then if you take a quick peek, there it is. So here is the main cat here, and then here is the middle cat over here. It looks like I just happened to pick such a space that it wound up showing up over here.

[00:13:34]
If I took that class of middle and moved elsewhere, Now it's over here on the left-hand side instead. Okay, just sort of depends. Yeah, Mark
>> With grid-template-areas, what's the difference between the dot dot dot and just dot again?
>> I don't think there is a difference. You can have just plain one dot or you can have the three dots and I think it will do the same thing.

[00:14:05]
It's kind of an offset type of situation. That's what that is doing.
>> There's people saying it so cool magic.
>> So cool magic. I know, no math. Isn't it great? Super fun stuff. So this is just a concept type of page here to give you, hopefully, again, generate ideas about how grid could be used in your page layouts.

[00:14:26]
You can think of these figures as cards potentially. That's actually our next topic to talk about. This is one type of treatment that you could use for laying out different kinds of cards on the web page. We've kept this layout really, really simple so far. Notice that I have a media query, it's at a minimum width of 600px.

[00:14:48]
So I've just kept this as simple as simple can be, but you can actually take this to a whole 'nother level. And that's what we're gonna look at and then next section here, as we start to look at card-based layouts.

