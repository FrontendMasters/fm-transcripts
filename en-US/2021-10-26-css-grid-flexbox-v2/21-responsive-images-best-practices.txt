[00:00:00]
>> So if we had came up with a prime directive, I would say that only one image should load even if many are specified. So this is the big problem back in the earlier days of responsive images where we used to line up a whole bunch of image tags and we'd set some display properties.

[00:00:17]
All of those images would typically load and we'd display one of them. So we actually made situations worse for ourselves. So whatever solution you have, however many images you're may choose from to display on the web page, we only want one of them to load. So that is the thing to always keep in mind as you look at responsive design solutions.

[00:00:39]
So, here's an example of the bad code that I was talking about here just a moment ago. We used to do this in bootstrap back in some of the early versions, we would have a div. inside of it, we'd have two images, we give them classes, and then we'd use display none to turn on and off those images.

[00:00:56]
Even if they're set to display none, both of these images are going to load you've actually made your web page load more slowly. Than you would have if you just stuck with one image and just reframed it. So, don't do this, don't do this bad code, okay. Other code you can use cautiously so you have seen me use all the way up to this point in the course and going forward.

[00:01:20]
You have seen me do this. We have an image on the page, we set the width to 100%. And you can throw a max width on top of that too if you don't want it to get bigger than a certain point that's optional. But what this will do is give your image flexibility within the space, okay?

[00:01:38]
The problem here is that you have one image that loads regardless of what device you're using, regardless of the speed of the connection. And that is going to cause potentially a very large image to download to a mobile device for example. And so this works if you're working with small images that are already small in file size.

[00:02:00]
In other words, you don't have to use responsive image code for every image that ever was on your webpage. It takes a lot of time and effort to put this stuff together. And quite frankly, sometimes it's just not needed if they're small images and they are a reasonable file size.

[00:02:16]
And you're getting good performance out of your webpage, don't take the time to do responsive image. This may be the right solution for you. So let's talk about those two different possible approaches that you have. The first one is the picture tag. And so this one lets you the webpage author, decide which image displays under which condition.

[00:02:36]
And this is the one that I talked about on the previous version of this course. So, let's say that you have this lovely picture of the hot air balloons again. So what you might do is art direction. You have various pieces of this that you might wanna display under different conditions.

[00:02:55]
Just taking this giant image and scaling down to something small for a small device results in this as you see here. And you lose a lot of detail out of that image. So a better approach is to do the art direction which means let's crop it and pick out the important parts of the picture.

[00:03:13]
Maybe it's this these two balloons that are here together. Or maybe you actually want to put the focus somewhere else that the flattened balloon that's there on the ground, you might not have even noticed that that was there. So, using this technique of art direction, you're going to go to Photoshop or whatever tool you're using for cropping images.

[00:03:31]
And you'll create those alternative versions of the image yourself outside of your code. Then you're gonna drop that into your HTML, and it's gonna look like this, you have a picture element that goes all the way around it and then you're gonna make use of the source element.

[00:03:49]
If you're familiar with the audio and video elements, the source element is familiar to you. You can have as many of these source element as you want, they stack one on top of the other. And they contain a source for the image and they contain a media query.

[00:04:04]
And the media query says, under whatever conditions you want that you'd like this particular image to load, the media query is optional. You could use this in other ways I'll show you in just a moment. But that is the typical way that the picture element is used. And then you can provide an alternative image in this case, this is the smaller version of the image.

[00:04:27]
And that will load either when the picture element is not supported, so you're on an old version of IE or when this is the default image. So none of the media queries are satisfied so this other image loads. In this particular code If your screen was less than 850 pixels, you'd get the smaller image.

[00:04:53]
You can also do this with different media queries. So here I've said, load this first one if the orientation is landscape so let me say a little bit about media query with an orientation of landscape. Landscape and portrait just like you've used in print for years landscape is wider than tall portraits the other way around taller than wide.

[00:05:18]
When you are talking about this, you are not talking about your phone, in portrait or landscape that is not what we are referring to. We are actually referring to dimensions here so if the window the browser window the window of the device is wider than it is tall it is considered landscape.

[00:05:39]
If it is taller than wide, then that's considered portrait so it doesn't have anything to do with the orientation of the device. So in this case, if it is wider than it is tall, we're gonna get the larger version of the picture. Or maybe we'll get the skinnier version art direction picture here that shows a very different kind of view of this image.

[00:06:04]
You can also use this type of element if you want to make use of WebP images for example. Those are supposed to be very good for Image optimization, they're a brand new format that are coming out from Google. They're supposed to be really good for compression and communicating more information and less disk size.

[00:06:23]
So you really wanna make use of your WebP images for performance reasons. But you wanna provide a PNG in case the browser doesn't support web WebP excuse me. So here we've got two versions. We've got the, the WebP version we have a different version that's a PNG, and then we have a fallback.

[00:06:44]
That might be something smaller, it's just a regular old JPEG, okay? But there's a lot of things that pictures forget about responsive elements along the way. So it forgets to tell the browser things like how big is the image location that hole in the page layout. Remember that the browser is gonna load from the top of the page going on down.

[00:07:06]
When it hits that image, if it doesn't know how big of a space to leave for it, it's gonna wait until it downloads the picture before it starts downloading the rest of the web page. So if we tell it how big that hole should be, then the browser knows to save that much space and it will continue to download it feel faster.

[00:07:26]
How big are the images or the peg that fits into that that hole? How big are those images that might be displayed? So we have the size, the image, the size of the hole, and what is the pixel density of the screen. These are things that the browser doesn't know, as it's waiting for these pictures to download.

[00:07:45]
So you could compensate for that you could write this piece of code with all of these different media queries, with min-widths and max-widths device pixel ratios and all the rest of it, I don't have time for this. I don't know about you, but I have better things to do than to write this kind of HTML.

[00:08:03]
So that is a possibility [LAUGH] you could do this, I think it'd be a little bit crazy. So this is where srcset and sizes come in. But, potentially, the downside to this is that the browser is going to decide which image is going to display. So with picture you have total control, but then you might wind up writing some crazy HTML in order to get the right image displaying at the right place.

[00:08:29]
Here you're gonna write much less HTML, but you leave it to the browser to decide. So as Eric Kortis, describes in his article here, I've cited it here, I encourage you to go and read this. He does a great job explaining this stuff. He says what the author knows as they write the web page and what the browser knows as it's loading the web page.

[00:08:51]
And if you notice they're sort of staggered in terms of their yes and no. So now in terms of viewport dimensions, and screen density and source files and so forth, they stagger on down here. So what srcset and sizes do, they work together to tell the browser everything it needs to know to make its best decision as to which image it should load.

[00:09:12]
Okay, so it's gonna tell all that. But remember, once again, I'm gonna say this like 1000 times, the browser gets to decide and it may not decide what you think is best. So if you're a control freak, the picture element is totally for you. But if you're willing to give it up to write less code, then srcset and sizes may be a better way to go.

[00:09:35]
All right, so as I said, one more time, the browser decides which image is going to load and it may not load the image that you expect. Also different browsers may make different choices. That's the crazy part. So what Firefox decides to do may be different than what Chrome decides to do.

[00:09:53]

>> Can I somehow put a picture when the same images used in like a variable instead of repeating the entire path over and over and over again.
>> Well, this is HTML, not CSS. So I don't think you can do I mean maybe you could do something with JavaScript but not in straight HTML.

[00:10:15]
In fact, for that matter where's the stuff gonna come from? Most likely you're not gonna write it in straight HTML, it's gonna come off the server or you're probably going to do something with JavaScript anyway. But I'm talking straight HTML here today. All right, so this was what the srcset and sizes code winds up looking like.

[00:10:34]
It's like this and so let's walk through what this code is line by line. So first of all, the image tag, you know and love. So you have your image source and you have your alt text always. And that's gonna be the same regardless of what image loads.

[00:10:52]
So this is why you're gonna use the same image and let the browser choose so there's no art direction here. There's no different images that might require different alt texts, all the same alt text, okay? This part in the middle are the file names and then next to it is something like 1024w that is the width in pixels of that particular image.

[00:11:15]
So here we've got three possible options, small.jpg is the default with the srcset. We have a 1024, 6040 and a 320 pixels. So it's kinda like in the old days when you used to put in the width and your image tag you said width of 1024, that was 1024 pixels.

[00:11:35]
And then sizes is the hole in the web page. So what this bit of code here says is, if the minimum width is at least 36m then display the image at 33.3 viewport widths. Otherwise, display the width at 100 viewport widths. That's what that one a code means, okay?

[00:11:57]
So that's the way you would set up a code for srcset and sizesand you use them together. You might think this is a great way to deal with retina images as well or other pixel dense images. It as Eric, Kortis points out in his article here, this one's at a list apart.

[00:12:16]
It's a nice compact way to supply high DPI imagery but it only works for fixed width images. So if your image is going to change dimensions or if it's going to flex using that width of 100% or something. This type of code is not going to work for that, but it is, another possible syntax, okay?

[00:12:38]
And you can combine these, which is probably the next question somebody had. So you have the picture tag inside of it. You can have your individual source elements and then each of those can have srcset and sizes associated with them. So this is an example of how that code might look if you wanted to combine these things.

[00:12:59]
All right, notice here that in the source media this particular example that I got was from was was of using the aspect ratio in the media query. So in other words, if it's a 16 by nine screen we're gonna learn one set of images but if it's a one by one or square.

[00:13:18]
Type of screen we're gonna load different types of images. Okay. So what should you use? Here's the big summary. So if you're on a picture tag you're going to use the image is optimised for content reasons, rather than technical reasons. So the content of that image is far more important than the technical considerations of speed of download.

[00:13:47]
And then, of course, for srcset and sizes, it's the other way around there. We're gonna have the technical reasons for downloading a particular image trump, whatever is in the image. For the picture, the author is gonna choose the best image. The browser is gonna choose it under src and srcset.

[00:14:03]
And the images may be varied in different composition and dimension on the picture tag. But they should probably all be the same on src and srcset, that's the wrong srcset and sizes. And that's because the browser is gonna choose which image is going to be used on the page, you probably don't wanna have a variation of the composition of the picture.

[00:14:29]
So finally, let me also just mention here real quick as we go forward background images can also be responsive. What you want to do in order to make your background images be sure that only one of them loads is that you want to contain your background images in a media query.

[00:14:44]
Another words you're never gonna have as we have done many times now, to this point. We have some styles that are outside of the media query, that tend to be mobile in nature. You're never ever gonna put background images out in that particular part of your style sheet.

[00:15:01]
The background images are always gonna be inside of some kind of media query so that only one image will load under those conditions. Remember, we're the only crazy people that do this stuff with our browser windows and cause lots of images to download. Most people just open their browser window and read web pages and so only one background image should download under those conditions.

[00:15:26]
Okay, that's all those points. And so here's an example of that. We have a media query with a max width of 700. It's gonna download this, but if it has a minimum width of 701 will download a different image. That's what that code would wind up looking like.

