WEBVTT

1
00:00:00.120 --> 00:00:03.383
So the next thing I'd like to
do is move on to chapter 10.

2
00:00:03.383 --> 00:00:08.856
And in chapter 10, we are going to
code the same exact grid system

3
00:00:08.856 --> 00:00:14.544
that we coded with Flexbox, now,
we're gonna code this with Grid.

4
00:00:14.544 --> 00:00:18.863
And we're gonna start by just
doing the desktop version of

5
00:00:18.863 --> 00:00:22.048
our layout exactly as we did with Flexbox.

6
00:00:22.048 --> 00:00:24.637
So if you take a look at your HTML,

7
00:00:24.637 --> 00:00:28.620
this is exactly the same
example we had yesterday.

8
00:00:28.620 --> 00:00:32.602
We have a div with a class of wrapper
going all the way around things here.

9
00:00:32.602 --> 00:00:38.303
All right, so I'm just gonna fold
up these figures here just so

10
00:00:38.303 --> 00:00:41.006
you can see what's going on.

11
00:00:41.006 --> 00:00:44.705
So notice that I have a class of
wrapper around the whole thing and

12
00:00:44.705 --> 00:00:47.115
then I just have a series of figures here.

13
00:00:47.115 --> 00:00:52.000
Now, with Flexbox what we had to do was
we had to put a div with a class of row

14
00:00:52.000 --> 00:00:57.469
around all of these groups of figures,
but with Grid, we don't need to do that.

15
00:00:57.469 --> 00:01:01.787
With grid, we can control all of
this centrally with our CSS and

16
00:01:01.787 --> 00:01:04.078
we can do it very, very quickly.

17
00:01:04.078 --> 00:01:06.559
It's really a very nice system.

18
00:01:06.559 --> 00:01:08.510
So, just like we did with Flexbox,

19
00:01:08.510 --> 00:01:12.427
we're gonna have our first row is
gonna have four separate boxes in it.

20
00:01:12.427 --> 00:01:15.887
Our second row will have two
boxes spanning two columns.

21
00:01:15.887 --> 00:01:18.286
Our third row has got the three plus one.

22
00:01:18.286 --> 00:01:20.932
Our fourth row is just one giant box.

23
00:01:20.932 --> 00:01:24.634
And our fifth row is the one
to one configuration.

24
00:01:24.634 --> 00:01:31.189
So let's write some desktop styles for
that.

25
00:01:31.189 --> 00:01:37.492
So we'll start with our wrapper, Because
that's the parent to all of these figures.

26
00:01:37.492 --> 00:01:42.140
And so
this is where we place our display: grid.

27
00:01:42.140 --> 00:01:44.612
That's how it starts always.

28
00:01:44.612 --> 00:01:49.854
Now, what I would like to do is I'd like
to have four columns on this page and

29
00:01:49.854 --> 00:01:52.612
I'd like them to all be the same width.

30
00:01:52.612 --> 00:01:59.168
Now, we could write out something
like this grid-template-columns.

31
00:01:59.168 --> 00:02:06.774
And we could say something like 25%,
25%, 25%, 25%.

32
00:02:06.774 --> 00:02:09.946
That would be absolutely legitimate and
then as you see here,

33
00:02:09.946 --> 00:02:12.027
it displays very nicely on the web page.

34
00:02:12.027 --> 00:02:14.730
But there are more efficient
ways to write this code.

35
00:02:14.730 --> 00:02:17.849
So let's go through other
ways of writing this syntax.

36
00:02:17.849 --> 00:02:22.700
So with the usual caveat,
as you were writing your CSS the best

37
00:02:22.700 --> 00:02:26.538
way to write it is the way
that you understand it.

38
00:02:26.538 --> 00:02:29.330
So you don't have to leverage
all of the shortcuts and

39
00:02:29.330 --> 00:02:32.007
all of the additional syntax and
all the rest of it.

40
00:02:32.007 --> 00:02:35.847
If you don't understand your own code,
there are problems.

41
00:02:35.847 --> 00:02:40.461
So I'm showing you a whole bunch of
different ways to write exactly the same

42
00:02:40.461 --> 00:02:40.984
thing.

43
00:02:40.984 --> 00:02:44.106
Here we're going to do something
slightly different and

44
00:02:44.106 --> 00:02:47.300
something that you'll see
a lot in other people's code.

45
00:02:47.300 --> 00:02:51.589
For a Grid template columns,

46
00:02:51.589 --> 00:02:57.772
say repeat(4, and then this, 1fr).

47
00:02:57.772 --> 00:03:05.049
1fr is a unique unit to Grid,
you cannot use fr anywhere else in CSS,

48
00:03:05.049 --> 00:03:10.076
it's only for Grid and
fr stands for fraction.

49
00:03:10.076 --> 00:03:13.421
So in other words we're telling Grid,
I would like for

50
00:03:13.421 --> 00:03:16.632
you to divide the screen
into four equal fractions.

51
00:03:16.632 --> 00:03:20.802
So it figures out that that's about
25% of the width of the screen and

52
00:03:20.802 --> 00:03:22.480
it sets it up just like this.

53
00:03:22.480 --> 00:03:27.120
And rather than writing out those
individually we're using this

54
00:03:27.120 --> 00:03:28.477
repeat notation.

55
00:03:28.477 --> 00:03:33.850
You could also write
this as 1fr 1fr 1fr 1fr,

56
00:03:33.850 --> 00:03:37.401
that's perfectly legit also.

57
00:03:37.401 --> 00:03:41.991
And you may have reasons for doing that
if this is more understandable to you.

58
00:03:41.991 --> 00:03:45.938
But normally you'll see
this written as repeat(4,

59
00:03:45.938 --> 00:03:51.105
in other words 4 of these,
1fr that's the width for each one of them.

60
00:03:54.143 --> 00:03:59.780
And then we're going to have
our grid-template-rows,

61
00:03:59.780 --> 00:04:02.547
we can just set that to auto.

62
00:04:02.547 --> 00:04:05.185
However many rows you need, have fun.

63
00:04:05.185 --> 00:04:07.456
Just go ahead and
set it up and make it happen.

64
00:04:07.456 --> 00:04:10.117
That's what we're telling Grid to do here,
so

65
00:04:10.117 --> 00:04:12.988
we don't have to be all
that specific all the time.

66
00:04:12.988 --> 00:04:18.449
And we can also say our gap is 4%.

67
00:04:18.449 --> 00:04:23.358
So this is working off the similar kind of
math that we had with Flexbox once again,

68
00:04:23.358 --> 00:04:26.429
where we had a 4% gap across
all of our grid cells.

69
00:04:26.429 --> 00:04:31.624
Well, we've got the same kind of
thing going on here with a 4% gap.

70
00:04:31.624 --> 00:04:36.493
The difference here is that gap in
Grid applies in two dimensions.

71
00:04:36.493 --> 00:04:44.017
So we've got a 4% gap in between
the cells and a 4% gap between the rows.

72
00:04:44.017 --> 00:04:47.942
So not only between the columns,
but between the rows as well.

73
00:04:47.942 --> 00:04:53.433
So by default, it's going to put every one
of these grid items into its own cell and

74
00:04:53.433 --> 00:04:58.128
line them all up really,
really nicely with very, very little code,

75
00:04:58.128 --> 00:04:59.339
very efficient.

76
00:05:02.441 --> 00:05:09.137
So let's go through here and think about
now what we wanna do with our second row.

77
00:05:09.137 --> 00:05:14.058
And I said we have two boxes, each of
those is going to span two columns.

78
00:05:14.058 --> 00:05:18.121
So first of all,
based on what you know so far,

79
00:05:18.121 --> 00:05:22.811
what kind of syntax might we
use to specify how we would

80
00:05:22.811 --> 00:05:27.416
say these two cells should
be spanning two columns?

81
00:05:27.416 --> 00:05:31.689
&gt;&gt; There is a question about the gap
percentages are based on what property?

82
00:05:31.689 --> 00:05:36.268
&gt;&gt; Gap is the property, 4% is the value.

83
00:05:36.268 --> 00:05:38.408
Are you talking about 4% of what?

84
00:05:38.408 --> 00:05:42.539
4% of the screen, well,
4% of the containing element,

85
00:05:42.539 --> 00:05:45.536
in our case, the wrapper is the container,

86
00:05:45.536 --> 00:05:49.748
the wrapper is occupying 100%
of the width of the screen.

87
00:05:49.748 --> 00:05:55.208
So it winds up being effectively 4% of the
viewport width in this particular case.

88
00:05:55.208 --> 00:06:01.144
If your rapper was 50% of the screen,
it would be 4% of that 50%.

89
00:06:05.321 --> 00:06:06.539
&gt;&gt; Yeah, that's what they're asking.

90
00:06:06.539 --> 00:06:08.857
&gt;&gt; Okay, cool.

91
00:06:08.857 --> 00:06:14.822
All right, so we could set up now our
second row here in a very reusable way.

92
00:06:14.822 --> 00:06:18.377
So what I'm going to do here
on my figure in my HTML is

93
00:06:18.377 --> 00:06:20.877
I'm gonna set this up with a class.

94
00:06:20.877 --> 00:06:23.847
And I'm gonna call it span2, why?

95
00:06:23.847 --> 00:06:27.277
Because we're gonna span
across two columns.

96
00:06:27.277 --> 00:06:30.370
And I'm gonna set that up here and

97
00:06:30.370 --> 00:06:35.241
my second figure as well,
a class of span2, okay?

98
00:06:35.241 --> 00:06:41.629
And then we can write the corresponding
CSS very easily, span2.

99
00:06:41.629 --> 00:06:44.505
What would I write here?

100
00:06:44.505 --> 00:06:52.872
grid-column: span 2; boom, that's it.

101
00:06:52.872 --> 00:06:54.894
Really, really very straightforward.

102
00:06:54.894 --> 00:06:59.450
So in a desktop type of layout,
I don't have to do any math.

103
00:06:59.450 --> 00:07:02.073
Remember all the crazy math
we had to do with Flexbox and

104
00:07:02.073 --> 00:07:04.477
making sure that everything
lined up correctly?

105
00:07:04.477 --> 00:07:08.524
We don't have to do any of that with Grid,
Grid does it all for you, it's amazing.

106
00:07:08.524 --> 00:07:16.130
And so we can now just take this style for
span2 and let's set up a couple more.

107
00:07:16.130 --> 00:07:18.596
I'm just gonna paste
that in a couple times.

108
00:07:18.596 --> 00:07:23.844
So I'm gonna set up a class of span3 and
a class of span4,

109
00:07:23.844 --> 00:07:28.461
and I'm gonna tell it to span 3 and
span 4, okay?

110
00:07:28.461 --> 00:07:32.656
Get desktop based layout only.

111
00:07:32.656 --> 00:07:36.852
And now all I have to do is drop the
classes in where I want them to appear.

112
00:07:36.852 --> 00:07:45.382
So here in my row 3 the first
figure I'll say a class of span3.

113
00:07:45.382 --> 00:07:51.549
In row number 4 I have a class of span4.

114
00:07:51.549 --> 00:07:55.893
And in row number number 5, maybe my
first item here would be a class of,

115
00:07:57.838 --> 00:08:01.378
span2.

116
00:08:01.378 --> 00:08:06.573
So notice how much less code we
have now in our grid system.

117
00:08:06.573 --> 00:08:09.140
How much less math we had to write, and

118
00:08:09.140 --> 00:08:14.526
how many less machinations we have to go
through in order to set up this web page.

119
00:08:14.526 --> 00:08:16.592
It's very straight forward.

120
00:08:16.592 --> 00:08:21.724
The HTML is much more streamlined,
we have really streamlined CSS.

121
00:08:21.724 --> 00:08:24.588
We did it in just a handful
of declarations here.

122
00:08:24.588 --> 00:08:26.923
And everything lines up perfectly,

123
00:08:26.923 --> 00:08:31.980
on the page we have exactly the layout
that we're looking for, just like that.

