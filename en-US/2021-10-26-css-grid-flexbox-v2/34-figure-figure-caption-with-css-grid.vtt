WEBVTT

1
00:00:00.190 --> 00:00:04.853
But this is one of my
favorite new tricks that I'd

2
00:00:04.853 --> 00:00:09.873
like to demonstrate for
you here inside of CodePen.

3
00:00:09.873 --> 00:00:13.696
So we're looking at number 11,
we're in chapter 11.

4
00:00:13.696 --> 00:00:16.655
This is the beginning state and
we're looking at figures and

5
00:00:16.655 --> 00:00:17.882
figure captions again.

6
00:00:17.882 --> 00:00:22.252
When we were working in flexbox,
I walked you through the process of

7
00:00:22.252 --> 00:00:27.399
overlapping a caption onto a figure
using absolute and relative positioning.

8
00:00:27.399 --> 00:00:30.563
And that is a wonderful
way of doing things.

9
00:00:30.563 --> 00:00:32.142
It's been around for, gosh,

10
00:00:32.142 --> 00:00:35.432
15 years now that you've been
able to do something like that.

11
00:00:35.432 --> 00:00:39.708
Although not necessarily the figure tag,
but the concept has been around for

12
00:00:39.708 --> 00:00:40.710
a very long time.

13
00:00:41.940 --> 00:00:46.765
One of the really interesting things
that grid does that flexbox does

14
00:00:46.765 --> 00:00:49.851
not do is grid allows
your cells to overlap.

15
00:00:49.851 --> 00:00:54.306
So by leveraging grid inside of your
figures and your figure captions,

16
00:00:54.306 --> 00:00:58.911
you can overlay your figure captions
very nicely over your figures here,

17
00:00:58.911 --> 00:01:02.936
without even having to use absolute and
relative positioning.

18
00:01:02.936 --> 00:01:07.601
So let's take a look at how exactly
that would look here in this particular

19
00:01:07.601 --> 00:01:08.288
example.

20
00:01:08.288 --> 00:01:10.196
So what I've got inside of,

21
00:01:10.196 --> 00:01:15.280
I have a div with a class of row around
all of these particular figures.

22
00:01:15.280 --> 00:01:19.304
Inside of that I have four different
figures, they have different content, but

23
00:01:19.304 --> 00:01:20.852
they all have the same markup.

24
00:01:20.852 --> 00:01:25.392
So the way the markup goes,
we have a figure, we have an image.

25
00:01:25.392 --> 00:01:27.183
And then we have our figure caption.

26
00:01:27.183 --> 00:01:31.432
In the figure caption and it has an h2 and
a paragraph inside of it.

27
00:01:31.432 --> 00:01:36.581
So where are our children?

28
00:01:36.581 --> 00:01:38.501
And where are our parents?

29
00:01:38.501 --> 00:01:40.872
We've actually got two sets going on here.

30
00:01:40.872 --> 00:01:45.517
So first of all,
to create this set of four cells

31
00:01:45.517 --> 00:01:49.011
here laid out in the following way.

32
00:01:49.011 --> 00:01:53.897
That's actually, if you scroll down
in the CSS I've already given you.

33
00:01:53.897 --> 00:01:58.261
I have a media query here set up for
600 pixels and higher.

34
00:01:58.261 --> 00:02:00.901
And this is set up with display grid,

35
00:02:00.901 --> 00:02:04.830
grid template columns of 1fr 1fr,
and a gap of 2%.

36
00:02:04.830 --> 00:02:07.064
So, that is our first round of layout.

37
00:02:07.064 --> 00:02:12.733
That just gives us a very nice layout
of those four cells there on the page.

38
00:02:12.733 --> 00:02:15.976
Now we're going to do
a second set of layouts.

39
00:02:15.976 --> 00:02:19.004
This is going to be
within the figure itself.

40
00:02:19.004 --> 00:02:21.278
So where are the parents and children?

41
00:02:21.278 --> 00:02:23.875
Here in inside of our figure.

42
00:02:23.875 --> 00:02:29.556
We have a figure and it has two children,
an image and a figure caption.

43
00:02:29.556 --> 00:02:33.256
So, what do we need to do?

44
00:02:33.256 --> 00:02:36.393
If you plan in advance,
what we wanna have happen is,

45
00:02:36.393 --> 00:02:39.199
we wanna have our image and
our figure caption.

46
00:02:39.199 --> 00:02:44.512
We wanna have the figure caption
overlap that image at least somewhat.

47
00:02:44.512 --> 00:02:49.359
So our figure is going to wind up being
our grid container or our parent.

48
00:02:49.359 --> 00:02:54.421
The image and the figure caption or
our grid items or the children.

49
00:02:54.421 --> 00:03:00.523
And we're going to somehow make these
two things overlap using CSS grid.

50
00:03:00.523 --> 00:03:04.844
So let's write that code now that I've
explained to you the thought process

51
00:03:04.844 --> 00:03:06.405
behind what we're doing.

52
00:03:11.003 --> 00:03:15.298
So, I've got several declarations here,
a figure captions, and figures and

53
00:03:15.298 --> 00:03:16.335
all the rest of it.

54
00:03:16.335 --> 00:03:19.406
I am just going to hit return
a whole bunch of times,

55
00:03:19.406 --> 00:03:23.344
just to keep things straight
forward as to what I'm adding here.

56
00:03:23.344 --> 00:03:27.109
In the real world you would probably
combine all of these into single

57
00:03:27.109 --> 00:03:28.042
declarations.

58
00:03:28.042 --> 00:03:31.323
But for now, for learning purposes,
let's do it this way.

59
00:03:31.323 --> 00:03:33.052
So I'm gonna start with figure.

60
00:03:35.570 --> 00:03:39.080
And I'm going to set it up to display grid

61
00:03:42.090 --> 00:03:45.121
And I'm going to have a single column.

62
00:03:45.121 --> 00:03:47.862
The layout is here exactly as I want it.

63
00:03:47.862 --> 00:03:52.823
I want everything to be in one column,
but I'm going to declare that column.

64
00:03:52.823 --> 00:03:57.384
So grid, hyphen template, hyphen columns.

65
00:03:57.384 --> 00:04:01.183
And we can just set that up to be again,
one fr.

66
00:04:01.183 --> 00:04:04.316
The actual width of this
column doesn't really matter,

67
00:04:04.316 --> 00:04:05.888
just take up the full space.

68
00:04:05.888 --> 00:04:08.452
So one fr is just fine.

69
00:04:08.452 --> 00:04:13.650
And I'm gonna set it up
interestingly with three rows,

70
00:04:13.650 --> 00:04:16.312
so grid, template, rows.

71
00:04:16.312 --> 00:04:19.453
Repeat, three comma auto.

72
00:04:22.110 --> 00:04:28.250
So I wanna have three rows, you figure
out how tall each of those rows are.

73
00:04:28.250 --> 00:04:29.673
Why three rows?

74
00:04:29.673 --> 00:04:33.659
Because we're gonna start with,
in our initial three rows,

75
00:04:33.659 --> 00:04:38.194
what grid will do is say, okay,
I have an image, that goes in row one.

76
00:04:38.194 --> 00:04:41.412
I have a figure caption,
that goes in row two.

77
00:04:41.412 --> 00:04:45.502
And I do have a third row,
but it's currently empty.

78
00:04:45.502 --> 00:04:48.338
You don't necessarily see
that displayed on the screen.

79
00:04:48.338 --> 00:04:53.160
Grid knows that it exists because we
have declared that it exists, but

80
00:04:53.160 --> 00:04:58.488
it's not populated with anything at
this particular moment in time, okay?

81
00:04:58.488 --> 00:05:05.971
So now what I wanna do is, I'm going to
set up my image and my figure caption.

82
00:05:05.971 --> 00:05:11.468
So for my image, I'll set this up to have

83
00:05:11.468 --> 00:05:16.657
a grid hyphen column have 1 slash 2.

84
00:05:16.657 --> 00:05:20.813
In other words, I want it to occupy
the only column that we have and

85
00:05:20.813 --> 00:05:22.332
it goes from one to two.

86
00:05:22.332 --> 00:05:24.003
And I'm very specific about that.

87
00:05:24.003 --> 00:05:28.938
It will actually apply to all
of these items here because this

88
00:05:28.938 --> 00:05:31.172
is some very generic code.

89
00:05:31.172 --> 00:05:36.073
And we're talking about an individual
grid system in each one of these figures,

90
00:05:36.073 --> 00:05:39.688
so it is actually going to apply
all of these individually.

91
00:05:39.688 --> 00:05:45.824
And then we're going to have
a grid hyphen row of 1 slash 3.

92
00:05:45.824 --> 00:05:51.395
So my image is going to span
across the first two rows.

93
00:05:51.395 --> 00:05:55.633
Remember I declared three rows, the image
is gonna occupy rows one and two.

94
00:05:55.633 --> 00:06:00.361
Now the figure caption is
occupying row number three.

95
00:06:00.361 --> 00:06:03.411
You actually wanna see a change
here on the screen, but

96
00:06:03.411 --> 00:06:06.542
that change happened behind
the scenes inside of grid.

97
00:06:08.891 --> 00:06:14.306
For my figure caption, I'll

98
00:06:14.306 --> 00:06:18.961
say again my grid hyphen column
will be 1 slash 2 because I

99
00:06:18.961 --> 00:06:23.142
want it to take up the same
number of columns as well.

100
00:06:23.142 --> 00:06:28.680
But then my grid row will be 2 slash 3.

101
00:06:29.790 --> 00:06:33.943
So now my figure caption goes
up over the top of the image.

102
00:06:33.943 --> 00:06:36.850
See how nicely that's overlapping here?

103
00:06:36.850 --> 00:06:41.312
And that is because my image
is taking up one to three and

104
00:06:41.312 --> 00:06:44.320
my caption is taking up two to three.

105
00:06:44.320 --> 00:06:46.871
So now it looks this particular way.

106
00:06:46.871 --> 00:06:49.993
You can tweak this further by
indicating how high you want

107
00:06:49.993 --> 00:06:51.433
the figure caption to be.

108
00:06:51.433 --> 00:06:54.603
You could put that right on up
here in your grid template rows.

109
00:06:54.603 --> 00:06:58.245
You could have them be auto, auto,
and then a very specific height for

110
00:06:58.245 --> 00:07:00.950
the caption,
if you wanted to do it that way.

111
00:07:00.950 --> 00:07:05.067
You could leave it the way I have left it,
which is this is fine,

112
00:07:05.067 --> 00:07:06.634
just set it up that way.

113
00:07:06.634 --> 00:07:11.588
Whatever you wanted to do at that point in
time to tweak that a little bit further.

114
00:07:11.588 --> 00:07:16.435
But this is a technique
that is really fantastic.

115
00:07:16.435 --> 00:07:19.518
We don't have to worry about absolute or
relative positioning.

116
00:07:19.518 --> 00:07:22.019
We don't have to worry
about other absolutely or

117
00:07:22.019 --> 00:07:24.670
relatively positioned
elements on the page.

118
00:07:24.670 --> 00:07:27.996
It's very, very straightforward and

119
00:07:27.996 --> 00:07:32.228
this is probably the best
way having your image and

120
00:07:32.228 --> 00:07:39.602
your figure caption overlapping each other
very nicely inside of this type of system.

121
00:07:43.040 --> 00:07:46.887
The big difference between
this methodology and

122
00:07:46.887 --> 00:07:52.423
something with absolute relative
positioning is this, absolute and

123
00:07:52.423 --> 00:07:58.163
relative positioning we can have
pretty much any element down our tree.

124
00:07:58.163 --> 00:08:02.193
And we could take an element
that's way down in our HTML and

125
00:08:02.193 --> 00:08:06.892
position it relative to something
that's way outside of our tree.

126
00:08:06.892 --> 00:08:10.736
Here where we're working with grid,
the two elements or

127
00:08:10.736 --> 00:08:13.871
however many elements,
have to be siblings.

128
00:08:13.871 --> 00:08:21.036
So here in the HTML, this works because
we have image and we have figure caption.

129
00:08:21.036 --> 00:08:25.404
They are next to each other in space
surrounded by the same wrapper.

130
00:08:25.404 --> 00:08:30.581
So the effect that I have here
is going to be somewhat limited.

131
00:08:30.581 --> 00:08:34.543
It's not as flexible necessarily as
absolute and relative positioning.

132
00:08:34.543 --> 00:08:38.971
It's not complete takeover of that,
but it is a great way of doing things,

133
00:08:38.971 --> 00:08:40.882
if you have this type of markup.

134
00:08:40.882 --> 00:08:42.231
Okay, yes, Mark.

135
00:08:42.231 --> 00:08:44.882
&gt;&gt; Why choose three rows instead of two?

136
00:08:44.882 --> 00:08:46.933
&gt;&gt; Why choose three rows and instead two?

137
00:08:46.933 --> 00:08:51.746
because most likely you don't want
your figure caption occupying half of

138
00:08:51.746 --> 00:08:53.463
the height of that image.

139
00:08:53.463 --> 00:08:58.086
So if you had two rows that may be
what you wind up with as default.

140
00:08:58.086 --> 00:09:00.758
You could, of course, do it that way and

141
00:09:00.758 --> 00:09:05.407
then specify that your second row
has a shorter height, for example.

142
00:09:05.407 --> 00:09:08.550
You could say maybe that
row was taking up whatever,

143
00:09:08.550 --> 00:09:11.478
a third of the height or
a quarter of the height and

144
00:09:11.478 --> 00:09:16.070
let the other row take up the remaining
part of it, that would work fine too.

145
00:09:16.070 --> 00:09:20.720
But as you see here, the number of
rows overall doesn't really matter.

146
00:09:20.720 --> 00:09:25.367
If there is a row with nothing in it,
grid isn't even displaying it.

147
00:09:25.367 --> 00:09:28.436
So whatever works for
you is probably just fin.

148
00:09:28.436 --> 00:09:33.817
&gt;&gt; This is cool
&gt;&gt; It is very cool isn't it?

149
00:09:33.817 --> 00:09:34.421
As I said,

150
00:09:34.421 --> 00:09:38.729
one of the really powerful features of
grid is the ability to overlap cells.

151
00:09:38.729 --> 00:09:41.464
And a lot of people aren't taking
advantage of this yet, but

152
00:09:41.464 --> 00:09:43.080
this is a great case for doing that.

