WEBVTT

1
00:00:00.080 --> 00:00:05.050
So we're gonna move on now to
setting this up for media queries.

2
00:00:05.050 --> 00:00:11.009
And there is a CodePen that will give you
the starting state that I have right here.

3
00:00:11.009 --> 00:00:13.538
If you wanna switch to that CodePen, or

4
00:00:13.538 --> 00:00:18.521
you can just continue on in the same
CodePen, which is what I'm going to do and

5
00:00:18.521 --> 00:00:21.835
write the rest of the code
here just inside of this.

6
00:00:21.835 --> 00:00:26.679
So when we go to a tablet then,
we need to think about how our various

7
00:00:26.679 --> 00:00:32.406
arrangements are going to change as we
move through our various break points.

8
00:00:32.406 --> 00:00:36.160
So right now, let's just start
up here at the top once again.

9
00:00:36.160 --> 00:00:38.432
Here on our set of four columns,

10
00:00:38.432 --> 00:00:43.228
maybe what we'd like to do is when
we get to our breakpoint, right,

11
00:00:43.228 --> 00:00:50.080
cuz right now these will very happily wrap
onto another row, just like Flexbox does.

12
00:00:50.080 --> 00:00:55.392
And if you're happy with the way things
look, you could absolutely go with

13
00:00:55.392 --> 00:01:01.480
that as a look for your webpage,
because this is what Flexbox does, right?

14
00:01:01.480 --> 00:01:05.752
But if you wanted to make these a little
bit prettier and make them stretch across

15
00:01:05.752 --> 00:01:11.260
the page, then we would wind at picking a
breakpoint here whatever it happens to be.

16
00:01:11.260 --> 00:01:16.440
I have a utility up here, I'm in Firefox.

17
00:01:16.440 --> 00:01:18.740
I'm not sure if this is available for
Chrome or not.

18
00:01:19.740 --> 00:01:25.802
And it's a little item that displays my
screen dimensions up here on the top,

19
00:01:25.802 --> 00:01:29.130
I have it currently disabled.

20
00:01:29.130 --> 00:01:33.020
So if I turn it on it'll just tell me
up here on the top of the page what

21
00:01:33.020 --> 00:01:37.752
exactly my screen dimensions are, so
it's not going to help me here in CodePen.

22
00:01:37.752 --> 00:01:40.367
But if I was moving the whole window,
it would change

23
00:01:40.367 --> 00:01:43.874
my numbers up here on the top, so
I could just sort of scrunch around and

24
00:01:43.874 --> 00:01:47.590
go, you know what, this is getting
a little bit tight looking.

25
00:01:47.590 --> 00:01:50.250
I think I need to put
a breakpoint somewhere in here.

26
00:01:50.250 --> 00:01:52.980
So, I've actually already
done the work on this though.

27
00:01:52.980 --> 00:01:57.026
So what I wanna do is I
wanna add a media query.

28
00:01:59.991 --> 00:02:01.690
Actually, we're gonna
add to media queries.

29
00:02:01.690 --> 00:02:08.736
So, first of all, Here,
everything that we've put down here so

30
00:02:08.736 --> 00:02:13.987
far for figure span2, span3, span4,
and these various order properties.

31
00:02:13.987 --> 00:02:16.497
These are all for
our desktop layout, right?

32
00:02:16.497 --> 00:02:19.791
So we actually wanna put those
in a media query right away.

33
00:02:19.791 --> 00:02:21.665
So let's go ahead and set that up.

34
00:02:21.665 --> 00:02:24.270
The row can stay outside
of the media query,

35
00:02:24.270 --> 00:02:26.816
this is gonna start at mobile dimensions.

36
00:02:26.816 --> 00:02:30.469
It will carry into all of your
media queries going forward.

37
00:02:30.469 --> 00:02:34.393
We actually want it to continue to
display flex and a row wrap and

38
00:02:34.393 --> 00:02:37.585
the space between and
the gap, we want all of that.

39
00:02:38.635 --> 00:02:42.855
But these values here for flex-basis and
the ordering and so forth,

40
00:02:42.855 --> 00:02:44.905
that might be desktop specific.

41
00:02:44.905 --> 00:02:48.750
So let's add a media query, @media.

42
00:02:48.750 --> 00:02:56.322
And then we'll say something like min
width of something like 800 pixels.

43
00:02:59.244 --> 00:03:04.530
My screens blown up so big,
it's hard to say for sure.

44
00:03:04.530 --> 00:03:07.504
Feel free to adjust to
whatever makes sense for you.

45
00:03:09.449 --> 00:03:14.150
And we'll indent those there, okay?

46
00:03:14.150 --> 00:03:18.770
So all of that, figures, span,
span3, span4, order 1, 2, 3, okay?

47
00:03:18.770 --> 00:03:25.135
So that's now all inside of our media
query for 800 pixels and higher.

48
00:03:25.135 --> 00:03:29.516
So when I make my CodePen
window of the appropriate size,

49
00:03:29.516 --> 00:03:31.901
I'll get my formatting back.

50
00:03:31.901 --> 00:03:38.518
Okay, so then when we go below 800 pixels,
let's say starting around 550.

51
00:03:41.564 --> 00:03:45.636
Here, I'm actually going to
put in my media query here.

52
00:03:47.526 --> 00:03:52.563
Then width of 550 pixels.

53
00:03:54.744 --> 00:03:59.300
And we can wrap this media query
actually around that row declaration.

54
00:03:59.300 --> 00:04:01.487
Now why on earth would I do that?

55
00:04:04.660 --> 00:04:07.164
Because of the screen gets smaller,

56
00:04:07.164 --> 00:04:12.342
we're now not going to be displaying
our boxes in Flexbox anymore, right?

57
00:04:12.342 --> 00:04:17.653
Okay, so by default, we have a whole
bunch of these figures and rows and

58
00:04:17.653 --> 00:04:23.245
so forth, they are block level elements,
right, block configuration.

59
00:04:23.245 --> 00:04:26.105
And by default,
they just stack on top of each other.

60
00:04:26.105 --> 00:04:30.676
And so by not declaring our Flexbox until
we get to our tablet dimension when we

61
00:04:30.676 --> 00:04:33.628
actually want things to
start showing up on rows,

62
00:04:33.628 --> 00:04:36.655
that's a pretty easy
way to work with this.

63
00:04:36.655 --> 00:04:41.766
Now, the other way that you could
do this would be to put your

64
00:04:41.766 --> 00:04:47.350
Flexbox declaration here
outside of the media query.

65
00:04:47.350 --> 00:04:52.147
And, you could set your flex-basis for
everything to 100%.

66
00:04:52.147 --> 00:04:55.270
So display it row wrap,
but everything is 100%.

67
00:04:55.270 --> 00:04:59.400
Or, you could go to displaying
rather than row wrap.

68
00:04:59.400 --> 00:05:02.470
This would be a case where
you might say column wrap.

69
00:05:02.470 --> 00:05:07.798
So we actually do want to have a series of
columns here or the page, really only one.

70
00:05:07.798 --> 00:05:12.254
And are flex-basis 100% so
that things stacked on top of each other.

71
00:05:12.254 --> 00:05:14.860
That would be the other
way to deal with us.

72
00:05:14.860 --> 00:05:19.855
But, generally speaking,
I just started declaring

73
00:05:19.855 --> 00:05:24.739
my Flexbox layout inside of
my tablet media query and

74
00:05:24.739 --> 00:05:29.082
let things be outside for
the mobile layouts.

75
00:05:29.082 --> 00:05:33.102
Because they'll just stack on top of each
other which is usually what you want to

76
00:05:33.102 --> 00:05:33.711
do anyway.

77
00:05:33.711 --> 00:05:39.390
All right, so then here, all we need to do
is come up with the next set of values.

78
00:05:39.390 --> 00:05:44.476
So in our row here for figure,
our default value for figure,

79
00:05:44.476 --> 00:05:51.577
which will get overwritten later with the
classes that we have and the later values.

80
00:05:51.577 --> 00:05:54.853
So previously, these were 22% wide,

81
00:05:54.853 --> 00:06:00.220
now we want to have still our 4% gap and
two boxes on the line.

82
00:06:00.220 --> 00:06:08.970
This will actually be a flex-basis of 48%,
right?

83
00:06:08.970 --> 00:06:11.300
Two boxes on a line, two of them.

84
00:06:14.443 --> 00:06:16.423
How about our span2?

85
00:06:16.423 --> 00:06:18.620
It's probably kind of the same, right?

86
00:06:20.350 --> 00:06:27.677
So figure, In spa2 we're actually going to
both have that same kind of formatting.

87
00:06:29.400 --> 00:06:33.304
So everything's pretty good until we
get down here towards the bottom of our

88
00:06:33.304 --> 00:06:34.830
screen, right?

89
00:06:34.830 --> 00:06:39.620
So we've got our row with the four boxes,
here it is, looking good.

90
00:06:39.620 --> 00:06:42.100
Here's row number two, looks good.

91
00:06:42.100 --> 00:06:44.060
Row number three, not so good.

92
00:06:45.700 --> 00:06:47.790
So what we wanna do at row number three?

93
00:06:49.740 --> 00:06:55.883
Most likely what we wanna do is we
wanna have our span3 stretched to 100%.

94
00:06:55.883 --> 00:06:59.025
But then the item that was
all by itself before maybe

95
00:06:59.025 --> 00:07:02.230
we'd also like that to stretch to 100%.

96
00:07:02.230 --> 00:07:08.596
So we have our two boxes
stretching to 100%.

97
00:07:08.596 --> 00:07:14.297
So here,
we'll do a span3 with a flex-basis

98
00:07:14.297 --> 00:07:20.344
of 100%, Okay?

99
00:07:20.344 --> 00:07:21.503
So there's that.

100
00:07:23.990 --> 00:07:31.170
Now, the second box here from that row
is doing exactly what we told it to do.

101
00:07:31.170 --> 00:07:34.096
It's displaying about half the width and
if that's what you want,

102
00:07:34.096 --> 00:07:35.630
you can certainly leave that.

103
00:07:35.630 --> 00:07:40.003
But it might be that in this case, you
want this one just stretched full width of

104
00:07:40.003 --> 00:07:42.274
the page, what are we going to do there?

105
00:07:42.274 --> 00:07:45.793
Well, we're gonna have to make
a new type of class for that.

106
00:07:45.793 --> 00:07:53.180
[COUGH] So we might call this,
I don't know span31, something like that.

107
00:07:53.180 --> 00:07:55.325
I'm really bad at naming these.

108
00:07:55.325 --> 00:08:01.831
Flex-basis, there's also 100%, and then
we'll just apply that here in our HTML.

109
00:08:07.807 --> 00:08:12.021
Okay, so here,

110
00:08:12.021 --> 00:08:17.748
class=span3-1.

111
00:08:17.748 --> 00:08:18.490
There we go.

112
00:08:21.130 --> 00:08:27.913
So there have to, in this particular case,
these are both gonna stretch to 100% here.

113
00:08:27.913 --> 00:08:31.882
But when we get the screen larger, oops,
we're gonna have to write a class for

114
00:08:31.882 --> 00:08:33.560
that too, aren't we?

115
00:08:33.560 --> 00:08:37.526
Because it's going to continue
to do what we told it to do.

116
00:08:37.526 --> 00:08:43.033
When you set it here in your earlier
media query, span3-1 as a flex-basis

117
00:08:43.033 --> 00:08:48.811
of 100% that will carry into this later
one, that's why we do all min width.

118
00:08:48.811 --> 00:08:53.514
What comes before will continue
into the later media queries

119
00:08:53.514 --> 00:08:57.858
unless you specifically
override those values later.

120
00:08:57.858 --> 00:09:04.270
So the span3-1 flex-basis of 100% carries
into the media query here of 800 pixels.

121
00:09:04.270 --> 00:09:09.564
Unless we declare it to be something else,
all right, we probably want this instead.

122
00:09:09.564 --> 00:09:12.438
So span3-1.

123
00:09:15.231 --> 00:09:19.630
And now when we make the screen bigger,
we get that layout back again.

124
00:09:19.630 --> 00:09:22.000
You see how we did that?

125
00:09:22.000 --> 00:09:25.111
But when we go smaller,
it does exactly what we want it to do,

126
00:09:25.111 --> 00:09:27.310
two big boxes stacked
on top of each other.

127
00:09:28.720 --> 00:09:33.140
&gt;&gt; Would you not use flex direction
column so you can use align and justify?

128
00:09:34.760 --> 00:09:39.395
&gt;&gt; Sure, there's lots of ways that
you can do what I'm talking about.

129
00:09:39.395 --> 00:09:39.919
It's CSS,

130
00:09:39.919 --> 00:09:43.550
there's a bunch of different ways that you
can accomplish the same kind of thing.

131
00:09:44.700 --> 00:09:48.357
I try to tell you things that
are relatively straightforward and easy

132
00:09:48.357 --> 00:09:52.530
to understand in the code, but I'm sure
you can find other ways of doing this.

133
00:09:52.530 --> 00:09:55.230
If it makes more sense to you,
that's great.

134
00:09:55.230 --> 00:09:58.320
As always, comment your code so that
people understand what it is you're doing.

135
00:09:59.640 --> 00:10:04.651
What we have left here is,
we haven't written our span4,

136
00:10:04.651 --> 00:10:08.300
that's this yellow one right here.

137
00:10:08.300 --> 00:10:13.126
That one is not had a class added yet so

138
00:10:13.126 --> 00:10:19.526
we can say span4 has a flex-basis of 100%.

139
00:10:19.526 --> 00:10:20.900
There we go.

140
00:10:20.900 --> 00:10:23.992
And when you do that,
because the value here for

141
00:10:23.992 --> 00:10:27.933
span4 is set here to be the same
in your tablet media query and

142
00:10:27.933 --> 00:10:33.520
then in your desktop media query,
you don't actually have to redeclare it.

143
00:10:33.520 --> 00:10:37.390
You can if you wan to, if it makes
your documentation easier to read.

144
00:10:37.390 --> 00:10:39.870
So people understand
what's happening here.

145
00:10:39.870 --> 00:10:42.810
By all means, leave it in,
you haven't heard anything.

146
00:10:42.810 --> 00:10:47.326
But you don't have to have it here
inside of your desktop declaration,

147
00:10:47.326 --> 00:10:52.020
because it will carry through from
your tablet media query up here.

148
00:10:52.020 --> 00:10:55.631
Right, we're not changing
that particular breakpoint or

149
00:10:55.631 --> 00:10:59.180
particular flex-basis value
across the media queries.

150
00:11:02.460 --> 00:11:06.320
All right, so then the last thing to
deal with is these boxes down here

151
00:11:06.320 --> 00:11:09.720
on the bottom,
that's that one-to-one layout.

152
00:11:09.720 --> 00:11:15.906
And so here,
Let's take a look at our HTML again.

153
00:11:18.100 --> 00:11:22.798
We had a span2 and then we had this
two figures down here that have

154
00:11:22.798 --> 00:11:27.650
just this ordering type of
class associated with them.

155
00:11:27.650 --> 00:11:29.940
Now, we could take these order classes and

156
00:11:29.940 --> 00:11:32.620
we could tie them into
the Flexbox layout as well.

157
00:11:33.810 --> 00:11:36.220
Could be done?

158
00:11:36.220 --> 00:11:40.824
It's probably easier to leave
the ordering classes as their own utility

159
00:11:40.824 --> 00:11:45.290
classes that you just stack up on
top of the Flexboxes independently.

160
00:11:45.290 --> 00:11:50.084
So now you have the flexibility of taking
ordering anywhere you want inside of your

161
00:11:50.084 --> 00:11:50.651
design.

162
00:11:50.651 --> 00:11:55.477
So, if you take that philosophy,
because it's just a philosophy,

163
00:11:55.477 --> 00:12:00.468
technically speaking you can do
whatever you want, then we might think

164
00:12:00.468 --> 00:12:05.231
about adding seven additional
classes here in some way or another.

165
00:12:05.231 --> 00:12:09.525
Whatever it is that you wanna do here
to deal with this particular situation.

166
00:12:09.525 --> 00:12:13.938
So probably what we wanna do is,
we wanna have this span2 here,

167
00:12:13.938 --> 00:12:18.043
this first span two,
we actually want it to go to 100%.

168
00:12:19.428 --> 00:12:23.790
And then these last two fingers,
we want them to go to like 50%.

169
00:12:23.790 --> 00:12:28.610
So we'll probably wind up writing
some additional classes for that.

170
00:12:28.610 --> 00:12:32.573
Following this span3, span 3-1,

171
00:12:32.573 --> 00:12:39.418
we might have a span2, -4.

172
00:12:39.418 --> 00:12:46.751
So normally, 2 at desktop,
4 at a tablet media query.

173
00:12:46.751 --> 00:12:52.082
So here we'd say a flex-basis of 100% for
that.

174
00:12:52.082 --> 00:12:56.898
And obviously, you could combine
these into a single declaration as

175
00:12:56.898 --> 00:13:01.726
well if you want it, and
then we need to change that up here, 2-4.

176
00:13:04.397 --> 00:13:11.163
And then we need to adjust
that in our desktop, span2-4.

177
00:13:14.147 --> 00:13:16.380
Okay, so that's good.

178
00:13:18.080 --> 00:13:23.133
And then these two here seem to be doing
exactly what we want them to do already.

179
00:13:23.133 --> 00:13:28.760
Which is behave like the boxes that we
have appear at the top of the screen.

180
00:13:28.760 --> 00:13:32.390
So that's pretty much it,
that's how you write a grid system here.

181
00:13:32.390 --> 00:13:38.925
Look at that, so what we did was we came
up with a bunch of scenarios in our HTML,

182
00:13:38.925 --> 00:13:42.998
we laid them all out,
documented them, right?

183
00:13:42.998 --> 00:13:46.955
And then we just went through and
wrote a few styles for all of those.

184
00:13:46.955 --> 00:13:50.147
So you don't really
need a huge complicated

185
00:13:50.147 --> 00:13:54.639
responsive design framework to
deal with this type of thing.

186
00:13:54.639 --> 00:13:57.754
You just need to know how to
do a little bit of math and

187
00:13:57.754 --> 00:14:01.020
you can put something like
this together on your own.

