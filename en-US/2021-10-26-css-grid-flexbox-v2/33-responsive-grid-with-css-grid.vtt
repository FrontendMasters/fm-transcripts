WEBVTT

1
00:00:00.190 --> 00:00:04.600
Now that we have a desktop version of
our grid system, let's go through and

2
00:00:04.600 --> 00:00:07.710
add to this now,
the mobile versions of this.

3
00:00:07.710 --> 00:00:13.695
So to get started with that, what I'm
going to do is, I'm going to take my,

4
00:00:13.695 --> 00:00:18.557
just these span type of items
that are down here at the bottom,

5
00:00:18.557 --> 00:00:21.720
the span, two, three and four.

6
00:00:21.720 --> 00:00:25.170
I'm going to contain those
inside of a media query.

7
00:00:25.170 --> 00:00:27.010
And I'm just a add media.

8
00:00:28.550 --> 00:00:33.876
And we'll say it's a mean width of 1000
pixels, which may not work well on

9
00:00:33.876 --> 00:00:40.270
the display that I'm using here right now,
so I may need to adjust that a little bit.

10
00:00:40.270 --> 00:00:42.730
But it probably will work
fine on your monitor.

11
00:00:42.730 --> 00:00:47.962
I've got mine kinda scrunched
down a little bit here,

12
00:00:47.962 --> 00:00:51.270
so you can see my code nice and big.

13
00:00:51.270 --> 00:00:53.010
Or we get in depth that a little bit.

14
00:00:53.010 --> 00:00:57.340
Now notice I did not include my grid
declaration here inside of this

15
00:00:57.340 --> 00:01:00.378
particular media query and
the reason why is.

16
00:01:00.378 --> 00:01:03.495
Because, in this particular case,

17
00:01:03.495 --> 00:01:09.527
I'm gonna have a tablet media query
where I'm gonna declare my grid and

18
00:01:09.527 --> 00:01:16.576
all of the parameters there in that will
cascade into my desktop media query later.

19
00:01:16.576 --> 00:01:21.104
So I don't need to redeclarer, display
grid and all of that other additional

20
00:01:21.104 --> 00:01:25.911
information, I can declare it once inside
of the tablet and it will cascade into my

21
00:01:25.911 --> 00:01:29.883
desktop media queries because I'm
using men with media queries and

22
00:01:29.883 --> 00:01:32.350
we'll stack them up on top of each other.

23
00:01:32.350 --> 00:01:35.504
In fact,
I'm gonna back this off to 800 pixels, so

24
00:01:35.504 --> 00:01:38.740
we have a little bit more room
on my particular monitor.

25
00:01:38.740 --> 00:01:42.188
You can keep yours at a thousand
if that works better.

26
00:01:42.188 --> 00:01:44.200
Maybe I even need to back it off further.

27
00:01:47.930 --> 00:01:54.578
Like 700, something like that anyway,
then up here, around my wrapper.

28
00:01:54.578 --> 00:01:58.620
I'm gonna set this up with
a media query as well.

29
00:01:58.620 --> 00:02:05.570
This will be at media and
we'll say a min width have 600 pixels

30
00:02:11.743 --> 00:02:16.974
And well,
the curly bracket down here on the bottom.

31
00:02:16.974 --> 00:02:17.960
We'll dump this.

32
00:02:19.270 --> 00:02:24.940
So that'll get us started here
looking at this both on tablet and

33
00:02:24.940 --> 00:02:27.045
then later on desktop.

34
00:02:27.045 --> 00:02:31.578
What we need to do now is to think
about exactly how this is going to work

35
00:02:31.578 --> 00:02:33.858
across our various breakpoints.

36
00:02:33.858 --> 00:02:38.750
And we are going to use exactly the same
model that we use with Flexbox.

37
00:02:38.750 --> 00:02:41.630
So we're gonna have to
think about how some

38
00:02:41.630 --> 00:02:46.270
of these layouts are gonna change
over the course of working on this.

39
00:02:47.970 --> 00:02:52.310
We go, so
right now here's the desktop layout.

40
00:02:53.360 --> 00:02:56.780
Okay, so there's the desktop
layout as we've got it.

41
00:02:56.780 --> 00:03:02.112
And one of the things we need to add to
that desktop layout real quick before

42
00:03:02.112 --> 00:03:06.940
I move on is some ordering down here
on the bottom for this last row.

43
00:03:06.940 --> 00:03:10.824
Remember we wanted that in
the 121 configuration, and

44
00:03:10.824 --> 00:03:14.160
right now we have 211 for
that configuration.

45
00:03:14.160 --> 00:03:19.260
So let's add that before we move on,
and so down here in desktop

46
00:03:19.260 --> 00:03:24.715
media query,
let's add some additional styles to this.

47
00:03:24.715 --> 00:03:29.594
We can add ordering to this, it works
exactly the same way it does in Flexbox,

48
00:03:29.594 --> 00:03:34.385
exactly the same property and
all the rest of it which is really nice.

49
00:03:34.385 --> 00:03:41.508
So I'm gonna create a class
of order let's say order 2.

50
00:03:45.067 --> 00:03:50.017
With an order of 2 and we'll set up

51
00:03:50.017 --> 00:03:55.479
one with an order of 1 just like that,

52
00:03:55.479 --> 00:04:00.429
and then in our HTML you have small I

53
00:04:00.429 --> 00:04:05.549
can make this go up here in our HTML,

54
00:04:05.549 --> 00:04:10.330
then we can add to this additional

55
00:04:10.330 --> 00:04:15.490
classes to deal with the ordering.

56
00:04:15.490 --> 00:04:19.510
So, here in our first cell
we want this to be order 2.

57
00:04:21.950 --> 00:04:27.998
And then in these other figures,
this next figure specifically,

58
00:04:27.998 --> 00:04:34.700
we'll have a class of order 1, and
that will swap things around nicely.

59
00:04:34.700 --> 00:04:39.553
And maybe we have to add one

60
00:04:39.553 --> 00:04:45.066
more with a class of order 3,

61
00:04:45.066 --> 00:04:50.360
and we can write in that class

62
00:04:50.360 --> 00:04:54.562
down here, order 3.

63
00:04:54.562 --> 00:04:58.380
And so now you should see that
the way that you wanted it to go.

64
00:04:58.380 --> 00:05:03.050
All right, so order 1, order 2, order 3
all lined up here in that particular row

65
00:05:03.050 --> 00:05:07.523
as you would expect, because it's here
on the desktop that will reorder here It

66
00:05:07.523 --> 00:05:11.865
won't reorder necessarily on the tablet,
unless we specifically want to do

67
00:05:11.865 --> 00:05:15.712
something different on the tablet,
which we don't necessarily.

68
00:05:15.712 --> 00:05:18.825
And then of course on mobile,
it's going to display in source order.

69
00:05:20.015 --> 00:05:25.071
We won't actually put anything
outside the media queries here dealing

70
00:05:25.071 --> 00:05:29.705
with layout because what we'll
do outside of the media queries,

71
00:05:29.705 --> 00:05:34.710
these are just a bunch of figures
which are block display by default.

72
00:05:34.710 --> 00:05:37.385
They will just stack on top of
each other going down the page,

73
00:05:37.385 --> 00:05:40.370
which is often the layout that
you want on mobile anyway.

74
00:05:40.370 --> 00:05:44.948
There are some other styles that are down
here later in the document that provide

75
00:05:44.948 --> 00:05:46.260
the default styling.

76
00:05:46.260 --> 00:05:52.207
None of these styles have anything to
do with the layout of the web page.

77
00:05:52.207 --> 00:06:00.050
Okay, so now the desktop is done as
we move on to our tablet display.

78
00:06:00.050 --> 00:06:04.060
Let's get to our appropriate breakpoint,
which looks like right about in there.

79
00:06:05.680 --> 00:06:10.428
And so here, what I'd like to
have happen is I'd like my

80
00:06:10.428 --> 00:06:13.662
this row of four boxes that first row,

81
00:06:13.662 --> 00:06:18.917
I'd like it to turn into two
boxes spanning over two columns,

82
00:06:18.917 --> 00:06:25.690
or effectively that followed by two
more boxes spanning over two columns.

83
00:06:25.690 --> 00:06:29.659
So we can write that fairly
easily here as well.

84
00:06:31.580 --> 00:06:35.600
And we're gonna leverage more of those
span properties that we used earlier.

85
00:06:35.600 --> 00:06:40.651
So here what I'm gonna do,
is I'm gonna say figure,

86
00:06:40.651 --> 00:06:44.590
just my generic HTML figure element.

87
00:06:44.590 --> 00:06:46.900
Remember, all the classes come later.

88
00:06:46.900 --> 00:06:48.250
They're also more specific.

89
00:06:48.250 --> 00:06:51.000
So they're gonna override
whatever I put here.

90
00:06:51.000 --> 00:06:54.956
So for figure I'm going to
say grid column span 2,

91
00:06:54.956 --> 00:06:59.280
see how nicely that is we don't
have to do it once again,

92
00:06:59.280 --> 00:07:02.593
still no math, no worrying about the gap,

93
00:07:02.593 --> 00:07:07.640
taking that into consideration,
all of that kind of thing.

94
00:07:07.640 --> 00:07:09.460
So here's my first row.

95
00:07:09.460 --> 00:07:15.740
Very simply went ahead and
distributed itself very, very nicely.

96
00:07:15.740 --> 00:07:18.400
We'll have some more tweaks here
to make a little bit later on.

97
00:07:19.850 --> 00:07:26.120
When we go to our desktop though,
notice that It's gonna continue on.

98
00:07:26.120 --> 00:07:29.450
And that is because
these in this first row,

99
00:07:29.450 --> 00:07:32.880
we just have a series of figure elements.

100
00:07:32.880 --> 00:07:36.000
We're gonna need to override that
layout when we get to our desktop.

101
00:07:36.000 --> 00:07:40.269
So here in our desktop layout,
we can say our figure.

102
00:07:43.940 --> 00:07:47.121
We'll wind up being a grid column

103
00:07:50.755 --> 00:07:55.090
Of span one,
basically span across one column.

104
00:07:55.090 --> 00:07:58.170
So there it is working nicely on desktop.

105
00:07:58.170 --> 00:08:02.750
And when we go to tablet there
it is working nicely on tablet.

106
00:08:02.750 --> 00:08:04.120
So row one is all done.

107
00:08:05.930 --> 00:08:10.460
Row two, we want it to be two across here.

108
00:08:11.780 --> 00:08:16.720
And when we go to tablet layouts,
we want it to remain that way so

109
00:08:16.720 --> 00:08:23.175
we don't have any changes we need to make
here on tablet for that particular item.

110
00:08:25.261 --> 00:08:28.020
For row number three, remember,

111
00:08:28.020 --> 00:08:32.310
we want the one on desktop
that took up three columns.

112
00:08:32.310 --> 00:08:34.700
We want it to take up the full width here.

113
00:08:34.700 --> 00:08:37.609
And the one next to it, we want it
to take up the full width as well.

114
00:08:37.609 --> 00:08:39.710
So let's write some styling for that.

115
00:08:43.320 --> 00:08:48.544
We had a class of span three
which now we can repurpose

116
00:08:48.544 --> 00:08:56.520
here in our tablet media query will just
simply say grid column of spanned four.

117
00:08:57.990 --> 00:08:59.834
So now it will take up that full row.

118
00:09:04.266 --> 00:09:09.203
Now this other individual box
here inside of row three,

119
00:09:09.203 --> 00:09:12.920
it's just a figure all by itself.

120
00:09:12.920 --> 00:09:14.970
We want this one to behave
a little bit differently.

121
00:09:14.970 --> 00:09:19.852
Its default figure behavior is to
take up one column on desktop and

122
00:09:19.852 --> 00:09:22.150
two columns on tablet.

123
00:09:22.150 --> 00:09:25.769
But in this case, we wanted to
take up one column on desktop and

124
00:09:25.769 --> 00:09:27.680
four columns on tablet.

125
00:09:27.680 --> 00:09:35.909
So we are going to write a style for
that as well And I'm gonna call this style

126
00:09:40.038 --> 00:09:47.570
Class of you could do something like
span 1, LG, something like that.

127
00:09:48.670 --> 00:09:51.537
And what might be your name for
that particular class and

128
00:09:51.537 --> 00:09:52.940
then you can write it here.

129
00:09:54.950 --> 00:09:57.795
Span, in fact we can combine it.

130
00:10:01.096 --> 00:10:05.013
Right here with span 3,

131
00:10:05.013 --> 00:10:09.500
we could say, span 1-LG.

132
00:10:09.500 --> 00:10:12.820
So that's gonna have that
property of spanning 4 columns.

133
00:10:15.040 --> 00:10:17.168
And now it does but I will also do so

134
00:10:17.168 --> 00:10:21.895
on desktop because we haven't told it
to go back to one column on desktop.

135
00:10:21.895 --> 00:10:24.991
So we'll need to override
that when we get to desktop.

136
00:10:24.991 --> 00:10:32.416
And so here with our figure
that now spans one column,

137
00:10:32.416 --> 00:10:39.070
we can combine that and
say that span 1-LG.

138
00:10:39.070 --> 00:10:41.328
We'll also span 1 column.

139
00:10:44.084 --> 00:10:48.351
And so it does, so far,
things are looking good for

140
00:10:48.351 --> 00:10:52.530
our first three rows on both tablet,
there it is.

141
00:10:52.530 --> 00:10:56.966
There's the tablet And on the desktop.

142
00:10:59.405 --> 00:11:01.744
So, now, row number four,

143
00:11:01.744 --> 00:11:08.740
remember it needs to span across four
columns on tablet, and on desktop.

144
00:11:08.740 --> 00:11:11.729
We actually have that style
here on desktop already.

145
00:11:12.920 --> 00:11:17.962
We could just simply cut and paste that
from the desktop to the tablet media

146
00:11:17.962 --> 00:11:23.170
query because we actually want
the same behavior at both breakpoints.

147
00:11:23.170 --> 00:11:24.997
So we'll specify it on tablet and

148
00:11:24.997 --> 00:11:27.880
it'll carry through into
the desktop media query.

149
00:11:31.840 --> 00:11:37.655
So there that one is on tablet
there it is on desktop.

150
00:11:37.655 --> 00:11:42.440
And then in our last row always a little
bit trickier than the other ones.

151
00:11:42.440 --> 00:11:47.010
We want to have this first cell
we'd like that to stretch across

152
00:11:47.010 --> 00:11:48.656
maybe the full width.

153
00:11:48.656 --> 00:11:53.809
And then the other two cells to be
on the next row just as they were,

154
00:11:53.809 --> 00:11:57.098
and so
we can set up some styling for that.

155
00:12:01.298 --> 00:12:06.438
So what I'm gonna do here for row number
five, this first box we've called it

156
00:12:06.438 --> 00:12:11.577
a just a regular old span 2 before, what
I'm going to do now is change this and

157
00:12:11.577 --> 00:12:14.762
I'm gonna call it a span 2 hyphen,
whatever.

158
00:12:14.762 --> 00:12:18.133
-Medium, -large, something like that.

159
00:12:18.133 --> 00:12:22.190
And and
then we can set up a class for that.

160
00:12:23.950 --> 00:12:28.490
What I'd like it to do at
the tablet media query is I'd like

161
00:12:28.490 --> 00:12:30.817
it to span across four columns

162
00:12:37.230 --> 00:12:45.705
So we can say span 4-MD.

163
00:12:45.705 --> 00:12:46.850
Let me fix the HTML.

164
00:12:46.850 --> 00:12:49.130
This is a span 4-MD as well.

165
00:12:52.190 --> 00:12:57.056
And then all we have to do is just change
it down here inside of the desktop.

166
00:12:57.056 --> 00:13:04.090
So span 2, and
span 4-MD will have that same behavior.

167
00:13:06.400 --> 00:13:07.174
Oops.

168
00:13:12.173 --> 00:13:15.784
Okay, so
there's the lineup here on the desktop and

169
00:13:15.784 --> 00:13:21.910
when we go to our tablet layout, there's
the one spanning across the full width.

170
00:13:21.910 --> 00:13:25.190
And we have the two cells
here that show up underneath.

171
00:13:25.190 --> 00:13:26.240
Everything is looking great.

172
00:13:27.330 --> 00:13:32.743
If the grid gap here strikes you is
a little bit big you could always change

173
00:13:32.743 --> 00:13:38.601
that here inside of your tablet media
query maybe you wanna go down to something

174
00:13:38.601 --> 00:13:43.748
like 2% here on the wrapper,
maybe tighten things up a little bit,

175
00:13:43.748 --> 00:13:47.947
even 1% maybe you want them
even a little bit tighter.

176
00:13:47.947 --> 00:13:52.902
You could do a combination
of numbers here 2%

177
00:13:52.902 --> 00:13:57.994
1% sorry, the other way around 1%, 2%.

178
00:14:01.669 --> 00:14:05.360
We'll get you slightly different
dimensions when it will be columns

179
00:14:05.360 --> 00:14:06.970
the other will be rows.

180
00:14:06.970 --> 00:14:10.369
So you can put in two numbers like that
to make this look a little bit better

181
00:14:10.369 --> 00:14:11.400
on tablet.

182
00:14:11.400 --> 00:14:16.769
And of course then when you get down
here to your desktop, if you want to

183
00:14:16.769 --> 00:14:22.963
go back to that full 4% gap then you just
write a style for that wrapper gap 4%.

184
00:14:26.025 --> 00:14:29.705
So you can override anything
anywhere along the way.

185
00:14:29.705 --> 00:14:33.926
Again, that's not necessarily something
that we do so much with Flexbox, but

186
00:14:33.926 --> 00:14:36.834
it is absolutely possible to
do very easily with grid.

187
00:14:36.834 --> 00:14:41.184
And it's really nice because always
the math is done for you in grid,

188
00:14:41.184 --> 00:14:45.392
whereas you're gonna have to do
that math yourself with Flexbox.

189
00:14:45.392 --> 00:14:51.380
So this is some pointers on how you can
write your own grid system using CSS grid.

190
00:14:51.380 --> 00:14:55.701
So again, this is something that you
can do to get away from using some of

191
00:14:55.701 --> 00:14:57.950
the responsive design frameworks.

192
00:14:57.950 --> 00:15:01.463
You don't have to buy into
a bootstrap type of grid system or

193
00:15:01.463 --> 00:15:06.456
anything else you as you see here, it's
pretty straightforward to write something

194
00:15:06.456 --> 00:15:11.220
with grid that's very, very lightweight
and will do exactly what you want.

195
00:15:11.220 --> 00:15:16.301
You can program all of the behaviors that
you want across the various breakpoints

196
00:15:16.301 --> 00:15:21.006
really pretty easily, just by counting
how wide you want things in terms of

197
00:15:21.006 --> 00:15:25.660
the number of boxes as opposed to Flexbox
where you do have to do real math.

