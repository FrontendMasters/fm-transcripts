WEBVTT

1
00:00:00.020 --> 00:00:02.660
So all we've talked about so
far is everything on the UL,

2
00:00:02.660 --> 00:00:05.780
this all has to do with
parents at this point in time.

3
00:00:05.780 --> 00:00:07.580
And so
now let's take a look at the children.

4
00:00:07.580 --> 00:00:12.114
There actually aren't
that many properties for

5
00:00:12.114 --> 00:00:17.874
the children for the LIs, but
the main one happens to be this.

6
00:00:19.054 --> 00:00:26.330
So down here in the LIs,
we have the ability of changing our order.

7
00:00:26.330 --> 00:00:30.658
And so if I simply say for
my LI order of one that is gonna do

8
00:00:30.658 --> 00:00:35.453
absolutely nothing for
me at this point, that is just setting

9
00:00:35.453 --> 00:00:40.270
all six of those boxes to have
a value of one for the order.

10
00:00:40.270 --> 00:00:42.852
But then if I were to take my class,

11
00:00:42.852 --> 00:00:48.390
remember up here in our HTML we had
a couple of classes of flex2 on the LIs.

12
00:00:49.390 --> 00:00:53.978
So if I were to reset this to flex2,
and I said order of 2,

13
00:00:53.978 --> 00:00:58.665
that will pull out those two
boxes in this particular case,

14
00:00:58.665 --> 00:01:04.660
the properties the way we have them set
up box number 2 and box number 5, and

15
00:01:04.660 --> 00:01:10.590
it's actually pulling them out and
putting them second here in the order.

16
00:01:10.590 --> 00:01:14.530
So they're gonna wind up
showing up later in our layout.

17
00:01:15.640 --> 00:01:19.268
So the things with the order
of 1 show up first 1, 3, 4, 6,

18
00:01:19.268 --> 00:01:23.063
and then the two elements that have
the order have 2 show up later.

19
00:01:23.063 --> 00:01:25.765
Obviously you could add
many more classes and

20
00:01:25.765 --> 00:01:30.544
you could then put your boxes in whatever
order you want them to display them in.

21
00:01:34.636 --> 00:01:40.800
You can also set so called widths and
I use the air quotes because

22
00:01:40.800 --> 00:01:47.550
the CSS property width should
never be used inside of flexbox.

23
00:01:47.550 --> 00:01:52.008
The property you wanna use
is one called flex basis,

24
00:01:52.008 --> 00:01:57.280
flex basis has to do with how
wide is this box sort of?

25
00:01:57.280 --> 00:02:01.729
So we say it's gonna be
whatever 30% let's say,

26
00:02:01.729 --> 00:02:06.078
man might actually wanna
being 25% sometimes or

27
00:02:06.078 --> 00:02:10.260
20% sometimes maybe it's more like 50%.

28
00:02:10.260 --> 00:02:15.680
It just sort of depends on what's
going on in your flexbox layout.

29
00:02:15.680 --> 00:02:20.764
When you use the CSS property of width and
you say the width is 30% it

30
00:02:20.764 --> 00:02:26.390
will never be 29.9 It will never
be 30.1% it will always be 30%.

31
00:02:26.390 --> 00:02:30.764
So when you work with
flexbox you wanna work

32
00:02:30.764 --> 00:02:35.624
with flex basis as the width
property here, and

33
00:02:35.624 --> 00:02:40.110
so you can write that out longhand.

34
00:02:40.110 --> 00:02:43.869
So let's just say flex2 here for example,

35
00:02:43.869 --> 00:02:48.542
we could say our flex basis is,
I don't know 25% and

36
00:02:48.542 --> 00:02:53.939
then our min width here,
we should probably have that go away.

37
00:02:55.840 --> 00:03:01.020
So the two items now
there they are item 2 and

38
00:03:01.020 --> 00:03:05.920
5, they both have about half of the width

39
00:03:05.920 --> 00:03:10.860
overall about 25% for those two.

40
00:03:10.860 --> 00:03:14.446
And then the other boxes where we
haven't defined the flex basis,

41
00:03:14.446 --> 00:03:16.380
they're as wide as their content.

42
00:03:17.410 --> 00:03:19.110
That's what's going on here.

43
00:03:19.110 --> 00:03:22.366
So if I set up here just
on the LI in general and

44
00:03:22.366 --> 00:03:26.326
I said the flex basis here
was something like 10%.

45
00:03:26.326 --> 00:03:34.580
Then we have as you see here
a narrower set of boxes 1, 3, 4 and 6.

46
00:03:34.580 --> 00:03:39.430
And 2 and 5 happened to be wider and
that only adds up to 90%.

47
00:03:39.430 --> 00:03:43.070
So we don't have quite the full 100% for
the row.

48
00:03:43.070 --> 00:03:47.699
There's some other properties that are
here that are part of this that are called

49
00:03:47.699 --> 00:03:51.985
flex grow and flex shrink, they have to
do with how fast the box gets wider or

50
00:03:51.985 --> 00:03:55.750
how fast the box gets smaller
relative to the other boxes.

51
00:03:55.750 --> 00:04:00.365
What I find is that most people are not
using these particular properties in

52
00:04:00.365 --> 00:04:04.395
layouts necessarily, and
that is because they can be a little bit

53
00:04:04.395 --> 00:04:09.030
unpredictable in terms of the layouts and
expanding things on the screen.

54
00:04:09.030 --> 00:04:13.843
So I'm gonna kind of skip over those
in terms of a longer explanation,

55
00:04:13.843 --> 00:04:16.550
but you can write those out if you want.

56
00:04:16.550 --> 00:04:21.337
You can say flex grow and
it's just a number for a value, so

57
00:04:21.337 --> 00:04:28.400
these are going to grow two times faster
than the other boxes are for example, yes.

58
00:04:28.400 --> 00:04:30.635
&gt;&gt; What's the difference
between flex basis 30%?

59
00:04:30.635 --> 00:04:31.264
&gt;&gt; Yeah.

60
00:04:31.264 --> 00:04:32.525
And width 30%.

61
00:04:32.525 --> 00:04:34.280
&gt;&gt; For the list items, yeah.

62
00:04:34.280 --> 00:04:39.324
So if I said width here,

63
00:04:39.324 --> 00:04:45.780
so width of 30% Okay,

64
00:04:45.780 --> 00:04:50.980
they are going to be a width
of 30% no matter what.

65
00:04:50.980 --> 00:04:55.626
So I will start to push
them off the screen,

66
00:04:55.626 --> 00:05:00.530
at some point in time here or
not they're just

67
00:05:00.530 --> 00:05:05.585
gonna be 30% say how
they never flex at all.

68
00:05:05.585 --> 00:05:10.491
I'm making my screen bigger, I'm making my

69
00:05:10.491 --> 00:05:15.921
screen smaller and
they never flex at all, okay?

70
00:05:15.921 --> 00:05:22.164
As opposed to using
a flex basis of 30% and

71
00:05:22.164 --> 00:05:25.890
here now these will flex.

72
00:05:25.890 --> 00:05:27.920
If I have it set up to do that.

73
00:05:27.920 --> 00:05:29.370
So if we get rid of these things here.

74
00:05:33.012 --> 00:05:35.740
Okay, yeah, that's it.

75
00:05:36.880 --> 00:05:39.547
So now, see how those boxes
got a little bit bigger,

76
00:05:39.547 --> 00:05:42.150
see how to get a little bit smaller.

77
00:05:42.150 --> 00:05:44.042
See how we can still squash them down.

78
00:05:46.273 --> 00:05:46.820
Look at that.

79
00:05:48.610 --> 00:05:53.780
So here 1 and 3 are clearly a little
bit smaller than number 4 is.

80
00:05:53.780 --> 00:05:57.720
4 is got some text that's actually
going into overflow here.

81
00:05:57.720 --> 00:06:00.270
Number 2 is the same kind of issue.

82
00:06:00.270 --> 00:06:03.550
So that is what flex basis is doing.

83
00:06:03.550 --> 00:06:05.893
And if we set this back to width again,

84
00:06:14.755 --> 00:06:16.110
So they are what they are.

85
00:06:17.590 --> 00:06:21.694
See how they all change exactly
the same size no matter what,

86
00:06:21.694 --> 00:06:27.166
they're all 30% of their container width
and so as opposed to like one in three

87
00:06:27.166 --> 00:06:32.500
getting a little smaller to accommodate
number four which has some text in it.

88
00:06:32.500 --> 00:06:36.520
So they are what they
are when you use width.

89
00:06:36.520 --> 00:06:39.090
They're not as flexible as flex spaces.

90
00:06:39.090 --> 00:06:43.740
Somebody else had another question about
the difference between something like

91
00:06:43.740 --> 00:06:48.620
stretch in flex box versus max height or
min height or something like that.

92
00:06:48.620 --> 00:06:53.687
So back in the old days when we did
our layouts with floats, by default,

93
00:06:53.687 --> 00:06:58.420
the height of your elements are as
tall as your content, okay?

94
00:06:58.420 --> 00:07:01.804
So content however tall the content
is in the particular box,

95
00:07:01.804 --> 00:07:03.940
that's how tall that box is.

96
00:07:03.940 --> 00:07:07.886
Your height measurement,
the CSS property height,

97
00:07:07.886 --> 00:07:11.140
can artificially make that taller, okay?

98
00:07:11.140 --> 00:07:13.292
And of course you can use max height or

99
00:07:13.292 --> 00:07:16.920
min height to control a little
bit about that height.

100
00:07:16.920 --> 00:07:21.460
But recall that that is for
that one particular box.

101
00:07:21.460 --> 00:07:26.124
And so what the flex box will do is it
will within that particular row that

102
00:07:26.124 --> 00:07:31.491
particular set of boxes that we're looking
at when you use the stretch property,

103
00:07:31.491 --> 00:07:36.430
it will stretch to make those boxes as
tall as the longest piece of content.

104
00:07:36.430 --> 00:07:41.309
And so then equalize all of the boxes
in the row to that same height, this is

105
00:07:41.309 --> 00:07:46.189
something we used to have to do with
JavaScript when we did it with floats or

106
00:07:46.189 --> 00:07:51.228
layouts with floats, and we wanted to
have equal height boxes so now that's

107
00:07:51.228 --> 00:07:57.100
just baked into Flexbox And makes all
of your boxes equal height from there.

108
00:07:57.100 --> 00:08:01.442
So what I would recommend is if you
do need equal height boxes something

109
00:08:01.442 --> 00:08:04.753
like flex box or grid,
as you'll see tomorrow will be

110
00:08:04.753 --> 00:08:09.410
a much better approach than
playing around with max heights.

111
00:08:09.410 --> 00:08:13.747
Because again when you are playing
around with max height, min height,

112
00:08:13.747 --> 00:08:17.850
you may wind up with some
overflow eventually anyway.

113
00:08:17.850 --> 00:08:22.170
And then flex box or grid they
are set to deal with that for you.

114
00:08:22.170 --> 00:08:27.086
&gt;&gt; Can you talk about the thought process
between using flex direction row versus

115
00:08:27.086 --> 00:08:28.380
column?

116
00:08:28.380 --> 00:08:31.410
&gt;&gt; What do we wanna use between rows and
columns?

117
00:08:31.410 --> 00:08:35.733
So generally speaking if you wanna be
laying out a web page you're gonna use

118
00:08:35.733 --> 00:08:40.397
rows, and we're gonna go through that here
that's my next thing to talk about is

119
00:08:40.397 --> 00:08:42.271
using flexbox in a grid system.

120
00:08:42.271 --> 00:08:45.433
So you're gonna most likely
like 90% of the time when

121
00:08:45.433 --> 00:08:49.755
you're working with flex box you
probably gonna have something with rows.

122
00:08:49.755 --> 00:08:54.456
On occasion, and we do have an example
of this later on in the course,

123
00:08:54.456 --> 00:08:56.950
flex box can be useful for columns.

124
00:08:56.950 --> 00:09:00.214
Maybe you actually do want to
stack a whole bunch of things

125
00:09:00.214 --> 00:09:03.886
on top of each other,
especially if you're looking at some UI,

126
00:09:03.886 --> 00:09:06.610
particularly if you're
looking at say a card.

127
00:09:06.610 --> 00:09:11.799
And maybe you want some elements of
your cards stretched out horizontally

128
00:09:11.799 --> 00:09:17.823
in at one particular screen dimension, and
you want those things stacked vertically

129
00:09:17.823 --> 00:09:23.530
at a different screen dimension you may
wind up using the column property for that

