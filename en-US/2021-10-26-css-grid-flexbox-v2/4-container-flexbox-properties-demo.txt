[00:00:00]
>> So let's start putting this into Flexbox. And I'm going to start here with the UL. The important thing to remember is that the UL is going to be the parent or the flex container, right? So that is the outside box. All of these allies, they're children of that UL.

[00:00:18]
So the LI are flex items, the UL is the flex container or the parent. And that's gonna drive a whole bunch of these properties. So we'll start here with the UL. And we'll set it up to display flex. And immediately that is going to put all of our boxes here on one line.

[00:00:45]
Just like that. And you see here that my box has some height set to it. Because I set my ul to have a height of 500 pixels. And so there it is. And now all my boxes are here all together in one line. Make note of the fact that the boxes are of different sizes.

[00:01:02]
How big are they? I set a min width of 100 pixels and I set a height of 100 pixels. And so the minimum size of these boxes is going to be 100 pixels by a 100 pixels. And I did that just so that you would be able to see this a little bit better.

[00:01:18]
If you take that out the min width and the middle height here you'll see even more strikingly that these boxes can get quite narrow. They're as big as they're content by default if we don't have the min height and the min width set. And that is the flexible boxes.

[00:01:36]
So they gonna try to themselves into this space as much as possible. The next thing to look at is flex, direction. And this property you may not see us that much because many people will put it with flex flow. But flex direction and flex wrap are the two that form the flex flow property.

[00:02:01]
so here we can have a direction of row. That's what it is by default. We won't see any change when I put that in. We can change that two column. And everything will stack on top of each other at that point. We can also reverse these. So we could say row reverse, And we'll wind up going from six to one instead of from one to six, okay?

[00:02:27]
Likewise, you can do a column reverse. Let me reset this just a regular old row and then let's look at flex wrap. This has to do with our boxes. When the screen gets too long, what are we going to do to our boxes? Are we going to cut them off?

[00:02:46]
Have them extend past the edge of our container. Or are we going to wrap them onto another line. And so often this is set to wrap by default. So you see here I've now wrapped two boxes on to the next line because my row gets very long. You could also set this to wrap reverse So notice that, this is reordering things here on the page.

[00:03:16]
So our first row goes down to the bottom, five, and six go more towards the middle of the screen. And we can also go to no wrap. Which is our default value. No wrap will cram everything onto the same line. And as I said, most people will write this simply as flex flow.

[00:03:39]
And then you'll have to put in two values, row wrap. Generally speaking row wrap is what you want for responsive design.
>> Why there is a gap between one and the next row, the first one, the next one?
>> Why is there a gap between the row one to four and then five and six?

[00:03:58]
Great question. That has to do with the next set of properties that I wanna be talking about here in just a few moments. So that has to do with the cross axis. So remember here, our main axis is horizontal, the cross axis is vertical. We haven't started to address those vertical properties yet.

[00:04:18]
So that's what's going on there.
>> Is it possible to wrap a limited number of items. Like I want to wrap Item number 4, 5, and 6 without increasing or decreasing the size of item 1, 2, and 3.
>> Just put 4, 5, and 6 on another line and not 1, 2, and 3?

[00:04:35]
Yeah, potentially that if you could do that. You would wind up having to probably adjust your HTML a little bit. You put 1, 2, and 3 in a row. You could put four or five and six in a row. That's one way of doing it. You could set one, two and three to have a flex spaces, which I'm gonna get to here in just a second.

[00:04:55]
That would add up to 100%. That would automatically wrap four, five and six on to the next row. So there's a couple of different ways of doing that. All right, so before we leave the parent here, all of you are starting to ask questions about some of the other situations here.

[00:05:09]
Let's move on here to the justification of any sort of extra space that we have in between ourselves here. And to demonstrate that I'm gonna go back to my LI. Let me just comment out this min width here for the moment. And the height. So that you can see that we have a row here.

[00:05:34]
So we have some extra space over here on the side. And so now, let's add to this our justify hyphen content. So this has to do with how we're going to distribute this extra space. Okay, so if we set our justify content to flex hyphen, start. That is the default value, it'll push all of our boxes over to the left side of the screen.

[00:06:02]
Giving us space over on the right hand side of the screen. Just like that. If we go to flex and shockingly, it's going to push all of our boxes to the right side of the row. And give us space on the left side of the row. Centers always a good one.

[00:06:21]
Center we'll put all of our boxes here in the middle. Notice that, in all cases here we haven't actually put any space in between the boxes. So that's these next three values that I'm gonna go through. And these are the three that get confused all the time. So the first one is space around.

[00:06:43]
So space around says, we are going to, let's just talk about one and two here. I am going to put a space here of x. So the browser has done some math and it's decided we have so much space. We have so many boxes. We're gonna take that space.

[00:07:01]
And we're gonna put a little bit of it on each side of the box. So, this space right here, in between the border and the edge of box 1, that space is x. I don't know what the value is. It doesn't matter. The browser did the math for me.

[00:07:16]
Here now, in between one and two the space is 2x. Because I have space on the right from number one and space on the left from number two. So what you wind up having is half the space on the edge before box number one. And half the space on the edge over here after box number six.

[00:07:40]
And then in between each of these boxes that is twice the space. Okay, because you have the two individual spaces coming together there in the middle. So that's what's going on with space around. The one I find that's more useful than that is space between. Usually your designer friends will be happier with this as well.

[00:08:03]
So what this is going to do is it's basically justifying the boxes. It pushes Up the box one all the way to the left edge. It's going to push box six all the way over to the right. And it will evenly justify the space in between all of the boxes in between.

[00:08:23]
So that's usually very helpful to work with. I find that really great to work with, particularly when we get to our grid system. Which we'll talk about next. And then the last one here is a more recent value. I it's well supported by browsers right now. If you wanna use it and you have to support some older browsers.

[00:08:43]
You may wanna double check to make sure it's supported by those older browsers and that is spaced evenly. And shockingly, that puts the same around amount of space around on between the edge here and box one. The same amount of space between boxes one and two, and so forth.

[00:09:02]
Just as you would expect for space evenly all the way across here. So this is another very useful one. The designers like because the spaces are divided up evenly. Usually space around is the one that they are not fond of because they think it looks a little bit awkward.

[00:09:18]
Let's now get to the cross axis. So we've talked about all this various kinds of alignment here on the main axis. This is all the row and dealing with the spaces here on the row. So to go to some of your questions from earlier, what about here on this cross axis?

[00:09:34]
And that's gonna start here with a line items. So I'm gonna reset my justify content here to center. And then we're gonna add the property called align items. And so this is gonna control our spacing here within the row. And in fact, I'm gonna bring back to My min width and my height.

[00:09:59]
So right now as you see here, as somebody asked earlier. We have boxes five and six here wrapped on to the next line here in the middle. And this is part of this align items type of thing. So here, if we said flex start Then what we have here are all of the boxes pressed up to the top of the area that we have available here to us.

[00:10:34]
So what we've got is, our row is wrapping onto another line. Everything is centering because of the justify content of center. And then everything is pushed up towards the top because of flex start. If I set this the flex end, what's gonna happen? Yep, It pushes it all the way down here to the bottom.

[00:11:06]
So what's happening here, remember I've got a width and a height that are set artificially here on this URL. So my height is giving me this room that I can see this whole thing move in space. So that's gonna push that down to the bottom there. We can also say align items in the center.

[00:11:26]
So the center, center this is what a lot of people talk about when they talk about putting something in the very center of a screen. Justifying contents that are aligned items at the center puts everything centered very nicely inside of that box. Centered or them row, centered vertically.

[00:11:42]
That's what's happening there. We can also say baseline, all this case just pushed it back up to the top of the screen and then stretches the last one. And that's also doing the same thing here. Okay, so the last one I want to tell you about is the Align content.

[00:12:19]
And this is going to align elements within the particular space that we're talking about here. And I think this goes to the question that somebody was asking earlier. Align content, Center align items, center and aligned content. So now if I say flex start. This pushes everything all the way to the top without the space in between.

[00:12:57]
So the person who was asking about the space in between those elements, this is how you get rid of it with this align content. So everything is pushed up to the very top of this particular box. We also have flex end, which of course pushes it all the way down to the bottom of the box and we have center.

[00:13:22]
So if you wanted everything smushed in the center, without the big gap in between those particular rows, that's what the center is. So three centers in order to make that happen, and we still have all of the options of the space Space between, space around, and space evenly.

[00:13:47]
So space between pushes these all the way to the top and bottom of the box. Space around Gives us as I said before, X amount of space above and below 2x in between, and space evenly. Spaces the mall evenly in space So we can say that align items we use in case of columns?

[00:14:20]

>> Well it depends on main axis and cross axis. So in this particular case, yes, that would be aligned items would be for the cross axis. So that would be the columns.
>> I didn't understand the use of baseline and stretch value. What exactly can we use it in?

[00:14:38]
Isn't it similar to the default value?
>> Yes, exactly. So those are indeed similar to the default value. And so those become useful if you reset them in one part of your layout. And you wanna change it back in another part of the layout. So it's always helpful to know what those defaults are

