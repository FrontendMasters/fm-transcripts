[00:00:00]
>> So all we've talked about so far is everything on the UL this all has to do with parents at this point in time. And so now let's take a look at the children. There, actually, aren't that many properties for the children for the Li's, but the main one happens to be this.

[00:00:20]
So down here in the Li's, we have the ability of changing our order. And so if I simply say for my Li order of one, that is gonna do, absolutely, nothing for me at this point, that is just setting all six of those boxes to have a value of one for the order.

[00:00:40]
But then, if I were to take my class, remember up here in our HTML,we had a couple of classes of flex2 on the Li's, so if I were to reset this to flex2, and I said order of 2, that will pull out those two boxes. In this particular case, the properties, the way we have them set up box number 2, and box number 5, and it's, actually, pulling them out, and putting them second here in the order.

[00:01:10]
So they're gonna wind up showing up latter in our layout, so the things with, the order of 1 show up first, 1346 and then the two elements that have the order have to show up later. Obviously, you could add many more classes, and you could then put your boxes in whatever order you want them to display them in.

[00:01:34]
You can also set so called width, and I use the air quotes because the CSS property width, should never be used inside of flexbox. The property you wanna use is one called flex basis. Flex basis has to do with, how wide is this box sorta. So is it gonna, we say it's gonna be whatever 30%, let's say, man might, actually, wanna be 25% sometimes, or 20%.

[00:02:07]
Sometimes maybe it's more like 50%, it just sorta depends on what's going on in your flexbox layout. When you use the CSS property of width, and you say the width is 30%, it will never be 29.9, it will never be 30.1%, it will always be 30%, so when you work with flexbox, you wanna work with flex basis as the width property here.

[00:02:35]
And so you can write that out longhand. So let's just say flex2 here, for example, we could say our flex-basis is, I don't know 25%. And then our min-width here, we should, probably, have that go away. So, the two items now, there they are, item 2, and 5.

[00:03:04]
They both have about half of the width overall, about 25% for those two. And then the other boxes where we haven't defined the flex basis, there is why does their content. That's what's going on here. So if I set up here just on the Li in general, and I said the flex-basis here was something like 10%.

[00:03:29]
Then we have as you see here, a narrower set of boxes 134, and 6 and 2, and 5 happened to be wider. And that only adds up to 90%, so we don't have quite the full 100% for the row. There's some other properties that are here, that are part of this, that are called flex grow, and flex shrink, they have to do with how fast the box gets wider, or how fast the box gets smaller relative the other boxes.

[00:03:55]
What I find is that most people are not using these particular properties in layouts necessarily, and that is because they can be a little bit unpredictable in terms of the layouts, and expanding things on the screen. So I'm gonna kinda skip over those in terms of a longer explanation, but you can write those out if you want, you can say flex, flex-grow, and it's just a number for a value.

[00:04:22]
So these are gonna grow two times faster than the other boxes are, for example, yes.
>> What's the difference between flex-basis 30%, and width 30%.
>> For the list items, yeah, so if I said width here, so width of 30%, okay, they are gonna be a width of 30% no matter what.

[00:04:52]
So I will start to push them off the screen, some point in time here. We're not, they're just gonna be 30%, see how they never flex at all. I'm making my screen bigger, I'm making my screen smaller, and they never flex at all, okay, as opposed to using a flex-basis.

[00:05:19]
Of 30%, and here, now these will flex. If I have it set up to do that. So if we get rid of these things here. Okay. Yeah, that's it. So now, see how those boxes got a little bit bigger. See how they get a little bit smaller. See how we can still squash them down.

[00:05:45]
Look at that. So, here 1, and 3 are clearly a little bit smaller than number 4 is, 4 has got some texts that's, actually, going into overflow here. Number 2 is the same kinda issue, that is what flex-basis is doing, and if we set this back to width again.

[00:06:14]
So they are what they are. See how they all change exactly the same size, no matter what. They're all 30% of their container width. And so as opposed to 1, and 3 getting a little smaller to accommodate number 4 which has some text in it. So they are what they are when you use width, they're not as flexible as a flex-basis.

[00:06:39]
Somebody else had another question about the difference between something like stretch in flexbox versus min max height, or min-height, or something like that. So back in the old days when we did our floats, width layouts with floats, by default, the height of your elements are as tall as your content.

[00:06:58]
Okay. So content however tall, the content is in the particular box, that's how tall that boxes, your height measurement, the CSS property of height can artificially make that taller. Okay, and of course you can use max-height, or min-height to control a little bit about that height, but recall that is for that one particular box.

[00:07:21]
And so, what the flex box will do is, it will within that particular row, that particular set of boxes that we're looking at when you use the stretch property, it will stretch to make those boxes as tall as the longest piece of content, and so then equalize all of the boxes in the row to that same height.

[00:07:44]
This is something we used to have to do with JavaScript when we did it with floats, our layouts with floats, and we wanted to have equal height boxes. So now that's just baked into flexbox, and makes all of your boxes equal height from there. So what I would recommend is, if you do need equal height boxes, something like flex-box, or grid, as you'll see tomorrow will be a much better approach than playing around with max-heights.

[00:08:09]
Because again, when you are playing around with height-max height-min, height, you may wind up with some overflow, eventually, anyway, and then flexbox, or grid there, they are set to deal with that for you.
>> Can you talk about the thought process between using flex direction row versus column?

[00:08:28]

>> What do we wanna use between rows, and columns?
>> So generally speaking, if you wanna be laying out a webpage, you're gonna use rows, and we're gonna go through that here. That's my next thing to talk about is using flex box in the grid system. So you're gonna most likely, 90% of the time when you are working with flex-box, you, probably, gonna have something with rows.

[00:08:50]
On occasion, and we do have an example of this later on in the course flexbox can be useful for columns, maybe you, actually, do wanna stack a whole bunch of things on top of each other, especially, if you're looking at some UI, particularly, if you're looking at say a card, and maybe you want some elements of your cards.

[00:09:10]
Stretched out horizontally in one particular screen dimension, and you want those things stacked vertically at a different screen dimension, you may wind up using the column property for that.

