[00:00:00]
>> I'm not supposed to play favorites with what I'm teaching you, but this is one of my favorite new tricks that I'd like to demonstrate for you here inside CodePen. So, we're looking at number 11. We're in chapter 11. This is the beginning state, and we're looking at figures and figure captions again.

[00:00:17]
When we were working in Flexbox, I walked you through the process of overlapping a caption onto a figure using absolute and relative positioning. And that is a wonderful way of doing things. It's been around for, gosh, 15 years now that you've been able to do something like that, although not necessarily the figure tag, but the concept has been around for a very long time.

[00:00:41]
One of the really interesting things that grid does that Flexbox does not do, is grid allows your cells to overlap. So, by leveraging grid inside of your figures and your figure captions, you can overlay your figure captions very nicely over your figures here without even having to use absolute and relative positioning.

[00:01:03]
So, let's take a look at how exactly that would look here in this particular example. So, what I've got inside of, I have a div with a class of row around all of these particular figures. Inside of that, I have four different figures, they have different content, but they all have the same markup.

[00:01:21]
So, the way the markup goes, we have a figure, we have an image, and then we have our figure caption. In the figure caption, and it has an h2 and a paragraph inside of it. So, where are our children, and where are our parents? We've actually got two sets going on here.

[00:01:41]
So, first of all, to create this set of four cells here laid out in the following way, that's actually if you scroll down in the CSS I've already given you, I have a media query here set up for 600 pixels and higher. And this is set up with display grid, grid-template columns of 1fr, 1fr, and a gap of 2%.

[00:02:04]
So, that is our first round of layout. That just gives us very nice layout of those four cells there on the page. Now we're going to do a second set of layouts. This is going to be within the figure itself. So, where are the parents and children here inside of our figure?

[00:02:24]
We have a figure and it has two children, an image and a figure caption. So, what do we need to do? If you plan in advance, what we want to have happen is, we wanna have our image and our figure caption. We wanna have the figure caption, overlap that image at least somewhat.

[00:02:44]
So, our figure is going to wind up being our grid container or our parent, the image and the figure caption are our grid items or the children, and we're going to somehow make these two things overlap using CSS grid. So, let's write that code, now that I've explained to you the thought process behind what we're doing.

[00:03:11]
So, I've got several declarations here of figure captions and figures and all the rest of it. I am just going to hit return a whole bunch of times, just to keep things straightforward as to what I'm adding here. In the real world you would probably combine all of these into single declarations.

[00:03:28]
But for now, for learning purposes let's do it this way. So, I'm gonna start with figure, And I'm going to set it up to display grid, And I'm going to have a single column, actually, the layout is here exactly as I want it. I want everything to be in one column, but I'm going to declare that column.

[00:03:53]
So, grid hyphen template, hyphen columns, and we can just set that up to be again 1fr. The actual width of this column doesn't really matter, just take up the full space. So, 1fr is just fine. And I'm gonna set it up interestingly, with three rows. So, grid-template-rows of repeat, 3 comma auto.

[00:04:22]
So, I wanna have three rows, you figure out how tall each of those rows are. Why three rows? Because we're gonna start with in our initial three rows, what good we'll do is say, okay, I have an image. That goes in row one. I have a figure caption, that goes in row two.

[00:04:41]
And I do have a third row, but it's currently empty. You don't necessarily see that displayed on the screen, grid knows that it exists because we have declared that it exists, but it's not populated with anything at this particular moment in time, okay. So, now what I wanna do is, I'm going to set up my image and my figure caption.

[00:05:06]
So for my image, I'll set this up to have a grid, hyphen, column, 1 slash 2. In other words, I want it to occupy the only column that we have and it goes from 1 to 2. And I'm very specific about that. It will actually apply to all of these items here, because this is some very generic code.

[00:05:31]
And we're talking about an individual grid system in each one of these figures. So, it's actually going to apply to all of these individually. And then, we're going to have a grid, hyphen row of 1 slash 3. So, my image is going to span across the first two rows.

[00:05:50]
So I have, remember, I declared three rows. The image is gonna occupy rows 1 and 2. Now, the figure caption is occupying row number 3. You won't actually see a change here on the screen, but that change happened behind the scenes inside of grid. For my figure caption, I'll say again, my grid, hyphen column will be 1 slash 2.

[00:06:18]
Because I want it to take up the same number of columns as well, but then my grid row will be 2 slash 3. So now, my figure caption goes up over the top of the image. See how nicely that's overlapping here? And that is because my images taking up 1 to 3, and my caption is taking up 2 to 3.

[00:06:44]
So, now it looks this particular way. You can tweak this further by indicating how high you want the figure caption to be. You could put that right on up here and your grid-template-rows. You could have them be auto and then, a very specific height for the caption. If you wanted to do it that way, you could leave it the way I have left it, which is, this is fine.

[00:07:04]
Just set it up that way, whatever you want it to do at that point in time to tweak that a little bit further. But this is a technique that is really fantastic. We don't have to worry about absolute or relative positioning. We don't have to worry about other absolutely or relatively positioned elements on the page.

[00:07:24]
It's very, very straightforward. This is probably the best way of having your image and your figure caption overlapping each other very nicely inside of this type of system. The big difference between this methodology and something with absolute relative positioning is this. Absolute and relative positioning, we could have pretty much any element down our tree.

[00:07:58]
And we could take an element that's way down in our HTML, and position it relative to something that's way outside of our tree. Here, where we're working with grid, the two elements or however many elements you have, have to be siblings. So, here in the HTML this works because we have image and we have figure caption.

[00:08:21]
They are next to each other in space surrounded by the same rapper. So the effect that I have here is going to be somewhat limited. It's not as flexible necessarily as absolute and relative positioning. It's not a complete takeover of that, but it is a great way of doing things if you have this type of markup.

[00:08:40]
Okay, yes Mark.
>> Why choose three rows instead of two?
>> Why choose three rows instead of two, because most likely you don't want your figure caption occupying half of the height of that image. So, if you had two rows, that may be what you wind up with as default.

[00:08:57]
You could of course, do it that way and then specify that your second row has a shorter height. For example, you could say, maybe that row was taking up whatever, a third of the height or a quarter of the height and let the other row take up the remaining part of it.

[00:09:14]
That would work fine too. But as you see here, the number of rows overall doesn't really matter if there is a row with nothing in it, grid isn't even displaying it. So, whatever works for you is probably just fine.
>> This is cool.
>> It is very cool, isn't it?

[00:09:31]
Yeah. As I said, one of the really powerful features of grid is the ability to overlap cells. And a lot of people aren't taking advantage of this yet, but this is a great case for doing that.

