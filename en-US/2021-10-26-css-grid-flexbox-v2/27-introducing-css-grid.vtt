WEBVTT

1
00:00:00.360 --> 00:00:02.440
Time to move on to CSS Grid.

2
00:00:02.440 --> 00:00:05.240
So first of all, why CSS Grid?

3
00:00:05.240 --> 00:00:08.410
Why would we ever want to use
that Flexbox team pretty good?

4
00:00:08.410 --> 00:00:10.950
Why would we want to move
on to a grid based layout?

5
00:00:12.000 --> 00:00:16.734
First of all, it is built in the CSS
specification just like Flexbox is so

6
00:00:16.734 --> 00:00:21.702
it is totally a legit way of laying out
web pages unlike floats, unlike table

7
00:00:21.702 --> 00:00:27.860
based layouts, and all of the other hacks
that we've used in the history of CSS.

8
00:00:27.860 --> 00:00:31.890
The other interesting thing about grid
is that there's no row markup required.

9
00:00:31.890 --> 00:00:38.801
In the past, we have written a lot of row
markup well as it pertains to Flexbox,

10
00:00:38.801 --> 00:00:43.304
but now with grid,
we don't have to do that anymore

11
00:00:43.304 --> 00:00:48.860
because we can specify our
layouts in two dimensions.

12
00:00:48.860 --> 00:00:53.632
And as always, we're gonna have to mind
our parents and children to make sure that

13
00:00:53.632 --> 00:00:56.741
we get the correct set of
properties on the parents and

14
00:00:56.741 --> 00:00:59.020
the children appropriately.

15
00:00:59.020 --> 00:01:01.140
Grid is designed to
work in two dimensions.

16
00:01:01.140 --> 00:01:06.139
That means we have to think about not only
going across the page and just the next

17
00:01:06.139 --> 00:01:11.288
row on top of each other, we have to think
about items that are going to span across

18
00:01:11.288 --> 00:01:16.160
various rows or various columns on
the page, so we have to think about that.

19
00:01:17.750 --> 00:01:22.596
The last point here I want to make is in
the first time I recorded this course,

20
00:01:22.596 --> 00:01:25.652
and at that point in time, really in 2017.

21
00:01:25.652 --> 00:01:31.270
We talked a lot about how we use Flex for
UI elements and use grid for major layout.

22
00:01:31.270 --> 00:01:35.696
And that was pretty much the
recommendation that came from the what wig

23
00:01:35.696 --> 00:01:38.160
people from MDN and so forth.

24
00:01:38.160 --> 00:01:43.111
But I think after four years of people
working with Flexbox, and grid,

25
00:01:43.111 --> 00:01:47.979
I think the better recommendation at
this point in time is to use Either

26
00:01:47.979 --> 00:01:51.230
methodology where they
make the most sense.

27
00:01:51.230 --> 00:01:54.570
So rather than trying to
dogmatically stick to grid for

28
00:01:54.570 --> 00:01:57.474
major layout on webpages,
and then Flexbox for

29
00:01:57.474 --> 00:02:02.119
the UI inside of various cells hat I'm
here to tell you is use what works where

30
00:02:02.119 --> 00:02:07.150
it works best because there are strengths
and weaknesses to each of these.

31
00:02:07.150 --> 00:02:09.680
And we're going to dig
into a lot of those today.

32
00:02:12.240 --> 00:02:18.010
This is a screenshot of grid and
Flexbox explained right from the website.

33
00:02:18.010 --> 00:02:22.865
As you see here with Flexbox,
we have a series of rows just like we have

34
00:02:22.865 --> 00:02:27.290
seen all through this course
one right after the other.

35
00:02:27.290 --> 00:02:31.620
And you can have different numbers
of boxes on each of those rows.

36
00:02:31.620 --> 00:02:34.730
But it is still row after
row after row of boxes.

37
00:02:34.730 --> 00:02:37.330
This is what I mean when I
say it's one dimensional.

38
00:02:37.330 --> 00:02:40.900
All we think about are these various
rows or potentially the columns.

39
00:02:40.900 --> 00:02:42.293
But realistically,

40
00:02:42.293 --> 00:02:46.942
we don't necessarily use columns in
our layout processes that often.

41
00:02:46.942 --> 00:02:50.894
With grid, we are truly thinking
about going across rows,

42
00:02:50.894 --> 00:02:56.380
going across columns, which makes for
more interesting types of layouts.

43
00:02:56.380 --> 00:03:01.172
If you're old enough to remember the table
based layout days where we dealt with row

44
00:03:01.172 --> 00:03:04.183
spans and col spans,
we're back to that again, but

45
00:03:04.183 --> 00:03:08.950
with legit, straight up CSS instead of
a hack in HTML the way we used to do it.

46
00:03:08.950 --> 00:03:12.960
So, this is the major difference
between these two methodologies.

47
00:03:12.960 --> 00:03:17.739
You need to think very carefully about how
you are going to work in two dimensions

48
00:03:17.739 --> 00:03:19.750
when you're working with grid.

49
00:03:22.270 --> 00:03:25.121
In terms of the browser support,
it's all there now.

50
00:03:25.121 --> 00:03:27.590
And you don't need to
worry about that anymore.

51
00:03:27.590 --> 00:03:32.757
So the level one specification, which
is CSS Grid, pretty much as maybe you

52
00:03:32.757 --> 00:03:38.190
are somewhat familiar with it at this
point is supported by all major browsers.

53
00:03:38.190 --> 00:03:41.059
And it's been supported by all
major browsers for some time now.

54
00:03:42.060 --> 00:03:46.230
There is a new type of grid
layout called sub grid.

55
00:03:46.230 --> 00:03:48.055
It's currently under development and

56
00:03:48.055 --> 00:03:50.660
it's only supported by Firefox
at this moment in time.

57
00:03:50.660 --> 00:03:54.270
For that reason I'm not going to
be talking about sub grid today.

58
00:03:54.270 --> 00:03:58.502
There's a lot of excitement around sub
grid people are very interested in how

59
00:03:58.502 --> 00:04:01.530
sub grid is going to change their lives.

60
00:04:01.530 --> 00:04:03.910
We'll see, we'll see.

61
00:04:03.910 --> 00:04:06.261
And, of course, the partial support or

62
00:04:06.261 --> 00:04:09.040
no support is with our
usual browser suspects.

63
00:04:09.040 --> 00:04:13.427
So any version of Internet Explorer,
older versions of Edge,

64
00:04:13.427 --> 00:04:16.920
those are going to have
issues with support.

65
00:04:16.920 --> 00:04:20.660
So pretty much par for the course.

66
00:04:20.660 --> 00:04:26.470
All right, so let's talk a little bit
about the kinds of markup that we're going

67
00:04:26.470 --> 00:04:32.044
to use with grid and then the types of
CSS, this is one of the things with grid.

68
00:04:32.044 --> 00:04:36.829
Whereas Flexbox had just a few types
of Properties that we needed to

69
00:04:36.829 --> 00:04:41.273
leverage to make a web page layout,
grid actually has several

70
00:04:41.273 --> 00:04:46.400
different types of syntax, potentially
to do the same kind of thing and

71
00:04:46.400 --> 00:04:52.550
you can pick one of those along the way
and decide what works best for you.

72
00:04:52.550 --> 00:04:56.219
There are some advantages to using
one kind of syntax sometimes and

73
00:04:56.219 --> 00:04:58.510
other syntaxes at other times.

74
00:04:58.510 --> 00:05:01.040
But that is what I want
you to be aware of.

75
00:05:01.040 --> 00:05:03.882
That's where a lot of the confusion
comes from, because there's so

76
00:05:03.882 --> 00:05:06.040
many different ways to say
the same thing with grit.

77
00:05:07.480 --> 00:05:10.420
So this is what your HTML might look like.

78
00:05:10.420 --> 00:05:14.086
This is for the starting type of syntax
I'm going to lead you through first,

79
00:05:14.086 --> 00:05:18.660
which is the line based placement and I'll
tell you what that means in just a moment.

80
00:05:18.660 --> 00:05:22.880
So your HTML here looks similar
to what we had with Flexbox.

81
00:05:22.880 --> 00:05:26.356
Before there is a parent or
a grid container,

82
00:05:26.356 --> 00:05:29.730
there are children or the grid items.

83
00:05:29.730 --> 00:05:33.950
And each one of those grid
items now has its own class.

84
00:05:33.950 --> 00:05:38.343
Reason why is because we're gonna have to
spell out potentially where each one of

85
00:05:38.343 --> 00:05:41.710
those grid cells is going to go
with this first type of syntax.

86
00:05:43.690 --> 00:05:46.561
So we set up our CSS, very simply,

87
00:05:46.561 --> 00:05:52.940
we tell the wrapper to display grid And
we can use the gap property here.

88
00:05:52.940 --> 00:05:56.425
Now again, if some of you
have some background in grid,

89
00:05:56.425 --> 00:06:01.393
we used to say grid hyphen gap that is no
longer a thing that has now been displaced

90
00:06:01.393 --> 00:06:06.590
by the gap property and the gap property
works in both Flexbox and in grid.

91
00:06:06.590 --> 00:06:12.246
So if we said just a gap of 10 pixels,
that's gonna put a gap horizontally and

92
00:06:12.246 --> 00:06:17.320
vertically all the way around these
boxes at 10 pixels in this case.

93
00:06:19.290 --> 00:06:20.997
With line based placement,

94
00:06:20.997 --> 00:06:25.250
we have a series of lines in this
case we're working with columns.

95
00:06:25.250 --> 00:06:27.520
Those lines also apply to rows.

96
00:06:27.520 --> 00:06:30.712
They count like humans,
we start with one and

97
00:06:30.712 --> 00:06:34.660
you start to the outside
of your first grid cell.

98
00:06:34.660 --> 00:06:36.200
That becomes line number one.

99
00:06:37.310 --> 00:06:42.177
After that first grid cell before
the second one That's line number two,

100
00:06:42.177 --> 00:06:44.070
and so on across the screen.

101
00:06:45.550 --> 00:06:51.180
So in that first cell there we've set
our grid column goes from one to two.

102
00:06:51.180 --> 00:06:53.950
Our second cell goes from two to three.

103
00:06:53.950 --> 00:06:57.406
Our third cell goes from three to four,
and

104
00:06:57.406 --> 00:07:01.490
our last cell would go from Four to five.

105
00:07:01.490 --> 00:07:03.090
So this is a shorthand here.

106
00:07:03.090 --> 00:07:06.050
This is a start and an end.

107
00:07:06.050 --> 00:07:10.086
You can spell these out with grid hyphen
column hyphen, start, grid hyphen,

108
00:07:10.086 --> 00:07:13.693
column hyphen, end, or you can just
use the shorthand that I've used

109
00:07:13.693 --> 00:07:17.511
here where we're indicating the start and
finish of both of those lines.

110
00:07:20.580 --> 00:07:24.230
Then you can start thinking about
the two dimensional aspect of it.

111
00:07:24.230 --> 00:07:27.250
What I showed you there before
was just a very simple row.

112
00:07:27.250 --> 00:07:30.992
If you were laying this out in
a more complicated grid fashion,

113
00:07:30.992 --> 00:07:35.791
then we're gonna think about what happens
if we have a cell that goes over several

114
00:07:35.791 --> 00:07:38.210
rows are over several columns.

115
00:07:38.210 --> 00:07:45.150
Then for example, here with column one,
that dot call hyphen one.

116
00:07:45.150 --> 00:07:49.612
It starts at row line number one,
it skips over a line number two,

117
00:07:49.612 --> 00:07:54.710
because that's part of that cell,
and it ends at line number three.

118
00:07:54.710 --> 00:07:59.948
So we're going to say our grid hyphen
row has a value of one slash three,

119
00:07:59.948 --> 00:08:03.021
that is how we go about specifying these.

120
00:08:03.021 --> 00:08:07.795
So as you see with this type of syntax,
we're very, very specific

121
00:08:07.795 --> 00:08:13.710
about where each cell is placed in
space using these types of numbers.

122
00:08:13.710 --> 00:08:15.488
It's kinda absolutish,

123
00:08:15.488 --> 00:08:21.310
where it's saying exactly where we want
each cell here inside of the grid.

124
00:08:21.310 --> 00:08:22.520
There's nothing wrong with that.

125
00:08:23.800 --> 00:08:27.573
If you are very particular about
where things are going to go, and

126
00:08:27.573 --> 00:08:31.288
this code is not necessarily going
to be reused somewhere else.

127
00:08:31.288 --> 00:08:35.278
And you don't have necessarily a bunch of,
maybe you have a bunch of

128
00:08:35.278 --> 00:08:39.688
press releases or a bunch of images or
a bunch of some other type of content,

129
00:08:39.688 --> 00:08:43.600
little chunks that you want
to display nicely on a page.

130
00:08:43.600 --> 00:08:47.707
This type of syntax is going to be more
difficult to work with under those kinds

131
00:08:47.707 --> 00:08:52.002
of conditions where you don't necessarily
know how many items you need inside of

132
00:08:52.002 --> 00:08:53.151
a grid based layout.

133
00:08:53.151 --> 00:08:58.900
Under those kinds of conditions, you
might work with Flexbox much more easily.

134
00:08:58.900 --> 00:09:01.900
That's kind of what Flexbox
was designed to do.

135
00:09:01.900 --> 00:09:06.721
Or there are some other grid syntaxes
that are a little bit more flexible In

136
00:09:06.721 --> 00:09:11.152
terms of where you start and
where you end in this line based syntax,

137
00:09:11.152 --> 00:09:13.430
we'll take a look at that as well.

138
00:09:15.950 --> 00:09:20.975
So as I mentioned, this is the hard part
of grid, all these kinds of syntax, so.

139
00:09:20.975 --> 00:09:23.085
The numbers we just talked about,

140
00:09:23.085 --> 00:09:26.785
the lines actually have
their have these numbers.

141
00:09:26.785 --> 00:09:30.405
There's a span notation we're
going to talk about momentarily.

142
00:09:30.405 --> 00:09:33.365
You also have the option
of naming your lines.

143
00:09:33.365 --> 00:09:36.827
So rather than just going by the numbers,
which to me is very simple and

144
00:09:36.827 --> 00:09:38.670
straightforward.

145
00:09:38.670 --> 00:09:40.760
You can in fact, name your lines.

146
00:09:40.760 --> 00:09:43.382
If that is an easier approach for
you and then,

147
00:09:43.382 --> 00:09:45.710
use those names inside of your syntax.

148
00:09:45.710 --> 00:09:47.446
I'm not gonna cover that today, but

149
00:09:47.446 --> 00:09:50.250
there's lots of places you can
look up what that syntax is.

150
00:09:51.460 --> 00:09:53.333
You can also create names, grid,

151
00:09:53.333 --> 00:09:56.445
template areas which we will
cover a little bit later on.

152
00:09:56.445 --> 00:10:00.835
And then of course there's tons of
shorthand and longhand properties.

153
00:10:00.835 --> 00:10:05.290
So this to me, again is one of
the most confusing parts of grid and

154
00:10:05.290 --> 00:10:09.991
the best way to mitigate this is to
take a look at the CSS tricks page,

155
00:10:09.991 --> 00:10:13.045
which is called
The Complete Guide to Grid,

156
00:10:13.045 --> 00:10:17.278
and I've given that to you on
today's notes in the website.

157
00:10:17.278 --> 00:10:21.848
And it will give you a link to that
particular page on CSS tricks where you

158
00:10:21.848 --> 00:10:24.290
can look up all of that syntax.

159
00:10:24.290 --> 00:10:26.420
That's probably the best
way to go with this.

160
00:10:28.460 --> 00:10:33.012
There is another game for practicing your
grid syntax if you're interested in that,

161
00:10:33.012 --> 00:10:37.140
for the same people who made Flexbox
Froggy, we had the CSS Grid garden.

162
00:10:37.140 --> 00:10:40.827
It's a great game, I thoroughly encourage
you to go play it if you want to explore

163
00:10:40.827 --> 00:10:43.829
all of the different ways of saying
the same thing inside of grid.

164
00:10:46.710 --> 00:10:51.432
The other interesting part of
this is tracking your parents and

165
00:10:51.432 --> 00:10:55.080
children, the containers and the items.

166
00:10:55.080 --> 00:10:57.407
And so this moves through space so

167
00:10:57.407 --> 00:11:01.240
we can have a single element
that starts as a grid item.

168
00:11:02.530 --> 00:11:05.000
Okay, so somewhere out here,
we have a grid container.

169
00:11:05.000 --> 00:11:06.430
We have this grid item.

170
00:11:06.430 --> 00:11:10.490
It's also a grid container for
the next element inside of it.

171
00:11:10.490 --> 00:11:13.624
That element could be a grid item and

172
00:11:13.624 --> 00:11:18.470
a flex item, and
a flex container, and so forth.

173
00:11:18.470 --> 00:11:22.350
So managing these parents and
children can get very complicated.

174
00:11:22.350 --> 00:11:25.980
We're gonna look at an example
like this a little bit later on.

175
00:11:25.980 --> 00:11:30.756
So as I said here, so grid container one
goes to grid item one, it also becomes

176
00:11:30.756 --> 00:11:35.164
grid container number two, that might
become a grid item number two and

177
00:11:35.164 --> 00:11:38.876
a flex container with a flex
item associated with it.

178
00:11:38.876 --> 00:11:42.446
You can in fact stack these up
in all kinds of crazy ways.

179
00:11:42.446 --> 00:11:46.169
So just sort of know that at this point
in time that this is possible and

180
00:11:46.169 --> 00:11:48.686
by the end of today you'll
know how to do this.

