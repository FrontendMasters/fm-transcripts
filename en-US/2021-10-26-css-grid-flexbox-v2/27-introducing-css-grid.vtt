WEBVTT

1
00:00:00.245 --> 00:00:05.269
Time to move on to CSS Grid so
first of all, why CSS Grid?

2
00:00:05.269 --> 00:00:08.389
Why would we ever wanna use
that Flexbox seem pretty good?

3
00:00:08.389 --> 00:00:11.961
Why would we wanna move on
to a Grid based layout?

4
00:00:11.961 --> 00:00:17.226
First of all, it is built in the CSS
specification, just like Flexboxes, so

5
00:00:17.226 --> 00:00:22.410
it is totally a legit way of laying out
web pages unlike floats, unlike table

6
00:00:22.410 --> 00:00:27.758
based layouts and all of the other hacks
that we've used in the history of CSS.

7
00:00:27.758 --> 00:00:33.936
The other interesting thing about Grid
is that there's no row markup required

8
00:00:33.936 --> 00:00:39.940
in the past we have written a lot of row
markup well as it pertains to Flexbox.

9
00:00:39.940 --> 00:00:44.490
But now with Grid, we don't have
to do that anymore because we can

10
00:00:44.490 --> 00:00:48.215
specify our layouts in two dimensions and
as always,

11
00:00:48.215 --> 00:00:53.429
we're gonna have to remind our parents and
children to make sure that we get

12
00:00:53.429 --> 00:00:58.934
the correct set of properties on the
parents and the children appropriately.

13
00:00:58.934 --> 00:01:03.720
Grid is designed to work in two dimensions
that means we have to think about

14
00:01:03.720 --> 00:01:08.348
not only going across the page and
just the next row on top of each other,

15
00:01:08.348 --> 00:01:12.979
we have to think about items that
are going to span across various rows or

16
00:01:12.979 --> 00:01:14.937
various columns on the page.

17
00:01:14.937 --> 00:01:20.294
So we have to think about that, the last
point here I wanna make is in the first

18
00:01:20.294 --> 00:01:25.403
time I recorded this course and
at that point in time really in 2017,

19
00:01:25.403 --> 00:01:31.126
we talked a lot about how we use Flex for
UI elements and use Grid for major layout.

20
00:01:31.126 --> 00:01:36.038
And that was pretty much the
recommendation that came from the white

21
00:01:36.038 --> 00:01:38.879
wig people from MDN, and so forth, but

22
00:01:38.879 --> 00:01:43.635
I think after four years of people
working with Flexbox and Grid.

23
00:01:43.635 --> 00:01:48.096
I think the better recommendation at
this point in time is to use either

24
00:01:48.096 --> 00:01:51.119
methodology where they
make the most sense, so

25
00:01:51.119 --> 00:01:56.204
rather than trying to dogmatically stick
to Grid for major layout on web pages.

26
00:01:56.204 --> 00:01:59.376
And then Flexbox for
the UI inside of various cells,

27
00:01:59.376 --> 00:02:02.041
what I'm here to tell
you is use what works,

28
00:02:02.041 --> 00:02:06.967
where it works best because there are
strengths and weaknesses to each of these.

29
00:02:06.967 --> 00:02:13.547
And we're gonna dig into a lot of those
today, this is a screenshot of Grid and

30
00:02:13.547 --> 00:02:20.243
Flexbox explained right from the wig
website and as you see here with Flexbox.

31
00:02:20.243 --> 00:02:25.649
We have a series of rows just like we have
seen all through this course one right

32
00:02:25.649 --> 00:02:31.303
after the other and you can have different
numbers of boxes on each of those rows,

33
00:02:31.303 --> 00:02:34.647
but it is still row after
row after row of boxes.

34
00:02:34.647 --> 00:02:39.179
This is what I mean when I say it's one
dimension, all we think about are these

35
00:02:39.179 --> 00:02:43.229
various rows or potentially
the columns but realistically we don't

36
00:02:43.229 --> 00:02:46.885
necessarily use columns in our
layout processes that often.

37
00:02:46.885 --> 00:02:51.967
With Grid we are truly thinking about
going across rows, going across columns

38
00:02:51.967 --> 00:02:56.741
which makes for more interesting types
of layouts if you're old enough to

39
00:02:56.741 --> 00:03:02.057
remember the table based layout days where
we dealt with row spans and call spans.

40
00:03:02.057 --> 00:03:03.892
We're back to that again but

41
00:03:03.892 --> 00:03:08.785
with legit straight up CSS instead of a
hack In HTML the way we used to do it, so

42
00:03:08.785 --> 00:03:12.921
this is the major difference
between these two methodologies.

43
00:03:12.921 --> 00:03:18.503
You need to think very carefully about how
you are going to work in two dimensions

44
00:03:18.503 --> 00:03:24.682
when you're working with Grid, in terms of
the browser support, it's all there now.

45
00:03:24.682 --> 00:03:28.290
Now and you don't need to
worry about that anymore, so

46
00:03:28.290 --> 00:03:32.762
the level 1 specification which is
CSS Grid pretty much as maybe you

47
00:03:32.762 --> 00:03:38.038
are somewhat familiar with it at this
point is supported by all major browsers.

48
00:03:38.038 --> 00:03:42.791
And it's been supported by all major
browsers for some time now, there is a new

49
00:03:42.791 --> 00:03:47.401
type of grid layout called Subgrid,
it's currently under development and

50
00:03:47.401 --> 00:03:50.802
it's only supported by Firefox
at this moment in time.

51
00:03:50.802 --> 00:03:54.432
For that reason I'm not going to
be talking about Subgrid today,

52
00:03:54.432 --> 00:03:58.854
you know there's a lot of excitement
around Subgrid people are very interested

53
00:03:58.854 --> 00:04:01.435
in how Subgrid is going
to change their lives.

54
00:04:01.435 --> 00:04:06.642
We'll see, we'll see and, of course,
the Partial support or no support

55
00:04:06.642 --> 00:04:11.687
is with our usual browser suspects so
any version of Internet Explorer,

56
00:04:11.687 --> 00:04:16.838
older versions of edge, those
are are going to have issues with support.

57
00:04:16.838 --> 00:04:22.181
So pretty much par for the course,
alright, so let's talk a little

58
00:04:22.181 --> 00:04:27.337
bit about the kinds of markup that
we're going to use with Grid and

59
00:04:27.337 --> 00:04:31.964
then the types of CSS,
this is one of the things with Grid.

60
00:04:31.964 --> 00:04:36.992
Whereas Flexbox had just a few
types of properties that we needed

61
00:04:36.992 --> 00:04:42.018
to leverage to make a web page layout,
Grid actually has several

62
00:04:42.018 --> 00:04:46.789
different types of syntax
potentially to do the same thing.

63
00:04:46.789 --> 00:04:51.395
And you can pick one of those along
the way and decide what works best for

64
00:04:51.395 --> 00:04:56.159
you, there are some advantages to
using one kind of syntax sometimes and

65
00:04:56.159 --> 00:04:58.444
other syntaxes that other times.

66
00:04:58.444 --> 00:05:03.249
But that is what I want you to be aware of
that's where a lot of the confusion comes

67
00:05:03.249 --> 00:05:08.057
from because there's so many different
ways to say the same thing with Grid, so

68
00:05:08.057 --> 00:05:10.454
this is what your HTML might look like.

69
00:05:10.454 --> 00:05:15.128
This is for the starting type of syntax
I'm going to lead you through first which

70
00:05:15.128 --> 00:05:19.730
is the line based placement and I'll tell
you what that means in just a moment so

71
00:05:19.730 --> 00:05:23.521
your HTML here looks similar to
what we had with Flexbox before.

72
00:05:23.521 --> 00:05:27.767
There is a parent or
a Grid container there are children or

73
00:05:27.767 --> 00:05:32.806
the Grid items and each one of those
grid items now has its own class,

74
00:05:32.806 --> 00:05:38.203
reason why is because we're going to
have to spell out potentially where

75
00:05:38.203 --> 00:05:43.633
each one of those Grid cells is going
to go with this first type of syntax.

76
00:05:43.633 --> 00:05:48.943
So we set up our CSS very simply,
we tell the wrapper to display Grid and

77
00:05:48.943 --> 00:05:54.073
we can use the gap property here,
now again, if some of you have some

78
00:05:54.073 --> 00:05:59.850
background in grid, we used to say grid
hyphen gap that is no longer a thing.

79
00:05:59.850 --> 00:06:03.091
That has now been displaced by the gap and

80
00:06:03.091 --> 00:06:07.283
the gap property works in both Fexbox and
in Grid, so

81
00:06:07.283 --> 00:06:13.097
if we say just a gap of 10 pixels
that's gonna put a gap horizontally and

82
00:06:13.097 --> 00:06:19.231
vertically all the way around with
these boxes and 10 pixels in this case.

83
00:06:19.231 --> 00:06:24.253
With line base placement, we have
a series of lines, in this case, we're

84
00:06:24.253 --> 00:06:29.913
working with columns, those line, also,
apply to rows, they count like humans,

85
00:06:29.913 --> 00:06:34.560
we start with one and you start to
the outside of your first Grid cell.

86
00:06:34.560 --> 00:06:40.936
That becomes line number one, after that
first Grid cell before the second one,

87
00:06:40.936 --> 00:06:45.435
that's line number two, and
so on across the screen, so

88
00:06:45.435 --> 00:06:51.176
in that first cell there we've said
our grid column goes from one to two.

89
00:06:51.176 --> 00:06:56.210
Our second cell goes from two to three,
our third cell goes

90
00:06:56.210 --> 00:07:01.448
from three to four and
our last cell will go from four to five,

91
00:07:01.448 --> 00:07:05.997
so this is a shorthand here
this is a start and an end.

92
00:07:05.997 --> 00:07:09.941
You could spell these out with grid
hyphen column hyphen, start, grid hyphen,

93
00:07:09.941 --> 00:07:13.711
column hyphen, end, or you can just
use the shorthand that I've used here,

94
00:07:13.711 --> 00:07:17.090
where we're indicating the start and
finish of both of those lines.

95
00:07:20.619 --> 00:07:24.618
Then you can start thinking about
the two-dimensional aspect of it what I

96
00:07:24.618 --> 00:07:27.390
showed you there before was
just a very simple row,

97
00:07:27.390 --> 00:07:30.765
if you are laying this out in
a more complicated grid fashion.

98
00:07:30.765 --> 00:07:35.610
Then we're going to think about
what happens if we have a cell

99
00:07:35.610 --> 00:07:40.360
that goes over several rows or
over several columns then for

100
00:07:40.360 --> 00:07:45.023
example here with the column
one that dot call hyphen one.

101
00:07:45.023 --> 00:07:49.953
It starts at row line number one,
it skips over a line number two,

102
00:07:49.953 --> 00:07:55.154
because that's part of that cell,
and it ends at line number three,

103
00:07:55.154 --> 00:08:00.558
so we're going to say our grid hyphen
row has a value of one slash three.

104
00:08:00.558 --> 00:08:06.380
That is how we go about specifying this,
so as you see with this type of syntax,

105
00:08:06.380 --> 00:08:10.968
we're very, very specific about
where each cell is placed in

106
00:08:10.968 --> 00:08:15.643
space using these types of
numbers it's kind of absoluteish,

107
00:08:15.643 --> 00:08:21.228
where it's saying exactly where we want
each cell here inside of the grid.

108
00:08:21.228 --> 00:08:25.396
There's nothing wrong with that
if you are very particular about

109
00:08:25.396 --> 00:08:29.486
when where things are going to go and
this code is not necessarily

110
00:08:29.486 --> 00:08:34.433
going to be reused somewhere else and
you don't have necessarily a bunch of.

111
00:08:34.433 --> 00:08:38.726
Maybe you have a bunch of press releases,
or a bunch of images, or a bunch of

112
00:08:38.726 --> 00:08:43.512
some other type of content, little chunks
that you wanna display nicely on a page.

113
00:08:43.512 --> 00:08:47.868
This type of syntax is going to be more
difficult to work with under those kinds

114
00:08:47.868 --> 00:08:52.292
of conditions where you don't necessarily
know how many items you need inside

115
00:08:52.292 --> 00:08:53.646
of a grid based layout.

116
00:08:53.646 --> 00:08:58.008
Under those kinds of conditions,
you might work with Flexbox,

117
00:08:58.008 --> 00:09:02.450
much more easily that's kind of
what Flexbox was designed to do or

118
00:09:02.450 --> 00:09:07.296
there are some other grid syntaxes
that are a little bit more flexible,

119
00:09:07.296 --> 00:09:12.026
in terms of where you start and
where you end in this line base syntax.

120
00:09:12.026 --> 00:09:16.008
We'll take a look at that as well,
so as I mentioned,

121
00:09:16.008 --> 00:09:20.254
this is the hard part of Grid,
all these kinds of syntax so

122
00:09:20.254 --> 00:09:25.474
the numbers we just talked about
the lines actually have these numbers

123
00:09:25.474 --> 00:09:30.273
there's a span notation we're
gonna talk about momentarily.

124
00:09:30.273 --> 00:09:34.741
You also have the option of naming your
lines so rather than just going by

125
00:09:34.741 --> 00:09:39.581
the numbers, which to me is very simple
and straightforward you can in fact,

126
00:09:39.581 --> 00:09:42.944
name your lines if that is
an easier approach for you.

127
00:09:42.944 --> 00:09:47.598
And then use those names inside of your
syntax I'm not going to cover that today

128
00:09:47.598 --> 00:09:52.531
but there's lots of places you can look up
what that syntaxies, you can also create

129
00:09:52.531 --> 00:09:56.711
named grid template areas,
which we will cover a little bit later on.

130
00:09:56.711 --> 00:10:01.452
And then of course, there's tons of
shorthand and longhand properties so

131
00:10:01.452 --> 00:10:05.363
this to me, again is one of the most
confusing parts of Grid and

132
00:10:05.363 --> 00:10:10.027
the best way to mitigate this is to take
a look at the CSS tricks page which is

133
00:10:10.027 --> 00:10:12.310
called The Complete Guide to Grid.

134
00:10:12.310 --> 00:10:17.345
And I've given that to you on
today's notes in the website, and

135
00:10:17.345 --> 00:10:22.380
it will give you a link to that
particular page on CSS tricks where

136
00:10:22.380 --> 00:10:28.374
you can look up all of that syntax that's
probably the best way to go with us.

137
00:10:28.374 --> 00:10:33.093
There is another game for practicing your
Grid syntax if you're interested in that,

138
00:10:33.093 --> 00:10:37.038
from the same people who made
Flexbox Froggy we had the CSS Grid garden.

139
00:10:37.038 --> 00:10:42.109
It's a great game, I thoroughly
encourage you to go play it if you wanna

140
00:10:42.109 --> 00:10:47.348
explore all of the different ways of
saying the same thing inside of Grid,

141
00:10:47.348 --> 00:10:51.827
the other interesting part of
this is tracking your parents and

142
00:10:51.827 --> 00:10:54.890
children, the containers and the items.

143
00:10:54.890 --> 00:11:00.025
And so this moves through space so we
can have a single element that starts as

144
00:11:00.025 --> 00:11:05.159
a grid item okay, so somewhere out here
we have a grid container we have this

145
00:11:05.159 --> 00:11:10.235
grid item, it's also a grid container for
the next element inside of it.

146
00:11:10.235 --> 00:11:15.411
That element could be a grid item and
a flex item and a flex container,

147
00:11:15.411 --> 00:11:21.126
and so forth so managing these parents and
children can get very complicated

148
00:11:21.126 --> 00:11:25.877
we're gonna look at an example
like this a little bit later on.

149
00:11:25.877 --> 00:11:30.866
So as I said here so Grid container 1
goes to Grid item 1 It also becomes Grid

150
00:11:30.866 --> 00:11:34.983
container number 2 that might
become a Grid item number 2 and

151
00:11:34.983 --> 00:11:38.801
a Flex can container with
a flex item associated with it.

152
00:11:38.801 --> 00:11:41.974
You can in fact stack these up
in all kinds of crazy ways so

153
00:11:41.974 --> 00:11:45.890
just sort of know that at this point
in time, that this is possible and

154
00:11:45.890 --> 00:11:48.676
by the end of today,
you'll know how to do this.

