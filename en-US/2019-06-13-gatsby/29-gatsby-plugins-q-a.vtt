WEBVTT

1
00:00:00.020 --> 00:00:04.210
&gt;&gt; Speaker 2: So even though you're
getting the source images from Instagram,

2
00:00:04.210 --> 00:00:06.310
you're getting them on the server side.

3
00:00:06.310 --> 00:00:08.960
And you're doing all your source
all your transformation and

4
00:00:08.960 --> 00:00:13.810
writing out to multiple images in the
static directory and then serving them up.

5
00:00:13.810 --> 00:00:15.036
&gt;&gt; Jason Lengstorf: Yes.
&gt;&gt; Speaker 2: Okay, so

6
00:00:15.036 --> 00:00:20.019
that works here because we're
running a dev server for it.

7
00:00:20.019 --> 00:00:24.860
But they're not really static because
you're getting the top twelve of them.

8
00:00:24.860 --> 00:00:27.980
&gt;&gt; Jason Lengstorf: It will update
every time the site builds.

9
00:00:27.980 --> 00:00:33.020
So if you wanted this to always
be up to date you could,

10
00:00:33.020 --> 00:00:37.440
I don't think Instagram supports web hooks
but you could use something like Zapier.

11
00:00:37.440 --> 00:00:41.740
And you could have Zapier every time
there's a new Instagram post trigger a web

12
00:00:41.740 --> 00:00:43.710
hook that would rebuild your Gatsby site
&gt;&gt; Speaker 2: Okay

13
00:00:43.710 --> 00:00:45.050
&gt;&gt; Jason Lengstorf: So that way you would

14
00:00:45.050 --> 00:00:49.620
always be able to kind of have the most up
to date version of whatever your data is.

15
00:00:49.620 --> 00:00:52.810
That's a pretty standard
approach is to use web hooks or

16
00:00:52.810 --> 00:00:56.850
something like Zapier to to
re-trigger a build when data changes.

17
00:00:56.850 --> 00:01:00.150
But yeah, but
to answer your question, yes.

18
00:01:00.150 --> 00:01:01.910
It's not actually live.

19
00:01:01.910 --> 00:01:07.520
So if you didn't rebuild the site,
whenever you post a new thing,

20
00:01:07.520 --> 00:01:08.690
it's not gonna show up here.

21
00:01:08.690 --> 00:01:11.760
You would have to rebuild
the site to get the latest data.

22
00:01:11.760 --> 00:01:13.090
&gt;&gt; Speaker 3: But you could.

23
00:01:13.090 --> 00:01:14.080
&gt;&gt; Jason Lengstorf: Yeah,
you absolutely can.

24
00:01:14.080 --> 00:01:15.247
You just have to trigger a build.

25
00:01:15.247 --> 00:01:15.747
&gt;&gt; Speaker 3: Yeah.

26
00:01:17.195 --> 00:01:20.185
&gt;&gt; Speaker 4: So unhelpfully I have
a question about the previous section

27
00:01:20.185 --> 00:01:20.802
actually.

28
00:01:20.802 --> 00:01:21.320
&gt;&gt; Jason Lengstorf: Okay.
[LAUGH] &gt;&gt; Speaker 4: We

29
00:01:21.320 --> 00:01:23.620
talked a bit about MDX and then remark.

30
00:01:23.620 --> 00:01:27.660
Are there other competitive strengths
between the two for processing markdown,

31
00:01:27.660 --> 00:01:30.060
beyond what you can put.

32
00:01:30.060 --> 00:01:34.585
Add components and any other, cannot like
Remark has a pretty large ecosystem of

33
00:01:34.585 --> 00:01:36.830
[INAUDIBLE] in your experience.

34
00:01:36.830 --> 00:01:39.940
&gt;&gt; Jason Lengstorf: So MDX is designed to
be compatible with the whole ecosystem of

35
00:01:39.940 --> 00:01:41.130
Remark plugins.

36
00:01:41.130 --> 00:01:49.246
So theoretically MDX should
be Remark plus React support.

37
00:01:49.246 --> 00:01:53.900
That, I don't know if that's 100% true,
but if it's not true,

38
00:01:53.900 --> 00:01:55.775
it's because it's a bug,
not because it's not planned.

39
00:01:55.775 --> 00:02:01.120
So in practice MDX should
have all the features

40
00:02:01.120 --> 00:02:05.370
of Remark as well as the ability to
embed jsx into your markdown documents.

41
00:02:06.420 --> 00:02:07.100
&gt;&gt; Speaker 4: Good to know thanks.

42
00:02:09.130 --> 00:02:11.053
&gt;&gt; Jason Lengstorf: Anyone else?

43
00:02:11.053 --> 00:02:11.760
See one back there.

44
00:02:13.340 --> 00:02:15.579
&gt;&gt; Speaker 5: What if a post
contains multiple photos?

45
00:02:18.484 --> 00:02:22.230
&gt;&gt; Jason Lengstorf: In
markdown that won't matter.

46
00:02:22.230 --> 00:02:23.180
The same thing will happen.

47
00:02:24.640 --> 00:02:28.620
So if we look at this one,
you can put as many posts,

48
00:02:28.620 --> 00:02:30.330
as many images as you want in there.

49
00:02:30.330 --> 00:02:37.470
For example, this is my website,
and on the, let's see.

50
00:02:37.470 --> 00:02:40.170
I think one of these has.

51
00:02:40.170 --> 00:02:41.600
Here's one, I think.

52
00:02:41.600 --> 00:02:43.910
So this one has a bunch of images in it.

53
00:02:43.910 --> 00:02:47.330
And these are all just embedded
in regular markdown and

54
00:02:47.330 --> 00:02:50.850
Gatsby will pick them up and and fix them.

55
00:02:52.830 --> 00:02:56.220
If you're doing something
like I think in this one,

56
00:02:56.220 --> 00:03:00.320
I believe these images are embedded
in using regular Gatsby image.

57
00:03:00.320 --> 00:03:01.880
I just setup multiple queries.

58
00:03:01.880 --> 00:03:04.700
And so the way that you would
setup those multiple queries is,

59
00:03:04.700 --> 00:03:07.940
let's say you wanted to do a file.

60
00:03:07.940 --> 00:03:14.255
And you would want the, I don't know,
let's say the relative path is,

61
00:03:14.255 --> 00:03:20.320
let's see, trying to do this on the fly.

62
00:03:20.320 --> 00:03:27.160
The regex and that would be Nicole.

63
00:03:27.160 --> 00:03:28.400
I think that's gonna get me what I want.

64
00:03:29.800 --> 00:03:32.560
Yep, and then I wanted to do another one.

65
00:03:32.560 --> 00:03:38.700
So I would set the relative path and
this one would be regx for let's say,

66
00:03:38.700 --> 00:03:44.630
or, by default, what's going to happen
is it's going to yell at me, right?

67
00:03:44.630 --> 00:03:47.660
But what I can do, is I can alias these.

68
00:03:51.030 --> 00:03:52.360
And now I get both files.

69
00:03:52.360 --> 00:03:53.670
So if you need multiple images,

70
00:03:53.670 --> 00:03:57.940
you can just write the same query and
alias it like so.

71
00:03:57.940 --> 00:04:02.150
And that'll give you the ability to
make the same, like the same query

72
00:04:03.200 --> 00:04:07.040
as many times as you need without having
to put them in different files or

73
00:04:07.040 --> 00:04:07.550
something like that.

74
00:04:08.900 --> 00:04:10.090
&gt;&gt; Speaker 5: What about handling video?

75
00:04:11.670 --> 00:04:13.310
&gt;&gt; Jason Lengstorf: Video support is,

76
00:04:13.310 --> 00:04:18.820
I mean,
we have like a YouTube source plugin.

77
00:04:18.820 --> 00:04:21.790
We have an embed video plugin.

78
00:04:21.790 --> 00:04:25.960
There's this really cool oEmbed
plugin that will do that.

79
00:04:25.960 --> 00:04:29.560
If you are,
like we don't auto-optimize MP4 files or

80
00:04:29.560 --> 00:04:31.890
anything, to the best of my knowledge.

81
00:04:31.890 --> 00:04:39.560
In my experience almost everybody is
using some kind of video hosting.

82
00:04:39.560 --> 00:04:44.780
Whether that is one of the big name ones
like YouTube or Vimeo or whether that

83
00:04:44.780 --> 00:04:50.240
is something like Cloud Neri for video
hosting is kind of like an asset CDN.

84
00:04:51.280 --> 00:04:56.670
Because of that, it seemed like
duplicate effort to try to optimize

85
00:04:56.670 --> 00:05:00.000
video files because everybody else is
already doing such a good job of that.

86
00:05:00.000 --> 00:05:03.465
But yeah, so there's great video support
if you want to put videos in, but

87
00:05:03.465 --> 00:05:05.670
we're not going to do any optimization for
it.

88
00:05:08.576 --> 00:05:12.810
&gt;&gt; Speaker 5: How about other
data sources like Wordpress?

89
00:05:12.810 --> 00:05:17.120
&gt;&gt; Jason Lengstorf: Yeah, we have
a we have a Wordpress source plugin.

90
00:05:17.120 --> 00:05:23.740
It just hooks into the WordPress REST API
and you are able to run a full site of it.

91
00:05:23.740 --> 00:05:30.040
So this is a blog that is
powered by WordPress and it

92
00:05:30.040 --> 00:05:34.960
loads in like WordPress data, supports the
category stagging, all that good stuff.

93
00:05:34.960 --> 00:05:41.190
But, yeah, you don't have to do anything
special there, it just loads in that data.

94
00:05:41.190 --> 00:05:46.837
&gt;&gt; Speaker 5: In that case,
you couldn't use like MDX with Wordpress?

95
00:05:46.837 --> 00:05:52.530
&gt;&gt; Jason Lengstorf: With Wordpress,
I can see a path to making that work but

96
00:05:52.530 --> 00:05:55.240
it would probably,
like that would be an advanced use case.

97
00:05:56.980 --> 00:06:02.794
&gt;&gt; Speaker 3: I mean you would have
to do this in the WordPress packet.

98
00:06:02.794 --> 00:06:07.330
&gt;&gt; Jason Lengstorf: Well
you could write MDX

99
00:06:07.330 --> 00:06:10.865
in your WordPress editor,
and then export that and

100
00:06:10.865 --> 00:06:15.520
re-import it as an MDX file in Gatsby
that would get it processed as MDX.

101
00:06:15.520 --> 00:06:16.550
It would be-
&gt;&gt; Speaker 3: You

102
00:06:16.550 --> 00:06:18.260
could also shoot yourself in the foot.

103
00:06:18.260 --> 00:06:19.480
&gt;&gt; Jason Lengstorf: It'd
be a little hinky for sure.

104
00:06:19.480 --> 00:06:25.219
Like, I would say that falls very
firmly into like, here be dragons,

105
00:06:25.219 --> 00:06:29.615
cuz you're starting to do
some really custom stuff.

106
00:06:29.615 --> 00:06:30.871
It doesn't mean it's impossible, though.

107
00:06:30.871 --> 00:06:32.590
Like you could probably make it work.

108
00:06:34.993 --> 00:06:36.596
&gt;&gt; Jason Lengstorf: Any other questions?

109
00:06:36.596 --> 00:06:42.900
&gt;&gt; Speaker 6: So
all third party sources need a plugin.

110
00:06:44.260 --> 00:06:45.950
&gt;&gt; Jason Lengstorf: I
mean they don't need one.

111
00:06:45.950 --> 00:06:49.270
You're always welcome to-
&gt;&gt; Speaker 6: Go rouge?

112
00:06:49.270 --> 00:06:53.300
&gt;&gt; Jason Lengstorf: Yeah, I mean if you
want to use Axios and just do a fetch for

113
00:06:53.300 --> 00:06:55.610
data, you can 100% do that.

114
00:06:55.610 --> 00:06:57.210
There's nothing that stops
you from doing that.

115
00:06:57.210 --> 00:07:04.160
We've got a whole doc, in fact,
on Gatsby without Graph QL.

116
00:07:04.160 --> 00:07:05.760
If you want to build a Gatsby site and

117
00:07:05.760 --> 00:07:09.920
you don't feel like using Graph QL,
you can absolutely do it.

118
00:07:09.920 --> 00:07:12.030
This doc will walk you
through how that works.

119
00:07:12.030 --> 00:07:17.800
What I'm trying to do here is explain,
why.

120
00:07:17.800 --> 00:07:22.690
We also have kind of
a philosophical page on

121
00:07:22.690 --> 00:07:27.250
why we use GraphQL then I'll walk through
the progressive complexity of things.

122
00:07:27.250 --> 00:07:30.150
This includes an Egghead
course that'll kind of

123
00:07:30.150 --> 00:07:31.410
walk through all the different pieces.

124
00:07:31.410 --> 00:07:36.410
But yeah, the data sources, it's
easier if they come in with a plug-in.

125
00:07:36.410 --> 00:07:40.160
Because that's gonna give you a lot of
the convenience stuff that Gatsby does.

126
00:07:40.160 --> 00:07:46.810
If you want to use Gatsby's API's to
create nodes, that's the same as a plugin.

127
00:07:46.810 --> 00:07:52.380
All a plugin under doing under the hood is
calling source nodes and on create node

128
00:07:52.380 --> 00:07:58.400
and a handful of other Gatsby node API's
that put things into the graph QL layer.

129
00:07:58.400 --> 00:07:59.790
So you can put whatever you want in there.

130
00:07:59.790 --> 00:08:01.810
It doesn't necessarily require a plug in.

131
00:08:01.810 --> 00:08:02.570
It's just for

132
00:08:02.570 --> 00:08:06.210
convenience it's usually easier if
you can find one that has a plug in.

133
00:08:06.210 --> 00:08:09.470
And if you end up doing this for something
that doesn't have a plug in it would mean

134
00:08:09.470 --> 00:08:13.450
a lot to the community and to me if you
were to publish that as a plug in so

135
00:08:13.450 --> 00:08:15.300
that everybody else can get
the benefit of that work

