WEBVTT

1
00:00:00.000 --> 00:00:01.400
&gt;&gt; Jason Lengstorf: So we've got this, but

2
00:00:01.400 --> 00:00:04.344
now how do we actually get
content into the pages?

3
00:00:04.344 --> 00:00:08.080
Cuz if I click through this,
obviously we're not getting,

4
00:00:08.080 --> 00:00:12.781
we're not seeing anything, there's no
pages yet, so we need to fix that.

5
00:00:12.781 --> 00:00:18.049
To fix that, we're going to get
into programmatic page generation.

6
00:00:18.049 --> 00:00:23.989
And we do that by creating a new file, so
let me make this a little bit bigger here.

7
00:00:27.468 --> 00:00:30.474
&gt;&gt; Jason Lengstorf: We're gonna come down
here, and next to our gatsby-config,

8
00:00:30.474 --> 00:00:32.865
we're gonna add a new
file called gatsby-node.

9
00:00:32.865 --> 00:00:39.130
And this is where you can start to
see that extending Gatsby works.

10
00:00:39.130 --> 00:00:44.892
We expose a node set of APIs, a browser
set of APIs and then some APIs for

11
00:00:44.892 --> 00:00:50.378
server-side rendering,
each of those is named gatsby-thing.

12
00:00:50.378 --> 00:00:53.184
So gatsby-node,
gatsby-browser, gatsby-ssr.

13
00:00:53.184 --> 00:00:54.421
Inside of those,

14
00:00:54.421 --> 00:01:00.027
you can export a function that is the same
name as one of the hooks that we look for,

15
00:01:00.027 --> 00:01:04.580
and we will do whatever you tell us
to do at that phase of the build.

16
00:01:04.580 --> 00:01:11.240
So in our case, we wanna create pages, so
we're going to use exports.createPages.

17
00:01:11.240 --> 00:01:15.666
And because we're gonna load data,
we're gonna make this an async function.

18
00:01:15.666 --> 00:01:19.427
And then we're gonna need
some stuff out of Gatsby.

19
00:01:19.427 --> 00:01:24.240
So Gatsby's gonna give us a couple
utility methods that we can use.

20
00:01:24.240 --> 00:01:28.431
We get a whole bundle of actions,
and then we get a GraphQL helper.

21
00:01:32.168 --> 00:01:34.159
&gt;&gt; Jason Lengstorf: And then I'm
also gonna grab the reporter in case

22
00:01:34.159 --> 00:01:35.970
we need to put something
out to the console.

23
00:01:35.970 --> 00:01:39.472
So this is Gatsby's kind
of internal console log.

24
00:01:39.472 --> 00:01:44.434
And it prevents you from having to use
console log, and also add some styling and

25
00:01:44.434 --> 00:01:47.100
will do things like
hook into telemetry and

26
00:01:47.100 --> 00:01:49.863
give you the ability to
do some extra stuff.

27
00:01:49.863 --> 00:01:53.704
We're not gonna get deep into that
because it's pretty advanced, but

28
00:01:53.704 --> 00:01:55.250
just know that it's there.

29
00:01:56.340 --> 00:01:59.530
So what we can do now that we've
got these actions in the GraphQL,

30
00:01:59.530 --> 00:02:01.388
I'm gonna just make a GraphQL query.

31
00:02:01.388 --> 00:02:05.206
I want to get,
the result of this query is going to

32
00:02:05.206 --> 00:02:08.759
be what I get from
awaiting the graphql call.

33
00:02:08.759 --> 00:02:14.319
And my graphql call,
now notice this time, it's a function.

34
00:02:14.319 --> 00:02:17.321
We're not using it as a template literal,
this is a function.

35
00:02:17.321 --> 00:02:21.800
This is a Node interface, which is
different from the React interface.

36
00:02:21.800 --> 00:02:24.464
So it's a subtle difference,
it trips people up sometimes.

37
00:02:24.464 --> 00:02:31.038
Just know that when you're in gatsby-node,
this graphql is in deed a function call.

38
00:02:31.038 --> 00:02:32.908
Inside of it, I wanna run a query.

39
00:02:32.908 --> 00:02:35.986
And the query that I want is
to get all these mdx files.

40
00:02:35.986 --> 00:02:41.265
And inside of the nodes,
I want the frontmatter.

41
00:02:41.265 --> 00:02:43.363
And I'm gonna get the slug.

42
00:02:43.363 --> 00:02:47.584
And if you're wondering why I'm only
getting the slug when I'm about to

43
00:02:47.584 --> 00:02:52.427
create these pages, it's because we don't
necessarily want to have to load all of

44
00:02:52.427 --> 00:02:56.420
the content and
then shove that content into a component.

45
00:02:56.420 --> 00:03:00.750
Instead, we want to create these pages and

46
00:03:00.750 --> 00:03:03.858
then have the pages query for
the data that they want.

47
00:03:03.858 --> 00:03:08.730
You wanna co-locate the data queries where
it's used as opposed to having these kind

48
00:03:08.730 --> 00:03:12.160
of pass along things where
you load data here and

49
00:03:12.160 --> 00:03:14.980
then you just have to know when
you're editing that component that,

50
00:03:14.980 --> 00:03:17.530
if you wanna touch that data,
you have to go to gatsby-node.

51
00:03:17.530 --> 00:03:18.903
It creates magic references.

52
00:03:18.903 --> 00:03:23.530
And it gets kind of tricky, so
we wanna minimize those as much as we can.

53
00:03:23.530 --> 00:03:26.074
So once we've got our results,
we're going to check and

54
00:03:26.074 --> 00:03:27.717
make sure that we got what we needed.

55
00:03:27.717 --> 00:03:31.852
This is gonna matter less when you're
doing local files because they're unlikely

56
00:03:31.852 --> 00:03:32.393
to break.

57
00:03:32.393 --> 00:03:36.206
But as you start using third party
sources, APIs that could be down,

58
00:03:36.206 --> 00:03:38.442
something that might rate limit you, or

59
00:03:38.442 --> 00:03:42.746
be missing an API key, you wanna make
sure that you're checking for errors.

60
00:03:42.746 --> 00:03:46.353
And what I'm gonna do in this
case is that I'm gonna panic.

61
00:03:48.187 --> 00:03:51.587
&gt;&gt; Jason Lengstorf: And so
we will say that we failed to create post,

62
00:03:51.587 --> 00:03:55.328
if we get here, and
then we'll just add the errors.

63
00:03:57.891 --> 00:04:00.795
&gt;&gt; Jason Lengstorf: And what panic does
is it prints out an error and stops

64
00:04:00.795 --> 00:04:05.235
the Gatsby build and tells you what went
wrong so that you have a chance to fix it.

65
00:04:09.510 --> 00:04:11.753
&gt;&gt; Jason Lengstorf: If we get
past the result.errors.errors,

66
00:04:11.753 --> 00:04:16.120
then we're able to assume that we've got
our post and things worked as expected.

67
00:04:16.120 --> 00:04:18.230
So I'm gonna go in, and
I'm going to the result,

68
00:04:18.230 --> 00:04:23.860
I'm gonna get the data out of it and
then allMdx and nodes.

69
00:04:23.860 --> 00:04:25.835
And so this is my post object,

70
00:04:25.835 --> 00:04:29.393
which is going to contain
my frontmatter of the slug.

71
00:04:29.393 --> 00:04:34.989
Then I can posts.forEach,
and that'll give me a post.

72
00:04:34.989 --> 00:04:38.638
And I'm using forEach versus map because
we're not returning anything here.

73
00:04:38.638 --> 00:04:42.641
So this is just a side effect and we
don't necessarily want to return a value.

74
00:04:45.283 --> 00:04:49.123
&gt;&gt; Jason Lengstorf: Inside, I'm gonna
use that actions object, and there's one

75
00:04:49.123 --> 00:04:53.911
called createPage, which is singular,
and this one takes three arguments.

76
00:04:53.911 --> 00:04:57.228
The first one is the path, and
that's where we want it to live.

77
00:04:57.228 --> 00:05:04.329
I want this to live at the slug, so
I'm gonna do post.frontmatter.slug.

78
00:05:04.329 --> 00:05:06.278
The next is a component.

79
00:05:06.278 --> 00:05:08.634
So we need to tell it
what component to use.

80
00:05:08.634 --> 00:05:13.352
The same as we told MDX
what component to use.

81
00:05:13.352 --> 00:05:16.312
So we haven't actually built
that component yet, so

82
00:05:16.312 --> 00:05:17.968
we're gonna need to do that.

83
00:05:17.968 --> 00:05:21.642
For now,
&gt;&gt; Jason Lengstorf: We can just

84
00:05:21.642 --> 00:05:23.732
placeholder that.

85
00:05:23.732 --> 00:05:24.952
We need to do that.

86
00:05:24.952 --> 00:05:27.029
And then finally, is some context.

87
00:05:27.029 --> 00:05:31.405
And we'll look at this in a minute,
but what I wanna send is the slug.

88
00:05:31.405 --> 00:05:36.330
And the slug that I'm going
to send is gonna be wrapped

89
00:05:36.330 --> 00:05:41.283
in,
&gt;&gt; Jason Lengstorf: Forward slashes

90
00:05:41.283 --> 00:05:42.718
is the word I was looking for.

91
00:05:42.718 --> 00:05:45.406
It's gonna be wrapped in forward slashes,
and

92
00:05:45.406 --> 00:05:47.630
we'll talk about why once we get to it.

93
00:05:51.811 --> 00:05:53.089
&gt;&gt; Jason Lengstorf: So
all right, here we are.

94
00:05:55.329 --> 00:05:57.257
&gt;&gt; Jason Lengstorf: We have this thing
that's gonna create pages for us, but

95
00:05:57.257 --> 00:05:58.273
we're missing a component.

96
00:05:58.273 --> 00:06:00.315
So let's go ahead and
create that component.

97
00:06:00.315 --> 00:06:05.330
A convention that I like is to create
a new folder called templates for

98
00:06:05.330 --> 00:06:08.105
this, and I'm going to call it post.

99
00:06:14.373 --> 00:06:15.274
&gt;&gt; Jason Lengstorf: If I can find it.

100
00:06:19.024 --> 00:06:24.307
&gt;&gt; Jason Lengstorf: post.js, and in here,
we're going to style this thing out.

101
00:06:24.307 --> 00:06:26.894
So we've got import React from 'react'.

102
00:06:26.894 --> 00:06:30.574
We're gonna import {
graphql } from 'gatsby'.

103
00:06:30.574 --> 00:06:36.845
We're going import the MDX,
well, let's do that in a minute.

104
00:06:36.845 --> 00:06:43.820
Let's import { css } from '@emotion core'.

105
00:06:43.820 --> 00:06:47.636
We're going to import our layout,
cuz we wanna keep that consistent feel.

106
00:06:47.636 --> 00:06:50.581
So we're gonna go '../components/layout'.

107
00:06:50.581 --> 00:06:56.338
And then I also want to use the read-link.

108
00:07:00.750 --> 00:07:03.012
&gt;&gt; Jason Lengstorf:
'../components/read-link'.

109
00:07:04.250 --> 00:07:08.310
&gt;&gt; Jason Lengstorf: And so
now I can set up my template.

110
00:07:08.310 --> 00:07:10.266
So I'm gonna set up a PostTemplate.

111
00:07:12.519 --> 00:07:17.334
&gt;&gt; Jason Lengstorf: And that is going
to eventually receive some props, but

112
00:07:17.334 --> 00:07:21.440
we're not quite there yet,
so we can set it up.

113
00:07:21.440 --> 00:07:23.626
Let's set up our Layout.

114
00:07:23.626 --> 00:07:29.574
Inside of our Layout,
I want to use post title,

115
00:07:29.574 --> 00:07:34.502
then we're going to show who wrote it.

116
00:07:39.485 --> 00:07:40.841
&gt;&gt; Jason Lengstorf: And
I'm just scaffolding this out so

117
00:07:40.841 --> 00:07:42.117
that we can see what it looks like.

118
00:07:42.117 --> 00:07:45.125
And then we'll figure out
how to actually show it.

119
00:07:45.125 --> 00:07:53.731
Then, here,
&gt;&gt; Jason Lengstorf: Post body goes here.

120
00:07:53.731 --> 00:08:00.159
And then finally, we'll set up
a ReadLink back to the homepage.

121
00:08:00.159 --> 00:08:05.585
And we'll just use the left arrow HTML
entity and say back to all posts.

122
00:08:08.054 --> 00:08:11.290
&gt;&gt; Jason Lengstorf: So
this is gonna work out kind of okay.

123
00:08:11.290 --> 00:08:13.418
This Posted by author,
we want that to be styled up.

124
00:08:13.418 --> 00:08:16.550
So let's add a couple styles here.

125
00:08:16.550 --> 00:08:18.920
And all I'm really gonna
do is just make it small.

126
00:08:18.920 --> 00:08:23.994
So I'm gonna do font-size is 0.75rem.

127
00:08:23.994 --> 00:08:28.878
And that puts us pretty
close to where we wanna be.

128
00:08:28.878 --> 00:08:32.905
So let's export default PostTemplate.

129
00:08:36.436 --> 00:08:40.902
&gt;&gt; Jason Lengstorf: So now if I come
back here and I wanna set this up,

130
00:08:40.902 --> 00:08:45.953
I can use the required.resolve and
get to that post.

131
00:08:45.953 --> 00:08:51.175
So I'm gonna go to
the ./src/templates/post.js.

132
00:08:51.175 --> 00:08:55.945
And now what we should see is that
it's gonna generate a page for

133
00:08:55.945 --> 00:08:58.383
each post that we've created.

134
00:08:58.383 --> 00:09:02.083
So let's go in here,
I'm gonna stop and restart the server.

135
00:09:02.083 --> 00:09:06.518
Whenever you change gatsby-node API,
it's going to require a stop and restart.

136
00:09:10.448 --> 00:09:11.901
&gt;&gt; Jason Lengstorf: Okay, so we're built,

137
00:09:11.901 --> 00:09:16.760
we're getting a linter error because we we
set up GraphQL but haven't used it yet.

138
00:09:16.760 --> 00:09:20.594
So now if I click through,
&gt;&gt; Jason Lengstorf: We're

139
00:09:20.594 --> 00:09:21.410
getting our post.

140
00:09:21.410 --> 00:09:24.990
So we do see a post, but, I mean,
obviously this is all hard coded data.

