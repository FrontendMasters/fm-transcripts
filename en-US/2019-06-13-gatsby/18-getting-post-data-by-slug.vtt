WEBVTT

1
00:00:00.150 --> 00:00:03.620
&gt;&gt; Jason Lengstorf: To get that data in,
we need to look at this context.

2
00:00:04.880 --> 00:00:07.990
So the context that we sent, so
far it's not being used for anything.

3
00:00:07.990 --> 00:00:10.870
But what it does is it gives
us the ability to get into,

4
00:00:10.870 --> 00:00:14.510
let me close some things that
we're not using anymore.

5
00:00:14.510 --> 00:00:20.275
It lets us get into
the into the component.

6
00:00:20.275 --> 00:00:23.200
We have page context.

7
00:00:23.200 --> 00:00:28.503
And so if I take this,
let's just do another trustee logger.

8
00:00:30.642 --> 00:00:32.513
&gt;&gt; Jason Lengstorf: And
I'll set page context.

9
00:00:37.431 --> 00:00:39.797
&gt;&gt; Jason Lengstorf: You can see
that the slug comes through.

10
00:00:39.797 --> 00:00:42.884
And so now I can use that in my data.

11
00:00:42.884 --> 00:00:48.440
And anything that I want to configure
in here, I can pass it through.

12
00:00:48.440 --> 00:00:51.770
So theoretically,
I could just put the title and

13
00:00:51.770 --> 00:00:55.440
the body and
the whole post into context and use it.

14
00:00:55.440 --> 00:00:56.930
And you are welcome to do that.

15
00:00:56.930 --> 00:01:00.490
The catch comes in where it gets
a little unwieldy over time,

16
00:01:00.490 --> 00:01:02.700
especially as the data gets more complex,

17
00:01:02.700 --> 00:01:07.060
as you have links between different types
of data, you want to load multiple things.

18
00:01:07.060 --> 00:01:10.464
So instead, what I recommend
is what we're gonna do here,

19
00:01:10.464 --> 00:01:13.130
which is we're gonna
export a GraphQL query.

20
00:01:15.380 --> 00:01:21.440
And this is going to be
what loads our data.

21
00:01:21.440 --> 00:01:23.010
So now one thing that we haven't done yet

22
00:01:23.010 --> 00:01:26.130
is we haven't figured out how
to do variables in GraphQL.

23
00:01:26.130 --> 00:01:31.060
So let's go back out and
look here at what this might look like.

24
00:01:31.060 --> 00:01:37.670
If I wanted to get just one MDX file,
how might I do that?

25
00:01:37.670 --> 00:01:43.962
Well, it turns out if I open this,
I can get to the MDX type.

26
00:01:43.962 --> 00:01:49.089
And we've got all of these queries that
we can make, so that's pretty exciting.

27
00:01:49.089 --> 00:01:53.073
So what if I were to do
something like this?

28
00:01:53.073 --> 00:01:57.154
I can say I want the,

29
00:02:03.326 --> 00:02:06.439
&gt;&gt; Jason Lengstorf: Slug, so frontmatter:

30
00:02:06.439 --> 00:02:10.890
{ slug: { eq: "hello world".

31
00:02:14.074 --> 00:02:17.289
All right, and so what I just threw
at you is a little wild looking.

32
00:02:19.340 --> 00:02:25.370
Basically, we have filtering set up where
you can say using the data in this thing,

33
00:02:25.370 --> 00:02:28.440
so the MDX nodes have a frontmatter field.

34
00:02:28.440 --> 00:02:31.440
So I wanna use that frontmatter field for
querying.

35
00:02:31.440 --> 00:02:34.950
Inside of frontmatter, we have a slug
field, so I wanna use that for querying.

36
00:02:34.950 --> 00:02:40.033
And then here we can choose
whether we want it to be equal, or

37
00:02:40.033 --> 00:02:45.560
other options include, ne,
in, nin, regex, or globs.

38
00:02:45.560 --> 00:02:50.390
And so by setting this up,
I am now able to say

39
00:02:50.390 --> 00:02:55.210
I want, let's just grab
the frontmatter and the title.

40
00:02:56.850 --> 00:02:59.801
And okay, that cleans it up a little bit.

41
00:02:59.801 --> 00:03:01.881
So now I'm able to select a single thing.

42
00:03:01.881 --> 00:03:03.890
And that's what we want.

43
00:03:03.890 --> 00:03:10.370
Because if I change this out to another
post, we're gonna get different data.

44
00:03:10.370 --> 00:03:11.630
So that's what we're after.

45
00:03:11.630 --> 00:03:15.863
We want the ability to kinda pull up
the specific post that we're gonna use.

46
00:03:16.980 --> 00:03:22.500
So that means that I need to be able to
get a variable in here because this post,

47
00:03:22.500 --> 00:03:28.350
if I just hard code hello world in here,
that doesn't help.

48
00:03:28.350 --> 00:03:31.790
So instead, we need to get
the value of this pageContext.slug.

49
00:03:33.350 --> 00:03:37.160
So anything that that Gatsby
provides as context is

50
00:03:37.160 --> 00:03:41.390
not only available in the page context,
but also as a GraphQL variable.

51
00:03:41.390 --> 00:03:44.900
So the way the GraphQL variables work
is we can do something like this.

52
00:03:46.360 --> 00:03:49.930
And we can define the variable and say
this variable is going to be called slug.

53
00:03:49.930 --> 00:03:51.570
It is a string.

54
00:03:51.570 --> 00:03:54.910
And this exclamation point
means that it's required.

55
00:03:54.910 --> 00:03:58.740
So down here this is just
a nice little feature.

56
00:03:58.740 --> 00:04:01.040
I can type out that it's a slug, and

57
00:04:01.040 --> 00:04:06.050
then I can just add whatever
slug I want down here.

58
00:04:06.050 --> 00:04:09.930
And then I just use it in
the place that I want to use it.

59
00:04:09.930 --> 00:04:12.898
Okay, we're getting what we want.

60
00:04:12.898 --> 00:04:14.238
Go "hello world".

61
00:04:17.669 --> 00:04:21.525
&gt;&gt; Jason Lengstorf: Okay, and
if I send it something that doesn't work,

62
00:04:21.525 --> 00:04:24.080
it just returns not so perfect.

63
00:04:24.080 --> 00:04:25.000
We're not gonna get errors.

64
00:04:25.000 --> 00:04:27.910
We'll just have an empty page
because we sent it junk.

65
00:04:27.910 --> 00:04:29.670
But that's on us to not send junk.

66
00:04:31.420 --> 00:04:36.490
So with Gatsby we can just do this
straight up because what'll happen is

67
00:04:36.490 --> 00:04:39.130
because we passed in slug as context,

68
00:04:39.130 --> 00:04:42.280
Gatsby is going to set
a GraphQL variable called slug.

69
00:04:42.280 --> 00:04:44.440
So that's available for us to use.

70
00:04:44.440 --> 00:04:46.970
And we can then grab out whatever we need.

71
00:04:48.110 --> 00:04:52.020
And the thing that we want is
going to be the title, the author.

72
00:04:52.020 --> 00:04:57.956
And then, because we're using MDX,
we're going to get into the code and

73
00:04:57.956 --> 00:05:02.277
the body, and so
the body is a little funky to look at.

74
00:05:02.277 --> 00:05:04.191
Well, let me make this an actual thing.

75
00:05:06.775 --> 00:05:10.220
&gt;&gt; Jason Lengstorf: So
this is what MDX does under the hood.

76
00:05:10.220 --> 00:05:15.010
You do not now nor will you ever
need to care what this looks like or

77
00:05:15.010 --> 00:05:16.330
what this actually says.

78
00:05:16.330 --> 00:05:20.856
What it's effectively doing is
taking the markdown and the JSX and

79
00:05:20.856 --> 00:05:27.150
kinda turning it into executable code
that MDX knows how to show on screen.

80
00:05:27.150 --> 00:05:30.820
Again, this is us trying to get all
that boilerplate out of the way so

81
00:05:30.820 --> 00:05:34.140
that you don't have to think about it,
you just get to use it.

82
00:05:35.400 --> 00:05:39.165
So once we have that code,
we can't just drop that on the page,

83
00:05:39.165 --> 00:05:39.900
it's not going to work.

84
00:05:39.900 --> 00:05:43.490
So instead, we need to use
something called the MDX renderer.

85
00:05:43.490 --> 00:05:47.347
So I'm going to import the {

86
00:05:47.347 --> 00:05:52.850
MDXRenderer }from 'gatsby-mdx'.

87
00:05:52.850 --> 00:05:56.460
And then down here,
we can start to actually use this data.

88
00:05:56.460 --> 00:06:00.310
Because anything that we query is
going to become available as data.

89
00:06:02.000 --> 00:06:05.140
So let's add that code and
body query in here.

90
00:06:05.140 --> 00:06:08.000
So I'm just stepping
through this real quick.

91
00:06:08.000 --> 00:06:12.680
The slug is set in the context,
so anything that we set there.

92
00:06:12.680 --> 00:06:15.220
And I'm realizing now that I
did this a different way when I

93
00:06:15.220 --> 00:06:16.370
originally set this up.

94
00:06:16.370 --> 00:06:20.410
So I'm just gonna use the slug and
search the slug that equals the slug.

95
00:06:20.410 --> 00:06:26.670
So now that we've set this,
in here it's available as a variable.

96
00:06:27.670 --> 00:06:31.570
And then we're gonna search for
the MDX files

97
00:06:31.570 --> 00:06:35.940
that have a frontmatter slug that equals
whatever the value of this variable is.

98
00:06:35.940 --> 00:06:38.310
Inside of that we're gonna
get the frontmatter.

99
00:06:38.310 --> 00:06:39.980
We want the title and author, and

100
00:06:39.980 --> 00:06:43.289
then we want the body of
the post as returned by MDX.

101
00:06:45.060 --> 00:06:50.120
We've imported this MDX renderer which
means that down here we've got our data.

102
00:06:50.120 --> 00:06:56.586
And so I can instead of using this,
I can do MDXRender and

103
00:06:56.586 --> 00:07:01.649
I just pass in the,
&gt;&gt; Jason Lengstorf: Well,

104
00:07:01.649 --> 00:07:02.772
let's simplify this a little bit.

105
00:07:02.772 --> 00:07:04.318
We're gonna destructure a little further.

106
00:07:04.318 --> 00:07:06.670
We're gonna destructure to the MDX.

107
00:07:06.670 --> 00:07:10.857
And I'm going to pull out we're
gonna rename mdx: post so

108
00:07:10.857 --> 00:07:13.516
that it's clear what we're using.

109
00:07:13.516 --> 00:07:17.340
So data is gonna be all of this.

110
00:07:17.340 --> 00:07:20.600
MDX is here and
then I'm aliasing it to post.

111
00:07:20.600 --> 00:07:23.610
That's a trick of destructuring
if you haven't seen that before.

112
00:07:25.260 --> 00:07:30.260
So up here now,
I can do post.frontmatter.title.

113
00:07:32.320 --> 00:07:38.790
And down here I can say post.code.body.

114
00:07:38.790 --> 00:07:41.963
And let's just test that and make sure
that works before we go too much further.

115
00:07:46.001 --> 00:07:47.469
&gt;&gt; Jason Lengstorf: Okay,
it's not liking it.

116
00:07:47.469 --> 00:07:49.668
And it's not liking it
because I didn't stop and

117
00:07:49.668 --> 00:07:51.605
restart the server after we wrote a query.

118
00:07:57.965 --> 00:08:01.348
&gt;&gt; Jason Lengstorf: I hope I also
might have just coded this wrong.

119
00:08:01.348 --> 00:08:01.949
There we go.

120
00:08:01.949 --> 00:08:04.360
Okay, so this is good.

121
00:08:04.360 --> 00:08:06.080
We got back our post.

122
00:08:06.080 --> 00:08:07.150
We're getting our title.

123
00:08:07.150 --> 00:08:09.374
If I go back out here and
I click into this one, great,

124
00:08:09.374 --> 00:08:12.950
we're getting our title and
we're getting our content.

125
00:08:12.950 --> 00:08:14.610
So let's clean up the rest
of this boilerplate.

126
00:08:16.230 --> 00:08:17.680
So we don't need that one anymore.

127
00:08:19.460 --> 00:08:25.585
And we want this to be
the post.frontmatter.author.

128
00:08:31.149 --> 00:08:33.681
&gt;&gt; Jason Lengstorf: Okay,
it's starting to look like a blog.

