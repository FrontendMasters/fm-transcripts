WEBVTT

1
00:00:00.121 --> 00:00:03.805
&gt;&gt; Student: Prefetch is a webpack thing
that Gatsby is just configuring for you.

2
00:00:03.805 --> 00:00:05.430
&gt;&gt; Jason Lengstorf: Prefetch
is a browser thing actually.

3
00:00:05.430 --> 00:00:11.790
So it's a built-in, what's it called?

4
00:00:11.790 --> 00:00:14.770
I know this, you can do a prefetch,

5
00:00:14.770 --> 00:00:19.690
a preload, preconnect and a few others.

6
00:00:19.690 --> 00:00:22.350
And each of these are, they're hints.

7
00:00:22.350 --> 00:00:26.900
So they tell the browser, hey,
I'm going to load this page next, or

8
00:00:26.900 --> 00:00:29.460
I'm going to need this resource soon.

9
00:00:29.460 --> 00:00:33.170
And in doing that the browser
is able to kinda make calls, but

10
00:00:33.170 --> 00:00:34.920
they're all done with really low priority.

11
00:00:34.920 --> 00:00:40.320
So if you've got Data Saver turned
on It won't try, if you are trying

12
00:00:40.320 --> 00:00:43.910
to download something else, it will put
that thing in the bottom of the stack

13
00:00:43.910 --> 00:00:47.090
instead of blocking your images or
something you need for the current page.

14
00:00:47.090 --> 00:00:52.582
So, yeah, it's built-in browser
technology on modern browsers,

15
00:00:52.582 --> 00:00:59.880
I believe it's supported in like Edge,
Firefox, Chrome, all the modern browsers.

16
00:00:59.880 --> 00:01:04.040
So it should be and in it like fail
silently and browsers don't support it.

17
00:01:04.040 --> 00:01:06.030
So there's no harm in putting it in.

18
00:01:06.030 --> 00:01:07.076
This will work on any technology.

19
00:01:07.076 --> 00:01:10.335
But again it's nice to
just have it done for.

20
00:01:10.335 --> 00:01:15.023
[LAUGH] Any other questions?

21
00:01:15.023 --> 00:01:16.220
Go ahead.

22
00:01:16.220 --> 00:01:18.880
&gt;&gt; Student2: Can you explain the how
the GraphQL scheming gets generated and

23
00:01:18.880 --> 00:01:24.400
whenever we install a new Gatsby plugin,
is it possible to modify the schema?

24
00:01:24.400 --> 00:01:27.190
&gt;&gt; Jason Lengstorf: It is, yes and yes.

25
00:01:27.190 --> 00:01:30.795
So the way that the schema is generated,

26
00:01:30.795 --> 00:01:35.257
let's see what would be
an easy example for this.

27
00:01:35.257 --> 00:01:41.032
So if I just go to the Gatsby node APIs,

28
00:01:41.032 --> 00:01:48.020
we have,
&gt;&gt; Jason Lengstorf: Source nodes here.

29
00:01:48.020 --> 00:01:52.683
And so, what's source nodes will do is,
the APIs, like the source plugin

30
00:01:52.683 --> 00:01:57.066
is basically you're gonna say like,
hey, Instagram give me posts.

31
00:01:57.066 --> 00:01:59.675
And then the posts are gonna come back and

32
00:01:59.675 --> 00:02:04.059
they ultimately end up in some
kinda of JSON-like data structure.

33
00:02:04.059 --> 00:02:08.132
There's a couple things that you
have to add, you need a node ID,

34
00:02:08.132 --> 00:02:12.370
you need to set a parent and children,
and a couple of these things.

35
00:02:12.370 --> 00:02:17.340
It needs a type and a content digest and
I think the rest of it is optional.

36
00:02:17.340 --> 00:02:22.859
And then you can use
this create node action

37
00:02:22.859 --> 00:02:27.460
to put that into our GraphQL layer.

38
00:02:27.460 --> 00:02:29.986
So when you create a my node type,

39
00:02:29.986 --> 00:02:35.390
this is going to tell Gatsby that
we need to have my node type query.

40
00:02:35.390 --> 00:02:38.793
And then all my node type query
where you're able to query for

41
00:02:38.793 --> 00:02:40.000
whatever is in here.

42
00:02:40.000 --> 00:02:44.110
In this case,
you would have the key, foo and bar.

43
00:02:44.110 --> 00:02:48.970
That is the kind of very,
very quick version of how that works.

44
00:02:48.970 --> 00:02:54.392
You're also able to listen for
like they're a bunch of different

45
00:02:54.392 --> 00:02:58.940
API s in here,
all of which enabled different things.

46
00:02:58.940 --> 00:03:03.040
So you can create pages,
we're able to create resolvers,

47
00:03:03.040 --> 00:03:07.714
you can look for when a different
data node is created and extended,

48
00:03:07.714 --> 00:03:10.425
that's a pretty powerful thing to do.

49
00:03:10.425 --> 00:03:13.871
This is how, for example, like
the sharp transformer is gonna look for

50
00:03:13.871 --> 00:03:16.685
any file nodes to get created and
then determine whether or

51
00:03:16.685 --> 00:03:19.170
not there are images and
if so do more stuff to them.

52
00:03:21.320 --> 00:03:27.640
There is a whole workshop's worth
of material on how to build source

53
00:03:27.640 --> 00:03:32.840
plugins and manipulate data, so I'm not
gonna be able to go super deep on that.

54
00:03:32.840 --> 00:03:38.960
But the short answer is if
you dig through this page and

55
00:03:38.960 --> 00:03:43.555
then look at existing source plugins, you
can see how they're using these different

56
00:03:43.555 --> 00:03:50.340
APIs to do all of those different things
to get data into Gatsby's GraphQL layer.

57
00:03:50.340 --> 00:03:55.260
If you want to customize that schema,
you're able

58
00:03:55.260 --> 00:04:00.780
to use our new schema customization API,
which is only a couple months old here.

59
00:04:00.780 --> 00:04:04.920
And this will allow you to
straight up define a thing.

60
00:04:04.920 --> 00:04:10.200
If you want to say,
I'm gonna have an author type and

61
00:04:10.200 --> 00:04:17.580
I want that to be mapped to this data and
throw it in, you can do anything.

62
00:04:17.580 --> 00:04:24.145
It can be completely custom, you could
like one way that we're looking at this

63
00:04:24.145 --> 00:04:30.823
is really exciting to us is if you wanted
to you could define a generic blog type.

64
00:04:30.823 --> 00:04:35.342
And then you could write a series
of resolvers that would say map

65
00:04:35.342 --> 00:04:38.990
a WordPress blog to the generic blog type.

66
00:04:38.990 --> 00:04:44.384
Or like Drupal or markdown all to
generic blog types, which means that you

67
00:04:44.384 --> 00:04:50.484
would write your posts like your Gatsby
sites using a generic type, the blog type.

68
00:04:50.484 --> 00:04:54.738
So if you were to start in markdown, and
then your site grows up and it scales and

69
00:04:54.738 --> 00:04:55.715
you hire people.

70
00:04:55.715 --> 00:04:59.940
And they don't know how to write markdown,
they want to use some kind of a CMS,

71
00:04:59.940 --> 00:05:03.845
if you map that CMS to the generic blog
type, you don't have to change any

72
00:05:03.845 --> 00:05:08.970
of the code in your site, because the
queries are all against the generic type.

73
00:05:08.970 --> 00:05:12.020
And that means that the code
is completely portable,

74
00:05:12.020 --> 00:05:16.030
even if you totally change the back end.

75
00:05:16.030 --> 00:05:20.230
So that type of stuff is starting
to come down the pipeline,

76
00:05:20.230 --> 00:05:23.160
we're starting to play with ideas and
proofs of concept on that.

77
00:05:23.160 --> 00:05:27.220
If you want to ping me on Twitter or
send me an email or something,

78
00:05:27.220 --> 00:05:29.350
I will happily send you a ton of examples.

79
00:05:29.350 --> 00:05:31.020
But we don't have time for it now.

80
00:05:32.040 --> 00:05:34.958
&gt;&gt; Student2: Is there a story for
card screens or

81
00:05:34.958 --> 00:05:38.491
any kind of dynamically generated data?

82
00:05:40.040 --> 00:05:44.870
&gt;&gt; Jason Lengstorf: Yeah, we have,
like for dynamic apps you mean?

83
00:05:46.200 --> 00:05:49.140
&gt;&gt; Student2: Yeah,
I mean like an admin interface would have

84
00:05:50.760 --> 00:05:52.680
the database returning stuff.

85
00:05:52.680 --> 00:05:57.070
&gt;&gt; Jason Lengstorf: Sure, yeah, so there
are handful of sites that have done this.

86
00:05:57.070 --> 00:05:59.150
I'm trying to think of one
that's a good example.

87
00:05:59.150 --> 00:06:04.050
So Like our our Swag Store
is using dynamic data.

88
00:06:04.050 --> 00:06:06.450
We've also seen a couple people
build dashboards with Gatsby.

89
00:06:06.450 --> 00:06:09.938
Gatsby itself has a dashboard
that's built in Gatsby.

90
00:06:09.938 --> 00:06:14.182
But the way that that works is anything
that you can build at build time,

91
00:06:14.182 --> 00:06:16.090
we encourage you to do so.

92
00:06:16.090 --> 00:06:20.180
If you can get that data and you know
that the data changes relatively and

93
00:06:20.180 --> 00:06:23.800
frequently, grab it ahead of time, stick
it into a page and you're good to go.

94
00:06:23.800 --> 00:06:28.030
If you've got something that is
hard to build ahead of time or

95
00:06:28.030 --> 00:06:30.310
that you shouldn't build
ahead of time like user data,

96
00:06:30.310 --> 00:06:33.350
then instead you would want
to do that asynchronously.

97
00:06:33.350 --> 00:06:36.280
And we have dynamic routing.

98
00:06:36.280 --> 00:06:40.709
So Gatsby, what is it dynamic routes,

99
00:06:40.709 --> 00:06:47.286
you are able to set up a what we
would call like a hybrid app or

100
00:06:47.286 --> 00:06:52.254
like a client only app
where you can say hey,

101
00:06:52.254 --> 00:06:57.236
anything that's under the app directory.

102
00:06:57.236 --> 00:06:59.899
Just treat that like a regular react app,

103
00:06:59.899 --> 00:07:03.410
don't try to do any serve
side rendering or anything.

104
00:07:03.410 --> 00:07:06.599
And for client side stuff like
a loading user data or whatever,

105
00:07:06.599 --> 00:07:09.860
that's a completely reasonable
way to approach that problem.

106
00:07:09.860 --> 00:07:13.704
Because you wouldn't be,
you wouldn't wanna build out like all that

107
00:07:13.704 --> 00:07:18.770
user data in the static files, anyways,
it's a kind of security problem.

108
00:07:18.770 --> 00:07:23.700
So that's one way to solve that, another
way we've seen that solved is you can wrap

109
00:07:23.700 --> 00:07:28.470
your entire Gatsby app with a provider for

110
00:07:28.470 --> 00:07:33.040
Apollo, or for
Axios if you wanted to rest calls.

111
00:07:33.040 --> 00:07:35.880
However you decide that
makes the most sense.

112
00:07:35.880 --> 00:07:40.270
And you're able to kind of use
static data where you've got it and

113
00:07:40.270 --> 00:07:41.820
make dynamic calls where you needed.

114
00:07:41.820 --> 00:07:44.844
If you use either in
class base components,

115
00:07:44.844 --> 00:07:50.580
you would use like componentDidMount or
in React Hooks, you would use use effect.

116
00:07:50.580 --> 00:07:55.905
You're able to say like dynamic
staff happens in this component.

117
00:07:55.905 --> 00:08:00.115
But because componentDidMount and
use effect don't fire during a server side

118
00:08:00.115 --> 00:08:04.516
rendering phase, they just get ignored
during server side rendering which means

119
00:08:04.516 --> 00:08:08.950
that the component would render in its
loading state or in its empty state.

120
00:08:08.950 --> 00:08:12.090
And once it rehydrates into React
that would just repopulate with

121
00:08:12.090 --> 00:08:14.190
whatever the dynamic content was.

122
00:08:14.190 --> 00:08:15.304
So that's kind of,

123
00:08:15.304 --> 00:08:19.900
that's the way that you would approach
that problem in a completely static world.

124
00:08:19.900 --> 00:08:24.772
You could also, there's nothing
stopping you from building most of your

125
00:08:24.772 --> 00:08:29.488
site as a Gatsby app, and then having
some server driven routes if it was

126
00:08:29.488 --> 00:08:32.950
really highly sensitive
like a stock ticker.

127
00:08:32.950 --> 00:08:35.300
Probably wouldn't make a ton of
sense to be built in Gatsby.

128
00:08:35.300 --> 00:08:39.805
But you could have a component
that's just completely dynamic that

129
00:08:39.805 --> 00:08:42.580
receives the new stock data in real time.

130
00:08:42.580 --> 00:08:47.508
Or if you wanted to have a whole page
dedicated to that, you could just build

131
00:08:47.508 --> 00:08:52.250
a server side rendered page and
is only for the stock picker.

132
00:08:52.250 --> 00:08:57.140
My preference is to try to avoid standing
up servers whenever I don't have to.

133
00:08:57.140 --> 00:09:00.390
So I like the idea of just rendering
it in the client when it's

134
00:09:00.390 --> 00:09:01.290
when it's client only data.

135
00:09:02.650 --> 00:09:04.570
Your mileage may vary,
it's going to depend on use case.

