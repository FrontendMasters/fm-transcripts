WEBVTT

1
00:00:00.280 --> 00:00:03.810
&gt;&gt; Jason Lengstorf: To actually use this,
now that we've installed everything,

2
00:00:03.810 --> 00:00:09.760
we can go back into our hero, and
we're going to do a few things.

3
00:00:09.760 --> 00:00:14.847
First, we're going to import
our background image.

4
00:00:20.963 --> 00:00:22.950
&gt;&gt; Jason Lengstorf: From
a Gatsby background image.

5
00:00:25.670 --> 00:00:30.656
And then, all we have to do here,
is just make it a style background image,

6
00:00:30.656 --> 00:00:32.806
which is pretty sweet, right?

7
00:00:32.806 --> 00:00:37.450
And then we're gonna drop this out
because we're gonna set that differently.

8
00:00:38.630 --> 00:00:43.840
So background image takes a few
props in one of those props is the,

9
00:00:43.840 --> 00:00:46.133
like the fluid image set up.

10
00:00:46.133 --> 00:00:50.029
In order to use that, we've got to get
into, that's why we imported GraphQL and

11
00:00:50.029 --> 00:00:51.310
useStatic query up here.

12
00:00:51.310 --> 00:00:57.370
So we're going to add a query, and
that query that we add is going to be.

13
00:00:59.840 --> 00:01:06.473
Let's pull up the image, and that's going
to be the result of a useStatic Query.

14
00:01:06.473 --> 00:01:08.377
And we use the GraphQL template tag.

15
00:01:11.656 --> 00:01:15.557
&gt;&gt; Jason Lengstorf: So we've got a query,
and then the query that we wanna run is,

16
00:01:15.557 --> 00:01:17.068
I'm gonna alias this.

17
00:01:17.068 --> 00:01:19.532
So this is another thing that's
really cool about GraphQL.

18
00:01:19.532 --> 00:01:22.741
Let me show you out here.

19
00:01:22.741 --> 00:01:26.374
If I'm out here and
I wanna rename this thing, right now,

20
00:01:26.374 --> 00:01:29.133
it comes back as childImageSharp, right?

21
00:01:29.133 --> 00:01:30.480
You can see that here.

22
00:01:30.480 --> 00:01:35.230
But if I wanted to just call this,
like, image, I can add whatever I

23
00:01:35.230 --> 00:01:39.320
want in front of it with a colon, and
it's gonna rename that over here.

24
00:01:39.320 --> 00:01:42.900
So it's just a way to alias your code if
you wanna make it a little clearer what's

25
00:01:42.900 --> 00:01:45.510
happening, and what is being returned.

26
00:01:45.510 --> 00:01:46.890
So that's what I'm doing here.

27
00:01:46.890 --> 00:01:52.140
I'm gonna alias, and I'm gonna make
a request for the actual file.

28
00:01:52.140 --> 00:01:56.220
And because this is hard coded,
I can just tell it what I want.

29
00:01:56.220 --> 00:01:58.420
I don't need to worry about variables or
anything.

30
00:01:58.420 --> 00:02:05.474
So I'm just gonna say I want
the nicole-harrington-mn .jpeg.

31
00:02:08.118 --> 00:02:12.522
&gt;&gt; Jason Lengstorf: And inside of it
I'm gonna set up an alias of sharp for

32
00:02:12.522 --> 00:02:14.232
childImageSharp.

33
00:02:16.054 --> 00:02:17.403
&gt;&gt; Jason Lengstorf: We
want the fluid set and

34
00:02:17.403 --> 00:02:21.533
then we're gonna use another new
concept called the graphQL fragment.

35
00:02:21.533 --> 00:02:24.283
If you've ever used a REST
spread operator in JavaScript,

36
00:02:24.283 --> 00:02:26.620
this is gonna be kind of the same thing.

37
00:02:26.620 --> 00:02:30.572
Gatsby provides a few helpers.

38
00:02:30.572 --> 00:02:36.436
These fragments basically are just,
it's like declaring all of this,

39
00:02:36.436 --> 00:02:42.960
like all together, and instead of making
you do that, we just do it for you.

40
00:02:42.960 --> 00:02:47.844
And so we're going to use with web P,
because on modern browsers using web P is

41
00:02:47.844 --> 00:02:51.695
gonna be an even more compressed and
more performant image.

42
00:02:51.695 --> 00:02:54.959
And normally, that would be a pain,
because you'd have the web P version,

43
00:02:54.959 --> 00:02:58.325
you'd have to write a feature detection so
that you could determine whether or

44
00:02:58.325 --> 00:02:59.761
not the browser supported web P.

45
00:02:59.761 --> 00:03:01.610
We're gonna do all that for
you, it just works.

46
00:03:01.610 --> 00:03:04.750
So you are able to make this query.

47
00:03:04.750 --> 00:03:08.790
And then now that we've got this,
we can take our image background and

48
00:03:08.790 --> 00:03:10.770
just add in the image
background that we want.

49
00:03:10.770 --> 00:03:15.744
So we want this to be,
we'll make it a section, and

50
00:03:15.744 --> 00:03:19.448
then we're gonna pass in the fluid and

51
00:03:19.448 --> 00:03:23.753
that's going to be image.sharp.fluid.

52
00:03:23.753 --> 00:03:29.330
And the tag is like the component we use,
so this is gonna be a section.

53
00:03:29.330 --> 00:03:32.240
We can make this a div,
we can make it whatever we want.

54
00:03:32.240 --> 00:03:34.830
Hero section seems that seems reasonable.

55
00:03:34.830 --> 00:03:37.360
So let's get up here and
go back to the homepage.

56
00:03:40.690 --> 00:03:41.560
And let's see what changed.

57
00:03:44.990 --> 00:03:47.300
So we've got our hero.

58
00:03:47.300 --> 00:03:49.110
We've got the background image.

59
00:03:49.110 --> 00:03:55.044
Let's move over to the network tab and
take a look how big this thing is Is now.

60
00:03:55.044 --> 00:03:59.360
That is 56 kilobytes as
opposed to 3.5 megabytes.

61
00:03:59.360 --> 00:04:02.600
And we made relatively few
changes in the code base.

62
00:04:02.600 --> 00:04:06.070
We definitely didn't do any manual
image manipulation to make that work.

63
00:04:07.220 --> 00:04:09.930
And the really nice thing
about this is again,

64
00:04:09.930 --> 00:04:12.980
we're going to automatically
load the right version.

65
00:04:12.980 --> 00:04:17.510
So like this is the web P version,
if we had a different resolution,

66
00:04:17.510 --> 00:04:21.250
if we were on a different browser,
it would load a jpeg fallback or

67
00:04:21.250 --> 00:04:26.240
it would load a smaller resolution or
whatever was needed.

68
00:04:26.240 --> 00:04:30.589
So that's a really powerful way to not
really give up any control over your

69
00:04:30.589 --> 00:04:34.309
stuff but to just automatically
optimize that performance and

70
00:04:34.309 --> 00:04:36.849
put yourself in a really strong position.

71
00:04:36.849 --> 00:04:41.037
And then the last thing that I wanna show
you is a feature that will happen on

72
00:04:41.037 --> 00:04:42.130
slower browsers.

73
00:04:42.130 --> 00:04:46.280
But that, if we want to force it,
we can do what's called a fadeIn.

74
00:04:46.280 --> 00:04:53.853
And the fadeIn is going to cause that
really nice little blur in functionality.

75
00:04:53.853 --> 00:04:58.479
Where before the image loads, like while
we're waiting for that network request,

76
00:04:58.479 --> 00:05:01.604
we see a blurry version of it,
and as soon as it finishes,

77
00:05:01.604 --> 00:05:05.446
I can simulate that a little bit if
I go to the network tab and throttle,

78
00:05:05.446 --> 00:05:08.210
let's slow 3G, and
I'll move this to the side.

79
00:05:09.770 --> 00:05:11.900
And now I can reload.

80
00:05:13.960 --> 00:05:15.990
And this is really slow 3G.

81
00:05:15.990 --> 00:05:17.250
This will take a little bit.

82
00:05:18.780 --> 00:05:25.100
Once it loads,
we get our page pop in here.

83
00:05:27.398 --> 00:05:27.898
It hurts.

84
00:05:30.510 --> 00:05:31.610
The terrifying thing is like,

85
00:05:31.610 --> 00:05:34.310
this is actually how a lot
of people use the internet.

86
00:05:34.310 --> 00:05:37.720
And it's another reason
to be really cognizant of

87
00:05:37.720 --> 00:05:41.820
how much data we're sending down and
like focusing on performance,

88
00:05:41.820 --> 00:05:46.328
is a nice to have when you've
got a fiber internet connection.

89
00:05:46.328 --> 00:05:50.180
It's a non-negotiable,
when you're on 2G or 3G so

90
00:05:50.180 --> 00:05:54.410
you can see like as that comes through
that, that blurred image shows up.

91
00:05:54.410 --> 00:05:55.540
And doesn't block the render.

92
00:05:55.540 --> 00:06:00.129
And then the image, when it's ready,
refreshes and shows up again.

