WEBVTT

1
00:00:00.000 --> 00:00:04.863
Reactivity in itself is not
something that is that unique,

2
00:00:04.863 --> 00:00:11.296
you've seen this in other frameworks,
but for Solid, it has a special role.

3
00:00:11.296 --> 00:00:14.529
Basically armed with this tool, we can
do a lot more than state management.

4
00:00:14.529 --> 00:00:19.164
I know we've been doing console logs and
you can maybe kind of picture,

5
00:00:19.164 --> 00:00:24.418
you can put some global state in there and
trigger your components to rerender but

6
00:00:24.418 --> 00:00:28.665
where a lot of the uniqueness all
comes in is I asked the question,

7
00:00:28.665 --> 00:00:32.325
what if our renderer could
just be the reactive system?

8
00:00:32.325 --> 00:00:35.127
Like what if we don't
need a virtual DOM or

9
00:00:35.127 --> 00:00:38.982
any other kind of mechanism
to actually update our view?

10
00:00:38.982 --> 00:00:43.974
Rech Harris, from Svelte, once famously
said that frameworks aren't

11
00:00:43.974 --> 00:00:48.973
there to organize your code but
to organize your mind.

12
00:00:48.973 --> 00:00:53.909
That was his saying and that's
actually how I feel about components

13
00:00:53.909 --> 00:00:58.672
in the introduction I mentioned,
that components are kind of this

14
00:00:58.672 --> 00:01:03.534
runtime overhead that doesn't
actually necessarily need to be.

15
00:01:03.534 --> 00:01:08.759
And as I've mentioned before,
reactive libraries have had some

16
00:01:08.759 --> 00:01:14.554
issues in the past, but luckily a lot
has happened in the last decade so,

17
00:01:14.554 --> 00:01:18.452
even if you don't believe
me you don't have to.

18
00:01:18.452 --> 00:01:23.406
We've seen this kind of natural evolution,
first with things like MobX ensuring

19
00:01:23.406 --> 00:01:26.868
predictable execution using
topic graphical sorting.

20
00:01:26.868 --> 00:01:31.826
They ensure that functions run exactly
when you expect them to run and

21
00:01:31.826 --> 00:01:32.944
only run once.

22
00:01:32.944 --> 00:01:36.800
And similarly,
the old system just kind of went crazy.

23
00:01:36.800 --> 00:01:42.075
Like the one we implemented just now, like
you just update stuff, it just runs right

24
00:01:42.075 --> 00:01:46.904
away, there's no batching, no scheduling
but we can learn from what others

25
00:01:46.904 --> 00:01:51.991
have done and add the ability to schedule
when our side effects actually happen.

26
00:01:51.991 --> 00:01:56.866
And finally,
even though we didn't implement this

27
00:01:56.866 --> 00:02:01.627
in our reactive system,
the way we wrote it there,

28
00:02:01.627 --> 00:02:07.968
that effect never goes away and
we don't want to manage all of that.

29
00:02:07.968 --> 00:02:10.927
Classically, you'll find
in a lot of frameworks,

30
00:02:10.927 --> 00:02:14.562
their createEffect actually
returns to dispose function and

31
00:02:14.562 --> 00:02:18.548
you have to actually call dispose
manually if you want to get rid of it.

32
00:02:18.548 --> 00:02:24.331
You don't see it a lot in stuff like MobX
because they tied into the component life

33
00:02:24.331 --> 00:02:29.604
cycle but for us, one of the key
revelations came from a library called SJS

34
00:02:29.604 --> 00:02:34.876
in which in the same way that we
implemented that cleanup in the last step,

35
00:02:34.876 --> 00:02:38.364
it doesn't have to only
clean up dependencies,

36
00:02:38.364 --> 00:02:41.800
it can actually clean up
child nested effects.

37
00:02:41.800 --> 00:02:47.330
So whenever that reruns, we just can
automatically clean any children,

38
00:02:47.330 --> 00:02:52.499
get rid of any nested effects or
computations and that way we get rid of

39
00:02:52.499 --> 00:02:58.207
a lot of the ugly bookkeeping, basically
create a render with reactivity in

40
00:02:58.207 --> 00:03:03.595
mind instead of just trying to apply
reactivity to an existing render.

41
00:03:03.595 --> 00:03:06.919
I'll be talking in a moment about
scheduling here because I think many

42
00:03:06.919 --> 00:03:08.553
people are familiar with React and

43
00:03:08.553 --> 00:03:11.781
I think this will kind of help you
kind of map the model over, right?

44
00:03:11.781 --> 00:03:15.003
Because React has kind of like
four stages of rendering.

45
00:03:15.003 --> 00:03:17.881
And I'm not talking about initial render,

46
00:03:17.881 --> 00:03:21.476
I'm talking about from
the point of view of an update.

47
00:03:21.476 --> 00:03:25.599
You set state initially,
that's the event that comes in you know,

48
00:03:25.599 --> 00:03:30.536
someone clicks a button or does something,
and then it runs the component tree.

49
00:03:30.536 --> 00:03:33.807
It goes, okay, from here down,
I need to rerun the components.

50
00:03:33.807 --> 00:03:38.600
And we've seen this expressed as like
view is a function of state, but

51
00:03:38.600 --> 00:03:42.267
more specifically it's VDOM
is a function of state.

52
00:03:42.267 --> 00:03:49.256
They create a virtual DOM representation
by rerendering all your components and

53
00:03:49.256 --> 00:03:54.394
then they take that tree and
Diff it against another tree and

54
00:03:54.394 --> 00:03:58.505
then apply the little updates that happen,
and

55
00:03:58.505 --> 00:04:04.180
then once it's all done it runs
everyone's favorite function.

56
00:04:04.180 --> 00:04:09.544
Solid's actually fairly
similar in that when the event

57
00:04:09.544 --> 00:04:15.801
happens we call setSignal and
then the pure computation happens,

58
00:04:15.801 --> 00:04:19.376
all the memos or derived values run and

59
00:04:19.376 --> 00:04:23.957
then you as the end user
don't use these often but

60
00:04:23.957 --> 00:04:30.440
our renderer actually uses something
called createRenderEffect,

61
00:04:30.440 --> 00:04:34.910
which is essentially
an effect that's made for

62
00:04:34.910 --> 00:04:41.646
updating the DOM during the rendering,
and then we run createEffect.

63
00:04:45.639 --> 00:04:48.671
This kind of timeline is
actually very analogous.

64
00:04:48.671 --> 00:04:53.471
It's the reason why we can do scheduling,
why we can do concurrent rendering,

65
00:04:53.471 --> 00:04:58.484
why we can do basically everything that
a VDOM can do, it's because the scheduling

66
00:04:58.484 --> 00:05:04.500
is actually almost the same
kind of concept But

67
00:05:04.500 --> 00:05:11.397
I think this is another opportunity to get
into playing around with the code again.

68
00:05:11.397 --> 00:05:17.219
I know we just did that but this is so
much easier to show than to explain so

69
00:05:17.219 --> 00:05:23.448
this time, we're not going to be
creating the reactive system ourselves.

70
00:05:23.448 --> 00:05:25.631
We're going to use Solid's
actual reactive system.

71
00:05:25.631 --> 00:05:30.050
I'm going to go back into the playground,

72
00:05:30.050 --> 00:05:34.467
and this time I'm going
to make a new one and

73
00:05:34.467 --> 00:05:39.774
it's kind of funny to me and
it makes a lot of sense.

74
00:05:39.774 --> 00:05:47.440
We always teach reactivity using
console logs like, Hello World, Hi.

75
00:05:47.440 --> 00:05:52.505
And it's a good place to start as it
really makes the concept easy to see and

76
00:05:52.505 --> 00:05:55.609
we see people doing it for
state updates, but

77
00:05:55.609 --> 00:05:59.632
I want to do something a little
bit more substantial here.

78
00:05:59.632 --> 00:06:04.742
So what I'm going to do is I'm
going to create a signal and

79
00:06:04.742 --> 00:06:09.012
I'm going to import it
this time from Solid Js.

80
00:06:09.012 --> 00:06:15.170
This time it actually being in
the playground is actually important.

81
00:06:15.170 --> 00:06:17.140
Of course the playground is being fun.

82
00:06:17.140 --> 00:06:19.020
Okay, there we go.

83
00:06:19.020 --> 00:06:23.801
And I'm going to just make a variable.

84
00:06:23.801 --> 00:06:29.692
I'm going to use count for, again, because
you're probably tired of counters by now,

85
00:06:29.692 --> 00:06:32.283
but counters are used in these demos for

86
00:06:32.283 --> 00:06:37.407
a reason because they're about the most
simple example you can come up with.

87
00:06:37.407 --> 00:06:41.812
And this time when we create an effect,

88
00:06:41.812 --> 00:06:47.151
what if instead of console
logging something,

89
00:06:47.151 --> 00:06:52.634
we did something a little
bit more substantial?

90
00:06:52.634 --> 00:06:57.262
And by that what I mean is,
let's pretend that I create an h1 element.

91
00:06:57.262 --> 00:07:04.052
I'm going to use the most powerful
JavaScript framework here,

92
00:07:04.052 --> 00:07:08.584
vanilla Js and I'm going to create an h1.

93
00:07:08.584 --> 00:07:12.979
And because our effect can really
do anything I'm just going

94
00:07:12.979 --> 00:07:16.783
to go h1.textcontent and
this is a real DOM node.

95
00:07:16.783 --> 00:07:22.962
I'm going to just set
that text content to,

96
00:07:22.962 --> 00:07:28.139
I don't know, the count is the count

97
00:07:28.139 --> 00:07:32.989
whatever, okay, call our signal.

98
00:07:32.989 --> 00:07:38.342
And I'm going to attach it to the DOM but
because of this environments

99
00:07:38.342 --> 00:07:43.433
always rerunning, I'm actually
going to do a little hack here.

100
00:07:43.433 --> 00:07:47.882
Without using Solid's imports I'm actually
going to clear the body every time

101
00:07:47.882 --> 00:07:49.050
the thing updates.

102
00:07:49.050 --> 00:07:53.361
It's not hugely important but

103
00:07:53.361 --> 00:08:00.322
then we can append our h1 and
document.body and

104
00:08:00.322 --> 00:08:04.819
we see the count is zero, okay?

105
00:08:04.819 --> 00:08:09.307
Of course, this doesn't do very much so
maybe we should

106
00:08:09.307 --> 00:08:14.557
actually update the count to
something else like the count is 1,

107
00:08:14.557 --> 00:08:18.381
but this happens a little bit too fast,
right?

108
00:08:18.381 --> 00:08:21.961
If I refresh this you're going to
be like okay, on the count it's 1.

109
00:08:21.961 --> 00:08:28.228
This is happening immediately so
let's make some more DOM elements.

110
00:08:28.228 --> 00:08:30.844
Let's make a button maybe, so

111
00:08:30.844 --> 00:08:36.592
I'm going to go document.createElement,
button, all right?

112
00:08:36.592 --> 00:08:42.052
And let's set the text for
that button like,

113
00:08:42.052 --> 00:08:48.375
I know, click me and
then let's go button.onclick

114
00:08:48.375 --> 00:08:52.986
equals a function, arrow function.

115
00:08:52.986 --> 00:09:00.628
And I'm going to do setCount
equals count plus one, okay?

116
00:09:00.628 --> 00:09:02.658
And then I'm going to get rid of this one.

117
00:09:02.658 --> 00:09:06.681
And I guess we need to attach our button
to the DOM, so lets add the button.

118
00:09:06.681 --> 00:09:09.128
Okay, sweet.

119
00:09:09.128 --> 00:09:12.717
And if you're getting jQuery vibes here,

120
00:09:12.717 --> 00:09:18.210
that's perfectly fine, but
we have a working counter, right?

121
00:09:18.210 --> 00:09:23.237
All that's happening is every time we
click our button we're just calling

122
00:09:23.237 --> 00:09:28.286
setCount, count plus one and
it's replacing the text in in here, right?

123
00:09:28.286 --> 00:09:33.295
So yeah, using reactivity to update
the DOM is something that is

124
00:09:33.295 --> 00:09:38.232
fairly simple to do,
you don't need a framework or anything.

