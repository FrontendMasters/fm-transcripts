WEBVTT

1
00:00:00.000 --> 00:00:04.022
I wanna emphasize there is
some more power in this,

2
00:00:04.022 --> 00:00:07.584
I was focusing a lot on
the lack of work you do.

3
00:00:07.584 --> 00:00:13.671
But the way we work, we actually do
cleanup, is the best way I can explain it,

4
00:00:13.671 --> 00:00:18.940
and this ensures that only
the current dependencies are tracked.

5
00:00:18.940 --> 00:00:23.899
And this is something that you actually
can't do with the compiler, and

6
00:00:23.899 --> 00:00:27.977
this is why we rely on a runtime
reactive system with Solid.

7
00:00:27.977 --> 00:00:34.583
I think it's just easier to show than
really explain this, so I'm gonna open up,

8
00:00:34.583 --> 00:00:40.347
yet again, one more example and
kind of walk through this a little bit.

9
00:00:43.312 --> 00:00:45.674
Cuz we're still playing with
our first name and last name.

10
00:00:45.674 --> 00:00:50.127
And this time, I've added one more signal,
where we wanna toggle

11
00:00:50.127 --> 00:00:54.511
between showing the first name or
showing the full name, right?

12
00:00:54.511 --> 00:00:58.495
And what I've done is I've
kind of changed our memo now,

13
00:00:58.495 --> 00:01:03.314
so that if you're not showing
the full name, return the first name.

14
00:01:03.314 --> 00:01:08.178
And otherwise,
do the full thing like we're doing before.

15
00:01:08.178 --> 00:01:12.911
And again, we've got our effect,
which now does our display name.

16
00:01:12.911 --> 00:01:17.728
And what I wanna show here is that,
when we create,

17
00:01:17.728 --> 00:01:20.875
it's kind of the same as before.

18
00:01:20.875 --> 00:01:24.250
We're just gonna log our John Smith here.

19
00:01:24.250 --> 00:01:27.654
Similarly, when we set
show full name to false,

20
00:01:27.654 --> 00:01:31.816
we're just gonna see John,
cuz this is gonna rerun again.

21
00:01:31.816 --> 00:01:34.277
It's gonna realize that it's false and
return the first name.

22
00:01:34.277 --> 00:01:38.944
But where things get interesting is,
what happens if you change the last name?

23
00:01:38.944 --> 00:01:41.416
Well, you're only showing the first name.

24
00:01:44.085 --> 00:01:49.758
And for this, actually, you know what,
I'm gonna just put an extra log in here,

25
00:01:49.758 --> 00:01:53.227
just so
that we can actually see what's going on.

26
00:01:53.227 --> 00:01:58.654
We'll call this one
"Create/Update displayName".

27
00:02:01.206 --> 00:02:06.329
So let's look at this again,
Create, Create/Update dsplayName.

28
00:02:06.329 --> 00:02:09.015
My name is John Smith,
set the full name to false.

29
00:02:09.015 --> 00:02:11.848
We obviously have to update the display
name and set the name to John.

30
00:02:11.848 --> 00:02:16.054
But now, look, when we change
the last name, nothing runs.

31
00:02:16.054 --> 00:02:20.154
And the reason for this is,
the last time that this displayName ran,

32
00:02:20.154 --> 00:02:24.616
it only listened to first name, it did
not listen to first name and last name.

33
00:02:24.616 --> 00:02:27.748
So the runtime reactivity
is smart enough to

34
00:02:27.748 --> 00:02:30.891
know that it's not listening to last name.

35
00:02:30.891 --> 00:02:34.246
And you might be like,
does this mean things can get out of sync?

36
00:02:34.246 --> 00:02:39.495
It doesn't though, because it's only
possible for this to rerun again

37
00:02:39.495 --> 00:02:45.876
if this condition around the showFullNName
actually changes, or first name changes.

38
00:02:45.876 --> 00:02:51.565
And the first name changes, we don't care,
we're just gonna run this again and

39
00:02:51.565 --> 00:02:55.763
it's gonna shortcut to here and
show the first name again.

40
00:02:55.763 --> 00:02:59.457
However, if I set it to full name again,
it's gonna rerun the function,

41
00:02:59.457 --> 00:03:02.393
at which point it's gonna grab
the latest value anyways.

42
00:03:02.393 --> 00:03:06.923
And we can see that it did, in fact,
change it to legend behind the scene here.

43
00:03:06.923 --> 00:03:13.517
And at that point, it reruns
the function and updates the legend.

44
00:03:13.517 --> 00:03:16.761
This is an important
behavior to understand,

45
00:03:16.761 --> 00:03:22.178
because if there is a decision point in
your code, it has to be also reactive.

46
00:03:22.178 --> 00:03:27.006
Because if we just went in here and
didn't use a signal to

47
00:03:27.006 --> 00:03:31.856
make the switch,
it's never going to retrigger to go.

48
00:03:31.856 --> 00:03:36.497
So if I just made showFullName or
something like,

49
00:03:36.497 --> 00:03:41.027
if I just made it something like,
I don't know,

50
00:03:41.027 --> 00:03:45.456
let showFullName = true initially,
I think.

51
00:03:45.456 --> 00:03:49.867
And then I get rid of this function, and

52
00:03:49.867 --> 00:03:53.743
then instead of calling a signal,

53
00:03:53.743 --> 00:03:58.705
I just was like, let's do something here.

54
00:03:58.705 --> 00:04:05.787
showFullName = false, showFullName = true.

55
00:04:05.787 --> 00:04:08.387
What you're gonna see is that,

56
00:04:11.119 --> 00:04:17.755
It's not gonna be smart enough,
to be able to determine what has changed.

57
00:04:17.755 --> 00:04:23.007
Essentially, when I go set full
name to false, nothing happens.

58
00:04:23.007 --> 00:04:27.295
Change name, it actually still
tracking the full name, so

59
00:04:27.295 --> 00:04:29.284
it actually reruns again.

60
00:04:29.284 --> 00:04:34.647
At that point, it realizes that it
only needs to show the first name,

61
00:04:34.647 --> 00:04:37.050
and then when I set it to false,

62
00:04:37.050 --> 00:04:41.780
[LAUGH] then it actually is still
only showing the first name.

63
00:04:41.780 --> 00:04:46.571
So I just wanna bring this up front cuz
this is one of those kinda like you

64
00:04:46.571 --> 00:04:48.450
have to be aware of things.

65
00:04:48.450 --> 00:04:53.438
It's incredibly powerful because
it optimizes your code flow, but

66
00:04:53.438 --> 00:04:58.340
it means that you are entering a world
in which things are signals and

67
00:04:58.340 --> 00:05:00.153
things are reactivity.

68
00:05:00.153 --> 00:05:05.088
Reactivity is something
you can lose essentially.

69
00:05:05.088 --> 00:05:08.898
So this is why this is a key concept.

70
00:05:08.898 --> 00:05:14.300
&gt;&gt; The biggest thing is that
all has to be a function call-

71
00:05:14.300 --> 00:05:14.894
&gt;&gt; Yeah,

72
00:05:14.894 --> 00:05:17.735
&gt;&gt; Of signal or whatever in order for

73
00:05:17.735 --> 00:05:21.193
the dependency tracking to be correct.

74
00:05:21.193 --> 00:05:22.611
&gt;&gt; Yeah, it's gonna be one and

75
00:05:22.611 --> 00:05:26.584
the other primitives everything's kind of
derived from this basic language.

76
00:05:26.584 --> 00:05:30.949
You can build that up as much as you want,
but at its core, we have these signals and

77
00:05:30.949 --> 00:05:33.375
we have these tracking
things like effects.

78
00:05:33.375 --> 00:05:37.078
And basically for anything to change,
it has to be within that system.

79
00:05:37.078 --> 00:05:42.370
Reactive libraries were actually
kind of popular in the early 2010s.

80
00:05:42.370 --> 00:05:46.320
And they almost died out
immediately with the dawn of React.

81
00:05:46.320 --> 00:05:48.568
So I wanna point out
this isn't a new idea.

82
00:05:48.568 --> 00:05:52.052
And this is why I'm kinda talking a bit
about the trade-offs to understanding

83
00:05:52.052 --> 00:05:53.703
that, cuz I think it's important.

84
00:05:53.703 --> 00:05:55.512
One of the biggest reasons so,

85
00:05:55.512 --> 00:05:59.487
is that the early reactive libraries
lack predictable execution.

86
00:06:02.073 --> 00:06:04.066
You might in your head
already kind of be picturing,

87
00:06:04.066 --> 00:06:06.858
what if I have a whole bunch of stuff that
depends on a whole bunch of other stuff.

88
00:06:06.858 --> 00:06:13.776
And then I'm ping-ponging it around and
making dependencies or

89
00:06:13.776 --> 00:06:19.070
write other dependencies and
making a huge mess.

90
00:06:19.070 --> 00:06:21.595
And I think this is a fair consideration.

91
00:06:21.595 --> 00:06:23.694
It's why with all JS, for example,

92
00:06:23.694 --> 00:06:26.891
we're very careful about
things like two way binding.

93
00:06:26.891 --> 00:06:31.611
We've learned a lot from React in terms
of things like unidirectional flow and

94
00:06:31.611 --> 00:06:32.620
immutability.

95
00:06:32.620 --> 00:06:37.902
Because adding structure on top
is actually fairly important,

96
00:06:37.902 --> 00:06:42.808
cuz with this amount of power,
things can go pretty crazy.

97
00:06:42.808 --> 00:06:48.618
But the second and really key safeguard
here is that React systems like SOLID or

98
00:06:48.618 --> 00:06:52.052
MobX actually look at
your graph at runtime and

99
00:06:52.052 --> 00:06:56.718
topologically sort the dependencies
in such a way that they can

100
00:06:56.718 --> 00:07:01.408
guarantee that on any change,
every function only runs once.

101
00:07:01.408 --> 00:07:04.850
And for that reason,
you don't have to worry,

102
00:07:04.850 --> 00:07:09.670
unless you're doing stuff purposely,
maybe not purposely, but

103
00:07:09.670 --> 00:07:14.077
trying to push stuff around in
a kind of very chaotic manner.

104
00:07:14.077 --> 00:07:18.331
You can depend on stuff
executing in a certain order.

105
00:07:18.331 --> 00:07:20.488
So that has changed from the early days,
and

106
00:07:20.488 --> 00:07:23.768
I think that's kind of important
to kinda point out at this point.

107
00:07:23.768 --> 00:07:27.141
We'll be covering this a bit later on, but

108
00:07:27.141 --> 00:07:32.015
there is actual some APIs here
that are more advanced to kind of

109
00:07:32.015 --> 00:07:36.906
handle these kinda situations
to avoid things like untrack.

110
00:07:36.906 --> 00:07:42.887
The ability to say, hey, I don't want to
listen to these variables under this scope.

111
00:07:42.887 --> 00:07:47.081
It's kind of the inverse of something
like React's dependency arrays.

112
00:07:47.081 --> 00:07:51.458
In React, you have to always
provide the dependency arrays.

113
00:07:51.458 --> 00:07:55.314
Things like untrack are saying,
don't listen to this.

114
00:07:55.314 --> 00:07:58.689
The default is that things
are kind of memorized and

115
00:07:58.689 --> 00:08:00.972
that they automatically update.

116
00:08:00.972 --> 00:08:02.582
This is how you say don't update.

117
00:08:02.582 --> 00:08:06.826
And batch, I'm mentioning here,
it doesn't come too often,

118
00:08:06.826 --> 00:08:12.425
because internally, everything is batched,
and so it all kind of happens at once.

119
00:08:12.425 --> 00:08:16.690
But sometimes when you're integrating with
third party systems, you wanna apply many

120
00:08:16.690 --> 00:08:20.090
changes at the same time instead of
doing them all independently, and

121
00:08:20.090 --> 00:08:21.779
batch gives us a way of doing that.

