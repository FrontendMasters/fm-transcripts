WEBVTT

1
00:00:00.032 --> 00:00:07.700
That is kind of an overview of what it
looks like to play with a reactive system,

2
00:00:07.700 --> 00:00:12.939
but I think it'd be a lot more
fun if we just built one.

3
00:00:12.939 --> 00:00:16.315
This is one of my favorite things
about it, because with magic,

4
00:00:16.315 --> 00:00:19.890
people kind of call it magic,
it isn't necessarily that magical.

5
00:00:19.890 --> 00:00:22.893
You can build a reactive system
in less than 50 lines of code.

6
00:00:22.893 --> 00:00:26.975
I think it's actually easier to implement
a whole reactive system than implement

7
00:00:26.975 --> 00:00:27.572
a promise.

8
00:00:27.572 --> 00:00:32.967
Like people ask that on interview
questions, how to implement a promise.

9
00:00:32.967 --> 00:00:34.533
We can kind of just go in and

10
00:00:34.533 --> 00:00:39.094
build something very simple ourselves
to kind of appreciate how it works and

11
00:00:39.094 --> 00:00:44.095
kind of demystify the magic, so to speak,
so that's what we're gonna go to next.

12
00:00:44.095 --> 00:00:46.809
We're gonna build a basic
reactive library here.

13
00:00:46.809 --> 00:00:49.758
Now, if you want you can
just follow along with me or

14
00:00:49.758 --> 00:00:51.689
you can code it yourself as we go.

15
00:00:51.689 --> 00:00:56.915
But I've just opened up solid's
playground and playground.solidjs.com and

16
00:00:56.915 --> 00:01:01.851
cleared it, but you can do this in code
sandbox or any kind of code location.

17
00:01:01.851 --> 00:01:07.794
We're just gonna build it quickly, we have
two files that I'm gonna use for this.

18
00:01:07.794 --> 00:01:12.658
I'm gonna have a main file which is
essentially where we're going to test

19
00:01:12.658 --> 00:01:16.895
runner basically our reactive library and
then have reactive,

20
00:01:16.895 --> 00:01:20.360
which is where we're gonna
do our implementation.

21
00:01:20.360 --> 00:01:25.292
So, I guess the first thing we
kind of need to do is we need to

22
00:01:25.292 --> 00:01:29.737
create a signal, and
I'm going to where is it from?

23
00:01:29.737 --> 00:01:32.192
Dot slash reactive.

24
00:01:32.192 --> 00:01:34.933
And we haven't actually created this yet,
but

25
00:01:34.933 --> 00:01:39.251
I'm just kind of preemptively creating
the interface that we want because

26
00:01:39.251 --> 00:01:43.313
we're going to let's say, count set,
count equals create signal.

27
00:01:43.313 --> 00:01:45.181
Let's set it to zero here,

28
00:01:45.181 --> 00:01:50.645
we're just kind of recreating that example
I was kind of playing with earlier.

29
00:01:50.645 --> 00:01:56.466
Let's see if we can get it to at first
just kind of console log account,

30
00:01:56.466 --> 00:01:59.735
and we want this to be, I guess, zero.

31
00:01:59.735 --> 00:02:04.019
And then if we set count to, I don't know,

32
00:02:04.019 --> 00:02:07.827
counting by five for some reason, and

33
00:02:07.827 --> 00:02:13.667
we console log it again,
then we should see five, right?

34
00:02:13.667 --> 00:02:19.633
That's kind of our goal here, so
I'm gonna go into reactive here.

35
00:02:19.633 --> 00:02:25.126
And we're gonna kind of flesh out
how we might create a signal, right?

36
00:02:25.126 --> 00:02:29.425
So go function create the signal and

37
00:02:29.425 --> 00:02:35.022
it's going to take some kind of value,
okay?

38
00:02:37.015 --> 00:02:42.150
And we're actually gonna
export this function so

39
00:02:42.150 --> 00:02:45.458
that it does, and we want it to,

40
00:02:47.209 --> 00:02:51.552
Return an array I think, sorry.

41
00:02:53.795 --> 00:02:54.981
Count is not a function, okay.

42
00:02:54.981 --> 00:02:59.980
So I'm making some progress here,
and our array,

43
00:02:59.980 --> 00:03:05.224
we need the ability to read and
to write essentially.

44
00:03:05.224 --> 00:03:10.326
So, We're gonna implement those functions.

45
00:03:10.326 --> 00:03:16.104
Actually I'm gonna do this right,
don't mind my style too much,

46
00:03:16.104 --> 00:03:21.686
I'm being very kind of functional
programming approach here.

47
00:03:21.686 --> 00:03:26.504
But, To start with,

48
00:03:26.504 --> 00:03:31.399
we're just going to say when we read it,
we just read our value and

49
00:03:31.399 --> 00:03:36.688
when we write it, We get a new value in.

50
00:03:36.688 --> 00:03:38.825
What should I call this?

51
00:03:38.825 --> 00:03:40.859
New value.

52
00:03:40.859 --> 00:03:44.773
And then value equals new value.

53
00:03:46.155 --> 00:03:53.132
Actually I'm gonna turn type
script off for a moment here.

54
00:03:53.132 --> 00:03:57.375
This isn't a lesson on how to do
type script generics at this point.

55
00:03:57.375 --> 00:04:01.684
But essentially,
this is probably where we might start for

56
00:04:01.684 --> 00:04:05.303
looking at how to create
a signal cuz I'm actually

57
00:04:05.303 --> 00:04:09.979
leveraging a little trick in
JavaScript called closures here.

58
00:04:09.979 --> 00:04:13.600
The fact that this is the same variable
that gets returned in the function and

59
00:04:13.600 --> 00:04:16.937
the fact that this gets assigned to
that exact same variable is why this

60
00:04:16.937 --> 00:04:17.802
actually works.

61
00:04:17.802 --> 00:04:22.307
But essentially, we have a read
function that reads a value [LAUGH],

62
00:04:22.307 --> 00:04:25.548
we have a write function
that updates the value,

63
00:04:25.548 --> 00:04:29.517
we return the array and
everything seems to be working now.

64
00:04:29.517 --> 00:04:33.024
And if I look at my console down here,
I have a zero and a five and

65
00:04:33.024 --> 00:04:36.956
just a sanity check, let's make
that a ten, and it's zero and ten.

66
00:04:36.956 --> 00:04:40.877
So, this is where we'd probably start.

67
00:04:40.877 --> 00:04:45.318
But as you can imagine,
this doesn't really do anything.

68
00:04:45.318 --> 00:04:49.753
What we really wanna do is
maybe make our effect and

69
00:04:49.753 --> 00:04:53.672
I'm just gonna kind of
stub this out again.

70
00:04:53.672 --> 00:04:57.860
We want an effect to do
our console log now, so

71
00:04:57.860 --> 00:05:02.059
we want createEffect and
it gets a function.

72
00:05:02.059 --> 00:05:05.040
I'm just gonna use
an arrow function here and

73
00:05:05.040 --> 00:05:08.340
it's going to console log
whatever the count is.

74
00:05:11.187 --> 00:05:16.670
And in this case, the first time it runs,
we want the log 0.

75
00:05:16.670 --> 00:05:21.640
And then after we set at ten, or
five or whatever a number is,

76
00:05:21.640 --> 00:05:25.356
we're hoping that logs are valued, right?

77
00:05:25.356 --> 00:05:27.190
Of course, createEffect doesn't exist.

78
00:05:27.190 --> 00:05:31.963
So, this is where we gotta
do a little bit more work.

79
00:05:31.963 --> 00:05:34.971
So, let's go back into here.

80
00:05:38.267 --> 00:05:40.175
Create effect.

81
00:05:40.175 --> 00:05:43.764
And our effect takes a function, okay.

82
00:05:45.514 --> 00:05:50.666
So to do this,
we actually need to do a couple things.

83
00:05:50.666 --> 00:05:55.524
First thing we need to do is
actually upgrade our signal.

84
00:05:58.874 --> 00:06:03.796
Inside our signal,
we're going to add a subscription.

85
00:06:03.796 --> 00:06:06.936
So, this I'm just gonna
call it subscriptions and

86
00:06:06.936 --> 00:06:11.024
I'm just gonna use a set,
it's probably the easiest way to do it,

87
00:06:11.024 --> 00:06:14.904
we just create a new set that's
gonna hold our subscriptions.

88
00:06:14.904 --> 00:06:17.712
Under the hood,
it's like an event emitter or

89
00:06:17.712 --> 00:06:21.169
a pub sub kind of mechanism
where there's subscribers.

90
00:06:23.496 --> 00:06:28.258
And now, another thing that we're gonna
need to do here is I'm gonna set up

91
00:06:28.258 --> 00:06:32.735
something, I'm gonna call it context,
but it's gonna be a global.

92
00:06:34.365 --> 00:06:35.873
It's gonna be an array.

93
00:06:35.873 --> 00:06:40.959
And this is gonna be important
in a minute because this is how

94
00:06:40.959 --> 00:06:45.958
we actually can keep track
of what's currently running.

95
00:06:45.958 --> 00:06:50.541
As I mentioned before, this is using
the runtime, and this isn't a compiler

96
00:06:50.541 --> 00:06:54.928
anything, it's a runtime mechanism,
there is a bit of a runtime stack.

97
00:06:54.928 --> 00:06:58.872
The trick here is when we read our value,

98
00:06:58.872 --> 00:07:06.301
I'm gonna update this a little bit,
still gonna return our value, right?

99
00:07:06.301 --> 00:07:10.937
But when we read our value, we're gonna
use that context to figure out if

100
00:07:10.937 --> 00:07:15.277
there is something observing it,
let's call it observer, okay?

101
00:07:15.277 --> 00:07:17.808
And we're gonna look at the context.

102
00:07:17.808 --> 00:07:20.641
I'm gonna go and
we're gonna take context.length minus one,

103
00:07:20.641 --> 00:07:22.278
we're gonna look at the top of this.

104
00:07:22.278 --> 00:07:25.771
You can think of context as a stack,
you push things onto it,

105
00:07:25.771 --> 00:07:27.151
pop things off the top.

106
00:07:27.151 --> 00:07:31.462
We're gonna look at this context and
see if there's something there.

107
00:07:31.462 --> 00:07:36.707
And if there is an observer,
then we need to

108
00:07:36.707 --> 00:07:41.674
go subscriptions, add that observer.

109
00:07:44.974 --> 00:07:50.228
Okay, and then let's see here.

110
00:07:50.228 --> 00:07:55.726
On the right side, we're gonna do
a little bit extra work too here.

111
00:07:57.525 --> 00:08:05.433
We're gonna update the value
first like we did before,

112
00:08:05.433 --> 00:08:09.807
but then what we're gonna do is

113
00:08:09.807 --> 00:08:14.854
we're going to kind of iterate over

114
00:08:14.854 --> 00:08:20.084
our observers, so observer const.

115
00:08:20.084 --> 00:08:29.671
Let's see here, Of our subscriptions.

116
00:08:29.671 --> 00:08:30.404
There.

117
00:08:32.080 --> 00:08:37.997
And, We haven't really talked about
what the observer looks like,

118
00:08:37.997 --> 00:08:40.606
we'll get there in a minute,
but we're gonna notify them.

119
00:08:40.606 --> 00:08:44.776
I'm gonna just call it execute for
this sake, but

120
00:08:44.776 --> 00:08:50.142
we're gonna go through and
essentially the process is everyone

121
00:08:50.142 --> 00:08:55.109
that's subscribed to the signal
when it's updated tell it

122
00:08:55.109 --> 00:09:00.105
to rerun its function, so
that's what we're doing here.

123
00:09:00.105 --> 00:09:07.320
And that's actually most of it for
the signal side.

124
00:09:09.313 --> 00:09:16.294
On the effects side, we kind of have to
build out this kind of new structure.

125
00:09:16.294 --> 00:09:19.565
So I'm gonna make a variable here,

126
00:09:19.565 --> 00:09:25.015
I'm gonna call it an effect,
and it's gonna be an object,

127
00:09:25.015 --> 00:09:30.141
and it's gonna implement that
execute function that we

128
00:09:30.141 --> 00:09:36.368
just, Created.

129
00:09:36.368 --> 00:09:40.991
And actually we're going to also run it

130
00:09:40.991 --> 00:09:46.184
immediately or sorry, effect.execute.

131
00:09:46.184 --> 00:09:51.301
So the first time we run our effect,
it's gonna run that function immediately.

132
00:09:53.909 --> 00:09:58.475
And how I'm doing 29 lines of code,
okay, let's see how we're doing here.

133
00:09:59.909 --> 00:10:02.914
Okay, so
what does an execute function look like?

134
00:10:02.914 --> 00:10:07.569
We're gonna iterate on this
probably a couple times, but

135
00:10:07.569 --> 00:10:12.794
the basics of it is we're going
to push ourselves onto the stack.

136
00:10:12.794 --> 00:10:18.577
So we're gonna push our effect onto
the stack essentially, and then,

137
00:10:20.169 --> 00:10:24.419
We are going to run the function, and

138
00:10:24.419 --> 00:10:30.463
then we're going to pop
ourselves off of the stack.

139
00:10:30.463 --> 00:10:34.948
And if you've been watching the console
you might notice this is actually already

140
00:10:34.948 --> 00:10:36.252
working at this point.

141
00:10:36.252 --> 00:10:40.598
So, let's look a bit of
what's going on here, but

142
00:10:40.598 --> 00:10:44.440
essentially this is
the most basic version,

143
00:10:44.440 --> 00:10:48.194
I think we have like
30 lines of code here.

144
00:10:48.194 --> 00:10:53.125
But if we took our example here,

145
00:10:54.799 --> 00:10:59.534
What's happening is we create our signal
and it returns our two functions, right?

146
00:10:59.534 --> 00:11:02.494
And then the very first
thing that happens is

147
00:11:02.494 --> 00:11:06.987
we call this effect function essentially,
we create our effect.

148
00:11:06.987 --> 00:11:13.110
And the effect pushes itself onto
the stack at that point as we saw here,

149
00:11:13.110 --> 00:11:15.980
it pushes itself onto the stack.

150
00:11:15.980 --> 00:11:19.855
And then we get to our console log and
it goes to run and

151
00:11:19.855 --> 00:11:24.720
it goes, actually I have to
call this count function first.

152
00:11:24.720 --> 00:11:31.151
And it calls the count function from
here which is our read function and

153
00:11:31.151 --> 00:11:35.195
it looks at that stack and
sees that effect.

154
00:11:35.195 --> 00:11:39.766
And because it exists, it adds
the effect to its subscription list and

155
00:11:39.766 --> 00:11:43.341
returns to value, and
then the console log finishes.

156
00:11:43.341 --> 00:11:49.580
Then later, we set the new value to ten.

157
00:11:49.580 --> 00:11:53.135
So when we write it to ten,
we update it, and then we go over

158
00:11:53.135 --> 00:11:58.017
that list of subscriptions, which is
just one, and then we recall the effect.

159
00:11:58.017 --> 00:12:02.469
&gt;&gt; Does that mean that this signal
registers itself on first read?

160
00:12:02.469 --> 00:12:05.091
What if we ran write before read?

161
00:12:05.091 --> 00:12:06.419
To word it better,

162
00:12:06.419 --> 00:12:11.493
whatever calls read adds itself to
the subscriptions on the first call?

163
00:12:11.493 --> 00:12:13.650
&gt;&gt; Yeah, I see the question.

164
00:12:13.650 --> 00:12:17.271
The question is,
what if the effect doesn't exist or

165
00:12:17.271 --> 00:12:20.093
nothing's listening at the beginning?

166
00:12:20.093 --> 00:12:24.502
If I understand the question correctly,
in this case, and

167
00:12:24.502 --> 00:12:26.804
then we can test it to find out.

168
00:12:26.804 --> 00:12:29.482
If we set it to two intermediately,

169
00:12:29.482 --> 00:12:34.124
what ends up happening through
this flow is that all we did is we

170
00:12:34.124 --> 00:12:39.061
created the signal, go to read and
then we write it immediately.

171
00:12:39.061 --> 00:12:44.045
And when we write it immediately,
it's gonna set the new value but

172
00:12:44.045 --> 00:12:45.827
there's no observer.

173
00:12:45.827 --> 00:12:48.533
So it doesn't do this for
loop and it just continues, so

174
00:12:48.533 --> 00:12:50.328
it's almost like where we started.

175
00:12:50.328 --> 00:12:54.955
And then when the effect
runs the very first time,

176
00:12:54.955 --> 00:13:02.566
it just happens to read the latest value
which is the already updated value of two.

177
00:13:02.566 --> 00:13:07.362
As you can see, because we're using
functions to do reads here with these long

178
00:13:07.362 --> 00:13:12.231
living effects, there's no stale closures
or any of that kind of thing because

179
00:13:12.231 --> 00:13:16.177
you always just get the latest
value when you call the function.

