WEBVTT

1
00:00:00.000 --> 00:00:01.470
Writing all this code is a lot.

2
00:00:01.470 --> 00:00:06.317
So what we generally do is we go,
wouldn't it be

3
00:00:06.317 --> 00:00:11.300
a bit better if we could just,
use a syntax word?

4
00:00:11.300 --> 00:00:14.395
And you start understanding
why I really like JSX, and

5
00:00:14.395 --> 00:00:16.555
not some of the other templates DSLs.

6
00:00:16.555 --> 00:00:18.967
Because, actually, let's do this.

7
00:00:18.967 --> 00:00:22.890
Because GSX is great,
it's like JavaScript.

8
00:00:22.890 --> 00:00:26.665
You can literally just be like, click me.

9
00:00:26.665 --> 00:00:31.113
And maybe, what else do we wanna do?

10
00:00:31.113 --> 00:00:36.193
We want to add a click handler,
and that click handler could

11
00:00:36.193 --> 00:00:40.982
look something like this,
I'm just gonna steal this.

12
00:00:40.982 --> 00:00:45.936
And if I can comment out all of
this code we were doing before,

13
00:00:45.936 --> 00:00:48.571
maybe I'll delete in a minute.

14
00:00:48.571 --> 00:00:53.442
If we had a compiler that
could just turn this button

15
00:00:53.442 --> 00:00:57.079
into something that looks like this.

16
00:00:57.079 --> 00:01:02.955
We'd have something pretty
powerful that can just literally,

17
00:01:02.955 --> 00:01:05.471
it's still a DOM element.

18
00:01:05.471 --> 00:01:10.519
And similarly, it'd be pretty great if we

19
00:01:10.519 --> 00:01:15.849
could just take this h1 and
this effect, and

20
00:01:15.849 --> 00:01:22.598
just kinda go, okay, well,
I have an h1 and what is it?

21
00:01:22.598 --> 00:01:27.710
The count is {count ()} and
if the compiler could see

22
00:01:27.710 --> 00:01:32.615
that there was a function call,
or property access.

23
00:01:32.615 --> 00:01:34.628
Cuz it always has to be a function call or

24
00:01:34.628 --> 00:01:38.416
a property access cuz we always think
that, then we know it's reactive.

25
00:01:38.416 --> 00:01:41.154
So, if it could just generate some DOM and

26
00:01:41.154 --> 00:01:44.687
maybe whenever it sees that
throws its own effect in.

27
00:01:44.687 --> 00:01:48.700
If we could just do that, and
it could compile to something like this,

28
00:01:48.700 --> 00:01:51.228
then that would be
pretty powerful as well.

29
00:01:51.228 --> 00:01:54.893
And that's exactly what solid does.

30
00:01:54.893 --> 00:02:01.004
If we take, simple vanilla
JavaScript compile from the JSX,

31
00:02:01.004 --> 00:02:06.187
and this one little text node here,
the ones count.

32
00:02:06.187 --> 00:02:08.927
That's the only thing
that needs to update,

33
00:02:08.927 --> 00:02:12.252
because we just wrapped one
effect around it, right.

34
00:02:13.844 --> 00:02:16.867
It's actually very simple compilation.

35
00:02:16.867 --> 00:02:22.904
And, of course,
no one writes code like this, right?

36
00:02:22.904 --> 00:02:28.958
So, if I make a counter,
let's encapsulate this,

37
00:02:28.958 --> 00:02:33.372
let's grab this and kind of put it in.

38
00:02:33.372 --> 00:02:37.384
Maybe we can make this kind of
look like a, put in a function,

39
00:02:37.384 --> 00:02:38.889
we can format it a bit.

40
00:02:38.889 --> 00:02:44.043
And let's return an array,
maybe of our h1 and our button,

41
00:02:44.043 --> 00:02:48.893
and then we could just call
our counter as a function, and

42
00:02:48.893 --> 00:02:52.649
yes, it's very nasty, we just spread it.

43
00:02:52.649 --> 00:02:57.396
So, what we have is essentially
a counter function that you might

44
00:02:57.396 --> 00:02:59.394
think this is a component.

45
00:02:59.394 --> 00:03:02.987
And that would be accurate, but
we're just calling this function once and

46
00:03:02.987 --> 00:03:06.135
just returning these DOM elements and
appending them to the DOM.

47
00:03:06.135 --> 00:03:09.930
Of course, you probably still wouldn't
really write your code like this,

48
00:03:09.930 --> 00:03:11.366
it's a little bit verbose.

49
00:03:11.366 --> 00:03:15.747
So let's take our h1 to kind of inline it,

50
00:03:15.747 --> 00:03:20.387
maybe take our button
here as also inline it.

51
00:03:20.387 --> 00:03:24.607
And gonna get rid of that,
that cleans it up quite a bit.

52
00:03:24.607 --> 00:03:30.946
And, actually, instead of an array,
we can return a fragment,

53
00:03:30.946 --> 00:03:36.712
it's called the JSX,
which is a collection of elements and

54
00:03:36.712 --> 00:03:40.651
get rid of the comma and if all goes well.

55
00:03:43.710 --> 00:03:47.214
We still have a working counter.

56
00:03:47.214 --> 00:03:52.902
And this is starting to look
more familiar to some of you.

57
00:03:52.902 --> 00:03:56.939
We're actually going to
do one more thing is,

58
00:03:56.939 --> 00:04:02.009
the way we're mounting is kind
of a little bit onerous, so

59
00:04:02.009 --> 00:04:07.407
I'm gonna import a (render)
from "solid-js/web";.

60
00:04:07.407 --> 00:04:13.677
And instead of having this at the bottom

61
00:04:13.677 --> 00:04:18.998
we can just go render (counter,

62
00:04:18.998 --> 00:04:22.428
document.body).

63
00:04:22.428 --> 00:04:27.313
And this sort of completes that picture,
format it for style.

64
00:04:27.313 --> 00:04:33.761
And this looks very familiar to anyone
who's used other JavaScript frameworks.

65
00:04:33.761 --> 00:04:38.734
But I really wanna emphasize in,
you might already see it if you've

66
00:04:38.734 --> 00:04:42.847
been falling along,
this counter is nothing special.

67
00:04:42.847 --> 00:04:46.752
It's just a function that got called once.

68
00:04:46.752 --> 00:04:50.835
So if I console log in here and
say {counter ()} yeah,

69
00:04:50.835 --> 00:04:53.399
we're gonna see our counter here.

70
00:04:53.399 --> 00:04:58.721
But no matter how many times I click this
button, that counter wouldn't log in.

71
00:04:58.721 --> 00:05:00.762
Why would it, it's just a function.

72
00:05:00.762 --> 00:05:07.240
And in fact, we can kind of do
whatever we want in here, right?

73
00:05:07.240 --> 00:05:10.949
We can set interval,
okay, let's do something.

74
00:05:10.949 --> 00:05:17.369
Let's take the function from here,
for the click function, and

75
00:05:17.369 --> 00:05:22.739
I'm not even worried about it,
even infinite loops or

76
00:05:22.739 --> 00:05:28.597
anything here because,
this isn't gonna run ever again.

77
00:05:28.597 --> 00:05:32.197
It's just updating on its own,
and I can also click it and

78
00:05:32.197 --> 00:05:33.775
speed it up a little bit.

79
00:05:33.775 --> 00:05:41.547
But essentially, our component is
just a function that runs once.

80
00:05:44.074 --> 00:05:45.293
And that's because.

81
00:05:46.839 --> 00:05:53.189
Our compiled JSX literally just created
that one effect around that count.

82
00:05:53.189 --> 00:05:57.735
So when our count updates,
the only thing that's happening,

83
00:05:57.735 --> 00:06:02.556
is we're running the code to replace
the text content right here.

84
00:06:02.556 --> 00:06:04.754
That's all that's changing.

85
00:06:04.754 --> 00:06:09.402
There's no components that rerun,
there's no nothing.

86
00:06:09.402 --> 00:06:12.975
Can start seeing why something
like this could be very optimal,

87
00:06:12.975 --> 00:06:14.836
from a performance standpoint.

