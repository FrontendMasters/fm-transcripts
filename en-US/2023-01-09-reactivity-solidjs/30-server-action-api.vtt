WEBVTT

1
00:00:00.000 --> 00:00:06.470
I have one last example that I'm gonna
show you that is pretty fitting.

2
00:00:06.470 --> 00:00:11.542
It's Todo MVC one last final time,

3
00:00:11.542 --> 00:00:16.614
but a different type of Todo MVC than

4
00:00:16.614 --> 00:00:22.376
we've seen to date which is pnpm --filter

5
00:00:22.376 --> 00:00:27.680
example-todomvc, and I'm gonna just

6
00:00:27.680 --> 00:00:33.608
run this straight in dev and
build and start.

7
00:00:33.608 --> 00:00:36.087
I'm gonna run this in production mode so
we can just see the whole thing as it is.

8
00:00:36.087 --> 00:00:39.775
What's special about this todomvc?

9
00:00:39.775 --> 00:00:44.713
It's still got a single server out.

10
00:00:44.713 --> 00:00:49.871
But what we've done here,
essentially is, we've created a route

11
00:00:49.871 --> 00:00:55.947
data which is our server data, which gets
the gets our todo's from a database.

12
00:00:55.947 --> 00:01:01.139
Except now we're using our server
action API's to do mutations, and

13
00:01:01.139 --> 00:01:06.244
what this does is we define an action
like an addTodo, removeTodo and

14
00:01:06.244 --> 00:01:11.895
the implementation of those, I've got
them here at the bottom of the file.

15
00:01:11.895 --> 00:01:17.921
They basically call our database and they
use form data to call our database and

16
00:01:17.921 --> 00:01:20.765
then they redirect back to our page.

17
00:01:20.765 --> 00:01:24.252
The redirect probably you're
thinking that's kind of weird,

18
00:01:24.252 --> 00:01:28.199
but it's because we want these to work
even if JavaScript is turned off.

19
00:01:28.199 --> 00:01:32.344
So we can define a bunch
of actions on our page.

20
00:01:32.344 --> 00:01:37.177
Like these are all the todo stuff,
things that we implemented earlier.

21
00:01:37.177 --> 00:01:42.853
And we can essentially
create actions out of these,

22
00:01:42.853 --> 00:01:48.013
and what it will give us
is both the current state

23
00:01:48.013 --> 00:01:53.173
of the form submission
like this addingTodo and

24
00:01:53.173 --> 00:01:58.210
then the ability to
actually submit the form.

25
00:01:58.210 --> 00:02:00.706
It's our same tupple,
it's read-write again.

26
00:02:00.706 --> 00:02:05.665
And what this lets us do is we
could just call the submit method

27
00:02:05.665 --> 00:02:08.785
if we wanted to do like a JSON backend.

28
00:02:08.785 --> 00:02:14.727
But it also exports a .Form which just
gives us our uppercase form component,

29
00:02:14.727 --> 00:02:18.361
which here we're seeing it,
clear the value and

30
00:02:18.361 --> 00:02:23.613
do a little bit of client side
validation before it calls our backend.

31
00:02:23.613 --> 00:02:26.419
So without wiring up any URLs or whatnot,

32
00:02:26.419 --> 00:02:29.556
we can create multiple
forms on the same page.

33
00:02:29.556 --> 00:02:31.675
We have addTodo.Form, toggleAll.Form.

34
00:02:31.675 --> 00:02:36.146
Again, this is classic like
using the input hidden fields.

35
00:02:36.146 --> 00:02:39.182
This is classic form kind of stuff, but

36
00:02:39.182 --> 00:02:44.334
what's really cool about it is that
read state here addingTodo and

37
00:02:44.334 --> 00:02:48.851
removingTodo gives us a bit
of progressive enhancement.

38
00:02:48.851 --> 00:02:49.680
For example.

39
00:02:49.680 --> 00:02:55.610
We iterate over our filtered
list of todos like we were doing earlier,

40
00:02:55.610 --> 00:02:58.688
but now at the bottom, where is it?

41
00:02:58.688 --> 00:03:03.609
We can also iterate over the addingTodo,
which are the ones in the pending state,

42
00:03:03.609 --> 00:03:06.959
and we're just feeding that
form data back into our UI so

43
00:03:06.959 --> 00:03:10.054
we can show stuff in
a pending status essentially.

44
00:03:10.054 --> 00:03:11.741
If the JavaScript turned off,
then who cares?

45
00:03:11.741 --> 00:03:14.860
We don't get this like extra enhancement.

46
00:03:14.860 --> 00:03:19.709
But let's us do optimistic updates and
optimistic UI with progressive enhancement

47
00:03:19.709 --> 00:03:23.396
always part of this nice little
package and let's take a look and

48
00:03:23.396 --> 00:03:24.978
see how that works, okay?

49
00:03:24.978 --> 00:03:29.348
It should look familiar to everyone by
now, but now let's try and learn solid.

50
00:03:29.348 --> 00:03:33.314
We can see, I'm not a CSS wizard here.

51
00:03:33.314 --> 00:03:34.343
You're gonna see like a purple.

52
00:03:34.343 --> 00:03:35.491
Well, it's in that pending state.

53
00:03:35.491 --> 00:03:36.176
I don't know if you caught that.

54
00:03:36.176 --> 00:03:37.173
Let's try that again.

55
00:03:37.173 --> 00:03:38.663
Hello World, right?

56
00:03:38.663 --> 00:03:44.525
This purple state, just kind of
showing like the progressive and

57
00:03:44.525 --> 00:03:49.970
you can see the counts and
everything updating, let's go.

58
00:03:49.970 --> 00:03:50.997
Active.

59
00:03:50.997 --> 00:03:51.969
Completed.

60
00:03:51.969 --> 00:03:53.092
Active.

61
00:03:53.092 --> 00:03:57.733
And this is just a typical
working ToDo example.

62
00:03:57.733 --> 00:04:02.509
But what's really cool about
this example is if I go to

63
00:04:02.509 --> 00:04:06.979
the sources here, and
was it sources or network?

64
00:04:06.979 --> 00:04:12.389
I couldn't remember which one,
I think is sources,

65
00:04:12.389 --> 00:04:16.847
I go command P and
I go disabled JavaScript.

66
00:04:16.847 --> 00:04:18.181
JavaScript is now disabled.

67
00:04:18.181 --> 00:04:21.123
It's no surprising that when I refresh on
the page that the server side rendering

68
00:04:21.123 --> 00:04:21.652
still works.

69
00:04:21.652 --> 00:04:25.220
But what's cool about this
is when I do learn solid,

70
00:04:25.220 --> 00:04:28.232
you're not gonna see that purple anymore.

71
00:04:28.232 --> 00:04:30.608
Saw the page actually refreshing.

72
00:04:30.608 --> 00:04:38.456
But, It's still fully working and
we can propagate errors this way and

73
00:04:38.456 --> 00:04:43.601
redirects and do all our typical actions
even when the JavaScript is turned off.

74
00:04:43.601 --> 00:04:50.968
And what's really cool about this is, it's
using a combination of these RPC calls.

75
00:04:50.968 --> 00:04:55.803
And kind of like the streamlined API so
you can make as it's not like your

76
00:04:55.803 --> 00:05:00.655
typical HTTP kind of where each page
is a location and you have to post.

77
00:05:00.655 --> 00:05:04.453
We've kind of broken that rule, you can
have ten actions on the same page, you can

78
00:05:04.453 --> 00:05:07.662
put your actions in your components
not even in your page component.

79
00:05:07.662 --> 00:05:12.316
And this gives us kind of this freedom to
kind of define the stuff in JavaScript,

80
00:05:12.316 --> 00:05:16.632
the way we're used to when we're
building things like single page apps.

81
00:05:16.632 --> 00:05:20.868
And yet still have this kind of
progressive enhanced experience.

82
00:05:20.868 --> 00:05:26.012
And I think one of the really cool
things about this approach, though,

83
00:05:26.012 --> 00:05:30.984
we're not leveraging it in this demo
at all, is that all actions have

84
00:05:30.984 --> 00:05:36.325
the ability to, let me see an example
of one here, all the, yeah, here.

85
00:05:36.325 --> 00:05:39.527
They also take an option object, so

86
00:05:39.527 --> 00:05:44.135
we could do something like this and
pass an option.

87
00:05:44.135 --> 00:05:47.259
And one of those options
could be invalidate it.

88
00:05:47.259 --> 00:05:53.872
And we have the ability to
say invalidate to this.

89
00:05:53.872 --> 00:05:57.954
So we can say when like by default
when we do an action it tells

90
00:05:57.954 --> 00:06:01.466
all the server data to refresh it,
basically, for

91
00:06:01.466 --> 00:06:06.611
the page it looks at all the route
sections and we don't know what changed,

92
00:06:06.611 --> 00:06:10.964
we cannot treat it like a classic MPA,
like just refresh the data.

93
00:06:10.964 --> 00:06:15.769
Luckily, underneath our server data or
resources that feed into stores so

94
00:06:15.769 --> 00:06:18.832
we get those fine grained
reconciled updates.

95
00:06:18.832 --> 00:06:23.251
But what if we don't wanna reload
all the server data every time?

96
00:06:23.251 --> 00:06:27.657
Well, we kind of took this kind
of progressive approach of remix,

97
00:06:27.657 --> 00:06:29.475
mixed it with React query.

98
00:06:29.475 --> 00:06:32.779
And those keys that I was playing
around with a moment ago when I was

99
00:06:32.779 --> 00:06:36.524
doing the route data fetching whereas
like setting the key to the source.

100
00:06:36.524 --> 00:06:41.320
Well, they follow a very similar key
mechanism to React query where you can use

101
00:06:41.320 --> 00:06:45.114
arrays and go like user, user ID and
you can do invalidation.

102
00:06:45.114 --> 00:06:49.829
And then, it will be smart enough to
only refetch the data specifically

103
00:06:49.829 --> 00:06:51.489
related to that action.

104
00:06:51.489 --> 00:06:55.287
So we kind of decoupled the full
page reload experience on top of

105
00:06:55.287 --> 00:06:57.302
doing the fine grained updates.

106
00:06:57.302 --> 00:07:00.671
So we think there's a really
powerful pattern here for

107
00:07:00.671 --> 00:07:03.171
doing both fetching and data mutation.

108
00:07:03.171 --> 00:07:07.431
Because it lets you build apps in kind
of a classic way in the sense you get

109
00:07:07.431 --> 00:07:10.910
the progressive enhancement and
you're using the HTML,

110
00:07:10.910 --> 00:07:12.904
capital form, capital anchor.

111
00:07:12.904 --> 00:07:17.636
But you also get to kind of not get
away from modern conveniences like

112
00:07:17.636 --> 00:07:19.137
type script safety.

113
00:07:19.137 --> 00:07:23.388
Run those forms through Zod,
and kind of mix this together

114
00:07:23.388 --> 00:07:27.304
into an experience that we
think is really powerful.

115
00:07:27.304 --> 00:07:29.202
And that's Solid start today.

116
00:07:29.202 --> 00:07:30.303
It's in beta.

117
00:07:30.303 --> 00:07:33.232
We're still ironing out bugs.

118
00:07:33.232 --> 00:07:36.048
You've seen a couple today probably.

119
00:07:36.048 --> 00:07:41.565
But well, it takes a little bit of
time Solid JS has been 1.0, it's been

120
00:07:41.565 --> 00:07:47.540
in production for the last year now, but
Solid start is still a very new project.

121
00:07:47.540 --> 00:07:50.089
We're gonna continue to
make improvements on it.

122
00:07:50.089 --> 00:07:54.716
And some of those which would be
a great demo for another time but

123
00:07:54.716 --> 00:07:58.120
I'll link the resources
is we have support for

124
00:07:58.120 --> 00:08:01.978
partial hydration islands and
server components.

125
00:08:01.978 --> 00:08:06.560
In fact, the course website
that you've been using this

126
00:08:06.560 --> 00:08:11.047
today is actually all built
with server components, so

127
00:08:11.047 --> 00:08:16.024
this is the future for Solid start and
for SolidJS in general.

