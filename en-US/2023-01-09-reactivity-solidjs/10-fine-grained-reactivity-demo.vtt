WEBVTT

1
00:00:00.000 --> 00:00:01.800
We can kinda take this a bit further,
right?

2
00:00:01.800 --> 00:00:04.027
Like, this isn't a real app,
it's a counter.

3
00:00:04.027 --> 00:00:08.358
So let's make an app component,
let's say, and

4
00:00:08.358 --> 00:00:13.117
our app component is going
to return a fragment again.

5
00:00:15.096 --> 00:00:17.655
And it's going to have
some counters in it.

6
00:00:17.655 --> 00:00:22.928
And this is kind of an introduction
to components here,

7
00:00:22.928 --> 00:00:28.775
because we're using Capital
case syntax to run a component.

8
00:00:28.775 --> 00:00:32.596
So this is why we named
them Pascal case here,

9
00:00:32.596 --> 00:00:37.223
because any thing in JSX that
is pascal case does a tag,

10
00:00:37.223 --> 00:00:41.466
will be a component rather
than a native element.

11
00:00:41.466 --> 00:00:46.179
So for the lowercase ones, you can only
use what's available in the environment

12
00:00:46.179 --> 00:00:48.895
like button or h1,
these are HTML elements.

13
00:00:48.895 --> 00:00:53.303
But by using the Pascal's case you
can run any arbitrary function and

14
00:00:53.303 --> 00:00:55.508
have it act as our component here.

15
00:00:55.508 --> 00:00:58.220
So, what we're gonna do is,

16
00:00:58.220 --> 00:01:03.429
instead of rendering counter,
we are gonna render app.

17
00:01:03.429 --> 00:01:06.807
And app has two counters
that are counting up, but

18
00:01:06.807 --> 00:01:11.084
I'm gonna get rid of the set interval,
cuz this is just noise.

19
00:01:11.084 --> 00:01:16.014
And as you can see,
we have counters, two console logs,

20
00:01:16.014 --> 00:01:20.639
and hopefully if you're
following me to this point,

21
00:01:20.639 --> 00:01:27.151
if you can click each one, they each
have their own state that they manage.

22
00:01:27.151 --> 00:01:31.424
And when you update them, they are
literally just changing these two effects,

23
00:01:31.424 --> 00:01:32.650
nothing else reruns.

24
00:01:32.650 --> 00:01:36.606
There's only the original
two counter console logs.

25
00:01:36.606 --> 00:01:40.005
And this is pretty powerful
because it's very simple.

26
00:01:40.005 --> 00:01:41.497
You saw how we got here,

27
00:01:41.497 --> 00:01:46.501
because we literally just without a
component system had our own update model.

28
00:01:46.501 --> 00:01:51.799
But it has a lot of implications, because
if you think that this is just a function,

29
00:01:51.799 --> 00:01:55.811
nothing fancy, and
this has nothing to do with that function,

30
00:01:55.811 --> 00:02:00.624
you can do stuff like this,
like pull it out And

31
00:02:00.624 --> 00:02:05.588
if you know JavaScript well, if you have a
variable that's referenced by functioning

32
00:02:05.588 --> 00:02:08.727
and multiple instances,
they just share that state.

33
00:02:08.727 --> 00:02:16.066
So now we have global state management,
it's the same thing.

34
00:02:16.066 --> 00:02:22.800
All that happens is when we update the
count, it updates these two text nodes,

35
00:02:22.800 --> 00:02:26.791
nothing else, no rerunning, nothing else.

36
00:02:26.791 --> 00:02:31.240
And global state management
is pretty sweet.

37
00:02:31.240 --> 00:02:36.925
We often actually have
a kind of more scope.

38
00:02:36.925 --> 00:02:44.144
So what we can do, is we can bring our
signal now, and let's put in an app.

39
00:02:46.306 --> 00:02:49.640
That's fine, counters complaining
that count is not defined.

40
00:02:49.640 --> 00:02:55.353
And that's because it's going
to get something called props,

41
00:02:55.353 --> 00:02:59.794
and props is the object that
gets passed in with all

42
00:02:59.794 --> 00:03:04.362
the properties that you
pass it on your component.

43
00:03:04.362 --> 00:03:09.951
And for art's sake, what are we gonna do?

44
00:03:09.951 --> 00:03:14.408
You can pass props a few different ways,
but

45
00:03:14.408 --> 00:03:17.911
I'm going to, sorry, counter.

46
00:03:17.911 --> 00:03:22.374
We're going to pass the count actually,

47
00:03:22.374 --> 00:03:27.984
as the children props, but
I'm gonna go like this,

48
00:03:27.984 --> 00:03:31.311
and pass it between like this.

49
00:03:31.311 --> 00:03:39.790
And if we do that, we also need
a way to handle updating that count.

50
00:03:39.790 --> 00:03:45.102
So, what I'm going to do here, is we
can call this really whatever we want,

51
00:03:45.102 --> 00:03:48.841
our convention is generally
a put an on in front of it.

52
00:03:48.841 --> 00:03:52.627
This suggests like it's an event, but,

53
00:03:52.627 --> 00:03:56.853
I mean,
it can really be anything let's say,

54
00:04:00.929 --> 00:04:07.949
Yeah, I'm just gonna use on click,
cuz I'm kinda being lazy about this, but

55
00:04:12.928 --> 00:04:17.822
We can just do on click and what I'm going
to do here, is I'm going to take the set

56
00:04:17.822 --> 00:04:22.227
count that we have from above here,
and I'm going to stick one in each.

57
00:04:22.227 --> 00:04:27.272
And to differentiate it a bit, I'm gonna
say the top counter increments by 1,

58
00:04:27.272 --> 00:04:29.922
and the bottom counter increments by 2.

59
00:04:29.922 --> 00:04:32.747
And actually, to differentiate these,

60
00:04:32.747 --> 00:04:37.762
I'm gonna make the second counter
actually be 2 times the count as well.

61
00:04:37.762 --> 00:04:39.085
So one updates by 2 and

62
00:04:39.085 --> 00:04:42.782
2 times to count the other ones
kind of like original counter.

63
00:04:42.782 --> 00:04:48.182
And what we need to do here, is now,
because we don't have count anymore,

64
00:04:48.182 --> 00:04:53.668
we need to reference it, and the way
we do that, if you do props.children,

65
00:04:53.668 --> 00:04:58.212
for ones that are passed in between,
and then for name things,

66
00:04:58.212 --> 00:05:02.551
we can just reference them directly,
so props.onClick.

67
00:05:04.590 --> 00:05:09.588
And for emphasis, unmute this count,

68
00:05:09.588 --> 00:05:13.834
I'm going to go console log app.

69
00:05:13.834 --> 00:05:18.582
But at this point, I'm thinking it might
be unsurprising what happens here.

70
00:05:18.582 --> 00:05:23.969
So we have app, and
we have our two counters.

71
00:05:23.969 --> 00:05:26.209
Let's try clicking the first button.

72
00:05:27.829 --> 00:05:29.663
Well, they're sharing state still,

73
00:05:29.663 --> 00:05:33.172
because the state is being passed in
from the app component that's above.

74
00:05:33.172 --> 00:05:35.969
But what you notice is
the first counter shows 1,

75
00:05:35.969 --> 00:05:40.239
and the second one shows 2 because it's
2 times a count like we set up here.

76
00:05:40.239 --> 00:05:42.389
Actually, let's format this so
we can see it a bit better.

77
00:05:42.389 --> 00:05:44.358
Yeah.

78
00:05:44.358 --> 00:05:50.530
But nothing console logs, app doesn't
console log, neither counter console logs.

79
00:05:50.530 --> 00:05:56.266
In fact, When we click the second button,

80
00:05:56.266 --> 00:05:59.397
and it adds by 2,
we see the same thing as well.

81
00:05:59.397 --> 00:06:04.343
Basically, nothing needs to rerun,
except for those same two effects

82
00:06:04.343 --> 00:06:09.053
in the same two text nodes that
we've had right from the beginning.

83
00:06:09.053 --> 00:06:11.679
So this is important to kind of show,

84
00:06:11.679 --> 00:06:17.700
because it's important to understand that
no matter how many components you have,

85
00:06:17.700 --> 00:06:21.795
the performance scales,
it doesn't actually matter.

86
00:06:21.795 --> 00:06:27.592
It doesn't scale on code size, or number
components, it scales on interactivity.

87
00:06:27.592 --> 00:06:30.285
And this is very powerful for performance,

88
00:06:30.285 --> 00:06:35.102
but you might still be looking at this and
go, okay, I'm missing something.

89
00:06:35.102 --> 00:06:40.158
How is it possible that I can have
expressions like count times 2,

90
00:06:40.158 --> 00:06:46.404
and stuff from the Parent Talk to things
in the child without things re rendering.

91
00:06:46.404 --> 00:06:49.416
And there is a little bit
of a trick with that, but

92
00:06:49.416 --> 00:06:53.767
it's not too different than what
we've been seeing so far actually.

93
00:06:55.889 --> 00:07:01.757
And that is most of the work,
the components self is just a function.

94
00:07:01.757 --> 00:07:04.015
It's technically a little bit
more than a function actually.

95
00:07:04.015 --> 00:07:07.668
It's a function that's called
with on track, because,

96
00:07:07.668 --> 00:07:11.692
we wanna make sure that if people
access reactivity top level and

97
00:07:11.692 --> 00:07:15.508
the component is not gonna
cause some parent retriggering.

98
00:07:15.508 --> 00:07:17.668
So that this is a use case for on track.

99
00:07:17.668 --> 00:07:22.068
But for the most part, the actual power
the compilation is how we manage props.

100
00:07:22.068 --> 00:07:26.145
We actually look at the props the same
way we looked at the other JSX and

101
00:07:26.145 --> 00:07:27.634
decide how to handle it.

102
00:07:27.634 --> 00:07:30.419
So in the case of an example like this,

103
00:07:30.419 --> 00:07:34.860
if we see that there's a function call or
a property access,

104
00:07:34.860 --> 00:07:40.364
we wrap it in a getter, which we saw
earlier on when I was comparing to view.

105
00:07:40.364 --> 00:07:41.471
So this is just lazy.

106
00:07:41.471 --> 00:07:46.328
It doesn't run this function until
you call props.name for example, or

107
00:07:46.328 --> 00:07:47.672
props.children.

108
00:07:47.672 --> 00:07:52.099
And then if it's a static value,
like a string or a number or something,

109
00:07:52.099 --> 00:07:55.890
It just inlines it right away,
it's just part of the object.

110
00:07:55.890 --> 00:07:59.482
Like in this case this change
handler it's not a function call,

111
00:07:59.482 --> 00:08:01.155
but a function declaration.

112
00:08:01.155 --> 00:08:03.675
We can pass it straight through.

113
00:08:03.675 --> 00:08:08.922
And understanding this,
it means that inside our components,

114
00:08:08.922 --> 00:08:14.461
we can treat everything as props.blank,
whether it's a signal or

115
00:08:14.461 --> 00:08:18.658
a wrapped expression, or
whatever static value.

116
00:08:18.658 --> 00:08:21.598
The interface is the same from
the inside and the outside,

117
00:08:21.598 --> 00:08:25.630
as long as you treat it like you're
passing a value, you call those functions.

118
00:08:25.630 --> 00:08:30.782
The compiler can see that and
create the correct getters, and

119
00:08:30.782 --> 00:08:36.341
in so, what we've done is effectively
flattened the whole tree.

120
00:08:36.341 --> 00:08:39.844
The whole component tree
doesn't matter anymore,

121
00:08:39.844 --> 00:08:44.537
because the only thing that happens is,
when we get to that text node,

122
00:08:44.537 --> 00:08:49.392
way down, where we're updating that text,
it calls prop.children,

123
00:08:49.392 --> 00:08:53.320
which is this getter,
which calls the count internally.

124
00:08:53.320 --> 00:08:57.035
So we just call all the functions
inside the effects and

125
00:08:57.035 --> 00:08:59.066
nothing else needs to rerun.

126
00:08:59.066 --> 00:09:04.549
So that's basically
the power of this approach.

127
00:09:04.549 --> 00:09:10.564
We kinda forget about the components, and
just focus on updating only what changes.

128
00:09:14.883 --> 00:09:19.741
And I'm gonna take this
a little bit further,

129
00:09:19.741 --> 00:09:23.361
hopefully everyone can see this.

130
00:09:23.361 --> 00:09:26.530
The idea here is,
what if all rendering was an effect?

131
00:09:26.530 --> 00:09:29.342
And some frameworks they like to
tell you that all rendering is pure,

132
00:09:29.342 --> 00:09:31.827
that it's like something that
doesn't have side effects.

133
00:09:31.827 --> 00:09:34.879
And the challenge there is
when you do have side effects,

134
00:09:34.879 --> 00:09:37.740
you suddenly have to kinda
break through that model,

135
00:09:37.740 --> 00:09:41.953
you're kind of like, there's different
rules here, you have to follow.

136
00:09:41.953 --> 00:09:46.705
But with Souls approach,
you can kind of view

137
00:09:46.705 --> 00:09:51.346
the whole tree as a bunch
of nested effects.

138
00:09:51.346 --> 00:09:56.353
So, if you have an effect, and
under that affect, you create signal a,

139
00:09:56.353 --> 00:10:01.688
but then you only read it under the second
effect, and that second effect also

140
00:10:01.688 --> 00:10:07.295
creates its own signals, that only are
read under effect three, four and five.

141
00:10:07.295 --> 00:10:12.469
You're actually isolating it,
cuz as I showed earlier when we create our

142
00:10:12.469 --> 00:10:18.071
own system, the effects execution is just
a stack that we push on to and pop off.

143
00:10:18.071 --> 00:10:20.330
So it's only the nearest
effect that matters.

144
00:10:20.330 --> 00:10:25.752
So if you update b, for
example, or d, let's say,

145
00:10:25.752 --> 00:10:30.329
then it only needs to
rerun that little bit.

146
00:10:30.329 --> 00:10:35.139
If you update a, well, yeah,
you have to do a little bit more work.

147
00:10:35.139 --> 00:10:39.707
But you have to understand
that in real app,

148
00:10:39.707 --> 00:10:44.840
code like this might
look something like this.

149
00:10:44.840 --> 00:10:47.444
So our d or b might be in effect,

150
00:10:47.444 --> 00:10:52.870
that say update the document title,
and what's your updates?

151
00:10:52.870 --> 00:10:56.802
Some text in a paragraph element,
and a in our example,

152
00:10:56.802 --> 00:10:59.909
is inside a conditional, like a turn area.

153
00:10:59.909 --> 00:11:04.753
So you're not gonna update a very
often unless you're actually changing

154
00:11:04.753 --> 00:11:09.531
a condition, like deciding whether
the show, that whole subsection.

155
00:11:09.531 --> 00:11:15.651
So, what ends up happening, ultimately,
is our branching points, the places

156
00:11:15.651 --> 00:11:21.234
that change are based on the logic of
your code, not based on components.

157
00:11:21.234 --> 00:11:24.719
So it doesn't matter how many
components we put in the middle,

158
00:11:24.719 --> 00:11:29.083
between these points, it scales on,
like, decisions, using conditions.

