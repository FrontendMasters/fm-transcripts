WEBVTT

1
00:00:00.000 --> 00:00:00.788
Thanks for joining me today.

2
00:00:00.788 --> 00:00:04.997
We'll be looking at the solid JS UI
framework, the next several hours will be

3
00:00:04.997 --> 00:00:08.690
a workshop that will take you from
the fundamentals of reactivity,

4
00:00:08.690 --> 00:00:11.179
all the way to building
solid applications.

5
00:00:11.179 --> 00:00:16.327
While this is Intended to serve as
an introduction, we'll be getting in depth

6
00:00:16.327 --> 00:00:21.787
with a lot of the key technologies that by
the time you're done, you'll have a firm

7
00:00:21.787 --> 00:00:26.857
grasp on, not just solid, but pretty
much any UI framework you'd be using.

8
00:00:26.857 --> 00:00:27.604
Who am I?

9
00:00:27.604 --> 00:00:30.876
My name's Ryan Carniato,
I'm the creator of solid JS.

10
00:00:30.876 --> 00:00:34.871
I've been in web development now,
I don't know, 25 years.

11
00:00:34.871 --> 00:00:38.496
Started in the 90s making websites for
my band.

12
00:00:38.496 --> 00:00:42.516
I played in a punk rock band that
actually happened to be called Mr. Solid.

13
00:00:42.516 --> 00:00:44.487
That's where the framework
got its name from.

14
00:00:44.487 --> 00:00:51.146
I actually even have the tattoo here to
prove it, this is solid and Old English.

15
00:00:51.146 --> 00:00:56.128
But I've been doing web dev for a long
time, I have lived through table soup and

16
00:00:56.128 --> 00:01:00.055
ASP.net and rails and jQuery,
before finding my passion for

17
00:01:00.055 --> 00:01:02.040
modern frontend frameworks.

18
00:01:02.040 --> 00:01:06.207
Through the 2010,
I worked almost a decade at a startup,

19
00:01:06.207 --> 00:01:08.703
which is where I developed solid js.

20
00:01:08.703 --> 00:01:13.334
I also afterwards worked at eBay for
a couple years,

21
00:01:13.334 --> 00:01:20.504
working on their framework, Marco, and
now I'm doing open source at Netlify.

22
00:01:20.504 --> 00:01:21.442
So what is Solid?

23
00:01:21.442 --> 00:01:26.247
For many of you, this will be
the first time seeing Solid JS.

24
00:01:26.247 --> 00:01:31.484
So I'd say, it's a declarative UI
library for building user interfaces.

25
00:01:31.484 --> 00:01:35.237
If that sounds familiar,
it should, that's react's tagline.

26
00:01:35.237 --> 00:01:39.404
But It is accurate for
many libraries and frameworks.

27
00:01:39.404 --> 00:01:42.053
Solid is a JavaScript framework or
library,

28
00:01:42.053 --> 00:01:46.793
depending on how you make the distinction,
that similar to things like React and

29
00:01:46.793 --> 00:01:51.202
view, and Angular and spelt, and
has a lot of the same responsibilities.

30
00:01:51.202 --> 00:01:55.561
Ultimately, to allow you
to build user interfaces.

31
00:01:55.561 --> 00:02:00.487
But these days that includes a lot of
platforms, more than just the web.

32
00:02:00.487 --> 00:02:06.002
With custom rendering, support for
things like WebGL and native.

33
00:02:06.002 --> 00:02:09.143
So, these are all things that
you can do with Solid JS.

34
00:02:12.492 --> 00:02:15.938
But, I mean,
let's get to the elephant in the room,

35
00:02:15.938 --> 00:02:19.398
why would you look at
another JavaScript framework?

36
00:02:19.398 --> 00:02:21.523
We have enough of those, right?

37
00:02:21.523 --> 00:02:25.125
I'm gonna give a little bit of history.

38
00:02:25.125 --> 00:02:29.387
Well, Solid JS has started to
kind of catch on recently.

39
00:02:29.387 --> 00:02:35.633
I started this way back, I'd say 2016,
my first commit in a private repo,

40
00:02:35.633 --> 00:02:39.751
and I didn't actually
open source until 2018.

41
00:02:39.751 --> 00:02:42.669
I was building it and I thought,
maybe use it in my company.

42
00:02:42.669 --> 00:02:47.172
And I opened Solid JS mostly just because
I wanted to enter some benchmarks.

43
00:02:47.172 --> 00:02:51.323
See, my goal was kind of to bring
back fine grained reactivity.

44
00:02:51.323 --> 00:02:54.311
And if you haven't heard it, there's some
older frameworks that use this approach.

45
00:02:54.311 --> 00:02:59.317
Naco JS from the early 2010s was
kind of like primary inspiration.

46
00:02:59.317 --> 00:03:02.382
And as a Naco developer,
I loved the patterns they had.

47
00:03:02.382 --> 00:03:05.034
They had these composeble
primitives that you could reuse and

48
00:03:05.034 --> 00:03:06.312
build the interfaces out of.

49
00:03:06.312 --> 00:03:09.855
And I thought it was really powerful,
but the industry kind of moved on,

50
00:03:09.855 --> 00:03:11.668
especially with things like React.

51
00:03:11.668 --> 00:03:16.292
And there was a lot of performance claims
around things like the virtual DOM, and

52
00:03:16.292 --> 00:03:18.402
I was a little bit confused by these.

53
00:03:18.402 --> 00:03:21.584
So, things like the DOM was slow and
whatnot.

54
00:03:21.584 --> 00:03:24.000
So I was like, let's re examine this.

55
00:03:24.000 --> 00:03:27.466
So I kind of thought, maybe we just need
to look at this a little differently.

56
00:03:27.466 --> 00:03:30.362
Maybe attack the problem
a little bit different.

57
00:03:30.362 --> 00:03:32.362
And so I attacked and attacked, and

58
00:03:32.362 --> 00:03:37.244
by mid 2018 Solid had taught pretty much
every JavaScript benchmark I could find.

59
00:03:37.244 --> 00:03:42.444
JS framework benchmark, Js repaint
benchmark, UI bench, Jeremy asked him to

60
00:03:42.444 --> 00:03:47.813
sit circles, demo, isomorphic benchmark,
basically anything it could find.

61
00:03:47.813 --> 00:03:53.018
And honestly, that's really not
enough to choose a new framework,

62
00:03:53.018 --> 00:03:56.171
because, sure, it looks good on paper.

63
00:03:56.171 --> 00:04:02.132
Really, solid true in is how it changes
your perspective on JavaScript frameworks,

64
00:04:02.132 --> 00:04:05.382
and it compasses this
through two main ideas.

65
00:04:05.382 --> 00:04:09.107
First of all is reactivity,
reactivity is very core to this.

66
00:04:09.107 --> 00:04:13.650
Reactivity is just a way of expressing
systems behaviors on a specific

67
00:04:13.650 --> 00:04:18.587
implementation by treating or rendering
as kind of a reactive side effect.

68
00:04:18.587 --> 00:04:22.491
Means we aren't tied to any specific
platform, as I mentioned before,

69
00:04:22.491 --> 00:04:26.591
things like WebGL or, you can even put
a VDOM in reactivity if you wanted to.

70
00:04:26.591 --> 00:04:30.303
And you can apply it to
all sorts of problems,

71
00:04:30.303 --> 00:04:34.125
cuz what you get really
is a language of sorts.

72
00:04:34.125 --> 00:04:37.018
Reactivity is really a language for
user interfaces.

73
00:04:37.018 --> 00:04:41.725
And with Solid, that means we ship
a powerful set of primitives that you

74
00:04:41.725 --> 00:04:45.109
can use to kind of construct
your user interfaces.

75
00:04:45.109 --> 00:04:49.304
Solid js reactivity and kind of approach
to using things like JSX has actually

76
00:04:49.304 --> 00:04:53.953
inspired other projects like mitosis from
builder IO, which lets you actually write

77
00:04:53.953 --> 00:04:57.589
in a single language and
then output components in any framework.

78
00:04:57.589 --> 00:05:00.313
So, this is a big foundation for us.

79
00:05:00.313 --> 00:05:06.744
The other side is this departure
from the typical component model.

80
00:05:06.744 --> 00:05:08.954
And I don't mean from
an authoring perspective,

81
00:05:08.954 --> 00:05:12.281
it's that modern front-end web
development has been about components.

82
00:05:12.281 --> 00:05:16.928
Class components, function components,
option components, web components, and for

83
00:05:16.928 --> 00:05:20.363
good reason, they give us this
kind of module and capsule ration.

84
00:05:20.363 --> 00:05:22.556
These building blocks we
use to build our apps.

85
00:05:22.556 --> 00:05:24.347
And this is a good thing.

86
00:05:24.347 --> 00:05:30.226
However, almost every JavaScript
framework ties their runtime change

87
00:05:30.226 --> 00:05:35.440
models to this, the way things update or
tie to the components.

88
00:05:35.440 --> 00:05:38.363
And Solid kinda lets us
rethink about that model.

89
00:05:38.363 --> 00:05:42.828
We still have components as a pattern for
organizing our code, but

90
00:05:42.828 --> 00:05:48.186
we don't have to worry about it from
a performance or mechanical perspective.

91
00:05:48.186 --> 00:05:51.180
It's not about rear-ending and
memorization,

92
00:05:51.180 --> 00:05:53.037
you kind of forget about that.

93
00:05:55.687 --> 00:05:57.683
So, what are we covering today?

94
00:05:57.683 --> 00:06:00.449
Today we're going to be
talking about Solid JS.

95
00:06:00.449 --> 00:06:03.405
But as I mentioned, I'd really like to
promote a deeper understanding of these

96
00:06:03.405 --> 00:06:04.297
kind of core concepts.

97
00:06:04.297 --> 00:06:07.627
So, we're gonna start with introduction,
which we're doing now, but

98
00:06:07.627 --> 00:06:09.786
then we're gonna really
dig into reactivity.

99
00:06:09.786 --> 00:06:13.609
And we're gonna understand it, look at
how solid renders using reactivity.

100
00:06:13.609 --> 00:06:17.906
And then a little bit later we're
gonna look at the fundamental

101
00:06:17.906 --> 00:06:21.971
primitives behind Sol and
how we go towards building apps.

102
00:06:21.971 --> 00:06:25.865
And get into some more advanced topics
towards the end of our session,

103
00:06:25.865 --> 00:06:29.176
looking at stores and routing and
how to handle async data.

104
00:06:29.176 --> 00:06:32.005
In terms of tools, basically, for

105
00:06:32.005 --> 00:06:36.356
the most part I'm gonna be
using a lot of online tools.

106
00:06:36.356 --> 00:06:40.269
Stuff like, CodeSandbox and
Stackblitz, for the examples.

107
00:06:40.269 --> 00:06:44.975
You can also have CLI commands so you can
do it in VS code, if that's what you're

108
00:06:44.975 --> 00:06:49.334
comfortable with, but,
everything's pretty much available online,

109
00:06:49.334 --> 00:06:52.380
in terms of what we're
going to be building today.

110
00:06:52.380 --> 00:06:57.187
And in terms of resources, most important
one probably is the course website.

111
00:06:57.187 --> 00:07:02.094
This will have kind of an outline, high
level of everything that we're doing today

112
00:07:02.094 --> 00:07:04.421
plus links to all the other resources.

113
00:07:04.421 --> 00:07:08.119
I've also included a link
here to the GitHub.

114
00:07:08.119 --> 00:07:12.697
I have a few other places where I've set
up some kind of lessons, so to speak,

115
00:07:12.697 --> 00:07:16.290
like in CodeSandbox and
Solid Playground and Tutorial, but

116
00:07:16.290 --> 00:07:21.021
we'll share these links again as we get
to the particular parts in the session.

117
00:07:21.021 --> 00:07:23.626
I just wanna kind of
put these up up front.

