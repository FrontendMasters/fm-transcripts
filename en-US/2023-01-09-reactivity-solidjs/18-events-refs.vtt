WEBVTT

1
00:00:00.250 --> 00:00:03.660
Let's pretend we wanted to track
the mouse position on this div.

2
00:00:03.660 --> 00:00:06.471
Well, that's pretty easy to do.

3
00:00:06.471 --> 00:00:10.117
We basically use a convention of
using camel case on DOM events, so

4
00:00:10.117 --> 00:00:11.753
on, and then the DOM events.

5
00:00:11.753 --> 00:00:16.436
So you can do on mouse move for Zeon.

6
00:00:16.436 --> 00:00:19.561
It's funny we actually support both.

7
00:00:19.561 --> 00:00:26.372
But let's do this one,
on mouse move equals handleMouseMove.

8
00:00:26.372 --> 00:00:29.433
And handleMouseMove in this case is, we're
just sending a signal that updates some x

9
00:00:29.433 --> 00:00:30.978
and y coordinates that we display in here.

10
00:00:30.978 --> 00:00:33.877
And the one we go in here,
unsurprisingly, it works.

11
00:00:33.877 --> 00:00:37.465
So important thing to know
is that our event handlers,

12
00:00:37.465 --> 00:00:39.900
they can be in line as well.

13
00:00:39.900 --> 00:00:44.036
They pass the DOM event, and
then you can read the event and

14
00:00:44.036 --> 00:00:45.986
set the appropriate data.

15
00:00:52.068 --> 00:00:53.740
We support a style tag, and

16
00:00:53.740 --> 00:00:58.271
it's a little bit different than you
might have seen in some frameworks.

17
00:00:58.271 --> 00:01:02.171
It does support objects, but

18
00:01:02.171 --> 00:01:08.260
we actually rely on
standard DOM properties.

19
00:01:08.260 --> 00:01:15.092
And this means that we don't camel case.

20
00:01:15.092 --> 00:01:20.760
And instead,
what we ended up doing is we put.

21
00:01:21.790 --> 00:01:24.158
I've got a couple extra
brackets somewhere.

22
00:01:26.902 --> 00:01:29.005
There we go, some fun animation.

23
00:01:29.005 --> 00:01:33.020
We actually use stuff like
get dash case for CSS.

24
00:01:33.020 --> 00:01:36.871
And this might seem like an interesting
choice, and it also means pixels and

25
00:01:36.871 --> 00:01:37.421
whatnot.

26
00:01:37.421 --> 00:01:42.759
But it gives us a lot of control and
flexibility here because

27
00:01:42.759 --> 00:01:47.460
the compiler will actually
output individual style

28
00:01:47.460 --> 00:01:52.614
update commands for DOM,
essentially per one of these.

29
00:01:52.614 --> 00:01:57.861
So if say, one of them updates and
then the other ones don't, it'll actually

30
00:01:57.861 --> 00:02:03.200
just update the specific CSS property
independently of the other ones.

31
00:02:03.200 --> 00:02:10.145
And we can also support
CSS variables this way,

32
00:02:10.145 --> 00:02:14.666
we can add-- my-variable.

33
00:02:14.666 --> 00:02:17.164
And it's also lines with stuff
like serverside rendering.

34
00:02:17.164 --> 00:02:20.226
It helps us with performance because,
again, when you're serializing the stuff

35
00:02:20.226 --> 00:02:22.864
into the DOM, we don't wanna do all
these camel case transformation.

36
00:02:22.864 --> 00:02:26.242
So this is performance optimization.

37
00:02:26.242 --> 00:02:29.585
It gives you more flexibility control, and

38
00:02:29.585 --> 00:02:33.843
it makes a difference on both
the client and the server.

39
00:02:33.843 --> 00:02:36.507
But yeah, in this example,

40
00:02:36.507 --> 00:02:42.398
we're literally just using set
interval to blow up some text.

41
00:02:44.397 --> 00:02:48.727
Similarly dealing with classes,
you can just use class in solid,

42
00:02:48.727 --> 00:02:50.592
not class name or anything.

43
00:02:50.592 --> 00:02:54.386
We support standard HTML properties.

44
00:02:54.386 --> 00:02:57.004
But we also have an interesting helper,

45
00:02:57.004 --> 00:03:01.470
which lets us kind of shortcut some
of this stuff to do an object form.

46
00:03:01.470 --> 00:03:07.188
So for example,
instead of doing this through selected or

47
00:03:07.188 --> 00:03:13.022
this, which is pretty common place,
we can go ClassList,

48
00:03:13.022 --> 00:03:19.209
which uses the underlying
ClassList property on the element,

49
00:03:19.209 --> 00:03:27.055
and let's us do something like selected
when essentially current equals foo.

50
00:03:27.055 --> 00:03:31.220
And again, this is just convenient
when you wanna apply multiple styles.

51
00:03:31.220 --> 00:03:35.962
It's not a huge game changer here,
sorry, it's an object.

52
00:03:35.962 --> 00:03:40.983
But it lets us get around

53
00:03:40.983 --> 00:03:47.265
certain amount of overhead.

54
00:03:50.497 --> 00:03:54.124
One thing that's becoming
dreadfully clear to me is that

55
00:03:54.124 --> 00:03:57.371
the playground is much
better than the tutorials,

56
00:03:57.371 --> 00:04:02.146
[LAUGH] because the tutorials seem to be
having a little bit of an issue here.

57
00:04:02.146 --> 00:04:06.824
Okay, And let me see here.

58
00:04:06.824 --> 00:04:11.358
Cuz, yeah, this is a selector
thing where basically you're using

59
00:04:11.358 --> 00:04:14.720
mutual exclusive selectors in this thing.

60
00:04:14.720 --> 00:04:21.433
And essentially, I'm just going to
pop this down into all of these.

61
00:04:21.433 --> 00:04:25.174
But yeah, it's just a convenience,
it's not groundshaking.

62
00:04:25.174 --> 00:04:30.987
But it's a cool little feature to have,
ClassList.

63
00:04:37.707 --> 00:04:44.481
Yeah, it's baz and bar, yeah, baz and bar.

64
00:04:44.481 --> 00:04:44.981
There we go.

65
00:04:48.330 --> 00:04:50.462
Bar and baz.

66
00:04:50.462 --> 00:04:52.872
[LAUGH] There you go.

67
00:04:52.872 --> 00:04:57.287
[LAUGH] All right, still working,
okay, good, good, good.

68
00:04:57.287 --> 00:05:01.968
And one of the cool side
effects of it is that

69
00:05:01.968 --> 00:05:06.790
we can also use it for
dynamic expressions.

70
00:05:06.790 --> 00:05:09.688
There's actually a little
thing here on the side, but

71
00:05:09.688 --> 00:05:11.587
we can also choose what class it is.

72
00:05:11.587 --> 00:05:17.252
We can use object notation for
JavaScript and put a signal maybe in here.

73
00:05:17.252 --> 00:05:20.325
So you can actually change what
the keys are, dynamically as well.

74
00:05:20.325 --> 00:05:26.039
So it's a nice little tool because you
can kind of combine these objects and

75
00:05:26.039 --> 00:05:29.860
kind of describe more
complicated logic with it.

76
00:05:29.860 --> 00:05:34.743
Refs give you a reference
to a native element.

77
00:05:34.743 --> 00:05:36.958
And in solid you can do this in two ways.

78
00:05:36.958 --> 00:05:41.837
The easiest way and more straightforward
way is to just create a variable,

79
00:05:41.837 --> 00:05:45.251
and it's just a normal variable,
this let canvas.

80
00:05:45.251 --> 00:05:48.350
And then all we do is on our element.

81
00:05:48.350 --> 00:05:52.233
We go ref canvas here.

82
00:05:52.233 --> 00:05:56.836
And now you'll see our nice effect cuz
we have reference to our Canvas and

83
00:05:56.836 --> 00:06:00.852
now one of the solid logos here
is getting animated with color.

84
00:06:00.852 --> 00:06:06.457
But we also have a different
way of using refs, right?

85
00:06:06.457 --> 00:06:11.014
This works really well when you
wanna wait and use it in a mount.

86
00:06:11.014 --> 00:06:15.130
So once it's been connected to the DOM,
see we're using our Canvas directly here.

87
00:06:15.130 --> 00:06:19.262
We can also just create a signal,

88
00:06:19.262 --> 00:06:22.957
which also works quite well.

89
00:06:22.957 --> 00:06:28.145
Because sometimes, or
really any function for

90
00:06:28.145 --> 00:06:32.564
that matter, we can use callback refs.

91
00:06:32.564 --> 00:06:36.340
And this gives us a little bit more
control about how we assign the ref,

92
00:06:36.340 --> 00:06:37.496
which can be useful.

93
00:06:37.496 --> 00:06:41.216
So in this case,
I'm gonna change this Canvas to,

94
00:06:41.216 --> 00:06:46.330
now it's gonna be a function, and
then down here we can go set Canvas.

95
00:06:48.310 --> 00:06:51.762
For an example like this,
it's effectively the same thing.

96
00:06:53.182 --> 00:07:00.159
Let's see Canvas, and probably referencing
Canvases function in multiple places.

97
00:07:00.159 --> 00:07:01.801
Here I am.

98
00:07:12.244 --> 00:07:13.836
Let's just update them all.

99
00:07:21.175 --> 00:07:25.575
And one more time.

100
00:07:29.461 --> 00:07:31.112
Import createSignal.

101
00:07:32.884 --> 00:07:35.426
And we have the same effect again.

102
00:07:35.426 --> 00:07:37.547
So you have a couple of choices here,
right?

103
00:07:37.547 --> 00:07:40.213
You can always assign it
directly to the element.

104
00:07:40.213 --> 00:07:44.728
But if you wanna keep your JSX together,
you can just assign to a variable or

105
00:07:44.728 --> 00:07:48.325
use a signal if you wanna do
some more dynamic stuff with it.

106
00:07:55.486 --> 00:08:03.577
Right, and similarly, we can actually
forward our refs through components.

107
00:08:03.577 --> 00:08:07.430
And we don't actually need much of
a special syntax for that, right?

108
00:08:08.490 --> 00:08:12.523
Now, similar example where we
have all this logic, and for

109
00:08:12.523 --> 00:08:17.375
some reason, I've broken the Canvas
out into a different component.

110
00:08:20.479 --> 00:08:22.809
And in here, we have our Canvas element.

111
00:08:22.809 --> 00:08:30.202
All we need to do is Go ref, props.ref.

112
00:08:30.202 --> 00:08:32.926
And it's basically a special property.

113
00:08:32.926 --> 00:08:36.577
We know with props.ref, we can basically,

114
00:08:36.577 --> 00:08:40.707
if the ref is provided by
the parent like it is here,

115
00:08:40.707 --> 00:08:46.396
which is just this Canvas variable again,
we can forward it through.

116
00:08:46.396 --> 00:08:49.128
And let's update this URL.

117
00:08:49.128 --> 00:08:50.790
Looks like this site is down.

118
00:08:50.790 --> 00:08:52.444
And there we go.

119
00:08:52.444 --> 00:08:54.446
We see our same Canvas effects.

120
00:08:54.446 --> 00:08:57.352
So even through components,

121
00:08:57.352 --> 00:09:03.403
we can forward refs simply by
using the props.ref property.

