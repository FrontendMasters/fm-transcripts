WEBVTT

1
00:00:00.000 --> 00:00:05.138
This gets us to an interesting
place because if you've used

2
00:00:05.138 --> 00:00:11.097
frameworks like React, the thing is
every framework has a syntax for

3
00:00:11.097 --> 00:00:14.195
handling conditionals and loops.

4
00:00:14.195 --> 00:00:19.739
But for Solid, because we have the single
render method, it resembles more things,

5
00:00:19.739 --> 00:00:23.974
like Vue or Svelte,
like these kinda templating languages, but

6
00:00:23.974 --> 00:00:28.995
we're using JSX cuz it's portable,
cuz we can package it up and slice it up.

7
00:00:28.995 --> 00:00:32.382
We have to give certain things
special consideration,

8
00:00:32.382 --> 00:00:36.605
lists are one of them because,
I mean, think about what happens.

9
00:00:36.605 --> 00:00:40.785
If you had some reactive list and
you call map on it and

10
00:00:40.785 --> 00:00:45.440
it creates a bunch of li's,
which are real DOM elements.

11
00:00:45.440 --> 00:00:49.291
And then someone goes and
changes the list, adds an entry.

12
00:00:49.291 --> 00:00:53.601
Well, a map function has no choice but
to iterate the whole list again and

13
00:00:53.601 --> 00:00:57.711
map out the new results, so
you'd end up with all new list elements.

14
00:00:57.711 --> 00:01:01.233
That would be incredibly
expensive because, I mean,

15
00:01:01.233 --> 00:01:05.992
DOM creation is the most expensive thing,
that's what you wanna avoid.

16
00:01:05.992 --> 00:01:10.629
So we technically need a helper
function to do this, not list.map, but

17
00:01:10.629 --> 00:01:15.189
like a special map function that goes,
okay, if this item is already in

18
00:01:15.189 --> 00:01:20.072
the list don't recreate the DOM elements,
use the existing DOM elements.

19
00:01:20.072 --> 00:01:24.532
So we had a choice, and we do actually
ship this helper called mapArray.

20
00:01:24.532 --> 00:01:27.993
But coming maybe from
some other frameworks,

21
00:01:27.993 --> 00:01:32.524
I thought it was way more ergonomic
to ship it as a component.

22
00:01:32.524 --> 00:01:36.499
Because the beautiful thing about
components is that they compose.

23
00:01:36.499 --> 00:01:41.059
So essentially, if we have our list,
this is very similar to the map function,

24
00:01:41.059 --> 00:01:45.690
we still pass what's called a render prop
where we pass in a function which lets us

25
00:01:45.690 --> 00:01:46.804
get the list item.

26
00:01:46.804 --> 00:01:52.271
But this isn't a good way of
kind of wrapping up our logic,

27
00:01:52.271 --> 00:01:58.311
because let's say, I mean,
that's For components is fine.

28
00:01:58.311 --> 00:02:01.363
But let's say you wanna
do a virtualized list or

29
00:02:01.363 --> 00:02:05.497
a paginated list where you're
only showing ten items at a time.

30
00:02:05.497 --> 00:02:12.184
Well, all you do is go import that from
the library that you're gonna use.

31
00:02:12.184 --> 00:02:17.212
And you're kinda back here anyway,
the second that you need to actually build

32
00:02:17.212 --> 00:02:22.258
actual things, you're gonna find that
there's gonna be components for it.

33
00:02:22.258 --> 00:02:26.651
Conditionals become error boundaries and
suspense and

34
00:02:26.651 --> 00:02:30.488
layouts, loops become paginated and
virtual.

35
00:02:30.488 --> 00:02:35.399
So we just kind of skip the step, we just
start basically at the component level,

36
00:02:35.399 --> 00:02:38.591
and the thing is these
components are not compiled.

37
00:02:38.591 --> 00:02:42.440
It's not like a syntax we're looking for
other than it being a JSX element.

38
00:02:42.440 --> 00:02:45.679
In fact,
you saw all that we do with components.

39
00:02:45.679 --> 00:02:46.736
This is actually a runtime thing.

40
00:02:46.736 --> 00:02:50.477
If you don't like Solid's for loop,
write your own, it's just a component.

41
00:02:50.477 --> 00:02:53.467
This is important.

42
00:02:53.467 --> 00:02:57.056
We handle thing like list
by wrapping it in a getter,

43
00:02:57.056 --> 00:03:02.770
we handle the children by just using these
simple heuristics in the JSX basically,

44
00:03:02.770 --> 00:03:05.073
looking at do you call function.

45
00:03:05.073 --> 00:03:11.138
Then we need to access it lazily,
otherwise, just inline the value.

46
00:03:11.138 --> 00:03:14.841
And with that, you can build all sorts
of control flow components with it.

47
00:03:18.928 --> 00:03:24.952
I could actually use this moment to kind
of show a quick demo, although we're gonna

48
00:03:24.952 --> 00:03:30.132
be revisiting this demo or a different
version of this demo in a minute.

49
00:03:30.132 --> 00:03:36.609
But I just wanted to kinda show very
easily here how we can use a for,

50
00:03:36.609 --> 00:03:42.509
for example, to handle some props and
handle a whole bunch of

51
00:03:42.509 --> 00:03:48.662
logic in our component to passing
in theme colors and whatnot.

52
00:03:48.662 --> 00:03:53.478
Getting the full details of this example
yet probably not terribly important, but

53
00:03:53.478 --> 00:03:58.019
the important thing is that we can have
stuff like visibility changing what's

54
00:03:58.019 --> 00:04:01.834
active and complete,
changing theme color on top of something.

55
00:04:01.834 --> 00:04:06.058
So you can have a whole bunch of different
distinct logic in a single component.

56
00:04:06.058 --> 00:04:09.479
And here I have this filter
function called log and

57
00:04:09.479 --> 00:04:12.827
I have three todos on a list
that are get updated.

58
00:04:12.827 --> 00:04:15.325
But what's really cool is,
if you update, say,

59
00:04:15.325 --> 00:04:18.653
one item in the list, you can see
that number count on the bottom and

60
00:04:18.653 --> 00:04:23.018
it's not gonna recall the filter cuz we're
just changing the check state of one item.

61
00:04:23.018 --> 00:04:24.443
It's fine grained.

62
00:04:24.443 --> 00:04:28.795
If we have some kinda prop coming in
from above that changes the theme color,

63
00:04:28.795 --> 00:04:31.324
we don't have to rerun the component here.

64
00:04:31.324 --> 00:04:35.744
So all the changes are essentially
isolated from each other because it's all

65
00:04:35.744 --> 00:04:39.484
based on the dependencies and
there's no dependency arrays, so

66
00:04:39.484 --> 00:04:42.148
you don't really have
to worry about it much.

67
00:04:42.148 --> 00:04:47.364
What's really cool about this kind of
thing is you don't see dependency arrays,

68
00:04:47.364 --> 00:04:52.517
there's actually no createMemo here,
didn't even bother, didn't need it.

69
00:04:52.517 --> 00:04:57.675
There's no memo, there is no memo
functions, use callback, no any of that,

70
00:04:57.675 --> 00:05:02.129
you literally just write the code
that you need to do the update, and

71
00:05:02.129 --> 00:05:04.578
each piece updates independently.

72
00:05:04.578 --> 00:05:09.666
&gt;&gt; So this is where Solid completely
deviates from Vue and React,

73
00:05:09.666 --> 00:05:16.391
rendering is tied to respond to the data
instead of rerunning the full components.

74
00:05:16.391 --> 00:05:19.816
&gt;&gt; Yeah, that's exactly correct.

75
00:05:19.816 --> 00:05:22.005
And as I said, this was an older idea, and

76
00:05:22.005 --> 00:05:24.835
Vue has actually almost
identical reactive system.

77
00:05:24.835 --> 00:05:29.583
But by foregoing the VDOM we get
into an interesting different zone

78
00:05:29.583 --> 00:05:34.670
because the rendering can be just
an extension of the reactive system,

79
00:05:34.670 --> 00:05:40.037
as long as we can assure the reactive
system is consistent and dependable.

80
00:05:40.037 --> 00:05:42.900
That's basically the big thing, right?

81
00:05:42.900 --> 00:05:47.620
Virtual DOM kinda rose up at a time period
where we were worried about things like

82
00:05:47.620 --> 00:05:51.566
flux and we were sort of think about,
unidirectional flow and

83
00:05:51.566 --> 00:05:55.246
a lot of the early patterns back
then like MVVM, and stuff.

84
00:05:55.246 --> 00:06:00.110
There's a lot of like, I call them
the butterfly effect where you update one

85
00:06:00.110 --> 00:06:03.229
thing and other things do and
it bounces around.

86
00:06:03.229 --> 00:06:06.177
I learned a lot from React, right?

87
00:06:06.177 --> 00:06:10.250
This project did not start off as trying
to improve on React or replace it,

88
00:06:10.250 --> 00:06:11.840
it was the other way around.

89
00:06:11.840 --> 00:06:16.569
I was trying to improve on these kind of
older patterns that were having, I say,

90
00:06:16.569 --> 00:06:20.593
difficulties, and React showed us
what best practices look like,

91
00:06:20.593 --> 00:06:22.449
what good patterns look like.

92
00:06:22.449 --> 00:06:23.578
That was the biggest value.

93
00:06:23.578 --> 00:06:26.559
There's a whole philosophy of React,
I like to call it, and

94
00:06:26.559 --> 00:06:28.492
I feel like that's the thing to learn.

95
00:06:28.492 --> 00:06:30.323
It wasn't about the technology,

96
00:06:30.323 --> 00:06:33.616
it's about learning what it
means to build user interfaces.

97
00:06:33.616 --> 00:06:37.232
Different projects have taken various
technology pieces from React,

98
00:06:37.232 --> 00:06:40.376
like Vue using the virtual DOM and
mixing it with reactivity.

99
00:06:40.376 --> 00:06:48.430
But for me, it was never about React's
technology but about their mindset.

100
00:06:48.430 --> 00:06:54.017
I mean, just to kind of nail this
whole thing even further home,

101
00:06:54.017 --> 00:06:57.328
I call this the reactive advantage and

102
00:06:57.328 --> 00:07:01.984
it's kind of important cuz
components run once, and

103
00:07:01.984 --> 00:07:05.829
this actually not a complete unique thing.

104
00:07:05.829 --> 00:07:09.709
A lot of reactive frameworks have this
kind of idea where essentially your

105
00:07:09.709 --> 00:07:13.604
component code is like a setup function
rather than a rerender function.

106
00:07:13.604 --> 00:07:20.280
But what's really cool is you don't have
to ever worry about the order of things or

107
00:07:20.280 --> 00:07:24.925
nesting or stale closures or
any of those kinda details,

108
00:07:24.925 --> 00:07:30.754
you kinda just write the data in a kinda
way that would make sense to you.

109
00:07:30.754 --> 00:07:33.430
And then the templates compile
down to real DOM nodes,

110
00:07:33.430 --> 00:07:35.943
which again is really
powerful as an escape hatch.

111
00:07:35.943 --> 00:07:39.617
It means that at any point you
can go constDiv equals JSX div,

112
00:07:39.617 --> 00:07:44.013
and because it runs once when you
integrate it with Vanilla JavaScript or

113
00:07:44.013 --> 00:07:46.696
stuff like that, it's just very natural.

114
00:07:46.696 --> 00:07:49.398
Solid does have a syntax for refs, so

115
00:07:49.398 --> 00:07:53.595
you can keep your views in a nice
kind of together fashion.

116
00:07:53.595 --> 00:07:58.551
But it's important to understand that
with such a low level of abstraction,

117
00:07:58.551 --> 00:08:03.432
knowing that only the smallest possible
things are gonna update, you can be

118
00:08:03.432 --> 00:08:08.561
confident that you can just like, if you
need to, go mess with those DOM nodes.

119
00:08:08.561 --> 00:08:14.311
And finally and most importantly,
state is independent of components, right?

120
00:08:14.311 --> 00:08:19.008
Component boundaries are for your sake,
how you want to organize your code.

121
00:08:19.008 --> 00:08:19.855
They're not for performance.

122
00:08:19.855 --> 00:08:22.829
The performance is great regardless,
right?

123
00:08:22.829 --> 00:08:24.965
It's about code organization.

124
00:08:24.965 --> 00:08:26.920
A lot of times when you use a library,

125
00:08:26.920 --> 00:08:30.465
you kinda have to go,
I actually wanna hoist this component.

126
00:08:30.465 --> 00:08:34.415
And maybe no one's doing that level of
optimization, but as someone who does

127
00:08:34.415 --> 00:08:38.363
optimization, I'm very aware of this,
where it's like if you add a bunch of

128
00:08:38.363 --> 00:08:42.616
state here that's not related to that todo
list, it's gonna cause the todo list or

129
00:08:42.616 --> 00:08:46.121
render over and over again unless
you annotate and do all this work.

130
00:08:46.121 --> 00:08:50.987
It's really cool how you can basically
make this stuff independent just

131
00:08:50.987 --> 00:08:55.947
by the fact that it knows what's
updates because of the reactive system.

132
00:08:55.947 --> 00:09:00.600
And honestly, the application of
this goes even further than that.

133
00:09:00.600 --> 00:09:04.331
I mentioned I worked on
the Marco team at eBay.

134
00:09:04.331 --> 00:09:08.565
They hired me because having this
kinda knowledge of what updates and

135
00:09:08.565 --> 00:09:13.310
independence also solves some of the more
modern problems we're facing like

136
00:09:13.310 --> 00:09:15.356
partial hydration and whatnot.

137
00:09:15.356 --> 00:09:18.168
Because if you don't wanna ship
all the JavaScript to the browser,

138
00:09:18.168 --> 00:09:19.905
how do you know what JavaScript you need?

139
00:09:19.905 --> 00:09:22.001
This is a good way.

140
00:09:22.001 --> 00:09:25.544
So it just kind of builds on
this reactive foundation.

