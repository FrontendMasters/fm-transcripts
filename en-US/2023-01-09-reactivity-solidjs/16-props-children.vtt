WEBVTT

1
00:00:00.150 --> 00:00:05.373
We're gonna first look at
talking about props and

2
00:00:05.373 --> 00:00:12.718
handling props so this was mentioned
before about handling default.

3
00:00:12.718 --> 00:00:20.170
So let's pretend we have a component
that's our greeting component,

4
00:00:20.170 --> 00:00:24.887
and right now,
we are setting the defaults by

5
00:00:24.887 --> 00:00:30.620
essentially going greeting or
hi or prop name or John.

6
00:00:30.620 --> 00:00:36.480
And don't get me wrong, if you got simple
stuff, this is perfectly fine to do.

7
00:00:36.480 --> 00:00:38.900
It's probably the most
performant way of doing it.

8
00:00:38.900 --> 00:00:43.518
We just have a condition and
we decide if it's there short or not, but

9
00:00:43.518 --> 00:00:48.696
what if you're using these props in
multiple places, you don't really want

10
00:00:48.696 --> 00:00:54.320
to maybe go through and every single
place put the defaults, it's error-prone.

11
00:00:54.320 --> 00:00:57.370
So, merge props does help us here, right?

12
00:00:57.370 --> 00:01:02.676
And, it lets us basically
pass in essentially

13
00:01:02.676 --> 00:01:07.438
an array as many objects
as arguments as we

14
00:01:07.438 --> 00:01:11.530
want that we wanna merge together.

15
00:01:11.530 --> 00:01:15.470
So, in our case,
we want them to actually be the defaults.

16
00:01:15.470 --> 00:01:21.529
So we actually put the object first so
we might be like greeting,

17
00:01:21.529 --> 00:01:25.920
Hi, and name John,
did I have it, yeah John.

18
00:01:27.800 --> 00:01:33.050
And with this suddenly,
instead of doing props greeting or

19
00:01:33.050 --> 00:01:37.565
whatever, we can just kind
of get rid of this now and

20
00:01:37.565 --> 00:01:42.080
just be like merged or
let's say merged, and, and

21
00:01:42.080 --> 00:01:47.650
we still get our default behavior
of when we don't provide it.

22
00:01:49.410 --> 00:01:57.910
We add an extra h, we get the default
values depending on if they're provided.

23
00:01:57.910 --> 00:02:00.740
But we can do other things too, right?

24
00:02:00.740 --> 00:02:06.028
We can put the arguments after and
then they sit on top, it's basically

25
00:02:06.028 --> 00:02:11.248
like a function version of the term
I guess like a spread essentially.

26
00:02:11.248 --> 00:02:16.479
So, similarly split props where what

27
00:02:16.479 --> 00:02:22.199
if we wanted to pull
a few of our props off,

28
00:02:22.199 --> 00:02:27.265
again, this works the first time you

29
00:02:27.265 --> 00:02:32.675
render because these values are real.

30
00:02:32.675 --> 00:02:36.096
But the problem is they won't
be reactive when you update.

31
00:02:36.096 --> 00:02:38.910
So, in this simple example,
if I click Set Name,

32
00:02:38.910 --> 00:02:43.071
it's never updating because it only
ran the first time and you accessed.

33
00:02:43.071 --> 00:02:46.753
The problem is when you do these spreads,
you're actually accessing the reactive

34
00:02:46.753 --> 00:02:48.920
variables at that point and
not under an effect.

35
00:02:50.060 --> 00:02:54.192
For that reason, we have local and others,

36
00:02:54.192 --> 00:02:57.766
let's say, often people actually,

37
00:02:57.766 --> 00:03:03.590
very common pattern here is
actually just to not even do that.

38
00:03:03.590 --> 00:03:07.140
You can shorthand your tuples
by just putting a comma.

39
00:03:07.140 --> 00:03:10.770
And then we can split props, and
then we can pass the props in.

40
00:03:10.770 --> 00:03:15.348
And then we pass an array
of what we want out of it,

41
00:03:15.348 --> 00:03:21.619
which in this case, I think we're
looking for greeting and name.

42
00:03:21.619 --> 00:03:26.264
And if all works well,
essentially I'm just gonna do

43
00:03:26.264 --> 00:03:30.404
prop stock reading, but
it could also be this.

44
00:03:30.404 --> 00:03:36.471
We now have pulled these properties off,
so when we spread on to the h1,

45
00:03:36.471 --> 00:03:41.543
we don't get a bunch of extra
stuff that we don't need on it,

46
00:03:41.543 --> 00:03:46.970
we're not gonna serialize
name on our header element.

47
00:03:46.970 --> 00:03:48.603
And now when we update, so

48
00:03:48.603 --> 00:03:52.555
it went from Jacob to Jarod
because we maintained reactivity.

49
00:03:55.775 --> 00:03:58.240
The last helper I wanted to
show was a children helper.

50
00:04:00.370 --> 00:04:06.483
And the idea in this example is that.

51
00:04:06.483 --> 00:04:12.038
So we have a colored list parent
component that's actually

52
00:04:12.038 --> 00:04:16.715
interested in what we map
back from the children.

53
00:04:16.715 --> 00:04:19.599
So we actually have a for list, and for

54
00:04:19.599 --> 00:04:24.208
each color we're actually
passing in these items, right?

55
00:04:24.208 --> 00:04:31.304
And then the colored list goes,
I wanna do something with them.

56
00:04:34.302 --> 00:04:39.919
So like essentially, while this
example is a little bit trivial,

57
00:04:39.919 --> 00:04:45.450
we could pretend like we wanted
to actually map over them again.

58
00:04:45.450 --> 00:04:50.869
Maybe update them, had some color to them,

59
00:04:50.869 --> 00:04:53.508
change the element.

60
00:04:53.508 --> 00:04:57.320
And we can do this as basically
by using our children helpers.

61
00:04:57.320 --> 00:05:03.136
So what we're gonna do is,
it's the only thing that's

62
00:05:03.136 --> 00:05:08.211
a little bit fun about
naming the helper children

63
00:05:08.211 --> 00:05:14.365
[LAUGH] is that You can't
use it as a variable name,

64
00:05:14.365 --> 00:05:18.088
something that occurred to me much later,
but here we are.

65
00:05:18.088 --> 00:05:22.534
[LAUGH] But, we have now

66
00:05:22.534 --> 00:05:27.520
resolved the children.

67
00:05:27.520 --> 00:05:33.257
So that inside this memo, we're gonna
actually have real DOM elements,

68
00:05:33.257 --> 00:05:38.066
and for the sake of this example
I'm gonna create an effect and

69
00:05:38.066 --> 00:05:41.234
in our effect we're actually gonna go.

70
00:05:41.234 --> 00:05:49.887
Okay, give me those children
actually do a dumb thing on them,

71
00:05:49.887 --> 00:05:54.950
I'm gonna go item.style.data for

72
00:05:54.950 --> 00:06:00.189
the color equals I don't know, red.

73
00:06:00.189 --> 00:06:05.295
See if I get that wrong, Let's make
it props.color, okay, even better.

74
00:06:06.395 --> 00:06:08.334
Then we have the ability for

75
00:06:08.334 --> 00:06:12.563
a parent component to basically
introspect on the parent.

76
00:06:12.563 --> 00:06:16.415
What's important to remember though is
we're still accessing props.children down

77
00:06:16.415 --> 00:06:18.535
here, which means we're
accessing it twice.

78
00:06:18.535 --> 00:06:23.530
So we actually should also update
this to use our result children.

79
00:06:23.530 --> 00:06:25.710
And this is the other purpose
of the children helper.

80
00:06:25.710 --> 00:06:27.798
If we need to resolve
the children multiple times,

81
00:06:27.798 --> 00:06:29.880
we don't want it to render multiple times.

82
00:06:29.880 --> 00:06:33.415
So for that reason, the children
helper let's us do introspection.

83
00:06:33.415 --> 00:06:36.969
Most of time you're just gonna pass it
straight through, but if you actually need

84
00:06:36.969 --> 00:06:40.545
to do work with it, this will let us
operate without doing re rendering.

85
00:06:40.545 --> 00:06:44.655
So now, we can see that we're getting
our purple color being set by our for

86
00:06:44.655 --> 00:06:48.515
each, and when we set the color to
the new color we now get a nice teal.

87
00:06:48.515 --> 00:06:54.487
So, this is powerful pattern because
it lets you take a parent component and

88
00:06:54.487 --> 00:06:56.368
augment the children.

89
00:06:56.368 --> 00:07:00.642
Use sparingly, admittedly because it's
a bit of an abstraction leak, because for

90
00:07:00.642 --> 00:07:04.450
example, here we have to know that
we're dealing with real DOM elements.

91
00:07:05.890 --> 00:07:10.965
So, if you're using making
a generic component that works

92
00:07:10.965 --> 00:07:15.734
on multiple platforms,
you might not want to do this but

93
00:07:15.734 --> 00:07:19.300
it is still a pattern that exist in solid.

