WEBVTT

1
00:00:00.000 --> 00:00:04.865
It's finally time to do
some actual SolidJS code.

2
00:00:04.865 --> 00:00:08.490
We've been actually using
it this whole time, but

3
00:00:08.490 --> 00:00:12.116
now I wanna go beyond
the language of reactivity and

4
00:00:12.116 --> 00:00:16.948
get into the pieces where we actually
need to author applications.

5
00:00:16.948 --> 00:00:20.546
And for that,
I'm gonna focus on three areas.

6
00:00:20.546 --> 00:00:24.145
We're gonna focus on control flow,
which we've seen a bit of already,

7
00:00:24.145 --> 00:00:25.798
things like the For component.

8
00:00:25.798 --> 00:00:29.819
We're gonna look at a bit more at the
fundamentals around component authoring.

9
00:00:29.819 --> 00:00:33.160
As you saw,
props are a little special in Solid, so

10
00:00:33.160 --> 00:00:35.974
handling them is a little special as well.

11
00:00:35.974 --> 00:00:39.502
And then we're just gonna look
at like all the DOM binding.

12
00:00:39.502 --> 00:00:44.246
If you're familiar with JSX, some of
that will be pretty familiar but for

13
00:00:44.246 --> 00:00:48.471
those who aren't, I think it will
serve as a good introduction.

14
00:00:48.471 --> 00:00:52.501
And the way we're gonna do this is I'm
gonna talk a little bit about each of

15
00:00:52.501 --> 00:00:56.149
these topics, show some quick
examples of what those API's are.

16
00:00:56.149 --> 00:01:01.083
And then I'm actually gonna pull
up few of the exercises form

17
00:01:01.083 --> 00:01:05.630
Solid JS's tutorial and
do some stuff in the playground and

18
00:01:05.630 --> 00:01:09.422
just kind of try them out and
see how they work.

19
00:01:09.422 --> 00:01:12.728
First, control flow.

20
00:01:12.728 --> 00:01:17.189
As mentioned before, pretty much every UI
framework has some kind of mechanism to

21
00:01:17.189 --> 00:01:18.556
describe control flow.

22
00:01:18.556 --> 00:01:23.129
Part of being declarative is having
a syntax to describe conditionals and

23
00:01:23.129 --> 00:01:25.940
loops, and
it's different in a lot of them.

24
00:01:25.940 --> 00:01:29.801
Some use HTML attributes
to kind of indicate,

25
00:01:29.801 --> 00:01:33.570
some use things mustache templates almost.

26
00:01:33.570 --> 00:01:40.243
And for us we use components,
JavaScript expressions still work but

27
00:01:40.243 --> 00:01:47.155
the components kinda let us package
up the optimizations in a nice way.

28
00:01:47.155 --> 00:01:51.925
So I've already kind of
shown this example here, but

29
00:01:51.925 --> 00:01:57.544
just kinda emphasize anything again,
while we support maps,

30
00:01:57.544 --> 00:02:04.453
we care about optimizing because of
the fact that we do create real DOM nodes.

31
00:02:04.453 --> 00:02:08.591
And we can compose them we
write our own components, but

32
00:02:08.591 --> 00:02:12.199
Solid ships with a few of
these we've seen For,

33
00:02:12.199 --> 00:02:16.970
but we ship with a few other
control flow components ourselves.

34
00:02:16.970 --> 00:02:20.827
And they fall in kinda two categories.

35
00:02:20.827 --> 00:02:23.924
We have the conditional control flows and
we have the loop ones.

36
00:02:23.924 --> 00:02:27.616
And for the conditionals,
the most basic one is show,

37
00:02:27.616 --> 00:02:31.078
which displays content
when the condition is met.

38
00:02:31.078 --> 00:02:36.209
[LAUGH] Then we have switch,
which is kind of a if/else,

39
00:02:36.209 --> 00:02:40.904
or select/case kind of
control flow that lets us do

40
00:02:40.904 --> 00:02:45.066
kind of nested mutually exclusive options.

41
00:02:45.066 --> 00:02:53.555
We have dynamic, which is how we swap
the specific component being rendered.

42
00:02:53.555 --> 00:02:57.927
This is important because our
components don't rerun again,

43
00:02:57.927 --> 00:03:02.722
so we can't just reassign a variable and
make that a new JSX element.

44
00:03:02.722 --> 00:03:05.039
There has to be a special control flow for
it.

45
00:03:05.039 --> 00:03:10.281
And then lastly, there's error boundary,
which we use to catch

46
00:03:10.281 --> 00:03:15.438
any errors in the view and
then show a different fallback.

47
00:03:15.438 --> 00:03:20.918
There's actually one more that we'll
address later in the workshop,

48
00:03:20.918 --> 00:03:27.332
which is suspense, which I also consider
control flow one, but we'll get to that.

49
00:03:27.332 --> 00:03:33.997
On the loop side, we have two, which you
might think, that's a little bit strange,

50
00:03:33.997 --> 00:03:39.197
why is there two, well, by default,
we use the For components.

51
00:03:39.197 --> 00:03:42.653
And the important thing with
the For component is it's keyed.

52
00:03:42.653 --> 00:03:46.158
And what that means is when
the DOM elements are, sorry,

53
00:03:46.158 --> 00:03:49.737
when the data is set to a DOM element,
changing that data,

54
00:03:49.737 --> 00:03:53.993
rearranging that list means that
the same DOM elements come with it.

55
00:03:53.993 --> 00:03:58.128
So if you have a list of elements and
a list of data,

56
00:03:58.128 --> 00:04:03.748
you change the order, the order of
the DOM elements change as well.

57
00:04:03.748 --> 00:04:07.578
And this happens automatically because
Solid uses reactivity to update which

58
00:04:07.578 --> 00:04:11.525
means that everything is by reference,
you don't need to manually put keys in,

59
00:04:11.525 --> 00:04:12.293
it just works.

60
00:04:12.293 --> 00:04:16.296
However, sometimes it makes sense
especially when you have primitive data

61
00:04:16.296 --> 00:04:20.735
like maybe a list of strings or something
that doesn't have kinda a static reference

62
00:04:20.735 --> 00:04:22.688
that you don't actually have a key.

63
00:04:22.688 --> 00:04:27.635
And in that case, we have index which
lets you essentially key by index which

64
00:04:27.635 --> 00:04:32.599
is like what happens in other frameworks
if you don't include the key prop.

65
00:04:32.599 --> 00:04:36.304
So I'm going to use this
moment to go over and

66
00:04:36.304 --> 00:04:41.024
actually pull out the Solid JS's
tutorials for a minute.

67
00:04:41.024 --> 00:04:43.195
We have these great
interactive tutorials and

68
00:04:43.195 --> 00:04:45.819
we've talked about a lot of
the topics already in them.

69
00:04:45.819 --> 00:04:50.962
But this is also a great kinda
smorgasbord, so to speak of different

70
00:04:50.962 --> 00:04:55.925
APIs, it's not the full API
reference which we have under here,

71
00:04:55.925 --> 00:05:00.733
but it gives you a good idea of
how to use these in applications.

72
00:05:00.733 --> 00:05:03.423
So I strongly recommend looking into them,
but

73
00:05:03.423 --> 00:05:06.246
I'm gonna go through
a couple of these examples,

74
00:05:06.246 --> 00:05:11.306
kinda give my personal take on them, which
is hopefully, better than what's written.

75
00:05:11.306 --> 00:05:15.828
I tried my best when I
wrote the docs originally,

76
00:05:15.828 --> 00:05:20.352
but some of these examples
will kinda illustrate

77
00:05:20.352 --> 00:05:24.559
essentially how these things work, right?

78
00:05:24.559 --> 00:05:30.712
So I'm gonna start with show because
show is probably the most basic thing.

79
00:05:30.712 --> 00:05:36.126
And pretend you had a system where
you have login and logout and

80
00:05:36.126 --> 00:05:41.138
you just wanna switch between login and
logout, right?

81
00:05:41.138 --> 00:05:45.370
And right now we're
showing both buttons but

82
00:05:45.370 --> 00:05:50.264
it'd be nice if we could only show one and
to be fair,

83
00:05:50.264 --> 00:05:56.071
if you want to, you can in Solid,
write something like this.

84
00:05:56.071 --> 00:06:02.793
Use JavaScript and write a ternary
operator, and then if you're logged in,

85
00:06:02.793 --> 00:06:07.426
show, sorry, I got it backwards, didn't I?

86
00:06:07.426 --> 00:06:12.770
If you're logged in,
show the logout and vice versa, right?

87
00:06:12.770 --> 00:06:18.752
So right now I, actually wait, no I did
have it right the first time, sorry.

88
00:06:18.752 --> 00:06:22.207
Right now we're not logged in,
we press the login button and

89
00:06:22.207 --> 00:06:23.908
now we get the log out button.

90
00:06:23.908 --> 00:06:28.179
And Solid actually can
tell that these ternaries

91
00:06:28.179 --> 00:06:33.374
are JavaScript syntax, so
we actually can optimize these.

92
00:06:33.374 --> 00:06:39.044
But we also provide the show component and

93
00:06:39.044 --> 00:06:47.343
the show component,
Essentially takes a condition, show when.

94
00:06:50.821 --> 00:06:51.913
Logged in.

95
00:06:53.355 --> 00:06:57.657
And then when we're logged in,
we show this one and

96
00:06:57.657 --> 00:07:02.172
we've kind of got a convention for
fallbacks where.

97
00:07:06.658 --> 00:07:10.452
We can go fallback equals this, and

98
00:07:10.452 --> 00:07:15.509
we get the same behavior and
it's the reason why

99
00:07:15.509 --> 00:07:20.568
we care about having this
kind of optimized show

100
00:07:20.568 --> 00:07:25.893
is because getting back
to our infamous counter.

101
00:07:25.893 --> 00:07:31.634
Picture if you had something that was
show if count is bigger than five.

102
00:07:31.634 --> 00:07:33.324
Well, when count is smaller than five,

103
00:07:33.324 --> 00:07:36.220
we wouldn't really care because
we wouldn't be showing anything.

104
00:07:36.220 --> 00:07:40.232
But if count got bigger than five and
went six, seven, eight, nine,

105
00:07:40.232 --> 00:07:43.781
you don't want to rerun that
expression over and over again.

106
00:07:43.781 --> 00:07:47.647
You don't want to recreate the component
every time you go five, six, seven, eight.

107
00:07:47.647 --> 00:07:53.408
So this is what Solid's show component does,
it makes sure that it's only

108
00:07:53.408 --> 00:07:58.882
when it switches between the Boolean
states that we actually like,

109
00:07:58.882 --> 00:08:02.837
the truthiness that we
actually do a new render.

110
00:08:02.837 --> 00:08:07.837
And to be fair, our compiler automatically
does this with ternaries as well, but

111
00:08:07.837 --> 00:08:12.337
I just wanted to kind of indicate why
this is an important consideration.

112
00:08:12.337 --> 00:08:14.402
Show component actually doubles up.

113
00:08:14.402 --> 00:08:17.971
Interestingly enough,
we can add a keyed prop to it.

114
00:08:17.971 --> 00:08:22.620
And this lets it take
a function that passes in,

115
00:08:22.620 --> 00:08:28.664
like in this case it doesn't
matter because it's a Boolean,

116
00:08:28.664 --> 00:08:35.191
but if there was some kind of value,
let's pretend this was user.

117
00:08:35.191 --> 00:08:37.937
Let's say if I get a user signal,

118
00:08:37.937 --> 00:08:42.554
you could actually pass in
a user in here inside the JSX.

119
00:08:42.554 --> 00:08:46.735
And what this would do is say, no,
we actually want it to be keyed so

120
00:08:46.735 --> 00:08:50.784
that whenever the user changes,
we actually re-render this.

121
00:08:50.784 --> 00:08:55.142
Because by default, show is only
going to render the main thing

122
00:08:55.142 --> 00:08:58.363
the first time when it
goes from true to false.

123
00:08:58.363 --> 00:09:03.203
And this is good usually because
inside you'll have other things

124
00:09:03.203 --> 00:09:05.667
in here that say that read user and

125
00:09:05.667 --> 00:09:10.872
it'll still update independently
like we've talked about before.

126
00:09:10.872 --> 00:09:15.267
But sometimes you do wanna associate
the DOM element with the data and

127
00:09:15.267 --> 00:09:16.416
it has this form.

128
00:09:16.416 --> 00:09:19.424
You might be saying, okay,
well I'm just gonna use ternaries.

129
00:09:19.424 --> 00:09:21.375
Go ahead, for simple expressions, you can.

130
00:09:21.375 --> 00:09:26.719
What we found is that one of the really
interesting properties with control flow

131
00:09:26.719 --> 00:09:32.177
components is that,
The way that the layout,

132
00:09:32.177 --> 00:09:35.858
once you have more logic and
you start getting bigger blocks of code,

133
00:09:35.858 --> 00:09:39.430
you're entering the JavaScript
less often with the components.

134
00:09:39.430 --> 00:09:44.374
So you get a more layout-focused
look when you kinda layer everything

135
00:09:44.374 --> 00:09:49.421
out this way instead of having as many
jumping in and out of JavaScript.

136
00:09:49.421 --> 00:09:53.965
It's an interesting observation, you'll
have to test the mileage for yourself but

137
00:09:53.965 --> 00:09:56.563
this is kind of part of
the thinking behind this.

138
00:09:56.563 --> 00:09:58.548
And that's basically the show component.

