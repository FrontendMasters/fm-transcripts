WEBVTT

1
00:00:00.000 --> 00:00:04.381
Now, we're kinda entering the final
advanced kinda section for using Solid.

2
00:00:04.381 --> 00:00:08.411
And a lot of this comes from the progress
we've made in the last couple years.

3
00:00:08.411 --> 00:00:10.708
I started Solid back in 2016 and

4
00:00:10.708 --> 00:00:15.468
most of the mechanics that I've showed
you so far, existed at that time.

5
00:00:15.468 --> 00:00:20.190
But since 2019 there's
been a lot of movement,

6
00:00:20.190 --> 00:00:24.605
a lot of things like SSR and
new rendering modes.

7
00:00:24.605 --> 00:00:28.442
And Solid has grown in the last
three years to kinda anticipate and

8
00:00:28.442 --> 00:00:29.500
work with those.

9
00:00:29.500 --> 00:00:35.537
And a big part of that comes down to kinda
overarching application architecture.

10
00:00:35.537 --> 00:00:40.844
So the last piece I really
wanna talk about today and

11
00:00:40.844 --> 00:00:45.545
show off is routing and
async data patterns.

12
00:00:45.545 --> 00:00:48.970
Because these are things you need
in pretty much every app, and

13
00:00:48.970 --> 00:00:53.621
there's something that are more emphasized
when you think of your framework as a full

14
00:00:53.621 --> 00:00:57.884
stack framework rather than just a client
side rendered thing like we've been

15
00:00:57.884 --> 00:00:59.638
doing so far.

16
00:00:59.638 --> 00:01:04.429
So, yeah, I mean, I'm not giving
the full history here, but I'm gonna say

17
00:01:04.429 --> 00:01:09.446
that client side routing, arguably has
been like contributing to the biggest,

18
00:01:09.446 --> 00:01:13.903
I guess, evolution in modern web
development for the last 15 years.

19
00:01:13.903 --> 00:01:15.103
Like it's not a new thing but

20
00:01:15.103 --> 00:01:17.306
it's a reason why we have
single page apps, right?

21
00:01:17.306 --> 00:01:21.476
This idea that you don't have to go all
the way full page to the server to get

22
00:01:21.476 --> 00:01:22.368
the next page.

23
00:01:22.368 --> 00:01:29.109
You can just request some JSON and
basically keep everything in the client.

24
00:01:29.109 --> 00:01:33.257
This has allowed us,
not requiring these full page reloads,

25
00:01:33.257 --> 00:01:38.361
allows us to kinda navigate to new pages
and make it feel more native like with

26
00:01:38.361 --> 00:01:43.975
things like animations and transitions,
giving better immersive experiences.

27
00:01:43.975 --> 00:01:48.454
And so client side routing is
the main way we do routing in Solid.

28
00:01:48.454 --> 00:01:51.162
Big part of our routing it's always
been something called nested routing.

29
00:01:51.162 --> 00:01:53.689
And again,
I'm not gonna give a full history here,

30
00:01:53.689 --> 00:01:56.227
nested routing existed back
in like the Rails days.

31
00:01:56.227 --> 00:02:02.435
It got into JavaScript I think, around
2011-ish Ember.js had nested routing.

32
00:02:02.435 --> 00:02:06.603
And then very shortly after
around 2013-14 period

33
00:02:06.603 --> 00:02:09.928
React Router 1 came out
with nested routing.

34
00:02:09.928 --> 00:02:13.705
And Vue has nested routing and
Svelte has nested routing,

35
00:02:13.705 --> 00:02:16.539
literally everybody has nested routing,

36
00:02:16.539 --> 00:02:21.512
all the way up to I think Next.js got
rested nested routing more recently.

37
00:02:21.512 --> 00:02:25.765
But the idea here is that
instead of re-rendering

38
00:02:25.765 --> 00:02:30.826
the whole page on navigation,
we kind of view it almost like

39
00:02:30.826 --> 00:02:35.503
a series of layers that are tied
to sections of the URL.

40
00:02:35.503 --> 00:02:40.026
So if you had to say, a list of shapes,
that would be responsible for, say,

41
00:02:40.026 --> 00:02:44.575
an outer layer and then the specific
shape could be that inner content area.

42
00:02:44.575 --> 00:02:48.932
And that way if we just change part of
the URL, we only change part of the UI.

43
00:02:48.932 --> 00:02:52.174
And this was very important to
Solid right from the beginning,

44
00:02:52.174 --> 00:02:53.887
we never considered anything but

45
00:02:53.887 --> 00:02:57.818
nested routing because our rendering
renders once and uses real dom notes.

46
00:02:57.818 --> 00:03:01.295
So it's very awkward if we were going
to like re-render the whole page,

47
00:03:01.295 --> 00:03:03.183
we'd be recreating all the dom notes.

48
00:03:03.183 --> 00:03:09.097
So nested routing has been there
with Solid since the beginning and

49
00:03:09.097 --> 00:03:12.274
it's kinda very core to what we do.

50
00:03:12.274 --> 00:03:18.403
But, it also serves as a really logical
place to break your code apart, right?

51
00:03:18.403 --> 00:03:22.503
You can view each section of your route
as a separate JavaScript bundle, and

52
00:03:22.503 --> 00:03:26.986
then we can do smart things like look at,
okay, if you're navigating to this URL,

53
00:03:26.986 --> 00:03:30.344
we know exactly what JavaScript
bundles you're gonna need.

54
00:03:30.344 --> 00:03:33.656
And this lets us like ,load
it incrementally in pieces,

55
00:03:33.656 --> 00:03:36.351
much smaller pieces
because of this nesting.

56
00:03:36.351 --> 00:03:40.512
So if you end up swapping all
the sections, then we can go we're gonna

57
00:03:40.512 --> 00:03:44.825
need these three pieces and we're gonna
load them all in parallel up front.

58
00:03:44.825 --> 00:03:47.722
But then if you just switch one after
that, then we get the next piece.

59
00:03:47.722 --> 00:03:50.243
So this is all kind of
part of the mechanism, but

60
00:03:50.243 --> 00:03:53.024
lazy loading is still async and
it still takes time.

61
00:03:53.024 --> 00:03:57.659
So kinda gonna start building the case
here why we need to be concerned with

62
00:03:57.659 --> 00:04:01.423
asynchronously when working
with our routing solutions.

63
00:04:01.423 --> 00:04:05.630
Because we both have to load the code and
we have to load the data.

64
00:04:05.630 --> 00:04:11.928
Speaking of which, because this was very
key to us, right from the early days,

65
00:04:11.928 --> 00:04:17.201
Solid came up with this kind of idea
of what we call data functions.

66
00:04:17.201 --> 00:04:23.402
And it's similar,
if you've seen some other frameworks they

67
00:04:23.402 --> 00:04:29.487
have like concept of,
like get server side props or loaders.

68
00:04:29.487 --> 00:04:32.822
But the difference is we build this
as a client solution before we

69
00:04:32.822 --> 00:04:34.011
even considered SSR.

70
00:04:34.011 --> 00:04:37.965
So our data functions are built into
the router and not into the framework,

71
00:04:37.965 --> 00:04:39.425
and they've always been.

72
00:04:39.425 --> 00:04:45.480
And essentially the idea is that this
function runs both on the client and

73
00:04:45.480 --> 00:04:46.579
the server.

74
00:04:46.579 --> 00:04:50.758
But the idea is you just set up, you can
create some signals or stores in here, and

75
00:04:50.758 --> 00:04:52.312
you kind of just pass them in.

76
00:04:52.312 --> 00:04:56.516
And if you do data fetching what we'll
do is we'll actually trigger the data

77
00:04:56.516 --> 00:05:00.392
fetching for each segment of the route
even the nested ones in parallel

78
00:05:00.392 --> 00:05:02.115
to kinda prevent waterfalls.

79
00:05:02.115 --> 00:05:04.463
So essentially you're
loading all the code and

80
00:05:04.463 --> 00:05:06.641
all the data in parallel
on any navigation.

81
00:05:08.718 --> 00:05:11.955
And you might be looking at this and
go, okay, this is fine but

82
00:05:11.955 --> 00:05:14.589
what is this createResource
thing in front of us?

83
00:05:14.589 --> 00:05:18.954
I'm trying to get ahead of it and said,
I kinda hint to that earlier, but

84
00:05:18.954 --> 00:05:23.549
in Solid, one of our primitives that
are built in is this idea of a resource.

85
00:05:23.549 --> 00:05:28.934
And what a resource is, is it's
basically a promise to signal converter.

86
00:05:28.934 --> 00:05:30.640
It's the easiest way I can put it.

87
00:05:30.640 --> 00:05:34.440
It handles lots of things like loadings or
gives indicators or

88
00:05:34.440 --> 00:05:37.958
things like loading state and
error states and whatnot.

89
00:05:37.958 --> 00:05:41.936
And essentially, it takes in a source,
which in this case,

90
00:05:41.936 --> 00:05:46.779
the user ID, it could be a query could
be whatever, something reactive.

91
00:05:46.779 --> 00:05:50.711
And then it feeds it
into an async function,

92
00:05:50.711 --> 00:05:53.802
that way you can do your fetching.

93
00:05:53.802 --> 00:05:59.377
And then whenever the source changes
the async function updates and

94
00:05:59.377 --> 00:06:06.044
you have this primitive that gives you the
data and you can use inside your views.

95
00:06:06.044 --> 00:06:11.344
And the thing is there is one
important detail to understand

96
00:06:11.344 --> 00:06:16.010
about resources and
make them a little bit special.

97
00:06:16.010 --> 00:06:20.651
Resources are basically
their source of truth

98
00:06:20.651 --> 00:06:25.890
isn't where they're created,
but where they are read.

99
00:06:25.890 --> 00:06:29.379
This is why we have a special
primitive for this, and

100
00:06:29.379 --> 00:06:33.837
we're not just using an effect
that writes a signal or something.

101
00:06:33.837 --> 00:06:39.709
It's because we care about where you
use them in your user interface.

102
00:06:39.709 --> 00:06:44.960
And what I mean by this, let's pretend
our fetch fails and we throw an error.

103
00:06:44.960 --> 00:06:48.530
It doesn't error where
we created the resource,

104
00:06:48.530 --> 00:06:52.023
it actually throws where
you read the resource.

105
00:06:52.023 --> 00:06:59.146
So this is important because it allows
it to be co-located where the UI is.

106
00:06:59.146 --> 00:07:05.584
So we understand like what UI is
affected by the resource failing.

107
00:07:05.584 --> 00:07:06.277
And.

108
00:07:08.885 --> 00:07:13.570
There's a reason for this,
we care about async consistency.

109
00:07:13.570 --> 00:07:19.966
Almost as much as Dan Abramov from
React care about consistency.

110
00:07:19.966 --> 00:07:23.350
That's really the goal of async
handling in Solid.js.

111
00:07:23.350 --> 00:07:25.164
We want to ensure that
our UIs stay in sync.

112
00:07:25.164 --> 00:07:28.773
That's the whole thing with reactivity,
everything stays in sync.

113
00:07:28.773 --> 00:07:31.923
And we wanna ensure that
we don't get tearing,

114
00:07:31.923 --> 00:07:37.065
ie showing inconsistent state between
what it has resolved and what has not.

115
00:07:37.065 --> 00:07:40.567
Have you ever been on a site where
you navigated between tabs and

116
00:07:40.567 --> 00:07:43.026
the tab updates, but the content hasn't?

117
00:07:43.026 --> 00:07:48.707
So you might be like looking at a list
of movies you click on like a filter or

118
00:07:48.707 --> 00:07:53.922
like, show me my movies and
the tab proceeds the content loading,

119
00:07:53.922 --> 00:07:57.202
that's the tearing I'm talking about.

120
00:07:57.202 --> 00:08:01.500
And the reason we're trying to
avoid it is because if there's

121
00:08:01.500 --> 00:08:05.388
this inconsistency between
what we show the end user and

122
00:08:05.388 --> 00:08:10.200
like what the internal state of
the app is, it can lead to bad things.

123
00:08:10.200 --> 00:08:13.762
Mostly because we trust the end
user when they perform an action,

124
00:08:13.762 --> 00:08:16.558
we trust their intent and
they trust what they see.

125
00:08:16.558 --> 00:08:20.134
So if you break that trust you have
a problem because they think they're

126
00:08:20.134 --> 00:08:24.085
seeing something and they interact with
it when it's really something else.

127
00:08:24.085 --> 00:08:28.721
Let's pretend you could, heart,
let's say you have a list of users and

128
00:08:28.721 --> 00:08:32.601
you're scrolling through them,
and you can say like them.

129
00:08:32.601 --> 00:08:34.370
If you switch to the next user, but

130
00:08:34.370 --> 00:08:38.523
they're still showing the old users info
because you haven't showed them yet.

131
00:08:38.523 --> 00:08:42.661
But you've conceptually made the move
because you've updated the ID, and

132
00:08:42.661 --> 00:08:44.283
then click heart in that gap.

133
00:08:44.283 --> 00:08:46.096
Which user are they liking?

134
00:08:46.096 --> 00:08:49.806
Are they liking the user that
you're showing them or the user for

135
00:08:49.806 --> 00:08:51.254
the ID that's updated?

136
00:08:51.254 --> 00:08:54.561
This is very important to
us as kinda consistency.

137
00:08:54.561 --> 00:08:57.967
And the truth of the matter is,

138
00:08:57.967 --> 00:09:03.084
there's different ways
we handle this in UI.

139
00:09:03.084 --> 00:09:07.382
But to handle it,
we have this mechanism called suspense.

140
00:09:07.382 --> 00:09:11.985
And the idea is just like I was
talking about throwing the errors when

141
00:09:11.985 --> 00:09:13.371
there's an error.

142
00:09:13.371 --> 00:09:17.800
Well, similar to error boundaries we
detect when you read a resource and

143
00:09:17.800 --> 00:09:21.371
it's out of date,
like it's in the process of fetching.

144
00:09:21.371 --> 00:09:25.109
And we use a slightly different
mechanism than some other libraries that

145
00:09:25.109 --> 00:09:26.278
implement suspense.

146
00:09:26.278 --> 00:09:28.911
Instead of focusing on
like throwing promises,

147
00:09:28.911 --> 00:09:31.618
because that would cause
a lot of re-rendering.

148
00:09:31.618 --> 00:09:35.781
What we do is we use context and
we look up the tree,

149
00:09:35.781 --> 00:09:40.444
and instead of halting execution,
because halting

150
00:09:40.444 --> 00:09:45.520
execution caused a lot of rerunning and
a lot of waterfalls.

151
00:09:45.520 --> 00:09:48.553
We just tell the parent that
would be doing the conditional,

152
00:09:48.553 --> 00:09:50.999
kinda like the show component,
conceptually.

153
00:09:50.999 --> 00:09:54.309
Hey, don't show this content yet.

154
00:09:54.309 --> 00:09:57.286
Show the loading indicator, right?

155
00:09:57.286 --> 00:10:01.748
The whole point of this is to
keep our UIs consistent and

156
00:10:01.748 --> 00:10:06.795
I guess to show loading indicators,
but that's secondary.

157
00:10:08.574 --> 00:10:15.114
And the very last concept that
I'm gonna talk about today is,

158
00:10:18.342 --> 00:10:22.859
Showing loading indicators are great, and
especially using something like suspense we can

159
00:10:22.859 --> 00:10:25.493
kinda consolidate all
those loading indicators.

160
00:10:25.493 --> 00:10:31.274
But there is one kind of gotcha with it,
so to speak.

161
00:10:31.274 --> 00:10:34.124
It's that sometimes it's really jarring.

162
00:10:34.124 --> 00:10:36.970
I already talked about the experience
when you change the tabs and

163
00:10:36.970 --> 00:10:37.908
you see the old data.

164
00:10:37.908 --> 00:10:39.660
But changing the tabs and

165
00:10:39.660 --> 00:10:44.588
always falling back to this kinda
loading thing is also very jarring.

166
00:10:44.588 --> 00:10:48.222
What we kind of ideally want
is show the current state,

167
00:10:48.222 --> 00:10:52.657
show that current tabs like you
haven't changed the navigation.

168
00:10:52.657 --> 00:10:57.335
Show everything the way it was except
maybe give some kinda indication that it's

169
00:10:57.335 --> 00:10:57.963
changed.

170
00:10:57.963 --> 00:11:01.917
And then when you complete
loading the new page,

171
00:11:01.917 --> 00:11:05.396
then show it all finished, essentially.

172
00:11:05.396 --> 00:11:09.705
Of course, that's a little hard
to do because how do you have

173
00:11:09.705 --> 00:11:13.084
an interactive page being
showed to the user and

174
00:11:13.084 --> 00:11:18.761
at the same time be already rendering
the next page that they're about to go to?

175
00:11:18.761 --> 00:11:24.451
And for that, we needed to do
something called concurrent rendering.

176
00:11:24.451 --> 00:11:29.952
And to do concurrent rendering, you kind
of we've already seen reactivity today,

177
00:11:29.952 --> 00:11:33.060
but we had to actually
fork the reactive graph.

178
00:11:33.060 --> 00:11:34.827
That's the best way I can explain it.

179
00:11:34.827 --> 00:11:39.890
It's kinda like doing merges on GitHub,
where we basically forked what

180
00:11:39.890 --> 00:11:45.368
we have at any point where we recognize
this is a change, this is a transition,

181
00:11:45.368 --> 00:11:49.618
this is something that we want
to do kinda in the background.

182
00:11:49.618 --> 00:11:54.299
We just set that signal and every
downstream change that happens after that,

183
00:11:54.299 --> 00:11:56.181
we just do in a separate graph.

184
00:11:56.181 --> 00:11:59.722
The current UI stays interactive and
updates.

185
00:11:59.722 --> 00:12:03.936
And then as those changes come
in we merge them at the end and

186
00:12:03.936 --> 00:12:08.163
give you the new state once
everything async is finished.

187
00:12:08.163 --> 00:12:12.384
This is very technical, I'm not gonna
show you how that works to be fair but

188
00:12:12.384 --> 00:12:16.877
I want you to be aware of it because it
does have user interface considerations.

189
00:12:16.877 --> 00:12:22.483
And I have one last tutorial

190
00:12:22.483 --> 00:12:26.877
example to show you.

191
00:12:26.877 --> 00:12:28.146
Where is it?

192
00:12:28.146 --> 00:12:31.780
Before we move on to actually seeing
this in a real life situation.

193
00:12:31.780 --> 00:12:37.451
And that, I wanna show this because
I wanna emphasize the difference

194
00:12:37.451 --> 00:12:42.848
here between the different user
interface experiences, okay?

195
00:12:42.848 --> 00:12:45.861
I have some tabs, all right?

196
00:12:45.861 --> 00:12:49.846
And when I click between those tabs,

197
00:12:49.846 --> 00:12:55.769
I see a loading state immediately and
this isn't bad.

198
00:12:55.769 --> 00:12:59.889
But I wanted to show this because
this is what I'm talking about.

199
00:12:59.889 --> 00:13:03.333
I mean,
this might be Twitter essentially, but

200
00:13:03.333 --> 00:13:08.210
it doesn't feel app like and
it's somewhat jarring to have this UI.

201
00:13:08.210 --> 00:13:10.568
If you like this UI,
it's fine, you can do this.

202
00:13:10.568 --> 00:13:14.636
But what we can do essentially is,

203
00:13:14.636 --> 00:13:19.267
we can use transitions as a mechanism to

204
00:13:19.267 --> 00:13:24.600
control this a little
bit more granularly and

205
00:13:24.600 --> 00:13:30.092
basically change it so
that we don't do this.

206
00:13:30.092 --> 00:13:33.431
And I'm gonna again,
jump a little bit ahead here.

207
00:13:33.431 --> 00:13:39.093
But by getting our use transition API
here, we can now return something that

208
00:13:39.093 --> 00:13:45.302
indicates that the transitions running and
the function to start our transition.

209
00:13:45.302 --> 00:13:49.001
And by wrapping our signal
right in a transition,

210
00:13:49.001 --> 00:13:54.121
we're basically isolating that
change from the rest of the system.

211
00:13:54.121 --> 00:13:58.711
And so for our UI, this simple
change of just saying, hey, wrap,

212
00:13:58.711 --> 00:14:03.896
this one setter with our start for
our transition, allows us to indicate

213
00:14:03.896 --> 00:14:08.826
to Solid that, hey, any existing
suspense boundaries on the page,

214
00:14:08.826 --> 00:14:14.360
we want those to, actually stay in
the past, rather than go to the fallback.

215
00:14:16.507 --> 00:14:18.548
And then, we can use our class lists here,

216
00:14:18.548 --> 00:14:21.634
to just give some kinda pending
indicator while it's working.

217
00:14:21.634 --> 00:14:28.131
And what this does is when we switch,
notice that this won't change right away.

218
00:14:28.131 --> 00:14:31.434
Instead, it's slightly dimmed
before we actually switched.

219
00:14:31.434 --> 00:14:33.823
And honestly,
you can use different effects if you want,

220
00:14:33.823 --> 00:14:36.079
this might not be the most
convincing version of this.

221
00:14:36.079 --> 00:14:40.282
But the idea is we're staying in
the past until the data is loaded and

222
00:14:40.282 --> 00:14:44.958
then giving, I used a CSS kinda
transition for that, like slow blurring.

223
00:14:44.958 --> 00:14:47.964
But gives the end user an indicator
that something has changed.

224
00:14:47.964 --> 00:14:52.934
And actually what I'm gonna do here is
inside our component, which has our data,

225
00:14:52.934 --> 00:14:56.405
we're just faking a delay
with a resource essentially.

226
00:14:56.405 --> 00:14:58.850
Resources trigger this automatically,

227
00:14:58.850 --> 00:15:02.214
we can just make this delay
a little bit more emphasized.

228
00:15:02.214 --> 00:15:07.370
So maybe 800 milliseconds
on a random thing,

229
00:15:07.370 --> 00:15:14.421
and actually maybe I should actually
emphasize the fixed amount.

230
00:15:14.421 --> 00:15:19.454
You could still see that loading when we
initially load the page, but now when

231
00:15:19.454 --> 00:15:24.424
we switch between the routes we get
this kind of smoother transition thing.

232
00:15:24.424 --> 00:15:28.234
People might debate whether this is
better UI or not, but we think it is and

233
00:15:28.234 --> 00:15:32.597
the reason I'm talking about this right
now is because Solid's router transitions

234
00:15:32.597 --> 00:15:33.343
are baked in.

235
00:15:33.343 --> 00:15:39.135
You don't you don't write the transitions
yourself, it's just how it works, okay?

236
00:15:39.135 --> 00:15:42.480
So that's the story,
first party support for

237
00:15:42.480 --> 00:15:47.641
suspense transitions and data fetching
all built into the framework.

238
00:15:47.641 --> 00:15:50.501
We're pretty happy where we've gotten
to it, we've had these features for

239
00:15:50.501 --> 00:15:51.385
about three years now.

240
00:15:51.385 --> 00:15:55.418
And we've been playing with them and
testing them and

241
00:15:55.418 --> 00:15:58.293
kind of evolving them over that time.

