WEBVTT

1
00:00:00.012 --> 00:00:03.244
We have our working Hello.

2
00:00:03.244 --> 00:00:07.149
And let's start kind of,
we're gonna build a To Do app.

3
00:00:07.149 --> 00:00:10.326
It does have a specific structure to it.

4
00:00:10.326 --> 00:00:14.743
So that is something that we have to
keep in mind as we're building it out.

5
00:00:14.743 --> 00:00:19.584
But I'm gonna type this up piece by
piece and we're gonna work through it.

6
00:00:19.584 --> 00:00:24.228
By the end, this might not be like
the full TodoMVC example, but

7
00:00:24.228 --> 00:00:26.986
we can kind of construct this as we go.

8
00:00:26.986 --> 00:00:29.955
So, let's forget about that h1.

9
00:00:29.955 --> 00:00:32.739
Let's get some thing in it.

10
00:00:32.739 --> 00:00:37.922
The way that this works is it starts with

11
00:00:37.922 --> 00:00:44.215
a section that has a class,
which is a todoapp.

12
00:00:45.379 --> 00:00:50.206
And which has a nested header in it.

13
00:00:50.206 --> 00:00:53.745
Just get the base styles working here for
us,

14
00:00:53.745 --> 00:00:58.507
which has a class,
which is called header unsurprisingly.

15
00:00:58.507 --> 00:01:01.753
And inside our header, we're going to,

16
00:01:01.753 --> 00:01:06.867
I guess we gonna make an h1 that
like introduces the whole thing.

17
00:01:06.867 --> 00:01:07.777
What is it?

18
00:01:07.777 --> 00:01:12.197
Todo, todos maybe?

19
00:01:12.197 --> 00:01:17.072
Okay, this is starting to look like
something I've seen before and

20
00:01:17.072 --> 00:01:19.221
we need an input, all right?

21
00:01:22.282 --> 00:01:29.797
And unlike HTML, which has void elements,
you always have to close an input in JSX.

22
00:01:29.797 --> 00:01:36.710
It's XML based and
this class will be new-todo.

23
00:01:36.710 --> 00:01:40.652
And let's do here.

24
00:01:40.652 --> 00:01:45.903
Placeholder, I think, what was it?

25
00:01:45.903 --> 00:01:48.688
What needs to be done?

26
00:01:52.226 --> 00:01:53.595
Okay.

27
00:01:55.498 --> 00:02:01.222
Okay, this is already starting to
look a bit like classic Todo MVC.

28
00:02:01.222 --> 00:02:05.833
Okay, so we need to probably create

29
00:02:05.833 --> 00:02:10.914
some state here to where we're going.

30
00:02:10.914 --> 00:02:18.991
So I'm gonna start this
by creating a signal.

31
00:02:18.991 --> 00:02:23.140
And our signal is gonna be an array,
I guess,

32
00:02:23.140 --> 00:02:28.068
and it's gonna be called todos and
setTodos, okay?

33
00:02:31.964 --> 00:02:38.489
And import createSignal from solid-js if
it didn't autocomplete for you, okay?

34
00:02:38.489 --> 00:02:43.453
And the first thing that we
need to be aware of here is

35
00:02:43.453 --> 00:02:47.147
we're gonna use our show component,

36
00:02:47.147 --> 00:02:53.392
which probably should be imported
also from solid-js, yeah.

37
00:02:53.392 --> 00:02:58.297
And we're only gonna
show most of this when

38
00:02:58.297 --> 00:03:02.257
todos.length is bigger than 0.

39
00:03:02.257 --> 00:03:06.040
So when there's actually a todos.length,
okay?

40
00:03:06.040 --> 00:03:11.828
And then we're gonna wanna
iterate over our todos.

41
00:03:11.828 --> 00:03:14.408
This is probably where I'm
gonna start this here.

42
00:03:14.408 --> 00:03:19.607
So we're gonna make ul, or

43
00:03:19.607 --> 00:03:26.170
list with class "todo-list".

44
00:03:26.170 --> 00:03:31.423
And then for each todos,

45
00:03:31.423 --> 00:03:38.434
call it as a function, important.

46
00:03:38.434 --> 00:03:44.200
And then we're gonna break into this and

47
00:03:44.200 --> 00:03:48.609
for each todo, we're going to

48
00:03:48.609 --> 00:03:53.029
make it todo like this, okay?

49
00:03:53.029 --> 00:03:57.664
And it's gonna be a list item.

50
00:03:57.664 --> 00:04:04.025
I think, yeah, we'll make a list item and

51
00:04:04.025 --> 00:04:09.699
it's gonna have class "todo" and,

52
00:04:12.337 --> 00:04:15.305
Yeah, a little bit of boilerplate here.

53
00:04:15.305 --> 00:04:21.993
But this example doesn't actually have
a ton of HTML or CSS, generally speaking.

54
00:04:21.993 --> 00:04:27.580
So we just need to kind of get
through the little bit here.

55
00:04:27.580 --> 00:04:31.210
div with a class of "view" and

56
00:04:31.210 --> 00:04:36.161
I'm gonna stop here for a moment and

57
00:04:36.161 --> 00:04:40.948
literally just put todo.title or

58
00:04:40.948 --> 00:04:46.410
something in here just so we can see it.

59
00:04:46.410 --> 00:04:50.800
And we're gonna add some data
right now just for a moment so

60
00:04:50.800 --> 00:04:53.945
we can actually see what we're editing.

61
00:04:53.945 --> 00:04:58.325
So in our array to start let's
just add something in there.

62
00:04:58.325 --> 00:05:04.428
The shape of this is gonna be like id,
and I'm gonna say the id:1.

63
00:05:04.428 --> 00:05:07.837
And then title is let's say,

64
00:05:12.004 --> 00:05:16.621
Learn SolidJS, okay, and

65
00:05:16.621 --> 00:05:22.254
then completed: false, okay?

66
00:05:22.254 --> 00:05:28.435
Let's add the label actually around this,
which I think is what I'm missing.

67
00:05:28.435 --> 00:05:35.835
Let's add, This label.

68
00:05:35.835 --> 00:05:38.245
Sorry, did I have an extra return somewhere?

69
00:05:38.245 --> 00:05:39.407
&gt;&gt; No, you need one.

70
00:05:39.407 --> 00:05:41.045
&gt;&gt; I need one, of course, thank you.

71
00:05:41.045 --> 00:05:45.032
Yeah, I don't know why, sometimes I
think the autocomplete auto does it.

72
00:05:45.032 --> 00:05:49.627
We don't actually need the second
set of curly braces or

73
00:05:49.627 --> 00:05:52.968
any of this stuff, it just, thank you.

74
00:05:52.968 --> 00:05:57.807
So yeah,
now at least we're seeing something here.

75
00:05:57.807 --> 00:06:03.599
Make sure that you have the todos here as
a function call where you access them and

76
00:06:03.599 --> 00:06:09.659
then make sure that, yes, that is actually
returning the DOM elements in the JSX.

77
00:06:09.659 --> 00:06:11.395
Easy thing to do with JSX unfortunately.

78
00:06:11.395 --> 00:06:16.624
Okay, so let's build this out
a little bit more coz our list

79
00:06:16.624 --> 00:06:21.555
item should also have not just a label,
but a checkbox.

80
00:06:21.555 --> 00:06:24.273
So we're gonna make another input element.

81
00:06:24.273 --> 00:06:32.397
And we're going to make
this one type "checkbox" and

82
00:06:32.397 --> 00:06:38.584
give it class="toggle", all right?

83
00:06:38.584 --> 00:06:42.876
Nice, should be getting some, okay,

84
00:06:42.876 --> 00:06:46.583
styles coming in through there and,

85
00:06:49.522 --> 00:06:52.660
See if this is formatting it.

86
00:06:52.660 --> 00:06:58.000
And then we also need the button to remove

87
00:06:58.000 --> 00:07:02.564
the todo, class = "destroy".

88
00:07:02.564 --> 00:07:09.728
And let's close our button and
give it some text.

89
00:07:09.728 --> 00:07:14.336
I think it's just,
I'm trying to remember what it is.

90
00:07:14.336 --> 00:07:16.556
Actually, it shouldn't have text.

91
00:07:16.556 --> 00:07:23.351
It should just be styled that way.

92
00:07:23.351 --> 00:07:28.815
This can actually be
a self-closing element.

93
00:07:28.815 --> 00:07:29.577
Yeah, and there we are.

94
00:07:29.577 --> 00:07:33.041
If you hover, you'll see that there's
an X that shows up by just having

95
00:07:33.041 --> 00:07:34.443
this class to destroy on it.

96
00:07:34.443 --> 00:07:39.547
So CSS styles built into to do MVC
make life a lot easier for us here.

97
00:07:39.547 --> 00:07:41.543
So yeah, this is not functional.

98
00:07:41.543 --> 00:07:42.499
But at least,

99
00:07:42.499 --> 00:07:47.370
we have a kind of the basic UI that
we're gonna be using here, all right.

100
00:07:49.645 --> 00:07:52.447
Cool, so everybody gets so far?

101
00:07:55.866 --> 00:08:00.881
All right, so now obviously
this is not much of an app so

102
00:08:00.881 --> 00:08:05.036
we actually have to build
some logic into it.

103
00:08:05.036 --> 00:08:09.238
And for the todo example,

104
00:08:09.238 --> 00:08:15.159
what this means is actually creating

105
00:08:15.159 --> 00:08:19.936
some kind of global counter.

106
00:08:19.936 --> 00:08:25.514
So I'm just gonna call it counter and
with counter = 0;.

107
00:08:25.514 --> 00:08:27.317
This is just how we kinda keep track.

108
00:08:27.317 --> 00:08:30.072
It's like our full database for now.

109
00:08:30.072 --> 00:08:35.595
Essentially, we need the ID,
unique identifier.

