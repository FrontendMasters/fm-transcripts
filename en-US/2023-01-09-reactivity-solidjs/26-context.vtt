WEBVTT

1
00:00:00.179 --> 00:00:06.617
The next thing that I wanna
actually show is context.

2
00:00:06.617 --> 00:00:10.225
I keep on showing this demo where we
pull the signals out and just go, look,

3
00:00:10.225 --> 00:00:11.732
it's global, that's fine.

4
00:00:11.732 --> 00:00:15.823
But when you have things to consider,
like server side rendering,

5
00:00:15.823 --> 00:00:18.713
you might not want to have
a truly global state.

6
00:00:18.713 --> 00:00:21.196
Because it could be
shared between requests.

7
00:00:21.196 --> 00:00:26.814
So for that it still makes sense
to put data in your app tree.

8
00:00:26.814 --> 00:00:31.640
And for
that what we do is we use something called

9
00:00:31.640 --> 00:00:36.355
context which allows us
to define a provider.

10
00:00:36.355 --> 00:00:41.448
And what a provider does is it basically
is a way of injecting state into our tree.

11
00:00:41.448 --> 00:00:46.440
And then somewhere further down
in the tree, we can basically use

12
00:00:46.440 --> 00:00:51.996
another primitive to pull that state
out and be able to read it directly.

13
00:00:51.996 --> 00:00:58.910
So I kind of made a very simple counter
provider here where I created a signal.

14
00:00:58.910 --> 00:01:06.062
And I'm keeping Solid's convention of
returning an array where there's a count.

15
00:01:06.062 --> 00:01:11.262
And then made a few named operations
like an increment and decrement.

16
00:01:11.262 --> 00:01:15.494
This is a very common pattern in Solid, where
instead of passing the setter straight

17
00:01:15.494 --> 00:01:19.195
through you might actually make
a specific update functions, right?

18
00:01:19.195 --> 00:01:21.557
So this is a simple counter.

19
00:01:21.557 --> 00:01:27.922
And then our provider just
renders its children in between.

20
00:01:27.922 --> 00:01:30.636
And essentially somewhere further down,

21
00:01:30.636 --> 00:01:35.166
we have this nested component that
wants to be able to use our provider.

22
00:01:35.166 --> 00:01:37.145
That's the idea here.

23
00:01:37.145 --> 00:01:39.672
So to get started with a provider,

24
00:01:39.672 --> 00:01:44.300
all we have to do is decide where
we want to inject it in our code.

25
00:01:44.300 --> 00:01:48.320
So what I'm gonna do here is I've
got the CounterProvider imported.

26
00:01:48.320 --> 00:01:52.221
And I'm just going to,
sorry, CounterProvider, and

27
00:01:52.221 --> 00:01:55.043
we're gonna wrap our whole app with it.

28
00:01:55.043 --> 00:02:01.796
It's very common to have
like global providers,

29
00:02:01.796 --> 00:02:09.524
so this way now our context is
available to the whole app.

30
00:02:09.524 --> 00:02:14.374
And then inside our
specific nested component,

31
00:02:14.374 --> 00:02:21.005
what I did was the way context works
is you create a context object.

32
00:02:21.005 --> 00:02:25.882
And then you generally kinda wrap your own
provider from that created context object.

33
00:02:25.882 --> 00:02:29.640
But there's a useContext that
lets you take that context and

34
00:02:29.640 --> 00:02:31.526
use it in that specific scope.

35
00:02:31.526 --> 00:02:35.073
And I've just wrapped this in a used
counter for convention and for

36
00:02:35.073 --> 00:02:35.903
cleanliness.

37
00:02:35.903 --> 00:02:40.491
And what this lets us do is even though
this nested component it's much further

38
00:02:40.491 --> 00:02:41.545
down in the tree.

39
00:02:41.545 --> 00:02:47.459
It's not up here, it's in this other
component because it's apparent to it.

40
00:02:47.459 --> 00:02:52.809
We have the ability to basically get

41
00:02:52.809 --> 00:02:57.803
our count, get our increment and

42
00:02:57.803 --> 00:03:03.879
decrement functions from our counter.

43
00:03:03.879 --> 00:03:09.865
And then, We

44
00:03:09.865 --> 00:03:14.412
have the ability to use our count signal.

45
00:03:14.412 --> 00:03:17.230
And this can be a store,
you can put whatever you want in there.

46
00:03:17.230 --> 00:03:22.789
And then we have the ability to
go onClick, let's increment.

47
00:03:26.470 --> 00:03:32.238
onClick, let's decrement.

48
00:03:32.238 --> 00:03:37.142
And if all went well, we have the state

49
00:03:37.142 --> 00:03:41.289
now being injected from above.

50
00:03:41.289 --> 00:03:43.812
So this is this very powerful thing.

51
00:03:43.812 --> 00:03:48.089
It's just important to kinda note that,
in this case,

52
00:03:48.089 --> 00:03:53.006
it's not just calling the function
here and passing the value.

53
00:03:53.006 --> 00:03:58.734
You're actually creating the reactivity
that you wanna pass through.

54
00:03:58.734 --> 00:04:02.866
So between stores and signals, which can
be used in and outside the components,

55
00:04:02.866 --> 00:04:05.862
we now have ability to kind of
inject kind of global state.

56
00:04:05.862 --> 00:04:08.488
It can be hierarchical, you can use it for
parts of the app, you can use it for

57
00:04:08.488 --> 00:04:09.033
the whole app.

58
00:04:09.033 --> 00:04:12.948
So let's you can manage state more
independently of the component tree.

59
00:04:12.948 --> 00:04:14.550
And it's important to note here there,

60
00:04:14.550 --> 00:04:17.577
is a no performance downside of using
this approach, if you think about it.

61
00:04:17.577 --> 00:04:20.955
Because this doesn't cause any
children to ever rerender.

62
00:04:20.955 --> 00:04:24.269
Just because this signal up here
at the top of the app changed,

63
00:04:24.269 --> 00:04:27.987
it doesn't mean we have to trigger
rerendering the rest of the page.

64
00:04:27.987 --> 00:04:29.683
We're just passing a signal through.

65
00:04:29.683 --> 00:04:33.491
So like before, where our components
literally all updated independently

66
00:04:33.491 --> 00:04:35.998
with all the signals,
it's the same thing here.

67
00:04:35.998 --> 00:04:38.829
You can put as much state
as you want in the context.

68
00:04:38.829 --> 00:04:43.741
You can do updates multiple times
a second, 60 FPS in your context.

69
00:04:43.741 --> 00:04:46.036
You're not gonna have any problems here.

70
00:04:46.036 --> 00:04:51.346
It's a single mechanism and
it's super performant.

71
00:04:51.346 --> 00:04:56.267
And you can start seeing with these kind
of powers, we actually can basically

72
00:04:56.267 --> 00:05:01.127
do almost all state management within
Solid without a third party library.

73
00:05:01.127 --> 00:05:04.226
But some people do wanna
use a third party library.

74
00:05:04.226 --> 00:05:08.380
Maybe Redux or something, or

75
00:05:08.380 --> 00:05:12.376
Zustand these days.

76
00:05:12.376 --> 00:05:18.529
And you can do that with Solid, because
we have a little trick up our sleeves.

77
00:05:18.529 --> 00:05:25.453
Which is I made a very simple
use Redux wrapper here.

78
00:05:25.453 --> 00:05:28.937
But what we do essentially
is we can get a store.

79
00:05:28.937 --> 00:05:33.039
And if you're familiar with Redux,
the store has a getState() function.

80
00:05:33.039 --> 00:05:38.646
So I'm just passing a Redux
store into this useRedux hook.

81
00:05:38.646 --> 00:05:43.391
And the whole key here is their stores
have a subscribe function that whenever

82
00:05:43.391 --> 00:05:47.855
they update, they call this function
with the new data, essentially.

83
00:05:47.855 --> 00:05:52.701
And this could be RxJS, this could be
any third party immutable data store.

84
00:05:52.701 --> 00:05:56.252
Solid has, for the stores,
I called it state for

85
00:05:56.252 --> 00:06:01.032
some reason, but this is the store here,
a reconcile modifier.

86
00:06:01.032 --> 00:06:07.200
And if you do a reconcile modifier,
you can pass large immutable data states.

87
00:06:07.200 --> 00:06:09.936
And the reconcile function
will do a data diff for you.

88
00:06:09.936 --> 00:06:15.596
So it will find the specific key data
points that have changed fine grained.

89
00:06:15.596 --> 00:06:18.756
And then the store which
is already fine grained,

90
00:06:18.756 --> 00:06:22.152
already tied to the specific updates,
will update.

91
00:06:22.152 --> 00:06:25.371
So if you have a whole list of users.

92
00:06:25.371 --> 00:06:30.841
You get some new data from a API call,
fresh data, it will diff the data,

93
00:06:30.841 --> 00:06:35.516
realize that only the street
name on that one street changed.

94
00:06:35.516 --> 00:06:39.762
And then the store will notify the UI
to update that one point in the DOM.

95
00:06:39.762 --> 00:06:44.520
So there is a diffing mechanism when
we need to fallback to it when using

96
00:06:44.520 --> 00:06:45.149
stores.

97
00:06:45.149 --> 00:06:49.530
So we have this ability to
to do kinda similar diffing.

98
00:06:49.530 --> 00:06:51.272
And actually test this and

99
00:06:51.272 --> 00:06:56.430
benchmarks regularly against VDOM
libraries for these kind of cases.

100
00:06:56.430 --> 00:07:01.632
This our diffing performance is very similar
to a virtual DOM library called Inferno.

101
00:07:01.632 --> 00:07:07.214
Just kind of get an idea of the kind
of cost or overhead of using reconcile.

102
00:07:07.214 --> 00:07:10.803
In a lot of cases this kind of
logic is gonna be hidden in your

103
00:07:10.803 --> 00:07:13.755
integration with a third party,
like XState.

104
00:07:13.755 --> 00:07:17.663
We've been working with XState to
get an XState Solid integration.

105
00:07:17.663 --> 00:07:20.160
Reconcile and the stores
are kind of underneath the hood.

106
00:07:20.160 --> 00:07:24.908
And then you just use XState as
you normally would use XState,

107
00:07:24.908 --> 00:07:29.395
except whenever the state changes,
fine-grained updates.

108
00:07:29.395 --> 00:07:36.901
Okay, that's basically it for stores,
and global statement in Solid.

109
00:07:36.901 --> 00:07:40.752
It'll work with the tools you already use,

110
00:07:40.752 --> 00:07:45.970
plus the inbuilt stuff is already
quite capable on its own.

