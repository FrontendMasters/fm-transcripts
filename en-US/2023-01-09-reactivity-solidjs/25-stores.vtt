WEBVTT

1
00:00:00.131 --> 00:00:03.063
Next we're gonna talk about
state management in Solid.

2
00:00:03.063 --> 00:00:07.966
Luckily for us in Solid, state management
is basically the same that we've been

3
00:00:07.966 --> 00:00:09.922
seeing inside our components.

4
00:00:09.922 --> 00:00:12.357
You can put a signal inside you
can put a signal outside and

5
00:00:12.357 --> 00:00:13.491
that's how you do state.

6
00:00:13.491 --> 00:00:20.132
However, we still have a few mechanisms
that give you better control over it.

7
00:00:20.132 --> 00:00:24.620
Both the way you inject
state management and

8
00:00:24.620 --> 00:00:28.264
to control more granular updates.

9
00:00:28.264 --> 00:00:32.818
We're gonna continue actually using
Todo as a bit of an example now

10
00:00:32.818 --> 00:00:35.664
that everyone has a good understanding so

11
00:00:35.664 --> 00:00:40.889
that we can actually understand some
of the nuances of using state in Solid.

12
00:00:40.889 --> 00:00:41.824
So.

13
00:00:44.426 --> 00:00:49.553
I have a Todo example very similar to what
we just built maybe a little less pretty.

14
00:00:49.553 --> 00:00:54.500
But it has the same idea where
we generally are adding Todos,

15
00:00:54.500 --> 00:00:58.001
updating an ID and
adding them to our list.

16
00:00:58.001 --> 00:01:02.480
And this works pretty much as we'd expect.

17
00:01:02.480 --> 00:01:06.326
So we can adjust the Window here.

18
00:01:08.482 --> 00:01:10.511
Get a little bit more width.

19
00:01:10.511 --> 00:01:15.209
We can add Learn Solid.

20
00:01:15.209 --> 00:01:22.209
And we get it list crosses it off same
functionality we've been looking at but

21
00:01:22.209 --> 00:01:28.993
what you probably didn't notice before and
because we didn't look at it,

22
00:01:28.993 --> 00:01:35.047
is I've sneakily added a console.log
inside our Todo item here.

23
00:01:35.047 --> 00:01:39.333
And this is important because
I wanna show you something.

24
00:01:39.333 --> 00:01:43.520
I talked about how we had the four
component to optimize things.

25
00:01:43.520 --> 00:01:48.192
And if I add a Todo, like Learn Solid.

26
00:01:48.192 --> 00:01:49.805
I add a Todo.

27
00:01:49.805 --> 00:01:52.372
We see Creating Learn Solid.

28
00:01:52.372 --> 00:01:58.164
But when I'm checking it, wait,
it's calling creating again.

29
00:01:58.164 --> 00:01:59.885
And you're like,
this is not what I expected.

30
00:01:59.885 --> 00:02:01.302
I don't wanna recreate those DOM nodes.

31
00:02:01.302 --> 00:02:02.949
Why is it doing this?

32
00:02:02.949 --> 00:02:07.175
I mean, I can add a different Todo
as well let's add Hello World.

33
00:02:09.420 --> 00:02:16.516
And that one will also
add its own logs as well.

34
00:02:16.516 --> 00:02:18.551
But you can see that they're
not calling each other.

35
00:02:18.551 --> 00:02:19.450
It's not the whole list.

36
00:02:19.450 --> 00:02:23.291
It's just the one that's changing
is the one that's getting called.

37
00:02:23.291 --> 00:02:27.274
And the reason for that is the way that
we're actually updating our Todos.

38
00:02:27.274 --> 00:02:31.680
If you've noticed we were
spreading them in essentially,

39
00:02:31.680 --> 00:02:37.847
which is fine spending list is fine, but
every time we actually change completed,

40
00:02:37.847 --> 00:02:42.804
we actually cloned the todo item,
and we lost our reference to it.

41
00:02:42.804 --> 00:02:46.104
And essentially it's getting
a new todo item every time.

42
00:02:46.104 --> 00:02:50.375
So while we could sort the list, filter
it, do all the operations we need without,

43
00:02:50.375 --> 00:02:53.501
well filtering is different
because you create and remove.

44
00:02:53.501 --> 00:02:56.339
But while we could sort the list
without creating a remove,

45
00:02:56.339 --> 00:02:59.023
editing the todo is actually
removing that reference.

46
00:02:59.023 --> 00:03:04.561
So with reactivity sometimes you
actually want nested reactivity,

47
00:03:04.561 --> 00:03:09.429
where we wanna actually update
the fact that it's completed

48
00:03:09.429 --> 00:03:13.449
independent of losing our
reference to our todo.

49
00:03:13.449 --> 00:03:18.556
And one way to do that,
which takes a bit of work,

50
00:03:18.556 --> 00:03:26.405
is if we went through and instead of our
todo being just an object like this,

51
00:03:26.405 --> 00:03:31.389
we can create signals
inside each todo item, so

52
00:03:31.389 --> 00:03:35.653
you can have a signal with signals in it.

53
00:03:35.653 --> 00:03:41.090
And I'm just gonna jump ahead here to
show you what that looks like because

54
00:03:41.090 --> 00:03:47.329
it's definitely a bit cumbersome to write
out, so I'll save everyone the effort.

55
00:03:47.329 --> 00:03:51.622
Essentially, now when we make credit t
do we actually add a completed and a set

56
00:03:51.622 --> 00:03:55.861
completed, so we're actually creating
a signal every time we add it todo.

57
00:03:55.861 --> 00:03:59.855
And similarly when we toggl it
we actually find the todo and

58
00:03:59.855 --> 00:04:04.907
then call set completed on it, so
you can nest the reactivity so when we add

59
00:04:04.907 --> 00:04:09.985
our todo here what you're gonna see
is it's gonna log it on creation now.

60
00:04:09.985 --> 00:04:15.124
But when we update it's gonna update the
state, and it's not gonna log in again and

61
00:04:15.124 --> 00:04:19.825
the reason for that is now that completed
is its own signal it knows to only run

62
00:04:19.825 --> 00:04:23.448
the effect on that one checked
expression and not update.

63
00:04:23.448 --> 00:04:27.237
But as I was saying, this is tedious
to do, and you don't wanna do this,

64
00:04:27.237 --> 00:04:28.933
generally it feel a lot of work.

65
00:04:28.933 --> 00:04:33.602
This is how we used to do things
back in 2010, 11, 12 time period.

66
00:04:33.602 --> 00:04:37.267
Luckily, JavaScript has
evolved a lot from then, and

67
00:04:37.267 --> 00:04:42.535
I wanna show you something, a different
permutive, it's called the Store.

68
00:04:42.535 --> 00:04:48.039
And what a Store is, it's a proxy and
by using JavaScript proxies we can

69
00:04:48.039 --> 00:04:54.392
automate the creation of nested signals
without anyone having to worry about it.

70
00:04:54.392 --> 00:04:59.385
You can basically just treat it
like a normal JavaScript object and

71
00:04:59.385 --> 00:05:03.054
under the hood it can get
that reactivity for us.

72
00:05:03.054 --> 00:05:06.718
Crate Store starts a lot
like our crateSignal,

73
00:05:06.718 --> 00:05:11.847
we can just replace it to begin with and
so to create Store our signal

74
00:05:11.847 --> 00:05:17.997
what we're gonna do here is we're gonna
use createStore and passing an array.

75
00:05:17.997 --> 00:05:19.821
Store is fine as long as it's an object.

76
00:05:19.821 --> 00:05:20.418
It's important.

77
00:05:20.418 --> 00:05:22.879
They can't be like a string or a number.

78
00:05:22.879 --> 00:05:25.154
Because proxies can only be objects, and

79
00:05:25.154 --> 00:05:28.475
it's important because we need
to access properties on it.

80
00:05:28.475 --> 00:05:31.491
And the biggest difference
with a Store is.

81
00:05:35.099 --> 00:05:38.468
It is not Is a function anymore, so

82
00:05:38.468 --> 00:05:44.522
we have to update it a little
bit differently, essentially.

83
00:05:44.522 --> 00:05:45.516
So.

84
00:05:48.190 --> 00:05:51.505
This part is actually
funnily very similar,

85
00:05:51.505 --> 00:05:57.006
we can just spread our store now that's
not a function and add our new todo.

86
00:05:57.006 --> 00:06:02.559
However, if we wanna update our store,
instead of doing all this mapping and

87
00:06:02.559 --> 00:06:07.530
immutable type logic, we can use
something called nested setters.

88
00:06:07.530 --> 00:06:12.554
And what a nested setter is going to
let us do is instead of using this

89
00:06:12.554 --> 00:06:18.033
pattern this was very inspired by
immutable.js and Falcor from Netflix

90
00:06:18.033 --> 00:06:23.093
from a while ago, where you can
actually express things as a path.

91
00:06:23.093 --> 00:06:25.902
So we could do something on toggl like.

92
00:06:27.790 --> 00:06:30.246
We can put in path variables,
we can put in functions.

93
00:06:30.246 --> 00:06:35.126
For example, we can go each
section of the setter responds to

94
00:06:35.126 --> 00:06:38.777
a part of the path, so
we can go set the todos.

95
00:06:38.777 --> 00:06:45.195
Where the todo.id =id completed

96
00:06:45.195 --> 00:06:51.617
is the property that we wanna set.

97
00:06:51.617 --> 00:06:56.781
And then we can either pass the value or
in this case what

98
00:06:56.781 --> 00:07:02.302
we're gonna do is we're going
to pass another function.

99
00:07:02.302 --> 00:07:08.142
Because on the final setter
function here we can basically

100
00:07:08.142 --> 00:07:14.831
get the value of completed previously and
set it to not completed.

101
00:07:14.831 --> 00:07:15.365
Now.

102
00:07:18.009 --> 00:07:20.648
I'm gonna say a comma, okay?

103
00:07:20.648 --> 00:07:25.411
This is a little bit much because I'm
showing basically all the possible

104
00:07:25.411 --> 00:07:27.452
syntaxes for a setter at once.

105
00:07:27.452 --> 00:07:31.488
Essentially, if you use
pass specific keys,

106
00:07:31.488 --> 00:07:36.142
you can pass a function to filter it and
you can pass for

107
00:07:36.142 --> 00:07:41.949
the last argument either a value or
a setter function, all right?

108
00:07:41.949 --> 00:07:50.334
But the key part about this is essentially
by using this path based syntax,

109
00:07:50.334 --> 00:07:57.139
we have the ability to update
exactly the spot that changes.

110
00:07:57.139 --> 00:08:00.048
When you do something immutable,
you clone everything and

111
00:08:00.048 --> 00:08:02.271
you lose that information and
what changes.

112
00:08:02.271 --> 00:08:05.766
And the reason we have setters is you
could think or you could use mutation and

113
00:08:05.766 --> 00:08:06.976
just change it directly.

114
00:08:06.976 --> 00:08:08.991
We wanted to keep that
readwrite segregation.

115
00:08:08.991 --> 00:08:11.794
We want to keep that unidirectional flow.

116
00:08:11.794 --> 00:08:15.827
Very important to us to provide
essentially immutable interface.

117
00:08:15.827 --> 00:08:17.595
The ability to set something or

118
00:08:17.595 --> 00:08:22.016
change something is something that
the parent component chooses to pass on.

119
00:08:22.016 --> 00:08:23.744
If it's not something that's implicit,

120
00:08:23.744 --> 00:08:26.630
we didn't want people to just be able
to write stuff all over the place.

121
00:08:26.630 --> 00:08:31.117
The same reason why our signals have
a getter and a setter method and

122
00:08:31.117 --> 00:08:33.692
not just a single function or to do it.

123
00:08:33.692 --> 00:08:37.844
So you're probably most
confused about this filter.

124
00:08:37.844 --> 00:08:40.957
If it makes it any easier to picture.

125
00:08:40.957 --> 00:08:43.060
This could be 0 for it.

126
00:08:43.060 --> 00:08:50.597
So this would be set 0, that todo as 0,
completed to not completed.

127
00:08:50.597 --> 00:08:54.864
So, essentially, we just follow a path

128
00:08:54.864 --> 00:08:59.261
through our object to
be able to get to it.

129
00:08:59.261 --> 00:09:03.046
And I realized when I wrote this almost
immediately that this is probably

130
00:09:03.046 --> 00:09:05.849
the thing where you're like,
this is pretty fancy.

131
00:09:05.849 --> 00:09:10.293
But I just wanted to show this because
this is actually a very concise way to

132
00:09:10.293 --> 00:09:11.447
write this logic.

133
00:09:11.447 --> 00:09:14.194
And now when we have our todos,

134
00:09:14.194 --> 00:09:19.170
we don't call them as a function,
we just pass them in.

135
00:09:19.170 --> 00:09:22.397
And what we're gonna see here
when we Learn Solid, and

136
00:09:22.397 --> 00:09:24.230
I'm gonna bring this up a bit.

137
00:09:26.351 --> 00:09:31.597
It's gonna console log the one time
like we're expecting and when we check

138
00:09:31.597 --> 00:09:37.188
it we're gonna get the same behavior there
as the nested signals we did before.

139
00:09:37.188 --> 00:09:41.999
We're only updates exactly what happens,
again cuz only todo a completed changed.

140
00:09:41.999 --> 00:09:44.208
So we only update the one
fine grain thing.

141
00:09:44.208 --> 00:09:47.652
So, generally speaking in Solid,
we do have two primitives.

142
00:09:47.652 --> 00:09:51.742
I started with signals to keep things
basic, but this the same in view too.

143
00:09:51.742 --> 00:09:56.262
They have rough and reactive because of
the limits of the JavaScript language,

144
00:09:56.262 --> 00:09:59.918
essentially, you have the simple
thing to handle primitives.

145
00:09:59.918 --> 00:10:06.058
And then if you wanna do nesting objects,
you have this ability to use these stores.

146
00:10:06.058 --> 00:10:08.413
Essentially, for people going,
when do I use a Store?

147
00:10:08.413 --> 00:10:10.022
When do I use a signal?

148
00:10:10.022 --> 00:10:11.462
How do I make a choice?

149
00:10:11.462 --> 00:10:16.116
I think about it a lot on things like
model boundaries, so if you're just

150
00:10:16.116 --> 00:10:20.694
doing some simple logic to pipe through,
we were doing the show mode and

151
00:10:20.694 --> 00:10:24.696
all that toggling stuff,
you can use signals in most places.

152
00:10:24.696 --> 00:10:27.542
But when you're getting to
a point where you're like,

153
00:10:27.542 --> 00:10:29.916
I'm gonna model some
more substantial data.

154
00:10:29.916 --> 00:10:31.459
Maybe it came from a database originally.

155
00:10:31.459 --> 00:10:34.876
Lists of models like your
set of users all that.

156
00:10:34.876 --> 00:10:39.354
Stores are the ideal thing there
cuz they can do pinpoint updates.

157
00:10:39.354 --> 00:10:44.024
Essentially, you can update any spot
on it and keep that granularity.

158
00:10:44.024 --> 00:10:49.083
This is a very powerful tool,
and it enables Solid

159
00:10:49.083 --> 00:10:53.781
to do stuff like update
a specific item in a list

160
00:10:53.781 --> 00:10:58.849
without running the list
reconciliation logic.

161
00:10:58.849 --> 00:11:02.234
And without the end user having to
worry that much, just go Create Store.

162
00:11:02.234 --> 00:11:05.041
Now you have your Store,
you don't have to go through and

163
00:11:05.041 --> 00:11:07.509
make a whole bunch of
nested individual signals.

164
00:11:07.509 --> 00:11:11.683
So this is a very powerful API.

165
00:11:11.683 --> 00:11:13.539
And it can be used inside
a components in outside component.

166
00:11:13.539 --> 00:11:15.475
Some people actually like using Stores,

167
00:11:15.475 --> 00:11:17.699
you just in their components
as a replacement.

168
00:11:17.699 --> 00:11:24.221
Stores actually began as a replacement for
the same thing as react creates.

169
00:11:24.221 --> 00:11:27.693
Sorry, React stayed in class components
where everything was plain object,

170
00:11:27.693 --> 00:11:29.332
then people didn't worry about it.

171
00:11:29.332 --> 00:11:32.793
They just go state, create, state,
and then just use the Store and

172
00:11:32.793 --> 00:11:34.271
put all the variables in it.

173
00:11:34.271 --> 00:11:36.866
So, there was a bit of
a style consideration.

174
00:11:36.866 --> 00:11:44.456
And to be fair, Solid does support
some other mutation approaches.

175
00:11:44.456 --> 00:11:46.981
Instead of paths, you can pass something,

176
00:11:46.981 --> 00:11:50.130
a produce function which
lets you do mutable changes.

177
00:11:50.130 --> 00:11:55.577
This is very inspired by Ember.js,
which helps create immutable changes

178
00:11:55.577 --> 00:12:00.689
when in Solids case, this actually
does granular pinpoint changes.

179
00:12:00.689 --> 00:12:01.997
You don't lose that information.

180
00:12:01.997 --> 00:12:06.043
But the reason that we do
a special function again is this,

181
00:12:06.043 --> 00:12:10.254
we wanna make sure that the setter
is separate from the read so

182
00:12:10.254 --> 00:12:13.902
that we can have better
control over applications.

183
00:12:13.902 --> 00:12:15.825
It's a very opinionated approach,

184
00:12:15.825 --> 00:12:19.493
and it's one place where we actually
do hold a fairly strong opinion.

185
00:12:19.493 --> 00:12:23.467
Because this is part of that learning
from frameworks like React around

186
00:12:23.467 --> 00:12:24.799
unidirectional flow.

187
00:12:24.799 --> 00:12:29.346
This is part of how we conquered
the chaos of reactivity.

