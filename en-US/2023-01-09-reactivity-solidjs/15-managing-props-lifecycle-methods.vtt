WEBVTT

1
00:00:00.000 --> 00:00:03.004
Let's talk next about component authoring.

2
00:00:03.004 --> 00:00:07.760
Component authoring is pretty big cuz
obviously, the way you write code and

3
00:00:07.760 --> 00:00:11.920
Solid even if the components don't
have much of a runtime impact,

4
00:00:11.920 --> 00:00:13.870
they are everywhere, right?

5
00:00:13.870 --> 00:00:16.887
That's where you're gonna
spend most of your time.

6
00:00:16.887 --> 00:00:24.305
So again, this kinda gets us
back to what is a component.

7
00:00:24.305 --> 00:00:27.808
And in the same way that reactivities
loses a bit of meaning here,

8
00:00:27.808 --> 00:00:29.857
I have to admit in Solid, it does too.

9
00:00:29.857 --> 00:00:33.337
I mentioned this before, I wasn't
expecting to mention it so early, but

10
00:00:33.337 --> 00:00:35.368
a component is basically an untrack call.

11
00:00:35.368 --> 00:00:37.301
That's essentially all it is.

12
00:00:37.301 --> 00:00:41.330
We call a function with untrack
to isolate its context.

13
00:00:41.330 --> 00:00:43.047
That is basically all it is.

14
00:00:43.047 --> 00:00:47.276
I'd say in your head just
pretend it's a function.

15
00:00:47.276 --> 00:00:51.259
And again, it's all about the props.

16
00:00:51.259 --> 00:00:54.262
So this has some implications though,
because sure,

17
00:00:54.262 --> 00:00:57.983
this is fine when you interact with
the props, you just read them and

18
00:00:57.983 --> 00:01:01.726
it doesn't matter if it's reactive or
not, it works the same way.

19
00:01:01.726 --> 00:01:06.533
However, what if we want to do
some fun stuff like merge them and

20
00:01:06.533 --> 00:01:09.992
spread them and
destructure them and stuff?

21
00:01:09.992 --> 00:01:13.354
And this is where things
get a little bit more fun.

22
00:01:13.354 --> 00:01:18.543
So we actually have a couple helper
functions to handle with that.

23
00:01:18.543 --> 00:01:21.342
Spreads and stuff in the JSX are all
handled for you automatically.

24
00:01:21.342 --> 00:01:25.252
But if you're gonna be like merging props
together, setting default props, and

25
00:01:25.252 --> 00:01:28.439
whatnot, you have to do it in a way
that doesn't lose reactivity.

26
00:01:28.439 --> 00:01:31.140
We haven't brought it up
to this point now, but

27
00:01:31.140 --> 00:01:35.069
it might be obvious to you if you
consider that a component's untracked.

28
00:01:35.069 --> 00:01:38.333
Is that if you destructure at
the top of your component,

29
00:01:38.333 --> 00:01:43.134
you are accessing the variables at that
point, it is not under an effect, right?

30
00:01:43.134 --> 00:01:47.406
So reactive frameworks,
whether they're Vue or Solid or

31
00:01:47.406 --> 00:01:51.776
whatever, you lose reactivity
if you destructure props.

32
00:01:51.776 --> 00:01:56.792
This is our hooks rule, this is the rule
that everyone trips on at least once,

33
00:01:56.792 --> 00:02:01.192
probably multiple times because
even though they're aware of it,

34
00:02:01.192 --> 00:02:03.059
it's like a force of habit.

35
00:02:03.059 --> 00:02:07.909
So big thing is destructuring
technically is fine if you're in

36
00:02:07.909 --> 00:02:11.667
a point that is being read
like that is reactive.

37
00:02:11.667 --> 00:02:13.820
But the top your component is never that.

38
00:02:13.820 --> 00:02:18.361
So destructuring props is something
that we do not do generally.

39
00:02:18.361 --> 00:02:23.645
So yeah, we'll look at a couple

40
00:02:23.645 --> 00:02:31.878
of examples of how to use
these APIs essentially.

41
00:02:31.878 --> 00:02:35.275
So first thing props.children
already introduced,

42
00:02:35.275 --> 00:02:38.980
this is the generic prop that works for
any open close tags.

43
00:02:38.980 --> 00:02:43.032
MergeProps is how we keep reactivity
while merging the props together, so

44
00:02:43.032 --> 00:02:45.549
if you have multiple
objects you wanna merge.

45
00:02:45.549 --> 00:02:50.064
SplitProps is how we maybe we get some
props and send some to a children and

46
00:02:50.064 --> 00:02:53.999
some that you use locally,
we can split those objects across.

47
00:02:53.999 --> 00:02:58.429
And then children is very similar to
if you'd use React's Children,

48
00:02:58.429 --> 00:03:00.753
where it resolves all the children and

49
00:03:00.753 --> 00:03:04.980
gives you kind of like a ability to
do introspection and look at them.

50
00:03:04.980 --> 00:03:06.098
Because in reactivity,

51
00:03:06.098 --> 00:03:08.814
you might have a lot of reactive
things going under the hood,

52
00:03:08.814 --> 00:03:12.347
you might be returning functions and
return functions and do a bunch of stuff.

53
00:03:12.347 --> 00:03:16.433
And children will give you
the actual DOM nodes underneath.

54
00:03:16.433 --> 00:03:24.764
So it returns basically a derivation
that you can reactively introspect.

55
00:03:24.764 --> 00:03:29.660
The other thing we have, I'm gonna call
them lifecycle functions, but that's

56
00:03:29.660 --> 00:03:34.569
a little bit of a cheat because everything
in Solid runs off the reactive system.

57
00:03:34.569 --> 00:03:38.248
So these are more for
convenience than anything.

58
00:03:38.248 --> 00:03:42.622
OnMount is literally create
effect with untrack on it.

59
00:03:42.622 --> 00:03:47.755
If you have an effect with an empty
dependency array essentially.

60
00:03:47.755 --> 00:03:52.846
OnCleanup registers with that cleanup
function that we wrote earlier,

61
00:03:52.846 --> 00:03:58.862
so that anything you write, if the parent
effect reruns, it'll run your function.

62
00:03:58.862 --> 00:04:01.791
So it's a custom way to register cleanup.

63
00:04:01.791 --> 00:04:05.596
And this is really powerful because it
means onCleanup can be written inside

64
00:04:05.596 --> 00:04:07.087
effects, outside effects.

65
00:04:07.087 --> 00:04:15.065
It's the same mechanism regardless of
where you register these cleanup methods.

