WEBVTT

1
00:00:00.000 --> 00:00:06.190
The next thing here is the life cycles and

2
00:00:06.190 --> 00:00:11.470
the life cycles are they're useful for

3
00:00:11.470 --> 00:00:14.578
a number of things.

4
00:00:14.578 --> 00:00:17.725
Basically, you might we already showed
that you could just run something in

5
00:00:17.725 --> 00:00:20.546
the component body so why would you
bother with onMount or Whatnot.

6
00:00:20.546 --> 00:00:26.046
Sometimes though you wanna wait
until after the DOM has loaded

7
00:00:26.046 --> 00:00:32.496
before you start something so it's
a good place to like measure the DOM or

8
00:00:32.496 --> 00:00:37.677
use your references but
yeah I mean the simplest example of

9
00:00:37.677 --> 00:00:42.859
using onMount although we'll
show later a better way to do

10
00:00:42.859 --> 00:00:47.859
this is you could use it maybe
to load some data, right?

11
00:00:47.859 --> 00:00:53.897
We could maybe make an async
function that fetches from an API.

12
00:00:53.897 --> 00:01:00.732
And We, in our case,
we're gonna fetch some photos.

13
00:01:00.732 --> 00:01:05.748
And then all we have to do
is when we get our response,

14
00:01:05.748 --> 00:01:11.106
we just set the JSON to our signal and
we should be good and

15
00:01:11.106 --> 00:01:18.182
let me just grab the URL for this grab
20 items from the placeholder API.

16
00:01:18.182 --> 00:01:21.651
And yes, it's a bunch of lovely,
lovely images.

17
00:01:21.651 --> 00:01:30.112
But as you can see async it's
fairly easy in this kinda scenario.

18
00:01:30.112 --> 00:01:34.212
And what's cool about a reactive library
like Solid obviously is when you do

19
00:01:34.212 --> 00:01:37.221
that fetch, and
you sent that signal, it's not like,

20
00:01:37.221 --> 00:01:41.066
again, the componentry renders or
anything and literally just went,

21
00:01:41.066 --> 00:01:44.491
now there's photos in this list,
create these DOM elements.

22
00:01:44.491 --> 00:01:50.538
So it's kinda like a pause,
like he can render the outside and

23
00:01:50.538 --> 00:01:54.270
then continue on as the data resolves.

24
00:01:54.270 --> 00:01:58.918
onCleanup is something that we've been
avoiding in all our demos so far, but

25
00:01:58.918 --> 00:02:03.782
it's actually important because sometimes,
if you set an interval at the top of

26
00:02:03.782 --> 00:02:08.241
your component and it unmounts you
actually want that interval to go away.

27
00:02:08.241 --> 00:02:12.578
As powerful as this is we
still need to be able to

28
00:02:12.578 --> 00:02:16.376
potentially clean up after ourselves.

29
00:02:16.376 --> 00:02:17.797
So.

30
00:02:17.797 --> 00:02:21.354
What's powerful here is
something you can do top level.

31
00:02:21.354 --> 00:02:24.130
So I made a timer.

32
00:02:24.130 --> 00:02:29.869
We can ensure that even with our counter,
that when this cleans up,

33
00:02:29.869 --> 00:02:34.111
that we're going to actually call this,
right?

34
00:02:34.111 --> 00:02:37.650
When it, because if you think about it,
these are all nested effects.

35
00:02:37.650 --> 00:02:39.463
So it's the same rules again.

36
00:02:39.463 --> 00:02:44.684
So if I put this inside an effect,

37
00:02:44.684 --> 00:02:50.470
let's say, let's create effect.

38
00:02:50.470 --> 00:02:52.916
We could, we can also.

39
00:02:52.916 --> 00:02:57.880
I can also do the same thing To close

40
00:02:57.880 --> 00:03:01.731
here, right?

41
00:03:01.731 --> 00:03:06.298
And playground is not

42
00:03:06.298 --> 00:03:11.884
having fun with me today.

43
00:03:11.884 --> 00:03:18.108
All right did I put an extra bracket

44
00:03:18.108 --> 00:03:23.694
somewhere that's probably it

45
00:03:33.283 --> 00:03:36.733
Can I just copy this code and

46
00:03:36.733 --> 00:03:41.847
then I'm gonna refresh the whole page.

47
00:03:52.202 --> 00:03:59.942
Create effects not defined
obviously hear we go.

48
00:03:59.942 --> 00:04:00.492
Okay.

49
00:04:00.492 --> 00:04:04.961
This is just what I was
trying to demonstrate here

50
00:04:04.961 --> 00:04:08.780
because we if we console if we just kinda.

51
00:04:08.780 --> 00:04:13.475
Again, I don't know why you would wanna do

52
00:04:13.475 --> 00:04:18.562
this exact thing that
I'm gonna do right now,

53
00:04:18.562 --> 00:04:23.390
but if we wanted to console.log("Cleanup") and

54
00:04:23.390 --> 00:04:26.669
literally rerun this thing,

55
00:04:32.534 --> 00:04:37.041
Every single, every single time like say

56
00:04:37.041 --> 00:04:42.332
the count changed which
is kinda crazy main.tsx.

57
00:04:42.332 --> 00:04:43.794
I'm missing a semicolon.

58
00:04:43.794 --> 00:04:48.093
Thank you.

59
00:04:52.285 --> 00:04:55.075
This is why live coding
is always the best.

60
00:04:55.075 --> 00:05:00.406
All right,
cuz I didn't close my effect, right?

61
00:05:00.406 --> 00:05:04.515
Like if we wanted to do something
silly like listen to count in here.

62
00:05:04.515 --> 00:05:06.220
This is gonna stay zero now.

63
00:05:06.220 --> 00:05:12.143
But essentially, every time we update

64
00:05:12.143 --> 00:05:18.610
count it should run our cleanup function.

65
00:05:18.610 --> 00:05:19.110
Alright.

66
00:05:21.893 --> 00:05:24.740
See, clean up, clean up, clean up,
or it's actually counting up.

67
00:05:24.740 --> 00:05:25.841
Yes.
So just froze.

68
00:05:25.841 --> 00:05:30.448
So you actually see cleanup also,
logging down there in the console,

69
00:05:30.448 --> 00:05:31.708
every single run.

70
00:05:31.708 --> 00:05:37.582
So we can clean up both at a effect
level scope and a component level scope.

