WEBVTT

1
00:00:00.131 --> 00:00:03.574
We're gonna start today
looking at signals.

2
00:00:03.574 --> 00:00:08.589
Beginning of this is gonna be a little bit
cold lecture heavy just so that we get

3
00:00:08.589 --> 00:00:13.621
some concepts out but we will get some
code examples and see what's going on.

4
00:00:13.621 --> 00:00:18.906
Yeah, let's take a look
at what a signal is.

5
00:00:18.906 --> 00:00:21.523
This is our basic primitive.

6
00:00:21.523 --> 00:00:26.110
In Solid, we call them signals but
in other frameworks they

7
00:00:26.110 --> 00:00:30.803
are known as observable, or,
ref, or atom, or behavior.

8
00:00:30.803 --> 00:00:36.273
And it basically is a getter and
setter that holds a value.

9
00:00:36.273 --> 00:00:38.148
This is not a magical example here.

10
00:00:38.148 --> 00:00:44.317
Essentially it's almost too simple
where in Solid, we return a tuple.

11
00:00:44.317 --> 00:00:46.263
But essentially there's a count and

12
00:00:46.263 --> 00:00:50.041
there's a setCount variable that
comes out of our createSignal call.

13
00:00:50.041 --> 00:00:54.004
And the count variable when
we call it as a function,

14
00:00:54.004 --> 00:00:59.512
it just returns the value and then we
call the setter with the next value.

15
00:00:59.512 --> 00:01:01.789
Then you can just read it.

16
00:01:01.789 --> 00:01:04.489
This on its own is not too crazy, but

17
00:01:04.489 --> 00:01:09.534
this is kind of a good way to
familiarize yourself with the syntax.

18
00:01:09.534 --> 00:01:11.736
And in fact,
if you look at other frameworks,

19
00:01:11.736 --> 00:01:14.283
they have different syntax here but
kind of similar.

20
00:01:14.283 --> 00:01:17.777
Something like Vue,
where they use the refs,

21
00:01:17.777 --> 00:01:21.631
they access the value by
calling count.value, or

22
00:01:21.631 --> 00:01:26.215
they set a value by also using
count.value with the setter.

23
00:01:26.215 --> 00:01:31.018
But what this is really doing is just
calling functions in the background

24
00:01:31.018 --> 00:01:35.975
like if I was to try and implement Vue's
ref in Solid, all I would be doing is

25
00:01:35.975 --> 00:01:41.116
using a getter and a setter to basically
return a function and set a function.

26
00:01:41.116 --> 00:01:46.428
I just want to point out that the key to
this mechanism is actually that there's

27
00:01:46.428 --> 00:01:51.419
functions behind under the hood that
are actually intercepting the get,

28
00:01:51.419 --> 00:01:54.175
the reads, and the writes, all right.

29
00:01:56.496 --> 00:02:00.324
And even I can take this further when
I look at something like Svelte,

30
00:02:00.324 --> 00:02:05.080
because I mentioned before that they were
using a compiler and it's kind of similar.

31
00:02:05.080 --> 00:02:08.811
They might use an assignment call here and
they might just read a variable as normal.

32
00:02:08.811 --> 00:02:13.586
But behind the scenes, their compiler
is actually turning their set calls or

33
00:02:13.586 --> 00:02:17.274
turning your assignments
into $$invalidate set calls.

34
00:02:17.274 --> 00:02:22.011
So there's actually under the hood
very similar kind of concept

35
00:02:22.011 --> 00:02:25.005
here in terms of how the mechanics work.

36
00:02:25.005 --> 00:02:27.700
Because signals on themselves
don't do that much,

37
00:02:27.700 --> 00:02:30.160
I'm gonna introduce this
the next primitive.

38
00:02:30.160 --> 00:02:33.354
I'm gonna skip over computed
values because they

39
00:02:33.354 --> 00:02:38.297
probably the most complicated of the bunch
and just get right to the side effects

40
00:02:38.297 --> 00:02:42.421
because signals on their own would
not do anything of interest.

41
00:02:42.421 --> 00:02:46.874
Side effect, also known as reactions,
or autoruns, or watches, or

42
00:02:46.874 --> 00:02:51.484
in some frameworks, even computeds,
are basically why we do all this.

43
00:02:51.484 --> 00:02:56.192
It's funny, we always use console log
in these beginner examples, but really,

44
00:02:56.192 --> 00:02:57.979
it could be anything in there.

45
00:02:57.979 --> 00:03:02.666
Essentially the trick to
these effects is that they

46
00:03:02.666 --> 00:03:06.487
run once executing all the logic inside.

47
00:03:06.487 --> 00:03:10.869
And then at any point in the future,
when you update the value of

48
00:03:10.869 --> 00:03:15.763
something that was read under that effect,
the function runs again.

49
00:03:15.763 --> 00:03:21.715
So essentially, a simple example like
this where we create a signal that is has

50
00:03:21.715 --> 00:03:27.772
a value of 0, we run this effect and it
just console log 0 as you kind of expect.

51
00:03:27.772 --> 00:03:31.745
But then when you set it to 5 later,
then it immediately logs 5, or

52
00:03:31.745 --> 00:03:34.484
you set it to 10, it immediately logs 10.

53
00:03:34.484 --> 00:03:37.459
This is the a equals b plus c
that I was talking about earlier.

54
00:03:37.459 --> 00:03:41.760
Essentially, it ensures
that it's always in sync,

55
00:03:41.760 --> 00:03:45.114
always up to date no matter what changes.

56
00:03:45.114 --> 00:03:49.693
And it does this,
as I've kind of already alluded to,

57
00:03:49.693 --> 00:03:53.477
from this concept of
dependency tracking and

58
00:03:53.477 --> 00:03:57.163
automatic dependency tracking actually,

59
00:03:57.163 --> 00:04:01.562
and this as I mentioned is
based on using functions.

60
00:04:01.562 --> 00:04:05.497
That way, we can intercept all
the accesses so we know what happens.

61
00:04:05.497 --> 00:04:09.852
These functions can be out in the open,
they can be getters, they can be proxies,

62
00:04:09.852 --> 00:04:13.343
it can be under a compiler, but
it's the same kind of mechanism.

63
00:04:13.343 --> 00:04:17.560
I've created a very simple playground, and
I just wanted to kinda emphasize this.

64
00:04:17.560 --> 00:04:20.760
This example is the exact one we did but
it doesn't really,

65
00:04:20.760 --> 00:04:24.024
I put some extra console logs just
to kind of see the timing but

66
00:04:24.024 --> 00:04:25.952
it is actually immediate, right?

67
00:04:25.952 --> 00:04:28.139
When we create our signal and

68
00:04:28.139 --> 00:04:34.370
then we run the effect the first time
it does, immediately do the count.

69
00:04:34.370 --> 00:04:37.650
We set the count, immediately sets it.

70
00:04:37.650 --> 00:04:41.469
It doesn't matter what we set this to,

71
00:04:41.469 --> 00:04:45.286
we can do this as many
times as we want and

72
00:04:45.286 --> 00:04:50.400
kind of magically or
not magically get our update.

73
00:04:50.400 --> 00:04:56.960
And in fact, we could probably, we can
listen to as many of these as we want.

74
00:04:56.960 --> 00:05:01.852
I'm gonna make a count and
a count2 here just to get that in.

75
00:05:01.852 --> 00:05:07.507
Maybe we'll start count to 5,

76
00:05:07.507 --> 00:05:16.103
and now if we log both of
these in the console log.

77
00:05:16.103 --> 00:05:21.548
And let's change some of
these around a little bit,

78
00:05:21.548 --> 00:05:25.769
let's set count2 to10 or whatever.

79
00:05:28.249 --> 00:05:31.921
This actually set count2 to 10.

80
00:05:31.921 --> 00:05:39.371
Then you can kind of see
our function reruns,

81
00:05:39.371 --> 00:05:43.497
count goes from 0 to 5.

82
00:05:43.497 --> 00:05:46.611
And then the first count stays at 5
when we set the second count to 10.

83
00:05:46.611 --> 00:05:49.450
Essentially we can have as many of these

84
00:05:49.450 --> 00:05:52.725
signals being listened
to by these effects.

85
00:05:52.725 --> 00:05:57.330
And this is kind of the core
mechanic behind reactivity.

86
00:05:57.330 --> 00:06:01.554
You can define as much variable state as
you want, create as many effects as you

87
00:06:01.554 --> 00:06:04.434
want and just have a system
that kind of stays in sync.

