WEBVTT

1
00:00:00.480 --> 00:00:04.927
&gt;&gt; David Khourshid: So now we're
going to jump to the second lesson,

2
00:00:04.927 --> 00:00:06.993
which is on diagrams.

3
00:00:06.993 --> 00:00:13.241
So you might be asking yourself like, what
do diagrams really have to do with this?

4
00:00:13.241 --> 00:00:17.343
I thought that we're going
to be working in React, and

5
00:00:17.343 --> 00:00:22.694
the main point of, or the main
motivation of modeling your application

6
00:00:22.694 --> 00:00:27.171
is to separate incidental
versus accidental complexity.

7
00:00:27.171 --> 00:00:33.119
And so what is the difference between
incidental and accidental complexity?

8
00:00:33.119 --> 00:00:36.162
Incidental complexity is unavoidable.

9
00:00:36.162 --> 00:00:41.034
This is the irreducible complexity that
comes from the problem domain that

10
00:00:41.034 --> 00:00:42.899
you're working in itself.

11
00:00:42.899 --> 00:00:48.205
So it is how things are supposed
to update the different flows,

12
00:00:48.205 --> 00:00:50.917
where data comes in from, etc.

13
00:00:50.917 --> 00:00:55.560
It doesn't matter which language or
framework or libraries you're working on,

14
00:00:55.560 --> 00:00:59.195
this incidental complexity is
going to stay exactly the same and

15
00:00:59.195 --> 00:01:01.432
you really can't do much to reduce it.

16
00:01:01.432 --> 00:01:05.122
But that's not a huge problem,
as we'll see.

17
00:01:05.122 --> 00:01:07.592
The second part is accidental complexity.

18
00:01:07.592 --> 00:01:11.917
So this is the complexity that
we ourselves introduce from

19
00:01:11.917 --> 00:01:16.418
the implementation choices we make,
the different tools or

20
00:01:16.418 --> 00:01:19.252
libraries or frameworks that we use.

21
00:01:19.252 --> 00:01:23.958
Earlier, someone mentioned as part of
their struggles with state management that

22
00:01:23.958 --> 00:01:25.243
for example, Redux.

23
00:01:25.243 --> 00:01:26.853
And this could happen
with other tools too.

24
00:01:26.853 --> 00:01:31.251
But Redux, at least the original Redux
sort of mandated that you have so

25
00:01:31.251 --> 00:01:32.726
many different files.

26
00:01:32.726 --> 00:01:36.224
I remember when I worked in Redux
you had this actions file and

27
00:01:36.224 --> 00:01:40.135
then you had your reducer file and
then you had maybe another file for

28
00:01:40.135 --> 00:01:43.037
constants and
maybe another file for selectors.

29
00:01:43.037 --> 00:01:46.962
And that I would call
accidental complexity.

30
00:01:46.962 --> 00:01:50.005
Because this is again self inflicted.

31
00:01:50.005 --> 00:01:52.556
We chose Redux, at least the old version.

32
00:01:52.556 --> 00:01:57.723
Redux toolkit is a lot better now,
but it introduced a lot of complexity

33
00:01:57.723 --> 00:02:02.630
where we basically have to play nice
with the tools we use rather than

34
00:02:02.630 --> 00:02:07.217
focusing on the actual problem
domain that we're working in.

35
00:02:07.217 --> 00:02:10.652
Another one that was
mentioned was many use dates.

36
00:02:10.652 --> 00:02:15.295
So we have all of these use date calls and
then we have to juggle them and

37
00:02:15.295 --> 00:02:17.390
also chaining of useEffects.

38
00:02:17.390 --> 00:02:21.773
So our decision to use many
useEffects actually contributes to

39
00:02:21.773 --> 00:02:25.587
accidental complexity over
incidental complexity.

40
00:02:25.587 --> 00:02:31.585
And so this is why I think it is super
important to model your application.

41
00:02:31.585 --> 00:02:33.578
So what do I mean by modeling?

42
00:02:33.578 --> 00:02:39.617
I don't mean just trying to use some sort
of advanced tool to specifically model or

43
00:02:39.617 --> 00:02:41.280
do anything like UML,

44
00:02:41.280 --> 00:02:46.986
just to make sure that you have everything
perfect before you start working.

45
00:02:46.986 --> 00:02:50.458
Just because, like we talked about,
that's not how code works,

46
00:02:50.458 --> 00:02:52.330
that's not how our projects work.

47
00:02:52.330 --> 00:02:56.960
We might be jumping into legacy projects
where that kind of documentation

48
00:02:56.960 --> 00:02:58.086
doesn't exist.

49
00:02:58.086 --> 00:03:02.744
So that's why I really want to
emphasize quick documentation,

50
00:03:02.744 --> 00:03:08.005
where you're basically just writing
down in whatever is the most like,

51
00:03:08.005 --> 00:03:13.195
the fastest, most optimal way of
describing your application logic.

52
00:03:13.195 --> 00:03:19.538
Just documenting the different flows,
how your data works, etc.

53
00:03:19.538 --> 00:03:24.491
And so that's why in this exercise,
we have a flows ND file.

54
00:03:24.491 --> 00:03:27.913
It's empty but this is something where
I want you all to brainstorm and

55
00:03:27.913 --> 00:03:30.527
work on after we learn about
the different diagrams.

