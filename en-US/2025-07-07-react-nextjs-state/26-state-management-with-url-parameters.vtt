WEBVTT

1
00:00:00.480 --> 00:00:04.445
&gt;&gt; David Khourshid: So
what I wanna talk about now is using URL,

2
00:00:04.445 --> 00:00:08.960
the query parameters for state management.

3
00:00:08.960 --> 00:00:13.440
This is something that is typically
overlooked because it's just

4
00:00:13.440 --> 00:00:15.600
not something we think about.

5
00:00:15.600 --> 00:00:18.476
And also it's sort of difficult to do,

6
00:00:18.476 --> 00:00:22.924
especially if you're using
a framework like Remix or Next,

7
00:00:22.924 --> 00:00:28.900
they don't make it the easiest thing
to synchronize state with the URL.

8
00:00:28.900 --> 00:00:35.432
However, in many web applications, and
this goes back even to the early 2000s,

9
00:00:35.432 --> 00:00:40.340
1990s, the URL was actually
the source of truth.

10
00:00:40.340 --> 00:00:41.300
So think about it.

11
00:00:41.300 --> 00:00:46.379
Let's say that you want to have some
sort of form or some sort of view

12
00:00:46.379 --> 00:00:51.638
where you're searching for things and
you want to actually have it so

13
00:00:51.638 --> 00:00:57.730
that the URL maintains the state, so
you have everything in query parameters.

14
00:00:57.730 --> 00:00:59.730
There's a lot of benefits to this.

15
00:00:59.730 --> 00:01:03.989
First of all, the form data is not gonna
be lost on page refresh because you

16
00:01:03.989 --> 00:01:06.876
already have that data in
the query parameters and

17
00:01:06.876 --> 00:01:09.810
you could use it directly on the page.

18
00:01:09.810 --> 00:01:13.488
Also, that long string
with the query parameters,

19
00:01:13.488 --> 00:01:17.170
you can bookmark it,
you could share those URLs.

20
00:01:17.170 --> 00:01:20.410
And the back button is
actually going to work and

21
00:01:20.410 --> 00:01:24.379
preserve that form state
because we're using the natural

22
00:01:24.379 --> 00:01:29.250
history mechanism of the browser
to maintain that state for us.

23
00:01:29.250 --> 00:01:30.701
So again, URLs are really,

24
00:01:30.701 --> 00:01:33.650
really overlooked when it
comes to state management.

25
00:01:33.650 --> 00:01:38.297
But honestly, a lot of our
applications can really benefit from

26
00:01:38.297 --> 00:01:41.490
using the URL as a source of truth for
state.

27
00:01:42.610 --> 00:01:46.228
There is an external
library called nuqs and

28
00:01:46.228 --> 00:01:50.990
N-U-Q-S that does make
this pretty easy to do.

29
00:01:50.990 --> 00:01:56.510
And I'm going to demonstrate to you
how nuqs can make this a lot easier.

30
00:01:56.510 --> 00:02:00.830
But first let's take a look at the actual
problems that we're dealing with.

31
00:02:02.030 --> 00:02:08.510
So if you go to exercise-URL,
we have our flight booking form as normal.

32
00:02:08.510 --> 00:02:13.275
We have our one way flight,
we could put in a destination,

33
00:02:13.275 --> 00:02:19.320
our departure date, the number of
passengers, and search for flights.

34
00:02:22.200 --> 00:02:26.080
You know what, I don't actually wanna
go to Tokyo, so let me go back and

35
00:02:26.080 --> 00:02:27.320
change that to Osaka.

36
00:02:28.618 --> 00:02:33.280
Wow, okay, so everything changed except
the number of passengers for some reason.

37
00:02:33.280 --> 00:02:36.720
But everything changed and
everything disappeared.

38
00:02:36.720 --> 00:02:41.090
And now as a user I'm a little
bit frustrated about that.

39
00:02:41.090 --> 00:02:44.530
So that's just not cool.

40
00:02:45.650 --> 00:02:49.721
So if I put a destination here,
go to search flights and

41
00:02:49.721 --> 00:02:54.058
let's say that, okay,
I actually like these results for

42
00:02:54.058 --> 00:02:59.104
this imaginary place that I searched and
I want to sort by duration,

43
00:02:59.104 --> 00:03:04.530
see the direct flights, and actually
share this with one of my friends.

44
00:03:05.570 --> 00:03:09.950
I can't because there's no query
parameters, there's nothing for me to

45
00:03:09.950 --> 00:03:15.090
share that basically when I reload, first
of all, this view is going to go away.

46
00:03:15.090 --> 00:03:18.966
And even if that view didn't go away,
like if it was a different page,

47
00:03:18.966 --> 00:03:21.410
I would lose all of my results.

48
00:03:21.410 --> 00:03:24.370
So it's just really not a good situation.

49
00:03:25.570 --> 00:03:28.770
All right, so
how can we actually fix that?

50
00:03:28.770 --> 00:03:33.746
So if you go to urlpage.ts,
we are going to

51
00:03:33.746 --> 00:03:38.840
use a library called nuqs, N-U-Q-S.

52
00:03:38.840 --> 00:03:41.160
So we have a bunch of use states here.

53
00:03:41.160 --> 00:03:44.832
And we've done so many exercises
where it's like, okay, yeah,

54
00:03:44.832 --> 00:03:48.720
let's consolidate these,
let's put them in a reducer, et cetera.

55
00:03:48.720 --> 00:03:51.240
We're not actually going
to be doing that here.

56
00:03:51.240 --> 00:03:57.042
Instead we're going to be replacing this

57
00:03:57.042 --> 00:04:03.090
useState with use query state from nuqs.

58
00:04:03.090 --> 00:04:06.050
The only difference here is
we want to give it a name.

59
00:04:07.170 --> 00:04:11.888
So it's going to be, for example,
usequery state destination and

60
00:04:11.888 --> 00:04:16.370
then this is going to be
usequery state departure arrival.

61
00:04:16.370 --> 00:04:19.650
This is what shows up in the URL.

62
00:04:19.650 --> 00:04:23.250
And then this is one way set is one way.

63
00:04:24.340 --> 00:04:25.700
This one is a little bit different.

64
00:04:25.700 --> 00:04:29.300
All of these are strings, or
we could use them as strings.

65
00:04:29.300 --> 00:04:34.227
But with usequery state,
it assumes that since the URL is a string,

66
00:04:34.227 --> 00:04:37.060
everything's gonna be a string.

67
00:04:37.060 --> 00:04:38.660
It's not the case over here.

68
00:04:38.660 --> 00:04:42.100
We actually want to parse
this as a Boolean value.

69
00:04:42.100 --> 00:04:47.385
And so the way that Nuqs works is we have
a way to parse the value and so you could

70
00:04:47.385 --> 00:04:52.840
return the value as true and, and
then you could go the other way around.

71
00:04:52.840 --> 00:04:59.480
And so, based on the value that is set,
we would set that to true or false.

72
00:04:59.480 --> 00:05:06.360
Or we could do things like set this as one
or zero, it just needs to be a string.

73
00:05:06.360 --> 00:05:09.960
But Nuqs does have a lot of shortcuts for
that.

74
00:05:09.960 --> 00:05:13.710
So we could just parse as Boolean and

75
00:05:13.710 --> 00:05:19.470
then give it a default of false,
for example.

76
00:05:19.470 --> 00:05:23.849
So now let's see this in practice,
when we go back here,

77
00:05:23.849 --> 00:05:28.750
we are now going to see
an error value prop on input.

78
00:05:28.750 --> 00:05:31.870
Interesting, don't care.

79
00:05:33.390 --> 00:05:37.340
So you are going to now see that
when I toggle, for example,

80
00:05:37.340 --> 00:05:40.750
one way flight,
it's updating the URL for us.

81
00:05:40.750 --> 00:05:43.308
And also because the default is false,

82
00:05:43.308 --> 00:05:47.050
that actually disappears
when we set that to false.

83
00:05:47.050 --> 00:05:50.305
So now we could enter a destination and

84
00:05:50.305 --> 00:05:56.170
you could see that it is changing
in the URL as we are changing that.

85
00:05:56.170 --> 00:06:03.930
And also it's not pushing to history,
instead it's replacing the history.

86
00:06:03.930 --> 00:06:08.032
So you're not going to get that annoying
thing where when you go back it's toki and

87
00:06:08.032 --> 00:06:10.470
then you go back it's toke, etc.

88
00:06:10.470 --> 00:06:13.670
Instead it's going to treat
it as a single transaction.

89
00:06:13.670 --> 00:06:15.190
Then we could set the date.

90
00:06:15.190 --> 00:06:18.870
So we set the departure
number of passengers.

91
00:06:18.870 --> 00:06:23.990
I think we forgot to add that in,
it's okay.

92
00:06:23.990 --> 00:06:28.777
The idea is that when we search
flights and we go back to our search,

93
00:06:28.777 --> 00:06:33.030
none of our data is lost,
which is really awesome.

94
00:06:33.030 --> 00:06:36.301
So if we take a look
at the search results,

95
00:06:36.301 --> 00:06:40.820
then we could basically do
the same thing over here.

96
00:06:40.820 --> 00:06:48.980
So this, we might need to change
it because this needs to be an id.

97
00:06:48.980 --> 00:06:51.300
And so
this goes back to an earlier lesson.

98
00:06:51.300 --> 00:06:56.420
Instead of duplicating states,
we want to really instead derive it.

99
00:06:56.420 --> 00:06:59.460
So we would want to set the flight id.

100
00:06:59.460 --> 00:07:05.140
And so this one, we use query state
parses Boolean with defaults false.

101
00:07:05.140 --> 00:07:09.460
And there's another one here
where we could parse as enum or.

102
00:07:09.460 --> 00:07:12.820
Sorry, it's not parse as enum,
it's something else.

103
00:07:13.940 --> 00:07:16.580
It is, parse as string enum.

104
00:07:19.460 --> 00:07:24.180
Be careful of AI coding assistants because
they will hallucinate different answers.

105
00:07:25.540 --> 00:07:29.270
But yeah, so you can have things
that go beyond a string and

106
00:07:29.270 --> 00:07:32.750
you could also have these string enums.

107
00:07:32.750 --> 00:07:37.160
We're deriving state over here,
which is good,

108
00:07:37.160 --> 00:07:41.950
but yeah, so
now we should see that this works when.

109
00:07:41.950 --> 00:07:45.150
And you could see that it's
actually changing over here.

110
00:07:45.150 --> 00:07:50.010
When we actually change ascending,
descending, etc,

111
00:07:50.010 --> 00:07:52.750
it is going to change in the URL.

112
00:07:54.110 --> 00:08:02.265
So there's one more thing to do which is,

113
00:08:02.265 --> 00:08:08.690
let's see, forget what it is.

114
00:08:08.690 --> 00:08:11.108
Yeah.
So if we go to the solution,

115
00:08:11.108 --> 00:08:15.961
because the other problem here is
that if we reload it is going to go

116
00:08:15.961 --> 00:08:21.160
back to the original screen and
we don't necessarily want that.

117
00:08:21.160 --> 00:08:25.824
So the way that we solve this
in the solution is that we

118
00:08:25.824 --> 00:08:29.170
actually have a view variable.

119
00:08:29.170 --> 00:08:33.554
And so
just to show you what that looks like,

120
00:08:33.554 --> 00:08:38.175
we have view, set,
view and then we're using

121
00:08:38.175 --> 00:08:42.930
query state of the current
view that we're on.

122
00:08:44.050 --> 00:08:47.890
So having this in the reducer
makes this a little bit easier.

123
00:08:49.290 --> 00:08:57.610
But yeah, so yeah, so that's a basic intro
to using the URL query parameters estate.

124
00:08:57.610 --> 00:08:59.770
It's something that I really encourage.

125
00:08:59.770 --> 00:09:03.404
Like when you have something where
you want the URL to be shareable,

126
00:09:03.404 --> 00:09:05.650
you want the URL to be
the source of truth.

127
00:09:05.650 --> 00:09:10.529
For part, if not all of your
components in a certain view,

128
00:09:10.529 --> 00:09:16.420
definitely consider using the URL
query parameters for states.

129
00:09:16.420 --> 00:09:21.251
&gt;&gt; Speaker 2: What if instead
of using a view parameter,

130
00:09:21.251 --> 00:09:28.420
we just check to see if history
has anything pushed to it.

131
00:09:28.420 --> 00:09:31.237
So just if they essentially
go to the URL and

132
00:09:31.237 --> 00:09:34.834
there's no history,
there's nothing to go back to,

133
00:09:34.834 --> 00:09:40.430
then you could assume that they're going
straight into the view of results.

134
00:09:40.430 --> 00:09:41.710
&gt;&gt; David Khourshid: Potentially, yeah.

135
00:09:41.710 --> 00:09:43.950
And that could work in some cases.

136
00:09:43.950 --> 00:09:45.630
I just like to be explicit.

137
00:09:45.630 --> 00:09:49.710
And this view equals or step equals.

138
00:09:49.710 --> 00:09:53.628
This is something that you will see
commonly in URL query parameters anyway

139
00:09:53.628 --> 00:09:56.190
where it explicitly says
which step you're on.

140
00:09:58.430 --> 00:10:03.070
So it's a difference between
implicit versus explicit states.

141
00:10:07.400 --> 00:10:10.333
&gt;&gt; Speaker 3: And just to double
check here, the first couple params,

142
00:10:10.333 --> 00:10:13.160
that's actually from the first page.

143
00:10:13.160 --> 00:10:16.520
&gt;&gt; David Khourshid: Yes, and
that's so that we have that.

144
00:10:16.520 --> 00:10:18.840
And look, if I go back, oops.

145
00:10:18.840 --> 00:10:21.720
Or forward, I did that wrong.

146
00:10:23.000 --> 00:10:23.880
We could go back.

147
00:10:23.880 --> 00:10:29.920
We could go forward and
get those search results back.

148
00:10:29.920 --> 00:10:32.820
And forward works pretty naturally,
which is pretty nice.

149
00:10:35.780 --> 00:10:40.180
But yeah, going back to the original
question of what if the user changes that?

150
00:10:40.180 --> 00:10:43.784
Like let's say that they're,
I don't know, playing a game or

151
00:10:43.784 --> 00:10:46.340
they want to jump
directly to confirmation.

152
00:10:47.860 --> 00:10:51.205
This is why you would want either
something on the server or

153
00:10:51.205 --> 00:10:55.460
you could have frontend logic that says,
are we in an impossible state?

154
00:10:55.460 --> 00:10:57.528
Just use Zod to validate that and

155
00:10:57.528 --> 00:11:02.506
basically kick them out if they're not
supposed to be on that part of the URL or

156
00:11:02.506 --> 00:11:07.420
if the state is just inconsistent with
what is expected in the application.

157
00:11:12.380 --> 00:11:16.911
&gt;&gt; Speaker 2: I think that's why partly on
the reducer you always have the default

158
00:11:16.911 --> 00:11:20.410
just basically return whatever
it was back at them so

159
00:11:20.410 --> 00:11:26.000
that there's no actions taken that they
would want to be able to get into.

160
00:11:26.000 --> 00:11:27.520
&gt;&gt; David Khourshid: Right, right, exactly.

161
00:11:27.520 --> 00:11:32.492
And that's another good point about
reducers is that potentially you

162
00:11:32.492 --> 00:11:37.040
could limit when actions
actually should change the state.

163
00:11:37.040 --> 00:11:40.320
And that's something that I
haven't dived too deep into.

164
00:11:40.320 --> 00:11:45.240
But right now, when we're using
useReducer a lot, it's action first.

165
00:11:45.240 --> 00:11:46.466
But if you do it state first,

166
00:11:46.466 --> 00:11:49.810
then that's another way that you
could prevent impossible states.

167
00:11:49.810 --> 00:11:55.420
So for example, if I'm loading data,
but I have a back button and

168
00:11:55.420 --> 00:12:01.650
I go back to the form where I just enter
my input and everything like that.

169
00:12:02.930 --> 00:12:06.483
And I have an action that's like,
all right, I got the search results,

170
00:12:06.483 --> 00:12:08.210
take me to the results page.

171
00:12:08.210 --> 00:12:12.471
What should actually happen is I should
only be able to go there if I'm in a state

172
00:12:12.471 --> 00:12:14.530
where I'm waiting for results.

173
00:12:14.530 --> 00:12:19.234
If I'm not in that state, like if I'm on
the first step, where I'm just entering

174
00:12:19.234 --> 00:12:23.980
search information, then that action
should be completely ignored.

175
00:12:23.980 --> 00:12:28.101
So that's a core principle of state
machines just preventing impossible

176
00:12:28.101 --> 00:12:29.500
transitions like that.

