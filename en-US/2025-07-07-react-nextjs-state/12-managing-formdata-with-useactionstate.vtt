WEBVTT

1
00:00:00.240 --> 00:00:04.513
&gt;&gt; David Khourshid: Okay, so the next one
that I want to talk about is actually,

2
00:00:04.513 --> 00:00:06.563
it's a shorter lesson, but

3
00:00:06.563 --> 00:00:11.920
it is one of the ways that you could
actually simplify basic forms.

4
00:00:11.920 --> 00:00:17.387
Because let's be honest, a lot of our
application is just a bunch of forms and

5
00:00:17.387 --> 00:00:22.240
most of these forms are actually
simpler than we realize.

6
00:00:22.240 --> 00:00:26.680
So I'm going to go to
the scratch pad here and

7
00:00:26.680 --> 00:00:33.170
just demonstrate to you basically
what we could do about forms.

8
00:00:33.170 --> 00:00:37.908
So let's say that we have a form and
we have, you know,

9
00:00:37.908 --> 00:00:40.570
first name, set first name.

10
00:00:40.570 --> 00:00:46.562
And just for, just for this example,
we're going to only use one first name and

11
00:00:46.562 --> 00:00:50.330
then we have a form which
handles that first name.

12
00:00:50.330 --> 00:00:55.410
This is code that you learned when
you are first starting off in React.

13
00:00:55.410 --> 00:01:00.399
It is probably the most basic and
common example of use dates and

14
00:01:00.399 --> 00:01:07.600
working with forms, and so the idea is
that we would have an on submit over here.

15
00:01:07.600 --> 00:01:13.194
And again, this is muscle memory, but you
would type event.Prevent defaults, because

16
00:01:13.194 --> 00:01:17.840
the form is going to have some sort of
default action of reloading the page.

17
00:01:17.840 --> 00:01:21.120
And you don't want that,
which is why we have it over there.

18
00:01:21.120 --> 00:01:24.483
And then let's say that our form
just consists of the first name and

19
00:01:24.483 --> 00:01:26.400
we want to do something with that.

20
00:01:26.400 --> 00:01:29.120
We could just console log the first name.

21
00:01:30.560 --> 00:01:34.721
But here's the thing, in HTML and the dom,

22
00:01:34.721 --> 00:01:39.200
the form actually contains
the state itself.

23
00:01:39.200 --> 00:01:42.240
So really we're duplicating
state over here.

24
00:01:42.240 --> 00:01:46.390
When you type into an input, and
especially if you give it a name,

25
00:01:46.390 --> 00:01:49.635
like let's say that we give
it a name of first name,

26
00:01:49.635 --> 00:01:52.520
that data already exists
in the form itself.

27
00:01:52.520 --> 00:01:54.200
So let me show you what I mean.

28
00:01:54.200 --> 00:01:57.089
If we get rid of this on change and

29
00:01:57.089 --> 00:02:01.048
instead we read the form
data from the form,

30
00:02:01.048 --> 00:02:07.160
then we could really just in a way
we could derive that information.

31
00:02:08.200 --> 00:02:13.660
So we're going to grab the form data
using this new form data constructor and

32
00:02:13.660 --> 00:02:17.570
using this target,
which is the form element.

33
00:02:17.570 --> 00:02:21.533
For some reason,
even though we're in OnSubmit,

34
00:02:21.533 --> 00:02:25.690
TypeScript thinks that it
can be any random element.

35
00:02:25.690 --> 00:02:29.890
So we have to say no, this is definitely
a form elements that we're working with.

36
00:02:31.250 --> 00:02:35.490
And so what you're going to
get is a form data object.

37
00:02:35.490 --> 00:02:38.717
And so the FormData object,
it has its own API, but

38
00:02:38.717 --> 00:02:42.950
it is completely native and
supported in all modern browsers.

39
00:02:42.950 --> 00:02:48.062
So what we could do is if we want to get
the first name, there's formdata get,

40
00:02:48.062 --> 00:02:53.670
and then we could get that name, you know,
just directly from the form data.

41
00:02:53.670 --> 00:02:59.318
And so what this allows us to do is
really eliminate a number of use dates so

42
00:02:59.318 --> 00:03:03.830
we don't have to keep track
of each individual field.

43
00:03:03.830 --> 00:03:06.630
Instead we could just read from that.

44
00:03:06.630 --> 00:03:11.260
Now if you have many fields,
then we could actually use.

45
00:03:11.260 --> 00:03:13.340
We could use Zod as well.

46
00:03:13.340 --> 00:03:17.390
So how many of you are familiar with Zod?

47
00:03:17.390 --> 00:03:21.660
Okay, or
whatever related library you're using.

48
00:03:21.660 --> 00:03:27.768
So with Zod we could actually parse,
we could create a schema for

49
00:03:27.768 --> 00:03:33.740
the form and so we could parse
that information from the form.

50
00:03:33.740 --> 00:03:41.439
So let's say const form schema equals
an object where we have the first name and

51
00:03:41.439 --> 00:03:46.480
then we could just add
some validation there.

52
00:03:46.480 --> 00:03:52.536
But Zod also allows us to parse and
see that the entries of this form data,

53
00:03:52.536 --> 00:03:57.603
which the form data you could
use object from entries because

54
00:03:57.603 --> 00:04:02.440
it's going to be key value,
key value, key value.

55
00:04:02.440 --> 00:04:04.840
And then you could create
an object from that.

56
00:04:04.840 --> 00:04:07.320
So you could parse that
using the form schema.

57
00:04:07.320 --> 00:04:13.080
And if there are errors and this allows
you to do form validation as well.

58
00:04:13.080 --> 00:04:16.600
So you might have a first name is
required thing or something like that.

59
00:04:17.800 --> 00:04:27.000
But we could get parsed data
firstname if it exists.

60
00:04:27.000 --> 00:04:30.660
And we know that that's
going to be a string.

61
00:04:30.660 --> 00:04:35.140
So that's how you could use Zod as
well in combination with form data.

62
00:04:36.900 --> 00:04:39.140
So why am I showing you this?

63
00:04:39.140 --> 00:04:46.304
This is definitely an alternative to using
just multiple use dates for your form.

64
00:04:46.304 --> 00:04:50.632
But also when you're working
with a next JS application,

65
00:04:50.632 --> 00:04:56.390
there actually is a hook that really
helps you with work natively with forms.

66
00:04:56.390 --> 00:05:01.790
There's both a hook and there's
a native Next JS server components or

67
00:05:01.790 --> 00:05:06.456
Server Action feature that allows
you to pass a server action

68
00:05:06.456 --> 00:05:09.710
directly into a form and to use that.

69
00:05:09.710 --> 00:05:13.759
And this will handle all of
your forms loading states and

70
00:05:13.759 --> 00:05:19.230
the response from submitting the form and
everything like that.

71
00:05:19.230 --> 00:05:25.125
So the way we could do that,
if I get rid of all of this,

72
00:05:25.125 --> 00:05:30.377
we're going to grab
the use action state hook.

73
00:05:30.377 --> 00:05:34.379
So it's gonna be states
some submit action.

74
00:05:34.379 --> 00:05:41.480
So just gonna say, action equals, and this
is something that just takes form data.

75
00:05:41.480 --> 00:05:46.665
So we're going to use action state,
pass that submit action in there and

76
00:05:46.665 --> 00:05:49.480
and then also pass in an initial state.

77
00:05:50.520 --> 00:05:54.600
And this is just something
that it requires.

78
00:05:54.600 --> 00:05:58.446
So this initial state we
could just have as null and

79
00:05:58.446 --> 00:06:02.360
it's also going to give us is pending.

80
00:06:02.360 --> 00:06:07.323
And so the cool thing about this is that
we could pass in that form action directly

81
00:06:07.323 --> 00:06:12.137
to the form and then we don't need to
maintain the, we don't need to maintain

82
00:06:12.137 --> 00:06:16.806
each of the individual variables because
it's going to be done via name and

83
00:06:16.806 --> 00:06:21.474
then when you press submit, it's just
going to go through that form action

84
00:06:21.474 --> 00:06:26.500
we're going to get is pending, so
we could definitely have a pending state.

85
00:06:26.500 --> 00:06:31.399
So if is pending, then we could
show something like a loader or

86
00:06:31.399 --> 00:06:37.300
something like that and
then eventually we will have our state.

87
00:06:37.300 --> 00:06:42.450
So if we have our state then oops,
not that,

88
00:06:42.450 --> 00:06:49.980
but we could return the state that
we get from the submit action.

