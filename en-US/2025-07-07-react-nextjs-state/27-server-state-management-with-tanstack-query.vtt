WEBVTT

1
00:00:00.036 --> 00:00:04.362
&gt;&gt; David Khourshid: All right, so
I want to briefly talk about fetching data

2
00:00:04.362 --> 00:00:08.045
because when you look at
your applications, or

3
00:00:08.045 --> 00:00:13.567
at least many applications in React
that I've seen, some of the most,

4
00:00:13.567 --> 00:00:18.354
I don't want to call it egregious,
but some of the most common

5
00:00:18.354 --> 00:00:23.600
uses of Use state and Use effect are for
fetching data and React.

6
00:00:23.600 --> 00:00:27.019
It gives you actually
a couple patterns or, sorry,

7
00:00:27.019 --> 00:00:31.310
React naturally gives you a pattern
right now to prevent that.

8
00:00:31.310 --> 00:00:36.350
And that's using Suspense and
using server components.

9
00:00:36.350 --> 00:00:39.050
Now if you don't have
the ability to do that,

10
00:00:39.050 --> 00:00:44.270
like you're not on the latest version
of React and that's not possible.

11
00:00:44.270 --> 00:00:48.765
One of the more common approaches
that you could do is using

12
00:00:48.765 --> 00:00:51.710
a third party data fetching library.

13
00:00:52.760 --> 00:00:57.480
So I'm going to go to Fetch readme.

14
00:01:00.280 --> 00:01:04.484
Commonly we see this useeffect and
Usestate dance when we're searching for

15
00:01:04.484 --> 00:01:05.320
results.

16
00:01:05.320 --> 00:01:08.120
You've probably seen this
code all over the place.

17
00:01:08.120 --> 00:01:15.160
This is just a very common example of
how you have accidental complexity.

18
00:01:15.160 --> 00:01:20.010
This has almost nothing to do with the
problem domain that we're working with.

19
00:01:20.010 --> 00:01:24.720
It's in fact the only line that
matters is this one right here.

20
00:01:24.720 --> 00:01:28.080
Well, this one and
the actual flight search.

21
00:01:28.080 --> 00:01:30.000
Everything else is just noise.

22
00:01:30.000 --> 00:01:34.222
And so this is an example of how it just
makes things really confusing to work

23
00:01:34.222 --> 00:01:37.654
with, even though like it's
an extremely common pattern.

24
00:01:37.654 --> 00:01:40.880
So, what can we do instead?

25
00:01:40.880 --> 00:01:45.850
We can actually use a library
like Tanstack Query.

26
00:01:45.850 --> 00:01:50.808
And so with Tanstack Query, it has so many
features that if you were to build your

27
00:01:50.808 --> 00:01:55.470
own data fetching abstraction,
some of these features are things that you

28
00:01:55.470 --> 00:01:58.370
might run into in the future and
realize that.

29
00:01:58.370 --> 00:02:02.545
All right,
Tanstack Query already has this built in,

30
00:02:02.545 --> 00:02:07.444
such as being able to define how
long to keep things in the cache or

31
00:02:07.444 --> 00:02:11.540
automatic retries and things like that.

32
00:02:11.540 --> 00:02:14.349
So how many of you have
actually heard of or

33
00:02:14.349 --> 00:02:17.490
are using Tansat Query
in your applications?

34
00:02:17.490 --> 00:02:21.561
All right, 50%, that's [LAUGH].

35
00:02:21.561 --> 00:02:22.227
Yeah, and

36
00:02:22.227 --> 00:02:27.299
I'm sure that many of you have honestly
just done this Use effect pattern.

37
00:02:27.299 --> 00:02:29.540
And even this isn't perfect.

38
00:02:29.540 --> 00:02:35.379
Like we need to set let is is
canceled to like false and

39
00:02:35.379 --> 00:02:38.980
then we need to do some cleanup.

40
00:02:38.980 --> 00:02:40.380
So return is canceled.

41
00:02:40.380 --> 00:02:44.956
True, this used to be like the way
that you would fetch data and

42
00:02:44.956 --> 00:02:47.320
use effects the proper way.

43
00:02:47.320 --> 00:02:53.160
But now instead of that, the more modern
way is like const aborts controller.

44
00:02:53.160 --> 00:02:57.320
You set up an abort controller and
then you have abortcontroller aborts.

45
00:02:57.320 --> 00:03:02.215
And then you could either pass it
in natively if it supports it, or

46
00:03:02.215 --> 00:03:06.309
you could do something where
if the signal is aborted,

47
00:03:06.309 --> 00:03:09.430
then return, it gets really confusing.

48
00:03:09.430 --> 00:03:12.710
And these are things that you're
typing over and over and over again.

49
00:03:12.710 --> 00:03:16.273
And that's why it's tempting to
make your own abstraction or

50
00:03:16.273 --> 00:03:18.475
to just copy paste this entire thing.

51
00:03:18.475 --> 00:03:23.307
And even when you ask AI coding
assistants, they're probably going to

52
00:03:23.307 --> 00:03:28.630
create a useeffect usestate mess
just like this for fetching data.

53
00:03:28.630 --> 00:03:31.910
But instead of that,
we could just use query.

54
00:03:31.910 --> 00:03:36.145
So with Tanstack query,
it does require a query client, and

55
00:03:36.145 --> 00:03:40.960
I'll show you where that's set up,
but you give it a query key.

56
00:03:40.960 --> 00:03:45.487
And so this is going to be an array that
uniquely identifies the data that you're

57
00:03:45.487 --> 00:03:46.104
loading.

58
00:03:46.104 --> 00:03:50.256
So we scope this,
we're seeing that this is flights, and

59
00:03:50.256 --> 00:03:55.681
we pass in the flight search data so
that if the flightsearch data changes and

60
00:03:55.681 --> 00:04:00.681
we refetch again, we know that we're
not going to reach into the cache

61
00:04:00.681 --> 00:04:03.630
because there is no cache item for this.

62
00:04:03.630 --> 00:04:07.780
Or we're going to have to make a new
search, which happens over here.

63
00:04:07.780 --> 00:04:10.580
And honestly, these are pretty optional.

64
00:04:10.580 --> 00:04:13.781
There's also mutations
if you want to like,

65
00:04:13.781 --> 00:04:19.762
instead of fetching within a component,
you want to just fetch directly when some,

66
00:04:19.762 --> 00:04:22.980
when some side effect
is supposed to happen.

