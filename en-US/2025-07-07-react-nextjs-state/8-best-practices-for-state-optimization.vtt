WEBVTT

1
00:00:00.320 --> 00:00:04.803
&gt;&gt; David Khourshid: The next two lessons
we are going to be working on optimizing

2
00:00:04.803 --> 00:00:09.280
state management and
really organizing it a lot better.

3
00:00:09.280 --> 00:00:15.088
So what I want to start off with are a few
principles that I personally believe

4
00:00:15.088 --> 00:00:21.444
about state management that really help me
shape how I think about managing complex

5
00:00:21.444 --> 00:00:26.560
app logic and how State is supposed
to update in your application.

6
00:00:27.770 --> 00:00:33.450
The first one is that events
are the real source of truth.

7
00:00:33.450 --> 00:00:38.641
If you think about when you make a deposit
or make a withdrawal from a bank,

8
00:00:38.641 --> 00:00:43.610
how does it keep track of how much
money you have in your bank accounts?

9
00:00:43.610 --> 00:00:46.810
And how is it sure that it
doesn't go out of sync?

10
00:00:46.810 --> 00:00:50.865
It's not like it's keeping this
big object, global object,

11
00:00:50.865 --> 00:00:55.560
where it's like, okay,
this person has this much money in there.

12
00:00:55.560 --> 00:00:58.440
Instead it keeps what they call a ledger.

13
00:00:58.440 --> 00:01:03.160
But, you know, in our case, we could
refer to it as just an array of events.

14
00:01:03.160 --> 00:01:07.735
So basically anything that happens
in your application is based on

15
00:01:07.735 --> 00:01:11.160
events that change the state over time.

16
00:01:11.160 --> 00:01:16.133
So like with the bank, you could have
a long ledger where it's like you

17
00:01:16.133 --> 00:01:21.110
made this deposit and this withdrawal and
this deposit, et cetera.

18
00:01:21.110 --> 00:01:24.295
And when you reduce all of those things,
you come up with,

19
00:01:24.295 --> 00:01:28.790
like we talked about in the first
exercise, that's derived value.

20
00:01:28.790 --> 00:01:31.830
So that's why I say events
are the source of truth.

21
00:01:33.030 --> 00:01:37.510
And that's why it's good to think
about things in terms of events.

22
00:01:37.510 --> 00:01:41.590
Because since they're the source of truth,
it doesn't matter

23
00:01:41.590 --> 00:01:46.121
what kind of sources your data are coming
from or what is updating what,

24
00:01:46.121 --> 00:01:50.700
everything can be considered
an event that changes your state.

25
00:01:50.700 --> 00:01:54.980
So I remember earlier
someone was mentioning that.

26
00:01:54.980 --> 00:01:59.040
I think it was you, that you were
mentioning that you have multiple,

27
00:01:59.040 --> 00:02:03.590
multiple places or multiple sources of
truth where your data was coming in and

28
00:02:03.590 --> 00:02:05.420
updating the TV app.

29
00:02:05.420 --> 00:02:10.586
So all of those could be considered
an event where the event

30
00:02:10.586 --> 00:02:16.850
says something changed and
the state will react to that change.

31
00:02:16.850 --> 00:02:21.645
And by abstracting things in terms of
events, you don't really have to think

32
00:02:21.645 --> 00:02:25.700
too deeply about what kind of source
it is, what kind of library or

33
00:02:25.700 --> 00:02:30.610
API you're working with, because at
the end of the day, it's just an event.

34
00:02:31.890 --> 00:02:33.978
So I really like events too,

35
00:02:33.978 --> 00:02:38.250
because events capture a lot
more than state's changes.

36
00:02:38.250 --> 00:02:44.553
And you're going to see this when we get
to that dreaded chained useEffect example,

37
00:02:44.553 --> 00:02:49.171
because when we're dealing with useEffect,
for instance,

38
00:02:49.171 --> 00:02:54.590
the way that useEffects just rerun
are based on the dependency array.

39
00:02:54.590 --> 00:02:58.470
And in the dependency array,
we're saying one of these values changed.

40
00:02:58.470 --> 00:03:01.390
We don't know which one,
but one of them changed.

41
00:03:01.390 --> 00:03:03.207
So we're missing a lot of information.

42
00:03:03.207 --> 00:03:09.090
We're missing the intent, what caused the
change, we're missing timing details and

43
00:03:09.090 --> 00:03:14.830
we're missing that log of, here's all of
the things that led up to this change.

44
00:03:14.830 --> 00:03:21.550
It's just this piece of data updated and
good luck finding out where it is.

45
00:03:21.550 --> 00:03:24.124
So events are the real source of truth,

46
00:03:24.124 --> 00:03:28.110
whether you're using them
explicitly in your apps or not.

47
00:03:28.110 --> 00:03:33.103
You could conceptually think that
anything that changes in your

48
00:03:33.103 --> 00:03:35.140
app is due to some events.

49
00:03:35.140 --> 00:03:40.020
Whether it's from the user or
from some external source, doesn't matter.

50
00:03:41.940 --> 00:03:45.369
The second one might be pretty obvious,
but

51
00:03:45.369 --> 00:03:49.860
the use of pure functions and
immutability.

52
00:03:49.860 --> 00:03:52.645
I really like using pure functions for

53
00:03:52.645 --> 00:03:57.940
AppLogic just because pure functions
are the easiest thing to test.

54
00:03:57.940 --> 00:04:02.946
And it's also the simplest way of
representing your applogic in terms of,

55
00:04:02.946 --> 00:04:06.125
when I'm in this date and
this event happened,

56
00:04:06.125 --> 00:04:08.840
what is the next state going to be?

57
00:04:08.840 --> 00:04:13.400
So again, it doesn't matter whether
you're working in angular react vue, etc.

58
00:04:13.400 --> 00:04:18.280
You can represent your core application
logic using these pure functions.

59
00:04:18.280 --> 00:04:23.880
And you could also represent the way that
you derive state as a pure function too.

60
00:04:23.880 --> 00:04:29.990
So the core principle of this is
really deterministic behavior.

61
00:04:29.990 --> 00:04:33.979
You have this pure function
that runs deterministically and

62
00:04:33.979 --> 00:04:38.824
given the same input, it's always
going to produce the same output, but

63
00:04:38.824 --> 00:04:41.190
more so, it's easy to test.

64
00:04:41.190 --> 00:04:45.270
So you could take that pure function and
write unit tests for it.

65
00:04:45.270 --> 00:04:48.310
And pure functions are also composable.

66
00:04:48.310 --> 00:04:53.670
And you can do things like memoizing the
results of pure functions pretty reliably.

67
00:04:53.670 --> 00:04:56.431
Since everything is self-contained
within that function,

68
00:04:56.431 --> 00:04:58.030
you know they're deterministic.

69
00:04:58.030 --> 00:05:02.322
So you know that if I cache this
expensive value, it's always going to

70
00:05:02.322 --> 00:05:06.990
be consistent with what the pure
function was going to produce.

71
00:05:06.990 --> 00:05:11.952
So that's why I say try to keep all of
your application logic centralized in

72
00:05:11.952 --> 00:05:13.550
pure functions.

73
00:05:13.550 --> 00:05:16.510
Not a single pure function, but
it could be many pure functions.

74
00:05:18.360 --> 00:05:22.450
Another principle that I live
by is the idea that you should

75
00:05:22.450 --> 00:05:26.456
write code as if the framework or
the tool or the library or

76
00:05:26.456 --> 00:05:31.800
any of the underlying abstractions
are just going to change under you.

77
00:05:31.800 --> 00:05:36.440
Now, we've all worked in large code
bases before, and legacy code bases.

78
00:05:36.440 --> 00:05:41.320
We know that this is almost never going
to happen whether we want to or not.

79
00:05:42.360 --> 00:05:46.635
But the idea is that we want to avoid
tightly coupling business logic to to

80
00:05:46.635 --> 00:05:48.860
framework specific patterns.

81
00:05:48.860 --> 00:05:53.163
And this goes hand-in-hand with
peer functions for AppLogic.

82
00:05:53.163 --> 00:05:57.230
We want to separate our logic so
that it's easy to test and

83
00:05:57.230 --> 00:06:00.300
it's easy to adapt pretty much anywhere.

84
00:06:03.100 --> 00:06:07.327
Then, of course,
there are state machines for modeling,

85
00:06:07.327 --> 00:06:11.976
which combines the idea of events
being the real source of truth,

86
00:06:11.976 --> 00:06:16.890
first date, and also using pure
functions to represent app logic.

87
00:06:16.890 --> 00:06:20.626
Now again, I'm not saying use
state machines everywhere,

88
00:06:20.626 --> 00:06:23.335
but thinking about your
app in terms of these

89
00:06:23.335 --> 00:06:28.810
states can allow you to prevent impossible
states and impossible transitions.

90
00:06:28.810 --> 00:06:32.010
By an impossible state,
I mean, for example,

91
00:06:32.010 --> 00:06:35.210
let's say you have an is success and
is error.

92
00:06:35.210 --> 00:06:39.312
You probably don't want those two
things to be true at the same time, but

93
00:06:39.312 --> 00:06:42.001
if they're both floating
around as you state,

94
00:06:42.001 --> 00:06:45.160
then it is very possible
that that can be the case.

95
00:06:45.160 --> 00:06:49.762
Another one that I see very,
very commonly, and you probably have seen

96
00:06:49.762 --> 00:06:53.752
before too, especially with
limited Internet connection,

97
00:06:53.752 --> 00:06:57.663
is you might click on a user or
click on some search results and

98
00:06:57.663 --> 00:07:02.680
you will get a flash of no search results
found or this user does not exist.

99
00:07:02.680 --> 00:07:06.280
And then one second later
they pop up magically.

100
00:07:06.280 --> 00:07:11.045
And so that's why, thinking of state
machines really eliminates those kinds of

101
00:07:11.045 --> 00:07:15.247
problems where listen, all of your
tests and all of your end to end tests

102
00:07:15.247 --> 00:07:18.630
are probably going to pass and
the user might not notice.

103
00:07:18.630 --> 00:07:22.734
But it's those things that really help
you make your app more maintainable and

104
00:07:22.734 --> 00:07:26.230
more predictable, not only for
the developer, but for the user.

105
00:07:26.230 --> 00:07:29.375
Because we don't want to
see inconsistent states,

106
00:07:29.375 --> 00:07:33.023
we don't want to see an error
that immediately disappears.

107
00:07:33.023 --> 00:07:37.819
Or we don't want to run into a state where
we can't get out of such as an error

108
00:07:37.819 --> 00:07:42.360
state that requires us to
restart the entire application.

109
00:07:42.360 --> 00:07:47.158
So using state machines for modeling,
which like we looked at at the last

110
00:07:47.158 --> 00:07:52.193
exercise, modeling states, events and
transitions are going to be really

111
00:07:52.193 --> 00:07:57.386
helpful for avoiding these kinds of
invalid states, invalid transitions and

112
00:07:57.386 --> 00:08:02.760
other things that we'll run into when we
don't explicitly model our app logic.

113
00:08:04.180 --> 00:08:08.278
Then the last one which we're going to
be talking about probably at the end of

114
00:08:08.278 --> 00:08:10.660
the workshop is declarative side effects.

115
00:08:11.700 --> 00:08:17.742
The main principle of this is we want
to separate updating our state so

116
00:08:17.742 --> 00:08:24.420
that peer application logic from
the actual execution of the side effects.

117
00:08:26.260 --> 00:08:30.484
A great example of this is the ELM
architecture, where with ELM and

118
00:08:30.484 --> 00:08:35.313
you have this idea of when you're in a
state and you have some sort of action or

119
00:08:35.313 --> 00:08:38.797
event, it's not just going
to return the next state.

120
00:08:38.797 --> 00:08:43.372
But it's going to return the next state
and also what it calls commands or

121
00:08:43.372 --> 00:08:47.440
effects that are supposed to run
when that state is executed.

122
00:08:47.440 --> 00:08:52.009
And so by having that be declarative,
we could both

123
00:08:52.009 --> 00:08:57.260
easily test that these side
effects are going to occur.

124
00:08:57.260 --> 00:09:00.831
And also, we separate the pure logic, so

125
00:09:00.831 --> 00:09:05.980
the pure function from
the execution of the side effect.

126
00:09:05.980 --> 00:09:08.220
So it makes it a lot easier to test.

127
00:09:08.220 --> 00:09:10.218
We don't actually have to test that,

128
00:09:10.218 --> 00:09:12.940
this side effect did something
when we ran this function.

129
00:09:12.940 --> 00:09:14.780
So let's make sure that
it did the right thing.

130
00:09:14.780 --> 00:09:19.580
We could just test ahead of time like
this effect is going to be called.

131
00:09:19.580 --> 00:09:22.820
And also, it just makes
the behavior more predictable.

132
00:09:22.820 --> 00:09:26.849
For example, let's say that we
were in a flight search page, and

133
00:09:26.849 --> 00:09:28.820
we start searching.

134
00:09:28.820 --> 00:09:31.919
We don't just want to go to
a flight search results page,

135
00:09:31.919 --> 00:09:36.740
we want to go to a flight search results
page and kick off the searching process.

136
00:09:36.740 --> 00:09:40.340
And so that's where declarative
side effects really come in handy.

