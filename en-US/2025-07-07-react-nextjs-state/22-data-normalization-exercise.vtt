WEBVTT

1
00:00:00.240 --> 00:00:01.600
&gt;&gt; David Khourshid: Let's
jump into the exercise.

2
00:00:01.600 --> 00:00:06.240
So this is actually going to
be a pretty fun exercise.

3
00:00:06.240 --> 00:00:09.360
We have a different part
of the application here.

4
00:00:10.400 --> 00:00:11.120
Oops.

5
00:00:11.120 --> 00:00:11.920
There we go.

6
00:00:14.800 --> 00:00:17.723
So if you go to
the normalization exercise now,

7
00:00:17.723 --> 00:00:23.200
you're going to see somewhere where
a user can enter their travel itinerary.

8
00:00:23.200 --> 00:00:26.080
And so we're using a reducer for this.

9
00:00:27.860 --> 00:00:29.060
You could add a destination.

10
00:00:29.060 --> 00:00:32.580
So let's say that you're going to Osaka.

11
00:00:32.580 --> 00:00:39.940
You want to, I don't know, eat sushi and
see the ocean, I don't know.

12
00:00:39.940 --> 00:00:45.500
And then let's say that you have
another destination like Tokyo,

13
00:00:45.500 --> 00:00:49.866
where you want to visit team labs and
eat more sushi,

14
00:00:49.866 --> 00:00:52.660
whatever there is to do in Japan.

15
00:00:54.110 --> 00:00:55.390
And this is nested data.

16
00:00:55.390 --> 00:01:00.830
So you have this, you have destinations,
and so we have multiple.

17
00:01:00.830 --> 00:01:04.386
And then you have to do items in
each of those destinations for

18
00:01:04.386 --> 00:01:05.950
the travel itinerary.

19
00:01:05.950 --> 00:01:10.717
But what we really want to do is
simplify how all of this works so

20
00:01:10.717 --> 00:01:16.402
that we don't have to go deeply into
the destination and then find the to do

21
00:01:16.402 --> 00:01:21.560
item so that we could do things like
delete it and things like that.

22
00:01:22.920 --> 00:01:24.688
So looking back at the page,

23
00:01:24.688 --> 00:01:28.920
we see that we have a destination
within the array of todo items.

24
00:01:28.920 --> 00:01:31.480
And then we have our to
do items over there.

25
00:01:31.480 --> 00:01:37.480
And our goal is to simply normalize
that data so that it's not nested.

26
00:01:40.280 --> 00:01:42.854
And if you want some fun
state challenges too,

27
00:01:42.854 --> 00:01:46.950
then you could do things like
focusing the destination input.

28
00:01:46.950 --> 00:01:50.480
So, for example,
if I add a new destination, well,

29
00:01:50.480 --> 00:01:54.794
it already works like that, but
you could work on, for example,

30
00:01:54.794 --> 00:02:00.390
if you say something and then you press
add, it should focus back on that field.

31
00:02:00.390 --> 00:02:01.910
It's a fun exercise.

32
00:02:02.950 --> 00:02:07.863
And also we're going to be taking a look
as a bonus at implementing undo and

33
00:02:07.863 --> 00:02:12.538
redo and just seeing how that works,
because I think that that is a very

34
00:02:12.538 --> 00:02:16.444
advanced but
important state management skill to learn.

35
00:02:22.660 --> 00:02:25.380
&gt;&gt; David Khourshid: All right,
let's normalize some data.

36
00:02:25.380 --> 00:02:26.012
So again,

37
00:02:26.012 --> 00:02:31.060
we have to do item being nested inside
of destinations under this TO DOS array.

38
00:02:31.060 --> 00:02:33.860
And we have all of our
destinations in here.

39
00:02:33.860 --> 00:02:36.900
So I'm going to be like a broken record.

40
00:02:36.900 --> 00:02:38.980
We're doing things side by side without.

41
00:02:40.020 --> 00:02:41.992
Without deleting code first.

42
00:02:41.992 --> 00:02:45.940
So we are going to put
our TODOS in to do item.

43
00:02:45.940 --> 00:02:50.180
And we're also going to be adding
another bit of information.

44
00:02:50.180 --> 00:02:56.900
We're going to be giving a relation for
what destination it belongs to.

45
00:02:56.900 --> 00:03:01.718
Now, immediately you're going to see some
red, which is great because the red really

46
00:03:01.718 --> 00:03:04.420
helps us out and
tells us you updated this.

47
00:03:04.420 --> 00:03:08.940
So now you need to, you know,
make sure that everything is updated.

48
00:03:08.940 --> 00:03:11.100
So let's say const.

49
00:03:11.100 --> 00:03:12.060
New to do.

50
00:03:12.060 --> 00:03:14.460
Oops, not you new TODOS.

51
00:03:14.460 --> 00:03:19.985
And we're going to give it that
random id the text, but we're also

52
00:03:19.985 --> 00:03:26.300
going to give it the action.destination
ID, which we already have.

53
00:03:26.300 --> 00:03:30.540
So we could pass in that new TODO
here just to make typescript happy.

54
00:03:30.540 --> 00:03:37.700
But what we're also going to do is we're
going to add this to the TODOS array.

55
00:03:37.700 --> 00:03:40.020
So we're going to just push it here.

56
00:03:40.020 --> 00:03:43.060
By the way,
I really like doing state TODOS.

57
00:03:43.060 --> 00:03:44.260
Concat.

58
00:03:44.260 --> 00:03:45.060
It's up to you.

59
00:03:45.060 --> 00:03:45.700
You could do that.

60
00:03:45.700 --> 00:03:47.220
You could do the spread operator.

61
00:03:48.420 --> 00:03:50.659
I don't think it really matters.

62
00:03:52.260 --> 00:03:57.189
All right, and then there is one
more red part over here where we

63
00:03:57.189 --> 00:04:00.510
need to add that array of TODOS.

64
00:04:00.510 --> 00:04:02.590
So are we done?

65
00:04:02.590 --> 00:04:05.390
Not exactly yet.

66
00:04:05.390 --> 00:04:11.870
So we have almost normalized our data,
but we still have this array of TODOS.

67
00:04:11.870 --> 00:04:18.030
So we'll go ahead and comments that out
and then we could just remove that.

68
00:04:20.190 --> 00:04:22.910
Let's see,
there's some other red over here.

69
00:04:22.910 --> 00:04:26.680
So this one,
we actually don't need this anymore.

70
00:04:26.680 --> 00:04:30.204
And this is one of
the main points of this,

71
00:04:30.204 --> 00:04:35.948
where we don't really need to keep
around this boilerplate code for

72
00:04:35.948 --> 00:04:42.920
going deeply into a structure, because,
yeah, we could just delete that code.

73
00:04:44.040 --> 00:04:47.738
So same thing over here,
we're going to filter the TODOS and

74
00:04:47.738 --> 00:04:51.330
this becomes a less expensive operation.

75
00:04:51.330 --> 00:04:55.860
You could do even further
normalization by using an object

76
00:04:55.860 --> 00:05:00.850
instead of an array,
where the object keys are the IDs.

77
00:05:00.850 --> 00:05:05.653
So this is a form of normalization,
but again, you could go further, and

78
00:05:05.653 --> 00:05:09.682
it's actually much faster if
you use an object technically,

79
00:05:09.682 --> 00:05:14.290
because it's an O of one operation
versus an O of N operation.

80
00:05:14.290 --> 00:05:17.854
But just to make things simple,
I like keeping it as an array and

81
00:05:17.854 --> 00:05:21.030
because that also preserves
the order of the items too.

82
00:05:21.030 --> 00:05:24.214
So that's one of the trade
offs that you have to think of

83
00:05:24.214 --> 00:05:28.470
when you're deciding to normalize
via an object or an array.

84
00:05:28.470 --> 00:05:33.270
And there's also one more hidden
thing over here, which is this.

85
00:05:33.270 --> 00:05:35.783
When you delete a destination,

86
00:05:35.783 --> 00:05:41.458
now you also have to filter through
the TODOS and you have to make sure that

87
00:05:41.458 --> 00:05:47.220
any TODOS that are related to that
destination are gone as well.

88
00:05:47.220 --> 00:05:50.679
So I mean, they're still going to be
invisible because you're deleting

89
00:05:50.679 --> 00:05:53.140
the destination so
they don't show up in the ui.

90
00:05:53.140 --> 00:05:54.780
But it's just nice to do.

91
00:05:54.780 --> 00:05:57.537
And especially if you're
syncing with a server,

92
00:05:57.537 --> 00:06:01.605
you don't want to have those impossible
states of orphans to do items that

93
00:06:01.605 --> 00:06:04.900
are trying to relate to
a destination that doesn't exist.

94
00:06:06.500 --> 00:06:10.500
All right, so now this code is
going to become a lot simpler.

95
00:06:12.000 --> 00:06:15.840
We have our destinations over
here that come from the state.

96
00:06:15.840 --> 00:06:20.229
So now we could just read the to dos and
actually,

97
00:06:20.229 --> 00:06:25.489
we might need to do something
a little bit different here.

98
00:06:25.489 --> 00:06:30.080
So we split screen this.

99
00:06:31.760 --> 00:06:35.600
We need to split this out
into its own components.

100
00:06:35.600 --> 00:06:37.600
And here's the way I like to do this.

101
00:06:39.580 --> 00:06:43.312
It's actually pretty common in React apps,
especially big ones, where it's like,

102
00:06:43.312 --> 00:06:46.580
okay, I'm just going to map through
values, and then I'm going to use this

103
00:06:46.580 --> 00:06:49.500
convenient inline function to
just put everything in there.

104
00:06:49.500 --> 00:06:51.872
And then you realize that
that gets pretty big,

105
00:06:51.872 --> 00:06:54.380
and then you have to use a hook for
something.

106
00:06:54.380 --> 00:06:57.486
So then it becomes a little bit annoying,

107
00:06:57.486 --> 00:07:00.940
the fact that you inlined
all of this stuff.

108
00:07:00.940 --> 00:07:05.734
And so, that's why I do recommend
just creating individual components

109
00:07:05.734 --> 00:07:07.870
whenever it's feasible.

110
00:07:07.870 --> 00:07:10.590
But, sometimes it's not.

111
00:07:10.590 --> 00:07:12.590
And we could just create a.

112
00:07:12.590 --> 00:07:13.670
We could refactor.

113
00:07:13.670 --> 00:07:17.271
Anyway, so
let's make a function destination and

114
00:07:17.271 --> 00:07:22.045
we're going to have the destination,
and then we're just going to

115
00:07:22.045 --> 00:07:26.910
return everything inside that card,
unless it doesn't let us.

116
00:07:26.910 --> 00:07:28.670
There we go.

117
00:07:28.670 --> 00:07:32.205
And then we're going
to see a bunch of red.

118
00:07:32.205 --> 00:07:37.290
[COUGH] So this is another
important thing to talk about.

119
00:07:37.290 --> 00:07:42.410
When we had it inline, we already
had dispatch and things like that.

120
00:07:42.410 --> 00:07:45.658
So there's a couple of different
approaches for solving this.

121
00:07:45.658 --> 00:07:50.415
We could either pass dispatch
directly in here if we wanted to, or

122
00:07:50.415 --> 00:07:54.392
the other approaches,
we could abstract that away and

123
00:07:54.392 --> 00:07:57.343
make this component truly standalone.

124
00:07:57.343 --> 00:07:59.991
So we could say, for example.

125
00:07:59.991 --> 00:08:03.138
Onupdate, destination, etc.

126
00:08:03.138 --> 00:08:07.605
For simplicity, I'm just going
to pass in dispatch here, but

127
00:08:07.605 --> 00:08:11.241
you could do whatever
approach works best for you.

128
00:08:11.241 --> 00:08:17.121
So this dispatch we are going
to have action void and

129
00:08:17.121 --> 00:08:21.783
then most everything should work fine.

130
00:08:23.783 --> 00:08:29.393
So we will remove that for now.

131
00:08:32.673 --> 00:08:36.579
Now we also need to grab the TODOS,

132
00:08:36.579 --> 00:08:41.025
so we could pass that in through here and

133
00:08:41.025 --> 00:08:46.144
then this is going to be
just our array of TODOS

134
00:08:46.144 --> 00:08:50.616
that are related to that destination.

135
00:08:50.616 --> 00:08:55.150
So now instead of destination
todos we would have TODOS length.

136
00:08:55.150 --> 00:09:00.034
Instead of destination TODOS map,
we would just

137
00:09:00.034 --> 00:09:05.152
map over the TODOS and so
now we can take this card and

138
00:09:05.152 --> 00:09:11.248
we could replace it with our destination,
which is in here.

139
00:09:11.248 --> 00:09:15.709
And then the TODOS are going to be

140
00:09:15.709 --> 00:09:20.833
the TODOS where the todo destination

141
00:09:20.833 --> 00:09:25.305
ID matches the destination ID.

142
00:09:25.305 --> 00:09:26.408
Still getting an error here.

143
00:09:26.408 --> 00:09:29.093
So let's figure out what's going,
we need a key.

144
00:09:29.093 --> 00:09:31.420
Of course.

145
00:09:31.420 --> 00:09:33.010
Another thing too,

146
00:09:33.010 --> 00:09:38.816
always prefer to have a unique ID when
it comes to mapping over something.

147
00:09:38.816 --> 00:09:43.600
I know we've all done the habit where
we use indexes and things like that,

148
00:09:43.600 --> 00:09:47.183
but the most reliable thing
is going to be a key.

149
00:09:47.183 --> 00:09:54.223
And so the reason why is that things can
change order and then the UI states.

150
00:09:54.223 --> 00:09:58.858
So the natural DOM state of whatever
component is being worked on is

151
00:09:58.858 --> 00:10:01.263
going to be completely lost.

152
00:10:01.263 --> 00:10:05.904
So imagine you have, for example, a list
of TODOS, each of which has an input or

153
00:10:05.904 --> 00:10:08.610
something, and you're typing somewhere and

154
00:10:08.610 --> 00:10:11.943
then another TODOS is
prepended to the list.

155
00:10:11.943 --> 00:10:15.810
Now, because that index is different,
React treats that TODOS item as

156
00:10:15.810 --> 00:10:19.623
a completely different component and
so you're going to lose focus.

157
00:10:20.983 --> 00:10:22.831
So that's why if you have the ID,

158
00:10:22.831 --> 00:10:27.382
that won't happen because that ID
is going to stay exactly the same.

159
00:10:27.382 --> 00:10:30.743
So that's another mini lesson there.

160
00:10:30.743 --> 00:10:34.023
All right, so
everything mostly looks good.

161
00:10:34.023 --> 00:10:35.703
We've normalized our data.

162
00:10:35.703 --> 00:10:37.363
We no longer need those to.

163
00:10:38.873 --> 00:10:42.073
There's another small thing
that I want to talk about.

164
00:10:43.433 --> 00:10:48.010
In our TODO item, when we have
like a destination ID, like for

165
00:10:48.010 --> 00:10:53.378
example, it's just a string over here and
we're just creating a TODO,

166
00:10:53.378 --> 00:10:58.713
and we're passing in the destination ID,
absolutely nothing.

167
00:10:58.713 --> 00:11:04.325
And this is really interesting,
nothing is stopping us from doing this or

168
00:11:04.325 --> 00:11:07.593
even just doing like a TODO ID or
whatever.

169
00:11:07.593 --> 00:11:11.193
So we could put anything invalid in there.

170
00:11:11.193 --> 00:11:17.432
Are there any guardrails that can help us
just sort of prevent this anti pattern or

171
00:11:17.432 --> 00:11:23.433
not really an anti pattern, but
just a potential for errors to happen?

172
00:11:23.433 --> 00:11:26.313
The answer is yes, and it's by.

173
00:11:26.313 --> 00:11:28.561
This is sort of an advanced
typescript technique.

174
00:11:28.561 --> 00:11:30.953
It's called a branded type.

175
00:11:30.953 --> 00:11:36.100
So it looks like this type brand B and
we're gonna do a simple version

176
00:11:36.100 --> 00:11:41.626
where it's just a string and we have
this weird little object over here.

177
00:11:41.626 --> 00:11:46.930
Basically this creates a special
type that says it is a string,

178
00:11:46.930 --> 00:11:50.083
but it is a special kind of string.

179
00:11:50.083 --> 00:11:54.543
So just to give you an idea,
we might have a destination ID and

180
00:11:54.543 --> 00:11:57.953
we could give it the brand
of destination ID and

181
00:11:57.953 --> 00:12:03.243
we can also have a TODO ID which we
could give the brand of TODO ID.

182
00:12:03.243 --> 00:12:05.043
Functionally, these are strings.

183
00:12:05.043 --> 00:12:06.923
They're going to work just like strings.

184
00:12:06.923 --> 00:12:10.003
And as far as the runtime is concerned,
they are strings.

185
00:12:10.003 --> 00:12:15.058
We're not adding any extra properties
to it or anything like that.

186
00:12:15.058 --> 00:12:20.672
But here's the key, when we put this
in there and we put that branded type,

187
00:12:20.672 --> 00:12:25.842
we immediately see red because it's like,
hey, we can't actually

188
00:12:25.842 --> 00:12:31.216
guarantee that this action destination
ID is really a destination ID.

189
00:12:31.216 --> 00:12:35.143
So now we have to enforce that upstream.

190
00:12:35.143 --> 00:12:38.710
So we could say this should
be a destination ID and

191
00:12:38.710 --> 00:12:42.503
now we're going to get
read somewhere else.

192
00:12:42.503 --> 00:12:46.918
And so destination ID,
if we go to destination,

193
00:12:46.918 --> 00:12:49.943
we could say every destination.

194
00:12:51.058 --> 00:12:53.213
Wait, that's destination.

195
00:12:54.253 --> 00:12:58.255
Let's call this destination card.

196
00:12:58.255 --> 00:13:04.478
Okay, so destination where was,

197
00:13:04.478 --> 00:13:09.569
nope, this is what happens when

198
00:13:09.569 --> 00:13:14.485
I use the same name for things.

199
00:13:14.485 --> 00:13:19.664
But anyway, so in the destination, we
could say that whatever ID is in here is

200
00:13:19.664 --> 00:13:24.783
definitely a destination ID and whatever
ID is here is definitely a TODO ID.

201
00:13:26.383 --> 00:13:31.161
And so when we're actually creating that,
we can coerce, for

202
00:13:31.161 --> 00:13:33.743
example, this random UUID.

203
00:13:33.743 --> 00:13:38.004
We could say this, just assume that
it is a destination ID because

204
00:13:38.004 --> 00:13:42.585
we're creating it from scratch, so
we have full control over there.

205
00:13:42.585 --> 00:13:47.753
So same thing over here,
we could coerce this

206
00:13:47.753 --> 00:13:52.513
to be a todo ID and so
now when we're here.

207
00:13:52.513 --> 00:13:57.333
All right, so
now let's try doing something bad.

208
00:13:57.333 --> 00:14:03.050
Let's say we're updating the destination
and we do some junk over here.

209
00:14:03.050 --> 00:14:08.578
It's not gonna yell at us
because that's still a string.

210
00:14:08.578 --> 00:14:13.343
And so we need to change it
in a couple of other places.

211
00:14:13.343 --> 00:14:16.135
But now we're going to see red and

212
00:14:16.135 --> 00:14:21.838
it's going to be because we are not
using the correct branded type.

213
00:14:21.838 --> 00:14:27.815
So, oops, so we could change that and
see that it's fixed.

214
00:14:27.815 --> 00:14:33.783
So we have destination ID and
now everything is fine.

215
00:14:33.783 --> 00:14:37.056
So, when we create a todo so over here,

216
00:14:37.056 --> 00:14:43.110
we can be sure that we're not just
putting in any random destination ID,

217
00:14:43.110 --> 00:14:47.989
but we're actually putting
in an actual destination ID.

218
00:14:47.989 --> 00:14:51.712
So that's, yeah,

219
00:14:51.712 --> 00:14:56.530
any questions on anything

220
00:14:56.530 --> 00:15:01.351
I showed you there so far?

221
00:15:01.351 --> 00:15:08.292
&gt;&gt; Speaker 2: Curious of so I've seen
something similar to the branded type,

222
00:15:08.292 --> 00:15:14.588
and I've seen people like really
lean into enums to try and

223
00:15:14.588 --> 00:15:20.127
avoid using strings anywhere
in the application.

224
00:15:20.127 --> 00:15:26.673
So like for instance, on your types,
rather than using string add to do,

225
00:15:26.673 --> 00:15:33.852
you could just do like an enumerate and
then have like a set of different actions,

226
00:15:33.852 --> 00:15:39.785
would you say there is any drawback or
benefits to between the two?

227
00:15:39.785 --> 00:15:45.045
&gt;&gt; David Khourshid: I think that there's
plus and minuses to both approaches.

228
00:15:45.045 --> 00:15:48.204
Personally, when I'm
working on an application,

229
00:15:48.204 --> 00:15:50.930
I will first start off
with just the strings,

230
00:15:50.930 --> 00:15:55.905
just because I know that if I make a typo
here it's it's going to yell at me anyway.

231
00:15:55.905 --> 00:15:59.771
And also,
I do still get autocompletes when I do.

232
00:15:59.771 --> 00:16:00.816
Do that.

233
00:16:00.816 --> 00:16:05.238
The downside though, for that, and this
is one of the benefits of using enums,

234
00:16:05.238 --> 00:16:08.406
is that, you see,
I'm trying to rename this element and

235
00:16:08.406 --> 00:16:12.507
it's saying, I cannot rename this element,
at least not at the moment.

236
00:16:12.507 --> 00:16:16.573
Just because a string is a string, just
because it happens to be in an object,

237
00:16:16.573 --> 00:16:20.579
doesn't mean that we could replace all
usages of the string with whatever we

238
00:16:20.579 --> 00:16:22.119
decide to put there.

239
00:16:22.119 --> 00:16:26.204
But if we use const enumeration,
action type, and

240
00:16:26.204 --> 00:16:29.244
then we have something like this, and

241
00:16:29.244 --> 00:16:34.374
then we replace this with action type,
dot, add destination,

242
00:16:34.374 --> 00:16:40.273
then you know that then we could
actually change that, I believe.

243
00:16:40.273 --> 00:16:41.189
No, you can't.

244
00:16:41.189 --> 00:16:43.469
But I mean, you could change it here.

245
00:16:45.229 --> 00:16:46.717
And also if you change this,

246
00:16:46.717 --> 00:16:50.029
it doesn't matter because that
value is going to be the same.

247
00:16:50.029 --> 00:16:54.430
And so that's why you're going to see red
there and it's going to be like, hey,

248
00:16:54.430 --> 00:16:56.329
you should probably just do this.

249
00:16:57.769 --> 00:16:59.849
So I do see the benefits of it.

250
00:16:59.849 --> 00:17:03.689
I would say Enums and
TypeScript are a little bit messy.

251
00:17:03.689 --> 00:17:07.849
If you are going to use enums just
because of the way they implemented it.

252
00:17:07.849 --> 00:17:13.949
If you are, then I strongly recommend
using const enums just because I believe,

253
00:17:13.949 --> 00:17:20.409
if I'm not mistaken, that they're just
the runtime values are just the strings.

254
00:17:20.409 --> 00:17:23.849
It's not like some crazy enum object.

255
00:17:23.849 --> 00:17:26.489
It's just going to be a string.

256
00:17:27.609 --> 00:17:31.999
&gt;&gt; Speaker 2: Yeah, well,
and I think with the enums,

257
00:17:31.999 --> 00:17:39.289
if you are using it only in type
references, it's going to strip it.

258
00:17:39.289 --> 00:17:44.154
The TypeScript compiler will
strip any of the enum types

259
00:17:44.154 --> 00:17:47.379
if you don't use them as a value.

260
00:17:47.379 --> 00:17:50.099
Whereas if you use them as a value,
then it will.

261
00:17:50.099 --> 00:17:53.459
It has to force it as an object,
essentially.

262
00:17:53.459 --> 00:17:55.419
&gt;&gt; David Khourshid: Right?
Yeah, I believe so.

263
00:17:55.419 --> 00:17:59.907
But in this case, because we're,
in the actual code,

264
00:17:59.907 --> 00:18:04.979
output is going to output as
these strings, literally.

265
00:18:04.979 --> 00:18:11.487
So, yeah, but, yeah, so that,
that's actually a good example of,

266
00:18:11.487 --> 00:18:17.459
like, if we go to finite solution,
over here we have this stuff.

267
00:18:17.459 --> 00:18:21.841
So you could actually say flight status.

268
00:18:21.841 --> 00:18:27.619
This could also be an enum too,
so const enum flightstatus.

269
00:18:27.619 --> 00:18:30.499
And then you have idle
submitting error success.

270
00:18:30.499 --> 00:18:35.106
And so instead of, for example,
checking if something is submitting,

271
00:18:35.106 --> 00:18:38.059
like over here,
you could just use that enum.

272
00:18:38.059 --> 00:18:41.486
And, and so
from what I've seen when working alone,

273
00:18:41.486 --> 00:18:46.999
enums sort of get in the way because it's
a little bit more boilerplate to write.

274
00:18:46.999 --> 00:18:51.472
But when you're working with a team, it's
actually pretty useful to have that enum

275
00:18:51.472 --> 00:18:53.999
and sort of enforce that
with your entire team.

276
00:18:53.999 --> 00:19:01.079
So I think I lean on the side of using
const enums over just plain strings.

277
00:19:01.079 --> 00:19:04.692
But when you're starting out,
just start with the string and

278
00:19:04.692 --> 00:19:08.579
then refactor to use that enum,
or let cursor do it for you.

279
00:19:08.579 --> 00:19:14.899
&gt;&gt; Speaker 3: How do you decide on
the relations between the data types?

280
00:19:14.899 --> 00:19:21.539
So, for example, you put an array
of destination IDs on the todos.

281
00:19:21.539 --> 00:19:26.135
Is the reason you did that instead
of putting an array of to do IDs

282
00:19:26.135 --> 00:19:27.539
on destinations?

283
00:19:29.779 --> 00:19:31.139
Or is it pretty much the same?

284
00:19:31.139 --> 00:19:33.623
&gt;&gt; David Khourshid: You mean
when we first had the state?

285
00:19:33.623 --> 00:19:35.635
&gt;&gt; Speaker 3: When we were building
the one we were flattening it out.

286
00:19:35.635 --> 00:19:38.419
&gt;&gt; David Khourshid: Right, so
the first one before the flattening.

287
00:19:38.419 --> 00:19:42.041
And that's because a destination
can contain many TODOS and

288
00:19:42.041 --> 00:19:44.819
the TODOS cannot contain
many destinations.

289
00:19:44.819 --> 00:19:46.619
So it is a one way thing.

290
00:19:46.619 --> 00:19:48.579
But I mean, it does get tricky.

291
00:19:48.579 --> 00:19:51.317
So like for example, if you have,
if you have friends,

292
00:19:51.317 --> 00:19:55.050
like you want some model friends,
like this friend has all these friends and

293
00:19:55.050 --> 00:19:57.459
this friend has all those friends.

294
00:19:57.459 --> 00:19:59.585
The friends can be friends of each other.

295
00:19:59.585 --> 00:20:02.169
You have a many-to-many relationship.

296
00:20:02.169 --> 00:20:04.129
It's like, okay, so
how do we represent that?

297
00:20:04.129 --> 00:20:05.830
With the nested data structure,

298
00:20:05.830 --> 00:20:09.849
it becomes a little bit tricky because
it's like which one is a child of which?

299
00:20:09.849 --> 00:20:12.409
And then you have a lot
of data duplication.

300
00:20:12.409 --> 00:20:14.830
Whereas if you have a flattened structure,

301
00:20:14.830 --> 00:20:18.430
then you could just represent
the relationships like friend of or

302
00:20:18.430 --> 00:20:22.169
just a separate, I hate to say join table,
but you know what I mean?

303
00:20:22.169 --> 00:20:25.294
Like just somewhere where you're keeping
track of the relationships between those

304
00:20:25.294 --> 00:20:26.138
different entities.

