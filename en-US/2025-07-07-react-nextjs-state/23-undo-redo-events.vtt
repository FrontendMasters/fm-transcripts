WEBVTT

1
00:00:00.160 --> 00:00:04.136
&gt;&gt; David Khourshid: I wanted to show you
one more really, really cool thing and

2
00:00:04.136 --> 00:00:05.597
this is definitely,

3
00:00:05.597 --> 00:00:10.240
it was an extra credit item, but
I don't expect you to build it out.

4
00:00:11.280 --> 00:00:13.760
So, normalization solution.

5
00:00:14.880 --> 00:00:22.880
And it goes to the original principle of
events are the actual source of truth.

6
00:00:22.880 --> 00:00:28.850
And so let's say, like you see over here
we have these two grayed out buttons.

7
00:00:28.850 --> 00:00:35.130
Over here doing undo redo for text is
easy because it is just a text area.

8
00:00:38.090 --> 00:00:40.355
You already have the browser's built in.

9
00:00:40.355 --> 00:00:44.290
Command or control Z command or control,

10
00:00:44.290 --> 00:00:50.030
Whatever the other one is,
I'm blinking or control Y axis.

11
00:00:50.030 --> 00:00:53.300
It depends,
there's different key mappings for redo.

12
00:00:53.300 --> 00:00:58.012
But the idea is that when you're working
in an app where you have to make lots of

13
00:00:58.012 --> 00:01:01.855
changes, it actually is a pretty
common request to say, hey,

14
00:01:01.855 --> 00:01:04.340
we do want to represent undos and redos.

15
00:01:05.380 --> 00:01:11.270
And so by representing or by having
events and events driven architecture,

16
00:01:11.270 --> 00:01:17.540
instead of just updating states, you
actually sort of get that almost for free.

17
00:01:18.640 --> 00:01:23.218
So I wanted to demonstrate that just by
showing you first the implementation and

18
00:01:23.218 --> 00:01:24.880
then how it looks.

19
00:01:24.880 --> 00:01:29.800
So in this reducer I actually
have two extra events.

20
00:01:29.800 --> 00:01:33.539
Over here I have undo and redo.

21
00:01:33.539 --> 00:01:37.222
And I also have a couple of
extra fields in this date.

22
00:01:37.222 --> 00:01:41.819
I have the events, so we're keeping
track of which events occurred.

23
00:01:41.819 --> 00:01:46.520
And also undos, which events were undone.

24
00:01:46.520 --> 00:01:53.403
So without changing too much of the actual
data structure inside the reducer,

25
00:01:53.403 --> 00:01:59.782
when my action is undo, imagine that
we have done a bunch of things here.

26
00:01:59.782 --> 00:02:05.058
We entered the destination name,
like Timbuktu,

27
00:02:05.058 --> 00:02:08.870
and added a few to do items over here.

28
00:02:08.870 --> 00:02:11.307
You could see that each
one of these is an event.

29
00:02:11.307 --> 00:02:16.570
We created a destination, we created a to
do, and then we created another to do.

30
00:02:18.810 --> 00:02:21.690
So what would undoing be?

31
00:02:21.690 --> 00:02:22.970
Undoing.

32
00:02:22.970 --> 00:02:27.729
Since we know that we're going to reach
the exact same state if we replay all of

33
00:02:27.729 --> 00:02:32.970
those events, undoing is just replaying
all of those events minus the last one.

34
00:02:32.970 --> 00:02:37.290
Now, in reality, doing undos and redos is
a little bit more complicated than that.

35
00:02:37.290 --> 00:02:42.255
But just for basic purposes,
replaying all of the events up

36
00:02:42.255 --> 00:02:46.100
until the last one is
more than sufficient.

37
00:02:46.100 --> 00:02:52.739
So if we go to solution over here,
we can see that when we undo,

38
00:02:52.739 --> 00:02:56.829
we're replaying all those events and

39
00:02:56.829 --> 00:03:00.940
we have built in undo functionality.

40
00:03:00.940 --> 00:03:04.071
So I'm going to undo again.

41
00:03:04.071 --> 00:03:06.980
And redos works similarly.

42
00:03:06.980 --> 00:03:12.050
So whenever we undo an event,
that event goes into an undo array or

43
00:03:12.050 --> 00:03:17.303
a stack and then when we redo,
we are just popping from that stack and

44
00:03:17.303 --> 00:03:19.896
then replaying just that event.

45
00:03:19.896 --> 00:03:23.380
So we already have the state for
n minus 1 events.

46
00:03:23.380 --> 00:03:28.180
So we just replay that event and
that's essentially a redo.

47
00:03:28.180 --> 00:03:32.528
So we could basically redo and yeah,

48
00:03:32.528 --> 00:03:39.230
then we could rebuild
everything just like that.

49
00:03:39.230 --> 00:03:41.950
And so that's why I really like events,

50
00:03:41.950 --> 00:03:47.230
because they contain all that extra data
that allows us to do things like undo,

51
00:03:47.230 --> 00:03:51.550
redo, makes it easier to debug and
things like that.

52
00:03:51.550 --> 00:03:55.630
&gt;&gt; Speaker 2: Could we have a recursive
reference to the previous state?

53
00:03:55.630 --> 00:04:00.520
And when we undo, do we have to check
does state equal the previous state?

54
00:04:04.040 --> 00:04:07.544
&gt;&gt; David Khourshid: Could we have
a recursive and can do state equals.

55
00:04:07.544 --> 00:04:09.000
State equals state previous.

56
00:04:11.960 --> 00:04:14.360
So that's another thing about events.

57
00:04:14.360 --> 00:04:15.560
Events are tiny.

58
00:04:16.920 --> 00:04:19.320
Imagine that you're
building this to do list.

59
00:04:19.320 --> 00:04:22.360
You have 3, 4, 5, 6 to dos.

60
00:04:22.360 --> 00:04:25.995
And so you add them all up,
it becomes a lot larger and

61
00:04:25.995 --> 00:04:29.713
you're having to keep track
of these huge objects and

62
00:04:29.713 --> 00:04:35.260
there's a chance that you could run out
of memory pretty fast if you do that.

63
00:04:35.260 --> 00:04:38.797
And so events are smaller and
you're going to

64
00:04:38.797 --> 00:04:43.900
get to a consistent state when
you replay those events anyway.

65
00:04:43.900 --> 00:04:50.280
So, yeah,
I would say that definitely is possible.

66
00:04:50.280 --> 00:04:55.159
And you could also, instead of keeping
track of the entire previous date,

67
00:04:55.159 --> 00:04:57.880
you could keep track of state's diffs.

68
00:04:57.880 --> 00:05:02.520
But at that point, a state diff
is essentially just a raw event.

69
00:05:02.520 --> 00:05:04.120
It's telling you something happened.

70
00:05:04.120 --> 00:05:05.080
The state changed.

71
00:05:05.080 --> 00:05:06.600
We don't know why it changed.

72
00:05:06.600 --> 00:05:11.400
So it's just a very basic kind
of event at that point anyway.

