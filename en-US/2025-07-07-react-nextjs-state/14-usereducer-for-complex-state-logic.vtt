WEBVTT

1
00:00:00.320 --> 00:00:04.560
&gt;&gt; David Khourshid: Okay, so
let's get to the next section.

2
00:00:04.560 --> 00:00:09.308
And this is an image that sort
of introduces what the next

3
00:00:09.308 --> 00:00:12.560
section is going to be about.

4
00:00:12.560 --> 00:00:16.480
And it's of course, usereducer.

5
00:00:16.480 --> 00:00:22.880
And usereducer is actually a very
useful hook when you need it.

6
00:00:22.880 --> 00:00:26.576
I know that a lot of you
might have come from Redux or

7
00:00:26.576 --> 00:00:31.592
come from similar areas where you've
either used a Redux reducer or

8
00:00:31.592 --> 00:00:37.550
you've used used Reducer, and
it just feels like a lot of boilerplates.

9
00:00:37.550 --> 00:00:42.226
But the fact is, when you have
complex app logic requirements,

10
00:00:42.226 --> 00:00:46.208
using a reducer is going to be
a lot better than trying to

11
00:00:46.208 --> 00:00:50.990
manage multiple use dates,
use effects, and even use context.

12
00:00:50.990 --> 00:00:55.107
And, and the reason is because usereducer,
it's in the name,

13
00:00:55.107 --> 00:01:00.064
it literally reduces all of that data and
states down into a single function,

14
00:01:00.064 --> 00:01:03.240
which you could independently test.

15
00:01:03.240 --> 00:01:09.434
So again, for complex logic,
usereducer is great for simple states,

16
00:01:09.434 --> 00:01:14.840
you could continue to use states and
things like that.

17
00:01:14.840 --> 00:01:19.397
So let's go to the reducer readme

18
00:01:19.397 --> 00:01:24.130
just to talk about it a little bit.

19
00:01:27.090 --> 00:01:30.162
What we're going to be doing in this
exercise is we're going to be combining

20
00:01:30.162 --> 00:01:30.690
two things.

21
00:01:30.690 --> 00:01:34.290
We're going to be combining
React Context and UseReducer.

22
00:01:34.290 --> 00:01:38.983
Because one of the other great
things about UseReducer, this is all

23
00:01:38.983 --> 00:01:43.675
because you're able to centralize
that logic is, is that you could

24
00:01:43.675 --> 00:01:48.697
share that between multiple components and
sort of make your own Redux,

25
00:01:48.697 --> 00:01:54.131
you could make your own global source of
truth where you could read the state and

26
00:01:54.131 --> 00:01:58.460
also dispatch events or
actions to update that state as well.

27
00:01:59.660 --> 00:02:04.467
And so this allows you to avoid
doing multi level prop drilling or

28
00:02:04.467 --> 00:02:08.206
to have this parent component
that has a use date,

29
00:02:08.206 --> 00:02:11.692
potentially just causing
a lot of re renders.

30
00:02:11.692 --> 00:02:15.177
And so instead of this,
which again, I've seen in so

31
00:02:15.177 --> 00:02:20.297
many applications where we're just
passing props down through many levels.

32
00:02:20.297 --> 00:02:27.161
We could instead use context and use a
reducer with context to pass the state and

33
00:02:27.161 --> 00:02:32.470
the dispatch function down to
whatever component needs it.

34
00:02:33.670 --> 00:02:38.484
So we're going to be doing that and we're
also going to be combining another thing

35
00:02:38.484 --> 00:02:42.090
that we talked about,
which is finite states.

36
00:02:42.090 --> 00:02:47.181
So we're going to be working on a booking
flow, or actually it's a flight

37
00:02:47.181 --> 00:02:51.944
picker sort of flow, where the first
thing we're going to be doing,

38
00:02:51.944 --> 00:02:56.706
like we did in previous exercises,
is we're going to be simplifying

39
00:02:56.706 --> 00:03:01.552
all of these Boolean state values
into either a discriminated union or

40
00:03:01.552 --> 00:03:06.460
a single object, depending on
how much type safety you want.

41
00:03:06.460 --> 00:03:09.802
And Then we're going to be
using the usereducer hook for

42
00:03:09.802 --> 00:03:12.648
managing these complex
state requirements and

43
00:03:12.648 --> 00:03:17.500
we're going to be putting it into
context so that we could share that.

44
00:03:17.500 --> 00:03:21.452
So just to give you
an idea of the motivation,

45
00:03:21.452 --> 00:03:24.780
I actually have a demo page over here.

46
00:03:26.940 --> 00:03:27.780
Actually.
No, I don't.

47
00:03:27.780 --> 00:03:29.020
I thought I did.

48
00:03:29.020 --> 00:03:30.064
Let's find it.

49
00:03:30.064 --> 00:03:30.940
Yeah, there we go.

50
00:03:33.110 --> 00:03:36.310
Okay, let me see if this is
actually in the right place.

51
00:03:36.310 --> 00:03:44.420
So we are going to be inside the reducer
exercise and let me just move this over.

52
00:03:44.420 --> 00:03:45.030
I can't.

53
00:03:46.230 --> 00:03:47.990
Okay, that's fine.

54
00:03:47.990 --> 00:03:51.670
So I'm gonna copy this,
do it the manual way.

55
00:03:51.670 --> 00:03:56.866
We're gonna make a demo/page.tsx,
just to show you a very,

56
00:03:56.866 --> 00:04:01.680
very simplified version of
what we're going to be doing.

57
00:04:04.160 --> 00:04:08.480
So let's say that you
have a multi step form.

58
00:04:08.480 --> 00:04:13.080
Now in this case there's only two or
three steps, but still it counts.

59
00:04:13.080 --> 00:04:17.040
You could scale this up
to be however many steps.

60
00:04:17.040 --> 00:04:20.320
Reducer demo.

61
00:04:20.320 --> 00:04:23.840
Okay, so it's very simple.

62
00:04:25.420 --> 00:04:28.077
Just we have one page for
searching for stuff and

63
00:04:28.077 --> 00:04:31.980
then we have a loading screen and
then we have our results screen.

64
00:04:31.980 --> 00:04:35.649
And it looks ugly on purpose right now.

65
00:04:35.649 --> 00:04:39.180
But the idea, and
first let's talk about the flow.

66
00:04:39.180 --> 00:04:42.380
What's going to happen is that you're
going to be able to search for stuff.

67
00:04:42.380 --> 00:04:45.941
So presumably you have a form where
you could put in search inputs,

68
00:04:45.941 --> 00:04:48.803
you press search and
then a loading screen shows up and

69
00:04:48.803 --> 00:04:51.710
then after a while you,
you get the results.

70
00:04:51.710 --> 00:04:56.602
So now you're going to be on the results
screen and then you can also go back so

71
00:04:56.602 --> 00:04:59.070
you could search for stuff again.

72
00:04:59.070 --> 00:05:02.866
So it's a very simplified flow, and

73
00:05:02.866 --> 00:05:08.989
in fact let's just go ahead over here and
map this out just so

74
00:05:08.989 --> 00:05:14.750
you could see what kind of
flow we're going to be doing.

75
00:05:16.360 --> 00:05:21.985
One minute we're going to be
creating a new machine and

76
00:05:21.985 --> 00:05:26.996
so first we're going to be
in this search form and

77
00:05:26.996 --> 00:05:32.008
then when we start to search,
not really the most

78
00:05:32.008 --> 00:05:36.920
appropriately named so
call this search form.

79
00:05:37.960 --> 00:05:41.982
Then we're going to be in some
sort of loading screen and

80
00:05:41.982 --> 00:05:47.430
then once we get the results,
then we have a results page over here.

81
00:05:47.430 --> 00:05:52.870
And so in the results page we could
actually go back to the search form.

82
00:05:52.870 --> 00:05:57.667
And so again I'm demonstrating how useful
it is to think in terms of, you know,

83
00:05:57.667 --> 00:06:00.961
just diagramming things and
modeling your app logic,

84
00:06:00.961 --> 00:06:05.684
because even looking at this, we're not
gonna build this in this quick demo,

85
00:06:05.684 --> 00:06:09.380
but I could see that we're
missing Something like error.

86
00:06:09.380 --> 00:06:14.580
And so
we have a failed to fetch results screen.

87
00:06:14.580 --> 00:06:18.115
And then even if we add that,
I can see that we

88
00:06:18.115 --> 00:06:23.100
have another issue in that you
can't really retry from here.

89
00:06:23.100 --> 00:06:26.913
So we might want something to retry or

90
00:06:26.913 --> 00:06:31.220
we might want to do
a new search from here.

91
00:06:32.260 --> 00:06:35.560
So that's just an idea
of the kind of flow.

92
00:06:35.560 --> 00:06:39.160
We're going to only be working
with this small flow over here.

93
00:06:40.200 --> 00:06:43.640
And that's the demo that we're
going to be working from.

94
00:06:43.640 --> 00:06:46.862
This is where a reducer
becomes really handy,

95
00:06:46.862 --> 00:06:51.489
not just because we have more
complex app logic requirements, but

96
00:06:51.489 --> 00:06:55.040
also because we want to be
able to share the state and

97
00:06:55.040 --> 00:07:01.650
a way to dispatch events to change the
state with each of those three components.

98
00:07:01.650 --> 00:07:05.890
So the way we're going to do this
is by first making a reducer.

99
00:07:05.890 --> 00:07:08.560
And so
it's going to look like this function,

100
00:07:08.560 --> 00:07:10.930
we'll just call this flow reducer.

101
00:07:10.930 --> 00:07:15.730
And we're gonna have a state and an action
and we'll fill the types in later.

102
00:07:15.730 --> 00:07:21.170
But typically when you create a reducer,
you switch based on the types first.

103
00:07:22.690 --> 00:07:25.321
In previous courses where
I talked about Xstate and

104
00:07:25.321 --> 00:07:29.052
building your own state machine,
you would switch on the state first and

105
00:07:29.052 --> 00:07:31.090
that's a more maintainable pattern.

106
00:07:31.090 --> 00:07:32.626
But for this simple example,

107
00:07:32.626 --> 00:07:36.650
we're just going to switch on
the different action types first.

108
00:07:36.650 --> 00:07:42.059
So when we search, you know,
we're going to be in a loading state and

109
00:07:42.059 --> 00:07:47.610
then once we get results then we're
going to be in a result state.

110
00:07:47.610 --> 00:07:53.680
And then once we go back,
we go back to the search states.

111
00:07:53.680 --> 00:07:55.520
So now let's add our types.

112
00:07:55.520 --> 00:08:01.437
So we are going to have a flow state and
this for now it's just going to be,

113
00:08:01.437 --> 00:08:08.400
you know, it's one of these three
statuses, search, loading or results.

114
00:08:08.400 --> 00:08:13.840
And we're also going to
have results maybe so any.

115
00:08:15.040 --> 00:08:18.000
Or we might not have results at all.

116
00:08:18.000 --> 00:08:22.573
And then we could just add this over here
and then we're going to have some actions

117
00:08:22.573 --> 00:08:26.420
that we could do that help us
transition between the states.

118
00:08:26.420 --> 00:08:31.357
So type flow, action, we have search,

119
00:08:31.357 --> 00:08:38.340
let's call this receipt
results just to disambiguate.

120
00:08:40.820 --> 00:08:46.785
And then so we have oops,
we have type received results and

121
00:08:46.785 --> 00:08:52.150
presumably we'll have
some results here too.

122
00:08:52.150 --> 00:08:57.990
And we'll, we'll just make this a string
and we also have the back action.

123
00:08:57.990 --> 00:09:04.630
See, this assumes that
we're in the result state.

124
00:09:04.630 --> 00:09:08.565
So that's why you might want to add
something like if state is search,

125
00:09:08.565 --> 00:09:10.710
you can't really go back from there.

126
00:09:12.800 --> 00:09:16.115
So this assumes that state is results or

127
00:09:16.115 --> 00:09:20.240
maybe it's loading and
you could still go back.

128
00:09:21.360 --> 00:09:22.720
Remains to be seen.

129
00:09:22.720 --> 00:09:28.300
So this is our reducer and we're going
to add the flow action over there and

130
00:09:28.300 --> 00:09:31.271
then we're going to add that reducer.

131
00:09:31.271 --> 00:09:37.236
So const state dispatch,
you pass in the reducer over here and

132
00:09:37.236 --> 00:09:40.570
then you put in the initial state.

133
00:09:41.610 --> 00:09:45.429
Now we're going to have an issue
where it's like the types of status

134
00:09:45.429 --> 00:09:47.290
are incompatible.

135
00:09:47.290 --> 00:09:50.210
So let's see how we could fix that.

136
00:09:50.210 --> 00:09:51.568
We have flow state.

137
00:09:51.568 --> 00:09:58.250
We should specifically say that it
is going to return the flow state.

138
00:09:58.250 --> 00:10:00.330
So now everything is as expected.

139
00:10:01.610 --> 00:10:06.306
Okay, so in our different views here,
we have a button for searching, we have

140
00:10:06.306 --> 00:10:11.218
a button for going back from the results
view and the loading view, which doesn't

141
00:10:11.218 --> 00:10:15.940
really concern itself too much with any
of the states because we're going to.

142
00:10:17.700 --> 00:10:21.651
It's just an intermediate state that
doesn't really show any results or

143
00:10:21.651 --> 00:10:23.700
anything, but it could.

144
00:10:23.700 --> 00:10:29.121
So how do we actually pass in a way
to get our dispatch in here and

145
00:10:29.121 --> 00:10:32.920
get the results in the result view?

146
00:10:32.920 --> 00:10:36.360
Well, this is where we
could use React's context.

147
00:10:36.360 --> 00:10:42.360
So I'm gonna say const flow
context equals create context.

148
00:10:42.360 --> 00:10:46.221
And since we want to share both
the state and a way to dispatch it,

149
00:10:46.221 --> 00:10:49.000
I'm just going to put it in an object.

150
00:10:49.000 --> 00:10:53.800
So this is going to be state,
which is the flow state and dispatch.

151
00:10:54.920 --> 00:10:59.768
Now in some React documentation they
do actually have special types for

152
00:10:59.768 --> 00:11:03.580
the dispatch function, but
I'm not going to use that.

153
00:11:03.580 --> 00:11:04.980
I like keeping things simple.

154
00:11:04.980 --> 00:11:09.066
So we're going to say action,
flow, action and that's going to

155
00:11:09.066 --> 00:11:14.100
be void because this is a function
that shouldn't really do anything.

156
00:11:14.100 --> 00:11:19.589
I'm going to grab this import from React
and then this is always a bit strange,

157
00:11:19.589 --> 00:11:24.580
like this is why cursor helps, but
typically I would do null as any.

158
00:11:24.580 --> 00:11:32.190
The idea is that if you omit the context,
then it uses this as the default context.

159
00:11:32.190 --> 00:11:36.630
But the idea is you always want to have
a provider anyway, so this is unnecessary.

160
00:11:36.630 --> 00:11:42.938
But just to make React happy, we're going
to either put something simple in here or

161
00:11:42.938 --> 00:11:48.270
we could do, I don't know,
null as unknown as whatever that type is.

162
00:11:49.790 --> 00:11:52.510
That's just one of the weird
parts about React.

163
00:11:52.510 --> 00:11:54.960
But yeah, there you go.

164
00:11:54.960 --> 00:11:58.160
Okay, so we have our flow context.

165
00:11:58.160 --> 00:12:01.968
So now when we go to the app,
we could actually have

166
00:12:01.968 --> 00:12:06.880
a provider in which we give the state and
the dispatch function.

167
00:12:10.000 --> 00:12:15.280
And now this is going to be available to
any component that uses that context.

