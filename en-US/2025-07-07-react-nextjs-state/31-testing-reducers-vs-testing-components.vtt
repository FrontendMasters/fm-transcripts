WEBVTT

1
00:00:00.320 --> 00:00:03.807
&gt;&gt; David Khourshid: For the last exercise,
I want to talk about testing,

2
00:00:03.807 --> 00:00:08.640
because testing is very important,
of course, as you all know.

3
00:00:08.640 --> 00:00:13.794
And when we're testing application logic,
this is where all

4
00:00:13.794 --> 00:00:19.120
of the principles that we talked
about really come into play.

5
00:00:19.120 --> 00:00:25.170
Where events are the actual source of
truth, state updates are immutable and

6
00:00:25.170 --> 00:00:30.382
represented in pure functions,
and also doing things like having

7
00:00:30.382 --> 00:00:36.970
predictable declarative side effects and
normalized data, et cetera.

8
00:00:36.970 --> 00:00:43.050
So usually when we're testing react
applications, we're really testing the ui.

9
00:00:43.050 --> 00:00:46.330
That's the normal de facto way of testing.

10
00:00:46.330 --> 00:00:51.251
We're using testing library or vTest,
we're rendering our application and,

11
00:00:51.251 --> 00:00:53.421
and then we're clicking buttons or

12
00:00:53.421 --> 00:00:58.190
filling out fields virtually just
to see that everything is working.

13
00:00:58.190 --> 00:01:00.016
Now these kinds of tests,

14
00:01:00.016 --> 00:01:05.070
which I consider to be a form of end
to end tests, are very valuable.

15
00:01:05.070 --> 00:01:09.870
So I do recommend, like, don't get rid
of them, they're extremely useful.

16
00:01:09.870 --> 00:01:15.950
However, they can distract from testing
the actual pure business logic.

17
00:01:15.950 --> 00:01:20.121
And so this is why when you have a,
a pure function that

18
00:01:20.121 --> 00:01:25.131
represents your business logic,
it is extremely easy to test,

19
00:01:25.131 --> 00:01:29.862
because the whole premise of
testing is that given an input,

20
00:01:29.862 --> 00:01:35.560
we want some sort of expected output
when it goes through this function.

21
00:01:35.560 --> 00:01:39.520
And that's exactly what
a reducer can provide to us.

22
00:01:39.520 --> 00:01:44.325
So for instance, if we have a booking
reducer and we pass in the initial state

23
00:01:44.325 --> 00:01:49.056
and the action that happens,
it doesn't matter how that action happens,

24
00:01:49.056 --> 00:01:53.620
we just want to know that the actual
business logic is correct.

25
00:01:53.620 --> 00:01:59.300
So we can assert that different
parts of the new state are correct.

26
00:01:59.300 --> 00:02:04.068
So that we could say the current
step should be hotel after this, and

27
00:02:04.068 --> 00:02:10.660
that when we pass in the mock flight, then
the selected flight is that mock flight.

28
00:02:10.660 --> 00:02:16.270
So just to give you an example,
we have a booking reducer here.

29
00:02:16.270 --> 00:02:21.385
And again, you can test the UI if you
want to, but when the app logic changes,

30
00:02:21.385 --> 00:02:26.109
for example, let's say that you add
more steps to the booking flow, or

31
00:02:26.109 --> 00:02:30.600
you change some sort of internal
logic within the booking reducer,

32
00:02:30.600 --> 00:02:34.990
then the UI tests actually become
pretty difficult to update.

33
00:02:34.990 --> 00:02:38.834
And that's because you're not just
dealing directly with logic, you,

34
00:02:38.834 --> 00:02:42.990
you're dealing with ui,
which sort of masks the underlying logic.

35
00:02:42.990 --> 00:02:46.471
So if we take a look at
the booking reducer,

36
00:02:46.471 --> 00:02:50.510
we see a lot of different steps over here.

37
00:02:50.510 --> 00:02:53.584
Like we're searching flights,
then we're searching the hotels,

38
00:02:53.584 --> 00:02:54.990
we're updating the hotels.

39
00:02:54.990 --> 00:03:00.190
There's just many different ways
that we could go through this flow.

40
00:03:00.190 --> 00:03:06.157
And so once we have the initial state,
we could actually just test entire flows,

41
00:03:06.157 --> 00:03:10.282
especially with the help of
AI assisted coding tools and

42
00:03:10.282 --> 00:03:13.354
just use that pure function to ensure that

43
00:03:13.354 --> 00:03:18.670
we are on the correct state given
the events that are passed in.

44
00:03:18.670 --> 00:03:22.512
So that's why I actually like doing
let state instead of const state,

45
00:03:22.512 --> 00:03:25.070
because then I could just reassign it.

46
00:03:25.070 --> 00:03:27.870
So we could say state
equals booking reducer.

47
00:03:29.790 --> 00:03:31.110
Let's make a mock flight.

48
00:03:31.110 --> 00:03:32.560
So const model mockFlight.

49
00:03:34.160 --> 00:03:37.760
So let's say that we select
a flight from a mock airline.

50
00:03:37.760 --> 00:03:43.040
We could actually continue through this
and just continue to the entire flow.

51
00:03:43.040 --> 00:03:46.530
So we can expect that the next
step is the hotel search and

52
00:03:46.530 --> 00:03:49.840
that the selected flight
is the mock flight.

53
00:03:49.840 --> 00:03:52.480
Then when we go back to change flight,

54
00:03:52.480 --> 00:03:57.500
we could assert that we're actually
going this is not the happy path.

55
00:03:57.500 --> 00:04:01.148
But we could assert that when
the user decides to go back,

56
00:04:01.148 --> 00:04:06.088
we're on that previous step and then
we could just keep going through there,

57
00:04:06.088 --> 00:04:11.900
maybe doing a mock hotel, and we could
just basically test entire flows this way.

58
00:04:11.900 --> 00:04:17.920
And so this is something where even
if your UI completely changes,

59
00:04:17.920 --> 00:04:24.970
the testing logic for this application
is going to be exactly the same.

60
00:04:24.970 --> 00:04:29.370
And so that's why when you're
thinking about doing unit tests,

61
00:04:29.370 --> 00:04:32.330
really consider putting application logic

62
00:04:32.330 --> 00:04:36.570
into that valuable bucket of
things that you should unit test.

63
00:04:37.610 --> 00:04:41.130
So as you can see,
it's very straightforward.

64
00:04:41.130 --> 00:04:45.816
We're dealing only with domain specific
things and we're not really worried

65
00:04:45.816 --> 00:04:49.770
about how do we get to different
buttons or inputs in the ui.

66
00:04:49.770 --> 00:04:54.641
So I consider testing reducers
a very valuable approach because

67
00:04:54.641 --> 00:04:56.900
you can test flows like this.

68
00:05:00.580 --> 00:05:03.780
Any questions on testing
application logic?

69
00:05:03.780 --> 00:05:08.778
&gt;&gt; Speaker 2: Have you had experience
with Cursor writing unit tests and

70
00:05:08.778 --> 00:05:13.368
seeing if it has made some
relatively improvements on

71
00:05:13.368 --> 00:05:17.050
how it does implementation of your tests?

72
00:05:18.160 --> 00:05:21.753
&gt;&gt; David Khourshid: I think that when
you keep things simple, for example,

73
00:05:21.753 --> 00:05:26.960
I let cursor generate all of these tests
over here and they all look to be correct.

74
00:05:28.240 --> 00:05:29.819
Cursor is really good at that,

75
00:05:29.819 --> 00:05:33.520
especially because it does have
reference to this booking reducer.

76
00:05:33.520 --> 00:05:35.835
Everything is in one central place and

77
00:05:35.835 --> 00:05:39.680
it understands really well what
the flow of this is going to be.

78
00:05:41.200 --> 00:05:43.965
However, when it comes to actual UI tests,

79
00:05:43.965 --> 00:05:47.190
I've seen that it does get
some things wrong a lot.

80
00:05:47.190 --> 00:05:50.390
Or really it actually makes
the wrong assumptions.

81
00:05:50.390 --> 00:05:55.463
So if your UI is in any bit difference
than what Cursor would expect

82
00:05:55.463 --> 00:06:00.627
from a normal ui, then it might
suggest clicking the wrong thing or

83
00:06:00.627 --> 00:06:07.110
filling in the wrong field, or just
doing whatever it wants with the tests.

84
00:06:07.110 --> 00:06:11.910
And the reason for that from an LLM
perspective is that when you're dealing

85
00:06:11.910 --> 00:06:17.500
with UI, you're dealing with multiple
components in multiple different files.

86
00:06:17.500 --> 00:06:21.972
And so Cursor has to go through the extra
step, if it even does that at all,

87
00:06:21.972 --> 00:06:24.354
of piecing together all these files and

88
00:06:24.354 --> 00:06:28.780
relating that data together rather
than just having it all in one place.

