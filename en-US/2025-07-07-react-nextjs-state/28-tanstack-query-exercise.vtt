WEBVTT

1
00:00:00.160 --> 00:00:04.644
&gt;&gt; David Khourshid: In this exercise we're
going to actually be using Usequery and

2
00:00:04.644 --> 00:00:11.040
replacing a bunch of useEffects and use
date to fetch data with Tanstack Query.

3
00:00:11.040 --> 00:00:16.114
If you need a reference to where or
like how to do it,

4
00:00:16.114 --> 00:00:23.200
then I would really recommend you
go to tanstack.com query I believe.

5
00:00:24.800 --> 00:00:27.770
And there are some
starter guides over here.

6
00:00:27.770 --> 00:00:33.850
It gives you an overview of how to
fetch data using Tanstack Query.

7
00:00:33.850 --> 00:00:39.290
So we'll take a couple minutes and
we will refactor this component.

8
00:00:39.290 --> 00:00:41.138
So if we go to Fetch page,

9
00:00:41.138 --> 00:00:45.370
there's a couple of places
where we're fetching data.

10
00:00:46.570 --> 00:00:49.491
You could see it over here,
we're fetching flights, and

11
00:00:49.491 --> 00:00:51.950
over here we're fetching hotels.

12
00:00:51.950 --> 00:00:55.525
So what I want you to do is
convert this to using Tanstack

13
00:00:55.525 --> 00:01:00.501
query just to get a feel for using third
party libraries for fetching data and

14
00:01:00.501 --> 00:01:03.710
how much boilerplate
code it actually removes.

15
00:01:09.630 --> 00:01:13.500
All right, so here's how we could get
rid of all of those useEffects and

16
00:01:13.500 --> 00:01:16.350
use dates and
just make our code a lot simpler.

17
00:01:16.350 --> 00:01:19.308
The first thing that we need to do is, and

18
00:01:19.308 --> 00:01:24.354
this is honestly the tiniest bit
of boilerplate for React's query,

19
00:01:24.354 --> 00:01:28.850
but it's required by it,
otherwise it will yell at you.

20
00:01:28.850 --> 00:01:31.410
You want to first create a query client.

21
00:01:31.410 --> 00:01:37.490
And this comes from Tanstack React Query.

22
00:01:37.490 --> 00:01:41.998
And this query client is the central
place where it's basically going to hold

23
00:01:41.998 --> 00:01:42.850
that cache.

24
00:01:42.850 --> 00:01:48.150
So you might think of Tanstack, like React
Query as, as a data fetching library.

25
00:01:48.150 --> 00:01:49.070
It's actually not.

26
00:01:49.070 --> 00:01:54.206
It's more of a local cache
library that just works really

27
00:01:54.206 --> 00:01:59.990
well with Async data, and
that's sort of its primary use case.

28
00:02:01.030 --> 00:02:06.470
The other thing that you're going to
want is a query client's provider.

29
00:02:06.470 --> 00:02:11.190
And so this also comes from Tanstack
Query, you pass the clients into it.

30
00:02:11.190 --> 00:02:14.986
And so what this is going to do
is anything that uses Usequery,

31
00:02:14.986 --> 00:02:17.541
use mutation inside of your components,

32
00:02:17.541 --> 00:02:21.130
it's going to be able to read
that query client and use it.

33
00:02:22.170 --> 00:02:25.050
So now let's get rid of these useEffects.

34
00:02:26.090 --> 00:02:28.810
So let's look for this one.

35
00:02:28.810 --> 00:02:30.650
We're loading flights over here.

36
00:02:30.650 --> 00:02:33.530
It's time to make some code disappear.

37
00:02:33.530 --> 00:02:35.970
So we're going to get some stuff.

38
00:02:35.970 --> 00:02:40.157
We don't know exactly what this is yet,
but

39
00:02:40.157 --> 00:02:45.475
we're going to use Query and
the first thing that we're

40
00:02:45.475 --> 00:02:50.452
going to do is we're going
to pass in the query key and

41
00:02:50.452 --> 00:02:57.950
this is just going to be our flights and
we are going to put in our flight search.

42
00:02:57.950 --> 00:03:03.470
So flightsearch and
then we actually have to fetch the data.

43
00:03:03.470 --> 00:03:09.310
So that is our query function and we're
going to pass in the flight search to it.

44
00:03:09.310 --> 00:03:11.870
And also I need to import this.

45
00:03:11.870 --> 00:03:15.350
And so this is going to give
us a few very useful things.

46
00:03:15.350 --> 00:03:22.590
It's going to give us data, it's going to
give us an error if there is an error.

47
00:03:22.590 --> 00:03:27.310
And it's also going to give
us some very handy booleans.

48
00:03:27.310 --> 00:03:29.310
So it has is loading.

49
00:03:29.310 --> 00:03:33.609
And if you really want to,
instead of using the Booleans,

50
00:03:33.609 --> 00:03:37.645
you could use status, and
that way is loading equals,

51
00:03:37.645 --> 00:03:42.790
status equals, and
then you have error pending or success.

52
00:03:42.790 --> 00:03:47.566
So internally, Tan Stack Query
maintains its own state machine for

53
00:03:47.566 --> 00:03:53.110
dealing with these requests, but for
now we're just going to use is loading.

54
00:03:54.550 --> 00:03:57.350
And so now we could get rid of this state.

55
00:03:57.350 --> 00:04:01.861
And, and
we don't need this anymore or this or

56
00:04:01.861 --> 00:04:06.951
actually we don't need any
of this because if we just

57
00:04:06.951 --> 00:04:12.400
rename this to flights,
we no longer need this or this.

58
00:04:13.760 --> 00:04:18.240
And now we're just using
Tanstack query for it.

59
00:04:18.240 --> 00:04:23.924
Now, before I save this,
I want to show you the difference between,

60
00:04:23.924 --> 00:04:28.440
you know, using Tanstack query and
not using it.

61
00:04:28.440 --> 00:04:29.904
So if I go to fetch.

62
00:04:31.405 --> 00:04:36.480
Error has already been, all right,
actually I'll just do this.

63
00:04:36.480 --> 00:04:37.360
I'll save it.

64
00:04:37.360 --> 00:04:39.640
Anyway, so we have error over here.

65
00:04:42.280 --> 00:04:46.120
It's gonna be error message,
I think that that's good.

66
00:04:46.120 --> 00:04:52.680
Okay, so now let's search for
a flight to Tokyo departing soon.

67
00:04:54.120 --> 00:04:56.520
So we are going to get our flights.

68
00:04:57.800 --> 00:05:01.880
Now, if we go back to search and
we don't change anything and

69
00:05:01.880 --> 00:05:05.320
we search,
we instantly get the results again.

70
00:05:05.320 --> 00:05:07.720
And the reason is because it's cached.

71
00:05:07.720 --> 00:05:12.360
So this is one of those things where this
would require even more code to implement.

72
00:05:12.360 --> 00:05:16.787
And it is a very useful feature to have so
that you don't make unnecessary API

73
00:05:16.787 --> 00:05:20.720
requests and you don't keep your
users waiting for too long.

74
00:05:20.720 --> 00:05:25.783
So now when you select a flight and
you change the hotel,

75
00:05:25.783 --> 00:05:29.013
if I go back to search and I search for

76
00:05:29.013 --> 00:05:33.560
hotels again,
it's going to keep on searching.

77
00:05:33.560 --> 00:05:36.960
And that's because we didn't
implement a caching layer.

78
00:05:36.960 --> 00:05:39.360
And so it's not using react query,

79
00:05:39.360 --> 00:05:43.040
it's just going to keep fetching over and
over again.

80
00:05:44.090 --> 00:05:48.810
But hopefully you could see that
we removed a lot of useStates.

81
00:05:48.810 --> 00:05:51.026
We removed a big useEffect and

82
00:05:51.026 --> 00:05:55.690
we're just replacing that
with a single usequery call.

83
00:05:55.690 --> 00:05:59.578
It's like one of those things
that people wish were just built

84
00:05:59.578 --> 00:06:03.610
into React because it's
such a useful library.

85
00:06:03.610 --> 00:06:04.110
&gt;&gt; Speaker 2: One.

86
00:06:05.770 --> 00:06:09.605
Major difference between the older
versions of React Query and

87
00:06:09.605 --> 00:06:12.650
the newer one is the is
pending versus is loading.

88
00:06:12.650 --> 00:06:19.805
Because used to be is loading was just
like anytime it was fetching data,

89
00:06:19.805 --> 00:06:23.770
but then they changed it to be pending.

90
00:06:23.770 --> 00:06:28.971
Because there are times when you
wanted to show a loader if it's like

91
00:06:28.971 --> 00:06:34.174
refetching versus when it's just
initializing the first fetch and

92
00:06:34.174 --> 00:06:40.650
then just showing whatever's cached and
then updating with whatever is cached.

93
00:06:40.650 --> 00:06:44.177
And so I had to make sure that
when I was upgrading in that

94
00:06:44.177 --> 00:06:47.050
process that I used the proper key.

95
00:06:47.050 --> 00:06:49.397
&gt;&gt; David Khourshid: Yeah,
that's a very good thing to point out,

96
00:06:49.397 --> 00:06:51.210
there is a subtle difference.

97
00:06:51.210 --> 00:06:53.556
Thankfully, if you do hover over,

98
00:06:53.556 --> 00:06:59.450
it does tell you when each one will be
active, and I think this one is different.

99
00:06:59.450 --> 00:07:02.890
Is true whenever the first fetch for
a query is in flight, right?

100
00:07:02.890 --> 00:07:06.460
&gt;&gt; Speaker 2: Yep, so it's a combination
of both isFetching and isPending.

101
00:07:06.460 --> 00:07:06.960
&gt;&gt; David Khourshid: Yeah.

102
00:07:08.380 --> 00:07:09.020
Awesome.

103
00:07:10.060 --> 00:07:13.740
&gt;&gt; Speaker 3: As someone new to
React Server components and Next js,

104
00:07:13.740 --> 00:07:18.780
it sounds like I'd reach for Tanstack
query for any use client component,

105
00:07:18.780 --> 00:07:22.300
or does this also play well
with server components?

106
00:07:23.420 --> 00:07:25.180
&gt;&gt; David Khourshid: I
would say it's either or.

107
00:07:25.180 --> 00:07:30.040
So with server components,
the idea is that you're awaiting your

108
00:07:30.040 --> 00:07:35.010
data like in the component itself,
and actually let me search for.

109
00:07:39.410 --> 00:07:41.250
Let me search for one of these.

110
00:07:41.250 --> 00:07:45.982
So something that I forgot to
mention is that this entire app,

111
00:07:45.982 --> 00:07:48.257
besides just the exercises,

112
00:07:48.257 --> 00:07:53.490
is a flight itinerary booking app
that I have started to build.

113
00:07:53.490 --> 00:07:54.898
So it is messy, but

114
00:07:54.898 --> 00:08:00.810
it is also a good way of just putting you
into a real world app that is in progress.

115
00:08:00.810 --> 00:08:05.260
So I do invite you to like, if you want
to finish the app, play around with it.

116
00:08:05.260 --> 00:08:07.427
It's something that I did start,

117
00:08:07.427 --> 00:08:11.500
but this would be an example
of using a server component.

118
00:08:11.500 --> 00:08:15.580
So notice that there's no use clients,
we have an itinerary page.

119
00:08:15.580 --> 00:08:19.776
I'm using a database to
just get my itineraries and

120
00:08:19.776 --> 00:08:25.580
I'm actually awaiting this
directly inside the component.

121
00:08:25.580 --> 00:08:28.860
So yeah, you could also use Suspense.

122
00:08:28.860 --> 00:08:30.140
I believe I have.

123
00:08:30.140 --> 00:08:33.121
Yep.
I have one page where I am using Suspense

124
00:08:33.121 --> 00:08:36.355
and this is for
like showing the flight results and

125
00:08:36.355 --> 00:08:40.540
actually let me just demonstrate
that to you real quick.

126
00:08:40.540 --> 00:08:45.454
Again, this is extremely half built,
but let's say that

127
00:08:45.454 --> 00:08:50.940
we have a trip to Minneapolis and
we're just doing stuff.

128
00:08:50.940 --> 00:08:55.690
We create the itinerary, and
then we want to add a destination.

129
00:08:57.610 --> 00:09:03.210
So this is just like a fully featured or
a fully featured app in progress.

130
00:09:03.210 --> 00:09:06.630
And then like if you're booking flights,

131
00:09:06.630 --> 00:09:11.570
you're going to see suspense in
action because we have this,

132
00:09:11.570 --> 00:09:17.530
we have our flights, and
this all happened within the same page.

133
00:09:17.530 --> 00:09:18.030
So.

134
00:09:19.280 --> 00:09:21.440
Yep, there's suspense in action as well.

135
00:09:21.440 --> 00:09:23.760
Then we have some hotels for
us to choose from.

136
00:09:25.040 --> 00:09:25.653
Yeah.
So

137
00:09:25.653 --> 00:09:30.049
I would really recommend reading the react
docs on using server components and

138
00:09:30.049 --> 00:09:30.880
suspense.

139
00:09:30.880 --> 00:09:35.612
And there's also a few front end
master's courses on that too that go

140
00:09:35.612 --> 00:09:38.720
much more in depth than
I will in this course.

