WEBVTT

1
00:00:00.320 --> 00:00:03.680
&gt;&gt; David Khourshid: And so what we're
going to be doing is we're going to jump

2
00:00:03.680 --> 00:00:05.440
into the exercise.

3
00:00:05.440 --> 00:00:11.748
So what I want you to do is go to
anti patterns and go to page TSX and

4
00:00:11.748 --> 00:00:16.987
there's going to be a lot
of different exercises and

5
00:00:16.987 --> 00:00:22.240
hopefully this should be pretty quick for
you to do.

6
00:00:22.240 --> 00:00:26.396
The point is to build
the muscle memory to actually,

7
00:00:26.396 --> 00:00:29.607
to actually avoid these any patterns and

8
00:00:29.607 --> 00:00:34.236
simplify these components
based on what we've learned,

9
00:00:34.236 --> 00:00:40.281
which is the proper use of refs deriving
states instead of duplicating it and

10
00:00:40.281 --> 00:00:43.030
also avoiding redundant states.

11
00:00:44.470 --> 00:00:50.630
So let's go ahead and take a few minutes
and jump into this and let's get started.

12
00:00:57.440 --> 00:01:01.322
All right, so let's go through all
of these anti patterns that again,

13
00:01:01.322 --> 00:01:04.240
I'm sure that you've
seen in your code bases.

14
00:01:04.240 --> 00:01:08.131
And again, these exercises are meant
to get the muscle memory in

15
00:01:08.131 --> 00:01:11.157
your hands of recognizing
these anti patterns and

16
00:01:11.157 --> 00:01:14.720
fixing them so that you could
do it in your own code base.

17
00:01:14.720 --> 00:01:19.052
And I recommend for this exercise and
all of the other exercises,

18
00:01:19.052 --> 00:01:22.514
try to do it in the code bases
that you have access to or

19
00:01:22.514 --> 00:01:25.850
at least try to identify or
search for them.

20
00:01:25.850 --> 00:01:28.482
Honestly, if you search for
use date in your code base,

21
00:01:28.482 --> 00:01:30.170
you're going to see a lot of these.

22
00:01:31.450 --> 00:01:33.770
But okay, so
let's take a look at this first one.

23
00:01:33.770 --> 00:01:35.290
Filter destinations.

24
00:01:35.290 --> 00:01:37.864
Again, we see this
combination useState and

25
00:01:37.864 --> 00:01:41.530
useEffect hook where we're
setting the filter destinations.

26
00:01:41.530 --> 00:01:49.602
What we could do instead is I am going to
do const oops filtered destinations and

27
00:01:49.602 --> 00:01:55.000
I'm just going to directly
compute that in render.

28
00:01:58.120 --> 00:02:04.923
Now I can get rid of this use date and
I got rid of the other useeffect and

29
00:02:04.923 --> 00:02:09.615
it still works with each
of these you could go and

30
00:02:09.615 --> 00:02:14.089
just make sure that
everything still works.

31
00:02:15.609 --> 00:02:20.889
All right, and so for the other exercises,
it's all very similar too.

32
00:02:21.929 --> 00:02:26.297
Again, instead of setting directly
just const total cost and

33
00:02:26.297 --> 00:02:30.809
then get rid of that useeffect and
get rid of that state.

34
00:02:30.809 --> 00:02:32.409
The more code you delete, the better.

35
00:02:35.689 --> 00:02:40.483
This is a very satisfying one to do
just because the pattern will hopefully

36
00:02:40.483 --> 00:02:45.300
stand out to you like a sore thumb and
then you can just immediately do it.

37
00:02:45.300 --> 00:02:47.732
This one is a tiny bit more complicated,
but

38
00:02:47.732 --> 00:02:50.500
only because there's more code over here.

39
00:02:50.500 --> 00:02:52.020
Still not a problem.

40
00:02:52.020 --> 00:02:57.149
We could do const available dates and
get rid of this use dates, get rid of

41
00:02:57.149 --> 00:03:03.220
the use effect because we're already going
to have the updated booked dates inside.

42
00:03:05.070 --> 00:03:13.150
Okay, so now let's go take
a look at some other patterns.

43
00:03:15.950 --> 00:03:23.470
So for example, let's see,
I wanted to see a ref- 1.

44
00:03:23.470 --> 00:03:24.950
Okay, here's a good one.

45
00:03:24.950 --> 00:03:29.901
So this is the same timer example
that we were talking about, you know,

46
00:03:29.901 --> 00:03:31.880
with a booking timer.

47
00:03:31.880 --> 00:03:34.520
Instead of this, let's use a Ref.

48
00:03:34.520 --> 00:03:38.011
So const timerIdRef = useRef.

49
00:03:38.011 --> 00:03:42.246
And then we now have access to that

50
00:03:42.246 --> 00:03:47.400
timerIdRef via timeridRef.current.

51
00:03:48.840 --> 00:03:53.441
And then so
instead of setting it directly over here,

52
00:03:53.441 --> 00:03:58.054
we can just say timerIdRef.current
equals that Id.

53
00:03:58.054 --> 00:04:02.930
And then we could do
the same thing over here.

54
00:04:02.930 --> 00:04:06.626
Since we're clearing the timer,

55
00:04:06.626 --> 00:04:11.213
we could say timer ID
ref current is null and

56
00:04:11.213 --> 00:04:15.650
then we could just clean up the rest.

57
00:04:15.650 --> 00:04:19.810
So we could say this should
be timer ID ref current.

58
00:04:19.810 --> 00:04:24.220
Let's give this a proper type
of NodeJS.Timeout or null.

59
00:04:24.220 --> 00:04:30.940
And then let's also set
timerIdRef.currents.

60
00:04:30.940 --> 00:04:35.740
We'll set that to null and we'll also
change these too for the sake of time.

61
00:04:35.740 --> 00:04:38.540
I'm just using cursor, but
it's essentially the same thing.

62
00:04:40.700 --> 00:04:45.640
We are replacing timer ID with
the timer ID ref.current and so

63
00:04:45.640 --> 00:04:50.960
our effect is now no longer going
to change change multiple times.

64
00:04:52.000 --> 00:04:55.120
So, same thing with
the scroll position tracker.

65
00:04:55.120 --> 00:04:59.800
We could, instead of keeping track of
the last scroll position in use dates,

66
00:04:59.800 --> 00:05:01.040
we could use a ref.

67
00:05:01.040 --> 00:05:04.137
So const last, oops,

68
00:05:04.137 --> 00:05:09.356
LastScrollPositionRef = useRef and

69
00:05:09.356 --> 00:05:13.760
we'll give it a number type.

70
00:05:13.760 --> 00:05:15.760
And this is just going to be zero.

71
00:05:17.020 --> 00:05:21.980
So now we can get rid of this useState and
we could update the Ref instead.

72
00:05:21.980 --> 00:05:27.180
So LastScrollPositionRef.current
= currentPosition over here.

73
00:05:27.180 --> 00:05:31.955
And then so set last scroll position and

74
00:05:31.955 --> 00:05:36.460
then we could just update the rest.

75
00:05:36.460 --> 00:05:41.740
So we are going to get that.

76
00:05:43.230 --> 00:05:46.621
And now we no longer need this use or
actually no,

77
00:05:46.621 --> 00:05:51.585
we still need that use effect, but
we no longer need anything in there,

78
00:05:51.585 --> 00:05:56.138
just because the effect does not
need to rerun whenever the scroll

79
00:05:56.138 --> 00:06:01.310
position changes or sorry,
whenever the last scroll position changes.

80
00:06:03.070 --> 00:06:10.920
So I want to skip ahead to the hotel
selection one that we talked about.

81
00:06:10.920 --> 00:06:14.680
So again, this is a case where
we have redundant states.

82
00:06:14.680 --> 00:06:19.011
We are selecting a hotel instead
of selecting the, you know,

83
00:06:19.011 --> 00:06:23.080
the hotel id,
which makes things a lot simpler.

84
00:06:23.080 --> 00:06:27.498
So instead of this,
we could just select the hotel ID and

85
00:06:27.498 --> 00:06:31.160
then set this to set selected hotel id.

86
00:06:31.160 --> 00:06:34.083
So instead of trying to
grab the type of the hotel,

87
00:06:34.083 --> 00:06:36.520
this is just going to be a string.

88
00:06:36.520 --> 00:06:41.958
And so instead of this, we are going
to be handling the hotel ID instead,

89
00:06:41.958 --> 00:06:44.680
which is going to be a string.

90
00:06:44.680 --> 00:06:49.149
And so we could set the hotel
ID to that hotel id and

91
00:06:49.149 --> 00:06:56.040
now the selected hotel is going to be
derived from the selected hotel id.

92
00:06:56.040 --> 00:07:01.946
So Const selected hotel equals
we have our hotels already,

93
00:07:01.946 --> 00:07:06.789
so hotels and
we're going to find the hotel where

94
00:07:06.789 --> 00:07:11.410
the hotel ID is equal to
the selected hotel id.

95
00:07:12.770 --> 00:07:15.592
And so now we have derived states and

96
00:07:15.592 --> 00:07:20.130
we're preventing just
having redundant states.

97
00:07:20.130 --> 00:07:24.158
And so a similar thing is going
to be done with things like,

98
00:07:24.158 --> 00:07:27.283
you know, these other exercises over here,

99
00:07:27.283 --> 00:07:32.383
this is a pretty common one where we
have our user profile from somewhere,

100
00:07:32.383 --> 00:07:37.740
but we're also trying to manage
the state of each of these components.

101
00:07:37.740 --> 00:07:41.346
And so, you know,
we're trying to set the username and

102
00:07:41.346 --> 00:07:43.980
all of the other fields over there.

103
00:07:43.980 --> 00:07:47.820
&gt;&gt; Speaker 2: We just wanna
use userProfile.name.

104
00:07:47.820 --> 00:07:49.060
&gt;&gt; David Khourshid: Yeah, yeah, yeah,
&gt;&gt; Speaker 2: yeah.

105
00:07:49.060 --> 00:07:52.071
As the we don't even
need to use use state,

106
00:07:52.071 --> 00:07:55.990
we could just reference
the state from up above.

107
00:07:55.990 --> 00:07:58.230
&gt;&gt; David Khourshid: Yeah,
exactly, that's exactly right.

108
00:07:58.230 --> 00:08:00.259
So instead of doing all this, yeah,

109
00:08:00.259 --> 00:08:02.950
you could basically just
use user profile name.

110
00:08:02.950 --> 00:08:09.990
You don't need to pull it in
from me to these useSates.

111
00:08:09.990 --> 00:08:14.346
So then here we have user profile name,

112
00:08:14.346 --> 00:08:20.950
email preferences, budget and
preferences traveltype.

113
00:08:20.950 --> 00:08:23.965
A bit of a contrived example, but yeah,

114
00:08:23.965 --> 00:08:28.845
that just goes to show you that if
you can avoid redundant states,

115
00:08:28.845 --> 00:08:34.990
then you don't really need to have all of
those multiple use dates handling that.

116
00:08:36.110 --> 00:08:39.259
So that's a solution to
a few of these exercises and

117
00:08:39.259 --> 00:08:42.770
the other ones just follow
suits in the same way.

118
00:08:42.770 --> 00:08:47.250
Any questions about any of these
warm up exercises that we did?

119
00:08:48.850 --> 00:08:51.105
Yes,
&gt;&gt; Speaker 3: one thing I try to do is

120
00:08:51.105 --> 00:08:57.872
especially when it comes to static values,
for instance the user profile,

121
00:08:57.872 --> 00:09:02.843
rather than place the whole
object inside of use state,

122
00:09:02.843 --> 00:09:08.659
especially if that entity isn't
going to be change or modified,

123
00:09:08.659 --> 00:09:14.896
since we don't have a set callback or
function passed in here as well,

124
00:09:14.896 --> 00:09:20.750
that to just leave it outside
of the scope of the function.

125
00:09:20.750 --> 00:09:23.786
So instantiate it above the function and

126
00:09:23.786 --> 00:09:28.079
then just reference it inside
kind of a closure, right?

127
00:09:28.079 --> 00:09:33.270
Where we're referencing it outside
of the function, I would imagine.

128
00:09:33.270 --> 00:09:37.740
Would you recommend that over the practice
that's currently happening there?

129
00:09:37.740 --> 00:09:38.260
&gt;&gt; David Khourshid: Yes, I would.

130
00:09:38.260 --> 00:09:40.380
And again, this is a contrived example.

131
00:09:40.380 --> 00:09:43.964
So ideally this user profile
would come from props or

132
00:09:43.964 --> 00:09:48.700
if it does come from somewhere else,
you can bring it in as a closure.

133
00:09:48.700 --> 00:09:53.647
Although I would say just be wary
of closures just because you

134
00:09:53.647 --> 00:09:59.100
want your function to be self
contained and easily testable.

135
00:09:59.100 --> 00:10:02.598
So if you were trying to extract
this component out and test it,

136
00:10:02.598 --> 00:10:06.530
then that closure data might not
be available for whatever reason.

137
00:10:06.530 --> 00:10:11.176
So it might be something where you would
pass it in via context or pass it in via

138
00:10:11.176 --> 00:10:16.112
props but yes, the idea is that in this
case the user profile isn't changing, so

139
00:10:16.112 --> 00:10:21.890
it does not need to be inside of a use
dates, which is another important thing.

140
00:10:21.890 --> 00:10:25.294
I've seen use dates where
there is no setter at all, so

141
00:10:25.294 --> 00:10:28.130
it sort of makes them
a little bit useless.

142
00:10:28.130 --> 00:10:33.016
I think the most important takeaway
here is that you should try to

143
00:10:33.016 --> 00:10:36.530
derive state as much as possible.

144
00:10:36.530 --> 00:10:39.878
So we're going to be seeing that
in other exercises as well,

145
00:10:39.878 --> 00:10:42.450
where that principle
really comes into play.

