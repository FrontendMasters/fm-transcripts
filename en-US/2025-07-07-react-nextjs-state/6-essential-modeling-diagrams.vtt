WEBVTT

1
00:00:00.320 --> 00:00:03.301
&gt;&gt; David Khourshid: There's three
essential diagrams that I think that

2
00:00:03.301 --> 00:00:07.240
are important for everyone to learn and
to use in their application.

3
00:00:07.240 --> 00:00:09.200
Again, we're not going
to be going full uml.

4
00:00:09.200 --> 00:00:13.538
There's many different diagram types,
but there's three in particular that

5
00:00:13.538 --> 00:00:18.560
really help you think about the incidental
complexity in your application.

6
00:00:18.560 --> 00:00:21.680
The first is entity relationship diagrams.

7
00:00:21.680 --> 00:00:25.280
Now some of you might have worked
with this before in databases.

8
00:00:25.280 --> 00:00:30.063
And the point of this kind of diagram is
to model your data, so documents your

9
00:00:30.063 --> 00:00:35.660
data model and the relationship between
the different entities in your data.

10
00:00:35.660 --> 00:00:40.700
So for example, if we're creating
a booking system, we might have a user.

11
00:00:40.700 --> 00:00:42.940
Of course most apps have users.

12
00:00:42.940 --> 00:00:45.311
We might have flights as well,

13
00:00:45.311 --> 00:00:51.660
where this is just a raw list of flights
data that we have, and also hotels too.

14
00:00:51.660 --> 00:00:54.140
And then we have bookings.

15
00:00:54.140 --> 00:00:58.300
Now this is where we get into
primary keys and foreign keys.

16
00:00:58.300 --> 00:01:02.248
But all that means is that
this entity belongs to or

17
00:01:02.248 --> 00:01:05.180
is related to another entity.

18
00:01:05.180 --> 00:01:11.124
So in this case, a booking might
be related to a specific flight or

19
00:01:11.124 --> 00:01:13.420
a specific hotel.

20
00:01:13.420 --> 00:01:17.240
And there's also the concept of
relationships where something can be

21
00:01:17.240 --> 00:01:22.220
related to something else and there's a
different degree to which they're related.

22
00:01:22.220 --> 00:01:24.994
So one thing can have many
of the other thing or

23
00:01:24.994 --> 00:01:28.940
you could have a many to
many relationship as well.

24
00:01:28.940 --> 00:01:31.900
There's just different ways
of modeling your data.

25
00:01:31.900 --> 00:01:37.020
Now, I wouldn't say that you should use
a strict tool or framework for doing this.

26
00:01:37.020 --> 00:01:43.260
Just list out all of the different
entities you have and put it down.

27
00:01:43.260 --> 00:01:48.750
Put down all of the properties and also
put down how they relates to each other.

28
00:01:48.750 --> 00:01:53.465
So the main point I want to make here
with entity relationship diagrams is

29
00:01:53.465 --> 00:01:56.430
that it's not strictly for databases.

30
00:01:56.430 --> 00:02:00.430
It also really helps you model the data
in your front end application too.

31
00:02:02.670 --> 00:02:07.390
My preferred tool for this,
I really like using dbdiagram IO.

32
00:02:09.150 --> 00:02:13.775
It's a very simple tool to use and
it has a nice,

33
00:02:13.775 --> 00:02:18.760
it has a nice DSL over here
which again very simple.

34
00:02:18.760 --> 00:02:21.560
You have different entities
which they call tables.

35
00:02:21.560 --> 00:02:23.800
I'll zoom in a little bit here.

36
00:02:23.800 --> 00:02:27.172
Then you can model
the different properties and

37
00:02:27.172 --> 00:02:32.360
the different relationships
between each of the entities.

38
00:02:32.360 --> 00:02:36.207
You could drag it around and
you could include this as a visual in your

39
00:02:36.207 --> 00:02:40.257
application just to show these are all
of the different bits of data that

40
00:02:40.257 --> 00:02:44.870
we're going to be representing and, and
this is how they all connect together.

41
00:02:46.870 --> 00:02:52.085
So the second tool, or sorry,
the second kind of diagram

42
00:02:52.085 --> 00:02:57.190
that I really enjoy using
is sequence diagrams.

43
00:02:57.190 --> 00:02:59.926
So if I go down here, sequence diagrams,

44
00:02:59.926 --> 00:03:05.190
they document the flow between
different parts of your application.

45
00:03:05.190 --> 00:03:10.390
So let's Say that you're searching for
flights or something like that.

46
00:03:10.390 --> 00:03:14.910
You have the UI and
then you have also a flight search.

47
00:03:14.910 --> 00:03:17.830
It could be a service or
something like that.

48
00:03:17.830 --> 00:03:21.984
But the idea is that your UI needs to
communicate with this flight search,

49
00:03:21.984 --> 00:03:24.670
which can be represented
by an async function.

50
00:03:24.670 --> 00:03:30.722
But the point is we're sending data from
one actor that we call to another actor,

51
00:03:30.722 --> 00:03:35.920
and that actor might send,
hopefully might send data back.

52
00:03:35.920 --> 00:03:38.030
And then in the flow of our application,

53
00:03:38.030 --> 00:03:41.200
different actors are going
to be talking to each other.

54
00:03:41.200 --> 00:03:46.960
So let's say that we have an example,
a travel booking flow.

55
00:03:46.960 --> 00:03:50.304
The UI might call a FlightsearchService,
so

56
00:03:50.304 --> 00:03:55.120
that again async function and
then that will return results.

57
00:03:55.120 --> 00:04:00.082
And then once that happens, our UI
will now call a different service and

58
00:04:00.082 --> 00:04:05.050
then it will show options,
then we will pick one of those options.

59
00:04:05.050 --> 00:04:09.243
And then in the UI we might be
talking to our own applications API,

60
00:04:09.243 --> 00:04:13.892
which can be a different type of actor,
where we would create a booking,

61
00:04:13.892 --> 00:04:16.970
update the booking, delete it, et cetera.

62
00:04:16.970 --> 00:04:21.601
So just being able to document those
interactions between different actors

63
00:04:21.601 --> 00:04:26.592
is really going to help clarify how the
different parts of your application work,

64
00:04:26.592 --> 00:04:31.250
especially when it comes to what happens
outside of your react components.

65
00:04:32.690 --> 00:04:37.801
Now, again, making a sequence diagram,
just like making an entity relationship

66
00:04:37.801 --> 00:04:42.930
diagram, it doesn't require you to whip
out a whiteboard or a diagramming tool.

67
00:04:42.930 --> 00:04:46.850
This is something that you could
do just in plain text like this.

68
00:04:46.850 --> 00:04:51.250
If you do want to use a tool,
I really recommend swimlanes.

69
00:04:51.250 --> 00:04:56.540
Swimlanes is a very easy to use tool
that again, it has its own dsl.

70
00:04:56.540 --> 00:04:57.860
It's very expressive.

71
00:04:57.860 --> 00:05:03.140
You could change the names
of the actors over here and

72
00:05:03.140 --> 00:05:07.980
it updates immediately, some message here.

73
00:05:07.980 --> 00:05:11.227
You could also add notes and
things and you could share and

74
00:05:11.227 --> 00:05:14.620
export these diagrams and
use it within your own code base.

75
00:05:16.540 --> 00:05:21.787
Now the third one, sort of my specialty
again, I have lots of courses on,

76
00:05:21.787 --> 00:05:26.090
on state machines, but
it's the state's diagram.

77
00:05:26.090 --> 00:05:31.770
So this documents,
what happens inside of your application.

78
00:05:31.770 --> 00:05:37.826
So it's not really about sequence diagrams
where one actor is talking to another

79
00:05:37.826 --> 00:05:44.890
actor, but instead it is the behavior of a
single thing, which I like to call actors.

80
00:05:44.890 --> 00:05:49.426
So for example, when we're talking
about this flight's booking flow,

81
00:05:49.426 --> 00:05:53.030
a state diagram might show you
the different steps of it.

82
00:05:53.030 --> 00:05:57.518
So just to demonstrate here,
if we go to states new,

83
00:05:57.518 --> 00:06:03.740
let's make a blank canvas over here
we might have a flight booking flow,

84
00:06:03.740 --> 00:06:10.676
where first it will be flightsearch, and
then we'll have our flight results and

85
00:06:10.676 --> 00:06:15.690
then we might have the the hotel search,
once we pick one.

86
00:06:15.690 --> 00:06:19.290
So this is select flight.

87
00:06:19.290 --> 00:06:26.554
So then we search for a hotel and then
on results we have our hotel results and

88
00:06:26.554 --> 00:06:31.410
then we're going to go to
a confirmation screen.

89
00:06:31.410 --> 00:06:36.890
So when we select a hotel
we'll go to review screen.

90
00:06:36.890 --> 00:06:41.589
And then let's say that just in this
example, let's say that this is

91
00:06:41.589 --> 00:06:46.060
where we make our payments,
then we go to a confirmation screen.

92
00:06:47.100 --> 00:06:51.900
So looking at this, it might seem pretty
linear, it might seem pretty simple.

93
00:06:53.660 --> 00:06:56.940
And also I want to ask,
are you all familiar with state machines?

94
00:06:58.619 --> 00:06:59.220
A little bit?

95
00:06:59.220 --> 00:07:01.928
Okay, so for those watching,
if you're not,

96
00:07:01.928 --> 00:07:05.260
a state machine consists of
basically three main things.

97
00:07:05.260 --> 00:07:09.399
We have the initial states and
all of these states over here.

98
00:07:09.399 --> 00:07:13.135
And these represents,
they could be different screens,

99
00:07:13.135 --> 00:07:17.340
different modes of your application,
or just different pages.

100
00:07:19.340 --> 00:07:22.831
When you're working on multi step forms or
flows like that,

101
00:07:22.831 --> 00:07:26.940
it's easy to imagine each one
of those steps as a state.

102
00:07:26.940 --> 00:07:28.780
Then we have transitions.

103
00:07:28.780 --> 00:07:33.740
Transitions are what cause one
state to go to another state.

104
00:07:33.740 --> 00:07:39.110
So let's say that we have our flight
results and we select a flight.

105
00:07:39.110 --> 00:07:41.910
Now we're going to transition
to the hotel search page.

106
00:07:41.910 --> 00:07:45.590
And so that's what these are,
these are events.

107
00:07:45.590 --> 00:07:48.710
Events cause state transitions.

108
00:07:48.710 --> 00:07:55.110
So the reason that this is useful is,
I mean over here it might be simple.

109
00:07:55.110 --> 00:07:59.827
You might be looking at this and thinking,
why can't I just write an array of steps,

110
00:07:59.827 --> 00:08:04.745
words like flight search, flight results,
hotel search, hotel results, review and

111
00:08:04.745 --> 00:08:06.010
confirmation.

112
00:08:06.010 --> 00:08:10.675
And that's because especially
as your app grows in features,

113
00:08:10.675 --> 00:08:12.970
it never remains this simple.

114
00:08:12.970 --> 00:08:15.610
So for example,
let's say that we want to go back.

115
00:08:15.610 --> 00:08:17.690
Even the simple act of going back.

116
00:08:19.210 --> 00:08:24.330
Now this becomes a directed graph
instead of a nice linear structure.

117
00:08:24.330 --> 00:08:28.570
Some of you might be thinking,
okay, this is a double linked list.

118
00:08:28.570 --> 00:08:32.270
But still no,
overall it's a directed graph.

119
00:08:32.270 --> 00:08:34.590
And then same with hotel search.

120
00:08:34.590 --> 00:08:39.150
We could go back and say, okay, we
actually want to see the flight results.

121
00:08:39.150 --> 00:08:41.870
Again, same thing here.

122
00:08:41.870 --> 00:08:44.830
We could go back and then review.

123
00:08:44.830 --> 00:08:46.127
Of course, we could go back.

124
00:08:46.127 --> 00:08:49.950
And then, this is a key point and
why I'm doing this.

125
00:08:49.950 --> 00:08:53.070
When we made the confirmation,
should we be able to go back?

126
00:08:54.110 --> 00:08:55.150
Probably not.

127
00:08:55.150 --> 00:08:59.780
So that's why it's important to
explicitly model these dates.

128
00:08:59.780 --> 00:09:04.558
And in the review too,
we might decide that we want to for

129
00:09:04.558 --> 00:09:07.620
instance change our hotel search.

130
00:09:07.620 --> 00:09:10.340
So change hotel over here.

131
00:09:10.340 --> 00:09:15.700
Or we might want to
also change our flight.

132
00:09:15.700 --> 00:09:20.580
So we might want to go back to
the flight search over here.

133
00:09:20.580 --> 00:09:24.820
And now, hopefully you could see that
this becomes really a directed graph.

134
00:09:24.820 --> 00:09:26.420
It's no longer A links list.

135
00:09:26.420 --> 00:09:30.870
It's no longer a doubly links list,
it's no longer a simple array of steps.

136
00:09:30.870 --> 00:09:33.228
But instead this state diagram or

137
00:09:33.228 --> 00:09:38.710
flow diagram documents all of the
different paths that you have to consider.

138
00:09:40.790 --> 00:09:42.959
We could just go through each one and

139
00:09:42.959 --> 00:09:46.710
see just all of the different
paths that can happen.

140
00:09:46.710 --> 00:09:50.964
This is useful not only for modeling
your application logic, but also for

141
00:09:50.964 --> 00:09:53.640
just modeling how you
test your application,

142
00:09:53.640 --> 00:09:58.450
whether you're doing it manually or,
or you're writing end to end tests.

143
00:09:58.450 --> 00:10:00.712
So it becomes very clear to see, okay,

144
00:10:00.712 --> 00:10:05.250
here's all of the different things that
we could do when we're in each state.

145
00:10:07.090 --> 00:10:12.610
Now, state machines and state diagrams
are a really great tool for thinking.

146
00:10:12.610 --> 00:10:16.874
They are not something that you
necessarily need to include in your entire

147
00:10:16.874 --> 00:10:17.650
code base.

148
00:10:17.650 --> 00:10:22.486
But again, just being able to document
the flows are going to, you know,

149
00:10:22.486 --> 00:10:25.540
just pay dividends in
your state management.

150
00:10:26.980 --> 00:10:32.820
And also you don't necessarily need to
just go and diagram these state machines.

151
00:10:32.820 --> 00:10:38.180
What I like to do sometimes is just
write out the different states.

152
00:10:38.180 --> 00:10:42.500
So I might say, like starting out here,
this is what the user sees.

153
00:10:42.500 --> 00:10:47.084
We might not have any data yet, but
then they'll fill a form in search and

154
00:10:47.084 --> 00:10:52.070
then we will kick off a flight API call
and then we're searching for flights.

155
00:10:52.070 --> 00:10:56.319
So basically we're documenting
each of the screens that we see or

156
00:10:56.319 --> 00:11:01.590
each of the steps, and we're also
documenting what can happen in each step.

157
00:11:01.590 --> 00:11:06.143
Those are the two main important things
when you're documenting these state

158
00:11:06.143 --> 00:11:10.150
diagrams, what state you're in and
what can happen in each state.

159
00:11:12.070 --> 00:11:16.869
So any questions before we
move on to the exercise on

160
00:11:16.869 --> 00:11:20.560
these three different diagram types?

161
00:11:24.960 --> 00:11:27.773
&gt;&gt; Speaker 2: James in the chat just says
he's definitely going to take the state

162
00:11:27.773 --> 00:11:30.400
machine approach on his next project.

163
00:11:30.400 --> 00:11:31.200
&gt;&gt; David Khourshid: That's awesome.

164
00:11:31.200 --> 00:11:35.360
So taking the state machine approach on
your next project is a really good idea.

165
00:11:35.360 --> 00:11:39.560
Again, it's not something where you
have to tell everyone to use XDATA or

166
00:11:39.560 --> 00:11:42.640
to refactor everything as a state machine.

167
00:11:42.640 --> 00:11:46.800
Just documenting these flows
goes a really, really long way.

168
00:11:46.800 --> 00:11:48.840
Someone said we're close
to the X date topic here.

169
00:11:48.840 --> 00:11:53.169
And yeah, all of this, it is influenced
from me thinking about state machines,

170
00:11:53.169 --> 00:11:55.332
state charts and working on X dates, but

171
00:11:55.332 --> 00:11:59.360
we're not going to be talking about
X date specifically in this workshop.

