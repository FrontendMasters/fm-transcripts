WEBVTT

1
00:00:00.560 --> 00:00:05.037
&gt;&gt; David Khourshid: So in this exercise
we're going to be keeping those principles

2
00:00:05.037 --> 00:00:08.669
in mind through pretty much
the entire workshop and

3
00:00:08.669 --> 00:00:14.240
of course also this exercise, but
also we're going to be doing two things.

4
00:00:14.240 --> 00:00:16.672
We're going to be combining states,

5
00:00:16.672 --> 00:00:20.640
so really reducing the number
of use states that we have.

6
00:00:20.640 --> 00:00:26.080
And we're also going to be learning
about type states and finite states.

7
00:00:27.630 --> 00:00:29.630
So, let's talk about the first concept.

8
00:00:31.550 --> 00:00:36.430
Let's go to a scratch pad,
so finite scratch.

9
00:00:38.110 --> 00:00:42.179
Okay, let's say that we have
an application for, I don't know,

10
00:00:42.179 --> 00:00:44.590
let's say that we're making coffee.

11
00:00:44.590 --> 00:00:50.030
So we have const coffeeType,
setCoffeeType.

12
00:00:50.030 --> 00:00:51.240
We have different types and

13
00:00:51.240 --> 00:00:55.010
it's already like just giving me
a whole bunch of different options.

14
00:00:55.010 --> 00:01:00.610
We also have size, and
we also might have sugar and milk.

15
00:01:00.610 --> 00:01:03.970
The thing is that all of
these are actually related.

16
00:01:05.090 --> 00:01:07.330
So we're ordering a coffee.

17
00:01:07.330 --> 00:01:10.050
We do have multiple use dates here.

18
00:01:10.050 --> 00:01:14.808
One of the things that I want you to get
used to, you don't necessarily need to do

19
00:01:14.808 --> 00:01:19.780
this, but honestly, when you have a lot of
use dates, it can become a problem, but

20
00:01:19.780 --> 00:01:22.440
group related data together.

21
00:01:22.440 --> 00:01:29.160
So, instead of all of this, we could just
have, let's call this coffee, say coffee.

22
00:01:30.360 --> 00:01:35.480
And instead we could combine all
of this into a single object.

23
00:01:35.480 --> 00:01:41.240
So this is going to be the type of coffee,
the size, the sugar and milk.

24
00:01:41.240 --> 00:01:44.920
And we can all have this
in one single object.

25
00:01:44.920 --> 00:01:45.826
Now the pattern for

26
00:01:45.826 --> 00:01:49.930
updating the state is actually
going to be a little bit different.

27
00:01:49.930 --> 00:01:55.162
So over here, when we're handling
the coffee type change, we're no longer

28
00:01:55.162 --> 00:02:01.450
just setting the single state variable,
instead we're updating the entire object.

29
00:02:01.450 --> 00:02:04.730
So that can look like one of two things.

30
00:02:04.730 --> 00:02:09.894
It can either look like something
where you take that existing

31
00:02:09.894 --> 00:02:15.620
object like coffee, and
then you pass in the type over here.

32
00:02:15.620 --> 00:02:19.917
So you're basically taking that
entire object and just saying,

33
00:02:19.917 --> 00:02:23.300
I want this object with this type updated.

34
00:02:23.300 --> 00:02:27.540
Now there actually might be
a small problem with this.

35
00:02:27.540 --> 00:02:33.543
This coffee is a closed in variable, so we
have a closure issue, which sometimes it's

36
00:02:33.543 --> 00:02:38.580
not a problem, but other times we
might see some unwanted side effects.

37
00:02:38.580 --> 00:02:43.191
Which is why I actually recommend
using the pattern of grabbing

38
00:02:43.191 --> 00:02:46.730
the previous value and instead using that.

39
00:02:46.730 --> 00:02:51.207
So that's going to use
the existing coffee over here and

40
00:02:51.207 --> 00:02:57.130
say I want to update the type
based on the previous value of it.

41
00:02:57.130 --> 00:03:03.850
So that is one way that we could
basically combine our entire state.

42
00:03:03.850 --> 00:03:08.930
So, let's put some default values here,
and that's exactly what it looks like.

43
00:03:10.530 --> 00:03:15.010
Now, another thing that I really
want to demonstrate here and

44
00:03:15.010 --> 00:03:21.330
what we're gonna be using in this
exercise, is the idea of finite states.

45
00:03:21.330 --> 00:03:25.343
So let's say that we have another two and

46
00:03:25.343 --> 00:03:29.010
then we are making our coffeeOrder.

47
00:03:29.010 --> 00:03:35.250
So let's say that we have const
coffeeOrder set coffeeOrder.

48
00:03:35.250 --> 00:03:37.990
And this is just, yeah, oops,

49
00:03:37.990 --> 00:03:42.759
some use state over here
we're ordering a cappuccino,

50
00:03:42.759 --> 00:03:48.290
and we also want to model
actually making this order.

51
00:03:48.290 --> 00:03:52.850
So this is probably muscle memory
to a lot of React developers.

52
00:03:52.850 --> 00:03:56.699
But you're going to start
with your constIsLoading,

53
00:03:56.699 --> 00:04:00.220
setIsLoading, and
then maybe const isSuccess.

54
00:04:01.410 --> 00:04:08.130
So you have that boolean and then const,
oops, const error, setError.

55
00:04:08.130 --> 00:04:10.970
And then you're going to
actually kick off the,

56
00:04:10.970 --> 00:04:14.130
the ordering process,
probably in a use effect.

57
00:04:14.130 --> 00:04:17.676
So you're gonna have
a useEffect over here, and

58
00:04:17.676 --> 00:04:21.010
then again this is all muscle memory.

59
00:04:21.010 --> 00:04:24.309
You want your coffeeOrder over here,
and then it's going to,

60
00:04:24.309 --> 00:04:27.810
it's going to do something,
it's going to make a fetch request.

61
00:04:29.670 --> 00:04:32.727
So, let's actually do a demo
fetch request over here.

62
00:04:32.727 --> 00:04:36.430
So, mock fetch call.

63
00:04:36.430 --> 00:04:40.100
So we might do something where
like we're fetching that order and

64
00:04:40.100 --> 00:04:43.350
then we have all this
boilerplate that we have to add.

65
00:04:43.350 --> 00:04:46.390
We set success to true, loading to false.

66
00:04:46.390 --> 00:04:51.590
And then if we have an error,
then we also set loading to false.

67
00:04:51.590 --> 00:04:56.162
And this just gets problematic because
it might seem simple over here,

68
00:04:56.162 --> 00:05:00.504
but we're really managing two
seemingly unrelated pieces of state

69
00:05:00.504 --> 00:05:03.980
that are actually supposed to be related.

70
00:05:03.980 --> 00:05:09.420
And we also need to handle canceling.

71
00:05:09.420 --> 00:05:13.580
So if not cancelled,
then we go ahead with this.

72
00:05:14.700 --> 00:05:19.462
So instead of that, I want you to,
just based on our previous exercise,

73
00:05:19.462 --> 00:05:23.550
think about the different
states that we could be in.

74
00:05:23.550 --> 00:05:26.750
And so this actually makes
a pretty simple refactor.

75
00:05:26.750 --> 00:05:33.361
Instead of is loading is success and
error, we could do const status,

76
00:05:33.361 --> 00:05:39.390
and we could have a string
enum representing the status.

77
00:05:39.390 --> 00:05:44.197
Now we could eliminate
basically both of these,

78
00:05:44.197 --> 00:05:48.710
and instead we could set status loading.

79
00:05:48.710 --> 00:05:50.939
We could eliminate both of these and

80
00:05:50.939 --> 00:05:55.670
just set status to success because
those are mutually exclusive.

81
00:05:55.670 --> 00:05:59.820
We never want it to be loading
in success at the same time,

82
00:05:59.820 --> 00:06:03.025
in reality we're just changing one thing.

83
00:06:03.025 --> 00:06:07.750
And then we have an error over here, so
we're gonna set the status to error.

84
00:06:07.750 --> 00:06:13.351
And so, that's one way that we
could really simplify handling

85
00:06:13.351 --> 00:06:21.140
multiple boolean states that are really
meant to represent one kind of state.

86
00:06:21.140 --> 00:06:25.192
Now if you want to go above and
beyond, there's something called, or

87
00:06:25.192 --> 00:06:28.100
there's a pattern called type states.

88
00:06:28.100 --> 00:06:34.078
And so with type states, here's
a problem that it solves first of all.

89
00:06:34.078 --> 00:06:38.465
Let's say that we're trying
to render something and

90
00:06:38.465 --> 00:06:40.910
we have if status is success.

91
00:06:43.230 --> 00:06:50.190
So, let me add another variable here
we have const receipt, set receipt.

92
00:06:50.190 --> 00:06:53.230
And this could either be a string or null.

93
00:06:54.830 --> 00:07:00.510
So, I want to show the receipt,
but again the receipts.

94
00:07:00.510 --> 00:07:01.630
Actually let's do this.

95
00:07:01.630 --> 00:07:03.790
Let's make the receipt a total.

96
00:07:03.790 --> 00:07:08.413
So, a problem with this is that, and
it doesn't matter if you're using finite

97
00:07:08.413 --> 00:07:12.553
states or if you're just doing
something in your application where you

98
00:07:12.553 --> 00:07:16.981
are 100,000% sure that this receipt,
when the status is success.

99
00:07:16.981 --> 00:07:21.863
Or even if you have issuccess, you know
that that receipt is going to exist

100
00:07:21.863 --> 00:07:26.070
because, let's say that we
set the receipt over here.

101
00:07:26.070 --> 00:07:29.510
So we're setting the status and
we're setting the receipt.

102
00:07:29.510 --> 00:07:30.790
You know that that exists.

103
00:07:30.790 --> 00:07:33.750
So in Typescript you might
add an exclamation mark.

104
00:07:35.110 --> 00:07:40.630
It's actually totally fine if you add
multiple exclamation marks in some cases.

105
00:07:40.630 --> 00:07:42.710
I discovered that randomly.

106
00:07:42.710 --> 00:07:46.778
But the idea is that you want to,
at a type level,

107
00:07:46.778 --> 00:07:50.230
ensure that this receipt exists.

108
00:07:50.230 --> 00:07:52.470
So, how exactly can we do that?

109
00:07:52.470 --> 00:07:54.550
Well, we can use type states.

110
00:07:54.550 --> 00:07:58.650
So type, let's see, CoffeeOrder.

111
00:08:00.170 --> 00:08:05.050
And we're going to be using in Typescript
what's called a discriminated union.

112
00:08:05.050 --> 00:08:10.530
So, instead of just a plain status string,
we're gonna put it inside of this object.

113
00:08:10.530 --> 00:08:16.290
So we're gonna say status is idle or
loading or success or error.

114
00:08:16.290 --> 00:08:18.650
And this is actually
a good way to start out.

115
00:08:18.650 --> 00:08:23.130
You have the error, and then you have
the receipts inside the same object.

116
00:08:23.130 --> 00:08:28.688
So from there you could actually
transform this to a discriminated

117
00:08:28.688 --> 00:08:34.040
union by adding this pipe and
then saying status success.

118
00:08:34.040 --> 00:08:37.688
So now we could actually get rid of this,
and

119
00:08:37.688 --> 00:08:42.920
we could say that the receipt
is definitely defined over here.

120
00:08:42.920 --> 00:08:48.440
So we could say that in this
case the the receipt is null.

121
00:08:48.440 --> 00:08:51.940
But when we have success,
we definitely have the receipt.

122
00:08:51.940 --> 00:08:53.580
And so here's how this looks.

123
00:08:55.100 --> 00:08:58.820
Let's actually just put
this somewhere else.

124
00:08:58.820 --> 00:09:04.940
So let's const CoffeeOrder.

125
00:09:04.940 --> 00:09:07.020
And then we have idle.

126
00:09:07.020 --> 00:09:09.900
We have no error and no receipts.

127
00:09:09.900 --> 00:09:12.700
And I'm actually going to
delete this over here.

128
00:09:14.540 --> 00:09:16.271
And so instead of this,

129
00:09:16.271 --> 00:09:20.780
we could set coffeeOrder to
status success with the receipt.

130
00:09:20.780 --> 00:09:23.700
And here is the really,
really cool part about this.

131
00:09:26.180 --> 00:09:30.980
This enforces the data in two places,
both when you're setting it.

132
00:09:30.980 --> 00:09:34.613
So if I get rid of receipts,
it's actually going to yell at me and say,

133
00:09:34.613 --> 00:09:38.308
you're missing the receipt here,
you're saying it's success, but

134
00:09:38.308 --> 00:09:40.180
the receipt doesn't exist.

135
00:09:40.180 --> 00:09:43.860
So it's really forcing us to
keep that state consistent.

136
00:09:43.860 --> 00:09:47.864
And then over here,
I no longer need this or

137
00:09:47.864 --> 00:09:52.260
I have to do coffeeOrder.receipt.total.

138
00:09:52.260 --> 00:09:58.980
So if I say coffeeOrder.status is success,
then I know for a fact that that exists.

139
00:09:58.980 --> 00:10:03.936
So if I change this to error,
I know that we don't have a receipt here,

140
00:10:03.936 --> 00:10:09.560
or at least we can't read the total
because it might possibly be null.

141
00:10:09.560 --> 00:10:12.760
And so that's what type states are very,
very useful for.

142
00:10:12.760 --> 00:10:17.400
&gt;&gt; Speaker 2: In the first example, when
setting the coffee state, you mentioned

143
00:10:17.400 --> 00:10:22.760
using previous because splatting coffee
had some pitfalls, which by the way,

144
00:10:22.760 --> 00:10:28.449
I think this is the answer to the previous
chat's question about setting a profile.

145
00:10:28.449 --> 00:10:32.560
Send the name and profile, this is what
they were wondering how to do this.

146
00:10:32.560 --> 00:10:36.004
But what are the pitfalls of
just spreading coffee versus

147
00:10:36.004 --> 00:10:37.950
using the previous statement?

148
00:10:41.070 --> 00:10:43.902
&gt;&gt; David Khourshid: You might run into
closure problems with that because you

149
00:10:43.902 --> 00:10:45.790
might have a stale version of coffee.

150
00:10:45.790 --> 00:10:49.110
No one likes stale coffee, especially
if you microwave, it tastes terrible.

151
00:10:49.110 --> 00:10:52.619
But if you have a stale version of
a value, then when you set coffee,

152
00:10:52.619 --> 00:10:55.638
you might accidentally revert
to that previous version or

153
00:10:55.638 --> 00:10:58.670
at least different properties
of that previous version.

154
00:10:59.790 --> 00:11:05.022
And this can show up in many cases,
if you put this in a used memo and

155
00:11:05.022 --> 00:11:07.888
decide to memoize it excessively.

156
00:11:07.888 --> 00:11:12.429
Or maybe it's in an event handler
that does not change for some reason.

157
00:11:12.429 --> 00:11:17.080
Or even in a useEffect, there's just
many places where that might come up.

158
00:11:17.080 --> 00:11:21.666
And so that's why, honestly, as a best
practice in a habit, just try to go based

159
00:11:21.666 --> 00:11:25.849
on the previous value inside of that
function, because over here you're

160
00:11:25.849 --> 00:11:30.320
guaranteed that that value is going to
be the latest value value of that state.

161
00:11:31.360 --> 00:11:35.518
&gt;&gt; Speaker 3: I'm thinking of a scenario
where some related states will be updated

162
00:11:35.518 --> 00:11:37.310
in one context provider, but

163
00:11:37.310 --> 00:11:41.360
a smaller consumer component may
only use one part of the data.

164
00:11:41.360 --> 00:11:43.840
So will that lead to
unnecessary read renders?

165
00:11:44.959 --> 00:11:46.320
&gt;&gt; David Khourshid: That's
a very good question.

166
00:11:46.320 --> 00:11:49.120
So, it definitely depends.

167
00:11:49.120 --> 00:11:52.640
And this would be a good use case for
useMemo.

168
00:11:52.640 --> 00:11:57.460
So you could just see if all
of those values are the same.

169
00:11:59.060 --> 00:12:03.028
But honestly,
it's not a big problem in practice.

170
00:12:03.028 --> 00:12:07.537
I wouldn't recommend you to just put every
single use date inside your component

171
00:12:07.537 --> 00:12:09.220
inside of a single use date.

172
00:12:09.220 --> 00:12:11.700
Instead, I want you to
separate it by concern.

173
00:12:11.700 --> 00:12:17.380
So for example, this coffee object, this
is an object that we could pass around.

174
00:12:17.380 --> 00:12:23.224
And so chances are that if we change
the size or any part about that coffee,

175
00:12:23.224 --> 00:12:26.997
the entire object
fundamentally changes and so

176
00:12:26.997 --> 00:12:32.870
we might want to let components
downstream know about that change.

177
00:12:32.870 --> 00:12:35.590
But in practice I haven't
seen this to be a problem.

178
00:12:37.830 --> 00:12:44.710
So, always just double check before you
decide to put any optimizations in place.

179
00:12:44.710 --> 00:12:50.805
But just know that there do exist some
optimizations in react like useMemo,

180
00:12:50.805 --> 00:12:52.580
etc., for that.

181
00:12:52.580 --> 00:12:56.693
And then Masij asks in CoffeeOrder,
did we use generic type

182
00:12:56.693 --> 00:13:00.900
as the first variance because
the union was not exhaustive?

183
00:13:03.140 --> 00:13:10.820
So in reality, yeah, you might wanna
flesh this out a little bit more.

184
00:13:10.820 --> 00:13:13.238
So for example, if we're loading,

185
00:13:13.238 --> 00:13:17.918
then we know that we don't have a receipt,
we don't have an error, but

186
00:13:17.918 --> 00:13:23.230
if there is an error, so we definitely
have an error and there's no receipt.

187
00:13:23.230 --> 00:13:31.150
So then we could just get rid of these and
we have our complete type state over here.

188
00:13:31.150 --> 00:13:34.350
So this is more around the lines
of what it should look like.

