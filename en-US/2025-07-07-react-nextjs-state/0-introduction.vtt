WEBVTT

1
00:00:00.240 --> 00:00:03.525
&gt;&gt; David Khourshid: Welcome to
the State Management at Scale workshop at

2
00:00:03.525 --> 00:00:05.520
Frontend Masters.

3
00:00:05.520 --> 00:00:08.880
My name is David Khorshid and
I'll be your instructor today.

4
00:00:08.880 --> 00:00:13.078
So, first of all, what do I mean
by state management at scale?

5
00:00:13.078 --> 00:00:18.250
Does it mean llike lots of users,
a thousand components,

6
00:00:18.250 --> 00:00:21.532
or like just a million lines of code?

7
00:00:21.532 --> 00:00:26.502
And actually scale, at least when we're
talking about state management at scale is

8
00:00:26.502 --> 00:00:28.120
isn't really about size.

9
00:00:28.120 --> 00:00:33.600
It's actually all about maintainability
and iteration speed as your app evolves.

10
00:00:33.600 --> 00:00:36.298
So the questions that you
have to ask yourself are,

11
00:00:36.298 --> 00:00:39.440
can you add features without
breaking existing ones?

12
00:00:39.440 --> 00:00:43.266
Can your team members contribute
confidently to your code base and

13
00:00:43.266 --> 00:00:45.920
can you actually debug issues quickly?

14
00:00:45.920 --> 00:00:48.160
So that's what I mean by scale.

15
00:00:48.160 --> 00:00:50.912
And so by the end of today,
after this workshop,

16
00:00:50.912 --> 00:00:55.920
you're going to have patterns that scale
on hopefully all three dimensions.

17
00:00:55.920 --> 00:00:57.440
First of all, features.

18
00:00:57.440 --> 00:01:02.167
So you want to be able to add new
functionality by extending your code base

19
00:01:02.167 --> 00:01:05.760
and not modifying too
much if you can help it.

20
00:01:05.760 --> 00:01:10.251
You also want to have a good understanding
of the code base for your teammates,

21
00:01:10.251 --> 00:01:14.609
because usually when you're working
on a big project, it's not just you,

22
00:01:14.609 --> 00:01:16.960
you're working with your teammates.

23
00:01:16.960 --> 00:01:20.363
And so you want to have everyone
coding in a very similar way,

24
00:01:20.363 --> 00:01:25.171
preventing merge conflicts and more
importantly, preventing confusion, whether

25
00:01:25.171 --> 00:01:29.600
you're new to the code base or you've
been coding in it for many, many years.

26
00:01:30.960 --> 00:01:36.320
The third one which I'm going to really
focus on in this workshop is complexity.

27
00:01:36.320 --> 00:01:40.724
And so that's state management
that you can debug and understand,

28
00:01:40.724 --> 00:01:46.240
especially as you add features,
change features, fix bugs, et cetera.

29
00:01:46.240 --> 00:01:49.730
All right, so first of all,
who is this workshop for?

30
00:01:49.730 --> 00:01:53.970
This workshop is for React developers,
and honestly, any sort of a front end

31
00:01:53.970 --> 00:01:58.490
developer, whether you're working in
React Vue, Angular, doesn't matter.

32
00:01:58.490 --> 00:02:02.770
But our focus today is going
to be on a React next JS app.

33
00:02:02.770 --> 00:02:07.470
But the idea is that we're going to be
going beyond the basics of React state

34
00:02:07.470 --> 00:02:09.330
management.

35
00:02:09.330 --> 00:02:14.087
You probably already know your basic
hooks, such as use date, use effects,

36
00:02:14.087 --> 00:02:18.696
use reference, and you might know
the other hooks too, like useContext,

37
00:02:18.696 --> 00:02:24.230
useReducer, and maybe you've used some of
the other ones like UseMemo, et cetera.

38
00:02:24.230 --> 00:02:29.645
And you have worked in large or small
React applications, some of which are in

39
00:02:29.645 --> 00:02:34.830
production, and some of them you might
have been using React for a while.

40
00:02:34.830 --> 00:02:38.663
So you might have legacy code
bases that use class components or

41
00:02:38.663 --> 00:02:42.150
hopefully newer ones that use
hooks instead of classes.

42
00:02:43.430 --> 00:02:47.774
And you attending this workshop,
you've worked with a team and

43
00:02:47.774 --> 00:02:50.510
most of you have gone through honestly,

44
00:02:50.510 --> 00:02:56.070
like all of these common struggles of
managing states in a large application.

45
00:02:56.070 --> 00:02:59.101
So you might have tried state
management libraries or

46
00:02:59.101 --> 00:03:01.750
maybe you've invented your own solutions.

47
00:03:01.750 --> 00:03:04.679
I've seen a lot of code bases
where basically they said,

48
00:03:04.679 --> 00:03:08.260
we're not going to use a third
party state management library.

49
00:03:08.260 --> 00:03:11.997
We're going to either try to use
react hooks as much as we can, or

50
00:03:11.997 --> 00:03:14.740
we're going to try to build our own thing.

51
00:03:14.740 --> 00:03:19.860
And even those sort of end up
in disaster in the long run.

52
00:03:19.860 --> 00:03:23.485
You have also felt the pain with
dealing with an ever growing number of

53
00:03:23.485 --> 00:03:26.020
features and bugs in your application.

54
00:03:26.020 --> 00:03:31.300
And maybe you have run into things like
the dreaded infinite loop and use effect.

55
00:03:31.300 --> 00:03:36.119
I know I have lots of times, or even
worse, when you have a lot of multiple

56
00:03:36.119 --> 00:03:40.400
chain use effects and
you're like, okay, there's a bug.

57
00:03:40.400 --> 00:03:42.320
I don't know what is causing this.

58
00:03:42.320 --> 00:03:45.697
So you have to sort of debug
every single use effect and

59
00:03:45.697 --> 00:03:48.640
see what is causing
the other one to trigger.

60
00:03:48.640 --> 00:03:52.720
And it sort of feels like a Rube Goldberg
machine instead of a state machine.

61
00:03:52.720 --> 00:03:55.440
And it becomes just near
impossible to debug.

62
00:03:55.440 --> 00:03:57.680
And so we're going to be
talking about that later too.

