WEBVTT

1
00:00:00.240 --> 00:00:04.080
&gt;&gt; David Khourshid: Okay, yeah, so let's
quickly do the type state implementation.

2
00:00:04.080 --> 00:00:08.320
So with the type state implementation,
what we want to notice is that we have

3
00:00:08.320 --> 00:00:11.436
things like when we're
setting status to submitting,

4
00:00:11.436 --> 00:00:14.418
we're also setting the selected
flights to null, or

5
00:00:14.418 --> 00:00:17.680
we're setting flight options
when it is a success.

6
00:00:17.680 --> 00:00:22.704
And so these are all clues that we could
use a type states to really reduce

7
00:00:22.704 --> 00:00:29.040
the number of states that we have to set
and the states that we have to manage.

8
00:00:29.040 --> 00:00:34.934
So we're going to, let's, you know,
we have flight data over here,

9
00:00:34.934 --> 00:00:39.280
let's actually add the status
inside here as well.

10
00:00:39.280 --> 00:00:41.280
So this is going to be idle.

11
00:00:41.280 --> 00:00:46.000
And so now we could actually
define our type states.

12
00:00:46.000 --> 00:00:51.600
So we could have type flight
data which includes all of this.

13
00:00:51.600 --> 00:00:55.310
So we have our destination,
departure, arrival and passengers.

14
00:00:55.310 --> 00:00:58.982
But we're also going to be adding,
with an intersection type,

15
00:00:58.982 --> 00:01:03.870
we're going to be adding our different
type states that we could be in.

16
00:01:03.870 --> 00:01:08.590
So just for speed, I'm using Claude.

17
00:01:08.590 --> 00:01:12.750
But we have for example,
idle submitting, error and success.

18
00:01:12.750 --> 00:01:17.044
So we know in success we have
our flight options defined and

19
00:01:17.044 --> 00:01:21.685
we know that in error we might have
an error message over here and

20
00:01:21.685 --> 00:01:26.910
that when we're idle,
our flight options are actually null.

21
00:01:26.910 --> 00:01:30.270
And same thing for submitting,
our flight options are null.

22
00:01:30.270 --> 00:01:32.350
So we don't have those in there.

23
00:01:32.350 --> 00:01:37.126
And so this is a pattern that
if you have common data,

24
00:01:37.126 --> 00:01:42.590
then you might want to use
an intersection type for that.

25
00:01:42.590 --> 00:01:47.396
So you would have all of your common
properties in one object intersecting

26
00:01:47.396 --> 00:01:50.990
with your discriminated
union at the bottom.

27
00:01:50.990 --> 00:01:54.404
And so that way like, you know,

28
00:01:54.404 --> 00:01:59.710
we have flight options null and
you could even.

29
00:01:59.710 --> 00:02:02.510
In fact, it is good practice to
put everything up front here.

30
00:02:02.510 --> 00:02:05.150
So we have flight options and
we have an error.

31
00:02:05.150 --> 00:02:09.832
So we're representing all the possible
values that it could be here, but

32
00:02:09.832 --> 00:02:15.540
we're limiting that when we actually deal
with each of the type states down here.

33
00:02:15.540 --> 00:02:20.229
And so now when we have something,
for example set status submitting,

34
00:02:20.229 --> 00:02:23.745
we can instead set the flight
data to have the status be

35
00:02:23.745 --> 00:02:26.580
submitting the selected flight be null.

36
00:02:26.580 --> 00:02:29.700
And of course the error is
going to disappear too.

37
00:02:29.700 --> 00:02:32.980
And then we no longer
need those variables.

38
00:02:32.980 --> 00:02:37.380
So same thing for
when we actually have a success.

39
00:02:37.380 --> 00:02:41.756
We could reduce these two into
a single set flight data with

40
00:02:41.756 --> 00:02:46.150
the status of success and
the flight options that we have.

41
00:02:47.190 --> 00:02:50.715
&gt;&gt; James Halliday: Maybe you need to
actually type the use state up there for

42
00:02:50.715 --> 00:02:52.230
the set flight data.

43
00:02:52.230 --> 00:02:57.170
It's just according to the object
you pass in right here.

44
00:02:57.170 --> 00:02:58.787
&gt;&gt; David Khourshid: You're right.

45
00:02:58.787 --> 00:03:01.694
Okay, so
[LAUGH] we have that typeState, but

46
00:03:01.694 --> 00:03:06.110
we didn't actually have our
different options over there.

47
00:03:06.110 --> 00:03:07.831
Okay so now it works.

48
00:03:07.831 --> 00:03:13.710
Thank you, we were just missing the type,
that's all, so okay.

49
00:03:13.710 --> 00:03:18.990
Wow, that was an embarrassing mistake,
but hey, type save the day over there.

50
00:03:18.990 --> 00:03:24.573
So yeah that's an example of how you
could use discriminated unions and

51
00:03:24.573 --> 00:03:30.620
type states and also combine related data
to reduce the number of use dates and

52
00:03:30.620 --> 00:03:33.986
also just keep your data more consistent.

53
00:03:33.986 --> 00:03:34.652
Any questions?

54
00:03:39.670 --> 00:03:42.747
&gt;&gt; Male Speaker 3: Just James saying
typescript can be tricky sometimes is

55
00:03:42.747 --> 00:03:45.750
the understatement of the century [LAUGH].

56
00:03:45.750 --> 00:03:50.062
&gt;&gt; David Khourshid: It helps you out but
it also can cost a lot of time but

57
00:03:50.062 --> 00:03:56.140
it's more helpful than it is a burden,
so I do appreciate it.

58
00:03:56.140 --> 00:04:00.629
&gt;&gt; Male Speaker 3: Then we could have
error that even caught the fact that we

59
00:04:00.629 --> 00:04:03.360
didn't include error there.

60
00:04:03.360 --> 00:04:04.600
&gt;&gt; David Khourshid: Exactly.

61
00:04:04.600 --> 00:04:08.640
So that's what I mean about just
keeping your data consistent and

62
00:04:08.640 --> 00:04:12.901
so if we happen to have flight options
here it's going to yell at us and

63
00:04:12.901 --> 00:04:15.920
say wait a minute this
should not be possible so.

