WEBVTT

1
00:00:00.400 --> 00:00:02.720
&gt;&gt; David Khourshid: So
let's get to the exercise.

2
00:00:02.720 --> 00:00:07.120
We're going to be working in
exercise-reducer &gt; page.tsx.

3
00:00:07.120 --> 00:00:12.160
And you can see that there's
a lot of things going on here.

4
00:00:12.160 --> 00:00:16.640
This is basically just a beefed up
version of the demo that we just saw.

5
00:00:18.800 --> 00:00:23.280
There's a lot of confusion over here,
a lot of state happening over here.

6
00:00:23.280 --> 00:00:27.528
We have our typical submit
with IsSubmitting, IsError,

7
00:00:27.528 --> 00:00:29.440
setSearchParams, etc.

8
00:00:30.920 --> 00:00:34.280
And so
things get pretty complicated over here.

9
00:00:34.280 --> 00:00:37.021
We also have two components, or two and

10
00:00:37.021 --> 00:00:41.320
a half if you count this
random is error over here.

11
00:00:41.320 --> 00:00:46.268
And we're passing in issubmitting on
submit where it's just giving back

12
00:00:46.268 --> 00:00:47.557
the information.

13
00:00:47.557 --> 00:00:52.805
And we're also passing the flight options
and things like that to the search

14
00:00:52.805 --> 00:00:58.270
results, and we're all basing that
on some random boolean value.

15
00:00:58.270 --> 00:01:02.604
So we have a pretty inefficient
way of managing states and

16
00:01:02.604 --> 00:01:06.910
sharing that states between
multiple components.

17
00:01:06.910 --> 00:01:10.601
And again, in your applications,
you might think that this is fine.

18
00:01:10.601 --> 00:01:12.830
You might say, hey, everything works.

19
00:01:12.830 --> 00:01:17.732
But even looking at this simple example,
it is a bit confusing to see

20
00:01:17.732 --> 00:01:22.470
where all the states come together and
also how updates are done.

21
00:01:22.470 --> 00:01:25.910
There's a lot of prop
communication happening.

22
00:01:25.910 --> 00:01:28.150
So things are just really confusing.

23
00:01:28.150 --> 00:01:31.990
And furthermore,
I don't think it even works fully.

24
00:01:31.990 --> 00:01:35.365
So if I go to exercise on the actual UI,

25
00:01:35.365 --> 00:01:39.901
I type in the destination,
whatever, Timbuktu,

26
00:01:39.901 --> 00:01:45.500
set my dates and go search for
flights, sure, this will work.

27
00:01:45.500 --> 00:01:50.960
It will show flights,
I'm able to select the flights.

28
00:01:50.960 --> 00:01:54.200
But once I go back to search,
that information disappears.

29
00:01:54.200 --> 00:01:57.280
And as a user,
I'm pretty frustrated about that.

30
00:01:57.280 --> 00:02:00.416
But if we have some sort of
centralized state management,

31
00:02:00.416 --> 00:02:03.240
then that information
doesn't have to disappear.

32
00:02:03.240 --> 00:02:06.584
We could actually control
what that data is so

33
00:02:06.584 --> 00:02:11.360
that we could show it on
the page when we get to it again.

34
00:02:11.360 --> 00:02:13.480
So we're going to be doing
a bunch of things in here.

35
00:02:13.480 --> 00:02:17.755
We're going to be converting
this to using useReducer and

36
00:02:17.755 --> 00:02:22.742
we're going to be sharing that
reducer with those two components.

37
00:02:29.690 --> 00:02:33.994
&gt;&gt; David Khourshid: All right, so
we're going to be refactoring this

38
00:02:33.994 --> 00:02:38.090
multi-step form into using useReducer.

39
00:02:38.090 --> 00:02:41.735
Now instead of just showing you, okay,
let's delete all of this code, and then

40
00:02:41.735 --> 00:02:45.450
I'm going to show you the answer and we're
going to replace that code all at once.

41
00:02:46.640 --> 00:02:52.103
I really want to emphasize the technique
that I've been showing you before, where

42
00:02:52.103 --> 00:02:56.800
you want to be working on the refactor
side by side with the actual code.

43
00:02:56.800 --> 00:02:59.885
And this is to make sure
that all of the behavior and

44
00:02:59.885 --> 00:03:04.442
all of the logic is exactly the same
when you're dealing with refactors,

45
00:03:04.442 --> 00:03:06.880
without doing anything destructive.

46
00:03:06.880 --> 00:03:11.268
And this is especially important if
you don't have these end to end, or

47
00:03:11.268 --> 00:03:15.500
unit tests, or
just enough coverage in your application.

48
00:03:15.500 --> 00:03:18.140
So again,
we're going to be doing this side by side.

49
00:03:18.140 --> 00:03:22.136
And the first step,
like we learned about in previous lessons,

50
00:03:22.136 --> 00:03:25.180
is modeling what we want
our state to look like.

51
00:03:25.180 --> 00:03:30.140
So that's why we're going to
start with the booking states.

52
00:03:30.140 --> 00:03:36.266
And just based on all of our Boolean
variables, we have a status of,

53
00:03:36.266 --> 00:03:40.899
we start with idle where
we haven't searched yet.

54
00:03:40.899 --> 00:03:46.850
And then we're searching and
then, eventually, we get results.

55
00:03:46.850 --> 00:03:49.170
We could also have an error.

56
00:03:49.170 --> 00:03:50.370
There's a state for that.

57
00:03:51.730 --> 00:03:56.450
We also have flight options which we
want to maintain in this state as well.

58
00:03:56.450 --> 00:04:00.130
And we have our search
parameters that we want to show.

59
00:04:00.130 --> 00:04:03.570
So we'll fill that out.

60
00:04:03.570 --> 00:04:07.530
So we have our destination, departure,
arrival passengers is one way.

61
00:04:07.530 --> 00:04:12.770
And again, this stuff comes from what
we already have on the page there.

62
00:04:12.770 --> 00:04:17.336
We just want to centralize it into
one state that can be represented in

63
00:04:17.336 --> 00:04:18.290
the reducer.

64
00:04:19.410 --> 00:04:22.010
And let's get our initial state too.

65
00:04:22.010 --> 00:04:25.455
So const initial,
let's call it BookingState,

66
00:04:25.455 --> 00:04:28.005
which is going to be a BookingState.

67
00:04:28.005 --> 00:04:31.318
Status, we're going to
start with the idle state.

68
00:04:31.318 --> 00:04:36.100
And there's no flightOptions,
so we'll put that as null.

69
00:04:36.100 --> 00:04:41.380
And also the search params
are also going to be null.

70
00:04:41.380 --> 00:04:45.540
So we will just have that as null.

71
00:04:45.540 --> 00:04:50.602
And then the second thing we have
to think about is the actions,

72
00:04:50.602 --> 00:04:55.220
so basically,
what can happen in each state.

73
00:04:55.220 --> 00:05:01.760
So we could have, for example,
let's do union over here.

74
00:05:01.760 --> 00:05:03.985
We could first submit, and

75
00:05:03.985 --> 00:05:09.120
this payload is going to be
everything in those search params.

76
00:05:09.120 --> 00:05:11.783
So this is submitting for
the search parameters, so

77
00:05:11.783 --> 00:05:13.426
that we could start the search.

78
00:05:13.426 --> 00:05:15.760
And eventually, hopefully,
we'll get results.

79
00:05:17.200 --> 00:05:22.167
And so the results are going
to include flight options.

80
00:05:22.167 --> 00:05:26.420
And we could also go back, so type back.

81
00:05:26.420 --> 00:05:30.436
And as always,
there is a possibility for an error,

82
00:05:30.436 --> 00:05:34.340
we're going to have type error, too.

83
00:05:34.340 --> 00:05:37.780
And now it's time to actually
build out the reducer.

84
00:05:37.780 --> 00:05:43.176
So the reducer, we have the state, and
it's going to return the BookingState.

85
00:05:43.176 --> 00:05:47.380
And then we're going to be
switching on our actions for now.

86
00:05:48.820 --> 00:05:55.470
So first of all, when we submit, we want
to transition to the searching state.

87
00:05:55.470 --> 00:05:58.410
So this is where we show the loading data.

88
00:05:58.410 --> 00:06:02.700
And we're also going to be saving
the payload of that action,

89
00:06:02.700 --> 00:06:06.670
which is the destination,
departure, arrival, etc.

90
00:06:08.030 --> 00:06:12.510
Now we are, hopefully,
going to eventually get results.

91
00:06:12.510 --> 00:06:16.952
And so that's going to allow us
to change the states too, and

92
00:06:16.952 --> 00:06:22.560
change the flight options to
whatever we get from those results.

93
00:06:22.560 --> 00:06:27.502
Now, right now, we're not using type
states, but this is something that

94
00:06:27.502 --> 00:06:32.064
you could refactor on top of what
you have once you have this working.

95
00:06:32.064 --> 00:06:36.240
Case back, we're going to go
back to that in a minute.

96
00:06:36.240 --> 00:06:40.991
But let's just handle if we have an error,
then we have an error status.

97
00:06:40.991 --> 00:06:47.320
And by default, if we have some sort of
unrecognized action, we return the state.

98
00:06:47.320 --> 00:06:52.803
Now case back, this is interesting
because it really depends on where you're

99
00:06:52.803 --> 00:06:58.120
coming from, which we're actually
going to see in the next exercise.

100
00:06:58.120 --> 00:07:02.286
But only if the status is results,

101
00:07:02.286 --> 00:07:08.040
do we actually want to go
back to the idle state.

102
00:07:08.040 --> 00:07:10.840
Otherwise, we return the state.

103
00:07:10.840 --> 00:07:16.219
So if you have a back button that is
just present on every single screen,

104
00:07:16.219 --> 00:07:19.894
but you don't want it to
do the exact same thing or

105
00:07:19.894 --> 00:07:22.942
go back to the same page on every screen,

106
00:07:22.942 --> 00:07:29.429
then you do have to basically tell it
where to go based on the state.status.

107
00:07:29.429 --> 00:07:34.521
And so that's why, especially in my
XState courses, we talk about going

108
00:07:34.521 --> 00:07:39.550
based on the states first, rather
than on the actual events or actions.

109
00:07:40.740 --> 00:07:42.458
But in this case, it's simple enough.

110
00:07:42.458 --> 00:07:45.060
We could just check, is the state results?

111
00:07:45.060 --> 00:07:49.956
Yes, let's go to idle from the result
state when the user presses

112
00:07:49.956 --> 00:07:52.100
the back button.

113
00:07:52.100 --> 00:07:56.080
Okay, so
now it's time to actually use these.

114
00:07:56.080 --> 00:08:02.574
And we're going to go back to the app
over here, and this is the main one.

115
00:08:02.574 --> 00:08:05.065
We're going to go over here.

116
00:08:05.065 --> 00:08:11.870
And then we're going to use that
reducer and we have state and dispatch.

117
00:08:11.870 --> 00:08:16.712
And so now just like I was talking
about with the Strangler Fig pattern,

118
00:08:16.712 --> 00:08:20.590
you're going to be doing
things side by side.

119
00:08:20.590 --> 00:08:25.047
So for example, when you handle submit,
you want to dispatch.

120
00:08:25.047 --> 00:08:29.870
And you're going to have type submit,
and the formData as payload.

121
00:08:29.870 --> 00:08:34.323
You're going to keep everything else
the same, at least for now, because again,

122
00:08:34.323 --> 00:08:37.600
you're working side by side
with the existing code.

123
00:08:37.600 --> 00:08:40.301
So we're going to, for example, over here,

124
00:08:40.301 --> 00:08:44.757
once we have those mockFlights as
a result, we're going to dispatch that.

125
00:08:44.757 --> 00:08:49.360
And then same thing here, we'll dispatch
an error, when there's an error.

126
00:08:49.360 --> 00:08:53.658
And we don't actually
need this finally block.

127
00:08:53.658 --> 00:08:58.330
And from here,
we could console.log the state.

128
00:08:58.330 --> 00:09:01.320
So, console.log the state.

129
00:09:01.320 --> 00:09:05.800
And this just allows us to see,
are we on the right track?

130
00:09:05.800 --> 00:09:09.720
Is the state as we expect it to be?

131
00:09:11.640 --> 00:09:15.640
But we do need to share
all of that contents too.

132
00:09:15.640 --> 00:09:18.232
So we know that, just to make this easier,

133
00:09:18.232 --> 00:09:22.040
we're going to have to make
a different component.

134
00:09:22.040 --> 00:09:26.190
So I think I called that,
what did I call that?

135
00:09:26.190 --> 00:09:32.510
Booking content, so
we are going to create that context.

136
00:09:32.510 --> 00:09:38.045
So const BookingContext, we create
the context which includes the state and

137
00:09:38.045 --> 00:09:40.269
a way to dispatch that action.

138
00:09:41.470 --> 00:09:45.763
And then we are going to use that
context in our components, but

139
00:09:45.763 --> 00:09:47.710
we need to provide it first.

140
00:09:47.710 --> 00:09:52.138
So we will make a function
BookingProvider with the children,

141
00:09:52.138 --> 00:09:55.070
have the state and the dispatch in there.

142
00:09:55.070 --> 00:09:59.000
And then, pass that in so
that the children can use it.

143
00:10:00.040 --> 00:10:02.792
And so now that way, inside the Page,

144
00:10:02.792 --> 00:10:06.920
we could wrap everything
inside that BookingProvider.

145
00:10:08.520 --> 00:10:14.480
So BookingProvider over here, and then
we could start to use all of this stuff.

146
00:10:14.480 --> 00:10:17.542
So even without changing
anything here just yet, again,

147
00:10:17.542 --> 00:10:19.300
we're making minimal changes.

148
00:10:20.500 --> 00:10:23.841
We could grab, oops, not over there.

149
00:10:23.841 --> 00:10:27.392
But we could grab state, dispatch, and

150
00:10:27.392 --> 00:10:32.100
we could use that existing
BookingContext in there.

151
00:10:33.460 --> 00:10:36.836
And so instead of onSubmit over here,

152
00:10:36.836 --> 00:10:42.012
we could just dispatch,
submit, pass it in the payload.

153
00:10:42.012 --> 00:10:45.630
And then, yeah, forgot that one.

154
00:10:45.630 --> 00:10:47.550
And just do things side by side.

155
00:10:49.790 --> 00:10:53.230
So over here,
we're keeping track of the internal state.

156
00:10:53.230 --> 00:10:57.250
This, hopefully, is something you
recognize from earlier exercises

157
00:10:57.250 --> 00:11:01.078
where it's like, hey, first of all,
all of this data is related.

158
00:11:01.078 --> 00:11:02.740
So we could, potentially,

159
00:11:02.740 --> 00:11:06.030
put it in a single object just
to clean things up a bit.

160
00:11:06.030 --> 00:11:06.719
But also,

161
00:11:06.719 --> 00:11:12.090
we could just read that from the form
data because this is just a simple form.

162
00:11:12.090 --> 00:11:14.403
And so that's an exercise left to you, but

163
00:11:14.403 --> 00:11:17.050
this is something that
you could definitely do.

164
00:11:18.490 --> 00:11:24.057
So now when we try this,
even though we're not quite finished yet,

165
00:11:24.057 --> 00:11:28.841
if I try this out,
I could see that once we search flights,

166
00:11:28.841 --> 00:11:33.254
okay, we're logging that
the status is searching.

167
00:11:33.254 --> 00:11:36.570
And now we see that the status is results.

168
00:11:37.620 --> 00:11:41.065
And we also have our flight
options over here, so

169
00:11:41.065 --> 00:11:44.340
we know that our reducer logic is working.

170
00:11:44.340 --> 00:11:49.865
And so from there, we could go and
start just making sure that everything

171
00:11:49.865 --> 00:11:54.757
works side by side, and
then start to remove the old use dates and

172
00:11:54.757 --> 00:12:00.820
the old logic and replace it with
the centralized reducer pattern.

173
00:12:00.820 --> 00:12:01.940
Yes?

174
00:12:01.940 --> 00:12:05.380
&gt;&gt; Male Student 1: Why wasn't the selected
flight included in the booking state?

175
00:12:09.160 --> 00:12:11.360
&gt;&gt; David Khourshid: You know what, that's
also an exercise left to the reader.

176
00:12:11.360 --> 00:12:14.360
You could definitely include the selected
flight in the booking state.

177
00:12:16.840 --> 00:12:20.520
In this case, it was just omitted.

178
00:12:20.520 --> 00:12:26.360
But if the selected flight is relevant,
which in a realistic app, it is.

179
00:12:26.360 --> 00:12:32.679
If it is relevant to the overall global
states that the useReducer represents,

180
00:12:32.679 --> 00:12:39.480
then it should be in there, and it doesn't
need to be in the component itself.

181
00:12:39.480 --> 00:12:41.080
So that's a very good point.

182
00:12:41.080 --> 00:12:44.979
We could definitely put
selectedFlight over here.

183
00:12:44.979 --> 00:12:50.034
But again, remembering a previous pattern,
we should use an id,

184
00:12:50.034 --> 00:12:56.280
not the actual selected flight, because
we don't want to duplicate that state.

185
00:12:57.640 --> 00:12:59.620
So yeah, you could definitely do that.

186
00:12:59.620 --> 00:13:05.618
And then we could add an action
to select the flights,

187
00:13:05.618 --> 00:13:08.293
and pass it in a string.

188
00:13:08.293 --> 00:13:14.660
And then it's asking for
other stuff over here, yeah.

