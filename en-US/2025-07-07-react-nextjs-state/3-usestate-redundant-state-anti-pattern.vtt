WEBVTT

1
00:00:00.240 --> 00:00:03.840
&gt;&gt; David Khourshid: The other
one is using refs.

2
00:00:03.840 --> 00:00:06.407
So, using refs is actually good

3
00:00:06.407 --> 00:00:10.980
when we have values that don't
mean to cause a RE render.

4
00:00:10.980 --> 00:00:15.443
So you could think of component
states as being two parts states or

5
00:00:15.443 --> 00:00:20.474
values that should cause RE renders
because they are related to the actual

6
00:00:20.474 --> 00:00:25.284
UI that's being rendered, or
states that is not related to renders.

7
00:00:25.284 --> 00:00:31.314
It's sort of internal and
something that you want to keep internal.

8
00:00:31.314 --> 00:00:35.283
So, for example, this timer,
we might have a timer ID and

9
00:00:35.283 --> 00:00:39.748
a way to set the timer id, and
the reason that we have it external.

10
00:00:39.748 --> 00:00:42.880
Because I know some of you
might be saying, okay,

11
00:00:42.880 --> 00:00:47.579
the proper way to do this is put it in
a useEffect and then clear, but we might

12
00:00:47.579 --> 00:00:52.527
have some way of externally stopping
the timer, and so we have to handle that.

13
00:00:52.527 --> 00:00:57.419
So that might be one instance where you
would see the timer ID being external

14
00:00:57.419 --> 00:00:59.058
outside of a useEffect.

15
00:00:59.058 --> 00:01:01.847
But the idea is the same.

16
00:01:01.847 --> 00:01:07.310
We have this timer ID that has nothing
to do with the rendering at all.

17
00:01:07.310 --> 00:01:09.229
So what should we do instead?

18
00:01:09.229 --> 00:01:14.533
We should put it in a ref, and
that way the logic is a lot simpler and

19
00:01:14.533 --> 00:01:20.055
we're not going to trigger a RE
render when we update that timer ID.

20
00:01:20.055 --> 00:01:24.948
Again, this is one of those things that
might not seem like a problem in your code

21
00:01:24.948 --> 00:01:29.714
base, but it does keep your code a lot
simpler and it is just a better pattern.

22
00:01:29.714 --> 00:01:33.985
You want to limit the amount
of RE renders and

23
00:01:33.985 --> 00:01:38.261
you also want to simplify
the actual logic.

24
00:01:38.261 --> 00:01:43.143
In short,
use refs when you want something.

25
00:01:43.143 --> 00:01:47.187
Refs aren't just for
DOM elements or things like that.

26
00:01:47.187 --> 00:01:52.268
They can also be for any sort of value
that does not need to cause a RE render.

27
00:01:52.268 --> 00:01:57.536
And the third one, this might be
trickier to find, but I promise you,

28
00:01:57.536 --> 00:02:02.986
this is something that's really going
to improve the way that you handle

29
00:02:02.986 --> 00:02:08.372
state in your components, and
that is working with redundant states.

30
00:02:08.372 --> 00:02:10.999
So, just like with derived states,

31
00:02:10.999 --> 00:02:14.654
we want a single source of truth for
all of our data.

32
00:02:14.654 --> 00:02:17.538
And so with derived state,
we saw that in like, okay,

33
00:02:17.538 --> 00:02:19.875
a total can be computed
from a list of items.

34
00:02:19.875 --> 00:02:23.243
But like I said,
sometimes it's not so clear.

35
00:02:23.243 --> 00:02:26.844
So, an example with redundant
state that I see a lot,

36
00:02:26.844 --> 00:02:29.733
let's say that we have a hotel selection.

37
00:02:29.733 --> 00:02:33.209
So we have a bunch of hotels
that we're looking at, and

38
00:02:33.209 --> 00:02:36.017
we want the user to be
able to select a hotel.

39
00:02:36.017 --> 00:02:39.968
What we would typically do is say,
okay, they want to select a hotel.

40
00:02:39.968 --> 00:02:41.192
It makes sense in our minds.

41
00:02:41.192 --> 00:02:46.892
We're going to let them choose a hotel and
then set the selected hotel directly.

42
00:02:46.892 --> 00:02:53.470
The problem with this is that
we are creating redundant data.

43
00:02:53.470 --> 00:02:58.464
So we have a selected hotel,
which is an object that's exactly

44
00:02:58.464 --> 00:03:01.965
the same shape inside
the hotels over here.

45
00:03:01.965 --> 00:03:05.981
And instead we could
actually derive that data.

46
00:03:05.981 --> 00:03:09.797
So I'll just show you how this works.

47
00:03:09.797 --> 00:03:12.885
Copy this over.

48
00:03:12.885 --> 00:03:17.549
All right, so
instead of having the selected hotel,

49
00:03:17.549 --> 00:03:22.628
what I want you to do instead
is have the selected hotel id,

50
00:03:22.628 --> 00:03:27.416
because we could derive
the selected hotel from that.

51
00:03:27.416 --> 00:03:34.052
So if we change this to set selected hotel
id now, now this becomes a string instead.

52
00:03:34.052 --> 00:03:36.118
So we're no longer doing that.

53
00:03:36.118 --> 00:03:40.352
And so
now we could just select the hotel id,

54
00:03:40.352 --> 00:03:45.273
which is a string,
change this to the hotel id, and

55
00:03:45.273 --> 00:03:52.041
then we could apply our first pattern,
which is deriving that state.

56
00:03:52.041 --> 00:03:59.285
So const selectedhotel, and then we could
just find the hotel based on its id.

57
00:03:59.285 --> 00:04:05.102
Now, this is actually really useful
because let's say that you're

58
00:04:05.102 --> 00:04:11.838
selecting a hotel, and you also want
these hotel items to dynamically change.

59
00:04:11.838 --> 00:04:13.240
They might change for some reason.

60
00:04:13.240 --> 00:04:17.338
The price might shoot up, or
a date might become unavailable.

61
00:04:17.338 --> 00:04:20.260
You might be fetching this
data from an external source.

62
00:04:20.260 --> 00:04:23.367
So the problem with selecting
the entire hotel is,

63
00:04:23.367 --> 00:04:26.762
is that because it's no longer
derived from that data,

64
00:04:26.762 --> 00:04:30.974
and instead it's redundant data,
you might be showing stale data.

65
00:04:30.974 --> 00:04:35.560
So that's one of the biggest dangers
of selecting the entire object.

66
00:04:35.560 --> 00:04:40.626
And this just makes the logic,
both reading and updating a lot simpler,

67
00:04:40.626 --> 00:04:43.960
because now all you have
to worry about is an id.

