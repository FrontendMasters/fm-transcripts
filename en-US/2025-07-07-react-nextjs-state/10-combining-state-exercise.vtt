WEBVTT

1
00:00:00.400 --> 00:00:01.017
&gt;&gt; David Khourshid: Great.
So

2
00:00:01.017 --> 00:00:05.520
we are going to jump
into the next exercise.

3
00:00:05.520 --> 00:00:09.920
And so what we're going to
be doing is two things.

4
00:00:09.920 --> 00:00:13.600
First, we have a flight booking form.

5
00:00:13.600 --> 00:00:17.520
We're going to be combining
related state variables.

6
00:00:18.640 --> 00:00:22.084
And this is just again
to practice getting used

7
00:00:22.084 --> 00:00:26.700
to combining related state
into one single use state.

8
00:00:26.700 --> 00:00:31.602
And also because there is some loading and
error and success states,

9
00:00:31.602 --> 00:00:37.340
we also want to remove the Boolean
flags and create finite states instead.

10
00:00:37.340 --> 00:00:41.938
And you could start by just having
a simple status as a string enum, or

11
00:00:41.938 --> 00:00:44.633
if you want to again go above and beyond,

12
00:00:44.633 --> 00:00:48.700
you can use discriminated unions and
use those type states.

13
00:00:54.870 --> 00:01:00.702
All right, so let's clean this up
a little bit with some finite states and

14
00:01:00.702 --> 00:01:02.310
combining things.

15
00:01:03.350 --> 00:01:08.230
Another thing that I really want to talk
about too is the strangler fig pattern.

16
00:01:08.230 --> 00:01:12.354
And this is actually going to help us
solve this exercise because likely you

17
00:01:12.354 --> 00:01:16.710
don't want to just delete code and
replace code and then pray that it works.

18
00:01:16.710 --> 00:01:21.524
Instead, you really want to check
side by side if the code that you're

19
00:01:21.524 --> 00:01:26.990
replacing the previous code with
is going to be the correct result.

20
00:01:26.990 --> 00:01:33.427
So we could combine pretty much all of
these, like the destination, departure,

21
00:01:33.427 --> 00:01:39.070
arrival and passengers together and
we could combine it into one.

22
00:01:39.070 --> 00:01:43.240
Let's call this flight data.

23
00:01:43.240 --> 00:01:45.720
And actually it's not going to be that.

24
00:01:45.720 --> 00:01:47.000
Let's turn off this.

25
00:01:48.760 --> 00:01:53.515
So this is going to be the destination,

26
00:01:53.515 --> 00:01:58.680
departure, arrival and passengers.

27
00:01:58.680 --> 00:02:01.640
And so this is going to be
the default states over here.

28
00:02:01.640 --> 00:02:08.040
So we have empty string, empty string,
empty string and passengers.

29
00:02:08.040 --> 00:02:10.320
We'll just default it to 1.

30
00:02:10.320 --> 00:02:14.360
And so again, we are going to
identify these Boolean variables

31
00:02:14.360 --> 00:02:17.120
which are actually mutually exclusive.

32
00:02:17.120 --> 00:02:20.320
And we're going to change this and
put it into a status.

33
00:02:20.320 --> 00:02:21.280
So const.

34
00:02:21.280 --> 00:02:23.680
Status, set status.

35
00:02:23.680 --> 00:02:25.360
We're going to use dates.

36
00:02:25.360 --> 00:02:30.560
And so we could start off with saying
that, you know, maybe it's idle.

37
00:02:30.560 --> 00:02:31.920
We didn't do anything yet.

38
00:02:33.680 --> 00:02:38.415
But we could change this
to a string string type or

39
00:02:38.415 --> 00:02:42.220
what I like to call a string enum.

40
00:02:42.220 --> 00:02:46.140
Or at least it functions like when
it's not literally a string enum.

41
00:02:46.140 --> 00:02:52.380
So idle, submitting error and success.

42
00:02:54.060 --> 00:02:58.693
And so what this allows us to
do is we could actually just

43
00:02:58.693 --> 00:03:03.628
side by side work on a, you know,
work on refactoring this

44
00:03:03.628 --> 00:03:08.820
while just maintaining the same
structure that we have.

45
00:03:08.820 --> 00:03:13.536
So for example, when we set
the destination instead of this,

46
00:03:13.536 --> 00:03:19.540
we could just, we could set the flight
data to again, we're using previous.

47
00:03:21.460 --> 00:03:25.786
So we are going to get
the previous data and

48
00:03:25.786 --> 00:03:29.870
set the destination to E target value.

49
00:03:30.910 --> 00:03:33.790
And so we could do this for
the other ones too.

50
00:03:33.790 --> 00:03:37.390
Just to make sure that everything works.

51
00:03:37.390 --> 00:03:42.750
So I'm going to do this for that.

52
00:03:42.750 --> 00:03:45.230
And again, this is the exact
same thing that we're doing.

53
00:03:45.230 --> 00:03:48.101
We're taking the previous data and

54
00:03:48.101 --> 00:03:53.950
we're just updating that one field
over there and same thing over here.

55
00:03:55.180 --> 00:03:56.620
Another quick trick.

56
00:03:56.620 --> 00:03:58.940
You see that we're doing
parseints over here.

57
00:03:58.940 --> 00:04:03.869
What we could actually do is
E target value as number and

58
00:04:03.869 --> 00:04:07.740
that basically does the exact same thing.

59
00:04:09.100 --> 00:04:11.923
So then when we have
things like issubmitting,

60
00:04:11.923 --> 00:04:13.980
we could do one of two things here.

61
00:04:13.980 --> 00:04:19.090
We could either keep the same variable or

62
00:04:19.090 --> 00:04:25.111
we could have a more
explicit like flight data.

63
00:04:25.111 --> 00:04:26.230
We don't have the status.

64
00:04:26.230 --> 00:04:31.094
So we could say status issubmitting or
like we learned about in

65
00:04:31.094 --> 00:04:36.143
our first exercise, and
this is actually a really good way to not

66
00:04:36.143 --> 00:04:42.030
change too much code but
still do the refactor that you want to do.

67
00:04:42.030 --> 00:04:48.660
We could keep that issubmitting and
instead we could derive that data.

68
00:04:48.660 --> 00:04:52.419
So we have our status over here.

69
00:04:52.419 --> 00:04:59.140
We could say const isSubmitting is
basically if the status is submitting.

70
00:04:59.140 --> 00:05:03.280
So these boolean flags become
something that's derived rather than

71
00:05:03.280 --> 00:05:05.860
something that becomes a source of truth.

72
00:05:05.860 --> 00:05:10.477
So again, that first exercise is
really showing us how we could

73
00:05:10.477 --> 00:05:13.710
improve the way that
we model these things.

74
00:05:14.910 --> 00:05:21.470
So now if I get rid of this, we see
a bunch of variables together over here.

75
00:05:21.470 --> 00:05:25.989
And so instead of all of that, we could
just set the status to submitting and

76
00:05:25.989 --> 00:05:28.110
then get rid of the other ones.

77
00:05:28.110 --> 00:05:31.710
And then we'll set
the selected flights to null.

78
00:05:31.710 --> 00:05:36.410
This is also a good indication that
if you want to, you could use type

79
00:05:36.410 --> 00:05:41.290
states to really combine that into
a single cohesive state variable.

80
00:05:42.330 --> 00:05:46.810
So instead of set success true,
we could set the status to success.

81
00:05:46.810 --> 00:05:50.250
And then over here we could
set the status to an error.

82
00:05:51.290 --> 00:05:55.770
So now you're going to see that again,
lots of red here.

83
00:05:55.770 --> 00:05:57.770
We're no longer using this.

84
00:05:57.770 --> 00:06:01.530
So we could do things
like derive more data.

85
00:06:01.530 --> 00:06:06.887
So we could say destination
is flightdata.des Station and

86
00:06:06.887 --> 00:06:14.340
in fact we could just pull out departure,
arrival and passengers from here.

87
00:06:14.340 --> 00:06:18.663
And that way we have limited
changes to our code, but

88
00:06:18.663 --> 00:06:23.220
we can reduce the number
of use states that we have.

89
00:06:23.220 --> 00:06:26.820
And we could have all related
data in a single object.

90
00:06:27.940 --> 00:06:32.868
So just going through this again,
we no longer need things like set

91
00:06:32.868 --> 00:06:38.180
iserror true because now we're
setting the status to an error.

92
00:06:38.180 --> 00:06:41.780
And so same thing over here,
iserrorn is success.

93
00:06:41.780 --> 00:06:46.233
You could either change that to
checking the actual status or

94
00:06:46.233 --> 00:06:48.420
you could derive that data.

95
00:06:48.420 --> 00:06:53.029
So we could say const iserror is
if status is equal to error or

96
00:06:53.029 --> 00:06:57.364
const issuccess is equal to if
the status is a success and

97
00:06:57.364 --> 00:07:01.850
then everything should
work the exact same.

98
00:07:01.850 --> 00:07:06.938
So again, being able to look at
your application and understand

99
00:07:06.938 --> 00:07:13.049
the different flows that it could be in
is really going to help you out here.

100
00:07:13.049 --> 00:07:18.166
So in this case we know that
this can be considered some

101
00:07:18.166 --> 00:07:22.942
sort of an idle state and
you might choose a date and

102
00:07:22.942 --> 00:07:30.500
then we have this loading state over
here which we could visually verify.

103
00:07:30.500 --> 00:07:34.020
Then we have the state over here
where we successfully have data.

104
00:07:34.020 --> 00:07:37.420
We could select a flight and
we could see that booking summary.

105
00:07:37.420 --> 00:07:41.060
And if we wanted to,
this can be a different state on its own.

106
00:07:42.500 --> 00:07:46.660
That is actually going to be the case
when we go into future exercises.

107
00:07:48.670 --> 00:07:51.780
So yeah,
any questions about this exercise and

108
00:07:51.780 --> 00:07:55.292
how we refactored everything
&gt;&gt; Speaker 2: not directly related to

109
00:07:55.292 --> 00:07:56.540
the exercise, but

110
00:07:56.540 --> 00:08:02.000
there was a question about your opinion on
using arrow functions within a handler,

111
00:08:02.000 --> 00:08:07.230
because isn't passing the function
directly to the handler better approach?

112
00:08:09.386 --> 00:08:14.982
&gt;&gt; David Khourshid: Okay, so yeah,
the question was about, for example,

113
00:08:14.982 --> 00:08:19.520
handleFlightSelect if
you could do it here.

114
00:08:21.920 --> 00:08:23.840
So it sort of doesn't matter to me.

115
00:08:23.840 --> 00:08:25.560
It is dependent on your team though.

116
00:08:25.560 --> 00:08:29.056
So some of your team might like to put
all of their handlers up in front and

117
00:08:29.056 --> 00:08:31.760
I think that that's a very
good way to see everything.

118
00:08:33.520 --> 00:08:38.195
Just like that principle we talked about
where we're separating the framework

119
00:08:38.195 --> 00:08:40.020
from the actual logic.

120
00:08:40.020 --> 00:08:42.794
And so by having the handlers up in here,

121
00:08:42.794 --> 00:08:47.860
then you see all of the logic together and
then all of the UI below that.

122
00:08:47.860 --> 00:08:52.057
So it is pretty nice to do that
in terms of arrows or functions,

123
00:08:52.057 --> 00:08:54.500
that doesn't matter to me either.

124
00:08:56.420 --> 00:09:01.911
But yeah, another thing that some
people could do is instead of handle

125
00:09:01.911 --> 00:09:08.110
Flight select, they might just set
selected flights directly over here.

126
00:09:08.110 --> 00:09:11.150
And I honestly think that that's fine too.

127
00:09:11.150 --> 00:09:15.950
If you find yourself repeating that a lot,
that's where a handler might be useful.

128
00:09:15.950 --> 00:09:19.046
I think a lot of React
developers do go overboard and

129
00:09:19.046 --> 00:09:22.590
they try to memoize that by
putting it in a use callback.

130
00:09:22.590 --> 00:09:25.491
And honestly, if you don't need it,

131
00:09:25.491 --> 00:09:29.310
then it doesn't really
matter if you do it or not.

132
00:09:30.750 --> 00:09:34.310
I like to only memoize if I
notice that there's a problem.

133
00:09:37.510 --> 00:09:40.534
&gt;&gt; Speaker 3: Isn't there some kind of
performance overhead associated with

134
00:09:40.534 --> 00:09:42.150
UseMemo and Use Callback too?

135
00:09:42.150 --> 00:09:43.788
So if you're using it
when you don't need to,

136
00:09:43.788 --> 00:09:45.670
it can actually make things perform worse.

137
00:09:45.670 --> 00:09:46.710
&gt;&gt; David Khourshid: Exactly, yeah.

138
00:09:47.990 --> 00:09:50.510
This is something that you
learn in computer science.

139
00:09:50.510 --> 00:09:52.400
I only took a couple of classes, but

140
00:09:52.400 --> 00:09:56.950
when you're doing optimizations such
as caching, memoization, et cetera.

141
00:09:56.950 --> 00:09:59.590
It's not that you're making
everything magically faster.

142
00:09:59.590 --> 00:10:06.090
You, you're trading performance for
memory, so there are trade offs there.

143
00:10:06.090 --> 00:10:11.336
And so if you try to use Memo everywhere,
then the internal memory used by the React

144
00:10:11.336 --> 00:10:16.430
app will, you know, it might balloon,
it might slow things down, honestly,

145
00:10:16.430 --> 00:10:21.754
like everything's a micro optimization
until you actually run into the issues and

146
00:10:21.754 --> 00:10:26.924
see that, okay, this is slow, but if I
do this, then it's definitely visually

147
00:10:26.924 --> 00:10:32.700
faster for the user, especially on a slow
connection or low powered computer.

148
00:10:32.700 --> 00:10:38.300
So yeah, I like to be pragmatic about
performance basically only when necessary.

149
00:10:39.900 --> 00:10:45.525
&gt;&gt; Speaker 4: I know React19's goal is to
release the compiler in its full state and

150
00:10:45.525 --> 00:10:48.996
so therefore they're attempting to try and

151
00:10:48.996 --> 00:10:52.860
minimize the need for
UseMemo and Use Callback.

152
00:10:53.920 --> 00:10:59.200
What's your take or
opinion on that shift in their paradigm?

153
00:10:59.200 --> 00:11:02.796
&gt;&gt; David Khourshid: I think that,
yeah, the React compiler is great and

154
00:11:02.796 --> 00:11:07.374
this is more reason to use idiomatic
React patterns and not try to do

155
00:11:07.374 --> 00:11:12.480
anything crazy or try to over memoize or
do callbacks or things like that.

156
00:11:14.640 --> 00:11:17.440
I will say that in larger code bases too.

157
00:11:17.440 --> 00:11:22.318
First of all, with React Compiler there is
that expectation that you're using React

158
00:11:22.318 --> 00:11:24.020
and React hooks as designed.

159
00:11:24.020 --> 00:11:26.766
However, I have seen in many code bases,
and

160
00:11:26.766 --> 00:11:31.465
it's sort of inevitable with larger
code bases that people will have a long,

161
00:11:31.465 --> 00:11:36.167
long dependency array with like five or
seven different items inside and they

162
00:11:36.167 --> 00:11:40.868
will be missing maybe one or two different
variables that should be in there,

163
00:11:40.868 --> 00:11:45.642
but they'll be missing them on purpose
because if you add those variables in,

164
00:11:45.642 --> 00:11:50.418
then the useeffect might run multiple
times or the usememo will unnecessarily

165
00:11:50.418 --> 00:11:55.760
call itself again and maybe have a side
effect in the usememo, who knows.

166
00:11:55.760 --> 00:11:59.213
But the idea is that they will
disable the eslint rule for

167
00:11:59.213 --> 00:12:04.080
that dependency array because it's one
of those it works, don't touch it.

168
00:12:04.080 --> 00:12:07.625
And if you complete the dependency
array with everything required,

169
00:12:07.625 --> 00:12:09.520
then it's going to break.

170
00:12:09.520 --> 00:12:13.371
And so there's so much of this in
existing React applications and

171
00:12:13.371 --> 00:12:17.170
that actually doesn't work well
with the React's compiler.

172
00:12:17.170 --> 00:12:22.542
So that's why I say try to avoid having
too many things in dependency arrays or

173
00:12:22.542 --> 00:12:27.570
even using hooks that require
the use of dependency arrays.

174
00:12:27.570 --> 00:12:31.640
It's going to make your life simpler and
it's going to make React compiler work

175
00:12:31.640 --> 00:12:35.170
a lot better because you're just
doing things the most natural way.

