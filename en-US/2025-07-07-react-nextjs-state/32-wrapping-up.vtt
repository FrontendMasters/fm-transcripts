WEBVTT

1
00:00:00.240 --> 00:00:01.220
&gt;&gt; David Khourshid: All right, well,

2
00:00:01.220 --> 00:00:04.662
I hope that you all enjoyed this
Frontend Masters state workshop.

3
00:00:04.662 --> 00:00:09.938
And learned a lot of principles,
techniques and patterns that you could use

4
00:00:09.938 --> 00:00:15.956
in not only your React applications, but
basically any other front end application,

5
00:00:15.956 --> 00:00:20.173
or even backend,
to improve the way that you manage states.

6
00:00:20.173 --> 00:00:24.725
And to improve the way that you
make your code understandable and

7
00:00:24.725 --> 00:00:28.780
easy to maintain and update,
especially as it scales.

8
00:00:28.780 --> 00:00:34.780
Again, scale isn't about lines of code or
millions of users or things like that.

9
00:00:34.780 --> 00:00:39.204
Instead, scale is about how
quickly can you iterate on

10
00:00:39.204 --> 00:00:43.340
your code base as the number
of features increase or

11
00:00:43.340 --> 00:00:48.149
get more complex, and
how maintainable is your code base,

12
00:00:48.149 --> 00:00:51.612
especially as you add
more team members and

13
00:00:51.612 --> 00:00:57.010
you introduce new tools and
new techniques into your code.

14
00:00:57.010 --> 00:00:58.530
So we learned a lot today.

15
00:00:58.530 --> 00:01:00.501
We went through anti patterns,

16
00:01:00.501 --> 00:01:04.610
just common things that you could
avoid in React applications.

17
00:01:04.610 --> 00:01:09.116
We talked about principles like diagrams
and how things like entity relationship

18
00:01:09.116 --> 00:01:13.101
diagrams, sequence diagrams and
state machines are not only useful for

19
00:01:13.101 --> 00:01:18.050
databases or server side applications,
but also for front end applications.

20
00:01:18.050 --> 00:01:23.254
We did a lot of work on refactoring
things into using finite ST states and

21
00:01:23.254 --> 00:01:28.026
reducers and we talked about how
we could reduce the amount of code

22
00:01:28.026 --> 00:01:32.710
that we write by just using the native
form data API with forms and

23
00:01:32.710 --> 00:01:37.222
using server actions with React
19 using the URL for state so

24
00:01:37.222 --> 00:01:42.602
that we could persist the state, and
also using third party data fetching

25
00:01:42.602 --> 00:01:47.548
libraries like Tanstack Query or
React Query so that we could really

26
00:01:47.548 --> 00:01:53.520
simplify all of those use states and
use effects that we used before.

27
00:01:53.520 --> 00:01:58.448
We talked about some painful things
like the chaining cascading effects that

28
00:01:58.448 --> 00:02:03.147
caused so many problems and how we
could use event driven architecture and

29
00:02:03.147 --> 00:02:07.520
reducers to really reduce
the number of effects that we use.

30
00:02:07.520 --> 00:02:12.368
And we talked about other useful
things such as using third party state

31
00:02:12.368 --> 00:02:15.821
management libraries,
normalizing your data so

32
00:02:15.821 --> 00:02:20.422
that it is easier to work with
the Use Sync external store hook, and

33
00:02:20.422 --> 00:02:24.470
of course testing your application
logic at the very end.

34
00:02:24.470 --> 00:02:28.460
So I hope that you all got
a lot from this workshop.

35
00:02:28.460 --> 00:02:30.940
Remember, nothing in here is dogmatic.

36
00:02:30.940 --> 00:02:34.700
You don't have to refactor your
entire applications after this.

37
00:02:34.700 --> 00:02:39.281
Instead I want all of these to
be tools in your toolbox so

38
00:02:39.281 --> 00:02:44.360
that you could simplify your state or
make it easier to create

39
00:02:44.360 --> 00:02:50.160
new features and
just detect problems before they happen.

40
00:02:50.160 --> 00:02:51.680
So thank you all very much.

