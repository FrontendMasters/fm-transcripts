WEBVTT

1
00:00:00.330 --> 00:00:05.744
&gt;&gt; Learner  1: I've often used the pattern
of steps, like the step pattern,

2
00:00:05.744 --> 00:00:11.784
to do something similar where I have
step one, step two, step three.

3
00:00:11.784 --> 00:00:16.451
And I would say the solution
that we ended up

4
00:00:16.451 --> 00:00:20.988
using was not nearly
as elegant to do those

5
00:00:20.988 --> 00:00:25.785
step by step processes,
but it made use of,

6
00:00:25.785 --> 00:00:31.766
I think material has like
a stepper function, right.

7
00:00:31.766 --> 00:00:36.736
And so trying to incorporate some of that,
I feel like this would

8
00:00:36.736 --> 00:00:42.060
have been a better approach
versus what we ended up doing.

9
00:00:42.060 --> 00:00:43.755
&gt;&gt; David Khourshid: Yeah,
so that's actually a,

10
00:00:43.755 --> 00:00:46.460
that's a really good thing to call out.

11
00:00:46.460 --> 00:00:53.740
So I'm actually going to make a mini,
mini demo or just like some demo code.

12
00:00:55.881 --> 00:00:58.450
Wait, we already have something here.

13
00:00:58.450 --> 00:01:00.850
But actually this is still a good point.

14
00:01:00.850 --> 00:01:05.010
So let's say that we have
something that's multi step.

15
00:01:05.010 --> 00:01:07.130
In fact, let's add another view here.

16
00:01:07.130 --> 00:01:12.370
So let's just do function confirm view.

17
00:01:12.370 --> 00:01:17.934
And so this is something where basically
you can confirm your selection or

18
00:01:17.934 --> 00:01:19.650
something like that.

19
00:01:21.520 --> 00:01:25.620
In fact, we could just unclick
dispatch select flights and

20
00:01:25.620 --> 00:01:27.760
we have to add that real quick.

21
00:01:28.960 --> 00:01:31.440
Let's do that over here.

22
00:01:33.440 --> 00:01:39.138
So type select flight and
then flight ID string and

23
00:01:39.138 --> 00:01:45.120
then we're just going to
add that to the states too.

24
00:01:45.120 --> 00:01:46.840
So we have our flow states.

25
00:01:46.840 --> 00:01:52.312
So we have our selected flight stringer
null and then we could also go

26
00:01:52.312 --> 00:02:00.040
to the confirmed states with the selected
flight definitely selected thanks to that.

27
00:02:00.040 --> 00:02:05.271
So a lot of times, and
I'm not going to fully code this out,

28
00:02:05.271 --> 00:02:09.562
but we might do something where,
like you said,

29
00:02:09.562 --> 00:02:15.820
we might have steps where it's,
let's say const steps equals.

30
00:02:15.820 --> 00:02:19.820
We might first have search and
then loading.

31
00:02:19.820 --> 00:02:22.569
If you want to put that in steps
sometimes like actually it

32
00:02:22.569 --> 00:02:25.889
doesn't really make sense to do that,
but it does go to show you why,

33
00:02:25.889 --> 00:02:28.939
you know, there's limitations
to this approach anyway.

34
00:02:28.939 --> 00:02:31.500
And then results and then confirm.

35
00:02:33.020 --> 00:02:38.297
So what's cool about this is it represents
a very simple flow where it's like,

36
00:02:38.297 --> 00:02:43.050
okay, the steps are clear,
we have step one, step two and step three.

37
00:02:43.050 --> 00:02:46.690
In fact,
I'm gonna bring this out here to show you.

38
00:02:46.690 --> 00:02:49.800
And so we would have something like.

39
00:02:49.800 --> 00:02:51.410
Thanks cursor.

40
00:02:51.410 --> 00:02:56.970
We would have something like the current
step is whatever the current step ID is.

41
00:02:56.970 --> 00:03:01.253
Again, we could use what we've learned and

42
00:03:01.253 --> 00:03:08.200
say step index set step index equals
useState0 grab that from react and

43
00:03:08.200 --> 00:03:12.966
then we could derive
the current step from that.

44
00:03:12.966 --> 00:03:18.312
So const currenStep = steps index.

45
00:03:18.312 --> 00:03:23.025
The problem with this though is you
basically only have one possible thing you

46
00:03:23.025 --> 00:03:25.600
could do, which is go to the next one.

47
00:03:25.600 --> 00:03:28.769
So we could say function next step and

48
00:03:28.769 --> 00:03:33.010
Then we set the step
index to the index +1.

49
00:03:33.010 --> 00:03:37.890
You do have to check like am I going to go
beyond that array or something like that.

50
00:03:37.890 --> 00:03:39.658
And if you do want to get fancy,

51
00:03:39.658 --> 00:03:44.290
you have previous step two where you could
set the step index to the previous one.

52
00:03:46.610 --> 00:03:50.050
So there's a couple of
issues with this approach.

53
00:03:50.050 --> 00:03:52.650
First of all it's very linear.

54
00:03:52.650 --> 00:03:55.109
It assumes that you're going 1, 2, 3 or

55
00:03:55.109 --> 00:03:58.570
if you want to do a doubly linked
list you would go 3, 2, 1.

56
00:03:58.570 --> 00:04:00.520
So you could sort of go backwards.

57
00:04:00.520 --> 00:04:02.835
But there might be some steps where for

58
00:04:02.835 --> 00:04:06.280
example incomplete you
might not want to go back.

59
00:04:06.280 --> 00:04:11.354
So now you have to add special logic
where it's like if step index is not

60
00:04:11.354 --> 00:04:16.686
equal to three in this case, then
return because you don't really want to

61
00:04:16.686 --> 00:04:22.200
go back from complete but then that's
disconnected from the actual logic.

62
00:04:23.400 --> 00:04:28.355
So what I like to do instead is make
this just a little bit more explicit.

63
00:04:28.355 --> 00:04:33.099
And this comes from my experience
working with state machines and

64
00:04:33.099 --> 00:04:37.928
multi step forms where steps can
branch out, steps can loop back,

65
00:04:37.928 --> 00:04:41.700
etc., and
that is to make a directed graph.

66
00:04:41.700 --> 00:04:46.708
So instead of this steps we could
have a step graph by the way,

67
00:04:46.708 --> 00:04:49.060
no libraries needed here.

68
00:04:49.060 --> 00:04:52.500
You could do this just
with normal JavaScript.

69
00:04:52.500 --> 00:04:58.580
And so we could say,
in fact we could keep it super simple.

70
00:04:58.580 --> 00:05:04.591
We could say that we have search and then
on next we go loading same thing here,

71
00:05:04.591 --> 00:05:09.505
result next confirm confirm next
complete and then complete.

72
00:05:09.505 --> 00:05:12.538
We don't have anything from there but

73
00:05:12.538 --> 00:05:17.369
on the loading we could go to search or
we could go from results

74
00:05:17.369 --> 00:05:22.038
to see this is another instance
of let's say we have this.

75
00:05:22.038 --> 00:05:26.170
We wouldn't want to go back
to the loading screen.

76
00:05:26.170 --> 00:05:29.317
So from here we would
go back to search and

77
00:05:29.317 --> 00:05:34.090
then we could go back to results
from the confirm screen.

78
00:05:34.090 --> 00:05:37.818
So now we have this
graph representation and

79
00:05:37.818 --> 00:05:43.130
then our logic actually in my
opinion becomes a lot simpler.

80
00:05:43.130 --> 00:05:48.325
So next step we have,
instead of this current step

81
00:05:48.325 --> 00:05:53.519
we would have a const
current step set current step

82
00:05:53.519 --> 00:05:59.332
equals useState search and
then the next step is going to

83
00:05:59.332 --> 00:06:04.650
be whatever the current step
is next if it exists and

84
00:06:04.650 --> 00:06:10.480
if it doesn't exist,
just stay with the current step.

85
00:06:11.840 --> 00:06:16.810
So typescript's yelling at me,
it's totally fine, this is still correct.

86
00:06:16.810 --> 00:06:23.610
And then the previous step we would just
go based on what the previous one is.

87
00:06:23.610 --> 00:06:31.210
So just to illustrate that this graph
isn't exactly, you know, it's not linear.

88
00:06:31.210 --> 00:06:35.801
Even something as simple as this,
I'm going to take this and

89
00:06:35.801 --> 00:06:38.890
ask make a state diagram of this.

90
00:06:38.890 --> 00:06:40.410
It's probably Going to use Mermaid.

91
00:06:40.410 --> 00:06:41.250
But that's cool.

92
00:06:41.250 --> 00:06:42.650
We could visualize Mermaid.

93
00:06:44.000 --> 00:06:48.562
It's thinking for a bit or
it just does it via.

94
00:06:48.562 --> 00:06:51.615
Wow,
&gt;&gt; Learners: [LAUGH] This is cool.

95
00:06:51.615 --> 00:06:52.849
&gt;&gt; Learner 2: Excellent.

96
00:06:52.849 --> 00:06:58.235
&gt;&gt; David Khourshid: Yeah, okay, so
you can see it's not entirely linear or

97
00:06:58.235 --> 00:07:01.451
pretty, but mostly not linear.

98
00:07:01.451 --> 00:07:04.720
So we have this happy path flow here.

99
00:07:04.720 --> 00:07:07.280
We also see that we could
go back from the results.

100
00:07:07.280 --> 00:07:12.778
I'm assuming that it's meant to go back
here to search and same thing with confirm

101
00:07:12.778 --> 00:07:18.130
which it's supposed to go back here to
the results might be a formatting thing.

102
00:07:20.370 --> 00:07:25.250
Let's ask it to do it as Mermaid and maybe
we'll have a better visualization of it.

103
00:07:27.810 --> 00:07:33.570
So what we're going to receive
is probably something better.

104
00:07:33.570 --> 00:07:39.620
So let's copy this and
go to see Mermaid.live.

105
00:07:40.900 --> 00:07:42.580
Paste it in here.

106
00:07:42.580 --> 00:07:43.940
Okay, this is better.

107
00:07:43.940 --> 00:07:47.380
So we have search loading.

108
00:07:47.380 --> 00:07:49.620
We could go back from here.

109
00:07:49.620 --> 00:07:50.340
Results.

110
00:07:50.340 --> 00:07:54.342
Once we receive the results back, this is
one instance where we're not going back

111
00:07:54.342 --> 00:07:57.220
to loading,
we're actually going back to search.

112
00:07:57.220 --> 00:07:59.780
And then we have this back and
forth loop here.

113
00:07:59.780 --> 00:08:02.630
You could go next to confirm and
back to results or

114
00:08:02.630 --> 00:08:05.500
you could go to complete
where there is no back.

115
00:08:05.500 --> 00:08:12.207
So this goes to show you that even
simple flows are not always linear.

116
00:08:12.207 --> 00:08:16.374
An array of steps, I've done that
before too, plenty of times.

117
00:08:16.374 --> 00:08:21.820
But it just doesn't scale once things
get a little bit more complicated.

118
00:08:21.820 --> 00:08:22.860
&gt;&gt; Learner  1: Yeah, absolutely.

119
00:08:22.860 --> 00:08:26.620
Yeah, because we ran into situations
too where some steps were optional.

120
00:08:28.230 --> 00:08:29.230
&gt;&gt; David Khourshid: Yeah, optional steps.

121
00:08:29.230 --> 00:08:30.390
That's a big one.

122
00:08:30.390 --> 00:08:31.110
&gt;&gt; Learner  1: Yes.

123
00:08:31.110 --> 00:08:31.828
&gt;&gt; David Khourshid: Yeah.

124
00:08:31.828 --> 00:08:37.704
&gt;&gt; Learner  1: And so then trying to
create something that would essentially

125
00:08:37.704 --> 00:08:44.148
from a basic like quick glance looks
linear is just totally broken.

126
00:08:44.148 --> 00:08:49.990
Once you attempt to put too many,
what would you say conditionals in it.

127
00:08:49.990 --> 00:08:51.910
Because we did exactly the.

128
00:08:51.910 --> 00:08:56.084
If you're on step three and
you're clicking to the next one and

129
00:08:56.084 --> 00:08:58.940
then all of a sudden you need to exit out.

130
00:08:58.940 --> 00:09:04.060
We've had to do conditionals
within the stepping.

131
00:09:04.060 --> 00:09:08.654
So I appreciate that you took the time
to at least show how you can graph it

132
00:09:08.654 --> 00:09:13.900
versus having just a standard array
of keeping all your steps together.

133
00:09:13.900 --> 00:09:15.220
&gt;&gt; David Khourshid: Yeah, absolutely.

134
00:09:15.220 --> 00:09:18.652
And if you want to see a visual,
not a visual like this, but

135
00:09:18.652 --> 00:09:21.735
like a way of how code
transforms from that step based

136
00:09:21.735 --> 00:09:24.910
approach to more of
a grasp based approach.

137
00:09:24.910 --> 00:09:26.510
I kid you not, but go to.

138
00:09:26.510 --> 00:09:27.670
This is newly released.

139
00:09:27.670 --> 00:09:30.030
Go to Jules.Google.

140
00:09:30.030 --> 00:09:32.590
And it's sort of my fault that
they did this because I made this.

141
00:09:32.590 --> 00:09:34.110
Think about it on Twitter.

142
00:09:34.110 --> 00:09:37.064
But they basically have this.

143
00:09:37.064 --> 00:09:38.841
Don't know if you could see it that well.

144
00:09:38.841 --> 00:09:42.617
It says change user onboarding to
use a state machine for steps.

145
00:09:42.617 --> 00:09:45.819
So it started with that
array based step thing.

146
00:09:45.819 --> 00:09:51.177
And so it's refactoring it to use
that basic state machine set up that,

147
00:09:51.177 --> 00:09:52.617
that I showed you.

148
00:09:52.617 --> 00:09:57.887
And so you see we have the previous
logic where next step is based

149
00:09:57.887 --> 00:10:02.957
on the index in the array and
it's showing that a potentially

150
00:10:02.957 --> 00:10:08.030
better way to do that,
that scales once you have more complex

151
00:10:08.030 --> 00:10:12.717
flows is to instead do it just
by doing an object lookup.

152
00:10:12.717 --> 00:10:15.674
So you could see how it changes it here.

153
00:10:15.674 --> 00:10:22.105
And in my opinion the logic becomes
a lot simpler once you do it that way.

154
00:10:22.105 --> 00:10:26.050
That was a little bit painful and
it was only two or three steps.

155
00:10:26.050 --> 00:10:31.539
So you could just imagine how like
with bigger applications it definitely

156
00:10:31.539 --> 00:10:36.330
gets messier when you have bigger
flows and more complex flows.

157
00:10:36.330 --> 00:10:44.290
And that's exactly what we have when we
go to the, when we go to the libraries.

158
00:10:44.290 --> 00:10:46.600
So libraries exercise.

159
00:10:46.600 --> 00:10:47.800
So let me just pull this up.

160
00:10:48.920 --> 00:10:50.702
Library,
&gt;&gt; Learner  1: One last comment on-

161
00:10:50.702 --> 00:10:51.683
&gt;&gt; David Khourshid: Yeah, absolutely.

162
00:10:51.683 --> 00:10:53.560
&gt;&gt; Learner  1: The page before we move on.

163
00:10:53.560 --> 00:10:58.064
Also too, I noticed that we're
still utilizing the on submit

164
00:10:58.064 --> 00:11:02.840
within the booking form and
we could swap out to using the action.

165
00:11:03.960 --> 00:11:04.880
&gt;&gt; David Khourshid: Exactly, yeah.

166
00:11:04.880 --> 00:11:08.280
&gt;&gt; Learner  1: So that we could even
reduce the code down substantially more.

167
00:11:09.400 --> 00:11:13.160
&gt;&gt; David Khourshid: Yeah, to be honest,
that exercise encompasses a lot of things.

168
00:11:13.160 --> 00:11:16.733
I think there's even something there where
you can use derived state instead of,

169
00:11:16.733 --> 00:11:19.000
you know,
the use effect that's going on there.

170
00:11:19.000 --> 00:11:23.872
But yeah, there's a lot of things in that
where I'm glad that you're recognizing

171
00:11:23.872 --> 00:11:27.630
the pattern so that you could see,
hey, I could refactor this,

172
00:11:27.630 --> 00:11:32.040
I could simplify this or potentially
prevent bugs in this part of the code.

