WEBVTT

1
00:00:00.320 --> 00:00:04.072
&gt;&gt; David Khourshid: Hopefully if you learn
anything new and Cursor hasn't learned

2
00:00:04.072 --> 00:00:08.640
this yet, but let's say that we want
to grab dispatch from the context.

3
00:00:08.640 --> 00:00:13.280
You actually don't need to use context,
you could just use.

4
00:00:13.280 --> 00:00:15.049
We have a simple hook called use and

5
00:00:15.049 --> 00:00:18.400
then you could pass
the context directly in there.

6
00:00:18.400 --> 00:00:23.540
This is one of those small patterns
that's definitely going to be

7
00:00:23.540 --> 00:00:28.585
the modern way forward for
React because not only with context or

8
00:00:28.585 --> 00:00:33.090
with some cached state,
there's a lot of plans for use.

9
00:00:33.090 --> 00:00:37.570
But another thing that's coming
up is the ability to use a store.

10
00:00:39.010 --> 00:00:41.484
Again, that's in the future for react, but

11
00:00:41.484 --> 00:00:43.970
it's a pattern that I
want you to get used to.

12
00:00:43.970 --> 00:00:47.410
You don't need to use context,
you could just use use.

13
00:00:47.410 --> 00:00:50.370
Awkward to say that, but you get the idea.

14
00:00:50.370 --> 00:00:52.440
So now on click.

15
00:00:52.440 --> 00:00:55.400
We could actually dispatch that search.

16
00:00:56.600 --> 00:00:59.880
So this is going to start the search.

17
00:00:59.880 --> 00:01:03.952
The state is going to transition to
a loading state in which we show this

18
00:01:03.952 --> 00:01:07.080
loading view and
then we will see this results view.

19
00:01:07.080 --> 00:01:09.400
And then we also need dispatch over here.

20
00:01:09.400 --> 00:01:13.400
So we're going to grab that
from the context as well.

21
00:01:13.400 --> 00:01:18.740
And then we're going to just
have the ability to go back.

22
00:01:18.740 --> 00:01:20.900
But we also need to grab
the states here too.

23
00:01:22.660 --> 00:01:26.669
And here's where it gets
a little bit interesting

24
00:01:26.669 --> 00:01:29.540
because we have state results map.

25
00:01:31.460 --> 00:01:34.925
And so here's the first thing we know, or

26
00:01:34.925 --> 00:01:40.180
at least we expect reasonably
that results should exist.

27
00:01:40.180 --> 00:01:42.900
But it says here that
it might be undefined.

28
00:01:42.900 --> 00:01:46.480
So this is where, you know,
we might want to use type states.

29
00:01:46.480 --> 00:01:51.186
And so what we could do is
say if the status is results,

30
00:01:51.186 --> 00:01:54.960
then the results are definitely defined.

31
00:01:56.000 --> 00:02:00.720
So I'll just leave that over there.

32
00:02:00.720 --> 00:02:03.760
And so
we could split this up even further.

33
00:02:03.760 --> 00:02:07.600
We could say that, you know,
we have a loading status and

34
00:02:07.600 --> 00:02:10.240
then we have a search status over here.

35
00:02:11.980 --> 00:02:16.456
And just like we did before,
we could combine this so

36
00:02:16.456 --> 00:02:21.544
that we have our common properties
such as results stringer

37
00:02:21.544 --> 00:02:26.140
undefined and
then we have our discriminated union.

38
00:02:28.780 --> 00:02:32.830
So you see over here with our received
results we already get a type warning

39
00:02:32.830 --> 00:02:37.336
because it's like, hey, wait a minute,
you're going to the results page, but

40
00:02:37.336 --> 00:02:40.510
you're not actually adding any results.

41
00:02:40.510 --> 00:02:46.138
Again, this is one of the great benefits
of using these discriminated unions,

42
00:02:46.138 --> 00:02:49.582
AKA type states,
is that it will tell you, hey,

43
00:02:49.582 --> 00:02:54.430
you forgot to do something that
adds the results to the state.

44
00:02:54.430 --> 00:02:55.710
So now we could add that.

45
00:02:56.750 --> 00:02:59.390
And this is just going
to be action results.

46
00:03:00.990 --> 00:03:04.924
So now we could go back up
here to our results view and

47
00:03:04.924 --> 00:03:07.220
potentially get rid of that.

48
00:03:07.220 --> 00:03:09.220
But it's still erroring out.

49
00:03:09.220 --> 00:03:12.839
And the reason it's doing
that is because it assumes

50
00:03:12.839 --> 00:03:18.420
that this is any one of the three
possible states that we could be in.

51
00:03:18.420 --> 00:03:22.789
So what we could do is we could
say if there are no results,

52
00:03:22.789 --> 00:03:27.060
we could return null and
hopefully we never get here.

53
00:03:27.060 --> 00:03:29.460
But you could also just
show some sort of error.

54
00:03:32.520 --> 00:03:37.484
This is something that I don't expect
users to really do anything, but

55
00:03:37.484 --> 00:03:41.207
you could just say error,
something went wrong, and

56
00:03:41.207 --> 00:03:45.280
then maybe you'll have a back button or
something again.

57
00:03:45.280 --> 00:03:49.720
This is one of those impossible states
that we should never be able to get to.

58
00:03:50.760 --> 00:03:53.584
Okay, so we have our state,
we have our dispatch,

59
00:03:53.584 --> 00:03:56.474
we're putting them in
a FlowContext provider, and

60
00:03:56.474 --> 00:04:00.040
there's one more missing thing
actually getting the results.

61
00:04:02.040 --> 00:04:06.417
If we go back to this
state machine over here,

62
00:04:06.417 --> 00:04:10.920
State machines have this
concept of actions.

63
00:04:13.160 --> 00:04:17.560
One of the actions that we could do
is an entry action for the results.

64
00:04:17.560 --> 00:04:22.799
And so we could say, sorry,
it would be over here.

65
00:04:22.799 --> 00:04:25.913
So we could actually add an action and

66
00:04:25.913 --> 00:04:31.599
we could say in this state,
we should load the results.

67
00:04:31.599 --> 00:04:34.879
So this is what I mean
by a declarative effect.

68
00:04:34.879 --> 00:04:38.366
We're declaring that in this date,
whenever we enter this date,

69
00:04:38.366 --> 00:04:40.959
this is where we should load the results.

70
00:04:40.959 --> 00:04:44.319
So without getting into X data or
state machines,

71
00:04:44.319 --> 00:04:48.490
let's see how we could translate
that to this application.

72
00:04:48.490 --> 00:04:51.610
This, this would be a good use case for
useeffect.

73
00:04:51.610 --> 00:04:56.170
Essentially, we're saying
that when we're in the.

74
00:04:56.170 --> 00:05:02.941
Not the search page, but the loading page,
we should be fetching those results.

75
00:05:02.941 --> 00:05:10.261
So we could,
let's just do await new Promise a timeout.

76
00:05:10.261 --> 00:05:12.250
So we're just doing a.

77
00:05:12.250 --> 00:05:16.100
Or actually [LAUGH] It's another
weird thing about React.

78
00:05:16.100 --> 00:05:20.340
But we do need to.

79
00:05:20.340 --> 00:05:24.580
It's a little bit tricky to use
async await inside of a use effect.

80
00:05:24.580 --> 00:05:29.220
So we'll either do this or you could
just put another function inside there.

81
00:05:29.220 --> 00:05:30.740
It gets pretty awkward.

82
00:05:30.740 --> 00:05:35.750
Honestly, my favorite thing to do is use
Promise then because we've been doing

83
00:05:35.750 --> 00:05:40.880
that for years and that's the most
natural pattern inside of user effect.

84
00:05:40.880 --> 00:05:45.435
Anyway, the idea is that we are going
to dispatch the results result one and

85
00:05:45.435 --> 00:05:46.560
result two.

86
00:05:46.560 --> 00:05:51.840
And the thing that I really like about
this is it's based on the state.

87
00:05:51.840 --> 00:05:56.240
So if the status is loading,
we know we have to do that effect.

88
00:05:56.240 --> 00:06:01.195
So we're not, you know, we're not
going based on a Boolean variable or

89
00:06:01.195 --> 00:06:06.240
even multiple different states,
you know, states or variables.

90
00:06:06.240 --> 00:06:09.760
Instead we're just going based
on this single state status.

91
00:06:11.840 --> 00:06:16.811
To actually start this now of course
we need to do proper cleanup, and

92
00:06:16.811 --> 00:06:20.800
this is where AI coding
assistance can help.

93
00:06:20.800 --> 00:06:25.040
But now let's see if this actually works.

94
00:06:26.480 --> 00:06:29.929
So going back to our travel flow,
if we reload,

95
00:06:29.929 --> 00:06:33.770
there's one thing that we forgot to do.

96
00:06:33.770 --> 00:06:38.490
We forgot to actually conditionally
show each of these components.

97
00:06:38.490 --> 00:06:43.164
So the way we could do that, and
this is another reason why I like using

98
00:06:43.164 --> 00:06:47.610
these finite states,
is that this becomes very, very clear.

99
00:06:47.610 --> 00:06:51.770
We have if state status is search,
show the search view.

100
00:06:51.770 --> 00:06:53.690
If it's loading, show the loading view.

101
00:06:53.690 --> 00:06:56.730
If it's results, show the results view.

102
00:06:59.060 --> 00:07:04.607
The other way that this is typically
seen in React apps is you have a long

103
00:07:04.607 --> 00:07:10.980
list of conditionals like if is loading
and results length is 0 or whatever.

104
00:07:10.980 --> 00:07:15.907
So basically you're going based on
implicit states rather than these explicit

105
00:07:15.907 --> 00:07:17.220
states.

106
00:07:17.220 --> 00:07:20.420
And so now that we have this,
let's reload.

107
00:07:20.420 --> 00:07:24.492
It says search for stuff,
click search, it's loading, and

108
00:07:24.492 --> 00:07:27.020
eventually we get the results.

109
00:07:27.020 --> 00:07:30.300
So we could go back and
then we could search for stuff again.

110
00:07:31.580 --> 00:07:33.740
Now there's one more
thing that we could do.

111
00:07:34.860 --> 00:07:39.307
This is all contained within the page, but
we could clean this up a little bit again

112
00:07:39.307 --> 00:07:42.860
to make the code a little
more understandable.

113
00:07:42.860 --> 00:07:47.515
What we could do is we could create a,

114
00:07:47.515 --> 00:07:51.430
let's call it flow provider.

115
00:07:52.470 --> 00:07:55.590
And of course it's going to take children,
which is the react node.

116
00:07:55.590 --> 00:08:00.550
And so we could move all of this
logic inside of our flow provider.

117
00:08:01.910 --> 00:08:06.837
So we have it up here and then, so

118
00:08:06.837 --> 00:08:12.677
then we have our flow provider here and

119
00:08:12.677 --> 00:08:15.790
down here, quick.

120
00:08:15.790 --> 00:08:19.888
&gt;&gt; Speaker 2: Also,
the state status would be for

121
00:08:19.888 --> 00:08:27.960
results would be results received
right down below, unlike 143.

122
00:08:29.480 --> 00:08:31.400
&gt;&gt; David Khourshid: Let's
see what we have here.

123
00:08:31.400 --> 00:08:32.440
I think it's just results.

124
00:08:33.480 --> 00:08:35.640
So the action is called receipt results.

125
00:08:35.640 --> 00:08:37.640
And then we show results.

126
00:08:37.640 --> 00:08:41.400
Not the best name, but yeah.

127
00:08:41.400 --> 00:08:46.397
Okay, so now we have this issue over
here where because all this is contained

128
00:08:46.397 --> 00:08:48.049
within the components.

129
00:08:48.049 --> 00:08:52.407
Now we don't have the state directly, but
the easy way to solve this is we could

130
00:08:52.407 --> 00:08:56.329
have another component called
function flow content.

131
00:08:56.329 --> 00:09:00.009
And from there we could
use that flow context.

132
00:09:00.009 --> 00:09:04.729
And then we could just put
all of this inside of there.

133
00:09:05.769 --> 00:09:07.129
And then we have our flow content.

134
00:09:08.910 --> 00:09:10.990
So this looks nice and clean.

135
00:09:10.990 --> 00:09:11.870
So does this.

136
00:09:11.870 --> 00:09:16.910
And we have everything encapsulated
inside of this flow provider.

137
00:09:16.910 --> 00:09:22.350
And so
now we see that everything still works.

138
00:09:22.350 --> 00:09:25.390
So you basically just made your own redux.

139
00:09:27.630 --> 00:09:31.950
Okay, I see in the chat Sandeep asks,
does using use context?

140
00:09:31.950 --> 00:09:35.800
I mean, it's use now, but
same thing, use context.

141
00:09:35.800 --> 00:09:38.360
Does it have any performance implications?

142
00:09:38.360 --> 00:09:40.040
The short answer is yes, it does.

143
00:09:41.080 --> 00:09:44.829
What's going to happen is
that with use context or

144
00:09:44.829 --> 00:09:48.759
with using the context
whenever the state updates,

145
00:09:48.759 --> 00:09:54.476
pretty much everything under there
is going to rerender, unfortunately,

146
00:09:54.476 --> 00:10:00.840
and this might not be a big problem if you
have state that infrequently re-renders.

147
00:10:02.100 --> 00:10:07.407
So context is essentially the built
in React tool that lets you share

148
00:10:07.407 --> 00:10:13.540
this dates and share a way to update
the state with other components.

149
00:10:13.540 --> 00:10:18.403
At least at the moment there is not
really another I mean there might be,

150
00:10:18.403 --> 00:10:23.348
we'll talk about that in a future lesson,
but not really a built in way of

151
00:10:23.348 --> 00:10:28.617
doing what Redux or Zustand etc do those
libraries really help you narrow down

152
00:10:28.617 --> 00:10:33.641
the state, or at least the part of
the state that each component expects so

153
00:10:33.641 --> 00:10:37.000
that you're not
unnecessarily re rendering.

154
00:10:37.000 --> 00:10:41.828
But again, for basic apps or apps where
the state doesn't change too much,

155
00:10:41.828 --> 00:10:43.800
this is more than sufficient.

156
00:10:43.800 --> 00:10:48.833
It's not really going to cause
many performance issues, but

157
00:10:48.833 --> 00:10:55.050
it is something to definitely be aware
of because it definitely can happen.

158
00:10:55.050 --> 00:10:59.323
Like for example, if you have a timer
running in there and you have this reducer

159
00:10:59.323 --> 00:11:03.690
that changes every single second, yeah,
that's going to cause a few issues.

160
00:11:03.690 --> 00:11:07.787
Or if you have something that's
keeping track of the mouse position or

161
00:11:07.787 --> 00:11:12.770
any sort of fast paced subscription,
then yeah, that's going to be an issue.

162
00:11:12.770 --> 00:11:17.137
Lucas also asks in the chat, how would
you organize these state machines like

163
00:11:17.137 --> 00:11:22.310
a generic step state machine or a state
machine specific for booking flights?

164
00:11:22.310 --> 00:11:27.910
My advice, at least in my experience,
is to be pragmatic first.

165
00:11:27.910 --> 00:11:34.709
So don't try to go a level of abstraction
beyond what you're working in just yet.

166
00:11:34.709 --> 00:11:39.165
Always do the manual thing so
you have a state machine specific for

167
00:11:39.165 --> 00:11:40.790
booking flights.

168
00:11:40.790 --> 00:11:46.300
It might be just a very simple step
by step sort of multi step flow, but

169
00:11:46.300 --> 00:11:52.857
don't try to abstract that out into some
generic stepped state machine just yet.

