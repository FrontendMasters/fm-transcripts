WEBVTT

1
00:00:00.560 --> 00:00:04.126
&gt;&gt; David Khourshid: So what we're going
to do is we're just going to take,

2
00:00:04.126 --> 00:00:06.080
let's do five minutes.

3
00:00:06.080 --> 00:00:11.395
And so in these five minutes,
what I want you to do

4
00:00:11.395 --> 00:00:17.200
is take a look at the page
in exercise libraries.

5
00:00:17.200 --> 00:00:23.520
This is actually a pretty big,
it's a pretty big multi step form.

6
00:00:23.520 --> 00:00:28.995
It is much bigger than the one that
we've done before where you could enter

7
00:00:28.995 --> 00:00:35.520
a destination like Minneapolis, you could
go today, I actually went yesterday.

8
00:00:35.520 --> 00:00:39.511
So number of passengers,
you could search the flights so

9
00:00:39.511 --> 00:00:45.164
you see all of the available flights,
you could go back, you could select, then

10
00:00:45.164 --> 00:00:50.680
you would search for a hotel, checkout
date, search for hotels, et cetera.

11
00:00:50.680 --> 00:00:54.480
So it's really a giant
multistep flight form.

12
00:00:54.480 --> 00:00:58.480
And then you could eventually confirm
your booking and then you go there.

13
00:00:58.480 --> 00:01:01.717
So as you can imagine, we have a pretty,

14
00:01:01.717 --> 00:01:06.400
pretty big reducer that's
helping us manage all of this.

15
00:01:07.440 --> 00:01:10.820
And then we also have to manually
set up the context, which,

16
00:01:10.820 --> 00:01:13.040
that's a lot of boilerplate.

17
00:01:13.040 --> 00:01:18.017
So in these five minutes I just want you
to play around with either Xstate Store or

18
00:01:18.017 --> 00:01:23.147
if you have another third party state
management library of choice like Zestand,

19
00:01:23.147 --> 00:01:27.753
I want you to just get a feel for how you
would refactor this to use that third

20
00:01:27.753 --> 00:01:33.220
party state management library rather than
relying on react context and use reducer.

21
00:01:39.860 --> 00:01:43.380
All right, so let's talk about
using third party state management.

22
00:01:44.580 --> 00:01:49.809
In this example, like I showed you,
we have a giant reducer and

23
00:01:49.809 --> 00:01:53.670
this, you know,
comes with a lot of baggage.

24
00:01:53.670 --> 00:01:57.950
We have a lot of, we have to use context,
we have to pass it down.

25
00:01:57.950 --> 00:01:59.670
There's a bunch of boilerplate.

26
00:01:59.670 --> 00:02:04.075
And let's say that in your team, you
decide that you want to abstract this into

27
00:02:04.075 --> 00:02:08.686
a third party state management library
because you might have performance issues

28
00:02:08.686 --> 00:02:13.190
or you might want to reduce the amounts
of code that you have to maintain.

29
00:02:13.190 --> 00:02:18.086
And especially with raw hooks like
usereducer or use context, there's a lot

30
00:02:18.086 --> 00:02:23.133
of room for developers to make their own
abstractions or their own patterns that

31
00:02:23.133 --> 00:02:28.253
they just hope that the other developers
will be on board with, even though it's

32
00:02:28.253 --> 00:02:33.180
usually the case that they're going to
end up disagreeing with each other.

33
00:02:33.180 --> 00:02:36.300
And then you have multiple
abstractions in the same code base.

34
00:02:36.300 --> 00:02:39.474
And this is another reason
why I think third party state

35
00:02:39.474 --> 00:02:44.304
management libraries are great because
they provide an opinionated approach to,

36
00:02:44.304 --> 00:02:47.120
to managing this kind of states.

37
00:02:47.120 --> 00:02:49.780
So taking a look at our booking reducer,

38
00:02:49.780 --> 00:02:54.960
I'm actually going to split the screen
here, but we, this is a common theme.

39
00:02:54.960 --> 00:02:59.327
We are going to be doing the same thing
that we've done in other exercises where

40
00:02:59.327 --> 00:03:03.840
we're doing things side by side instead
of doing a wholesale replacement of it.

41
00:03:03.840 --> 00:03:09.610
So instead we're going to have
in this case a booking store.

42
00:03:09.610 --> 00:03:11.850
And we are going to create a store.

43
00:03:13.530 --> 00:03:18.010
We're going to have our context and our
context is going to be that initial state.

44
00:03:18.010 --> 00:03:21.690
So it's going to be the same as
the booking state over here.

45
00:03:21.690 --> 00:03:26.090
And then we have all of our
transitions that we could do.

46
00:03:26.090 --> 00:03:32.170
So just to show you one, as an example,
we have flight search updated.

47
00:03:32.170 --> 00:03:36.790
We get the context and we get the event.

48
00:03:38.630 --> 00:03:45.510
Sorry, the event is going to have
a payload and that payload is going to be.

49
00:03:47.830 --> 00:03:50.630
This is where making
explicit types really help.

50
00:03:51.750 --> 00:03:54.390
So we see that the payload is over here.

51
00:03:56.390 --> 00:03:58.870
There's a couple of
ways to bring this out.

52
00:03:58.870 --> 00:04:04.567
We could either just have a type
flight search updated events and

53
00:04:04.567 --> 00:04:10.230
just pull it out over there,
or we could derive that type.

54
00:04:10.230 --> 00:04:15.030
So the way we would derive it.

55
00:04:16.949 --> 00:04:18.190
So I'll just do it here.

56
00:04:18.190 --> 00:04:23.750
So flight search or
flight search updated events payload.

57
00:04:23.750 --> 00:04:25.948
But the way that we could derive it,

58
00:04:25.948 --> 00:04:30.160
if you don't have this separated
out into a type, is you could.

59
00:04:30.160 --> 00:04:34.966
This looks a little bit ugly,
but basically you could say this

60
00:04:34.966 --> 00:04:39.403
would be a booking action and
you intersect that with type

61
00:04:39.403 --> 00:04:44.720
flightsearch updated and
then you read the payload from that.

62
00:04:44.720 --> 00:04:46.603
Again, a little bit ugly, but

63
00:04:46.603 --> 00:04:51.680
that's why it's good to have just
some more explicit types with that.

64
00:04:51.680 --> 00:04:54.720
And then you're going
to update it like this.

65
00:04:54.720 --> 00:05:00.656
And then you could do this with
the rest of the actions you have,

66
00:05:00.656 --> 00:05:03.350
just converting them over.

67
00:05:04.790 --> 00:05:08.310
And again,
we're doing things side by side.

68
00:05:08.310 --> 00:05:12.550
So we have a convenience use
booking hook that we could use.

69
00:05:12.550 --> 00:05:16.870
And so this is where we could
actually just read in the store.

70
00:05:16.870 --> 00:05:18.630
Yeah, read in the store context.

71
00:05:18.630 --> 00:05:27.120
So we could say const
storecontext = useSelector.

72
00:05:28.560 --> 00:05:31.836
Then we're going to be
reading the bookingstore and

73
00:05:31.836 --> 00:05:34.151
reading in that context from there.

74
00:05:34.151 --> 00:05:38.894
So this context, confusingly enough,

75
00:05:38.894 --> 00:05:43.920
includes both the state and the dispatch.

76
00:05:46.400 --> 00:05:52.560
So what we want to do is,
you know, we want to have the.

77
00:05:53.920 --> 00:05:55.929
What do we wanna do?

78
00:05:55.929 --> 00:05:58.720
Yeah, so we want to do our console log.

79
00:05:58.720 --> 00:06:03.520
So we want to say console
log store context.

80
00:06:03.520 --> 00:06:07.680
And we also want to compare
it to the context.state.

81
00:06:07.680 --> 00:06:12.382
Again, I know that's a little bit
confusing, but the reason that we do this

82
00:06:12.382 --> 00:06:16.645
is that when we're working in
an application where we're doing this

83
00:06:16.645 --> 00:06:22.150
kind of refactor, we want to see that
everything is still pretty much the same.

84
00:06:22.150 --> 00:06:29.590
So for example, if we are entering our
destination we want to see that the.

85
00:06:32.310 --> 00:06:35.030
Oops, let's see what I did wrong here.

86
00:06:36.230 --> 00:06:37.464
Store context.

87
00:06:37.464 --> 00:06:40.390
Wait, that's, there we go.

88
00:06:40.390 --> 00:06:43.710
Okay, it's giving me
a whole bunch of junk.

89
00:06:43.710 --> 00:06:50.742
But we want to see that essentially both
types of states are exactly the same.

90
00:06:50.742 --> 00:06:54.376
So in this case we have
CurrentStepFlightSearch,

91
00:06:54.376 --> 00:06:56.570
CurrentStepFlightSearch.

92
00:06:56.570 --> 00:06:59.568
And once we start doing
things in parallel,

93
00:06:59.568 --> 00:07:02.410
we could see that the states match up.

94
00:07:02.410 --> 00:07:07.864
And so once those states match up, that's
when we're going to be able to confidently

95
00:07:07.864 --> 00:07:13.540
remove the old implementation and
replace it with a new implementation.

96
00:07:13.540 --> 00:07:17.940
So I'm just going to show you,
for sake of time, the end result.

97
00:07:20.340 --> 00:07:26.340
And so we no longer have any context,
just fold all.

98
00:07:27.620 --> 00:07:32.584
So we no longer have any context because
we're just bringing that directly

99
00:07:32.584 --> 00:07:34.420
in from the store.

100
00:07:34.420 --> 00:07:38.013
And so you could see that,
you know, we have the step,

101
00:07:38.013 --> 00:07:42.156
we're reading it directly from
the booking store over here and

102
00:07:42.156 --> 00:07:47.820
it has everything that was in our,
our original reducer just like that.

103
00:07:47.820 --> 00:07:51.925
So now instead, again,
instead of using context, we use selector,

104
00:07:51.925 --> 00:07:56.098
grab it from that booking store,
which we could put in a separate file,

105
00:07:56.098 --> 00:08:00.780
import that, and then we're reading
the state and only the state that we need.

106
00:08:00.780 --> 00:08:02.620
That's the key difference here.

107
00:08:02.620 --> 00:08:07.955
And then on things like handle submit, we
could trigger the search flights event and

108
00:08:07.955 --> 00:08:11.580
pretty much everything else
remains exactly the same.

109
00:08:11.580 --> 00:08:15.864
So we're using that pattern of
selecting from the store and

110
00:08:15.864 --> 00:08:19.500
then dispatching or sending an event.

111
00:08:19.500 --> 00:08:23.660
And so this is going to actually
be pretty much the same approach.

112
00:08:23.660 --> 00:08:29.803
Whether you use Redux Toolkit or
Zustand or Xstate Store, you're replacing

113
00:08:29.803 --> 00:08:36.240
that usecontext usereducerdance with
a third party state management library.

