WEBVTT

1
00:00:00.400 --> 00:00:07.385
&gt;&gt; David Khourshid: I'm excited for
the next one because it's very painful.

2
00:00:07.385 --> 00:00:12.646
So it is on cascading effects.

3
00:00:12.646 --> 00:00:17.628
This is something that is
almost inevitable when you get

4
00:00:17.628 --> 00:00:20.702
into bigger and bigger projects.

5
00:00:20.702 --> 00:00:25.357
What happens is that you have some states,
whether it's in use, state,

6
00:00:25.357 --> 00:00:30.784
usereducer, wherever, and then you have
multiple use effects that are cascading.

7
00:00:30.784 --> 00:00:35.401
In fact, I think that this is worse
than having a use effect that runs on

8
00:00:35.401 --> 00:00:40.751
an infinite loop accidentally, because
these are just very hard to track down.

9
00:00:40.751 --> 00:00:43.595
I know I've been talking about
state machines a lot, but

10
00:00:43.595 --> 00:00:45.491
when you have useeffects at cascade,

11
00:00:45.491 --> 00:00:49.065
it's more like a Rube Goldberg
machine where something is happening.

12
00:00:49.065 --> 00:00:53.707
And it touches something else,
which triggers something else, and

13
00:00:53.707 --> 00:00:58.279
then that touches something else,
and then you have this cascade.

14
00:00:58.279 --> 00:01:03.336
The side effect of this is that you're
not sure where data is updating or

15
00:01:03.336 --> 00:01:05.794
when effects are being executed.

16
00:01:05.794 --> 00:01:10.597
You're just hoping that if I put
everything in the dependency array and

17
00:01:10.597 --> 00:01:15.239
then I have a conditional set inside
of my useeffect that says only run

18
00:01:15.239 --> 00:01:18.056
this effect if this conditional is true.

19
00:01:18.056 --> 00:01:22.870
So you're sort of filtering from
everything you're putting in that

20
00:01:22.870 --> 00:01:26.854
dependency array,
it just becomes very confusing, and

21
00:01:26.854 --> 00:01:29.594
so bugs become very hard to track down.

22
00:01:29.594 --> 00:01:34.169
There have been many times where I have
had to myself debug these multiple

23
00:01:34.169 --> 00:01:36.351
useeffect hooks, that cascade.

24
00:01:36.351 --> 00:01:42.496
And I had to do things like comparing the
previous dependency array with the current

25
00:01:42.496 --> 00:01:48.573
dependency array to comparing each item
and seeing which of those items changed.

26
00:01:48.573 --> 00:01:52.804
And then once I identified, hey,
this item is causing this effect

27
00:01:52.804 --> 00:01:57.716
to run when it shouldn't run, then I
would have to backtrack and see, okay,

28
00:01:57.716 --> 00:02:00.457
where can this item be possibly changing?

29
00:02:00.457 --> 00:02:05.737
And so when you don't have events,
you are really having to depend

30
00:02:05.737 --> 00:02:10.661
on when data changes, and
that just becomes very confusing.

31
00:02:10.661 --> 00:02:13.649
So this is an example over here,

32
00:02:13.649 --> 00:02:19.417
where we have an effect that
triggers when the inputs change.

33
00:02:19.417 --> 00:02:23.598
And then we perform the flight search,
and then the hotel search is

34
00:02:23.598 --> 00:02:28.093
triggered when we select a flight,
and then we perform a hotel search.

35
00:02:28.093 --> 00:02:30.317
And so this can be, for example,

36
00:02:30.317 --> 00:02:35.641
a component that tries to show everything
in one page, which is pretty common,

37
00:02:35.641 --> 00:02:40.580
but in order to do that, we are just
chaining these useeffects together.

38
00:02:40.580 --> 00:02:43.812
And even though this looks simple enough,

39
00:02:43.812 --> 00:02:48.299
when you add the actual
implementation of the useeffect and

40
00:02:48.299 --> 00:02:53.247
these dependency arrays grow,
it just becomes very confusing.

41
00:02:53.247 --> 00:02:56.464
So the way that we could do that,
or, sorry,

42
00:02:56.464 --> 00:03:02.145
the way that we could avoid this problem
of these multiple chained useeffects,

43
00:03:02.145 --> 00:03:07.177
is by, well, reducing the number of
use effects and using a reducer.

44
00:03:07.177 --> 00:03:12.621
And this also gets closer to our
idea of declarative effects too.

45
00:03:12.621 --> 00:03:18.671
So when you have a reducer,
you could basically say that if we for

46
00:03:18.671 --> 00:03:21.705
instance have flight updated.

47
00:03:21.705 --> 00:03:26.781
We could have a single use effect that
manages whenever this date changes,

48
00:03:26.781 --> 00:03:30.257
I need to do the appropriate effect for
that state.

49
00:03:30.257 --> 00:03:35.400
So this is the end result of doing
things in an events driven approach.

50
00:03:35.400 --> 00:03:37.973
But how do we actually get there?

51
00:03:37.973 --> 00:03:41.342
So what we want to do is
actually work backwards,

52
00:03:41.342 --> 00:03:46.433
look at all of our use effects and
also observe the running application and

53
00:03:46.433 --> 00:03:49.324
see when are things actually happening.

54
00:03:49.324 --> 00:03:51.814
So what data is changing?

55
00:03:51.814 --> 00:03:56.495
And can that change of data instead be
represented by an event rather than it

56
00:03:56.495 --> 00:03:58.515
just changing in the use state?

57
00:03:58.515 --> 00:04:00.749
And then that's triggering a use effect.

58
00:04:00.749 --> 00:04:05.442
And so if it can,
we could refactor to using an event and

59
00:04:05.442 --> 00:04:09.640
then just executing effects
based on the state.

