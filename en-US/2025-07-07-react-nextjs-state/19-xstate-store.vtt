WEBVTT

1
00:00:00.160 --> 00:00:03.249
&gt;&gt; David Khourshid: I'm going to
demonstrate like these two libraries, or,

2
00:00:03.249 --> 00:00:07.360
sorry, these two types of libraries,
by showing you one library actually.

3
00:00:08.800 --> 00:00:11.220
And so we're not going to be
talking about XState, but

4
00:00:11.220 --> 00:00:13.280
we're actually talking about XState Store.

5
00:00:13.280 --> 00:00:19.360
Just because it is possible to use both of
those approaches inside of XState Store.

6
00:00:22.560 --> 00:00:26.720
If you've used Zstand or Jotai before,
it's going to feel very familiar.

7
00:00:26.720 --> 00:00:30.710
So I'm using XState Store just
to demonstrate the concepts.

8
00:00:31.910 --> 00:00:39.510
So we're going to first import
Create Store from XState Store.

9
00:00:39.510 --> 00:00:42.070
And then here's what this looks like.

10
00:00:42.070 --> 00:00:44.150
We have two different types of things.

11
00:00:44.150 --> 00:00:47.430
We have the actual state
that's inside the store.

12
00:00:47.430 --> 00:00:51.270
And so
in XState Store that's called context.

13
00:00:51.270 --> 00:00:54.470
So let's make a simple
example like account.

14
00:00:56.090 --> 00:01:00.410
And then we have our transitions,
which transition that state.

15
00:01:00.410 --> 00:01:03.331
So we have increment, and
this is actually just

16
00:01:03.331 --> 00:01:07.850
a function which takes in the context and
it takes in the event.

17
00:01:07.850 --> 00:01:15.124
So let's say that we have by and
we want to increment it by some number and

18
00:01:15.124 --> 00:01:22.050
then we will just update the state so
we spread the context in there.

19
00:01:22.050 --> 00:01:24.480
And this is exactly as you would expect.

20
00:01:24.480 --> 00:01:29.440
The cool thing though is that XSTATE Store
was built so that you have type inference.

21
00:01:29.440 --> 00:01:34.800
And so you don't necessarily need
to say these are my actions.

22
00:01:34.800 --> 00:01:37.109
This is what the context looks like,

23
00:01:37.109 --> 00:01:40.960
because by default it can
just infer those values.

24
00:01:40.960 --> 00:01:43.880
And so with a store,
you could subscribe to it.

25
00:01:43.880 --> 00:01:48.381
You could say store.subscribe and
you could grab that context and

26
00:01:48.381 --> 00:01:53.940
then you could send it events, just like
you can with useReducer or with xdate.

27
00:01:53.940 --> 00:01:56.260
But there's also a simpler
way to do it too.

28
00:01:56.260 --> 00:02:00.457
We could do store trigger and
then type dot increment and

29
00:02:00.457 --> 00:02:04.180
then you just pass in
the payload over there.

30
00:02:04.180 --> 00:02:10.900
And what that's going to do is that's
going to log the incremented value.

31
00:02:12.340 --> 00:02:16.750
So that's the general
idea of what a store is.

32
00:02:16.750 --> 00:02:22.547
It's a container of states where you
update it indirectly via actions or

33
00:02:22.547 --> 00:02:25.310
sending in events just like that.

34
00:02:26.430 --> 00:02:30.990
Now, how do you use this
in a react component?

35
00:02:30.990 --> 00:02:36.496
So one interesting thing about stores,
whether you're using Zestand or

36
00:02:36.496 --> 00:02:39.958
XState Store or
a similar library like Redux,

37
00:02:39.958 --> 00:02:43.685
is that you can either pass
it in through context or

38
00:02:43.685 --> 00:02:49.140
you can have this be standalone
in something that you export.

39
00:02:49.140 --> 00:02:50.820
So let's say that we have a.

40
00:02:53.300 --> 00:02:55.256
Let's export a default page and

41
00:02:55.256 --> 00:02:58.740
we have a button that's just
keeping track of the count.

42
00:03:00.020 --> 00:03:02.820
So we want to subscribe to the count.

43
00:03:02.820 --> 00:03:07.334
So the way we do that,
instead of using use date,

44
00:03:07.334 --> 00:03:11.870
we would grab the count from use selector.

45
00:03:11.870 --> 00:03:14.878
So we're going to grab use
selector pass in the store and

46
00:03:14.878 --> 00:03:18.190
then we could read the counts
directly from there.

47
00:03:18.190 --> 00:03:22.777
The reason that this is useful is
because use selector is only going to

48
00:03:22.777 --> 00:03:26.190
re render this component
when the count changes.

49
00:03:26.190 --> 00:03:33.710
So you could do something
like count greater than 10.

50
00:03:33.710 --> 00:03:38.344
And this is just a boolean value
that's not going to re render every

51
00:03:38.344 --> 00:03:43.080
single time the count changes,
but only when this value changes.

52
00:03:43.080 --> 00:03:47.680
So it's going to probably be false
until it reaches that number.

53
00:03:47.680 --> 00:03:52.040
And in fact, let's try this console.

54
00:03:52.040 --> 00:03:57.160
We're going to count
the re renders over here.

55
00:03:57.160 --> 00:04:01.426
We're not using strict mode, so
this might run twice, but and

56
00:04:01.426 --> 00:04:06.350
then we're going to show the counts
over here counts greater than 10.

57
00:04:08.190 --> 00:04:15.190
So now if we go to local
host exercise libraries,

58
00:04:20.093 --> 00:04:26.197
use clients [LAUGH] that
gets annoying after a while.

59
00:04:26.197 --> 00:04:34.657
So we have this button where we're
not showing the count true false.

60
00:04:34.657 --> 00:04:39.670
Okay, so you see it changed to true.

61
00:04:39.670 --> 00:04:42.710
But the real question is how
many times did it re render?

62
00:04:42.710 --> 00:04:43.950
Which I forgot to show you.

63
00:04:43.950 --> 00:04:45.030
So I'm going to reload this.

64
00:04:46.870 --> 00:04:53.920
So once you click increment, it's actually
not re rendering at all until that.

65
00:04:53.920 --> 00:04:57.524
And of course it rerenders twice
because of react in strict mode,

66
00:04:57.524 --> 00:04:59.920
it's going to run the component twice.

67
00:04:59.920 --> 00:05:04.798
But you could see that no
rerenders actually happen

68
00:05:04.798 --> 00:05:08.320
until that value actually changes.

69
00:05:09.840 --> 00:05:14.640
So that is a demonstration
of using a store.

70
00:05:14.640 --> 00:05:16.560
Now, what about atoms?

71
00:05:16.560 --> 00:05:19.070
So atoms are a little bit different.

72
00:05:19.070 --> 00:05:21.607
Like I said, atoms are something that you

73
00:05:21.607 --> 00:05:26.190
should use when the data can change
freely, like from an external source.

74
00:05:28.110 --> 00:05:33.070
So let's say that I want to control
this count using an atom instead the way

75
00:05:33.070 --> 00:05:34.910
that I would do that.

76
00:05:34.910 --> 00:05:38.430
And again, this is very similar to other
libraries that will do the same thing.

77
00:05:39.870 --> 00:05:43.952
We'll have const counts atom and
we create an Atom.

78
00:05:43.952 --> 00:05:50.046
Oops, just a normal Atom
with a value of zero.

79
00:05:50.046 --> 00:05:54.178
So now instead of using a store,

80
00:05:54.178 --> 00:06:01.560
we would just set the atom so
we would count atom set.

81
00:06:01.560 --> 00:06:02.680
We don't need to get it.

82
00:06:02.680 --> 00:06:04.600
We could just get the value over here.

83
00:06:04.600 --> 00:06:07.160
This is just value plus one.

84
00:06:07.160 --> 00:06:11.050
And then we could go ahead and
log that count over here.

85
00:06:11.050 --> 00:06:13.923
But how do we get the count
with xstate store,

86
00:06:13.923 --> 00:06:18.570
it's exactly the same way as you
would select a value from a store.

87
00:06:18.570 --> 00:06:24.090
So we would say const
count equals use selector.

88
00:06:24.090 --> 00:06:27.975
We pass in the atom and
then we could just,

89
00:06:27.975 --> 00:06:33.969
we could just give the value just for
demonstration purposes and

90
00:06:33.969 --> 00:06:37.860
so you're going to see that this counts.

91
00:06:41.081 --> 00:06:42.260
Yeah, there we go.

92
00:06:42.260 --> 00:06:44.420
So now it just increments.

93
00:06:44.420 --> 00:06:49.463
And if we want to do
something where you know,

94
00:06:49.463 --> 00:06:56.783
we want to see if it's greater than 10,
then we could also see.

95
00:06:56.783 --> 00:07:00.139
Let's also check the re-renders too.

96
00:07:00.139 --> 00:07:07.870
So you see there's no rerenders
until it actually goes to over 10.

97
00:07:09.070 --> 00:07:14.510
So this is one of the key benefits of
using these third party state management

98
00:07:14.510 --> 00:07:19.780
libraries, whether it's XState Store or
different libraries, is that

99
00:07:19.780 --> 00:07:25.050
you can really reduce the amount of RE
renders you have and you can make it so

100
00:07:25.050 --> 00:07:31.000
that you can say that components only care
about the data that's relevant to them so

101
00:07:31.000 --> 00:07:36.535
they don't need to re render every single
time any part of the state changes.

102
00:07:36.535 --> 00:07:41.598
So that's a useful part
of using either stores or

103
00:07:41.598 --> 00:07:48.646
an Atom-based approach is you
have those fine-grained updates.

104
00:07:48.646 --> 00:07:53.330
Okay, so
are there any questions on this topic?

105
00:07:56.060 --> 00:07:58.977
&gt;&gt; Speaker 2: I guess I'm trying to think
of the use case for Adam particularly

106
00:07:58.977 --> 00:08:02.757
because I'm like, I don't know, I was like
stuck on the idea of like with the store

107
00:08:02.757 --> 00:08:05.835
of like, okay, you're bulk buying and
once you hit 10 bananas or

108
00:08:05.835 --> 00:08:09.420
whatever in your cart you're doing
a 10% discount or something like that.

109
00:08:09.420 --> 00:08:13.410
But the idea with the Atom approach
be more so of like our whole shop,

110
00:08:13.410 --> 00:08:18.101
it's like a flash sale and it's like
you're constantly trying to get like what

111
00:08:18.101 --> 00:08:23.290
is the discount or something like
that where it's coming from anywhere.

112
00:08:23.290 --> 00:08:25.130
Or what would I guess be a.

113
00:08:25.130 --> 00:08:25.630
Better.

114
00:08:27.210 --> 00:08:29.290
Use case of Atom?

115
00:08:29.290 --> 00:08:32.810
&gt;&gt; David Khourshid: Yeah, so a good
use case of Atom would be just that.

116
00:08:32.810 --> 00:08:37.370
Let's say that you have something that is
subscribing to store updates and then.

117
00:08:37.370 --> 00:08:41.437
Or like a shopping store update
where it's like hey, no,

118
00:08:41.437 --> 00:08:44.170
there's a flash sale on this thing.

119
00:08:44.170 --> 00:08:46.985
And then you would just
update that Atom directly or

120
00:08:46.985 --> 00:08:49.410
you could just do it as
an event in the store.

121
00:08:49.410 --> 00:08:53.490
But the idea is that that little piece
of information sort of lives on its own.

122
00:08:53.490 --> 00:08:57.703
Like that flash update from
a store doesn't need to or sorry,

123
00:08:57.703 --> 00:08:59.250
let's call it a shop.

124
00:08:59.250 --> 00:09:03.610
The flash update from a shop,
it's not really related to the core data.

125
00:09:03.610 --> 00:09:08.490
So it might just be standalone in an Atom
that you are updating from somewhere.

126
00:09:08.490 --> 00:09:14.443
So we might have this hook
like const use Flash sale and

127
00:09:14.443 --> 00:09:21.058
then you know, you would have
some const Flash sale Atom and

128
00:09:21.058 --> 00:09:25.822
you might even instantiate this outside of

129
00:09:25.822 --> 00:09:31.514
the components where you're
like set interval and

130
00:09:31.514 --> 00:09:36.144
then you know, you have whatever math dot

131
00:09:36.144 --> 00:09:41.100
random is greater than 5 sale no sale.

132
00:09:41.100 --> 00:09:42.460
You know, something like that.

133
00:09:42.460 --> 00:09:44.750
So all of that logic lives outside.

134
00:09:44.750 --> 00:09:47.310
And then you could use that
flash sale Atom and just.

135
00:09:48.990 --> 00:09:53.960
Yeah, so actually for instance,
like let's say that we have

136
00:09:53.960 --> 00:09:59.470
account over here and this is
the number of bananas that you want.

137
00:09:59.470 --> 00:10:04.910
So just call this bananas.

138
00:10:06.270 --> 00:10:10.930
And so let's say that you want to
increase the number of bananas.

139
00:10:10.930 --> 00:10:16.130
And if there is a flash sale,
actually I'll just put this over here.

140
00:10:17.730 --> 00:10:19.027
But we actually want to select that.

141
00:10:19.027 --> 00:10:25.460
So const flash sale, we do want that.

142
00:10:25.460 --> 00:10:27.650
And then we want the counts of bananas.

143
00:10:29.170 --> 00:10:33.490
So bananas and
then we want the total value.

144
00:10:33.490 --> 00:10:36.577
So again this goes to lessons
that we talked about before,

145
00:10:36.577 --> 00:10:38.530
which is deriving state.

146
00:10:38.530 --> 00:10:42.050
So we say const total price equals.

147
00:10:42.050 --> 00:10:47.560
And then flash sale equals
sale bananas times 0.05,

148
00:10:47.560 --> 00:10:54.690
otherwise each banana is a dollar which
is like Miami prices for bananas.

149
00:10:54.690 --> 00:10:55.410
I don't know.

150
00:10:57.410 --> 00:10:58.170
So let's see.

151
00:10:58.170 --> 00:10:59.570
Flash sale equals sale.

152
00:10:59.570 --> 00:11:01.970
Should say no sale.

153
00:11:01.970 --> 00:11:04.340
And then this value isn't relevant.

154
00:11:04.340 --> 00:11:06.340
Okay, yeah, let's actually try this out.

155
00:11:06.340 --> 00:11:11.540
So again we have our total price and
we have an external keyword being external

156
00:11:11.540 --> 00:11:16.900
data source, where it's just updating
this, you know, this flash sale.

157
00:11:16.900 --> 00:11:23.140
And so we could say H1 make it big.

158
00:11:23.140 --> 00:11:24.100
That's not what I.

159
00:11:28.430 --> 00:11:32.066
Okay, so you know,
we might have a flash sale and

160
00:11:32.066 --> 00:11:35.630
then we want to show our
total price over there.

161
00:11:36.910 --> 00:11:40.190
So now we'll go here and
let's zoom in a bit.

162
00:11:45.070 --> 00:11:46.230
So there's a flash sale.

163
00:11:46.230 --> 00:11:52.590
But now when there's no flash sale it sort
of changes number, but you get the idea.

164
00:11:52.590 --> 00:11:55.952
I don't know why we don't have
a banana emoji in there, but

165
00:11:55.952 --> 00:12:00.540
actually I'm glad that you mentioned
that because right now we're combining.

166
00:12:05.020 --> 00:12:05.740
Let's do this.

167
00:12:05.740 --> 00:12:09.610
So instead of account atom
we have account store and

168
00:12:09.610 --> 00:12:13.180
we're going to just increment that by one.

169
00:12:13.180 --> 00:12:17.020
And so instead of this, we're just
going to read that from the store.

170
00:12:17.020 --> 00:12:22.530
You can combine at least in xstate store
you can combine stores and atoms together.

171
00:12:22.530 --> 00:12:27.970
And you could either do it like this or
that changing value itself can be an atom.

172
00:12:27.970 --> 00:12:35.170
So we could say, let's just say yeah,
everything is outside.

173
00:12:35.170 --> 00:12:40.530
So we could just say const total
price atom equals create atom.

174
00:12:40.530 --> 00:12:43.810
And then we're actually going
to pass it in a function.

175
00:12:43.810 --> 00:12:46.210
And so we are going to just return.

176
00:12:47.650 --> 00:12:51.330
And this is so new that Claude
has no idea what's going on.

177
00:12:51.330 --> 00:12:55.812
But we could say store get context bananas

178
00:12:55.812 --> 00:13:00.293
times oops wherever the times thing is and

179
00:13:00.293 --> 00:13:06.310
then flash sale item dot get
if it's a sale then multiply

180
00:13:06.310 --> 00:13:11.432
that by 0.5 otherwise
multiply that by 1 and

181
00:13:11.432 --> 00:13:16.937
then now in instead of this
total price we could just

182
00:13:16.937 --> 00:13:24.090
select it directly from that
total price atom that we have.

183
00:13:24.090 --> 00:13:28.489
And so actually this shows
you that we don't even need

184
00:13:28.489 --> 00:13:33.476
that selector anymore which might
save us some re renders but

185
00:13:33.476 --> 00:13:37.974
now you could see that we're
combining those atoms and

186
00:13:37.974 --> 00:13:41.530
come on flash sale there's no flash sale.

187
00:13:41.530 --> 00:13:42.970
There we go.

188
00:13:42.970 --> 00:13:45.980
And so you could see that
price changing based on that.

189
00:13:48.140 --> 00:13:53.418
So that's another benefit of using
atoms is that you can combine them and

190
00:13:53.418 --> 00:13:57.225
so you could do things like
that where it naturally or

191
00:13:57.225 --> 00:14:02.503
it innately handles the subscriptions and
you know, things like that so

192
00:14:02.503 --> 00:14:06.940
it will subscribe to both the flash
sale item and this store.

193
00:14:08.300 --> 00:14:11.580
So that's just how we can make
state a little bit more convenient.

