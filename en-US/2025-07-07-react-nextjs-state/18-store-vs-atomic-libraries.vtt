WEBVTT

1
00:00:00.320 --> 00:00:04.004
&gt;&gt; David Khourshid: One big thing that
comes up with state management in React

2
00:00:04.004 --> 00:00:08.640
is when do I actually use a third
party state management library?

3
00:00:08.640 --> 00:00:13.504
And the short answer is that you should
use it when the built in patterns

4
00:00:13.504 --> 00:00:16.640
that React has doesn't really scale.

5
00:00:16.640 --> 00:00:21.710
And remember I talked about in the very
beginning, that scale isn't just about

6
00:00:21.710 --> 00:00:26.778
the number of lines of code or the number
of features you have, but it is about how

7
00:00:26.778 --> 00:00:31.724
maintainable and sustainable is this
code base when the application grows.

8
00:00:31.724 --> 00:00:37.047
And so when things get hairy and
all spaghetti y then you have to question

9
00:00:37.047 --> 00:00:42.461
like is what I'm doing with React enough,
because when you look at other

10
00:00:42.461 --> 00:00:47.786
frameworks and libraries such as Svelte or
Solid, they have different

11
00:00:47.786 --> 00:00:52.756
state management approaches which
avoid a lot of the complexity,

12
00:00:52.756 --> 00:00:57.817
the accidental complexity that
React introduces just because with

13
00:00:57.817 --> 00:01:02.820
state management React is a lot
more limited, believe it or not.

14
00:01:02.820 --> 00:01:07.661
Like this might be controversial,
but you can't rely just on React's

15
00:01:07.661 --> 00:01:11.620
built in hooks all the time for
all use cases of state.

16
00:01:11.620 --> 00:01:15.060
Which is why libraries like
Redux became so popular.

17
00:01:15.060 --> 00:01:19.488
And now there's other libraries
like Zustan and Jotai and

18
00:01:19.488 --> 00:01:24.183
Xstate and things like that which
people have had to use to sort

19
00:01:24.183 --> 00:01:28.540
of smooth over React's
incomplete handling of states.

20
00:01:29.740 --> 00:01:35.420
And so places that we see this are like
when you're over relying on context.

21
00:01:35.420 --> 00:01:40.186
So if you have multiple providers or
if you have just providers everywhere and

22
00:01:40.186 --> 00:01:45.245
it could really be condensed like we heard
about earlier, the prop drilling we saw

23
00:01:45.245 --> 00:01:50.380
earlier and also of course scattered state
logic where there is no central place for

24
00:01:50.380 --> 00:01:55.441
specific domains in your app where you
could see here's the state, here's how it

25
00:01:55.441 --> 00:02:00.470
updates and here's the different actions
or events that can change that state.

26
00:02:01.990 --> 00:02:06.432
So that's why third party state
management libraries exist and

27
00:02:06.432 --> 00:02:11.863
that's why you should consider using
them when it's rights to I'm not saying

28
00:02:11.863 --> 00:02:17.128
that you should replace all of your
state management with these libraries,

29
00:02:17.128 --> 00:02:22.810
but it is very useful to understand
when to use them and how to use them.

30
00:02:22.810 --> 00:02:29.090
So in here I outlined just a few
ways where it gets really messy.

31
00:02:29.090 --> 00:02:32.890
With React states of course
we saw prop drilling.

32
00:02:34.090 --> 00:02:37.968
There's also state synchronization issues,
especially when

33
00:02:37.968 --> 00:02:41.772
you have multiple components
needing to read the same state and

34
00:02:41.772 --> 00:02:45.719
you realize that and you're like
well I could either prop drill or

35
00:02:45.719 --> 00:02:50.310
move it up to the parents and then do some
more prop drilling or use context and

36
00:02:50.310 --> 00:02:55.223
suffer the re rendering issue which leads
to the context performance problems.

37
00:02:55.223 --> 00:02:58.701
Because with context,
context was meant for

38
00:02:58.701 --> 00:03:04.580
states that wasn't like,
that isn't going to frequently change.

39
00:03:04.580 --> 00:03:09.472
And so that's why the typical example
of context is themes, like a theme or

40
00:03:09.472 --> 00:03:14.055
just a user preference or something
very simple like that that needs to

41
00:03:14.055 --> 00:03:19.840
propagate down to all the components,
but is not going to change that often.

42
00:03:19.840 --> 00:03:24.747
So that leaves us in an odd spot where
we have state that might change a lot,

43
00:03:24.747 --> 00:03:28.800
but context is going to just
cause a lot of re renders.

44
00:03:28.800 --> 00:03:33.359
And of course, like I talked about,
state logic is scattered everywhere,

45
00:03:33.359 --> 00:03:38.061
especially when you're using hooks,
even even when you're using context,

46
00:03:38.061 --> 00:03:43.460
unless you're using usereducer, which it
has its own problems with boilerplate.

47
00:03:43.460 --> 00:03:45.460
It gets really messy.

48
00:03:45.460 --> 00:03:51.379
And so that's why there's two types of
third party state management libraries.

49
00:03:51.379 --> 00:03:57.060
There's the store based approach and
the atomic or the signal based approach.

50
00:03:57.060 --> 00:03:58.820
And both of these are actually useful.

51
00:03:58.820 --> 00:04:00.900
It doesn't need to be an either or.

52
00:04:00.900 --> 00:04:05.700
So a store based solution
uses a centralized approach.

53
00:04:05.700 --> 00:04:10.500
You could think of a store as
basically a reducer container.

54
00:04:10.500 --> 00:04:14.250
So you have some states and
then you have actions or events,

55
00:04:14.250 --> 00:04:18.450
depending on what they call them,
that can operate on the state and

56
00:04:18.450 --> 00:04:21.380
cause that state to
transition to a new state.

57
00:04:22.660 --> 00:04:26.992
I really like using a store based
solution because this is what I call

58
00:04:26.992 --> 00:04:29.540
indirect state management.

59
00:04:29.540 --> 00:04:34.394
And what that means is you are not
directly mutating or updating the state,

60
00:04:34.394 --> 00:04:36.900
even if it is immutable.

61
00:04:36.900 --> 00:04:41.326
You're not just saying I'm going to
change the state whenever I want,

62
00:04:41.326 --> 00:04:45.139
however I want,
because that's very problematic.

63
00:04:45.139 --> 00:04:50.012
And you might have some centralized
app logic where the state needs to

64
00:04:50.012 --> 00:04:51.700
be in a consistent way.

65
00:04:51.700 --> 00:04:56.219
You don't want impossible states,
you want to manage things like, for

66
00:04:56.219 --> 00:04:59.060
example, a number must have a max value.

67
00:04:59.060 --> 00:05:03.264
Or when I'm in the state of results,
I need to show the results and

68
00:05:03.264 --> 00:05:06.980
I need to be sure that they exist,
et cetera.

69
00:05:06.980 --> 00:05:08.980
And then there's atomic solutions.

70
00:05:08.980 --> 00:05:13.584
So in atom, it's not really well
defined atoms and signals, but

71
00:05:13.584 --> 00:05:19.700
you could think of them as pieces of data
that can change from pretty much anywhere.

72
00:05:19.700 --> 00:05:22.698
And so they don't have the restrictions
of store based solutions.

73
00:05:22.698 --> 00:05:29.070
You can literally just update an atom and
just subscribe to its value,

74
00:05:29.070 --> 00:05:34.578
so that's where there's
libraries like Jotai, Recoil and

75
00:05:34.578 --> 00:05:42.140
xdatestore, which I'm going to talk about
soon, that do make use of these atoms.

76
00:05:42.140 --> 00:05:45.300
And the other cool thing about
atoms is that they're reactive.

77
00:05:45.300 --> 00:05:49.563
So you could combine two different
atoms and when one of them updates,

78
00:05:49.563 --> 00:05:53.640
it's going to combine the value
of those atoms and update them.

79
00:05:53.640 --> 00:05:57.800
So it handles automatic subscriptions and
things like that.

80
00:05:57.800 --> 00:06:00.840
Again, there's pretty much
two different approaches.

81
00:06:00.840 --> 00:06:04.680
You should have stores when you
have complex logic requirements.

82
00:06:04.680 --> 00:06:06.856
When you don't want a piece of state or

83
00:06:06.856 --> 00:06:10.460
a piece of data to just change
from anywhere, then use a store,

84
00:06:10.460 --> 00:06:15.160
because it's going to give you a much more
controlled way of managing that state.

85
00:06:16.480 --> 00:06:19.520
And you can choose atoms if you want.

86
00:06:19.520 --> 00:06:23.923
If you have just state where it's like,
I know this can change from anywhere,

87
00:06:23.923 --> 00:06:25.520
I really don't care.

88
00:06:25.520 --> 00:06:29.558
It's just somewhere where it
might change externally, or

89
00:06:29.558 --> 00:06:34.889
it's something that we don't necessarily
need to have strict control over,

90
00:06:34.889 --> 00:06:40.320
and we also want it to be reactive so
that we could subscribe to it, et cetera.

91
00:06:40.320 --> 00:06:44.080
And again,
you could use both of them hand in hand.

