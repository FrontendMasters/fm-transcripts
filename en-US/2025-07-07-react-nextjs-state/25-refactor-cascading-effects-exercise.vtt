WEBVTT

1
00:00:00.240 --> 00:00:04.648
&gt;&gt; David Khourshid: We have
a lot of useeffects here and

2
00:00:04.648 --> 00:00:09.208
this is all powering this component

3
00:00:09.208 --> 00:00:13.920
where let's say that we have a form.

4
00:00:15.440 --> 00:00:18.822
I like to call this an I'm
feeling lucky page because it

5
00:00:18.822 --> 00:00:22.320
automatically chooses a flight and
a hotel for me.

6
00:00:22.320 --> 00:00:26.329
So if I, for example, want to go to
Tokyo and I put a start date and

7
00:00:26.329 --> 00:00:32.010
I put an end date, then it's automatically
going to trigger this flight search first.

8
00:00:32.010 --> 00:00:35.770
And then once it finds a flight,
it's going to find the appropriate hotel.

9
00:00:35.770 --> 00:00:40.967
And then whenever I change something, so
let's say I want to go to Berlin instead,

10
00:00:40.967 --> 00:00:46.090
it's going to restart that search and it's
going to restart that hotel search and

11
00:00:46.090 --> 00:00:50.570
same thing, if I change the date,
it's going to restart everything.

12
00:00:52.370 --> 00:00:56.987
So yeah, that's an example
of a feature that would be

13
00:00:56.987 --> 00:01:01.410
cool except the code for
it is a little bit of a mess.

14
00:01:02.450 --> 00:01:07.797
So what I want you to do is start
refactoring this into a reducer with

15
00:01:07.797 --> 00:01:13.250
events and then reduce the number
of use effects to a single effect.

16
00:01:20.300 --> 00:01:21.380
All right, so

17
00:01:21.380 --> 00:01:27.100
let's get rid of this use effect chain
that's causing us a lot of pain.

18
00:01:27.100 --> 00:01:30.060
I don't mean to rhyme, but
it just came out that way.

19
00:01:31.100 --> 00:01:33.740
First, let's set up our booking state.

20
00:01:33.740 --> 00:01:37.567
Because we do,
since this is going to be an event and

21
00:01:37.567 --> 00:01:41.399
state based approach,
we do want to use a reducer.

22
00:01:41.399 --> 00:01:45.740
It's not 100% necessary, but
it does really help here.

23
00:01:45.740 --> 00:01:51.600
So this could be in one of these
statuses either idle searching flights,

24
00:01:51.600 --> 00:01:54.290
searching hotels, or you know,

25
00:01:54.290 --> 00:01:59.300
maybe we have an error state and
then we have a bunch of inputs.

26
00:01:59.300 --> 00:02:04.060
And so these inputs are represented
by everything over here.

27
00:02:04.060 --> 00:02:10.990
So we have our destination,
our start date and also our end dates.

28
00:02:10.990 --> 00:02:16.990
And then we have a few other things to
add too where we want to represent the.

29
00:02:18.030 --> 00:02:20.270
For instance, the selected flight.

30
00:02:20.270 --> 00:02:23.848
And again this should
be selected flight id,

31
00:02:23.848 --> 00:02:29.790
the selected hotel id and also just
an error could be string or null.

32
00:02:29.790 --> 00:02:32.190
This again is how I would start out.

33
00:02:32.190 --> 00:02:37.150
And you could later use
discriminated unions if you want to.

34
00:02:38.220 --> 00:02:45.454
So then we are going to
actually create the reducer and

35
00:02:45.454 --> 00:02:51.580
yeah, so
let me just const booking reducer.

36
00:02:52.700 --> 00:02:54.700
We also need our actions as well.

37
00:02:54.700 --> 00:02:59.735
And so this is something where
it's really useful to first play

38
00:02:59.735 --> 00:03:05.730
around with the UI and actually see
what is happening at an abstract level.

39
00:03:05.730 --> 00:03:10.045
Because in this application we
don't really have events or

40
00:03:10.045 --> 00:03:13.650
we don't have actions or things like that.

41
00:03:13.650 --> 00:03:19.330
Instead it's just data changing that's
triggering all of these use effects.

42
00:03:19.330 --> 00:03:23.470
So the first one we
could see is that we're

43
00:03:23.470 --> 00:03:29.140
triggering something
when our inputs update.

44
00:03:29.140 --> 00:03:36.900
So we could, let's just type action here,
let's call this input updated.

45
00:03:36.900 --> 00:03:39.180
And so we have our inputs over here.

46
00:03:39.180 --> 00:03:43.572
And so this would be like the destination,
start date,

47
00:03:43.572 --> 00:03:46.660
end dates and it could be some of those.

48
00:03:47.940 --> 00:03:53.627
We also have the flight was updated,

49
00:03:53.627 --> 00:03:59.590
so type or sorry, the flight was.

50
00:03:59.590 --> 00:04:03.430
Yeah, so chosen or
I'm just going to call it updated.

51
00:04:03.430 --> 00:04:07.223
And then you know,
we have our flights data over here or

52
00:04:07.223 --> 00:04:11.590
the hotel was updated and
then we'll just stick with that.

53
00:04:11.590 --> 00:04:14.845
So I'm going to put state over here and

54
00:04:14.845 --> 00:04:19.430
then we have to actually
go through our actions.

55
00:04:19.430 --> 00:04:24.316
So if the input was updated,
then we are going

56
00:04:24.316 --> 00:04:29.370
to return the state with
the updated inputs.

57
00:04:29.370 --> 00:04:32.650
Now here's where things actually
get a little bit interesting.

58
00:04:36.170 --> 00:04:42.490
Let's const inputs equals
the state inputs and everything.

59
00:04:42.490 --> 00:04:44.970
So we actually don't need to do this.

60
00:04:48.740 --> 00:04:53.000
Now if we have the inputs.destination and

61
00:04:53.000 --> 00:04:58.323
we have the inputs start date and
the inputs end date,

62
00:04:58.323 --> 00:05:04.260
then we actually want to go
directly to searching flights.

63
00:05:05.540 --> 00:05:10.340
So this is something that we
previously used a useeffect for.

64
00:05:10.340 --> 00:05:14.922
So you could see over here we're
triggering that whenever we have all

65
00:05:14.922 --> 00:05:20.230
three of these things we set issearching
flights to true and error to null.

66
00:05:20.230 --> 00:05:25.880
And so instead we can avoid a rerender,
and we could centralize that logic.

67
00:05:25.880 --> 00:05:30.538
So we could even add a comment here
that say if all the inputs are provided,

68
00:05:30.538 --> 00:05:33.670
then we want to trigger flight search.

69
00:05:33.670 --> 00:05:39.686
So when the flight is updated we
immediately want to start searching for

70
00:05:39.686 --> 00:05:44.010
the hotels, but
we also want to have our flight id.

71
00:05:45.930 --> 00:05:51.103
And then when the hotel
is updated we want to,

72
00:05:51.103 --> 00:05:59.050
we want to set the hotel ID and
then just go back to an idle state.

73
00:05:59.050 --> 00:06:03.751
And so what this is going to do, and
I'll just show you the end result is

74
00:06:03.751 --> 00:06:08.550
it's going to reduce the number of
useeffects we have down to one.

75
00:06:08.550 --> 00:06:14.500
And the reason that it's only one instead
of all of these four is that now we're

76
00:06:14.500 --> 00:06:20.950
basing what we should do next on what
the state is, so what the finite state is.

77
00:06:20.950 --> 00:06:25.858
So if we go to effects solution
page we could see we only have

78
00:06:25.858 --> 00:06:27.670
a single use effect.

79
00:06:27.670 --> 00:06:32.813
Now we have our reducer over here and
in this use effect

80
00:06:32.813 --> 00:06:38.060
we're determining what to
do based on the status.

81
00:06:38.060 --> 00:06:42.344
So if the status is search flights, this
is where we actually start searching for

82
00:06:42.344 --> 00:06:43.500
the flights.

83
00:06:43.500 --> 00:06:46.780
If the status is search hotels,
then we search hotels in here.

84
00:06:46.780 --> 00:06:50.060
And all of this is based on states.

85
00:06:50.060 --> 00:06:54.460
So you can even abstract this
into a custom component.

86
00:06:54.460 --> 00:06:58.540
Or you could abstract both or sorry,
not a custom component but a custom hook.

87
00:06:58.540 --> 00:07:03.442
Or you could abstract both of
these into a custom hook and

88
00:07:03.442 --> 00:07:08.449
it would look something like
function usetrip search and

89
00:07:08.449 --> 00:07:15.770
you would have this reducer, you would
have your useeffect from below over there.

90
00:07:15.770 --> 00:07:21.718
So this would be whatever that
useeffect block was below.

91
00:07:21.718 --> 00:07:27.200
And then you would just return state and
dispatch as a table tuple.

92
00:07:27.200 --> 00:07:32.175
And then what you could do
is instead of all of this,

93
00:07:32.175 --> 00:07:37.760
you could just use trip search and
all of that logic.

94
00:07:37.760 --> 00:07:46.640
Both the states and the effects
are centralized in one single hook.

95
00:07:46.640 --> 00:07:49.840
So we've eliminated the number
of useeffects we use.

96
00:07:49.840 --> 00:07:53.650
Everything is declarative,
we have dispatches.

97
00:07:55.010 --> 00:08:02.754
But yeah, so that's the general idea
of reducing chained use effects.

98
00:08:02.754 --> 00:08:06.130
So, any questions on that?

99
00:08:07.890 --> 00:08:12.050
By the way,
the solution in this is not perfect.

100
00:08:12.050 --> 00:08:17.042
So I invite you to take a look, see if
there are things that can be improved and

101
00:08:17.042 --> 00:08:18.620
fix them yourself.

102
00:08:18.620 --> 00:08:23.260
But it does go to show how we can
remove those unnecessary use effects.

