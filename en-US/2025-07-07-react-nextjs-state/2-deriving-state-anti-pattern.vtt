WEBVTT

1
00:00:00.160 --> 00:00:03.548
&gt;&gt; David Khourshid: The first thing
that we're going to be talking about

2
00:00:03.548 --> 00:00:07.440
is actually basic react
state anti patterns.

3
00:00:07.440 --> 00:00:11.299
It's the beginning of the workshop, so
we're not going to be getting too deep

4
00:00:11.299 --> 00:00:14.080
into philosophy or principles or
anything like that.

5
00:00:14.080 --> 00:00:19.263
Instead, I want to cover three
very important state ante patterns

6
00:00:19.263 --> 00:00:25.570
that I see in pretty much any project that
I work in or I have looked at in reaction.

7
00:00:26.920 --> 00:00:29.800
The first one is deriving states.

8
00:00:30.840 --> 00:00:37.000
So we want to learn when we should
calculate values instead of storing them.

9
00:00:37.000 --> 00:00:40.920
And this is a pattern
that I see all the time.

10
00:00:40.920 --> 00:00:45.511
So the way that you recognize this pattern
is that you might see a use state and

11
00:00:45.511 --> 00:00:48.382
a use effect combination
where the use effect is

12
00:00:48.382 --> 00:00:51.590
the one that's calculating new states.

13
00:00:51.590 --> 00:00:55.960
And this seems really convenient because
the whole way that useEffect works

14
00:00:55.960 --> 00:01:00.806
with dependency arrays is that whenever
any value in the dependency array changes,

15
00:01:00.806 --> 00:01:04.790
it's going to execute something
inside that useEffect function.

16
00:01:04.790 --> 00:01:08.075
And so you might think, okay,
this is a great place for

17
00:01:08.075 --> 00:01:11.670
me to calculate some new states,
but it's actually not.

18
00:01:11.670 --> 00:01:15.846
This is one of those fun ones where
you could just go into a code base and

19
00:01:15.846 --> 00:01:17.934
just start refactoring your way.

20
00:01:17.934 --> 00:01:22.760
So NC pattern scratch.

21
00:01:22.760 --> 00:01:27.598
So, for example, let's say that
we're going to make a simple app and

22
00:01:27.598 --> 00:01:30.961
let's say that we're
doing a coffee order app.

23
00:01:30.961 --> 00:01:37.958
So I might have orders,
setOrders, useState-Order,

24
00:01:37.958 --> 00:01:42.912
and these might be just a string for now,

25
00:01:42.912 --> 00:01:48.060
or actually they're gonna be orders.

26
00:01:48.060 --> 00:01:51.660
So let's make a proper order type.

27
00:01:51.660 --> 00:01:55.100
And so I also need to import use date.

28
00:01:56.620 --> 00:02:01.344
All right, so
let's say that we have an order and

29
00:02:01.344 --> 00:02:06.644
the order can be for
a cappuccino, espresso, latte,

30
00:02:06.644 --> 00:02:11.482
mocha, stuff like that in
each order has a price,

31
00:02:11.482 --> 00:02:15.390
which has a number and also a quantity.

32
00:02:15.390 --> 00:02:19.770
So you might have seen that like,
okay, we have our orders and

33
00:02:19.770 --> 00:02:23.476
we probably have some UI
to update those orders, but

34
00:02:23.476 --> 00:02:29.310
we also want to calculate the total of
these orders so we'll have total settotal.

35
00:02:29.310 --> 00:02:33.630
And also there's a reason that I
do have claw turned on right now.

36
00:02:33.630 --> 00:02:37.590
It's because it's probably going to
suggest the wrong thing, which is great.

37
00:02:37.590 --> 00:02:41.362
Claude makes mistakes,
just like humans make mistakes, and

38
00:02:41.362 --> 00:02:44.070
other AI powered coding assistants too.

39
00:02:44.070 --> 00:02:47.910
So you can see immediately it's
trying to do a useEffect, why?

40
00:02:47.910 --> 00:02:52.310
Because it's going to calculate
the totals in that useEffect.

41
00:02:52.310 --> 00:02:56.950
So I mean, raise your hand if you've
seen this pattern in your code base.

42
00:02:56.950 --> 00:02:58.470
Probably everyone.

43
00:02:58.470 --> 00:03:00.710
Yeah, it's just everywhere.

44
00:03:00.710 --> 00:03:02.930
So what is so wrong with this?

45
00:03:02.930 --> 00:03:05.472
Well, we have an unnecessary use effect,

46
00:03:05.472 --> 00:03:09.650
which is going to cause an unnecessary
render when the orders change.

47
00:03:10.930 --> 00:03:13.570
And really, this is derived state.

48
00:03:13.570 --> 00:03:17.010
So I want you to recognize
this pattern over here.

49
00:03:17.010 --> 00:03:22.530
We have a useState, and then we have a
useEffect that's setting that used state.

50
00:03:22.530 --> 00:03:24.610
So what's the alternative here?

51
00:03:24.610 --> 00:03:30.525
Well, we can actually just completely
get rid of that useEffect and

52
00:03:30.525 --> 00:03:34.200
just set the totals directly.

53
00:03:34.200 --> 00:03:37.000
And so
this is really all that you need to do.

54
00:03:37.000 --> 00:03:42.114
Then, of course, you could show
the orders, show the total amounts,

55
00:03:42.114 --> 00:03:46.120
and you might have some UI for
setting the orders too.

56
00:03:46.120 --> 00:03:51.640
But the point is that we are calculating
this derived state directly inside render.

57
00:03:51.640 --> 00:03:54.200
And I know what some of you
might be thinking, too.

58
00:03:54.200 --> 00:03:56.360
You might be thinking,
okay, yeah, this is great.

59
00:03:56.360 --> 00:03:58.920
So I'm just going to wrap
this in a UseMemo and go.

60
00:03:59.980 --> 00:04:02.840
Hold on.
Before you start using UseMemo,

61
00:04:02.840 --> 00:04:04.860
just start with this.

62
00:04:04.860 --> 00:04:09.660
Calculate states directly in
render when it can be derived.

63
00:04:11.180 --> 00:04:14.032
We have our source of truth here,
which is the orders,

64
00:04:14.032 --> 00:04:17.100
and we have the total,
which can be derived from orders.

65
00:04:17.100 --> 00:04:21.922
Now, this is an obvious example,
but as you'll see in the exercise,

66
00:04:21.922 --> 00:04:24.946
some of these might be
a little bit hidden and

67
00:04:24.946 --> 00:04:30.360
harder to recognize, but once you see it,
you really can't unsee it.

68
00:04:30.360 --> 00:04:33.846
Claude's even recommending
that I use Memo, but

69
00:04:33.846 --> 00:04:39.160
the idea is that you can compute states
directly in render and then use that.

