WEBVTT

1
00:00:00.000 --> 00:00:01.920
&gt;&gt; David Khourshid: What are we
going to get out of this workshop?

2
00:00:01.920 --> 00:00:06.160
We're going to learn core principles
of state management that will help you

3
00:00:06.160 --> 00:00:10.480
architect these solutions that
scale with application complexity.

4
00:00:10.480 --> 00:00:14.200
And even though that we're going to
be working on a React Next JS app,

5
00:00:14.200 --> 00:00:16.702
all of these concepts
that you learned today,

6
00:00:16.702 --> 00:00:20.120
they're going to be applicable
to any front end application.

7
00:00:20.120 --> 00:00:22.000
Regardless of which framework you use.

8
00:00:22.000 --> 00:00:24.960
We're going to keep it high level and
general.

9
00:00:24.960 --> 00:00:30.400
So we're not going to be going in
depth into specialized hooks or

10
00:00:30.400 --> 00:00:37.470
the nuances of how Next JS does things, or
the most shiny newest features of React.

11
00:00:38.750 --> 00:00:42.501
There's actually a lot of great front
end masters courses already on that and

12
00:00:42.501 --> 00:00:45.470
I highly encourage you to check those out.

13
00:00:45.470 --> 00:00:49.584
But we are going to at the same time
be looking at common React pitfalls and

14
00:00:49.584 --> 00:00:52.430
anti patterns that you may have run into.

15
00:00:52.430 --> 00:00:57.170
And in general, we're going to be looking
at opportunities to improve your code

16
00:00:57.170 --> 00:01:01.420
base and make it more clear,
understandable and maintainable.

17
00:01:01.420 --> 00:01:04.766
Because at the end of the day,
we want to model and

18
00:01:04.766 --> 00:01:09.742
manage our state in a way that is easy
to maintain, it's easy to update,

19
00:01:09.742 --> 00:01:13.259
and it's easy for
our team to contribute to.

20
00:01:13.259 --> 00:01:18.071
And so the skills and concepts that you
learn today are meant to be evergreen,

21
00:01:18.071 --> 00:01:21.181
they're meant to be,
like I said, general, and

22
00:01:21.181 --> 00:01:25.328
they're meant to be skills that
stay true whether React evolves,

23
00:01:25.328 --> 00:01:29.870
you use different libraries or
maybe you work in different frameworks.

24
00:01:31.150 --> 00:01:36.990
All right, so the structure of this
workshop, you should all have the repo.

25
00:01:36.990 --> 00:01:43.646
It's GitHub.com davidcapiano Frontend
masters state Workshop this workshop is

26
00:01:43.646 --> 00:01:50.200
split up into many lessons and exercises
like you could see on the screen.

27
00:01:50.200 --> 00:01:52.626
Hopefully we'll be going
through all of them and

28
00:01:52.626 --> 00:01:55.560
we're going to be working
on many of them together.

29
00:01:55.560 --> 00:02:01.167
And I'm also going to hand a lot of these
exercises off to you to start off and

30
00:02:01.167 --> 00:02:02.120
work on.

31
00:02:02.120 --> 00:02:06.992
All of these lessons are designed to teach
you general state management concepts and

32
00:02:06.992 --> 00:02:11.451
there's many that are actually also
going to teach you specific patterns and

33
00:02:11.451 --> 00:02:14.600
anti patterns for React applications.

34
00:02:14.600 --> 00:02:20.537
So I strongly encourage you to apply
these lessons to your own code bases or

35
00:02:20.537 --> 00:02:23.810
even other open source React projects.

36
00:02:23.810 --> 00:02:29.604
Because I guarantee that even though we
have exercises specific to this workshop,

37
00:02:29.604 --> 00:02:34.485
you are going to find things in your
code bases where it's like, wow,

38
00:02:34.485 --> 00:02:36.490
that pattern applies here.

39
00:02:36.490 --> 00:02:41.900
So I could actually refactor my
code base and make these changes.

40
00:02:41.900 --> 00:02:45.525
Also going to be showing you some third
party libraries that you can use to

41
00:02:45.525 --> 00:02:49.151
help out and I do want you to understand
the principles behind these third

42
00:02:49.151 --> 00:02:52.460
party libraries and the motivations for
why you would use them.

43
00:02:52.460 --> 00:02:57.448
But again, I'm not telling you
that every single application you

44
00:02:57.448 --> 00:03:00.540
use needs to have all of these tools.

45
00:03:00.540 --> 00:03:02.860
That's absolutely not necessary.

46
00:03:02.860 --> 00:03:05.261
And especially for state management,

47
00:03:05.261 --> 00:03:09.790
you do not need to use third party
libraries for state management.

48
00:03:09.790 --> 00:03:11.026
Like many developers,

49
00:03:11.026 --> 00:03:14.990
I have been through the struggles of
managing state in large applications.

50
00:03:16.030 --> 00:03:20.467
I worked in multi step forums where
we did a lot of bespoke PHP and

51
00:03:20.467 --> 00:03:24.670
jQuery with very complex flows and
async data handling.

52
00:03:24.670 --> 00:03:28.249
And I was doing this back in
the angular and backbone days and

53
00:03:28.249 --> 00:03:33.230
unfortunately we weren't even
allowed to use those frameworks.

54
00:03:33.230 --> 00:03:36.957
So when I was a junior developer
I was also a visual learner and

55
00:03:36.957 --> 00:03:40.630
I really wanted to make sense
of all this spaghetti logic.

56
00:03:40.630 --> 00:03:45.227
So I started learning about these
things called state machines and

57
00:03:45.227 --> 00:03:46.630
even state charts.

58
00:03:46.630 --> 00:03:49.752
And I created a library called XState.

59
00:03:49.752 --> 00:03:53.590
And XState is a library for
managing state machines and state charts.

60
00:03:53.590 --> 00:03:56.640
And I do have a couple of
courses on frontend masters for

61
00:03:56.640 --> 00:03:58.790
Xstate if you want to learn about it.

62
00:03:58.790 --> 00:04:03.030
But that is not what we're going
to be doing in this workshop.

63
00:04:03.030 --> 00:04:07.763
Instead we're actually going to be taking
the main principles of event driven state

64
00:04:07.763 --> 00:04:12.310
management and that's honestly at the core
of state machines and statecharts.

65
00:04:12.310 --> 00:04:15.830
And we're going to be applying those
principles to our React applications.

66
00:04:17.590 --> 00:04:19.750
What is our purpose in doing that?

67
00:04:19.750 --> 00:04:24.390
First of all, we want to create these
apps with understandability at its core.

68
00:04:24.390 --> 00:04:27.190
Again, you want to be able
to understand your logic.

69
00:04:27.190 --> 00:04:32.360
You want your team members to understand
what all of the logic in your application.

70
00:04:32.360 --> 00:04:37.066
You also want to be able to understand all
of the use cases and all of the edge cases

71
00:04:37.066 --> 00:04:41.421
and train yourself to think of everything
that can possibly happen in your

72
00:04:41.421 --> 00:04:45.800
application to prevent impossible
states and impossible transitions.

73
00:04:47.000 --> 00:04:50.680
We also want to be able to
work in legacy applications so

74
00:04:50.680 --> 00:04:54.600
that we could understand and
refactor messy legacy code so

75
00:04:54.600 --> 00:04:59.320
that it becomes a lot easier to
add new features and fix bugs.

76
00:04:59.320 --> 00:05:04.160
And it's 2025,
we have AI powered coding tools.

77
00:05:04.160 --> 00:05:07.400
In fact,
our coding is going to be done in cursor.

78
00:05:07.400 --> 00:05:10.659
And honestly,
when your app is organized and

79
00:05:10.659 --> 00:05:15.640
your app logic is clear to a human,
it's also very clear to an LLM.

80
00:05:15.640 --> 00:05:21.155
So if you're using a lot of AI assistance,
then having clarity in your code and

81
00:05:21.155 --> 00:05:26.850
showing the LLM, this is my intention for
this feature is really going to help.

82
00:05:26.850 --> 00:05:31.319
Just to explain the workshop
a little bit more so the structure,

83
00:05:31.319 --> 00:05:36.617
we have a bunch of exercises and they're
all prefixed with Exercise Dash and

84
00:05:36.617 --> 00:05:41.665
so the first one that we're going to
be starting with is the anti patterns

85
00:05:41.665 --> 00:05:47.330
exercise and you're going to see a few
files here so you're going to see a page.

86
00:05:47.330 --> 00:05:50.930
This is going to be the main page
that you're going to be working on.

87
00:05:50.930 --> 00:05:55.333
You're going to see a readme that includes
the contents of this lesson as well

88
00:05:55.333 --> 00:05:57.710
as a description of the exercise.

89
00:05:57.710 --> 00:06:02.220
And we're also going to have a scratch
pad where you could basically just write

90
00:06:02.220 --> 00:06:03.390
whatever you want.

91
00:06:03.390 --> 00:06:08.293
You could also do whatever you
want in page tsx especially if you

92
00:06:08.293 --> 00:06:10.710
clone the repo, it's yours.

93
00:06:10.710 --> 00:06:12.270
So you could do whatever you want.

94
00:06:12.270 --> 00:06:17.240
And if you want to peek into the solution
or I should probably say a solution

95
00:06:17.240 --> 00:06:22.050
again there's no one size fits all for
state management so this is one of

96
00:06:22.050 --> 00:06:26.810
many possible solutions depending
on your requirements for the app.

97
00:06:26.810 --> 00:06:31.793
But if you want to peek in here while
you're working on these exercises then

98
00:06:31.793 --> 00:06:34.970
this is an example solution
that will help you.

