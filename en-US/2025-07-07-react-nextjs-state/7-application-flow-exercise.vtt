WEBVTT

1
00:00:00.240 --> 00:00:00.968
&gt;&gt; David Khourshid: Okay, so

2
00:00:00.968 --> 00:00:05.520
what we're going to do is we're
just going to brainstorm.

3
00:00:05.520 --> 00:00:08.833
This can be for
a hypothetical flights booking app, or

4
00:00:08.833 --> 00:00:12.440
it could be for any sort of
project that you're working on.

5
00:00:12.440 --> 00:00:18.238
We're just going to take a nice calm five
minutes, and I want you to just roughly

6
00:00:18.238 --> 00:00:24.400
diagram those three different types of
diagrams for whatever you're thinking of.

7
00:00:24.400 --> 00:00:26.978
So, for example, for
a flight booking flow,

8
00:00:26.978 --> 00:00:31.807
you might want to document the different
entities, such as the flights, the hotels,

9
00:00:31.807 --> 00:00:36.200
the bookings, etc, or
you might want to model something else.

10
00:00:36.200 --> 00:00:39.040
Then you would want to
model the sequence diagram.

11
00:00:39.040 --> 00:00:43.240
So basically, how do the different
actors talk to each other?

12
00:00:43.240 --> 00:00:47.160
So you might have a flight search service,
et cetera, and

13
00:00:47.160 --> 00:00:50.200
then just briefly document the flow.

14
00:00:50.200 --> 00:00:55.000
Again, this does not need to be for
this travel travel application.

15
00:00:55.000 --> 00:00:57.362
It could be for
anything that you're working on or

16
00:00:57.362 --> 00:01:00.560
anything that you might
want to build yourself.

17
00:01:00.560 --> 00:01:05.316
So the point of this is just to get
used to thinking about modeling your

18
00:01:05.316 --> 00:01:06.800
application state.

19
00:01:13.200 --> 00:01:17.481
All right, so let's talk about
just making a flow for, again,

20
00:01:17.481 --> 00:01:19.320
anything you wanted to do.

21
00:01:19.320 --> 00:01:20.850
It could be a flight booking flow.

22
00:01:20.850 --> 00:01:25.674
Or what I'm actually going to
do is I was just on Airbnb, and

23
00:01:25.674 --> 00:01:32.600
they have a new design, a new interesting
flow for actually booking a place.

24
00:01:32.600 --> 00:01:37.880
So the idea is that with Airbnb,
we have different entities.

25
00:01:37.880 --> 00:01:43.320
So first of all, we have the destinations.

26
00:01:43.320 --> 00:01:51.590
So we could say we have destinations and
we also have different types of.

27
00:01:51.590 --> 00:01:53.670
Let's call them homes.

28
00:01:53.670 --> 00:01:58.467
So a destination, you know,
it might have, like an id, and

29
00:01:58.467 --> 00:02:03.546
a home might have, like an id,
but also it has a destination id,

30
00:02:03.546 --> 00:02:07.217
because these homes
don't just roam around,

31
00:02:07.217 --> 00:02:11.030
they're fixed to a certain destination.

32
00:02:11.030 --> 00:02:13.670
And of course, we also have users as well.

33
00:02:13.670 --> 00:02:18.180
So a user, they have a name,
they have an id.

34
00:02:18.180 --> 00:02:20.260
This is just keeping things very simple.

35
00:02:20.260 --> 00:02:24.754
But this goes to show you
that modeling these three

36
00:02:24.754 --> 00:02:28.180
different things can be very simple.

37
00:02:28.180 --> 00:02:33.460
You don't have to prescribe to any
specific framework or anything like that.

38
00:02:33.460 --> 00:02:39.140
Then we also have the sequence
diagram where once we make a search.

39
00:02:39.140 --> 00:02:43.730
So in the ui,
we are actually calling out to.

40
00:02:43.730 --> 00:02:46.050
Let's just call this the Airbnb.

41
00:02:49.170 --> 00:02:51.650
Airbnb search service.

42
00:02:52.930 --> 00:02:59.730
And so we are saying,
find search results for this query.

43
00:02:59.730 --> 00:03:04.499
And the query is like, where, check in,

44
00:03:04.499 --> 00:03:09.020
check out, and number of guests.

45
00:03:09.020 --> 00:03:11.420
Again, I'm doing this in plain language.

46
00:03:11.420 --> 00:03:14.060
And so the Airbnb search service.

47
00:03:14.060 --> 00:03:19.060
So Airbnb search service
will respond with the UI and

48
00:03:19.060 --> 00:03:23.740
give us results, and
then we will select one.

49
00:03:23.740 --> 00:03:27.902
So this is one of those
relationships where

50
00:03:27.902 --> 00:03:31.718
the UI is basically talking to itself,

51
00:03:31.718 --> 00:03:36.700
where we select a home and
then we start talking to.

52
00:03:38.140 --> 00:03:43.165
Let's just call this the Airbnb API,
where we will say that we want

53
00:03:43.165 --> 00:03:48.098
to make a booking, and then
the Airbnb API will go back to the UI and

54
00:03:48.098 --> 00:03:52.700
say, okay,
here's the payments information.

55
00:03:52.700 --> 00:03:59.150
And then the UI will communicate
with the payments processor, etc.

56
00:04:00.430 --> 00:04:03.470
And then there's the state diagram.

57
00:04:03.470 --> 00:04:09.310
So what's interesting with Airbnb is it
actually has a new flow in that top bar.

58
00:04:09.310 --> 00:04:10.670
So it's actually pretty cool.

59
00:04:10.670 --> 00:04:16.880
If you go to airbnb.com you
select Unexpected state,

60
00:04:16.880 --> 00:04:21.200
but you select a destination or yeah,

61
00:04:21.200 --> 00:04:25.790
you search destinations like Chicago.

62
00:04:27.230 --> 00:04:30.030
Oops, Chicago.

63
00:04:30.030 --> 00:04:34.939
And then it immediately transitions
you to check in, check out, and

64
00:04:34.939 --> 00:04:39.350
then you add your guests and
then it takes you to a search page.

65
00:04:39.350 --> 00:04:42.270
I have no idea what I just searched for,
but these houses look really nice.

66
00:04:43.310 --> 00:04:46.990
And then it just shows you all of
these search results over here.

67
00:04:46.990 --> 00:04:52.051
So we can sort of model that
flow where first we say,

68
00:04:52.051 --> 00:04:57.939
starts with destination,
when the destination is input,

69
00:04:57.939 --> 00:05:03.588
put in the check in date,
then put in the checkout state,

70
00:05:03.588 --> 00:05:06.670
then add the number of guests.

71
00:05:09.470 --> 00:05:13.412
And then when the user presses search,

72
00:05:13.412 --> 00:05:17.480
it'll take us to a search results page.

73
00:05:19.960 --> 00:05:25.800
The search results will be loading and
eventually show up.

74
00:05:25.800 --> 00:05:30.839
The user can click on one of the homes and

75
00:05:30.839 --> 00:05:34.840
be taken to a details page.

76
00:05:34.840 --> 00:05:40.280
They can go back from the details
page back to the search page.

77
00:05:41.490 --> 00:05:46.290
So these don't really look
like diagrams right now.

78
00:05:46.290 --> 00:05:48.730
They're really rough
representations of them.

79
00:05:48.730 --> 00:05:53.114
But honestly, just doing this is
going to be very impactful for

80
00:05:53.114 --> 00:05:57.410
just documenting what
happens in your application.

81
00:05:57.410 --> 00:06:01.024
And so what we could actually do is,
for example,

82
00:06:01.024 --> 00:06:04.130
I could ask here, we'll just do a new one.

83
00:06:05.330 --> 00:06:11.710
I could ask Claude to say,
make this a mermaid diagram.

84
00:06:13.790 --> 00:06:18.790
And so what it's going to
do is it's going to create

85
00:06:18.790 --> 00:06:23.908
that diagram and
then we could actually copy this and

86
00:06:23.908 --> 00:06:29.630
go to something like,
I think it's called Mermaid Live.

87
00:06:30.750 --> 00:06:32.110
And then we could paste that.

88
00:06:33.800 --> 00:06:39.680
And so just from that, we have our
representation of the different

89
00:06:39.680 --> 00:06:45.800
entities in our application and
we could even have it build it out.

90
00:06:45.800 --> 00:06:49.000
So same thing with this
rough sequence diagram.

91
00:06:49.000 --> 00:06:55.400
So create a sequence diagram in Mermaid.

92
00:06:55.400 --> 00:06:59.740
And also you could ask it to
add things I might have missed.

93
00:07:03.490 --> 00:07:05.798
And so it's going to generate that,

94
00:07:05.798 --> 00:07:08.930
and then we could just use
that thinking for a bit.

95
00:07:10.610 --> 00:07:16.297
But the main purpose of this is that even
though you're writing in plain language,

96
00:07:16.297 --> 00:07:21.091
having this is going to be very useful for
not only your teammates, but

97
00:07:21.091 --> 00:07:22.810
also assistive coding.

98
00:07:22.810 --> 00:07:24.370
Tools and.

99
00:07:24.370 --> 00:07:25.394
Wow.
Okay, so

100
00:07:25.394 --> 00:07:29.409
it does have a very comprehensive,
sort of hard to zoom here, but

101
00:07:29.409 --> 00:07:34.090
a comprehensive flow of how the different
actors interact with each other.

102
00:07:34.090 --> 00:07:38.070
So once we have search results,
we request home details,

103
00:07:38.070 --> 00:07:43.930
the user initiates booking, and
that's going to create a booking request.

104
00:07:43.930 --> 00:07:50.730
This is probably a lot easier to see
in Swimlanes IO, but you get the idea.

105
00:07:50.730 --> 00:07:55.260
You have diagrams that you could generate
just from the plain text that you write.

106
00:07:55.260 --> 00:08:01.130
And so that's why my point in all
of this is just write this out.

107
00:08:01.130 --> 00:08:05.970
It takes a minimum amount of effort and
really you could derive so much from this.

108
00:08:07.330 --> 00:08:09.090
So let's do one more.

109
00:08:09.090 --> 00:08:15.317
We're gonna take this state diagram and
make this a mermaid diagram too,

110
00:08:15.317 --> 00:08:20.050
because mermaid also supports
state diagrams as well.

111
00:08:23.740 --> 00:08:25.980
All right, so it's going to generate that.

112
00:08:27.340 --> 00:08:28.300
And now that we.

113
00:08:28.300 --> 00:08:32.540
Oops, we actually got it.

114
00:08:33.980 --> 00:08:38.620
Now that we have that state diagram,
we could visualize it in Mermaid.

115
00:08:40.380 --> 00:08:43.660
And it's a bit broken.

116
00:08:43.660 --> 00:08:44.860
See if this does anything.

117
00:08:44.860 --> 00:08:47.150
Nope, it requires you to sign in.

118
00:08:47.150 --> 00:08:51.780
So let me do something

119
00:08:51.780 --> 00:08:56.157
different, okay.

120
00:08:56.157 --> 00:08:58.840
Make this an Xstate machine just for fun.

121
00:09:00.520 --> 00:09:01.720
Let's see what happens.

122
00:09:05.240 --> 00:09:08.280
It's actually filling in context and
things like that.

123
00:09:10.120 --> 00:09:15.514
And this actually goes to show you too,
that you can generate these machines and

124
00:09:15.514 --> 00:09:21.330
not even use them in your own application,
but even use them just for visualization.

125
00:09:21.330 --> 00:09:27.611
So if we go back to state new and
we import this,

126
00:09:27.611 --> 00:09:31.810
then hopefully, there we go.

127
00:09:32.930 --> 00:09:38.680
We have our entire flow documented right
here and able to be exported visually.

128
00:09:38.680 --> 00:09:41.880
And you saw that it really didn't
take much effort to do that.

129
00:09:41.880 --> 00:09:46.605
So we're entering the destination,
then once we input the destination,

130
00:09:46.605 --> 00:09:50.430
we're entering the check in time,
then the checkout time,

131
00:09:50.430 --> 00:09:54.120
then the number of guests,
and then we start searching.

132
00:09:54.120 --> 00:09:55.880
So we search for homes.

133
00:09:55.880 --> 00:09:58.516
It also handles things
like if there's an error,

134
00:09:58.516 --> 00:10:01.480
we should handle that error and retry.

135
00:10:01.480 --> 00:10:03.398
And then we're viewing
the search results and

136
00:10:03.398 --> 00:10:07.160
then we're viewing the home details and
then we go back to the results.

137
00:10:07.160 --> 00:10:10.554
All of this information is
really important to keep in mind

138
00:10:10.554 --> 00:10:15.266
when you're either building your applogic
or working on existing legacy apps,

139
00:10:15.266 --> 00:10:20.040
where you might not be sure, like,
okay, how does this flow work?

140
00:10:20.040 --> 00:10:25.251
Using these AI powered coding assistants,
or even just going through the UI and

141
00:10:25.251 --> 00:10:30.153
documenting it yourself makes the
application logic so much more clear and

142
00:10:30.153 --> 00:10:34.895
it gives you a good foundation for
if you need to refactor your code base or

143
00:10:34.895 --> 00:10:39.540
you need to add features or
fix bugs, you do have that outline.

144
00:10:39.540 --> 00:10:44.260
So in the same way that we wouldn't
build a house without a blueprint,

145
00:10:44.260 --> 00:10:48.260
I would not work on an application
without documenting it or

146
00:10:48.260 --> 00:10:52.260
modeling it,
at least at a rough text-only level.

147
00:10:52.260 --> 00:10:54.844
So this just shows you how powerful and

148
00:10:54.844 --> 00:10:59.620
how easy it is to actually
document your application logic.

149
00:10:59.620 --> 00:11:04.660
I like to have a Flows MD file where you
basically have all of this documentation.

150
00:11:04.660 --> 00:11:09.050
Again, it doesn't need to be a specific
format and it just needs to be

151
00:11:09.050 --> 00:11:13.746
somewhere where both your teammates and
also the LLMs and AI tools that you

152
00:11:13.746 --> 00:11:18.390
use can easily read it and understand
at a higher level what's going on.

153
00:11:19.430 --> 00:11:21.030
So any questions about that?

154
00:11:29.350 --> 00:11:33.866
Okay, there's a comment in the chat
that they can imagine that

155
00:11:33.866 --> 00:11:38.553
hooking something like this up
alongside Storybook would really

156
00:11:38.553 --> 00:11:41.950
help from documentation of components.

157
00:11:41.950 --> 00:11:42.990
Yeah, that's true.

158
00:11:42.990 --> 00:11:45.688
And another thing that I really want to

159
00:11:45.688 --> 00:11:50.990
emphasize is keeping this inside of
your code base has two benefits.

160
00:11:50.990 --> 00:11:54.727
First of all, like I talked about,
both your teammates and

161
00:11:54.727 --> 00:11:59.062
AI powered coding tools are going to
be able to take that as context and

162
00:11:59.062 --> 00:12:01.480
to better understand your code base.

163
00:12:01.480 --> 00:12:06.120
And the second thing is it's version
controlled alongside your application.

164
00:12:06.120 --> 00:12:08.661
If you're storing it
somewhere else like notion,

165
00:12:08.661 --> 00:12:10.680
that becomes a lot more difficult to do.

166
00:12:11.800 --> 00:12:16.840
So that's why I like having a Flows MD
file just documenting the app logic.

167
00:12:16.840 --> 00:12:21.320
Or you could shove it into the readme
MD however you and your team prefers.

