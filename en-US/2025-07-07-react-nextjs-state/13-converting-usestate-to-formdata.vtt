WEBVTT

1
00:00:00.240 --> 00:00:03.161
&gt;&gt; David Khourshid: For the next exercise,
I'm not going to actually have you do

2
00:00:03.161 --> 00:00:05.520
this, but
we're going to be doing it together.

3
00:00:06.960 --> 00:00:11.914
I just want to show you how we could
use these native form tools that

4
00:00:11.914 --> 00:00:16.598
we have built into the browser and
built into Next JS instead of

5
00:00:16.598 --> 00:00:20.586
having to manage a lot of
use dates with those forms.

6
00:00:20.586 --> 00:00:24.414
So gonna get rid of that and

7
00:00:24.414 --> 00:00:31.550
then we are going to go to
see exercise form page.

8
00:00:33.070 --> 00:00:37.550
And over here we,
we definitely have a bigger form.

9
00:00:37.550 --> 00:00:43.150
So we are, we're going to
definitely simplify this a lot.

10
00:00:43.150 --> 00:00:46.510
At the very least,
we do have our combined data over here.

11
00:00:46.510 --> 00:00:48.110
So we have our travel form data.

12
00:00:48.110 --> 00:00:51.625
And just to show you what
this looks like in the ui,

13
00:00:51.625 --> 00:00:56.314
if we go to form, this is a form for
entering travel information and

14
00:00:56.314 --> 00:01:01.790
there's a lot of fields in here,
which is why I'm showing you this pattern.

15
00:01:01.790 --> 00:01:05.790
Because doing this with just use dates,
it can be tedious.

16
00:01:05.790 --> 00:01:08.895
You have to have a use date for
first name, last name, birthday,

17
00:01:08.895 --> 00:01:10.430
Passport, Origin City, etc.

18
00:01:14.910 --> 00:01:16.750
I feel like 2000.

19
00:01:16.750 --> 00:01:19.720
Yeah, I feel old because 2000 I think,
okay,

20
00:01:19.720 --> 00:01:23.810
there's kids that are born in 2000,
but it's all grown adults.

21
00:01:23.810 --> 00:01:25.290
It's very weird.

22
00:01:25.290 --> 00:01:29.228
But anyway, you know,
you have your passport number there and

23
00:01:29.228 --> 00:01:33.239
the idea behind this is we want to
have server side validation and

24
00:01:33.239 --> 00:01:36.409
that's what you see coming back over here.

25
00:01:36.409 --> 00:01:40.652
But in this, in this form you can
also submit your travel data and

26
00:01:40.652 --> 00:01:45.850
then you could submit another form and
then, you know, keep going like that.

27
00:01:47.140 --> 00:01:52.074
So our initial implementation,
we're using useState a lot over here

28
00:01:52.074 --> 00:01:57.060
we have these Boolean flags,
issubmitting issuccess.

29
00:01:57.060 --> 00:02:02.508
Hopefully you immediately recognize
that you can change that for

30
00:02:02.508 --> 00:02:09.141
a simple status string enum and same thing
over here you could use type states and

31
00:02:09.141 --> 00:02:14.590
discriminated unions to combine
the status with the data.

32
00:02:14.590 --> 00:02:18.990
But we're going to be simplifying
this even further than that.

33
00:02:18.990 --> 00:02:23.150
So again, using the strangler
fig pattern that I talked about,

34
00:02:23.150 --> 00:02:28.464
we're going to start by saying const state
submit action which already exists and

35
00:02:28.464 --> 00:02:31.237
I'll show you in a minute and
is pending and

36
00:02:31.237 --> 00:02:36.830
we're going to be grabbing that from use
action state, which is a react hook.

37
00:02:36.830 --> 00:02:40.299
Again, you have your
submit travel data and

38
00:02:40.299 --> 00:02:45.090
also you're going to be
passing in an initial state.

39
00:02:45.090 --> 00:02:48.999
And just to show you what this
initial state looks like,

40
00:02:48.999 --> 00:02:53.250
we have our, you know,
we have all of our information here.

41
00:02:53.250 --> 00:02:56.290
Wait a minute.

42
00:02:56.290 --> 00:03:00.690
Okay, let me just make sure that we
have the right initial state over here.

43
00:03:01.810 --> 00:03:07.250
So this is Actually going to
be coming from somewhere else.

44
00:03:07.250 --> 00:03:12.421
Okay, so initial state formstate equals

45
00:03:12.421 --> 00:03:18.034
status idle, no errors and
data null, and so

46
00:03:18.034 --> 00:03:23.070
you'll see how this is used in a minute.

47
00:03:23.070 --> 00:03:29.550
But the idea is that all of
our inputs should already.

48
00:03:29.550 --> 00:03:31.460
I'm going to go ahead and hide this.

49
00:03:31.460 --> 00:03:34.180
But all of our inputs
should already have names.

50
00:03:34.180 --> 00:03:38.407
And so that's going to be the thing
that really powers using form data is

51
00:03:38.407 --> 00:03:42.985
the fact that our inputs and all of our
fields have names that are going to be fed

52
00:03:42.985 --> 00:03:46.100
into the form data that we derive from it.

53
00:03:46.100 --> 00:03:52.113
So instead of onsubmit,
instead we're going to put action and

54
00:03:52.113 --> 00:03:58.250
this action is going to be our form
action that we have over here.

55
00:03:59.690 --> 00:04:02.410
So just going to the top submit action.

56
00:04:04.010 --> 00:04:06.970
And then what I'm going
to do here instead of

57
00:04:06.970 --> 00:04:11.536
deleting everything first is I'm
going to console log the states.

58
00:04:11.536 --> 00:04:14.810
Just so you see what we're dealing with.

59
00:04:14.810 --> 00:04:19.658
So we have the state over here and

60
00:04:19.658 --> 00:04:27.748
we are also going to console
log is pending over here.

61
00:04:27.748 --> 00:04:32.900
All right, so now we're going to, first of
all, let's make sure we're running this.

62
00:04:35.700 --> 00:04:38.980
All right, so we're in our exercise form.

63
00:04:38.980 --> 00:04:41.858
I'm going to open up
the console over here.

64
00:04:41.858 --> 00:04:45.940
We have is pending as false,
we have our initial state object.

65
00:04:47.380 --> 00:04:52.910
So let's go ahead and enter some details.

66
00:04:52.910 --> 00:04:56.676
Again, the state is changing and
if we submit this,

67
00:04:56.676 --> 00:05:01.811
it is going to hit the even though
it's invalid, it's going to hit that

68
00:05:01.811 --> 00:05:06.792
server action and we're going to
get some data back from the server.

69
00:05:06.792 --> 00:05:08.430
So we're gonnasee a bunch of errors.

70
00:05:08.430 --> 00:05:14.822
We're going to see that the birth date's
invalid, the origin city is invalid,

71
00:05:14.822 --> 00:05:21.180
et cetera, but it is hitting that
server and we also get a status back.

72
00:05:21.180 --> 00:05:22.940
So where does this happen?

73
00:05:22.940 --> 00:05:26.060
Let's take a look at form and
then actions.

74
00:05:27.820 --> 00:05:32.825
So when we submit travel data, first
of all, we're getting this raw data and

75
00:05:32.825 --> 00:05:36.380
we're getting it from the form
data that it receives.

76
00:05:37.740 --> 00:05:42.261
So we could validate the data using Zod,
like we talked about, and

77
00:05:42.261 --> 00:05:45.430
then we could use that to generate errors.

78
00:05:45.430 --> 00:05:49.171
And so if we have errors
on specific pieces of data,

79
00:05:49.171 --> 00:05:51.750
then we could pass that back.

80
00:05:51.750 --> 00:05:56.630
However, if everything goes well,
we sort of have a mock API over here.

81
00:05:56.630 --> 00:06:01.182
But if all goes well,
we have the success and

82
00:06:01.182 --> 00:06:06.470
we're also returning the data from there.

83
00:06:06.470 --> 00:06:09.289
And if we have an error,
then we're actually giving

84
00:06:09.289 --> 00:06:13.660
back the raw data because we don't want
to completely blow away the form states.

85
00:06:13.660 --> 00:06:18.540
We want them to be able
to correct their errors.

86
00:06:18.540 --> 00:06:23.344
So in this case we're not managing
the status inside of the actual ui, but

87
00:06:23.344 --> 00:06:26.460
instead we're managing
it on the server side.

88
00:06:26.460 --> 00:06:29.420
So we're saying the status is success.

89
00:06:29.420 --> 00:06:32.920
And in this case we
also have results data.

90
00:06:32.920 --> 00:06:37.268
So if we go back here and
actually fill everything out, so

91
00:06:37.268 --> 00:06:41.618
2000, not my actual birthday or
passport number and

92
00:06:41.618 --> 00:06:47.710
I don't know who would ever pick middle,
but it's an option in some airlines.

93
00:06:47.710 --> 00:06:49.784
But once you submit this,

94
00:06:49.784 --> 00:06:54.510
it's not happening because we
didn't update it in the ui.

95
00:06:54.510 --> 00:06:58.910
But you could see over here
that we have state of success.

96
00:06:58.910 --> 00:07:03.014
We have our data coming back,
we have no errors and

97
00:07:03.014 --> 00:07:06.640
we can use that in our,
in our application.

98
00:07:07.760 --> 00:07:10.695
So just like what I,
what we did previously,

99
00:07:10.695 --> 00:07:14.960
instead of using this issuccess use date,
we could derive that.

100
00:07:14.960 --> 00:07:22.809
So const issuccess equals
state status equals success.

101
00:07:22.809 --> 00:07:28.152
Same thing here, instead of
errors we could say const errors

102
00:07:28.152 --> 00:07:34.857
equals state errors, and same thing
over here, instead of is submitting,

103
00:07:34.857 --> 00:07:41.490
we could say const issubmitting equals
if the state dot status is pending.

104
00:07:44.290 --> 00:07:49.427
And now we have a bunch of errors,
but we could just comment those

105
00:07:49.427 --> 00:07:55.170
out because we're actually no
longer using this function at all.

106
00:07:55.170 --> 00:07:58.690
So we're just going to comment that out.

107
00:07:58.690 --> 00:08:03.758
So now when we fill out our form again,
set the birth date,

108
00:08:03.758 --> 00:08:08.530
passport number, origin,
city, seat preference.

109
00:08:11.730 --> 00:08:21.260
Okay, let's put 2000 now
let's debug this together.

110
00:08:21.260 --> 00:08:26.814
We could see that we have a status of
success, but it is not showing us success.

111
00:08:26.814 --> 00:08:29.646
It's if we have success data as well.

112
00:08:29.646 --> 00:08:32.904
So that is still in the use dates,
so we need to derive that too.

113
00:08:32.904 --> 00:08:37.579
So const success data equals

114
00:08:37.579 --> 00:08:43.041
dates data, so now one more try.

115
00:08:43.041 --> 00:08:46.117
David K,
&gt;&gt; David Khourshid: It's my actual

116
00:08:46.117 --> 00:08:47.092
birthday [LAUGH].

117
00:08:52.310 --> 00:08:54.150
&gt;&gt; David Khourshid: I love
sitting in the aisle.

118
00:08:54.150 --> 00:08:57.870
Okay, now we have our
successful travel data and

119
00:08:57.870 --> 00:09:02.330
now we could actually get rid
of basically a lot of things.

120
00:09:02.330 --> 00:09:09.112
We could get rid of all of these use
dates and all this unused code and

121
00:09:09.112 --> 00:09:15.414
even this like the whole setformdata
thing where we basically

122
00:09:15.414 --> 00:09:21.004
don't need that anymore, so
we could get rid of that.

123
00:09:21.004 --> 00:09:26.947
And so now all of these can just
be uncontrolled components, and so

124
00:09:26.947 --> 00:09:33.440
you could see that this really simplifies
how we work with simple forms.

125
00:09:39.290 --> 00:09:43.047
And then, yeah, we no longer
need this handle submit because

126
00:09:43.047 --> 00:09:46.650
everything happens inside
of that server action.

127
00:09:46.650 --> 00:09:49.850
We no longer need this
update form field helper.

128
00:09:49.850 --> 00:09:54.650
So update form field again, where this
is going to be just uncontrolled data.

129
00:09:54.650 --> 00:09:59.616
So we don't need that either we're
actually going to turn on Claude and

130
00:09:59.616 --> 00:10:02.110
have it help us out here.

131
00:10:02.110 --> 00:10:07.310
Don't need this or this or any of these.

132
00:10:07.310 --> 00:10:10.910
So we could get rid of that and
get rid of that as well.

133
00:10:12.110 --> 00:10:17.390
So now you see that we really,
really simplified our form.

134
00:10:18.910 --> 00:10:23.070
This might not even be necessary if
you use the state status directly.

135
00:10:24.350 --> 00:10:29.960
But everything is just a lot,
you know, it's a lot simpler.

136
00:10:29.960 --> 00:10:31.849
And in fact this is pending,

137
00:10:31.849 --> 00:10:35.720
this is redundant because
we don't need issubmitting.

138
00:10:35.720 --> 00:10:40.200
We could just, you know,
basically have that as is pending.

139
00:10:40.200 --> 00:10:45.040
So we have all this issubmitting which
we could change to is pending and

140
00:10:45.040 --> 00:10:46.280
then be all good.

141
00:10:47.400 --> 00:10:51.809
And so now there's a lot of unused
things that we could remove and

142
00:10:51.809 --> 00:10:54.350
our code just becomes a lot simpler.

143
00:10:58.590 --> 00:11:02.807
So that is how we could use
the use action state hook and

144
00:11:02.807 --> 00:11:06.390
use built in server
actions to handle forms.

145
00:11:06.390 --> 00:11:10.833
And also at a basic level, using form
data for basic forms where you don't need

146
00:11:10.833 --> 00:11:14.350
anything special with a form,
you just need to capture data.

147
00:11:14.350 --> 00:11:18.775
&gt;&gt; Male Speaker 2: Is it possible to
have immediate blur focus of validity

148
00:11:18.775 --> 00:11:23.400
checking for
those inputs when they are not controlled?

149
00:11:25.080 --> 00:11:26.760
&gt;&gt; David Khourshid: That's
a good question.

150
00:11:26.760 --> 00:11:28.440
So two things.

151
00:11:28.440 --> 00:11:32.903
First of all with server actions
it's sort of, or you know,

152
00:11:32.903 --> 00:11:38.769
form actions as it's called in React it
assumes that you're going to basically

153
00:11:38.769 --> 00:11:45.910
submit your form all at once, so it's not
going to be doing any validation on blur.

154
00:11:45.910 --> 00:11:50.264
The second thing too is that when
you have uncontrolled components and

155
00:11:50.264 --> 00:11:54.174
you want to basically keep track
of validation errors on Blur,

156
00:11:54.174 --> 00:11:58.790
I recommend you use some of the patterns
that we learned about earlier.

157
00:11:58.790 --> 00:12:03.041
So for example,
we could do things like const,

158
00:12:03.041 --> 00:12:08.678
let's call these validation
errors set validation errors and

159
00:12:08.678 --> 00:12:12.310
then we will have a use date for that.

160
00:12:12.310 --> 00:12:17.079
And this is somewhere where use data
is appropriate because this happens not

161
00:12:17.079 --> 00:12:23.030
during the client server interaction, but
it instead happens only on the client.

162
00:12:23.030 --> 00:12:27.399
So what we could do is let's say that,
you know,

163
00:12:27.399 --> 00:12:31.670
we're, let's just pick
one of these fields.

164
00:12:31.670 --> 00:12:33.190
So for example, first name.

165
00:12:34.550 --> 00:12:39.313
First of all, if you can use HTML5
validation then this is something that I

166
00:12:39.313 --> 00:12:41.140
strongly recommend you do.

167
00:12:42.340 --> 00:12:45.268
So this is for example,
if you add required or

168
00:12:45.268 --> 00:12:49.736
if you add a pattern over here just
to make sure that the data is valid,

169
00:12:49.736 --> 00:12:53.620
like this just says it should
be more than one character.

170
00:12:53.620 --> 00:12:58.093
So basically it's like it has to be
there and it has to be a valid name,

171
00:12:58.093 --> 00:13:00.420
then I would recommend you do that.

172
00:13:01.540 --> 00:13:04.670
Otherwise you could just.

173
00:13:04.670 --> 00:13:09.595
On Blur you have the event
target dot value and so

174
00:13:09.595 --> 00:13:15.470
you could say const value
equals event target value.

175
00:13:15.470 --> 00:13:18.190
And then you could do
validation directly in there.

176
00:13:18.190 --> 00:13:19.870
So you could set the validation errors.

177
00:13:19.870 --> 00:13:23.150
For example, if it's less than 3,
you have that over there.

178
00:13:24.590 --> 00:13:28.950
Just be sure to handle what
happens in terms of showing that.

179
00:13:28.950 --> 00:13:33.920
So for example, if this is focused, you
don't want to necessarily show that error.

180
00:13:33.920 --> 00:13:37.400
Or maybe you do, and maybe it goes
away once you blur from that again.

181
00:13:37.400 --> 00:13:41.970
But this is just an example of how
you can do validation on blur in

182
00:13:41.970 --> 00:13:47.400
an uncontrolled component,
because you have that value right there.

183
00:13:47.400 --> 00:13:52.526
All right, so we were just talking
about form handling with form data and

184
00:13:52.526 --> 00:13:56.309
server actions and
how we could basically use this for

185
00:13:56.309 --> 00:14:00.870
simple forms, forms that don't
have that many requirements.

186
00:14:00.870 --> 00:14:06.107
But there was an excellent question in
the chat where it was about managing large

187
00:14:06.107 --> 00:14:11.282
forms or form states with a lot of dynamic
validity or maybe async validation.

188
00:14:11.282 --> 00:14:17.230
Or there's a long time ago I did write
a form library called Redux Simple Form.

189
00:14:17.230 --> 00:14:21.802
So I do know about like just all of
the different potential use cases and

190
00:14:21.802 --> 00:14:23.750
edge cases of complex forms.

191
00:14:23.750 --> 00:14:27.611
You have nested forms,
you have dependent fields,

192
00:14:27.611 --> 00:14:31.307
async validation, masking,
things like that.

193
00:14:31.307 --> 00:14:35.937
So forms get very, very complicated,
the question was about how would

194
00:14:35.937 --> 00:14:40.722
you handle that, or are there resources
which talk about complex forms,

195
00:14:40.722 --> 00:14:44.680
date management solutions and
best practices around that?

196
00:14:45.720 --> 00:14:51.505
Yeah, it's true that when you're
dealing with complex state management,

197
00:14:51.505 --> 00:14:56.133
the usual culprit is actually forms,
either complex forms or

198
00:14:56.133 --> 00:14:59.079
multi step forms in your application.

199
00:14:59.079 --> 00:15:03.316
And so the way that we could
approach this is first of all,

200
00:15:03.316 --> 00:15:07.905
if you have a simple form,
try to keep things simple, again,

201
00:15:07.905 --> 00:15:14.010
the default is you would probably use
date for each of those individual fields.

202
00:15:14.010 --> 00:15:17.829
You can apply the previous lessons
we talked about and first of all

203
00:15:17.829 --> 00:15:22.520
combine those use dates into one use date,
just to make things a lot simpler.

204
00:15:22.520 --> 00:15:26.571
And also when you're sending that data
over, you know, for form submission,

205
00:15:26.571 --> 00:15:29.720
it's all in one object, so
it becomes really easy.

206
00:15:29.720 --> 00:15:32.128
Or you can take it to the next level and

207
00:15:32.128 --> 00:15:35.720
use form data with Zod to
validate that form input.

208
00:15:35.720 --> 00:15:39.633
So then you get that,
you get all of these form inputs and

209
00:15:39.633 --> 00:15:43.800
you get that validation for
free just by using form data.

210
00:15:43.800 --> 00:15:46.998
And it works naturally
with server actions for

211
00:15:46.998 --> 00:15:52.410
frameworks such as Next js which allow
you to natively handle those forms.

212
00:15:52.410 --> 00:15:56.709
But of course there's use cases like
I talked about with async validation,

213
00:15:56.709 --> 00:15:58.730
complex forms, et cetera.

214
00:15:58.730 --> 00:16:02.583
We're going to be talking about
data normalization later,

215
00:16:02.583 --> 00:16:06.010
which simplifies the nested
form aspect a lot.

216
00:16:06.010 --> 00:16:10.049
But when you're dealing with
more complex form requirements,

217
00:16:10.049 --> 00:16:14.096
I recommend you use a library that
already handles this for you.

218
00:16:14.096 --> 00:16:17.946
Such as, there's Tanstack form,
there's React Hook form and

219
00:16:17.946 --> 00:16:20.050
there are similar libraries.

220
00:16:20.050 --> 00:16:24.128
What I would not recommend is trying
to roll this yourself because again,

221
00:16:24.128 --> 00:16:28.534
there's a lot of edge cases and when you
roll your own form based abstractions,

222
00:16:28.534 --> 00:16:32.370
first of all,
you're probably reinventing the wheel.

223
00:16:32.370 --> 00:16:38.210
Forms are one of the most common things in
web applications, so try not to do that.

224
00:16:38.210 --> 00:16:43.095
And secondly, when you're working with
teammates, it's better to point them at

225
00:16:43.095 --> 00:16:47.979
documentation, e.g., TanStack Form or
React Hook Form, rather than trying to

226
00:16:47.979 --> 00:16:53.200
maintain your own documentation for
your own abstraction that you built.

227
00:16:53.200 --> 00:16:58.134
The second thing too is things become a
lot less complicated when you go based on

228
00:16:58.134 --> 00:17:00.826
the first principle that we talked about,

229
00:17:00.826 --> 00:17:04.480
which is events are the actual
source of truth.

230
00:17:04.480 --> 00:17:08.994
So thinking about, for example, async
validation, it sounds really complex and

231
00:17:08.994 --> 00:17:10.240
really scary.

232
00:17:10.240 --> 00:17:14.875
But when you think of it as I put an input
in there and then something goes off to

233
00:17:14.875 --> 00:17:19.499
a server and comes back with data
saying whether it's valid or not.

234
00:17:19.499 --> 00:17:22.273
Now we have, going back to our diagrams,

235
00:17:22.273 --> 00:17:25.219
you could think of it
as a sequence diagram.

236
00:17:25.219 --> 00:17:31.179
We have our form and we have some sort
of validation API that we're hitting.

237
00:17:31.179 --> 00:17:34.847
And we're also thinking about events too.

238
00:17:34.847 --> 00:17:37.889
So we have an event where
we're updating the state and

239
00:17:37.889 --> 00:17:40.051
then we have an events coming back, so

240
00:17:40.051 --> 00:17:44.242
then you could use patterns like
useReducer to actually handle that async

241
00:17:44.242 --> 00:17:49.850
validation if it's not handled already in
those form libraries that I talked about.

242
00:17:49.850 --> 00:17:54.716
So again, data normalization and
also treating everything as an event and

243
00:17:54.716 --> 00:18:00.125
handling the events rather than treating
async validation as something special,

244
00:18:00.125 --> 00:18:03.770
that's gonna really help you
a lot with complex forms.

