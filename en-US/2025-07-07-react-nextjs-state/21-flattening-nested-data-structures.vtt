WEBVTT

1
00:00:00.240 --> 00:00:03.060
&gt;&gt; David Khourshid: Okay,
the next topic that I want to talk about,

2
00:00:03.060 --> 00:00:08.880
which has come up in previous questions
and conversation, is data normalization.

3
00:00:08.880 --> 00:00:16.000
And so the key part of this is avoiding
nested and deeply nested data structures.

4
00:00:16.000 --> 00:00:18.120
And we want to do this for two reasons.

5
00:00:18.120 --> 00:00:21.120
The first reason is performance.

6
00:00:21.120 --> 00:00:26.294
So when you have a flat data structure,
then you have either

7
00:00:26.294 --> 00:00:31.884
constant lookups or lookups of at
most o of n instead of O times m,

8
00:00:31.884 --> 00:00:40.140
which just gets exponentially bigger when
you need to find a specific piece of data.

9
00:00:40.140 --> 00:00:44.540
So that's why keeping things
flat is really useful.

10
00:00:44.540 --> 00:00:50.353
And the second reason is because you want
to make things easier to both update and

11
00:00:50.353 --> 00:00:54.780
understand in your code base
when it comes to nested data.

12
00:00:54.780 --> 00:00:58.950
So one of the examples that
came up was nested forms.

13
00:00:58.950 --> 00:01:03.160
And so let's say that you have
a nested form where you're managing,

14
00:01:03.160 --> 00:01:08.110
just going with the same travel theme,
you're managing multiple passengers.

15
00:01:08.110 --> 00:01:10.350
And each passenger has a name.

16
00:01:10.350 --> 00:01:15.270
They have a passport number, a known
traveler ID number, birth date, et cetera.

17
00:01:15.270 --> 00:01:19.266
So the way that you might model this
at first is you would say, okay, yeah,

18
00:01:19.266 --> 00:01:21.840
this is definitely a just a nested form.

19
00:01:21.840 --> 00:01:24.321
We have passengers as an array, and

20
00:01:24.321 --> 00:01:28.720
then inside each array is an item
with even more things inside.

21
00:01:29.840 --> 00:01:34.480
And so they might have, let's say you
have to put in countries you visited.

22
00:01:34.480 --> 00:01:39.308
So now there's even more nesting
going on inside of that object.

23
00:01:39.308 --> 00:01:44.149
And so, it becomes difficult to
update those items because you

24
00:01:44.149 --> 00:01:48.090
have to drill deeply into
that object structure.

25
00:01:48.090 --> 00:01:54.480
And also, it actually is bad for
performance too.

26
00:01:54.480 --> 00:01:59.107
And the reason it's bad is because when
you're updating something that's deeply

27
00:01:59.107 --> 00:02:03.006
nested, you're not only updating
that specific item, you're also

28
00:02:03.006 --> 00:02:07.520
updating that item's parents and
that item's parent's parents, et cetera.

29
00:02:07.520 --> 00:02:12.544
And so anything that only cares about
the parent is at risk of re rendering,

30
00:02:12.544 --> 00:02:16.870
even if it doesn't care about
the child's data inside.

31
00:02:16.870 --> 00:02:22.096
And so this is why data normalization,
it's very good for those two reasons,

32
00:02:22.096 --> 00:02:26.630
both performance improvements and
also understandability.

33
00:02:26.630 --> 00:02:31.746
What we're going to do is we're actually
going to learn to normalize data and

34
00:02:31.746 --> 00:02:37.510
we're going to be doing the same approach
where we're doing things side by side.

35
00:02:37.510 --> 00:02:43.206
But I'm just going to show
you an example over here,

36
00:02:43.206 --> 00:02:47.996
normalization page, and I'm just going to

37
00:02:47.996 --> 00:02:53.050
actually make a quick oops,
quick demo page.

38
00:02:55.290 --> 00:02:59.976
So
&gt;&gt; David Khourshid: Let's say that we have

39
00:02:59.976 --> 00:03:06.330
that same example where we
have const flight data.

40
00:03:07.940 --> 00:03:13.216
So we might have a, you know,
reservation ID and that might be a string,

41
00:03:13.216 --> 00:03:18.500
you know, flight number or we might
have like a flight related to that.

42
00:03:18.500 --> 00:03:20.980
And then we might have some passengers.

43
00:03:20.980 --> 00:03:26.340
And so each of these passengers
will also have some ID.

44
00:03:26.340 --> 00:03:29.620
So this might be John Doe, etc.

45
00:03:29.620 --> 00:03:33.194
And we might also have
visited countries and

46
00:03:33.194 --> 00:03:37.300
then we have a lot of
nested data going on.

47
00:03:37.300 --> 00:03:42.580
So we have our flight inside, we have
the reservation ID inside, et cetera.

48
00:03:42.580 --> 00:03:44.660
There's just a lot going on here.

49
00:03:44.660 --> 00:03:48.170
In fact, let's make another passenger,
Jane Doe,

50
00:03:48.170 --> 00:03:51.060
they both went to
the same three countries.

51
00:03:52.420 --> 00:03:57.259
So when you want to update, for
example, the name of this passenger or

52
00:03:57.259 --> 00:04:02.674
the visited countries, the problem is
that we're essentially just changing

53
00:04:02.674 --> 00:04:08.416
every single part in this structure and
you're potentially causing a re render for

54
00:04:08.416 --> 00:04:12.953
anything that relies on anything
inside of this flight's data.

55
00:04:12.953 --> 00:04:15.990
So what can we do instead?

56
00:04:15.990 --> 00:04:22.116
Well, let's actually make this bigger so
we have const flights and

57
00:04:22.116 --> 00:04:26.960
then we might have a, or
let's call this itinerary.

58
00:04:28.400 --> 00:04:32.080
And in our itinerary we might
have a bunch of flights and

59
00:04:32.080 --> 00:04:37.200
inside that we might have like flights
data over here or actually let's call

60
00:04:37.200 --> 00:04:43.440
this reservations because our itinerary
might have multiple reservations.

61
00:04:43.440 --> 00:04:47.520
So let's have it generate another
one over here just for an example.

62
00:04:47.520 --> 00:04:51.840
So instead of having a deeply
nested data structure like this,

63
00:04:51.840 --> 00:04:56.402
what we could do instead is we could
flatten this a little bit and for

64
00:04:56.402 --> 00:04:59.840
example, let's pull out
passengers over here.

65
00:05:00.880 --> 00:05:03.200
So what will this look like?

66
00:05:03.200 --> 00:05:08.800
We'll have a passenger, so we'll have
the same information right over here.

67
00:05:09.920 --> 00:05:13.480
And instead we're going to
relate it to the reservation.

68
00:05:13.480 --> 00:05:19.830
So we're going to have a reservation ID
for example, 123 and same thing over here.

69
00:05:21.670 --> 00:05:23.830
So let's just get rid of this.

70
00:05:23.830 --> 00:05:27.536
And now the difference is
that we no longer need

71
00:05:27.536 --> 00:05:30.870
to nest that data deeply inside of there.

72
00:05:32.310 --> 00:05:34.870
We could even do the same thing for
flights if we wanted to.

73
00:05:34.870 --> 00:05:39.910
But just for demonstration purposes,
we're going to flatten just this one area.

74
00:05:41.030 --> 00:05:43.830
So now let me just do
a split screen over here.

75
00:05:47.330 --> 00:05:51.501
Before, when we were looking up,
for example,

76
00:05:51.501 --> 00:05:56.387
the passengers of a specific
reservation we would have to

77
00:05:56.387 --> 00:06:01.090
do const passengers equals
itinerary reservations.

78
00:06:02.130 --> 00:06:04.736
First we would have to
find the reservations.

79
00:06:04.736 --> 00:06:07.938
So we would say r.i =,

80
00:06:07.938 --> 00:06:13.230
let's say it's equal to 1, 2, 3.

81
00:06:15.230 --> 00:06:18.430
So that's the first level
where we have to look at.

82
00:06:18.430 --> 00:06:24.830
And then we would have to just grab,
let's grab a specific passenger.

83
00:06:26.270 --> 00:06:32.110
So then passengers and then we have to
find that passenger from there as well.

84
00:06:32.110 --> 00:06:36.670
So we're doing a lot of nested searching.

85
00:06:36.670 --> 00:06:42.067
But when we have a more normalized
structure besides the performance

86
00:06:42.067 --> 00:06:47.620
benefits we get,
let's say we have a const johnPassenger.

87
00:06:47.620 --> 00:06:50.100
We could look directly at the passengers.

88
00:06:50.100 --> 00:06:57.197
So we could say itinerary.passengers,

89
00:06:57.197 --> 00:07:05.511
where the passenger
reservationId is 123 and

90
00:07:05.511 --> 00:07:10.990
the passenger id is John Doe.

91
00:07:10.990 --> 00:07:13.470
So that's just an example.

92
00:07:13.470 --> 00:07:18.030
I mean they're around the same lines
of code, but the difference is in the.

93
00:07:18.030 --> 00:07:22.350
And that's only because we're word
wrapping see that one's actually shorter.

94
00:07:22.350 --> 00:07:25.434
But you are going to see
benefits in performance and

95
00:07:25.434 --> 00:07:28.830
also your data structure is
going to be a lot simpler.

96
00:07:28.830 --> 00:07:33.320
And the third thing too is going back
to a previous exercise that we did.

97
00:07:33.320 --> 00:07:38.081
When you're modeling things in
an entity relationship diagram,

98
00:07:38.081 --> 00:07:41.560
everything is flat, so
there is no nesting.

99
00:07:41.560 --> 00:07:45.160
Everything is related to each
other via those foreign keys.

100
00:07:45.160 --> 00:07:47.956
And so
we could model that exactly the same and

101
00:07:47.956 --> 00:07:52.680
see similar benefits in our
front end applications as well.

102
00:07:52.680 --> 00:07:58.360
So that's where data normalization
just becomes very useful.

