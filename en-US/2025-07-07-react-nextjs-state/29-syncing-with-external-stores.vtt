WEBVTT

1
00:00:00.160 --> 00:00:03.246
&gt;&gt; David Khourshid: Great.
So I want to quickly talk about just two

2
00:00:03.246 --> 00:00:06.962
other things and
the first thing I want to talk about

3
00:00:06.962 --> 00:00:11.040
is the USync external store hook,
which I really like.

4
00:00:13.520 --> 00:00:19.360
Yeah, so USync external store is one
of those really underrated hooks.

5
00:00:19.360 --> 00:00:24.455
It's one of those hooks that are used
in third party libraries mostly and

6
00:00:24.455 --> 00:00:27.640
only sometimes in real world applications.

7
00:00:27.640 --> 00:00:31.247
Although once you see it and
once you get used to it, which we're going

8
00:00:31.247 --> 00:00:35.282
to practice in this exercise, you're going
to see just how useful it can be and

9
00:00:35.282 --> 00:00:39.150
how it actually reduces the amount
of code that you have to write.

10
00:00:39.150 --> 00:00:44.695
One of the common patterns that we do
with UseState and UseEffect and managing

11
00:00:44.695 --> 00:00:50.325
state with something that is changing
externally is this imperative flow of,

12
00:00:50.325 --> 00:00:56.209
for example, if we're checking if we're
online or not, we had this UseEffect,

13
00:00:56.209 --> 00:01:00.840
which is subscribing to the window
online offline listener.

14
00:01:00.840 --> 00:01:03.357
This example is also in the React docs and

15
00:01:03.357 --> 00:01:08.440
we're setting is online based on
whether the navigator is online or not.

16
00:01:08.440 --> 00:01:12.806
And then we're returning that we're
saying if it's online, show online,

17
00:01:12.806 --> 00:01:14.294
otherwise show offline.

18
00:01:14.294 --> 00:01:19.551
And it's going to work fine, but
there might be potential problems

19
00:01:19.551 --> 00:01:25.178
with this approach, such as race
conditions or hydration mismatches,

20
00:01:25.178 --> 00:01:30.066
which is one of those annoying
errors that you get with Next js,

21
00:01:30.066 --> 00:01:36.640
which is a combination of server-rendered
pages and dealing with the client side.

22
00:01:39.520 --> 00:01:44.526
One of the things that you could do is
actually use the USYncexternal store hook,

23
00:01:44.526 --> 00:01:48.240
and this actually works really
well with browser APIs.

24
00:01:48.240 --> 00:01:51.820
The USYnce external store
hook takes three arguments.

25
00:01:51.820 --> 00:01:56.802
The first one is a way to subscribe
to some external source and so

26
00:01:56.802 --> 00:01:58.500
it takes a callback.

27
00:01:58.500 --> 00:02:03.120
And so you could just, for example,
when it's online or offline,

28
00:02:03.120 --> 00:02:07.658
you could just pass in that callback and
then there is a function for

29
00:02:07.658 --> 00:02:12.860
getting whatever the current
snapshot is according to the client.

30
00:02:12.860 --> 00:02:18.130
And then this one is pretty important and
this one is alone responsible for

31
00:02:18.130 --> 00:02:21.530
just solving a whole
host of hydration errors,

32
00:02:21.530 --> 00:02:26.640
which if you've run into them with
next JS, they are pretty annoying.

33
00:02:26.640 --> 00:02:31.373
But using USync external store allows you
to avoid them by providing a consistent

34
00:02:31.373 --> 00:02:35.280
server snapshot where in this
case we're assuming it's online.

35
00:02:37.040 --> 00:02:42.052
And as long as this stays consistent
between the server and the client, then

36
00:02:42.052 --> 00:02:48.280
it's going to work with USync external
store and, and next JS won't yell at you.

37
00:02:48.280 --> 00:02:53.384
And then of course in this one we're
just returning if it's online or

38
00:02:53.384 --> 00:02:56.640
not, and that's really all there is to it.

39
00:02:56.640 --> 00:02:58.680
To the USync external store hook.

