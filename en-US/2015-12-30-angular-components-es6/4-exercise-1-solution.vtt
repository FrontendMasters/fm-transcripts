WEBVTT

1
00:00:00.000 --> 00:00:04.544
[MUSIC]

2
00:00:04.544 --> 00:00:08.518
&gt;&gt; Scott Moss: So again what you should
see if you got this working was, one,

3
00:00:08.518 --> 00:00:13.334
if you were to go into the terminal,
it's going to clear this real quick and

4
00:00:13.334 --> 00:00:14.570
type in npm start.

5
00:00:14.570 --> 00:00:19.140
What's really all that it does is you look
at the package.json inside the scripts.

6
00:00:19.140 --> 00:00:21.870
And you see this start property and
this is gonna run this command and

7
00:00:21.870 --> 00:00:25.210
so this is gonna run the gulp command.

8
00:00:25.210 --> 00:00:26.110
So if you follow that and

9
00:00:26.110 --> 00:00:30.110
you go look in the gulp.js,
we go to the gulp command that's this one.

10
00:00:30.110 --> 00:00:34.580
So if you just typing gulp it's gonna
run the default task which is this one

11
00:00:34.580 --> 00:00:37.620
which runs the build tasks first finishes.

12
00:00:37.620 --> 00:00:42.580
Runs the copy task second finishes,
runs the serve task, finishes and

13
00:00:42.580 --> 00:00:44.610
it runs the watch task and then finishes.

14
00:00:44.610 --> 00:00:48.040
So it does all these in a synchronize
order, so that's what npm start does.

15
00:00:49.930 --> 00:00:53.230
So if we run npm start,
we'll see all its output, it's like,

16
00:00:53.230 --> 00:00:54.780
cool I'm running the gulp.

17
00:00:54.780 --> 00:00:56.350
This is npm right here,

18
00:00:56.350 --> 00:00:59.600
it's like, okay, I'm going to run
the gulp command like you told me to.

19
00:00:59.600 --> 00:01:04.160
And then the gulp command is like,
great, I'm gonna start the default task.

20
00:01:04.160 --> 00:01:08.190
And if you go look at the default task,
it first runs the build tasks, so

21
00:01:08.190 --> 00:01:11.650
if you scroll to the build task,
it's running this one first, but

22
00:01:11.650 --> 00:01:14.480
the build task cannot run
until the todo task runs.

23
00:01:14.480 --> 00:01:18.920
So that's why this says starting default,
starting todo and

24
00:01:18.920 --> 00:01:21.370
then this totals thing you'll
see this means in a minute.

25
00:01:21.370 --> 00:01:25.994
But this is irrelevant on this step when
we get closer to the end you'll see this

26
00:01:25.994 --> 00:01:28.183
means so is like cool finished todo.

27
00:01:28.183 --> 00:01:32.719
Now I'm actually gonna start the build
task now and that's why I says,

28
00:01:32.719 --> 00:01:37.650
starting build and what build does, the
way it is works is to get this to work.

29
00:01:37.650 --> 00:01:40.070
What we have to do is when I was
talking earlier about webpack and

30
00:01:40.070 --> 00:01:43.710
how it only takes in one file
as a entry or application.

31
00:01:43.710 --> 00:01:48.010
And it treats that file like the root
of a tree like this goes and whatever

32
00:01:48.010 --> 00:01:51.450
that file imports or whatever its children
imports, that's what gets loaded up.

33
00:01:51.450 --> 00:01:54.830
So all we have to do is,
load up this paths out entry or,

34
00:01:54.830 --> 00:01:56.620
as usually if you're
very familiar with go.

35
00:01:56.620 --> 00:01:58.070
What you would normally do is, you'd like,

36
00:01:58.070 --> 00:02:00.590
here's all the path to my JavaScript,
right.

37
00:02:00.590 --> 00:02:04.510
So, you would pass them like paths.js,
I'd probably done that first.

38
00:02:04.510 --> 00:02:07.640
Because, you're thinking like I want
to compile all my JavaScript files.

39
00:02:07.640 --> 00:02:10.830
So I'm going to pass in the glob patterns
on my job on all my JavaScript files.

40
00:02:10.830 --> 00:02:13.800
But that's not the case the web pack
we want to paths an entry file and

41
00:02:13.800 --> 00:02:16.300
have webpack take care of stuff for us.

42
00:02:16.300 --> 00:02:18.120
Alternatively, if we were
not using webpack and

43
00:02:18.120 --> 00:02:22.430
we were just using Babel,
Gulp we will do that, we would paths

44
00:02:22.430 --> 00:02:26.030
in all the JavaScript files like
compile all these files for us please.

45
00:02:26.030 --> 00:02:29.250
But then that means we would also have to
do the bundling, and concatenating and

46
00:02:29.250 --> 00:02:30.730
stuff ourselves as well.

47
00:02:30.730 --> 00:02:34.020
And then of course it would
run in the browser because

48
00:02:34.020 --> 00:02:37.820
cope doesn't give us common js in
the browser so we still have a problem.

49
00:02:37.820 --> 00:02:41.650
So that's what's happening here
we paths and paths out entry.

50
00:02:41.650 --> 00:02:45.620
That's gonna put that entry file
in a buffer we pipe it to this

51
00:02:45.620 --> 00:02:48.910
webpack plugin that we have up
here which is this webpack stream.

52
00:02:48.910 --> 00:02:53.260
Which is just the webpack tool and used or

53
00:02:53.260 --> 00:02:56.170
set up in a way that works well with go so
it can take in a stream.

54
00:02:56.170 --> 00:02:59.480
That's all it does, it's the same thing
as webpack from the command line or

55
00:02:59.480 --> 00:03:03.710
it's like the same thing if
you were to require webpack,

56
00:03:03.710 --> 00:03:07.410
we'll call it 2 equals require webpack.

57
00:03:07.410 --> 00:03:10.150
So the same thing except for
it just works better with go.

58
00:03:10.150 --> 00:03:12.039
It does the same thing though,
does that make sense?

59
00:03:13.630 --> 00:03:18.240
So just like if you are using webpack
we have to, we don't have to but

60
00:03:18.240 --> 00:03:23.410
it takes an optional objects,
an optional configuration object.

61
00:03:23.410 --> 00:03:29.400
To figure out how to the instructions on
how to run the files if you're pathing it.

62
00:03:29.400 --> 00:03:32.870
Luckily, we already made one that's
the webpack and figured I'd say yes.

63
00:03:32.870 --> 00:03:37.709
So all l I'm doing here is this requiring
that file, that's all I'm doing, so

64
00:03:37.709 --> 00:03:39.730
that's going to be an object, so

65
00:03:39.730 --> 00:03:42.953
everyone follow me here?
&gt;&gt; Audience: It's easier if you read that

66
00:03:42.953 --> 00:03:46.460
object in the function again but
we have it in a separate file.

67
00:03:46.460 --> 00:03:47.049
&gt;&gt; Scott Moss: Right exactly,

68
00:03:47.049 --> 00:03:48.105
we have it in a separate file.

69
00:03:48.105 --> 00:03:51.202
The reason we have it in
a separate file is for

70
00:03:51.202 --> 00:03:55.940
whatever reason you were not using
gold before it even you had a CI.

71
00:03:55.940 --> 00:03:59.360
Whatever even gold was in here and you
just wanted to run webpack we can do that

72
00:03:59.360 --> 00:04:03.060
because it falls on the route like we
just want to come from the command line.

73
00:04:03.060 --> 00:04:05.190
And I typed in webpack like this.

74
00:04:06.620 --> 00:04:12.880
It's going to look at that webpack and
it's going to right, sweet.

75
00:04:12.880 --> 00:04:16.960
And then now get the result
that webpack file,

76
00:04:16.960 --> 00:04:21.060
which if we go look at
webpack is a bundle.js.

77
00:04:21.060 --> 00:04:23.770
That's the result of it,
it creates a bundle.js.

78
00:04:23.770 --> 00:04:30.180
So get the result of that and
stick it here, so pipe it to gulp.desk.

79
00:04:30.180 --> 00:04:33.260
To the destination which
is the disk folder.

80
00:04:33.260 --> 00:04:38.910
So go for create a disk folder for
you and put all this other stuff in here.

81
00:04:38.910 --> 00:04:46.480
So you have like this bundled.js.map, you
might see some other stuff like in HTML.

82
00:04:46.480 --> 00:04:50.229
There's a cat image there,
I don't know why it's even there.

83
00:04:52.180 --> 00:04:55.440
So that's what's happening there, so
everybody follow me there so far?

84
00:04:57.630 --> 00:05:00.900
So now if you go back to webpack and
see what's actually happening, the loader.

85
00:05:01.960 --> 00:05:03.990
So mine looks a little different from you?

86
00:05:03.990 --> 00:05:06.610
Different from everybody else's unless
you like really to read up on what

87
00:05:06.610 --> 00:05:09.650
was happening with the babel loader.

88
00:05:09.650 --> 00:05:12.320
So if you look at the first two here,

89
00:05:12.320 --> 00:05:15.500
let's go in the detail about what's
happening with these objects.

90
00:05:15.500 --> 00:05:21.420
So there's a lot of properties we can put
on the actual objects for the loaders.

91
00:05:21.420 --> 00:05:23.130
But the first one is the test, so

92
00:05:23.130 --> 00:05:28.560
the way this one works if you just give
it a regex right or anything to match it.

93
00:05:28.560 --> 00:05:33.504
I think you also take a stream is
going to match the incoming file name

94
00:05:33.504 --> 00:05:37.597
that's being sent to it with
that string or that regex.

95
00:05:37.597 --> 00:05:41.837
And if it matches true, if it passes,
it's going to run the appropriate loader,

96
00:05:41.837 --> 00:05:42.457
all right.

97
00:05:42.457 --> 00:05:47.604
So what that means is, if I import
anything in my application that

98
00:05:47.604 --> 00:05:53.660
has a .js extension then run whatever
loaders I tell you to on the right.

99
00:05:53.660 --> 00:05:58.340
So that means if it's stylus HTML it won't
run through this loader which is great.

100
00:05:58.340 --> 00:06:01.890
But like never mind, I'm not going to use,
so it's like a check to see.

101
00:06:01.890 --> 00:06:05.630
So it's testing the file to see
if the condition is true and

102
00:06:05.630 --> 00:06:08.140
if it is run this appropriate loader.

103
00:06:08.140 --> 00:06:10.210
Right, so does everybody follow me there?

104
00:06:10.210 --> 00:06:12.170
So you can put any regex
you want to right here.

105
00:06:12.170 --> 00:06:15.580
This is just like the convention that
the community is doing, stuff like this.

106
00:06:15.580 --> 00:06:20.090
So if you need a like, multiple files,
you just do, the regex of like js and

107
00:06:20.090 --> 00:06:24.560
you know you also do JSX if you reason,
react or whatever, right.

108
00:06:24.560 --> 00:06:32.680
So, we're just going to use JS and
then loader, the way loaders work.

109
00:06:32.680 --> 00:06:36.490
This is a string of what loader you
want to run, so more about the loaders.

110
00:06:36.490 --> 00:06:41.060
Let's just go look and just make more
sense if I show you the node modules.

111
00:06:41.060 --> 00:06:43.680
By the way,
if you're using like npm version three or

112
00:06:43.680 --> 00:06:47.190
up your node modules folder is flat,
it's not recursive anymore.

113
00:06:47.190 --> 00:06:50.030
So, if you're node modules folder
doesn't look as long as mine,

114
00:06:50.030 --> 00:06:51.530
don't worry, it's fine.

115
00:06:51.530 --> 00:06:53.160
I'm just using the latest
version of npm and

116
00:06:53.160 --> 00:06:56.084
they don't nest node modules anymore,
everything is flat.

117
00:06:56.084 --> 00:07:02.580
So the way that loader work is,
the convention is,

118
00:07:02.580 --> 00:07:05.420
if you wanna make a loader for
webpack you give it a name dash loader.

119
00:07:05.420 --> 00:07:10.360
So Babel loader, raw loader,
CSS loader so that way webpack

120
00:07:10.360 --> 00:07:14.640
knows how to look for them when you
place them inside the strings like this.

121
00:07:14.640 --> 00:07:19.030
So when I say Babel, I'm actually
saying I want to have the Babel-loader,

122
00:07:19.030 --> 00:07:19.820
either way is fine.

123
00:07:19.820 --> 00:07:21.450
It will set any syntax but

124
00:07:21.450 --> 00:07:25.770
because of that convention is there,
we can exclude the -loader.

125
00:07:25.770 --> 00:07:32.844
So if you go look at nobody's folder and
which might is really really big and

126
00:07:32.844 --> 00:07:38.140
so many babel things and
babel, babel-loader right.

127
00:07:38.140 --> 00:07:40.920
So I found it so
that's how it knew what lower load

128
00:07:40.920 --> 00:07:43.380
up because it's in the know
about tools folder.

129
00:07:43.380 --> 00:07:45.570
Same thing with the rest of the so
there's a raw loader,

130
00:07:45.570 --> 00:07:48.380
there's a CSS loader
there's a style loader.

131
00:07:48.380 --> 00:07:50.100
There's a stylus loader, right?

132
00:07:50.100 --> 00:07:53.697
Is everybody following me there?
&gt;&gt; Audience 2: I've got a question.

133
00:07:53.697 --> 00:07:54.452
&gt;&gt; Scott Moss: Yes?

134
00:07:54.452 --> 00:07:55.813
&gt;&gt; Audience 2: So when I go to start up

135
00:07:55.813 --> 00:08:00.660
gulp, I get an error message that it
cannot find a module run sequence?

136
00:08:00.660 --> 00:08:02.047
&gt;&gt; Scott Moss: You need to npm install

137
00:08:02.047 --> 00:08:06.414
run-sequence,.
&gt;&gt; Audience 2: Okay.

138
00:08:06.414 --> 00:08:07.178
&gt;&gt; Scott Moss: There should be

139
00:08:07.178 --> 00:08:10.005
in a package.json and
make sure you save it to --safe.

140
00:08:10.005 --> 00:08:12.850
So npm and saw run sequence --save.

141
00:08:12.850 --> 00:08:17.210
So it stays in your pack such as json,
by following so

142
00:08:17.210 --> 00:08:22.020
far the loaders how itself works
cuz if you notice I have like this

143
00:08:22.020 --> 00:08:26.300
query string here at the end of Babel,
it's like stage=1.

144
00:08:26.300 --> 00:08:28.530
This is how you paths in
options to these loaders,

145
00:08:28.530 --> 00:08:33.770
because Babel is a JavaScript plugin,
and this is the webpack version of it.

146
00:08:33.770 --> 00:08:37.820
So just like if you used Babel in
JavaScript, you can paths in options.

147
00:08:37.820 --> 00:08:40.910
You should be able to paths in options
on the webpack version as well.

148
00:08:40.910 --> 00:08:45.050
So the way they do that is, you usually
put like a query string at the end

149
00:08:45.050 --> 00:08:47.550
of the loader and
you paths in the options that way.

150
00:08:47.550 --> 00:08:53.100
So babel has an option called state
which allows us to turn features on and

151
00:08:53.100 --> 00:08:56.010
off depending on when they were released.

152
00:08:56.010 --> 00:09:01.500
So if you go look at that,
so it looks like that

153
00:09:01.500 --> 00:09:06.706
looks like, we got a babel and let's see.

154
00:09:06.706 --> 00:09:08.242
Yes.
&gt;&gt; Audience 3: You have time for

155
00:09:08.242 --> 00:09:09.991
a couple questions here Scott?
&gt;&gt; Scott Moss: Yeah, I do.

156
00:09:09.991 --> 00:09:11.521
&gt;&gt; Audience 3: We have a small backlog so,

157
00:09:11.521 --> 00:09:15.648
one Justin C is asking if you could show
that to do task in the Gulp file again

158
00:09:15.648 --> 00:09:19.100
maybe just to leave up on
your screen in the meantime.

159
00:09:19.100 --> 00:09:24.760
&gt;&gt; Scott Moss: Yes, I can it is this one.

160
00:09:24.760 --> 00:09:25.770
&gt;&gt; Audience 3: Awesome, thank you.

161
00:09:27.150 --> 00:09:32.590
There is a question on what browser
sync is doing in this context?

162
00:09:32.590 --> 00:09:33.740
&gt;&gt; Scott Moss: A good question.

163
00:09:33.740 --> 00:09:37.670
Yeah so if you have used browsing
before it's pretty amazing.

164
00:09:37.670 --> 00:09:42.350
What browser same does one it acts,
it really is like a little

165
00:09:42.350 --> 00:09:46.160
small express server a static server
that serves application or whoever port.

166
00:09:46.160 --> 00:09:49.760
It wants to whatever tell it or
does that, so just serves it.

167
00:09:49.760 --> 00:09:54.200
But at the same time what I would have
also do I turn it off by default.

168
00:09:54.200 --> 00:09:58.280
But what it will do is it will
sink all your scrolling and

169
00:09:58.280 --> 00:10:02.130
clicking across multiple browsers.

170
00:10:02.130 --> 00:10:08.940
So that's why when you run the gulp task
or npm start it gives you all this output.

171
00:10:08.940 --> 00:10:14.700
I'll show you this Brotherson gray or this
B.S. that's browser saying it's like cool.

172
00:10:15.920 --> 00:10:18.230
Here's where your app is being served.

173
00:10:18.230 --> 00:10:22.819
Here's an external URL that anybody on the
same WIFI connection is you can go to and

174
00:10:22.819 --> 00:10:26.296
you all and if you start scrolling or
scroll on their page too.

175
00:10:26.296 --> 00:10:30.863
If you start clicking to click
on their page and so forth and

176
00:10:30.863 --> 00:10:33.099
then here is a URL to your UI,

177
00:10:33.099 --> 00:10:38.810
which is like this dashboard that
browser sync makes for your app.

178
00:10:38.810 --> 00:10:41.940
It's like a dashboard and
you can turn the clicking in sinking on or

179
00:10:41.940 --> 00:10:43.620
off and then mess with the options.

180
00:10:43.620 --> 00:10:48.220
So it's really legit, it's better
than library, it's like library

181
00:10:48.220 --> 00:10:51.640
the real I don't like steroids and
I like It will like do everything.

182
00:10:51.640 --> 00:10:52.820
It's really great for testing so

183
00:10:52.820 --> 00:10:56.410
like you can load the thing up on your
mobile phone, load up on your desktop and

184
00:10:56.410 --> 00:11:00.280
start clicking and see what's happening,
what's going on, give to somebody else.

185
00:11:00.280 --> 00:11:06.340
So it's pretty crazy, so that's browser
sync, but I turned that off because

186
00:11:06.340 --> 00:11:10.530
it gets really funky sometimes,
also if you turn off.

187
00:11:10.530 --> 00:11:13.430
Open, it open the browser for you do so

188
00:11:13.430 --> 00:11:16.990
if you just run this like this at a like
over the browser do all types of stuff.

189
00:11:16.990 --> 00:11:19.770
But it can also do more of a set of
proxies and all types of things but

190
00:11:19.770 --> 00:11:22.000
it's just a way for
us to have a better built system.

191
00:11:25.380 --> 00:11:28.547
&gt;&gt; Audience 4: Can you hear me,

192
00:11:28.547 --> 00:11:33.313
it would be ng-blog.
&gt;&gt; Scott Moss: There's

193
00:11:33.313 --> 00:11:35.801
an error in your blog?
&gt;&gt; Audience 4: Yeah.

194
00:11:35.801 --> 00:11:38.079
&gt;&gt; Scott Moss: Do you specifically know

195
00:11:38.079 --> 00:11:42.077
what the error says?
&gt;&gt; Audience 4: There at the ng-blog at

196
00:11:42.077 --> 00:11:46.474
1.0.1 starts with gulp, start script gulp,

197
00:11:46.474 --> 00:11:51.300
like we probably could, ng-blog package.
&gt;&gt; Scott Moss: So that's just a node

198
00:11:51.300 --> 00:11:54.666
throwing a error and the reason it says
ng-blog is because you're looking at

199
00:11:54.666 --> 00:11:58.310
package.json, that's the name of this
package but the error could be anything.

200
00:11:58.310 --> 00:12:00.310
I'll come and check you out in
a minute and see what's going on.

