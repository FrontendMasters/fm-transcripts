WEBVTT

1
00:00:00.000 --> 00:00:04.532
[MUSIC]

2
00:00:04.532 --> 00:00:08.339
&gt;&gt; Speaker 2: Asked if webpack
handles any kind of lazy loading, for

3
00:00:08.339 --> 00:00:13.985
a front end assets and if not if you have
a recommendation on tools to use for that.

4
00:00:13.985 --> 00:00:15.420
&gt;&gt; Scott Moss: Webpack does.

5
00:00:15.420 --> 00:00:18.250
Webpack can handle lazy loading.

6
00:00:18.250 --> 00:00:20.500
You have to, it's not there by default.

7
00:00:20.500 --> 00:00:26.030
So you have to set it up, but yeah, it can
handle lazy loading, it could also handle

8
00:00:26.030 --> 00:00:29.170
code splitting as well,
which is really, really nice feature.

9
00:00:29.170 --> 00:00:32.840
Lower configuration, but it's heavily
documented on the webpack website.

10
00:00:32.840 --> 00:00:33.340
&gt;&gt; Speaker 2: Cool.

11
00:00:34.461 --> 00:00:38.990
Wants to know, what's sublime text
them you're using for your colors?

12
00:00:38.990 --> 00:00:42.766
&gt;&gt; Scott Moss: So for
the colors I'm using, what am I using?

13
00:00:42.766 --> 00:00:47.340
Yeah, this is Seti for the theme and
for the colors I'm using Glacier.

14
00:00:49.840 --> 00:00:52.266
&gt;&gt; Speaker 2: Cool, and
Abdulla wants to know,

15
00:00:52.266 --> 00:00:56.701
what's the reasoning behind
using NPM to install angular is,

16
00:00:56.701 --> 00:01:01.200
versus something like Bower,
he's been using Bower.

17
00:01:01.200 --> 00:01:02.640
&gt;&gt; Scott Moss: Yeah, Bower is great.

18
00:01:02.640 --> 00:01:05.820
It's very great,
it's not exactly the same as NPM.

19
00:01:05.820 --> 00:01:09.449
The reason we're using NPM to install
angular and not Bower is because

20
00:01:09.449 --> 00:01:13.758
we're using, we're gonna be using
ES2015 modules which using the webpack,

21
00:01:13.758 --> 00:01:15.741
compiles down the common JS modules.

22
00:01:15.741 --> 00:01:21.148
And because we can use common JS,
which is node, we can just import,

23
00:01:21.148 --> 00:01:25.541
[COUGH] we are able to use
Angular ES6 model pretty much.

24
00:01:25.541 --> 00:01:28.949
If we use Bowser,
then what's going to happen is,

25
00:01:28.949 --> 00:01:32.932
angular is gonna be added as
a global to the window, right.

26
00:01:32.932 --> 00:01:36.034
And we don't want that,
we actually want it, we want the module.

27
00:01:36.034 --> 00:01:38.371
We wanna be able to reference it and
encapsulate it,

28
00:01:38.371 --> 00:01:39.900
just like we would in node.

29
00:01:39.900 --> 00:01:43.250
So that's why we don't wanna use Bowser.

30
00:01:44.280 --> 00:01:50.620
But some people are starting to build ES6,
like their client site code with ES6.

31
00:01:50.620 --> 00:01:54.180
So some newer stuff actually uses ES6, so

32
00:01:54.180 --> 00:01:57.390
you can get away with using that stuff and
downloading, without NPM.

33
00:01:57.390 --> 00:02:00.080
But definitely not anguler.

34
00:02:00.080 --> 00:02:03.969
None of that stuff is built with ES6 or
ES2015.

35
00:02:03.969 --> 00:02:08.990
So if you can use common JS, then you're
guaranteed to be able to import it.

36
00:02:08.990 --> 00:02:10.700
But if you don't then you don't know.

37
00:02:10.700 --> 00:02:13.880
It can be a AMD module,
it can be a global module.

38
00:02:13.880 --> 00:02:15.530
You have no idea what it's gonna be,
right.

39
00:02:15.530 --> 00:02:18.840
But if it's NPM,
it's guaranteed to come in JS.

40
00:02:18.840 --> 00:02:21.930
So we know that we can import it.

41
00:02:21.930 --> 00:02:24.910
Good question.

42
00:02:24.910 --> 00:02:26.510
Yep.
So, yes so

43
00:02:26.510 --> 00:02:28.160
I was talking about the different stages.

44
00:02:28.160 --> 00:02:31.300
If you go,
I don't know where it is on Babel.

45
00:02:31.300 --> 00:02:35.520
But Babel has a place on there that
talks about like the different stages of

46
00:02:35.520 --> 00:02:36.970
features that comes out.

47
00:02:36.970 --> 00:02:40.630
Stage one is like,
it's like next to bleeding, yet

48
00:02:40.630 --> 00:02:42.890
state zero is like bleeding edge.

49
00:02:42.890 --> 00:02:45.607
Somebody just came over this feature
yesterday and we made it, type thing.

50
00:02:45.607 --> 00:02:49.411
Stage one is like, here are some proposals
that some really smart people came up with

51
00:02:49.411 --> 00:02:50.950
and we implemented them.

52
00:02:50.950 --> 00:02:53.810
So we're gonna use stage one for
some of the features.

53
00:02:55.030 --> 00:02:57.220
So that's how we pass
in that option there.

54
00:02:57.220 --> 00:02:59.080
So that's why I pass in stage one.

55
00:02:59.080 --> 00:02:59.660
&gt;&gt; Speaker 2: Hey, Scott.

56
00:02:59.660 --> 00:03:00.690
&gt;&gt; Scott Moss: Yes?
&gt;&gt; Speaker 2: What

57
00:03:00.690 --> 00:03:03.910
stage does it end at for most stable?

58
00:03:03.910 --> 00:03:06.820
&gt;&gt; Scott Moss: I think by
default it uses stage two.

59
00:03:06.820 --> 00:03:08.610
But I think it goes up to stage three.

60
00:03:08.610 --> 00:03:09.600
I could be corrected.

61
00:03:09.600 --> 00:03:12.220
I'll find the page for it on Babel later,

62
00:03:12.220 --> 00:03:15.520
I can't dig around right now,
but it tells you on here.

63
00:03:15.520 --> 00:03:16.644
It's like, this is where we.

64
00:03:16.644 --> 00:03:19.052
&gt;&gt; Speaker 2: [INAUDIBLE] There it is.

65
00:03:19.052 --> 00:03:20.201
&gt;&gt; Scott Moss: Let's check it out.

66
00:03:20.201 --> 00:03:24.159
This one?

67
00:03:24.159 --> 00:03:26.668
No.

68
00:03:26.668 --> 00:03:28.213
It's not this one.

69
00:03:28.213 --> 00:03:32.970
There's another page on here
somewhere that says, yes this is it.

70
00:03:32.970 --> 00:03:36.760
Let's see, there it is,
you're right, sorry.

71
00:03:36.760 --> 00:03:39.120
Yes, so, Strawman, that's hilarious.

72
00:03:41.130 --> 00:03:43.140
Yes, the reason stage one was
just like proposal stuff.

73
00:03:44.910 --> 00:03:46.890
Stage two or above are enabled by default.

74
00:03:46.890 --> 00:03:49.920
So it goes all the way to stage four,
which is everything that's done,

75
00:03:49.920 --> 00:03:52.790
that's mostly, some of it's probably
in the browser or whatever.

76
00:03:52.790 --> 00:03:55.400
But we're gonna stage one,
which is pretty good.

77
00:03:55.400 --> 00:03:57.330
Stage zero is crazy.

78
00:03:57.330 --> 00:03:59.260
You're a crazy person for using that.

79
00:03:59.260 --> 00:04:02.750
But some really good features in there
like function binding and stuff.

80
00:04:02.750 --> 00:04:03.310
It's really awesome.

81
00:04:03.310 --> 00:04:05.110
There is in this stuff, decorators,

82
00:04:05.110 --> 00:04:08.830
async functions, rest spread,
all that nice stuff.

83
00:04:08.830 --> 00:04:10.676
So this is another reason
why I recommend Babel,

84
00:04:10.676 --> 00:04:12.800
cuz don't I think you can do
a lot of the stuff in Tracer.

85
00:04:14.500 --> 00:04:15.227
Or if you can, it's not this easy.

86
00:04:18.913 --> 00:04:22.260
&gt;&gt; Scott Moss: Cool, and
then this next thing here is the,

87
00:04:22.260 --> 00:04:25.850
I think it should be
excluded not excludes.

88
00:04:25.850 --> 00:04:31.510
So this tells webpack to hey, I want you
to test everything that with this rejects,

89
00:04:31.510 --> 00:04:34.540
but not if it also has this rejects,
all right.

90
00:04:34.540 --> 00:04:36.290
So don't test everything in old modules,

91
00:04:36.290 --> 00:04:40.440
otherwise will be sitting here forever
as it tries to convert ES5 down to ES5.

92
00:04:40.440 --> 00:04:43.320
All right, cuz that's what's gonna happen.

93
00:04:43.320 --> 00:04:46.120
It's gonna go look at all the stuff
you imported from node modules.

94
00:04:46.120 --> 00:04:49.673
And it's gonna run it through Babel,
and Babel's like, I'll look at it, but

95
00:04:49.673 --> 00:04:51.210
it looks like ES5 to me already.

96
00:04:51.210 --> 00:04:53.130
So, and this is gonna take forever.

97
00:04:53.130 --> 00:04:55.368
And then it's gonna throw an error like,
this took too long.

98
00:04:55.368 --> 00:05:00.460
So, just exclude all the stuff that
you downloaded from the internet.

99
00:05:00.460 --> 00:05:00.960
Only run your code.

100
00:05:04.600 --> 00:05:05.550
&gt;&gt; Scott Moss: Makes sense, yes?

101
00:05:05.550 --> 00:05:08.230
&gt;&gt; Speaker 2: Scott, there was
a clarification on the lazy loading

102
00:05:08.230 --> 00:05:09.726
question for webpack.

103
00:05:09.726 --> 00:05:12.670
Was asking specifically
about angular one apps,

104
00:05:12.670 --> 00:05:17.436
do you have a recommendation on how to get
around the kind of Global bootstrapping

105
00:05:17.436 --> 00:05:19.480
problem with lazy loading there?

106
00:05:19.480 --> 00:05:22.010
Is that out of scope for
this exercise today?

107
00:05:22.010 --> 00:05:23.500
&gt;&gt; Scott Moss: That that's
a little out scope,

108
00:05:23.500 --> 00:05:25.880
we could probably get
to at the end tomorrow.

109
00:05:25.880 --> 00:05:26.910
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: I one is a little more

110
00:05:26.910 --> 00:05:28.790
complicated, but there are ways around it.

111
00:05:28.790 --> 00:05:33.364
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: You gotta do some hacks,

112
00:05:33.364 --> 00:05:34.590
cool.

113
00:05:36.964 --> 00:05:40.270
All right so now, if we go look,
let's just go look at what happens.

114
00:05:40.270 --> 00:05:41.760
We'll look at bundle.js.

115
00:05:41.760 --> 00:05:44.179
If you curious and
you looked at bundle.js,

116
00:05:44.179 --> 00:05:46.030
you see all of this stuff, right?

117
00:05:47.230 --> 00:05:48.990
You got, this is what webpack creates.

118
00:05:48.990 --> 00:05:54.588
This is, if you know, if you ever use
node or common JS, you can see that.

119
00:05:54.588 --> 00:05:56.850
Look, exports, module.exports.

120
00:05:56.850 --> 00:05:57.760
This is common JS.

121
00:05:57.760 --> 00:05:59.180
It's mimicking common JS.

122
00:05:59.180 --> 00:06:03.310
So this is how we're able to require and
import things and stuff like that.

123
00:06:03.310 --> 00:06:04.240
So that's all webpack.

124
00:06:04.240 --> 00:06:06.740
And then, down here is our code, finally.

125
00:06:06.740 --> 00:06:09.320
So this is what it turned our code into.

126
00:06:09.320 --> 00:06:12.800
It was this, and

127
00:06:12.800 --> 00:06:17.650
then it turned it to that.

128
00:06:20.020 --> 00:06:21.540
So this is why I like Babel, cuz I mean,

129
00:06:21.540 --> 00:06:22.880
that looks like something
that you would write.

130
00:06:22.880 --> 00:06:24.710
It looks like what a human would write.

131
00:06:24.710 --> 00:06:25.210
Right there.

132
00:06:26.400 --> 00:06:31.416
So that's what that turned into, and
this is what's being ran on a browser.

133
00:06:31.416 --> 00:06:38.190
&gt;&gt; Speaker 4: Any idea if it works twice?

134
00:06:38.190 --> 00:06:39.190
&gt;&gt; Scott Moss: Where do
you see it run twice?

135
00:06:39.190 --> 00:06:40.700
&gt;&gt; Speaker 4: Just on the left and
right angle.

136
00:06:41.880 --> 00:06:45.599
&gt;&gt; Scott Moss: So this is the code that
we wrote in ES2015 this is app.js,

137
00:06:45.599 --> 00:06:46.880
this is bundle.js.

138
00:06:46.880 --> 00:06:49.040
This is what webpack created.

139
00:06:49.040 --> 00:06:54.150
This is what the browser reads.

140
00:06:54.150 --> 00:06:57.150
&gt;&gt; Speaker 4: So it's ES6,
or ES2015, then ES5?

141
00:06:57.150 --> 00:06:58.310
&gt;&gt; Scott Moss: Yep.

142
00:06:58.310 --> 00:07:05.460
Exactly, so this is our ES2015, and
then bundle.js is our ES2000, or our ES5.

143
00:07:07.649 --> 00:07:11.120
&gt;&gt; Scott Moss: This is what Babel did.

144
00:07:11.120 --> 00:07:14.370
Babel took it from that to this,
using the webpack.

