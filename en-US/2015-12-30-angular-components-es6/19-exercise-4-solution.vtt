WEBVTT

1
00:00:00.000 --> 00:00:04.010
[MUSIC]

2
00:00:04.010 --> 00:00:06.710
&gt;&gt; Scott Moss: So the first thing
you had to fix was this file stings.

3
00:00:06.710 --> 00:00:09.772
So normally,
if you ever used Karma before,

4
00:00:09.772 --> 00:00:13.098
this is where you pass in
just tons of files here.

5
00:00:13.098 --> 00:00:15.570
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: Angular marks,

6
00:00:15.570 --> 00:00:16.910
angular this, angular that.

7
00:00:18.750 --> 00:00:21.893
Borrow this, borrow that, and
you'll pass in all this stuff, and

8
00:00:21.893 --> 00:00:23.920
then you'll pass all your source code.

9
00:00:23.920 --> 00:00:26.440
It's like, here's all my source code.

10
00:00:26.440 --> 00:00:29.720
And then underneath that,
now here's all my test, right?

11
00:00:29.720 --> 00:00:32.390
You'd have this array would be like,
30 files.

12
00:00:32.390 --> 00:00:35.130
30 glop patterns of files,
it'd be so much stuff.

13
00:00:35.130 --> 00:00:37.820
But now we don't have to do that
because webpack is going to bundle

14
00:00:37.820 --> 00:00:38.480
everything for us.

15
00:00:38.480 --> 00:00:39.970
All we need is one file.

16
00:00:39.970 --> 00:00:44.028
So, we pass an object instead, that gives
the path of the file and to just say,

17
00:00:44.028 --> 00:00:45.210
just don't watch it.

18
00:00:46.770 --> 00:00:48.220
So, that's the easy win.

19
00:00:48.220 --> 00:00:50.256
How could you have that figured out?

20
00:00:50.256 --> 00:00:52.190
Two things, you could have just looked and

21
00:00:52.190 --> 00:00:54.760
seen that there was a file down here and
read the comments in it.

22
00:00:54.760 --> 00:00:57.859
Or check out this preprocessor what we
were doing down here, some big hints.

23
00:01:00.000 --> 00:01:03.790
And speaking of the preprocessor,
this is telling Karma

24
00:01:03.790 --> 00:01:07.676
what to do with the file before it
sends it off to Mocha in the browser.

25
00:01:07.676 --> 00:01:11.890
So it was like, hey, before you do that
we want you to run it through webpack and

26
00:01:12.980 --> 00:01:15.110
we also want you to run it
through the sourcemap plug in.

27
00:01:15.110 --> 00:01:16.676
Sourcemap plug in just
creates a source map.

28
00:01:16.676 --> 00:01:19.290
So for whatever reason the tests start

29
00:01:19.290 --> 00:01:23.460
acting weird you wanna figure out what's
going on in the test while it was running.

30
00:01:23.460 --> 00:01:26.730
Source map will allow you to like,
when it when we run a test and

31
00:01:26.730 --> 00:01:29.290
Chrome pops open,
allow you to go is that Chrome window and

32
00:01:29.290 --> 00:01:32.130
look at the dom and
look at the source maps for all our stuff.

33
00:01:32.130 --> 00:01:35.250
So you can figure out where in
the test everything is breaking.

34
00:01:35.250 --> 00:01:36.890
So it's pretty cool.

35
00:01:36.890 --> 00:01:40.600
So run it through that,
preprocess it, and then the webpack,

36
00:01:40.600 --> 00:01:44.250
this is the exact same object
that the webpack config takes.

37
00:01:44.250 --> 00:01:46.050
So we just put an inline source map here.

38
00:01:46.050 --> 00:01:51.033
And then pretty much copied everything
over, except there was a regex

39
00:01:51.033 --> 00:01:56.140
in the webpackconfig.js right here,
so this is webpackconfig.js.

40
00:01:56.140 --> 00:01:59.560
There was a regex to
exclude all the spec files.

41
00:01:59.560 --> 00:02:03.130
Definitely wanna exclude them here,
because we don't want the accidental

42
00:02:03.130 --> 00:02:07.280
chance of compiling our spec
files into our production code.

43
00:02:07.280 --> 00:02:09.770
That just really won't work,
in fact it will break.

44
00:02:09.770 --> 00:02:14.380
If you try to run it and describe inside
your production code, it just won't work.

45
00:02:14.380 --> 00:02:16.230
So that's why that's there, but

46
00:02:16.230 --> 00:02:19.240
it prevents us from just copying this
whole thing and placing it over here.

47
00:02:19.240 --> 00:02:22.401
So that's the only one change
you gotta do is get rid of that.

48
00:02:22.401 --> 00:02:25.310
And then this stuff was already here,
cool.

49
00:02:25.310 --> 00:02:26.550
That was pretty much it.

50
00:02:26.550 --> 00:02:30.421
Everything else is pretty much set up for
you here.

51
00:02:30.421 --> 00:02:36.390
So if we head over to, where is it at,
I have the go file, sorry.

52
00:02:36.390 --> 00:02:40.670
Spec.bundle.js, so here's the crazy stuff.

53
00:02:40.670 --> 00:02:44.120
Here's the the bee's knees of
what's happening with the testing.

54
00:02:44.120 --> 00:02:46.290
So in short,
what's happening in this file,

55
00:02:48.100 --> 00:02:53.450
think of this as apps/app.js,
this is the entry file to our tests.

56
00:02:53.450 --> 00:02:55.829
This is what webpack is going
to use to bundle our tests.

57
00:02:55.829 --> 00:02:59.780
And we do it completely
differently than what we've

58
00:02:59.780 --> 00:03:04.590
been doing app.js as far as importing
stuff and I'll show you why.

59
00:03:04.590 --> 00:03:08.980
So we import angular at the top and
angular mocks.

60
00:03:08.980 --> 00:03:13.180
So the approach before was like
just import everything you need

61
00:03:13.180 --> 00:03:17.040
into individual file, so
we can get rid of these two things And

62
00:03:17.040 --> 00:03:20.030
just import them independently
in every spec file that we do,

63
00:03:20.030 --> 00:03:22.500
which is cool, because that's
what we do in a production code.

64
00:03:22.500 --> 00:03:25.030
But for testing,
I decided to just put them here,

65
00:03:25.030 --> 00:03:27.610
cuz they'll be at top of the file and
everything will be fine.

66
00:03:27.610 --> 00:03:30.595
So, I decided that one is because it's
going to get attached to the window, so

67
00:03:30.595 --> 00:03:34.960
angular mocks will be,
it's gonna attach inject and

68
00:03:34.960 --> 00:03:39.010
it's also going to attach
module to the window.

69
00:03:39.010 --> 00:03:41.690
So I didn't really feel the need to
import it over and over and over again.

70
00:03:41.690 --> 00:03:42.560
It's going to be a window thing.

71
00:03:42.560 --> 00:03:43.196
So was angular.

72
00:03:43.196 --> 00:03:45.050
Angular is gonna be
attached to the window,

73
00:03:45.050 --> 00:03:46.890
inside of whatever
browser we run karma in.

74
00:03:46.890 --> 00:03:48.550
So I'll just put them at the top

75
00:03:48.550 --> 00:03:50.040
to make sure that there
before anything else happens.

76
00:03:50.040 --> 00:03:51.360
And this is where it gets crazy.

77
00:03:52.920 --> 00:03:53.670
So require.context.

78
00:03:53.670 --> 00:03:55.660
You had a question over there?

79
00:03:55.660 --> 00:03:57.290
You had a question?

80
00:03:57.290 --> 00:03:58.130
Okay.

81
00:03:58.130 --> 00:04:01.742
Require.context is something
that webpack has added, and

82
00:04:01.742 --> 00:04:04.900
I think is really cool
when I found out about it.

83
00:04:04.900 --> 00:04:09.180
So basically what's happening here is,
I give it a path and

84
00:04:09.180 --> 00:04:12.820
the second option is do I want
to you know dig recursively or

85
00:04:12.820 --> 00:04:16.920
not and the third option is
the rejects to test for it.

86
00:04:16.920 --> 00:04:22.170
So what this is saying is,
look inside this directive recursively,

87
00:04:22.170 --> 00:04:25.900
and find me all the paths that match this.

88
00:04:25.900 --> 00:04:27.990
So find me every single
file that has spec.js.

89
00:04:27.990 --> 00:04:30.240
That's what that's saying.

90
00:04:30.240 --> 00:04:32.080
It's like a glob pattern almost,
pretty much.

91
00:04:32.080 --> 00:04:33.848
And then what it's gonna do,

92
00:04:33.848 --> 00:04:37.471
it's gonna return this function
over here called context.

93
00:04:39.875 --> 00:04:44.070
&gt;&gt; Scott Moss: So context is a function
that has a property on it called keys,

94
00:04:44.070 --> 00:04:47.790
which just returns an array
of all those path names.

95
00:04:47.790 --> 00:04:50.780
So if we were to console.log,
context.keys,

96
00:04:50.780 --> 00:04:54.030
we'd see a an array of all the spec files,
in fact let's just do that.

97
00:04:54.030 --> 00:05:01.670
So you can see, I'll just console.log
this and we'll see it in the terminal.

98
00:05:01.670 --> 00:05:03.749
So you can see what's happening,
because it's kind of confusing.

99
00:05:06.829 --> 00:05:08.990
&gt;&gt; Scott Moss: So let this thing boot up.

100
00:05:12.596 --> 00:05:14.810
&gt;&gt; Scott Moss: Yeah, so I think we
are only gonna have like two files.

101
00:05:14.810 --> 00:05:16.520
So we only have one file.

102
00:05:16.520 --> 00:05:18.770
So it's an array of those actual files.

103
00:05:18.770 --> 00:05:22.840
So any file an in app that has
.spec.js will be inside of here.

104
00:05:22.840 --> 00:05:26.887
So that's what context.keys is.

105
00:05:26.887 --> 00:05:30.847
So, then we loop over those
arrays with .forEach and

106
00:05:30.847 --> 00:05:35.953
the actual context function itself
is going to require those paths.

107
00:05:35.953 --> 00:05:37.090
That's what it's going to do.

108
00:05:37.090 --> 00:05:41.350
It's just like calling require on those
things, which will load those files up.

109
00:05:41.350 --> 00:05:45.030
So we're saying, loop over all of those
paths and require each one of them, and

110
00:05:45.030 --> 00:05:46.020
load them up here.

111
00:05:46.020 --> 00:05:47.180
That's what it's doing.

112
00:05:47.180 --> 00:05:50.534
So, just like going, okay,

113
00:05:50.534 --> 00:05:54.839
I'm gonna require blog.spec.js.

114
00:05:54.839 --> 00:05:56.150
That's what it's doing.

115
00:05:56.150 --> 00:05:59.108
It's just doing this for
every single file inside that array,

116
00:05:59.108 --> 00:06:01.510
which is gonna load them up here.

117
00:06:01.510 --> 00:06:03.844
So it's just a way of not
having to manually do them.

118
00:06:03.844 --> 00:06:06.043
You could do this manually,
you can just go ahead and like, all right,

119
00:06:06.043 --> 00:06:07.190
here's a spec file, require that.

120
00:06:07.190 --> 00:06:08.840
Here is a spec file, require that.

121
00:06:08.840 --> 00:06:09.440
That's cool.

122
00:06:09.440 --> 00:06:11.460
Or you can just do this,
which is way faster.

123
00:06:14.550 --> 00:06:15.424
Any question on this one?

124
00:06:15.424 --> 00:06:16.418
Yes.
&gt;&gt; Speaker 2: Hey Scott,

125
00:06:16.418 --> 00:06:20.468
it's a little off topic, but was wondering
if you could say a few words on what

126
00:06:20.468 --> 00:06:22.960
would be different about
this if we were using jspm.

127
00:06:22.960 --> 00:06:28.908
&gt;&gt; Scott Moss: You would
not need this file in jspm.

128
00:06:28.908 --> 00:06:34.451
You would be doing most your
work in this karma file.

129
00:06:34.451 --> 00:06:40.728
With jspm, it's really a lot harder
to work with jspm because what's

130
00:06:40.728 --> 00:06:46.050
gonna happen is, the issue around jspm
is the fact that the actual imports and

131
00:06:46.050 --> 00:06:49.495
requires are not relative to the file
that you're importing, requiring from.

132
00:06:49.495 --> 00:06:53.390
They're relative to whatever you
tell system.js is the entry,

133
00:06:53.390 --> 00:06:55.420
which is usually the folder
that you're serving.

134
00:06:55.420 --> 00:06:56.610
So, this case it would be dissed.

135
00:06:57.660 --> 00:07:01.940
The problem is, is that when you do that,
it confuses karma.

136
00:07:01.940 --> 00:07:05.614
And karma doesn't know how to
resolve those URL's correctly.

137
00:07:05.614 --> 00:07:07.806
So, you have to set up proxies.

138
00:07:07.806 --> 00:07:09.700
So, you have to come down here.

139
00:07:09.700 --> 00:07:13.247
The only way I got it to work was set
up a proxy and you have to have it say

140
00:07:13.247 --> 00:07:17.183
something like, I don't know the exact
syntax of how karma does proxies.

141
00:07:17.183 --> 00:07:22.435
But you'd have to say,
if you see something that has app in it,

142
00:07:22.435 --> 00:07:28.030
you should redirect it to something else,
to get it to work.

143
00:07:28.030 --> 00:07:29.140
Otherwise it just wouldn't work.

144
00:07:29.140 --> 00:07:31.454
I kept having the same issues with that.

145
00:07:31.454 --> 00:07:36.261
But other than that, JSPM its own plug
ins that you have to use with karma.

146
00:07:36.261 --> 00:07:39.439
There's a karma JSPM and
if you're using Babel, use Babel.

147
00:07:39.439 --> 00:07:43.660
Other than that it's about the same
thing but you definitely don't need

148
00:07:43.660 --> 00:07:48.574
the spect.bundle thing right here, because
system.js is going to run your code,

149
00:07:48.574 --> 00:07:52.400
it's gonna run your code in the browser,
like your ES2015.

150
00:07:52.400 --> 00:07:54.510
It's like, in memory,
it's gonna run it in there.

151
00:07:54.510 --> 00:07:56.240
So it doesn't need to create a bundle.js.

152
00:07:56.240 --> 00:07:58.550
It's gonna run it in the browser.

153
00:07:58.550 --> 00:07:59.790
It's kind of crazy.

154
00:08:01.350 --> 00:08:04.070
You only create a bundle with
JSPM when you're like production.

155
00:08:04.070 --> 00:08:06.230
You're like cool, I'm going to
create a bundle, let me run this.

156
00:08:06.230 --> 00:08:10.770
But other than that system.import
will run it without you.

157
00:08:10.770 --> 00:08:12.750
It will transpile it at run time.

158
00:08:12.750 --> 00:08:15.860
It won't build it and
then serve the build it file.

159
00:08:15.860 --> 00:08:19.980
It'll just run it at, or
it'll transpile it at

160
00:08:19.980 --> 00:08:24.820
runtime, which is great but
hard to set up.

161
00:08:27.610 --> 00:08:32.778
Cool, so yeah,
any other questions on spec.bundled.js?

162
00:08:35.409 --> 00:08:36.778
&gt;&gt; Scott Moss: This one is tough.

163
00:08:36.778 --> 00:08:38.480
If you've got questions let me know,
this one is really tough.

164
00:08:38.480 --> 00:08:43.356
It's only four lines but it's really
tough, that's why I wrote a story in here.

165
00:08:46.932 --> 00:08:48.246
&gt;&gt; Scott Moss: Okay, so
again the concept is,

166
00:08:48.246 --> 00:08:50.420
we're just requiring all the spec files.

167
00:08:50.420 --> 00:08:52.460
I didn't feel like doing them one by one.

168
00:08:52.460 --> 00:08:54.395
That's the only reason why
these two lines exist,

169
00:08:54.395 --> 00:08:56.140
cuz I just didn't feel
like doing them manually.

170
00:08:57.690 --> 00:09:00.450
I would rather spend four months
trying to figure these two lines out,

171
00:09:02.000 --> 00:09:03.560
than write that stuff manually.

172
00:09:03.560 --> 00:09:04.060
I just don't.

