WEBVTT

1
00:00:00.000 --> 00:00:04.156
[MUSIC]

2
00:00:04.156 --> 00:00:05.790
&gt;&gt; Scott Moss: That's the whole
point of services and factors and

3
00:00:05.790 --> 00:00:06.740
why we talk about them.

4
00:00:06.740 --> 00:00:10.610
Because we have those, we have that
static data in our, what was it,

5
00:00:10.610 --> 00:00:11.720
the block controller.

6
00:00:11.720 --> 00:00:14.340
So we want to get rid of that and
store that state somewhere else.

7
00:00:14.340 --> 00:00:16.230
So we shouldn't store state
in our components for

8
00:00:16.230 --> 00:00:18.950
the same reason we should store
state in our controllers.

9
00:00:18.950 --> 00:00:21.510
As before,
you learned all this stuff yesterday.

10
00:00:21.510 --> 00:00:24.690
All right, so anybody know why do we don't
wanna store state in our controllers?

11
00:00:28.320 --> 00:00:30.360
Yes?
&gt;&gt; Speaker 2: Kinda conflating concerns

12
00:00:30.360 --> 00:00:31.960
isn't it?
&gt;&gt; Scott Moss: Yeah it is,

13
00:00:31.960 --> 00:00:34.540
conflating concerns.
&gt;&gt; Speaker 3: Hard to test right?

14
00:00:34.540 --> 00:00:37.059
&gt;&gt; Scott Moss: It is hard to test.

15
00:00:37.059 --> 00:00:41.480
Anything else?
&gt;&gt; Scott Moss: What if we wanna share that

16
00:00:41.480 --> 00:00:43.165
state with other controllers?

17
00:00:43.165 --> 00:00:46.882
Or, controllers are volatile
they're bound to some template,

18
00:00:46.882 --> 00:00:49.719
which is probably balance and
route somewhere and

19
00:00:49.719 --> 00:00:53.440
when you navigate away from that thing,
the state goes with it.

20
00:00:53.440 --> 00:00:54.280
So it's gonna be erased or

21
00:00:54.280 --> 00:00:56.690
exit controller's gonna be
re-initialized every time.

22
00:00:56.690 --> 00:00:57.978
So all your states gone.

23
00:00:57.978 --> 00:01:00.671
It's like you hit refresh on
a browser when you navigate.

24
00:01:00.671 --> 00:01:01.780
You probably don't want that.

25
00:01:01.780 --> 00:01:03.360
You probably want that
state to stay the same,

26
00:01:03.360 --> 00:01:05.738
because the thing you're navigating
to is relying on it as well.

27
00:01:05.738 --> 00:01:09.092
So, putting state in
something that's volatile,

28
00:01:09.092 --> 00:01:12.610
something that's meant to be destroyed and
rebuilt.

29
00:01:12.610 --> 00:01:15.906
It's probably not a good idea.

30
00:01:15.906 --> 00:01:19.300
I can put this stuff in the database or
I cannot.

31
00:01:19.300 --> 00:01:22.660
That's the difference, so
putting aside our factory service,

32
00:01:22.660 --> 00:01:25.280
which is not bound to a view,
which is great.

33
00:01:25.280 --> 00:01:27.580
It'll stay there until you hit refresh.

34
00:01:27.580 --> 00:01:31.310
So that's all, you want to put it there,
and we can share it across multiple

35
00:01:32.330 --> 00:01:35.740
whoever wants it, whatever controller,
whatever component wants it.

36
00:01:36.970 --> 00:01:39.620
So that's why Angular has services,
just for that reason.

37
00:01:39.620 --> 00:01:43.250
So the location of the definition
of the service is dependent on what

38
00:01:43.250 --> 00:01:44.610
components need it.

39
00:01:44.610 --> 00:01:47.300
And what I mean by that is if
we go back and go over here.

40
00:01:49.120 --> 00:01:51.860
To go to the way our
directory structure is.

41
00:01:51.860 --> 00:01:53.228
So if you were on step five,

42
00:01:53.228 --> 00:01:57.641
if you checkout step/five you'll see a new
folder called shared, some stuff in here.

43
00:01:57.641 --> 00:02:01.546
So what I'm saying is the location of
where the stuff is defined is dependant on

44
00:02:01.546 --> 00:02:04.166
what needs it, so
if we code inside our components.

45
00:02:04.166 --> 00:02:08.971
And we're like okay we're gonna make
this new factory this new service,

46
00:02:08.971 --> 00:02:11.370
but it's only gonna be for blog.

47
00:02:11.370 --> 00:02:13.450
Only blog needs this factor of service.

48
00:02:13.450 --> 00:02:16.410
So we create it in here, cuz that's
the only thing that's gonna use it.

49
00:02:16.410 --> 00:02:19.009
So we can make another folder, or you
can just put it right here on the root,

50
00:02:19.009 --> 00:02:19.890
however you wanna do it.

51
00:02:19.890 --> 00:02:22.300
But we definitely make it in this folder.

52
00:02:22.300 --> 00:02:25.920
All right, but let's say blog and
home needed it.

53
00:02:25.920 --> 00:02:28.050
All right, so what we would
do there is we're like, okay,

54
00:02:28.050 --> 00:02:33.410
we need to go up one directory to
a common parent and create it there.

55
00:02:33.410 --> 00:02:34.340
So that's why I have shared.

56
00:02:35.600 --> 00:02:41.160
So sharing it would allow pretty much all
components to be able to use whatever.

57
00:02:41.160 --> 00:02:48.649
Does that makes sense?
&gt;&gt; Scott Moss: Yeah, so

58
00:02:48.649 --> 00:02:52.460
there's more than one component that you
need to register it at a common parent.

59
00:02:52.460 --> 00:02:53.710
I just chose the word share.

60
00:02:53.710 --> 00:02:58.718
Yes?
&gt;&gt; Speaker 2: So if you create a service-

61
00:02:58.718 --> 00:02:59.910
&gt;&gt; Scott Moss: Mm-hm.

62
00:02:59.910 --> 00:03:01.943
&gt;&gt; Speaker 2: And you create separate

63
00:03:01.943 --> 00:03:04.889
services for each controller, or

64
00:03:04.889 --> 00:03:11.330
you create a service that has
multiple functions, that you can use.

65
00:03:11.330 --> 00:03:15.400
Is this different from just
adding it as a service?

66
00:03:15.400 --> 00:03:19.928
I know it's confusing, but then dollar
sign, I actually don't use dollar sign,

67
00:03:19.928 --> 00:03:23.940
but whatever you named your service and
passing it to that controller, so

68
00:03:23.940 --> 00:03:26.075
that you can use methods that you show,

69
00:03:26.075 --> 00:03:27.472
like returning.
&gt;&gt; Scott Moss: Right.

70
00:03:27.472 --> 00:03:30.096
&gt;&gt; Speaker 2: So, does that matter where

71
00:03:30.096 --> 00:03:34.860
it lives or
does it matter where you use it?

72
00:03:34.860 --> 00:03:36.470
&gt;&gt; Scott Moss: It definitely matters,

73
00:03:38.030 --> 00:03:40.090
well technically I guess it
doesn't matter where it lives,

74
00:03:40.090 --> 00:03:43.740
because they're all gonna be registered
eventually on the root module.

75
00:03:43.740 --> 00:03:46.180
So eventually they'll all
be able to use it, but

76
00:03:46.180 --> 00:03:50.200
when it comes to testing it'll break
because you put it in the wrong place.

77
00:03:50.200 --> 00:03:54.124
And then as far as like injecting it,
yeah, it'll be the same thing, if you just

78
00:03:54.124 --> 00:03:57.733
have one service that you created it'll
be the same state the same stuff.

79
00:03:57.733 --> 00:03:59.973
But if you made it each time for
each component,

80
00:03:59.973 --> 00:04:02.109
it's gonna completely different, right?

81
00:04:02.109 --> 00:04:04.222
What's going to happen,
especially if you give it the same name.

82
00:04:04.222 --> 00:04:07.440
The latest one to be registered
would overwrite the previous ones.

83
00:04:08.890 --> 00:04:09.410
&gt;&gt; Speaker 4: Question from

84
00:04:09.410 --> 00:04:10.300
on line Scott.
&gt;&gt; Scott Moss: Yes.

85
00:04:11.560 --> 00:04:12.670
&gt;&gt; Speaker 4: Should services be

86
00:04:12.670 --> 00:04:14.910
stateless and factories be stateful?

87
00:04:14.910 --> 00:04:19.750
Or does it matter?
&gt;&gt; Scott Moss: I don't think it matters.

88
00:04:21.110 --> 00:04:24.670
There probably is a deeper
meaning behind those two,

89
00:04:24.670 --> 00:04:26.930
but I don't think it really matters.

90
00:04:26.930 --> 00:04:27.430
I mean.

91
00:04:28.580 --> 00:04:31.440
A service is a constructor function.

92
00:04:31.440 --> 00:04:35.843
I mean if you want to store some state in
there, you probably gonna have to, but

93
00:04:35.843 --> 00:04:39.782
I can see the argument of services
not having that state in factories,

94
00:04:39.782 --> 00:04:40.685
having state.

95
00:04:40.685 --> 00:04:43.570
That's probably why they
return different values.

96
00:04:43.570 --> 00:04:45.970
But deeper down a little
more in depth than angular.

97
00:04:45.970 --> 00:04:47.760
They're all technically
just called providers.

98
00:04:47.760 --> 00:04:50.807
So that's a little more advanced stuff,
but all these are just call providers and

99
00:04:50.807 --> 00:04:52.236
the providers would make this stuff.

100
00:04:52.236 --> 00:04:55.790
So they really all just the same
thing with a different syntax.

101
00:04:55.790 --> 00:04:58.050
So, but yeah,
I can see the argument that might

102
00:04:59.320 --> 00:05:02.200
be a good way to figure
out what you want to use.

103
00:05:02.200 --> 00:05:06.520
So, I would probably be for it, but
I just don't use services at all.

104
00:05:08.730 --> 00:05:10.380
It's either factories or providers.

105
00:05:10.380 --> 00:05:11.480
That's it, I don't use anything else.

106
00:05:15.220 --> 00:05:16.560
Cool, any questions so far?

107
00:05:17.940 --> 00:05:19.550
Nope.
Okay, so

108
00:05:19.550 --> 00:05:22.329
the big idea about services especially,
with components.

109
00:05:23.550 --> 00:05:27.597
Is to hold our application state and
define an API to interact with that

110
00:05:27.597 --> 00:05:31.177
state and expose it to a controller or
another service again.

111
00:05:31.177 --> 00:05:34.370
I'm not talking about the service method,
I'm talking about services in general.

112
00:05:38.470 --> 00:05:43.240
So we had the we had the state in the
blogs the block controllers, now here's

113
00:05:43.240 --> 00:05:48.460
an example of like a to do factory or to
do service that is actually keeping state.

114
00:05:50.530 --> 00:05:53.919
It is in charge of keeping the state which
is here, which is defined here, all right?

115
00:05:53.919 --> 00:05:56.979
So we have this array of to do's and

116
00:05:56.979 --> 00:06:02.685
we have these methods that we
create to interact with the state.

117
00:06:02.685 --> 00:06:05.605
And then we just expose those
methods by returning them, and

118
00:06:05.605 --> 00:06:08.760
then on anything that
injects this factory.

119
00:06:08.760 --> 00:06:12.640
Now can indirectly interact with

120
00:06:12.640 --> 00:06:18.310
the state by invoking these
this API that we created.

121
00:06:18.310 --> 00:06:20.613
So this is called like
the revealing module pattern, so

122
00:06:20.613 --> 00:06:22.460
design pattern in JavaScript.

123
00:06:22.460 --> 00:06:25.290
So anything that we put in this
object is gonna be a public method or

124
00:06:25.290 --> 00:06:26.450
a public property.

125
00:06:26.450 --> 00:06:29.720
So notice we didn't actually put
the to do's array on this object.

126
00:06:29.720 --> 00:06:31.810
We don't want you directly
interacting with the todosArray.

127
00:06:31.810 --> 00:06:36.477
We only want you to interact with it the
way we meant for you to interact with it,

128
00:06:36.477 --> 00:06:39.263
and that's by placing
these methods on here.

129
00:06:39.263 --> 00:06:41.905
All right, so the only thing you can do
is you can get one or you can get all or

130
00:06:41.905 --> 00:06:42.940
you can create one.

131
00:06:42.940 --> 00:06:44.170
That's it, you can't do anything else.

132
00:06:44.170 --> 00:06:46.020
You can't delete,
you can't do none of that stuff.

133
00:06:46.020 --> 00:06:48.742
So if you got a reference
to todos by returning all,

134
00:06:48.742 --> 00:06:53.492
then you're deleting your controller, then
you'll just be deleting your reference,

135
00:06:53.492 --> 00:06:55.159
it's still gonna exist here.

136
00:06:55.159 --> 00:06:56.146
All right?

137
00:06:56.146 --> 00:06:59.064
So this is a good example,
a very small example, too,

138
00:06:59.064 --> 00:07:01.103
of how you would actually keep state.

139
00:07:01.103 --> 00:07:04.095
So this is going to be here forever,
until you refresh the browser,

140
00:07:04.095 --> 00:07:05.468
the state won't go anywhere.

141
00:07:05.468 --> 00:07:08.537
It doesn't matter how many routes you hit,
what controller you're on or

142
00:07:08.537 --> 00:07:10.350
view you're on, it's gonna stay here.

143
00:07:10.350 --> 00:07:15.140
And if you use this same todos across
multiple places in your application,

144
00:07:15.140 --> 00:07:16.240
it's still the same state.

145
00:07:16.240 --> 00:07:18.350
It doesn't reinitialize it every time.

146
00:07:18.350 --> 00:07:22.190
This todos array is still gonna stay here,
nothing's gonna change.

147
00:07:22.190 --> 00:07:24.320
It's only gonna be initialized
that first time and that's it.

148
00:07:25.390 --> 00:07:26.410
So it's like a cache really.

149
00:07:28.660 --> 00:07:35.417
Any questions on that?
&gt;&gt; Scott Moss: Okay,

150
00:07:35.417 --> 00:07:38.960
so what we'll do instead is,
this is great.

151
00:07:40.670 --> 00:07:44.902
This is great, but this is like
a inline factory as you can see,

152
00:07:44.902 --> 00:07:48.530
you literally just made like an anonymous
function here In place of the line.

153
00:07:48.530 --> 00:07:51.331
So this is cool, but
we're doing a component approach and

154
00:07:51.331 --> 00:07:53.400
we want everything to be broken out right?

155
00:07:53.400 --> 00:07:58.390
And we'd rather take advantage of ES2015
and use less of Angular when possible.

156
00:07:58.390 --> 00:07:59.730
So that's what we're gonna do.

157
00:07:59.730 --> 00:08:03.280
So we're gonna break this function out,
and

158
00:08:03.280 --> 00:08:06.030
then build it somewhere else and
register it with Angular later.

159
00:08:06.030 --> 00:08:07.840
Exactly like you did with the controllers.

160
00:08:07.840 --> 00:08:09.350
Exactly like you do with the directives.

161
00:08:09.350 --> 00:08:11.903
They were just functions and
other files and

162
00:08:11.903 --> 00:08:16.510
then you imported them some at some
point in time and told Angular about it.

163
00:08:16.510 --> 00:08:20.045
But if you start thinking about
it really unlike controllers and

164
00:08:20.045 --> 00:08:23.630
directives where like they actually have
to be registered with Angular to work.

165
00:08:23.630 --> 00:08:26.990
Like a directive just won't work, unless
you tell Angular about it, but controller.

166
00:08:28.130 --> 00:08:30.060
I guess you might be able get it
to work without Angular about it.

167
00:08:30.060 --> 00:08:32.648
But you still have to
tell Angular about it.

168
00:08:32.648 --> 00:08:36.660
But with a factory service,
if you think about it you really don't.

169
00:08:36.660 --> 00:08:40.450
You don't have to register with Angular,
cuz it's just, I mean a factory is just

170
00:08:40.450 --> 00:08:44.240
a function that returns something and
a service is a noble function.

171
00:08:44.240 --> 00:08:45.480
So with that being said,

172
00:08:45.480 --> 00:08:49.350
you don't really have to tell Angular, hey
I'm gonna make a new service in a factory.

173
00:08:49.350 --> 00:08:53.055
You could just import the factory service
and whatever file you want to use and

174
00:08:53.055 --> 00:08:55.171
start using it, like regular JavaScript.

175
00:08:55.171 --> 00:08:59.150
You can do that, and you probably will
get some unexpected side effects.

176
00:08:59.150 --> 00:09:01.250
So I would not recommend doing,

177
00:09:01.250 --> 00:09:04.020
I would still recommend just
telling Angular about that stuff.

178
00:09:04.020 --> 00:09:07.686
That way, if you want to bring it along
with you to another application or

179
00:09:07.686 --> 00:09:10.330
your open source or
some stuff it'll be a lot easier.

180
00:09:10.330 --> 00:09:14.420
So, I highly recommend telling
Angular look, here's a factory,

181
00:09:14.420 --> 00:09:16.340
here's a service, here's a cost whatever.

182
00:09:16.340 --> 00:09:20.240
First it's just like going
inside your controller, and

183
00:09:20.240 --> 00:09:23.220
importing the raw JavaScript of
that factory and start using it.

184
00:09:23.220 --> 00:09:24.150
I wouldn't do that.

185
00:09:24.150 --> 00:09:26.053
Although it would work the same.

186
00:09:26.053 --> 00:09:26.760
Does that make sense,

187
00:09:26.760 --> 00:09:29.690
the argument that I'm saying there?
&gt;&gt; Speaker 2: Still be treated as

188
00:09:29.690 --> 00:09:32.160
a singleton note?
&gt;&gt; Speaker 5: Cuz I thought angular

189
00:09:32.160 --> 00:09:34.250
container handles all that.
&gt;&gt; Scott Moss: Right.

190
00:09:34.250 --> 00:09:37.200
So if you're actually using the dot
service method you would have to do some.

191
00:09:37.200 --> 00:09:39.130
You'd have to create your own signals and

192
00:09:39.130 --> 00:09:42.690
type thing because you have
some issues there and yeah.

193
00:09:42.690 --> 00:09:45.406
The factory too, so
you'd have to figure out how to do that.

194
00:09:45.406 --> 00:09:47.274
Whereas angular is like caching that,
right?

195
00:09:47.274 --> 00:09:49.713
So yeah,
you definitely have some problems.

196
00:09:49.713 --> 00:09:57.376
That's why I recommend don't doing it.
&gt;&gt; Scott Moss: Any questions on that?

197
00:09:57.376 --> 00:09:58.730
Yo.
&gt;&gt; Speaker 6: So

198
00:09:58.730 --> 00:10:00.710
you don't like to use services.

199
00:10:00.710 --> 00:10:05.120
But let's say you do want to use some
single ten or something like that.

200
00:10:05.120 --> 00:10:09.125
Do you have a technique for doing that, or

201
00:10:09.125 --> 00:10:13.090
do you try to?
&gt;&gt; Scott Moss: Well if you use a factory.

202
00:10:13.090 --> 00:10:15.530
So if you just want to use a singleton.

203
00:10:15.530 --> 00:10:18.840
Which is, if you're a stantiated that
singleton from some constructor function,

204
00:10:18.840 --> 00:10:20.340
which you probably are.

205
00:10:20.340 --> 00:10:24.130
Just instantiated inside of factory,
and return that instance-

206
00:10:24.130 --> 00:10:25.450
&gt;&gt; Speaker 6: And saving it for everyone.

207
00:10:25.450 --> 00:10:25.950
Okay.
&gt;&gt; Scott Moss: Correct.

208
00:10:25.950 --> 00:10:26.520
Then you're fine, yeah.

