WEBVTT

1
00:00:00.000 --> 00:00:03.784
[MUSIC]

2
00:00:03.784 --> 00:00:07.090
&gt;&gt; Scott Moss: We just found out that we
have common patterns in all these files.

3
00:00:07.090 --> 00:00:10.261
So what we can do is we can
use a combination of Gulp and

4
00:00:10.261 --> 00:00:15.700
templating to, the process is going
to be look at some files that have

5
00:00:17.840 --> 00:00:21.350
mock variables and mock characters in it.

6
00:00:21.350 --> 00:00:26.590
For instance, what we'll do is,
let's take a look at admin.js.

7
00:00:26.590 --> 00:00:31.020
We'll look at a file
like this who is setup

8
00:00:31.020 --> 00:00:35.350
to have different parts of the file be
swapped out with different values later.

9
00:00:35.350 --> 00:00:36.980
For instance, admin directive,

10
00:00:36.980 --> 00:00:41.790
this is something that's specific to this
component, the word admin directive.

11
00:00:41.790 --> 00:00:43.764
But we definitely need those brackets so

12
00:00:43.764 --> 00:00:46.793
what we would do is we'd have
a file that looks just like this.

13
00:00:46.793 --> 00:00:54.950
But instead it'll say something like this,
&gt;&gt; Scott Moss: Name.

14
00:00:54.950 --> 00:00:58.305
And then what's gonna happen is the
templating engine is gonna grab this file.

15
00:00:58.305 --> 00:01:00.186
And it's not gonna treat
it like JavaScript,

16
00:01:00.186 --> 00:01:02.870
it's gonna treat it like raw text,
this is a raw text file.

17
00:01:02.870 --> 00:01:04.260
Just like I showed you in the Babel.

18
00:01:04.260 --> 00:01:08.857
And it's gonna have an object
with a name property in it.

19
00:01:08.857 --> 00:01:13.060
And it's gonna grab the name property and
switch out its value to whatever this is.

20
00:01:14.070 --> 00:01:18.725
All right, so if I had options.name equals
awesome, then it would come in here and

21
00:01:18.725 --> 00:01:22.720
put awesome in here,
&gt;&gt; Scott Moss: Right.

22
00:01:22.720 --> 00:01:24.810
So that's how the templating's gonna work.

23
00:01:24.810 --> 00:01:28.730
So there needs to exist a whole
bunch of these files somewhere

24
00:01:28.730 --> 00:01:30.480
that the templating engine can read.

25
00:01:30.480 --> 00:01:32.280
So we would have one of these files for

26
00:01:32.280 --> 00:01:34.620
every single piece of
the component that we need.

27
00:01:34.620 --> 00:01:36.906
So that's a controller, a directive,

28
00:01:36.906 --> 00:01:40.756
even a HTML file, a JS file,
the spec file, and even a styles file.

29
00:01:40.756 --> 00:01:43.391
There will be one of these files for
each one of those.

30
00:01:43.391 --> 00:01:47.450
And every time we see a value
that is unique to the component,

31
00:01:47.450 --> 00:01:51.990
we substitute it with this
interpolation syntax, right?

32
00:01:51.990 --> 00:01:55.130
Everything that's unique to
that component, so the names.

33
00:01:55.130 --> 00:01:56.610
Pretty much just the names, really.

34
00:01:56.610 --> 00:01:58.190
So every time you see the name,
if I highlight admin,

35
00:01:58.190 --> 00:01:59.760
how many times does it light up?

36
00:01:59.760 --> 00:02:03.380
That's where I replace everything right
there, everything that says name.

37
00:02:03.380 --> 00:02:06.177
Everything that says admin
will get replaced with this.

38
00:02:08.302 --> 00:02:09.624
&gt;&gt; Scott Moss: So
that's how it's gonna work and

39
00:02:09.624 --> 00:02:11.250
then how we're gonna use it is with Gulp.

40
00:02:11.250 --> 00:02:12.580
So from the command line,

41
00:02:12.580 --> 00:02:18.510
we'll be able to type in a command
like Gulp component this name.

42
00:02:18.510 --> 00:02:22.802
And what it will do is it will go through
that template folder of files that we told

43
00:02:22.802 --> 00:02:23.711
it where it was.

44
00:02:23.711 --> 00:02:26.229
And it will take the name
that you passed it and

45
00:02:26.229 --> 00:02:29.817
replace every instance of this
with the name that you passed it.

46
00:02:32.673 --> 00:02:35.884
&gt;&gt; Scott Moss: And even being wary of
capitalized names like AdminController and

47
00:02:35.884 --> 00:02:36.774
stuff like that.

48
00:02:36.774 --> 00:02:40.880
So if this isn't making sense,
this is fine.

49
00:02:40.880 --> 00:02:44.260
If you check out the step branch, or
if you check out the branch step eight,

50
00:02:45.350 --> 00:02:46.640
you'll start to see
what I'm talking about.

51
00:02:46.640 --> 00:02:50.354
So if everybody wants to do that,
that would be great.

52
00:02:54.313 --> 00:02:56.510
&gt;&gt; Scott Moss: And I promise you
this makes life so much easier,

53
00:02:56.510 --> 00:02:57.483
I use it all the time.

54
00:02:57.483 --> 00:03:00.908
Or, I literally automate all
of my programming stuff now.

55
00:03:00.908 --> 00:03:04.886
I mean, I'm to the point where
I'll type in Gulp commit and

56
00:03:04.886 --> 00:03:09.199
I'll do all the GIT commit stuff for
me, to the point like that.

57
00:03:09.199 --> 00:03:13.581
Or I'll say Gulp changelog, and it'll read
all the commit messages that I made and

58
00:03:13.581 --> 00:03:17.150
make a changelog for me,
stuff like that so I don't have to do it.

59
00:03:17.150 --> 00:03:18.130
So I'm all about automation.

60
00:03:20.240 --> 00:03:23.010
So the git checkout step eight.

61
00:03:24.600 --> 00:03:26.910
Great, so now a couple things
that's happening in here.

62
00:03:26.910 --> 00:03:28.280
Let's take a walk through,
let's do a tour.

63
00:03:29.650 --> 00:03:36.060
Notice that there is now a templates
folder on the root of our application.

64
00:03:36.060 --> 00:03:37.790
Inside of there there's
a component folder.

65
00:03:37.790 --> 00:03:39.520
So open that component folder and
you start looking.

66
00:03:39.520 --> 00:03:42.690
Notice that every single file in
here is prefixed with component.

67
00:03:44.120 --> 00:03:46.790
Component., component.,
component., component.

68
00:03:46.790 --> 00:03:49.738
The reason that's,
does anybody know why that's the case,

69
00:03:49.738 --> 00:03:51.390
why is every file name component?

70
00:03:53.560 --> 00:03:55.780
Or in fact,
why is every file named the same prefix?

71
00:03:57.140 --> 00:03:58.310
&gt;&gt; Speaker 2: So it's easy to replace it?

72
00:03:58.310 --> 00:03:59.860
&gt;&gt; Scott Moss: Exactly,
I'm going to replace it.

73
00:03:59.860 --> 00:04:02.630
I need it to be the same so
I can replace it later, right.

74
00:04:02.630 --> 00:04:04.784
Keep everything the same so
I can replace them all later.

75
00:04:04.784 --> 00:04:06.268
So every file here's gonna be replaced.

76
00:04:06.268 --> 00:04:09.387
Everywhere we see component in this file
tree is going to be replaced with whatever

77
00:04:09.387 --> 00:04:11.430
the name of the component is.

78
00:04:11.430 --> 00:04:13.580
So let's look at the component controller.

79
00:04:13.580 --> 00:04:16.520
There's some to dos in here, and here's
an example of where things get replaced.

80
00:04:16.520 --> 00:04:19.800
So it doesn't matter where
the interpolation exists.

81
00:04:19.800 --> 00:04:22.800
It can exist inside of a string,
it can exist inside of a bracket,

82
00:04:22.800 --> 00:04:23.530
it doesn't matter.

83
00:04:23.530 --> 00:04:25.150
It's gonna find it, it's gonna replace.

84
00:04:25.150 --> 00:04:28.550
Because remember, the template
engine's gonna read this as pure text,

85
00:04:28.550 --> 00:04:29.410
not JavaScript.

86
00:04:29.410 --> 00:04:32.502
So it doesn't know the difference
between a string and a whatever,

87
00:04:32.502 --> 00:04:34.084
it's just pure text, all right.

88
00:04:34.084 --> 00:04:35.610
So there's some to do's in here.

89
00:04:35.610 --> 00:04:38.648
So in the controller what you need to do
is need to figure out how to put the name

90
00:04:38.648 --> 00:04:41.900
here, because remember controllers need
names right here and there's a hint.

91
00:04:44.120 --> 00:04:46.709
Don't worry, we'll look at the Gulp file,
you'll understand it way more I promise.

92
00:04:48.996 --> 00:04:52.446
&gt;&gt; Scott Moss: In the directive file,
you need to import the stylus file,

93
00:04:52.446 --> 00:04:53.850
it says it right there.

94
00:04:53.850 --> 00:04:55.580
Just find a way to import
the stylus file here.

95
00:04:57.790 --> 00:05:00.400
Here's some hints too, here's how to
use the interpolation of the names.

96
00:05:02.070 --> 00:05:03.594
The HTML file is pretty much good to go.

97
00:05:03.594 --> 00:05:07.961
And then the component.js, you got
two things, import the directive and

98
00:05:07.961 --> 00:05:09.770
then register the directive.

99
00:05:12.280 --> 00:05:17.474
Here's some funky stuff going on
here mainly because the templating

100
00:05:17.474 --> 00:05:22.450
engeine uses brackets for
its templating but so does HTML.

101
00:05:22.450 --> 00:05:25.120
So I had to escape that by
using a different syntax, so

102
00:05:25.120 --> 00:05:26.670
that's why this one looks different.

103
00:05:26.670 --> 00:05:28.610
Because this is brackets,
inside of brackets and

104
00:05:28.610 --> 00:05:30.240
the templating engine will get messed up.

105
00:05:30.240 --> 00:05:31.180
So, you have to escape those.

106
00:05:31.180 --> 00:05:32.750
Whereas, everywhere else I
could just use this syntax.

107
00:05:36.730 --> 00:05:38.520
Same thing in the HTML,
I had to do it here, too.

108
00:05:39.700 --> 00:05:40.859
Because they're inside of brackets.

109
00:05:42.710 --> 00:05:43.840
And then component spec.

110
00:05:45.000 --> 00:05:48.415
This one's crazy, so I just left it
fully complete, don't touch this one.

111
00:05:48.415 --> 00:05:51.770
[LAUGH] So it will be a nightmare
if I asked you to do stuff in here.

112
00:05:51.770 --> 00:05:55.040
So this one's good to go, and
component style, this one's good to go.

113
00:05:55.040 --> 00:05:56.760
So how do you know this works?

114
00:05:56.760 --> 00:05:57.500
I'll show you.

115
00:05:57.500 --> 00:05:58.920
So actually, before I do that.

116
00:05:59.990 --> 00:06:04.610
Let's go to the Gulp file and
scroll all the way down to the bottom and

117
00:06:04.610 --> 00:06:07.110
look at the Gulp task called component.

118
00:06:07.110 --> 00:06:09.140
It's already built out for you,
you don't have to touch it.

119
00:06:09.140 --> 00:06:11.960
Let's walk through it, I want you to
understand what's happening when we

120
00:06:11.960 --> 00:06:13.670
run this command and
how to actually use it.

121
00:06:15.745 --> 00:06:17.915
So component is a task with Gulp.

122
00:06:17.915 --> 00:06:19.945
So if we type in gulp component,
it's gonna do something.

123
00:06:19.945 --> 00:06:22.115
But we have to pass it some arguments.

124
00:06:22.115 --> 00:06:23.685
So if you're familiar
with the command line,

125
00:06:23.685 --> 00:06:28.035
you know that most of the time you can
do something like you run a command and

126
00:06:28.035 --> 00:06:30.595
you pass in some arguments with a flag,
right?

127
00:06:30.595 --> 00:06:32.709
You'll say ops 2, right,

128
00:06:32.709 --> 00:06:36.720
that's how you'll pass in
an argument on a command line tool.

129
00:06:36.720 --> 00:06:39.640
If you've never done that before, this is
how you pass an argument to command lines.

130
00:06:39.640 --> 00:06:44.010
This is usually the default, or
it's dash and then some capital letter.

131
00:06:44.010 --> 00:06:48.330
Just like when we do npm install, so
we'll say npm install and then --save.

132
00:06:48.330 --> 00:06:53.110
We're passing it an option, or for
shortcut we'll say -S, stuff like that.

133
00:06:53.110 --> 00:06:55.744
So we're doing the same thing with Gulp.

134
00:06:55.744 --> 00:06:59.276
So we will be able to come here and
say gulp component,

135
00:06:59.276 --> 00:07:01.249
which is the name of the task.

136
00:07:01.249 --> 00:07:04.431
And then dash dash something,
that's we're gonna do.

137
00:07:04.431 --> 00:07:07.312
So the arguments that
we're gonna be looking for

138
00:07:07.312 --> 00:07:09.970
is gonna be called the name argument.

139
00:07:09.970 --> 00:07:14.504
So this yard's thing, it's just a Node
module that allows us to take in

140
00:07:14.504 --> 00:07:17.315
arguments passed in from the command line.

141
00:07:17.315 --> 00:07:20.403
And it creates a JavaScript object for
us with those properties.

142
00:07:20.403 --> 00:07:24.408
So yards.name will give us the value
of the name flag that may or

143
00:07:24.408 --> 00:07:26.231
may not have been passed in.

144
00:07:26.231 --> 00:07:30.670
So if I do --name and anything after it.

145
00:07:30.670 --> 00:07:32.139
That's going to get attached
to yards that name.

146
00:07:34.360 --> 00:07:38.591
So if I say --name scott and
then I were to come in here and

147
00:07:38.591 --> 00:07:41.685
console.log name, it would say scott.

148
00:07:41.685 --> 00:07:44.180
All right, so this is where we will
put the name of our component.

149
00:07:44.180 --> 00:07:46.620
So we'll say gulp component --name and

150
00:07:46.620 --> 00:07:52.000
then maybe we'll call this component
about, this is the about page.

151
00:07:55.830 --> 00:07:57.110
So that's what the name is doing.

152
00:07:57.110 --> 00:07:57.840
The parent path,

153
00:07:57.840 --> 00:08:01.820
this one's optional, this is where
you want to install the component.

154
00:08:01.820 --> 00:08:02.508
By default,

155
00:08:02.508 --> 00:08:06.470
it will install it in the components
folder in client/app/components.

156
00:08:06.470 --> 00:08:08.830
It will install it here next to all these.

157
00:08:08.830 --> 00:08:11.140
But if you don't want that,
if you want to install it somewhere else,

158
00:08:11.140 --> 00:08:14.540
maybe inside of common.

159
00:08:14.540 --> 00:08:18.440
All you had to do is just pass in
a path relative to components.

160
00:08:18.440 --> 00:08:21.351
So what that looks like
is if you say --parent,

161
00:08:21.351 --> 00:08:25.970
you pass in a path relative to components,
that's where it'll install it.

162
00:08:25.970 --> 00:08:30.513
So for instance, let's say that
we wanna install it in common,

163
00:08:30.513 --> 00:08:33.440
then we would just say /common.

164
00:08:33.440 --> 00:08:37.700
Because that's relative to components.

165
00:08:37.700 --> 00:08:40.113
Or let's say we wanted
to install it in shared.

166
00:08:40.113 --> 00:08:43.822
So, what we would do is we'd say okay,
back out of component and

167
00:08:43.822 --> 00:08:45.140
install it in shared.

168
00:08:45.140 --> 00:08:49.420
But, this one's optional,
you don't have to do this.

169
00:08:49.420 --> 00:08:51.470
By default, it'll go into components.

170
00:08:51.470 --> 00:08:53.128
So but
you definitely have to pass it a name.

171
00:08:53.128 --> 00:08:56.990
If you don't pass in a name, actually,
I don't know what it's gonna do so

172
00:08:56.990 --> 00:08:59.568
just pass in a name, so give it a name.

173
00:08:59.568 --> 00:09:02.860
And be wary if you give it a name
of a component that already exists,

174
00:09:02.860 --> 00:09:03.800
it will overwrite that component.

175
00:09:06.770 --> 00:09:08.240
So if you want to upgrade this and

176
00:09:08.240 --> 00:09:10.159
check to see that that's there before,
be my guest.

177
00:09:10.159 --> 00:09:13.918
It won't be the hard, you can see
does this directory already exist?

178
00:09:13.918 --> 00:09:16.900
If so, don't do anything, so
you can do that but I didn't do that.

179
00:09:16.900 --> 00:09:22.670
And this is just a function
that just figures out the path,

180
00:09:22.670 --> 00:09:24.730
so this is just some helper function.

181
00:09:24.730 --> 00:09:29.330
But anyway what's really happening here
is if we scroll to path, this object.

182
00:09:29.330 --> 00:09:31.370
We have this blankTemplate array,

183
00:09:31.370 --> 00:09:34.640
this is just a path to the templates
that we just saw, those template files.

184
00:09:34.640 --> 00:09:38.656
It's just the path to it, so it gave me
all the files in templates/components.

185
00:09:38.656 --> 00:09:42.120
So it's gonna read all those files and
it's gonna run it through this template

186
00:09:42.120 --> 00:09:45.120
function, which does exactly
what I just showed you in Babel.

187
00:09:45.120 --> 00:09:49.460
It takes in an object of
different properties.

188
00:09:49.460 --> 00:09:52.200
So it has a name property and
upCaseName property,

189
00:09:52.200 --> 00:09:54.320
which is the name but capitalized.

190
00:09:55.610 --> 00:09:58.420
So now inside of our templatess,
we get access to name and upCase.

191
00:09:59.530 --> 00:10:02.688
So if you go look in our templates again,
that's the only two variables we're using,

192
00:10:02.688 --> 00:10:08.180
name, and upCaseName.

193
00:10:08.180 --> 00:10:10.840
Those are the only two variables we have.

194
00:10:10.840 --> 00:10:13.830
If you wanna use some more variables,
then just pass them in right here.

195
00:10:13.830 --> 00:10:15.450
You wanna do something else?

196
00:10:15.450 --> 00:10:18.665
Give it a value, and
now you can use that in your template.

197
00:10:21.394 --> 00:10:22.960
&gt;&gt; Scott Moss: So
whatever is in this object.

198
00:10:22.960 --> 00:10:24.630
So we'll only need those two,
cuz it's the only thing we're changing.

199
00:10:24.630 --> 00:10:29.379
And then we're gonna pipe the result
of those files to rename,

200
00:10:29.379 --> 00:10:33.949
which just renames the file
names from component.whatever

201
00:10:33.949 --> 00:10:38.270
to the name.whatever,
that's what happening there.

202
00:10:38.270 --> 00:10:41.880
And then we just put it on
the destination path which I showed you

203
00:10:41.880 --> 00:10:46.830
is either gonna be components by default
or whatever you passed in, and that's it.

204
00:10:46.830 --> 00:10:49.470
It doesn't erase these templates,
these things just get copied.

205
00:10:49.470 --> 00:10:51.470
They don't get erased or changed,
so they'll always be here.

206
00:10:52.920 --> 00:10:56.220
But what's gonna happen is your stuff will
be added here, so let's check it out.

207
00:10:57.220 --> 00:11:00.876
So let me check out this solution so
you can see what happens.

208
00:11:00.876 --> 00:11:05.095
Git checkout

209
00:11:05.095 --> 00:11:10.860
step-8-fix.

210
00:11:10.860 --> 00:11:16.320
So, if I type in gulp component --name,
let's use about.

211
00:11:16.320 --> 00:11:19.540
So, I wanna make an about component for
the about phase, hit Enter.

212
00:11:21.750 --> 00:11:24.840
There is starting component,
done with component, 38 milliseconds.

213
00:11:24.840 --> 00:11:26.938
So now if we go look in
the components folder,

214
00:11:26.938 --> 00:11:29.210
there's an about folder right there.

215
00:11:29.210 --> 00:11:33.519
We go look at it,
there's AboutController.js.

216
00:11:33.519 --> 00:11:35.713
So all that stuff's set up,
all the names are right.

217
00:11:35.713 --> 00:11:39.575
AboutController, AboutController,

218
00:11:39.575 --> 00:11:44.919
About.Directive.js, everything
looks good here.

219
00:11:44.919 --> 00:11:51.072
About.html, even got the right
class there, About.js.

220
00:11:51.072 --> 00:11:56.446
It's importing the directives correctly
and uiRouter set up the routes correctly,

221
00:11:56.446 --> 00:11:59.510
the state name, the template,
all that stuff.

222
00:12:00.560 --> 00:12:05.923
About.spec, this one looks good,
it's got some crazy stuff in here though.

223
00:12:05.923 --> 00:12:09.954
And then about.styl,
even sets up a style for us.

224
00:12:09.954 --> 00:12:13.250
So pretty handy if you ask me.

225
00:12:13.250 --> 00:12:18.900
So all you'd have to do from this point
is go down to app.js and register it.

226
00:12:18.900 --> 00:12:19.700
That's all you had to do.

227
00:12:22.185 --> 00:12:23.110
&gt;&gt; Scott Moss: That's it.

228
00:12:23.110 --> 00:12:25.390
I mean if you really wanted to I
guess you could automate this too.

229
00:12:25.390 --> 00:12:27.130
It'd be kind of hard to do that.

230
00:12:27.130 --> 00:12:29.881
I guess not, you can run this through
a regex like yeah, if you see this,

231
00:12:29.881 --> 00:12:30.850
add another thing to it.

232
00:12:30.850 --> 00:12:37.014
You could, you could do that but
I think that's a little overdoing it, so.

233
00:12:37.014 --> 00:12:38.290
&gt;&gt; Speaker 3: Pull request.

234
00:12:38.290 --> 00:12:40.330
&gt;&gt; Scott Moss: Pull request,
yeah, I'll take it.

235
00:12:40.330 --> 00:12:42.590
So, that's what you're going to be doing.

236
00:12:42.590 --> 00:12:45.349
So just to go over it again on what you're

237
00:12:45.349 --> 00:12:48.921
going to be doing inside
of templates/component,

238
00:12:48.921 --> 00:12:54.400
just go into the files,
&gt;&gt; Scott Moss: This is the solution?

239
00:12:55.450 --> 00:12:59.776
Templates/component, go into the files
that have to do's in them and

240
00:12:59.776 --> 00:13:01.591
just do what the to do's say.

241
00:13:04.331 --> 00:13:06.270
&gt;&gt; Scott Moss: So the syntax for
interpolation is this.

242
00:13:06.270 --> 00:13:12.960
It's a less than, a percentage sign,

243
00:13:12.960 --> 00:13:16.150
followed by a equal sign and then
the name of the variable that you want.

244
00:13:16.150 --> 00:13:19.400
Remember the only two variables we have
is called name, which is the name of

245
00:13:19.400 --> 00:13:23.070
the component, and upCaseName, which
is the uppercase name of the component.

246
00:13:23.070 --> 00:13:24.690
Those are the only two variables we have.

247
00:13:24.690 --> 00:13:27.541
So either one of those,
and then to close it,

248
00:13:27.541 --> 00:13:31.070
you just do percentage greater than,
that's it.

249
00:13:31.070 --> 00:13:32.590
Wherever you put that
it will be translated.

250
00:13:32.590 --> 00:13:36.680
Doesn't matter where on the document you
put that, it will be swapped with a name.

251
00:13:36.680 --> 00:13:38.240
Doesn't matter if it's in a stream,

252
00:13:38.240 --> 00:13:41.520
in a double quote,
inside of an object, it doesn't care.

253
00:13:41.520 --> 00:13:43.839
It doesn't read this file as JavaScript,
it reads it as pure text.

254
00:13:46.110 --> 00:13:49.986
So go ahead and get that done and you know
you're done when you just run the command

255
00:13:49.986 --> 00:13:52.158
that I did and
it creates a component for you.

