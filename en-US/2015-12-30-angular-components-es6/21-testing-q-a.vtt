WEBVTT

1
00:00:00.025 --> 00:00:03.944
[MUSIC]

2
00:00:03.944 --> 00:00:06.218
&gt;&gt; Scott Moss: Where we left
off yesterday, testing.

3
00:00:06.218 --> 00:00:08.505
So specifically wanted to leave off for

4
00:00:08.505 --> 00:00:12.939
testing because I was telling Mark
yesterday, you don't want to start with

5
00:00:12.939 --> 00:00:17.671
testing because then people you set the
tone, people will get bored of testing.

6
00:00:17.671 --> 00:00:19.890
So you got to end with it.

7
00:00:19.890 --> 00:00:21.840
All right, and you give them the option
that they want to stick with it or not,

8
00:00:21.840 --> 00:00:22.446
because it's the end.

9
00:00:22.446 --> 00:00:26.476
So I'm glad everybody who stuck around
to do the testing did it, because if you

10
00:00:26.476 --> 00:00:30.691
didn't go through that you'd probably have
a hard time trying to figure out how to

11
00:00:30.691 --> 00:00:34.927
test the stuff that you've been learning
the entire workshop, which is not fun.

12
00:00:34.927 --> 00:00:36.649
I can tell you that.

13
00:00:36.649 --> 00:00:40.530
So before we move on,
were there any questions that might have

14
00:00:40.530 --> 00:00:43.610
come up yesterday that you just forgot
to ask or didn't get the chance to ask?

15
00:00:43.610 --> 00:00:46.990
Anybody have any of those questions
before we move on to other stuff?

16
00:00:48.030 --> 00:00:49.303
&gt;&gt; Speaker 2: There was one question

17
00:00:49.303 --> 00:00:52.190
online that maybe would
really help to clarify so,

18
00:00:52.190 --> 00:00:52.762
&gt;&gt; Scott Moss: Yeah.

19
00:00:52.762 --> 00:00:53.522
&gt;&gt; Speaker 2: John M was

20
00:00:53.522 --> 00:00:58.414
wondering
&gt;&gt; Speaker 2: Why we needed to

21
00:00:58.414 --> 00:01:03.067
have an exclude for
node modules in our web pack loader,

22
00:01:03.067 --> 00:01:07.431
when we're passing Gulp
client as the entry point.

23
00:01:07.431 --> 00:01:11.709
So his understanding is that we
should just be scanning client for

24
00:01:11.709 --> 00:01:17.060
JavaScript files and that we don't
necessarily need to exclude node modules.

25
00:01:17.060 --> 00:01:17.570
&gt;&gt; Scott Moss: Right, and

26
00:01:17.570 --> 00:01:20.240
he's exactly right, half of that.

27
00:01:20.240 --> 00:01:23.690
So we are only scanning the client files,
but

28
00:01:23.690 --> 00:01:27.010
if we go look at the client files,
all right.

29
00:01:28.600 --> 00:01:33.170
If we go look at the client files,
&gt;&gt; Scott Moss: And

30
00:01:33.170 --> 00:01:38.185
we just go look in app.js,
the first file that we wrote Boom!

31
00:01:38.185 --> 00:01:41.841
import angular from 'angular'; that
comes from the old modules, right.

32
00:01:41.841 --> 00:01:43.891
So yeah,
we are scanning the client files, but

33
00:01:43.891 --> 00:01:46.630
the client files
are imported node modules.

34
00:01:46.630 --> 00:01:51.735
So that's why we have to exclude
those paths from being used to babble

35
00:01:51.735 --> 00:01:56.970
code, any other questions?
&gt;&gt; Speaker 3: That's

36
00:01:56.970 --> 00:01:59.979
an awesome explanation, thank you.
&gt;&gt; Speaker 4: Mocha verses Chai.

37
00:01:59.979 --> 00:02:02.061
Chai is an assertion library,

38
00:02:02.061 --> 00:02:04.113
that's what you said?
&gt;&gt; Scott Moss: Yeah, so

39
00:02:04.113 --> 00:02:07.062
Mocha is a testing framework and
Chai is an assertion library.

40
00:02:07.062 --> 00:02:10.017
Because Mocha doesn't have one
built in like Jasmine does.

41
00:02:10.017 --> 00:02:14.977
So Jasmine and Mocha, the syntax is
synonymous, but Jasmine is the full thing.

42
00:02:14.977 --> 00:02:16.745
It has, it's the testing framework.

43
00:02:16.745 --> 00:02:20.554
It has an insertion library built in,
it has like mocking capabilities built in.

44
00:02:20.554 --> 00:02:24.933
Mocha is just a testing framework,
that's it.

45
00:02:24.933 --> 00:02:28.820
And Chai is everything else
that Mocha didn't have.

46
00:02:28.820 --> 00:02:30.875
And there are other ones out there,
expect JS and

47
00:02:30.875 --> 00:02:32.594
all type of other insertion libraries.

48
00:02:32.594 --> 00:02:34.031
So I just chose those two.

49
00:02:34.031 --> 00:02:39.450
Any other questions?
&gt;&gt; Speaker 5: Yeah, I got a question.

50
00:02:39.450 --> 00:02:41.409
When you're gonna test, first off,

51
00:02:41.409 --> 00:02:44.668
I don't understand why there is
such a stigma around testing.

52
00:02:44.668 --> 00:02:45.371
I think it's good thing to do.

53
00:02:45.371 --> 00:02:50.155
But when you're testing for
directives, let's say, for example,

54
00:02:50.155 --> 00:02:53.813
I work on a UI framework
that's used in translating.

55
00:02:53.813 --> 00:02:59.337
And where we recreate a bunch of HTML,

56
00:02:59.337 --> 00:03:03.315
like a button for example.

57
00:03:03.315 --> 00:03:07.472
Would you test behavior that would be like

58
00:03:07.472 --> 00:03:12.579
an Angular directive and
you click to make sure that

59
00:03:12.579 --> 00:03:17.467
that's passed through to the template or-
&gt;&gt; Scott Moss: Yeah.

60
00:03:17.467 --> 00:03:18.745
&gt;&gt; Speaker 5: You would test?

61
00:03:18.745 --> 00:03:19.390
&gt;&gt; Scott Moss: Yeah, so

62
00:03:19.390 --> 00:03:24.816
those type of directories are UI based
type of directives that have dom events.

63
00:03:24.816 --> 00:03:27.569
Yeah, you totally have to test
the behavior on those things.

64
00:03:27.569 --> 00:03:29.126
&gt;&gt; Speaker 5: What would you test

65
00:03:29.126 --> 00:03:32.832
specifically that Angular, I don't know.

66
00:03:32.832 --> 00:03:36.413
Let me rethink the question and
I'll ask you later.

67
00:03:36.413 --> 00:03:37.470
&gt;&gt; Scott Moss: Okay, okay, cool.

