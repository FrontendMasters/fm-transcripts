WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:06.208
&gt;&gt; Scott Moss: Here's
a little intro on Webpack and

3
00:00:06.208 --> 00:00:09.660
then we're gonna set you all
loose to pack of some stuff.

4
00:00:09.660 --> 00:00:14.115
So like I said, we'll be using Gulp and
Webpack as our system.

5
00:00:14.115 --> 00:00:17.711
If you haven't used Gulp before,
don't worry, the stuff you're gonna

6
00:00:17.711 --> 00:00:20.727
be looking at is pretty much all
built out with a lot of notes and

7
00:00:20.727 --> 00:00:23.065
you'll be able to figure
out what's going on.

8
00:00:23.065 --> 00:00:27.746
But the way we're gonna use it is
Gulp is gonna orchestrate Webpack and

9
00:00:27.746 --> 00:00:32.720
handle things like copying files and
like serving our app.

10
00:00:32.720 --> 00:00:36.150
And Webpack will transpile and
bundle our code.

11
00:00:36.150 --> 00:00:39.400
So it will take our source code
whether it's a JavaScript,

12
00:00:39.400 --> 00:00:44.730
HTML TNG whatever it will take all
that stuff and bundle it for us.

13
00:00:44.730 --> 00:00:48.664
And also I want you know that Webpack
can also serve application to I'm just

14
00:00:48.664 --> 00:00:51.230
choosing to use Gulp and some other tasks.

15
00:00:51.230 --> 00:00:54.950
Because if I'm gonna use Gulp and
it's going to be there for other tasks.

16
00:00:54.950 --> 00:00:59.660
I'm also gonna use it to control certain
serving my application all the Webpack

17
00:00:59.660 --> 00:01:01.910
has like a Webpack server
that you can use and

18
00:01:01.910 --> 00:01:05.500
has like hot code injection
which is really awesome.

19
00:01:05.500 --> 00:01:09.312
It like injects the JavaScript into
the page and keep the status like legit.

20
00:01:09.312 --> 00:01:12.002
So you can do that with Webpack but
we're not gonna do that.

21
00:01:12.002 --> 00:01:16.673
We're just gonna use plain old Gulp for
all that stuff and Webpack just for

22
00:01:16.673 --> 00:01:19.397
compiling and transpiling and bundling.

23
00:01:19.397 --> 00:01:23.435
The sweet thing about a Webpack that I
really like is that it treats everything

24
00:01:23.435 --> 00:01:25.150
as a module everything.

25
00:01:25.150 --> 00:01:27.470
So if you ever use node think Common js.

26
00:01:27.470 --> 00:01:31.455
Now also when you think about Common
js you think importing JavaScript or

27
00:01:31.455 --> 00:01:32.230
JSON files.

28
00:01:32.230 --> 00:01:38.090
Now imagine you can require HTML,
CSS, JavaScript.

29
00:01:38.090 --> 00:01:41.480
So any file you want,
you can you can require.

30
00:01:41.480 --> 00:01:44.130
That's what Webpack does in the browser.

31
00:01:44.130 --> 00:01:48.460
It's like what,
why don't I wouldn't import a JPG?

32
00:01:48.460 --> 00:01:51.490
You'll see, like, I know it's
kind of crazy to think about it,

33
00:01:51.490 --> 00:01:53.180
but it's really nice.

34
00:01:53.180 --> 00:01:56.660
So this is like the future of development
and JSP allows you to do this too,

35
00:01:56.660 --> 00:01:59.540
it's just their plug in
system isn't quite there yet.

36
00:01:59.540 --> 00:02:01.080
But they allow you to
do this stuff as well.

37
00:02:01.080 --> 00:02:03.060
So, this is the future of web development.

38
00:02:04.300 --> 00:02:10.180
And I think, once I started to use this
process, I was like, I just can't go back.

39
00:02:10.180 --> 00:02:13.160
Having the right link tag in the head or

40
00:02:13.160 --> 00:02:17.235
a script tag it was just like,
I don't want to do it.

41
00:02:17.235 --> 00:02:18.628
&gt;&gt; Speaker 2: [LAUGH].

42
00:02:18.628 --> 00:02:22.020
&gt;&gt; Scott Moss: So, first thing we
need to do is we need to create

43
00:02:22.020 --> 00:02:26.290
a webpack.config.js on
the root of our application.

44
00:02:26.290 --> 00:02:30.952
Don't worry about doing this right now
this is just to show you this stuff is

45
00:02:30.952 --> 00:02:33.690
already going to be
there in the actual app.

46
00:02:33.690 --> 00:02:35.569
And I'll show you the branch
to check out too.

47
00:02:35.569 --> 00:02:40.580
So we need to create this
in our root to application.

48
00:02:40.580 --> 00:02:42.244
Because Webpack is gonna look for

49
00:02:42.244 --> 00:02:45.166
this file by default by
the name of webpack.config.js.

50
00:02:45.166 --> 00:02:48.800
Just like Gulp looks for gulp file js and
grunt looks for grunt file.

51
00:02:48.800 --> 00:02:50.740
Webpack looks for Webpack.config.js.

52
00:02:50.740 --> 00:02:52.405
That's what it's looking for.

53
00:02:52.405 --> 00:02:54.300
And it's gonna look something like this.

54
00:02:54.300 --> 00:02:57.224
Not exactly but something like this.

55
00:02:57.224 --> 00:03:00.390
Here's just some comments on like
what the hell is going on here and

56
00:03:00.390 --> 00:03:01.990
what this stuff is.

57
00:03:01.990 --> 00:03:06.400
So, context is just where

58
00:03:07.590 --> 00:03:12.110
Webpack is gonna resolve the entry file
to our application, what directory.

59
00:03:13.150 --> 00:03:17.180
And then entry is where's the first
file that Webpack needs to load up.

60
00:03:17.180 --> 00:03:19.450
And that file is gonna
load up other files and

61
00:03:19.450 --> 00:03:21.260
that file is gonna load up other files.

62
00:03:21.260 --> 00:03:24.951
So, the way you should be thinking
about this stuff is kept sound file but

63
00:03:24.951 --> 00:03:29.040
really should start thinking about
the code that we write are just modules.

64
00:03:29.040 --> 00:03:30.110
Everything is a module.

65
00:03:30.110 --> 00:03:32.285
So we're going to be writing modules,
we're going to be importing,

66
00:03:32.285 --> 00:03:34.870
then acquiring and
exporting these modules.

67
00:03:34.870 --> 00:03:38.490
Whether that's JavaScript HTML,
CSS they're all modules.

68
00:03:38.490 --> 00:03:39.660
So Webpack is gonna handle that.

69
00:03:39.660 --> 00:03:44.140
So it starts at one module and then as
a tree it starts to import all the other

70
00:03:44.140 --> 00:03:49.820
modules that are being required by that
entry module and so forth and so forth.

71
00:03:49.820 --> 00:03:53.222
Output is the name of the file that
Webpack is gonna, cuz it's gonna bundle

72
00:03:53.222 --> 00:03:56.815
all our modules in one file this is the
name of the file that it's gonna create.

73
00:03:56.815 --> 00:03:57.920
Bundle.js.

74
00:03:57.920 --> 00:04:01.560
That's the standard name you
see that a lot Bundle.js.

75
00:04:01.560 --> 00:04:02.970
And then to this path.

76
00:04:02.970 --> 00:04:05.864
So to the distbundle.js.

77
00:04:05.864 --> 00:04:10.773
Dev tool this is like how do you want
to handle any type of like development

78
00:04:10.773 --> 00:04:11.588
workflow?

79
00:04:11.588 --> 00:04:14.471
What I'm telling Webpack
is I just want source maps,

80
00:04:14.471 --> 00:04:16.401
just make me some source map files.

81
00:04:16.401 --> 00:04:19.264
Standard source map files that
way if you launch a debug or

82
00:04:19.264 --> 00:04:22.738
something we can see our source code and
not whatever Babel spit out.

83
00:04:22.738 --> 00:04:25.130
Or whatever Webpack has, right.

84
00:04:25.130 --> 00:04:27.600
And then here's the candy,
here's the sugar.

85
00:04:28.700 --> 00:04:32.410
So we have this module object
of this loaders array.

86
00:04:32.410 --> 00:04:34.657
So this loaders array,
if you've ever used Grunt or

87
00:04:34.657 --> 00:04:38.930
Gulp, this is where you would like
make tasks and have your plugins.

88
00:04:38.930 --> 00:04:41.695
So these loaders array takes objects.

89
00:04:41.695 --> 00:04:46.766
And the way these objects works is that
they take a test property which is

90
00:04:46.766 --> 00:04:52.870
just like a red jacks that runs against
a filename, a file pattern that matches.

91
00:04:52.870 --> 00:04:55.510
Then it will run the associated loader.

92
00:04:55.510 --> 00:04:57.110
So loader is like a plugin.

93
00:04:57.110 --> 00:05:02.280
So right now I have any file
that has a CSS extension on it

94
00:05:02.280 --> 00:05:05.580
I wanna run it through the CSS loader and
the style loader.

95
00:05:05.580 --> 00:05:07.870
So this bang right here as zoom in on it.

96
00:05:08.880 --> 00:05:09.640
This means.

97
00:05:09.640 --> 00:05:11.520
This is how you separate two loaders.

98
00:05:11.520 --> 00:05:13.376
So and it reads from right to left so

99
00:05:13.376 --> 00:05:17.610
that means any file with the CSS extension
run it through the CSS loader first.

100
00:05:17.610 --> 00:05:21.150
Once that's done run it
through the style loader.

101
00:05:21.150 --> 00:05:25.080
So these loaders are independently
downloaded from NPM and

102
00:05:25.080 --> 00:05:25.930
they do different things.

103
00:05:25.930 --> 00:05:30.460
So in this case the CSS loader
converts the CSS file into

104
00:05:30.460 --> 00:05:33.610
a module handles all the URL's inside
of it that may be inside of it.

105
00:05:33.610 --> 00:05:35.780
And the style loader puts
it in the head for us.

106
00:05:35.780 --> 00:05:37.550
So we don't have to write
a link tag anymore.

107
00:05:37.550 --> 00:05:39.450
It will literally write
a style tag in the head.

108
00:05:39.450 --> 00:05:42.980
So once we import this file,
or require this file.

109
00:05:42.980 --> 00:05:48.580
It's in the head, we're good, no more link
tags, so it's really, really, really cool.

110
00:05:48.580 --> 00:05:51.540
Sweet, any questions on this?

111
00:05:51.540 --> 00:05:53.220
Yes?
&gt;&gt; Speaker 2: Jevons P would like to know

112
00:05:53.220 --> 00:05:54.590
your opinion on Browserify.

113
00:05:55.600 --> 00:05:56.260
&gt;&gt; Scott Moss: Yeah.

114
00:05:56.260 --> 00:05:59.870
So I guess I should have mentioned
Browserify, it's hard [LAUGH] there's so

115
00:05:59.870 --> 00:06:01.000
many things out there.

116
00:06:01.000 --> 00:06:05.734
So my opinion on Browserify, Browserify is
awesome, it has similarities with Webpack

117
00:06:05.734 --> 00:06:09.230
as far as like emulating Common
js in a browser which is great.

118
00:06:09.230 --> 00:06:14.760
So we can use node modules and so
forth but that's where it's good.

119
00:06:14.760 --> 00:06:16.620
And that's also where it stops right.

120
00:06:16.620 --> 00:06:19.924
It doesn't treat everything as
a module like Webpack where,

121
00:06:19.924 --> 00:06:23.060
we'll have some extra configuration.

122
00:06:23.060 --> 00:06:26.560
So and then also when it comes to
my experience when it comes to

123
00:06:26.560 --> 00:06:30.735
writing tests and doing other things
non related to just developing,

124
00:06:30.735 --> 00:06:33.870
Browserify configurations
a little crazier.

125
00:06:33.870 --> 00:06:36.790
The other do a lot of more things
to get stuff to work as far as like

126
00:06:36.790 --> 00:06:39.820
testing with karma or maybe you want to.

127
00:06:41.480 --> 00:06:45.140
Maybe you're using a different type of
module system requirejs or something and

128
00:06:45.140 --> 00:06:46.561
you want to import that does.

129
00:06:46.561 --> 00:06:47.715
Webpack does a good job for

130
00:06:47.715 --> 00:06:51.393
resolving those different types of modules
Whereas Browserify can also do that but

131
00:06:51.393 --> 00:06:54.190
I think the configuration is
a little more overhead in my head.

132
00:06:54.190 --> 00:06:59.116
So this is a config file for
Webpack for Browserify.

133
00:06:59.116 --> 00:07:01.670
If you wanted the same functionality
to disappear little more

134
00:07:01.670 --> 00:07:03.160
confusing a little more work.

135
00:07:03.160 --> 00:07:05.220
So that's my only fear other that but

136
00:07:05.220 --> 00:07:09.700
you can get the same results and
Browserify is amazing.

137
00:07:09.700 --> 00:07:11.740
Although, Webpack is
like trending right now.

138
00:07:11.740 --> 00:07:14.628
I think Webpack and Browserify actually
came out around the same time.

139
00:07:14.628 --> 00:07:18.040
I think Browserify just took off and
nobody knew about Webpack until they

140
00:07:18.040 --> 00:07:20.260
start using it for react but
Webpack been around for a while.

