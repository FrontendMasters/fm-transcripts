WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:04.433
&gt;&gt; Scott Moss: Components.

3
00:00:04.433 --> 00:00:06.511
This is where the fun happens.

4
00:00:06.511 --> 00:00:10.570
This is where you start to see
how this stuff comes together,

5
00:00:10.570 --> 00:00:13.540
because it's kind of crazy at first,
but it's fun.

6
00:00:13.540 --> 00:00:17.730
So again, a component is a widely
used term, but we'll be using it

7
00:00:17.730 --> 00:00:23.400
as a reference to a composition of
functionality, UI, state, and also tests.

8
00:00:23.400 --> 00:00:27.615
I know everybody writes
tests all the time, right?

9
00:00:27.615 --> 00:00:28.910
&gt;&gt; [LAUGH]

10
00:00:28.910 --> 00:00:29.670
&gt;&gt; Scott Moss: Yeah nobody writes tests

11
00:00:29.670 --> 00:00:31.470
man, I swear it.

12
00:00:31.470 --> 00:00:33.270
Unless you work at like Pivotal Labs or
something.

13
00:00:33.270 --> 00:00:36.190
And then nobody else writes it.

14
00:00:36.190 --> 00:00:37.660
So components of a component, so

15
00:00:37.660 --> 00:00:40.890
here's a directory structure of
what a component will look like.

16
00:00:40.890 --> 00:00:42.600
So let's say our component's
name is profile.

17
00:00:43.710 --> 00:00:48.053
So we have our profile folder and
inside of it we have a profile.js,

18
00:00:48.053 --> 00:00:52.138
a profile.directive.js,
profile.controller.js,

19
00:00:52.138 --> 00:00:56.690
profile.whatever flavor of
CSS you want to use, and

20
00:00:56.690 --> 00:00:59.980
a template for it and
also the tests for it.

21
00:00:59.980 --> 00:01:03.000
So these are just the naming conventions
that I came up, that work for me.

22
00:01:03.000 --> 00:01:04.400
You can call them whatever you want.

23
00:01:04.400 --> 00:01:05.360
This is just works for me.

24
00:01:05.360 --> 00:01:09.210
So this is not in John Popa
style guide somewhere or

25
00:01:09.210 --> 00:01:13.030
some like that, this is just what
works for me so I started using it.

26
00:01:13.030 --> 00:01:15.534
So this is how I organize stuff.

27
00:01:15.534 --> 00:01:18.400
So a little more deeply about
what's happening in these files.

28
00:01:19.670 --> 00:01:22.890
So component.js or
in this case profile.js.

29
00:01:22.890 --> 00:01:24.640
This is our entry file for the component.

30
00:01:24.640 --> 00:01:28.925
So this is like what
home.js is kind of doing.

31
00:01:28.925 --> 00:01:32.220
Home.js is just a little more, but this
is like the entry file for the component.

32
00:01:32.220 --> 00:01:36.872
So this is where we would start
when we go to import our component,

33
00:01:36.872 --> 00:01:39.250
the name.js of that component.

34
00:01:39.250 --> 00:01:41.820
So in this case, profile.js.

35
00:01:41.820 --> 00:01:46.450
It creates the angular module and
registers the directive to it, right?

36
00:01:46.450 --> 00:01:48.630
So, it's not going to
define the directive,

37
00:01:48.630 --> 00:01:51.050
but it's going to register the directive.

38
00:01:51.050 --> 00:01:54.200
You'll see that means in a big difference,
it's a big difference.

39
00:01:54.200 --> 00:01:57.610
Also, if you need it routing,
this is where you would do it.

40
00:01:57.610 --> 00:02:00.710
So anything dealing with
like angular stuff.

41
00:02:00.710 --> 00:02:01.956
It would go in this file.

42
00:02:01.956 --> 00:02:04.249
Everything else is nothing
to do with angular.

43
00:02:04.249 --> 00:02:07.615
It's like completely outside of angular,
so it's regular ES 2015, and

44
00:02:07.615 --> 00:02:10.530
then we're going to bring into this
file and tell angular about it.

45
00:02:10.530 --> 00:02:13.470
And you'll see why that works in a minute,
especially in testing,

46
00:02:13.470 --> 00:02:16.580
because you just test things without
angular even caring, which is great.

47
00:02:16.580 --> 00:02:20.010
Any questions about that component.js?

48
00:02:22.484 --> 00:02:26.110
So component.controller.js,
again just my naming convention,

49
00:02:26.110 --> 00:02:28.920
you can call whatever you want,
this is the controller file

50
00:02:28.920 --> 00:02:31.065
where we create the controller for
component's directive.

51
00:02:32.180 --> 00:02:33.620
That's why it's called controller.js.

52
00:02:33.620 --> 00:02:36.851
But the key right here is the controller
for our component's directive.

53
00:02:36.851 --> 00:02:39.596
It's not a controller for a template,

54
00:02:39.596 --> 00:02:43.516
just willy nilly somewhere
else we'd have to reroute.

55
00:02:43.516 --> 00:02:44.298
Its not that.

56
00:02:44.298 --> 00:02:46.248
It's an actual controller for a directive.

57
00:02:46.248 --> 00:02:49.040
That means all our directives
will have controllers now.

58
00:02:49.040 --> 00:02:52.072
We won't be using- you know
like when you make a directive,

59
00:02:52.072 --> 00:02:55.816
you'll never put a controller on
a directive unless it's like a container

60
00:02:55.816 --> 00:02:58.390
directive and
has like mini directives inside it.

61
00:02:58.390 --> 00:03:01.980
Like if you were building a tab system,
they have like a tab container directive,

62
00:03:01.980 --> 00:03:03.140
and it has a controller.

63
00:03:03.140 --> 00:03:04.450
That's the only time you'd
ever use a controller,

64
00:03:04.450 --> 00:03:06.360
other than that you'd just use link,
right?

65
00:03:06.360 --> 00:03:07.070
Not the case anymore.

66
00:03:07.070 --> 00:03:10.750
You can use a controller like every
single time now for your directives.

67
00:03:10.750 --> 00:03:14.350
Then, of course you will use links
when you have multiple instances

68
00:03:14.350 --> 00:03:16.390
of the same directive, but
if they all use the same controller,

69
00:03:16.390 --> 00:03:17.270
then you might have some problems.

70
00:03:17.270 --> 00:03:18.910
So you might need links then,

71
00:03:18.910 --> 00:03:22.020
but at very minimal they all
will probably have controllers.

72
00:03:22.020 --> 00:03:25.040
Unless they're like attributes and
not components themselves.

73
00:03:25.040 --> 00:03:28.140
So yeah, this is where we're gonna find
our controller, inside this file, and

74
00:03:28.140 --> 00:03:33.859
it's gonna belong to the component.
&gt;&gt; Scott Moss: So component.directive.js,

75
00:03:33.859 --> 00:03:37.765
this is where we create the directive
that will be the meat and

76
00:03:37.765 --> 00:03:40.290
potatoes of our component.

77
00:03:40.290 --> 00:03:44.900
So it also has a responsibility of
importing the styles and the template.

78
00:03:44.900 --> 00:03:48.970
So we know that, from this directory
structure here, we know that each

79
00:03:48.970 --> 00:03:54.030
component has a template, and
it has some styles associated with it.

80
00:03:54.030 --> 00:04:01.450
So inside of the directive file, its job
is to import the styles and the template.

81
00:04:01.450 --> 00:04:02.592
Yes?
&gt;&gt; Speaker 2: This is sort

82
00:04:02.592 --> 00:04:05.787
of inverting my sense of
the stuff I'm working on.

83
00:04:05.787 --> 00:04:10.084
Is that the controller has like
everything, you know, it's really like

84
00:04:10.084 --> 00:04:15.518
huge, and the directive is about this big.
&gt;&gt; Scott Moss: Yes, so the whole

85
00:04:15.518 --> 00:04:17.600
point is you want skinny controllers.
&gt;&gt; Speaker 2: Okay.

86
00:04:17.600 --> 00:04:18.508
&gt;&gt; Scott Moss: You don't want big

87
00:04:18.508 --> 00:04:19.252
controllers.

88
00:04:19.252 --> 00:04:21.027
The smaller your controllers can be,
the better they're going to be.

89
00:04:21.027 --> 00:04:22.097
And I'm going to show you how to do that.

90
00:04:22.097 --> 00:04:25.820
And that's, mainly, pretty much putting
everything in a factory or service.

91
00:04:25.820 --> 00:04:26.920
Pretty much.
&gt;&gt; Speaker 2: Okay.

92
00:04:26.920 --> 00:04:27.870
&gt;&gt; Scott Moss: Because what happens is,

93
00:04:27.870 --> 00:04:29.530
the reason you're controllers
are big is because you're making

94
00:04:29.530 --> 00:04:30.680
maintaining state.

95
00:04:30.680 --> 00:04:31.460
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Scott Moss: If you don't need

96
00:04:31.460 --> 00:04:35.080
to maintain state, then your controls
go from this to this, right?

97
00:04:35.080 --> 00:04:38.030
I'll show you put about that when we
get to the common components section.

98
00:04:40.670 --> 00:04:45.750
The directive is where it imports
the styles and the HTML, and

99
00:04:45.750 --> 00:04:50.210
it creates the function that's gonna
be called by angular to return the DDO,

100
00:04:50.210 --> 00:04:51.559
or the directive definition object.

101
00:04:52.810 --> 00:04:57.320
So the other files are self-explanatory,
when I say other files, I'm talking about

102
00:04:57.320 --> 00:05:00.170
the spec, the CSS, the HTML,
they are exactly what they say they are.

103
00:05:02.490 --> 00:05:07.180
So, this set up allows for easy testing
and flexibility, reusability is on

104
00:05:07.180 --> 00:05:10.580
the maximum for sure, because we're
creating a new module each time.

105
00:05:10.580 --> 00:05:16.140
So again, I can take that module and
put it in, anybody's repo who has

106
00:05:16.140 --> 00:05:19.810
the same dependencies and build system as
me, and it should work exactly the same.

107
00:05:20.990 --> 00:05:24.701
Unless they're messing around with,
we have like CSS name clashes or whatever,

108
00:05:24.701 --> 00:05:29.742
but it should work exactly the same.
&gt;&gt; Scott Moss: But

109
00:05:29.742 --> 00:05:34.366
one more thing you also need to do is
that- so we create these components, but

110
00:05:34.366 --> 00:05:36.300
they're still not gonna work.

111
00:05:36.300 --> 00:05:38.040
And you probably found out before,

112
00:05:38.040 --> 00:05:41.480
you have to register the components
with some type of parent, right?

113
00:05:41.480 --> 00:05:44.690
So like in our example, we have home.

114
00:05:44.690 --> 00:05:47.907
If we didn't export this home and
imported somewhere else,

115
00:05:47.907 --> 00:05:49.492
we would never know about it.

116
00:05:49.492 --> 00:05:52.582
It would just be here,
it'd just be a file.

117
00:05:52.582 --> 00:05:58.350
It's just like downloading something from
bower, and like never adding a script tag.

118
00:05:58.350 --> 00:05:59.410
That's exactly what would happen.

119
00:05:59.410 --> 00:06:00.020
That's all you did.

120
00:06:00.020 --> 00:06:02.986
So you need to export it, and
then import it somewhere else.

121
00:06:02.986 --> 00:06:05.988
And because your using angular,
not only do you need to import it,

122
00:06:05.988 --> 00:06:08.574
you also need to register it
with the angular module too.

123
00:06:08.574 --> 00:06:09.740
So you gotta do two things.

124
00:06:09.740 --> 00:06:12.830
Import it to ES 2015,
register it with angular.

125
00:06:12.830 --> 00:06:14.270
So remember that, that's all you gotta do.

126
00:06:14.270 --> 00:06:20.240
So that's why app.js, we imported it,
and then we registered it.

127
00:06:21.780 --> 00:06:22.850
So remember you have to do that.

128
00:06:22.850 --> 00:06:25.880
If you don't, it'll just be sitting
there and nothing will happen.

129
00:06:27.720 --> 00:06:28.460
Any questions on that?

130
00:06:30.600 --> 00:06:31.230
Remember that.

131
00:06:31.230 --> 00:06:32.080
People always forget that.

132
00:06:32.080 --> 00:06:33.270
Totally remember that one.

133
00:06:33.270 --> 00:06:35.100
I forget that one all the time.

134
00:06:35.100 --> 00:06:36.684
I got stuck for three hours one time.

135
00:06:36.684 --> 00:06:38.970
Because I couldn't figure out
why this thing wasn't working.

136
00:06:38.970 --> 00:06:42.140
But I was like 30 components deep,
and I couldn't figure it out.

137
00:06:42.140 --> 00:06:44.168
There were no errors because
the thing never got loaded up.

138
00:06:44.168 --> 00:06:49.990
So because webpack allows us to
treat anything as a module and

139
00:06:49.990 --> 00:06:54.030
has an extensive plugin community, we can
import more than just javascipt files.

140
00:06:54.030 --> 00:06:55.460
So we talked about this, right?

141
00:06:55.460 --> 00:06:59.350
So like css/stylus/less/sass, anything.

142
00:06:59.350 --> 00:07:03.330
PNG's, JPEG's, again, anything we
want to import, we can import it.

143
00:07:03.330 --> 00:07:05.660
You just have to find
an appropriate loader.

144
00:07:05.660 --> 00:07:09.170
And in fact, if you try to import
something with webpack and

145
00:07:09.170 --> 00:07:12.824
it can't, it will tell you like, "Yo,
I don't have the loader for this".

146
00:07:12.824 --> 00:07:14.510
It'll just tell you like "I
don't know how to handle this,

147
00:07:14.510 --> 00:07:16.380
you never told me how to handle this".

148
00:07:16.380 --> 00:07:17.610
"I can do it,
you've just got to tell me how".

149
00:07:19.090 --> 00:07:21.830
It'll tell you in the terminal, I don't
know, I don't know what you want me to do,

150
00:07:21.830 --> 00:07:23.100
just figure it out.

151
00:07:23.100 --> 00:07:25.390
So it can handle anything.

152
00:07:25.390 --> 00:07:29.920
This setup is exactly like web components.

153
00:07:29.920 --> 00:07:33.840
It's very similar, at least, except for
one thing, and that's the CSS closure.

154
00:07:33.840 --> 00:07:36.003
Does anyone know what I mean
when I say CSS closure?

155
00:07:36.003 --> 00:07:38.546
&gt;&gt; Speaker 3: But good morning.

156
00:07:38.546 --> 00:07:39.910
CSS closure?
&gt;&gt; Scott Moss: CSS closure, yeah.

157
00:07:39.910 --> 00:07:43.815
It's a real thing.
&gt;&gt; Speaker 3: Like CSS that only knows

158
00:07:43.815 --> 00:07:48.775
about- it's encapsulated.
&gt;&gt; Scott Moss: Yeah the CSS

159
00:07:48.775 --> 00:07:49.529
is encapsulated.

160
00:07:49.529 --> 00:07:51.512
Like with a directive,
we make an isolate scope,

161
00:07:51.512 --> 00:07:54.260
our job description is encapsulated,
and that's great.

162
00:07:54.260 --> 00:07:56.960
But there's nothing protecting our CSS.

163
00:07:56.960 --> 00:08:03.270
So, if I were to bring my component in
your angular file inside of my home.style.

164
00:08:03.270 --> 00:08:06.490
I had this stuff, right, and
mine got a loaded up before yours did, and

165
00:08:06.490 --> 00:08:09.426
then you had another file that
also has some stuff like this.

166
00:08:09.426 --> 00:08:13.625
Yours would overwrite mine, I don't
have any closure, I need protection.

167
00:08:13.625 --> 00:08:15.480
At web components you do.

168
00:08:15.480 --> 00:08:18.800
You have to like specifically
go into the web component,

169
00:08:18.800 --> 00:08:20.740
like I really want to change this, right?

170
00:08:20.740 --> 00:08:22.310
You can't change it by accident.

171
00:08:22.310 --> 00:08:26.630
Where we don't get that here, that's the
one thing we don't get with this setup,

172
00:08:26.630 --> 00:08:28.700
because it's not real web components.

173
00:08:28.700 --> 00:08:32.480
But other than that, you still get
the protection of your JavaScript being

174
00:08:32.480 --> 00:08:36.618
encapsulated and stuff like that.
&gt;&gt; Speaker 4: You kind of like,

175
00:08:36.618 --> 00:08:38.851
if you go back to that kind stylus file.

176
00:08:38.851 --> 00:08:42.878
And you kind of like name space those,
like if this is like less for

177
00:08:42.878 --> 00:08:44.652
you that you have invested?

178
00:08:44.652 --> 00:08:48.333
And the title and items,
and then they're kind of,

179
00:08:48.333 --> 00:08:51.350
they have to be within .home.
&gt;&gt; Scott Moss: Yes they have to be.

180
00:08:51.350 --> 00:08:54.610
Yes, I mean there's ways you can make
a really really hard, almost impossible.

181
00:08:54.610 --> 00:08:58.700
Even webpack will allow you to,
I don't know the exact syntax, but

182
00:08:58.700 --> 00:09:02.480
it will allow you to use something
like hash, or something like that.

183
00:09:02.480 --> 00:09:04.590
So you can like get the hash of this file.

184
00:09:05.940 --> 00:09:08.280
And you can use that inside of- like,
it's crazy.

185
00:09:08.280 --> 00:09:09.970
So you can make it as
unique as possible but

186
00:09:09.970 --> 00:09:11.010
like-
&gt;&gt; Speaker 4: You

187
00:09:11.010 --> 00:09:13.880
are still affected by real general.
&gt;&gt; Scott Moss: Exactly.

188
00:09:13.880 --> 00:09:15.723
So there's still a possibility.

189
00:09:15.723 --> 00:09:19.416
And then, it's like now you
can't even read it [LAUGH].

190
00:09:19.416 --> 00:09:21.470
So it's like what's the point.

191
00:09:21.470 --> 00:09:27.340
So there are some edge cases there.

192
00:09:27.340 --> 00:09:29.683
So yeah, no more link tags,
no more script tags.

193
00:09:29.683 --> 00:09:34.150
There are some cases where you still will
need to add link tags and script tags.

194
00:09:34.150 --> 00:09:35.650
Everything is not on MPM, right?

195
00:09:35.650 --> 00:09:38.471
How do you handle stuff that's not on MPM?

196
00:09:38.471 --> 00:09:41.080
Everything is not on there.
&gt;&gt; Speaker 4: Put it

197
00:09:41.080 --> 00:09:42.028
on MPM.
&gt;&gt; Scott Moss: You could put it on MPM.

198
00:09:42.028 --> 00:09:43.205
There you go.
That's a solution.

199
00:09:43.205 --> 00:09:46.887
Get you some green dots on your GitHub,
you can put it all on MPM.

200
00:09:46.887 --> 00:09:52.181
Or, let's say you wanted to use bower,
you want to download some stuff about

201
00:09:52.181 --> 00:09:57.329
from bower, webpack will allow you
to actually import bower components.

202
00:09:57.329 --> 00:10:01.486
By default it doesn't, but
you can use- webpack actually has

203
00:10:01.486 --> 00:10:05.660
an extensive plugin system that
you can teach it new tricks.

204
00:10:05.660 --> 00:10:09.048
Hey webpack, not only do I want you
to look in the known modules for it,

205
00:10:09.048 --> 00:10:12.323
I also want you to look in, you know,
wherever your bower stuff is,

206
00:10:12.323 --> 00:10:13.717
whether it's components.

207
00:10:13.717 --> 00:10:16.858
Wherever you put your bower stuff,
bower components or lip.

208
00:10:16.858 --> 00:10:19.756
You tell it to look in there and
look in the bower.JSON.

209
00:10:19.756 --> 00:10:21.305
And it will load those things up too.

210
00:10:21.305 --> 00:10:24.245
Now, how it handles those things,
that's up to webpack.

211
00:10:24.245 --> 00:10:28.390
If it detects that it's AMD or
common JS, it'll take care of it.

212
00:10:28.390 --> 00:10:31.010
Hopefully the the person who
made it is responsible and

213
00:10:31.010 --> 00:10:35.500
decided to build it with UMD in mind,
which is universal module definition,

214
00:10:35.500 --> 00:10:38.480
which means it'll work in common JS,
the browser, AMD.

215
00:10:38.480 --> 00:10:40.546
Hopefully they decided to do that,
but if not,

216
00:10:40.546 --> 00:10:43.080
they'll just load it up on
the global windows space.

217
00:10:43.080 --> 00:10:45.556
So that's probably what will happen.

218
00:10:45.556 --> 00:10:46.491
Yes.
&gt;&gt; Speaker 5: Scott,

219
00:10:46.491 --> 00:10:51.205
I got a got two questions here,
one from Danielle M asking,

220
00:10:51.205 --> 00:10:53.656
is there a way to do these CSS and

221
00:10:53.656 --> 00:10:59.380
ES 6 to JS transformations as a build
step for like a distribution.

222
00:10:59.380 --> 00:11:04.540
So like right now we're- our bundled up
JS is loading those dynamically, right?

223
00:11:04.540 --> 00:11:08.430
We don't have on our distribution
index.html some style tags.

224
00:11:08.430 --> 00:11:09.770
&gt;&gt; Scott Moss: Right, right right.

225
00:11:09.770 --> 00:11:11.640
&gt;&gt; Speaker 5: Import, or script tags, or

226
00:11:11.640 --> 00:11:12.300
anything like that.

227
00:11:12.300 --> 00:11:14.850
Is that something you would
do differently in production?

228
00:11:14.850 --> 00:11:16.080
&gt;&gt; Scott Moss: Yeah, so

229
00:11:16.080 --> 00:11:22.070
in production, I might just keep it all
bundled, but if I was making a library.

230
00:11:22.070 --> 00:11:23.840
Let's say this was not some app, but

231
00:11:23.840 --> 00:11:29.020
this was a library that I was making for
somebody.

232
00:11:29.020 --> 00:11:33.030
And it needed a its own CSS and maybe
some different versions of JavaScript.

233
00:11:33.030 --> 00:11:38.680
Then webpack allows you to define,
by default it only spits out one file.

234
00:11:38.680 --> 00:11:41.435
But you can give an array of
files of entry files, and

235
00:11:41.435 --> 00:11:44.350
it can make bundles of all
those entry files too.

236
00:11:44.350 --> 00:11:47.715
So start all those entries files and
make bundles of all those files and

237
00:11:47.715 --> 00:11:51.724
their modules, and then split those out
at whatever destination you tell them to.

238
00:11:51.724 --> 00:11:55.524
But that's a more advanced configuration,
but yes, you can slowly do that, and

239
00:11:55.524 --> 00:11:58.620
in fact I think that's the best way
to build lives from here on now.

240
00:11:58.620 --> 00:12:02.695
It's just using something like
that because it super easy.

241
00:12:02.695 --> 00:12:05.464
Yes other question.
&gt;&gt; Speaker 5: The other question I think

242
00:12:05.464 --> 00:12:06.771
is actually answered.

243
00:12:06.771 --> 00:12:11.005
It was a question from Heratio H.about,
what about using iffys, but

244
00:12:11.005 --> 00:12:15.455
our bundle.jss is wrapped in an iffy,
so we're not flirting with global

245
00:12:15.455 --> 00:12:18.570
namespace in any sense here.
&gt;&gt; Scott Moss: No we don't need any iffys,

246
00:12:18.570 --> 00:12:19.660
unless you want an iffy in your iffy.

247
00:12:19.660 --> 00:12:22.060
You don't need any iffys.

248
00:12:22.060 --> 00:12:23.170
So yeah we're good.

249
00:12:23.170 --> 00:12:23.760
That's the whole point.

250
00:12:23.760 --> 00:12:31.350
So if I were to come in here and- pretty
much there's no iffy, so we're fine.

251
00:12:31.350 --> 00:12:35.050
But what happens is,
because all this stuff is bundled up.

252
00:12:35.050 --> 00:12:38.250
Let's say I import angular in app.js.

253
00:12:38.250 --> 00:12:39.440
I import angular.

254
00:12:39.440 --> 00:12:40.810
I have this thing at the top.

255
00:12:40.810 --> 00:12:42.250
And all this is going to be bundled, so

256
00:12:42.250 --> 00:12:44.300
that means angular is
at the top of the file.

257
00:12:44.300 --> 00:12:47.020
And then, this imports home.js, so

258
00:12:47.020 --> 00:12:51.120
home.js goes and
gets bundled at the bottom of app.js.

259
00:12:51.120 --> 00:12:55.840
So technically, home.js should have access
to the angular in that same file, right?

260
00:12:55.840 --> 00:12:57.730
And if it ran in a browser, it would.

261
00:12:57.730 --> 00:13:00.850
But Babel wanted to compile if you don't
import angular in the other files.

262
00:13:00.850 --> 00:13:05.417
So even though, honestly speaking,
if this home.js, was,

263
00:13:05.417 --> 00:13:11.362
if I didn't have this in here, and this is
an app.js too, if I have that in here and

264
00:13:11.362 --> 00:13:17.890
this ran in a browser and bundle.js, it
will work, but Babel won't even compile.

265
00:13:17.890 --> 00:13:22.170
Because Babel doesn't know about
app.js when it's looking at this file.

266
00:13:22.170 --> 00:13:27.070
All it does is it sees angular here,
and it's like where's that coming from?

267
00:13:27.070 --> 00:13:28.997
Right, it won't even compile.

268
00:13:28.997 --> 00:13:32.120
But it will run in a browser,
so remember that.

