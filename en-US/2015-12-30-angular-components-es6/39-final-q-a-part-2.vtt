WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:08.154
&gt;&gt; Will: Justin C wants to know
what you think about Koa.js.

3
00:00:08.154 --> 00:00:13.760
&gt;&gt; Scott Moss: Koa, Koa, that's
Express ES2015 with generators, right?

4
00:00:13.760 --> 00:00:14.731
&gt;&gt; Will: I honestly have no idea.

5
00:00:14.731 --> 00:00:18.770
&gt;&gt; Scott Moss: Yeah, Koa is great.

6
00:00:20.280 --> 00:00:22.700
It's the same people who made
express of today how I'm talking.

7
00:00:22.700 --> 00:00:26.030
&gt;&gt; Speaker 3: Aren't you going to
cover this in your next video?

8
00:00:26.030 --> 00:00:26.559
&gt;&gt; Scott Moss: Yeah, so

9
00:00:26.559 --> 00:00:30.207
we're going to talk more about
service side technologies online

10
00:00:30.207 --> 00:00:35.510
the next workshop starting tomorrow with
note but Koa yeah as a node, js framework.

11
00:00:35.510 --> 00:00:38.269
That's kind of like Express but
uses generators and

12
00:00:38.269 --> 00:00:41.060
somewhat other stuff is just a framework.

13
00:00:41.060 --> 00:00:45.210
Me personally I still just
prefer to use Express.

14
00:00:45.210 --> 00:00:50.450
&gt;&gt; Will: Cool, Pinnnick M wants to
know how does one manager reduce lots

15
00:00:50.450 --> 00:00:55.980
of dependency injection in controllers or
working on Ajax?

16
00:00:55.980 --> 00:01:00.730
&gt;&gt; Scott Moss: Make higher level services,
so if you have like a lot of things being

17
00:01:00.730 --> 00:01:03.670
injected into the controller, make a
service that injects all those things, and

18
00:01:03.670 --> 00:01:05.590
inject that one service
into your controller.

19
00:01:05.590 --> 00:01:09.622
So you have like higher order services
that compose smaller services together.

20
00:01:09.622 --> 00:01:10.847
&gt;&gt; Will: Just kind of create layers.

21
00:01:10.847 --> 00:01:12.075
&gt;&gt; Scott Moss: Yep, just more layers.

22
00:01:12.075 --> 00:01:15.220
&gt;&gt; Will: Yeah, I would agree with that.

23
00:01:15.220 --> 00:01:20.170
Dominic R wants to know that he
understands that jspm is more complicated

24
00:01:20.170 --> 00:01:24.290
to configure and set up, and that's one of
the reasons you chose Webpack for this.

25
00:01:24.290 --> 00:01:27.900
But long term,
should someone be looking at jspm or

26
00:01:27.900 --> 00:01:31.550
Webpack for future projects, I guess?

27
00:01:31.550 --> 00:01:34.693
&gt;&gt; Scott Moss: For future projects, look
at jspm, but it also depends on how you

28
00:01:34.693 --> 00:01:38.237
feel with your skill level, jspm is
really really tough to use right now,

29
00:01:38.237 --> 00:01:41.294
I had to like contact the creator
of it to figure out some stuff.

30
00:01:41.294 --> 00:01:43.077
And so it's kind of tough, but

31
00:01:43.077 --> 00:01:48.390
long term definitely look toward it
because that's what Angular two was using.

32
00:01:48.390 --> 00:01:51.862
And it follows the specs
session.js is literally the spec.

33
00:01:51.862 --> 00:01:56.789
Webpack is just awesome right now because
it's using node.js which has been

34
00:01:56.789 --> 00:01:58.085
around for a while.

35
00:01:58.085 --> 00:02:00.830
And is because of that people are so
familiar with it,

36
00:02:00.830 --> 00:02:03.148
they can builld types
of plug-ins with it but

37
00:02:03.148 --> 00:02:07.762
when ES2015 becomes final I mean this
final is all I was fully implemented.

38
00:02:07.762 --> 00:02:10.220
Soon .js is gonna be
the familiar thing and

39
00:02:10.220 --> 00:02:13.000
people are going to start
developing stuff for that, so.

40
00:02:13.000 --> 00:02:16.840
I definitely keep an eye on it and
you could pretty much solve all your basic

41
00:02:16.840 --> 00:02:21.850
needs right now but for more complicated
builds you're gonna have a challenge.

42
00:02:21.850 --> 00:02:24.427
You're going to have to make
some stuff yourself, or

43
00:02:24.427 --> 00:02:26.271
just like not use those things at all.

44
00:02:26.271 --> 00:02:30.034
&gt;&gt; Will: Rob W wants to know if you can
use jspm as a replacement for Gulp?

45
00:02:30.034 --> 00:02:34.430
Or if you still think you need
a build tool like gulp in addition.

46
00:02:34.430 --> 00:02:37.100
&gt;&gt; Scott Moss: No you definitely
don't need gulp for webpack or jspm.

47
00:02:37.100 --> 00:02:41.776
As far as I compiling down our
ES2015 modules and our ES2015 codes,

48
00:02:41.776 --> 00:02:43.420
we don't need gulp for any of that.

49
00:02:43.420 --> 00:02:46.880
That’s not what gulp is doing, so
definitely don't need gulp for that.

50
00:02:46.880 --> 00:02:50.514
But would I still use gulp with jspm,
yeah, I would and

51
00:02:50.514 --> 00:02:56.066
that’s because I do other things than just
transpiling as far as running a server.

52
00:02:56.066 --> 00:02:57.840
And creating documentation or

53
00:02:57.840 --> 00:03:01.940
as you can solve a made component
tasks that generate component.

54
00:03:01.940 --> 00:03:06.694
So I still use gulp for those things but
as far as like transpiling the files and

55
00:03:06.694 --> 00:03:10.079
what not,
that'll be solely either jspm or Webpack.

56
00:03:10.079 --> 00:03:15.198
&gt;&gt; Will: Cool, Horatio H wants
to know what kind of strategy

57
00:03:15.198 --> 00:03:20.080
you would use for
having dynamic templates.

58
00:03:20.080 --> 00:03:24.930
I think you kinda covered this with
how Yeoman does things like prompting.

59
00:03:26.100 --> 00:03:30.966
The example he's giving
is if inside /blog,

60
00:03:30.966 --> 00:03:39.219
you wanted to update post versus technical
posts versus picture posts maybe.

61
00:03:39.219 --> 00:03:41.647
[CROSSTALK]
&gt;&gt; Scott Moss: But

62
00:03:41.647 --> 00:03:44.890
so like-
&gt;&gt; Will: So if you wanted a-

63
00:03:44.890 --> 00:03:45.448
&gt;&gt; Scott Moss: Like this

64
00:03:45.448 --> 00:03:46.775
template right here?

65
00:03:46.775 --> 00:03:49.695
&gt;&gt; Will: Component generation with
different kinds of templates in it,

66
00:03:49.695 --> 00:03:50.460
yeah I suppose.

67
00:03:50.460 --> 00:03:50.988
Yeah.
&gt;&gt; Scott Moss: Okay so

68
00:03:50.988 --> 00:03:54.281
if it's on the component generation
level then yeah that's basically,

69
00:03:54.281 --> 00:03:57.108
you need to configure the task
that's making the generation.

70
00:03:57.108 --> 00:04:01.139
So the options we talked about where have
like command line GUI that you can type

71
00:04:01.139 --> 00:04:05.048
and stuff are passing flags but it's like
on the level of like I want that to be

72
00:04:05.048 --> 00:04:08.730
different at call time that has
been executed in JavaScript.

73
00:04:08.730 --> 00:04:11.040
Then the way you would do that
is you would have to have like,

74
00:04:11.040 --> 00:04:13.920
you have to make a link
function here that would and

75
00:04:13.920 --> 00:04:16.740
then your component to have
to take an attributes, right?

76
00:04:16.740 --> 00:04:19.920
Maybe I'll take it to objects that object
might have different properties on it and

77
00:04:19.920 --> 00:04:23.950
depending on those properties of that
object you would replace the template for

78
00:04:23.950 --> 00:04:25.060
this directive.

79
00:04:25.060 --> 00:04:28.850
So that's what he's talked about
like I made a call to a server and

80
00:04:28.850 --> 00:04:32.170
once I'm outside control and
I came back like passing that data to

81
00:04:32.170 --> 00:04:36.100
the blog directive and based on that data,
I wanted to render a different component,

82
00:04:36.100 --> 00:04:37.710
or I mean, I'm sorry,
a different template.

83
00:04:37.710 --> 00:04:39.090
Then yeah, that's how you would do that.

84
00:04:39.090 --> 00:04:42.260
So you would have to use the compile
service for that though, and

85
00:04:42.260 --> 00:04:43.750
recompile the template for the directive.

86
00:04:45.730 --> 00:04:49.140
&gt;&gt; Will: Cool, let me check in
with Horatio to make sure that's

87
00:04:49.140 --> 00:04:50.290
that last one, thanks.

88
00:04:50.290 --> 00:04:52.337
Okay yep, so it was just what
you were just explaining, cool.

89
00:04:52.337 --> 00:04:54.112
&gt;&gt; Scott Moss: Okay.

90
00:04:54.112 --> 00:04:56.068
&gt;&gt; Will: Trying to see
if I had any other ones,

91
00:04:57.992 --> 00:05:00.111
&gt;&gt; Will: John M wants to clarify

92
00:05:00.111 --> 00:05:06.390
are React Native script cross-platform or
are they just for iOS?

93
00:05:06.390 --> 00:05:09.846
&gt;&gt; Scott Moss: React Native is
cross-platform they released iOS first

94
00:05:09.846 --> 00:05:13.590
they just released their first
Android app couple weeks ago,

95
00:05:13.590 --> 00:05:17.265
it's a Facebook ad app built
with Android and React Native.

96
00:05:17.265 --> 00:05:20.551
So they're gonna release a source for
that eventually, it's not open source yet

97
00:05:20.551 --> 00:05:21.140
for Android.

98
00:05:21.140 --> 00:05:26.357
Native script is cross-platform right
now for iOS, Android, and Windows.

99
00:05:26.357 --> 00:05:30.933
&gt;&gt; Will: Cool, Dominic R wants
to know thoughts on server side

100
00:05:30.933 --> 00:05:34.603
rendering versus client side rendering.

101
00:05:34.603 --> 00:05:37.009
&gt;&gt; Scott Moss: Well and then there's
a big argument as far as like SEO goes.

102
00:05:37.009 --> 00:05:38.756
That was like the thing
a couple of years ago.

103
00:05:38.756 --> 00:05:44.000
SEO is great, which is true but Google's
really good at rendering JavaScript.

104
00:05:44.000 --> 00:05:46.880
In fact, there's a really good read that
I read a couple of weeks ago that talks

105
00:05:46.880 --> 00:05:47.880
about this.

106
00:05:47.880 --> 00:05:53.280
About how this company
tested Google's crawler and

107
00:05:53.280 --> 00:05:57.220
how it renders JavaScript and
their tests came back pretty pretty well.

108
00:05:57.220 --> 00:06:01.610
So here is this is block it's right here.

109
00:06:01.610 --> 00:06:04.880
We tested how Googlebot Crawls JavaScript,
here's what we learn.

110
00:06:04.880 --> 00:06:09.200
Is a really good read was just
published in May of this year and

111
00:06:09.200 --> 00:06:13.634
it's pretty good of how Google can
read JavaScript, TL;DR is pretty good.

112
00:06:13.634 --> 00:06:18.400
So, SEO as an argument I think, I mean if
you only care about Google I think you can

113
00:06:18.400 --> 00:06:20.460
get away with that,
if you care about other search engines.

114
00:06:20.460 --> 00:06:22.230
Definitely want service that
servers are running, but

115
00:06:22.230 --> 00:06:25.410
the other argument is like there
first time to load, right?

116
00:06:25.410 --> 00:06:27.610
Because if you have a spa and

117
00:06:27.610 --> 00:06:31.300
your whole client, is downloading all the
JavaScript in that first initial load your

118
00:06:31.300 --> 00:06:36.080
gonna have that time of delay it
was trying to get that JavaScript.

119
00:06:36.080 --> 00:06:40.690
So service-side JavaScript or the new
name which is universal JavaScript.

120
00:06:40.690 --> 00:06:44.870
The new term definitely better as
far as like first time in a row

121
00:06:44.870 --> 00:06:46.600
turns out you can't really do it.

122
00:06:46.600 --> 00:06:50.418
Well, if at all, with Angular 1x right
now, with React you can totally do it.

123
00:06:50.418 --> 00:06:53.740
Angular 2 my friends actually working
on the integration for that and

124
00:06:53.740 --> 00:06:54.790
you can tell they do it.

125
00:06:54.790 --> 00:07:00.111
So if I had the choice to do it and
that performance was a big thing for

126
00:07:00.111 --> 00:07:04.398
me I would definitely do it but
I wouldn't do it for SEO.

127
00:07:04.398 --> 00:07:10.020
&gt;&gt; Will: Cool, Miko R is asking if there's
any component libraries worth using?

128
00:07:10.020 --> 00:07:11.760
I'm getting him to
clarify at what he means.

129
00:07:11.760 --> 00:07:14.078
He said UI bootstrap, but not that.

130
00:07:14.078 --> 00:07:18.257
&gt;&gt; Scott Moss: Yeah,
Angular Material for sure.

131
00:07:18.257 --> 00:07:22.865
Supported by Angular and built in
collaboration with the community and

132
00:07:22.865 --> 00:07:23.743
ionic team.

133
00:07:23.743 --> 00:07:26.200
This is a really good one.

134
00:07:26.200 --> 00:07:28.030
Probably the best one for Angular.

135
00:07:28.030 --> 00:07:31.620
There are other stuff out
there that work pretty good.

136
00:07:31.620 --> 00:07:32.500
This was really guys.

137
00:07:32.500 --> 00:07:34.550
One of the better ones I've seen.

138
00:07:36.740 --> 00:07:41.290
There is AngularStrap
which is really good to.

139
00:07:41.290 --> 00:07:45.690
It's like an alternative to
Angular Bootstrap or Angular UI.

140
00:07:45.690 --> 00:07:50.259
This was actually kept up to date it
doesn't have 30,000 pool requests like

141
00:07:50.259 --> 00:07:51.257
Angular UI does.

142
00:07:51.257 --> 00:07:57.070
So, if you are in a bootstrap you want
that I would tell you use this one.

143
00:07:59.470 --> 00:08:02.268
So, those are the two that
I can recommend at the top.

144
00:08:02.268 --> 00:08:05.131
I'm sorry one more, there is LumX.

145
00:08:05.131 --> 00:08:08.860
L-U-M-X this one's pretty good, too.

146
00:08:08.860 --> 00:08:10.985
It's a material design and
it's built just for Angular.

147
00:08:14.065 --> 00:08:16.230
&gt;&gt; Scott Moss: It's not turned
up to Angular material.

148
00:08:16.230 --> 00:08:17.863
So, this one's really, really good, too.

149
00:08:17.863 --> 00:08:23.428
It's got some really cool stuff in it that
I don't think angler has implemented yet

150
00:08:23.428 --> 00:08:27.577
but it's nice to see different
approaches of the same thing.

151
00:08:27.577 --> 00:08:34.169
So this is really cool
&gt;&gt; Will: Would

152
00:08:34.169 --> 00:08:35.998
you mind posting links
to those in the chat?

153
00:08:35.998 --> 00:08:37.540
&gt;&gt; Scott Moss: Yeah I'm sorry I forgot.

154
00:08:37.540 --> 00:08:38.602
&gt;&gt; Will: No, that's fine.
&gt;&gt; Scott Moss: Chat right here.

155
00:08:38.602 --> 00:08:41.550
&gt;&gt; Will: I mean you just Googled
the thing and clicked on it.

156
00:08:41.550 --> 00:08:45.420
So it's not like it's that hard.

157
00:08:45.420 --> 00:08:46.187
It does help to have them, I feel.

158
00:08:46.187 --> 00:08:50.710
&gt;&gt; Scott Moss: Okay, I've got to log
back in to the chat, any more questions?

159
00:08:52.810 --> 00:08:55.155
&gt;&gt; Speaker 3: You can log into the chat
on your own computer, it's easier.

160
00:08:55.155 --> 00:08:57.180
&gt;&gt; Scott Moss: Yeah,
I don't know why I'm not doing that.

161
00:09:08.816 --> 00:09:11.518
&gt;&gt; Scott Moss: Is there any more
questions over there, Will?

162
00:09:11.518 --> 00:09:15.590
&gt;&gt; Will: We just got another one, does
Webpack output bundle.css for production?

163
00:09:17.010 --> 00:09:19.520
&gt;&gt; Scott Moss: No it just by default, so

164
00:09:19.520 --> 00:09:23.490
web pack doesn't know what to do
is the loaders that does the job.

165
00:09:23.490 --> 00:09:29.980
So the loaders are the one that are there
placing the CSS in the head tag so

166
00:09:29.980 --> 00:09:33.820
if you don't want the CSS in the head
tag don't use a style loader.

167
00:09:33.820 --> 00:09:35.600
If you want to be bundled somewhere else.

168
00:09:35.600 --> 00:09:38.560
Then you would have to tell
WebPack to split that up.

169
00:09:38.560 --> 00:09:42.008
And the configuration for
that is on the WebPack website

170
00:09:47.840 --> 00:09:50.609
&gt;&gt; Will: It looks like some of our cohorts

171
00:09:50.609 --> 00:09:54.162
are preempting you, in a good way.

172
00:09:54.162 --> 00:09:54.868
&gt;&gt; Scott Moss: Nice.

173
00:09:57.617 --> 00:10:02.914
&gt;&gt; Will: So I guess I'm a little
fuzzy on how that works,

174
00:10:02.914 --> 00:10:08.123
from a
&gt;&gt; Will: Waterfall diagram

175
00:10:08.123 --> 00:10:13.349
like the performance output
in the Chrome dev tools tab.

176
00:10:13.349 --> 00:10:14.271
What does that look like?

177
00:10:14.271 --> 00:10:19.403
So I load my page and
I have just the one bundle.js, right?

178
00:10:19.403 --> 00:10:20.430
&gt;&gt; Scott Moss: Right.

179
00:10:20.430 --> 00:10:24.930
&gt;&gt; Will: And that starts running and it
sees I need some CSS files and it goes and

180
00:10:24.930 --> 00:10:26.210
requests them.

181
00:10:26.210 --> 00:10:29.690
Or like before it gets served,
it puts them in the head?

182
00:10:29.690 --> 00:10:31.104
Like of the html file?

183
00:10:31.104 --> 00:10:31.737
&gt;&gt; Scott Moss: Yeah, so

184
00:10:31.737 --> 00:10:36.190
it's the JavaScript that's
writing those script tags, right?

185
00:10:36.190 --> 00:10:39.790
So, browser loads up,
there's nothing in the head.

186
00:10:39.790 --> 00:10:42.320
It sees the bundle.js, it loads that.

187
00:10:42.320 --> 00:10:45.503
The first thing that happens in our
bundle.js is that it mocks common.js.

188
00:10:45.503 --> 00:10:48.099
That's the first thing it does,
to make sure modules exist.

189
00:10:48.099 --> 00:10:51.854
And then, depending on the orders of
your imports, if you import Angular or

190
00:10:51.854 --> 00:10:54.100
whatever first, it starts reading those.

191
00:10:54.100 --> 00:10:57.610
So let's assume you imported the stylus
file there's CSS files first.

192
00:10:57.610 --> 00:11:01.350
If you go look at what that compiles down
to it's actually just going to a dozen

193
00:11:01.350 --> 00:11:06.470
checks and it sees if there's a style tag
in there already and if not it adds one.

194
00:11:06.470 --> 00:11:09.342
So that's what happens.
The other JavaScript would our render

195
00:11:09.342 --> 00:11:10.260
first right?

196
00:11:10.260 --> 00:11:13.369
And then so
that means until you go to another module.

197
00:11:13.369 --> 00:11:17.270
I want to put another style tag in there
until you go to the first time, right?

198
00:11:17.270 --> 00:11:20.901
So yeah that's how that works but
the JavaScript does have to load up first,

199
00:11:20.901 --> 00:11:23.170
It won't just like,
assumes a page loads up and

200
00:11:23.170 --> 00:11:25.730
sticks it in there
the bundle has to be read.

201
00:11:25.730 --> 00:11:29.549
So if you want to have that before,
then yeah, you'd have to split that off.

202
00:11:29.549 --> 00:11:32.136
And so Webpack do not do this.

203
00:11:32.136 --> 00:11:33.582
I'm not gonna use a style tag,

204
00:11:33.582 --> 00:11:36.486
I'm just gonna just maybe I'm
not really gonna use the tags.

205
00:11:36.486 --> 00:11:38.120
Maybe I'm just gonna use
a regular link tags.

206
00:11:38.120 --> 00:11:41.800
Or if you want, just put them off and
make a new CSS bundle file.

207
00:11:41.800 --> 00:11:44.264
Webpack can do that and so can go.

