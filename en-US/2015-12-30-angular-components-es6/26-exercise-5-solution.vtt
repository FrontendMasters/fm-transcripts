WEBVTT

1
00:00:00.000 --> 00:00:03.795
[MUSIC]

2
00:00:03.795 --> 00:00:08.265
&gt;&gt; Scott Moss: So this one was a hard one,
so if you didn't get it you

3
00:00:08.265 --> 00:00:12.950
should feel great because it was hard,
really hard.

4
00:00:12.950 --> 00:00:16.560
Especially since I didn't give you
a lot of clues on a lot of stuff.

5
00:00:16.560 --> 00:00:20.570
So a couple things we had to do here,
if you were to.

6
00:00:20.570 --> 00:00:22.850
If you're still looking at the to-dos,

7
00:00:22.850 --> 00:00:27.400
you can just run npm start,
kind of tell you what to do.

8
00:00:27.400 --> 00:00:28.710
So you have a couple
things you have to do,

9
00:00:28.710 --> 00:00:32.960
register common with app, I think I
failed to tell you guys about that one,

10
00:00:32.960 --> 00:00:36.240
but that's a thing, if you didn't
do this it won't throw an error.

11
00:00:36.240 --> 00:00:39.850
You just won't get a sweet text
box at the top of your file,

12
00:00:40.960 --> 00:00:46.550
register shared with the app,
create a factory, create credit methods,

13
00:00:46.550 --> 00:00:49.980
why did I put that there.

14
00:00:49.980 --> 00:00:52.170
I don't know and
expose textbox to be imported.

15
00:00:52.170 --> 00:00:54.320
So that's just some extra credit but
let's get to the meat,

16
00:00:54.320 --> 00:00:56.480
potatoes of the stuff that
you should've been doing.

17
00:00:56.480 --> 00:00:57.926
Now let me check out the solution branch.

18
00:01:09.433 --> 00:01:16.663
&gt;&gt; Scott Moss: Cool, all right, so the
most important piece here was in post.js.

19
00:01:17.980 --> 00:01:22.833
So I said at very minimum just
see if you can create a method to

20
00:01:22.833 --> 00:01:26.210
get all the posts, so I made two.

21
00:01:26.210 --> 00:01:30.010
Or actually I have more than two, but
two crud ones and there's an extra one.

22
00:01:30.010 --> 00:01:32.220
I'll tell you about that one and
why I decided to do it.

23
00:01:33.710 --> 00:01:38.460
So my limitation was something like this,
so as far as get.

24
00:01:38.460 --> 00:01:41.960
I have a method that just
gets all the posts and

25
00:01:41.960 --> 00:01:44.570
it is using http that's
why I was injected there.

26
00:01:44.570 --> 00:01:49.850
If you haven't figured out then
API is an object that's in const.

27
00:01:49.850 --> 00:01:53.790
I'm sorry that's an API GS right,
so API.URL keeps me say URL.

28
00:01:53.790 --> 00:01:57.990
If you just hard coded the URL then
that's fine, it's also there too,

29
00:01:57.990 --> 00:01:59.630
that's why I injected it.

30
00:01:59.630 --> 00:02:02.274
Then use a string
interpolation here right.

31
00:02:02.274 --> 00:02:07.179
So API.url/posts and
is everybody familiar,

32
00:02:07.179 --> 00:02:11.610
who's here is not familiar with promises?

33
00:02:14.310 --> 00:02:17.150
Okay so
everybody seen them at least okay, so

34
00:02:17.150 --> 00:02:22.210
HTTP returns a promise which
gets a response object.

35
00:02:23.900 --> 00:02:28.050
And then normally what you would do
here and probably what most people did,

36
00:02:28.050 --> 00:02:31.620
was that they returned the data
from the response object, right.

37
00:02:33.570 --> 00:02:35.220
Knows I didn't return the data at all,

38
00:02:35.220 --> 00:02:40.950
I actually just set this array,
our state, called outpost.

39
00:02:40.950 --> 00:02:44.370
Equal to whatever the data was,
that's what I did.

40
00:02:44.370 --> 00:02:47.530
So our control is still doesn't have
access or at this point but I'll show you

41
00:02:47.530 --> 00:02:51.000
how we get access to it and I can do
this on one line without brackets.

42
00:02:51.000 --> 00:02:54.740
Because I only have one argument so
this is where error functions come in

43
00:02:54.740 --> 00:02:57.710
really handy with callback so
you can see that looks this.

44
00:02:57.710 --> 00:03:01.280
I just look real nice right there,
any questions on that one?

45
00:03:02.290 --> 00:03:05.720
Except for why the fact I didn't
return the data and why I put it here.

46
00:03:05.720 --> 00:03:07.710
We'll talk about that in a minute but
any other questions?

47
00:03:10.840 --> 00:03:15.830
&gt;&gt; Student: Does that return
responses have data too, so get?

48
00:03:15.830 --> 00:03:16.890
&gt;&gt; Scott Moss: It's going to hurt so

49
00:03:16.890 --> 00:03:22.120
what happens is it's going to return
whatever is to the right of this arrow.

50
00:03:22.120 --> 00:03:26.280
And so because this is an assignment
expression, I don't think assignment

51
00:03:26.280 --> 00:03:30.182
expressions return anything, so
it just returned undefined, yeah.

52
00:03:34.914 --> 00:03:37.862
&gt;&gt; Scott Moss: Cool, so
I have the other method, which is get one,

53
00:03:37.862 --> 00:03:40.930
arguably could just be
placed into this one.

54
00:03:40.930 --> 00:03:44.328
But I made another method and hindsight it
could have been the same method just like,

55
00:03:44.328 --> 00:03:49.260
take an ID, if it's an ID then get
one of it's not ID get all right.

56
00:03:49.260 --> 00:03:54.740
But whatever give one this one takes an ID
and what does it is trying to find it.

57
00:03:56.160 --> 00:03:57.850
Do it's a method shortcuts here,

58
00:03:57.850 --> 00:04:00.876
get the ID property to say
things go like this right?

59
00:04:00.876 --> 00:04:05.910
[BLANK AUDIO] So if

60
00:04:05.910 --> 00:04:10.420
you find it if the posts I mean something
caught you don't when, see I know that is.

61
00:04:10.420 --> 00:04:12.297
You know this?

62
00:04:12.297 --> 00:04:16.540
&gt;&gt; Student 2: Yeah it's dark you is
a promise library inside of angular and

63
00:04:16.540 --> 00:04:20.090
skewed out when will rap whatever.

64
00:04:20.090 --> 00:04:22.720
Value you put in it any promise taken

65
00:04:22.720 --> 00:04:25.359
is immediately resolved essentially
&gt;&gt; Scott Moss: Right.

66
00:04:25.359 --> 00:04:27.530
&gt;&gt; Student 2: Yes it, do you have
to callers of all one or forget?

67
00:04:27.530 --> 00:04:31.210
&gt;&gt; Scott Moss: No it's where does is
it will the matter of the thing you're

68
00:04:31.210 --> 00:04:36.650
passing in is a promise or
some static value in this case object,

69
00:04:36.650 --> 00:04:39.900
it will allow you to call .then.

70
00:04:39.900 --> 00:04:42.340
On the functions so
when I call and getOne,

71
00:04:42.340 --> 00:04:45.510
I can call that deny it even though
it might not be a synchronous.

72
00:04:45.510 --> 00:04:51.020
So it guarantees me that the noble API
although it might just be synchronous and

73
00:04:51.020 --> 00:04:52.120
resolve immediately.

74
00:04:52.120 --> 00:04:55.040
That way when I call getOne,
I don't have to check to see wait.

75
00:04:55.040 --> 00:04:58.980
Is it a promise or is it cigarettes
because this might be synchronous

76
00:04:58.980 --> 00:05:02.720
because we might find a post in
the array right here and if we do,

77
00:05:02.720 --> 00:05:03.950
we just want to go ahead and return it.

78
00:05:03.950 --> 00:05:08.010
But, if I just return it,
then now, if it's this case,

79
00:05:08.010 --> 00:05:09.710
than now I don't know
which one's going to do.

80
00:05:09.710 --> 00:05:12.327
I don't know if it's gonna be promise or
it's gonna be.

81
00:05:12.327 --> 00:05:16.363
So, guarantees me that I can
always call .then on this

82
00:05:16.363 --> 00:05:19.190
method regardless if it's or not.

83
00:05:19.190 --> 00:05:22.310
The reason we want to look
inside this array first is for

84
00:05:22.310 --> 00:05:28.010
like so like it's catching right?

85
00:05:28.010 --> 00:05:29.580
We don't have to go get it
again if it's already here.

86
00:05:30.680 --> 00:05:31.373
So that's how we look in this.

87
00:05:31.373 --> 00:05:36.232
This is a small optimization but
else, if it's not in there,

88
00:05:36.232 --> 00:05:39.440
we need to go get it and same thing.

89
00:05:39.440 --> 00:05:44.820
What I'm doing here though, got the URL,
nice interpolation and then I got the id.

90
00:05:46.670 --> 00:05:48.660
All right, straight at rest.

91
00:05:50.300 --> 00:05:53.661
So, that would look like,
if you go to dv.j sign,

92
00:05:53.661 --> 00:05:57.820
it would be /id and id would be
one of these things, all right.

93
00:06:00.187 --> 00:06:03.323
&gt;&gt; Scott Moss: .then so,
here is some funky stuff,

94
00:06:03.323 --> 00:06:05.970
does hat look weird to anybody?

95
00:06:05.970 --> 00:06:08.720
Cuz it should, is it like what?

96
00:06:08.720 --> 00:06:09.920
Can anybody tell me what's going on there?

97
00:06:09.920 --> 00:06:13.950
Let me just zoom out, what is this?

98
00:06:13.950 --> 00:06:17.790
&gt;&gt; Student 3: You're taking the response
object and pulling out the data.

99
00:06:17.790 --> 00:06:19.380
&gt;&gt; Scott Moss: Thatâ€™s
exactly what I'm doing.

100
00:06:19.380 --> 00:06:23.159
So whatever argument,
is the first argument,

101
00:06:23.159 --> 00:06:27.846
in this call back function give
me the data property of it.

102
00:06:27.846 --> 00:06:28.800
&gt;&gt; Student: That's what I was doing.

103
00:06:28.800 --> 00:06:31.147
&gt;&gt; Student 4: So
you could have done that above too, sure.

104
00:06:31.147 --> 00:06:35.187
&gt;&gt; Student 5: That's that destructuring-
&gt;&gt; Student 3: When you did response,

105
00:06:35.187 --> 00:06:39.040
all right, you could have done that-
&gt;&gt; Scott Moss: I could have,

106
00:06:39.040 --> 00:06:41.720
the reason I didn't do it
is because if I do this,

107
00:06:41.720 --> 00:06:46.290
if I go like this now,
I can't do a one liner node.

108
00:06:47.770 --> 00:06:49.460
&gt;&gt; Student 3: Why can't you
just do data at the end?

109
00:06:50.800 --> 00:06:52.030
&gt;&gt; Scott Moss: Why can
I do data at the end?

110
00:06:52.030 --> 00:06:52.811
What do you mean?

111
00:06:52.811 --> 00:06:55.398
&gt;&gt; Student 3: You set resp.data,
why didn't that work?

112
00:06:55.398 --> 00:07:01.420
&gt;&gt; Scott Moss: Well, because now I had
to put parenthesis around this argument.

113
00:07:01.420 --> 00:07:03.730
If you put parenthesis around the
argument, you can't do this on one line.

114
00:07:04.880 --> 00:07:05.917
So now I have to do this.

115
00:07:11.372 --> 00:07:12.640
&gt;&gt; Student 2: Hey Scott, by the way,

116
00:07:12.640 --> 00:07:16.580
the assignment operation actually
returns the value that was assigned.

117
00:07:16.580 --> 00:07:18.400
&gt;&gt; Scott Moss: Aww,
sweet, yeah you're right.

118
00:07:18.400 --> 00:07:19.530
&gt;&gt; Student 2: It is doing

119
00:07:19.530 --> 00:07:21.160
the same thing as what you want, like-
&gt;&gt; Scott Moss: Perfect.

120
00:07:21.160 --> 00:07:23.040
&gt;&gt; Student 2: What someone
else would have wanted here.

121
00:07:23.040 --> 00:07:24.035
&gt;&gt; Scott Moss: I did not know that,
that is awesome

122
00:07:24.035 --> 00:07:25.446
&gt;&gt; Student 2: [CROSSTALK] Couple people in

123
00:07:25.446 --> 00:07:27.599
the chat actually try to include a Zeiss.

124
00:07:27.599 --> 00:07:28.740
&gt;&gt; Scott Moss: Nice, that's awesome.

125
00:07:28.740 --> 00:07:29.940
&gt;&gt; Student 2: Yeah,
I could remember either.

126
00:07:29.940 --> 00:07:33.630
&gt;&gt; Student: Yeah, it does make sense,

127
00:07:33.630 --> 00:07:38.020
that's what it works Yeah because
you don't want to do the one liner.

128
00:07:38.020 --> 00:07:40.840
&gt;&gt; Scott Moss: If there's one argument and
no parentheses,

129
00:07:40.840 --> 00:07:44.100
there's no arguments you have to put
parentheses, you cannot do a one liner.

130
00:07:44.100 --> 00:07:45.650
If there is more than one argument,

131
00:07:45.650 --> 00:07:50.380
you have to put parentheses,
and you can't do the one liner.

132
00:07:50.380 --> 00:07:53.519
You can only do the one liner
if there's one argument.

133
00:07:53.519 --> 00:07:55.670
&gt;&gt; Student: But wasn't this [INAUDIBLE]?

134
00:07:55.670 --> 00:07:58.620
&gt;&gt; Scott Moss: Yeah but we had to
put parentheses around because of

135
00:07:58.620 --> 00:07:59.520
destructuring, so.

136
00:07:59.520 --> 00:08:01.250
&gt;&gt; Student: Cuz you can do.

137
00:08:01.250 --> 00:08:03.210
Like no, no, no, no, no.

138
00:08:03.210 --> 00:08:08.710
&gt;&gt; Scott Moss: That was scary
because like as soon as you do this,

139
00:08:08.710 --> 00:08:09.680
now you have to go to the next line.

140
00:08:10.910 --> 00:08:13.480
As soon as you put parentheses there,
you have to do it on the next line, and

141
00:08:13.480 --> 00:08:16.250
we have to put parentheses
there because of this.

142
00:08:17.260 --> 00:08:17.960
You can check it.

143
00:08:17.960 --> 00:08:18.820
&gt;&gt; Student: Yeah, I'll check it.

144
00:08:18.820 --> 00:08:24.350
&gt;&gt; Scott Moss: Yeah, but pretty sure that
won't work but maybe Babble is like,

145
00:08:24.350 --> 00:08:27.030
you know what, that should work and
we're going to get it to work.

146
00:08:27.030 --> 00:08:29.374
Babble doesn't really
follow the spec 100%.

147
00:08:29.374 --> 00:08:31.491
So they do what they want.

148
00:08:34.287 --> 00:08:38.470
&gt;&gt; Scott Moss: Cool, so
yeah I am de-structuring in the arguments.

149
00:08:38.470 --> 00:08:40.646
So I didn't tell you can do that but

150
00:08:40.646 --> 00:08:44.639
you can totally de-structure in
the argument which is legit.

151
00:08:44.639 --> 00:08:46.450
I mean and also just to be safe here.

152
00:08:46.450 --> 00:08:50.270
If you wanted to, you could say,
or no, never mind don't do that,

153
00:08:50.270 --> 00:08:54.565
obviously you can set up a default to,
but they'd be pushing the data.

154
00:08:54.565 --> 00:08:55.975
You don't wanna do that.

155
00:08:55.975 --> 00:09:00.895
So course, so
then now what I'm doing is I'm just gonna

156
00:09:00.895 --> 00:09:04.695
add that data to the array because there
wasn't there before cuz we hit this case.

157
00:09:04.695 --> 00:09:07.015
So that means it was never there so
we just gonna push it in there and

158
00:09:07.015 --> 00:09:07.645
I'm just gonna return it.

159
00:09:11.035 --> 00:09:11.955
Everybody following me so far?

160
00:09:13.300 --> 00:09:18.490
All right, so getOne, if we can't find it,
go get it from the API.

161
00:09:18.490 --> 00:09:22.670
When it comes back, place it in the array,
and then return it.

162
00:09:24.210 --> 00:09:29.900
So it's just placing it in our cache,
our state and then the next one.

163
00:09:29.900 --> 00:09:32.070
This is a very,
very important one, right here.

164
00:09:32.070 --> 00:09:38.480
This is how we actually get the posts
from this factory to our controller.

165
00:09:38.480 --> 00:09:43.220
So this is a pattern that I learned from
working with some of the people on a great

166
00:09:43.220 --> 00:09:46.780
team and our friends of mine that actually
this one works really really good.

167
00:09:46.780 --> 00:09:50.440
I was not a fan of it at first but
when I started using other frameworks and

168
00:09:50.440 --> 00:09:52.340
I was like this part is
actually pretty good.

169
00:09:52.340 --> 00:09:56.680
So we have this git state method which
its job is just to return the state,

170
00:09:56.680 --> 00:09:57.790
that's all it does.

171
00:09:57.790 --> 00:10:02.310
It just returns wherever you're
keeping your state, that's it.

172
00:10:02.310 --> 00:10:06.290
In this case it's the allPosts array, this
is gonna return that, that's all it does.

173
00:10:06.290 --> 00:10:07.100
So I'm gonna go ahead and

174
00:10:07.100 --> 00:10:11.280
return all three of those using
those nice property shortcuts.

175
00:10:11.280 --> 00:10:14.740
I can just comma separate them
with the same name pretty sweet.

176
00:10:17.357 --> 00:10:21.280
&gt;&gt; Student 2: If you're gonna run this
line 18 you need a bracket after data.

177
00:10:22.540 --> 00:10:23.980
&gt;&gt; Scott Moss: Say that again?

178
00:10:23.980 --> 00:10:25.716
&gt;&gt; Student 2: Line 18.

179
00:10:25.716 --> 00:10:27.857
&gt;&gt; Scott Moss: Thanks, I did not see that.

180
00:10:30.283 --> 00:10:34.670
&gt;&gt; Scott Moss: Yeah I don't know why
that's the one thing I like about Sublime.

181
00:10:34.670 --> 00:10:39.554
Sometimes- [CROSSTALK] Yeah,
it'll work tomorrow and

182
00:10:39.554 --> 00:10:42.325
it won't work yesterday.

183
00:10:42.325 --> 00:10:45.090
[LAUGH] Sweet, so now I'm injecting.

184
00:10:45.090 --> 00:10:49.100
So one thing you might have come
up here and was just like, yep,

185
00:10:49.100 --> 00:10:50.260
I'm just gonna export this.

186
00:10:50.260 --> 00:10:52.740
This works, this is totally fine,
we're not minifying but

187
00:10:52.740 --> 00:10:55.680
then you don't, and
you might not have had that.

188
00:10:55.680 --> 00:10:59.370
But if you do that export, then this
never happens all right which is fine,

189
00:10:59.370 --> 00:11:00.000
cuz we're not minifying.

190
00:11:00.000 --> 00:11:02.530
But if you were minifying it,
you can't figure out why

191
00:11:02.530 --> 00:11:05.080
the stuff was breaking is because you
were exporting before you did that.

192
00:11:05.080 --> 00:11:11.830
So that's why I'm exporting at
the bottom here, everybody see that?

193
00:11:14.590 --> 00:11:19.870
Cool, so over to share j s,
import post step function we just made and

194
00:11:19.870 --> 00:11:22.900
we've just made a factory called post,
and put it there.

195
00:11:22.900 --> 00:11:25.770
It was awesome to see that people were
literally giving it the same name that I

196
00:11:25.770 --> 00:11:27.070
gave it that, did I?

197
00:11:28.230 --> 00:11:29.700
Yeah, I didn't put that
name anywhere else.

198
00:11:29.700 --> 00:11:32.920
Everybody else named it the same thing or
most people did, which is cool.

199
00:11:32.920 --> 00:11:36.500
Which means they're thinking in that
convention of the naming which is great.

200
00:11:38.020 --> 00:11:40.600
Cuz that's where people start
naming stuff differently, but

201
00:11:40.600 --> 00:11:41.910
everybody pretty much named this the same.

202
00:11:41.910 --> 00:11:42.710
I thought that was great.

203
00:11:45.110 --> 00:11:49.650
&gt;&gt; Student 2: Scott, Bill T is wondering
why we have the get state function?

204
00:11:49.650 --> 00:11:51.280
&gt;&gt; Scott Moss: We're gonna
talk about that when

205
00:11:51.280 --> 00:11:53.590
we get to the controller, good question.

206
00:11:53.590 --> 00:11:57.196
But that is definitely, for the setup that
I, for the way that I made the factory,

207
00:11:57.196 --> 00:12:01.850
the getState is necessary.

208
00:12:01.850 --> 00:12:05.408
Normally, what you would
do is instead of adding

209
00:12:05.408 --> 00:12:10.370
the data to some collection,
you will just return the data and

210
00:12:10.370 --> 00:12:12.730
then you would get it in your
controller and display it that way.

211
00:12:13.850 --> 00:12:18.020
But technically, who's storing the data
that if you're getting it in a controller,

212
00:12:18.020 --> 00:12:19.950
like, then the controller
store in that state, right.

213
00:12:19.950 --> 00:12:23.060
So, it's not really what we want,
so we want to store it in here,

214
00:12:23.060 --> 00:12:24.070
so that's why I did that.

215
00:12:24.070 --> 00:12:28.830
We'll talk about that in a minute, so
we got that, we got shared working.

216
00:12:28.830 --> 00:12:33.576
Then following the tree,
what we have to do then is go to add.js.

217
00:12:33.576 --> 00:12:36.180
Add.js we need to import shared.

218
00:12:39.408 --> 00:12:41.460
&gt;&gt; Scott Moss: And
we need to register it with angular.

