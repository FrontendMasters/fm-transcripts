WEBVTT

1
00:00:03.940 --> 00:00:07.231
&gt;&gt; Scott Moss: So now what we're gonna be
doing is we're gonna do something a little

2
00:00:07.231 --> 00:00:10.762
more complicated but if you've used
Angular, this should be familiar.

3
00:00:10.762 --> 00:00:13.929
You're just gonna probably go
do this in a different way.

4
00:00:13.929 --> 00:00:17.065
So we have right now some static data for
like those,

5
00:00:17.065 --> 00:00:20.220
those blog posts just like
static data that we made.

6
00:00:20.220 --> 00:00:24.535
We're gonna replace that with real
data from a server that's in the repo

7
00:00:24.535 --> 00:00:25.250
right now.

8
00:00:26.910 --> 00:00:28.365
Sweet.
So before we do that,

9
00:00:28.365 --> 00:00:30.197
let's talk about services.

10
00:00:30.197 --> 00:00:32.980
Who here wants to give me their
definition of a service in Angular?

11
00:00:35.980 --> 00:00:37.831
&gt;&gt; Scott Moss: Yep?

12
00:00:37.831 --> 00:00:39.827
&gt;&gt; Student 1: A single threaded request.

13
00:00:39.827 --> 00:00:45.289
&gt;&gt; Scott Moss: Single threaded, I think
it of a, you think of a HTTP column.

14
00:00:45.289 --> 00:00:50.305
I'm just talking about the actual
services in the Angular like-

15
00:00:50.305 --> 00:00:51.339
&gt;&gt; Student 2: You quit the dollar HTTP or

16
00:00:51.339 --> 00:00:52.520
the dollar research or what?

17
00:00:52.520 --> 00:00:54.373
&gt;&gt; Scott Moss: Right,
itâ€™s the part of the research that, yeah.

18
00:00:54.373 --> 00:00:55.873
&gt;&gt; Student 1: Yeah.

19
00:00:55.873 --> 00:01:02.257
So a service is,
if you think of essentially, a factory.

20
00:01:02.257 --> 00:01:07.281
But a service is, it uses the this

21
00:01:07.281 --> 00:01:11.593
keyword and it's newable.

22
00:01:11.593 --> 00:01:14.758
But the factory isn't?

23
00:01:14.758 --> 00:01:15.352
&gt;&gt; Scott Moss: Right, so

24
00:01:15.352 --> 00:01:19.390
you actually gave me the definition
of the exact method called service.

25
00:01:19.390 --> 00:01:21.023
So, this is where it gets confusing.

26
00:01:21.023 --> 00:01:23.965
This is were I ask people because
this is really confusing.

27
00:01:23.965 --> 00:01:25.783
In fact, there was a talk at Indie conf.

28
00:01:25.783 --> 00:01:28.178
About how confusing this was,
because it was so confusing.

29
00:01:28.178 --> 00:01:36.668
So, the term service is used is loosely
used in Angular one X, very loosely used.

30
00:01:36.668 --> 00:01:41.768
Because technically, all the stuff
I'm about show you is a service but

31
00:01:41.768 --> 00:01:47.380
there exists a method with the name of
service as well, which is also service.

32
00:01:47.380 --> 00:01:51.661
So, all these methods that you
can call on angular.module,

33
00:01:51.661 --> 00:01:54.720
they are all technically called services.

34
00:01:55.810 --> 00:01:59.490
But again, there is one whose
name is actually called service.

35
00:01:59.490 --> 00:02:04.228
That's why the term service and Angular
one X is loosely used because of if

36
00:02:04.228 --> 00:02:07.830
somewhere is yeah,
I write a service for that.

37
00:02:07.830 --> 00:02:10.350
What do they really mean?
Do they actually write a service for

38
00:02:10.350 --> 00:02:14.570
that or they mean write a service for
that, right?

39
00:02:14.570 --> 00:02:15.128
I don't know.

40
00:02:15.128 --> 00:02:19.988
So yes, very loosely used I think
they could call it a better term but

41
00:02:19.988 --> 00:02:23.270
the differences are in this bill there.

42
00:02:23.270 --> 00:02:27.199
A service and a factory they're pretty
much synonymous, the differences

43
00:02:27.199 --> 00:02:30.640
are pretty simple a service is
a newable function that uses this.

44
00:02:30.640 --> 00:02:34.040
That's pretty much it, so when you pass
in the second callback function here for

45
00:02:34.040 --> 00:02:37.190
the finished injection, the function's
gonna be called new on, right?

46
00:02:37.190 --> 00:02:40.830
But it's also a singleton.

47
00:02:40.830 --> 00:02:44.401
So, it's not gonna be a new instance
every time you use the service.

48
00:02:44.401 --> 00:02:47.785
So remember that, it's a singleton.

49
00:02:47.785 --> 00:02:52.120
And then a factory is
a function that's not newable.

50
00:02:52.120 --> 00:02:54.055
It will return whatever
you want it to return.

51
00:02:54.055 --> 00:02:55.700
You can return a number.

52
00:02:55.700 --> 00:02:56.281
You can return a boolean.

53
00:02:56.281 --> 00:02:57.797
You can return an object.

54
00:02:57.797 --> 00:02:59.532
You can return another function,
that is newable.

55
00:02:59.532 --> 00:03:01.637
You can do whatever you
want with a factory.

56
00:03:01.637 --> 00:03:03.594
So, those are two differences
between those two,

57
00:03:03.594 --> 00:03:05.240
cuz a lot of people get
those two confused.

58
00:03:05.240 --> 00:03:08.450
So you can use either or,
to get the same thing.

59
00:03:08.450 --> 00:03:12.233
Unless, you were trying to return
something that wasn't an object because

60
00:03:12.233 --> 00:03:15.365
a service can only return an object
because it's to instantiable

61
00:03:15.365 --> 00:03:19.190
factory function which only returns
instances which are objects.

62
00:03:19.190 --> 00:03:21.130
So, that's why I usually
just use factories.

63
00:03:21.130 --> 00:03:24.330
So I can return whatever I want,
I'm not a big service person.

64
00:03:24.330 --> 00:03:30.405
And then constants and values are just
like a way to store constants and values.

65
00:03:30.405 --> 00:03:35.210
But you can make constances in ES2015 now,
so it's like yay, whatever.

66
00:03:35.210 --> 00:03:38.235
So yeah, all these are services,
but this is a service.

67
00:03:38.235 --> 00:03:40.137
So if you hear me say,
just make a service for that.

68
00:03:40.137 --> 00:03:43.285
That really means pick one of these and
make one, all right?

69
00:03:43.285 --> 00:03:45.845
I'm not really saying go make a service,
all right?

70
00:03:45.845 --> 00:03:48.347
So, just remember that.

71
00:03:48.347 --> 00:03:49.573
It's really confusing.

72
00:03:49.573 --> 00:03:51.429
So here's what the code looks like for
that, a little difference.

73
00:03:53.520 --> 00:03:56.636
So you have your module, and
then you have your dot service here.

74
00:03:56.636 --> 00:03:57.796
This is an actual service.

75
00:03:57.796 --> 00:04:03.040
This function right here is called
a function is a newable function.

76
00:04:03.040 --> 00:04:04.910
So, I think I've touched
on this yesterday.

77
00:04:04.910 --> 00:04:05.642
You can't and

78
00:04:05.642 --> 00:04:09.250
should not use arrow functions here
as if there were no why you should.

79
00:04:10.930 --> 00:04:15.460
&gt;&gt; Student 3: This context is bound to
declaration or where it's declared.

80
00:04:15.460 --> 00:04:16.341
&gt;&gt; Scott Moss: Exactly.

81
00:04:16.341 --> 00:04:19.607
The context is gonna be bound
to whatever outside scope and

82
00:04:19.607 --> 00:04:23.660
this is sitting like on the global
store that will be the window.

83
00:04:23.660 --> 00:04:25.332
So when you say this.action,

84
00:04:25.332 --> 00:04:28.948
you have to say window.action
which is not what you want, right?

85
00:04:28.948 --> 00:04:33.200
So, that the error functions are not
meant to replace constructor functions.

86
00:04:33.200 --> 00:04:35.918
Just remember that and
if you're making a service,

87
00:04:35.918 --> 00:04:39.273
the actual method service then
this is a constructor function.

88
00:04:39.273 --> 00:04:43.210
So, they are not for arrow functions for
constructor function on a factory.

89
00:04:43.210 --> 00:04:44.200
Yes.

90
00:04:44.200 --> 00:04:45.990
&gt;&gt; Student 1: Just a quick question.

91
00:04:45.990 --> 00:04:49.711
So with that kind of
ES6 NIM Conventions here,

92
00:04:49.711 --> 00:04:54.840
could we instead of saying function there,
say like my service?

93
00:04:54.840 --> 00:05:00.114
Double prints or
is that just objects constructed?

94
00:05:00.114 --> 00:05:01.433
&gt;&gt; Scott Moss: I see what you mean.
&gt;&gt; Student 1: Yeah.

95
00:05:01.433 --> 00:05:02.647
&gt;&gt; Scott Moss: You can only
do it on object literals.

96
00:05:02.647 --> 00:05:03.681
&gt;&gt; Student 1: Object literals, okay.

97
00:05:03.681 --> 00:05:04.991
&gt;&gt; Scott Moss: Yeah,
object literals and classes.

98
00:05:04.991 --> 00:05:06.080
&gt;&gt; Student 1: Cool.

99
00:05:06.080 --> 00:05:07.776
&gt;&gt; Scott Moss: Yeah, so-
&gt;&gt; Student 1: But

100
00:05:07.776 --> 00:05:10.062
if you could like created
named function below and

101
00:05:10.062 --> 00:05:12.028
it hosts up into there
if you reference it?

102
00:05:12.028 --> 00:05:15.811
&gt;&gt; Scott Moss: If you create a name
function over the functional expression

103
00:05:15.811 --> 00:05:17.153
and hoisted up here?

104
00:05:17.153 --> 00:05:20.550
&gt;&gt; Student 1: Like if I
said function not service.

105
00:05:20.550 --> 00:05:21.084
&gt;&gt; Scott Moss: You could do that
&gt;&gt; Student 1: And

106
00:05:21.084 --> 00:05:22.740
just put my service there.

107
00:05:22.740 --> 00:05:24.980
&gt;&gt; Scott Moss: Yeah,
you can totally do that, that'll work.

108
00:05:24.980 --> 00:05:28.120
As long as you do the expression and
not a declaration.

109
00:05:29.425 --> 00:05:30.597
&gt;&gt; Student 1: Cool.
&gt;&gt; Scott Moss: Or is it the other way

110
00:05:30.597 --> 00:05:31.125
around?

111
00:05:31.125 --> 00:05:33.706
I don't know, one of those two.

112
00:05:33.706 --> 00:05:37.275
But a factory is not a newable function.

113
00:05:37.275 --> 00:05:41.147
I mean this, this function is still
dependency injection and you still

114
00:05:41.147 --> 00:05:45.534
might have some problems with trying to
figure out how to handle minification but

115
00:05:45.534 --> 00:05:49.950
as far as like scoping, you should be
fine as long as you don't use this.

116
00:05:49.950 --> 00:05:51.727
But maybe just to protect yourself,

117
00:05:51.727 --> 00:05:54.490
you should probably still not
use arrow functions here.

118
00:05:54.490 --> 00:05:57.976
I just do it because I know I'm
never gonna use this inside of here,

119
00:05:57.976 --> 00:06:00.690
unless I'm creating a new scope so.

120
00:06:00.690 --> 00:06:03.640
But a factory can't return anything,
it has to return something though.

121
00:06:03.640 --> 00:06:06.984
If you don't put the return key
word in a factory return something,

122
00:06:06.984 --> 00:06:11.110
angular will not it will not run, it will
break like you didn't return something.

123
00:06:11.110 --> 00:06:13.746
You need to return something this factory,
so

124
00:06:13.746 --> 00:06:17.733
long as you return anything which
could also be a newable function, so

125
00:06:17.733 --> 00:06:21.131
you can return a constructor
function here which is great.

126
00:06:21.131 --> 00:06:23.035
Any questions on those two?

127
00:06:23.035 --> 00:06:27.880
&gt;&gt; Student 1: There's a clarification
from Daniel and may be worth asking.

128
00:06:27.880 --> 00:06:32.404
So, would you be able to use
a class as a service since that's

129
00:06:32.404 --> 00:06:34.812
a newable thing as well, right?

130
00:06:34.812 --> 00:06:39.170
&gt;&gt; Scott Moss: Yeah, you would be
able to use a class as a service.

131
00:06:39.170 --> 00:06:41.740
You could totally do that
long as a class is made.

132
00:06:41.740 --> 00:06:46.578
So technically, classes in ES2015 is spec,

133
00:06:46.578 --> 00:06:49.810
they're not supposed to hoist.

134
00:06:49.810 --> 00:06:53.370
But I think, Babel allows them to hoist.

135
00:06:53.370 --> 00:06:55.978
But if you're ready to
classes make sure you have

136
00:06:55.978 --> 00:06:57.959
a defined before you make a service.

137
00:06:57.959 --> 00:07:00.560
Although, I think Babel will
allow you to hoist up, so

138
00:07:00.560 --> 00:07:03.060
you can define it down here from the top.

139
00:07:03.060 --> 00:07:06.264
But I'm pretty sure according
to the ES 2015 spec,

140
00:07:06.264 --> 00:07:10.780
they're not supposed to hoist like that
for reasons as far as extending them.

141
00:07:10.780 --> 00:07:13.030
You have problems with that,
so they don't allow that.

