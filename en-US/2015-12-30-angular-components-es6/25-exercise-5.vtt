WEBVTT

1
00:00:00.000 --> 00:00:04.197
[MUSIC]

2
00:00:04.197 --> 00:00:09.618
&gt;&gt; Scott Moss: The task at hand
if you go to step five, again,

3
00:00:09.618 --> 00:00:14.080
you notice there's a shared folder.

4
00:00:14.080 --> 00:00:15.110
There's some files in here.

5
00:00:15.110 --> 00:00:18.030
If you go and read them,
you can see what's going on.

6
00:00:18.030 --> 00:00:19.980
I just have like URL.

7
00:00:19.980 --> 00:00:22.426
I'll tell you what this
is doing in a minute.

8
00:00:22.426 --> 00:00:25.036
Everyone make sure they do NPM install,

9
00:00:25.036 --> 00:00:28.040
there's definitely some
new stuff in there.

10
00:00:33.822 --> 00:00:35.370
&gt;&gt; Scott Moss: Actually, I forgot.

11
00:00:35.370 --> 00:00:36.840
There's something you
have to install globally,

12
00:00:36.840 --> 00:00:39.760
cuz I couldn't put it in the package.json,
cuz it's a global thing.

13
00:00:39.760 --> 00:00:43.779
So, if everyone watching can run
this command in their terminal,

14
00:00:43.779 --> 00:00:46.454
actually it's going to terminal and do it.

15
00:00:46.454 --> 00:00:48.140
Do npm, I make it bigger.

16
00:00:49.430 --> 00:00:51.556
Install and do i for short.

17
00:00:51.556 --> 00:00:56.060
You can just type i instead of install and
-g for global.

18
00:00:56.060 --> 00:01:00.090
If you have to pseudo, make sure you put
pseudo in front of this and then Json.

19
00:01:00.090 --> 00:01:05.330
json-server and install that globally.

20
00:01:24.477 --> 00:01:27.123
&gt;&gt; Scott Moss: Cool, so if you go and
look in the files and share,

21
00:01:27.123 --> 00:01:30.846
you see API.JS is the URL to the server
that you're gonna be running.

22
00:01:30.846 --> 00:01:32.477
I will show you the minute
how to run that server.

23
00:01:32.477 --> 00:01:36.330
Posts JS, this is where you're gonna
be doing to most of your work.

24
00:01:36.330 --> 00:01:38.000
There's some comments in here.

25
00:01:38.000 --> 00:01:42.650
I literally left as little hints and
stuff as

26
00:01:42.650 --> 00:01:47.620
I possibly could to see what you would
figure out, but you kinda get the idea.

27
00:01:47.620 --> 00:01:50.980
There's a few things you gotta do in
here and there's a one gotcha that

28
00:01:50.980 --> 00:01:52.980
is very simple but
I think a lot of people are gonna miss it.

29
00:01:55.150 --> 00:01:56.343
And then share at JS.

30
00:01:56.343 --> 00:02:00.550
This is the part where we're
just registering some stuff.

31
00:02:00.550 --> 00:02:06.112
So I registered this constant that I made,
an API.js so it's an object.

32
00:02:06.112 --> 00:02:08.255
It's an object whose name is API and

33
00:02:08.255 --> 00:02:11.050
I told angular about it
by making it constant.

34
00:02:12.270 --> 00:02:16.830
So, when you make your post.j,
remember, we wanna register this with

35
00:02:16.830 --> 00:02:21.036
angular too and share JS might be
the place in fact it shows up here.

36
00:02:21.036 --> 00:02:23.030
So remember that.

37
00:02:23.030 --> 00:02:30.976
So once you have that,
let's see on its blog, blog.controllers.

38
00:02:30.976 --> 00:02:33.969
So you are now and
then once you have all that, good to go.

39
00:02:33.969 --> 00:02:39.323
If you gonna blog.controller,
you wanna get rid of the static data that

40
00:02:39.323 --> 00:02:44.350
we have and we want to inject our
posts service and start using that.

41
00:02:44.350 --> 00:02:48.113
So I left no, no to here on how to do that
either, but I did tell you yesterday how

42
00:02:48.113 --> 00:02:51.420
to inject stuff inside of a controller,
inside of a class.

43
00:02:51.420 --> 00:02:52.640
So try to do that and

44
00:02:52.640 --> 00:02:57.150
replace the static data with the data
you will get back from the server.

45
00:02:57.150 --> 00:03:02.940
So, speaking of the server,
if you go into another terminal window,

46
00:03:09.444 --> 00:03:12.778
&gt;&gt; Scott Moss: And if you type in json

47
00:03:12.778 --> 00:03:18.187
server and then type in db.json.

48
00:03:18.187 --> 00:03:22.296
So db.json is a file in the root of
your application that was added.

49
00:03:22.296 --> 00:03:26.700
If you go look you'll see it's just
got like some mock json data in it.

50
00:03:26.700 --> 00:03:31.147
It's nothing but json data, so on another
terminal if you do json server db.json and

51
00:03:31.147 --> 00:03:35.120
hit Enter, it's gonna create a restful
server for you based off that data.

52
00:03:35.120 --> 00:03:37.450
And it's purely restful.

53
00:03:37.450 --> 00:03:38.360
You can do crud on it.

54
00:03:38.360 --> 00:03:43.980
You can post to it, delete,
get purely restful with like query params.

55
00:03:43.980 --> 00:03:46.520
It's ridiculous how easy it is, like.

56
00:03:46.520 --> 00:03:50.623
So, if you grab this URL,
which is localhost 3000,

57
00:03:50.623 --> 00:03:54.820
when you look at it,
you'll see what I'm talking about.

58
00:03:54.820 --> 00:03:55.630
&gt;&gt; Speaker 2: What is the command again?

59
00:03:55.630 --> 00:04:00.509
&gt;&gt; Scott Moss: The command
is json server db.json.

60
00:04:09.100 --> 00:04:11.432
&gt;&gt; Scott Moss: So if you were gonna
look at the server in Explorer,

61
00:04:11.432 --> 00:04:15.338
you'll see you get this nice little page
and it's like, yeah, we found a resource

62
00:04:15.338 --> 00:04:18.944
that you had in here called posts and
if you click on it, there's all our data.

63
00:04:18.944 --> 00:04:20.136
It's there.

64
00:04:20.136 --> 00:04:22.064
It's pretty crazy.

65
00:04:22.064 --> 00:04:25.427
It's the easiest server you've never made.

66
00:04:25.427 --> 00:04:31.243
&gt;&gt; Speaker 3: So
what are the query parameters that you're

67
00:04:31.243 --> 00:04:36.610
talking about besides the crud command?

68
00:04:36.610 --> 00:04:37.958
&gt;&gt; Scott Moss: So
how familiar are you with [INAUDIBLE].

69
00:04:37.958 --> 00:04:38.465
&gt;&gt; Speaker 3: Vaguely.
&gt;&gt; Scott Moss: It's [INAUDIBLE].

70
00:04:38.465 --> 00:04:39.425
So like, let's go look at a post.

71
00:04:39.425 --> 00:04:41.480
So if you wanted to find by ID,

72
00:04:41.480 --> 00:04:44.750
you can pass an ID through this right?

73
00:04:44.750 --> 00:04:49.590
&gt;&gt; Speaker 3: Totally get that but it's
always just for prototyping like is it for

74
00:04:49.590 --> 00:04:51.790
just keeps spinning up on API files
&gt;&gt; Scott Moss: Yeah,

75
00:04:51.790 --> 00:04:52.530
it's just for prototyping.

76
00:04:52.530 --> 00:04:54.590
It's just like here's a mac data.

77
00:04:54.590 --> 00:04:59.120
Like API hit like you would
not put this on production.

78
00:04:59.120 --> 00:05:00.446
No way.
Yeah.

79
00:05:00.446 --> 00:05:07.200
All it does it takes a JSON file if
you go look at the JSON file, db.JSON.

80
00:05:07.200 --> 00:05:10.730
It just takes this JSON file and
every single property that's on a route.

81
00:05:10.730 --> 00:05:14.310
It creates a resource for it and
it looks at all the properties and

82
00:05:14.310 --> 00:05:17.340
that's how it knows what
cruise to be able to take.

83
00:05:17.340 --> 00:05:20.651
So yeah that's what it does, but
when you post to this server,

84
00:05:20.651 --> 00:05:22.466
it will write to the file, right.

85
00:05:22.466 --> 00:05:23.579
So, then if you delete,

86
00:05:23.579 --> 00:05:27.240
it'll delete from the file, so it's
literally treating this file as database.

87
00:05:32.341 --> 00:05:37.245
&gt;&gt; Scott Moss: Cool, so again,
the task is in shared/post.js

88
00:05:37.245 --> 00:05:41.350
you need to fill this stuff out.

89
00:05:41.350 --> 00:05:42.750
We need to do some crud methods.

90
00:05:42.750 --> 00:05:46.580
At very minimum,
we need to be able to get all the posts.

91
00:05:46.580 --> 00:05:47.490
At the very minimum.

92
00:05:47.490 --> 00:05:48.370
That's what we need to do.

93
00:05:48.370 --> 00:05:51.030
If that's all you do, then you win.

94
00:05:51.030 --> 00:05:51.690
That's it.

95
00:05:51.690 --> 00:05:54.020
So, find some way to be
able to get all the posts.

96
00:05:54.020 --> 00:05:55.130
We have the API here.

97
00:05:56.670 --> 00:06:01.079
And once you get that, be sure to register
it somewhere in here, remember that?

98
00:06:02.280 --> 00:06:05.650
And then go to blog.control.js and

99
00:06:05.650 --> 00:06:09.620
remove the static data and replace it with
the data we got back from the server.

100
00:06:11.940 --> 00:06:13.940
So everything should look
the same on the page.

101
00:06:13.940 --> 00:06:16.360
So, how you know you're done?

102
00:06:16.360 --> 00:06:18.580
If we, well I mean, you'll know.

103
00:06:18.580 --> 00:06:19.620
[LAUGH] It will throw some errors.

104
00:06:19.620 --> 00:06:23.040
But if you check out just to see because
I think I changed like the colors and

105
00:06:23.040 --> 00:06:23.725
all types of stuff.

106
00:06:23.725 --> 00:06:28.091
Step-5-fix and we do npm start.

107
00:06:28.091 --> 00:06:28.591
Oops.

108
00:06:39.001 --> 00:06:39.982
&gt;&gt; Scott Moss: Let that thing run.

109
00:06:43.495 --> 00:06:46.414
&gt;&gt; Speaker 4: I don't know if it'd be,
helpful, Scott, but

110
00:06:46.414 --> 00:06:50.262
I learned very recently with NVM
that you can alias default, and

111
00:06:50.262 --> 00:06:55.390
it will automatically inject that as a
node into whatever terminals you start up.

112
00:06:55.390 --> 00:06:57.850
&gt;&gt; Scott Moss: Yeah,
so that totally works.

113
00:06:57.850 --> 00:07:00.640
I used to have that setup,
and I stopped using NVM, and

114
00:07:00.640 --> 00:07:05.150
I just downloaded NVM before this works
out use it a gas so, thank you for that.

115
00:07:05.150 --> 00:07:08.262
&gt;&gt; Speaker 4: Well it didn't seem very
well documented, so I didn't know for the

116
00:07:08.262 --> 00:07:10.353
longest time and I was doing this like-
&gt;&gt; Scott Moss: I used

117
00:07:10.353 --> 00:07:12.400
to be like in the in the show right here.

118
00:07:12.400 --> 00:07:13.235
I used to come in here.

119
00:07:13.235 --> 00:07:15.204
&gt;&gt; Speaker 4: Yeah,
like run this first [LAUGH].

120
00:07:15.204 --> 00:07:16.680
&gt;&gt; Scott Moss: Run this command first but
then,

121
00:07:16.680 --> 00:07:19.860
I would type before that command would
run and it will break every day.

122
00:07:19.860 --> 00:07:21.350
&gt;&gt; Speaker 4: Yeah yeah.

123
00:07:21.350 --> 00:07:23.640
&gt;&gt; Scott Moss: So yeah thanks for that.

124
00:07:23.640 --> 00:07:25.350
So how do you know you're done?

125
00:07:25.350 --> 00:07:30.660
If you go back and
we go to the localhost4500,

126
00:07:30.660 --> 00:07:36.190
you should still see the data, right.

127
00:07:36.190 --> 00:07:37.000
Nothing should change.

128
00:07:37.000 --> 00:07:38.380
Yeah you get some nice
animations like that.

129
00:07:38.380 --> 00:07:41.668
I forgot to added that.

130
00:07:41.668 --> 00:07:42.660
Yeah and
now there's a search bar here now.

131
00:07:44.860 --> 00:07:47.320
So you got a search bar
that like does search.

132
00:07:47.320 --> 00:07:48.909
Search it, Yeah.

