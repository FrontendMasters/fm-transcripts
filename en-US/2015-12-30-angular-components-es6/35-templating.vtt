WEBVTT

1
00:00:00.000 --> 00:00:03.970
[MUSIC]

2
00:00:03.970 --> 00:00:07.520
&gt;&gt; Scott Moss: So what we're gonna do now
is we're gonna automate these things.

3
00:00:09.040 --> 00:00:12.980
So what I mean by automate,
I mean we write the same stuff over,

4
00:00:12.980 --> 00:00:13.544
and over, and over again.

5
00:00:13.544 --> 00:00:16.410
Like admin, blog, blog post, common home.

6
00:00:16.410 --> 00:00:20.360
They all have the same,
they definitely have the same files.

7
00:00:20.360 --> 00:00:23.760
And even in those files they kinda do
the same thing, at least for a little bit.

8
00:00:23.760 --> 00:00:27.300
Like all directives import styles,
and controllers, and templates, and

9
00:00:27.300 --> 00:00:28.660
they all export.

10
00:00:28.660 --> 00:00:33.630
All controllers are classes and
export, right.

11
00:00:33.630 --> 00:00:36.700
All JavaScript,
all the entry files import Angular and

12
00:00:36.700 --> 00:00:40.470
the directive, and
register the directive, and then export.

13
00:00:40.470 --> 00:00:41.280
They also create a module.

14
00:00:41.280 --> 00:00:43.240
So there were some common things there.

15
00:00:43.240 --> 00:00:46.140
So we can just automate this using gulp.

16
00:00:46.140 --> 00:00:48.920
This is a reason why I wanted
to use gulp with webpack

17
00:00:48.920 --> 00:00:50.940
because if we use webpack we're
won't be able to automate this.

18
00:00:50.940 --> 00:00:53.865
Webpack, its job is not to do this
type of thing that we're about to do,

19
00:00:53.865 --> 00:00:55.410
its job is to build files.

20
00:00:55.410 --> 00:00:58.100
It's not gonna automate
a template system for

21
00:00:58.100 --> 00:01:00.459
you, whereas gulp will cuz
it's just a streaming system.

22
00:01:02.540 --> 00:01:04.700
So we're gonna use gulp for that.

23
00:01:04.700 --> 00:01:07.340
Now before we do that,
because this one's actually kind

24
00:01:07.340 --> 00:01:09.076
of complicated that's why I saved it for
the last.

25
00:01:09.076 --> 00:01:11.710
I wasn't even too sure if
I was gonna do it, but

26
00:01:11.710 --> 00:01:14.525
I think it's important for
everybody to see it.

27
00:01:14.525 --> 00:01:18.525
Does anybody not have experience
with a templating engine?

28
00:01:19.785 --> 00:01:21.945
Of any language,
doesn't have to be JavaScript.

29
00:01:23.835 --> 00:01:25.345
No, you don't have experience
with a templating engine?

30
00:01:25.345 --> 00:01:28.117
So let's just talk about that for
a little bit.

31
00:01:28.117 --> 00:01:29.297
This is gonna help you out a little bit.

32
00:01:29.297 --> 00:01:33.927
So basics of a templating engine,
something like this.

33
00:01:33.927 --> 00:01:37.007
So we have a function called,
let's just say make template.

34
00:01:38.257 --> 00:01:40.607
Just imagine there's a function
called make template somewhere, okay.

35
00:01:42.357 --> 00:01:43.892
And what we do is we'll
have like an object.

36
00:01:46.488 --> 00:01:48.398
&gt;&gt; Scott Moss: And
it will have some properties on it.

37
00:01:48.398 --> 00:01:50.085
Name, hey, all right.

38
00:01:50.085 --> 00:01:53.780
And then what we'll do
is we'll have a string.

39
00:01:55.590 --> 00:01:58.131
And let's say the string
is just a sentence.

40
00:01:58.131 --> 00:02:01.175
My name is.

41
00:02:01.175 --> 00:02:03.880
And in this case it's actually
just used what JavaScript uses.

42
00:02:03.880 --> 00:02:06.990
It used this type of symbol and
we'll put name here.

43
00:02:09.750 --> 00:02:12.500
The way most templating engines work,
especially the one we're gonna be using,

44
00:02:13.630 --> 00:02:16.770
it'll use the function makeTemplate or
whatever its function is.

45
00:02:18.920 --> 00:02:20.460
And it'll do something like this.

46
00:02:20.460 --> 00:02:23.720
So it will take in the string, oops.

47
00:02:23.720 --> 00:02:24.544
I guess I should give these names, right?

48
00:02:28.740 --> 00:02:32.935
&gt;&gt; Scott Moss: It'll take in the string,
and then the object.

49
00:02:32.935 --> 00:02:37.827
And then what it will do is
return the compiled result.

50
00:02:40.625 --> 00:02:43.870
&gt;&gt; Speaker 2: So
does Angular have a templating engine?

51
00:02:43.870 --> 00:02:45.900
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: When you do.

52
00:02:45.900 --> 00:02:46.502
&gt;&gt; Scott Moss: Yep.

53
00:02:46.502 --> 00:02:47.010
&gt;&gt; Speaker 2: Okay.

54
00:02:47.010 --> 00:02:47.760
&gt;&gt; Scott Moss: That's exactly right.

55
00:02:47.760 --> 00:02:50.900
So we're gonna use a very micro one,
but a very powerful.

56
00:02:50.900 --> 00:02:54.370
It's built into Lodash and it's the exact
same thing that's in Underscore.

57
00:02:54.370 --> 00:02:56.490
So if you ever used Underscore
templates or Lodash templates,

58
00:02:56.490 --> 00:02:59.090
it's exact same thing,
that's what we're about to use.

59
00:02:59.090 --> 00:03:02.520
It actually kinda looks like,
yeah, it's Underscore and Lodash.

60
00:03:02.520 --> 00:03:04.269
If you've used it's the same thing.

61
00:03:05.700 --> 00:03:09.290
So that's the methodology
behind templating.

62
00:03:09.290 --> 00:03:10.570
It's gonna be something like that.

63
00:03:10.570 --> 00:03:11.760
Sometimes you'll do something like this.

64
00:03:11.760 --> 00:03:17.200
You'll do this and
this will return a function compiler.

65
00:03:17.200 --> 00:03:18.423
And then you'll say compiler.

66
00:03:21.183 --> 00:03:25.486
&gt;&gt; Scott Moss: And then you'll pass in
the options at some later time which will

67
00:03:25.486 --> 00:03:26.767
return the value.

68
00:03:26.767 --> 00:03:28.317
So, but either way, it's the same concept.

69
00:03:33.602 --> 00:03:35.186
&gt;&gt; Scott Moss: But yeah,
Angular does the same thing.

70
00:03:35.186 --> 00:03:39.930
In fact Angular has a
&gt;&gt; Scott Moss: compile.

71
00:03:39.930 --> 00:03:40.640
&gt;&gt; Speaker 2: Yeah, I've seen that.

72
00:03:42.210 --> 00:03:45.504
&gt;&gt; Scott Moss: Thing that
does that with interpolation.

73
00:03:45.504 --> 00:03:49.050
Cool, so that's the basics of templating.

74
00:03:49.050 --> 00:03:50.550
And I just want to give you that context,

75
00:03:50.550 --> 00:03:54.840
because most of the stuff you're gonna
see in the next step is already there.

76
00:03:54.840 --> 00:03:56.910
But I want you to
understand what's going on.

77
00:03:56.910 --> 00:03:57.497
So to help you out.

