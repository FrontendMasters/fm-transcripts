WEBVTT

1
00:00:00.000 --> 00:00:04.068
[MUSIC]

2
00:00:04.068 --> 00:00:07.132
&gt;&gt; Scott Moss: Any other
questions on that?

3
00:00:07.132 --> 00:00:08.950
&gt;&gt; Off Camera 1: You can
alias those as well, right?

4
00:00:08.950 --> 00:00:11.052
&gt;&gt; Scott Moss: Yes, so
you can also alias these.

5
00:00:11.052 --> 00:00:14.084
So I'll show what that looks like.

6
00:00:14.084 --> 00:00:17.100
There we go.

7
00:00:17.100 --> 00:00:21.502
So if you wanted to alias these imports,
what you could do is, by the way,

8
00:00:21.502 --> 00:00:22.648
this is the Babel.

9
00:00:22.648 --> 00:00:25.851
Try it out, you can come in here and
just play with all types of ES2015 stuff.

10
00:00:25.851 --> 00:00:27.296
So you can come in here and you can say.

11
00:00:27.296 --> 00:00:27.798
Can you guys see that?

12
00:00:27.798 --> 00:00:28.995
&gt;&gt; Off Camera 1: Mm-hm.

13
00:00:28.995 --> 00:00:32.376
&gt;&gt; Scott Moss: Okay, so
you can come in here and say,

14
00:00:32.376 --> 00:00:37.345
you can say, import, and
let's use our same example,

15
00:00:37.345 --> 00:00:41.925
config, and
then you can say as setup from config.

16
00:00:41.925 --> 00:00:45.300
And what that's gonna do is allow us
to have this variable called setup.

17
00:00:45.300 --> 00:00:49.590
So if I were like, console.log setup,
all right, it'll be a real thing.

18
00:00:49.590 --> 00:00:51.960
It's gonna error here, of course,
but that's what that will do.

19
00:00:51.960 --> 00:00:58.993
So using the as keyword is like, load up
this named thing inside of this file,

20
00:00:58.993 --> 00:01:03.015
but alias it as this guy
inside of this file.

21
00:01:03.015 --> 00:01:04.778
That's what that means.

22
00:01:04.778 --> 00:01:07.366
&gt;&gt; Off Camera 2: I wouldn't recommend,
that, though, because like you said,

23
00:01:07.366 --> 00:01:08.314
the name consistency.

24
00:01:08.314 --> 00:01:11.359
Like, why would you, I have seen that
before, but why would you ever do that?

25
00:01:11.359 --> 00:01:12.150
&gt;&gt; Scott Moss: Good question.

26
00:01:12.150 --> 00:01:13.090
So we're going to use this, and

27
00:01:13.090 --> 00:01:17.660
the only way you would use this
is if you were loading up.

28
00:01:17.660 --> 00:01:22.840
So you export it as a named thing,
but you're loading up in one file,

29
00:01:23.890 --> 00:01:26.380
specifically, that was looking for
a different name.

30
00:01:26.380 --> 00:01:28.980
And you'll see when we start making
the components where that comes into play,

31
00:01:28.980 --> 00:01:31.460
cuz it's kinda hard to visualize that.

32
00:01:31.460 --> 00:01:34.020
But you'll see, so
things like controllers and templates.

33
00:01:34.020 --> 00:01:37.679
Like, it's great to have named
controllers, and in fact, we will, but

34
00:01:37.679 --> 00:01:41.515
it'd be really cool if I could just call
it a controller inside of the file that

35
00:01:41.515 --> 00:01:42.473
needs it, right?

36
00:01:42.473 --> 00:01:44.919
So that's where you'll
see stuff like that.

37
00:01:44.919 --> 00:01:48.740
So it also keeps things kind of the same,
but not really.

38
00:01:48.740 --> 00:01:51.587
So it's like, you want strict, but then
you kinda backed out of it, all right?

39
00:01:51.587 --> 00:01:53.681
&gt;&gt; Off Camera 1: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] You went for it,

40
00:01:53.681 --> 00:01:58.552
but then you're like, no, no, no,
I'm not ready, I'm not ready, so.

41
00:01:58.552 --> 00:02:03.370
&gt;&gt; Off Camera 7: I can think of two other
scenarios when you might wanna use it.

42
00:02:03.370 --> 00:02:07.866
One where you have a similar module that
you wanna replace for one that's existing.

43
00:02:07.866 --> 00:02:08.501
&gt;&gt; Scott Moss: That's true.

44
00:02:08.501 --> 00:02:12.558
&gt;&gt; Off Camera 7: And rather than going
through and refactoring all your code to

45
00:02:12.558 --> 00:02:16.468
use the new module, you just say,
as, and then that name.

46
00:02:16.468 --> 00:02:17.736
&gt;&gt; Scott Moss: That's true.
&gt;&gt; Off Camera 7: And the other is,

47
00:02:17.736 --> 00:02:21.146
if it's like a really long name and
you don't want to have to retype that,

48
00:02:21.146 --> 00:02:22.249
incredibly long name.

49
00:02:22.249 --> 00:02:25.336
&gt;&gt; Scott Moss: Yeah, I remember really
bad, it was a really long name.

50
00:02:25.336 --> 00:02:27.650
Yeah, I ain't digging that,
that's for sure.

51
00:02:27.650 --> 00:02:29.010
So those are some really good reasons too.

52
00:02:31.710 --> 00:02:35.575
Sweet, so like CommonJS, the path to the
modules is relative to the current file,

53
00:02:35.575 --> 00:02:36.370
all right?

54
00:02:36.370 --> 00:02:38.010
So, just remember that,
it's relative to the current file.

55
00:02:38.010 --> 00:02:40.500
This is CommonJS specifics or webpack.

56
00:02:40.500 --> 00:02:44.190
And jspm, if you're using jspm, it's not
gonna be relative to the current file,

57
00:02:44.190 --> 00:02:49.410
it's gonna be relative to whatever
you told jspm was the base URL.

58
00:02:49.410 --> 00:02:50.990
So that might be
the folder you're serving.

59
00:02:50.990 --> 00:02:52.210
So it would be relative to that folder.

60
00:02:52.210 --> 00:02:54.650
So remember, if you're using jspm,
it's a little different.

61
00:02:54.650 --> 00:02:56.050
This is why we're not using it right now.

62
00:02:56.050 --> 00:02:58.659
It's a little wonkier to work with.

63
00:03:00.740 --> 00:03:04.990
So here's examples of working with many
imports and exports in the same module.

64
00:03:04.990 --> 00:03:08.076
It's very, very, very super,
it's as you would think it is,

65
00:03:08.076 --> 00:03:09.632
it's just like with CommonJS.

66
00:03:09.632 --> 00:03:14.690
So in app.js, if we wanted to import
multiple modules, we can do this.

67
00:03:14.690 --> 00:03:18.785
So we'll use the brackets, and
we'll say, module 1, comma, module 2,

68
00:03:18.785 --> 00:03:21.530
comma, module 3, from this file.

69
00:03:21.530 --> 00:03:25.790
And the way that will look on the
appropriate file is, you would define your

70
00:03:25.790 --> 00:03:28.580
modules, and then you would just
export them at the bottom, just like

71
00:03:28.580 --> 00:03:31.680
you imported them in the other file, with
the brackets around them, same syntax.

72
00:03:32.800 --> 00:03:33.920
So the way I remember this is,

73
00:03:33.920 --> 00:03:37.960
if I import it like this, it's going
to be exported the exact same way.

74
00:03:37.960 --> 00:03:39.860
They look exactly the same.

75
00:03:39.860 --> 00:03:43.070
Or what you can do is just place
export in front of, actually,

76
00:03:43.070 --> 00:03:46.010
there should be a var in front of these.

77
00:03:46.010 --> 00:03:51.394
So it would be like, export var module 1,
export var module 2, export var module 3.

78
00:03:51.394 --> 00:03:53.690
So you can do that as well,
however you want to do it.

79
00:03:53.690 --> 00:03:57.019
It's the same thing as
doing module.exports or

80
00:03:57.019 --> 00:03:59.300
exports dot, just like in Node.

81
00:04:05.633 --> 00:04:06.717
&gt;&gt; Scott Moss: Does everybody get that?

82
00:04:11.899 --> 00:04:13.315
&gt;&gt; Scott Moss: Cool.

83
00:04:13.315 --> 00:04:18.361
So, you might be thinking,
Angular already has a module system,

84
00:04:18.361 --> 00:04:20.804
all right, angular.module.

85
00:04:20.804 --> 00:04:22.950
How does that work with
the ES2015 module system?

86
00:04:22.950 --> 00:04:24.420
Or does it work with it at all?

87
00:04:24.420 --> 00:04:26.230
Has anybody ever tried to
use those two together?

88
00:04:26.230 --> 00:04:27.840
Has anyone even, have you?

89
00:04:27.840 --> 00:04:31.277
What's your experience with it?

90
00:04:31.277 --> 00:04:32.853
&gt;&gt; Off Camera 3: Actually, it was great.

91
00:04:32.853 --> 00:04:33.367
&gt;&gt; Scott Moss: It's great?

92
00:04:33.367 --> 00:04:34.020
&gt;&gt; Off Camera 3: Yeah, it's good.

93
00:04:34.020 --> 00:04:36.110
&gt;&gt; Scott Moss: That's good.

94
00:04:36.110 --> 00:04:38.754
I've heard some stories of people who
were just like, I don't know what to do,

95
00:04:38.754 --> 00:04:39.312
I don't get it.

96
00:04:39.312 --> 00:04:42.260
And I've heard other people say,
this is great, this is fantastic.

97
00:04:42.260 --> 00:04:47.340
And I think the problems revolve around,
like, what system takes control?

98
00:04:47.340 --> 00:04:49.670
Where do I register my things?

99
00:04:49.670 --> 00:04:51.240
How do I stay organized?

100
00:04:51.240 --> 00:04:52.030
I don't know what's going on.

101
00:04:52.030 --> 00:04:53.832
I'm writing this same code over and
over again.

102
00:04:53.832 --> 00:04:57.192
Or, like, this just feels wrong, I'm doing
a lot of getters and not a lot of setters,

103
00:04:57.192 --> 00:04:58.726
which is an anti-pattern in Angular.

104
00:04:58.726 --> 00:05:00.800
So how do we get around that?

105
00:05:00.800 --> 00:05:01.740
So there are a few approaches.

106
00:05:03.590 --> 00:05:06.260
The one approach that I've
seen a lot of people do is,

107
00:05:06.260 --> 00:05:10.800
you can have just one Angular module and
rely completely on ES2015 modules.

108
00:05:10.800 --> 00:05:13.135
So you'll just make an Angular
module called App, and

109
00:05:13.135 --> 00:05:16.793
then you'll just register everything on
that module, you'll just pass that module

110
00:05:16.793 --> 00:05:20.360
around to all your ES2015 modules and
register everything on that.

111
00:05:20.360 --> 00:05:20.890
Which is great.

112
00:05:22.440 --> 00:05:25.966
This is fine, but I don't really like it,
because I do a lot of testing.

113
00:05:25.966 --> 00:05:27.390
I'm crazy about testing.

114
00:05:28.450 --> 00:05:30.962
And it limits like a lot of flexibility.

115
00:05:30.962 --> 00:05:34.500
So when it comes to testing,
Angular, if you've ever tested it,

116
00:05:34.500 --> 00:05:37.200
you know you have to load
the module up and mock it.

117
00:05:37.200 --> 00:05:40.430
Now, if everything is tied to the module,
that means every time you write a test and

118
00:05:40.430 --> 00:05:42.260
you do that before each,
and you load the module up,

119
00:05:42.260 --> 00:05:46.220
you're loading the entire application
every single time you write a test.

120
00:05:46.220 --> 00:05:47.453
That's not that fun.

121
00:05:47.453 --> 00:05:50.062
Then you have to start figuring
out all these dependencies and

122
00:05:50.062 --> 00:05:51.021
where they came from.

123
00:05:51.021 --> 00:05:52.923
And now you can't even
get the tests to run,

124
00:05:52.923 --> 00:05:55.510
cuz you're trying to track
down different dependencies.

125
00:05:55.510 --> 00:05:57.300
So I don't really like that.

126
00:05:57.300 --> 00:05:58.860
And it limits the flexibility.

127
00:05:58.860 --> 00:06:02.490
Now I can't really take my
component out of my application and

128
00:06:02.490 --> 00:06:06.764
stick it in somebody else's application,
right, cuz it's relying on this stuff.

129
00:06:06.764 --> 00:06:08.370
There are some ways you
can get around that, but

130
00:06:08.370 --> 00:06:11.000
still, the abstraction is just like,
is it really worth it?

131
00:06:12.682 --> 00:06:15.190
The other approach is what
we're going to be doing is,

132
00:06:15.190 --> 00:06:18.280
we're going to create a new Angular module
for every single component that we make.

133
00:06:18.280 --> 00:06:21.440
So it's going to be very redundant, you're
gonna be writing the same thing over and

134
00:06:21.440 --> 00:06:22.830
over and over again.

135
00:06:22.830 --> 00:06:24.230
But for good use.

136
00:06:24.230 --> 00:06:27.480
So now we'll be able to test
an individual module by itself,

137
00:06:27.480 --> 00:06:29.184
completely isolated from
the entire application.

138
00:06:29.184 --> 00:06:30.950
It's just like,
I just wanna test this module.

139
00:06:30.950 --> 00:06:33.740
Because it doesn't care,
it doesn't know who its parent is.

140
00:06:33.740 --> 00:06:36.430
It doesn't need to know,
it's just its own instance.

141
00:06:36.430 --> 00:06:38.190
And it's going to be super flexible,

142
00:06:38.190 --> 00:06:40.210
because now if you were
working with a team,

143
00:06:40.210 --> 00:06:43.170
you can work on these separate modules
completely isolated from each other.

144
00:06:43.170 --> 00:06:45.740
You can even have these modules
in different repos, right, and

145
00:06:45.740 --> 00:06:48.360
then compose them later on,
because they're completely isolated.

146
00:06:48.360 --> 00:06:50.190
Which I think is really, really great.

147
00:06:50.190 --> 00:06:53.840
If you have many applications that share
the same functionality, you can create

148
00:06:53.840 --> 00:06:56.760
these modules in different repos and
then import them somewhere else and

149
00:06:56.760 --> 00:06:58.800
somewhere else,
which is really, really cool.

150
00:06:58.800 --> 00:07:00.050
So I really like that.

151
00:07:00.050 --> 00:07:01.699
But like I said,
it's a lot of boilerplate and

152
00:07:01.699 --> 00:07:03.760
a lot of repeated code with this approach.

153
00:07:03.760 --> 00:07:06.180
The way I think about it, the more you
write it, the more you understand it.

154
00:07:06.180 --> 00:07:10.518
So you get to the point where, like,
it's a lot of repeated code, but I get it.

155
00:07:10.518 --> 00:07:14.017
And then what we're gonna do tomorrow is,
I'm going to show you how to automate this

156
00:07:14.017 --> 00:07:17.268
so you can just type in one command, and
it'll just spit it out for you anyway,

157
00:07:17.268 --> 00:07:20.107
so you don't have to write it anymore,
cuz it's the same pattern.

158
00:07:20.107 --> 00:07:21.428
Any questions on that?

159
00:07:25.902 --> 00:07:27.402
&gt;&gt; Scott Moss: All right.

160
00:07:27.402 --> 00:07:31.235
Okay, so there are other
patterns using import and export,

161
00:07:31.235 --> 00:07:34.630
default modules,
named modules, and handle that.

162
00:07:34.630 --> 00:07:38.940
But what we just talked about above is
what we're mostly going to be using.

163
00:07:38.940 --> 00:07:42.790
So we also talked a little bit
about the assignment stuff.

164
00:07:42.790 --> 00:07:43.792
This is really cool.

165
00:07:43.792 --> 00:07:46.290
I'm sorry, the reassignment or
the aliasing.

166
00:07:46.290 --> 00:07:49.840
You can also do things like,
just to touch on it, just so you know.

167
00:07:49.840 --> 00:07:54.640
So for instance,
if I had this, I had export.

168
00:07:56.120 --> 00:08:02.796
And then I was like
export thing as default,

169
00:08:02.796 --> 00:08:08.395
but I also wanna export other thing.

170
00:08:10.469 --> 00:08:15.208
&gt;&gt; Scott Moss: What I can do
now is up above, I can say,

171
00:08:15.208 --> 00:08:19.104
I can call this whatever I want.

172
00:08:19.104 --> 00:08:20.410
I can just call this whatever.

173
00:08:20.410 --> 00:08:21.770
That's gonna be thing.

174
00:08:21.770 --> 00:08:26.385
Then I can put a comma, and
then I can export other thing.

175
00:08:30.126 --> 00:08:32.966
&gt;&gt; Scott Moss: The way this works is,
because I exported thing as default,

176
00:08:32.966 --> 00:08:34.910
I can now call that whatever I want.

177
00:08:34.910 --> 00:08:36.850
So that's what I call it up here,
or whatever.

178
00:08:36.850 --> 00:08:38.690
And then put a comma after it.

179
00:08:38.690 --> 00:08:41.113
And because this is in the brackets and
is not default,

180
00:08:41.113 --> 00:08:43.711
I have to still write this in
a bracket and say other thing.

181
00:08:43.711 --> 00:08:45.370
So you can do stuff like this.

182
00:08:45.370 --> 00:08:46.689
So it gets kind of crazy.

183
00:08:46.689 --> 00:08:52.870
Then you start using ES7,
you start be able to export imports.

184
00:08:52.870 --> 00:08:54.830
So you can say, export from.

185
00:08:56.540 --> 00:08:57.360
Yeah, it's really crazy.

186
00:08:57.360 --> 00:08:58.890
You can start exporting your imports,

187
00:08:58.890 --> 00:09:00.780
which is really cool if you
start organizing stuff.

188
00:09:00.780 --> 00:09:03.150
But we're not gonna talk about that stuff.

189
00:09:03.150 --> 00:09:06.793
So those are some more advanced patterns.

190
00:09:06.793 --> 00:09:11.420
But the stuff we just talked about above
is mostly what we're gonna be using.

191
00:09:11.420 --> 00:09:14.440
So things to remember when
dealing with this stuff is,

192
00:09:14.440 --> 00:09:16.480
you can export an assignment expression.

193
00:09:16.480 --> 00:09:17.000
Remember that.

194
00:09:17.000 --> 00:09:19.120
I think a lot of people
forget that you can do that.

195
00:09:19.120 --> 00:09:22.320
What I mean by an assignment
expression is this.

196
00:09:22.320 --> 00:09:27.850
So if I say export a variable
name equals whatever,

197
00:09:27.850 --> 00:09:30.680
I'm exporting this expression,
this assignment expression.

198
00:09:30.680 --> 00:09:31.290
You can do that.

199
00:09:31.290 --> 00:09:34.631
Just put the export word in front of it,
it's gonna export it with a strict name.

200
00:09:34.631 --> 00:09:36.360
You can totally do that.

201
00:09:36.360 --> 00:09:42.356
If you don't wanna do that, you could
just say at the bottom, just say that.

202
00:09:42.356 --> 00:09:45.250
Same thing, right.

203
00:09:45.250 --> 00:09:48.433
There are times where you
have you to do this one.

204
00:09:48.433 --> 00:09:51.971
And there are times where you
don't have to do this one and

205
00:09:51.971 --> 00:09:55.297
you can just get away with this,
and you'll see why.

206
00:09:55.297 --> 00:09:58.774
Okay, another thing to remember is,
the brackets on the import and

207
00:09:58.774 --> 00:10:01.335
exports are not object literals,
all right?

208
00:10:01.335 --> 00:10:03.410
They're not key-value pairs.

209
00:10:03.410 --> 00:10:05.952
Get used to seeing those brackets
used in ten different places,

210
00:10:05.952 --> 00:10:07.270
they're just not obvious.

211
00:10:07.270 --> 00:10:09.430
I wish there was more
characters on a keyboard,

212
00:10:09.430 --> 00:10:13.109
I wish they would use something else, but
I don't know what else they could use.

213
00:10:13.109 --> 00:10:14.974
It would be really cool if they
could just use something else.

214
00:10:14.974 --> 00:10:16.798
&gt;&gt; Off Camera 6: They could
use Unicode characters.

215
00:10:16.798 --> 00:10:17.638
&gt;&gt; Scott Moss: They could, but

216
00:10:17.638 --> 00:10:20.882
then people would complain about
writing Unicode characters,

217
00:10:20.882 --> 00:10:24.920
like, man, we've got to write an emoji
to use this, [LAUGH] this is crazy.

218
00:10:24.920 --> 00:10:26.879
So people would complain about that.

