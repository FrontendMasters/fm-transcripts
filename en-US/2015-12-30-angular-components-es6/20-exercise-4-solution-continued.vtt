WEBVTT

1
00:00:00.000 --> 00:00:03.955
[MUSIC]

2
00:00:03.955 --> 00:00:05.635
&gt;&gt; Scott Moss: Cool, so
here are some of my tests that I wrote.

3
00:00:05.635 --> 00:00:07.675
And let's just run them because
I don't remember what they are.

4
00:00:12.655 --> 00:00:13.354
&gt;&gt; Scott Moss: Oops,

5
00:00:13.354 --> 00:00:16.035
wrong command, npm test.

6
00:00:16.035 --> 00:00:19.708
It's a good practice to have these
commands in your package.json, so

7
00:00:19.708 --> 00:00:22.415
people don't need to know
about your build system.

8
00:00:22.415 --> 00:00:24.599
Like if you don't know Gulp, and

9
00:00:24.599 --> 00:00:29.280
I forced you to type in Gulp to run
my build system, it's not that cool.

10
00:00:29.280 --> 00:00:31.320
Like if I just say, just type npm test.

11
00:00:31.320 --> 00:00:32.590
Why do you care what's building it?

12
00:00:32.590 --> 00:00:34.590
Just type an npm test or type npm start.

13
00:00:34.590 --> 00:00:38.510
I could use Broccoli, I could Gulp,
I could use Grunt, you don't really care.

14
00:00:38.510 --> 00:00:39.680
Just type in npm start.

15
00:00:39.680 --> 00:00:41.280
So it's a really good practice to do that.

16
00:00:43.030 --> 00:00:44.230
Sweet, so here's my tests.

17
00:00:44.230 --> 00:00:48.640
I have like six tests, but
I think I have way more assertions.

18
00:00:48.640 --> 00:00:49.976
So each one of these is an it.

19
00:00:49.976 --> 00:00:53.339
So every time you see it,
you see one of these, but

20
00:00:53.339 --> 00:00:57.080
that it might have many
assertions inside of them.

21
00:00:57.080 --> 00:00:58.210
So, let's take a look.

22
00:01:00.010 --> 00:01:01.410
I think this one was already here.

23
00:01:01.410 --> 00:01:02.430
Expect blog name, blog name.

24
00:01:02.430 --> 00:01:05.700
So this is where you get, you can do
some powerful stuff in this one because

25
00:01:07.090 --> 00:01:10.700
you have this blog right here,
which is the actual module.

26
00:01:10.700 --> 00:01:12.426
Just to show you what this looks like,
let me show you.

27
00:01:12.426 --> 00:01:14.790
Let me show you how powerful this is.

28
00:01:14.790 --> 00:01:21.037
So if you were to console.log(JSON.,
and we wanna stringify this,

29
00:01:21.037 --> 00:01:25.736
stringify(blog, and
then we're gonna pass in 2.

30
00:01:25.736 --> 00:01:28.151
Does anybody know what that does when
you do that with JSON.stringify,

31
00:01:28.151 --> 00:01:28.876
you pass it a number?

32
00:01:28.876 --> 00:01:32.467
You ever try that before?
&gt;&gt; Off Camera 1: It's the indentation.

33
00:01:32.467 --> 00:01:33.627
&gt;&gt; Scott Moss: Yeah, it's the indentation.

34
00:01:33.627 --> 00:01:34.873
Yeah, I found that out
a couple months ago.

35
00:01:34.873 --> 00:01:36.214
I was like, that's crazy.

36
00:01:36.214 --> 00:01:38.954
I didn't know that.
&gt;&gt; Off Camera 1: [LAUGH]

37
00:01:38.954 --> 00:01:40.726
&gt;&gt; Scott Moss: [LAUGH] If I would've known

38
00:01:40.726 --> 00:01:44.600
that like a long time ago,
that would have been amazing.

39
00:01:44.600 --> 00:01:47.140
So this module,
this is why I export the module.

40
00:01:47.140 --> 00:01:48.216
This is why I don't just export the name.

41
00:01:48.216 --> 00:01:50.900
Look at all this stuff on here.

42
00:01:50.900 --> 00:01:52.810
You can do some crazy testing on here.

43
00:01:52.810 --> 00:01:56.100
You can figure out,
like you can even say yeah,

44
00:01:56.100 --> 00:02:01.350
expect this module to require ui.router,
you can do some very stringent testing.

45
00:02:01.350 --> 00:02:05.820
This is why I export the module, because
you miss out on so much if you don't.

46
00:02:05.820 --> 00:02:09.030
If you're just like, I'm just gonna
export the name like everybody else.

47
00:02:09.030 --> 00:02:13.171
But look at this, you can really make
somebody mad by [LAUGH] writing some good

48
00:02:13.171 --> 00:02:15.035
tests, you know?
&gt;&gt; Off Camera 1: [LAUGH]

49
00:02:15.035 --> 00:02:17.215
&gt;&gt; Scott Moss: Why miss that opportunity?

50
00:02:17.215 --> 00:02:19.940
So, yeah,
some really good tests running right here.

51
00:02:19.940 --> 00:02:22.644
And then you also learn a lot
about the internals of Angular.

52
00:02:22.644 --> 00:02:25.703
This is how I learn how Angular works
internally, is by looking at this module

53
00:02:25.703 --> 00:02:28.105
and seeing what's going on when
I change different things,

54
00:02:28.105 --> 00:02:30.007
like if I add a controller,
what happens here?

55
00:02:30.007 --> 00:02:31.486
If I add this, what happens here?

56
00:02:31.486 --> 00:02:32.727
This is a good way to do that.

57
00:02:32.727 --> 00:02:34.626
So, I highly recommend
checking that stuff out.

58
00:02:34.626 --> 00:02:36.327
So you can do some really good tests here.

59
00:02:36.327 --> 00:02:39.465
And I mean really good coverage and stuff,

60
00:02:39.465 --> 00:02:43.920
instead you'll be testing
Angular itself but, whatever.

61
00:02:45.270 --> 00:02:45.920
It's really good.

62
00:02:45.920 --> 00:02:47.250
So that was already there.

63
00:02:48.624 --> 00:02:52.350
So for directive, the way I did it was
I just held this closure up here for

64
00:02:52.350 --> 00:02:54.560
the ddo, Directive Definition Object, and

65
00:02:54.560 --> 00:02:57.020
then beforeEach I just
make a new directive.

66
00:02:57.020 --> 00:03:01.600
So this beforeEach will happen for
every single it inside this describe.

67
00:03:02.832 --> 00:03:04.662
So it'll happen here,
then it'll happen here, it'll happen here,

68
00:03:04.662 --> 00:03:05.340
it'll happen here.

69
00:03:05.340 --> 00:03:06.437
So it's gonna be reinitialized every time.

70
00:03:06.437 --> 00:03:10.040
The only way that it'll happen one
time is just put a before, and

71
00:03:10.040 --> 00:03:11.517
it will only happen once.

72
00:03:11.517 --> 00:03:13.200
I think that's the expected behavior, but

73
00:03:13.200 --> 00:03:16.280
I always just use this.
&gt;&gt; Scott Moss: So and

74
00:03:16.280 --> 00:03:19.160
because I defined it up here,
it's available down here.

75
00:03:19.160 --> 00:03:20.357
So it's a closure, all right?

76
00:03:20.357 --> 00:03:23.000
So it should have the right template.

77
00:03:23.000 --> 00:03:26.370
So now I'm checking to see
if the template on the ddo

78
00:03:27.440 --> 00:03:30.000
is the same template that
I imported up top, right?

79
00:03:30.000 --> 00:03:31.747
I'm gonna make sure you put
the right template on that thing.

80
00:03:31.747 --> 00:03:34.567
Same thing with the controller,
is it the same controller?

81
00:03:34.567 --> 00:03:39.287
Are you using the isolate scope?

82
00:03:39.287 --> 00:03:41.307
This type needs to be an object, right?

83
00:03:41.307 --> 00:03:44.428
Are using controllerAs, right?

84
00:03:44.428 --> 00:03:47.147
I can even check to see if it says VM or
stuff like that.

85
00:03:47.147 --> 00:03:51.268
Just to make sure
everything is set up right.

86
00:03:51.268 --> 00:03:54.248
And then for the controller,
this oneâ€™s okay.

87
00:03:54.248 --> 00:03:56.708
I make a controller.

88
00:03:56.708 --> 00:03:58.888
I expect posts to be an array.

89
00:03:58.888 --> 00:04:03.188
And I'd expect a post to have these
properties, an author and a title.

90
00:04:03.188 --> 00:04:04.488
And that's it.

91
00:04:04.488 --> 00:04:06.248
I guess I didn't get
creative with the template.

92
00:04:06.248 --> 00:04:08.448
Did anybody write tests for
their templates?

93
00:04:08.448 --> 00:04:09.608
Nobody did it?

94
00:04:09.608 --> 00:04:10.208
You did it?

95
00:04:10.208 --> 00:04:12.836
What did you write?
&gt;&gt; Off Camera 2: I just checked for

96
00:04:12.836 --> 00:04:18.628
a bunch of presence of
the different template pages.

97
00:04:18.628 --> 00:04:19.748
String contains or

98
00:04:19.748 --> 00:04:22.168
whatever the Mocha contains-
&gt;&gt; Scott Moss: Nice.

99
00:04:22.168 --> 00:04:22.770
&gt;&gt; Off Camera 2: Yeah.

100
00:04:22.770 --> 00:04:23.348
&gt;&gt; Scott Moss: Nice, I didn't

101
00:04:23.348 --> 00:04:23.890
think of that.

102
00:04:23.890 --> 00:04:25.975
I forgot they had
the contains thing in there.

103
00:04:25.975 --> 00:04:29.050
Nice, that's really good, yeah.

104
00:04:29.050 --> 00:04:33.081
So, yeah, but you could see, you could get
pretty creative with those templates, man,

105
00:04:33.081 --> 00:04:35.380
because people in HTML and
Angular they get crazy.

106
00:04:35.380 --> 00:04:38.360
And they start ng-repeating everything,
they start doing all this stuff.

107
00:04:38.360 --> 00:04:41.308
Now you can write tests and like no,
no nested ng engine repeats,

108
00:04:41.308 --> 00:04:42.280
you know what I mean?

109
00:04:42.280 --> 00:04:43.780
You can write a test for that now.

110
00:04:43.780 --> 00:04:48.020
That's really crazy I really like that,
so yep.

111
00:04:48.020 --> 00:04:48.813
Yes.
&gt;&gt; Off Camera 3: So

112
00:04:48.813 --> 00:04:52.649
could you have a group of tests
that run on every template and

113
00:04:52.649 --> 00:04:57.571
it's defined in one place and then it
just loops across all your templates?

114
00:04:57.571 --> 00:04:58.330
Do you see what I'm saying?

115
00:04:58.330 --> 00:05:01.470
Cuz there are probably some things.
&gt;&gt; Scott Moss: Yeah, you can do that,

116
00:05:01.470 --> 00:05:02.620
I mean you would-
&gt;&gt; Off Camera 1: Yeah.

117
00:05:03.690 --> 00:05:04.860
&gt;&gt; Scott Moss: What you could do,

118
00:05:04.860 --> 00:05:05.810
if you wanted to do that.

119
00:05:07.540 --> 00:05:08.540
I mean, to a certain extent,

120
00:05:08.540 --> 00:05:10.470
you don't wanna break the module
pattern that you have.

121
00:05:10.470 --> 00:05:16.054
But if you wanna do that you can just have
a helper file that you come in here and

122
00:05:16.054 --> 00:05:20.329
you'll be like, okay,
I'm gonna call testTemplate and

123
00:05:20.329 --> 00:05:24.362
pass in the template and
something like that, right?

124
00:05:24.362 --> 00:05:25.061
You can do that.

125
00:05:25.061 --> 00:05:28.205
So I guess you could do that but,
actually, I don't know.

126
00:05:28.205 --> 00:05:30.166
I don't know if that'll even work.

127
00:05:30.166 --> 00:05:31.860
Something like that, but

128
00:05:31.860 --> 00:05:34.140
I mean that kinda breaks like.
&gt;&gt; Off Camera 3: But

129
00:05:34.140 --> 00:05:38.978
I mean like you were saying,
don't have nested ng-repeats,

130
00:05:38.978 --> 00:05:42.799
that's probably true across all-
&gt;&gt; Scott Moss: I see what you mean, so

131
00:05:42.799 --> 00:05:44.426
the actual assertion.
&gt;&gt; Off Camera 3: Yeah.

132
00:05:44.426 --> 00:05:45.419
&gt;&gt; Scott Moss: Yeah, if you could just

133
00:05:45.419 --> 00:05:47.565
break out that assertion as some-
&gt;&gt; Off Camera 3: Common file.

134
00:05:47.565 --> 00:05:48.567
&gt;&gt; Scott Moss: Yeah, some common file.

135
00:05:48.567 --> 00:05:52.459
Yeah, you can tell, usually what you do is
you have some test set up or some helper

136
00:05:52.459 --> 00:05:56.293
set up before your tests anyway that you
bring in, especially with like Chai.

137
00:05:56.293 --> 00:05:59.776
Chai has the type of library
to do like mocks and stuff so

138
00:05:59.776 --> 00:06:01.763
you can you do stuff like that.

139
00:06:01.763 --> 00:06:03.203
Yeah, for sure.

140
00:06:03.203 --> 00:06:05.403
I thought you meant something else.

141
00:06:05.403 --> 00:06:10.983
Yeah, cool,
any questions on writing the tests?

142
00:06:10.983 --> 00:06:12.823
So feeling it, right?

143
00:06:12.823 --> 00:06:15.595
Now you're gonna write tests?
&gt;&gt; Off Camera 1: [LAUGH]

144
00:06:15.595 --> 00:06:16.334
&gt;&gt; Scott Moss: All right, so

145
00:06:16.334 --> 00:06:18.434
there's no more questions on the test.

146
00:06:21.195 --> 00:06:23.088
This is all I planned on
getting through today.

147
00:06:23.088 --> 00:06:26.505
I have something else, but we definitely
won't get through it today if we start it.

148
00:06:26.505 --> 00:06:28.025
So the rest will be for tomorrow.

149
00:06:28.025 --> 00:06:34.345
So now I just wanna open it up for anybody
who's got questions about anything so

150
00:06:34.345 --> 00:06:38.777
far?
&gt;&gt; Scott Moss: Yes.

151
00:06:38.777 --> 00:06:39.317
&gt;&gt; Off Camera 3: I mean,

152
00:06:39.317 --> 00:06:43.646
this isn't directly pertaining to
what we talked about on this but

153
00:06:43.646 --> 00:06:47.390
you seem like you're pretty
good with preprocessors.

154
00:06:47.390 --> 00:06:49.700
Can you tell us why you use Stylus and

155
00:06:49.700 --> 00:06:52.741
what do you like about it?
&gt;&gt; Scott Moss: I think Stylus is

156
00:06:52.741 --> 00:06:55.280
the best one out there.

157
00:06:55.280 --> 00:06:58.580
Stylus to me is like the markdown of HTML.

158
00:06:58.580 --> 00:07:02.130
Whereas, HTML is like LESS or
Sass, in my opinion.

159
00:07:02.130 --> 00:07:07.576
LESS and Sass are great compared to CSS,
but look at that.

160
00:07:07.576 --> 00:07:10.600
[LAUGH] That's like markdown to me.

161
00:07:10.600 --> 00:07:12.670
It's just a lot more simpler for me.

162
00:07:12.670 --> 00:07:16.110
And the fact that it's being
executed by JavaScript.

163
00:07:16.110 --> 00:07:17.700
It's a lot easier for me to get through.

164
00:07:17.700 --> 00:07:19.960
I mean I know Ruby, and
I don't mind using Ruby.

165
00:07:19.960 --> 00:07:23.885
But the fact that it's just running
through Node makes it a little bit easier

166
00:07:23.885 --> 00:07:25.920
for me, I can customize it if I want to.

167
00:07:25.920 --> 00:07:28.760
And I like the fact that I
don't have to use brackets and

168
00:07:28.760 --> 00:07:32.070
stuff like LESS, and
it feels more like JavaScript.

169
00:07:32.070 --> 00:07:35.578
I've asked somebody to write
bubble sort in Stylus before and

170
00:07:35.578 --> 00:07:37.610
they were able to do it.
&gt;&gt; Off Camera 3: That's cool.

171
00:07:37.610 --> 00:07:38.836
&gt;&gt; Off Camera 1: What about,

172
00:07:38.836 --> 00:07:42.292
I mean that basically just looks like

173
00:07:42.292 --> 00:07:45.669
Traditional Sass.
&gt;&gt; Scott Moss: I've never used traditional

174
00:07:45.669 --> 00:07:50.195
Sass, so I don't know.
&gt;&gt; Off Camera 1: I mean cuz there's Sass

175
00:07:50.195 --> 00:07:52.574
and SCSS.
&gt;&gt; Scott Moss: SCSS, yeah.

176
00:07:52.574 --> 00:07:53.541
&gt;&gt; Off Camera 1: Yeah, and

177
00:07:53.541 --> 00:08:00.760
SCSS is the later adaptation to try and
duplicate basically what LESS is doing.

178
00:08:00.760 --> 00:08:07.440
And therefore, any CSS document
could be a valid SCSS document.

179
00:08:07.440 --> 00:08:10.930
So it's easy for
you to just take a CSS document,

180
00:08:10.930 --> 00:08:13.260
switch it over to a Sass.
&gt;&gt; Scott Moss: Right.

181
00:08:13.260 --> 00:08:14.520
&gt;&gt; Off Camera 1: And then make your markup

182
00:08:14.520 --> 00:08:16.250
as needed.
&gt;&gt; Scott Moss: Yeah,

183
00:08:16.250 --> 00:08:20.090
that sounds like that'd be a win
if you decided to do that.

184
00:08:20.090 --> 00:08:21.900
I've never used the classic Sass.

185
00:08:21.900 --> 00:08:26.273
But, yeah, it's kind of like Coffee script
because it relies on indentation like

186
00:08:26.273 --> 00:08:29.590
Python and Coffee scripts so
you've gotta be wary about that.

187
00:08:29.590 --> 00:08:32.750
But I like the helper functions
that it comes built in with.

188
00:08:32.750 --> 00:08:37.720
So if you look at some of

189
00:08:37.720 --> 00:08:41.430
these helper functions that Stylus comes
built in with, there's just tons of them.

190
00:08:41.430 --> 00:08:45.080
As far as like, this are all
functions that Stylus ships with.

191
00:08:45.080 --> 00:08:47.082
It's like a JavaScript
library of functions,

192
00:08:47.082 --> 00:08:50.180
things like color manipulation and
all types of stuff.

193
00:08:50.180 --> 00:08:53.679
So that's another reason why I like it.

194
00:08:53.679 --> 00:08:56.181
Yes.
&gt;&gt; Off Camera 3: There was a question from

195
00:08:56.181 --> 00:08:59.950
Horatio H,
what your opinions are on PostCSS.

196
00:08:59.950 --> 00:09:01.638
I'm not familiar with that.
&gt;&gt; Scott Moss: Yeah,

197
00:09:01.638 --> 00:09:03.811
PostCSS is like the future of CSS.

198
00:09:03.811 --> 00:09:06.351
It actually brings CSS 4 to you right now.

199
00:09:06.351 --> 00:09:10.402
And if I could use anything I
would choose that, it's just that

200
00:09:10.402 --> 00:09:15.381
the configuration is a little hard cuz
you have to set up your own rules first.

201
00:09:15.381 --> 00:09:19.370
Like for instance, I think Stylus
even uses PostCSS internally.

202
00:09:19.370 --> 00:09:23.810
So it's one of those tools you would use
to make a preprocessor, or if you had

203
00:09:23.810 --> 00:09:28.590
the team and the manpower then you can
use it internally to preprocess your CSS.

204
00:09:28.590 --> 00:09:33.950
But, yeah, PostCSS allows you to
define different syntaxes in your CSS.

205
00:09:33.950 --> 00:09:37.660
It is kind of like,
have you ever heard of sweet.js?

206
00:09:37.660 --> 00:09:38.281
&gt;&gt; Off Camera 1: Yeah, for macro.

207
00:09:38.281 --> 00:09:38.961
&gt;&gt; Scott Moss: For macros?

208
00:09:38.961 --> 00:09:39.482
&gt;&gt; Off Camera 1: Yeah.

209
00:09:39.482 --> 00:09:40.345
&gt;&gt; Scott Moss: Yeah, it's like

210
00:09:40.345 --> 00:09:41.041
that for CSS.

211
00:09:41.041 --> 00:09:43.270
It allows you to define different
macros and stuff like that.

212
00:09:43.270 --> 00:09:43.882
So-
&gt;&gt; Off Camera 1: It's nice.

213
00:09:43.882 --> 00:09:44.796
&gt;&gt; Scott Moss: It's pretty cool, yeah,

214
00:09:44.796 --> 00:09:45.700
I really like it.

215
00:09:45.700 --> 00:09:47.829
But the configuration is it just like,
eh, I don't know,

216
00:09:47.829 --> 00:09:54.072
I'm not there yet.
&gt;&gt; Off Camera 3: There's another question,

217
00:09:54.072 --> 00:09:58.457
if we can go over doing a simple
template test, like for example,

218
00:09:58.457 --> 00:10:03.032
checking that every double bracket
is followed by bm or something.

219
00:10:03.032 --> 00:10:04.272
&gt;&gt; Scott Moss: Okay, let's check that out.

220
00:10:04.272 --> 00:10:04.812
&gt;&gt; Off Camera 2: I don't know if we

221
00:10:04.812 --> 00:10:05.970
would really want that test, right?

222
00:10:05.970 --> 00:10:10.500
Because like in our ng-repeats,
that's gonna break, isn't it?

223
00:10:10.500 --> 00:10:11.810
&gt;&gt; Scott Moss: Well,

224
00:10:11.810 --> 00:10:12.950
not everything in the bracket.

225
00:10:12.950 --> 00:10:14.060
In ng-repeat, I see what you're saying.

226
00:10:14.060 --> 00:10:16.340
Yeah, in ng-repeat that would break.

227
00:10:16.340 --> 00:10:19.140
But what you could test is
maybe not every single one?

228
00:10:19.140 --> 00:10:21.782
But you could test to see that you
should at least have this one.

229
00:10:21.782 --> 00:10:24.996
I mean if you go in the template,
you should be like,

230
00:10:24.996 --> 00:10:28.662
you should at least have this
vm.message in here, right?

231
00:10:28.662 --> 00:10:31.334
Or you should have vm.post
in there somewhere.

232
00:10:31.334 --> 00:10:33.930
So you could test for that.
&gt;&gt; Off Camera 2: Sure, yeah, right.

233
00:10:33.930 --> 00:10:34.992
&gt;&gt; Scott Moss: But testing for

234
00:10:34.992 --> 00:10:37.284
all of them would be ridiculous.

235
00:10:37.284 --> 00:10:41.744
So I mean an easy way for that would
just be, I mean it's just a stream.

236
00:10:41.744 --> 00:10:45.145
So if you come in here,
you have the template stream right here.

237
00:10:45.145 --> 00:10:49.417
I mean whatever flavor you wanna do,
you wanna use .contains and Chai or

238
00:10:49.417 --> 00:10:52.778
if you wanna do a regex on it,
it's however you wanna do,

239
00:10:52.778 --> 00:10:56.287
however you wanna do it.
&gt;&gt; Off Camera 2: Maybe we can write one

240
00:10:56.287 --> 00:10:56.965
here.

241
00:10:56.965 --> 00:10:59.946
Would it take like four or five minutes?
&gt;&gt; Scott Moss: Yeah, let's do it.

242
00:10:59.946 --> 00:11:03.766
So if we say expect-
&gt;&gt; Off Camera 4: [INAUDIBLE]

243
00:11:05.182 --> 00:11:06.627
&gt;&gt; Off Camera 4: Insert an it.

244
00:11:06.627 --> 00:11:07.683
&gt;&gt; Scott Moss: Yeah, thank you.

245
00:11:07.683 --> 00:11:09.129
&gt;&gt; Off Camera 3: I forget that all

246
00:11:09.129 --> 00:11:10.903
the time.
&gt;&gt; Scott Moss: Yeah, me too.

247
00:11:10.903 --> 00:11:15.674
it('should have vm') I don't know
what the test is gonna be yet so

248
00:11:15.674 --> 00:11:17.243
we might change that.

249
00:11:17.243 --> 00:11:18.523
So we'll do that.

250
00:11:18.523 --> 00:11:25.736
And we can say expect(template),

251
00:11:25.736 --> 00:11:28.764
do I have that?

252
00:11:28.764 --> 00:11:29.983
Yes I do, template.

253
00:11:29.983 --> 00:11:31.944
And in fact, you know what?

254
00:11:31.944 --> 00:11:36.678
I have a regex for
this already, somewhere else.

255
00:11:36.678 --> 00:11:45.369
I'm gonna grab it.
&gt;&gt; Scott Moss: cat ./angularclass/

256
00:11:53.369 --> 00:11:54.749
&gt;&gt; Scott Moss: Give me one second.

257
00:12:08.610 --> 00:12:10.870
&gt;&gt; Scott Moss: Boom, where is it?

258
00:12:10.870 --> 00:12:17.277
There it is, aha.
&gt;&gt; Scott Moss: Got it,

259
00:12:17.277 --> 00:12:21.861
okay, so you can test like,
wait, how did it go?

260
00:12:21.861 --> 00:12:26.608
Yeah, .match.
&gt;&gt; Off Camera 1: Is

261
00:12:26.608 --> 00:12:31.270
it to.match?
&gt;&gt; Scott Moss: Yeah, thanks.

262
00:12:31.270 --> 00:12:35.180
So you can do something like this and
then test for the property.

263
00:12:35.180 --> 00:12:37.640
In this case I think it was what,
message, yeah.

264
00:12:38.990 --> 00:12:40.980
This is a regex that I
created a while ago.

265
00:12:40.980 --> 00:12:43.097
Let's see if this runs or not.

266
00:12:43.097 --> 00:12:47.659
So this will test to see if there's
something in this template that passes

267
00:12:47.659 --> 00:12:48.477
this regex.

268
00:12:55.497 --> 00:12:57.858
&gt;&gt; Scott Moss: [SOUND] See if that runs.

269
00:12:57.858 --> 00:13:02.850
If not, you can also do contains or
something like that.

270
00:13:02.850 --> 00:13:04.730
I think, yeah, that one worked.

271
00:13:04.730 --> 00:13:07.043
Yeah, so that one worked, should have vm.

272
00:13:07.043 --> 00:13:09.720
So that's like an advanced more one.

273
00:13:09.720 --> 00:13:11.870
There's different ways to find
values inside of a stream.

274
00:13:11.870 --> 00:13:15.122
It's up to you.
&gt;&gt; Off Camera 1: Interesting.

275
00:13:18.623 --> 00:13:20.595
&gt;&gt; Scott Moss: Any other questions

276
00:13:20.595 --> 00:13:25.203
on anything we covered today?
&gt;&gt; Off Camera 3: There was another

277
00:13:25.203 --> 00:13:31.154
question from Danielle M, your opinion on
using TypeScript in place of Babel here.

278
00:13:31.154 --> 00:13:33.114
&gt;&gt; Scott Moss: Mm-hm-hm.

279
00:13:33.114 --> 00:13:34.858
&gt;&gt; Off Camera 1: [LAUGH]

280
00:13:34.858 --> 00:13:35.418
&gt;&gt; Scott Moss: I'm not a fan of

281
00:13:35.418 --> 00:13:36.590
TypeScript, I'll be honest.

282
00:13:38.070 --> 00:13:43.010
I use it all the time cuz I'm writing
Angular 2 a lot these days, but

283
00:13:43.010 --> 00:13:44.590
I'm not a fan of it.

284
00:13:44.590 --> 00:13:47.040
I like the Wild Wild West of JavaScript.

285
00:13:47.040 --> 00:13:50.542
I like that it's just
unpredictable sometimes and

286
00:13:50.542 --> 00:13:53.725
it's fun,
TypeScript feels like Java to me.

287
00:13:53.725 --> 00:13:55.467
I don't like to write Java all the time so

288
00:13:55.467 --> 00:13:57.784
I don't really wanna write
TypeScript all the time.

289
00:13:57.784 --> 00:14:01.784
But if I were going to use TypeScript,
would I use Babel compiler,

290
00:14:01.784 --> 00:14:04.005
or would I use TypeScript compiler?

291
00:14:04.005 --> 00:14:07.684
I would definitely use a TypeScript
compiler for TypeScript.

292
00:14:07.684 --> 00:14:11.213
Especially since 1.5 just came out,
TypeScript 1.5 compiler,

293
00:14:11.213 --> 00:14:15.681
which introduces ES6 support, or ES2015
support, so imports and stuff like that,

294
00:14:15.681 --> 00:14:18.550
whereas, a couple of months
ago that wasn't the case.

295
00:14:18.550 --> 00:14:22.370
I think it just left beta or
it might still be in beta.

296
00:14:22.370 --> 00:14:26.150
I think it just left beta, so yeah,
I would definitely use TypeScript 1.5.

297
00:14:26.150 --> 00:14:31.865
Especially if you're using something
like VM or the Visual Studio code or

298
00:14:31.865 --> 00:14:36.340
like WebStorm,
you get that nice intellisense.

299
00:14:36.340 --> 00:14:37.310
Yeah, that's really awesome.

300
00:14:37.310 --> 00:14:38.751
So for that I would use it, but

301
00:14:38.751 --> 00:14:43.926
I'm not a fan of TypeScript.
&gt;&gt; Scott Moss: Yes.

302
00:14:43.926 --> 00:14:45.302
&gt;&gt; Off Camera 2: When do you think Angular

303
00:14:45.302 --> 00:14:49.528
2 is gonna come out of alpha?
&gt;&gt; Scott Moss: I don't think it's gonna be

304
00:14:49.528 --> 00:14:55.246
ready until, I think at the earliest,
probably late winter.

305
00:14:55.246 --> 00:15:00.286
At the latest, end of next spring.
&gt;&gt; Off Camera 2: Yeah.

306
00:15:00.286 --> 00:15:01.146
&gt;&gt; Scott Moss: I think right now Google

307
00:15:01.146 --> 00:15:04.242
is internally building things with it,
they're replacing some of their products.

308
00:15:04.242 --> 00:15:08.370
But it's still got some time,
it's still got some time.

309
00:15:08.370 --> 00:15:11.460
So they're trying to make it the best and
it's gonna take some time, but

310
00:15:11.460 --> 00:15:15.550
I don't think you'll see it in
production any time soon, yeah, yeah.

