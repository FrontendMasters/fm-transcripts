WEBVTT

1
00:00:00.000 --> 00:00:04.152
[MUSIC]

2
00:00:04.152 --> 00:00:08.388
&gt;&gt; Scott Moss: All right, so now we got
to the part that nobody wants to do but

3
00:00:08.388 --> 00:00:11.560
everybody wants to talk about, is testing.

4
00:00:11.560 --> 00:00:16.370
Nobody wants to do it, but they all,
yeah I test, we test, we got good tests.

5
00:00:16.370 --> 00:00:20.428
You know our coverage is, you know 5%.
&gt;&gt; Students: [LAUGH]

6
00:00:20.428 --> 00:00:21.350
&gt;&gt; Scott Moss: Mm, okay.

7
00:00:21.350 --> 00:00:24.544
So we're gonna write some tests because
a component's not a component without

8
00:00:24.544 --> 00:00:25.220
a test, right?

9
00:00:27.080 --> 00:00:30.150
Yeah, you are like yeah right,
well we'll do that.

10
00:00:30.150 --> 00:00:35.981
So let's go ahead and check out step four.

11
00:00:48.456 --> 00:00:49.700
&gt;&gt; Scott Moss: This one's
actually really cool.

12
00:00:49.700 --> 00:00:52.540
Testing is kind of boring but
I actually enjoy testing with this set up.

13
00:00:52.540 --> 00:00:56.353
It's really cool, in my opinion.
&gt;&gt; Scott Moss: So

14
00:00:56.353 --> 00:01:00.410
before we talk about it, let's just talk
about tests in general with this stuff.

15
00:01:00.410 --> 00:01:01.550
So testing components.

16
00:01:01.550 --> 00:01:09.540
So we're gonna be creating, so
the fact that we decided to

17
00:01:09.540 --> 00:01:13.204
make everything a module and I think I've
repeating this all day but I just like it.

18
00:01:13.204 --> 00:01:15.860
Is that,
when it comes to testing this is great,

19
00:01:15.860 --> 00:01:18.530
you're gonna see just how great this is.

20
00:01:18.530 --> 00:01:22.550
In fact, I think when you start writing
the test, I think the only thing in

21
00:01:22.550 --> 00:01:26.430
Angular that you have that you might wanna
write a test for is the module itself.

22
00:01:26.430 --> 00:01:30.720
Everything else can be tested outside
of Angular, cuz it doesn't need to be.

23
00:01:30.720 --> 00:01:33.380
If you look at the way you
wrote our files, right,

24
00:01:33.380 --> 00:01:38.550
if you go look at blog.controller.js,

25
00:01:38.550 --> 00:01:41.490
do you see anything with Angular in here?

26
00:01:41.490 --> 00:01:43.030
It's just regular JavaScript, right.

27
00:01:43.030 --> 00:01:45.490
We're can just test this
as regular JavaScript.

28
00:01:45.490 --> 00:01:49.960
If it start having to have things
injected into it, that's cool.

29
00:01:49.960 --> 00:01:52.444
We can mark that stuff out, or
we can put the real thing in there,

30
00:01:52.444 --> 00:01:53.690
it dosen't matter.

31
00:01:53.690 --> 00:01:55.400
But we don't have to
tell Angular about it.

32
00:01:55.400 --> 00:01:56.154
We don't have to hey,

33
00:01:56.154 --> 00:01:59.510
Angular can you give me that controller
that I told you about already.

34
00:01:59.510 --> 00:02:01.200
You don't have to,
it's gonna test this thing right here.

35
00:02:01.200 --> 00:02:06.110
Or you might have to if you start
doing like, end-to-end tests and

36
00:02:06.110 --> 00:02:09.210
you will for sure have to do that,
but unit testing, no.

37
00:02:09.210 --> 00:02:11.700
Don't have to,
this is the benefit of it because,

38
00:02:11.700 --> 00:02:15.500
I'll be honest testing my Angular
is not easy, it is not easy.

39
00:02:15.500 --> 00:02:19.437
If you don't know the digests very well
and you start messing asynchronous things,

40
00:02:19.437 --> 00:02:20.930
you can forget about it.

41
00:02:20.930 --> 00:02:24.190
You're not gonna be able to test well,
and you just won't test it at all.

42
00:02:26.040 --> 00:02:29.960
So because we made those models and
made that decision, testing is gonna be so

43
00:02:29.960 --> 00:02:31.170
easy and so legit and

44
00:02:31.170 --> 00:02:36.000
you also get to be able to be like really
stringent about the things you test.

45
00:02:36.000 --> 00:02:39.290
I was telling you earlier,
you can test your HTML now.

46
00:02:39.290 --> 00:02:43.378
You'll be able to run your HTML through
a regex, and you're gonna be like, uh-huh,

47
00:02:43.378 --> 00:02:47.300
I'm just gonna check to make sure
you put a VM in front of all these.

48
00:02:47.300 --> 00:02:52.200
That's crazy but it's legit, cuz now,
people really can't change anything.

49
00:02:52.200 --> 00:02:56.720
And it's like, I just wanna make sure that
you actually used this word right here.

50
00:02:56.720 --> 00:02:59.360
I want to make sure I use posts, right?

51
00:02:59.360 --> 00:03:02.050
And you can test all that stuff, whereas
before, you could have done it before, but

52
00:03:02.050 --> 00:03:03.624
it would be really,
really hard to do that stuff.

53
00:03:03.624 --> 00:03:07.830
Use jquery to fetch this file,
then you gotta wait, it's just like.

54
00:03:07.830 --> 00:03:09.460
No, this stuff happens immediately.

55
00:03:11.280 --> 00:03:13.480
So that's really cool that
we made that decision.

56
00:03:13.480 --> 00:03:16.700
So now we can test the individual
modules without loading the entire

57
00:03:16.700 --> 00:03:17.690
application as well.

58
00:03:17.690 --> 00:03:21.710
So, we don't have to load up Angular app,
we can just load up blog, and

59
00:03:21.710 --> 00:03:24.990
it's totally fine because
it works just by itself.

60
00:03:26.400 --> 00:03:29.586
So, for us to be testing we're going
to use a combination of tools,

61
00:03:29.586 --> 00:03:34.480
because we're gonna also be
running our test in ES2015.

62
00:03:34.480 --> 00:03:35.870
We're not gonna write our test in ES5.

63
00:03:35.870 --> 00:03:39.500
Nobody wants to do that,
we're using ES2015 now.

64
00:03:39.500 --> 00:03:42.152
So we wanna write our test
in ES2015 as well, and

65
00:03:42.152 --> 00:03:44.430
it requires an additional set up.

66
00:03:44.430 --> 00:03:46.460
So we're gonna need webpack for
this as well.

67
00:03:46.460 --> 00:03:49.610
So the tools we're gonna be
using are karma, mocha and chai.

68
00:03:49.610 --> 00:03:53.090
Only because this is my standard setup.

69
00:03:53.090 --> 00:03:59.330
I use other stuff too, but this is
mostly what I like, karma no brainer.

70
00:03:59.330 --> 00:04:00.840
Mocha, some people use jasmine.

71
00:04:01.850 --> 00:04:05.940
I like chai so I use mocha,
I like my own search and library.

72
00:04:05.940 --> 00:04:07.390
So like with our source code,

73
00:04:08.670 --> 00:04:12.510
webpack will create like
a bundled file of all our tests.

74
00:04:12.510 --> 00:04:14.324
So we have bundle.js
with all our source code.

75
00:04:14.324 --> 00:04:16.760
It's gonna do the exact same thing for
all of our test files,

76
00:04:16.760 --> 00:04:20.820
it's gonna bundle it and gonna give it
to whatever karma tells it to go to,

77
00:04:20.820 --> 00:04:22.890
which in our case will be Chrome.

78
00:04:22.890 --> 00:04:25.497
Does anybody know how karma works?

79
00:04:25.497 --> 00:04:27.340
No, anybody use karma?

80
00:04:27.340 --> 00:04:32.860
So, karma is not a tests framework,
mocha's the thing that's testing it.

81
00:04:32.860 --> 00:04:36.920
Karma is not a browser either,
it's just this bridge between

82
00:04:38.060 --> 00:04:43.350
your test runner which is mocha, and
your terminal and some browsers.

83
00:04:43.350 --> 00:04:47.701
And what it does is it will take your
code and whatever thing you're using,

84
00:04:47.701 --> 00:04:51.500
in this case mocha, send it to
a browser whatever one you choose or

85
00:04:51.500 --> 00:04:55.394
whatever browsers you choose,
Chrome, Phantomjs, whatever.

86
00:04:55.394 --> 00:04:57.171
And it will test it in the browser and

87
00:04:57.171 --> 00:04:59.990
send the results back to your
terminal via websockets.

88
00:04:59.990 --> 00:05:01.240
That's what it does.

89
00:05:01.240 --> 00:05:06.980
So the other alternative is that you
have to write like HTML inside and

90
00:05:06.980 --> 00:05:08.500
run it in the browser yourself.

91
00:05:08.500 --> 00:05:12.510
This thing will run it in the browser for
you and report the results on a terminal

92
00:05:12.510 --> 00:05:15.990
with proper exit codes and
stuff like that, in real time.

93
00:05:15.990 --> 00:05:17.630
So it's pretty dope.

94
00:05:17.630 --> 00:05:18.620
Google bought them out.

95
00:05:18.620 --> 00:05:22.660
They used to be called Testacular and
now they are called karma for

96
00:05:22.660 --> 00:05:27.361
obvious reasons.
&gt;&gt; Students: [LAUGH]

97
00:05:27.361 --> 00:05:28.664
&gt;&gt; Scott Moss: So our other code will be

98
00:05:28.664 --> 00:05:31.149
bundled and
tested through karma and stuff.

99
00:05:32.720 --> 00:05:35.320
So this is why we're doing a lot
of repeat code as far as like

100
00:05:35.320 --> 00:05:37.220
third party modules like ui-router.

101
00:05:37.220 --> 00:05:40.390
So again because we're gonna be
importing these models individually,

102
00:05:40.390 --> 00:05:44.180
we need to make sure that they register
their own dependencies like ui-router.

103
00:05:44.180 --> 00:05:49.570
So we go import blog into a test and
we mark blog out and Angular runs it,

104
00:05:49.570 --> 00:05:52.831
and it's like, I don't know what state
provider is, it's because we didn't put

105
00:05:52.831 --> 00:05:57.760
ui-router in blog, and it still worked
because app had ui-router in it.

106
00:05:57.760 --> 00:06:00.590
So it worked because we loaded up app,
but now we're not loading up app,

107
00:06:00.590 --> 00:06:01.850
we're only loading up blog.

108
00:06:01.850 --> 00:06:03.610
So now it needs to know about ui-router.

109
00:06:03.610 --> 00:06:07.980
So that's where that redundancy comes in,
but it's very, very helpful in my opinion.

110
00:06:09.670 --> 00:06:13.580
So, if we have some code that
was created out of angular,

111
00:06:13.580 --> 00:06:15.798
like our controls and
stuff, again like I said,

112
00:06:15.798 --> 00:06:18.030
we can just test it, completely
separate it, it's really awesome.

113
00:06:20.440 --> 00:06:24.467
So yeah we also did a great job of like
isolating everything, and now we can go

114
00:06:24.467 --> 00:06:29.768
deeper in to all cool stuff and have
much more assertions that we could ES5.

115
00:06:29.768 --> 00:06:34.940
Thank you Jen.

116
00:06:34.940 --> 00:06:35.560
Yeah.
So

117
00:06:35.560 --> 00:06:37.670
things like running a template
through regedit stuff like I said,

118
00:06:37.670 --> 00:06:39.070
are super fancy and super easy.

