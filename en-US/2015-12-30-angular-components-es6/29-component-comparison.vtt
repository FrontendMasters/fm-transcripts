WEBVTT

1
00:00:00.000 --> 00:00:04.083
[MUSIC]

2
00:00:04.083 --> 00:00:05.020
&gt;&gt; Scott Moss: Some mentions.

3
00:00:05.020 --> 00:00:06.970
There was some stuff that I saw,

4
00:00:06.970 --> 00:00:11.720
some feedback that other people wanted
to compare and see what's out there,

5
00:00:11.720 --> 00:00:16.160
and how we learn how to do components, and
how other frameworks are doing components.

6
00:00:16.160 --> 00:00:17.260
So I added this in.

7
00:00:17.260 --> 00:00:18.169
So I'll just squeeze this one in here.

8
00:00:19.560 --> 00:00:22.510
So below are some comparisons
of components in Angular 1.x and

9
00:00:22.510 --> 00:00:23.640
other frameworks technologies.

10
00:00:23.640 --> 00:00:26.584
So, there's just some code
samples of how they look.

11
00:00:26.584 --> 00:00:29.430
Angular 2 uses decorators with typescript,
so

12
00:00:29.430 --> 00:00:35.000
that's why I told you about decorators
extensively to create components.

13
00:00:35.000 --> 00:00:39.990
Although there exists an API to
use Angular 2 without typescript.

14
00:00:39.990 --> 00:00:42.830
So if you wanna use ES5 or
ES2005, you can use that.

15
00:00:42.830 --> 00:00:44.680
You don't have to use typescript.

16
00:00:44.680 --> 00:00:46.290
But most of documentation
of the entire script.

17
00:00:46.290 --> 00:00:48.940
So this is how it will look in Angular 2.

18
00:00:48.940 --> 00:00:51.080
Something like this.

19
00:00:51.080 --> 00:00:54.510
You have like @Component director, your
selector that's like your directive name.

20
00:00:54.510 --> 00:00:56.110
You have your template.

21
00:00:57.270 --> 00:00:59.716
And then you have your class and
then you're done, that's a component.

22
00:01:02.788 --> 00:01:06.203
&gt;&gt; Scott Moss: Pretty simple,
compared to what we're doing now,

23
00:01:06.203 --> 00:01:08.380
this is pretty simple all right.

24
00:01:08.380 --> 00:01:09.930
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Scott Moss: It's almost like too easy.

25
00:01:13.120 --> 00:01:15.220
So that's Angular 2, you can actually
start playing with it now and

26
00:01:15.220 --> 00:01:15.930
using it if you want to.

27
00:01:19.120 --> 00:01:20.350
Anybody here have experience with React?

28
00:01:22.090 --> 00:01:22.660
You got a little bit.

29
00:01:22.660 --> 00:01:24.020
A little bit.
Okay, so,

30
00:01:24.020 --> 00:01:26.970
React is just a component library
that takes a different approach.

31
00:01:26.970 --> 00:01:29.490
Allowing us to create lifecycle hooks or

32
00:01:29.490 --> 00:01:32.450
allowing us to access lifecycle
hooks into our components.

33
00:01:32.450 --> 00:01:36.180
So, if you ever develop with Android or
Java or some like that,

34
00:01:36.180 --> 00:01:39.760
very similar to that where it's just like
you have some some living state in your

35
00:01:39.760 --> 00:01:45.300
application and there are these hooks
that you get to access at different

36
00:01:45.300 --> 00:01:50.630
points in time during the applications
transition through the environment.

37
00:01:50.630 --> 00:01:52.240
So almost like database stuff, too.

38
00:01:52.240 --> 00:01:55.630
So React allows us to access
that on our components.

39
00:01:55.630 --> 00:01:59.310
Like when this component starts, before
it does this, after it's done with this,

40
00:01:59.310 --> 00:02:02.670
we get these callbacks to do
different things when it's happening.

41
00:02:02.670 --> 00:02:08.350
React uses JSX, which is a way to
write XML like HTML in our JavaScript.

42
00:02:08.350 --> 00:02:13.430
So this is how a component will look
in React with the new ES2015 syntax.

43
00:02:13.430 --> 00:02:18.158
So you have a component that
extends React.Component.

44
00:02:18.158 --> 00:02:22.450
And you get some properties, and
then you set your state here.

45
00:02:22.450 --> 00:02:23.300
Or if you using Flux,

46
00:02:23.300 --> 00:02:28.112
you set it somewhere else and you get
this render method that returns this.

47
00:02:28.112 --> 00:02:31.200
This is JSX right here,
so this is not a stream.

48
00:02:31.200 --> 00:02:32.150
This is actually JSX.

49
00:02:32.150 --> 00:02:34.960
And then you get access to
state this.state.greeting.

50
00:02:34.960 --> 00:02:35.950
So this is React.

51
00:02:35.950 --> 00:02:44.225
This is a component in React
&gt;&gt; Scott Moss: And

52
00:02:44.225 --> 00:02:46.910
the last one is Polymer.

53
00:02:46.910 --> 00:02:49.673
So Polymer is a framework that
sits on top of web components.

54
00:02:51.232 --> 00:02:54.192
&gt;&gt; Scott Moss: And adds polyfills and
creates awesome APIs and

55
00:02:54.192 --> 00:02:56.210
makes things easier.

56
00:02:56.210 --> 00:02:58.400
So Polymer itself is not web component.

57
00:02:58.400 --> 00:03:01.420
It's a framework that sits on top
of the web component standard,

58
00:03:01.420 --> 00:03:03.090
which you can use right now.

59
00:03:03.090 --> 00:03:04.830
You don't need a framework for
it, you can just use it.

60
00:03:06.010 --> 00:03:08.880
So this is how you would do it in Polymer.

61
00:03:08.880 --> 00:03:12.253
Or this is how you would
make components in Polymer.

62
00:03:12.253 --> 00:03:14.530
And this is their new 1.0 API.

63
00:03:14.530 --> 00:03:16.832
It just came out a month ago.

64
00:03:19.975 --> 00:03:22.080
&gt;&gt; Scott Moss: So
they're actually using the spec.

65
00:03:22.080 --> 00:03:27.082
They are using this template tag which is
part of the HTML5 web components spec and

66
00:03:27.082 --> 00:03:28.180
stuff like that.

67
00:03:28.180 --> 00:03:31.100
And then this is just how they do things.

68
00:03:31.100 --> 00:03:34.420
You can also come in here and add a style
tag and write your CSS in here, too.

69
00:03:34.420 --> 00:03:37.980
So, this is where and
this is the HTML file by the way.

70
00:03:37.980 --> 00:03:42.471
So, you're writing your HTML, your
JavaScript and your CSS in the HTML file.

71
00:03:45.430 --> 00:03:47.657
&gt;&gt; Speaker 2: It's self contained,
you said yesterday,

72
00:03:47.657 --> 00:03:49.010
CSS is-
&gt;&gt; Scott Moss: Yep.

73
00:03:49.010 --> 00:03:50.440
&gt;&gt; Speaker 2: It's not seen outside of

74
00:03:50.440 --> 00:03:50.950
the-
&gt;&gt; Scott Moss: Yeah,

75
00:03:50.950 --> 00:03:51.770
it's not seen outside.

76
00:03:51.770 --> 00:03:53.360
It's self contained and
then the way you would,

77
00:03:53.360 --> 00:03:55.800
because this is a written in a HTML file.

78
00:03:55.800 --> 00:03:58.660
There's this thing called HTML
imports where you can import

79
00:03:58.660 --> 00:04:01.530
other HTML files into other HTML files.

80
00:04:01.530 --> 00:04:02.800
So that's how that will work, yeah.

81
00:04:02.800 --> 00:04:06.750
&gt;&gt; Speaker 3: Do you think any framework
is doing this the best right now?

82
00:04:07.970 --> 00:04:10.850
&gt;&gt; Scott Moss: Well, it doesn't really
exist too many web components frameworks.

83
00:04:10.850 --> 00:04:14.626
Polymer is by far the most robust and
has the most features but

84
00:04:14.626 --> 00:04:17.376
there are some other frameworks out there.

85
00:04:17.376 --> 00:04:20.304
I can't remember, I don't know I can't top
of my head but there are some other web

86
00:04:20.304 --> 00:04:22.479
component frameworks out there
that are doing really good.

87
00:04:22.479 --> 00:04:27.898
But as far as just componets,
in my opinion, as of what you could use

88
00:04:27.898 --> 00:04:32.955
right now, I think React does
a great job as far as components.

89
00:04:32.955 --> 00:04:39.620
But Angular 2 comes out, the simplicity
here is just to me just seems so simple.

90
00:04:39.620 --> 00:04:40.509
&gt;&gt; Speaker 4: Xtext.
&gt;&gt; Scott Moss: Xtext, wow,

91
00:04:40.509 --> 00:04:41.279
I couldn't think of that.

92
00:04:41.279 --> 00:04:42.100
&gt;&gt; Speaker 4: I know it's not a big one.

93
00:04:42.100 --> 00:04:43.604
&gt;&gt; Scott Moss: Yeah,
X-tag's another big one.

94
00:04:43.604 --> 00:04:45.982
That one's really big,
X-tag is like Polymer and

95
00:04:45.982 --> 00:04:48.990
they have a whole bunch of components and
stuff.

96
00:04:48.990 --> 00:04:50.290
But yeah,

97
00:04:50.290 --> 00:04:55.250
I think React probably is the simplest
one right now, but stuff is changing.

98
00:04:55.250 --> 00:04:56.230
Polymer looks promising.

99
00:04:56.230 --> 00:04:58.210
I haven't really dove into 1.0 yet.

100
00:04:58.210 --> 00:04:59.430
I gave it a try before 1.0 and

101
00:04:59.430 --> 00:05:04.210
it just scared me away, so I want to
try it again and see what happens.

102
00:05:04.210 --> 00:05:06.269
In Angular 2, or Angular 1 is awesome but

103
00:05:06.269 --> 00:05:08.573
as you can see,you have
to write a lot of stuff.

104
00:05:08.573 --> 00:05:10.900
So that's why hence the big
change in Angular 2.

105
00:05:10.900 --> 00:05:14.151
But I've had some good experience
with React, pretty fun.

106
00:05:17.808 --> 00:05:20.391
&gt;&gt; Scott Moss: Any questions on any of
this stuff right here as far as like what

107
00:05:20.391 --> 00:05:22.245
components look like in other frameworks?

108
00:05:22.245 --> 00:05:25.220
There are frameworks that
adopt components as well.

109
00:05:25.220 --> 00:05:27.230
I think the Ember is doing it now.

110
00:05:27.230 --> 00:05:31.210
Hm, a really no,
it really doesn't really do components.

111
00:05:31.210 --> 00:05:35.289
But you can, I guess, if you, it really
does let you use web components though, so

112
00:05:35.289 --> 00:05:36.210
I guess you could.

113
00:05:36.210 --> 00:05:39.964
So yeah there are those other notable
mentions but I just want to give you

114
00:05:39.964 --> 00:05:43.905
guys a taste of like what we're doing
here looks like in other frameworks so

115
00:05:43.905 --> 00:05:45.864
you have something to compare it to.

116
00:05:49.254 --> 00:05:53.954
&gt;&gt; Speaker 5: Yes, I'm certain like that,
but what I've been seeing so

117
00:05:53.954 --> 00:05:58.590
far, we're talking about
Angular 1 components.

118
00:05:58.590 --> 00:06:03.031
They're application components
as opposed to like components or

119
00:06:03.031 --> 00:06:04.870
something like that, right?

120
00:06:04.870 --> 00:06:07.555
&gt;&gt; Scott Moss: Right, yeah,
it's loosely used but yeah,

121
00:06:07.555 --> 00:06:10.524
we've been talking mainly
about application but

122
00:06:10.524 --> 00:06:14.285
that's because Angular itself
is an application framework.

123
00:06:14.285 --> 00:06:18.320
Whereas React this is just
like a UI framework almost.

124
00:06:18.320 --> 00:06:20.200
It's like mixing components but

125
00:06:20.200 --> 00:06:23.900
there are things you can tie into
React that'll make it application.

126
00:06:23.900 --> 00:06:26.370
So I just didn't feel like
writing all that stuff.

127
00:06:26.370 --> 00:06:29.170
So yeah Angular, the other reason
that Angular just got a little

128
00:06:29.170 --> 00:06:31.800
more overhead is because
it is an actual framework.

129
00:06:31.800 --> 00:06:36.482
Where is like React and
Polymer, they're just like UI.

130
00:06:36.482 --> 00:06:37.129
Stuff for UI.

131
00:06:37.129 --> 00:06:38.441
They're not really like
a full complete framework.

132
00:06:38.441 --> 00:06:40.280
They don't like have like routing and
all that other stuff.

133
00:06:40.280 --> 00:06:44.440
You have to get that from somewhere else,
yep.

134
00:06:44.440 --> 00:06:47.790
Is wondering what your
take is on the churn

135
00:06:49.010 --> 00:06:54.830
rate on the JavaScript ecosystem and just
the sheer volume of new things coming out.

136
00:06:54.830 --> 00:06:56.140
&gt;&gt; Speaker 6: Do you have any tips for

137
00:06:56.140 --> 00:07:00.530
keeping up with all this stuff besides
all the wonderful stuff that Mark does?

138
00:07:00.530 --> 00:07:03.150
&gt;&gt; Scott Moss: Yeah, it's nuts.

139
00:07:03.150 --> 00:07:04.143
I mean really is nuts.

140
00:07:04.143 --> 00:07:07.152
You can't really keep
up with all the stuff.

141
00:07:07.152 --> 00:07:11.630
But it's a serious thing you have to stay
current, you have to stay, I mean you

142
00:07:11.630 --> 00:07:16.000
can't just fall all the way behind,
unless you have a really good excuse.

143
00:07:16.000 --> 00:07:21.530
But the way I do it is, I have three
rules on how to learn something new and

144
00:07:21.530 --> 00:07:22.720
when to learn something new.

145
00:07:22.720 --> 00:07:24.650
And it's like one, how trending is it.

146
00:07:25.680 --> 00:07:29.488
If I look on Google Trends and I see
that it's going up, I keep my eye on it.

147
00:07:29.488 --> 00:07:32.748
And if there's a lot of blog posts
about it or stuff like that,

148
00:07:32.748 --> 00:07:34.138
a lot of chatter about it.

149
00:07:34.138 --> 00:07:39.997
Two is how practical is it,
is this thing going to give me a job?

150
00:07:39.997 --> 00:07:41.176
Are people hiring for this?

151
00:07:41.176 --> 00:07:44.652
I'm not going to go learn
something that nobody's using.

152
00:07:44.652 --> 00:07:48.734
And then three, how scared of it am I?

153
00:07:48.734 --> 00:07:51.310
So if I'm very scared of it,
I'll probably wanna learn it.

154
00:07:51.310 --> 00:07:55.180
So if it hits all three of those things,
I'll drop everything and learn it now.

155
00:07:55.180 --> 00:07:57.000
If it's two of those things,
I'll add it to my list.

156
00:07:57.000 --> 00:07:59.180
If it's one, I'll remember it.

157
00:07:59.180 --> 00:08:01.140
But if it is none, I just forget about it.

158
00:08:01.140 --> 00:08:05.980
So that's usually what I do because
otherwise, you'd just be like what?

159
00:08:05.980 --> 00:08:07.020
What am I supposed to do?

160
00:08:07.020 --> 00:08:08.550
So there's so many things and

161
00:08:08.550 --> 00:08:10.600
how do you predict what's going
to be hot and what's not?

162
00:08:10.600 --> 00:08:13.480
So I just follow those rules and
it has been working out for me so far.

163
00:08:13.480 --> 00:08:15.560
&gt;&gt; Speaker 7: What do you mean scared?

164
00:08:15.560 --> 00:08:16.270
&gt;&gt; Scott Moss: For instance,

165
00:08:16.270 --> 00:08:19.890
some things are just frightening
because they look so new, like ES2015.

166
00:08:19.890 --> 00:08:22.630
The first time I saw it I
was like I don't know, man.

167
00:08:22.630 --> 00:08:24.050
I didn't like it at first.

168
00:08:24.050 --> 00:08:26.810
I was learning Swift at the time and
I was like this doesn't.

169
00:08:26.810 --> 00:08:27.400
I don't know.

170
00:08:27.400 --> 00:08:28.580
I don't really like this anymore.

171
00:08:28.580 --> 00:08:30.140
I don't know if I want to use this.

172
00:08:30.140 --> 00:08:31.690
I'm gonna go back to CoffeeScript.

173
00:08:31.690 --> 00:08:34.480
So I was kind of scared of it but
then that made me want to learn more.

174
00:08:34.480 --> 00:08:38.670
So just things that just look brand new
are somewhat frightening sometimes but

175
00:08:38.670 --> 00:08:40.901
I think that's a good excuse to learn it.

176
00:08:42.787 --> 00:08:44.053
&gt;&gt; Scott Moss: Any other questions?

177
00:08:47.813 --> 00:08:50.836
&gt;&gt; Speaker 8: When do you
find time to do that?

178
00:08:50.836 --> 00:08:52.360
&gt;&gt; Scott Moss: When
everybody's sleeping [LAUGH].

179
00:08:52.360 --> 00:08:57.770
&gt;&gt; Speaker 8: [LAUGH]
Me too.

180
00:08:57.770 --> 00:08:58.960
&gt;&gt; Scott Moss: That's it.

181
00:08:58.960 --> 00:09:03.000
Everybody sleeping, during lunch,
sometimes I'll leave the gym and

182
00:09:03.000 --> 00:09:06.716
open my computer right at the gym and
start working on something.

183
00:09:06.716 --> 00:09:08.917
[LAUGH] Just whatever I can.

184
00:09:08.917 --> 00:09:10.693
At a red light, I don't know.

185
00:09:10.693 --> 00:09:12.008
[LAUGH]
&gt;&gt; Speaker 3: At a red light?

186
00:09:12.008 --> 00:09:16.274
&gt;&gt; Scott Moss: [LAUGH]
Wherever I can.

187
00:09:16.274 --> 00:09:16.840
It's hard.

188
00:09:16.840 --> 00:09:18.064
You got to stay current these days.

189
00:09:18.064 --> 00:09:20.486
You never know.

190
00:09:20.486 --> 00:09:21.834
[LAUGH]

