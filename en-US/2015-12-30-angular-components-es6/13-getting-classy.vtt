WEBVTT

1
00:00:00.000 --> 00:00:03.991
[MUSIC]

2
00:00:03.991 --> 00:00:08.307
&gt;&gt; Scott Moss: Whereas use ES2015 classes.

3
00:00:08.307 --> 00:00:13.005
Highly controversial because
everything's functional now and

4
00:00:13.005 --> 00:00:17.540
classes are just like [SOUND]
nobody want's to do that anymore.

5
00:00:18.710 --> 00:00:19.984
I'm like bittersweet about it.

6
00:00:19.984 --> 00:00:21.143
It's like I don't know,

7
00:00:21.143 --> 00:00:24.950
I think they could have put more effort in
other features like array comprehensions.

8
00:00:24.950 --> 00:00:28.556
But this is what they wanted, classes,
so this is what we're gonna be using.

9
00:00:28.556 --> 00:00:31.861
They work very well with controllers,
and let's just be honest,

10
00:00:31.861 --> 00:00:34.820
[INAUDIBLE] isn't going
anywhere anytime soon.

11
00:00:34.820 --> 00:00:36.130
JavaScript is built on top of it, so

12
00:00:36.130 --> 00:00:38.856
it doesn't matter how functional you
wanna get, how much you to hate it.

13
00:00:38.856 --> 00:00:41.886
This is gonna be here for a while,
so if you are gonna use it,

14
00:00:41.886 --> 00:00:44.630
you might as well use it in
a pretty easy way like this.

15
00:00:44.630 --> 00:00:45.986
That's the way I think about it.

16
00:00:45.986 --> 00:00:49.940
So for our components controllers,
we will be using the class feature.

17
00:00:49.940 --> 00:00:53.567
So, I will just let the code do
the talking because it's pretty

18
00:00:53.567 --> 00:00:54.872
self-explanatory.

19
00:00:54.872 --> 00:00:59.431
So, let's say, we want to make
a constructor function called Car.

20
00:00:59.431 --> 00:01:01.940
You usually make a function declaration,
give it a name.

21
00:01:01.940 --> 00:01:05.474
Well, now I'm gonna say class Car and
use these brackets.

22
00:01:05.474 --> 00:01:07.680
Again, this is not an object.

23
00:01:07.680 --> 00:01:09.849
I know it looks like an object literal but
it's not.

24
00:01:09.849 --> 00:01:12.000
I don't know why they use these brackets.

25
00:01:12.000 --> 00:01:14.561
But no,
this is just a major class called Car and

26
00:01:14.561 --> 00:01:18.850
then I mean I use this keyword called
constructor right inside of it.

27
00:01:18.850 --> 00:01:22.322
And what that is,
this constructor is actually a functions,

28
00:01:22.322 --> 00:01:26.482
others look at where does this doesn't
look like a function definition.

29
00:01:26.482 --> 00:01:28.870
It actually looks like
I'm invoking a function.

30
00:01:28.870 --> 00:01:31.490
And then immediately put in
brackets underneath other.

31
00:01:31.490 --> 00:01:34.360
So looks kinda weird, we'll not talk
about the shortcut in the next one.

32
00:01:34.360 --> 00:01:39.202
But believe me this is a function,
this constructor function is the function

33
00:01:39.202 --> 00:01:42.900
that's gonna be called when
you run new on this class.

34
00:01:42.900 --> 00:01:47.689
So on the line below when I say,
myCar = new Car this is the function.

35
00:01:47.689 --> 00:01:50.267
I guess to run this is
constructor function and

36
00:01:50.267 --> 00:01:53.638
then I was passing in the stuff
this time maker this.maker,

37
00:01:53.638 --> 00:01:57.130
and then as far as like extensibility and
subclassing.

38
00:01:57.130 --> 00:01:59.394
It's pretty easy we use extends keyword,
so

39
00:01:59.394 --> 00:02:03.634
if you then using back room forever then
you're probably familiar with this right?

40
00:02:03.634 --> 00:02:05.350
You can extend your backbone models and

41
00:02:05.350 --> 00:02:08.290
stuff ,so were gonna say
class SUV extends Car.

42
00:02:08.290 --> 00:02:11.408
And now, all that's doing is the only
object that create on a prototype right?

43
00:02:11.408 --> 00:02:17.840
Color like car.call inside of
the classes and stuff like that.

44
00:02:17.840 --> 00:02:23.008
Again, we make our constructor and then
to make a reference to the parent class,

45
00:02:23.008 --> 00:02:27.796
we use the super keyword which is
a keyword only available inside of methods

46
00:02:27.796 --> 00:02:31.988
on a class, and it must be called
on the first line of that method.

47
00:02:31.988 --> 00:02:36.139
So if I were to put super after this,
it wouldn't work.

48
00:02:36.139 --> 00:02:37.130
That would be like, mm-mm.

49
00:02:37.130 --> 00:02:39.089
Not having it, not having it.

50
00:02:39.089 --> 00:02:43.632
So you have to put super first if at all,
if you want to you up at first and

51
00:02:43.632 --> 00:02:47.002
then I was like this are miles Eagles to
&gt;&gt; Speaker 2: Condition just to be

52
00:02:47.002 --> 00:02:48.809
the first line, what was the other one?

53
00:02:48.809 --> 00:02:51.830
&gt;&gt; Scott Moss: It has
to be the first line.

54
00:02:51.830 --> 00:02:55.090
First of all, you can't use
super unless you use extends.

55
00:02:55.090 --> 00:02:57.780
So if you don't use extends,
you can't use super, it will break.

56
00:02:57.780 --> 00:03:01.463
If you do use extends and
you want to use super,

57
00:03:01.463 --> 00:03:06.658
you can only be on the first line
of a method which is constructor or

58
00:03:06.658 --> 00:03:11.495
any other method you make on
a prototype it can only be there.

59
00:03:11.495 --> 00:03:15.375
And has to be the first thing, I need to
comment to stop it has to be the first

60
00:03:15.375 --> 00:03:20.090
thing that Java's your executes, it can't
be anything else, any other expressions.

61
00:03:22.800 --> 00:03:24.709
Which makes sense if you think about it,

62
00:03:24.709 --> 00:03:28.242
because you have some really crazy side
effects if you try to call the parent

63
00:03:28.242 --> 00:03:31.405
after you've already modified
the incoming arguments, right?

64
00:03:31.405 --> 00:03:32.640
You wouldn't get the same output, right?

65
00:03:32.640 --> 00:03:38.354
So, you don't want that.

66
00:03:38.354 --> 00:03:39.840
Any questions on classes?

67
00:03:39.840 --> 00:03:41.304
Except for this method shortcut.

68
00:03:41.304 --> 00:03:42.977
We literally about to
go over that right now.

69
00:03:46.200 --> 00:03:49.300
&gt;&gt; Scott Moss: So whenever you make
a constructor function or prototype,

70
00:03:49.300 --> 00:03:50.541
just use this instead.

71
00:03:50.541 --> 00:03:52.080
It's really legit.

72
00:03:52.080 --> 00:03:55.364
And we will be using this for controllers.

73
00:03:55.364 --> 00:03:57.320
Speaking of, I forgot one important part.

74
00:03:57.320 --> 00:04:00.091
So yeah, now is the function
gonna be called when we call new.

75
00:04:00.091 --> 00:04:02.485
But it's also the thing that's going
to handle dependency injection, right?

76
00:04:02.485 --> 00:04:06.139
Cuz controllers use dependency injection
where you inject scope or whatever.

77
00:04:06.139 --> 00:04:09.861
Whatever you would normally inject in
that function, it would go right here.

78
00:04:09.861 --> 00:04:11.770
So, this is where you
would put dollar scope.

79
00:04:11.770 --> 00:04:13.968
This is where you put dollars http or
whatever, right?

80
00:04:13.968 --> 00:04:14.820
You put it right here.

81
00:04:15.990 --> 00:04:19.241
&gt;&gt; Speaker 2: When you're extending,
do you duplicate that then?

82
00:04:19.241 --> 00:04:21.603
&gt;&gt; Scott Moss: Yeah, if you're extending
you have to do the same thing.

83
00:04:21.603 --> 00:04:26.204
I haven't got to the point where I'm
extending controllers yet but if you do,

84
00:04:26.204 --> 00:04:27.961
you have to do the same thing.

85
00:04:27.961 --> 00:04:31.230
We'll talk about injection and then how
to handle minification because you can't

86
00:04:31.230 --> 00:04:32.920
print a radio around that, it'll break.

