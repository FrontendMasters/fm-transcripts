WEBVTT

1
00:00:00.000 --> 00:00:04.059
[MUSIC]

2
00:00:04.059 --> 00:00:08.755
&gt;&gt; Scott Moss: We move on to
home which is what we imported

3
00:00:08.755 --> 00:00:13.070
here components/home/home.js.

4
00:00:13.070 --> 00:00:16.708
At the top of my file I have, I'm
importing this style so first thing I do.

5
00:00:16.708 --> 00:00:19.827
&gt;&gt; Speaker 2: [INAUDIBLE]!

6
00:00:19.827 --> 00:00:23.775
&gt;&gt; Scott Moss: Yeah,
because app.js is importing home.js and

7
00:00:23.775 --> 00:00:30.450
home.js is importing home.style, that's
when that gets loaded up, all right?

8
00:00:31.520 --> 00:00:34.260
And then again this is
the boilerplate that I was talking

9
00:00:34.260 --> 00:00:36.710
about of having to create
an angular module every component.

10
00:00:36.710 --> 00:00:42.310
I have to import angular again and
I was importing loadash and that stuff.

11
00:00:42.310 --> 00:00:45.120
I don't think I even using
this I don't even know why,

12
00:00:45.120 --> 00:00:49.650
I also made one tiny mistake here and

13
00:00:49.650 --> 00:00:54.730
I want to see somebody going to catch it
but i think nobody did, but there are some

14
00:00:54.730 --> 00:00:59.760
dependencies in app.js like uiRouter,
ngAnimate that are registered here.

15
00:00:59.760 --> 00:01:05.040
And if you use angular then you know
that it like, because I registered home

16
00:01:05.040 --> 00:01:08.720
as a sibling of these it also
has access to this stuff too.

17
00:01:08.720 --> 00:01:13.790
But only when app is loaded up,
when I go test home by itself without

18
00:01:13.790 --> 00:01:17.830
the app module, it'll break cuz it's like
I don't know what's the provider is.

19
00:01:17.830 --> 00:01:19.340
I don't know what urlRouterProvider is,

20
00:01:19.340 --> 00:01:22.890
you never told me without was
only app knows about that.

21
00:01:22.890 --> 00:01:26.200
So if I want to test this
isolated by itself it would work.

22
00:01:26.200 --> 00:01:28.500
So how do I get around that
I just do the same thing.

23
00:01:28.500 --> 00:01:30.444
I just go back to app.js.

24
00:01:30.444 --> 00:01:35.299
I'm not using ngAnimate now file but
I am using uiRouter,

25
00:01:35.299 --> 00:01:40.662
I copy that, I place it here and
I'll just put here, all right?

26
00:01:40.662 --> 00:01:45.253
And now it won't break when I run the test
because, now I know what stateProvider is,

27
00:01:45.253 --> 00:01:45.883
all right?

28
00:01:45.883 --> 00:01:48.098
&gt;&gt; Speaker 3: Wait, what?

29
00:01:48.098 --> 00:01:54.306
So you are importing uiRouter in app.js?

30
00:01:54.306 --> 00:01:55.213
&gt;&gt; Scott Moss: Yes.

31
00:01:55.213 --> 00:01:59.578
&gt;&gt; Speaker 3: And you're saying,
if you are going to test home.js.

32
00:01:59.578 --> 00:02:01.959
&gt;&gt; Scott Moss: Right.
&gt;&gt; Speaker 3: It would break because you

33
00:02:01.959 --> 00:02:06.947
didn't have uiRouter imported into
that module, is there a way to

34
00:02:06.947 --> 00:02:11.935
conditionally do that or
is this gonna create any duplicate work or

35
00:02:11.935 --> 00:02:17.102
performance because over time it and
enterprise that could become,

36
00:02:17.102 --> 00:02:20.782
you have a lot of additional
import statements.

37
00:02:20.782 --> 00:02:25.164
&gt;&gt; Scott Moss: Yeah, so
I say you have a lot of duplicate code so

38
00:02:25.164 --> 00:02:27.801
you can still use a Web Pack.

39
00:02:27.801 --> 00:02:34.220
You can't conditionally use
the import keyword, right?

40
00:02:34.220 --> 00:02:37.540
You can't say if this import this,
that's against the ES6 rules but

41
00:02:37.540 --> 00:02:40.647
there are some hacky ways around
depending on what you are using.

42
00:02:40.647 --> 00:02:41.966
Yeah, go ahead.

43
00:02:41.966 --> 00:02:42.637
&gt;&gt; Speaker 4: I'm sorry,

44
00:02:42.637 --> 00:02:45.998
knowing performance impact that
would be at compiling, right?

45
00:02:45.998 --> 00:02:47.422
So there's no end user.

46
00:02:47.422 --> 00:02:49.420
&gt;&gt; Scott Moss: No,
no it's not going to do it twice.

47
00:02:49.420 --> 00:02:51.570
Webpack handles circular dependencies.

48
00:02:51.570 --> 00:02:54.030
It's not going to see
angular in ten files and

49
00:02:54.030 --> 00:02:55.347
load it ten times, it's the same angular.

50
00:02:55.347 --> 00:03:01.999
That is irrelevant,
to read that it's minimal, right?

51
00:03:01.999 --> 00:03:05.444
So no that's not to cause a problem and
then internally when you

52
00:03:05.444 --> 00:03:09.539
pass in a module into the angular array
it also handles them separately to so

53
00:03:09.539 --> 00:03:11.110
it's not gonna do it twice.

54
00:03:11.110 --> 00:03:14.354
So you're still fine, I thought you
were talking as far as like having to

55
00:03:14.354 --> 00:03:17.346
write the same code over again as
far as when they got application.

56
00:03:17.346 --> 00:03:18.082
&gt;&gt; Speaker 4: Yeah it sucks.

57
00:03:18.082 --> 00:03:21.488
&gt;&gt; Scott Moss: Yeah, that sucks but as far
as it like being compiled more than once,

58
00:03:21.488 --> 00:03:23.570
no it will not be compiled more than once.

59
00:03:23.570 --> 00:03:24.910
It handles itself, yes?

60
00:03:24.910 --> 00:03:28.919
&gt;&gt; Speaker 4: So if you had a file like
comment and and you import a comment,

61
00:03:28.919 --> 00:03:34.359
would it import all the sub and you have
100 imports in there, would that work?

62
00:03:35.600 --> 00:03:37.994
&gt;&gt; Scott Moss: Are we talking
about is 2015 imports or

63
00:03:37.994 --> 00:03:41.200
are we talking about common
like angular modules?

64
00:03:41.200 --> 00:03:43.034
&gt;&gt; Speaker 4: I'm saying,
up here at the top but

65
00:03:43.034 --> 00:03:47.312
you say import comment instead of
having to write 100 import statements.

66
00:03:47.312 --> 00:03:51.412
&gt;&gt; Scott Moss: Yeah, you can do that if
common had some stuff in it, yeah, yeah,

67
00:03:51.412 --> 00:03:53.860
yeah, yeah you can do that, for sure.

68
00:03:53.860 --> 00:03:56.505
&gt;&gt; Speaker 5: I think the disadvantages
to doing it that way would be that you're

69
00:03:56.505 --> 00:03:59.304
kind of importing the kitchen sink for
every one for your components.

70
00:03:59.304 --> 00:04:00.208
&gt;&gt; Scott Moss: Yeah.

71
00:04:00.208 --> 00:04:04.100
&gt;&gt; Speaker 5: When if this component
really only needs uiRouter and

72
00:04:04.100 --> 00:04:09.310
not like Animate or any of the other
ng plug-ins you might be using.

73
00:04:09.310 --> 00:04:13.290
Then for testing purposes,
you're testing an isolation.

74
00:04:13.290 --> 00:04:18.290
You would have everything there when
really your model is only depending on one

75
00:04:18.290 --> 00:04:19.856
or two or-
&gt;&gt; Scott Moss: Exactly, yeah.

76
00:04:19.856 --> 00:04:22.905
Cuz you start importing like you said the
kitchen sink then you don't really have

77
00:04:22.905 --> 00:04:26.480
components anymore because now I have and
if I take that component like I'm gonna

78
00:04:26.480 --> 00:04:30.340
use it over here now it's not gonna work
because it needs the kitchine sink,right?

79
00:04:30.340 --> 00:04:32.500
This thing doesn't, so it's still a fire.

80
00:04:32.500 --> 00:04:33.779
&gt;&gt; Speaker 5: Yeah, that make sense.

81
00:04:33.779 --> 00:04:36.770
&gt;&gt; Scott Moss: So the hacky ways
around conditionally importing is one,

82
00:04:36.770 --> 00:04:39.120
because it's just common.js.

83
00:04:39.120 --> 00:04:45.280
And we can't say something,
if true Import, we can't do that, it

84
00:04:45.280 --> 00:04:49.690
will compile babbled like uh-uh, nope not
gonna happen but we can just do require.

85
00:04:49.690 --> 00:04:53.690
Look at that it works the same way
because import compiles down to require,

86
00:04:53.690 --> 00:04:55.150
require you can do conditionally.

87
00:04:55.150 --> 00:05:00.115
So you can get away with that in
Web Pack and in JSPM you can do

88
00:05:00.115 --> 00:05:07.300
system.import which is what
they're imports compiled onto and

89
00:05:07.300 --> 00:05:11.910
you give it a path and it's a promise and
you get the file asynchronously.

90
00:05:11.910 --> 00:05:15.080
So there's a ways to get around
conditionally importing things.

91
00:05:15.080 --> 00:05:19.080
You just cannot use the import
keyword in a conditional statement.

92
00:05:19.080 --> 00:05:20.520
So it makes sense, yes?

93
00:05:20.520 --> 00:05:21.856
&gt;&gt; Speaker 5: Daniel Evans asking for

94
00:05:21.856 --> 00:05:25.990
clarification on how home.name
got into app.js from this file?

95
00:05:25.990 --> 00:05:27.750
&gt;&gt; Scott Moss: Good question,
so we're about to get there.

96
00:05:27.750 --> 00:05:28.296
&gt;&gt; Speaker 5: Awesome, sorry.

97
00:05:28.296 --> 00:05:33.208
&gt;&gt; Scott Moss: Sweet, so here we import
the style everybody clear on why you have

98
00:05:33.208 --> 00:05:35.901
the uiRouter here, clear on that?

99
00:05:35.901 --> 00:05:41.338
Okay, and then what I did was don't worry
about this const we're going to talk about

100
00:05:41.338 --> 00:05:46.640
that later at the launch but just think of
this is variable this is just a variable.

101
00:05:46.640 --> 00:05:51.360
So what I'm saying here is I'm saying
export a variable called home, right?

102
00:05:51.360 --> 00:05:54.640
So by doing that, remember we talked
about modules that's the same thing.

103
00:05:55.700 --> 00:06:00.460
First, we're exporting something and
because it's an assignment expression,

104
00:06:00.460 --> 00:06:03.810
we're gonna export the actual name
of the variable name which is home.

105
00:06:03.810 --> 00:06:10.820
So that's how this module right here
called home got into this file.

106
00:06:12.180 --> 00:06:17.142
Because we have a home which
is referencing this home

107
00:06:17.142 --> 00:06:22.234
right here whose value is
an angular module, right?

108
00:06:22.234 --> 00:06:24.390
And all angular modules have
a .name property on them.

109
00:06:25.580 --> 00:06:27.708
That's how they got to app.js so

110
00:06:27.708 --> 00:06:32.270
export const home = angular
module put the home in there.

111
00:06:32.270 --> 00:06:33.330
We have our config.

112
00:06:35.410 --> 00:06:39.190
We got our template URL,
controller all this cool stuff, right?

113
00:06:39.190 --> 00:06:41.790
So this is how we normally
rewrite angular, right?

114
00:06:41.790 --> 00:06:44.920
We'd have a config, we have our
state provider or route provider or

115
00:06:44.920 --> 00:06:49.350
whatever you're using your doing
something like this maybe do a template

116
00:06:49.350 --> 00:06:51.760
URL probably or if you're caching it.

117
00:06:51.760 --> 00:06:54.990
So this is one feature that you probably
haven't seen this is a template

118
00:06:54.990 --> 00:06:55.900
stream in the ES 2015.

119
00:06:55.900 --> 00:07:00.130
So I used the back ticks I can
now have multi line strings

120
00:07:01.920 --> 00:07:04.120
in JavaScript now does
using the back ticks.

121
00:07:04.120 --> 00:07:08.040
So I don't have to use this anymore and do
you know it starts escaping characters or

122
00:07:08.040 --> 00:07:13.460
stuff like that I can use back ticks and
a multi-line and I can do interrupt.

123
00:07:13.460 --> 00:07:17.040
So like if I had,
actually I just show you on babble.

124
00:07:18.370 --> 00:07:19.910
So check this out.

125
00:07:19.910 --> 00:07:24.410
So if I had a variable called name,
and it was moose,

126
00:07:24.410 --> 00:07:27.760
that was a first in thing came in my head,
I don't know why, and

127
00:07:27.760 --> 00:07:33.810
I could say something like this,
console.log, back tic, back tic.

128
00:07:33.810 --> 00:07:41.260
Hi my name is and then I can say a $ {},
see the user bracket's everything name.

129
00:07:42.320 --> 00:07:47.180
And that will log,
hi my name is moose, all right.

130
00:07:47.180 --> 00:07:51.532
So, by putting stuff between the dollar
sign brackets, I can do interpretation.

131
00:07:54.696 --> 00:07:58.440
&gt;&gt; Scott Moss: So back ticks or
multi line and they allow interpellations.

132
00:07:58.440 --> 00:08:00.040
So any valid JavaScript error.

133
00:08:00.040 --> 00:08:07.590
I can say, 1 + 1 anything or 1 +1, right?

134
00:08:07.590 --> 00:08:09.770
&gt;&gt; Speaker 6: Those probably all
were compiled in JavaScript anyhow.

135
00:08:10.810 --> 00:08:16.185
&gt;&gt; Speaker 6: Those probably a would
compile on Java Script anyhow, 1 + =!

136
00:08:16.185 --> 00:08:19.400
&gt;&gt; Scott Moss: Yeah [LAUGH] So,
that's string interpolation.

137
00:08:19.400 --> 00:08:23.315
So, it's really nice to be able
to write those templates now.

138
00:08:23.315 --> 00:08:25.160
So now it's, yeah, a small template.

139
00:08:25.160 --> 00:08:26.860
I can just write it in line now,
not a big deal.

140
00:08:26.860 --> 00:08:29.174
So that's why I wrote in line,
cuz I can do that now.

141
00:08:29.174 --> 00:08:33.017
Whereas before you have an array and
you call like .split, right?

142
00:08:33.017 --> 00:08:34.771
And this is like, this is stupid.

143
00:08:34.771 --> 00:08:35.696
&gt;&gt; Speaker 6: [LAUGH]
&gt;&gt; Scott Moss: So

144
00:08:35.696 --> 00:08:37.379
now you know how to do that.

145
00:08:37.379 --> 00:08:39.550
And then of course you put
your controller there, right?

146
00:08:39.550 --> 00:08:41.630
Or you do select controller as,
or whatever you do.

147
00:08:41.630 --> 00:08:45.120
This is how you normally write it and
then you have your controller, right?

148
00:08:45.120 --> 00:08:47.732
This seems like something what
we normally do with angular.

149
00:08:47.732 --> 00:08:51.090
The same pattern, the config,
the controller and the view, right?

150
00:08:51.090 --> 00:08:53.508
So this is the last time you're gonna see
this, we're not gonna do this anymore.

151
00:08:53.508 --> 00:08:55.281
This is gone, scarred.

152
00:08:55.281 --> 00:09:00.050
I just wrote this so you guys are good you
have a some familiarity what's going on.

153
00:09:01.410 --> 00:09:03.680
Cool, in the home.style there some style.

154
00:09:03.680 --> 00:09:06.810
If anybody think of style stuff
we can talk about it later but

155
00:09:06.810 --> 00:09:07.910
there's a lot of stuff going on on.

156
00:09:07.910 --> 00:09:11.420
So a little more about I guess
in what context this import

157
00:09:11.420 --> 00:09:14.900
allows me to import other stylus
files into this file, and in fact,

158
00:09:14.900 --> 00:09:19.200
what I'm doing here is I'm importing a
folder called styles, which is over here,

159
00:09:19.200 --> 00:09:25.010
that has other files in it and so I'm
importing variables and stuff like that.

160
00:09:25.010 --> 00:09:26.640
So, it's pretty crazy.

161
00:09:29.700 --> 00:09:32.184
Cool and let me see, is that it for this?

162
00:09:32.184 --> 00:09:34.696
Yeah, and that's how you get.

163
00:09:37.680 --> 00:09:44.350
&gt;&gt; Scott Moss: This or I guess it doesn't
work anymore cuz they close it down.

164
00:09:44.350 --> 00:09:46.975
&gt;&gt; Speaker 7: Yeah,
I get that all the time too though.

165
00:09:46.975 --> 00:09:48.731
[LAUGH]
&gt;&gt; Scott Moss: Cool so

166
00:09:48.731 --> 00:09:53.735
any questions on this solution so far and
what we did, how we got here anything.

167
00:09:53.735 --> 00:09:58.117
&gt;&gt; Speaker 8: So what was the components
file and why don't we import that and

168
00:09:58.117 --> 00:10:01.463
then import that in the app.js
&gt;&gt; Scott Moss: Good question, so we're

169
00:10:01.463 --> 00:10:05.197
gonna talk about what components are and
what are the components of a component and

170
00:10:05.197 --> 00:10:08.150
why we have a components folder and
a components file.

171
00:10:08.150 --> 00:10:09.034
But it's there for

172
00:10:09.034 --> 00:10:12.513
reason we won't be using it but I put it
here just in case you want to use it but

173
00:10:12.513 --> 00:10:15.459
we won't be using it but
you will talk about that at the launch.

174
00:10:15.459 --> 00:10:20.876
&gt;&gt; Speaker 4: Are just to get a kind
of idea of that angular usage here,

175
00:10:20.876 --> 00:10:24.119
are we looking towards to at all?

176
00:10:24.119 --> 00:10:28.991
&gt;&gt; Scott Moss: Yes, the way we're writing
it right now is exactly how two is gonna

177
00:10:28.991 --> 00:10:30.710
be used
&gt;&gt; Speaker 4: Okay.

178
00:10:30.710 --> 00:10:31.770
&gt;&gt; Scott Moss: Not the same syntax.

179
00:10:31.770 --> 00:10:32.670
&gt;&gt; Speaker 4: Right.
&gt;&gt; Scott Moss: We are not

180
00:10:32.670 --> 00:10:33.590
using decorators.

181
00:10:33.590 --> 00:10:38.010
We can I have them enabled, but
we're not gonna be using them.

182
00:10:38.010 --> 00:10:40.920
But the methodology behind it as
far as thinking in components,

183
00:10:40.920 --> 00:10:45.530
as far as thinking of things that are
completely isolated and encapsulated from

184
00:10:45.530 --> 00:10:48.320
the rest of your application it
can be reused like little blocks.

185
00:10:48.320 --> 00:10:52.460
I think that's the hardest part of it and
in fact we're dealing with Angular 2 or

186
00:10:52.460 --> 00:10:54.820
web components, or
even React and that might be it.

187
00:10:54.820 --> 00:10:57.870
So the fact that you start thinking
like that, will be a lot easier and

188
00:10:57.870 --> 00:10:59.220
then when you move over to Angular 2,

189
00:10:59.220 --> 00:11:03.210
you realize that about 40% of the code
that we wrote is gonna be gone.

190
00:11:03.210 --> 00:11:05.308
So then you like-
&gt;&gt; Speaker 4: Well, the reason I asked as

191
00:11:05.308 --> 00:11:08.645
I noticed in the home controller
you're hitting scope correctly and

192
00:11:08.645 --> 00:11:10.130
I'm wondering are we-
&gt;&gt; Scott Moss: We're not

193
00:11:10.130 --> 00:11:10.739
gonna do that more.

194
00:11:10.739 --> 00:11:14.390
I did as an example to show you
what you probably used to doing.

195
00:11:14.390 --> 00:11:16.490
I don't use $scope,
I just use Controller As, right?

196
00:11:16.490 --> 00:11:18.040
So yeah, we won't be doing that.

197
00:11:18.040 --> 00:11:18.630
Good observation.

