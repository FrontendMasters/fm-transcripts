WEBVTT

1
00:00:00.000 --> 00:00:03.786
[MUSIC]

2
00:00:03.786 --> 00:00:07.720
&gt;&gt; Scott Moss: So the objective was to
eventually have something like this.

3
00:00:07.720 --> 00:00:10.545
So if you were the observant person,

4
00:00:10.545 --> 00:00:15.209
you might have noticed I have
like this hash up here, right?

5
00:00:15.209 --> 00:00:16.391
So if you've ever used Angular,

6
00:00:16.391 --> 00:00:18.390
then you know there's some
router stuff going on here.

7
00:00:18.390 --> 00:00:20.696
So I don't know if
anybody noticed that but

8
00:00:20.696 --> 00:00:23.522
that definitely means I am
using router somewhere.

9
00:00:23.522 --> 00:00:26.500
So that was a hint,
I don't know if you picked that up.

10
00:00:26.500 --> 00:00:30.300
Great, so you should have this, we have
some styles and some stuff going on here.

11
00:00:30.300 --> 00:00:31.600
So how did we get to this?

12
00:00:31.600 --> 00:00:34.170
So let's check it out,
let's look at the code.

13
00:00:34.170 --> 00:00:36.660
So you can check out
step-2-fix to follow along or

14
00:00:36.660 --> 00:00:39.670
you can just look up here,
but let's look at it.

15
00:00:40.930 --> 00:00:43.830
So let's start in app.js.

16
00:00:43.830 --> 00:00:47.784
I heavily commented this bad boy out cuz I
knew there's some weird stuff going on in

17
00:00:47.784 --> 00:00:50.080
here and
I wanted to explain it as much as I can.

18
00:00:50.080 --> 00:00:53.610
So if you look through this solution
you'll see tons of comments

19
00:00:53.610 --> 00:00:55.650
of what's going on as we
walk through this code.

20
00:00:55.650 --> 00:00:58.960
So the first thing I did was
[COUGH] I imported normalize.css.

21
00:00:58.960 --> 00:01:00.300
So I didn't tell you how to do this.

22
00:01:00.300 --> 00:01:03.120
I didn't tell you that you didn't have
to put a variable in the from keyword.

23
00:01:03.120 --> 00:01:06.200
So if you found that out, good for
you, because you're right,

24
00:01:06.200 --> 00:01:07.350
you don't have to do this.

25
00:01:07.350 --> 00:01:10.560
And the reason we don't have to do it is
because if we read this comment above,

26
00:01:11.560 --> 00:01:17.000
what happens is with
the style loader its job

27
00:01:17.000 --> 00:01:22.370
is to take a style, a CSS file,
and place it in the head.

28
00:01:22.370 --> 00:01:25.598
All right, that's what it does, it places
in the head, and if you don't believe me,

29
00:01:25.598 --> 00:01:26.230
let me show you.

30
00:01:26.230 --> 00:01:28.210
Open this up, the console,

31
00:01:28.210 --> 00:01:31.130
I go to elements, I'll look in the head,
look all this styles.

32
00:01:31.130 --> 00:01:36.372
So here is my code which means
this should be normalized CSS.

33
00:01:36.372 --> 00:01:39.951
There it is there's normalize CSS,
it placed all that in the head for

34
00:01:39.951 --> 00:01:41.753
me in the order that I imported it.

35
00:01:41.753 --> 00:01:49.370
So that's why we don't need
a variable followed by the import.

36
00:01:49.370 --> 00:01:51.868
And we also don't need
the from keyword either.

37
00:01:51.868 --> 00:01:55.810
So we can just exclude those two.

38
00:01:55.810 --> 00:01:56.383
Now, for

39
00:01:56.383 --> 00:02:01.100
whatever reason you wanted to just
import that CSS file as just raw text.

40
00:02:01.100 --> 00:02:04.940
You can do that as well, you would just
have to set up the loader for that.

41
00:02:04.940 --> 00:02:08.490
So we have this other plug in called raw
which allows you to import raw text.

42
00:02:08.490 --> 00:02:10.744
You would just have to place
the stuff in there as well so

43
00:02:10.744 --> 00:02:11.970
you can import it as raw text.

44
00:02:11.970 --> 00:02:15.646
But we didn't want that, we wanted to
put in the head cuz we're lazy and

45
00:02:15.646 --> 00:02:17.443
we don't want to write a link tag.

46
00:02:17.443 --> 00:02:18.404
All right, yes?

47
00:02:18.404 --> 00:02:20.960
&gt;&gt; Speaker 2: So wait, Scott,
can you walk through a little bit

48
00:02:20.960 --> 00:02:24.130
slower how that CSS is
getting into the head?

49
00:02:24.130 --> 00:02:27.300
What is signaling that in the webpack
config, or in the Gulp file?

50
00:02:27.300 --> 00:02:27.840
&gt;&gt; Scott Moss: Yeah for sure,

51
00:02:27.840 --> 00:02:30.840
so how is this CSS actually
getting in the head right?

52
00:02:30.840 --> 00:02:34.080
What's doing this, whose job is it,
what's going on, right?

53
00:02:34.080 --> 00:02:37.120
So this is not ES2015 that's doing this.

54
00:02:37.120 --> 00:02:42.300
So let's start with this, this is ES2015
syntax as far as importing it, right?

55
00:02:42.300 --> 00:02:44.738
That's all that's happening with ES2015.

56
00:02:44.738 --> 00:02:49.423
And then I'm importing because we know
that this is going to compiled down to

57
00:02:49.423 --> 00:02:53.620
common JS and I didn't put a dot
forward slash in front of it.

58
00:02:53.620 --> 00:02:57.360
That means I'm importing something
from the node modules folder.

59
00:02:57.360 --> 00:03:02.650
It just so happens that the name of
this something has a .css after it.

60
00:03:02.650 --> 00:03:03.780
This is really confusing,

61
00:03:03.780 --> 00:03:07.330
I actually put this specific
module in here to confuse people.

62
00:03:07.330 --> 00:03:12.132
Because you're gonna immediately
think that it's a file because

63
00:03:12.132 --> 00:03:16.570
it's called .css but
it's not, it's a node module.

64
00:03:16.570 --> 00:03:19.113
So if we go look at the modules folder,

65
00:03:19.113 --> 00:03:22.320
there is a node module
called normalize.css.

66
00:03:22.320 --> 00:03:24.625
That's the name of the folder,
it's really confusing.

67
00:03:24.625 --> 00:03:26.751
Where is that at?

68
00:03:29.848 --> 00:03:33.160
&gt;&gt; Scott Moss: There it is right there,
normalize.css.

69
00:03:33.160 --> 00:03:36.190
See that's the name of it,
they did they did that just to trick us.

70
00:03:36.190 --> 00:03:39.170
So I'm importing that node module.

71
00:03:39.170 --> 00:03:41.930
&gt;&gt; Speaker 3: Wait, so they were just
sitting there thinking we're gonna name

72
00:03:41.930 --> 00:03:42.800
it to trick you?

73
00:03:42.800 --> 00:03:46.363
&gt;&gt; Scott Moss: No, no they did it so
you'd know specifically it's CSS.

74
00:03:46.363 --> 00:03:49.405
And it makes sense because
if you think like, wait npm,

75
00:03:49.405 --> 00:03:51.230
why is there a CSS package on npm?

76
00:03:51.230 --> 00:03:54.143
So, it made sense that they
called it normalize.css.

77
00:03:54.143 --> 00:03:58.413
But it's really confusing when you're
doing this cuz you think you're importing

78
00:03:58.413 --> 00:04:00.432
a CSS file, which eventually you are.

79
00:04:00.432 --> 00:04:03.610
But you're actually importing a module
that references the CSS file.

80
00:04:03.610 --> 00:04:05.380
So, that's a very important detail there.

81
00:04:05.380 --> 00:04:10.789
So we're importing a module called
normalize.css, which if you go look at

82
00:04:10.789 --> 00:04:16.140
its package.json, it's pointing
to a normalize.css file, yes?

83
00:04:16.140 --> 00:04:17.090
&gt;&gt; Speaker 4: Just a quick question, so

84
00:04:17.090 --> 00:04:21.060
if you want to use some other CSS
file that they didn't publish to npm.

85
00:04:21.060 --> 00:04:25.790
Do you normally wrap that in a module and
then try to do it this way?

86
00:04:25.790 --> 00:04:28.250
&gt;&gt; Scott Moss: Nope, you do exactly
like what we did on line six and

87
00:04:28.250 --> 00:04:30.860
we'll get there in a minute.

88
00:04:30.860 --> 00:04:33.300
So that's how that's happening,
we're importing a module.

89
00:04:33.300 --> 00:04:36.440
So if we're clear on that, then I'll walk
through how this is getting in the head.

90
00:04:36.440 --> 00:04:37.564
So we're importing a module,

91
00:04:37.564 --> 00:04:42.000
which if you go look at this module's
package.json just points to a CSS file.

92
00:04:42.000 --> 00:04:47.330
So now we have a CSS file and
and it's extension is .css.

93
00:04:47.330 --> 00:04:51.961
So if we go look in the webpack.config,
we have a loader that says test

94
00:04:51.961 --> 00:04:56.970
anything with an extension .css
which is the normalize.css file.

95
00:04:56.970 --> 00:05:00.290
So it's like okay I found one,
what should I do with it?

96
00:05:00.290 --> 00:05:04.360
First, run it through the CSS loader,
which, like I said,

97
00:05:04.360 --> 00:05:07.410
normalizes all the URLs and
the paths, if any.

98
00:05:07.410 --> 00:05:08.680
And then, after that's done,

99
00:05:08.680 --> 00:05:12.190
run it through the style loader, which
does the job of placing it in the head.

100
00:05:12.190 --> 00:05:14.610
That's what the style loader does.

101
00:05:14.610 --> 00:05:16.380
So the style loader will place
it in the header for us.

102
00:05:16.380 --> 00:05:19.170
If I got rid of the style loader,
it will not place it in the head.

103
00:05:20.180 --> 00:05:23.600
So that's what the webpack is doing that,
JSPM does this as well.

104
00:05:23.600 --> 00:05:27.680
The syntax for this is a little different,
but it also does this.

105
00:05:27.680 --> 00:05:30.380
So that's what's happening
on my import normalize.css.

106
00:05:30.380 --> 00:05:34.642
Now, a little different thing is
happening when I import app.styl.

107
00:05:34.642 --> 00:05:38.490
So app.styl is a stylus file.

108
00:05:38.490 --> 00:05:40.628
So we also eventually want it in the head,
but

109
00:05:40.628 --> 00:05:42.810
at first we have to convert from stylus.

110
00:05:42.810 --> 00:05:46.030
So I just made a different loader that
does the exact same thing as this.

111
00:05:46.030 --> 00:05:49.540
But first converts it from
stylus using a stylus loader.

112
00:05:49.540 --> 00:05:52.686
&gt;&gt; Speaker 2: And this loader is what
knows to put it in the head, webpack?

113
00:05:52.686 --> 00:05:57.062
&gt;&gt; Scott Moss: Yes, yep, so if you were
to look at the documentation for that.

114
00:05:57.062 --> 00:06:00.837
If you just Google style-loader,
it will, that's exactly what it does.

115
00:06:00.837 --> 00:06:04.910
It's like, I take a CSS file,
I stick it in the head, yes?

116
00:06:04.910 --> 00:06:07.010
&gt;&gt; Speaker 4: Do they
read in reverse order?

117
00:06:07.010 --> 00:06:08.170
&gt;&gt; Scott Moss: They read
from right to left.

118
00:06:09.570 --> 00:06:12.290
So it's gonna go here first,
then here, then here.

119
00:06:14.990 --> 00:06:20.907
So convert the stylus to CSS, normalize
the paths and stuff, place it in the head.

120
00:06:20.907 --> 00:06:26.521
That all happens just by saying import.

121
00:06:26.521 --> 00:06:30.596
Right, isn't that trippy,
I was like, wait, what?

122
00:06:30.596 --> 00:06:31.975
&gt;&gt; Students: [LAUGH]
&gt;&gt; Scott Moss: You know

123
00:06:31.975 --> 00:06:34.722
how much stuff you have to write in
Gulp to do that, you know what I mean?

124
00:06:34.722 --> 00:06:37.783
Like if you've ever written CSS
preprocessing code in a build task,

125
00:06:37.783 --> 00:06:40.800
then you know that you got
to write some code for that.

126
00:06:40.800 --> 00:06:44.670
I mean that was easy,
that was free almost, right, it was free.

127
00:06:46.010 --> 00:06:48.010
So any questions on how this
stuff happen in a head.

128
00:06:48.010 --> 00:06:51.110
Or any question why I put this first and
before anything else?

129
00:06:53.160 --> 00:06:57.585
So with use of webpack, cuz it's common
JS, all these imports are synchronous.

130
00:06:57.585 --> 00:07:03.380
JSPM handles imports asynchronously, so
it doesn't matter how you import them,

131
00:07:03.380 --> 00:07:05.110
they're gonna come at
whatever order they want.

132
00:07:05.110 --> 00:07:08.513
This is another reason why I decided not
to use JSPM, cuz explaining that and

133
00:07:08.513 --> 00:07:12.040
having to deal with the nuances will be
really difficult during the workshop.

134
00:07:12.040 --> 00:07:15.240
So webpack, everything is synchronous so
we're guaranteed to have normalize.css

135
00:07:15.240 --> 00:07:18.780
loaded up and done before the next
line is executed, which is great.

136
00:07:18.780 --> 00:07:22.890
So that means now I can figure out
when I need to load up my CSS.

137
00:07:22.890 --> 00:07:26.390
You can imagine if I was using something
else that was asynchronous, I would

138
00:07:26.390 --> 00:07:30.894
not be guaranteed that normalize.css
will load up before my app.style would,

139
00:07:30.894 --> 00:07:33.332
which would probably cause
some problems with CSS.

140
00:07:33.332 --> 00:07:36.120
So you have to like write a directive,
that like waits,

141
00:07:36.120 --> 00:07:38.520
like it's really crazy, I've done it.

142
00:07:38.520 --> 00:07:41.470
So this is synchronous, so
just like you would in a link tag,

143
00:07:41.470 --> 00:07:43.600
you would put this normalize.css first.

144
00:07:43.600 --> 00:07:47.310
Cuz this is the CSS that's gonna
normalize the styles on all the browsers.

145
00:07:47.310 --> 00:07:51.230
And then we load up our styles,
same thing, all right.

146
00:07:51.230 --> 00:07:55.820
&gt;&gt; Speaker 2: A question from Horatio H.,
if we had another route, what would

147
00:07:55.820 --> 00:07:59.950
happen if we changed from the home route,
would it delete the style from home.

148
00:07:59.950 --> 00:08:01.750
&gt;&gt; Scott Moss: No it's going
to stay in the head forever.

149
00:08:01.750 --> 00:08:03.683
It's never going to remove it,
good question.

150
00:08:03.683 --> 00:08:07.744
&gt;&gt; Speaker 6: Unless the route
is not a child right?

151
00:08:07.744 --> 00:08:09.268
&gt;&gt; Scott Moss: Unless
the route is not a child.

152
00:08:09.268 --> 00:08:12.221
&gt;&gt; Speaker 6: So
if it's a sibling to the route, so

153
00:08:12.221 --> 00:08:16.812
it's on the same level and
not the child or a nested view?

154
00:08:16.812 --> 00:08:17.567
[COUGH]
&gt;&gt; Scott Moss: No,

155
00:08:17.567 --> 00:08:22.130
it's still never ever moving, it's never
gonna remove the stuff from the head ever.

156
00:08:22.130 --> 00:08:24.680
And in fact they might put it there twice.

157
00:08:24.680 --> 00:08:29.795
So if the app.js, if there was another
parent above app.js that required or

158
00:08:29.795 --> 00:08:31.142
imported app.js.

159
00:08:31.142 --> 00:08:34.303
And then there was a sibling of that
parent that also imported app.js.

160
00:08:34.303 --> 00:08:37.420
That means the import for
app.style and the import for

161
00:08:37.420 --> 00:08:39.665
nomalize.css is gonna happen twice.

162
00:08:39.665 --> 00:08:41.010
So they both will be in there twice.

163
00:08:41.010 --> 00:08:42.040
&gt;&gt; Speaker 6: So you need to be
mindful of that [CROSSTALK].

164
00:08:42.040 --> 00:08:45.080
&gt;&gt; Scott Moss: You have to
be mindful of that, exactly.

165
00:08:45.080 --> 00:08:47.370
Yes, so it'll never remove it, but
it will add it more than once.

166
00:08:47.370 --> 00:08:48.060
&gt;&gt; Speaker 6: Okay.

167
00:08:48.060 --> 00:08:49.535
&gt;&gt; Scott Moss: Yeah.

168
00:08:49.535 --> 00:08:52.368
&gt;&gt; Speaker 6: Is that,
sorry to get off track, but JSPM,

169
00:08:52.368 --> 00:08:54.523
is that why it's asynchronous?

170
00:08:54.523 --> 00:08:55.390
&gt;&gt; Scott Moss: Exactly.

171
00:08:55.390 --> 00:08:57.680
&gt;&gt; Speaker 6: To be able to handle.

172
00:08:57.680 --> 00:09:00.065
&gt;&gt; Scott Moss: Yep, that's exactly
right and that's what the spec is.

173
00:09:00.065 --> 00:09:03.740
It's supposedly asynchronous, but
packages, like I said, it's common JS,

174
00:09:03.740 --> 00:09:04.993
it's caching this stuff.

175
00:09:04.993 --> 00:09:05.493
&gt;&gt; Speaker 6: Okay.

176
00:09:07.620 --> 00:09:09.552
&gt;&gt; Scott Moss: Cool, so
that's how this stuff got loaded.

177
00:09:09.552 --> 00:09:12.799
And I loaded before the JavaScript because
I want the CSS to be there before my

178
00:09:12.799 --> 00:09:13.530
JavaScript is.

179
00:09:13.530 --> 00:09:16.843
I don't want my CSS waiting on Angular
to come in before it loads up just like

180
00:09:16.843 --> 00:09:18.223
you would in the index.html.

181
00:09:18.223 --> 00:09:19.249
So that's why I loaded it first.

182
00:09:20.290 --> 00:09:25.870
All right, so then down below, these
are just common JS modules here, right?

183
00:09:25.870 --> 00:09:28.500
So we went over this,
you can name them whatever you want and

184
00:09:28.500 --> 00:09:31.120
you import them from
whatever name they are.

185
00:09:31.120 --> 00:09:35.509
So import angular from angular,
uiRouter from ui-router and

186
00:09:35.509 --> 00:09:38.660
ngAnimate from angular-animate.

187
00:09:38.660 --> 00:09:41.630
I'm curious, did anybody log these and
see what the values were,

188
00:09:41.630 --> 00:09:45.380
when they imported these
auxiliary modules?

189
00:09:45.380 --> 00:09:47.900
Because if you console log angular,
then you know it's an object,

190
00:09:47.900 --> 00:09:48.960
it's an angular object.

191
00:09:48.960 --> 00:09:50.880
But these two are not objects.

192
00:09:50.880 --> 00:09:52.300
Does anybody know what they are?

193
00:09:52.300 --> 00:09:54.890
&gt;&gt; Speaker 7: They gotta be strings
if they're used in the conclusion.

194
00:09:54.890 --> 00:09:57.940
&gt;&gt; Scott Moss: Exactly,
very observant, they're just strings.

195
00:09:57.940 --> 00:10:00.970
That's how angular conventions are.

196
00:10:00.970 --> 00:10:03.390
What they do is instead
of exporting the module,

197
00:10:03.390 --> 00:10:05.210
they export the name of the module.

198
00:10:05.210 --> 00:10:07.190
So you can just go ahead and
place it in here.

199
00:10:07.190 --> 00:10:09.220
Which in my opinion is really
cool cuz now you don't need to

200
00:10:09.220 --> 00:10:10.060
remember the name anymore.

201
00:10:10.060 --> 00:10:12.560
You just like I'm just gonna
put the variable in there.

202
00:10:12.560 --> 00:10:15.020
I don't care what the name is anymore,
it's just the variable.

203
00:10:15.020 --> 00:10:19.210
They change the name tomorrow, it doesn't
matter, my code's still gonna work, right.

204
00:10:19.210 --> 00:10:21.862
Yeah, so I really like that,
you don't have to remember names anymore.

205
00:10:21.862 --> 00:10:26.340
All right,
this thing go crazy full screen.

206
00:10:27.930 --> 00:10:29.870
Okay, so these things are just strings.

207
00:10:29.870 --> 00:10:32.610
So uiRouter is a string,
ngAnimate's just a string.

208
00:10:34.420 --> 00:10:36.130
Here's the funky one,
I don't know if anybody got this far.

209
00:10:37.890 --> 00:10:42.279
But now, if you saw there was a to do that
says, we need to import components/home.

210
00:10:42.279 --> 00:10:44.444
Right, so this is me importing it, so

211
00:10:44.444 --> 00:10:48.216
I'm saying import bracket home
from components/home/home.

212
00:10:48.216 --> 00:10:51.070
Now, for what we've talked about before,
I'm importing it like this.

213
00:10:51.070 --> 00:10:52.971
Can anybody guess how that's
gonna look like on a export?

214
00:10:55.565 --> 00:10:57.790
&gt;&gt; Speaker 8: Export home is the same.

215
00:10:57.790 --> 00:10:59.200
&gt;&gt; Scott Moss: It's gonna look
exactly the same, exactly.

216
00:10:59.200 --> 00:11:01.185
So the rule is If I
import of these brackets,

217
00:11:01.185 --> 00:11:03.398
I'm probably gonna export
of the brackets too.

218
00:11:03.398 --> 00:11:06.194
Or put the export in front of
the assignment expression.

219
00:11:06.194 --> 00:11:10.165
&gt;&gt; Speaker 7: Okay, so I exported
the export default home as the name.

220
00:11:10.165 --> 00:11:13.980
&gt;&gt; Scott Moss: If you export default home
and then you try to import it like this.

221
00:11:15.030 --> 00:11:16.780
&gt;&gt; Speaker 7: Yeah, I didn't use
the brackets when I [CROSSTALK]

222
00:11:16.780 --> 00:11:18.120
&gt;&gt; Scott Moss: Right, then it worked then.

223
00:11:18.120 --> 00:11:20.610
Yeah, if you use the brackets on it
with the default, it won't work.

224
00:11:20.610 --> 00:11:23.800
But if you don't use the brackets, you're
fine, yep, because you export default.

225
00:11:26.960 --> 00:11:28.692
Sweet, so then I just go ahead and
run us through this stuff.

226
00:11:28.692 --> 00:11:32.633
So because Angular exports
the names of its modules,

227
00:11:32.633 --> 00:11:35.270
I like to export the module itself.

228
00:11:36.360 --> 00:11:39.795
But I can also still benefit from
not having to remember the name,

229
00:11:39.795 --> 00:11:41.730
cuz all modules in Angular
have a name property.

230
00:11:41.730 --> 00:11:45.190
So I can just say the modules.name and
it's just the name.

231
00:11:46.260 --> 00:11:47.660
So that's what I did there.

232
00:11:47.660 --> 00:11:50.164
But if you want to be like Angular and
export the name of the module,

233
00:11:50.164 --> 00:11:50.801
you can do that.

234
00:11:50.801 --> 00:11:53.239
But I think you're like selling
yourself short if you do that,

235
00:11:53.239 --> 00:11:55.874
because there's some low hanging
fruit on exporting that module.

236
00:11:55.874 --> 00:11:58.602
Because now you can import
that module into a test and

237
00:11:58.602 --> 00:12:02.310
just completely go crazy on that
module and test everything about it.

238
00:12:02.310 --> 00:12:04.750
Where as if you just export
the name of the module,

239
00:12:04.750 --> 00:12:06.858
how can you test the module independently?

240
00:12:06.858 --> 00:12:10.200
You can't, it's just a name,
you'd have to like mock it up now.

241
00:12:10.200 --> 00:12:12.210
And now you have to say, here Angular,
here's the name of this module,

242
00:12:12.210 --> 00:12:13.990
can you mock it up for
me and give it back to me?

243
00:12:13.990 --> 00:12:16.120
Or you can just grab it from the file, so.

244
00:12:16.120 --> 00:12:19.033
I like to just export the modules and
then just call dot name on it.

245
00:12:19.033 --> 00:12:22.350
So, that's what's happened there.

246
00:12:22.350 --> 00:12:24.000
Any questions on what's happening here so
far?

247
00:12:24.000 --> 00:12:29.207
&gt;&gt; Speaker 2: We have a question
further clarifying the CSS stuff,

248
00:12:29.207 --> 00:12:36.909
Suresh K is wondering, how do we have
the CSS emitted in desks/index.html?

249
00:12:36.909 --> 00:12:43.400
&gt;&gt; Scott Moss: Desks slash, so
it's not, so a good question.

250
00:12:43.400 --> 00:12:45.050
So I think what he's expecting.

251
00:12:46.330 --> 00:12:49.136
&gt;&gt; Speaker 2: It's for
like a style tactic in there, yeah.

252
00:12:49.136 --> 00:12:50.290
&gt;&gt; Scott Moss: Right, yeah,
it's not what's happening.

253
00:12:50.290 --> 00:12:56.562
So what's really happening is, if you go
look in the bundle.js, it's get big now.

254
00:12:56.562 --> 00:12:59.600
&gt;&gt; Students: [LAUGH]
&gt;&gt; Scott Moss: What we will find is when

255
00:12:59.600 --> 00:13:01.730
we import that CSS file.

256
00:13:01.730 --> 00:13:04.959
Let's see where is it at?

257
00:13:04.959 --> 00:13:06.730
I'll never find it.

258
00:13:06.730 --> 00:13:11.910
What it's doing in this file is creating
a style tag through JavaScript and

259
00:13:11.910 --> 00:13:14.830
placing the contents of
that CSS file in the head.

260
00:13:14.830 --> 00:13:17.320
That's why you don't see it in the index
HTML, it's not going to be there.

261
00:13:17.320 --> 00:13:23.864
It's being dynamically rendered
on the page via the bundle.js.

262
00:13:23.864 --> 00:13:27.134
&gt;&gt; Speaker 7: So I have a question,
maybe you're going to get to this or not.

263
00:13:27.134 --> 00:13:31.980
But if I don't explicitly import the home

264
00:13:31.980 --> 00:13:36.971
style file, I don't get the home styles?

265
00:13:36.971 --> 00:13:40.740
&gt;&gt; Scott Moss: Nope, if you don't import
the style file, you don't get no styles.

266
00:13:40.740 --> 00:13:41.920
&gt;&gt; Speaker 7: Okay, right.

267
00:13:41.920 --> 00:13:44.550
You're not importing it in app?

268
00:13:44.550 --> 00:13:45.430
&gt;&gt; Scott Moss: Nope.

269
00:13:45.430 --> 00:13:47.970
&gt;&gt; Speaker 7: Right, and I don't see
where it does get imported otherwise?

270
00:13:47.970 --> 00:13:49.616
&gt;&gt; Scott Moss: Maybe
you have to import it?

271
00:13:49.616 --> 00:13:53.080
[LAUGH] We'll get there,
we're going to get there.

