WEBVTT

1
00:00:00.000 --> 00:00:03.906
[MUSIC]

2
00:00:03.906 --> 00:00:05.710
&gt;&gt; Scott Moss: If you looked at home.js.

3
00:00:05.710 --> 00:00:08.340
Then you have some good hints
on what blog was doing.

4
00:00:08.340 --> 00:00:10.300
Because it's very very similar.

5
00:00:10.300 --> 00:00:11.990
But we're not even looking at the code.

6
00:00:11.990 --> 00:00:13.641
You can assume that
they're gonna be similar.

7
00:00:13.641 --> 00:00:17.225
Because architecture is so well built
because they're both in the components

8
00:00:17.225 --> 00:00:18.935
folder and they're both siblings.

9
00:00:18.935 --> 00:00:20.810
And these are probably gonna have a very,

10
00:00:20.810 --> 00:00:25.190
very, very similar
styles if not identical.

11
00:00:25.190 --> 00:00:28.130
Which is different names and
prior their control is a little different.

12
00:00:28.130 --> 00:00:30.790
But you can imagine that they're
probably very very similar.

13
00:00:30.790 --> 00:00:33.790
And this is the structure outside my view.

14
00:00:33.790 --> 00:00:37.670
Here is some type of structure like
this that you have these guarantees.

15
00:00:37.670 --> 00:00:42.290
So I know just by looking at this that I
know blog and home are very similar and

16
00:00:42.290 --> 00:00:44.400
like at least like their
base functionality.

17
00:00:44.400 --> 00:00:48.293
The fact that they have a HTML file,
an entry file, a stylus file,

18
00:00:48.293 --> 00:00:49.770
directive controller.

19
00:00:51.120 --> 00:00:56.120
So the first thing that I would have done
here was I would have went to app.js,

20
00:00:56.120 --> 00:00:57.470
now how did it did this.

21
00:00:57.470 --> 00:01:00.980
Imported the blog from blog and
we'll put blog.name here.

22
00:01:00.980 --> 00:01:03.706
And these are the last step that
a lot of people just forgot to do.

23
00:01:03.706 --> 00:01:07.720
This is the thing that I said this
is what people forget to do a lot.

24
00:01:07.720 --> 00:01:10.760
So I just do it first and
then just let the error tell me to fix it.

25
00:01:11.940 --> 00:01:15.451
So I'll do that,
&gt;&gt; Scott Moss: And

26
00:01:15.451 --> 00:01:18.840
then head over to blog.js,
which is the next file.

27
00:01:18.840 --> 00:01:20.740
Because that's the thing being imported.

28
00:01:20.740 --> 00:01:22.912
And then there was some
comments up here that was,

29
00:01:22.912 --> 00:01:25.921
like, make sure to import this directive,
and all that stuff.

30
00:01:25.921 --> 00:01:30.610
So it kind of told you what to do and
if you looked at home.js, it has that.

31
00:01:30.610 --> 00:01:31.650
It's doing the same thing.

32
00:01:32.850 --> 00:01:36.270
So import the directive
from the directive, and

33
00:01:36.270 --> 00:01:38.380
then I'm just gonna
register the directive.

34
00:01:38.380 --> 00:01:43.340
And then I'm just gonna go ahead and
make a new state with /blog and

35
00:01:43.340 --> 00:01:45.220
pass in the directive
that we just made below.

36
00:01:45.220 --> 00:01:46.660
So this is something new.

37
00:01:46.660 --> 00:01:50.350
I mean normally you would just be like
simple template URL right here, and

38
00:01:50.350 --> 00:01:52.290
you'd like,
all right go to this template, right?

39
00:01:52.290 --> 00:01:55.260
And then you'd have some stuff in there,
which is totally fine.

40
00:01:55.260 --> 00:01:57.990
But because our entire
component is the page itself,

41
00:01:57.990 --> 00:02:02.480
we can just pass in the actual
blogDirective itself, which is super easy.

42
00:02:02.480 --> 00:02:04.800
Does everybody follow me there?

43
00:02:04.800 --> 00:02:07.657
So we made this directive called blog and

44
00:02:07.657 --> 00:02:12.455
we're immediately assigning it
to the template of the URL/blog.

45
00:02:15.878 --> 00:02:17.670
&gt;&gt; Scott Moss: So
that's all that's happening here.

46
00:02:17.670 --> 00:02:19.190
And of course we need to export this,
right?

47
00:02:19.190 --> 00:02:22.214
If we didn't export this,
we couldn't import it.

48
00:02:22.214 --> 00:02:24.390
So I just snuck in a export
right there on the left.

49
00:02:24.390 --> 00:02:27.892
Alternatively of course, you could you
could have done this, if you wanted to.

50
00:02:27.892 --> 00:02:32.867
You could have came out here and said
export blog and It'll work the same way.

51
00:02:35.377 --> 00:02:39.073
&gt;&gt; Speaker 2: Is there any benefit to
this outside of the example you've given,

52
00:02:39.073 --> 00:02:41.659
where we use a builtcode
that you don't need?

53
00:02:43.050 --> 00:02:43.710
&gt;&gt; Scott Moss: Benefits you.

54
00:02:43.710 --> 00:02:47.730
&gt;&gt; Speaker 2: Sorry, building,
like your own average.

55
00:02:47.730 --> 00:02:52.644
So you're the self coder of making
each page modular like this,

56
00:02:52.644 --> 00:02:57.113
so that they have to have a directive and
they have to have.

57
00:02:57.113 --> 00:02:58.560
&gt;&gt; Scott Moss: If you were the only one?

58
00:02:58.560 --> 00:02:59.572
Where it benefits?

59
00:02:59.572 --> 00:03:02.203
&gt;&gt; Speaker 2: Yes,
like performance wise or anything.

60
00:03:02.203 --> 00:03:05.020
&gt;&gt; Scott Moss: Performance
wise it's not any different.

61
00:03:05.020 --> 00:03:09.215
I mean, in fact, it might be simpler
because Angular doesn't have to work so

62
00:03:09.215 --> 00:03:11.936
hard to link up the controllers
in your template.

63
00:03:11.936 --> 00:03:13.810
Because you're not
registering controllers.

64
00:03:13.810 --> 00:03:16.493
You're just pressing
a directive that has a control.

65
00:03:16.493 --> 00:03:20.506
It's is a little different there as far
as what Angular has to look for, so

66
00:03:20.506 --> 00:03:22.206
that might be a little better.

67
00:03:22.206 --> 00:03:26.182
You also eliminate nested controllers,
which is really good.

68
00:03:26.182 --> 00:03:30.370
And then I think that's it for
performance wise.

69
00:03:30.370 --> 00:03:32.890
I think the big benefit
is just organization and

70
00:03:32.890 --> 00:03:34.260
the fact that Angular2 is doing this.

71
00:03:34.260 --> 00:03:36.150
So that's the biggest benefit.

72
00:03:37.220 --> 00:03:41.734
Yeah, other than that, if you wanna go,
if you're okay with your own coding style,

73
00:03:41.734 --> 00:03:43.377
you don't really care about.

74
00:03:43.377 --> 00:03:46.538
Yeah, you could totally just do
whatever you want, but eventually,

75
00:03:46.538 --> 00:03:47.990
somebody's gonna look at it.

76
00:03:47.990 --> 00:03:52.180
[LAUGH] Somebody's gonna look at it,
so remember that.

77
00:03:52.180 --> 00:03:54.340
They always do, somebody always will.

78
00:03:55.870 --> 00:03:57.985
Cool, so
if you were to look in the ACML file,

79
00:03:57.985 --> 00:04:01.189
you've got some hints on what you
needed to make to get this to work.

80
00:04:01.189 --> 00:04:03.149
So I'm glad that people were getting that.

81
00:04:03.149 --> 00:04:06.059
There was supposed to be a post array,
right?

82
00:04:06.059 --> 00:04:08.371
And they're supposed to have objects
in them that have a title and

83
00:04:08.371 --> 00:04:09.590
author property.

84
00:04:09.590 --> 00:04:11.430
That's all it was looking for,
so you can put as many or

85
00:04:11.430 --> 00:04:12.330
as little as you want in there.

86
00:04:12.330 --> 00:04:13.432
I already put the image in there for

87
00:04:13.432 --> 00:04:15.035
you, so
you don't have to worry about the image.

88
00:04:16.622 --> 00:04:21.080
&gt;&gt; Scott Moss: All right,
It knows I'm using VM, right?

89
00:04:21.080 --> 00:04:22.360
So blog.directive.

90
00:04:22.360 --> 00:04:26.620
So this is like the entry
point of all the magic.

91
00:04:26.620 --> 00:04:30.044
So this job is to import the CSS file and

92
00:04:30.044 --> 00:04:34.970
the HTML file or the template and
also the controller.

93
00:04:34.970 --> 00:04:37.864
So I'm employing the stylus file first.

94
00:04:37.864 --> 00:04:40.743
I want that to load up immediately,
put that in the head, and

95
00:04:40.743 --> 00:04:43.060
then I'm going to import the template.

96
00:04:43.060 --> 00:04:46.490
So the way that template works
is if you go to webpack.config,

97
00:04:46.490 --> 00:04:49.900
there's a raw loader for
anything that has HTML.

98
00:04:49.900 --> 00:04:54.200
Raw loader means load up this file and
give me the raw text as a string.

99
00:04:54.200 --> 00:04:56.945
So it gave me the HTML file as a string,
so that's crazy.

100
00:04:56.945 --> 00:04:58.884
Because usually it's the other way around.

101
00:04:58.884 --> 00:05:00.770
You would put a script tag in HTML.

102
00:05:00.770 --> 00:05:04.248
Now you're putting HTML
in your JavaScripts.

103
00:05:04.248 --> 00:05:06.120
Ridiculous if you think about it.

104
00:05:06.120 --> 00:05:10.060
So that's what I did
with the directive file.

105
00:05:10.060 --> 00:05:12.430
Import the template, and
there's a variable called template.

106
00:05:12.430 --> 00:05:17.360
Strategically named it template for
the sake of doing this shortcut down here.

107
00:05:17.360 --> 00:05:21.250
So that's why it's called template,
just so I can do the shortcut, all right?

108
00:05:21.250 --> 00:05:25.480
And in fact,
I wanted to do the shortcut again.

109
00:05:25.480 --> 00:05:29.233
So when I imported my controller,
which is strictly named,

110
00:05:29.233 --> 00:05:31.010
I aliased it as controller.

111
00:05:32.040 --> 00:05:33.480
So I can also do the shortcut down here.

112
00:05:35.210 --> 00:05:39.308
See that, so it's very strategic,
saving those keystrokes, all right?

113
00:05:41.923 --> 00:05:43.868
&gt;&gt; Scott Moss: Actually,
I think I spent more keystrokes.

114
00:05:43.868 --> 00:05:48.697
Because if I just got rid of the as,
yeah, it's actually more keystrokes,

115
00:05:48.697 --> 00:05:49.906
but-
&gt;&gt; Speaker 3: It unifies things.

116
00:05:49.906 --> 00:05:52.145
&gt;&gt; Scott Moss: It unifies things a lot.

117
00:05:52.145 --> 00:05:53.851
It looks really nice.

118
00:05:53.851 --> 00:05:56.082
All right, so cool, we got the controller.

119
00:05:56.082 --> 00:05:58.044
Controller as VM for view model.

120
00:05:58.044 --> 00:06:00.140
Scope, this is important.If
you get rid of this,

121
00:06:00.140 --> 00:06:03.950
you're gonna have some crazy side effects
guaranteed, really bad side effects.

122
00:06:03.950 --> 00:06:09.140
So keep it isolated,
restricted to an element and replace true.

123
00:06:09.140 --> 00:06:11.262
Anybody know what place true does, no?

124
00:06:11.262 --> 00:06:14.138
&gt;&gt; [INAUDIBLE]
&gt;&gt; Scott Moss: What does it do?

125
00:06:14.138 --> 00:06:19.194
&gt;&gt; Speaker 4: Anything with a net
element just gets vaporized some place.

126
00:06:19.194 --> 00:06:21.905
&gt;&gt; Scott Moss: Yeah, so pretty much.

127
00:06:21.905 --> 00:06:22.999
&gt;&gt; Speaker 4: The moment
you're in the element.

128
00:06:22.999 --> 00:06:27.314
&gt;&gt; Scott Moss: Right, exactly, so
it'll take this out the DOM and

129
00:06:27.314 --> 00:06:29.800
put this in the DOM.

130
00:06:29.800 --> 00:06:31.660
So you look at the DOM,
you won't see blog blog.

131
00:06:31.660 --> 00:06:33.170
You'll see this.

132
00:06:35.040 --> 00:06:39.600
So if it fixes CSS issues because what
happens is, if you don't put replace true.

133
00:06:39.600 --> 00:06:44.498
And you come in here and you'll be like,
yeah, let me go in here and

134
00:06:44.498 --> 00:06:47.020
I'll put a class on here..

135
00:06:47.020 --> 00:06:48.585
You start adding stuff.

136
00:06:48.585 --> 00:06:52.040
You're like why is the CSS not working?

137
00:06:52.040 --> 00:06:53.189
What's going on?

138
00:06:53.189 --> 00:06:57.044
You think you're attaching
a class to this, but

139
00:06:57.044 --> 00:07:03.080
you're actually attaching a class to
something that's out here, right?

140
00:07:03.080 --> 00:07:05.583
So that fixes a lot of CSS stuff, yes?

141
00:07:05.583 --> 00:07:08.070
&gt;&gt; Speaker 5: I thought they were
gonna deprecate and place true.

142
00:07:08.070 --> 00:07:08.627
&gt;&gt; Scott Moss: Yeah, they are.

143
00:07:08.627 --> 00:07:10.790
They're gonna default to true by default.

144
00:07:10.790 --> 00:07:13.186
&gt;&gt; Speaker 5: Yeah, that's, okay.

145
00:07:13.186 --> 00:07:13.819
&gt;&gt; Scott Moss: Or
at least I thought they were.

146
00:07:13.819 --> 00:07:15.060
I could be wrong.
I thought

147
00:07:15.060 --> 00:07:16.790
they went default to true, maybe.

148
00:07:16.790 --> 00:07:18.330
They're gonna default to something.

149
00:07:18.330 --> 00:07:20.424
I don't know what it is, but you're right.

150
00:07:20.424 --> 00:07:23.082
They need to do something
because that's just like a small

151
00:07:23.082 --> 00:07:25.560
detail that nobody needs to worry about.

152
00:07:25.560 --> 00:07:26.971
&gt;&gt; Speaker 6: Do you
need to have that then?

153
00:07:26.971 --> 00:07:28.156
&gt;&gt; Scott Moss: No,
no you don't need to have it.

154
00:07:29.370 --> 00:07:32.270
Yeah, you totally don't
need to have replace true.

155
00:07:32.270 --> 00:07:35.750
I just do it because it
fixes a lot of CSS stuff.

156
00:07:35.750 --> 00:07:37.350
But also if you do the replace true,

157
00:07:37.350 --> 00:07:41.280
you have to make sure that
your template has a container.

158
00:07:42.700 --> 00:07:44.470
It has to be encapsulated
in four elements.

159
00:07:44.470 --> 00:07:46.634
So if I put a div right here,
it's gonna break.

160
00:07:46.634 --> 00:07:49.442
It's like you can't do that
because you have two elements.

161
00:07:49.442 --> 00:07:51.501
You need some type of container element,
all right?

162
00:07:51.501 --> 00:07:52.826
I can't replace you.

163
00:07:52.826 --> 00:07:55.500
So that's the only
downside of replace true.

164
00:07:55.500 --> 00:07:59.569
But it should be the fact,
you should be doing that anyway.

165
00:07:59.569 --> 00:08:03.582
&gt;&gt; Speaker 7: There's a quest online for
you to go over how the VM part works,

166
00:08:03.582 --> 00:08:05.362
just very quickly
&gt;&gt; Scott Moss: Yeah, so

167
00:08:05.362 --> 00:08:09.872
we have a controller and we’ll also
talk about the controller in a bit.

168
00:08:09.872 --> 00:08:11.920
But it's just the constructor function.

169
00:08:11.920 --> 00:08:17.573
Controller as means we want to
reference the controllers properties

170
00:08:17.573 --> 00:08:22.356
inside of our template as
whatever name we put right here.

171
00:08:22.356 --> 00:08:26.990
Which is a VM,
which is short for a view model.

172
00:08:26.990 --> 00:08:31.770
And that's something that John Papa
created his style guide it a while back

173
00:08:31.770 --> 00:08:34.510
that he uses to reference his
controllers and this is fine.

174
00:08:34.510 --> 00:08:37.110
We would have any collision
with everything being a VM.

175
00:08:37.110 --> 00:08:42.670
Because we have an isolated scope and
our template is only ever gonna be for

176
00:08:42.670 --> 00:08:45.420
our controllers only ever
gonna be its template here.

177
00:08:45.420 --> 00:08:48.550
So now if I want to reference
things in the controller.

178
00:08:48.550 --> 00:08:52.950
So inside the controller if I have at
this .message I can to save VM.message.

179
00:08:52.950 --> 00:08:56.460
Whereas VM is that this inside of HTML.

180
00:08:56.460 --> 00:09:00.227
It's the same if we put things
on the scope, scope.message.

181
00:09:00.227 --> 00:09:01.750
We would just have this.

182
00:09:01.750 --> 00:09:03.217
It would just be a message.

183
00:09:03.217 --> 00:09:07.795
But VM.message just makes it a little bit
easier to understand what's going on.

184
00:09:12.786 --> 00:09:18.700
&gt;&gt; Scott Moss: Cool, okay, so got that.

185
00:09:18.700 --> 00:09:20.836
Any questions on the directive?

186
00:09:20.836 --> 00:09:23.292
And of course export it.

187
00:09:23.292 --> 00:09:24.350
&gt;&gt; Speaker 8: Yeah,
just one quick question.

188
00:09:24.350 --> 00:09:28.936
If you do not include scope,
is it inherited scope?

189
00:09:28.936 --> 00:09:30.543
&gt;&gt; Scott Moss: If you
do not include scope-

190
00:09:30.543 --> 00:09:31.564
&gt;&gt; Speaker 8: It's just did not even

191
00:09:31.564 --> 00:09:33.023
crossing another object here?

192
00:09:33.023 --> 00:09:36.681
&gt;&gt; Scott Moss: Yeah, so if you don't
include it, by default, it will be this,

193
00:09:36.681 --> 00:09:38.287
which means the same scope.

194
00:09:38.287 --> 00:09:44.167
I'm sorry my default is this, sorry,
which means it's the same scope.

195
00:09:44.167 --> 00:09:47.744
The other two values are true,
which means child scope and

196
00:09:47.744 --> 00:09:50.605
then the one we have is isolated scope,
yeah.

197
00:09:54.288 --> 00:09:56.981
&gt;&gt; Scott Moss: Any questions?

198
00:09:56.981 --> 00:10:01.073
So because this blogDirective is
the function that's gonna be ran or

199
00:10:01.073 --> 00:10:02.066
instantiated.

200
00:10:02.066 --> 00:10:05.885
It's the dependence injection, so we need
to inject some stuff into this directive,

201
00:10:05.885 --> 00:10:06.788
we do it right here.

202
00:10:06.788 --> 00:10:09.212
HTP,
&gt;&gt; Scott Moss: All right?

203
00:10:09.212 --> 00:10:12.090
So this is the dependence injection.

204
00:10:12.090 --> 00:10:15.489
There are times where we cannot use arrow
functions for dependence injection.

205
00:10:15.489 --> 00:10:16.366
There are times.

206
00:10:16.366 --> 00:10:18.816
I will talk about those times, but
for right now, we can use it here.

207
00:10:18.816 --> 00:10:20.850
It's okay, it's okay to use it here.

208
00:10:20.850 --> 00:10:24.656
But there are times where we can
not use it, like services or

209
00:10:24.656 --> 00:10:26.580
in-line controllers like.

210
00:10:26.580 --> 00:10:27.930
Actually, if we were to come here.

211
00:10:27.930 --> 00:10:29.790
Which people normally do,
you come here you put a controller right?

212
00:10:29.790 --> 00:10:31.370
On your state.

213
00:10:31.370 --> 00:10:33.950
And normally, you put a name or
you put a name of a controller here.

214
00:10:33.950 --> 00:10:36.780
But you can also put a function here,
too, right?

215
00:10:36.780 --> 00:10:41.090
So you might be thinking, okay, right?

216
00:10:41.090 --> 00:10:42.390
That'll work.

217
00:10:42.390 --> 00:10:44.082
Anyone know why that would not work?

218
00:10:45.950 --> 00:10:48.044
&gt;&gt; Scott Moss: Or
why that would be bad if you did that?

219
00:10:48.044 --> 00:10:48.782
&gt;&gt; Speaker 9: The context stays.

220
00:10:48.782 --> 00:10:49.986
&gt;&gt; Scott Moss: Yeah the context,

221
00:10:49.986 --> 00:10:54.663
that this inside this controller would
be the same this out here, right?

222
00:10:54.663 --> 00:10:56.125
You just messed up now.

223
00:10:56.125 --> 00:10:58.042
You screwed up, all right?

224
00:10:58.042 --> 00:10:59.599
&gt;&gt; Speaker 9: [LAUGH] [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah,

225
00:10:59.599 --> 00:11:00.941
you don't wanna do that.

226
00:11:00.941 --> 00:11:03.359
It's the same thing if you did this,
same thing.

227
00:11:03.359 --> 00:11:04.804
You don't wanna do that, all right?

228
00:11:04.804 --> 00:11:08.527
So in this case,
if you're doing an inline controller,

229
00:11:08.527 --> 00:11:10.864
you would have to do it the hard way.

230
00:11:10.864 --> 00:11:14.270
I mean use the whole function keyword,
have to do it.

231
00:11:14.270 --> 00:11:18.467
I know it hurts but you have to do it and
services as well because

232
00:11:18.467 --> 00:11:23.940
Angular calls new on a service and
arrow functions are not constructor.

233
00:11:23.940 --> 00:11:25.487
They're not.
Do not use arrow function for

234
00:11:25.487 --> 00:11:27.143
constructor functions, just don't.

235
00:11:27.143 --> 00:11:28.624
They're not meant to replace that.

236
00:11:28.624 --> 00:11:32.122
Also do not recommend this arrow
functions for recursive functions.

237
00:11:32.122 --> 00:11:33.150
Just don't do it.

238
00:11:35.311 --> 00:11:37.954
&gt;&gt; Scott Moss: Cool,
any questions on this?

239
00:11:41.092 --> 00:11:41.863
&gt;&gt; Scott Moss: Great.

240
00:11:41.863 --> 00:11:44.084
All right, so the controller,
this is my controller.

241
00:11:44.084 --> 00:11:49.482
I inputted lodash and
I'm exporting the class BlogController.

242
00:11:49.482 --> 00:11:56.571
I'm following the same naming convention
as whatever home was, which was home.

243
00:11:56.571 --> 00:11:57.331
Where you at?
Here we are.

244
00:11:57.331 --> 00:11:59.427
HomeController, all right?

245
00:11:59.427 --> 00:12:05.059
So If you go back to BlogController,
&gt;&gt; Scott Moss: I'm gonna go ahead,

246
00:12:05.059 --> 00:12:06.060
I'm just gonna export it.

247
00:12:06.060 --> 00:12:08.180
So right now,
we can get away with just exporting it.

248
00:12:08.180 --> 00:12:10.820
In the future, we will not be able to
do this and I'm gonna show you why.

249
00:12:10.820 --> 00:12:12.714
It's because we have to handle injection.

250
00:12:12.714 --> 00:12:15.420
But right now, we don't have
anything injected in here, so

251
00:12:15.420 --> 00:12:17.819
it's totally fine to just
export this immediately.

252
00:12:17.819 --> 00:12:21.160
But eventually if you start injecting
stuff, this will break our minification.

253
00:12:21.160 --> 00:12:23.480
So I'll show you how to get around that.

254
00:12:23.480 --> 00:12:25.900
But anyway, so
we're exporting the BlogController.

255
00:12:25.900 --> 00:12:29.443
And inside the constructor
just have this.message, and

256
00:12:29.443 --> 00:12:34.150
then I'll just use underscore to return
nine of these things, pretty cool.

257
00:12:34.150 --> 00:12:40.688
Here's also another neat shortcut
that I can do because I'm only doing.

258
00:12:40.688 --> 00:12:45.552
Wait, yeah, because I'm only doing this
online I can do something like this I can

259
00:12:45.552 --> 00:12:47.705
just get rid of that and rid of that.

260
00:12:47.705 --> 00:12:54.410
And do something like, really a long line,

261
00:12:56.587 --> 00:12:59.955
&gt;&gt; Scott Moss: But that'll work.

262
00:12:59.955 --> 00:13:01.250
I could just do that.

263
00:13:01.250 --> 00:13:04.002
Actually, I got to get rid of return.

264
00:13:04.002 --> 00:13:08.260
That'll work.

265
00:13:08.260 --> 00:13:09.510
So you do that with arrow function.

266
00:13:09.510 --> 00:13:14.495
You can just put the function
body on one line if you're only

267
00:13:14.495 --> 00:13:17.870
gonna reference one argument
in a callback function.

268
00:13:17.870 --> 00:13:20.420
If there's zero arguments,
can't do it, man.

269
00:13:20.420 --> 00:13:21.730
You have to do this.

270
00:13:21.730 --> 00:13:23.890
And if you do that, you can't do one line.

271
00:13:23.890 --> 00:13:26.102
If there is more than one argument,
you can't do it and

272
00:13:26.102 --> 00:13:28.650
you've gotta go to the next line.

273
00:13:28.650 --> 00:13:31.792
So because I'm only referencing one
argument, I can avoid the parenthesis,

274
00:13:31.792 --> 00:13:34.370
reference the argument,
which in this case I'm gonna put I.

275
00:13:34.370 --> 00:13:36.315
I'm not even using it, and

276
00:13:36.315 --> 00:13:41.147
then whatever comes out that arrow
would immediately be returned.

277
00:13:41.147 --> 00:13:43.680
But there's a long line, it's angry,
so let's go the other way.

278
00:13:49.789 --> 00:13:53.149
&gt;&gt; Scott Moss: Cool, cool.
There we go.

279
00:13:53.149 --> 00:13:57.736
All right, any questions on that?

280
00:13:57.736 --> 00:14:04.954
All right, so now we should have the cats,
&gt;&gt; Scott Moss: Okay,

281
00:14:04.954 --> 00:14:06.496
and you should be able to
navigate back and forth.

282
00:14:06.496 --> 00:14:07.818
So make sure you got that, too.

283
00:14:07.818 --> 00:14:12.744
If you're not navigating back and
forth, you've got a problem.

284
00:14:12.744 --> 00:14:14.050
Look at your counsul if you're not.

