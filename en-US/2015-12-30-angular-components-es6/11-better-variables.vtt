WEBVTT

1
00:00:00.000 --> 00:00:04.413
[MUSIC]

2
00:00:04.413 --> 00:00:09.290
&gt;&gt; Scott Moss: Of course we left off on
importing dependencies and what not right.

3
00:00:09.290 --> 00:00:12.484
And if you were to look in home.js,

4
00:00:12.484 --> 00:00:18.180
you might have saw something
funky like this const, right.

5
00:00:18.180 --> 00:00:22.200
Anybody see that and went over to Babel
and try it out and figure out what it was?

6
00:00:22.200 --> 00:00:26.552
So we're gonna talk about that,
talk about better variables, and ES2015.

7
00:00:26.552 --> 00:00:31.136
So, can anybody tell me one thing

8
00:00:31.136 --> 00:00:35.897
about var that they didn't like?

9
00:00:35.897 --> 00:00:39.856
Yes.
&gt;&gt; Speaker 2: It's overwritable

10
00:00:39.856 --> 00:00:42.515
all the time.
&gt;&gt; Scott Moss: It's overwritable all

11
00:00:42.515 --> 00:00:43.680
the time, anything else?

12
00:00:45.190 --> 00:00:49.150
One thing that doesn't seem out, yes?
&gt;&gt; Speaker 2: Scoping is a little bit

13
00:00:49.150 --> 00:00:50.680
weird, it's hoisted.
&gt;&gt; Scott Moss: Exactly,

14
00:00:50.680 --> 00:00:51.430
that's the worst part.

15
00:00:51.430 --> 00:00:54.378
Scoping is,
var is not what you think it is, right.

16
00:00:54.378 --> 00:00:58.078
It hoists differently,
it recognizes scopes differently,

17
00:00:58.078 --> 00:01:02.050
doesn't have local scope,
it's kinda whatever it wants to be.

18
00:01:02.050 --> 00:01:05.999
Because if you know JavaScript then
you know the way that JavaScript reads

19
00:01:05.999 --> 00:01:06.578
its code.

20
00:01:06.578 --> 00:01:12.588
If I had some code here and I said var
name and var thing equals something.

21
00:01:12.588 --> 00:01:17.472
The way JavaScript is gonna read this
is that it's first gonna come here and

22
00:01:17.472 --> 00:01:20.740
say okay var name, gotcha,
var thing, gotcha.

23
00:01:20.740 --> 00:01:24.772
And then it's gonna come down here and
say name thing, right.

24
00:01:24.772 --> 00:01:26.040
That's how JavaScript reads this.

25
00:01:26.040 --> 00:01:28.680
So it hoisted those variables
to the top of the scope and

26
00:01:28.680 --> 00:01:31.220
set their value as equal to undefined or
no values.

27
00:01:31.220 --> 00:01:32.670
And then to reassigned
their values later on.

28
00:01:32.670 --> 00:01:36.040
So that's why scoping is really weird,
and that's how those

29
00:01:36.040 --> 00:01:40.580
variables are available somewhere else
where you didn't think they were, right.

30
00:01:40.580 --> 00:01:45.010
So, same thing with
functional expressions.

31
00:01:45.010 --> 00:01:48.969
If we did something this,
this gets hoisted all the way to the top.

32
00:01:48.969 --> 00:01:54.090
Not even just the value but the actual
function itself is available up here.

33
00:01:54.090 --> 00:01:58.070
And now I can do this, right,
that's that's really crazy, right.

34
00:01:58.070 --> 00:02:01.675
So that happens too because this gets
hoisted all the way to the top so,

35
00:02:01.675 --> 00:02:02.820
funny things.

36
00:02:02.820 --> 00:02:04.699
So now what we can do is we
can use better variables.

37
00:02:06.350 --> 00:02:08.770
And we can use them in two different ways.

38
00:02:08.770 --> 00:02:10.400
So we can use let and const, right.

39
00:02:11.880 --> 00:02:16.040
So both let and
const have local scoping and

40
00:02:16.040 --> 00:02:20.210
they don't hoist and
const is also immutable.

41
00:02:20.210 --> 00:02:22.270
So what that means is, is this.

42
00:02:22.270 --> 00:02:25.738
So I can just say let val equals one.

43
00:02:25.738 --> 00:02:28.208
Const nums equals all this stuff.

44
00:02:28.208 --> 00:02:33.765
[INAUDIBLE] And what I can do now is
if I say I have this conditional,

45
00:02:33.765 --> 00:02:36.302
if true, let val equals hey.

46
00:02:36.302 --> 00:02:40.940
So I changed whatever val was,
right, I definitely changed it here.

47
00:02:40.940 --> 00:02:43.948
I'm like yo you're something
different now, right.

48
00:02:43.948 --> 00:02:47.556
But when I come down here and
I want to see what val is,

49
00:02:47.556 --> 00:02:51.498
it's actually not this,
it's whatever it was up here.

50
00:02:51.498 --> 00:02:55.930
And that's because this value
right here is being held in

51
00:02:55.930 --> 00:03:00.916
closure through this scope right
here of these brackets of the if

52
00:03:00.916 --> 00:03:04.444
statement whereas of var would not, right.

53
00:03:04.444 --> 00:03:08.310
So this also applies for const,
const will behave the same way too.

54
00:03:08.310 --> 00:03:13.230
The only extra benefit of const is that
it's immutable, so const is an array.

55
00:03:13.230 --> 00:03:17.440
So I'm pushing numbers into it,
which is fine, I'm not changing it.

56
00:03:17.440 --> 00:03:19.880
It's still an array,
Iâ€™m not changing its value.

57
00:03:19.880 --> 00:03:22.960
It's still in array, I'm just pushing
numbers into it, that's totally fine.

58
00:03:22.960 --> 00:03:26.272
But then if I try to reassign its value to
something else like another empty array,

59
00:03:26.272 --> 00:03:27.864
it'll like nope, you can't do that.

60
00:03:27.864 --> 00:03:30.000
It'll break, won't let me do that, right.

61
00:03:30.000 --> 00:03:34.998
So if I head over and
show you what that looks like,

62
00:03:34.998 --> 00:03:39.047
so I say const nums 1, 2, 3, right.

63
00:03:39.047 --> 00:03:44.300
And then I say, nums.push(1),

64
00:03:44.300 --> 00:03:47.858
okay, nothing there but

65
00:03:47.858 --> 00:03:51.931
then I say nums equals that.

66
00:03:51.931 --> 00:03:52.834
See that at the bottom right there?

67
00:03:52.834 --> 00:04:00.690
Nums is read-only, all right.
&gt;&gt; Scott Moss: It's pretty crazy.

68
00:04:00.690 --> 00:04:02.140
So that's how that works and

69
00:04:02.140 --> 00:04:07.128
that happens at runtime.
&gt;&gt; Scott Moss: So

70
00:04:07.128 --> 00:04:09.104
those are what we're gonna use.

71
00:04:09.104 --> 00:04:11.741
So how do you know which ones to use and
which ones not to use?

72
00:04:11.741 --> 00:04:15.441
In the context of this what I've
learned from using this and

73
00:04:15.441 --> 00:04:17.530
after talking with many people.

74
00:04:17.530 --> 00:04:23.280
I think it's best just to use const for
everything unless you have to change it.

75
00:04:23.280 --> 00:04:26.974
Unless you absolutely have to change
the thing which is not uncommon, right.

76
00:04:26.974 --> 00:04:29.340
That happens a lot,
you have to change the value.

77
00:04:29.340 --> 00:04:32.415
Maybe you need this thing to be hoisted
and then through some conditionals,

78
00:04:32.415 --> 00:04:35.060
you're gonna change the value,
you would use let.

79
00:04:35.060 --> 00:04:37.039
But for everything else,
I would use const.

80
00:04:37.039 --> 00:04:40.021
And then on the rare cases
that you need the thing to

81
00:04:40.021 --> 00:04:44.470
hoist all the way up to the top or
whatever, then you would use var.

82
00:04:44.470 --> 00:04:46.820
But my argument is if
your code is doing that,

83
00:04:46.820 --> 00:04:50.510
then it's probably hard to read so
you shouldn't be doing it anyway.

84
00:04:50.510 --> 00:04:54.320
So I haven't run into a condition
where I needed to use var,

85
00:04:54.320 --> 00:04:55.650
I'm using just const and let.

86
00:04:55.650 --> 00:04:56.900
Yes?
&gt;&gt; Speaker 2: No, go ahead and

87
00:04:56.900 --> 00:04:57.780
finish your thought, but

88
00:04:57.780 --> 00:04:58.660
I'll ask a question.
&gt;&gt; Scott Moss: But

89
00:04:58.660 --> 00:05:01.640
it doesn't mean that you should go and
change all your vars to let and const,

90
00:05:01.640 --> 00:05:04.350
cuz you will break stuff,
you will break stuff.

91
00:05:04.350 --> 00:05:07.595
Yes?
&gt;&gt; Speaker 2: So there's a question online

92
00:05:07.595 --> 00:05:12.210
that I think it would be great for
you to explain orally.

93
00:05:12.210 --> 00:05:15.620
Why did push not throw an error?
&gt;&gt; Scott Moss: Good question, so

94
00:05:15.620 --> 00:05:19.909
let's go back.
&gt;&gt; Scott Moss: So const,

95
00:05:19.909 --> 00:05:25.212
we're making a variable called nums
who is defined by the key word const.

96
00:05:25.212 --> 00:05:28.840
And it's array, or I'm sorry, its value
is an array, which is an object, right?

97
00:05:28.840 --> 00:05:33.220
They have properties,
they have indexes, it's a collection.

98
00:05:33.220 --> 00:05:38.750
So when I say nums.push,
I'm only adding a value to the collection.

99
00:05:38.750 --> 00:05:43.010
Remember the collection, the array is the
value of nums, that's the actual value.

100
00:05:43.010 --> 00:05:46.650
It is the array itself and
I'm only adding things to that collection.

101
00:05:46.650 --> 00:05:49.250
So I'm not changing the actual value,
it's still an array.

102
00:05:49.250 --> 00:05:52.855
If I were to say nums.push and
then check it against itself,

103
00:05:52.855 --> 00:05:54.490
it'd still equal itself.

104
00:05:54.490 --> 00:05:57.930
It's still the exact same array in memory,
it's just got some more values in it.

105
00:05:57.930 --> 00:06:02.020
So I'm not changing the values of nums but
on line six, I am.

106
00:06:02.020 --> 00:06:04.770
I'm saying nums is now
equal to a new array.

107
00:06:04.770 --> 00:06:06.418
I can also say it's a new string and

108
00:06:06.418 --> 00:06:10.580
it's still gonna break cuz now
I'm reassigning what nums was.

109
00:06:10.580 --> 00:06:14.060
Whereas before I was just modifying
some values inside of it,

110
00:06:14.060 --> 00:06:16.060
so.
&gt;&gt; Speaker 2: So you can change its type?

111
00:06:16.060 --> 00:06:17.110
&gt;&gt; Scott Moss: Change its reference.

112
00:06:17.110 --> 00:06:18.620
&gt;&gt; Speaker 2: No you can't change its

113
00:06:18.620 --> 00:06:20.050
object.
&gt;&gt; Scott Moss: Right, yeah,

114
00:06:20.050 --> 00:06:21.910
you can't change-
&gt;&gt; Speaker 2: The memory location.

115
00:06:21.910 --> 00:06:22.614
&gt;&gt; Scott Moss: You can't change its

116
00:06:22.614 --> 00:06:23.330
value.
&gt;&gt; Speaker 2: You can give it

117
00:06:23.330 --> 00:06:24.450
a pointer, right?

118
00:06:24.450 --> 00:06:27.150
Like nums is the pointer to some thing.

119
00:06:28.610 --> 00:06:30.900
So you can change what's in

120
00:06:30.900 --> 00:06:32.660
that thing you're pointing at.
&gt;&gt; Scott Moss: Exactly.

121
00:06:32.660 --> 00:06:33.770
&gt;&gt; Speaker 2: It's like you can change, if

122
00:06:33.770 --> 00:06:36.510
nums was an object and it had three keys.
&gt;&gt; Scott Moss: Yes.

123
00:06:36.510 --> 00:06:37.969
&gt;&gt; Speaker 2: Key a is equal to one,

124
00:06:37.969 --> 00:06:40.320
you can set nums.a equal to two and

125
00:06:40.320 --> 00:06:44.520
that's not technically changing nums.
&gt;&gt; Scott Moss: Exactly, yeah, so it's-

126
00:06:44.520 --> 00:06:45.160
&gt;&gt; Speaker 2: You want to protect

127
00:06:45.160 --> 00:06:49.822
the values of the object, you use freeze.
&gt;&gt; Scott Moss: Yes, object.freeze,

128
00:06:49.822 --> 00:06:52.380
that's, forgot about that one.
&gt;&gt; Speaker 2: That's more in the concept

129
00:06:52.380 --> 00:06:57.670
of an immutable array or object
whereas this is an immutable pointer?

130
00:06:57.670 --> 00:06:58.370
I don't know.
&gt;&gt; Scott Moss: Yeah,

131
00:06:58.370 --> 00:07:01.680
it's in the middle,
a little compromise there, yeah, so

132
00:07:01.680 --> 00:07:05.650
it's not, yeah exactly.
&gt;&gt; Speaker 2: Horatio is asking if

133
00:07:05.650 --> 00:07:06.420
pop would crash.

134
00:07:06.420 --> 00:07:08.870
It would not, correct?
&gt;&gt; Scott Moss: Ppo would not crash,

135
00:07:08.870 --> 00:07:11.530
it's the inverse of push so
yeah, it'll be fine.

136
00:07:11.530 --> 00:07:12.640
&gt;&gt; Speaker 2: Because it's the same thing

137
00:07:12.640 --> 00:07:14.690
basically, nums is still
pointing at the same array,

138
00:07:14.690 --> 00:07:17.439
it's just that that array is changing.
&gt;&gt; Scott Moss: Yep, it would be totally

139
00:07:17.439 --> 00:07:24.155
fine, nums.pop [SOUND].
&gt;&gt; Scott Moss: Cool,

140
00:07:24.155 --> 00:07:27.838
any other questions on that?
&gt;&gt; Scott Moss: Cool, okay, so yeah,

141
00:07:27.838 --> 00:07:31.450
use const for everything unless
we need to change something.

142
00:07:31.450 --> 00:07:35.853
I think, actually, I know AirBNB, who has
probably one of the best JavaScript style

143
00:07:35.853 --> 00:07:39.291
guides just updated their style
guide to say the exact same thing.

144
00:07:39.291 --> 00:07:42.480
So that's how I knew I was onto
something when they said it.

145
00:07:42.480 --> 00:07:46.700
So yeah, use const for everything unless
you absolutely have to change it.

146
00:07:46.700 --> 00:07:47.760
And then if you have to use var,

147
00:07:47.760 --> 00:07:53.470
look at your code first to make sure
that it's nice and neat to read.

148
00:07:53.470 --> 00:07:56.530
And if you think it is and
someone else looked at it, then use var.

149
00:07:56.530 --> 00:07:58.950
But I don't know if you would
ever even need it anymore.

150
00:07:58.950 --> 00:08:00.310
But like I said, do not go back and

151
00:08:00.310 --> 00:08:03.570
change var to let because you want
to be cool, right, just don't.

152
00:08:03.570 --> 00:08:04.740
I did it and

153
00:08:04.740 --> 00:08:08.209
it doesn't work all the time, so.
&gt;&gt; Speaker 2: It's only if you're using

154
00:08:08.209 --> 00:08:09.835
a transpiler, right?
&gt;&gt; Scott Moss: Yeah,

155
00:08:09.835 --> 00:08:14.035
well even if you have existing code now,
let's say you have ES5 code now and

156
00:08:14.035 --> 00:08:16.342
you're like,
I want to start using ES6 today.

157
00:08:16.342 --> 00:08:17.940
[INAUDIBLE] add a transpiler
build system to it.

158
00:08:17.940 --> 00:08:22.370
Now everything from here on out is
ES2015 and you have that mixed with ES5.

159
00:08:22.370 --> 00:08:26.350
And then you go back and you start
refactoring ES5 to use let and const.

160
00:08:26.350 --> 00:08:28.970
That's when you start problems,
right, so don't do that.

