WEBVTT

1
00:00:00.000 --> 00:00:03.791
[MUSIC]

2
00:00:03.791 --> 00:00:05.710
&gt;&gt; Scott: As I'm going
through this page right here.

3
00:00:05.710 --> 00:00:09.218
You see anything that has like a yellow or
orange or amber,

4
00:00:09.218 --> 00:00:11.680
whatever color that is, background.

5
00:00:11.680 --> 00:00:13.370
This is like a ES 2015 feature.

6
00:00:13.370 --> 00:00:15.470
So the rest of them are like bluish gray.

7
00:00:15.470 --> 00:00:17.070
But the yellow ones are like,

8
00:00:17.070 --> 00:00:18.764
this is something to do with
the ES2015 specifically.

9
00:00:19.890 --> 00:00:24.772
So we're going to talk about now is
I think the most important awesome

10
00:00:24.772 --> 00:00:30.370
feature in ES2015 and
that's the ES2015 module system.

11
00:00:30.370 --> 00:00:33.930
So this is important is going to touch a
little bit is very complex and we already

12
00:00:33.930 --> 00:00:36.930
have another course in front of masses
that talks more in depth about it or

13
00:00:36.930 --> 00:00:39.205
don't talk about a little bit in
the context of how we're going to use.

14
00:00:39.205 --> 00:00:40.800
&gt;&gt; [INAUDIBLE].

15
00:00:40.800 --> 00:00:43.800
&gt;&gt; Scott: So like I said, Webpack allows
us to use common js in a browser.

16
00:00:44.830 --> 00:00:49.780
So that means we can use node modules and
npm for our browser related dependencies.

17
00:00:49.780 --> 00:00:53.500
Which is,
in my opinion really great cuz npm is

18
00:00:53.500 --> 00:00:56.140
one of the best package
managers out there.

19
00:00:56.140 --> 00:01:00.069
So just like node,
we can use the require just like we did

20
00:01:02.370 --> 00:01:04.060
here in our go file right?

21
00:01:04.060 --> 00:01:08.010
We are able to use this require here,
which is a synchronous method

22
00:01:08.010 --> 00:01:12.150
which will go find another job, a script
package and give us access to it here.

23
00:01:12.150 --> 00:01:14.760
Right, we can do that in a browser now,
we can totally do that.

24
00:01:14.760 --> 00:01:20.396
So, if I wanted to, I can go into app JS,
and I can say, yeah let's just var.

25
00:01:20.396 --> 00:01:23.860
You know thing = require, something.

26
00:01:23.860 --> 00:01:26.850
So that's going to look in
no models folder for thing.

27
00:01:26.850 --> 00:01:30.770
Obviously it's gonna throw out an error
because there's no such thing as thing,

28
00:01:30.770 --> 00:01:32.610
but it would work if it did exist and

29
00:01:32.610 --> 00:01:35.090
you do the same thing with
browser fire as well.

30
00:01:35.090 --> 00:01:35.920
So nothing new there.

31
00:01:35.920 --> 00:01:39.540
This has been around for
quite some time so webpage will do that.

32
00:01:39.540 --> 00:01:44.896
Webpack will do that, that's great and

33
00:01:44.896 --> 00:01:49.163
all but were using ES2015.

34
00:01:49.163 --> 00:01:54.020
So we don't want to use the actual require
syntax all of the functionality will

35
00:01:54.020 --> 00:01:57.490
be the same because the thing
that's compiling is webpack,

36
00:01:58.600 --> 00:02:00.550
JSPM does a little differently.

37
00:02:00.550 --> 00:02:03.600
But because we're using the web
it's going to be common JS.

38
00:02:03.600 --> 00:02:05.090
So we can use require but

39
00:02:05.090 --> 00:02:07.700
as you say doesn't fit into this
look at the new module feature.

40
00:02:07.700 --> 00:02:11.450
So what we're going to using
instead is this import keyword.

41
00:02:11.450 --> 00:02:15.660
So if you various Python or
Java, you have this import.

42
00:02:16.730 --> 00:02:17.840
This is what we're going to be using.

43
00:02:18.970 --> 00:02:23.725
So normally what you would do is you
would say something like var_ = require

44
00:02:23.725 --> 00:02:24.580
[INAUDIBLE].

45
00:02:24.580 --> 00:02:28.825
Well what we can do it says we're going to
import I just this low dash from a dash,

46
00:02:28.825 --> 00:02:34.750
it's the same thing if if this were
actually compiled down to this and

47
00:02:34.750 --> 00:02:35.500
we could check it out.

48
00:02:35.500 --> 00:02:36.210
Let's look at it.

49
00:02:36.210 --> 00:02:42.921
So if I go to right here and
I say import_from_loadsh.

50
00:02:45.126 --> 00:02:47.740
&gt;&gt; Scott: And I save it,
it should have run again.

51
00:02:47.740 --> 00:02:48.868
I go look in ban on that JS.

52
00:02:50.693 --> 00:02:53.490
&gt;&gt; Scott: As you can see,
it does something like that.

53
00:02:53.490 --> 00:02:58.723
So it's doing the shimming of requiring,
but basically it's

54
00:02:58.723 --> 00:03:04.260
requiring the load dash right here,
that's what's happening.

55
00:03:05.970 --> 00:03:09.450
This is just webpack shim of CommonJs.

56
00:03:09.450 --> 00:03:12.440
But it's really compiling
down to just doing require.

57
00:03:12.440 --> 00:03:14.140
Webpack require is
the same thing as require.

58
00:03:15.660 --> 00:03:16.810
&gt;&gt; Speaker 2: You spelled low dash Ron,

59
00:03:16.810 --> 00:03:19.020
I think
&gt;&gt; Scott: Yeah I did spell it wrong,

60
00:03:19.020 --> 00:03:20.416
I knew it was going to throw an error.

61
00:03:20.416 --> 00:03:23.350
I just wanted to show you what
it compiles on to, thank you.

62
00:03:23.350 --> 00:03:24.220
Really horrible spelling.

63
00:03:26.260 --> 00:03:29.020
So it's so that's all that's going to
patent is this is what we're going to be

64
00:03:29.020 --> 00:03:31.630
using in a browser import so
little different but

65
00:03:31.630 --> 00:03:34.390
you'll see that it's very powerful.

66
00:03:34.390 --> 00:03:39.040
So using that import and from key
words we can access other modules.

67
00:03:39.040 --> 00:03:43.200
So above is just an example of how we
access like a node module just like we did

68
00:03:43.200 --> 00:03:44.500
with require js but

69
00:03:44.500 --> 00:03:49.600
how will we access the models that we
create because if you take a look.

70
00:03:51.400 --> 00:03:54.380
If you think about it because
I'll change that, oops my god.

71
00:03:59.310 --> 00:04:03.720
Because these note modules
are actually written ES2005.

72
00:04:03.720 --> 00:04:10.030
So that's annoying because nobody's
already ES2005, or I'm sorry.

73
00:04:10.030 --> 00:04:10.710
ES5.

74
00:04:12.180 --> 00:04:17.160
They don't have the actual use doesn't it
syntax as far as exporting them right.

75
00:04:17.160 --> 00:04:18.870
They're using module on exports.

76
00:04:18.870 --> 00:04:20.690
All right, so when we import them,

77
00:04:20.690 --> 00:04:22.710
we can import them with any
variable name that we want.

78
00:04:22.710 --> 00:04:26.580
I can say import whatever from lodash and
it will still work.

79
00:04:26.580 --> 00:04:30.170
It doesn't doesn't matter what variable
name I give this package because

80
00:04:30.170 --> 00:04:32.550
it will just export as a common js, but

81
00:04:32.550 --> 00:04:37.500
when we go to import our code,
we can't just call it whatever we want.

82
00:04:37.500 --> 00:04:41.944
Because our code is actually written in
ES2015 and it's gonna be the export a very

83
00:04:41.944 --> 00:04:44.920
specific way and
we have to import a very specific ways.

84
00:04:44.920 --> 00:04:47.600
So there's a slight difference
in how we're gonna handle that.

85
00:04:47.600 --> 00:04:50.650
We can choose to say if we wanna import

86
00:04:50.650 --> 00:04:52.400
our modules with whatever
variable they want.

87
00:04:52.400 --> 00:04:55.530
We have to specify that I don't
export by default it is not there.

88
00:04:56.980 --> 00:04:58.400
So I'll saw you what that
means in a little bit.

89
00:05:04.780 --> 00:05:07.380
So like I was saying the naming
of the variable is dependent

90
00:05:07.380 --> 00:05:11.400
on how it was exported so
uncommon JS because it's ES5.

91
00:05:11.400 --> 00:05:13.800
Everything's export it
with a default keyword.

92
00:05:13.800 --> 00:05:17.010
So we can import is where we want.

93
00:05:17.010 --> 00:05:22.950
But things to remember though also, in
common JS when we want to import a file,

94
00:05:22.950 --> 00:05:25.420
just like we did in our Gulf file,
we import this webpack.

95
00:05:25.420 --> 00:05:27.100
We had to put the dot
forward slash in front of it.

96
00:05:27.100 --> 00:05:29.010
If you don't do that in common JS,

97
00:05:29.010 --> 00:05:32.160
it's gonna think you want something
in a nodes module folder.

98
00:05:32.160 --> 00:05:36.526
Right, so if you don't put ./ in front
of it, it's like you want node module/

99
00:05:36.526 --> 00:05:40.784
webpack config and it's not going to be
there so it's going to throw an error.

100
00:05:40.784 --> 00:05:44.320
But put ./ in front of it,
it's like you want your file.

101
00:05:44.320 --> 00:05:45.850
That's called this got it.

102
00:05:45.850 --> 00:05:47.000
So remember that, and

103
00:05:47.000 --> 00:05:50.490
the path is going to be relative to the
file that you're importing requiring from.

104
00:05:50.490 --> 00:05:51.610
So with that in mind,

105
00:05:52.860 --> 00:05:56.340
here are some examples of different
patters use in import and

106
00:05:56.340 --> 00:06:01.040
export that we are going to be using for
there for the duration of the course.

107
00:06:01.040 --> 00:06:07.520
So like I said, importing as any variable
name, you must export it as default.

108
00:06:07.520 --> 00:06:14.220
So, if I want to be able to do this in
app.js import config from my config file,

109
00:06:14.220 --> 00:06:17.200
and just like comma js I don't have to put
the extension, I don't have to put dot js.

110
00:06:17.200 --> 00:06:21.310
It assumes that it's JavaScript so I don't
have to do that, you can if you want to.

111
00:06:21.310 --> 00:06:24.260
So if I wanna be able to
import just like this,

112
00:06:24.260 --> 00:06:26.880
the way I would have to do it
is in the appropriate file,

113
00:06:26.880 --> 00:06:31.560
I'd have to export and then use
the default key word, and then the module.

114
00:06:31.560 --> 00:06:36.960
By putting the default keyword on it,
I'm telling whoever imports this,

115
00:06:36.960 --> 00:06:41.550
it's just like calling When you do like,
module.exports and

116
00:06:41.550 --> 00:06:44.120
you just export one module for
the files like the same thing.

117
00:06:44.120 --> 00:06:47.370
But it also tells you that
the file that's importing it.

118
00:06:47.370 --> 00:06:49.080
That you can name it whatever you want.

119
00:06:49.080 --> 00:06:50.620
So I don't have to call
this config anymore.

120
00:06:50.620 --> 00:06:53.580
I can call this whatever because
I export it as a default.

121
00:06:54.590 --> 00:06:57.280
So that means, doesn't matter
what the name was in this file.

122
00:06:57.280 --> 00:06:59.740
I get import as whatever I want up here.

123
00:06:59.740 --> 00:07:00.350
That's what that means.

124
00:07:00.350 --> 00:07:01.690
So it's like common JS.

125
00:07:01.690 --> 00:07:04.113
So that this is, yes.

126
00:07:04.113 --> 00:07:07.987
&gt;&gt; Speaker 3: So since it's default does
that mean that in part you don't have to

127
00:07:07.987 --> 00:07:12.179
specify anything it will just be
available as what you defaulted it as.

128
00:07:12.179 --> 00:07:16.260
So in this case you an app J.S. in the
import statement you can remove the face

129
00:07:16.260 --> 00:07:21.136
of import from Slash config and
then you config JS,

130
00:07:21.136 --> 00:07:25.440
or and then you could use it in there
as what has been exported by default.

131
00:07:25.440 --> 00:07:28.570
&gt;&gt; Scott: I don't think that's gonna work.

132
00:07:28.570 --> 00:07:30.690
I could be wrong but,
pretty sure that's not gonna work.

133
00:07:30.690 --> 00:07:33.680
You'll probably get an error from
Babel when it tries to compile.

134
00:07:33.680 --> 00:07:40.450
When it sees import and from, I think It's
expecting to import it into something.

135
00:07:40.450 --> 00:07:42.180
&gt;&gt; Speaker 3: It won't take
the default export name.

136
00:07:42.180 --> 00:07:45.130
&gt;&gt; Scott: Right, because default
means I don't care about the name.

137
00:07:45.130 --> 00:07:46.780
&gt;&gt; Speaker 3: Right.
&gt;&gt; Scott: If we got rid of the default,

138
00:07:46.780 --> 00:07:50.910
then I can see that maybe but if you put
the default there it means like I don't

139
00:07:50.910 --> 00:07:55.100
care about the name you still have to give
it a name because it doesn't know what it

140
00:07:55.100 --> 00:08:01.021
won't know what to call it
if the default was there.

141
00:08:01.021 --> 00:08:01.758
&gt;&gt; Speaker 3: Right.

142
00:08:01.758 --> 00:08:03.086
Okay, right.

143
00:08:03.086 --> 00:08:03.830
&gt;&gt; Scott: Yes.
&gt;&gt; Speaker 3: So

144
00:08:03.830 --> 00:08:06.510
like when you're importing a node
module that you created and

145
00:08:06.510 --> 00:08:10.620
in creating you define that
as a variable all of it so

146
00:08:10.620 --> 00:08:14.694
that you have like method
config.something or whatever.

147
00:08:14.694 --> 00:08:20.070
Usually you would you do
like to require exactly what

148
00:08:20.070 --> 00:08:25.530
equals what exactly want to see with
that config and then I can reference.

149
00:08:25.530 --> 00:08:27.850
&gt;&gt; Scott: The properties on it
&gt;&gt; Speaker 3: Is that the same thing?

150
00:08:27.850 --> 00:08:28.760
&gt;&gt; Scott: Yes the same thing.

151
00:08:28.760 --> 00:08:30.110
So if you want to do that like.

152
00:08:30.110 --> 00:08:33.530
So if it was an object then yeah
you can just import this config and

153
00:08:33.530 --> 00:08:35.990
then down here you can write config setup

154
00:08:35.990 --> 00:08:38.440
config out whatever else wherever
you exports the same thing.

155
00:08:38.440 --> 00:08:40.330
Yeah it'll totally be the same thing.

156
00:08:40.330 --> 00:08:41.859
So that's one approach.

157
00:08:41.859 --> 00:08:46.564
The other approach we'll get to in
a minute is how to through export and

158
00:08:46.564 --> 00:08:49.680
import many modules from one file.

159
00:08:49.680 --> 00:08:51.650
&gt;&gt; Speaker 3: Sure.
&gt;&gt; Scott: So we'll see that in a minute.

160
00:08:51.650 --> 00:08:53.580
So here is another pattern.

161
00:08:53.580 --> 00:08:58.000
So above is just like I just want to
import as any variable name as a default.

162
00:08:58.000 --> 00:09:05.910
The pattern below it is like now I wanna
strictly keep the naming of these modules.

163
00:09:05.910 --> 00:09:10.040
Right, so, if I wanna export it as this
name, and I want to be able to import it,

164
00:09:10.040 --> 00:09:12.510
in fact, you have to import
it with the exact same name.

165
00:09:12.510 --> 00:09:15.480
So, the way this works is in app.js,
I would say, import,

166
00:09:15.480 --> 00:09:17.410
and I use these brackets.

167
00:09:17.410 --> 00:09:20.020
So, it's not an object literal,
it looks like an object literal, but

168
00:09:20.020 --> 00:09:21.480
I think they just ran out of characters.

169
00:09:21.480 --> 00:09:24.310
There's not enough characters, so
they had to use the same thing.

170
00:09:24.310 --> 00:09:26.510
You're going to see these brackets
in like ten different features and

171
00:09:26.510 --> 00:09:30.060
you see the other and it is kinda
annoying, but they use it everywhere.

172
00:09:30.060 --> 00:09:32.680
In fact you'll see the exact
same thing a one line and

173
00:09:32.680 --> 00:09:35.410
then a line below it something really
different the exact same thing

174
00:09:35.410 --> 00:09:38.430
you'll see places like this is crazy.

175
00:09:38.430 --> 00:09:43.310
So by saying import bracket
configuration bracket that means I'm

176
00:09:43.310 --> 00:09:45.460
expecting there to be.

177
00:09:45.460 --> 00:09:47.120
Something like this in
the appropriate file.

178
00:09:47.120 --> 00:09:49.520
So we can we can say export

179
00:09:49.520 --> 00:09:53.150
the variable config equals whatever it
was you go in this case is an object.

180
00:09:53.150 --> 00:09:58.230
So that means we can also export
an assignment expression because in this

181
00:09:58.230 --> 00:10:03.820
same line, I'm assigning config to a value
and I'm exporting that expression.

182
00:10:03.820 --> 00:10:06.280
So that's really cool I can
export that expression.

183
00:10:06.280 --> 00:10:11.240
Or at the bottom of the file, if configure
is already defined I can just say export

184
00:10:11.240 --> 00:10:13.370
the brackets config,
just like I imported it.

185
00:10:13.370 --> 00:10:16.117
So either way,
it would allow me to import it like this.

186
00:10:18.987 --> 00:10:21.014
&gt;&gt; Scott: Right, so
exporting it with the same brackets and

187
00:10:21.014 --> 00:10:23.180
importing it with the same brackets works.

188
00:10:23.180 --> 00:10:28.100
Or just placing the export keyword
in front of the function or

189
00:10:28.100 --> 00:10:30.130
I'm sorry front of the variable
assignment will also work.

190
00:10:31.750 --> 00:10:33.070
So this is the way you probably see,

191
00:10:33.070 --> 00:10:36.120
this is the way that most of the code that
we're going to write is going to look.

192
00:10:36.120 --> 00:10:37.170
So like this strict naming.

193
00:10:39.310 --> 00:10:39.930
So you get used to it.

194
00:10:41.500 --> 00:10:42.300
Yes.

195
00:10:42.300 --> 00:10:44.820
&gt;&gt; Speaker 4: So
config is like a variable right?

196
00:10:44.820 --> 00:10:45.790
&gt;&gt; Scott: Yeah.

197
00:10:45.790 --> 00:10:50.360
&gt;&gt; Speaker 4: And you said the brackets
are assuming that the name

198
00:10:50.360 --> 00:10:53.090
is the same name that you're exporting,
why would you want that?

199
00:10:53.090 --> 00:10:54.710
Why is that a good thing?

200
00:10:54.710 --> 00:10:59.780
&gt;&gt; Scott: Yes, so let's say you have,
well one reason you want that is so

201
00:10:59.780 --> 00:11:03.420
you have the same naming for
the same thing across your application.

202
00:11:03.420 --> 00:11:06.970
If you did this up here loosely named.

203
00:11:06.970 --> 00:11:11.180
You know modules and we were importing
config everywhere in our application.

204
00:11:11.180 --> 00:11:12.930
But in this file it is called config and

205
00:11:12.930 --> 00:11:16.140
this file is called setup and
this file is called something else, right?

206
00:11:16.140 --> 00:11:18.880
It's like very confusing to
figure out what's going on.

207
00:11:18.880 --> 00:11:21.840
Whereas if we do this, it's always
going to be the exact same name.

208
00:11:21.840 --> 00:11:24.750
In fact it won't compile
unless it is the same name.

209
00:11:24.750 --> 00:11:28.880
So this is a way for
us to to keep that very very strict and

210
00:11:28.880 --> 00:11:30.910
I find it is better for organization.

211
00:11:30.910 --> 00:11:31.960
&gt;&gt; Speaker 4: All right.
That makes sense.

