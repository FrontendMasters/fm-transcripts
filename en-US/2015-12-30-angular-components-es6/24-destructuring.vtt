WEBVTT

1
00:00:00.000 --> 00:00:03.803
[MUSIC]

2
00:00:03.803 --> 00:00:05.034
&gt;&gt; Scott Moss: Before you
get on to the exercise,

3
00:00:05.034 --> 00:00:07.925
we're gonna talk about one feature that
you'll probably use in this exercise,

4
00:00:07.925 --> 00:00:08.661
maybe, maybe not.

5
00:00:08.661 --> 00:00:13.179
You've seen it before and I was telling
you how ridiculously confusing it was.

6
00:00:13.179 --> 00:00:17.749
But we're gonna go into it just
a little bit just like we're gonna talk

7
00:00:17.749 --> 00:00:20.465
about one-fifth of the actual feature.

8
00:00:20.465 --> 00:00:25.229
So a common pattern we use in JavaScript
or in this program in general is we

9
00:00:25.229 --> 00:00:30.229
like to pluck properties off an object and
create global variables to make it

10
00:00:30.229 --> 00:00:34.158
easy to access them,
then we pass them off somewhere else.

11
00:00:34.158 --> 00:00:35.386
That's called destructuring.

12
00:00:35.386 --> 00:00:37.290
You're mainly doing that.

13
00:00:37.290 --> 00:00:40.882
So a common pattern is at
the top of a function scope.

14
00:00:40.882 --> 00:00:43.744
You pass in some object and
you're like, let me get that property.

15
00:00:43.744 --> 00:00:44.724
Let me get that property right?

16
00:00:44.724 --> 00:00:46.956
That’s very common.

17
00:00:46.956 --> 00:00:51.726
So there's a feature for
that now and you can just do this.

18
00:00:51.726 --> 00:00:52.696
It’s the same as above.

19
00:00:52.696 --> 00:00:56.281
So what this is doing,
it's making a constant called enable,

20
00:00:56.281 --> 00:00:57.574
a constant called id.

21
00:00:57.574 --> 00:01:02.217
And setting it equals to
options.enable and options.id.

22
00:01:02.217 --> 00:01:06.808
So I'm gonna open up Babel just so we
can just play with that a little more so

23
00:01:06.808 --> 00:01:07.634
you can see.

24
00:01:07.634 --> 00:01:13.018
So if I have a object, and
we'll just call it options again.

25
00:01:16.254 --> 00:01:21.100
&gt;&gt; Scott Moss: Right, and then I have
an id property on it, and I have like,

26
00:01:21.100 --> 00:01:22.061
some nums.

27
00:01:22.061 --> 00:01:28.655
What I could do is I can say, I can use
const, I can use var, I can use let.

28
00:01:28.655 --> 00:01:31.280
It doesn't matter as long as we use
some type of variable initialization.

29
00:01:31.280 --> 00:01:33.728
And then I can use the bracket notation.

30
00:01:33.728 --> 00:01:35.177
Again, this is not object literal.

31
00:01:35.177 --> 00:01:39.741
They just ran out of characters and
they're trying to confuse us.

32
00:01:39.741 --> 00:01:44.615
If I just place in the same name of
the expected property of the object

33
00:01:44.615 --> 00:01:46.850
that I'm about to pluck from.

34
00:01:46.850 --> 00:01:48.451
So, options.

35
00:01:51.038 --> 00:01:53.427
&gt;&gt; Scott Moss: I get that value.

36
00:01:53.427 --> 00:01:56.193
So if I console.log(id), I should get one.

37
00:01:58.953 --> 00:01:59.874
&gt;&gt; Scott Moss: Right.

38
00:02:02.832 --> 00:02:03.995
&gt;&gt; Scott Moss: So
everybody see how that works?

39
00:02:03.995 --> 00:02:06.411
So if you want multiple values,
you would just comma separate it.

40
00:02:08.510 --> 00:02:12.375
So the trick with this is though
that the variable names that

41
00:02:12.375 --> 00:02:17.182
you're doing here have to be the exact
same property names on the object.

42
00:02:17.182 --> 00:02:20.157
But there are some ways
to get around this.

43
00:02:20.157 --> 00:02:24.710
There's some things you can do so
if I said,

44
00:02:24.710 --> 00:02:28.291
say, if I get rid of nums, right?

45
00:02:28.291 --> 00:02:30.065
So now it's there is all nums.

46
00:02:30.065 --> 00:02:35.402
I can actually set up default values so
I could say, well nums=23, all right?

47
00:02:35.402 --> 00:02:38.626
So if I go like this, it’s 23.

48
00:02:38.626 --> 00:02:42.690
It's like a set of a default value just
in case nums doesn't exist an object on

49
00:02:42.690 --> 00:02:43.262
options.

50
00:02:45.919 --> 00:02:48.693
&gt;&gt; Scott Moss: Everybody see that,
all right?

51
00:02:48.693 --> 00:02:51.351
So, another thing is, if you were nested.

52
00:02:51.351 --> 00:02:53.954
So nested.

53
00:02:53.954 --> 00:02:56.405
Here's some more data.

54
00:02:56.405 --> 00:02:58.735
Right, now I want to get
the data property from nested.

55
00:02:58.735 --> 00:03:04.248
What you could do is you come in here and
you say, nested.

56
00:03:04.248 --> 00:03:06.593
And you come in here and
you want the data.

57
00:03:15.299 --> 00:03:18.467
&gt;&gt; Scott Moss: All right, so you just
literally make another object inside

58
00:03:18.467 --> 00:03:20.837
the brackets and
get the property from that.

59
00:03:20.837 --> 00:03:24.019
&gt;&gt; Speaker 2: Is the nested also
defines the constant then too?

60
00:03:24.019 --> 00:03:25.504
&gt;&gt; Scott Moss: No, nested is not there.

61
00:03:25.504 --> 00:03:30.685
[CROSSTALK] It's not there, good question.

62
00:03:30.685 --> 00:03:35.531
&gt;&gt; Speaker 3: So if you also want
it nested, could you do that?

63
00:03:35.531 --> 00:03:36.705
&gt;&gt; Scott Moss: If you
wanted the object nested-

64
00:03:36.705 --> 00:03:38.924
&gt;&gt; Speaker 3: Nested and data.

65
00:03:38.924 --> 00:03:40.350
&gt;&gt; Scott Moss: If you want it nested and
data-

66
00:03:40.350 --> 00:03:42.111
&gt;&gt; Speaker 3: [CROSSTALK] Have to do it

67
00:03:42.111 --> 00:03:43.228
in two lines.

68
00:03:43.228 --> 00:03:43.921
&gt;&gt; Scott Moss: Actually, I don’t know.

69
00:03:43.921 --> 00:03:45.353
Let's check it out, let's see.

70
00:03:50.207 --> 00:03:50.835
&gt;&gt; Scott Moss: Yeah.

71
00:03:50.835 --> 00:03:51.352
&gt;&gt; Speaker 3: Okay.

72
00:03:51.352 --> 00:03:53.499
[LAUGH]
&gt;&gt; Scott Moss: Yeah, so

73
00:03:53.499 --> 00:03:54.367
that's how you do that.

74
00:03:54.367 --> 00:03:58.722
And then also the other one is
if you want to change the names.

75
00:03:58.722 --> 00:04:02.919
So this is cool, but
what if I don't want id to be id?

76
00:04:02.919 --> 00:04:10.096
I want to get the id property,
but I want to call it other.

77
00:04:10.096 --> 00:04:16.180
So now if I go id,
it's like id is not defined but other is.

78
00:04:20.589 --> 00:04:22.597
&gt;&gt; Scott Moss: Yeah, so
it doesn't stop there.

79
00:04:22.597 --> 00:04:27.638
[LAUGH] You can also do this with arrays.

80
00:04:27.638 --> 00:04:31.560
So I have an array of 1, 2, and 3.

81
00:04:31.560 --> 00:04:37.524
I could also say, I want the first and
the second equals,

82
00:04:37.524 --> 00:04:42.631
oops, I guess I should give this a name,
right?

83
00:04:45.624 --> 00:04:49.874
&gt;&gt; Scott Moss: Nums, so
first and second from nums.

84
00:04:49.874 --> 00:04:56.884
And that will give me the first thing and
the second thing in the array.

85
00:05:03.341 --> 00:05:08.562
&gt;&gt; Scott Moss: So if I wanted to skip one
though, I just want to get the last thing

86
00:05:08.562 --> 00:05:14.775
in the array so I just say comma, comma,
and then I'll just call this last.

87
00:05:21.245 --> 00:05:23.466
&gt;&gt; Scott Moss: And
then I get the last thing.

88
00:05:23.466 --> 00:05:27.163
&gt;&gt; Speaker 4: There's no length or
anything?

89
00:05:27.163 --> 00:05:29.049
&gt;&gt; Scott Moss: No, you can’t access, so

90
00:05:29.049 --> 00:05:34.308
the thing on the left is gonna be random
before what's on the right, right?

91
00:05:34.308 --> 00:05:37.441
It's gonna be compiled before
the thing on the right.

92
00:05:37.441 --> 00:05:40.877
It's not actually gonna be executed
because that's not how JavaScript works.

93
00:05:40.877 --> 00:05:41.434
So yeah,

94
00:05:41.434 --> 00:05:45.900
technically I guess you could do it if
the interpreter were to work that way.

95
00:05:45.900 --> 00:05:47.921
But because of the transpiler,
no, you couldn’t.

96
00:05:47.921 --> 00:05:51.720
&gt;&gt; Speaker 4: So you couldn’t
assign a whole set of variable but

97
00:05:51.720 --> 00:05:55.068
another constant to the length of nums,
and

98
00:05:55.068 --> 00:06:00.422
then pass that in to the constant
that you're trying to get last with?

99
00:06:00.422 --> 00:06:04.958
&gt;&gt; Scott Moss: No, cuz these are just
variable names, these aren't expressions.

100
00:06:04.958 --> 00:06:07.896
&gt;&gt; Speaker 4: Sure, right.

101
00:06:07.896 --> 00:06:12.554
&gt;&gt; Speaker 5: What if you don't know
the length, I guess you're SOL?

102
00:06:12.554 --> 00:06:13.589
&gt;&gt; Scott Moss: Yep, SOL.

103
00:06:13.589 --> 00:06:16.170
That's why I don't see too
many using this feature.

104
00:06:16.170 --> 00:06:19.230
Objects make sense but for arrays,
I'm like mm, I don’t know.

105
00:06:19.230 --> 00:06:20.885
I don't see it happening.

106
00:06:25.391 --> 00:06:26.058
&gt;&gt; Scott Moss: Any questions on that?

107
00:06:26.058 --> 00:06:30.274
And the same thing works as far
as like nested with this too.

108
00:06:32.895 --> 00:06:33.635
&gt;&gt; Scott Moss: Let's see.

109
00:06:41.494 --> 00:06:42.967
&gt;&gt; Speaker 6: A couple
questions from online, Scott.

110
00:06:42.967 --> 00:06:43.932
&gt;&gt; Scott Moss: Yo.

111
00:06:43.932 --> 00:06:48.387
&gt;&gt; Speaker 6: Dominic R is wondering
what best practices would you have for

112
00:06:48.387 --> 00:06:53.205
updating an application when state
change happens in a service.

113
00:06:53.205 --> 00:06:57.425
So if your service is
holding onto some data and

114
00:06:57.425 --> 00:07:02.296
multiple different subscribers
would be interested

115
00:07:02.296 --> 00:07:07.284
in different transformations of that data,
I guess.

116
00:07:07.284 --> 00:07:08.484
&gt;&gt; Scott Moss: Yep, mm-hm.
&gt;&gt; Speaker 6: What's going on?

117
00:07:08.484 --> 00:07:12.456
Dominic R is saying that he's had
approaches where he registers an array of

118
00:07:12.456 --> 00:07:16.430
callback functions on the service when
a particular bit of state changes,

119
00:07:16.430 --> 00:07:18.779
those callback function should be called.

120
00:07:18.779 --> 00:07:20.862
But he's wondering if
there's perhaps a better way.

121
00:07:20.862 --> 00:07:21.856
&gt;&gt; Scott Moss: Yeah,
there are better ways.

122
00:07:21.856 --> 00:07:25.008
I don't spoil it cuz that is exactly
what everybody's about to do.

123
00:07:25.008 --> 00:07:25.524
&gt;&gt; Speaker 6: Okay.

124
00:07:25.524 --> 00:07:27.650
[LAUGH]
&gt;&gt; Scott Moss: Just to talk about the ways

125
00:07:27.650 --> 00:07:32.035
that you're not gonna do it, then you can
figure out the ways that you will do.

126
00:07:32.035 --> 00:07:34.799
So, Angular has an eventing
system built into it so

127
00:07:34.799 --> 00:07:37.386
you can do messaging
between stuff in Angular.

128
00:07:37.386 --> 00:07:41.582
So broadcast and what is the other one?

129
00:07:41.582 --> 00:07:42.099
&gt;&gt; Speaker 6: Emit.

130
00:07:42.099 --> 00:07:42.962
&gt;&gt; Scott Moss: Emit, there you go.

131
00:07:42.962 --> 00:07:43.752
I don't know why I drew a blank here.

132
00:07:43.752 --> 00:07:44.844
Yeah, broadcast and emit.

133
00:07:44.844 --> 00:07:45.865
I don't recommend that one.

134
00:07:45.865 --> 00:07:47.690
I only use that one.

135
00:07:47.690 --> 00:07:51.327
I think the only time I've ever used that
one was when I was like using some type of

136
00:07:51.327 --> 00:07:54.827
real time system and there was literally
no other way for me to communicate.

137
00:07:54.827 --> 00:07:58.652
But for 90% of the time,
as far as updating stuff,

138
00:07:58.652 --> 00:08:01.124
objects are passed by reference.

139
00:08:01.124 --> 00:08:02.957
So if you just bind
everything to an object.

140
00:08:02.957 --> 00:08:05.106
&gt;&gt; Speaker 6: Yeah,
that's what I've done in the past as well.

141
00:08:05.106 --> 00:08:08.764
It's usually like if I have
some array of objects, and

142
00:08:08.764 --> 00:08:13.136
I'm showing one of the objects
over here and the array over here,

143
00:08:13.136 --> 00:08:15.618
I would just bind to the same object.

144
00:08:15.618 --> 00:08:17.356
When it updates, it updates in every spot.

145
00:08:17.356 --> 00:08:18.210
&gt;&gt; Scott Moss: Yeah, exactly.

146
00:08:18.210 --> 00:08:22.348
So if you keep the same reference to
the op, that's why it's really nice,

147
00:08:22.348 --> 00:08:25.254
the pattern that I showed
you guys with the factory.

148
00:08:25.254 --> 00:08:28.330
Is that if you just bind to that object,
you're fine.

149
00:08:28.330 --> 00:08:33.694
And if for some reason you're not getting
an update, then you'll see on the solution

150
00:08:33.694 --> 00:08:38.285
that I show you how you can force
an update and get the stuff that you want.

151
00:08:38.285 --> 00:08:40.225
So yeah, if you just bind to the object,
you should be fine.

152
00:08:40.225 --> 00:08:43.015
But if you can't, for
some reason that's not working,

153
00:08:43.015 --> 00:08:45.630
use the messaging system
built into Angular.

154
00:08:45.630 --> 00:08:49.712
Just be wary of its performance hindrance.

155
00:08:49.712 --> 00:08:50.664
&gt;&gt; Speaker 6: Use sparingly, kind of.

156
00:08:50.664 --> 00:08:51.514
&gt;&gt; Scott Moss: Yeah.

157
00:08:51.514 --> 00:08:56.392
&gt;&gt; Speaker 6: And the other question
was what are Babel's considerations for

158
00:08:56.392 --> 00:08:59.648
file size once ES2015 is transpiled?

159
00:08:59.648 --> 00:09:00.788
&gt;&gt; Scott Moss: What's the question again?

160
00:09:00.788 --> 00:09:07.704
&gt;&gt; Speaker 6: Sorry, Leif D is wondering
what are Babel's considerations for

161
00:09:07.704 --> 00:09:11.486
file size once ES6 is transpiled.

162
00:09:11.486 --> 00:09:12.094
&gt;&gt; Scott Moss: That's a good question.

163
00:09:12.094 --> 00:09:14.554
I'm not too sure about
I know it has a limit.

164
00:09:14.554 --> 00:09:19.490
And if you wanna see that limit,
if you go into webpack.config and

165
00:09:19.490 --> 00:09:25.236
get rid of node modules and run it,
it'll tell you the limit in the terminal.

166
00:09:25.236 --> 00:09:26.999
Here's the limit, this thing was too big.

167
00:09:26.999 --> 00:09:29.515
I forgot how big it is but it will say it.

168
00:09:29.515 --> 00:09:30.950
I dont know the exact number.

169
00:09:30.950 --> 00:09:32.918
So tell him to do that and he'll see.

170
00:09:32.918 --> 00:09:33.890
&gt;&gt; Speaker 7: [INAUDIBLE] Thanks.

