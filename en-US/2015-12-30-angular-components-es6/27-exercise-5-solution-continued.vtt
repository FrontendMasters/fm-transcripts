WEBVTT

1
00:00:00.251 --> 00:00:04.073
[MUSIC]

2
00:00:04.073 --> 00:00:09.820
&gt;&gt; Scott: So if we've gotten this far,
now we can use posts in our controller.

3
00:00:09.820 --> 00:00:11.740
If we got rid of this,
we couldn't use posts.

4
00:00:11.740 --> 00:00:17.534
You get a posts,
let's say post factory provider,

5
00:00:17.534 --> 00:00:21.625
not there, you'll get that error.

6
00:00:24.340 --> 00:00:27.949
&gt;&gt; Scott: Cool, so
now let's go to our blog controller and

7
00:00:27.949 --> 00:00:30.600
talk about how to use this stuff.

8
00:00:30.600 --> 00:00:31.480
This is how I do this.

9
00:00:32.740 --> 00:00:34.001
First thing is, we need to inject it.

10
00:00:34.001 --> 00:00:35.080
So remember, this function,

11
00:00:35.080 --> 00:00:37.760
this constructors the thing that's
going to be used for injection.

12
00:00:37.760 --> 00:00:39.629
So inject posts in there.

13
00:00:39.629 --> 00:00:43.348
We get the name posts because
if we go back to share.js,

14
00:00:43.348 --> 00:00:45.653
that's the name that we put here.

15
00:00:45.653 --> 00:00:49.180
So, posts with a capital P
is the same post as here.

16
00:00:50.240 --> 00:00:53.170
Again, I was telling you we don't
have to register stuff with angular.

17
00:00:53.170 --> 00:00:57.470
We could have just import it to actual
post.js file right here and use

18
00:00:57.470 --> 00:01:01.130
the factory, but again, I said although
you can do that, you shouldn't do that.

19
00:01:01.130 --> 00:01:02.770
Just register it with Angular instead.

20
00:01:02.770 --> 00:01:05.703
Use dependency injection so you can
get that mocking and stuff like that.

21
00:01:08.599 --> 00:01:13.055
&gt;&gt; Scott: So, the first thing you might
have noticed was that you had to do

22
00:01:13.055 --> 00:01:17.850
something probably, this where you
had to assign the posts factory

23
00:01:17.850 --> 00:01:22.176
to this if you wanted to access
it in another method, right?

24
00:01:22.176 --> 00:01:24.350
Cuz just cuz we injected posts in here,

25
00:01:24.350 --> 00:01:28.610
that doesn't mean I can just come
in here and be like posts.getState.

26
00:01:28.610 --> 00:01:30.065
It won't work.
It will be like what's post

27
00:01:30.065 --> 00:01:30.930
with a capital P?

28
00:01:30.930 --> 00:01:37.630
I don't know that is, because this method
is outside the scope of this injection.

29
00:01:37.630 --> 00:01:40.210
So, the only way to get it
over is to bind it to this.

30
00:01:41.940 --> 00:01:44.870
It is really annoying to have
to do something like this, but

31
00:01:44.870 --> 00:01:46.020
this is only way it works now.

32
00:01:47.050 --> 00:01:50.530
ES7 introduces static properties.

33
00:01:50.530 --> 00:01:55.510
So you can do stuff like posts equals

34
00:01:55.510 --> 00:01:57.890
something like that
before the constructor.

35
00:01:57.890 --> 00:02:03.150
But that still wouldn't really help us
too much with the dependency injection.

36
00:02:03.150 --> 00:02:05.800
Typescript has a solution for this too,
but we're not using typescript.

37
00:02:08.800 --> 00:02:12.140
So this .posts equals
that post factory suite.

38
00:02:13.210 --> 00:02:17.770
And then the thing that I do
next is I call this.getPosts.

39
00:02:17.770 --> 00:02:18.930
So, let's go look at that method.

40
00:02:19.970 --> 00:02:22.990
So, I'm calling this method, this.getPost,
which is this method right here on

41
00:02:24.070 --> 00:02:26.400
line 14 that we were all talking about,
that I just made.

42
00:02:26.400 --> 00:02:32.280
So, all this does is it calls this .posts,
thefactory.get.

43
00:02:32.280 --> 00:02:33.598
So, let's go look at that, one more time.

44
00:02:33.598 --> 00:02:35.760
What does .get do?

45
00:02:35.760 --> 00:02:37.000
It just gets all the posts.

46
00:02:37.000 --> 00:02:38.356
That's what it's calling right now.

47
00:02:38.356 --> 00:02:42.925
So, let's follow this and
we'll see why we needed to get state.

48
00:02:42.925 --> 00:02:45.452
So when I call it this .post.get,

49
00:02:45.452 --> 00:02:50.777
that's going to make a call to the server
or, I'm sorry, where did it go?

50
00:02:50.777 --> 00:02:53.009
There it is.
There's that's going to cause

51
00:02:53.009 --> 00:02:54.162
of the server, and

52
00:02:54.162 --> 00:02:58.936
then when it comes back, it's going to
add that data into this array, right?

53
00:02:58.936 --> 00:03:01.490
And then we have this method call
getState that returns this array.

54
00:03:03.030 --> 00:03:07.630
So, what we can do is we can say okay,
get the post, and

55
00:03:07.630 --> 00:03:12.535
then when you get back from the server and
you've already

56
00:03:12.535 --> 00:03:16.350
pushed the stuff inside that array,
I'm now going to assign a local variable

57
00:03:16.350 --> 00:03:20.890
called this.post with a lowercase P and
equal to the getState method.

58
00:03:23.740 --> 00:03:26.152
Right.
So that's go to the server.

59
00:03:26.152 --> 00:03:29.116
By the time it gets there.

60
00:03:33.312 --> 00:03:39.246
&gt;&gt; Scott: Already added
to the state in posts.JS.

61
00:03:39.246 --> 00:03:46.800
So, by the time it gets to this method,
it has already added to all posts here.

62
00:03:46.800 --> 00:03:47.970
This had already happened.

63
00:03:47.970 --> 00:03:51.870
This line, it already happened by
the time we got to the next line.

64
00:03:51.870 --> 00:03:54.650
So, that's how I'm able to come in here
and say okay, now give me the state.

65
00:03:54.650 --> 00:03:56.078
So it's like, give me the update.

66
00:03:56.078 --> 00:03:57.149
What's the new state?

67
00:03:57.149 --> 00:03:57.711
I want the new state.

68
00:03:57.711 --> 00:03:58.840
Give me the update.

69
00:03:58.840 --> 00:04:02.561
Because we are returning the data too,
we could have just come in here and

70
00:04:02.561 --> 00:04:05.540
said data and said,
this.posts equals data.

71
00:04:05.540 --> 00:04:09.150
That will work too, as we just found out,
it's also returning the data.

72
00:04:09.150 --> 00:04:13.260
But I'm gonna rely on the fact that
the state is the source of truth.

73
00:04:13.260 --> 00:04:17.490
And when I say the state,
I'm talking about this.

74
00:04:17.490 --> 00:04:20.990
This is the source of truth, and
this is what I'm gonna keep asking for

75
00:04:20.990 --> 00:04:21.540
when I want an update.

76
00:04:23.570 --> 00:04:25.350
This is better for components,

77
00:04:25.350 --> 00:04:29.590
most other frameworks adopt the same
thing when it comes to components.

78
00:04:29.590 --> 00:04:32.418
So, these reacts and stuff like that,
they have something very similar to this.

79
00:04:37.907 --> 00:04:40.662
&gt;&gt; Scott: So, this might seem redundant or
you're like, well, I just get the data,

80
00:04:40.662 --> 00:04:41.870
and I can just put it right here.

81
00:04:41.870 --> 00:04:44.540
But then again,
where are you storing that data?

82
00:04:44.540 --> 00:04:47.590
What if you want to access
that data again, right?

83
00:04:47.590 --> 00:04:48.180
How do you do it?

84
00:04:48.180 --> 00:04:51.280
You have to call the server again
because you're storing it right here.

85
00:04:51.280 --> 00:04:55.380
But if I store it here, then it will
be here until I refresh the browser,

86
00:04:55.380 --> 00:04:58.240
doesn't matter where I go, right?

87
00:04:58.240 --> 00:04:59.130
So, that's why I put it there.

88
00:05:00.180 --> 00:05:01.992
Any questions on that?

89
00:05:01.992 --> 00:05:03.970
Yes?

90
00:05:03.970 --> 00:05:09.210
&gt;&gt; Speaker 2: If we've established
that the return value for

91
00:05:09.210 --> 00:05:13.975
this then function is
whatever the assignment is.

92
00:05:13.975 --> 00:05:15.060
&gt;&gt; Scott: Yep.

93
00:05:15.060 --> 00:05:21.840
&gt;&gt; Speaker 2: Then couldn't we still
assign to the return value of get?

94
00:05:21.840 --> 00:05:24.460
Then it'd still point out all posts?

95
00:05:24.460 --> 00:05:27.790
&gt;&gt; Scott: Yeah, in this case, you could,
cuz it's literally doing the same thing.

96
00:05:27.790 --> 00:05:30.670
But let's imagine you were
doing something like this.

97
00:05:30.670 --> 00:05:34.826
Let's say before you did this,
let's get rid of that and

98
00:05:34.826 --> 00:05:40.550
we were like,
we did some processing of response.data.

99
00:05:40.550 --> 00:05:42.420
Maybe we filtered and we sorted it.

100
00:05:42.420 --> 00:05:43.174
&gt;&gt; Speaker 2: Sure, sure.

101
00:05:43.174 --> 00:05:46.010
&gt;&gt; Scott: Some properties and
then we put that in all post, right?

102
00:05:46.010 --> 00:05:47.444
So, that's why it's like this.

103
00:05:47.444 --> 00:05:50.842
It's nice just to only have to think
about one source of truth, right?

104
00:05:50.842 --> 00:05:54.314
Where it's I'm just just give me
whatever the server gave me back.

105
00:05:54.314 --> 00:05:57.286
In this case, this works, and
not a lot of case though,

106
00:05:57.286 --> 00:06:00.451
you probably don't want the raw thing,
some of the stuff,

107
00:06:00.451 --> 00:06:05.075
maybe you're not in control of the server,
and the serve's sending you back ID's and

108
00:06:05.075 --> 00:06:07.956
stuff and
has passwords that you don't want to show.

109
00:06:07.956 --> 00:06:09.591
All right, so
you don't want to rid of that stuff.

110
00:06:09.591 --> 00:06:11.724
So you will process that
stuff before you put that in.

111
00:06:11.724 --> 00:06:13.446
Yeah.

112
00:06:13.446 --> 00:06:18.162
&gt;&gt; Speaker 3: Just I'm thinking about
to just short circuiting something

113
00:06:18.162 --> 00:06:19.553
here in your get.

114
00:06:19.553 --> 00:06:21.533
&gt;&gt; Scott: Yes.
&gt;&gt; Speaker 3: Okay.

115
00:06:21.533 --> 00:06:25.367
Actually, in that then thing you're
calling that function there.

116
00:06:25.367 --> 00:06:25.980
&gt;&gt; Scott: Uh-huh.

117
00:06:25.980 --> 00:06:26.690
&gt;&gt; Speaker 3: Okay.

118
00:06:26.690 --> 00:06:33.160
After you assign there was pronsidated
to all posts, could you then call

119
00:06:33.160 --> 00:06:38.950
getStates right there and
have that return same thing?

120
00:06:38.950 --> 00:06:39.970
&gt;&gt; Scott: Call.
&gt;&gt; Speaker 3: Instead of having

121
00:06:39.970 --> 00:06:41.500
a two level call?

122
00:06:41.500 --> 00:06:43.607
Could I call a getState where, here?

123
00:06:43.607 --> 00:06:46.790
&gt;&gt; Scott: So, turn that, no,
turn the body of that function.

124
00:06:46.790 --> 00:06:47.302
&gt;&gt; Speaker 3: Okay.

125
00:06:47.302 --> 00:06:50.627
The real function to give them.

126
00:06:50.627 --> 00:06:51.378
&gt;&gt; Scott: Uh-huh.

127
00:06:51.378 --> 00:06:56.392
&gt;&gt; Speaker 3: So, do that,
then can you call getState?

128
00:06:56.392 --> 00:07:01.280
&gt;&gt; Scott: Yeah, I could call getState, but
what, that's going to return all posts.

129
00:07:01.280 --> 00:07:02.871
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Scott: You're saying if I could just

130
00:07:02.871 --> 00:07:03.449
get a return.

131
00:07:04.500 --> 00:07:05.320
A get state?

132
00:07:05.320 --> 00:07:05.910
&gt;&gt; Speaker 3: Yeah.

133
00:07:05.910 --> 00:07:06.910
&gt;&gt; Scott: Yeah, you could totally do that.

134
00:07:06.910 --> 00:07:08.170
Yeah, for sure.

135
00:07:08.170 --> 00:07:10.070
So you can say coming here and

136
00:07:10.070 --> 00:07:13.740
you say get, this probably wont work,
it's the scoping.

137
00:07:13.740 --> 00:07:15.460
It's not posting, so this will error out.

138
00:07:15.460 --> 00:07:18.664
This would have the above, but yeah,
I just have to move this function.

139
00:07:18.664 --> 00:07:21.344
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Scott: But yeah, if you say getState.

140
00:07:21.344 --> 00:07:22.797
Yeah, that would work.

141
00:07:22.797 --> 00:07:23.702
&gt;&gt; Speaker 3: Something like that.

142
00:07:23.702 --> 00:07:29.261
&gt;&gt; Scott: And then the only difference
is over here, you don't, yeah.

143
00:07:29.261 --> 00:07:30.269
&gt;&gt; Speaker 3: Okay.

144
00:07:30.269 --> 00:07:32.253
&gt;&gt; Scott: State.

145
00:07:40.732 --> 00:07:43.244
&gt;&gt; Scott: You could do that.
&gt;&gt; Speaker 3: Yeah, okay, all right.

146
00:07:43.244 --> 00:07:45.069
&gt;&gt; Scott: All right, but yeah,
you can totally do that.

147
00:07:45.069 --> 00:07:45.617
&gt;&gt; Speaker 3: Okay.

148
00:07:45.617 --> 00:07:47.090
&gt;&gt; Scott: Whichever your flavor is.

149
00:07:47.090 --> 00:07:49.000
I like your approach better, actually.

150
00:07:49.000 --> 00:07:51.540
&gt;&gt; Speaker 3: Sure.
Sure, I'm just trying to

151
00:07:51.540 --> 00:07:52.740
explore the space.

152
00:07:52.740 --> 00:07:53.770
&gt;&gt; Scott: There you go.
I like that one, actually.

153
00:07:53.770 --> 00:07:58.950
That one is good.

154
00:07:58.950 --> 00:08:00.162
Where was I?

155
00:08:00.162 --> 00:08:01.763
There we go.
Okay,

156
00:08:01.763 --> 00:08:04.780
cool
&gt;&gt; Scott: Great.

157
00:08:06.718 --> 00:08:09.927
&gt;&gt; Scott: So
is everybody follow me on that?

158
00:08:15.265 --> 00:08:17.777
&gt;&gt; Scott: So the other thing that you, if
you look at the to dos that you could have

159
00:08:17.777 --> 00:08:21.090
done, that I didn't tell you to do,
because I just totally forgot about it.

160
00:08:21.090 --> 00:08:22.610
Because it didn't throw an error,

161
00:08:22.610 --> 00:08:26.260
was that there is this new folder
inside of components called common.

162
00:08:27.260 --> 00:08:28.460
Yeah, you had a question, Will?

163
00:08:28.460 --> 00:08:29.840
&gt;&gt; Speaker 4: Yeah,
I got a question from Rob W.

164
00:08:29.840 --> 00:08:30.650
&gt;&gt; Scott: Yeah.

165
00:08:30.650 --> 00:08:34.899
&gt;&gt; Speaker 4: If the underlying API data
changes, say someone made a new post.

166
00:08:36.450 --> 00:08:41.250
Won't you not see that, no matter how
many times you went to a different

167
00:08:41.250 --> 00:08:42.840
part of the app and
then came back to post?

168
00:08:42.840 --> 00:08:48.080
So I guess, I think what Rob W is trying
to say is if something changed from

169
00:08:48.080 --> 00:08:54.900
under us on the server, we would be stale
until we issued another request, correct?

170
00:08:56.680 --> 00:08:59.200
&gt;&gt; Scott: Well, that’s-
&gt;&gt; Speaker 4: That’s not something where

171
00:08:59.200 --> 00:09:02.490
you would be if you want
a notification of that sort of thing,

172
00:09:02.490 --> 00:09:04.630
you'd either need to be pulling or
using web sockets.

173
00:09:04.630 --> 00:09:07.360
&gt;&gt; Scott: Yeah, if you want to push
from the server, I mean, there's ways.

174
00:09:07.360 --> 00:09:09.110
There's an actual spec.

175
00:09:09.110 --> 00:09:14.508
I don’t know a lot of people know this,
but there’s an actual, let me see.

176
00:09:14.508 --> 00:09:19.268
&gt;&gt; Speaker 4: I know we used web sockets
to do precisely that at my last job, and

177
00:09:19.268 --> 00:09:21.962
it worked reasonably well
&gt;&gt; Scott: Yes, so

178
00:09:21.962 --> 00:09:23.750
web socket is definitely the best thing,
but

179
00:09:23.750 --> 00:09:26.460
there's actually this small thing that I
don't think a lot of people know about.

180
00:09:26.460 --> 00:09:30.630
It's called Service Sent Events where
you can send an event from a server,

181
00:09:30.630 --> 00:09:34.190
a push notification from a server and
that works not exact.

182
00:09:34.190 --> 00:09:35.800
It's not over thing like a web socket, but

183
00:09:35.800 --> 00:09:38.430
it's the inverse of making
a call to the server.

184
00:09:38.430 --> 00:09:42.030
Just I want the server to tell the client
about this, and you can do that.

185
00:09:42.030 --> 00:09:45.330
&gt;&gt; Speaker 4: So, the client runs
some sort of Daemon that's listening?

186
00:09:45.330 --> 00:09:48.750
&gt;&gt; Scott: I'm not sure that the low
implementation of how that actually works,

187
00:09:48.750 --> 00:09:49.940
but you can totally do it.

188
00:09:49.940 --> 00:09:53.320
It's a service and
I've done it in node before, but

189
00:09:53.320 --> 00:09:54.836
you can send to an event to a client.

190
00:09:54.836 --> 00:09:56.300
It's kind of trippy.

191
00:09:56.300 --> 00:09:57.440
&gt;&gt; Speaker 4: That's really interesting.

192
00:09:57.440 --> 00:09:58.550
&gt;&gt; Scott: It is really interesting.

193
00:09:58.550 --> 00:10:01.150
Nobody uses it, but it's official thing.

194
00:10:01.150 --> 00:10:02.380
It's a real spec.

195
00:10:02.380 --> 00:10:03.140
Nobody cares about it.

196
00:10:03.140 --> 00:10:05.110
I think it's great, but yeah.

197
00:10:05.110 --> 00:10:08.050
The web sockets will definitely
be ideal or something like that.

198
00:10:08.050 --> 00:10:12.590
And then as far as notifying our
application of how that changes,

199
00:10:12.590 --> 00:10:16.850
then you would just have to set up some
type of listeners or event emitters or

200
00:10:16.850 --> 00:10:21.080
whatever an invitation you
want to set up notification.

201
00:10:21.080 --> 00:10:26.379
One easy way would be some socket.on this.

202
00:10:26.379 --> 00:10:30.210
And then change whatever
thing is listening to that.

203
00:10:30.210 --> 00:10:31.480
So, pub sub.

204
00:10:32.950 --> 00:10:37.616
But yeah, anyway, in the common folder
text box, there's this text box directive,

205
00:10:37.616 --> 00:10:41.850
it's not really a full component cuz,
I mean,

206
00:10:41.850 --> 00:10:44.220
technically this is more
like a UI component.

207
00:10:44.220 --> 00:10:45.903
So, it's got a link and some other stuff.

208
00:10:45.903 --> 00:10:50.103
So if you were to go
into common common JS,

209
00:10:50.103 --> 00:10:55.023
you see that there is
a Angular module there, but

210
00:10:55.023 --> 00:10:59.823
if you visit Angular module,
that's in common

211
00:10:59.823 --> 00:11:04.790
JS with app.js, and
then going to blog.html.

212
00:11:04.790 --> 00:11:08.864
You'll see this text box up
here that's got some stuff.

213
00:11:12.922 --> 00:11:14.341
&gt;&gt; Scott: Then you should
see something like this.

214
00:11:21.834 --> 00:11:25.176
&gt;&gt; Scott: Not this.
[LAUGH] But, this.

215
00:11:26.560 --> 00:11:28.750
Stuff, right, so you see this.

216
00:11:28.750 --> 00:11:32.370
So, you'll see the search box here,
and you can start searching.

217
00:11:33.440 --> 00:11:36.240
In fact, if you do,
if you start typing and you can't, and

218
00:11:36.240 --> 00:11:39.890
it is not searching, here's a small,

219
00:11:39.890 --> 00:11:43.550
small pro tip that you learned,
that I learned with controller asked.

220
00:11:43.550 --> 00:11:48.090
So, when you bind into the scope,
everyone blog the HTML, and we were to,

221
00:11:48.090 --> 00:11:51.780
just imagine this buy into as
a NG model that's all that is,

222
00:11:51.780 --> 00:11:54.620
let's just say this is scope.search right?

223
00:11:54.620 --> 00:11:57.910
If there doesn't exist
a scope.search in this controller,

224
00:11:57.910 --> 00:12:00.740
Ingrid just creates a empty variable for
it, right?

225
00:12:00.740 --> 00:12:05.310
And it will fill the value as you start
typing, but what controller has, if you

226
00:12:05.310 --> 00:12:09.882
don't have this property initialized,
first, it will not create it for you.

227
00:12:09.882 --> 00:12:10.900
So, if I got rid of that and

228
00:12:12.170 --> 00:12:15.950
put that back,
pretty sure that's not going to work.

229
00:12:15.950 --> 00:12:17.960
If it does, I'll be very surprised.

230
00:12:17.960 --> 00:12:20.210
It does.
I'm very surprised, actually.

231
00:12:20.210 --> 00:12:23.623
&gt;&gt; Speaker 5: But
it won't let you reset the value.

232
00:12:23.623 --> 00:12:24.470
&gt;&gt; Scott: Right.

233
00:12:24.470 --> 00:12:25.570
Yeah.
It won't let you, there you go.

234
00:12:25.570 --> 00:12:26.730
It won't let you reset the values.

235
00:12:26.730 --> 00:12:32.690
So, it's good to just
initialize the actual property,

236
00:12:32.690 --> 00:12:37.160
won't use a controller versus relying
on Angular to make it a fly for you.

237
00:12:37.160 --> 00:12:40.639
Especially if you start,
if you start binding to an object,

238
00:12:40.639 --> 00:12:43.915
if this was an object,
it definitely won't create it for

239
00:12:43.915 --> 00:12:47.390
you, it just doesn't
know that it's an object.

240
00:12:47.390 --> 00:12:50.260
Maybe we got away with it because it's
a primitive in a string, but object,

241
00:12:50.260 --> 00:12:52.560
I don't think it will,
whereas a scope will.

242
00:12:52.560 --> 00:12:54.188
So, just a small gotcha.

243
00:12:59.039 --> 00:13:01.922
&gt;&gt; Scott: Cool, any questions on this?

244
00:13:01.922 --> 00:13:07.266
Anything that we talked about,
anything that you did,

245
00:13:07.266 --> 00:13:14.220
or anything that you see that we
didn't do anything on this, no?

246
00:13:14.220 --> 00:13:17.120
All right, so, yeah, what's up?

247
00:13:17.120 --> 00:13:18.550
&gt;&gt; Speaker 6: That thing
actually does work,

248
00:13:18.550 --> 00:13:20.350
that one thing we were talking about.

249
00:13:20.350 --> 00:13:22.810
&gt;&gt; Scott: What were we talking about?

250
00:13:22.810 --> 00:13:23.724
&gt;&gt; Speaker 6: If you
open up the Babel tab-

251
00:13:23.724 --> 00:13:24.560
&gt;&gt; Scott: Okay, Babel tab.

252
00:13:24.560 --> 00:13:26.305
&gt;&gt; Speaker 6: I could tell
you something to type.

253
00:13:26.305 --> 00:13:27.325
&gt;&gt; Scott: Okay.
&gt;&gt; Speaker 6: Okay.

254
00:13:27.325 --> 00:13:30.090
&gt;&gt; Scott: I remember what
we were talking about.

255
00:13:30.090 --> 00:13:31.460
The destructuring?

256
00:13:31.460 --> 00:13:32.593
Okay.
Let's check it out.

257
00:13:32.593 --> 00:13:35.890
&gt;&gt; Speaker 6: All right, so
do Varro Scott greeting.

258
00:13:35.890 --> 00:13:37.370
We're gonna make a name function.

259
00:13:39.780 --> 00:13:42.531
And then do equals and then parenthesis,

260
00:13:42.531 --> 00:13:45.760
then do a destructuring
of an object with Scott.

261
00:13:45.760 --> 00:13:48.287
&gt;&gt; Scott: Okay,
I got better example to this.

262
00:13:55.780 --> 00:14:02.993
&gt;&gt; Scott: So, we're going to do dot map,
and you're saying is I can do this.

263
00:14:02.993 --> 00:14:05.108
&gt;&gt; Speaker 6: Yeah.

264
00:14:05.108 --> 00:14:12.121
&gt;&gt; Scott: And on the same line,
let’s do that.

265
00:14:13.146 --> 00:14:14.686
Yeah.

266
00:14:14.686 --> 00:14:18.530
Let's see.

267
00:14:18.530 --> 00:14:19.410
Yeah, that works.

268
00:14:19.410 --> 00:14:23.650
Nice.
Most of it.

