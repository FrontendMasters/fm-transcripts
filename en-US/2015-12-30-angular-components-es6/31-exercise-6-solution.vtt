WEBVTT

1
00:00:00.000 --> 00:00:04.102
[MUSIC]

2
00:00:04.102 --> 00:00:06.637
&gt;&gt; Scott Moss: So,
let's start at blogpost.js.

3
00:00:06.637 --> 00:00:08.500
So a lot of stuff going on in this file,
right?

4
00:00:10.670 --> 00:00:13.340
Tons of stuff going on here that
we didn't really talk about.

5
00:00:13.340 --> 00:00:16.740
And if you don't really know Angular too
well, then you're really not gonna know

6
00:00:16.740 --> 00:00:22.830
what's going on here, so
that was intentional, and I'm sorry.

7
00:00:22.830 --> 00:00:26.250
But you definitely learned some stuff,
guarantee you did.

8
00:00:26.250 --> 00:00:30.150
So, the stuff that was here,
let's talk about it.

9
00:00:30.150 --> 00:00:35.310
So we have the state provider, and
the only thing we had different here was,

10
00:00:35.310 --> 00:00:37.950
before we talk about the controllers,
I have this resolve block.

11
00:00:37.950 --> 00:00:39.570
Anybody know what resolve does?

12
00:00:42.000 --> 00:00:47.110
&gt;&gt; Speaker 2: It allows you
to create injectables for

13
00:00:47.110 --> 00:00:52.720
the controller you're going to use
that have to be promises and have

14
00:00:52.720 --> 00:00:58.230
to be resolved before the route finishes
before you start rendering, right?

15
00:00:58.230 --> 00:01:02.160
&gt;&gt; Scott Moss: Yeah, so, all that's right
except for they don't have to be promises.

16
00:01:02.160 --> 00:01:02.840
They can be anything.

17
00:01:02.840 --> 00:01:03.510
&gt;&gt; Speaker 2: They can be anything?

18
00:01:03.510 --> 00:01:04.200
&gt;&gt; Scott Moss: They can be anything.

19
00:01:04.200 --> 00:01:06.550
You can return anything, but you're right.

20
00:01:06.550 --> 00:01:10.120
So, the way resolve works is an object
that takes these properties and

21
00:01:10.120 --> 00:01:16.260
these properties are strategically named,
name is important.

22
00:01:16.260 --> 00:01:19.520
So, they are functions
that just return a value.

23
00:01:19.520 --> 00:01:26.885
And whatever that value is, whether it's a
promise or some static synchronous value,

24
00:01:26.885 --> 00:01:32.630
that value is going to be attached to
this name of this property here and

25
00:01:32.630 --> 00:01:35.700
injected into the matching
controller on the route.

26
00:01:36.720 --> 00:01:42.720
So, the behavior is, if it's a promise,
the resolved value will be attached.

27
00:01:43.740 --> 00:01:46.760
If it fails,
then it just won't go to the route.

28
00:01:46.760 --> 00:01:51.940
So, either way,
this routes right here will not load up

29
00:01:51.940 --> 00:01:54.860
until all these resolve
functions come back.

30
00:01:56.700 --> 00:01:57.924
So, it'll just sit there and wait.

31
00:01:57.924 --> 00:02:03.680
So, at this directive,
we know was not supposed

32
00:02:03.680 --> 00:02:06.530
to load up until it had this, that
it's guaranteed that that will happen.

33
00:02:06.530 --> 00:02:09.126
It will never load up until this happens.

34
00:02:09.126 --> 00:02:11.991
So this is good in some cases,
not so good in other cases,

35
00:02:11.991 --> 00:02:15.245
especially if you have ten things
here that are resolving here.

36
00:02:15.245 --> 00:02:17.418
You're sitting here
looking at a blank screen,

37
00:02:17.418 --> 00:02:19.274
our loading indicator is kind of not fun.

38
00:02:19.274 --> 00:02:22.540
So, there are better ways around that,
but that's what resolve is doing.

39
00:02:22.540 --> 00:02:26.507
So because of that, that's why I put this
note right here that says you need to make

40
00:02:26.507 --> 00:02:28.300
a one off controller for resolving.

41
00:02:29.330 --> 00:02:33.266
Did anybody get that when I said that,
like a one off controller, right?

42
00:02:33.266 --> 00:02:36.884
Cuz I didn't want you to go like bring
the director's controller in here, or

43
00:02:36.884 --> 00:02:39.012
to go make another class and
put that in here.

44
00:02:39.012 --> 00:02:44.663
This is a one off anonymous controller for
the specific reason of only taking

45
00:02:44.663 --> 00:02:50.485
the post, this post right here is this
post, and binding it to either to this or

46
00:02:50.485 --> 00:02:54.920
scope, whatever you want,
just so that we can put it here.

47
00:02:57.000 --> 00:02:57.600
That's what's happening.

48
00:02:57.600 --> 00:02:58.530
So, let me walk you through it again.

49
00:02:58.530 --> 00:03:03.950
So, this controller now belongs
to this template, right?

50
00:03:03.950 --> 00:03:04.750
And because of that,

51
00:03:04.750 --> 00:03:08.380
we can access the scope properties on
this controller, through this template.

52
00:03:09.780 --> 00:03:13.520
So, we have this post attribute, and
we'll talk about that in a minute.

53
00:03:13.520 --> 00:03:17.110
We can pass in the scope.post here,
which is an object.

54
00:03:19.450 --> 00:03:23.950
But inside this actual direct,
if there's another controller in there

55
00:03:23.950 --> 00:03:27.278
that has its own functionality, but we're
talking about on the outside right now.

56
00:03:31.250 --> 00:03:31.990
Any questions on that?

57
00:03:33.030 --> 00:03:37.265
&gt;&gt; Speaker 3: Steven P is asking
a question about why can't

58
00:03:37.265 --> 00:03:41.340
we resolve it in its own controller?

59
00:03:41.340 --> 00:03:43.180
&gt;&gt; Scott Moss: Okay,
that's a good question.

60
00:03:43.180 --> 00:03:44.990
Why can't we resolve it
in its own controller?

61
00:03:44.990 --> 00:03:47.980
The whole point of resolve is to
limit a template from loading up

62
00:03:47.980 --> 00:03:49.570
before something happens.

63
00:03:49.570 --> 00:03:52.000
So, if we resolve it in the controller,
then it's already too late.

64
00:03:52.000 --> 00:03:53.560
That means if the controller's loaded up,

65
00:03:53.560 --> 00:03:55.870
that means the directive
already loaded up.

66
00:03:55.870 --> 00:03:58.919
So therefore, we really wouldn't be
resolving it, already loaded up.

67
00:03:58.919 --> 00:04:00.256
I mean, you could hack it.

68
00:04:00.256 --> 00:04:04.960
And you can have it to where you have
your directive has a dynamic template.

69
00:04:04.960 --> 00:04:08.330
Where you say okay, by default,
the directive's template is nothing.

70
00:04:08.330 --> 00:04:10.875
It's a blank screen, or
it's this placeholder or whatever.

71
00:04:10.875 --> 00:04:14.444
And then I'm gonna go to the server in the
controller, come back, then when I come

72
00:04:14.444 --> 00:04:17.945
back, now I'm going to recompile your
template and your template is now this.

73
00:04:17.945 --> 00:04:19.330
So, you could do that.

74
00:04:19.330 --> 00:04:22.643
That's kind of hacky, but still,
it's not the same as resolve,

75
00:04:22.643 --> 00:04:25.974
because resolve actually prevents
the URL from changing as well.

76
00:04:25.974 --> 00:04:29.884
Whereas, the URL will still change, you
just wouldn't see anything on the screen,

77
00:04:29.884 --> 00:04:31.308
or whatever you wanted to see.

78
00:04:31.308 --> 00:04:33.638
So yeah, but if we did it in the other
controller, it's already too late.

79
00:04:36.587 --> 00:04:37.650
&gt;&gt; Speaker 3: Cool, thanks.

80
00:04:37.650 --> 00:04:38.432
&gt;&gt; Scott Moss: Any other questions?

81
00:04:43.019 --> 00:04:44.687
&gt;&gt; Scott Moss: Okay, cool.

82
00:04:44.687 --> 00:04:49.543
So stateParams creates an object of
all the parameters in the URL, so

83
00:04:49.543 --> 00:04:52.657
this is a parameter, the title parameter.

84
00:04:52.657 --> 00:04:56.683
So if I say stateParams.title,
I get whatever this value is, all right?

85
00:04:56.683 --> 00:04:59.935
So that's why I did this
de-structure in here.

86
00:04:59.935 --> 00:05:04.840
And then this right here is
just getting rid of the dash

87
00:05:04.840 --> 00:05:08.882
delimited and
putting a space back into it.

88
00:05:08.882 --> 00:05:11.785
Because if you look at the blog posts.

89
00:05:18.100 --> 00:05:20.680
&gt;&gt; Scott Moss: But that's not valid URL.

90
00:05:20.680 --> 00:05:23.390
So, they're dash delimited on the URL.

91
00:05:23.390 --> 00:05:24.465
So, that's what that red x is doing,

92
00:05:24.465 --> 00:05:27.780
it's getting rid of those dashes,
converting it back to spaces.

93
00:05:27.780 --> 00:05:30.020
So, I can find them inside
the collection a lot easier.

94
00:05:30.020 --> 00:05:31.670
Something you would
normally do on the backend.

95
00:05:31.670 --> 00:05:33.740
But we don't really have a backend so
I did it here.

96
00:05:36.740 --> 00:05:39.710
And then I'm just gonna
say return Posts.getOne.

97
00:05:39.710 --> 00:05:40.990
So, all this is already here for you.

98
00:05:40.990 --> 00:05:44.850
Posts.getOne, we made this
method on the last one.

99
00:05:44.850 --> 00:05:46.820
So, it's just getting one post.

100
00:05:46.820 --> 00:05:49.546
Which will either look in the array if
it's there, or go to the server and

101
00:05:49.546 --> 00:05:50.315
get it if it's not.

102
00:05:54.809 --> 00:05:57.877
&gt;&gt; Scott Moss: And then of course,
to register our blog post directive.

103
00:05:57.877 --> 00:05:58.984
I think that might have
already been there, too.

104
00:05:58.984 --> 00:05:59.874
I'm not sure.

105
00:06:01.810 --> 00:06:04.240
&gt;&gt; Scott Moss: Any questions on this file?

106
00:06:04.240 --> 00:06:07.355
All right, let's go to BlogPostDirective.

107
00:06:08.700 --> 00:06:10.700
So, a little bit of new stuff here too,

108
00:06:10.700 --> 00:06:14.410
probably had to do some reading up
if you didn't know Angular too well.

109
00:06:14.410 --> 00:06:17.560
Cuz a feature that you would need in
here was actually recently released.

110
00:06:17.560 --> 00:06:21.160
So, had to do some reading
on that if you didn't know.

111
00:06:21.160 --> 00:06:24.800
But so, basically, this is just a regular
directive that we've always had.

112
00:06:24.800 --> 00:06:27.120
The template, the style and
the controller, nothing new there.

113
00:06:27.120 --> 00:06:29.610
The only thing new that's worth mentioning

114
00:06:29.610 --> 00:06:32.830
is we actually put something
on the scope here, right?

115
00:06:32.830 --> 00:06:37.070
So, how you knew this was, actually,
was here for your already?

116
00:06:37.070 --> 00:06:38.400
&gt;&gt; Speaker 4: Yeah, it was.
&gt;&gt; Scott Moss: Okay, okay, never mind.

117
00:06:38.400 --> 00:06:39.230
So I'll talk about it anyways.

118
00:06:39.230 --> 00:06:40.990
So, the reason this is here is so

119
00:06:40.990 --> 00:06:43.620
that we can pass in data
into our component, right?

120
00:06:43.620 --> 00:06:46.550
So, we define,
whatever we put on the scope is gonna

121
00:06:46.550 --> 00:06:48.330
be an attribute that we
can use on the directive.

122
00:06:48.330 --> 00:06:55.123
That's how we can use this post attribute
here, because we said so in the scope.

123
00:06:55.123 --> 00:06:57.644
And then, why is it doing that?

124
00:06:57.644 --> 00:07:02.970
And then because we said its value is this
equal sign here, that means we're gonna

125
00:07:02.970 --> 00:07:08.236
pass in some type of object or whatever,
and it's gonna be two way data binding.

126
00:07:08.236 --> 00:07:12.402
So, if we change the value of that
passing object in the directive,

127
00:07:12.402 --> 00:07:14.899
it's also gonna change on the outside.

128
00:07:14.899 --> 00:07:17.600
If we change it on the outside, it's
also gonna change inside the directive.

129
00:07:17.600 --> 00:07:19.200
It's two way data binding.

130
00:07:19.200 --> 00:07:20.586
That's what that equal sign means.

131
00:07:20.586 --> 00:07:25.639
If we did a at sign, that means we are
just gonna pass in one way data binding.

132
00:07:25.639 --> 00:07:29.969
So if it changes on the outside,
it'll change on the inside,

133
00:07:29.969 --> 00:07:32.064
but not the other way around.

134
00:07:32.064 --> 00:07:35.572
All right, it's usually for primitives, so
if you're passing a number or a string,

135
00:07:35.572 --> 00:07:37.360
but it's also a better way to do that,
too.

136
00:07:37.360 --> 00:07:40.460
And then the other one is ampersand.

137
00:07:40.460 --> 00:07:43.270
This is like I want to pass in a function.

138
00:07:43.270 --> 00:07:45.989
So I want posts to be a function
that's on a controller somewhere else.

139
00:07:46.990 --> 00:07:51.470
This one's kind of confusing to use,
I literally avoid it at all times.

140
00:07:51.470 --> 00:07:56.543
So, it's usually this or nothing else for
me, even if it's a static,

141
00:07:56.543 --> 00:08:01.550
there's another way to get static
properties than using the at sign.

142
00:08:01.550 --> 00:08:04.324
You can just use the add or attributes.

143
00:08:04.324 --> 00:08:08.870
Cool, so the one that you might
have to do was bind to controller.

144
00:08:10.190 --> 00:08:11.383
So, does anybody know what that is?

145
00:08:14.457 --> 00:08:17.684
&gt;&gt; Speaker 4: It's the thing that binds
that scope to the controller you specify.

146
00:08:17.684 --> 00:08:20.910
&gt;&gt; Scott Moss: Exactly, so it'll take
whatever properties are on the scope

147
00:08:20.910 --> 00:08:23.151
definition and bind it to the controller.

148
00:08:23.151 --> 00:08:26.386
So now it's under our control,
we can say this.post.

149
00:08:26.386 --> 00:08:27.460
That's what is that does.

150
00:08:27.460 --> 00:08:31.461
This feature just came out like 1.3,
if we didn't have this,

151
00:08:31.461 --> 00:08:36.188
it's kind of hacky to get it to work,
cuz the controller actually runs before

152
00:08:36.188 --> 00:08:40.722
the link function, because the scope,
you get access to the scope here.

153
00:08:40.722 --> 00:08:43.095
This is where you get access to
the scope and the link function.

154
00:08:43.095 --> 00:08:47.918
So, you say scope, but by the time
this runs, the controller would have

155
00:08:47.918 --> 00:08:52.441
already ran, so you'd have to do
some hacky stuff to get it to work.

156
00:08:52.441 --> 00:08:55.542
&gt;&gt; Speaker 5: You can inject the scope
though in the controller, right?

157
00:08:55.542 --> 00:08:57.760
&gt;&gt; Scott Moss: Yeah,
you inject the scope into the controller.

158
00:08:59.371 --> 00:09:02.757
&gt;&gt; Speaker 5: I'm just deciding
&gt;&gt; Scott Moss: Yeah,

159
00:09:02.757 --> 00:09:05.816
but it might not be
anything until that runs.

160
00:09:05.816 --> 00:09:07.139
You know what I mean?
You could inject it, but

161
00:09:07.139 --> 00:09:08.487
it might not be anything, right?

162
00:09:08.487 --> 00:09:10.095
You don't know.

163
00:09:13.334 --> 00:09:16.598
&gt;&gt; Scott Moss: Because the linking, that's
why it's called a link function, as that's

164
00:09:16.598 --> 00:09:20.290
the linking phase of the directive, so
our other control ran around already.

165
00:09:20.290 --> 00:09:23.083
The linking of the scope variables has it,
right?

166
00:09:23.083 --> 00:09:24.962
So, it'll just be nothing.

167
00:09:28.510 --> 00:09:29.745
&gt;&gt; Scott Moss: Any questions on this one?

168
00:09:32.885 --> 00:09:36.226
&gt;&gt; Scott Moss: Okay, and then off to
the controller, which is nothing.

169
00:09:36.226 --> 00:09:38.074
There's nothing there, really.

170
00:09:38.074 --> 00:09:39.324
I don't think this
controller does anything.

171
00:09:39.324 --> 00:09:42.982
If you did some fancy stuff in here,
that's cool, you should share, but

172
00:09:42.982 --> 00:09:45.490
I couldn't think of anything
to do with the blog.

173
00:09:45.490 --> 00:09:48.390
I mean, I could've made a side widget and
you can share to Facebook or something,

174
00:09:48.390 --> 00:09:50.470
but I didn't feel like doing all that.

175
00:09:51.890 --> 00:09:53.079
So yeah, nothing here, but

176
00:09:53.079 --> 00:09:55.717
it's nice just to have it just in
case we want to add some stuff.

177
00:09:55.717 --> 00:09:59.973
And then of course, this will not
work if we didn't go on app.js and

178
00:09:59.973 --> 00:10:01.549
register our blog post.

179
00:10:01.549 --> 00:10:02.670
Blog post.name.

180
00:10:05.917 --> 00:10:10.012
&gt;&gt; Scott Moss: All right, okay, so, again,

181
00:10:10.012 --> 00:10:16.252
if we have all this working,
we should see this.

182
00:10:16.252 --> 00:10:20.591
All right, so everybody has this?

183
00:10:20.591 --> 00:10:22.209
Is everybody checked out
to the solution bridge?

184
00:10:22.209 --> 00:10:24.427
[LAUGH]
&gt;&gt; Speaker 2: [LAUGH]

185
00:10:24.427 --> 00:10:26.080
&gt;&gt; Scott Moss: Yeah, we all got it.

186
00:10:26.080 --> 00:10:31.959
Cool, any questions on this
before I move on to what's next?

187
00:10:31.959 --> 00:10:37.223
Okay, so if you thought this one was hard,
it's definitely going to get harder.

188
00:10:37.223 --> 00:10:43.241
[LAUGH] So, let's go back to the notes.

189
00:10:43.241 --> 00:10:47.609
So we'll do a little bit of recap here
about what we've been talking about

190
00:10:47.609 --> 00:10:50.621
because-
&gt;&gt; Speaker 3: Hey Scott, before we move

191
00:10:50.621 --> 00:10:57.420
on, there was a question on the test
set up that you have for this exercise.

192
00:10:57.420 --> 00:10:58.450
&gt;&gt; Scott Moss: The test set up?

193
00:10:58.450 --> 00:11:01.984
&gt;&gt; Speaker 3: Yeah, so
the spec.js that we have for blog post.

194
00:11:01.984 --> 00:11:03.244
&gt;&gt; Scott Moss: Okay, yeah.

195
00:11:03.244 --> 00:11:08.290
&gt;&gt; Speaker 3: Let me see here.

196
00:11:08.290 --> 00:11:13.703
P was wondering why we
need to import the styles?

197
00:11:13.703 --> 00:11:14.382
&gt;&gt; Scott Moss: In the tests?

198
00:11:14.382 --> 00:11:15.151
&gt;&gt; Speaker 3: Yeah.

199
00:11:15.151 --> 00:11:17.382
&gt;&gt; Scott Moss: I don't have tests for
this one.

200
00:11:17.382 --> 00:11:21.071
If he has tests on his, not sure.

201
00:11:21.071 --> 00:11:22.884
&gt;&gt; Speaker 3: Blogpost.spec.js.

202
00:11:22.884 --> 00:11:24.210
No, yeah,
you didn't have anything in there.

203
00:11:24.210 --> 00:11:25.890
&gt;&gt; Scott Moss: Yeah,
I don't have any tests.

204
00:11:25.890 --> 00:11:27.550
&gt;&gt; Speaker 3: That was for us to do, so

205
00:11:27.550 --> 00:11:31.115
maybe he was referring to
blog.spec.js that we got yesterday.

206
00:11:31.115 --> 00:11:32.856
&gt;&gt; Scott Moss: Blog.spec.js.

207
00:11:32.856 --> 00:11:34.150
&gt;&gt; Speaker 3: Also has
an importing the styles.

208
00:11:34.150 --> 00:11:34.701
&gt;&gt; Scott Moss: No, it's not gonna import.

209
00:11:34.701 --> 00:11:38.551
So it imports the directive,
which indirectly imports the styles.

210
00:11:38.551 --> 00:11:39.134
&gt;&gt; Speaker 3: I see.

211
00:11:39.134 --> 00:11:41.940
&gt;&gt; Scott Moss: Yeah, so
you don't need the style.

212
00:11:41.940 --> 00:11:45.680
I mean, if you wanted to run
test against CSS, you could.

213
00:11:45.680 --> 00:11:48.320
Theoretically, you could import
the style as a raw text and

214
00:11:48.320 --> 00:11:51.360
run that through a RegX to
see if they change anything.

215
00:11:51.360 --> 00:11:53.970
If you really want to get crazy,
you can totally do that.

216
00:11:56.104 --> 00:11:58.560
But yeah,
there's no need to import the style here.

