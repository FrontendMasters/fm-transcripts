WEBVTT

1
00:00:00.007 --> 00:00:04.276
[MUSIC]

2
00:00:04.276 --> 00:00:07.680
&gt;&gt; Scott Moss: How and why ES6 2015?

3
00:00:07.680 --> 00:00:14.290
So ES6 itself is feature complete as
of maybe a month, month and a half ago.

4
00:00:14.290 --> 00:00:20.599
So they're not adding any more features or
anything to the current set of ES6.

5
00:00:21.750 --> 00:00:25.520
So what they did was, first,
the committee was like,

6
00:00:25.520 --> 00:00:29.580
well, this is great, and we still
have all these proposals coming in.

7
00:00:29.580 --> 00:00:33.430
What we want to do is we want to
continue this process every year.

8
00:00:33.430 --> 00:00:38.120
So I don't know how long it took for
ES6 to come out, years and years.

9
00:00:38.120 --> 00:00:39.880
So now they're like,
well, this took too long.

10
00:00:39.880 --> 00:00:41.570
We want the stuff to come out every year.

11
00:00:41.570 --> 00:00:46.590
So it makes sense for them to change the
name from ES6 to ES2015 as the release of

12
00:00:46.590 --> 00:00:51.490
like all the proposals and features that
made this cut this year, you know ES2015.

13
00:00:51.490 --> 00:00:54.780
But there continues to be
an influx of more proposals and

14
00:00:54.780 --> 00:00:56.955
more features that are being added.

15
00:00:56.955 --> 00:01:02.193
And they will be released in
other versions, ES2016, ES2017,

16
00:01:02.193 --> 00:01:06.420
etc., or we can use them today,
as you'll soon find out.

17
00:01:06.420 --> 00:01:09.680
So there are tons of helpful new
features that have been added.

18
00:01:11.130 --> 00:01:15.435
Some are entirely new concepts
that I haven't seen before in any

19
00:01:15.435 --> 00:01:17.119
programming language.

20
00:01:17.119 --> 00:01:19.430
Sure they exist somewhere,
I just haven't come across them.

21
00:01:19.430 --> 00:01:22.799
And some are just standard stuff you see
in other languages that they adopted,

22
00:01:22.799 --> 00:01:25.351
even some from CoffeeScript,
they were just like, well,

23
00:01:25.351 --> 00:01:27.530
they got a lot of inspiration
from CoffeeScript.

24
00:01:27.530 --> 00:01:31.151
So if you like CoffeeScript you'll kind of
feel familiar with some of the stuff here,

25
00:01:31.151 --> 00:01:33.639
cuz they definitely took a lot
of inspiration from there.

26
00:01:33.639 --> 00:01:38.305
But with all that said, all those
features definitely made developing

27
00:01:38.305 --> 00:01:43.500
a little bit more less hard in JavaScript
and, in my opinion a lot more fun.

28
00:01:43.500 --> 00:01:48.157
Like I was kinda getting bored with
JavaScript, I was like, yeah this sucks.

29
00:01:48.157 --> 00:01:51.279
All this cool stuff is coming out,
there's other languages.

30
00:01:51.279 --> 00:01:52.280
And then, ES2015 is like,

31
00:01:52.280 --> 00:01:56.160
now you can do this and I am like all
right, all right, this is pretty cool.

32
00:01:56.160 --> 00:02:00.480
So it kind of made it a little more
fun for me to write some JavaScript.

33
00:02:02.550 --> 00:02:06.671
However, all that new stuff we just talked
about isn't fully implemented in all

34
00:02:06.671 --> 00:02:08.621
the browsers, even the latest ones.

35
00:02:08.621 --> 00:02:12.886
So they're being released feature by
feature into the browsers I think

36
00:02:12.886 --> 00:02:17.600
Microsoft Edge is the leading browser
right now that has the most ES2015.

37
00:02:17.600 --> 00:02:19.883
It's crazy, right, like Microsoft?

38
00:02:19.883 --> 00:02:22.570
Yeah I know,
they're doing better than all of them.

39
00:02:22.570 --> 00:02:24.610
So they're really doing
a good job with that.

40
00:02:24.610 --> 00:02:28.062
Chrome is pretty good,
Safari, not too sure.

41
00:02:28.062 --> 00:02:30.548
I don't think they're doing as
well as Edge and Chrome, but

42
00:02:30.548 --> 00:02:33.688
they're getting there, so they're
starting to release their stuff out.

43
00:02:33.688 --> 00:02:35.476
I mean,
you can open up the console right now and

44
00:02:35.476 --> 00:02:38.105
you can see some of the stuff
that's already in there.

45
00:02:38.105 --> 00:02:43.620
But with that being said, because
it's not available in the browsers,

46
00:02:43.620 --> 00:02:46.628
we can't just run ES2015
right in a browser.

47
00:02:46.628 --> 00:02:49.710
Some things may work,
some things might not work.

48
00:02:49.710 --> 00:02:52.174
But, I can guarantee your
application just won't run, or

49
00:02:52.174 --> 00:02:55.530
as soon as it sees a syntax error or
something, it's just going to crash.

50
00:02:55.530 --> 00:02:59.240
So, we have to use like a transpiler,
very much like CoffeeScript.

51
00:02:59.240 --> 00:03:01.860
In fact,
it's the same thing as CoffeeScript.

52
00:03:01.860 --> 00:03:07.106
So there are two transpilers that
have emerged as like the go tos for

53
00:03:07.106 --> 00:03:11.610
compiling ES2015, and
they are Babel and Traceur.

54
00:03:12.830 --> 00:03:16.950
Babel is this community one, is really
awesome, Traceur's built by Google.

55
00:03:16.950 --> 00:03:19.290
I think it was there first,
Babel used to be called 6 to 5, so

56
00:03:19.290 --> 00:03:21.280
if you've seen that before,
that's what that is.

57
00:03:21.280 --> 00:03:24.784
They just changed the names because they
realized that it's not just about ES2016

58
00:03:24.784 --> 00:03:26.970
or it's like a whole another thing.

59
00:03:26.970 --> 00:03:29.684
So these are the two, there are more but

60
00:03:29.684 --> 00:03:35.030
these are like the two that
the community is backing and following.

61
00:03:35.030 --> 00:03:38.611
I recommend Babel, and
that's the one we're going to be using.

62
00:03:38.611 --> 00:03:43.433
The reason is, the compiled
JavaScript that it spits out is like

63
00:03:43.433 --> 00:03:46.720
way closer to the original source code.

64
00:03:46.720 --> 00:03:51.312
It's not exactly like a human may have
written it, but it's a lot closer than

65
00:03:51.312 --> 00:03:56.342
Traceur, if you look at what Traceur spits
out, it's just like [LAUGH] what is that?

66
00:03:56.342 --> 00:04:01.315
Like, no, no, no,
way a person would ever write that.

67
00:04:01.315 --> 00:04:05.836
So and Traceur requires
a runtime whereas Babel doesn't.

68
00:04:05.836 --> 00:04:07.990
There's no runtime and
you can just like pick and

69
00:04:07.990 --> 00:04:11.430
choose different polyfills as you please,
if you want to.

70
00:04:11.430 --> 00:04:12.940
So it's really, really legit.

71
00:04:14.740 --> 00:04:18.745
So we have a transpiler, that's going
to be our tool for compiling ES5,

72
00:04:18.745 --> 00:04:20.306
or ES2015 down to ES5.

73
00:04:20.306 --> 00:04:23.724
So we can work in environments
like the browser or Node or

74
00:04:23.724 --> 00:04:27.159
whatever you're programming on,
a TV or smart watch.

75
00:04:27.159 --> 00:04:30.913
So the transpiler's going to do the work
of the conversion, but we're all lazy and

76
00:04:30.913 --> 00:04:33.390
we don't want to do that
manually every time, right?

77
00:04:33.390 --> 00:04:36.100
So we need some type of build
systems inside the build tool.

78
00:04:36.100 --> 00:04:40.850
So, I mean, I can list every single
build tool in every system out there and

79
00:04:40.850 --> 00:04:41.776
we'll be talking for days.

80
00:04:41.776 --> 00:04:46.620
So I'm just going to talk about the ones
that I think that are the most popular

81
00:04:46.620 --> 00:04:50.780
ones for this ES2015 process, and
the ones that have the best support.

82
00:04:50.780 --> 00:04:55.741
And those three are Webpack,
JSPM, which stands for

83
00:04:55.741 --> 00:04:58.616
JavaScript Package Manager.

84
00:04:58.616 --> 00:05:01.717
This is the one Angular 2 is using and
they're going to continue to use.

85
00:05:01.717 --> 00:05:06.107
And it's like,
it really does follow the ES2015 spec, and

86
00:05:06.107 --> 00:05:11.230
then there's Gulp which is Gulp,
Gulp is Gulp, right, it's awesome.

87
00:05:11.230 --> 00:05:15.780
What we're gonna be using is
a combination of Webpack and Gulp.

88
00:05:15.780 --> 00:05:19.940
Although JSPM is the recommended one,
and it's the one Angular 2 uses, we're

89
00:05:19.940 --> 00:05:24.150
not gonna use it toda, mainly because
the configuration is a little difficult.

90
00:05:24.150 --> 00:05:29.008
And the plugin support isn't as robust
as Webpack is right now because JSPM

91
00:05:29.008 --> 00:05:30.249
is a little newer.

92
00:05:30.249 --> 00:05:32.735
So for
that reason we'll be using Webpack, but

93
00:05:32.735 --> 00:05:35.171
in the future you'll
probably be using JSPM.

94
00:05:35.171 --> 00:05:39.168
But JSPM itself is like,
it's like a course on itself to be honest.

95
00:05:39.168 --> 00:05:41.575
It's just ridiculously robust.

96
00:05:41.575 --> 00:05:45.819
&gt;&gt; Speaker 2: And
we do have a course on ES6, ES2015 or

97
00:05:45.819 --> 00:05:49.070
whatever, it's by Aaron Frost.

98
00:05:49.070 --> 00:05:51.560
&gt;&gt; Scott Moss: That's right Aaron Frost,
I took it, I should know Aaron Frost.

99
00:05:51.560 --> 00:05:53.317
&gt;&gt; Speaker 3: Are we going
to use JSPM by itself, or

100
00:05:53.317 --> 00:05:55.946
we going to use that with Gulp or
where does that fit in?

101
00:05:55.946 --> 00:06:00.070
&gt;&gt; Scott Moss: So Webpack and
JSPM do not need Gulp.

102
00:06:00.070 --> 00:06:01.130
We're gonna use it together and

103
00:06:01.130 --> 00:06:05.160
you'll see why we use it together but
neither those two build systems need Gulp.

104
00:06:05.160 --> 00:06:07.680
So we'll be using Webpack and
Gulp together with JSPM and

105
00:06:07.680 --> 00:06:11.110
if you were to use it,
you don't need Gulp.

106
00:06:11.110 --> 00:06:15.990
Its job is gonna be just transpiling and
giving you like the actual module

107
00:06:15.990 --> 00:06:20.550
features that ES6 proposed, but
Gulp will do other things that JSPM won't.

108
00:06:20.550 --> 00:06:26.010
Let's say you need a task for
your CI, or some documentation stuff.

109
00:06:26.010 --> 00:06:27.220
JSPM won't do that, all right?

110
00:06:27.220 --> 00:06:30.390
It's only going to do that thing is
like compiling your code, right?

111
00:06:30.390 --> 00:06:33.072
Yeah, so I still use Gulp for
things like that.

112
00:06:33.072 --> 00:06:34.017
&gt;&gt; Speaker 3: Got you.
&gt;&gt; Scott Moss: Creating a server,

113
00:06:34.017 --> 00:06:35.610
running tests, stuff like that.

114
00:06:35.610 --> 00:06:37.916
So you don't need Gulp for
any of this stuff.

115
00:06:37.916 --> 00:06:41.741
But Webpack and JSPM are strictly for
like modifying your source code or

116
00:06:41.741 --> 00:06:45.453
transpiling and stuff and
then beyond that you need something else.

117
00:06:45.453 --> 00:06:50.279
Yeah I think Angular 2 is
using Broccoli for that.

118
00:06:50.279 --> 00:06:55.629
Yeah Broccoli, that's another thing, so,
never had Broccoli, go check it out.

119
00:06:55.629 --> 00:06:56.724
[LAUGH]

