WEBVTT

1
00:00:00.000 --> 00:00:04.128
[MUSIC]

2
00:00:04.128 --> 00:00:05.270
&gt;&gt; Scott Moss: Decorators are awesome.

3
00:00:05.270 --> 00:00:07.056
I really, really like decorators.

4
00:00:07.056 --> 00:00:09.899
This is a proposal made by.

5
00:00:09.899 --> 00:00:11.470
Who made this proposal?

6
00:00:11.470 --> 00:00:12.542
YouWhoTheCats I think.

7
00:00:12.542 --> 00:00:14.297
&gt;&gt; Male Speaker 2: Yeah.
&gt;&gt; Scott Moss: Yeah, it's his proposal.

8
00:00:14.297 --> 00:00:18.440
So he is like yo, let's make some
decorators just like Python.

9
00:00:18.440 --> 00:00:19.690
Everyone else has got it.

10
00:00:19.690 --> 00:00:20.299
We should have it.

11
00:00:21.480 --> 00:00:24.092
They're really not that
special to be honest.

12
00:00:24.092 --> 00:00:26.213
We've been doing this
forever in JavaScript.

13
00:00:26.213 --> 00:00:28.330
It's just a function of mix in really.

14
00:00:28.330 --> 00:00:30.070
But the syntax is just really nice.

15
00:00:30.070 --> 00:00:32.020
The fact that you can how
you can do it on the fly.

16
00:00:33.080 --> 00:00:37.198
But the proposals out there
as part of the ES7 spec,

17
00:00:37.198 --> 00:00:40.202
but we can access it on Babel Stage 1.

18
00:00:40.202 --> 00:00:43.310
So we have access on our code right
now if we wanna write a decorators.

19
00:00:43.310 --> 00:00:49.420
So really all they do is, like I said,
they just mix in on methods.

20
00:00:49.420 --> 00:00:53.650
So you can only use decorators on methods
on a class on and an object literal.

21
00:00:53.650 --> 00:00:57.950
You can't use using one might some free
function somewhere or something like that.

22
00:00:57.950 --> 00:01:00.490
It have to be an object or class.

23
00:01:00.490 --> 00:01:03.050
And the way they work
is they just decorate

24
00:01:03.050 --> 00:01:04.826
the actual method that
they're placed above.

25
00:01:04.826 --> 00:01:09.010
And I'm gonna show you some
very good examples of that on

26
00:01:09.010 --> 00:01:10.570
Angular 2 stuff in a minute.

27
00:01:10.570 --> 00:01:13.150
But how that will work?

28
00:01:13.150 --> 00:01:14.060
It's kind of like this,

29
00:01:14.060 --> 00:01:17.950
I already wrote some code over
here in preparation for this.

30
00:01:17.950 --> 00:01:20.780
So don't worry about what's
going on up top here.

31
00:01:20.780 --> 00:01:22.530
Let's just look at
the stuff at the bottom.

32
00:01:22.530 --> 00:01:24.330
So we have this class called Person.

33
00:01:24.330 --> 00:01:25.610
We have our constructor.

34
00:01:25.610 --> 00:01:27.510
By the way, you don't have to
put a constructor in the class.

35
00:01:28.540 --> 00:01:29.460
You don't have to.

36
00:01:29.460 --> 00:01:30.410
If you don't put a constructor,

37
00:01:30.410 --> 00:01:32.460
then nothing will happen
when you call new, right?

38
00:01:32.460 --> 00:01:33.580
But you don't have to put a constructor.

39
00:01:35.020 --> 00:01:37.540
And then I have this method called scroll.

40
00:01:37.540 --> 00:01:42.370
So something in common we do on the web
is we do on scroll, do this, right?

41
00:01:42.370 --> 00:01:45.190
But then we wanna throttle that or
we wanna debounce that.

42
00:01:45.190 --> 00:01:46.623
Well, let's just change that to throttle.

43
00:01:48.570 --> 00:01:50.900
&gt;&gt; Scott Moss: So we like throttle
this thing or debbounce or whatever.

44
00:01:50.900 --> 00:01:54.680
And then we wanna throttle by like 300
milliseconds or something like that.

45
00:01:54.680 --> 00:01:56.220
So this is cool.

46
00:01:56.220 --> 00:01:58.790
Normally, what you would
do is you'd have to like.

47
00:01:58.790 --> 00:01:59.960
Whatever is calling scroll.

48
00:01:59.960 --> 00:02:01.900
That's where you would
define a throttle and stuff.

49
00:02:01.900 --> 00:02:02.760
Which is great.

50
00:02:02.760 --> 00:02:06.620
But if you can just put a throttled
decorator on top of the scroll,

51
00:02:06.620 --> 00:02:08.500
it doesn't matter who calls it.

52
00:02:08.500 --> 00:02:11.517
You can be rest assured that it
will be throttled, all right?

53
00:02:11.517 --> 00:02:13.310
Which I think it's pretty cool.

54
00:02:13.310 --> 00:02:18.217
So in order to get that to work,
&gt;&gt; Scott Moss: What

55
00:02:18.217 --> 00:02:21.240
we do is up here a decorator's
really just a function.

56
00:02:21.240 --> 00:02:24.033
So if I change this from
mineralized over to throttle.

57
00:02:24.033 --> 00:02:25.930
That's the new name we called it.

58
00:02:25.930 --> 00:02:30.842
It's really just a function that
is just a function that returrns

59
00:02:30.842 --> 00:02:33.280
the decorator function.

60
00:02:33.280 --> 00:02:37.003
So in this case, actually I need to
change some stuff, I need to say.

61
00:02:40.693 --> 00:02:42.226
&gt;&gt; Scott Moss: Do something
a little different here.

62
00:02:51.778 --> 00:02:52.660
&gt;&gt; Scott Moss: Okay.

63
00:02:52.660 --> 00:02:56.140
So in this case,
throttle is also a function.

64
00:02:56.140 --> 00:02:58.630
All decorators donâ€™t have to be functions.

65
00:02:58.630 --> 00:03:04.090
They don't have to take in arguments,
but they do have to return a value.

66
00:03:04.090 --> 00:03:08.850
So what I mean by there is a decorator
can be like this or it can be like this.

67
00:03:10.860 --> 00:03:13.780
And because throttle is a function
that's actually takes arguments,

68
00:03:13.780 --> 00:03:15.780
it must return a function.

69
00:03:15.780 --> 00:03:17.175
So that's a change that I just made.

70
00:03:17.175 --> 00:03:18.345
I just have to return a function.

71
00:03:21.325 --> 00:03:21.825
There it is.

72
00:03:25.665 --> 00:03:28.975
So the arguments that you get and I was
logging for you, so you could see them.

73
00:03:28.975 --> 00:03:30.655
I could tell you, but
I think it'll be better if you saw them.

74
00:03:32.125 --> 00:03:34.738
Once you see these args,
you'll know how powerful this stuff is.

75
00:03:36.751 --> 00:03:38.390
&gt;&gt; Male Speaker 3: Don't forget the T.

76
00:03:38.390 --> 00:03:40.126
&gt;&gt; Scott Moss: Thank you.

77
00:03:40.126 --> 00:03:42.650
Oops, there we go.

78
00:03:45.680 --> 00:03:49.509
So we get the target,
which is like the actual instance.

79
00:03:50.670 --> 00:03:56.010
We get the name of the method, and
then the awesome thing is this descriptor.

80
00:03:56.010 --> 00:03:58.227
So who is ever use object.define?

81
00:04:00.117 --> 00:04:01.930
&gt;&gt; Scott Moss: Nobody,
anybody knew what object.define is?

82
00:04:02.930 --> 00:04:06.010
So it's like a more fine grain
way to define an object.

83
00:04:06.010 --> 00:04:08.380
So in JavaScript we make an object.

84
00:04:08.380 --> 00:04:09.360
Mostly we do this.

85
00:04:09.360 --> 00:04:09.860
Let's say.

86
00:04:11.420 --> 00:04:12.370
Object literal, right?

87
00:04:13.490 --> 00:04:16.660
You can also do object.create or
whatever you're flavor is.

88
00:04:18.260 --> 00:04:20.320
I mean I guess some people
might even do this.

89
00:04:20.320 --> 00:04:23.860
I don't know who's doing that but so do I.

90
00:04:23.860 --> 00:04:27.790
So but if you want more flying in
control over the object as far as

91
00:04:27.790 --> 00:04:30.880
setting up different setters and getters.

92
00:04:30.880 --> 00:04:32.530
Does everybody know what that is,
setters and getters?

93
00:04:32.530 --> 00:04:33.904
Right, so
you can do that with object.define.

94
00:04:33.904 --> 00:04:36.239
You can say this property is innumerable.

95
00:04:36.239 --> 00:04:40.230
Which means if I loop over this object,
it should show up or it shouldn't.

96
00:04:40.230 --> 00:04:43.020
I don't want this object
to be configurable,

97
00:04:43.020 --> 00:04:44.800
as in you cannot change it, right?

98
00:04:44.800 --> 00:04:48.532
So object.define allows you to define
that object more fine grain, all right?

99
00:04:48.532 --> 00:04:53.987
So you would do object.define and
you start passing in some stuff.

100
00:04:56.734 --> 00:04:58.411
&gt;&gt; Scott Moss: So that's what we get here.

101
00:04:58.411 --> 00:05:05.290
We get the actual definition of
the object that we're trying to decorate.

102
00:05:05.290 --> 00:05:08.560
And because we do that,
we've got some pretty powerful stuff here.

103
00:05:08.560 --> 00:05:15.390
So you get access to the value,
the function itself, all types of things.

104
00:05:15.390 --> 00:05:22.112
So a pattern that I've
noticed with decorators

105
00:05:22.112 --> 00:05:28.420
is that what you do is you overwrite
what the value is or the function.

106
00:05:28.420 --> 00:05:33.020
And then inside that overwritten function,
you would just call the old function.

107
00:05:33.020 --> 00:05:34.720
So does that makes sense?

108
00:05:34.720 --> 00:05:36.880
So I have this descriptor.value.

109
00:05:36.880 --> 00:05:39.060
That's the new function that I'm making.

110
00:05:39.060 --> 00:05:40.950
But inside of the call to that function,

111
00:05:40.950 --> 00:05:43.710
I'll calling an old one
with the same arguments.

112
00:05:43.710 --> 00:05:45.070
So I showed that means.

113
00:05:45.070 --> 00:05:47.256
Let me just log some of stuff,
you'll see what I'm talking about.

114
00:05:50.577 --> 00:05:52.110
&gt;&gt; Scott Moss: So if I just say scroll.

115
00:05:52.110 --> 00:05:53.411
I don't know.

116
00:05:53.411 --> 00:05:58.300
Just like100, some arbitrary number.

117
00:05:58.300 --> 00:06:05.187
And now I can come down here and say,
&gt;&gt; Scott Moss: const (num) = args.

118
00:06:05.187 --> 00:06:12.332
It's gonna give me the first
thing out that array.

119
00:06:12.332 --> 00:06:19.514
And then I can say oops, not const,

120
00:06:19.514 --> 00:06:24.549
but let num += 300.

121
00:06:24.549 --> 00:06:26.739
And I'll just put num there.

122
00:06:29.577 --> 00:06:30.675
&gt;&gt; Scott Moss: Right?

123
00:06:37.471 --> 00:06:42.111
&gt;&gt; Scott Moss: Where is that other consul,
here it is, oops.

124
00:06:47.282 --> 00:06:48.760
&gt;&gt; Scott Moss: What's typing now,

125
00:06:48.760 --> 00:06:53.159
this argument list,
&gt;&gt; Scott Moss: You can't do that I was

126
00:06:53.159 --> 00:06:55.365
trying to take a shortcut, let me see.

127
00:06:55.365 --> 00:06:59.153
&gt;&gt; Male Speaker 3: Can't you just
see you could turn that, nevermind.

128
00:06:59.153 --> 00:07:01.402
&gt;&gt; Scott Moss: I'll find the shortcut.

129
00:07:01.402 --> 00:07:03.485
It was just small type.

130
00:07:03.485 --> 00:07:05.271
&gt;&gt; Male Speaker 3: The client
put in an array.

131
00:07:05.271 --> 00:07:05.782
&gt;&gt; Scott Moss: Thank you.

132
00:07:05.782 --> 00:07:07.906
Yeah, you're right.

133
00:07:07.906 --> 00:07:09.865
That's where error was.

134
00:07:09.865 --> 00:07:10.817
Cool, there you go.

135
00:07:10.817 --> 00:07:12.456
All right, sweet.

136
00:07:12.456 --> 00:07:14.755
So now we come out here.

137
00:07:14.755 --> 00:07:20.967
Now we could say, consul,

138
00:07:20.967 --> 00:07:27.592
or return to,
&gt;&gt; Scott Moss: Actually, no.

139
00:07:27.592 --> 00:07:28.493
Return to.
&gt;&gt; Scott Moss: Actually, no.

140
00:07:28.493 --> 00:07:33.281
For some reason, that's not working
the way I thought it was gonna work, hmm.

141
00:07:33.281 --> 00:07:35.414
Well, anyway, yeah,
that's normally the pattern.

142
00:07:35.414 --> 00:07:38.276
So you would come in here,
override the function and

143
00:07:38.276 --> 00:07:41.080
you return a new function
by calling it the old one.

144
00:07:41.080 --> 00:07:45.310
So this is great for like minimalization,
throttling, debouncing, stuff like that.

145
00:07:45.310 --> 00:07:47.540
There's actually a pretty cool
library called DecorateThis.

146
00:07:47.540 --> 00:07:51.090
But this guy has already
made like tons of cool

147
00:07:51.090 --> 00:07:53.610
decorators that I think
are very very helpful.

148
00:07:53.610 --> 00:07:56.477
I use them all the time, so
I highly recommend checking them out.

149
00:07:56.477 --> 00:07:59.249
&gt;&gt; Male Speaker 3: You got this?

150
00:07:59.249 --> 00:08:02.952
&gt;&gt; Scott Moss: Yeah,
mako-taco is his name.

151
00:08:02.952 --> 00:08:05.762
Yeah, mako-taco.

152
00:08:13.674 --> 00:08:16.742
&gt;&gt; Scott Moss: Cool, so
any questions on decorators.

153
00:08:16.742 --> 00:08:19.263
The reason the decorators are rubbish,
not because we're not gonna use them.

154
00:08:19.263 --> 00:08:23.097
Because I wanna show you something
with decorators in a minute.

155
00:08:23.097 --> 00:08:24.038
Yes?
&gt;&gt; Male Speaker 4: What type

156
00:08:24.038 --> 00:08:26.990
of problems do you usually solve for
decorators?

157
00:08:29.250 --> 00:08:30.875
&gt;&gt; Scott Moss: The same type of problems.

158
00:08:30.875 --> 00:08:35.095
I mean I donâ€™t know how
functional your writing style is.

159
00:08:35.095 --> 00:08:39.550
But if you're very functional, programmer
mixes a a thing that you use a lot, right?

160
00:08:39.550 --> 00:08:40.183
&gt;&gt; Male Speaker 4: Yeah.

161
00:08:40.183 --> 00:08:43.629
&gt;&gt; Scott Moss: So it's the same
time when I would use a mix in

162
00:08:43.629 --> 00:08:46.062
is when would use a decorator.

163
00:08:46.062 --> 00:08:48.155
But at the same time,
decorators are meant for

164
00:08:48.155 --> 00:08:50.416
like a more of a classical
programming language.

165
00:08:50.416 --> 00:08:52.611
Because they're only used in classes and
objects literal.

166
00:08:52.611 --> 00:08:53.937
So it's kind of weird.

167
00:08:53.937 --> 00:08:57.285
But like one common thing I see
myself doing a lot as minimizing.

168
00:08:57.285 --> 00:08:59.928
I do a lot of minimization of heavy stuff.

169
00:08:59.928 --> 00:09:00.750
So I use it there.

170
00:09:03.040 --> 00:09:06.890
Also throttling and debouncing is
very common for UI heavy stuff.

171
00:09:06.890 --> 00:09:10.690
All right, that's a very common
one that I see every time.

172
00:09:10.690 --> 00:09:14.998
And then actually decorated this has
a good example of some really cool stuff

173
00:09:14.998 --> 00:09:17.510
that I actually mentioned
at my talk at NRU.

174
00:09:17.510 --> 00:09:20.280
And it's like he found out a way to

175
00:09:21.310 --> 00:09:26.070
annotate types of the arguments and
return values and call time.

176
00:09:26.070 --> 00:09:29.330
So it's not like static analysis
like typescript words like

177
00:09:29.330 --> 00:09:30.220
this must be an array.

178
00:09:30.220 --> 00:09:33.920
It's like when the JavaScript runs if it's
not this type there will be an error.

179
00:09:33.920 --> 00:09:35.674
So he's doing that when
he shows you right here.

180
00:09:35.674 --> 00:09:40.365
Actually, I can talk about it,
but he allows you to,

181
00:09:40.365 --> 00:09:43.954
let's see,
&gt;&gt; Scott Moss: Where is it at?

182
00:09:43.954 --> 00:09:45.553
&gt;&gt; Male Speaker 5: It's right at the top.

183
00:09:45.553 --> 00:09:46.810
&gt;&gt; Scott Moss: Now my
computer's like frozen.

184
00:09:46.810 --> 00:09:47.677
There it is, yeah.

185
00:09:47.677 --> 00:09:54.006
So you can say what type of parameters
this method must take, a number or

186
00:09:54.006 --> 00:09:59.486
this type of stuff its pretty cool
&gt;&gt; Male Speaker 5: Yeah.

187
00:09:59.486 --> 00:10:00.739
&gt;&gt; Scott Moss: So again,
it's not static analysis.

188
00:10:00.739 --> 00:10:04.349
You won't have me tooling support
behind it, like Intelesense, but

189
00:10:04.349 --> 00:10:06.440
at calltime, you'll get some errors.

190
00:10:06.440 --> 00:10:07.970
Yes?

191
00:10:07.970 --> 00:10:10.580
&gt;&gt; Male Speaker 6: Felix and
I was wondering what your take on using

192
00:10:10.580 --> 00:10:14.570
decorators to register modules in
factories, like the Angular 2 way.

193
00:10:14.570 --> 00:10:15.321
&gt;&gt; Scott Moss: I think thatâ€™s awesome.

194
00:10:15.321 --> 00:10:23.044
In fact there's a library for that, too
&gt;&gt; Scott Moss: Ease up.

195
00:10:23.044 --> 00:10:24.644
I don't know, I can look for
it but I don't know.

196
00:10:24.644 --> 00:10:27.629
So there's this company called
Ease in San Francisco and

197
00:10:27.629 --> 00:10:30.690
one of the guys who works there,
he used to work for Ionic.

198
00:10:30.690 --> 00:10:34.966
He just made a library that allows
you to do that in Angular 1.

199
00:10:34.966 --> 00:10:36.720
&gt;&gt; Male Speaker 6: Sweet.
It's really cool, yeah.

200
00:10:36.720 --> 00:10:39.408
If I find any of it I'll post it,
but it's really, really cool.

201
00:10:42.935 --> 00:10:46.601
&gt;&gt; Scott Moss: Any other
questions on decorators?

202
00:10:46.601 --> 00:10:53.222
No, okay, so the next thing before I set
you loose and work on the other thing is.

203
00:10:53.222 --> 00:10:56.359
&gt;&gt; Male Speaker 6: Actually Felix
outposted the name of it NG Classy

204
00:10:56.359 --> 00:10:57.129
is that it?

205
00:10:57.129 --> 00:11:00.240
It looks like its under
the ease github group or-

206
00:11:00.240 --> 00:11:01.607
&gt;&gt; Scott Moss: That might be it.

207
00:11:01.607 --> 00:11:04.209
I think classy,
let me see I know there is a classy.

208
00:11:04.209 --> 00:11:08.581
I don't know if it's that one though,
let me see.

209
00:11:08.581 --> 00:11:14.042
No, let's see, GitHub, ng-classy.

210
00:11:14.042 --> 00:11:16.984
&gt;&gt; Male Speaker 6: It looks like
there's an app component at state.

211
00:11:16.984 --> 00:11:18.528
&gt;&gt; Scott Moss: Yeah, this is it.

212
00:11:20.556 --> 00:11:22.340
&gt;&gt; Scott Moss: Yeah, this is it, so yeah.

213
00:11:22.340 --> 00:11:23.064
This the one I was talking about.

214
00:11:23.064 --> 00:11:24.580
Yeah, this one is pretty cool.

215
00:11:24.580 --> 00:11:25.721
There is another Angular class.

216
00:11:25.721 --> 00:11:27.000
Yeah, I thought that's
the one he was talking about.

217
00:11:27.000 --> 00:11:27.690
That's something different.

218
00:11:28.810 --> 00:11:30.200
Cool, yeah so this one.

219
00:11:30.200 --> 00:11:33.060
This is pretty cool, and if it doesn't
really give you what you want, you can

220
00:11:33.060 --> 00:11:35.935
just look at how it works and you can
pretty much make it work however you want.

221
00:11:35.935 --> 00:11:38.198
So this is Aangular 1,
which is really cool.

222
00:11:38.198 --> 00:11:39.940
It looks like Angular 2, but it's not.

