WEBVTT

1
00:00:00.000 --> 00:00:03.873
[MUSIC]

2
00:00:03.873 --> 00:00:05.390
&gt;&gt; Scott Moss: So object shortcuts.

3
00:00:05.390 --> 00:00:08.880
This is probably one of my favorite
features and I always like trying to

4
00:00:08.880 --> 00:00:12.808
figure out how I can use more of it,
just so I can do it because it's so fun.

5
00:00:12.808 --> 00:00:15.496
So we can take advantage of method and

6
00:00:15.496 --> 00:00:20.090
property shortcuts on object literals and
classes.

7
00:00:20.090 --> 00:00:22.690
So up here you saw me
doing something like this.

8
00:00:22.690 --> 00:00:27.320
And it's like making a function but
not really, that's a method shortcut.

9
00:00:27.320 --> 00:00:30.960
So here's some more code because
it speaks better than I can.

10
00:00:30.960 --> 00:00:32.450
So I say, var enable = true.

11
00:00:32.450 --> 00:00:34.860
And then I have this object called config.

12
00:00:35.970 --> 00:00:39.450
And I have a property called enable,
and I immediately put a comma after it.

13
00:00:39.450 --> 00:00:43.650
And I had to do a key value pair, and
that's because in this same scope,

14
00:00:43.650 --> 00:00:46.392
there's a variable with
the exact same name.

15
00:00:46.392 --> 00:00:50.280
And because of that,
I don't have to put it twice.

16
00:00:50.280 --> 00:00:52.040
I don't have to say enable, colon, enable.

17
00:00:52.040 --> 00:00:53.720
It's just that.

18
00:00:53.720 --> 00:00:55.513
That's all I have to do.

19
00:00:55.513 --> 00:00:58.400
I don't have to do it twice because
it's the exact same name, all right?

20
00:00:59.640 --> 00:01:01.020
Does that make sense?

21
00:01:01.020 --> 00:01:02.340
It has to be the exact same name and

22
00:01:02.340 --> 00:01:05.300
it has to be accessible from where
I'm defining this thing, right?

23
00:01:05.300 --> 00:01:06.380
So if I go back here.

24
00:01:07.700 --> 00:01:14.480
So if I say, const, and so you can see
what the output looks like, val = 2.

25
00:01:14.480 --> 00:01:22.345
And then I say const ops = object, right?

26
00:01:22.345 --> 00:01:24.126
And then I can just say val.

27
00:01:24.126 --> 00:01:26.186
You see what it spits out on the right?

28
00:01:26.186 --> 00:01:30.370
It's like, yeah, you want that val,
val: val, right?

29
00:01:30.370 --> 00:01:32.665
That's what it did, it's pretty cool.

30
00:01:32.665 --> 00:01:36.515
So this is where that this is where these
brackets really get confusing because

31
00:01:36.515 --> 00:01:40.030
there's another feature in 6
that used the exact same thing.

32
00:01:40.030 --> 00:01:44.128
And it looks just like that,
and it won't be the same thing.

33
00:01:44.128 --> 00:01:46.757
In fact I'll just show you.
&gt;&gt; Students: [LAUGH]

34
00:01:52.112 --> 00:01:53.470
&gt;&gt; Speaker 3: Did you ever work with

35
00:01:53.470 --> 00:01:54.710
the Babel guys?
&gt;&gt; Scott Moss: No,

36
00:01:54.710 --> 00:01:57.180
I've never worked with the Babel guys.

37
00:01:57.180 --> 00:02:01.800
So if I said that, and then I wanted
to do something called destructuring.

38
00:02:01.800 --> 00:02:07.700
This is gonna break because I'm using
const, but I say const val = ops.

39
00:02:08.800 --> 00:02:12.400
It's like the opposite of what's above it,
but it's a completely different thing.

40
00:02:12.400 --> 00:02:13.500
That's called the destructuring.

41
00:02:13.500 --> 00:02:14.360
We'll talk about that later.

42
00:02:16.420 --> 00:02:18.140
Yeah, so it's really confusing.

43
00:02:18.140 --> 00:02:21.480
This is definitely an object and
this is not, but

44
00:02:21.480 --> 00:02:25.140
it's the exact same thing, so.
&gt;&gt; Speaker 4: So is the key differentiator

45
00:02:25.140 --> 00:02:28.901
there between the syntaxes that the
destructuring is on the left hand side of

46
00:02:28.901 --> 00:02:31.279
an equals sign versus on the- [CROSSTALK]
&gt;&gt; Scott Moss: Exactly,

47
00:02:31.279 --> 00:02:32.135
that's the key, yeah.

48
00:02:32.135 --> 00:02:34.155
It's on the left hand side, yep.

49
00:02:34.155 --> 00:02:35.148
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Scott Moss: Left hand side

50
00:02:35.148 --> 00:02:40.045
is definitely destructuring.
&gt;&gt; Scott Moss: Cool, so

51
00:02:40.045 --> 00:02:42.783
that's one shortcut.

52
00:02:42.783 --> 00:02:45.664
Same variable name and
then accessible scope,

53
00:02:45.664 --> 00:02:50.840
you can just bypass the key value
pairs but the key followed by comma.

54
00:02:50.840 --> 00:02:53.440
Good practice is to put those at
the top of your object literal.

55
00:02:54.910 --> 00:02:56.290
So they just look cleaner that way.

56
00:02:56.290 --> 00:02:58.460
And then the next one
is the method shortcut.

57
00:02:58.460 --> 00:03:02.670
So just like in a class, if we wanted to
find a method, we can just say the name of

58
00:03:02.670 --> 00:03:06.520
the method followed by parentheses
like we were executing the function,

59
00:03:06.520 --> 00:03:08.970
and then just make our brackets and
then go ahead and define.

60
00:03:08.970 --> 00:03:09.600
That's all we gotta do.

61
00:03:11.380 --> 00:03:12.450
That's it.

62
00:03:12.450 --> 00:03:14.850
So the only difference doing,
well I'm gonna tell you more about it, but

63
00:03:14.850 --> 00:03:19.310
the only different between this method
here and this object, and this method here

64
00:03:19.310 --> 00:03:23.490
in the class, inside of a class we don't
have the comma separate our methods.

65
00:03:23.490 --> 00:03:25.180
We only need commas underneath them.

66
00:03:25.180 --> 00:03:28.042
In an object, it's still an object,
you still need commas, so remember that.

67
00:03:28.042 --> 00:03:30.520
Always have to put commas after our stuff.

68
00:03:30.520 --> 00:03:33.260
So what that looks like
is something like this.

69
00:03:33.260 --> 00:03:39.707
So now we have val, right, and
then we'll put a comma there, and

70
00:03:39.707 --> 00:03:44.878
then we'll say, action,
and then we'll do that.

71
00:03:44.878 --> 00:03:47.240
You see it creates a function
called action over there.

72
00:03:50.740 --> 00:03:55.390
It also keeps the same context.

73
00:03:55.390 --> 00:03:56.840
It's like doing function binding.

74
00:03:56.840 --> 00:03:59.940
So it'll keep the same this
on the outside, inside.

75
00:03:59.940 --> 00:04:03.790
It's like doing .bind on this thing,
all right?

76
00:04:03.790 --> 00:04:07.000
It's the same as this other feature
that we're gonna talk about

77
00:04:07.000 --> 00:04:09.560
loosely because I kind of want
you guys to explore a little bit.

78
00:04:09.560 --> 00:04:10.490
It's the arrow functions.

79
00:04:10.490 --> 00:04:14.790
If you use CoffeeScript,
you know about arrow functions, right?

80
00:04:14.790 --> 00:04:17.928
So if I say var,

81
00:04:17.928 --> 00:04:23.970
later = a function, right?

82
00:04:23.970 --> 00:04:25.902
You have a function and
you'll do something.

83
00:04:25.902 --> 00:04:29.510
Well I could just get rid of
that function keyword and

84
00:04:29.510 --> 00:04:33.500
I can put this arrow underneath it.
&gt;&gt; Speaker 5: It's a fat arrow?

85
00:04:33.500 --> 00:04:34.060
&gt;&gt; Scott Moss: It's a fat arrow.

86
00:04:34.060 --> 00:04:35.900
There are no skinny arrows, yeah.

87
00:04:35.900 --> 00:04:37.340
And then it's the same thing.

88
00:04:38.630 --> 00:04:46.563
Except it keeps the scope of this.
&gt;&gt; Speaker 6: And

89
00:04:46.563 --> 00:04:48.256
so do method shortcuts.
&gt;&gt; Scott Moss: And so

90
00:04:48.256 --> 00:04:49.410
do method shortcuts, yes.

91
00:04:51.870 --> 00:04:55.610
Cool, so things to remember when using
method shortcuts the outside context

92
00:04:55.610 --> 00:04:57.260
is kept, just like .bind.

93
00:04:57.260 --> 00:05:01.820
When using method shortcuts
on object literals,

94
00:05:03.280 --> 00:05:08.010
you must still, not stull, you must still
obey the common rule with objects and

95
00:05:08.010 --> 00:05:09.160
you don't have to with classes.

96
00:05:10.390 --> 00:05:11.690
So are things to remember.

97
00:05:11.690 --> 00:05:13.630
Cool, any questions on this stuff?

98
00:05:13.630 --> 00:05:15.200
Yes.
&gt;&gt; Speaker 4: There's a question from

99
00:05:15.200 --> 00:05:15.870
Felix L online.

100
00:05:15.870 --> 00:05:19.200
What about the scope collision
when using this method shortcut?

101
00:05:19.200 --> 00:05:20.730
&gt;&gt; Scott Moss: Scope collision.

102
00:05:22.600 --> 00:05:24.010
&gt;&gt; Speaker 4: I think he means

103
00:05:24.010 --> 00:05:27.990
if you already had an action
defined in this scope.

104
00:05:27.990 --> 00:05:28.560
&gt;&gt; Scott Moss: This is fine.

105
00:05:28.560 --> 00:05:31.838
This is this is an action property on ops,
so it's encapsulated.

106
00:05:31.838 --> 00:05:36.118
So if I had action.

107
00:05:39.839 --> 00:05:41.559
&gt;&gt; Scott Moss: It's still fine.

108
00:05:41.559 --> 00:05:43.988
Yeah, what I meant by
keeping the same context,

109
00:05:43.988 --> 00:05:45.600
I mean if I were to count on a log.

110
00:05:45.600 --> 00:05:48.970
Let me get a good example, hold on.

111
00:05:48.970 --> 00:05:49.690
So if I had a function.

112
00:05:52.080 --> 00:05:52.950
Let's say let.

113
00:05:52.950 --> 00:05:54.840
I will use action again.

114
00:05:57.900 --> 00:06:04.608
Write a function and
it returns an object and it had run.

115
00:06:04.608 --> 00:06:07.887
And I'll write console.log this.

116
00:06:14.108 --> 00:06:14.728
&gt;&gt; Scott Moss: Right?

117
00:06:14.728 --> 00:06:17.730
What I'm saying is it will
keep the outside context.

118
00:06:17.730 --> 00:06:19.720
Whereas if I didn't do this, it wouldn't.

119
00:06:21.990 --> 00:06:23.320
Just like with set timeouts.

120
00:06:23.320 --> 00:06:30.409
If I said setTimeout which is
a common one that people do.

121
00:06:30.409 --> 00:06:32.120
Do setTimeout.

122
00:06:32.120 --> 00:06:34.644
And then you'll have,
normally you'll do something like this,

123
00:06:34.644 --> 00:06:41.169
you'll have your function here
&gt;&gt; Scott Moss: And then you'll come

124
00:06:41.169 --> 00:06:45.901
down here and you're like .bind this, and
then you'll do some stuff in here, right?

125
00:06:45.901 --> 00:06:47.360
Well now you don't have to do that.

126
00:06:47.360 --> 00:06:55.580
You can just get rid of this and use that.

127
00:06:55.580 --> 00:07:00.159
And now this.
&gt;&gt; Scott Moss: Is whatever it

128
00:07:00.159 --> 00:07:02.500
was.
&gt;&gt; Speaker 7: Can you show what

129
00:07:02.500 --> 00:07:03.330
it was before?

130
00:07:03.330 --> 00:07:05.509
Just anonymous function?
&gt;&gt; Scott Moss: Yeah,

131
00:07:05.509 --> 00:07:10.391
before it was just an anonymous function.
&gt;&gt; Scott Moss: In this case, and

132
00:07:10.391 --> 00:07:14.040
this is undefined, in this environment
this repo was nothing here.

133
00:07:14.040 --> 00:07:18.136
They both will be the window either way
because I'm on the global scope but,

134
00:07:18.136 --> 00:07:21.133
yeah.
&gt;&gt; Scott Moss: Yes.

135
00:07:21.133 --> 00:07:22.450
&gt;&gt; Speaker 8: So this is more just of

136
00:07:22.450 --> 00:07:25.980
a JavaScript question, but
when is that instantiated?

137
00:07:25.980 --> 00:07:28.460
When does it create a new this?
&gt;&gt; Scott Moss: When does

138
00:07:28.460 --> 00:07:29.440
it create a new this?

139
00:07:29.440 --> 00:07:30.320
So there's a lot of rules.

140
00:07:30.320 --> 00:07:33.430
So what happens to create a new this.

141
00:07:33.430 --> 00:07:37.760
One is like, so this is created
when a scope is executed, right?

142
00:07:37.760 --> 00:07:40.670
So on functional execution,
this is created under scope.

143
00:07:40.670 --> 00:07:41.770
So that's a this.

144
00:07:41.770 --> 00:07:42.707
And then when you use a method,

145
00:07:42.707 --> 00:07:45.420
whatever's to the left of the dot
is gonna be this, all right?

146
00:07:45.420 --> 00:07:47.790
So those are the two cases
when this is gonna be made.

147
00:07:47.790 --> 00:07:51.890
So whenever I make a, so
I have a function called action, right?

148
00:07:53.350 --> 00:07:54.260
I'm just defining it.

149
00:07:54.260 --> 00:07:56.980
I didn't create a scope yet,
but as soon as I do this,

150
00:07:56.980 --> 00:08:00.708
now there's a new this inside of action.
&gt;&gt; Speaker 8: Gotcha.

151
00:08:00.708 --> 00:08:01.400
&gt;&gt; Students: You see what I mean?

152
00:08:01.400 --> 00:08:01.900
&gt;&gt; Speaker 8: Mm-hm.

