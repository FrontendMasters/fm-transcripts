WEBVTT

1
00:00:00.000 --> 00:00:04.143
[MUSIC]

2
00:00:04.143 --> 00:00:06.163
&gt;&gt; Speaker 2: Do you
think Ionic is gonna be,

3
00:00:06.163 --> 00:00:11.330
are they forced to follow suit with
this import and register protocol?

4
00:00:11.330 --> 00:00:13.830
Cuz it seems like they're a bit behind,

5
00:00:13.830 --> 00:00:17.330
especially with their
like boilerplate Ionic.

6
00:00:17.330 --> 00:00:18.700
&gt;&gt; Scott Moss: Are we talking
about Ionic 1 or Ionic 2?

7
00:00:20.280 --> 00:00:23.130
&gt;&gt; Speaker 2: I'm assuming 2,
if that's stable.

8
00:00:23.130 --> 00:00:23.670
&gt;&gt; Scott Moss: No, it's not.

9
00:00:23.670 --> 00:00:25.357
It's not even close.

10
00:00:25.357 --> 00:00:27.670
&gt;&gt; Speaker 2: But I think I have
2 point something right now.

11
00:00:27.670 --> 00:00:30.260
I don't know, you get no, no,
you're right, it's like 1.6.

12
00:00:30.260 --> 00:00:32.301
&gt;&gt; Scott Moss: Yeah, it's 1.6.

13
00:00:32.301 --> 00:00:32.900
So, no, they're not forced to do it.

14
00:00:32.900 --> 00:00:34.330
Just like Angular isn't forced to do it.

15
00:00:34.330 --> 00:00:38.090
The way we're doing Angular now is not the
way that, well, I mean, Google did come

16
00:00:38.090 --> 00:00:41.565
out and say, hey, you should start
using components with Angular 1x now.

17
00:00:41.565 --> 00:00:43.977
They did, but
they don't have an official thing for it.

18
00:00:43.977 --> 00:00:46.881
It's just like, we prefer if you start
doing this this way, cuz it's better.

19
00:00:46.881 --> 00:00:49.431
Matthias, the guy who made ngAnimate,

20
00:00:49.431 --> 00:00:52.962
wrote a blog post about reusing
components [INAUDIBLE].

21
00:00:52.962 --> 00:00:57.913
So Ionic, I think it's kind of like what
Mark said, they're just really focused

22
00:00:57.913 --> 00:01:02.961
on Angular 2, Ionic 2 right now, and
that's just where all their attention is.

23
00:01:02.961 --> 00:01:04.979
So, cuz Ionic currently,
as it sits, is very stable.

24
00:01:04.979 --> 00:01:07.585
And they might have couple of
folks on it supporting it.

25
00:01:07.585 --> 00:01:10.954
But as far as bigger releases, I don't
think they're going to be doing that.

26
00:01:10.954 --> 00:01:11.859
And it's, and also,

27
00:01:11.859 --> 00:01:15.215
it's up to you if you want to use that
stuff, because Ionic doesn't care, right?

28
00:01:15.215 --> 00:01:18.218
If you want to use the imports and
stuff like that in ES2015 in Ionic,

29
00:01:18.218 --> 00:01:19.275
you can do that.

30
00:01:19.275 --> 00:01:21.222
It's the exact same setup
that we just did just now.

31
00:01:21.222 --> 00:01:23.045
You can use your own build system.

32
00:01:23.045 --> 00:01:25.415
You gotta start doing all that other
stuff, it'll work exactly the same way.

33
00:01:25.415 --> 00:01:28.773
So it's not really up to Ionic
to have to support that,

34
00:01:28.773 --> 00:01:32.283
it's really up to the browsers
to support that, right?

35
00:01:32.283 --> 00:01:37.031
So Ionic's going to run, depending on what
device you're in on, web view, Chrome, and

36
00:01:37.031 --> 00:01:40.040
Android version whatever,
and iOS Safari or whatever.

37
00:01:40.040 --> 00:01:41.150
So depending on that browser,

38
00:01:41.150 --> 00:01:44.160
that's what's going to dictate it if
you can run that stuff natively or not.

39
00:01:44.160 --> 00:01:47.340
So, and probably not,
cuz mobile web views are garbage,

40
00:01:47.340 --> 00:01:52.730
especially if you're on Android prior 4.2,
which is horrible.

41
00:01:52.730 --> 00:01:56.730
But they have downloads you can use,
like Crosswalk.

42
00:01:56.730 --> 00:01:57.790
Have you heard of Crosswalk?

43
00:01:57.790 --> 00:01:58.510
&gt;&gt; Speaker 2: No.

44
00:01:58.510 --> 00:01:59.090
&gt;&gt; Scott Moss: Okay.

45
00:01:59.090 --> 00:02:06.459
So, Crosswalk, not that,
let me see, Crosswalk Ionic.

46
00:02:06.459 --> 00:02:10.231
Yeah, so Crosswalk is,
it's fixed the problem on Android for

47
00:02:10.231 --> 00:02:13.650
previous versions of Android
that uses Chrome version,

48
00:02:13.650 --> 00:02:17.726
I think they were using 10 for
their web view, it was ridiculous.

49
00:02:17.726 --> 00:02:19.170
So you couldn't do anything in there.

50
00:02:19.170 --> 00:02:22.840
So Crosswalk installs the latest version
of Chrome on the older versions of

51
00:02:22.840 --> 00:02:23.790
Android.

52
00:02:23.790 --> 00:02:26.700
It adds about 20 megabytes to
your app download, though.

53
00:02:26.700 --> 00:02:29.700
But it gives you the latest
version of Chrome for

54
00:02:29.700 --> 00:02:33.340
your Ionic application,
which speeds up a lot of stuff.

55
00:02:33.340 --> 00:02:37.010
So I recommend using Crosswalk for
developing on Android.

56
00:02:37.010 --> 00:02:41.753
Otherwise, the features that you might
build, which might be cutting-edge,

57
00:02:41.753 --> 00:02:44.554
will only be able to
target devices after that.

58
00:02:44.554 --> 00:02:46.528
&gt;&gt; Speaker 2: Quick followup question.

59
00:02:46.528 --> 00:02:50.749
With that 20 megabytes, can they use that
new version of Chrome on their device,

60
00:02:50.749 --> 00:02:52.638
or is it just encapsulated in there?

61
00:02:52.638 --> 00:02:54.803
&gt;&gt; Scott Moss: Well, they should already
have the new version of Chrome on

62
00:02:54.803 --> 00:02:55.975
the device already, right?

63
00:02:55.975 --> 00:03:01.960
Cuz that's, so the thing is,
Ionic, the web views and PhoneGap

64
00:03:01.960 --> 00:03:05.575
doesn't use the actual browser that
you use when you click on the browser.

65
00:03:05.575 --> 00:03:06.928
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Those are two different

66
00:03:06.928 --> 00:03:07.581
things, yeah.

67
00:03:07.581 --> 00:03:08.170
It doesn't use that.
So,

68
00:03:08.170 --> 00:03:10.020
when you're inside of
a native application and

69
00:03:10.020 --> 00:03:13.281
you open up the web view, it's not like
opening up Safari, opening up Chrome.

70
00:03:13.281 --> 00:03:13.899
&gt;&gt; Speaker 2: Right.

71
00:03:13.899 --> 00:03:15.052
&gt;&gt; Scott Moss: It's opening up a web view,

72
00:03:15.052 --> 00:03:18.310
which is not the same thing as
the Chrome or Safari that you click on.

73
00:03:18.310 --> 00:03:20.275
So this is like a way to
have that same thing.

74
00:03:20.275 --> 00:03:24.170
Yes?

75
00:03:24.170 --> 00:03:27.210
&gt;&gt; Speaker 3: So
[COUGH] in the application we built,

76
00:03:27.210 --> 00:03:30.320
when we made a service,
we put it in the shared module.

77
00:03:30.320 --> 00:03:31.720
&gt;&gt; Scott Moss: Yes.

78
00:03:31.720 --> 00:03:36.420
&gt;&gt; Speaker 3: Have you ever,
let's say we had 20 or 30 or 40 services,

79
00:03:36.420 --> 00:03:40.513
do you normally tag those all
on to that shared module?

80
00:03:40.513 --> 00:03:45.180
Or do you split that up into certain ways,
or how do you scale that?

81
00:03:45.180 --> 00:03:48.170
&gt;&gt; Scott Moss: Right, so, if they were
all gonna be shared across more than

82
00:03:48.170 --> 00:03:51.430
one component, then yeah,
it's probably where they would go.

83
00:03:51.430 --> 00:03:55.690
But if they were only belonging
to one component, right?

84
00:03:55.690 --> 00:03:56.720
Or for instance, let's look at it.

85
00:03:56.720 --> 00:03:58.140
&gt;&gt; Speaker 3: Then you
would do the lift thing.

86
00:03:58.140 --> 00:04:00.200
&gt;&gt; Scott Moss: Right, so
think of it like a tree.

87
00:04:00.200 --> 00:04:03.940
So we have this about component that
also might have some stuff in here.

88
00:04:03.940 --> 00:04:08.330
So if we had a service that only started
with the about tree and it worked, and

89
00:04:08.330 --> 00:04:11.950
maybe about had also child components or
whatever,

90
00:04:11.950 --> 00:04:14.210
then that's where I would put
the service or the factory.

91
00:04:14.210 --> 00:04:15.420
That's it,
doesn't need to be anywhere else.

92
00:04:15.420 --> 00:04:16.780
It doesn't need to be in shared.

93
00:04:16.780 --> 00:04:20.900
But as soon as two siblings need it,
you have to put in the common parent.

94
00:04:20.900 --> 00:04:21.609
&gt;&gt; Speaker 3: Okay.

95
00:04:21.609 --> 00:04:26.980
But you don't try to group services
inside like a shared module.

96
00:04:26.980 --> 00:04:28.787
So you.

97
00:04:28.787 --> 00:04:29.844
&gt;&gt; Scott Moss: No.

98
00:04:29.844 --> 00:04:32.800
I mean, it'll get complicated when you
have services that rely on other services.

99
00:04:32.800 --> 00:04:35.130
Then you've got to find a good
way to get around that,

100
00:04:35.130 --> 00:04:36.750
because I don't think there's a really.

101
00:04:36.750 --> 00:04:38.810
You're going to have to
sacrifice something,

102
00:04:38.810 --> 00:04:43.300
because if you make a service
that's only about users, but

103
00:04:43.300 --> 00:04:47.030
that service uses something
that's only in admin, right?

104
00:04:47.030 --> 00:04:49.850
Then what happens, right?

105
00:04:49.850 --> 00:04:52.496
So then now you have to think about,
what service do I take out and

106
00:04:52.496 --> 00:04:53.384
put somewhere else?

107
00:04:53.384 --> 00:04:56.441
So you've gotta start
thinking about that stuff.

108
00:04:56.441 --> 00:04:59.649
So the easy win is, I just put
everything in shared, which you can,

109
00:04:59.649 --> 00:05:00.766
you can totally do that.

110
00:05:00.766 --> 00:05:04.533
But I try to stay modular as possible
until I run into a problem, and

111
00:05:04.533 --> 00:05:07.035
then figure out a good
solution from there.

112
00:05:07.035 --> 00:05:07.826
&gt;&gt; Speaker 3: Okay.

113
00:05:07.826 --> 00:05:08.935
&gt;&gt; Scott Moss: Yeah.

114
00:05:08.935 --> 00:05:12.271
Yo?

115
00:05:12.271 --> 00:05:16.977
&gt;&gt; Speaker 4: Do you know if JSPM has,
allows you to import HTML files,

116
00:05:16.977 --> 00:05:19.734
images, kind of like with your?

117
00:05:19.734 --> 00:05:20.616
&gt;&gt; Scott Moss: Yep.

118
00:05:20.616 --> 00:05:21.482
&gt;&gt; Speaker 4: Okay.

119
00:05:21.482 --> 00:05:22.916
&gt;&gt; Scott Moss: You can totally do that.

120
00:05:22.916 --> 00:05:23.722
So JSPM, well, actually,
System.js allows you to do

121
00:05:23.722 --> 00:05:24.247
it, JSPM is just like the manager.

122
00:05:24.247 --> 00:05:29.824
So, yeah, System.js, they have a,
I'll show you right now.

123
00:05:29.824 --> 00:05:34.000
The syntax is, it's actually just
a little different than webpack.

124
00:05:34.000 --> 00:05:37.409
So System.js,
I think what we want is the text plugin.

125
00:05:42.298 --> 00:05:45.660
&gt;&gt; Scott Moss: Yeah, so System.js
has all these plugins right here.

126
00:05:45.660 --> 00:05:48.849
Let me just find the one
that you're talking about.

127
00:05:48.849 --> 00:05:50.000
Here we go, Image CSS.

128
00:05:50.000 --> 00:05:53.040
Yeah, so all these plugins right here,
they support, created by Guy Bedford.

129
00:05:53.040 --> 00:05:56.900
So, you can import CSS files,
import images, import JSON files,

130
00:05:56.900 --> 00:05:58.234
import text files.

131
00:05:58.234 --> 00:05:59.430
&gt;&gt; Speaker 2: Yeah,
that's right, the bang.

132
00:05:59.430 --> 00:06:00.470
&gt;&gt; Scott Moss: Right, with the bang.

133
00:06:00.470 --> 00:06:03.230
And actually, in webpack,
it's the same thing, but

134
00:06:03.230 --> 00:06:04.760
we just happen to use loaders instead.

135
00:06:04.760 --> 00:06:08.880
But like with webpack,
you could also do this in webpack.

136
00:06:08.880 --> 00:06:15.460
So we just say import style, because we
have configured our loaders to do that.

137
00:06:15.460 --> 00:06:22.270
But we can also do this same
thing inside of here, too.

138
00:06:23.370 --> 00:06:25.238
Or, let me go to a directive.

139
00:06:25.238 --> 00:06:27.840
All right, hold on.

140
00:06:27.840 --> 00:06:29.500
Yeah, we can also do
the same thing in here, too.

141
00:06:29.500 --> 00:06:30.017
Something like that.
All right,

142
00:06:30.017 --> 00:06:32.748
it's just that we did it in the loader,
so it doesn't have to happen.

143
00:06:32.748 --> 00:06:35.520
But yeah, it's kind of the same,
but a little different.

144
00:06:36.610 --> 00:06:37.679
Here are the plugins.

145
00:06:37.679 --> 00:06:42.448
It just doesn't support everything,
there isn't one that I know of for

146
00:06:42.448 --> 00:06:44.750
Sass, Less, and Stylus in JSPM.

147
00:06:44.750 --> 00:06:46.053
So you gotta figure that out.

148
00:06:46.053 --> 00:06:48.029
But there are some really,
really good ones.

149
00:06:50.950 --> 00:06:51.650
&gt;&gt; Scott Moss: Cool.

150
00:06:53.350 --> 00:06:56.341
Any other questions or want to knows?

151
00:06:56.341 --> 00:06:57.040
Yes?
&gt;&gt; Speaker 5: There's a couple

152
00:06:57.040 --> 00:06:58.120
from online.

153
00:06:58.120 --> 00:06:59.590
&gt;&gt; Scott Moss: All right.

154
00:06:59.590 --> 00:07:01.530
&gt;&gt; Speaker 5: Let's see.

155
00:07:01.530 --> 00:07:05.670
John M is wondering what your
preferred hybrid frameworks for

156
00:07:05.670 --> 00:07:07.450
building mobile apps are?

157
00:07:07.450 --> 00:07:08.970
&gt;&gt; Scott Moss: Definitely Ionic.

158
00:07:08.970 --> 00:07:10.670
Ionic is number one.

159
00:07:10.670 --> 00:07:12.435
Number two is Supersonic?

160
00:07:12.435 --> 00:07:19.602
&gt;&gt; Speaker 5: [INAUDIBLE]
React Native.

161
00:07:19.602 --> 00:07:22.668
&gt;&gt; Scott Moss: Well,
React Native is not really hybrid, right?

162
00:07:22.668 --> 00:07:25.421
[CROSSTALK]
&gt;&gt; Speaker 5: Native means the same

163
00:07:25.421 --> 00:07:25.923
thing, right?

164
00:07:25.923 --> 00:07:27.375
&gt;&gt; Scott Moss: When I think hybrid,
I think of web view.

165
00:07:27.375 --> 00:07:28.669
&gt;&gt; Speaker 5: Yeah.

166
00:07:28.669 --> 00:07:30.721
&gt;&gt; Scott Moss: React Native is native, so.

167
00:07:30.721 --> 00:07:32.561
It just feels like it's hybrid.

168
00:07:32.561 --> 00:07:37.877
But let me see, supersonic hybrid ionic.

169
00:07:37.877 --> 00:07:42.022
Yeah, Supersonic, yeah, this one.

170
00:07:42.022 --> 00:07:45.726
So this is a fork of Ionic that
AppGyver forked and made and

171
00:07:45.726 --> 00:07:47.820
they do some pretty cool stuff.

172
00:07:47.820 --> 00:07:49.390
They use web components and stuff.

173
00:07:49.390 --> 00:07:51.670
So highly recommend checking this one out.

174
00:07:51.670 --> 00:07:54.000
This is definitely a good one.

175
00:07:54.000 --> 00:07:54.960
There's also a React one.

176
00:07:54.960 --> 00:07:57.525
I haven't used it, but
I heard good things about it.

177
00:07:57.525 --> 00:08:01.910
React hybrid phonegap,
let me see if I can find it.

178
00:08:07.170 --> 00:08:10.110
&gt;&gt; Scott Moss: That was probably just lost
in Google now, because of React Native.

179
00:08:10.110 --> 00:08:12.310
But there's also a React hybrid one, too.

180
00:08:12.310 --> 00:08:16.010
But definitely Ionic, and then if I had to
choose another, it would be Supersonic,

181
00:08:16.010 --> 00:08:20.740
because it's just a fork of Ionic with
some more conventions on top of it.

182
00:08:20.740 --> 00:08:22.100
Less configuration, more conventions.

183
00:08:25.500 --> 00:08:28.530
&gt;&gt; Speaker 2: So,
with web components, have you tried?

184
00:08:28.530 --> 00:08:33.185
We touched on them earlier with Polymer,
but have you tried using them in Angular,

185
00:08:33.185 --> 00:08:35.123
and how do you see that as working?

186
00:08:35.123 --> 00:08:36.955
&gt;&gt; Scott Moss: To be honest,
it's really hard.

187
00:08:36.955 --> 00:08:38.064
[LAUGH] It's easy.

188
00:08:38.064 --> 00:08:40.230
The hard part comes when
you start doing bindings.

189
00:08:40.230 --> 00:08:44.183
So, if you want to bind some scope or
some controller variable,

190
00:08:44.183 --> 00:08:46.610
a model to a web component, good luck.

191
00:08:46.610 --> 00:08:49.366
It's really, really tough,
you gotta do some hacky stuff.

192
00:08:49.366 --> 00:08:52.820
And then it also depends on what
you're using for web components, too.

193
00:08:52.820 --> 00:08:56.110
If you're using just raw web components,
probably a little easier to do that,

194
00:08:56.110 --> 00:08:58.444
but it's a little harder
to make the web component.

195
00:08:58.444 --> 00:09:01.510
If you're using something like Polymer,
it's easier to make the web component, but

196
00:09:01.510 --> 00:09:03.520
because Polymer has its
own data binding syntax,

197
00:09:03.520 --> 00:09:06.310
it's going to be a little bit
more confusing to bind the data.

198
00:09:06.310 --> 00:09:10.850
Although I think Polymer 1.0 does support,
let's see.

199
00:09:10.850 --> 00:09:12.312
Polymer 1.0.

200
00:09:12.312 --> 00:09:16.460
They do support really good
stuff with Angular now.

201
00:09:16.460 --> 00:09:19.740
So there's actually a really
good blog post on it right here.

202
00:09:19.740 --> 00:09:20.890
So you can check this one out.

203
00:09:20.890 --> 00:09:25.724
But yeah, they support a really good way
of doing it now, whereas before, it was,

204
00:09:25.724 --> 00:09:27.601
I couldn't figure it out, so.

