WEBVTT

1
00:00:00.000 --> 00:00:05.841
So, we're gonna modify to use
subscribe action in our plugin itself.

2
00:00:05.841 --> 00:00:09.408
And so, we're not gonna do anything
much besides add it for now.

3
00:00:09.408 --> 00:00:14.919
So, what we'll do is I'm just
gonna do subscribe action.

4
00:00:14.919 --> 00:00:18.617
And it's actually really
similar to mutation or

5
00:00:18.617 --> 00:00:23.500
what we have above, except it takes
in an action and a state now.

6
00:00:23.500 --> 00:00:28.908
So, just to show you what that looks like,

7
00:00:28.908 --> 00:00:33.276
I'm not doing anything besides.

8
00:00:33.276 --> 00:00:38.033
Let's just log in, because I think we
haven't really talked much about what to

9
00:00:38.033 --> 00:00:39.597
do and why this is useful.

10
00:00:39.597 --> 00:00:44.940
So, let's look at what

11
00:00:44.940 --> 00:00:49.754
exactly is in there.

12
00:00:49.754 --> 00:00:53.942
I'm gonna remove state,
cuz I'm not gonna use it for now.

13
00:00:53.942 --> 00:00:58.513
Where's the parser might yell at me,
cuz it might say.

14
00:00:58.513 --> 00:01:01.359
Okay, so currently,
I created subscribe action,

15
00:01:01.359 --> 00:01:05.317
all it's doing is it's console logging
the action type in the payload.

16
00:01:05.317 --> 00:01:08.495
And it's useful just because I wanna
know like hey, what's happening here?

17
00:01:08.495 --> 00:01:10.885
Is it working?

18
00:01:10.885 --> 00:01:14.212
So, let's see if it worked.

19
00:01:14.212 --> 00:01:18.448
So, I click this button, and
then I see that I have action type,

20
00:01:18.448 --> 00:01:21.049
and I have an action of payload as well.

21
00:01:21.049 --> 00:01:25.703
The action type is service machine,
the action payload is undefined view,

22
00:01:25.703 --> 00:01:28.697
cuz there is nothing
that's being passed to it.

23
00:01:28.697 --> 00:01:32.326
Actually, no, this is a mutation.

24
00:01:32.326 --> 00:01:35.936
Yeah, potentially because there's
nothing being passed to it..

25
00:01:35.936 --> 00:01:41.357
Let's see if my theory's right.

26
00:01:41.357 --> 00:01:43.630
The action type is called service machine.

27
00:01:43.630 --> 00:01:46.417
So, let's go into Service Machine,

28
00:01:46.417 --> 00:01:50.173
and indeed there is no
payload associated with it.

29
00:01:50.173 --> 00:01:55.507
Because I'm just automatically calling
new date and passing it that way.

30
00:01:55.507 --> 00:02:01.179
So, the mutation actually has
the payload but the action has nothing.

31
00:02:01.179 --> 00:02:06.623
So as results, the action is just
giving me the payload of undefined.

32
00:02:06.623 --> 00:02:09.752
So, that's accurate, and
that's exactly what I expected.

33
00:02:09.752 --> 00:02:13.655
So, this particular exercise was nothing
more than just sort of hooking that up and

34
00:02:13.655 --> 00:02:14.837
playing around with it.

35
00:02:14.837 --> 00:02:18.428
There's nothing more that I
expected to be done here.

36
00:02:18.428 --> 00:02:21.791
But we'll go into detail as to like,
why this could be useful?

37
00:02:21.791 --> 00:02:26.504
So, one thing that is neat about
action that's very unique with

38
00:02:26.504 --> 00:02:30.257
subscribing to actions and
not mutations is that,

39
00:02:30.257 --> 00:02:34.205
within subscribe action you
have a before and after.

40
00:02:34.205 --> 00:02:38.528
So you can see before the action occurs
and then after the action occurs.

41
00:02:38.528 --> 00:02:43.446
The nice thing about doing it this way is
that you can see state changes that happen

42
00:02:43.446 --> 00:02:44.690
within the plugin.

43
00:02:44.690 --> 00:02:49.963
So again,
before is before the dispatch happens,

44
00:02:49.963 --> 00:02:54.632
and after it's after the dispatch happens.

45
00:02:54.632 --> 00:02:59.528
By default, I believe the before
is where your code runs, so

46
00:02:59.528 --> 00:03:05.290
it's not after it's before, so
it's before the action dispatches.

47
00:03:05.290 --> 00:03:06.927
So, why is this useful?

48
00:03:06.927 --> 00:03:09.902
Well, one instance in which it
can be useful is, let's say,

49
00:03:09.902 --> 00:03:12.664
we've been talking about
servicing a machine, right?

50
00:03:12.664 --> 00:03:17.596
And you might want to check the frequency
at which a service a machine is service.

51
00:03:17.596 --> 00:03:18.248
Let's say,

52
00:03:18.248 --> 00:03:22.296
like compare when it was last service
with when it's currently being serviced.

53
00:03:22.296 --> 00:03:26.935
And so, in order to make a comparison
of previous state and current state,

54
00:03:26.935 --> 00:03:30.117
you would need a before and
after sort of snapshot.

55
00:03:30.117 --> 00:03:36.055
And to do this, a subscribe action is
the perfect way in which this is useful.

56
00:03:36.055 --> 00:03:38.640
And so, for that for our next exercise,

57
00:03:38.640 --> 00:03:43.980
we're going to actually dive into the
before, after pieces of subscribe action.

58
00:03:43.980 --> 00:03:49.925
And hook it up in such a way that we
noticed frequency and calculate frequency.

59
00:03:49.925 --> 00:03:55.669
Let's say, the time in which last
service occurred from current service.

60
00:03:55.669 --> 00:03:59.731
And so, for this I need to
check the type of the action.

61
00:03:59.731 --> 00:04:05.663
So, I think the action was
called Service machine.

62
00:04:05.663 --> 00:04:08.814
So, that's the action that we want.

63
00:04:08.814 --> 00:04:14.404
So, I'm gonna do action.type
= servicemachine, like so.

64
00:04:14.404 --> 00:04:17.123
And then,
all of the logic sort of lives there.

65
00:04:17.123 --> 00:04:20.535
And I wanna bring state back
because I'm actually gonna use it.

66
00:04:20.535 --> 00:04:22.600
So, I'm gonna bring my state back.

67
00:04:22.600 --> 00:04:27.293
And so, what I wanna do next is I want

68
00:04:27.293 --> 00:04:31.359
to check to see the I think it's

69
00:04:31.359 --> 00:04:36.846
lastServiced is what I want to check for.

70
00:04:36.846 --> 00:04:41.193
So, in my state lastServiced
is a date object.

71
00:04:41.193 --> 00:04:44.482
So, state lastServiced is a date object,
so state,lateService.get,

72
00:04:44.482 --> 00:04:46.476
I don't know getTime or something, maybe.

73
00:04:46.476 --> 00:04:53.024
And then, let's see newDate.getTime -,

74
00:04:53.024 --> 00:04:56.814
which will give me the time

75
00:04:56.814 --> 00:05:01.826
distance between the two events.

76
00:05:01.826 --> 00:05:05.320
Let's check if my code is correct or
it's correct.

77
00:05:05.320 --> 00:05:10.228
And so,
now I can just console.log the time lapse.

78
00:05:10.228 --> 00:05:14.196
So, let's say time lapse and

79
00:05:14.196 --> 00:05:19.446
then time distance, do have an error?

80
00:05:19.446 --> 00:05:25.257
New date is not defined,
it's also space area.

81
00:05:25.257 --> 00:05:28.043
All right, now I can click the button, and

82
00:05:28.043 --> 00:05:31.775
I can see that the time lapse and
this is in milliseconds.

83
00:05:31.775 --> 00:05:34.804
So, you just divide it by 1,000, and

84
00:05:34.804 --> 00:05:39.280
then you'll get like three seconds
is the time lapse and so on.

85
00:05:39.280 --> 00:05:46.053
And so, obviously, you can try to change
like you format it however you want.

86
00:05:46.053 --> 00:05:50.513
But the idea remains the same that
essentially what I'm doing is I am

87
00:05:50.513 --> 00:05:52.870
checking the before and the after.

88
00:05:52.870 --> 00:05:57.179
I think what could be useful also is,

89
00:05:57.179 --> 00:06:01.770
I didn't even do before did I, silly.

90
00:06:01.770 --> 00:06:07.042
Though that would have been really handy,
but I didn't do it.

91
00:06:07.042 --> 00:06:14.929
So, that was actually neat because
that was the thing I'm checking for

92
00:06:14.929 --> 00:06:21.250
is by default before, so
it's gonna live there anyway.

93
00:06:21.250 --> 00:06:24.655
And what I wanna do now is the after.

94
00:06:24.655 --> 00:06:26.805
So, we talked about before and after, but

95
00:06:26.805 --> 00:06:29.092
I think it's useful to
hook those things up.

96
00:06:29.092 --> 00:06:33.540
So, I would like to start by looking at

97
00:06:33.540 --> 00:06:38.545
the last service as in
a way of comparison.

98
00:06:38.545 --> 00:06:43.673
So, just seeing how things change before
and after the action happens, let's see.

99
00:06:43.673 --> 00:06:46.627
So, I'm missing some stuff here.

100
00:06:46.627 --> 00:06:50.820
So, I need to get the action
as well as the state.

101
00:06:50.820 --> 00:06:55.989
I guess I'm not using action,
so I'm just gonna get state.

102
00:06:55.989 --> 00:07:02.745
And then, I will console log,
the states specifically last service.

103
00:07:02.745 --> 00:07:07.694
I have an error,
I had written it as action and state.

104
00:07:07.694 --> 00:07:13.123
So, this works if you're not doing this,
but if you are you can't do this anymore.

105
00:07:13.123 --> 00:07:16.227
You have to just because it's an object,

106
00:07:16.227 --> 00:07:21.115
it has to be before and after,
like so, so that that should work.

107
00:07:21.115 --> 00:07:25.131
And then, if we run the code,

108
00:07:25.131 --> 00:07:28.826
you'll be able to see the,

109
00:07:28.826 --> 00:07:35.269
I think it's useful to write before and
after.

110
00:07:40.380 --> 00:07:45.396
So, we'll see before and
then after is undefined.

111
00:07:45.396 --> 00:07:49.836
Great, I think cuz you have to pass in.

112
00:07:58.206 --> 00:08:02.286
Yeah, I think it has to take in the order,
yeah.

113
00:08:02.286 --> 00:08:07.098
So, you can't like ignore
this because it's ordered.

114
00:08:07.098 --> 00:08:10.507
Yeah, it has to be action and
state, so my bad.

115
00:08:10.507 --> 00:08:14.204
So essentially, what I'm doing is I'm
checking the before and after to make sure

116
00:08:14.204 --> 00:08:17.219
that there is a difference there and
there is indeed a difference.

117
00:08:17.219 --> 00:08:21.877
So, if I click the button,
you'll see that the before happens at

118
00:08:21.877 --> 00:08:27.400
16:20:14 GMT-05, and
the after happens at 16:20:31.

119
00:08:27.400 --> 00:08:34.347
Which is about like 16 millisecond or
16 seconds actually in between the two.

120
00:08:34.347 --> 00:08:39.523
And so, that is essentially how
state changes within the two.

121
00:08:39.523 --> 00:08:45.305
Just to show you how you can use
plugins in order to grab specific,

122
00:08:45.305 --> 00:08:52.366
to spy or look into your store without
having to change the store specifically.

123
00:08:52.366 --> 00:08:54.849
And so that is Vuex plugins.

