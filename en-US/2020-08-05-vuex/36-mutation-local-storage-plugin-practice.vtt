WEBVTT

1
00:00:00.000 --> 00:00:02.713
What we'll start with,
is we'll subscribe to a mutation.

2
00:00:02.713 --> 00:00:06.689
So again, we'll look at that syntax,
we just stall that subscribe.

3
00:00:06.689 --> 00:00:09.837
It takes in a mutation in the state,
that's all it does.

4
00:00:09.837 --> 00:00:12.846
Another thing to note,
I'm calling it persist service date,

5
00:00:12.846 --> 00:00:14.563
because that's what it's doing.

6
00:00:14.563 --> 00:00:19.533
It's persisting the time and
date of when the machine will service,

7
00:00:19.533 --> 00:00:22.796
so I called it persist
service state plugin.

8
00:00:22.796 --> 00:00:25.570
You might have heard of
various other plugins,

9
00:00:25.570 --> 00:00:28.976
like UX Persistent Data,
I think, is what it's called.

10
00:00:28.976 --> 00:00:34.520
That's also another example of using
a plugin to persist state across sessions,

11
00:00:34.520 --> 00:00:36.460
and across tabs, and so on.

12
00:00:36.460 --> 00:00:39.916
So this is sort of similar in that vein.

13
00:00:39.916 --> 00:00:45.731
So what I'll do first, is now that I have
this subscription, boilerplate code, so to

14
00:00:45.731 --> 00:00:51.403
speak, I might want to grab and figure out
what exactly the mutation I care about is.

15
00:00:51.403 --> 00:00:55.537
So in this instance,
because this is persisted service date,

16
00:00:55.537 --> 00:00:59.439
I care a lot about the mutation
called update service date.

17
00:00:59.439 --> 00:01:05.202
So I might want to check for that type to
be like is this mutation of type this,

18
00:01:05.202 --> 00:01:07.918
and if so, it does something else.

19
00:01:07.918 --> 00:01:11.664
And then, within that,
I can also do extra things,

20
00:01:11.664 --> 00:01:14.739
like I might save things to local storage.

21
00:01:14.739 --> 00:01:19.358
So here, I'm essentially checking to
make sure the mutation is of type,

22
00:01:19.358 --> 00:01:20.778
update service date.

23
00:01:20.778 --> 00:01:24.593
And if so,
I'm going to try to set the last

24
00:01:24.593 --> 00:01:29.077
service date to whatever
it is to local storage.

25
00:01:29.077 --> 00:01:33.302
So every time I'm accessing it,
let's say, I can just grab,

26
00:01:33.302 --> 00:01:38.189
local storage has information as to
when the machine was last serviced.

27
00:01:38.189 --> 00:01:42.240
So that can be useful in terms of
propagating the state to make sure

28
00:01:42.240 --> 00:01:45.482
that when you refresh your screen,
that number, or

29
00:01:45.482 --> 00:01:50.292
that specific date gets propagated into
the state without it being updated.

30
00:01:51.872 --> 00:01:57.710
So we're gonna start by creating our
first Vuex Plugin called persist.

31
00:01:57.710 --> 00:02:00.622
I think I call it persist service dates.

32
00:02:00.622 --> 00:02:03.054
And then, we gonna go from there and

33
00:02:03.054 --> 00:02:06.712
work on exercises as to how
we can progress from this.

34
00:02:06.712 --> 00:02:10.880
What we started with here,

35
00:02:10.880 --> 00:02:14.684
is I'm going to find my,

36
00:02:14.684 --> 00:02:18.678
this is the wrong folder.

37
00:02:18.678 --> 00:02:22.374
I'm currently in the Vuex Plugins,
so I'm gonna go in there, and

38
00:02:22.374 --> 00:02:25.676
then, I'm going to go specifically
in my plugins folder.

39
00:02:25.676 --> 00:02:27.856
So far, I have this boilerplate,

40
00:02:27.856 --> 00:02:32.754
which just shows me my persists data
plugin, which is the name of the plugin.

41
00:02:32.754 --> 00:02:39.685
And I'm default exporting it, and you
might also notice that in my store code,

42
00:02:39.685 --> 00:02:45.491
I am adding it to the top,
which I didn't do yet, but I will do now.

43
00:02:45.491 --> 00:02:49.435
So I will import, let's call it,

44
00:02:49.435 --> 00:02:55.283
let's just do persist data
plugin from a plugins,

45
00:02:55.283 --> 00:03:00.860
persist data, and then,
I will pass it in here.

46
00:03:00.860 --> 00:03:05.828
Like so, so I'm importing the plugin, and

47
00:03:05.828 --> 00:03:08.928
then, I'm passing it in.

48
00:03:08.928 --> 00:03:12.194
So that should make it
accessible immediately.

49
00:03:12.194 --> 00:03:17.439
Cool, so that means that it
can do a bunch of things.

50
00:03:17.439 --> 00:03:21.885
So I'm gonna check to make sure that
everything is wired up, because,

51
00:03:21.885 --> 00:03:24.344
sometimes, things aren't wired up.

52
00:03:24.344 --> 00:03:30.296
And so, I automatically see that
I'm getting the mutation type,

53
00:03:30.296 --> 00:03:35.306
as well as the payload, and
I can see things happening.

54
00:03:35.306 --> 00:03:39.235
So that means my console logs are working,
is console logging the mutation,

55
00:03:39.235 --> 00:03:40.332
as well as the state.

56
00:03:40.332 --> 00:03:46.280
So what I wanna do now, is I want to
check for the specific mutation type.

57
00:03:46.280 --> 00:03:48.690
So I'm gonna do mutation type.

58
00:03:48.690 --> 00:03:53.025
And I'm checking that it is of,

59
00:03:53.025 --> 00:03:59.136
I think it was called
update service states.

60
00:04:01.751 --> 00:04:05.673
So I'm gonna check that, and then,

61
00:04:05.673 --> 00:04:09.975
I'm gonna do some stuff if it works, and

62
00:04:09.975 --> 00:04:16.311
the specific thing I'm gonna
do is copy and paste the code.

63
00:04:16.311 --> 00:04:22.956
I'm going to create a record, and
then, save that to local state.

64
00:04:22.956 --> 00:04:26.887
So the record is essentially
just checking, so

65
00:04:26.887 --> 00:04:30.338
you might notice state.lastServiced.

66
00:04:30.338 --> 00:04:35.506
So I'm actually accessing the state to
make sure that I am logging when the date

67
00:04:35.506 --> 00:04:40.932
of the last service happened, because,
that's obviously a mutation, right?

68
00:04:40.932 --> 00:04:43.679
So I wanna know when
exactly that happened.

69
00:04:43.679 --> 00:04:47.674
And then, I also wanna be like,
maybe I want a thing called persist for

70
00:04:47.674 --> 00:04:52.298
to check like, how long this information
should be persisted for, let's see.

71
00:04:52.298 --> 00:04:54.730
And then,
that's one record that I can create.

72
00:04:54.730 --> 00:05:01.111
And then, my try catch block is where
I will add that specific last service,

73
00:05:01.111 --> 00:05:05.696
or that specific record as last service,
itself, and

74
00:05:05.696 --> 00:05:10.802
then, I think the last bit was
just I need this boilerplate.

75
00:05:12.748 --> 00:05:13.781
Yes.

76
00:05:15.441 --> 00:05:18.158
It's not boilerplate, I wrote it.

77
00:05:20.437 --> 00:05:21.606
Okay, cool.

78
00:05:21.606 --> 00:05:28.686
So if this works,
we will have a handy dandy.

79
00:05:31.254 --> 00:05:32.633
Let's do.

80
00:05:32.633 --> 00:05:34.138
I think it's done?

81
00:05:41.064 --> 00:05:45.770
And I wanna grab last serviced.

82
00:05:47.666 --> 00:05:52.438
So if I get this specific thing,
I can see that the local storage item

83
00:05:52.438 --> 00:05:56.458
was actually set, which means,
that my plugin worked,

84
00:05:56.458 --> 00:06:01.770
because had this not been written,
local storage would not have been set.

85
00:06:01.770 --> 00:06:05.808
So what happened is that
when that mutation happened,

86
00:06:05.808 --> 00:06:10.632
the local storage was set, and
just for, I guess, for clarity,

87
00:06:10.632 --> 00:06:14.520
we can try pressing the button again,
so I press it.

88
00:06:14.520 --> 00:06:17.889
You can see a new mutation happens.

89
00:06:17.889 --> 00:06:22.883
And then, of course, you'll see that
the local storage item changed, as well.

90
00:06:24.760 --> 00:06:29.314
So that is our first Vuex Plugin.

91
00:06:29.314 --> 00:06:32.569
So that's essentially the nuts and
bolts of how that works.

