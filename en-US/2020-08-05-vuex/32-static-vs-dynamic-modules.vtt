WEBVTT

1
00:00:00.000 --> 00:00:03.563
We've talked a little bit about Vuex
modules and how they can be really useful.

2
00:00:03.563 --> 00:00:09.002
How to namespace them to make sure that
not just the state is modularized, but

3
00:00:09.002 --> 00:00:14.035
our actions, mutations, and
getters are also equally modularized.

4
00:00:14.035 --> 00:00:17.251
But let's move on to talking
a little bit further and

5
00:00:17.251 --> 00:00:19.893
deepening our knowledge of Vuex modules.

6
00:00:19.893 --> 00:00:25.864
So far, we've talked about static modules,
and that might not make a lot of sense,

7
00:00:25.864 --> 00:00:30.423
but I think in this exercise,
I'll show you what I mean by that.

8
00:00:30.423 --> 00:00:33.466
And I'll introduce this
part by talking about it,

9
00:00:33.466 --> 00:00:36.380
with regards to static
versus dynamic modules.

10
00:00:36.380 --> 00:00:40.975
And we'll think about those two as
separate but sort of related and

11
00:00:40.975 --> 00:00:42.379
similar entities.

12
00:00:42.379 --> 00:00:48.243
&gt;&gt; Within application that didn't
probably definitely benefit from modules,

13
00:00:48.243 --> 00:00:49.674
within its store.

14
00:00:49.674 --> 00:00:52.927
Do you know is there any
performance benefit for

15
00:00:52.927 --> 00:00:55.457
modularizing the store in this way?

16
00:00:55.457 --> 00:01:00.551
Does it help to process things through
the store, if it isn't modules?

17
00:01:00.551 --> 00:01:05.737
&gt;&gt; Yeah, I'm not 100% sure
in terms of the performance

18
00:01:05.737 --> 00:01:10.176
implications of modules
versus non-modules.

19
00:01:10.176 --> 00:01:15.146
But I can speak to one thing
which is that if you use

20
00:01:15.146 --> 00:01:20.846
modules in a static fashion,
you are instantiating and

21
00:01:20.846 --> 00:01:25.829
using your modules for
across the application.

22
00:01:25.829 --> 00:01:30.773
So, like even though a component might
not be using that particular module,

23
00:01:30.773 --> 00:01:34.502
there's still sort of
a performance cost because anytime

24
00:01:34.502 --> 00:01:38.628
you are accessing the store that
module namespaces available.

25
00:01:38.628 --> 00:01:43.837
And so, I think the question
with regards to the performance

26
00:01:43.837 --> 00:01:50.285
implications will become clear in this
section, if you can awesome cool.

27
00:01:50.285 --> 00:01:53.090
In the previous section we
talked about Vuex modules and

28
00:01:53.090 --> 00:01:56.314
why that can be really useful
specifically with namespacing and

29
00:01:56.314 --> 00:02:00.383
making sure that your state, actions,
getters, and mutations are specific.

30
00:02:00.383 --> 00:02:06.446
So, it doesn't pollute the global
Vuex namespace, that's really useful.

31
00:02:06.446 --> 00:02:09.956
But I think the next concept will
be particularly interesting,

32
00:02:09.956 --> 00:02:12.881
especially if you're
interested in performance and

33
00:02:12.881 --> 00:02:16.657
understanding how exactly modules
can improve your applications.

34
00:02:16.657 --> 00:02:19.709
And I'll introduce this
concept as a corollary.

35
00:02:19.709 --> 00:02:22.782
So static versus dynamic modules, and

36
00:02:22.782 --> 00:02:27.823
the difference between them will
become clear in just a second.

37
00:02:27.823 --> 00:02:33.912
So, let's look at an example
once this concept books loads,

38
00:02:33.912 --> 00:02:39.897
[LAUGH] of accessing a essentially
like servicing a machine.

39
00:02:39.897 --> 00:02:43.093
So, we want to service
a machine multiple times, and

40
00:02:43.093 --> 00:02:46.654
we want to access the number of
times in which we service it.

41
00:02:46.654 --> 00:02:51.320
If this code samples doesn't work,
I will load it locally.

42
00:02:51.320 --> 00:02:55.564
So, let's run the code
that I have locally.

43
00:02:55.564 --> 00:03:00.260
So, I'm going to run some
code just to show you what

44
00:03:00.260 --> 00:03:05.188
the example that I'm going to show is and
looks like.

45
00:03:05.188 --> 00:03:08.072
[SOUND] Load,

46
00:03:08.072 --> 00:03:13.580
there we go, all right?

47
00:03:13.580 --> 00:03:17.296
So, here I have a counter.

48
00:03:17.296 --> 00:03:20.381
So it's just essentially showing
me a number of machines.

49
00:03:20.381 --> 00:03:23.244
So it's a list of multiple machines and

50
00:03:23.244 --> 00:03:27.854
you might notice there's some
text that says service x times.

51
00:03:27.854 --> 00:03:31.583
So, it shows you the number of times
the machine has been serviced and

52
00:03:31.583 --> 00:03:34.812
in this particular case,
I care to know this information.

53
00:03:34.812 --> 00:03:38.189
So, I wanna know how many times this
service button has been clicked or

54
00:03:38.189 --> 00:03:40.318
how many times a machine
has been serviced.

55
00:03:40.318 --> 00:03:46.131
So, let's just assume we're clicking
it and you can notice that the counter,

56
00:03:46.131 --> 00:03:50.137
so the service number of times
is increasing as you go.

57
00:03:50.137 --> 00:03:54.914
And if I look specifically in
my Vuedev tools under Vuex,

58
00:03:54.914 --> 00:04:01.596
you will see that mutation happening
which is completing the service request.

59
00:04:01.596 --> 00:04:04.721
And of course,
the state is updating appropriately, so

60
00:04:04.721 --> 00:04:08.444
you'll notice I have to keep loading
it updates every single time.

61
00:04:08.444 --> 00:04:14.476
So, this is fine and obviously,
I'm using one single state object.

62
00:04:14.476 --> 00:04:18.236
So, we'll look at this,
I modularized it, it's great.

63
00:04:18.236 --> 00:04:22.416
I even namespace it, so everything is
accessible on the machine namespace.

64
00:04:22.416 --> 00:04:28.311
But the thing is,
every time I use this specific store,

65
00:04:28.311 --> 00:04:31.829
it is copied across components.

66
00:04:31.829 --> 00:04:36.296
So, every component is using
the same instance of the store.

67
00:04:36.296 --> 00:04:41.608
And this is sort of problematic because
in the instance that I showed you,

68
00:04:41.608 --> 00:04:42.642
if I service.

69
00:04:42.642 --> 00:04:46.586
Let's say,
if I service the machine named Bender,

70
00:04:46.586 --> 00:04:51.875
I don't want the machine called
Farnsworth to update because again,

71
00:04:51.875 --> 00:04:55.023
this is specific to that machine itself.

72
00:04:55.023 --> 00:04:58.527
I don't want other machines
to know that that happened,

73
00:04:58.527 --> 00:05:01.011
even though I'm using a similar store.

74
00:05:01.011 --> 00:05:02.931
Where is my code, yes.

75
00:05:02.931 --> 00:05:08.500
So essentially, I want to make sure that
the store that I'm using is specific

76
00:05:08.500 --> 00:05:13.652
not only to the module, but
specific to the component that I'm using.

77
00:05:13.652 --> 00:05:19.406
And so, this is sort of what I mean when I
talk about static versus dynamic modules.

78
00:05:19.406 --> 00:05:23.571
Because a static module,
which is what we've looked at so far,

79
00:05:23.571 --> 00:05:27.288
is registered on initialization
across the component.

80
00:05:27.288 --> 00:05:30.666
So, whichever component
accesses the store,

81
00:05:30.666 --> 00:05:35.908
it has access to that specific store and
so it's not dynamically loaded.

82
00:05:35.908 --> 00:05:40.369
So, any component can access
that store whenever the entire

83
00:05:40.369 --> 00:05:42.475
application initializes.

84
00:05:42.475 --> 00:05:47.326
The corollary to that is dynamic
modules and dynamic modules,

85
00:05:47.326 --> 00:05:52.830
as the name is suggests,
is registered on component initialization.

86
00:05:52.830 --> 00:05:56.934
So, only the component that uses
it will initialize that store and

87
00:05:56.934 --> 00:06:01.259
if that component doesn't exist or
if you're in another component,

88
00:06:01.259 --> 00:06:03.773
you cannot access that specific store.

89
00:06:03.773 --> 00:06:09.549
So again, we're gonna look back at
the folder structure I talked about.

90
00:06:09.549 --> 00:06:14.973
In this case, I have modules and then
I have within that my machine code and

91
00:06:14.973 --> 00:06:18.735
then I have my store.js or
in my Vuex cli instance,

92
00:06:18.735 --> 00:06:22.866
it's store/index.js, but
the example is the same.

93
00:06:22.866 --> 00:06:27.255
So, I can look at the two side by side
just to see what we had before and

94
00:06:27.255 --> 00:06:30.885
then see what we can move
towards to make it a bit better.

95
00:06:30.885 --> 00:06:33.182
So, we have our store.js file,

96
00:06:33.182 --> 00:06:36.880
import the specific modules
as you can see on the top.

97
00:06:36.880 --> 00:06:41.320
That's what I want because the module code
isn't here anymore, it's sort of separate.

98
00:06:41.320 --> 00:06:43.776
So, I import the specific module code.

99
00:06:43.776 --> 00:06:48.774
I added to my Vuex store like such,
I can choose to create a constant and

100
00:06:48.774 --> 00:06:52.775
added or add it directly,
whichever is better for you.

101
00:06:52.775 --> 00:06:56.939
It's namespaced as you can see here,
so this is what the module looks like.

102
00:06:56.939 --> 00:07:01.417
This is what it looks like
when you add it to the store.

103
00:07:01.417 --> 00:07:06.066
What I want to do is, I don't actually
want to add the module in the store

104
00:07:06.066 --> 00:07:11.027
anymore, because the issue with adding
a module in the store is that anytime

105
00:07:11.027 --> 00:07:15.162
anyone accesses that particular store,
that module exists.

106
00:07:15.162 --> 00:07:19.242
And this is a problem because if a
component is using or multiple components

107
00:07:19.242 --> 00:07:23.338
is using the same store, I don't want
them to access this specific store.

108
00:07:23.338 --> 00:07:26.779
Because as you saw in the previous
example, if I service one machine,

109
00:07:26.779 --> 00:07:28.833
it shouldn't service another machine.

110
00:07:28.833 --> 00:07:31.734
So, what we'll do is we'll
pull away those pieces.

111
00:07:31.734 --> 00:07:35.812
We won't actually put the module
code in the store anymore.

112
00:07:35.812 --> 00:07:42.418
So, we're not gonna use it statically so
to speak, the module itself won't change.

113
00:07:42.418 --> 00:07:43.552
Nothing's changing there.

114
00:07:43.552 --> 00:07:45.941
The only thing that changes
here is the store and

115
00:07:45.941 --> 00:07:48.519
how exactly you were
accessing the module itself.

116
00:07:48.519 --> 00:07:51.533
So, this is where we're registering,

117
00:07:51.533 --> 00:07:56.952
we're moving the part in which we
register the component of the module.

118
00:07:56.952 --> 00:08:03.640
We're moving it away from the main.js
file into the actual component instance.

119
00:08:03.640 --> 00:08:08.684
So, this is what you see if you
see the script component of your

120
00:08:08.684 --> 00:08:15.477
single file component in view and within
that, we're going to register a module.

121
00:08:15.477 --> 00:08:20.369
So let's assume this as a component,
let's say it's a vending machine item or

122
00:08:20.369 --> 00:08:22.496
one of those specific list items.

123
00:08:22.496 --> 00:08:27.377
And within that list item in the created
portion, we don't really care about

124
00:08:27.377 --> 00:08:31.885
mounted because mounted is when
something is visible versus created,

125
00:08:31.885 --> 00:08:34.684
which is on initialization of a component.

126
00:08:34.684 --> 00:08:37.423
So, that's if you want to know
the difference between that,

127
00:08:37.423 --> 00:08:38.589
that's the difference.

128
00:08:38.589 --> 00:08:43.976
So, I created is useful because it's
when the component first is initialized.

129
00:08:43.976 --> 00:08:46.048
I want to register that module.

130
00:08:46.048 --> 00:08:51.220
And so, in order to do this,
I can call this.registerStoreModule

131
00:08:51.220 --> 00:08:55.682
with the moduleName and
then pass in the specific module.

132
00:08:55.682 --> 00:09:01.355
And of course, this is not this part
on the top which is the created part,

133
00:09:01.355 --> 00:09:04.519
is a method that I'm creating on my own.

134
00:09:04.519 --> 00:09:08.157
So below, you'll see a method
called registerStoreModule,

135
00:09:08.157 --> 00:09:09.811
which is what I'm calling.

136
00:09:09.811 --> 00:09:13.810
It takes in a module name and
the specific store module and

137
00:09:13.810 --> 00:09:17.987
then it does some things which
is actually registering it.

138
00:09:17.987 --> 00:09:23.291
So, you might notice on the below part
of the code this store.registerModule,

139
00:09:23.291 --> 00:09:24.932
so that is Vue specific.

140
00:09:24.932 --> 00:09:28.946
And that is something that I didn't write,
it's accessible on the store.

141
00:09:28.946 --> 00:09:33.346
So, the Vue store has a method
called registerModule and

142
00:09:33.346 --> 00:09:38.389
registerModule has the ability for
you to take in a module name and

143
00:09:38.389 --> 00:09:41.888
a store module and
register it, so to speak.

144
00:09:41.888 --> 00:09:46.770
If you think about it,
this looks uncannily similar to the method

145
00:09:46.770 --> 00:09:50.424
that I just created call
registerStoremodule.

146
00:09:50.424 --> 00:09:55.151
The difference here is that
I'm checking that a specific

147
00:09:55.151 --> 00:09:57.617
module exists to begin with.

148
00:09:57.617 --> 00:10:02.024
So, I wanna make sure that the store
exists, that there is a state, and so on.

149
00:10:02.024 --> 00:10:06.085
So, it's some extra code I added,
but if you really wanted to,

150
00:10:06.085 --> 00:10:10.764
you could just do store.registerModule and
that should work just fine.

151
00:10:10.764 --> 00:10:12.818
And of course, it's this.$store,

152
00:10:12.818 --> 00:10:16.502
I just renamed it to store because
I don't like writing this $store.

153
00:10:16.502 --> 00:10:20.431
But the idea is the same,
this.$store.registerModule,

154
00:10:20.431 --> 00:10:23.904
passing the module name,
passing the store module and

155
00:10:23.904 --> 00:10:27.321
that will register a module
in the component itself.

156
00:10:27.321 --> 00:10:31.994
So, with that I can now
use the module as named.

157
00:10:31.994 --> 00:10:36.788
So, let's assume I have, state and
actions that I'm accessing in a component,

158
00:10:36.788 --> 00:10:40.689
the state is called,
let's say I'm accessing the time service.

159
00:10:40.689 --> 00:10:43.833
So, the number of times in which
a machine was serviced, and then I

160
00:10:43.833 --> 00:10:47.388
also have an action call like service
machine, which is the button click.

161
00:10:47.388 --> 00:10:51.604
So anytime you click it, it services or
it increments the time service.

162
00:10:51.604 --> 00:10:54.590
So, I can access it with my Vuex helpers.

163
00:10:54.590 --> 00:10:56.484
I personally like Vuex helpers.

164
00:10:56.484 --> 00:11:00.495
So throughout this workshop,
I might throw it in here and

165
00:11:00.495 --> 00:11:02.592
there because I prefer that.

166
00:11:02.592 --> 00:11:05.007
And so, here I'm using map state,

167
00:11:05.007 --> 00:11:09.448
which accesses the specific name
of the module which is machine.

168
00:11:09.448 --> 00:11:13.978
And then, similarly with map actions,
it specifically acts as a machine and

169
00:11:13.978 --> 00:11:17.810
then within that, I'm pulling apart or
pulling out the state and

170
00:11:17.810 --> 00:11:19.497
the action that I'm using.

171
00:11:19.497 --> 00:11:25.291
So, I can actually create the specific
module in the component and

172
00:11:25.291 --> 00:11:31.514
then use it quite easily without it
having to live in the main.js file.

