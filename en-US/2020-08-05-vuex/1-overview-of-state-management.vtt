WEBVTT

1
00:00:00.000 --> 00:00:03.074
With that, we'll dive into
the first part of the course,

2
00:00:03.074 --> 00:00:04.957
which is the introduction to Vuex.

3
00:00:04.957 --> 00:00:05.962
And before that,

4
00:00:05.962 --> 00:00:09.788
I think it's useful to talk about
what state management is as well.

5
00:00:09.788 --> 00:00:13.053
And so, we'll start with
the principles of state management.

6
00:00:13.053 --> 00:00:17.006
So, when we talk about state management,
it's really important for

7
00:00:17.006 --> 00:00:20.557
us to start by talking about state,
and what exactly state is.

8
00:00:20.557 --> 00:00:22.922
So in the context of an application,

9
00:00:22.922 --> 00:00:26.600
state is a condition of
an object that's stored as data.

10
00:00:26.600 --> 00:00:29.620
So, this is sort of an,
seems very arbitrary, but

11
00:00:29.620 --> 00:00:32.995
we'll use a metaphor to explain
what exactly I mean, and

12
00:00:32.995 --> 00:00:37.660
with that, it might make a bit more sense
and you might get clarity in that way.

13
00:00:37.660 --> 00:00:40.191
So, let's imagine a vending machine,

14
00:00:40.191 --> 00:00:45.413
which is just a machine that has snacks in
it, generally it takes money, and so on.

15
00:00:45.413 --> 00:00:49.296
And so there are various ways in which
you can interact with a vending machine.

16
00:00:49.296 --> 00:00:53.800
You can get items from a vending machine,
let's assume you put coins in it and

17
00:00:53.800 --> 00:00:55.186
you get something out.

18
00:00:55.186 --> 00:00:58.760
So, that's sort of an action and
a transaction that happens.

19
00:00:58.760 --> 00:01:03.041
And then you can do it however many times,
you could do it a hundred times, whatever.

20
00:01:03.041 --> 00:01:07.125
However many items that are in
the vending machine, you could do it for.

21
00:01:07.125 --> 00:01:10.639
But obviously, there comes a point where
the vending machine becomes empty,

22
00:01:10.639 --> 00:01:12.940
because you can't infinitely
take items from it.

23
00:01:12.940 --> 00:01:15.809
There's a point in time where
it needs to be restocked.

24
00:01:15.809 --> 00:01:20.010
So, you have this concept of
stocking items in a vending machine.

25
00:01:20.010 --> 00:01:21.867
So not only are you taking items away, but

26
00:01:21.867 --> 00:01:24.586
there's the possibility of
adding to the vending machine.

27
00:01:24.586 --> 00:01:27.290
Obviously, there are permissions
associated with it.

28
00:01:27.290 --> 00:01:30.649
But for demonstration purposes,
we wanna look at the actions and

29
00:01:30.649 --> 00:01:34.350
transactions that can happen within
the context of a vending machine.

30
00:01:34.350 --> 00:01:38.280
And so, let's look at the flow
of how actions happen and

31
00:01:38.280 --> 00:01:41.718
how state changes within
this particular case.

32
00:01:41.718 --> 00:01:47.130
So let's assume there's a bag of cookies
and you want that bag of cookies.

33
00:01:47.130 --> 00:01:50.311
In order for you to do that,
you would basically be like, hey,

34
00:01:50.311 --> 00:01:51.519
I want a bag of cookies.

35
00:01:51.519 --> 00:01:56.222
And the cookies, to some extent will
emit an event to check the inventory,

36
00:01:56.222 --> 00:02:00.265
because it needs to check whether
there are cookies to give you.

37
00:02:00.265 --> 00:02:03.180
And then the inventory will
then allow you to get it,

38
00:02:03.180 --> 00:02:06.624
so you'll emit over to the vending
machine being like, yes,

39
00:02:06.624 --> 00:02:09.956
give this person the cookies they want and
then all is well.

40
00:02:09.956 --> 00:02:13.653
And of course the vending machine also
has the ability to emit to the supplier

41
00:02:13.653 --> 00:02:15.980
information with regards
to the transaction.

42
00:02:15.980 --> 00:02:17.906
So sometimes suppliers and

43
00:02:17.906 --> 00:02:23.345
vending machine owners might wanna know
how many items are being retrieved,

44
00:02:23.345 --> 00:02:27.794
when they're retrieved, and
at what frequency for example.

45
00:02:27.794 --> 00:02:30.304
So, when that transaction happens,
they might wanna know about it.

46
00:02:30.304 --> 00:02:33.567
So you can sort of emit various
levels of that transaction,

47
00:02:33.567 --> 00:02:37.561
you can emit it down to like just
the vending machine and giving the item.

48
00:02:37.561 --> 00:02:40.754
Or you can go further to emitting
it all the way to the supplier, so

49
00:02:40.754 --> 00:02:42.799
they know that the transaction happens.

50
00:02:42.799 --> 00:02:47.490
And of course there's a flow upwards to
some extent which is that stocking or

51
00:02:47.490 --> 00:02:50.952
updating the inventory of
the vending machine itself.

52
00:02:50.952 --> 00:02:55.738
So for instance, if we look at supplier,
the supplier is able to change inventory.

53
00:02:55.738 --> 00:03:00.919
Because ultimately the supplier is sort
of the owner of that particular thing,

54
00:03:00.919 --> 00:03:05.499
and so can determine whether or
not an item should be restocked or not.

55
00:03:05.499 --> 00:03:09.610
And so it passes props
essentially up to the inventory,

56
00:03:09.610 --> 00:03:14.342
so it can add things to it,
it can remove whatever it needs to do.

57
00:03:14.342 --> 00:03:19.462
But essentially inventory has to listen to
the supplier in order to know what it is.

58
00:03:19.462 --> 00:03:22.375
And similarly within
the vending machine itself,

59
00:03:22.375 --> 00:03:25.558
it has this concept of states,
and inventories of child

60
00:03:25.558 --> 00:03:29.435
of a vending machine because
inventories within vending machine.

61
00:03:29.435 --> 00:03:34.286
And so vending machine basically can
determine how many how much inventory

62
00:03:34.286 --> 00:03:35.216
is within it.

63
00:03:35.216 --> 00:03:37.521
So it's pro similar to
supplier to some extent.

64
00:03:37.521 --> 00:03:40.637
Again, it's a pretty contrived example,
but you get the point,

65
00:03:40.637 --> 00:03:42.932
which is this flow of
events from one to another.

66
00:03:42.932 --> 00:03:46.839
And so essentially in view,
there's a way of passing state.

67
00:03:46.839 --> 00:03:51.604
And I did mention it a little bit earlier,
but here's more concretely,

68
00:03:51.604 --> 00:03:55.527
the way that you pass the state
is through props and events.

69
00:03:55.527 --> 00:03:59.077
Props are attributes that you
can register on to a component.

70
00:03:59.077 --> 00:04:01.776
Generally it follows
a parent child relationship.

71
00:04:01.776 --> 00:04:07.084
So the parent passes attributes or
properties down to the child and

72
00:04:07.084 --> 00:04:10.982
so on, so
it follows a very specific hierarchy.

73
00:04:10.982 --> 00:04:13.860
And that's generally how state is passed.

74
00:04:13.860 --> 00:04:19.061
Events are used for
communicating between components.

75
00:04:19.061 --> 00:04:21.294
So compared to props
which are parent child,

76
00:04:21.294 --> 00:04:24.010
it has to be the parent that
passes things to the child.

77
00:04:24.010 --> 00:04:27.661
In the event of events,
events like children,

78
00:04:27.661 --> 00:04:31.688
are able to tell parents
when things happen to them.

79
00:04:31.688 --> 00:04:36.615
So for example, if someone is requesting
a bag of cookies, that's a child, and then

80
00:04:36.615 --> 00:04:41.491
it can tell the vending machine parent
that hey, someone's requesting this item.

81
00:04:41.491 --> 00:04:45.707
So that's how events are propagated up,
you might have heard that term.

82
00:04:45.707 --> 00:04:48.784
And so within Vue,
that's how state is passed and

83
00:04:48.784 --> 00:04:52.752
how state is communicated
throughout the application itself.

84
00:04:52.752 --> 00:04:55.850
And so, if you are a visual person,
which I am,

85
00:04:55.850 --> 00:05:00.047
you might want to see how that
looks like in terms of a hierarchy.

86
00:05:00.047 --> 00:05:03.560
So let's look at,
I'm gonna go all the way to the top.

87
00:05:03.560 --> 00:05:06.817
So let's assume there's like
a corporation of vending machines.

88
00:05:06.817 --> 00:05:11.361
And they're basically sort of the
supplier, and they own multiple vending

89
00:05:11.361 --> 00:05:16.130
machines, and each vending machine has
various inventory of stock within it.

90
00:05:16.130 --> 00:05:19.890
So you have this multi-tier, and then all
the way at the bottom is the consumer,

91
00:05:19.890 --> 00:05:23.287
the person who puts money into
the vending machine or requests the item.

92
00:05:23.287 --> 00:05:26.950
If the person is requesting an item,
they are putting money into it.

93
00:05:26.950 --> 00:05:32.533
And the supplier might want to know who,
at what time, requested what item.

94
00:05:32.533 --> 00:05:37.550
And so the way you could do this, is that
the child, or the child is essentially

95
00:05:37.550 --> 00:05:42.503
the user because they're the lowest
level at which the state is propagated.

96
00:05:42.503 --> 00:05:47.077
And so when you put money into it,
the specific item has been requested.

97
00:05:47.077 --> 00:05:50.231
So it knows, hey,
this person wanted a bag of cookies or

98
00:05:50.231 --> 00:05:54.260
a bag of chips in this case in this
particular time, and then the parents

99
00:05:54.260 --> 00:05:58.108
vending machine is notified that
there's one item being removed.

100
00:05:58.108 --> 00:06:01.858
And then the parent vending machine
might then tell the supplier, and so

101
00:06:01.858 --> 00:06:05.620
there's this concept of events being
passed up the chain to the parent.

102
00:06:05.620 --> 00:06:09.447
And then of course,
you have the concept of passing it down.

103
00:06:09.447 --> 00:06:13.006
So props can be passed
down to the child element.

104
00:06:13.006 --> 00:06:19.830
And so, the supplier can pass the specific
inventory down to the vending machine.

105
00:06:19.830 --> 00:06:23.931
Let's say, there are chips in the vending
machine, the supplier can determine how

106
00:06:23.931 --> 00:06:26.660
much chips is in the vending
machine if they stocked it.

107
00:06:26.660 --> 00:06:31.041
So if there are currently 10,
the supplier can be like, they're now,

108
00:06:31.041 --> 00:06:35.365
is 40 because I say they're 40, and
that is how props are passed on.

109
00:06:35.365 --> 00:06:37.979
It's essentially from parent to child, so

110
00:06:37.979 --> 00:06:42.229
that's a specific type of relationship
that in which state is passed.

111
00:06:42.229 --> 00:06:46.508
Of course, those two items of getting and
adding are very limited, and

112
00:06:46.508 --> 00:06:51.309
they're not the only things that you can
do in the context of a vending machine.

113
00:06:51.309 --> 00:06:54.599
So let's assume this
vending machines can break.

114
00:06:54.599 --> 00:06:56.692
Well, we don't have to assume,
that happens.

115
00:06:56.692 --> 00:07:00.924
And someone needs to come and fix it,
because if a vending machine is broken,

116
00:07:00.924 --> 00:07:03.137
you can't get or add item to it anymore,

117
00:07:03.137 --> 00:07:06.091
because it no longer functions
as a vending machine.

118
00:07:06.091 --> 00:07:09.164
And so now there's this
concept of multiple events.

119
00:07:09.164 --> 00:07:10.770
So let's say someone kicked it.

120
00:07:10.770 --> 00:07:16.797
Ann is also wanting to add,
get something from it at the same time.

121
00:07:16.797 --> 00:07:20.262
There's an event being propagated up,
and in this particular case,

122
00:07:20.262 --> 00:07:22.503
there's a repair event and
a restock event.

123
00:07:22.503 --> 00:07:26.048
Because that particular item is one,
maybe not in stock, and

124
00:07:26.048 --> 00:07:29.540
two, the vending machine itself
might need to be repaired.

125
00:07:29.540 --> 00:07:33.604
So there's various pieces of things that
are happening within the application.

126
00:07:33.604 --> 00:07:38.054
So not just one thing, but there's
two pieces of state that's changing.

127
00:07:38.054 --> 00:07:40.530
And of course, things can add up.

128
00:07:40.530 --> 00:07:43.364
So there's various parts
of the app that can change.

129
00:07:43.364 --> 00:07:47.499
So, not only are you repairing and
restocking, or fixing and changing,

130
00:07:47.499 --> 00:07:48.909
all of these can change.

131
00:07:48.909 --> 00:07:53.513
And so, that becomes really complex
the larger your application is, and so,

132
00:07:53.513 --> 00:07:56.118
there needs to be
a separation of concerns.

133
00:07:56.118 --> 00:07:58.083
And by separation of concerns,

134
00:07:58.083 --> 00:08:02.755
I mean that every individual entity
should have ownership of its own state.

135
00:08:02.755 --> 00:08:08.684
So for example, vending machines
should have knowledge only of itself,

136
00:08:08.684 --> 00:08:10.030
like am I fixed?

137
00:08:10.030 --> 00:08:12.046
Am I in good condition?

138
00:08:12.046 --> 00:08:13.550
When was I last stocked?

139
00:08:13.550 --> 00:08:14.574
And so on.

140
00:08:14.574 --> 00:08:19.169
And then you might wanna have a concept of
inventory which is sort of separate but

141
00:08:19.169 --> 00:08:20.895
related to vending machine.

142
00:08:20.895 --> 00:08:25.976
An inventory itself is just,
how many items are within the thing,

143
00:08:25.976 --> 00:08:29.619
is this item expired or
whatever that, maybe.

144
00:08:29.619 --> 00:08:31.942
And then,
there's also the concept of supply.

145
00:08:31.942 --> 00:08:35.733
The supplier might want to
manage the personnel and

146
00:08:35.733 --> 00:08:39.624
the people who are going to fix and
restock and so on.

147
00:08:39.624 --> 00:08:43.773
And so there's various pieces of the app
that you might want to extrapolate.

148
00:08:43.773 --> 00:08:48.256
Because in the previous example, we had
everything sort of related together, and

149
00:08:48.256 --> 00:08:51.662
things can get really nested and
complicated really quickly.

150
00:08:51.662 --> 00:08:55.133
And so the separation of concerns is
sort of where state management comes in.

151
00:08:55.133 --> 00:08:57.728
It's this concept of centralized state.

