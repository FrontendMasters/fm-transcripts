WEBVTT

1
00:00:00.000 --> 00:00:03.351
I'm at vuex static versus dynamic modules.

2
00:00:03.351 --> 00:00:06.896
All right, so we're back and
we're gonna look at the solution for

3
00:00:06.896 --> 00:00:08.871
how exactly we want our code to look.

4
00:00:08.871 --> 00:00:13.505
So just to review really quickly, we were
looking at updating operatorView component

5
00:00:13.505 --> 00:00:15.916
such that we're
extrapolating the store and

6
00:00:15.916 --> 00:00:18.272
dynamically loading it in that component.

7
00:00:18.272 --> 00:00:19.553
So let's do that.

8
00:00:19.553 --> 00:00:22.581
What I'm gonna do is I'm gonna
do a couple [LAUGH] Of things.

9
00:00:22.581 --> 00:00:27.564
I'm gonna create a modules folder,
so let's create a modules folder.

10
00:00:27.564 --> 00:00:33.760
And then within the modules folder,
I'm going to create a machine.js file.

11
00:00:33.760 --> 00:00:40.950
And what I wanna do is I'm essentially
taking all of this code and

12
00:00:40.950 --> 00:00:46.553
I'm moving it into that
specific part of the app.

13
00:00:46.553 --> 00:00:49.267
So there's no longer a sets of modules.

14
00:00:49.267 --> 00:00:51.870
Everything live in here.

15
00:00:51.870 --> 00:00:57.819
For brevity, I'm going to

16
00:00:57.819 --> 00:01:03.255
use the code that works.

17
00:01:03.255 --> 00:01:07.274
So I created,
essentially I'm doing an export default.

18
00:01:07.274 --> 00:01:09.952
And then there's some state
there's actions, getters,

19
00:01:09.952 --> 00:01:13.214
mutations and this is all what was
living in the state itself, except for

20
00:01:13.214 --> 00:01:14.730
the fact that I now have a module.

21
00:01:14.730 --> 00:01:18.541
And so
my store has nothing in it anymore, so

22
00:01:18.541 --> 00:01:23.279
I can actually nuke this
part because it's no longer,

23
00:01:23.279 --> 00:01:27.404
this like really nothing
in the store anymore.

24
00:01:27.404 --> 00:01:32.086
And what I can do now is I can go into my

25
00:01:32.086 --> 00:01:37.867
OperatorView components specifically and

26
00:01:37.867 --> 00:01:42.098
I am going to create some stuff.

27
00:01:42.098 --> 00:01:46.058
So I'm gonna created and

28
00:01:46.058 --> 00:01:50.966
I'm gonna do like a register.

29
00:01:50.966 --> 00:01:59.490
I feel like it's a register module.

30
00:01:59.490 --> 00:02:00.184
Yep.

31
00:02:08.209 --> 00:02:11.143
So I'm gonna register a module.

32
00:02:11.143 --> 00:02:17.281
And in my instance, let me,
I'm just gonna hard code it for now.

33
00:02:17.281 --> 00:02:23.423
So I'm creating a module that
has a name of machine and

34
00:02:23.423 --> 00:02:32.040
then a machine and so the next step
would be to import this specific module.

35
00:02:32.040 --> 00:02:36.358
So I'm going to store modules and

36
00:02:36.358 --> 00:02:41.303
I believe it's called just machine.

37
00:02:41.303 --> 00:02:46.122
So I imported that specific module and
then I'm registering that module.

38
00:02:46.122 --> 00:02:51.890
And so with that,
I believe my code will work.

39
00:02:51.890 --> 00:02:54.013
Famous last words.

40
00:02:56.759 --> 00:02:58.080
Okay, it works.

41
00:02:58.080 --> 00:03:00.061
Yes, hurray.

42
00:03:00.061 --> 00:03:04.774
It works and it has console errors as
I mentioned and that's because all of

43
00:03:04.774 --> 00:03:09.350
the various pieces as you notice it
cannot read property time service.

44
00:03:09.350 --> 00:03:14.318
That's because every single piece of the
vending machine item in the list is using

45
00:03:14.318 --> 00:03:16.910
that because it has that button hooked up.

46
00:03:16.910 --> 00:03:19.718
And currently there
isn't a concept of that.

47
00:03:19.718 --> 00:03:21.590
So we'll work on fixing that.

48
00:03:21.590 --> 00:03:25.406
But this is sort of the solution for
this particular exercise.

49
00:03:25.406 --> 00:03:27.000
Are there any questions?

50
00:03:27.000 --> 00:03:33.348
&gt;&gt; When would you think about
using these dynamic modules?

51
00:03:33.348 --> 00:03:34.813
I see what you did here.

52
00:03:34.813 --> 00:03:37.697
&gt;&gt; Yeah.
&gt;&gt; And you could have achieved that by

53
00:03:37.697 --> 00:03:43.634
just storing the state for each of those
service items within each of those rows.

54
00:03:43.634 --> 00:03:48.350
So what is it that you think about when
you think about why you'd wanna use

55
00:03:48.350 --> 00:03:50.376
dynamic modules in a real app?

56
00:03:50.376 --> 00:03:54.684
&gt;&gt; I guess this is a good instance,
like if for instance,

57
00:03:54.684 --> 00:03:58.993
only one component is using
this particular module and

58
00:03:58.993 --> 00:04:03.597
you don't need it anywhere
else across the application.

59
00:04:03.597 --> 00:04:07.007
So like one instance,

60
00:04:07.007 --> 00:04:12.211
let's say you're logging in your

61
00:04:12.211 --> 00:04:17.416
user with certain permissions and

62
00:04:17.416 --> 00:04:22.810
you are trying to access a new site.

63
00:04:22.810 --> 00:04:31.437
As a user or reader, you don't need access
to certain states that specific to admin.

64
00:04:31.437 --> 00:04:34.850
So for example, I don't know.

65
00:04:34.850 --> 00:04:37.428
The admin might have specific pieces,

66
00:04:37.428 --> 00:04:41.655
specific actions like change date or
change title or whatever.

67
00:04:41.655 --> 00:04:46.106
And you don't want someone who
doesn't have those permissions to have

68
00:04:46.106 --> 00:04:50.037
access to that module,
you don't actually need it honestly,

69
00:04:50.037 --> 00:04:52.128
it's a waste of a module to have.

70
00:04:52.128 --> 00:04:55.180
And so
you don't even want to load it completely.

71
00:04:55.180 --> 00:04:58.459
So you can, with dynamic modules.

72
00:04:58.459 --> 00:05:02.413
The module is only loaded
if the component is loaded.

73
00:05:02.413 --> 00:05:07.004
And so it's one way in which you
can extrapolate and sort of,

74
00:05:07.004 --> 00:05:09.895
it's pairing down what gets loaded.

75
00:05:09.895 --> 00:05:13.629
So there is a performance
benefit if you think about it,

76
00:05:13.629 --> 00:05:19.202
because you're not loading a module you
don't need, if you don't need it at all.

77
00:05:19.202 --> 00:05:20.272
Does that make sense?

78
00:05:20.272 --> 00:05:22.061
&gt;&gt; Yeah, that makes sense.

