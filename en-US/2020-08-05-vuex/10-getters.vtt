WEBVTT

1
00:00:00.000 --> 00:00:04.306
The next piece of what I wanted to look
at is this, the part about getters,

2
00:00:04.306 --> 00:00:08.334
which is something we didn't actually
talk about, but we will now.

3
00:00:08.334 --> 00:00:12.728
So we have actions and mutations,
we talked about that in length in terms of

4
00:00:12.728 --> 00:00:16.986
an action creates an asynchronous fetch,
which is pinging inventory or

5
00:00:16.986 --> 00:00:20.851
fetching from inventory and
then it commits specific mutation.

6
00:00:20.851 --> 00:00:25.730
And so if you looked at the stock counter,
that is the supply or the change in

7
00:00:25.730 --> 00:00:30.773
which the supply gets changed, so
you see a decrement, increment and so on.

8
00:00:30.773 --> 00:00:33.071
But the thing is, it's useful for

9
00:00:33.071 --> 00:00:36.569
us to perhaps add a layer of
information on top of it.

10
00:00:36.569 --> 00:00:40.932
So we want to perhaps add
a layer of information over

11
00:00:40.932 --> 00:00:43.475
the specific supply itself.

12
00:00:43.475 --> 00:00:46.635
So right now we have this
action that happens and

13
00:00:46.635 --> 00:00:49.881
then the mutation changes
the specific supply.

14
00:00:49.881 --> 00:00:52.601
And then we looked at
the code specific to that.

15
00:00:52.601 --> 00:00:59.792
Just the idea from lines 22 to 30 is where
we're actually fetching inventory and

16
00:00:59.792 --> 00:01:04.870
then updating specific properties and
so on and mutating.

17
00:01:04.870 --> 00:01:08.579
But of course, we want to look at getters
specifically in detail because we talked

18
00:01:08.579 --> 00:01:09.990
about actions and mutations.

19
00:01:09.990 --> 00:01:12.697
We didn't really talk about getters,
we sort of glossed over that.

20
00:01:12.697 --> 00:01:17.687
And so let's look at that particular
piece of Vuex because it can be really

21
00:01:17.687 --> 00:01:19.708
useful in our applications.

22
00:01:19.708 --> 00:01:25.651
A way of thinking about getters is that
it's a way of computing derived state.

23
00:01:25.651 --> 00:01:30.425
What I mean by that is it allows you to
look at your state within the store and

24
00:01:30.425 --> 00:01:32.818
then check for certain properties.

25
00:01:32.818 --> 00:01:38.196
So something that might be useful is
you might want to check whether or

26
00:01:38.196 --> 00:01:40.059
not your supply is low.

27
00:01:40.059 --> 00:01:45.747
I shouldn't have started 40,
there you go [LAUGH] terrible top,

28
00:01:45.747 --> 00:01:50.432
it should have been 10 never mind,
we're here now.

29
00:01:50.432 --> 00:01:53.355
So you might have noticed
that I have added

30
00:01:53.355 --> 00:01:56.193
a sort of a caution
icon onto my supply and

31
00:01:56.193 --> 00:02:02.123
what this is doing is it's checking to see
whether supply is below a certain number,

32
00:02:02.123 --> 00:02:07.154
and if supply is below a certain number,
it shows this specific thing.

33
00:02:07.154 --> 00:02:09.298
And so for this I'm using a getter.

34
00:02:09.298 --> 00:02:14.395
What it's doing is that specific getter,
which shows this caution icon

35
00:02:14.395 --> 00:02:19.167
is just looking at my state,
in this case, the supply in the state.

36
00:02:19.167 --> 00:02:23.241
And it's checking to make sure that
it doesn't fall below a number and

37
00:02:23.241 --> 00:02:27.245
if it does, then it tells the front
end that something has changed and

38
00:02:27.245 --> 00:02:29.060
you sort of see that bubble up.

39
00:02:29.060 --> 00:02:32.554
So that's really useful.

40
00:02:32.554 --> 00:02:34.447
And so this is where a getter comes in.

41
00:02:34.447 --> 00:02:39.241
You have two pieces, we looked at state
which is state gets changed as actions

42
00:02:39.241 --> 00:02:42.278
happen and
mutations happen within your store.

43
00:02:42.278 --> 00:02:45.482
But you can also add a layer of
information like a getter, so

44
00:02:45.482 --> 00:02:47.149
the getter checks for state and

45
00:02:47.149 --> 00:02:50.757
then adds extra things to your front
end that can be really useful.

46
00:02:50.757 --> 00:02:55.549
So let's look at what that looks
like from our application itself.

47
00:02:55.549 --> 00:03:00.375
So, we'll start by looking
at our store specifically,

48
00:03:00.375 --> 00:03:03.489
and we'll add a getter to our store.

49
00:03:03.489 --> 00:03:08.230
So on line 13, I created getter called,
is supply low.

50
00:03:08.230 --> 00:03:15.452
Personally, I like to call my getters as
sort of like a question because oftentimes

51
00:03:15.452 --> 00:03:21.966
you can think of a getter as you're
asking your store what's in the state.

52
00:03:21.966 --> 00:03:26.062
So is supply low is like is supply low,
and then the getter will tell you yes it

53
00:03:26.062 --> 00:03:29.716
is or it might tell you what exactly
the thing you're asking for is.

54
00:03:29.716 --> 00:03:33.912
That's a useful way in which
I name my getters just for

55
00:03:33.912 --> 00:03:36.343
a fun way of thinking about it.

56
00:03:36.343 --> 00:03:39.270
So in this particular case
I called it isSupplyLow.

57
00:03:39.270 --> 00:03:43.289
And so isSupplyLow is a true,
false question.

58
00:03:43.289 --> 00:03:47.773
So for that I'm just checking
specifically whether or

59
00:03:47.773 --> 00:03:50.894
not the supply has fallen below 10.

60
00:03:50.894 --> 00:03:55.559
So is state.supply below 10 and
it's just returning true or

61
00:03:55.559 --> 00:03:58.029
false the state at which that is.

62
00:03:58.029 --> 00:04:03.108
And then from the component itself,
I'm creating again, we're using computed

63
00:04:03.108 --> 00:04:08.553
properties because, a getter very similar
to state gets updated as mutations happen,

64
00:04:08.553 --> 00:04:13.058
because a getter is checking state,
state gets changed very commonly.

65
00:04:13.058 --> 00:04:16.300
And so
getters also are changed very similarly.

66
00:04:16.300 --> 00:04:20.490
And so I'm using a computer property
because I want my view instance to always

67
00:04:20.490 --> 00:04:24.300
be aware when something happens like
state, or getters in this case.

68
00:04:24.300 --> 00:04:27.120
And so I'll call my getter isSupplyLow.

69
00:04:27.120 --> 00:04:32.154
And then I will essentially
check the getter in the store.

70
00:04:32.154 --> 00:04:36.774
And again, very similar to checking for
state you're doing this

71
00:04:36.774 --> 00:04:40.986
.dollarstore.getters dot
name of the specific getter.

72
00:04:40.986 --> 00:04:42.706
So the getter is called isSupplyLow.

73
00:04:42.706 --> 00:04:46.571
So I'm doing this
.dollar.store.gettersisSupplyLow.

74
00:04:46.571 --> 00:04:49.656
And all that's doing is
it's returning that true or

75
00:04:49.656 --> 00:04:52.471
false that I can then use
in my front end itself.

76
00:04:52.471 --> 00:04:57.579
So that's a really useful way in
which I can use a getter to propagate

77
00:04:57.579 --> 00:05:02.520
some kind of attribute or
show some data from my front end itself.

78
00:05:02.520 --> 00:05:06.436
And the reason I use a getter is because
let's say I have multiple different

79
00:05:06.436 --> 00:05:09.002
components that all show
various inventories.

80
00:05:09.002 --> 00:05:14.363
I want to be able to reuse
that piece of logic.

81
00:05:14.363 --> 00:05:17.230
You could easily write this
in your component itself, but

82
00:05:17.230 --> 00:05:20.873
it's useful as a getter because it's
specifically checking the store.

83
00:05:20.873 --> 00:05:24.137
So there was a question in chat
about why getters are cached.

84
00:05:24.137 --> 00:05:25.673
I sort of glossed over that.

85
00:05:25.673 --> 00:05:29.128
But I did mention that getters are cached.

86
00:05:29.128 --> 00:05:32.271
But something you may have noticed is
that getters are constantly updated as

87
00:05:32.271 --> 00:05:32.969
state changes.

88
00:05:32.969 --> 00:05:36.986
And so the reason I say it's cached
is it's cached in the event that

89
00:05:36.986 --> 00:05:38.506
state doesn't change.

90
00:05:38.506 --> 00:05:45.123
So a computer property generally is cached
unless something changes to update itself.

91
00:05:45.123 --> 00:05:49.083
So that's why I say it's cached,
it's not cached always as in,

92
00:05:49.083 --> 00:05:53.910
it's not cached and never updated,
it's cached when updates don't happen.

93
00:05:53.910 --> 00:05:58.120
So you're not constantly
querying state itself.

94
00:05:58.120 --> 00:06:03.123
So for instance if state isn't changing,
the getter is not constantly checking and

95
00:06:03.123 --> 00:06:07.085
asking the state whether or
not it changed if nothing's changed.

