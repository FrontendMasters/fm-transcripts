WEBVTT

1
00:00:00.000 --> 00:00:03.388
We talked about faking an API out.

2
00:00:03.388 --> 00:00:06.505
So essentially we create our fake
API called pingInventory, and

3
00:00:06.505 --> 00:00:09.518
then in our action,
we're pinging that specific inventory.

4
00:00:09.518 --> 00:00:13.560
And then we're calling context.commit
on a specific mutation.

5
00:00:13.560 --> 00:00:17.390
Of course, the difference from
what we talked about before and

6
00:00:17.390 --> 00:00:21.595
showed earlier was that we're
passing specific data to a mutation.

7
00:00:21.595 --> 00:00:25.893
So far we haven't done this, we just
assumed that we were gonna do something.

8
00:00:25.893 --> 00:00:28.991
But when you're fetching an API,
you care about the result and

9
00:00:28.991 --> 00:00:31.576
you want to propagate that
result to state perhaps.

10
00:00:31.576 --> 00:00:36.126
And so here, what we'll do is we're
passing that data down to the mutation,

11
00:00:36.126 --> 00:00:37.738
and we call this a payload.

12
00:00:37.738 --> 00:00:43.392
So contacts.commit takes in the name
of the mutation as well as a payload,

13
00:00:43.392 --> 00:00:49.335
which is the specific piece of data that
you want your mutation to take note of.

14
00:00:49.335 --> 00:00:52.695
And so we'll look at what
the mutation looks like, just so

15
00:00:52.695 --> 00:00:54.761
you have a sense of what that means.

16
00:00:54.761 --> 00:00:58.282
So here, we have our contacts.commit, so

17
00:00:58.282 --> 00:01:02.004
our specific mutation
is called stock items.

18
00:01:02.004 --> 00:01:06.379
And then we pass an inventory.stock,
which is the specific data

19
00:01:06.379 --> 00:01:11.084
property from the fetch call that we
want our mutation to take note of.

20
00:01:11.084 --> 00:01:14.518
And so again,
like in this particular contrived example,

21
00:01:14.518 --> 00:01:17.274
inventory.stock is 40, so it's a number.

22
00:01:17.274 --> 00:01:21.690
And so in the mutation itself,
we are creating that specific name of

23
00:01:21.690 --> 00:01:26.808
the mutation, so it's called stockItems,
it takes in a state and a payload.

24
00:01:26.808 --> 00:01:29.560
So previously,
we only talked about state, but

25
00:01:29.560 --> 00:01:31.782
now we want to look at a payload as well.

26
00:01:31.782 --> 00:01:35.992
So it states, payload,
there's no comma there, there should be.

27
00:01:35.992 --> 00:01:40.430
And then we are updating the supplied
based on that payload because

28
00:01:40.430 --> 00:01:44.084
the payload is telling us
what the defaults should be.

29
00:01:44.084 --> 00:01:47.175
Previously, this was we hard coded it.

30
00:01:47.175 --> 00:01:49.275
Of course, it's fairly hard coded, but

31
00:01:49.275 --> 00:01:51.807
we are calling from an API and
grabbing that data.

32
00:01:51.807 --> 00:01:56.636
And so state.supply = payload is just
setting the specific data property,

33
00:01:56.636 --> 00:02:00.961
in this case supply to the payload
that we got from our database call.

34
00:02:00.961 --> 00:02:04.454
And then again, if you look at
the component down on the bottom,

35
00:02:04.454 --> 00:02:06.601
you'll see that nothing has changed.

36
00:02:06.601 --> 00:02:10.400
We're still calling
the specific supply item, and

37
00:02:10.400 --> 00:02:15.766
that is automatically getting changed
the moment the mutation happens.

38
00:02:15.766 --> 00:02:19.344
So we're not doing anything different,
again, we're dispatching and so on.

39
00:02:19.344 --> 00:02:21.562
Nothing much changes
from the component level,

40
00:02:21.562 --> 00:02:24.385
the only thing that we changed
is the action and the mutation.

41
00:02:24.385 --> 00:02:28.169
So I wanted to take a look at
this idea of a loading state.

42
00:02:28.169 --> 00:02:31.829
So we talked a little bit about
asynchronous and synchronous actions,

43
00:02:31.829 --> 00:02:35.863
it might be clear from the store itself
but not necessarily from the front end.

44
00:02:35.863 --> 00:02:40.149
And sometimes you might want to notify the
front end when something's asynchronous

45
00:02:40.149 --> 00:02:44.206
because it's kind of frustrating when
you click a button and nothing happens.

46
00:02:44.206 --> 00:02:48.339
And even though something's happening
in the back end, if you're not telling

47
00:02:48.339 --> 00:02:52.235
the user what's happening, they might
click the button multiple times.

48
00:02:52.235 --> 00:02:54.383
They might decrement it
more than they want to,

49
00:02:54.383 --> 00:02:57.291
they might get more items than
they actually asked for and so on.

50
00:02:57.291 --> 00:03:01.497
Which might not be a problem but
it can be in certain instances.

51
00:03:01.497 --> 00:03:04.375
So what we'll do is we'll
create a new state.

52
00:03:04.375 --> 00:03:09.279
I'm gonna call the state isRestocking,
so it's just a concept of whether or

53
00:03:09.279 --> 00:03:11.932
not it is in the state of being restocked.

54
00:03:11.932 --> 00:03:16.214
I create a default state
called isRestocking false, so

55
00:03:16.214 --> 00:03:19.948
the idea is that you're
not always restocking,

56
00:03:19.948 --> 00:03:24.151
like in a default normal
state is restocking is false.

57
00:03:24.151 --> 00:03:28.229
And it only gets changed when
the restocking action is happening, so

58
00:03:28.229 --> 00:03:30.986
when that asynchronous
action is happening.

59
00:03:30.986 --> 00:03:36.561
So what we'll do is we are essentially
fetching from the inventory.

60
00:03:36.561 --> 00:03:40.745
So whenever we fetch from the inventory,
we want to tell the user like.

61
00:03:40.745 --> 00:03:44.557
Hey, don't worry about it,
we're actually doing this thing,

62
00:03:44.557 --> 00:03:47.623
We are in the midst of restocking,
so don't worry.

63
00:03:47.623 --> 00:03:51.617
And then we want to change that also,
because when restocking is done,

64
00:03:51.617 --> 00:03:55.078
we don't want the user to just
be in a constant loading state,

65
00:03:55.078 --> 00:03:58.096
we want them to know that's
something has happened.

66
00:03:58.096 --> 00:04:01.647
And so we need to change it appropriately,
and so

67
00:04:01.647 --> 00:04:05.900
we can do that really easily
within asynchronous action.

68
00:04:05.900 --> 00:04:09.143
Because in this case,
pingInventory is a sync,

69
00:04:09.143 --> 00:04:13.824
which means that we know exactly
the sequence in which things happen.

70
00:04:13.824 --> 00:04:18.428
So what we'll do is that on initial
right before we're even pinging

71
00:04:18.428 --> 00:04:22.408
the specific API,
we'll change our restocking to true.

72
00:04:22.408 --> 00:04:26.744
So that means that it's in
the state of being restocked, so

73
00:04:26.744 --> 00:04:32.740
the action is about to happen, so we'll
pass true to the specific isRestocking.

74
00:04:32.740 --> 00:04:36.880
And then within async,
you can also do a finally,

75
00:04:36.880 --> 00:04:42.611
you can chain finally, which is sort
of the end of the entire method.

76
00:04:42.611 --> 00:04:45.491
So at the end of this asynchronous action,

77
00:04:45.491 --> 00:04:50.373
do this as a final action to sort of
like tear down anything else you need.

78
00:04:50.373 --> 00:04:54.344
So in this case, the final action
when everything has completed is to

79
00:04:54.344 --> 00:04:59.009
change isRestocking back to false because
you don't want it to be true forever.

80
00:04:59.009 --> 00:05:02.876
So we will do a context.commit
there as well.

81
00:05:02.876 --> 00:05:07.309
So we're committing twice, we're
committing once at the beginning right

82
00:05:07.309 --> 00:05:11.948
before we actually make that fetch and
at the end when we are done with fetching,

83
00:05:11.948 --> 00:05:13.901
and we got everything we needed.

84
00:05:13.901 --> 00:05:16.371
So you see that happening
in both instances,

85
00:05:16.371 --> 00:05:20.147
there's a context.commit isRestocking and
isRestocking again.

86
00:05:20.147 --> 00:05:23.473
And here it becomes clear why exactly
you might wanna pass a payload,

87
00:05:23.473 --> 00:05:27.671
obviously, it's contrived, because we're
not grabbing anything from anywhere.

88
00:05:27.671 --> 00:05:32.860
But here we want to make sure that we're
passing in true and false appropriately,

89
00:05:32.860 --> 00:05:37.238
so that the store knows exactly how
to handle that particular state.

90
00:05:37.238 --> 00:05:41.595
And so what we can do is we can then
create a mutation that does something very

91
00:05:41.595 --> 00:05:44.513
similar to stock items
that I showed you earlier.

92
00:05:44.513 --> 00:05:49.306
Where we are essentially setting that
specific state property so isRestocking to

93
00:05:49.306 --> 00:05:53.275
that payload, and the payload will
be a Boolean, so true or false.

94
00:05:53.275 --> 00:05:55.761
So is restocking will always be true or

95
00:05:55.761 --> 00:05:58.877
false depending on whatever
gets passed to it.

96
00:05:58.877 --> 00:06:00.639
And then from the front end,

97
00:06:00.639 --> 00:06:04.246
we can hook that in quite easily
with a computed property.

98
00:06:04.246 --> 00:06:07.154
So the computed property
would be called isRestocking.

99
00:06:07.154 --> 00:06:11.409
And then we'll just do
this.$store.state.the name of that

100
00:06:11.409 --> 00:06:15.519
particular property or that state,
which is isRestocking.

101
00:06:15.519 --> 00:06:19.015
And so the component is then
hooked up to the store, so

102
00:06:19.015 --> 00:06:24.082
as things are mutating and changing,
you'll see that happen quite easily.

103
00:06:24.082 --> 00:06:31.744
So this is the way in which you can
create a loading state within Vuex.

