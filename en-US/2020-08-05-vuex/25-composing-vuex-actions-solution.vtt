WEBVTT

1
00:00:00.000 --> 00:00:04.887
We stopped at the point and
we are working on an exercise where we

2
00:00:04.887 --> 00:00:08.866
were working through using
dispatch in an action.

3
00:00:08.866 --> 00:00:15.161
So, calling another action from an action,
which we haven't done before.

4
00:00:15.161 --> 00:00:19.890
And so, I'm gonna just check
out to my step one branch which

5
00:00:19.890 --> 00:00:22.073
has the solution already.

6
00:00:22.073 --> 00:00:28.828
I'm gonna run it just because I
wanna make sure that it is working.

7
00:00:28.828 --> 00:00:33.449
And, meanwhile, we'll go over the specific
exercise that we're working through.

8
00:00:33.449 --> 00:00:37.283
So, we have an action
called fetchFromInventory.

9
00:00:37.283 --> 00:00:41.590
It used to take commit,
now it takes a dispatch as well,

10
00:00:41.590 --> 00:00:47.745
because we are dispatching to a sibling
action or an action within all actions.

11
00:00:47.745 --> 00:00:52.329
And so, specifically, we want to
dispatch the checkMachinesStates

12
00:00:52.329 --> 00:00:57.233
action because we're checking to see
that the machine state works or not.

13
00:00:57.233 --> 00:01:02.313
And of course, this here is not
actually like an API or anything.

14
00:01:02.313 --> 00:01:05.356
It's just a promise that
does a set timeout.

15
00:01:05.356 --> 00:01:07.271
But the idea is the same,
it's asynchronous.

16
00:01:07.271 --> 00:01:13.320
So that's pretty nice, which means
that you can use promise-based syntax.

17
00:01:13.320 --> 00:01:17.641
And so, what I'm doing is
I'm dispatching a check to

18
00:01:17.641 --> 00:01:22.633
the machine states and
then that will return to me what I need,

19
00:01:22.633 --> 00:01:27.255
and then from that I can then
do a ping inventory and so on.

20
00:01:27.255 --> 00:01:30.612
I believe that was, so

21
00:01:30.612 --> 00:01:36.277
I can dispense and then it dispenses.

22
00:01:36.277 --> 00:01:39.926
And similarly for restock,
which is exactly what we were doing.

23
00:01:39.926 --> 00:01:42.605
There's this sense of a restock state.

24
00:01:42.605 --> 00:01:46.426
The specific action that we hooked
up was the checkMachineStates.

25
00:01:46.426 --> 00:01:50.817
So, previously when you click restock,
you don't get that checkMachineState.

26
00:01:50.817 --> 00:01:54.979
But now you get the sense of checking the
machine state before you actually restock.

27
00:01:54.979 --> 00:02:00.160
So that's a really nice way of
putting two actions together,

28
00:02:00.160 --> 00:02:04.652
you can dispatch an action
from one action within UX.

29
00:02:04.652 --> 00:02:08.694
And so that's pretty much all
that UX compose actions is.

30
00:02:08.694 --> 00:02:10.224
It's fairly straightforward.

31
00:02:10.224 --> 00:02:15.699
But I think it's a really interesting
concept to introduce because it allows you

32
00:02:15.699 --> 00:02:21.593
to chain actions together, you can sort of
make action code fairly sparse and simple.

33
00:02:21.593 --> 00:02:25.512
So, every single one of your actions
only does one thing instead of doing ten

34
00:02:25.512 --> 00:02:26.013
things.

35
00:02:26.013 --> 00:02:27.713
So, it makes your actions and

36
00:02:27.713 --> 00:02:31.325
your store code a bit more clean
with this particular pattern.

