WEBVTT

1
00:00:00.000 --> 00:00:04.010
This person wants you to
talk about view Vuex ORM.

2
00:00:04.010 --> 00:00:08.204
&gt;&gt; In this example, I have machines and
then I have this operational,

3
00:00:08.204 --> 00:00:12.637
it's essentially a machine condition and
then it gives me inventory.

4
00:00:12.637 --> 00:00:16.663
I did not style this, cuz this is
purely to check Vuex ORM [LAUGH].

5
00:00:16.663 --> 00:00:20.140
So from a really high level,
I can show you what Vuex ORM looks like,

6
00:00:20.140 --> 00:00:21.365
if you are interested.

7
00:00:23.205 --> 00:00:27.498
Essentially what you do
is you create a model, so

8
00:00:27.498 --> 00:00:33.901
I created a model called snack and
then I created a model called machine.

9
00:00:33.901 --> 00:00:38.799
And Vuex ORM has this concept of entities
which are essentially the name of

10
00:00:38.799 --> 00:00:40.221
the specific thing.

11
00:00:40.221 --> 00:00:44.912
So an entity is, this is called snack,
so this is useful because if you

12
00:00:44.912 --> 00:00:49.940
are calling it from the component,
it'll be like this dot [INAUDIBLE] dot.

13
00:00:49.940 --> 00:00:53.481
I think it's state.entities or
something like that.

14
00:00:53.481 --> 00:00:57.020
So that's what an entity is,
it's just how you access it.

15
00:00:57.020 --> 00:01:00.578
So also one thing to note with
Vuex ORM is that Vuex ORM is a plugin,

16
00:01:00.578 --> 00:01:02.085
it's literally a plugin.

17
00:01:02.085 --> 00:01:04.996
So we talked about plugins,
this is a plugin.

18
00:01:04.996 --> 00:01:08.248
And then I can define my machine model.

19
00:01:08.248 --> 00:01:12.815
In this case, this is actually really
unique because it's a relationship.

20
00:01:12.815 --> 00:01:16.487
So I created a relationship
between the two,

21
00:01:16.487 --> 00:01:20.360
so I'm matching the snacks
with the machines.

22
00:01:20.360 --> 00:01:24.575
And then there's also
a concept of location,

23
00:01:24.575 --> 00:01:29.770
which is a separate model to
check what that location is.

24
00:01:29.770 --> 00:01:34.889
And so I can register those models
appropriately, and then I install it.

25
00:01:34.889 --> 00:01:39.020
So as you might know,
this is plugin specific code.

26
00:01:39.020 --> 00:01:45.448
You're essentially installing
that database with the models.

27
00:01:45.448 --> 00:01:49.084
And then what I do next is I
can do various queries to it,

28
00:01:49.084 --> 00:01:50.832
which are really useful.

29
00:01:50.832 --> 00:01:54.828
So in Vuex ORM,
when you do a query you do,

30
00:01:54.828 --> 00:01:59.759
before I go further,
I should explain the insert piece.

31
00:01:59.759 --> 00:02:02.583
So Vuex ORM works only when
you insert data into it,

32
00:02:02.583 --> 00:02:05.286
[LAUGH] cuz otherwise it's just a model,
right?

33
00:02:05.286 --> 00:02:09.992
So what I wanna do is let's assume,
let's look at locations.

34
00:02:09.992 --> 00:02:14.232
So locations is just an array
with two items within it.

35
00:02:14.232 --> 00:02:19.051
So I can do location, which is model
insert, pass in the data and same for

36
00:02:19.051 --> 00:02:20.320
everything else.

37
00:02:20.320 --> 00:02:25.700
So what I'm using Vuex ORM for
here is defining the data model,

38
00:02:25.700 --> 00:02:31.297
as well as the relationships, so
that's a very useful use case.

39
00:02:31.297 --> 00:02:36.955
One example in which it is useful is let's
assume there's a concept of lock down.

40
00:02:36.955 --> 00:02:40.323
I mean, we're in lock down, but there's
a concept of locking down a machine.

41
00:02:40.323 --> 00:02:45.238
So let's say a location is locked down so
Wicker Park is a location in Chicago.

42
00:02:45.238 --> 00:02:48.461
If I press this button,
locked down becomes true and

43
00:02:48.461 --> 00:02:51.916
the machines that are in that
location are locked down.

44
00:02:51.916 --> 00:02:55.850
The useful thing about Vuex ORM
is defining relationships,

45
00:02:55.850 --> 00:02:58.164
defining state, updating state,

46
00:02:58.164 --> 00:03:02.265
that updates the relationships
without you having to do that.

47
00:03:02.265 --> 00:03:07.856
So what I want to show you is I
created a method called toggle status.

48
00:03:07.856 --> 00:03:10.921
This obviously can be
pulled into a Vuex action,

49
00:03:10.921 --> 00:03:15.795
like in this case I'm playing around
with Vuex ORM, so I wanted to just show.

50
00:03:15.795 --> 00:03:22.156
So what I'm doing is I'm essentially going
into my location model, I'm doing a where.

51
00:03:22.156 --> 00:03:24.764
So it's similar to SQL,
you could do where queries.

52
00:03:24.764 --> 00:03:28.450
So really nice, you don't have to filter,
you don't have to do any of that,

53
00:03:28.450 --> 00:03:29.657
you could just do where.

54
00:03:29.657 --> 00:03:32.949
So location update where,
it matches a specific ID.

55
00:03:32.949 --> 00:03:36.288
And then you update that
data appropriately.

56
00:03:36.288 --> 00:03:41.913
And then again, what we can do here, is I
can query the machines that are in that

57
00:03:41.913 --> 00:03:47.558
location and then notify those machines
that they are no longer operational.

58
00:03:47.558 --> 00:03:53.590
So this is way cleaner and way easier
than having to do it any other way.

59
00:03:53.590 --> 00:03:57.304
I also wrote more complex code.

60
00:03:57.304 --> 00:04:02.064
That was just a very simple explanation,

61
00:04:02.064 --> 00:04:05.876
so I will go into my Vuex ORM code.

62
00:04:06.973 --> 00:04:11.225
Cd vuex-normalize, and

63
00:04:11.225 --> 00:04:16.836
I think I had only three branches.

64
00:04:16.836 --> 00:04:20.411
Yeah, so this is super complex Vuex ORM,
which is why

65
00:04:20.411 --> 00:04:25.350
I was a bit worried going down this
rabbit hole, but I think it's useful.

66
00:04:25.350 --> 00:04:30.390
So the thing that's useful
with Vuex ORM is how I've used

67
00:04:30.390 --> 00:04:36.700
it is I define my models in a separate
folder, so I have a models folder.

68
00:04:36.700 --> 00:04:41.426
And then within them, I define the
specific model, just so that it's cleaner,

69
00:04:41.426 --> 00:04:44.009
I can know that this is
where my model lives.

70
00:04:44.009 --> 00:04:47.512
And then I also have this
thing called helpers.

71
00:04:47.512 --> 00:04:52.470
Because sometimes it can be really
annoying to have queries live everywhere.

72
00:04:52.470 --> 00:04:54.403
So I have a helpers file,

73
00:04:54.403 --> 00:04:59.015
so I know that these are specifically
going to use my model.

74
00:04:59.015 --> 00:05:04.837
So it helps me reduce the clutter of
adding my model all over the place.

75
00:05:04.837 --> 00:05:09.896
So with this, I can actually import
that into my store, essentially

76
00:05:09.896 --> 00:05:16.017
what I'm doing here is, cuz this is
where I'm initializing the code, yeah.

77
00:05:16.017 --> 00:05:22.651
So to answer your question about state and
Vuex ORM, which is very long winded,

78
00:05:22.651 --> 00:05:29.404
I create an init function in my actions
where I'm initializing all the DB stuff.

79
00:05:29.404 --> 00:05:35.179
This init is interesting and
I didn't talk about this, but I will now.

80
00:05:35.179 --> 00:05:38.878
One thing I really like to
do with my Vuex code is,

81
00:05:38.878 --> 00:05:44.025
I like to write extra things which
checks across all of my modules and

82
00:05:44.025 --> 00:05:47.746
all of my code,
to see whether there's an init.

83
00:05:47.746 --> 00:05:52.246
And then it automatically dispatches the
init [LAUGH] so, it's a really nice way

84
00:05:52.246 --> 00:05:56.359
of checking and getting all data from
databases and standing things up.

85
00:05:56.359 --> 00:06:02.758
So the initialization code of reading from
databases is independent of my components.

86
00:06:02.758 --> 00:06:05.032
So the store does all that work.

87
00:06:05.032 --> 00:06:06.800
So that's what this is.

88
00:06:06.800 --> 00:06:09.748
And then I'm doing all the DB stuff here.

89
00:06:09.748 --> 00:06:14.750
And then again, within my actions,
I can also use that to do queries.

90
00:06:14.750 --> 00:06:18.693
I just chose to extrapolate
all the queries into a helper,

91
00:06:18.693 --> 00:06:23.684
just because personally for me,
it's useful to extrapolate my personal

92
00:06:23.684 --> 00:06:28.773
code that I'm doing in my store state,
and what's happening in Vuex ORM.

93
00:06:28.773 --> 00:06:31.744
And then I pull that in as I see fit.

