WEBVTT

1
00:00:00.000 --> 00:00:04.289
Something that's really useful within
Vuex is the ability to dispatch.

2
00:00:04.289 --> 00:00:09.912
So in the example we were looking at and
we wanted to check the machine

3
00:00:09.912 --> 00:00:14.856
condition before we actually
restart the machine itself.

4
00:00:14.856 --> 00:00:19.609
And so, this is essentially
trying to take one action and

5
00:00:19.609 --> 00:00:24.757
calling another action and
then making a commit or committing

6
00:00:24.757 --> 00:00:31.206
a mutation on the condition that
the dispatched action returns successful.

7
00:00:31.206 --> 00:00:33.293
So for our first exercise,

8
00:00:33.293 --> 00:00:38.664
we're going to dive into how exactly
we're going to dispatch a call.

9
00:00:38.664 --> 00:00:43.309
So the fetch from inventory
action will dispatch a call to

10
00:00:43.309 --> 00:00:47.954
check the machine state, and
then on successful check,

11
00:00:47.954 --> 00:00:51.365
it will then restock the machine itself.

12
00:00:51.365 --> 00:00:56.887
And so with this, we'll dive into
what that looks like specifically.

13
00:00:56.887 --> 00:01:01.481
So in fetchFromInventory,
what we need to do first.

14
00:01:01.481 --> 00:01:04.634
Because fetchFromInventory
is going to do a dispatch.

15
00:01:04.634 --> 00:01:12.789
So I'm going to specifically grab
the dispatch method from my context.

16
00:01:12.789 --> 00:01:17.734
And then from that I'm
going to dispatch a action,

17
00:01:17.734 --> 00:01:22.566
in this case,
it's called check machine state.

18
00:01:22.566 --> 00:01:29.558
And then I am going to onsuccess.

19
00:01:29.558 --> 00:01:36.210
So this is assuming, I think check
machine states always returns resolve.

20
00:01:36.210 --> 00:01:41.028
So assuming it does return,

21
00:01:41.028 --> 00:01:49.267
what I wanna do is I want
to call a restock commit.

22
00:01:49.267 --> 00:01:55.505
So if I go down here,
I'm going to call stock items.

23
00:01:55.505 --> 00:02:03.323
So what I will do now is I will also
grab a commit because I care about that.

24
00:02:03.323 --> 00:02:08.932
And on success I'm going
to commit restock items,

25
00:02:08.932 --> 00:02:16.116
and I don't believe restock items
takes a pay load at the moment.

26
00:02:16.116 --> 00:02:20.693
Yes, so
this is the way in which I can dispatch it

27
00:02:20.693 --> 00:02:25.736
really easily, so
I chained some actions and so on.

28
00:02:25.736 --> 00:02:30.336
And so, one of the other things
that I can do is I can also

29
00:02:30.336 --> 00:02:34.848
change specific attributes or
specific qualities.

30
00:02:34.848 --> 00:02:39.489
So if I look at the state,
there is a state called isCheckingMachine.

31
00:02:39.489 --> 00:02:46.061
And isCheckingMachine has
a mutation that updates it as well.

32
00:02:46.061 --> 00:02:50.379
And so, what I wanna do is I wanna make
sure that I update the machine state in

33
00:02:50.379 --> 00:02:52.450
the event that it is being checked.

34
00:02:52.450 --> 00:02:55.122
So if I look here in my
check machine state,

35
00:02:55.122 --> 00:02:57.807
that's exactly what's happening here.

36
00:02:57.807 --> 00:03:02.204
And then of course the restock
as well needs to follow suit.

37
00:03:02.204 --> 00:03:08.189
So fetchFromInventory is essentially
dispatching a check machine state,

38
00:03:08.189 --> 00:03:11.844
and then onsuccess,
it commits the restock.

39
00:03:11.844 --> 00:03:16.927
So what we'll do is we'll dispatch, and

40
00:03:16.927 --> 00:03:25.352
then onsuccess we are also going to
commit the isRestocking to true,

41
00:03:25.352 --> 00:03:29.722
so we'll go to isRestocking, so.

42
00:03:35.636 --> 00:03:40.243
Commit isRestocking,

43
00:03:40.243 --> 00:03:44.854
I think it was capital.

44
00:03:54.837 --> 00:03:56.771
And then we can do it from there.

45
00:03:56.771 --> 00:04:00.065
One thing to note also is that,

46
00:04:00.065 --> 00:04:04.507
this restocking generally calls in API.

47
00:04:04.507 --> 00:04:09.021
So this is fine and all but
we want this to also be asynchronous.

48
00:04:09.021 --> 00:04:13.844
So what we'll do is we have
async function here called

49
00:04:13.844 --> 00:04:18.461
pingInventory, so
we're gonna uncomment that.

50
00:04:18.461 --> 00:04:21.533
We still want that, so

51
00:04:21.533 --> 00:04:26.234
we'll do pingInventory like so.

52
00:04:26.234 --> 00:04:33.449
I don't believe it takes in an item, so
I think the item by default is chips.

53
00:04:33.449 --> 00:04:36.552
So we might wanna do chips like so.

54
00:04:36.552 --> 00:04:41.592
And then on success, we will call

55
00:04:41.592 --> 00:04:46.817
this particular restock, here.

56
00:04:46.817 --> 00:04:51.106
And then we also wanna make
sure we're changing the state.

57
00:04:51.106 --> 00:04:58.593
So isRestocking is now false because
the item has been restocked,

58
00:04:58.593 --> 00:05:05.556
and then above here is when we
are doing isRestocking to true.

59
00:05:05.556 --> 00:05:10.567
So essentially, what is happening here is
I'm dispatching a check machine state.

60
00:05:10.567 --> 00:05:13.594
When the machine state is successful,

61
00:05:13.594 --> 00:05:19.474
it is then in the isRestocking state,
it fetches from this particular API.

62
00:05:19.474 --> 00:05:20.984
On successful fetch,

63
00:05:20.984 --> 00:05:25.517
it will change isRestocking to
false cuz it's no longer stocking.

64
00:05:25.517 --> 00:05:27.270
And then it will change,

65
00:05:27.270 --> 00:05:31.535
it will commit the mutation to
actually change that itself.

66
00:05:31.535 --> 00:05:37.535
And so that is in effect,
how the things hook up within it and

67
00:05:37.535 --> 00:05:44.631
how you can dispatch actions and
then call API's on success and fail.

