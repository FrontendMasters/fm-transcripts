WEBVTT

1
00:00:00.000 --> 00:00:01.732
I have my component running here.

2
00:00:01.732 --> 00:00:04.817
And it has a list of machines.

3
00:00:04.817 --> 00:00:08.345
The exercise is to add
a per-route navigation guard.

4
00:00:08.345 --> 00:00:11.706
So the idea is that I don't
want this to be the default.

5
00:00:11.706 --> 00:00:16.198
I want this to be the default.

6
00:00:16.198 --> 00:00:22.935
So to do that, I will move into my,

7
00:00:26.105 --> 00:00:32.663
Router code specifically so
I'll cd into, I have to cd out.

8
00:00:35.013 --> 00:00:41.456
Router and
then I will look at the routes component.

9
00:00:41.456 --> 00:00:46.496
So again, route.js router slash index.js,

10
00:00:46.496 --> 00:00:49.776
whichever you prefer is fine.

11
00:00:49.776 --> 00:00:55.230
And so what I wanna do is I want
to go into my LoginScreen because,

12
00:00:55.230 --> 00:01:02.510
actually my InventoryScreen, so I want to
add my per-route navigation guard here.

13
00:01:02.510 --> 00:01:06.331
So what I'll do is I'll do

14
00:01:06.331 --> 00:01:11.729
a beforeEnter to, from, and next.

15
00:01:11.729 --> 00:01:19.137
I think I need reference to this, yes.

16
00:01:23.137 --> 00:01:28.067
And then with this,
I am essentially just checking the store.

17
00:01:28.067 --> 00:01:32.898
One other thing to note that I showed
in this particular stage is that

18
00:01:32.898 --> 00:01:34.862
there's an import store.

19
00:01:34.862 --> 00:01:39.604
And we're gonna need access to that
because your router file doesn't have

20
00:01:39.604 --> 00:01:41.718
access to this [INAUDIBLE] store.

21
00:01:41.718 --> 00:01:45.527
You need to import the store
in order to use it.

22
00:01:45.527 --> 00:01:52.608
So I'm gathering the getter,
and I specifically care about,

23
00:01:52.608 --> 00:01:57.428
I believe I have a method
call is locked in.

24
00:02:05.547 --> 00:02:10.447
This is the part where I forgot
if I capitalized it properly.

25
00:02:14.183 --> 00:02:19.243
And then I do that.

26
00:02:19.243 --> 00:02:25.735
So I create a navigation guard
very easily and I hope that works.

27
00:02:25.735 --> 00:02:30.354
So if I navigate to localhost.8080,

28
00:02:30.354 --> 00:02:35.369
it automatically does not
do what I need to do.

29
00:02:35.369 --> 00:02:39.657
[LAUGH] Why?

30
00:02:39.657 --> 00:02:40.666
Hold on.

31
00:02:45.033 --> 00:02:50.443
Okay, Let's figure out what I did.

32
00:02:50.443 --> 00:02:56.372
BeforeEnter: (to, from, next),
if store.getters is logged in and

33
00:02:56.372 --> 00:03:01.929
that's probably because I have a user
of item and I need it to be null.

34
00:03:05.546 --> 00:03:06.728
That was my dad.

35
00:03:06.728 --> 00:03:07.857
There you go.

36
00:03:07.857 --> 00:03:14.516
So now automatically when I try to
access my route, I'm navigated to login.

37
00:03:14.516 --> 00:03:18.033
And that's because users now, so
previously, my user was an object.

38
00:03:18.033 --> 00:03:21.547
That was totally a typo on my part,
I apologize.

39
00:03:21.547 --> 00:03:27.993
But now that user doesn't exist so it's
null, it will return me to the login page.

40
00:03:27.993 --> 00:03:32.847
So that's great, that's my first
per-route navigation guard using Vuex.

41
00:03:32.847 --> 00:03:38.353
So really useful, but I think it's
useful to hook that into various

42
00:03:38.353 --> 00:03:43.597
pieces of the application as well because,
I have,

43
00:03:43.597 --> 00:03:50.622
let's look, I have an admin screen as
well as an InventoryScreen, let's say.

44
00:03:50.622 --> 00:03:55.962
So I don't want users to have
access to inventory because

45
00:03:55.962 --> 00:04:00.869
currently they can access
inventory quite easily.

46
00:04:00.869 --> 00:04:05.206
And that's not a good thing because I
don't want them to have access to it.

47
00:04:05.206 --> 00:04:08.442
So what I'm gonna do is I'm going to,

48
00:04:10.673 --> 00:04:14.171
Essentially repeat what I did earlier.

49
00:04:14.171 --> 00:04:18.286
So that anytime a user
tries to access inventory,

50
00:04:19.838 --> 00:04:23.908
They are navigated back to login so
it automatically shuts

51
00:04:23.908 --> 00:04:28.736
anyone who's trying to access
routes they're not supposed to out.

52
00:04:28.736 --> 00:04:29.923
So that's really nice.

53
00:04:29.923 --> 00:04:34.497
This is all great because per-route
navigation guards are really useful as

54
00:04:34.497 --> 00:04:39.214
a way of navigating specific routes that
you want to protect from unauthorized

55
00:04:39.214 --> 00:04:39.722
users.

56
00:04:39.722 --> 00:04:43.016
But as you might notice,
in applications oftentimes,

57
00:04:43.016 --> 00:04:47.022
there are many routes that you don't
want people to have access to.

58
00:04:47.022 --> 00:04:48.977
And it can be really hefty for

59
00:04:48.977 --> 00:04:54.451
you to constantly write per-route
navigation guards for every single route.

60
00:04:54.451 --> 00:04:58.895
And so this sort of per-route
navigation guards works in

61
00:04:58.895 --> 00:05:03.813
the instance when you want one
route specifically protected.

62
00:05:03.813 --> 00:05:07.957
Or you have things that are very specific
to that route that you wanna check for

63
00:05:07.957 --> 00:05:09.499
like permissions and so on.

