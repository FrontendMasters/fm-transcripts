WEBVTT

1
00:00:00.000 --> 00:00:02.912
The next part of it is we'll look at and

2
00:00:02.912 --> 00:00:08.202
dive into the specific parameters
that actions and mutations take.

3
00:00:08.202 --> 00:00:13.408
Because as we're looking at modularize
ViewX, I think it's useful to

4
00:00:13.408 --> 00:00:19.410
also think about how we can make our code
a bit clearer and understandable to read.

5
00:00:19.410 --> 00:00:24.037
So for actions previously we took in
a single parameter which is context and

6
00:00:24.037 --> 00:00:27.496
we took in mutations a single
parameter which is state.

7
00:00:27.496 --> 00:00:32.626
And this was fine for mostly because
in our action we only committed,

8
00:00:32.626 --> 00:00:34.934
we only did context.commit.

9
00:00:34.934 --> 00:00:36.699
But I think it's useful for

10
00:00:36.699 --> 00:00:41.247
you to know that there are multiple
pieces available within context.

11
00:00:41.247 --> 00:00:45.900
So commit is one method, but you can
also call state, you can grab getters,

12
00:00:45.900 --> 00:00:49.842
you can grab dispatch,
which we'll talk about a little later.

13
00:00:49.842 --> 00:00:53.406
And these are all useful ways
of checking state, for instance,

14
00:00:53.406 --> 00:00:55.320
that's what context.state is.

15
00:00:55.320 --> 00:00:59.184
Committing is committing mutations,
getters is checking specific getter, so

16
00:00:59.184 --> 00:01:01.867
you don't have to reuse code
that already exists then.

17
00:01:01.867 --> 00:01:06.531
And dispatching is something that will
come in really handy later when we talk

18
00:01:06.531 --> 00:01:09.616
about composing ViewX actions,
but it's a way for

19
00:01:09.616 --> 00:01:13.800
an action to talk to another action,
a sibling action, so to speak.

20
00:01:13.800 --> 00:01:19.031
And so all of these are methods
available on the contexts parameter.

21
00:01:19.031 --> 00:01:22.379
And so what we can do is we can
essentially sort of destructure them,

22
00:01:22.379 --> 00:01:25.579
you don't have to do context.commit,
context dot whatever.

23
00:01:25.579 --> 00:01:28.375
You can destructure them and
then call them specifically.

24
00:01:28.375 --> 00:01:34.339
So looking back at my fetch from inventory
code, I'm just removing the payload for

25
00:01:34.339 --> 00:01:40.132
now just because for clarity sake, online
13 instead of calling the entire and

26
00:01:40.132 --> 00:01:46.376
grabbing the entire context object, I'm
grabbing the commit method specifically.

27
00:01:46.376 --> 00:01:49.203
So it grabs commit, and
then it uses that commit.

28
00:01:49.203 --> 00:01:52.826
So it's useful because object
destructuring gives me a sense of what

29
00:01:52.826 --> 00:01:54.458
exactly I'm doing in action.

30
00:01:54.458 --> 00:01:59.053
So instead of having to parse the specific
action to be like, am I calling state,

31
00:01:59.053 --> 00:02:03.647
am I calling getters, am I calling commits
and so on, I can look automatically in

32
00:02:03.647 --> 00:02:07.702
the function signature to be like
what exactly is being called here, or

33
00:02:07.702 --> 00:02:09.351
what exactly is being used.

34
00:02:09.351 --> 00:02:14.118
So I know automatically that this action
is just committing a mutation because it

35
00:02:14.118 --> 00:02:18.761
uses object destructuring to grab
the commit and then uses it appropriately.

36
00:02:18.761 --> 00:02:23.551
So what could be useful is we have
an example and we talked about this a lot,

37
00:02:23.551 --> 00:02:27.047
which is that there's a way
of restocking a machine.

38
00:02:27.047 --> 00:02:31.780
So you have sort of central command which
has stock of everything possible, so

39
00:02:31.780 --> 00:02:36.514
all items and inventory and then central
command will then restock the vending

40
00:02:36.514 --> 00:02:40.190
machine so to speak,
which allows it to increment and so on.

41
00:02:40.190 --> 00:02:44.969
And so what I want to do is very
similar to the ping inventory code

42
00:02:44.969 --> 00:02:46.420
that I showed you.

43
00:02:46.420 --> 00:02:49.258
On line 14, I'm calling an API.

44
00:02:49.258 --> 00:02:53.578
There's not any, it's the pseudo code,
but I'm calling some API and

45
00:02:53.578 --> 00:02:55.594
then I'm grabbing that result.

46
00:02:55.594 --> 00:02:59.171
And then I'm passing that
result down to my mutation.

47
00:02:59.171 --> 00:03:04.877
So again, very similar to how I showed
you that mutation takes in a payload.

48
00:03:04.877 --> 00:03:08.975
In this particular case, I'm calling
the API grabbing the result and

49
00:03:08.975 --> 00:03:12.251
then passing it down to my
mutation itself as a payload.

50
00:03:12.251 --> 00:03:17.288
I just want to emphasize that concept
because it's useful as you're working with

51
00:03:17.288 --> 00:03:22.033
API's and so on, you're gonna need to
understand that payload piece and how

52
00:03:22.033 --> 00:03:27.090
exactly a mutation can grab the payload
and then update the state appropriately.

