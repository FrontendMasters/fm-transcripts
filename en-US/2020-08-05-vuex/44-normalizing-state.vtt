WEBVTT

1
00:00:00.198 --> 00:00:03.362
So the question that was asked
was about normalizing state.

2
00:00:03.362 --> 00:00:08.246
And we'll look at an example of state and
why normalizing state makes sense.

3
00:00:08.246 --> 00:00:13.323
So here is a instance of,
let's assume this is a state object.

4
00:00:13.323 --> 00:00:16.567
So I have a state object of,
well, a state array.

5
00:00:16.567 --> 00:00:19.623
So I have vending machines in the array.

6
00:00:19.623 --> 00:00:23.091
And then each vending machine
has various properties to it.

7
00:00:23.091 --> 00:00:24.577
So it has an ID, it has a name,

8
00:00:24.577 --> 00:00:27.863
it might have a location because
you might wanna know where it is.

9
00:00:27.863 --> 00:00:31.566
It might have an inventory because you
wanna know what's in it and so on.

10
00:00:31.566 --> 00:00:34.958
And so, as I've annotated,
there is location information,

11
00:00:34.958 --> 00:00:38.735
there's inventory information and
there's machine information.

12
00:00:38.735 --> 00:00:42.691
And so it's frustrating because
it's very deeply nested.

13
00:00:42.691 --> 00:00:45.232
It's fine for
a very simplistic application.

14
00:00:45.232 --> 00:00:50.173
But it's annoying because now if I
wanted to access certain properties,

15
00:00:50.173 --> 00:00:52.244
I need to essentially filter or

16
00:00:52.244 --> 00:00:56.486
map through the entire object
in order to get specific things.

17
00:00:56.486 --> 00:00:58.402
Here's an example.

18
00:00:58.402 --> 00:01:01.562
Let's say that there's
a location called Lake View,

19
00:01:01.562 --> 00:01:03.702
which is a neighborhood in Chicago.

20
00:01:03.702 --> 00:01:10.724
And in this particular data set
Lake View is spelt Lake-View.

21
00:01:10.724 --> 00:01:13.962
But let's say I wanted to rename
that specific location right?

22
00:01:13.962 --> 00:01:15.705
If I wanted to rename it,

23
00:01:15.705 --> 00:01:20.199
I'm going to have to map over
the entire vending machine array.

24
00:01:20.199 --> 00:01:23.831
Find that specific location and
then update it appropriately.

25
00:01:23.831 --> 00:01:28.451
So as you can tell, it starts to get
really hairy because the location is

26
00:01:28.451 --> 00:01:31.156
technically not related to the machine.

27
00:01:31.156 --> 00:01:34.588
The machine doesn't have to know
location specific information.

28
00:01:34.588 --> 00:01:36.896
It just needs to know where it is.

29
00:01:36.896 --> 00:01:42.077
And so having things nested this way gets
really difficult to deal with because

30
00:01:42.077 --> 00:01:47.115
you end up having to map, having to
filter and do extra things regarding it.

31
00:01:47.115 --> 00:01:51.526
So the case for normalization is that
data is duplicated and leaves room for

32
00:01:51.526 --> 00:01:56.426
error because sometimes you might wanna
update location, but then another record

33
00:01:56.426 --> 00:02:01.202
doesn't get updated because you missed it
or the code messed it up or something.

34
00:02:01.202 --> 00:02:04.487
So data is also deeply nested and
makes it hard to update.

35
00:02:04.487 --> 00:02:08.288
Updates to nested data lead
to complete re-renders.

36
00:02:08.288 --> 00:02:12.406
So if you're going through the entire
array updating one attribute that doesn't

37
00:02:12.406 --> 00:02:16.285
actually change the render view,
it could cause unnecessary re-renders if

38
00:02:16.285 --> 00:02:20.240
you're not doing things carefully, so
it leaves a lot of room for user error.

39
00:02:20.240 --> 00:02:22.448
So a better way of doing things, and

40
00:02:22.448 --> 00:02:27.248
this is sort of very similar to how I
believe redux has a very similar concept.

41
00:02:27.248 --> 00:02:29.758
Where they introduced this
idea of normalizing state.

42
00:02:29.758 --> 00:02:33.766
Normalizing state is sort of
removing the nestedness of data.

43
00:02:33.766 --> 00:02:39.453
So you're trying to take away the
different pieces that can cause errors.

44
00:02:39.453 --> 00:02:43.750
So let's say we're gona look at
inventory and machines, let's say.

45
00:02:43.750 --> 00:02:47.654
So I have machines,
every machine has an ID and a name and

46
00:02:47.654 --> 00:02:50.157
then it has inventory associated.

47
00:02:50.157 --> 00:02:53.015
And then I also have this
concept of inventory,

48
00:02:53.015 --> 00:02:54.948
which has ID and names and so on.

49
00:02:54.948 --> 00:03:00.641
So you can start to see that here, instead
of having the name of the item, I'm

50
00:03:00.641 --> 00:03:06.791
having the actual unique identifier that
has extra information of the inventory.

51
00:03:06.791 --> 00:03:10.897
So that means that when inventory1
gets changed, like I changed this

52
00:03:10.897 --> 00:03:15.508
specific item, I don't have to go through
every single machine to update it.

53
00:03:15.508 --> 00:03:18.224
It just automatically is referencing this,
and

54
00:03:18.224 --> 00:03:21.403
the name will be called anytime
it wants to grab the name,

55
00:03:21.403 --> 00:03:25.261
it knows that it's been updated
because it's just a single record.

56
00:03:25.261 --> 00:03:30.370
If you're familiar with databases and how
they work, this is exactly how that is.

57
00:03:30.370 --> 00:03:32.267
And so that's a really useful,

58
00:03:32.267 --> 00:03:36.279
just a high level explanation of
understanding why this is useful.

59
00:03:36.279 --> 00:03:40.623
It's just a really great way of
not only like normalizing data,

60
00:03:40.623 --> 00:03:43.439
preventing the deeply nested state, but

61
00:03:43.439 --> 00:03:48.034
also like another way of doing it
is sort of showing relationships.

62
00:03:48.034 --> 00:03:53.408
So this is a many to many relationship so
it can be a bit confusing,

63
00:03:53.408 --> 00:03:58.100
but it's this idea of,
let's say I have inventory1 and

64
00:03:58.100 --> 00:04:03.215
inventory1 is chips,
chips is in machine1 and machine2.

65
00:04:03.215 --> 00:04:09.227
And similarly inventory2, which is chips
of cookies, is in only machine1 and so on.

66
00:04:09.227 --> 00:04:12.275
So I can see relationships,
in this case it's a many to many.

67
00:04:12.275 --> 00:04:17.202
So many machines have many inventory and
many inventory have many machines,

68
00:04:17.202 --> 00:04:19.183
just from a really high level.

69
00:04:19.183 --> 00:04:24.271
And to do that, I'm not gonna go into this
because I'll definitely go over time.

70
00:04:24.271 --> 00:04:27.471
Vuex ORM is a really great
tool that you can use,

71
00:04:27.471 --> 00:04:30.760
it allows you to normalize
state really easily.

72
00:04:30.760 --> 00:04:37.582
There's plugins on top of your Vuex ORM
that allow you to use Axios with Vuex ORM.

73
00:04:37.582 --> 00:04:42.040
So you can do a fetch of an API and
then put it into models.

74
00:04:42.040 --> 00:04:46.001
So you can query and access data
really easily without it being nested.

