WEBVTT

1
00:00:00.000 --> 00:00:05.948
Vuex is specifically a centralized data
store for shared data logic and methods.

2
00:00:05.948 --> 00:00:12.016
And it has rules regarding how exactly
state can be mutated and changed.

3
00:00:12.016 --> 00:00:16.586
And of course, if you've worked
with another framework like React,

4
00:00:16.586 --> 00:00:19.070
you might have heard of Redux or Flux.

5
00:00:19.070 --> 00:00:21.898
And that has a very
similar concept of Vuex.

6
00:00:21.898 --> 00:00:27.002
It's essentially this way
of centralizing your state,

7
00:00:27.002 --> 00:00:31.263
so that state changes in
a predictable manner.

8
00:00:31.263 --> 00:00:36.379
This is the diagram, the very popular
diagram in which we show the Vuex.

9
00:00:36.379 --> 00:00:38.493
I think Flux also has
a very similar diagram.

10
00:00:38.493 --> 00:00:44.367
It's essentially showing how exactly state
changes in sort of a flowchart diagram.

11
00:00:44.367 --> 00:00:48.128
So, here we'll start with
the view component itself,

12
00:00:48.128 --> 00:00:53.262
because that's sort of what the view
layer is, view as and what you can see.

13
00:00:53.262 --> 00:00:58.353
And so, the view component is essentially
what the user will be interacting with.

14
00:00:58.353 --> 00:01:02.163
So, user can click on it, can hover on it,
they can do whatever they want.

15
00:01:02.163 --> 00:01:08.997
And the component will then
dispatch events to the Vuex store.

16
00:01:08.997 --> 00:01:13.209
And the store is what you see
on the right, which is actions,

17
00:01:13.209 --> 00:01:14.952
mutations, and state.

18
00:01:14.952 --> 00:01:22.759
And the action is where Vuex decides
what exactly he wants to do.

19
00:01:22.759 --> 00:01:27.946
So for instance, in our vending machine
example, if someone is trying to get items

20
00:01:27.946 --> 00:01:32.927
from the vending machine, the action
might be fetch inventory, for example.

21
00:01:32.927 --> 00:01:34.638
And so, the action is what?

22
00:01:34.638 --> 00:01:36.830
Is how the application decides or

23
00:01:36.830 --> 00:01:40.833
how the store decides what to
do with that particular event.

24
00:01:40.833 --> 00:01:43.831
This is also a way back in APIs,
can come in handy.

25
00:01:43.831 --> 00:01:47.778
It's where you're essentially calling to
a database, or reading from a data base.

26
00:01:47.778 --> 00:01:50.593
And that's what happens
within actions itself.

27
00:01:50.593 --> 00:01:55.372
Mutations is actually what changes and
when the state changes.

28
00:01:55.372 --> 00:02:00.779
Actions and mutations are sort of
cookie because they're fairly similar.

29
00:02:00.779 --> 00:02:05.005
But you can think of them as the mutation
is where the state is actually changing.

30
00:02:05.005 --> 00:02:08.241
And the action is where you do filters and
maps, and

31
00:02:08.241 --> 00:02:10.882
you check how exactly the state changes.

32
00:02:10.882 --> 00:02:13.795
And so, mutation is just
essentially changing the state.

33
00:02:13.795 --> 00:02:16.151
That's where the state changes happen.

34
00:02:16.151 --> 00:02:18.846
And you can see this
within DevTools itself.

35
00:02:18.846 --> 00:02:22.497
So, I'll show you what that
looks like as we progress.

36
00:02:22.497 --> 00:02:25.489
But within DevTools,
you'll see the mutation that occurs.

37
00:02:25.489 --> 00:02:28.006
Because that's when the state
is exactly changing and

38
00:02:28.006 --> 00:02:29.710
that's what you really care about.

39
00:02:29.710 --> 00:02:34.844
And then mutations obviously will mutate
the state, so mutations touch states.

40
00:02:34.844 --> 00:02:37.470
Actions don't necessarily touch state but
mutations do.

41
00:02:37.470 --> 00:02:40.524
And then the mutations will
mutate the state and change it.

42
00:02:40.524 --> 00:02:43.676
And the state will then be propagated
back to the component itself.

43
00:02:43.676 --> 00:02:49.586
So, the component will render that update,
if it cares to and if it wants to.

44
00:02:49.586 --> 00:02:54.023
So, that's sort of the flow of
how Vuex works with Vuex, and

45
00:02:54.023 --> 00:02:55.943
how Vuex works as a whole.

46
00:02:55.943 --> 00:03:00.707
And let's break down the different pieces,
we'll go over this in the second

47
00:03:00.707 --> 00:03:04.826
part of this workshop as well, but
here's just is in a high level.

48
00:03:04.826 --> 00:03:10.714
So, state is a single source of truth, and
it's where you store all the information.

49
00:03:10.714 --> 00:03:15.338
So, back to the vending machine example,
if you have inventory,

50
00:03:15.338 --> 00:03:20.389
all of the inventory or that specific
array of items will be in the state.

51
00:03:20.389 --> 00:03:24.211
Actions and mutations are similar,

52
00:03:24.211 --> 00:03:29.148
except the action is
what causes the mutation.

53
00:03:29.148 --> 00:03:30.416
So, the action happens,

54
00:03:30.416 --> 00:03:33.311
the action is where you determine
what to do with the state.

55
00:03:33.311 --> 00:03:35.783
And the mutation is where you
actually change the state.

56
00:03:35.783 --> 00:03:39.003
Another way of looking at it is
that actions are asynchronous.

57
00:03:39.003 --> 00:03:41.795
So, you can make database calls,
whatever that may be.

58
00:03:41.795 --> 00:03:44.727
So, async and
then mutations are only synchronous.

59
00:03:44.727 --> 00:03:47.524
You can't do asynchronous things and
mutations.

60
00:03:47.524 --> 00:03:51.158
And then getters is something I
didn't get to in the diagram.

61
00:03:51.158 --> 00:03:55.330
But it's something to think about, because
it sits in the layer between state and

62
00:03:55.330 --> 00:03:56.066
components.

63
00:03:56.066 --> 00:03:58.806
And getters is sort of derived state.

64
00:03:58.806 --> 00:04:01.618
So, the state changes, and
it updates, and whatever.

65
00:04:01.618 --> 00:04:06.376
But the getter is where you can sort of
map over the state to get specific things.

66
00:04:06.376 --> 00:04:10.121
So let's see,
you have a list of inventory and

67
00:04:10.121 --> 00:04:14.741
you want the inventory that's below five,
let's say.

68
00:04:14.741 --> 00:04:19.276
So, you might want to use a getter for
that, because you don't necessarily need

69
00:04:19.276 --> 00:04:22.627
to change the state to get
the items that are less than five.

70
00:04:22.627 --> 00:04:27.465
But it's useful to have a getter to check
the states for you without you having

71
00:04:27.465 --> 00:04:31.723
to do that constantly in component,
so it allows for reusability.

72
00:04:31.723 --> 00:04:36.209
Cool, so, we'll look at our first
example which is sort of this

73
00:04:36.209 --> 00:04:38.547
Vending Machine Stock Counter.

74
00:04:38.547 --> 00:04:44.456
And so, here we have a very simple
view of a item from a vending machine,

75
00:04:44.456 --> 00:04:46.139
very popular item.

76
00:04:46.139 --> 00:04:49.702
We have a supplies, so
how many items are within it?

77
00:04:49.702 --> 00:04:54.080
And then, you also have buttons that you
can use to interact with that supply.

78
00:04:54.080 --> 00:04:59.560
So, I can dispense, and
dispense is dispensing items so

79
00:04:59.560 --> 00:05:03.567
the supply counter goes down, and so on.

80
00:05:03.567 --> 00:05:07.825
And then restock is just sort
of setting it back to 40 which

81
00:05:07.825 --> 00:05:10.388
is an arbitrary full stock number.

82
00:05:10.388 --> 00:05:14.683
And so, this is sort of a very simple
state of how you're changing and

83
00:05:14.683 --> 00:05:18.251
updating, you can think of it
very similar to a counter.

84
00:05:18.251 --> 00:05:21.815
We're counting up and
down, it's the same idea.

85
00:05:21.815 --> 00:05:25.267
Except this is in line with
the metaphor that we've been using.

86
00:05:25.267 --> 00:05:29.542
And so, if we break that particular
piece down in that view down,

87
00:05:29.542 --> 00:05:32.987
we have this concept of state,
which is the supply.

88
00:05:32.987 --> 00:05:36.790
And then, you have the concept
of an action and a mutation,

89
00:05:36.790 --> 00:05:39.767
which is the restock in
that dispense button.

90
00:05:39.767 --> 00:05:42.746
In this case, it's only restocked,
but there's a dispense button as well.

91
00:05:42.746 --> 00:05:45.467
That's where the action and
the mutation happens.

