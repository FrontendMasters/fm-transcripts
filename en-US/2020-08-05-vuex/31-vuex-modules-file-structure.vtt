WEBVTT

1
00:00:00.000 --> 00:00:04.170
The other thing that I wanted to
highlight that is really useful and

2
00:00:04.170 --> 00:00:08.491
working with modules is the ability for
you to structure your files so

3
00:00:08.491 --> 00:00:10.294
that it allows for modules.

4
00:00:10.294 --> 00:00:12.116
So here's a really quick overview.

5
00:00:12.116 --> 00:00:15.811
I just wanted to show you this.

6
00:00:15.811 --> 00:00:20.794
We won't be doing exercises regarding this
but I think it's a really useful concept.

7
00:00:20.794 --> 00:00:26.707
So, what I have here is I have a structure
of a view file, movie folder structure.

8
00:00:26.707 --> 00:00:30.470
And so you might notice that I
have a store generally speaking,

9
00:00:30.470 --> 00:00:32.672
there's an index.js in the store.

10
00:00:32.672 --> 00:00:35.096
And that's how Vuex CLI does things,

11
00:00:35.096 --> 00:00:39.348
it just automatically adds a store
folder with an index.js file.

12
00:00:39.348 --> 00:00:43.428
And then within store what I wanna do is
I'm gonna assume that I have multiple

13
00:00:43.428 --> 00:00:44.973
modules, so many modules.

14
00:00:44.973 --> 00:00:49.059
And it's really annoying for
me to always have to put the modules

15
00:00:49.059 --> 00:00:52.627
in index.js because my
index.js file becomes giant.

16
00:00:52.627 --> 00:00:56.592
There's so many, the whole point
about extrapolating modules and

17
00:00:56.592 --> 00:01:01.331
making them modules is not only to have
that namespace but also for readability.

18
00:01:01.331 --> 00:01:05.950
And so one other way in which you can
make your code a bit more readable,

19
00:01:05.950 --> 00:01:10.412
is I can create a module folder
within my store and then within that,

20
00:01:10.412 --> 00:01:14.900
I can create specific modules like
inventory and machine and so on.

21
00:01:14.900 --> 00:01:18.829
And so that is where the bulk
of like my code can live

22
00:01:18.829 --> 00:01:22.866
specifically like the state and
actions and so on.

23
00:01:22.866 --> 00:01:24.262
I can actually take that one step further.

24
00:01:24.262 --> 00:01:26.710
And this is not specific to modules.

25
00:01:26.710 --> 00:01:31.855
This is just specific to how you
organize your state actions getters and

26
00:01:31.855 --> 00:01:37.100
mutations in Vuex, but I cannot just
have a single inventory.js file.

27
00:01:37.100 --> 00:01:42.824
I can also split my state mutations,
actions and getters into separate files,

28
00:01:42.824 --> 00:01:46.853
and then sort of bring them
together in index.js file.

29
00:01:46.853 --> 00:01:50.074
That way I can just access
files separately so

30
00:01:50.074 --> 00:01:56.029
everything lives separately like state
lives in one file actions live in another.

31
00:01:56.029 --> 00:01:58.787
And so again,
you have very pared down files,

32
00:01:58.787 --> 00:02:02.559
you know exactly where to look
when you're looking for state.

33
00:02:02.559 --> 00:02:07.093
It removes any confusion with regards
to the order in which things are.

34
00:02:07.093 --> 00:02:09.419
So it stayed on the top,
it stayed on the bottom.

35
00:02:09.419 --> 00:02:13.967
It completely removes that if you
create a folder structure like this.

36
00:02:13.967 --> 00:02:15.495
So that's a really nice tip for doing it.

37
00:02:15.495 --> 00:02:20.464
I think throughout the exercises, we'll
talk a little bit about the different

38
00:02:20.464 --> 00:02:23.518
parts of,
we might be using some pieces of this.

39
00:02:23.518 --> 00:02:28.381
But again, it's a really useful concept,
especially if you're looking to clean up

40
00:02:28.381 --> 00:02:31.162
your UX folder structure and
make things clean.

