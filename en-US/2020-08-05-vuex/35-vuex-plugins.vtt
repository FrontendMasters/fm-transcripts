WEBVTT

1
00:00:00.000 --> 00:00:04.812
Now we're gonna move into using plugins,
which is a really useful, another useful

2
00:00:04.812 --> 00:00:09.101
way in which you can use Vuex and a
pattern you can use in your applications.

3
00:00:09.101 --> 00:00:13.059
So a plugin is a function that
receives the stores that argument and

4
00:00:13.059 --> 00:00:15.401
allows you to peek into the Vuex store.

5
00:00:15.401 --> 00:00:19.532
So this is it might be a bit confusing,
but the idea of a plugin is that it

6
00:00:19.532 --> 00:00:24.680
doesn't directly update the store and it
doesn't directly do anything to the store.

7
00:00:24.680 --> 00:00:28.745
It's purely a way in which you can
access the store without touching it.

8
00:00:28.745 --> 00:00:32.972
So it's like being a bystander, and
you're seeing the state change.

9
00:00:32.972 --> 00:00:35.853
You're seeing actions and
mutations happen, but

10
00:00:35.853 --> 00:00:38.267
you're not doing anything to cause them.

11
00:00:38.267 --> 00:00:41.227
You just want to be
notified when that happens.

12
00:00:41.227 --> 00:00:42.707
And why is this useful?

13
00:00:42.707 --> 00:00:47.534
Well, sometimes it's useful to
monitor state changes to perform tasks

14
00:00:47.534 --> 00:00:50.627
that might not necessarily
update the state.

15
00:00:50.627 --> 00:00:55.738
So for example, you might want to make
a separate database call in the event that

16
00:00:55.738 --> 00:01:01.095
someone clicks this button, notify,
going back to the vending machine example.

17
00:01:01.095 --> 00:01:03.546
If someone tries to retrieve an item,

18
00:01:03.546 --> 00:01:07.311
the supplier might want to
know that that thing happened.

19
00:01:07.311 --> 00:01:11.472
But the state of that has nothing
to do with the vending machine or

20
00:01:11.472 --> 00:01:15.017
the person trying to get items or
the inventory at all.

21
00:01:15.017 --> 00:01:20.320
It's purely the supplier wanting to
some extent spy on what's happening

22
00:01:20.320 --> 00:01:25.637
within the state and within the mutations
of the vending machine itself.

23
00:01:25.637 --> 00:01:30.667
And so monitoring state changes is a
really useful way in which you might want

24
00:01:30.667 --> 00:01:35.710
to use the Vuex plugins, and it's
the main reason why you use Vuex plugins.

25
00:01:35.710 --> 00:01:40.675
So the way to use a plug in is not
much different from how you would

26
00:01:40.675 --> 00:01:41.998
add in a module.

27
00:01:41.998 --> 00:01:45.166
So when you add in a module,
you import the module and

28
00:01:45.166 --> 00:01:47.470
then you add it in with the attribute.

29
00:01:47.470 --> 00:01:52.760
So in Vuex, we have this concept of
a plugins attribute that the store has.

30
00:01:52.760 --> 00:01:54.825
And so plugins accepts an array,

31
00:01:54.825 --> 00:01:59.777
because the idea is that you're not the
only plugin there more than one plugin.

32
00:01:59.777 --> 00:02:04.730
And so you can pass in however many
plugins or whatever plugin you're using.

33
00:02:04.730 --> 00:02:08.381
So in the code on the left,
which is the store.js file,

34
00:02:08.381 --> 00:02:12.359
I'm importing my plugin from,
let's say, a plugin file.

35
00:02:12.359 --> 00:02:17.671
And then I'm using that plugin by
adding it to the array of plugins.

36
00:02:17.671 --> 00:02:20.443
So in this case, it's called my-plugin.

37
00:02:20.443 --> 00:02:26.436
It's not very unique or interesting
a name, but it's a good example for now.

38
00:02:26.436 --> 00:02:31.430
And then on the right hand side,
I create a plugin, and

39
00:02:31.430 --> 00:02:36.545
it's again, called my-plugin,
cuz it has to match.

40
00:02:36.545 --> 00:02:42.594
And then, I'm essentially creating this
object of things that are happening.

41
00:02:42.594 --> 00:02:48.357
So the plugin has one argument, or it
takes in an argument, which is the store.

42
00:02:48.357 --> 00:02:51.924
Because the idea is that the plugin
cares about the store and

43
00:02:51.924 --> 00:02:53.718
it cares about what's in it.

44
00:02:53.718 --> 00:02:56.304
And it wants to know how
things are mutating and

45
00:02:56.304 --> 00:02:59.687
what kinds of actions are causing
those mutations and so on.

46
00:02:59.687 --> 00:03:03.132
So it takes in the store and
then it can do various things to it.

47
00:03:03.132 --> 00:03:08.803
You might notice that here I
am subscribing to things and

48
00:03:08.803 --> 00:03:15.933
so specifically I'm subscribing to
let's say a mutation or a state.

49
00:03:15.933 --> 00:03:21.214
And store.subscribe is
specifically what a plugin

50
00:03:21.214 --> 00:03:26.379
has access to,
cuz it can subscribe to mutations.

51
00:03:26.379 --> 00:03:31.811
So generally within the plugin,
if you're peeking into the store,

52
00:03:31.811 --> 00:03:37.161
you wanna know when state changes
that's actually really useful.

53
00:03:37.161 --> 00:03:39.156
Because when state changes,

54
00:03:39.156 --> 00:03:44.101
that's when things are happening,
cuz sometimes an action is called but

55
00:03:44.101 --> 00:03:48.903
then state doesn't change,
cuz the mutation Isn't called and so on.

56
00:03:48.903 --> 00:03:53.311
So, for plugins, generally you
want to subscribe to mutations.

57
00:03:53.311 --> 00:03:57.502
So here I'm subscribing to the mutation,
it also takes in state, so

58
00:03:57.502 --> 00:04:02.511
you can compare the mutations with the
state that can be really useful sometimes.

59
00:04:02.511 --> 00:04:07.830
And within mutation, I can also grab
specific things regarding that mutation.

60
00:04:07.830 --> 00:04:14.107
So You might notice on line seven,
I'm grabbing the type of the mutation and

61
00:04:14.107 --> 00:04:19.222
the type of the mutation is
actually the name of the mutation.

62
00:04:19.222 --> 00:04:21.611
So type is is equivalent to name.

63
00:04:21.611 --> 00:04:25.252
So if I have a mutation
called update service dates,

64
00:04:25.252 --> 00:04:28.082
that is what mutation.type gives you.

65
00:04:28.082 --> 00:04:30.679
And then I also have
access to the payload,

66
00:04:30.679 --> 00:04:35.526
which can be useful because I wanna know
how exactly the state is being changed.

67
00:04:35.526 --> 00:04:38.284
So, a thing to note about here is

68
00:04:38.284 --> 00:04:43.101
that the store.subscribe
when it grabs the mutation.

69
00:04:43.101 --> 00:04:45.958
This by default is before
the mutation happens.

70
00:04:45.958 --> 00:04:47.915
So the state hasn't actually updated.

71
00:04:47.915 --> 00:04:51.479
So the state hasn't actually changed,
it's just the mutation is being called.

72
00:04:51.479 --> 00:04:56.363
So it's before the mutation happens, which
is why grabbing the state can be useful

73
00:04:56.363 --> 00:05:00.408
because you might want to know what
the state is, and what mutation,

74
00:05:00.408 --> 00:05:03.439
how the mutation is changing
that specific state.

75
00:05:03.439 --> 00:05:05.587
So you can do a comparison and so on.

76
00:05:05.587 --> 00:05:09.808
So on the left hand side,
we have our store code.

77
00:05:09.808 --> 00:05:14.760
And let's assume that we have
a mutation called updateServiceDate.

78
00:05:14.760 --> 00:05:18.529
And updateServiceDate takes in a state and
a payload and

79
00:05:18.529 --> 00:05:23.263
updates a specific property called
lastServiced with that payload.

80
00:05:23.263 --> 00:05:26.973
And so I might want to care,
I might care about what that is, and

81
00:05:26.973 --> 00:05:30.057
what that mutation is in the plugin,
I want to know.

82
00:05:30.057 --> 00:05:34.195
So, that's where a plugin
can be really useful.

83
00:05:34.195 --> 00:05:37.359
Let's dive into
the specificities of a plugin.

84
00:05:37.359 --> 00:05:40.811
Before we look at some concrete examples,
first.

85
00:05:40.811 --> 00:05:44.884
So, I showed you a little bit about
what the code looks like, but

86
00:05:44.884 --> 00:05:47.682
let's explore the different pieces of it.

87
00:05:47.682 --> 00:05:54.950
So a plugin is just an object, [LAUGH]
Basically, many things are just objects.

88
00:05:54.950 --> 00:05:57.565
But a plugin takes in
stores its main parameter.

89
00:05:57.565 --> 00:06:03.280
And store is where it can
access the subscribe mutations.

90
00:06:03.280 --> 00:06:08.282
So that's one way in which it accesses
the store grabs the entire store,

91
00:06:08.282 --> 00:06:12.138
and then from that there
are methods within it can call.

92
00:06:12.138 --> 00:06:15.640
There's also the ability
to subscribe to mutations.

93
00:06:15.640 --> 00:06:20.375
So you might notice here that
store.subscribe has mutation as a first

94
00:06:20.375 --> 00:06:21.200
argument.

95
00:06:21.200 --> 00:06:24.500
And that's because I'm subscribing
to a specific mutation and

96
00:06:24.500 --> 00:06:26.586
then I can grab the type and the payload.

97
00:06:26.586 --> 00:06:30.195
And then I can also access the state
which I mentioned can be useful,

98
00:06:30.195 --> 00:06:33.697
because you might want to know how
the state has changed and so on.

99
00:06:33.697 --> 00:06:38.484
And then mutation has properties,
specifically type and payload.

100
00:06:38.484 --> 00:06:42.726
So let's assume that I
want to log information

101
00:06:42.726 --> 00:06:46.329
regarding when a machine is serviced.

102
00:06:46.329 --> 00:06:49.125
So for instance, a machine is serviced and

103
00:06:49.125 --> 00:06:53.021
I want to headquarters to know
when the machine is service.

104
00:06:53.021 --> 00:06:55.997
As I mentioned, they might want
to spy into the process and

105
00:06:55.997 --> 00:06:57.286
the frequency and so on.

106
00:06:57.286 --> 00:07:01.991
And you can think of HQ as sort of
like local storage that can be useful.

107
00:07:01.991 --> 00:07:08.620
A database or an API, whatever you have
it that needs to do logging information.

108
00:07:08.620 --> 00:07:11.820
Or that cares about state that's
changing within an application.

109
00:07:11.820 --> 00:07:16.085
And so what we'll do is,

110
00:07:16.085 --> 00:07:20.962
code sandbox will not work,

111
00:07:20.962 --> 00:07:25.238
so I will move over here.

112
00:07:25.238 --> 00:07:29.526
So we'll look at an example
of the code that I'm running.

113
00:07:29.526 --> 00:07:35.250
So essentially what's happening is I have
a last service timer that checks and

114
00:07:35.250 --> 00:07:38.384
tells me when the button was last clicked.

115
00:07:38.384 --> 00:07:42.161
So if I click it again,
it will update to the last second.

116
00:07:42.161 --> 00:07:46.973
So it's been In my timezone
350 3:30pm central time and

117
00:07:46.973 --> 00:07:52.524
then if I click it again it updates and
so on so it's updating per second.

118
00:07:52.524 --> 00:07:57.777
And what can be useful as I might want
this information to be logged somewhere or

119
00:07:57.777 --> 00:08:01.053
saved somewhere or
propagated somewhere else.

120
00:08:01.053 --> 00:08:06.429
And so what I could do with that is I
could create a way of subscribing to that

121
00:08:06.429 --> 00:08:12.526
specific mutation, and for now what I'll
do is I'll just log it to local storage.

122
00:08:12.526 --> 00:08:16.947
I'll just save it to local storage, and
then it can be useful to just access,

123
00:08:16.947 --> 00:08:20.500
because then instead of
initializing without having a date.

124
00:08:20.500 --> 00:08:22.668
I'll know exactly when something happened.

125
00:08:22.668 --> 00:08:25.357
It's sort of like a database call or
in this case,

126
00:08:25.357 --> 00:08:29.028
local storage does the purpose and
serves the purpose that we need.

