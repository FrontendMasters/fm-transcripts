WEBVTT

1
00:00:00.000 --> 00:00:02.170
What I wanna do, and move away from,

2
00:00:02.170 --> 00:00:05.110
I wanna move away from
parent navigation guides,

3
00:00:05.110 --> 00:00:10.010
and look at global navigation guards
instead, so it's similar, but different.

4
00:00:10.010 --> 00:00:14.911
The thing about global navigation guards
is that it checks your routes globally, so

5
00:00:14.911 --> 00:00:18.847
regardless of whether a route is
protected, or not, it checks it.

6
00:00:18.847 --> 00:00:23.514
So it's useful as a way of just
doing a cursory pass to check if

7
00:00:23.514 --> 00:00:26.817
a user should be allowed into an app or
not.

8
00:00:26.817 --> 00:00:31.913
So the other thing to note with
this is that the way in which this

9
00:00:31.913 --> 00:00:37.707
is useful specifically for
protecting your routes is with metadata.

10
00:00:37.707 --> 00:00:40.689
And again,
this is very specific to Vue Router,

11
00:00:40.689 --> 00:00:42.871
even though this is a Vuex course but

12
00:00:42.871 --> 00:00:48.135
this is super useful when to use in your
applications, so it's worth talking about.

13
00:00:48.135 --> 00:00:54.176
In my routes array and specifically in
my route object within my routes array,

14
00:00:54.176 --> 00:00:56.930
I can pass in metadata to my routes.

15
00:00:56.930 --> 00:01:02.664
Which means that I can specify the routes
that I want authentication to be required.

16
00:01:02.664 --> 00:01:05.812
So let's assume that I
looked at the route, so

17
00:01:05.812 --> 00:01:09.203
the admin screen as well
as the inventory screen.

18
00:01:09.203 --> 00:01:12.290
And I want those two
pages specifically and

19
00:01:12.290 --> 00:01:17.447
maybe there are more to have requirement
that a user is authenticated.

20
00:01:17.447 --> 00:01:20.463
So I can add that metadata
into those routes.

21
00:01:20.463 --> 00:01:23.492
And then in my global navigation guards,
I can do this check.

22
00:01:23.492 --> 00:01:27.855
There's a to.match.sum
which checks any metadata,

23
00:01:27.855 --> 00:01:32.415
it allows you to match the metadata
associated on a route.

24
00:01:32.415 --> 00:01:34.549
So here I get access to the route.

25
00:01:34.549 --> 00:01:38.161
I'm grabbing metadata to check whether or
not auth is required.

26
00:01:38.161 --> 00:01:41.332
And auth is required is a true or
false Boolean, so

27
00:01:41.332 --> 00:01:44.740
I can just essentially check
is auth required or not.

28
00:01:44.740 --> 00:01:46.400
So that's really nice.

29
00:01:46.400 --> 00:01:51.548
And then I can also do one other thing,
which is, if auth is required,

30
00:01:51.548 --> 00:01:55.928
which is the check of the metadata,
I can then return next.

31
00:01:55.928 --> 00:01:58.230
And so this is sort of an extra step.

32
00:01:58.230 --> 00:02:03.374
It's not Vuex specific, but it's an extra
layer you can add on to your application.

33
00:02:03.374 --> 00:02:07.705
So let's say you want to check
whether auth is required first,

34
00:02:07.705 --> 00:02:10.739
before checking for the islogthengetter.

35
00:02:10.739 --> 00:02:13.124
You could write the code for this so

36
00:02:13.124 --> 00:02:17.986
it's checks the metadata first
before actually calling the getter.

37
00:02:17.986 --> 00:02:22.822
So you're saving yourself an extra
execution without having to automatically

38
00:02:22.822 --> 00:02:24.418
call getter everywhere.

39
00:02:24.418 --> 00:02:27.082
So here, as I said,
you would import the store and

40
00:02:27.082 --> 00:02:30.448
then you could do
store.getters.["isLoggedIn"], and

41
00:02:30.448 --> 00:02:33.763
then pass the user to wherever
they need to go appropriately.

