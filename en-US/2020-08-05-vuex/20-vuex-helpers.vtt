WEBVTT

1
00:00:00.000 --> 00:00:03.677
So now that we've talked about various
parts of Vuex and using it in single

2
00:00:03.677 --> 00:00:08.031
file components, we're gonna talk about a
really quick pattern that I really enjoy.

3
00:00:08.031 --> 00:00:09.427
It's called Vuex Helpers.

4
00:00:09.427 --> 00:00:14.793
And it's a way in which you can write Vuex
in a way that is super clean and clear.

5
00:00:14.793 --> 00:00:20.119
And it reduces some extra boilerplate
code that you have to write.

6
00:00:20.119 --> 00:00:24.938
So far we've looked at our code in
the context of the store, obviously,

7
00:00:24.938 --> 00:00:27.785
cuz we're dealing with the store itself.

8
00:00:27.785 --> 00:00:31.160
But, specifically,
when we are talking to the store and

9
00:00:31.160 --> 00:00:35.466
getting access to the store,
we need to access it using this.$store.

10
00:00:35.466 --> 00:00:40.384
So, for instance, if we're accessing
the state or the stock, for

11
00:00:40.384 --> 00:00:45.402
instance, we need to do
this.$store.state.stock, and so on.

12
00:00:45.402 --> 00:00:49.726
And so this can get really clunky,
the more pieces of states and the more

13
00:00:49.726 --> 00:00:55.146
dispatches to the actions that we're doing
because we always have to do this.$store.

14
00:00:55.146 --> 00:00:59.758
Helpers is one way in which we can
reduce some of that extra code.

15
00:00:59.758 --> 00:01:04.510
And it gives you a way of writing
Vuex without having to have extra

16
00:01:04.510 --> 00:01:06.447
code associated with it.

17
00:01:06.447 --> 00:01:11.958
In general, with Vuex Helpers,
you have the ability to mapState,

18
00:01:11.958 --> 00:01:15.058
Actions, Getters, and Mutations.

19
00:01:15.058 --> 00:01:18.284
And we'll look into what
that looks like now.

20
00:01:18.284 --> 00:01:21.761
So, what I wanna do,
is I want to refactor my state.

21
00:01:21.761 --> 00:01:25.642
So, I'm not doing this
.$store.state.stock anymore.

22
00:01:25.642 --> 00:01:28.084
I'm doing a mapState.

23
00:01:28.084 --> 00:01:31.254
So, the way mapState works is that,

24
00:01:31.254 --> 00:01:37.101
mapState takes in an array of all
the states that you want to access.

25
00:01:37.101 --> 00:01:41.474
So, in this instance,
I want to access my stock.

26
00:01:41.474 --> 00:01:45.290
And so I can do mapState,
like ...mapState, and

27
00:01:45.290 --> 00:01:48.079
then access the specific attribute.

28
00:01:48.079 --> 00:01:51.493
And then I no longer have
to write this.$store.state.

29
00:01:51.493 --> 00:01:56.973
I automatically have access to
the item that I want access to.

30
00:01:56.973 --> 00:01:59.740
Similarly, we can do the same for
mapActions.

31
00:01:59.740 --> 00:02:04.214
We can get rid of this.$store and
dispatch.

32
00:02:04.214 --> 00:02:07.474
And we can use the ...mapActions, and

33
00:02:07.474 --> 00:02:12.520
we can parse in the name of
the specific action we want access to.

34
00:02:12.520 --> 00:02:17.094
So if fetchFromInventory is
the action we want to dispatch,

35
00:02:17.094 --> 00:02:20.065
we can specifically grab that action.

36
00:02:20.065 --> 00:02:22.693
Unfortunately, there's no way for

37
00:02:22.693 --> 00:02:27.282
you to call that action without
explicitly doing so in a method.

38
00:02:27.282 --> 00:02:31.973
So we still need to have
the action called restock.

39
00:02:31.973 --> 00:02:36.843
And restock is just calling
the action fetchFromInventory.

40
00:02:36.843 --> 00:02:41.300
And that's necessary just to hook those
two pieces up, so it's a bit cleaner.

41
00:02:41.300 --> 00:02:45.979
Because if you don't do this,
the viewInstance doesn't know what

42
00:02:45.979 --> 00:02:50.426
exactly fetchFromInventory is
on component initialization.

43
00:02:50.426 --> 00:02:56.225
So, the method is just a way in which
we can make sure that the viewComponent

44
00:02:56.225 --> 00:03:00.567
knows exactly what action to
call when it needs to call.

45
00:03:00.567 --> 00:03:05.142
And so we can also do something really
neat with mapActions, specifically.

46
00:03:05.142 --> 00:03:10.387
And that is we can rename the actions
that we're trying to access.

47
00:03:10.387 --> 00:03:16.157
So, the array syntax is nice because
we can just grab the specific action.

48
00:03:16.157 --> 00:03:20.740
But there are times when you want to
rename specific thing for clarity.

49
00:03:20.740 --> 00:03:24.391
And in this instance, what we can
do is we're not passing an array,

50
00:03:24.391 --> 00:03:25.874
we're passing an object.

51
00:03:25.874 --> 00:03:29.339
And so
I'm going to rename fetchFromInventory

52
00:03:29.339 --> 00:03:32.290
to restockItems as you see on line 23.

53
00:03:32.290 --> 00:03:36.811
And then I can appropriately
access it in my restock

54
00:03:36.811 --> 00:03:41.449
method on line 25 by
calling this.restockItem.

55
00:03:41.449 --> 00:03:45.667
A very key thing to note
is that your method and

56
00:03:45.667 --> 00:03:50.329
whatever you call your
action cannot be the same.

57
00:03:50.329 --> 00:03:55.036
Because view will actually have a error,
which is the maximum call

58
00:03:55.036 --> 00:03:59.250
stack reached because it
wouldn't know which one to call.

59
00:03:59.250 --> 00:04:03.707
So you want to make sure that your action
is named differently from your method

60
00:04:03.707 --> 00:04:04.266
itself.

61
00:04:04.266 --> 00:04:06.336
So that's something
really important to know.

