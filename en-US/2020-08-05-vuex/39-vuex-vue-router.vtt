WEBVTT

1
00:00:00.000 --> 00:00:05.023
The next part is adding onto
the concepts that we talked about.

2
00:00:05.023 --> 00:00:08.980
So Vuex is useful when used in
the context of other pieces, so

3
00:00:08.980 --> 00:00:12.252
Vuex is useful in the context of Vue,
obviously.

4
00:00:12.252 --> 00:00:17.856
But Vuex is also useful when using
other parts of the Vue ecosystem,

5
00:00:17.856 --> 00:00:19.340
like Vue Router.

6
00:00:19.340 --> 00:00:21.885
So for example,
you might have an application and

7
00:00:21.885 --> 00:00:25.582
we looked at the application on the right,
the screenshot on the right,

8
00:00:25.582 --> 00:00:27.472
which is just a list of all machines.

9
00:00:27.472 --> 00:00:31.994
Let's assume that we want to put
a login screen in the top of it, so

10
00:00:31.994 --> 00:00:35.367
only admin and
people with a certain username and

11
00:00:35.367 --> 00:00:38.918
password can log in to see
this particular screen.

12
00:00:38.918 --> 00:00:43.904
So this is one instance in which
Vue Router is really useful because it has

13
00:00:43.904 --> 00:00:48.823
the ability for you to manage how
users flow through the applications.

14
00:00:48.823 --> 00:00:51.617
You also are able to protect routes, so

15
00:00:51.617 --> 00:00:56.699
users without certain permissions or
users who are not logged in cannot

16
00:00:56.699 --> 00:01:01.291
access parts of the application
that are protected and secure.

17
00:01:01.291 --> 00:01:05.035
So here we have a login screen and
then we have the,

18
00:01:05.035 --> 00:01:08.971
we'll call it a quote
unquote admin screen as well.

19
00:01:08.971 --> 00:01:13.324
And this is not a course on Vue Router,
so I won't actually talk

20
00:01:13.324 --> 00:01:17.696
about Vue Router a lot, except for
some pieces here and there.

21
00:01:17.696 --> 00:01:20.292
But I'll be talking about
in the context of Vuex, so

22
00:01:20.292 --> 00:01:22.300
there'll be some pieces of Vue Router.

23
00:01:22.300 --> 00:01:25.889
Don't worry if you don't
fully understand Vue Router,

24
00:01:25.889 --> 00:01:28.364
you don't need mastery of it to use it.

25
00:01:28.364 --> 00:01:34.273
For this instance, I'm using
Vue Router by importing Vue Router,

26
00:01:34.273 --> 00:01:41.543
it's essentially a module, so I'm
importing it, and then I'm doing Vue.use.

27
00:01:41.543 --> 00:01:46.704
And if you remember from the Vuex
code that I showed you, it's not much

28
00:01:46.704 --> 00:01:51.972
different because Vue has to use Vuex,
so it has to also use Vue Router.

29
00:01:51.972 --> 00:01:56.625
So your router code is where you
initialize all of the routes in your

30
00:01:56.625 --> 00:01:57.714
application.

31
00:01:57.714 --> 00:01:58.961
Generally speaking,

32
00:01:58.961 --> 00:02:03.420
you do this only if you want fine grained
control over the routes, which again can

33
00:02:03.420 --> 00:02:07.106
be really useful if you want to
manage the flow of the application.

34
00:02:07.106 --> 00:02:11.295
So here, I'm defining two routes because
I currently only have two screens.

35
00:02:11.295 --> 00:02:16.090
I have a admin screen, which is called
Dashboard, and then I have a login screen,

36
00:02:16.090 --> 00:02:17.909
which is called LoginScreen.

37
00:02:17.909 --> 00:02:24.093
And so again, those two,
the path is / and /login respectively.

38
00:02:24.093 --> 00:02:29.429
And then once I have my router defined so
it's in a router.js file, let's say,

39
00:02:29.429 --> 00:02:34.937
I can include that into my main.js, very
similar to how I'm including the store.

40
00:02:34.937 --> 00:02:38.312
I'm just parsing it into the Vue instance,
I'm parsing

41
00:02:38.312 --> 00:02:43.114
router straight into the instance, so
that's how you use router in a nutshell.

42
00:02:43.114 --> 00:02:48.039
And again, I want to focus a little
bit on the parts of how you can hook

43
00:02:48.039 --> 00:02:52.103
up your router to use Vuex,
which can be really useful as

44
00:02:52.103 --> 00:02:56.352
your application grows in size and
becomes more complex.

45
00:02:56.352 --> 00:03:00.135
So here, we have the different pieces
of what you can parse to your route.

46
00:03:00.135 --> 00:03:04.068
Routes is an array of routes essentially,
so

47
00:03:04.068 --> 00:03:09.869
path is the path that the URL use
essentially like /, or /login.

48
00:03:09.869 --> 00:03:14.189
And I parse in the component as well,
so the component is Dashboard,

49
00:03:14.189 --> 00:03:17.774
cuz that's the specific
component I want to be loading.

50
00:03:17.774 --> 00:03:20.910
And another piece of Vue Router,
I know I mentioned,

51
00:03:20.910 --> 00:03:23.013
I wasn't gonna go into Vue Router.

52
00:03:23.013 --> 00:03:27.958
But I think this is a really useful and
handy concept as you work

53
00:03:27.958 --> 00:03:32.914
your way through Vue Router and
Vuex, is navigation guards.

54
00:03:32.914 --> 00:03:37.413
And this is a slightly more advanced
concept but bear with me here, it will

55
00:03:37.413 --> 00:03:42.298
be incredibly handy as we work through
these applications and these concepts.

56
00:03:42.298 --> 00:03:46.730
So I'm gonna talk about
per-route navigation guards,

57
00:03:46.730 --> 00:03:50.900
which is the ability for
you to gate a specific route.

58
00:03:50.900 --> 00:03:55.620
So irregardless of whatever other
components and other routes do,

59
00:03:55.620 --> 00:04:00.092
I'm only defining my Dashboard
route which is supposedly admin

60
00:04:00.092 --> 00:04:03.176
specific to have these navigation guards.

61
00:04:03.176 --> 00:04:06.686
So it doesn't check before
it lets people through, and

62
00:04:06.686 --> 00:04:10.656
so before enter is called,
the per-route navigation guard.

63
00:04:10.656 --> 00:04:14.826
And so it takes into from a next, again,
I won't go into much detail here.

64
00:04:14.826 --> 00:04:18.523
But one thing to note is that
I'm just adding navigation guard

65
00:04:18.523 --> 00:04:21.451
to my Dashboard component
because it's admin.

66
00:04:21.451 --> 00:04:26.001
And then here's where I'm actually
utilizing my store because I'm

67
00:04:26.001 --> 00:04:29.777
trying to access whether or
not a user has been logged in.

68
00:04:29.777 --> 00:04:33.383
So let's assume that I have
a getter called isLoggedIn,

69
00:04:33.383 --> 00:04:37.301
I'm not using modules here,
it's just a global namespace.

70
00:04:37.301 --> 00:04:40.209
You can feel free to use
modules if you like, but

71
00:04:40.209 --> 00:04:44.882
the concept stands that you can use
Vuex modules in Vue Router quite easily.

72
00:04:44.882 --> 00:04:48.724
I'm just checking to make sure
that a user is logged in.

73
00:04:48.724 --> 00:04:50.475
And if they are logged in,

74
00:04:50.475 --> 00:04:54.383
what next does is it essentially
lets a user pass through.

75
00:04:54.383 --> 00:04:58.200
So you're not telling it to go anywhere,
you're just allowing it to pass through.

76
00:04:58.200 --> 00:05:03.168
The else clause here is telling
a user where to go in the event that

77
00:05:03.168 --> 00:05:05.008
a user is not logged in.

78
00:05:05.008 --> 00:05:10.724
So if a user is not logged in,
you have to pass them to the /login page.

