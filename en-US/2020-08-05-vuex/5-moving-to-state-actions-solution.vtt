WEBVTT

1
00:00:00.000 --> 00:00:05.878
All right, so I imagine that exercise
was hopefully fairly straightforward.

2
00:00:05.878 --> 00:00:10.206
Cuz I went over it earlier
in terms of how exactly to

3
00:00:10.206 --> 00:00:13.925
move a method into a action and
a mutation.

4
00:00:13.925 --> 00:00:16.118
But let's cover it together just so

5
00:00:16.118 --> 00:00:19.418
that we have a better sense
of how exactly that works.

6
00:00:19.418 --> 00:00:23.113
So this is the code pen
that you're working on and

7
00:00:23.113 --> 00:00:26.459
it is in working condition, very similar.

8
00:00:26.459 --> 00:00:30.787
But what we did is we essentially
moved a couple of things over.

9
00:00:30.787 --> 00:00:33.941
So we moved the actions and
the mutations or

10
00:00:33.941 --> 00:00:38.416
we moved the particular method
into actions and mutations.

11
00:00:38.416 --> 00:00:43.639
So you see a dispense action that takes
in context, which is the parameter,

12
00:00:43.639 --> 00:00:48.797
a default parameter it takes in, and
then it commits a specific mutation.

13
00:00:48.797 --> 00:00:52.517
And so we have the mutation of that
name which is called dispense.

14
00:00:52.517 --> 00:00:55.167
It takes in a default parameter of state.

15
00:00:55.167 --> 00:00:59.887
And then we decrement the state itself,
which then updates accordingly.

16
00:00:59.887 --> 00:01:05.160
And then of course, we have the states,
the specific state property supply.

17
00:01:05.160 --> 00:01:07.589
And then in our component itself,

18
00:01:07.589 --> 00:01:11.710
we are using a computed
property because it's updating.

19
00:01:11.710 --> 00:01:16.272
And we call that supply and
then we call the specific store,

20
00:01:16.272 --> 00:01:22.490
the specific property in the state store,
so this.$store.state.supply.

21
00:01:22.490 --> 00:01:24.375
And then we call it supply.

22
00:01:24.375 --> 00:01:28.640
And so if we looked at the,
there's so much here, but

23
00:01:28.640 --> 00:01:33.530
here exactly, this h4 is where
exactly that supply is updating.

24
00:01:33.530 --> 00:01:39.080
And so restock and
dispense is calling the specific methods

25
00:01:39.080 --> 00:01:45.086
in our component which then
dispatches actions and mutations.

26
00:01:45.086 --> 00:01:46.797
So that's sort of how it works.

27
00:01:46.797 --> 00:01:48.637
It's very, again, very straightforward.

28
00:01:48.637 --> 00:01:52.632
We're essentially moving one
piece over and then another.

29
00:01:52.632 --> 00:01:57.885
And so with that, we're gonna move
to a second piece of doing that,

30
00:01:57.885 --> 00:02:00.295
which is the restock counter.

31
00:02:00.295 --> 00:02:04.168
So we talked a little about
the dispense action, but

32
00:02:04.168 --> 00:02:10.254
let's talk about the restock as well,
cuz that's something that's adding to.

33
00:02:10.254 --> 00:02:14.102
And so
our restock essentially was a method in

34
00:02:14.102 --> 00:02:17.856
our components that just added the supply.

35
00:02:17.856 --> 00:02:19.692
So this is a typo on 25.

36
00:02:19.692 --> 00:02:22.767
It should be just the supply =
40 because it sets it to 40.

37
00:02:22.767 --> 00:02:24.315
It doesn't increment by one.

38
00:02:24.315 --> 00:02:29.058
But nevermind, it doesn't matter in
this case because we're moving that

39
00:02:29.058 --> 00:02:32.156
particular method into an action and
mutation.

40
00:02:32.156 --> 00:02:33.767
So we still need that method.

41
00:02:33.767 --> 00:02:38.755
We don't want to get rid of it because
that's how our component will know what

42
00:02:38.755 --> 00:02:40.994
to do with that particular thing.

43
00:02:40.994 --> 00:02:43.440
So we'll keep the name restock.

44
00:02:43.440 --> 00:02:47.318
But instead of changing the state
directly because the state is no

45
00:02:47.318 --> 00:02:51.420
longer local to the instance,
we'll just dispatch it to the store.

46
00:02:51.420 --> 00:02:56.697
So this.$store.dispatch is
dispatching an action to the store.

47
00:02:56.697 --> 00:03:01.198
We'll call our action restock,
because it is a restock.

48
00:03:01.198 --> 00:03:06.112
And then within our store, we'll now
create an action called restock that

49
00:03:06.112 --> 00:03:09.312
again takes in that
default parameter context.

50
00:03:09.312 --> 00:03:12.666
And then we want to make
sure we're committing

51
00:03:12.666 --> 00:03:15.506
that particular state change as well.

52
00:03:15.506 --> 00:03:19.217
So context.commit is what's
committing the mutation.

53
00:03:19.217 --> 00:03:23.735
We call it the exact same name because
again, an action or mutation for

54
00:03:23.735 --> 00:03:25.505
now is not much different.

55
00:03:25.505 --> 00:03:28.513
And then in our mutation,
we have a thing called restock.

56
00:03:28.513 --> 00:03:31.147
It takes in a default parameter of state,
and

57
00:03:31.147 --> 00:03:35.114
then that's when we're setting
the specific supply back to 40.

58
00:03:35.114 --> 00:03:38.322
So it's a restock to
this arbitrary number 40.

59
00:03:38.322 --> 00:03:42.470
Right now, we've created an action,
we've created a mutation, and

60
00:03:42.470 --> 00:03:45.940
then we've hooked those up in
our component via dispatch.

61
00:03:45.940 --> 00:03:47.505
So we've done a couple of things.

62
00:03:47.505 --> 00:03:50.628
And again,
very similar to what we did earlier.

63
00:03:50.628 --> 00:03:54.195
There's actually not a lot of difference
besides the specific name of the action

64
00:03:54.195 --> 00:03:55.254
and what we're doing.

65
00:03:55.254 --> 00:04:00.199
But the movement and how exactly we're
translating our method into actions and

66
00:04:00.199 --> 00:04:01.690
mutations is the same.

