WEBVTT

1
00:00:00.305 --> 00:00:03.359
This is the second section of using Vuex.

2
00:00:03.359 --> 00:00:08.465
And we're gonna talk a little bit more in
depth about the different pieces of Vuex.

3
00:00:08.465 --> 00:00:10.891
So, we touched a little bit about state,
actions, and

4
00:00:10.891 --> 00:00:12.448
mutations which are really great.

5
00:00:12.448 --> 00:00:15.294
We didn't touch getters yet,
but we will in this part.

6
00:00:15.294 --> 00:00:23.007
We'll actually dive more into detail as to
the different pieces of how you use them.

7
00:00:23.007 --> 00:00:25.277
And we're also gonna
distinguish actions and

8
00:00:25.277 --> 00:00:27.846
mutations a little bit in
this particular section.

9
00:00:27.846 --> 00:00:30.703
So, let's dive in.

10
00:00:30.703 --> 00:00:32.985
So, I like to call this,
Responsibilities and

11
00:00:32.985 --> 00:00:36.420
state management systems because
every piece has responsibilities.

12
00:00:36.420 --> 00:00:39.774
State is where
the centralized state exists.

13
00:00:39.774 --> 00:00:45.733
Actions are where you make the database
calls, you fetch from API's.

14
00:00:45.733 --> 00:00:48.810
Mutations are where the state
is actually mutated.

15
00:00:48.810 --> 00:00:52.890
And then, getters is sort of this
sense of checking over the state or

16
00:00:52.890 --> 00:00:55.841
updating how the state
renders on the front end.

17
00:00:55.841 --> 00:00:58.217
So, we'll look at the diagram again,

18
00:00:58.217 --> 00:01:03.187
because I think it's useful to use as a
way of cementing your understanding of UX.

19
00:01:03.187 --> 00:01:07.589
So again, we have our actions, we have
our mutations, and we have our state and

20
00:01:07.589 --> 00:01:09.246
this flow of how things work.

21
00:01:09.246 --> 00:01:13.065
So, the component actually never
changes the state directly.

22
00:01:13.065 --> 00:01:15.830
It's the store that changes the state and

23
00:01:15.830 --> 00:01:19.315
specifically the mutation
that changes the state.

24
00:01:19.315 --> 00:01:23.839
And we'll talk a little bit about that
piece of like the dispatch of the action

25
00:01:23.839 --> 00:01:28.017
in the mutation itself because I
think it's useful to understand those

26
00:01:28.017 --> 00:01:28.797
two pieces.

27
00:01:28.797 --> 00:01:32.605
The difference again is a bit kooky,
but bear with me a little.

28
00:01:32.605 --> 00:01:36.514
So, we have actions which are similar to
mutations, but it commits those mutations.

29
00:01:36.514 --> 00:01:39.873
So, the action never actually
changes the state directly.

30
00:01:39.873 --> 00:01:43.102
The mutation is where
the state is changed.

31
00:01:43.102 --> 00:01:47.903
And I want you to look a little about and
think about them as this asynchronous or

32
00:01:47.903 --> 00:01:48.866
synchronous.

33
00:01:48.866 --> 00:01:51.813
So, actions are asynchronous because
you can't make those fetches.

34
00:01:51.813 --> 00:01:53.874
You can't make those database calls and

35
00:01:53.874 --> 00:01:57.456
the mutations you can't do that
because it is strictly synchronous.

36
00:01:57.456 --> 00:02:01.115
So, that's a really good way of thinking
about the two in distinguishing how

37
00:02:01.115 --> 00:02:01.687
they work.

38
00:02:01.687 --> 00:02:06.206
So, we'll go back to our previous example
of our stock counter except now we have

39
00:02:06.206 --> 00:02:07.940
this sort of in between state.

40
00:02:07.940 --> 00:02:12.228
So, when you're dispensing previously,
we just counted, we just sort of

41
00:02:12.228 --> 00:02:16.052
decrement and then incremented up
to 40 to restock and dispense.

42
00:02:16.052 --> 00:02:19.464
But now, we have this concept
of like is dispensing state.

43
00:02:19.464 --> 00:02:23.234
So, you see this transition state
that happens and then it decrements.

44
00:02:23.234 --> 00:02:27.167
So that's sort of an extra layer of
how the state is changing within

45
00:02:27.167 --> 00:02:28.231
an application.

46
00:02:30.950 --> 00:02:34.265
So, you have an action that happens and
then a mutation.

47
00:02:34.265 --> 00:02:38.214
And the reason I added the in between
state is because I wanted to show you that

48
00:02:38.214 --> 00:02:40.140
asynchronous action that happens.

49
00:02:40.140 --> 00:02:44.290
So, just to return to this example,
you might notice.

50
00:02:44.290 --> 00:02:48.172
I know you were very like enthralled
with animation because I was,

51
00:02:48.172 --> 00:02:52.194
when you're dispensing notice that
the counter doesn't go down and

52
00:02:52.194 --> 00:02:55.059
it only goes down after
the animation finishes.

53
00:02:55.059 --> 00:03:01.031
And so, this is sort of a way of modeling
asynchronous actions because obviously,

54
00:03:01.031 --> 00:03:06.769
we're not me really fetching from an API
or making an actual call to a database.

55
00:03:06.769 --> 00:03:11.544
But I wanted to show you that an action is
asynchronous and mutation is synchronous.

56
00:03:11.544 --> 00:03:16.831
So, the action which is when you click the
button, so you restock or you dispense.

57
00:03:16.831 --> 00:03:18.692
It's happening asynchronously,

58
00:03:18.692 --> 00:03:22.048
because the idea is that you
are doing something asynchronous.

59
00:03:22.048 --> 00:03:27.348
And so, I create a timeout, which is,
again, modelling an asynchronous thing.

60
00:03:27.348 --> 00:03:31.638
And so, when you click Action,
that action happens asynchronously and

61
00:03:31.638 --> 00:03:36.857
then once the action finishes, or once the
async returns, then the mutation happens.

62
00:03:36.857 --> 00:03:39.927
So, there are these two things and
how they interact.

63
00:03:39.927 --> 00:03:45.303
So, it's no longer one-to-one or like it's
no longer you ask an action to happen and

64
00:03:45.303 --> 00:03:47.892
automatically a mutation is committed.

65
00:03:47.892 --> 00:03:51.149
It's sort of async and then sync.

66
00:03:51.149 --> 00:03:54.080
So, let's look at how that looks like.

67
00:03:54.080 --> 00:03:58.612
And for the very first, as we go
through this, we're going to start

68
00:03:58.612 --> 00:04:03.560
renaming things because I think it
will help in terms of distinguishing.

69
00:04:03.560 --> 00:04:06.922
So, actions and
mutations previously were called restock.

70
00:04:06.922 --> 00:04:10.510
And that's mainly because there was not
much difference besides the fact that one

71
00:04:10.510 --> 00:04:12.539
was actually touching state and
one wasn't.

72
00:04:12.539 --> 00:04:15.894
But now, we're doing a bit more work here,
so let's rename it.

73
00:04:15.894 --> 00:04:20.010
So, our action is called
fetchFromInventory, because the idea here

74
00:04:20.010 --> 00:04:24.838
is that the action is actually checking
inventory to be like, can I do this thing?

75
00:04:24.838 --> 00:04:28.020
Does it exist in the inventory to restock?

76
00:04:28.020 --> 00:04:31.004
And then,
the mutation is called stock items,

77
00:04:31.004 --> 00:04:34.143
which is the actual action
of adding to the stock.

78
00:04:34.143 --> 00:04:37.207
And so, we'll rename those two things,
just so

79
00:04:37.207 --> 00:04:40.878
it's a bit more clear that
those two things are separate.

80
00:04:40.878 --> 00:04:46.188
And obviously, we also want to change what
exactly is happening within the action and

81
00:04:46.188 --> 00:04:47.156
the mutation.

82
00:04:47.156 --> 00:04:50.548
So, the action is fetching
from the inventory and

83
00:04:50.548 --> 00:04:53.466
then the mutation is updating the supply.

84
00:04:53.466 --> 00:04:57.396
And of course, it's not much different
in terms of the context.commit.

85
00:04:57.396 --> 00:04:59.343
So, it takes in a default parameter and

86
00:04:59.343 --> 00:05:02.773
then it commits the particular
mutation that is not much different.

87
00:05:02.773 --> 00:05:07.606
But you might notice I created some
comments which is make API call and

88
00:05:07.606 --> 00:05:09.938
on successful return, mutate,

89
00:05:09.938 --> 00:05:14.211
which is the asynchronous piece
of what that will look like.

90
00:05:14.211 --> 00:05:16.189
And we'll go into that in just a bit.

91
00:05:16.189 --> 00:05:20.561
But again, I just wanted to show you that
the code isn't actually a lot different

92
00:05:20.561 --> 00:05:24.111
from what we looked at before in
terms of what the component sees.

93
00:05:24.111 --> 00:05:27.538
So, from the component's
perspective on line 30,

94
00:05:27.538 --> 00:05:31.420
you'll see that it should be this store,
$store not store.

95
00:05:31.420 --> 00:05:37.942
This store, $store.dispatch is still
dispatching that particular action.

96
00:05:37.942 --> 00:05:40.311
So, that action is called
fetchFromInventory.

97
00:05:40.311 --> 00:05:45.201
So, this store $store.dispatch will
dispatch that particular action, so

98
00:05:45.201 --> 00:05:48.547
from the component perspective,
nothing changed.

99
00:05:48.547 --> 00:05:51.246
It's just within the action,
the mutation that we're making changes.

100
00:05:51.246 --> 00:05:55.792
So just for clarity,
we're looking at action mutation,

101
00:05:55.792 --> 00:06:00.452
it's related but
independent from the component for now.

102
00:06:00.452 --> 00:06:04.058
So, what we'll look at is we'll look
at specifically what we're doing.

103
00:06:04.058 --> 00:06:08.965
And for this, I'm gonna create, as I
mentioned, a timeout like a set timeout,

104
00:06:08.965 --> 00:06:12.430
just to model an API call
because I think it's easier than

105
00:06:12.430 --> 00:06:14.254
actually making an API call.

106
00:06:14.254 --> 00:06:17.240
It gives you sort of similar results.

107
00:06:17.240 --> 00:06:21.076
And so for this,
I'm going to fake out an API.

108
00:06:21.076 --> 00:06:27.040
So, I created a fake inventory, which has
chips in it, and it has a stock of 40.

109
00:06:27.040 --> 00:06:33.960
So, that's just my fake inventory and then
I created a method called pingInventory.

110
00:06:33.960 --> 00:06:35.938
You can call it fetch inventory,
whatever you like.

111
00:06:35.938 --> 00:06:39.653
PingInventories fine and
then within it, it's just a promise.

112
00:06:39.653 --> 00:06:41.583
It returns a promise.

113
00:06:41.583 --> 00:06:45.953
And within that promise, there's a set
timeout for three seconds or 3,000

114
00:06:45.953 --> 00:06:50.529
milliseconds, and then it successfully
resolves the particular inventory item.

115
00:06:50.529 --> 00:06:53.535
So again, in this instance,

116
00:06:53.535 --> 00:06:58.591
we're not doing anything
besides just resolving

117
00:06:58.591 --> 00:07:04.022
what we expect to see and
that is not the store itself.

118
00:07:04.022 --> 00:07:06.881
That's just separate because I
wanted to create a fake API,

119
00:07:06.881 --> 00:07:08.963
[LAUGH] that's sort of
outside of the store.

120
00:07:08.963 --> 00:07:11.129
So, you might notice that it's
not within the store at all.

121
00:07:11.129 --> 00:07:14.632
It's just sort of separate, and
then we'll look at the actions itself.

122
00:07:14.632 --> 00:07:17.737
So, how does this relate
to the specific action.

123
00:07:17.737 --> 00:07:22.119
So, from line 22 to 25, that's when
I'm actually calling this fake API.

124
00:07:22.119 --> 00:07:25.661
And of course,
this fake API takes in a specific item,

125
00:07:25.661 --> 00:07:27.511
which in this case is chips.

126
00:07:27.511 --> 00:07:32.047
And so, I'm pinging an inventory for
chips specifically, and

127
00:07:32.047 --> 00:07:37.173
then I am grabbing that thing, and
then I'm passing it to the mutation.

128
00:07:37.173 --> 00:07:38.487
So, there's a bit of things.

129
00:07:38.487 --> 00:07:41.959
There's a lot of things happening here,
one is on line 22.

130
00:07:41.959 --> 00:07:47.052
We're actually pinging and asking for
data from this specific API.

131
00:07:47.052 --> 00:07:51.140
So, pingInventory which is our API,
and then on successful return,

132
00:07:51.140 --> 00:07:54.482
we're grabbing the item
that's returned from the API.

133
00:07:54.482 --> 00:07:58.279
Because obviously, if you're fetching
an API, you might want the return value,

134
00:07:58.279 --> 00:08:00.079
otherwise, why would you call an API.

135
00:08:00.079 --> 00:08:04.891
And then,
we want to pass that down to the mutation.

136
00:08:04.891 --> 00:08:08.994
And so, again, you will see
the context.commit, which is again,

137
00:08:08.994 --> 00:08:12.839
the default parameter context
was committing to the mutation.

138
00:08:12.839 --> 00:08:16.631
In this case,
the mutation is called stockItems.

139
00:08:16.631 --> 00:08:21.001
But you'll see a difference here, which is
previously we just did context.commit with

140
00:08:21.001 --> 00:08:22.291
the name of the mutation.

141
00:08:22.291 --> 00:08:25.254
But here, we have a second parameter and

142
00:08:25.254 --> 00:08:30.150
the second parameter is the specific
returned value from the API.

143
00:08:30.150 --> 00:08:35.711
So inventory.stock,
which if you look at lines 1 to 6,

144
00:08:35.711 --> 00:08:40.145
which is what is the return
value from our API.

145
00:08:40.145 --> 00:08:43.940
Inventory.stock is just 40,
so it gives you a number.

146
00:08:43.940 --> 00:08:46.702
And so, we care about that specific
number because in this case,

147
00:08:46.702 --> 00:08:48.572
we don't really care about anything else.

148
00:08:48.572 --> 00:08:50.983
We just wanna stock it
to a specific number.

149
00:08:50.983 --> 00:08:55.476
And so, what we'll do now is we will
look at how that looks like from

150
00:08:55.476 --> 00:08:57.416
the mutation perspective.

151
00:08:57.416 --> 00:09:01.527
So, we looked at the action and
how we're exactly calling an API and

152
00:09:01.527 --> 00:09:03.345
then passing that data down.

153
00:09:03.345 --> 00:09:06.540
And then,
next we'll look at the mutation itself.

