WEBVTT

1
00:00:00.000 --> 00:00:05.176
So Vuex Modules is a really neat
concepts when we work with Vuex.

2
00:00:05.176 --> 00:00:10.492
[LAUGH] And specifically, what I mean
by modules is Modularizing Vuex.

3
00:00:10.492 --> 00:00:14.820
So we already talked about isolating
Vuex from Vue components, so

4
00:00:14.820 --> 00:00:19.780
that the components can use the store,
and the store can live in isolation.

5
00:00:19.780 --> 00:00:24.080
But what could be really useful is
the ability to isolate the store,

6
00:00:24.080 --> 00:00:27.179
pieces of the store into
different components.

7
00:00:27.179 --> 00:00:29.178
And I'll explain what I mean by that.

8
00:00:29.178 --> 00:00:33.165
But first, we'll go over the definition
of what a Vuex Module is.

9
00:00:33.165 --> 00:00:35.962
And then, we'll talk about why
that can be really useful.

10
00:00:35.962 --> 00:00:40.698
A Vuex module allows you to
subdivide the Vuex store.

11
00:00:40.698 --> 00:00:45.876
So each module has its own actions,
state, mutations and getters, and this

12
00:00:45.876 --> 00:00:51.305
is really useful because it's the ability
for you to isolate parts of the store.

13
00:00:51.305 --> 00:00:56.221
So again, you don't get into a place
where code is really complicated,

14
00:00:56.221 --> 00:01:00.492
where for example,
your store has not just inventory, also,

15
00:01:00.492 --> 00:01:02.602
as machines state, and so on.

16
00:01:02.602 --> 00:01:09.045
So we'll look at that specific example of
machine state and inventory state as well.

17
00:01:09.045 --> 00:01:13.181
So generally speaking,
in the code that we've done, so far,

18
00:01:13.181 --> 00:01:18.176
we've had the machine, and inventory,
and information regarding that,

19
00:01:18.176 --> 00:01:22.954
like the condition, as well as the stock
all living in one single store.

20
00:01:22.954 --> 00:01:26.724
This is fine because, again,
this example is fairly paired down and

21
00:01:26.724 --> 00:01:28.223
fairly straightforward.

22
00:01:28.223 --> 00:01:30.716
So having everything in one store is fine.

23
00:01:30.716 --> 00:01:33.404
But in many applications, especially,

24
00:01:33.404 --> 00:01:36.783
if you work with giant,
monolithic applications,

25
00:01:36.783 --> 00:01:41.332
or enterprise style applications,
the store can get pretty clunky.

26
00:01:41.332 --> 00:01:42.840
Because there's various parts to it.

27
00:01:42.840 --> 00:01:45.238
There might be a login component,
a logout component.

28
00:01:45.238 --> 00:01:49.906
So a user instance there might be instance
in terms of the specific data, or

29
00:01:49.906 --> 00:01:53.034
what exactly user preferences may be,
and so on.

30
00:01:53.034 --> 00:01:56.276
And so because of that,
you might want to isolate your store.

31
00:01:56.276 --> 00:01:58.087
In the example of what we have,

32
00:01:58.087 --> 00:02:02.974
we have a vending machine that has both
machine state, as well as inventory state.

33
00:02:02.974 --> 00:02:09.985
And so what is really useful is here's
an example of what that looks like.

34
00:02:09.985 --> 00:02:14.628
So here's a screen cap of
inventory with a machine state.

35
00:02:14.628 --> 00:02:18.382
So here, I have the machine state
shows me the name of the machine,

36
00:02:18.382 --> 00:02:21.063
as well as when it was last serviced,
and then,

37
00:02:21.063 --> 00:02:24.973
even has a button that allows me
to service the machine, let's say.

38
00:02:24.973 --> 00:02:27.901
And then, on the above half,
you see inventory,

39
00:02:27.901 --> 00:02:31.056
which is just a list of
the items within that machine.

40
00:02:31.056 --> 00:02:33.318
So these two things are sort of related.

41
00:02:33.318 --> 00:02:34.529
But they are separate.

42
00:02:34.529 --> 00:02:37.167
Because the name of the machine,
let's say,

43
00:02:37.167 --> 00:02:41.629
is sort of independent of whether or not
there is a bag of chips in inventory, or

44
00:02:41.629 --> 00:02:44.419
how many bags of chips
that are in the inventory.

45
00:02:44.419 --> 00:02:49.050
And so we might want to extrapolate
those two to use a module.

46
00:02:49.050 --> 00:02:53.848
So far, when we looked at the store, we've
had everything living all together in one.

47
00:02:53.848 --> 00:02:55.065
So let's look at state.

48
00:02:55.065 --> 00:02:59.623
States has inventory, and then, it might
have various other pieces like when

49
00:02:59.623 --> 00:03:04.474
the machine was last serviced, here's
just a new date, don't worry about that.

50
00:03:04.474 --> 00:03:06.212
It's just an idea of date.

51
00:03:06.212 --> 00:03:10.666
And then, machine name, which is just
the name of that specific machine.

52
00:03:10.666 --> 00:03:15.036
And so these pieces all live in
one single state instance, so

53
00:03:15.036 --> 00:03:17.788
they're globally accessible to us.

54
00:03:17.788 --> 00:03:22.700
What we might want to do is extrapolate
them so that the inventory is sort of

55
00:03:22.700 --> 00:03:27.155
independent from the machine name and
last service, let's say.

56
00:03:27.155 --> 00:03:30.305
So in order to do this,
you could if you wanted to,

57
00:03:30.305 --> 00:03:34.881
create literally two Vue stores, so
you could create one single store.

58
00:03:34.881 --> 00:03:37.350
You wouldn't call it the same thing,
you wouldn't call it store,

59
00:03:37.350 --> 00:03:39.269
you would do like store one,
and store two, maybe.

60
00:03:39.269 --> 00:03:41.780
But this is not very useful because,
again,

61
00:03:41.780 --> 00:03:44.896
then you would have to have
weird ways of naming things.

62
00:03:44.896 --> 00:03:49.689
There might be clashes because you can't
access it through this dollar store,

63
00:03:49.689 --> 00:03:50.339
and so on.

64
00:03:50.339 --> 00:03:54.485
So this is a bad way of doing things,
do not do things this way.

65
00:03:54.485 --> 00:03:57.813
This is more just to show you,
is this possible,

66
00:03:57.813 --> 00:04:00.746
it's not a good way of
doing things at all.

67
00:04:00.746 --> 00:04:05.788
Instead, a better way is to actually use
modules, because Vuex allows you to do

68
00:04:05.788 --> 00:04:10.776
modules by default, so you don't have
to do anything to hook those pieces up.

69
00:04:10.776 --> 00:04:15.280
In addition to state actions,
getters, and mutations, you also have

70
00:04:15.280 --> 00:04:19.722
a modules attribute in store,
which we didn't talk about until now.

71
00:04:19.722 --> 00:04:23.192
And within modules,
you can actually name a module, and

72
00:04:23.192 --> 00:04:27.325
then, define all the different
attributes of a store within them.

73
00:04:27.325 --> 00:04:33.726
So you're essentially nesting your
store within the modules in a store.

74
00:04:33.726 --> 00:04:37.802
So it's a bit, it looks complex.

75
00:04:37.802 --> 00:04:42.110
But it actually allows you to work with
the store in a much more simpler fashion,

76
00:04:42.110 --> 00:04:45.536
cuz you know exactly the different
pieces that work within it.

77
00:04:45.536 --> 00:04:49.918
So for example, we have modules and then,
within modules, we have inventory and

78
00:04:49.918 --> 00:04:52.405
machine, these are the names
of the modules.

79
00:04:52.405 --> 00:04:55.583
So inventory is one,
and machine is another.

80
00:04:55.583 --> 00:04:57.879
And then, within them, we have state.

81
00:04:57.879 --> 00:05:02.829
And obviously, what you need to define
within the module namespace, or

82
00:05:02.829 --> 00:05:07.062
the module name is state actions,
getters, and mutations.

83
00:05:07.062 --> 00:05:10.721
That's where that lives, and in this case,
we only talked about state, so

84
00:05:10.721 --> 00:05:11.933
I'm showing you state.

85
00:05:11.933 --> 00:05:16.707
So we have supply, which is specific
to the inventory module, and then,

86
00:05:16.707 --> 00:05:21.953
we have the name of the machine, which is
specific to the machine module itself.

87
00:05:21.953 --> 00:05:26.646
And so here we have extrapolated
the various pieces of

88
00:05:26.646 --> 00:05:31.142
state in our Vue store, and
added them as a module.

89
00:05:31.142 --> 00:05:37.326
In the code, you're obviously accessing
things in a modularized fashion,

90
00:05:37.326 --> 00:05:42.189
so for example, on the left,
we see the store with modules.

91
00:05:42.189 --> 00:05:45.896
So you see the inventory module
as well as the machine module.

92
00:05:45.896 --> 00:05:48.894
And on the right is where
we see our component code.

93
00:05:48.894 --> 00:05:53.291
And in the component code, you might
notice something different, which is,

94
00:05:53.291 --> 00:05:57.299
we're accessing the state in a slightly
different way than we used to.

95
00:05:57.299 --> 00:06:01.741
In the past, let's say we wanted
to access the machine name.

96
00:06:01.741 --> 00:06:05.427
We could do this .dollar
store.state.machine name,

97
00:06:05.427 --> 00:06:08.738
because that's accessing
it on the global store.

98
00:06:08.738 --> 00:06:13.143
But because we're using modules,
the specific data attribute and

99
00:06:13.143 --> 00:06:18.563
state attribute is not on the global
space anymore, it's actually modularized.

100
00:06:18.563 --> 00:06:20.903
So in order to access machine name,

101
00:06:20.903 --> 00:06:25.830
you're now doing this .dollar
store.state.machine.machine name.

102
00:06:25.830 --> 00:06:31.444
And the specific module matches the name
that you created in your module.

103
00:06:31.444 --> 00:06:35.815
So in my instance,
I create a module called machine, so

104
00:06:35.815 --> 00:06:40.191
I'm doing this
.dollarstore.state.module name.

105
00:06:40.191 --> 00:06:43.719
And so all of my states,
when I create it this way,

106
00:06:43.719 --> 00:06:46.840
it's accessed through the module itself.

107
00:06:46.840 --> 00:06:49.695
So it's not on the global store,
it's modularized.

108
00:06:49.695 --> 00:06:53.153
And that's really nice,
because it's fairly straightforward.

