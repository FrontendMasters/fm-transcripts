WEBVTT

1
00:00:00.000 --> 00:00:02.682
&gt;&gt; Kevin Powell: So
when I see something like this,

2
00:00:02.682 --> 00:00:07.690
what I always want to go to first
is creating a grid, obviously.

3
00:00:07.690 --> 00:00:11.783
But with grid, we have two
different functions or features,

4
00:00:11.783 --> 00:00:15.734
I should say, we can use,
which are auto fit and auto fill.

5
00:00:15.734 --> 00:00:19.998
And so here I have this grid of mushrooms,
the parent of all of those cards.

6
00:00:19.998 --> 00:00:24.503
I'm gonna give it a class and
I just tend to call this grid autofit or

7
00:00:24.503 --> 00:00:27.730
autofill, depending on
which one I'm using.

8
00:00:27.730 --> 00:00:31.267
If you don't know which one to decide
between coz you have the two choices,

9
00:00:31.267 --> 00:00:33.024
it's a lot like margin and padding.

10
00:00:33.024 --> 00:00:34.894
Try one.
If it's the wrong one, try the other one.

11
00:00:34.894 --> 00:00:40.320
But I find 99% of the time,
autofit is what I actually want.

12
00:00:40.320 --> 00:00:42.979
And I'll explain the difference
a little bit shortly, but

13
00:00:42.979 --> 00:00:44.745
I'm gonna do just a grid-auto-fit.

14
00:00:44.745 --> 00:00:47.563
I'm not calling this mushroom guide,
cuz again, potentially,

15
00:00:47.563 --> 00:00:49.335
I'm doing something very generic here.

16
00:00:49.335 --> 00:00:52.521
This is just a layout that's gonna have a
whole bunch of cards that are going in it

17
00:00:52.521 --> 00:00:55.202
that I could potentially reuse
somewhere else if I ever needed to.

18
00:00:55.202 --> 00:00:57.376
And if I gave it the class
name mushroom-guide,

19
00:00:57.376 --> 00:00:59.612
then I'm stuck having that
as my mushroom guide.

20
00:00:59.612 --> 00:01:02.784
And then I'd have another grid,
essentially the same later on.

21
00:01:02.784 --> 00:01:06.116
We don't need it in this case, but
I'm always trying to think ahead,

22
00:01:06.116 --> 00:01:08.611
is this a generic layout,
or is this very specific?

23
00:01:08.611 --> 00:01:11.401
Which our next grid will be,
where we have the bento layout,

24
00:01:11.401 --> 00:01:13.982
where the pieces all have to
be specifically arranged.

25
00:01:13.982 --> 00:01:17.704
In a situation like that,
you have a bit of a different story, but

26
00:01:17.704 --> 00:01:22.240
here where it's just a generic looking
layout that has specific content in it,

27
00:01:22.240 --> 00:01:26.572
always try and separate the idea of what
the content is versus the layout that

28
00:01:26.572 --> 00:01:28.020
it's living inside of.

29
00:01:28.020 --> 00:01:31.618
So I mentioned that is
going to be a layout.

30
00:01:31.618 --> 00:01:36.554
So we can do a layer of layout and
find our layer there,

31
00:01:36.554 --> 00:01:39.861
and I can collapse these ones down.

32
00:01:39.861 --> 00:01:44.449
And in there, the way I organize this is
a little bit like I have my grid flow,

33
00:01:44.449 --> 00:01:47.176
I have equal columns, sections, wrapper,

34
00:01:47.176 --> 00:01:50.356
and I don't know,
you can just put it at the bottom.

35
00:01:50.356 --> 00:01:52.822
I have the grid in equal columns.

36
00:01:52.822 --> 00:01:56.556
I sort of see it as being in the same
realm of that type of layout,

37
00:01:56.556 --> 00:01:58.744
so I'm gonna throw it in right here.

38
00:01:58.744 --> 00:02:01.730
But if you prefer organizing
it somewhere else you can.

39
00:02:01.730 --> 00:02:08.985
And so grid auto fit, and
that means display grid gap,

40
00:02:08.985 --> 00:02:15.470
probably one rem,
16 pixels, in that range.

41
00:02:15.470 --> 00:02:18.530
Let's go take a look at what that's done,
and my mobile layouts done.

42
00:02:18.530 --> 00:02:19.515
So that's awesome.

43
00:02:19.515 --> 00:02:23.576
Because the way grid works, the first
thing they may think of now is well,

44
00:02:23.576 --> 00:02:26.738
I should just put a media query in and
create the columns.

45
00:02:26.738 --> 00:02:30.102
Grid auto-fit, the reason I like it, it's
one of those intrinsic layouts where I

46
00:02:30.102 --> 00:02:32.183
don't have to worry about
what the break point is.

47
00:02:32.183 --> 00:02:36.851
I just give it some information and
it figures out the layout for me and

48
00:02:36.851 --> 00:02:39.200
it makes it work across the board.

49
00:02:39.200 --> 00:02:42.826
I think one reason people have
hesitancy towards using Grid

50
00:02:42.826 --> 00:02:45.739
is because there's a lot
of new pieces with it.

51
00:02:45.739 --> 00:02:50.467
And you get grid template columns is such
a long declaration that it can be a bit

52
00:02:50.467 --> 00:02:50.994
funny.

53
00:02:50.994 --> 00:02:54.528
But we have grid template columns, and
just because this is gonna be a long

54
00:02:54.528 --> 00:02:58.008
declaration, I'm putting this on
a separate line, you do not have to.

55
00:02:58.008 --> 00:03:02.061
And when I save, Prettier will probably
put it all on one line for me.

56
00:03:02.061 --> 00:03:06.814
And grid templates not with an s,
template columns like that.

57
00:03:06.814 --> 00:03:11.566
I knew there was a typo just cuz the color
gray that was coming on it when I spelled

58
00:03:11.566 --> 00:03:14.892
it correctly,
the syntax highlighting was working.

59
00:03:14.892 --> 00:03:18.433
With my grid template columns,
we're going to do the repeat syntax.

60
00:03:18.433 --> 00:03:21.510
So the repeat syntax,
I could do a 3 and then 1fr,

61
00:03:21.510 --> 00:03:25.672
fr is just use the available space and
it would give me three columns.

62
00:03:25.672 --> 00:03:27.790
Cool, but
then it's always three columns and

63
00:03:27.790 --> 00:03:30.243
then I need media queries to change it and
all of that.

64
00:03:30.243 --> 00:03:34.942
So instead of putting specific numbers
here, as I said, we have auto-fit or

65
00:03:34.942 --> 00:03:35.823
auto-fill.

66
00:03:35.823 --> 00:03:40.422
We'll explore both of them, but for
now we'll explore this, and again,

67
00:03:40.422 --> 00:03:44.222
I want this on a separate line,
just so we can see everything.

68
00:03:44.222 --> 00:03:48.684
And with the auto -fill, again,
there's another new thing you need,

69
00:03:48.684 --> 00:03:52.208
which is the min-max,
which is a CSS grid-only thing.

70
00:03:52.208 --> 00:03:55.340
So again, I think that's one of the
reasons sometimes people have hesitancy

71
00:03:55.340 --> 00:03:58.085
towards grid, is because there's
a lot of unique pieces to it, and

72
00:03:58.085 --> 00:03:59.747
they're different from other things.

73
00:03:59.747 --> 00:04:04.097
But this one pattern you could just
reuse on every website you create, and

74
00:04:04.097 --> 00:04:06.214
you'll find good use cases for it.

75
00:04:06.214 --> 00:04:10.207
So with the auto-fit, it's going to
automatically figure out what to do based

76
00:04:10.207 --> 00:04:12.362
on the information we put on our min-max.

77
00:04:12.362 --> 00:04:17.376
So for now,
I'm going to write 300 pixels, 1fr.

78
00:04:17.376 --> 00:04:22.427
In general, if you're using an auto-fit or
an auto-fill in the minmax,

79
00:04:22.427 --> 00:04:25.795
this value will almost
every single time be 1fr,

80
00:04:25.795 --> 00:04:29.100
cuz that just means take
up the available space.

81
00:04:29.100 --> 00:04:32.769
The maximum size it has is fill
up as much space as you can.

82
00:04:32.769 --> 00:04:38.259
And this is the minimum size here, so the
smallest that column can be is 300 pixels.

83
00:04:38.259 --> 00:04:41.231
We get zero columns and
I might have made it.

84
00:04:41.231 --> 00:04:42.050
Oops, there we go.

85
00:04:42.050 --> 00:04:44.996
Now we go up to two columns and
the browser, as I said,

86
00:04:44.996 --> 00:04:48.532
it's an intrinsic layout, so
as soon as it can fit two columns,

87
00:04:48.532 --> 00:04:52.740
it adds two columns that are 300 pixels,
and then we get to a larger size.

88
00:04:52.740 --> 00:04:56.606
It goes, I can fit three columns now
at 300 pixels, and so on and so forth.

89
00:04:56.606 --> 00:05:01.337
It add as many as it can depending on
the size of the space available to it.

90
00:05:01.337 --> 00:05:02.894
So very handy.

91
00:05:02.894 --> 00:05:07.495
There is one problem with grid
auto-fit is the minimum size here

92
00:05:07.495 --> 00:05:10.147
potentially could cause overflow.

93
00:05:10.147 --> 00:05:14.810
So I'm gonna exaggerate by making it 600,
you probably wouldn't do this, but

94
00:05:14.810 --> 00:05:18.620
if you go smaller than that size,
those columns are 600 pixels.

95
00:05:18.620 --> 00:05:20.971
You just said that's
the smallest they can be.

96
00:05:20.971 --> 00:05:25.765
So you end up with some horizontal
scrolling if the viewport gets

97
00:05:25.765 --> 00:05:27.640
smaller than that size.

98
00:05:27.640 --> 00:05:31.686
Or if you're using this in a layout
where it's a sidebar plus the main,

99
00:05:31.686 --> 00:05:35.813
it can start spilling out the side at
narrower sizes and stuff like that.

100
00:05:35.813 --> 00:05:41.149
The way to overcome this looks really
funny, where you put this inside

101
00:05:41.149 --> 00:05:46.677
of a min function, and the second
value in the min function is 100%.

102
00:05:46.677 --> 00:05:50.928
And I'll full screen that first so
you can see the whole thing.

103
00:05:50.928 --> 00:05:56.910
And so we're doing a minimum size
that is either 600 pixels or 100%.

104
00:05:56.910 --> 00:06:00.454
Which just means that if the parent's
size is below 600 pixels,

105
00:06:00.454 --> 00:06:04.327
it's going to use this 100% here
instead of using the 600 pixels.

106
00:06:04.327 --> 00:06:07.135
It's choose the smaller
between these two values.

107
00:06:07.135 --> 00:06:11.024
It looks a little bit strange in setting
it up like this, you have a min-max

108
00:06:11.024 --> 00:06:14.259
with a min nested inside of it,
but it's the best way to do it.

109
00:06:14.259 --> 00:06:15.859
And if we come take a look now,

110
00:06:15.859 --> 00:06:18.938
we've solved that overflow
problem that we had before.

111
00:06:18.938 --> 00:06:23.299
So I always recommend doing the min with
the 100% even if you're putting a small

112
00:06:23.299 --> 00:06:26.678
number here, even if the declaration
looks a little bit weird.

113
00:06:26.678 --> 00:06:30.340
And the one problem with this is,
if you need to come in and change this,

114
00:06:30.340 --> 00:06:33.966
you're sort of diving through and
it's a bit hard to read and look at.

115
00:06:33.966 --> 00:06:36.632
So this makes the declaration even longer.

116
00:06:36.632 --> 00:06:38.329
So we'll full screen it again.

117
00:06:38.329 --> 00:06:43.961
But I do like coming on this and
doing this as a custom property,

118
00:06:43.961 --> 00:06:48.232
and doing bar say,
auto-fit, min call size.

119
00:06:48.232 --> 00:06:52.814
And it could be a much shorter one, if you
want it to be, but I put that here, and

120
00:06:52.814 --> 00:06:56.854
then you could have that here and
say that it's your, I don't know.

121
00:06:56.854 --> 00:07:03.466
Oops, say that that's 250 pixels or
whatever you need it to be.

122
00:07:03.466 --> 00:07:04.992
By having it as a custom property,

123
00:07:04.992 --> 00:07:08.532
it makes it easier to adapt if you were
using it in different situations as well.

124
00:07:08.532 --> 00:07:12.130
So you could have one grid set up one way,
another grid set up another way,

125
00:07:12.130 --> 00:07:14.231
and just change that minimum column size.

126
00:07:14.231 --> 00:07:15.782
And then when you are changing it,

127
00:07:15.782 --> 00:07:18.309
you're not hunting it down
in this giant declaration.

128
00:07:18.309 --> 00:07:21.186
You're just coming and finding this one
piece of code that you need to come and

129
00:07:21.186 --> 00:07:21.725
change here.

130
00:07:21.725 --> 00:07:25.198
And the nice thing with custom properties
is you can describe exactly what that

131
00:07:25.198 --> 00:07:25.733
number is.

132
00:07:25.733 --> 00:07:30.776
So auto-fit min column size, I think you
could call it again just min column size,

133
00:07:30.776 --> 00:07:32.952
and that would be completely fine.

134
00:07:32.952 --> 00:07:34.234
It's still very readable.

135
00:07:34.234 --> 00:07:38.199
In the off chance that you have a minimum
column size for something else, I always

136
00:07:38.199 --> 00:07:42.107
like prefixing them with something just
to make sure that I don't accidentally

137
00:07:42.107 --> 00:07:45.809
overwrite it with some other custom
property coming from somewhere else.

138
00:07:45.809 --> 00:07:49.006
So I always have kind of verbose names for

139
00:07:49.006 --> 00:07:52.776
my custom properties
that are locally scoped.

140
00:07:52.776 --> 00:07:57.703
So with that done, whoops,
it's on the screen.

141
00:07:57.703 --> 00:08:01.008
If we go and take a look, it works.

142
00:08:01.008 --> 00:08:02.476
Let's highlight you.

143
00:08:02.476 --> 00:08:05.211
And then as it gets bigger,
we got up to two columns.

144
00:08:05.211 --> 00:08:06.911
As it gets bigger, we got up to three.

145
00:08:06.911 --> 00:08:10.612
And then well probably at my screen size
right now, we're not getting to four,

146
00:08:10.612 --> 00:08:13.002
but you'd get to four columns as well,
I believe.

147
00:08:13.002 --> 00:08:16.896
And as far as what, I chose 250 just
because, again, I'm looking at it, and

148
00:08:16.896 --> 00:08:20.527
I'm like, yeah, that seems like
the right space for it to switch over.

149
00:08:20.527 --> 00:08:23.520
It's getting pretty narrow, I wouldn't
want it to get smaller than that.

150
00:08:23.520 --> 00:08:29.399
If you feel like maybe you want 275, maybe
you want 200, you just sort of eyeball it.

151
00:08:29.399 --> 00:08:33.237
If you are working with a designer, you
also prototype this, show it to them and

152
00:08:33.237 --> 00:08:35.205
say, do I tweak this or is it good or not?

153
00:08:35.205 --> 00:08:37.788
If you are working with
a designer on something,

154
00:08:37.788 --> 00:08:41.316
it's really good to have those open
lanes of communication to make

155
00:08:41.316 --> 00:08:44.409
these decisions if you don't
feel comfortable doing so.

