WEBVTT

1
00:00:00.000 --> 00:00:02.779
&gt;&gt; Kevin Powell: Now that we've got to
this point, I wanna talk a little bit

2
00:00:02.779 --> 00:00:05.753
about this idea of staying
organized as a project is growing.

3
00:00:05.753 --> 00:00:10.355
Because we went from having sort of talked
a lot early on about reusable things,

4
00:00:10.355 --> 00:00:12.636
utility classes, reusable layouts.

5
00:00:12.636 --> 00:00:16.973
And then getting into the components,
like our cards and other things.

6
00:00:16.973 --> 00:00:20.114
And then we got to the second page,
and then it's like, okay, well,

7
00:00:20.114 --> 00:00:23.418
now we need these more custom things,
so let's add this title in there for

8
00:00:23.418 --> 00:00:25.851
the bento grid, and
then we need our mushroom guide.

9
00:00:25.851 --> 00:00:27.696
And we start getting these more
custom things that come in.

10
00:00:27.696 --> 00:00:31.126
And this is always what
happens as a project grows.

11
00:00:31.126 --> 00:00:34.494
And so it's really important as this
is happening, that when these things

12
00:00:34.494 --> 00:00:37.966
are being added to the project you're
thinking a little bit about how you're

13
00:00:37.966 --> 00:00:41.347
going to approach creating them and
doing them instead of just jumping in.

14
00:00:41.347 --> 00:00:44.119
Just like we did early on when
we got that big picture view and

15
00:00:44.119 --> 00:00:45.565
we were trying to work on that.

16
00:00:45.565 --> 00:00:47.832
When you get to things that
are a little bit smaller, or

17
00:00:47.832 --> 00:00:49.756
a new thing that's been
added to the project,

18
00:00:49.756 --> 00:00:53.081
you wanna take that same mentality or
that same approach to what you're doing.

19
00:00:53.081 --> 00:00:55.801
So planning it out before you dive in.

20
00:00:55.801 --> 00:00:59.833
And we could look at the Figma file, and
just as an example when we got to this

21
00:00:59.833 --> 00:01:02.841
grid here, I could have just
done the mushroom guide and

22
00:01:02.841 --> 00:01:05.796
made a very specific grid just for
the mushroom guide.

23
00:01:05.796 --> 00:01:09.309
But I went, well, this grid is really
a generic grid with cards in it.

24
00:01:09.309 --> 00:01:13.742
So while I need that mushroom guide in
there to do a little bit of the styling,

25
00:01:13.742 --> 00:01:17.345
it helped us change the titles and
the spacing on those cards,

26
00:01:17.345 --> 00:01:21.875
I didn't wanna link that grid specifically
to that one space on the website.

27
00:01:21.875 --> 00:01:24.477
I wanted to make something that
was a little bit more generic and

28
00:01:24.477 --> 00:01:25.568
that I could use that way.

29
00:01:25.568 --> 00:01:27.626
And so,
then when I got to this bento grid, well,

30
00:01:27.626 --> 00:01:30.860
then I didn't really have a choice there
because this is really a unique layout

31
00:01:30.860 --> 00:01:33.278
that's probably never gonna
be repeated anywhere else.

32
00:01:33.278 --> 00:01:36.730
So then you think about it, you go,
okay, I can use my generic cards, but

33
00:01:36.730 --> 00:01:40.046
I just need to make a layout that's
very specific to this one use case.

34
00:01:40.046 --> 00:01:43.023
And so, always looking at the bigger
picture as these different things

35
00:01:43.023 --> 00:01:43.675
are coming in.

36
00:01:43.675 --> 00:01:46.207
And trying to create reusable
things as much as possible,

37
00:01:46.207 --> 00:01:48.853
even if it's a new thing that's
been added to your project.

38
00:01:48.853 --> 00:01:51.083
And as we've seen through
it everything now, and

39
00:01:51.083 --> 00:01:53.909
I've been very heavy-handed in
my use of custom properties.

40
00:01:53.909 --> 00:01:57.156
I'd say there's never any harm in making
something a custom property that's

41
00:01:57.156 --> 00:01:57.902
locally scoped.

42
00:01:57.902 --> 00:02:00.452
I'm a huge fan of locally
scoped custom properties,

43
00:02:00.452 --> 00:02:02.443
I throw them on tons
of stuff all the time.

44
00:02:02.443 --> 00:02:05.925
And it just makes it so that one thing
that you've created suddenly is more

45
00:02:05.925 --> 00:02:09.531
reusable and more customizable if you
throw it into different situations.

46
00:02:09.531 --> 00:02:13.504
We've also been playing a little bit with
cascade layers, so I think that using and

47
00:02:13.504 --> 00:02:16.365
leveraging those layers can
just help with organization.

48
00:02:16.365 --> 00:02:19.700
Even just from a mental perspective
of when you're coming in and

49
00:02:19.700 --> 00:02:21.376
looking through your CSS file.

50
00:02:21.376 --> 00:02:24.208
Of knowing, okay,
I just have this reset at the top, and

51
00:02:24.208 --> 00:02:27.522
then I have this base layer and
my layout things and my components.

52
00:02:27.522 --> 00:02:31.387
And the ordering in there can get a little
bit mixed up or you could potentially come

53
00:02:31.387 --> 00:02:34.141
in with sublayers,
I'm gonna talk about that very soon.

54
00:02:34.141 --> 00:02:37.951
But just having this sort of mental
organization of your different things can

55
00:02:37.951 --> 00:02:39.017
really go a long way.

56
00:02:39.017 --> 00:02:41.937
And it's one of those things that you're
going to get better at the more you do it.

57
00:02:41.937 --> 00:02:43.493
Cuz you're gonna throw
something in one layer and

58
00:02:43.493 --> 00:02:45.209
then you realize it doesn't
really make sense there.

59
00:02:45.209 --> 00:02:48.600
And the next time you do it, maybe you'll
put it somewhere else so you refactor it,

60
00:02:48.600 --> 00:02:50.935
you put it somewhere else,
and there's no harm in that.

61
00:02:50.935 --> 00:02:54.696
There's no harm in having more layers or
less layers, or just having one layer and

62
00:02:54.696 --> 00:02:56.508
then having your other code down here.

63
00:02:56.508 --> 00:02:59.700
Cuz I could have a whole bunch
of layered stuff at the top and

64
00:02:59.700 --> 00:03:01.797
then subgeneral stuff at the bottom.

65
00:03:01.797 --> 00:03:04.513
If I have lots of layers,
I probably wouldn't wanna do that.

66
00:03:04.513 --> 00:03:07.308
But if I just have a reset at the top and
then I have my other code at the bottom,

67
00:03:07.308 --> 00:03:09.257
I think something like that
could work out well too.

68
00:03:09.257 --> 00:03:10.249
With all of that,

69
00:03:10.249 --> 00:03:14.493
I think it's also really important to
recognize that refactoring is okay.

70
00:03:14.493 --> 00:03:18.371
We saw really small examples of that when
I changed the card from being display grid

71
00:03:18.371 --> 00:03:21.925
to display flex because I ran into
a situation where I said, you know what?

72
00:03:21.925 --> 00:03:23.344
This actually makes more sense, and

73
00:03:23.344 --> 00:03:25.552
it's not gonna break anything
that I've already done.

74
00:03:25.552 --> 00:03:29.250
So don't be scared about changing
the way something's working.

75
00:03:29.250 --> 00:03:34.231
Or if you come into something such as,
if you made these cards in a very specific

76
00:03:34.231 --> 00:03:37.414
way and they worked in that one way and
it was fine.

77
00:03:37.414 --> 00:03:40.979
But then you got to these cards and you
realized, they're actually really similar.

78
00:03:40.979 --> 00:03:44.640
Maybe I need to make a change to that
other thing instead of just layering more

79
00:03:44.640 --> 00:03:47.226
and more CSS on stuff,
that can be a really good idea.

80
00:03:47.226 --> 00:03:50.761
And one example that you could do
in this project if you wanted to.

81
00:03:50.761 --> 00:03:54.041
We don't need to because we don't
have other buttons to do, but

82
00:03:54.041 --> 00:03:58.297
you could definitely refactor the buttons
to be something that's a little bit more

83
00:03:58.297 --> 00:03:59.843
customizable and reusable.

84
00:03:59.843 --> 00:04:02.597
Just setting them up the same way
we've done a few other things,

85
00:04:02.597 --> 00:04:05.253
where you set them up with custom
properties with fallbacks.

86
00:04:05.253 --> 00:04:08.397
So you have a default that's just
using the custom properties.

87
00:04:08.397 --> 00:04:12.136
And then you manipulate them a little
bit for how you have them set up, and

88
00:04:12.136 --> 00:04:13.555
then you can make changes.

89
00:04:13.555 --> 00:04:16.006
You have a brand version of your button.

90
00:04:16.006 --> 00:04:19.644
So however you're doing your modifier
classes, whether it's with modifier

91
00:04:19.644 --> 00:04:23.075
classes, whether it's with the data
attributes like I've been doing.

92
00:04:23.075 --> 00:04:25.368
You can then just set
the button-background,

93
00:04:25.368 --> 00:04:27.611
the button-background-hover, the text.

94
00:04:27.611 --> 00:04:28.821
And you can do all of this, and

95
00:04:28.821 --> 00:04:32.280
this is really awesome to do when you have
things like hover states and other things.

96
00:04:32.280 --> 00:04:35.321
Cuz you just go on the parent selector,
and you can redefine all these

97
00:04:35.321 --> 00:04:38.468
different things without having to
then select the hover state again or

98
00:04:38.468 --> 00:04:40.418
then select this other
version of it again.

99
00:04:40.418 --> 00:04:43.854
One selector just to make all of these
different changes that are happening.

100
00:04:43.854 --> 00:04:47.292
One thing with this is sometimes people
don't like having the fallbacks the way

101
00:04:47.292 --> 00:04:48.381
we've set them up here.

102
00:04:48.381 --> 00:04:51.616
Just because if you looked
at this at first glance,

103
00:04:51.616 --> 00:04:56.445
you can't tell me what the color is,
you have to think about it a little bit.

104
00:04:56.445 --> 00:04:59.148
So for these types of components,

105
00:04:59.148 --> 00:05:03.355
the other thing you could do
instead is do it this way.

106
00:05:03.355 --> 00:05:05.748
Where you're just saying
the color is button-text,

107
00:05:05.748 --> 00:05:09.714
the background is button-background,
the border radius is button-border-radius.

108
00:05:09.714 --> 00:05:13.720
And then you have all these custom
properties just at the top, and it makes

109
00:05:13.720 --> 00:05:18.192
it a lot more readable and quick, very
quickly you know exactly what's going on.

110
00:05:18.192 --> 00:05:20.769
And then, again,
you have this settings down here,

111
00:05:20.769 --> 00:05:24.170
but this is what's controlling
everything through that component.

112
00:05:24.170 --> 00:05:26.974
And it makes it very easy to overwrite and
make changes to it.

113
00:05:26.974 --> 00:05:30.100
The one drawback of doing
something this way is,

114
00:05:30.100 --> 00:05:34.829
because these custom properties
are being defined on the button itself,

115
00:05:34.829 --> 00:05:38.047
on the parent,
you can't make any changes to it.

116
00:05:38.047 --> 00:05:42.373
Because the parent, you declare something
and then it's getting defined here.

117
00:05:42.373 --> 00:05:46.102
And I just bring that up because we took
advantage of that a little bit in our

118
00:05:46.102 --> 00:05:50.072
components, like here, where I had
the mushroom guide, where the parent was

119
00:05:50.072 --> 00:05:53.701
redeclaring some custom properties,
and I was able to set them there.

120
00:05:53.701 --> 00:05:55.139
So you have to think a little bit about,

121
00:05:55.139 --> 00:05:57.546
does this button gonna be something
that's self encapsulated?

122
00:05:57.546 --> 00:06:02.534
And I'm only gonna be changing the styles
of it through a modifier class or

123
00:06:02.534 --> 00:06:04.072
something like that?

124
00:06:04.072 --> 00:06:07.414
Or do I want it to be something where
I can change a style up higher and

125
00:06:07.414 --> 00:06:10.283
that's gonna bleed through
into these subcomponents or

126
00:06:10.283 --> 00:06:12.630
these things that
are nested inside of there?

127
00:06:12.630 --> 00:06:15.094
So it is a little bit of a give and take.

128
00:06:15.094 --> 00:06:18.405
You can definitely mix and match a little
bit, so buttons could be something where,

129
00:06:18.405 --> 00:06:20.470
no, I don't want those to
be changed by the parent.

130
00:06:20.470 --> 00:06:24.810
I only want the button to control what the
button looks, but the titles of the cards,

131
00:06:24.810 --> 00:06:27.272
I think it makes sense to
have that extra level.

132
00:06:27.272 --> 00:06:30.159
I wish I could say that this is the right
way to do it, this is the wrong way to do

133
00:06:30.159 --> 00:06:32.981
it, it's project to project,
it's personal preference a little bit.

134
00:06:32.981 --> 00:06:36.845
And it's one of those things that I really
just encourage you to experiment with,

135
00:06:36.845 --> 00:06:39.310
play with, and
have some fun with it, to be honest.

136
00:06:39.310 --> 00:06:43.562
And to see how it works while you're using
it and trying out different ways to do

137
00:06:43.562 --> 00:06:47.751
it as you're writing your CSS to find
these things that you feel work for you,

138
00:06:47.751 --> 00:06:50.470
but using custom properties
as much as possible.

139
00:06:50.470 --> 00:06:53.694
Locally scoped ones, I find has been
a complete game changer for me.

140
00:06:53.694 --> 00:06:57.383
And it just makes life so much easier to
have these more robust components, or

141
00:06:57.383 --> 00:07:00.789
these more robust, I keep calling
them components cuz it's a button or

142
00:07:00.789 --> 00:07:01.900
something like that.

143
00:07:01.900 --> 00:07:07.527
It's not the component in the JS framework
sense, but these more robust elements and

144
00:07:07.527 --> 00:07:11.768
classes and everything,
they are more reusable along the way.

