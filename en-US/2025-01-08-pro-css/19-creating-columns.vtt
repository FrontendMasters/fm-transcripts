WEBVTT

1
00:00:00.033 --> 00:00:03.338
&gt;&gt; Kevin Powell: Okay, now is one of the
parts of this that I was looking forward

2
00:00:03.338 --> 00:00:06.337
to the most,
which is talking about creating columns.

3
00:00:06.337 --> 00:00:08.066
And we have these areas in our design.

4
00:00:08.066 --> 00:00:10.415
We have these different sections.

5
00:00:10.415 --> 00:00:12.995
We have one area that needs
to have three columns and

6
00:00:12.995 --> 00:00:15.515
then another area that
needs to have two columns,

7
00:00:15.515 --> 00:00:19.417
not looking at the mobile design now,
just because I know the mobile stacks.

8
00:00:19.417 --> 00:00:23.390
So I don't have to stress about it bit
too much there, it's going to work.

9
00:00:23.390 --> 00:00:25.680
We don't have to look at it.
We will take a mobile first approach to

10
00:00:25.680 --> 00:00:27.236
getting it to work, though.

11
00:00:27.236 --> 00:00:30.944
But what I need to decide is
how do I need these columns

12
00:00:30.944 --> 00:00:33.573
to actually come together and work?

13
00:00:33.573 --> 00:00:37.509
Because there's so many different
approaches you can take to creating these

14
00:00:37.509 --> 00:00:39.082
the one thing that's really,

15
00:00:39.082 --> 00:00:41.880
really important here is
content shouldn't matter.

16
00:00:41.880 --> 00:00:44.710
When you're looking at what
goes inside the columns,

17
00:00:44.710 --> 00:00:46.810
that should have no impact on anything.

18
00:00:46.810 --> 00:00:48.934
You should have something
that's creating your layout.

19
00:00:48.934 --> 00:00:52.285
There's a class that's saying there are
columns here, and then you can plug and

20
00:00:52.285 --> 00:00:53.664
play any content into there, and

21
00:00:53.664 --> 00:00:56.294
they'll live in those columns,
and those columns will work.

22
00:00:56.294 --> 00:00:57.869
Ideally, that's what we're doing,

23
00:00:57.869 --> 00:01:00.935
because then those columns that you've
created are reusable any content.

24
00:01:00.935 --> 00:01:02.965
You're putting in them is reusable, and

25
00:01:02.965 --> 00:01:06.863
you can reuse those throughout your
entire site, which is generally the goal.

26
00:01:06.863 --> 00:01:10.772
And even in this case, if we look at the
layout, over here, we have two columns,

27
00:01:10.772 --> 00:01:14.753
and over here we have two columns, and
they're actually in different wrappers.

28
00:01:14.753 --> 00:01:19.298
This wrapper is the regular one,
whereas down here it's the wider one.

29
00:01:19.298 --> 00:01:20.747
We shouldn't have to
worry about that either.

30
00:01:20.747 --> 00:01:25.089
The wrappers handling the wrapper thing,
the columns is handling the columns thing,

31
00:01:25.089 --> 00:01:29.031
and then we are just throwing whatever
content we need to be going in the there.

32
00:01:29.031 --> 00:01:30.343
So each piece has its
own job along the way.

33
00:01:32.245 --> 00:01:33.936
&gt;&gt; Kevin Powell: When we have
different numbers of columns,

34
00:01:33.936 --> 00:01:36.096
there's different ways that
we can do things, right?

35
00:01:36.096 --> 00:01:39.600
So if you did a display of flex
on something to create colums,

36
00:01:39.600 --> 00:01:42.639
its flexbox This is nice,
it just creates columns.

37
00:01:42.639 --> 00:01:45.854
We could do that, and
then every single child will be a column.

38
00:01:45.854 --> 00:01:47.644
We just saw that with our navigation.

39
00:01:47.644 --> 00:01:50.579
Throw display flex on it,
each one goes next to each other.

40
00:01:50.579 --> 00:01:54.623
We could do it with grid as well in a bit
more of an explicit way cuz maybe you just

41
00:01:54.623 --> 00:01:55.758
want three columns.

42
00:01:55.758 --> 00:02:00.630
So in a sense, this could be easier to do
with grid than it would be with Flexbox.

43
00:02:00.630 --> 00:02:03.949
Because with Flexbox, you'd have to
select the parent and the children to set

44
00:02:03.949 --> 00:02:06.776
the right size on the children to
get it to always be three columns.

45
00:02:06.776 --> 00:02:12.418
So in a situation like this, you might say
that this should always be three columns.

46
00:02:12.418 --> 00:02:16.515
Or maybe if I only had two, it should be
two, or if I had four, it should be four.

47
00:02:16.515 --> 00:02:17.179
And it depends a little bit.

48
00:02:17.179 --> 00:02:20.567
It's a little bit ambiguous
in this situation.

49
00:02:20.567 --> 00:02:23.513
And if I added another card here,
if I'd want it to go down here, and

50
00:02:23.513 --> 00:02:25.942
if I added another one and
it goes here, or you get six and

51
00:02:25.942 --> 00:02:29.193
they all go next to each other, then I
know that it would be three columns.

52
00:02:29.193 --> 00:02:31.251
In this case,
we just have a decision to make.

53
00:02:31.251 --> 00:02:32.523
Which approach do we want?

54
00:02:32.523 --> 00:02:34.332
Should it just be generic columns?

55
00:02:34.332 --> 00:02:36.092
Should it always be three columns?

56
00:02:36.092 --> 00:02:39.241
It depends on how you see it,
how you envision it, and I don't think.

57
00:02:39.241 --> 00:02:40.915
There's a wrong answer.

58
00:02:40.915 --> 00:02:43.519
It's just different approaches and

59
00:02:43.519 --> 00:02:48.814
different things that you can throw at
it that are going to get the job done.

60
00:02:48.814 --> 00:02:53.069
Another option that you can use is
something where this is the flex version

61
00:02:53.069 --> 00:02:57.391
and this version are actually very
similar to each other, using grid, but

62
00:02:57.391 --> 00:02:59.400
changing the auto flow to column.

63
00:02:59.400 --> 00:03:02.893
Just means it's using grid instead of
Flexbox, but everything will be a column.

64
00:03:02.893 --> 00:03:06.030
You'll run into the same type of overflow
issues, but there's no wrapping.

65
00:03:06.030 --> 00:03:10.526
So it doesn't necessarily
mean you'd wanna do this,

66
00:03:10.526 --> 00:03:14.348
but it's another option
that you could have.

67
00:03:14.348 --> 00:03:15.382
There's looking at these.

68
00:03:15.382 --> 00:03:16.073
There's different options.

69
00:03:16.073 --> 00:03:19.585
We have Flexbox and grid, because we
have two layout tools, and two layout

70
00:03:19.585 --> 00:03:23.150
tools is always a fun thing to explain to
people of why we need two of them, but

71
00:03:23.150 --> 00:03:25.198
each one is really good at certain things.

72
00:03:25.198 --> 00:03:30.698
And we do want to try and
lean into these strengths of each one.

73
00:03:30.698 --> 00:03:35.133
And I tend to be someone that uses
grid a lot more than I use Flexbox.

74
00:03:35.133 --> 00:03:40.299
Flexbox is fantastic at things like
the navigation that we just created.

75
00:03:40.299 --> 00:03:43.912
Because each one of these columns,
they're technically columns,

76
00:03:43.912 --> 00:03:47.975
even though it's just text, each one
of those needs to be a different width.

77
00:03:47.975 --> 00:03:51.689
This one's really small, this one's
a lot bigger, and this one's in between.

78
00:03:51.689 --> 00:03:53.125
Flexbox just does that.

79
00:03:53.125 --> 00:03:57.579
With grid you could replicate that,
but it's a pain in the butt to do it,

80
00:03:57.579 --> 00:04:01.901
cuz by default you sort of wanna
play with pre-defined Column sizes.

81
00:04:01.901 --> 00:04:03.095
The nice thing with Grid,

82
00:04:03.095 --> 00:04:06.909
is Grid works in a way where the parent is
in complete control of what's happening.

83
00:04:06.909 --> 00:04:09.926
It doesn't matter what the content is,
you're defining the columns, and

84
00:04:09.926 --> 00:04:11.542
then the content is just living in that.

85
00:04:11.542 --> 00:04:12.768
So for most layouts,

86
00:04:12.768 --> 00:04:17.675
even though it's things where it's one
dimensional instead of two, like Flexbox,

87
00:04:17.675 --> 00:04:22.121
we just saw when we were wrapping It
was creating two-dimensional layouts.

88
00:04:22.121 --> 00:04:25.233
Both of them can do one and
two-dimensional layouts.

89
00:04:25.233 --> 00:04:30.131
So I tend to, for evenly sized
columns where I know it's set and

90
00:04:30.131 --> 00:04:34.299
forget, I tend to use grid
instead of using flexbox.

91
00:04:34.299 --> 00:04:37.434
But there's not really, especially with
the layouts we were looking at today,

92
00:04:37.434 --> 00:04:39.474
there's not a wrong choice
between the two of them.

93
00:04:39.474 --> 00:04:41.633
You could Use either one and
how we're setting things up.

94
00:04:41.633 --> 00:04:44.887
So once again, I'll let you decide
on which one you'd want to use.

95
00:04:44.887 --> 00:04:47.556
I did mention a few times now I've
been glossing over the break points.

96
00:04:47.556 --> 00:04:50.609
We do need to decide on
a break point now as well, and

97
00:04:50.609 --> 00:04:54.882
this is the big time where the break
points probably kind of important.

98
00:04:54.882 --> 00:04:58.380
And it's not always easy to know
when things should be breaking but

99
00:04:58.380 --> 00:04:59.192
we'll look and

100
00:04:59.192 --> 00:05:03.391
show you my tricks once we actually get
the layout coming together a little bit.

101
00:05:03.391 --> 00:05:06.125
And as far as the other things,
also with the gap,

102
00:05:06.125 --> 00:05:10.558
I like using custom properties for that
just like we've been using up until now,

103
00:05:10.558 --> 00:05:12.796
just to easily be able to adjust the gap.

104
00:05:12.796 --> 00:05:17.496
You will see one difference in the example
I gave here with the custom property

105
00:05:17.496 --> 00:05:22.195
versus the other locally scoped ones,
and I'll why I like doing it this way,

106
00:05:22.195 --> 00:05:23.732
as we go through things.

107
00:05:23.732 --> 00:05:28.644
And this is generally what we see now, is
actually the approach that I tend to like.

108
00:05:28.644 --> 00:05:32.874
So I'm going to leave my components now,
because this is something that is, again,

109
00:05:32.874 --> 00:05:34.717
a reusable layout that I want to use.

110
00:05:34.717 --> 00:05:38.575
And just because I want to write less
code, I see this even though we have two

111
00:05:38.575 --> 00:05:41.407
columns in one area and
three columns somewhere else.

112
00:05:41.407 --> 00:05:43.992
I always like seeing if I'm able
to do it with one class, and

113
00:05:43.992 --> 00:05:47.562
then if I run into problems with it and I
feel like I'm over engineering things, or

114
00:05:47.562 --> 00:05:50.699
I'm banging my head against the wall,
or there's too much friction.

115
00:05:50.699 --> 00:05:54.745
Okay, then I'll just create another
class and I'll do it in a simpler way.

116
00:05:54.745 --> 00:05:58.719
But for what I'm going to do here is say
I wanted the we'll call it equal columns,

117
00:05:58.719 --> 00:05:59.893
because that's what.

118
00:05:59.893 --> 00:06:03.216
What we want doesn't matter how
many there are, so equal columns.

119
00:06:03.216 --> 00:06:09.506
Just so
we know we're creating equal columns.

120
00:06:09.506 --> 00:06:12.529
And as I said, I'm gonna use
a display of grid and the gap.

121
00:06:12.529 --> 00:06:16.471
I'm gonna do a VAR grid gap.

122
00:06:16.471 --> 00:06:19.165
No, sorry, equal columns gap.

123
00:06:19.165 --> 00:06:22.261
There's a reason I named these like this,

124
00:06:22.261 --> 00:06:26.484
which is when you have locally
scoped custom properties.

125
00:06:26.484 --> 00:06:30.365
If you give them too generic of a name,
f I just called this gap,

126
00:06:30.365 --> 00:06:35.346
I might have something somewhere else
that's in a flex thing somewhere else, or

127
00:06:35.346 --> 00:06:36.751
different contexts.

128
00:06:36.751 --> 00:06:39.434
You might have different custom
properties you're using.

129
00:06:39.434 --> 00:06:41.142
And if they're very generic names,

130
00:06:41.142 --> 00:06:44.018
you could run into naming
conflicts with them really easily.

131
00:06:44.018 --> 00:06:48.307
So I like being really explicit with
the name of the custom property just so

132
00:06:48.307 --> 00:06:50.812
I don't run into conflicts along the way.

133
00:06:50.812 --> 00:06:53.896
And then, if I just do that,
we're gonna leave it like this.

134
00:06:53.896 --> 00:06:55.562
We're docking mobile first.

135
00:06:55.562 --> 00:06:58.690
So, if I just do equal columns and
I leave it like that,

136
00:06:58.690 --> 00:07:02.576
we have all of these elements here
Those three columns that we want?

137
00:07:02.576 --> 00:07:08.123
So if I come and find those after my hero,
go find that comment, three columns.

138
00:07:08.123 --> 00:07:14.188
I had that div waiting for a class,
I can say that that is equal columns.

139
00:07:14.188 --> 00:07:17.077
We don't have columns yet, but
it's going to add that little space there.

140
00:07:17.077 --> 00:07:18.403
Let's take the s off.

141
00:07:18.403 --> 00:07:19.425
Space goes away.

142
00:07:19.425 --> 00:07:24.249
Add the s the space comes in because
of the gap I have on my grid.

143
00:07:24.249 --> 00:07:28.207
And now I need to decide
when my screen gets bigger.

144
00:07:28.207 --> 00:07:33.118
At what poin should it turn from
being stacked content like it

145
00:07:33.118 --> 00:07:35.347
is now into three columns.

146
00:07:35.347 --> 00:07:38.099
And usually the way I decide this is,
first of all,

147
00:07:38.099 --> 00:07:40.598
I look to have as few
break points as possible.

148
00:07:40.598 --> 00:07:43.522
So, we already have that 760
we've been using everywhere.

149
00:07:43.522 --> 00:07:46.863
I'm gonna use a different one for
now just for demo purposes, but

150
00:07:46.863 --> 00:07:49.124
we'll find one that works for everything.

151
00:07:49.124 --> 00:07:52.580
And I'm gonna do an app media.

152
00:07:52.580 --> 00:07:53.295
We're going to make it really small for
now.

153
00:07:53.295 --> 00:08:00.543
So I'll say width greater
than 500 pixels and

154
00:08:00.543 --> 00:08:08.332
I'm gonna do grid auto Flow of column and
grid auto.

155
00:08:08.332 --> 00:08:10.488
All right, we'll leave this one off for
a minute, just so

156
00:08:10.488 --> 00:08:12.516
I can show you what the purpose
of that one is actually.

157
00:08:12.516 --> 00:08:16.173
So now you can see we get
my three columns coming in.

158
00:08:16.173 --> 00:08:21.035
So as the page is smaller, we can see
that we're getting these really narrow.

159
00:08:21.035 --> 00:08:22.995
Columns like this doesn't
really look good.

160
00:08:22.995 --> 00:08:25.595
They're like,
this is where my break point is right now.

161
00:08:25.595 --> 00:08:29.563
And it looks kind of at this stage,
they're just getting too squished.

162
00:08:29.563 --> 00:08:33.574
And this is a subjective thing,
where, if I came in and I said,

163
00:08:33.574 --> 00:08:38.219
this is now gonna be 900 instead,
and now I start making this bigger.

164
00:08:38.219 --> 00:08:41.143
Whoops, let's highlight this so
it's changing there.

165
00:08:41.143 --> 00:08:42.738
Yeah, and it's getting bigger.

166
00:08:42.738 --> 00:08:43.295
And now,

167
00:08:43.295 --> 00:08:48.182
when I look at it at 900 before that break
point comes in, they're way too wide.

168
00:08:48.182 --> 00:08:49.695
I need columns at this point.

169
00:08:49.695 --> 00:08:54.617
This shouldn't be taking up as much space
as it's getting to super subjective

170
00:08:54.617 --> 00:08:56.118
definitely right now.

171
00:08:56.118 --> 00:09:00.624
But it's one of those things
where you find something where,

172
00:09:00.624 --> 00:09:02.801
visually, it tends to work.

173
00:09:02.801 --> 00:09:08.207
You play around with it, and it's sort of
why I picked that 760 from the beginning,

174
00:09:08.207 --> 00:09:11.405
because it's sort of where
things on this design.

175
00:09:11.405 --> 00:09:15.810
Maybe we could go a little bit smaller,
but that looks like a pretty good minimum

176
00:09:15.810 --> 00:09:20.432
column size to me, that's sort of what I
try and break layout break points around.

177
00:09:20.432 --> 00:09:24.945
This 760 does not need to match the 760
here necessarily, you could have different

178
00:09:24.945 --> 00:09:28.146
ones, but I find if things start
changing at different times.

179
00:09:28.146 --> 00:09:31.185
When you're doing your testing and
you're checking different sizes,

180
00:09:31.185 --> 00:09:32.728
you end up creating more different,

181
00:09:32.728 --> 00:09:35.786
like there's a mix of different
changes happening at different times.

182
00:09:35.786 --> 00:09:40.442
It just becomes a little bit harder to
keep track of everything that's going on.

183
00:09:40.442 --> 00:09:45.096
Sometimes you'll definitely need to have
more specific numbers if you don't know

184
00:09:45.096 --> 00:09:47.697
what to go with,
this is literally how I do it.

185
00:09:47.697 --> 00:09:52.689
I eyeball it until I think it looks okay,
which might seem a little bit bizarre, but

186
00:09:52.689 --> 00:09:53.987
it's just what I do.

187
00:09:53.987 --> 00:09:57.668
There are the common breakpoints that
are out there, so tailwind has them,

188
00:09:57.668 --> 00:09:58.714
bootstrap has them.

189
00:09:58.714 --> 00:10:00.979
People like going and
looking at what they're using.

190
00:10:00.979 --> 00:10:04.788
Those are fine, they're very generic,
but they work in generic projects.

191
00:10:04.788 --> 00:10:07.181
You could start with those
as starting places, but

192
00:10:07.181 --> 00:10:09.475
just don't feel like you
need to use all of them.

193
00:10:09.475 --> 00:10:12.986
A lot of projects need one or
two break points they don't need five.

194
00:10:12.986 --> 00:10:16.756
So limiting the ones that you're
using just makes your life easier,

195
00:10:16.756 --> 00:10:19.042
because then you have less maintenance.

196
00:10:19.042 --> 00:10:22.293
If you're not changing things over and
over again, sometimes you need more,

197
00:10:22.293 --> 00:10:23.729
if you need more, you add them in.

198
00:10:23.729 --> 00:10:25.850
But if you don't need to have them,

199
00:10:25.850 --> 00:10:28.769
I would suggest not
stressing about it too much.

200
00:10:32.973 --> 00:10:36.265
&gt;&gt; Kevin Powell: I did mention that
we want one more property on this, so

201
00:10:36.265 --> 00:10:39.572
if I come and take a look here,
these are Look the same.

202
00:10:39.572 --> 00:10:41.822
They might actually be, but
I don't think they are.

203
00:10:41.822 --> 00:10:46.190
So if I open my dev tools and
I look at these three columns right now,

204
00:10:46.190 --> 00:10:50.168
if I take the little inspector guy and
I look at the size here,

205
00:10:50.168 --> 00:10:57.192
I see it's 227.11 pixels wide, 232.36,
and 236.53, so they're all very similar.

206
00:10:57.192 --> 00:10:59.331
Someone might not notice
that they're different but

207
00:10:59.331 --> 00:11:01.991
each column actually is a little
bit different from the other, and

208
00:11:01.991 --> 00:11:04.529
it's because of the content
inside of them isn't identical.

209
00:11:04.529 --> 00:11:07.542
If you had the exact same content,
you would get the exact same spacing.

210
00:11:07.542 --> 00:11:10.558
Flexbox is exactly the same way,
if you throw a display flex,

211
00:11:10.558 --> 00:11:12.770
they might look very
similar to one another.

212
00:11:12.770 --> 00:11:16.767
They're not going to be,
which is why often with flexbox, if you're

213
00:11:16.767 --> 00:11:21.392
doing this type of thing, or if you decide
to go with a flexbox approach instead.

214
00:11:21.392 --> 00:11:26.885
Let's just say flex equal columns and
you do a display flex often

215
00:11:26.885 --> 00:11:32.785
what you actually need to do is then
select all the direct children and

216
00:11:32.785 --> 00:11:37.686
do a flex one,
that's one of the options that you can do.

217
00:11:37.686 --> 00:11:41.053
The reason this works is because
flex one sets the same width on

218
00:11:41.053 --> 00:11:42.230
all of the children.

219
00:11:42.230 --> 00:11:45.105
So you're just saying all
the children have it's kind of,

220
00:11:45.105 --> 00:11:48.495
I think it's all with zero, and
then the grow comes on it but the key for

221
00:11:48.495 --> 00:11:52.313
that working is you're telling all
the flex children they're the same size.

222
00:11:52.313 --> 00:11:56.752
So then when they go into their columns,
they actually end up being equally spaced,

223
00:11:56.752 --> 00:11:57.760
completely fine.

224
00:11:57.760 --> 00:12:03.843
You'd also want a media query to
switch your flex direction, or

225
00:12:03.843 --> 00:12:09.149
I can come on this one and
do a grid auto columns of one fr.

226
00:12:09.149 --> 00:12:13.586
So I'm just saying all of
the columns are the same size and

227
00:12:13.586 --> 00:12:15.624
we can get rid of all this.

228
00:12:15.624 --> 00:12:21.957
I'll leave it there just for reference if
anyone's doing a flexbox version of And

229
00:12:21.957 --> 00:12:26.451
now if I come take a look at
these three columns, 232 and

230
00:12:26.451 --> 00:12:29.695
232, they're all the same size now.

231
00:12:29.695 --> 00:12:33.071
Using either flexbox or grid,
if these columns get too small,

232
00:12:33.071 --> 00:12:36.384
it will adapt because if it's
really getting crunched down,

233
00:12:36.384 --> 00:12:40.353
it's gonna look at the content,
it's gonna try and prevent overflows.

234
00:12:40.353 --> 00:12:42.916
And so
then there can be discrepancies still, but

235
00:12:42.916 --> 00:12:46.882
it's only if you're really crunching
those columns down at regular sizes,

236
00:12:46.882 --> 00:12:50.013
you shouldn't run into any issues or
any inconsistencies.

237
00:12:50.013 --> 00:12:54.411
The reason that I do like using grid
over flexbox is just, I like controlling

238
00:12:54.411 --> 00:12:58.825
everything through the parent rather
than having to do stuff on the parent.

239
00:12:58.825 --> 00:13:02.342
And then have to go on the children and
play around with them in a layout like

240
00:13:02.342 --> 00:13:04.864
this, I wouldn't say one
is better than the other.

241
00:13:04.864 --> 00:13:09.239
Just go with the one that you think is the
more if you're used to using flexbox and

242
00:13:09.239 --> 00:13:11.412
it's the more natural choice for you.

243
00:13:11.412 --> 00:13:16.419
In a layout like this, you just switch
the flex direction, or we change the grid

244
00:13:16.419 --> 00:13:21.225
auto flow from going from column to grid,
yeah, they both work quite well.

245
00:13:21.225 --> 00:13:25.423
Now I did mention the gap that's on here,
and one of the reasons I talked about

246
00:13:25.423 --> 00:13:28.794
the gap being here and
wanting to have it as a custom property.

247
00:13:28.794 --> 00:13:31.510
Is because if I come on this,
and I take a look here,

248
00:13:31.510 --> 00:13:35.633
I have a gap on those that I think it's
16, maybe it's a little bit bigger.

249
00:13:35.633 --> 00:13:38.952
And then if we come take a look at this
one, it's a lot bigger, so Ideally,

250
00:13:38.952 --> 00:13:40.906
because I'm just creating equal columns,

251
00:13:40.906 --> 00:13:43.253
and in every situation
here they're always equal.

252
00:13:43.253 --> 00:13:47.657
Ideally I can just reuse this whether
it's two columns or three columns.

253
00:13:47.657 --> 00:13:52.527
So if I take that and
I come down here to this next section,

254
00:13:52.527 --> 00:13:56.187
which would be right there, two columns.

255
00:13:56.187 --> 00:14:00.519
I have my wrapper, so it would be on
this div I can make two columns, and

256
00:14:00.519 --> 00:14:02.808
I should let's close the dev tools.

257
00:14:02.808 --> 00:14:06.919
Hopefully we can get our
break point right there, and

258
00:14:06.919 --> 00:14:11.591
I get my two columns coming in,
but I need my gap to be bigger.

259
00:14:11.591 --> 00:14:15.459
So to get the gap to be bigger,
the easiest way to do that is

260
00:14:15.459 --> 00:14:19.336
to modify the gap here so
once again, we need a modifier.

261
00:14:19.336 --> 00:14:22.150
Of some sort or
you have a different class.

262
00:14:22.150 --> 00:14:24.615
Your two column class could
just be the wider columns and

263
00:14:24.615 --> 00:14:26.830
your three column one
could be narrower columns.

264
00:14:26.830 --> 00:14:31.064
It's up to you, but again, I like trying
to come in and do it all with one.

265
00:14:31.064 --> 00:14:35.831
So I could just come here and say,

266
00:14:35.831 --> 00:14:39.759
data gap is equal to large.

267
00:14:39.759 --> 00:14:43.225
And in the instructions too, there's
an example with the data gap of zero,

268
00:14:43.225 --> 00:14:44.757
sometimes you might need no gap.

269
00:14:44.757 --> 00:14:48.961
So you can have a data gap of no gap or
zero, or whatever you want.

270
00:14:48.961 --> 00:14:54.073
And then I could say, this is,

271
00:14:54.073 --> 00:15:01.556
oops, the equal column gap, goes to 2rem.

272
00:15:01.556 --> 00:15:05.498
Let me just, well, sorry,
I'll go to here and I'll add it, and

273
00:15:05.498 --> 00:15:10.036
then I'll make the code a bit bigger so
we can see, or let's do it this way.

274
00:15:10.036 --> 00:15:17.464
Equal-columns, data-column-gap ="large",

275
00:15:17.464 --> 00:15:21.988
and we should see the gap change.

276
00:15:21.988 --> 00:15:26.478
Let's see if I did that correctly,
is not defined so it falls back to there.

277
00:15:26.478 --> 00:15:29.254
&gt;&gt; Speaker 2: I was like, is it just
data gap and not data column yet?

278
00:15:29.254 --> 00:15:29.999
&gt;&gt; Kevin Powell: Thank you.

279
00:15:35.581 --> 00:15:37.929
&gt;&gt; Kevin Powell: Data gap and
what did I do here?

280
00:15:41.472 --> 00:15:44.562
&gt;&gt; Kevin Powell: Data, thank you.

281
00:15:44.562 --> 00:15:53.438
Data gap large should give us,
&gt;&gt; Kevin Powell: The larger one,

282
00:15:53.438 --> 00:15:54.643
which it still not doing.

283
00:15:54.643 --> 00:15:58.261
Data gap equals large equal columns.

284
00:15:58.261 --> 00:15:59.920
Data gap is large.

285
00:16:03.679 --> 00:16:08.456
&gt;&gt; Kevin Powell: --equal-columns,
data-gap is large.

286
00:16:08.456 --> 00:16:12.785
One more thing, we'll double check.

287
00:16:12.785 --> 00:16:20.248
Columns and column, equal-columns,
S, save, there we go.

288
00:16:20.248 --> 00:16:22.252
Consistency is key, I apologize for that.

289
00:16:22.252 --> 00:16:25.944
There we go, we can already see the gap
is bigger this way and then when I get to

290
00:16:25.944 --> 00:16:29.026
the larger screen sizes,
we get the larger gap coming in here.

291
00:16:29.026 --> 00:16:31.508
And of course, I'm doing that at 2rem.

292
00:16:31.508 --> 00:16:34.760
So if I did that at 5rem instead,
they get the bigger gap coming in.

293
00:16:42.906 --> 00:16:45.563
&gt;&gt; Kevin Powell: This is one of the
reasons that I like using data attributes.

294
00:16:45.563 --> 00:16:48.021
You just got to be good
with the names of them.

295
00:16:48.021 --> 00:16:51.708
The other thing that comes in with these
is we need one more modifier for them.

296
00:16:51.708 --> 00:16:56.587
Because if we look here at the way
they're centered, these two,

297
00:16:56.587 --> 00:16:59.706
they're vertically centered this way.

298
00:16:59.706 --> 00:17:03.671
If I were to change it on this one,
we probably wouldn't actually see a change

299
00:17:03.671 --> 00:17:06.235
cuz all of them are gonna
be equal heights anyway.

300
00:17:06.235 --> 00:17:10.054
But having the default to stretch
is probably a good idea, but

301
00:17:10.054 --> 00:17:13.884
it does open up the possibility
of having alternatives here.

302
00:17:13.884 --> 00:17:17.381
So, I could come here and just come in.

303
00:17:17.381 --> 00:17:21.066
I like having it down here.

304
00:17:21.066 --> 00:17:24.041
And this is where you start creating
these more robust components,

305
00:17:24.041 --> 00:17:27.274
where you can plug and play them and
use the same thing in different ways and

306
00:17:27.274 --> 00:17:28.808
just modify how you're using it.

307
00:17:28.808 --> 00:17:33.650
So I could do an align-items

308
00:17:33.650 --> 00:17:37.885
of var, align, sorry,

309
00:17:37.885 --> 00:17:43.952
--equal-columns-aligment.

310
00:17:43.952 --> 00:17:46.427
We could do a vertical, go on vertical,
we'll do a really long.

311
00:17:46.427 --> 00:17:49.766
Vertical alignment, and let's just
full screen it so we can see it all,

312
00:17:49.766 --> 00:17:52.035
--equal-columns-vertical-alignment.

313
00:17:52.035 --> 00:17:55.632
If we don't have one,
it will be stretch as a default,

314
00:17:55.632 --> 00:18:00.266
which you don't actually have to
put if you're leaving it like that.

315
00:18:00.266 --> 00:18:03.154
And then I could create a data
attribute or a modifier class,

316
00:18:03.154 --> 00:18:06.225
if you're using modifier classes,
which is completely fine.

317
00:18:06.225 --> 00:18:09.206
And I could do a data alignment,
doesn't have to be the same.

318
00:18:09.206 --> 00:18:11.495
We can keep that one shorter so
it's easier.

319
00:18:11.495 --> 00:18:16.535
Or it could be vertical alignment,
and we could say that one is centered.

320
00:18:16.535 --> 00:18:21.884
And if I do that, and then that would
just be my, let's copy and paste it.

321
00:18:21.884 --> 00:18:24.730
It'd be a little bit faster,
cuz I made it really long.

322
00:18:28.540 --> 00:18:32.597
&gt;&gt; Kevin Powell: Would
be center like that.

323
00:18:32.597 --> 00:18:36.097
So now, if I want something
that's vertically centered,

324
00:18:36.097 --> 00:18:38.274
it's easy enough to come on to here.

325
00:18:38.274 --> 00:18:44.339
And this is where I again,
sort of using the data attributes,

326
00:18:44.339 --> 00:18:48.785
cuz then data-alignment="centered".

327
00:18:48.785 --> 00:18:50.452
And then so when I look at this,
I see I have equal columns.

328
00:18:50.452 --> 00:18:54.508
I see my gap is large, and
I see my alignment is centered.

329
00:18:54.508 --> 00:18:57.134
It just sort of separates these
different things that are happening.

330
00:18:57.134 --> 00:19:01.557
And in that sense, I like how that works.

331
00:19:01.557 --> 00:19:06.003
So if we go and take a look,
now we can right away see that

332
00:19:06.003 --> 00:19:10.764
image is coming in and
it's being centered there as well.

333
00:19:10.764 --> 00:19:16.704
So, if we come down now to the next one,
we have our two columns there,

334
00:19:16.704 --> 00:19:21.469
so I can come in with that
class="equal-columns".

335
00:19:21.469 --> 00:19:26.364
The data-gap="large", and

336
00:19:26.364 --> 00:19:32.317
the data-alignment="centered".

337
00:19:32.317 --> 00:19:36.160
And if I scroll down, I can see that's
working on that one as well now.

338
00:19:36.160 --> 00:19:38.975
So these nice,
quick wins as we're going through.

339
00:19:38.975 --> 00:19:43.238
And it just becomes this thing where I can
use it to create equal columns anywhere I

340
00:19:43.238 --> 00:19:47.768
want instead of having any of three column
here, two column here, five column here.

341
00:19:47.768 --> 00:19:51.653
Sometimes you'll have all equal columns
then you come up with a new class name.

342
00:19:51.653 --> 00:19:55.114
But as long as the breakpoint works,
and as long as the alignment works,

343
00:19:55.114 --> 00:19:57.010
you can tweak the alignment actually.

344
00:19:57.010 --> 00:20:00.983
And I'm only doing this right now
with my gap and with my alignment.

345
00:20:00.983 --> 00:20:02.850
But you might find as
you're using these things,

346
00:20:02.850 --> 00:20:04.416
there's other pieces you wanna change.

347
00:20:04.416 --> 00:20:06.207
And just by coming in and
creating modifiers and

348
00:20:06.207 --> 00:20:07.649
doing it with the custom properties.

349
00:20:07.649 --> 00:20:10.774
It just creates this one encapsulated
thing that becomes much more robust and

350
00:20:10.774 --> 00:20:12.273
reusable in different situations.

