WEBVTT

1
00:00:00.000 --> 00:00:00.679
&gt;&gt; Kevin Powell: All right, so

2
00:00:00.679 --> 00:00:03.113
with everything we've done
up until now in place,

3
00:00:03.113 --> 00:00:06.863
the next thing that we wanna start doing
is looking a little bit more at layout.

4
00:00:06.863 --> 00:00:10.844
Everything we've done until now has
to work across all screen sizes, so

5
00:00:10.844 --> 00:00:15.031
we haven't had to think too much about
everything that we've needed to do.

6
00:00:15.031 --> 00:00:18.583
Whereas now we're gonna start coming into
we need columns, we need other things, and

7
00:00:18.583 --> 00:00:21.521
we need to decide if we're doing
it mobile-first, desktop-first.

8
00:00:21.521 --> 00:00:24.901
How we're approaching things to
make these types of decisions.

9
00:00:24.901 --> 00:00:29.112
Though, I do wanna say,
I do think this whole debate thing,

10
00:00:29.112 --> 00:00:32.181
most people I think do lean mobile-first.

11
00:00:32.181 --> 00:00:35.197
There's some people out there
who will always be like,

12
00:00:35.197 --> 00:00:39.126
I only do desktop applications that
are for enterprise so I don't care.

13
00:00:39.126 --> 00:00:42.538
And I'm like, well that's great,
then it is a case by case basis.

14
00:00:42.538 --> 00:00:46.534
The thing that I usually try and
advocate for is taking the path of

15
00:00:46.534 --> 00:00:51.270
least resistance, which is just do the one
that means you write less code and

16
00:00:51.270 --> 00:00:53.794
it's gonna be a lot easier to maintain.

17
00:00:53.794 --> 00:00:56.687
One example that I like to
give is just doing columns,

18
00:00:56.687 --> 00:01:00.416
say you're using display grid,
if I did it mobile first, I can say,

19
00:01:00.416 --> 00:01:04.816
display grid, put a gap, and then I just
add the columns at a larger screen size.

20
00:01:04.816 --> 00:01:08.517
If I did the same thing with desktop,
first, I'm setting up the grid,

21
00:01:08.517 --> 00:01:12.650
I'm doing the gap, I'm doing the columns,
and then I have to change my columns

22
00:01:12.650 --> 00:01:15.697
again to go back to what
the default behavior already was.

23
00:01:15.697 --> 00:01:20.630
That just always seems a bit awkward to me
when I need to use a media query to put

24
00:01:20.630 --> 00:01:24.270
things back to where they
were before I wrote anything.

25
00:01:24.270 --> 00:01:27.486
The other example I give for
this is Mobile navigations,

26
00:01:27.486 --> 00:01:32.377
which we're gonna be eventually getting to
where it doesn't really, it's the one or

27
00:01:32.377 --> 00:01:35.861
one of the few cases where a mobile
navigation is actually a lot

28
00:01:35.861 --> 00:01:38.357
more complicated at smaller screen sizes.

29
00:01:38.357 --> 00:01:41.368
And if you were to do a mobile first for
your mobileNAV, and

30
00:01:41.368 --> 00:01:44.442
then you have to come in with
the desktopNAV to simplify it,

31
00:01:44.442 --> 00:01:48.644
you're writing a lot of code to go back to
the starting code that you already had.

32
00:01:48.644 --> 00:01:52.944
So that's one of those times where maybe
you go, well actually it makes more sense

33
00:01:52.944 --> 00:01:56.012
to use a max width media query or
a desktop first approach.

34
00:01:56.012 --> 00:01:58.644
Before you choose any of those,
though, one thing, or

35
00:01:58.644 --> 00:02:01.948
we'll talk about break points too,
but one thing I would talk about,

36
00:02:01.948 --> 00:02:04.492
I like to talk about is
the idea of intrinsic layouts.

37
00:02:04.492 --> 00:02:07.907
This is a term that was coined by Jen
Simmons, which is when you're not worried

38
00:02:07.907 --> 00:02:11.168
about the media query at all, you're
letting the browser figure it out for

39
00:02:11.168 --> 00:02:13.848
you based on different information
that you're giving it.

40
00:02:13.848 --> 00:02:18.142
So one example of that is when using Grid,
if you're using the autofit syntax,

41
00:02:18.142 --> 00:02:21.540
which we're gonna have to use for
our second page eventually,

42
00:02:21.540 --> 00:02:24.127
where the browser figures
it out all on its own.

43
00:02:24.127 --> 00:02:27.347
We don't actually have to do
anything along the way for that.

44
00:02:27.347 --> 00:02:28.818
We're gonna see this later on, so

45
00:02:28.818 --> 00:02:32.079
we'll talk more about that when we get
to those stages of building that out.

46
00:02:32.079 --> 00:02:36.930
But our navigation is actually one area
where we could come in with a nice,

47
00:02:36.930 --> 00:02:41.251
intrinsic layout without having
to worry about things too much.

48
00:02:41.251 --> 00:02:44.403
We will eventually do it in
a bit of a fancier way, but

49
00:02:44.403 --> 00:02:47.284
I'm actually a big fan of
not having to do that.

50
00:02:47.284 --> 00:02:51.508
I just included it in this project cuz I
know it's something that most people do

51
00:02:51.508 --> 00:02:54.458
need to actually implement
in real-world projects.

52
00:02:54.458 --> 00:02:58.463
But if we come and
take a look at our navigation at the top,

53
00:02:58.463 --> 00:03:01.730
let's go look at the markup
that we had for it.

54
00:03:01.730 --> 00:03:05.616
Use my mini-map here to go all the way up,
I'm gonna turn off Word Wrap.

55
00:03:05.616 --> 00:03:09.035
Just so we can look at the structure of
it, I'm not worried about the content.

56
00:03:09.035 --> 00:03:13.015
I have a site header, I have a wrapper,
and then I have an image and a NAV,

57
00:03:13.015 --> 00:03:17.020
UL doesn't really matter too much,
we'll look at that in a little bit.

58
00:03:17.020 --> 00:03:21.116
But we basically have this wrapper, and
then we have this NAV in this image,

59
00:03:21.116 --> 00:03:24.585
I need to separate them and
I need them to be in separate columns.

60
00:03:24.585 --> 00:03:28.977
So I need to have some sort of layout
here, you could come on your wrapper and

61
00:03:28.977 --> 00:03:32.902
do something, whether it's flex or
grid on something like this.

62
00:03:32.902 --> 00:03:37.742
I tend to, and a very common pattern
with headers cuz headers often have

63
00:03:37.742 --> 00:03:41.131
this header and
then inside the header you have and

64
00:03:41.131 --> 00:03:45.264
then you have a layout in there
is coming in with another div.

65
00:03:45.264 --> 00:03:49.009
And I'm gonna call it site-header-inner,

66
00:03:49.009 --> 00:03:53.622
and I talked about not being
a BEM person as much anymore.

67
00:03:53.622 --> 00:03:58.367
This is one of those cases where I still
use the BEM naming pattern of the double

68
00:03:58.367 --> 00:03:59.245
underscore.

69
00:03:59.245 --> 00:04:07.162
Just to say when something is meant to be
used inside of something else, basically.

70
00:04:07.162 --> 00:04:13.254
The idea with them is it's the block,
it's like an inner block element modifier.

71
00:04:13.254 --> 00:04:17.056
It's an inner element to the site
header block is sort of how they do it.

72
00:04:17.056 --> 00:04:20.430
It's to say that this only
use case the only time you

73
00:04:20.430 --> 00:04:22.954
should be using it is if it's in here.

74
00:04:22.954 --> 00:04:27.734
I don't use a data attribute, or anything
like that, cuz the connection doesn't seem

75
00:04:27.734 --> 00:04:31.043
to be there for me,
I feel like it still makes sense this way.

76
00:04:31.043 --> 00:04:36.743
This is a place where you could just
do a site-header-inner if you prefer,

77
00:04:36.743 --> 00:04:39.247
there's no harm in having that.

78
00:04:39.247 --> 00:04:44.392
The advantage of using the double for
modifier classes and the double underscore

79
00:04:44.392 --> 00:04:49.775
for saying that it belongs in something is
it just creates like a visual separation.

80
00:04:49.775 --> 00:04:51.896
You have the name of the thing here and

81
00:04:51.896 --> 00:04:55.741
then the extra bit of information
coming after it separates them.

82
00:04:55.741 --> 00:04:58.082
So, when you're scanning
through something,

83
00:04:58.082 --> 00:04:59.975
it's easier to tell what it's doing.

84
00:04:59.975 --> 00:05:03.320
So I'm gonna go with that approach, but
if you prefer a different name, you can.

85
00:05:03.320 --> 00:05:07.149
But I really do think I don't want it
necessarily on my wrapper, even though,

86
00:05:07.149 --> 00:05:10.355
at the end of the day, it wouldn't
cause any harm if it was there.

87
00:05:10.355 --> 00:05:15.251
I just like separating those concerns
between what those two divs are doing.

88
00:05:15.251 --> 00:05:18.320
I know people don't like having
too many divs on something,

89
00:05:18.320 --> 00:05:20.617
but I don't think it
causes any issues here.

90
00:05:20.617 --> 00:05:24.917
The other thing I need to think about now,
actually, because we were working on our

91
00:05:24.917 --> 00:05:28.727
site header, and we're gonna be getting
into more pieces along the way,

92
00:05:28.727 --> 00:05:30.213
is the site header a layout.

93
00:05:30.213 --> 00:05:31.806
Even though like and actually,

94
00:05:31.806 --> 00:05:35.700
we could even call this site header layout
if you wanted to, instead of inner,

95
00:05:35.700 --> 00:05:39.434
just to be more clear, I use inner
because it's is what I've always used.

96
00:05:39.434 --> 00:05:44.554
But if you like layout, because creating
a layout that works, so because it is

97
00:05:44.554 --> 00:05:49.521
something where we're controlling
a layout, the first thought would be,

98
00:05:49.521 --> 00:05:53.416
let's put it in my layouts layer,
because it's a layout.

99
00:05:53.416 --> 00:05:57.852
But as much as possible, I like using
my layouts layer for generic layouts,

100
00:05:57.852 --> 00:06:02.099
these are things I could just Plug and
Play and use absolutely anywhere.

101
00:06:02.099 --> 00:06:05.382
Whereas if it's something that's
specific for one use case and

102
00:06:05.382 --> 00:06:07.629
it should only be used
within this one area,

103
00:06:07.629 --> 00:06:11.004
that's where I like actually coming in and
creating a new layer.

104
00:06:11.004 --> 00:06:14.820
So we'll come in here,
I'm gonna collapse the base one again,

105
00:06:14.820 --> 00:06:18.221
just to clean things up a little bit,
collapse them all.

106
00:06:18.221 --> 00:06:21.120
And After my layout, but
before my utilities,

107
00:06:21.120 --> 00:06:26.121
cuz I like having my utilities as the last
layer to give it the highest importance,

108
00:06:26.121 --> 00:06:30.852
is to do a layer of components, which
are just sort of these one-off pieces.

109
00:06:30.852 --> 00:06:34.899
This is my site header, I'm only doing
site header stuff, or it's my site footer,

110
00:06:34.899 --> 00:06:37.535
or it's gonna be the card,
or other things like that.

111
00:06:37.535 --> 00:06:41.532
And so I can do my site Header, I don't
know if I need to style anything on that

112
00:06:41.532 --> 00:06:45.728
right now, so I'm not gonna put that
selector, we might need to have it after.

113
00:06:45.728 --> 00:06:50.137
We probably will, but
I'm just gonna do the inner right there,

114
00:06:50.137 --> 00:06:53.893
throw display flex on here,
so we get two columns, and

115
00:06:53.893 --> 00:06:58.241
you can see right away that
they're going next to one another.

116
00:06:58.241 --> 00:07:01.096
And then I can do, a justify content,

117
00:07:01.096 --> 00:07:06.093
ooops just defy content of space
between if you get mixed up between

118
00:07:06.093 --> 00:07:11.291
the different spacing things or
even justify versus the line items.

119
00:07:11.291 --> 00:07:15.334
It's the same as a lot of
beginners when very early days,

120
00:07:15.334 --> 00:07:20.135
when using margin and padding,
it's easy to mix them up, try one,

121
00:07:20.135 --> 00:07:23.351
if it's the wrong one,
you do the other one.

122
00:07:23.351 --> 00:07:28.279
It's easy enough to switch between
stuff as you're learning them, but

123
00:07:28.279 --> 00:07:33.798
I want the space between so it pushes them
as far apart, as far apart as possible.

124
00:07:33.798 --> 00:07:36.614
Then we could do the same
thing inside there, just for

125
00:07:36.614 --> 00:07:39.758
our navigation,
I think everybody's used to doing that.

126
00:07:39.758 --> 00:07:46.110
So on my NAV,
I have my UL that's in there, so

127
00:07:46.110 --> 00:07:51.310
I can select my primary navigation.

128
00:07:51.310 --> 00:07:53.817
And in this case,
I'm just gonna use nesting,

129
00:07:53.817 --> 00:07:57.213
cuz I find it a little bit easier
if you prefer not to use nesting.

130
00:07:57.213 --> 00:08:01.404
This selector could just be your

131
00:08:01.404 --> 00:08:06.526
primary navigation UL like that, so,

132
00:08:06.526 --> 00:08:12.115
primary navigation UL and
I can do a display

133
00:08:12.115 --> 00:08:17.407
flex gap 1 rem and that comes together.

134
00:08:17.407 --> 00:08:21.456
And Flexbox is really awesome,
I made a bobo there, there we go,

135
00:08:21.456 --> 00:08:25.889
Flexbox is really awesome because it
just stuff happens when we use it.

136
00:08:25.889 --> 00:08:30.174
Everything's going next to each other,
it looks really good, the problem with

137
00:08:30.174 --> 00:08:33.775
Flexbox is it sort of tricks us
into looking like it's responsive.

138
00:08:33.775 --> 00:08:37.445
But what happens is when you get to these
smaller screen sizes it just causes

139
00:08:37.445 --> 00:08:39.427
overflow, because the elements flex,

140
00:08:39.427 --> 00:08:42.649
they go next to one another,
they don't do anything from there.

141
00:08:42.649 --> 00:08:46.903
And then we feel like we need to come in
with media queries or come in with other

142
00:08:46.903 --> 00:08:51.030
solutions, but as much as possible,
talking about intrinsic layouts.

143
00:08:51.030 --> 00:08:55.370
So the idea here is, with your flex,

144
00:08:55.370 --> 00:08:59.013
we can do a flex wrap, on that.

145
00:08:59.013 --> 00:09:03.101
So now, when this runs out of room,
instead of getting stuck there,

146
00:09:03.101 --> 00:09:05.296
it's gonna wrap and go underneath.

147
00:09:05.296 --> 00:09:06.744
And it's really, really simple,

148
00:09:06.744 --> 00:09:08.970
the one thing is they do get
really close to each other.

149
00:09:08.970 --> 00:09:12.734
So you could also put in a gap here,
whatever space you feel like is

150
00:09:12.734 --> 00:09:17.252
appropriate just so it wraps before they
actually touch each other cuz it looks

151
00:09:17.252 --> 00:09:20.208
kind Kind of ugly if they're
touching each other.

152
00:09:20.208 --> 00:09:24.346
And just like that, we have something
that works across different screen sizes

153
00:09:24.346 --> 00:09:28.312
without having to come in with a media
query, decide where a break point is.

154
00:09:28.312 --> 00:09:29.467
Stress about any of that,

155
00:09:29.467 --> 00:09:32.577
the browser just figures it out
based on the space that's available.

156
00:09:32.577 --> 00:09:37.420
I would actually argue putting the flex
wrap on the UL is also a good thing.

157
00:09:37.420 --> 00:09:45.016
Just so if ever those once that wraps
like here, these can also wrap as well.

158
00:09:45.016 --> 00:09:48.782
Hopefully, nobody of your users
is on a screen this narrow, but

159
00:09:48.782 --> 00:09:52.895
it just makes it a bit more robust and
you don't have to worry about it,

160
00:09:52.895 --> 00:09:54.734
which is always really handy.

161
00:09:54.734 --> 00:09:59.261
The other thing I'll say with wrap,
if you're using it, is when things wrap,

162
00:09:59.261 --> 00:10:03.047
the visual spacing looks different
when it's between the rows and

163
00:10:03.047 --> 00:10:04.348
between the columns.

164
00:10:04.348 --> 00:10:07.815
So the visual space between discover and
mushroom guide looks pretty narrow

165
00:10:07.815 --> 00:10:10.696
compared to the visual space
between the discover and the FAQ.

166
00:10:10.696 --> 00:10:13.071
Even though it's actually
the same amount of space,

167
00:10:13.071 --> 00:10:16.466
it's using the gap of one REM part of
that's just how font rendering works.

168
00:10:16.466 --> 00:10:19.391
Cuz there's often a little bit
of extra space on the top and

169
00:10:19.391 --> 00:10:20.714
on the bottom of the funs.

170
00:10:20.714 --> 00:10:22.809
And there's trick of the eyes
things that just happened, so

171
00:10:22.809 --> 00:10:23.972
the combination of both of them.

172
00:10:23.972 --> 00:10:28.191
The spacing always looks a little bigger,
so usually or

173
00:10:28.191 --> 00:10:33.233
use the short hand here 0.5 maybe
the same thing here o.5 rem.

174
00:10:33.233 --> 00:10:36.906
So to be 0.5 rem on the top and
the bottom and then 1 rem on the left and

175
00:10:36.906 --> 00:10:39.916
the right just officially to
look more balanced though.

176
00:10:39.916 --> 00:10:42.524
Not something you need to do but
most of the time when I

177
00:10:42.524 --> 00:10:46.460
have wrapping I do find I have the top and
bottom wrapping end up being smaller.

178
00:10:46.460 --> 00:10:49.065
The only exception to this
was if it's not text.

179
00:10:49.065 --> 00:10:52.381
If it's things that have background
colors and padding on them,

180
00:10:52.381 --> 00:10:55.289
then you'd want consistent
spacing all the way around.

181
00:10:55.289 --> 00:10:59.781
But it gives us a nice mobile navigation
without having to stress about it or

182
00:10:59.781 --> 00:11:03.845
do anything and use my personal side
its so much lower friction and so

183
00:11:03.845 --> 00:11:06.363
much less work to get something working.

184
00:11:06.363 --> 00:11:09.723
The last thing I will do,
is just do very quickly,

185
00:11:09.723 --> 00:11:12.525
I said we probably needed, side header.

186
00:11:12.525 --> 00:11:15.338
You can even do this on the inner but

187
00:11:15.338 --> 00:11:20.480
budding lack on rem to add some
just to make sure it does not touch

188
00:11:20.480 --> 00:11:26.229
the top of our screen to give us some
little space on the bottom as well.

189
00:11:26.229 --> 00:11:29.949
And we can close the dev tools,
and there we go,

190
00:11:29.949 --> 00:11:35.727
we have a responsive navigation,
intrinsic layout where it just works.

