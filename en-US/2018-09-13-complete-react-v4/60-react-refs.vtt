WEBVTT

1
00:00:00.000 --> 00:00:03.921
&gt;&gt; Brian Holt: You more or
less understand all the features.

2
00:00:03.921 --> 00:00:07.205
There are some advanced features on refs,

3
00:00:07.205 --> 00:00:11.138
which I will give you the 30
second spiel on refs.

4
00:00:11.138 --> 00:00:13.470
For the most part,
you should never have to really use refs,

5
00:00:13.470 --> 00:00:16.643
unless you're integrating with D3 or
a jQuery plugin, or something like that.

6
00:00:16.643 --> 00:00:19.185
But for the most part,
you shouldn't need them.

7
00:00:24.263 --> 00:00:28.830
&gt;&gt; Brian Holt: So just to give you like
the briefest of introductions to refs.

8
00:00:29.990 --> 00:00:33.090
Let's say I was integrating
with jQuery and

9
00:00:33.090 --> 00:00:35.980
I needed to have like a handle
on this h1 here, right?

10
00:00:35.980 --> 00:00:40.275
I can't just query the DOM normally
because these elements are constantly

11
00:00:40.275 --> 00:00:43.830
being destroyed and recreated and
destroyed and recreated.

12
00:00:43.830 --> 00:00:46.780
So if I query it once,
it's gonna change later.

13
00:00:46.780 --> 00:00:51.001
So you need to have React give you
a handle to one of these things.

14
00:00:51.001 --> 00:00:55.947
So you can do a ref here,
and what you do is you just

15
00:00:55.947 --> 00:01:00.292
give it a little function that says, hey,

16
00:01:00.292 --> 00:01:05.121
call this this.h1 or
something like that, or

17
00:01:05.121 --> 00:01:12.960
myh1 = el like this,
&gt;&gt; Brian Holt: Okay?

18
00:01:12.960 --> 00:01:20.501
And now if I say console.log(this.el)
up here, or this.myH1.

19
00:01:23.759 --> 00:01:28.880
&gt;&gt; Brian Holt: If you look over here,
it actually gives me that H1 there.

20
00:01:28.880 --> 00:01:30.100
So that's what refs are for.

21
00:01:30.100 --> 00:01:34.020
If you actually need to reference some
sort of DOM element that's inside of your

22
00:01:34.020 --> 00:01:34.950
React application.

23
00:01:37.230 --> 00:01:40.090
Again, if you're not integrating
with some other library,

24
00:01:40.090 --> 00:01:41.780
you should never have to do this.

25
00:01:41.780 --> 00:01:45.510
The reason why I show this at the end,
a lot of times people ask me when they're

26
00:01:45.510 --> 00:01:48.760
starting out with React, it's like hey,
I need to query the Dom for this.

27
00:01:48.760 --> 00:01:52.480
Or I need to have a handle on this because
they're used to that kind of jQuery

28
00:01:52.480 --> 00:01:56.790
imperative way of like, take this element
and call this method on it right.

29
00:01:56.790 --> 00:02:01.080
And we're kind of inverting that where
we let React handle all of that, and

30
00:02:01.080 --> 00:02:05.387
we just say, hey React, given this state,
this looks like that, right?

31
00:02:05.387 --> 00:02:09.033
So that's why I show this to
you at the very, very end.

32
00:02:09.033 --> 00:02:12.085
&gt;&gt; Brian Holt: So
that's how you do refs, right there.

33
00:02:12.085 --> 00:02:16.367
You just give it a function, it'll give
you that element, and you just stick it on

34
00:02:16.367 --> 00:02:20.731
this.something and then you can reference
it in other parts of your application.

35
00:02:25.792 --> 00:02:28.720
&gt;&gt; Brian Holt: So a curious part that you
might have noticed about that as well.

36
00:02:28.720 --> 00:02:30.130
Notice the first time it does it,

37
00:02:30.130 --> 00:02:33.720
it's undefined because it's calling
it on the first render pass.

38
00:02:33.720 --> 00:02:36.740
And when it does render for
the first time, it doesn't exist, right?

39
00:02:36.740 --> 00:02:38.453
It hasn't rendered out yet.

40
00:02:38.453 --> 00:02:41.147
But as soon as I call it the second time,

41
00:02:41.147 --> 00:02:44.667
it exists because it's
rendered the second time.

