WEBVTT

1
00:00:00.450 --> 00:00:01.980
&gt;&gt; Brian Holt: What is JSX?

2
00:00:01.980 --> 00:00:03.210
JSX, at least for me,

3
00:00:03.210 --> 00:00:05.880
was the initial part that kind of
scared me away from doing reaction.

4
00:00:05.880 --> 00:00:09.530
A lot of people, I think,
are in a similar boat.

5
00:00:09.530 --> 00:00:15.413
We spent so long having JavaScript in
our HTML, and dealing with that madness.

6
00:00:15.413 --> 00:00:18.596
If you've been developing JavaScript
applications for long enough,

7
00:00:18.596 --> 00:00:20.407
I'm sure you'll have seen it, right?

8
00:00:20.407 --> 00:00:25.351
You''ll have like your HTML elements that
will have JavaScript colon on click blah.

9
00:00:25.351 --> 00:00:26.922
And they'll have to be on a global scope.

10
00:00:26.922 --> 00:00:28.967
And it's just really, really messy.

11
00:00:28.967 --> 00:00:34.197
We spent a long time moving away from
that paradigm, and now it feels kind

12
00:00:34.197 --> 00:00:39.452
of silly to go back or feels like going
back to put HTML in our JavaScript.

13
00:00:39.452 --> 00:00:43.554
But let me tell you why this is kinda
fundamentally different than the other way

14
00:00:43.554 --> 00:00:44.060
around.

15
00:00:45.950 --> 00:00:50.750
When I'm writing this application,
I have here react.createelementdiv, right?

16
00:00:52.930 --> 00:00:53.870
What is this doing?

17
00:00:53.870 --> 00:00:55.550
What is this trying to mimic, right?

18
00:00:55.550 --> 00:00:59.240
Notice even the indentation that
we have here is actually kind of

19
00:00:59.240 --> 00:01:01.160
mimicking HTML, right?

20
00:01:01.160 --> 00:01:05.290
We're writing JavaScript to generate HTML.

21
00:01:05.290 --> 00:01:08.290
So we kinda have this translation
layer in our brain going through.

22
00:01:08.290 --> 00:01:13.370
It's like, okay, I wanna make a div
with a couple of h1 inside of it.

23
00:01:13.370 --> 00:01:14.749
And you're thinking about it that sense,
right?

24
00:01:14.749 --> 00:01:18.130
And so you're taking your HTML, and
you're translating that into JavaScript.

25
00:01:19.220 --> 00:01:24.130
It would be really great if we could
just write HTML to begin with, right?

26
00:01:24.130 --> 00:01:27.365
If that's ultimately what we're trying
to do, then why don't we just do that?

27
00:01:28.609 --> 00:01:32.089
&gt;&gt; Brian Holt: So that's where we'll
actually go into Pet.js first, and

28
00:01:32.089 --> 00:01:34.680
I'll show you but that's what JSX is.

29
00:01:34.680 --> 00:01:36.108
It's just JavaScript,

30
00:01:36.108 --> 00:01:40.732
there's nothing really added except this
one feature of being able to basically

31
00:01:40.732 --> 00:01:45.155
write HTML that translates into this
React.createElement calls, right?

32
00:01:45.155 --> 00:01:47.937
That's all this is.

33
00:01:47.937 --> 00:01:54.057
So now because this is getting run
through Parcel, Parcel's gonna translate

34
00:01:54.057 --> 00:01:59.172
our HTML looking stuff into
React.createElement calls for us.

35
00:01:59.172 --> 00:02:05.078
So I wanna translate this
Pet component into JSX.

36
00:02:05.078 --> 00:02:11.089
So first, I'm just going to comment
this out, so I can kind of reference it.

37
00:02:11.089 --> 00:02:16.251
And what I'm gonna say is, I'm gonna
return and I'm gonna put open parentheses.

38
00:02:16.251 --> 00:02:18.117
This parenthesis, this is just JavaScript.

39
00:02:18.117 --> 00:02:22.830
What it means we're going to continue
writing code on the next line, right?

40
00:02:22.830 --> 00:02:28.070
If I just did this and I started
like if you did return 5, like this.

41
00:02:28.070 --> 00:02:30.370
What do you think it's gonna return?

42
00:02:31.610 --> 00:02:33.530
Undefined, actually, right?

43
00:02:33.530 --> 00:02:34.840
Cause it's gonna end on this line.

44
00:02:34.840 --> 00:02:36.870
So actually, we go to the next line.

45
00:02:36.870 --> 00:02:42.810
Whereas if I did this, return 5 like this.

46
00:02:42.810 --> 00:02:46.020
Now it gets returned, the 5, right?

47
00:02:46.020 --> 00:02:47.400
Cuz it's gonna go over to the next line.

48
00:02:47.400 --> 00:02:50.040
So that's the same thing that we're
gonna be doing here, except with JSX.

49
00:02:50.040 --> 00:02:51.970
The reason why we put
this on another line,

50
00:02:51.970 --> 00:02:55.590
just makes it a lot easier to read, okay?

51
00:02:55.590 --> 00:03:00.630
So instead of having this
React.createElement dive,

52
00:03:00.630 --> 00:03:05.219
all I'm gonna write is div, like that.

53
00:03:05.219 --> 00:03:06.214
&gt;&gt; Brian Holt: Right?

54
00:03:08.042 --> 00:03:09.688
&gt;&gt; Brian Holt: I think
this is really cool.

55
00:03:09.688 --> 00:03:13.360
Now, I did not at the time, but
now I think this is really cool.

56
00:03:13.360 --> 00:03:17.980
That we're writing this div, but
let me demystify all of this for you.

57
00:03:17.980 --> 00:03:21.880
All this gets translated into is this,
React.createElement div.

58
00:03:21.880 --> 00:03:25.320
You can actually go look at the code, and
that's all it's getting translated to do.

59
00:03:25.320 --> 00:03:26.690
There's nothing magical here.

60
00:03:26.690 --> 00:03:29.810
There's no optimizations
going on underneath the hood.

61
00:03:29.810 --> 00:03:35.780
It's literally just React.createElement
calls, that's all JSX does.

62
00:03:35.780 --> 00:03:38.220
There's nothing more to this than that.

63
00:03:38.220 --> 00:03:41.880
So it's, people approach react and

64
00:03:41.880 --> 00:03:45.800
they thing that JSX is doing like more
things from it, and it's really not.

65
00:03:45.800 --> 00:03:47.990
It's really understandable
what's going on.

66
00:03:47.990 --> 00:03:51.140
It's just helpful to understand that we're
just kind of taking a shortcut to make

67
00:03:51.140 --> 00:03:53.250
this code a little bit more readable.

68
00:03:53.250 --> 00:03:54.040
Yeah, Mark?

69
00:03:54.040 --> 00:03:58.796
&gt;&gt; Speaker 2: Is Parcel doing the code
transformation under the bodies?

70
00:03:58.796 --> 00:04:02.479
&gt;&gt; Brian Holt: Yes, Parcel is already set
up to do react transformations for you.

71
00:04:06.450 --> 00:04:10.455
&gt;&gt; Brian Holt: The actual thing that's
doing the co-transformation itself is

72
00:04:10.455 --> 00:04:11.320
Babel.

73
00:04:11.320 --> 00:04:15.000
Babel.js is actually doing
the co-transformations.

74
00:04:15.000 --> 00:04:18.323
The Parcel already has Babel
transformations built into it.

75
00:04:20.266 --> 00:04:23.521
&gt;&gt; Brian Holt: If you wanna know how
to set up Babel yourself just check out

76
00:04:23.521 --> 00:04:25.648
the previous version of this course,

77
00:04:25.648 --> 00:04:29.680
where we actually go through all of
the Babel parts with this, okay?

78
00:04:29.680 --> 00:04:35.541
So we have div, right, and
then inside of that, we wanna have an h1.

79
00:04:38.330 --> 00:04:41.300
&gt;&gt; Brian Holt: And inside of it,
I wanna have props.name.

80
00:04:41.300 --> 00:04:46.010
But I can't just put props.name like this,
Why?

81
00:04:46.010 --> 00:04:50.840
Because this is literally going to
output the string props.name to the DOM,

82
00:04:50.840 --> 00:04:52.390
which is not what we're looking for.

83
00:04:52.390 --> 00:04:56.436
We want the value of what's
inside of props.name.

84
00:05:00.485 --> 00:05:03.653
&gt;&gt; Brian Holt: So what I'm gonna do
is I'm gonna take props.name, and

85
00:05:03.653 --> 00:05:05.768
I'm going to wrap it in curly braces.

86
00:05:08.533 --> 00:05:11.642
&gt;&gt; Brian Holt: So now, it's going to take
whatever's inside of props.name, and

87
00:05:11.642 --> 00:05:12.720
output that to the DOM.

88
00:05:12.720 --> 00:05:17.113
So in the first case,
it's gonna be Luna, right?

89
00:05:17.113 --> 00:05:21.320
So that's what these curly braces mean,
is it just means, inside of here,

90
00:05:21.320 --> 00:05:25.430
it's a JavaScript expression
that's gonna be evaluated, right?

91
00:05:25.430 --> 00:05:29.520
And then whatever it evaluates to
you're gonna output that to the DOM.

92
00:05:29.520 --> 00:05:33.604
So for example,
I totally could put in here toUpperCase,

93
00:05:35.605 --> 00:05:37.154
&gt;&gt; Brian Holt: Right, and this would work.

94
00:05:37.154 --> 00:05:42.330
Now the animal's name would be
in upper case letters, right?

95
00:05:42.330 --> 00:05:44.578
So when I say JavaScript expression,

96
00:05:44.578 --> 00:05:49.647
I mean anything that could be on the right
side of an equal, of an assignment, right?

97
00:05:49.647 --> 00:05:54.862
So anything that can be
on the right side of

98
00:05:54.862 --> 00:06:00.529
this can be put inside
of these curly braces.

99
00:06:00.529 --> 00:06:02.307
Make sense?

100
00:06:02.307 --> 00:06:04.983
Cool.

101
00:06:04.983 --> 00:06:08.058
&gt;&gt; Speaker 2: How do you
put attributes on that tag?

102
00:06:08.058 --> 00:06:09.749
&gt;&gt; Brian Holt: Here on the div tag?

103
00:06:09.749 --> 00:06:14.600
&gt;&gt; Speaker 2: Or on the h1 or
ids, or anything.

104
00:06:14.600 --> 00:06:18.280
&gt;&gt; Brian Holt: Just like normal old HTML.

105
00:06:21.120 --> 00:06:25.154
So again,
it's related to be in here, right?

106
00:06:25.154 --> 00:06:26.450
It's part of the object, right?

107
00:06:26.450 --> 00:06:30.180
It's really just feels like writing HTML,
it feels very familiar.

108
00:06:30.180 --> 00:06:30.680
Yeah?

109
00:06:32.030 --> 00:06:34.730
&gt;&gt; Speaker 2: So
I am seeing both on my screen and yours,

110
00:06:34.730 --> 00:06:40.490
that ESLint is getting mad at React,
because React is never being called.

111
00:06:40.490 --> 00:06:41.640
&gt;&gt; Brian Holt: Yup.
&gt;&gt; Speaker 2: Is there something we should

112
00:06:41.640 --> 00:06:43.820
be telling JS or ESLint?

113
00:06:43.820 --> 00:06:44.690
&gt;&gt; Brian Holt: We'll fix it here in a sec.

114
00:06:44.690 --> 00:06:46.721
You're getting ahead of me, man.

115
00:06:46.721 --> 00:06:48.233
&gt;&gt; Speaker 2: Sorry.
&gt;&gt; Brian Holt: [LAUGH] No [INAUDIBLE]

116
00:06:48.233 --> 00:06:48.742
Yeah, so

117
00:06:48.742 --> 00:06:53.272
React is upset now because React doesn't
seem like it's getting called anywhere.

118
00:06:53.272 --> 00:06:57.699
We have to inform ESLint of how to do that
and we'll do that here in just a second.

119
00:06:59.152 --> 00:07:02.581
&gt;&gt; Brian Holt: So going back to your
question, attributes, the only one that's

120
00:07:02.581 --> 00:07:06.391
a little, well there's a couple of
them that's a little bit different.

121
00:07:06.391 --> 00:07:11.606
The word class is a reserved
word in JavaScript, right?

122
00:07:11.606 --> 00:07:15.060
So this one doesn't have a class but
if you go over here to app.

123
00:07:15.060 --> 00:07:19.340
Class means these kind of classes,
so you can't use class directly.

124
00:07:19.340 --> 00:07:23.995
So if I wanna have a class in here, I have
to use the name of the JavaScript API,

125
00:07:23.995 --> 00:07:25.297
which is className.

126
00:07:29.128 --> 00:07:34.148
&gt;&gt; Brian Holt: Right,
there's a couple of them like that.

127
00:07:34.148 --> 00:07:40.275
The other one is for, if you're using
labels, for is obviously for loops, right?

128
00:07:40.275 --> 00:07:45.922
So they call it htmlFor,
there's a couple of them.

129
00:07:45.922 --> 00:07:47.415
They're fewer and far between.

130
00:07:47.415 --> 00:07:51.251
The most, quote, unquote,
annoying one is className.

131
00:07:51.251 --> 00:07:56.940
But just so you know,
to show you something,

132
00:07:56.940 --> 00:08:00.695
inspect element, console.

133
00:08:00.695 --> 00:08:04.640
All right,
x is this h2 right here on the page.

134
00:08:04.640 --> 00:08:10.825
If I wanna get the name of the classes on
that particular thing, it's x.className.

135
00:08:10.825 --> 00:08:17.080
So their not making things up here,
that is the name of the API.

136
00:08:17.080 --> 00:08:19.380
Which doesn't have any classes.

137
00:08:19.380 --> 00:08:21.801
Just so you know,
that's where a className comes from.

138
00:08:23.795 --> 00:08:27.855
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So

139
00:08:27.855 --> 00:08:31.705
we'll get rid of that id up here,
otherwise it's all the same.

140
00:08:33.326 --> 00:08:38.216
&gt;&gt; Brian Holt: Let's finish
translating this out,

141
00:08:38.216 --> 00:08:43.716
we'll have props.animal, I can spell,

142
00:08:43.716 --> 00:08:48.162
and then we'll do props.breed.

143
00:08:48.162 --> 00:08:50.756
Then notice, I'm not really
caring too much about formatting,

144
00:08:50.756 --> 00:08:53.218
cuz whenever I save,
it just fixes all the formatting for me.

145
00:08:55.294 --> 00:08:59.613
&gt;&gt; Brian Holt: And there you go, we have
successfully translated this from being in

146
00:08:59.613 --> 00:09:02.000
create element calls to being in JSX.

147
00:09:05.687 --> 00:09:08.818
&gt;&gt; Brian Holt: Hopefully, that it
makes sense, the reason why we do it.

148
00:09:08.818 --> 00:09:12.242
The story of how it came about
is actually quite funny.

149
00:09:12.242 --> 00:09:17.451
When the React team is trying to propose
this, that they use this at Facebook.

150
00:09:17.451 --> 00:09:20.884
This new technology that they've
built at the time they're using, and

151
00:09:20.884 --> 00:09:24.760
I think they still use this PHP variant
called XHP for their templating.

152
00:09:24.760 --> 00:09:28.000
And so they wanted to take this to
the PHP developers and say, hey,

153
00:09:28.000 --> 00:09:29.320
check out how you can write this.

154
00:09:29.320 --> 00:09:33.850
So they actually wrote this JSX layer to
appease the PHP developers, and not really

155
00:09:33.850 --> 00:09:37.010
with any intention that JavaScript
developers would end up using it.

156
00:09:37.010 --> 00:09:39.493
And then, when they actually went to
propose that people started using it and

157
00:09:39.493 --> 00:09:40.074
really liked it.

158
00:09:40.074 --> 00:09:44.628
And so they kind of accidentally invented
this JSX thing that people like.

159
00:09:44.628 --> 00:09:46.757
So that's how we got JSX.

160
00:09:49.872 --> 00:09:51.960
&gt;&gt; Brian Holt: You don't have to use JSX.

161
00:09:51.960 --> 00:09:55.160
You're more than welcome to
stick with createElement calls.

162
00:09:55.160 --> 00:09:57.250
Anymore, I don't know anyone that does.

163
00:09:57.250 --> 00:10:01.859
Everyone that I know that writes
React full time ends up using JSX.

164
00:10:02.920 --> 00:10:05.420
As you can see,
that's just a lot easier to read, right?

165
00:10:05.420 --> 00:10:10.460
div, h1, h2, h2, i reads like HTML, and
that's ultimately what you're generating.

166
00:10:10.460 --> 00:10:13.260
So to me, it makes sense to use JSX.

167
00:10:13.260 --> 00:10:16.050
But now you know how to
write it without JSX.

168
00:10:16.050 --> 00:10:21.704
So you're welcome to make your
own decision just choose JSX.

169
00:10:21.704 --> 00:10:23.470
&gt;&gt; [LAUGH]

