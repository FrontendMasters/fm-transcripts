WEBVTT

1
00:00:00.000 --> 00:00:02.937
&gt;&gt; Brian Holt: What we wanna do actually,

2
00:00:02.937 --> 00:00:07.541
is we want to render
out all of our animals.

3
00:00:07.541 --> 00:00:12.216
So what we're gonna do is we're
gonna put this inside of a div, and

4
00:00:12.216 --> 00:00:18.243
we're gonna say this.state.pets, right,
this is the array of pets that we have.

5
00:00:18.243 --> 00:00:24.194
And then we're gonna do a map, .map.

6
00:00:24.194 --> 00:00:29.496
Now map is a JavaScript function,
it's built onto array.

7
00:00:29.496 --> 00:00:33.557
So any array can do a .maps, so
this not something specific to React.

8
00:00:33.557 --> 00:00:37.826
What we have is we have
an array of pet data, and

9
00:00:37.826 --> 00:00:42.538
we wanna turn that into
an array of pet components.

10
00:00:42.538 --> 00:00:46.817
So if you're familiar with functional
programming, if you're transforming one

11
00:00:46.817 --> 00:00:51.046
array of things into an array of different
things, the operator to do that is map.

12
00:00:51.046 --> 00:00:54.638
You're mapping this one
into a different one.

13
00:00:54.638 --> 00:00:57.901
And if you want more information on that,
there's lots of really,

14
00:00:57.901 --> 00:01:01.063
really good functional programming
courses on for the masters.

15
00:01:01.063 --> 00:01:06.588
Both Kyle Simpson's and
Brian Lawnstar's are A plus in my opinion.

16
00:01:06.588 --> 00:01:07.864
So that's what we're gonna do here.

17
00:01:07.864 --> 00:01:13.340
We're gonna take this array of pet objects
and transform them into an array of

18
00:01:13.340 --> 00:01:18.413
pet data, or sorry pet data and
turn it into an array of pet components.

19
00:01:18.413 --> 00:01:23.605
And if you remember when we were
doing the react.create element costs

20
00:01:23.605 --> 00:01:29.152
the last thing that we could provide
it was an array of components, right.

21
00:01:29.152 --> 00:01:33.580
So that's all we're doing here, we're just
providing another array of components.

22
00:01:37.996 --> 00:01:43.103
&gt;&gt; Brian Holt: So what we're gonna do
now is we're going to do pet, right.

23
00:01:43.103 --> 00:01:45.546
This is gonna be in a pet object,

24
00:01:45.546 --> 00:01:50.627
this function's going to be run on
every single item in the array.

25
00:01:50.627 --> 00:01:55.028
In fact, it might be useful to
just demonstrate to you here.

26
00:01:57.585 --> 00:02:05.710
&gt;&gt; Brian Holt: If I have a const
numbers = [1,2,3,4], okay.

27
00:02:05.710 --> 00:02:12.913
So now I have numbers and
I'm gonna say numbers.map,

28
00:02:12.913 --> 00:02:17.930
number and I return two times number.

29
00:02:20.141 --> 00:02:22.993
&gt;&gt; Brian Holt: This function down here,
this is probably hard to see, but

30
00:02:22.993 --> 00:02:26.546
this function right here is going to
be run every single time in the array.

31
00:02:26.546 --> 00:02:30.206
So in this case, this function here
is going to be run four times,

32
00:02:30.206 --> 00:02:32.349
cuz there's four items in the array.

33
00:02:32.349 --> 00:02:37.405
And I'm going to get a new array
of whatever that results in.

34
00:02:37.405 --> 00:02:40.227
So here I have two, four, six, eight,

35
00:02:40.227 --> 00:02:44.214
because that function doubled
everything in the array.

36
00:02:44.214 --> 00:02:45.440
So that's all we're doing here.

37
00:02:45.440 --> 00:02:48.872
In that case we're just transforming
one set of numbers to another set of

38
00:02:48.872 --> 00:02:52.200
numbers but we're going to transform
data objects into components.

39
00:02:55.608 --> 00:02:57.463
&gt;&gt; Brian Holt: So
here we're going to return,

40
00:02:59.352 --> 00:03:01.276
&gt;&gt; Brian Holt: A pet component.

41
00:03:03.791 --> 00:03:09.665
&gt;&gt; Brian Holt: And
animal is gonna be equal to pet.animal.

42
00:03:14.140 --> 00:03:19.628
&gt;&gt; Brian Holt: Name is
gonna be equal to pet.name.

43
00:03:19.628 --> 00:03:26.164
And breed is gonna be equal to breed.

44
00:03:26.164 --> 00:03:28.795
Another fun thing here is sometimes
these animals have one breed, and

45
00:03:28.795 --> 00:03:30.267
sometimes they have two breeds, and so

46
00:03:30.267 --> 00:03:32.913
you have to make sure that you're
getting all of the breeds captured.

47
00:03:32.913 --> 00:03:37.532
So what we're gonna do up here
is we're gonna say, let breed.

48
00:03:39.847 --> 00:03:44.130
&gt;&gt; Brian Holt: Or if Array.isArray.

49
00:03:45.758 --> 00:03:47.939
&gt;&gt; Brian Holt: Pet.breeds.breed.

50
00:03:51.818 --> 00:03:55.287
&gt;&gt; Brian Holt: Then
you're gonna say breed =

51
00:03:55.287 --> 00:04:01.034
pet.breeds.breed.join comma space, right.

52
00:04:01.034 --> 00:04:05.855
So if it's like German Shepherd poodle,
one it's a weird looking dog but

53
00:04:05.855 --> 00:04:10.365
two it would be GermanShepard,
space, poodle would be one stream,

54
00:04:10.365 --> 00:04:12.412
that's kind of our goal here.

55
00:04:12.412 --> 00:04:17.319
Otherwise, if it's not, and it's just
one breed then we just want it to

56
00:04:17.319 --> 00:04:20.386
be equal to breed equals pet.breeds.breed

57
00:04:28.545 --> 00:04:30.527
&gt;&gt; Brian Holt: Okay,
it's gonna be yelling at you for a second.

58
00:04:30.527 --> 00:04:35.272
I will talk about keys momentarily, but

59
00:04:35.272 --> 00:04:39.886
now I'll give you a second to catch up.

60
00:04:39.886 --> 00:04:43.151
But now what we should do is rather than
seeing that whole list of JSON just being

61
00:04:43.151 --> 00:04:43.942
spat onto the DOM,

62
00:04:43.942 --> 00:04:47.323
we should actually see that same structure
that we saw with Luna before, right.

63
00:04:47.323 --> 00:04:50.058
But it'll be all the dogs from the API.

64
00:04:59.054 --> 00:05:01.356
&gt;&gt; Brian Holt: Nope, pets is not defined.

65
00:05:02.774 --> 00:05:08.543
&gt;&gt; Speaker 2: Plural and that is
array condition, you're saying that.

66
00:05:08.543 --> 00:05:14.594
&gt;&gt; Brian Holt: Thank you, perfect.

67
00:05:14.594 --> 00:05:18.567
So now you can see there's all these dogs
that are coming back from the pet finder

68
00:05:18.567 --> 00:05:20.415
API, right, which is pretty cool.

69
00:05:20.415 --> 00:05:23.297
We're actually working with real data now.

70
00:05:27.781 --> 00:05:29.469
&gt;&gt; Brian Holt: Questions?

71
00:05:29.469 --> 00:05:31.795
I'll talk about keys
here in just a second.

72
00:05:31.795 --> 00:05:34.760
So you will be seeing errors over here,
and I'll address that in a second.

