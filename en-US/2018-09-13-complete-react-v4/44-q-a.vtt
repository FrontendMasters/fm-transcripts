WEBVTT

1
00:00:00.100 --> 00:00:04.460
&gt;&gt; Brian Holt: There was a question before
the break about this particular option

2
00:00:04.460 --> 00:00:08.450
thing right here like it's being
condensed into one self-closing tag.

3
00:00:08.450 --> 00:00:09.450
Why are we doing that?

4
00:00:09.450 --> 00:00:10.970
Can we do something else?

5
00:00:10.970 --> 00:00:15.000
So what I wanted here is I wanted
to have basically an option

6
00:00:15.000 --> 00:00:19.521
if I was gonna write it in just
normal HTML it would look like this,

7
00:00:19.521 --> 00:00:24.126
value= Blank with no string here,
empty string inside of there so

8
00:00:24.126 --> 00:00:28.590
that if you go over here you can
see that it's empty with animal.

9
00:00:28.590 --> 00:00:32.715
This represents searching for
all animals, right?

10
00:00:32.715 --> 00:00:37.661
So you could totally put in
here All Animals, I guess.

11
00:00:40.075 --> 00:00:41.480
&gt;&gt; Brian Holt: And
this would work just as well.

12
00:00:43.403 --> 00:00:46.152
&gt;&gt; Brian Holt: Then come back,
my, nope this is not working.

13
00:00:46.152 --> 00:00:48.060
Npm run dev.

14
00:00:55.236 --> 00:00:57.312
&gt;&gt; Brian Holt: So now,
if I refresh this again,

15
00:00:57.312 --> 00:01:01.538
you'll see here it says all animals,
or I could, so I can search for

16
00:01:01.538 --> 00:01:06.581
all animals, and that would be fine as
well, but I wasn't doing that, I was just

17
00:01:06.581 --> 00:01:11.740
making it an empty string, which then
Prettier collapses into one option.

18
00:01:11.740 --> 00:01:13.580
So that hopefully addresses that.

19
00:01:15.260 --> 00:01:16.530
Any other questions before I move on?

20
00:01:17.730 --> 00:01:19.230
&gt;&gt; off screen male: I have a question.

21
00:01:19.230 --> 00:01:21.349
&gt;&gt; Brian Holt: Yeah?
&gt;&gt; off screen male: I was looking at this,

22
00:01:21.349 --> 00:01:25.104
on line 41 Capital animals that came from

23
00:01:25.104 --> 00:01:29.945
the import statement of both
map is an array function?

24
00:01:29.945 --> 00:01:31.201
&gt;&gt; Brian Holt: Mm-hm
&gt;&gt; off screen male: How do you make

25
00:01:31.201 --> 00:01:31.780
that show?

26
00:01:32.880 --> 00:01:34.190
&gt;&gt; Brian Holt: This is an array.

27
00:01:34.190 --> 00:01:35.310
&gt;&gt; off screen male: That's
already an array?

28
00:01:35.310 --> 00:01:36.470
&gt;&gt; Brian Holt: Yeah.

29
00:01:36.470 --> 00:01:40.589
So I mean this is, in fact I can look
at it here, it's an array of strings.

30
00:01:42.050 --> 00:01:43.350
That comes from this module.

31
00:01:43.350 --> 00:01:47.190
This module, I just know,
exports an array of strings.

32
00:01:47.190 --> 00:01:48.562
&gt;&gt; off screen male: Okay.
&gt;&gt; Brian Holt: Yeah, so

33
00:01:48.562 --> 00:01:51.851
that dot map works on any array.

34
00:01:54.551 --> 00:01:55.900
&gt;&gt; Brian Holt: Good question,
other questions?

35
00:01:59.076 --> 00:01:59.760
&gt;&gt; Brian Holt: Yeah.

36
00:01:59.760 --> 00:02:01.760
&gt;&gt; off screen male: Did you have
to do a lot of doc block or

37
00:02:01.760 --> 00:02:07.930
in line documentation in the module
finder client in order for

38
00:02:07.930 --> 00:02:12.010
this to pre know so
many things like it's an array of strings.

39
00:02:12.010 --> 00:02:12.933
&gt;&gt; Brian Holt: It's type script.

40
00:02:12.933 --> 00:02:15.106
&gt;&gt; off screen male: Like did you,
[CROSSTALK] that, Okay, great.

41
00:02:15.106 --> 00:02:16.721
&gt;&gt; Brian Holt: It's type script.

42
00:02:16.721 --> 00:02:18.993
Yeah, if you export
typescript definitions,

43
00:02:18.993 --> 00:02:21.274
VS code just inherently
knows how to read that.

44
00:02:24.103 --> 00:02:24.840
&gt;&gt; Brian Holt: Makes it really easy.

45
00:02:27.440 --> 00:02:29.140
So yeah,
I think I mentioned this yesterday.

46
00:02:29.140 --> 00:02:32.488
VS code is, despite the fact that
we're not using typescript anywhere,

47
00:02:32.488 --> 00:02:36.052
it's actually running typescript behind
the scenes on your code so that it's

48
00:02:36.052 --> 00:02:39.410
understanding you code and giving you
suggestions and things like that.

49
00:02:40.947 --> 00:02:46.464
&gt;&gt; Brian Holt: So the same thing here
if I was trying to say React.whatever.

50
00:02:46.464 --> 00:02:52.092
So you can see here that it has all
of these things coming in from React.

51
00:02:52.092 --> 00:02:55.727
The way that it's doing that is React
is not written in typescript, but

52
00:02:55.727 --> 00:02:58.160
it has typescript definitions written for
it.

53
00:02:58.160 --> 00:03:01.736
And it's just understanding those and
giving you access to that.

54
00:03:04.369 --> 00:03:08.009
&gt;&gt; Brian Holt: By the way, VS Code not's
the only editor that does this I just

55
00:03:08.009 --> 00:03:10.660
think it does this really well.

56
00:03:10.660 --> 00:03:14.920
Particularly because both vs code and
typescript are written at Microsoft and

57
00:03:14.920 --> 00:03:16.850
those two teams sit next to each other.

58
00:03:16.850 --> 00:03:19.540
There's a lot of synergy there.

59
00:03:19.540 --> 00:03:22.500
But we'll get to that later,
we'll write typescript later.

60
00:03:22.500 --> 00:03:25.130
Okay, so I'll leave this up for
a second, but let's go ahead.

61
00:03:25.130 --> 00:03:26.930
This concludes the section.

62
00:03:26.930 --> 00:03:29.990
If you're fallen behind here,

63
00:03:29.990 --> 00:03:34.610
there's a commit here, so
feel free to come up and speak with that.

64
00:03:34.610 --> 00:03:40.019
&gt;&gt; off screen male: For bigger projects,
do you ever use libraries like redux forum

65
00:03:40.019 --> 00:03:45.141
or how do you manage large forums
with lots of complex state.

66
00:03:47.112 --> 00:03:52.418
&gt;&gt; Brian Holt: Personally, again I feel
like I'm a professional form developer

67
00:03:52.418 --> 00:03:57.640
at this point, I don't because I
think this is pretty easy to do.

68
00:03:58.880 --> 00:04:03.878
I really think the mechanics
of storing state with forms,

69
00:04:03.878 --> 00:04:06.735
with React, is pretty elegant.

70
00:04:06.735 --> 00:04:12.029
And I don't really see typically
the need for a library on top of that.

71
00:04:12.029 --> 00:04:15.488
People can disagree with me, and
they might be able to go faster than me,

72
00:04:15.488 --> 00:04:18.832
but when I have to go maintain it later
and I have to make minor changes,

73
00:04:18.832 --> 00:04:21.523
it's really easy cuz the code's
already all written.

74
00:04:21.523 --> 00:04:25.710
So I personally don't but that isn't to

75
00:04:25.710 --> 00:04:30.390
say,
&gt;&gt; Brian Holt: I personally don't but

76
00:04:30.390 --> 00:04:34.912
that isn't to say that there isn't
a good reason that you could do that.

77
00:04:39.292 --> 00:04:44.138
&gt;&gt; off screen male: With inputs and events
or just events in general, can you ever,

78
00:04:44.138 --> 00:04:47.720
how do you pass some
extra data along with it.

79
00:04:47.720 --> 00:04:53.930
For instance you have two of the same
handlers but you want them pass a key.

80
00:04:53.930 --> 00:04:55.210
&gt;&gt; Brian Holt: Yep.
&gt;&gt; off screen male: Or an ID or

81
00:04:55.210 --> 00:04:56.420
something like that.

82
00:04:56.420 --> 00:04:57.250
&gt;&gt; Brian Holt: That's a good question.

83
00:04:57.250 --> 00:04:58.310
Let's talk about that.

84
00:04:58.310 --> 00:04:59.620
We actually already did it.

85
00:04:59.620 --> 00:05:00.929
We did it with the carousel.

86
00:05:03.308 --> 00:05:05.879
&gt;&gt; Brian Holt: If you look down
here I put the data index on here.

87
00:05:07.510 --> 00:05:10.770
So this is actually gonna be
passed in through the data set

88
00:05:10.770 --> 00:05:12.640
here in the handle index click.

89
00:05:12.640 --> 00:05:15.330
This is again in the carousel
component that we built when we were

90
00:05:15.330 --> 00:05:17.440
choosing which photo, right.

91
00:05:17.440 --> 00:05:22.530
So here each one of these images is
getting an event listener attached to it.

92
00:05:23.580 --> 00:05:27.505
And then, we're just pulling
out the dataset.index, right?

93
00:05:31.125 --> 00:05:36.415
&gt;&gt; Brian Holt: So that's how you
would do that, you use data,

94
00:05:36.415 --> 00:05:41.380
right which is really fast and
simple to do.

95
00:05:41.380 --> 00:05:42.830
On a separate note,

96
00:05:42.830 --> 00:05:46.630
something worth mentioning is typically
you'd be worried about the performance

97
00:05:46.630 --> 00:05:49.710
implication of attaching a bunch
of event listeners here, right?

98
00:05:49.710 --> 00:05:52.150
If you're,
if I'm thinking back to my jQuery days and

99
00:05:52.150 --> 00:05:53.980
this is something I'd be worried about.

100
00:05:53.980 --> 00:05:57.700
But keep in mind that, you're actually
not attaching real event listeners here.

101
00:05:57.700 --> 00:06:00.740
React has one form listed at
the top level of the components.

102
00:06:00.740 --> 00:06:04.230
So you're not actually attaching real
event listeners, and so there's no

103
00:06:04.230 --> 00:06:08.110
performance overhead to having a bunch of
them here, or at least very, very little.

104
00:06:09.780 --> 00:06:12.297
So you also don't need
to worry about that.

105
00:06:15.363 --> 00:06:16.763
&gt;&gt; Brian Holt: Other questions?

106
00:06:19.998 --> 00:06:21.570
&gt;&gt; Brian Holt: Yeah, go ahead.

107
00:06:21.570 --> 00:06:25.278
&gt;&gt; off screen male: I noticed that
a couple different modules now,

108
00:06:25.278 --> 00:06:29.172
we have the same sort of
import PF from pet finder,

109
00:06:29.172 --> 00:06:32.341
give it the credentials again and so on.

110
00:06:32.341 --> 00:06:37.817
Is that something that react wants you to
sort of redo in each of the modules or

111
00:06:37.817 --> 00:06:43.124
on a larger project would you abstract
out this moment when we're getting

112
00:06:43.124 --> 00:06:48.173
pet finders initialized into sort of
another module that we would then

113
00:06:48.173 --> 00:06:53.090
just instead of that sheet and
keep pulling it all over the place.

114
00:06:53.090 --> 00:06:54.980
&gt;&gt; Brian Holt: Yeah, this has
nothing to do with React whatsoever,

115
00:06:54.980 --> 00:06:58.350
this would be the same in any
library that you're dealing with,

116
00:06:58.350 --> 00:07:02.400
this is cuz I hurried and
wrote this module myself.

117
00:07:02.400 --> 00:07:05.183
This is actually,
&gt;&gt; Brian Holt: So

118
00:07:05.183 --> 00:07:06.920
this is technically actually a singleton.

119
00:07:06.920 --> 00:07:08.570
I don't actually have to do this.

120
00:07:08.570 --> 00:07:09.550
I just have to do it once.

121
00:07:09.550 --> 00:07:12.980
It actually stores those keys and
secrets internally and

122
00:07:12.980 --> 00:07:15.330
then this would just give you
the petinder client right here.

123
00:07:17.180 --> 00:07:20.540
But rather than explain it,
I just show people every single time so

124
00:07:20.540 --> 00:07:22.105
you can see what it looks like.

125
00:07:25.395 --> 00:07:29.043
&gt;&gt; Brian Holt: Yes, so it's not,
there's perhaps better ways of structuring

126
00:07:29.043 --> 00:07:32.026
the module but
it really has nothing to do with react,

127
00:07:32.026 --> 00:07:35.170
it's just the way this
job has been moduled to.

128
00:07:35.170 --> 00:07:39.239
&gt;&gt; off screen male: [CROSSTALK] Say
a lot of people have a object and

129
00:07:39.239 --> 00:07:42.766
they pull the API off
the config object that's

130
00:07:42.766 --> 00:07:46.397
already configured with API keys or
whatever.

131
00:07:46.397 --> 00:07:50.000
[CROSSTALK] There's a lot of different
code organization ways to handle things.

132
00:07:50.000 --> 00:07:53.506
&gt;&gt; Brian Holt: Probably if it was my own
project what I would do is have an API

133
00:07:53.506 --> 00:07:58.206
like, ./api and make a new file called,
api.js and then import from that and

134
00:07:58.206 --> 00:08:02.909
just substantiate that API file that would
probably be a little bit more elegant

135
00:08:02.909 --> 00:08:04.560
solution.

136
00:08:04.560 --> 00:08:08.460
But that's just preference
on how you write JavaScript.

137
00:08:10.000 --> 00:08:13.392
&gt;&gt; off screen male: Is there any reason
why you don't have a form element,

138
00:08:13.392 --> 00:08:14.508
actual form tag?

139
00:08:15.628 --> 00:08:20.515
&gt;&gt; off screen male: Typically like,
&gt;&gt; Brian Holt: I think the answer

140
00:08:20.515 --> 00:08:21.430
to that question,
&gt;&gt; off screen male: [CROSSTALK] For

141
00:08:21.430 --> 00:08:22.606
semantics or whatever, you would have it.

142
00:08:22.606 --> 00:08:26.387
&gt;&gt; Brian Holt: Yeah, so it doesn't make,
I don't think it makes it any more

143
00:08:26.387 --> 00:08:29.240
necessarily accessible
by having a formula.

144
00:08:29.240 --> 00:08:34.030
In this case, we're not operating at the
form level, so I'm just, I don't need it,

145
00:08:34.030 --> 00:08:35.620
so I don't put it in there.

146
00:08:35.620 --> 00:08:38.568
But some people feel the need
to wrap everything in

147
00:08:38.568 --> 00:08:42.083
a form,
&gt;&gt; Brian Holt: Now what you could

148
00:08:42.083 --> 00:08:45.043
say that I'm not doing,
which people do expect.

149
00:08:45.043 --> 00:08:49.557
If you hit enter on a form,
people expect that to submit the form.

150
00:08:49.557 --> 00:08:54.393
And the easiest way to do that is
to wrap everything in a form and

151
00:08:54.393 --> 00:08:59.229
say, you know, on submit and
then handle the submit event and

152
00:08:59.229 --> 00:09:03.940
that will handle the people
hitting enter on your form.

153
00:09:03.940 --> 00:09:07.780
Right now it won't do that so that
would be a compelling reason to do it.

154
00:09:09.780 --> 00:09:11.796
I just haven't,
I think that answered the question.

155
00:09:17.268 --> 00:09:21.966
&gt;&gt; Brian Holt: So in other words, it's no
different for React than it is for, say,

156
00:09:21.966 --> 00:09:26.513
Angular, right, it's just,
I haven't done it, that's all.

157
00:09:31.326 --> 00:09:34.889
&gt;&gt; off screen male: And
in that ESX import on the top,

158
00:09:34.889 --> 00:09:41.700
pf is just the default import and
then you have named exports.

159
00:09:41.700 --> 00:09:46.470
&gt;&gt; Brian Holt: Right, so for example,
if I have React dom has it as well.

160
00:09:46.470 --> 00:09:52.164
You can import React dom and
you can also import

161
00:09:52.164 --> 00:09:57.137
render individually from react-dom.

162
00:09:58.416 --> 00:10:00.450
&gt;&gt; Brian Holt: So,
this is an ES6 module thing.

163
00:10:01.570 --> 00:10:05.640
You can import individual pieces of it,
or you can import the entire thing as one

164
00:10:05.640 --> 00:10:09.820
giant pack or, in general that's
the semantics of it but in reality,

165
00:10:09.820 --> 00:10:12.420
this is whatever the export default is,
right?

166
00:10:12.420 --> 00:10:15.350
If you look down here at the bottom,
I say, export default SearchParams.

167
00:10:15.350 --> 00:10:22.616
I could also say, Export const search
params equals search params, like this.

168
00:10:22.616 --> 00:10:26.717
And now I have this name export,
&gt;&gt; Brian Holt: Or

169
00:10:26.717 --> 00:10:32.080
some other name, [SOUND] right.

170
00:10:32.080 --> 00:10:37.458
Now I have this name export,
now that I wanted to

171
00:10:37.458 --> 00:10:42.703
import this in carousel,
I would come here and

172
00:10:42.703 --> 00:10:48.908
say, import SomeOtherName
from ./SearchParams.

173
00:10:50.324 --> 00:10:54.856
&gt;&gt; Brian Holt: So it's just how the module
system with ES6 works, again, not specific

174
00:10:54.856 --> 00:10:59.623
to React, this is just in general
JavaScript modules that's how they work.

175
00:11:01.815 --> 00:11:07.314
&gt;&gt; Brian Holt: Okay, so
what further is asking here if we go to,

176
00:11:07.314 --> 00:11:11.751
maybe, let's do it on SearchParams.

177
00:11:11.751 --> 00:11:15.481
Instead of doing what I have here,
correct me if I'm wrong but

178
00:11:15.481 --> 00:11:20.195
I think what he's asking,
let's just handle, do this one.

179
00:11:20.195 --> 00:11:21.268
&gt;&gt; Brian Holt: So this is normal,

180
00:11:21.268 --> 00:11:25.103
just like without, hang on you have
to put event in there as well.

181
00:11:29.083 --> 00:11:32.864
&gt;&gt; Brian Holt: HandleBreedChange and then
event here right, so this is not bound so

182
00:11:32.864 --> 00:11:37.325
that this would break right now if
I tried to run this code as is.

183
00:11:37.325 --> 00:11:41.236
&gt;&gt; Brian Holt: So what he's asking here,
he or she, is asking,

184
00:11:41.236 --> 00:11:47.750
is what happens if I change, handle
breed change instead of having up there.

185
00:11:47.750 --> 00:11:51.948
This technically works
if I say .find this and

186
00:11:51.948 --> 00:11:56.400
.bind this right here and
I do it in line here.

187
00:11:57.400 --> 00:12:03.044
Or the other way you can do it is,
something like this.

188
00:12:05.048 --> 00:12:06.476
&gt;&gt; Brian Holt: Event.

189
00:12:10.200 --> 00:12:11.960
&gt;&gt; Brian Holt: This would also work.

190
00:12:11.960 --> 00:12:16.110
There's a couple kind of ways of finagling
this but far more I see this one,

191
00:12:16.110 --> 00:12:16.749
the second one.

192
00:12:17.830 --> 00:12:20.230
So let me tell you why this is a bad idea.

193
00:12:20.230 --> 00:12:23.290
I would strongly recommend
against doing this.

194
00:12:24.320 --> 00:12:26.990
In general I have to say this,
mostly performance optimizations,

195
00:12:26.990 --> 00:12:27.840
you don't have to worry about.

196
00:12:27.840 --> 00:12:32.520
But this one you actually do because
this right here dot bind this,

197
00:12:32.520 --> 00:12:35.180
this gets called on every render function.

198
00:12:35.180 --> 00:12:39.505
And dot bind is actually
a pretty heavy function.

199
00:12:39.505 --> 00:12:42.862
If you run this 10,000 times,
you're gonna see slow down.

200
00:12:42.862 --> 00:12:46.708
And if you start doing this everyone in
your codebase, you're gonna start seeing

201
00:12:46.708 --> 00:12:50.164
junk because you are creating and
destroying a function every single time

202
00:12:50.164 --> 00:12:53.863
you call render and that's just turn
through memory like no one's business.

203
00:12:53.863 --> 00:12:57.239
So you're gonna see a lot
more garbage collection and

204
00:12:57.239 --> 00:13:00.315
the slowest like whenever
you're scrolling and

205
00:13:00.315 --> 00:13:05.280
garbage collection happens, it just
causes junk like a 100% of the time.

206
00:13:05.280 --> 00:13:08.860
And you're going to triple or
quadruple or even more than that, 10X,

207
00:13:08.860 --> 00:13:11.050
how much you do garbage collection
if you do stuff like this.

208
00:13:12.270 --> 00:13:14.625
So don't, don't do that.

209
00:13:23.465 --> 00:13:28.550
&gt;&gt; Brian Holt: Like I still see people
do this, and cuz it's easy, right?

210
00:13:28.550 --> 00:13:30.850
It's easy to read, it's very readable.

211
00:13:30.850 --> 00:13:36.270
But because before this was
impossible to do it this way,

212
00:13:36.270 --> 00:13:40.780
this only was allowed to happen
maybe within the past year.

213
00:13:41.870 --> 00:13:43.670
So before that,
you had to do the constructor.

214
00:13:45.910 --> 00:13:48.856
Before that, we didn't have to it because
they used to bind everything for you and

215
00:13:48.856 --> 00:13:49.936
they don't do that anymore.

216
00:13:51.984 --> 00:13:57.377
&gt;&gt; Brian Holt: So we just did forms and
now we're moving onto context.

217
00:14:02.173 --> 00:14:05.004
&gt;&gt; Brian Holt: Yeah, in fact I know,

218
00:14:05.004 --> 00:14:09.926
I think it was his or her name was Diego.

219
00:14:09.926 --> 00:14:14.402
We're actually going to address
the question of how we share data amongst

220
00:14:14.402 --> 00:14:15.854
multiple components.

