WEBVTT

1
00:00:00.000 --> 00:00:05.882
&gt;&gt; Brian Holt: So we're gonna now do
some handling asynch UIs and events.

2
00:00:05.882 --> 00:00:08.890
So on this details page,
we wanna make it so

3
00:00:08.890 --> 00:00:13.669
there's like a nice carousel of
the various images of the animals.

4
00:00:13.669 --> 00:00:16.496
So you can click on one and

5
00:00:16.496 --> 00:00:21.888
it'll show you a bigger picture of it,
right?

6
00:00:21.888 --> 00:00:25.606
So first thing we wanna do before we
get into that those, we wanna make

7
00:00:25.606 --> 00:00:29.532
the details page like you said,
go under request more data from the API.

8
00:00:32.696 --> 00:00:37.092
&gt;&gt; Brian Holt: So we're going to import pF

9
00:00:37.092 --> 00:00:42.063
from petfinder-client, and

10
00:00:42.063 --> 00:00:48.180
we'll say const petfinder = the same

11
00:00:48.180 --> 00:00:53.149
thing that we did before, pf,

12
00:00:53.149 --> 00:00:58.728
key is process.env.API_KEY.

13
00:00:58.728 --> 00:01:02.155
And this one is

14
00:01:02.155 --> 00:01:06.439
gonna be secret:

15
00:01:06.439 --> 00:01:15.870
process.env.API_SECRET, okay?

16
00:01:15.870 --> 00:01:19.130
And we have class detail down here,
we're gonna give it a constructor.

17
00:01:20.660 --> 00:01:24.590
Constructor props, as you remember
you have to do the super props

18
00:01:24.590 --> 00:01:29.978
first.
&gt;&gt; Brian Holt: Then this.state =

19
00:01:29.978 --> 00:01:35.660
an object, and the first thing that
we're gonna say is when you load for

20
00:01:35.660 --> 00:01:39.810
the first time you're gonna be loading,
right?

21
00:01:39.810 --> 00:01:42.160
Because when this renders for
the first time,

22
00:01:42.160 --> 00:01:44.220
it's not gonna have
the data back from the API.

23
00:01:44.220 --> 00:01:47.830
So you need to indicate to the user,
I'm loading, right?

24
00:01:47.830 --> 00:01:51.000
So the first thing we'll do is to say,
loading and

25
00:01:51.000 --> 00:01:54.070
then once it has finished loading,
then we'll turn that to false.

26
00:01:55.490 --> 00:02:04.472
It's a very common pattern for React
&gt;&gt; Brian Holt: Okay,

27
00:02:04.472 --> 00:02:11.541
then here in our componentDidMount.
&gt;&gt; Brian Holt: We're

28
00:02:11.541 --> 00:02:16.323
going to do all of our requests.
&gt;&gt; Brian Holt: So

29
00:02:16.323 --> 00:02:22.177
we're going to say petFinder.pet.get,

30
00:02:22.177 --> 00:02:30.162
output: Full,
&gt;&gt; Brian Holt: And

31
00:02:30.162 --> 00:02:35.215
id: of this.props.id, so this will
come from remember from the route?

32
00:02:38.555 --> 00:02:41.309
&gt;&gt; Brian Holt: And then we'll say,

33
00:02:41.309 --> 00:02:48.567
.then,
&gt;&gt; Brian Holt: Data.

34
00:02:51.005 --> 00:02:52.329
&gt;&gt; Brian Holt: And we have to do the same

35
00:02:52.329 --> 00:02:56.250
thing with the breed here to make sure
that we make the breed look nice.

36
00:02:56.250 --> 00:03:01.444
So let breed, if Array.isArray Of

37
00:03:01.444 --> 00:03:08.552
(data.petFinder.pet.breeds.breed).

38
00:03:17.964 --> 00:03:20.424
&gt;&gt; Brian Holt: Then we're gonna say,

39
00:03:20.424 --> 00:03:23.999
breed = data.petFinder.pet.

40
00:03:27.685 --> 00:03:32.958
&gt;&gt; Brian Holt: .breeds.breed.join,

41
00:03:32.958 --> 00:03:40.213
[LAUGH] (', ').
&gt;&gt; Brian Holt: Else,

42
00:03:40.213 --> 00:03:45.174
breed is just gonna be
equal to block same thing,

43
00:03:45.174 --> 00:03:52.807
without the join.
&gt;&gt; Brian Holt: Then,

44
00:03:52.807 --> 00:03:54.495
here we're just gonna
do a big old set state.

45
00:03:54.495 --> 00:03:58.170
This.setstate,

46
00:04:04.286 --> 00:04:07.609
&gt;&gt; Brian Holt: Name: is gonna be new

47
00:04:07.609 --> 00:04:12.963
data., men I guess this be easier

48
00:04:12.963 --> 00:04:19.572
if I just did this.
&gt;&gt; Brian Holt: const

49
00:04:19.572 --> 00:04:27.167
pet = data.petFinder.pet.
&gt;&gt; Brian Holt: And

50
00:04:27.167 --> 00:04:33.037
I can see once you, yeah whatever.

51
00:04:33.037 --> 00:04:36.246
And then, here you can just
make everything a little bit

52
00:04:36.246 --> 00:04:43.460
shorter.
&gt;&gt; Brian Holt: Yeah?

53
00:04:43.460 --> 00:04:44.440
&gt;&gt; off screen male: You're saying you used

54
00:04:44.440 --> 00:04:45.950
componentWillMount instead of

55
00:04:45.950 --> 00:04:48.494
componentDidMount.
&gt;&gt; Brian Holt: I did,

56
00:04:48.494 --> 00:04:50.514
sorry wrong auto completion.

57
00:04:50.514 --> 00:04:56.505
Thank you.
&gt;&gt; Brian Holt: And not this twice.

58
00:05:03.219 --> 00:05:08.389
&gt;&gt; Brian Holt: Okay, name: pet.name,

59
00:05:08.389 --> 00:05:15.367
animal: pet.animal, location,

60
00:05:18.665 --> 00:05:26.014
&gt;&gt; Brian Holt: Is pet.contact.city,

61
00:05:26.014 --> 00:05:32.363
pet.contact.state

62
00:05:36.723 --> 00:05:39.479
&gt;&gt; Brian Holt: Description,

63
00:05:46.032 --> 00:05:48.727
&gt;&gt; Brian Holt: Is pet.description.

64
00:05:53.459 --> 00:05:54.643
&gt;&gt; Brian Holt: Media: pet.,

65
00:05:54.643 --> 00:05:59.635
you maybe wondering how it's actually
doing this auto completion for

66
00:05:59.635 --> 00:06:04.127
me, which I think is again one of
my favorite parts of a VS Code.

67
00:06:04.127 --> 00:06:08.579
Because I wanted to find all the type
scripts types for this library,

68
00:06:08.579 --> 00:06:11.360
and knows what the shapes gonna look like.

69
00:06:11.360 --> 00:06:15.488
And despite the fact that we're not
writing type scripts like right now,

70
00:06:15.488 --> 00:06:19.962
VS Code is actually running type script
behind the scenes on your application.

71
00:06:19.962 --> 00:06:25.123
So it's doing that so it can give
you auto completions for JavaScript,

72
00:06:25.123 --> 00:06:29.160
which I think is pretty compelling.
&gt;&gt; Brian Holt: So

73
00:06:29.160 --> 00:06:34.509
you didn't know it, so you're writing
type script, so congratulations.

74
00:06:34.509 --> 00:06:35.662
breed: breed, right?

75
00:06:35.662 --> 00:06:38.000
Because we defined breed up here.

76
00:06:38.000 --> 00:06:42.899
But if you remember correctly,
if you have breed: breed you can just

77
00:06:42.899 --> 00:06:46.745
say breed.
&gt;&gt; Brian Holt: And then loading, at this

78
00:06:46.745 --> 00:06:50.505
point we're no longer loading because it's
loaded the application for the first time,

79
00:06:50.505 --> 00:06:55.824
so we're gonna say loading false.
&gt;&gt; Brian Holt: So

80
00:06:55.824 --> 00:07:00.248
that's a lot of writing, so
I'm gonna give you a second to

81
00:07:00.248 --> 00:07:04.841
catch up on that one.
&gt;&gt; off screen male: Do we no longer need

82
00:07:04.841 --> 00:07:09.364
to handle the case of an empty
breeds array, or breed array,

83
00:07:09.364 --> 00:07:11.980
like null?
&gt;&gt; Brian Holt: It always has a breed.

84
00:07:11.980 --> 00:07:17.381
The API should always return you a breed.
&gt;&gt; Brian Holt: In

85
00:07:17.381 --> 00:07:21.186
order to enter into their system
it has to have a breed, but if

86
00:07:21.186 --> 00:07:24.266
it didn't you'd have to worry about that.
&gt;&gt; off screen male: So,

87
00:07:24.266 --> 00:07:26.222
it was the pets array that we did that for

88
00:07:26.222 --> 00:07:27.575
enough to breed.
&gt;&gt; Brian Holt: Yep,

89
00:07:27.575 --> 00:07:29.665
that's the annoying one.

90
00:07:29.665 --> 00:07:35.173
And honestly, if we put a bad idea
into this right now, it's gonna crash.

91
00:07:35.173 --> 00:07:39.319
When we get to the typescript part
of writing the application for

92
00:07:39.319 --> 00:07:41.871
this, it will force us to handle that.

93
00:07:41.871 --> 00:07:45.983
Cuz we access like this might crash and
I'm not going to let you

94
00:07:45.983 --> 00:07:50.507
continue until you make sure that
you handle the crash part of this.

95
00:07:50.507 --> 00:07:56.961
Last thing here, until it's good to catch,
in case of an error.

96
00:07:56.961 --> 00:08:00.323
So error, and here you can just say,

97
00:08:04.452 --> 00:08:08.440
&gt;&gt; Brian Holt: this.setState,

98
00:08:08.440 --> 00:08:11.931
error: error,

99
00:08:32.720 --> 00:08:33.708
&gt;&gt; Brian Holt: We're not actually gonna do

100
00:08:33.708 --> 00:08:36.384
anything with this, but as you might
imagine here, if there was an error then

101
00:08:36.384 --> 00:08:39.480
you would show the user some sort of
error state, or something like that.

102
00:08:39.480 --> 00:08:42.200
Or I guess you can be even more
sophisticated about it and

103
00:08:42.200 --> 00:08:44.590
just say, navigate.

104
00:08:47.180 --> 00:08:51.471
So this comes from
reach/router,and just say, hey,

105
00:08:51.471 --> 00:08:55.580
if you don't have anything for
this particular pet,

106
00:08:55.580 --> 00:08:58.839
just navigate back to the homepage.
&gt;&gt; off screen male: It's just

107
00:08:58.839 --> 00:08:59.647
a global?
&gt;&gt; Brian Holt: No,

108
00:08:59.647 --> 00:09:04.576
I imported up here from rich/router,
so you don't have to

109
00:09:04.576 --> 00:09:09.868
pull all the way from there.
&gt;&gt; Brian Holt: I

110
00:09:09.868 --> 00:09:12.918
don't have that.
&gt;&gt; Brian Holt: No,

111
00:09:12.918 --> 00:09:17.157
it automatically imported
it when I typed it.

112
00:09:17.157 --> 00:09:18.689
Yeah?.
&gt;&gt; off screen male: Why

113
00:09:18.689 --> 00:09:20.734
would you have a catch on a set state?

114
00:09:20.734 --> 00:09:25.948
And what situation would a, because
why would the set state have a catch?

115
00:09:25.948 --> 00:09:27.991
&gt;&gt; Brian Holt: No it's, no you're right,

116
00:09:27.991 --> 00:09:29.063
I messed it up.

117
00:09:29.063 --> 00:09:34.668
It shouldn't be on the catch, or
it shouldn't be on the set stage.

118
00:09:34.668 --> 00:09:35.868
It should be on the promise.

119
00:09:44.849 --> 00:09:47.790
&gt;&gt; Brian Holt: Yeah, you're right.

120
00:09:47.790 --> 00:09:51.297
So this should be catching the promise,

121
00:09:51.297 --> 00:09:57.169
not the set state.
&gt;&gt; Brian Holt: Another

122
00:09:57.169 --> 00:09:59.529
thing that TypeScript totally caught for
me, right?

123
00:09:59.529 --> 00:10:03.030
Because there's no catch
on this.set state.

124
00:10:03.030 --> 00:10:04.730
But we would have seen
that error right away,

125
00:10:04.730 --> 00:10:08.506
it would have crashed right away.
&gt;&gt; Brian Holt: So

126
00:10:08.506 --> 00:10:10.635
now we should be getting
data back from our API.

127
00:10:10.635 --> 00:10:14.100
Now what we wanna do is we
wanna display it in a nice way.

128
00:10:14.100 --> 00:10:20.053
So here instead of render,
instead of this business right there,

129
00:10:20.053 --> 00:10:24.943
we're gonna say, const animal,
breed, location,

130
00:10:24.943 --> 00:10:31.538
description = this.state.
&gt;&gt; Brian Holt: And

131
00:10:31.538 --> 00:10:33.690
the first thing if it's loading.

132
00:10:33.690 --> 00:10:37.698
So you’re gonna say,
if (this.state.loading).

133
00:10:37.698 --> 00:10:42.240
As you might imagine, you might make some
nice spinning indicator letting the user

134
00:10:42.240 --> 00:10:44.790
knowing that you're loading.

135
00:10:44.790 --> 00:10:51.485
In this case, we're just gonna say,

136
00:10:51.485 --> 00:10:56.096
return an h1 of loading.

137
00:10:56.096 --> 00:11:01.103
But again, you would want to
take clear like invest more time

138
00:11:01.103 --> 00:11:06.304
in making that look nice, but
in our case is enough just to say,

139
00:11:06.304 --> 00:11:10.236
loading.
&gt;&gt; Brian Holt: Return,

140
00:11:10.236 --> 00:11:12.984
div className = details,

141
00:11:17.980 --> 00:11:20.967
&gt;&gt; Brian Holt: Another div inside of that,

142
00:11:20.967 --> 00:11:29.241
and we're gonna have an h1.
&gt;&gt; Brian Holt: H1 with a name,

143
00:11:32.175 --> 00:11:39.197
&gt;&gt; Brian Holt: h2 with animal,

144
00:11:39.197 --> 00:11:44.814
and- breed,

145
00:11:44.814 --> 00:11:51.842
and- location.

146
00:11:54.271 --> 00:11:59.127
&gt;&gt; Brian Holt: And then last thing under

147
00:11:59.127 --> 00:12:05.838
that go to p with the description,

148
00:12:14.712 --> 00:12:15.597
&gt;&gt; Brian Holt: And this will take

149
00:12:15.597 --> 00:12:19.378
everything that we loaded from the API
in display in a nice way for our users.

150
00:12:38.073 --> 00:12:38.834
&gt;&gt; Brian Holt: Okay, so

151
00:12:38.834 --> 00:12:43.604
just to refresh the page,
then I'll click on one of these.

152
00:12:43.604 --> 00:12:47.963
And you can see here it takes me to
a page with that cats information.

153
00:12:47.963 --> 00:12:53.245
Did I get the name wrong?
&gt;&gt; Brian Holt: Yeah,

154
00:12:53.245 --> 00:12:56.969
I didn't, that's weird.

155
00:12:56.969 --> 00:12:59.952
It should give me an error about that.

156
00:12:59.952 --> 00:13:02.523
And now we have.

157
00:13:02.523 --> 00:13:07.510
I'm not showing the image yet
we'll do that here in a second we're gonna

158
00:13:07.510 --> 00:13:12.170
build the carousel but,
&gt;&gt; Brian Holt: But if you do notice for

159
00:13:12.170 --> 00:13:15.949
a second it does say loading
up there before flash is,

