WEBVTT

1
00:00:00.390 --> 00:00:06.480
&gt;&gt; Brian Holt: So keys,
in order to get rid of this key problem,

2
00:00:06.480 --> 00:00:09.520
let's talk a little bit
about how React renders.

3
00:00:13.000 --> 00:00:15.560
Let's imagine that I had an ability
to sort these differently.

4
00:00:15.560 --> 00:00:21.690
Or maybe I wanna sort one time by
location in a different time by breeds.

5
00:00:23.270 --> 00:00:24.780
Well, that would be pretty easy to do.

6
00:00:24.780 --> 00:00:28.663
I just write a .sort method for
that before I did .map, and

7
00:00:28.663 --> 00:00:31.530
it would sort just fine, right?

8
00:00:31.530 --> 00:00:33.735
The problem is,
if I render it one way, and

9
00:00:33.735 --> 00:00:38.210
then I tell React to re-render a different
way, it sees that things have changed, but

10
00:00:38.210 --> 00:00:40.443
it doesn't know how things have changed.

11
00:00:40.443 --> 00:00:43.841
And it doesn't do that in depth of
checking to figure out how it changed.

12
00:00:43.841 --> 00:00:48.104
So if I did that, that's the same data
objects just rearranged a different way,

13
00:00:48.104 --> 00:00:51.192
it would destroy everything and
re-render everything.

14
00:00:51.192 --> 00:00:55.081
Now imagine these are really deep
complicated DOM objects that's really

15
00:00:55.081 --> 00:00:58.656
expensive, and you're gonna see
jenk in your scrolling, right,

16
00:00:58.656 --> 00:01:00.552
which we're trying to avoid that.

17
00:01:00.552 --> 00:01:06.060
We're trying to be buttery smooth
120 frames per second kind of stuff.

18
00:01:06.060 --> 00:01:07.310
Or 60 at least.

19
00:01:08.460 --> 00:01:10.930
So that's where key comes in.

20
00:01:10.930 --> 00:01:14.850
Key is basically giving React the handles
like hey, just do a quick check and

21
00:01:14.850 --> 00:01:18.850
if this key is the same key for
here and here, don't destroy it,

22
00:01:18.850 --> 00:01:20.650
just move it, right?

23
00:01:20.650 --> 00:01:23.190
It'll actually take that DOM element and
move it down.

24
00:01:23.190 --> 00:01:26.830
It's way faster,
the browser's really good at doing that.

25
00:01:26.830 --> 00:01:28.136
So that's what this key is.

26
00:01:28.136 --> 00:01:32.066
It's some unique attribute about that
object that if it moves from index 0 to

27
00:01:32.066 --> 00:01:34.856
index 10, it's like,
this just moved there.

28
00:01:34.856 --> 00:01:36.216
I'll just move it there.

29
00:01:36.216 --> 00:01:38.810
So the key is don't use index, right?

30
00:01:38.810 --> 00:01:42.258
Because if that index is not tied to
the object, it might move around.

31
00:01:42.258 --> 00:01:44.521
You need to use some unique identifier.

32
00:01:44.521 --> 00:01:47.897
And these pets actually have IDs so
that's the easiest way to do it.

33
00:01:47.897 --> 00:01:51.787
What you're gonna do is
you're gonna say key=pet.

34
00:01:51.787 --> 00:01:54.034
Something unique to that pet, right?

35
00:01:54.034 --> 00:01:57.652
In this case,
I can guarantee that the ID is the same.

36
00:01:57.652 --> 00:01:58.897
But I couldn't do name, right?

37
00:01:58.897 --> 00:02:01.562
I could have two Fidos in there and
then React would be like,

38
00:02:01.562 --> 00:02:03.283
well I don't know which one is which.

39
00:02:03.283 --> 00:02:04.491
I'm just gonna render the first one.

40
00:02:04.491 --> 00:02:06.550
It'll actually drop the second one.

41
00:02:06.550 --> 00:02:08.260
So, make sure that it's definitely unique.

42
00:02:11.640 --> 00:02:14.850
Sometimes, you will have things that you
will know will literally never re-order

43
00:02:14.850 --> 00:02:16.210
and it doesn't actually matter.

44
00:02:16.210 --> 00:02:18.649
In that case, go ahead and put index, but

45
00:02:18.649 --> 00:02:22.218
that is the only case where it's
okay to put index as the key.

46
00:02:26.825 --> 00:02:31.520
&gt;&gt; Brian Holt: If you have anything unique
about the particular object, just do that.

47
00:02:33.950 --> 00:02:37.660
And now, if you go back,
we don't see this anymore.

48
00:02:38.700 --> 00:02:39.470
So, that's what key is.

49
00:02:39.470 --> 00:02:43.010
For the most part, React is really
good about not making you step in for

50
00:02:43.010 --> 00:02:47.630
performance optimizations, that it's
good about doing everything on its own.

51
00:02:47.630 --> 00:02:50.217
This is one of the few cases
where it requires you to step in.

52
00:02:53.908 --> 00:02:54.480
&gt;&gt; Brian Holt: Yeah?

53
00:02:54.480 --> 00:02:57.719
&gt;&gt; Speaker 2: Is there ever
a case where index is okay?

54
00:02:59.240 --> 00:03:02.950
&gt;&gt; Brian Holt: Yeah, so if I had a group
of objects that I know was never going to

55
00:03:02.950 --> 00:03:07.810
be re-rendered, and never was going to
be re-ordered then you could use index.

56
00:03:07.810 --> 00:03:09.190
Even still in that case,

57
00:03:09.190 --> 00:03:14.310
I would implore you to, if it has
a unique identifier to use that still.

58
00:03:14.310 --> 00:03:17.170
Just because that's how it is today
doesn't mean that's how it's going to

59
00:03:17.170 --> 00:03:18.210
be tomorrow.

60
00:03:18.210 --> 00:03:21.260
It's just one more thing you
don't have to worry about, right?

61
00:03:21.260 --> 00:03:24.330
But, if there literally is nothing
unique about it, just use index.

62
00:03:24.330 --> 00:03:26.698
I guess that's the one case
I would be okay with it,

63
00:03:26.698 --> 00:03:29.026
is if there's nothing
unique about those items.

64
00:03:33.878 --> 00:03:37.938
&gt;&gt; Brian Holt: But sometimes,
that unique identifier will be URLs,

65
00:03:37.938 --> 00:03:39.620
it'll be file names.

66
00:03:39.620 --> 00:03:42.330
It'll be a bunch of stuff that
you can guarantee is unique.

67
00:03:42.330 --> 00:03:43.640
Anything you can guarantee unique.

