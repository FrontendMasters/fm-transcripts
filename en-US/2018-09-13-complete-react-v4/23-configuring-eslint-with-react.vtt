WEBVTT

1
00:00:00.270 --> 00:00:03.067
&gt;&gt; Brian Holt: Let's go fix ESLint.

2
00:00:03.067 --> 00:00:07.919
Obviously, ESLint is pretty upset at
this point because right here it says

3
00:00:07.919 --> 00:00:09.701
you never use Pet, right?

4
00:00:09.701 --> 00:00:13.597
Well, I do use Pet, it's down there,
but ESLint can't see that.

5
00:00:17.101 --> 00:00:21.750
&gt;&gt; Brian Holt: So there's a couple of
things that I actually want you to install

6
00:00:21.750 --> 00:00:23.048
for ESLint here.

7
00:00:23.048 --> 00:00:29.647
So we're gonna open our eslint.json,
&gt;&gt; Brian Holt: We're

8
00:00:29.647 --> 00:00:35.062
going to install some additional linting
features for React itself, right?

9
00:00:35.062 --> 00:00:38.754
So like one of the things that I
really like that you can do now,

10
00:00:38.754 --> 00:00:41.594
is there's a thing called
JSX Accessibility.

11
00:00:41.594 --> 00:00:45.915
That will actually lint to make sure that
you're doing good accessibility practices.

12
00:00:45.915 --> 00:00:49.996
This is good for me because I
don't know all the intricacies and

13
00:00:49.996 --> 00:00:54.847
nuances of Accessibility, like keeping
your webpage accessible is one,

14
00:00:54.847 --> 00:00:57.159
your moral duty as a web developer.

15
00:00:57.159 --> 00:00:58.833
The web is for everyone, right?

16
00:00:58.833 --> 00:01:02.702
And two, it can be pretty difficult if
you don't know exactly what you're doing.

17
00:01:02.702 --> 00:01:05.603
So that's why I like this ESLint
package that just says, hey,

18
00:01:05.603 --> 00:01:09.349
you're not doing this, if you do this
will make accessible for people, right?

19
00:01:09.349 --> 00:01:16.352
Like for example, doing onClick handler on
an h1, is terrible accessibility practice.

20
00:01:16.352 --> 00:01:19.355
And it's gonna actually fails us for
us, so let's go make that happen.

21
00:01:22.084 --> 00:01:23.284
&gt;&gt; Brian Holt: And some other ones.

22
00:01:23.284 --> 00:01:29.791
So come to your,
&gt;&gt; Brian Holt: We'll

23
00:01:29.791 --> 00:01:34.243
just make this in a new tab I guess,

24
00:01:34.243 --> 00:01:40.183
talks/temp,
&gt;&gt; Brian Holt: fem, okay?

25
00:01:40.183 --> 00:01:45.063
So I'm in the root directory of my project
here and I'm gonna say npm install -D,

26
00:01:45.063 --> 00:01:48.190
and we're going to install
quite a few things here.

27
00:01:49.350 --> 00:01:54.263
babel -eslint, so we need ESLint
to be able to process JSX files,

28
00:01:54.263 --> 00:01:58.877
so we needed to,
&gt;&gt; Brian Holt: Be able to use babel

29
00:01:58.877 --> 00:02:00.707
underneath the hood.

30
00:02:00.707 --> 00:02:05.655
eslint-plugin-import, this will
help it with things like making

31
00:02:05.655 --> 00:02:09.249
sure that we're doing imports and
exports okay.

32
00:02:09.249 --> 00:02:11.315
So some linting rules around that.

33
00:02:11.315 --> 00:02:19.429
eslint-plugin-jsx-a11y.

34
00:02:19.429 --> 00:02:20.837
Accessibility, right?

35
00:02:20.837 --> 00:02:27.022
There's a 11 characters between a and
y in Accessibility, that's why it's a11y.

36
00:02:27.022 --> 00:02:33.504
And eslint-plugin-react.

37
00:02:33.504 --> 00:02:36.011
So I will leave that up for
you for just a second.

38
00:02:45.427 --> 00:02:47.768
&gt;&gt; Brian Holt: Okay, let's go ahead and
install all of those.

39
00:02:49.900 --> 00:02:53.266
&gt;&gt; Brian Holt: Okay, so
now that we have all of those installed,

40
00:02:53.266 --> 00:02:56.320
we're gonna go back to our eslintrc.json.

41
00:02:58.357 --> 00:03:05.478
&gt;&gt; Brian Holt: And
we're gonna do some more extends here.

42
00:03:05.478 --> 00:03:08.516
Order with these extends
actually is important,

43
00:03:08.516 --> 00:03:12.180
because it's going to apply them in order.

44
00:03:12.180 --> 00:03:14.116
So it's very essential
that prettier comes last,

45
00:03:14.116 --> 00:03:17.233
that's really the one that you have to
remember, that prettier has to come last.

46
00:03:17.233 --> 00:03:19.848
Because all of these are going
to enable things, and

47
00:03:19.848 --> 00:03:22.702
the last thing that you want to
happen is prettier to go and

48
00:03:22.702 --> 00:03:25.511
disable the things that you
don't want it to check for.

49
00:03:25.511 --> 00:03:30.112
Here we're gonna do

50
00:03:30.112 --> 00:03:35.253
plugin-, sorry,

51
00:03:35.253 --> 00:03:41.750
plugin: import/errors,

52
00:03:41.750 --> 00:03:49.600
plug: react/recommended, and

53
00:03:49.600 --> 00:03:58.816
plugin: jsx-a11y/recommended.

54
00:04:01.121 --> 00:04:05.184
&gt;&gt; Brian Holt: So what this syntax means
is there's a plugin called the import

55
00:04:05.184 --> 00:04:09.028
plugin, and I want you to go make this so
it errors, right?

56
00:04:09.028 --> 00:04:11.174
And I think you can also
have warning here, and

57
00:04:11.174 --> 00:04:13.166
it will just warn you
when it has problems.

58
00:04:13.166 --> 00:04:15.590
But if you're having import problems,
we want it to fail.

59
00:04:15.590 --> 00:04:17.762
So that's what errors means.

60
00:04:17.762 --> 00:04:19.243
And then react/recommended,

61
00:04:19.243 --> 00:04:22.269
it has this like sub set of things
that are recommends that you do.

62
00:04:22.269 --> 00:04:25.188
It actually has a lot more
rules you can turn on.

63
00:04:25.188 --> 00:04:28.875
For example, it has one called ordering
where it forces you to like order your

64
00:04:28.875 --> 00:04:31.490
React methods in a certain way,
and I hate it.

65
00:04:31.490 --> 00:04:35.130
Because I don't wanna reorganize it for
some arbitrary reason, so

66
00:04:35.130 --> 00:04:37.200
I always turn that one off.

67
00:04:37.200 --> 00:04:42.136
So that's why I stick with the recommended
ones, same with jsx-ally, it has some

68
00:04:42.136 --> 00:04:46.950
even more strict rules, but we're just
gonna stick with the recommended ones.

69
00:04:46.950 --> 00:04:53.881
Okay, the next one that we're gonna
turn off just one of these rules.

70
00:04:53.881 --> 00:04:54.995
So rules:, so

71
00:04:54.995 --> 00:05:00.924
this actually let's you address individual
rules inside of your React project.

72
00:05:00.924 --> 00:05:08.400
The only one that we're gonna turn
off here is react/prop-types.

73
00:05:08.400 --> 00:05:11.048
I'm not gonna be showing you this
workshop how to do prop-types,

74
00:05:11.048 --> 00:05:14.540
because at the end of this workshop I'm
gonna show you how to do TypeScript.

75
00:05:14.540 --> 00:05:20.610
Which is even stricter than prop-types,
so we're not gonna worry about that.

76
00:05:20.610 --> 00:05:24.178
Otherwise, this requires you to
do prop-types which in general is

77
00:05:24.178 --> 00:05:26.505
useful if you're not gonna do TypeScript.

78
00:05:29.697 --> 00:05:33.917
&gt;&gt; Brian Holt: Okay,
we're gonna have to add some plugins here.

79
00:05:33.917 --> 00:05:39.233
Plugins, which is gonna be an array,

80
00:05:39.233 --> 00:05:43.386
and we're gonna have react,

81
00:05:43.386 --> 00:05:47.381
import, and jsx-a11y.

82
00:05:47.381 --> 00:05:48.775
Plugins versus extends,

83
00:05:48.775 --> 00:05:53.408
plugins are going to augment the abilities
of ESLint to do additional things, right?

84
00:05:53.408 --> 00:05:58.015
So for example, the React one, enables
React to see that React is actually being

85
00:05:58.015 --> 00:06:01.488
used despite the fact that's
not being explicitly called.

86
00:06:01.488 --> 00:06:05.197
Or that Pet is being used as a component,
right?

87
00:06:05.197 --> 00:06:10.064
So that's what React does,
it augments the ability of ESLint.

88
00:06:11.663 --> 00:06:14.704
&gt;&gt; Brian Holt: And
I think that should be it.

89
00:06:20.744 --> 00:06:24.160
&gt;&gt; Brian Holt: Okay, so
now if you come back over here,

90
00:06:24.160 --> 00:06:27.379
notice that Pet is no longer an error.

91
00:06:27.379 --> 00:06:29.611
But we have an error on this onClick,

92
00:06:29.611 --> 00:06:32.930
because h1s are not meant
to be interactive, right?

93
00:06:32.930 --> 00:06:34.120
They're not buttons.

94
00:06:34.120 --> 00:06:36.910
So it says,
if you have an h1 that's interactive

95
00:06:36.910 --> 00:06:39.530
you're not allowing screen
readers to be able to reach it.

96
00:06:39.530 --> 00:06:44.680
So that's why it's like, don't do this or
you have to do additional things, right?

97
00:06:44.680 --> 00:06:53.257
So here I would have to have
like an onKeyDown=this.handle.

98
00:06:53.257 --> 00:06:56.400
There's a couple of things that you have
to do to get it to actually work that way.

99
00:06:56.400 --> 00:07:01.139
But nonetheless, don't put interact
developments on h1 if you can avoid it.

100
00:07:01.139 --> 00:07:02.586
They should be on buttons, right?

101
00:07:02.586 --> 00:07:04.377
That's what buttons are for.

102
00:07:06.682 --> 00:07:09.895
&gt;&gt; Brian Holt: So the way we're gonna
get around this is we're just going to

103
00:07:09.895 --> 00:07:13.059
delete it, because this is not
what we wanted to do anyway.

104
00:07:25.456 --> 00:07:27.416
&gt;&gt; Brian Holt: Then if you go here,
look at Pet,

105
00:07:27.416 --> 00:07:31.150
notice that React was an error before,
it's not an error now.

106
00:07:31.150 --> 00:07:35.729
But notice that we're not explicitly
calling React anywhere in here, right?

107
00:07:35.729 --> 00:07:39.723
This looks like it's an unused variable,
doesn't it?

108
00:07:39.723 --> 00:07:45.261
But keep in mind, what are those
JSX being transpiled to, right?

109
00:07:45.261 --> 00:07:48.691
They're being transpiled to
reacts.createElementCalls, so

110
00:07:48.691 --> 00:07:50.830
React still has to be in scope.

111
00:07:50.830 --> 00:07:55.470
So anywhere, anytime that you're
using JSX, you have to import React.

112
00:07:56.620 --> 00:08:01.096
Now the good news is,
if we do this, guess what?

113
00:08:01.096 --> 00:08:04.860
It's gonna say, hey, React has to
be in scope if you're using JSX.

114
00:08:04.860 --> 00:08:08.964
So ESLint kinda helps us remember
that we're supposed to do that.

115
00:08:11.273 --> 00:08:12.880
&gt;&gt; Brian Holt: This is why I like ESLint.

116
00:08:12.880 --> 00:08:17.440
It helps you catch dumb errors
like this really quickly.

117
00:08:17.440 --> 00:08:21.480
You're not gonna get too far in the rules
like wait, why is that happening?

118
00:08:21.480 --> 00:08:25.566
No, it's really quick like hey,
this is broken, fix it right now,

119
00:08:25.566 --> 00:08:28.040
while everything is still in your brain.

120
00:08:28.040 --> 00:08:31.120
So just to give you
more alternatives here,

121
00:08:31.120 --> 00:08:33.790
I think I mentioned this a little bit.

122
00:08:33.790 --> 00:08:37.474
But in previous versions of this
class I taught standard and Airbnb.

123
00:08:37.474 --> 00:08:42.320
Airbnb's React rules are way more strict.

124
00:08:42.320 --> 00:08:46.571
Now I think this can be helpful sometimes
especially if you're having someone like

125
00:08:46.571 --> 00:08:51.110
a bunch of C# developers or Java
developers work with you on a project.

126
00:08:51.110 --> 00:08:55.697
Giving them the Airbnb rules keeps them
in very JavaScript looking code, right?

127
00:08:55.697 --> 00:08:58.818
Otherwise, they're gonna write
JavaScript code that looks like Java,

128
00:08:58.818 --> 00:09:00.893
which we have all seen and
never wanna see again.

129
00:09:00.893 --> 00:09:04.870
Nothing wrong with Java, you just
don't write it the same way, right?

130
00:09:04.870 --> 00:09:08.040
So that's a time that I would consider
using the Airbnb rules again.

131
00:09:08.040 --> 00:09:11.335
For me, I spend all day writing
JavaScript and TypeScript.

132
00:09:11.335 --> 00:09:15.990
So I don't really wanna be burdened
by an ESLint telling me very,

133
00:09:15.990 --> 00:09:17.864
very strictly what to do.

134
00:09:17.864 --> 00:09:20.794
So that's why I've kind of gone
back to other side and saying,

135
00:09:20.794 --> 00:09:23.467
just let me write my code and
help me catch common errors.

136
00:09:23.467 --> 00:09:26.763
That's kind of my new ethos
with these kind of things.

137
00:09:26.763 --> 00:09:29.662
But Airbnb's really good if you wanna
be very strict about how you want your

138
00:09:29.662 --> 00:09:30.225
code to look.

139
00:09:30.225 --> 00:09:33.495
It makes it look like the same
person wrote all of your code.

140
00:09:33.495 --> 00:09:35.113
Almost to a frustrating point.

141
00:09:35.113 --> 00:09:37.633
Well, actually no,
definitely to a frustrating point.

142
00:09:39.977 --> 00:09:42.454
&gt;&gt; Brian Holt: So
feel free to check those out.

143
00:09:42.454 --> 00:09:47.905
Yeah, we have another branch here or
another commit here.

144
00:09:47.905 --> 00:09:52.494
So if you have fallen behind,
feel free to come up and grab this commit.

145
00:09:52.494 --> 00:09:54.456
Yeah, question?

146
00:09:54.456 --> 00:09:58.051
&gt;&gt; off screen male: Why would it be
frustrating to have your code look like it

147
00:09:58.051 --> 00:10:00.354
was all written by the same person?

148
00:10:00.354 --> 00:10:04.478
&gt;&gt; Brian Holt: The net result
isn't actually frustrating.

149
00:10:04.478 --> 00:10:08.797
What's frustrating is that you write
code that is good, and works well, and

150
00:10:08.797 --> 00:10:11.662
does all these things just
as well as you want it to.

151
00:10:11.662 --> 00:10:13.363
But the linter's not happy with it.

152
00:10:13.363 --> 00:10:17.748
So you have to go change your code that
was already good into something that

153
00:10:17.748 --> 00:10:19.244
conforms to the linter.

154
00:10:19.244 --> 00:10:21.360
I find that frustrating.

155
00:10:21.360 --> 00:10:25.760
In general, I want people to have as much
freedom as possible because then you're

156
00:10:25.760 --> 00:10:29.869
not focused on pleasing the linter,
you're focused on solving problems.

157
00:10:29.869 --> 00:10:33.764
And that's kind of my general, like I
worked as an infrastructure engineer at

158
00:10:33.764 --> 00:10:36.904
LinkedIn, and now I do
infrastructure at Microsoft, right?

159
00:10:36.904 --> 00:10:41.735
In general, I want to have tools that
help you do your job, not like make you

160
00:10:41.735 --> 00:10:46.738
conform to some dumb standard, it's
kind of my thought process these days.

161
00:10:46.738 --> 00:10:51.666
It changes obviously as you can see by
each version of this workshop I give, but

162
00:10:51.666 --> 00:10:53.767
yeah, it's kind of my thought.

163
00:10:53.767 --> 00:10:55.115
Other questions?

164
00:10:58.702 --> 00:11:01.578
&gt;&gt; Brian Holt: Cool, so like I said
there's another commit at this point.

165
00:11:01.578 --> 00:11:05.218
So feel free to go ahead and
go grab that if you need it.

166
00:11:08.390 --> 00:11:11.778
&gt;&gt; Brian Holt: Great, so
we're now gonna move on to doing state and

167
00:11:11.778 --> 00:11:13.860
life cycle methods with React.

168
00:11:14.860 --> 00:11:17.480
From here on out we are going
to be just using JSX.

169
00:11:19.300 --> 00:11:23.576
You're welcome to continue doing it with
the createElementCall if you feel so

170
00:11:23.576 --> 00:11:26.897
inclined, but I would invite you
to at least give JSX a shot.

171
00:11:26.897 --> 00:11:30.635
Like I said, even the most
skeptical people that I knew about

172
00:11:30.635 --> 00:11:32.994
it eventually ended up on JSX as well.

173
00:11:32.994 --> 00:11:37.738
Just all the examples are written in it,
all the documentation is written in it.

174
00:11:37.738 --> 00:11:40.579
Every company that I know
of personally is using JSX.

175
00:11:40.579 --> 00:11:43.103
So I would invite you to
just keep going with it, and

176
00:11:43.103 --> 00:11:46.527
I think by the end of the course
you'll feel a bit different about it.

177
00:11:46.527 --> 00:11:51.440
Okay, so at this point I would

178
00:11:51.440 --> 00:11:55.429
like you all to go to-
&gt;&gt; off screen male: I do have one

179
00:11:55.429 --> 00:11:56.260
quick question.

180
00:11:56.260 --> 00:11:57.720
&gt;&gt; Brian Holt: Sure.
&gt;&gt; off screen male: I'm getting all sorts

181
00:11:57.720 --> 00:12:03.360
of linting errors, and I think it's
because it's going into my node modules.

182
00:12:03.360 --> 00:12:07.840
Is there a way to-
&gt;&gt; Brian Holt: It should not do that.

183
00:12:09.661 --> 00:12:11.522
&gt;&gt; Brian Holt: Let's see if I say,
you know what?

184
00:12:11.522 --> 00:12:12.289
I think you're right.

185
00:12:12.289 --> 00:12:13.077
If you say npm run lint,

186
00:12:13.077 --> 00:12:14.210
it probably is gonna-
&gt;&gt; off screen male: Yeah,

187
00:12:14.210 --> 00:12:17.344
that's what I'm having to do
cuz I'm using the sublime and

188
00:12:17.344 --> 00:12:19.106
I didn't have time to setup the.

189
00:12:19.106 --> 00:12:21.403
&gt;&gt; Brian Holt: Yeah,
cuz it's gonna go into all of your module.

190
00:12:21.403 --> 00:12:22.846
Yeah, so good point.

191
00:12:22.846 --> 00:12:27.505
So come in here to your package.json,

192
00:12:27.505 --> 00:12:30.751
and change lint to src/ and

193
00:12:30.751 --> 00:12:35.701
that way it'll just be checking source.

194
00:12:38.886 --> 00:12:40.482
&gt;&gt; Brian Holt: Yeah,
I had this problem before.

195
00:12:45.602 --> 00:12:50.306
&gt;&gt; Brian Holt: So now if you run it,
&gt;&gt; Brian Holt: You'll

196
00:12:50.306 --> 00:12:54.052
just be checking those files.

197
00:12:54.052 --> 00:12:55.933
&gt;&gt; off screen male: Yeah, it worked.

198
00:12:55.933 --> 00:13:02.153
&gt;&gt; Brian Holt: Cool, thank you,
I forgot about that.

