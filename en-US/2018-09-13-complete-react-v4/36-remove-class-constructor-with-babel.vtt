WEBVTT

1
00:00:00.090 --> 00:00:06.080
&gt;&gt; Brian Holt: So I wanna show you a nice
little nicety about working with React.

2
00:00:06.080 --> 00:00:11.042
This constructor thing is kind of
burdensome, and it's also burdensome for

3
00:00:11.042 --> 00:00:16.231
other reasons that I'll show you later,
but it'd be really nice if we could just

4
00:00:16.231 --> 00:00:21.464
do something like,
&gt;&gt; Brian Holt: Like this.

5
00:00:32.656 --> 00:00:34.130
&gt;&gt; Brian Holt: Something like that,

6
00:00:34.130 --> 00:00:39.580
where you could just define state as
like a top level property of a class.

7
00:00:39.580 --> 00:00:40.720
Wouldn't it be nice if we could do that?

8
00:00:42.060 --> 00:00:47.060
Technically, with today's JavaScript
in a lot of the browsers, this isn't

9
00:00:48.060 --> 00:00:51.740
technically feasible, but I believe this
is either stage three or stage four now.

10
00:00:51.740 --> 00:00:54.600
Then this is actually a new standard for
JavaScript.

11
00:00:54.600 --> 00:00:56.800
If it wasn't 2018,
then it's gonna be in 2019.

12
00:00:56.800 --> 00:01:02.942
I think it was 2018, so I think this
is actually real JavaScript now.

13
00:01:02.942 --> 00:01:07.623
But we need to go tell
Babel to accept this.

14
00:01:07.623 --> 00:01:09.792
The unfortunate thing is, so far,

15
00:01:09.792 --> 00:01:13.711
Parcel has been managing all of
our Babel configuration for us.

16
00:01:13.711 --> 00:01:19.137
So now we actually have to,
if we wanna include this Babel

17
00:01:19.137 --> 00:01:24.689
transformation we have to go
write our own babble config.

18
00:01:24.689 --> 00:01:29.249
Which is not a big deal, I think its
worthwhile most of the time when I'm

19
00:01:29.249 --> 00:01:33.961
working on a project parcels babble
configuration isn't enough for me.

20
00:01:33.961 --> 00:01:34.571
So, what is babble?

21
00:01:34.571 --> 00:01:36.843
Babble is a transpilot for your code.

22
00:01:36.843 --> 00:01:40.740
What's taking your code from
JSF to normal JavaScript.

23
00:01:40.740 --> 00:01:41.470
That's babble.

24
00:01:41.470 --> 00:01:42.830
It's a transpiler,

25
00:01:42.830 --> 00:01:45.660
it transforms one set of JavaScript
into a different set of JavaScript.

26
00:01:47.210 --> 00:01:49.790
So we're able to write
futuristic JavaScript and

27
00:01:49.790 --> 00:01:52.960
get JavaScript that works
today in today's browsers.

28
00:01:54.250 --> 00:01:58.280
So I want to go to, yeah,
it's gonna say here.

29
00:01:58.280 --> 00:02:00.370
I don't understand this,
that's what it's saying right now, but

30
00:02:00.370 --> 00:02:01.254
we can make it understand it.

31
00:02:05.350 --> 00:02:09.188
So let's go here, and

32
00:02:09.188 --> 00:02:14.642
I want you to run this npm install

33
00:02:14.642 --> 00:02:20.096
-D babel-eslint babel-core

34
00:02:20.096 --> 00:02:25.146
babel-preset-env babel-

35
00:02:25.146 --> 00:02:32.822
plugin- transform- class- properties,

36
00:02:32.822 --> 00:02:38.688
and then babel- preset-react.

37
00:02:42.537 --> 00:02:44.164
&gt;&gt; Brian Holt: That's a lot.
I'll give you a second

38
00:02:57.580 --> 00:02:58.823
&gt;&gt; Brian Holt: Babel-eslint will allow

39
00:02:58.823 --> 00:03:02.230
eslint to use babel to transform
your quote so it can read it.

40
00:03:02.230 --> 00:03:05.730
Babel course the actual thing
it does is transformations.

41
00:03:05.730 --> 00:03:09.430
Babel present env is what takes
your future JavaScript and

42
00:03:09.430 --> 00:03:12.160
transpiles it to current JavaScript.

43
00:03:12.160 --> 00:03:17.000
Babel plugin transform class properties
is the thing that I just showed you.

44
00:03:17.000 --> 00:03:20.300
That allows you to do top
level properties on classes.

45
00:03:20.300 --> 00:03:26.003
And bable.present-react allows
Babel to understand JSX.

46
00:03:28.241 --> 00:03:30.270
&gt;&gt; Brian Holt: Okay, so
I'm gonna install all of those.

47
00:03:31.470 --> 00:03:33.613
It should take a seconds,
it's a couple libraries.

48
00:03:36.384 --> 00:03:38.552
&gt;&gt; Brian Holt: Okay,
so we got all of those.

49
00:03:38.552 --> 00:03:45.310
Now, I want you to go create
a new file and call it .babelrc.

50
00:03:45.310 --> 00:03:48.700
This is not going to live
in the source directory,

51
00:03:48.700 --> 00:03:54.030
it's gonna live in the root directory
of your project next to package.json,

52
00:03:54.030 --> 00:03:57.766
next to esn.rc.json,
all of those, so .babelrc.

53
00:04:01.050 --> 00:04:01.820
&gt;&gt; Brian Holt: Okay?

54
00:04:05.438 --> 00:04:08.452
&gt;&gt; Brian Holt: In babelrc, we're gonna
give a couple of top-level properties.

55
00:04:08.452 --> 00:04:11.899
One of them is presets.

56
00:04:11.899 --> 00:04:16.450
And we're gonna give it react, and

57
00:04:16.450 --> 00:04:21.007
then we're gonna give it an array.

58
00:04:21.007 --> 00:04:23.000
This one is gonna be env.

59
00:04:23.000 --> 00:04:26.198
This is the weird way Babel
that does its configuration.

60
00:04:26.198 --> 00:04:29.473
So I need to get past properties to env,
that's why.

61
00:04:31.829 --> 00:04:35.515
&gt;&gt; Brian Holt: And I'm gonna do targets.

62
00:04:42.310 --> 00:04:44.056
&gt;&gt; Brian Holt: Browsers.

63
00:04:44.056 --> 00:04:47.306
So the cool thing about
babel-preset-env is I tell it hey,

64
00:04:47.306 --> 00:04:50.367
just target the last two major
release of all browsers and

65
00:04:50.367 --> 00:04:55.020
then, as they release new browsers, it'll
be targeting newer and newer browsers.

66
00:04:55.020 --> 00:04:57.900
So you'll be transpiling less and
less of your code.

67
00:04:57.900 --> 00:04:58.510
Right?

68
00:04:58.510 --> 00:05:02.490
Because if you say, Target IE 10,
it's going to transpile everything, right,

69
00:05:02.490 --> 00:05:05.220
because it's an old browser and
it doesn't understand all the new stuff.

70
00:05:05.220 --> 00:05:08.090
But like the latest version
of Chrome understands most of

71
00:05:08.090 --> 00:05:09.850
this stuff out of the box.

72
00:05:09.850 --> 00:05:11.510
So it won't transpile all of it.

73
00:05:11.510 --> 00:05:15.060
You wanna transpile less of it because
your code bundles will be smaller, and

74
00:05:15.060 --> 00:05:19.040
in theory they can be faster because
the browsers can actually handle the code

75
00:05:19.040 --> 00:05:21.780
interior in C, rather than in JavaScript.

76
00:05:21.780 --> 00:05:27.267
So, that's why in general it's
better to say browsers and

77
00:05:27.267 --> 00:05:30.239
then just say last 2 versions.

78
00:05:35.149 --> 00:05:38.556
&gt;&gt; Brian Holt: If you want to get like
really sophisticated with this, you can

79
00:05:38.556 --> 00:05:42.929
actually download the Google analytics
from your page, from your website, and

80
00:05:42.929 --> 00:05:46.940
feed it into EMV and it will actually
transpile it for your users, right?

81
00:05:46.940 --> 00:05:49.519
If you have users that are all users,
like new browsers,

82
00:05:49.519 --> 00:05:51.202
it'll transfile very little of it.

83
00:05:51.202 --> 00:05:54.393
But if you have a bunch of IE 11 users,
it'll transfile a lot of it for you.

84
00:05:54.393 --> 00:05:56.255
And just handles it automatically.

85
00:06:00.661 --> 00:06:03.116
&gt;&gt; Brian Holt: So you just say
like target in 99% of my users and

86
00:06:03.116 --> 00:06:05.280
it'll cover 99% of your users.

87
00:06:05.280 --> 00:06:06.100
Just pretty damn cool.

88
00:06:07.620 --> 00:06:08.700
&gt;&gt; Speaker 2: It's like a hook.

89
00:06:08.700 --> 00:06:13.330
&gt;&gt; Brian Holt: You have to
somehow dump a json object

90
00:06:13.330 --> 00:06:16.580
into your environment that
babel can read at bill time.

91
00:06:20.320 --> 00:06:24.499
If you go look at babel present env's
page it'll tell you how to do that.

92
00:06:27.530 --> 00:06:31.550
Okay, last thing here is when you plugins
and we need our one plugin that we wanted

93
00:06:31.550 --> 00:06:39.710
which was transform-class-properties.

94
00:06:39.710 --> 00:06:40.920
And we can save that.

95
00:06:40.920 --> 00:06:43.280
So now we've configured our babel.

96
00:06:43.280 --> 00:06:46.240
This is largely the same
thing as what we had before.

97
00:06:46.240 --> 00:06:49.150
Except now we can do class properties.

98
00:06:55.900 --> 00:07:00.270
So, just so you know, I have presets
here and I'm just putting react.

99
00:07:00.270 --> 00:07:03.960
It's implied that I have
babel preset react,

100
00:07:03.960 --> 00:07:05.840
so that's where that is coming from.

101
00:07:05.840 --> 00:07:09.730
This is babel-preset-env.

102
00:07:09.730 --> 00:07:13.150
I think you can actually leave these,
if you wanna be explicit.

103
00:07:13.150 --> 00:07:18.390
But Babel just makes it into, if it's
in presets, it's babel-preset., right?

104
00:07:18.390 --> 00:07:22.159
Same thing with here,
I can have babel-plugin-transform,

105
00:07:22.159 --> 00:07:25.654
which is what we installed off of MPM,
but it's implied.

106
00:07:29.599 --> 00:07:33.142
&gt;&gt; Brian Holt: Okay, I think the last
thing that we need to do here,

107
00:07:33.142 --> 00:07:36.703
we need to go and
help eslint [INAUDIBLE] a little bit.

108
00:07:36.703 --> 00:07:40.311
So go to your eslint.json.

109
00:07:40.311 --> 00:07:45.800
&gt;&gt; Brian Holt: And, as another top level
thing we need to give it a parser.

110
00:07:47.780 --> 00:07:52.300
Parser and
you just need to say babel-eslint.

111
00:07:52.300 --> 00:07:57.355
This is going to tell eslint
hey before you try and

112
00:07:57.355 --> 00:08:03.533
lint my code you're gonna have
to use babel as your parser.

113
00:08:07.732 --> 00:08:11.580
&gt;&gt; Brian Holt: Okay, questions so far?

114
00:08:11.580 --> 00:08:14.970
So the only thing I added here is this.

115
00:08:14.970 --> 00:08:16.490
The order's not important, so.

116
00:08:17.810 --> 00:08:20.110
And then we did this babel RC file,
as well.

117
00:08:21.790 --> 00:08:26.670
So now that we've done that,
we go into details.JS.

118
00:08:27.760 --> 00:08:29.590
Notice this isn't airing out anymore.

119
00:08:30.630 --> 00:08:33.550
Now eslint understands this and
so does parcel.

120
00:08:34.910 --> 00:08:36.710
So we don't have to have
constructors anymore.

121
00:08:36.710 --> 00:08:38.650
We can just make it a top
level class property.

122
00:08:39.860 --> 00:08:42.330
And I'll say this is
actually pretty common with

123
00:08:42.330 --> 00:08:44.990
the react ecosystem at the time or
right now.

124
00:08:44.990 --> 00:08:46.029
This is what people are doing.

125
00:08:47.360 --> 00:08:48.400
Because it's shorter.

126
00:08:48.400 --> 00:08:49.020
It makes more sense.

127
00:08:49.020 --> 00:08:50.930
We don't have to have
constructors anymore.

128
00:08:50.930 --> 00:08:54.293
So now, if you do this, you almost
never need to have a constructor.

129
00:08:58.490 --> 00:09:03.039
&gt;&gt; Brian Holt: Okay, so let's go make
sure that all of that works still, so

130
00:09:03.039 --> 00:09:05.105
I'm gonna say npm run dev.

131
00:09:06.897 --> 00:09:11.030
&gt;&gt; Brian Holt: I don't know why
that took a second but it did.

132
00:09:11.030 --> 00:09:12.356
I think I had to clear my cache.

