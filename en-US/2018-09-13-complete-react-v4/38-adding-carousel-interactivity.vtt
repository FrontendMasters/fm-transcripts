WEBVTT

1
00:00:01.630 --> 00:00:06.010
&gt;&gt; Brian Holt: So the next thing we
want to do is we want to add the ability

2
00:00:06.010 --> 00:00:10.110
to add, so I can click on it that it will
show me a different primary image, right?

3
00:00:11.720 --> 00:00:14.910
So the way I'm gonna do this is
I'm gonna add a click handler and

4
00:00:14.910 --> 00:00:20.860
say handleIndex Click.

5
00:00:24.175 --> 00:00:27.078
&gt;&gt; Brian Holt: So typically this would
be a method that looks like this.

6
00:00:27.078 --> 00:00:30.731
This.setState.

7
00:00:36.368 --> 00:00:38.730
&gt;&gt; Brian Holt: And this is we're
gonna take in an event, right?

8
00:00:38.730 --> 00:00:42.150
This looks just like a normal event
handler that you would see on

9
00:00:42.150 --> 00:00:44.870
every jQuery application, right?

10
00:00:44.870 --> 00:00:49.540
This event technically is
a react synthetic event, right.

11
00:00:49.540 --> 00:00:51.770
But you can treat it just
like a normal dom event.

12
00:00:51.770 --> 00:00:54.860
They modeled the API to
be exactly the same.

13
00:00:55.930 --> 00:01:00.046
And then I would say active and

14
00:01:00.046 --> 00:01:09.565
event.Target
&gt;&gt; Brian Holt: And

15
00:01:09.565 --> 00:01:12.215
I don't think I did that part yet
so we still have to go do that but

16
00:01:12.215 --> 00:01:14.630
we'll do it here in just a second.

17
00:01:14.630 --> 00:01:18.928
We're gonna say, .dataset.index.

18
00:01:21.624 --> 00:01:22.460
&gt;&gt; Brian Holt: Okay?

19
00:01:24.410 --> 00:01:28.280
So now we need to go put this data
set thing on the image itself so

20
00:01:28.280 --> 00:01:32.660
that we know when we click it,
that we're getting the index back so

21
00:01:32.660 --> 00:01:36.330
that we can set that as
the new active thing.

22
00:01:36.330 --> 00:01:43.205
So the way we're going to do that is
we're going to go to our image here and

23
00:01:43.205 --> 00:01:48.977
just anywhere put data dash
index equals index, like that.

24
00:01:56.931 --> 00:01:58.620
&gt;&gt; Brian Holt: Yeah, question.

25
00:01:58.620 --> 00:02:01.320
&gt;&gt; off screen male: Are you using
state instead of props just to avoid

26
00:02:01.320 --> 00:02:03.040
the filter on each rerender?

27
00:02:03.040 --> 00:02:03.540
&gt;&gt; Brian Holt: Yes.

28
00:02:04.600 --> 00:02:06.530
So that's a good question.

29
00:02:06.530 --> 00:02:08.640
Why don't we just do this,
cuz we do it somewhere else.

30
00:02:08.640 --> 00:02:11.320
I think we do it in every single
render method, we just do the filter.

31
00:02:12.470 --> 00:02:14.873
[COUGH] The fact of the matter
is this can be done once, and

32
00:02:14.873 --> 00:02:16.930
then not have to be worried
about in the future.

33
00:02:16.930 --> 00:02:20.590
And then as props change in
the future we can keep re-doing it.

34
00:02:20.590 --> 00:02:23.070
But this is not changing very frequently.

35
00:02:23.070 --> 00:02:25.671
Nor is the state here
changing very frequently.

36
00:02:25.671 --> 00:02:31.013
So that's why were going to get
this derived states from prompts.

37
00:02:31.013 --> 00:02:35.819
And in general if you have
derived data from prompts this

38
00:02:35.819 --> 00:02:39.203
is a really really good way of doing it.

39
00:02:39.203 --> 00:02:40.353
Very compelling way.

40
00:02:40.353 --> 00:02:42.464
But yeah that is a very good question.

41
00:02:42.464 --> 00:02:48.134
We could just move this entire thing to
our [INAUDIBLE] to be honest with you,

42
00:02:48.134 --> 00:02:53.264
in this particular case,
wouldn't suffer much performance hit.

43
00:02:53.264 --> 00:02:54.392
But I think this makes it simpler.

44
00:02:54.392 --> 00:02:56.566
I prefer things that make my render
method as simple as possible.

45
00:02:56.566 --> 00:03:01.701
Cuz the render method ends up being the
most complicated thing every single time.

46
00:03:01.701 --> 00:03:04.632
So here, this ends up being
a lot simpler because I don't

47
00:03:04.632 --> 00:03:07.270
have to worry about filtering
stuff out of my data.

48
00:03:07.270 --> 00:03:09.455
I get to move all of that out into this.

49
00:03:09.455 --> 00:03:14.830
And the other cool thing about this, now
this particular thing is testable, right?

50
00:03:14.830 --> 00:03:16.440
This is very easy to test.

51
00:03:16.440 --> 00:03:20.744
I would just import this into my test and
then I could test carousel dot and

52
00:03:20.744 --> 00:03:25.472
get derive data from props, pass in some
fake props and make sure it's giving me

53
00:03:25.472 --> 00:03:29.306
the state that I anticipate so
I also find that very compelling.

54
00:03:32.872 --> 00:03:34.990
&gt;&gt; Brian Holt: Okay,
this is still broken, by the way.

55
00:03:34.990 --> 00:03:37.587
So we still have two things
that we have to fix on this.

56
00:03:39.246 --> 00:03:43.096
&gt;&gt; Brian Holt: One, we're reading
stuff back in from the dom, right, so

57
00:03:43.096 --> 00:03:46.561
event.target.dataset ,in
case you don't know,

58
00:03:46.561 --> 00:03:49.420
this is just a normal dom thing, right?

59
00:03:49.420 --> 00:03:51.740
If I put data dash whatever,

60
00:03:51.740 --> 00:03:57.490
that's going to be on the data set for
a dom object, right?

61
00:03:57.490 --> 00:03:59.238
Regardless if you're in react or
not, right?

62
00:03:59.238 --> 00:04:03.964
If I'm in just writing normal jquery,
dataset is still a thing there because I

63
00:04:03.964 --> 00:04:07.560
have data-index that means
I can access dataset.index.

64
00:04:07.560 --> 00:04:09.538
Does that make sense?

65
00:04:11.502 --> 00:04:13.674
&gt;&gt; Brian Holt: So
that's the first thing, but

66
00:04:13.674 --> 00:04:17.470
the problem here is we
have a type mismatch.

67
00:04:17.470 --> 00:04:19.760
This is still not gonna be
true because we're asking,

68
00:04:19.760 --> 00:04:21.780
is index triple equal to active.

69
00:04:21.780 --> 00:04:28.440
If you remember from your basic JavaScript
days this is a strict comparison.

70
00:04:28.440 --> 00:04:30.374
We're checking both the type and
the value.

71
00:04:30.374 --> 00:04:33.430
This is gonna come back to the string, and

72
00:04:33.430 --> 00:04:38.330
right now this is not a string,
this is a number, right?

73
00:04:38.330 --> 00:04:43.860
So this is not going to be true,
that's a problem, right?

74
00:04:43.860 --> 00:04:48.440
So we need to cast this to be a number or
convert it or

75
00:04:48.440 --> 00:04:51.284
coerce it in to being a number.

76
00:04:51.284 --> 00:04:53.095
There's a bunch of ways to do this.

77
00:04:53.095 --> 00:04:56.670
My favorite way of doing it
is just putting a plus sign.

78
00:04:58.012 --> 00:05:00.919
&gt;&gt; Brian Holt: This takes a string and
makes it a number.

79
00:05:00.919 --> 00:05:02.557
&gt;&gt; off screen female: Is that coercing it?

80
00:05:02.557 --> 00:05:03.186
&gt;&gt; Brian Holt: Mm-hm.

81
00:05:03.186 --> 00:05:04.935
&gt;&gt; off screen female: Okay.
&gt;&gt; Brian Holt: Yeah, that's actually,

82
00:05:04.935 --> 00:05:08.857
there's a bunch of ways to do it,
I find this to be the easiest one.

83
00:05:15.481 --> 00:05:18.557
&gt;&gt; Brian Holt: Coercion is a messy
topic when it comes to JavaScript and

84
00:05:18.557 --> 00:05:23.210
in my opinion one of the most difficult
things to fully wrap your mind around.

85
00:05:23.210 --> 00:05:28.010
I don't think I really understand
coercion in its greatest depths.

86
00:05:28.010 --> 00:05:30.937
The only person that I think that
understands it is Kyle Simpson because

87
00:05:30.937 --> 00:05:33.070
that guy studies everything.

88
00:05:33.070 --> 00:05:37.239
So if you want to know, read Kyle's book
or watch his courses on Front End Masters.

89
00:05:40.035 --> 00:05:42.528
&gt;&gt; Brian Holt: But
I promise you this works,

90
00:05:42.528 --> 00:05:47.300
[LAUGH] this turns a string into a number,
okay?

91
00:05:47.300 --> 00:05:50.328
Next thing,
we still have another problem here.

92
00:05:52.434 --> 00:05:57.210
&gt;&gt; Brian Holt: That problem is that
we're calling handleIndexClick.

93
00:05:57.210 --> 00:06:00.280
We have to put that on onClick
handler too, so let's do that.

94
00:06:00.280 --> 00:06:05.964
Under image,
we have to put onClick, equals,

95
00:06:05.964 --> 00:06:11.730
this.handleIndexClick, like that.

96
00:06:11.730 --> 00:06:14.934
I'm gonna get,
&gt;&gt; Brian Holt: Yeah,

97
00:06:14.934 --> 00:06:16.069
it's gonna be upset about that.

98
00:06:18.387 --> 00:06:21.269
&gt;&gt; Brian Holt: So typically I would
tell you to not do this, but for

99
00:06:21.269 --> 00:06:25.290
the sake of one, you should always
listen to the JSX [INAUDIBLE] stuff and

100
00:06:25.290 --> 00:06:29.311
just do what it tells you,
images are not interactive elements right,

101
00:06:29.311 --> 00:06:32.620
we should make these buttons technically.

102
00:06:32.620 --> 00:06:35.228
But for now, I'm just going to
show you how to disable a line.

103
00:06:35.228 --> 00:06:40.837
Eslint-disable-next-line.

104
00:06:40.837 --> 00:06:43.993
And this is going to tell eslint,
I know I have a problem here,

105
00:06:43.993 --> 00:06:45.224
just ignore it for now.

106
00:06:49.230 --> 00:06:52.272
&gt;&gt; Brian Holt: This is dangerous showing
you these things because now you're going

107
00:06:52.272 --> 00:06:53.908
to litter your code bases with them.

108
00:06:56.527 --> 00:07:01.558
&gt;&gt; Brian Holt: But this should
be refactored to be a button and

109
00:07:01.558 --> 00:07:05.944
an image inside of a button, right, and

110
00:07:05.944 --> 00:07:09.434
then now you can tap through it.

111
00:07:09.434 --> 00:07:15.663
But for now we'll just make
this an onClick handler.

112
00:07:18.046 --> 00:07:22.370
&gt;&gt; Brian Holt: Okay still one more
problem here, handleIndexClick.

113
00:07:22.370 --> 00:07:24.120
This is an event listener, right?

114
00:07:24.120 --> 00:07:24.660
Or events handler.

115
00:07:26.801 --> 00:07:31.572
&gt;&gt; Brian Holt: So whenever I click on this
image it's going to call handleIndexClick,

116
00:07:31.572 --> 00:07:32.660
right?

117
00:07:32.660 --> 00:07:35.850
It's gonna call this.setState.

118
00:07:35.850 --> 00:07:39.591
What is this here in this particular case?

119
00:07:39.591 --> 00:07:42.360
&gt;&gt; Brian Holt: It's gonna be
called as an event handler, right?

120
00:07:42.360 --> 00:07:47.349
But you don't actually really know what
context it's gonna be in when it's called.

121
00:07:47.349 --> 00:07:50.269
And let me tell you,
that is the incorrect context, right?

122
00:07:50.269 --> 00:07:53.614
Because you're ripping out
this handleIndexClick and

123
00:07:53.614 --> 00:07:56.969
you're going to be calling
it from the Window, right?

124
00:07:56.969 --> 00:08:01.120
So it's gonna be undefined or
it's gonna be Window.

125
00:08:01.120 --> 00:08:03.880
Any either case, it's not the one
that we anticipate it being.

126
00:08:03.880 --> 00:08:05.530
There's two ways to handle this.

127
00:08:06.980 --> 00:08:11.370
We already have a thing called
the class properties, right?

128
00:08:11.370 --> 00:08:14.550
We already did that, so
I'll show you that one in just a second.

129
00:08:14.550 --> 00:08:17.940
But if you're not using class properties,
it would have to be like this.

130
00:08:17.940 --> 00:08:21.900
We'd have to go into our constructor so
you don't have to type this,

131
00:08:21.900 --> 00:08:22.940
I'll just show you this.

132
00:08:24.340 --> 00:08:29.968
And then first thing I would say is,
super(props) and

133
00:08:29.968 --> 00:08:34.638
then I would say, this.handleIndexClick =

134
00:08:34.638 --> 00:08:39.203
this.handleIndexClick.bind(this).

135
00:08:39.203 --> 00:08:41.063
So inside of your constructor, for

136
00:08:41.063 --> 00:08:43.667
anything that's going to
be an event listener and

137
00:08:43.667 --> 00:08:47.760
you calling this dot set state or this
dot whatever, you would have to do this.

138
00:08:49.720 --> 00:08:53.720
Then, as you pull out this method and
then hand it to react a call later.

139
00:08:53.720 --> 00:08:55.880
It would be the correct this, right?

140
00:08:55.880 --> 00:08:57.970
Because you're binding the context.

141
00:08:57.970 --> 00:09:02.110
Again, bind is something from ES5 so
this has been in JavaScript since.

142
00:09:02.110 --> 00:09:07.403
Before 2015 it'd be like 2013 or
2012, or something like that.

143
00:09:07.403 --> 00:09:11.115
&gt;&gt; Brian Holt: And it's going to make
sure that whenever you call this method,

144
00:09:11.115 --> 00:09:14.138
this is always going to be
set to whatever instance of

145
00:09:14.138 --> 00:09:16.627
the Carousel that you're doing, right?

146
00:09:16.627 --> 00:09:19.144
So that's what the bind(this) here does.

147
00:09:19.144 --> 00:09:19.644
Make sense?

148
00:09:23.062 --> 00:09:24.630
&gt;&gt; Brian Holt: If you have
a bunch of event listeners,

149
00:09:24.630 --> 00:09:27.110
this list gets quite long and
it gets quite annoying, right.

150
00:09:27.110 --> 00:09:30.080
And it's just kind of burdensome
to have to do this in my opinion.

151
00:09:30.080 --> 00:09:33.471
That's why I'm a huge fan
of these class properties,

152
00:09:33.471 --> 00:09:38.423
cuz how I can actually fix that now is I
can make this an arrow function like this.

153
00:09:44.100 --> 00:09:48.970
&gt;&gt; Brian Holt: Now this works, why?

154
00:09:48.970 --> 00:09:50.490
Because function and

155
00:09:50.490 --> 00:09:55.250
arrow functions have slightly different
semantics when it comes to binding this.

156
00:09:55.250 --> 00:10:00.170
When you create an arrow function,
it doesn't create a new context when

157
00:10:00.170 --> 00:10:03.658
it's called, which means it just reverts
to whatever lexical scope it's in, right?

158
00:10:03.658 --> 00:10:11.020
If I have a function, so
if I have a normal function like this,

159
00:10:11.020 --> 00:10:15.830
it creates a new scope whenever it's
called, right, wherever it's called from.

160
00:10:15.830 --> 00:10:21.350
So that scope can change depending on
where you call x in this particular case.

161
00:10:21.350 --> 00:10:24.515
However if I have const
y equals arrow function.

162
00:10:27.878 --> 00:10:30.520
&gt;&gt; Brian Holt: This one does not
create a new scope wherever it is, so

163
00:10:30.520 --> 00:10:34.330
it just reversed to whatever lexical
scope, or wherever it is, right.

164
00:10:34.330 --> 00:10:36.900
So in this particular case
handleIndexClick doesn't create a new

165
00:10:36.900 --> 00:10:40.090
scope, so it just reversed to wherever
it's created, which is here in carousel.

166
00:10:41.320 --> 00:10:45.480
Again, it's kind of more basics,
levels of JavaScript.

167
00:10:46.770 --> 00:10:50.650
This kind of stuff and if you need more of
that kind of stuff I definitely recommend

168
00:10:50.650 --> 00:10:52.010
more Front End Masters courses,

169
00:10:52.010 --> 00:10:55.630
like Kyle Simpson's,
he talks a lot about this kind of stuff.

170
00:10:55.630 --> 00:10:59.540
Furthermore, they love to ask these
questions in job interviews, just throwing

171
00:10:59.540 --> 00:11:06.050
that out there, context just seems to what
this is is a very, very common question,

172
00:11:06.050 --> 00:11:09.419
which is dumb because it doesn't
normally matter but that's what they do.

173
00:11:10.970 --> 00:11:12.482
I'm not bitter or upset or anything.

174
00:11:15.062 --> 00:11:15.876
&gt;&gt; Brian Holt: Cool.

175
00:11:15.876 --> 00:11:17.263
Is that makes sense why this works now?

176
00:11:17.263 --> 00:11:18.629
Hopefully.

177
00:11:22.847 --> 00:11:26.653
&gt;&gt; Brian Holt: There are just really
ridiculous conversations that people have

178
00:11:26.653 --> 00:11:30.190
about, is this more performant
versus one way or the other.

179
00:11:30.190 --> 00:11:34.710
You're creating too many instances of,
blah, blah, blah, it doesn't matter.

180
00:11:34.710 --> 00:11:39.390
You almost never hit the performance
hit because this is such a small thing.

181
00:11:39.390 --> 00:11:42.000
So I would say this is fine,
don't worry about it.

182
00:11:42.000 --> 00:11:43.780
If people on Twitter at your job say like,

183
00:11:43.780 --> 00:11:47.320
well this is less performance like,
it's so miniscule, it's such a,

184
00:11:47.320 --> 00:11:51.879
you know, atom in the bucket that you will
never notice the performance profile here.

185
00:11:53.490 --> 00:11:55.591
Unless you're writing like really highly,
highly,

186
00:11:55.591 --> 00:11:57.154
highly performance sensitive things.

187
00:11:59.576 --> 00:12:04.677
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: Okay, so now if we go back

188
00:12:04.677 --> 00:12:10.923
over here, just save,
this should start working, and it does.

189
00:12:18.991 --> 00:12:19.491
&gt;&gt; Brian Holt: That is a cute dog.

190
00:12:22.512 --> 00:12:23.880
&gt;&gt; Brian Holt: But,
it's pretty cool, right?

191
00:12:23.880 --> 00:12:27.910
It changes which one's highlighted
because of the active thing, right?

192
00:12:27.910 --> 00:12:30.401
And, it's actually changing
our hero image, as well.

