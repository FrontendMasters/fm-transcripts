WEBVTT

1
00:00:00.150 --> 00:00:04.008
&gt;&gt; Brian Holt: So the first thing after we
do after we create the context is we're

2
00:00:04.008 --> 00:00:06.408
going to go put the provider into place.

3
00:00:10.052 --> 00:00:10.952
&gt;&gt; Brian Holt: So I want you

4
00:00:10.952 --> 00:00:15.003
to go to App.js,
&gt;&gt; Brian Holt: And

5
00:00:15.003 --> 00:00:19.414
we're gonna come up here to the top,
&gt;&gt; Brian Holt: And

6
00:00:19.414 --> 00:00:21.500
we're going to import two things.

7
00:00:21.500 --> 00:00:26.473
Import pf from "petfinder-client",

8
00:00:26.473 --> 00:00:31.452
and we're going to import the provider,

9
00:00:34.388 --> 00:00:37.467
&gt;&gt; Brian Holt: From ./SearchContext.

10
00:00:44.112 --> 00:00:48.824
&gt;&gt; Brian Holt: So
the easiest way to be able to set this

11
00:00:48.824 --> 00:00:53.696
up is using the state from app, right.

12
00:00:53.696 --> 00:00:58.483
So we have context, right, but
the actual storage mechanism of

13
00:00:58.483 --> 00:01:03.802
everything on context is actually just
going to be the app state on app,

14
00:01:03.802 --> 00:01:07.099
right, the state that's on app, rather.

15
00:01:07.099 --> 00:01:10.844
So we have the context, right.

16
00:01:10.844 --> 00:01:13.689
The context is going to be
reading from app state,

17
00:01:13.689 --> 00:01:17.704
and then providing that into the portal,
right, into the provider.

18
00:01:17.704 --> 00:01:24.090
And then on the other end we'll be reading
from app state using the consumer.

19
00:01:24.090 --> 00:01:26.650
So it's still the same
familiar mechanisms,

20
00:01:26.650 --> 00:01:31.160
context really is nothing more than
just the portal entrance and exit.

21
00:01:31.160 --> 00:01:33.250
Everything is still
managed by React's state.

22
00:01:34.740 --> 00:01:43.043
So we're gonna move all the state into,
&gt;&gt; Brian Holt: This, into app.

23
00:01:43.043 --> 00:01:48.254
So props, super props.

24
00:01:48.254 --> 00:01:52.233
I'm doing this with a constructor because
this is going to be a lot easier to do

25
00:01:52.233 --> 00:01:53.529
using the constructor.

26
00:01:56.120 --> 00:02:00.562
&gt;&gt; Brian Holt: Okay, and then
this.state is going to be location, and

27
00:02:00.562 --> 00:02:03.810
it's gonna be all of our defaults again.

28
00:02:03.810 --> 00:02:08.192
So Seattle, WA, animal,

29
00:02:08.192 --> 00:02:14.480
empty string, breed, empty string,

30
00:02:14.480 --> 00:02:19.419
breeds
&gt;&gt; Brian Holt: Which is gonna be

31
00:02:19.419 --> 00:02:20.910
an empty array.

32
00:02:20.910 --> 00:02:22.940
But we're gonna take this
a little bit step further,

33
00:02:22.940 --> 00:02:26.036
we're actually gonna be storing
our functions on the state so

34
00:02:26.036 --> 00:02:29.520
that we can provide those
into the context as well.

35
00:02:30.840 --> 00:02:37.461
So handle animal change will
be this.handleAnimalChange,

36
00:02:37.461 --> 00:02:41.545
which we'll define here in a second.

37
00:02:41.545 --> 00:02:48.232
handleBreedChange which will
be this .handleBreedChange.

38
00:02:48.232 --> 00:02:51.985
And getBreeds will be on here,
and handleLocation can change.

39
00:02:51.985 --> 00:02:58.310
handleLocationChange which will
be this.handleLocationChange and

40
00:02:58.310 --> 00:03:00.670
then getBreeds as well.

41
00:03:00.670 --> 00:03:06.545
getBreeds will be this.handleBreedChange.

42
00:03:06.545 --> 00:03:09.122
No, sorry, this.getBreeds.

43
00:03:11.723 --> 00:03:14.903
&gt;&gt; Brian Holt: Okay, now we're gonna go
lift all of this logic that we already

44
00:03:14.903 --> 00:03:18.090
wrote for results and
we're going to move it into app, right.

45
00:03:18.090 --> 00:03:20.810
So actually just want you to go and
copy and

46
00:03:20.810 --> 00:03:24.953
paste these four methods out of
results and move them into app.

47
00:03:26.781 --> 00:03:31.745
&gt;&gt; Brian Holt: So I wonder if the useful
way of doing that is splitting my screen

48
00:03:31.745 --> 00:03:32.879
here, oops.

49
00:03:34.600 --> 00:03:38.844
So I'm going to open here, results.

50
00:03:46.103 --> 00:03:49.433
&gt;&gt; Brian Holt: Sorry, not results,
this is all in SearchParams.

51
00:03:53.631 --> 00:03:56.259
&gt;&gt; Brian Holt: Okay, so
I'm just gonna copy all of this data or

52
00:03:56.259 --> 00:03:57.384
all these methods.

53
00:04:02.980 --> 00:04:05.010
&gt;&gt; Brian Holt: X, okay.

54
00:04:05.010 --> 00:04:08.510
So I took all of that out and
now back here in app.js,

55
00:04:08.510 --> 00:04:12.742
I'm just gonna put it between
the constructor and the render.

56
00:04:20.069 --> 00:04:23.760
&gt;&gt; Brian Holt: Okay, and then I'm gonna
delete everything, all the state here.

57
00:04:24.840 --> 00:04:28.833
From search params,
we'll go fix this in a second as well.

58
00:04:35.163 --> 00:04:37.090
&gt;&gt; Brian Holt: Okay,
any questions about what I did?

59
00:04:37.090 --> 00:04:43.281
I just moved all those methods
from search params into app.js.

60
00:04:49.331 --> 00:04:52.095
&gt;&gt; Brian Holt: So this all works
the same way, the events look the same,

61
00:04:52.095 --> 00:04:55.390
it's still calling setState, but
it's all just doing it in here.

62
00:04:56.590 --> 00:05:03.760
So now we have the provider up here, so
we're going to wrap the router here.

63
00:05:03.760 --> 00:05:06.544
So wrap this router in the provider.

64
00:05:09.412 --> 00:05:17.471
&gt;&gt; Brian Holt: And
the value of this provider is dis.state.

65
00:05:26.520 --> 00:05:30.691
&gt;&gt; Brian Holt: So now magically,
anything that's inside of this provider,

66
00:05:30.691 --> 00:05:34.782
I can access this context using
the consumer that I exported in

67
00:05:34.782 --> 00:05:36.762
search.context anywhere.

68
00:05:36.762 --> 00:05:41.726
Anywhere that I call that I instantiate
that consumer, that context,

69
00:05:41.726 --> 00:05:44.800
this state up here is
going to be available.

70
00:05:46.120 --> 00:05:51.880
So in this particular case I'm only
showing you one context, right, but

71
00:05:51.880 --> 00:05:54.862
as you may imagine you might have multiple
different kinds of context, right.

72
00:05:54.862 --> 00:05:57.175
This is all the search parameters, but

73
00:05:57.175 --> 00:06:00.268
what happens if we had maybe
a user context, right?

74
00:06:00.268 --> 00:06:02.647
Where we have all of our user
information stored on a context,

75
00:06:02.647 --> 00:06:05.010
we could have multiple
different providers here.

76
00:06:05.010 --> 00:06:07.608
All you have to do is just wrapping
providers around providers around

77
00:06:07.608 --> 00:06:10.360
providers around providers, right,
and that's how that would work.

