WEBVTT

1
00:00:00.280 --> 00:00:04.360
&gt;&gt; Brian Holt: So what I want to do now
is I want to take this petfinder client,

2
00:00:04.360 --> 00:00:09.980
I want to go out and fetch a list of
animals and render those out using pet.

3
00:00:11.090 --> 00:00:14.480
So the first thing we need to
introduce now is the idea of state.

4
00:00:16.140 --> 00:00:19.970
State is how you keep state
inside of your components.

5
00:00:21.720 --> 00:00:24.520
So state is things that can change.

6
00:00:24.520 --> 00:00:28.590
As opposed to props, if you remember
here in Pet we have props.name,

7
00:00:28.590 --> 00:00:31.580
this is actually immutable,
I can't write to this.

8
00:00:31.580 --> 00:00:38.510
So if I try and say props.name = 'blah',
this doesn't do anything at all.

9
00:00:38.510 --> 00:00:39.570
It's actually immutable.

10
00:00:39.570 --> 00:00:41.380
And if you're using TypeScript,
TypeScript is going to say like,

11
00:00:41.380 --> 00:00:43.050
hey you tried to write to this but
you can't.

12
00:00:44.320 --> 00:00:45.760
React will actually ignore you.

13
00:00:45.760 --> 00:00:48.340
It just will like,
no I don't think so, you're wrong.

14
00:00:51.220 --> 00:00:54.317
And props comes from a parent
into a child whereas state,

15
00:00:54.317 --> 00:00:56.522
always stays in the same level, right?

16
00:00:56.522 --> 00:01:00.640
So that's another powerful thing
about React is this idea called one

17
00:01:00.640 --> 00:01:01.571
way data flow.

18
00:01:01.571 --> 00:01:05.146
The data only flows from
parent to child and

19
00:01:05.146 --> 00:01:08.332
not the other way so you have pet here.

20
00:01:08.332 --> 00:01:12.289
There's no way pet can pass
up data to the parent, right?

21
00:01:12.289 --> 00:01:14.392
It has no way of doing that.

22
00:01:14.392 --> 00:01:19.260
This is useful because if I ever
have a problem inside of pet.

23
00:01:21.120 --> 00:01:25.620
Or rather if I have a problem inside
of app, I know that pet didn't cause it

24
00:01:25.620 --> 00:01:29.220
because there's no way that pet can reach
into the parent and modified states.

25
00:01:29.220 --> 00:01:30.460
It's impossible.

26
00:01:30.460 --> 00:01:33.300
They literally made it so
you can't do that.

27
00:01:33.300 --> 00:01:36.060
Now it can be a little burdensome
to deal with this sometimes, right?

28
00:01:36.060 --> 00:01:41.270
Sometimes you want to, but it's also
really useful because if I'm debugging

29
00:01:41.270 --> 00:01:45.470
something, I can already eliminate
an entire class of places where it can be.

30
00:01:45.470 --> 00:01:48.330
I know it's not the children
because it can't be the children.

31
00:01:49.380 --> 00:01:55.110
I'll show you later how you can kind of
effect change in a parent from a child.

32
00:01:55.110 --> 00:01:58.350
But it's a very defined and
explicit method of doing so.

33
00:01:59.360 --> 00:02:03.419
Now what I wanna do is I want to take this
data that I'm getting in from the API,

34
00:02:03.419 --> 00:02:06.493
rush it in to get these
are a different part of the API here.

35
00:02:06.493 --> 00:02:11.770
But we wanna take in a bunch of pets from
the API and then display that to the user.

36
00:02:13.910 --> 00:02:16.450
So what I'm gonna do here is
I'm gonna put the constructor.

37
00:02:17.800 --> 00:02:21.106
The constructor always takes in props.

38
00:02:21.106 --> 00:02:24.306
Okay, then the first thing it
does is called super props.

39
00:02:27.467 --> 00:02:29.752
&gt;&gt; Brian Holt: This is just
a necessity of how React works.

40
00:02:29.752 --> 00:02:34.443
The constructor is actually a JavaScript
thing, this is not a React thing at all.

41
00:02:34.443 --> 00:02:39.436
The constructor calls the, or is calling

42
00:02:39.436 --> 00:02:44.295
the parent component's constructor.

43
00:02:44.295 --> 00:02:46.507
So that's what this super props call does.

44
00:02:46.507 --> 00:02:50.241
It calls React.Component's constructor and
it passes the props up there.

45
00:02:50.241 --> 00:02:54.261
And we have to do that, otherwise the
React is unable to track our props, right?

46
00:02:54.261 --> 00:02:57.609
So that's what this super props does,
just get used to it.

47
00:02:57.609 --> 00:02:59.700
If you ever put a constructor and

48
00:02:59.700 --> 00:03:03.895
you're overriding the constructor
from the React component.

49
00:03:06.806 --> 00:03:08.188
&gt;&gt; Brian Holt: You have to do super props.

50
00:03:08.188 --> 00:03:12.520
That's just an if-then, okay?

51
00:03:12.520 --> 00:03:15.654
And then here, we're going to
just define the initial state.

52
00:03:15.654 --> 00:03:20.571
So I'm gonna say this.state equals,
whatever I want my initial state to be.

53
00:03:20.571 --> 00:03:24.885
So in this case it's gonna be pets,
and it's going to be an empty array.

54
00:03:24.885 --> 00:03:32.538
This is your default basic initial state,
&gt;&gt; Brian Holt: Okay?

55
00:03:37.224 --> 00:03:41.902
&gt;&gt; Brian Holt: Now, what I want to
do is I'm going to change this right

56
00:03:41.902 --> 00:03:44.780
here in componentDidMount.

57
00:03:44.780 --> 00:03:53.755
I'm gonna say petfinder.pet.find.

58
00:03:53.755 --> 00:03:56.133
Find, yep, .find.

59
00:03:58.977 --> 00:04:00.580
&gt;&gt; Brian Holt: And
then I'm gonna it some parameters.

60
00:04:00.580 --> 00:04:03.810
The first thing I wanna
give it is output: "full".

61
00:04:03.810 --> 00:04:06.320
There's various levels of output that
you can ask for, we're gonna ask for

62
00:04:06.320 --> 00:04:07.350
the full output.

63
00:04:07.350 --> 00:04:10.500
And then you have to give it a location.

64
00:04:12.240 --> 00:04:16.580
Now, here you can put any city
state combination that you want,

65
00:04:16.580 --> 00:04:18.429
it just has to be based
in the United States.

66
00:04:19.450 --> 00:04:22.310
So you could put New York City, NY.

67
00:04:22.310 --> 00:04:24.830
You could put Minneapolis, MN.

68
00:04:24.830 --> 00:04:30.152
I'm gonna put, of course, Seattle,
WA, which is where I'm from.

69
00:04:32.504 --> 00:04:33.383
&gt;&gt; Brian Holt: Okay?

70
00:04:33.383 --> 00:04:37.411
So this is going to request all types
of animals that are available for

71
00:04:37.411 --> 00:04:38.739
adoption in Seattle.

72
00:04:41.455 --> 00:04:44.280
Okay, once that comes back from the API,
I'm going to say .then.

73
00:04:48.114 --> 00:04:52.293
&gt;&gt; Brian Holt: And
we get back data from the API.

74
00:04:52.293 --> 00:04:57.494
And then, I'm going to do this,
so I'm going to say let pets,

75
00:05:00.923 --> 00:05:04.300
&gt;&gt; Brian Holt: If, and this is where.

76
00:05:04.300 --> 00:05:06.080
Because this is a little crazy XML,

77
00:05:06.080 --> 00:05:09.630
we have to do a lot of data checking
to make sure everything exists.

78
00:05:09.630 --> 00:05:16.220
So we're gonna say, data.petfinder.pets.

79
00:05:16.220 --> 00:05:19.560
So if it doesn't find any pets,
then pets is gonna be null.

80
00:05:19.560 --> 00:05:21.970
So you have to check that that exists.

81
00:05:21.970 --> 00:05:28.180
And data.petfinder.pets.pet,
I am not making this up.

82
00:05:28.180 --> 00:05:34.290
This is just the way they
structured their API.

83
00:05:36.180 --> 00:05:39.104
Okay, so now I know that pet
definitely exists, right.

84
00:05:40.690 --> 00:05:42.980
The next thing I need to check,
if it only finds one pet,

85
00:05:42.980 --> 00:05:45.470
it will return to an object.

86
00:05:45.470 --> 00:05:49.034
If it finds two pets,
it returns to an array, so

87
00:05:49.034 --> 00:05:51.719
you have to check if it's an array.

88
00:05:51.719 --> 00:05:54.719
If Array.isArray,

89
00:05:58.709 --> 00:06:02.571
&gt;&gt; Brian Holt: data.petfinder.pets.pet,

90
00:06:02.571 --> 00:06:09.250
this is actually my favorite
thing about TypeScript.

91
00:06:09.250 --> 00:06:12.830
If you mess up anything here,
TypeScript yells at you really loudly.

92
00:06:14.680 --> 00:06:16.878
It's what TypeScript's actually good for,
in my opinion.

93
00:06:16.878 --> 00:06:23.370
Pets = data.petfinder.pets.pet.

94
00:06:23.370 --> 00:06:28.458
Else, that means it found one
animal which means that we'll

95
00:06:28.458 --> 00:06:32.957
do the same thing except
we'll just wrap it in array.

96
00:06:40.537 --> 00:06:41.438
&gt;&gt; Brian Holt: Make sense?

97
00:06:43.457 --> 00:06:48.421
&gt;&gt; Brian Holt: Otherwise,
else pets = empty array.

98
00:06:48.421 --> 00:06:50.811
If it finds nothing,
just make it an empty array.

99
00:06:50.811 --> 00:06:53.923
So just to walk you through,

100
00:06:53.923 --> 00:06:58.987
if it exists that's what
this first block is.

101
00:06:58.987 --> 00:07:01.188
Then here, if I find multiple pets,

102
00:07:01.188 --> 00:07:05.022
then just assign it to be whatever
it came back from the API with,

103
00:07:05.022 --> 00:07:09.880
if it's just one animal,
wrap that one animal in array, right?

104
00:07:09.880 --> 00:07:14.150
And then here, if you don't find anything,
just make pets an empty array.

105
00:07:16.920 --> 00:07:20.480
This way,
we're always dealing with an array, right?

106
00:07:20.480 --> 00:07:25.002
Which makes it really easy inside of
our render method to deal with it.

107
00:07:29.734 --> 00:07:33.285
&gt;&gt; Brian Holt: So now,
we have pets up here.

108
00:07:37.065 --> 00:07:39.030
&gt;&gt; Brian Holt: Now we want
to store this in our state.

109
00:07:40.050 --> 00:07:43.420
We can't just say state.pets = pets.

110
00:07:43.420 --> 00:07:45.910
This doesn't work, why?

111
00:07:46.970 --> 00:07:50.370
It doesn't work because then React
doesn't know when things change.

112
00:07:50.370 --> 00:07:54.730
If you do this, React is just blissfully
be unaware that it's state has changed and

113
00:07:54.730 --> 00:07:56.570
not re-render anything.

114
00:07:56.570 --> 00:07:59.249
So we actually have to go through
React's way of setting state.

115
00:08:00.570 --> 00:08:02.400
So that it knows when to re-render.

116
00:08:02.400 --> 00:08:06.590
You can actually call setState multiple
times inside of one component at mount.

117
00:08:06.590 --> 00:08:09.130
It will actually batch them together and
only do one update.

118
00:08:09.130 --> 00:08:10.090
So it's actually really,

119
00:08:10.090 --> 00:08:14.460
really smart about how it does these
kind of performance optimizations.

120
00:08:14.460 --> 00:08:17.890
So this doesn't work, so the way that
you're actually going to do this is gonna

121
00:08:17.890 --> 00:08:21.700
be this.setState,
which is a method that React provides you.

122
00:08:21.700 --> 00:08:26.350
And then you're gonna give an object
of things to update in a state.

123
00:08:26.350 --> 00:08:31.315
So I'm gonna do pets:pets,
&gt;&gt; Brian Holt: Which

124
00:08:31.315 --> 00:08:33.920
means I'm gonna take
this pets right here and

125
00:08:33.920 --> 00:08:38.010
I'm going to update the one
that's here in state, right.

126
00:08:38.010 --> 00:08:40.570
It does what we call a shallow merge,
right?

127
00:08:40.570 --> 00:08:47.526
So if I have something else here,
&gt;&gt; Brian Holt: This

128
00:08:47.526 --> 00:08:50.970
won't override something else, right?

129
00:08:50.970 --> 00:08:53.550
Because this is a shallow merge,
it's only going to update pets.

130
00:08:53.550 --> 00:08:55.810
It's not gonna update something else.

131
00:08:55.810 --> 00:08:57.167
Now it's not a deep merge, right?

132
00:08:57.167 --> 00:09:01.504
So if it's like multiple layers deep,
it will overwrite that.

133
00:09:01.504 --> 00:09:03.176
So it's just a shallow merge.

134
00:09:08.130 --> 00:09:12.498
&gt;&gt; Brian Holt: Last thing is because
it's pets:pets where it's the same word,

135
00:09:12.498 --> 00:09:15.077
JavaScript allows you to just do this.

136
00:09:18.239 --> 00:09:21.920
&gt;&gt; Brian Holt: Just to be
a little bit more terse about it.

137
00:09:21.920 --> 00:09:24.560
If the name and the name of the key
that you're setting has the same thing,

138
00:09:24.560 --> 00:09:25.890
you can just omit the second part.

