WEBVTT

1
00:00:00.000 --> 00:00:02.697
&gt;&gt; Brian Holt: But I wanna take
a step back for just a second and

2
00:00:02.697 --> 00:00:06.097
talk about how React is
actually rendering this, right?

3
00:00:06.097 --> 00:00:10.785
So I'm gonna type in here,
I'll hit the D key, so I type D.

4
00:00:10.785 --> 00:00:12.062
An event happens, right?

5
00:00:12.062 --> 00:00:14.725
So React actually catches
that at a top level and

6
00:00:14.725 --> 00:00:18.197
says an event happening,
something must have changed.

7
00:00:18.197 --> 00:00:20.058
I'm gonna kick off a rerender, right?

8
00:00:20.058 --> 00:00:23.029
So it goes through, it runs rerender
on your entire application,

9
00:00:23.029 --> 00:00:25.638
again this why your render
methods are really important.

10
00:00:25.638 --> 00:00:27.926
They need to be fast because
every time that I type,

11
00:00:27.926 --> 00:00:30.660
it's rerendering your entire application,
right?

12
00:00:30.660 --> 00:00:32.847
So I type that.

13
00:00:32.847 --> 00:00:34.250
It kicks off the re-render.

14
00:00:34.250 --> 00:00:37.166
And it gets to this carousel component,
right?

15
00:00:37.166 --> 00:00:38.289
And it's saying.

16
00:00:38.289 --> 00:00:41.908
It's saying, not carousel sorry,
the SearchParams page.

17
00:00:41.908 --> 00:00:45.069
It goes to the SearchParams page.

18
00:00:45.069 --> 00:00:47.917
And it goes through render this input and

19
00:00:47.917 --> 00:00:52.031
it says hey this input is
tied to this.state.location.

20
00:00:52.031 --> 00:00:55.660
Well what is this.state.location?

21
00:00:55.660 --> 00:01:00.176
It's still Seattle Washington despite
the fact that I typed in there nothing

22
00:01:00.176 --> 00:01:01.296
changed it right?

23
00:01:01.296 --> 00:01:06.274
So because nothing's changed it,
it stays Seattle, Washington.

24
00:01:06.274 --> 00:01:09.203
You actually need to go and
change it yourself or

25
00:01:09.203 --> 00:01:11.261
it forever will stay that right?

26
00:01:11.261 --> 00:01:15.050
In other words what I'm trying to say
here is two way data binding is not free

27
00:01:15.050 --> 00:01:15.601
in React.

28
00:01:15.601 --> 00:01:19.224
And people get a little frustrated with
especially coming from things like

29
00:01:19.224 --> 00:01:20.039
Angular right?

30
00:01:20.039 --> 00:01:22.904
Where it is free,
where it can be free, same with Ember.

31
00:01:22.904 --> 00:01:26.399
It's not free in React and
I say this is a feature.

32
00:01:26.399 --> 00:01:29.380
And I feel pretty strongly
about this which is why I'm

33
00:01:29.380 --> 00:01:32.371
pounding on the podium which
I don't wanna to break.

34
00:01:32.371 --> 00:01:37.231
[LAUGH] I feel strongly about this because
two way data binding can be magical,

35
00:01:37.231 --> 00:01:37.950
right?

36
00:01:37.950 --> 00:01:40.690
The first time that you write down
in Angular it just like has this

37
00:01:40.690 --> 00:01:43.864
magical moment it's like I didn't have
to write all the wiring for this.

38
00:01:43.864 --> 00:01:47.044
I've been writing back bone for years and
you have to wire that stuff up and

39
00:01:47.044 --> 00:01:48.620
it's not fun, right?

40
00:01:48.620 --> 00:01:51.920
Whereas as you do it in Angular it's
you're just say, this is bound to that and

41
00:01:51.920 --> 00:01:53.200
it just works.

42
00:01:53.200 --> 00:01:57.489
But when that stuff falls apart, whenever
you have like filters or masks and

43
00:01:57.489 --> 00:01:59.309
things on these kind of things.

44
00:01:59.309 --> 00:02:01.940
It quickly becomes,
where did this change happen?

45
00:02:01.940 --> 00:02:03.170
How did this change?

46
00:02:03.170 --> 00:02:05.031
How do I break this, right?

47
00:02:05.031 --> 00:02:10.238
It becomes very, very,
opaque and hard to debug.

48
00:02:10.238 --> 00:02:13.260
I'm very passionate about debugging things
because I break things all the time.

49
00:02:13.260 --> 00:02:17.015
So, I spend about three-quarters of my
life debugging things that I have built.

50
00:02:17.015 --> 00:02:19.747
[LAUGH] So,
I'm very much optimize on that side and

51
00:02:19.747 --> 00:02:23.213
on maintainability rather then
on the side of writing it fast.

52
00:02:23.213 --> 00:02:27.261
I will spend three times
longer writing something,

53
00:02:27.261 --> 00:02:31.862
if I get to spend far less time
maintaining it in the future.

54
00:02:31.862 --> 00:02:36.117
So, we have to go in here and
write this handler ourselves.

55
00:02:36.117 --> 00:02:40.017
And it's not very difficult,
it's pretty easy to do.

56
00:02:40.017 --> 00:02:42.078
So let's go and actually fix that.

57
00:02:43.944 --> 00:02:47.147
&gt;&gt; Brian Holt: We're gonna
do handleLocationChange, and

58
00:02:47.147 --> 00:02:49.345
it's gonna be the same thing.

59
00:02:49.345 --> 00:02:54.994
It's going to be an arrow function.

60
00:02:54.994 --> 00:02:58.030
And we're gonna say this.setState.

61
00:02:59.850 --> 00:03:06.530
Location is event.target.value.

62
00:03:06.530 --> 00:03:08.033
Right, this, again,

63
00:03:08.033 --> 00:03:13.312
event.target.value is going to be whatever
is the value of that input is, okay?

64
00:03:13.312 --> 00:03:17.441
And then here we're gonna say

65
00:03:17.441 --> 00:03:24.386
onChange={this.handleLocationChange}.

66
00:03:24.386 --> 00:03:28.650
Something people ask me is do I have
to call it handleLocationChange?

67
00:03:28.650 --> 00:03:32.418
No, you can call it whatever you want,
as long as this and this are the same.

68
00:03:32.418 --> 00:03:36.060
However, pro tip from me from
writing React from such a long time,

69
00:03:36.060 --> 00:03:39.770
I like to put all my handle on
the front of all my event handlers.

70
00:03:39.770 --> 00:03:44.116
So at one glance I can see down here,
this is an event handler.

71
00:03:44.116 --> 00:03:47.502
Or if I come up here it's like,
this is meant to handle events.

72
00:03:47.502 --> 00:03:51.828
So handle to me means you're gonna
get an event as a parameter.

73
00:03:51.828 --> 00:03:55.537
And actually I can say, handleLocation.

74
00:03:55.537 --> 00:03:58.557
So I know it's gonna handle some sort
of like something to do with location.

75
00:03:58.557 --> 00:04:00.657
And it's handling a change event, right?

76
00:04:00.657 --> 00:04:02.833
Change down here.

77
00:04:02.833 --> 00:04:05.791
So I can just look at the method name and
instantly know what it does and

78
00:04:05.791 --> 00:04:07.987
where it's coming from and
why it's getting run.

79
00:04:10.097 --> 00:04:12.547
&gt;&gt; Brian Holt: So
it's very very useful for

80
00:04:12.547 --> 00:04:17.047
code organization in my opinion,
to do it this way.

81
00:04:17.047 --> 00:04:19.240
Questions?

82
00:04:19.240 --> 00:04:20.557
Yeah.

83
00:04:20.557 --> 00:04:22.989
&gt;&gt; off screen male: When you
were typing in the inout box,

84
00:04:22.989 --> 00:04:26.722
you said that it detected
the change in cold rendering it.

85
00:04:26.722 --> 00:04:30.290
Is it doing that as just part
of typing in the input box,

86
00:04:30.290 --> 00:04:34.790
and React magically knows that, or
is it because that state is tied to

87
00:04:34.790 --> 00:04:38.147
the input box and
it knows it has to watch the state?

88
00:04:38.147 --> 00:04:40.211
&gt;&gt; Brian Holt: That's
a really good question.

89
00:04:40.211 --> 00:04:44.491
The way that it knows is because,
React rendered this, right?

90
00:04:44.491 --> 00:04:48.527
So, physically the actual
mechanics of how this is working.

91
00:04:48.527 --> 00:04:53.310
If I go into inspect element here
React is rendering everything

92
00:04:53.310 --> 00:04:55.394
underneath root, right?

93
00:04:55.394 --> 00:05:00.398
So it actually binds one event listener
for the entire application here at root.

94
00:05:00.398 --> 00:05:03.943
So any event that bubbles up to root,
React catches.

95
00:05:03.943 --> 00:05:07.439
Whenever it has an event,
it knows I've got to re-render stuff.

96
00:05:07.439 --> 00:05:09.406
So this is actually one
performance optimization.

97
00:05:09.406 --> 00:05:11.309
Again, you don't actually
really have to care.

98
00:05:11.309 --> 00:05:14.190
This might change in the future if
they find a better way of doing it.

99
00:05:14.190 --> 00:05:18.181
But every time you put event lists here
and all that kind of stuff up here,

100
00:05:18.181 --> 00:05:21.270
React is only using one event handler and
it's at root.

101
00:05:21.270 --> 00:05:22.057
Did I answer your question?

102
00:05:22.057 --> 00:05:23.329
&gt;&gt; off screen male: Yes.

103
00:05:23.329 --> 00:05:24.035
&gt;&gt; Brian Holt: Cool.

104
00:05:28.352 --> 00:05:30.087
&gt;&gt; Brian Holt: Event bubbling and
event delegation,

105
00:05:30.087 --> 00:05:32.879
two other things that you should
definitely learn a lot about.

106
00:05:32.879 --> 00:05:34.699
That's another favorite
interview question.

107
00:05:36.490 --> 00:05:39.321
So I think that should work now and
it does.

108
00:05:39.321 --> 00:05:43.750
So now, if I type in here Seattle,
WA, it's all working.

109
00:05:43.750 --> 00:05:47.827
And if go in here with the DevTools,
Inspect Element and

110
00:05:47.827 --> 00:05:52.953
head over to React,
&gt;&gt; Brian Holt: So

111
00:05:52.953 --> 00:05:58.099
I can go up here to SearchParams
which is the entire route, right?

112
00:05:58.099 --> 00:05:59.801
And you can see here I have Seattle,
Washington.

113
00:05:59.801 --> 00:06:06.197
I can actually go in here and
say, Salt Lake City comma UT, and

114
00:06:06.197 --> 00:06:12.229
if I hit enter,
you'll notice on the left it will change.

115
00:06:12.229 --> 00:06:15.625
So I can actually manipulate
the state from here as well and

116
00:06:15.625 --> 00:06:18.545
it will instantly be
reflected here on the route.

117
00:06:22.922 --> 00:06:23.623
&gt;&gt; Brian Holt: Pretty cool, right?

118
00:06:27.520 --> 00:06:31.420
&gt;&gt; Brian Holt: So, in other words,
you can be confident that now whatever is

119
00:06:31.420 --> 00:06:35.627
reflected into this location,
is actually what's in the state.

120
00:06:35.627 --> 00:06:38.570
Going back to our React.

121
00:06:43.421 --> 00:06:45.440
&gt;&gt; Brian Holt: And
I go here to the search params,

122
00:06:45.440 --> 00:06:48.304
watch over here on the right
where it says state.

123
00:06:53.271 --> 00:06:56.742
&gt;&gt; Brian Holt: So, you can actually see
it changing in real time in the dev tools

124
00:06:56.742 --> 00:06:57.268
as well.

125
00:06:57.268 --> 00:07:00.761
Sometimes it's even useful, you don't
have to copy this, I'm just showing you.

126
00:07:00.761 --> 00:07:05.109
But I could just put underneath
here instead of location I can

127
00:07:05.109 --> 00:07:08.188
put this.state.location, like that.

128
00:07:08.188 --> 00:07:13.506
And I'm just dumping out
that state right there.

129
00:07:13.506 --> 00:07:17.544
You can see it says
Seattle Washington right now, but

130
00:07:17.544 --> 00:07:21.683
I can change this to be whatever
I want it to be, right.

131
00:07:21.683 --> 00:07:24.953
And, it's just instantly reflect how to
the DOM because every time that it calls

132
00:07:24.953 --> 00:07:27.708
re-render right, it's just dumping
out that state right there.

133
00:07:27.708 --> 00:07:32.159
So, those two are now always
going to be tight together.

134
00:07:32.159 --> 00:07:34.461
Pretty cool, right?

135
00:07:34.461 --> 00:07:38.037
So again,
this is not free two-way data binding, but

136
00:07:38.037 --> 00:07:40.697
it's real easy two-way data binding.

137
00:07:44.667 --> 00:07:45.600
&gt;&gt; Brian Holt: Question.

138
00:07:45.600 --> 00:07:49.307
&gt;&gt; off screen male: If you're looking to
do, like, currency, would that be handled

139
00:07:49.307 --> 00:07:52.630
in the handle location event or
would you do that separate?

140
00:07:52.630 --> 00:07:53.251
&gt;&gt; Brian Holt: Currency?

141
00:07:53.251 --> 00:07:58.163
&gt;&gt; off screen male: Like if you wanted to
format a number to currency, on change?

142
00:07:58.163 --> 00:07:59.682
&gt;&gt; Brian Holt: I would probably
do that in the render method.

143
00:07:59.682 --> 00:08:03.940
I would keep the actual amount
inside of my state, and

144
00:08:03.940 --> 00:08:09.632
then on the render I would do all
the formatting to render it correctly.

145
00:08:09.632 --> 00:08:13.180
Yeah, I mean there are some caveats there,
it might be useful to get a direct

146
00:08:13.180 --> 00:08:16.008
statement from props,
there are some things they could do,

147
00:08:16.008 --> 00:08:18.572
depending on how intensive and
how much you have to do.

148
00:08:18.572 --> 00:08:23.306
But in general, minor formatting of
staking a dot in there like some commas

149
00:08:23.306 --> 00:08:25.874
and stuff like that usually not too bad.

150
00:08:28.976 --> 00:08:32.291
&gt;&gt; Brian Holt: Or, let me see if I
can rephrase that to a better answer.

151
00:08:32.291 --> 00:08:35.341
Do the simplest and
most readable thing first.

152
00:08:35.341 --> 00:08:39.654
Then, when you have performance problems,
optimize later.

153
00:08:39.654 --> 00:08:42.763
Always, always error on the side
of maintainability, readability.

154
00:08:42.763 --> 00:08:43.340
And then,

155
00:08:43.340 --> 00:08:47.840
when you have performance problems first
before you solve performance problems.

156
00:08:47.840 --> 00:08:49.450
It's in general my advice.

