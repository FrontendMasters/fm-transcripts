WEBVTT

1
00:00:00.510 --> 00:00:02.695
&gt;&gt; Brian Holt: So
we have all of these various things, and

2
00:00:02.695 --> 00:00:04.526
we're just gonna translate this.

3
00:00:07.307 --> 00:00:13.590
&gt;&gt; Brian Holt: Okay, comment this out.

4
00:00:16.184 --> 00:00:18.941
&gt;&gt; Brian Holt: And we're going to return.

5
00:00:23.981 --> 00:00:25.966
&gt;&gt; Brian Holt: So it's gonna be a div.

6
00:00:28.255 --> 00:00:33.097
&gt;&gt; Brian Holt: It's going to be an h1 with
Adopt Me in it, because we literally want

7
00:00:33.097 --> 00:00:37.699
the string Adopt Me in there so
we're going to put it right there.

8
00:00:39.630 --> 00:00:42.885
&gt;&gt; Brian Holt: Okay, and now we want
to use our Pet component, right,

9
00:00:42.885 --> 00:00:46.571
cuz that's the one that we built,
so how do we do that with JSX?

10
00:00:47.597 --> 00:00:51.282
&gt;&gt; Brian Holt: Well, notice I've been
calling all these things with capital

11
00:00:51.282 --> 00:00:57.150
letters, and this isn't just a convention,
it's actually required with JSX, right?

12
00:00:57.150 --> 00:01:02.073
Because if I put pet like this,
it's actually going to literally try and

13
00:01:02.073 --> 00:01:06.286
put a pet tag under the DOM,
which is not what we want, right?

14
00:01:08.312 --> 00:01:11.630
&gt;&gt; Brian Holt: No, what we want is,
we want capital P because this let's

15
00:01:11.630 --> 00:01:14.477
JSX know this is actually
a composite component,

16
00:01:14.477 --> 00:01:18.227
a React component that I created and
I want you to output, right?

17
00:01:18.227 --> 00:01:23.738
So you have to call your components what
a capital first letter or Pascal case.

18
00:01:25.906 --> 00:01:28.072
&gt;&gt; Brian Holt: So
I have a Pet component, and

19
00:01:28.072 --> 00:01:31.200
now I need to pass some
attributes into it.

20
00:01:31.200 --> 00:01:35.280
So I'm just gonna do it as if it
was a normal sort of HTML tag, so

21
00:01:35.280 --> 00:01:36.936
this is gonna to be Luna.

22
00:01:38.452 --> 00:01:43.803
&gt;&gt; Brian Holt: animal = "dog",
and breed = "Havanese".

23
00:01:47.613 --> 00:01:51.522
&gt;&gt; Brian Holt: Okay, now notice you've
seen this before with a self closing

24
00:01:51.522 --> 00:01:57.210
tags or void tags right, like you have
that slash angle bracket at the end.

25
00:01:57.210 --> 00:01:59.390
In HTML this is normally optional, right,

26
00:01:59.390 --> 00:02:05.410
you can have inputs without the closing
slash, it is not optional in JSX.

27
00:02:05.410 --> 00:02:10.090
You must put the closing slash,
and it just disambiguates this for

28
00:02:10.090 --> 00:02:12.500
JSX, that it doesn't have to
do all this crazy checking.

29
00:02:13.530 --> 00:02:17.586
So, just always put that closing slash
if it's a self closing tag, right?

30
00:02:19.749 --> 00:02:22.258
&gt;&gt; Brian Holt: But, on the flip side,
it is kind of useful, sometimes,

31
00:02:22.258 --> 00:02:24.385
you can do things like this.

32
00:02:24.385 --> 00:02:28.347
&gt;&gt; Brian Holt: Whereas this would
not be normal in HTML you can have

33
00:02:28.347 --> 00:02:31.766
self-closing div tags for example in JSX.

34
00:02:36.556 --> 00:02:37.644
&gt;&gt; Brian Holt: That's up to you.

35
00:02:37.644 --> 00:02:41.690
All right, so
I am going to make three of these and

36
00:02:41.690 --> 00:02:46.723
we will just modify them,
this was "Pepper", "bird",

37
00:02:46.723 --> 00:02:51.495
"Cockatiel" and
"Doink" the "cat" is "Mixed".

38
00:02:54.007 --> 00:02:57.635
&gt;&gt; Brian Holt: And that is how
you do composite components, or

39
00:02:57.635 --> 00:03:01.367
the components you made yourself,
with React.

40
00:03:02.890 --> 00:03:06.688
&gt;&gt; Brian Holt: So again, just to like kind
of sell you a little bit more on JSX.

41
00:03:06.688 --> 00:03:10.653
I know at least some of you are still
skeptical about this, look at this,

42
00:03:10.653 --> 00:03:14.700
this is five pretty concise lines
that are really easy to read.

43
00:03:14.700 --> 00:03:16.040
Look how long this one was,

44
00:03:17.960 --> 00:03:21.480
it doesn't even technically
fit in like one screen full.

45
00:03:22.900 --> 00:03:25.717
So it's just a little more compact and
a little bit easier to read.

46
00:03:26.798 --> 00:03:31.376
&gt;&gt; off screen male: With that return,
where you're using in the parenthesis,

47
00:03:31.376 --> 00:03:36.957
can you return h1 with three pets now or
do you have to return only one div?

48
00:03:38.345 --> 00:03:39.130
&gt;&gt; Brian Holt: It's a good question.

49
00:03:40.220 --> 00:03:43.209
So, notice I have one top level div,
right.

50
00:03:44.700 --> 00:03:50.434
Translate this in your head to be
a React.createElement call right?

51
00:03:50.434 --> 00:03:56.190
I can't say return 1,5 right,
this isn't Python, [LAUGH] right?

52
00:03:57.330 --> 00:04:00.290
You can only return one thing,
that's how JavaScript works, and so

53
00:04:00.290 --> 00:04:03.870
that's why you have to wrap everything
in this top level single div right?

54
00:04:05.080 --> 00:04:09.680
Now with React 16, the latest version,

55
00:04:09.680 --> 00:04:16.100
it is actually possible to return
a multiple top-level things.

56
00:04:16.100 --> 00:04:20.705
And the way that you do that is if I
wanted to do that instead of returning

57
00:04:20.705 --> 00:04:24.233
this wrapped in a div,
I could say React.Fragment.

58
00:04:27.671 --> 00:04:33.169
&gt;&gt; Brian Holt: And this'll actually return
it as multiple top level things right,

59
00:04:33.169 --> 00:04:36.599
so you can actually have these fragments.

60
00:04:36.599 --> 00:04:40.097
With JSX 2,
right now I'm showing you JSX 1,

61
00:04:40.097 --> 00:04:46.145
there's a new version of JSX coming,
JSX 2, it'll actually be able to do this.

62
00:04:48.942 --> 00:04:52.490
&gt;&gt; Brian Holt: And that'll be like
the short hand for doing fragments.

63
00:04:52.490 --> 00:04:56.280
It's not possible now,
React knows how to handle it, but

64
00:04:56.280 --> 00:05:00.880
Parcel doesn't know how to handle it,
so we won't be doing that.

65
00:05:00.880 --> 00:05:03.098
But does that answer your question?

66
00:05:05.035 --> 00:05:09.338
&gt;&gt; off screen male: Can we add
that handleTitleClick to the h1?

67
00:05:09.338 --> 00:05:13.014
&gt;&gt; Brian Holt: Yep,
we'll get to that, good question, but

68
00:05:13.014 --> 00:05:18.682
I think the answer to that is probably
how you suspected you would do it.

69
00:05:18.682 --> 00:05:25.774
You would say onClick =
this.handleTitleClick.

70
00:05:27.809 --> 00:05:29.977
&gt;&gt; Brian Holt: So notice we still
use these curly braces because this

71
00:05:29.977 --> 00:05:31.190
is a JavaScript expression.

72
00:05:31.190 --> 00:05:35.031
We're binding this onClick
event to this handleTitleClick.

73
00:05:37.166 --> 00:05:40.590
&gt;&gt; Brian Holt: Something you'll
commonly see with JSX, as you might

74
00:05:40.590 --> 00:05:45.354
imagine you start getting a lot of
properties on some of these components and

75
00:05:45.354 --> 00:05:47.224
it starts to get really long.

76
00:05:47.224 --> 00:05:51.666
So a lot of times, Prettier will wrap
this to look something like this.

77
00:05:57.909 --> 00:06:00.478
&gt;&gt; Brian Holt: Again, not something
you typically see with HTML, but

78
00:06:00.478 --> 00:06:04.306
in my opinion, this, especially if there's
like 15 different ones rather than

79
00:06:04.306 --> 00:06:08.160
having that really dense single liner
that this is a lot easier to read.

80
00:06:08.160 --> 00:06:11.948
Now, when I say this it's gonna go back
to one line cuz Prettier says so, but.

81
00:06:13.203 --> 00:06:17.550
&gt;&gt; Brian Holt: Last thing to change down
here, we have React.createElement(App).

82
00:06:17.550 --> 00:06:21.467
I actually, if you look at the repo I
never change this cuz I totally forget to.

