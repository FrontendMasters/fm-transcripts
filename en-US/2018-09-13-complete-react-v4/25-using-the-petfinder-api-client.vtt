WEBVTT

1
00:00:01.010 --> 00:00:04.915
&gt;&gt; Brian Holt: Now we're
gonna go into app.js.

2
00:00:07.189 --> 00:00:12.620
&gt;&gt; Brian Holt: And we're going to import
a API library for reading from Petfinder.

3
00:00:12.620 --> 00:00:17.361
So you're gonna say import pf

4
00:00:17.361 --> 00:00:21.758
from petfinder-client.

5
00:00:21.758 --> 00:00:26.780
Because Parcel is really cool,
it will install that for you.

6
00:00:26.780 --> 00:00:31.450
Full disclaimer, I wrote Petfinder
client for this particular workshop.

7
00:00:32.600 --> 00:00:35.453
So it's optimized for this class.

8
00:00:37.209 --> 00:00:39.813
&gt;&gt; Brian Holt: Yeah, there might still
be bugs with it, but I will fix them.

9
00:00:43.435 --> 00:00:47.892
&gt;&gt; Brian Holt: Okay, and then,
under Imports we're gonna say,

10
00:00:47.892 --> 00:00:50.418
const petfinder equals pf.

11
00:00:50.418 --> 00:00:55.640
So this is going to be giving us
an actual Petfinder API client.

12
00:00:55.640 --> 00:01:04.580
I'm gonna say key is process.env.API_KEY.

13
00:01:05.692 --> 00:01:14.048
&gt;&gt; Brian Holt: And
secret is process.env.API_SECRET.

14
00:01:16.018 --> 00:01:20.925
&gt;&gt; Brian Holt: So this is how you refer to
things that are inside of your .env file.

15
00:01:22.138 --> 00:01:28.000
&gt;&gt; Brian Holt: And Parsel is smart enough
to go and do a fine replace of it.

16
00:01:28.000 --> 00:01:31.640
There's actually a library called
.m that parcel uses to goes and

17
00:01:31.640 --> 00:01:33.470
does a find and replace on these.

18
00:01:36.226 --> 00:01:40.628
&gt;&gt; Brian Holt: So generally, these
Petfinder API keys are actually meant for

19
00:01:40.628 --> 00:01:41.716
node servers.

20
00:01:41.716 --> 00:01:45.035
So they're not generally meant for
client side development work.

21
00:01:45.035 --> 00:01:48.724
So if you actually bundle this out and
put it out in the open web,

22
00:01:48.724 --> 00:01:52.520
people can grab your API keys and
start using them.

23
00:01:52.520 --> 00:01:55.523
But for our example application here,
I think we're fine.

24
00:01:58.048 --> 00:02:00.801
&gt;&gt; Brian Holt: Okay, so
now we have Petfinder here,

25
00:02:00.801 --> 00:02:03.390
which is going to be our API client.

26
00:02:05.922 --> 00:02:10.659
&gt;&gt; Brian Holt: What I wanna do is rather
than having this dumb thing that I have to

27
00:02:10.659 --> 00:02:15.573
predefine all the pets,
I'm going to go out to the inter-webs and

28
00:02:15.573 --> 00:02:21.690
grab the latest pets from there, and
then load that into my application, right?

29
00:02:21.690 --> 00:02:24.940
So what I'm going to do here
is I'm going to make it so

30
00:02:24.940 --> 00:02:30.010
that my application is going to render for
the first time by itself, right?

31
00:02:30.010 --> 00:02:33.450
So the user sees something right away, and
then as soon as the application renders,

32
00:02:33.450 --> 00:02:38.260
it's going to go out and make an API
call to get more information, right?

33
00:02:38.260 --> 00:02:41.638
So that's a big key here is you want
something to render first to show

34
00:02:41.638 --> 00:02:44.676
the users that I'm in a loading
state at this moment in time.

35
00:02:44.676 --> 00:02:46.534
Go out and
grab the things from the API, and

36
00:02:46.534 --> 00:02:48.500
then render to the user
what they want to see.

37
00:02:48.500 --> 00:02:50.100
Does that make sense?

38
00:02:50.100 --> 00:02:57.258
So what we're going to do
is say component did mount.

39
00:02:57.258 --> 00:03:00.022
This is called a life cycle method.

40
00:03:00.022 --> 00:03:04.750
So every React component has
a full life cycle, right?

41
00:03:04.750 --> 00:03:07.900
It's going to start up and it's going
to run the constructer first, right?

42
00:03:07.900 --> 00:03:11.640
Because that's what's gonna get called
as soon as something that is created.

43
00:03:11.640 --> 00:03:14.640
After that, it's gonna call something
that's called component will amount.

44
00:03:14.640 --> 00:03:16.410
That's about to go into the DOM.

45
00:03:16.410 --> 00:03:19.828
That one's supposedly gonna be deprecated
some time in the near future because it's

46
00:03:19.828 --> 00:03:21.210
actually not really that useful.

47
00:03:21.210 --> 00:03:24.290
You're not gonna call things typically
before something that's rendered.

48
00:03:24.290 --> 00:03:26.160
But the one that you're
gonna call all the time,

49
00:03:26.160 --> 00:03:31.430
this one is by far the most useful one,
is component did mount.

50
00:03:31.430 --> 00:03:33.770
ComponentDidMount means I've
rendered to the DOM for

51
00:03:33.770 --> 00:03:38.880
the first time, now I'm ready to go out
and do things like buy into DOM element

52
00:03:38.880 --> 00:03:43.260
if you're integrating like jQuery and
React together, or D3 and React together.

53
00:03:43.260 --> 00:03:45.700
Or I'm gonna go make calls to the API.

54
00:03:45.700 --> 00:03:47.990
Or I'm gonna fire things to the analytics.

55
00:03:47.990 --> 00:03:51.280
All these kinda things, that's gonna
happen here in component, in Node.

56
00:03:51.280 --> 00:03:52.490
So keep that in mind.

57
00:03:52.490 --> 00:03:53.650
It renders to the DOM first.

58
00:03:53.650 --> 00:03:57.400
It's visible now, and then it's gonna
call component did mount, okay?

59
00:03:57.400 --> 00:03:58.808
And it gets called once.

60
00:04:00.258 --> 00:04:01.977
&gt;&gt; Brian Holt: Once per component, right?

61
00:04:01.977 --> 00:04:06.564
So if I have a component did mount here in
Pet, each one of these pets component did

62
00:04:06.564 --> 00:04:09.950
mount is going to get run individually for
each component.

63
00:04:09.950 --> 00:04:11.911
Does this make sense?

64
00:04:11.911 --> 00:04:17.819
Okay, so as soon as this mounts,

65
00:04:17.819 --> 00:04:27.532
I'm gonna say
petfinder.breed.list({animal,

66
00:04:28.832 --> 00:04:31.686
&gt;&gt; Brian Holt: Colon dog.

67
00:04:35.072 --> 00:04:40.110
&gt;&gt; Brian Holt: Okay, this returns
a promise, which is a JavaScript type.

68
00:04:41.650 --> 00:04:46.210
It's a object that represents a future
value that's going to be coming, right?

69
00:04:46.210 --> 00:04:50.350
So this obviously takes
time to go out to the API,

70
00:04:50.350 --> 00:04:54.480
get the list of breeds for
dogs, and come back.

71
00:04:54.480 --> 00:04:56.240
So what this returns is a promise.

72
00:04:56.240 --> 00:05:00.270
So if I say const promise equals this.

73
00:05:00.270 --> 00:05:04.830
Now, this promise, you can even see here,
&gt;&gt; Brian Holt: It's not saying.

74
00:05:04.830 --> 00:05:08.297
But this returns a promise to you.

75
00:05:08.297 --> 00:05:12.001
And then now, I can come down here,
promise.then.

76
00:05:12.001 --> 00:05:18.489
So basically, it says, as soon as this
comes back, then run this function.

77
00:05:18.489 --> 00:05:20.087
So I'm gonna get back data.

78
00:05:22.754 --> 00:05:25.846
&gt;&gt; Brian Holt: And actually,
all I want it to do is, if it works,

79
00:05:25.846 --> 00:05:28.438
call console.log with whatever it got.

80
00:05:29.734 --> 00:05:32.213
&gt;&gt; Brian Holt: And if it fails,
then call console.error.

81
00:05:36.068 --> 00:05:39.813
&gt;&gt; Brian Holt: It's gonna give you
an eslint error because you shouldn't ship

82
00:05:39.813 --> 00:05:42.050
consoles.log statements, right?

83
00:05:42.050 --> 00:05:43.942
But we'll remove that here in a second.

84
00:05:46.882 --> 00:05:48.630
&gt;&gt; Brian Holt: We'll
have const promise here.

85
00:05:48.630 --> 00:05:51.550
This is gonna be the result
of petfinder.breed.list.

86
00:05:51.550 --> 00:05:54.155
This is gonna be called
with these credentials,

87
00:05:54.155 --> 00:05:56.194
which the Petfinder client is doing.

88
00:05:56.194 --> 00:05:58.393
And then here, if it's successful,

89
00:05:58.393 --> 00:06:02.458
it'll call console.log with whatever
data we got back from the API.

90
00:06:02.458 --> 00:06:05.270
And if there's an error,
it'll come back like this.

91
00:06:05.270 --> 00:06:09.607
Fair warning, the Petfinder API
is XML-based, which is then being

92
00:06:09.607 --> 00:06:14.558
translated into JSON, which is why it's
a little silly on how it does things.

93
00:06:14.558 --> 00:06:17.506
So we're gonna have to do
a fair amount of checking,

94
00:06:17.506 --> 00:06:19.784
just because the API is a little insane.

95
00:06:19.784 --> 00:06:22.064
But it's all on the name
of seeing cute animals.

96
00:06:22.064 --> 00:06:24.138
So I think we're all prepared for
this, right?

97
00:06:24.138 --> 00:06:25.300
I am.

98
00:06:26.313 --> 00:06:29.589
&gt;&gt; Brian Holt: So if we refresh
the page here, and look here,

99
00:06:29.589 --> 00:06:32.530
you'll see this object in your console.

100
00:06:34.100 --> 00:06:37.930
So you'll see petfinder and
then breeds, right?

101
00:06:37.930 --> 00:06:41.890
And if I look in here, you'll see that
it gives me back 249 breeds of dogs.

102
00:06:41.890 --> 00:06:46.618
So you can look here and
see English Bulldog,

103
00:06:46.618 --> 00:06:49.736
Dutch Shepherd, a.

104
00:06:49.736 --> 00:06:51.220
Just kidding.

105
00:06:53.520 --> 00:06:54.400
So things of that sort.

106
00:06:56.120 --> 00:07:00.149
So that's how this API library works.

107
00:07:01.740 --> 00:07:04.860
And that's also how
component did mount works.

108
00:07:04.860 --> 00:07:07.800
There are more lifecycle methods that
we'll kind of get to as we keep going,

109
00:07:07.800 --> 00:07:11.760
but component did mount will be the one
that you will use by far the most.

110
00:07:11.760 --> 00:07:14.690
&gt;&gt; Speaker 2: Hey, Brian,
before we get to that,

111
00:07:14.690 --> 00:07:19.399
it sounds like some people in
Chrome are getting a cores error.

112
00:07:20.670 --> 00:07:24.463
&gt;&gt; Speaker 3: I was getting that
before I restarted my server.

113
00:07:24.463 --> 00:07:27.192
&gt;&gt; [CROSSTALK]
&gt;&gt; Speaker 2: Okay, so

114
00:07:27.192 --> 00:07:30.970
the moral of the story is restart your
server if you're getting a cores error.

115
00:07:30.970 --> 00:07:35.151
&gt;&gt; Brian Holt: So if you're not familiar,
you hit Ctrl+C here.

116
00:07:35.151 --> 00:07:38.538
It'll stop your server,
and then you do again.

117
00:07:44.226 --> 00:07:49.027
&gt;&gt; Brian Holt: Now, if you refresh
the page, you should see it.

