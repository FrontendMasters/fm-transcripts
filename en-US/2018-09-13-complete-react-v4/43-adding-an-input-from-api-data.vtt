WEBVTT

1
00:00:00.000 --> 00:00:05.250
&gt;&gt; Brian Holt: So we did animal change,
and now we're gonna do something else,

2
00:00:05.250 --> 00:00:11.082
so we're gonna have a breed selector
drop-down after animal, right?

3
00:00:11.082 --> 00:00:16.554
And the breed selector is going to be
dependent on whatever is an animal, right?

4
00:00:16.554 --> 00:00:18.738
So if if switch from dog to cat,

5
00:00:18.738 --> 00:00:23.274
there's different types of breeds
from cats and from dogs, and

6
00:00:23.274 --> 00:00:28.232
I have to request these from the API
each time someone makes that call.

7
00:00:28.232 --> 00:00:30.615
So in other words, I select dog,

8
00:00:30.615 --> 00:00:36.073
I'm going to have to make an API request
to get all the dog breeds and, yeah.

9
00:00:36.073 --> 00:00:39.587
So we're gonna make a drop-down
populated with all those breeds.

10
00:00:41.418 --> 00:00:44.203
&gt;&gt; Brian Holt: So the first thing that

11
00:00:44.203 --> 00:00:50.360
we're gonna do is we're
going to make a getBreeds

12
00:00:50.360 --> 00:00:56.345
function.
&gt;&gt; Brian Holt: This

13
00:00:56.345 --> 00:00:58.962
doesn't need to be an narrow function
cuz this is not going to be,

14
00:01:01.200 --> 00:01:03.037
&gt;&gt; Brian Holt: This is going to be called

15
00:01:03.037 --> 00:01:08.810
from places where we don't necessarily
need it for it to be an arrow function,

16
00:01:08.810 --> 00:01:17.876
and it's gonna say if (this.state.animal).
&gt;&gt; Brian Holt: So

17
00:01:17.876 --> 00:01:21.019
if I have an animal selected,
I have to go getBreeds.

18
00:01:22.040 --> 00:01:24.500
If I don't have an animal selected,
so I'm searching for

19
00:01:24.500 --> 00:01:28.930
all animals, it doesn't make any
sense to have a breed list, right?

20
00:01:28.930 --> 00:01:32.832
So if I don't have an animal selected,

21
00:01:32.832 --> 00:01:39.000
I'm gonna say this.setState,
&gt;&gt; Brian Holt: breeds, and

22
00:01:39.000 --> 00:01:44.372
breeds are just gonna be an empty array.
&gt;&gt; Brian Holt: I

23
00:01:44.372 --> 00:01:47.818
guess the other thing is I need to add,
do I have breeds?

24
00:01:47.818 --> 00:01:51.679
Yeah, so up here as well,
underneath state,

25
00:01:51.679 --> 00:01:55.448
I have to add breeds as
an empty array as well.

26
00:02:01.829 --> 00:02:02.849
&gt;&gt; Brian Holt: So line 9 there,

27
00:02:02.849 --> 00:02:07.347
added breeds, breed, it's gonna be
like the breed, the selector in breed.

28
00:02:07.347 --> 00:02:12.617
It's gonna be all the available current
breeds that I could select from,

29
00:02:12.617 --> 00:02:17.547
okay?
&gt;&gt; Brian Holt: So

30
00:02:17.547 --> 00:02:20.957
if I have no animal selected,
I will select breeds.

31
00:02:20.957 --> 00:02:25.183
Then I'm gonna go down here and

32
00:02:25.183 --> 00:02:30.231
will say petfinder.breed.list.

33
00:02:33.787 --> 00:02:37.789
&gt;&gt; Brian Holt: And I'm going to search for

34
00:02:37.789 --> 00:02:43.137
animal,
&gt;&gt; Brian Holt: this.state.animal

35
00:02:47.264 --> 00:02:48.704
&gt;&gt; Brian Holt: So this will give me

36
00:02:48.704 --> 00:02:54.291
a promise back of all the various animals
or breeds that I can select from.

37
00:02:54.291 --> 00:02:59.578
So I'm gonna say .then(data).

38
00:03:01.916 --> 00:03:05.738
&gt;&gt; Brian Holt: And here I'm gonna say,

39
00:03:05.738 --> 00:03:09.380
if data.petfinder and

40
00:03:09.380 --> 00:03:14.116
data.petfinder.breeds and

41
00:03:14.116 --> 00:03:19.953
data.petfinder.breeds.breed.

42
00:03:25.276 --> 00:03:26.681
&gt;&gt; Brian Holt: Actually, I'm gonna have to

43
00:03:26.681 --> 00:03:27.981
wrap this, is array call.

44
00:03:44.115 --> 00:03:48.036
&gt;&gt; Brian Holt: So make sure the petfinder
exists, make sure that breeds exists,

45
00:03:48.036 --> 00:03:51.688
and make sure that breed isn't
going to be an array of breeds.

46
00:03:51.688 --> 00:03:54.881
Cuz I think one of those animals,
it might be the pigs or

47
00:03:54.881 --> 00:03:59.743
something like that, don't have any breeds
and so you have to be defensive against

48
00:03:59.743 --> 00:04:05.017
that.
&gt;&gt; Brian Holt: And

49
00:04:05.017 --> 00:04:07.358
if that's the case, then we're gonna do,

50
00:04:09.122 --> 00:04:16.029
&gt;&gt; Brian Holt: this.setState,
&gt;&gt; Brian Holt: Of

51
00:04:16.029 --> 00:04:23.914
breeds:data.petfinder.breeds.breed.

52
00:04:27.201 --> 00:04:31.933
&gt;&gt; Brian Holt: Again, otherwise you're
gonna set breeds to be just the same

53
00:04:31.933 --> 00:04:36.745
line as line 37.
&gt;&gt; Brian Holt: Empty.

54
00:04:40.079 --> 00:04:41.487
&gt;&gt; Brian Holt: We have to go import

55
00:04:41.487 --> 00:04:45.536
petfinder at the top cuz we
don't have it up there yet.

56
00:04:45.536 --> 00:04:49.730
So next time we need to do is
import a petfinder client up here.

57
00:04:52.041 --> 00:04:53.407
&gt;&gt; Brian Holt: From petfinder,

58
00:04:53.407 --> 00:04:58.416
it is important that petfinder
comes before animals right here,

59
00:04:58.416 --> 00:05:02.863
so keep that in mind.
&gt;&gt; Brian Holt: And

60
00:05:02.863 --> 00:05:06.294
then we're gonna say,
&gt;&gt; Brian Holt: Sorry,

61
00:05:06.294 --> 00:05:10.982
pf is the way I was doing that before,

62
00:05:10.982 --> 00:05:15.670
const pf = const rather petfinder,

63
00:05:15.670 --> 00:05:20.339
pet finder = pf.
&gt;&gt; Brian Holt: And

64
00:05:20.339 --> 00:05:27.924
key is going to be process.env.API_KEY.

65
00:05:29.796 --> 00:05:33.718
&gt;&gt; Brian Holt: The other one is going to

66
00:05:33.718 --> 00:05:40.982
be secret: process.env.API_SECRET.

67
00:05:45.035 --> 00:05:46.505
&gt;&gt; Brian Holt: So now the petfinder down

68
00:05:46.505 --> 00:05:51.639
here will be available.
&gt;&gt; Brian Holt: So

69
00:05:51.639 --> 00:05:54.030
I just did import pf up here.

70
00:05:54.030 --> 00:05:58.825
I run this function here,
which returns the petfinder singleton,

71
00:05:58.825 --> 00:06:03.380
which is just the same API client
gets imported to every single,

72
00:06:05.168 --> 00:06:06.735
&gt;&gt; Brian Holt: Place in the code base.

73
00:06:06.735 --> 00:06:11.773
Give it the key in secret, and then down
here we can use that to request breeds.

74
00:06:11.773 --> 00:06:16.694
So now we have a working getBreeds
function, so we actually need to use that.

75
00:06:18.938 --> 00:06:20.873
&gt;&gt; Brian Holt: So when do we wanna select,

76
00:06:20.873 --> 00:06:26.320
or when do we wanna get new breeds in?
&gt;&gt; Brian Holt: Well,

77
00:06:26.320 --> 00:06:30.988
in general, we wanna get breeds
whenever a person selects,

78
00:06:32.245 --> 00:06:34.082
&gt;&gt; Brian Holt: A new animal,

79
00:06:34.082 --> 00:06:37.754
so if they go from cat to dog,

80
00:06:37.754 --> 00:06:43.581
we need to request new breeds,
makes sense?

81
00:06:43.581 --> 00:06:48.788
So what you can do here,
&gt;&gt; Brian Holt: Well, first of all,

82
00:06:48.788 --> 00:06:55.610
it's tempting to do this.
&gt;&gt; Brian Holt: This is in general,

83
00:06:55.610 --> 00:06:59.500
how you would think that it should work,
that if I call setState,

84
00:06:59.500 --> 00:07:02.190
immediately afterwards I would think.

85
00:07:02.190 --> 00:07:07.046
Okay we are done here, I'm just referring
to this.state.animal, that should work.

86
00:07:07.046 --> 00:07:12.899
Because of how React works, this doesn't,
if you remember what I said previously.

87
00:07:12.899 --> 00:07:16.306
React batches together all of your updates

88
00:07:16.306 --> 00:07:21.047
into one atomic update which
means that if I call setState.

89
00:07:21.047 --> 00:07:26.327
I'm not actually guaranteed that,
that's going to flush immediately,

90
00:07:26.327 --> 00:07:30.346
it might but in this case it
probably won't be that fast,

91
00:07:30.346 --> 00:07:34.150
usually it's on next tick,
or it sets timeout zero.

92
00:07:34.150 --> 00:07:35.797
So how do we make that work then,

93
00:07:35.797 --> 00:07:39.783
how do we get it to the point where we
can guarantee that that's going to work?

94
00:07:39.783 --> 00:07:44.105
Well, there's a secret
second function that you can

95
00:07:44.105 --> 00:07:48.534
provide to setState that it
will run after it flushes.

96
00:07:48.534 --> 00:07:55.043
So I can just say, hey, whenever
youâ€™re done call this.getBreeds and

97
00:07:55.043 --> 00:08:01.988
that will work.
&gt;&gt; Brian Holt: The other thing here is,

98
00:08:01.988 --> 00:08:05.995
whenever we call animal and
we update our animal.

99
00:08:05.995 --> 00:08:10.623
You probably wanna reset the breed because
I don't wanna search for a cat husky,

100
00:08:10.623 --> 00:08:13.399
despite how awesome that sounds.
&gt;&gt; Speaker 2: [LAUGH]

101
00:08:13.399 --> 00:08:15.395
&gt;&gt; Brian Holt: Doesn't make any sense, so

102
00:08:15.395 --> 00:08:18.138
we are gonna set breed to be empty string

103
00:08:18.138 --> 00:08:22.346
again.
&gt;&gt; Brian Holt: Does

104
00:08:22.346 --> 00:08:24.290
the getBreeds part of
that make sense to you?

105
00:08:25.680 --> 00:08:28.105
Yeah?
&gt;&gt; Speaker 2: Even though the setState

106
00:08:28.105 --> 00:08:33.695
batches all of the updates all together,
can we assume that when you

107
00:08:33.695 --> 00:08:39.170
add that call-back function that
it would be synchronous then?

108
00:08:39.170 --> 00:08:43.920
So it'll happen after the setState?
&gt;&gt; Brian Holt: If you add that function

109
00:08:43.920 --> 00:08:47.920
you are guaranteed that it will be
called after the setState is flushed.

110
00:08:47.920 --> 00:08:50.458
That's the guarantee that
they provide you there.

111
00:08:52.873 --> 00:08:54.569
&gt;&gt; Brian Holt: Does that answer your

112
00:08:54.569 --> 00:08:56.050
question?
&gt;&gt; Speaker 2: Yeah,

113
00:08:56.050 --> 00:09:01.344
I was just wondering if it will work,
like your work's in a one-off,

114
00:09:01.344 --> 00:09:04.394
but what if you have some crazy app with,

115
00:09:04.394 --> 00:09:08.917
you needed it all to work synchronicity,
like in a series?

116
00:09:08.917 --> 00:09:12.719
The part that's getting me
confused is cuz you said,

117
00:09:12.719 --> 00:09:17.955
React will put all the setStates together,
but it's able to track like,

118
00:09:17.955 --> 00:09:21.513
at what points to call those callbacks?
&gt;&gt; Brian Holt: Yeah,

119
00:09:21.513 --> 00:09:25.648
so if you have that complex orchestration,

120
00:09:25.648 --> 00:09:32.702
using setState as your coordinating
method is probably not the best idea.

121
00:09:32.702 --> 00:09:36.994
There's an advanced feature of the latest
version of React, which is React 16,

122
00:09:36.994 --> 00:09:39.814
which is what I'm showing you,
called Time Slicing,

123
00:09:39.814 --> 00:09:41.613
which I will not be talking about.

124
00:09:41.613 --> 00:09:45.499
But that's what you wanna get into, is
you can actually have a little bit more,

125
00:09:45.499 --> 00:09:48.515
I don't think it's actually
even generally available yet,

126
00:09:48.515 --> 00:09:50.202
which is why I'm not teaching it.

127
00:09:50.202 --> 00:09:54.350
But it will allow you a little bit more
granular control of how React does things,

128
00:09:54.350 --> 00:09:58.440
like you can set things as priority
updates and low priority updates.

129
00:09:58.440 --> 00:10:00.402
So there is a new method coming called,

130
00:10:00.402 --> 00:10:05.507
defer setState.
&gt;&gt; Brian Holt: So that gets a little

131
00:10:05.507 --> 00:10:10.414
bit more into if you will need to be
a little bit more governing of how things

132
00:10:10.414 --> 00:10:15.309
update.
&gt;&gt; Brian Holt: Cool,

133
00:10:15.309 --> 00:10:19.145
so now we need to make
a handle breed change as well,

134
00:10:19.145 --> 00:10:23.533
handleBreedChange, this one
is gonna be really simple.

135
00:10:28.559 --> 00:10:31.754
&gt;&gt; Brian Holt: This.setState() breed

136
00:10:31.754 --> 00:10:36.474
is gonna be event.target.value, and

137
00:10:36.474 --> 00:10:43.612
that's all that needs to be.
&gt;&gt; Speaker 2: Spelling.

138
00:10:43.612 --> 00:10:45.278
&gt;&gt; Speaker 3: BreedChange is spelled

139
00:10:45.278 --> 00:10:46.926
wrong.
&gt;&gt; Brian Holt: Cange, no,

140
00:10:46.926 --> 00:10:51.383
that's what I meant.
&gt;&gt; Speaker 2: Thank

141
00:10:51.383 --> 00:10:56.755
you.
&gt;&gt; Brian Holt: And

142
00:10:56.755 --> 00:10:59.080
then last thing, we have to go
write our markup that shows it.

143
00:10:59.080 --> 00:11:06.985
We got one more label to put down here,

144
00:11:06.985 --> 00:11:12.182
Label htmlFor = breed.

145
00:11:12.182 --> 00:11:17.115
And when you put this as breed and

146
00:11:17.115 --> 00:11:22.048
stop that, select, and here,

147
00:11:22.048 --> 00:11:26.638
we're gonna put id = breed,

148
00:11:28.957 --> 00:11:34.838
&gt;&gt; Brian Holt: value = this.state.breed.

149
00:11:37.059 --> 00:11:40.936
&gt;&gt; Brian Holt: onChange = this.handle

150
00:11:40.936 --> 00:11:44.636
BreedChange, onBlur =

151
00:11:44.636 --> 00:11:54.074
this.handleBreedChange.
&gt;&gt; Brian Holt: And

152
00:11:54.074 --> 00:11:56.318
then we have to put one more thing here,

153
00:11:56.318 --> 00:12:01.030
if there's no breeds in the breed list
we wanna disable that drop-down, right?

154
00:12:01.030 --> 00:12:06.236
Because if there's nothing we
wanna show to the V user that that

155
00:12:06.236 --> 00:12:11.248
select is disabled.So we can
put in here disabled equals and

156
00:12:11.248 --> 00:12:16.588
then we can use a ternary here,
&gt;&gt; Brian Holt: Actually,

157
00:12:16.588 --> 00:12:22.243
we don't even have to do that, so
if this doesn't have any length,

158
00:12:22.243 --> 00:12:30.780
this.state.breeds.length
&gt;&gt; Brian Holt: Then this will be disabled.

159
00:12:32.480 --> 00:12:35.555
So think about this for a second.

160
00:12:35.555 --> 00:12:38.964
In fact,
let's just go into my browser here and

161
00:12:38.964 --> 00:12:43.837
I'll show you, if I have const,
all right, let's go and do that.

162
00:12:43.837 --> 00:12:48.724
We're using type coercion to
our advantage, so if I have !0,

163
00:12:48.724 --> 00:12:53.986
it's gonna be true and if I have !1,
it's gonna be false, right?

164
00:12:53.986 --> 00:13:01.306
So if this is not 0, so if the length
is 0 then it's going to be disabled.

165
00:13:01.306 --> 00:13:07.320
If I have not anything more than like 1,
2, 3, it's gonna be false and

166
00:13:07.320 --> 00:13:11.401
so it will not be disabled,
does that make sense?

167
00:13:11.401 --> 00:13:17.729
It's a little clever trick, you can
also put in here, if disable triple = 0,

168
00:13:17.729 --> 00:13:24.188
this would work as well.
&gt;&gt; Brian Holt: I think I'm lazy so

169
00:13:24.188 --> 00:13:26.607
that's why I didn't put the not there but
we can leave this in,

170
00:13:26.607 --> 00:13:28.309
this is probably a little
bit more clear so.

171
00:13:30.260 --> 00:13:34.250
So if you have nothing in
the breeds list then disable it.

172
00:13:34.250 --> 00:13:38.794
If you have anything more
than that then don't disable

173
00:13:38.794 --> 00:13:43.927
it.
&gt;&gt; Brian Holt: Okay, and then

174
00:13:43.927 --> 00:13:49.739
we're gonna put down here a submit button
that we will address later in the course.

175
00:13:49.739 --> 00:13:52.799
But for now,
this submit button will do nothing.

176
00:13:58.179 --> 00:13:58.704
&gt;&gt; Brian Holt: Okay, so

177
00:13:58.704 --> 00:14:02.269
now we have the select, we have to go and
put our options in here.

178
00:14:08.601 --> 00:14:11.792
&gt;&gt; Brian Holt: And here we're going to map

179
00:14:11.792 --> 00:14:17.066
over our breeds list that we've requested,

180
00:14:17.066 --> 00:14:19.841
after an empty option,

181
00:14:19.841 --> 00:14:25.256
this.state.breeds.map(breed, yeah,

182
00:14:25.256 --> 00:14:31.975
that's right.
&gt;&gt; Brian Holt: And

183
00:14:31.975 --> 00:14:38.076
we're gonna do, option key={breed}

184
00:14:38.076 --> 00:14:43.479
value={breed} and this text in it

185
00:14:43.479 --> 00:14:51.972
is breed.
&gt;&gt; Brian Holt: So

186
00:14:51.972 --> 00:14:55.212
we have a list of breeds that came back
from the API and this is just what we

187
00:14:55.212 --> 00:15:00.622
wanna show to the user.
&gt;&gt; Brian Holt: So

188
00:15:00.622 --> 00:15:04.620
we have our empty option up here that
represents all breeds, I don't wanna

189
00:15:04.620 --> 00:15:08.061
select a breed at this moment in time so
show me all of the breeds.

190
00:15:08.061 --> 00:15:12.444
And then down here they can select
one of the breeds that came back from

191
00:15:12.444 --> 00:15:17.389
the API.
&gt;&gt; Brian Holt: Makes

192
00:15:17.389 --> 00:15:22.267
sense?
&gt;&gt; Brian Holt: So

193
00:15:22.267 --> 00:15:27.420
now this should work.
&gt;&gt; Brian Holt: I'm just going

194
00:15:27.420 --> 00:15:32.332
to make sure this works before I say
too much, so I'm gonna select dog.

195
00:15:32.332 --> 00:15:35.980
And then I go here and
notice that this is now enabled, and

196
00:15:35.980 --> 00:15:38.651
I can select all the dog breeds down here.

197
00:15:38.651 --> 00:15:44.620
So dalmatian, and then if I select cat,
now there's cats in here,

198
00:15:44.620 --> 00:15:49.752
or if I just go back to selecting nothing,
then it disables

199
00:15:49.752 --> 00:15:57.120
the breed thing again.
&gt;&gt; Brian Holt: Pretty cool, right?

200
00:15:57.120 --> 00:16:04.188
I think it's cool.
&gt;&gt; Brian Holt: I

201
00:16:04.188 --> 00:16:07.923
don't know what a Peruvian Inca
orchid is but it sounds amazing.

