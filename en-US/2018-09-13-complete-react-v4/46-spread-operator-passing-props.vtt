WEBVTT

1
00:00:00.070 --> 00:00:01.820
&gt;&gt; Brian Holt: Actually,
before we start into Context,

2
00:00:01.820 --> 00:00:04.760
let's talk about the spread
operator really quick.

3
00:00:04.760 --> 00:00:10.299
I intentionally don't teach this very much
because I think it's kind of a bad idea,

4
00:00:10.299 --> 00:00:12.728
and I think people abuse it too much.

5
00:00:12.728 --> 00:00:18.312
If I was gonna use the spread
operator here inside of render,

6
00:00:18.312 --> 00:00:23.611
I have const obj =
&gt;&gt; Brian Holt: Not state,

7
00:00:23.611 --> 00:00:28.288
but maybe animal: "dog", and

8
00:00:28.288 --> 00:00:32.350
name: "Luna", right?

9
00:00:32.350 --> 00:00:37.240
If I wanted to pass this into results,
I have kind of two choices.

10
00:00:37.240 --> 00:00:41.920
I can have pet = {obj} up here, right?

11
00:00:41.920 --> 00:00:43.431
And this would pass in, so

12
00:00:43.431 --> 00:00:48.690
I'd have to refer to the set inside of
results as this.props.pet.name, right?

13
00:00:48.690 --> 00:00:52.790
That's annoying, I don't think in
general that's the most useful pattern.

14
00:00:53.870 --> 00:00:59.005
I think a better pattern
is passing everything in

15
00:00:59.005 --> 00:01:04.152
explicitly, of saying name={obj.name}.

16
00:01:04.152 --> 00:01:11.477
And animal={obj.animal}.

17
00:01:11.477 --> 00:01:15.160
I think that's a more useful pattern, so
then I can refer to it as sys.props.name.

18
00:01:15.160 --> 00:01:18.400
And it makes Results API
a little bit more explicit.

19
00:01:20.060 --> 00:01:21.570
There is a third option.

20
00:01:21.570 --> 00:01:26.500
Which in general, I kind of steer
people away from that you can do this,

21
00:01:28.030 --> 00:01:29.540
dot, dot, dot, obj.

22
00:01:32.550 --> 00:01:34.970
What this is,
this is called the spread operator.

23
00:01:34.970 --> 00:01:39.030
It's very similar to the spread operator
that already exists in JavaScript, but

24
00:01:39.030 --> 00:01:42.120
it's a JSX kind of specific version of it.

25
00:01:42.120 --> 00:01:48.350
But what this is gonna do is, rather than
having to write out animal={obj.animal},

26
00:01:48.350 --> 00:01:50.370
it spreads that across the component.

27
00:01:50.370 --> 00:01:53.995
So now this will receive
this.props.animal and

28
00:01:53.995 --> 00:01:58.577
this.props.name, because this
is being spread across it.

29
00:01:58.577 --> 00:02:00.520
Does that answer your question?

30
00:02:00.520 --> 00:02:01.740
Yeah?
&gt;&gt; off screen female: Why is that bad?

31
00:02:01.740 --> 00:02:05.675
&gt;&gt; Brian Holt: I think it's bad because
it's very implicit and not explicit.

32
00:02:07.345 --> 00:02:09.245
&gt;&gt; Brian Holt: Which is two
ways of saying the same thing.

33
00:02:09.245 --> 00:02:10.286
[LAUGH]
&gt;&gt; off screen female: You

34
00:02:10.286 --> 00:02:12.938
can go up to object and see exactly what?

35
00:02:12.938 --> 00:02:15.055
&gt;&gt; Brian Holt: Yeah, but
what if it's coming in from props?

36
00:02:15.055 --> 00:02:18.090
A lot of times, what people will
do is this.props like this.

37
00:02:18.090 --> 00:02:20.346
And it'll be the props
coming into its object, and

38
00:02:20.346 --> 00:02:23.830
so there's multiple layers deep that
you don't see where it's coming from.

39
00:02:23.830 --> 00:02:25.846
And the other thing is, a lot of times,

40
00:02:25.846 --> 00:02:29.104
you're passing in stuff that
you don't want in there anyway.

41
00:02:29.104 --> 00:02:31.839
You're just being lazy and not wanting
to type things out, so you're like,

42
00:02:31.839 --> 00:02:33.030
I want most of the things in here.

43
00:02:33.030 --> 00:02:36.050
I want some of the things in here, but
I'm gonna pass everything into it, right?

44
00:02:37.630 --> 00:02:40.135
Does that make some sense?

45
00:02:40.135 --> 00:02:42.896
So here in this case,
where I can look up here and see object,

46
00:02:42.896 --> 00:02:44.484
I would be fine with this, right?

47
00:02:44.484 --> 00:02:51.800
But maybe a better example of this
would be if I went into results.js,

48
00:02:51.800 --> 00:02:56.760
and for whatever reason,
I thought it was a good

49
00:02:56.760 --> 00:03:01.721
idea down here to say {...this.props} or

50
00:03:01.721 --> 00:03:05.950
this.state, or something like this.

51
00:03:05.950 --> 00:03:08.990
What is in props right now?

52
00:03:08.990 --> 00:03:11.626
I don't know, stuff that I want in pet?

53
00:03:11.626 --> 00:03:13.979
Maybe, [LAUGH] right?

54
00:03:13.979 --> 00:03:16.619
So you get into kind of these weird
situations where it becomes very implicit,

55
00:03:16.619 --> 00:03:18.550
and you're passing things
around that you don't need.

56
00:03:18.550 --> 00:03:19.603
All of a sudden,

57
00:03:19.603 --> 00:03:24.579
you have all these props you that don't
necessarily have to mess around with.

58
00:03:24.579 --> 00:03:26.770
I think it's better to be explicit.

59
00:03:26.770 --> 00:03:30.492
Now, or even in this case, rather than
doing everything that I did here,

60
00:03:30.492 --> 00:03:32.788
I could of just done {...pet}, right?

61
00:03:32.788 --> 00:03:34.266
That comes in with pet here.

62
00:03:37.015 --> 00:03:38.732
&gt;&gt; Brian Holt: I still don't like this,
right?

63
00:03:38.732 --> 00:03:42.308
I don't like this because now pet has
all this weird nesting that I want.

64
00:03:42.308 --> 00:03:45.135
And I wanna handle that
when I'm passing in, so

65
00:03:45.135 --> 00:03:48.930
that this pet component is
now way more reusable, right?

66
00:03:48.930 --> 00:03:52.311
Because I just have to pass in
an animal name, breed, media, location,

67
00:03:52.311 --> 00:03:55.745
all that kind of stuff, and it works,
instead of having to finagle all this

68
00:03:55.745 --> 00:03:57.730
nesting and
object shape to get it to work.

69
00:03:59.523 --> 00:04:04.010
&gt;&gt; Brian Holt: So it's a double-edged
sword, and not the good kind.

70
00:04:04.010 --> 00:04:05.020
Is there a good kind?

71
00:04:05.020 --> 00:04:07.133
It's a bad one,
it's a bad double-edged sword.

72
00:04:07.133 --> 00:04:11.230
[LAUGH] Okay,
the analogy is dead, but don't.

73
00:04:11.230 --> 00:04:14.434
I think the sum of my story is,
unless it's very obvious what's coming in

74
00:04:14.434 --> 00:04:16.722
with the object,
I would suggest that you not do it.

75
00:04:21.565 --> 00:04:23.469
&gt;&gt; Brian Holt: In general, over my career,

76
00:04:23.469 --> 00:04:28.127
I've just found that I don't like
implicitness, I don't like magic.

77
00:04:28.127 --> 00:04:31.430
I used to write a lot of Django,
when I was doing Python.

78
00:04:33.090 --> 00:04:36.360
There's just too much magic for me to go.

79
00:04:36.360 --> 00:04:38.970
Django developers are amazing,
if you understand how Django works.

80
00:04:38.970 --> 00:04:42.582
And I think we could extend this to Rails,
or some of these other backends.

81
00:04:42.582 --> 00:04:44.100
It's amazing,
if you know what's happening.

82
00:04:44.100 --> 00:04:47.559
But for me, as a newbie to those,
I was like, there's so

83
00:04:47.559 --> 00:04:50.746
much magic in here,
I don't know what's going on.

84
00:04:50.746 --> 00:04:54.006
And so I've learned as part of
my trade to not rely on magic.

85
00:04:54.006 --> 00:04:59.511
And React is not magical,
that's one of the reasons I like it.

86
00:05:00.583 --> 00:05:04.832
&gt;&gt; Brian Holt: Okay,
that was an excessively long diatribe on,

87
00:05:04.832 --> 00:05:08.460
[LAUGH] why not to use
the spread operator.

88
00:05:08.460 --> 00:05:10.770
But it's good for you to know
because you'll see it in code bases.

89
00:05:10.770 --> 00:05:12.970
But in general,
I'd advise you to shy away from it.

