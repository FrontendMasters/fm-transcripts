WEBVTT

1
00:00:00.200 --> 00:00:03.575
&gt;&gt; Brian Holt: Next thing I
wanna talk about is ESLint.

2
00:00:06.970 --> 00:00:09.400
&gt;&gt; Brian Holt: So
Prettier is gonna handle formatting.

3
00:00:09.400 --> 00:00:13.360
This isn't gonna handle things like
stylistic choices about your code.

4
00:00:13.360 --> 00:00:17.060
It's not gonna handle you should use
double equals versus triple equals.

5
00:00:17.060 --> 00:00:18.300
Prettier doesn't care.

6
00:00:18.300 --> 00:00:20.590
Prettier is just like,
this should have a space here, and

7
00:00:20.590 --> 00:00:24.564
it should not have a space here,
line break here, all that kinda stuff.

8
00:00:24.564 --> 00:00:30.790
So for example, if I put parentheses
around that, because these

9
00:00:30.790 --> 00:00:36.630
parentheses are optional, Prettier just
says, no, no parentheses go there.

10
00:00:36.630 --> 00:00:38.998
It's just formatting your code for
you, but

11
00:00:38.998 --> 00:00:41.502
it's not handling any
of the stylistic stuff.

12
00:00:41.502 --> 00:00:42.989
That's where ESLint comes in.

13
00:00:42.989 --> 00:00:46.610
It handles more of the stylistic
choices about your code base.

14
00:00:46.610 --> 00:00:50.388
It kinda helps you find those variables
that you're not using that you

15
00:00:50.388 --> 00:00:52.580
fat-fingered or something like that.

16
00:00:52.580 --> 00:00:56.610
It's gonna say you should be using
double equals versus triple equals.

17
00:00:56.610 --> 00:00:59.498
So a lot of times people confuse what's
the difference between Prettier and

18
00:00:59.498 --> 00:01:01.088
what's the difference between ESLint?

19
00:01:01.088 --> 00:01:03.455
Because there is some overlap, right?

20
00:01:03.455 --> 00:01:06.635
ESLint can check if you're using
the correct amount of indentation and

21
00:01:06.635 --> 00:01:08.919
stuff like that, but
we wanna turn that stuff off.

22
00:01:08.919 --> 00:01:11.739
We wanna let Prettier handle
the formatting stuff, and

23
00:01:11.739 --> 00:01:15.284
we wanna let ESLint handle the stylistic
choices that we're making.

24
00:01:15.284 --> 00:01:16.832
Does that make sense?

25
00:01:16.832 --> 00:01:19.558
Cool.

26
00:01:19.558 --> 00:01:24.605
So we're gonna make a new file called .,
this is inside of the,

27
00:01:24.605 --> 00:01:28.818
not the source directory,
just the root directory.

28
00:01:28.818 --> 00:01:34.964
And it's gonna be called .eslintrc.json.

29
00:01:34.964 --> 00:01:37.197
I've taught this course four times now,
and

30
00:01:37.197 --> 00:01:40.739
this will be my third different
ESLint configuration that I've used.

31
00:01:40.739 --> 00:01:44.065
My opinion of ESLint
has changed over time.

32
00:01:46.390 --> 00:01:50.935
&gt;&gt; Brian Holt: So the first time I
taught this, we used Standard JS,

33
00:01:50.935 --> 00:01:55.792
which is a very opinionated
take on how code should look.

34
00:01:55.792 --> 00:01:59.948
The next time, I used Airbnb,
which I found out is the most popular one.

35
00:01:59.948 --> 00:02:05.230
If you've not read the Airbnb JavaScript
guidelines, you should.

36
00:02:05.230 --> 00:02:07.650
You may not necessarily agree with
everything that they're saying, but

37
00:02:07.650 --> 00:02:09.880
it's a good thought
exercise to go through and

38
00:02:09.880 --> 00:02:12.620
disagree with some of those things,
if you do.

39
00:02:12.620 --> 00:02:14.721
It's very opinionated, very,

40
00:02:14.721 --> 00:02:17.820
very strict, particularly when
it comes to writing React.

41
00:02:19.000 --> 00:02:22.356
So this time, I'm choosing to take a
little bit more laid-back approach to it.

42
00:02:22.356 --> 00:02:28.409
I'm gonna use what's called
the ESLint recommended rules.

43
00:02:28.409 --> 00:02:32.815
So first thing we're gonna
have is gonna be extends.

44
00:02:36.337 --> 00:02:37.355
&gt;&gt; Brian Holt: So with ESLint,

45
00:02:37.355 --> 00:02:42.316
you can kinda get these package of rules
that you're going to adhere by, right?

46
00:02:45.183 --> 00:02:50.058
&gt;&gt; Brian Holt: So
the first package that we're going

47
00:02:50.058 --> 00:02:55.095
to adhere by is eslint:recommended.

48
00:02:55.095 --> 00:02:58.941
And this is just what the ESLint
maintainers themselves, here's a very

49
00:02:58.941 --> 00:03:02.864
minimal subset of ESLint that just
about everyone should be adhering to.

50
00:03:07.289 --> 00:03:08.690
&gt;&gt; Brian Holt: So
this is built into ESLint.

51
00:03:08.690 --> 00:03:12.519
You don't have to install a separate
preset or anything like that.

52
00:03:12.519 --> 00:03:18.341
The second one that we're gonna do, this
includes some stuff about indentation and

53
00:03:18.341 --> 00:03:23.105
that kinda stuff, which we don't
want ESLint to check for, right?

54
00:03:23.105 --> 00:03:29.904
We just want ESLint to check for stylistic
things and not formatting things.

55
00:03:29.904 --> 00:03:32.103
So we need to turn off
some of those rules.

56
00:03:32.103 --> 00:03:37.037
Luckily the team at Prettier just
provides you with a Prettier preset that

57
00:03:37.037 --> 00:03:40.790
you can extend and just say,
turn off all these things.

58
00:03:40.790 --> 00:03:45.614
So that's all this Prettier one does,
is it just turns off stuff.

59
00:03:45.614 --> 00:03:47.540
We'll also be getting into
the React stuff later.

60
00:03:47.540 --> 00:03:50.889
So we'll also turn off
the Prettier/React stuff.

61
00:03:55.290 --> 00:03:58.567
&gt;&gt; Brian Holt: Okay, so
that's what that's gonna do for you.

62
00:04:01.690 --> 00:04:04.967
&gt;&gt; Brian Holt: The next thing
we're gonna do is parserOptions.

63
00:04:09.501 --> 00:04:14.343
&gt;&gt; Brian Holt: ParserOptions are just
gonna be extended functionality that

64
00:04:14.343 --> 00:04:17.610
you want your ESLint to be able to handle.

65
00:04:19.010 --> 00:04:22.434
So the first thing is we wanna
use a recent version of ECMA.

66
00:04:25.171 --> 00:04:27.409
&gt;&gt; Brian Holt: So what is ECMA?

67
00:04:27.409 --> 00:04:30.752
ECMAScript is actually the full name
of the specification that defines

68
00:04:30.752 --> 00:04:31.817
JavaScript, right?

69
00:04:31.817 --> 00:04:36.965
So there's a body called ECMA that
defines the ECMAScript standard,

70
00:04:36.965 --> 00:04:41.249
of which JavaScript is
an implementation of ECMAScript.

71
00:04:41.249 --> 00:04:45.966
Now, there is only a few
implementations of ECMAScript, and

72
00:04:45.966 --> 00:04:48.427
JavaScript is the primary one.

73
00:04:48.427 --> 00:04:50.217
That's really the only one
that you have to care about.

74
00:04:50.217 --> 00:04:53.943
For all intents and purposes,
you can assume that ECMAScript and

75
00:04:53.943 --> 00:04:56.868
JavaScript are pretty much the same thing,
okay?

76
00:04:56.868 --> 00:04:59.792
So we're gonna use the latest one, 2018.

77
00:04:59.792 --> 00:05:04.551
This is just use everything that
has been standardized by 2018.

78
00:05:04.551 --> 00:05:08.117
If I did something like 2015 here,
something like that,

79
00:05:08.117 --> 00:05:11.957
which would actually be the same as 6,
that would be saying like,

80
00:05:11.957 --> 00:05:15.750
anything that's newer than that
in JavaScript, fail, right?

81
00:05:15.750 --> 00:05:18.236
Cuz you wanna target older browsers or
something like that.

82
00:05:18.236 --> 00:05:20.705
But for our purposes, 2018 is great.

83
00:05:24.235 --> 00:05:28.052
&gt;&gt; Brian Holt: Okay, sourceType,
we're gonna be using modules, so

84
00:05:28.052 --> 00:05:30.419
that's why we're gonna do that.

85
00:05:32.380 --> 00:05:35.360
Modules are just the way that we're
going to separate our files out.

86
00:05:37.030 --> 00:05:41.492
And then ecmaFeatures,
we need it to understand JSX,

87
00:05:41.492 --> 00:05:46.834
which I will be showing here momentarily,
so you put jsx: true.

88
00:05:50.684 --> 00:05:55.930
&gt;&gt; Brian Holt: Okay, last thing here,
we're gonna put an env.

89
00:05:55.930 --> 00:06:00.878
This is gonna let ESLint know what
kind of environments you're gonna

90
00:06:00.878 --> 00:06:03.020
be writing code for, right?

91
00:06:03.020 --> 00:06:07.870
If I'm writing code just for the browser,
I don't wanna be able to use Node

92
00:06:07.870 --> 00:06:11.150
features in the browser, and
I want ESLint to catch that.

93
00:06:11.150 --> 00:06:13.900
However, towards the end of the class,
we will be using Node, so

94
00:06:13.900 --> 00:06:16.560
we're gonna have both of
those things pass Lint.

95
00:06:17.890 --> 00:06:23.735
So here we're just gonna say es6: true,
this is all the new features of ES6,

96
00:06:23.735 --> 00:06:27.849
which is one of the more
recent releases of JavaScript.

97
00:06:27.849 --> 00:06:31.120
Browser, so we wanna be able to
use things like Window, right?

98
00:06:31.120 --> 00:06:32.460
So I wanna say true.

99
00:06:33.610 --> 00:06:38.193
And node, we wanna be able to use things
like process.env and things like that, so

100
00:06:38.193 --> 00:06:39.244
that'll be true.

101
00:06:41.260 --> 00:06:42.087
&gt;&gt; Brian Holt: This is just like,

102
00:06:42.087 --> 00:06:44.369
what kind of globals do you
wanna have be available?

103
00:06:44.369 --> 00:06:45.628
That's what it amounts to.

104
00:06:47.770 --> 00:06:48.478
&gt;&gt; Brian Holt: Make sense?

105
00:06:50.760 --> 00:06:51.620
&gt;&gt; Brian Holt: Cool.

106
00:06:51.620 --> 00:06:54.570
So now we need to go install all
of the tools to make sure that

107
00:06:54.570 --> 00:06:57.050
this actually works the way
that we anticipate.

108
00:07:00.050 --> 00:07:05.333
&gt;&gt; Brian Holt: So
I want you to come over here and

109
00:07:05.333 --> 00:07:08.867
say npm install -D.

110
00:07:08.867 --> 00:07:11.250
You can also just do npm
i if you're lazy like me.

111
00:07:12.700 --> 00:07:21.948
And we need to get eslint,
&gt;&gt; Brian Holt: eslint,

112
00:07:21.948 --> 00:07:25.960
I think, -config-prettier,

113
00:07:25.960 --> 00:07:30.946
and,
&gt;&gt; Brian Holt: Did I put that

114
00:07:30.946 --> 00:07:32.599
up here as well?

115
00:07:32.599 --> 00:07:34.142
Nope, I didn't.

116
00:07:39.776 --> 00:07:43.952
&gt;&gt; Brian Holt: And this should go
install all the things that we need.

117
00:07:45.966 --> 00:07:46.953
&gt;&gt; Brian Holt: And
you also need the plug-in.

118
00:07:49.590 --> 00:07:55.756
&gt;&gt; Brian Holt: So one more thing,
npm install -D eslint-plugin-prettier.

119
00:08:01.416 --> 00:08:02.327
&gt;&gt; Brian Holt: And off the top of my head,

120
00:08:02.327 --> 00:08:04.358
I can't remember what
the difference between a config and

121
00:08:04.358 --> 00:08:05.193
plugin in this case is.

122
00:08:05.193 --> 00:08:06.697
I just remember that you need both for
Prettier.

