WEBVTT

1
00:00:00.000 --> 00:00:02.770
&gt;&gt; Brian Holt: Now, historically,
I haven't taught Context.

2
00:00:02.770 --> 00:00:06.120
If you look back at the previous
three versions of this course,

3
00:00:06.120 --> 00:00:07.970
we didn't talk about Context at all.

4
00:00:07.970 --> 00:00:10.740
In fact, I think in one of them I actually
go on a reason on why you should not

5
00:00:10.740 --> 00:00:12.920
use React's Context.

6
00:00:12.920 --> 00:00:18.590
But with React 16, which is what we're
using right now, they totally changed,

7
00:00:18.590 --> 00:00:23.790
in fact, it's 16.3,
they totally changed how Context works.

8
00:00:23.790 --> 00:00:26.240
And whereas before,
it was considered an unstable API,

9
00:00:26.240 --> 00:00:28.570
it wasn't planned to stick around forever.

10
00:00:28.570 --> 00:00:33.310
In the docs, it had a big warning,
it was like, do not use this, pretty much?

11
00:00:33.310 --> 00:00:36.700
They've now revamped it, and
I would say, now, it's really good.

12
00:00:36.700 --> 00:00:39.469
It's something that you
should consider using.

13
00:00:40.950 --> 00:00:45.450
So let's talk about why you'd wanna use
Context versus something like State.

14
00:00:46.650 --> 00:00:51.390
So Context is universal data for
your application.

15
00:00:51.390 --> 00:00:59.300
If I'm using Context, if I set something
on the Context, I can access it anywhere.

16
00:00:59.300 --> 00:01:00.800
Inside of that React tree, right?

17
00:01:00.800 --> 00:01:07.450
So if I have this like, let's say,
we're in, let's see, how about results?

18
00:01:07.450 --> 00:01:12.580
Yeah, if I'm in results JS,
if I set the Context here in results JS,

19
00:01:12.580 --> 00:01:15.470
I can access it anywhere
underneath results, right?

20
00:01:16.630 --> 00:01:21.250
So, for example, you can see that this
render is like a pet component here right,

21
00:01:21.250 --> 00:01:22.920
so I would be able to
access it inside of pet.

22
00:01:24.040 --> 00:01:28.580
Now, this is both really cool and
also something that's easily abused.

23
00:01:28.580 --> 00:01:34.560
So I want you to be very cautious and
very reticent perhaps to use Context and

24
00:01:34.560 --> 00:01:36.540
only use it when you really,
really, really have to.

25
00:01:37.810 --> 00:01:40.811
So on one hand,
sometimes it's good to have a universal,

26
00:01:40.811 --> 00:01:44.505
centralized store of data, which is
what Context is gonna give to you.

27
00:01:46.575 --> 00:01:50.085
&gt;&gt; Brian Holt: But you're also kind of
robbing yourself of one of the really big

28
00:01:50.085 --> 00:01:55.020
benefits of React, which is it's very
explicit with its data management, right?

29
00:01:55.020 --> 00:01:58.290
It's really easy to see that this
component has this data and it passes it

30
00:01:58.290 --> 00:02:01.180
into here, and it passes it into here,
and it passes it into here, right?

31
00:02:01.180 --> 00:02:05.130
It's very easy to follow that flow of
data, even if it's a little verbose.

32
00:02:05.130 --> 00:02:09.120
With Context, you can set Context up here,
none of these components in the middle

33
00:02:09.120 --> 00:02:14.200
know anything about it and access it
at another component way down the line.

34
00:02:14.200 --> 00:02:17.490
So this is kind of, again,
a double edged sword here.

35
00:02:17.490 --> 00:02:21.586
You get some conveniences, but at the cost
of being a little bit more magical,

36
00:02:21.586 --> 00:02:24.702
which is kinda something that
you should be worried about.

37
00:02:25.997 --> 00:02:28.825
&gt;&gt; Brian Holt: So this is something
that they call like the data tunnelling

38
00:02:28.825 --> 00:02:29.738
problem, right?

39
00:02:29.738 --> 00:02:33.828
That if I have data up here, and I need to
access it down here, every component in

40
00:02:33.828 --> 00:02:37.316
the middle has to pass it from its
props into the children, right?

41
00:02:37.316 --> 00:02:40.900
And every component in the middle
has to know about these props, and

42
00:02:40.900 --> 00:02:42.810
it's not doing anything with, right.

43
00:02:42.810 --> 00:02:46.780
The data tunnelling, or I've heard
it called props drilling as well.

44
00:02:46.780 --> 00:02:49.620
And that's what Context solves for
you, is it kinda says, okay,

45
00:02:49.620 --> 00:02:53.110
I'm gonna set Context up here, all these
components in the middle don't have to

46
00:02:53.110 --> 00:02:55.890
know anything about it, and
the one down at the bottom can access it.

47
00:02:57.320 --> 00:02:57.949
So makes sense?

48
00:02:59.230 --> 00:03:00.150
Cool.

49
00:03:00.150 --> 00:03:02.160
So that's what Context is gonna buy for
us.

50
00:03:04.010 --> 00:03:07.080
It kinda fills the same need as Redux,
if we're being honest.

51
00:03:07.080 --> 00:03:09.700
This is what Redux provides for
you as well.

52
00:03:09.700 --> 00:03:12.959
We'll talk about Redux here later.

53
00:03:12.959 --> 00:03:17.636
But Context, in my mind, in my book,
largely replaces Redux, and

54
00:03:17.636 --> 00:03:22.326
in times that I would use Redux,
I would generally use Context now.

