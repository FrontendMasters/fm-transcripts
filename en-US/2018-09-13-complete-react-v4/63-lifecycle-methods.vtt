WEBVTT

1
00:00:00.380 --> 00:00:01.860
&gt;&gt; Brian Holt: So
that should component update.

2
00:00:01.860 --> 00:00:04.220
That's for performance optimizations.

3
00:00:04.220 --> 00:00:05.440
There are a bunch of others.

4
00:00:05.440 --> 00:00:09.960
Let's just go see reactjs.org.

5
00:00:09.960 --> 00:00:13.120
And if we go into the Docs,

6
00:00:13.120 --> 00:00:17.867
Main Concepts, State and Lifecycle.

7
00:00:20.563 --> 00:00:22.256
&gt;&gt; Brian Holt: Adding, where is it?

8
00:00:24.022 --> 00:00:27.603
&gt;&gt; Brian Holt: There are a bunch
of these for lifecycle methods.

9
00:00:32.839 --> 00:00:34.402
&gt;&gt; Brian Holt: API reference,
that's what I wanted.

10
00:00:43.581 --> 00:00:47.217
&gt;&gt; Brian Holt: So there's a bunch of
these, getDerivedStateFromProps()

11
00:00:47.217 --> 00:00:51.683
we chatted about, component should update,
we just talked about that one.

12
00:00:51.683 --> 00:00:55.290
getSnapshotBeforeUpdate(), that one's new.

13
00:00:55.290 --> 00:00:57.172
I'd have to go remember
what it actually does.

14
00:01:01.901 --> 00:01:07.160
&gt;&gt; Brian Holt: In any case, I've never
had use before, so check that out.

15
00:01:07.160 --> 00:01:10.724
It's basically I think before things
update that it'll give you the previous

16
00:01:10.724 --> 00:01:13.545
props and previous states to
do various manipulations with.

17
00:01:22.063 --> 00:01:27.217
&gt;&gt; Brian Holt: Yeah, you can see here
there's a bunch, but 99% of the time,

18
00:01:27.217 --> 00:01:31.625
the one that you want to
use is componentDidMount(),

19
00:01:31.625 --> 00:01:33.902
that is the most useful one.

20
00:01:33.902 --> 00:01:35.560
DerivedStateFromProps can be useful.

21
00:01:35.560 --> 00:01:36.673
There's two of these.

22
00:01:36.673 --> 00:01:40.092
They used to just be called like component
will update and component will receive

23
00:01:40.092 --> 00:01:43.778
props like if you're gonna get new props,
it'll call component will receive props.

24
00:01:43.778 --> 00:01:47.171
This is now called unsafe because
of the asynchronous nature that

25
00:01:47.171 --> 00:01:50.942
they've moved from, React 15 was
totally synchronous all the time.

26
00:01:50.942 --> 00:01:53.530
There's no async abilities whatsoever.

27
00:01:53.530 --> 00:01:58.330
React 16 actually added some
new async abilities to React.

28
00:01:58.330 --> 00:02:01.150
So you can do things like
suspend rendering and

29
00:02:01.150 --> 00:02:06.290
resume rendering, which that API is not
stable yet or else I would show you.

30
00:02:06.290 --> 00:02:09.420
I will probably be back here in six months
to tell you about it when it does finally

31
00:02:09.420 --> 00:02:11.670
land because it's going to really
change how you write React.

32
00:02:13.100 --> 00:02:17.810
So that's why these are unsafe now is cuz
they're unsafe across async boundaries.

33
00:02:17.810 --> 00:02:19.680
So don't use the unsafe
ones if you can avoid it.

34
00:02:21.060 --> 00:02:24.190
But this will get called right
before the component updates and

35
00:02:24.190 --> 00:02:26.820
this will get called right
before it gets new props.

36
00:02:26.820 --> 00:02:28.920
For the most part,
they will receive props.

37
00:02:28.920 --> 00:02:30.870
You can do the getDerivedStateFromProps.

38
00:02:30.870 --> 00:02:32.839
You would use those generally for
the same thing.

39
00:02:34.090 --> 00:02:38.570
And component will update is called right
before, so the component updates, so

40
00:02:38.570 --> 00:02:44.150
you can do any sort of, maybe, library
interaction and stuff kind of like that.

41
00:02:44.150 --> 00:02:47.660
I think that's what get snapshot
before update is for, is so

42
00:02:47.660 --> 00:02:50.340
you can do what component
will update used to be for.

43
00:02:51.410 --> 00:02:52.740
And lastly, component will unmount.

44
00:02:52.740 --> 00:02:53.450
We talked about that.

45
00:02:53.450 --> 00:02:54.979
That's for cleaning up your mess.

46
00:02:56.880 --> 00:02:59.980
We talked in passing
about ComponentDidCatch.

47
00:02:59.980 --> 00:03:04.160
This is so you can catch errors and maybe
you can send things off to track.js, or

48
00:03:04.160 --> 00:03:08.580
some sort of error tracking service,
or century, or

49
00:03:08.580 --> 00:03:10.700
whatever you're using
to aggregate your logs.

50
00:03:10.700 --> 00:03:13.860
That can be done in ComponentDidCatch and
so you can fail gracefully.

51
00:03:15.100 --> 00:03:17.810
Your components really shouldn't be
throwing too many errors I hope,

52
00:03:17.810 --> 00:03:19.260
but that's what that's for.

53
00:03:21.590 --> 00:03:25.930
And we didn't talk about force update, so

54
00:03:27.230 --> 00:03:31.230
force update basically says like,
hey React, I know that you didn't have

55
00:03:31.230 --> 00:03:34.300
an event that makes you update, but
I want you to force an update right now.

56
00:03:35.960 --> 00:03:37.840
You should never call it.

57
00:03:37.840 --> 00:03:39.470
If you're doing something
with force update,

58
00:03:39.470 --> 00:03:41.260
you're probably doing something wrong.

59
00:03:41.260 --> 00:03:43.140
The only case that I can think of is,
again,

60
00:03:43.140 --> 00:03:48.710
if you're integrating with some
third party library, right?

61
00:03:48.710 --> 00:03:51.220
That some event is happening
outside of React and

62
00:03:51.220 --> 00:03:52.470
you need to reach back and react.

63
00:03:52.470 --> 00:03:55.300
I know you don't know something updated,
but it did.

64
00:03:55.300 --> 00:04:00.210
For example, React Redux, the library
that connects React and Redux, calls for

65
00:04:00.210 --> 00:04:01.500
sub data underneath the hood to flip.

66
00:04:01.500 --> 00:04:04.960
It's like, hey, stuff happened,
I need you to re-render.

67
00:04:04.960 --> 00:04:06.970
So it's usually libraries that
will call for a forced update.

