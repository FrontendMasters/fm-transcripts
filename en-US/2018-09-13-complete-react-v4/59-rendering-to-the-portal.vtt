WEBVTT

1
00:00:00.000 --> 00:00:06.327
&gt;&gt; Brian Holt: So now, let's go use it.
&gt;&gt; Brian Holt: So

2
00:00:06.327 --> 00:00:09.017
I want you to go to details.js.

3
00:00:16.527 --> 00:00:17.147
&gt;&gt; Brian Holt: At the top,

4
00:00:17.147 --> 00:00:26.173
we're gonna import our modal.
&gt;&gt; Brian Holt: Okay.

5
00:00:28.693 --> 00:00:30.626
&gt;&gt; Brian Holt: Underneath loading true,

6
00:00:30.626 --> 00:00:32.900
we're going to add showModal.

7
00:00:37.800 --> 00:00:40.990
While we're just debugging this, we're
gonna have it start by showing the modals.

8
00:00:40.990 --> 00:00:42.364
So we'll say showModal true.

9
00:00:42.364 --> 00:00:45.940
Eventually, we'll make this false cuz we
don't wanna show the modal every time that

10
00:00:45.940 --> 00:00:48.090
they, that's a little
aggressive in my opinion.

11
00:00:50.330 --> 00:00:53.974
Okay?
Underneath that, we're gonna make a method

12
00:00:53.974 --> 00:00:58.500
called toggleModal which
will be an arrow function.

13
00:00:58.500 --> 00:01:07.040
And all we wanted to do was say set state,
this.setState showModal.

14
00:01:07.040 --> 00:01:09.710
And this.state.showModal.

15
00:01:09.710 --> 00:01:11.800
If it's showing it, hide it.

16
00:01:11.800 --> 00:01:13.130
If it's hiding it, show it.

17
00:01:13.130 --> 00:01:14.610
That's all that toggleModal does.

18
00:01:16.220 --> 00:01:23.045
And then down here, below the h2,
first of all here inside of the render.

19
00:01:23.045 --> 00:01:25.630
We're pulling out name,
animal, breed, location, media.

20
00:01:25.630 --> 00:01:29.238
We also need to print out showModal here.

21
00:01:32.619 --> 00:01:34.833
&gt;&gt; Brian Holt: Below the h2 here,

22
00:01:34.833 --> 00:01:37.829
we're gonna put a button,

23
00:01:37.829 --> 00:01:43.320
that says button onClick
= this.toggleModal.

24
00:01:43.320 --> 00:01:47.296
And we're gonna make an adopt button, so

25
00:01:47.296 --> 00:01:53.241
Adopt name.
&gt;&gt; Brian Holt: And

26
00:01:53.241 --> 00:01:59.701
then the below the description here.
&gt;&gt; Brian Holt: So

27
00:01:59.701 --> 00:02:03.903
there's two kind of schools have thought
of how to conditionally show and

28
00:02:03.903 --> 00:02:05.730
hide things in react.

29
00:02:05.730 --> 00:02:09.250
There's no clever NG if or
anything like that.

30
00:02:09.250 --> 00:02:10.920
I'm gonna show you how to do an inline.

31
00:02:10.920 --> 00:02:13.430
Some people like this,
some people really don't.

32
00:02:13.430 --> 00:02:17.228
Gonna put curly braces here and
I'm just gonna do a ternary inline.

33
00:02:17.228 --> 00:02:24.586
So showModal.
&gt;&gt; Brian Holt: So

34
00:02:24.586 --> 00:02:25.977
if I should show the modal,

35
00:02:25.977 --> 00:02:31.753
then I'm gonna do Modal,
&gt;&gt; Brian Holt: h1,

36
00:02:31.753 --> 00:02:37.973
Would you like to adopt name.

37
00:02:43.387 --> 00:02:46.015
&gt;&gt; Brian Holt: And then underneath,

38
00:02:46.015 --> 00:02:50.442
I will put div className = buttons and

39
00:02:50.442 --> 00:02:54.050
we'll have two buttons here.

40
00:02:55.932 --> 00:03:00.792
&gt;&gt; Brian Holt: Button onClick =

41
00:03:00.792 --> 00:03:08.580
this.toggleModal, Yes.

42
00:03:08.580 --> 00:03:11.190
And then button,
we'll just copy and paste that.

43
00:03:12.230 --> 00:03:19.351
And the other option will be,
Hell Yes, Definitely Yes.

44
00:03:19.351 --> 00:03:23.969
[LAUGH] Because there's
only one option when

45
00:03:23.969 --> 00:03:28.467
adopting animals, and the answer is yes.

46
00:03:28.467 --> 00:03:31.230
[LAUGH] But obviously,
you could make this like maybe not.

47
00:03:32.550 --> 00:03:35.200
And then you would just make
this call a different function.

48
00:03:35.200 --> 00:03:38.870
In our case, we're not actually going to
implement the adopting feature of this.

49
00:03:39.880 --> 00:03:41.850
So it's gonna be yes and definitely yes.

50
00:03:44.350 --> 00:03:47.870
If we're not showing the modal,
then we'll just not render anything here.

51
00:03:47.870 --> 00:03:51.710
So the way that you do that is :null.

52
00:03:51.710 --> 00:03:55.925
So if you render null in React,
it just doesn't render anything,

53
00:03:55.925 --> 00:04:00.970
right?
&gt;&gt; Brian Holt: Does that make sense?

54
00:04:01.980 --> 00:04:04.670
So if showModal, render this.

55
00:04:04.670 --> 00:04:09.865
If not, after the colon here,
render nothing.

56
00:04:09.865 --> 00:04:15.131
Now you could just go up here and
put an if statement,

57
00:04:15.131 --> 00:04:19.201
like if showModal let modal,

58
00:04:19.201 --> 00:04:22.912
modal equals, whatever the modal,

59
00:04:22.912 --> 00:04:28.796
whatever stuff you put in there,
else modal equals null.

60
00:04:28.796 --> 00:04:32.826
And then down here rather than
having this whole hot mess here,

61
00:04:32.826 --> 00:04:35.347
you could just have modal, like that.

62
00:04:35.347 --> 00:04:39.784
And that would work as well,
if you prefer that.

63
00:04:39.784 --> 00:04:43.082
I kind of like the inline cuz I can kind
of see everything that, that could happen.

64
00:04:43.082 --> 00:04:46.862
I can see the branching logic,
but I leave that to your

65
00:04:46.862 --> 00:04:51.973
discretion.
&gt;&gt; Brian Holt: It just depends on who

66
00:04:51.973 --> 00:04:57.988
you ask.
&gt;&gt; Brian Holt: Cool, so now,

67
00:04:57.988 --> 00:05:03.660
if you go back over here, it starts by
popping up, would you like to adopt Blue?

68
00:05:03.660 --> 00:05:06.990
Right, if the answer is Yes or
Definitely Yes.

69
00:05:06.990 --> 00:05:10.050
Think the answer was definitely yes,
right?

70
00:05:10.050 --> 00:05:12.790
But notice, we can open that modal.

71
00:05:14.140 --> 00:05:16.720
But again, the interesting part
of that is inspect element.

72
00:05:19.300 --> 00:05:20.680
Notice where it's rendering.

73
00:05:22.030 --> 00:05:24.628
So here's the root of our
application over here, but

74
00:05:24.628 --> 00:05:26.720
this is rendering inside a modal, right?

75
00:05:26.720 --> 00:05:33.227
All this stuff over here is in an entirely
separate part of the React dom,

76
00:05:33.227 --> 00:05:38.997
but even cooler, in my opinion,
about this, onClick up here.

77
00:05:38.997 --> 00:05:43.450
This dot, or actually,
I can just say console.log.

78
00:05:47.128 --> 00:05:48.801
&gt;&gt; Brian Holt: If I refresh this,

79
00:05:53.551 --> 00:05:54.744
&gt;&gt; Brian Holt: Notice that, so

80
00:05:54.744 --> 00:05:59.270
I have the modal that's rendering
outside of the dom, right.

81
00:05:59.270 --> 00:06:02.620
So the way that the event
bubbling inside of the dom works,

82
00:06:02.620 --> 00:06:05.960
this would not bubble up to div, right,
because it's in a separate dom, right?

83
00:06:05.960 --> 00:06:10.980
But because it's in the same React dom,
I can catch events coming out of modal,

84
00:06:10.980 --> 00:06:12.549
right, here on this div.

85
00:06:13.970 --> 00:06:16.990
So if I hit yes here,
notice it still comes up here.

86
00:06:16.990 --> 00:06:18.330
So that still works.

87
00:06:18.330 --> 00:06:21.500
This is really compelling to me, because
now I can do any sort of functionality

88
00:06:21.500 --> 00:06:25.260
inside of modal, despite the fact that
lives in a different part of the dom.

89
00:06:25.260 --> 00:06:30.850
I can still catch those events here,
inside details.

90
00:06:30.850 --> 00:06:33.531
Really cool,
it allows you to make some pretty

91
00:06:33.531 --> 00:06:38.010
flexible features.
&gt;&gt; Brian Holt: So

92
00:06:38.010 --> 00:06:40.770
I get to treat this as if it was
the same component the entire time.

93
00:06:43.950 --> 00:06:48.279
In fact, another way you can look at this,
if we go into inspect element here,

94
00:06:48.279 --> 00:06:50.129
again different part of the dom.

95
00:06:50.129 --> 00:06:55.745
But if I go into React in
the explorer here, notice,

96
00:06:55.745 --> 00:07:02.653
it's still inside the same React tree,
so it's easy to debug.

97
00:07:02.653 --> 00:07:07.398
In other words, making modals
got way easier with React 16.

