WEBVTT

1
00:00:00.430 --> 00:00:05.230
The next script that we're going to
write is called player movement.

2
00:00:05.230 --> 00:00:08.260
So we wrote this component
rolling movement, right?

3
00:00:08.260 --> 00:00:11.100
Why are we writing another
component called player movement?

4
00:00:11.100 --> 00:00:14.450
Why don't we just do this in
the rolling movement component?

5
00:00:14.450 --> 00:00:19.348
Well, the really cool thing about
unity is that we can get additional

6
00:00:19.348 --> 00:00:22.400
behavior by composing these components.

7
00:00:22.400 --> 00:00:27.258
We can put multiple components together
to get more complicated behavior and

8
00:00:27.258 --> 00:00:30.320
it allows us to have reusable code.

9
00:00:30.320 --> 00:00:33.304
You'll remember that we have
an opponent in this game,

10
00:00:33.304 --> 00:00:36.550
the opponent also has to
move around somehow, right?

11
00:00:36.550 --> 00:00:41.974
So our opponent is going to have the same
rolling movement script applied to it but

12
00:00:41.974 --> 00:00:46.922
we're gonna drive that movement
direction vector in a different way with

13
00:00:46.922 --> 00:00:48.380
a different script.

14
00:00:49.710 --> 00:00:53.074
But for the player,
we want to do it with input,

15
00:00:53.074 --> 00:00:58.335
we want the player to be in control
using the keyboard or gamepad.

16
00:00:58.335 --> 00:01:03.606
so what player movement does
is it reads directional

17
00:01:03.606 --> 00:01:09.430
input from the player in
a method called on move.

18
00:01:09.430 --> 00:01:16.080
And it applies it to the rolling movement
component on the same game object.

19
00:01:16.080 --> 00:01:20.965
So we're going to use that
movement direction vector from

20
00:01:20.965 --> 00:01:26.690
the rolling movement component and
put input into that.

21
00:01:26.690 --> 00:01:29.750
So let's switch back to Unity.

22
00:01:31.150 --> 00:01:36.403
Let's create a new script in
the scripts folder, so again,

23
00:01:36.403 --> 00:01:41.656
in the project window,
scripts folder, I can right click,

24
00:01:41.656 --> 00:01:45.776
choose Create, and
choose C sharp script, and

25
00:01:45.776 --> 00:01:52.188
I'm going to call this Player Movement And
hit Enter.

26
00:01:56.438 --> 00:02:02.912
And then on the player game object,
in the inspector here,

27
00:02:02.912 --> 00:02:07.055
I will drag over the player movement,

28
00:02:07.055 --> 00:02:11.600
script, and maybe added as a component.

29
00:02:11.600 --> 00:02:13.144
Let's do it another way.

30
00:02:13.144 --> 00:02:14.840
We come down to Add Component.

31
00:02:16.670 --> 00:02:17.670
Maybe it worked for you.

32
00:02:17.670 --> 00:02:21.170
It's not working for me for
some reason on my Mac here, but

33
00:02:21.170 --> 00:02:25.040
I can type in player movement and
it will add the script that way.

34
00:02:26.160 --> 00:02:32.188
So Let's go open this player movement
script by double clicking on it.

35
00:02:32.188 --> 00:02:37.894
And again there's some stuff that we need
some stuff we don't need we are going

36
00:02:37.894 --> 00:02:44.440
to keep the Unity engine namespace but
deletes the collections namespaces.

37
00:02:44.440 --> 00:02:48.458
There's another name space that we
need here though, the input system and

38
00:02:48.458 --> 00:02:52.094
that's going to access the input
system package that I mentioned is

39
00:02:52.094 --> 00:02:53.710
already part of the project.

40
00:02:53.710 --> 00:02:58.799
So up at the top after UnityEngine,

41
00:02:58.799 --> 00:03:06.620
I'm going to type using
Unityengine.input system.

42
00:03:06.620 --> 00:03:07.520
So there it is.

43
00:03:07.520 --> 00:03:10.930
And right now, you'll see that
it's grayed out in my editor.

44
00:03:10.930 --> 00:03:15.222
And that's because we're not actually
using any methods or properties or

45
00:03:15.222 --> 00:03:17.550
anything from that namespace just yet.

46
00:03:19.310 --> 00:03:24.020
Now we need a couple of variables.

47
00:03:25.140 --> 00:03:27.787
So while actually just one variable,

48
00:03:27.787 --> 00:03:32.005
we need to access an instance
of the rolling movement class,

49
00:03:32.005 --> 00:03:38.210
which is going to be that component
that's attached to the same game object.

50
00:03:38.210 --> 00:03:43.022
And I'm going to call this

51
00:03:43.022 --> 00:03:49.160
variable M_rolling movement.

52
00:03:49.160 --> 00:03:52.419
For start, I'm just gonna
delete that first comment, but

53
00:03:52.419 --> 00:03:55.230
I'm going to type my own
inside the start method.

54
00:03:55.230 --> 00:03:59.685
And I'm just going to say that
we need to gather components and

55
00:03:59.685 --> 00:04:05.093
in this case, we just need to gather
the one rolling movement components.

56
00:04:05.093 --> 00:04:12.090
So M_rolling movements and we're going
to use that get component method again.

57
00:04:12.090 --> 00:04:16.450
This time with the generic
type of rolling movement.

58
00:04:18.520 --> 00:04:23.743
And we'll put that in angle brackets with
parentheses after the angle blackets and

59
00:04:23.743 --> 00:04:25.770
end the line with a semi colon.

60
00:04:25.770 --> 00:04:31.640
So we have our rolling movement component
now that's on this game object.

61
00:04:33.040 --> 00:04:37.210
We don't need an update method,
so I'll just delete that.

62
00:04:37.210 --> 00:04:42.198
But now we're going to type out
a special method that uses what's called

63
00:04:42.198 --> 00:04:45.980
a callback context and
it's part of the input system.

64
00:04:47.000 --> 00:04:53.900
So this is going to be a public
method with a return type of void.

65
00:04:53.900 --> 00:04:55.910
So it's not going to return anything.

66
00:04:57.600 --> 00:05:04.467
And we're gonna call this excuse me
on move not on movement, so on move.

67
00:05:04.467 --> 00:05:09.290
And then the arguments to
this method will be of type

68
00:05:09.290 --> 00:05:14.339
input action.callback context and
we'll just call

69
00:05:14.339 --> 00:05:19.060
that context and
then open our curly braces here.

70
00:05:21.060 --> 00:05:25.574
So what we wanna do is get
the movement vector as input and

71
00:05:25.574 --> 00:05:30.581
apply it to the directional
vector within rolling movement.

72
00:05:30.581 --> 00:05:36.408
So let's type that as a comment so
we know what we're doing,

73
00:05:36.408 --> 00:05:43.398
get the movement vector and apply it
to the rolling movement component.

74
00:05:43.398 --> 00:05:49.392
So, when you're using something
like a joystick on a gamepad or

75
00:05:49.392 --> 00:05:54.165
you're using the arrow keys or
WASD on a keyboard,

76
00:05:54.165 --> 00:05:58.285
you're only moving in a 2D plane, right?

77
00:05:58.285 --> 00:06:04.235
It's not a vector three,
it is a vector two.

78
00:06:04.235 --> 00:06:08.785
There's an x direction and
there's a y direction.

79
00:06:08.785 --> 00:06:12.455
But there's not this
other dimension there.

80
00:06:12.455 --> 00:06:20.345
So we're going to call this
vector two movement and

81
00:06:20.345 --> 00:06:25.300
we want to assign context.read

82
00:06:25.300 --> 00:06:31.000
value with a generic type vector 2.

83
00:06:31.000 --> 00:06:35.613
Okay, and
this is going to be the callback method

84
00:06:35.613 --> 00:06:39.900
that we call when we're
hitting arrow keys.

85
00:06:39.900 --> 00:06:46.364
So we're gonna read the arrow keys,
we gonna come in as a vector 2 and

86
00:06:46.364 --> 00:06:53.386
then we're gonna grab that as our own
variable that we can then use to assign

87
00:06:53.386 --> 00:06:58.430
to rolling movements,
movement direction, okay?

88
00:06:58.430 --> 00:07:02.240
Now movement direction is
in 3D we have a vector 2.

89
00:07:02.240 --> 00:07:07.388
Right, the movement of this
sphere is in 3D space,

90
00:07:07.388 --> 00:07:15.000
but we really only want to move it
along a 2D plane along the game board.

91
00:07:15.000 --> 00:07:18.360
But it needs a vector three.

92
00:07:18.360 --> 00:07:23.030
So we'll assign it a new vector three.

93
00:07:23.030 --> 00:07:28.536
So we're going to use the constructor for
a vector three and

94
00:07:28.536 --> 00:07:34.050
we use the new keyword to indicate
that this is a new object.

95
00:07:36.020 --> 00:07:38.150
And then in the parentheses,
it's very simple.

96
00:07:38.150 --> 00:07:40.880
We just need an x, y and z.

97
00:07:40.880 --> 00:07:45.411
So we're taking this vector two
where should we put the x y and z.

98
00:07:45.411 --> 00:07:49.930
Well, we really want it to move
along the x,z and plant or

99
00:07:49.930 --> 00:07:53.705
sorry the x,
z plane because in Unity, y is up.

100
00:07:53.705 --> 00:07:58.198
So we don't want to move the sphere up or
apply a force in the up direction,

101
00:07:58.198 --> 00:08:03.460
which would be pretty difficult anyway
because we'd be fighting gravity.

102
00:08:03.460 --> 00:08:05.570
We want to move it along the x z plane.

103
00:08:05.570 --> 00:08:12.910
So we'll say movement.x, okay because
there is an x component to this.

104
00:08:12.910 --> 00:08:17.629
We'll say 0 f for y or
a float value of 0 and

105
00:08:17.629 --> 00:08:24.053
then we'll say this is a little
confusing movement.y for

106
00:08:24.053 --> 00:08:30.607
the z component because a vector
two again.It just as x y but

107
00:08:30.607 --> 00:08:37.970
we want to use that second value as
our z to move it along the z plane.

108
00:08:39.520 --> 00:08:43.810
So that's it for
this script we can hit Save.

109
00:08:45.150 --> 00:08:46.450
We can switch back to Unity.

110
00:08:48.080 --> 00:08:52.169
And at this point you might be thinking
we can hit the play button and

111
00:08:52.169 --> 00:08:55.860
we'll be able to use input and
move the player around.

112
00:08:55.860 --> 00:08:58.410
There is one more thing we need to do.

113
00:09:01.140 --> 00:09:05.858
So you remember when we added
the player input component that came

114
00:09:05.858 --> 00:09:08.230
with some unity events.

115
00:09:08.230 --> 00:09:13.327
We need to accept the input and
invoke that callback method

116
00:09:13.327 --> 00:09:19.250
that on move method that we just
wrote using the keyboard events.

117
00:09:19.250 --> 00:09:24.779
So in order to accept the input we need
to invoke the callback methods for

118
00:09:24.779 --> 00:09:29.570
the move event on the player
input component, okay?

119
00:09:29.570 --> 00:09:34.140
So we'll make the rest of these
events later on when we do Resetting.

120
00:09:35.550 --> 00:09:36.710
But let's actually do that.

121
00:09:36.710 --> 00:09:40.110
So I will select the player
game object here.

122
00:09:42.260 --> 00:09:46.692
And it has the player input component and

123
00:09:46.692 --> 00:09:52.686
under Events,
I will untwirl this little menu here and

124
00:09:52.686 --> 00:09:57.040
then we want the player events.

125
00:09:57.040 --> 00:10:01.840
So it's kind of nested here and then
we have the callback context for move.

126
00:10:02.840 --> 00:10:05.607
If I hit the plus button here,

127
00:10:05.607 --> 00:10:11.708
I can then add the callback context
from the script we just wrote.

128
00:10:11.708 --> 00:10:16.370
So, down here you'll see
this little target button.

129
00:10:17.790 --> 00:10:25.500
If I click that, I can choose from assets
or I can choose from scripts in the scene.

130
00:10:25.500 --> 00:10:31.870
I want to apply the script
from the player game object.

131
00:10:31.870 --> 00:10:36.690
So I'll select that, from the scene.

132
00:10:36.690 --> 00:10:42.520
And then there is a function that
we wanna execute here, right?

133
00:10:42.520 --> 00:10:49.280
So, under player movement, we want
the dynamic callback context of on move.

134
00:10:52.280 --> 00:10:57.693
So now when we hit the play
button if everything went well,

135
00:10:57.693 --> 00:11:02.664
we should be able to use
the WASD keys to actually drive

136
00:11:02.664 --> 00:11:07.966
the direction of the sphere and
we're driving this using

137
00:11:07.966 --> 00:11:13.202
physics All right.

138
00:11:15.209 --> 00:11:19.537
So at this point,
you should probably hit Save in Unity.

139
00:11:19.537 --> 00:11:23.525
You can do that from File, Save or
just hit command S or ctrl S and

140
00:11:23.525 --> 00:11:28.140
that will save the scene and save
the work that you've been doing so far.

