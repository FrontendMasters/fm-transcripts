WEBVTT

1
00:00:00.188 --> 00:00:05.154
So I mentioned that Unity has
a component-based architecture,

2
00:00:05.154 --> 00:00:07.772
and we've used that a little bit,

3
00:00:07.772 --> 00:00:12.120
but what we can do with components
is we can compose them.

4
00:00:12.120 --> 00:00:19.057
So Unity's component-based architecture
leans into an idea called composition.

5
00:00:19.057 --> 00:00:25.111
So rather than other approaches to code
diversification, such as object-oriented

6
00:00:25.111 --> 00:00:30.337
inheritance, we can combine components
to get more emergent behavior.

7
00:00:30.337 --> 00:00:33.965
So while C# does allow for inheritance and

8
00:00:33.965 --> 00:00:37.997
inheritance is very
useful in Unity projects,

9
00:00:37.997 --> 00:00:44.349
thinking in terms of GameObjects that
use several different components,

10
00:00:44.349 --> 00:00:49.313
tends to lead toward more variety and
emergent behavior.

11
00:00:49.313 --> 00:00:50.700
And we've actually already done this.

12
00:00:50.700 --> 00:00:56.862
So similar to the PlayerMovement script,
we can actually create a FollowTarget

13
00:00:56.862 --> 00:01:02.572
script that automatically drives
the existing RollingMovement script,

14
00:01:02.572 --> 00:01:07.292
and it kind of creates the appearance
of a simple opponent AI.

15
00:01:07.292 --> 00:01:12.706
So because the opponent isn't going
to have the benefit of player input,

16
00:01:12.706 --> 00:01:17.089
we need another way to drive
that RollingMovement script.

17
00:01:17.089 --> 00:01:21.319
So we're still reusing
the RollingMovement script, but

18
00:01:21.319 --> 00:01:24.693
we're going to just move
it in different way.

19
00:01:24.693 --> 00:01:29.103
So we've got this FollowTarget script,

20
00:01:29.103 --> 00:01:33.262
and I'm going to switch over to Unity.

21
00:01:36.125 --> 00:01:41.371
And in the scripts folder,
I'm going to create

22
00:01:41.371 --> 00:01:47.156
a new C# script and
we'll call this FollowTarget.

23
00:01:47.156 --> 00:01:52.701
And we want to attach this
script to the opponent.

24
00:01:54.732 --> 00:01:59.673
So we'll add this to the opponent,
and I'll click on the opponent to make

25
00:01:59.673 --> 00:02:04.308
sure that, yes, it does indeed now
have a FollowTarget component.

26
00:02:08.922 --> 00:02:14.657
And let's get rid of these
namespaces we don't need.

27
00:02:14.657 --> 00:02:18.954
And we are going to use Start, and

28
00:02:18.954 --> 00:02:23.259
we are going to use FixedUpdate.

29
00:02:23.259 --> 00:02:25.318
So we'll change that.

30
00:02:25.318 --> 00:02:29.219
All right, so
we need a couple of variables here.

31
00:02:29.219 --> 00:02:34.488
We need a SerializeField,
which will be a Transform, and

32
00:02:34.488 --> 00:02:40.630
this is going to be the target that
the opponent is trying to follow.

33
00:02:40.630 --> 00:02:43.891
So the target, in this case,
is going to be the collectible,

34
00:02:43.891 --> 00:02:45.978
it's trying to grab the collectible.

35
00:02:45.978 --> 00:02:48.471
So it's transform of the collectible.

36
00:02:48.471 --> 00:02:51.146
So we're gonna create
another SerializeField.

37
00:02:51.146 --> 00:02:53.482
It's gonna be a float value.

38
00:02:53.482 --> 00:02:58.232
And we're gonna call
this retargetingSpeed.

39
00:02:58.232 --> 00:03:04.844
And, this is going to be how
fast the FollowTarget or

40
00:03:04.844 --> 00:03:10.117
the opponent is able to find a new target.

41
00:03:10.117 --> 00:03:14.812
So we're gonna give it some time to
kind of meander a little bit before it

42
00:03:14.812 --> 00:03:17.709
actually is moving in the right direction,

43
00:03:17.709 --> 00:03:21.723
because that's how a real player
would be playing the game.

44
00:03:21.723 --> 00:03:26.527
Otherwise it makes it way too difficult,
because the opponent can just

45
00:03:26.527 --> 00:03:31.506
kind of go immediately in the direction
of the collectible as it appears.

46
00:03:31.506 --> 00:03:35.291
So in the start method,
we're going to gather components.

47
00:03:35.291 --> 00:03:39.784
The only one we really need is
the RollingMovement, which,

48
00:03:39.784 --> 00:03:44.730
oops, I actually did need one
more variable there, I apologize.

49
00:03:44.730 --> 00:03:46.835
We need RollingMovement.

50
00:03:48.745 --> 00:03:53.891
Okay, so
we have the RollingMovement component.

51
00:03:53.891 --> 00:03:58.508
And of course, we need to get that
component from this GameObject,

52
00:03:58.508 --> 00:04:02.073
so we'll say
GetComponent&lt;RollingMovement&gt;.

53
00:04:02.073 --> 00:04:03.944
And now we've got it.

54
00:04:03.944 --> 00:04:08.677
So in FixedUpdate,
how are we gonna do this?

55
00:04:08.677 --> 00:04:14.704
Well, first, we need to point the target

56
00:04:14.704 --> 00:04:20.224
direction vector toward the target.

57
00:04:20.224 --> 00:04:23.671
So we're gonna do a little
bit of vector math here.

58
00:04:23.671 --> 00:04:25.481
We want to create a new Vector3,

59
00:04:25.481 --> 00:04:28.401
which we're gonna use in
subsequent calculations.

60
00:04:28.401 --> 00:04:32.379
We're gonna call this TargetDirection.

61
00:04:32.379 --> 00:04:37.745
And this is going to be equal
to the target's position.

62
00:04:37.745 --> 00:04:42.010
Okay, remember the target
is the collectible.

63
00:04:42.010 --> 00:04:46.917
So we are looking for
the position of the collectible

64
00:04:46.917 --> 00:04:50.272
minus our own Transform position.

65
00:04:50.272 --> 00:04:55.207
So, what that's going to do is
it's going to create a vector that

66
00:04:55.207 --> 00:05:00.606
points in the direction from our
current position to the collectible.

67
00:05:07.775 --> 00:05:14.689
So if the sphere is close,
or the collectible is close,

68
00:05:14.689 --> 00:05:18.966
set the retarget speed to be high.

69
00:05:18.966 --> 00:05:25.202
Otherwise, use the typical
retargeting speed.

70
00:05:29.828 --> 00:05:34.089
Okay, So

71
00:05:34.089 --> 00:05:38.202
we're gonna calculate another value here.

72
00:05:38.202 --> 00:05:45.425
We're gonna call this retargetSpeed.

73
00:05:45.425 --> 00:05:49.368
And this is another
slightly confusing line, so

74
00:05:49.368 --> 00:05:52.644
I'll type this out and then explain it.

75
00:05:52.644 --> 00:05:58.752
We want to type Vector3.SqrMagnitude,

76
00:06:02.064 --> 00:06:07.361
Of the targetDirection And

77
00:06:07.361 --> 00:06:12.608
then if that is less than 0.1 float,

78
00:06:12.608 --> 00:06:17.065
I'll type a question mark here,

79
00:06:19.821 --> 00:06:24.292
Then a float of 1,000, a colon,

80
00:06:24.292 --> 00:06:28.779
and the retargeting speed variable.

81
00:06:28.779 --> 00:06:34.171
So, There's other ways I
could have written this.

82
00:06:34.171 --> 00:06:38.081
This is basically an if else
statement in one line, but

83
00:06:38.081 --> 00:06:40.971
there's a couple things going on here.

84
00:06:40.971 --> 00:06:46.497
So first, here's kind of what's
inside our if statement.

85
00:06:46.497 --> 00:06:50.727
So we're saying if the squared
magnitude of this target

86
00:06:50.727 --> 00:06:54.780
direction is less than 0.1,
what does that mean?

87
00:06:54.780 --> 00:06:57.717
Well, the squared magnitude,

88
00:06:57.717 --> 00:07:02.938
if you kind of remember back
to the Pythagorean theorem,

89
00:07:02.938 --> 00:07:08.485
we could take the magnitude of
the vector and actually get its

90
00:07:08.485 --> 00:07:14.498
exact distance by calculating
the hypotenuse of that triangle.

91
00:07:14.498 --> 00:07:22.062
We don't need the exact distance, we just
need to know kind of relative distance.

92
00:07:22.062 --> 00:07:29.031
So by taking the squared magnitude,
we're avoiding a square root calculation,

93
00:07:29.031 --> 00:07:34.182
which is really expensive in
any application of computers.

94
00:07:34.182 --> 00:07:37.924
[LAUGH] So especially when
you're running fixed update and

95
00:07:37.924 --> 00:07:42.199
you're doing it every physics update,
you can use square roots,

96
00:07:42.199 --> 00:07:46.949
it's not a big deal, but if square
roots can be avoided, they should be.

97
00:07:46.949 --> 00:07:49.863
So, we're taking the squared magnitude.

98
00:07:49.863 --> 00:07:52.670
So this is a distance, right?

99
00:07:52.670 --> 00:07:59.917
So we're saying, if the distance to
the collectible is less than 0.1,

100
00:07:59.917 --> 00:08:07.411
or the approximate distance is less
than 0.1, then we're gonna do this.

101
00:08:07.411 --> 00:08:10.759
We're going to set the retarget
speed to be really high,

102
00:08:10.759 --> 00:08:14.896
because if it's right there,
we just wanna kinda move immediately.

103
00:08:14.896 --> 00:08:21.759
We don't want to spend so much time
kinda retargeting to finally get there.

104
00:08:21.759 --> 00:08:27.405
So it's kind of a cheat or a hack,
basically, for the computer.

105
00:08:27.405 --> 00:08:32.568
Otherwise, if that's not true,
if we're not close to a collectible,

106
00:08:32.568 --> 00:08:38.849
if it's further away than that, we're just
gonna use this normal retargeting speed.

107
00:08:38.849 --> 00:08:44.830
So we've got these values here,
we've calculated a target direction,

108
00:08:44.830 --> 00:08:49.564
we've calculated the speed at
which we want to retarget.

109
00:08:49.564 --> 00:08:53.506
Now, we need to actually do those things.

110
00:08:53.506 --> 00:08:59.121
So we're going to do that with what's
called a linear interpolation,

111
00:08:59.121 --> 00:09:05.498
which will allow us to slowly do something
over time, or quickly, if we want to.

112
00:09:05.498 --> 00:09:07.570
So I'll type out a comment here.

113
00:09:07.570 --> 00:09:13.681
We are going to linearly interpolate

114
00:09:13.681 --> 00:09:19.791
the movement vector from the current

115
00:09:19.791 --> 00:09:24.690
direction to the target,

116
00:09:24.690 --> 00:09:29.761
Where T (time) is fixed delta

117
00:09:29.761 --> 00:09:36.986
time multiplied by the retargeting speed.

118
00:09:36.986 --> 00:09:39.488
Okay, so
that's where we're going to use that.

119
00:09:39.488 --> 00:09:45.747
So in rollingMovement.movementDirection,

120
00:09:48.599 --> 00:09:53.963
This is where we're going to actually
set that vector, the direction that it

121
00:09:53.963 --> 00:09:59.262
should be rolling in, just like we did
with player input and other scripts.

122
00:09:59.262 --> 00:10:04.096
So to do this, on the Vector3 class,

123
00:10:04.096 --> 00:10:08.034
there is a method called lerp.

124
00:10:08.034 --> 00:10:12.363
And you will use lerps all
the time as a game developer.

125
00:10:12.363 --> 00:10:16.899
A lerp is a linear interpolation,
and that's where

126
00:10:16.899 --> 00:10:21.845
you're going from one value
to another value over time,

127
00:10:21.845 --> 00:10:25.984
and you're updating this
every fixed update.

128
00:10:25.984 --> 00:10:29.224
So which values do we wanna go between?

129
00:10:29.224 --> 00:10:33.650
Well, we're retargeting, right?

130
00:10:33.650 --> 00:10:39.304
So we want to take the current movement

131
00:10:39.304 --> 00:10:45.848
direction of the RollingMovement script.

132
00:10:45.848 --> 00:10:47.898
And that's going to be
your starting point.

133
00:10:47.898 --> 00:10:50.944
So our starting point is
constantly going to be changing,

134
00:10:50.944 --> 00:10:52.694
because we're reassigning it.

135
00:10:52.694 --> 00:11:00.523
But the next value that we assign
is going to be slightly closer,

136
00:11:00.523 --> 00:11:06.435
To the target direction
that we calculated.

137
00:11:06.435 --> 00:11:11.938
And we do need to do, again,
a little vector math thing here.

138
00:11:11.938 --> 00:11:17.776
We need to normalize this vector,
so that it has a magnitude of 1,

139
00:11:17.776 --> 00:11:23.011
because the MovementDirection
also has a magnitude of 1.

140
00:11:23.011 --> 00:11:29.063
Remember, that's being multiplied by
speed in the RollingMovement script.

141
00:11:29.063 --> 00:11:33.314
So we don't want to
multiply that any further.

142
00:11:33.314 --> 00:11:34.544
So what is time?

143
00:11:34.544 --> 00:11:38.546
So we're moving from the MovementDirection
to the TargetDirection.

144
00:11:38.546 --> 00:11:42.879
So we're slowly retargeting
where this thing is.

145
00:11:42.879 --> 00:11:45.359
How do we wanna do that over time?

146
00:11:45.359 --> 00:11:49.743
Well, we want to say Time.fixedDeltaTime.

147
00:11:49.743 --> 00:11:55.409
So we at least want to calculate that
consistently over every fixed update.

148
00:11:55.409 --> 00:11:59.406
But then we wanna be able to adjust
the speed of that retargeting.

149
00:11:59.406 --> 00:12:03.609
So just like how we adjust
the speed of rolling,

150
00:12:03.609 --> 00:12:09.087
we can also adjust that by
multiplying by the retargetSpeed.

151
00:12:12.591 --> 00:12:15.682
So that's a lot of code.

152
00:12:15.682 --> 00:12:18.555
Hopefully the explanation and
the comments help.

153
00:12:18.555 --> 00:12:20.556
I imagine there might be a few questions.

154
00:12:20.556 --> 00:12:23.922
But let's switch back to Unity.

155
00:12:26.624 --> 00:12:33.441
And on the opponent, Remember we
created a few serialized fields here.

156
00:12:33.441 --> 00:12:35.792
So what do we want to target?

157
00:12:35.792 --> 00:12:40.737
Well, we want to target, The collectible.

158
00:12:42.412 --> 00:12:46.591
And so now,
if I save the scene and hit Play,

159
00:12:50.091 --> 00:12:56.792
We hit Space to start, the opponent is
gonna start moving toward that sphere.

160
00:12:56.792 --> 00:13:01.174
And of course, it's a little difficult
to see which player is which.

161
00:13:01.174 --> 00:13:03.678
I know which it is,
because I'm the one playing.

162
00:13:03.678 --> 00:13:08.343
But, yeah, now we have kind of the
appearance of AI with just a little bit of

163
00:13:08.343 --> 00:13:10.434
vector math, just pretty neat.

