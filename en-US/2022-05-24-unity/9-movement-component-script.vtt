WEBVTT

1
00:00:00.170 --> 00:00:03.240
I've talked a lot about this one scripts.

2
00:00:03.240 --> 00:00:06.620
Let's actually go write it.

3
00:00:06.620 --> 00:00:08.700
So I'm gonna switch back into Unity here.

4
00:00:10.150 --> 00:00:13.640
And there's a couple of different ways
that you can create scripts in Unity.

5
00:00:15.350 --> 00:00:22.368
For example, if I have this player
game objects selected, oops.

6
00:00:22.368 --> 00:00:27.380
And then I scroll down
here to Add Component.

7
00:00:29.200 --> 00:00:33.153
I could type in this script,

8
00:00:33.153 --> 00:00:37.610
we called it rolling movement.

9
00:00:39.200 --> 00:00:44.040
And there is no rolling movement script
found so we could hit new script there.

10
00:00:44.040 --> 00:00:49.420
If I do hit new scripts It's going
to create that in the assets folder.

11
00:00:49.420 --> 00:00:50.610
So we could create it.

12
00:00:50.610 --> 00:00:53.957
It would get created in the assets folder
and get attached to the player game

13
00:00:53.957 --> 00:00:56.950
object, and then we'd have to move
the script to where we want it.

14
00:00:58.320 --> 00:01:03.227
The way that I prefer to work is I
like to create scripts inside of

15
00:01:03.227 --> 00:01:04.810
my project window.

16
00:01:05.860 --> 00:01:09.800
So I'm going to go to
the Scripts folder here.

17
00:01:09.800 --> 00:01:13.778
And if I right click in
any of this blank space,

18
00:01:13.778 --> 00:01:18.890
I can go to the Create Menu and
I can choose C-Sharp script.

19
00:01:21.170 --> 00:01:28.040
So, again, I want to call
this script rolling movement.

20
00:01:28.040 --> 00:01:34.560
And when I hit Enter,
it's going to create the script.

21
00:01:34.560 --> 00:01:39.841
And it's going to reload the domain
that's sort of the magical

22
00:01:39.841 --> 00:01:46.030
compilation process that allows
us to just hit the play button.

23
00:01:46.030 --> 00:01:50.929
And in the inspector, you'll see a preview
of the script and it's actually added

24
00:01:50.929 --> 00:01:56.160
a lot of stuff in there by default, some
of it is useful and we'll keep some of it.

25
00:01:56.160 --> 00:01:57.950
Some of it is stuff we don't want.

26
00:01:59.540 --> 00:02:03.979
So now I need to go to
the player game objects.

27
00:02:05.850 --> 00:02:10.902
And we need to add that script as
a component, so I can do that a couple

28
00:02:10.902 --> 00:02:16.060
of different ways I can click and
drag this rolling movement script.

29
00:02:16.060 --> 00:02:20.637
I could drag it to the player in
the hierarchy, I could drag it onto

30
00:02:20.637 --> 00:02:26.400
the sphere in the The scene view or
I can drag it over to the inspector.

31
00:02:26.400 --> 00:02:29.432
So if I drag and
drop over to the inspector,

32
00:02:29.432 --> 00:02:33.490
it will add this rolling
movement script as a component.

33
00:02:34.550 --> 00:02:38.360
It's not going to do anything right now
because there's nothing in the script.

34
00:02:38.360 --> 00:02:42.392
But if I double click on the script
from the project window or

35
00:02:42.392 --> 00:02:44.580
you could also click on it from.

36
00:02:46.370 --> 00:02:51.197
From the inspector,
it will open up in whatever default

37
00:02:51.197 --> 00:02:56.140
editor you have chosen,
in this case I'm using VS code.

38
00:02:56.140 --> 00:03:01.820
Many installations of Unity will
have visual studio installed,

39
00:03:01.820 --> 00:03:06.466
and there really isn't a right or
wrong answer here,

40
00:03:06.466 --> 00:03:10.560
you can use pretty much
any IDE that you want.

41
00:03:10.560 --> 00:03:11.230
Yes.

42
00:03:11.230 --> 00:03:16.380
&gt;&gt; Is there a good IntelliSense support or
an extension for Unity for VS code?

43
00:03:17.510 --> 00:03:18.660
&gt;&gt; Yes.

44
00:03:18.660 --> 00:03:23.463
And I believe that comes installed
with the Unity If I might

45
00:03:23.463 --> 00:03:28.559
have to get back to that one and
dig into that a little further,

46
00:03:28.559 --> 00:03:33.380
but yeah, unities installation
processes pretty good.

47
00:03:33.380 --> 00:03:38.720
I think a lot of that stuff
often comes installed already.

48
00:03:38.720 --> 00:03:42.261
&gt;&gt; Is it better to use fixed update
instead of multiplying by delta time and

49
00:03:42.261 --> 00:03:43.270
the update method?

50
00:03:43.270 --> 00:03:49.058
&gt;&gt; I mean you can multiply by
delta time to get consistent,

51
00:03:49.058 --> 00:03:53.123
while somewhat consistent updates but

52
00:03:53.123 --> 00:03:57.817
they are going to be
frame rate independent.

53
00:03:57.817 --> 00:04:02.285
And the other thing that's gonna
happen is those physics calculations

54
00:04:02.285 --> 00:04:05.498
are going to happen every
time a frame is rendered.

55
00:04:05.498 --> 00:04:08.510
Which could potentially impact
performance especially for

56
00:04:08.510 --> 00:04:10.940
doing very complicated
physics calculations.

57
00:04:10.940 --> 00:04:15.859
So keeping them in fixed update,
even though multiplying by delta time and

58
00:04:15.859 --> 00:04:20.390
update might allow you to keep
it smooth and consistent.

59
00:04:20.390 --> 00:04:28.691
Keeping it in fixed update allows
you to keep the CPU load consistent.

60
00:04:28.691 --> 00:04:30.783
There any other questions?

61
00:04:30.783 --> 00:04:33.668
No all right cool.

62
00:04:33.668 --> 00:04:38.010
So I've opened this rolling movement
script It comes with a couple

63
00:04:38.010 --> 00:04:41.355
of things we need ,a couple
things we don't need.

64
00:04:42.485 --> 00:04:47.167
You'll notice up at the top,
there's a few additional namespaces

65
00:04:47.167 --> 00:04:52.034
System.Collection part of or,
excuse me, System.Collections.

66
00:04:52.034 --> 00:04:58.044
And System.Collections.Generic
are both part of C# And

67
00:04:58.044 --> 00:05:02.260
.net and we don't actually need those.

68
00:05:02.260 --> 00:05:05.245
We just need the Unity engine name space,

69
00:05:05.245 --> 00:05:09.730
because we are not going to use
any collections in this game.

70
00:05:09.730 --> 00:05:13.171
That's things like rays, lists and

71
00:05:13.171 --> 00:05:17.944
other C-Sharp niceties that
allow you to work with

72
00:05:17.944 --> 00:05:22.939
things like linked lists,
but we don't need those.

73
00:05:24.510 --> 00:05:28.064
So we just need the Unity engine,
namespace leaving the other namespaces

74
00:05:28.064 --> 00:05:31.161
that you're not using as harmless
they'll get stripped but for

75
00:05:31.161 --> 00:05:33.470
the sake of simplicity,
we'll remove those.

76
00:05:34.780 --> 00:05:36.200
We do need the start method.

77
00:05:38.000 --> 00:05:44.170
The update method,
we actually wanna change to Fixed Update.

78
00:05:44.170 --> 00:05:46.310
And again That's pretty important here.

79
00:05:46.310 --> 00:05:52.220
We don't wanna update every frame, we
wanna update every fixed physics update.

80
00:05:52.220 --> 00:05:58.170
And then there's also a couple of
comments that a Unity script includes.

81
00:05:58.170 --> 00:06:03.789
I like to just delete those so
that I can write my own comments.

82
00:06:04.990 --> 00:06:09.901
So the first thing that we're gonna
do inside of this class is we're

83
00:06:09.901 --> 00:06:12.950
going to write out those variables.

84
00:06:12.950 --> 00:06:17.630
And the first one is
the speed variable and

85
00:06:17.630 --> 00:06:24.866
it has an attribute of serialized
field and Then that is a float.

86
00:06:24.866 --> 00:06:29.491
I call it m_speed and
I set the value to one with an F

87
00:06:29.491 --> 00:06:34.008
there because it's a floating point value,
and

88
00:06:34.008 --> 00:06:38.210
we're gonna end that
line with a semicolon.

89
00:06:39.570 --> 00:06:45.298
Next we need to keep track of the rigid
body component that is on this same

90
00:06:45.298 --> 00:06:51.460
game object to which our rolling
movement component is attached.

91
00:06:51.460 --> 00:07:00.094
So we're going to create a variable
just to hold on to that rigid body.

92
00:07:00.094 --> 00:07:04.126
We need to add a hide and inspector

93
00:07:04.126 --> 00:07:09.166
attribute to this public vector three and

94
00:07:09.166 --> 00:07:14.930
we're going to call this
movement Direction.

95
00:07:14.930 --> 00:07:19.915
And we're actually gonna write another
component that's gonna derive that

96
00:07:19.915 --> 00:07:24.040
vector three later on, and
that's why we need it to be public.

97
00:07:24.040 --> 00:07:26.610
We need it to be accessible
by other scripts.

98
00:07:28.200 --> 00:07:33.494
And then finally,
we're going to add a vector

99
00:07:33.494 --> 00:07:39.640
three which is going to be
called m_startPosition.

100
00:07:39.640 --> 00:07:42.108
And just really briefly,

101
00:07:42.108 --> 00:07:48.770
a vector3 is a three dimensional
vector with an x, y, and z.

102
00:07:48.770 --> 00:07:55.320
And that just stores internally a struct
with three floating point values.

103
00:07:55.320 --> 00:08:00.550
And you know a vector does typically
have a position and a magnitude.

104
00:08:00.550 --> 00:08:04.240
In this case, a vector three
can represent one or the other.

105
00:08:04.240 --> 00:08:08.838
So it can represent a position or
a magnitude.

106
00:08:08.838 --> 00:08:16.910
In this case we are going to
use that as kind of both.

107
00:08:16.910 --> 00:08:19.830
We're gonna use that as well.

108
00:08:19.830 --> 00:08:22.564
We're gonna use it as
a direction in this case, and

109
00:08:22.564 --> 00:08:26.400
then we'll multiply that whole
vector by this speed variable.

110
00:08:26.400 --> 00:08:30.954
So in our start method,
the first thing we need to do and

111
00:08:30.954 --> 00:08:35.511
I'll just write a comment
here by adding two slashes.

112
00:08:35.511 --> 00:08:39.252
Is we need to gather components,

113
00:08:39.252 --> 00:08:43.928
variables that will be needed later, and

114
00:08:43.928 --> 00:08:50.353
what are those well we have a variable for
our rigid body.

115
00:08:50.353 --> 00:08:54.009
But we need to actually
grab that rigid body off

116
00:08:54.009 --> 00:08:59.190
of the game object that this
same component is attached to.

117
00:08:59.190 --> 00:09:02.120
So we'll use the rigid body variable.

118
00:09:02.120 --> 00:09:08.240
And we're going to assign it using this
special method here called get component.

119
00:09:09.800 --> 00:09:15.410
And get component takes a generic type.

120
00:09:15.410 --> 00:09:22.510
So in these angle brackets here,
I'm going to type rigid body okay?

121
00:09:22.510 --> 00:09:27.104
And then right after the angle brackets,
I'll type an opening and

122
00:09:27.104 --> 00:09:32.207
closing parenthesis because it is
a method It's a GetComponent method.

123
00:09:32.207 --> 00:09:36.960
But we're using rigid
body as a generic type

124
00:09:36.960 --> 00:09:42.420
to assign it to our rigid
body variable okay?

125
00:09:42.420 --> 00:09:46.670
And then finally,
we need the starting position here.

126
00:09:46.670 --> 00:09:49.270
So we'll use the start
position vector three.

127
00:09:49.270 --> 00:09:54.768
And that's going to represent
a position versus To say this vector

128
00:09:54.768 --> 00:10:00.365
three which is a direction right and
there's a couple of components

129
00:10:00.365 --> 00:10:05.395
that are accessible without
having to use that get compass.

130
00:10:05.395 --> 00:10:06.550
Component method and

131
00:10:06.550 --> 00:10:10.935
one of them is transformed because
every game object has a transform.

132
00:10:10.935 --> 00:10:12.058
This is a mono behavior,

133
00:10:12.058 --> 00:10:15.225
it's a component that's going
to be attached to a game object.

134
00:10:15.225 --> 00:10:18.465
So we know that there's
gonna be a transform.

135
00:10:18.465 --> 00:10:26.560
So we want lowercase transform with a
lowercase t here Or rather than uppercase.

136
00:10:26.560 --> 00:10:31.646
Uppercase is going to be the actual
transform class where we might

137
00:10:31.646 --> 00:10:36.930
access static methods without
a transform that's instantiated.

138
00:10:37.970 --> 00:10:40.630
We want the transform that's
attached to this game object.

139
00:10:40.630 --> 00:10:42.170
So we're going to keep it lowercase.

140
00:10:42.170 --> 00:10:48.700
So we're gonna say transform.position,
which is one of its properties.

141
00:10:48.700 --> 00:10:52.290
Because remember in the inspector, we saw
a transform has a position, rotation,

142
00:10:52.290 --> 00:10:53.190
and scale.

143
00:10:53.190 --> 00:10:55.350
So we want its position.

144
00:10:55.350 --> 00:11:00.303
The reason we're storing
the start position here is because

145
00:11:00.303 --> 00:11:03.420
we're gonna need that when we reset.

146
00:11:03.420 --> 00:11:07.440
So you remember how the spheres
were kind of falling off the side.

147
00:11:07.440 --> 00:11:11.033
It or when we start the game or
when the game ends and

148
00:11:11.033 --> 00:11:16.768
you want to restart the game we need that
original position to reset the sphere so

149
00:11:16.768 --> 00:11:22.300
that's why we're storing it and
start because we'll use the steam start.

150
00:11:22.300 --> 00:11:24.990
Position later before
the game has actually begun.

151
00:11:26.940 --> 00:11:30.410
So, oops, there we go.

152
00:11:30.410 --> 00:11:37.230
okay, next, inside of fixed update,
we just need to do one thing here for now.

153
00:11:37.230 --> 00:11:42.424
We need to apply that movement direction
as a force To the rigid body and

154
00:11:42.424 --> 00:11:45.430
I'm going to type that out as a comment.

155
00:11:46.520 --> 00:11:48.740
So we remember what we're doing here.

156
00:11:48.740 --> 00:11:52.792
So every physics tick or

157
00:11:52.792 --> 00:11:57.858
physics update, out of force

158
00:11:57.858 --> 00:12:02.721
equal to the movement vector

159
00:12:02.721 --> 00:12:08.210
multiplied by speed good okay.

160
00:12:08.210 --> 00:12:11.535
So, on the rigid body class,

161
00:12:11.535 --> 00:12:16.800
there's a method called add force okay?

162
00:12:16.800 --> 00:12:23.660
And add force along with many methods
in the Unity API is overloaded methods.

163
00:12:23.660 --> 00:12:27.790
So if I type add force
the parentheses here.

164
00:12:29.710 --> 00:12:32.916
It will show me in VS code or
Visual Studio,

165
00:12:32.916 --> 00:12:39.830
the several different overloads that I
could potentially apply there, right?

166
00:12:39.830 --> 00:12:46.070
But I actually want the second one.

167
00:12:46.070 --> 00:12:48.739
And you don't need to scroll
through these to actually select

168
00:12:48.739 --> 00:12:50.290
which overloaded method you want.

169
00:12:50.290 --> 00:12:56.460
You can just type in variables, it's
going to know which one that you mean.

170
00:12:56.460 --> 00:13:02.482
But I want the second one here I want to
add a force as a vector to the rigid body,

171
00:13:02.482 --> 00:13:06.189
so I'm pointing in
a direction Of this vector,

172
00:13:06.189 --> 00:13:09.870
it's gonna push it in that direction.

173
00:13:09.870 --> 00:13:13.779
So we want to use our movementDirection,

174
00:13:18.088 --> 00:13:23.870
And then we want to multiply that vector,
by our float value of speed.

175
00:13:25.170 --> 00:13:29.580
Because we have a direction that
direction is going to be coming from.

176
00:13:29.580 --> 00:13:33.446
In the case of the player, the keyboard
when I'm hitting the WASD keys that's

177
00:13:33.446 --> 00:13:36.260
going to be moving that vector around.

178
00:13:36.260 --> 00:13:39.690
And then the speed gives that a magnitude.

179
00:13:39.690 --> 00:13:42.579
So it increases the length of that factor.

180
00:13:44.190 --> 00:13:51.310
So the last method that we're gonna write
here is going to be called reset position.

181
00:13:51.310 --> 00:13:53.510
And this is going to be a public method.

182
00:13:53.510 --> 00:13:57.949
I left off accessors here because these
methods can be private by default, but

183
00:13:57.949 --> 00:14:00.290
we actually need a public method.

184
00:14:00.290 --> 00:14:05.767
For resetting the position here,
because this is one of several methods

185
00:14:05.767 --> 00:14:11.331
that's going to be called when you say
hit the spacebar to reset the game or

186
00:14:11.331 --> 00:14:16.030
when a player rolls off the side
we need to reset its position.

187
00:14:17.070 --> 00:14:20.140
So we're gonna do a couple things in here,
but

188
00:14:20.140 --> 00:14:25.250
I'll type out a comment to indicate kind
of the general gist of what that is.

189
00:14:25.250 --> 00:14:30.297
We're gonna reset the velocity to 0 and

190
00:14:30.297 --> 00:14:34.310
set the position back to start.

191
00:14:35.420 --> 00:14:38.450
So I'm gonna type this out first and
then explain it.

192
00:14:38.450 --> 00:14:44.389
So first,
on the rigid body We are going to

193
00:14:44.389 --> 00:14:50.280
set velocity = vector3.zero, so.

194
00:14:50.280 --> 00:14:56.363
the vector three class has a stat
Attic property called zero and

195
00:14:56.363 --> 00:15:02.214
that allows you to just assign
a vector with a value of zero for

196
00:15:02.214 --> 00:15:04.815
all of its values.

197
00:15:04.815 --> 00:15:05.645
So we're set.

198
00:15:05.645 --> 00:15:07.985
So a rigid body internally
is storing a velocity.

199
00:15:07.985 --> 00:15:10.435
It's how fast the rigid body is moving.

200
00:15:10.435 --> 00:15:12.767
We wanna set that to zero so

201
00:15:12.767 --> 00:15:17.855
it's not moving then A rigidbody
dot angular velocity,

202
00:15:17.855 --> 00:15:24.430
so it's not only moving it's also
potentially tumbling through space.

203
00:15:24.430 --> 00:15:27.670
We want to set that to vector 3.0 as well.

204
00:15:27.670 --> 00:15:30.540
We don't want any angular velocity.

205
00:15:30.540 --> 00:15:35.517
And then finally,
the transform dot position

206
00:15:35.517 --> 00:15:40.320
Now we want to set to the start position.

207
00:15:40.320 --> 00:15:44.879
So you'll kind of notice that we've
mirrored what we've done in start.

208
00:15:44.879 --> 00:15:49.276
And start we're taking the start
position vector three variable and

209
00:15:49.276 --> 00:15:52.991
assigning the transforms current
position at the start of

210
00:15:52.991 --> 00:15:56.630
the script when it first starts rendering.

211
00:15:56.630 --> 00:15:58.730
Down here we're doing the opposite.

212
00:15:58.730 --> 00:16:01.287
We want to assign that start position

213
00:16:01.287 --> 00:16:06.240
that we stored to the transform
circles back to its original position.

214
00:16:07.450 --> 00:16:12.260
So that's the kind of
the naive approach right?

215
00:16:12.260 --> 00:16:15.310
You reset the start position.

216
00:16:15.310 --> 00:16:19.266
When people are starting out in Unity,
they'll do this type of thing where they

217
00:16:19.266 --> 00:16:22.120
have a physics game,
they'll reset a position.

218
00:16:22.120 --> 00:16:24.963
And what ends up happening is
they'll reset a position but

219
00:16:24.963 --> 00:16:27.060
then the rigid body will continue moving.

220
00:16:27.060 --> 00:16:31.202
And that's because it still has
the same velocity as it did when it

221
00:16:31.202 --> 00:16:33.400
was in another position in space.

222
00:16:33.400 --> 00:16:36.010
Is it's kind of like in the game portal.

223
00:16:36.010 --> 00:16:38.548
When you go through a portal,
you maintain that velocity,

224
00:16:38.548 --> 00:16:41.200
they kind of use that to their
advantage in that game, right?

225
00:16:41.200 --> 00:16:43.802
In this case, we don't want that when,

226
00:16:43.802 --> 00:16:48.397
when the sphere start above the board,
we want them to have velocity and

227
00:16:48.397 --> 00:16:53.630
angular velocity of zero so that they
just use gravity and drop in right?

228
00:16:53.630 --> 00:16:59.499
So that's why we're resetting
the rigid body there.

229
00:16:59.499 --> 00:17:05.650
okay, so we wrote the script,
I'm going to hit Command S to save it.

230
00:17:05.650 --> 00:17:07.898
And when I switch back to Unity,

231
00:17:07.898 --> 00:17:12.110
you should see a very brief
little loading bar again.

232
00:17:12.110 --> 00:17:15.770
It's magically recompiling
our game on the fly.

233
00:17:15.770 --> 00:17:23.795
With it selected you'll see in
the inspector all the stuff we just wrote.

234
00:17:23.795 --> 00:17:32.039
And the game should at this point if
we hit play the player should drop in.

235
00:17:32.039 --> 00:17:37.495
And if we hit the input keys,
it will do nothing.

236
00:17:37.495 --> 00:17:41.741
Let's because we aren't actually doing
anything with that movement vector

237
00:17:41.741 --> 00:17:42.335
just yet.

238
00:17:42.335 --> 00:17:47.285
We need to write another script
that's going to drive that vector.

239
00:17:47.285 --> 00:17:51.415
But I can hit play again
to come out of play mode.

240
00:17:51.415 --> 00:17:56.376
And if I hit play once more
You'll see that rigid body

241
00:17:56.376 --> 00:18:01.350
does have gravity it's dropping in but
there's still more that we need to do

