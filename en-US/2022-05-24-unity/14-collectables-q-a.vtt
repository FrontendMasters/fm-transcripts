WEBVTT

1
00:00:00.830 --> 00:00:05.351
In terms of error handling, what if an
item runs into collector doesn't have like

2
00:00:05.351 --> 00:00:08.440
a increment score method or
the appropriate behavior?

3
00:00:09.580 --> 00:00:10.920
&gt;&gt; It will cause an error.

4
00:00:10.920 --> 00:00:14.796
So let's actually go back to the script so

5
00:00:14.796 --> 00:00:19.440
I can show you how you
might want to handle this.

6
00:00:19.440 --> 00:00:23.796
So if I were to write an if statement and

7
00:00:23.796 --> 00:00:31.846
say if other.gameobject.get
component score does not equal null.

8
00:00:34.417 --> 00:00:40.042
Then do that, however, in this game, there
shouldn't be anything running into that,

9
00:00:40.042 --> 00:00:42.990
that doesn't have a score component.

10
00:00:42.990 --> 00:00:44.900
So that is a little bit
of a simplification.

11
00:00:48.130 --> 00:00:51.120
So, actually, I wrote that out.

12
00:00:51.120 --> 00:00:54.137
If the other game object
has a score component,

13
00:00:54.137 --> 00:00:59.050
it's not actually doing this if check but
theoretically, yes, it should.

14
00:00:59.050 --> 00:01:01.705
And if anything did run into it
that didn't have a score component,

15
00:01:01.705 --> 00:01:02.696
it would cause an error.

16
00:01:02.696 --> 00:01:06.440
So, good question, yes.

17
00:01:06.440 --> 00:01:10.092
&gt;&gt; Is there a formatter or
a linter for Unity code?

18
00:01:10.092 --> 00:01:13.930
&gt;&gt; I don't think so, I mean.

19
00:01:15.770 --> 00:01:22.517
I generally just get by with
the tools that VS Code provides and

20
00:01:22.517 --> 00:01:30.570
what Unity provides as an install,
but the no, I don't think so.

21
00:01:30.570 --> 00:01:32.350
I mean, I'm sure there's
something like that out there.

22
00:01:32.350 --> 00:01:34.070
I've never bothered to look.

23
00:01:34.070 --> 00:01:35.610
Haven't needed it really.

24
00:01:35.610 --> 00:01:36.110
&gt;&gt; Yeah, just doing so.

25
00:01:36.110 --> 00:01:40.510
Some quick searching it sounds
like there's a C# format or

26
00:01:40.510 --> 00:01:42.801
built into the C# extension.

27
00:01:42.801 --> 00:01:45.301
&gt;&gt; Okay.
&gt;&gt; This code so you can.

28
00:01:45.301 --> 00:01:45.826
&gt;&gt; There you go.

29
00:01:45.826 --> 00:01:46.750
&gt;&gt; Format on Save.

30
00:01:48.110 --> 00:01:51.270
&gt;&gt; Cool, okay, any other questions?

31
00:01:54.320 --> 00:01:56.343
&gt;&gt; This might be a silly question, but

32
00:01:56.343 --> 00:01:59.860
how are we getting access to
transform inside of this file?

33
00:01:59.860 --> 00:02:02.700
I don't see it declared or
imported anywhere.

34
00:02:02.700 --> 00:02:09.600
&gt;&gt; So
it's part of the mono behavior class.

35
00:02:09.600 --> 00:02:16.410
So yeah,
every game object has a transform.

36
00:02:16.410 --> 00:02:23.710
And so it can just be assumed that it's
there and it will be able to grab it.

37
00:02:23.710 --> 00:02:29.240
So yeah, that's not something even though
it is a component, it's not a component we

38
00:02:29.240 --> 00:02:34.190
need to call and get component on because
every game object has to transform.

39
00:02:35.580 --> 00:02:39.060
&gt;&gt; Our game objects class always
requires a mono behavior?

40
00:02:42.080 --> 00:02:47.560
&gt;&gt; No, so
mono behavior is the component class.

41
00:02:48.680 --> 00:02:54.580
So that's how we create components
that get attached to game objects.

42
00:02:54.580 --> 00:03:00.410
But mono behavior is able to find
other components on its game object.

