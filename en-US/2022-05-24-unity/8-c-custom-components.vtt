WEBVTT

1
00:00:00.000 --> 00:00:02.878
&gt;&gt; And now, we are going to write,

2
00:00:02.878 --> 00:00:08.850
our own custom components.So we
added some built in components,

3
00:00:08.850 --> 00:00:13.661
that were already a part of unity or
part of packages.

4
00:00:13.661 --> 00:00:16.732
But you can create your own components,
and

5
00:00:16.732 --> 00:00:20.389
that is how you drive
the behaviour of game objects.

6
00:00:20.389 --> 00:00:23.814
So this is where we're gonna
start getting into code,

7
00:00:23.814 --> 00:00:28.510
the first component that we're gonna
create is called rolling movement.

8
00:00:28.510 --> 00:00:31.931
And I'm going to type all of
this out in the editor, so

9
00:00:31.931 --> 00:00:35.215
don't worry about trying
to copy all of this down.

10
00:00:35.215 --> 00:00:39.592
This is just here for
reference, it's in the slides,

11
00:00:39.592 --> 00:00:42.455
if you need to go back and look at it.

12
00:00:42.455 --> 00:00:44.762
So, like I was saying earlier,

13
00:00:44.762 --> 00:00:49.211
components modify the behavior
of game objects in the scene.

14
00:00:49.211 --> 00:00:54.865
So we've already added a rigid body and
a player movement,

15
00:00:54.865 --> 00:01:00.755
or sorry, player input component
to the player game object.

16
00:01:00.755 --> 00:01:05.505
This component is going
to take a 3D vector,

17
00:01:05.505 --> 00:01:10.387
in this variable called
movement direction.

18
00:01:10.387 --> 00:01:14.252
And then we're going to apply that vector,

19
00:01:14.252 --> 00:01:19.173
as a force to the rigid body,
to its physics component.

20
00:01:19.173 --> 00:01:24.702
And that's going to roll the ball
in the direction of that vector,

21
00:01:24.702 --> 00:01:28.946
and this vector is going
to have a magnitude of one,

22
00:01:28.946 --> 00:01:33.607
so we can multiply it by
another variable called speed.

23
00:01:33.607 --> 00:01:38.528
To move it at whatever speed we want
to.We're gonna set the speed to one, and

24
00:01:38.528 --> 00:01:42.481
that's actually the speed that
we're gonna use in the game.

25
00:01:42.481 --> 00:01:46.758
So we don't actually need to
multiply this vector, but

26
00:01:46.758 --> 00:01:52.127
it's something in the inspector that
like I said, you can play with,

27
00:01:52.127 --> 00:01:56.235
you can play with the speed
of the sphere to modify it.

28
00:01:56.235 --> 00:02:01.051
So we are going to code this up and
just a moment.But there's more that I

29
00:02:01.051 --> 00:02:04.583
want to point out here because
this is a lot of stuff,

30
00:02:04.583 --> 00:02:07.498
there's a that is being introduced here.

31
00:02:07.498 --> 00:02:11.538
So first of all,
the name of this class rolling movement,

32
00:02:11.538 --> 00:02:13.933
is also the name of the component.

33
00:02:13.933 --> 00:02:19.191
So when we create scripts in Unity,
we named them the name of the class,

34
00:02:19.191 --> 00:02:23.415
but that's going to show up
as the name of the component.

35
00:02:23.415 --> 00:02:28.965
So when we use Pascal case,
with a capital R and a capital M,

36
00:02:28.965 --> 00:02:34.293
it's going to place spaces
between the two words there,

37
00:02:34.293 --> 00:02:37.519
when it shows up in the inspector.

38
00:02:37.519 --> 00:02:41.834
So it will say rolling space
movement even though the name of

39
00:02:41.834 --> 00:02:43.658
the class has no spaces.

40
00:02:43.658 --> 00:02:48.884
All C sharp scripts that are components
are public, so that they're

41
00:02:48.884 --> 00:02:55.119
accessible in the Unity editor, and
they inherit from the class MonoBehaviour.

42
00:02:55.119 --> 00:03:00.346
And you'll notice that is not
the American spelling of behaviour,

43
00:03:00.346 --> 00:03:04.289
it's because Unity is not
an American company, so

44
00:03:04.289 --> 00:03:08.159
that is not a misspelling
it is behaviour with a U.

45
00:03:08.159 --> 00:03:12.682
So that's really important
all C sharp scripts that

46
00:03:12.682 --> 00:03:17.524
are components inherit from
the class MonoBehaviour.

47
00:03:17.524 --> 00:03:22.652
And let's break this down further in a
different way, at the top, you'll see some

48
00:03:22.652 --> 00:03:28.020
of those namespaces, that I mentioned when
we were talking about the documentation.

49
00:03:28.020 --> 00:03:32.899
Namespaces in C Sharp are basically
just collections of code,

50
00:03:32.899 --> 00:03:35.855
there are a way to organize your code.

51
00:03:35.855 --> 00:03:41.640
So that you don't confuse the names
of your classes with say a class,

52
00:03:41.640 --> 00:03:46.142
and another namespace that
might have the same name.

53
00:03:46.142 --> 00:03:51.494
There's also variables, so
the variables I have listed out here and

54
00:03:51.494 --> 00:03:57.502
we're gonna break down what these
variables actually mean in just a moment.

55
00:03:57.502 --> 00:04:02.117
And then below all the variables,
there are C sharp methods,

56
00:04:02.117 --> 00:04:06.645
there's a few that are built
into the MonoBehaviour class,

57
00:04:06.645 --> 00:04:09.778
such as start, update and fixed update.

58
00:04:09.778 --> 00:04:14.807
And then, you can write your own methods,
like this one

59
00:04:14.807 --> 00:04:21.124
that will reset the position back
to the start.Do we have a question?

60
00:04:21.124 --> 00:04:25.848
&gt;&gt; Is it better to use
the Unity input object,

61
00:04:25.848 --> 00:04:32.818
instead of hard coding the key inputs and
move inside the code?

62
00:04:32.818 --> 00:04:35.725
&gt;&gt; Well,
we're gonna do a little bit of both,

63
00:04:35.725 --> 00:04:40.764
we need to write some code that actually
interacts with that set of actions.

64
00:04:40.764 --> 00:04:46.724
So just adding the actions asset
isn't going to do anything,

65
00:04:46.724 --> 00:04:50.056
when we create the actions asset.

66
00:04:50.056 --> 00:04:57.077
That's really just mapping concepts
in our game to a set of controls.

67
00:04:57.077 --> 00:05:02.570
So well, in our case,
if you have something moving around,

68
00:05:02.570 --> 00:05:06.243
you might wann map that to the WASD keys.

69
00:05:06.243 --> 00:05:08.891
The arrow keys on a keyboard, but

70
00:05:08.891 --> 00:05:13.343
then on a gamepad you might
wanna map that to a joystick.

71
00:05:13.343 --> 00:05:18.179
So it's a way of creating a concept
within the game like, firing a laser or

72
00:05:18.179 --> 00:05:22.937
moving something around that's mapped
to a different set of controls,

73
00:05:22.937 --> 00:05:24.500
it's an abstraction.

74
00:05:24.500 --> 00:05:30.487
However, we also have to write code that
actually interacts with that action.

75
00:05:30.487 --> 00:05:33.951
So when If that button is
pressed on the keyboard,

76
00:05:33.951 --> 00:05:38.985
we need to have code that executes
that actually does something with it.

77
00:05:38.985 --> 00:05:44.082
So we don't just get whatever those
buttons are supposed to do for

78
00:05:44.082 --> 00:05:49.191
free, because it could be
anything.Is that the only question?

79
00:05:49.191 --> 00:05:55.112
Yeah, cool, all right, so
let's move on from here,

80
00:05:57.018 --> 00:06:03.137
So, we got a lot of variables here,
there's a lot of stuff in the script,

81
00:06:03.137 --> 00:06:08.072
let's zoom in, and
take a closer look at just one of these,

82
00:06:08.072 --> 00:06:12.355
so you can understand what
each part of this means.

83
00:06:12.355 --> 00:06:16.801
So if you are, say,
a JavaScript developer or

84
00:06:16.801 --> 00:06:22.387
you're working in some other
web programming language,

85
00:06:22.387 --> 00:06:26.719
a lot of this stuff should
be familiar to you,

86
00:06:26.719 --> 00:06:30.941
a lot of it should map
pretty well one to one.

87
00:06:30.941 --> 00:06:34.832
We have a type here, so
in this case this variable,

88
00:06:34.832 --> 00:06:39.999
this is of type float,
it's a floating point value it's a number.

89
00:06:39.999 --> 00:06:45.234
We have a name for
our variable m_ speed is what

90
00:06:45.234 --> 00:06:50.345
I've called this, and
then we have a value.

91
00:06:50.345 --> 00:06:55.318
That I'm assigning to this by default,
you don't have to assign a value to it,

92
00:06:55.318 --> 00:06:59.340
by default, any float or
integer value is just going to be zero.

93
00:06:59.340 --> 00:07:04.496
But you'll see I have a little f there,
after the number that

94
00:07:04.496 --> 00:07:10.982
indicates that it is a floating point
value that's being assigned to this.

95
00:07:10.982 --> 00:07:16.174
The m underscore necessary, but
it's something that I like to add and

96
00:07:16.174 --> 00:07:21.895
Unity will actually automatically omit
when this is shown in the inspector.

97
00:07:21.895 --> 00:07:26.394
That means that it is just a member
variable, it's a member of this class.

98
00:07:26.394 --> 00:07:31.125
And it's again, not necessary
it's syntactic sugar I would say,

99
00:07:31.125 --> 00:07:34.694
just so
that you know what's a local variable, and

100
00:07:34.694 --> 00:07:38.016
what's a variable that's
part of this class.

101
00:07:38.016 --> 00:07:42.308
The thing that might not be
familiar in JavaScript or

102
00:07:42.308 --> 00:07:47.976
other web programming languages,
are what are called attributes.

103
00:07:47.976 --> 00:07:50.502
And quite frankly,
maybe they are familiar,

104
00:07:50.502 --> 00:07:54.334
I'm not really a web programmer anymore,
I'm very much into games.

105
00:07:54.334 --> 00:08:00.354
So maybe there's concepts that
map to this, but an attribute,

106
00:08:00.354 --> 00:08:07.614
in C sharp changes the behavior of
variables in a couple of interesting ways.

107
00:08:07.614 --> 00:08:12.076
So I'll walk through attributes
in just a second, but

108
00:08:12.076 --> 00:08:18.579
the last thing I wanna point out here is
that, you can also add access modifier.

109
00:08:18.579 --> 00:08:25.008
So in the case of this where there is no
access modifier, this variables private,

110
00:08:25.008 --> 00:08:30.613
so when there's no access modifier
variables are private by default.

111
00:08:30.613 --> 00:08:33.149
I'm going to go back
just one slide just so

112
00:08:33.149 --> 00:08:36.781
you can look at some of these
other variables that are here.

113
00:08:36.781 --> 00:08:41.483
Like this one has a different
attribute hide an inspector, but

114
00:08:41.483 --> 00:08:46.450
then it does have an accessor of
public there, has a different type

115
00:08:46.450 --> 00:08:51.526
of vector three, and then it has
a different name for the variable.

116
00:08:51.526 --> 00:08:57.644
This one has no attribute, no accessor,
it just has a type and it has a name.

117
00:08:57.644 --> 00:09:03.372
And that's actually the minimum amount
that you can have for a variable in Unity.

118
00:09:03.372 --> 00:09:07.270
You need at least a type,
you really need at least a name, and

119
00:09:07.270 --> 00:09:10.718
then we also have our rigid
body there just like that.

120
00:09:10.718 --> 00:09:16.359
So I just wanted you to see
those different things just so

121
00:09:16.359 --> 00:09:24.176
you can get the pattern of attribute
accessor type, and name and then value.

122
00:09:24.176 --> 00:09:28.383
So let's talk more about those attributes,
so,

123
00:09:28.383 --> 00:09:34.292
attributes are markers that can be
placed above a class, a property,

124
00:09:34.292 --> 00:09:40.317
or even a method or function in
a script to indicate special behaviour.

125
00:09:40.317 --> 00:09:45.765
So they're placed in square brackets, and
I think maybe the best way to explain

126
00:09:45.765 --> 00:09:51.642
attributes is to tell you about two of the
attributes that we're using in the script.

127
00:09:51.642 --> 00:09:55.966
So serialized field forces
Unity to serialize,

128
00:09:55.966 --> 00:10:00.605
a private variable, and
show it in the inspector for

129
00:10:00.605 --> 00:10:05.890
modification, so
you saw that we had that speed variable.

130
00:10:05.890 --> 00:10:09.850
When we're working on the game,
we may wanna change that value in

131
00:10:09.850 --> 00:10:13.175
the inspector different from
what it says in the code.

132
00:10:13.175 --> 00:10:18.990
And serializing the variable allows
it to be shown in the inspector,

133
00:10:18.990 --> 00:10:23.212
all public variables
are serialized by default.

134
00:10:23.212 --> 00:10:28.262
So if you create a variable that is
public, it will be shown in the inspector.

135
00:10:28.262 --> 00:10:33.682
And basically, serialization is not
something that you really need to

136
00:10:33.682 --> 00:10:38.754
worry about a whole Lot in Unity,
but it happens behind the scene.

137
00:10:38.754 --> 00:10:42.603
But serialization Is the process
of transforming data structures or

138
00:10:42.603 --> 00:10:47.063
game object states, into a format that
Unity can store and reconstruct later.

139
00:10:47.063 --> 00:10:51.809
So it's just going back and forth between
your code, and the Unity editor and

140
00:10:51.809 --> 00:10:56.557
allowing you to work with those C sharp
variables in the inspector in a way that

141
00:10:56.557 --> 00:10:57.891
unity understands.

142
00:10:57.891 --> 00:11:04.493
And to get a little bit more under the
hood, Unity is actually written in C++ and

143
00:11:04.493 --> 00:11:09.949
C sharp is the scripting language
that we're using on top of that.

144
00:11:09.949 --> 00:11:12.114
So that's why serialization occurs,

145
00:11:12.114 --> 00:11:16.378
it's going through a lot of different
layers of software there that we don't

146
00:11:16.378 --> 00:11:19.866
need to worry about [LAUGH] That's
the great thing about Unity.

147
00:11:19.866 --> 00:11:24.768
There's another attribute that you saw in
that script called hide and inspector,

148
00:11:24.768 --> 00:11:28.000
so like I said,
all public variables are serialized.

149
00:11:28.000 --> 00:11:30.836
They're all visible in the inspector, but

150
00:11:30.836 --> 00:11:36.363
sometimes you want a variable to be public
so that it's accessible by other scripts.

151
00:11:36.363 --> 00:11:39.772
But you don't want it to
be shown in the inspector,

152
00:11:39.772 --> 00:11:44.546
because you don't want it to be
modified when you're tuning the game.

153
00:11:44.546 --> 00:11:50.858
So hide an inspector allows you
to create a public variable,

154
00:11:50.858 --> 00:11:54.836
that is then hidden in the inspector.

155
00:11:54.836 --> 00:12:00.635
There's a couple of different methods
in this script, there is start and

156
00:12:00.635 --> 00:12:07.103
fixed update, and those are two methods
that are part of the MonoBehavior class.

157
00:12:07.103 --> 00:12:11.428
There are lots of other methods that are
part of MonoBehavior, you can check that

158
00:12:11.428 --> 00:12:15.071
out in the documentation we're not
going to go through all of them.

159
00:12:15.071 --> 00:12:20.395
Cuz it would take all day, but
start Is called on the frame,

160
00:12:20.395 --> 00:12:27.337
when a script is enabled, and I say frame
as in like FPS frame rate of the game.

161
00:12:27.337 --> 00:12:31.289
So the first frame that's rendered,
start gets called, and

162
00:12:31.289 --> 00:12:35.241
as an example when you hit the play
button in the Unity editor,

163
00:12:35.241 --> 00:12:39.741
start is going to get called because
it's rendering the first frame.

164
00:12:39.741 --> 00:12:43.570
Okay, so that allows you an opportunity
to kinda set up your scripts.

165
00:12:43.570 --> 00:12:49.743
You can gather other components on
the same game object that you might need,

166
00:12:49.743 --> 00:12:55.348
you can store variables that you're
going to need the values later.

167
00:12:55.348 --> 00:13:00.353
Fixed update Is a frame rate
independent method, that is called

168
00:13:00.353 --> 00:13:07.135
every physics update.So there's a couple
of different updates happening in Unity.

169
00:13:07.135 --> 00:13:12.118
There's the physics update loop,
there's what's called

170
00:13:12.118 --> 00:13:17.595
the actual update loop,
where update is when a frame is rendered.

171
00:13:17.595 --> 00:13:22.954
But you don't want everything in your
game running based on the frame rate,

172
00:13:22.954 --> 00:13:28.579
because the frame rate could be really
high on like a high refresh rate monitor.

173
00:13:28.579 --> 00:13:32.000
Or maybe the game is having
performance issues and

174
00:13:32.000 --> 00:13:35.181
it's running at like 15 frames per second.

175
00:13:35.181 --> 00:13:39.904
There's things that you don't want
running based on the frame rate, and

176
00:13:39.904 --> 00:13:41.973
one of those things is physics.

177
00:13:41.973 --> 00:13:46.102
You want physics to always
behave in a consistent way,

178
00:13:46.102 --> 00:13:50.969
even if the frame rate of the game
is variable, which it will be.

179
00:13:50.969 --> 00:13:54.292
It's very hard to lock frame rate,so,

180
00:13:54.292 --> 00:13:59.580
fixed update allows you to update
things every physics update.

181
00:13:59.580 --> 00:14:03.018
So fixed update is a frame
rate independent method,

182
00:14:03.018 --> 00:14:07.706
that is called every physics update,
typically that's 50 times per

183
00:14:07.706 --> 00:14:11.865
second by default you can change
that in the project settings.

184
00:14:11.865 --> 00:14:15.670
But generally speaking,
any kind of physics calculations,

185
00:14:15.670 --> 00:14:20.643
that you need to happen, as the game is
playing should be done in fixed update, or

186
00:14:20.643 --> 00:14:23.444
you're gonna have unpredictable results.

187
00:14:23.444 --> 00:14:26.878
So if all of your components
that are doing physics

188
00:14:26.878 --> 00:14:30.492
operations are running
those within fixed update.

189
00:14:30.492 --> 00:14:35.035
They'll all stay in sync with one
another and create a consistent,

190
00:14:35.035 --> 00:14:36.478
physics game world.

191
00:14:36.478 --> 00:14:41.111
And again, like I said,
that's in contrast to the update method,

192
00:14:41.111 --> 00:14:43.388
which is called every frame, and

193
00:14:43.388 --> 00:14:48.127
therefore is not frame rate independent
it is frame rate dependent.

