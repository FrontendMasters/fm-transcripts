WEBVTT

1
00:00:00.330 --> 00:00:05.903
So we've written a couple of scripts
we have kind of this physics sandbox,

2
00:00:05.903 --> 00:00:08.652
where we can move the player around.

3
00:00:08.652 --> 00:00:14.190
But now we need to start turning this
into an actual game with scoring and

4
00:00:14.190 --> 00:00:19.470
timers, and a game loop, and
we need to be able to restart the game.

5
00:00:19.470 --> 00:00:23.430
There's a lot of stuff to do there,
and a lot of times,

6
00:00:23.430 --> 00:00:28.436
even in large games, you'll have
this class called a game manager.

7
00:00:28.436 --> 00:00:32.289
It's not something that you have to have,

8
00:00:32.289 --> 00:00:37.112
it's not something that you
have to call this class.

9
00:00:37.112 --> 00:00:42.377
It's just kind of a de facto architectural
approach to making games in unity,

10
00:00:42.377 --> 00:00:46.447
where there's a script component
called game manager, and

11
00:00:46.447 --> 00:00:50.460
it's used to control high level
aspects of the games loop.

12
00:00:50.460 --> 00:00:55.187
So, this might include things
like initializing a level,

13
00:00:55.187 --> 00:01:01.157
along with other state changes,
such as game over or restarting the game.

14
00:01:01.157 --> 00:01:06.017
So a game manager can do lot of things,
but generally,

15
00:01:06.017 --> 00:01:10.360
it keeps track of the business
logic in the game.

16
00:01:10.360 --> 00:01:16.121
So it might also keep track of
just important game wide numbers,

17
00:01:16.121 --> 00:01:18.797
like scores or a round timer.

18
00:01:18.797 --> 00:01:22.211
It's pretty flexible in its definition,
but

19
00:01:22.211 --> 00:01:26.948
it's a thing that you will find
a lot of unity developers doing.

20
00:01:26.948 --> 00:01:30.249
They'll create this class
called a GameManager and

21
00:01:30.249 --> 00:01:33.483
do a lot of their business logic there for
the game.

22
00:01:33.483 --> 00:01:36.968
So, because this class
is doing a lot of stuff,

23
00:01:36.968 --> 00:01:40.902
you can imagine that there's
actually a lot in here.

24
00:01:40.902 --> 00:01:45.602
This is not the full class,
this is split over a couple of slides,

25
00:01:45.602 --> 00:01:49.959
and we'll go through this one
piece at a time, and go back and

26
00:01:49.959 --> 00:01:52.623
forth between Unity as we code this.

27
00:01:52.623 --> 00:01:55.924
So first, we need to set up variables,

28
00:01:55.924 --> 00:02:01.640
where we'll keep track of a couple
of different values in the game.

29
00:02:01.640 --> 00:02:06.340
And includes the players score,
the opponents score,

30
00:02:06.340 --> 00:02:12.140
the amount of time for each round,
the remaining time in each round,

31
00:02:12.140 --> 00:02:15.940
a boolean to keep track of the game state,
and

32
00:02:15.940 --> 00:02:20.652
then global values for
use by a couple of other scripts.

33
00:02:20.652 --> 00:02:25.558
So you'll see here that these
variables are called player score and

34
00:02:25.558 --> 00:02:30.132
opponent score, that's not
the actual number for the score.

35
00:02:30.132 --> 00:02:34.813
The score, remember is in the score
components, so this is referencing that

36
00:02:34.813 --> 00:02:39.649
component and we'll drop those into
the inspector after we create the script.

37
00:02:39.649 --> 00:02:45.786
At the start of the game,
the timescale will be set to zero, so

38
00:02:45.786 --> 00:02:51.096
you can modify the speed at
which time moves in unity,

39
00:02:51.096 --> 00:02:55.242
it's by default moving at a speed of one.

40
00:02:55.242 --> 00:03:01.814
But if you wanted to do like a slow-mo
effect, you could set it to 0.5,

41
00:03:01.814 --> 00:03:06.799
and all of the physics updates
would move at half speed.

42
00:03:06.799 --> 00:03:12.301
If you set it all the way to zero,
that's how you pause the game, time stops.

43
00:03:12.301 --> 00:03:16.863
And so at the start of the game we're
going to set the timescale to zero to

44
00:03:16.863 --> 00:03:21.061
pause the game, we're going to
set the value for the game clock.

45
00:03:21.061 --> 00:03:25.573
Which is the amount of time
the game should take in seconds,

46
00:03:25.573 --> 00:03:29.373
which is a float value of 60 here for
one minute.

47
00:03:29.373 --> 00:03:31.967
And then we'll update the timer for

48
00:03:31.967 --> 00:03:37.601
the first time calling this method
update timer, which we'll write later.

49
00:03:37.601 --> 00:03:41.153
So there's a lot to do here,
so let's get started.

50
00:03:41.153 --> 00:03:46.232
I'm going to switch to Unity, I'm going to

51
00:03:46.232 --> 00:03:52.151
create a new game object
here called Game Manager.

52
00:03:52.151 --> 00:03:59.760
And this is just the last values that
were we were using on the transform,

53
00:03:59.760 --> 00:04:06.517
but we wanna reset this to zero,
not because it really matters.

54
00:04:06.517 --> 00:04:10.554
But it's just good practice to reset
your transforms to the origin,

55
00:04:10.554 --> 00:04:14.032
just to indicate that in the case
of like this game manager,

56
00:04:14.032 --> 00:04:17.676
they don't actually need to be
at that particular position.

57
00:04:17.676 --> 00:04:22.376
So you can always reset the transform
by going to this little

58
00:04:22.376 --> 00:04:27.275
three dotted menu here next to transform,
and choose reset.

59
00:04:27.275 --> 00:04:31.544
So I have a GameManager GameObject,
I need a GameManager script.

60
00:04:31.544 --> 00:04:36.008
So I'll create a new C SharpScript, and

61
00:04:36.008 --> 00:04:41.006
we'll call it GameManager without a space.

62
00:04:43.174 --> 00:04:44.477
And then finally.

63
00:04:47.353 --> 00:04:53.027
I'll drag that script component
to the Game Manager Game Object,

64
00:04:53.027 --> 00:04:55.166
and now it's attached.

65
00:04:55.166 --> 00:05:00.164
And increase the size here,
you'll notice that unity has

66
00:05:00.164 --> 00:05:03.946
actually given that script a special icon.

67
00:05:03.946 --> 00:05:08.641
It's not because it's different
than any of these other scripts,

68
00:05:08.641 --> 00:05:13.741
it's just that game manager is so
common as a name for this type of a class,

69
00:05:13.741 --> 00:05:18.379
that unity just includes an icon for
it so that you can check it out.

70
00:05:18.379 --> 00:05:24.123
So I'm going to go ahead and
open the GameManager here,

71
00:05:24.123 --> 00:05:30.736
and the first thing that we need to do,
is create our variables.

72
00:05:30.736 --> 00:05:37.388
So I'm gonna remove these
namespaces we don't need,

73
00:05:37.388 --> 00:05:42.015
and then we need a serialized field for

74
00:05:42.015 --> 00:05:47.235
the score, this will be the player score.

75
00:05:47.235 --> 00:05:51.790
We need a serialized field with a score
that will be the opponent's score.

76
00:05:56.573 --> 00:06:02.435
Now we need another serialized field
that will be a float value for

77
00:06:02.435 --> 00:06:04.789
the game time in seconds.

78
00:06:04.789 --> 00:06:11.736
Seconds, spell correctly, and
that will be a default value of 60.

79
00:06:11.736 --> 00:06:15.274
You don't have to create this as
a serialized field if you don't want to,

80
00:06:15.274 --> 00:06:18.541
you could just leave that off, and
always have the game set to 60.

81
00:06:18.541 --> 00:06:23.033
But again, when you're creating games in
unity, it's nice to expose values like

82
00:06:23.033 --> 00:06:27.089
this, so that you can try out different
values as you're tuning the game.

83
00:06:27.089 --> 00:06:32.260
Maybe around time of a minute is too
short or too long, and you want to easily

84
00:06:32.260 --> 00:06:37.368
adjust that, and so you can change it
right in the inspector if you wanna.

85
00:06:37.368 --> 00:06:41.476
So we need another float value
that will be the timer, and

86
00:06:41.476 --> 00:06:44.557
even though we have
the game time in seconds

87
00:06:44.557 --> 00:06:49.201
that's soaring the amount of time
that each round should take.

88
00:06:49.201 --> 00:06:52.493
We still need another float value,

89
00:06:52.493 --> 00:06:58.099
that's the actual timer that
will be keeping track of time.

90
00:06:58.099 --> 00:07:03.521
We have a boolean value
called m_gameIsPlaying,

91
00:07:03.521 --> 00:07:07.807
and by default we'll set that to false,

92
00:07:07.807 --> 00:07:14.628
because when the game first starts up,
the game is not playing.

93
00:07:14.628 --> 00:07:18.349
We have to hit the spacer
to start the game.

94
00:07:18.349 --> 00:07:24.064
And then finally,
we'll have one more variable here,

95
00:07:24.064 --> 00:07:28.330
that will be a public static float value.

96
00:07:28.330 --> 00:07:33.188
And this is actually going
to be a property, and

97
00:07:33.188 --> 00:07:38.176
it's a property because
I'm capitalizing it.

98
00:07:38.176 --> 00:07:45.355
And we'll call this RespawnHeight,
and we'll set to a value of 0.25.

99
00:07:47.364 --> 00:07:51.024
We'll use this later on,
this is going to be the y height,

100
00:07:51.024 --> 00:07:53.212
at which a player should respond.

101
00:07:53.212 --> 00:07:57.615
So if the player falls off
the edge of the board,

102
00:07:57.615 --> 00:08:02.803
this is the height at which
we should trigger a Respawn.

103
00:08:02.803 --> 00:08:08.165
And we'll other later on to I
think the rolling controller,

104
00:08:08.165 --> 00:08:12.790
sorry, the rolling movement script,
but for now,

105
00:08:12.790 --> 00:08:17.962
we're just leaving this
accessible in the game manager.

106
00:08:17.962 --> 00:08:22.877
There's a couple of other ways we could
have done that, we could have put it

107
00:08:22.877 --> 00:08:27.795
directly on the rolling movement script,
but this is a good opportunity to

108
00:08:27.795 --> 00:08:32.030
see an a global value that you
might want to access other places.

109
00:08:32.030 --> 00:08:39.297
So, in the start method,
get rid of this comment,

110
00:08:39.297 --> 00:08:44.536
we want to set the timescale to zero,

111
00:08:44.536 --> 00:08:48.932
to pause the game at the start.

112
00:08:48.932 --> 00:08:54.194
So to do that,
we'll access the time class,

113
00:08:54.194 --> 00:08:57.378
and we'll set time scale,

114
00:08:57.378 --> 00:09:02.091
equal to a floating point value of zero.

115
00:09:02.091 --> 00:09:09.547
Then we wanna set to the game
timer to the number of seconds.

116
00:09:13.172 --> 00:09:18.685
In a round, so
we have that timer ,and at the start

117
00:09:18.685 --> 00:09:24.199
we wanna set the timer to
the game time and second,

118
00:09:24.199 --> 00:09:28.950
so we'll start the clock at 60 seconds.

119
00:09:28.950 --> 00:09:34.987
And then we want to update the timer text,

120
00:09:34.987 --> 00:09:41.033
and that's a method we'll write later.

121
00:09:41.033 --> 00:09:46.343
And I'm actually just going to comment
out that method call for now, so

122
00:09:46.343 --> 00:09:52.646
that it's not creating errors, but we do
wanna remember that we need to call there.

123
00:09:52.646 --> 00:09:59.231
All right, so we have the start,
of our game manager here,

124
00:09:59.231 --> 00:10:04.763
there's a lot more to do but
I'll save that file,

125
00:10:04.763 --> 00:10:11.520
and let's switch back to the slides,
and see what's next.

126
00:10:11.520 --> 00:10:16.714
So, every physics update,
we need to actually update the timer,

127
00:10:16.714 --> 00:10:20.994
and then if the timer runs out,
we should end the game.

128
00:10:20.994 --> 00:10:25.584
So this is another good
example of something that it's

129
00:10:25.584 --> 00:10:29.571
a better idea to do it in
fixed update if you can,

130
00:10:29.571 --> 00:10:34.282
you could do it in update and
say multiply by delta time.

131
00:10:34.282 --> 00:10:38.263
But just keeping track of it in
a fixed update that you always know,

132
00:10:38.263 --> 00:10:40.053
is gonna run at the same time.

133
00:10:40.053 --> 00:10:44.205
Usually better for actual game timers,

134
00:10:44.205 --> 00:10:50.686
if you want a little bit better
predictability and precision.

135
00:10:50.686 --> 00:10:54.646
So, we have our fixed update here, and

136
00:10:54.646 --> 00:10:58.734
it's going to subtract from the timer.

137
00:10:58.734 --> 00:11:04.309
If the timer hits zero,
we're gonna enter the game overstate,

138
00:11:04.309 --> 00:11:07.715
where game is playing is set to fix, and

139
00:11:07.715 --> 00:11:12.273
then the timescale once again,
is set back to zero.

140
00:11:12.273 --> 00:11:17.959
So let's switch over to our code,
and let's write that up.

141
00:11:21.098 --> 00:11:26.989
So we need FixedUpdate, right?

142
00:11:26.989 --> 00:11:32.144
And then if the game isn't playing.

143
00:11:34.597 --> 00:11:38.206
We should stop here, and that's where
we're using that Boolean value.

144
00:11:38.206 --> 00:11:43.035
So if game is playing is not

145
00:11:43.035 --> 00:11:47.869
true, then just return.

146
00:11:47.869 --> 00:11:53.335
So even though fixed update has returned
type of void, we can just return early.

147
00:11:53.335 --> 00:11:56.878
And if the game is not playing,
so if game is playing as false,

148
00:11:56.878 --> 00:12:00.509
we wanna just stop,
because we don't wanna update the timer.

149
00:12:00.509 --> 00:12:04.732
We don't want to do anything
else that's in fixed update, so

150
00:12:04.732 --> 00:12:06.530
it's just an early exit.

151
00:12:06.530 --> 00:12:13.918
So next we want to subtract
the fixed delta time from the timer.

152
00:12:13.918 --> 00:12:16.861
So this is interesting,

153
00:12:16.861 --> 00:12:22.047
we have the timer
variable that we created,

154
00:12:22.047 --> 00:12:28.927
and then we want to Decrease
it by Time.fixedDeltaTime.

155
00:12:28.927 --> 00:12:33.078
So, update and fixed update and

156
00:12:33.078 --> 00:12:39.395
the time class have
a measurement of delta time.

157
00:12:39.395 --> 00:12:45.839
Delta time is how much time has
elapsed since the last update.

158
00:12:45.839 --> 00:12:51.005
So in update,
you can actually use time.Deltatime,

159
00:12:51.005 --> 00:12:56.058
and that's going to give you
how much time has elapsed

160
00:12:56.058 --> 00:13:01.127
in seconds,
since the previous frame was rendered.

161
00:13:01.127 --> 00:13:03.708
In this case, we're in fixed update,

162
00:13:03.708 --> 00:13:08.495
we want the amount of time that's
happened since the last fixed update.

163
00:13:08.495 --> 00:13:13.910
And even though fixed update
is running at a uniform rate,

164
00:13:13.910 --> 00:13:20.219
so maybe we know that exact value,
maybe it's one divided by 50.

165
00:13:20.219 --> 00:13:25.253
If we know that it's running at
a rate of 50 times a second,

166
00:13:25.253 --> 00:13:29.815
really, because this can
change elsewhere in unity.

167
00:13:29.815 --> 00:13:34.744
It's good to just use fixedDeltaTime,
so that we have that exact measurement.

168
00:13:34.744 --> 00:13:37.462
So every fixed update,
its going to subtract

169
00:13:37.462 --> 00:13:41.537
the amount of time that has elapsed
since the last fixed update, and

170
00:13:41.537 --> 00:13:44.412
that's how we're gonna
decrement the timer.

171
00:13:44.412 --> 00:13:49.228
At a consistent rate,
the same rate at which time is

172
00:13:49.228 --> 00:13:53.149
actually passing inside a fixed update.

173
00:13:53.149 --> 00:13:58.360
So, if the timer hits zero.

174
00:14:01.259 --> 00:14:04.515
Then we need to enter the game overstate.

175
00:14:04.515 --> 00:14:09.808
So if timer is less than or equal to zero,

176
00:14:09.808 --> 00:14:16.208
because it could potentially
be less than zero.

177
00:14:16.208 --> 00:14:22.693
Remember it's just subtracting
fixedDeltaTime, so it could go below zero.

178
00:14:22.693 --> 00:14:25.908
So if it's less than or equal to zero,

179
00:14:25.908 --> 00:14:30.232
then we want to call a GameOver method,
all right?

180
00:14:30.232 --> 00:14:33.880
And we wanna set the timer to zero, and

181
00:14:33.880 --> 00:14:38.670
that's just not totally
necessary in this case.

182
00:14:38.670 --> 00:14:45.531
But it's good habit to set your timers to
zero, once they've actually hit the value.

183
00:14:45.531 --> 00:14:49.454
That becomes really important
in areas like animation,

184
00:14:49.454 --> 00:14:53.385
where you might have something
running along an s curve.

185
00:14:53.385 --> 00:14:58.594
You don't want to overshoot its value,
you wanna make sure that once something

186
00:14:58.594 --> 00:15:04.131
has hit zero, less than or equal to zero,
then you're actually setting it to zero.

187
00:15:04.131 --> 00:15:08.614
So that any subsequent code
that's using that timer,

188
00:15:08.614 --> 00:15:11.347
is behaving the way it should be.

189
00:15:11.347 --> 00:15:17.275
So we need to write that GameOver method,
so we'll save void GameOver.

190
00:15:19.763 --> 00:15:26.543
And in GameOver,
we wanna say game IsPlaying = false, and

191
00:15:26.543 --> 00:15:32.652
then Pause the game by setting
the time scale to zero.

192
00:15:32.652 --> 00:15:37.294
So again, we'll say Time.timeScale.

193
00:15:37.294 --> 00:15:41.705
Is zero.

194
00:15:41.705 --> 00:15:46.930
We could have potentially
put these two methods sorry,

195
00:15:46.930 --> 00:15:51.632
these two statements right
here where Game Over is.

196
00:15:51.632 --> 00:15:56.322
But sometimes using methods like this is
nice just for the sake of clarity, so

197
00:15:56.322 --> 00:15:58.858
that we know exactly what's happening.

198
00:15:58.858 --> 00:16:02.399
Where the timer hits zero,
it's calling GameOver.

