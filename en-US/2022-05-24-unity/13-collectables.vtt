WEBVTT

1
00:00:00.000 --> 00:00:01.840
So we'll save that.

2
00:00:01.840 --> 00:00:08.720
And now we need to add that
script component to the player.

3
00:00:08.720 --> 00:00:11.706
So we'll go to the player here.

4
00:00:11.706 --> 00:00:17.540
I'll scroll down to Add Component,
and we'll add this score script.

5
00:00:17.540 --> 00:00:21.340
And right now that's not
going to do anything.

6
00:00:21.340 --> 00:00:24.313
It's not gonna change the functionality
of the game in any way.

7
00:00:24.313 --> 00:00:27.120
But it's something that we'll need later.

8
00:00:27.120 --> 00:00:31.303
So let's keep moving.

9
00:00:31.303 --> 00:00:37.261
Collectibles, we created that tiny sphere
that is going to be our collectible,

10
00:00:37.261 --> 00:00:40.240
but now we need to actually collect it and

11
00:00:40.240 --> 00:00:43.500
then move it around
when it gets collected.

12
00:00:43.500 --> 00:00:44.391
So how are we gonna do that?

13
00:00:44.391 --> 00:00:49.845
Well, when another game
object with a score component

14
00:00:49.845 --> 00:00:55.301
basically intersects with
a collectible component,

15
00:00:55.301 --> 00:00:59.820
it's going to call increment score method.

16
00:00:59.820 --> 00:01:04.367
So when the player or
the opponent runs over that trigger

17
00:01:04.367 --> 00:01:08.818
collider that we created
earlier on the collectible,

18
00:01:08.818 --> 00:01:13.461
it's going to talk to the score
component on the player or

19
00:01:13.461 --> 00:01:19.290
the opponent and call that increment
score method to increase it by 1.

20
00:01:19.290 --> 00:01:23.560
And then after it does that, so
that's this line right here where it says

21
00:01:23.560 --> 00:01:27.495
other.gameobject.get component,
score, increment score.

22
00:01:27.495 --> 00:01:32.237
After that, we need to move the position
of the collectible to a new

23
00:01:32.237 --> 00:01:36.654
location on the game board so
there's a new place to chase it.

24
00:01:36.654 --> 00:01:39.572
And that's what this code is doing here.

25
00:01:39.572 --> 00:01:43.767
So we'll type all of this up in
a second and look at it in more detail.

26
00:01:43.767 --> 00:01:49.100
But one thing I wanted to call out,
and this could be a way that

27
00:01:49.100 --> 00:01:54.445
maybe you could improve upon
this game after completing it.

28
00:01:54.445 --> 00:01:59.387
Is that admittedly spawning
the collectible to a new random position

29
00:01:59.387 --> 00:02:03.816
on the board will sometimes result
in spawns that might just be

30
00:02:03.816 --> 00:02:06.475
directly next to one of the players.

31
00:02:06.475 --> 00:02:11.376
Or in a spot that is maybe,
say, right next

32
00:02:11.376 --> 00:02:16.285
to where the collectible was previously.

33
00:02:16.285 --> 00:02:21.607
So it'll still be on the game board
because we're kind of bounding

34
00:02:21.607 --> 00:02:26.263
that to a range within the board,
but putting it in just any

35
00:02:26.263 --> 00:02:31.320
random spot on the board is not
necessarily the best approach.

36
00:02:31.320 --> 00:02:36.566
I mean, over the time span of a minute
in a game where there's two players

37
00:02:36.566 --> 00:02:41.994
moving around, generally kind of evens
out from a game play perspective.

38
00:02:41.994 --> 00:02:44.341
So it's not a huge deal here.

39
00:02:44.341 --> 00:02:49.489
But one approach to improve this,
and maybe production ready game,

40
00:02:49.489 --> 00:02:55.629
is to have several predefined spawn points
that would be transforms on the board.

41
00:02:55.629 --> 00:03:00.536
And then look at those in a list, and
always choose the spawn point that's

42
00:03:00.536 --> 00:03:05.377
furthest away from all of the parties
that are playing the game, right?

43
00:03:05.377 --> 00:03:08.711
So that's one approach.

44
00:03:08.711 --> 00:03:13.967
You could also just have predefined
spawn positions that you pick randomly.

45
00:03:13.967 --> 00:03:17.344
You could just look at
the position of the players and

46
00:03:17.344 --> 00:03:22.356
actually calculate a distance that's
always a fixed value from all of them.

47
00:03:22.356 --> 00:03:27.564
A lot of ways to do that, but we're just
gonna pick a random spot, it's fine.

48
00:03:27.564 --> 00:03:31.586
So let's go over to Unity and

49
00:03:31.586 --> 00:03:35.446
let's create the script.

50
00:03:35.446 --> 00:03:42.405
So in our scripts folder, I'm going
to again create a new C Sharp script.

51
00:03:42.405 --> 00:03:47.524
And we're gonna call this collectible.

52
00:03:49.422 --> 00:03:53.423
And I will open that up in our editor,

53
00:03:56.682 --> 00:04:00.982
And don't need these
namespaces at the top.

54
00:04:00.982 --> 00:04:07.940
We don't need the update method, but
we are going to use the start method here.

55
00:04:07.940 --> 00:04:12.963
So first, I'm going to create a private

56
00:04:12.963 --> 00:04:19.925
float value called range and
set it to 0.4 as a float.

57
00:04:19.925 --> 00:04:26.142
So the range is going to be the x and
z range, positive and

58
00:04:26.142 --> 00:04:31.716
negative, in which this
collectible can spawn.

59
00:04:31.716 --> 00:04:33.391
Now, why is 0.4?

60
00:04:33.391 --> 00:04:38.831
Well, the game board,
if you recall, is a cube in Unity.

61
00:04:38.831 --> 00:04:44.051
And the cube has a size
of one meter cubed.

62
00:04:44.051 --> 00:04:48.916
And if we're spawning in the positive and
negative x,

63
00:04:48.916 --> 00:04:51.877
and the positive and negative z,

64
00:04:51.877 --> 00:04:57.401
then we actually want that to
be something like, say 0.5.

65
00:04:57.401 --> 00:04:59.150
That's the size of the game board.

66
00:04:59.150 --> 00:05:04.665
We don't want this collectible to spawn at
the very edge of the game board though.

67
00:05:04.665 --> 00:05:06.825
So we wanna set it to 0.4, so

68
00:05:06.825 --> 00:05:10.659
that it's just constrained
a little bit to the board.

69
00:05:10.659 --> 00:05:16.220
So that's where that magical
0.4 number is coming from.

70
00:05:16.220 --> 00:05:22.520
So then I'll create a Vector
3 called start position.

71
00:05:22.520 --> 00:05:28.859
And that's going to be where
the collectible is starting.

72
00:05:28.859 --> 00:05:31.631
And we wanna record that for
when we reset the game.

73
00:05:31.631 --> 00:05:35.810
So when you hit the space bar and reset
the game, we want that original position.

74
00:05:35.810 --> 00:05:42.400
So we'll record the starting position
by recording the transform position.

75
00:05:42.400 --> 00:05:48.709
So this is very similar to what we
did in the rolling movement script.

76
00:05:48.709 --> 00:05:54.211
And then we want another method
that has a return type of void.

77
00:05:54.211 --> 00:06:00.332
And this method is going
to be called onTriggerStay,

78
00:06:00.332 --> 00:06:06.050
and it's going to take
an argument of a collider.

79
00:06:06.050 --> 00:06:09.171
And we'll just call that collider other.

80
00:06:09.171 --> 00:06:15.081
OnTriggerStay is a method
on the mono behavior class,

81
00:06:15.081 --> 00:06:19.971
and it's part of every
game object in Unity.

82
00:06:19.971 --> 00:06:25.834
And onTriggerStay is used to
detect when a trigger collider

83
00:06:25.834 --> 00:06:31.002
is staying inside of this
game object's collider.

84
00:06:31.002 --> 00:06:37.311
So this is the method that's
detecting physics collisions.

85
00:06:37.311 --> 00:06:43.359
I should point out that there's
also onTriggerEnter as a method,

86
00:06:43.359 --> 00:06:46.172
and there's OnTriggerExit.

87
00:06:46.172 --> 00:06:49.986
We're not gonna use those,
but onTriggerEnter and

88
00:06:49.986 --> 00:06:56.054
onTriggerExit allow you to detect when
a collider has entered a trigger collider,

89
00:06:56.054 --> 00:06:59.539
when it first hit it, and
it will trigger once.

90
00:06:59.539 --> 00:07:05.650
And it also detects when a collider
exits a trigger collider.

91
00:07:05.650 --> 00:07:08.232
So why are we using onTriggerStay, right?

92
00:07:08.232 --> 00:07:13.107
Why don't we say onTriggerEnter so
that when it first hits the collectible,

93
00:07:13.107 --> 00:07:15.282
it gets collected and that's it?

94
00:07:15.282 --> 00:07:22.686
Well, it's because of how we're
spawning these randomly, right?

95
00:07:22.686 --> 00:07:25.628
We're spawning these, they could
spawn anywhere on the game board.

96
00:07:25.628 --> 00:07:30.983
And it could potentially spawn inside
of one of the other players, in which

97
00:07:30.983 --> 00:07:36.434
case we want it to just get collected
immediately and spawn somewhere else.

98
00:07:36.434 --> 00:07:39.579
Not really fair in terms of the game,
but for

99
00:07:39.579 --> 00:07:42.726
simplicity that's how we're gonna do it.

100
00:07:42.726 --> 00:07:47.404
So onTriggerStay will avoid kind
of just weird scenarios where it

101
00:07:47.404 --> 00:07:52.010
spawns inside of a player but
doesn't actually get collected.

102
00:07:52.010 --> 00:07:57.801
So, inside of this method we
want to do a couple of things.

103
00:07:57.801 --> 00:07:59.489
I'll write out a comment.

104
00:07:59.489 --> 00:08:04.171
So if the other game object has

105
00:08:04.171 --> 00:08:09.801
a score component, increment it.

106
00:08:09.801 --> 00:08:14.088
So there's this argument here,
collider other.

107
00:08:14.088 --> 00:08:18.524
Other is the collider or
the base class for

108
00:08:18.524 --> 00:08:22.835
colliders, and that's box collider,

109
00:08:22.835 --> 00:08:28.557
sphere colliders, and
that's in Unity this thing.

110
00:08:28.557 --> 00:08:34.040
So on a player there's this
sphere collider, right?

111
00:08:34.040 --> 00:08:38.850
That is actually inheriting from
a parent class called collider.

112
00:08:38.850 --> 00:08:43.588
And so when onTriggerStay
gets triggered by in this

113
00:08:43.588 --> 00:08:46.892
case one of the players in the game,

114
00:08:46.892 --> 00:08:52.637
that other collider is going to
be the player or the opponent.

115
00:08:52.637 --> 00:08:58.710
That's the other, that's the thing
that's colliding with the collectible.

116
00:08:58.710 --> 00:09:03.954
So we want to get other game object.

117
00:09:03.954 --> 00:09:07.535
We wanna get its game object
because we want to look for

118
00:09:07.535 --> 00:09:09.770
components on that game object.

119
00:09:09.770 --> 00:09:13.636
And we're going to call get component and

120
00:09:13.636 --> 00:09:18.173
we're looking for
the score component, okay?

121
00:09:18.173 --> 00:09:21.600
And then we can continue
just chaining these methods.

122
00:09:21.600 --> 00:09:27.027
So once we have the score component,
we want to call that

123
00:09:27.027 --> 00:09:33.037
increment score method that we
wrote in the score component.

124
00:09:33.037 --> 00:09:38.395
So when a player hits the collectible,
it will look for

125
00:09:38.395 --> 00:09:43.416
this other thing that's hitting it,
the player.

126
00:09:43.416 --> 00:09:44.520
It's gonna find its game object.

127
00:09:44.520 --> 00:09:48.250
It's gonna look through its components,
it's gonna find the score component.

128
00:09:48.250 --> 00:09:51.548
And then on the score components
it's calling increment score.

129
00:09:51.548 --> 00:09:54.112
So that all happens in one line.

130
00:09:54.112 --> 00:09:59.593
Then after that's happened,
we wanna move the position

131
00:09:59.593 --> 00:10:06.338
of this collectible to a new random
position within the board bounce.

132
00:10:06.338 --> 00:10:11.521
So we already set what
that range should be, but

133
00:10:11.521 --> 00:10:19.685
we wanna move the transform position
of this game object to a new Vector 3,

134
00:10:19.685 --> 00:10:23.979
we're moving it to a new 3D position.

135
00:10:23.979 --> 00:10:29.440
And we're going to use a function
that will generate a random number.

136
00:10:29.440 --> 00:10:34.281
So we're gonna call random,
which is a class, and

137
00:10:34.281 --> 00:10:37.320
we want to call random.range,

138
00:10:37.320 --> 00:10:42.960
not random.random range,
which is a deprecated method.

139
00:10:42.960 --> 00:10:48.470
So, random.range, okay?

140
00:10:48.470 --> 00:10:54.024
And we want that random range
to be the negative range

141
00:10:54.024 --> 00:10:58.958
that we set and
the positive range that we set.

142
00:10:58.958 --> 00:11:02.839
So that's going to create an x value for

143
00:11:02.839 --> 00:11:11.436
this Vector 3 that is somewhere between
negative 0.4 and positive 0.4, okay?

144
00:11:11.436 --> 00:11:13.796
So what about the y position?

145
00:11:13.796 --> 00:11:17.443
So I typed a comma there and
I went on to the next line here.

146
00:11:17.443 --> 00:11:19.170
Where should we put the y?

147
00:11:19.170 --> 00:11:25.004
Well, we already have
the starting position.

148
00:11:25.004 --> 00:11:31.946
We could put it there, but the y position
of this is never really going to move.

149
00:11:31.946 --> 00:11:38.954
So we can just call transform.position.y,
and just use the one that we already have.

150
00:11:38.954 --> 00:11:43.803
It's the same thing really because,
again, that y isn't going to move.

151
00:11:43.803 --> 00:11:48.638
So finally, for
the z position, same thing.

152
00:11:48.638 --> 00:11:51.749
I'm just gonna copy and

153
00:11:51.749 --> 00:11:57.815
paste what we have in x and
put it there in the z,

154
00:11:57.815 --> 00:12:03.105
because we want that same random range of

155
00:12:03.105 --> 00:12:08.418
-0.4 to + 0.4 but in the z space.

156
00:12:08.418 --> 00:12:11.600
So there's one more
method we need to write.

157
00:12:11.600 --> 00:12:16.427
We need to be able to reset the position
of the collectible whenever we might need

158
00:12:16.427 --> 00:12:18.673
to, such as when the game restarts.

159
00:12:18.673 --> 00:12:22.918
So I'll create another method
here with a return type of void,

160
00:12:22.918 --> 00:12:25.331
because this is going to be public.

161
00:12:25.331 --> 00:12:30.483
Because this is going to
need be called when we have

162
00:12:30.483 --> 00:12:36.012
input such as hitting
the spacebar to reset the game.

163
00:12:36.012 --> 00:12:40.974
And we'll set the transform
position to the start position.

164
00:12:40.974 --> 00:12:45.846
So you'll notice that this is the same
type of pattern that we used in

165
00:12:45.846 --> 00:12:47.303
rolling movement.

166
00:12:47.303 --> 00:12:51.072
We get the start position in start,

167
00:12:51.072 --> 00:12:55.981
then we reset the position
in reset position.

168
00:12:55.981 --> 00:12:57.960
And reset position by the way,

169
00:12:57.960 --> 00:13:03.140
that is not a special method name that's
on mono behavior or anything like that,

170
00:13:03.140 --> 00:13:07.649
that's just what we call, but
that method could be called anything.

171
00:13:07.649 --> 00:13:13.285
So there is the collectible script.

172
00:13:13.285 --> 00:13:20.821
I'm gonna save that, and
we need to apply it to the collectible.

173
00:13:20.821 --> 00:13:23.040
So I'm gonna switch back to Unity.

174
00:13:26.071 --> 00:13:30.363
And on the collectible theme object,

175
00:13:30.363 --> 00:13:37.212
I'm gonna hit Add Component and
I'll type in collectible.

176
00:13:37.212 --> 00:13:39.135
And it will add that script.

177
00:13:39.135 --> 00:13:44.519
There's not really anything on that
script that we need to modify.

178
00:13:44.519 --> 00:13:46.672
So we can just leave that as is.

179
00:13:46.672 --> 00:13:52.162
And now when we hit the play button and
we roll around, we should be able to

180
00:13:52.162 --> 00:13:57.657
collect this and the collectible
should spawn to a new random position.

181
00:13:57.657 --> 00:14:03.660
And theoretically on the player component
this is incrementing the score value,

182
00:14:03.660 --> 00:14:06.706
but we don't have any way to see that yet.

183
00:14:06.706 --> 00:14:12.040
That's where UI is gonna come in and
allow us to actually see what's going on.

184
00:14:12.040 --> 00:14:15.836
But that's what the game
should look like right now.

185
00:14:15.836 --> 00:14:22.766
One thing I did not mention earlier that
is really cool about working in Unity,

186
00:14:22.766 --> 00:14:28.663
is that you can modify inspector
values while the game is running.

187
00:14:28.663 --> 00:14:31.704
So on the player game object,

188
00:14:31.704 --> 00:14:36.938
you'll recall that we do
have this speed value that

189
00:14:36.938 --> 00:14:42.063
we can adjust in the rolling
movement component.

190
00:14:42.063 --> 00:14:49.645
If I set that to something like 0,
sorry, if I set that something like 2,

191
00:14:49.645 --> 00:14:54.676
instead of 1,
the player will move twice as fast.

192
00:14:54.676 --> 00:15:00.012
If I set that to something like 0.1,
the player is going to move

193
00:15:00.012 --> 00:15:05.555
really slowly because it's
multiplying by that movement factor.

194
00:15:05.555 --> 00:15:09.405
But you'll notice at no point
did I stop playing the game and

195
00:15:09.405 --> 00:15:11.800
I was able to just modify that value.

196
00:15:11.800 --> 00:15:16.774
Something that's really important about
serialized values in the inspector when

197
00:15:16.774 --> 00:15:18.337
you're modifying them,

198
00:15:18.337 --> 00:15:22.328
is that they will not be saved when
you come out of play mode, okay?

199
00:15:22.328 --> 00:15:25.210
I'm gonna say that one more
time cuz it's so important.

200
00:15:25.210 --> 00:15:29.758
So I modified this value,
originally it was 1.

201
00:15:29.758 --> 00:15:34.720
I can change it to anything else like 2
and make the player move really quickly.

202
00:15:34.720 --> 00:15:39.459
But if I hit the play button again,
it's going to lose that value.

203
00:15:39.459 --> 00:15:41.000
It's gonna go back to the default.

204
00:15:41.000 --> 00:15:45.630
So if I hit play again,
you'll see that that speed value is now 1.

205
00:15:45.630 --> 00:15:49.204
So that's very important
when you're tuning the game.

206
00:15:49.204 --> 00:15:51.813
If there's values that
you wanna change and

207
00:15:51.813 --> 00:15:55.975
you're kind of experimenting with
things while the game is running,

208
00:15:55.975 --> 00:15:59.097
you wanna make sure that
you're writing that down.

209
00:15:59.097 --> 00:16:04.523
Or copying and pasting those numbers,
or something like that, and saving them.

210
00:16:04.523 --> 00:16:08.692
There are a lot more advanced and
sophisticated workflows and

211
00:16:08.692 --> 00:16:11.911
architectures that you
can work within Unity.

212
00:16:11.911 --> 00:16:16.570
One of them is called scriptable objects,
where you can save assets on disk and

213
00:16:16.570 --> 00:16:20.959
that kind of like play mode thing
where it resets values doesn't happen.

214
00:16:20.959 --> 00:16:24.410
But that is kind of
beyond the scope of this.

215
00:16:24.410 --> 00:16:27.061
Generally speaking,
when you're changing inspector values,

216
00:16:27.061 --> 00:16:29.960
they're going to go back to the defaults
when you come out of play mode.

