WEBVTT

1
00:00:00.270 --> 00:00:03.628
&gt;&gt; Brian Holt: Let's talk about
the status thing here for a second.

2
00:00:06.957 --> 00:00:10.310
&gt;&gt; Brian Holt: This game has a very,
very predictable flow, right?

3
00:00:10.310 --> 00:00:12.390
You have a mole that is gone.

4
00:00:12.390 --> 00:00:15.030
Then at some point,
a mole is going to show up and be hungry.

5
00:00:15.030 --> 00:00:17.960
And then, the mole is going
to be sad after it's not fed.

6
00:00:17.960 --> 00:00:19.370
And then, it goes back to gone.

7
00:00:19.370 --> 00:00:21.570
And it's just a big circle, right?

8
00:00:21.570 --> 00:00:24.690
It predictably does the same
thing every single time.

9
00:00:24.690 --> 00:00:29.230
The only variance in there is how
long those things take, right?

10
00:00:29.230 --> 00:00:34.755
But 100% of the time, if the game is
just left to run on its own device,

11
00:00:34.755 --> 00:00:38.248
it just goes from gone to
hungry to sad to gone.

12
00:00:39.642 --> 00:00:40.442
&gt;&gt; Brian Holt: Well, leaving, right?

13
00:00:40.442 --> 00:00:42.960
There's also like the mole part as well,
right?

14
00:00:42.960 --> 00:00:48.609
So it's gone to hungry to
sad to leaving to gone.

15
00:00:48.609 --> 00:00:52.470
And then it just infinitely
repeats that loop.

16
00:00:52.470 --> 00:00:56.760
Now, there's one fork in logic is
what happens if the user clicks

17
00:00:56.760 --> 00:00:57.820
on the mole, right?

18
00:00:57.820 --> 00:01:02.540
Then it goes from hungry
to fed to leaving to gone.

19
00:01:02.540 --> 00:01:06.887
And then it goes back to
the other cycle of going, right?

20
00:01:06.887 --> 00:01:10.200
And let's just talk about, so
this is hungry right here, right?

21
00:01:11.780 --> 00:01:12.530
That's hungry.

22
00:01:13.720 --> 00:01:15.210
That's sad, right there.

23
00:01:16.460 --> 00:01:17.730
That's leaving.

24
00:01:17.730 --> 00:01:19.620
And then, gone is an empty hole, right?

25
00:01:20.940 --> 00:01:25.240
So that's what this status thing here
is for, it's for us to keep track.

26
00:01:25.240 --> 00:01:31.540
Because this is predictable,
I can say if the sad interval comes up,

27
00:01:31.540 --> 00:01:35.830
right, so if that two seconds pass,
I know that if status is sad,

28
00:01:35.830 --> 00:01:40.180
I know the next status is
going to be leaving, right?

29
00:01:40.180 --> 00:01:43.080
And then, it's gonna get a new
interval for when the next is.

30
00:01:43.080 --> 00:01:48.880
And then, after the leaving interval is
up, then it's gonna go to gone, right?

31
00:01:48.880 --> 00:01:52.550
So that's how we're using the status and
next things together, right?

32
00:01:52.550 --> 00:01:54.880
Because this game, like I said,
there's no variance.

33
00:01:54.880 --> 00:01:56.290
It's very, very predictable.

34
00:01:57.740 --> 00:02:00.800
So that's what status is going to mean for
us.

35
00:02:00.800 --> 00:02:02.680
We're gonna ignore king for now.

36
00:02:02.680 --> 00:02:06.778
We'll work on that later cuz
that's kind of like secondary.

37
00:02:06.778 --> 00:02:09.375
We're kind of going for
the minimum viable product right now.

38
00:02:11.514 --> 00:02:15.867
&gt;&gt; Brian Holt: So that's one, that's two.

39
00:02:18.508 --> 00:02:19.815
&gt;&gt; Brian Holt: That's three.

40
00:02:20.895 --> 00:02:23.454
&gt;&gt; Brian Holt: Well, let's make sure
that these are actually getting called.

41
00:02:29.176 --> 00:02:30.141
&gt;&gt; Brian Holt: Four.

42
00:02:39.175 --> 00:02:40.192
&gt;&gt; Brian Holt: Five.

43
00:02:42.793 --> 00:02:46.270
&gt;&gt; Brian Holt: I can type.

44
00:02:46.270 --> 00:02:49.423
Thank you.
That would have been a fun bug to find.

45
00:02:51.729 --> 00:02:52.683
&gt;&gt; Brian Holt: Seven.

46
00:02:55.218 --> 00:02:56.111
&gt;&gt; Brian Holt: Eight.

47
00:02:59.440 --> 00:03:01.145
&gt;&gt; Brian Holt: Nine.

48
00:03:01.145 --> 00:03:05.644
So now, I have a list of
all of these various moles.

49
00:03:08.096 --> 00:03:09.814
&gt;&gt; Brian Holt: And
I probably should go through

50
00:03:11.103 --> 00:03:12.011
&gt;&gt; Brian Holt: Well, whatever,

51
00:03:12.011 --> 00:03:13.039
this is fine for now.

52
00:03:18.745 --> 00:03:21.283
&gt;&gt; Brian Holt: But I have a generic
representation of all these different

53
00:03:21.283 --> 00:03:22.990
moles, right?

54
00:03:22.990 --> 00:03:25.094
I have how long they should stay sad.

55
00:03:25.094 --> 00:03:29.342
And then later,
I'm going to convert them to be gone.

56
00:03:35.011 --> 00:03:37.304
&gt;&gt; Brian Holt: Okay, so

57
00:03:44.624 --> 00:03:48.420
&gt;&gt; Brian Holt: Let's start
going over time, right?

58
00:03:48.420 --> 00:03:53.593
If you remember previously,
we talked about setInterval and

59
00:03:53.593 --> 00:03:56.586
requestAnimationFrame, right?

60
00:03:56.586 --> 00:04:00.305
So let's just have
a brief recap about that.

61
00:04:02.938 --> 00:04:03.929
&gt;&gt; Brian Holt: That's a cute dog.

62
00:04:07.383 --> 00:04:11.680
&gt;&gt; Brian Holt: So let's do
Front End Masters [INAUDIBLE] Boot Camp.

63
00:04:11.680 --> 00:04:17.110
Going back to the game here,
the Feed-A-Star-Mole.

64
00:04:19.691 --> 00:04:24.274
&gt;&gt; Brian Holt: So this mole's going back
and forth between happy and sad, right?

65
00:04:24.274 --> 00:04:27.388
And let's take a look
at how it's doing that.

66
00:04:27.388 --> 00:04:29.253
&gt;&gt; Brian Holt: Or
do I have request animation frame up here?

67
00:04:29.253 --> 00:04:30.630
This is the one I want to look at.

68
00:04:30.630 --> 00:04:35.750
Okay, so we have setInterval right here,
and requestAnimationFrame.

69
00:04:35.750 --> 00:04:38.090
You can choose which one of these
that you wanna do for your game.

70
00:04:38.090 --> 00:04:41.074
I would say that the superior approach,
in my opinion,

71
00:04:41.074 --> 00:04:43.370
is gonna be with requestAnimationFrame.

72
00:04:43.370 --> 00:04:47.243
I'm going to say that the simpler
solution is with setInterval.

73
00:04:48.375 --> 00:04:49.962
&gt;&gt; Brian Holt: So
I leave that to your judgment of which

74
00:04:49.962 --> 00:04:51.890
one that you actually wanna do.

75
00:04:51.890 --> 00:04:54.600
Together, we're gonna do
requestAnimationFrame, okay?

76
00:04:56.360 --> 00:04:58.760
So setInterval right here.

77
00:04:58.760 --> 00:05:02.310
This is a function that allows you
to run the same function every

78
00:05:02.310 --> 00:05:04.160
x amount of milliseconds.

79
00:05:04.160 --> 00:05:10.940
So in this case right here, every 1,000
milliseconds, every one second, right?

80
00:05:10.940 --> 00:05:13.373
We're doing interval count plus plus, and

81
00:05:13.373 --> 00:05:16.602
then we're setting the value
of that right here, right?

82
00:05:20.364 --> 00:05:23.071
&gt;&gt; Brian Holt: Here,
with requestAnimationFrame,

83
00:05:23.071 --> 00:05:30.537
basically what we're doing is we're saying
&gt;&gt; Brian Holt: Right here,

84
00:05:30.537 --> 00:05:33.590
next time the browser is idle,
run this function.

85
00:05:35.938 --> 00:05:39.577
&gt;&gt; Brian Holt: Then, what I'm doing here,
is I'm saying if it hasn't been a second,

86
00:05:39.577 --> 00:05:41.300
then don't do anything.

87
00:05:41.300 --> 00:05:43.165
If it's been a second,
then go ahead and do it again.

88
00:05:43.165 --> 00:05:47.426
Cuz you can see here, run again at, I'm
saying date plus now plus 1,000, right?

89
00:05:47.426 --> 00:05:52.600
So I'm saying 1,000 milliseconds in
the future, then run this again.

90
00:05:52.600 --> 00:06:01.377
If I don't do this check,
&gt;&gt; Brian Holt: Let's just put that here.

91
00:06:04.316 --> 00:06:05.114
&gt;&gt; Brian Holt: Console.

92
00:06:08.904 --> 00:06:11.016
&gt;&gt; Brian Holt: Now, you can see,
if I don't put that check there,

93
00:06:11.016 --> 00:06:12.780
this runs actually quite frequently.

94
00:06:12.780 --> 00:06:14.212
I think I showed this to you before,
right?

95
00:06:16.329 --> 00:06:19.276
&gt;&gt; Brian Holt: So that's why you do this
check because you wanna say if it hasn't

96
00:06:19.276 --> 00:06:22.503
been 1,000 milliseconds,
then don't run this function again.

