WEBVTT

1
00:00:00.410 --> 00:00:02.210
&gt;&gt; Speaker 1: Is it supposed to
be an infinite loop right now?

2
00:00:03.560 --> 00:00:05.813
&gt;&gt; Brian Holt: It's kind of like
a slow moving infinite loop.

3
00:00:05.813 --> 00:00:07.457
&gt;&gt; Speaker 1: Okay.
&gt;&gt; Brian Holt: That's the point.

4
00:00:07.457 --> 00:00:07.957
Yeah.

5
00:00:09.710 --> 00:00:12.640
&gt;&gt; Speaker 1: And there's really no better
way in JavaScript to just say run this

6
00:00:12.640 --> 00:00:14.980
function every hundred milliseconds?

7
00:00:14.980 --> 00:00:17.664
&gt;&gt; Brian Holt: There is, and so
this is where we're looking forward,

8
00:00:17.664 --> 00:00:18.813
which is setInterval.

9
00:00:18.813 --> 00:00:19.529
&gt;&gt; Speaker 1: Yeah.

10
00:00:35.333 --> 00:00:37.191
&gt;&gt; Brian Holt: So you can see there.

11
00:00:37.191 --> 00:00:38.282
&gt;&gt; Speaker 1: That make sense.

12
00:00:40.817 --> 00:00:42.745
&gt;&gt; Brian Holt: But
the problem with this, this is simpler,

13
00:00:42.745 --> 00:00:45.500
in the sense that this
code is easier to read.

14
00:00:45.500 --> 00:00:52.940
But the problem with this is that
it's a very blunt instrument, right?

15
00:00:52.940 --> 00:00:55.110
It's going to interrupt whatever
your browser was doing, It's like,

16
00:00:55.110 --> 00:00:57.100
no, this has to run right now.

17
00:00:57.100 --> 00:01:00.960
&gt;&gt; Speaker 3: If you go to another tab,
with this set like that.

18
00:01:00.960 --> 00:01:02.670
&gt;&gt; Brian Holt: It still runs.
&gt;&gt; Speaker 3: It's still using up

19
00:01:02.670 --> 00:01:03.470
memory, right?

20
00:01:03.470 --> 00:01:06.225
&gt;&gt; Brian Holt: Yeah, it's still making
requests and doing all that kinda stuff.

21
00:01:06.225 --> 00:01:07.549
&gt;&gt; Speaker 3: requestAnimation
would not be, right?

22
00:01:07.549 --> 00:01:08.437
&gt;&gt; Brian Holt: Paused.
Yeah, so

23
00:01:08.437 --> 00:01:11.330
the requestAnimationFrame will
pause when you go to another tab.

24
00:01:12.720 --> 00:01:14.860
Which is another advantage, right?

25
00:01:14.860 --> 00:01:20.916
So, if you have some battery,
on the laptop, this is gonna burn battery.

26
00:01:20.916 --> 00:01:23.915
&gt;&gt; Speaker 3: I have 50 instances
of this game going cuz I like it so

27
00:01:23.915 --> 00:01:25.790
much and would be better to have.

28
00:01:25.790 --> 00:01:27.640
&gt;&gt; Brian Holt: You're a real gaming man.

29
00:01:27.640 --> 00:01:28.376
&gt;&gt; [LAUGH].
&gt;&gt; Speaker 3: What's that?

30
00:01:28.376 --> 00:01:29.101
&gt;&gt; Brian Holt: I said you're a real gamer.

31
00:01:29.101 --> 00:01:31.734
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 1: Good explanations,

32
00:01:31.734 --> 00:01:33.776
it's just it's frustrating again.

33
00:01:33.776 --> 00:01:36.424
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: Yeap, this is a lot newer

34
00:01:36.424 --> 00:01:42.308
approach than this, we didn't use
to have requestAnimationFrame,

35
00:01:42.308 --> 00:01:47.890
this is what you'd call a very hot
code path, cuz it gets run very,

36
00:01:47.890 --> 00:01:52.775
very frequently and so
you have to be a little bit more aware

37
00:01:52.775 --> 00:01:57.700
of the performance profile
of what you're doing.

38
00:01:57.700 --> 00:02:00.339
&gt;&gt; Speaker 1: And
you can't just say requestAnimationFrame,

39
00:02:00.339 --> 00:02:01.982
every hundred milliseconds?

40
00:02:01.982 --> 00:02:02.580
&gt;&gt; Brian Holt: No.

41
00:02:05.323 --> 00:02:07.628
&gt;&gt; Speaker 1: So, do we need that for
loop for anything,

42
00:02:07.628 --> 00:02:09.559
that you could have mentioned out?

43
00:02:09.559 --> 00:02:10.671
&gt;&gt; Brian Holt: We do.
&gt;&gt; Speaker 1: You're still writing.

44
00:02:10.671 --> 00:02:11.840
&gt;&gt; Brian Holt: Well,
yeah we're gonna get there.

45
00:02:18.994 --> 00:02:23.430
&gt;&gt; Brian Holt: So maybe, just for
one more time to hammer it home.

46
00:02:23.430 --> 00:02:26.971
Maybe it's useful to say, console.log.

47
00:02:29.913 --> 00:02:31.740
&gt;&gt; Brian Holt: This is gonna
log a lot of stuff out.

48
00:02:31.740 --> 00:02:37.987
So, we're gonna do console.log
now,and runAgainAt.

49
00:02:39.521 --> 00:02:43.674
&gt;&gt; Brian Holt: So this is about to log
a bunch of stuff, but let's try it.

50
00:02:46.435 --> 00:02:50.760
&gt;&gt; Brian Holt: So
let's just look at one of these, right?

51
00:02:52.190 --> 00:02:55.190
So the first one is now and
the second one is runAgainAt.

52
00:02:55.190 --> 00:02:58.670
So you can see here,
over time now is advancing, right?

53
00:03:00.534 --> 00:03:05.240
But, runAgainAt is staying the same
number over time until eventually,

54
00:03:05.240 --> 00:03:10.210
we're going to get down to somewhere else
and then it changes when runAgainAt,

55
00:03:10.210 --> 00:03:11.400
gets surpassed, right?

56
00:03:12.430 --> 00:03:17.084
And then runAgainAt stay static for
a while, whereas data now

57
00:03:17.084 --> 00:03:22.020
changes every single time that
you call it and then here, right?

58
00:03:23.300 --> 00:03:25.936
Then it gets updated again,
the runAgainAt and so

59
00:03:25.936 --> 00:03:28.761
that's you can see data now
progressing over time and

60
00:03:28.761 --> 00:03:32.615
then runAgainAt is only getting
updated every a hundred milliseconds.

61
00:03:32.615 --> 00:03:33.617
Is that helpful?

62
00:03:35.150 --> 00:03:36.125
&gt;&gt; Speaker 1: One more time,

63
00:03:36.125 --> 00:03:40.252
the constant now that we defined
represents that second number.

64
00:03:42.244 --> 00:03:42.865
&gt;&gt; Brian Holt: Yep.

65
00:03:42.865 --> 00:03:44.296
&gt;&gt; Speaker 1: Represents.
&gt;&gt; Brian Holt: No, that's the first one,

66
00:03:44.296 --> 00:03:45.026
this one all right?

67
00:03:45.026 --> 00:03:45.940
Now.
&gt;&gt; Speaker 1: Yes,

68
00:03:45.940 --> 00:03:46.556
&gt;&gt; Brian Holt: It's this one,

69
00:03:46.556 --> 00:03:47.310
the one on the left.

70
00:03:49.746 --> 00:03:53.220
&gt;&gt; Brian Holt: The only reason I did this
where I said Date.now up here, is that I

71
00:03:53.220 --> 00:03:57.860
have to reference Date.now several times
in here and calling Date.now isn't free.

72
00:03:57.860 --> 00:03:59.190
It's cheap, but it's not free.

73
00:04:00.210 --> 00:04:03.197
So you could totally just put
Date.now here at several places.

74
00:04:07.777 --> 00:04:10.530
&gt;&gt; Speaker 1: So runAgainAt is, okay.

75
00:04:10.530 --> 00:04:13.248
&gt;&gt; Brian Holt: That one is getting
held static cuz that's why

76
00:04:13.248 --> 00:04:17.370
we're setting it right here, and
we only set it again inside of here.

77
00:04:17.370 --> 00:04:22.255
&gt;&gt; Speaker 3: Which means don't do this
thing again until 100 milliseconds have

78
00:04:22.255 --> 00:04:23.580
happened.

79
00:04:23.580 --> 00:04:24.320
&gt;&gt; Brian Holt: Precisely.

80
00:04:24.320 --> 00:04:26.860
&gt;&gt; Speaker 3: Figured, think of it as
one second to do something if you did

81
00:04:26.860 --> 00:04:27.860
1000 milliseconds?

82
00:04:27.860 --> 00:04:28.360
&gt;&gt; Brian Holt: Yep.

83
00:04:30.544 --> 00:04:32.802
&gt;&gt; Brian Holt: So
the funny thing if we did it this way,

84
00:04:32.802 --> 00:04:35.820
these are likely gonna be
three different numbers.

85
00:04:38.130 --> 00:04:41.775
&gt;&gt; Brian Holt: Cuz, if you call Date.now
you're getting the current time,

86
00:04:41.775 --> 00:04:43.510
they might be the same thing.

87
00:04:45.300 --> 00:04:50.101
It depends on how fast your computer
really is and several other things, but

88
00:04:50.101 --> 00:04:51.085
how busy it is?

89
00:04:51.085 --> 00:04:54.480
Anyway, that's why I do just
pulling it out here at the front.

90
00:04:56.280 --> 00:04:58.374
&gt;&gt; Speaker 3: If you do it that way
then there for sure the same, right?

91
00:04:59.550 --> 00:05:02.420
&gt;&gt; Brian Holt: Yeah,
not that it particularly matters, right?

92
00:05:02.420 --> 00:05:04.027
It's all fuzzy math here.

93
00:05:06.046 --> 00:05:06.840
&gt;&gt; Speaker 3: It's JavaScript.

94
00:05:08.120 --> 00:05:08.743
&gt;&gt; Brian Holt: That's fair.

95
00:05:08.743 --> 00:05:11.413
[CROSSTALK] Assertion a level.

96
00:05:11.413 --> 00:05:12.099
&gt;&gt; [LAUGH].

97
00:05:12.099 --> 00:05:16.118
&gt;&gt; Brian Holt: Okay, so now that I'm
guaranteeing that's it I'm only running

98
00:05:16.118 --> 00:05:18.720
this every hundred milliseconds.

99
00:05:18.720 --> 00:05:21.280
And feel free to like play
with this timing right?

100
00:05:21.280 --> 00:05:25.760
You can make it run like every 10,
you can make it run every second.

101
00:05:25.760 --> 00:05:28.584
It just depends on how frequently
you want the game to update itself.

102
00:05:31.451 --> 00:05:35.464
&gt;&gt; Brian Holt: So what I'm going to do is
I have all these mole objects that have

103
00:05:35.464 --> 00:05:36.990
a next in here, right?

104
00:05:36.990 --> 00:05:40.441
So we're gonna check that kind of
the same thing before I'm gonna say,

105
00:05:40.441 --> 00:05:44.700
if it's time for this mole, update itself,
then run its update function.

106
00:05:44.700 --> 00:05:47.051
Otherwise, don't do anything.

107
00:05:50.106 --> 00:05:54.213
&gt;&gt; Brian Holt: So here for let i,
I'm gonna come in here and

108
00:05:54.213 --> 00:05:56.885
I'm gonna say if moles of i,

109
00:05:59.333 --> 00:06:03.382
&gt;&gt; Brian Holt: i is less than mole.length.

110
00:06:07.273 --> 00:06:08.536
&gt;&gt; Brian Holt: i++.

111
00:06:10.014 --> 00:06:10.931
&gt;&gt; Brian Holt: What am I doing here?

112
00:06:10.931 --> 00:06:13.090
That's the for loop.

113
00:06:13.090 --> 00:06:17.974
Sorry, moles.next, starting over it now.

114
00:06:19.406 --> 00:06:20.971
&gt;&gt; Brian Holt: So,
I'm gonna run if statement here.

115
00:06:22.380 --> 00:06:27.841
&gt;&gt; Brian Holt: If moles[i].next,
&gt;&gt; Brian Holt: Is less than now,

116
00:06:27.841 --> 00:06:31.520
or less than or
equal to now since we'll be consistent.

117
00:06:32.892 --> 00:06:36.732
&gt;&gt; Brian Holt: Then we're gonna run
some function called getNextStatus.

118
00:06:38.626 --> 00:06:39.748
&gt;&gt; Brian Holt: Of moles of i.

119
00:06:46.830 --> 00:06:50.236
&gt;&gt; Brian Holt: So all this is saying, it's
going over every single mole that's in

120
00:06:50.236 --> 00:06:53.360
the array and it's saying hey,
is it your time to update yet?

121
00:06:53.360 --> 00:06:56.360
If it says no, then it's cool,
I'm gonna check the next one.

122
00:06:56.360 --> 00:06:58.328
If It's time for
it update then it's gonna go through and

123
00:06:58.328 --> 00:07:01.060
it's gonna go through that pattern
that we were talking to, right.

124
00:07:01.060 --> 00:07:03.480
If it's hungry, then it's gonna go to sad.

125
00:07:03.480 --> 00:07:04.940
If it's sad, it's gonna go to leaving.

126
00:07:04.940 --> 00:07:06.560
If it's leaving, it's gonna go to gone.

127
00:07:06.560 --> 00:07:08.897
And if it's gone,
it's going to go to hungry.

128
00:07:11.565 --> 00:07:15.490
&gt;&gt; Brian Holt: We'll have a separate
code path for feeding one, right?

129
00:07:15.490 --> 00:07:19.290
If someone actually successfully click,
someone, but we'll get there momentarily.

