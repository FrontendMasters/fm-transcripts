WEBVTT

1
00:00:00.000 --> 00:00:03.711
[MUSIC]

2
00:00:03.711 --> 00:00:06.760
&gt;&gt; Douglas Crockford: So saying that we
couldn't resist adding some new syntax.

3
00:00:08.810 --> 00:00:10.878
We did it not too much and

4
00:00:10.878 --> 00:00:16.882
I'll warn you all of these are fatal
errors in browsers before IE 9,

5
00:00:16.882 --> 00:00:21.870
so if you're still on IE 8
please ignore the following.

6
00:00:21.870 --> 00:00:25.478
So we added trailing
commas to object literals,

7
00:00:25.478 --> 00:00:30.150
which is not useful,
I don't recommend you use it.

8
00:00:30.150 --> 00:00:34.165
The reason we did that was because we
fixed the way trailing commas worked in

9
00:00:34.165 --> 00:00:35.129
array literals.

10
00:00:35.129 --> 00:00:39.133
It turns out arrays always
allowed that dangling comma but

11
00:00:39.133 --> 00:00:41.455
they disagreed on what it meant.

12
00:00:41.455 --> 00:00:45.140
On some browsers that array
would have a length of two.

13
00:00:45.140 --> 00:00:48.382
On IE browsers it had a length of three.

14
00:00:48.382 --> 00:00:53.007
When you have that kind of disparity
bugs can happen so we changed it so

15
00:00:53.007 --> 00:00:56.117
the rule is now the dangling
comma is ignored so

16
00:00:56.117 --> 00:00:59.420
everybody will agree that
it has a length of two.

17
00:01:00.630 --> 00:01:02.940
We fixed a terrible reserved word policy.

18
00:01:02.940 --> 00:01:07.460
JavaScript's original reserved
word policy said that

19
00:01:07.460 --> 00:01:12.070
you could not have a reserved word in
name position, in an object literal or

20
00:01:12.070 --> 00:01:15.980
in dot position and
there's is no reason for that.

21
00:01:18.230 --> 00:01:19.078
We fixed that.

22
00:01:19.078 --> 00:01:23.290
So everything that's yellow now used
to be an error, that's all now okay.

23
00:01:25.850 --> 00:01:26.400
So that's good.

24
00:01:27.610 --> 00:01:32.680
In fact the reason that JSON
requires quotes around its

25
00:01:32.680 --> 00:01:36.248
names was because of this
design problem in ES3.

26
00:01:38.910 --> 00:01:40.352
We added getters and setters.

27
00:01:40.352 --> 00:01:45.235
These are accessor properties, so
that when you go to retrieve a value

28
00:01:45.235 --> 00:01:50.116
from an object or go to store a value
into an object, instead a function

29
00:01:50.116 --> 00:01:55.930
will be called which will either
consume your value or return a value.

30
00:01:55.930 --> 00:01:58.750
And that allows some new
forms of programming.

31
00:01:58.750 --> 00:02:03.012
So here we've got a temperature
constructor which has a celsius property

32
00:02:03.012 --> 00:02:05.230
and a fahrenheit property.

33
00:02:05.230 --> 00:02:08.490
You can read either one and
you can set either one.

34
00:02:10.000 --> 00:02:12.530
You don't know how it works but
it just works.

35
00:02:12.530 --> 00:02:13.570
That's a pretty nifty thing.

36
00:02:14.570 --> 00:02:19.290
Now turns out you can do some really
stupid stuff with this because

37
00:02:20.590 --> 00:02:24.420
if you use this correctly,
then these methods will be very limited,

38
00:02:24.420 --> 00:02:28.300
very restricted in what they do, but
there is no actual restriction on them.

39
00:02:28.300 --> 00:02:29.140
They can do anything.

40
00:02:29.140 --> 00:02:34.680
They can change everything
in the world and so you can

41
00:02:34.680 --> 00:02:39.340
simply by reading a property of an object
you can cause things to happen over there.

42
00:02:39.340 --> 00:02:41.510
I don't recommend you do
that because it's stupid.

43
00:02:43.350 --> 00:02:45.250
I'm sure somebody is gonna do that and
they're gonna,

44
00:02:45.250 --> 00:02:49.360
I bet nobody thought that you could
do that, and will go and do that.

45
00:02:49.360 --> 00:02:52.420
We actually did think about that,
just hoping nobody does that.

46
00:02:54.150 --> 00:02:56.690
Earlier, we talked about
the multiline string literals,

47
00:02:56.690 --> 00:02:58.125
I still think this was a mistake.

48
00:03:00.257 --> 00:03:01.285
&gt;&gt; Douglas Crockford: This is great.

49
00:03:01.285 --> 00:03:05.888
So it used to be infinity, NaN and
undefined were not constants,

50
00:03:05.888 --> 00:03:10.502
they were global variables,
which meant you could change them.

51
00:03:10.502 --> 00:03:13.575
You could say today infinity is five,
let's see what happens.

52
00:03:13.575 --> 00:03:18.395
&gt;&gt; [LAUGH]
&gt;&gt; Douglas Crockford: I know that security

53
00:03:18.395 --> 00:03:22.112
experts were very worried about
someone redefining undefined, and

54
00:03:22.112 --> 00:03:24.300
what the consequences of that could be.

55
00:03:24.300 --> 00:03:27.470
I'm not aware of any exploits that
actually happened as a result of that, but

56
00:03:27.470 --> 00:03:29.860
it is something that was worried about.

57
00:03:29.860 --> 00:03:32.143
So they are now read only variables.

58
00:03:32.143 --> 00:03:35.712
So [SOUND] now that's fixed.

59
00:03:35.712 --> 00:03:36.973
We fixed parseInt so

60
00:03:36.973 --> 00:03:41.850
that it no longer defaults to octal
when the first character is zero.

61
00:03:41.850 --> 00:03:44.900
I still recommend putting in
the radix argument anyway but

62
00:03:44.900 --> 00:03:48.805
at least the least the default behavior
is not nearly as bad as it had been.

63
00:03:50.625 --> 00:03:54.545
Regular expression literals now will
produce a new regular expression

64
00:03:54.545 --> 00:03:58.875
object every time they're evaluated, so
they work the same way that functions do.

65
00:03:58.875 --> 00:04:02.875
The reason we did that,
originally the compiler would only create

66
00:04:02.875 --> 00:04:06.050
one regular expression object for
each regular expression literal.

67
00:04:06.050 --> 00:04:09.290
And the problem with that is,
that they contain state.

68
00:04:09.290 --> 00:04:12.310
For example they contain a last,

69
00:04:14.300 --> 00:04:17.790
what was it last position or
last, anybody remember?

70
00:04:17.790 --> 00:04:21.840
The thing that exec uses to remember
where the last match happened.

71
00:04:21.840 --> 00:04:22.850
No one knows?

72
00:04:22.850 --> 00:04:28.680
Anyway, there's this variable that's in
there which if everybody is sharing it,

73
00:04:28.680 --> 00:04:31.880
then you can't have multiple execs
happening because they'll interfere with

74
00:04:31.880 --> 00:04:33.090
each other so we fixed that.

75
00:04:35.826 --> 00:04:41.506
This was awful, so I told you
earlier about the object function.

76
00:04:41.506 --> 00:04:43.320
It gets called every
time you make an object,

77
00:04:43.320 --> 00:04:45.919
and the array function gets called
every time you make an array.

78
00:04:47.610 --> 00:04:51.122
It turns out you could replace those
functions with your function so

79
00:04:51.122 --> 00:04:54.339
you get called every time someone
makes an object or an array.

80
00:04:54.339 --> 00:04:57.862
And that's a huge security violation,
right?

81
00:04:57.862 --> 00:05:01.951
You don't want some code to be
able to take those things over, so

82
00:05:01.951 --> 00:05:06.801
the specification will now say as if by
the original object function or array

83
00:05:06.801 --> 00:05:11.990
function that you can still replace them
but you don't get the security hazard.

84
00:05:13.190 --> 00:05:17.010
I'm happy to report that JSON, the world's
best loved data interchange format,

85
00:05:17.010 --> 00:05:19.398
is now built into the language.

86
00:05:19.398 --> 00:05:24.550
So we've got a JSON object that provides
a parse function and a stringify function.

87
00:05:24.550 --> 00:05:27.277
Those names are my fault,
completely my fault.

88
00:05:27.277 --> 00:05:31.687
I probably should have said encode or
decode, or something like that, but

89
00:05:31.687 --> 00:05:32.393
I didn't.

90
00:05:32.393 --> 00:05:36.224
So we're stuck with those,
so, you're welcome.

91
00:05:36.224 --> 00:05:38.928
&gt;&gt; [LAUGH]
&gt;&gt; Douglas Crockford: If you're using

92
00:05:38.928 --> 00:05:43.540
json2.js then it works exactly the same,

93
00:05:43.540 --> 00:05:48.820
except json2.js knows to get out of
the way if built in one is there,

94
00:05:48.820 --> 00:05:51.580
so it'll just get faster
which is what you want.

