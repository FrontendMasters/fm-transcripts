WEBVTT

1
00:00:00.126 --> 00:00:03.949
[MUSIC]

2
00:00:03.949 --> 00:00:06.476
&gt;&gt; Douglas Crockford: I think
we can do better than that and

3
00:00:06.476 --> 00:00:11.120
I think the way we do better is by
going back to the module pattern.

4
00:00:11.120 --> 00:00:15.456
That we can take any bunch of stuff and
put it inside of a function and

5
00:00:15.456 --> 00:00:20.337
invoke it immediately and it does
the same thing except that in this space,

6
00:00:20.337 --> 00:00:22.992
we're not creating global variables.

7
00:00:22.992 --> 00:00:29.681
This stuff is not leaking out in creation
where it's a danger and a hazard.

8
00:00:29.681 --> 00:00:34.080
So we can make stuff using this pattern.

9
00:00:35.630 --> 00:00:37.848
For example I want to make a singleton.

10
00:00:37.848 --> 00:00:41.502
I want to make one instance of
an object containing two methods,

11
00:00:41.502 --> 00:00:43.599
first method and second method, and

12
00:00:43.599 --> 00:00:47.950
I want those two methods to share
private variables and private functions.

13
00:00:50.140 --> 00:00:54.330
In JavaScript there is no easy
way to get privacy except

14
00:00:54.330 --> 00:00:57.675
when you're doing this
stuff with with module or

15
00:00:57.675 --> 00:01:02.810
function modules because each
function has a function scope.

16
00:01:02.810 --> 00:01:05.040
Which is a really effective container for

17
00:01:05.040 --> 00:01:08.530
keeping stuff that nothing leaks
out of function scope ever.

18
00:01:08.530 --> 00:01:11.810
There's no force in the universe
that can force a function

19
00:01:11.810 --> 00:01:13.660
to leak what is held in its scope.

20
00:01:15.070 --> 00:01:16.710
And we can take advantage of that.

21
00:01:16.710 --> 00:01:20.381
And it's a very nice pattern so
what I'm going to store in singleton,

22
00:01:20.381 --> 00:01:24.816
is not this outer function because I'm
going to invoke that function immediately.

23
00:01:24.816 --> 00:01:27.528
What I'm going to store
will be its return value,

24
00:01:27.528 --> 00:01:30.500
which is this object
containing two methods.

25
00:01:30.500 --> 00:01:34.140
And those two methods will
close over the private state.

26
00:01:34.140 --> 00:01:37.390
And those two methods will
share that private state.

27
00:01:37.390 --> 00:01:39.515
If one changes one of
those private variables,

28
00:01:39.515 --> 00:01:42.768
the other, next time he looks at that
variable, he will see the change.

29
00:01:45.213 --> 00:01:48.480
&gt;&gt; Douglas Crockford: Before we figured
out how to do this stuff with functions in

30
00:01:48.480 --> 00:01:50.681
JavaScript, the private variable and

31
00:01:50.681 --> 00:01:55.431
private function would have been global
variables, and there is no privacy there.

32
00:01:58.392 --> 00:02:01.360
&gt;&gt; Douglas Crockford: And one nice thing
about this compared to a classical

33
00:02:01.360 --> 00:02:05.207
language, in a classical language
if you want to make a singleton,

34
00:02:05.207 --> 00:02:09.475
you still have to make a class, which is
a lot of work just to make one thing.

35
00:02:09.475 --> 00:02:13.110
Whereas in JavaScript none
of these are very much work.

36
00:02:14.590 --> 00:02:16.800
And there are lots of
variations on this pattern.

37
00:02:16.800 --> 00:02:22.670
For example I might have, instead of
returning an object I want to have

38
00:02:22.670 --> 00:02:27.090
a global variable which is going to be the
container of everything in my application.

39
00:02:27.090 --> 00:02:30.710
It's going to be this one object
which is the root of everything.

40
00:02:30.710 --> 00:02:35.634
And I want to enhance it, I want to add
a methodical property to our global

41
00:02:35.634 --> 00:02:41.020
object that has these two methods in
it which share this private state.

42
00:02:41.020 --> 00:02:42.840
And we can do that easily.

43
00:02:42.840 --> 00:02:46.420
So we don't have to make a class just to
make one off, and again there are lots and

44
00:02:46.420 --> 00:02:48.980
lots of variations on this pattern,
it's a very rich pattern.

45
00:02:50.810 --> 00:02:55.400
And again this works because we're
invoking the function immediately.

46
00:02:55.400 --> 00:02:57.990
But if we don't invoke
the function immediately,

47
00:02:57.990 --> 00:03:02.160
then we can hold onto that function and
make lots of instances.

48
00:03:02.160 --> 00:03:03.690
So let's do that.

49
00:03:03.690 --> 00:03:08.840
This module pattern is easily transformed
into a powerful constructor pattern.

50
00:03:08.840 --> 00:03:09.850
So here's the recipe.

51
00:03:11.000 --> 00:03:14.950
Step 1, we're gonna make an object
using all of the techniques,

52
00:03:14.950 --> 00:03:16.970
any of the techniques available for
making objects.

53
00:03:16.970 --> 00:03:21.650
We can use an object literal,
we can use new, we can use Object.create.

54
00:03:21.650 --> 00:03:24.730
We can call another of
these power constructors.

55
00:03:24.730 --> 00:03:26.829
Any way we can get an object,
we get an object.

56
00:03:28.970 --> 00:03:32.850
Step 2, we will define some variables and
functions.

57
00:03:32.850 --> 00:03:35.960
These will become the private
members of our object.

58
00:03:37.260 --> 00:03:41.510
Step 3, we will augment the object
with privileged methods.

59
00:03:41.510 --> 00:03:45.700
A privileged method is a publicly
available method of an object

60
00:03:45.700 --> 00:03:47.810
which closes over the private stuff.

61
00:03:49.650 --> 00:03:51.890
And step 4, we return the object.

62
00:03:51.890 --> 00:03:53.840
So it's a pretty simple recipe.

63
00:03:53.840 --> 00:03:55.900
It's way too abstract to
make sense out of it, right?

64
00:03:55.900 --> 00:03:59.100
So we need to go a little deeper.

65
00:03:59.100 --> 00:04:00.420
So let's turn it into a template.

66
00:04:01.940 --> 00:04:06.790
So step 1,
I'm going to make a constructor function.

67
00:04:06.790 --> 00:04:11.780
And I'm spelling constructor now with
a lowercase c instead of an uppercase c,

68
00:04:11.780 --> 00:04:17.390
because this form of constructor
does not care about the new prefix.

69
00:04:17.390 --> 00:04:21.690
If you call this function with a new
prefix it will run a little bit slower,

70
00:04:21.690 --> 00:04:24.830
but it will still do
exactly the right thing.

71
00:04:24.830 --> 00:04:28.450
So, this way we don't have
to worry about people

72
00:04:28.450 --> 00:04:30.500
forgetting the new prefix
cuz nothing can go wrong.

73
00:04:32.290 --> 00:04:36.550
Then I'm gonna recommend passing
in a specification object.

74
00:04:36.550 --> 00:04:39.630
The way you normally write
constructors is you'll just pass in

75
00:04:39.630 --> 00:04:42.300
some number of things separated by commas.

76
00:04:42.300 --> 00:04:46.830
Some years ago, I designed a constructor
that had ten arguments in it,

77
00:04:48.540 --> 00:04:51.740
which was a problem because nobody
could remember what order they went in.

78
00:04:51.740 --> 00:04:54.620
So it was really hard to use and

79
00:04:54.620 --> 00:04:58.030
then it turned out nobody
used the third parameter.

80
00:04:58.030 --> 00:04:59.610
But we couldn't take it out, right,

81
00:04:59.610 --> 00:05:03.330
cuz if we took that argument out,
then all of the code would break.

82
00:05:03.330 --> 00:05:06.887
And so people had to use the third
parameter unnecessarily forever.

83
00:05:06.887 --> 00:05:10.250
That was really awful and brittle.

84
00:05:10.250 --> 00:05:16.070
So, what I would do instead is say pass
in an object using an object literal.

85
00:05:16.070 --> 00:05:21.560
So, by just adding two more characters,
we can now have named parameters.

86
00:05:21.560 --> 00:05:25.180
I can give each of the parameters a name
so, the call is self documenting, so

87
00:05:25.180 --> 00:05:27.470
we can see what's getting passed in.

88
00:05:27.470 --> 00:05:31.790
We can have them in any order, if we leave
things out we can have nice defaults,

89
00:05:31.790 --> 00:05:36.430
if it turns out some parameters become
unnecessary we simply ignore them.

90
00:05:36.430 --> 00:05:39.720
We have lots of power in the way
that we can manipulate objects so

91
00:05:39.720 --> 00:05:41.560
I would take advantage of that.

92
00:05:41.560 --> 00:05:46.610
Also, we could get the specification
object from a JSON payload.

93
00:05:46.610 --> 00:05:50.520
So we might have some store that
we want to use the constructor to

94
00:05:50.520 --> 00:05:52.110
reconstitute the object.

95
00:05:52.110 --> 00:05:53.970
We can do that as well.

96
00:05:53.970 --> 00:05:58.560
Or to cause the creation of
objects across the network

97
00:05:58.560 --> 00:06:01.580
using specifications to get passed
over the wire through JSON.

98
00:06:03.580 --> 00:06:07.530
Then I'm going to call another
constructor to make an object and

99
00:06:07.530 --> 00:06:11.430
I'm gonna pass the same
specification object to him as well.

100
00:06:11.430 --> 00:06:15.490
So it maybe that that other constructor
will make use of some properties in

101
00:06:15.490 --> 00:06:18.460
the specification object that I don't
need but that makes sense to him.

102
00:06:18.460 --> 00:06:20.600
And if there's anything we
both need we're sharing it.

103
00:06:22.300 --> 00:06:27.430
I used to call this parasitic
inheritance where we're gonna call

104
00:06:27.430 --> 00:06:32.470
another constructor and
we're gonna take credit for its work.

105
00:06:32.470 --> 00:06:38.570
I was inspired by a wasp that lays its
eggs in the bodies of live spiders.

106
00:06:40.790 --> 00:06:43.620
So the spider does most of
the work of making instances but

107
00:06:43.620 --> 00:06:47.030
the wasp gets all the credit,
gonna do something like that.

108
00:06:48.250 --> 00:06:52.520
And then I'll take the result
of what the other maker did, and

109
00:06:52.520 --> 00:06:54.410
put it in a variable called that.

110
00:06:54.410 --> 00:06:57.220
I can't put it in something called
this because this is a reserved word.

111
00:06:59.820 --> 00:07:03.080
Then I can create my member variables.

112
00:07:03.080 --> 00:07:05.500
I can create as many member
variables as I want.

113
00:07:05.500 --> 00:07:07.450
And because they're gonna be
held in the function scope,

114
00:07:07.450 --> 00:07:10.890
they're not visible outside of the object,
they're only visible inside the object.

115
00:07:12.560 --> 00:07:17.300
I will create my private methods,
and my private methods

116
00:07:17.300 --> 00:07:20.940
will have access to the specification
object to the member variables and

117
00:07:20.940 --> 00:07:22.340
to the other methods as well.

118
00:07:23.470 --> 00:07:26.326
I do not use this in here,
don't need this,

119
00:07:26.326 --> 00:07:28.970
so the code's going to be
a little bit smaller and cleaner.

120
00:07:31.100 --> 00:07:34.000
And any of these methods
that I need to be public,

121
00:07:35.780 --> 00:07:37.890
I simply assign them to
the outgoing object.

122
00:07:39.180 --> 00:07:41.760
And the last step, I return the object.

123
00:07:44.110 --> 00:07:44.880
And that's it.

124
00:07:44.880 --> 00:07:48.640
And it's a very flexible pattern,
there are lots and

125
00:07:48.640 --> 00:07:53.840
lots of variations on this but this is
the basic core idea, that we're taking

126
00:07:53.840 --> 00:07:59.930
use of closure in order to provide
private state within the object.

