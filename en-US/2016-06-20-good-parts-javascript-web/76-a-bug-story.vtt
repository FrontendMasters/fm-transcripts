WEBVTT

1
00:00:00.000 --> 00:00:04.328
[MUSIC]

2
00:00:04.328 --> 00:00:05.600
&gt;&gt; Douglas Crockford: I made
a bug once and I need to confess.

3
00:00:05.600 --> 00:00:08.468
I need to come clean and
share this with you.

4
00:00:08.468 --> 00:00:09.722
It was in 2001.

5
00:00:13.193 --> 00:00:15.231
&gt;&gt; Douglas Crockford: And
I was writing in Java,

6
00:00:15.231 --> 00:00:20.236
I wrote one of the first JSON parsers and
it was part of a reference

7
00:00:20.236 --> 00:00:25.630
implementation to show people how
easy it was to write a JSON parser.

8
00:00:27.090 --> 00:00:32.170
And it included this statement,
which created an index variable,

9
00:00:32.170 --> 00:00:36.810
which counted characters into the string
or a stream that was being parsed.

10
00:00:37.830 --> 00:00:40.083
So if there were a syntax error,

11
00:00:40.083 --> 00:00:44.763
we could tell you at what character
position that error occurred.

12
00:00:44.763 --> 00:00:50.313
And an int is big enough to cover
what about 2 billion characters,

13
00:00:50.313 --> 00:00:52.104
which is pretty big.

14
00:00:52.104 --> 00:00:55.851
That was 2 gigabytes was a big
disk drive at that time and

15
00:00:55.851 --> 00:00:59.598
the way I was using chase and
they never had a message that

16
00:00:59.598 --> 00:01:04.260
was bigger than a couple of K, so
I thought that's a lot of headroom.

17
00:01:04.260 --> 00:01:06.470
That's being pretty generous.

18
00:01:06.470 --> 00:01:08.510
I'm future proof, this is good.

19
00:01:11.290 --> 00:01:16.800
So a couple years ago,
I got a bug report from somebody

20
00:01:16.800 --> 00:01:21.520
who had passed a JSON text to
the parser that was several

21
00:01:21.520 --> 00:01:26.630
gigabytes in size that contained
a syntax error past 2 gigabytes.

22
00:01:27.690 --> 00:01:32.072
And the error message that my parser
provided was wildly wrong and

23
00:01:32.072 --> 00:01:33.825
they looked at the code and

24
00:01:33.825 --> 00:01:39.497
they very quickly figured out why it was
wildly wrong, and was because I said, int.

25
00:01:39.497 --> 00:01:42.984
So I hate int.

26
00:01:42.984 --> 00:01:44.491
Int's terrible.

27
00:01:44.491 --> 00:01:50.538
Int, I think is one of the worst ideas
in the history of programming and

28
00:01:50.538 --> 00:01:55.472
the reason I hate int is because
what it does on overflow.

29
00:01:55.472 --> 00:02:01.145
So, let's talk philosophically.

30
00:02:01.145 --> 00:02:07.373
So, what should happen if you have a value
that's too big to fit in a cell of memory?

31
00:02:07.373 --> 00:02:08.692
What should happen?

32
00:02:08.692 --> 00:02:13.460
There's one school of thought that says,
well, the CPU should haul it.

33
00:02:13.460 --> 00:02:14.510
That's kind of old school.

34
00:02:15.870 --> 00:02:17.370
You're not going get 99s that way, but

35
00:02:17.370 --> 00:02:21.550
at least you're guaranteed you're
not going to create any bad results.

36
00:02:22.580 --> 00:02:24.584
Death before confusion.

37
00:02:24.584 --> 00:02:29.011
There's another school that says,
we'll have an interrupt.

38
00:02:29.011 --> 00:02:30.668
We'll raise an exception.

39
00:02:30.668 --> 00:02:34.040
We'll go to some other path,
which says something.

40
00:02:34.040 --> 00:02:36.608
[SOUND] Do some about that,
give some warning and

41
00:02:36.608 --> 00:02:39.636
prevent the original operation
from falling through.

42
00:02:39.636 --> 00:02:41.013
That's reasonable.

43
00:02:41.013 --> 00:02:45.518
Another approach would say,
we'll provide some sentinel,

44
00:02:45.518 --> 00:02:49.078
some non-value and
put that in memory instead.

45
00:02:49.078 --> 00:02:53.405
So when you go back and look for it, it'll
say, don't know what you're looking for,

46
00:02:53.405 --> 00:02:54.428
but it's not here.

47
00:02:54.428 --> 00:02:58.323
Another approach might say,
take the largest thing that does fit and

48
00:02:58.323 --> 00:02:59.878
put that in there instead.

49
00:02:59.878 --> 00:03:01.514
It's called saturation.

50
00:03:01.514 --> 00:03:06.039
That's a reasonable thing to do in
computer graphics and signal processing,

51
00:03:06.039 --> 00:03:09.340
but you don't wanna do that
in financial applications.

52
00:03:10.490 --> 00:03:11.662
No, no, no.

53
00:03:11.662 --> 00:03:16.735
But suppose what you want to do is
maximize the likelihood in effect of

54
00:03:16.735 --> 00:03:22.331
errors, I think what you wanna do is
throw away the most significant bits and

55
00:03:22.331 --> 00:03:27.937
don't tell anybody and that's what we
do and I don't think it makes sense.

56
00:03:27.937 --> 00:03:29.592
So, why do we do that?

57
00:03:29.592 --> 00:03:33.782
It's because it made sense in the 50s.

58
00:03:33.782 --> 00:03:40.262
So in the 50s, we made computers out of
vacuum tubes and vacuum tubes are big and

59
00:03:40.262 --> 00:03:45.803
they consume a lot of power and
they get hot and they burn out quickly.

60
00:03:45.803 --> 00:03:48.371
So the more tubes you have in your ALU,

61
00:03:48.371 --> 00:03:52.063
the more it costs to build,
the more it costs operate,

62
00:03:52.063 --> 00:03:56.741
the more it costs to maintain,
the shorter the mean time to failure.

63
00:03:56.741 --> 00:04:01.416
So if you can figure out a way to take
some tubes out, that's a huge win and

64
00:04:01.416 --> 00:04:04.266
some genius and
I do believe he was a genius.

65
00:04:04.266 --> 00:04:09.445
Figured out that if we use complement
arithmetic instead of signed magnitude,

66
00:04:09.445 --> 00:04:13.560
we don't have to implement
the subtract circuit.

67
00:04:13.560 --> 00:04:15.798
All we have to do is put a compliment,

68
00:04:15.798 --> 00:04:20.220
which is almost free in front of the add
circuit and ignore the overflow.

69
00:04:20.220 --> 00:04:21.353
That was brilliant.

70
00:04:21.353 --> 00:04:24.430
That was a great idea at the time.

71
00:04:24.430 --> 00:04:28.050
But since then, Moore's Law has
gone crazy with the number of

72
00:04:28.050 --> 00:04:32.380
devices that are possible on a chip and we
have not reconsidered that decision that

73
00:04:32.380 --> 00:04:36.150
was made in the 50s and
I think we are way, way overdue on that.

74
00:04:37.640 --> 00:04:43.343
To make this even worse, memory used
to be extremely scarce and expensive.

75
00:04:43.343 --> 00:04:46.202
Machine might only have
a couple of K in it.

76
00:04:46.202 --> 00:04:51.283
The Atari 2600, if you remember,
only had 128 bytes of RAM.

77
00:04:51.283 --> 00:04:54.131
That was all of the ram
in the entire machine.

78
00:04:54.131 --> 00:04:58.090
So, you were really careful in
allocating memory to numbers.

79
00:04:58.090 --> 00:05:02.847
And if you could figure out a way to get
two numbers into 1 byte, you would do it,

80
00:05:02.847 --> 00:05:05.545
because you didn't have
very many of them and

81
00:05:05.545 --> 00:05:08.825
our programming languages
are still in that mindset.

82
00:05:08.825 --> 00:05:13.486
So for example, in Java, you've got byte,
char, short, in, long, float and

83
00:05:13.486 --> 00:05:15.863
double just as the main built-in types.

84
00:05:15.863 --> 00:05:20.656
So every time you create a property or
a parameter or

85
00:05:20.656 --> 00:05:25.346
a variable, you have to ask,
which one of those?

86
00:05:25.346 --> 00:05:28.210
You've got to pick one.

87
00:05:29.290 --> 00:05:31.752
And if you get it right, then okay.

88
00:05:31.752 --> 00:05:34.633
But if you get it wrong,
the program is gonna fail and

89
00:05:34.633 --> 00:05:37.197
it's not gonna fail immediately necessary.

90
00:05:37.197 --> 00:05:42.281
In fact, it might fail some time in
the future and tests cannot find that,

91
00:05:42.281 --> 00:05:46.217
because your tests all assume
a particular data model and

92
00:05:46.217 --> 00:05:50.322
they are not sufficient for
finding these sorts of errors.

93
00:05:50.322 --> 00:05:53.207
Tests fail on this stuff and

94
00:05:53.207 --> 00:05:58.602
there's no value in having
picked the right type,

95
00:05:58.602 --> 00:06:03.255
because I saved 16 bits on this variable.

96
00:06:03.255 --> 00:06:09.979
Yehey, what's the cash value of
the of the savings of that memory?

97
00:06:09.979 --> 00:06:11.955
The answer is zero.

98
00:06:11.955 --> 00:06:14.110
In fact,
it's nothing compared to your time.

99
00:06:14.110 --> 00:06:18.741
The time you spent wasted trying to
decide which type is infinitely more

100
00:06:18.741 --> 00:06:22.614
valuable than the value of
the memory that you're saving.

101
00:06:22.614 --> 00:06:25.750
Now JavaScript,
on the other hand, gets it right,

102
00:06:25.750 --> 00:06:27.975
because it only has one number type.

103
00:06:27.975 --> 00:06:33.250
That means it's impossible to make an
error by picking the wrong number type and

104
00:06:33.250 --> 00:06:34.596
that's a huge win.

105
00:06:34.596 --> 00:06:37.004
I'm totally in favor of that.

106
00:06:37.004 --> 00:06:42.847
The only problem is, it's the wrong
type and you know it's the wrong type,

107
00:06:42.847 --> 00:06:47.061
it's because 0.1+0.2 is not equal to 0.3.

108
00:06:47.061 --> 00:06:50.311
I've heard from some people who
say that doesn't matter and

109
00:06:50.311 --> 00:06:52.997
they're absolutely wrong,
that matters a lot.

110
00:06:52.997 --> 00:06:56.001
So, how did this happen?

111
00:06:56.001 --> 00:06:57.268
How did we get to this place?

112
00:06:57.268 --> 00:06:59.684
Well, again, we go back in time.

113
00:06:59.684 --> 00:07:04.783
So in the 40s, when the first
Von Neumann machine start coming online,

114
00:07:04.783 --> 00:07:10.624
they are integer only machines, but most
of the programmers are mathematicians and

115
00:07:10.624 --> 00:07:16.610
they're trying to figure out how to
do real computation and it's hard.

116
00:07:16.610 --> 00:07:19.880
They're trying to do stuff with scaled
integers and it's a lot of work, and

117
00:07:19.880 --> 00:07:24.980
it's error prone, and someone who is
really smart figures out floating point

118
00:07:24.980 --> 00:07:28.390
that we will have two numbers per number.

119
00:07:28.390 --> 00:07:31.338
One is the number itself and
the other is a scale factor,

120
00:07:31.338 --> 00:07:34.552
which tells us how many positions
to move the decimal point.

121
00:07:34.552 --> 00:07:37.229
And then we can just give
it to a subroutine and

122
00:07:37.229 --> 00:07:41.667
the subroutine will figure out how to
add these things, and it worked, and

123
00:07:41.667 --> 00:07:44.001
it made programming much easier to do.

124
00:07:44.001 --> 00:07:47.400
Unfortunately, those
libraries were really slow.

125
00:07:47.400 --> 00:07:52.160
So when we get to the 50s, there is now
interest in putting floating point into

126
00:07:52.160 --> 00:07:57.480
hardware, but we're making stuff
out of tubes and it's hard to do.

127
00:07:57.480 --> 00:08:01.070
And some genius and
I do believe he was a genius figured out

128
00:08:01.070 --> 00:08:05.440
that if we use binary floating point
instead of decimal floating point,

129
00:08:05.440 --> 00:08:09.440
we don't have to implement a divide
by 10 in order to do scaling.

130
00:08:09.440 --> 00:08:11.350
We can just shift one bit, which is free.

131
00:08:12.750 --> 00:08:13.317
And so, they did that.

132
00:08:13.317 --> 00:08:16.800
Now, that worked great for
scientific computing.

133
00:08:16.800 --> 00:08:19.142
Because in scientific computing,

134
00:08:19.142 --> 00:08:22.738
your lower order digits
are probably wrong, anyway.

135
00:08:22.738 --> 00:08:27.026
So the fact that you can't exactly
represent the decimal digits is not all

136
00:08:27.026 --> 00:08:30.831
that important, but it doesn't work for
business processing,

137
00:08:30.831 --> 00:08:35.230
because they're adding up money and
they need to be exact.

138
00:08:35.230 --> 00:08:36.161
They have to give the sense exact.

139
00:08:36.161 --> 00:08:39.621
So there is this division,
there is scientific computing and

140
00:08:39.621 --> 00:08:43.155
there is business computing and
they use different hardware.

141
00:08:43.155 --> 00:08:45.082
They use different programming languages.

142
00:08:45.082 --> 00:08:51.006
So when you order your mainframe, you
either get the floating point package or

143
00:08:51.006 --> 00:08:55.328
you get the BCD package for
doing your COBOL processing.

144
00:08:55.328 --> 00:09:00.443
And that's sort of the way the world
worked until we kind of came into

145
00:09:00.443 --> 00:09:05.558
the modern age and COBOL dies off and
Java is the successor to COBOL,

146
00:09:05.558 --> 00:09:10.534
but Java comes from the Fortran
school not from the COBOL school.

147
00:09:10.534 --> 00:09:14.011
It doesn't do a good job of dealing
with the the business types, but

148
00:09:14.011 --> 00:09:16.451
that's kind of the tragedy
that we're in now.

149
00:09:18.975 --> 00:09:22.572
&gt;&gt; Douglas Crockford: So, I propose
to fix it and this is my solution.

150
00:09:22.572 --> 00:09:27.476
I called DEC64 and
it's a 64-bit quantity containing two

151
00:09:27.476 --> 00:09:32.669
numbers modeled very much after
what they were doing in the 40s.

152
00:09:32.669 --> 00:09:36.261
So I've got one number,
which is a coefficient.

153
00:09:36.261 --> 00:09:41.292
It's 56 bits long and
I've got another number,

154
00:09:41.292 --> 00:09:45.972
which is the exponent,
which is 8 bits long and

155
00:09:45.972 --> 00:09:51.364
it's really nice and
it works, because of this 10.

156
00:09:51.364 --> 00:09:53.996
So, it's really easy to see
what something is going to do.

157
00:09:53.996 --> 00:09:56.384
It's just this formula,
really really simple.

158
00:09:56.384 --> 00:09:59.025
No complicated packing or unpacking.

159
00:09:59.025 --> 00:10:03.392
I put the lower 8 bits in the bottom,
because I'm Intel architecture,

160
00:10:03.392 --> 00:10:05.118
we can unpack that for free.

161
00:10:05.118 --> 00:10:09.522
So a software implementation
can be very efficient and

162
00:10:09.522 --> 00:10:14.225
this gets us 16 or
17 decimal places, very accurate.

163
00:10:14.225 --> 00:10:17.150
We can do exact business processing.

164
00:10:17.150 --> 00:10:20.200
It's not data doing scientific processing,
either.

165
00:10:20.200 --> 00:10:25.509
So my proposal is that this be the only
data format in future application

166
00:10:25.509 --> 00:10:30.293
languages, that we just have one
number type and it be this one.

167
00:10:30.293 --> 00:10:34.793
So to prove it,
I have a software implementation available

168
00:10:34.793 --> 00:10:38.754
in DEC64 assembly language,
that's on GitHub.

169
00:10:38.754 --> 00:10:43.637
If you're curious about this,
you can check it out and and

170
00:10:43.637 --> 00:10:45.838
it performs pretty well.

171
00:10:45.838 --> 00:10:50.737
So if you're adding integers
in a software implementation,

172
00:10:50.737 --> 00:10:56.212
it can add two integers in five
instructions, which is pretty good.

173
00:10:56.212 --> 00:11:01.180
It's maybe four more than you'd like,
except that with those five instructions

174
00:11:01.180 --> 00:11:06.228
you also get overflow protection and you
get nouns, which are nice things to have.

175
00:11:06.228 --> 00:11:07.968
I think essential things to have.

176
00:11:07.968 --> 00:11:13.654
In a hardware implementation, adding
integers should happen in one cycle,

177
00:11:13.654 --> 00:11:19.870
which means we don't need to have ints as
separate type in order to get performance.

178
00:11:19.870 --> 00:11:21.490
We can get performance and

179
00:11:21.490 --> 00:11:25.250
we can get the range of values
that we need in one number type.

180
00:11:26.560 --> 00:11:30.829
So, my goal is to convince everybody in
the world that this is the one number type

181
00:11:30.829 --> 00:11:32.245
to use in the next system.

182
00:11:32.245 --> 00:11:38.428
Now it turns out, I don't actually have
to convince everybody in the world.

183
00:11:38.428 --> 00:11:42.453
I only have to convince one person,
that's the man or

184
00:11:42.453 --> 00:11:46.570
the woman who designs the next language.

185
00:11:46.570 --> 00:11:50.080
If I can convince that person that they
want a language with one number type that

186
00:11:50.080 --> 00:11:52.940
works well with humans that does
arithmetic the way we were taught to do

187
00:11:52.940 --> 00:11:57.200
arithmetic in school, so that we
won't get confused, then we'll win.

