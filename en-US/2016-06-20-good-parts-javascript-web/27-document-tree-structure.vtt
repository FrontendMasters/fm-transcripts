WEBVTT

1
00:00:00.000 --> 00:00:03.851
[MUSIC]

2
00:00:03.851 --> 00:00:06.980
&gt;&gt; Douglas Crockford: We talked
about parsing and making trees.

3
00:00:06.980 --> 00:00:09.690
So this is some HTML text.

4
00:00:09.690 --> 00:00:12.630
This is a tree that it expands into and

5
00:00:13.900 --> 00:00:17.100
there are some interesting
things to observe about this.

6
00:00:17.100 --> 00:00:21.080
One is first we've got lowercase here and
uppercase here.

7
00:00:21.080 --> 00:00:25.970
So when the web first started, the first
generation of webmasters typed their

8
00:00:25.970 --> 00:00:29.734
markup all in upper case cuz
they wanted to stand out.

9
00:00:29.734 --> 00:00:32.030
They wanted make it really
obvious what was markup and

10
00:00:32.030 --> 00:00:35.300
what was content, and writing it
all in uppercase made that clearer.

11
00:00:37.190 --> 00:00:40.060
After a few years of that, they got
tired of leaning on the Shift key and

12
00:00:40.060 --> 00:00:42.140
they decided what the hell and
it's all lowercase now.

13
00:00:43.440 --> 00:00:46.780
That transition happened just as
Brendon was designing the DOM.

14
00:00:48.120 --> 00:00:53.420
And so the DOM had to pick
a convention and the convention

15
00:00:53.420 --> 00:00:57.390
was let's go with uppercase because that's
what people were using at the time.

16
00:00:57.390 --> 00:01:00.880
So everything that's lowercase here
gets shifted up to uppercase there.

17
00:01:00.880 --> 00:01:04.120
And you need to be aware of that
because sometimes it doesn't matter but

18
00:01:04.120 --> 00:01:05.580
sometimes it does matter.

19
00:01:05.580 --> 00:01:06.370
So you need to be aware.

20
00:01:07.450 --> 00:01:11.220
Then there are features in
the tree that are not in the text.

21
00:01:11.220 --> 00:01:16.180
For example, I did not specify a head tag,
but there is a head tag in the tree.

22
00:01:17.640 --> 00:01:20.280
So it'll add extra bits to the markup.

23
00:01:22.220 --> 00:01:24.830
Another place we'll do that is in a table.

24
00:01:24.830 --> 00:01:28.810
If you don't specify a tbody,
it'll stick a tbody in there for you.

25
00:01:28.810 --> 00:01:32.520
And that can get you into trouble if
you're trying to parse around things,

26
00:01:32.520 --> 00:01:36.650
and you'll find levels of content
that you didn't expect to find.

27
00:01:38.620 --> 00:01:44.270
Then the other thing here is that
this is the ideal Microsoft tree.

28
00:01:44.270 --> 00:01:47.920
So Microsoft IE6 would
make a tree like this one.

29
00:01:47.920 --> 00:01:52.580
W3C under the influence of
the SGL community said no,

30
00:01:52.580 --> 00:01:55.440
you need to have more stuff than that.

31
00:01:55.440 --> 00:01:57.640
For example the whitespace
between here and

32
00:01:57.640 --> 00:02:02.620
here, which you would ordinarily ignore,
that has to go into the tree.

33
00:02:03.680 --> 00:02:05.540
Microsoft correctly decided,

34
00:02:05.540 --> 00:02:07.980
no we shouldn't do that because
that's just a waste of space.

35
00:02:09.510 --> 00:02:12.750
But everybody else did and
now Microsoft did, everybody does that.

36
00:02:12.750 --> 00:02:16.992
But I went with Microsoft tree
because the real tree is too hairy and

37
00:02:16.992 --> 00:02:21.560
it's hard to talk about, so
I'm going with the simpler tree instead.

38
00:02:21.560 --> 00:02:24.160
Then there's some implied
hierarchy in this.

39
00:02:24.160 --> 00:02:28.001
For example, you've got h1, h2 and

40
00:02:28.001 --> 00:02:33.017
it kind of looks like the h2
is subordinate to h1.

41
00:02:33.017 --> 00:02:38.031
And the Ps are subordinate to that,
but they're not.

42
00:02:38.031 --> 00:02:40.910
They're all at the same level in the tree.

43
00:02:40.910 --> 00:02:42.589
So you need to be aware of that.

44
00:02:43.990 --> 00:02:47.470
Then on the JavaScript side,
in the browser,

45
00:02:47.470 --> 00:02:50.850
there is a global variable called
document, which is the root of the tree.

46
00:02:52.110 --> 00:02:55.450
And document.body is a shortcut for
getting to the body node.

47
00:02:57.340 --> 00:02:58.460
There is also a shortcut for

48
00:02:58.460 --> 00:03:03.720
getting to the HTML node,
which is called document element.

49
00:03:03.720 --> 00:03:06.880
Which is your thing can
be called HTML right?

50
00:03:06.880 --> 00:03:07.980
Cuz it goes to that one.

51
00:03:07.980 --> 00:03:13.293
And the reason it isn't is because at the
time that document element was created,

52
00:03:13.293 --> 00:03:15.449
W3C was planning to kill HTML and

53
00:03:15.449 --> 00:03:18.840
they didn't want to leave
that evidence in the DOM.

54
00:03:19.880 --> 00:03:23.760
So they went with a longer name,
so that no one would know.

55
00:03:23.760 --> 00:03:26.110
But that plot didn't work.

56
00:03:27.650 --> 00:03:30.500
So this is a subset of the same tree,

57
00:03:30.500 --> 00:03:33.620
I turned it sideways to
demonstrate the next thing.

58
00:03:33.620 --> 00:03:38.030
So each node has pointers to other nodes.

59
00:03:38.030 --> 00:03:43.350
For example, each node has a first
child and a last child node.

60
00:03:43.350 --> 00:03:45.890
Which points to the children.

61
00:03:45.890 --> 00:03:48.620
These are neglected middle children,
they don't get pointers.

62
00:03:50.400 --> 00:03:53.793
Then each of those P node
only has one child, so

63
00:03:53.793 --> 00:03:59.408
both pointers point to the same element.
&gt;&gt; Douglas Crockford: Then

64
00:03:59.408 --> 00:04:04.128
there are sibling pointers, next sibling
and previous sibling when at that way

65
00:04:04.128 --> 00:04:07.730
the body will have a sibling
relationship with the head tag.

66
00:04:10.050 --> 00:04:13.398
These guys are cousins, and
you'll be glad to know there are no cousin

67
00:04:13.398 --> 00:04:17.143
pointers.
&gt;&gt; Douglas Crockford: Then there is

68
00:04:17.143 --> 00:04:19.550
the parent node pointer which goes up.

69
00:04:19.550 --> 00:04:22.880
The body will have a parent
node going to html.

70
00:04:22.880 --> 00:04:25.220
HTML will go up to the document root.

71
00:04:27.360 --> 00:04:30.740
And you might be going lordy
that's a lot of pointers.

72
00:04:30.740 --> 00:04:34.170
So if I edit this tree,
do I have to update all those pointers,

73
00:04:34.170 --> 00:04:35.810
that could be kinda hairy.

74
00:04:35.810 --> 00:04:39.880
And the answer is no,
that in fact you cannot edit the tree.

75
00:04:39.880 --> 00:04:42.000
These are all read only
from your perspective,

76
00:04:42.000 --> 00:04:45.990
you have to use the DOM API if
you want to edit this tree.

77
00:04:45.990 --> 00:04:47.720
And I'll show you that API in a moment.

78
00:04:48.950 --> 00:04:52.020
Now if it turns out all you want
to do is traverse the tree, for

79
00:04:52.020 --> 00:04:55.190
example if you want to visit
every node in display order.

80
00:04:56.810 --> 00:04:59.370
You don't need all these pointers, right?

81
00:04:59.370 --> 00:05:03.660
If you understand how recursion works,
you only need a binary tree, right?

82
00:05:03.660 --> 00:05:05.580
You can make that with two pointers.

83
00:05:05.580 --> 00:05:11.255
So I can use first child the next
sibling with a walk the DOM function.

84
00:05:11.255 --> 00:05:15.540
It's recursive function which
knows how to do that traversal.

85
00:05:15.540 --> 00:05:18.850
And that allows me to do things like
implement get elements by name.

86
00:05:19.960 --> 00:05:24.760
By passing in a function which will look
for names and compile things into a list.

87
00:05:26.910 --> 00:05:32.070
In addition to all of those pointers,
each node also has a list of child nodes

88
00:05:32.070 --> 00:05:36.320
which is kind of like an array which
will have all of the children in it.

