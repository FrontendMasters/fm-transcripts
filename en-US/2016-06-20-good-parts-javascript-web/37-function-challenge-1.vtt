WEBVTT

1
00:00:00.000 --> 00:00:03.842
[MUSIC]

2
00:00:03.842 --> 00:00:06.390
&gt;&gt; Douglas Crockford: I'm gonna
give you a series of problems.

3
00:00:06.390 --> 00:00:07.625
A problem might look like this.

4
00:00:13.296 --> 00:00:16.191
&gt;&gt; Douglas Crockford: Write an identity
function that takes an argument and

5
00:00:16.191 --> 00:00:18.070
returns that argument.

6
00:00:18.070 --> 00:00:20.574
And I'll show an example of
how you would call it and

7
00:00:20.574 --> 00:00:22.448
what the result of that call would be.

8
00:00:22.448 --> 00:00:24.840
I will then give you
some time to work on it.

9
00:00:24.840 --> 00:00:26.190
Probably about ten minutes or so.

10
00:00:27.720 --> 00:00:30.920
Some of you are gonna work
faster than others, so for

11
00:00:30.920 --> 00:00:33.190
those of you who finish quickly,
you're gonna get frustrated,

12
00:00:33.190 --> 00:00:36.850
because you're gonna have to wait for
the time before we go on.

13
00:00:36.850 --> 00:00:39.710
And for some of you are gonna be working
slower, and you're gonna get frustrated

14
00:00:39.710 --> 00:00:42.690
cuz you might not have enough
time to finish every problem.

15
00:00:42.690 --> 00:00:46.860
So, my goal today is to frustrate
everybody equally, okay?

16
00:00:46.860 --> 00:00:49.150
That's where we're gonna
be going with this.

17
00:00:49.150 --> 00:00:51.040
So, you'll take some time,

18
00:00:51.040 --> 00:00:53.530
you'll work on the problem,
you'll come up with the solution.

19
00:00:53.530 --> 00:00:56.320
I will then show you my solution.

20
00:00:56.320 --> 00:00:59.930
And in some cases,
I may show you multiple solutions and

21
00:00:59.930 --> 00:01:01.700
you can compare yours with mine.

22
00:01:01.700 --> 00:01:06.000
If you like mine better than yours,
you want to record it,

23
00:01:06.000 --> 00:01:11.870
because each of these later problems
will refer to earlier problems.

24
00:01:11.870 --> 00:01:15.310
Either in pattern or we'll actually
be calling the earlier functions,

25
00:01:15.310 --> 00:01:19.370
so make sure that you get at least
one version of everything that works.

26
00:01:20.730 --> 00:01:24.831
Also, I highly recommend that you use
exactly the same function names that I do,

27
00:01:24.831 --> 00:01:29.299
because later we're gonna write functions
which call these functions, and if you're

28
00:01:29.299 --> 00:01:33.242
giving them different names, it'll be
really easy to get confused, okay?

29
00:01:35.693 --> 00:01:38.810
&gt;&gt; Douglas Crockford: Then
you'll probably want to test it.

30
00:01:38.810 --> 00:01:44.910
If you have a JavaScript engine on your
machine and how to use it, for example,

31
00:01:44.910 --> 00:01:48.050
if you have Node installed and you know
how to use the repo, that's great.

32
00:01:48.050 --> 00:01:51.210
You can just plug it in there,
and it'll work.

33
00:01:51.210 --> 00:01:54.110
If you don't,
you have at least one web browser.

34
00:01:54.110 --> 00:01:56.905
And all the web browsers now come
with very nice debuggers, so

35
00:01:56.905 --> 00:01:58.690
you can do that as well.

36
00:01:58.690 --> 00:02:01.160
This is one way to use a web browser.

37
00:02:01.160 --> 00:02:08.500
You could simply have a form like this,
or a page containing a script tag.

38
00:02:08.500 --> 00:02:11.882
For my convenience, I created a log
function so I could log results,

39
00:02:11.882 --> 00:02:13.936
and it'll just write them to the screen.

40
00:02:13.936 --> 00:02:16.932
Then in the box,
I've got the function that I wrote, and

41
00:02:16.932 --> 00:02:20.060
then I called the function
sending the result to the log.

42
00:02:20.060 --> 00:02:22.230
If you wanna do something
more sophisticated,

43
00:02:22.230 --> 00:02:23.500
you're certainly welcome to do that.

44
00:02:23.500 --> 00:02:26.180
This is sort of the minimum
that you need to get started.

45
00:02:27.830 --> 00:02:30.660
You don't have to test your functions,
but you probably want to, right?

46
00:02:30.660 --> 00:02:34.130
Cuz otherwise you can't have confidence
that they're working correctly.

47
00:02:34.130 --> 00:02:37.380
While everybody is still getting set up,
we're gonna do a quiz.

48
00:02:37.380 --> 00:02:38.120
Pop quiz.

49
00:02:38.120 --> 00:02:40.040
So here we go, ready?

50
00:02:40.040 --> 00:02:44.050
Question number one,
we have a function called funky.

51
00:02:44.050 --> 00:02:46.390
It takes an argument o, sets o to null.

52
00:02:48.040 --> 00:02:53.220
We create a global variable x, which
is an empty array, we pass x to funky.

53
00:02:53.220 --> 00:02:55.300
What is now the value of x?

54
00:03:00.110 --> 00:03:02.920
So who thinks x is null?

55
00:03:02.920 --> 00:03:06.446
And who thinks x is the empty array?

56
00:03:06.446 --> 00:03:09.625
And who thinks it's undefined?

57
00:03:09.625 --> 00:03:12.596
And who thinks it'll throw an exception?

58
00:03:12.596 --> 00:03:16.390
Okay, the answer is B, the empty array.

59
00:03:17.430 --> 00:03:19.570
So let's look at what's happening here.

60
00:03:19.570 --> 00:03:25.860
So if we start off, we have the global
variable x that points at the array.

61
00:03:27.220 --> 00:03:32.218
We pass the contents of x,
which is that reference to funky,

62
00:03:32.218 --> 00:03:35.780
which has it bound to o.

63
00:03:35.780 --> 00:03:38.050
We replace o with null.

64
00:03:38.050 --> 00:03:39.830
And then there you are.

65
00:03:39.830 --> 00:03:43.340
So funky, as written,
is a completely useless function.

66
00:03:44.880 --> 00:03:49.060
And in this thing about the way variables
work is not peculiar to JavaScript.

67
00:03:49.060 --> 00:03:51.110
Almost all modern languages work this way.

68
00:03:52.210 --> 00:03:57.360
Most languages do not allow you to
pass a reference to a variable.

69
00:03:57.360 --> 00:04:00.030
What they allow you to do is to
pass a reference to the contents of

70
00:04:00.030 --> 00:04:02.170
the variable, okay.

71
00:04:02.170 --> 00:04:07.150
ALGOL 60, which was a brilliant language,
had something in it called,

72
00:04:07.150 --> 00:04:11.450
call by name, where you actually
could pass a reference to a variable.

73
00:04:11.450 --> 00:04:15.360
That was one of the very few,
very bad ideas in ALGOL 60.

74
00:04:15.360 --> 00:04:17.230
Ready for another one?

75
00:04:18.824 --> 00:04:23.740
Okay, here's a function swap,
takes two arguments a and b, and

76
00:04:23.740 --> 00:04:25.590
it swaps them using a temp variable.

77
00:04:26.666 --> 00:04:30.670
We have two global variables,
x and y, whose values are 1 and 2.

78
00:04:30.670 --> 00:04:35.013
We pass x and y to swap,
what is now the value of x?

79
00:04:37.804 --> 00:04:40.104
&gt;&gt; Douglas Crockford: So
who thinks x is 1?

80
00:04:41.590 --> 00:04:44.181
Who thinks x is 2?

81
00:04:44.181 --> 00:04:46.570
Okay I'm not gonna fool you this time.

82
00:04:46.570 --> 00:04:48.324
The answer is 1.

83
00:04:48.324 --> 00:04:50.640
And it's similar to what we did before.

84
00:04:50.640 --> 00:04:57.330
So here we've got our two global
variables, x and y, that point to 1 and 2.

85
00:04:57.330 --> 00:04:59.770
We pass x and y to swap.

86
00:04:59.770 --> 00:05:02.090
Then we fiddle them around with swap, but

87
00:05:02.090 --> 00:05:04.840
that did not change what x and
y are doing.

88
00:05:04.840 --> 00:05:09.160
I'm hoping that some day in the future,
JavaScript gets macros.

89
00:05:09.160 --> 00:05:11.620
So instead of saying function swap,
I'd say macro swap.

90
00:05:11.620 --> 00:05:18.825
And in that case, macros do get called or
do get passed with variable names, and

91
00:05:18.825 --> 00:05:24.500
macro swap would be useful thing, but as
written, function swap is pretty useless.

92
00:05:26.650 --> 00:05:28.300
Okay, any questions about the quiz?

93
00:05:29.420 --> 00:05:30.620
Okay, quiz is done.

94
00:05:30.620 --> 00:05:32.920
It's time to do some real work,
are you ready?

95
00:05:32.920 --> 00:05:36.340
So the first one is going to
be totally trivial, no tricks,

96
00:05:36.340 --> 00:05:39.559
it's just something to allow
you to test your environment.

97
00:05:41.910 --> 00:05:44.310
So write three binary functions.

98
00:05:44.310 --> 00:05:47.590
A binary function is a function
that takes two arguments.

99
00:05:47.590 --> 00:05:52.340
Add, sub and mul, that take two numbers
and return their sum, difference and

100
00:05:52.340 --> 00:05:53.930
product, okay.

101
00:05:53.930 --> 00:05:55.830
This is as trivial as it sounds.

102
00:05:55.830 --> 00:05:57.360
There are no tricks.

103
00:05:57.360 --> 00:06:00.750
We're doing this so
that you can practice and also so

104
00:06:00.750 --> 00:06:05.650
that we'll have functions that functions
that we write later will be able to call.

105
00:06:07.790 --> 00:06:10.400
So here we have add, first and mul.

106
00:06:10.400 --> 00:06:12.928
I assume that everybody got this, right?

107
00:06:12.928 --> 00:06:14.239
Yes, who got this?

108
00:06:15.780 --> 00:06:19.030
Yeah, if you didn't, write it down because
you're going to need these for later.

109
00:06:21.500 --> 00:06:23.630
Okay, ready for
the first interesting problem of the day?

110
00:06:25.130 --> 00:06:25.710
Here we go.

111
00:06:28.190 --> 00:06:31.560
Write a function identityf
that takes an argument and

112
00:06:31.560 --> 00:06:35.100
returns a function that
returns that argument.

113
00:06:35.100 --> 00:06:38.560
So, we're gonna call it identityf,
we're gonna pass it 3.

114
00:06:38.560 --> 00:06:40.529
That will return a function.

115
00:06:40.529 --> 00:06:45.527
When we call that function,
it will return 3.

116
00:06:45.527 --> 00:06:48.168
So, here is identityf.

117
00:06:48.168 --> 00:06:52.860
identityf takes an argument and returns
a function that returns that argument.

118
00:06:52.860 --> 00:06:54.984
So who got identityf?

119
00:06:54.984 --> 00:06:56.240
Very good.

120
00:06:56.240 --> 00:06:58.240
If you didn't get it, write it down,

121
00:06:58.240 --> 00:07:00.230
because you gotta
definitely need it later.

122
00:07:00.230 --> 00:07:04.940
And don't be discouraged, I'm not
expecting everybody to get every problem.

123
00:07:04.940 --> 00:07:08.300
What I'm expecting is that
everybody gets the last problem.

124
00:07:08.300 --> 00:07:13.330
Okay, so if you don't see what's going
on immediately, just stay with it.

125
00:07:13.330 --> 00:07:16.870
Eventually the patterns should
start to become clearer and

126
00:07:16.870 --> 00:07:19.310
you'll get a sense of where we're going,
okay?

127
00:07:19.310 --> 00:07:22.396
Any questions so far?

128
00:07:22.396 --> 00:07:23.750
Okay, are we ready for the next one?

129
00:07:25.060 --> 00:07:31.390
Okay, write a function addf
that adds from two invocations.

130
00:07:31.390 --> 00:07:35.580
So if we pass a 3 to addf,
it would return a function.

131
00:07:35.580 --> 00:07:40.888
If we pass 4 to that function,
it will return 7.

132
00:07:40.888 --> 00:07:42.430
So here is addf.

133
00:07:45.080 --> 00:07:49.920
addf takes a first argument, it returns
a function that takes the second argument

134
00:07:49.920 --> 00:07:53.610
and it returns the result of calling
the first and second argument.

135
00:07:53.610 --> 00:07:54.310
So who got addf?

136
00:07:55.670 --> 00:07:56.440
Okay, very good.

137
00:07:56.440 --> 00:07:58.080
If you didn't get it, write it down.

138
00:07:58.080 --> 00:07:59.540
You're gonna wanna need it for
the next one.

139
00:08:01.110 --> 00:08:04.667
So this problem was suggested
to me by Dmitry Baranovskiy,

140
00:08:04.667 --> 00:08:09.680
who is a brilliant Ukrainian
programmer living in Sydney, Australia.

141
00:08:09.680 --> 00:08:15.030
He's the author of RaphaelJS, a very
nice graphics package for the browser.

142
00:08:16.130 --> 00:08:20.410
He suggested that this should be a hiring
question, and if you got this right,

143
00:08:20.410 --> 00:08:21.310
maybe you think so, too.

144
00:08:24.000 --> 00:08:25.708
So we ready for the next one?

145
00:08:27.959 --> 00:08:28.920
&gt;&gt; Douglas Crockford: Okay, here we go.

146
00:08:30.850 --> 00:08:34.890
Write a function liftf that
takes a binary function and

147
00:08:34.890 --> 00:08:37.780
makes it callable with two invocations.

148
00:08:37.780 --> 00:08:41.590
So, if we pass the add function that
we wrote the first thing this morning

149
00:08:42.600 --> 00:08:43.680
to liftf,

150
00:08:43.680 --> 00:08:47.940
it returns a function that works exactly
like the addf function that we just wrote.

151
00:08:48.980 --> 00:08:52.960
And to make it even more interesting,
we can pass other binary functions,

152
00:08:52.960 --> 00:08:56.330
like the multiply function, and
get a similar kind of capability.

153
00:08:58.670 --> 00:09:00.210
Let's look at liftf.

154
00:09:00.210 --> 00:09:04.520
Liftf takes a binary function, returns
a function that takes a first argument,

155
00:09:04.520 --> 00:09:08.470
that returns a function that takes a
second argument, that returns a result of

156
00:09:08.470 --> 00:09:13.090
passing the first and
second arguments to the binary function.

157
00:09:13.090 --> 00:09:14.140
So who got liftf?

158
00:09:15.520 --> 00:09:16.090
Very good.

159
00:09:16.090 --> 00:09:17.770
If you didn't get it, write it down.

160
00:09:17.770 --> 00:09:19.220
You're gonna want to need it for
a later one.

161
00:09:20.330 --> 00:09:23.410
This is an example of
a higher order function.

162
00:09:23.410 --> 00:09:29.170
Higher order functions are functions that
receive other functions as parameters and

163
00:09:29.170 --> 00:09:32.020
return other functions as results.

164
00:09:33.220 --> 00:09:36.670
So we're starting to get moving
down the rabbit hole into a very

165
00:09:36.670 --> 00:09:38.250
interesting way of constructing things.

