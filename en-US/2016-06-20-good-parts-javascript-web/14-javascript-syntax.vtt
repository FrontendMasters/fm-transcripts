WEBVTT

1
00:00:00.000 --> 00:00:03.947
[MUSIC]

2
00:00:03.947 --> 00:00:06.610
&gt;&gt; Speaker 1: JavaScript is
syntactically a member of the C family.

3
00:00:09.042 --> 00:00:10.703
&gt;&gt; Speaker 1: We've got identifiers which

4
00:00:10.703 --> 00:00:13.697
can start with letters or
underbars or dollar signs.

5
00:00:13.697 --> 00:00:19.321
I recommend not starting or ending
your property names with underbars or

6
00:00:19.321 --> 00:00:23.291
dollar signs, but
they seem to be really popular.

7
00:00:23.291 --> 00:00:26.998
Dollar sign was added to the language for
the benefit of machines for

8
00:00:26.998 --> 00:00:29.210
macro processors and code generators,

9
00:00:29.210 --> 00:00:33.242
things that wanted to be able to create
names be guaranteed they wouldn't

10
00:00:33.242 --> 00:00:37.750
conflict with your names that they could
use a dollar sign and that made them safe.

11
00:00:37.750 --> 00:00:42.600
Unfortunately, some kids found out that
you could have a function called dollar

12
00:00:42.600 --> 00:00:44.037
and went crazy with it.

13
00:00:44.037 --> 00:00:46.559
So, dollar functions
are all over the place now.

14
00:00:50.076 --> 00:00:52.246
&gt;&gt; Speaker 1: We have both formats for

15
00:00:52.246 --> 00:00:53.877
doing comments.

16
00:00:53.877 --> 00:00:57.585
I recommend using just these
slashslash line format,

17
00:00:57.585 --> 00:01:02.262
because sometimes we want to use
comments for commenting out code and

18
00:01:02.262 --> 00:01:06.957
regular expression literals can
contain starslash and slashstar.

19
00:01:06.957 --> 00:01:10.414
So weirdness can happen,

20
00:01:10.414 --> 00:01:15.133
if you're using a block comments.

21
00:01:15.133 --> 00:01:21.300
We have the same set of operators that you
would expect to see in a C-like language.

22
00:01:21.300 --> 00:01:24.210
A few of them work a little bit
differently that you need to be aware of.

23
00:01:25.300 --> 00:01:31.060
One big mistake in the language is that
the plus operator does both addition and

24
00:01:31.060 --> 00:01:32.570
concatenation.

25
00:01:32.570 --> 00:01:35.422
This is a bad habit
JavaScript learn from Java.

26
00:01:35.422 --> 00:01:38.142
In Java, it's not so bad,
because it strongly typed.

27
00:01:38.142 --> 00:01:40.886
So, you can predict which
one it's going to do.

28
00:01:40.886 --> 00:01:42.158
JavaScript is loosely typed.

29
00:01:42.158 --> 00:01:46.867
So it's not until you go to do the plus,
there it looks at the operands.

30
00:01:46.867 --> 00:01:50.797
And if they're both numbers
it'll add them, otherwise,

31
00:01:50.797 --> 00:01:55.835
it'll convert them both into strings and
concatenate them, which is bad.

32
00:01:55.835 --> 00:01:57.894
For example, in a web application,

33
00:01:57.894 --> 00:02:02.278
you might have a form field when you ask
the user to type a number into the field,

34
00:02:02.278 --> 00:02:05.479
you then wanna take that number out and
add to something.

35
00:02:05.479 --> 00:02:09.924
Forgetting that the value you take
out of a form element is always

36
00:02:09.924 --> 00:02:14.468
a string even though everything
around it says, it's a number.

37
00:02:14.468 --> 00:02:19.286
That's a really big source of confusion
and you don't get an error you just get

38
00:02:19.286 --> 00:02:25.387
extremely bad behavior.
&gt;&gt; Speaker 1: So, we can convert and

39
00:02:25.387 --> 00:02:29.890
we can use the plus unitary operator
to convert strings into numbers.

40
00:02:29.890 --> 00:02:32.688
And so, you often wanna do
that is as a defensive thing.

41
00:02:32.688 --> 00:02:37.454
If you've got a value and you want to add
it and you're concerned that it might not

42
00:02:37.454 --> 00:02:41.677
be a number, you can coerce it to be
a number before you do the addition.

43
00:02:41.677 --> 00:02:45.462
But if you do that,
I recommend putting parens around it.

44
00:02:45.462 --> 00:02:47.856
Because otherwise, you end up with
two plusses next to each other,

45
00:02:47.856 --> 00:02:53.389
which can look like another problem.
&gt;&gt; Speaker 1: We

46
00:02:53.389 --> 00:02:55.394
don't have integers formally.

47
00:02:55.394 --> 00:02:59.067
So you can divide two integers
using the divide operator, but

48
00:02:59.067 --> 00:03:02.038
you're not guaranteed to
get an integer result.

49
00:03:02.038 --> 00:03:03.798
So, you need to be prepared for that.

50
00:03:03.798 --> 00:03:07.493
And because it's binary floating point,
even the floating point result, you get

51
00:03:07.493 --> 00:03:13.068
might not be the one you would expect.
&gt;&gt; Speaker 1: The percent

52
00:03:13.068 --> 00:03:17.670
sign operator is the remainder
operator not the modulo operator,

53
00:03:17.670 --> 00:03:22.122
which is a shame, because I think
modulo is the more useful one.

54
00:03:22.122 --> 00:03:25.866
The difference is in which sign it

55
00:03:25.866 --> 00:03:30.739
uses.
&gt;&gt; Speaker 1: We already talked

56
00:03:30.739 --> 00:03:33.499
about double equal and
the problems with it.

57
00:03:33.499 --> 00:03:37.575
I recommend you always use triple equal
instead, just because there are so

58
00:03:37.575 --> 00:03:40.306
many weirdness in it,
things that are expected.

59
00:03:40.306 --> 00:03:42.546
There's a meme on YouTube called WAT.

60
00:03:42.546 --> 00:03:43.418
W-A-T.

61
00:03:43.418 --> 00:03:45.170
Has anybody seen WAT?

62
00:03:45.170 --> 00:03:47.194
Yeah, it's a crackup.

63
00:03:47.194 --> 00:03:49.389
And mostly, it's playing fun with this.

64
00:03:49.389 --> 00:03:53.737
They take two things, which are wildly
different and double equal them and

65
00:03:53.737 --> 00:03:55.680
then says, true and they go WAT?

66
00:03:55.680 --> 00:03:56.419
And they get a big laugh.

67
00:03:58.580 --> 00:03:59.740
So, don't use double equal.

68
00:04:01.740 --> 00:04:06.840
With the logical and operator works
a little differently than it does in Java,

69
00:04:06.840 --> 00:04:11.878
because the operands do not need to be
bullion, they only need to be bullish.

70
00:04:11.878 --> 00:04:16.246
So if the first operand is truthy, the
result is the value of the second operand.

71
00:04:16.246 --> 00:04:19.534
Otherwise, it's the result
of the first operand.

72
00:04:19.534 --> 00:04:24.793
It does do the short circuiting though,
so the second operand

73
00:04:24.793 --> 00:04:30.153
will only be evaluated if the first
one was faulty and logical or

74
00:04:30.153 --> 00:04:36.332
works in a similar way.
&gt;&gt; Speaker 1: The exclamation point is

75
00:04:36.332 --> 00:04:40.493
the logical not operator, if the operand
is truthy than the result is false.

76
00:04:40.493 --> 00:04:42.493
Otherwise, the result is true.

77
00:04:42.493 --> 00:04:46.959
If you have bang, bang twice, it will
turn a bullish value into a Boolean.

78
00:04:50.258 --> 00:04:52.053
&gt;&gt; Speaker 1: We have bitwise operators,

79
00:04:52.053 --> 00:04:53.632
but we don't have ints.

80
00:04:53.632 --> 00:04:58.469
So the way that works is we'll take
the 64-bit binary floating point,

81
00:04:58.469 --> 00:05:01.210
turn it into a 32-bit signed integer.

82
00:05:01.210 --> 00:05:04.403
Do the nasty to it and
then convert it back.

83
00:05:04.403 --> 00:05:07.382
So in some languages,
you'll see people doing a shift,

84
00:05:07.382 --> 00:05:10.435
because they think it's gonna
be faster than a multiply.

85
00:05:10.435 --> 00:05:13.733
You shouldn't do that even in those
languages, cuz compilers are smart enough.

86
00:05:13.733 --> 00:05:15.739
You should write the thing
that you intend, so

87
00:05:15.739 --> 00:05:19.094
that someone reading the program will
know what supposed to be happening.

88
00:05:19.094 --> 00:05:22.318
The compiler will sort out
the fastest way to do it.

89
00:05:22.318 --> 00:05:23.954
But in this language, definitely,

90
00:05:23.954 --> 00:05:26.870
you're not getting speed improvement
by doing it the wrong way.

