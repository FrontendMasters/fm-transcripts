WEBVTT

1
00:00:00.000 --> 00:00:04.726
[MUSIC]

2
00:00:04.726 --> 00:00:07.444
&gt;&gt; Douglas Crockford: We have the same set
of statements that you would expect to see

3
00:00:07.444 --> 00:00:09.590
in a C language,
again with some differences.

4
00:00:12.329 --> 00:00:14.075
&gt;&gt; Douglas Crockford: We've got
labeled break, which is good.

5
00:00:14.075 --> 00:00:16.783
So if you've got nested loops and
switches and

6
00:00:16.783 --> 00:00:20.469
stuff, you can break out of
innermost things, which is good.

7
00:00:22.500 --> 00:00:26.180
We've got the for statement which we
can use to iterate through arrays but

8
00:00:26.180 --> 00:00:27.540
I don't recommend using that.

9
00:00:27.540 --> 00:00:32.532
In ES5 we got the forEach method,
the map method where you can

10
00:00:32.532 --> 00:00:36.763
have a function called on
each element of the array.

11
00:00:36.763 --> 00:00:40.286
That eliminates almost all need for
the for loops, so I don't use for

12
00:00:40.286 --> 00:00:41.150
loops anymore.

13
00:00:42.570 --> 00:00:46.480
We have a for in statement which
iterates through all of the names of all

14
00:00:46.480 --> 00:00:48.440
the properties of an object.

15
00:00:48.440 --> 00:00:51.600
Unfortunately it also iterates through
all of the inherited properties

16
00:00:51.600 --> 00:00:53.140
which is usually your methods and so

17
00:00:53.140 --> 00:00:56.539
your methods get mixed up with your
data and it gets to be a mess.

18
00:00:57.550 --> 00:01:02.190
Fortunately we got, in ES5 we got
Object.keys which takes an object and

19
00:01:02.190 --> 00:01:06.310
returns an array of strings
which is just the enumerable

20
00:01:06.310 --> 00:01:09.990
own properties of the object which
are usually the ones you want.

21
00:01:09.990 --> 00:01:12.390
So I don't recommend using for in either.

22
00:01:14.484 --> 00:01:16.649
We already talked about the problems
with the switch statement.

23
00:01:19.930 --> 00:01:21.728
One thing about the switch
statement though.

24
00:01:21.728 --> 00:01:25.347
JavaScript improved the switch
statement in one way and

25
00:01:25.347 --> 00:01:29.870
that is that the switch value
does not need to be a number.

26
00:01:29.870 --> 00:01:34.462
It can be a string which can be very nice
cuz you can switch on a greater set of

27
00:01:34.462 --> 00:01:35.066
values.

28
00:01:35.066 --> 00:01:39.730
And the case values can be expressions,
they don't have to be constants.

29
00:01:39.730 --> 00:01:44.820
So that can be useful in doing
internationalized applications that you

30
00:01:44.820 --> 00:01:52.180
can case against a function which will
return the yes value for this language.

31
00:01:52.180 --> 00:01:55.996
It could be a nice thing,
&gt;&gt; Douglas Crockford: We have exception

32
00:01:55.996 --> 00:01:58.090
handling in this language which is nice.

33
00:01:59.420 --> 00:02:04.310
Before ES3 we didn't,
which meant that you had to write programs

34
00:02:04.310 --> 00:02:09.080
that never went wrong ever because there
is no way to recover from anything,

35
00:02:09.080 --> 00:02:11.230
that was hard, so we got exceptions now.

36
00:02:12.360 --> 00:02:14.970
You can throw literally any value.

37
00:02:14.970 --> 00:02:18.380
There's a convention that you throw
something that comes from a new

38
00:02:18.380 --> 00:02:24.210
constructor, which is the same as creating
an object that has a name property,

39
00:02:24.210 --> 00:02:25.830
and a message property.

40
00:02:25.830 --> 00:02:27.870
But in fact,
you can throw literally anything.

41
00:02:29.490 --> 00:02:35.250
So the way that exceptions are used
is very different than in Java.

42
00:02:35.250 --> 00:02:39.670
And so exception handling is very simple
because we don't have exception types.

43
00:02:39.670 --> 00:02:43.380
There's only one catch block,
and it catches everything.

44
00:02:43.380 --> 00:02:46.400
And generally,
it's going to ignore whatever it caught.

45
00:02:46.400 --> 00:02:47.650
It doesn't care what happened.

46
00:02:47.650 --> 00:02:51.320
All it knows is or
all it cares about is that didn't work, so

47
00:02:51.320 --> 00:02:52.360
let's try something else.

48
00:02:52.360 --> 00:02:53.660
Maybe it'll work instead.

49
00:02:54.900 --> 00:03:00.200
So in Java you tend to see exceptions used
to implement a form of computer go to,

50
00:03:00.200 --> 00:03:02.730
where you can get very
complicated control paths

51
00:03:02.730 --> 00:03:05.120
that are dictated by whoever
threw the exception.

52
00:03:06.200 --> 00:03:08.780
And I think that was
probably a big mistake.

53
00:03:08.780 --> 00:03:10.820
JavaScript didn't make
that particular mistake.

54
00:03:10.820 --> 00:03:16.290
So we tend to use exceptions properly.

55
00:03:16.290 --> 00:03:18.400
Use them only for failures.

56
00:03:18.400 --> 00:03:23.250
We'd never do normal control
paths using exceptions.

57
00:03:24.900 --> 00:03:25.650
&gt;&gt; Speaker 2: Sorry.

58
00:03:25.650 --> 00:03:26.370
&gt;&gt; Douglas Crockford: Yeah.

59
00:03:26.370 --> 00:03:27.600
&gt;&gt; Speaker 2: Could you clarify that?

60
00:03:27.600 --> 00:03:31.790
I didn't understand that statement.

61
00:03:31.790 --> 00:03:36.227
&gt;&gt; Douglas Crockford: So in Java there's
a tendency to look at why did this fail,

62
00:03:36.227 --> 00:03:36.870
right.

63
00:03:36.870 --> 00:03:40.286
&gt;&gt; Speaker 2: Different reasons, different
catch, try exception A, exception B,

64
00:03:40.286 --> 00:03:40.960
exception C.

65
00:03:40.960 --> 00:03:41.772
&gt;&gt; Douglas Crockford: Yeah, exactly.

66
00:03:41.772 --> 00:03:47.444
It got a whole exception cases, and so
youâ€™ve got who threw the exception,

67
00:03:47.444 --> 00:03:51.255
deciding how you're gonna
go through your code and

68
00:03:51.255 --> 00:03:57.260
that usually means that the exceptions
are not actually exceptional.

69
00:03:57.260 --> 00:04:00.860
They're just alternate control paths,
right?

70
00:04:00.860 --> 00:04:05.002
And sometimes it's motivated by weakness
in the type system that you've got

71
00:04:05.002 --> 00:04:07.168
something that wants to return an int but

72
00:04:07.168 --> 00:04:11.515
something else is gonna happen which is
not exceptional, it's just not an int.

73
00:04:11.515 --> 00:04:17.450
[SOUND] I'm out of values and so
you'll throw exception instead.

74
00:04:17.450 --> 00:04:21.117
Whereas in JavaScript because we're
loosely typed you can pass a number or

75
00:04:21.117 --> 00:04:24.720
you can pass undefined or you can pass
a string, or you can pass an object,

76
00:04:24.720 --> 00:04:27.440
you can return anything that you need to.

77
00:04:27.440 --> 00:04:30.510
And so these things are not exceptions.

78
00:04:30.510 --> 00:04:33.230
They're just more modes
of normal processing.

79
00:04:34.410 --> 00:04:36.320
So your control flows
tend to get much simpler.

80
00:04:38.610 --> 00:04:41.760
Any other questions?

81
00:04:41.760 --> 00:04:43.770
Okay, so that's the end of this hour.

82
00:04:43.770 --> 00:04:45.649
So let's take a break and we'll come back.

83
00:04:45.649 --> 00:04:48.560
&gt;&gt; Speaker 3: Hey I have
a quick question from chat.

84
00:04:48.560 --> 00:04:54.380
People were asking why you don't use for
loops and instead favor for each.

85
00:04:54.380 --> 00:04:55.090
&gt;&gt; Douglas Crockford: Yeah.

86
00:04:55.090 --> 00:04:58.700
For each is just much nicer.

87
00:05:00.040 --> 00:05:04.070
Once you get used to it,
it's more readable.

88
00:05:04.070 --> 00:05:06.950
In future versions of the language
it's going to be paralyzable.

89
00:05:09.460 --> 00:05:11.140
It's a more modern construct.

90
00:05:11.140 --> 00:05:11.990
It's more functional.

91
00:05:11.990 --> 00:05:13.370
It's more composable.

92
00:05:13.370 --> 00:05:15.600
It's better in every aspect.

93
00:05:17.220 --> 00:05:22.020
&gt;&gt; Speaker 3: What about the fact that
you can't leave a for each with a return?

94
00:05:22.020 --> 00:05:22.840
&gt;&gt; Douglas Crockford: I'm sorry?

95
00:05:22.840 --> 00:05:26.038
&gt;&gt; Speaker 3: The fact that you can't
leave a for each, like stop a for

96
00:05:26.038 --> 00:05:26.970
each loop.

97
00:05:26.970 --> 00:05:30.703
&gt;&gt; Douglas Crockford: You can, you can
instead of using for each use every,

98
00:05:30.703 --> 00:05:35.310
and then you can have something
return false and then it stops.

