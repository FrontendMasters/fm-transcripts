WEBVTT

1
00:00:00.000 --> 00:00:04.178
[MUSIC]

2
00:00:04.178 --> 00:00:07.445
&gt;&gt; Douglas Crockford: So JavaScript is
an object-oriented programming language

3
00:00:07.445 --> 00:00:10.901
which, but what it thinks an object
is is different from the most

4
00:00:10.901 --> 00:00:13.500
other object-oriented languages.

5
00:00:13.500 --> 00:00:17.340
In JavaScript, an object is simply
a dynamic collection of properties.

6
00:00:18.650 --> 00:00:22.740
Every property has a key string that
is unique within that object, and

7
00:00:22.740 --> 00:00:25.070
that key string will be
associated with any value.

8
00:00:27.900 --> 00:00:32.180
You can get a property from an object
by using the dot notation or

9
00:00:32.180 --> 00:00:36.600
the bracket notation, they can be used,
in some cases, interchangeably.

10
00:00:36.600 --> 00:00:40.160
If the bracket contains
an expression which is a string,

11
00:00:40.160 --> 00:00:44.370
which is the same as a name,
then you'll get the same property.

12
00:00:44.370 --> 00:00:51.670
That makes it possible to dynamically get
at things without use of a reflection API.

13
00:00:51.670 --> 00:00:55.930
You can set of properties of an object
simply by assigning to those properties.

14
00:00:55.930 --> 00:01:01.970
You can add new properties or modify
old properties simply by assignment,

15
00:01:01.970 --> 00:01:05.750
and you can also delete properties from
an object using a delete operator.

16
00:01:05.750 --> 00:01:07.950
Although, I very rarely see this used.

17
00:01:07.950 --> 00:01:10.730
Generally, once an object is made,
it keeps its stuff.

18
00:01:13.280 --> 00:01:18.510
One design mistake in JavaScript
is that the keys must be strings.

19
00:01:18.510 --> 00:01:23.230
It would've been better if they could've
been any value, but they're not.

20
00:01:23.230 --> 00:01:26.330
So you can pass any
type into the brackets,

21
00:01:26.330 --> 00:01:28.290
JavaScript will turn that into a string.

22
00:01:30.020 --> 00:01:33.390
So the beans, effectively,
the values have to be strings.

23
00:01:34.790 --> 00:01:37.172
We have a very nice
object literal notation,

24
00:01:37.172 --> 00:01:41.060
JavaScript's object literal notation
was the inspiration for the Jason

25
00:01:41.060 --> 00:01:45.210
data interchange format, the world's
most loved data interchange format.

26
00:01:47.809 --> 00:01:51.716
&gt;&gt; Douglas Crockford: You've got curly
braces that identify the object,

27
00:01:51.716 --> 00:01:56.520
then you've got named fields or
properties within the object.

28
00:01:59.910 --> 00:02:05.230
You don't have to put quotes around the
names if the names are valid identifiers.

29
00:02:05.230 --> 00:02:08.150
If they are not identifiers, then you
need to put the quotes around them.

30
00:02:11.360 --> 00:02:14.800
So most object oriented programming
languages are classical.

31
00:02:14.800 --> 00:02:19.420
They're all about making classes where
objects are instances of classes and

32
00:02:19.420 --> 00:02:21.700
classes inherit from other classes.

33
00:02:21.700 --> 00:02:26.970
JavaScript has a much simpler,
much more highly evolved design,

34
00:02:26.970 --> 00:02:31.320
which is based on prototypes where
objects inherit from objects and

35
00:02:31.320 --> 00:02:32.800
that's it, there are no classes.

36
00:02:33.850 --> 00:02:36.770
This was the idea that
we got from the self,

37
00:02:36.770 --> 00:02:38.670
which was an improvement over small talk.

38
00:02:39.730 --> 00:02:43.080
But it's a really controversial idea and
most people who are writing in this

39
00:02:43.080 --> 00:02:48.210
language do not understand how this really
works, but we're gonna talk about it.

40
00:02:48.210 --> 00:02:52.100
So working with prototypes
is actually very easy.

41
00:02:52.100 --> 00:02:55.280
You make an object that you like using
any of the techniques available for

42
00:02:55.280 --> 00:02:56.890
making an object.

43
00:02:56.890 --> 00:03:00.640
You can create new instances that inherit
from the object, and then you can

44
00:03:00.640 --> 00:03:05.860
customize the new instances by assigning
new properties or replacing properties.

45
00:03:07.170 --> 00:03:13.120
The classification and
taxonomy operations that you have to do in

46
00:03:13.120 --> 00:03:19.520
a classical system aren't necessary,
which turns out to be a huge win.

47
00:03:19.520 --> 00:03:23.100
So if you're working in a classical
system, when you start off,

48
00:03:23.100 --> 00:03:24.530
you have to classify all the objects.

49
00:03:24.530 --> 00:03:26.960
You have to figure out what are all
the objects, what are they composed of,

50
00:03:26.960 --> 00:03:27.921
how are they related?

51
00:03:27.921 --> 00:03:31.645
Then you make a taxonomy in which you
figure out what's going to inherit from

52
00:03:31.645 --> 00:03:35.740
what, what's gonna implement what, and
it's a really complicated hierarchy.

53
00:03:35.740 --> 00:03:38.860
Usually, you're doing that work at
the point in the project, usually,

54
00:03:38.860 --> 00:03:39.540
the beginning,

55
00:03:39.540 --> 00:03:43.370
we have the least understanding of how
the object system's actually gonna work.

56
00:03:43.370 --> 00:03:49.680
Which means it's almost certain
that you're gonna get it wrong and

57
00:03:49.680 --> 00:03:53.850
you see that in that things
don't compose properly.

58
00:03:53.850 --> 00:03:56.440
You just can't, they don't work.

59
00:03:56.440 --> 00:03:58.695
You find yourself wishing they
had multiple inheritance,

60
00:03:58.695 --> 00:04:01.280
cuz there's no way to
get from here to there.

61
00:04:01.280 --> 00:04:05.060
And as you layer in more and
more classes on top,

62
00:04:05.060 --> 00:04:10.060
you find that that brokenness starts to
seep up into all the higher layers, and

63
00:04:10.060 --> 00:04:13.210
eventually reach the point where it's so
broken that you have to refactor,

64
00:04:13.210 --> 00:04:16.390
which means have to tear it all apart and
put it back together again.

65
00:04:16.390 --> 00:04:20.430
Which is really dangerous, cuz there's a
chance it might not ever go back together

66
00:04:20.430 --> 00:04:25.660
again, and all of that is due
to the coupling of classes.

67
00:04:25.660 --> 00:04:26.700
And if you get rid of classes,

68
00:04:26.700 --> 00:04:30.760
you don't have to do any of that,
which is really quite remarkable.

69
00:04:32.470 --> 00:04:36.470
So the model that JavaScript provides
is sometimes called delegation,

70
00:04:36.470 --> 00:04:39.880
where an object can only
do what it can do and

71
00:04:39.880 --> 00:04:42.270
if there if it's asked to do
something that it can't do,

72
00:04:42.270 --> 00:04:45.910
it will designate another object
to do that work on its behalf.

73
00:04:45.910 --> 00:04:50.260
This is also called differential
inheritance, where each object will only

74
00:04:50.260 --> 00:04:55.000
contain the material which distinguishes
it from the object that it inherits from.

75
00:04:57.310 --> 00:05:01.490
The primitive in JavaScript for
making a new object is object dot create,

76
00:05:01.490 --> 00:05:05.500
where we pass it an object, which
unfortunately is called a prototype, and

77
00:05:05.500 --> 00:05:08.400
we make a new object that
inherits from the old one.

78
00:05:08.400 --> 00:05:13.370
The word prototype here is problematic
because it's so overloaded.

79
00:05:14.650 --> 00:05:17.710
All it means is, this is the object
that we want to inherit from.

80
00:05:19.570 --> 00:05:22.460
So let's diagram this.

81
00:05:22.460 --> 00:05:27.460
I'm gonna make up an object called mother,
which will have two properties,

82
00:05:27.460 --> 00:05:29.900
a and b, whose values will be 1 and 2.

83
00:05:29.900 --> 00:05:32.870
And this is the data
structure that is created.

84
00:05:32.870 --> 00:05:35.960
So we've got our key value pairs and

85
00:05:35.960 --> 00:05:40.440
we also have invisible
pointer to object.prototype.

86
00:05:40.440 --> 00:05:42.410
So whenever you make an object literal,

87
00:05:42.410 --> 00:05:46.600
it will ultimately inherit
from object.prototype.

88
00:05:46.600 --> 00:05:48.135
Then if I make a daughter object,

89
00:05:48.135 --> 00:05:51.990
I'll use object.create mother,
so I now have a daughter.

90
00:05:53.170 --> 00:05:56.218
So I've got an empty daughter
object which inherits from mother.

91
00:05:59.160 --> 00:06:02.886
&gt;&gt; Douglas Crockford: So
if I say daughter.b + 2,

92
00:06:02.886 --> 00:06:07.720
originally there is no value here.

93
00:06:07.720 --> 00:06:12.070
So we get the inherited value of b,
then we add two to it and

94
00:06:12.070 --> 00:06:14.370
store it in the daughter.

95
00:06:14.370 --> 00:06:18.890
So storing operations will always
go into the top most object, but

96
00:06:18.890 --> 00:06:21.540
reading operations can go all
the way down the prototype chain.

97
00:06:23.600 --> 00:06:26.610
And we can have these chains
go as long as you want.

98
00:06:27.710 --> 00:06:31.170
Generally, chains in this
language tend to be very shallow.

99
00:06:31.170 --> 00:06:35.760
We don't get the deep hierarchies that you
tend to see in classical languages but

100
00:06:35.760 --> 00:06:36.900
if you wanna go deep, you can.

101
00:06:39.390 --> 00:06:43.690
Then, we can add material
to the daughter object

102
00:06:43.690 --> 00:06:48.540
which has no relation to the mother
object, so we can add more stuff.

103
00:06:48.540 --> 00:06:53.609
So generally, the way we'll use this
is the mother object will be where

104
00:06:53.609 --> 00:06:59.291
we put the methods, and then the instances
will inherit those methods, okay?

105
00:07:02.493 --> 00:07:05.250
&gt;&gt; Douglas Crockford: There's
also a form Object.create (null),

106
00:07:05.250 --> 00:07:08.810
which will make an object
that inherits nothing.

107
00:07:08.810 --> 00:07:12.310
So you get an object that does not
inherit from object.prototype.

108
00:07:12.310 --> 00:07:15.250
This is handy if you want to
make something which is just

109
00:07:15.250 --> 00:07:18.350
a container of stuff and you don't want to

110
00:07:18.350 --> 00:07:21.960
be confused by stuff that you might
inherit from object.prototype.

111
00:07:21.960 --> 00:07:24.340
So this will act much
more like a hash table.

