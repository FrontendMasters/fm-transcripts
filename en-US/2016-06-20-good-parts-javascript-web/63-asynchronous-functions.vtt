WEBVTT

1
00:00:00.000 --> 00:00:03.912
[MUSIC]

2
00:00:03.912 --> 00:00:08.470
&gt;&gt; Douglas: So an alternative to all
of that are Asynchronous functions.

3
00:00:08.470 --> 00:00:11.460
Asynchronous function,s
return immediately.

4
00:00:11.460 --> 00:00:12.591
You call it, it comes right back.

5
00:00:12.591 --> 00:00:15.080
There's almost no passage of time.

6
00:00:15.080 --> 00:00:18.690
And success or failure will be
determined somehow in the future

7
00:00:18.690 --> 00:00:21.150
when the Asynchronous function returns.

8
00:00:21.150 --> 00:00:22.109
There is no solution yet.

9
00:00:22.109 --> 00:00:26.520
The solution might happen maybe later but
not now.

10
00:00:28.170 --> 00:00:33.350
So we like to use Asynchronous
functions in Turn systems.

11
00:00:33.350 --> 00:00:37.460
A Turn is started by an external event,
such as delivery of a message, or

12
00:00:37.460 --> 00:00:41.440
a completion of an asynchronous request, a
user action, or the ticking of the clock.

13
00:00:42.520 --> 00:00:45.540
That a callback function associated
with that event is called and

14
00:00:45.540 --> 00:00:47.240
it runs to completion.

15
00:00:47.240 --> 00:00:49.920
It doesn't have to worry about
races because nothing else

16
00:00:49.920 --> 00:00:52.230
will get to run until it's finished.

17
00:00:52.230 --> 00:00:53.517
When it returns, the turn ends.

18
00:00:53.517 --> 00:00:57.320
So there's no need for threads,
no races, no deadlocks.

19
00:00:57.320 --> 00:01:00.760
It's a very reliable,
very straightforward programming model.

20
00:01:00.760 --> 00:01:04.235
We call it turns because of
games that comes from chess.

21
00:01:04.235 --> 00:01:08.355
That in chess when it's my turn,
I get to control the piece.

22
00:01:08.355 --> 00:01:13.630
You don't get to touch any pieces until
my turn is done and then it exchanges.

23
00:01:13.630 --> 00:01:15.830
We're doing a similar thing
with functions and events.

24
00:01:17.920 --> 00:01:20.890
But when you're using turns
it requires that you have to

25
00:01:20.890 --> 00:01:25.650
follow the iron Law of Turns
which says you must Never block.

26
00:01:25.650 --> 00:01:26.990
You must Never wait.

27
00:01:26.990 --> 00:01:28.690
You must Finish fast.

28
00:01:28.690 --> 00:01:31.160
If you have any code which can't,
which has to block or

29
00:01:31.160 --> 00:01:33.560
has to wait or can't Finish quickly.

30
00:01:33.560 --> 00:01:36.890
It has to be isolated and
run in a separate process.

31
00:01:36.890 --> 00:01:39.820
It is not allowed to
run in the Turn system.

32
00:01:39.820 --> 00:01:41.040
So that's a cost right.

33
00:01:41.040 --> 00:01:43.030
It means,
you're allowed to run some code but

34
00:01:43.030 --> 00:01:45.970
there's some code which you're
definitely not allowed to run.

35
00:01:48.150 --> 00:01:50.050
We usually do this in an Event Loop.

36
00:01:50.050 --> 00:01:52.370
Event loops are Turn based systems.

37
00:01:52.370 --> 00:01:53.545
And they come with Pros and Cons.

38
00:01:53.545 --> 00:01:56.850
The Pro is a huge Pro.

39
00:01:56.850 --> 00:01:59.750
It is Completely free of races and
deadlocks.

40
00:01:59.750 --> 00:02:01.710
And that's a huge advantage.

41
00:02:01.710 --> 00:02:05.110
Any system that applications
should never be written.

42
00:02:05.110 --> 00:02:08.560
I think in systems that use
threads because it's just

43
00:02:08.560 --> 00:02:12.480
too hard to reason about them and
it's too unreliable.

44
00:02:12.480 --> 00:02:15.803
Another Pro is that there
is Only one stack and

45
00:02:15.803 --> 00:02:18.348
we reuse that stack on every Turn.

46
00:02:18.348 --> 00:02:22.710
So it's extremely memory efficient
which is of no interest at all.

47
00:02:22.710 --> 00:02:24.030
Again, because memory is so cheap.

48
00:02:24.030 --> 00:02:26.502
The fact that we're memory
efficient is irrelevant.

49
00:02:26.502 --> 00:02:30.134
What's more important is that
it is Very low overhead.

50
00:02:30.134 --> 00:02:34.958
Because all we're doing in the Event Loop
is take something off an Event queue,

51
00:02:34.958 --> 00:02:38.350
hand it to a function,
let it run take the next one so on.

52
00:02:38.350 --> 00:02:39.770
So there's very little overhead.

53
00:02:39.770 --> 00:02:42.860
Whereas in a threaded system,
you're doing lots of locking,

54
00:02:42.860 --> 00:02:45.570
you're doing lots of process switching,
and context switching.

55
00:02:45.570 --> 00:02:48.275
Which are the most expensive
things at CPU know how to do.

56
00:02:48.275 --> 00:02:51.575
In a term base system, you're not doing
that you're just pull something off

57
00:02:51.575 --> 00:02:53.880
the queue and running it,
pulling it and running it.

58
00:02:55.070 --> 00:02:57.619
It's also a surprisingly
Resilient programming model.

59
00:02:58.760 --> 00:03:03.217
If a Turn fails, it's usually the case
that the program can still go on.

60
00:03:03.217 --> 00:03:06.855
For example,
if you ever take any web browser and

61
00:03:06.855 --> 00:03:11.044
open up the debugger and
just go wading out into the Web.

62
00:03:11.044 --> 00:03:14.610
You're gonna see for
almost a constant string of failures.

63
00:03:15.810 --> 00:03:18.812
It's amazing how much failure is
going on in web pages all the time.

64
00:03:18.812 --> 00:03:22.990
But if you don't have a debugger open,
you don't see it.

65
00:03:22.990 --> 00:03:26.120
Now, in a threaded environment
when one of those,

66
00:03:26.120 --> 00:03:30.280
when something fails,
then there'll be an exception in one of

67
00:03:30.280 --> 00:03:35.250
the stocks in one of the threads will
get on wound and it'll try to recover.

68
00:03:35.250 --> 00:03:38.120
But that thread may now be in
an inconsistent state compared

69
00:03:38.120 --> 00:03:41.830
to the other threads because
it's lost all of this context.

70
00:03:41.830 --> 00:03:44.830
And so, that could lead to
cascading thread failures.

71
00:03:44.830 --> 00:03:47.550
And so,
it tends to be a fairly brittle model.

72
00:03:47.550 --> 00:03:51.483
Whereas, what we see in web browsers is
as long as there is any button that still

73
00:03:51.483 --> 00:03:53.044
works and the user can find it.

74
00:03:53.044 --> 00:03:57.163
There's a good chance they're going to
be able to complete the transaction and

75
00:03:57.163 --> 00:04:00.741
never know that the thing has been
failing hugely behind the scenes.

76
00:04:00.741 --> 00:04:04.010
Now, there's some important cons here.

77
00:04:04.010 --> 00:04:08.310
The most important con is that Programs
must never block commit turns must finish

78
00:04:08.310 --> 00:04:13.330
quickly that we have to obey the law
of turns, that is definitely a con but

79
00:04:13.330 --> 00:04:15.000
it's something that has to be respected.

80
00:04:16.630 --> 00:04:22.350
Also, another con is that Programs
are written inside out and

81
00:04:22.350 --> 00:04:23.820
that makes some people cry.

82
00:04:23.820 --> 00:04:25.060
They call it, it's inversion of control.

83
00:04:25.060 --> 00:04:28.747
It's unnatural, it's an unrealistic way to

84
00:04:28.747 --> 00:04:33.480
write programs which we can't
do it's too hard and [SOUND].

85
00:04:33.480 --> 00:04:35.770
But actually it turns out it's not hard.

86
00:04:35.770 --> 00:04:36.970
It's actually pretty easy.

87
00:04:38.080 --> 00:04:42.570
So we do things in Event driven systems,
they're Turned based,

88
00:04:42.570 --> 00:04:45.480
there's No pre-emption which is really
good that makes them very reliable.

89
00:04:45.480 --> 00:04:47.330
We associate Events with actions.

90
00:04:47.330 --> 00:04:50.406
And it turns out, despite the people who
are complaining that it's very hard inside

91
00:04:50.406 --> 00:04:51.152
out and unnatural.

92
00:04:51.152 --> 00:04:55.650
It's actually very Easy and
in fact beginners can do it.

93
00:04:55.650 --> 00:04:57.564
It's actually very hard.

94
00:04:57.564 --> 00:05:02.516
And in fact, it's how all user interfaces
are implemented even on systems that have

95
00:05:02.516 --> 00:05:03.294
threading.

96
00:05:03.294 --> 00:05:07.973
Because it just turns out this is the best
way to implement a User interface.

97
00:05:07.973 --> 00:05:11.751
Threading has Event loops and

98
00:05:11.751 --> 00:05:17.801
Asynchronous programming
has a long history.

99
00:05:17.801 --> 00:05:22.557
It was done in real time systems, in
experimental systems and game systems for

100
00:05:22.557 --> 00:05:23.357
a long time.

101
00:05:23.357 --> 00:05:27.570
It doesn't get into the mainstream
until the Macintosh.

102
00:05:27.570 --> 00:05:32.890
Macintosh is the first consumer device
although it's kind of expensive for

103
00:05:32.890 --> 00:05:33.780
a consumer device.

104
00:05:33.780 --> 00:05:38.670
Which is programmable only
in a Turn based manner.

105
00:05:38.670 --> 00:05:39.330
Prior to that,

106
00:05:39.330 --> 00:05:42.550
everything has been using blocking
IO going all the way back to 4chan.

107
00:05:44.640 --> 00:05:48.206
And our memory of this is that
when Apple introduced, and

108
00:05:48.206 --> 00:05:51.416
Steve Jobs introduced
the Macintosh in 1984.

109
00:05:51.416 --> 00:05:53.264
It changed the world, and

110
00:05:53.264 --> 00:05:58.590
turned Apple into one of the world's
most successful companies.

111
00:05:58.590 --> 00:06:00.520
And that's not actually what happened.

112
00:06:00.520 --> 00:06:02.690
This machine came very
close to bankrupting Apple.

113
00:06:03.870 --> 00:06:07.688
And part of the reason was that they
couldn't sell very many and the reason for

114
00:06:07.688 --> 00:06:11.274
that was that they couldn't convince
programmers to write programs for

115
00:06:11.274 --> 00:06:12.055
this machine.

116
00:06:12.055 --> 00:06:15.655
Because they'd never seen
an Event Loop before and

117
00:06:15.655 --> 00:06:19.683
didn't understand how to
write programs in that model.

118
00:06:19.683 --> 00:06:23.683
And they were complaining it's unnatural,
it's too hard, it's inside out, [SOUND],

119
00:06:23.683 --> 00:06:24.765
we're not gonna do it.

120
00:06:24.765 --> 00:06:26.391
Instead, they wrote for MS DOS.

121
00:06:26.391 --> 00:06:29.665
Which was horrible and crappy.

122
00:06:29.665 --> 00:06:35.559
One of the worst things ever imagined
which outsold this by several orders.

123
00:06:35.559 --> 00:06:37.610
It was just ridiculous.

124
00:06:38.780 --> 00:06:40.610
So the thing that changed this,

125
00:06:40.610 --> 00:06:45.600
which turned this machine into a success,
was HyperCard.

126
00:06:46.780 --> 00:06:49.600
HyperCard was a system that
was built by Bill Atkinson.

127
00:06:49.600 --> 00:06:51.563
Bill Atkinson had written, QuickDraw,

128
00:06:51.563 --> 00:06:54.261
which was the graphics layer
of the original Macintosh.

129
00:06:54.261 --> 00:06:58.617
He also wrote the first paint
program called, MacPaint.

130
00:06:58.617 --> 00:07:03.511
It's hard today to recognize it as a paint
program because it only had two colors

131
00:07:03.511 --> 00:07:04.616
black and white.

132
00:07:04.616 --> 00:07:07.282
But it was a very it came
free with a machine and

133
00:07:07.282 --> 00:07:11.648
when you bought a Macintosh that was
literally all there was to do with it.

134
00:07:11.648 --> 00:07:15.399
And so, people did a lot of stuff
with that painting called it art.

135
00:07:17.150 --> 00:07:19.526
His next program was HyperCard.

136
00:07:19.526 --> 00:07:24.340
He took MacPaint and allowed it to work
on several pictures at the same time,

137
00:07:24.340 --> 00:07:26.790
only one of which would be visible.

138
00:07:26.790 --> 00:07:32.068
He called these pictures cards and that
a file was a stack of cards or a stack.

139
00:07:32.068 --> 00:07:35.756
And then, he got the idea that he
could put buttons on the cards and

140
00:07:35.756 --> 00:07:39.313
wire those buttons to behavior and
put fields on those cards and

141
00:07:39.313 --> 00:07:41.409
allow those fields to contain text.

142
00:07:41.409 --> 00:07:44.141
Which he could then search for
and process on.

143
00:07:44.141 --> 00:07:48.812
And then,
he added an Event driven programming

144
00:07:48.812 --> 00:07:52.470
language to that called HyperTalk.

145
00:07:52.470 --> 00:07:55.910
Which was an Event driven
programming language.

146
00:07:55.910 --> 00:08:01.900
Everything in it was events and
you would say things like, on key up,

147
00:08:01.900 --> 00:08:08.050
on mouse down and so on, and
beginners loved HyperCard.

148
00:08:08.050 --> 00:08:09.840
They got all into a HyperCard.

149
00:08:09.840 --> 00:08:11.420
They were writing stuff.

150
00:08:11.420 --> 00:08:13.880
They'd start with very simple
little Event handlers and

151
00:08:13.880 --> 00:08:16.800
then start doing stuff that
was much more sophisticated.

152
00:08:16.800 --> 00:08:21.400
Inventing whole new classes of
applications that all ran into HyperCard.

153
00:08:21.400 --> 00:08:24.620
There were predictions that HyperCard
was going to be the future of

154
00:08:24.620 --> 00:08:25.529
software development.

155
00:08:26.960 --> 00:08:30.495
And it might have,
had Apple not run it into the ground.

156
00:08:30.495 --> 00:08:35.881
Atkinson originally demanded of
Steve Jobs that it be distributed for

157
00:08:35.881 --> 00:08:37.806
free with Macintoshes.

158
00:08:37.806 --> 00:08:41.819
And Jobs agreed, and
that's how they did it for several years.

159
00:08:41.819 --> 00:08:43.791
Once they saw how successful it was,

160
00:08:43.791 --> 00:08:46.789
they decided we need to figure
out how to monetize this.

161
00:08:46.789 --> 00:08:51.024
And in the process of doing
that they killed it to death.

162
00:08:51.024 --> 00:08:57.592
But it worked and it inspired stuff
that happened in the browser.

163
00:08:57.592 --> 00:09:02.400
In fact, you see that home
thing that the comps concept of

164
00:09:02.400 --> 00:09:05.315
the home page came out of HyperCard

