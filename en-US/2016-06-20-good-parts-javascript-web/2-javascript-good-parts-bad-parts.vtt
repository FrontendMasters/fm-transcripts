WEBVTT

1
00:00:00.000 --> 00:00:03.697
[MUSIC]

2
00:00:03.697 --> 00:00:05.016
&gt;&gt; Douglas: That brings us to JavaScript,

3
00:00:05.016 --> 00:00:08.150
the world's most misunderstood
programming language.

4
00:00:08.150 --> 00:00:12.990
JavaScript has some of the best parts
ever put into any programming language.

5
00:00:12.990 --> 00:00:16.090
That's extraordinary how good the good
parts of this language are, and

6
00:00:16.090 --> 00:00:18.960
we're going to spend a lot
of time exploring that.

7
00:00:18.960 --> 00:00:24.080
JavaScript also famously has more bad
parts than any other programming language.

8
00:00:24.080 --> 00:00:28.170
And in the next hour, we'll talk
about why that happened, but it does,

9
00:00:28.170 --> 00:00:32.520
now it turns out every programming
language has good parts and bad parts.

10
00:00:32.520 --> 00:00:36.570
But very few languages have as
much goodness as JavaScript or

11
00:00:36.570 --> 00:00:38.240
as much badness as JavaScript.

12
00:00:38.240 --> 00:00:44.150
JavaScript has everything from
the sublime to the completely ridiculous.

13
00:00:45.600 --> 00:00:48.570
And the analysis I'm about to do,
you could do on and

14
00:00:48.570 --> 00:00:50.740
should do on every language.

15
00:00:50.740 --> 00:00:52.720
But it's especially
telling with JavaScript.

16
00:00:54.060 --> 00:00:58.662
So because JavaScript has so
many bad parts in it,

17
00:00:58.662 --> 00:01:01.737
I wrote a program called JSLint.

18
00:01:01.737 --> 00:01:05.564
It's written in JavaScript it reads
JavaScript programs and it warns you,

19
00:01:05.564 --> 00:01:07.432
you're messing with the bad parts.

20
00:01:07.432 --> 00:01:11.146
And by cleaning that up and
sticking to the good parts,

21
00:01:11.146 --> 00:01:15.124
you end up with programs which
are substantially better.

22
00:01:15.124 --> 00:01:21.300
Which are gonna be more maintainable,
closer to perfect, that's all good stuff.

23
00:01:21.300 --> 00:01:23.710
And it's free and
everybody should be using it.

24
00:01:23.710 --> 00:01:26.290
All of your code should pass
JSLint without exceptions,

25
00:01:26.290 --> 00:01:28.000
you really want your code to be that good.

26
00:01:29.040 --> 00:01:33.400
But a lot of people don't want to do
that because it comes with this warning,

27
00:01:33.400 --> 00:01:35.890
JSLint will hurt your feelings.

28
00:01:35.890 --> 00:01:41.079
And it's true, and I hear from people
constantly crying, whining, JSLint

29
00:01:42.330 --> 00:01:48.410
you fix it, so it doesn't complain about
me because I'm awesome in that and after

30
00:01:48.410 --> 00:01:52.330
a few years a star wonder, well, wait a
minute, there's no crying in programming.

31
00:01:54.620 --> 00:01:57.883
We imagine ourselves to be the most
rational computers in the world or

32
00:01:57.883 --> 00:02:00.202
that most rational people in the world,
right?

33
00:02:00.202 --> 00:02:04.547
Because we're the ambassadors to the
computer, you can't bullshit computers,

34
00:02:04.547 --> 00:02:08.335
we imagine ourselves to be totally
completely logical about everything

35
00:02:08.335 --> 00:02:10.210
superior to all ordinary mortals.

36
00:02:11.260 --> 00:02:12.220
But it turns out,

37
00:02:12.220 --> 00:02:17.030
we get really emotional about things,
about how we write our programs.

38
00:02:18.610 --> 00:02:21.149
Questions like tabs or spaces.

39
00:02:22.470 --> 00:02:26.629
Turns out there's not a lot of data
to support one versus the other, but

40
00:02:26.629 --> 00:02:30.439
we get really emotional about it or
do curly braces go on the left or

41
00:02:30.439 --> 00:02:34.966
on the right?
&gt;&gt; Douglas: You

42
00:02:34.966 --> 00:02:38.994
can toss that question into a room with
programmers and all work is gonna stop.

43
00:02:38.994 --> 00:02:42.388
And they're gonna have these
really emotional arguments,

44
00:02:42.388 --> 00:02:46.970
because it turns out there is no data
at all to support either argument.

45
00:02:46.970 --> 00:02:51.280
There's no data which shows you get
better productivity or lower error rates.

46
00:02:51.280 --> 00:02:54.490
Any important difference,
but that doesn't matter.

47
00:02:54.490 --> 00:02:58.159
The arguments will be there and
they'll be intense.

48
00:02:59.250 --> 00:03:00.950
And they won't stop.

49
00:03:00.950 --> 00:03:04.450
And for this, I blame Ken Thompson.

50
00:03:04.450 --> 00:03:09.360
Ken Thompson is one of the most important
programmers to have ever of lived.

51
00:03:09.360 --> 00:03:10.680
We'll talk more about him later.

52
00:03:11.900 --> 00:03:13.570
He designed a language called B.

53
00:03:13.570 --> 00:03:15.700
Which inspired the language called C,

54
00:03:15.700 --> 00:03:19.200
which inspired virtually all
languages to happen since then.

55
00:03:20.580 --> 00:03:21.981
Really, really important contributions.

56
00:03:21.981 --> 00:03:29.760
And in those languages, you could put the
curly brace on the left or on the right.

57
00:03:29.760 --> 00:03:32.110
Thompson put them on the right.

58
00:03:32.110 --> 00:03:36.590
Just seemed right to him and his partner
Richie also put them on the right but

59
00:03:36.590 --> 00:03:38.699
there are other people in their lab,
who want to put them on the left.

60
00:03:39.790 --> 00:03:43.080
And I'm sure they had a meeting and
it probably went on for days and

61
00:03:43.080 --> 00:03:45.650
at some point, Thompson said,
leave me alone.

62
00:03:45.650 --> 00:03:47.740
I don't care, just, I don't care.

63
00:03:47.740 --> 00:03:48.910
Leave me alone.

64
00:03:48.910 --> 00:03:52.800
Which is a shame because he could
have said, I'm fixing my compiler so

65
00:03:52.800 --> 00:03:55.600
that you have to put them on the right and
if you put them on the left,

66
00:03:55.600 --> 00:03:57.610
it's gonna be a syntax error.

67
00:03:57.610 --> 00:04:01.695
If he had done that, who knows how many
man-centuries of time we could have saved.

68
00:04:01.695 --> 00:04:03.590
&gt;&gt; Speaker 2: [LAUGH]

69
00:04:03.590 --> 00:04:04.550
&gt;&gt; Douglas: But he didn't, so

70
00:04:04.550 --> 00:04:05.970
we are still arguing about it.

71
00:04:07.050 --> 00:04:08.580
And it's a really an emotional argument.

72
00:04:08.580 --> 00:04:11.040
So there are some things
that we can agree on.

73
00:04:11.040 --> 00:04:14.320
Everyone would agree that you should be
consistent, that you should always put

74
00:04:14.320 --> 00:04:16.110
them on the left or
you should always put them on the right,

75
00:04:16.110 --> 00:04:18.920
you shouldn't mix it up
because it looks stupid.

76
00:04:18.920 --> 00:04:21.700
We're trying really hard not to
intentionally look stupid, so

77
00:04:21.700 --> 00:04:23.110
you don't want to do that.

78
00:04:23.110 --> 00:04:27.730
And everyone will agree that however they
do it, everyone else should do it that way

79
00:04:27.730 --> 00:04:31.232
too, that it's easy, but
we can't agree on what that way is.

80
00:04:31.232 --> 00:04:34.364
So if you have someone who is used
to putting them on the left, and

81
00:04:34.364 --> 00:04:37.554
he goes to work for a shop that puts
them on the right and again say,

82
00:04:37.554 --> 00:04:39.620
well, that's how we do it.

83
00:04:39.620 --> 00:04:40.520
Gotta put them on the right.

84
00:04:40.520 --> 00:04:41.219
He's gonna start to cry.

85
00:04:41.219 --> 00:04:45.379
He goes, no, and he's gonna start
trying to come up with reasons for

86
00:04:45.379 --> 00:04:47.210
why this is wrong.

87
00:04:47.210 --> 00:04:51.150
And the gut is saying, this is wrong, this
is wrong, and system two is going, yeah,

88
00:04:51.150 --> 00:04:53.020
I know that's wrong, why is that?

89
00:04:53.020 --> 00:04:54.310
And it starts rationalizing,

90
00:04:54.310 --> 00:04:58.940
it's trying to come up with reasons
to support its deeply held belief.

91
00:04:58.940 --> 00:05:02.720
But there are no reasons and so,
he hear yourself saying things which

92
00:05:02.720 --> 00:05:06.450
are completely ridiculous, and
and it just makes you madder.

93
00:05:06.450 --> 00:05:11.000
And the madder you get the more,
and it's just this and

94
00:05:11.000 --> 00:05:12.900
it ultimately doesn't make any sense.

95
00:05:12.900 --> 00:05:15.320
Now it's sort of like driving.

96
00:05:15.320 --> 00:05:16.990
In some countries they drive on the left,
and

97
00:05:16.990 --> 00:05:18.990
in some countries they drive on the right.

98
00:05:18.990 --> 00:05:22.360
There's no data to support
one versus the other.

99
00:05:22.360 --> 00:05:24.050
You don't get better fuel efficiency or

100
00:05:24.050 --> 00:05:26.810
lower accident rates on one side or
the other.

101
00:05:26.810 --> 00:05:28.210
But wherever you are,

102
00:05:28.210 --> 00:05:31.880
it's a really good idea that everybody
be driving on the same side.

103
00:05:31.880 --> 00:05:34.470
And this is kind of like that.

104
00:05:34.470 --> 00:05:38.050
We know that there should be one answer.

105
00:05:38.050 --> 00:05:42.130
coming up with the one answer is really
hard and leaving it to chance or

106
00:05:42.130 --> 00:05:48.480
leaving it to personal taste is not
a good predictor of any kind of outcome.

107
00:05:48.480 --> 00:05:51.070
And so, we can keep wasting time on this.

108
00:05:51.070 --> 00:05:52.157
So ultimately,

109
00:05:52.157 --> 00:05:56.903
I don't know what the correct solution
to this is except in JavaScript.

110
00:05:56.903 --> 00:05:59.082
And in JavaScript I'm
absolutely convinced,

111
00:05:59.082 --> 00:06:02.630
you should always put them on the right
and never on the left, and here is why.

112
00:06:03.910 --> 00:06:07.090
So one of the really nice
things about JavaScript is,

113
00:06:07.090 --> 00:06:10.190
we can have a function
that returns an object.

114
00:06:10.190 --> 00:06:12.550
Sometimes you call those constructors.

115
00:06:12.550 --> 00:06:16.880
And JavaScript provides this really
nice thing called an object literal,

116
00:06:16.880 --> 00:06:20.470
where we can return a new object.

117
00:06:20.470 --> 00:06:22.540
That's very, very nice.

118
00:06:22.540 --> 00:06:27.000
And if you put the curly brace on the
right, it does exactly what you expect.

119
00:06:27.000 --> 00:06:30.690
But if you put the curly brace on
the left, you get a silent error.

120
00:06:30.690 --> 00:06:32.140
These are the worst kinds of errors.

121
00:06:32.140 --> 00:06:35.460
You don't get an error at compiler time,
you don't get an error at run time.

122
00:06:36.570 --> 00:06:40.130
What'll happen is your function
instead of returning a new object,

123
00:06:40.130 --> 00:06:42.520
will return the undefined value.

124
00:06:42.520 --> 00:06:47.180
So it doesn't fail here, it's gonna
fail somewhere downstream from here,

125
00:06:47.180 --> 00:06:51.078
where something will go to operate
on an object, and it's not there and

126
00:06:51.078 --> 00:06:52.140
boom, program blows up.

127
00:06:54.070 --> 00:06:56.780
And so,
you're gonna have to debug this thing.

128
00:06:56.780 --> 00:07:00.210
And you may eventually
trace it back to this line.

129
00:07:00.210 --> 00:07:03.230
And that looks right,
where did my object go?

130
00:07:03.230 --> 00:07:05.110
You can easily waste
a lot of time on this.

131
00:07:06.260 --> 00:07:08.950
So let's look at what happens,
let's zoom in on this.

132
00:07:10.400 --> 00:07:13.080
So as we're gonna find
out in the next hour,

133
00:07:13.080 --> 00:07:16.880
JavaScript was designed as a language for
beginners.

134
00:07:16.880 --> 00:07:20.448
That was the original goal, was to make
a beginner's programming language.

135
00:07:20.448 --> 00:07:23.812
But it also looks like C.

136
00:07:23.812 --> 00:07:27.720
And C was not designed for beginners.

137
00:07:27.720 --> 00:07:30.873
C syntax is really fuzzy,
it's way too complicated.

138
00:07:30.873 --> 00:07:35.560
Especially, if you're gonna give it to
people who haven't had much training.

139
00:07:35.560 --> 00:07:36.422
So how do you deal with that?

140
00:07:36.422 --> 00:07:38.691
But I think the correct answer would be,

141
00:07:38.691 --> 00:07:41.820
design a new syntax which is simple and
clear.

142
00:07:41.820 --> 00:07:43.110
He didn't do that.

143
00:07:43.110 --> 00:07:47.550
Instead, there was a feature called
automatic semi-colon insertion,

144
00:07:47.550 --> 00:07:50.980
which would attempt to insert
semi-colons in places,

145
00:07:50.980 --> 00:07:54.120
where the beginners wouldn't
know that they had to go.

146
00:07:55.230 --> 00:07:59.280
And unfortunately, it sometimes doesn't
put them in places where you think it

147
00:07:59.280 --> 00:08:02.720
should, and it sometimes puts them in
places where you think it shouldn't.

148
00:08:02.720 --> 00:08:04.470
And this is one of those times.

149
00:08:04.470 --> 00:08:08.280
So automatic semicolon insertion will
put a semicolon after that return.

150
00:08:09.830 --> 00:08:11.280
Now we've got all this other stuff.

151
00:08:12.490 --> 00:08:15.410
You would hope that something's
gonna snag a syntax error, so

152
00:08:15.410 --> 00:08:16.770
we can get some warning.

153
00:08:16.770 --> 00:08:22.050
For example, we've got the curly brace
which opens up the object literal.

154
00:08:22.050 --> 00:08:26.220
Except when you move that curly brace into
statement position, it becomes a block.

155
00:08:27.620 --> 00:08:29.730
So there's a syntactic ambiguity.

156
00:08:29.730 --> 00:08:32.330
Now JavaScript Doesn't have block scope.

157
00:08:32.330 --> 00:08:38.000
So there is no value in having
naked top level blocks but

158
00:08:38.000 --> 00:08:40.570
it does, so that masks this error.

159
00:08:40.570 --> 00:08:44.790
Then we've got ok calling,
ok colon doesn't look like a statement but

160
00:08:44.790 --> 00:08:46.290
it does look like a label.

161
00:08:47.550 --> 00:08:52.220
Now the C language had a go to statement
in it, which meant that you could

162
00:08:52.220 --> 00:08:55.130
transfer control from one
statement to any other statement.

163
00:08:56.200 --> 00:09:00.140
And we have since determined that goto
is harmful, so we don't use it anymore.

164
00:09:00.140 --> 00:09:02.790
It does not exist in JavaScript.

165
00:09:02.790 --> 00:09:03.670
Hurray for JavaScript.

166
00:09:03.670 --> 00:09:05.150
It's better than C in that respect.

167
00:09:06.280 --> 00:09:10.007
But JavaScript syntax still allows
every statement to have a label,

168
00:09:10.007 --> 00:09:14.066
even though there are only four
statements that make sense having labels.

169
00:09:14.066 --> 00:09:18.518
Because they'd make use of label break and

170
00:09:18.518 --> 00:09:23.150
that is not one of them, so that's bad.

171
00:09:23.150 --> 00:09:25.050
Although we've got a false statement,

172
00:09:25.050 --> 00:09:28.510
of false statement doesn't make any sense,
but there's another

173
00:09:28.510 --> 00:09:32.230
other thing we inherit from C which
is the useless expression statement.

174
00:09:32.230 --> 00:09:35.490
Now we can take any expression,
put it in statement position,

175
00:09:35.490 --> 00:09:38.000
put a semicolon on the end of it,
and it's now a statement.

176
00:09:39.340 --> 00:09:42.780
Now in my view, there are only
two expressions that make sense

177
00:09:42.780 --> 00:09:47.230
in statement position,
assignment and invocation.

178
00:09:47.230 --> 00:09:51.300
Everything else, I think,
should be a syntax error, but it's not.

179
00:09:51.300 --> 00:09:54.760
So this is allowed in the compiler
will look at it go false.

180
00:09:54.760 --> 00:09:59.680
Yet you're still constant,
good, I'll just go on.

181
00:09:59.680 --> 00:10:01.590
But if it's a statement,
it needs a semicolon.

182
00:10:02.640 --> 00:10:05.370
Our problem we've got some semicolon
insertion, so it comes in and

183
00:10:05.370 --> 00:10:06.040
inserts that.

184
00:10:07.320 --> 00:10:11.110
Now there's a semicolon at the end of the
block, blocks do not end with semicolons.

185
00:10:12.360 --> 00:10:14.210
But there's another feature
that we inherit from C,

186
00:10:14.210 --> 00:10:16.020
which is the empty statement.

187
00:10:16.020 --> 00:10:19.770
So anywhere you want, you can have extra
semi-colons and they all get soaked up.

188
00:10:21.740 --> 00:10:23.830
Then, all of this is unreachable code.

189
00:10:25.650 --> 00:10:29.890
That you can't possibly execute
something that comes after disruption.

190
00:10:29.890 --> 00:10:31.960
But JavaScript is okay with that.

191
00:10:31.960 --> 00:10:35.170
It allows anything you want, after
return statement without any warning.

192
00:10:37.100 --> 00:10:39.836
So if you write code that looks like that,

193
00:10:39.836 --> 00:10:44.870
the compiler thinks you're writing
code that looks like that.

194
00:10:44.870 --> 00:10:47.420
You might be thinking, this is
the stupidest thing I've ever seen.

195
00:10:49.280 --> 00:10:50.450
And you're probably not wrong.

196
00:10:52.070 --> 00:10:53.510
But that's how it exists.

197
00:10:53.510 --> 00:10:56.830
That's what this silly language does.

198
00:10:56.830 --> 00:11:02.960
If you put your curly brace on the right,
you will never experience this.

199
00:11:02.960 --> 00:11:07.021
And if you put your curly braces on
the left, this is waiting for you.

200
00:11:07.021 --> 00:11:12.613
So in thinking about programming style,
let's look at the trade offs here.

201
00:11:12.613 --> 00:11:17.640
So what is the cost of putting a curly
brace on one side versus the other?

202
00:11:18.760 --> 00:11:22.690
Zero, there's no cost,
it's just punctuation, there's no cost.

203
00:11:22.690 --> 00:11:23.980
What's the benefit?

204
00:11:23.980 --> 00:11:27.199
The benefit is you will never
waste time on this bug,

205
00:11:27.199 --> 00:11:29.843
this bug will never exist in your program.

206
00:11:29.843 --> 00:11:32.770
Is that a good benefit?

207
00:11:32.770 --> 00:11:35.640
If you can get it for
free, yeah, absolutely.

208
00:11:35.640 --> 00:11:38.060
So that's why in JavaScript, I recommend

209
00:11:38.060 --> 00:11:42.160
always put your curly braces on the left
or on the right, never on the left.

210
00:11:43.160 --> 00:11:46.330
You should prefer forms
that are error resistant.

211
00:11:46.330 --> 00:11:50.080
You should be coding in a way which
makes it harder to form new errors.

