WEBVTT

1
00:00:00.000 --> 00:00:03.878
[MUSIC]

2
00:00:03.878 --> 00:00:05.789
&gt;&gt; Douglas Crockford: Let's get into
an object oriented programming,

3
00:00:05.789 --> 00:00:07.370
what do you say?

4
00:00:07.370 --> 00:00:11.390
So when Brendan Eich designed JavaScript,

5
00:00:11.390 --> 00:00:17.500
he was very strongly influenced by a paper
that he read about the self project.

6
00:00:17.500 --> 00:00:21.410
And the self project was into
prototypes not into classes.

7
00:00:21.410 --> 00:00:22.570
And he thought, wow that's pretty neat.

8
00:00:24.030 --> 00:00:28.190
So he decided to put that in his language
but he didn't fully understand it or

9
00:00:28.190 --> 00:00:29.220
have confidence in it.

10
00:00:29.220 --> 00:00:33.620
So he came up with something
kind of intended to

11
00:00:33.620 --> 00:00:37.750
be more classical thinking that
the classical guys would like it better.

12
00:00:37.750 --> 00:00:43.980
So this is the original intended model for
how you were supposed to use JavaScript.

13
00:00:43.980 --> 00:00:45.580
So we're gonna make a Gizmo.

14
00:00:45.580 --> 00:00:47.220
That's our Gizmo constructor function.

15
00:00:47.220 --> 00:00:52.320
We'll pass in an ID and
we'll create a property

16
00:00:52.320 --> 00:00:56.729
of the object with an, that is named ID,
which will get that value.

17
00:00:58.850 --> 00:01:02.480
And we want our gizmos to
inherit a t0String method.

18
00:01:02.480 --> 00:01:07.630
So the way you do that is use
a gizmo.prototype.toString = function.

19
00:01:07.630 --> 00:01:09.880
In that function implements
the toString method.

20
00:01:12.000 --> 00:01:17.064
And the Java programmers looked at
this and said, what the hell is that,

21
00:01:17.064 --> 00:01:21.710
I mean this is awful looking that
what's this .prototype crap?

22
00:01:21.710 --> 00:01:26.630
Why you leaking your stuff and
nothing's contained in anything, right?

23
00:01:26.630 --> 00:01:31.030
You want to have your class have some
integrity, like it's wrapped in something.

24
00:01:31.030 --> 00:01:33.610
And this has its guts
spilled all over the place.

25
00:01:33.610 --> 00:01:35.760
This is just really awful.

26
00:01:35.760 --> 00:01:39.640
But this is how Brendan thought
the language was going to work.

27
00:01:39.640 --> 00:01:42.580
So let me diagram this for you, so
you can see what's actually going on.

28
00:01:43.680 --> 00:01:45.910
So this is that code,

29
00:01:45.910 --> 00:01:50.160
put up on the screen,
new gizmo is how we make the instance.

30
00:01:50.160 --> 00:01:52.430
So this is the instance of the gizmo,

31
00:01:52.430 --> 00:01:56.400
we see the ID property that
the constructor put in it.

32
00:01:56.400 --> 00:02:01.890
This is the gizmo function because in
this language functions are objects,

33
00:02:01.890 --> 00:02:04.690
so they can also have properties.

34
00:02:06.240 --> 00:02:10.200
Every function is born
with a prototype property,

35
00:02:10.200 --> 00:02:13.598
just in case it's going to be used
as a method or as a constructor.

36
00:02:13.598 --> 00:02:18.060
And the gizmo.prototype is this object.

37
00:02:18.060 --> 00:02:21.900
This is gizmo.prototype and
it contains these fields.

38
00:02:21.900 --> 00:02:25.100
This is the toString method
that we assign there.

39
00:02:25.100 --> 00:02:29.040
And the system also has the object
function that's the constructor of all

40
00:02:29.040 --> 00:02:30.200
objects.

41
00:02:30.200 --> 00:02:33.110
And we've already talked
about object.prototype,

42
00:02:33.110 --> 00:02:35.330
that's the thing that all
object literals inherit from.

43
00:02:37.210 --> 00:02:41.920
So we can add a constructor link here.

44
00:02:41.920 --> 00:02:46.375
The constructor property contains
a reference to the constructor, so

45
00:02:46.375 --> 00:02:49.216
gizmo.prototype.constructor is gizmo.

46
00:02:49.216 --> 00:02:53.586
And similarly
object.prototype.constructor is object.

47
00:02:53.586 --> 00:02:58.330
You can even go around that loop as many

48
00:02:58.330 --> 00:03:01.133
times as you want,
&gt;&gt; Douglas Crockford: But

49
00:03:01.133 --> 00:03:05.490
the important thing is the delegation
link, the inheritance link.

50
00:03:05.490 --> 00:03:09.618
So our instance inherits
from gizmo.prototype and

51
00:03:09.618 --> 00:03:13.950
gizmo.prototype inherts
from object.prototype.

52
00:03:13.950 --> 00:03:20.450
So if I ask my instance for an ID,
ID we find it here, we return the string.

53
00:03:20.450 --> 00:03:25.460
If I ask my instance for it's tooS method,
it goes I don't have one,

54
00:03:25.460 --> 00:03:30.670
he's got one so we return this function
as though It were part of this object.

55
00:03:32.240 --> 00:03:36.980
And if we ask for its foo property,
he doesn't have one,

56
00:03:36.980 --> 00:03:42.090
he doesn't have one, he doesn't have one,
It's undefined, okay?

57
00:03:43.610 --> 00:03:46.758
So that's how Brendan thought
you're going to use this language.

58
00:03:46.758 --> 00:03:52.335
And there are some good ideas in here,
but it's kind of a mess but

59
00:03:52.335 --> 00:03:57.830
you got some idea about what
JavaScript is actually doing now.

60
00:03:57.830 --> 00:04:02.102
So the new prefix, if it had been
implemented as a method instead of

61
00:04:02.102 --> 00:04:04.790
as an operator, this is what it would do.

62
00:04:06.940 --> 00:04:08.860
It would create a new object,

63
00:04:08.860 --> 00:04:15.166
which inherits from
the functions.prototype property.

64
00:04:15.166 --> 00:04:22.710
And it will then call the method passing
in that object, binding it to this,

65
00:04:22.710 --> 00:04:27.560
and getting a result and that result
is probably what's gonna get returned.

66
00:04:30.158 --> 00:04:32.820
&gt;&gt; Douglas Crockford: And again,
this is kind of a mess, so.

67
00:04:32.820 --> 00:04:35.130
But we haven't inherited much yet, so

68
00:04:35.130 --> 00:04:39.190
let's reexamine this
thinking about inheritance.

69
00:04:39.190 --> 00:04:42.040
So if we replace the original
prototype object,

70
00:04:42.040 --> 00:04:44.840
we can then inherit
another object's stuff.

71
00:04:44.840 --> 00:04:47.040
So that made no sense.

72
00:04:47.040 --> 00:04:51.290
So let's look at an example
try to figure this out.

73
00:04:51.290 --> 00:04:55.545
So we're going to make a Hoozit a Hoozit
is something that will inherit from Gizmo,

74
00:04:55.545 --> 00:04:56.530
okay?

75
00:04:56.530 --> 00:04:59.680
So we've got a Hoozit
constructor like before.

76
00:04:59.680 --> 00:05:04.650
And we're gonna replace hoozit.prototype
with an instance of Gizmo

77
00:05:06.330 --> 00:05:09.300
and then we'll add an additional method.

78
00:05:09.300 --> 00:05:12.050
We're gonna add a test
method to our new prototype.

79
00:05:13.230 --> 00:05:15.804
And the Java guys looked at this and
said what the hell is that?

80
00:05:15.804 --> 00:05:17.904
I mean we thought the other one was bad,
but holy cow,

81
00:05:17.904 --> 00:05:19.174
that's how you write extends.

82
00:05:19.174 --> 00:05:21.110
Are you serious?

83
00:05:21.110 --> 00:05:24.930
This is just, this is horrible and
this is absolutely horrible.

84
00:05:26.220 --> 00:05:29.180
So let's diagram it, let's look
at what's actually going on here.

85
00:05:31.020 --> 00:05:33.120
So here's our instance of Hoozit.

86
00:05:33.120 --> 00:05:38.264
This is the Gizmo function that
we had before in Gizmo.prototype.

87
00:05:38.264 --> 00:05:42.100
And it was our Hoozit
function in Hoozit.prototype.

88
00:05:42.100 --> 00:05:48.540
But we replace Hoozit.prototype
with this new instance of Gizmo.

89
00:05:48.540 --> 00:05:51.540
So when we add the delegation links.

90
00:05:53.300 --> 00:05:59.520
We've got that inheriting from that,
which inherits from that,

91
00:05:59.520 --> 00:06:02.880
and that will inherit from
object.prototype, but I left that one out.

92
00:06:04.480 --> 00:06:08.810
So if we ask our new instance for
its ID, we get it there.

93
00:06:08.810 --> 00:06:13.750
If we ask for its test method, no,
there it is, we'll return that method.

94
00:06:13.750 --> 00:06:19.830
If we ask for it's toString method, go no,
no, there it is, we'll return that one.

95
00:06:19.830 --> 00:06:25.560
If we ask for it's constructor property,
we'll go, no, no, yes.

96
00:06:25.560 --> 00:06:31.914
Except it's a gizmo, oops,
&gt;&gt; Douglas Crockford: So which I

97
00:06:31.914 --> 00:06:37.439
think is not that bad because you should
never ask anything what it inherits from.

98
00:06:37.439 --> 00:06:40.161
You should only be asking
what can you do and

99
00:06:40.161 --> 00:06:44.100
we should judge our objects by
the character of the contents.

100
00:06:46.180 --> 00:06:48.082
So again, it's, that's how it works.

101
00:06:48.082 --> 00:06:54.022
And one source of confusion
is that sometimes we

102
00:06:54.022 --> 00:06:59.082
consider this to be the prototype link.

103
00:06:59.082 --> 00:07:03.320
But this one is also called .prototype.

104
00:07:03.320 --> 00:07:06.875
So having two pointers, which
are designated as the prototype pointer,

105
00:07:06.875 --> 00:07:08.551
which are completely different.

106
00:07:08.551 --> 00:07:12.177
And distinct is certainly
a source of confusion as well.

107
00:07:12.177 --> 00:07:16.789
But this is how most of the people who
are writing the JavaScript are using

108
00:07:16.789 --> 00:07:17.777
the language.

109
00:07:17.777 --> 00:07:22.023
They are doing this and they are
miserable, they are hating their lives.

110
00:07:22.023 --> 00:07:24.259
And they are hating JavaScript and
they're angry and bitter.

111
00:07:24.259 --> 00:07:29.237
And wishing that their favorite
language was doing better because why

112
00:07:29.237 --> 00:07:33.125
have they come to this writing
classes in JavaScript.

113
00:07:33.125 --> 00:07:33.900
It's just awful.

114
00:07:33.900 --> 00:07:39.627
So yeah, so putting them together,

115
00:07:39.627 --> 00:07:45.732
it's just there's awful stuff here.

116
00:07:45.732 --> 00:07:51.430
There is just the head of ugliness and
in the lack of soothing syntax.

117
00:07:51.430 --> 00:07:53.010
We're not getting enough code reuse.

118
00:07:53.010 --> 00:07:56.487
For example, both constructors
create an ID property, but

119
00:07:56.487 --> 00:08:00.630
they both have to repeat that and
that it's not code reuse.

120
00:08:00.630 --> 00:08:04.440
So there are lots and
lots of JavaScript libraries in the world.

121
00:08:04.440 --> 00:08:10.040
And most of them recognize that there
is something seriously lacking here.

122
00:08:10.040 --> 00:08:13.165
And so they'll provide some mechanism for

123
00:08:13.165 --> 00:08:21.380
sugarcoating this sort of classical system
in order to make it a little bit nicer.

124
00:08:21.380 --> 00:08:25.610
For example, they might do something like
create a function called new_constructor.

125
00:08:27.430 --> 00:08:30.490
And it will make constructor functions.

126
00:08:30.490 --> 00:08:34.440
And I will pass into it the thing
that I want to inherit from.

127
00:08:34.440 --> 00:08:39.010
So I want to extend object,
I want to extend gizmo.

128
00:08:39.010 --> 00:08:41.620
And I'll pass in a constructor
function and I'll pass in

129
00:08:41.620 --> 00:08:45.910
an object containing the methods that
I want the instances to inherit.

130
00:08:47.430 --> 00:08:53.290
So it doesn't look like Java, but at least
you can recognize the components, right?

131
00:08:53.290 --> 00:08:56.680
And so
there is something nicer about this.

132
00:08:56.680 --> 00:09:00.860
And the surprising thing
about this function

133
00:09:00.860 --> 00:09:03.380
is that that's the entire function.

134
00:09:03.380 --> 00:09:06.700
So JavaScript is such
an amazingly expressive language,

135
00:09:06.700 --> 00:09:08.390
such a powerful language.

136
00:09:08.390 --> 00:09:12.090
That one little piece of
code can radically transform

137
00:09:12.090 --> 00:09:16.200
the appearance of the language,
which is pretty extraordinary,

138
00:09:17.920 --> 00:09:19.360
not a lot of languages can do that.

139
00:09:20.510 --> 00:09:22.430
Do I recommend this approach?

140
00:09:22.430 --> 00:09:26.860
No I don't, Even though this is clearly
better than using the language as

141
00:09:26.860 --> 00:09:32.240
intended, you're still stuck
in this classical paradigm.

142
00:09:32.240 --> 00:09:35.180
Except you're trying to do
classical programming in a language

143
00:09:35.180 --> 00:09:37.110
without a type system.

144
00:09:37.110 --> 00:09:39.240
And that is really really hard.

145
00:09:39.240 --> 00:09:43.130
Yeah, that classes provide
a lot of brittleness.

146
00:09:43.130 --> 00:09:47.430
And without the constant type
checking to keep you honest,

147
00:09:47.430 --> 00:09:49.950
it's really easy for things to go bad.

148
00:09:49.950 --> 00:09:53.050
And in JavaScript,
things go bad very quickly all the time.

149
00:09:53.050 --> 00:09:56.920
And that's why people who are trying
to write in this model, in JavaScript,

150
00:09:56.920 --> 00:09:58.810
are so angry at the language.

151
00:09:58.810 --> 00:10:00.830
They're constantly in a sense of rage.

