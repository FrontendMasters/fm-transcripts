WEBVTT

1
00:00:00.000 --> 00:00:04.113
[MUSIC]

2
00:00:04.113 --> 00:00:07.590
&gt;&gt; Douglas: So this is the last thing
I'm going to complain about Thompson.

3
00:00:07.590 --> 00:00:12.162
And again, I have to appreciate Thompson,
Thompson gave us Unix,

4
00:00:12.162 --> 00:00:16.347
Thompson gave us B,
which led to all of our modern languages.

5
00:00:16.347 --> 00:00:20.424
Thompson gave us regular expressions,
Thompson gave us UTF-8,

6
00:00:20.424 --> 00:00:24.007
which I think is one of
the smartest things I've ever seen.

7
00:00:24.007 --> 00:00:26.999
Thompson has given us some amazing gifts,
and

8
00:00:26.999 --> 00:00:32.910
as professional programmers, we all
owe a tremendous amount to Thompson.

9
00:00:32.910 --> 00:00:37.685
Unfortunately, Thompson had terrible taste
in programming languages, in programming

10
00:00:37.685 --> 00:00:41.781
language design, and even worse than that,
he was extremely influential.

11
00:00:41.781 --> 00:00:46.395
So all of us have been reading
Thompson's designs from our first

12
00:00:46.395 --> 00:00:48.108
hours of programming.

13
00:00:48.108 --> 00:00:52.160
And we've been doing it so
long, it all looks right to us,

14
00:00:52.160 --> 00:00:56.728
we cannot see how bad this stuff is and
how much it compromises us.

15
00:00:56.728 --> 00:01:03.781
So for example, the ++ operator, this was
added to be for doing pointer arithmetic,

16
00:01:03.781 --> 00:01:09.141
and we have since determined that
pointer arithmetic is harmful.

17
00:01:09.141 --> 00:01:10.893
So we don't do it any more,

18
00:01:10.893 --> 00:01:14.419
modern languages do not
support pointer arithmetic.

19
00:01:14.419 --> 00:01:19.206
The last popular language to
have pointer arithmetic was C++,

20
00:01:19.206 --> 00:01:23.133
a language so bad,
it was named after this operator.

21
00:01:23.133 --> 00:01:25.019
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: But

22
00:01:25.019 --> 00:01:28.772
the operator refused to die,
it's still in all of our languages,

23
00:01:28.772 --> 00:01:32.268
even though we don't need it
to increment pointers anymore.

24
00:01:32.268 --> 00:01:36.741
So now we use it to add one to variables,
which is completely unnecessary,

25
00:01:36.741 --> 00:01:37.526
but we do it.

26
00:01:37.526 --> 00:01:42.494
And unfortunately, it leads to a style of
programming in which you try to write one

27
00:01:42.494 --> 00:01:45.950
liners, in which you try to
take a whole bunch of stuff and

28
00:01:45.950 --> 00:01:48.040
try to smush it down into one line.

29
00:01:49.050 --> 00:01:51.515
And that leads to really bad code,

30
00:01:51.515 --> 00:01:55.861
stuff which is very hard to maintain,
very hard to correct.

31
00:01:55.861 --> 00:02:00.120
We've seen security errors,
buffer overruns, those sorts of things,

32
00:02:00.120 --> 00:02:04.255
this operator is always implicated
in those sorts of security errors.

33
00:02:04.255 --> 00:02:08.262
And I found in my own practice,
any time I use ++ anywhere,

34
00:02:08.262 --> 00:02:11.798
this thing takes hold of me,
and I can't control it,

35
00:02:11.798 --> 00:02:15.827
it makes me wanna take code and
try to mush it down to one line.

36
00:02:15.827 --> 00:02:20.121
Even though I know that's a stupid
thing to do, I can't control myself,

37
00:02:20.121 --> 00:02:24.209
this thing takes hold of me, and
I start writing really stupid stuff,

38
00:02:24.209 --> 00:02:26.308
thinking I'm being really smart.

39
00:02:26.308 --> 00:02:30.780
So eventually, I had to stop because
I couldn't do it a little bit.

40
00:02:30.780 --> 00:02:31.475
I had to stop completely.

41
00:02:31.475 --> 00:02:36.334
So I said no more ++,
from now on, it's +=1,

42
00:02:36.334 --> 00:02:39.508
and I can relax, and it's easy.

43
00:02:39.508 --> 00:02:40.892
I can just write good programs now.

44
00:02:44.142 --> 00:02:48.181
&gt;&gt; Douglas: Food tastes better,
it's just, everything's great.

45
00:02:48.181 --> 00:02:52.848
And for a while, I thought it was just me,
but now I'm recommending everybody

46
00:02:52.848 --> 00:02:57.323
+=1 all the time, every time,
+=1, it's great, so much better.

47
00:02:57.323 --> 00:03:01.540
But I hear from people all the time,
saying but

48
00:03:01.540 --> 00:03:06.731
I wanna be able to write x++
cuz it means the same thing,

49
00:03:06.731 --> 00:03:13.779
and instead of having to go, and I can't
go, I don't have that kind of time.

50
00:03:13.779 --> 00:03:16.768
Except that the typing time is irrelevant,

51
00:03:16.768 --> 00:03:21.146
it is completely irrelevant,
we don't spend our time typing.

52
00:03:21.146 --> 00:03:28.003
But more than that, it's ++x,
which means about the same thing as x+=1.

53
00:03:28.003 --> 00:03:32.646
So any time I see someone writing x++
in increment position, I have to ask,

54
00:03:32.646 --> 00:03:38.170
does this clown understand the difference
between pre-increment and post-increment?

55
00:03:38.170 --> 00:03:41.000
And it means I have to look at
every ++ in his program and

56
00:03:41.000 --> 00:03:42.480
ask did he get this one right?

57
00:03:42.480 --> 00:03:43.485
Did he get this one right?

58
00:03:43.485 --> 00:03:48.437
Cuz it's a little dyslexic thing, which
it's really hard to tell when you've got

59
00:03:48.437 --> 00:03:53.190
them reversed, and it causes an off by
one area that's only off for an instant.

60
00:03:53.190 --> 00:03:58.112
But that's enough to cause a bug, and
it's really hard to debug those things.

61
00:03:58.112 --> 00:04:04.110
The argument in favor of ++ is that it
improves readability, which is bullshit.

62
00:04:04.110 --> 00:04:08.024
It does not improve readability,
it improves ambiguity,

63
00:04:08.024 --> 00:04:10.960
it improves confusion,
which are things which are not desirable.

64
00:04:12.810 --> 00:04:17.682
So I was reviewing some code and
I saw ++x, ++x, so what's going on there?

65
00:04:17.682 --> 00:04:22.086
So it's possible that it was a copy and
paste error, except the code seemed to be

66
00:04:22.086 --> 00:04:26.294
working, so more likely, what had
happened was someone had done a ++x and

67
00:04:26.294 --> 00:04:30.202
then someone else noticed,
there's an off by one problem here.

68
00:04:30.202 --> 00:04:34.479
So did it again,
if the original code said +=1,

69
00:04:34.479 --> 00:04:38.860
then the obvious solution would be += 2,
right?

70
00:04:38.860 --> 00:04:43.500
And it raises the question, why do we
think we need completely different

71
00:04:43.500 --> 00:04:47.467
syntax for adding one to a variable,
then every other value?

72
00:04:47.467 --> 00:04:49.597
How does that make any sense?

73
00:04:49.597 --> 00:04:53.446
The answer is,
it does not make any sense, but

74
00:04:53.446 --> 00:04:59.571
there is this emotional attachment we
have to bad grammar in our languages

75
00:04:59.571 --> 00:05:05.027
that makes us feel ++ is that's who I am,
it's part of who I am.

76
00:05:05.027 --> 00:05:07.521
If you take ++ away from me, what am I?

77
00:05:07.521 --> 00:05:08.817
What's left?

78
00:05:08.817 --> 00:05:10.469
Wah.

79
00:05:10.469 --> 00:05:13.373
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: Wah.

80
00:05:13.373 --> 00:05:17.723
So for no cost,
by adopting a more rigorous style,

81
00:05:17.723 --> 00:05:22.385
many classes of errors can
be automatically avoided.

82
00:05:22.385 --> 00:05:25.665
So it occurred to me, so
who's writing with bad style?

83
00:05:25.665 --> 00:05:28.698
So I came up with four
classes of bad stylists, and

84
00:05:28.698 --> 00:05:33.551
I have to confess at various times in my
career, I have been all of these people.

85
00:05:33.551 --> 00:05:36.860
So first are the under educated.

86
00:05:36.860 --> 00:05:39.420
We see this a lot in web developers.

87
00:05:39.420 --> 00:05:44.299
We have people who are writing JavaScript
now who received no formal training

88
00:05:44.299 --> 00:05:49.176
in JavaScript, who taught themselves how
to do it by doing View Source of some

89
00:05:49.176 --> 00:05:51.202
of the worst code ever written,

90
00:05:51.202 --> 00:05:55.805
copies of crap going all the way back
to Dreamweaver, just awful stuff.

91
00:05:55.805 --> 00:05:59.100
And nobody ever told these people,
you can do this stuff well, right?

92
00:05:59.100 --> 00:06:01.760
They've never seen good examples,
it's just sad.

93
00:06:02.840 --> 00:06:07.520
Then there is old school,
people who are extremely skilled and

94
00:06:07.520 --> 00:06:12.280
experienced in one particular language,
and now circumstances force them to work

95
00:06:12.280 --> 00:06:17.150
in another one, where they don't have
that same knowledge or experience.

96
00:06:17.150 --> 00:06:21.716
We see this a lot now in JavaScript that
Java and C++ guys are having to go into

97
00:06:21.716 --> 00:06:26.859
JavaScript because that's where the jobs
are, and they're really bitter about it.

98
00:06:26.859 --> 00:06:27.638
And they say okay,

99
00:06:27.638 --> 00:06:31.157
I'll write in your JavaScript, but there's
no way I'm gonna know what I'm doing.

100
00:06:31.157 --> 00:06:33.429
That's principle.

101
00:06:33.429 --> 00:06:38.040
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: For some reason,

102
00:06:38.040 --> 00:06:41.450
people feel really good about not knowing
what they're doing with JavaScript.

103
00:06:42.580 --> 00:06:45.417
In fact, we know that programming
is complicated business, and

104
00:06:45.417 --> 00:06:47.388
you never want to
undertake it in ignorance.

105
00:06:47.388 --> 00:06:50.791
But for some reason, we feel really good
about being ignorant about JavaScript.

106
00:06:50.791 --> 00:06:53.280
And then there are the thrill seekers.

107
00:06:53.280 --> 00:06:56.250
These are guys who found out, hey,
did you know you can put your semicolon at

108
00:06:56.250 --> 00:06:59.232
the beginning of a statement instead
of at the end, and sometimes it works?

109
00:06:59.232 --> 00:07:00.160
Wah!

110
00:07:00.160 --> 00:07:01.993
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: And so

111
00:07:01.993 --> 00:07:05.187
they just write this stupid
looking crap just because.

112
00:07:05.187 --> 00:07:10.000
I think people like that should have
to wear helmets when they're coding.

113
00:07:11.440 --> 00:07:15.998
And finally, the exhibitionist, these
are people who will study the standard,

114
00:07:15.998 --> 00:07:19.696
study the implementations,
find all the weird corner cases, and

115
00:07:19.696 --> 00:07:23.349
there are a lot of weird,
bizarre corner cases in this language.

116
00:07:23.349 --> 00:07:26.476
And intentionally use them in
everything that they write,

117
00:07:26.476 --> 00:07:30.640
stuff where you look at and go,
what the hell's that supposed to mean?

118
00:07:30.640 --> 00:07:31.890
And they're proud of it.

119
00:07:31.890 --> 00:07:33.672
They go, look at that, you have no idea.

120
00:07:33.672 --> 00:07:35.922
But they're doing that, and

121
00:07:35.922 --> 00:07:40.516
they'll say that was intentional,
I know what I'm doing.

122
00:07:40.516 --> 00:07:45.130
And I say no, if you knew what you were
doing, you would not be doing that.

