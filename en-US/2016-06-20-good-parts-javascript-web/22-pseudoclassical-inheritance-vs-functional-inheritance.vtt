WEBVTT

1
00:00:00.000 --> 00:00:03.750
[MUSIC]

2
00:00:03.750 --> 00:00:07.380
&gt;&gt; Douglas Crockford: So let's compare
this to the pseudoclassical model.

3
00:00:08.550 --> 00:00:10.100
So you remember this.

4
00:00:10.100 --> 00:00:12.410
It's just awful with all
this stuff hanging around.

5
00:00:14.400 --> 00:00:17.930
So this is the same thing now
in this functional model.

6
00:00:17.930 --> 00:00:21.460
And the code gets a lot cleaner.

7
00:00:21.460 --> 00:00:25.610
For one thing, we don't have
the .prototype stuff hanging off the end.

8
00:00:25.610 --> 00:00:29.590
Everything is nice and neat and
contained within here.

9
00:00:29.590 --> 00:00:34.090
So the gizmo constructor very simple,
it's simply returning a new object.

10
00:00:34.090 --> 00:00:35.760
Notice the curly braces are on the right.

11
00:00:35.760 --> 00:00:37.520
So this is gonna work perfectly.

12
00:00:40.100 --> 00:00:45.710
Instead of saying this.id equals id,
we simply say id:id and we're done.

13
00:00:46.990 --> 00:00:51.030
Then our who's it is going
to make a new gizmo.

14
00:00:52.040 --> 00:00:56.464
And we're then going to add to
that function our test method or

15
00:00:56.464 --> 00:00:59.080
add to that object our test method.

16
00:00:59.080 --> 00:01:01.730
Return the object and it's done.

17
00:01:01.730 --> 00:01:04.610
So the code got a lot simpler as well.

18
00:01:04.610 --> 00:01:07.860
Yeah?
&gt;&gt; Speaker 2: I think about ten minutes

19
00:01:07.860 --> 00:01:11.510
ago, you were saying not to use this,
or that you didn't recommend it or

20
00:01:11.510 --> 00:01:12.710
even like it.
&gt;&gt; Douglas Crockford: Yeah,

21
00:01:12.710 --> 00:01:13.960
that's the next step.
&gt;&gt; Speaker 2: Okay.

22
00:01:16.270 --> 00:01:17.930
&gt;&gt; Douglas Crockford: So let's suppose we

23
00:01:17.930 --> 00:01:18.989
want to have privacy,

24
00:01:20.030 --> 00:01:23.770
which is something that I think is very
important to have in object systems.

25
00:01:23.770 --> 00:01:28.850
So that we may have a goal where
the only way to get access

26
00:01:28.850 --> 00:01:34.430
to the ID is through
the methods of the object

27
00:01:34.430 --> 00:01:39.810
that we don't want anybody to be able to
access ID except through the methods.

28
00:01:39.810 --> 00:01:45.590
JavaScript doesn't provide any way of
having privacy in the classical model,

29
00:01:45.590 --> 00:01:49.280
in the pseudo-classical model,
because everything you attach to an object

30
00:01:49.280 --> 00:01:52.240
is visible to anybody who
gets access to the object.

31
00:01:52.240 --> 00:01:53.400
So there's no privacy there.

32
00:01:54.460 --> 00:01:59.620
But the functional model, because we
have functions scope in closure, we do.

33
00:01:59.620 --> 00:02:01.680
So let's say we want to hide the IDs.

34
00:02:01.680 --> 00:02:05.532
You can only get ID through
the two string test methods.

35
00:02:05.532 --> 00:02:07.520
The code actually gets simpler.

36
00:02:08.550 --> 00:02:12.960
So instead of saying this.id
here we simply say id,

37
00:02:14.260 --> 00:02:18.810
and we're getting it from, we're closing
over the variable that got passed in.

38
00:02:18.810 --> 00:02:22.745
So it's private, it's completely private.

39
00:02:22.745 --> 00:02:24.054
And this code got simpler too.

40
00:02:24.054 --> 00:02:28.850
We got this ID, and which again,
we're getting through closure and

41
00:02:28.850 --> 00:02:31.260
the code got smaller and simpler.

42
00:02:33.480 --> 00:02:35.180
Yeah.
&gt;&gt; Speaker 3: Aren't the functions copied,

43
00:02:35.180 --> 00:02:37.220
though, then for each instance?
&gt;&gt; Douglas Crockford: Right,

44
00:02:37.220 --> 00:02:39.670
so there is a cost to this model.

45
00:02:39.670 --> 00:02:42.980
That in the prototypal
model we're saving memory,

46
00:02:42.980 --> 00:02:47.400
because we only have one of
each method per instance.

47
00:02:47.400 --> 00:02:51.680
In this one we're going to have lots
more function objects being created.

48
00:02:53.070 --> 00:02:56.770
And we'll talk more about this on Friday,
but it turns out that

49
00:02:58.440 --> 00:03:02.500
that's significant only if you've
got millions of instances.

50
00:03:02.500 --> 00:03:07.030
That memory has become so expansive,

51
00:03:07.030 --> 00:03:10.010
you've got gigabytes
of RAM in your pocket.

52
00:03:10.010 --> 00:03:14.310
Making important architectural
decisions based on memory conservation

53
00:03:14.310 --> 00:03:16.040
is not a good way to go now.

54
00:03:17.290 --> 00:03:20.850
And I would contend that if you
are worried about millions of instances,

55
00:03:20.850 --> 00:03:22.950
maybe this is not the language
you should be using.

56
00:03:24.730 --> 00:03:26.820
But for most of what we do,

57
00:03:26.820 --> 00:03:30.100
the number of objects that you're gonna
make is gonna be relatively small.

58
00:03:31.310 --> 00:03:36.220
And performance-wise,
this is gonna be great.

59
00:03:36.220 --> 00:03:38.680
So we're gonna spend a little
bit more in construction, but

60
00:03:38.680 --> 00:03:41.500
we're gonna spend a lot less in execution.

61
00:03:43.000 --> 00:03:47.603
So I think it's a win.
&gt;&gt; Speaker 2: That fact that you create

62
00:03:47.603 --> 00:03:52.662
an instance of that function for
each instance of the object,

63
00:03:52.662 --> 00:03:55.789
that's because of closure, right?

64
00:03:57.540 --> 00:04:02.310
If we can't have closure without that.
&gt;&gt; Douglas Crockford: That's

65
00:04:02.310 --> 00:04:03.830
right.
&gt;&gt; Speaker 2: Okay.

66
00:04:03.830 --> 00:04:05.260
&gt;&gt; Douglas Crockford: Yeah, because of

67
00:04:05.260 --> 00:04:07.110
closure, we're willing to pay that cost.

68
00:04:07.110 --> 00:04:08.370
&gt;&gt; Speaker 2: Right.
&gt;&gt; Douglas Crockford: And

69
00:04:08.370 --> 00:04:09.250
it's not much of a cost.

70
00:04:09.250 --> 00:04:11.280
If you look at what is
in a function object,

71
00:04:12.740 --> 00:04:17.460
there is basically an object
with two extra pointers in it.

72
00:04:17.460 --> 00:04:20.590
One for the pointer to the code, and

73
00:04:20.590 --> 00:04:24.390
one the pointer to the activation
of the creating function.

74
00:04:26.520 --> 00:04:28.700
There's not much else in there.

75
00:04:28.700 --> 00:04:35.590
There will be a link to
the prototype object,

76
00:04:35.590 --> 00:04:38.239
which is a waste because
we're not going to use that.

77
00:04:39.340 --> 00:04:39.986
That's it.
So,

78
00:04:39.986 --> 00:04:43.959
there's not much memory in those things,
not a lot of work to initialize them.

79
00:04:43.959 --> 00:04:51.281
So it's very lightweight.
&gt;&gt; Douglas Crockford: Anybody

80
00:04:51.281 --> 00:04:56.659
else?
&gt;&gt; Douglas Crockford: So this also

81
00:04:56.659 --> 00:05:03.070
solves another problem that we have in the
language which is related to this binding.

82
00:05:03.070 --> 00:05:07.170
So this is the old hoozit,
the original pseudo-classical hoozit.

83
00:05:07.170 --> 00:05:11.280
Suppose we want to take the test
function out of the object.

84
00:05:11.280 --> 00:05:16.013
Which we can do because you can copy any
object reference out of an object and

85
00:05:16.013 --> 00:05:20.693
put it in a separate variable, and
then call that variable as a function.

86
00:05:20.693 --> 00:05:25.443
That call will fail because when
we call test as a function,

87
00:05:25.443 --> 00:05:29.813
this will be bound not to
the object that it came from but

88
00:05:29.813 --> 00:05:35.420
to something else,
either to the global object or undefined.

89
00:05:35.420 --> 00:05:39.294
Either of which will
cause this test to fail.

90
00:05:39.294 --> 00:05:46.550
But in the new form because our methods
do not have this in them, we can

91
00:05:46.550 --> 00:05:51.360
take those functions, pull them out of the
object, and call them independently, and

92
00:05:51.360 --> 00:05:55.910
they still work exactly the same way
because they don't depend on this.

93
00:05:55.910 --> 00:06:00.059
So no matter how those methods are called,
they will always work correctly.

94
00:06:01.120 --> 00:06:05.640
All the fragileness of this
is completely avoided.

95
00:06:05.640 --> 00:06:07.770
&gt;&gt; Speaker 4: Just so I'm clear on this,

96
00:06:07.770 --> 00:06:14.210
in the middle one there, in your function
where you're taking the Test ID,

97
00:06:14.210 --> 00:06:19.680
you have access to ID because
it was pushed onto the heap,

98
00:06:19.680 --> 00:06:21.320
and it hasn't been garbage collected yet

99
00:06:21.320 --> 00:06:22.970
because it's rooted somewhere.

100
00:06:22.970 --> 00:06:23.640
&gt;&gt; Douglas Crockford: Right.
&gt;&gt; Speaker 4: Okay.

101
00:06:24.860 --> 00:06:25.510
&gt;&gt; Douglas Crockford: Yeah, in fact,

102
00:06:25.510 --> 00:06:27.770
it's being rooted by that object.
&gt;&gt; Speaker 4: Yeah.

103
00:06:27.770 --> 00:06:28.970
&gt;&gt; Douglas Crockford: Or by that method.

104
00:06:28.970 --> 00:06:30.500
As long as that method survives,

105
00:06:32.420 --> 00:06:35.250
the context it needs will also survive.
&gt;&gt; Speaker 4: Okay.

