WEBVTT

1
00:00:00.000 --> 00:00:03.944
[MUSIC]

2
00:00:03.944 --> 00:00:06.870
&gt;&gt; Douglas: So let's look at
the attack that we've just outlined.

3
00:00:06.870 --> 00:00:09.780
So we've got a global variable,
I'm calling it stash.

4
00:00:09.780 --> 00:00:12.520
Someone suggested a global variable and
there it is.

5
00:00:12.520 --> 00:00:16.960
Then we will store into push a function

6
00:00:16.960 --> 00:00:20.330
which will take this and
store it in that global variable.

7
00:00:21.770 --> 00:00:27.160
And then in order to get to this function
to be executed, you call append.

8
00:00:27.160 --> 00:00:32.481
append will call the push, and
because this is a method invocation,

9
00:00:32.481 --> 00:00:38.066
this will be bound to the array.
&gt;&gt; Douglas: So

10
00:00:38.066 --> 00:00:43.770
this attack exploits several
confusions that are in this language.

11
00:00:45.460 --> 00:00:50.240
The principle confusion is,
there are not arrays in this language.

12
00:00:50.240 --> 00:00:53.020
They don't behave like
arrays in other languages.

13
00:00:53.020 --> 00:00:58.220
But we think that we do and even
the people who built JavaScript engines,

14
00:00:58.220 --> 00:00:59.750
when they were shown this problem,

15
00:00:59.750 --> 00:01:04.600
they know how arrays in JavaScript work,
at least better than anybody.

16
00:01:04.600 --> 00:01:08.320
And they couldn't see it because
everybody thinks this is what arrays do.

17
00:01:08.320 --> 00:01:12.450
So when you have this I here,
even though we know we don't have

18
00:01:12.450 --> 00:01:15.320
ints in this language,
everybody thinks it's an int, right?

19
00:01:15.320 --> 00:01:18.830
So it doesn't occur to anybody
that this could be anything else.

20
00:01:20.150 --> 00:01:23.360
But it's just a key, right?

21
00:01:23.360 --> 00:01:26.760
That in fact what JavaScript will do
is it will take whatever you pass in.

22
00:01:26.760 --> 00:01:29.268
If it's not a string here it
will turn it into a string.

23
00:01:33.736 --> 00:01:35.486
&gt;&gt; Douglas: That's what JavaScript does

24
00:01:35.486 --> 00:01:40.580
but that's not how we think a programming
language should behave, right?

25
00:01:40.580 --> 00:01:45.220
And when you have a system that does
something other than what we expect,

26
00:01:45.220 --> 00:01:49.820
you get confusion and confusion can lead
to security exploits, as in this case.

27
00:01:50.840 --> 00:01:53.650
The other source of this problem is that

28
00:01:53.650 --> 00:01:58.625
all variable bindings in the language
are static, because functions scope,

29
00:01:58.625 --> 00:02:04.670
if array is defined there then this
one will be bound to that one.

30
00:02:04.670 --> 00:02:08.590
It's predictable with
the exception of this.

31
00:02:08.590 --> 00:02:10.460
This is bound dynamically.

32
00:02:12.540 --> 00:02:16.620
And so it's much harder to reason about
what the value of this is gonna be at any

33
00:02:16.620 --> 00:02:20.910
instant because it can be different
depending on where it's called and

34
00:02:20.910 --> 00:02:21.480
when it's called.

35
00:02:22.610 --> 00:02:26.380
And that turns out, if you're thinking
about the security of systems or

36
00:02:26.380 --> 00:02:29.290
the reliability of systems,
to be a bad thing.

37
00:02:30.300 --> 00:02:33.950
That's why I prefer to try to figure out
ways of programming in this language

38
00:02:33.950 --> 00:02:38.170
that don't depend on this since
this tends to be unreliable.

39
00:02:40.590 --> 00:02:43.794
So what you think of that problem,
is that interesting?

40
00:02:43.794 --> 00:02:46.304
So, now that you understand the attack,

41
00:02:46.304 --> 00:02:50.620
how would you correct this code to
prevent that attack from happening?

42
00:02:50.620 --> 00:02:52.784
Yeah?
&gt;&gt; Speaker 2: Just to give credit,

43
00:02:52.784 --> 00:02:57.584
Vincent in the chat room I think he had
got this a little bit before we did, but

44
00:02:57.584 --> 00:03:01.859
then he's saying to fix it,
he would just force the (i) to an int,

45
00:03:01.859 --> 00:03:04.490
like +i.
&gt;&gt; Douglas: That's exactly right.

46
00:03:04.490 --> 00:03:05.860
I would do that too.

47
00:03:05.860 --> 00:03:10.760
So, I would put a +i here.

48
00:03:10.760 --> 00:03:16.554
What that accomplishes is is plus
will turn the string into a number.

49
00:03:16.554 --> 00:03:21.103
If you pass in a number,
it just stays a number so it's a no op.

50
00:03:21.103 --> 00:03:26.680
But if you pass in the word push,
it will turn it into a number.

51
00:03:26.680 --> 00:03:28.210
What number does push turn into?

52
00:03:29.700 --> 00:03:33.560
NaN, and so then turn NaN into a string.

53
00:03:33.560 --> 00:03:40.060
So, we'll be storing v at array.NaN which
is stupid but at least it's not push.

54
00:03:40.060 --> 00:03:42.120
Right, so we get around that.

55
00:03:42.120 --> 00:03:45.440
The other thing we could
do is not use push,

56
00:03:45.440 --> 00:03:50.300
instead use the old fashioned way
of assigning to the current length.

57
00:03:50.300 --> 00:03:54.937
This illustrates another design
error in the language that I think

58
00:03:54.937 --> 00:04:00.090
something as fundamental as appending
to an array should be an operator.

59
00:04:00.090 --> 00:04:04.408
It should be something that's just
built into the language which can't be

60
00:04:04.408 --> 00:04:06.061
corrupted, but it's not.

61
00:04:06.061 --> 00:04:14.040
JavaScript allows, and there's also the
weird way of about how these get pound.

62
00:04:14.040 --> 00:04:18.750
So, ordinarily you would
when you call push method,

63
00:04:18.750 --> 00:04:22.930
you're going to be using
the inherited array.prototype.push.

64
00:04:22.930 --> 00:04:27.768
But when we assigned our own push
property to this object using store,

65
00:04:27.768 --> 00:04:32.284
now push is local and so
we don't look array.prototype.push.

66
00:04:33.740 --> 00:04:38.210
And that again doesn't match
most people's mindset about how

67
00:04:38.210 --> 00:04:40.831
programming language should work.

68
00:04:40.831 --> 00:04:45.634
That's probably not the kind of behavior
that you want this function to be

69
00:04:45.634 --> 00:04:49.522
able to to modify.
&gt;&gt; Douglas: So

70
00:04:49.522 --> 00:04:52.580
what do you think of that problem,
was that fun, was that interesting?

71
00:04:52.580 --> 00:04:53.645
&gt;&gt; Speaker 3: Yes.

72
00:04:53.645 --> 00:04:54.394
&gt;&gt; Douglas: Sir.

73
00:04:54.394 --> 00:04:55.135
&gt;&gt; Speaker 3: Yeah?

74
00:04:55.135 --> 00:04:59.264
Why not just give JavaScript real arrays,

75
00:04:59.264 --> 00:05:02.923
is it going to break it?
&gt;&gt; Douglas: Absolutely, break it.

76
00:05:02.923 --> 00:05:07.451
Yeah, there's code all over
the Internet that assumes this

77
00:05:07.451 --> 00:05:11.073
terrible behavior
&gt;&gt; Speaker 3: And you can't just say that

78
00:05:11.073 --> 00:05:16.860
ECMA 6 is a new standard that has a new.
&gt;&gt; Douglas: I wish, the way,

79
00:05:16.860 --> 00:05:24.448
the web is unlike any other platform
in that, if you're developing a server,

80
00:05:24.448 --> 00:05:30.920
you dictate what software is installed on
that at what revision level and so on.

81
00:05:30.920 --> 00:05:33.210
You've got control over everything
happening on the server so

82
00:05:33.210 --> 00:05:35.110
you can dictate that stuff.

83
00:05:35.110 --> 00:05:39.200
And so you can tolerate breaking changes
because you decide when you're going to

84
00:05:39.200 --> 00:05:39.740
make the change.

85
00:05:40.880 --> 00:05:46.402
But on the web, you have to run with what
ever it is that someone's got installed.

86
00:05:46.402 --> 00:05:50.337
And if they're running some awful old
thing your code is still expected to run

87
00:05:50.337 --> 00:05:52.427
on that old thing.
&gt;&gt; Speaker 3: So for ECMA 6,

88
00:05:52.427 --> 00:05:55.174
they're gonna have to have some new.

89
00:05:55.174 --> 00:05:59.696
I'm sorry, I don't how to continue,
sorry to, they're gonna have to have

90
00:05:59.696 --> 00:06:02.440
a new stuff that can eat ECMA 6, right?
&gt;&gt; Douglas: Right.

91
00:06:04.660 --> 00:06:05.967
&gt;&gt; Speaker 3: So why not create a new

92
00:06:05.967 --> 00:06:10.480
thing instead of an array, call it a list.
&gt;&gt; Douglas: They could do that,

93
00:06:10.480 --> 00:06:13.690
in fact they have added new things in ES6,
for example,

94
00:06:13.690 --> 00:06:20.080
there's a new thing called a map which
behaves like objects should behave.

95
00:06:20.080 --> 00:06:24.940
It is more correctly like a hash table and

96
00:06:24.940 --> 00:06:31.410
there are new forms for doing that but
it doesn't look like this.

97
00:06:31.410 --> 00:06:36.397
And so it's gonna be very difficult to get
people to use it because it doesn't have

98
00:06:36.397 --> 00:06:38.928
the syntactic conveniences that this one

99
00:06:38.928 --> 00:06:43.750
has
&gt;&gt; Douglas: Yeah, so the-

100
00:06:43.750 --> 00:06:45.097
&gt;&gt; Speaker 3: I know there are good

101
00:06:45.097 --> 00:06:47.880
answers for these things, I'm just
&gt;&gt; Douglas: No,

102
00:06:47.880 --> 00:06:52.770
I'm not trying to wave it off, I mean, the
web is a really, once we make a mistake

103
00:06:52.770 --> 00:06:56.310
in a web standard we're stuck with it.
&gt;&gt; Speaker 3: [LAUGH]

104
00:06:56.310 --> 00:06:57.212
&gt;&gt; Douglas: And all we can do

105
00:06:57.212 --> 00:06:59.366
is pile on more mistakes on top of it,

106
00:06:59.366 --> 00:07:03.326
we can't correct any of the stuff
that's ever been done [LAUGH] And so

107
00:07:03.326 --> 00:07:08.331
working with web standards as you all know
is incredibly frustrating because nothing

108
00:07:08.331 --> 00:07:12.870
ever gets better, it just gets bigger.
&gt;&gt; Speaker 3: They didn't get rid of

109
00:07:12.870 --> 00:07:16.730
the blank tag.
&gt;&gt; Douglas: Well, not entirely.

110
00:07:16.730 --> 00:07:21.588
I mean you can still write blink and it's
not gonna give you headaches anymore, but

111
00:07:21.588 --> 00:07:26.743
it's still allowed, it's still building
structures in the Dom, it's still there.

112
00:07:26.743 --> 00:07:30.798
And in fact, you can write CSS, which will
cause the blink to come back to life.

113
00:07:30.798 --> 00:07:31.379
&gt;&gt; Speaker 3: [INAUDIBLE] [LAUGH]

114
00:07:31.379 --> 00:07:34.806
&gt;&gt; Douglas: So it's [LAUGH]

115
00:07:34.806 --> 00:07:37.175
&gt;&gt; Speaker 4: Yeah, people have written

116
00:07:37.175 --> 00:07:40.110
JavaScript plugins in CSS.
&gt;&gt; Douglas: Yeah,

117
00:07:40.110 --> 00:07:40.807
it-
&gt;&gt; Speaker 4: Bring back

118
00:07:40.807 --> 00:07:41.810
the geocities page.

119
00:07:41.810 --> 00:07:45.110
Bring back the blink.
&gt;&gt; Douglas: Yeah, it's very,

120
00:07:45.110 --> 00:07:46.240
very hard to fix the Web.

121
00:07:47.360 --> 00:07:52.070
Cuz when something wrong happens,
the problem with the wrong

122
00:07:52.070 --> 00:07:55.660
things isn't that they're useless,
it's that they're dangerous and weird.

123
00:07:55.660 --> 00:07:58.570
And there are very clever
people who will go wow,

124
00:07:58.570 --> 00:08:00.580
that's crappy, what can I do with that?

125
00:08:00.580 --> 00:08:02.970
And they'll figure it out.

126
00:08:02.970 --> 00:08:06.760
They'll take the stupidest thing
you ever saw and it now becomes

127
00:08:06.760 --> 00:08:11.470
part of some popular library and
we can't get rid of it anymore.

