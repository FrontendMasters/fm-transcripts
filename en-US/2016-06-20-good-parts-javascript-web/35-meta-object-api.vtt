WEBVTT

1
00:00:00.000 --> 00:00:03.984
[MUSIC]

2
00:00:03.984 --> 00:00:07.597
&gt;&gt; Douglas Crockford: Then we added a Meta
Object API to give us more control over

3
00:00:07.597 --> 00:00:10.685
the attributes of
the properties of objects, so

4
00:00:10.685 --> 00:00:14.019
we can get much finer
control over what's going on.

5
00:00:14.019 --> 00:00:15.850
So, we now have two types of properties.

6
00:00:15.850 --> 00:00:20.025
We have data properties, which are the
things we've always had or it's just some

7
00:00:20.025 --> 00:00:24.220
data that you can store in the object to
retrieve and we have accessor properties.

8
00:00:24.220 --> 00:00:28.866
I showed you an example earlier with
the temperature object where we can have

9
00:00:28.866 --> 00:00:33.730
accessors and that's an, actually,
have always been accessor properties in

10
00:00:33.730 --> 00:00:38.609
the language, but they were never exposed
to you, so you couldn't make them.

11
00:00:38.609 --> 00:00:43.570
So there are things in the DOM like
a dot innerHTML is an accessor property,

12
00:00:43.570 --> 00:00:48.320
that's why you can assign something
to it and then something happens.

13
00:00:50.790 --> 00:00:55.370
And so there was a lot of interest
in allowing you to write stuff,

14
00:00:55.370 --> 00:00:59.310
which is as crappy as the DOM and
we succeeded.

15
00:00:59.310 --> 00:01:04.684
So there's no limit on the crap,
you can write now.

16
00:01:04.684 --> 00:01:07.290
So, we've got objects.

17
00:01:07.290 --> 00:01:09.510
Objects are composed of properties.

18
00:01:09.510 --> 00:01:10.834
Each property is composed of attributes.

19
00:01:10.834 --> 00:01:14.210
Every property has four attributes.

20
00:01:14.210 --> 00:01:18.589
If you're a data property, your attributes
are value, writable, enumerable and

21
00:01:18.589 --> 00:01:20.110
configurable.

22
00:01:20.110 --> 00:01:22.190
If you're an accessor property,

23
00:01:22.190 --> 00:01:27.730
your attributes are enumerable,
configurable, get and set.

24
00:01:27.730 --> 00:01:30.310
So, value is the actual
value of the property.

25
00:01:31.440 --> 00:01:34.889
Writable is a Boolean that determines
if you can read it or write it, or

26
00:01:34.889 --> 00:01:35.890
if you can write it.

27
00:01:35.890 --> 00:01:38.790
So if writeable is false, it's read only.

28
00:01:38.790 --> 00:01:43.127
It turns out the language has always
had read only properties, but

29
00:01:43.127 --> 00:01:44.994
it was never exposed to you.

30
00:01:44.994 --> 00:01:47.940
So you couldn't create them,
only the language could create them.

31
00:01:47.940 --> 00:01:52.868
So now, anybody can.

32
00:01:52.868 --> 00:01:58.060
Enumerable means it will
show up in a four n loop or

33
00:01:58.060 --> 00:02:01.363
will show up in object.keys.

34
00:02:01.363 --> 00:02:05.385
If you turn that off, it means it's not
going to show up in enumerations, which

35
00:02:05.385 --> 00:02:10.320
means you can hide it a little bit better
that it won't get dredged up all the time.

36
00:02:10.320 --> 00:02:13.312
Configurable means you can delete it or

37
00:02:13.312 --> 00:02:18.760
you can change it into an accessor
property, if it was a data property.

38
00:02:18.760 --> 00:02:22.504
Get is a function that will be called
if you try to get the property and

39
00:02:22.504 --> 00:02:25.328
set is a function that will
be called if you try to set

40
00:02:25.328 --> 00:02:30.452
the property.
&gt;&gt; Douglas Crockford: So

41
00:02:30.452 --> 00:02:33.493
having that,
we've got two versions of a statement.

42
00:02:33.493 --> 00:02:38.470
The first statement is the way you could
create an object literal in ES3 and

43
00:02:38.470 --> 00:02:42.894
the second one does exactly the same
thing in ES5, and you might be

44
00:02:42.894 --> 00:02:47.636
thinking thank you very much for that.
&gt;&gt; Speaker 2: [LAUGH]

45
00:02:47.636 --> 00:02:49.151
&gt;&gt; Douglas Crockford: That's huge.

46
00:02:49.151 --> 00:02:53.400
So the thing is we wanted to be
able to add this functionality, but

47
00:02:53.400 --> 00:02:57.580
we were constrained that
we couldn't add syntax.

48
00:02:57.580 --> 00:03:01.170
So we wanted to make it possible,
but we couldn't make it nice.

49
00:03:01.170 --> 00:03:05.480
But at least possible is better than
impossible, which is where we were.

50
00:03:05.480 --> 00:03:09.743
So, this means that a library
can now construct objects and

51
00:03:09.743 --> 00:03:12.650
can have control over what's going on.

52
00:03:12.650 --> 00:03:16.370
So, an object can designate
what it wants to inherit from.

53
00:03:16.370 --> 00:03:17.970
It doesn't have to hear
from object.prototype.

54
00:03:17.970 --> 00:03:20.042
It can inherit from anything or nothing.

55
00:03:20.042 --> 00:03:24.573
That's never been an option before,
now we can do that and

56
00:03:24.573 --> 00:03:28.098
it can say,
this property is not writeable.

57
00:03:28.098 --> 00:03:29.522
It's not enumerable.

58
00:03:29.522 --> 00:03:30.594
It's not configurable.

59
00:03:30.594 --> 00:03:33.530
So, we can allow you to
lock those things down.

60
00:03:33.530 --> 00:03:35.970
And once you set one of
those things to false,

61
00:03:35.970 --> 00:03:39.030
it can never be turned back to true again.

62
00:03:39.030 --> 00:03:42.890
So that gives you some control that
if you wanna lock your object down,

63
00:03:42.890 --> 00:03:43.700
you can now do that.

64
00:03:45.940 --> 00:03:50.510
So we added a new method,
Object.getProperty,

65
00:03:50.510 --> 00:03:53.600
which allows you to take
advantage of this stuff.

66
00:03:53.600 --> 00:03:58.000
So, this shows an example of
creating an accessory property

67
00:03:58.000 --> 00:04:00.320
without using new syntax.

68
00:04:00.320 --> 00:04:04.080
So this does something similar
to what we did before, but

69
00:04:04.080 --> 00:04:07.290
it's only using method calls and

70
00:04:07.290 --> 00:04:13.160
the advantage of this form is that you
can put an if around this and you won't

71
00:04:13.160 --> 00:04:17.310
get a syntax error if you're trying to
run it on a browser that doesn't have it.

72
00:04:17.310 --> 00:04:21.186
Whereas with the syntax form,
you can't put an if around a syntax error.

73
00:04:21.186 --> 00:04:23.427
So if you try to run it
on an older browser,

74
00:04:23.427 --> 00:04:27.863
it will simply fail
&gt;&gt; Douglas Crockford: So

75
00:04:27.863 --> 00:04:31.867
that the Meta Object API
contains Object.definedProperty,

76
00:04:31.867 --> 00:04:34.100
which I just showed you.

77
00:04:34.100 --> 00:04:39.608
Object.defineProperties, which will allow
you to define several of these at once and

78
00:04:39.608 --> 00:04:43.980
also Object.getOwnProperty descriptor,
which will return an object,

79
00:04:43.980 --> 00:04:47.000
which describes
the attributes of a property.

80
00:04:48.430 --> 00:04:52.470
I should point out that this system
was clearly designed by committee.

81
00:04:52.470 --> 00:04:55.771
You've got things like object.create and

82
00:04:55.771 --> 00:04:59.524
you get things like
getOwnPropertyDescriptor.

83
00:04:59.524 --> 00:05:00.940
Committees do stuff like that.

84
00:05:00.940 --> 00:05:04.316
There's no consistency
on how the names work.

85
00:05:04.316 --> 00:05:08.972
We added a couple of methods that
you'll probably never get to use.

86
00:05:08.972 --> 00:05:12.670
GetOwnPropertyNames, getPropertyOf.

87
00:05:12.670 --> 00:05:13.842
We added these for

88
00:05:13.842 --> 00:05:18.923
the purpose of security libraries that
want to run before everything else and

89
00:05:18.923 --> 00:05:23.459
lockdown everything that Brendan
intentionally left unlocked, so

90
00:05:23.459 --> 00:05:28.790
that the environment is now safe for third
party code to run in your environment.

91
00:05:29.980 --> 00:05:33.685
And in order to get at everything that
needed to be locked down, it needed

92
00:05:33.685 --> 00:05:37.782
special access ports drilled into the
language, so he could get at this stuff.

93
00:05:37.782 --> 00:05:43.440
So, what those libraries
are likely to do is take these.

94
00:05:43.440 --> 00:05:49.858
Use them, then destroy them, so
that nobody else can use them.

95
00:05:49.858 --> 00:05:51.154
So having all of this stuff,

96
00:05:51.154 --> 00:05:53.970
it becomes possible to do things
that we couldn't do before.

97
00:05:53.970 --> 00:05:58.030
For example,
this is the replace_prototype function.

98
00:05:58.030 --> 00:06:00.451
It makes a perfect copy of an object,

99
00:06:00.451 --> 00:06:04.210
except that it now inherits
from a different prototype.

100
00:06:05.370 --> 00:06:08.020
That's something that people have
been asking for for years and

101
00:06:08.020 --> 00:06:13.440
there is no, until now there
was no way to accomplish that.

102
00:06:13.440 --> 00:06:16.024
Now, there is.
So the function itself is an ugly looking

103
00:06:16.024 --> 00:06:18.734
function, but
you can wrap that in a name and

104
00:06:18.734 --> 00:06:23.717
now you can provide that in your library
and anybody can now make an object that's

105
00:06:23.717 --> 00:06:29.122
got a different prototype.
&gt;&gt; Douglas Crockford: It

106
00:06:29.122 --> 00:06:33.836
used to be the case that you could add
a new property to any object at any time

107
00:06:33.836 --> 00:06:37.350
simply by assigning to it and
you can now turn that off.

108
00:06:37.350 --> 00:06:41.666
If you called Object.preventExtensions and
pass it an object,

109
00:06:41.666 --> 00:06:45.280
that object will now refuse
to accept new properties.

110
00:06:45.280 --> 00:06:50.061
If you attempt to give it a new property,
it will throw an exception instead and

111
00:06:50.061 --> 00:06:52.098
we can go even further than that.

112
00:06:52.098 --> 00:06:54.552
We can freeze the object.

113
00:06:54.552 --> 00:06:59.390
Freeze prevents extensions and
also makes every property read-only and

114
00:06:59.390 --> 00:07:03.761
non-configurable, which means it
is now an immutable object and

115
00:07:03.761 --> 00:07:05.880
that has some nice properties.

116
00:07:05.880 --> 00:07:10.108
It means that future versions of
the language may be able to make some

117
00:07:10.108 --> 00:07:12.038
interesting optimizations,

118
00:07:12.038 --> 00:07:16.280
because they can make assumptions
that this object cannot change.

119
00:07:16.280 --> 00:07:20.050
That means we can be smarter in the way
we generate code for that object.

120
00:07:21.690 --> 00:07:27.340
It also means that we can take a frozen
object hand it to a third party and

121
00:07:27.340 --> 00:07:30.440
be confident that the third
party cannot corrupt or

122
00:07:30.440 --> 00:07:34.210
tamper with the object and
that's an extremely valuable thing,

123
00:07:34.210 --> 00:07:39.240
particularly as we're doing more and
more complicated stuff with more parties.

