WEBVTT

1
00:00:00.025 --> 00:00:04.057
[MUSIC]

2
00:00:04.057 --> 00:00:06.517
&gt;&gt; Douglas Crockford: I need to
demonstrate how this works because I can

3
00:00:06.517 --> 00:00:09.220
talk all day about a function and
returns a function.

4
00:00:09.220 --> 00:00:12.046
But if we don't actually mess with it,
it won't make any sense.

5
00:00:12.046 --> 00:00:15.245
So, let me start with
a very simple example.

6
00:00:15.245 --> 00:00:18.349
We're gonna make a function
called digit_name,

7
00:00:18.349 --> 00:00:23.130
digit_name will take a string or
take a number and return a string.

8
00:00:23.130 --> 00:00:25.120
Based on what that number is.

9
00:00:25.120 --> 00:00:27.760
And it will do that by returning
an element from an array of strings.

10
00:00:30.520 --> 00:00:35.750
So you can see this is very trivial and

11
00:00:35.750 --> 00:00:38.290
unfortunately there's a problem
with the way I wrote this.

12
00:00:38.290 --> 00:00:40.868
And that is I'm using a global
variable called names.

13
00:00:40.868 --> 00:00:44.828
The problem with that is If
there is anything else in my

14
00:00:44.828 --> 00:00:48.795
system that also has a global
variable called names.

15
00:00:48.795 --> 00:00:52.151
We're gonna get a conflict and
either my functional fail or

16
00:00:52.151 --> 00:00:55.970
theirs will fail or
maybe we both fail and that's bad.

17
00:00:55.970 --> 00:01:00.470
And there is no way you can test for
that because you can't anticipate

18
00:01:00.470 --> 00:01:02.899
all of the code that your code
is ever gonna have to run with.

19
00:01:03.930 --> 00:01:07.460
And this is especially a problem in
browsers if you have to run with ads,

20
00:01:08.470 --> 00:01:12.500
because ads come with some of
the worst code you've ever seen,

21
00:01:12.500 --> 00:01:15.320
because they'll pay you to
take their crap, right?

22
00:01:15.320 --> 00:01:18.402
And you can threaten them and say, we're
not gonna take your ads unless you clean

23
00:01:18.402 --> 00:01:21.142
it up, and they'll say, okay,
we'll get our money to someone else.

24
00:01:21.142 --> 00:01:25.939
And you say, all right,
just kidding, how it works and

25
00:01:25.939 --> 00:01:32.286
they use lots of global variables and
eventually your gonna get the call.

26
00:01:32.286 --> 00:01:34.996
Your stuff stopped working
because of some ad but

27
00:01:34.996 --> 00:01:38.120
it's not the ads fault it's your fault.

28
00:01:38.120 --> 00:01:42.663
So we need to reduce our
dependence on global variables.

29
00:01:42.663 --> 00:01:46.890
So here is another way that
I could write this function.

30
00:01:46.890 --> 00:01:51.280
Here I've got the digit name function and
it has a private variable called names,

31
00:01:51.280 --> 00:01:54.350
because all variables are private
within the function scope.

32
00:01:54.350 --> 00:01:56.933
So if there is a global variable
called names, no conflict, so

33
00:01:56.933 --> 00:01:58.022
that's all really good.

34
00:01:58.022 --> 00:02:03.732
The bad part is that every time I call
digit name, I'm going to have to construct

35
00:02:03.732 --> 00:02:08.692
a new array, put ten things in it just so
I can take one thing out of it.

36
00:02:08.692 --> 00:02:12.600
That's hugely expensive.

37
00:02:12.600 --> 00:02:17.410
Now an optimizing compiler might observe
that names as invariant over indications,

38
00:02:17.410 --> 00:02:19.940
and so it might try to optimize that out.

39
00:02:19.940 --> 00:02:23.750
But optimizing compilers can take
many minutes to do their work, and

40
00:02:23.750 --> 00:02:25.340
on the web we can't take many minutes.

41
00:02:25.340 --> 00:02:29.630
We have to start instantly, so the
compilers are always gonna be really fast.

42
00:02:29.630 --> 00:02:34.800
Get going quick compilers, so they're
not gonna do this so we need to do this.

43
00:02:34.800 --> 00:02:36.950
So here's a third way
to write this function.

44
00:02:38.590 --> 00:02:41.350
Here, I've got digit name, I've got
a function with the private variable

45
00:02:41.350 --> 00:02:46.990
containing the names, but
this time I'm returning a function.

46
00:02:46.990 --> 00:02:49.690
And the function I return
is going to use the name.

47
00:02:50.900 --> 00:02:55.360
And I'm calling the outer function
immediately, which means that what I'm

48
00:02:55.360 --> 00:03:00.460
going to be storing in the digit_name
is not the outer function, but

49
00:03:00.460 --> 00:03:04.280
the return value of the outer function,
which happens to be the inner function.

50
00:03:05.750 --> 00:03:06.720
And that inner function,

51
00:03:06.720 --> 00:03:12.000
because of closure, will continue to
have access to the names variable.

52
00:03:12.000 --> 00:03:14.760
Even after the green
function has returned.

53
00:03:17.080 --> 00:03:21.839
This is the most important idea we're
gonna talk about over these three days so

54
00:03:21.839 --> 00:03:27.049
I want to see everybody including you at
home nodding, like yeah, okay, I got that.

55
00:03:27.049 --> 00:03:31.860
Okay, you didn't get it,
so let's do it again.

56
00:03:33.320 --> 00:03:33.843
So let's start over.

57
00:03:33.843 --> 00:03:36.701
This is the original one, okay?

58
00:03:36.701 --> 00:03:39.050
We've got the global variable.

59
00:03:39.050 --> 00:03:41.139
We've got our our simple
digit name function.

60
00:03:41.139 --> 00:03:44.888
Now remember the thing we just
talked about with tenant and

61
00:03:44.888 --> 00:03:48.651
his correspondence principle
that we can take any value.

62
00:03:48.651 --> 00:03:53.045
Wrap it in a function that will
return that value, call that function

63
00:03:53.045 --> 00:03:58.104
immediately and it's the same thing,
so I can do that in this case.

64
00:03:58.104 --> 00:04:01.880
I'm gonna assign to
a digit_name the result

65
00:04:01.880 --> 00:04:05.340
of a function which will return
a function that I call immediately.

66
00:04:05.340 --> 00:04:10.570
So you can see that this and
this do exactly the same thing.

67
00:04:10.570 --> 00:04:13.330
This one's just a little bit more code,
okay?

68
00:04:13.330 --> 00:04:14.433
So everybody comfortable with that?

69
00:04:14.433 --> 00:04:16.067
&gt;&gt; Speaker 2: Could you show those two?

70
00:04:16.067 --> 00:04:19.177
&gt;&gt; Douglas Crockford: Yeah, so we're
got to assign a value to the variable.

71
00:04:19.177 --> 00:04:23.221
We're going to assign the result of
calling a function that will return that

72
00:04:23.221 --> 00:04:25.633
value in calling the function immediately.

73
00:04:29.744 --> 00:04:33.311
&gt;&gt; Speaker 3: So in this in this example,
is the main benefit of using this that

74
00:04:33.311 --> 00:04:37.494
we're preventing polluting the global
stack, or what are the benefits?

75
00:04:37.494 --> 00:04:39.920
&gt;&gt; Douglas Crockford: Well, that's what
we'll get to, we haven't done that yet.

76
00:04:39.920 --> 00:04:42.310
So these two are doing
exactly the same thing.

77
00:04:42.310 --> 00:04:44.131
So let's go have the global
variable problem.

78
00:04:44.131 --> 00:04:46.486
We haven't fixed anything yet.

79
00:04:47.510 --> 00:04:50.070
Getting setup.
Now you're familiar with the idea that we

80
00:04:50.070 --> 00:04:51.512
can have local variables,

81
00:04:51.512 --> 00:04:55.158
declare a variable within a function
that's local to the function.

82
00:04:55.158 --> 00:04:58.460
And we've got global variables
which all the functions can see.

83
00:04:59.470 --> 00:05:03.410
But we can have, so
that's two worlds, right,

84
00:05:03.410 --> 00:05:07.310
you can think of it as like the instance
world and the static world.

85
00:05:07.310 --> 00:05:09.010
It's not exactly like that but
it's kinda like that,

86
00:05:09.010 --> 00:05:11.650
we've got two levels of visibility.

87
00:05:11.650 --> 00:05:15.790
But we can go much finer because every
time we nest a function, we get a new

88
00:05:15.790 --> 00:05:20.480
place where we can keep stuff,
another place where you can get variables.

89
00:05:20.480 --> 00:05:24.300
And each function will
determine the visibility and

90
00:05:24.300 --> 00:05:28.760
the lifetime of the variables
that are defined inside of it.

91
00:05:28.760 --> 00:05:33.935
And so, it's not just local and
global we can now have

92
00:05:33.935 --> 00:05:38.654
in between scopes and
and they're just scopes.

93
00:05:38.654 --> 00:05:41.448
So I'm gonna make one change to this one.

94
00:05:41.448 --> 00:05:44.252
I'm gonna take this global variable and

95
00:05:44.252 --> 00:05:49.865
I'm going to just move it down one line
to be inside of the outer function, okay?

96
00:05:49.865 --> 00:05:54.721
So we've introduced a third place
where we can keep stuff which is now

97
00:05:54.721 --> 00:05:57.240
in the scope of the outer function.

98
00:05:58.610 --> 00:06:01.890
This is the same result
that we had before.

99
00:06:01.890 --> 00:06:07.600
Okay, so we've got digit name
which will receive a value

100
00:06:07.600 --> 00:06:13.080
which is a function which is obtained
from a function that we call immediately.

101
00:06:13.080 --> 00:06:16.620
And that inner function will continue
to have access to the names variable of

102
00:06:16.620 --> 00:06:17.629
the outer function.

103
00:06:21.262 --> 00:06:23.190
&gt;&gt; Douglas Crockford: So this is closure.

104
00:06:23.190 --> 00:06:27.370
This is the big idea,
the key idea in functional programming.

105
00:06:27.370 --> 00:06:29.120
And this is the good stuff.

106
00:06:29.120 --> 00:06:30.820
This is the good part.

107
00:06:30.820 --> 00:06:35.460
We're gonna spend a lot of time
tomorrow playing with this model.

108
00:06:38.220 --> 00:06:40.100
Any questions before we go
on to the next one, yeah?

109
00:06:41.100 --> 00:06:45.018
&gt;&gt; Speaker 4: So, you solved the global
variable problem by moving it in there but

110
00:06:45.018 --> 00:06:49.279
you said the solution to this was that
basically you move the invocation,

111
00:06:49.279 --> 00:06:51.016
move everything into a heap?

112
00:06:51.016 --> 00:06:57.640
Great, so now in heap are you going to
have three instances of the names array?

113
00:06:57.640 --> 00:07:01.090
If you call alert digit name
three then four then five.

114
00:07:02.470 --> 00:07:05.290
&gt;&gt; Douglas Crockford: No, so
that's a really good question.

115
00:07:05.290 --> 00:07:09.250
So you're familiar with the idea
of an activation record

116
00:07:09.250 --> 00:07:10.480
in a programming language.

117
00:07:10.480 --> 00:07:13.028
So the activation record will
contain the return address.

118
00:07:13.028 --> 00:07:18.624
Contain all the input parameters and
might also contain local

119
00:07:18.624 --> 00:07:23.691
arguments and her local variables and
stuff like that.

120
00:07:23.691 --> 00:07:28.283
So, in JavaScript, or
in a functional language like this,

121
00:07:28.283 --> 00:07:33.694
the activation, a function object
will contain a pointer to the code.

122
00:07:33.694 --> 00:07:37.201
So it knows what to execute
when the function is invoked,

123
00:07:37.201 --> 00:07:41.439
and the function object will contain
a reference to the activation of

124
00:07:41.439 --> 00:07:43.350
the function that created it.

125
00:07:45.450 --> 00:07:50.318
So this case, this function or
the object that is

126
00:07:50.318 --> 00:07:55.427
created by that function
expression will be linked

127
00:07:55.427 --> 00:08:00.797
to the context of the green
function that created it.

128
00:08:00.797 --> 00:08:05.551
So through that activation connection
it will have access to the names

129
00:08:05.551 --> 00:08:10.548
variable not to the value of the names
variable that it was created with but

130
00:08:10.548 --> 00:08:13.490
the actual names variable itself.

131
00:08:13.490 --> 00:08:15.470
It will always have access to that and

132
00:08:15.470 --> 00:08:18.790
will continue to have it
as long as it survives.

133
00:08:18.790 --> 00:08:22.730
If at some point I said digit name to

134
00:08:22.730 --> 00:08:26.660
undefined at that point all of that
stuff can get garbage collected.

135
00:08:27.980 --> 00:08:31.870
But until then,
as long as the inner function survives and

136
00:08:31.870 --> 00:08:36.329
needs that activation, it will keep it and
the garbage collector will not touch it.

137
00:08:39.180 --> 00:08:41.120
So when we call digit name,

138
00:08:41.120 --> 00:08:46.180
we'll be calling this function which will
simply go to the array and return a value.

139
00:08:46.180 --> 00:08:49.710
So we can call it with one,
two, three, and

140
00:08:49.710 --> 00:08:51.620
we're just calling it and
returning three values.

141
00:08:51.620 --> 00:08:55.349
We're not creating any stuff because
we're just calling that little function.

142
00:08:58.880 --> 00:09:02.360
&gt;&gt; Douglas Crockford: So let me show
you a slightly more complex example.

143
00:09:04.140 --> 00:09:05.950
This is the fade function.

144
00:09:05.950 --> 00:09:10.112
The fade function is something
we might run in a browser which

145
00:09:10.112 --> 00:09:12.570
will pass in the ID of a DOM element.

146
00:09:12.570 --> 00:09:17.110
And it will change the colors
of that element from

147
00:09:17.110 --> 00:09:21.872
yellow to white gradually
over a couple seconds and

148
00:09:21.872 --> 00:09:25.318
so, here is that the fade function.

149
00:09:25.318 --> 00:09:29.126
First thing it will do is,
it will use document that

150
00:09:29.126 --> 00:09:33.923
get element by ID to look up the ID and
obtain a dominant element.

151
00:09:33.923 --> 00:09:38.279
And it will create a variable called
level and it will set it to 1.

152
00:09:38.279 --> 00:09:43.048
It will create a function called step and
it will then call step timeout which

153
00:09:43.048 --> 00:09:47.780
will call step in 100 milliseconds,
and then it returns.

154
00:09:47.780 --> 00:09:52.000
So at this point, the fade function
has finished its return, it's done.

155
00:09:52.000 --> 00:09:56.352
Suddenly, 100 milliseconds later
the step function runs, so

156
00:09:56.352 --> 00:09:59.549
the step function will go
to its level variable.

157
00:09:59.549 --> 00:10:03.539
The actual level variable
of the parent function,

158
00:10:03.539 --> 00:10:06.147
and turn it into a hex character.

159
00:10:06.147 --> 00:10:11.457
It will go to the DOM element
in change its background color,

160
00:10:11.457 --> 00:10:14.905
it will go to the level variable again.

161
00:10:14.905 --> 00:10:20.530
If it's less than fifteen which will be
because it was one we will add one to it.

162
00:10:20.530 --> 00:10:25.409
We're now changing the value of
the variable in the outer function.

163
00:10:25.409 --> 00:10:28.384
And we'll call set timeout
to do this again and

164
00:10:28.384 --> 00:10:33.370
we'll keep doing it until eventually
level gets up to 15 and then we stop.

165
00:10:33.370 --> 00:10:36.422
And at that point, the garbage collector
can come in and take it all out.

166
00:10:50.002 --> 00:10:54.840
&gt;&gt; Speaker 5: So you better call
you would just say, fade 75,

167
00:10:54.840 --> 00:11:00.979
times you don't have to say,
var X equals fade 75, you just fade 75.

168
00:11:00.979 --> 00:11:03.548
&gt;&gt; Douglas Crockford: Will
be probably give it a name.

169
00:11:03.548 --> 00:11:08.270
&gt;&gt; Speaker 5: Will be garbage
collector if we don't even name?

170
00:11:08.270 --> 00:11:11.545
&gt;&gt; Douglas Crockford: No, I mean I mean
that the argument to fade will probably

171
00:11:11.545 --> 00:11:16.005
because we're talking to a DOM and
certainly has been heard to be the strings

172
00:11:16.005 --> 00:11:19.080
[INAUDIBLE] yeah, but
yeah, so we can do that.

173
00:11:19.080 --> 00:11:24.350
So suppose there are two DOM elements and
we want to feed them both simultaneously.

174
00:11:24.350 --> 00:11:26.910
So we call feed a fade be immediately.

175
00:11:28.390 --> 00:11:29.982
Will there be any conflict between them?

176
00:11:29.982 --> 00:11:33.194
And the answer is no because
every time we call fade,

177
00:11:33.194 --> 00:11:37.950
we get a new DOM variable, we get a new
level variable and a new step function.

178
00:11:37.950 --> 00:11:41.692
And they will not interfere with each
other they're all within their own

179
00:11:41.692 --> 00:11:44.220
function scopes and
will be completely unique.

180
00:11:45.780 --> 00:11:49.701
So one of the nice things about this
construction is that we get that

181
00:11:49.701 --> 00:11:50.546
separation.

182
00:11:50.546 --> 00:11:53.568
So that we can have lots
of complex behavior going

183
00:11:53.568 --> 00:11:57.191
on without those behaviors
interfering with each other.

184
00:12:00.661 --> 00:12:06.044
&gt;&gt; Speaker 5: Each time you call
fade start time out passes a new

185
00:12:06.044 --> 00:12:12.720
instance of the step function to DOM,
is that correct?

186
00:12:12.720 --> 00:12:17.795
And so, the DOM doesn't encourage
collect those step functions

187
00:12:17.795 --> 00:12:23.155
until after its invoke the timeout
after it's called out function.

188
00:12:23.155 --> 00:12:27.341
&gt;&gt; Douglas Crockford: The DOM is
only involved in that with column,

189
00:12:27.341 --> 00:12:31.869
we're looking at the style
to change the color.

190
00:12:31.869 --> 00:12:34.371
Otherwise, the dom is
not aware of that any-

191
00:12:34.371 --> 00:12:35.497
&gt;&gt; Speaker 5: I'm sorry, setTimeout is-

192
00:12:35.497 --> 00:12:36.964
&gt;&gt; Douglas Crockford: Yeah, the setTimeout

193
00:12:36.964 --> 00:12:42.090
is, doesn't actually belong to JavaScript,
it does belong to the browser.

194
00:12:42.090 --> 00:12:42.825
&gt;&gt; Speaker 5: Browser.

195
00:12:42.825 --> 00:12:43.935
&gt;&gt; Douglas Crockford: Also has it.

196
00:12:43.935 --> 00:12:49.617
Yeah, so each time we call fade,
we will make a new step function and

197
00:12:49.617 --> 00:12:55.820
we'll pass that step function many
times to set timeout until we finish.

198
00:12:58.960 --> 00:13:01.510
&gt;&gt; Speaker 5: I was just trying
to get my head around why

199
00:13:01.510 --> 00:13:03.110
step doesn't get garbage collected.

200
00:13:03.110 --> 00:13:04.300
It's because the browser.

201
00:13:06.350 --> 00:13:08.630
&gt;&gt; Douglas Crockford: Right, cuz the
browser's holding it in its timer queue.

202
00:13:08.630 --> 00:13:09.820
&gt;&gt; Speaker 5: Okay, its timer queue.

203
00:13:09.820 --> 00:13:12.600
&gt;&gt; Douglas Crockford: And and
as long as anything in the system

204
00:13:12.600 --> 00:13:15.490
is aware of something that's rooted in
the garbage collector won't touch it.

205
00:13:15.490 --> 00:13:16.555
&gt;&gt; Speaker 5: Okay, thanks.

206
00:13:16.555 --> 00:13:17.355
&gt;&gt; Douglas Crockford: Yes.

207
00:13:17.355 --> 00:13:20.207
&gt;&gt; Speaker 6: What's the initial
value of h when you declared that?

208
00:13:20.207 --> 00:13:25.615
&gt;&gt; Douglas Crockford: First
time H will be the string one.

209
00:13:25.615 --> 00:13:28.612
&gt;&gt; Speaker 6: And
then what does the two string 16 do?

210
00:13:28.612 --> 00:13:33.978
&gt;&gt; Douglas Crockford: 16,
toString 16 means make a hex character,

211
00:13:33.978 --> 00:13:37.566
so this will give us from one to F.

212
00:13:37.566 --> 00:13:40.977
And then, we add them to here so

213
00:13:40.977 --> 00:13:46.770
the file color will be pure white,
so it'll be FFFFF

