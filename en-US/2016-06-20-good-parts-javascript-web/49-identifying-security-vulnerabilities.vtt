WEBVTT

1
00:00:00.000 --> 00:00:02.912
But the function is not altered
as result of that experience,

2
00:00:02.912 --> 00:00:05.656
it doesn't remember that.
&gt;&gt; Speaker 1: So the goal is to protect

3
00:00:05.656 --> 00:00:12.080
array.
&gt;&gt; Speaker 2: Which we have started to do,

4
00:00:12.080 --> 00:00:18.280
now we've got the thing, in a function
scope, we've got methods of close over it.

5
00:00:18.280 --> 00:00:23.510
We've done all of that stuff well, but
there is a vulnerability in the language,

6
00:00:23.510 --> 00:00:29.337
which will frustrate our work.
&gt;&gt; Speaker 1: My intention is just,

7
00:00:29.337 --> 00:00:34.310
and you just have the return object,
right?

8
00:00:34.310 --> 00:00:41.560
So you could make a new,
could you potentially define a new, key of

9
00:00:41.560 --> 00:00:47.440
the function that just return array.
&gt;&gt; Speaker 2: So, you just.

10
00:00:47.440 --> 00:00:50.260
How would you do that?
&gt;&gt; Speaker 3: Yeah,

11
00:00:50.260 --> 00:00:56.207
Castor.
&gt;&gt; Speaker 2: So,

12
00:00:56.207 --> 00:00:58.724
be more explicit.
&gt;&gt; Speaker 4: So,

13
00:00:58.724 --> 00:01:04.462
you call vector that store or you pass
in a function that contains the array.

14
00:01:04.462 --> 00:01:06.320
&gt;&gt; Speaker 2: Okay, but

15
00:01:06.320 --> 00:01:10.560
the function you pass in,
is created on the outside, right?

16
00:01:10.560 --> 00:01:15.534
So that function doesn't close over the
array when it's on the outside, and so,

17
00:01:15.534 --> 00:01:19.588
only functions created on the inside
will be part of that closure.

18
00:01:24.445 --> 00:01:30.501
&gt;&gt; [INAUDIBLE].

19
00:01:30.501 --> 00:01:32.080
&gt;&gt; Speaker 2: It is possible to have

20
00:01:32.080 --> 00:01:37.787
functions to the prototypes of system
objects, and that is definitely going

21
00:01:37.787 --> 00:01:42.638
to be concerned about that's going to fix.
&gt;&gt; Speaker 3: if you were to,

22
00:01:42.638 --> 00:01:45.896
I think this is what John was saying,
if you were to,

23
00:01:45.896 --> 00:01:49.830
you can still achieve a vector,
and then you say, vector.

24
00:01:49.830 --> 00:01:53.293
Get array equals function return, array.

25
00:01:53.293 --> 00:01:58.221
But array is undefined,
because its impact scope of

26
00:01:58.221 --> 00:02:01.830
where you're creating it.
&gt;&gt; Speaker 2: That's right.

27
00:02:04.080 --> 00:02:06.890
So that's good, that's a place
where the language is working for

28
00:02:06.890 --> 00:02:07.443
us.
&gt;&gt; [CROSSTALK]

29
00:02:07.443 --> 00:02:08.101
&gt;&gt; Speaker 2: Yeah,

30
00:02:08.101 --> 00:02:11.834
that's not where the language is weak.

31
00:02:25.162 --> 00:02:28.298
&gt;&gt; Speaker 4: If you inherit from vector,

32
00:02:28.298 --> 00:02:34.121
do you have access to the [INAUDIBLE].
&gt;&gt; Speaker 2: Really good question,

33
00:02:34.121 --> 00:02:38.183
no, because functions go
stop work like JavaScopes,

34
00:02:38.183 --> 00:02:41.664
you know there's no package kind of thing.

35
00:02:41.664 --> 00:02:45.850
So, no you don't inherit
the contents of a function scope.

36
00:02:45.850 --> 00:02:51.624
Can you twiddle with that function.
&gt;&gt; Speaker 3: So, vector, your instance

37
00:02:51.624 --> 00:02:57.020
that.get, has this function in it.

38
00:02:57.020 --> 00:02:57.750
Can you, it is a function.

39
00:02:57.750 --> 00:03:03.093
Is there some way to manipulate
the guts of that function once

40
00:03:03.093 --> 00:03:09.929
you have a pointer to it?
&gt;&gt; Speaker 2: No.

41
00:03:11.140 --> 00:03:12.920
No, functions.

42
00:03:12.920 --> 00:03:15.390
Yeah, you could store a function.

43
00:03:15.390 --> 00:03:17.750
You could use store to put
a function through an array and

44
00:03:17.750 --> 00:03:20.260
then use get, to get it back out.

45
00:03:20.260 --> 00:03:23.520
But the function is not altered
as result of that experience,

46
00:03:23.520 --> 00:03:25.490
it doesn't remember that.
&gt;&gt; Speaker 3: The function doesn't have

47
00:03:25.490 --> 00:03:27.040
any properties that you could go and

48
00:03:28.230 --> 00:03:29.480
pick at.
&gt;&gt; Speaker 2: Right.

49
00:03:29.480 --> 00:03:30.760
&gt;&gt; Speaker 3: Where change, so

50
00:03:30.760 --> 00:03:34.760
that when you call the next time,
it gives you something completely

51
00:03:34.760 --> 00:03:35.960
different.
&gt;&gt; Speaker 2: Right.

52
00:03:37.060 --> 00:03:38.330
&gt;&gt; Speaker 4: If I tack a function onto

53
00:03:38.330 --> 00:03:39.970
that and call this.

54
00:03:39.970 --> 00:03:43.986
Does this have access to the array?
&gt;&gt; Speaker 2: You are on to

55
00:03:43.986 --> 00:03:49.601
something.
&gt;&gt; Speaker 4: So

56
00:03:49.601 --> 00:03:53.347
if I had called append on function code,
screw it up,

57
00:03:53.347 --> 00:03:57.780
and if screw it up, and said,
this .array equals a new array.

58
00:04:01.090 --> 00:04:04.340
&gt;&gt; Speaker 2: It wouldn't be this .array,

59
00:04:04.340 --> 00:04:10.250
because there is not an object which
represents The contents of the scope.

60
00:04:10.250 --> 00:04:14.710
But this is,
definitely part of the attack.

61
00:04:14.710 --> 00:04:15.690
&gt;&gt; Speaker 3: Can we change push,

62
00:04:15.690 --> 00:04:19.250
so that we said array?

63
00:04:19.250 --> 00:04:24.100
We changed what the prototypical
push of an array,

64
00:04:24.100 --> 00:04:29.470
does so that, it returns its own value.
&gt;&gt; Speaker 2: Yeah, yeah

65
00:04:32.380 --> 00:04:38.597
you are getting close.
&gt;&gt; Speaker 3: Okay.

66
00:04:38.597 --> 00:04:42.960
Okay so the return (i), that, the third
function doesn't return anything.

67
00:04:42.960 --> 00:04:43.970
So that's not gonna get it out.

68
00:04:43.970 --> 00:04:45.840
The second one doesn't return anything.

69
00:04:45.840 --> 00:04:46.990
So that's not gonna get it out.

70
00:04:46.990 --> 00:04:51.845
Or, actually, if you pass in an array,

71
00:04:51.845 --> 00:04:54.870
to store,

72
00:04:54.870 --> 00:05:00.350
you could change, or

73
00:05:00.350 --> 00:05:05.490
no, you could pass in an array to append,
and change push, so that what push does.

74
00:05:05.490 --> 00:05:12.390
It takes the thing that you've passed in,
and pushes onto the end of it, itself.

75
00:05:12.390 --> 00:05:16.923
So you call append with this array, and
then you get the last thing of the array,

76
00:05:16.923 --> 00:05:20.429
and that's the array you want.
&gt;&gt; Speaker 2: No, that wouldn't work,

77
00:05:20.429 --> 00:05:24.480
yeah, you're drifting away,
you almost had it.

78
00:05:24.480 --> 00:05:26.021
You were very, very close

79
00:05:33.844 --> 00:05:36.751
&gt;&gt; Speaker 4: Push a function at the end

80
00:05:36.751 --> 00:05:42.703
of the array, using append,
and then you use get,

81
00:05:42.703 --> 00:05:47.430
to call that function, so.
&gt;&gt; Speaker 2: You can do that.

82
00:05:47.430 --> 00:05:52.610
But, the function, the function does
not remember that, that happened.

83
00:05:52.610 --> 00:05:59.017
So it is not altered by that.
&gt;&gt; Speaker 3: How do you,

84
00:05:59.017 --> 00:06:03.080
in JavaScope change
the function of a prototype,

85
00:06:03.080 --> 00:06:07.239
you trick like a radar prototype .push,
and now,

86
00:06:07.239 --> 00:06:10.690
you're gonna okay.
&gt;&gt; Speaker 2: That's exactly it.

87
00:06:10.690 --> 00:06:13.310
Yeah, you could go to
array.prototype.push.

88
00:06:13.310 --> 00:06:14.980
But we're assuming that,
that's been fixed.

89
00:06:16.760 --> 00:06:19.490
So one of the aspects of
the design of JavaScript,

90
00:06:19.490 --> 00:06:25.220
is that everything is unlocked
with its guts exposed, and

91
00:06:25.220 --> 00:06:28.030
If you think about security,
that's obviously a terrible thing.

92
00:06:28.030 --> 00:06:29.630
So we're assuming that, that's been fixed.

93
00:06:30.740 --> 00:06:34.864
So we're concerned not just with
the performance of ordinary

94
00:06:34.864 --> 00:06:40.037
programs.
&gt;&gt; Speaker 4: So

95
00:06:40.037 --> 00:06:43.500
if you were to store a function,

96
00:06:43.500 --> 00:06:48.732
that calls this .array
&gt;&gt; Speaker 4: You

97
00:06:48.732 --> 00:06:53.692
still wouldn't have access to array.
&gt;&gt; Speaker 2: This .array

98
00:06:53.692 --> 00:06:58.015
won't get you there, but
this itself will get you there.

99
00:07:04.490 --> 00:07:06.208
&gt;&gt; Speaker 4: There were times this.

100
00:07:06.208 --> 00:07:06.746
&gt;&gt; Speaker 2: Yes.

101
00:07:18.142 --> 00:07:19.440
&gt;&gt; Speaker 3: I got it.

102
00:07:19.440 --> 00:07:24.310
It was, what I described exactly did it,
everyone at the radar prototype.push.

103
00:07:24.310 --> 00:07:30.110
Equals functional a,
a brackets zero equals this.

104
00:07:31.390 --> 00:07:32.750
So they're not creating array one, two,

105
00:07:32.750 --> 00:07:34.940
three, four.
&gt;&gt; Speaker 2: Right?

106
00:07:34.940 --> 00:07:37.355
&gt;&gt; Speaker 3: They are creating array x,

107
00:07:37.355 --> 00:07:43.170
into array, and then I call My
first array.push passing in x.

108
00:07:43.170 --> 00:07:50.640
The two bit empty array, took away
itself made that the first element of x.

109
00:07:50.640 --> 00:07:54.810
So, they pass into it and
now x, the first element of x,

110
00:07:54.810 --> 00:07:56.950
is the array I want to hack out.
&gt;&gt; Speaker 2: Right.

111
00:07:56.950 --> 00:08:03.790
I've said it a couple of times, we're not
looking for array dot prototype, that

112
00:08:03.790 --> 00:08:06.790
we're assuming that, that's been fixed.
&gt;&gt; Speaker 3: I'm

113
00:08:06.790 --> 00:08:09.470
sorry, Array dot prototype
is fixed in the new

114
00:08:09.470 --> 00:08:12.040
version of language.
&gt;&gt; Speaker 2: No, we're assuming in

115
00:08:12.040 --> 00:08:16.540
the context of this problem, that, that's
been fixed, because of the very thing,

116
00:08:16.540 --> 00:08:20.480
that you just described.
&gt;&gt; Speaker 4: It has nothing to do

117
00:08:20.480 --> 00:08:23.680
with using the call method?
&gt;&gt; Speaker 2: It

118
00:08:23.680 --> 00:08:25.100
does not require use of the call method.

