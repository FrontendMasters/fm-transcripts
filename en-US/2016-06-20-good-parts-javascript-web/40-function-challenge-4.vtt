WEBVTT

1
00:00:00.000 --> 00:00:03.744
[MUSIC]

2
00:00:03.744 --> 00:00:08.193
&gt;&gt; Douglas: Write a from a function that
produces a generator that will produce

3
00:00:08.193 --> 00:00:09.551
a series of values.

4
00:00:09.551 --> 00:00:13.199
So, we're going to pass
a zero to the from function.

5
00:00:13.199 --> 00:00:16.710
It will return a generator in
this case I'm calling it index.

6
00:00:16.710 --> 00:00:21.653
Every time I call index,
it will return the next value in

7
00:00:21.653 --> 00:00:26.292
the sequence that started
with the starting value.

8
00:00:26.292 --> 00:00:29.254
&gt;&gt; Speaker 2: What's a generator?

9
00:00:29.254 --> 00:00:31.636
&gt;&gt; Douglas: Generator is
a function that will make things.

10
00:00:31.636 --> 00:00:37.288
So each time you call a generator,
you'll get another thing.

11
00:00:37.288 --> 00:00:41.616
In this case,
where you were making a generator that's

12
00:00:41.616 --> 00:00:46.508
gonna produce a sequences of
integers starting at some value.

13
00:00:46.508 --> 00:00:48.261
Okay, so here is from,

14
00:00:48.261 --> 00:00:53.783
from takes a start value it returns
a function which computes the next value

15
00:00:53.783 --> 00:00:58.885
simply by taking the start it adds
one to start and then returns next.

16
00:00:58.885 --> 00:01:02.181
So, who got something that works?

17
00:01:02.181 --> 00:01:07.732
Okay, very good,
anybody take a different approach?

18
00:01:07.732 --> 00:01:13.610
&gt;&gt; Speaker 2: I just read
that in your function.

19
00:01:13.610 --> 00:01:20.328
I just did return X plus equals one
&gt;&gt; Douglas: Okay

20
00:01:20.328 --> 00:01:21.108
&gt;&gt; Speaker 2: That work?

21
00:01:21.108 --> 00:01:22.358
&gt;&gt; Douglas: Sure.

22
00:01:22.358 --> 00:01:24.177
Anybody else?

23
00:01:24.177 --> 00:01:27.403
&gt;&gt; Speaker 3: That will give
you a starting point different.

24
00:01:27.403 --> 00:01:29.821
Then zero ought to be starting one.

25
00:01:29.821 --> 00:01:31.999
&gt;&gt; Douglas: Yeah, he's right.

26
00:01:31.999 --> 00:01:32.809
&gt;&gt; Speaker 2: You'll like this.

27
00:01:32.809 --> 00:01:34.953
I did return start plus plus
&gt;&gt; Douglas: Yeah,

28
00:01:34.953 --> 00:01:36.271
there's always one of those.

29
00:01:36.271 --> 00:01:40.860
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Douglas: Anybody else?

30
00:01:40.860 --> 00:01:43.777
&gt;&gt; Speaker 4: You wanna
get start plus one?

31
00:01:43.777 --> 00:01:50.997
&gt;&gt; Douglas: Yeah, start 1â€™s to be, if we
say from zero we need to start from zero.

32
00:01:50.997 --> 00:01:54.616
&gt;&gt; Speaker 4: You need plus, plus 1.

33
00:01:54.616 --> 00:01:58.859
But you return plus, plus start.

34
00:01:58.859 --> 00:01:59.984
&gt;&gt; Douglas: Weâ€™re not doing that.

35
00:01:59.984 --> 00:02:02.866
&gt;&gt; Speaker 3: Yeah,
I know youâ€™re not doing that.

36
00:02:02.866 --> 00:02:06.261
&gt;&gt; Douglas: Okay, ready to move on?

37
00:02:06.261 --> 00:02:11.690
Okay here's the next one, write a to
function that takes a generator and

38
00:02:11.690 --> 00:02:17.663
an end value and returns a generator that
will produce numbers up to that limit.

39
00:02:17.663 --> 00:02:22.553
So, we'll pass to the to
function a generator that we

40
00:02:22.553 --> 00:02:25.279
make with our from function.

41
00:02:25.279 --> 00:02:29.799
So I will pass from 1 to 2 and
also pass it a 3, and

42
00:02:29.799 --> 00:02:36.478
it will return a generator which will
return values up to the limit to 2 and

43
00:02:36.478 --> 00:02:41.354
from that point on it will
return undefined instead.

44
00:02:41.354 --> 00:02:46.021
&gt;&gt; Speaker 2: So on the previous limit,
this one does not include the limit?

45
00:02:46.021 --> 00:02:48.518
[INAUDIBLE] times.

46
00:02:48.518 --> 00:02:52.897
&gt;&gt; Douglas: Right, this is 2 a value
&gt;&gt; Speaker 2: Not including this one.

47
00:02:52.897 --> 00:02:53.740
&gt;&gt; Douglas: Right.

48
00:03:03.250 --> 00:03:07.816
&gt;&gt; [INAUDIBLE]
&gt;&gt; Douglas: Well,

49
00:03:07.816 --> 00:03:10.181
this is the convention we
have in our languages, right?

50
00:03:10.181 --> 00:03:10.845
&gt;&gt; Speaker 4: That's true.

51
00:03:10.845 --> 00:03:13.422
&gt;&gt; Douglas: When you're taking
a substrain of something?

52
00:03:13.422 --> 00:03:16.362
This is the way we do it.

53
00:03:16.362 --> 00:03:17.746
&gt;&gt; Speaker 4: Is this your reason Max?

54
00:03:17.746 --> 00:03:18.930
&gt;&gt; Douglas: Yeah.

55
00:03:18.930 --> 00:03:24.725
[SOUND] So,
here's one way to write the to function.

56
00:03:24.725 --> 00:03:27.144
To takes a generator and an end value,

57
00:03:27.144 --> 00:03:31.393
it returns a function that gets
the next value from the generator.

58
00:03:31.393 --> 00:03:35.443
If that value is less than the end value,
it returns that value,

59
00:03:35.443 --> 00:03:37.625
otherwise it returns undefined.

60
00:03:37.625 --> 00:03:40.060
So, who got something that works?

61
00:03:40.060 --> 00:03:41.242
Very good.

62
00:03:41.242 --> 00:03:43.759
Anyone take a different approach or
do something amazing?

63
00:03:45.670 --> 00:03:47.790
&gt;&gt; Douglas: Wonderful,
spectacular, anything like that.

64
00:03:47.790 --> 00:03:53.178
&gt;&gt; Speaker 2: Amazing it is but mine
looks very similar to the limit function.

65
00:03:53.178 --> 00:03:56.593
Just uses from generators inside of it.

66
00:03:56.593 --> 00:04:01.592
So I set variable in the outer scope,
and then add a number to that and

67
00:04:01.592 --> 00:04:06.153
if that number is less than or
equal to the limit a return find,

68
00:04:06.153 --> 00:04:08.553
otherwise generator.

69
00:04:08.553 --> 00:04:14.460
&gt;&gt; Douglas: Okay, anybody else?

70
00:04:14.460 --> 00:04:17.297
All right, wanna do another one?

71
00:04:17.297 --> 00:04:20.838
Yes, all right, let's do another one.

72
00:04:20.838 --> 00:04:25.606
Okay, let's write a from to
function that produces a generator

73
00:04:25.606 --> 00:04:28.000
that produces value in a range.

74
00:04:28.000 --> 00:04:33.584
So we're going to pass to fromTo 0 and
3 and it will get us the generator

75
00:04:33.584 --> 00:04:38.439
that gives us a sequence zero,
one, two and then undefined.

76
00:04:38.439 --> 00:04:43.859
So here is fromto, fromto (start,
end) value in the returns

77
00:04:43.859 --> 00:04:48.578
result of calling to passing
it from (start), end.

78
00:04:48.578 --> 00:04:51.009
So, who got something that works?

79
00:04:51.009 --> 00:04:52.261
Very good.

80
00:04:52.261 --> 00:04:54.496
Who did it the hard way?

81
00:04:54.496 --> 00:04:57.688
Yeah, first rule of
functional programming,

82
00:04:57.688 --> 00:04:59.770
let the functions do the work.

83
00:04:59.770 --> 00:05:04.024
Write an element function that
takes an array and a generator and

84
00:05:04.024 --> 00:05:08.301
returns a generator that will
produce elements from the array.

85
00:05:08.301 --> 00:05:14.983
So we're gonna pass to the element
factory, and array containing a,b,c and d.

86
00:05:14.983 --> 00:05:20.425
And will give it a generator
which does from two one to three,

87
00:05:20.425 --> 00:05:27.488
and that will give us a generator which
will produce b and c and then undefined.

88
00:05:27.488 --> 00:05:31.470
So here's element,
element takes an array and a generator.

89
00:05:31.470 --> 00:05:35.522
It returns a function that gets
the next index from the generator.

90
00:05:35.522 --> 00:05:40.467
If the index is not undefined
it returns the next,

91
00:05:40.467 --> 00:05:44.601
or the element of the array at that index.

92
00:05:44.601 --> 00:05:47.584
So, who got something that works?

93
00:05:47.584 --> 00:05:51.206
So, I want to talk about this
statement that's underlined.

94
00:05:51.206 --> 00:05:56.190
Because if you leave that if out,
if we do the return unconditionally,

95
00:05:56.190 --> 00:05:57.860
it does the same thing.

96
00:05:57.860 --> 00:06:00.933
And the reason it does the same
thing is kind of weird.

97
00:06:00.933 --> 00:06:01.733
So,

98
00:06:09.736 --> 00:06:14.132
&gt;&gt; Douglas: If we don't have the if there,

99
00:06:14.132 --> 00:06:18.029
and if index is undefined.

100
00:06:18.029 --> 00:06:23.867
Then the brackets will turn
undefined into the string undefined.

101
00:06:23.867 --> 00:06:28.923
It will then look for the member
undefined in the array and not find it,

102
00:06:28.923 --> 00:06:34.593
and return undefined, which is what you
return if you can't find something.

103
00:06:34.593 --> 00:06:41.409
So it kind of accidentally works, if you
leave that test out, except in the case

104
00:06:41.409 --> 00:06:46.724
where if someone creates
an undefined property in the array.

105
00:06:46.724 --> 00:06:50.740
Then they can cause the behavior of
this function to change in that case.

106
00:06:50.740 --> 00:06:54.510
&gt;&gt; Speaker 2: So, you would to call
delete on a node in the array?

107
00:06:54.510 --> 00:07:00.799
&gt;&gt; Douglas: No not deleting a node, if you
said array, what are calling the array?

108
00:07:00.799 --> 00:07:05.065
Yeah, if we said array.undefined = five,

109
00:07:05.065 --> 00:07:10.231
then in that case will return
five instead of undefined

110
00:07:10.231 --> 00:07:16.993
which might not be what you want, and
so while most of the time it works.

111
00:07:16.993 --> 00:07:20.920
I'm concerned about the weird cases
which are what actually screw you up in

112
00:07:20.920 --> 00:07:22.235
production and at life.

113
00:07:22.235 --> 00:07:28.461
And so, I would rather be explicit and
look for that case.

114
00:07:28.461 --> 00:07:30.123
Anybody else do something different?

115
00:07:32.748 --> 00:07:36.553
&gt;&gt; Speaker 2: This is continued
to be array, I mean, to the task.

116
00:07:36.553 --> 00:07:37.139
&gt;&gt; Douglas: Yeah.

117
00:07:37.139 --> 00:07:39.129
&gt;&gt; Speaker 4: Here it's
returned array gen.

118
00:07:39.129 --> 00:07:43.126
&gt;&gt; Douglas: Mm-hm and yes-
&gt;&gt; Speaker 4: Cuz there's too much to

119
00:07:43.126 --> 00:07:43.672
do that.

120
00:07:43.672 --> 00:07:47.425
[LAUGH]
&gt;&gt; Douglas: Almost always work,

121
00:07:47.425 --> 00:07:53.352
modify the element function so
that the generator argument is optional.

122
00:07:53.352 --> 00:07:56.625
If the generator is not provided
then each of the elements of

123
00:07:56.625 --> 00:07:58.202
the array will be provided.

124
00:07:58.202 --> 00:08:03.261
So we can call element pass the array a,
b, c, and d, and

125
00:08:03.261 --> 00:08:09.387
we will get a generator which will
return a, b, c, d and undefined.

126
00:08:09.387 --> 00:08:14.986
So here is the revised element, all I did
was add the code that's in the yellow box.

127
00:08:14.986 --> 00:08:19.386
If we didn't get past a generator,
then we'll call from too and

128
00:08:19.386 --> 00:08:23.635
get a new generator,
otherwise everything else is the same.

129
00:08:23.635 --> 00:08:26.400
So, who got something that works?

130
00:08:26.400 --> 00:08:29.962
Did anybody try to do it the hard way?

131
00:08:29.962 --> 00:08:31.404
First rule of functional programming.

132
00:08:31.404 --> 00:08:34.561
Yeah, let functions do the work.

133
00:08:34.561 --> 00:08:39.626
So, I want to talk about
the condition that I underlined.

134
00:08:39.626 --> 00:08:42.409
There are three ways I
could have written that.

135
00:08:42.409 --> 00:08:49.734
That's the first one where I'm looking for
explicitly, did undefined get passed in.

136
00:08:49.734 --> 00:08:53.025
Which means did nothing get passed in.

137
00:08:53.025 --> 00:08:58.453
Another way I could have written it is,
is the type of gen equal to function?

138
00:08:58.453 --> 00:09:01.801
So if they passed in something but
it wasn't a function,

139
00:09:01.801 --> 00:09:03.420
we'll make it a function.

140
00:09:03.420 --> 00:09:07.673
So the difference between
those two approaches is

141
00:09:07.673 --> 00:09:11.724
the second one will tend
to always succeed, and

142
00:09:11.724 --> 00:09:17.006
the first one will tend to fail
if something bad was passed in.

143
00:09:17.006 --> 00:09:20.709
And it depends on the characteristics
of your application generally,

144
00:09:20.709 --> 00:09:24.485
fast failure is what you want because
it helps you discover bugs faster.

145
00:09:24.485 --> 00:09:29.079
But sometimes you got code which is really
critical, and you wanna be sure that

146
00:09:29.079 --> 00:09:32.571
no matter what happens this
code is gonna be working right.

147
00:09:32.571 --> 00:09:38.237
The third way you could write that
condition would be to do a bullish check.

148
00:09:38.237 --> 00:09:44.082
if not gen then do something and
I don't like that.

149
00:09:44.082 --> 00:09:49.374
Because what we're trying to do in
making the condition is divide the whole

150
00:09:49.374 --> 00:09:54.847
universe of possibilities into one of
two states that either is or it isn't.

151
00:09:54.847 --> 00:10:00.097
And the bullish case splits it
in a really weird way in that,

152
00:10:00.097 --> 00:10:04.402
if they pass in a one,
the behavior will be very,

153
00:10:04.402 --> 00:10:08.394
very different than if
they passed in a zero.

154
00:10:08.394 --> 00:10:12.388
And it doesn't make sense to me that one
in zero should behave that differently

155
00:10:12.388 --> 00:10:14.275
when we're looking for a function.

156
00:10:14.275 --> 00:10:19.424
So this is why I think that JavaScript
depending on boolish values and

157
00:10:19.424 --> 00:10:24.331
conditions was a mistake,
I recommend always be more explicit.

158
00:10:24.331 --> 00:10:28.706
Either figure out,
do I want the fast failure question or

159
00:10:28.706 --> 00:10:32.899
do I want the will seem to
always succeed question, but

160
00:10:32.899 --> 00:10:39.026
not the the convenient one which can
straddle both of those in unexpected ways.

161
00:10:39.026 --> 00:10:39.939
Yeah.

162
00:10:39.939 --> 00:10:45.268
&gt;&gt; [INAUDIBLE]
&gt;&gt; Douglas: In that case,

163
00:10:45.268 --> 00:10:46.987
that'll work fine too.

164
00:10:46.987 --> 00:10:52.880
From we'll keep going forever but
we run into the end to find things so

165
00:10:52.880 --> 00:10:56.549
it'll stop so from by itself is also okay.

166
00:10:56.549 --> 00:10:57.575
Anybody else?

167
00:10:57.575 --> 00:11:04.392
&gt;&gt; Speaker 4: [INAUDIBLE]
That when,

168
00:11:04.392 --> 00:11:09.415
because you said

169
00:11:09.415 --> 00:11:16.591
undefined, as opposed

170
00:11:16.591 --> 00:11:21.985
to boole square.

171
00:11:21.985 --> 00:11:22.494
&gt;&gt; Douglas: Right.

172
00:11:22.494 --> 00:11:24.550
So, I used to recommend
using the logical OR

173
00:11:24.550 --> 00:11:27.006
operator to do something
like you're suggesting.

174
00:11:27.006 --> 00:11:29.151
To replace default values and

175
00:11:29.151 --> 00:11:33.798
I've stopped recommending that
because it's too hazardous.

176
00:11:33.798 --> 00:11:38.699
That if someone passes in a zero,
zero is falsely and so

177
00:11:38.699 --> 00:11:43.718
it might get replaced in cases
we don't expect it will.

178
00:11:43.718 --> 00:11:46.089
And that's problematic so

179
00:11:46.089 --> 00:11:52.178
I now recommend instead be explicit
don't depend on boolish chucks.

