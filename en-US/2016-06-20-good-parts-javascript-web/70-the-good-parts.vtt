WEBVTT

1
00:00:00.000 --> 00:00:03.870
[MUSIC]

2
00:00:03.870 --> 00:00:06.354
&gt;&gt; Douglas Crockford: And
now the better parts.

3
00:00:06.354 --> 00:00:08.940
So this is Antoine de Saint-Exupery.

4
00:00:08.940 --> 00:00:14.940
He was an aviator back at the time
when aviation was really dangerous.

5
00:00:14.940 --> 00:00:17.150
That's what we used to call pilots,
but he was an aviator.

6
00:00:19.350 --> 00:00:21.680
It was really dangerous
because the planes crashed.

7
00:00:23.180 --> 00:00:26.760
And he experienced several
crashes during his career and

8
00:00:26.760 --> 00:00:28.910
survived almost all of them.

9
00:00:28.910 --> 00:00:33.300
He was once trying to set the air
speed record from Paris to Saigon and

10
00:00:33.300 --> 00:00:38.470
his plane crashed in Egypt,
near Cairo out in the Sahara Desert.

11
00:00:38.470 --> 00:00:40.880
And he was not prepared for
survival in the desert.

12
00:00:42.000 --> 00:00:45.630
He did very badly there,
suffered terrible dehydration.

13
00:00:47.490 --> 00:00:50.380
Dehydrated so
much that he stopped sweating,

14
00:00:50.380 --> 00:00:52.780
which is a really dangerous
thing to do in the desert.

15
00:00:52.780 --> 00:00:55.040
Suffered terrible hallucinations.

16
00:00:55.040 --> 00:00:59.090
Fortunately he was rescued by someone
who understood how to treat severe

17
00:00:59.090 --> 00:01:02.840
dehydration and he survived and recovered.

18
00:01:02.840 --> 00:01:07.980
Moved to America as the war is beginning,
becomes a writer and

19
00:01:07.980 --> 00:01:10.250
turns out he's a brilliant writer.

20
00:01:10.250 --> 00:01:14.379
He writes one of the most famous
children's books, The Little Prince.

21
00:01:15.490 --> 00:01:19.800
Which is about an aviator who
is stranded in the desert

22
00:01:19.800 --> 00:01:24.230
who is visited by a strange little boy
who lives on an asteroid and is suicidal.

23
00:01:25.580 --> 00:01:28.640
Like all the best children's books,
it's not really a children's book, yeah.

24
00:01:30.300 --> 00:01:31.860
And he wrote other books, too.

25
00:01:31.860 --> 00:01:34.800
He wrote some very good books
about aviation books and

26
00:01:34.800 --> 00:01:36.860
books aimed at grownups.

27
00:01:36.860 --> 00:01:40.120
In one of them, he has one of
the best sentences ever written.

28
00:01:41.200 --> 00:01:44.960
He says it seems that perfection is
attained not when there is nothing more to

29
00:01:44.960 --> 00:01:49.190
add, but when there is nothing more
to subtract, which is just brilliant.

30
00:01:49.190 --> 00:01:52.860
I've seen this quoted requoted over and
over again.

31
00:01:52.860 --> 00:01:57.520
It's used all over the place and
in engineering design,

32
00:01:57.520 --> 00:02:03.030
anything that's creative that
requires some kind of discipline.

33
00:02:03.030 --> 00:02:05.630
It's just a brilliant quote and

34
00:02:05.630 --> 00:02:09.960
he's talking about the design of airplanes
but it seems to talk about everything.

35
00:02:09.960 --> 00:02:14.240
And I think it's especially telling for
programming,

36
00:02:14.240 --> 00:02:18.500
because we have a special
relationship with perfection, right?

37
00:02:18.500 --> 00:02:22.760
That our programs have to be perfect or
they're not gonna work correctly.

38
00:02:22.760 --> 00:02:27.610
And he gives us some insight as
to how perfection is attained.

39
00:02:27.610 --> 00:02:30.960
It's by removing things,
it's not by adding things.

40
00:02:30.960 --> 00:02:33.520
And I think we can also apply
it to programming languages.

41
00:02:33.520 --> 00:02:36.160
Because we have similar
things going on there

42
00:02:36.160 --> 00:02:39.280
that most of our programming
languages tend to want to add things.

43
00:02:39.280 --> 00:02:42.730
But I think most of them could
be improved by removing things.

44
00:02:44.120 --> 00:02:46.160
And that's where the principle
of the good parts comes from.

45
00:02:47.890 --> 00:02:52.530
That if a feature is sometimes useful and
sometimes dangerous and

46
00:02:52.530 --> 00:02:53.860
if there is a better option.

47
00:02:54.960 --> 00:02:57.070
Always use the better option.

48
00:02:57.070 --> 00:03:00.230
And it surprises me that this
is a controversial statement.

49
00:03:00.230 --> 00:03:06.290
Now there are lots of people out there who
say I don't wanna use a better option.

50
00:03:06.290 --> 00:03:07.990
You can't make me use the better option.

51
00:03:07.990 --> 00:03:13.890
It's like it being better
should be enough,but it's not.

52
00:03:13.890 --> 00:03:17.450
I think that comes from
a fundamental misunderstanding about

53
00:03:17.450 --> 00:03:18.210
what it is that we do.

54
00:03:19.300 --> 00:03:22.180
We are not paid to use every
feature of the language.

55
00:03:23.360 --> 00:03:27.020
At the end of a project there is never
a manager with a clipboard saying

56
00:03:27.020 --> 00:03:29.729
did use a with statement,
did you leave out any semicolons?

57
00:03:29.729 --> 00:03:31.935
Did you use commas in operator XII?.

58
00:03:31.935 --> 00:03:36.480
No, no, nobody's doing that.

59
00:03:36.480 --> 00:03:39.030
We are paid to write
programs that work well and

60
00:03:39.030 --> 00:03:42.140
are free of error, but
that's what it's all about.

61
00:03:42.140 --> 00:03:44.770
Now free of error,
where did that come from?

62
00:03:44.770 --> 00:03:47.820
What turns out free of error has
always been the first requirement.

63
00:03:47.820 --> 00:03:50.860
It's just we so rarely attain it,

64
00:03:50.860 --> 00:03:53.740
it's easy to forget that it's
the most important thing.

65
00:03:55.020 --> 00:03:57.421
&gt;&gt; Speaker 2: It's why it's
never gotten paid, I guess.

66
00:03:57.421 --> 00:03:59.740
&gt;&gt; Douglas Crockford: So good
programming language should teach you.

67
00:03:59.740 --> 00:04:02.890
I recommend everybody learn
as many languages as you can.

68
00:04:02.890 --> 00:04:07.010
Because every language will give you
some new perspective on something,

69
00:04:07.010 --> 00:04:08.650
maybe push you into a new paradigm.

70
00:04:08.650 --> 00:04:10.630
And you can take the things
that you learned and

71
00:04:10.630 --> 00:04:12.490
apply it to all the other
languages you know.

72
00:04:12.490 --> 00:04:16.360
Everybody should learn as
many languages as they can.

73
00:04:16.360 --> 00:04:21.100
And the language in my career that has
taught me the most has been JavaScript.

74
00:04:22.750 --> 00:04:27.600
And it took a while for me to to learn
from the language, because well,

75
00:04:27.600 --> 00:04:30.880
I made every mistake in
JavaScript that you could make.

76
00:04:30.880 --> 00:04:33.390
Starting with the first one,
the worst one.

77
00:04:33.390 --> 00:04:37.240
I didn't think I needed to learn the
language before I started writing in it,

78
00:04:37.240 --> 00:04:39.370
that I had so much contempt for it.

79
00:04:39.370 --> 00:04:43.740
The first time I saw JavaScript I thought
it was the stupidest thing I'd ever seen.

80
00:04:43.740 --> 00:04:44.330
And it turns out,

81
00:04:44.330 --> 00:04:48.220
I wasn't completely wrong, but
I wasn't completely right either.

82
00:04:48.220 --> 00:04:49.200
Eventually, I did and

83
00:04:49.200 --> 00:04:53.319
I was cursing all the time I was writing a
JavaScript that made me very, very angry.

84
00:04:54.870 --> 00:04:58.260
So eventually,
I decided to learn the language.

85
00:04:58.260 --> 00:05:03.610
So I got the standard,
which you get free off of the site and

86
00:05:03.610 --> 00:05:08.980
read it, and was surprised to
discover that it had lambdas in it.

87
00:05:08.980 --> 00:05:14.170
If it had functions with first class as
first class values with lexical closure,

88
00:05:14.170 --> 00:05:15.920
which I had no idea that it was in there.

89
00:05:17.340 --> 00:05:18.730
Brendan put it in there intentionally.

90
00:05:18.730 --> 00:05:22.090
That's not something that gets
into the language by accident, but

91
00:05:22.090 --> 00:05:23.330
he didn't tell anybody.

92
00:05:24.370 --> 00:05:28.657
And so I discovered it in reading
the standard and was wow,

93
00:05:28.657 --> 00:05:31.240
this changes everything.

94
00:05:31.240 --> 00:05:34.210
And at that point my relationship
with the language changed.

95
00:05:35.540 --> 00:05:39.010
And at that point, he was able to
finally start teaching me things and

96
00:05:39.010 --> 00:05:40.530
he has taught me a lot.

97
00:05:40.530 --> 00:05:45.220
So one of the things I did with
JavaScript was I wrote JSLint.

98
00:05:45.220 --> 00:05:47.770
Because I needed a tool to help me

99
00:05:47.770 --> 00:05:50.200
avoid all of the traps
that are in that language.

100
00:05:50.200 --> 00:05:51.810
That are there to defeat me.

101
00:05:52.810 --> 00:05:57.710
And JSLint turns out is much
smarter about JavaScript than I am.

102
00:05:57.710 --> 00:06:02.390
My initial intuitions about what were
good features of languages what were bad

103
00:06:02.390 --> 00:06:04.530
were extremely unreliable.

104
00:06:04.530 --> 00:06:07.510
Whereas JSLint was always very good at

105
00:06:07.510 --> 00:06:09.370
always directing me to
the correct point of view.

106
00:06:11.330 --> 00:06:16.950
What is it that we can do mechanically
in order to find mistakes?

107
00:06:16.950 --> 00:06:22.044
Because that's what I need to do in order
to try to make my programs more perfect.

108
00:06:22.044 --> 00:06:25.550
And JSLint has taught me an enormous
amount about programming.

