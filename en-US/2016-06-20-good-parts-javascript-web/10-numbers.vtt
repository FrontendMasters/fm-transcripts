WEBVTT

1
00:00:00.025 --> 00:00:03.654
[MUSIC]

2
00:00:03.654 --> 00:00:06.187
&gt;&gt; Douglas Crockford: Everything in
JavaScript is an object, so numbers,

3
00:00:06.187 --> 00:00:09.906
booleans, strings, arrays, dates,
regular expressions and functions,

4
00:00:09.906 --> 00:00:11.050
they're all objects.

5
00:00:12.400 --> 00:00:16.561
So, let's look at numbers, numbers
are objects, it's a much a simpler number

6
00:00:16.561 --> 00:00:20.109
system than you have in Java in that
we don't have ints and integers,

7
00:00:20.109 --> 00:00:23.070
you don't have either of those,
you just have numbers.

8
00:00:25.470 --> 00:00:27.930
We make numbers with number literals.

9
00:00:27.930 --> 00:00:31.390
All these number literals
refer to the same object.

10
00:00:33.610 --> 00:00:36.453
&gt;&gt; Douglas Crockford: There's only one
number type in JavaScript which is

11
00:00:36.453 --> 00:00:40.717
actually a very good thing and there are
no integer types which is something you

12
00:00:40.717 --> 00:00:43.710
have to get used to but
it's actually a good thing too.

13
00:00:44.880 --> 00:00:48.480
The problem is that the one number
type we have is the wrong one.

14
00:00:48.480 --> 00:00:53.620
It's based on 64-bit binary floating
point from the IEEE-754 standard

15
00:00:53.620 --> 00:00:57.290
which is strangely called double
in Java and other languages.

16
00:00:58.460 --> 00:01:00.380
Anybody care to know
why it's called double?

17
00:01:00.380 --> 00:01:01.450
Why they picked such a silly name?

18
00:01:03.640 --> 00:01:05.080
It's something that comes from Fortran.

19
00:01:06.510 --> 00:01:14.320
Fortran had integer and real and
later they added double precision,

20
00:01:14.320 --> 00:01:19.240
which was two reals put together in
order to give you more precision.

21
00:01:20.470 --> 00:01:25.210
And C took Fortran's double precision and
shortened it to double.

22
00:01:25.210 --> 00:01:27.430
And everyone else has been
using double ever since then.

23
00:01:30.040 --> 00:01:34.850
So we don't have ints and I'm glad
we don't have ints cuz I hate ints.

24
00:01:34.850 --> 00:01:36.980
Ints have some really strange properties.

25
00:01:36.980 --> 00:01:40.590
For example, we can have two ints
which are both greater than zero.

26
00:01:40.590 --> 00:01:45.950
We can add them together and
we can get results that are smaller

27
00:01:45.950 --> 00:01:50.930
than the original numbers, which is
insane and inexcusable, and how can

28
00:01:50.930 --> 00:01:54.520
you have any confidence in the correctness
and the perfection of your system

29
00:01:54.520 --> 00:01:58.690
if it's built on a number type which
can do such insanely ridiculous things?

30
00:01:59.720 --> 00:02:03.519
So JavaScript does not have this defect
in it which I think is brilliant.

31
00:02:06.150 --> 00:02:09.600
So one problem with computer
arithmetic in general

32
00:02:09.600 --> 00:02:13.930
is that the Associative Law will not hold,
and that's because

33
00:02:15.230 --> 00:02:19.700
computer numbers are necessarily
finite and real numbers aren't.

34
00:02:19.700 --> 00:02:23.610
So in many cases we're only
dealing with approximations.

35
00:02:23.610 --> 00:02:27.980
And when the values are approximate,
then associativity doesn't hold.

36
00:02:27.980 --> 00:02:31.501
Now if you just confine
to the integer space,

37
00:02:31.501 --> 00:02:37.349
JavaScript integers go up to around
9 quadrillion, which is pretty big.

38
00:02:37.349 --> 00:02:43.310
9 quadrillion is bigger than
the national debt, so it's big, right?

39
00:02:43.310 --> 00:02:44.550
That's big.

40
00:02:44.550 --> 00:02:49.960
So as long as your integers are smaller
than 9 quadrillion they work out exactly.

41
00:02:49.960 --> 00:02:54.944
When the integers get above 9 quadrillion
they don't do the crazy wrap around

42
00:02:54.944 --> 00:02:57.628
thing that ints do, they just get fuzzy.

43
00:02:57.628 --> 00:03:02.300
So if I take a number above 9
quadrillion and add 1 to it, it's like I

44
00:03:02.300 --> 00:03:07.310
added 0 to it, which is not good but
it's much less bad than what ints do.

45
00:03:10.710 --> 00:03:13.623
And because computer
arithmetic can be approximate,

46
00:03:13.623 --> 00:03:18.220
then there are identities that we're
used to thinking about which don't hold.

47
00:03:18.220 --> 00:03:21.379
So you need to be aware of that and
cautious.

48
00:03:23.490 --> 00:03:29.963
So the most reported bug for JavaScript
is that 0.10 + 0.20 is not equal to 0.30.

49
00:03:29.963 --> 00:03:34.422
And that's because we're trying
to represent decimal fractions

50
00:03:34.422 --> 00:03:36.610
in binary floating point.

51
00:03:36.610 --> 00:03:39.270
And binary floating point
cannot accurately represent

52
00:03:39.270 --> 00:03:40.860
most of the decimal fractions.

53
00:03:40.860 --> 00:03:45.840
It can only approximate them, but
it approximates them with infinite

54
00:03:45.840 --> 00:03:50.740
repeating bit patterns, but we're not
allowed to have infinitely long numbers.

55
00:03:50.740 --> 00:03:55.900
And so they truncate, and so
every number is gonna be slightly wrong.

56
00:03:57.560 --> 00:04:01.329
Which is only a problem if you're living
on a planet that uses the decimal system.

57
00:04:03.610 --> 00:04:07.766
But on such a planet,
you're counting people's money using this.

58
00:04:07.766 --> 00:04:09.404
When you're adding people's money,

59
00:04:09.404 --> 00:04:12.290
they have a reasonable expectation
you're gonna get the right sum.

60
00:04:13.480 --> 00:04:16.590
And we're not guaranteed to get the right
sum with binary floating point,

61
00:04:16.590 --> 00:04:17.900
which is a huge problem.

62
00:04:20.208 --> 00:04:26.160
&gt;&gt; Douglas Crockford: Numbers are objects,
and so numbers have methods.

63
00:04:26.160 --> 00:04:28.560
You don't have to box them in
order to get object behavior.

64
00:04:28.560 --> 00:04:29.870
Every number is already an object.

65
00:04:31.390 --> 00:04:35.270
Every number inherits
from number.prototype.

66
00:04:35.270 --> 00:04:38.610
So if we wanted to add
new methods to numbers,

67
00:04:38.610 --> 00:04:41.650
we can do that by adding
them to number.prototype.

68
00:04:41.650 --> 00:04:46.520
This is not something that applications
should ever do, but it is a useful

69
00:04:46.520 --> 00:04:51.000
thing for libraries to do, and in fact
this is how we evolve the language.

70
00:04:51.000 --> 00:04:55.810
So we can add new methods to new
versions of the standard and

71
00:04:55.810 --> 00:05:00.350
libraries can back fill old browsers,
and old implementations

72
00:05:00.350 --> 00:05:05.180
with the new stuff as long as new methods
can be implemented in JavaScript.

73
00:05:08.360 --> 00:05:11.880
Numbers are first class objects which
means that a number can be stored in

74
00:05:11.880 --> 00:05:16.070
a variable, can be passed as a parameter,
can be returned from a function and

75
00:05:16.070 --> 00:05:17.980
it can be stored in an object.

76
00:05:17.980 --> 00:05:21.580
And because numbers are themselves
objects they can have methods.

77
00:05:24.820 --> 00:05:29.870
JavaScript has made the same mistake
that Java made in having a separate math

78
00:05:29.870 --> 00:05:34.559
object or math container for
keeping the higher

79
00:05:34.559 --> 00:05:38.630
elementary functions.

80
00:05:38.630 --> 00:05:43.380
This was done in Java anticipating that
in the future there might be very low

81
00:05:43.380 --> 00:05:47.610
memory configurations and they'd wanna
be able to remove the math functions.

82
00:05:47.610 --> 00:05:52.323
That didn't happen because Moore's Law
kept cranking on memory capacity so

83
00:05:52.323 --> 00:05:55.304
that turned out not to
have been a good strategy.

84
00:05:55.304 --> 00:05:59.048
But it wouldn't have worked anyway because
you'd be throwing away essential things

85
00:05:59.048 --> 00:06:00.000
like floor.

86
00:06:00.000 --> 00:06:02.080
There's no good way to
get the integer part of

87
00:06:03.860 --> 00:06:08.990
a number if you get rid of the floor
function so it couldn't have worked.

88
00:06:11.900 --> 00:06:16.620
There are also some constants
stored in the math object as well.

89
00:06:19.210 --> 00:06:22.430
So, one of the worst, or
one of the things that we get from

90
00:06:22.430 --> 00:06:27.150
the IEEE format is something called NaN,
which stands for Not a Number.

91
00:06:27.150 --> 00:06:30.720
It's the result of confusing or
erroneous operations.

92
00:06:30.720 --> 00:06:35.060
For example, if you're trying to
divide zero by zero the result is NaN.

93
00:06:35.060 --> 00:06:39.330
NaN is toxic, which means that any
arithmetic operation with NaN as an input

94
00:06:39.330 --> 00:06:40.680
will have NaN as an output.

95
00:06:41.690 --> 00:06:46.050
And despite the fact that NaN stands for
Not a Number, it is a number.

96
00:06:46.050 --> 00:06:48.780
If you ask JavaScript,
what is the type of NaN?

97
00:06:48.780 --> 00:06:50.310
It says number and it's right.

98
00:06:52.692 --> 00:06:56.771
&gt;&gt; Douglas Crockford: The thing I hate
about NaN is that NaN is not equal to

99
00:06:56.771 --> 00:07:01.670
anything including NaN, so
NaN equal NaN is false.

100
00:07:01.670 --> 00:07:03.190
Which bugs the hell out of me and

101
00:07:03.190 --> 00:07:06.670
even worse than that is that
NaN not equal NaN is true.

102
00:07:06.670 --> 00:07:08.700
Which I hate even more.

103
00:07:09.890 --> 00:07:13.944
So if you want to find out if something
is NaN, there is a global isNaN function.

104
00:07:15.140 --> 00:07:18.130
And you can pass NaN to it and
it will return true, which is good.

105
00:07:19.180 --> 00:07:22.390
Unfortunately, isNaN
also does type coercion.

106
00:07:22.390 --> 00:07:25.270
So if you pass it a string
like hello world,

107
00:07:25.270 --> 00:07:28.130
it'll try to convert
the string into a number.

108
00:07:28.130 --> 00:07:32.752
The number that hello world
turns into is NaN, so

109
00:07:32.752 --> 00:07:36.484
hello world is NaN, which is not true.

110
00:07:38.776 --> 00:07:43.090
&gt;&gt; Douglas Crockford: So ever since
Fortran, we've been writing statements

111
00:07:43.090 --> 00:07:48.800
that look like this, x = x + 1,
which is mathematical nonsense.

112
00:07:48.800 --> 00:07:50.440
So ALGOL got this right.

113
00:07:50.440 --> 00:07:54.220
ALGOL came up with an assignment operator
so this didn't look so ridiculous, and

114
00:07:54.220 --> 00:07:57.740
BCPL did the same thing as
ALGOL which got it right.

115
00:07:57.740 --> 00:08:00.527
Unfortunately Thompson liked this better,

116
00:08:00.527 --> 00:08:05.590
and so we reverted back to it and
we have not evolved away from this since.

117
00:08:05.590 --> 00:08:08.100
So we're stuck with this and
it looks crazy, right?

118
00:08:08.100 --> 00:08:10.150
Because it looks like an equation but

119
00:08:10.150 --> 00:08:13.753
there's no value of x
which equals x + 1 right.

120
00:08:15.690 --> 00:08:18.560
Except it turns out if you're
using binary floating point,

121
00:08:20.290 --> 00:08:21.500
there's a value called infinity.

122
00:08:22.930 --> 00:08:26.890
And, if you add one to infinity, you get
infinity so this actually is an equation.

123
00:08:26.890 --> 00:08:28.780
There is a value of X for
which this is true.

124
00:08:31.040 --> 00:08:35.870
And not just that, there's another
value called Number.MAX_VALUE

125
00:08:35.870 --> 00:08:40.499
which is one followed by 308 digits,
that's a really big number.

126
00:08:41.620 --> 00:08:46.440
And if you add one to the biggest number
that JavaScript knows you would think that

127
00:08:46.440 --> 00:08:51.680
would be infinity but it isn't it,
it'll be MAX_VALUE, so it holds.

128
00:08:51.680 --> 00:08:55.052
In fact that is true for
every number above 9 quadrillion.

129
00:08:55.052 --> 00:08:58.958
So there's a lot of values for
which this holds.

130
00:09:00.900 --> 00:09:02.830
&gt;&gt; Douglas Crockford: But not NaN.

131
00:09:02.830 --> 00:09:07.060
Even though NaN plus one is NaN,
NaN is not equal to NaN.

132
00:09:07.060 --> 00:09:12.190
So I hate that and NaN,
I hate that even more.

