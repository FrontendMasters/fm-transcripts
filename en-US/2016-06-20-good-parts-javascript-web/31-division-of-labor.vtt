WEBVTT

1
00:00:00.000 --> 00:00:03.806
[MUSIC]

2
00:00:03.806 --> 00:00:04.342
&gt;&gt; Douglas Crockford: Finally,

3
00:00:04.342 --> 00:00:09.000
one more thing about living in the browser
is a problem of division in labor.

4
00:00:09.000 --> 00:00:12.730
Cuz we're now doing client server
programming, and for some people working

5
00:00:12.730 --> 00:00:16.409
in the browser this is the first time
to be doing client server programming.

6
00:00:17.780 --> 00:00:21.390
And that means you're writing distributed
application where half of the application

7
00:00:21.390 --> 00:00:25.770
is running in one machine and half of the
applications running in another machine.

8
00:00:25.770 --> 00:00:31.310
How do you divide the work,
how you decide what goes in which machine?

9
00:00:31.310 --> 00:00:35.050
And I've seen people make mistakes
in every possible dimension.

10
00:00:35.050 --> 00:00:40.830
For example, early on in the web
everything was in the server.

11
00:00:40.830 --> 00:00:48.021
The browser was treated as a terminal,
specifically as an IBM 3270 terminal.

12
00:00:48.021 --> 00:00:50.550
And you would send information
to the server, and

13
00:00:50.550 --> 00:00:52.550
the server would generate a new view and
send it out.

14
00:00:52.550 --> 00:00:55.870
And that was hugely inefficient, and

15
00:00:55.870 --> 00:01:00.060
it was recognition of that inefficiency
which got the Ajax thing so popular.

16
00:01:01.110 --> 00:01:03.940
So when Ajax started,
it went the other way.

17
00:01:03.940 --> 00:01:08.110
People started putting the entire
application in the browser and

18
00:01:08.110 --> 00:01:10.320
they were treating
the server as a file system.

19
00:01:10.320 --> 00:01:15.288
And I saw people trying to basically
replicate their database in the browser.

20
00:01:15.288 --> 00:01:18.350
They'd say take everything we got cuz
who knows if we need it or not, and

21
00:01:18.350 --> 00:01:19.748
they'd send everything over.

22
00:01:19.748 --> 00:01:24.850
And then they'd complain well, why does
it takes so long to send all that data?

23
00:01:24.850 --> 00:01:26.970
That turns out not to be
a good way to do it either.

24
00:01:28.310 --> 00:01:30.140
So what's the right way?

25
00:01:30.140 --> 00:01:32.000
It's to seek the middle way.

26
00:01:32.000 --> 00:01:36.380
That you want to create a pleasant
dialog between specialized peers,

27
00:01:36.380 --> 00:01:38.460
you want to minimize
the volume of traffic,

28
00:01:38.460 --> 00:01:41.750
you want to be sending stuff
on a just in time basis.

29
00:01:41.750 --> 00:01:44.620
You don't need to send the browser
everything it might ever need to know,

30
00:01:44.620 --> 00:01:47.910
you just need to send
it what it needs next.

31
00:01:47.910 --> 00:01:50.870
And that's usually a much smaller set
of data, something you can send very,

32
00:01:50.870 --> 00:01:53.310
very quickly, particularly as
our networks have gotten so

33
00:01:53.310 --> 00:01:56.790
performant.
&gt;&gt; Douglas Crockford: And

34
00:01:56.790 --> 00:01:59.810
that's the end of the browser.

35
00:01:59.810 --> 00:02:00.640
Any questions about that?

36
00:02:03.050 --> 00:02:04.470
Yeah.
&gt;&gt; Speaker 2: I'm just curious what your

37
00:02:04.470 --> 00:02:10.030
thoughts are, kind of the virtual
DOM approach, like diffing, and

38
00:02:10.030 --> 00:02:15.010
I don't know if you have any opinions, or.
&gt;&gt; Douglas Crockford: Yeah,

39
00:02:15.010 --> 00:02:18.418
I got opinions,
I don't know if they're useful opinions.

40
00:02:18.418 --> 00:02:21.500
So generally the DOM is a horrible model.

41
00:02:22.900 --> 00:02:25.930
And propagating that horribleness
onto the other side of the network,

42
00:02:27.600 --> 00:02:31.540
I think just keeps you stuck in
that awful model for longer.

43
00:02:31.540 --> 00:02:34.395
I'm hoping someday we figure out a way
to liberate ourselves from the DOM,

44
00:02:34.395 --> 00:02:36.650
cuz it really is dreadful.

45
00:02:36.650 --> 00:02:39.470
And the thing that's encouraging
to me about the library is

46
00:02:39.470 --> 00:02:42.070
that they provide a way of doing that.

47
00:02:42.070 --> 00:02:47.780
That, for example, jQuery is so
much superior as an API for

48
00:02:47.780 --> 00:02:52.160
addressing graphical elements on
a page to what the DOM provides.

49
00:02:53.490 --> 00:02:55.560
I'd like to see us get
better in that dimension.

50
00:02:55.560 --> 00:02:57.080
&gt;&gt; Speaker 3: Is the jQuery just a wrapper

51
00:02:57.080 --> 00:02:58.380
around the DOM?

52
00:02:58.380 --> 00:02:59.380
&gt;&gt; Douglas Crockford: It is.
&gt;&gt; Speaker 3: Okay.

53
00:02:59.380 --> 00:02:59.990
&gt;&gt; Douglas Crockford: But it turns out you

54
00:02:59.990 --> 00:03:02.970
don't need much wrappage to make
the DOM significantly better.

55
00:03:02.970 --> 00:03:07.600
The DOM is so horrible, I recommend
don't use anything that I've showed

56
00:03:07.600 --> 00:03:10.383
you in the last hour, don't use anything.
&gt;&gt; Speaker 3: Don't use

57
00:03:10.383 --> 00:03:14.460
getElementById ever, just use jQuery?
&gt;&gt; Douglas Crockford: Find some library,

58
00:03:14.460 --> 00:03:16.650
I'm not recommending jQuery necessarily.
&gt;&gt; Speaker 3: Okay.

59
00:03:16.650 --> 00:03:18.440
&gt;&gt; Douglas Crockford: But some library,

60
00:03:18.440 --> 00:03:22.120
every library is better than the DOM,
I'm happy to say that.

61
00:03:22.120 --> 00:03:25.890
Even, I don't know what the worst library
out there is, but whatever it is,

62
00:03:25.890 --> 00:03:30.103
it can't be half as bad as the DOM is.
&gt;&gt; Speaker 3: How can,

63
00:03:30.103 --> 00:03:34.606
if jQuery just calls getElementById,
how can

64
00:03:34.606 --> 00:03:39.577
using a jQuery CSS be better than get on.
&gt;&gt; Douglas Crockford: It's

65
00:03:39.577 --> 00:03:42.270
hiding that stuff for you,
it's adding a level of abstraction.

66
00:03:42.270 --> 00:03:43.688
It's adding enough in direction so

67
00:03:43.688 --> 00:03:46.711
you're not thinking in terms of what
the DOM does, you're thinking more in

68
00:03:46.711 --> 00:03:47.860
terms of what you need to do.

69
00:03:49.500 --> 00:03:50.286
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Douglas Crockford: And

70
00:03:50.286 --> 00:03:50.975
it's very effective at that.

71
00:03:50.975 --> 00:03:55.000
A lot of other libraries are too.
&gt;&gt; Speaker 3: Okay so, other question.

72
00:03:57.700 --> 00:03:59.896
I kind of thought that
the DOM was the browser.

73
00:03:59.896 --> 00:04:01.590
How'd the browser work without a DOM?

74
00:04:01.590 --> 00:04:05.200
Because you said there was HTML,
and then right around

75
00:04:05.200 --> 00:04:09.890
the same time that HTML was going from all
caps to lowercase, the DOM was invented.

76
00:04:11.840 --> 00:04:13.730
How would you have
a browser without a DOM?

77
00:04:15.390 --> 00:04:16.040
&gt;&gt; Douglas Crockford: Before there was

78
00:04:16.040 --> 00:04:17.740
JavaScript there was no need for

79
00:04:17.740 --> 00:04:22.550
a DOM, right?
&gt;&gt; Speaker 3: There was no modeling of

80
00:04:22.550 --> 00:04:28.900
the DOM, but the DOM existed in some-
&gt;&gt; Douglas Crockford: The browser

81
00:04:28.900 --> 00:04:31.090
had a tree, but it had no API for

82
00:04:31.090 --> 00:04:33.777
the to get access to that tree.
&gt;&gt; Speaker 3: Okay,

83
00:04:33.777 --> 00:04:37.164
all right.
&gt;&gt; Douglas Crockford: Yes?

84
00:04:37.164 --> 00:04:39.960
&gt;&gt; Speaker 4: I guess listening to just

85
00:04:39.960 --> 00:04:45.230
the history of everything, and
it might not be a question.

86
00:04:45.230 --> 00:04:49.800
But what, everything is funneled
into what it is right now.

87
00:04:49.800 --> 00:04:57.050
And it seems like things are pretty
stably moving in a very succinct way.

88
00:04:57.050 --> 00:05:02.297
And then when I listen to your stories of
how this came from this, and this came

89
00:05:02.297 --> 00:05:07.490
from this, and all these languages came
from all of these other languages.

90
00:05:08.740 --> 00:05:14.904
Do you have an opinion or
an answer to why such a minute,

91
00:05:14.904 --> 00:05:19.465
how come everything is focused so much?

92
00:05:19.465 --> 00:05:26.145
How come there isnâ€™t so much of this
development of these different ideas?

93
00:05:26.145 --> 00:05:30.160
When you were saying the idea of having a,

94
00:05:30.160 --> 00:05:35.228
returning a function took
years to figure that out.

95
00:05:35.228 --> 00:05:41.027
Why, is that still going on,
and what's going on with that,

96
00:05:41.027 --> 00:05:43.830
why the slowdown?
&gt;&gt; Douglas Crockford: It has always been

97
00:05:43.830 --> 00:05:46.430
slow, we'll talk about
this on the third day.

98
00:05:48.230 --> 00:05:53.059
We think of ourselves as being
the most innovative of industries,

99
00:05:53.059 --> 00:05:54.361
and maybe we are.

100
00:05:54.361 --> 00:05:57.752
But we're also humans and

101
00:05:57.752 --> 00:06:03.464
humans tend to be extremely change averse.

102
00:06:03.464 --> 00:06:08.029
And the people who are the last
to recognize the value of a new

103
00:06:08.029 --> 00:06:13.030
technology are often the people
who would most benefit from it.

104
00:06:13.030 --> 00:06:15.720
And there are lots of examples of
that in software technology and

105
00:06:15.720 --> 00:06:16.900
then we will look at those.

