WEBVTT

1
00:00:00.000 --> 00:00:03.902
[MUSIC]

2
00:00:03.902 --> 00:00:06.553
&gt;&gt; Douglas Crockford: So I'm also
reconsidering things that I had put in in

3
00:00:06.553 --> 00:00:07.700
the book.

4
00:00:07.700 --> 00:00:10.760
Do I still think the things
I said were good then?.

5
00:00:10.760 --> 00:00:12.020
Are they good now?

6
00:00:12.020 --> 00:00:14.440
So, in the book,
I didn't recommend use of new.

7
00:00:14.440 --> 00:00:18.550
I stopped using it, I recommended using
Object.create instead, and in fact,

8
00:00:18.550 --> 00:00:23.460
I managed to get Object.create added to
the language just so that I could use it.

9
00:00:23.460 --> 00:00:27.415
So, I was really surprised to kind
of notice that I've stopped using

10
00:00:27.415 --> 00:00:33.879
Object.create, and the reason for
that is because I stopped using this.

11
00:00:35.200 --> 00:00:38.233
If you're not using this, then create
doesn't do all that much for you, and

12
00:00:38.233 --> 00:00:42.281
the reason I stopped using
this was because of ADsafe.

13
00:00:42.281 --> 00:00:46.993
So in 2007 there were a number of
experiments at trying to figure out how to

14
00:00:46.993 --> 00:00:50.691
turn JavaScript into a secure language for
doing mashups and

15
00:00:50.691 --> 00:00:53.500
in third party interaction.

16
00:00:53.500 --> 00:00:58.660
There was FBJS at Facebook,
there was web sandbox of Microsoft.

17
00:00:58.660 --> 00:01:04.210
There was the Caja project at Google and
there was my own ADsafe project.

18
00:01:04.210 --> 00:01:08.367
And one of the difficult problems
everybody was struggling to solve was,

19
00:01:08.367 --> 00:01:09.848
what do you do about this?

20
00:01:09.848 --> 00:01:11.916
Because if you have a method,

21
00:01:11.916 --> 00:01:16.319
this will get bound to the object
of interest and that's good.

22
00:01:16.319 --> 00:01:18.932
But if you call that same
method as a function,

23
00:01:18.932 --> 00:01:22.627
this gets bound to the global object,
which gives away the farm.

24
00:01:22.627 --> 00:01:25.975
And how do you deal with that?

25
00:01:25.975 --> 00:01:30.774
And so the approach that the other three
projects took wa,s they have translators,

26
00:01:30.774 --> 00:01:33.628
they read JavaScript and
they write JavaScript.

27
00:01:33.628 --> 00:01:36.466
And the JavaScript they
write is much bigger,

28
00:01:36.466 --> 00:01:41.489
because they're adding a lot of runtime
checking and indirection in order to find

29
00:01:41.489 --> 00:01:46.610
cases where this is turning into a global
object and allowing bad things to happen.

30
00:01:48.100 --> 00:01:51.080
The approach I took with
ADsafe was much simpler.

31
00:01:51.080 --> 00:01:53.660
I said, this is illegal.

32
00:01:53.660 --> 00:01:57.380
So if we see a program with this in it,
we reject it, done, easy.

33
00:01:57.380 --> 00:01:59.490
So we don't rewrite the programs.

34
00:01:59.490 --> 00:02:02.930
We don't make them harder to debug or
slower to run.

35
00:02:02.930 --> 00:02:07.470
If a program passes ADsafe, it gets to run
at full speed without any modification.

36
00:02:08.546 --> 00:02:10.630
But the ADsafe rules would reject

37
00:02:11.900 --> 00:02:15.150
pretty close to 100% of all
existing programs in the Web.

38
00:02:16.340 --> 00:02:20.264
So in order to use ADsafe you had
to work in the ADsafe dialect.

39
00:02:21.460 --> 00:02:25.180
So I decided as an experiment,
well I'll work in that dialect.

40
00:02:25.180 --> 00:02:27.800
I'll see what it's like and
how painful it is.

41
00:02:29.330 --> 00:02:31.418
Now after working with it for

42
00:02:31.418 --> 00:02:35.689
a while I was really surprised
to learn that it got easier.

43
00:02:35.689 --> 00:02:39.020
That I expected it was gonna be a hardship
that I was gonna have to get around, but

44
00:02:39.020 --> 00:02:41.784
that it actually got easier and
my programs were getting better.

45
00:02:41.784 --> 00:02:46.613
I was forced to use the functional
patterns because prototypal patterns

46
00:02:46.613 --> 00:02:51.375
weren't available because I stopped
using this and I really liked it.

47
00:02:51.375 --> 00:02:54.883
And so as I've gained
confidence in this model and

48
00:02:54.883 --> 00:02:59.477
I've become an advocate now of
getting rid of this entirely, and

49
00:02:59.477 --> 00:03:04.090
going all with functions because
that's where the goodness is.

50
00:03:05.320 --> 00:03:07.798
Yeah?
&gt;&gt; Speaker 2: What does JSLint say about

51
00:03:07.798 --> 00:03:09.273
this?
&gt;&gt; Douglas Crockford: So JSLint,

52
00:03:09.273 --> 00:03:11.110
this is now an option.

53
00:03:12.280 --> 00:03:15.920
So there is now an option that you can
specify which will suppress warnings

54
00:03:15.920 --> 00:03:17.400
about this.

55
00:03:17.400 --> 00:03:21.070
I don't recommend using that option but
it's there.

56
00:03:21.070 --> 00:03:27.670
I added options to JSLint for
a transition, because over

57
00:03:27.670 --> 00:03:31.870
time I'm constantly looking at, how can
I make this language smaller and better?

58
00:03:32.890 --> 00:03:36.940
And things that I thought were
maybe a good idea last year,

59
00:03:36.940 --> 00:03:39.100
this year I'm thinking I'm not sure.

60
00:03:39.100 --> 00:03:45.400
Like this year I'm starting to decide that
labeled break is probably a bad idea,

61
00:03:45.400 --> 00:03:49.540
that I actually haven't used one in
many years and I think I'm better for

62
00:03:49.540 --> 00:03:50.960
not having used one in many years.

63
00:03:50.960 --> 00:03:55.240
So that labeled break is on its
way onto the bad part list.

64
00:03:56.420 --> 00:04:01.520
But there are people using JSLint who,
when JSLint rules change, go aah.

65
00:04:01.520 --> 00:04:04.140
We're used to doing that and
we can't do that now.

66
00:04:04.140 --> 00:04:07.579
So I add the options so
that they can transit out.

67
00:04:09.040 --> 00:04:12.750
We can just get by for now and
eventually we'll fix our code.

68
00:04:12.750 --> 00:04:17.100
Except what happens is people
don't fix their code and

69
00:04:17.100 --> 00:04:21.270
they design their programming style
based on what options they can turn on.

70
00:04:22.545 --> 00:04:27.418
So I'm trying to remove options
now from JSLint as much as I can,

71
00:04:27.418 --> 00:04:30.308
but I recently added the this option so

72
00:04:30.308 --> 00:04:35.032
we can transit out.
&gt;&gt; Speaker 2: You don't use prototypes at

73
00:04:35.032 --> 00:04:38.020
all in the code you write, you personally?
&gt;&gt; Douglas Crockford: I am not using

74
00:04:38.020 --> 00:04:42.861
prototypes anymore.
&gt;&gt; Speaker 2: Okay, so Ben pointed out

75
00:04:42.861 --> 00:04:47.258
yesterday that one of the drawbacks to
function versus objects is that all your

76
00:04:47.258 --> 00:04:51.910
functions, every function you have,
there's an instance of that function.

77
00:04:51.910 --> 00:04:53.851
That's functional programming that's-
&gt;&gt; Douglas Crockford: Yeah,

78
00:04:53.851 --> 00:04:55.160
we're gonna talk about that.

79
00:04:55.160 --> 00:04:57.136
That's coming up next.
&gt;&gt; Speaker 2: Okay,

80
00:04:57.136 --> 00:05:03.005
I was gonna say are there any other
drawbacks to abandoning prototypical?

81
00:05:03.005 --> 00:05:03.896
&gt;&gt; Douglas Crockford: That's the one.

82
00:05:03.896 --> 00:05:04.704
&gt;&gt; Speaker 2: Okay.

83
00:05:04.704 --> 00:05:05.652
&gt;&gt; Douglas Crockford: So I've stopped

84
00:05:05.652 --> 00:05:07.180
using null.

85
00:05:07.180 --> 00:05:11.396
JavaScript has two bottom values,
which is at least one more than it should.

86
00:05:11.396 --> 00:05:16.950
And so I'd stopped using null,
I just use undefined now for everything.

87
00:05:16.950 --> 00:05:20.080
Even though it's longer to type it,
that doesn't matter.

88
00:05:20.080 --> 00:05:25.228
So, and I stopped relying on falsiness.

89
00:05:25.228 --> 00:05:28.195
I used to think that
falsiness was a good idea and

90
00:05:28.195 --> 00:05:33.180
I advocated having comparisons and
ifs that were as small as possible.

91
00:05:33.180 --> 00:05:37.518
I now think that was a mistake, that we
should be trying to make comparisons that

92
00:05:37.518 --> 00:05:41.860
are as explicit as possible, trying to
intelligently bifurcate the true cases

93
00:05:41.860 --> 00:05:46.668
from the false cases.
&gt;&gt; Douglas Crockford: I've stopped using

94
00:05:46.668 --> 00:05:51.088
for, because in years five we got
foreach and every and map and

95
00:05:51.088 --> 00:05:53.990
all those others and those are great.

96
00:05:53.990 --> 00:05:56.789
So for most purposes I don't
need to use for loops anymore.

97
00:05:58.270 --> 00:06:02.620
I don't use for in, because I managed
to get object.keys out of the ES5.

98
00:06:02.620 --> 00:06:07.245
So for in never worked correctly anyway,
because it would always dredge through

99
00:06:07.245 --> 00:06:11.191
the prototype chain and you get all
the inherited methods coming up,

100
00:06:11.191 --> 00:06:13.519
which you would then have to filter out.

101
00:06:13.519 --> 00:06:15.960
For in never worked right.

102
00:06:17.600 --> 00:06:21.189
So ES6 will have proper tail calls,
and when we get that,

103
00:06:21.189 --> 00:06:24.500
I will stop using while.
&gt;&gt; Douglas Crockford: So

104
00:06:24.500 --> 00:06:27.370
here are two versions
of the repeat function.

105
00:06:27.370 --> 00:06:30.195
repeat takes a function as an argument,
and

106
00:06:30.195 --> 00:06:32.320
we'll call it until it returns undefined.

107
00:06:33.480 --> 00:06:37.770
And that's a version written using a loop,
and that's a version using tail recursion.

108
00:06:37.770 --> 00:06:38.290
In ES6,

109
00:06:38.290 --> 00:06:43.590
these should both run at the same speed,
both consuming the same amount of memory.

110
00:06:43.590 --> 00:06:48.700
So this will probably be the last
feature implemented in ES6,

111
00:06:48.700 --> 00:06:51.320
so I'm still waiting for it.

112
00:06:51.320 --> 00:06:55.940
But when it comes,
then I'm done with loops and I'm gonna

113
00:06:55.940 --> 00:06:58.813
be doing tail recursion from here on out.
&gt;&gt; Speaker 2: Under the hood,

114
00:06:58.813 --> 00:07:03.653
what does tail recursion look like
in order to prevent from having this

115
00:07:03.653 --> 00:07:06.570
extremely long stack?
&gt;&gt; Douglas Crockford: It's really simple.

116
00:07:06.570 --> 00:07:13.930
Just this turns into jump to,
it's like a goto with an argument list.

117
00:07:15.590 --> 00:07:17.830
So we jump to the repeat function.

118
00:07:17.830 --> 00:07:20.340
So we're jumping to the top.

119
00:07:20.340 --> 00:07:23.477
And if this has a new value,
which it doesn't,

120
00:07:23.477 --> 00:07:27.178
the new value would get assigned
up here and we go again.

