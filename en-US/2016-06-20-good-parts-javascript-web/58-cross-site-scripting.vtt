WEBVTT

1
00:00:00.000 --> 00:00:03.924
[MUSIC]

2
00:00:03.924 --> 00:00:08.161
&gt;&gt; Douglas Crockford: So this attack which
I just outlined is called the XSS attack,

3
00:00:08.161 --> 00:00:10.942
which stands for cross site scripting.

4
00:00:10.942 --> 00:00:12.770
Now it should be called CSS.

5
00:00:12.770 --> 00:00:15.540
But there was another
abomination called CSS.

6
00:00:15.540 --> 00:00:20.060
So they call it XSS but
the name is a problem.

7
00:00:21.240 --> 00:00:24.200
The name says that there's something
wrong with cross-sitescripting but

8
00:00:24.200 --> 00:00:27.290
in fact that is a highly desirable thing.

9
00:00:27.290 --> 00:00:30.680
We want to be able to have sites cooperate
with each other and businesses and

10
00:00:30.680 --> 00:00:34.249
services cooperate with each other which
might be located on different sites.

11
00:00:35.290 --> 00:00:39.722
That's a desirable thing,
it's not a bad thing.

12
00:00:39.722 --> 00:00:45.030
And there are forms of this attack which
do not require the use of a second site.

13
00:00:45.030 --> 00:00:49.160
So the name is just completely wrong but
the security experts who first

14
00:00:49.160 --> 00:00:53.050
identified this attack did not
understand what this attack was.

15
00:00:53.050 --> 00:00:56.100
They gave an incorrect name but

16
00:00:56.100 --> 00:01:00.590
the security industry is still operating
on that name, and they're expecting you as

17
00:01:00.590 --> 00:01:05.579
practitioners to understand what they're
meaning when their language is incorrect.

18
00:01:08.080 --> 00:01:13.290
Cross site scripting attacks were invented
in 1995 when JavaScript was first released

19
00:01:13.290 --> 00:01:15.090
and they've been going on ever since.

20
00:01:16.810 --> 00:01:21.510
We're just now on the 20th anniversary
of cross site scripting attacks.

21
00:01:23.280 --> 00:01:25.560
So, we have made some baby steps.

22
00:01:25.560 --> 00:01:29.930
For example, there's a content security
policy thing that's in browsers now.

23
00:01:31.100 --> 00:01:34.370
It took a long time to get it out but
it's out there.

24
00:01:34.370 --> 00:01:36.520
Unfortunately most sites aren't using it.

25
00:01:36.520 --> 00:01:38.480
So it's still unsafe by default.

26
00:01:39.990 --> 00:01:41.210
And in fact, in order to use it,

27
00:01:41.210 --> 00:01:46.070
it means that a lot of common practices
now become illegal, as they should.

28
00:01:46.070 --> 00:01:50.680
But because they're common practices,
it's not gonna get used.

29
00:01:52.570 --> 00:01:55.323
A mashup is a self-inflicted XSS attack,

30
00:01:55.323 --> 00:01:58.228
and it turns out advertising is a mashup,
and

31
00:01:58.228 --> 00:02:03.063
the most reliable cost effective method
to inject evil code is to buy an ad.

32
00:02:06.419 --> 00:02:08.290
&gt;&gt; Douglas Crockford: So why is there XSS?

33
00:02:08.290 --> 00:02:10.730
So when things go wrong at
an architectural level,

34
00:02:10.730 --> 00:02:12.060
it's never just one thing.

35
00:02:12.060 --> 00:02:14.910
You need a lot of things
to go wrong simultaneously.

36
00:02:14.910 --> 00:02:16.830
And that happened on the Web.

37
00:02:16.830 --> 00:02:19.300
The first one is that the web
stack is too complicated.

38
00:02:19.300 --> 00:02:23.610
There are too many languages,
each with its own encoding, quoting,

39
00:02:23.610 --> 00:02:28.190
commenting and escapement conventions that
can all be nested inside of each other.

40
00:02:28.190 --> 00:02:30.690
I've called this the turducken problem.

41
00:02:30.690 --> 00:02:34.110
It's very difficult to look
at a piece of code and

42
00:02:34.110 --> 00:02:37.690
determine that it's going to
be benign in all contexts.

43
00:02:37.690 --> 00:02:39.420
That's a very hard analysis to do..

44
00:02:39.420 --> 00:02:42.775
And it's made even worse
because browsers do heroic

45
00:02:42.775 --> 00:02:45.255
things to try to make sense
out of malformed content.

46
00:02:47.225 --> 00:02:51.845
In fact HTML5 began as an attempt
to standardize the terrible stupid

47
00:02:51.845 --> 00:02:54.885
things that browsers do to try
to make sense of invalid HTML.

48
00:02:57.110 --> 00:03:01.523
Then that's compounded with the popularity
of template-based web frameworks that

49
00:03:01.523 --> 00:03:03.308
are optimized for XSS injection.

50
00:03:03.308 --> 00:03:06.305
I hate templating,
we'll talk more about those later.

51
00:03:06.305 --> 00:03:11.081
And then finally the JavaScript global
object gives every scrap of script

52
00:03:11.081 --> 00:03:13.326
the same powerful capabilities.

53
00:03:13.326 --> 00:03:16.313
And yet as bad as it is at security,

54
00:03:16.313 --> 00:03:21.773
the browser is still a vast
improvement over everything else.

55
00:03:21.773 --> 00:03:27.050
So the problem is not a cross
site scripting attack.

56
00:03:27.050 --> 00:03:29.380
It is a confusion of interests.

57
00:03:29.380 --> 00:03:33.920
The browser distinguishes between the
interests of the user and of the site, but

58
00:03:33.920 --> 00:03:37.310
it did not anticipate that there
might be other interests involved.

59
00:03:37.310 --> 00:03:38.170
And that's where it fails.

60
00:03:40.590 --> 00:03:42.866
So within a page interests are confused.

61
00:03:42.866 --> 00:03:45.425
So an ad, a widget, an AJAX library,

62
00:03:45.425 --> 00:03:50.130
an analytics library, anything that
gets loaded from a third party,

63
00:03:50.130 --> 00:03:52.980
all of that code gets exactly
the same rights as you do.

64
00:03:55.110 --> 00:03:59.680
It means you are trusting everybody
in all of those other institutions.

65
00:04:02.580 --> 00:04:05.300
Now JavaScript gets close
to getting it right and

66
00:04:05.300 --> 00:04:09.893
I think JavaScript can be repaired and
become an object capability language,

67
00:04:09.893 --> 00:04:11.620
we'll talk more about what that means.

68
00:04:13.200 --> 00:04:17.449
HTML, I don't have any hope that
we're ever gonna fix HTML and

69
00:04:17.449 --> 00:04:22.354
the DOM which is that hideous API
that HTML uses, is horribly insecure.

70
00:04:22.354 --> 00:04:23.755
I don't see that going away either.

71
00:04:25.165 --> 00:04:28.362
So this stuff is not gonna
get fixed in a hurry.

72
00:04:28.362 --> 00:04:32.392
So it's up to web developers to create
secure applications on an insecure

73
00:04:32.392 --> 00:04:35.682
platform and that is really, really hard.

74
00:04:35.682 --> 00:04:39.462
It shouldn't have to be that hard but
it is that hard.

