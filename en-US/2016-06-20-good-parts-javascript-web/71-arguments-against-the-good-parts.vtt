WEBVTT

1
00:00:00.000 --> 00:00:04.225
[MUSIC]

2
00:00:04.225 --> 00:00:08.357
&gt;&gt; Douglas: And so I wrote my own book
about my experience with JavaScript and

3
00:00:08.357 --> 00:00:13.010
with JSLint which is called
JavaScript: The Good Parts.

4
00:00:13.010 --> 00:00:17.040
And the surprising thing about this
book is it is still a bestseller in

5
00:00:17.040 --> 00:00:20.550
its category, which is extremely rare for
software books.

6
00:00:20.550 --> 00:00:23.630
Most software books are obsolete
before they're printed,

7
00:00:23.630 --> 00:00:27.970
and it's because things tend to change and
roll over so quickly in software.

8
00:00:27.970 --> 00:00:31.380
But it turns out the things that
I was saying in this book are for

9
00:00:31.380 --> 00:00:32.410
the most part right.

10
00:00:33.574 --> 00:00:38.875
And so it's still a relevant book even
though JavaScript has gone through

11
00:00:38.875 --> 00:00:43.935
two major standard revisions,
this book is still pretty good.

12
00:00:44.995 --> 00:00:50.600
So it's not universally adored though,
there are lots of arguments against

13
00:00:50.600 --> 00:00:55.440
the idea of good parts and I'd like to
run through some of those if I may.

14
00:00:55.440 --> 00:00:58.480
The first one, it's just a matter
of opinion, it's your opinion,

15
00:00:58.480 --> 00:01:01.520
my opinions different,
one opinions as good as another.

16
00:01:01.520 --> 00:01:08.750
So there, turns out that's not the case,
that I am the maintainer of JSLint.

17
00:01:08.750 --> 00:01:12.950
And as such I get bug reports from people
from all over the world telling me I

18
00:01:12.950 --> 00:01:16.160
just spent two weeks
chasing this thing down.

19
00:01:16.160 --> 00:01:19.880
And it was due to some weird edge case
in the grammar of the language that

20
00:01:19.880 --> 00:01:23.300
no one had ever noticed,
and it just crippled us,

21
00:01:23.300 --> 00:01:28.000
hurt us at a bad time and
could you have JSLint look for that?

22
00:01:28.000 --> 00:01:33.210
Cuz, if you can then no one else
will ever have to endure that.

23
00:01:33.210 --> 00:01:36.410
So whenever it makes sense to,
I incorporate those things.

24
00:01:36.410 --> 00:01:40.640
So if you're using JSLint, then you
will never experience those things,

25
00:01:40.640 --> 00:01:42.750
that is not an opinion, that is a fact.

26
00:01:45.200 --> 00:01:47.110
Every feature is an essential tool,

27
00:01:47.110 --> 00:01:50.750
I need every tool available
in order to do my work.

28
00:01:50.750 --> 00:01:55.370
But that's simply not true when we can
show that you can write better programs by

29
00:01:55.370 --> 00:01:57.040
not using all of the features.

30
00:01:57.040 --> 00:02:00.110
So if you can write a better program
without using a feature that feature

31
00:02:00.110 --> 00:02:01.190
is not essential.

32
00:02:03.550 --> 00:02:07.550
But this feature is sometimes useful and
that sounds like an important thing,

33
00:02:07.550 --> 00:02:10.320
I need to be able to use it
because it's sometimes useful.

34
00:02:10.320 --> 00:02:14.440
Except it turns out everything
is sometimes useful.

35
00:02:14.440 --> 00:02:18.040
You cannot identify anything which is so
dangerous, so toxic,

36
00:02:18.040 --> 00:02:22.080
so disgusting,
that is not also sometimes useful.

37
00:02:23.930 --> 00:02:29.030
Sometimes useful is about as
strong a statement as it exists.

38
00:02:29.030 --> 00:02:32.330
It sounds like it's a lot
more than that but it isn't,

39
00:02:32.330 --> 00:02:34.730
it actually is not an argument.

40
00:02:34.730 --> 00:02:38.045
So if the reason for using a feature
is because it's sometimes useful,

41
00:02:38.045 --> 00:02:39.605
you simply do not have an argument.

42
00:02:39.605 --> 00:02:43.455
I have a right to use every feature.

43
00:02:44.755 --> 00:02:46.455
Now at this point
the argument has changed.

44
00:02:46.455 --> 00:02:49.105
We're no longer talking about what's
the best way to write programs,

45
00:02:49.105 --> 00:02:50.955
we're now talking about our rights.

46
00:02:50.955 --> 00:02:55.979
And it sounds really important and
righteous to be talking about rights and

47
00:02:55.979 --> 00:03:00.935
defending [SOUND], except if you follow
this argument to its conclusion.

48
00:03:00.935 --> 00:03:04.470
Ultimately it goes like this,
do you have the right to write crap?

49
00:03:05.960 --> 00:03:08.180
Yes I have the right to write crap.

50
00:03:08.180 --> 00:03:11.970
So now we're arguing about do you have
the right to write crap is that true or

51
00:03:11.970 --> 00:03:13.970
not, I don't know,
I don't care it's not important.

52
00:03:13.970 --> 00:03:17.160
What's more important is you
have a responsibility to

53
00:03:17.160 --> 00:03:19.080
write code that works well and
is free of error.

54
00:03:21.266 --> 00:03:23.874
&gt;&gt; Douglas: I need the freedom
to express myself,

55
00:03:23.874 --> 00:03:28.858
I'm a poet in the way I express my
poetry is by leaving out my semicolons.

56
00:03:30.640 --> 00:03:32.949
&gt;&gt; Douglas: I need to
reduce my keystrokes.

57
00:03:34.000 --> 00:03:37.140
This is a really insidious
one big again because we

58
00:03:37.140 --> 00:03:40.170
imagine that we spend most of
our time typing but we don't.

59
00:03:41.690 --> 00:03:45.560
So if you were to take all the clean
finished code you finish in a year,

60
00:03:47.250 --> 00:03:48.280
you could type it in a day.

61
00:03:50.080 --> 00:03:54.040
So that raises a question, what are you
doing with the other 99% of your time?

62
00:03:57.520 --> 00:03:59.380
Keystrokes is not the important thing.

63
00:03:59.380 --> 00:04:03.650
If I could figure out a way to increase
your keystrokes by a factor of ten and

64
00:04:03.650 --> 00:04:07.220
cut your errors in half,
that would be a huge win.

65
00:04:07.220 --> 00:04:08.940
Unfortunately, I don't
have that formula for

66
00:04:08.940 --> 00:04:14.610
you but that's the sort of
ratios we're looking at.

67
00:04:14.610 --> 00:04:17.600
It is an insult to suggest that
I would ever make a mistake with

68
00:04:17.600 --> 00:04:19.180
a dangerous feature.

69
00:04:19.180 --> 00:04:22.470
Inferior people could obviously
have problems by doing that but

70
00:04:24.110 --> 00:04:25.240
I must have satisfaction.

71
00:04:26.811 --> 00:04:29.681
&gt;&gt; Douglas: And then there's a good
reason those features were added

72
00:04:29.681 --> 00:04:33.940
to the language and I can tell you from
experience, that is absolutely not true.

73
00:04:33.940 --> 00:04:38.530
I've seen how things get put into
languages, and those things happen for

74
00:04:38.530 --> 00:04:40.429
all kinds of reasons, and
they're not all good ones.

75
00:04:42.150 --> 00:04:46.380
The creator of JavaScript,
Brendan Eich talks about foot guns.

76
00:04:46.380 --> 00:04:51.559
A foot gun is a feature of the language
that you use to shoot yourself in the foot

77
00:04:51.559 --> 00:04:56.202
[SOUND] and he put a lot of those in
JavaScript and I think he regrets it.

78
00:04:56.202 --> 00:04:59.573
And from time to time he would
tell the standards committee,

79
00:04:59.573 --> 00:05:04.155
let's not be adding too many more foot
guns and they don't always listen to him.

80
00:05:04.155 --> 00:05:06.345
So you can always find more but

81
00:05:06.345 --> 00:05:10.953
there are guys who look [SOUND],
I almost always miss watch this.

82
00:05:10.953 --> 00:05:15.431
&gt;&gt; [SOUND]
&gt;&gt; Speaker 2: [LAUGH]

83
00:05:15.431 --> 00:05:16.072
&gt;&gt; Douglas: [LAUGH] So

84
00:05:16.072 --> 00:05:20.838
the purpose of a programming
language is to aid programmers in

85
00:05:20.838 --> 00:05:25.523
producing error-free programs,
that's the whole deal.

86
00:05:25.523 --> 00:05:29.163
So we used to think that it was not
possible to write good programs in

87
00:05:29.163 --> 00:05:33.519
JavaScript because the language was such
a mess that just wasn't possible, so

88
00:05:33.519 --> 00:05:35.540
no reason to even try.

89
00:05:35.540 --> 00:05:38.120
Turned out that was not true that

90
00:05:38.120 --> 00:05:42.340
it is not only possible to write good
programs in JavaScript, it is necessary.

91
00:05:42.340 --> 00:05:46.610
It is so easy to go off the rails
with this language it requires

92
00:05:46.610 --> 00:05:50.140
tremendous discipline, maybe more
discipline than any other language.

93
00:05:50.140 --> 00:05:52.299
So you really have to bring it
when you're using this language.

94
00:05:54.390 --> 00:05:58.820
So there's a lot of confusion still
about Java in JavaScript because

95
00:05:58.820 --> 00:06:01.880
they kind of look similar and
they have the same name.

96
00:06:03.380 --> 00:06:07.160
Sometimes I'm introduced as
a Java experts which I am but

97
00:06:07.160 --> 00:06:11.610
I'm usually invited because
I'm a JavaScript expert and

98
00:06:11.610 --> 00:06:15.194
it's similar to the confusion we have
between Star Trek and Star Wars.

99
00:06:15.194 --> 00:06:17.809
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: We've got two science

100
00:06:17.809 --> 00:06:22.110
fiction franchises with
basically the same name.

101
00:06:22.110 --> 00:06:26.190
And from ten feet away,
they kinda look like the same show.

102
00:06:26.190 --> 00:06:28.390
But we know they're not the same thing,
right?

103
00:06:28.390 --> 00:06:30.450
The differences are really significant.

104
00:06:30.450 --> 00:06:33.240
In Star Trek, you've got phasers,
and photon torpedoes,

105
00:06:33.240 --> 00:06:37.520
you've got uniforms, down regulations,
everything's regulations, right?

106
00:06:37.520 --> 00:06:41.320
Whereas in Star Wars,
you've got light sabres and blasters.

107
00:06:41.320 --> 00:06:44.810
You've got proton torpedoes,
completely different torpedoes.

108
00:06:44.810 --> 00:06:48.800
You've got sand,
I don't like sand and chaos.

109
00:06:49.830 --> 00:06:52.570
So you know which one
of these is JavaScript,

110
00:06:52.570 --> 00:06:54.230
well obviously Star Wars right.

111
00:06:55.476 --> 00:07:00.260
In fact when you're
working with JavaScript,

112
00:07:00.260 --> 00:07:02.330
JavaScript presents you with a choice.

113
00:07:03.520 --> 00:07:07.462
You can go Jedi or you can go Jar Jar.

114
00:07:07.462 --> 00:07:12.713
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: And

115
00:07:12.713 --> 00:07:15.961
quite a lot of our brothers
like to go Jar Jar so.

116
00:07:15.961 --> 00:07:21.342
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: So

117
00:07:21.342 --> 00:07:26.254
one thing I've observed, two things I've
observed are the fantasy of infallibility

118
00:07:26.254 --> 00:07:28.810
and the futility of faultlessness.

119
00:07:28.810 --> 00:07:32.130
I see the fantasy of infallibility
especially in younger guys,

120
00:07:32.130 --> 00:07:35.055
who think they have such that skills.

121
00:07:35.055 --> 00:07:38.190
That they can write just any crap in
it and they're gonna get away with it,

122
00:07:38.190 --> 00:07:43.510
that they can just do stupid and
that it's gonna be all right.

123
00:07:43.510 --> 00:07:46.450
Then, the futility of faultlessness,
I see this more among older guys.

124
00:07:46.450 --> 00:07:48.800
Guys have been doing this for a long time.

125
00:07:48.800 --> 00:07:56.000
I've never seen a girl write,
it's never gonna go right, why even try?

126
00:07:56.000 --> 00:08:03.480
Just so two very different perspectives
but they both lead to the same thing.

127
00:08:03.480 --> 00:08:07.240
Danger driven development where you
doing crazy reckless stuff in the code

128
00:08:07.240 --> 00:08:12.383
just to keep it interesting
cuz hey we don't do that.

129
00:08:12.383 --> 00:08:15.494
And don't forget your semicolons, right.

130
00:08:15.494 --> 00:08:18.918
So one of the things that makes
programming difficult to manage,

131
00:08:18.918 --> 00:08:20.730
is the difficulty of scheduling.

132
00:08:20.730 --> 00:08:23.850
That usually when we're doing something,
we're doing it for

133
00:08:23.850 --> 00:08:25.360
the first time we've ever done it.

134
00:08:25.360 --> 00:08:30.590
And so we don't know, there's no way we
could know how long it's gonna take but

135
00:08:30.590 --> 00:08:32.369
we'll make guesses and our guesses.

136
00:08:32.369 --> 00:08:35.690
Cuz we're optimists
are usually wildly wrong but

137
00:08:35.690 --> 00:08:41.280
that's the way it goes but what's even
harder is scheduling the second time.

138
00:08:41.280 --> 00:08:46.400
Which is the time B, the time it
takes to make the code work right,

139
00:08:46.400 --> 00:08:48.330
now that should be zero right.

140
00:08:48.330 --> 00:08:51.700
You should write it and
it should be right and we're done.

141
00:08:51.700 --> 00:08:57.080
But that's not the case,
that often time B is greater than time A,

142
00:08:57.080 --> 00:09:00.890
I've seen cases where time B is infinite.

143
00:09:00.890 --> 00:09:03.390
That's what happens when
the codes finished but

144
00:09:03.390 --> 00:09:06.730
then the project is cancelled
before they can get it to work.

145
00:09:06.730 --> 00:09:13.290
That happens way too often actually,
so if you do anything in time

146
00:09:13.290 --> 00:09:19.360
A that increases the likelihood of time
B being bigger, you're doing it wrong.

147
00:09:19.360 --> 00:09:21.060
That's not the time to be saving time.

148
00:09:22.860 --> 00:09:25.990
So we should always take
the time to code well.

149
00:09:25.990 --> 00:09:29.760
Sometimes there's this idea that,
well we're just doing this quick and

150
00:09:29.760 --> 00:09:33.010
dirty thing so let's just be really
sloppy and get it done fast.

151
00:09:34.040 --> 00:09:39.350
Except getting it done still
means it has to work and

152
00:09:39.350 --> 00:09:43.230
getting it to work is still going
to be easier if you write it well.

153
00:09:43.230 --> 00:09:46.790
That the time it takes to write it
well is going to be less time that

154
00:09:46.790 --> 00:09:49.210
takes to make it work right
if it's not written well.

