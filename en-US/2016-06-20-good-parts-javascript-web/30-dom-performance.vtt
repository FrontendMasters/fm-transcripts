WEBVTT

1
00:00:00.000 --> 00:00:03.646
[MUSIC]

2
00:00:03.646 --> 00:00:07.010
&gt;&gt; Douglas Crockford: So performance is
a huge problem in working with the DOM.

3
00:00:08.470 --> 00:00:12.570
Every time you touch a node,
you pay a huge time penalty.

4
00:00:12.570 --> 00:00:14.180
Restyling has a big cost.

5
00:00:14.180 --> 00:00:15.570
Reflowing has a big cost.

6
00:00:15.570 --> 00:00:17.370
Repainting has a big cost.

7
00:00:17.370 --> 00:00:20.130
Random things like node
lists can have a huge cost.

8
00:00:20.130 --> 00:00:24.280
A node list looks like an array except
every time you touch it it can repeat

9
00:00:24.280 --> 00:00:29.800
the query that caused it to come into
existence which can be wildly expensive.

10
00:00:30.930 --> 00:00:35.080
And it turns out in most applications
JavaScript has a very small cost.

11
00:00:35.080 --> 00:00:38.464
So if you took all the time that's being
spent in the browser and say, this much as

12
00:00:38.464 --> 00:00:42.860
parsing, this much as marshalling,
this much as rendering and so on.

13
00:00:42.860 --> 00:00:47.010
JavaScript will be like that much but
I see people going after their code,

14
00:00:47.010 --> 00:00:48.530
trying to shrink it down more,
and more, and

15
00:00:48.530 --> 00:00:52.310
more when it's all this other
stuff that's taking the time.

16
00:00:52.310 --> 00:00:57.190
Trying to optimize that,
if JavaScript engines were infinitely fast

17
00:00:57.190 --> 00:00:59.920
most web applications would
run about the same speed.

18
00:00:59.920 --> 00:01:01.240
No one would notice any difference.

19
00:01:03.700 --> 00:01:08.010
So you can't optimize for
performance unless you have good tools.

20
00:01:08.010 --> 00:01:10.130
Unfortunately, we now
have some good tools.

21
00:01:10.130 --> 00:01:12.090
For example,
there's speed tracer on Chrome.

22
00:01:14.410 --> 00:01:18.400
It records micro dense as your
application is running in the browser.

23
00:01:19.420 --> 00:01:22.830
And when it's done,
you can then do a post-mortem analysis and

24
00:01:22.830 --> 00:01:28.340
it will show you all the hotspots in
the code and what is consuming time.

25
00:01:28.340 --> 00:01:32.670
And with that information it is possible
to them optimize the application.

26
00:01:32.670 --> 00:01:37.350
Microsoft has a similar thing called
performance dashboard which I think

27
00:01:37.350 --> 00:01:39.284
starts becoming available on IE 11.

28
00:01:41.070 --> 00:01:46.730
Optimization without good
performance data is a waste of time.

29
00:01:46.730 --> 00:01:50.450
It turns out that a small amount of
JavaScript can transform the DOM

30
00:01:50.450 --> 00:01:53.910
just one of the world's awfullest APIs
into something pleasant and productive.

31
00:01:55.080 --> 00:01:59.350
So Ajax libraries are fun and easy to make
which is why there are so many of them.

32
00:01:59.350 --> 00:02:01.019
Any apps should be using one.

33
00:02:02.910 --> 00:02:09.090
They provide portability because the
browser is how, are hugely inconsistent.

34
00:02:09.090 --> 00:02:14.170
And so you need a library that will
deal with those inconsistencies for

35
00:02:14.170 --> 00:02:18.140
you so you can be working
with a much better model.

36
00:02:18.140 --> 00:02:22.500
They provide correction of errors that
are in the def specification of the DOM.

37
00:02:22.500 --> 00:02:25.630
They provide a much
higher programming model,

38
00:02:25.630 --> 00:02:27.090
something where you can
be much more productive.

39
00:02:27.090 --> 00:02:31.740
And they also provide sets of widgets,
which can simplify your development work.

40
00:02:33.620 --> 00:02:34.810
So how do you choose?

41
00:02:34.810 --> 00:02:36.490
There are so many libraries out there.

42
00:02:36.490 --> 00:02:39.874
It would take longer to do a complete
evaluation of all the existing libraries

43
00:02:39.874 --> 00:02:42.030
than to build a new one from scratch.

44
00:02:42.030 --> 00:02:44.790
I don't recommend that anybody
build a new one from scratch.

45
00:02:45.840 --> 00:02:49.900
So some years ago the Ajaxians
suggested throw a dart

46
00:02:49.900 --> 00:02:54.450
cuz just picking one at random they're all
pretty good and they're all much better

47
00:02:54.450 --> 00:02:58.570
than talking to the DOM directly so
you can't lose, just pick one at random.

48
00:02:59.650 --> 00:03:03.190
The problem with that is
that each one is a trap,

49
00:03:04.190 --> 00:03:06.840
that they are all extremely
incompatible with each other.

50
00:03:06.840 --> 00:03:10.910
In fact some are incompatible with
themselves from one version to another.

51
00:03:10.910 --> 00:03:14.870
That point one of something might be
completely incompatible with point two of

52
00:03:14.870 --> 00:03:19.140
something, and once you get into
one of these things you are stuck.

53
00:03:19.140 --> 00:03:22.690
It's made of tar and everything you write
is gonna be dependent on this thing and

54
00:03:22.690 --> 00:03:27.590
getting loose from it and onto something
else is extremely expensive and painful.

55
00:03:27.590 --> 00:03:29.270
So how do you decide what to do?

56
00:03:30.750 --> 00:03:35.100
Some years ago I predicted that
the market could not tolerate having so

57
00:03:35.100 --> 00:03:38.170
many of these libraries around that
there is gonna have to be a shakeout.

58
00:03:39.810 --> 00:03:45.920
And I predicted that they'd would all
disappear the be maybe two winners.

59
00:03:45.920 --> 00:03:47.690
One of them was probably
gonna be Microsoft,

60
00:03:47.690 --> 00:03:50.750
because one of the winners
is always Microsoft.

61
00:03:50.750 --> 00:03:55.360
And one would be something else,
PlayWire, Dojo or jQuery or something.

62
00:03:55.360 --> 00:03:57.480
That turned out to be completely wrong.

63
00:03:57.480 --> 00:04:00.930
The number of libraries has
only increased since then.

64
00:04:00.930 --> 00:04:03.470
And the first library to fail and

65
00:04:03.470 --> 00:04:08.010
completely leave a market was
Microsoft's Atlas which was so

66
00:04:08.010 --> 00:04:11.750
bad even they couldn't use it and
they switched to jQuery.

67
00:04:11.750 --> 00:04:13.940
So how do you decide?

68
00:04:13.940 --> 00:04:16.950
And it's a really hard problem and
I do not have a solution.

69
00:04:16.950 --> 00:04:20.480
And we find more libraries
coming online all the time,

70
00:04:20.480 --> 00:04:23.110
more platforms, more ways of doing stuff.

71
00:04:24.690 --> 00:04:28.010
And I thought I can't
keep up with the stuff.

72
00:04:28.010 --> 00:04:29.340
So how do you choose?

73
00:04:30.550 --> 00:04:33.940
I have no good advice except this for
what it's worth.

74
00:04:33.940 --> 00:04:38.710
Ask JSLint, take any candidates that
you're considering run through JSLint.

75
00:04:38.710 --> 00:04:40.799
That's an objective
measure of code quality.

76
00:04:40.799 --> 00:04:44.610
It will give you same indication
how well the things written.

77
00:04:44.610 --> 00:04:45.860
Maybe that's meaningful to you.

