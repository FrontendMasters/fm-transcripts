WEBVTT

1
00:00:00.000 --> 00:00:03.799
[MUSIC]

2
00:00:03.799 --> 00:00:07.765
&gt;&gt; Douglas: I think of programming
languages as being in two very distinct

3
00:00:07.765 --> 00:00:12.210
classes, systems languages and
application languages.

4
00:00:12.210 --> 00:00:16.440
A systems language is a language that
you would use for writing system stuff.

5
00:00:16.440 --> 00:00:19.700
Something that needs to be close
to the metal like a kernel,

6
00:00:19.700 --> 00:00:22.660
a device driver, a memory manager.

7
00:00:22.660 --> 00:00:26.200
That kind of low level stuff and
nothing else.

8
00:00:26.200 --> 00:00:29.483
Everything else should be written
in application languages.

9
00:00:29.483 --> 00:00:31.283
Now we need a new system language,

10
00:00:31.283 --> 00:00:36.050
our dominant system language is still
C which comes from the late 60s.

11
00:00:36.050 --> 00:00:40.950
That was a long, long time ago,
we seem to have lost the ability

12
00:00:40.950 --> 00:00:45.610
to innovate in system languages and
it's not like we don't need them anymore.

13
00:00:45.610 --> 00:00:51.550
I think we need a better version of C,
but it's a long time coming.

14
00:00:51.550 --> 00:00:53.490
But I'm more concerned with
the application languages,

15
00:00:53.490 --> 00:00:57.500
because that's where we all live and
we need better application languages.

16
00:00:57.500 --> 00:01:00.370
I think a mistake that you
can see in lots of languages

17
00:01:00.370 --> 00:01:04.230
is that they're confused about which
side of this line that they're on.

18
00:01:04.230 --> 00:01:08.270
For example, for my money the biggest
design error in Java was it couldn't

19
00:01:08.270 --> 00:01:11.400
decide if it wanted to be a system
language or an application language.

20
00:01:11.400 --> 00:01:16.220
And one of the signs of that is
that it requires the use of threads

21
00:01:16.220 --> 00:01:17.950
at the application level.

22
00:01:17.950 --> 00:01:20.740
Which I think was a tragic
mistake due from that confusion.

23
00:01:23.150 --> 00:01:27.460
So you can take the application languages
and divide them into two classes.

24
00:01:27.460 --> 00:01:29.800
There's the classical school and
the prototypal school.

25
00:01:30.960 --> 00:01:34.230
And for a long time I've been
an advocate of the prototypal school

26
00:01:34.230 --> 00:01:37.830
because of the obvious problems
that are in the classical school.

27
00:01:37.830 --> 00:01:42.610
That you've got the classification
taxonomy problem that we talked

28
00:01:42.610 --> 00:01:43.130
about earlier.

29
00:01:44.550 --> 00:01:49.280
Back when the goto argument was going on,
maybe at its loudest, someone published

30
00:01:49.280 --> 00:01:55.040
an article saying we should also
eliminate the come-from statement.

31
00:01:55.040 --> 00:01:58.620
And it was a joke of it and there were
people who attempted to design programming

32
00:01:58.620 --> 00:02:01.530
languages based on
the come-from statement.

33
00:02:01.530 --> 00:02:04.940
But it turns out we have
come-from statements in

34
00:02:04.940 --> 00:02:08.380
our classical languages
except we call it extends.

35
00:02:08.380 --> 00:02:14.560
And what it does has cause coupling of
things and coupling can be a problem.

36
00:02:14.560 --> 00:02:18.320
When you couple things together, then one
becomes dependent on the other you cannot

37
00:02:18.320 --> 00:02:20.590
change them independently anymore.

38
00:02:20.590 --> 00:02:25.340
And that causes systems to become brittle
and that happens in class systems.

39
00:02:26.660 --> 00:02:31.970
And so the big advantage in prototypal
systems is we eliminate that coupling.

40
00:02:31.970 --> 00:02:38.000
Or we at least reduce it significantly,

41
00:02:38.000 --> 00:02:42.560
such that that no longer becomes
a problem or a barrier to progress.

42
00:02:42.560 --> 00:02:46.630
So, as a big advocate of
prototype inheritance.

43
00:02:47.940 --> 00:02:49.270
Since then I've changed my mind,

44
00:02:49.270 --> 00:02:53.820
that the biggest benefit you get from
prototypes is memory conservation.

45
00:02:53.820 --> 00:02:56.830
And I think that might have been
important, probably was important.

46
00:02:56.830 --> 00:02:59.517
Well, maybe it wasn't important in 1995.

47
00:02:59.517 --> 00:03:05.430
It's not so important now, that we've
had memory has become so abundant.

48
00:03:05.430 --> 00:03:08.090
You now have gigabytes of
RAM in your pocket and

49
00:03:08.090 --> 00:03:11.680
when you just can't
imagine that much memory.

50
00:03:12.820 --> 00:03:16.930
You really don't understand numbers
that big, but we still think about

51
00:03:16.930 --> 00:03:21.850
memory as though it's doled out in k.

52
00:03:21.850 --> 00:03:24.680
So may have made sense then,
not so much now.

53
00:03:24.680 --> 00:03:28.620
It also is a source of confusion that
we have owned properties and inherited

54
00:03:28.620 --> 00:03:33.550
properties which for some purposes act
the same, but for some purposes don't.

55
00:03:33.550 --> 00:03:36.500
I'm looking to get rid of
all sources of confusion

56
00:03:36.500 --> 00:03:39.550
as you know because confusion
causes bugs and exploits.

57
00:03:41.500 --> 00:03:44.120
It also provides retroactive heredity

58
00:03:44.120 --> 00:03:48.150
that you can change what an object
inherits after it's constructed.

59
00:03:49.480 --> 00:03:54.270
I've not found any good uses for this, but
I can imagine a lot of really bad uses for

60
00:03:54.270 --> 00:03:57.970
it and it's something that is
provided by this architecture.

61
00:03:57.970 --> 00:04:02.297
One bad thing about it is
performance inhibiting.

62
00:04:02.297 --> 00:04:08.000
So JavaScript engines go fast by making
assumptions about the shape of objects.

63
00:04:09.210 --> 00:04:12.360
And they have to be pessimistic
when it comes to prototype chains.

64
00:04:12.360 --> 00:04:16.930
Because a prototype chain can
change its contents at any time and

65
00:04:16.930 --> 00:04:20.220
they need to be prepared for
that and that slows things down.

66
00:04:22.490 --> 00:04:26.170
So, I used to be in favor
of prototypal inheritance,

67
00:04:26.170 --> 00:04:30.310
I'm now in favor of class free
object-oriented programming.

68
00:04:30.310 --> 00:04:34.673
I think class free object-oriented
programming is JavaScript's gift to

69
00:04:34.673 --> 00:04:35.740
humanity.

70
00:04:35.740 --> 00:04:38.580
I think that's why this
is an important language.

71
00:04:38.580 --> 00:04:41.000
It's why I hope it becomes
an influential language.

72
00:04:42.400 --> 00:04:44.630
So let's review this again.

73
00:04:44.630 --> 00:04:45.950
So this is block scope.

74
00:04:47.670 --> 00:04:51.132
And we've got functions which have
the same scope relationship and

75
00:04:51.132 --> 00:04:52.725
we've got our closure again.

76
00:04:52.725 --> 00:04:58.375
And we've got this

77
00:04:58.375 --> 00:05:02.245
really important form where we have
a function that returns a function.

78
00:05:03.670 --> 00:05:07.982
And this is I think the best most
important discovery in the history

79
00:05:07.982 --> 00:05:11.919
of programming and
we have it in this silly little language.

80
00:05:14.418 --> 00:05:18.067
&gt;&gt; Douglas: So to review one last time,
this is the model that I recommend for

81
00:05:18.067 --> 00:05:19.691
doing object-oriented for

82
00:05:19.691 --> 00:05:25.190
doing class free object-oriented
programming using functions in JavaScript.

83
00:05:25.190 --> 00:05:28.930
We've got a constructor which
takes a specification object.

84
00:05:28.930 --> 00:05:32.340
We make our instance
variables which we can

85
00:05:32.340 --> 00:05:35.414
initialize from the specification object.

86
00:05:37.296 --> 00:05:42.280
We get other methods or other functions
that we can use that we can get

87
00:05:42.280 --> 00:05:45.700
from other constructors and
we can call as many of these as we like.

88
00:05:48.390 --> 00:05:52.830
We then create our methods which
will close over all of the members,

89
00:05:52.830 --> 00:05:56.479
all of the other methods, all of our
methods and the specification object.

90
00:05:59.230 --> 00:06:01.500
And any of these which need to be public,

91
00:06:01.500 --> 00:06:04.290
we will put in the outgoing
object which we then freeze.

92
00:06:06.160 --> 00:06:10.980
By doing this, we get an object
which has a hard interface,

93
00:06:10.980 --> 00:06:13.430
an uncorruptable will interface.

94
00:06:13.430 --> 00:06:17.250
It will always work exactly the way
it should, it cannot be confused.

95
00:06:18.350 --> 00:06:21.460
And it also corrects,
I think a problem that we've always had in

96
00:06:21.460 --> 00:06:24.600
objects in that some things you
want to access through a method.

97
00:06:24.600 --> 00:06:29.510
And some simply by poking
at the properties.

98
00:06:30.590 --> 00:06:33.580
Except if you allow people
to poke at the properties,

99
00:06:33.580 --> 00:06:36.469
then there is no defense
against inconsistency.

100
00:06:37.640 --> 00:06:42.620
Everything, all changes at least to the
object should go through the interfaces.

