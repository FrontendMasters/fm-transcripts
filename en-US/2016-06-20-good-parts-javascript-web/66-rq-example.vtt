WEBVTT

1
00:00:00.000 --> 00:00:04.055
[MUSIC]

2
00:00:04.055 --> 00:00:07.020
&gt;&gt; Douglas Crockford: So
this is an example of an RQ program.

3
00:00:07.020 --> 00:00:12.660
You can write RQ in the form
of nested arrays which

4
00:00:12.660 --> 00:00:17.630
describe the work that you wanna
do with the calls to RQ acting

5
00:00:17.630 --> 00:00:22.370
as annotations as to what happens in
parallel, what happens in serial.

6
00:00:22.370 --> 00:00:27.980
So here we've got one request,
that's gonna do stuff in parallel.

7
00:00:27.980 --> 00:00:30.460
In parallel,
it's gonna do a couple of sequences and

8
00:00:30.460 --> 00:00:33.920
then one standalone thing and
a race and a fallback.

9
00:00:33.920 --> 00:00:35.050
And simultaneously,

10
00:00:35.050 --> 00:00:38.580
it will also do this optional set,
just a similar sort of stuff.

11
00:00:38.580 --> 00:00:40.030
And when it's all done,

12
00:00:40.030 --> 00:00:46.505
we will then call this function that's the
continuation which will show the result.

13
00:00:46.505 --> 00:00:49.710
So this is an actual JavaScript program,
so let me execute it so

14
00:00:49.710 --> 00:00:50.983
you can see what it does.

15
00:00:54.948 --> 00:00:58.932
&gt;&gt; Douglas Crockford: So each of these
widgets represents some service which is

16
00:00:58.932 --> 00:01:01.510
being accessed by that program.

17
00:01:01.510 --> 00:01:04.640
So those are the ones
that start immediately.

18
00:01:04.640 --> 00:01:07.790
And I get to decide which of
these are going to succeed and

19
00:01:07.790 --> 00:01:09.030
which are going to fail.

20
00:01:09.030 --> 00:01:11.690
For example, if I have that one fail,

21
00:01:11.690 --> 00:01:16.500
then the entire request failed and
you can see I cancelled everything else

22
00:01:16.500 --> 00:01:20.500
because we don't need it if
the whole job's not gonna work.

23
00:01:20.500 --> 00:01:22.200
So let me reset and we'll try it again.

24
00:01:24.300 --> 00:01:29.010
So let's say this time that one succeeded,
okay, we're still running,

25
00:01:29.010 --> 00:01:29.629
things are good.

26
00:01:30.680 --> 00:01:33.680
This one is optional, let's say it fails.

27
00:01:33.680 --> 00:01:37.940
Okay, it failed but no problem,
it's optional so we're still running.

28
00:01:37.940 --> 00:01:44.110
Let's say this sequence starts, here it's
successful, good, so then A2 started.

29
00:01:44.110 --> 00:01:47.570
We got the request A1 finished so
A2 starts.

30
00:01:47.570 --> 00:01:52.220
You do a similar thing with B1,
that succeeded, so B2 is now running.

31
00:01:52.220 --> 00:01:57.308
We've got a race with D1, D2,
D3, which one should win?

32
00:01:57.308 --> 00:01:57.957
&gt;&gt; Speaker 2: 2.

33
00:01:57.957 --> 00:01:58.630
&gt;&gt; Douglas Crockford: 2.

34
00:01:58.630 --> 00:02:01.160
So race 2 wins.

35
00:02:01.160 --> 00:02:05.150
And we canceled D1 and D3 because we
don't need those results any more.

36
00:02:05.150 --> 00:02:08.720
Let's say our fallback fails,
not a problem.

37
00:02:08.720 --> 00:02:11.370
The next step in the fallback succeeds.

38
00:02:11.370 --> 00:02:14.180
And I can finish these in any order.

39
00:02:14.180 --> 00:02:17.920
So let's say that goes and
maybe that succeeds and

40
00:02:17.920 --> 00:02:22.060
that succeeds, that succeeds and
we're now good.

41
00:02:22.060 --> 00:02:24.270
So at that point the whole thing finished.

42
00:02:24.270 --> 00:02:26.640
All of the optional things
that were still pending,

43
00:02:26.640 --> 00:02:29.100
those got canceled and we're done.

44
00:02:31.870 --> 00:02:32.809
Any questions about that?

45
00:02:32.809 --> 00:02:33.430
&gt;&gt; Speaker 3: Yeah,

46
00:02:33.430 --> 00:02:38.920
could you give us a real world
example of where you'd use this?

47
00:02:38.920 --> 00:02:44.120
&gt;&gt; Douglas Crockford: Yeah, I will,
and I've been sort of doing that.

48
00:02:44.120 --> 00:02:48.850
So I gave examples that we get the nav and
we get the ads and all of those.

49
00:02:48.850 --> 00:02:50.440
Those are real world things.

50
00:02:50.440 --> 00:02:53.243
Those are the sorts of flows that
you would have in a web application.

51
00:02:53.243 --> 00:02:56.429
&gt;&gt; Speaker 3: They want 3 ads but
any of 12 could load there,

52
00:02:56.429 --> 00:02:59.090
it'll just take the first 3?

53
00:02:59.090 --> 00:03:01.741
&gt;&gt; Douglas Crockford: Sure, you can do
those sorts of things, whatever you need.

54
00:03:06.233 --> 00:03:09.630
&gt;&gt; Douglas Crockford: So this again is
the program that accomplished that.

55
00:03:09.630 --> 00:03:17.670
All of that behavior happened just in
the RQ functions handling that stuff.

56
00:03:19.560 --> 00:03:22.410
So and you can compose these
things in lots of ways.

57
00:03:22.410 --> 00:03:26.310
For example, this is a sequence
in which we'll do one thing and

58
00:03:26.310 --> 00:03:30.890
we'll take its result and we'll pass that
to three different things, and they will

59
00:03:30.890 --> 00:03:35.130
accumulate all of their results into an
array and pass that array to the last one.

60
00:03:36.470 --> 00:03:37.980
So you can get lots of workflows.

61
00:03:37.980 --> 00:03:38.530
So for

62
00:03:38.530 --> 00:03:43.090
a real world example, this is the most
recent thing that I've been working on.

63
00:03:43.090 --> 00:03:45.300
I'm working on an encyclopedia.

64
00:03:45.300 --> 00:03:48.810
And I'm writing in
a authoring language and

65
00:03:48.810 --> 00:03:52.840
this is the process that I run in node for
building the book.

66
00:03:53.910 --> 00:03:58.255
So I first read the file and
I pass that result to the include

67
00:03:58.255 --> 00:04:02.970
processor which handles the stuff
with all the include files.

68
00:04:02.970 --> 00:04:10.280
And then I pass it to a thing which will
then compile it and produce the HTML.

69
00:04:10.280 --> 00:04:13.640
And then I have another thing which will
then write it out to the file system.

70
00:04:15.260 --> 00:04:19.150
So this is a sequence,
one thing happens to another.

71
00:04:19.150 --> 00:04:22.070
But it's not being written
as nested event handlers,

72
00:04:22.070 --> 00:04:25.460
it's written as a list of things
that happen one thing after another.

73
00:04:25.460 --> 00:04:27.290
So it looks more like a program.

74
00:04:27.290 --> 00:04:28.110
&gt;&gt; Speaker 3: What's the callback?

75
00:04:28.110 --> 00:04:30.440
The callback's,
is the callback the next function,

76
00:04:30.440 --> 00:04:33.600
or-
&gt;&gt; Douglas Crockford: The callback is

77
00:04:33.600 --> 00:04:36.820
similar to the thing that we did
with continue wise this morning.

78
00:04:36.820 --> 00:04:38.488
It's the thing that will
receive the result.

79
00:04:42.514 --> 00:04:46.073
&gt;&gt; Douglas Crockford: So this is a special
case of continuation passing style where

80
00:04:46.073 --> 00:04:48.653
at each step, we don't return the result,

81
00:04:48.653 --> 00:04:52.455
instead we pass the result to
a function that's provided to us.

82
00:04:52.455 --> 00:04:56.580
&gt;&gt; Speaker 4: [COUGH] And final
callback is essentially a console log?

83
00:04:56.580 --> 00:04:58.650
&gt;&gt; Douglas Crockford: Yeah,
the last one will send it to the console.

84
00:04:58.650 --> 00:04:59.676
&gt;&gt; Speaker 3: Anyway,
this is your program, right?

85
00:04:59.676 --> 00:05:00.348
&gt;&gt; Douglas Crockford: Yep.

86
00:05:00.348 --> 00:05:04.163
&gt;&gt; Speaker 3: So
this first function to sequence,

87
00:05:04.163 --> 00:05:08.838
first it's gonna call
the first function and

88
00:05:08.838 --> 00:05:16.530
it's gonna call the second function and
then the third and the fourth.

89
00:05:16.530 --> 00:05:17.830
&gt;&gt; Douglas Crockford: Right.

90
00:05:17.830 --> 00:05:20.730
&gt;&gt; Speaker 3: Where's the first, the value
of callback that gets passed into

91
00:05:20.730 --> 00:05:22.670
the first function,
where's that come from?

92
00:05:24.260 --> 00:05:27.170
&gt;&gt; Douglas Crockford: It'll be called by,
so

93
00:05:27.170 --> 00:05:30.650
what I didn't show here is that
RQ.sequence returns a function.

94
00:05:32.170 --> 00:05:34.000
When we call that function,

95
00:05:34.000 --> 00:05:38.892
it will then call the first in this list
providing a callback function to it.

96
00:05:41.364 --> 00:05:45.690
&gt;&gt; Speaker 3: And that's the hook
that makes it call the second one.

97
00:05:45.690 --> 00:05:46.846
&gt;&gt; Douglas Crockford: Right.

98
00:05:46.846 --> 00:05:50.260
&gt;&gt; Speaker 3: Sort of RQ.sequence
kind of always passes itself

99
00:05:50.260 --> 00:05:52.910
into each of the functions that it calls?

100
00:05:52.910 --> 00:05:53.740
&gt;&gt; Douglas Crockford: Sort of, yeah.

101
00:05:53.740 --> 00:05:55.010
&gt;&gt; Speaker 3: Okay.

102
00:05:55.010 --> 00:05:58.490
&gt;&gt; Speaker 5: It passes the value
from the previous [INAUDIBLE].

103
00:05:58.490 --> 00:05:59.869
&gt;&gt; Douglas Crockford: Yeah, so-
&gt;&gt; Speaker 3: That, okay,

104
00:05:59.869 --> 00:06:02.120
you mentioned that earlier, yeah.

105
00:06:02.120 --> 00:06:03.960
&gt;&gt; Douglas Crockford: Right,
so you can think of it.

106
00:06:03.960 --> 00:06:08.430
It's sort of like a pipe that's
passing the stuff through so

107
00:06:08.430 --> 00:06:10.180
each gets the thing from the previous one.

108
00:06:11.760 --> 00:06:12.860
&gt;&gt; Speaker 3: And this is not node.

109
00:06:12.860 --> 00:06:15.590
This is just pure JS.

110
00:06:15.590 --> 00:06:16.750
&gt;&gt; Douglas Crockford: Right,
this is pure JS.

111
00:06:16.750 --> 00:06:19.770
You could run this on a browser as
well if you've got asynchronous

112
00:06:19.770 --> 00:06:20.460
things to do there.

113
00:06:20.460 --> 00:06:22.489
It would run as well.

114
00:06:22.489 --> 00:06:25.808
&gt;&gt; Speaker 3: Yeah, it's not a module,
it's just a global.

115
00:06:25.808 --> 00:06:28.673
RS would be a global or
wherever you declare it.

116
00:06:28.673 --> 00:06:31.975
&gt;&gt; Douglas Crockford: It's just a JS file,
you can load it however you want.

117
00:06:37.230 --> 00:06:38.117
&gt;&gt; Speaker 3: It's just a JS.

118
00:06:38.117 --> 00:06:43.680
It creates global, though,
called RS in the namespace.

119
00:06:43.680 --> 00:06:46.656
&gt;&gt; Douglas Crockford: In a browser
it creates a global namespace and

120
00:06:46.656 --> 00:06:49.010
in node it will add something.

121
00:06:49.010 --> 00:06:50.348
Yeah, it'll export as a model.

122
00:06:50.348 --> 00:06:57.340
So RQ can also deal with timeouts.

123
00:06:57.340 --> 00:07:03.010
So each of those functions will also
take a time in milliseconds which says,

124
00:07:03.010 --> 00:07:09.475
this needs to complete successfully
in this much time or we will fail it.

125
00:07:09.475 --> 00:07:14.320
In the case of the parallel,
you can also specify untiliseconds,

126
00:07:14.320 --> 00:07:16.290
which gives the optional set.

127
00:07:16.290 --> 00:07:18.830
You got this much time
until you get cancelled, so

128
00:07:18.830 --> 00:07:21.141
just in case that the main
ones finish early.

129
00:07:25.234 --> 00:07:27.280
&gt;&gt; Douglas Crockford: Then we
can also deal with cancellation.

130
00:07:27.280 --> 00:07:30.950
So any requestor function can optionally
return a cancel function, and

131
00:07:30.950 --> 00:07:35.830
that cancel function when it is called
will attempt to cancel the request.

132
00:07:35.830 --> 00:07:39.460
There's no guarantee that the cancellation
will happen before the request completes,

133
00:07:39.460 --> 00:07:42.610
because they can be network races and
other things going on.

134
00:07:42.610 --> 00:07:44.810
So it's intended to stop unnecessary work.

135
00:07:44.810 --> 00:07:46.960
It's not an undo, it's not a rollback.

136
00:07:46.960 --> 00:07:49.750
And also if you're trying to
cancel a transaction, for

137
00:07:49.750 --> 00:07:53.360
example, this is not the cancellation
that you want to do.

