WEBVTT

1
00:00:00.000 --> 00:00:03.755
[MUSIC]

2
00:00:03.755 --> 00:00:05.504
&gt;&gt; Douglas Crockford: The simplest
attack to prevent people

3
00:00:05.504 --> 00:00:10.494
from getting publications,
&gt;&gt; Douglas Crockford: Is this one where we

4
00:00:10.494 --> 00:00:13.196
simply subscribe with nothing.

5
00:00:13.196 --> 00:00:17.420
So that means we're gonna push
undefined on to the subscribers array.

6
00:00:17.420 --> 00:00:21.000
So when we go to do this loop,
kaboom right?

7
00:00:21.000 --> 00:00:26.037
And so everybody after us
doesn't get any messages sent.

8
00:00:26.037 --> 00:00:28.117
So how would you fix that?

9
00:00:28.117 --> 00:00:31.525
&gt;&gt; Speaker 2: That's not the problem
though, because the people before you

10
00:00:31.525 --> 00:00:33.287
still get it, so-
&gt;&gt; Douglas Crockford: Right, but

11
00:00:33.287 --> 00:00:36.806
the people after don't, and so-
&gt;&gt; Speaker 2: The problem is we try to

12
00:00:36.806 --> 00:00:38.580
prevent anyone-
&gt;&gt; Douglas Crockford: We have to make sure

13
00:00:38.580 --> 00:00:40.309
that everybody receives every message.

14
00:00:43.080 --> 00:00:46.440
If one person gets it we can't
say that we've succeeded, but

15
00:00:46.440 --> 00:00:47.900
everybody has to get it.

16
00:00:47.900 --> 00:00:51.080
&gt;&gt; Speaker 3: You can just do a type
check for your tag on me, right?

17
00:00:51.080 --> 00:00:52.080
&gt;&gt; Douglas Crockford: We could do that.

18
00:00:52.080 --> 00:00:57.180
Up here, we could do type check you know,
if type of equals function.

19
00:00:57.180 --> 00:01:01.480
&gt;&gt; Speaker 4: You should be re-wrapping
your call in a try catch with what inside.

20
00:01:01.480 --> 00:01:05.350
&gt;&gt; Douglas Crockford: Yeah, that's it
because if they were to pass any function

21
00:01:05.350 --> 00:01:10.374
that throws then it wouldn't do that, so-
&gt;&gt; Speaker 5: So pubsub

22
00:01:10.374 --> 00:01:13.002
is something we give out to all the-
&gt;&gt; Douglas Crockford: We give

23
00:01:13.002 --> 00:01:15.112
to all the third parties,
they all share that instance.

24
00:01:15.112 --> 00:01:17.432
&gt;&gt; Speaker 5: So really in this case
it's kind of don't trust user input.

25
00:01:19.812 --> 00:01:21.460
&gt;&gt; Speaker 5: They can
send to subscribers but

26
00:01:21.460 --> 00:01:24.650
they can send you a function as
subscriber, an empty string.

27
00:01:24.650 --> 00:01:28.119
&gt;&gt; Douglas Crockford: Right, well, in this
case it could be a malicious failure but

28
00:01:28.119 --> 00:01:30.860
it could also be an accidental failure.

29
00:01:30.860 --> 00:01:33.370
Someone might simply
call it incorrectly and

30
00:01:33.370 --> 00:01:36.180
we don't want the whole system
to fail because of that.

31
00:01:36.180 --> 00:01:39.690
So this is what try catches for, right?

32
00:01:39.690 --> 00:01:45.080
So we can simply catch the thing, ignore
the error and we'll keep on processing.

33
00:01:45.080 --> 00:01:46.970
So, that's good.

34
00:01:46.970 --> 00:01:50.830
So we're now ready for
your second observation.

35
00:01:50.830 --> 00:01:52.560
&gt;&gt; Speaker 4: Set subscribe to null.

36
00:01:52.560 --> 00:01:58.470
&gt;&gt; Douglas Crockford: Yeah, so we can
tamper with the pubsub instance itself and

37
00:01:58.470 --> 00:02:00.150
we can delete the properties.

38
00:02:02.340 --> 00:02:07.710
Change either of them to undefined or
null or replace them with other functions

39
00:02:07.710 --> 00:02:13.680
that could do things more insidious like
allow only certain people to subscribe or

40
00:02:13.680 --> 00:02:16.530
allow people to think they
subscribed when they didn't.

41
00:02:16.530 --> 00:02:18.536
Or to filter the messages
when they publish, or

42
00:02:18.536 --> 00:02:20.200
to tamper with the messages
when they publish,

43
00:02:20.200 --> 00:02:24.340
there's an infinite number of
terrible variations on this theme.

44
00:02:26.070 --> 00:02:27.850
So how would you fix that?

45
00:02:27.850 --> 00:02:31.331
&gt;&gt; Speaker 6: Use a server.

46
00:02:31.331 --> 00:02:32.111
&gt;&gt; Douglas Crockford: I'm sorry?

47
00:02:32.111 --> 00:02:35.627
&gt;&gt; Speaker 4: So
you aren't gonna really expose publish so

48
00:02:35.627 --> 00:02:41.208
much as,
&gt;&gt; Speaker 4: You're

49
00:02:41.208 --> 00:02:45.912
gonna return a function.

50
00:02:45.912 --> 00:02:48.392
You're gonna return a function.

51
00:02:48.392 --> 00:02:49.272
Returns a function?

52
00:02:50.852 --> 00:02:52.652
&gt;&gt; Speaker 4: I don't know.

53
00:02:52.652 --> 00:02:56.290
It's something like a getter and a setter.

54
00:02:56.290 --> 00:02:58.730
You're don't wanna set it
if they can only get it.

55
00:02:59.940 --> 00:03:01.970
&gt;&gt; Douglas Crockford: You could, but
there's an easier thing to do than that.

56
00:03:03.360 --> 00:03:04.300
&gt;&gt; Speaker 7: Freeze the option here?

57
00:03:04.300 --> 00:03:05.820
&gt;&gt; Douglas Crockford: Yeah,
you wanna freeze it.

58
00:03:05.820 --> 00:03:11.990
So if we freeze the object then all of
those attacks are completely frustrated.

59
00:03:11.990 --> 00:03:13.770
&gt;&gt; Speaker 4: Would you do
this right now in JavaScript?

60
00:03:13.770 --> 00:03:16.430
&gt;&gt; Douglas Crockford: Yeah,
freeze was added in the S5.

61
00:03:16.430 --> 00:03:17.010
&gt;&gt; Speaker 4: Okay.

62
00:03:17.010 --> 00:03:21.903
&gt;&gt; Douglas Crockford: So
it's in IE 9 and 10 and 11 and

63
00:03:21.903 --> 00:03:25.175
all the good browsers.

64
00:03:25.175 --> 00:03:28.655
So we can freeze.

65
00:03:28.655 --> 00:03:31.970
So that completely solves this.

66
00:03:31.970 --> 00:03:35.250
And so that's one of the reasons why I
like freeze as an object construction

67
00:03:35.250 --> 00:03:39.420
pattern because there's a whole lot of
stuff we'll never have to worry about

68
00:03:39.420 --> 00:03:41.210
if the objects are frozen.

69
00:03:41.210 --> 00:03:44.180
And freezing this object
does not impair its ability

70
00:03:44.180 --> 00:03:46.220
to do what it's supposed to do.

71
00:03:46.220 --> 00:03:49.390
That these methods still have
access to the subscribers array and

72
00:03:49.390 --> 00:03:52.150
still can do all that dynamic stuff.

73
00:03:52.150 --> 00:03:54.738
It's just nobody can
tamper with the instance.

74
00:03:56.898 --> 00:04:00.080
&gt;&gt; Douglas Crockford: Okay,
we're now ready for your next suggestion,

75
00:04:00.080 --> 00:04:01.119
your first one.

76
00:04:01.119 --> 00:04:01.799
&gt;&gt; Speaker 4: I forgot it already.

77
00:04:01.799 --> 00:04:07.436
&gt;&gt; Douglas Crockford: [LAUGH]
&gt;&gt; Speaker 4: We're gonna pass in.

78
00:04:07.436 --> 00:04:12.530
We're gonna subscribe with
a function that deletes,

79
00:04:12.530 --> 00:04:17.290
iterates through this and
deletes everything.

80
00:04:17.290 --> 00:04:18.120
&gt;&gt; Douglas Crockford: Yeah, exactly.

81
00:04:18.120 --> 00:04:19.030
&gt;&gt; Speaker 4: Something like that.

82
00:04:19.030 --> 00:04:19.990
&gt;&gt; Douglas Crockford: Yeah,
something like that.

83
00:04:19.990 --> 00:04:22.425
So that'd be something like this.

84
00:04:22.425 --> 00:04:28.600
So we're going to subscribe with
a function which will get access to this.

85
00:04:28.600 --> 00:04:32.980
And then that gives us access
to the subscribers array.

86
00:04:32.980 --> 00:04:37.743
Because this is a method invocation,
even though it doesn't look like a method.

87
00:04:37.743 --> 00:04:41.032
We're calling a function
that is stored in array,

88
00:04:41.032 --> 00:04:45.783
we don't think of that as being a method
invocation but JavaScript does.

89
00:04:45.783 --> 00:04:51.043
So everything from here on
will get bound to this.

90
00:04:51.043 --> 00:04:55.283
So in this case,
we're going to set this.length to 0.

91
00:04:55.283 --> 00:04:58.368
That will delete all
of the subscribers but

92
00:04:58.368 --> 00:05:01.800
we could do much more
insidious things as well.

93
00:05:01.800 --> 00:05:05.602
Again, there's an infinite number of bad
things you can do to this object if you

94
00:05:05.602 --> 00:05:06.579
get access to this.

95
00:05:09.039 --> 00:05:14.020
&gt;&gt; Douglas Crockford: And so this is
a big source of confusion again, right?

96
00:05:14.020 --> 00:05:18.604
That in JavaScript, things with
brackets are method invocations but

97
00:05:18.604 --> 00:05:21.485
we don't see those as method invocations.

98
00:05:21.485 --> 00:05:26.233
So again, this is a confusion which
leads to misunderstanding of what our

99
00:05:26.233 --> 00:05:31.375
programs do, which make it possible for
bugs and security exploits to happen.

100
00:05:31.375 --> 00:05:36.225
&gt;&gt; Speaker 4: Inside this function
that you've just written,

101
00:05:36.225 --> 00:05:39.689
this is the paysub object, right,

102
00:05:39.689 --> 00:05:45.995
with its var subscribers,
that's its scope, right?

103
00:05:45.995 --> 00:05:48.799
&gt;&gt; Douglas Crockford: No, in this is case,
this is the subscribers array.

104
00:05:51.010 --> 00:05:53.090
Because this is the method meant.

105
00:05:53.090 --> 00:05:57.940
Okay, so here's your function,
you pass it in to subscribe.

106
00:05:57.940 --> 00:05:59.950
So it gets stored in
the subscribers array.

107
00:06:01.090 --> 00:06:06.890
And in this loop, it now gets called but
it's being called as a method.

108
00:06:11.090 --> 00:06:13.650
There are four ways to call
a method in this language.

109
00:06:13.650 --> 00:06:16.730
I think there should only be one,
but there are four.

110
00:06:16.730 --> 00:06:21.231
And at least one of the forms is confusing
as to which kind of invocation it is.

111
00:06:23.771 --> 00:06:25.371
&gt;&gt; Douglas Crockford: So
how would you fix that?

112
00:06:33.071 --> 00:06:35.931
&gt;&gt; Speaker 7: My brain says call, no?

113
00:06:35.931 --> 00:06:36.692
&gt;&gt; Douglas Crockford: I'm sorry?

114
00:06:36.692 --> 00:06:38.691
&gt;&gt; Speaker 7: My brain says using call.

115
00:06:38.691 --> 00:06:42.455
&gt;&gt; Douglas Crockford: That would
be one way to do it if we say,

116
00:06:42.455 --> 00:06:47.420
subscribers[i] dot call and
then pass in that.

117
00:06:47.420 --> 00:06:48.271
That would be one way to do it.

118
00:06:50.392 --> 00:06:52.344
&gt;&gt; Douglas Crockford: The way
I would prefer to do it or

119
00:06:52.344 --> 00:06:57.155
the other thing you could do is assign
subscriber[i] to a local variable,

120
00:06:57.155 --> 00:06:59.050
and then call that variable.

121
00:07:00.980 --> 00:07:04.269
Or, what we could do is use forEach.

122
00:07:04.269 --> 00:07:09.520
I'm now distrustful of for loops in
general and I like forEach much better.

123
00:07:09.520 --> 00:07:16.025
So I can pass to forEach a function which
will call each element of the function and

124
00:07:16.025 --> 00:07:21.500
ignore any exceptions and
I really like this.

125
00:07:21.500 --> 00:07:23.130
I think this is very, very nice.

126
00:07:24.780 --> 00:07:27.330
So I'm not using for loops anymore.

127
00:07:27.330 --> 00:07:31.340
I'm doing this stuff instead and
because it's passing

128
00:07:31.340 --> 00:07:36.190
in each individual element, there's no
confusion about how this gets called.

129
00:07:36.190 --> 00:07:37.770
It's never gonna be a method invocation.

130
00:07:39.450 --> 00:07:41.590
In fact,
this function doesn't even see the array.

131
00:07:41.590 --> 00:07:44.170
All it sees are the individual elements.

132
00:07:45.370 --> 00:07:47.310
&gt;&gt; Speaker 4: Remind us
how to escape forEach.

133
00:07:47.310 --> 00:07:48.160
&gt;&gt; Douglas Crockford: I'm sorry?

134
00:07:48.160 --> 00:07:50.480
&gt;&gt; Speaker 4: Remind us,
how do you break out of a forEach.

135
00:07:50.480 --> 00:07:52.020
&gt;&gt; Douglas Crockford: You use
every instead of forEach.

136
00:07:53.450 --> 00:07:56.712
And we would design it so that this
function would always return true.

137
00:08:00.052 --> 00:08:01.660
&gt;&gt; Speaker 4: It returns
false then it leaves.

138
00:08:01.660 --> 00:08:05.250
&gt;&gt; Douglas Crockford: Then yeah,
false is the exit signal.

139
00:08:06.600 --> 00:08:08.411
&gt;&gt; Speaker 8: On the previous slide,

140
00:08:08.411 --> 00:08:13.217
somebody wants you to clarify why
does this refer to the array.

141
00:08:13.217 --> 00:08:17.072
&gt;&gt; Douglas Crockford: Right,
so this is the function

142
00:08:17.072 --> 00:08:21.677
that is being executed here, okay?

143
00:08:21.677 --> 00:08:27.397
And this form of function
invocation is the method form.

144
00:08:27.397 --> 00:08:32.017
The method form will have a dot in it or
a bracket in it.

145
00:08:32.017 --> 00:08:38.161
And so,
everything to the left of the last dot or

146
00:08:38.161 --> 00:08:42.614
last bracket gets bound to this and

147
00:08:42.614 --> 00:08:46.158
that's why that happens.

