WEBVTT

1
00:00:00.025 --> 00:00:04.011
[MUSIC]

2
00:00:04.011 --> 00:00:08.754
&gt;&gt; Douglas Crockford: Brendan invented
the script tag because he had the problem,

3
00:00:08.754 --> 00:00:12.480
where do you put the scripts
that go on the page?

4
00:00:12.480 --> 00:00:14.816
And since HTML was a text format,

5
00:00:14.816 --> 00:00:19.250
he decided to deliver the programs
to the browser in text form.

6
00:00:21.476 --> 00:00:25.886
&gt;&gt; Douglas Crockford: Which is unusual
because most languages will deliver

7
00:00:25.886 --> 00:00:29.030
an executable to the execution site.

8
00:00:30.250 --> 00:00:33.820
JavaScript delivers source
to the execution site and

9
00:00:33.820 --> 00:00:35.968
it was because of this problem.

10
00:00:35.968 --> 00:00:41.512
So one of the very first things they
found when they started writing

11
00:00:41.512 --> 00:00:46.759
pages to take advantage of
JavaScript was that when you display

12
00:00:46.759 --> 00:00:53.100
those pages on Navigator 1 and on Mosaic,
the script would show up as text.

13
00:00:53.100 --> 00:00:57.496
And that was because of the HTML rule, if
you see a tag and you don't recognize it,

14
00:00:57.496 --> 00:00:58.470
just keep going.

15
00:00:58.470 --> 00:01:02.070
And that was hugely embarrassing.

16
00:01:02.070 --> 00:01:05.130
And there is no way they
could go back in time and

17
00:01:05.130 --> 00:01:11.320
tell those older browsers not to do that,
so they came up with this terrible hack.

18
00:01:11.320 --> 00:01:14.540
They wrapped the script in HTML comments.

19
00:01:16.010 --> 00:01:21.370
And as long as you're not using a minus
minus, then the script will be hidden and

20
00:01:21.370 --> 00:01:22.230
no one will see it.

21
00:01:23.670 --> 00:01:25.047
I still see people doing that.

22
00:01:25.047 --> 00:01:26.879
So if you see anybody doing that,

23
00:01:26.879 --> 00:01:30.877
tell them this hasn't been necessary
since 1996, so knock it off.

24
00:01:33.154 --> 00:01:38.292
&gt;&gt; Douglas Crockford: Microsoft added
a language attribute because they intended

25
00:01:38.292 --> 00:01:43.327
to kill off JScript and
replace it with their own VBScript,

26
00:01:43.327 --> 00:01:46.970
VBScript being a dialect of Visual Basic.

27
00:01:48.260 --> 00:01:52.390
That didn't happen, and the irony is,

28
00:01:52.390 --> 00:01:55.950
the reason it didn't happen was because
they did such a good job on JScript.

29
00:01:55.950 --> 00:02:01.070
If they'd done their usual thing,
then JScript

30
00:02:01.070 --> 00:02:04.370
would not have gotten critical mass and
JavaScript probably would have failed, and

31
00:02:04.370 --> 00:02:07.170
they had a chance to steal the market,
but they didn't.

32
00:02:07.170 --> 00:02:11.005
So as it turned out, JavaScript was
the only language that ran reliably on all

33
00:02:11.005 --> 00:02:13.840
browsers, and so
that was the language everybody used.

34
00:02:13.840 --> 00:02:19.325
The only people I've seen using
VBScript are criminals and advertisers.

35
00:02:19.325 --> 00:02:21.041
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: Everybody else

36
00:02:21.041 --> 00:02:22.405
is using JavaScript.

37
00:02:24.217 --> 00:02:29.156
They added the source attribute
which was a really good idea

38
00:02:29.156 --> 00:02:34.210
cuz it turns out,
you should not put script tags onto pages.

39
00:02:34.210 --> 00:02:38.230
If if you put scripts into separate files,

40
00:02:38.230 --> 00:02:42.520
then they can be minified,
they can be gzipped, they can be cached.

41
00:02:42.520 --> 00:02:48.040
All of which are extremely good for page
startup performance, which is critical.

42
00:02:48.040 --> 00:02:51.290
If you put them on the page,
you don't get any of those benefits.

43
00:02:51.290 --> 00:02:54.040
So everything should be in separate files.

44
00:02:55.090 --> 00:03:01.020
Then finally W3C didn't like the language
attribute because they didn't make it up.

45
00:03:01.020 --> 00:03:05.510
So they replaced it with their own
thing and they say that it's required.

46
00:03:06.730 --> 00:03:11.750
But it turns out, if you're using
a source attribute, and you should,

47
00:03:11.750 --> 00:03:16.490
it is the server that is authoritative
on what the MIME type of the asset is,

48
00:03:16.490 --> 00:03:18.100
not the tag that requested it.

49
00:03:18.100 --> 00:03:21.380
So the browsers are required to ignore it.

50
00:03:21.380 --> 00:03:22.800
W3C says it's required.

51
00:03:24.060 --> 00:03:27.350
I say leave it out, it's not necessary.

52
00:03:27.350 --> 00:03:28.660
It's just a waste of space.

53
00:03:31.170 --> 00:03:36.789
So, document.write is I hope
the worst idea Brendan Eich ever has.

54
00:03:38.430 --> 00:03:44.170
The way he thought that interaction
with the browser was going to work was

55
00:03:45.830 --> 00:03:51.240
that JavaScript would run as the page
is being loaded incrementally.

56
00:03:51.240 --> 00:03:53.320
And that JavaScript, as it's running,

57
00:03:53.320 --> 00:03:58.619
can insert new HTML text into
the document as it's being parsed.

58
00:04:00.120 --> 00:04:02.780
Which was kind of awful.

59
00:04:02.780 --> 00:04:07.723
So I don't see it being used
very much anymore except by

60
00:04:07.723 --> 00:04:11.061
criminals and advertisers, okay?

61
00:04:11.061 --> 00:04:11.921
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: I see

62
00:04:11.921 --> 00:04:13.325
advertisers use this a lot.

63
00:04:13.325 --> 00:04:17.160
In the early days of web advertising,
there was a huge amount of fraud.

64
00:04:17.160 --> 00:04:21.760
All the ad companies were
ripping each other off.

65
00:04:21.760 --> 00:04:25.950
Misreporting image views and other things.

66
00:04:25.950 --> 00:04:31.730
So they came up with this
agreement that the way

67
00:04:31.730 --> 00:04:37.330
an ad placement can work is you
put some ad script on your page.

68
00:04:37.330 --> 00:04:41.590
It will do a document.write of
a script tag going to an ad server.

69
00:04:42.950 --> 00:04:46.790
And that one will then
return code which will do

70
00:04:46.790 --> 00:04:50.000
a document.write of a script
tag going to another server.

71
00:04:50.000 --> 00:04:53.426
And they can do several of those things,
going off to different places and

72
00:04:53.426 --> 00:04:57.840
it allows all of these different companies
or agencies to separately count the thing.

73
00:04:57.840 --> 00:05:01.150
So they can all agree on
what actually happened.

74
00:05:01.150 --> 00:05:05.010
But one of the consequences of that
is they can add huge delays to

75
00:05:05.010 --> 00:05:06.320
the rendering of the page.

76
00:05:06.320 --> 00:05:11.030
Because everything has to wait until all
those ad redirections get finished, and

77
00:05:11.030 --> 00:05:13.420
it's also a huge security vulnerability.

78
00:05:13.420 --> 00:05:19.600
Because any of those servers can
be sending anything they want.

79
00:05:19.600 --> 00:05:22.880
And if they send something nasty,
bad things happen and

80
00:05:22.880 --> 00:05:24.990
there's no way to defend against it.

81
00:05:24.990 --> 00:05:26.430
So that's all pretty awful.

82
00:05:28.460 --> 00:05:30.820
So I don't recommend
anybody use it ever again.

83
00:05:32.230 --> 00:05:34.950
So unfortunately where you put

84
00:05:34.950 --> 00:05:39.260
a script tag on a page can have a huge
impact on the page loading time.

85
00:05:41.760 --> 00:05:44.850
The correct place to put script
tags should be in the head.

86
00:05:45.870 --> 00:05:47.200
Because it's meta, right?

87
00:05:47.200 --> 00:05:49.160
Scripts are not content, they're meta.

88
00:05:49.160 --> 00:05:50.650
So that's what the head is for.

89
00:05:52.350 --> 00:05:56.110
Unfortunately, browsers are extremely
incompetent at script loading.

90
00:05:57.380 --> 00:06:00.000
And so if you put scripts in the head,

91
00:06:00.000 --> 00:06:05.740
then all parsing blocks until
the scripts load, compile, and execute.

92
00:06:05.740 --> 00:06:09.872
Which means that if there are any images
in the body that need to get loaded,

93
00:06:09.872 --> 00:06:13.556
they don't even start to load until
all the scripts are finished.

94
00:06:13.556 --> 00:06:15.700
That's not good.

95
00:06:15.700 --> 00:06:20.930
So Steve Souders figured out that we need
to move all the scripts to the bottom of

96
00:06:20.930 --> 00:06:23.180
the body instead.

97
00:06:23.180 --> 00:06:26.090
Which is great for performance but
terrible for reliability, but

98
00:06:26.090 --> 00:06:26.840
that's what we do now.

99
00:06:28.470 --> 00:06:31.750
He also recommended that we minify and
gzip the script files,

100
00:06:31.750 --> 00:06:33.780
which is very good advice.

101
00:06:33.780 --> 00:06:37.420
He also recommended that we reduce the
number of script files as much as possible

102
00:06:37.420 --> 00:06:39.590
by concatenating them all together.

103
00:06:39.590 --> 00:06:42.812
And they're really good reasons to
recommend that because HTTP is incredibly

104
00:06:42.812 --> 00:06:44.439
incompetent at loading script files.

105
00:06:44.439 --> 00:06:48.820
And so the serial delays in HTML request

106
00:06:48.820 --> 00:06:54.520
transactions really hurt you badly there.

107
00:06:54.520 --> 00:06:59.118
So Souders recommended that you can count
meet all of your script files together,

108
00:06:59.118 --> 00:07:04.340
and turn them into one big file and that
way you avoid some of that HTTP overhead.

109
00:07:05.480 --> 00:07:07.440
Unfortunately, that
leads to other problems.

110
00:07:07.440 --> 00:07:11.951
It completely breaks caching because
every page will have a different

111
00:07:11.951 --> 00:07:15.100
combinatorial set of
scripts it's gonna load.

112
00:07:15.100 --> 00:07:17.480
So the likelihood that one

113
00:07:17.480 --> 00:07:20.610
combined script file is gonna be
reused again is extremely low.

114
00:07:21.750 --> 00:07:27.090
It also introduces bugs because there
are certain errors that can happen,

115
00:07:27.090 --> 00:07:30.670
which are not correctable if
you put lots of files together.

116
00:07:30.670 --> 00:07:35.200
For example, you might have one file
that's written by an incompetent idiot who

117
00:07:35.200 --> 00:07:42.280
depends on semicolon insertion and that's
concatenated onto someone else's file.

118
00:07:42.280 --> 00:07:45.970
And the place where the semicolon
would be inserted is no longer

119
00:07:45.970 --> 00:07:50.540
an insertion site because of
the concatenation and now the file fails.

