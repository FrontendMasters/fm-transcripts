WEBVTT

1
00:00:00.000 --> 00:00:03.939
[MUSIC]

2
00:00:03.939 --> 00:00:05.840
&gt;&gt; Douglas Crockford: Here's
the next problem.

3
00:00:05.840 --> 00:00:08.982
This one's going to be a little bit
different in that we're going to do it

4
00:00:08.982 --> 00:00:09.930
altogether, okay?

5
00:00:09.930 --> 00:00:16.390
So we're gonna make an array
wrapper object with methods get,

6
00:00:16.390 --> 00:00:21.420
store and append, such that an attacker
cannot get access to the private array.

7
00:00:21.420 --> 00:00:27.430
So the idea is that we've got an array and
we want to protect it behind a good API.

8
00:00:27.430 --> 00:00:31.740
And we want to be able to hand it to
a third party, even a malicious third

9
00:00:31.740 --> 00:00:36.470
party that might want to get directly
to the array, which we want to prevent.

10
00:00:36.470 --> 00:00:38.070
So this is how we would do it,

11
00:00:38.070 --> 00:00:41.660
we've got our vector constructor,
which will make a vector instance.

12
00:00:41.660 --> 00:00:43.760
And it will have an append method,

13
00:00:43.760 --> 00:00:47.180
which can be used to append
things onto that secret array.

14
00:00:47.180 --> 00:00:52.030
It will have a store method, which will
allow you to store things into that array.

15
00:00:52.030 --> 00:00:53.520
And it will have a get method,

16
00:00:53.520 --> 00:00:57.880
which will allow you to retrieve
things from that array, okay.

17
00:00:57.880 --> 00:01:01.270
So think about how you might
implement something like that.

18
00:01:01.270 --> 00:01:04.020
I'm going to guess based
on what we've been doing,

19
00:01:04.020 --> 00:01:06.160
it might look something like this.

20
00:01:06.160 --> 00:01:07.800
So here's a function called vector.

21
00:01:08.820 --> 00:01:12.340
We have an array variable
containing the array,

22
00:01:12.340 --> 00:01:14.710
that's the secret that we want to protect.

23
00:01:14.710 --> 00:01:17.869
And it's hidden in the function scope,
so we're already off to a good start.

24
00:01:19.060 --> 00:01:22.870
And we're gonna return an object
containing three functions.

25
00:01:22.870 --> 00:01:25.750
We get function, store function,
and append function.

26
00:01:25.750 --> 00:01:31.280
The get function will take i and
return arrays of i.

27
00:01:31.280 --> 00:01:37.690
The store function will take i and
v and store into i the v value.

28
00:01:37.690 --> 00:01:41.870
And append will take a value and
push that value onto the array.

29
00:01:43.710 --> 00:01:48.590
So the guarantee that we want to make is
that we can give this to a third party.

30
00:01:48.590 --> 00:01:53.360
The third party can access the array
indirectly using these methods, but

31
00:01:53.360 --> 00:01:57.470
the third party cannot get direct
access to the array itself.

32
00:01:57.470 --> 00:02:02.010
Because we want to limit access
to the array, to only the things

33
00:02:02.010 --> 00:02:05.800
that we can do and not to any of the other
things that you could do to an array.

34
00:02:07.330 --> 00:02:08.600
Now it turns out,

35
00:02:08.600 --> 00:02:13.700
there is a vulnerability in JavaScript
which invalidates that guarantee.

36
00:02:13.700 --> 00:02:19.970
That it is possible for a determined
hacker to get direct access to the array.

37
00:02:21.300 --> 00:02:26.410
Now this problem has been shown to some of
the top JavaScript experts in the world,

38
00:02:26.410 --> 00:02:28.190
and they could not see the attack.

39
00:02:30.380 --> 00:02:35.300
The attack is not something that's
due to bugs in implementations,

40
00:02:35.300 --> 00:02:40.018
so we're only concerned with
standard behavior of the language.

41
00:02:40.018 --> 00:02:45.730
There are some things about the language
which we know are problematic.

42
00:02:45.730 --> 00:02:50.780
For example you can go to
array.prototype and replace its

43
00:02:50.780 --> 00:02:57.150
push method with your own method or, we'll
assume that those things have been fixed.

44
00:02:57.150 --> 00:03:01.600
So we're just concerned with the language
as it works, as we've discussed.

45
00:03:02.660 --> 00:03:08.500
So your job will be to figure
out this code and suggest

46
00:03:08.500 --> 00:03:14.180
how the code could be attacked, and how
an attacker could get access to the array.

47
00:03:15.640 --> 00:03:20.280
And then how we would repair it so
that the attacker couldn't do that.

48
00:03:20.280 --> 00:03:24.610
And my job will be to honestly answer all
of your questions about how this code

49
00:03:24.610 --> 00:03:29.300
works, and there you are, okay?

