WEBVTT

1
00:00:00.000 --> 00:00:04.079
[MUSIC]

2
00:00:04.079 --> 00:00:06.320
&gt;&gt; Douglas: Episode Four,
The Metamorphosis of Ajax.

3
00:00:08.270 --> 00:00:11.540
All the world's a page and all the men and
women merely pointers and clickers.

4
00:00:11.540 --> 00:00:15.295
So, we're gonna start this
hour with Sir John Harrington.

5
00:00:15.295 --> 00:00:20.486
The poet, courtier, the saucy godson
of Queen Elizabeth I of England,

6
00:00:20.486 --> 00:00:25.422
is best remembered today as being
an inventor, and he invented one of

7
00:00:25.422 --> 00:00:31.200
the fundamental inventions which makes
civilization at our scale possible.

8
00:00:31.200 --> 00:00:34.520
Without his breakthrough,
we could not live in cities,

9
00:00:34.520 --> 00:00:39.650
we could not be living in the density
necessary for technological achievement.

10
00:00:41.430 --> 00:00:46.390
Great move forward, so this is a picture
from his book of his invention.

11
00:00:46.390 --> 00:00:47.532
Can anybody identify it?

12
00:00:47.532 --> 00:00:49.230
&gt;&gt; Speaker 2: A toilet.

13
00:00:49.230 --> 00:00:50.200
&gt;&gt; Douglas: It is a flush toilet,

14
00:00:50.200 --> 00:00:55.750
indeed, just civilization
couldn't work without them.

15
00:00:55.750 --> 00:01:02.210
The Romans had flush technology, but
it was lost when the Empire collapsed,

16
00:01:02.210 --> 00:01:04.750
but Harrington rediscovered it and

17
00:01:04.750 --> 00:01:10.750
he built one of these devices for the
Queen and installed it in her residence.

18
00:01:10.750 --> 00:01:13.620
And, as usually happens with
the really important inventions,

19
00:01:14.630 --> 00:01:16.020
she refused to use it.

20
00:01:16.020 --> 00:01:18.500
She complained that it
made too much noise.

21
00:01:18.500 --> 00:01:21.770
She didn't want everybody in the castle
knowing when she was going about her

22
00:01:21.770 --> 00:01:25.400
Royal Business, so it never got used.

23
00:01:25.400 --> 00:01:28.600
But, he published a book about it, and

24
00:01:28.600 --> 00:01:32.420
eventually other inventors saw it and
improved it.

25
00:01:32.420 --> 00:01:37.060
Over the next couple hundred years, people
added other essential elements to it,

26
00:01:37.060 --> 00:01:40.206
including the float valve, and the S-trap,
and siphon, and eventually we got-

27
00:01:40.206 --> 00:01:41.040
&gt;&gt; Speaker 2: Where are the fish,

28
00:01:41.040 --> 00:01:43.950
though, I want fish in my toilet?

29
00:01:43.950 --> 00:01:45.020
&gt;&gt; Douglas: Of course you do.

30
00:01:45.020 --> 00:01:45.520
&gt;&gt; Speaker 2: Yeah.

31
00:01:46.740 --> 00:01:50.930
&gt;&gt; Douglas: So, he wrote a book, and the
title of the book was the Metamorphosis of

32
00:01:50.930 --> 00:01:56.020
Ajax, which he published in 1596,
he called it The Ajax.

33
00:01:56.020 --> 00:02:01.790
Well, now flash forward a little bit,
this is Jesse James Garrett.

34
00:02:01.790 --> 00:02:06.070
He was a designer and
consultant in San Francisco.

35
00:02:06.070 --> 00:02:08.720
He was on a project where he was

36
00:02:08.720 --> 00:02:11.920
consulting with the engineers
of the company, and

37
00:02:11.920 --> 00:02:16.990
they told him that they had found this way
of writing applications for the browser.

38
00:02:16.990 --> 00:02:20.600
That, instead of doing a page
replacement each time the user clicks,

39
00:02:20.600 --> 00:02:25.200
instead they will send a little bit of
data from the browser to the server.

40
00:02:25.200 --> 00:02:30.120
The server will then send a small
response back, JavaScript in the browser

41
00:02:30.120 --> 00:02:35.480
will then display it on the screen so
that they can get much better

42
00:02:35.480 --> 00:02:40.440
user experiences using this technique,
and it worked.

43
00:02:40.440 --> 00:02:44.020
The problem they were having was, they
couldn't convince their own management

44
00:02:44.020 --> 00:02:46.520
that this was an acceptable thing to do.

45
00:02:46.520 --> 00:02:49.210
So, they asked Garrett if he could

46
00:02:49.210 --> 00:02:51.710
please explain to management
that this was a good idea.

47
00:02:53.250 --> 00:02:55.380
So, Garrett goes off and
thinks about this problem,

48
00:02:55.380 --> 00:03:00.210
and thinks about,
how do we present this idea?

49
00:03:00.210 --> 00:03:03.260
And, he says the solution came to
him when he was in the shower.

50
00:03:04.430 --> 00:03:07.930
I think it would have been a better
story if he had been on the throne

51
00:03:07.930 --> 00:03:11.290
going about his royal business,
but he says he was in the shower

52
00:03:11.290 --> 00:03:14.050
when it occurred to him that
he had to give it a name.

53
00:03:14.050 --> 00:03:18.970
The name he gave it was
Asynchronous JavaScript and XML, or

54
00:03:18.970 --> 00:03:24.150
Ajax, and he published a memo about this
on his company's website in 2005 and

55
00:03:24.150 --> 00:03:26.430
it went viral almost overnight.

56
00:03:26.430 --> 00:03:30.530
Everybody was talking about Ajax and
writing Ajax applications for the Web, and

57
00:03:30.530 --> 00:03:34.220
it completely transformed the way we
think about browsers and JavaScript.

58
00:03:35.770 --> 00:03:41.500
Sort of give some historical context for
this, the Web comes from word processing,

59
00:03:41.500 --> 00:03:47.405
and word processing historically
comes in two very distinct schools.

60
00:03:47.405 --> 00:03:52.925
There's the binary proprietary school,
which started with standalone equipment,

61
00:03:52.925 --> 00:03:57.462
and then shared logic, and
eventually personal computers, which was

62
00:03:57.462 --> 00:04:02.630
dominated at various times by companies
like IBM, Wang, and today Microsoft.

63
00:04:02.630 --> 00:04:05.350
Then, there is the textual open school

64
00:04:05.350 --> 00:04:09.330
in which everything is
represented as text all the time.

65
00:04:09.330 --> 00:04:13.150
One of the first examples of this is
a program called Runoff that was developed

66
00:04:13.150 --> 00:04:17.680
by MIT, and Runoff was intended for

67
00:04:17.680 --> 00:04:21.530
producing text that could be
sent to various printers.

68
00:04:22.770 --> 00:04:25.090
So, here we've got
an example of a Runoff file.

69
00:04:26.120 --> 00:04:31.130
If a line starts with a period in
column one, that means it's a command.

70
00:04:31.130 --> 00:04:35.966
So, in this case, we'll skip one line, and
then we'll tab four, we'll offset four,

71
00:04:35.966 --> 00:04:40.421
and so on, and then the text between the
commands will be filled into the margins.

72
00:04:40.421 --> 00:04:46.295
Now this was a very popular program, it
was ported from one mainframe to another.

73
00:04:46.295 --> 00:04:50.100
It moved all over the place,
eventually got to Bell Labs,

74
00:04:50.100 --> 00:04:52.819
where its name was shortened to ROFF, and

75
00:04:52.819 --> 00:04:57.560
other versions of it were created,
including NROFF and TROFF.

76
00:04:57.560 --> 00:05:00.790
TROFF was the way the Unix
community did typesetting,

77
00:05:00.790 --> 00:05:02.160
made books for a long, long time.

78
00:05:03.880 --> 00:05:08.300
Meanwhile, there's an attorney
at IBM named Charles Goldfarb.

79
00:05:08.300 --> 00:05:10.340
He thinks he can do this stuff better, so

80
00:05:10.340 --> 00:05:15.270
he begins a project called Generalized
Markup Language, and this is an example of

81
00:05:15.270 --> 00:05:19.320
a Generalized Markup Language kind
of midpoint through its evolution.

82
00:05:21.030 --> 00:05:23.880
The markups got a little
bit more complicated.

83
00:05:23.880 --> 00:05:29.240
Now he's got a colon in column one,
followed by cryptic command,

84
00:05:29.240 --> 00:05:31.810
and then if the command
is followed by a dot,

85
00:05:31.810 --> 00:05:34.930
he can then have content on
the remainder of the line.

86
00:05:34.930 --> 00:05:39.894
So, you're starting to mix up with the
commands and the content, and if you're

87
00:05:39.894 --> 00:05:44.858
familiar with HTML, some of these commands
might be eerily familiar to you, and

88
00:05:44.858 --> 00:05:46.468
that's not accidental.

89
00:05:46.468 --> 00:05:51.083
In fact, HTML comes out of this heritage,
all of them except for EOL,

90
00:05:51.083 --> 00:05:54.227
but you can probably guess
what that one means.

91
00:05:54.227 --> 00:05:59.414
In fact,
as EML went through its evolution,

92
00:05:59.414 --> 00:06:05.282
we got :e, and then ::,
and then finally &lt;&gt;,

93
00:06:05.282 --> 00:06:09.801
and you know what happened after that.

94
00:06:09.801 --> 00:06:14.707
So, if you ever looked at HTML entities,
we've got an ampersand,

95
00:06:14.707 --> 00:06:17.560
the cryptic code, and a semi-colon.

96
00:06:17.560 --> 00:06:21.103
You're wondering, in what bizarre universe
does it make sense to have a piece of

97
00:06:21.103 --> 00:06:24.561
random punctuation, then a code, and
another random piece of punctuation?

98
00:06:24.561 --> 00:06:26.433
Where did that come from?

99
00:06:26.433 --> 00:06:29.072
This is where it came from,
he ran out of angle brackets.

100
00:06:29.072 --> 00:06:31.758
There was no other way
to make it look nice, so

101
00:06:31.758 --> 00:06:36.579
he went with the awful looking thing, so
where did the angle brackets come from?

102
00:06:36.579 --> 00:06:40.660
The angle brackets were
inspired by Scribe.

103
00:06:40.660 --> 00:06:45.260
Brian Reid was an amazingly bright guy
at Carnegie Mellon, who made Scribe,

104
00:06:45.260 --> 00:06:47.700
which he called a document compiler.

105
00:06:47.700 --> 00:06:52.360
This is the first time someone got
the separation between content and

106
00:06:52.360 --> 00:06:53.980
formatting right.

107
00:06:53.980 --> 00:06:59.000
Scribe was a brilliant piece of work,
Scribe could take documents and

108
00:06:59.000 --> 00:07:03.640
put them to all sorts of output devices,
and it had an extremely

109
00:07:03.640 --> 00:07:08.038
nice language that there was one reserved
character, which was the @ sign.

110
00:07:08.038 --> 00:07:10.970
You'd say @,
then the name of an environment, and

111
00:07:10.970 --> 00:07:16.020
then you'd have some quoted stuff, which
would be affected by that environment, and

112
00:07:16.020 --> 00:07:17.830
he had six sets of quoting characters.

113
00:07:17.830 --> 00:07:20.330
So, you could pick the one that's
guaranteed not to interfere with

114
00:07:20.330 --> 00:07:22.540
the content that you're putting inside,
and

115
00:07:22.540 --> 00:07:24.670
you could nest these things
as deeply as you wanted.

116
00:07:24.670 --> 00:07:28.180
And, if the nesting got too deep,
he had special forms with begin and

117
00:07:28.180 --> 00:07:32.980
end so that he didn't care about
things accidentally matching.

118
00:07:32.980 --> 00:07:36.170
So, for long things like chapters and
sections,

119
00:07:36.170 --> 00:07:41.900
you could enclose them like that,
and Goldfarb looked at this and

120
00:07:41.900 --> 00:07:44.740
went, angle brackets, I didn't know you
could do angle brackets, that's great.

121
00:07:44.740 --> 00:07:48.192
So, he stole some ideas from this,
unfortunately,

122
00:07:48.192 --> 00:07:50.304
he didn't steal enough ideas.

123
00:07:50.304 --> 00:07:56.180
So, one of the things that Scribe
could do was bibliographies.

124
00:07:56.180 --> 00:08:00.572
Since it was developed in a university,
it has to be able to deal with academic

125
00:08:00.572 --> 00:08:04.977
papers and such, so here we've got
a description of a tech report and a book.

126
00:08:04.977 --> 00:08:10.073
I believe that this is the very first
time that a document format was

127
00:08:10.073 --> 00:08:15.911
being used as a representation for
data because it looks like JSON, right?

128
00:08:15.911 --> 00:08:20.587
It's key value pair separated by commas,
and it's really reasonable looking and

129
00:08:20.587 --> 00:08:23.940
even things like the details,
like here equals 1972.

130
00:08:23.940 --> 00:08:27.740
There are no quotes around the year

131
00:08:27.740 --> 00:08:31.030
because requiring quotes around
numbers would be insane, right?

132
00:08:32.030 --> 00:08:36.970
It's just really good, so
the GML community got the idea

133
00:08:36.970 --> 00:08:41.240
of attributes from this, but
they didn't copy enough of the good stuff.

134
00:08:44.150 --> 00:08:47.980
It's a shame that Tim Berners Lee hadn't
been more knowledgeable about text

135
00:08:47.980 --> 00:08:53.350
processing systems because,
if he had based the Web on Scribe

136
00:08:53.350 --> 00:09:00.104
instead of on SGML, our lives today would
be so much better, but he didn't do that.

137
00:09:00.104 --> 00:09:06.480
So, we can see that Runoff
inspires GML and Scribe,

138
00:09:06.480 --> 00:09:11.210
and Scribe helps inspire SGML, but not
enough, and eventually that leads to HTML.

