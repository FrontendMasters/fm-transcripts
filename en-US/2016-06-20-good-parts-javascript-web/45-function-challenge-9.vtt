WEBVTT

1
00:00:00.000 --> 00:00:03.933
[MUSIC]

2
00:00:03.933 --> 00:00:09.190
&gt;&gt; Douglas Crockford: Write a function exp
that evaluates simple array expressions.

3
00:00:09.190 --> 00:00:15.180
A simple array expression is an array in
which the first element is a function and

4
00:00:15.180 --> 00:00:19.720
the remaining elements
are the arguments to that function.

5
00:00:21.120 --> 00:00:25.585
So if we pass that array, mul, five,

6
00:00:25.585 --> 00:00:31.176
11 to the EXP function, it will return 55.

7
00:00:31.176 --> 00:00:34.860
And if we simply pass
a number to the EXP function.

8
00:00:34.860 --> 00:00:37.582
It will just return that number, okay?

9
00:00:40.329 --> 00:00:43.690
&gt;&gt; Speaker 2: Binary?
&gt;&gt; Douglas Crockford: Yeah,

10
00:00:43.690 --> 00:00:45.250
but some are binary function.

11
00:00:45.250 --> 00:00:48.650
It turns out it will also work
with unary functions, but-

12
00:00:48.650 --> 00:00:49.520
&gt;&gt; Speaker 3: What's the next?

13
00:00:50.620 --> 00:00:51.600
Right, exp.

14
00:00:51.600 --> 00:00:52.340
Sorry.
&gt;&gt; Douglas Crockford: Yeah.

15
00:00:52.340 --> 00:00:54.840
Yeah, you're right.
&gt;&gt; Speaker 3: And

16
00:00:54.840 --> 00:00:58.680
it's always right?
&gt;&gt; Douglas Crockford: Could be two or

17
00:00:58.680 --> 00:00:59.180
three.
&gt;&gt; Speaker 3: Two or

18
00:00:59.180 --> 00:01:00.280
three, okay.
&gt;&gt; Douglas Crockford: But

19
00:01:00.280 --> 00:01:01.490
you don't care about that.

20
00:01:01.490 --> 00:01:03.540
Assume three, it's always.
&gt;&gt; Speaker 3: Sure.

21
00:01:04.630 --> 00:01:05.790
&gt;&gt; Douglas Crockford: Next year it'll

22
00:01:05.790 --> 00:01:06.740
be n, but.
&gt;&gt; Speaker 3: Right,

23
00:01:06.740 --> 00:01:07.720
okay.
&gt;&gt; Douglas Crockford: But

24
00:01:07.720 --> 00:01:15.680
this year it'll be three.
&gt;&gt; Douglas Crockford: Okay, here is exp.

25
00:01:17.220 --> 00:01:22.490
Exp takes a value and it returns
something if the value is an array.

26
00:01:22.490 --> 00:01:25.360
It returns a result of
calling the first element,

27
00:01:25.360 --> 00:01:28.140
passing the next two
elements as arguments.

28
00:01:28.140 --> 00:01:30.300
Otherwise, it returns the value.

29
00:01:30.300 --> 00:01:31.580
So, who got something that works?

30
00:01:32.920 --> 00:01:33.420
Very good.

31
00:01:35.955 --> 00:01:36.865
Wanna do one more?

32
00:01:36.865 --> 00:01:38.545
You think you've got it in you?

33
00:01:38.545 --> 00:01:40.135
It's gonna be based on this one, so

34
00:01:40.135 --> 00:01:43.411
if anybody didn't get this one,
get it now cuz you're gonna need it.

35
00:01:43.411 --> 00:01:45.957
Okay ready?

36
00:01:45.957 --> 00:01:50.020
Last problem.

37
00:01:50.020 --> 00:01:52.710
Finish Strong OK so.

38
00:01:52.710 --> 00:01:53.990
Modify x P.

39
00:01:53.990 --> 00:02:00.330
to evaluate nested array expressions and
that's that or expression is.

40
00:02:00.330 --> 00:02:03.080
Just like the simpler expressions except

41
00:02:03.080 --> 00:02:08.350
any of the arguments can also
be a nested array expression.

42
00:02:08.350 --> 00:02:13.410
So in this case, we've got
a hypotenuse thing going on here.

43
00:02:14.930 --> 00:02:18.613
And if we pass that nested
array structure to exp,

44
00:02:18.613 --> 00:02:22.745
it will now evaluate the whole thing and
come up with 5.

45
00:02:25.384 --> 00:02:29.513
&gt;&gt; Douglas Crockford: Everybody got it?

46
00:02:29.513 --> 00:02:34.700
[BLANK_AUDIO ]
&gt;&gt; Speaker 3: Getting one parameters is

47
00:02:34.700 --> 00:02:36.600
an array, can that pass of,

48
00:02:36.600 --> 00:02:41.760
pass to if it's evaluated.
&gt;&gt; Douglas Crockford: Yes.

49
00:02:41.760 --> 00:02:42.260
Exactly.

50
00:02:43.860 --> 00:02:45.650
So let's take a look at EXP.

51
00:02:46.950 --> 00:02:50.830
So the only change that
I made was I called EXP

52
00:02:50.830 --> 00:02:55.170
on each of the arguments
before we use them.

53
00:02:55.170 --> 00:02:56.070
That's it.

54
00:02:56.070 --> 00:03:00.360
And so, recursion ends up doing all
the work, which is really really nice.

55
00:03:00.360 --> 00:03:03.050
Anytime you're dealing with
nested data structures

56
00:03:03.050 --> 00:03:06.840
Recursion is usually the ideal
way to deal with that.

57
00:03:06.840 --> 00:03:11.800
So one of the nice things that this
function illustrates is just how powerful

58
00:03:13.460 --> 00:03:15.420
function systems can be.

59
00:03:15.420 --> 00:03:19.600
That this little function
in it is a little function

60
00:03:19.600 --> 00:03:21.350
Implement most of a programming language.

61
00:03:22.710 --> 00:03:24.696
Anyone recognize what language this is?

62
00:03:24.696 --> 00:03:29.460
List, yeah in list they use

63
00:03:29.460 --> 00:03:33.485
parents instead of brackets and the commas
are optional otherwise this is Lisp.

64
00:03:34.955 --> 00:03:39.025
It's clearly not the whole language, but
it's an interesting part of the language.

65
00:03:39.025 --> 00:03:46.065
And one of the reasons why people who
do Lisp act the way they do is because

66
00:03:46.065 --> 00:03:49.920
they can do stuff like this really,
really fast, really, really easily.

67
00:03:49.920 --> 00:03:53.200
It's just,
you compare that to implementing

68
00:03:54.260 --> 00:03:56.100
a system to do one of our languages.

69
00:03:56.100 --> 00:03:58.290
And it's just a completely
different thing.

70
00:04:00.070 --> 00:04:02.500
So I hope you all enjoy this.

71
00:04:02.500 --> 00:04:03.680
Today was grueling but

72
00:04:03.680 --> 00:04:06.650
you came out, does anybody feel
like their brain got bigger today?

73
00:04:06.650 --> 00:04:08.330
Anyone feeling that?

74
00:04:08.330 --> 00:04:11.880
So before I send you home obviously
you're going to need some homework right?

75
00:04:11.880 --> 00:04:13.060
So let's get to the homework.

76
00:04:15.850 --> 00:04:20.550
The homework problem is write
a function add G that adds for

77
00:04:20.550 --> 00:04:24.320
many invocations until it
sees an empty invocation.

78
00:04:24.320 --> 00:04:28.870
When you've got an empty invocation when
you receive undefined as an argument.

79
00:04:28.870 --> 00:04:33.420
So in this case if you pass nothing
to add G, it will return undefined.

80
00:04:33.420 --> 00:04:36.160
If you pass two and then nothing.

81
00:04:36.160 --> 00:04:36.880
It will return 2.

82
00:04:36.880 --> 00:04:40.370
If you pass 2 and then 7 and
then nothing, it will return 9.

83
00:04:40.370 --> 00:04:44.700
If you pass 3 and then 0, then 4,
and then nothing, it will return 7.

84
00:04:44.700 --> 00:04:48.870
And if you pass 1 and then 2 and
then 4 and then 8 and then nothing,

85
00:04:48.870 --> 00:04:49.960
it will return 15.

86
00:04:49.960 --> 00:04:54.390
So I'll give you a hint.

87
00:04:54.390 --> 00:04:58.140
This problem is going to involve
a function returning itself,

88
00:04:59.200 --> 00:05:01.910
which is something you may
have never encountered before.

