WEBVTT

1
00:00:00.000 --> 00:00:04.112
[MUSIC]

2
00:00:04.112 --> 00:00:06.228
&gt;&gt; Douglas: That's where
the stuff came from and

3
00:00:06.228 --> 00:00:10.256
because the beginners were writing
in HyperCard we know it's easy for

4
00:00:10.256 --> 00:00:14.571
beginners to use event based systems and
to do asynchronous programming.

5
00:00:14.571 --> 00:00:19.239
JavaScript is now moving to the server
after having conquered the browser it's

6
00:00:19.239 --> 00:00:22.582
now moving to the server and
it's conquering there too,

7
00:00:22.582 --> 00:00:26.831
which is great because it means all
of the skill that we've developed and

8
00:00:26.831 --> 00:00:31.637
doing stuff on the browser side we can now
bring those skills back to the server side

9
00:00:31.637 --> 00:00:35.330
it means you only need to be really
competent in one language and

10
00:00:35.330 --> 00:00:37.110
that can help save some time.

11
00:00:38.130 --> 00:00:42.740
Unfortunately what servers do is quite
different than what browsers do.

12
00:00:42.740 --> 00:00:47.150
In fact it's so different that you need
a fairly different programming model.

13
00:00:49.020 --> 00:00:51.160
We're doing server stuff now in node.

14
00:00:51.160 --> 00:00:54.320
Node implements a web server
in a JavaScript event loop.

15
00:00:54.320 --> 00:00:56.200
It's just a high performance event pump.

16
00:00:56.200 --> 00:01:00.170
It's very efficient, very fast,
can do a tremendous amount of work.

17
00:01:00.170 --> 00:01:03.000
It does File I/O correctly for
the first time.

18
00:01:04.300 --> 00:01:09.110
Going all the way back to Fortran and
COBOL, File I/O has always been blocking,

19
00:01:09.110 --> 00:01:12.440
and in node we finally get
non blocking File I/O.

20
00:01:12.440 --> 00:01:15.860
We do it asynchronously so
when you wanna read a file,

21
00:01:15.860 --> 00:01:20.650
you pass in a filename and a callback
function, and when the file is read,

22
00:01:20.650 --> 00:01:24.830
it'll call your callback function and
you get the data, and it's great.

23
00:01:24.830 --> 00:01:28.620
And so the programs don't block on
doing File I/O because blocking would

24
00:01:28.620 --> 00:01:31.632
violate the law of turns and
we'd never violate the law of turns.

25
00:01:31.632 --> 00:01:36.584
We note everything is or
can be should be non blocking.

26
00:01:36.584 --> 00:01:40.230
Unfortunately, like everything that
has anything to do with JavaScript,

27
00:01:41.820 --> 00:01:43.580
node doesn't get everything right.

28
00:01:43.580 --> 00:01:47.690
A couple of things that I'm
really unhappy about with node,

29
00:01:47.690 --> 00:01:51.050
is that node has a number of synchronous
functions baked into the API.

30
00:01:51.050 --> 00:01:55.460
And these synchronous
functions block everything.

31
00:01:55.460 --> 00:01:59.790
And so you go from having a very
fast high performance system

32
00:01:59.790 --> 00:02:04.750
to a very slow low performance system
instantly because you're blocking.

33
00:02:04.750 --> 00:02:08.540
Nothing else gets to happen until
the synchronous calls are done.

34
00:02:08.540 --> 00:02:11.720
I would like to outlaw those
synchronous functions.

35
00:02:11.720 --> 00:02:15.120
Unfortunately, what we've seen
in the JavaScript community

36
00:02:15.120 --> 00:02:20.060
is if you put something really stupid into
an API, there are web developers that say,

37
00:02:20.060 --> 00:02:23.370
I have a right to use it and there

38
00:02:23.370 --> 00:02:28.290
are these synchronous functions in node
which should never be used but because

39
00:02:28.290 --> 00:02:33.260
they're in node there are people using
them and they violate the law of turns.

40
00:02:34.310 --> 00:02:38.840
Then I don't like the requires
thing because it is also blocking.

41
00:02:38.840 --> 00:02:42.910
The very first version of it
on node was asynchronous,

42
00:02:42.910 --> 00:02:47.060
which is the correct way to do it and
there were complaints that it's too hard,

43
00:02:47.060 --> 00:02:52.030
it's inside out and
we only start things up in the morning

44
00:02:52.030 --> 00:02:57.620
when we turn the servers on and so once
they get warmed up then it doesn't matter.

45
00:02:57.620 --> 00:03:00.080
That's not true and then we're bringing
servers up and down all the time.

46
00:03:01.090 --> 00:03:03.970
Anything which blocks is a bad thing.

47
00:03:03.970 --> 00:03:08.662
Fortunately in ES 6 we're getting a new
module system which obsoletes that, so

48
00:03:08.662 --> 00:03:09.910
that will be better.

49
00:03:12.310 --> 00:03:15.950
But what we're doing, servers
are significantly different than browsers.

50
00:03:17.600 --> 00:03:21.250
In a server we're not dealing with
events we're dealing with messages.

51
00:03:21.250 --> 00:03:23.420
Now message comes in from the network.

52
00:03:23.420 --> 00:03:25.210
We'll do something,
we'll send another message out.

53
00:03:25.210 --> 00:03:26.110
It's all about messaging.

54
00:03:27.160 --> 00:03:31.420
A node server is actor like and that
it's a thing which receives messages and

55
00:03:31.420 --> 00:03:35.540
sends messages but
the simple events model that we

56
00:03:35.540 --> 00:03:40.610
use on the browser doesn't really fit
the workflows that we do on a server.

57
00:03:40.610 --> 00:03:45.900
For example, we may have things which
take several sequential steps like

58
00:03:45.900 --> 00:03:50.590
a request comes in, we take that request,
we have to send something to a database,

59
00:03:50.590 --> 00:03:53.180
get something back,
we can take that information,

60
00:03:53.180 --> 00:03:56.200
we use that to go to another database and
get stuff back.

61
00:03:56.200 --> 00:03:58.880
Each of these things depends
on the previous thing.

62
00:03:58.880 --> 00:04:00.470
How do you do that?

63
00:04:00.470 --> 00:04:01.800
If you don't know how to do it,

64
00:04:01.800 --> 00:04:04.930
the naive approach is to write
deeply nested event handlers.

65
00:04:04.930 --> 00:04:09.210
In the event handler of one thing,
you make a request of the next service and

66
00:04:09.210 --> 00:04:13.150
in it's event handler you make the request
of the next one that leads to code which

67
00:04:13.150 --> 00:04:17.830
is extremely brittle, extremely
hard to maintain, low performance,

68
00:04:17.830 --> 00:04:19.100
it's all bad stuff.

69
00:04:21.100 --> 00:04:23.840
Then we have the opportunity
to do things in parallel.

70
00:04:23.840 --> 00:04:28.540
It might be a request comes in and we can
go to several systems at the same time

71
00:04:28.540 --> 00:04:33.510
because the requests are not dependent on
each other so they're independent requests

72
00:04:33.510 --> 00:04:38.820
and by going in parallel,
we get to change the performance of

73
00:04:38.820 --> 00:04:44.190
the thing significantly because instead of
waiting for each to finish sequentially,

74
00:04:44.190 --> 00:04:46.800
instead of taking that much time,
we only have to wait for

75
00:04:46.800 --> 00:04:51.170
the slowest of those things,
which is usually a much shorter time.

76
00:04:51.170 --> 00:04:55.350
We can significantly improve
our response processing.

77
00:04:55.350 --> 00:05:00.283
Unfortunately, each of
these requests maybe coming

78
00:05:00.283 --> 00:05:05.010
back at unexpected times and an unexpected
orders and how do you deal with that?

79
00:05:05.010 --> 00:05:09.240
How do you and some might not come back
at all and how do you deal with that?

80
00:05:09.240 --> 00:05:10.610
And so that's hard.

81
00:05:10.610 --> 00:05:16.800
If you don't know how to manage that
naive thing is to not do it in parallel.

82
00:05:16.800 --> 00:05:21.410
Instead, do it sequentially with deeply
nested event handlers, which is, again,

83
00:05:21.410 --> 00:05:22.010
quite awful.

84
00:05:23.500 --> 00:05:27.080
Then in addition to that,
you may have to deal with limited time.

85
00:05:27.080 --> 00:05:31.950
You may have SLAs or other policies which
say we have to get a response within so

86
00:05:31.950 --> 00:05:35.650
many milliseconds and if we don't,
we have to go to plan B.

87
00:05:35.650 --> 00:05:39.990
We can't just keep the request hanging for
some amount of time.

88
00:05:39.990 --> 00:05:41.790
And then we have to
deal with cancellation.

89
00:05:41.790 --> 00:05:46.500
If we go to plan B, we want to stop all
of the work which is no longer necessary.

90
00:05:46.500 --> 00:05:49.800
How do you do all of those things
in deeply nested event handlers?

