WEBVTT

1
00:00:00.000 --> 00:00:03.746
[MUSIC]

2
00:00:03.746 --> 00:00:06.000
&gt;&gt; Douglas: So
this one's gonna be totally trivial.

3
00:00:06.000 --> 00:00:07.900
So I'm just gonna give you the solution.

4
00:00:07.900 --> 00:00:12.700
We're just gonna do this because it's
going to set up the next problem, okay?

5
00:00:12.700 --> 00:00:15.990
So we're gonna write a function
m that takes a value and

6
00:00:15.990 --> 00:00:19.850
an optional source string and
returns them as an object.

7
00:00:19.850 --> 00:00:23.365
And in this case, instead of
simply passing things to the log,

8
00:00:23.365 --> 00:00:28.860
I'm gonna be using JSON.stringify
to make strings of the object

9
00:00:28.860 --> 00:00:33.600
because it turns out object.toString
is completely worthless.

10
00:00:33.600 --> 00:00:35.860
It doesn't show you anything
about what's in the object.

11
00:00:38.920 --> 00:00:41.360
It's just not worth it.

12
00:00:41.360 --> 00:00:44.600
JSON.stringify, on the other hand
does a fairly good job of showing you

13
00:00:44.600 --> 00:00:46.160
what's in the object.

14
00:00:46.160 --> 00:00:53.470
So, in this case the stringification of
m(1) is an object where the value is 1 and

15
00:00:53.470 --> 00:00:58.210
the source is the string 1,
we make the string of the value.

16
00:00:59.510 --> 00:01:01.400
If we pass in a second argument,

17
00:01:02.545 --> 00:01:07.465
then that second argument
will be the source property.

18
00:01:07.465 --> 00:01:11.835
So if we pass in pi and the word pi,
the value will be pi, and

19
00:01:11.835 --> 00:01:12.815
the source will be pi.

20
00:01:13.945 --> 00:01:18.680
So this is the function,
the constructor that does that.

21
00:01:18.680 --> 00:01:19.716
So go ahead and type this in,

22
00:01:19.716 --> 00:01:22.452
I'll give you a minute and then we'll
go on and we'll do the next problem.

23
00:01:25.821 --> 00:01:29.959
&gt;&gt; Douglas: Write a function
addm that adds two m objects and

24
00:01:29.959 --> 00:01:32.600
returns an m object.

25
00:01:32.600 --> 00:01:37.840
So you can imagine we could have a
regulatory requirement that not only do we

26
00:01:37.840 --> 00:01:45.030
provide results, we also provide extreme
detail on how we obtained the results.

27
00:01:45.030 --> 00:01:47.650
So this is a way to help automate that.

28
00:01:47.650 --> 00:01:53.104
So, if I add two m objects,
I get an object where the value is the sum

29
00:01:53.104 --> 00:01:58.853
of the values, and the source is
the concatenation of the two values,

30
00:01:58.853 --> 00:02:03.742
of the two sources with a plus sign and
parents around them.

31
00:02:08.075 --> 00:02:15.280
&gt;&gt; Douglas: So, if we add m3 and
m4, the source will be (3 + 4).

32
00:02:17.780 --> 00:02:19.280
And similar thing happening with PI.

33
00:02:20.600 --> 00:02:22.581
Okay, so here is addm.

34
00:02:22.581 --> 00:02:26.090
addm takes two m objects,
it returns a new m

35
00:02:28.020 --> 00:02:32.590
object where the value will be the sum
of the two values and the string, or

36
00:02:32.590 --> 00:02:35.650
the source will be
the concatenation of the sources.

37
00:02:35.650 --> 00:02:36.510
So who got something works?

38
00:02:37.930 --> 00:02:39.125
Did anybody do it the hard way?

39
00:02:39.125 --> 00:02:44.360
Yeah, first rule of object related
programming, let the objects do the work.

40
00:02:44.360 --> 00:02:48.780
We already have a nice constructor and we
want to use it because there is a chance

41
00:02:48.780 --> 00:02:50.870
that we might change what m does and

42
00:02:50.870 --> 00:02:53.980
so we want all of the instances
to take advantage of that.

43
00:02:55.270 --> 00:02:56.301
So if you didn't get this one,

44
00:02:56.301 --> 00:02:58.375
write it down because we're going
to need it for the next one.

45
00:03:11.211 --> 00:03:11.970
&gt;&gt; Douglas: Okay, are we ready?

46
00:03:13.440 --> 00:03:19.250
So, write a function liftm that
takes a binary function and

47
00:03:19.250 --> 00:03:23.240
a string and
returns a function that acts on m objects.

48
00:03:23.240 --> 00:03:25.250
So we've done this before, right?

49
00:03:25.250 --> 00:03:29.300
If we passed the add function to liftm and

50
00:03:29.300 --> 00:03:33.540
also the plus string, it will make
a function that works exactly like addm.

51
00:03:35.430 --> 00:03:37.120
And we can do the same thing passing,

52
00:03:37.120 --> 00:03:41.560
multiply, an asterisk or
any binary function.

53
00:03:41.560 --> 00:03:44.370
So this will help us to automate
the process of building

54
00:03:44.370 --> 00:03:45.850
this system of journaling arithmetic.

55
00:03:48.410 --> 00:03:52.711
&gt;&gt; Speaker 2: Do you need to do the check
on the source whether it's string or?

56
00:03:52.711 --> 00:03:56.080
&gt;&gt; Douglas: No, if we try to concatenate
it with the strings it will be force to be

57
00:03:56.080 --> 00:03:56.622
a string.

58
00:03:56.622 --> 00:03:58.379
&gt;&gt; Speaker 2: Can you
show the problem again?

59
00:04:05.993 --> 00:04:07.835
&gt;&gt; Douglas: Okay, here is liftm.

60
00:04:07.835 --> 00:04:09.570
liftm takes a binary function and

61
00:04:09.570 --> 00:04:15.120
an op string, it returns a function that
takes a and b, it returns a new m object

62
00:04:15.120 --> 00:04:19.515
where the value will be the result of
the binary function on the two values, and

63
00:04:19.515 --> 00:04:23.540
the source will be the concatenation
of the sources of the op string.

64
00:04:23.540 --> 00:04:27.500
So who got liftm, way to go.

65
00:04:27.500 --> 00:04:30.850
So, if any of you ever heard of monads?

66
00:04:30.850 --> 00:04:35.770
Monads, the Haskell guys talk about them
all the time, you just made a monad so

67
00:04:35.770 --> 00:04:38.930
you can go home and tell your kids,
made a monad today.

68
00:04:38.930 --> 00:04:42.050
He did that, all right.

69
00:04:43.140 --> 00:04:48.190
&gt;&gt; Speaker 3: So, what is a monad?

70
00:04:48.190 --> 00:04:52.610
&gt;&gt; Douglas: So, a monad is a thing
where you can take functions and

71
00:04:52.610 --> 00:04:58.120
lift them up to a higher level where they
can have or acquire some new capability.

72
00:05:00.220 --> 00:05:04.616
The Haskell community uses them
because there's a trap in Haskell.

73
00:05:04.616 --> 00:05:07.920
Haskell is a brilliantly
designed language and

74
00:05:07.920 --> 00:05:11.420
one of the characteristics about it is
it does not allow any kind of mutation.

75
00:05:12.500 --> 00:05:15.859
So all functions are pure functions
in the mathematical sense and

76
00:05:15.859 --> 00:05:19.647
that's a really interesting thing,
except that if your programs have to

77
00:05:19.647 --> 00:05:23.758
interact with the real world, the real
world is constantly mutating, right?

78
00:05:23.758 --> 00:05:29.058
And something like a account balance
cannot be a constant, right?

79
00:05:29.058 --> 00:05:35.157
It's got a very and they can't even
do IO in a mutable system, right?

80
00:05:35.157 --> 00:05:36.493
You can't have anything coming in,

81
00:05:36.493 --> 00:05:39.000
you can't have anything going out
because nothing can ever change.

82
00:05:40.030 --> 00:05:43.856
So, that kind of made things
practically real hard for them and

83
00:05:43.856 --> 00:05:48.764
they'd figure out this trick with monads
which by using a higher order functions

84
00:05:48.764 --> 00:05:50.279
and really clever ways,

85
00:05:50.279 --> 00:05:55.135
they can have the appearance of mutation
without actually mutating anything.

86
00:05:58.138 --> 00:06:00.735
&gt;&gt; Douglas: But that's for another time,
anyway you made one of those, so

87
00:06:00.735 --> 00:06:01.600
congratulations.

88
00:06:01.600 --> 00:06:04.060
So if you didn't write,
if you didn't get this function,

89
00:06:05.360 --> 00:06:09.340
you should have it now cuz we're
gonna use it again in just a second.

90
00:06:09.340 --> 00:06:10.580
So is everybody ready to move on?

91
00:06:12.840 --> 00:06:14.540
Okay, so here's the next problem.

92
00:06:16.426 --> 00:06:20.920
Modify function liftm so
that the functions it produces can accept

93
00:06:20.920 --> 00:06:24.410
arguments that are either numbers or
m objects.

94
00:06:24.410 --> 00:06:28.000
So to make this a little bit easier
to use, you can pass in any number,

95
00:06:28.000 --> 00:06:30.910
you don't have to explicitly
wrap it with m first.

96
00:06:31.940 --> 00:06:37.920
So and
we'll just change liftm to do that, okay?

97
00:06:39.850 --> 00:06:44.110
And make it really flexible so
that you can pass in a number or

98
00:06:44.110 --> 00:06:49.349
an m object or two m objects or
two numbers, any combination will work.

99
00:06:52.280 --> 00:06:53.562
&gt;&gt; Speaker 3: You can choose three or

100
00:06:53.562 --> 00:06:54.794
four arguments or
&gt;&gt; Douglas: No,

101
00:06:54.794 --> 00:06:56.081
it will take two arguments.

102
00:06:56.081 --> 00:06:59.070
&gt;&gt; Speaker 3: One, liftm or-
&gt;&gt; Douglas: Or a number.

103
00:06:59.070 --> 00:07:01.153
&gt;&gt; Speaker 3: Or a number, okay.

104
00:07:01.153 --> 00:07:05.860
&gt;&gt; Douglas: Okay, here is liftm.

105
00:07:05.860 --> 00:07:07.980
So the change I made was in the box.

106
00:07:07.980 --> 00:07:10.360
I just looked at the type of the argument.

107
00:07:10.360 --> 00:07:14.530
And if it is a number,
I call m to turn it into an m object.

108
00:07:16.780 --> 00:07:18.850
So who got something that works?

109
00:07:18.850 --> 00:07:20.225
Very good.
Who did it the hard way?

110
00:07:20.225 --> 00:07:24.826
&gt;&gt; [INAUDIBLE]
&gt;&gt; Douglas: Where you didn't do that.

111
00:07:24.826 --> 00:07:29.760
[LAUGH] Yeah, so first rule of objects.

