WEBVTT

1
00:00:00.000 --> 00:00:04.338
[MUSIC]

2
00:00:04.338 --> 00:00:06.834
&gt;&gt; Douglas Crockford: But there is hope
in the principle of least authority.

3
00:00:06.834 --> 00:00:11.751
Which teaches that any unit of software
should be given just the capability

4
00:00:11.751 --> 00:00:14.180
as it needs to do its work and no more.

5
00:00:17.114 --> 00:00:19.970
&gt;&gt; Douglas Crockford: Capabilities
can be seen in the Actor model,

6
00:00:19.970 --> 00:00:22.610
which was discovered at MIT in 1973.

7
00:00:22.610 --> 00:00:28.530
The investigation of the Actor model
led to the invention of Scheme,

8
00:00:28.530 --> 00:00:32.390
which led to higher order functions and
all that good stuff.

9
00:00:32.390 --> 00:00:33.670
It also lead to Actors.

10
00:00:34.920 --> 00:00:38.290
So in the Actor model,
an actor is a computational entity.

11
00:00:38.290 --> 00:00:43.450
It's like asynchronous object systems.

12
00:00:43.450 --> 00:00:48.100
An actor can send a message to another
actor only if it knows its address.

13
00:00:48.100 --> 00:00:51.220
An actor can create a new actor and
an actor can create messages.

14
00:00:53.410 --> 00:00:57.564
Web workers are kind of like actors
web services aren't but should.

15
00:00:57.564 --> 00:01:02.435
There is a system called Waterken that was

16
00:01:02.435 --> 00:01:06.845
developed at HP Labs, which applies
the after model to web services.

17
00:01:06.845 --> 00:01:10.895
I think the stuff is brilliant,
it gives you very reliable systems.

18
00:01:10.895 --> 00:01:13.215
I highly recommend getting into that.

19
00:01:17.413 --> 00:01:21.479
&gt;&gt; Douglas Crockford: And so one of
the things that comes out of the the Actor

20
00:01:21.479 --> 00:01:24.265
model is the idea of capabilities.

21
00:01:25.280 --> 00:01:30.600
So an address to an actor is a capability
or reference to an object is a capability.

22
00:01:32.440 --> 00:01:35.821
So let's apply capabilities to
object-oriented programming,

23
00:01:35.821 --> 00:01:37.580
looking at object capabilities.

24
00:01:37.580 --> 00:01:39.126
So here is an object.

25
00:01:39.126 --> 00:01:41.649
A is an object, it has state and behavior.

26
00:01:44.520 --> 00:01:48.900
Object A has a reference to object B
because objects can have references.

27
00:01:50.380 --> 00:01:54.430
Object A can communicate with Object B
because it has that reference.

28
00:01:56.890 --> 00:02:01.250
Object B provides an interface that
constrains access to its own state in

29
00:02:01.250 --> 00:02:02.190
references.

30
00:02:02.190 --> 00:02:08.130
So object A does not get access to
B's internals, only to its interface.

31
00:02:08.130 --> 00:02:10.700
This is why I like freezing in JavaScript.

32
00:02:10.700 --> 00:02:14.310
Because in JavaScript,
that is the only way to guarantee this.

33
00:02:15.890 --> 00:02:18.330
The only way to make
good reliable objects.

34
00:02:20.570 --> 00:02:26.050
Object A does not have a reference to C,
so A cannot communicate with C.

35
00:02:26.050 --> 00:02:29.430
It's as though there is
a firewall between A and

36
00:02:29.430 --> 00:02:33.120
C expect that firewall is
implemented at zero cost.

37
00:02:35.910 --> 00:02:38.851
&gt;&gt; Douglas Crockford: An object capability
system is produced by constraining

38
00:02:38.851 --> 00:02:41.670
the ways that references are obtained.

39
00:02:41.670 --> 00:02:45.310
A reference cannot be obtained simply
by knowing the name of a public

40
00:02:45.310 --> 00:02:47.220
of a global variable or a public class.

41
00:02:48.470 --> 00:02:52.890
And in fact, there are exactly three
ways to obtain a reference by creation,

42
00:02:52.890 --> 00:02:54.920
by construction, and by introduction.

43
00:02:55.950 --> 00:02:59.330
By creation means that if
a function creates an object

44
00:02:59.330 --> 00:03:00.940
it gets a reference to that object.

45
00:03:02.900 --> 00:03:06.120
By construction means that an object
may be endowed by its constructor

46
00:03:06.120 --> 00:03:07.340
with references.

47
00:03:07.340 --> 00:03:10.220
This can include references in
the constructors context and

48
00:03:10.220 --> 00:03:11.117
inherited references.

49
00:03:11.117 --> 00:03:17.050
And then 3, this is the interesting
one by introduction.

50
00:03:17.050 --> 00:03:19.860
So here A has references to B and C.

51
00:03:19.860 --> 00:03:22.580
B and C have no references,
so they cannot communicate.

52
00:03:24.170 --> 00:03:26.630
But A wants them to be
able to communicate.

53
00:03:26.630 --> 00:03:29.240
So A communicates with B.

54
00:03:29.240 --> 00:03:33.890
Passing a reference to C,
and once that is done,

55
00:03:33.890 --> 00:03:38.670
B has now acquired the capability
to communicate with C.

56
00:03:38.670 --> 00:03:40.750
That's why this is called
the capability model.

57
00:03:43.630 --> 00:03:46.740
If references can only
be obtained by creation,

58
00:03:46.740 --> 00:03:50.820
construction, or introduction,
then you may have a safe system.

59
00:03:50.820 --> 00:03:53.940
And if they can be obtained
in any other way, you don't.

60
00:03:55.730 --> 00:03:59.090
So potential weaknesses to watch out for
include arrogation,

61
00:03:59.090 --> 00:04:01.980
corruption, confusion, and collusion.

62
00:04:01.980 --> 00:04:06.060
Arrogation means to take or
claim for oneself without right.

63
00:04:06.060 --> 00:04:08.960
This include global variables,
public static variables,

64
00:04:08.960 --> 00:04:14.160
standard libraries that grant powerful
capabilities, address generation.

65
00:04:14.160 --> 00:04:21.780
Which is why C++ can never be as secure
a language and known URLs in web systems.

66
00:04:21.780 --> 00:04:24.450
Corruption, It should not be
possible to tamper with or

67
00:04:24.450 --> 00:04:26.990
circumvent the system or other objects.

68
00:04:26.990 --> 00:04:29.590
Again, that's why the freezing is so
critically important.

69
00:04:31.310 --> 00:04:32.560
Number 3 confusion,

70
00:04:32.560 --> 00:04:35.750
it should be possible to create objects
that are not subject to confusion.

71
00:04:35.750 --> 00:04:39.550
Because a confused object can be tricked,
and then misusing its capabilities.

72
00:04:41.340 --> 00:04:42.880
And then, finally collusion.

73
00:04:42.880 --> 00:04:47.500
It must not be possible for two objects
to communicate until they are introduced.

74
00:04:47.500 --> 00:04:49.620
If two independent objects conclude,

75
00:04:49.620 --> 00:04:51.930
they might be able to pool their
capabilites to cause harm.

76
00:04:55.050 --> 00:04:57.910
Some capabilities are too
dangerous to give to guest code.

77
00:04:57.910 --> 00:05:01.180
So we can instead give those capabilities
to intermediate objects that will

78
00:05:01.180 --> 00:05:03.000
constrain their power.

79
00:05:03.000 --> 00:05:04.810
For example, an intermediate object for

80
00:05:04.810 --> 00:05:08.350
a file system might limit access to
a particular device or directory or so on.

81
00:05:11.120 --> 00:05:14.630
Ultimately, every object should be
given exactly the capabilities it

82
00:05:14.630 --> 00:05:17.380
needs to do its work and no more.

83
00:05:17.380 --> 00:05:20.860
So capability should be
granted on a need-to-do basis

84
00:05:20.860 --> 00:05:24.660
just as we grant information
on a need-to-know basis.

85
00:05:24.660 --> 00:05:29.990
The principles of information hiding,
which we know leads to good designs and

86
00:05:29.990 --> 00:05:33.860
software systems, are enhanced when
you're thinking about capability hiding.

87
00:05:36.500 --> 00:05:39.990
Intermediate objects or
facets can be very lightweight.

88
00:05:39.990 --> 00:05:43.120
And class-free languages can
be especially effective.

89
00:05:43.120 --> 00:05:47.440
I've tried making facets in Java and it
turns out, it's really hard because every

90
00:05:47.440 --> 00:05:49.930
time you wanna make a little connector,
you have to make another class.

91
00:05:49.930 --> 00:05:51.140
And that's a lot of work.

92
00:05:51.140 --> 00:05:55.010
Whereas in JavaScript, most of these
things are just a simple object or

93
00:05:55.010 --> 00:05:56.230
generator and, boom, you're done.

94
00:05:58.590 --> 00:06:04.070
So here the Facet object limits the Guest
object's access to a powerful object.

95
00:06:04.070 --> 00:06:07.010
The Guest object cannot tamper
with the Facet to get a direct

96
00:06:07.010 --> 00:06:08.379
reference to the dangerous object.

97
00:06:11.360 --> 00:06:14.180
References are not revocable
in a capability system,

98
00:06:14.180 --> 00:06:17.540
once you introduce an object,
you can't ask it to forget it.

99
00:06:17.540 --> 00:06:20.300
You can ask but you can not depend
on the request being honored.

100
00:06:23.000 --> 00:06:26.240
So here the Guest object has
a reference to an Agency object.

101
00:06:26.240 --> 00:06:28.340
The Guest asks for

102
00:06:28.340 --> 00:06:31.980
an introduction to the powerful object,
&gt;&gt; Douglas Crockford: But

103
00:06:31.980 --> 00:06:34.080
the Agency instead makes a Facet and

104
00:06:34.080 --> 00:06:38.350
gives the Facet to the Guest and
the Facet might be a simple pass through.

105
00:06:39.440 --> 00:06:41.320
The Guest can then call the Facet,
the pass.

106
00:06:41.320 --> 00:06:42.740
It will then call the powerful object.

107
00:06:44.390 --> 00:06:47.210
When the Agency wants to
revoke the capability,

108
00:06:47.210 --> 00:06:50.440
it tells the Facet to
forget its capability.

109
00:06:50.440 --> 00:06:53.500
The Facet is now useless to the guest.

110
00:06:53.500 --> 00:06:54.700
This is what you did yesterday.

111
00:06:54.700 --> 00:06:58.910
Yesterday's revocable
function was this pattern, so

112
00:06:58.910 --> 00:07:00.470
these things are really easy to implement.

113
00:07:02.980 --> 00:07:04.800
A Facet can mark requests so

114
00:07:04.800 --> 00:07:07.120
that the Powerful object can
know where they came from.

115
00:07:07.120 --> 00:07:08.290
That gives us accountability.

116
00:07:10.080 --> 00:07:14.020
Facets are very expressive, they're
easy to construct, they're lightweight.

117
00:07:14.020 --> 00:07:16.960
They provide attenuation or
power reduction.

118
00:07:16.960 --> 00:07:19.750
They give us revocation,
notification, delegation.

119
00:07:19.750 --> 00:07:24.210
And it turns out the best object-oriented
patterns are also capabilities patterns.

120
00:07:24.210 --> 00:07:26.600
Sometimes when you're trying
to design a system and

121
00:07:26.600 --> 00:07:29.990
you're trying to figure out does
this capability go there or there?

122
00:07:31.380 --> 00:07:36.650
And sorting those early on in, when you're
doing that design a taxonomy is hard.

123
00:07:36.650 --> 00:07:40.690
But if you think about it in terms
of capabilities, what is the least

124
00:07:40.690 --> 00:07:44.780
amount of power I need to give to this
guy in order to have it work correctly?

125
00:07:44.780 --> 00:07:47.080
You tend to end up with
the correct designs.

126
00:07:47.080 --> 00:07:51.790
That thinking about security make
system designing easier not harder.

127
00:07:54.530 --> 00:07:57.060
So Facets can reduce the power
of dangerous objects.

128
00:07:58.900 --> 00:08:03.250
Most code should not be given directly
access to dangerous things, for

129
00:08:03.250 --> 00:08:06.540
example the browser innerHTML or
document.write.

130
00:08:06.540 --> 00:08:09.640
Instead of trying to guess if a piece
of code can do something bad,

131
00:08:09.640 --> 00:08:12.760
we can give it a safe set
of capabilities instead.

132
00:08:12.760 --> 00:08:15.980
You know that even if it is bad,
it's limited in what it can do.

133
00:08:15.980 --> 00:08:17.780
And capabilities can aid in API design.

