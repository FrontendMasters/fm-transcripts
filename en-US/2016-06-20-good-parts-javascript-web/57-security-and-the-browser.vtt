WEBVTT

1
00:00:00.000 --> 00:00:03.922
[MUSIC]

2
00:00:03.922 --> 00:00:06.870
&gt;&gt; Douglas Crockford: So
that brings us to the browser.

3
00:00:06.870 --> 00:00:10.040
So the browser platform
is horribly insecure,

4
00:00:10.040 --> 00:00:12.560
we're still fixing it
later after over 20 years.

5
00:00:13.720 --> 00:00:18.190
HTML5 made things worse instead of better
by providing powerful new capabilities to

6
00:00:18.190 --> 00:00:22.650
the attacker without mitigating
any of the preexisting weaknesses.

7
00:00:22.650 --> 00:00:26.600
And yet it is still the world's
best application delivery system.

8
00:00:26.600 --> 00:00:29.840
It is better than everything else
including systems that were designed

9
00:00:29.840 --> 00:00:30.640
after the Web.

10
00:00:30.640 --> 00:00:32.990
Everybody refused to
learn the Web's lessons.

11
00:00:35.530 --> 00:00:39.340
So one of the things that the Web got
right, that virtually every other platform

12
00:00:39.340 --> 00:00:44.470
has gotten wrong is the web does not
have a blame the victim security model.

13
00:00:44.470 --> 00:00:46.700
A very common thing in systems is,

14
00:00:46.700 --> 00:00:49.860
that if a system has to make
a decision about security and

15
00:00:49.860 --> 00:00:54.990
does not have enough information to make
a correct decision, it will ask the user.

16
00:00:54.990 --> 00:00:59.573
And it will ask the user in language
that the user cannot understand.

17
00:00:59.573 --> 00:01:04.313
And if the user says no, then it fails.

18
00:01:04.313 --> 00:01:09.470
And if the user says yes, it is the users
fault for giving up their security.

19
00:01:09.470 --> 00:01:13.220
This is not a valid model of security but
we see it all the time.

20
00:01:14.250 --> 00:01:17.960
For example, I recently bought
an alarm clock at the Android store.

21
00:01:20.000 --> 00:01:22.550
And it was only after I bought it,
that I looked at the permissions.

22
00:01:22.550 --> 00:01:26.866
And one of the permissions it wanted
was unlimited access to the internet.

23
00:01:26.866 --> 00:01:27.977
[INAUDIBLE] Wait a minute,

24
00:01:27.977 --> 00:01:31.320
why does a clock need unlimited
access to the internet?

25
00:01:31.320 --> 00:01:36.223
And my choices are now, to let my clock
leak everything it can find in my

26
00:01:36.223 --> 00:01:38.730
device and send it who knows where.

27
00:01:38.730 --> 00:01:41.425
Or I'm out the money I spent on the clock,
and it's just,

28
00:01:41.425 --> 00:01:43.200
that's not a good model of security.

29
00:01:45.140 --> 00:01:48.650
So the thing that the browser got right,

30
00:01:48.650 --> 00:01:53.550
that everything else got wrong
was the answer to this question.

31
00:01:53.550 --> 00:01:56.020
Whose interest does the program represent?

32
00:01:57.390 --> 00:02:01.606
From the beginning of computing it is
always been assumed that a program

33
00:02:01.606 --> 00:02:05.902
represents the owner of the machine or
at least the owner of the account.

34
00:02:05.902 --> 00:02:10.872
And the browser says no,
the program represents a site and

35
00:02:10.872 --> 00:02:15.040
a site does not necessarily
represent the user.

36
00:02:16.590 --> 00:02:18.110
Which was absolutely right.

37
00:02:18.110 --> 00:02:19.920
And nobody else has figured that out.

38
00:02:21.650 --> 00:02:24.710
Unfortunately the web got
a lot of other things wrong.

39
00:02:24.710 --> 00:02:28.170
The web didn't anticipate that there
could be more interests involved

40
00:02:28.170 --> 00:02:31.080
in a page than just the user and the site.

41
00:02:31.080 --> 00:02:34.480
And that a malicious party can
exploit coding conventions to inject

42
00:02:34.480 --> 00:02:35.110
malicious code.

43
00:02:35.110 --> 00:02:38.710
And that malicious code gets
all of the rights of the site.

44
00:02:38.710 --> 00:02:40.900
This is known as the XSS problem.

45
00:02:40.900 --> 00:02:43.610
We'll talk more about XSS in a minute.

46
00:02:43.610 --> 00:02:47.460
But to ground this, I mean, you're always
hearing people whining about security and

47
00:02:47.460 --> 00:02:49.540
how terrible all the problems are.

48
00:02:49.540 --> 00:02:51.370
Let's get really specific.

49
00:02:51.370 --> 00:02:55.010
In this XSS attack,
what can actually go wrong?

50
00:02:56.080 --> 00:03:02.264
What can an attacker do,
if he can get some script onto your page?

51
00:03:02.264 --> 00:03:06.720
The attacker can request additional
scripts from any server in the world.

52
00:03:06.720 --> 00:03:11.150
Once it gets a foothold, and it only needs
about that much text in order to do that,

53
00:03:11.150 --> 00:03:13.280
it can then obtain all
of the scripts it wants.

54
00:03:14.340 --> 00:03:18.670
Browsers have a security policy called
the same origin policy which limit

55
00:03:18.670 --> 00:03:23.410
the ability of the browser to get data
from other servers but there is no limit

56
00:03:23.410 --> 00:03:28.320
at all on how much program you can load
from the most evil server in the world.

57
00:03:30.750 --> 00:03:32.427
An attacker can read the document.

58
00:03:32.427 --> 00:03:35.189
The attacker can see
everything the user can see,

59
00:03:35.189 --> 00:03:37.238
and even things the user can't see.

60
00:03:37.238 --> 00:03:40.663
The attacker can see comments and
hidden fields, cookies,

61
00:03:40.663 --> 00:03:44.640
everything we transmit to the browser,
the attacker gets access to.

62
00:03:47.060 --> 00:03:49.760
The attacker can make
requests of your server and

63
00:03:49.760 --> 00:03:53.920
your server cannot detect that the request
did not originate with your application.

64
00:03:54.980 --> 00:03:56.860
If you're using SSL, and

65
00:03:56.860 --> 00:04:00.350
you should, the attacker gets
access to your secure connection.

66
00:04:03.770 --> 00:04:08.630
If your server accepts SQL queries then
the attacker gets access to your database.

67
00:04:09.930 --> 00:04:14.860
Now if instead your server is constructing
SQL queries based on information

68
00:04:14.860 --> 00:04:19.019
that it gets from the browser,
then you're only probably giving access,

69
00:04:20.140 --> 00:04:24.980
to the attacker to your database and
that's because SQL was optimized for

70
00:04:24.980 --> 00:04:26.366
SQL injection attacks.

71
00:04:26.366 --> 00:04:30.048
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas Crockford: Thank you.

72
00:04:30.048 --> 00:04:34.730
[LAUGH]
An attacker has

73
00:04:34.730 --> 00:04:38.290
control over the display and
can request information from the user and

74
00:04:38.290 --> 00:04:42.700
the user cannot detect that the request
did not originate with your application.

75
00:04:42.700 --> 00:04:44.930
So modern browsers have
anti-phishing chrome.

76
00:04:46.440 --> 00:04:49.900
And unfortunately most users
don't pay any attention to that.

77
00:04:49.900 --> 00:04:54.342
But if they are paying attention to it,
in this case, the browser is saying, it's

78
00:04:54.342 --> 00:04:58.729
good, because all the browser's concerned
with is where did the HTML come from.

79
00:04:58.729 --> 00:05:02.274
The browser doesn't pay any attention
to where did the script come from.

80
00:05:02.274 --> 00:05:04.561
And the script could have
come from anywhere, and

81
00:05:04.561 --> 00:05:08.230
the script is what's gonna
cause the damage, not the HTML.

82
00:05:08.230 --> 00:05:12.850
So knowing this on some sites, whenever
something dangerous is about to happen,

83
00:05:12.850 --> 00:05:15.940
they will ask the user to
type their password again.

84
00:05:15.940 --> 00:05:18.910
And the theory is that only
the user will know the password.

85
00:05:18.910 --> 00:05:22.420
And that way, we can be confident
that this is not going on.

86
00:05:22.420 --> 00:05:25.460
Except that the attacker
has control of the display.

87
00:05:25.460 --> 00:05:28.785
And so the attacker can ask the user,
what's your password?

88
00:05:28.785 --> 00:05:32.607
And the browser was saying, good tell him.

89
00:05:32.607 --> 00:05:36.583
So if If you're operating one of these
sites which asks people to re-identify

90
00:05:36.583 --> 00:05:40.498
themselves at unlikely times, what
you're actually doing is training your

91
00:05:40.498 --> 00:05:43.631
users to give up their passwords
the instant the attacker gets

92
00:05:43.631 --> 00:05:48.480
control.
&gt;&gt; Douglas Crockford: Then

93
00:05:48.480 --> 00:05:52.230
the attacker can send information
to servers anywhere in the world.

94
00:05:52.230 --> 00:05:56.060
Everything that they learned by scraping
the page, by talking to the user,

95
00:05:56.060 --> 00:05:58.120
by querying your database,

96
00:05:58.120 --> 00:06:01.540
they can then send this to the most
evil server on the planet.

97
00:06:01.540 --> 00:06:06.380
Again, the browser has a same
origin policy which limits their

98
00:06:06.380 --> 00:06:09.370
ability to receive data
from other servers but

99
00:06:09.370 --> 00:06:13.280
it puts no limit on their ability to
send all of these stolen information.

100
00:06:16.300 --> 00:06:19.380
So, and the browser,
is this starting to freak anybody out?

101
00:06:19.380 --> 00:06:22.440
Because why are we doing
business on this platform?

102
00:06:22.440 --> 00:06:24.794
Is that anyone-
&gt;&gt; Speaker 3: [INAUDIBLE] I just kind of

103
00:06:24.794 --> 00:06:27.460
what's in the world course.

104
00:06:27.460 --> 00:06:30.090
Takes care of all this for us right?
&gt;&gt; Douglas Crockford: No, no,

105
00:06:30.090 --> 00:06:31.750
nobody's taking it.
&gt;&gt; Speaker 3: I'm really waiting for

106
00:06:31.750 --> 00:06:37.528
you to explain to me, I don't know.

107
00:06:37.528 --> 00:06:42.226
Where, I wanna know what I'm doing.
&gt;&gt; Douglas Crockford: I think I'm

108
00:06:42.226 --> 00:06:43.196
making it clear.

109
00:06:43.196 --> 00:06:47.110
Anyway but
the browser does not prevent any of these.

110
00:06:47.110 --> 00:06:49.660
Web standards require these weaknesses.

111
00:06:49.660 --> 00:06:53.510
If you were to build a new
web browser from scratch.

112
00:06:54.690 --> 00:06:59.229
If it didn't subject you and
your customers to all of these

113
00:06:59.229 --> 00:07:03.963
potential problems,
it would not be standards compliant.

114
00:07:03.963 --> 00:07:06.638
And the consequences of
a successful attack are horrible,

115
00:07:06.638 --> 00:07:10.100
there's harm to customers or loss of
trust, there are legal liabilities.

116
00:07:10.100 --> 00:07:13.870
There's even talk now about criminal
liabilities for negligence, for

117
00:07:13.870 --> 00:07:15.810
allowing people to have
their identity stolen.

