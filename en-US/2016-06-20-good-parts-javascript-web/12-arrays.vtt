WEBVTT

1
00:00:00.000 --> 00:00:03.798
[MUSIC]

2
00:00:03.798 --> 00:00:06.330
&gt;&gt; Douglas Crockford: Array is one
of the fundamental data structures.

3
00:00:06.330 --> 00:00:11.060
It's a contiguous series of span
of memory divided into equal sized

4
00:00:11.060 --> 00:00:15.920
slots where each slot is indexed by
a number, very fast, very efficient.

5
00:00:15.920 --> 00:00:18.380
JavaScript doesn't have
anything like that.

6
00:00:18.380 --> 00:00:22.590
Instead what JavaScript does is while the
first version of JavaScript forgot to put

7
00:00:22.590 --> 00:00:28.390
arrays in, and people figured out that
well, we can just use an object, right.

8
00:00:28.390 --> 00:00:31.600
We can use the bracket notation, we can
pass numbers, the numbers get turned into

9
00:00:31.600 --> 00:00:37.120
strings and it all kind of works like an
array sort of and that's still what we do.

10
00:00:38.670 --> 00:00:41.430
So there is now an array data type.

11
00:00:41.430 --> 00:00:45.660
It inherits from object and
the indices are converted into strings and

12
00:00:45.660 --> 00:00:48.450
used to retrieve and store values.

13
00:00:48.450 --> 00:00:52.650
The good news is, that is extremely
efficient for sparse arrays.

14
00:00:52.650 --> 00:00:55.030
Unfortunately, we don't
do sparse array stuff,

15
00:00:55.030 --> 00:00:59.040
we're almost exclusively doing dense array
stuff and it's very inefficient for that.

16
00:01:00.576 --> 00:01:04.680
One other advantage it provides is that
there is no need to provide a length or

17
00:01:04.680 --> 00:01:06.740
type when creating an array.

18
00:01:06.740 --> 00:01:09.490
We can just say empty angle brackets.

19
00:01:09.490 --> 00:01:13.350
That's a new array and then you can
add as much stuff as you want to it.

20
00:01:13.350 --> 00:01:16.870
You don't have to worry about out of
bounds errors because it's not really

21
00:01:16.870 --> 00:01:18.420
an array, it's a hash table.

22
00:01:18.420 --> 00:01:24.243
So every value is in balance.
&gt;&gt; Douglas Crockford: Arrays,

23
00:01:24.243 --> 00:01:27.702
unlike objects,
have a special length property, and

24
00:01:27.702 --> 00:01:32.289
that property is always one larger
than the highest integer subscript,

25
00:01:32.289 --> 00:01:36.670
which is not necessarily the same
as number of elements in the array.

26
00:01:39.280 --> 00:01:42.692
So we can make an array with an object
literal or with an array literal.

27
00:01:42.692 --> 00:01:48.070
Using the bracket notation,

28
00:01:48.070 --> 00:01:52.720
we can have multiple expressions
in there separated by commas,

29
00:01:52.720 --> 00:01:56.470
each of those will provide
a value to an element.

30
00:01:58.100 --> 00:02:02.140
We can append to an array by
assigning to it's current length

31
00:02:02.140 --> 00:02:04.220
which is really weird looking,
but it works.

32
00:02:05.250 --> 00:02:11.252
So in this case, myList.length is 3,
so we'll assign to it,

33
00:02:11.252 --> 00:02:15.808
and the length will now
be turned into 3 plus 1,

34
00:02:15.808 --> 00:02:19.783
4.
&gt;&gt; Douglas Crockford: Arrays come with

35
00:02:19.783 --> 00:02:22.920
a more interesting set of
methods than objects have.

36
00:02:22.920 --> 00:02:28.180
Objects have very little useful
stuff coming from object.prototype.

37
00:02:28.180 --> 00:02:31.910
This stuff is all stored in
array.prototype, much more useful set.

38
00:02:31.910 --> 00:02:33.740
We'll look at a couple of these.

39
00:02:33.740 --> 00:02:38.580
For example, there's sort method,
where we can take an array of numbers and

40
00:02:38.580 --> 00:02:40.020
we can sort it.

41
00:02:40.020 --> 00:02:46.857
So anybody see what's going on here?
&gt;&gt; Speaker 2: [INAUDIBLE]

42
00:02:46.857 --> 00:02:47.718
&gt;&gt; Douglas Crockford: But it's sorting on

43
00:02:47.718 --> 00:02:48.329
the strings.

44
00:02:48.329 --> 00:02:54.732
So it takes each number, converts it
into a string, takes the other one,

45
00:02:54.732 --> 00:03:00.960
converts it into a string, compares
them and it does that in log times.

46
00:03:00.960 --> 00:03:02.270
It's awful.

47
00:03:02.270 --> 00:03:07.600
So fortunately, sort can take

48
00:03:07.600 --> 00:03:12.490
a function argument which
receives pairs of values and

49
00:03:12.490 --> 00:03:18.350
it returns minus 1, 0 or
1 based on their relative magnitudes.

50
00:03:18.350 --> 00:03:22.670
So you can override this terrible
behaviour, but It's stupid by default.

51
00:03:25.790 --> 00:03:29.480
You can delete an element from an array,
but it doesn't do what you expect.

52
00:03:29.480 --> 00:03:33.480
So usually, you want to use
the splice method to close up a hole.

53
00:03:33.480 --> 00:03:35.570
So let me demonstrate that.

54
00:03:35.570 --> 00:03:38.420
So here we've got an array
containing four elements and

55
00:03:38.420 --> 00:03:40.270
I want to delete element number one.

56
00:03:40.270 --> 00:03:46.630
That'll leave a hole in it which is
identified as the undefined value.

57
00:03:46.630 --> 00:03:49.840
If you try to retrieve
a value from an array and

58
00:03:49.840 --> 00:03:54.530
it doesn't have that element,
it returns the undefined value.

59
00:03:54.530 --> 00:03:57.200
So if you want to get rid of that,
use a splice method.

60
00:03:57.200 --> 00:04:00.610
You say go to element one,
delete one element.

61
00:04:00.610 --> 00:04:03.790
Then you'll get in an array that's
more like what you were expecting.

62
00:04:03.790 --> 00:04:07.770
The way it does that is it deletes
element one, it retrieves element two,

63
00:04:07.770 --> 00:04:10.860
deletes element two,
re inserts it as element one.

64
00:04:10.860 --> 00:04:15.920
It goes to element three, reads it,
deletes it, re inserts it as element two.

65
00:04:15.920 --> 00:04:18.875
It's not fast.
&gt;&gt; Speaker 3: Whoa.

66
00:04:18.875 --> 00:04:22.260
&gt;&gt; Douglas Crockford: [LAUGH]

67
00:04:22.260 --> 00:04:23.760
There's a look of horror in the crowd.

68
00:04:26.010 --> 00:04:29.900
Okay, so because objects and arrays
are made out of the same stuff in this

69
00:04:29.900 --> 00:04:34.110
language, it turns out that
you can use just one of them

70
00:04:34.110 --> 00:04:38.139
most of the time which is a really bad
idea because sometimes it matters.

71
00:04:39.230 --> 00:04:43.020
And because it sometimes matters,
I recommend, use the right one.

72
00:04:43.020 --> 00:04:46.080
Use objects when the names
are arbitrary strings,

73
00:04:46.080 --> 00:04:48.890
use arrays when the names
are sequential integers.

74
00:04:48.890 --> 00:04:51.820
Don't be confused by
the term Associative Array.

75
00:04:51.820 --> 00:04:54.470
In JavaScript, the Associative Array
is called the object.

