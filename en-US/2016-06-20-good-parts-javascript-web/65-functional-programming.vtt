WEBVTT

1
00:00:00.000 --> 00:00:03.967
[MUSIC]

2
00:00:03.967 --> 00:00:05.675
&gt;&gt; Douglas Crockford: Functional
Programming to the Rescue.

3
00:00:05.675 --> 00:00:10.551
So one of the reasons why after four
years, Functional Programming is suddenly

4
00:00:10.551 --> 00:00:15.152
become important is because it contains
the solutions to these problems.

5
00:00:15.152 --> 00:00:17.497
And we've got a lot of
history with this stuff.

6
00:00:17.497 --> 00:00:22.455
And going back to future which came out
of Dataflow and LISP, future is an object

7
00:00:22.455 --> 00:00:27.850
which represents something which isn't
knowable yet, but might be in the future.

8
00:00:27.850 --> 00:00:32.039
So you can begin interacting with
the future object, and eventually it will

9
00:00:32.039 --> 00:00:35.710
communicate your interest to
whatever the answer turns out to be.

10
00:00:36.870 --> 00:00:41.730
Futures had a big influence
on a feature called Promises.

11
00:00:41.730 --> 00:00:46.209
Promises were discovered in
a company that I founded called

12
00:00:46.209 --> 00:00:50.342
Electric Communities for
a language that we called E.

13
00:00:50.342 --> 00:00:53.431
Promises have since escaped from E and
moved into Python and

14
00:00:53.431 --> 00:00:57.406
then into JavaScript where unfortunately
they've mutated kind of badly.

15
00:00:57.406 --> 00:00:59.965
But there's still a really
interesting mechanism for

16
00:00:59.965 --> 00:01:03.220
managing asynchronicity
in distributed systems.

17
00:01:03.220 --> 00:01:06.720
The house call community has
begun to Monads, and Arrows,

18
00:01:06.720 --> 00:01:10.890
Microsoft has something called RX,
reactive extensions which

19
00:01:12.760 --> 00:01:16.420
allows for composing of events streams,
very interesting stuff.

20
00:01:16.420 --> 00:01:19.460
Unfortunately it's never
been documented accurate or

21
00:01:19.460 --> 00:01:24.596
documented sufficiently.
&gt;&gt; Speaker 2: We do have a course by which

22
00:01:24.596 --> 00:01:32.280
covers essentially the observable pattern
and how RX and are working everything.

23
00:01:32.280 --> 00:01:33.795
Just throwing it out there.
&gt;&gt; Douglas Crockford: Yeah.

24
00:01:33.795 --> 00:01:35.215
It's good stuff.

25
00:01:35.215 --> 00:01:39.325
It's just I wouldn't use it because
if I'm putting it into production,

26
00:01:39.325 --> 00:01:43.905
I want to know how it works but
it's been inspirational.

27
00:01:43.905 --> 00:01:48.585
It's created a new form of programming
called Functional Reactive Programming and

28
00:01:48.585 --> 00:01:52.525
examples include Flapjacks,
bacon, and element, and others.

29
00:01:52.525 --> 00:01:54.709
But occurred to me that this
list just isn't long enough.

30
00:01:56.490 --> 00:02:00.160
I'm adding my own thing to it and
that is a library called RQ.

31
00:02:01.200 --> 00:02:05.010
RQ is a library for managing
asynchronicity and server applications.

32
00:02:05.010 --> 00:02:07.930
The thing that distinguishes it
from the others that I mention,

33
00:02:07.930 --> 00:02:12.500
is that this one was designed
specifically for what you do in servers.

34
00:02:12.500 --> 00:02:15.440
None of the other ones were.

35
00:02:15.440 --> 00:02:17.850
Everything can be made to work but
I think for

36
00:02:17.850 --> 00:02:20.670
what you do in servers this one
is gonna work better for you.

37
00:02:22.220 --> 00:02:25.730
RQ is a very small library,
that only contains four or

38
00:02:25.730 --> 00:02:28.900
five methods depending on how you count.

39
00:02:28.900 --> 00:02:33.158
If you count in Java, it's five,
if you count in JavaScript, it's four.

40
00:02:33.158 --> 00:02:36.128
So let's look at the four,
cuz once you do these four functions,

41
00:02:36.128 --> 00:02:37.320
that's the whole thing.

42
00:02:38.688 --> 00:02:43.950
So a sequence takes an array
of requester functions and

43
00:02:43.950 --> 00:02:46.890
returns a function that will
call them one at a time

44
00:02:46.890 --> 00:02:49.700
passing the result of the previous
requestor to the next requestor.

45
00:02:50.730 --> 00:02:55.760
Here for example we're gonna make a getnav
requestor which will first read the file,

46
00:02:55.760 --> 00:03:00.970
and then get the preference,
and then get the custom nav.

47
00:03:00.970 --> 00:03:02.910
Then we can do things in parallel.

48
00:03:02.910 --> 00:03:07.158
Now we're not adding parallelism to
JavaScript, what we're doing is,

49
00:03:07.158 --> 00:03:11.486
allowing JavaScript to exploit
the natural parallelism of the universe.

50
00:03:11.486 --> 00:03:15.870
Cuz it's likely that you're gonna be
calling services that are in different

51
00:03:15.870 --> 00:03:17.730
boxes or different networks.

52
00:03:17.730 --> 00:03:21.350
It's all going out in the universe,
runs asynchronously all the time so

53
00:03:21.350 --> 00:03:22.369
you get to take advantage of that.

54
00:03:23.470 --> 00:03:26.690
Here we're gonna make a get
stuff constructor which will,

55
00:03:26.690 --> 00:03:30.450
when it's called get the Nav, get
the Ads and get the Message Of The Day,

56
00:03:30.450 --> 00:03:31.790
it will get them all at once.

57
00:03:33.400 --> 00:03:36.590
The cost of this will be whichever
of these three is the slowest.

58
00:03:38.500 --> 00:03:41.020
Then we can also have optional things.

59
00:03:41.020 --> 00:03:44.130
We can provide a second
array of optional things.

60
00:03:44.130 --> 00:03:49.680
We will also go and get the horoscope and
the gossip but we will not wait for

61
00:03:49.680 --> 00:03:54.440
those if they don't if either of those
dozen complete before the main three

62
00:03:54.440 --> 00:03:59.060
complete, we'll just cancel them and
return with whatever has been finished.

63
00:04:01.940 --> 00:04:03.170
We can deal with races.

64
00:04:03.170 --> 00:04:04.890
These are the good kinds of races.

65
00:04:04.890 --> 00:04:06.980
We can start several things at once and

66
00:04:06.980 --> 00:04:11.460
whichever the first one to finish
successfully, that's the one we get.

67
00:04:12.480 --> 00:04:14.740
We might be having trouble
with our Ad network.

68
00:04:14.740 --> 00:04:17.730
We're dealing with three Ad networks and
they're all too slow.

69
00:04:17.730 --> 00:04:19.930
We tell them, we're gonna have a race.

70
00:04:19.930 --> 00:04:24.520
Whenever we have a position, we will ask
you and two of your competitors, and

71
00:04:24.520 --> 00:04:27.620
whoever comes back first with
a suitable placement will win.

72
00:04:30.020 --> 00:04:33.092
We can also deal with fallbacks,
so we can try one thing.

73
00:04:33.092 --> 00:04:35.010
If that fails, we'll try another.

74
00:04:35.010 --> 00:04:37.140
We're gonna do that to get on our weather.

75
00:04:37.140 --> 00:04:38.537
We'll first go to our local Cache.

76
00:04:38.537 --> 00:04:40.345
If that fails, we'll go to our localDB.

77
00:04:40.345 --> 00:04:43.065
If that fails, we go to the remoteDB.

78
00:04:43.065 --> 00:04:47.320
Now in theory, the fastest way to get
the weather would be to have a race, but

79
00:04:47.320 --> 00:04:49.970
the whole point of having this kind
of hierarchy is that we want to go to

80
00:04:49.970 --> 00:04:54.560
the remoteDB only as a last resort,
and fall backs allow us to do that.

81
00:04:57.350 --> 00:04:59.340
That's it,
that's the whole metrics for RQ.

82
00:04:59.340 --> 00:05:03.300
We can start all the requesters at once,
or we can start them one at a time,

83
00:05:03.300 --> 00:05:07.420
and then we can then take one result or
we can take all of the results.

