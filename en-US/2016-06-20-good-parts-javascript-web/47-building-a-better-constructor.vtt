WEBVTT

1
00:00:00.000 --> 00:00:03.595
[MUSIC]

2
00:00:03.595 --> 00:00:08.466
&gt;&gt; Douglas Crockford: This pattern for
using functions to construct objects.

3
00:00:08.466 --> 00:00:13.115
And I've got my constructor function,
I've passed in my initialization object,

4
00:00:13.115 --> 00:00:18.256
I'm calling another constructor, which
allows me to inherit what that thing does.

5
00:00:18.256 --> 00:00:23.750
And I'm gonna add stuff to that, or that
will be the object that I'm constructing.

6
00:00:23.750 --> 00:00:26.570
I will create my member variables,

7
00:00:26.570 --> 00:00:29.780
which are the things that my
methods will have access to.

8
00:00:29.780 --> 00:00:31.880
That's where I'm gonna be
keeping all of the state,

9
00:00:31.880 --> 00:00:33.700
all of the data that's within this object.

10
00:00:33.700 --> 00:00:40.030
I will create my member methods, which are
just local functions within this scope,

11
00:00:40.030 --> 00:00:43.949
and each of these will close over the
initialization value that we passed in,

12
00:00:43.949 --> 00:00:44.970
or whatever that is.

13
00:00:44.970 --> 00:00:49.350
I recommend an object,
over all of the other members and

14
00:00:49.350 --> 00:00:51.400
over all of the other methods.

15
00:00:51.400 --> 00:00:55.080
So that we don't ever use
this in this pattern.

16
00:00:56.170 --> 00:01:01.330
And then anything which needs to be
public, I publish it by assigning it

17
00:01:01.330 --> 00:01:07.780
to the outgoing object and when I'm done,
I return the outgoing object.

18
00:01:07.780 --> 00:01:11.630
And also, have as many members as I want,
as many methods as I want.

19
00:01:11.630 --> 00:01:16.190
I make as many of them public
as I need to, and then I'm done.

20
00:01:17.240 --> 00:01:20.880
It's a really straightforward way of
making objects, it's very flexible.

21
00:01:20.880 --> 00:01:24.560
There are lots and lots of variations
on this, but this is the basic pattern

22
00:01:24.560 --> 00:01:28.670
that I recommend for using, for
constructing objects in JavaScript.

23
00:01:30.620 --> 00:01:36.166
Now, next year when all of ES6 becomes
available, and there's some new syntax in

24
00:01:36.166 --> 00:01:41.350
ES6, which can be applied toward this,
and also with an eye on making

25
00:01:41.350 --> 00:01:46.310
our systems even more secure, I'm going
to revise the pattern to be like this.

26
00:01:47.660 --> 00:01:49.864
So this is next year's pattern.

27
00:01:49.864 --> 00:01:52.930
I'm gonna start with
a constructor object as before,

28
00:01:52.930 --> 00:01:57.174
which will contain lots of good stuff,
which tells me how to make the object.

29
00:01:57.174 --> 00:02:04.560
Then I'm gonna make my instance variables,
and I'm using some new syntax here.

30
00:02:04.560 --> 00:02:06.976
First off, I'm using the let statement.

31
00:02:06.976 --> 00:02:12.404
In this case, there's no advantage to
using let over var, but it makes the Java

32
00:02:12.404 --> 00:02:17.359
guys happier, so I'm gonna try to use
let as we move to the new language.

33
00:02:18.420 --> 00:02:24.410
And the curly braces around the variable
name, means something special here.

34
00:02:24.410 --> 00:02:30.050
So what I'm doing is,
I'm creating a new variable called member,

35
00:02:30.050 --> 00:02:34.240
and I'm going to initialize
it with spec.member.

36
00:02:34.240 --> 00:02:38.270
So it's a shorthand for doing those sorts
of things, and I can put as many names in

37
00:02:38.270 --> 00:02:43.180
the curly braces as I want,
separated by commas, and each of those

38
00:02:43.180 --> 00:02:48.490
names will be initialized by a similarly
named property from that object.

39
00:02:48.490 --> 00:02:52.640
So this doesn't let us do anything that
we couldn't do before, but it's some

40
00:02:52.640 --> 00:02:57.950
convenient syntax for pulling values
out of the initialization object and

41
00:02:57.950 --> 00:03:04.354
putting them into our local variables.
&gt;&gt; Speaker 2: When you say let (member) =

42
00:03:04.354 --> 00:03:10.720
spec, now spec.member is initialized?
&gt;&gt; Douglas Crockford: It's

43
00:03:10.720 --> 00:03:12.410
the initialization value for

44
00:03:12.410 --> 00:03:15.606
the member variable.
&gt;&gt; Douglas Crockford: So

45
00:03:15.606 --> 00:03:21.709
that statement means the same thing
as let (member) = spec.member

46
00:03:21.709 --> 00:03:24.529
&gt;&gt; Speaker 2: Member equals

47
00:03:24.529 --> 00:03:31.239
spec.member.
&gt;&gt; Douglas Crockford: Then,

48
00:03:31.239 --> 00:03:33.962
I'm gonna use the new const statement.

49
00:03:33.962 --> 00:03:38.962
In a similar way, I'm going to this
other constructor where I'm going to

50
00:03:38.962 --> 00:03:43.478
get methods, which I'm gonna be using,
and I'm going to extract

51
00:03:43.478 --> 00:03:48.690
the methods that I want to use and
put them into private variables.

52
00:03:48.690 --> 00:03:53.720
And I'm doing that, because I anticipate
that this object could be frozen, and so

53
00:03:53.720 --> 00:03:58.340
I don't want to be adding stuff to
it as I was in the previous model.

54
00:03:58.340 --> 00:04:00.840
Because I don't want to break if someone

55
00:04:02.420 --> 00:04:05.960
that I'm trying to inherit from
passes me as a frozen object.

56
00:04:07.530 --> 00:04:10.490
This also solves what's sometimes
called the banana problem.

57
00:04:12.070 --> 00:04:14.540
That there's a complaint
about object systems,

58
00:04:14.540 --> 00:04:17.240
where you want to inherit a banana.

59
00:04:17.240 --> 00:04:20.920
But you end up also inheriting
the gorilla that's holding the banana and

60
00:04:20.920 --> 00:04:23.060
the jungle that the gorilla is and

61
00:04:23.060 --> 00:04:26.760
you get all of this stuff and
all you wanted was this little thing.

62
00:04:26.760 --> 00:04:30.270
So this allows us to do that we
can extract things that we want.

63
00:04:30.270 --> 00:04:32.420
And because we're extracting things now,

64
00:04:32.420 --> 00:04:35.860
we can call it as many of
these guys as we want.

65
00:04:35.860 --> 00:04:39.170
So we can get to as many of these other
constructors and take all of their

66
00:04:39.170 --> 00:04:44.360
goodness and pull it out into local
variables and we get all that goodness.

67
00:04:45.790 --> 00:04:48.850
Then, again I'm going to
be making my methods, and

68
00:04:48.850 --> 00:04:52.440
again my methods will close
over all of the stuff.

69
00:04:52.440 --> 00:04:54.429
And again, my methods are not using this.

70
00:04:56.630 --> 00:05:02.030
Then when I'm done,
I publish the public methods here.

71
00:05:02.030 --> 00:05:05.010
The ones that I made or
the ones that I inherited.

72
00:05:05.010 --> 00:05:08.900
And I'm taking advantage of new
object literal syntax here.

73
00:05:08.900 --> 00:05:12.130
That if you have an object literal and
you just say a name and

74
00:05:12.130 --> 00:05:17.800
you leave out the colon,
it's a shorthand for name call a name.

75
00:05:17.800 --> 00:05:20.355
So this is short for
method called, method.

76
00:05:20.355 --> 00:05:22.500
And that's short for other call an other.

77
00:05:23.970 --> 00:05:26.250
Again, not essential.

78
00:05:26.250 --> 00:05:32.090
But it's nice and it gives us a, this
starts to look more like a declaration

79
00:05:32.090 --> 00:05:35.820
than like code, where I'm just getting
the list of things that I want to publish.

80
00:05:38.070 --> 00:05:41.590
Then finally,
I'm going to freeze that object

81
00:05:41.590 --> 00:05:45.550
because freezing gives us very good
security and reliability properties for

82
00:05:45.550 --> 00:05:49.080
objects, which we can't get in
this language in any other way.

83
00:05:50.340 --> 00:05:54.450
So when we look at
the evolution of programming.

84
00:05:56.650 --> 00:06:01.380
In languages like C and Pascal,
we've got struct and records.

85
00:06:01.380 --> 00:06:05.020
Tailored structures which let
you have names, properties.

86
00:06:05.020 --> 00:06:07.090
And then an object
[INAUDIBLE] programming,

87
00:06:07.090 --> 00:06:10.860
we took it a step further where
we could have functions or

88
00:06:10.860 --> 00:06:15.400
methods which are related to those
structures which will act upon them.

89
00:06:16.540 --> 00:06:20.240
And I think that was a really
important evolutionary step, but

90
00:06:20.240 --> 00:06:22.800
it shouldn't have been the last step.

91
00:06:22.800 --> 00:06:27.980
So I think JavaScript actually gives
us a way to go forward from this, so

92
00:06:27.980 --> 00:06:34.180
that I'm now thinking that we have
two very distinct kinds of objects.

93
00:06:34.180 --> 00:06:38.300
We have objects which just contain data,
only data and

94
00:06:38.300 --> 00:06:41.780
objects contain only functions,
which are frozen.

95
00:06:42.860 --> 00:06:47.160
And those objects are very strong, very
reliable that cannot be tampered with.

96
00:06:48.500 --> 00:06:51.590
They provide the interface for
dealing with the objects,

97
00:06:51.590 --> 00:06:54.560
which are containing the data.

98
00:06:54.560 --> 00:06:58.570
And that way we can create good API's,
which can defend themselves.

99
00:06:58.570 --> 00:07:03.210
Which can remain robust and in the face
of all the confusion that's happening

100
00:07:03.210 --> 00:07:06.670
inside of our system.
&gt;&gt; Speaker 2: So how would you pair those

101
00:07:06.670 --> 00:07:09.620
two things, the data, object again?
&gt;&gt; Douglas Crockford: I'm going to put

102
00:07:09.620 --> 00:07:16.454
the data in the member variables.
&gt;&gt; Douglas Crockford: All

103
00:07:16.454 --> 00:07:19.103
of the data goes in the member variables,
and

104
00:07:19.103 --> 00:07:23.010
those could contain simple
values like numbers and strings.

105
00:07:23.010 --> 00:07:24.539
They could contain objects.

106
00:07:33.107 --> 00:07:33.640
&gt;&gt; Douglas Crockford: So any other

107
00:07:33.640 --> 00:07:37.445
questions about that?
&gt;&gt; Speaker 2: I don't understand any of

108
00:07:37.445 --> 00:07:38.432
this.
&gt;&gt; Douglas Crockford: Yeah,

109
00:07:38.432 --> 00:07:39.880
we'll review it again this afternoon.

110
00:07:41.040 --> 00:07:42.780
So what I want to do now.

111
00:07:42.780 --> 00:07:44.150
Do we need a break or

112
00:07:44.150 --> 00:07:47.600
are we ready to go on to the next problem?
&gt;&gt; Speaker 3: Can I just ask a question

113
00:07:47.600 --> 00:07:49.260
[INAUDIBLE].
&gt;&gt; Douglas Crockford: Please.

114
00:07:49.260 --> 00:07:49.950
&gt;&gt; Speaker 3: So you're

115
00:07:49.950 --> 00:07:51.780
gonna use that pattern.

116
00:07:51.780 --> 00:07:56.622
You'll have your function object, you'll
have your data object that you'll feed

117
00:07:56.622 --> 00:08:00.918
your data into and you'll feed your
data object into the function object,

118
00:08:00.918 --> 00:08:04.887
act on that function object creating
a new data object to then act on.

119
00:08:04.887 --> 00:08:09.338
The next in the cheat of function objects
that are all functions which never change

120
00:08:09.338 --> 00:08:10.305
are immutable but

121
00:08:10.305 --> 00:08:12.390
they'll create new data sets.
&gt;&gt; Douglas Crockford: Right.

122
00:08:12.390 --> 00:08:15.943
Each time we call this constructor,
we get a new thing and with it,

123
00:08:15.943 --> 00:08:17.090
it's functions go.

124
00:08:17.090 --> 00:08:22.215
It will close over,
whatever objects you need to work on.

125
00:08:22.215 --> 00:08:22.931
&gt;&gt; Speaker 3: In itself and

126
00:08:22.931 --> 00:08:27.361
it's data that you were to create, it is
all beautiful and it's going to give you

127
00:08:27.361 --> 00:08:30.336
new information out of.
&gt;&gt; Douglas Crockford: The data is mutable

128
00:08:30.336 --> 00:08:36.416
but only within the function scope,
you cannot mutate it from outside,

129
00:08:36.416 --> 00:08:38.656
except through the box.
&gt;&gt; Speaker 3: So

130
00:08:38.656 --> 00:08:42.070
freeze doesn't mean that you can
change its own if you add up

131
00:08:42.070 --> 00:08:43.475
the functions.
&gt;&gt; Douglas Crockford: Right.

132
00:08:43.475 --> 00:08:44.332
&gt;&gt; Speaker 3: [CROSSTALK] to give a new

133
00:08:44.332 --> 00:08:45.449
input.
&gt;&gt; Douglas Crockford: Freeze is only on

134
00:08:45.449 --> 00:08:47.330
the object containing the functions.

135
00:08:48.340 --> 00:08:52.090
The functions themselves are still
free to act on anything with

136
00:08:52.090 --> 00:08:52.948
a close.
&gt;&gt; Speaker 3: Okay.

137
00:08:52.948 --> 00:08:56.480
To just catch up to you.
&gt;&gt; Speaker 2: Could

138
00:08:56.480 --> 00:08:57.899
you go back to the previous slide, please.

139
00:09:12.274 --> 00:09:12.795
&gt;&gt; Speaker 2: And it could be five and

140
00:09:12.795 --> 00:09:16.720
it could be.
&gt;&gt; Douglas Crockford: Yeah, but

141
00:09:16.720 --> 00:09:18.150
that's
&gt;&gt; Speaker 2: It could be anything you

142
00:09:18.150 --> 00:09:18.960
want.
&gt;&gt; Douglas Crockford: It's anything

143
00:09:18.960 --> 00:09:20.150
you want to pass to a constructor.

144
00:09:48.583 --> 00:09:51.153
&gt;&gt; Speaker 2: I think I'm confused by

145
00:09:51.153 --> 00:09:59.829
the fact that
&gt;&gt; Speaker 2: What

146
00:09:59.829 --> 00:10:03.067
is the other constructor
do if creates a not yet

147
00:10:03.067 --> 00:10:05.750
another object that.
&gt;&gt; Douglas Crockford: Right.

148
00:10:05.750 --> 00:10:08.940
If provides a means of
inheriting something else.

149
00:10:08.940 --> 00:10:10.669
This is how you would do
inheritance in this matter.

150
00:10:12.200 --> 00:10:15.010
If you don't need to inherit
from something else, then

151
00:10:15.010 --> 00:10:19.980
just start without being an empty object.
&gt;&gt; Speaker 2: Or could be some values that

152
00:10:19.980 --> 00:10:21.700
you could assign?
&gt;&gt; Douglas Crockford: Whatever,

153
00:10:21.700 --> 00:10:27.311
yeah.
&gt;&gt; Speaker 2: I

154
00:10:27.311 --> 00:10:32.155
don't understand how this
is related to you, to work.

155
00:10:32.155 --> 00:10:35.292
You congratulated us for
doing something five minutes ago that,

156
00:10:35.292 --> 00:10:37.410
I've been doing that with a node for
a year.

157
00:10:38.440 --> 00:10:42.460
And this still doesn't make any sense to,
I mean, this makes sense to me.

158
00:10:42.460 --> 00:10:44.640
I don't understand the relationship,
what we are passing,

159
00:10:44.640 --> 00:10:47.780
we are passing a function in-
&gt;&gt; Douglas Crockford: The relationship is,

160
00:10:47.780 --> 00:10:51.870
this is only possible if you understand
how to use closure and function scope.

161
00:10:51.870 --> 00:10:56.490
[SOUND] Which is something you can do now.
&gt;&gt; Speaker 2: All right.

