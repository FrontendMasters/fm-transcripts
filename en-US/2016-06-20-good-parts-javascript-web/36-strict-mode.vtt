WEBVTT

1
00:00:00.000 --> 00:00:04.067
&gt;&gt; [MUSIC]

2
00:00:04.067 --> 00:00:06.682
&gt;&gt; Douglas Crockford: We added a strict
mode to the language because there are a

3
00:00:06.682 --> 00:00:11.190
lot of things in the language that were
clearly wrong that we wanted to repair.

4
00:00:11.190 --> 00:00:13.370
But they would be breaking changes.

5
00:00:13.370 --> 00:00:17.430
And so
we needed to have some kind of opt in, so

6
00:00:17.430 --> 00:00:21.220
you'd say yes, I'm prepared for
the breakage this might cause.

7
00:00:21.220 --> 00:00:23.050
Because I want to be using
the better language.

8
00:00:24.820 --> 00:00:28.400
The difficulty we had
in specifying this was,

9
00:00:28.400 --> 00:00:33.930
how do you say I want strict mode
without introducing new syntax?

10
00:00:33.930 --> 00:00:38.120
Because we wanted older browsers to simply
ignore the fact that we're in strict mode

11
00:00:38.120 --> 00:00:39.250
and work the way they always have.

12
00:00:40.470 --> 00:00:43.630
So we spent a lot of time trying
to figure out how to do that, and

13
00:00:43.630 --> 00:00:45.400
eventually, we came up
with a terrible hack.

14
00:00:46.430 --> 00:00:51.350
We used the useless expression
statement that I was

15
00:00:51.350 --> 00:00:55.230
complaining about earlier
to specify the pragma.

16
00:00:55.230 --> 00:01:00.940
So if the first statement of a function or
a file is the string,

17
00:01:00.940 --> 00:01:05.870
use strict ;, that puts that file or
that function into strict mode.

18
00:01:07.260 --> 00:01:13.650
And on older browsers, it's simply ignored
and does nothing, so that works out.

19
00:01:13.650 --> 00:01:18.690
We've got the file form,
which is good if you're on Node.

20
00:01:18.690 --> 00:01:21.719
If you're on a browser, I recommend
you only use the function form.

21
00:01:24.159 --> 00:01:24.915
&gt;&gt; Douglas Crockford: The reason for

22
00:01:24.915 --> 00:01:29.840
that is Steve Souders will tell you to
concatenate all of your files together.

23
00:01:29.840 --> 00:01:34.130
And that means that all of your files will
have the same strictness as the first

24
00:01:34.130 --> 00:01:38.700
file, and
that could be bad in any number of ways.

25
00:01:38.700 --> 00:01:44.200
So in browsers, we recommend
you only use the function form.

26
00:01:47.364 --> 00:01:51.450
Strict mode adds a number
of new reserved words.

27
00:01:51.450 --> 00:01:51.980
So far,

28
00:01:51.980 --> 00:01:55.930
I'm only aware of let and yield being
used in the next edition of the language.

29
00:01:55.930 --> 00:01:58.119
The others may or
may not be used in other editions.

30
00:01:59.610 --> 00:02:02.760
This is the list of things that
are provided by strict mode.

31
00:02:02.760 --> 00:02:05.790
Unfortunately, it's a boring list.

32
00:02:05.790 --> 00:02:07.510
So I'm just gonna read the boring list.

33
00:02:08.650 --> 00:02:11.420
There are no more implied global
variables within functions.

34
00:02:11.420 --> 00:02:13.670
This was a huge design
error in JavaScript.

35
00:02:13.670 --> 00:02:17.130
So now if you forget to declare
a variable in a function,

36
00:02:17.130 --> 00:02:18.800
it's gonna be a syntax error.

37
00:02:18.800 --> 00:02:21.440
It's not going to default
to global variables.

38
00:02:21.440 --> 00:02:22.620
So that's good.

39
00:02:24.730 --> 00:02:28.840
This is no longer bound to the global
object by the function form.

40
00:02:28.840 --> 00:02:33.668
So if you call a method as a function,
this will get bound to undefined and

41
00:02:33.668 --> 00:02:35.260
not the global object.

42
00:02:35.260 --> 00:02:37.470
That turned out to be really important for
security.

43
00:02:39.090 --> 00:02:42.680
The call and apply methods no longer
default to the global object.

44
00:02:42.680 --> 00:02:47.590
So it used to be if you called the apply
method and passed in null or undefined,

45
00:02:47.590 --> 00:02:52.700
meaning you don't want this to get bound
to anything, JavaScript will go, you can't

46
00:02:52.700 --> 00:02:57.270
mean that, you probably mean the global
object and would do that substitution.

47
00:02:57.270 --> 00:02:59.600
It doesn't do that anymore.

48
00:02:59.600 --> 00:03:01.100
We got rid of the with statement.

49
00:03:02.470 --> 00:03:07.170
If you try to assign to something
which is not writeable,

50
00:03:07.170 --> 00:03:08.820
you will now throw an exception.

51
00:03:08.820 --> 00:03:12.360
It used to fail silently,
which is really bad for integrity.

52
00:03:12.360 --> 00:03:14.530
Because the code may have made a change,

53
00:03:14.530 --> 00:03:19.570
assuming that it succeeded in making
the change, and if the change failed and

54
00:03:19.570 --> 00:03:21.850
it isn't notified,
then it could become inconsistent.

55
00:03:22.890 --> 00:03:26.580
We did a similar thing with deleting
non-configurable properties.

56
00:03:26.580 --> 00:03:28.092
We put restrictions on eval.

57
00:03:28.092 --> 00:03:32.060
I haven't talked at all this week
about eval, and I'm not going to.

58
00:03:32.060 --> 00:03:35.860
Eval is the most misused feature of the
language, and I don't recommend using it.

59
00:03:37.350 --> 00:03:41.940
And the implementation of it in the old
language was really quite horrible,

60
00:03:41.940 --> 00:03:47.110
that it gave extreme powers to
whoever provided a string to it.

61
00:03:48.490 --> 00:03:51.060
And so we put some limits on eval.

62
00:03:52.280 --> 00:03:56.286
The thing I complained about with
arguments getting bound strangely to

63
00:03:56.286 --> 00:03:59.270
the parameters, that's been fixed.

64
00:03:59.270 --> 00:04:03.000
We got rid of arguments.caller and
arguments.callee.

65
00:04:03.000 --> 00:04:06.840
And getting rid of those was surprisingly
difficult because arguments.caller had

66
00:04:06.840 --> 00:04:08.770
never been in the standard.

67
00:04:08.770 --> 00:04:12.251
So we couldn't simply go to a line
of the standard and delete it.

68
00:04:12.251 --> 00:04:18.750
Instead, we had to add caller to
the language and then poison it.

69
00:04:18.750 --> 00:04:23.950
We got rid of octal literals because we
found that they are confusing to humans.

70
00:04:23.950 --> 00:04:27.110
Most people in school learned that
a leading zero in front of a number

71
00:04:27.110 --> 00:04:28.330
is not significant.

72
00:04:28.330 --> 00:04:32.850
But JavaScript said it was and
turned you into base eight.

73
00:04:32.850 --> 00:04:37.510
So we fixed that, and that got us a lot
of complaints from the Node community.

74
00:04:37.510 --> 00:04:40.920
Apparently that the Node guys
are still using octal literals for

75
00:04:40.920 --> 00:04:42.360
setting file permissions.

76
00:04:42.360 --> 00:04:45.870
I didn't know anybody was still
doing that, but they are.

77
00:04:45.870 --> 00:04:49.920
So yes, 6 added octal back in,
but in a slightly less awful way.

78
00:04:51.450 --> 00:04:54.720
And then duplicate names
in an object literal or

79
00:04:54.720 --> 00:04:57.350
function parameters are now syntax error.

80
00:04:57.350 --> 00:05:00.580
So, if you say function food a comma a,

81
00:05:00.580 --> 00:05:03.160
it will now recognize that
the second a is an error.

82
00:05:05.380 --> 00:05:10.330
We fixed the new operator, so
forgetting to use the new prefix

83
00:05:10.330 --> 00:05:15.550
in strict mode will now throw an exception
and not silently clobber global variables.

84
00:05:15.550 --> 00:05:16.500
So that's good.

85
00:05:16.500 --> 00:05:20.620
There are a few things that we know
did break because of strict mode.

86
00:05:22.270 --> 00:05:27.371
For example, if you call
addEventListener in a browser intending

87
00:05:27.371 --> 00:05:33.848
to add an event to the window object, that
accidentally worked in the old language.

88
00:05:33.848 --> 00:05:38.812
And the reason it accidentally
worked was in the browser,

89
00:05:38.812 --> 00:05:42.266
the window object is the global object.

90
00:05:42.266 --> 00:05:43.750
They just happen to be the same thing.

91
00:05:43.750 --> 00:05:48.865
And when you call a function as
a function, this gets bound to the global

92
00:05:48.865 --> 00:05:52.935
object, which happens to be
the window object, so it worked.

93
00:05:52.935 --> 00:05:55.807
It was never intended to work,
it just accidentally worked.

94
00:05:55.807 --> 00:05:58.755
So now in strict mode,
you have to be explicit.

95
00:05:58.755 --> 00:06:04.005
If you want to add an event listener to
the window, you have to say window dot.

96
00:06:06.125 --> 00:06:10.195
There is nothing in the language that will
tell you if you are in strict mode or

97
00:06:10.195 --> 00:06:14.690
if strict mode is available, but you can
write either of these little functions,

98
00:06:14.690 --> 00:06:16.510
and they will tell you exactly
what you need to know.

99
00:06:19.200 --> 00:06:24.028
The design of strict mode was informed
by JSLint, they're not entirely the same

100
00:06:24.028 --> 00:06:27.152
because JSLint has forced
to do a static analysis and

101
00:06:27.152 --> 00:06:29.855
strict mode can do some
things dynamically.

102
00:06:29.855 --> 00:06:32.039
But if you're using JSLint,
and you should,

103
00:06:32.039 --> 00:06:34.290
then you should be very
happy with strict mode.

104
00:06:36.250 --> 00:06:40.940
A lot of the work that we did was
motivated by the problems of mashups.

105
00:06:40.940 --> 00:06:44.700
A mashup is where you've got code
representing two parties that wants to

106
00:06:44.700 --> 00:06:50.420
work together in the same page for
the benefit of the user without one

107
00:06:50.420 --> 00:06:54.940
being able to corrupt the other, and that
turns out to be a very difficult problem.

108
00:06:54.940 --> 00:06:58.160
So we don't have a complete
solution to that,

109
00:06:58.160 --> 00:07:01.890
but we are on the road to solving that.

110
00:07:01.890 --> 00:07:07.965
So the design of the mashup solutions
that we put into the language

111
00:07:07.965 --> 00:07:14.380
were derived from Google's Caja
project and my own ADsafe project.

112
00:07:15.980 --> 00:07:18.520
And by fixing things,
like the binding of this and

113
00:07:18.520 --> 00:07:23.290
some of the other problems,
we can now get security solutions,

114
00:07:23.290 --> 00:07:27.200
which provide all the benefits of both
of these, which should be a good thing.

115
00:07:29.410 --> 00:07:31.920
So any questions about any
of the stuff about ES5?

116
00:07:33.560 --> 00:07:35.322
Or anything about anything today, or

117
00:07:35.322 --> 00:07:39.171
anything at all?
&gt;&gt; Douglas Crockford: Just

118
00:07:39.171 --> 00:07:43.530
in the discussion, we're all talking
about ES6 and stuff like that, but.

119
00:07:43.530 --> 00:07:47.180
We'll get to ES6 on the third day.
&gt;&gt; Speaker 2: Yeah, that's what the, yeah.

120
00:07:47.180 --> 00:07:50.040
You had that in the schedule, so.
&gt;&gt; Douglas Crockford: Okay,

121
00:07:50.040 --> 00:07:52.988
anybody else?
&gt;&gt; Speaker 3: When you talked about how

122
00:07:52.988 --> 00:07:56.242
pervasive certain constructs
are out in the web and

123
00:07:56.242 --> 00:07:59.341
figure out how much it break and
stuff like that,

124
00:07:59.341 --> 00:08:03.262
how did you gather those metrics?
&gt;&gt; Douglas Crockford: It's really hard,

125
00:08:03.262 --> 00:08:07.800
some of it was just,
I think somebody did something.

126
00:08:07.800 --> 00:08:09.570
I heard about a guy who did something.

127
00:08:09.570 --> 00:08:13.230
A lot of it was that,
some of it was mining Google code.

128
00:08:13.230 --> 00:08:18.542
Microsoft also had an extensive database
of code, and we would mine against that.

129
00:08:18.542 --> 00:08:22.144
I'm not confident how effective our
tools were in all cases because some of

130
00:08:22.144 --> 00:08:24.731
the patterns we're looking for
are really complex.

131
00:08:24.731 --> 00:08:29.572
And some code is so badly written that you
might not necessarily be able to recognize

132
00:08:29.572 --> 00:08:30.480
the patterns.

133
00:08:30.480 --> 00:08:32.641
But we tried as much as was possible,

134
00:08:32.641 --> 00:08:37.260
given the technology available to match
stuff against what the web was doing.

