WEBVTT

1
00:00:00.000 --> 00:00:03.884
[MUSIC]

2
00:00:03.884 --> 00:00:05.205
&gt;&gt; Douglas Crockford: I
promised you some good parts.

3
00:00:05.205 --> 00:00:07.254
We're finally getting to a good part and

4
00:00:07.254 --> 00:00:10.639
this is something that you probably
don't have experience with.

5
00:00:10.639 --> 00:00:12.549
It's something called closure.

6
00:00:12.549 --> 00:00:14.675
It's also called Lexical Scoping or
Static Scoping.

7
00:00:14.675 --> 00:00:17.869
It's a consequence of
functions that can nest and

8
00:00:17.869 --> 00:00:21.976
functions that are first class values,
and JavaScript has it,

9
00:00:21.976 --> 00:00:26.159
and is almost completely right in
the way it implements them, and

10
00:00:26.159 --> 00:00:30.520
it's maybe the best feature ever
put into a programming language.

11
00:00:32.360 --> 00:00:36.862
The context of an inner function includes
the scope of the outer function and

12
00:00:36.862 --> 00:00:41.154
the inner function enjoys that context
even after the outer function has

13
00:00:41.154 --> 00:00:41.871
returned.

14
00:00:41.871 --> 00:00:48.018
I expect that statement made no sense
to you at all and I understand that.

15
00:00:48.018 --> 00:00:52.322
So, I'm gonna have to
explain this in steps.

16
00:00:52.322 --> 00:00:58.260
So, we'll start with the observation that
functions scope works like block scope.

17
00:00:58.260 --> 00:01:00.170
So, you're familiar with
the idea of block scope.

18
00:01:01.260 --> 00:01:05.502
So next year, we'll probably have let
statements in most of our systems.

19
00:01:05.502 --> 00:01:08.372
And here, we've got two blocks.

20
00:01:08.372 --> 00:01:12.937
One inside of the other and
the inner block can see its variables, and

21
00:01:12.937 --> 00:01:15.229
the variables of the outer block.

22
00:01:15.229 --> 00:01:17.508
The outer block can only
see its own variables.

23
00:01:17.508 --> 00:01:21.800
So, I assume everybody is comfortable
with the idea of block scope.

24
00:01:21.800 --> 00:01:24.690
We've had that since 1960 and it's great.

25
00:01:25.690 --> 00:01:28.008
So, we can do the same
thing with functions.

26
00:01:28.008 --> 00:01:31.956
You can think of a function as simply
being a block with a little bit of extra

27
00:01:31.956 --> 00:01:35.539
mechanism attached to it, so
that you can invoke it in the future.

28
00:01:35.539 --> 00:01:40.836
That you don't have to do it immediately
and the same relationships apply.

29
00:01:40.836 --> 00:01:44.124
So we've got the yellow function,
which can see a and

30
00:01:44.124 --> 00:01:46.837
b and
the green function that can only see a.

31
00:01:46.837 --> 00:01:53.733
Exactly the same relationship and we can
represent this relationship as sets.

32
00:01:53.733 --> 00:01:59.574
So, this is the set of variables
that the outer function can see and

33
00:01:59.574 --> 00:02:04.911
this is the set of variables
that the inner function can see.

34
00:02:04.911 --> 00:02:10.154
Nothing surprising here, except that we
can describe this relationship in that

35
00:02:10.154 --> 00:02:15.551
the set of variables of the inner function
encloses the set of the outer function and

36
00:02:15.551 --> 00:02:17.809
that's why we call this closure.

37
00:02:20.589 --> 00:02:22.818
&gt;&gt; Douglas Crockford: And it's kinda
too bad that we call it closure,

38
00:02:22.818 --> 00:02:25.663
cuz most people think of closure
as meaning something else,

39
00:02:25.663 --> 00:02:27.250
like retribution or vengeance.

40
00:02:28.690 --> 00:02:32.490
Have been victimized, but I'm getting me
some closure and it's gonna feel good.

41
00:02:32.490 --> 00:02:36.030
But it's not that kind of closure,
but that's what we're calling it.

42
00:02:36.030 --> 00:02:41.230
So, we're kind of stuck with that and
it seems like a simple idea.

43
00:02:41.230 --> 00:02:46.676
Just add nested functions, which have
what should be an obvious relationship,

44
00:02:46.676 --> 00:02:50.437
because of the way that scope works,
but it took a long,

45
00:02:50.437 --> 00:02:53.255
long time for this idea to get developed.

46
00:02:53.255 --> 00:02:56.226
So, you needed a language
that had three things.

47
00:02:56.226 --> 00:02:58.080
He needed lexical scoping.

48
00:02:58.080 --> 00:03:02.306
He needed nested functions and
functions, as first class values.

49
00:03:02.306 --> 00:03:07.226
And pretty early on, we got functions
that would have two out of three,

50
00:03:07.226 --> 00:03:11.490
but we didn't get a function
that had all three until scheme.

51
00:03:11.490 --> 00:03:14.623
Scheme was an experiment
at MIT in an attempt

52
00:03:14.623 --> 00:03:19.209
to understand Carl Hewitt's
after model in their early 70s.

53
00:03:19.209 --> 00:03:24.149
The experiment failed in that they never
did understand what Carl was talking

54
00:03:24.149 --> 00:03:27.949
about, but they did discover
this new way of programming,

55
00:03:27.949 --> 00:03:33.046
which I think was the most important
breakthrough in the history of computing.

56
00:03:33.046 --> 00:03:37.036
And like all of the really important,
significant breakthroughs,

57
00:03:37.036 --> 00:03:39.524
the world took no notice of it whatsoever.

58
00:03:39.524 --> 00:03:43.953
And in fact, it took two generations
before we finally figured out

59
00:03:43.953 --> 00:03:48.933
that this was a good idea and brought
it to the mainstream, but it was always

60
00:03:48.933 --> 00:03:54.280
a good idea and the reason it took so
long was because of this problem.

61
00:03:54.280 --> 00:03:58.140
So, we've got the same thing we had
before where we got an inner function and

62
00:03:58.140 --> 00:03:58.830
an outer function.

63
00:04:00.320 --> 00:04:06.323
But this time, the inner function survives
the execution of the outer function,

64
00:04:06.323 --> 00:04:10.854
because the outer function is
returning the inner function.

65
00:04:10.854 --> 00:04:15.417
So we will call the green function,
it'll allocate a on the stack.

66
00:04:15.417 --> 00:04:18.209
It will return a new function and exit.

67
00:04:19.910 --> 00:04:24.450
Now we want to call the yellow
function that it returned, but

68
00:04:24.450 --> 00:04:28.000
yellow function wants access to a,
but a is no longer on the stack.

69
00:04:28.000 --> 00:04:28.500
Boom.

70
00:04:30.630 --> 00:04:35.270
It took us 20 years, 40 years to
figure out what to do about this.

71
00:04:35.270 --> 00:04:37.760
Turns out the solution is trivial.

72
00:04:37.760 --> 00:04:41.708
Don't use a stock, allocate all of
the activation records on the heap.

73
00:04:41.708 --> 00:04:44.310
Get a good garbage collector, done.

74
00:04:44.310 --> 00:04:48.670
Really, really easy, but
it took a long time to figure this out.

75
00:04:48.670 --> 00:04:49.370
&gt;&gt; Speaker 2: Can you
repeat that solution?

76
00:04:51.280 --> 00:04:55.620
&gt;&gt; Douglas Crockford: Yeah, don't allocate
the activation records on the stack.

77
00:04:55.620 --> 00:04:57.417
Allocate them on the heap.

78
00:04:57.417 --> 00:04:59.927
Get a good garbage collector, done.

79
00:05:02.706 --> 00:05:03.805
&gt;&gt; Douglas Crockford: That's it.

80
00:05:03.805 --> 00:05:07.290
That is the whole whole thing.

81
00:05:07.290 --> 00:05:12.764
So anyway,
this idea is discovered in scheme.

82
00:05:12.764 --> 00:05:15.528
Takes a long time for
to finally get to the mainstream.

83
00:05:15.528 --> 00:05:19.997
Anybody happen to know what was
the first language to bring this idea to

84
00:05:19.997 --> 00:05:21.370
the mainstream was?

85
00:05:21.370 --> 00:05:24.099
Anybody?

86
00:05:24.099 --> 00:05:25.941
This JavaScript.

87
00:05:25.941 --> 00:05:31.720
Javascript was the first language to
do this followed quickly by Python and

88
00:05:31.720 --> 00:05:33.197
Ruby, C# got it.

89
00:05:33.197 --> 00:05:35.482
Eventually, C++ got it.

90
00:05:35.482 --> 00:05:40.630
PHP does it in a really half-assed way,
but they got it just last year.

91
00:05:40.630 --> 00:05:42.801
Java finally got it.

92
00:05:42.801 --> 00:05:47.279
Java was having a tough time keeping
up with his stupid little brother, but

93
00:05:47.279 --> 00:05:48.567
it finally got this.

94
00:05:48.567 --> 00:05:52.710
This idea took so long to get to the
mainstream that there was an opinion that,

95
00:05:52.710 --> 00:05:56.565
well, it's not getting to the mainstream,
cuz it's not a good idea.

96
00:05:56.565 --> 00:06:00.320
The proof that it's not a good idea
is that it hasn't been adopted, but

97
00:06:00.320 --> 00:06:04.203
we're now adopting it and we're
adopting it, because it turns out it's

98
00:06:04.203 --> 00:06:07.415
the solution to a lot of
the problems that we're having now.

99
00:06:07.415 --> 00:06:11.216
Dealing with distributed systems and
asynchronicity, and

100
00:06:11.216 --> 00:06:16.140
the things that we do now much easier if
you've got functions working for you.

101
00:06:17.740 --> 00:06:22.600
And this particular pattern where we have
a function that survives another function,

102
00:06:22.600 --> 00:06:26.595
a function that returns a function
is an incredibly powerful important

103
00:06:26.595 --> 00:06:27.541
construction.

104
00:06:27.541 --> 00:06:28.938
It's amazingly useful.

105
00:06:28.938 --> 00:06:33.895
Amazingly powerful and we got it and
we got it first with JavaScript,

106
00:06:33.895 --> 00:06:35.270
which is amazing.

