WEBVTT

1
00:00:00.000 --> 00:00:04.031
[MUSIC]

2
00:00:04.031 --> 00:00:07.220
&gt;&gt; Douglas: So Act III,
function the ultimate.

3
00:00:07.220 --> 00:00:09.650
You've been wondering when are we
gonna get to the good parts, right?

4
00:00:09.650 --> 00:00:12.660
Because everything's been pretty
horrible up until now, right?

5
00:00:12.660 --> 00:00:14.050
Hasn't this been kind of tragic?

6
00:00:15.480 --> 00:00:17.610
So we're gonna get to some good parts and

7
00:00:17.610 --> 00:00:20.840
the good parts in JavaScript
all wrap around the function.

8
00:00:22.330 --> 00:00:25.830
Functions are really
powerful bits of stuff.

9
00:00:25.830 --> 00:00:30.130
In other languages, you'll have methods,
classes, constructors, modules.

10
00:00:30.130 --> 00:00:31.950
In JavaScript all you need is functions.

11
00:00:31.950 --> 00:00:33.820
Functions are so powerful.

12
00:00:33.820 --> 00:00:36.060
They can do the work of all
of those things and more.

13
00:00:36.060 --> 00:00:41.050
They're just serving a universal stuff for
building things.

14
00:00:42.170 --> 00:00:46.770
We make functions using the function
expression or function literal.

15
00:00:46.770 --> 00:00:49.960
It would return a new function object,
which could then be invoked.

16
00:00:49.960 --> 00:00:54.750
A function expression starts
with the word function.

17
00:00:54.750 --> 00:00:56.450
It can then take an optional name,

18
00:00:56.450 --> 00:01:00.720
which allows you to call
the function recursively.

19
00:01:00.720 --> 00:01:06.890
It also allows for documenting
things like a code and stack traces.

20
00:01:06.890 --> 00:01:08.030
You pass it parameters,

21
00:01:08.030 --> 00:01:12.980
which are a set of names separated
by commas wrapped in parens.

22
00:01:12.980 --> 00:01:17.940
And it takes a body,
which is a block wrapped in curly braces.

23
00:01:20.760 --> 00:01:23.840
A function expression produces
an instance of a function object.

24
00:01:23.840 --> 00:01:26.900
And every time that
expression gets evaluated

25
00:01:26.900 --> 00:01:29.000
you'll get a new function object.

26
00:01:29.000 --> 00:01:30.710
Function objects are first class,

27
00:01:30.710 --> 00:01:33.700
which means they can be passed
as arguments to functions.

28
00:01:33.700 --> 00:01:37.330
They can be returned from functions,
they may be assigned a variables, and

29
00:01:37.330 --> 00:01:39.380
they may be stored in objects and arrays.

30
00:01:39.380 --> 00:01:43.930
This is very different than in
languages where functions are sort of

31
00:01:43.930 --> 00:01:48.500
the static things, which just kind
of exist before the program starts.

32
00:01:48.500 --> 00:01:49.070
In JavaScript,

33
00:01:49.070 --> 00:01:54.190
the functions run and add things to
the environment as they're compiled.

34
00:01:54.190 --> 00:01:57.320
And because functions are objects they
inherit from function not prototype.

35
00:02:00.060 --> 00:02:04.650
We use the var statement to declare and
initialize variables within functions.

36
00:02:04.650 --> 00:02:07.390
You don't specify a type
in the var statement.

37
00:02:07.390 --> 00:02:08.710
It can accept any type.

38
00:02:09.900 --> 00:02:13.800
And variables declared anywhere
within a function are visible

39
00:02:13.800 --> 00:02:15.810
everywhere within the function.

40
00:02:15.810 --> 00:02:21.124
So we don't have block scope with the var
statement we only have function scope.

41
00:02:21.124 --> 00:02:26.683
So, the var statement is does a really
weird thing, it gets split into two parts.

42
00:02:26.683 --> 00:02:31.567
The declaration part gets hoisted to
the top of the function where the variable

43
00:02:31.567 --> 00:02:33.790
gets initialized with undefined.

44
00:02:34.960 --> 00:02:39.490
And the initialization part turns into
an ordinary assignment statement.

45
00:02:39.490 --> 00:02:44.655
So here we've got var myVar = 0,
var myVar =

46
00:02:44.655 --> 00:02:51.060
undefined gets hoisted to
the top of the function.

47
00:02:51.060 --> 00:02:52.736
And at the sight of
the original statement,

48
00:02:52.736 --> 00:02:55.511
we get an ordinary assignment statement,
which does initialization.

49
00:02:57.987 --> 00:02:59.930
&gt;&gt; Douglas: To make
things more complicated,

50
00:02:59.930 --> 00:03:03.990
JavaScript has a function statement or
a function declaration.

51
00:03:03.990 --> 00:03:07.170
Which unfortunately looks exactly
like the function expression.

52
00:03:08.300 --> 00:03:11.870
It starts with the word function in
this case the name is mandatory.

53
00:03:11.870 --> 00:03:12.710
You can't leave it out.

54
00:03:13.950 --> 00:03:16.760
It takes the same parameters and
takes the same body.

55
00:03:16.760 --> 00:03:18.236
So it looks exactly like the other one.

56
00:03:20.780 --> 00:03:25.990
The function statement is a shorthand for
a var statement with a function value.

57
00:03:25.990 --> 00:03:30.710
So function foo expands into
var foo = function foo.

58
00:03:31.960 --> 00:03:37.882
And that further expands because of
hoisting into var foo = undefined and

59
00:03:37.882 --> 00:03:39.620
foo = function foo.

60
00:03:39.620 --> 00:03:41.641
Both of these now get hoisted
to the top of the function.

61
00:03:43.352 --> 00:03:47.519
&gt;&gt; Douglas: It's because of this
second hoisting that the language does

62
00:03:47.519 --> 00:03:51.040
not allow you to declare
a function inside of an if.

63
00:03:52.330 --> 00:03:57.050
Because the assignment of the function
variable is going to be pulled

64
00:03:57.050 --> 00:04:00.230
out of the f and moved to the top,
so that's illegal.

65
00:04:01.460 --> 00:04:06.190
Now it turns out most of the JavaScript
engines allow you to do it anyway.

66
00:04:06.190 --> 00:04:08.460
But because the standard says you can't,

67
00:04:08.460 --> 00:04:11.685
they all have different opinions
on what it actually means.

68
00:04:11.685 --> 00:04:13.507
I don't recommend doing that.

69
00:04:16.306 --> 00:04:19.674
&gt;&gt; Douglas: So it's really confusing
having both function expressions and

70
00:04:19.674 --> 00:04:23.610
function statements,
which both look exactly the same.

71
00:04:23.610 --> 00:04:25.070
So how do you tell them apart?

72
00:04:26.090 --> 00:04:27.980
And it depends on where you are.

73
00:04:27.980 --> 00:04:33.180
If the first token of a statement is
function, then it is a function statement.

74
00:04:33.180 --> 00:04:36.584
If the word function occurs anyplace else,
it's a function declaration.

75
00:04:39.993 --> 00:04:42.823
&gt;&gt; Douglas: So
we talked this morning about scope,

76
00:04:42.823 --> 00:04:46.580
about block scope versus function scope.

77
00:04:46.580 --> 00:04:51.049
And block scope is a very common thing,
function scope is a very unusual thing,

78
00:04:51.049 --> 00:04:53.864
which is unique to
JavaScript's var statement.

79
00:04:57.071 --> 00:05:01.017
&gt;&gt; Douglas: So and
function scope is sufficient,

80
00:05:01.017 --> 00:05:05.810
but function scope looks like block scope.

81
00:05:05.810 --> 00:05:08.870
Or at least the syntax is the same
as block scope languages and so

82
00:05:08.870 --> 00:05:10.560
you get confusion.

83
00:05:10.560 --> 00:05:15.740
So In some languages that have block
scope, you can do stupid things like this.

84
00:05:15.740 --> 00:05:20.620
Where you can have two loops both
using the same variable name

85
00:05:20.620 --> 00:05:22.470
as their induction variable.

86
00:05:22.470 --> 00:05:26.290
And it works because in those languages,
each of these will be in a different

87
00:05:26.290 --> 00:05:29.310
scope, and so
they won't interfere with each other.

88
00:05:29.310 --> 00:05:31.760
It's extremely unwise but legal.

89
00:05:31.760 --> 00:05:33.760
In JavaScript it is also illegal, but

90
00:05:33.760 --> 00:05:39.360
it's worse than unwise because there's
only one i variable created here.

91
00:05:39.360 --> 00:05:42.000
Both loops will be using
the same i variable.

92
00:05:43.030 --> 00:05:46.042
And so they will interfere with
each other really badly and

93
00:05:46.042 --> 00:05:48.203
this loop will never correctly perform.

94
00:05:48.203 --> 00:05:51.830
&gt;&gt; Speaker 2: That's because
everything gets hoisted into the top.

95
00:05:51.830 --> 00:05:55.295
&gt;&gt; Douglas: It's because both var
declarations gets hoisted to the top and

96
00:05:55.295 --> 00:05:58.050
there's no check to see if a variable
has already been declared.

97
00:05:59.120 --> 00:06:03.084
So if there is a second
var declaration for

98
00:06:03.084 --> 00:06:07.180
the same name good, that's double good.

99
00:06:07.180 --> 00:06:08.460
It should be an error, but

100
00:06:08.460 --> 00:06:11.900
it's not, because it's not
an error can get into trouble.

101
00:06:11.900 --> 00:06:16.780
So because of all of this weirdness I
recommend to clear all of your variables

102
00:06:16.780 --> 00:06:18.000
at the top of the function.

103
00:06:18.000 --> 00:06:21.270
Because that's where they're
actually being declared and

104
00:06:21.270 --> 00:06:24.490
also declare all of your
functions before you call them.

105
00:06:24.490 --> 00:06:27.810
All of this hoisting nonsense
was created specifically so

106
00:06:27.810 --> 00:06:32.290
that you don't have to do that, that you
can call a function before it's declared.

107
00:06:33.510 --> 00:06:36.580
But that requires that all this
hoisting weirdness be going on and

108
00:06:36.580 --> 00:06:39.610
that you understand what
the hosting is doing.

109
00:06:39.610 --> 00:06:43.450
And I think that's too much to expect
of the people reading your program.

110
00:06:43.450 --> 00:06:48.540
So instead I think it's much better to say
declare the function before you call it.

111
00:06:48.540 --> 00:06:51.260
That's a much easier thing to understand.

112
00:06:51.260 --> 00:06:57.620
&gt;&gt; Speaker 2: But call, you're using the
word call where I would call it defining.

113
00:06:57.620 --> 00:06:59.940
&gt;&gt; Douglas: In JavaScript,

114
00:06:59.940 --> 00:07:04.740
you can lexically call a function
before you can clear it.

115
00:07:04.740 --> 00:07:06.060
I can say
&gt;&gt; Speaker 2: I see what you mean.

116
00:07:06.060 --> 00:07:09.960
&gt;&gt; Douglas: I can say foo parent, and
then below that I can say function foo.

117
00:07:09.960 --> 00:07:13.670
&gt;&gt; Speaker 2: You don't mean to say var,
some function name, and

118
00:07:13.670 --> 00:07:15.560
then later on to find a function.

119
00:07:15.560 --> 00:07:18.600
I see, nevermind.

120
00:07:18.600 --> 00:07:19.665
These two statements,

121
00:07:19.665 --> 00:07:23.298
there's not this parallel between these
two statements that I'm looking for.

122
00:07:26.706 --> 00:07:30.129
&gt;&gt; Speaker 2: So
functions aren't variables.

123
00:07:30.129 --> 00:07:33.305
&gt;&gt; Douglas: No, functions are values
that can be stored in variables.

124
00:07:33.305 --> 00:07:35.260
&gt;&gt; Speaker 2: Okay, if they have a name.

125
00:07:35.260 --> 00:07:39.230
&gt;&gt; Douglas: Even anonymous functions
can be stored in variables.

126
00:07:39.230 --> 00:07:39.730
&gt;&gt; Speaker 2: Okay.

