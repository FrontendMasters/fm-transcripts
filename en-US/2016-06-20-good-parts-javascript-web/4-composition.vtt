WEBVTT

1
00:00:00.000 --> 00:00:04.247
[MUSIC]

2
00:00:04.247 --> 00:00:07.526
&gt;&gt; Douglas Crockford: So, we should use
elements of good composition wherever

3
00:00:07.526 --> 00:00:11.830
applicable and I think we should, for
example, use a space after a comma,

4
00:00:11.830 --> 00:00:13.400
not before a comma.

5
00:00:13.400 --> 00:00:15.600
That's how we do it in literary style.

6
00:00:15.600 --> 00:00:20.130
In a programming style, we should do the
same thing unless we have clear evidence

7
00:00:20.130 --> 00:00:24.660
of a benefit that occurs
from that difference.

8
00:00:24.660 --> 00:00:29.530
Because we already have all this
education locked into our brains about

9
00:00:29.530 --> 00:00:30.940
those sorts of patterns.

10
00:00:30.940 --> 00:00:32.526
We can use that to make it easier for

11
00:00:32.526 --> 00:00:35.640
writing our programs.
&gt;&gt; Douglas Crockford: Now

12
00:00:35.640 --> 00:00:39.585
programming requires significantly
more precision than writing does, so

13
00:00:39.585 --> 00:00:41.760
we'll need additional rules.

14
00:00:41.760 --> 00:00:45.810
For example I propose that we use
spaces to disambiguate parents.

15
00:00:45.810 --> 00:00:50.100
We use parents to indicate parts of
statements, to indicate invocations and

16
00:00:50.100 --> 00:00:53.160
function definitions and grouping.

17
00:00:53.160 --> 00:00:58.050
And so to help us to distinguish
those cases, I propose a rule.

18
00:00:58.050 --> 00:01:01.670
There is no space between
a function name and a left paren.

19
00:01:01.670 --> 00:01:07.490
And there's always one space between
all other names, and a left paren.

20
00:01:07.490 --> 00:01:10.550
So, by that rule these
forms are all wrong.

21
00:01:12.020 --> 00:01:16.790
For example,
return is not a function in this language.

22
00:01:16.790 --> 00:01:19.489
So, we shouldn't make it look
like a function invocation.

23
00:01:20.870 --> 00:01:25.070
Now you can argue, well someone could
easily figure out what these mean, right?

24
00:01:25.070 --> 00:01:27.410
So it doesn't matter.

25
00:01:27.410 --> 00:01:31.768
But it does matter because you
want the person who's reading

26
00:01:31.768 --> 00:01:35.450
your program to understand
what the program does.

27
00:01:35.450 --> 00:01:39.703
You don't don't want them to be mentally
correcting you and proofreading it,

28
00:01:39.703 --> 00:01:44.085
because that is distracting them from the
much more important work of figuring out

29
00:01:44.085 --> 00:01:46.830
what your program does and
how do we make it better.

30
00:01:49.450 --> 00:01:52.460
So one of the good parts in JavaScript
is the immediately invocable

31
00:01:52.460 --> 00:01:53.230
function expression.

32
00:01:55.720 --> 00:01:59.420
And we'll look a lot at
these much more later today.

33
00:02:00.600 --> 00:02:04.030
And unfortunately the design
of JavaScript didn't

34
00:02:04.030 --> 00:02:06.000
anticipate that this was
a feature of the language.

35
00:02:07.400 --> 00:02:10.680
So here we've got a function statement and
we want to

36
00:02:10.680 --> 00:02:15.280
invoke that function immediately but
we can't, it's a syntax error.

37
00:02:15.280 --> 00:02:19.060
Someone figured out that we can
wrap the function in parens.

38
00:02:19.060 --> 00:02:22.000
That function is now
an expression position and

39
00:02:22.000 --> 00:02:23.550
now we can immediately invoke it.

40
00:02:24.980 --> 00:02:28.590
But then you've got
the extra invoking parents

41
00:02:28.590 --> 00:02:30.660
hanging off on the end
like a pair of dog balls.

42
00:02:32.890 --> 00:02:35.450
So we can do better for

43
00:02:35.450 --> 00:02:40.560
the reader by wrapping the entire
invocation expression in parens.

44
00:02:40.560 --> 00:02:44.530
So now the goal is not to just get
it passed to the compiler, but

45
00:02:44.530 --> 00:02:48.820
to give a little bit more information to
the reader, so that when the reader sees

46
00:02:48.820 --> 00:02:54.780
a function and the closing parens wrapped
in parentheses, that means something.

47
00:02:54.780 --> 00:02:58.190
That means what's important
here is not the function,

48
00:02:58.190 --> 00:02:59.459
it's the result of the function.

49
00:03:00.730 --> 00:03:04.740
And just by moving the pair
in one space over,

50
00:03:04.740 --> 00:03:08.730
we give a little bit more information
to the reader and that can be helpful.

51
00:03:08.730 --> 00:03:10.300
And again we do it at no cost.

52
00:03:11.730 --> 00:03:16.200
So you remember earlier I warned you
about automatic semicolon insertion

53
00:03:16.200 --> 00:03:20.000
how it sometimes puts them in places
where you think it shouldn't and

54
00:03:20.000 --> 00:03:23.140
sometimes doesn't put them
in places where it should.

55
00:03:23.140 --> 00:03:24.940
This is one of those times.

56
00:03:24.940 --> 00:03:26.830
So here we've got an expression statement,

57
00:03:26.830 --> 00:03:32.470
someone left out the semi-colon expecting
that the system was going to add it but

58
00:03:32.470 --> 00:03:35.150
in this case the system
is not going to add it.

59
00:03:35.150 --> 00:03:39.140
So instead of assigning y to x, we're
going to assign the result of calling y as

60
00:03:39.140 --> 00:03:41.909
a function passing the result of
the other function as its argument,

61
00:03:42.940 --> 00:03:48.160
which is not how anybody would read this,
but that's how the compiler reads it.

62
00:03:48.160 --> 00:03:53.460
And so I recommend never rely on
automatic semicolon insertion.

63
00:03:53.460 --> 00:03:56.000
Always put the semicolons in,
and in the right place.

64
00:03:56.000 --> 00:04:00.310
If you're not sure where that is, will be
really happy to tell you where they go.

65
00:04:02.750 --> 00:04:07.490
JavaScript has a with statement, which was
modeled after the Pascal with statement.

66
00:04:07.490 --> 00:04:11.700
Which was intended to make it easier to
write certain kinds of function access or

67
00:04:11.700 --> 00:04:13.530
object accesses.

68
00:04:13.530 --> 00:04:15.910
Unfortunately it wasn't
designed correctly.

69
00:04:15.910 --> 00:04:18.230
So here we've got a with statement and

70
00:04:18.230 --> 00:04:21.920
here we have four statements
that it expands into.

71
00:04:21.920 --> 00:04:24.998
Can anyone guess which
of these that will do?

72
00:04:31.364 --> 00:04:32.319
&gt;&gt; Douglas Crockford: Anybody?

73
00:04:34.666 --> 00:04:36.510
&gt;&gt; Speaker 2: Maybe it's the first one.

74
00:04:36.510 --> 00:04:37.080
&gt;&gt; Douglas Crockford: Actually it's

75
00:04:37.080 --> 00:04:37.890
a trick question.

76
00:04:37.890 --> 00:04:39.710
It could be any of them.

77
00:04:39.710 --> 00:04:44.100
There's no way you can tell by reading the
program, which of these it's going to do.

78
00:04:44.100 --> 00:04:49.094
And in fact, it's possible that
every time that statement executes,

79
00:04:49.094 --> 00:04:51.100
it could be a different one.

80
00:04:51.100 --> 00:04:52.530
&gt;&gt; Speaker 2: [INAUDIBLE] O.
&gt;&gt; Douglas Crockford: Yeah,

81
00:04:52.530 --> 00:04:53.070
it depends on O.

82
00:04:54.440 --> 00:04:59.542
And since it can't know what O is at time,
there's no way to read the program.

83
00:04:59.542 --> 00:05:02.781
So we want to be confident that our
programs are perfect, but how can you know

84
00:05:02.781 --> 00:05:05.616
that your program is perfect if you
can't even read the program and

85
00:05:05.616 --> 00:05:06.440
know what it does?

86
00:05:07.720 --> 00:05:11.890
So for that reason, I recommend
don't ever use the with statement.

87
00:05:11.890 --> 00:05:13.100
You don't need it.

88
00:05:13.100 --> 00:05:13.890
Leave it out.

89
00:05:13.890 --> 00:05:16.140
You're better off without it.

90
00:05:16.140 --> 00:05:19.160
Now there are a lot of very clever
uses for the with statement.

91
00:05:19.160 --> 00:05:21.850
And the people who
discover these clever uses

92
00:05:21.850 --> 00:05:24.930
think that they should be entitled
to use it, because it's so useful.

93
00:05:26.320 --> 00:05:28.450
But I'm not saying it isn't useful,

94
00:05:28.450 --> 00:05:30.480
I'm saying there is never a case
where it isn't confusing.

95
00:05:31.610 --> 00:05:33.450
And confusion is the enemy.

96
00:05:34.510 --> 00:05:35.830
Confusion must be avoided.

97
00:05:35.830 --> 00:05:39.060
Confusion is when a program
appears to do one thing and

98
00:05:39.060 --> 00:05:40.660
it actually does something else.

99
00:05:40.660 --> 00:05:43.420
Another word for that, bug.

100
00:05:43.420 --> 00:05:44.810
We don't want bugs.

101
00:05:44.810 --> 00:05:49.560
So I want to eliminate as many
sources of confusion as possible

102
00:05:49.560 --> 00:05:52.250
because I'm trying to attain perfection.

103
00:05:52.250 --> 00:05:57.200
I may never get there but
God Almighty that's where I'm going,

104
00:05:57.200 --> 00:05:58.980
I wanna try and
make programs that are perfect.

105
00:06:00.530 --> 00:06:03.020
JavaScript has a double equal operator.

106
00:06:03.020 --> 00:06:05.710
I have problems with that,
I think it should've been called equal.

107
00:06:05.710 --> 00:06:08.250
But that's another thing
that Thompson did to us.

108
00:06:10.210 --> 00:06:15.420
But unfortunately even worse than what
Thomson did, it does type coercion.

109
00:06:15.420 --> 00:06:20.670
So first it looks at the two
types of its arguments, and

110
00:06:20.670 --> 00:06:23.140
if they're not the same
type it will convert one or

111
00:06:23.140 --> 00:06:27.070
both of them to another type and
then compare that result.

112
00:06:27.070 --> 00:06:33.420
And as a result, you get false positives
and it also means you lose transitivity.

113
00:06:33.420 --> 00:06:36.580
Transitivity means that if two
things are equal to the same thing,

114
00:06:36.580 --> 00:06:37.880
then they should be equal to each other.

115
00:06:38.880 --> 00:06:40.791
That's not the case here.

116
00:06:40.791 --> 00:06:44.925
So when JavaScript was developed,

117
00:06:44.925 --> 00:06:48.930
this was thought to be a good idea.

118
00:06:48.930 --> 00:06:50.620
Turns out it's not.

119
00:06:50.620 --> 00:06:53.980
So the inventor of the language
realized he'd made a mistake.

120
00:06:53.980 --> 00:06:57.700
So when it went to be standardized, he
went to the standardization committee and

121
00:06:57.700 --> 00:07:01.410
said, I screwed up the double equal but
I know the fix for it.

122
00:07:01.410 --> 00:07:03.660
We just have it not do type coercion.

123
00:07:03.660 --> 00:07:08.650
I've already tested it in
the Netscape codebase and

124
00:07:08.650 --> 00:07:12.080
it actually runs a little faster and
it's all smaller, so that's good.

125
00:07:12.080 --> 00:07:12.960
It's a big win.

126
00:07:12.960 --> 00:07:14.400
So let's do this, right.

127
00:07:14.400 --> 00:07:19.160
And the committee said no, no,
we're gonna keep it the way it is.

128
00:07:19.160 --> 00:07:21.769
But we'll offer you triple
equal as a compromise.

129
00:07:23.270 --> 00:07:27.762
So, a lot of people don't like
triple equal because instead of

130
00:07:27.762 --> 00:07:29.214
having to go [NOISE].

131
00:07:29.214 --> 00:07:35.829
You now have to go [NOISE] and
say, yeah triple equal.

132
00:07:35.829 --> 00:07:39.911
Always use triple equal.
&gt;&gt; Speaker 2: There's JSLint.

133
00:07:39.911 --> 00:07:40.767
&gt;&gt; Douglas Crockford: Yeah, JSLint tell

134
00:07:40.767 --> 00:07:42.130
you for sure.

135
00:07:42.130 --> 00:07:45.744
JSLint will recommend this triple equal.
&gt;&gt; Speaker 2: Will fix it?

136
00:07:45.744 --> 00:07:46.482
&gt;&gt; Douglas Crockford: It won't fix it,

137
00:07:46.482 --> 00:07:47.724
you have to fix your own code.

138
00:07:47.724 --> 00:07:53.779
[LAUGH] But JSLint is very happy
to tell you about the terrible

139
00:07:53.779 --> 00:08:00.030
things you've done but
it's on you to make it right.

140
00:08:00.030 --> 00:08:01.340
As it should be.

141
00:08:01.340 --> 00:08:03.960
Now there are some cases.

142
00:08:03.960 --> 00:08:09.860
Because that double equal accidentally
does exactly what you want.

143
00:08:09.860 --> 00:08:11.480
Should you use it then?

144
00:08:11.480 --> 00:08:12.300
I recommend no.

145
00:08:12.300 --> 00:08:13.240
Don't even use it then.

146
00:08:14.660 --> 00:08:17.810
Because you don't want the person who's
reading your code to have to ask,

147
00:08:17.810 --> 00:08:21.060
did he find the one case where double
equal actually does exactly what you want?

148
00:08:21.060 --> 00:08:22.234
Or is he just incompetent?

149
00:08:22.234 --> 00:08:26.260
[LAUGH] You don't want people asking
that question when they're reading

150
00:08:26.260 --> 00:08:26.910
your code, right?

151
00:08:26.910 --> 00:08:29.440
You want them to understand
what it's doing and

152
00:08:29.440 --> 00:08:32.250
go, yeah this is well written stuff,
I can make this better.

153
00:08:34.460 --> 00:08:38.090
So if there is a feature of the language
that is sometimes problematic, and

154
00:08:38.090 --> 00:08:41.025
if it could be replaced by another
feature that is more reliable,

155
00:08:41.025 --> 00:08:44.260
then always use the more reliable feature.

156
00:08:44.260 --> 00:08:51.385
This is a surprisingly controversial
statement but I think it's obviously true.

157
00:08:51.385 --> 00:08:55.100
So this is a feature that was added
in the s5, multiline string literals.

158
00:08:55.100 --> 00:08:58.840
There are lots of other languages
that do this in exactly the same way.

159
00:08:58.840 --> 00:08:59.830
I think it was a mistake.

160
00:09:01.770 --> 00:09:05.720
First because it breaks indentation
because the continuation has to be

161
00:09:05.720 --> 00:09:06.555
over on the margin.

162
00:09:06.555 --> 00:09:11.637
And indentation is really important for
understanding the composition of our

163
00:09:11.637 --> 00:09:17.418
programs right, because we've got nested
functions nested objects, nested blocks.

164
00:09:17.418 --> 00:09:22.119
That nesting is critically important and
this breaks indentation.

165
00:09:22.119 --> 00:09:26.361
And it does impair readability and
that's a bad thing.

166
00:09:26.361 --> 00:09:32.810
But worse than that, there's this syntax
hazard where this statement is correct.

167
00:09:32.810 --> 00:09:34.520
This one is a syntax error.

168
00:09:34.520 --> 00:09:36.096
Can anybody spot the error in the second

169
00:09:36.096 --> 00:09:40.936
statement?
&gt;&gt; Speaker 3: There's a space at

170
00:09:40.936 --> 00:09:44.180
the beginning of the second line?
&gt;&gt; Douglas Crockford: Nope.

171
00:09:44.180 --> 00:09:46.717
&gt;&gt; Speaker 2: Space Towards the \.

172
00:09:46.717 --> 00:09:47.602
&gt;&gt; Douglas Crockford: Yeah, exactly,

173
00:09:47.602 --> 00:09:50.800
there's a space right here.
&gt;&gt; Speaker 2: Can't you see it?

174
00:09:50.800 --> 00:09:51.329
&gt;&gt; Douglas Crockford: Yeah,

175
00:09:51.329 --> 00:09:54.685
it's obvious once you point it out, right.

176
00:09:54.685 --> 00:09:56.670
But I'm trying to make
programs that are perfect.

177
00:09:56.670 --> 00:10:01.440
I wanna be a look at and go, yes,
that is perfect, and I can't.

178
00:10:01.440 --> 00:10:03.600
So I don't wanna use this.

179
00:10:03.600 --> 00:10:08.250
We spend a lot of our time searching for
the needle in the haystack.

180
00:10:08.250 --> 00:10:11.400
We can cut that time down if our
programs look less like haystacks.

181
00:10:12.630 --> 00:10:15.231
So, avoid forms that are difficult
to distinguish from common

182
00:10:15.231 --> 00:10:19.687
errors.
&gt;&gt; Douglas Crockford: This is another one

183
00:10:19.687 --> 00:10:21.330
due to Thompson.

184
00:10:21.330 --> 00:10:26.260
He allowed you to put
assignment expressions in

185
00:10:27.350 --> 00:10:30.230
condition position of an if statement.

186
00:10:30.230 --> 00:10:33.860
Java got this right, Java says you have to
put something that evaluates to a boolean.

187
00:10:35.940 --> 00:10:38.620
But then JavaScript got it wrong and
went back to the C way and

188
00:10:38.620 --> 00:10:40.050
said you can put any expression in there.

189
00:10:41.120 --> 00:10:44.100
So this statement appears
to do what this one does.

190
00:10:45.220 --> 00:10:46.560
But it actually does what this one does.

191
00:10:48.210 --> 00:10:50.994
And so
you don't ever wanna write this one.

192
00:10:50.994 --> 00:10:54.770
You wanna figure out which one
you mean and write that instead.

193
00:10:54.770 --> 00:10:58.740
Make your programs look like what they
do and don't make your reader guess,

194
00:10:58.740 --> 00:10:59.820
did you get it right or not.

