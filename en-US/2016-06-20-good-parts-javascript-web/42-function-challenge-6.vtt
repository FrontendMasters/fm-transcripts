WEBVTT

1
00:00:00.000 --> 00:00:03.608
[MUSIC]

2
00:00:03.608 --> 00:00:09.590
&gt;&gt; Douglas: Make a function gensymf that
makes a function that generates symbols.

3
00:00:09.590 --> 00:00:11.685
So we're taking the generator idea and

4
00:00:11.685 --> 00:00:14.682
we're gonna try to do something
practical with it now.

5
00:00:14.682 --> 00:00:20.364
So gensymf is a symbol generator or
gensymf is a factory that makes

6
00:00:20.364 --> 00:00:26.150
symbol generators, or
things that make serial numbers.

7
00:00:26.150 --> 00:00:29.370
So we designate a serial
number with a prefix, and

8
00:00:29.370 --> 00:00:33.430
so you can send it any string and
that becomes the prefix string, and

9
00:00:33.430 --> 00:00:39.770
then we will get a series of
strings starting with that symbol.

10
00:00:41.250 --> 00:00:45.670
So we're gonna make two generators
this time from the same factory.

11
00:00:45.670 --> 00:00:50.230
We're gonna make the G series and
the H series and when we call them,

12
00:00:50.230 --> 00:00:56.162
we'll get G1, H1, G2, H2.
&gt;&gt; Douglas: Let's

13
00:00:56.162 --> 00:01:01.271
look at gensymf,
&gt;&gt; Douglas: Gensymf takes a prefix string,

14
00:01:01.271 --> 00:01:04.798
it creates a number
which it's gonna use for

15
00:01:04.798 --> 00:01:08.430
keeping track of where
it is in the sequence.

16
00:01:08.430 --> 00:01:12.120
It will return a function which
will add one to that number, and

17
00:01:12.120 --> 00:01:14.760
return the result of concatenating
the number to the prefix.

18
00:01:14.760 --> 00:01:17.338
So who got something that works?

19
00:01:17.338 --> 00:01:18.620
Good.

20
00:01:18.620 --> 00:01:20.662
Anyone do anything
substantially different?

21
00:01:20.662 --> 00:01:21.918
Yeah.
&gt;&gt; Speaker 2: And you cast in,

22
00:01:21.918 --> 00:01:25.453
then it's prefix to the string,
can you pass it in digit.

23
00:01:25.453 --> 00:01:30.444
Is that first thing?
&gt;&gt; Douglas: That's a wise

24
00:01:30.444 --> 00:01:32.268
precaution, yeah.

25
00:01:32.268 --> 00:01:34.712
Anybody else?
&gt;&gt; Speaker 2: I used find function.

26
00:01:34.712 --> 00:01:35.428
&gt;&gt; Douglas: Use a find function

27
00:01:35.428 --> 00:01:36.150
that's going to.

28
00:01:37.520 --> 00:01:41.780
So this is an example, we've seen a number
of these where we've got a factory

29
00:01:41.780 --> 00:01:45.920
function which then makes something
which will do some work, to get

30
00:01:45.920 --> 00:01:49.810
usually a generator, but it could be there
are lots of different kinds of functions.

31
00:01:52.070 --> 00:01:55.650
But they're both functions,
it's just one is nested in the other.

32
00:01:55.650 --> 00:01:59.808
And in fact if we nest further, if we
put another function outside of this,

33
00:01:59.808 --> 00:02:01.793
we could make a factory, factory.

34
00:02:01.793 --> 00:02:05.790
And you can wrap that with a factory,
factory, factory.

35
00:02:05.790 --> 00:02:09.850
So just for fun, let's look at what this
would look like if it were a factory,

36
00:02:09.850 --> 00:02:13.885
factory.
&gt;&gt; Douglas: So gensymff is the factory,

37
00:02:13.885 --> 00:02:19.984
factory and we're gonna pass the increment
function and the initial seed value

38
00:02:19.984 --> 00:02:26.190
to gensymff in a produce of produces a
function that works exactly like gensymf.

39
00:02:27.320 --> 00:02:29.517
And it'll make the sequences right, and

40
00:02:29.517 --> 00:02:32.485
we've done things like this
a couple of times already.

41
00:02:32.485 --> 00:02:37.790
So I'm just gonna show you the thing
cuz we've already done this one.

42
00:02:37.790 --> 00:02:42.211
So it looks very similar to patterns
we've seen before, where the factory,

43
00:02:42.211 --> 00:02:45.489
factory is supplying values
that go into the generator.

44
00:02:45.489 --> 00:02:50.696
And now, so
we can automate the making of factories.

45
00:02:50.696 --> 00:02:55.578
Now, the interesting thing about this
one is that statement there where

46
00:02:55.578 --> 00:02:59.340
we're creating the number
variable which is gonna hold

47
00:02:59.340 --> 00:03:04.450
the value that is being used to
generate the sequence numbers.

48
00:03:04.450 --> 00:03:09.390
So if we were to move that up one line,
so that it's not in the factory anymore,

49
00:03:09.390 --> 00:03:11.480
but it's in the factory, factory.

50
00:03:11.480 --> 00:03:13.857
That would change the visibility
of that variable so

51
00:03:13.857 --> 00:03:15.755
it would be seen by all of the generators.

52
00:03:15.755 --> 00:03:23.300
So instead of generating G1, H1, G2,
H2, we would generate G1, H2, G3, H4.

53
00:03:24.500 --> 00:03:27.060
That's a really interesting
change in behavior.

54
00:03:28.270 --> 00:03:31.400
It's just moving one variable
declaration one place to another.

55
00:03:32.500 --> 00:03:37.260
So we've been dealing with closure and

56
00:03:37.260 --> 00:03:42.080
we can we saw that we can have things that
are global and things that are local, and

57
00:03:42.080 --> 00:03:47.050
things that are sort of in between, but
there can be more of those in betweens.

58
00:03:47.050 --> 00:03:52.640
And if we get into nesting
things in useful ways, we have

59
00:03:52.640 --> 00:03:57.890
tremendous control over the visibility and
the lifetime of the variables, and

60
00:03:57.890 --> 00:03:59.759
can do interesting things
to affect their behavior.

61
00:04:03.210 --> 00:04:07.958
How about that, any questions about that?

62
00:04:07.958 --> 00:04:11.000
Ready for another one or
do you want to take a break?

63
00:04:13.980 --> 00:04:16.738
Let's do another one, sure why not.

64
00:04:16.738 --> 00:04:20.230
So everybody remembers fibonacci, right?

65
00:04:20.230 --> 00:04:21.769
You did fibonacci numbers in school.

66
00:04:21.769 --> 00:04:24.630
So fibonacci was
an important mathematician.

67
00:04:24.630 --> 00:04:27.140
He discovered a lot of good stuff, but

68
00:04:27.140 --> 00:04:30.450
the only thing we seem to remember
is the fibonacci sequence.

69
00:04:30.450 --> 00:04:33.580
In their infinite number
of Fibonacci Sequences, but

70
00:04:33.580 --> 00:04:38.070
mostly we only remember the famous one,
which started with 0 and 1, and

71
00:04:38.070 --> 00:04:39.310
that's what we're gonna be doing now.

72
00:04:39.310 --> 00:04:44.080
So we're gonna make a factory which
will make a Fibonacci generator.

73
00:04:45.470 --> 00:04:50.050
And you'll seed the factory with
the first two numbers in the sequence.

74
00:04:50.050 --> 00:04:52.120
So everybody remember how
Fibonacci numbers work?

75
00:04:53.490 --> 00:04:54.310
Well let's review.

76
00:04:55.670 --> 00:05:00.080
So the Fibonacci sequence will
be a sequence of integers,

77
00:05:00.080 --> 00:05:04.010
you specify the first two
integers in the sequence,

78
00:05:04.010 --> 00:05:07.380
the third number will be
the sum of the first two.

79
00:05:08.760 --> 00:05:13.300
The fourth number will be the sum
of the previous two and so on.

80
00:05:14.560 --> 00:05:18.962
So the first numbers we get are 0 and 1,
because those are the ones we provide.

81
00:05:18.962 --> 00:05:22.885
Then the next 1, will be 1 because
that's the sum of 0 and 1,

82
00:05:22.885 --> 00:05:26.470
the next one will be 2,
because it's the sum of 1 and 1.

83
00:05:26.470 --> 00:05:29.470
The next will be 3,
cuz it's a sum of 1 and 2,

84
00:05:29.470 --> 00:05:34.423
next be 5 because it's the sum of 2 and
3, and the next in the series will be?

85
00:05:34.423 --> 00:05:37.590
8, exactly.

86
00:05:39.420 --> 00:05:41.266
So this was a tricky one, wasn't it?

87
00:05:41.266 --> 00:05:44.890
The Fibonacci sequence
itself is totally trivial.

88
00:05:44.890 --> 00:05:47.360
It's three, it's simple statements,

89
00:05:47.360 --> 00:05:51.000
but getting the first two numbers
to come out but that was the trick.

90
00:05:52.170 --> 00:05:54.695
So first off you got something that works?

91
00:05:54.695 --> 00:05:57.590
Like graduations this one was hard, so

92
00:05:57.590 --> 00:06:02.250
letâ€™s look at a number of
approaches that we could take.

93
00:06:02.250 --> 00:06:07.330
So here's one, there is the Fibonacci
function there in the box.

94
00:06:07.330 --> 00:06:13.100
So that's it, and
then we've got an if statement

95
00:06:13.100 --> 00:06:18.910
around it versus which statement which
asks, where are we in the sequence?

96
00:06:18.910 --> 00:06:23.702
At the first at the beginning of sequence
put out the first number, otherwise

97
00:06:23.702 --> 00:06:28.584
put out the second number, otherwise
use the Fibonacci function and do that.

98
00:06:28.584 --> 00:06:31.986
And this works, it absolutely works,
who took this approach or

99
00:06:31.986 --> 00:06:35.710
something like it maybe used and
if instead, but basically.

100
00:06:35.710 --> 00:06:39.450
Yeah, you've got a variable which is
telling you where you are in the sequence.

101
00:06:39.450 --> 00:06:43.524
This is a completely, yeah?
&gt;&gt; Speaker 3: Except for

102
00:06:43.524 --> 00:06:47.940
case one, you're inputting a and b.

103
00:06:47.940 --> 00:06:53.616
A and b don't necessarily equal 0 and
1, if a is something other than 0 for

104
00:06:53.616 --> 00:06:54.783
case one.
&gt;&gt; Douglas: Right.

105
00:06:54.783 --> 00:06:56.892
&gt;&gt; Speaker 3: You need to return a+ b,

106
00:06:56.892 --> 00:06:59.637
don't you?
&gt;&gt; Douglas: No.

107
00:06:59.637 --> 00:07:01.800
&gt;&gt; Speaker 3: You don't know the rule.

108
00:07:01.800 --> 00:07:03.205
&gt;&gt; Speaker 2: You're switching on i.

109
00:07:03.205 --> 00:07:05.222
&gt;&gt; Douglas: I got i which is telling me

110
00:07:05.222 --> 00:07:08.268
where I am in the sequence.
&gt;&gt; Speaker 3: I know.

111
00:07:08.268 --> 00:07:09.662
&gt;&gt; Douglas: Which isn't the value I'm at

112
00:07:09.662 --> 00:07:12.129
the sequence just how many
numbers have I looked at.

113
00:07:12.129 --> 00:07:13.017
&gt;&gt; Speaker 3: I know.

114
00:07:13.017 --> 00:07:15.442
&gt;&gt; Douglas: So if I'm looking at the first

115
00:07:15.442 --> 00:07:21.457
number, I output a, and if I look at
the second number i is 1, I output b.

116
00:07:21.457 --> 00:07:24.650
Otherwise I output a + b.
&gt;&gt; Speaker 3: So if you want

117
00:07:24.650 --> 00:07:29.556
the Fibonacci, if your starting elements
are 5 and 7, the first number's 5,

118
00:07:29.556 --> 00:07:33.589
second number's 7, third number's 12.
&gt;&gt; Douglas: Right.

119
00:07:33.589 --> 00:07:34.400
&gt;&gt; Speaker 3: Okay.

120
00:07:34.400 --> 00:07:35.744
&gt;&gt; Douglas: Yeah, that's how they

121
00:07:35.744 --> 00:07:36.740
work.
&gt;&gt; Speaker 3: Yeah,

122
00:07:36.740 --> 00:07:39.050
I was thinking that you added the first.

123
00:07:39.050 --> 00:07:41.843
First, you took the second
then you added the first two.

124
00:07:41.843 --> 00:07:45.185
Then you, no,
it's not until you get to the-

125
00:07:45.185 --> 00:07:46.311
&gt;&gt; Douglas: It's the first two numbers,

126
00:07:46.311 --> 00:07:47.608
then you add.
&gt;&gt; Speaker 3: Right,

127
00:07:47.608 --> 00:07:50.626
because they tell you, got it.
&gt;&gt; Douglas: Yeah.

128
00:07:50.626 --> 00:07:52.269
&gt;&gt; Speaker 3: Is y incremented or not?

129
00:07:52.269 --> 00:07:55.238
&gt;&gt; Douglas: Yeah, well instead of adding

130
00:07:55.238 --> 00:07:59.404
1, I set it to 1 because I know it's 0.

131
00:07:59.404 --> 00:08:05.102
And beyond that I don't need to increment
it, once I get past the first two cases,

132
00:08:05.102 --> 00:08:10.298
I don't care what i is anymore.
&gt;&gt; Speaker 3: Okay.

133
00:08:10.298 --> 00:08:10.991
&gt;&gt; Douglas: Okay, so

134
00:08:10.991 --> 00:08:15.157
completely acceptable this is
a reasonable way to do it.

135
00:08:15.157 --> 00:08:19.673
I would argue that a reasonably
intelligent person could figure out what

136
00:08:19.673 --> 00:08:24.430
this code is doing and
that's most of what we want code to do so.

137
00:08:24.430 --> 00:08:25.861
This is good, it's okay.

138
00:08:25.861 --> 00:08:30.999
My complaint with it is, it's a fairly
big function and only that much of it is

139
00:08:30.999 --> 00:08:36.320
concerned with the Fibonacci things, so
it just feels kind of loopsided to me.

140
00:08:36.320 --> 00:08:39.097
So here's another approach.

141
00:08:39.097 --> 00:08:43.711
In this one, I kind of permuted
the statements of the Fibonacci

142
00:08:43.711 --> 00:08:47.714
sequence in order to delay
the output of the first one,

143
00:08:47.714 --> 00:08:51.990
or to cause the first two
numbers to get output.

144
00:08:51.990 --> 00:08:54.520
So who did something like this?

145
00:08:54.520 --> 00:08:58.330
Yeah, so this is probably
the most optimal solution.

146
00:08:58.330 --> 00:09:02.957
It's gonna be the smallest code,
the fastest performance not that either of

147
00:09:02.957 --> 00:09:06.602
those matter in real life, but
it does have that advantage.

148
00:09:06.602 --> 00:09:11.182
The disadvantage of this is I'd hate to
be the guy that has to debug it, right?

149
00:09:11.182 --> 00:09:14.760
&gt;&gt; Speaker 4: I said b = a + next

150
00:09:14.760 --> 00:09:17.413
instead.
&gt;&gt; Douglas: Yeah,

151
00:09:17.413 --> 00:09:21.920
there are variations on it, but
it's basically the same idea.

152
00:09:21.920 --> 00:09:26.633
So another approach we could take
is recognizing that we're making

153
00:09:26.633 --> 00:09:32.460
a generator and we already have some
tools for constructing generators.

154
00:09:32.460 --> 00:09:38.570
So here's another approach,
I've got my Fibonacci generator here,

155
00:09:38.570 --> 00:09:43.370
which will give me the next number, I just
need to get the first two on top of it.

156
00:09:43.370 --> 00:09:45.887
So I'm going to make a special generato,
and

157
00:09:45.887 --> 00:09:50.527
I'm gonna start by taking identityf which
was the first interesting function that

158
00:09:50.527 --> 00:09:54.591
we wrote this morning, that you
thought had no practical application.

159
00:09:54.591 --> 00:09:58.682
It turns out what identifyf
is is a constant generator,

160
00:09:58.682 --> 00:10:02.336
it will always produce the same value.

161
00:10:02.336 --> 00:10:06.990
So I'm gonna use that to make generators
and then I'm gonna use the limit function

162
00:10:06.990 --> 00:10:10.880
that we wrote earlier to cut off
the sequence, so I only get one.

163
00:10:12.340 --> 00:10:17.330
So I got a pair of things and I can
then concatenate those two together and

164
00:10:17.330 --> 00:10:21.240
then concatenate that on
to the Fibonacci function.

165
00:10:21.240 --> 00:10:22.192
So who did that?

166
00:10:22.192 --> 00:10:28.292
[LAUGH] Of course nobody would do that.
&gt;&gt; Speaker 4: [LAUGH]

167
00:10:28.292 --> 00:10:31.245
&gt;&gt; Douglas: And if you're, yeah, so

168
00:10:31.245 --> 00:10:33.133
there's that.

169
00:10:33.133 --> 00:10:39.205
And if I were gonna be doing this a lot,
I would take limit identityf,

170
00:10:39.205 --> 00:10:43.920
and encapsulate that into
something which would make

171
00:10:43.920 --> 00:10:48.551
sequences of one more compactly or
we could do this.

172
00:10:48.551 --> 00:10:53.047
A similar thing, we take the element
function that we wrote earlier make

173
00:10:53.047 --> 00:10:55.776
an array containing
the first two things and

174
00:10:55.776 --> 00:10:59.670
concatenate that onto
the Fibonacci generator.

175
00:10:59.670 --> 00:11:00.553
So who did that?

176
00:11:00.553 --> 00:11:02.282
No, no.
&gt;&gt; [INAUDIBLE]

177
00:11:02.282 --> 00:11:05.703
&gt;&gt; Douglas: Very, very good, brilliant.

