WEBVTT

1
00:00:00.000 --> 00:00:03.906
[MUSIC]

2
00:00:03.906 --> 00:00:06.946
&gt;&gt; Douglas Crockford: We added a lot of
new methods because new methods allow us

3
00:00:06.946 --> 00:00:10.051
to provide new functionality
without new syntax, and so

4
00:00:10.051 --> 00:00:13.390
that's where most of the attention went.

5
00:00:13.390 --> 00:00:15.547
&gt;&gt; Douglas Crockford: We
added function.bind,

6
00:00:15.547 --> 00:00:20.987
which was something that jQuery has
been promoting that allows you to

7
00:00:20.987 --> 00:00:26.075
turn a method into a function so
that you can use it as a callback.

8
00:00:26.075 --> 00:00:31.002
We added string.trim, so
we now have a method which will remove

9
00:00:31.002 --> 00:00:34.710
the extraneous whitespace from a string.

10
00:00:34.710 --> 00:00:37.680
This should have been in
the language from day one, right?

11
00:00:37.680 --> 00:00:40.130
And it's just, it shouldn't have
taken this long to get that.

12
00:00:41.530 --> 00:00:44.140
We've got-
&gt;&gt; Speaker 2: Does it trim on both sides?

13
00:00:44.140 --> 00:00:45.305
&gt;&gt; Douglas Crockford: It trims both sides.

14
00:00:45.305 --> 00:00:46.608
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Douglas Crockford: We didn't fight

15
00:00:46.608 --> 00:00:49.458
enough demands to do the individuals,
the left and

16
00:00:49.458 --> 00:00:53.183
right versions, and
I haven't heard anybody complain about it.

17
00:00:53.183 --> 00:00:58.926
If anybody does,
maybe we could get into his.

18
00:00:58.926 --> 00:01:01.830
&gt;&gt; Speaker 3: So, you adjust the trim,
and, now, is that what it's doing,

19
00:01:01.830 --> 00:01:07.800
or it's actually just more JS, or
is it written in a lower level?

20
00:01:07.800 --> 00:01:10.414
&gt;&gt; Douglas Crockford: It
depends on the implementation,

21
00:01:10.414 --> 00:01:13.122
it could be written in a lower level.

22
00:01:13.122 --> 00:01:15.889
So, this is called poly filling,
it's also been called monkey patching.

23
00:01:15.889 --> 00:01:21.564
It allows you to insert code into
the system, so when Brendan originally

24
00:01:21.564 --> 00:01:26.880
designed the language,
he only had 10 days to do this prototype.

25
00:01:26.880 --> 00:01:32.150
He was told that, or
he expected that if his demo didn't work

26
00:01:32.150 --> 00:01:34.640
that Netscape would have done
something much stupider.

27
00:01:35.870 --> 00:01:38.650
I don't know what it would have been,
I can't imagine what that would have been

28
00:01:38.650 --> 00:01:42.280
but that was his [INAUDIBLE] so
he only had 10 days.

29
00:01:42.280 --> 00:01:47.170
And he was pretty confident that he wasn't
going to get everything right in ten days,

30
00:01:47.170 --> 00:01:50.280
but they're probably gonna need
to be some tweaks in the field.

31
00:01:50.280 --> 00:01:54.860
So, he left almost
everything exposed on lot.

32
00:01:56.230 --> 00:02:00.820
So, things which in a properly designed
language would be locked down or

33
00:02:00.820 --> 00:02:01.830
completely open.

34
00:02:01.830 --> 00:02:04.610
So, you can add things
to object.prototype, for

35
00:02:04.610 --> 00:02:06.770
example, in a real language.

36
00:02:06.770 --> 00:02:09.290
You shouldn't even be able
to see object.prototype,

37
00:02:09.290 --> 00:02:12.160
you know all that stuff should be sealed.

38
00:02:12.160 --> 00:02:15.640
And he did that, probably correctly,
because he figured

39
00:02:15.640 --> 00:02:18.580
he didn't get everything right and
someday people were going to need to patch

40
00:02:18.580 --> 00:02:24.260
the system in real time in order to make
it Work which is exactly what happened.

41
00:02:24.260 --> 00:02:29.780
So there's all this stuff in the language
which is exposed including this.

42
00:02:31.140 --> 00:02:36.680
If you take this code and run it on
an IE 6 browser or IE 7 or IE 8 browser.

43
00:02:36.680 --> 00:02:42.150
Then they will work the same way as
IE ten with respect as trim.trim.

44
00:02:42.150 --> 00:02:45.080
Now IE ten might have its own
implementation of this it might be

45
00:02:45.080 --> 00:02:47.970
a native implementation so
it might run faster.

46
00:02:47.970 --> 00:02:50.480
So this version IE six months slower.

47
00:02:50.480 --> 00:02:52.530
I think that's great that's
exactly how it should be

48
00:02:56.710 --> 00:03:01.180
We added a large new set of or
array methods and

49
00:03:01.180 --> 00:03:04.280
I really like these methods of
design wasn't perfect but there.

50
00:03:04.280 --> 00:03:10.800
They're good enough that we can use these
so most of these work the same way in that

51
00:03:10.800 --> 00:03:15.820
you'll pass Call a method on an array and
pass in a function and

52
00:03:15.820 --> 00:03:20.660
that function will get called for
each element of the array and

53
00:03:20.660 --> 00:03:25.290
things will happen based
on what method you provide.

54
00:03:25.290 --> 00:03:30.260
So the every method will keep doing
that behavior until a function

55
00:03:30.260 --> 00:03:34.500
returns false and when a function
returns false then it stops doing that.

56
00:03:34.500 --> 00:03:38.560
So that allows you to loop for

57
00:03:38.560 --> 00:03:43.010
a time and then bail out similar to
what break might be doing in a for loop.

58
00:03:45.870 --> 00:03:49.190
Filter will take all of the return values.

59
00:03:49.190 --> 00:03:50.830
If the return value is true,

60
00:03:50.830 --> 00:03:55.020
then the original element of the array
will be copied into a new array.

61
00:03:55.020 --> 00:03:56.810
So it allows you to
take a bigger array and

62
00:03:56.810 --> 00:04:00.050
produce a smaller array based on
what happens for each element.

63
00:04:01.710 --> 00:04:03.730
For each is the thing that replaces a for

64
00:04:03.730 --> 00:04:07.380
loop it just goes and
visits every element I like for each.

65
00:04:08.420 --> 00:04:12.350
IndexOf will do a search, so
you can do a search in an array similar to

66
00:04:12.350 --> 00:04:18.300
the searching you can do on strings Last
of searches, the array from the back end.

67
00:04:19.980 --> 00:04:21.790
Map is maybe the most powerful of them,

68
00:04:21.790 --> 00:04:27.240
it will take every return value from that
function and store it into a new array.

69
00:04:27.240 --> 00:04:29.240
So you can do transformations and

70
00:04:29.240 --> 00:04:32.450
you can do selections and
lots of new things using map.

71
00:04:34.890 --> 00:04:40.040
Reduce will take in an array and
reduce it down to a single value, and

72
00:04:40.040 --> 00:04:45.310
it'll do that by, you pass it a function
that function gets called for

73
00:04:45.310 --> 00:04:48.240
pairs of values from the array.

74
00:04:48.240 --> 00:04:53.540
For example if you pass the add function
to reduce, you'll get a total function.

75
00:04:53.540 --> 00:04:57.490
If you pass a multiply function to
reduce you'll get a product function

76
00:04:59.290 --> 00:05:02.170
then there is reduce right
which reduces from the other

77
00:05:02.170 --> 00:05:05.170
end of the array I've not
found any reason for that.

78
00:05:05.170 --> 00:05:08.450
I don't know why we did that,
but it's in there.

79
00:05:10.110 --> 00:05:16.238
Some is similar to every except it
uses the opposite boolean value.

80
00:05:16.238 --> 00:05:20.370
We added Date.now.

81
00:05:20.370 --> 00:05:21.850
So it used to be,

82
00:05:21.850 --> 00:05:24.890
if you wanted to get the real time clock
you'd have to do what this is doing.

83
00:05:24.890 --> 00:05:28.730
You would make a new Date object
with the default configuration and

84
00:05:28.730 --> 00:05:30.680
then extract its time.

85
00:05:30.680 --> 00:05:34.970
So usually when you're getting the time
it's because you want to measure something

86
00:05:34.970 --> 00:05:39.780
But this process of getting access to
the time adds a lot of latency and

87
00:05:39.780 --> 00:05:43.770
so you can now call date now directly and

88
00:05:43.770 --> 00:05:46.240
it'll give you the current
value of the real time clock.

89
00:05:46.240 --> 00:05:50.120
Now browsers still add
a lot of latency and

90
00:05:50.120 --> 00:05:52.220
operating systems also
add a lot of latency.

91
00:05:52.220 --> 00:05:56.560
So it's not proven that this
actually does a better job but But

92
00:05:56.560 --> 00:05:58.630
it's not so much JavaScript's fault.

93
00:05:58.630 --> 00:06:01.000
now so that's gotten better

94
00:06:03.300 --> 00:06:08.100
when the first standard was made
Netscape and Microsoft could not

95
00:06:08.100 --> 00:06:13.440
agree on the language in the standard for
describing how date parsing works.

96
00:06:13.440 --> 00:06:16.010
There's a date constructor
that can take a string And

97
00:06:16.010 --> 00:06:20.030
it can then attempt to turn that
string into a date, object.

98
00:06:20.030 --> 00:06:22.740
But they couldn't agree on the details for
how that worked.

99
00:06:22.740 --> 00:06:25.350
So instead incorrectly,

100
00:06:25.350 --> 00:06:29.850
they agreed to disagree by leaving
it completely unspecified.

101
00:06:29.850 --> 00:06:33.560
So there is no language of the standard
that gives you a guarantee that

102
00:06:33.560 --> 00:06:36.410
if you pass at this form
then it will parse.

103
00:06:36.410 --> 00:06:38.280
Which is kind of bad.

104
00:06:38.280 --> 00:06:42.670
Now since then, ISO has come up
with an international date format,

105
00:06:42.670 --> 00:06:43.500
which is pretty nice.

106
00:06:43.500 --> 00:06:46.940
Sometimes called ISO texts,ISO dates or
ISO strings.

107
00:06:48.300 --> 00:06:51.840
Which you have a year then a dash,
then a month and a dash and so on.

108
00:06:51.840 --> 00:06:55.790
So the date object will now
produce strings in that form.

109
00:06:57.120 --> 00:07:02.730
And the date parsers are now
guaranteed to accept that form.

110
00:07:02.730 --> 00:07:06.910
So we now have at least one date format
which is guaranteed to be acceptable.

111
00:07:07.960 --> 00:07:09.950
So this is the first one we'll try.

112
00:07:09.950 --> 00:07:14.560
If that one fails, then they'll fall back
on the under-specified proprietary ones.

113
00:07:14.560 --> 00:07:17.490
But at least there's one
that's guaranteed to work.

114
00:07:17.490 --> 00:07:18.570
&gt;&gt; Speaker 2: Question about those two.

115
00:07:18.570 --> 00:07:19.090
&gt;&gt; Douglas Crockford: Yeah.

116
00:07:19.090 --> 00:07:22.160
&gt;&gt; Speaker 2: So
the ISO format slide before this.

117
00:07:22.160 --> 00:07:28.040
Everything was getting UTC times
whereas just one before so,

118
00:07:28.040 --> 00:07:29.140
if you do two ISO string.

119
00:07:29.140 --> 00:07:32.060
You're gonna get everything
based on the UTC time.

120
00:07:32.060 --> 00:07:35.533
If you datetime.now,
are you gonna get server time?

121
00:07:37.484 --> 00:07:42.840
&gt;&gt; Speaker 2: Or the time that the machine
that the code is running on thinks it is.

122
00:07:45.830 --> 00:07:48.110
&gt;&gt; Speaker 3: You get
a data object which is UTC.

123
00:07:48.110 --> 00:07:51.870
&gt;&gt; Douglas Crockford: Yeah at the data
object have some fundamental time.

124
00:07:51.870 --> 00:07:52.770
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Douglas Crockford: That's independent

125
00:07:52.770 --> 00:07:55.250
of the current time zone
are situated right.

126
00:07:55.250 --> 00:07:56.137
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Douglas Crockford: So you're getting

127
00:07:56.137 --> 00:07:56.870
that that core value.

128
00:07:56.870 --> 00:07:57.381
&gt;&gt; Speaker 2: Okay.
Thank you.

129
00:08:00.100 --> 00:08:03.481
&gt;&gt; Douglas Crockford: We added
array.isArray to the language we tried to

130
00:08:03.481 --> 00:08:08.669
fix type of and couldn't that there was
too much on the web that was dependent on

131
00:08:08.669 --> 00:08:13.936
the broken behavior type of so instead we
added this horrendously ugly thing but

132
00:08:13.936 --> 00:08:18.339
at least we got into that language And
Brendan had actually counted

133
00:08:18.339 --> 00:08:22.310
the keystrokes and
this is smaller than the type of form.

134
00:08:22.310 --> 00:08:24.840
So even I looks a lot worse,
it's actually a little bit smaller.

135
00:08:26.470 --> 00:08:30.990
I managed to add object dot keys
which will give you an enumeration of

136
00:08:30.990 --> 00:08:34.550
all of the Ownproperties of an object.

137
00:08:34.550 --> 00:08:37.340
So you don't get
the inherited method names.

138
00:08:37.340 --> 00:08:41.440
You only get the data members which
are the thing that you're probably

139
00:08:41.440 --> 00:08:42.770
most concerned with.

140
00:08:42.770 --> 00:08:45.690
And it returns it in the form of
an array which means you can then do for

141
00:08:45.690 --> 00:08:47.940
each on it and so that's pretty nice.

142
00:08:49.510 --> 00:08:50.680
&gt;&gt; Speaker 4: You proposed that?

143
00:08:50.680 --> 00:08:52.730
&gt;&gt; Douglas Crockford: Yeah I
proposed that.

144
00:08:52.730 --> 00:08:54.090
&gt;&gt; Speaker 4: Cool,
I use that all the time and

145
00:08:54.090 --> 00:08:56.860
then I do like .length just to
see how big this object is.

146
00:08:56.860 --> 00:08:59.220
And stuff like that.

147
00:08:59.220 --> 00:08:59.870
&gt;&gt; Douglas Crockford: You're welcome.
&gt;&gt; Class: [LAUGH]

148
00:08:59.870 --> 00:09:00.600
&gt;&gt; Speaker 4: Yeah, sweet.

149
00:09:00.600 --> 00:09:04.990
&gt;&gt; Speaker 3: You were talking about
earlier there, some, was it some?

150
00:09:04.990 --> 00:09:07.580
&gt;&gt; Douglas Crockford: Yep.
&gt;&gt; Speaker 3: How is that different

151
00:09:07.580 --> 00:09:08.510
than keys?

152
00:09:08.510 --> 00:09:10.260
Keys is an array.

153
00:09:10.260 --> 00:09:12.120
&gt;&gt; Douglas Crockford: Some is for
looping on an array.

154
00:09:12.120 --> 00:09:13.350
It's the opposite of every.

155
00:09:14.530 --> 00:09:16.700
&gt;&gt; Speaker 3: Every gives you all
the values, some gives you only one.

156
00:09:16.700 --> 00:09:17.370
&gt;&gt; Douglas Crockford: Every gives you

157
00:09:17.370 --> 00:09:19.520
everything as long as
the functions are returning true.

158
00:09:21.430 --> 00:09:26.570
And some keeps working as long as
everything is returning false.

159
00:09:26.570 --> 00:09:28.300
&gt;&gt; Speaker 3: It's operating
on the values not the keys.

160
00:09:28.300 --> 00:09:31.690
&gt;&gt; Douglas Crockford: On the return
values that are based on the function

161
00:09:31.690 --> 00:09:33.910
that is processing the keys.

162
00:09:33.910 --> 00:09:35.450
Yes.
&gt;&gt; Speaker 6: Back on the dates there,

163
00:09:35.450 --> 00:09:36.190
there is a question.

164
00:09:36.190 --> 00:09:39.150
Are there any plans for
mutable date objects?

165
00:09:39.150 --> 00:09:40.280
&gt;&gt; Douglas Crockford: Immutable
date objects?

166
00:09:40.280 --> 00:09:41.620
&gt;&gt; Speaker 6: Yeah I don't
know what he means by that.

167
00:09:41.620 --> 00:09:45.430
&gt;&gt; Douglas Crockford: We're going to get
to freeze you can freeze any date object

168
00:09:45.430 --> 00:09:48.660
is that what he wants?

169
00:09:48.660 --> 00:09:49.160
&gt;&gt; Speaker 6: I'm waiting.

170
00:09:50.180 --> 00:09:53.320
I'm just going to ask for
clarification just go on.

171
00:09:53.320 --> 00:09:58.100
&gt;&gt; Douglas Crockford: I also managed
to get object dot create Object.create

172
00:09:58.100 --> 00:10:02.400
is the primitive which makes a new object
that inherits from another object.

173
00:10:02.400 --> 00:10:06.130
In a prototypal language, this should
have been in the language from day one.

174
00:10:06.130 --> 00:10:11.040
So instead we had the weird
thing with new and .prototype.,

175
00:10:11.040 --> 00:10:15.590
so this gives us a direct way of doing
prototype inheritance, which is good.

