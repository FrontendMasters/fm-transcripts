WEBVTT

1
00:00:00.000 --> 00:00:03.955
[MUSIC]

2
00:00:03.955 --> 00:00:05.880
&gt;&gt; Douglas Crockford: Okay,
let's look at addg.

3
00:00:05.880 --> 00:00:10.170
Addg takes a first argument,
it creates a more function.

4
00:00:10.170 --> 00:00:14.610
If the first argument is not undefined
it returns the more function.

5
00:00:14.610 --> 00:00:19.610
The more function takes the next argument
If the next argument is undefined

6
00:00:19.610 --> 00:00:24.840
it returns first otherwise it adds
next to first and returns itself.

7
00:00:24.840 --> 00:00:28.390
By returning itself allows for

8
00:00:28.390 --> 00:00:32.860
the next thing to happen and
I call this return recursion.

9
00:00:32.860 --> 00:00:36.070
Recursion is when you have
a function that calls itself

10
00:00:36.070 --> 00:00:38.310
recursion is when you have
a function that returns itself.

11
00:00:39.640 --> 00:00:41.860
So anybody do anything else?

12
00:00:41.860 --> 00:00:43.180
Take a different approach to solving this?

13
00:00:43.180 --> 00:00:48.793
There are lots of possible solutions.

14
00:00:48.793 --> 00:00:54.768
&gt;&gt; Speaker 2: You're doing the same thing
where you compute ahead the next value.

15
00:00:54.768 --> 00:01:01.429
That you, you did it in another
part another one yesterday.

16
00:01:01.429 --> 00:01:02.756
&gt;&gt; Douglas Crockford: So
if you didn't get this one,

17
00:01:02.756 --> 00:01:05.420
please write it down cuz we're
gonna need it for the next one.

18
00:01:07.440 --> 00:01:08.110
Anybody else?

19
00:01:10.520 --> 00:01:12.880
&gt;&gt; Speaker 3: Well, it is different and
I don't know how to read it and say that.

20
00:01:21.237 --> 00:01:25.663
&gt;&gt; Speaker 3: The effects is undefined,
return undefined.

21
00:01:25.663 --> 00:01:29.210
I don't know, I don't see anything,
never mind, keep going.

22
00:01:29.210 --> 00:01:29.710
&gt;&gt; Douglas Crockford: All right.

23
00:01:32.810 --> 00:01:34.450
&gt;&gt; Douglas Crockford: So
I'll give you a minute to capture this.

24
00:01:35.480 --> 00:01:41.895
So while that's happening
can anyone guess the name

25
00:01:41.895 --> 00:01:47.256
of the next function that we should write
&gt;&gt; Speaker 3: Lift g,

26
00:01:47.256 --> 00:01:49.583
lift g
&gt;&gt; Douglas Crockford: Yeah very very good,

27
00:01:49.583 --> 00:01:50.910
lift g, of course.

28
00:01:50.910 --> 00:01:52.439
What else would you want to write next?

29
00:01:54.310 --> 00:01:55.864
Write a function liftg.

30
00:01:55.864 --> 00:02:00.080
That will take a binary function and
apply it to many invocations.

31
00:02:00.080 --> 00:02:01.550
So it's similar to what we've done before.

32
00:02:01.550 --> 00:02:07.540
If you pass the add function to liftg
it gives you the Aggi function.

33
00:02:07.540 --> 00:02:11.140
We can do the same thing with
multiply you make the multifunction.

34
00:02:13.620 --> 00:02:16.795
&gt;&gt; Speaker 2: If you
passed add into liftg,

35
00:02:16.795 --> 00:02:21.884
what would the value of
the first operation be?

36
00:02:24.990 --> 00:02:28.030
&gt;&gt; Speaker 2: What would you get
back from the first time you call?

37
00:02:28.030 --> 00:02:30.610
&gt;&gt; Douglas Crockford: Undefined.
&gt;&gt; Speaker 2: It would be undefined.

38
00:02:30.610 --> 00:02:33.130
&gt;&gt; Douglas Crockford: Well if
you were to call the resulting-

39
00:02:33.130 --> 00:02:34.362
&gt;&gt; Speaker 2: No, instead of passing in

40
00:02:34.362 --> 00:02:35.700
mul, you pass in add.

41
00:02:35.700 --> 00:02:39.977
&gt;&gt; Douglas Crockford: Right, although so
you get an undefined, you get 3, and

42
00:02:39.977 --> 00:02:41.560
then you’ll get 7.

43
00:02:41.560 --> 00:02:42.700
And then you'll get 7 and
0 against the form.

44
00:02:42.700 --> 00:02:43.650
&gt;&gt; Speaker 2: You got 3, 0.

45
00:02:43.650 --> 00:02:46.007
&gt;&gt; Douglas Crockford: Yeah.

46
00:02:46.007 --> 00:02:50.893
&gt;&gt; Speaker 2: But
with mul you’re multiplying 3 times 1.

47
00:02:50.893 --> 00:02:54.590
Okay.
&gt;&gt; Douglas Crockford: All right so

48
00:02:54.590 --> 00:03:00.120
here is liftg, liftg returns a function,

49
00:03:01.210 --> 00:03:06.200
that function gets the first argument
if first is undefined it returns first.

50
00:03:06.200 --> 00:03:08.910
Otherwise it returns the more function.

51
00:03:08.910 --> 00:03:14.030
The more function gets the next argument
if next is undefined it returns first.

52
00:03:14.030 --> 00:03:18.530
Otherwise it sets first to the result
of the binary function with first and

53
00:03:18.530 --> 00:03:21.130
next And returns itself.

54
00:03:21.130 --> 00:03:25.860
So who got something that works
outstanding very very good.

55
00:03:25.860 --> 00:03:30.254
Any questions about this one,

56
00:03:30.254 --> 00:03:35.493
anybody do a different approach that

57
00:03:35.493 --> 00:03:40.230
they think is worth mentioning.

58
00:03:40.230 --> 00:03:47.051
&gt;&gt; Speaker 4: I do a great work but
I tried First option number.

59
00:03:47.051 --> 00:03:53.600
&gt;&gt; Douglas Crockford: Right so
if you didn't get this one get it down.

60
00:03:53.600 --> 00:03:55.960
You might want to refer
to it in the next one.

61
00:03:55.960 --> 00:03:57.550
&gt;&gt; Speaker 3: This is certainly good yet

62
00:03:57.550 --> 00:04:01.536
you function inside Inside the new
function and generalize the.

63
00:04:04.762 --> 00:04:05.780
&gt;&gt; Speaker 3: The ig function.

64
00:04:05.780 --> 00:04:10.739
&gt;&gt; Speaker 2: So the first time
if you call this with nothing

65
00:04:10.739 --> 00:04:14.922
then you would, you pass in undefined

66
00:04:17.798 --> 00:04:22.120
&gt;&gt; Speaker 2: You just get back itself.

67
00:04:22.120 --> 00:04:24.050
&gt;&gt; Douglas Crockford: Right
we return undefined so.

68
00:04:24.050 --> 00:04:27.360
&gt;&gt; Speaker 2: The next time when you,
so if you pass in a number.

69
00:04:28.770 --> 00:04:31.380
&gt;&gt; Douglas Crockford: That
number is now first and

70
00:04:31.380 --> 00:04:34.630
then the second time if we get
undefined we return first.

71
00:04:34.630 --> 00:04:37.060
&gt;&gt; Speaker 2: The number
is now First I see.

72
00:04:39.740 --> 00:04:40.820
Yeah great.

73
00:04:43.680 --> 00:04:47.030
&gt;&gt; Douglas Crockford: Write a function
array G that will build an array for

74
00:04:47.030 --> 00:04:52.500
many invocations So if we call array Gand
pass it nothing It returns an empty array.

75
00:04:53.700 --> 00:04:58.360
If we pass it three and then nothing
it returns array containing three.

76
00:04:58.360 --> 00:05:02.430
If we pass it through three and then four
and then five, and nothing returns three,

77
00:05:02.430 --> 00:05:03.320
four and five.

78
00:05:06.640 --> 00:05:13.600
Okay so here is arrayg, arrayg takes
a first argument, it creates an array.

79
00:05:14.610 --> 00:05:16.550
It makes a more function and

80
00:05:16.550 --> 00:05:20.820
it returns the result of calling the more
function with the first argument.

81
00:05:20.820 --> 00:05:26.340
The more function gets the next argument
if next is undefined it returns the Array.

82
00:05:26.340 --> 00:05:31.550
Otherwise it pushes the next argument
onto the Array, and returns itself.

83
00:05:31.550 --> 00:05:32.750
So who got something that works?

84
00:05:33.930 --> 00:05:35.700
Very good, very good.

85
00:05:35.700 --> 00:05:38.610
Did anybody try using liftg?

86
00:05:40.380 --> 00:05:41.280
Anyone?

87
00:05:41.280 --> 00:05:45.763
That would have an extra credit all right.

88
00:05:45.763 --> 00:05:48.150
So let's do another one.

89
00:05:48.150 --> 00:05:50.890
Okay we've I've got got
this is a good one for you.

90
00:05:51.950 --> 00:05:56.140
Make a function continuize that
takes a unitary function and

91
00:05:56.140 --> 00:05:59.650
returns a function that takes
a callback and an argument.

92
00:05:59.650 --> 00:06:03.720
There's a style of programming
called continuation passing style.

93
00:06:03.720 --> 00:06:07.780
In which functions,
instead of returning values,

94
00:06:07.780 --> 00:06:12.970
instead are given an additional argument
which is the function to which to deliver

95
00:06:12.970 --> 00:06:18.330
that value and in continuation passing
style computation is always going forward,

96
00:06:18.330 --> 00:06:21.150
functions tend not to return anything.

97
00:06:21.150 --> 00:06:24.850
They're always going forward and
it's amazing.

98
00:06:24.850 --> 00:06:29.570
And when JavaScript gets
tail recursion with ES6,

99
00:06:29.570 --> 00:06:33.360
then we'll be able to do that in
JavaScript and that will be great.

100
00:06:33.360 --> 00:06:38.650
So this function is intended to help us to
migrate toward that style of programming.

101
00:06:39.780 --> 00:06:44.540
So what it'll do is Allow us to take
any existing unary function and

102
00:06:44.540 --> 00:06:47.940
turn it into a function
that will take a call back.

103
00:06:47.940 --> 00:06:51.510
So in this case we're gonna pass
the square root function to continue wise,

104
00:06:51.510 --> 00:06:55.600
it will return the square root
with a callback function.

105
00:06:55.600 --> 00:07:01.180
We will then call that function passing in
a function that will receive the result.

106
00:07:01.180 --> 00:07:05.480
In this case I'm suggesting that it could
be the Alert function, which is something

107
00:07:05.480 --> 00:07:09.610
that lives in the browser, which will
pop up a box and show you the answer.

108
00:07:09.610 --> 00:07:13.530
If you're not running in a browser
you could log to the console or

109
00:07:13.530 --> 00:07:15.060
whatever you're doing.

110
00:07:15.060 --> 00:07:19.760
Some just some way of seeing
where the result is going to go.

111
00:07:19.760 --> 00:07:24.560
And then will pass in 81 which is the
number we want to take the square root of.

112
00:07:24.560 --> 00:07:26.950
So if this function is working correctly,

113
00:07:26.950 --> 00:07:30.680
then we should see a box show up on
the browser with the number 9 in it.

114
00:07:32.350 --> 00:07:37.640
Okay, so here's continuize, continuize
takes a unary function The returns

115
00:07:37.640 --> 00:07:41.270
of function that takes a callback and
an argument and returns result of calling

116
00:07:41.270 --> 00:07:45.580
the callback function with the result
of the unary function and the argument.

117
00:07:45.580 --> 00:07:46.820
So who got something that works?

118
00:07:48.220 --> 00:07:53.220
Congratulations you are now in the 90%
tile of JavaScript programmers.

119
00:07:54.480 --> 00:07:58.260
Not that the bar was ever very high but
&gt;&gt; Speaker 2: [LAUGH]

120
00:07:58.260 --> 00:07:59.120
&gt;&gt; Douglas Crockford: But you're up there

121
00:07:59.120 --> 00:08:03.660
and it's because you understand an aspect
of the language which is really,

122
00:08:03.660 --> 00:08:07.960
really important, vitally important that
most of the people working this language

123
00:08:07.960 --> 00:08:10.670
don't know,
don't know that it's even there.

124
00:08:10.670 --> 00:08:12.950
And it's really important.

125
00:08:12.950 --> 00:08:18.980
What we've been doing over
the last day is a paradigm shift.

126
00:08:18.980 --> 00:08:22.920
I could talk for hours and hours about

127
00:08:22.920 --> 00:08:25.870
what could happen when you have
a function that returns a function and

128
00:08:25.870 --> 00:08:28.980
you would think you would understand
those words and go yeah but,

129
00:08:28.980 --> 00:08:33.600
unless you've done it a few dozen times,
it really won't make any difference.

130
00:08:33.600 --> 00:08:36.340
It won't make any sense but
you've done it now.

131
00:08:36.340 --> 00:08:38.480
When you came in here yesterday morning.

132
00:08:38.480 --> 00:08:40.850
You did not know how to
write this function.

133
00:08:40.850 --> 00:08:42.020
And you just knocked it off.

134
00:08:42.020 --> 00:08:43.990
You wrote it very quickly and
you got it right.

135
00:08:43.990 --> 00:08:45.610
So good for you.

136
00:08:45.610 --> 00:08:51.020
And the reason we went through all of this
is that I wanted to explain to you again

137
00:08:51.020 --> 00:08:56.060
something that I did on the first day that
you thought you understood but you didn't.

138
00:08:56.060 --> 00:08:57.960
So, we're going to go through that again.

139
00:08:57.960 --> 00:09:02.790
Now and this time you now
have the tools of the context

140
00:09:02.790 --> 00:09:04.520
in order to understand
what I was talking about

