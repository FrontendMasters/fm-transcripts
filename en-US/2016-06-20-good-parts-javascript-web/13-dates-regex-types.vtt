WEBVTT

1
00:00:00.000 --> 00:00:03.816
[MUSIC]

2
00:00:03.816 --> 00:00:07.752
&gt;&gt; Douglas Crockford: We have a date
function which was inspired by Java's Date

3
00:00:07.752 --> 00:00:12.510
class, which was not Y2K ready
when it was introduced in 1995.

4
00:00:12.510 --> 00:00:15.500
I don't know if they didn't think
the language was going to be around that

5
00:00:15.500 --> 00:00:18.260
long or if they didn't see it coming or
what the deal was.

6
00:00:18.260 --> 00:00:19.600
But we survived it.

7
00:00:19.600 --> 00:00:22.410
Hooray, and it's been fixed,
so we got that.

8
00:00:24.090 --> 00:00:28.670
We got regular expressions which
were borrowed from Perl 4.

9
00:00:28.670 --> 00:00:33.030
This is a regular expression literal that
matches regular expression literals.

10
00:00:34.560 --> 00:00:39.740
That's what I claim, the thing that
I hate about this convention is that

11
00:00:39.740 --> 00:00:43.140
if you have a regular expression that's
longer than an inch or two, it's

12
00:00:43.140 --> 00:00:47.983
really hard to have any confidence that
it contains what you think it contains,

13
00:00:47.983 --> 00:00:50.950
so that it matches or rejects what
you think it will match and reject.

14
00:00:52.500 --> 00:00:56.260
And I will confess I've written regular
expression literals that are several feet

15
00:00:56.260 --> 00:00:57.720
long and I am not proud of that.

16
00:00:59.080 --> 00:01:02.080
But the language doesn't
make it easy to do because

17
00:01:02.080 --> 00:01:03.990
they all have to be scrunched together.

18
00:01:03.990 --> 00:01:07.750
You can't even use whitespace in them
to kind of separate the elements so

19
00:01:07.750 --> 00:01:09.600
you can see what it's doing.

20
00:01:09.600 --> 00:01:11.990
And all smushed together,
it's virtually impossible for

21
00:01:11.990 --> 00:01:13.810
human to decipher what that is.

22
00:01:13.810 --> 00:01:16.030
Fortunately, there is something
on the web called Regulex.

23
00:01:17.280 --> 00:01:20.580
And you give a regular expression
literal to Regulex and

24
00:01:20.580 --> 00:01:24.690
it will give you a railroad diagram
of what that regular expression does.

25
00:01:24.690 --> 00:01:26.620
So you can see what it does and

26
00:01:26.620 --> 00:01:30.400
you can have a good understanding
of how it will behave.

27
00:01:30.400 --> 00:01:32.911
I will not write another regular
expression without running it

28
00:01:32.911 --> 00:01:33.677
through Regulex.

29
00:01:33.677 --> 00:01:35.227
Highly, highly recommended.

30
00:01:35.227 --> 00:01:36.210
Yeah?
&gt;&gt; Speaker 2: Find

31
00:01:36.210 --> 00:01:39.014
yourself writing a regular expression
that's too many inches long,

32
00:01:39.014 --> 00:01:46.250
can you just get a smaller string?
&gt;&gt; Douglas Crockford: Yeah,

33
00:01:46.250 --> 00:01:49.223
thank you for that.
&gt;&gt; Audience: [LAUGH]

34
00:01:49.223 --> 00:01:51.293
&gt;&gt; Douglas Crockford: I had to, sorry.

35
00:01:51.293 --> 00:01:52.182
&gt;&gt; Speaker 2: No you didn't have to.

36
00:01:52.182 --> 00:01:54.358
&gt;&gt; Audience: [LAUGH]

37
00:01:54.358 --> 00:01:55.193
&gt;&gt; Douglas Crockford: So you're probably

38
00:01:55.193 --> 00:01:56.865
wondering when do the good parts start.

39
00:01:56.865 --> 00:01:59.370
I haven't heard any good parts yet.

40
00:01:59.370 --> 00:02:02.750
Functions, functions are the good part and
we'll talk about those in the next hour.

41
00:02:05.130 --> 00:02:10.210
So in JavaScript all values
are objects except null and undefined.

42
00:02:10.210 --> 00:02:13.290
These are what are sometimes
called bottom values.

43
00:02:13.290 --> 00:02:17.111
And there's some debate as to whether
a language should have any bottom values?

44
00:02:17.111 --> 00:02:20.504
There's no debate on the question,
should a language have two bottom values?

45
00:02:20.504 --> 00:02:23.490
The answer is absolutely not,
that doesn't make any sense.

46
00:02:23.490 --> 00:02:24.480
But we have two.

47
00:02:26.280 --> 00:02:30.530
And they act a lot alike but
they don't act exactly alike, so

48
00:02:30.530 --> 00:02:31.469
they're not interchangeable.

49
00:02:32.530 --> 00:02:35.670
But some people use them
interchangeably which is a confusion,

50
00:02:35.670 --> 00:02:38.340
confusion causes bugs, I don't like that.

51
00:02:38.340 --> 00:02:42.960
So I recommend using only one of them and
the one I choose to use

52
00:02:42.960 --> 00:02:47.690
is undefined because that's the one
that the language itself uses, but

53
00:02:47.690 --> 00:02:51.480
both of them are used to represent
values that are not objects.

54
00:02:51.480 --> 00:02:53.900
These are the only values in
the language that are not objects.

55
00:02:55.440 --> 00:02:59.680
So if you try to retrieve a value from one
of these, you're not gonna get anything.

56
00:02:59.680 --> 00:03:02.940
If you try to execute them as functions,
they'll throw exceptions.

57
00:03:04.260 --> 00:03:07.380
They're just used to indicate
the absence or the end of something.

58
00:03:09.300 --> 00:03:12.060
So I recommend using undefined.

59
00:03:13.100 --> 00:03:16.700
Choose undefined because it is
the one that the language itself uses.

60
00:03:16.700 --> 00:03:20.900
So if I'm only gonna use one,
let's use the language as one.

61
00:03:20.900 --> 00:03:23.566
So it's the default value for
variables and parameters.

62
00:03:23.566 --> 00:03:29.760
So if you create a variable but
you don't initialize it,

63
00:03:29.760 --> 00:03:32.890
it actually gets initialized for
you with the undefined value.

64
00:03:34.160 --> 00:03:39.538
And if you have a function and
you don't pass enough arguments in,

65
00:03:39.538 --> 00:03:43.199
the missing parameters will
get bound to undefined.

66
00:03:44.440 --> 00:03:47.760
It's a value of missing
members of objects and arrays.

67
00:03:47.760 --> 00:03:51.830
So he tried to retrieve a property or
an element and it isn't there.

68
00:03:51.830 --> 00:03:54.410
You don't get a runtime warning,
you don't get a compile time warning.

69
00:03:54.410 --> 00:03:58.115
Instead, you get the undefined value
which is actually a very nice thing.

70
00:03:58.115 --> 00:04:01.220
Because it allows you to reflect
on objects without any effort,

71
00:04:01.220 --> 00:04:04.910
you just asked, you got one of those and
if you get a value back and

72
00:04:04.910 --> 00:04:06.640
you got something or
if you didn't, then you didn't.

73
00:04:08.600 --> 00:04:14.140
One thing to watch out for though is that
you can store undefined into an object and

74
00:04:14.140 --> 00:04:16.130
then you can read that undefined back but

75
00:04:16.130 --> 00:04:21.040
you can't easily tell, I'm I getting an
undefined that was stored in the object or

76
00:04:21.040 --> 00:04:24.050
I'm getting an undefined because
it wasn't stored in the object?

77
00:04:24.050 --> 00:04:25.460
They both look the same.

78
00:04:25.460 --> 00:04:27.540
That's a confusion,
I don't like confusion.

79
00:04:29.580 --> 00:04:33.330
There's a type of operator in
JavaScript which will return a string

80
00:04:33.330 --> 00:04:35.139
identifying what the type of something is.

81
00:04:36.420 --> 00:04:40.880
For example, if you pass it an object,
it returns a string object which is great.

82
00:04:40.880 --> 00:04:44.160
You pass it a function, it returns
the word function which is great.

83
00:04:44.160 --> 00:04:49.820
If you pass it an array,
it returns object which is not

84
00:04:49.820 --> 00:04:53.480
technically wrong because everything is
an object but it's certainly not useful.

85
00:04:53.480 --> 00:04:56.550
You'd like it to return array
because that's what it is.

86
00:04:56.550 --> 00:05:01.150
So, but if you pass it no,
it returns object which is just wrong.

87
00:05:02.200 --> 00:05:03.970
There's no excuse for that.

88
00:05:03.970 --> 00:05:06.770
It doesn't make it hard to
detect if something is null

89
00:05:06.770 --> 00:05:10.910
because there's only one null value, so
you can ask, are you triple equal to null?

90
00:05:10.910 --> 00:05:12.460
That's very effective.

91
00:05:12.460 --> 00:05:15.260
The problem is, you're trying to
figure out, are you an object?

92
00:05:15.260 --> 00:05:19.280
Because if you're not an object there are
certain things I don't want to try next.

93
00:05:19.280 --> 00:05:24.296
And this test fails for that,
which is really, really bad.

94
00:05:24.296 --> 00:05:27.960
So we have Array.isArray now,

95
00:05:27.960 --> 00:05:32.172
it was added to the language in ES5.

96
00:05:32.172 --> 00:05:36.691
While it's extremely ugly
looking it does finally allow

97
00:05:36.691 --> 00:05:41.408
us to detect if some value is an array or
not, which is good.

98
00:05:41.408 --> 00:05:44.180
And this is how it is
implemented on older browsers.

99
00:05:46.980 --> 00:05:52.780
JavaScript is a boolish language in
that every value is truthy or falsy.

100
00:05:52.780 --> 00:05:55.670
The falsy values are false,
null, undefined,

101
00:05:55.670 --> 00:05:58.860
the empty string, the number 0, and NaN.

102
00:05:58.860 --> 00:06:01.300
All other values are truthy.

103
00:06:01.300 --> 00:06:05.600
Including the string 0,
the string false, all objects,

104
00:06:05.600 --> 00:06:08.260
all arrays even if they're empty,
all those are truthy.

105
00:06:09.980 --> 00:06:11.460
I think this was a huge mistake.

106
00:06:12.810 --> 00:06:17.360
The purpose of this was to
allow if statements to work

107
00:06:17.360 --> 00:06:20.490
in a way that's similar
to the way C works.

108
00:06:20.490 --> 00:06:24.020
C is not a strongly typed language.

109
00:06:24.020 --> 00:06:29.130
And so it uses 0 to represent
the number 0, and false,

110
00:06:29.130 --> 00:06:33.920
and null and a few other things,

111
00:06:33.920 --> 00:06:39.680
end of strings,
I'm sure there are lots of others.

112
00:06:39.680 --> 00:06:44.340
So the condition of an if
statement in C is 0 or not 0, and

113
00:06:44.340 --> 00:06:49.898
JavaScript wanted to look like that but
it turns out to be a bad idea.

114
00:06:49.898 --> 00:06:56.162
We'll see some examples of that tomorrow.
&gt;&gt; Douglas Crockford: JavaScript

115
00:06:56.162 --> 00:07:00.769
is a loosely typed language in that any of
these types can be stored in any variable

116
00:07:00.769 --> 00:07:03.740
or passed as a parameter to any function.

117
00:07:03.740 --> 00:07:08.340
The language is not untyped because as we
had seen we've got a lot of very specific

118
00:07:08.340 --> 00:07:11.150
types but it's loosely typed.

119
00:07:11.150 --> 00:07:15.480
And I contend this is a good part and
although that statement is very

120
00:07:15.480 --> 00:07:20.620
controversial the prevailing
style in the world is calling for

121
00:07:20.620 --> 00:07:24.000
strong typing and there are really
good arguments for strong typing.

122
00:07:24.000 --> 00:07:29.910
The argument is that strong typing allows
the compiler to find errors very early.

123
00:07:29.910 --> 00:07:35.430
And the earlier we can find errors, the
more valuable that is and that is true.

124
00:07:35.430 --> 00:07:38.330
And so when I first start working
with JavaScript, I was very,

125
00:07:38.330 --> 00:07:41.480
very nervous because this is
a loosely typed language,

126
00:07:41.480 --> 00:07:45.520
any kind of type can be passed in as any
parameter or be stored in any property.

127
00:07:45.520 --> 00:07:50.063
How could you have any confidence
that anything's ever gonna work,

128
00:07:50.063 --> 00:07:53.831
cuz gotta be prepared for
anything at any time was crazy.

129
00:07:53.831 --> 00:07:59.427
But what I found in working with
the language was that to my surprise,

130
00:07:59.427 --> 00:08:03.009
my testing burden did not go up,
all right?

131
00:08:03.009 --> 00:08:06.401
I thought I was gonna have to be
watching for all of these things and

132
00:08:06.401 --> 00:08:10.550
putting in explicit type checks of my own,
and I very rarely ever had to do that.

133
00:08:12.060 --> 00:08:16.160
And in fact, what I found was
that the sorts of bugs that

134
00:08:16.160 --> 00:08:21.310
a type checker can find,
you find instantly anyway if you're doing

135
00:08:21.310 --> 00:08:24.680
even the most trivial level of testing,
those things show up right away.

136
00:08:26.390 --> 00:08:29.300
That type systems provide no help in

137
00:08:29.300 --> 00:08:31.390
finding the bugs that
keep you up at night.

138
00:08:34.050 --> 00:08:39.830
And that you end up doing a lot
less work because in a strongly

139
00:08:39.830 --> 00:08:44.780
typed language you end up spending a lot
of time working against the type system.

140
00:08:44.780 --> 00:08:47.230
There are things you need to do
in order to get your job done and

141
00:08:47.230 --> 00:08:49.550
the type system doesn't want
you doing those things.

142
00:08:49.550 --> 00:08:54.020
And so you have to figure out ways to get
around it and that's a lot of effort.

143
00:08:54.020 --> 00:08:57.980
And any time you cast then that means
the type system is failing you.

144
00:08:59.180 --> 00:09:01.660
And you end up casting way too much.

145
00:09:03.620 --> 00:09:08.030
Also it turns out there is a large class
of errors which are caused by the type

146
00:09:08.030 --> 00:09:08.597
system.

147
00:09:08.597 --> 00:09:11.754
Because the type system is
causing you to circumvent it,

148
00:09:11.754 --> 00:09:15.717
you end up doing a lot of extra work and
some of that work turns into bugs.

149
00:09:15.717 --> 00:09:18.430
And in JavaScript that
tends not to happen.

150
00:09:18.430 --> 00:09:23.650
So I find in JavaScript writing correct
programs is not harder than in Java,

151
00:09:23.650 --> 00:09:24.660
I think it's actually easier.

152
00:09:26.140 --> 00:09:29.340
And you do a lot less work because you're
not managing all the types all the time,

153
00:09:30.530 --> 00:09:31.500
that's my argument.

154
00:09:31.500 --> 00:09:35.010
You might not believe me, and it doesn't
matter if you're writing in JavaScript get

155
00:09:35.010 --> 00:09:36.920
used to it because that's how it works.

156
00:09:39.650 --> 00:09:43.750
So in JavaScript,
objects are are passed by reference

157
00:09:43.750 --> 00:09:46.980
not by value which means
that objects are not copied.

158
00:09:46.980 --> 00:09:51.180
In fact, there is no way, no easy way in
JavaScript to make a copy of an object

159
00:09:52.220 --> 00:09:54.880
which seems like a surprising omission but

160
00:09:54.880 --> 00:09:56.924
in practice I've not
found it to be a problem.

161
00:09:56.924 --> 00:10:02.090
The === operator compares
object references so

162
00:10:02.090 --> 00:10:06.044
it'll give you true only if both
operands are the same object.

163
00:10:06.044 --> 00:10:10.550
There is no easy test for,
are two objects very similar,

164
00:10:11.700 --> 00:10:15.050
containing the same properties,
having the same values?

165
00:10:17.110 --> 00:10:21.320
That again, seems like a strange omission,
but I've not found that to be a problem.

