WEBVTT

1
00:00:00.000 --> 00:00:04.225
[MUSIC]

2
00:00:04.225 --> 00:00:05.800
&gt;&gt; Douglas: When you say we do
some object-oriented programming?

3
00:00:07.480 --> 00:00:08.950
Yeah, all right.

4
00:00:08.950 --> 00:00:10.400
Yeah.

5
00:00:10.400 --> 00:00:12.410
So we're gonna do something
with an object now.

6
00:00:13.520 --> 00:00:17.800
We're gonna write a counter function that
returns an object containing two functions

7
00:00:17.800 --> 00:00:21.970
that implement an up down counter,
hiding the counter.

8
00:00:21.970 --> 00:00:26.600
So we'll call the counter factory and
pass in an initial value,

9
00:00:26.600 --> 00:00:31.330
and it will return an object containing
an up method and a down method, and

10
00:00:31.330 --> 00:00:34.560
when we call up, it will add
one to the value and return it.

11
00:00:34.560 --> 00:00:37.660
When we call down,
it will subtract one from the value and

12
00:00:37.660 --> 00:00:43.788
return it.
&gt;&gt; Douglas: And

13
00:00:43.788 --> 00:00:45.890
I'll give you a hint, no global variables.

14
00:00:45.890 --> 00:00:48.573
No this, none of that crap.
&gt;&gt; Speaker 2: We don't need any of that.

15
00:00:48.573 --> 00:00:50.271
&gt;&gt; Speaker 3: Darn it.

16
00:00:50.271 --> 00:00:52.027
&gt;&gt; Speaker 2: I always use global

17
00:00:52.027 --> 00:00:54.335
variables everywhere.

18
00:00:54.335 --> 00:00:57.821
It's what Ben taught me to do.
&gt;&gt; Speaker 3: I did not teach you to do

19
00:00:57.821 --> 00:01:00.055
that.
&gt;&gt; Speaker 2: What could go- Ben always

20
00:01:00.055 --> 00:01:01.763
says more globals.
&gt;&gt; Speaker 3: It's exactly the opposite of

21
00:01:01.763 --> 00:01:02.282
that.
&gt;&gt; Speaker 2: More

22
00:01:02.282 --> 00:01:07.340
globals.
&gt;&gt; Douglas: So here is counter,

23
00:01:07.340 --> 00:01:12.080
it takes a value, it returns
an object containing two functions.

24
00:01:12.080 --> 00:01:16.520
The first one, the up function,
adds one to the value and returns it.

25
00:01:16.520 --> 00:01:18.340
The other one, the down function,

26
00:01:18.340 --> 00:01:20.750
subtracts one from the value and
returns it.

27
00:01:20.750 --> 00:01:21.940
So who got something that works?

28
00:01:23.350 --> 00:01:23.850
Brilliant.

29
00:01:24.980 --> 00:01:26.350
If you didn't get it, write it down,

30
00:01:26.350 --> 00:01:28.380
cuz you'll want to refer
to this pattern later.

31
00:01:28.380 --> 00:01:31.780
So this is very similar to what we
talked about yesterday, where we've got

32
00:01:31.780 --> 00:01:36.890
two functions inside of a closure
which are both sharing common data.

33
00:01:36.890 --> 00:01:39.300
This is a very simple example of that, but

34
00:01:39.300 --> 00:01:43.190
basically, all object constructors
are gonna follow this pattern.

35
00:01:44.910 --> 00:01:46.000
Any questions about this?

36
00:01:48.210 --> 00:01:49.160
Okay, want to do another one?

37
00:01:50.430 --> 00:01:52.470
So this next one, I promise,

38
00:01:52.470 --> 00:01:55.850
is going to sound much worse
than it actually is, okay?

39
00:01:58.000 --> 00:02:00.940
So, make a revocable function
that takes a binary function and

40
00:02:00.940 --> 00:02:03.970
returns an object containing an invoke
function that can invoke the binary

41
00:02:03.970 --> 00:02:06.950
function and a revoke function
that disables the invoke function.

42
00:02:06.950 --> 00:02:11.230
Okay, so let me explain what's
actually going on here.

43
00:02:11.230 --> 00:02:15.510
This is something that might have some
security properties, and that we might

44
00:02:15.510 --> 00:02:19.290
have some guest code that we allow into
our system, and we want it to be able to

45
00:02:19.290 --> 00:02:24.010
run as long as we want it to, but at any
point, we want to be able to cut it off.

46
00:02:24.010 --> 00:02:27.760
And we don't want to have to rewrite
our existing APIs in order to

47
00:02:27.760 --> 00:02:29.150
accommodate that.

48
00:02:29.150 --> 00:02:32.515
So this is a variation on the limit
function that we wrote earlier.

49
00:02:32.515 --> 00:02:35.330
In fact, you might want to refer to
your implementation of limit when you're

50
00:02:35.330 --> 00:02:35.950
doing this one.

51
00:02:38.040 --> 00:02:42.614
Except in this one, instead of keeping
a count about how many times you get to do

52
00:02:42.614 --> 00:02:46.493
it, we will have a separate
function called revoke, which will,

53
00:02:46.493 --> 00:02:49.430
when we call it,
cause the thing to stop working.

54
00:02:50.930 --> 00:02:55.670
Okay, so we'll call our revocable factory,
we'll pass in any existing function, in

55
00:02:55.670 --> 00:03:01.190
this case, the add function, and it will
return an object containing two functions.

56
00:03:01.190 --> 00:03:05.570
One of them will be the invoke function,
which is the revocable add function.

57
00:03:05.570 --> 00:03:08.470
And we can give that function
to the third party, but

58
00:03:08.470 --> 00:03:11.640
we will hold on to the revoke function for
ourselves.

59
00:03:11.640 --> 00:03:16.890
So the revocable add function
will work just like add until

60
00:03:16.890 --> 00:03:18.520
we call the revoke function.

61
00:03:18.520 --> 00:03:21.732
At that point,
all it does is return undefined.

62
00:03:21.732 --> 00:03:27.299
Everybody clear?
&gt;&gt; Speaker 2: So

63
00:03:27.299 --> 00:03:31.055
it's basically, what we really need,
the dot dot dot arguments and

64
00:03:31.055 --> 00:03:33.366
then [INAUDIBLE].
&gt;&gt; Douglas: Yeah, we want this to work for

65
00:03:33.366 --> 00:03:34.841
all functions, right?
&gt;&gt; Speaker 2: Yeah, and

66
00:03:34.841 --> 00:03:37.081
that only works for.
&gt;&gt; Douglas: For binary.

67
00:03:37.081 --> 00:03:41.796
And actually, anything that works for
binary, probably works for unary,

68
00:03:41.796 --> 00:03:45.922
because we're just gonna pass
undefined as the second argument,

69
00:03:45.922 --> 00:03:47.523
then it gets ignored.
&gt;&gt; Speaker 2: So

70
00:03:47.523 --> 00:03:51.410
[INAUDIBLE] could just plan ahead.
&gt;&gt; Douglas: Yeah, if you knew we never

71
00:03:51.410 --> 00:03:56.528
used more than ten routers, you could
do that, but who wants to do that?

72
00:03:56.528 --> 00:04:01.831
Yeah, it's awful.
&gt;&gt; Speaker 3: But

73
00:04:01.831 --> 00:04:06.206
you could call, if inside,
you could always just call our

74
00:04:06.206 --> 00:04:09.930
[INAUDIBLE] you can pass that wherever?
&gt;&gt; Douglas: You

75
00:04:09.930 --> 00:04:11.010
can.
&gt;&gt; Speaker 3: Okay.

76
00:04:11.010 --> 00:04:12.170
&gt;&gt; Douglas: So you can do that today,

77
00:04:12.170 --> 00:04:15.762
it's just inexcusably ugly, and I don't
want to waste your time with it, so

78
00:04:15.762 --> 00:04:18.204
we're not gonna do that.
&gt;&gt; Speaker 2: [INAUDIBLE] Argument zero,

79
00:04:18.204 --> 00:04:21.629
argument one, argument two, you can't
just pass in the arguments object.

80
00:04:23.470 --> 00:04:24.973
&gt;&gt; Douglas: Actually, you can't, yeah,

81
00:04:24.973 --> 00:04:28.351
which is kind of a problem.
&gt;&gt; Speaker 2: It didn't work for

82
00:04:28.351 --> 00:04:29.764
me that way.

83
00:04:29.764 --> 00:04:32.412
That was my go to,

84
00:04:32.412 --> 00:04:38.250
to try that [INAUDIBLE] Good.
&gt;&gt; Douglas: You probably

85
00:04:38.250 --> 00:04:39.645
did something wrong, which is great.

86
00:04:39.645 --> 00:04:40.866
&gt;&gt; [LAUGH]
&gt;&gt; Douglas: Keep doing

87
00:04:40.866 --> 00:04:41.568
that.
&gt;&gt; Speaker 3: It's

88
00:04:41.568 --> 00:04:43.829
arguments?
&gt;&gt; Douglas: Arguments.

89
00:04:45.600 --> 00:04:47.280
&gt;&gt; Speaker 3: So if you get arguments in

90
00:04:47.280 --> 00:04:52.720
a function, and you call another function
inside of that, passing arguments,

91
00:04:52.720 --> 00:04:57.040
you're passing an array to that function,
you're not passing

92
00:04:57.040 --> 00:05:00.650
each of the arguments in that array.
&gt;&gt; Douglas: Right.

93
00:05:00.650 --> 00:05:01.344
&gt;&gt; Speaker 3: That's why it doesn't work.

94
00:05:01.344 --> 00:05:03.293
&gt;&gt; Douglas: But you could then use apply

95
00:05:03.293 --> 00:05:07.720
to spread it out.
&gt;&gt; Speaker 3: In ES6 or?

96
00:05:07.720 --> 00:05:08.639
&gt;&gt; Douglas: In ES3.

97
00:05:08.639 --> 00:05:09.252
&gt;&gt; Speaker 3: Okay.

98
00:05:09.252 --> 00:05:10.057
&gt;&gt; Douglas: Yeah.

99
00:05:10.057 --> 00:05:12.116
&gt;&gt; Speaker 3: Array.apply [INAUDIBLE].

100
00:05:12.116 --> 00:05:15.972
I'm sorry, [INAUDIBLE] arguments.
&gt;&gt; Douglas: No, unfortunately,

101
00:05:15.972 --> 00:05:17.837
it's Function.apply.

102
00:05:17.837 --> 00:05:21.400
So, we're not doing that.

103
00:05:21.400 --> 00:05:23.080
It's too awful.
&gt;&gt; Speaker 3: That's right,

104
00:05:23.080 --> 00:05:23.930
you showed us yesterday.

105
00:05:23.930 --> 00:05:26.190
And you said it was ugly, so I ignored it.
&gt;&gt; Douglas: Yeah,

106
00:05:26.190 --> 00:05:28.030
it was good that you ignored it.

107
00:05:28.030 --> 00:05:29.460
Okay, we ready for revocable?

108
00:05:30.620 --> 00:05:32.320
So here's revocable.

109
00:05:32.320 --> 00:05:36.740
It takes a binary function and returns
an object containing an invoke method and

110
00:05:36.740 --> 00:05:38.170
a revoke method.

111
00:05:38.170 --> 00:05:43.116
The invoke method looks to
see if binary is undefined.

112
00:05:43.116 --> 00:05:47.550
If it isn't, then it will call it,
passing the first and second argument.

113
00:05:49.070 --> 00:05:51.040
Otherwise, it doesn't do anything and
returns undefined.

114
00:05:52.200 --> 00:05:56.980
Revoke function sets binary to undefined,
thereby disabling the invoke function.

115
00:05:58.140 --> 00:05:59.310
So who's got something that works?

116
00:06:00.460 --> 00:06:01.470
Very good.

117
00:06:01.470 --> 00:06:03.150
Anybody do something different?

118
00:06:04.260 --> 00:06:08.417
Something notable?
&gt;&gt; Speaker 3: I put a variable okay which

119
00:06:08.417 --> 00:06:11.880
I set to false, but it's the same thing.
&gt;&gt; Douglas: That is okay,

120
00:06:11.880 --> 00:06:13.290
yeah.
&gt;&gt; Speaker 3: Thanks.

121
00:06:13.290 --> 00:06:15.944
So, I open this up, so I create.

122
00:06:15.944 --> 00:06:20.270
We made this object, which is in the,

123
00:06:20.270 --> 00:06:26.120
and I look in the console at my object,
and I want to introspect it.

124
00:06:26.120 --> 00:06:27.800
So I expand it.

125
00:06:29.880 --> 00:06:31.830
Where's binary in there?

126
00:06:31.830 --> 00:06:37.500
It's obvious, it's not exposed
publicly as a part of this object,

127
00:06:37.500 --> 00:06:39.833
but it knows about it.
&gt;&gt; Douglas: Right,

128
00:06:39.833 --> 00:06:43.736
binary is hidden in the function
scope of the revocable function, and

129
00:06:43.736 --> 00:06:46.800
is available only through its closure.

130
00:06:46.800 --> 00:06:51.544
And the only functions in the universe who
have access to that closure are invoke and

131
00:06:51.544 --> 00:06:52.097
revoke.

132
00:06:52.097 --> 00:06:58.239
So that's why this is something that
we can build secure systems out of.

133
00:06:58.239 --> 00:07:01.773
You know,
if we were to take your okay flag and

134
00:07:01.773 --> 00:07:07.357
put it in the object itself, then
the attacker could go to the object and

135
00:07:07.357 --> 00:07:09.762
turn it the other way.
&gt;&gt; Speaker 3: Right.

136
00:07:09.762 --> 00:07:11.403
&gt;&gt; Douglas: So that wouldn't accomplish

137
00:07:11.403 --> 00:07:12.820
what we want to do here.
&gt;&gt; Speaker 3: So

138
00:07:12.820 --> 00:07:16.181
we could obviously look at the source,
but you'd obviously, I mean, it's.

139
00:07:16.181 --> 00:07:16.988
&gt;&gt; Douglas: Right, so

140
00:07:16.988 --> 00:07:21.400
we assume that the attacker
can always look at the source.

141
00:07:22.460 --> 00:07:25.230
But they can look at this source and
it doesn't help them, right,

142
00:07:25.230 --> 00:07:30.820
unless they were there at the creation
of the object, they can't get to it.

143
00:07:30.820 --> 00:07:32.772
They can't get to binary.
&gt;&gt; Speaker 2: So

144
00:07:32.772 --> 00:07:36.486
revoke is irrevocable in this case.
&gt;&gt; Douglas: That's right,

145
00:07:36.486 --> 00:07:37.990
this is a one-way trip.

146
00:07:37.990 --> 00:07:41.129
Now, we could design this
to work a different way.

147
00:07:41.129 --> 00:07:45.548
Using his okay variable as an on-off
switch, we could provide a second

148
00:07:45.548 --> 00:07:50.460
function or maybe an argument to
revoke which could reverse it.

149
00:07:50.460 --> 00:07:55.552
But generally, I prefer systems where once
we cut them off, it's off, and we don't

150
00:07:55.552 --> 00:08:00.100
have to worry about something turning
it back on again in an unexpected way.

151
00:08:01.230 --> 00:08:03.735
Yeah?
&gt;&gt; Speaker 4: Since you're not explicitly

152
00:08:03.735 --> 00:08:08.580
returning undefined in the invoke?
&gt;&gt; Douglas: Mm-hm.

153
00:08:08.580 --> 00:08:09.192
&gt;&gt; Speaker 4: Is this a case where you

154
00:08:09.192 --> 00:08:10.870
said, you flip flop on whether
you should return undefined or

155
00:08:10.870 --> 00:08:13.220
not?
&gt;&gt; Douglas: That's right.

156
00:08:13.220 --> 00:08:17.290
I mean, I like, the idea of being
explicit, and I also like not

157
00:08:17.290 --> 00:08:19.576
doing anything I don't have to do.
&gt;&gt; [LAUGH].

158
00:08:19.576 --> 00:08:21.346
&gt;&gt; Speaker 4: Kind of at odds with each

159
00:08:21.346 --> 00:08:23.048
other.
&gt;&gt; Douglas: Yeah, exactly.

160
00:08:23.048 --> 00:08:24.479
There's a real conflict there.

161
00:08:24.479 --> 00:08:27.292
But most of the time,
doing the right thing and

162
00:08:27.292 --> 00:08:30.840
doing the right thing
are obviously the same thing.

163
00:08:30.840 --> 00:08:33.410
This is one of the cases where it isn't so
much.

