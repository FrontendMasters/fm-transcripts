WEBVTT

1
00:00:00.000 --> 00:00:03.901
[MUSIC]

2
00:00:03.901 --> 00:00:06.350
&gt;&gt; Douglas Crockford: You can
get a node by retrieving.

3
00:00:07.440 --> 00:00:12.133
The way I prefer to do it is
get document.getElementById.

4
00:00:12.133 --> 00:00:15.130
You can also get things by name,
by tag name.

5
00:00:15.130 --> 00:00:18.450
You can do CSS queries and
things like that.

6
00:00:18.450 --> 00:00:21.010
There's quite a lot of ways of
getting access to a node now.

7
00:00:23.480 --> 00:00:26.510
Once you have access to a node,
you can manipulate it.

8
00:00:26.510 --> 00:00:30.636
So these are the standard
properties of an image tag.

9
00:00:30.636 --> 00:00:35.250
And if you have access to an image tag,
you can change any of these properties.

10
00:00:35.250 --> 00:00:39.589
The most interesting one to change is
the source if you replace the source with

11
00:00:39.589 --> 00:00:40.600
a different URL.

12
00:00:40.600 --> 00:00:42.350
Then suddenly a different
picture will show up.

13
00:00:44.830 --> 00:00:50.250
And JavaScript provides a very
convenient way of doing that.

14
00:00:50.250 --> 00:00:54.170
You just say node.property name equals
whatever value you want it to have and

15
00:00:54.170 --> 00:00:54.780
it works.

16
00:00:55.960 --> 00:00:58.830
These are the standard
properties of an image tag.

17
00:00:58.830 --> 00:01:01.900
Every browser will have additional
properties that are unique

18
00:01:01.900 --> 00:01:02.640
to that browser.

19
00:01:02.640 --> 00:01:06.293
I recommend stay away from that
stuff because it's a trap.

20
00:01:06.293 --> 00:01:12.556
If you wanna stay to the common part,
so you'll work everywhere.

21
00:01:12.556 --> 00:01:15.092
W3C was not happy about JavaScript,

22
00:01:15.092 --> 00:01:18.410
surviving in the web
after they'd rejected it.

23
00:01:18.410 --> 00:01:20.870
They thought that was gonna be
the end of it but it didn't and

24
00:01:21.990 --> 00:01:25.310
there was a lot more sympathy for
Java at W3C than for JavaScript.

25
00:01:25.310 --> 00:01:27.870
And so
over the years they've been trying to

26
00:01:27.870 --> 00:01:31.660
replace the API with something that
would be more friendly for Java than for

27
00:01:31.660 --> 00:01:36.170
JavaScript even though Java has
never lived in browsers in this way.

28
00:01:36.170 --> 00:01:38.590
So they didn't like the old
school way of doing things.

29
00:01:38.590 --> 00:01:43.663
So they added this one,
we can call get tribute and set tribute.

30
00:01:43.663 --> 00:01:47.026
This form having the obvious advantage,
that's a lot more typing and

31
00:01:47.026 --> 00:01:47.943
people like that.

32
00:01:52.659 --> 00:01:55.540
&gt;&gt; Douglas Crockford: Another thing you
can do when you've got hold of a node is

33
00:01:55.540 --> 00:01:57.010
style it.

34
00:01:57.010 --> 00:01:59.030
So you've got lots of options for styling.

35
00:01:59.030 --> 00:02:02.140
One is you can get at its class name,
which is a misnamed thing.

36
00:02:02.140 --> 00:02:05.170
it should be .class but it's not,

37
00:02:05.170 --> 00:02:09.270
it's called class name even though
it can be several class names.

38
00:02:09.270 --> 00:02:11.650
It's still class name.

39
00:02:11.650 --> 00:02:16.200
More interesting as you can get at style
object and change attributes of the style.

40
00:02:17.730 --> 00:02:20.510
Microsoft added a really nice
thing called currentStyle but

41
00:02:20.510 --> 00:02:24.320
sometimes you want to know what is
the current attribute for something.

42
00:02:24.320 --> 00:02:28.380
I want to know how big something is or
where it is or what color it is currently.

43
00:02:28.380 --> 00:02:29.720
Something like that.

44
00:02:29.720 --> 00:02:33.775
And Microsoft provides a very
nice way of finding that out.

45
00:02:33.775 --> 00:02:37.120
But W3C said,
no that's not the way we wanna go.

46
00:02:37.120 --> 00:02:41.840
Instead we'd rather have you write
document.defaultview.getcomputed style

47
00:02:41.840 --> 00:02:44.630
node get property values style name,
right.

48
00:02:46.250 --> 00:02:48.900
This is obviously a Java API, right.

49
00:02:48.900 --> 00:02:52.280
I mean nobody who knows
JavaScript would write that.

50
00:02:52.280 --> 00:02:56.780
This is clearly designed by somebody who
did not know anything about JavaScript.

51
00:02:56.780 --> 00:03:01.200
And I don't know what happens with people
in the Java world that they wanna write

52
00:03:01.200 --> 00:03:06.670
stuff like this but
that's kind of the way things happen.

53
00:03:06.670 --> 00:03:08.202
So I need to rant for a moment.

54
00:03:08.202 --> 00:03:13.820
So the CSS and the DOM were both
designed about the same time.

55
00:03:15.110 --> 00:03:18.890
And each project was aware of the other.

56
00:03:18.890 --> 00:03:23.322
The guy who designed CSS was aware that
some day programming languages were going

57
00:03:23.322 --> 00:03:26.400
to manipulate style sheets,
not that was a certainty.

58
00:03:27.490 --> 00:03:31.950
And yet he chose to use
the minus sign as a hyphen,

59
00:03:33.380 --> 00:03:37.260
knowing that most of our programming
languages want to do subtraction with it

60
00:03:37.260 --> 00:03:41.090
and that this creates a syntactic
difficulty for all of you.

61
00:03:42.160 --> 00:03:42.850
He did that, anyway.

62
00:03:43.990 --> 00:03:46.590
Meanwhile, at Netscape they're
working on the DOM and

63
00:03:46.590 --> 00:03:49.820
they see what just happened to CSS and
they go.

64
00:03:49.820 --> 00:03:51.820
Okay, what are we gonna do about that?

65
00:03:51.820 --> 00:03:54.750
What they could have said was,
well, that's annoying but

66
00:03:54.750 --> 00:04:00.950
we'll just say you take the brackets and
you put the string in, that's that, so.

67
00:04:00.950 --> 00:04:04.499
You have to type for extra characters but
it was completely compatible.

68
00:04:05.600 --> 00:04:09.970
Or they could have said,
well minus signs are a problem, so

69
00:04:09.970 --> 00:04:11.900
we'll just change them to under bars.

70
00:04:11.900 --> 00:04:15.260
So minimal change, search and
replace config, no.

71
00:04:15.260 --> 00:04:18.123
They went with the least compatible
way of writing these names.

72
00:04:19.861 --> 00:04:21.046
&gt;&gt; Douglas Crockford: And it matters,

73
00:04:21.046 --> 00:04:25.100
cuz you need to be aware of
which space am I in right now?

74
00:04:25.100 --> 00:04:28.960
Am I in CSS space, or am I in DOM space?

75
00:04:28.960 --> 00:04:31.720
And it's really easy to get
confused about where you are and

76
00:04:31.720 --> 00:04:33.880
if you pick the wrong form,
it's total failure.

77
00:04:35.800 --> 00:04:38.547
They could have made
this work like a system.

78
00:04:38.547 --> 00:04:41.873
They could have made this work well for
you and they chose not to and

79
00:04:41.873 --> 00:04:44.491
it's still there and
it's never gonna get fixed.

80
00:04:46.390 --> 00:04:52.760
Anyway, so another thing you can do
with nodes is you can make nodes.

81
00:04:52.760 --> 00:04:54.510
You can make brand new nodes.

82
00:04:54.510 --> 00:04:58.090
So you can call document.createElement,
pass in a tag name like a DIV or

83
00:04:58.090 --> 00:05:00.740
something and you get a new element.

84
00:05:00.740 --> 00:05:03.230
That new element is not visible yet and

85
00:05:03.230 --> 00:05:06.060
it won't be visible until
you paste it into the tree.

86
00:05:06.060 --> 00:05:07.690
We'll do that next.

87
00:05:07.690 --> 00:05:09.190
You can make text nodes the same way.

88
00:05:09.190 --> 00:05:12.940
You pass a string to create text node and
it will make you a text node.

89
00:05:12.940 --> 00:05:15.000
Which you can then attach
to some other node.

90
00:05:16.240 --> 00:05:19.950
Another way you can make nodes is by
cloning nodes that you already have.

91
00:05:19.950 --> 00:05:21.890
A clone is not a perfect copy.

92
00:05:21.890 --> 00:05:25.310
For example a node might have
event handlers on it, but

93
00:05:25.310 --> 00:05:26.870
a cloned node will not.

94
00:05:28.070 --> 00:05:30.030
But otherwise it's pretty similar.

95
00:05:30.030 --> 00:05:31.842
And if you pass true to cloneNode,

96
00:05:31.842 --> 00:05:35.791
then if the node has children,
you'll get clones of the children as well.

97
00:05:38.051 --> 00:05:39.388
&gt;&gt; Douglas Crockford: So
if you wanna make it visible,

98
00:05:39.388 --> 00:05:41.200
you have to stick it into the tree.

99
00:05:41.200 --> 00:05:47.650
So you can call a node and
say appendChild, the new node.

100
00:05:47.650 --> 00:05:51.660
And so the new node becomes
the new last child of that node.

101
00:05:52.700 --> 00:05:54.760
And you can also insert things before and

102
00:05:54.760 --> 00:05:57.840
you can replace a node
with a different node.

103
00:05:59.330 --> 00:06:01.840
And again, this is a Java API.

104
00:06:01.840 --> 00:06:04.460
Because you have to say old twice.

105
00:06:04.460 --> 00:06:08.960
Like I could just say, node,
replace yourself with this.

106
00:06:08.960 --> 00:06:12.830
No, you have to tell the nodes
parent replace that child

107
00:06:12.830 --> 00:06:16.860
with that one in the way find
the parent is with the node itself.

108
00:06:16.860 --> 00:06:18.970
Why do you have to write old twice?

109
00:06:18.970 --> 00:06:20.220
Why did Java people do that?

110
00:06:20.220 --> 00:06:26.747
Anyway, you have to remove children.

111
00:06:26.747 --> 00:06:31.210
And so you can call node.removeChild but
again you don't tell the node to remove

112
00:06:31.210 --> 00:06:36.020
itself, you have to tell the parents
to move it, so you have to do it twice.

113
00:06:36.020 --> 00:06:37.810
There's a particular hazard here for

114
00:06:37.810 --> 00:06:41.140
garbage collection,
if you're on one of the older IE browsers.

115
00:06:41.140 --> 00:06:47.472
So, anybody supporting IE6, 7, 8?

116
00:06:47.472 --> 00:06:49.084
You're breaking my heart.

117
00:06:49.084 --> 00:06:50.205
Really?

118
00:06:50.205 --> 00:06:52.699
&gt;&gt; Speaker 2: Legacy, and it's, yeah.

119
00:06:52.699 --> 00:06:53.347
&gt;&gt; Douglas Crockford: Okay, so

120
00:06:53.347 --> 00:06:57.450
I was hoping I wouldn't have
to say this anymore but I do.

121
00:06:57.450 --> 00:07:01.840
So there is a design error in IE.

122
00:07:01.840 --> 00:07:05.334
That if you attach a event
handler to a node,

123
00:07:05.334 --> 00:07:08.740
that node will not get garbage collected.

124
00:07:08.740 --> 00:07:13.024
And the event handler and everything that
it's holding onto will not get garbage

125
00:07:13.024 --> 00:07:15.867
collected even if you remove
that node from the tree.

126
00:07:15.867 --> 00:07:19.973
So, the requirement is that you have to
remove all of the event handlers from

127
00:07:19.973 --> 00:07:23.570
the node before you remove
the node from the tree.

128
00:07:23.570 --> 00:07:29.840
Which is too much to ask of anybody but
that's what you have to do.

129
00:07:29.840 --> 00:07:33.530
It was identified in IE6, it was supposed
to be fixed in IE7, and it wasn't.

130
00:07:33.530 --> 00:07:35.990
It was supposed to be fixed in IE8 and
it wasn't.

131
00:07:35.990 --> 00:07:37.900
I believe it finally did get fixed in IE9.

132
00:07:41.613 --> 00:07:45.290
&gt;&gt; Douglas Crockford: So sometimes what
you want to do is take a fragment of HTML

133
00:07:45.290 --> 00:07:48.904
text and incorporate that
into the document somehow.

134
00:07:48.904 --> 00:07:53.430
And W3C in their API provided
no good way to do that.

135
00:07:53.430 --> 00:07:58.180
Their model was, you would write
an XML parser in JavaScript.

136
00:07:58.180 --> 00:08:01.920
And have it parse the text,
and then you would

137
00:08:01.920 --> 00:08:05.810
call all the methods that I just showed
you and have it build the structure.

138
00:08:07.270 --> 00:08:11.100
Microsoft said, no that's way too much
work, so they came up with a property

139
00:08:11.100 --> 00:08:14.209
of a node called innerHTML,
which is a terrible name.

140
00:08:15.640 --> 00:08:16.570
But it works.

141
00:08:16.570 --> 00:08:22.070
So, what you do is your assign an HTML
text fragment to that and it will parse it

142
00:08:22.070 --> 00:08:28.370
and turn it into a tree and stick it into
the document, do all of that, very nice.

143
00:08:29.780 --> 00:08:31.556
Unfortunately, it's a security hazard.

144
00:08:31.556 --> 00:08:36.583
Any time you have any manipulation of HTML
text, particularly by concatenation but

145
00:08:36.583 --> 00:08:42.060
also by templating, there is a good
chance that an attacker can exploit that.

146
00:08:42.060 --> 00:08:44.660
So you need to be really,
really cautious with this stuff.

147
00:08:47.970 --> 00:08:49.350
So which way is better?

148
00:08:49.350 --> 00:08:53.520
Is it better to build or clone elements
and append them to the document or

149
00:08:53.520 --> 00:08:57.009
is it better to compile in HTML text and
using HTML to realize it.

150
00:08:58.110 --> 00:09:02.050
Generally, these sorts of questions
I want to answer in terms of,

151
00:09:02.050 --> 00:09:04.330
what gives you a cleaner code and
better maintenance?

152
00:09:04.330 --> 00:09:08.680
Now, what best matches the way
you make the application

153
00:09:08.680 --> 00:09:12.360
that you should only favor performance
in cases where it really matters?

154
00:09:12.360 --> 00:09:16.270
In the cases where it really matters,
you wanna use in our HTML.

155
00:09:16.270 --> 00:09:20.100
It's one of the few things that browsers
are really good at is parsing HTML.

156
00:09:20.100 --> 00:09:22.490
And they can do that really quickly and

157
00:09:22.490 --> 00:09:26.000
they can get the whole thing
done in one transaction.

158
00:09:26.000 --> 00:09:27.200
Whereas messing with the DOM,

159
00:09:27.200 --> 00:09:30.300
every time you touch the DOM you're
gonna pay a big time penalty.

