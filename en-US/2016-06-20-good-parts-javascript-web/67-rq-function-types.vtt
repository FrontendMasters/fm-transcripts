WEBVTT

1
00:00:00.000 --> 00:00:03.667
[MUSIC]

2
00:00:03.667 --> 00:00:06.990
&gt;&gt; Douglas: RQ has four types of
functions in it and if you can manage

3
00:00:06.990 --> 00:00:11.750
these four types of functions then
it's it's pretty easy to use.

4
00:00:11.750 --> 00:00:16.210
We have requestor functions, which
are functions that can execute a request.

5
00:00:17.220 --> 00:00:21.120
We've got callbacks, which are
continuation functions that are passed to

6
00:00:21.120 --> 00:00:26.300
requestors that's how
requester returns its result.

7
00:00:26.300 --> 00:00:29.780
We have factories, which are like
the factories you've been making which

8
00:00:29.780 --> 00:00:33.735
make requestor functions,
they act as a convenience.

9
00:00:33.735 --> 00:00:37.492
And in fact the four functions that
I've shown you are all factories and

10
00:00:37.492 --> 00:00:41.499
then cancel functions that cancel can
be returned by a requestor to cancel or

11
00:00:41.499 --> 00:00:42.070
request.

12
00:00:44.530 --> 00:00:47.250
A callback function takes two parameters,

13
00:00:47.250 --> 00:00:49.750
a success parameter and
a failure parameters.

14
00:00:49.750 --> 00:00:53.600
If success is undefined then it fails and

15
00:00:53.600 --> 00:00:58.700
the failure is undefined when it succeeds
and there's just one callback in

16
00:00:58.700 --> 00:01:03.210
promises for example will be two callbacks
one for success, one for failure.

17
00:01:03.210 --> 00:01:04.890
I think it's easier if you just have one.

18
00:01:06.810 --> 00:01:11.060
Than a requester function will take a call
back and it can optionally also take

19
00:01:11.060 --> 00:01:16.150
a value and that's how a sequence will
move results from one step to the next.

20
00:01:17.240 --> 00:01:20.870
A requestor function can return
a cancel function which is used for

21
00:01:20.870 --> 00:01:25.369
cancellation and
factories make requestors.

22
00:01:26.780 --> 00:01:29.333
That's the relationship
of the four kinds of

23
00:01:29.333 --> 00:01:35.090
functions.
&gt;&gt; Douglas: Let's look at an example.

24
00:01:35.090 --> 00:01:41.520
This is the identity requestor this is
the simplest possible requestor It will

25
00:01:41.520 --> 00:01:46.690
receive a value and it will then send the
value to the next thing in the sequence.

26
00:01:46.690 --> 00:01:49.930
If you put this in the middle of
a sequence, it's a do nothing it

27
00:01:49.930 --> 00:01:54.610
will just take whatever's going on and
give it to the next one.

28
00:01:54.610 --> 00:01:58.962
You never do that but
this is the model for the simplest form.

29
00:02:07.670 --> 00:02:09.799
&gt;&gt; Douglas: We can wrap those things or,

30
00:02:09.799 --> 00:02:14.238
I'm sorry, this is the fullname
request this one receives

31
00:02:14.238 --> 00:02:19.034
an object containing parts of names and
we'll concatenate them

32
00:02:19.034 --> 00:02:23.680
together to make a name and
then deliver that to the callback.

33
00:02:25.254 --> 00:02:27.700
I could add this as a processing step for
example.

34
00:02:29.830 --> 00:02:35.370
And we can write functions
which will automate that for

35
00:02:35.370 --> 00:02:40.490
us, so request arise is similar to
functions that you've been writing.

36
00:02:40.490 --> 00:02:46.660
It will produce a requestor that
will call some ordinary function.

37
00:02:47.690 --> 00:02:50.029
We can take any existing function and

38
00:02:50.029 --> 00:02:54.708
turn it into a requestor which could
reduce the amount of work you have to do

39
00:02:54.708 --> 00:03:00.190
in transiting to RQ.
&gt;&gt; Douglas: This is a Delay Requestor.

40
00:03:00.190 --> 00:03:05.040
This is the simplest real time thing.

41
00:03:05.040 --> 00:03:08.450
You would never put a delay
into a server application.

42
00:03:08.450 --> 00:03:11.910
What you would do in a real situation is
instead of calling setTimeout, you're

43
00:03:11.910 --> 00:03:16.980
going to send a message to some service
and instead of calling clearTimeout

44
00:03:16.980 --> 00:03:21.240
you would send a message probably to the
same service telling it to please stop.

45
00:03:22.990 --> 00:03:27.330
You just make the substitution but if
you were to take the delay requestor and

46
00:03:27.330 --> 00:03:32.380
put it in a sequence, the sequence will
run exactly the same it will just take

47
00:03:32.380 --> 00:03:35.290
longer but
it will take longer without blocking.

48
00:03:38.240 --> 00:03:41.830
If then this is the Delay Factory.

49
00:03:43.200 --> 00:03:47.000
It's this code is the delay
requestor except the factory

50
00:03:47.000 --> 00:03:51.074
is providing the milliseconds value.
&gt;&gt; Speaker 2: These are all

51
00:03:51.074 --> 00:03:53.731
part of RQ?
&gt;&gt; Douglas: No these are examples of how

52
00:03:53.731 --> 00:03:56.824
you could use RQ.
&gt;&gt; Speaker 2: Things that you put in there

53
00:03:56.824 --> 00:03:58.422
okay.
&gt;&gt; Douglas: Now know that this code is.

54
00:03:58.422 --> 00:04:00.855
&gt;&gt; [CROSSTALK]

55
00:04:00.855 --> 00:04:02.108
&gt;&gt; Douglas: Request.

56
00:04:06.234 --> 00:04:08.634
&gt;&gt; Douglas: Then this is a factory for

57
00:04:08.634 --> 00:04:10.770
reading files.

58
00:04:10.770 --> 00:04:15.290
This factory will produce
a requestor which you can then

59
00:04:15.290 --> 00:04:20.020
put in a list which will
then read files for you and

60
00:04:20.020 --> 00:04:23.520
this one is wrapping the node file system.

61
00:04:26.760 --> 00:04:30.830
This is the widget that was in
the demo that I showed you earlier.

62
00:04:30.830 --> 00:04:37.140
This is all HTML crap, so
I'm not gonna bother you with that but

63
00:04:37.140 --> 00:04:40.090
and I did it this way cause I didn't
want to have to depend on any one

64
00:04:40.090 --> 00:04:44.190
library because if I chose a library
that's not everybody's favorite, and

65
00:04:44.190 --> 00:04:49.320
it turns out everybody is
not somebody's favorite so

66
00:04:49.320 --> 00:04:52.960
it's just, so it's awful.

67
00:04:52.960 --> 00:04:58.565
But the interesting features here
are that this is the quick handler or

68
00:04:58.565 --> 00:05:03.220
the success handler, so
when I clicked on yes on success,

69
00:05:03.220 --> 00:05:07.020
I'd changed the color of
the widget to green and

70
00:05:07.020 --> 00:05:12.530
I called the callback to let it know
that it finished successfully and

71
00:05:12.530 --> 00:05:18.515
on the failure side was similar except
I set the background color to pink and

72
00:05:18.515 --> 00:05:24.025
success is undefined now to indicate
that we have a failure result and

73
00:05:24.025 --> 00:05:28.585
in the case of cancellation,
I just set the background to

74
00:05:28.585 --> 00:05:33.284
gray.
&gt;&gt; Speaker 2: Why'd you reverse

75
00:05:33.284 --> 00:05:37.249
your success fillers conviction node?
&gt;&gt; Douglas: Because node got it

76
00:05:37.249 --> 00:05:37.942
wrong.
&gt;&gt; Speaker 2: Because it got it

77
00:05:37.942 --> 00:05:38.538
wrong?
&gt;&gt; Douglas: Yeah

78
00:05:38.538 --> 00:05:40.493
&gt;&gt; Speaker 2: Okay, I agree that it seemed

79
00:05:40.493 --> 00:05:45.054
really weird but now you start
to use to hire people who do it

80
00:05:45.054 --> 00:05:48.240
the right way it seems weird.
&gt;&gt; Douglas: Yeah, exactly and I know I

81
00:05:48.240 --> 00:05:51.979
mentioned this in the hazard, doing things
right in a system that does things wrong.

82
00:05:51.979 --> 00:05:52.527
&gt;&gt; [LAUGH]

83
00:05:52.527 --> 00:05:53.756
&gt;&gt; Douglas: It's going to, yeah, and

84
00:05:53.756 --> 00:05:54.670
I understand that.

85
00:05:54.670 --> 00:05:56.160
I apologize for it.
&gt;&gt; Speaker 2: Okay.

86
00:05:56.160 --> 00:05:57.210
&gt;&gt; Douglas: I just couldn't bring myself

87
00:05:57.210 --> 00:05:57.890
to do it the wrong way.

