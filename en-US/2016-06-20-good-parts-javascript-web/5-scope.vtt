WEBVTT

1
00:00:00.000 --> 00:00:04.238
[MUSIC]

2
00:00:04.238 --> 00:00:07.218
&gt;&gt; Douglas Crockford: Scope is one of the
most important inventions in programming.

3
00:00:07.218 --> 00:00:10.180
We got it from ALGOL 60.

4
00:00:10.180 --> 00:00:14.451
Almost all modern languages have
block scope, JavaScript doesn't.

5
00:00:14.451 --> 00:00:18.908
JavaScript only has functions scope,
which turns out it's not a bad thing.

6
00:00:18.908 --> 00:00:22.010
That function scope is sufficient for
writing good programs.

7
00:00:22.010 --> 00:00:27.725
The problem is that most programmers who
are writing in JavaScript were trained

8
00:00:27.725 --> 00:00:33.030
in Java or C or other C-ish languages,
and expected to have block scope.

9
00:00:34.190 --> 00:00:38.582
And the rules about where you declare
variables are different in block scope

10
00:00:38.582 --> 00:00:41.265
languages versus function scope languages.

11
00:00:41.265 --> 00:00:44.910
And that confusion can cause errors.

12
00:00:44.910 --> 00:00:48.343
And this is because of the crazy
way that the var statement works.

13
00:00:48.343 --> 00:00:53.100
We'll look more at var this afternoon.

14
00:00:53.100 --> 00:00:57.551
So because of this craziness, I recommend
declare all of your variables at the top

15
00:00:57.551 --> 00:01:01.820
of the function because that is where
JavaScript actually will declare them.

16
00:01:01.820 --> 00:01:06.549
And so if you put your declarations there,
that increases the likelihood that who is

17
00:01:06.549 --> 00:01:10.610
ever reading your program will correctly
understand what the program is

18
00:01:10.610 --> 00:01:15.220
doing.
&gt;&gt; Douglas Crockford: I find the place

19
00:01:15.220 --> 00:01:20.100
that gets people the most confused is
in the induction variable of the for

20
00:01:20.100 --> 00:01:20.983
statement.

21
00:01:20.983 --> 00:01:23.950
They really want to save our I there.

22
00:01:23.950 --> 00:01:25.680
And I recommend no,
don't even do it there.

23
00:01:25.680 --> 00:01:28.330
Move the bar I to the top of the function.

24
00:01:28.330 --> 00:01:32.913
And they get really upset, and
they start screaming and they say, but

25
00:01:32.913 --> 00:01:35.330
that's not how you write it in Java.

26
00:01:35.330 --> 00:01:40.143
And I say,
write in the language you're writing in.

27
00:01:40.143 --> 00:01:42.580
That Java is a different language.

28
00:01:42.580 --> 00:01:43.797
They look similar but

29
00:01:43.797 --> 00:01:47.320
it's a different language with
a different set of bad parts.

30
00:01:47.320 --> 00:01:51.843
In JavaScript,
you don't wanna be doing that because it

31
00:01:51.843 --> 00:01:54.870
doesn't do what you imagine it does.

32
00:01:54.870 --> 00:02:02.600
In EX6, which was published in June of
this year by the ECMA General Assembly.

33
00:02:02.600 --> 00:02:07.669
There's now a let statement in JavaScript
which is now starting to find its

34
00:02:07.669 --> 00:02:12.819
way into implementations and when that
becomes totally ubiquitous, I will

35
00:02:12.819 --> 00:02:18.550
recommend stop using var, use let from now
on because let will respect block scope.

36
00:02:18.550 --> 00:02:26.547
Unless your code has to run on IE 6
because let is a syntax error on IE 6 and

37
00:02:26.547 --> 00:02:31.660
your code won't ever run or
in IE 7 or on IE 8 or

38
00:02:31.660 --> 00:02:38.083
IE 9 or IE 10 or IE 11, but
if you have to run on Edge 2 or

39
00:02:38.083 --> 00:02:42.700
whatever the next one is gonna be called.

40
00:02:42.700 --> 00:02:43.778
Yeah.

41
00:02:43.778 --> 00:02:45.866
Let.
Otherwise,

42
00:02:45.866 --> 00:02:50.273
keep using var.
&gt;&gt; Speaker 2: [LAUGH] Does the current

43
00:02:50.273 --> 00:02:54.310
Edge allow let?
&gt;&gt; Douglas Crockford: I don't know.

44
00:02:54.310 --> 00:02:54.846
&gt;&gt; Speaker 2: Okay.

45
00:02:54.846 --> 00:02:55.672
&gt;&gt; Douglas Crockford: It might.

46
00:02:55.672 --> 00:02:59.167
I don't know.
&gt;&gt; Speaker 2: We'll all be good in 2016,

47
00:02:59.167 --> 00:03:02.134
because Microsoft's dropping support

48
00:03:02.134 --> 00:03:04.699
for all those IE browsers.
&gt;&gt; Douglas Crockford: I know your

49
00:03:04.699 --> 00:03:06.846
customers will be using these browsers.

50
00:03:06.846 --> 00:03:08.459
Yeah.
Microsoft said we're not supporting you

51
00:03:08.459 --> 00:03:11.278
guys anymore but that doesn't mean
that the world's gonna stop using it.

52
00:03:11.278 --> 00:03:16.185
So we're gonna be stuck with IE for
a while longer, I'm afraid.

53
00:03:16.185 --> 00:03:20.989
So global variables are evil in all
languages they caused coupling of things,

54
00:03:20.989 --> 00:03:25.590
and accidental collisions and
security hazards and all sorts of badness.

55
00:03:25.590 --> 00:03:26.984
And unfortunately,

56
00:03:26.984 --> 00:03:32.018
in the browser the use of global variables
is required because there is no kind

57
00:03:32.018 --> 00:03:36.754
of linkage mechanism that allows one
compilation unit to find another.

58
00:03:36.754 --> 00:03:41.130
They just all share a common
global space which is crazy.

59
00:03:41.130 --> 00:03:46.155
So because of that I recommend in
browser applications use as few global

60
00:03:46.155 --> 00:03:51.598
variables as possible and when you do,
name them all in uppercase because you

61
00:03:51.598 --> 00:03:56.983
want them to really stand out as something
that is dangerous and important.

62
00:03:56.983 --> 00:04:03.110
JavaScript has a new prefix that was
modeled after the C++ and Java new prefix.

63
00:04:03.110 --> 00:04:08.230
I don't recommend using it ever but
because one of the hazards with it is that

64
00:04:08.230 --> 00:04:13.190
if you forget to put the new prefix on
the front of a constructor function,

65
00:04:13.190 --> 00:04:17.755
instead of creating a new object
it will clobber global variables.

66
00:04:17.755 --> 00:04:22.744
And happen to have the same names
as the instance variables you're

67
00:04:22.744 --> 00:04:25.864
trying to initialize which is awful, and

68
00:04:25.864 --> 00:04:31.226
there's no run time warning no
compile time warning it's just awful.

69
00:04:31.226 --> 00:04:35.812
So because of that, we have a convention
in JavaScript that constructor functions

70
00:04:35.812 --> 00:04:37.842
should be named with InitialCaps and

71
00:04:37.842 --> 00:04:40.800
nothing else should ever
be named with InitialCaps.

72
00:04:40.800 --> 00:04:46.035
This is the only clue we have as
to what requires a new prefix and

73
00:04:46.035 --> 00:04:51.280
what doesn't.
&gt;&gt; Douglas Crockford: This is

74
00:04:51.280 --> 00:04:56.540
something which is allowed in JavaScript
but it doesn't mean what people expect.

75
00:04:56.540 --> 00:04:59.613
So this approach appears
to do with it does,

76
00:04:59.613 --> 00:05:04.610
it's gonna create two variables a and
b and initialize them both to 0.

77
00:05:04.610 --> 00:05:08.685
What it does instead is,
it initializes b to 0 and

78
00:05:08.685 --> 00:05:13.923
creates a which also become 0, but
this one will not be a locally

79
00:05:13.923 --> 00:05:18.398
scoped variable,
this one will be a global variable.

80
00:05:18.398 --> 00:05:23.325
One of the big design errors in JavaScript
is, if you do not explicitly declare

81
00:05:23.325 --> 00:05:27.876
a variable in a function JavaScript
assumes that you intended for it to be

82
00:05:27.876 --> 00:05:33.024
a global variable which is something that
was done intentionally to make it easier

83
00:05:33.024 --> 00:05:37.980
for the beginners because often they
didn't know what variables were at all.

84
00:05:37.980 --> 00:05:40.206
But it's makes it much harder for

85
00:05:40.206 --> 00:05:44.977
you because if you're not really careful,
any of your variables could

86
00:05:44.977 --> 00:05:49.522
turn into global variables where
they could easily get stepped on.

87
00:05:49.522 --> 00:05:54.210
So again, recommend which one of these
you mean and write that instead.

88
00:05:54.210 --> 00:05:56.022
Write in a way that-
&gt;&gt; Speaker 2: Is it the same way you can

89
00:05:56.022 --> 00:05:59.860
declare multiple variables on
a range var a comma b comma c?

90
00:05:59.860 --> 00:06:00.681
&gt;&gt; Douglas Crockford: Yeah

91
00:06:00.681 --> 00:06:02.283
&gt;&gt; Speaker 2: Does b and c all become

92
00:06:02.283 --> 00:06:05.121
global valuables if you do that?
&gt;&gt; Douglas Crockford: No,

93
00:06:05.121 --> 00:06:07.420
in this kind of form you're okay.

94
00:06:07.420 --> 00:06:09.447
The problem is if you
assignment to do that.

95
00:06:09.447 --> 00:06:10.848
&gt;&gt; Speaker 2: Okay,

96
00:06:10.848 --> 00:06:14.924
okay.
&gt;&gt; Douglas Crockford: So, write in a way

97
00:06:14.924 --> 00:06:19.854
that clearly communicates your intent.
&gt;&gt; Douglas Crockford: This is another one

98
00:06:19.854 --> 00:06:24.705
of Thompson's, so
the the b language was modeled after BCPL,

99
00:06:24.705 --> 00:06:27.830
which was a brilliant little language.

100
00:06:27.830 --> 00:06:31.392
BCPL was the first curly brace language.

101
00:06:31.392 --> 00:06:34.377
And BCPL got its if statement right,

102
00:06:34.377 --> 00:06:38.720
that the parens around
the condition were optional.

103
00:06:38.720 --> 00:06:42.862
And the curly braces around
the consequence were required.

104
00:06:42.862 --> 00:06:43.694
Thompson reversed that.

105
00:06:43.694 --> 00:06:49.110
Thompson made the parents around
the condition required and

106
00:06:49.110 --> 00:06:53.792
the curly braces around
the consequence optional.

107
00:06:53.792 --> 00:06:58.928
Because that looked more like Fortran
which was more in the style of the day.

108
00:06:58.928 --> 00:07:04.655
So as result, this statement appears
to do with this one does but

109
00:07:04.655 --> 00:07:11.780
actually does with this one does,
that it's going to call c unconditionally.

110
00:07:11.780 --> 00:07:16.033
Or someone reading the statement
could easily think that c

111
00:07:16.033 --> 00:07:20.130
is only gonna be called conditionally,
that's a bug.

112
00:07:20.130 --> 00:07:24.924
And so because of this, I recommend always
put the curly braces in every time,

113
00:07:24.924 --> 00:07:28.481
on every if, on every else,
on every while, on ever for,

114
00:07:28.481 --> 00:07:30.680
every time put the curly braces in.

115
00:07:30.680 --> 00:07:35.654
It's just two characters and it's done.

116
00:07:35.654 --> 00:07:41.904
And what that does is for very low cost,
it makes your program much more resilient,

117
00:07:41.904 --> 00:07:47.462
that means that someone else is gonna
come in and add to your if statement.

118
00:07:47.462 --> 00:07:50.997
They're gonna have a much greater
likelihood of being able to do

119
00:07:50.997 --> 00:07:55.055
that without introducing her into it
which is a really good thing and if you

120
00:07:55.055 --> 00:07:59.590
are leaving the curly braces out, you
are setting your coworkers up for failure.

121
00:07:59.590 --> 00:08:03.480
Which is inexcusable and unprofessional.

122
00:08:03.480 --> 00:08:07.782
So always put them in, and
I hear from people all the time but

123
00:08:07.782 --> 00:08:11.500
you have to go so hard,
it's just two characters.

124
00:08:11.500 --> 00:08:16.110
It's just two lousy characters and
they make your program so much better.

125
00:08:16.110 --> 00:08:20.055
That as our processes become more agile,
our coding must be more resilient.

126
00:08:20.055 --> 00:08:22.860
Cuz our programs are never finished,
right?

127
00:08:22.860 --> 00:08:27.166
They're always going to be
constant states of improvement and

128
00:08:27.166 --> 00:08:28.880
we need to code that way.

129
00:08:28.880 --> 00:08:33.320
Code our programs so that they
are more easily improved over time.

