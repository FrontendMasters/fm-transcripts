WEBVTT

1
00:00:00.000 --> 00:00:04.081
[MUSIC]

2
00:00:04.081 --> 00:00:07.331
&gt;&gt; Douglas: HTML was not state of the art
when it was introduced in the late 20th

3
00:00:07.331 --> 00:00:07.850
century.

4
00:00:07.850 --> 00:00:11.100
It was intended for simple document
viewers it was not intended to be

5
00:00:11.100 --> 00:00:13.910
an application delivery platform.

6
00:00:13.910 --> 00:00:18.380
We insisted on using it as an application
delivery platform because we needed one

7
00:00:18.380 --> 00:00:22.220
and that was the best thing available,
so we used it.

8
00:00:22.220 --> 00:00:24.515
But it was not well suited
to what we wanted to do.

9
00:00:24.515 --> 00:00:26.702
A lot of people looked at
it in the beginning and

10
00:00:26.702 --> 00:00:29.700
thought it didn't have what it takes,
and they were right.

11
00:00:29.700 --> 00:00:31.170
But we went ahead and did it anyway.

12
00:00:34.020 --> 00:00:39.100
So since then, the web standards were
grown from a naive hypertext system

13
00:00:39.100 --> 00:00:42.210
under intense highly unstable
competitive pressure.

14
00:00:42.210 --> 00:00:46.110
As Netscape and Microsoft attempted to
destroy each other by manipulating web

15
00:00:46.110 --> 00:00:51.880
standards and it wasn't designed
to do all of this Ajax stuff.

16
00:00:51.880 --> 00:00:56.793
Its success is due to a lot of very
clever people who found ways to make it

17
00:00:56.793 --> 00:00:59.559
work despite its design limitations.

18
00:00:59.559 --> 00:01:02.730
HTML was a huge improvement over SGML.

19
00:01:04.130 --> 00:01:07.320
Primarily in that it was much a simpler
anytime you take something that's

20
00:01:07.320 --> 00:01:08.140
too complex and

21
00:01:08.140 --> 00:01:12.190
turn into something it's simple,
get generally are making it better.

22
00:01:12.190 --> 00:01:14.480
Unfortunately, they also
made it more resilient.

23
00:01:14.480 --> 00:01:21.660
One of the rules in SGML was if
you don't recognize the tag then

24
00:01:21.660 --> 00:01:26.300
total failure, nothing happens and they
thought that was too much for the web.

25
00:01:26.300 --> 00:01:30.120
So instead on the web,
the rule is if you see a tag and

26
00:01:30.120 --> 00:01:35.200
you don't recognize it, ignore it and
keep parsing and it works.

27
00:01:35.200 --> 00:01:39.480
And that's actually been good for the web
because it meant that we could upgrade.

28
00:01:39.480 --> 00:01:43.000
We could have forward and backward
compatibility because the browsers would

29
00:01:43.000 --> 00:01:48.240
be ignoring the differences as they
enter and leave the standards.

30
00:01:48.240 --> 00:01:53.580
Unfortunately the dark side of that
is that there were, maybe still are,

31
00:01:53.580 --> 00:01:57.600
incompetent web masters who
could not correctly write HTML.

32
00:01:57.600 --> 00:02:00.520
And the browsers would do heroic
stuff to try to make sense

33
00:02:00.520 --> 00:02:02.430
out of the stuff that they are writing.

34
00:02:02.430 --> 00:02:06.930
Which turned into security exploits
which we'll talk about on the third day.

35
00:02:08.610 --> 00:02:11.890
So the original formation of HTML

36
00:02:11.890 --> 00:02:14.379
authors had virtually no
control over presentation.

37
00:02:16.290 --> 00:02:19.650
And the thing didn't anticipate
applications beyond simple document

38
00:02:19.650 --> 00:02:22.536
retrieval, which is a very small
part of what we're doing now.

39
00:02:22.536 --> 00:02:27.190
It's not internally self-consistent.

40
00:02:27.190 --> 00:02:30.660
For example,
it provides two ways of writing outlines

41
00:02:30.660 --> 00:02:35.169
one is nested one is not,
it's not consistent.

42
00:02:36.830 --> 00:02:40.460
And the thing that we call a web
page is not a page, it's a scroll.

43
00:02:41.780 --> 00:02:45.330
I'm hoping someday we invent pages,
cuz pages are great.

44
00:02:45.330 --> 00:02:49.220
Pages were a big step forward
in the march of civilization,

45
00:02:49.220 --> 00:02:53.240
maybe someday the web
will catch up to that.

46
00:02:53.240 --> 00:02:57.160
So the SGML community hated HTML,
they thought it was an abomination.

47
00:02:57.160 --> 00:02:59.090
They did not like the way
it was simplified and

48
00:02:59.090 --> 00:03:02.650
even more than that they did not like the
way it was so much more popular than SGML.

49
00:03:03.740 --> 00:03:07.260
So eventually they took over W3C and

50
00:03:07.260 --> 00:03:09.630
started changing things to
be more to their liking.

51
00:03:09.630 --> 00:03:13.990
For example, they changed the way p
worked, p had originally been a separator,

52
00:03:13.990 --> 00:03:15.270
they turned it into a container.

53
00:03:16.640 --> 00:03:20.550
They started the thing
about semantic markup which

54
00:03:20.550 --> 00:03:25.310
turned out to be a colossal waste of time
and they also created the XML Fiasco.

55
00:03:25.310 --> 00:03:30.440
The idea was that they would create XML,
which would be the successor of SGML.

56
00:03:31.680 --> 00:03:35.300
Which would be used as the new
document format replacing HTML and

57
00:03:35.300 --> 00:03:40.075
be used as the world's data interchange
format, it failed at both of those things.

58
00:03:40.075 --> 00:03:43.753
HTML it turned out refused to die and

59
00:03:43.753 --> 00:03:48.045
it is still the web's document format and

60
00:03:48.045 --> 00:03:52.214
the world's data interchange format is

61
00:03:52.214 --> 00:03:57.070
Jason.
&gt;&gt; Speaker 2: But you said

62
00:03:57.070 --> 00:04:01.420
you can talk about mythical semantics.
&gt;&gt; Douglas: Not, I am not

63
00:04:01.420 --> 00:04:03.530
to be talking about semantic markup.
&gt;&gt; Speaker 2: Okay.

64
00:04:04.980 --> 00:04:05.780
&gt;&gt; Douglas: You'll have to find someone

65
00:04:05.780 --> 00:04:06.749
else to tell about that.
&gt;&gt; Speaker 2: No,

66
00:04:06.749 --> 00:04:10.520
I'm curious as to why you.
&gt;&gt; Douglas: It didn't pay off,

67
00:04:10.520 --> 00:04:13.688
we spent a lot of time on it and

68
00:04:13.688 --> 00:04:17.743
didn't get anything for it.
&gt;&gt; Speaker 2: You know,

69
00:04:17.743 --> 00:04:22.957
the only folks that we run into that
like it are people who have disabilities

70
00:04:22.957 --> 00:04:28.007
who want the semantic markup to provide
some extra bit of information for

71
00:04:28.007 --> 00:04:29.535
them.
&gt;&gt; Douglas: I have a lot of sympathy for

72
00:04:29.535 --> 00:04:31.685
people with disabilities who
are trying to use the web,

73
00:04:31.685 --> 00:04:36.042
I don't think that was the solution.
&gt;&gt; Douglas: But

74
00:04:36.042 --> 00:04:40.596
I can understand being desperate enough
that compared to what the web delivers

75
00:04:40.596 --> 00:04:45.070
that anything else might look
to be better than what you got.

76
00:04:45.070 --> 00:04:49.030
I could talk about CSS, but
I just start ranting and

77
00:04:49.030 --> 00:04:51.820
you don't need to hear me rant, do you?

78
00:04:53.660 --> 00:05:00.620
Anyways it's just, so

79
00:05:00.620 --> 00:05:05.660
it's talking to someone who's
finally gotten good at CSS I mean

80
00:05:05.660 --> 00:05:10.870
it's hard to step up to CSS
is really hard and difficult.

81
00:05:10.870 --> 00:05:14.180
Eventually designers get there and

82
00:05:14.180 --> 00:05:18.330
once they've done it this Stockholm
thing seems to happen to them.

83
00:05:20.860 --> 00:05:24.760
And it's kind of like watching
a domestic dispute on cops.

84
00:05:24.760 --> 00:05:31.609
CSS isn't bad, you just don't understand
it like I do, yeah, yeah, yeah.

85
00:05:31.609 --> 00:05:35.600
Anyway if all there was
to the web was HTML and

86
00:05:35.600 --> 00:05:38.820
CSS, it would have been replaced by now.

87
00:05:38.820 --> 00:05:42.200
The web would be gone and
we would be working on something else and

88
00:05:42.200 --> 00:05:43.270
this is the proof of that.

89
00:05:44.450 --> 00:05:49.160
George Colony, the Chairman and
CEO of Forrester Research was saying,

90
00:05:49.160 --> 00:05:52.150
Another software technology
will come along and

91
00:05:52.150 --> 00:05:55.446
kill off the Web,
just as it killed News, Gopher, et al.

92
00:05:55.446 --> 00:05:59.850
And that judgment day will arrive very
soon, in the next two to three years.

93
00:05:59.850 --> 00:06:03.670
So he was predicting in 2000,
that by 2003,

94
00:06:03.670 --> 00:06:08.790
the web would be dead, replaced by
what he called the X Internet, which

95
00:06:08.790 --> 00:06:13.920
was an app that the executable Internet,
it was an application delivery system.

96
00:06:13.920 --> 00:06:18.380
That he thought that the web was
deficient because all it could do

97
00:06:18.380 --> 00:06:22.940
was dispense documents and
that is not what the world needed.

98
00:06:24.790 --> 00:06:28.475
This quote is no longer
on the Forrester website.

99
00:06:28.475 --> 00:06:29.825
&gt;&gt; Speaker 2: [LAUGH]

100
00:06:29.825 --> 00:06:31.710
&gt;&gt; Douglas: Archive.org has it though.

101
00:06:31.710 --> 00:06:33.470
You can go to archive.org,
it's right there.

102
00:06:34.700 --> 00:06:36.610
So a lot of people heard this message,

103
00:06:36.610 --> 00:06:39.150
a lot of people believed
it including Microsoft.

104
00:06:39.150 --> 00:06:43.630
So when Netscape self destructed,
Microsoft said good.

105
00:06:43.630 --> 00:06:47.980
We didn't want the web in the first place,
so they disbanded the IE team and

106
00:06:47.980 --> 00:06:49.670
put them to work on the X Internet.

107
00:06:49.670 --> 00:06:51.310
So, they started up the dot net project,

108
00:06:51.310 --> 00:06:56.110
they put people on Avalon,
they got moving on that stuff.

109
00:06:56.110 --> 00:07:00.540
So, the surprise was
that the web didn't die,

110
00:07:00.540 --> 00:07:04.899
and the reason it didn't die
was because of JavaScript.

111
00:07:06.430 --> 00:07:08.230
That what Colony was arguing for

112
00:07:08.230 --> 00:07:11.790
correctly was that the world needed
an application delivery system.

113
00:07:11.790 --> 00:07:14.660
The thing he didn't
recognize was that the web

114
00:07:14.660 --> 00:07:18.130
already was one because JavaScript
was in all the browsers.

115
00:07:20.380 --> 00:07:23.880
Now Java community,
remembers this differently.

116
00:07:23.880 --> 00:07:26.920
The Java community is really
angry at JavaScript for

117
00:07:26.920 --> 00:07:30.200
being in the browser and
thinks it's completely unfair

118
00:07:30.200 --> 00:07:32.230
that JavaScript was
the language in the browser.

119
00:07:32.230 --> 00:07:35.120
Had Java been in the browser
things would have been different,

120
00:07:36.470 --> 00:07:38.230
except that's not the way it was.

121
00:07:38.230 --> 00:07:43.280
Java was the first language in
the browser and Java applets failed.

122
00:07:43.280 --> 00:07:46.970
Java applets were the biggest
failure in the history of software.

123
00:07:46.970 --> 00:07:50.062
A total out there in public,
huge scale, flat on your face,

124
00:07:50.062 --> 00:07:53.533
the biggest failure we've ever
seen in software was Java applets.

125
00:07:53.533 --> 00:07:57.142
They were supposed to write once and
run everywhere and do everything and

126
00:07:57.142 --> 00:07:58.750
they didn't, total failure.

127
00:08:00.650 --> 00:08:01.560
On the other hand,

128
00:08:01.560 --> 00:08:06.360
the browser is still in existence
because JavaScript was there to save it.

129
00:08:08.950 --> 00:08:13.980
So a lot of people who used or
everybody hates JavaScript.

130
00:08:13.980 --> 00:08:20.810
There are people who don't know JavaScript
who hate it because they should know it.

131
00:08:20.810 --> 00:08:26.110
The people who do use JavaScript and
hate it, actually hate the DOM.

132
00:08:26.110 --> 00:08:29.640
The DOM is the API that the browser
presents to JavaScript and

133
00:08:29.640 --> 00:08:32.900
it is one of the worst APIs ever invented.

134
00:08:32.900 --> 00:08:37.468
It's just really awful, it was designed
also by Brendan Eich, he designed at

135
00:08:37.468 --> 00:08:41.261
the same week that he designed JavaScript.
&gt;&gt; Speaker 2: [LAUGH] Busy week.

136
00:08:41.261 --> 00:08:42.301
&gt;&gt; Douglas: It was a busy week,

137
00:08:42.301 --> 00:08:46.528
he was handed Danny Goodman's HyperCard
pile which is a book, that's two or

138
00:08:46.528 --> 00:08:48.950
three inches thick about HyperCard.

139
00:08:48.950 --> 00:08:53.600
He never used HyperCard, never used
a scripting system, very smart guy,

140
00:08:53.600 --> 00:08:54.650
very quick study.

141
00:08:54.650 --> 00:08:58.830
He read the book very quickly,
and thought he got a sense of it,

142
00:08:58.830 --> 00:09:01.810
how do you apply the HyperCard
model to the browser.

143
00:09:02.900 --> 00:09:09.622
And he came up with the DOM and
it's just awful, it's just awful.

144
00:09:09.622 --> 00:09:13.670
There have been many other people
over the years who have improved it.

145
00:09:13.670 --> 00:09:17.470
For example one of the most important
contributions was Scott Isaacs

146
00:09:17.470 --> 00:09:18.830
of Microsoft.

147
00:09:18.830 --> 00:09:23.339
He was on the IE 14 and

148
00:09:23.339 --> 00:09:28.350
he looked at the very peculiar model
that Netscape had came up with,

149
00:09:28.350 --> 00:09:30.980
and normalized it in a really good way.

150
00:09:32.050 --> 00:09:35.760
In the original Netscape model,
not all elements were scriptable, and

151
00:09:35.760 --> 00:09:38.440
those that were scriptable
were only scriptable in

152
00:09:38.440 --> 00:09:40.496
a way that matched what
was in the HyperCard book.

153
00:09:40.496 --> 00:09:44.700
And as it said,
let's make them all work the same way

154
00:09:44.700 --> 00:09:47.940
which made dumb programming
significantly easier.

155
00:09:47.940 --> 00:09:52.030
But they never finished the reason
they never finished was because

156
00:09:52.030 --> 00:09:53.570
Forrester said it's done.

157
00:09:53.570 --> 00:09:58.590
So this is okay and they were all
put on other projects and after IE6,

158
00:09:58.590 --> 00:10:02.400
it was just left and I was into the story.

159
00:10:02.400 --> 00:10:06.680
So they knew it wasn't finished they
never intended to leave it at that state,

160
00:10:06.680 --> 00:10:09.600
it's just what was done.

161
00:10:09.600 --> 00:10:13.640
So they would often did other things,
as a result it's incomplete API

162
00:10:13.640 --> 00:10:17.740
that's at the wrong level of abstraction
that's just horrible to use.

