WEBVTT

1
00:00:00.025 --> 00:00:04.248
[MUSIC]

2
00:00:04.248 --> 00:00:07.924
&gt;&gt; Douglas Crockford: JavaScript functions
have return statements return statement

3
00:00:07.924 --> 00:00:11.870
stops the execution of the function
returns control to the caller and

4
00:00:11.870 --> 00:00:13.990
can also optionally return a value.

5
00:00:15.650 --> 00:00:18.537
Return statement contained
can take an expression and

6
00:00:18.537 --> 00:00:21.110
will evaluate the expression
return its value or

7
00:00:21.110 --> 00:00:24.008
you can have a return statement
that returns nothing.

8
00:00:24.008 --> 00:00:26.426
It will actually return
the value undefined or

9
00:00:26.426 --> 00:00:30.580
if the function falls through the bottom,
it will return the undefined value.

10
00:00:33.446 --> 00:00:37.070
&gt;&gt; Douglas Crockford: I recommend that
you not make function objects in a loop.

11
00:00:37.070 --> 00:00:41.005
It can be wasteful, because every
new function object is created on

12
00:00:41.005 --> 00:00:43.776
every iteration, so
that could be expensive.

13
00:00:43.776 --> 00:00:48.337
It can also be confusing, because
the new function closes over the loops

14
00:00:48.337 --> 00:00:53.220
variables not over their current values
and that confusion can lead to bugs.

15
00:00:53.220 --> 00:00:58.334
For example, here we've got a for
loop, which is going to loop over

16
00:00:58.334 --> 00:01:03.089
an array of divs and it's gonna
add a click handler to each one,

17
00:01:03.089 --> 00:01:06.947
which when clicked on will
alert the id of the div and

18
00:01:06.947 --> 00:01:11.390
this code looks very straightforward,
but it will fail.

19
00:01:11.390 --> 00:01:15.718
And the way it fails is no
matter which div you click on,

20
00:01:15.718 --> 00:01:19.140
they will all display the same id.

21
00:01:19.140 --> 00:01:20.625
It'll be the last one and

22
00:01:20.625 --> 00:01:25.510
it's because what's being captured by
the inner function is the current value of

23
00:01:25.510 --> 00:01:30.418
div.id not not the value of div.id the at
the time that the function was created.

24
00:01:30.418 --> 00:01:34.975
So the way to get around that is
to not use a four loop at all,

25
00:01:34.975 --> 00:01:38.231
use four each and will pass in a function,

26
00:01:38.231 --> 00:01:43.830
which will receive each div of as
an argument and will alert correctly.

27
00:01:46.770 --> 00:01:50.358
&gt;&gt; Douglas Crockford: We invoke functions
with the pairing suffix operator,

28
00:01:50.358 --> 00:01:54.405
which will surround zero or
more comma separated arguments and

29
00:01:54.405 --> 00:01:59.460
each of those arguments will be bound to
one of the parameters of the function.

30
00:01:59.460 --> 00:02:01.920
If a function is called
with too many arguments,

31
00:02:01.920 --> 00:02:03.660
the extra arguments are ignored.

32
00:02:03.660 --> 00:02:05.560
It is not an error.

33
00:02:05.560 --> 00:02:08.317
If an argument is called
with too few arguments,

34
00:02:08.317 --> 00:02:11.082
the missing values will
be the undefined value.

35
00:02:11.082 --> 00:02:14.684
If there is no explicit type checking
on the arguments, on their types or

36
00:02:14.684 --> 00:02:15.640
on their numbers.

37
00:02:15.640 --> 00:02:20.460
So if you really care about that stuff,
you need to check it yourself.

38
00:02:20.460 --> 00:02:22.340
Generally, you don't have to.

39
00:02:22.340 --> 00:02:24.940
It turns out most of the defaults
in JavaScript are right.

40
00:02:24.940 --> 00:02:30.540
So that if you don't do checking,
it'll usually do the right thing anyway.

41
00:02:32.260 --> 00:02:37.638
So in addition to any parameters that are
formally defined as part of a function,

42
00:02:37.638 --> 00:02:42.305
there are also two bonus pseudo
parameters that you can also get access

43
00:02:42.305 --> 00:02:43.906
to arguments and this.

44
00:02:43.906 --> 00:02:46.192
I don't recommend using either of them,
but

45
00:02:46.192 --> 00:02:48.490
they're both very popular in the language.

46
00:02:48.490 --> 00:02:49.930
So, I'd need to describe them both.

47
00:02:49.930 --> 00:02:52.270
I will start with the arguments.

48
00:02:52.270 --> 00:02:56.229
When a function is invoked in addition to
its parameters, it also gets a special

49
00:02:56.229 --> 00:03:01.060
printer called arguments and it contains
all of the arguments from the invocation.

50
00:03:01.060 --> 00:03:05.415
So everything that got passed in
the parens are called the function,

51
00:03:05.415 --> 00:03:09.030
every one of those values will
be in the arguments array.

52
00:03:09.030 --> 00:03:12.630
Now one problem with the arguments
array is, it is not really an array,

53
00:03:12.630 --> 00:03:15.456
even in the weird way that
JavaScript thinks of arrays.

54
00:03:15.456 --> 00:03:17.686
It is an array like object.

55
00:03:17.686 --> 00:03:23.818
It's an object that has a length property,
but it's not a magical length property and

56
00:03:23.818 --> 00:03:27.610
it doesn't inherit any of
the useful array methods.

57
00:03:27.610 --> 00:03:30.410
So, it's a difficult thing to work with.

58
00:03:30.410 --> 00:03:34.873
You do get arguments dot length, which
will be the number of arguments that were

59
00:03:34.873 --> 00:03:38.950
actually passed and there's a weird
interaction with the parameters.

60
00:03:40.180 --> 00:03:46.538
So if you change arguments sub zero,
the first parameter also changes.

61
00:03:46.538 --> 00:03:49.860
If you change the second parameter,
then argument sub one changes for

62
00:03:49.860 --> 00:03:51.840
the people who make JavaScript engines.

63
00:03:51.840 --> 00:03:55.409
This is maybe the most hated
feature of the language,

64
00:03:55.409 --> 00:03:59.373
cuz they're working really hard
to try to make it go fast and

65
00:03:59.373 --> 00:04:03.680
you can't go fast when you have
to mess with behavior like that.

66
00:04:03.680 --> 00:04:06.668
So, let me show you an example
of how you could use it.

67
00:04:06.668 --> 00:04:11.097
So we've got a simple sum function,
which will receive some variable number of

68
00:04:11.097 --> 00:04:14.020
numbers and it will add them up and
return the total.

69
00:04:15.890 --> 00:04:20.160
So, we're going to get from
arguments that length and

70
00:04:20.160 --> 00:04:22.490
the number of things
that we're going to add.

71
00:04:22.490 --> 00:04:26.590
We're gonna loop through in and
we're gonna get each of those arguments,

72
00:04:26.590 --> 00:04:28.240
and add it to the total.

73
00:04:28.240 --> 00:04:34.620
Notice I didn't include any parameters in
some, cuz I didn't need to I could have.

74
00:04:34.620 --> 00:04:39.170
But it wasn't necessary, because I'm
getting all the material from arguments.

75
00:04:42.840 --> 00:04:46.012
&gt;&gt; Douglas Crockford: So now this
is a really difficult thing to have

76
00:04:46.012 --> 00:04:50.780
in any language, because it makes
the language hard to talk about.

77
00:04:51.800 --> 00:04:55.210
It's like pair programming with Abbott and
Costello.

78
00:04:55.210 --> 00:04:57.100
So, bear with me.

79
00:04:57.100 --> 00:05:01.550
So, the this parameter contains
a reference to the object of invocation.

80
00:05:02.610 --> 00:05:05.870
This allows a method to know what
object it is concerned with.

81
00:05:05.870 --> 00:05:09.326
This allows a single function
object to service many objects and

82
00:05:09.326 --> 00:05:11.630
it's the key to prototypal inheritance.

83
00:05:13.780 --> 00:05:17.510
&gt;&gt; Douglas Crockford: There are four
ways to call a function in JavaScript.

84
00:05:18.690 --> 00:05:22.315
The function form, method form,
constructor form and apply form,

85
00:05:22.315 --> 00:05:23.010
four forms.

86
00:05:23.010 --> 00:05:27.404
I think in a well-designed language,
there should be one form, but

87
00:05:27.404 --> 00:05:31.439
we've got four and the way they
vary is in what happens to this.

88
00:05:33.470 --> 00:05:35.370
So, let's start with the method form.

89
00:05:35.370 --> 00:05:40.290
The method form, we say,
some object dot method name or

90
00:05:40.290 --> 00:05:45.320
some object bracket, an expression
that evaluates to a method name.

91
00:05:45.320 --> 00:05:49.740
When we call a function this way,
then this will get bound to this object.

92
00:05:51.730 --> 00:05:56.270
It allows the method that gets called
to know which object it's going to

93
00:05:56.270 --> 00:05:58.380
be manipulating.

94
00:05:58.380 --> 00:06:02.313
In most languages, the binding
of this happens fairly late, but

95
00:06:02.313 --> 00:06:04.610
nobody does it as late as JavaScript.

96
00:06:04.610 --> 00:06:09.445
Java Script doesn't bind this
until the moment of invocation,

97
00:06:09.445 --> 00:06:13.743
then there's the function form,
which looks the same,

98
00:06:13.743 --> 00:06:16.860
except we don't have an object prefix.

99
00:06:16.860 --> 00:06:20.540
So, we just have some function value and
we call that.

100
00:06:20.540 --> 00:06:23.734
In this case,
this gets bounced to the global object.

101
00:06:23.734 --> 00:06:27.989
It's the thing that is the container
of all the global variables and

102
00:06:27.989 --> 00:06:32.780
that's a terrible thing, because it's
leaking way too much capability.

103
00:06:32.780 --> 00:06:35.460
It's a security hazard,
it's a reliability hazard.

104
00:06:35.460 --> 00:06:38.490
This was sort of fixed in ES5/Strict mode.

105
00:06:41.000 --> 00:06:42.418
&gt;&gt; Douglas Crockford: But not completely.

106
00:06:42.418 --> 00:06:46.150
In ES5/Strict mode,
this gets bound to undefined.

107
00:06:46.150 --> 00:06:49.811
So at least we're not binding
it to something dangerous,

108
00:06:49.811 --> 00:06:52.736
but sometimes it's not
what you want either.

109
00:06:52.736 --> 00:06:55.952
That if you have an inner
function inside of a method,

110
00:06:55.952 --> 00:06:59.460
you want the inner function to
help the method do its work.

111
00:06:59.460 --> 00:07:01.434
But the inner function
doesn't get to see this,

112
00:07:01.434 --> 00:07:03.660
because the inner function
gets called as a function.

113
00:07:03.660 --> 00:07:07.180
And so, it's this will be either
the global object or undefined.

114
00:07:07.180 --> 00:07:10.855
So the workaround is in the outer
function, in the method,

115
00:07:10.855 --> 00:07:14.161
you create a variable called
that assign this to it and

116
00:07:14.161 --> 00:07:16.750
then the inner function gets to see that.

117
00:07:21.230 --> 00:07:22.787
&gt;&gt; Douglas Crockford: Then
there is a constructor form,

118
00:07:22.787 --> 00:07:25.642
it looks like the function form,
except there is a new prefix.

119
00:07:25.642 --> 00:07:29.068
And when a function is
called with a new prefix,

120
00:07:29.068 --> 00:07:32.589
a new object is created and
will be bound to this.

121
00:07:33.710 --> 00:07:38.295
And if the constructor function does
not have an explicit return value,

122
00:07:38.295 --> 00:07:40.625
then this will be the return value and

123
00:07:40.625 --> 00:07:45.602
this is used in the pseudo classical
style, which will get to in a few minutes.

124
00:07:45.602 --> 00:07:47.420
And finally, there is the apply form.

125
00:07:47.420 --> 00:07:53.110
In the apply form, you call the apply
method of the function object and

126
00:07:53.110 --> 00:07:58.060
you get to specify what the value
of this is going to be.

127
00:07:58.060 --> 00:08:02.574
In addition, you can also provide
either an array of arguments or

128
00:08:02.574 --> 00:08:06.772
you can provide individual
arguments separated by commas.

129
00:08:08.728 --> 00:08:12.301
&gt;&gt; Douglas Crockford: So to summarize,
there are four invocation forms, function,

130
00:08:12.301 --> 00:08:14.230
method, constructor and apply.

131
00:08:14.230 --> 00:08:17.190
They each vary according
to what they do with this.

132
00:08:17.190 --> 00:08:22.385
And again, I don't recommend using
this at all, but that's how most

133
00:08:22.385 --> 00:08:27.948
people use the language and I'll show
you an alternative in a few minutes.

134
00:08:27.948 --> 00:08:29.860
So, you all know about recursion.

135
00:08:29.860 --> 00:08:33.551
That's when you have a function that
is defined in terms of itself or

136
00:08:33.551 --> 00:08:36.546
the can call itself really,
really important thing.

137
00:08:36.546 --> 00:08:39.380
I don't need to tell you about Quicksort,

138
00:08:39.380 --> 00:08:43.330
that's one of the important
examples of using recursion.

139
00:08:43.330 --> 00:08:46.430
JavaScript has a recursion, which is good.

140
00:08:46.430 --> 00:08:49.509
If you're not familiar with
recursive functions, I highly,

141
00:08:49.509 --> 00:08:53.240
highly recommend a book called
The Little Lisper, which has been revised.

142
00:08:53.240 --> 00:08:55.270
It's now called the Little Schemer.

143
00:08:55.270 --> 00:08:59.794
It's based on the Scheme language,
but it's not really about scheme.

144
00:08:59.794 --> 00:09:04.169
It's about recursive functions and
everything in that book can be written in

145
00:09:04.169 --> 00:09:08.694
JavaScript and this web page will give
you the key to to doing that translation.

146
00:09:08.694 --> 00:09:09.814
Highly, highly recommended.

147
00:09:09.814 --> 00:09:14.004
This is one of those books that can
significantly change the way you think in

148
00:09:14.004 --> 00:09:15.079
a really good way.

149
00:09:18.860 --> 00:09:22.354
&gt;&gt; Douglas Crockford: There's another
book called The Principles of

150
00:09:22.354 --> 00:09:25.325
Programming Languages by RC Tennent and

151
00:09:25.325 --> 00:09:30.303
one of his principles is the principle
of correspondence in which he

152
00:09:30.303 --> 00:09:35.222
talks about how variables are like
parameters in some languages.

153
00:09:35.222 --> 00:09:38.425
So here, we have two versions
of the factorial function and

154
00:09:38.425 --> 00:09:42.280
one of them result is a variable and
the other the result is a parameter.

155
00:09:43.670 --> 00:09:46.460
Otherwise, these two functions
do exactly the same thing.

156
00:09:47.770 --> 00:09:51.293
And so, this demonstrates
the similarity of variables and

157
00:09:51.293 --> 00:09:54.542
parameters based on how
the function is constructed.

158
00:09:54.542 --> 00:09:57.589
The interesting thing about
the second function is,

159
00:09:57.589 --> 00:10:01.120
it's using an immediately
revocable function expression.

160
00:10:01.120 --> 00:10:06.085
So here, we have a function, declaration
or function of expression, which is

161
00:10:06.085 --> 00:10:11.366
creating a new function object, which we
then call immediately passing in the one.

162
00:10:11.366 --> 00:10:15.229
So in general,
we can take any expression and

163
00:10:15.229 --> 00:10:20.110
wrap it in a function that will
return that expression and

164
00:10:20.110 --> 00:10:26.330
call the function immediately and
it does the same thing as expression.

165
00:10:26.330 --> 00:10:29.610
It's just more verbose, but
it does the same thing.

166
00:10:30.610 --> 00:10:34.024
Now, turns out this is not true
in JavaScript for all values.

167
00:10:34.024 --> 00:10:34.748
For example,

168
00:10:34.748 --> 00:10:39.040
these and arguments change their meaning
when you put them in a different function.

169
00:10:39.040 --> 00:10:43.133
So it doesn't work for
them, but it works for

170
00:10:43.133 --> 00:10:48.320
all other expressions and
it works for four statements.

171
00:10:48.320 --> 00:10:52.025
You can take any bunch of statements and
put them in a function and

172
00:10:52.025 --> 00:10:56.692
call immediately and it's says, though,
you had executed those statements,

173
00:10:56.692 --> 00:10:59.231
except that var function
break continue and

174
00:10:59.231 --> 00:11:03.168
return change their meaning when
you put them in another function.

175
00:11:03.168 --> 00:11:08.047
Otherwise, you can do this transformation
and there are some interesting

176
00:11:08.047 --> 00:11:12.240
things that can happen as a result
of being being able to do this.

177
00:11:12.240 --> 00:11:15.860
So, this is a feature that you look for
in a functional language.

