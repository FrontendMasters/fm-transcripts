WEBVTT

1
00:00:00.000 --> 00:00:03.749
[MUSIC]

2
00:00:03.749 --> 00:00:06.615
&gt;&gt; Douglas Crockford: In Netscape 2 we
added an event model which is still in all

3
00:00:06.615 --> 00:00:07.400
the browsers.

4
00:00:10.300 --> 00:00:13.650
The browser has an event driven
single threaded programming model.

5
00:00:13.650 --> 00:00:15.510
Which is one of the best
things about the browser.

6
00:00:16.940 --> 00:00:20.090
Every event will be targeted
at a particular node.

7
00:00:20.090 --> 00:00:22.590
And the events cause the invocation
of event handler functions.

8
00:00:25.110 --> 00:00:31.330
Unfortunately, the composition of events
is really sloppy, from my perspective,

9
00:00:31.330 --> 00:00:36.890
there's layer confusion, there
are some events which are intended for

10
00:00:36.890 --> 00:00:41.560
widgets, low level components, and
some intended for applications,

11
00:00:41.560 --> 00:00:46.750
higher level components and
the design of the dom mixes them all up.

12
00:00:46.750 --> 00:00:51.220
So you've got application level
things like click and double click

13
00:00:51.220 --> 00:00:55.474
completely mixed up with widget level
things like mouse down, mouse move.

14
00:00:57.760 --> 00:01:01.620
Now it turns out they're,
the silver lining here is because

15
00:01:01.620 --> 00:01:05.520
everything was exposed to everybody,
it was possible for

16
00:01:05.520 --> 00:01:10.270
the libraries to come in and
clean things up and impose order on it.

17
00:01:11.980 --> 00:01:15.400
And that worked because
everything was available, but

18
00:01:15.400 --> 00:01:18.200
it would have been much better
had they not even been necessary,

19
00:01:18.200 --> 00:01:21.120
if the dom had just been Designed
correctly in the first place.

20
00:01:21.120 --> 00:01:25.940
There are similar layer
confusion in the input events.

21
00:01:25.940 --> 00:01:30.560
You've got application level things
like blur, change, and focus and

22
00:01:30.560 --> 00:01:35.110
key press and widget level
things like key up and key down.

23
00:01:35.110 --> 00:01:37.080
And again, it's all mixed up.

24
00:01:37.080 --> 00:01:38.160
And because it's all mixed up.

25
00:01:38.160 --> 00:01:42.360
I see applications mix it up,
you'll see people

26
00:01:42.360 --> 00:01:46.330
doing all of those things all all the time
everywhere because it's available.

27
00:01:48.470 --> 00:01:52.290
So there are three ways of adding
an event handler to a node.

28
00:01:52.290 --> 00:01:56.490
There is a original Microsoft model
where you could say, node.onClick.

29
00:01:56.490 --> 00:01:57.890
Assign a function to it, done.

30
00:01:57.890 --> 00:02:00.950
And that still works everywhere,
that's pretty nice.

31
00:02:00.950 --> 00:02:03.670
Microsoft decided that
it should be a method.

32
00:02:03.670 --> 00:02:07.200
So you say node.attachMethod,
onClick, function.

33
00:02:08.270 --> 00:02:11.640
Okay, WC said that's not enough typing.

34
00:02:11.640 --> 00:02:16.370
So let's make it add event
listener type f false.

35
00:02:16.370 --> 00:02:18.200
And this false thing is kind of weird.

36
00:02:18.200 --> 00:02:22.350
Normally, if you leave a parameter off

37
00:02:22.350 --> 00:02:26.870
the browser will replace it with
undefined which is false, but

38
00:02:26.870 --> 00:02:30.450
in this case it really has to be false or
it's gonna fail.

39
00:02:30.450 --> 00:02:36.880
In a minute I'll explain how
the false is used so an event handler

40
00:02:36.880 --> 00:02:42.310
takes an optional event parameter which
is how the event knows what happened.

41
00:02:42.310 --> 00:02:44.360
Microsoft unfortunately didn't do that.

42
00:02:44.360 --> 00:02:48.970
Instead they had a global event
variable which was a bad thing.

43
00:02:50.260 --> 00:02:55.060
So because of that this is the standard
template for writing event handlers

44
00:02:56.950 --> 00:03:02.940
where either use the event that was
passed in or you use the global variable,

45
00:03:02.940 --> 00:03:08.240
and the target is either gonna
be the events target variable or

46
00:03:08.240 --> 00:03:12.120
a property or the events source,
why are to names I had that

47
00:03:12.120 --> 00:03:16.900
it doesn't make any sense and then after
that you can do your normal thing.

48
00:03:16.900 --> 00:03:20.710
I don't recommend that anybody use
any of what I've just shown you.

49
00:03:20.710 --> 00:03:24.480
[LAUGH] You don't want to use any
of that because it's painful and

50
00:03:24.480 --> 00:03:27.560
it's it just doesn't work very well.

51
00:03:27.560 --> 00:03:31.188
You want to be using libraries instead.

52
00:03:33.729 --> 00:03:36.963
&gt;&gt; Douglas Crockford: So there were two
models for how to do event propagation

53
00:03:36.963 --> 00:03:40.409
there's the trickling model
that was done at Netscape and

54
00:03:40.409 --> 00:03:44.320
there is the bubbling model
that was done at Microsoft.

55
00:03:44.320 --> 00:03:48.855
So if trickling you would start
with the top of the tree and

56
00:03:48.855 --> 00:03:53.820
you would descend down to the tree
until you get to the target node and

57
00:03:53.820 --> 00:03:57.650
any node along the way down
can capture the event and

58
00:03:57.650 --> 00:03:59.810
say I'm taking care of it,
don't pass it down.

59
00:04:01.810 --> 00:04:05.780
Microsoft, on the other hand, started
with the bottom and they go up parent,

60
00:04:05.780 --> 00:04:08.300
parent, parent,
parent until they get to the top.

61
00:04:08.300 --> 00:04:11.760
And any node along the way can
say I'm interested in this

62
00:04:11.760 --> 00:04:12.469
event, I want to handle.

63
00:04:13.540 --> 00:04:16.060
It turns out Microsoft got it right.

64
00:04:16.060 --> 00:04:20.830
That bubbling up is
the correct way to do that.

65
00:04:20.830 --> 00:04:24.980
So when W3C went to standardize say well
we need to come up with a standard for

66
00:04:24.980 --> 00:04:27.110
how we do the event propagation.

67
00:04:27.110 --> 00:04:30.930
Do we do the trickling down or
the bubbling up?

68
00:04:30.930 --> 00:04:33.013
They could have said let's
do the one that's right.

69
00:04:35.049 --> 00:04:36.760
&gt;&gt; Douglas Crockford: Well,
why would they do that, right?

70
00:04:36.760 --> 00:04:40.390
So what they instead was,
we'll do it both ways.

71
00:04:40.390 --> 00:04:43.780
We'll require that the browsers
trickle down and bubble up.

72
00:04:43.780 --> 00:04:44.630
So they do both.

73
00:04:44.630 --> 00:04:48.600
They'll first do a trickle down phase,
and they'll do a bubble up phase, and

74
00:04:48.600 --> 00:04:54.140
that false that was on addeventlistener
tells you on which phase you're doing it.

75
00:04:54.140 --> 00:04:57.330
False will be on the bubble up the face.

76
00:04:57.330 --> 00:05:00.720
So why do you even care why do they
have this bubbling stuff at all?

77
00:05:02.280 --> 00:05:05.710
It was to solve a problem that's
probably not a problem anymore.

78
00:05:05.710 --> 00:05:10.500
So suppose you're making a catalog
page and you've got 100 things and

79
00:05:10.500 --> 00:05:15.139
you can drag any of those things from
a reservoir and put them onto a page

80
00:05:16.460 --> 00:05:20.270
and so, that's how you've got those nice
authoring package that you're writing.

81
00:05:21.490 --> 00:05:24.200
And so, you've got 100 draggable elements.

82
00:05:24.200 --> 00:05:27.630
That means you need to add a set of
event handlers to each one of those.

83
00:05:27.630 --> 00:05:30.150
You have to add mouse down,
mouse up, mouse move and so on.

84
00:05:31.930 --> 00:05:34.885
So that's hundreds of
sets of event handlers.

85
00:05:34.885 --> 00:05:40.300
In 1995, that took a long time
browsers were a lot slower then.

86
00:05:40.300 --> 00:05:41.660
JavaScript was a lot slower then.

87
00:05:41.660 --> 00:05:44.500
It would take time to do all of that work.

88
00:05:44.500 --> 00:05:49.100
So instead what you would do is
add one set of event handlers

89
00:05:49.100 --> 00:05:52.090
to the common parent of that hundred.

90
00:05:52.090 --> 00:05:56.100
And that common parent would
intercept all of the events and

91
00:05:56.100 --> 00:05:57.860
move all the children as needed.

92
00:05:59.320 --> 00:06:02.070
I don't think it matters anymore
with the systems have gotten so

93
00:06:02.070 --> 00:06:04.160
much faster that it's in the noise, but

94
00:06:04.160 --> 00:06:06.650
it's still in the model see you
still need to be aware of it.

95
00:06:08.750 --> 00:06:11.700
One thing you have to do
is cancel bubbling, so

96
00:06:11.700 --> 00:06:15.120
at some point some node has taken
care of everything and it says,

97
00:06:15.120 --> 00:06:18.870
please don't tell my parents,
it's under control and.

98
00:06:18.870 --> 00:06:22.270
And there are two ways to do that and
you need to be able to do it both ways.

99
00:06:26.270 --> 00:06:29.100
And sometimes you want to
prevent the default action

100
00:06:29.100 --> 00:06:32.640
after everything is down in the browser
itself may want to do something.

101
00:06:32.640 --> 00:06:34.920
May want to submit a form or or

102
00:06:34.920 --> 00:06:38.560
give focus to something if you don't
want that to happen, you prevent that.

103
00:06:38.560 --> 00:06:40.730
And there are three ways to
prevent that from happening and

104
00:06:40.730 --> 00:06:42.040
you have to do all of those as well.

