WEBVTT

1
00:00:00.000 --> 00:00:03.729
[MUSIC]

2
00:00:03.729 --> 00:00:04.882
&gt;&gt; Douglas Crockford: Hereâ€™s a next one.

3
00:00:04.882 --> 00:00:09.396
Write a function curry that takes
a binary function and an argument, and

4
00:00:09.396 --> 00:00:12.659
returns a function that can
take a second argument.

5
00:00:12.659 --> 00:00:17.558
Here we'll pass to the curry function
the add function that we wrote this

6
00:00:17.558 --> 00:00:18.696
morning and 3.

7
00:00:18.696 --> 00:00:21.400
It will return a function
that will add 3 to things.

8
00:00:21.400 --> 00:00:26.700
And similarly we could pass to
curry the multiply function and 5.

9
00:00:26.700 --> 00:00:29.290
And it will return a function
that will multiply things by 5.

10
00:00:29.290 --> 00:00:33.110
&gt;&gt; Speaker 2: We did curry yesterday.

11
00:00:33.110 --> 00:00:36.800
&gt;&gt; Speaker 3: [INAUDIBLE]
It all comes full circle.

12
00:00:36.800 --> 00:00:45.090
&gt;&gt; [INAUDIBLE]
&gt;&gt; Douglas Crockford: It's

13
00:00:45.090 --> 00:00:48.930
not uncommon when I introduce this
problem, that some people perk up.

14
00:00:48.930 --> 00:00:51.185
They go, Curry this is finally
starting to get interesting.

15
00:00:51.185 --> 00:00:59.284
&gt;&gt; Speaker 2: In the previous
solution we had a var add f.

16
00:00:59.284 --> 00:01:02.980
&gt;&gt; Douglas Crockford: Mm-hm.

17
00:01:02.980 --> 00:01:06.382
&gt;&gt; Speaker 2: And
earlier on we had a function add f.

18
00:01:06.382 --> 00:01:07.230
&gt;&gt; Douglas Crockford: Yep.

19
00:01:07.230 --> 00:01:10.530
&gt;&gt; Speaker 2: And
JS Lint complains it's a redefinition.

20
00:01:10.530 --> 00:01:11.320
&gt;&gt; Douglas Crockford: That's right.

21
00:01:11.320 --> 00:01:12.330
&gt;&gt; Speaker 2: And is?

22
00:01:12.330 --> 00:01:13.720
&gt;&gt; Douglas Crockford: JS Lint is right.

23
00:01:13.720 --> 00:01:14.220
&gt;&gt; Speaker 2: Okay.

24
00:01:16.590 --> 00:01:18.630
&gt;&gt; Douglas Crockford: Okay,
so here's a curry function.

25
00:01:18.630 --> 00:01:21.740
Curry takes a binary function and
a first argument and

26
00:01:21.740 --> 00:01:24.150
returns a function that
takes a second argument.

27
00:01:24.150 --> 00:01:26.680
And returns the result of calling
the binary function with the first and

28
00:01:26.680 --> 00:01:28.000
second arguments.

29
00:01:28.000 --> 00:01:30.790
So who got curry, very good.

30
00:01:30.790 --> 00:01:36.090
If you didn't get curry, get it now
because you'll going to need it later.

31
00:01:36.090 --> 00:01:38.150
Now another way you could
have written curry,

32
00:01:38.150 --> 00:01:40.850
is you could have used the lift
function that we wrote earlier.

33
00:01:40.850 --> 00:01:43.450
Did anyone use lift f?

34
00:01:43.450 --> 00:01:45.800
That would be extra credit,
if you've done that.

35
00:01:46.850 --> 00:01:51.220
So, this process of taking a function
with multiple arguments and

36
00:01:51.220 --> 00:01:56.020
turning it into multiple functions that
take a single argument is called currying.

37
00:01:56.020 --> 00:01:59.910
And it's named after Haskell Curry who is
a mathematician who did a lot of work with

38
00:01:59.910 --> 00:02:02.000
Church's lambda calculus.

39
00:02:02.000 --> 00:02:07.090
And by normalizing all functions
to take only one argument it made

40
00:02:07.090 --> 00:02:09.460
a lot of operations easier to think about.

41
00:02:10.540 --> 00:02:13.340
Some people think it should
be called Schonfinkelisation

42
00:02:13.340 --> 00:02:16.370
because there is a fellow named Schon
Finkel who is doing this stuff earlier but

43
00:02:16.370 --> 00:02:17.310
we're going to call it currying.

44
00:02:18.500 --> 00:02:21.560
Now some people would like curry to
be able to work with functions of

45
00:02:21.560 --> 00:02:22.580
any number of arguments.

46
00:02:24.880 --> 00:02:27.830
And it's possible to do
that with JavaScript.

47
00:02:27.830 --> 00:02:31.320
And it is horrible, it's terribly ugly.

48
00:02:31.320 --> 00:02:34.900
So, if I want to have either
the two functions take

49
00:02:34.900 --> 00:02:39.150
any number of things rather than just
the one thing that we're concerned with.

50
00:02:39.150 --> 00:02:44.650
You have to do that and
it's inexcusably awful, and it's because

51
00:02:44.650 --> 00:02:47.670
the arguments array isn't really an array
and so it doesn't work right, and so

52
00:02:47.670 --> 00:02:49.940
you have to do all these tricks
in order to get things to happen.

53
00:02:49.940 --> 00:02:54.080
I'm not going to explain
what this does because

54
00:02:54.080 --> 00:02:56.940
I just don't want to waste time on it,
it's awful.

55
00:02:56.940 --> 00:02:59.210
And so because of this awfulness.

56
00:02:59.210 --> 00:03:02.940
All of the functions that we write
today will only take a fixed number of

57
00:03:02.940 --> 00:03:03.690
arguments.

58
00:03:03.690 --> 00:03:06.690
So we'll have unary functions
will take one argument, and

59
00:03:06.690 --> 00:03:10.900
binary functions will take two arguments
even though lots of the applications we're

60
00:03:10.900 --> 00:03:12.770
going to do would really
like it to be variable.

61
00:03:13.990 --> 00:03:17.660
I don't want you have to waste your
time on this because you can see there,

62
00:03:17.660 --> 00:03:20.320
there's a whole lot of stuff going on
that has nothing to do with curry.

63
00:03:22.080 --> 00:03:28.370
Now in ES6, which is starting to
find its way into implementations.

64
00:03:28.370 --> 00:03:33.460
There is some new syntax with the ellipsis
operator the dot dot dot operator.

65
00:03:33.460 --> 00:03:37.980
And if you put the ellipsis in
a parameter list, what that says is, take

66
00:03:37.980 --> 00:03:42.520
all of the rest of the arguments all the
remaining arguments put them into an array

67
00:03:42.520 --> 00:03:48.470
and bind that array to that parameter,
and that is so much cleaner.

68
00:03:48.470 --> 00:03:54.290
And then on the call side in an argument
list, if you go dot dot dot and

69
00:03:54.290 --> 00:03:58.240
there is an array there,
it says take that array and spread it out.

70
00:03:58.240 --> 00:04:01.750
So each element of the array
will be a separate argument.

71
00:04:01.750 --> 00:04:05.440
And so by doing that, we've got this
version of the curry function which

72
00:04:05.440 --> 00:04:10.030
looks exactly like the first one except
it's got the annotations in it which says,

73
00:04:10.030 --> 00:04:12.609
this is where you can have a multiple
number of things being passed.

74
00:04:14.620 --> 00:04:19.370
Both of these do exactly the same thing,
which one would you rather be reading?

75
00:04:19.370 --> 00:04:20.788
I'm guessing it be the second one.

76
00:04:20.788 --> 00:04:26.432
So when ES6 becomes everywhere,
then I'll change this course so

77
00:04:26.432 --> 00:04:31.080
that we'll be writing
functions that look like that.

78
00:04:32.450 --> 00:04:33.979
Yeah.
&gt;&gt; Speaker 4: That's kind of questions I

79
00:04:33.979 --> 00:04:36.280
had for you yesterday, but it's clear now.

80
00:04:36.280 --> 00:04:39.090
So like,
when you were seeing the advent from ES32,

81
00:04:39.090 --> 00:04:43.910
like ES5, that take like a long time for
browsers to adapt?

82
00:04:43.910 --> 00:04:47.470
Or do you see us moving
a little faster now or

83
00:04:47.470 --> 00:04:49.956
is it just going to take
quite a while to [INAUDIBLE].

84
00:04:49.956 --> 00:04:55.180
&gt;&gt; Douglas Crockford: It's faster that the
big hangup with ES5 was the IE problem.

85
00:04:55.180 --> 00:05:01.200
And IE is not nearly
the problem that it was before.

86
00:05:01.200 --> 00:05:03.760
And all of the other
browsers are out updating.

87
00:05:03.760 --> 00:05:06.890
So the problem isn't propagation and
adoption.

88
00:05:06.890 --> 00:05:09.690
The problem is now just implementation.

89
00:05:09.690 --> 00:05:13.500
So I'm hoping that we'll get all
of the stuff out much faster.

90
00:05:17.040 --> 00:05:21.490
So anyway, Ellipsis will be my second
most favorite feature ES6, when and

91
00:05:21.490 --> 00:05:25.280
if it ever gets finished so that will be
great but in the mean time we're only

92
00:05:25.280 --> 00:05:31.960
gonna be concerned with functions taking
a fixed number of arguments, Okay?

93
00:05:31.960 --> 00:05:34.070
So we're ready for the next one?

94
00:05:34.070 --> 00:05:36.960
This next problem is going to be a little
bit different because you are not

95
00:05:36.960 --> 00:05:39.400
going to write any new functions.

96
00:05:39.400 --> 00:05:41.950
Instead you're going to be using
functions that we have already written.

97
00:05:43.100 --> 00:05:47.570
So without writing any new functions show
three ways to create the inc function.

98
00:05:47.570 --> 00:05:50.230
The inc function adds one to a number and
returns it.

99
00:05:51.850 --> 00:05:54.810
So if you pass five to
inc it will return six.

100
00:05:56.850 --> 00:06:03.610
And so you're going to call a function,
which will create the inc function.

101
00:06:03.610 --> 00:06:06.785
And you're going to show three different
ways to do that using functions you've

102
00:06:06.785 --> 00:06:07.540
already written.

103
00:06:09.322 --> 00:06:13.340
&gt;&gt; Douglas Crockford: So
here are three ways to do inc.

104
00:06:13.340 --> 00:06:15.880
First one is add f of 1, who got that one?

105
00:06:17.040 --> 00:06:20.860
Okay, the next is lift f of add and
1, who got that?

106
00:06:22.200 --> 00:06:24.850
And curry of add and 1 who got that?

107
00:06:24.850 --> 00:06:25.660
And who got all three?

108
00:06:26.660 --> 00:06:31.320
Very good, so this illustrates the first
rule of functional programming which is,

109
00:06:31.320 --> 00:06:33.350
let the functions do the work.

110
00:06:33.350 --> 00:06:36.440
If you've already written
a function that does what you need,

111
00:06:36.440 --> 00:06:37.520
you don't need to write another one.

