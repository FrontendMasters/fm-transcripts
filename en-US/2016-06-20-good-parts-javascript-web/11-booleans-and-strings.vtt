WEBVTT

1
00:00:00.000 --> 00:00:03.954
[MUSIC]

2
00:00:03.954 --> 00:00:07.407
&gt;&gt; Douglas: So Booleans, there are exactly
two Booleans in this language and

3
00:00:07.407 --> 00:00:09.140
they are true and false.

4
00:00:09.140 --> 00:00:10.540
So hooray, we got that right.

5
00:00:13.360 --> 00:00:14.210
We have strings.

6
00:00:15.710 --> 00:00:17.810
Does anybody know why
they're called strings?

7
00:00:19.080 --> 00:00:21.040
Anyone?
&gt;&gt; Speaker 2: The change of characters.

8
00:00:22.750 --> 00:00:23.680
&gt;&gt; Douglas: It turns out nobody

9
00:00:23.680 --> 00:00:25.580
knows.
&gt;&gt; Speaker 2: Okay.

10
00:00:25.580 --> 00:00:27.130
&gt;&gt; Douglas: The first place I've been able

11
00:00:27.130 --> 00:00:30.770
to find in the literature that
refers to a specific data type,

12
00:00:30.770 --> 00:00:33.890
which is a sequence of characters,
is the ALGOL 60 report.

13
00:00:35.180 --> 00:00:39.842
But there's nothing in that report which
explains why they chose the word string.

14
00:00:39.842 --> 00:00:42.606
The first time you encountered
it you must have thought,

15
00:00:42.606 --> 00:00:46.340
well this is strange cuz it doesn't
look like a piece of string any way.

16
00:00:46.340 --> 00:00:49.010
So how'd that happen?

17
00:00:49.010 --> 00:00:50.890
I asked John McCarthy who
was on that committee,

18
00:00:50.890 --> 00:00:54.990
he was the inventor of Lisp,
why did he call it strings?

19
00:00:54.990 --> 00:01:01.885
He said, well Clanet was doing this
stuff with strings of symbols.

20
00:01:01.885 --> 00:01:06.581
But that didn't really answer the question
because at the time of the ALGOL 60

21
00:01:06.581 --> 00:01:11.230
report they would talk about
a block was a string of statements.

22
00:01:11.230 --> 00:01:15.508
So when did it become specifically
a string of characters?

23
00:01:15.508 --> 00:01:18.591
And he was really annoyed that I was
asking a question he didn't know

24
00:01:18.591 --> 00:01:19.300
the answer to.

25
00:01:20.500 --> 00:01:24.665
So that was the end of that
conversation and then he died and

26
00:01:24.665 --> 00:01:28.405
he was a last survivor of
that of the Lisp committee so

27
00:01:28.405 --> 00:01:31.810
we'll never know, or
of the ALGOL committee.

28
00:01:34.020 --> 00:01:37.850
So anyway we got them,
we call them strings and

29
00:01:37.850 --> 00:01:42.830
I think we call them strings because
there may have been some CPU architecture

30
00:01:42.830 --> 00:01:47.640
which linked characters together to
make string sequences of characters.

31
00:01:49.090 --> 00:01:54.225
And I think that because what's
the operation we do on strings?

32
00:01:54.225 --> 00:01:57.761
It's concatenate, but
concatenate means to form links,

33
00:01:57.761 --> 00:02:00.810
it's an operation in chain making.

34
00:02:00.810 --> 00:02:05.200
So you would think if it's strings it
should be tie or maybe slice or wind or

35
00:02:05.200 --> 00:02:07.370
something that strings do.

36
00:02:07.370 --> 00:02:09.990
So we've got some mixed
metaphors going on.

37
00:02:09.990 --> 00:02:13.490
And so I'm still searching the literature
trying to find out where strings came from

38
00:02:13.490 --> 00:02:14.282
but I haven't found it yet.

39
00:02:14.282 --> 00:02:17.970
So anyway we got them, we got strings.

40
00:02:17.970 --> 00:02:22.320
A string is a sequence of 0 or
more 16-bit Unicode characters.

41
00:02:22.320 --> 00:02:26.845
It's characters in the sense
of UCS-2 not UTF-16

42
00:02:26.845 --> 00:02:31.830
because there's no awareness
of surrogate pairs.

43
00:02:31.830 --> 00:02:33.473
At the time that JavaScript and

44
00:02:33.473 --> 00:02:36.958
Java were designed Unicode was
gonna be a 16 bit character set.

45
00:02:36.958 --> 00:02:43.660
It later grew to a 21 bit character set
and JavaScript is not aware of that.

46
00:02:43.660 --> 00:02:45.300
There is no separate character type.

47
00:02:46.610 --> 00:02:49.790
Characters are represented as
strings with a length of one.

48
00:02:49.790 --> 00:02:51.570
Strings are immutable which is good.

49
00:02:51.570 --> 00:02:55.190
Once you make a string, it cannot be
changed, it's fixed for all time.

50
00:02:55.190 --> 00:02:59.390
You can make new strings by concatenating
together bits of old strings but

51
00:02:59.390 --> 00:03:01.920
you cannot change a string once it's made.

52
00:03:01.920 --> 00:03:04.760
Similar strings are equal which is great.

53
00:03:04.760 --> 00:03:09.830
Java got that wrong, JavaScript got
that right, hooray for JavaScript.

54
00:03:09.830 --> 00:03:13.870
String literals can use single quotes or
double quotes with escapement.

55
00:03:13.870 --> 00:03:15.900
Both work exactly the same way.

56
00:03:15.900 --> 00:03:18.160
No magic quotes or quasi quotes or
anything like that.

57
00:03:19.420 --> 00:03:22.720
But there's no reason to have two
ways to make strings but we do.

58
00:03:22.720 --> 00:03:27.880
So given that I recommend use
double quote for external strings.

59
00:03:27.880 --> 00:03:32.770
Strings that make sense outside
of the program like URLs and

60
00:03:32.770 --> 00:03:36.150
templates and notes to the user,
that kind of stuff.

61
00:03:36.150 --> 00:03:41.350
And use single quotes for internal
strings like the names of properties and

62
00:03:41.350 --> 00:03:43.420
character constants and stuff like that.

63
00:03:43.420 --> 00:03:46.460
There's nothing that enforces that but
I think it's a good convention.

64
00:03:49.090 --> 00:03:54.150
We can convert a number to a string
by using its toString method.

65
00:03:54.150 --> 00:03:59.410
I prefer instead to use the global String
function which does the same thing, and

66
00:03:59.410 --> 00:04:05.814
will also work better on things
that do not have toString methods.

67
00:04:08.190 --> 00:04:12.600
We can convert a string into a number
by using the global Number function or

68
00:04:12.600 --> 00:04:16.310
by using the plus prefix
operator which I prefer.

69
00:04:16.310 --> 00:04:19.700
We also have a parseInt
function that I don't like.

70
00:04:19.700 --> 00:04:21.720
parseInt is something that
was borrowed from Java.

71
00:04:23.150 --> 00:04:25.050
It will convert a value into a number but

72
00:04:25.050 --> 00:04:29.880
it stops parsing at the first
non-digit character.

73
00:04:29.880 --> 00:04:35.150
And it won't tell you where it stopped,
or why it stopped, or what was left over.

74
00:04:35.150 --> 00:04:39.110
And usually wanna know that
cuz that can be important but

75
00:04:39.110 --> 00:04:40.220
it doesn't give you any clue.

76
00:04:41.430 --> 00:04:45.990
There was a big design error in that if
the string you are parsing starts with

77
00:04:45.990 --> 00:04:50.374
a 0, it assumes that you meant that
to be parsed as base-8, octal.

78
00:04:52.550 --> 00:04:57.854
And so if you're parsing something like
a date or a time which might have an 08 or

79
00:04:57.854 --> 00:05:02.924
an 09 that will be parsed as a 0 because
it sees the 0, goes into base-8,

80
00:05:02.924 --> 00:05:07.780
it sees the 8, says you are not an octal
digit so I stop here and get the 0.

81
00:05:09.640 --> 00:05:15.446
Yeah, so because of that I recommend
you always include the radix argument,

82
00:05:15.446 --> 00:05:17.334
which says base-10.

83
00:05:17.334 --> 00:05:21.198
We're on planet Earth,
damn it, we got base-10,

84
00:05:21.198 --> 00:05:24.777
0 to 9.
&gt;&gt; Douglas: Strings

85
00:05:24.777 --> 00:05:30.120
have a length property which tells you how
many 16-bit characters are in the string.

86
00:05:30.120 --> 00:05:34.260
Surrogate pairs will be counted
as two characters in that count.

87
00:05:36.540 --> 00:05:40.270
Strings are objects and so
they contain a big mess of methods,

88
00:05:40.270 --> 00:05:42.770
let you look them up offline,
but there are a lot of them.

89
00:05:42.770 --> 00:05:44.210
Many of them are actually very useful.

90
00:05:46.750 --> 00:05:49.660
Every string inherits
from string.prototype.

91
00:05:49.660 --> 00:05:51.780
So if we wanted to add new

92
00:05:53.290 --> 00:05:56.860
methods to strings this is
the place where we could do that.

93
00:05:56.860 --> 00:06:00.490
Again, this is not something
applications can do but

94
00:06:00.490 --> 00:06:02.230
this is how we've been
growing the language.

