WEBVTT

1
00:00:00.000 --> 00:00:03.708
[MUSIC]

2
00:00:03.708 --> 00:00:07.900
&gt;&gt; Douglas Crockford: The switch statement
is another of Thompson's things.

3
00:00:07.900 --> 00:00:12.390
It was modeled after, or
inspired by Tony Hoare's case statement,

4
00:00:12.390 --> 00:00:16.760
which was this brilliant idea that we will
have several independent clauses, and

5
00:00:16.760 --> 00:00:20.100
we will pick one of them based
on the value of an expression.

6
00:00:20.100 --> 00:00:26.240
Brilliant idea, but Thompson reinterprets
it in the form of a computed GOTO, which

7
00:00:26.240 --> 00:00:32.377
is another thing that was in Fortran which
we've since decided is a bad idea, except

8
00:00:32.377 --> 00:00:38.193
it survives in almost all modern languages
in the form of the switch statement.

9
00:00:40.857 --> 00:00:45.294
&gt;&gt; Douglas Crockford: And the hazard is
the fallthrough hazard, that in any case,

10
00:00:45.294 --> 00:00:51.300
if you do not explicitly disrupt, it will
automatically fall into the next case.

11
00:00:52.570 --> 00:00:55.950
And early on when I was developing JSLint,
someone wrote to me and

12
00:00:55.950 --> 00:01:01.210
recommended that JSLint give warnings
on this because it's really difficult

13
00:01:01.210 --> 00:01:05.210
to look at the code and observe that one
case is falling through into another,

14
00:01:05.210 --> 00:01:08.960
because the syntax is designed
to obscure that fact.

15
00:01:10.600 --> 00:01:13.200
And I thought about it deeply,
and I wrote back to him and

16
00:01:13.200 --> 00:01:17.560
I said, I can understand that hazard,
but there's this wonderful

17
00:01:17.560 --> 00:01:20.970
elegance that you can get if you can
cause one case to fall into the next one.

18
00:01:22.900 --> 00:01:29.246
And that's a valuable thing, and the error
can happen, but it hardly ever happens.

19
00:01:29.246 --> 00:01:33.807
And so given you've got this good thing
that can happen versus this unlikely

20
00:01:33.807 --> 00:01:38.452
bad thing, I'm not gonna test for that,
I'm not gonna give warnings on it.

21
00:01:38.452 --> 00:01:40.009
I think this is actually
a good part of the language.

22
00:01:41.930 --> 00:01:45.911
The next day, the same guy wrote to me and
said, I found a bug in JSLint.

23
00:01:45.911 --> 00:01:47.394
So I said, okay, good, thank you.

24
00:01:47.394 --> 00:01:52.283
I open the debugger and it turns out,
you know where this is going, right?

25
00:01:52.283 --> 00:01:52.975
&gt;&gt; Speaker 2: Mm-hm.

26
00:01:52.975 --> 00:01:54.330
&gt;&gt; Douglas Crockford: I had
a case that was falling through.

27
00:01:55.640 --> 00:02:00.740
And in that moment, I achieved
enlightenment cuz it turns out we spend

28
00:02:00.740 --> 00:02:06.180
most of our time making and
fixing our own bugs.

29
00:02:06.180 --> 00:02:08.790
We think, what I do today,
I was power typing.

30
00:02:08.790 --> 00:02:09.850
I was typing.

31
00:02:09.850 --> 00:02:12.180
We spend most of our time saying,
my god, what have I done?

32
00:02:13.370 --> 00:02:16.660
And then we find it, and
we get this little rush of euphoria.

33
00:02:16.660 --> 00:02:17.480
I did that again.

34
00:02:17.480 --> 00:02:19.290
Boom, and we forget.

35
00:02:19.290 --> 00:02:21.440
And so we have all this lost time.

36
00:02:21.440 --> 00:02:24.850
We forget about how much
time we spend chasing bugs.

37
00:02:26.210 --> 00:02:28.660
And we fail to learn from our mistakes.

38
00:02:28.660 --> 00:02:32.740
But on this particular occasion, it was so
humiliating, because I had just given

39
00:02:32.740 --> 00:02:38.200
a speech about how this was a good part
and then I'm shown, by the same guy,

40
00:02:38.200 --> 00:02:42.500
a bug in my own code that was caused
by that thing that I was defending.

41
00:02:42.500 --> 00:02:45.860
And because it was so humiliating,
I could not avoid learning the lesson,

42
00:02:45.860 --> 00:02:49.840
which was,
if I never intentionally fall through,

43
00:02:49.840 --> 00:02:52.780
I can find the cases where I
accidentally fall through.

44
00:02:52.780 --> 00:02:56.763
And that turns out to be much more
valuable, and it caused me to re-examine

45
00:02:56.763 --> 00:03:00.825
my analysis, and it turned out I was
completely wrong in every aspect of it.

46
00:03:00.825 --> 00:03:05.360
I thought I was being so logical in
measuring the tradeoffs, but I wasn't.

47
00:03:05.360 --> 00:03:09.465
Where I said I was arguing in
favor of that wonderful elegance?

48
00:03:09.465 --> 00:03:12.265
No, it turns out that's
a really bad thing because it

49
00:03:12.265 --> 00:03:15.639
causes coupling of these clauses
which should be independent.

50
00:03:15.639 --> 00:03:18.230
And that means that the code
is not really brittle,

51
00:03:18.230 --> 00:03:20.579
that if you need to make
a change to one clause,

52
00:03:20.579 --> 00:03:24.270
that's going to affect other clauses
which can now be spilling into it.

53
00:03:24.270 --> 00:03:29.480
So you're making the program harder to
maintain, you're making it more likely

54
00:03:29.480 --> 00:03:34.900
to have bugs introduced to it as a result
of its going through simple revisions.

55
00:03:34.900 --> 00:03:39.024
Because what what we should always be
doing is trying to uncouple things, right?

56
00:03:39.024 --> 00:03:43.254
But this causes an implicit coupling,
which is bad.

57
00:03:43.254 --> 00:03:47.800
But even worse was when I said,
that hardly ever happens.

58
00:03:47.800 --> 00:03:50.840
That's another way of saying it happens,
right.

59
00:03:50.840 --> 00:03:52.520
And we don't want it to ever happen.

60
00:03:52.520 --> 00:03:55.690
It's not like we don't want it happen
very often, we want it never to happen,

61
00:03:55.690 --> 00:03:57.400
because we want our
programs to be perfect.

62
00:03:57.400 --> 00:03:59.970
We can't tolerate it ever going wrong.

63
00:03:59.970 --> 00:04:01.257
This is System One talking.

64
00:04:01.257 --> 00:04:04.490
System One is terrible at math.

65
00:04:04.490 --> 00:04:08.040
System One gives most
more weight than all.

66
00:04:08.040 --> 00:04:12.710
System One thinks zero and
not very many are the same.

67
00:04:13.880 --> 00:04:15.080
They're not.

68
00:04:15.080 --> 00:04:19.510
Any time we're making mathematical
arguments without any data,

69
00:04:19.510 --> 00:04:23.430
that's probably System One talking, and
there's a really good chance we're wrong.

70
00:04:23.430 --> 00:04:30.100
Cuz it's guessing, it doesn't know,
and we do this all the time.

71
00:04:32.010 --> 00:04:34.810
So a good style can help
produce better programs.

72
00:04:34.810 --> 00:04:39.800
Style should not be about personal
preference or self-expression or taste.

73
00:04:39.800 --> 00:04:42.112
It should be about
reducing your error rate.

74
00:04:42.112 --> 00:04:45.519
Every decision we make about how
are we gonna code this thing,

75
00:04:45.519 --> 00:04:49.843
how we're gonna express this thing, it
should be about how are we best going to

76
00:04:49.843 --> 00:04:52.281
make a program which is
going to be perfect?

77
00:04:52.281 --> 00:04:53.800
Because ultimately, that's the goal.

78
00:04:55.430 --> 00:04:59.130
Now we can get some clues about
programming style from the literary style.

79
00:04:59.130 --> 00:05:03.250
The Romans wrote Latin all in uppercase
with no word breaks or punctuation, and

80
00:05:03.250 --> 00:05:03.920
it worked for them.

81
00:05:03.920 --> 00:05:08.050
You can go to Rome and you can still see
these letters, we call them Roman letters

82
00:05:08.050 --> 00:05:13.165
today, cuz that's what they used,
engraved in stone, looks just like this,

83
00:05:13.165 --> 00:05:16.519
except they were writing in Latin,
but it's the same letters.

84
00:05:18.490 --> 00:05:19.120
And it worked for them.

85
00:05:19.120 --> 00:05:25.150
They had a very powerful civilization
that took over a large part of the world,

86
00:05:25.150 --> 00:05:26.490
held it for centuries.

87
00:05:27.620 --> 00:05:29.140
Although there are ambiguities in this,

88
00:05:29.140 --> 00:05:32.990
for example I can read the third line as,
now or db reaks.

89
00:05:34.680 --> 00:05:39.100
It's a possible reading, so those sorts
of ambiguities can lead to errors.

90
00:05:40.550 --> 00:05:45.280
But it worked for them for a long time,
until Constantine establishes Christianity

91
00:05:45.280 --> 00:05:47.480
as the official religion
of the Roman Empire.

92
00:05:47.480 --> 00:05:52.312
At this point it becomes necessary to
make copies of these documents and

93
00:05:52.312 --> 00:05:54.819
distribute them all over the world.

94
00:05:54.819 --> 00:05:58.040
And the problem is, they don't have
originals for any of those documents,

95
00:05:58.040 --> 00:06:00.370
all they have are copies of
copies of copies of copies.

96
00:06:00.370 --> 00:06:03.840
And it turns out, no two copies agree.

97
00:06:03.840 --> 00:06:06.285
That every time they are copied,
they mutate.

98
00:06:06.285 --> 00:06:10.315
And that's a problem if you're trying to
establish an institution that derives

99
00:06:10.315 --> 00:06:14.180
its authority from the word and nobody
can know for certain what the word was.

100
00:06:14.180 --> 00:06:18.224
So medieval copyists introduce lowercase,
word breaks, and

101
00:06:18.224 --> 00:06:21.490
punctuation into their manuscripts.

102
00:06:21.490 --> 00:06:24.520
And these innovations helped
reduce their error rate.

103
00:06:24.520 --> 00:06:28.400
It made it easier to copy a manuscript
without introducing errors into it.

104
00:06:28.400 --> 00:06:30.630
And that was a really
important innovation.

105
00:06:31.890 --> 00:06:35.979
It also unexpectedly made
the manuscripts easier to read.

106
00:06:37.180 --> 00:06:40.340
So when Gutenberg begins
printing with movable type,

107
00:06:40.340 --> 00:06:44.510
he copies those conventions and
we're still using them.

108
00:06:44.510 --> 00:06:47.786
We now have centuries of experience
with literary style using lowercase,

109
00:06:47.786 --> 00:06:49.250
word breaks, and punctuation.

110
00:06:49.250 --> 00:06:54.910
In a particular way, we've all been
trained since we were children to read and

111
00:06:54.910 --> 00:06:57.030
write in that style.

112
00:06:57.030 --> 00:07:01.654
And that turns out to be really valuable,
that you can easily tell the difference

113
00:07:01.654 --> 00:07:05.810
between good writing and bad writing by,
does it conform to this or not?

114
00:07:07.940 --> 00:07:11.230
So good use of style can help
reduce the occurrence of errors.

115
00:07:12.490 --> 00:07:16.440
One of my favorite style manuals in
English is the Elements of Style.

116
00:07:16.440 --> 00:07:19.190
It's a little pamphlet that was self
published by William Strunk about

117
00:07:19.190 --> 00:07:20.680
100 years ago.

118
00:07:20.680 --> 00:07:24.320
It's since been updated by EB White and

119
00:07:24.320 --> 00:07:29.900
it needed to be updated because English
has continued to evolve since then, but

120
00:07:29.900 --> 00:07:33.930
most of Strunk's advice
is still really good.

121
00:07:33.930 --> 00:07:37.740
And a number of computer scientists
have used it as a model for

122
00:07:37.740 --> 00:07:43.030
writing books on programming style very,
very effectively.

123
00:07:44.760 --> 00:07:47.600
So programs must communicate
clearly to people.

124
00:07:47.600 --> 00:07:50.590
We should think of our
programs as literary works.

125
00:07:50.590 --> 00:07:54.500
And it's at least as important that
they communicate what they do to people

126
00:07:54.500 --> 00:07:56.180
as they do to the machine.

127
00:07:56.180 --> 00:08:00.258
It's not good enough to write something
that's really sloppy, thinking that, well,

128
00:08:00.258 --> 00:08:03.360
if I can get it past the compiler,
I've done my work.

129
00:08:03.360 --> 00:08:07.170
Because, if the program's ever gonna be
used more than once, it's gonna to be

130
00:08:07.170 --> 00:08:10.640
necessary for somebody to be able to
understand it and make it better.

131
00:08:11.930 --> 00:08:15.930
And so we need to make the programs
communicate what they do in order to allow

132
00:08:15.930 --> 00:08:16.540
us to do that.

133
00:08:16.540 --> 00:08:19.240
Otherwise, we're setting ourselves up or
others for failure.

