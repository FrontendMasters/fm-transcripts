WEBVTT

1
00:00:00.025 --> 00:00:03.992
[MUSIC]

2
00:00:03.992 --> 00:00:07.517
&gt;&gt; Douglas: Write a collect function
that takes a generator and an array and

3
00:00:07.517 --> 00:00:11.119
produces a function that will
collect the results in the array.

4
00:00:11.119 --> 00:00:14.567
So, we're gonna make a generator
that works like the NSA.

5
00:00:14.567 --> 00:00:17.253
It's going to spy on a function and

6
00:00:17.253 --> 00:00:23.550
record everything interesting
that that function returns, okay?

7
00:00:23.550 --> 00:00:29.183
First, we'll set up the empty array
where collect is gonna keep its stuff,

8
00:00:29.183 --> 00:00:34.290
then we'll call collect,
passing it any generator and that array,

9
00:00:34.290 --> 00:00:40.453
and it will return a generator, which will
work exactly like the first generator,

10
00:00:40.453 --> 00:00:44.855
except it will record everything
that it returns except for

11
00:00:44.855 --> 00:00:51.468
undefined.
&gt;&gt; Douglas: So,

12
00:00:51.468 --> 00:00:53.689
we can call that generator a few times,
and

13
00:00:53.689 --> 00:00:57.779
then we can look at what's in the array
and it will have captured those values.

14
00:00:57.779 --> 00:01:01.181
So, here is collect,
collect takes a generator and

15
00:01:01.181 --> 00:01:06.221
an array that returns a function that
gets the next value from the generator.

16
00:01:06.221 --> 00:01:08.447
If the value is not undefined,

17
00:01:08.447 --> 00:01:13.940
it pushes it on to the end of the array
in either case it will return the value.

18
00:01:14.990 --> 00:01:16.388
So, who got something that works?

19
00:01:16.388 --> 00:01:20.540
[LAUGH] So close?

20
00:01:20.540 --> 00:01:23.775
Anybody do something interesting?
&gt;&gt; Speaker 2: Can you just return

21
00:01:23.775 --> 00:01:27.850
array.push value instead of
having the return value outside

22
00:01:27.850 --> 00:01:32.040
of the u?
&gt;&gt; Douglas: I don't recall what it is

23
00:01:32.040 --> 00:01:33.350
that array.push returns.

24
00:01:33.350 --> 00:01:35.690
I think it might be an updated
length of the array.

25
00:01:35.690 --> 00:01:36.920
Does anyone know?
&gt;&gt; Speaker 3: Yeah,

26
00:01:36.920 --> 00:01:38.804
it sounds right.
&gt;&gt; Douglas: Yeah, so

27
00:01:38.804 --> 00:01:42.280
unfortunately array.push isn't
smart enough to do that.

28
00:01:45.030 --> 00:01:51.220
Anybody else,
weâ€™re going onto the next one?

29
00:01:55.050 --> 00:01:59.080
Write a filter function that takes
a generator and a predicate.

30
00:01:59.080 --> 00:02:03.570
A predicate is a function that
returns a boolean true or false and

31
00:02:03.570 --> 00:02:08.120
produces a generator that produces only
the values approved by the predicate.

32
00:02:08.120 --> 00:02:11.800
So, in this case, we're going to be
filtering using the third function.

33
00:02:11.800 --> 00:02:17.500
The third function will
return true only if

34
00:02:17.500 --> 00:02:22.510
Its argument is divisible by 3,
so we'll use that to select

35
00:02:22.510 --> 00:02:27.140
factors of 3 from the sequence
given by the generator.

36
00:02:27.140 --> 00:02:31.515
So we'll have the fromTo
generator going to (0, 5),

37
00:02:31.515 --> 00:02:35.890
and the third function, and
it will return (0, 3) and

38
00:02:35.890 --> 00:02:40.440
then undefined.
&gt;&gt; Speaker 4: So,

39
00:02:40.440 --> 00:02:44.770
you're asking,
if I call this sequentially, five times,

40
00:02:44.770 --> 00:02:48.660
I should only get zero,
a three, or an undefined?

41
00:02:48.660 --> 00:02:51.070
Those arent the first three
results I should get.

42
00:02:51.070 --> 00:02:52.039
&gt;&gt; Douglas: Those are the results.

43
00:02:53.360 --> 00:02:55.677
&gt;&gt; Speaker 4: I call the three times

44
00:02:55.677 --> 00:02:59.220
the results yourselves write.
&gt;&gt; Douglas: Okay,

45
00:02:59.220 --> 00:03:04.270
let's look at filter, so did everybody
figure out they need to use a loop?

46
00:03:05.560 --> 00:03:09.950
Yeah, that was a key to this one,
so very good.

47
00:03:09.950 --> 00:03:13.580
We'll get to that, so
here's one way to write filter.

48
00:03:13.580 --> 00:03:15.070
Well, first off,
who got something that works?

49
00:03:15.070 --> 00:03:19.235
Very good, so filter takes a generator and
a predicate and

50
00:03:19.235 --> 00:03:24.420
returns a function, which will stay
in a loop, calling the generator,

51
00:03:24.420 --> 00:03:28.503
until it gets a value which
is approved by the predicate.

52
00:03:28.503 --> 00:03:31.836
In which case it will drop
out in return the value, and

53
00:03:31.836 --> 00:03:34.094
that's an acceptable way to do it.

54
00:03:34.094 --> 00:03:39.690
Although in EF6, my most favorite
new feature in EF6 is going to

55
00:03:39.690 --> 00:03:44.340
be tail recursion, or proper tail calls,
which would let us write it like this.

56
00:03:45.370 --> 00:03:50.410
We're going to have a recursive
function that I'm calling recur, and

57
00:03:50.410 --> 00:03:54.240
it will continue to call itself
until the predicate becomes true.

58
00:03:56.590 --> 00:03:59.550
So, this is where it calls itself, and

59
00:03:59.550 --> 00:04:04.860
the reason why this needs a new feature
in the language Is that, in ES6,

60
00:04:04.860 --> 00:04:09.920
the compiler is required
to optimize that call.

61
00:04:09.920 --> 00:04:13.160
So, instead of doing a call and
then a return,

62
00:04:13.160 --> 00:04:16.260
it will do a jump back
to the recur function.

63
00:04:16.260 --> 00:04:19.110
So, this function will
run in the same time and

64
00:04:19.110 --> 00:04:22.920
same memory pressure as the earlier one.

65
00:04:23.930 --> 00:04:28.200
At this point, there will no longer be an
advantage to using loops over recursion,

66
00:04:29.300 --> 00:04:35.260
and that's great, so
I'm really looking forward to that.

67
00:04:35.260 --> 00:04:37.930
Anybody else do a third approach or

68
00:04:37.930 --> 00:04:39.780
any other?
&gt;&gt; Speaker 3: I think there should

69
00:04:39.780 --> 00:04:42.960
be a way to use that [COUGH] pose

70
00:04:44.970 --> 00:04:49.960
function that we wrote earlier,
calling a function on a function.

71
00:04:49.960 --> 00:04:52.820
Well, we're not really calling
a function on a function, but

72
00:04:52.820 --> 00:04:57.379
it feels like we are.
&gt;&gt; Speaker 4: [INAUDIBLE] because

73
00:04:57.379 --> 00:04:58.899
they're so used to Python.

74
00:05:00.080 --> 00:05:04.966
You could, if you look back to it.
&gt;&gt; Douglas: Yeah, confused for

75
00:05:04.966 --> 00:05:06.510
awhile there.

76
00:05:08.140 --> 00:05:12.670
I actually think that we have
too many looping statements.

77
00:05:12.670 --> 00:05:16.870
If it were just me, it would be a loop,
and that would be it.

78
00:05:16.870 --> 00:05:23.652
You know, loop bracket, and
everything would happen in that.

79
00:05:23.652 --> 00:05:27.567
Yeah, because I find, well,
I'm not using loops much anymore.

80
00:05:27.567 --> 00:05:31.504
But, when I do, I tend to want
to break out of the middle, and

81
00:05:31.504 --> 00:05:35.598
we've got a loop syntax,
which says will break out of the top,

82
00:05:35.598 --> 00:05:40.830
will break out of the bottom, but
that's not usually where I'm going.

83
00:05:40.830 --> 00:05:44.300
If I'm using a loop that
is that discipline,

84
00:05:44.300 --> 00:05:45.940
I probably don't need
to use a loop at all.

85
00:05:48.380 --> 00:05:49.020
Anybody else?

86
00:05:51.800 --> 00:05:53.770
Okay, so shall we go on to another one?

87
00:05:53.770 --> 00:05:54.880
Sure, why not?

88
00:05:54.880 --> 00:05:56.730
Okay, so let's do one more,

89
00:05:58.260 --> 00:06:01.260
this time we're going to concatenate
a couple of functions together.

90
00:06:02.490 --> 00:06:05.850
So, write a concat function
that takes two generators and

91
00:06:05.850 --> 00:06:08.470
produces a generator that
combines their sequences.

92
00:06:08.470 --> 00:06:13.036
So, we're going to call concat, we're
going to pass it a generator, which is

93
00:06:13.036 --> 00:06:18.147
from (2, 0) to 3, and from (2, 0) to 2,
and that will give us a new generator,

94
00:06:18.147 --> 00:06:23.155
which will produce the sequence (0,
1), (2, 0), 1, and then undefined.

95
00:06:25.565 --> 00:06:29.165
So, here's concat,
it takes two generator functions.

96
00:06:29.165 --> 00:06:34.170
It has a variable to remember what
the current generator function is.

97
00:06:34.170 --> 00:06:38.540
It returns a function which gets
a value from the current generator.

98
00:06:38.540 --> 00:06:41.400
If a value is not undefined,
it returns it.

99
00:06:41.400 --> 00:06:45.490
Otherwise it replaces the current
generator with the next generator and

100
00:06:45.490 --> 00:06:46.620
returns a value from that.

101
00:06:47.775 --> 00:06:51.175
So who got something that works for good.

102
00:06:51.175 --> 00:06:55.593
Anyone take a different approach.
&gt;&gt; Speaker 4: [INAUDIBLE]

103
00:06:55.593 --> 00:07:02.361
temporary generator.

104
00:07:02.361 --> 00:07:04.586
&gt;&gt; Douglas: Because.

105
00:07:04.586 --> 00:07:09.080
Next year, when we have the...

106
00:07:09.080 --> 00:07:12.900
thing, then I want to write it this way.

107
00:07:12.900 --> 00:07:16.720
Whereas I can take any
number of generators, and

108
00:07:16.720 --> 00:07:20.950
I'm going to be using the element function
that we wrote earlier to help me step

109
00:07:20.950 --> 00:07:25.680
through that array of generators,
and I'll just Load the next one in.

110
00:07:27.420 --> 00:07:30.460
So that's why,
I didn't mean to show off but but

111
00:07:30.460 --> 00:07:34.740
that's why.
&gt;&gt; Speaker 2: What are the gens?

112
00:07:36.090 --> 00:07:39.765
&gt;&gt; Speaker 4: Let's see the previous

113
00:07:39.765 --> 00:07:42.951
slide.
&gt;&gt; Speaker 4: Layer returning

114
00:07:42.951 --> 00:07:47.380
gen instead of value.
&gt;&gt; Douglas: returning the result of

115
00:07:47.380 --> 00:07:53.270
the Holocaust and
call easy value as I see value it was G.M.

116
00:07:53.270 --> 00:07:55.960
and if it doesn't succeed
you're calling it a.

117
00:07:55.960 --> 00:07:59.950
You know she just tends to just
get to the next generator.

118
00:08:01.030 --> 00:08:02.040
Call it the call that each other

119
00:08:07.880 --> 00:08:13.020
pretty tough assignment one
changes because it's the first

120
00:08:13.020 --> 00:08:17.365
time three cause just one
second time three cause

121
00:08:17.365 --> 00:08:23.970
your third time three cause you're passing

122
00:08:25.120 --> 00:08:29.610
suppose you're one to the fourth time
three because Jack money gets under five

123
00:08:30.760 --> 00:08:35.910
cents JANDA Gentoo returns
a result of Gentoo or

124
00:08:35.910 --> 00:08:39.170
we have a OK.
&gt;&gt; Speaker 4: Yet

125
00:08:39.170 --> 00:08:41.250
to return to tell you I
was expecting to return so

126
00:08:41.250 --> 00:08:44.310
That's as well the next stuff.
&gt;&gt; Douglas: Yeah.

127
00:08:44.310 --> 00:08:45.150
&gt;&gt; Speaker 4: You said value

128
00:08:45.150 --> 00:08:45.950
equals gen2.
&gt;&gt; Douglas: Right.

129
00:08:45.950 --> 00:08:48.450
I couldn't have done that
business inside of vf.

130
00:08:48.450 --> 00:08:50.770
I could have reversed it.
&gt;&gt; Speaker 4: Okay,

131
00:08:50.770 --> 00:08:51.610
I gotcha you now.
&gt;&gt; Douglas: Yeah, right.

132
00:08:51.610 --> 00:08:55.240
You think it would have been
clearer doing it that way?

133
00:08:55.240 --> 00:08:56.250
&gt;&gt; Speaker 4: Well, I prefer to have one

134
00:08:56.250 --> 00:09:01.333
return than two, I guess.
&gt;&gt; Douglas: I'll think about that.

135
00:09:01.333 --> 00:09:02.893
&gt;&gt; Speaker 2: So, when your next function

136
00:09:02.893 --> 00:09:04.948
your
&gt;&gt; Douglas: Then next.

137
00:09:04.948 --> 00:09:07.330
&gt;&gt; Speaker 2: [COUGH]

138
00:09:07.330 --> 00:09:08.107
What's element?

139
00:09:08.107 --> 00:09:09.824
&gt;&gt; Douglas: Element is a function we wrote

140
00:09:09.824 --> 00:09:12.172
this morning.
&gt;&gt; Speaker 2: Yeah.

141
00:09:12.172 --> 00:09:14.623
&gt;&gt; Douglas: You remember that.

142
00:09:14.623 --> 00:09:15.437
&gt;&gt; Speaker 2: It pops off,

143
00:09:15.437 --> 00:09:17.962
it pops off to the next.
&gt;&gt; Douglas: Yeah.

144
00:09:17.962 --> 00:09:19.478
&gt;&gt; Speaker 2: Just pops.

145
00:09:19.478 --> 00:09:21.011
&gt;&gt; Douglas: It returns the next thing from

146
00:09:21.011 --> 00:09:23.355
an array.
&gt;&gt; Speaker 2: Not because of pop it.

147
00:09:23.355 --> 00:09:28.134
&gt;&gt; Douglas: You should,

148
00:09:28.134 --> 00:09:34.720
we did it twice
&gt;&gt; Speaker 2: Yeah, there it is.

