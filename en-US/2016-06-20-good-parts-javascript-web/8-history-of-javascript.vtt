WEBVTT

1
00:00:00.000 --> 00:00:03.780
[MUSIC]

2
00:00:03.780 --> 00:00:07.224
&gt;&gt; Douglas Crockford: And
then there was JavaScript, so to recap,

3
00:00:07.224 --> 00:00:10.390
first, there was The Big Bang.

4
00:00:10.390 --> 00:00:13.270
Then there was The Down of Man and
then there was JavaScript.

5
00:00:14.620 --> 00:00:19.300
So I was the first person to recognize
that JavaScript had good parts,

6
00:00:19.300 --> 00:00:22.950
that was the first important
discovery of the 21st century.

7
00:00:22.950 --> 00:00:27.430
And when I announced my results
they were met with wild skepticism.

8
00:00:27.430 --> 00:00:30.780
No way, there cannot possibly
be any good parts in JavaScript.

9
00:00:30.780 --> 00:00:33.530
But it turns out that my
results were validated and in

10
00:00:33.530 --> 00:00:36.330
fact JavaScript has some very good parts.
&gt;&gt; Speaker 2: This is the most important

11
00:00:36.330 --> 00:00:39.610
discovery of the 21st Century.

12
00:00:39.610 --> 00:00:41.995
And you made this?
&gt;&gt; Douglas Crockford: Yeah, I did that.

13
00:00:41.995 --> 00:00:43.390
&gt;&gt; Speaker 2: [INAUDIBLE]

14
00:00:43.390 --> 00:00:44.350
&gt;&gt; Douglas Crockford: So I'll give

15
00:00:44.350 --> 00:00:46.930
you some historical background.

16
00:00:46.930 --> 00:00:50.720
At the National Center for Supercomputing
Applications at the University of

17
00:00:50.720 --> 00:00:54.780
Illinois, Urbana-Champaign, there
are a bunch of kids who are developing

18
00:00:54.780 --> 00:00:58.350
a client program for the Internet.

19
00:00:58.350 --> 00:01:02.790
At that time, there were a number of
protocols that were being considered for

20
00:01:02.790 --> 00:01:06.260
the way that the Internet was going
to deliver information to people.

21
00:01:06.260 --> 00:01:08.920
There was WAIS, Archie, Gopher,

22
00:01:08.920 --> 00:01:13.730
FTP, Finger and a few others and
the World Wide Web.

23
00:01:14.730 --> 00:01:17.970
And these guys didn't know which
of those was going to win.

24
00:01:17.970 --> 00:01:21.446
So they wrote a program that worked for
all of them and

25
00:01:21.446 --> 00:01:23.664
they called the program mosaic.

26
00:01:23.664 --> 00:01:27.095
And because of the way that
they implemented the viewer for

27
00:01:27.095 --> 00:01:28.292
the World Wide Web.

28
00:01:28.292 --> 00:01:32.755
The World Wide Web one and the thing
that they did was they came up with

29
00:01:32.755 --> 00:01:36.500
something called the image
tag which allowed.

30
00:01:36.500 --> 00:01:38.310
The web to display images,

31
00:01:38.310 --> 00:01:41.860
which is something that the other
formats couldn't easily do.

32
00:01:41.860 --> 00:01:45.780
And because the web could display images,
it could look like what you wanted it to

33
00:01:45.780 --> 00:01:50.790
be even if it wasn't what you wanted
it to be, and that was efficient and

34
00:01:50.790 --> 00:01:54.110
that allowed the web to win and
everything took off from there.

35
00:01:55.250 --> 00:01:58.900
A bunch of the people from that
project where it lured to California,

36
00:01:58.900 --> 00:02:01.880
where they became part of
a company called Netscape.

37
00:02:01.880 --> 00:02:06.800
Netscape made the first commercial web
browser called Netscape Navigator,

38
00:02:07.900 --> 00:02:10.150
and it was a huge hit.

39
00:02:12.390 --> 00:02:16.910
It kinda disrupted everything, and
they were then planning what to do for

40
00:02:16.910 --> 00:02:18.540
Navigator 2.

41
00:02:18.540 --> 00:02:23.100
And they added a bunch of new features
including support for electronic commerce.

42
00:02:23.100 --> 00:02:26.130
They also wanted to make it easy for
end user programming.

43
00:02:27.490 --> 00:02:32.252
They remembered something that had been
on the Macintosh called HyperCard.

44
00:02:32.252 --> 00:02:37.385
HyperCard was a simple application
creation program based

45
00:02:37.385 --> 00:02:44.169
on a simple metaphor of stacks of cards
and it was an event driven script thing.

46
00:02:44.169 --> 00:02:46.397
And it was remarkably easy to use and

47
00:02:46.397 --> 00:02:50.390
they wanted something like
that in the web browser.

48
00:02:50.390 --> 00:02:52.560
So they gave that job to this guy.

49
00:02:52.560 --> 00:02:57.520
This is Brendan Eich very smart guy, he'd
been a kernel hacker at Silicon Graphics,

50
00:02:57.520 --> 00:03:01.960
his idea was he would write
a Scheme interpreter to do this.

51
00:03:01.960 --> 00:03:06.450
And he was told no don't do Scheme,
do a language that people like.

52
00:03:06.450 --> 00:03:09.240
Make it look like Joller,
Visual Basic, something popular.

53
00:03:09.240 --> 00:03:11.000
This is for the kids.

54
00:03:11.000 --> 00:03:15.806
So he was given ten days to
create a prototype of this new

55
00:03:15.806 --> 00:03:19.685
interactive browser and in those ten days.

56
00:03:19.685 --> 00:03:20.668
He designed and

57
00:03:20.668 --> 00:03:25.440
implemented a new programming language
which is an amazing achievement.

58
00:03:26.810 --> 00:03:31.253
So from Java he took syntax.

59
00:03:31.253 --> 00:03:35.192
In fact, most of the things that are wrong
with JavaScript are things that were

60
00:03:35.192 --> 00:03:36.332
inherited from Java.

61
00:03:36.332 --> 00:03:40.226
There's a language called Scheme
which is a dialect of Lisp that was

62
00:03:40.226 --> 00:03:41.330
developed at MIT.

63
00:03:42.770 --> 00:03:48.490
And Scheme has lambdas,
that's what Scheme calls its functions and

64
00:03:48.490 --> 00:03:52.240
he took Scheme functions and
he put them into his language.

65
00:03:52.240 --> 00:03:56.450
And there's a dialect of Smalltalk
called Self that was developed first at

66
00:03:56.450 --> 00:03:59.200
Xerox Parc and then later at Sun Labs.

67
00:03:59.200 --> 00:04:04.639
Self, took Smalltalk, which was
the first modern classical language,

68
00:04:04.639 --> 00:04:08.069
object oriented language and
made it better.

69
00:04:08.069 --> 00:04:10.446
Both better performance and

70
00:04:10.446 --> 00:04:16.195
more expressive user to use by
removing one feature from Smalltalk.

71
00:04:16.195 --> 00:04:19.930
It's uncommon where someone makes a new
language by removing things from another

72
00:04:19.930 --> 00:04:20.630
language.

73
00:04:20.630 --> 00:04:22.580
Usually it's adding more stuff.

74
00:04:22.580 --> 00:04:25.170
The thing they removed from
Smalltalk was classes.

75
00:04:26.300 --> 00:04:30.670
By removing classes,
they could make it faster, and

76
00:04:30.670 --> 00:04:32.310
they could make it much better to program.

77
00:04:33.920 --> 00:04:36.900
And so, he took out idea and
put it into his language and

78
00:04:36.900 --> 00:04:38.680
that Cape called it LiveScript.

79
00:04:40.040 --> 00:04:44.120
Now, while that was going on there
was another language that was being

80
00:04:44.120 --> 00:04:46.580
developed by a guy at
Sun named James Gosling.

81
00:04:46.580 --> 00:04:48.980
He started with something
called Green talk.

82
00:04:48.980 --> 00:04:53.810
He was then moved into a new company that
was developing set top box applications

83
00:04:53.810 --> 00:04:56.440
their his language became called oak.

84
00:04:56.440 --> 00:05:00.100
That company failed so
his brought back into Sun and

85
00:05:01.210 --> 00:05:04.020
they try to figure out what do
we do with this language now.

86
00:05:04.020 --> 00:05:07.410
The Internet was becoming popular,
the web becoming popular,

87
00:05:07.410 --> 00:05:10.650
they wrote a web browser in this language.

88
00:05:10.650 --> 00:05:16.150
That browser called HotJava was
wildly successful at least for

89
00:05:16.150 --> 00:05:19.520
a short time and the language that.

90
00:05:19.520 --> 00:05:24.760
They wrote it in, had its name changed
to Java and it became wildly successful.

91
00:05:26.430 --> 00:05:29.860
So much so
that some were making noise that

92
00:05:31.600 --> 00:05:35.130
the Java language was going
to be the future of software.

93
00:05:35.130 --> 00:05:39.730
That if you design all of your programs to
target the Java virtual machine instead of

94
00:05:39.730 --> 00:05:42.799
the operating system we can
be liberated from Microsoft.

95
00:05:44.560 --> 00:05:50.320
And that was a wildly successful
message and Java shoots up like that.

96
00:05:50.320 --> 00:05:54.660
It is the most successful launch of
a new programming language in history.

97
00:05:54.660 --> 00:05:55.450
It's amazing.

98
00:05:57.360 --> 00:06:00.000
At Netscape,
they're making similar claims.

99
00:06:00.000 --> 00:06:04.200
They're saying if you design your
applications to target the web browser.

100
00:06:04.200 --> 00:06:06.580
It doesn't matter what
operating system we're on, and

101
00:06:06.580 --> 00:06:08.460
again, we can be liberated from Microsoft.

102
00:06:09.920 --> 00:06:13.210
Now these two companies realized,
if we're both going after Microsoft

103
00:06:13.210 --> 00:06:16.160
we'd probably better work
together because if we don't.

104
00:06:16.160 --> 00:06:19.410
Microsoft play us off against
each other and we'll both lose.

105
00:06:19.410 --> 00:06:24.212
So they form an alliance, and
the first thing they agree

106
00:06:24.212 --> 00:06:28.413
on is that Netscape adds
Java to the web browser.

107
00:06:28.413 --> 00:06:33.095
And in exchange for that,
Sun will drop their hot java browser,

108
00:06:33.095 --> 00:06:36.540
which wasn't very complete anyway.

109
00:06:36.540 --> 00:06:38.470
So Chuck, that's easy to agree to.

110
00:06:39.510 --> 00:06:40.395
Step number two,

111
00:06:40.395 --> 00:06:44.550
Sun says you have to kill LiveScript
because that's an embarrassment.

112
00:06:44.550 --> 00:06:48.230
We're seeing that Java is the last
programming language you'll ever need.

113
00:06:48.230 --> 00:06:51.080
You can't then also be
introducing another new language

114
00:06:51.080 --> 00:06:52.890
you're just making us look at that.

115
00:06:52.890 --> 00:06:54.849
So kill it.

116
00:06:54.849 --> 00:06:57.183
Netscape refused to kill it for
two reasons.

117
00:06:57.183 --> 00:07:01.838
One is they wanted a language for
beginners and Java and that language you

118
00:07:01.838 --> 00:07:06.980
need a lot of specific knowledge
about Java just to write hello world.

119
00:07:06.980 --> 00:07:10.880
They wanted something with a much
lower barrier to entry but

120
00:07:10.880 --> 00:07:12.240
there's also a practical problem.

121
00:07:13.410 --> 00:07:20.240
They wanted to launch the new browser
right away and so the way they put Java in

122
00:07:20.240 --> 00:07:25.310
was they had Java talk to LiveScript
through an interface called LiveConnect.

123
00:07:26.710 --> 00:07:32.190
So LiveScript could talk to
the browser Java can talk to

124
00:07:32.190 --> 00:07:37.830
LiveScript through LiveConnect and if they
took LiveScript out, Java wouldn't work.

125
00:07:38.830 --> 00:07:41.880
And so, in order to get Java in there
they'd have to delay the launching of

126
00:07:41.880 --> 00:07:43.600
the new browser and
they didn't want to do that,

127
00:07:43.600 --> 00:07:47.570
because they were on Internet time and
they couldn't afford to wait that long.

128
00:07:48.680 --> 00:07:51.890
So their alliance was at an impasse and

129
00:07:51.890 --> 00:07:56.510
almost failed when one of
the founders of Netscape maybe as

130
00:07:56.510 --> 00:08:00.710
a joke suggested that they change
the name of LiveScript to JavaScript.

131
00:08:02.340 --> 00:08:09.810
And that they position it not as a new
language but as a subset of Java,

132
00:08:09.810 --> 00:08:14.020
interpreted Java, which was silly
because Java was interpreted Java.

133
00:08:14.020 --> 00:08:16.240
It was Java's stupid little brother.

134
00:08:16.240 --> 00:08:19.180
So they went out and held a press
conference in which they lied about

135
00:08:19.180 --> 00:08:20.850
the relationship of these two languages.

136
00:08:22.700 --> 00:08:26.970
And echoes of that lie still reverberate
pretty loudly through the Internet.

137
00:08:28.530 --> 00:08:32.800
Meanwhile, Microsoft has noticed that
there are these two companies in

138
00:08:32.800 --> 00:08:36.210
California that are getting
ready to destroy Microsoft.

139
00:08:36.210 --> 00:08:37.940
And they weren't ready for that yet.

140
00:08:37.940 --> 00:08:42.020
So Microsoft had completely
missed the web in the Internet.

141
00:08:42.020 --> 00:08:44.790
They thought the future of
telecommunications was going to be fax

142
00:08:44.790 --> 00:08:45.390
and cable TV.

143
00:08:47.450 --> 00:08:51.140
So they went out,
they bought a browser company.

144
00:08:51.140 --> 00:08:54.660
It was another spin-off out
of Illinois called Spyglass.

145
00:08:54.660 --> 00:08:58.700
Took their thing,
relabeled it as Internet Explorer, and

146
00:08:58.700 --> 00:09:01.220
decided we need to get one of
these JavaScript things too.

147
00:09:01.220 --> 00:09:05.770
So they put a team on reverse
engineering the first JavaScript engine.

148
00:09:05.770 --> 00:09:09.330
Now it turns out ten days is way
too short a time to design and

149
00:09:09.330 --> 00:09:13.430
implement a programming language, and
there are lots of errors, lots of bugs,

150
00:09:13.430 --> 00:09:16.390
lots of design defects, lots of blunders.

151
00:09:16.390 --> 00:09:22.010
The Microsoft team discovers and carefully
documents all of them and replicates them.

152
00:09:24.860 --> 00:09:27.920
Now usually, when Microsoft
goes to knock something off,

153
00:09:27.920 --> 00:09:31.550
they can't help doing
their own thing to it.

154
00:09:31.550 --> 00:09:37.330
For example, when Bill Gates told them I
want a Macintosh they built Windows, okay?

155
00:09:37.330 --> 00:09:41.730
He didn't ask for Windows he asked for
Macintosh and that's

156
00:09:41.730 --> 00:09:47.350
how goes there but
on this case they got it exactly right.

157
00:09:47.350 --> 00:09:51.690
And in fact, they were able to keep
the write once run everywhere promise that

158
00:09:51.690 --> 00:09:53.180
Java was failing to keep.

159
00:09:55.910 --> 00:09:58.027
And in fact, having not done that,

160
00:09:58.027 --> 00:10:02.630
we wouldn't be talking about this language
today but will get to that later.

161
00:10:02.630 --> 00:10:07.226
So but they couldn't call it JavaScript
because Sun had claimed ownership of

162
00:10:07.226 --> 00:10:08.930
the JavaScript trademark.

163
00:10:08.930 --> 00:10:12.175
Even though they had nothing to do with
the development of the language because

164
00:10:12.175 --> 00:10:13.611
they claimed to own the word Java.

165
00:10:13.611 --> 00:10:18.419
And in fact, they were shaking down coffee
companies to daring to have the world

166
00:10:18.419 --> 00:10:20.520
java in their URLs, this is true.

167
00:10:22.120 --> 00:10:27.250
So, they call it JScript, just as they
call their implementation of Java J++,

168
00:10:27.250 --> 00:10:31.920
because they couldn't get
a license to use the trademark.

169
00:10:34.410 --> 00:10:38.081
So, now Netscape is alarmed that Microsoft
is going to embrace and extend us,

170
00:10:38.081 --> 00:10:40.206
so we're gonna lose control of JavaScript.

171
00:10:40.206 --> 00:10:41.067
What are we gonna do?

172
00:10:41.067 --> 00:10:45.025
We need to make a standard, so
they went to W3C, and said, W3C,

173
00:10:45.025 --> 00:10:48.300
we have developed a programming
language for the web.

174
00:10:48.300 --> 00:10:50.500
We'd like you to help
us make it a standard.

175
00:10:50.500 --> 00:10:54.720
Now turns out W3C had been waiting for
a chance to tell Netscape to go to hell.

176
00:10:57.300 --> 00:10:58.590
So they told Netscape to go to hell.

177
00:11:00.090 --> 00:11:01.630
So Netscape then went to ISO.

178
00:11:01.630 --> 00:11:05.350
Eventually they end up with the European
Computer Manufacturers Association.

179
00:11:06.370 --> 00:11:09.280
Which is a long way to go for
a California software company.

180
00:11:10.960 --> 00:11:13.590
But ECMA agrees,
yes we'll help you make a standard.

181
00:11:13.590 --> 00:11:14.740
So they convene a committee.

182
00:11:14.740 --> 00:11:17.609
Microsoft joins the committee,
Microsoft dominates the committee.

183
00:11:19.090 --> 00:11:24.030
Basically, the standard is
based on Microsoft's Notes

184
00:11:24.030 --> 00:11:28.790
that they made in reverse engineering
the original JavaScript interpreter.

185
00:11:30.070 --> 00:11:34.280
And they insist that all of those bugs,
all those blunders, all those defects

186
00:11:34.280 --> 00:11:39.300
remain in the standard where
they still exist today.

187
00:11:40.900 --> 00:11:44.620
So, there's a lot that's intentionally
wrong which will never be repaired.

188
00:11:46.300 --> 00:11:49.690
Now, when they want to publish it
was what we call the standard,

189
00:11:49.690 --> 00:11:53.050
they can't call it JavaScript
because it's a sun trademark.

190
00:11:53.050 --> 00:11:57.320
So, they kick around other titles, web
script, net script, they can't agree so,

191
00:11:57.320 --> 00:11:59.640
it's published with the working title.

192
00:11:59.640 --> 00:12:04.598
ECMAScript which is maybe the worst name
ever put on a programming language and

193
00:12:04.598 --> 00:12:09.409
confusion still exists today what's
the difference between JavaScript,

194
00:12:09.409 --> 00:12:10.999
J-Script ECMAScript.

195
00:12:10.999 --> 00:12:15.736
There are people out there who think that
they are three remarkably similar but

196
00:12:15.736 --> 00:12:17.396
different now languages.

197
00:12:17.396 --> 00:12:22.238
No, their three silly names for
one silly language, so

198
00:12:22.238 --> 00:12:25.856
JavaScript is a standardized language.

199
00:12:25.856 --> 00:12:31.446
The edition that is in most
versions of IE is the Third Edition

200
00:12:31.446 --> 00:12:35.732
which was published in December of 1999.

201
00:12:35.732 --> 00:12:40.499
Before that one was finished work began
on a fourth edition which went on for

202
00:12:40.499 --> 00:12:42.400
ten years and was abandoned.

203
00:12:42.400 --> 00:12:47.345
In 2009, a fifth edition was published
which defines two languages, a Strict and

204
00:12:47.345 --> 00:12:51.900
Default, we'll talk more about
that dialect this afternoon.

205
00:12:51.900 --> 00:12:58.870
And then recently, the sixth edition
was published and which will eventually

206
00:12:58.870 --> 00:13:02.190
find its way into browsers, we'll talk
more about that on the third day.

207
00:13:04.480 --> 00:13:06.560
So where do bad parts come from?

208
00:13:06.560 --> 00:13:08.410
And I think there are three sources.

209
00:13:08.410 --> 00:13:12.960
One is legacy,
a lot of what happens in any language

210
00:13:12.960 --> 00:13:16.760
is repeating mistakes that
happened in previous languages.

211
00:13:16.760 --> 00:13:20.900
And most of what is wrong in
JavaScript is not unique to JavaScript,

212
00:13:20.900 --> 00:13:23.130
it's wrong in lots of other languages too.

213
00:13:23.130 --> 00:13:26.524
For some reason,
it just looks stupider in JavaScript,

214
00:13:26.524 --> 00:13:30.070
I don't know why that is the case but
it is clearly the case.

215
00:13:30.070 --> 00:13:33.661
Another is good intentions, there are a
number of features that were added to

216
00:13:33.661 --> 00:13:36.551
the language to make it easier
which failed to make it easier.

217
00:13:36.551 --> 00:13:40.346
Things like with semi-colon insertion,
type coercion, when

218
00:13:40.346 --> 00:13:45.266
imply global variables were all intended
to make the language easier for people but

219
00:13:45.266 --> 00:13:49.711
they actually make it much harder at
least for professional programmers.

220
00:13:49.711 --> 00:13:53.612
And then haste, ten days is just
way too short a time to design and

221
00:13:53.612 --> 00:13:56.600
implement a programming language.

222
00:13:56.600 --> 00:13:58.170
Brendan did not intend for

223
00:13:58.170 --> 00:14:03.050
his proof of concept to be shipped
as a product but Netscape did that.

224
00:14:03.050 --> 00:14:07.150
I think that was inexcusable and
he suffered for that.

225
00:14:07.150 --> 00:14:10.470
It was an unfortunate thing, so for

226
00:14:10.470 --> 00:14:15.180
the most part are give you a comparison.

227
00:14:16.500 --> 00:14:21.720
Maybe the best designed programming
language in history was Smalltalk 80.

228
00:14:21.720 --> 00:14:26.140
Xerox PARC spent a decade designing,
refining,

229
00:14:26.140 --> 00:14:27.960
testing, improving that language.

230
00:14:29.300 --> 00:14:33.484
They spent almost as
many years as Netscape

231
00:14:33.484 --> 00:14:37.328
spent days in assigning the language.

232
00:14:37.328 --> 00:14:42.130
And I think Xerox got it right even
though the community did not agree.

233
00:14:43.230 --> 00:14:45.980
So for the most part the bad parts
can be avoided which is great.

234
00:14:45.980 --> 00:14:49.660
The problem with the bad parts isn't that
they are useless it's they are dangerous

