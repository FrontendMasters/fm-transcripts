WEBVTT

1
00:00:00.000 --> 00:00:04.087
[MUSIC]

2
00:00:04.087 --> 00:00:07.475
&gt;&gt; Douglas: So one of the nice things
about this model is it completely changes

3
00:00:07.475 --> 00:00:09.600
the economics of hacking.

4
00:00:09.600 --> 00:00:13.900
In most architectures,
if you can confuse an object, basically,

5
00:00:13.900 --> 00:00:16.720
that gives you access to
everything in the system.

6
00:00:17.830 --> 00:00:18.800
Whereas in this model,

7
00:00:18.800 --> 00:00:23.170
if you can confuse an object, you get
the capabilities of that object but

8
00:00:23.170 --> 00:00:28.250
only that and in most cases-
&gt;&gt; Speaker 2: So is a confusing objects?

9
00:00:28.250 --> 00:00:30.643
&gt;&gt; Douglas: Yeah.
The object is not created correctly and

10
00:00:30.643 --> 00:00:33.966
you can cause it to do something
that it's not supposed to do.

11
00:00:33.966 --> 00:00:34.711
&gt;&gt; Speaker 2: Okay.

12
00:00:34.711 --> 00:00:37.373
&gt;&gt; Douglas: You might be able to get
control of what that object can do but

13
00:00:37.373 --> 00:00:40.100
you don't get control of
everything that the system can do.

14
00:00:42.430 --> 00:00:44.630
So we changed the economics of hacking,

15
00:00:44.630 --> 00:00:48.410
there's a really nice talk
on YouTube about this stuff,

16
00:00:48.410 --> 00:00:52.230
The Lazy Programmer's Guide to
Secure Computing by Mark Stiegler.

17
00:00:52.230 --> 00:00:56.890
Stiegler's premise is that
the best programmers are lazy but

18
00:00:56.890 --> 00:00:59.639
they're lazy in a way
which avoids future work.

19
00:01:01.230 --> 00:01:03.981
And if you take that approach that

20
00:01:03.981 --> 00:01:08.312
you tend to lead yourself
to secure systems as well.

21
00:01:10.840 --> 00:01:15.663
&gt;&gt; Douglas: So this morning we did this
exercise where we've found this leakage

22
00:01:15.663 --> 00:01:22.160
because of the unexpected thing that this
does which compromised our security.

23
00:01:22.160 --> 00:01:25.820
So we need to understand for this stuff,
we need to plan for it, we need to improve

24
00:01:25.820 --> 00:01:29.430
the language, we need to improve our
understanding of the language so

25
00:01:29.430 --> 00:01:34.090
that we're not compromised by it.

26
00:01:34.090 --> 00:01:39.180
That attack is an example of a confusion
attack, and that's why I hate confusion so

27
00:01:39.180 --> 00:01:43.330
much because confusion is what
causes our systems to fail.

28
00:01:44.700 --> 00:01:46.280
Confusion aids the enemy.

29
00:01:46.280 --> 00:01:51.370
Bugs are a manifestation of confusion but
also security exploits are manifestation

30
00:01:51.370 --> 00:01:56.050
of confusion and
usually attackers get to take over

31
00:01:56.050 --> 00:02:00.450
a systems when their understanding
of our systems are better than ours.

32
00:02:00.450 --> 00:02:05.960
And unfortunately, that tends to
happen a lot and the way we stop that

33
00:02:05.960 --> 00:02:08.840
is by getting a better understanding
of our own systems and

34
00:02:08.840 --> 00:02:13.150
we do that by eliminating is many
sources of confusion as possible.

35
00:02:13.150 --> 00:02:18.570
I have no tolerance for confusion, I want
to eliminate as much confusion as I can.

36
00:02:18.570 --> 00:02:24.424
&gt;&gt; Speaker 3: Confusion attack is when you
don't understand how [INAUDIBLE] it works.

37
00:02:24.424 --> 00:02:28.293
&gt;&gt; Douglas: We think the system works
in a particular way and the attacker by

38
00:02:28.293 --> 00:02:33.340
studying those figures out that's not how
we work and he's able to exploit that.

39
00:02:33.340 --> 00:02:37.041
In fact, virtually all security
exploits are like that,

40
00:02:37.041 --> 00:02:41.951
that we never intentionally go public and
then into production with code that

41
00:02:41.951 --> 00:02:45.123
we know has security
vulnerabilities in it and yet

42
00:02:45.123 --> 00:02:50.110
everything that's ever been deployed
has security vulnerabilities in it and

43
00:02:50.110 --> 00:02:54.760
it's because we're confused
about how our own systems work.

44
00:02:54.760 --> 00:02:55.710
We need to stop doing that.

45
00:02:58.480 --> 00:03:01.100
So with great complexity
comes great confusion.

46
00:03:01.100 --> 00:03:06.000
So that's why I'm minimalist, I want to
find the simplest solution in all cases

47
00:03:06.000 --> 00:03:09.340
because those are the things that
are easiest to reason about.

48
00:03:09.340 --> 00:03:11.780
So we should keep everything
as simple as we can.

49
00:03:11.780 --> 00:03:14.870
We should keep our code
bases as clean as we can.

50
00:03:14.870 --> 00:03:19.340
If we allow our code bases to get crufty
then they become harder to understand more

51
00:03:19.340 --> 00:03:21.450
likely to be confusing and
will get exploited.

52
00:03:23.970 --> 00:03:25.580
So we should always code well.

53
00:03:25.580 --> 00:03:28.620
Good code is ultimately cheaper
to produce than bad code.

54
00:03:28.620 --> 00:03:30.890
So we should always make good code.

55
00:03:30.890 --> 00:03:32.960
Good code is easier to reason about.

56
00:03:32.960 --> 00:03:36.530
Code that is difficult to reason about
is more likely to be problematic and

57
00:03:36.530 --> 00:03:39.430
we should have strict
conformance to good style rules.

58
00:03:39.430 --> 00:03:42.040
Which means that if we're
writing in JavaScript

59
00:03:42.040 --> 00:03:45.510
everything should pass
JSLint without exceptions.

60
00:03:45.510 --> 00:03:49.460
We should not put anything out on
the web which is not at least that good.

61
00:03:52.590 --> 00:03:56.080
You should never trust a machine that
is not under your absolute control and

62
00:03:56.080 --> 00:03:58.680
then I'm not even sure about all of those.

63
00:03:58.680 --> 00:04:02.930
But one thing for sure,
you must never trust the browser.

64
00:04:04.150 --> 00:04:06.860
It cannot and
will not protect your interests.

65
00:04:06.860 --> 00:04:11.030
You need to properly filter and validate
all inputs that you get from the browser,

66
00:04:11.030 --> 00:04:14.100
need to properly encode everything
that you send to the browser,

67
00:04:14.100 --> 00:04:19.380
the context of that encoding and
decoding and filtering is critical.

68
00:04:19.380 --> 00:04:22.510
You need to filter and
code for the correct context.

69
00:04:22.510 --> 00:04:25.050
So let me tell you what I mean
about trusting the browser.

70
00:04:25.050 --> 00:04:28.850
So this is a true story, a few years ago,

71
00:04:28.850 --> 00:04:32.100
a friend of mine was
going to go visit China.

72
00:04:32.100 --> 00:04:35.790
So he bought a ticket
on a famous airline and

73
00:04:35.790 --> 00:04:37.870
it's an expensive flight so
he bought a coach ticket.

74
00:04:39.070 --> 00:04:42.574
And then, he realized, wow, it's a really
long flight, it's really uncomfortable,

75
00:04:42.574 --> 00:04:44.247
it be much nicer to
upgrade to first class.

76
00:04:44.247 --> 00:04:47.609
And so,
he went to the website of the airline, and

77
00:04:47.609 --> 00:04:50.600
look to see if upgrades were available.

78
00:04:50.600 --> 00:04:54.700
And they were, but you needed a certain
number of upgrade certificates, and

79
00:04:54.700 --> 00:04:59.110
it told him his number was zero,
because he doesn't fly all that often.

80
00:04:59.110 --> 00:05:02.345
So he was very disappointed
until he opened the debugger.

81
00:05:02.345 --> 00:05:05.202
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: He found the variable that

82
00:05:05.202 --> 00:05:07.450
contained his number of certificates.

83
00:05:07.450 --> 00:05:09.555
And he flew first class to China.

84
00:05:09.555 --> 00:05:11.866
&gt;&gt; Douglas: It's a true story.

85
00:05:14.145 --> 00:05:18.970
&gt;&gt; Douglas: The reason that worked was,
the guys who designed that system assumed

86
00:05:18.970 --> 00:05:23.956
that there is a certain URL that could
only be generated if a certain set of

87
00:05:23.956 --> 00:05:30.195
conditions were true, and they were
relying on the browser to guarantee that.

88
00:05:30.195 --> 00:05:33.055
And the browser will not guarantee that,
you cannot trust the browser.

89
00:05:34.235 --> 00:05:35.375
Another browser story.

90
00:05:35.375 --> 00:05:39.785
In the first days as an e-commerce when
online stores first started happening,

91
00:05:41.375 --> 00:05:45.390
they didn't understand yet
how to scale web systems.

92
00:05:45.390 --> 00:05:46.270
Right.
They tried to do

93
00:05:46.270 --> 00:05:48.650
all of the work in one server and
very quickly the data,

94
00:05:48.650 --> 00:05:53.190
and amount of traffic was bigger than one
box could handle, and they were panic.

95
00:05:53.190 --> 00:05:57.200
About the same time JavaScript
comes online and they go, great,

96
00:05:57.200 --> 00:06:00.280
we can now offload all this
processing onto the browser.

97
00:06:00.280 --> 00:06:03.970
So they now have the browser do all
the work of preparing the invoice and

98
00:06:03.970 --> 00:06:04.819
totalling everything up.

99
00:06:05.820 --> 00:06:10.334
They just allow the browser to then
submit this thing which then gets sent

100
00:06:10.334 --> 00:06:12.043
directly to fulfillment.

101
00:06:13.373 --> 00:06:16.277
&gt;&gt; Douglas: So
if you can figure out how to type a URL,

102
00:06:16.277 --> 00:06:21.615
you can order anything you want and
pay whatever you think is reasonable.

103
00:06:21.615 --> 00:06:25.560
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Douglas: So

104
00:06:25.560 --> 00:06:28.730
it turns out there are good reasons
to do stuff in the browser,

105
00:06:28.730 --> 00:06:33.970
most of them are to provide
a better user experience.

106
00:06:33.970 --> 00:06:36.729
So you can avoid the thing where
the user fills in a form and

107
00:06:36.729 --> 00:06:40.123
then you kick it back in their teeth
because they got something wrong,

108
00:06:40.123 --> 00:06:42.331
we can help them do that and
make it pleasant.

109
00:06:42.331 --> 00:06:48.072
But that doesn't mean that the server
shouldn't check every detail of it and

110
00:06:48.072 --> 00:06:52.149
make sure that it happened right,
you have to do that.

111
00:06:52.149 --> 00:06:56.924
So templating is this process, we'll talk
more about templating this afternoon,

112
00:06:56.924 --> 00:07:00.959
I hate templating, because the browser
is a gun pointed at your head and

113
00:07:00.959 --> 00:07:03.200
templating is what pulls the trigger.

