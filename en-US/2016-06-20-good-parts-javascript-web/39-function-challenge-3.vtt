WEBVTT

1
00:00:00.000 --> 00:00:03.877
[MUSIC]

2
00:00:03.877 --> 00:00:06.933
&gt;&gt; Douglas: Write a function twice
that takes a binary function and

3
00:00:06.933 --> 00:00:11.990
returns a unary function that passes its
argument to the binary function twice.

4
00:00:11.990 --> 00:00:13.680
So by twice I mean this.

5
00:00:13.680 --> 00:00:16.602
We've got the add function
we're going to add 11 twice.

6
00:00:16.602 --> 00:00:18.978
Okay, that'll produce 22.

7
00:00:18.978 --> 00:00:20.593
So we're going to automate that.

8
00:00:20.593 --> 00:00:22.660
We're gonna make a twice function.

9
00:00:22.660 --> 00:00:24.790
We can pass add to that and

10
00:00:24.790 --> 00:00:27.600
it will create a double function
which does the same thing.

11
00:00:29.170 --> 00:00:32.040
We could also pass the multiply
function to twice.

12
00:00:32.040 --> 00:00:35.160
It will produce a square function
which will square things.

13
00:00:36.450 --> 00:00:39.250
Now, I intentionally
misspelled the word double.

14
00:00:39.250 --> 00:00:41.547
Because in some implementations,
double is reserved word.

15
00:00:41.547 --> 00:00:46.110
And if you spell it correctly, you'll
get a syntax error which is inexcusable.

16
00:00:46.110 --> 00:00:49.880
Since double isn't even
used in this language.

17
00:00:49.880 --> 00:00:52.315
But so, I misspelled it.

18
00:00:52.315 --> 00:00:54.650
I recommend that you misspell it too for
the same reason.

19
00:00:54.650 --> 00:00:58.325
So here is twice.

20
00:00:58.325 --> 00:01:00.220
Twice takes a binary function.

21
00:01:00.220 --> 00:01:02.389
Returns a function that takes an argument.

22
00:01:02.389 --> 00:01:06.688
Returns result of calling the binary
function with that arguments twice.

23
00:01:06.688 --> 00:01:08.499
So got twice?

24
00:01:09.580 --> 00:01:11.499
Very good, if you didn't get it,
write it down.

25
00:01:11.499 --> 00:01:13.310
If you're gonna need it for another one.

26
00:01:14.330 --> 00:01:15.629
Any questions before we
go on to the next one?

27
00:01:15.629 --> 00:01:18.654
&gt;&gt; Speaker 2: Maybe a dumb question.

28
00:01:18.654 --> 00:01:24.655
I was trying to figure out if there was
a way to define this using [INAUDIBLE].

29
00:01:24.655 --> 00:01:27.343
&gt;&gt; Douglas: There probably is but it's
probably just as well that you didn't.

30
00:01:27.343 --> 00:01:28.920
&gt;&gt; Speaker 2: All right.
So if we did,

31
00:01:28.920 --> 00:01:32.932
would we wanna change
to that implementation?

32
00:01:32.932 --> 00:01:34.169
&gt;&gt; Douglas: It's up to you.

33
00:01:34.169 --> 00:01:37.173
The most important thing
today is that it works.

34
00:01:40.781 --> 00:01:42.660
&gt;&gt; Douglas: Okay, ready to move on?

35
00:01:44.320 --> 00:01:45.120
Okay, here's the next one.

36
00:01:47.350 --> 00:01:52.520
Write reverse, a function that reverses
the arguments of a binary function.

37
00:01:52.520 --> 00:01:56.520
So we're gonna to pass to reverse the sub
function that we wrote this morning.

38
00:01:56.520 --> 00:02:00.990
And it returns the bus function
which is subtract backwards.

39
00:02:00.990 --> 00:02:04.630
So if we pass 3 and
2 to bus, we'll get -1.

40
00:02:06.390 --> 00:02:07.920
Okay, so here is reverse.

41
00:02:09.210 --> 00:02:11.490
reverse takes a binary function and

42
00:02:11.490 --> 00:02:14.770
returns a function that takes
the first and second argument, returns

43
00:02:14.770 --> 00:02:18.520
result to calling the binary function
with the second and first argument.

44
00:02:18.520 --> 00:02:20.800
So who got reverse?
Very good.

45
00:02:20.800 --> 00:02:24.350
So this is how will write it next year.

46
00:02:24.350 --> 00:02:27.120
We'll be able to reverse
any number of arguments.

47
00:02:27.120 --> 00:02:29.860
So we're trying to get
into practical stuff now.

48
00:02:29.860 --> 00:02:32.034
So you might imagine,
you've got two APIs and

49
00:02:32.034 --> 00:02:35.791
you need to make them work together but
they were not designed to work together.

50
00:02:35.791 --> 00:02:38.316
So they're calling
sequences are incompatible.

51
00:02:38.316 --> 00:02:41.517
And you could rewrite one of them
to be more like the other but

52
00:02:41.517 --> 00:02:46.001
that's too much work or you could write a
wrapper function around every entry point

53
00:02:46.001 --> 00:02:48.007
of one but that's too much work too.

54
00:02:48.007 --> 00:02:51.660
With this approach,
we could let functions do that work.

55
00:02:51.660 --> 00:02:56.204
So we can have functions write wrappers,
which will allow

56
00:02:56.204 --> 00:03:01.037
us to use the matter operability or
interchangeably, okay?

57
00:03:01.037 --> 00:03:03.130
So ready for the next one?

58
00:03:06.120 --> 00:03:10.160
Write a function composeu that
takes two unary functions and

59
00:03:10.160 --> 00:03:12.510
returns a unary function
that calls them both.

60
00:03:13.510 --> 00:03:17.380
So we're gonna take the double in
the square function that we wrote earlier.

61
00:03:17.380 --> 00:03:20.560
And we're gonna pass
them both to composeu.

62
00:03:20.560 --> 00:03:26.178
And then, we'll pass the function that
returns 5 and it will return 100.

63
00:03:26.178 --> 00:03:29.978
And it'll do that by taking the five and
doubling it and

64
00:03:29.978 --> 00:03:32.380
then taking that and squaring it.

65
00:03:34.940 --> 00:03:37.290
So here is composeu.

66
00:03:37.290 --> 00:03:40.720
Composeu takes functions f and g.

67
00:03:40.720 --> 00:03:42.590
It returns a function that
takes an argument and

68
00:03:42.590 --> 00:03:46.570
returns the result of calling g(f(a)).

69
00:03:46.570 --> 00:03:47.550
So who got compose you?

70
00:03:48.900 --> 00:03:49.501
Very good.

71
00:03:49.501 --> 00:03:54.043
The tricky thing about this one was that
nested function invocations are written

72
00:03:54.043 --> 00:03:54.785
inside out.

73
00:03:54.785 --> 00:03:57.612
Which lexically looks backwards and

74
00:03:57.612 --> 00:04:02.910
say just need to get the g before
the f even though it's called later.

75
00:04:04.200 --> 00:04:08.751
So this introduces a way of programming
which is kind of like adding Unix pipes

76
00:04:08.751 --> 00:04:10.579
except at the function level.

77
00:04:10.579 --> 00:04:15.755
That we can take existing functions and
kinda string them together.

78
00:04:15.755 --> 00:04:17.496
And pass values through them and

79
00:04:17.496 --> 00:04:22.020
it'll go through this chain of functions
until something comes out the other end.

80
00:04:23.480 --> 00:04:27.610
So next year when we write this function,
we'll allow to take not two functions but

81
00:04:27.610 --> 00:04:32.060
any number of functions and you can
just program a whole series of things.

82
00:04:32.060 --> 00:04:35.020
Until then, you could call
composeu you several times each

83
00:04:35.020 --> 00:04:36.984
time adding a new function to the list.

84
00:04:36.984 --> 00:04:38.986
Sort of like currying, I guess.

85
00:04:38.986 --> 00:04:41.930
Okay, any questions about that?

86
00:04:43.280 --> 00:04:43.780
Ready for another one?

87
00:04:46.494 --> 00:04:47.806
&gt;&gt; Douglas: Anybody?
Yeah, all right.

88
00:04:47.806 --> 00:04:49.310
Good, good, all right.

89
00:04:50.909 --> 00:04:54.921
&gt;&gt; Douglas: So Write a function composeb
that takes two binary functions and

90
00:04:54.921 --> 00:04:58.420
returns a function that calls them both.

91
00:04:58.420 --> 00:04:59.890
So we're going to pass add and

92
00:04:59.890 --> 00:05:03.970
mul to composeb and
they will return the function.

93
00:05:03.970 --> 00:05:07.582
And if we pass it, 2, 3, and
7, it'll be turned in 35.

94
00:05:07.582 --> 00:05:10.917
&gt;&gt; Speaker 2: [COUGH]
&gt;&gt; Douglas: So here is composeb,

95
00:05:10.917 --> 00:05:14.565
composeb takes two functions f and g.

96
00:05:14.565 --> 00:05:18.340
Returns a function that takes a, b, and c.

97
00:05:18.340 --> 00:05:22.511
And returns result of calling g(f(a and
b) and c).

98
00:05:22.511 --> 00:05:24.193
So who got composeb?

99
00:05:24.193 --> 00:05:26.747
Really good, you guys are doing great.

100
00:05:28.867 --> 00:05:30.460
&gt;&gt; Douglas: Feeling good?
Yeah?

101
00:05:30.460 --> 00:05:32.940
Okay, wanna do another one?

102
00:05:34.200 --> 00:05:37.870
I've got another one.
So let's go.

103
00:05:37.870 --> 00:05:41.040
Write a limit function that
allows a binary function to be

104
00:05:41.040 --> 00:05:43.490
called a limited number of times.

105
00:05:43.490 --> 00:05:46.566
So, we're going to pass
the add function to limit, and

106
00:05:46.566 --> 00:05:48.993
say you can call it,
you can use it one time.

107
00:05:48.993 --> 00:05:52.740
And that will produce
a limited add function.

108
00:05:52.740 --> 00:05:56.480
We could then give that to a third party,
and the third party can call it once, and

109
00:05:56.480 --> 00:05:58.680
it works just right.

110
00:05:58.680 --> 00:06:01.295
But if they called a second time,
all it does is return undefined.

111
00:06:01.295 --> 00:06:02.478
Doesn't do anything else.

112
00:06:02.478 --> 00:06:07.798
Okay, you could think of, you could
pass a wish function to limit and

113
00:06:07.798 --> 00:06:10.199
say you only get three wishes.

114
00:06:10.199 --> 00:06:13.417
The wish function can make
any number of wishes but

115
00:06:13.417 --> 00:06:16.639
the function that we hand
you will have a limit on.

116
00:06:16.639 --> 00:06:20.411
Does the function you pass
have to be a binary function?

117
00:06:24.195 --> 00:06:24.747
&gt;&gt; Douglas: Let's say, yes.

118
00:06:24.747 --> 00:06:25.263
&gt;&gt; Speaker 2: Okay.

119
00:06:25.263 --> 00:06:28.026
&gt;&gt; Douglas: In the future,
we want to work with anything but for

120
00:06:28.026 --> 00:06:30.220
today we'll just say binary function.

121
00:06:33.780 --> 00:06:34.466
So here's limit.

122
00:06:34.466 --> 00:06:38.560
limit takes a binary function and a count.

123
00:06:38.560 --> 00:06:41.960
And it returns a function
that takes two arguments.

124
00:06:41.960 --> 00:06:47.350
If the count is greater than or
equal to one, it documents the count and

125
00:06:47.350 --> 00:06:51.650
returns the result of calling the binary
function with the two arguments.

126
00:06:51.650 --> 00:06:53.980
Otherwise, it will return undefined.

127
00:06:53.980 --> 00:06:54.980
So from this point on,

128
00:06:54.980 --> 00:06:57.470
the functions are starting to get
a little bit more complicated.

129
00:06:57.470 --> 00:06:59.377
So it's unlikely that you
did the same thing I did.

130
00:06:59.377 --> 00:07:02.777
So from this point on, I'm going to
ask who got something that works?

131
00:07:02.777 --> 00:07:05.518
Okay, very good.

132
00:07:05.518 --> 00:07:07.494
Anyone do something interesting?

133
00:07:07.494 --> 00:07:08.954
A different approach?

134
00:07:08.954 --> 00:07:14.821
&gt;&gt; Speaker 3: Use a variable instead of
I had two variables instead of just one.

135
00:07:14.821 --> 00:07:16.950
&gt;&gt; Douglas: Okay, and
where did you put them?

136
00:07:16.950 --> 00:07:22.678
&gt;&gt; Speaker 3: Before return function,
I said max.

137
00:07:22.678 --> 00:07:27.150
No, max was, I said i equal to zero.

138
00:07:27.150 --> 00:07:29.850
And the count I use max.

139
00:07:29.850 --> 00:07:33.270
And then each time I run function,
it just incremented i one.

140
00:07:33.270 --> 00:07:33.960
&gt;&gt; Douglas: Great, very good.

141
00:07:35.210 --> 00:07:36.791
So, anybody else?

142
00:07:36.791 --> 00:07:44.523
&gt;&gt; Speaker 3: Well- Yeah, I'm a little
confused like how to count or.

143
00:07:48.378 --> 00:07:51.647
&gt;&gt; Speaker 3: How is this being stored,
how the number of time has been?

144
00:07:51.647 --> 00:07:53.838
&gt;&gt; Douglas: Well,
we're using a closure, right?

145
00:07:53.838 --> 00:07:57.221
So, the other function has access to
the variables of parameters of the other

146
00:07:57.221 --> 00:07:57.749
function.

147
00:07:59.120 --> 00:08:02.735
So it seems the count that is
changing that [INAUDIBLE].

148
00:08:06.764 --> 00:08:08.780
&gt;&gt; Speaker 3: Do you need
to return undefined there?

149
00:08:08.780 --> 00:08:10.230
&gt;&gt; Douglas: Yeah, so
let’s that a really good question.

150
00:08:10.230 --> 00:08:12.785
And that's why underlined the statement
because I want to talk about it.

151
00:08:12.785 --> 00:08:18.060
So, there are two schools of
thought on that statement.

152
00:08:18.060 --> 00:08:20.120
One is, this is completely unnecessary.

153
00:08:20.120 --> 00:08:25.830
Because in JavaScript, if a function falls
off the bottom it returns undefined.

154
00:08:25.830 --> 00:08:27.810
So this is just a waste of space.

155
00:08:27.810 --> 00:08:29.890
There is no reason to say this.

156
00:08:29.890 --> 00:08:32.460
The other school of thought is
that part of the contract for

157
00:08:32.460 --> 00:08:38.130
this function is that it returns undefined
when the limit is reached and so.

158
00:08:38.130 --> 00:08:42.210
By explicitly returning and defined,
we're providing self documenting code.

159
00:08:45.291 --> 00:08:47.551
&gt;&gt; Douglas: I think both
points of view are valid,

160
00:08:47.551 --> 00:08:50.530
I've not been able to
decide which one is better.

161
00:08:50.530 --> 00:08:53.952
See, you'll see me flip flopping on this.

162
00:08:53.952 --> 00:08:56.863
The thing that is clearly
bad would be saying,

163
00:08:56.863 --> 00:09:01.131
just return semi colon cuz that
doesn't accomplish either thing.

164
00:09:01.131 --> 00:09:04.018
It's a waste of space and it isn't
explicit about what's getting returned.

165
00:09:04.018 --> 00:09:05.706
Yes?

166
00:09:05.706 --> 00:09:07.853
&gt;&gt; Speaker 3: And
you answered my question right there.

167
00:09:07.853 --> 00:09:09.870
&gt;&gt; Douglas: Okay, anybody else?

168
00:09:09.870 --> 00:09:13.121
&gt;&gt; Speaker 3: I had
something maybe less clever.

169
00:09:13.121 --> 00:09:16.975
I had a local variable called,
which I initialized to zero,

170
00:09:16.975 --> 00:09:19.253
which was the number of calls made.

171
00:09:19.253 --> 00:09:21.901
&gt;&gt; Douglas: Okay, and
the local variable was stored above-

172
00:09:21.901 --> 00:09:23.415
&gt;&gt; Speaker 3: Yeah, it's like above the,

173
00:09:23.415 --> 00:09:24.449
before the return.

174
00:09:24.449 --> 00:09:26.530
&gt;&gt; Douglas: Brilliant, okay, very good.

