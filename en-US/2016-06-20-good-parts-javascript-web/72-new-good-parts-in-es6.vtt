WEBVTT

1
00:00:00.000 --> 00:00:03.912
[MUSIC]

2
00:00:03.912 --> 00:00:07.496
&gt;&gt; Speaker 1: We've got a new version
of JavaScript that was approved by

3
00:00:07.496 --> 00:00:09.909
the general assembly six months ago and

4
00:00:09.909 --> 00:00:13.830
many of the features of it
are already in browsers now.

5
00:00:13.830 --> 00:00:17.809
And some of them will be coming in
later and so this is a good time to

6
00:00:17.809 --> 00:00:22.042
look at what's in the new language,
did we get any good stuff in it?

7
00:00:22.042 --> 00:00:25.882
And the answer is yes we've got
actually lot of good stuff in it.

8
00:00:25.882 --> 00:00:30.062
So my number one most favorite new feature
of the language proper tail calls.

9
00:00:30.062 --> 00:00:35.372
So compiler will turn that into
a jump instead of a call return,

10
00:00:35.372 --> 00:00:37.882
so it'll go a little faster.

11
00:00:37.882 --> 00:00:40.192
Take less memory in getting there,

12
00:00:40.192 --> 00:00:46.120
it enables continuation passing style in
other modes of programming, it's great.

13
00:00:46.120 --> 00:00:50.100
So that's my most favorite feature
with this JavaScript finally

14
00:00:50.100 --> 00:00:53.000
becomes a real functional programming
language, which is great.

15
00:00:54.090 --> 00:00:57.650
My second most favorite new feature,
the ellipsis operator which we've

16
00:00:57.650 --> 00:01:02.590
talk about quite a bit yesterday again
is two versions of the curry function.

17
00:01:02.590 --> 00:01:05.910
There is that one and that one,
they both do the same thing.

18
00:01:05.910 --> 00:01:07.440
This one's inexcusable,

19
00:01:07.440 --> 00:01:10.680
this one's actually pretty nice so
that it's going to be a good thing.

20
00:01:12.230 --> 00:01:15.980
We've got modules in the language now
unfortunately the module system we got is

21
00:01:15.980 --> 00:01:17.600
way too complex.

22
00:01:17.600 --> 00:01:21.320
But it works, so there's a subset of
the module system which is adequate.

23
00:01:21.320 --> 00:01:25.160
Which if you just wanna say here's some
stuff, I'm gonna export this thing.

24
00:01:25.160 --> 00:01:30.060
That's how you use it and that's all
it needs to be, and it can do that.

25
00:01:30.060 --> 00:01:33.400
So that's good,
that's much better than requires, or

26
00:01:33.400 --> 00:01:34.599
any of the other module loaders.

27
00:01:36.640 --> 00:01:41.330
We've got let in const, which by
themselves are not that big a deal.

28
00:01:41.330 --> 00:01:44.930
Except they are less confusing
to Java programmers.

29
00:01:44.930 --> 00:01:48.960
So it's good not to confuse the Java
programmers, so I like that.

30
00:01:48.960 --> 00:01:53.950
One thing I find confusing about
this is that I've seen a lot

31
00:01:53.950 --> 00:01:57.430
of developers who are confused about
the difference between const and freezing.

32
00:01:58.590 --> 00:02:02.460
And so they're surprised that you can
put a mutable object in a const and

33
00:02:02.460 --> 00:02:04.310
still mutate that object.

34
00:02:04.310 --> 00:02:07.400
So constants for
variables, freezing is for

35
00:02:07.400 --> 00:02:12.390
values, just remember that,
it's pretty easy.

36
00:02:12.390 --> 00:02:16.530
We have Destructuring,
destructuring is something you can do and

37
00:02:16.530 --> 00:02:20.260
let and can't statements, and
also in assignment statements.

38
00:02:20.260 --> 00:02:24.610
Where we can create new variables and

39
00:02:24.610 --> 00:02:27.510
initialize them from some
object at the same time.

40
00:02:27.510 --> 00:02:32.100
So again not a big change, doesn't let
us do anything we couldn't do before but

41
00:02:32.100 --> 00:02:33.640
it is a convenience, yeah.

42
00:02:33.640 --> 00:02:36.770
&gt;&gt; Speaker 2: I think you said freezing is
for values, did you mean freezing is for

43
00:02:36.770 --> 00:02:38.020
objects?

44
00:02:38.020 --> 00:02:39.240
&gt;&gt; Speaker 1: Objects are values.

45
00:02:39.240 --> 00:02:40.280
&gt;&gt; Speaker 2: Okay, yeah.

46
00:02:40.280 --> 00:02:41.880
&gt;&gt; Speaker 1: In theory
you could freeze numbers,

47
00:02:41.880 --> 00:02:44.880
except they're already frozen,
and strings are already frozen.

48
00:02:44.880 --> 00:02:45.858
So you don't need to freeze those.

49
00:02:45.858 --> 00:02:49.660
&gt;&gt; Speaker 2: One follow up,
what apart about nested objects?

50
00:02:50.720 --> 00:02:52.590
&gt;&gt; Speaker 1: It only
freezes the outer one,

51
00:02:52.590 --> 00:02:54.129
there is no deep freeze in the language.

52
00:02:55.360 --> 00:02:57.734
&gt;&gt; Speaker 2: So
you have to do a recursive freeze.

53
00:02:57.734 --> 00:02:59.842
&gt;&gt; Speaker 1: If you care about that,
you have to descend into the language and

54
00:02:59.842 --> 00:03:00.515
freeze each level.

55
00:03:05.375 --> 00:03:09.725
&gt;&gt; Speaker 1: Then we have WeakMap,
WeakMap is a really nice thing.

56
00:03:09.725 --> 00:03:12.940
WeakMap works the way objects should work.

57
00:03:12.940 --> 00:03:18.870
With a WeakMap you can take any JavaScript
value and use it as a key and then

58
00:03:18.870 --> 00:03:23.680
associate any other value with it which
is the way object should have worked.

59
00:03:23.680 --> 00:03:27.730
And it also has a nice property
that it does not route the keys for

60
00:03:27.730 --> 00:03:29.440
the purpose of garbage collecting.

61
00:03:29.440 --> 00:03:35.510
So if the only place where an object still
exists is as the key of a property in

62
00:03:35.510 --> 00:03:40.220
a WeakMap, it will get garbage collected
automatically, which is brilliant.

63
00:03:40.220 --> 00:03:43.900
So that means there is a class of
applications which we can write in

64
00:03:43.900 --> 00:03:48.230
JavaScript now using WeakMap that we
could not write in the language before,

65
00:03:48.230 --> 00:03:49.690
which is really nice.

66
00:03:49.690 --> 00:03:54.210
The biggest problem with WeakMap is it has
maybe the worst name ever put on a feature

67
00:03:54.210 --> 00:03:55.840
of a programming language.

68
00:03:55.840 --> 00:03:58.810
Because who wants to use
something called a WeakMap, right?

69
00:04:00.040 --> 00:04:02.390
But it's actually a really good thing.

70
00:04:02.390 --> 00:04:07.860
It's just a really bad name and
we have Megastring literals.

71
00:04:07.860 --> 00:04:14.495
We have the back tick which we can now use
to make literals that can spam many lines,

72
00:04:14.495 --> 00:04:18.647
so here's are an example
of a regular expression.

73
00:04:20.407 --> 00:04:23.934
&gt;&gt; Speaker 1: This particular regular
expression matches all of the number

74
00:04:23.934 --> 00:04:25.500
literals that are an ES6.

75
00:04:27.120 --> 00:04:30.410
And you can see why I don't like
regular expressions because

76
00:04:30.410 --> 00:04:32.180
you can't make any sense
out of this right.

77
00:04:32.180 --> 00:04:37.730
Just looking at that, it's just noise it's
really hard to understand what it's about.

78
00:04:37.730 --> 00:04:42.390
So I can make things all easier now,
I've got a function here which we'll

79
00:04:42.390 --> 00:04:46.850
call the regular expression
constructor passing it in a string

80
00:04:48.630 --> 00:04:51.750
but first it will remove all of
the spaces from that string.

81
00:04:54.200 --> 00:04:57.510
And so now,
I can use one of these mega literals

82
00:04:57.510 --> 00:05:00.182
to write it out with all
the whitespace in it.

83
00:05:00.182 --> 00:05:02.440
And with whitespace in it,

84
00:05:02.440 --> 00:05:06.610
regular expressions aren't quite that bad,
we get spaces between.

85
00:05:07.620 --> 00:05:10.010
Each of the elements and
I can line them up and

86
00:05:10.010 --> 00:05:13.610
you can kind of see what's going on,
so we now have binary literals.

87
00:05:13.610 --> 00:05:16.620
You can have zero B followed by zeros and
ones and

88
00:05:16.620 --> 00:05:20.820
we've got aka literal which I'm
still not sure about those.

89
00:05:20.820 --> 00:05:25.450
You've got an 0 for a zero and
then octal digits and

90
00:05:25.450 --> 00:05:28.470
we've always had the hacks and
the floating point.

91
00:05:29.910 --> 00:05:33.650
So that's pretty neat, this is a much
nicer way of reading regular expressions.

92
00:05:33.650 --> 00:05:37.000
There are still things about
the mega literals and I don't like.

93
00:05:37.000 --> 00:05:42.550
That back tick is the smallest
operator we've got and

94
00:05:42.550 --> 00:05:46.340
it's used to bracket the biggest
structures we've ever had.

95
00:05:46.340 --> 00:05:49.650
So there is potential for
misreading here so

96
00:05:49.650 --> 00:05:52.740
we're gonna have to be cautious with this
but I think this is probably a good thing.

97
00:05:54.970 --> 00:05:58.220
And again regulex,
if you're writing regular expressions

98
00:05:58.220 --> 00:06:00.400
even with the whitespace you
still wanna be suing regulex.

99
00:06:03.050 --> 00:06:10.190
So we've got fat arrow functions or
fart for short.

100
00:06:10.190 --> 00:06:14.400
So the motivation here,
there are people who are complaining that

101
00:06:14.400 --> 00:06:17.170
with function you have
to type eight letters.

102
00:06:17.170 --> 00:06:23.960
You have to F you N, and I said that's
too much to type and I said well there

103
00:06:23.960 --> 00:06:28.480
are these new things now called keyboard
back rows, it's too much to read.

104
00:06:30.120 --> 00:06:31.820
Okay, so we added them.

105
00:06:31.820 --> 00:06:36.760
So it's a short form for writing
a function that will return a value.

106
00:06:36.760 --> 00:06:40.560
So we got the parameter list,
we got name and then we got the fart and

107
00:06:40.560 --> 00:06:45.020
then we've got the return value after it.

108
00:06:45.020 --> 00:06:46.460
So, you don't have to write function and

109
00:06:46.460 --> 00:06:49.810
you don't have to write
return except this will fail.

110
00:06:50.880 --> 00:06:54.280
This looks like it's a little mini
constructor that's gonna return a new

111
00:06:54.280 --> 00:06:54.974
object, right?

112
00:06:54.974 --> 00:06:58.730
It's gonna return a new thing where the id
is whatever the name is that we passed,

113
00:06:58.730 --> 00:06:59.580
this is going to fail.

114
00:07:01.510 --> 00:07:06.560
Instead it's going to give you a function
that returns undefined, which is not good.

115
00:07:06.560 --> 00:07:11.090
And it's because of a syntactic
ambiguity in the language,

116
00:07:11.090 --> 00:07:13.510
the committee was aware
of this when they did it,

117
00:07:15.040 --> 00:07:19.110
we just keep adding new bad
parts we can't stop doing it.

118
00:07:19.110 --> 00:07:22.070
So because of that I'm
not a big fan of these.

119
00:07:22.070 --> 00:07:23.870
&gt;&gt; Speaker 3: So
it will compile but it won't run.

120
00:07:23.870 --> 00:07:24.990
&gt;&gt; Speaker 1: It will compile,

121
00:07:24.990 --> 00:07:28.730
it will run,
it will return undefined when you call it.

122
00:07:28.730 --> 00:07:30.739
You will not get the new object
that you're trying to construct.

123
00:07:32.100 --> 00:07:33.930
We keep doing this to ourselves,

124
00:07:33.930 --> 00:07:36.940
keep doing this to you,
how that actually works.

125
00:07:36.940 --> 00:07:38.790
&gt;&gt; Speaker 2: Because
the brackets are ambiguous?

126
00:07:38.790 --> 00:07:40.404
&gt;&gt; Speaker 1: Yeah,
because the brackets are ambiguous.

127
00:07:40.404 --> 00:07:46.180
There are number of ways they
could have disambiguated it,

128
00:07:46.180 --> 00:07:47.770
but they decide instead to make them.

129
00:07:48.920 --> 00:07:51.780
&gt;&gt; Speaker 3: A couple quick [LAUGH]
because that's not what you put inside

130
00:07:51.780 --> 00:07:55.080
the brackets isn't really
the contents of a function.

131
00:07:55.080 --> 00:07:57.370
Typically, a function would return.

132
00:07:58.830 --> 00:08:00.500
I'm confused about, I'm confusing this.

133
00:08:00.500 --> 00:08:03.330
I just fart with what we're
using in another language.

134
00:08:03.330 --> 00:08:07.880
In TypeScript, I think,
they put var in TypeScript.

135
00:08:07.880 --> 00:08:13.030
I've been using it, I'm using it
to call a function to do something

136
00:08:13.030 --> 00:08:13.860
&gt;&gt; Speaker 1: So this will work for

137
00:08:13.860 --> 00:08:17.070
lots of other purposes,
the place where it fails,

138
00:08:17.070 --> 00:08:21.630
as if you're trying to
return a new object literal.

139
00:08:21.630 --> 00:08:25.620
&gt;&gt; Speaker 3: You would have on
the other side of this X var X equals.

140
00:08:26.780 --> 00:08:30.358
&gt;&gt; Speaker 1: Yeah, or you pass this more
likely pass this as an argument to another

141
00:08:30.358 --> 00:08:33.267
function That's one of the most
common uses for these.

142
00:08:36.408 --> 00:08:40.760
&gt;&gt; Speaker 1: So anyway moving on, and
there are lots of other bad parts in

143
00:08:40.760 --> 00:08:45.113
the language too like generators
with the yield operator,

144
00:08:45.113 --> 00:08:47.830
I think that was probably a mistake.

145
00:08:47.830 --> 00:08:51.820
It adds a lot of complexity and not
much value and kind of locks people into

146
00:08:51.820 --> 00:08:55.400
patterns which I think are things that
we should be evolving away from and

147
00:08:55.400 --> 00:08:56.960
not getting trapped in.

148
00:08:56.960 --> 00:08:59.700
A lot of the other new features we
haven't had enough experience with

149
00:08:59.700 --> 00:09:00.270
them yet to know.

150
00:09:00.270 --> 00:09:03.590
If they're going to be good parts or
bad parts but there is one part

151
00:09:03.590 --> 00:09:08.010
that I'm confident is going to be a very,
very bad part and that is class.

152
00:09:09.700 --> 00:09:16.040
This was the most requested new feature
for ES6, it was mostly requested by

153
00:09:16.040 --> 00:09:20.140
Java programmers who were having to move
into JavaScript and were unhappy about it.

154
00:09:20.140 --> 00:09:22.780
And saying please can you
turn JavaScript into Java so

155
00:09:22.780 --> 00:09:26.650
we don't have to learn this crappy
language and so we did that.

156
00:09:26.650 --> 00:09:29.340
Except we didn't actually
add class what we did

157
00:09:29.340 --> 00:09:34.040
was we added syntactic sugar on top of the
prototype of stuff that's already there.

158
00:09:34.040 --> 00:09:36.410
So when you get down into the edges,

159
00:09:36.410 --> 00:09:39.160
it's not going to work
the way you expect it will.

160
00:09:39.160 --> 00:09:44.050
But worse than that is it keeps you
trapped in the mindset of the classical

161
00:09:44.050 --> 00:09:48.370
model, which means you will never
learn to use the functional model.

162
00:09:49.640 --> 00:09:52.390
And also you don't have
the strong type system

163
00:09:52.390 --> 00:09:54.730
that you need in order
to deal with classes.

164
00:09:54.730 --> 00:09:57.080
And so I'm pretty confident

165
00:09:57.080 --> 00:10:01.370
that the people who are gonna be using
classes are gonna feel vindicated.

166
00:10:01.370 --> 00:10:03.600
It's in the standard,
I have a right to use it.

167
00:10:03.600 --> 00:10:04.859
It's all that good stuff.

168
00:10:04.859 --> 00:10:09.090
But they will never learn to
use the language effectively.

169
00:10:09.090 --> 00:10:12.620
They will go to their graves never
knowing how miserable they were.

