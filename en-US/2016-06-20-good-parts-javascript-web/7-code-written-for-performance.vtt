WEBVTT

1
00:00:00.000 --> 00:00:03.984
[MUSIC]

2
00:00:03.984 --> 00:00:06.763
&gt;&gt; Douglas Crockford: So
I need to say something about performance,

3
00:00:06.763 --> 00:00:10.756
because I sometimes hear the need for
performance as the excuse for

4
00:00:10.756 --> 00:00:13.100
why we can't have good style.

5
00:00:13.100 --> 00:00:15.270
It turns out those
arguments are all wrong.

6
00:00:15.270 --> 00:00:18.250
Performance specific
code is usually crufty

7
00:00:18.250 --> 00:00:20.814
because we're removing
generality from the code.

8
00:00:20.814 --> 00:00:24.360
We're increasing paths through the code,

9
00:00:24.360 --> 00:00:28.270
which makes testing and
maintenance all much harder to do.

10
00:00:28.270 --> 00:00:30.270
Clean code is much easier to reason about.

11
00:00:30.270 --> 00:00:34.970
So we should try to keep our code as
clean as we can, for as long as we can.

12
00:00:34.970 --> 00:00:38.690
Donald Knuth of Stanford said that
premature optimization is the root of all

13
00:00:38.690 --> 00:00:40.960
evil, which is true.

14
00:00:40.960 --> 00:00:45.990
We should not attempt to optimize
any code until we have measured it.

15
00:00:45.990 --> 00:00:50.070
We should then do the optimization,
we should then measure again.

16
00:00:50.070 --> 00:00:52.340
And if we did not get
a significant improvement,

17
00:00:52.340 --> 00:00:56.240
then we should consider the change
to be a bug and back it out.

18
00:00:56.240 --> 00:01:00.210
If the reason we added cruft to
the code base was to make it faster,

19
00:01:00.210 --> 00:01:04.650
if we didn't actually obtain
the significant performance increase,

20
00:01:04.650 --> 00:01:07.580
then it fails, and
we should remove that code.

21
00:01:07.580 --> 00:01:09.510
So measure twice, cut once.

22
00:01:09.510 --> 00:01:14.550
It turns out most code has
a negligible impact on performance, so

23
00:01:14.550 --> 00:01:19.190
we should only bother with optimizing
the code that is taking the most time.

24
00:01:19.190 --> 00:01:22.870
You have only a limited amount of time for
doing optimization, so

25
00:01:22.870 --> 00:01:26.260
you don't wanna waste that time
optimizing code that doesn't matter.

26
00:01:26.260 --> 00:01:28.660
You need to optimize your optimizing.

27
00:01:30.200 --> 00:01:34.800
And finally, algorithm replacement is
vastly more effective than code fiddling.

28
00:01:34.800 --> 00:01:39.277
So if your code is slow because you've
got an n squared loop, fiddling with

29
00:01:39.277 --> 00:01:44.123
the details of the inner loop will have
no effect on significantly increasing n.

30
00:01:44.123 --> 00:01:49.202
The only thing that could work is
replacing that code with a different

31
00:01:49.202 --> 00:01:54.996
algorithm in maybe an n log n algorithm,
which can then get you a much larger n.

32
00:01:54.996 --> 00:01:59.870
And that kind of change is much
easier to do if the code has

33
00:01:59.870 --> 00:02:03.020
not already been pre-optimized.

34
00:02:03.020 --> 00:02:06.280
Programming is the most
complicated thing that humans do.

35
00:02:06.280 --> 00:02:10.238
Computer programs must be perfect and
humans are not good at perfect,

36
00:02:10.238 --> 00:02:11.185
especially me.

37
00:02:11.185 --> 00:02:15.055
I am a deeply flawed human being, but
I'm a pretty good programmer, but

38
00:02:15.055 --> 00:02:18.239
it requires a tremendous amount
of effort and discipline.

39
00:02:19.460 --> 00:02:22.840
So designing a programming
style demands discipline.

40
00:02:22.840 --> 00:02:27.490
It is not selecting features because
they are liked or pretty or familiar.

41
00:02:27.490 --> 00:02:29.940
It's because it helps you
to reduce your error rate.

42
00:02:31.570 --> 00:02:36.650
The alternative is spending
more time in the abyss.

43
00:02:36.650 --> 00:02:37.660
You know what I'm talking about.

44
00:02:37.660 --> 00:02:41.930
That's that cold, dark, hurtful place
we descend into where we go and

45
00:02:41.930 --> 00:02:43.660
battle the demons and kill the bugs.

46
00:02:45.880 --> 00:02:48.980
When I first started programming,
it was wonderful.

47
00:02:48.980 --> 00:02:50.520
I was having this epiphany.

48
00:02:50.520 --> 00:02:55.170
I thought I had this new way of
understanding everything in the world, and

49
00:02:55.170 --> 00:02:56.150
I thought it was great.

50
00:02:56.150 --> 00:03:00.160
I thought everybody should learn how to do
this, cuz this is really exciting stuff.

51
00:03:00.160 --> 00:03:01.170
I don't believe that anymore.

52
00:03:02.800 --> 00:03:07.500
I think that we are able to do programming
because there's something seriously

53
00:03:07.500 --> 00:03:10.780
wrong with us.
&gt;&gt; [LAUGH]

54
00:03:10.780 --> 00:03:11.370
&gt;&gt; Douglas Crockford: Normal people

55
00:03:11.370 --> 00:03:12.070
can't do this.

56
00:03:12.070 --> 00:03:16.000
If a normal person goes down into the
abyss, they come right back up and say,

57
00:03:16.000 --> 00:03:16.900
I'm changing majors.

58
00:03:16.900 --> 00:03:18.180
I don't know what's wrong with you people.

59
00:03:18.180 --> 00:03:18.680
I'm out of here.

60
00:03:20.000 --> 00:03:26.320
We're able to do this because of this
amnesia thing that we suffer from, that we

61
00:03:26.320 --> 00:03:30.500
forget how much time we spend down there
and how awful it is when we're down there.

62
00:03:31.660 --> 00:03:34.080
And that's what allows us
to go down there again.

63
00:03:34.080 --> 00:03:38.160
Also, we're tremendous optimists,
that we think that we can actually

64
00:03:38.160 --> 00:03:43.160
go down there and win and
come back, and that's a great thing.

65
00:03:43.160 --> 00:03:45.300
I don't think you can be an optimist and
be a programmer.

66
00:03:45.300 --> 00:03:48.840
Or you gotta be an optimist to be
a programmer, it's just necessary.

67
00:03:48.840 --> 00:03:51.330
That's also why we can't
schedule worth crap, right?

68
00:03:51.330 --> 00:03:52.440
How long is that gonna take?

69
00:03:52.440 --> 00:03:55.191
And go well,
it's about that many keystrokes, so

70
00:03:55.191 --> 00:03:57.191
[SOUND] it is should take about that long.

71
00:03:57.191 --> 00:03:59.160
We forget about that, right?

72
00:03:59.160 --> 00:04:00.930
That's where most of the time goes.

73
00:04:00.930 --> 00:04:02.460
So if you want to be more effective,

74
00:04:02.460 --> 00:04:07.360
more productive, figuring out a way to
stay out of there, that's the big win.

75
00:04:07.360 --> 00:04:10.620
Figuring out how to reduce your
keystrokes is irrelevant, right?

76
00:04:10.620 --> 00:04:12.877
You wanna optimize the thing
that's taking your time.

77
00:04:12.877 --> 00:04:17.140
And the thing that's taking your
time isn't the typing, it's that.

78
00:04:19.660 --> 00:04:23.550
So the JSLint style was driven by
the need to automatically detect defects.

79
00:04:25.100 --> 00:04:28.600
And that forms that can hide
defects are considered defective.

80
00:04:28.600 --> 00:04:30.240
Even if they're not bugs that instant.

81
00:04:31.430 --> 00:04:33.140
So when I was developing JSLint,

82
00:04:33.140 --> 00:04:36.240
there was a thing called comped
out lang.javascript on the Usenet.

83
00:04:36.240 --> 00:04:40.370
And there was an endless stream of
people saying, my program doesn't work.

84
00:04:40.370 --> 00:04:42.230
Can someone tell me why?

85
00:04:42.230 --> 00:04:44.590
And so I would take them and
I'd throw them in JSLint, and

86
00:04:44.590 --> 00:04:46.400
sometimes it'd go, there it is.

87
00:04:46.400 --> 00:04:49.100
And sometimes it'd go,
it couldn't, why is that?

88
00:04:49.100 --> 00:04:52.860
And sometimes it was because
they were using forms which made

89
00:04:52.860 --> 00:04:55.508
further analysis of
the program impossible.

90
00:04:55.508 --> 00:05:00.597
And eventually, reluctantly,
I came to decide that,

91
00:05:00.597 --> 00:05:07.525
if you're writing that way and
you don't need to, then that's a problem,

92
00:05:07.525 --> 00:05:13.287
because we want to make our
programs make the errors stand out.

93
00:05:13.287 --> 00:05:19.580
And you can do that by
writing better all the time.

94
00:05:19.580 --> 00:05:24.110
So the idea of sub-setting
a language is not an original idea,

95
00:05:24.110 --> 00:05:29.180
that for virtually every
language you wanna subset it.

96
00:05:29.180 --> 00:05:31.600
It's been said only a madman
would use all of C++.

97
00:05:31.600 --> 00:05:36.610
It's also been said only a madman
would use C++, but that's a for

98
00:05:36.610 --> 00:05:39.850
another time.

99
00:05:39.850 --> 00:05:43.390
And there is something nice about
having everybody using the same subset.

100
00:05:43.390 --> 00:05:47.789
Every team writing C++ will figure out how
much of the language they want to use.

101
00:05:49.200 --> 00:05:53.250
And that's fine until they now have
to take over someone else's code and

102
00:05:53.250 --> 00:05:57.200
go, friends, crap,
you don't have to deal with that stuff.

103
00:05:57.200 --> 00:06:00.043
So if we could get everybody
using the same subset,

104
00:06:00.043 --> 00:06:04.565
that makes interoperability a lot easier.
&gt;&gt; Douglas Crockford: So

105
00:06:04.565 --> 00:06:06.050
there will be bugs.

106
00:06:06.050 --> 00:06:10.120
I'm not promising that you can be bug free
if you adopt a better programming style,

107
00:06:10.120 --> 00:06:14.040
but you can move the odds to your
favor and you definitely win, and

108
00:06:14.040 --> 00:06:15.730
you do that at no cost.

