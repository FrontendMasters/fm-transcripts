WEBVTT

1
00:00:00.025 --> 00:00:03.874
[MUSIC]

2
00:00:03.874 --> 00:00:08.813
&gt;&gt; Douglas: So let's talk about testing,
so testing in asynchronous systems is

3
00:00:08.813 --> 00:00:13.850
tricky because most test frameworks
come with stuff like this right.

4
00:00:13.850 --> 00:00:18.520
You've got some assertion and you've
got a descriptive message and something

5
00:00:18.520 --> 00:00:23.240
you'll have an expected value in an actual
value and if they match, then it's good.

6
00:00:23.240 --> 00:00:25.030
And if they don't match, it's bad.

7
00:00:25.030 --> 00:00:27.750
Except this doesn't work in
asynchronous systems, right?

8
00:00:27.750 --> 00:00:31.870
Because you can't wait for
the actual value.

9
00:00:31.870 --> 00:00:36.670
The actual value might not happen
until many turns into the future and

10
00:00:36.670 --> 00:00:37.860
this just doesn't work.

11
00:00:39.380 --> 00:00:42.580
More than that though, I have a problem
with the way we do testing in general.

12
00:00:42.580 --> 00:00:45.330
In that, we're trying to guess what

13
00:00:45.330 --> 00:00:48.560
the expected value is which
is going to identify the bug.

14
00:00:49.790 --> 00:00:53.270
But most of our errors happen
in the interactions of things.

15
00:00:54.320 --> 00:00:57.640
And finding where a bunch of things
are going to come together and

16
00:00:57.640 --> 00:01:00.150
interact at the one point that fails.

17
00:01:00.150 --> 00:01:03.170
It's virtually impossible
to find that one point.

18
00:01:03.170 --> 00:01:08.590
So what you really want is to have a grid,
a dragnet where you're gonna have a much

19
00:01:08.590 --> 00:01:13.750
larger array of spaces that's distributed
randomly over the possibility space.

20
00:01:13.750 --> 00:01:17.490
And you pick them all out and
hopefully then you'll

21
00:01:17.490 --> 00:01:20.100
improve the likelihood that
you're gonna find the error.

22
00:01:20.100 --> 00:01:22.190
Except you don't wanna do that, right?

23
00:01:22.190 --> 00:01:26.910
You wanna have to write
a thousand times more test cases,

24
00:01:26.910 --> 00:01:29.980
most of which are unlikely to
succeed in finding anything anyway.

25
00:01:29.980 --> 00:01:33.310
That's a huge amount of effort,
no one's gonna wanna do that.

26
00:01:33.310 --> 00:01:35.370
Plus if there's a model change,

27
00:01:35.370 --> 00:01:40.670
it means you now have to update thousands
more tests and nobody is gonna do that.

28
00:01:40.670 --> 00:01:45.430
And it was kind of despairing about that,
when I saw a talk by John Hughes of

29
00:01:45.430 --> 00:01:50.160
Chalmers University about something called
QuickCheck which I thought was brilliant.

30
00:01:50.160 --> 00:01:56.680
So to give you the context about that,
QuickCheck was developed in Haskell.

31
00:01:56.680 --> 00:02:01.800
Haskell is a language that was developed
at the University of Edinburgh and

32
00:02:01.800 --> 00:02:04.310
it is a pure functional
programming language.

33
00:02:04.310 --> 00:02:10.180
That they say pure in that it's
a language without side effects and

34
00:02:10.180 --> 00:02:12.260
that's good and bad but
there's good things about it.

35
00:02:13.260 --> 00:02:14.860
The other thing about Haskell is,

36
00:02:14.860 --> 00:02:18.009
it's got maybe the best type system
of any language in the world.

37
00:02:19.300 --> 00:02:23.580
Instead of having something like
in Java where you specify the type

38
00:02:23.580 --> 00:02:28.210
of every little thing,
you specify the types of almost nothing.

39
00:02:28.210 --> 00:02:32.300
And instead there is an inference engine
that runs as part of the compiler which

40
00:02:32.300 --> 00:02:38.470
goes through looking up everything in the
program trying to determine everything is.

41
00:02:38.470 --> 00:02:41.400
If you're one of those, if you want to act
without then you must be one of those and

42
00:02:41.400 --> 00:02:44.200
so on and keep doing that trying
to solve the entire program.

43
00:02:45.210 --> 00:02:49.350
And if it gets to a point where
it finds an inconsistency,

44
00:02:49.350 --> 00:02:52.560
it can stop and something's wrong here.

45
00:02:54.170 --> 00:02:56.710
And the difficulty with
that is that where it

46
00:02:56.710 --> 00:03:02.050
finds its inconsistency may be miles away
from where you actually made your mistake.

47
00:03:02.050 --> 00:03:06.928
And so getting a program to compile
can be really challenging, but

48
00:03:06.928 --> 00:03:12.518
the theory is that once you get a program
to compile it's guaranteed to run.

49
00:03:12.518 --> 00:03:16.574
Except it's not because it turns out the
class of potential errors is infinitely

50
00:03:16.574 --> 00:03:20.333
bigger than the class of errors that
could be found even by the world's best

51
00:03:20.333 --> 00:03:21.675
type system.

52
00:03:21.675 --> 00:03:24.575
So you still have to test and

53
00:03:24.575 --> 00:03:28.782
these guys came up with a really
nice way of doing tests.

54
00:03:28.782 --> 00:03:33.962
Instead of writing specific
compare actual versus expected,

55
00:03:33.962 --> 00:03:39.362
instead you write a function which will be
true if the system is working correctly.

56
00:03:40.772 --> 00:03:44.782
So in that they call those
properties that the system

57
00:03:44.782 --> 00:03:47.952
will be true is working correctly
if these properties hold.

58
00:03:48.992 --> 00:03:53.990
And so and then QuickCheck
will generate random data and

59
00:03:53.990 --> 00:03:57.690
throw them at your functions and
try to disprove your assertion.

60
00:03:59.190 --> 00:04:02.240
And so they can get tremendous
coverage there, even able to

61
00:04:02.240 --> 00:04:05.810
debug real time systems which is something
that is really, really hard to do.

62
00:04:06.810 --> 00:04:09.800
So I thought, wow,
we should get one of those for JavaScript.

63
00:04:09.800 --> 00:04:13.170
So I wrote one, it's called JSCheck.

64
00:04:13.170 --> 00:04:17.200
JSCheck provides two nice things,
one is case generation.

65
00:04:17.200 --> 00:04:20.730
So it'll generate random test cases for
you and

66
00:04:20.730 --> 00:04:23.300
it also supports testing over turns.

67
00:04:23.300 --> 00:04:27.560
So you can use it to test stuff in node,
you can use it to test things in browsers,

68
00:04:27.560 --> 00:04:32.220
you can use it to test synchronous and
asynchronous functions.

69
00:04:33.940 --> 00:04:38.930
So it's a small library that
comes with some functions,

70
00:04:38.930 --> 00:04:40.850
these are a few of the interesting ones.

71
00:04:40.850 --> 00:04:43.490
The most important one is claim,
we'll talk more about that in a minute.

72
00:04:43.490 --> 00:04:47.100
That's where you make a claim
about how about the system.

73
00:04:47.100 --> 00:04:50.530
If it's working through,
working correctly then this would be true.

74
00:04:51.720 --> 00:04:55.790
You can then tell to check all of
the claims that you've made so

75
00:04:55.790 --> 00:04:58.560
far and
you can also put a time limit on it.

76
00:04:59.590 --> 00:05:04.020
So it will start all the test
simultaneously and they all have to finish

77
00:05:04.020 --> 00:05:08.940
by a certain amount of time,
if they don't then you can record that.

78
00:05:08.940 --> 00:05:14.610
And that's really important because,
the way our systems work now getting

79
00:05:14.610 --> 00:05:19.510
the right answer but taking too long is
indistinguishable from the wrong answer.

80
00:05:19.510 --> 00:05:22.300
And so, we need to be able to
test performance as well and

81
00:05:22.300 --> 00:05:26.770
that's something that the synchronous
testing frameworks don't do.

82
00:05:26.770 --> 00:05:29.770
Then we can get a callback
when the thing is done and

83
00:05:29.770 --> 00:05:32.270
we'll get a full report about
everything that happened.

84
00:05:32.270 --> 00:05:36.720
We can also get a callback on each
error as the errors occur and

85
00:05:36.720 --> 00:05:39.690
you can program that callback
to take you into the debugger.

86
00:05:39.690 --> 00:05:45.800
So as you're finding bugs, you're in the
context where you can fix it immediately.

87
00:05:47.920 --> 00:05:52.780
So this is the claim function, it takes
a descriptive name, it takes a predicate

88
00:05:52.780 --> 00:05:57.230
function as a Boolean which will be true
if your system is working correctly.

89
00:05:57.230 --> 00:06:01.120
And it takes a signature which is an array

90
00:06:01.120 --> 00:06:06.060
of type descriptors which describes
the parameters to the predicate function.

91
00:06:07.400 --> 00:06:10.880
So here's an example, we're going to
compare the old code with the new code.

92
00:06:10.880 --> 00:06:15.900
Our predicate will take a verdict
function and an argument and

93
00:06:15.900 --> 00:06:20.380
we will then determine
that the old code for

94
00:06:20.380 --> 00:06:22.500
that argument does the same
thing as the new code.

95
00:06:23.680 --> 00:06:27.100
And we tell it that that
argument is an integer.

96
00:06:27.100 --> 00:06:30.930
So when we tell this thing to check.

97
00:06:30.930 --> 00:06:36.300
It will generate random integers and
throw them at that function,

98
00:06:36.300 --> 00:06:41.420
trying to disprove our assertion and
you can set as many as you want.

99
00:06:41.420 --> 00:06:45.830
So all of the effort in using the system
is in writing these predicates and

100
00:06:45.830 --> 00:06:47.244
there are lots of ways you could do it.

101
00:06:47.244 --> 00:06:52.000
One is, in this case we're comparing
the old code against the new code.

102
00:06:52.000 --> 00:06:55.400
So as we're migrating the system,

103
00:06:55.400 --> 00:06:58.510
we can make sure that we haven't
changed the behavior of anything.

104
00:06:58.510 --> 00:07:02.280
Another way you could do it is if you
have symmetrical operations, for example,

105
00:07:02.280 --> 00:07:04.820
if you're writing an encoder and
a decoder.

106
00:07:04.820 --> 00:07:08.310
It's usually the case that the decode of
the encode should be equal the original

107
00:07:08.310 --> 00:07:14.470
things, so we can test that that's
actually true for a large class of trials.

108
00:07:14.470 --> 00:07:20.360
We can generate symmetric pairs of
things like we can generate a credit and

109
00:07:20.360 --> 00:07:24.570
a debit, you know both using random
values make sure everything balances.

110
00:07:24.570 --> 00:07:28.920
And in some cases you just might throw
a lot of random transactions at something.

111
00:07:28.920 --> 00:07:32.220
And after each one, run a deep
diagnostic of all your data structures,

112
00:07:32.220 --> 00:07:35.350
make sure everything is still consistent.
&gt;&gt; Speaker 2: So

113
00:07:35.350 --> 00:07:39.320
what would this look like implemented?

114
00:07:39.320 --> 00:07:42.860
I don't understand what verdict is.
&gt;&gt; Douglas: We'll look at

115
00:07:42.860 --> 00:07:43.590
the vertical in a minute.

116
00:07:44.700 --> 00:07:47.937
So verdict is the callback
that is being used in

117
00:07:47.937 --> 00:07:49.230
the cases.
&gt;&gt; Speaker 2: Okay.

118
00:07:50.350 --> 00:07:51.230
&gt;&gt; Douglas: So it

119
00:07:51.230 --> 00:07:54.180
comes with a small library of specifiers.

120
00:07:54.180 --> 00:07:58.230
You can put each of these in the
descriptor array of what types we want to

121
00:07:58.230 --> 00:08:02.450
throw to our predicate and

122
00:08:02.450 --> 00:08:06.969
it'll try, it'll generate values
random values of each of these types.

123
00:08:08.060 --> 00:08:11.830
So if you need Booleans, if you need
integers, numbers, objects, whatever.

124
00:08:11.830 --> 00:08:13.780
It'll make random things and
pass them out.

125
00:08:15.290 --> 00:08:20.000
If it turns, and these are also
compostable in interesting ways.

126
00:08:20.000 --> 00:08:24.590
For example, if you want random
social security numbers.

127
00:08:24.590 --> 00:08:28.670
I can say I want to strengthen with
three digits and then a dash and

128
00:08:28.670 --> 00:08:31.400
two digits in a dash and so on.

129
00:08:31.400 --> 00:08:35.370
Or if I need an array containing
three elements where the first

130
00:08:35.370 --> 00:08:38.490
element is an integer and the second
is a number between zero and 100 and

131
00:08:38.490 --> 00:08:44.290
the third is a character
string I can get that.

132
00:08:44.290 --> 00:08:48.970
Or I need an object where with
the left property a top property and

133
00:08:48.970 --> 00:08:50.410
a color selected from a list.

134
00:08:52.570 --> 00:08:57.780
Or I need an object with a variable number
of properties where each property is

135
00:08:57.780 --> 00:09:03.910
a four letter name and
each value is a Boolean, I can do that.

136
00:09:03.910 --> 00:09:05.930
There are lots of ways
to compose these and

137
00:09:05.930 --> 00:09:08.920
if it turns out there is some particular
test data that you need that's not

138
00:09:08.920 --> 00:09:13.080
easily composed from these,
you can write your own.

139
00:09:13.080 --> 00:09:16.190
And it's a generator, exactly like
the generators you've been writing.

140
00:09:16.190 --> 00:09:19.230
So you have a function that returns a
function that when, each time you call it,

141
00:09:19.230 --> 00:09:20.930
you'll get the next value.

142
00:09:20.930 --> 00:09:28.140
You can write one of those to generate
all the random test data that you need.

143
00:09:28.140 --> 00:09:31.900
The reason this works asynchronously
is because of the verdict function.

144
00:09:33.440 --> 00:09:38.640
Every check when it begins, is passed
a verdict function that it is used to

145
00:09:38.640 --> 00:09:43.520
return its result and
the verdict is just a continuation.

146
00:09:43.520 --> 00:09:47.970
It's just a call back which allows
the trials to be extended over many turns.

147
00:09:47.970 --> 00:09:49.900
And because we can also
put time limits on this,

148
00:09:49.900 --> 00:09:52.420
we now have three possible outcomes for
every trial.

149
00:09:53.560 --> 00:09:57.100
We can see a pass, we can see a fail or
we can see a lost.

150
00:09:57.100 --> 00:10:01.450
Lost means we did not get
a report before the time expired.

151
00:10:01.450 --> 00:10:04.630
And those are sometimes as important,
as the passes and fails.

