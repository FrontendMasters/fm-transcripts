WEBVTT

1
00:00:00.000 --> 00:00:02.924
Okay, in this section we're
going to talk about arrays.

2
00:00:02.924 --> 00:00:08.911
So if we think about primitive variables,
they can all hold a single value.

3
00:00:08.911 --> 00:00:13.985
Arrays can hold multiple values, but
they must all be of the same type.

4
00:00:13.985 --> 00:00:18.148
So here's an example of
a primitive variable.

5
00:00:18.148 --> 00:00:23.725
We have int age = 21;,
it holds one value, right?

6
00:00:23.725 --> 00:00:28.398
An array would be something
that holds multiple values.

7
00:00:28.398 --> 00:00:31.369
So if you think of something
like a lottery ticket,

8
00:00:31.369 --> 00:00:35.318
a lottery ticket has multiple
numbers associated with it, right?

9
00:00:35.318 --> 00:00:41.199
And therefore, this variable would need
to be able to hold all of those values.

10
00:00:41.199 --> 00:00:48.076
So let's look at this definition and
I'll explain each part of this.

11
00:00:48.076 --> 00:00:52.380
So it starts with the data
type of the array.

12
00:00:52.380 --> 00:00:55.838
What is the data type
that this array can hold?

13
00:00:55.838 --> 00:01:02.025
Again, all of the values within this
have to be of the same data type.

14
00:01:02.025 --> 00:01:05.926
So an array can hold
like any sort of data.

15
00:01:05.926 --> 00:01:10.712
But within a single array, all of the data
must be of the same type, all right?

16
00:01:10.712 --> 00:01:15.640
The next part of that is
a set of square brackets.

17
00:01:15.640 --> 00:01:18.400
And those brackets indicate
that this is an array.

18
00:01:18.400 --> 00:01:22.979
So we've seen this with the string args
and main, those square brackets there.

19
00:01:22.979 --> 00:01:27.872
Basically saying that main accepts
an array of strings, right?

20
00:01:27.872 --> 00:01:29.555
So this is the same thing.

21
00:01:29.555 --> 00:01:33.859
Those brackets can appear
after the data type or

22
00:01:33.859 --> 00:01:38.603
it can appear after the name
of the variable itself.

23
00:01:38.603 --> 00:01:42.301
It doesn't matter, all right?

24
00:01:42.301 --> 00:01:44.474
LottoTicket is the name of this array.

25
00:01:44.474 --> 00:01:48.074
So after you have the data
type in the brackets,

26
00:01:48.074 --> 00:01:50.961
then you define the name of the array.

27
00:01:50.961 --> 00:01:55.626
And then this equal sign is
we are going to essentially

28
00:01:55.626 --> 00:01:58.953
specify that this will be a new array.

29
00:01:58.953 --> 00:02:03.305
And inside of the bracket
with the data type, a number.

30
00:02:03.305 --> 00:02:08.251
And that number represents how
many elements this array can hold.

31
00:02:08.251 --> 00:02:13.628
If we were to look inside of an array,
this is what that would look like.

32
00:02:13.628 --> 00:02:18.276
So this int LottoTicket,
notice this time I put the brackets after

33
00:02:18.276 --> 00:02:23.007
the name to let you see that you can
put it either after the data type or

34
00:02:23.007 --> 00:02:26.994
after the name, either one,
it really does not matter.

35
00:02:26.994 --> 00:02:30.865
And then, in the memory location
it would look something like this.

36
00:02:30.865 --> 00:02:37.341
So we would have like six different
slots for each of the values.

37
00:02:37.341 --> 00:02:41.899
And then,
each of those slots has an address.

38
00:02:41.899 --> 00:02:48.487
Which is an index, and so
the very first slot, the index would be 0.

39
00:02:48.487 --> 00:02:54.698
These indices start at 0, 0 1,
2, 3, 4, and 5, all right?

40
00:02:54.698 --> 00:03:00.378
So another way that you can declare an
array is if you know the values upfront.

41
00:03:00.378 --> 00:03:04.775
Sometimes you don't use things like
a loop or something to get the values.

42
00:03:04.775 --> 00:03:07.677
But if you already know
the values upfront,

43
00:03:07.677 --> 00:03:11.610
you can go ahead and
initialize that array with the values.

44
00:03:11.610 --> 00:03:16.421
So notice here inside of a set of
curly braces after the equal sign.

45
00:03:16.421 --> 00:03:19.749
I no longer have new,
I no longer have the data type,

46
00:03:19.749 --> 00:03:24.744
I just go ahead and do a comma, delimited
list with the values of the array, and

47
00:03:24.744 --> 00:03:26.885
then you see how they are stored.

48
00:03:26.885 --> 00:03:33.370
So each one of those values gets its
own little memory location, okay?

49
00:03:33.370 --> 00:03:41.552
So if I wanted to get a Lotto ticket with
the index of 2, what would be the value?

50
00:03:41.552 --> 00:03:43.777
&gt;&gt; 14.

51
00:03:43.777 --> 00:03:44.286
&gt;&gt; Not quite.

52
00:03:44.286 --> 00:03:45.163
&gt;&gt; 22.

53
00:03:45.163 --> 00:03:46.059
&gt;&gt; 22.

54
00:03:46.059 --> 00:03:47.291
&gt;&gt; 22.

55
00:03:47.291 --> 00:03:51.113
So, index of 2 would be like literally 22,
but

56
00:03:51.113 --> 00:03:55.762
it would be the third element
of the ray since it starts at 0.

57
00:03:58.646 --> 00:04:03.083
The length of the array, so
we said that this was 6, or

58
00:04:03.083 --> 00:04:07.237
we didn't even say how many
elements this one was.

59
00:04:07.237 --> 00:04:10.394
In this declaration,
we just added the values.

60
00:04:10.394 --> 00:04:13.855
You cannot change the length
once it is defined.

61
00:04:13.855 --> 00:04:17.561
So I would not be able to later say, hey,

62
00:04:17.561 --> 00:04:21.823
let's add a seventh
element to Lotto ticket.

