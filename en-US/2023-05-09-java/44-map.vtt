WEBVTT

1
00:00:00.000 --> 00:00:04.148
So, map is a special data structure,
right?

2
00:00:04.148 --> 00:00:10.035
It does not actually inherit
from the collection interface.

3
00:00:10.035 --> 00:00:15.011
So, all of the other ones that we
talked about explicitly inherit

4
00:00:15.011 --> 00:00:17.554
from the collection interface.

5
00:00:17.554 --> 00:00:22.389
Map does not, but
it's still kind of considered a part of

6
00:00:22.389 --> 00:00:26.030
Java's overall collections framework.

7
00:00:26.030 --> 00:00:31.398
So it does contain
collection-like operations.

8
00:00:31.398 --> 00:00:35.774
And basically those can be
used as any other collection.

9
00:00:35.774 --> 00:00:39.084
Some differences somewhere
we'll see those.

10
00:00:39.084 --> 00:00:42.595
So maps are used to hold key value pairs.

11
00:00:42.595 --> 00:00:49.180
An example for this would be a list
of maybe bank transactions where

12
00:00:49.180 --> 00:00:55.296
each map entry has a unique
transaction ID serving as the key,

13
00:00:55.296 --> 00:01:03.432
and then the value would be the actual
transaction object or something like that.

14
00:01:03.432 --> 00:01:07.393
So we'll go ahead and create fruit.

15
00:01:07.393 --> 00:01:13.886
As a map, you'll notice it looks quite
different than the other data structures.

16
00:01:13.886 --> 00:01:20.214
So back in our main,
I'm gonna comment out queue,

17
00:01:20.214 --> 00:01:25.571
and I'm gonna add map demo And

18
00:01:25.571 --> 00:01:28.305
we'll go ahead and define that.

19
00:01:35.152 --> 00:01:38.272
Okay.

20
00:01:38.272 --> 00:01:40.034
So we can say map.

21
00:01:40.034 --> 00:01:45.080
This time I'm not gonna call it fruit
because it's a key value pair so

22
00:01:45.080 --> 00:01:48.125
it needs to be a little bit more involved.

23
00:01:48.125 --> 00:01:50.928
So we'll say fruit calories for example.

24
00:01:50.928 --> 00:01:55.879
And then that way we can say, okay,
the key is the fruit apple, and

25
00:01:55.879 --> 00:02:01.194
then the value would be as calories or
something like that, all right?

26
00:02:01.194 --> 00:02:03.679
So we'll instantiate this.

27
00:02:03.679 --> 00:02:10.039
I'm gonna use HashMap,
which is a popular implementation of map

28
00:02:12.076 --> 00:02:17.140
To add elements to a map,
we don't use add this time.

29
00:02:17.140 --> 00:02:23.984
Again, map is not technically
a child of the collection interface,

30
00:02:23.984 --> 00:02:30.948
so it does not have access to those
methods that we got from interface.

31
00:02:30.948 --> 00:02:35.880
So to add something, we would use put.

32
00:02:35.880 --> 00:02:41.738
Put is the one to use, and
you gotta put two objects here.

33
00:02:41.738 --> 00:02:47.596
Maps take objects, the key is an object,
the value is an object.

34
00:02:47.596 --> 00:02:50.184
So the first object is
going to be the key.

35
00:02:50.184 --> 00:02:55.563
So we'll say apple, and then the value

36
00:02:55.563 --> 00:03:01.438
would be the calories, and that's 95.

37
00:03:01.438 --> 00:03:07.396
Now, I was able to put this number here,
but again, this is an object.

38
00:03:07.396 --> 00:03:14.737
So that is represented by an integer,
not an int, okay?

39
00:03:14.737 --> 00:03:22.353
Let's add a few more, fruitCalories.put.

40
00:03:22.353 --> 00:03:24.577
A lemon is 20 calories.

41
00:03:32.144 --> 00:03:35.872
A banana is 105 calories

42
00:03:40.242 --> 00:03:44.485
And then we'll add one more,

43
00:03:44.485 --> 00:03:48.229
an orange is 45 calories

44
00:03:51.556 --> 00:03:55.824
All right, Let's print the map

45
00:03:58.169 --> 00:04:03.444
Did I already say if a map is ordered or
unordered or did I not say?

46
00:04:07.290 --> 00:04:14.693
Okay, so if we print this, notice it's
not in the order that we added it.

47
00:04:14.693 --> 00:04:17.454
So a map is unordered.

48
00:04:23.440 --> 00:04:30.151
Also a map cannot contain duplicate keys.

49
00:04:30.151 --> 00:04:31.585
The keys must be unique.

50
00:04:31.585 --> 00:04:38.846
So if I were to say, fruitCalories.put,

51
00:04:38.846 --> 00:04:44.089
and I try to add another lemon,

52
00:04:44.089 --> 00:04:47.934
and I said it's 17.

53
00:04:47.934 --> 00:04:54.250
What this will do is it's going to replace

54
00:04:54.250 --> 00:05:00.930
the lemon that's already there with 17.

55
00:05:00.930 --> 00:05:05.630
I'm sure you can imagine this
is going wrong [LAUGH] where you

56
00:05:05.630 --> 00:05:09.673
thought you were adding another element,
right?

57
00:05:09.673 --> 00:05:14.447
Cuz think about this, the way we're
doing this is not how you would do it in

58
00:05:14.447 --> 00:05:18.080
real life because you might
add things to a map later on.

59
00:05:18.080 --> 00:05:23.502
You might have had the map come to you as
a parameter and then you started adding

60
00:05:23.502 --> 00:05:29.428
objects to it, not realizing crap,
there's already an object with that key,

61
00:05:29.428 --> 00:05:33.370
and now you've inadvertently
overridden something.

62
00:05:33.370 --> 00:05:36.902
So there is another method
that you should use.

63
00:05:36.902 --> 00:05:43.279
Instead if you just wanted to add a new
element, you can say put if absent.

64
00:05:43.279 --> 00:05:46.225
And that way, it'll at least check first.

65
00:05:46.225 --> 00:05:51.835
But if you definitely wanna override it,
then yeah, use put.

66
00:05:51.835 --> 00:05:57.741
So if we say put if absent, we should
get only that one lemon that's 20,

67
00:05:57.741 --> 00:06:00.811
and it didn't override it that time.

68
00:06:04.858 --> 00:06:09.045
And then if you wanna remove,

69
00:06:09.045 --> 00:06:12.570
you remove it by its key.

70
00:06:14.862 --> 00:06:19.082
So I can say remove lemon.

71
00:06:29.467 --> 00:06:36.522
If you want to get the value of a specific
object, you can do that as well.

72
00:06:36.522 --> 00:06:42.286
So we can do so by saying,
let's say we want the value for

73
00:06:42.286 --> 00:06:45.241
banana, banana calories.

74
00:06:45.241 --> 00:06:47.993
What's the calories of a banana?

75
00:06:47.993 --> 00:06:52.353
So basically you're looking
this up in the map.

76
00:06:52.353 --> 00:06:56.693
So I can say fruitCalories.get, and

77
00:06:56.693 --> 00:07:01.582
I can give it the object, the key, right?

78
00:07:01.582 --> 00:07:05.424
So if I give it the key,
it'll return me the value.

79
00:07:05.424 --> 00:07:12.219
So it says bananas, yeah, that's 105.

80
00:07:12.219 --> 00:07:18.330
If I wanna know if the map
contains a certain key,

81
00:07:18.330 --> 00:07:21.019
I can do that as well.

82
00:07:21.019 --> 00:07:25.170
So we'll say contains orange.

83
00:07:35.160 --> 00:07:42.306
And that method is called contains key,
and then you give it the key.

84
00:07:46.149 --> 00:07:47.527
Yep, we got an orange.

85
00:07:47.527 --> 00:07:48.705
Yeah, question.

86
00:07:48.705 --> 00:07:54.987
&gt;&gt; For these HashMaps, is it always paired
values or could it be an arbitrary number?

87
00:07:54.987 --> 00:07:55.702
&gt;&gt; What do you mean?

88
00:07:55.702 --> 00:07:57.822
&gt;&gt; Well, we got orange,
then we got a number.

89
00:07:57.822 --> 00:08:04.353
Is it always a pair,
like two values for each one?

90
00:08:04.353 --> 00:08:09.009
We got 11, 20, but
could you assign another trade or

91
00:08:09.009 --> 00:08:14.158
another value to it other than
just the string and the numeric?

92
00:08:14.158 --> 00:08:16.532
&gt;&gt; In this specific one you mean or
in general?

93
00:08:16.532 --> 00:08:17.182
&gt;&gt; In general.

94
00:08:17.182 --> 00:08:20.843
&gt;&gt; So
you can do any type of object as the key,

95
00:08:20.843 --> 00:08:25.457
any type of object as the value,
but they are a pair.

96
00:08:25.457 --> 00:08:28.865
It's always gonna be just two,
key value, key value.

97
00:08:28.865 --> 00:08:33.099
It doesn't have to be a string and
it doesn't have to be an integer.

98
00:08:33.099 --> 00:08:34.776
Any type of object is not.

99
00:08:34.776 --> 00:08:36.990
Yes?

100
00:08:36.990 --> 00:08:41.314
&gt;&gt; Is it a good idea to use
generics with HashMaps?

101
00:08:41.314 --> 00:08:44.672
&gt;&gt; Yeah, we'll talk about that in a bit.

102
00:08:49.394 --> 00:08:52.479
&gt;&gt; But you couldn't have two
values associated with one key?

103
00:08:52.479 --> 00:08:53.511
&gt;&gt; No.

104
00:08:53.511 --> 00:08:58.996
And you couldn't even add
the other key with a new value,

105
00:08:58.996 --> 00:09:06.437
right, because then becomes a duplicate
and they don't allow duplicates.

106
00:09:06.437 --> 00:09:10.548
So one you need key, and
one value for the key.

107
00:09:10.548 --> 00:09:13.830
The values can be the same
across multiple keys, right?

108
00:09:13.830 --> 00:09:18.577
So maybe two of these
fruits had calories of 95.

109
00:09:18.577 --> 00:09:23.212
That's perfectly fine,
but that's it, all right?

110
00:09:23.212 --> 00:09:31.366
And then I'll quickly show you about the
immutability, I mean the immutable way.

111
00:09:31.366 --> 00:09:34.216
So this is really fun to do.

112
00:09:34.216 --> 00:09:38.007
But again, you have the limitations here.

113
00:09:38.007 --> 00:09:41.007
So I'll say, immutable fruit calories.

114
00:09:41.007 --> 00:09:45.422
And we can say,
why do I keep spelling that like that?

115
00:09:45.422 --> 00:09:47.934
And we could say map.of.

116
00:09:47.934 --> 00:09:53.065
What's really fun here,
I don't know, it's fun to me,

117
00:09:53.065 --> 00:09:59.473
maybe I'm a nerd, but I can just specify
the key and the value like this.

118
00:09:59.473 --> 00:10:03.513
And I can go on and on and
have however many of these I want.

119
00:10:03.513 --> 00:10:06.082
So lemon 20.

120
00:10:06.082 --> 00:10:09.442
I mean if I really wanted to be wild,

121
00:10:09.442 --> 00:10:14.045
I could even put all of
this on one line like that.

122
00:10:14.045 --> 00:10:18.931
[LAUGH] I don't know maybe cuz
I grew up doing maps like this.

123
00:10:18.931 --> 00:10:23.158
This is just amazing to me that
I could do a map on one line.

124
00:10:23.158 --> 00:10:25.908
Definitely don't recommend it except for
fun.

125
00:10:25.908 --> 00:10:32.418
But it will basically take two things,
this is one entry, this is one entry.

126
00:10:32.418 --> 00:10:36.498
I'll put it back so no one says Angie
Jones taught them to do one line maps.

127
00:10:36.498 --> 00:10:39.592
&gt;&gt; [LAUGH]
&gt;&gt; All right, so for readability,

128
00:10:39.592 --> 00:10:41.623
you would want it like this, right?

129
00:10:41.623 --> 00:10:45.921
Each one on the line, but
of course this is immutable, meaning,

130
00:10:45.921 --> 00:10:48.516
again you cannot then modify this map.

131
00:10:48.516 --> 00:10:50.659
&gt;&gt; Can you look for the value?

132
00:10:50.659 --> 00:10:56.178
Same way like on
&gt;&gt; Like how we looked for the key?

133
00:10:56.178 --> 00:10:59.796
&gt;&gt; No, like in line 82
&gt;&gt; Okay.

134
00:10:59.796 --> 00:11:02.749
&gt;&gt; Can you say instead of say banana and
say the value?

135
00:11:02.749 --> 00:11:03.604
&gt;&gt; The value?

136
00:11:03.604 --> 00:11:04.430
&gt;&gt; Yeah.

137
00:11:04.430 --> 00:11:08.779
&gt;&gt; No, so when you do get like that,
you have to get it by the key,

138
00:11:08.779 --> 00:11:12.474
cuz remember,
the values don't have to be unique.

139
00:11:12.474 --> 00:11:17.620
So by giving it a value, that would
basically be the opposite direction where

140
00:11:17.620 --> 00:11:23.412
you're thinking that the value associates
with some unique key and that's not true.

141
00:11:23.412 --> 00:11:28.323
&gt;&gt; So if you did wanna do that you'd
have to probably loop through the entire

142
00:11:28.323 --> 00:11:29.057
HashMap?

143
00:11:29.057 --> 00:11:34.472
&gt;&gt; Yeah, if I wanna say buy me all
the objects that have this value or

144
00:11:34.472 --> 00:11:37.599
something like that, I can do that.

