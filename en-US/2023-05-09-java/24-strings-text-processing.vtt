WEBVTT

1
00:00:00.246 --> 00:00:03.355
So this next section is about strings.

2
00:00:03.355 --> 00:00:07.605
Someone asked earlier if
a string was a wrapper class.

3
00:00:07.605 --> 00:00:11.736
It is not, and
it's also not a primitive data type.

4
00:00:11.736 --> 00:00:13.806
So a string is an object,

5
00:00:13.806 --> 00:00:18.255
and it represents a sequence
of characters, right.

6
00:00:18.255 --> 00:00:22.873
The string class actually provides
lots of helpful convenience methods

7
00:00:22.873 --> 00:00:24.015
just like those.

8
00:00:24.015 --> 00:00:28.098
Wrapper classes do so
it does have that in common.

9
00:00:28.098 --> 00:00:33.230
And let's explore some of the common
methods that are available.

10
00:00:33.230 --> 00:00:38.324
We're gonna write a bunch of little
fun programs there and by fun I mean.

11
00:00:38.324 --> 00:00:42.665
These are the types of things that people
give you in coding interviews and stuff.

12
00:00:42.665 --> 00:00:43.811
So not fun.

13
00:00:43.811 --> 00:00:45.880
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH]

14
00:00:45.880 --> 00:00:46.679
&gt;&gt; Get you a job.

15
00:00:46.679 --> 00:00:50.104
&gt;&gt; Yeah, [LAUGH] But
it's a great way that we can see a lot of

16
00:00:50.104 --> 00:00:53.620
the convenience methods that
are available in string.

17
00:00:53.620 --> 00:00:56.752
And see how to think through
some of these things, all right.

18
00:00:56.752 --> 00:00:58.505
So this first one is a word count,

19
00:00:58.505 --> 00:01:02.274
we're gonna write a method that counts
the number of words in a string.

20
00:01:02.274 --> 00:01:05.670
And prints them individually on new lines.

21
00:01:05.670 --> 00:01:08.966
All right, so back in our ID.

22
00:01:08.966 --> 00:01:11.030
Let's go ahead and make a new package.

23
00:01:16.833 --> 00:01:21.965
And this section is on text in general,

24
00:01:21.965 --> 00:01:24.919
not just strings, but

25
00:01:24.919 --> 00:01:30.528
we could just call it strings or whatever.

26
00:01:30.528 --> 00:01:32.508
Am I in the right place?

27
00:01:32.508 --> 00:01:36.283
Yeah, okay, and then let's go ahead and
create a new class.

28
00:01:36.283 --> 00:01:43.561
We'll call this one
TextProcessor All right.

29
00:01:45.883 --> 00:01:48.677
Now we're gonna do a bunch
of these little exercises.

30
00:01:48.677 --> 00:01:50.383
So we'll make a main method.

31
00:01:50.383 --> 00:01:53.751
That'll just call the methods,
and we'll write a method for

32
00:01:53.751 --> 00:01:56.166
each one of these little exercises, okay.

33
00:01:56.166 --> 00:02:00.856
So the first one we're
gonna do is count words.

34
00:02:00.856 --> 00:02:02.138
You can put whatever you want.

35
00:02:02.138 --> 00:02:04.205
I'm gonna put ("I love Java").

36
00:02:08.519 --> 00:02:10.858
And then we'll make that method.

37
00:02:13.108 --> 00:02:19.811
So we'll say public
static void count words.

38
00:02:19.811 --> 00:02:24.816
And this will take a string and
now we want to

39
00:02:24.816 --> 00:02:30.391
do basically some tokenizing of this,
right.

40
00:02:30.391 --> 00:02:35.377
So we can go ahead and
use var words equals.

41
00:02:35.377 --> 00:02:38.366
And with this text, I wanna say dot and

42
00:02:38.366 --> 00:02:42.956
notice all of these helper
methods that I have available.

43
00:02:42.956 --> 00:02:48.988
I can do to lowercase or to uppercase and
all sorts of other things.

44
00:02:48.988 --> 00:02:52.357
What I wanna do is split this text.

45
00:02:52.357 --> 00:02:57.115
And this takes a regular expression,
which I am not good at,

46
00:02:57.115 --> 00:02:59.836
but I know that I wanna split this.

47
00:02:59.836 --> 00:03:02.920
If I'm talking about how
many words are in there,

48
00:03:02.920 --> 00:03:05.275
what would be a good way to split this?

49
00:03:05.275 --> 00:03:06.746
By the space, right.

50
00:03:06.746 --> 00:03:11.666
So let's go ahead and
spli.t it on a blank space.

51
00:03:11.666 --> 00:03:16.317
And that way this should split
this right here I should be one,

52
00:03:16.317 --> 00:03:19.365
love should be one, Java should be one.

53
00:03:19.365 --> 00:03:24.781
Now notice here I use var and
this resolves

54
00:03:24.781 --> 00:03:30.679
to an array of strings
is what it resolves to.

55
00:03:30.679 --> 00:03:34.578
So I'll get three strings there so

56
00:03:34.578 --> 00:03:42.389
in order to know how many elements
are in the array which should I use?

57
00:03:42.389 --> 00:03:43.903
What should I use?

58
00:03:43.903 --> 00:03:46.211
How do I know how many
elements are in this array?

59
00:03:49.619 --> 00:03:50.277
&gt;&gt; Length.

60
00:03:50.277 --> 00:03:55.118
&gt;&gt; Yes length words.length, right.

61
00:03:55.118 --> 00:03:58.404
So we talked about that
in the array chapter.

62
00:03:58.404 --> 00:04:02.457
Where you can see how many elements
are in an array using length.

63
00:04:02.457 --> 00:04:04.771
Definitely keep that in
the back of your head.

64
00:04:04.771 --> 00:04:07.564
I always use length all the time.

65
00:04:07.564 --> 00:04:09.722
It's very popular, all right.

66
00:04:09.722 --> 00:04:14.114
So now I know the number
of words there are and

67
00:04:14.114 --> 00:04:20.664
then the other prompt said to print
them all on a new line, right.

68
00:04:20.664 --> 00:04:26.228
So, I need to first let
them know how many numbers.

69
00:04:26.228 --> 00:04:31.119
So let's do that first,
let's do a print statement and

70
00:04:31.119 --> 00:04:35.814
I wanna use something remember
you may not remember.

71
00:04:35.814 --> 00:04:40.877
But much earlier lesson,
I specified that there were a number of

72
00:04:40.877 --> 00:04:45.862
ways that you could append a variable
in the middle of a string.

73
00:04:45.862 --> 00:04:51.091
So we're gonna use another more kind
of advanced method to do that now.

74
00:04:51.091 --> 00:04:55.549
So I want to use, let's do this.

75
00:04:55.549 --> 00:05:01.171
Let's first declare the message,
I'm gonna say it's a string.

76
00:05:01.171 --> 00:05:05.856
What I want to use is this string.format.

77
00:05:05.856 --> 00:05:10.789
So string.format is a nice
method that will allow me to

78
00:05:10.789 --> 00:05:15.197
essentially add placeholders
within a string.

79
00:05:15.197 --> 00:05:20.637
And then give it the variables
that need to be replaced, okay.

80
00:05:20.637 --> 00:05:26.718
So, I wanna say, and it's just much
cleaner, ("your text contains").

81
00:05:26.718 --> 00:05:29.730
Now, this is where I
would have did a plus,

82
00:05:29.730 --> 00:05:34.687
did the number of words, then another
plus, I need to add the spaces.

83
00:05:34.687 --> 00:05:36.852
So, instead of that I'm
gonna add a placeholder.

84
00:05:36.852 --> 00:05:45.418
In the form of %d, so this format has a
couple of different percent like symbols.

85
00:05:45.418 --> 00:05:52.463
D stands for digit, so this is saying I'm
gonna give you a digit to put right here.

86
00:05:52.463 --> 00:05:56.757
So your text contains %d words.

87
00:05:56.757 --> 00:05:58.691
It's a placeholder.

88
00:05:58.691 --> 00:06:03.516
Now, format then takes however
many more arguments you need to

89
00:06:03.516 --> 00:06:07.077
give it to replace any
placeholders you have.

90
00:06:07.077 --> 00:06:08.504
So we only have one placeholder.

91
00:06:08.504 --> 00:06:15.157
We would just give it that variable,
so number of words.

92
00:06:15.157 --> 00:06:20.221
And the reason you want
to use this is this just

93
00:06:20.221 --> 00:06:24.768
reads really cleanly versus plus sign.

94
00:06:24.768 --> 00:06:26.093
Did I forget the space?

95
00:06:26.093 --> 00:06:27.479
You know what I mean?

96
00:06:27.479 --> 00:06:32.569
So this is like just really clean.

97
00:06:32.569 --> 00:06:35.318
&gt;&gt; Sorry, what exactly is regex?

98
00:06:35.318 --> 00:06:42.004
&gt;&gt; Regular expressions,
Whole nother course.

99
00:06:42.004 --> 00:06:49.553
[LAUGH] All right, okay, so
we formatted our message.

100
00:06:49.553 --> 00:06:53.138
Now we can go ahead and
print that message out.

101
00:06:55.096 --> 00:06:57.573
All right, so
that tells them the number of words but

102
00:06:57.573 --> 00:07:00.005
then we also needed to
print the words themselves.

103
00:07:00.005 --> 00:07:04.496
So we can use a loop, right.

104
00:07:04.496 --> 00:07:05.560
We have an array.

105
00:07:05.560 --> 00:07:07.446
We wanna print everything in the loop.

106
00:07:07.446 --> 00:07:14.265
I mean in everything in the array, we use
a loop, and we could do the enhanced one.

107
00:07:14.265 --> 00:07:17.977
So we said, all right.

108
00:07:17.977 --> 00:07:22.592
For all of the words which is
an array take each one assign it to

109
00:07:22.592 --> 00:07:25.138
a variable that's called word.

110
00:07:25.138 --> 00:07:30.715
And then go ahead and
print that word out, Okay.

111
00:07:32.787 --> 00:07:35.896
And that is our count words.

112
00:07:37.915 --> 00:07:38.498
Let's run it.

113
00:07:44.291 --> 00:07:50.228
So this shows your text contains
three words I love Java.

114
00:07:50.228 --> 00:07:53.300
You if you wanna test this
you can change this to.

115
00:07:53.300 --> 00:07:59.486
However many words you want,
test it out, all right.

116
00:07:59.486 --> 00:08:03.219
So with that,
we looked at the split method,

117
00:08:03.219 --> 00:08:06.573
which is a method on string as an object.

118
00:08:06.573 --> 00:08:09.422
Notice to,
there's a couple of things we did.

119
00:08:09.422 --> 00:08:12.268
So this is a text as a string.

120
00:08:12.268 --> 00:08:15.629
We use the text object to say dot split,

121
00:08:17.415 --> 00:08:23.019
Versus here we use the string class and
say dot format.

122
00:08:23.019 --> 00:08:25.778
Why were we able to do this?

123
00:08:25.778 --> 00:08:26.757
What's the difference here?

124
00:08:26.757 --> 00:08:29.445
Why did one time we use the object, and

125
00:08:29.445 --> 00:08:32.476
the other time we use
the name of the class?

126
00:08:32.476 --> 00:08:33.500
I'll give you a hint.

127
00:08:36.863 --> 00:08:41.966
For the entire day, people have been
asking me, what does this mean?

128
00:08:41.966 --> 00:08:46.998
[LAUGH] Static, right.

129
00:08:46.998 --> 00:08:52.069
All right, so the split method,
notice it didn't ask me for

130
00:08:52.069 --> 00:08:56.755
the text that it needs to
split because it's an object.

131
00:08:56.755 --> 00:08:58.248
It's part of the object.

132
00:08:58.248 --> 00:09:00.647
It has the data already.

133
00:09:00.647 --> 00:09:04.497
So when I said text,
which is an object, dot split,

134
00:09:04.497 --> 00:09:08.185
it already has whatever
the value of this text is.

135
00:09:08.185 --> 00:09:11.220
And it's able to just
do what it needs to do.

136
00:09:11.220 --> 00:09:18.069
Those is format I had to actually give
it a string, and any placeholders.

137
00:09:18.069 --> 00:09:24.588
It has no context of any
data because it is static.

138
00:09:24.588 --> 00:09:28.952
So there are some methods that can be
static, you don't have to have any data.

139
00:09:28.952 --> 00:09:32.810
You don't have to know anything,
there is no world, right.

140
00:09:32.810 --> 00:09:37.656
Just call it versus other methods
like split are not static,

141
00:09:37.656 --> 00:09:39.947
they are part of the object.

142
00:09:39.947 --> 00:09:42.217
So that's what the static part means.

