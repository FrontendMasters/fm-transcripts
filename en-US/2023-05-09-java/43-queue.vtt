WEBVTT

1
00:00:00.000 --> 00:00:03.772
The next one we'll talk about is a queue.

2
00:00:03.772 --> 00:00:08.115
So a queue is a collection
of ordered elements.

3
00:00:08.115 --> 00:00:16.694
And it's typically used to hold items that
are going to be processed in some way.

4
00:00:16.694 --> 00:00:23.290
So an example use case would be people in
a checkout line at a supermarket, right?

5
00:00:23.290 --> 00:00:27.072
So people who are new to the queue,

6
00:00:27.072 --> 00:00:31.255
they're added at the end of the line.

7
00:00:31.255 --> 00:00:38.267
And the processing of the queue is handled
from the beginning to the end, right?

8
00:00:38.267 --> 00:00:45.603
This type of processing is
known as first in, first out.

9
00:00:45.603 --> 00:00:52.035
So we are going to make
the fruit as a queue.

10
00:00:52.035 --> 00:00:55.464
So let's add a call to queueDemo here.

11
00:01:02.439 --> 00:01:06.517
We'll say public static void queueDemo.

12
00:01:09.285 --> 00:01:13.454
We'll use queue, As the type.

13
00:01:17.283 --> 00:01:23.153
And we will instantiate
this as a linked list.

14
00:01:30.368 --> 00:01:34.568
So let's go ahead,
I'm going to be a little lazy.

15
00:01:34.568 --> 00:01:39.587
I'm just gonna copy these fruit,
apple, lemon, banana and orange.

16
00:01:42.804 --> 00:01:45.544
And now we have some
fruit added to the queue.

17
00:01:47.932 --> 00:01:50.665
Let's go ahead and print this out

18
00:01:55.983 --> 00:01:58.632
To make sure they're in order.

19
00:01:58.632 --> 00:02:05.074
So yep, the order that I added them that's
the order that they stay in, all right?

20
00:02:05.074 --> 00:02:08.482
Queues do allow for duplicate elements.

21
00:02:08.482 --> 00:02:14.293
So if I said I wanna add another lemon,

22
00:02:16.807 --> 00:02:21.218
And I ran this then I have two lemons.

23
00:02:25.300 --> 00:02:30.697
What's interesting with queues is let's
say that with the list when we wanted

24
00:02:30.697 --> 00:02:36.353
to remove an element from the list we had
to specify either the index or the object.

25
00:02:36.353 --> 00:02:40.231
For a queue, again,
it's first-in-first-out.

26
00:02:40.231 --> 00:02:47.345
So if I say remove, I do have ways
that I can remove a specific object.

27
00:02:47.345 --> 00:02:53.560
But if I call remove I can
call it with out a argument.

28
00:02:53.560 --> 00:02:58.741
And this is going to remove the very
first thing that is in line.

29
00:02:58.741 --> 00:03:02.241
That is known as the head of the line.

30
00:03:02.241 --> 00:03:05.286
The last element would
be known as the tail.

31
00:03:05.286 --> 00:03:10.839
Now, usually,
if you remove something from a queue,

32
00:03:10.839 --> 00:03:15.438
again, queues are for processing the data.

33
00:03:15.438 --> 00:03:20.254
So if I remove something from a queue,
it's because maybe I want to do

34
00:03:20.254 --> 00:03:24.667
something with that object and
get it out of the queue, right?

35
00:03:24.667 --> 00:03:30.981
So, this remove is not gonna return a
void, most removes would just return void,

36
00:03:30.981 --> 00:03:34.928
but this will actually
return you the object back.

37
00:03:34.928 --> 00:03:37.570
So, I'm going to use var, here,

38
00:03:37.570 --> 00:03:42.325
[LAUGH] I don't feel like we've
been giving that enough love.

39
00:03:42.325 --> 00:03:44.830
So we're gonna call this removed.

40
00:03:44.830 --> 00:03:49.665
And I think that that will,

41
00:03:52.019 --> 00:03:57.990
It'll remove the item from the queue,
but it will store that object there.

42
00:03:57.990 --> 00:04:02.295
And so I can then like print
out what was removed or

43
00:04:02.295 --> 00:04:05.552
do whatever I want with that object.

44
00:04:05.552 --> 00:04:10.839
So let's just say removed and

45
00:04:10.839 --> 00:04:18.036
then say, + the removed object there.

46
00:04:18.036 --> 00:04:20.056
So I'm gonna run that.

47
00:04:22.426 --> 00:04:27.823
You see they removed the apple,
because the apple was what?

48
00:04:27.823 --> 00:04:29.945
The head of the queue.

49
00:04:34.861 --> 00:04:40.218
All right, I don't wanna remove it,
I wanna know who's

50
00:04:40.218 --> 00:04:45.146
next in line, but
I'm not ready quite to remove it.

51
00:04:45.146 --> 00:04:46.726
You can do that as well.

52
00:04:46.726 --> 00:04:53.889
So to do that, we can say, and
let's put this in a print statement.

53
00:04:53.889 --> 00:04:56.021
And we'll say head of queue.

54
00:04:58.669 --> 00:05:03.342
And we can call fruits.peek.

55
00:05:03.342 --> 00:05:08.716
So peek will allow me to
see what object is there.

56
00:05:08.716 --> 00:05:12.864
It'll actually,
will it return this object?

57
00:05:12.864 --> 00:05:16.035
Yeah, it'll return the object back to me.

58
00:05:16.035 --> 00:05:19.809
And, But

59
00:05:19.809 --> 00:05:25.356
it won't remove it from the queue,
all right?

60
00:05:25.356 --> 00:05:29.176
So we removed the first element,
which was apple, and

61
00:05:29.176 --> 00:05:33.424
it's telling us the next head
of the queue would be limited.

62
00:05:33.424 --> 00:05:35.633
And then we printed it out and

63
00:05:35.633 --> 00:05:40.064
you see that lemon is still
actually in the queue, okay?

64
00:05:40.064 --> 00:05:42.133
Questions on queues?

65
00:05:45.992 --> 00:05:47.644
&gt;&gt; What type did you make this queue?

66
00:05:47.644 --> 00:05:51.956
&gt;&gt; I instantiated it as a linked list.

