WEBVTT

1
00:00:00.000 --> 00:00:07.194
So remember we talked about the enhanced
for loop when we discussed arrays.

2
00:00:07.194 --> 00:00:11.852
We use these for the array,
but you can also use

3
00:00:11.852 --> 00:00:16.643
them to loop through collections,
all right?

4
00:00:16.643 --> 00:00:22.533
So we're going to actually iterate through
that list using the enhanced for loop.

5
00:00:24.474 --> 00:00:28.869
Okay, so going back to collections demo,

6
00:00:28.869 --> 00:00:35.354
I'm going to comment out set demo and
uncomment out list demo.

7
00:00:35.354 --> 00:00:37.633
Did I say list?

8
00:00:37.633 --> 00:00:41.125
Yes, all right, great.

9
00:00:41.125 --> 00:00:46.258
So inside of list,
before we do all of this stuff,

10
00:00:46.258 --> 00:00:51.898
we'll comment all this out so
we don't get confused.

11
00:00:51.898 --> 00:00:56.256
And let's go ahead and
add some looping in here.

12
00:00:56.256 --> 00:01:00.152
So, again, a reminder that enhance for

13
00:01:00.152 --> 00:01:05.194
loop works like you put for
and then inside of this you

14
00:01:05.194 --> 00:01:10.809
would need to define the variable
that you want each object

15
00:01:10.809 --> 00:01:15.873
to be assigned to every
time this loop runs, right?

16
00:01:15.873 --> 00:01:18.965
So we say String fruit, and

17
00:01:18.965 --> 00:01:24.214
we would like to iterate over the list,
okay?

18
00:01:24.214 --> 00:01:28.114
Now, we have an error here, and

19
00:01:28.114 --> 00:01:33.749
the reason that we have
an error here is because

20
00:01:33.749 --> 00:01:41.708
we used a little bit of a shortcut
when we defined our collection.

21
00:01:41.708 --> 00:01:45.204
And, when we did this Java,

22
00:01:45.204 --> 00:01:50.024
notice I used var somewhere, hold on.

23
00:01:50.024 --> 00:01:52.724
I used var here under removed.

24
00:01:52.724 --> 00:01:54.919
And notice when I said that,

25
00:01:54.919 --> 00:01:59.405
what was returned back to me
was a generic object, right?

26
00:01:59.405 --> 00:02:05.741
So when I made queue here, I didn't
specify what type of data thet it holds,

27
00:02:05.741 --> 00:02:09.705
so it's is holds any type
of object by default.

28
00:02:09.705 --> 00:02:14.410
It's best practice to be specific
on the type of objects that

29
00:02:14.410 --> 00:02:18.286
your collection can hold and
more specifically is

30
00:02:18.286 --> 00:02:23.009
required if you're gonna try
to use this enhanced for loop.

31
00:02:23.009 --> 00:02:28.700
So the way that we specify that hey,
this is be a list of strings

32
00:02:28.700 --> 00:02:34.401
is in these angle brackets,
you would write the object type.

33
00:02:34.401 --> 00:02:40.027
And notice that error on enhance for
loop went away.

34
00:02:40.027 --> 00:02:42.872
The reason that error was there,

35
00:02:42.872 --> 00:02:47.442
again is a part of where I'm
saying I have an object and

36
00:02:47.442 --> 00:02:54.367
I'm trying to store an object into
a string variable, I can't do that, right?

37
00:02:54.367 --> 00:02:55.665
It's a different type.

38
00:02:58.905 --> 00:03:03.845
Okay, so once you have defined
what type of collection it is,

39
00:03:03.845 --> 00:03:08.405
what's the data it'll hold,
you can use the enhance for

40
00:03:08.405 --> 00:03:12.215
loop and
then it gets pretty straightforward.

41
00:03:12.215 --> 00:03:15.392
We could just say print out the fruit.

42
00:03:15.392 --> 00:03:21.220
And remember fruit, again, is each
individual element within the collection.

43
00:03:21.220 --> 00:03:25.989
So when we print this,
boom, we see that each line

44
00:03:35.323 --> 00:03:39.076
Questions on enhanced for loop, yeah?

45
00:03:39.076 --> 00:03:42.504
&gt;&gt; I got a question on that type.

46
00:03:42.504 --> 00:03:45.451
&gt;&gt; Yeah.
&gt;&gt; So before you specified string for

47
00:03:45.451 --> 00:03:51.015
list, now wants us to at least put
an empty angle brackets next to ArrayList.

48
00:03:51.015 --> 00:03:53.122
&gt;&gt; He recommended that for you?

49
00:03:53.122 --> 00:03:55.137
&gt;&gt; Yeah, I think that's right.

50
00:03:55.137 --> 00:03:56.538
&gt;&gt; I don't have a problem.

51
00:03:56.538 --> 00:03:58.212
It's probably a suggestion.

52
00:03:58.212 --> 00:04:01.151
So you might have flagged it as a warning,
all right?

53
00:04:01.151 --> 00:04:07.508
So, they want you to do this.

54
00:04:07.508 --> 00:04:08.467
Is that right?

55
00:04:08.467 --> 00:04:09.769
Where does it go?

56
00:04:09.769 --> 00:04:16.269
Before the thing, I mean,
in my opinion, it's overkill but

57
00:04:16.269 --> 00:04:21.894
if you care about warnings,
[LAUGH] which you should,

58
00:04:21.894 --> 00:04:26.408
then yeah, you could add it there as well.

59
00:04:26.408 --> 00:04:34.096
I never do just because it's just too much
it's too much and I don't need it, right?

60
00:04:34.096 --> 00:04:39.037
But it does help with just making sure
everything is safe that's getting

61
00:04:39.037 --> 00:04:41.387
added by me adding that like that.

62
00:04:41.387 --> 00:04:46.493
Now if I tried to add a different type of
fruit, I mean a different type of object.

63
00:04:46.493 --> 00:04:51.659
Let's say, new rectangle for example.

64
00:04:55.773 --> 00:04:59.105
And let's import that.

65
00:04:59.105 --> 00:05:01.354
Come on.

66
00:05:01.354 --> 00:05:05.754
Then, I would get an error because I said
that this is a string whereas I might not

67
00:05:05.754 --> 00:05:06.950
get an error before.

68
00:05:06.950 --> 00:05:11.010
It'll just let me add that
rectangle because, I don't know,

69
00:05:11.010 --> 00:05:14.701
we just take any kind of object,
polymorphism, right?

70
00:05:14.701 --> 00:05:17.602
But, now that I specified a string,

71
00:05:17.602 --> 00:05:23.606
I can make sure that the only things
that are being added are actual strings.

72
00:05:23.606 --> 00:05:31.095
All right, so I want us to look at
the enhanced for loop for a map.

73
00:05:31.095 --> 00:05:35.207
Okay, so map is always gonna kinda
be a little bit differently,

74
00:05:35.207 --> 00:05:37.427
worked a little bit differently.

75
00:05:37.427 --> 00:05:41.474
We'll go ahead and comment out all this

76
00:05:41.474 --> 00:05:46.141
stuff from the main,
I wanna say run the map.

77
00:05:46.141 --> 00:05:52.863
Okay, so close this, and we're in the map.

78
00:05:52.863 --> 00:05:54.592
Map demo method.

79
00:05:58.303 --> 00:06:03.474
All right, so
in order to use the enhanced for

80
00:06:03.474 --> 00:06:07.701
loop, again you start with the for.

81
00:06:07.701 --> 00:06:15.453
Now, remember in the slides I said
map dot entry is what you get from,

82
00:06:15.453 --> 00:06:19.597
iterating through these things, so

83
00:06:19.597 --> 00:06:23.889
that would be the type, Map.Entry.

84
00:06:23.889 --> 00:06:27.776
And we'll call this calorieInfo, and

85
00:06:27.776 --> 00:06:34.624
then what you're iterating over
is the fruitCalories.entrySet.

86
00:06:34.624 --> 00:06:41.565
Now notice here,
I have a set that is the entry.

87
00:06:41.565 --> 00:06:45.161
I have a set that is just the keys and

88
00:06:45.161 --> 00:06:50.253
then I have a collection
that is just the values.

89
00:06:50.253 --> 00:06:55.572
So, someone asked me earlier about
getting the values and stuff.

90
00:06:55.572 --> 00:06:59.049
You could do that with that values and

91
00:06:59.049 --> 00:07:03.994
that would give you a collection
of just the values.

92
00:07:03.994 --> 00:07:05.577
You can also do just the keys.

93
00:07:05.577 --> 00:07:09.928
If you want the pair
you would do entry set.

94
00:07:09.928 --> 00:07:13.622
Again, we have an error because what?

95
00:07:13.622 --> 00:07:18.032
We did not specify the type
that this map holds, so

96
00:07:18.032 --> 00:07:22.967
we have a string and
we have an integer, not it, right,

97
00:07:22.967 --> 00:07:27.705
because that's not gonna work,
it is not an object.

98
00:07:27.705 --> 00:07:30.320
So I have to use the wrapper class.

99
00:07:34.453 --> 00:07:38.255
Now, that's how I would
use the enhanced for

100
00:07:38.255 --> 00:07:43.669
loop to get inside of a map,
from here, it becomes pretty easy.

101
00:07:43.669 --> 00:07:52.308
I can just say calorieinfo.getKey.

102
00:07:55.643 --> 00:08:01.096
Plus, now I'll do a colon, And

103
00:08:01.096 --> 00:08:05.059
then calorieInfo.getValue.

104
00:08:19.772 --> 00:08:23.399
Okay, let's run map one.

105
00:08:23.399 --> 00:08:28.974
And boom, we see key and
value printed, yeah?

106
00:08:28.974 --> 00:08:33.856
&gt;&gt; You repeat why you have to
use the integer wrapper class?

107
00:08:33.856 --> 00:08:37.340
&gt;&gt; Yes, so
collections can only hold objects,

108
00:08:37.340 --> 00:08:40.465
they can't hold primitive data types.

109
00:08:40.465 --> 00:08:45.200
So integer would be the wrapper
class that represents

110
00:08:45.200 --> 00:08:49.733
an integer data type and
it happens to be an object.

111
00:08:49.733 --> 00:08:54.356
So that's what you would need to use.

