WEBVTT

1
00:00:00.000 --> 00:00:02.831
So when working with polymorphism,

2
00:00:02.831 --> 00:00:07.411
sometimes objects need to be
what's called type casting.

3
00:00:07.411 --> 00:00:12.483
And type casting is the implicit or
explicit act of

4
00:00:12.483 --> 00:00:17.567
converting an object type
into a different type.

5
00:00:17.567 --> 00:00:24.467
So casting can be performed upward or
downward on an inheritance tree.

6
00:00:24.467 --> 00:00:28.066
For example, let's say we have dog and

7
00:00:28.066 --> 00:00:33.411
cat classes that both inherit
from the animal class here,

8
00:00:33.411 --> 00:00:38.647
when we create an object with
the type of the superclass,

9
00:00:38.647 --> 00:00:43.446
but we instantiate it with
the type of the subclass,

10
00:00:43.446 --> 00:00:46.856
this is an implicit up cast, right?

11
00:00:46.856 --> 00:00:51.768
I've casted it upward
from a dog to animal.

12
00:00:51.768 --> 00:00:57.465
In an implicit up cast,
the object now only has access

13
00:00:57.465 --> 00:01:02.915
to the methods of the class
that it was up casted to.

14
00:01:02.915 --> 00:01:09.622
For example, even though the object
sasha is an instance of the dog class,

15
00:01:09.622 --> 00:01:14.308
its type is animal, so
this object cannot reference

16
00:01:14.308 --> 00:01:19.648
members that are specific to
the dog class, such as fetch.

17
00:01:19.648 --> 00:01:28.448
So here,
if we say sasha There is no fetch there.

18
00:01:35.184 --> 00:01:42.928
So in order to access methods from the
subclass if you just want it to do this,

19
00:01:42.928 --> 00:01:50.192
then we need to explicitly downcast
that object to a dog, the type dog.

20
00:01:50.192 --> 00:01:54.040
So we are going to downcast sasha,

21
00:01:54.040 --> 00:01:58.818
sasha the cat [LAUGH] to
enable her to scratch

22
00:01:58.818 --> 00:02:03.464
her itch cuz right now
sasha the cat cannot

23
00:02:03.464 --> 00:02:08.392
access the scratch
method in the cat class.

24
00:02:08.392 --> 00:02:13.419
All right, so sasha the cat,
she was able to make a sound, and

25
00:02:13.419 --> 00:02:18.549
this is really interesting because
when we called make sound,

26
00:02:18.549 --> 00:02:23.616
it executed the make sound
method from the subclass, right?

27
00:02:23.616 --> 00:02:29.126
The one that was
the overriding implementation.

28
00:02:29.126 --> 00:02:30.404
But other than that,

29
00:02:30.404 --> 00:02:34.316
it's not able to access any other
methods that are in that class.

30
00:02:34.316 --> 00:02:36.686
So it gets a little wonky in the brain.

31
00:02:36.686 --> 00:02:41.628
But let's say that we
want sasha to scratch.

32
00:02:41.628 --> 00:02:47.056
We'll say sasha., and
it's not explicitly here for

33
00:02:47.056 --> 00:02:53.076
her to scratch, but
you say I know it exists, I say scratch.

34
00:02:53.076 --> 00:02:58.031
If you do this,
notice you have an error here.

35
00:02:58.031 --> 00:03:04.073
And it's saying we don't know
what you're talking about.

36
00:03:04.073 --> 00:03:10.874
So in order to explicitly downcast
sasha from animal to dog just so

37
00:03:10.874 --> 00:03:16.315
we can make this call,
what we'll do is right before

38
00:03:16.315 --> 00:03:21.508
the object,
we're going to put in parentheses,

39
00:03:21.508 --> 00:03:25.487
the class that we want to downcast to.

40
00:03:25.487 --> 00:03:27.481
So that would be cat.

41
00:03:27.481 --> 00:03:32.561
So this alone,
it's quickly changing sasha to a cat,

42
00:03:32.561 --> 00:03:36.979
but in order to make that
whole thing an object,

43
00:03:36.979 --> 00:03:41.067
because we haven't stored that anywhere,

44
00:03:41.067 --> 00:03:46.921
we will put one more set of
parentheses around the whole thing,

45
00:03:46.921 --> 00:03:51.251
making it an object, and
then it can X's cat.

46
00:03:51.251 --> 00:03:56.416
Now, this is not changing
the overall object sasha.

47
00:03:56.416 --> 00:04:00.070
Sasha is still defined
the as an animal here.

48
00:04:00.070 --> 00:04:04.993
It's just a temporary casting to access

49
00:04:04.993 --> 00:04:09.779
something and then being able to do so.

50
00:04:12.306 --> 00:04:15.594
All right, so let's run and

51
00:04:15.594 --> 00:04:19.982
make sure sasha can scratch our itch.

52
00:04:19.982 --> 00:04:21.045
Yes.

53
00:04:24.277 --> 00:04:28.440
&gt;&gt; So with this typecasting does
it only have to do with objects or

54
00:04:28.440 --> 00:04:31.656
is it also a term that's
applicable to fields?

55
00:04:31.656 --> 00:04:34.860
For example, let's say you're doing,
I don't know,

56
00:04:34.860 --> 00:04:37.665
integer.2string to treat
a number as a string,

57
00:04:37.665 --> 00:04:42.508
would that be considered typecasting as
well, or is that just something different?

58
00:04:42.508 --> 00:04:47.679
&gt;&gt; So that would be something
different because you only can

59
00:04:47.679 --> 00:04:52.537
casts upward or
downward within your own hierarchy.

60
00:04:52.537 --> 00:04:56.129
So integer and
string have no hierarchy together.

61
00:04:56.129 --> 00:05:01.645
So when you say two string is basically
creating a brand new object and

62
00:05:01.645 --> 00:05:03.938
giving you that as a string.

63
00:05:03.938 --> 00:05:06.111
It's not doing a cast.

64
00:05:06.111 --> 00:05:10.092
If you try it and that's my tip to you,

65
00:05:10.092 --> 00:05:13.827
be very careful with typecasting,

66
00:05:13.827 --> 00:05:18.681
because if I try to cast
this to anything else,

67
00:05:18.681 --> 00:05:23.908
let's say a rectangle for
example, the compiler

68
00:05:23.908 --> 00:05:29.654
wouldn't necessarily complain
about me doing that.

69
00:05:29.654 --> 00:05:33.420
But once we get into execution mode and
they actually try to do it,

70
00:05:33.420 --> 00:05:34.869
it's gonna fall apart.

71
00:05:34.869 --> 00:05:39.735
It's gonna throw an exception
because I'm not able to

72
00:05:39.735 --> 00:05:44.294
cast into something that's
not in my family tree.

73
00:05:44.294 --> 00:05:47.363
&gt;&gt; So it doesn't know what you're talking
about, or therefore it's probably passing

74
00:05:47.363 --> 00:05:49.552
a whole bunch of null values and
therefore it doesn't work.

75
00:05:49.552 --> 00:05:54.326
&gt;&gt; Well, it knows what I'm talking about,
it knows that rectangle class,

76
00:05:54.326 --> 00:05:58.187
it just can't make these two
be related when they're not.

77
00:06:02.413 --> 00:06:04.516
Yeah, okay.

78
00:06:04.516 --> 00:06:11.031
So again, that was a temporary casting
just so that I can access that object.

79
00:06:11.031 --> 00:06:16.023
Matter of fact, if I did this,
I say, sasha.scratch,

80
00:06:16.023 --> 00:06:20.391
and then I say sasha.scratch like this,
again,

81
00:06:20.391 --> 00:06:24.661
doesn't know what I'm talking about,
right?

82
00:06:24.661 --> 00:06:28.870
So I did not change sasha's type at all.

83
00:06:28.870 --> 00:06:34.391
I only cast it for this one statement
in order to do what I needed to do.

84
00:06:34.391 --> 00:06:39.706
If I wanted to make sasha
permanently be something else,

85
00:06:39.706 --> 00:06:45.349
I want to cast it and then store
it in an object, I can do that so

86
00:06:45.349 --> 00:06:51.131
that later I can access any of
the methods from that subclass.

87
00:06:51.131 --> 00:06:57.945
And so in order to do that, notice I've
cast sasha to a dog on this second line,

88
00:06:57.945 --> 00:07:04.167
and then I've stored that into a new
dog variable called sasha TheDog.

89
00:07:04.167 --> 00:07:09.136
And then if I wanted to access anything
from the dog class, I could do so

90
00:07:09.136 --> 00:07:10.661
using sasha the dog.

91
00:07:13.357 --> 00:07:17.328
&gt;&gt; What if you didn't create sasha but
it was given to you and

92
00:07:17.328 --> 00:07:19.247
you want to try and cast it?

93
00:07:19.247 --> 00:07:20.794
&gt;&gt; You can do that.

94
00:07:20.794 --> 00:07:21.433
So let's say you-.

95
00:07:21.433 --> 00:07:23.389
&gt;&gt; What happens if you
don't know what it is?

96
00:07:23.389 --> 00:07:28.836
&gt;&gt; You always know what it is because
if someone gave it to you that means

97
00:07:28.836 --> 00:07:34.778
you specify that in your parameter list,
so you say the type or whatever.

98
00:07:34.778 --> 00:07:37.962
&gt;&gt; But if they specify it as animal,
they give you an animal, and

99
00:07:37.962 --> 00:07:40.730
you think it might be a cat,
then you want it to say-.

100
00:07:40.730 --> 00:07:42.355
&gt;&gt; Yeah, beautiful.

101
00:07:42.355 --> 00:07:44.857
Okay, I got some material on that.

102
00:07:44.857 --> 00:07:48.772
We'll get to that in a couple of minutes,
all right?

103
00:07:48.772 --> 00:07:49.507
All right.

104
00:07:53.458 --> 00:07:56.618
Yeah, so we talked about casting her.

105
00:07:56.618 --> 00:08:00.353
We talked about be careful, right?

106
00:08:00.353 --> 00:08:01.457
With the casting.

107
00:08:06.459 --> 00:08:08.625
Yeah, so be careful.

108
00:08:08.625 --> 00:08:09.849
This was a cat, right?

109
00:08:09.849 --> 00:08:15.163
So this is sasha as a cat and
now I'm trying to cast sasha to a dog.

110
00:08:15.163 --> 00:08:18.996
Remember what I told you
about the hierarchy tree?

111
00:08:18.996 --> 00:08:22.819
You would think, animal, cat, dog,
this is all in the same domain,

112
00:08:22.819 --> 00:08:23.931
we got the same mama.

113
00:08:23.931 --> 00:08:26.916
Look, they are not siblings, okay?

114
00:08:26.916 --> 00:08:28.166
They have no relationships.

115
00:08:28.166 --> 00:08:33.667
If sasha was a cat,
I try to make sasha a dog.

116
00:08:33.667 --> 00:08:38.625
Again, there will not be a compilation
error but when I run this,

117
00:08:38.625 --> 00:08:43.506
I will get an error an exception
that says class cast exception.

118
00:08:43.506 --> 00:08:46.395
So if you ever see that exception,
that's what that means.

119
00:08:46.395 --> 00:08:52.148
It's gonna say I cannot make that cat,
I can't cast it to a dog.

120
00:08:52.148 --> 00:08:55.676
&gt;&gt; What do you do if you were
to formalize instead of saying,

121
00:08:55.676 --> 00:09:00.523
a cat or the dog say, the cat is an animal
like sasha the cat is sasha the animal or

122
00:09:00.523 --> 00:09:02.820
sasha the animals are sasha the dog.

123
00:09:02.820 --> 00:09:05.016
&gt;&gt; Yeah, that's what we did in our code.

124
00:09:05.016 --> 00:09:10.017
So you could do that because
they have a relationship,

125
00:09:10.017 --> 00:09:14.811
but you can't change it from
a cat to a dog like that.

126
00:09:14.811 --> 00:09:18.426
&gt;&gt; So, basically after like to navigate
those relationships, step-by-step,

127
00:09:18.426 --> 00:09:20.561
if that's what you're
trying to accomplish.

128
00:09:20.561 --> 00:09:21.632
&gt;&gt; Yeah.

129
00:09:21.632 --> 00:09:26.090
And you should only use casting
if absolutely necessary.

130
00:09:26.090 --> 00:09:31.970
It's kinda dangerous [LAUGH] territory
if you submit a pull request with

131
00:09:31.970 --> 00:09:37.458
some casting in it, anybody who's
reviewing it it's a red flag,

132
00:09:37.458 --> 00:09:43.636
you look at it very carefully and try to
think of other ways [LAUGH] to do this.

133
00:09:43.636 --> 00:09:46.610
So yeah, be very careful if you use this.

