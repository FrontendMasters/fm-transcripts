WEBVTT

1
00:00:00.335 --> 00:00:03.557
Another one I wanna show you is collect.

2
00:00:03.557 --> 00:00:08.224
This one you're going to use all
the time if you work with streams.

3
00:00:08.224 --> 00:00:13.031
So let's go ahead and make a method,
public static void collectDemo.

4
00:00:17.041 --> 00:00:21.883
So what collectors you typically use
collect on a resulting stream, so

5
00:00:21.883 --> 00:00:26.486
you've done some other operation
it's an intermediate operation

6
00:00:26.486 --> 00:00:29.973
it's giving you like this
resulting stream back.

7
00:00:29.973 --> 00:00:36.528
And then what collect will
do is assign that stream

8
00:00:36.528 --> 00:00:42.311
to a collection of your choice, all right?

9
00:00:42.311 --> 00:00:46.604
So let's take the vegetables and

10
00:00:46.604 --> 00:00:53.054
let's filter it down to
the ones that end with a S.

11
00:00:53.054 --> 00:00:58.735
And then we're going to collect that and
put it in its own new thing, okay?

12
00:00:58.735 --> 00:01:04.099
So we have the veggies we can

13
00:01:04.099 --> 00:01:08.765
say veggies.stream,

14
00:01:08.765 --> 00:01:13.430
.filter and we said v,

15
00:01:13.430 --> 00:01:18.340
v.endsWith s, right?

16
00:01:18.340 --> 00:01:21.260
This will give us a resulting stream.

17
00:01:21.260 --> 00:01:23.588
So we then can say collect.

18
00:01:31.108 --> 00:01:36.096
And inside the collect,
you need to specify, what do you want?

19
00:01:36.096 --> 00:01:38.917
What kind of, collection do you want?

20
00:01:38.917 --> 00:01:43.489
So to do that you'll say Collectors.

21
00:01:43.489 --> 00:01:49.138
And then you can say to and
notice here we got toList, we have toMap,

22
00:01:49.138 --> 00:01:54.212
we have toSet, toUnmodifiableList,
Map and Set, right?

23
00:01:54.212 --> 00:01:55.731
So you can pick what you want.

24
00:01:55.731 --> 00:02:00.840
I'm gonna pick a list and
now this whole thing is a list,

25
00:02:00.840 --> 00:02:07.601
so I would want to store this in a
variable so I can say something like list.

26
00:02:07.601 --> 00:02:08.805
&gt;&gt; All veggies?

27
00:02:08.805 --> 00:02:11.373
&gt;&gt; Not all veggie all
of them in with it is.

28
00:02:11.373 --> 00:02:12.882
&gt;&gt; All veggies.

29
00:02:12.882 --> 00:02:19.361
&gt;&gt; Veggies, veggiesEndingInS.

30
00:02:19.361 --> 00:02:22.663
All right, okay?

31
00:02:22.663 --> 00:02:27.690
And then from that, now I have an actual
collection, cuz before remember

32
00:02:27.690 --> 00:02:32.493
I had a stream, it didn't actually
modify the original collection.

33
00:02:32.493 --> 00:02:35.584
This doesn't modify
the original collection either,

34
00:02:35.584 --> 00:02:39.936
but it gives me a resulting collection
that I now could do whatever I want with.

35
00:02:41.745 --> 00:02:44.708
So what we've done is loop that's
not really a good example.

36
00:02:44.708 --> 00:02:50.877
In this case, you would want to maybe
send this off to something else,

37
00:02:50.877 --> 00:02:54.659
some other method or something like that.

38
00:02:56.613 --> 00:03:01.139
If you just want it to print it so
that we could see it, we could do that.

39
00:03:01.139 --> 00:03:04.149
We're going to use for each aren't we?

40
00:03:04.149 --> 00:03:10.372
We're gonna say System.out::println.

41
00:03:10.372 --> 00:03:16.047
&gt;&gt; Don't you want veggies ending in s for
your print line?

42
00:03:16.047 --> 00:03:16.817
&gt;&gt; Do I need it?

43
00:03:16.817 --> 00:03:18.285
&gt;&gt; For line 66.

44
00:03:18.285 --> 00:03:19.336
&gt;&gt; Do I need it?

45
00:03:19.336 --> 00:03:21.484
&gt;&gt; Do you want to print your veggies?

46
00:03:21.484 --> 00:03:24.084
&gt;&gt; Sorry, you're right.

47
00:03:24.084 --> 00:03:25.924
I used the wrong collection.

48
00:03:25.924 --> 00:03:27.556
Very good.

49
00:03:27.556 --> 00:03:33.374
Alright, let me make sure I'm
calling this from the main.

50
00:03:35.983 --> 00:03:38.020
Alright, collectDemo.

51
00:03:38.020 --> 00:03:38.932
Very nice.

52
00:03:38.932 --> 00:03:43.399
Let's run it.

53
00:03:43.399 --> 00:03:48.888
All right, and look at that peas, green
beans, brussels sprouts, and carrots.

54
00:03:48.888 --> 00:03:52.459
So let's do one more big one.

55
00:03:52.459 --> 00:03:56.463
As you can see,
the stream API is really convenient.

56
00:03:56.463 --> 00:04:02.086
It provides a number of these operations
we've only touched on a few of them.

57
00:04:02.086 --> 00:04:05.057
There's so
many more that we could touch on,

58
00:04:05.057 --> 00:04:08.418
but what's really powerful
about the stream API is

59
00:04:08.418 --> 00:04:13.284
being able to join like a lot of these
intermediate operations together.

60
00:04:13.284 --> 00:04:19.023
So let's make one more method that'll
kind of combine a couple of them so

61
00:04:19.023 --> 00:04:21.950
we can see it like the power of it all.

62
00:04:21.950 --> 00:04:27.440
So we'll say public static void and

63
00:04:27.440 --> 00:04:34.401
we'll call this like multiOperationDemo.

64
00:04:37.882 --> 00:04:43.971
All right, so I wanna say veggies.stream.

65
00:04:43.971 --> 00:04:46.572
All right, that's the first
thing gives us the stream.

66
00:04:46.572 --> 00:04:51.240
And then I want to sort that stream out,
right?

67
00:04:51.240 --> 00:04:53.382
That'll give us an intermediate.

68
00:04:53.382 --> 00:04:54.617
That's an intermediate operation.

69
00:04:54.617 --> 00:04:57.086
So that'll give us that resulting stream.

70
00:04:57.086 --> 00:05:00.967
Now I want to say alright, sorted and
then I want you to filter.

71
00:05:00.967 --> 00:05:02.762
I give it some predicate.

72
00:05:02.762 --> 00:05:06.164
Maybe I want to get all of
the ones that start with a c.

73
00:05:06.164 --> 00:05:15.567
So I can say v.startsWith c.

74
00:05:15.567 --> 00:05:21.565
This also intermediate, so it'll also
return a resulting stream back to me.

75
00:05:21.565 --> 00:05:24.843
From that, let's say I want to use map.

76
00:05:24.843 --> 00:05:28.134
And I wanna say go ahead and

77
00:05:28.134 --> 00:05:33.079
turn all of these things to uppercase.

78
00:05:33.079 --> 00:05:35.657
So we'll say String::upperCase
to uppercase, okay?

79
00:05:35.657 --> 00:05:37.846
Map is also intermediate.

80
00:05:37.846 --> 00:05:41.637
So I get another resulting stream back.

81
00:05:41.637 --> 00:05:43.771
I can say, you know what?

82
00:05:43.771 --> 00:05:46.211
Map it again.

83
00:05:46.211 --> 00:05:51.390
So I can use these multiple
times with different things.

84
00:05:51.390 --> 00:05:55.150
So I can do something like,

85
00:05:55.150 --> 00:06:01.372
I wanna add a word in front of each one,
okay?

86
00:06:01.372 --> 00:06:04.292
So this one will get a little fun.

87
00:06:04.292 --> 00:06:08.335
We can say, all right, take the v.

88
00:06:08.335 --> 00:06:13.790
And what I want you to
do is say v.transform.

89
00:06:13.790 --> 00:06:16.686
Ooh, I know, right?

90
00:06:16.686 --> 00:06:22.502
And then in transform,
this takes another functional interface.

91
00:06:22.502 --> 00:06:25.917
So now I'm doing like
a lambda inside of a lambda.

92
00:06:25.917 --> 00:06:27.163
Gasp, all right?

93
00:06:27.163 --> 00:06:31.304
So now I can say, alright, I called it v.

94
00:06:31.304 --> 00:06:33.341
Let me just say w, right?

95
00:06:33.341 --> 00:06:40.518
W, arrow, and
then I want to say put yummy in front.

96
00:06:40.518 --> 00:06:42.772
Yummy, yeah, with a space.

97
00:06:42.772 --> 00:06:49.233
And then add the w back, right?

98
00:06:49.233 --> 00:06:56.564
Now I have, still that was
intermediate as well, right?

99
00:06:56.564 --> 00:06:58.595
Now I'm gonna go ahead and print it.

100
00:06:58.595 --> 00:06:59.889
I'm getting a little silly now.

101
00:06:59.889 --> 00:07:07.722
So, alright, so
we'll say System.out::println.

102
00:07:07.722 --> 00:07:13.510
All right, so now you can see how,
you could chain these together to do

103
00:07:13.510 --> 00:07:18.731
a bunch of different processing
on an individual collection.

104
00:07:21.043 --> 00:07:24.819
&gt;&gt; Doing it this way almost reminds
me of like writing a SQL query.

105
00:07:24.819 --> 00:07:25.621
&gt;&gt; Does it?

106
00:07:25.621 --> 00:07:28.986
&gt;&gt; Well, a little bit just in terms of
going by table, by table, by table,

107
00:07:28.986 --> 00:07:30.217
joining stuff together.

108
00:07:30.217 --> 00:07:31.504
&gt;&gt; Then what do I do with that data?

109
00:07:31.504 --> 00:07:33.201
Then what do I do with that data?

110
00:07:33.201 --> 00:07:33.790
All right.

111
00:07:33.790 --> 00:07:39.978
So notice the output here is yummy CABBAGE
in caps, and then yummy CARROTS in caps.

112
00:07:46.097 --> 00:07:49.810
So streams are, I don't know,
they're super fun to work with for me.

113
00:07:51.730 --> 00:07:56.230
These are another form of like
functional programming within Java.

114
00:07:56.230 --> 00:08:00.178
So relatively new,
been around for a while, but

115
00:08:00.178 --> 00:08:04.914
still relatively new compared
to the age of the language.

