WEBVTT

1
00:00:00.000 --> 00:00:03.479
So in this section we'll
talk about interfaces.

2
00:00:03.479 --> 00:00:07.828
An interface is similar
to an abstract class,

3
00:00:07.828 --> 00:00:11.736
it's a template of an abstract concept.

4
00:00:11.736 --> 00:00:16.975
However, interfaces are meant
to be purely abstract,

5
00:00:16.975 --> 00:00:20.545
and therefore they do not have state.

6
00:00:20.545 --> 00:00:25.836
This means interfaces they
do not have constructors,

7
00:00:25.836 --> 00:00:30.321
the values of their
fields cannot be changed,

8
00:00:30.321 --> 00:00:37.119
in other classes implement interfaces
as opposed to extending them.

9
00:00:37.119 --> 00:00:41.370
So we're going to create
a product interface and

10
00:00:41.370 --> 00:00:48.331
then we're gonna create a book class
that will implement that product, okay?

11
00:00:48.331 --> 00:00:54.034
So we'll make a new package,

12
00:00:54.034 --> 00:01:01.343
we'll call our package interfaces.

13
00:01:06.028 --> 00:01:10.156
Inside of here,
we're gonna make a new Java class.

14
00:01:10.156 --> 00:01:15.052
Notice here, at the bottom, we seek class

15
00:01:15.052 --> 00:01:19.821
interface and then a few others, right?

16
00:01:19.821 --> 00:01:22.464
So interface is what we
wanna select this time.

17
00:01:22.464 --> 00:01:26.664
So you see that it is different
than just a normal class, and

18
00:01:26.664 --> 00:01:29.355
we'll call this interface product.

19
00:01:29.355 --> 00:01:34.455
Now, if you've ever created
an interface you forgot to do,

20
00:01:34.455 --> 00:01:38.555
change it from class to
interface that's okay,

21
00:01:38.555 --> 00:01:44.567
it's simply just this word so
you would just change that to interface.

22
00:01:46.076 --> 00:01:51.789
Now, we think about a product,
we could think of the fields.

23
00:01:51.789 --> 00:01:54.897
That's what we've been
doing in other classes,

24
00:01:54.897 --> 00:01:57.861
we think about what
attributes does that have?

25
00:01:57.861 --> 00:02:01.846
For example, maybe a product has a name.

26
00:02:05.087 --> 00:02:10.470
You don't want to even add
fields really in interfaces.

27
00:02:10.470 --> 00:02:15.765
Notice I'm already getting an error
here about it can't be private.

28
00:02:15.765 --> 00:02:20.634
I mean I could take that off, but
then I also get another error and

29
00:02:20.634 --> 00:02:24.965
basically it's saying this
hasn't been initialized,

30
00:02:24.965 --> 00:02:28.949
that's because they are final,
fields are final.

31
00:02:28.949 --> 00:02:35.292
So you would only add a field in an
interface if you already know the value of

32
00:02:35.292 --> 00:02:40.631
that field and it should not ever
be changed to anything else.

33
00:02:40.631 --> 00:02:48.173
So in most cases, you wouldn't even need
to have fields in an interface, all right?

34
00:02:48.173 --> 00:02:53.569
Let's go ahead and
make a couple of methods,

35
00:02:53.569 --> 00:02:59.391
we'll say string get name
after the parentheses

36
00:02:59.391 --> 00:03:05.645
close that with a semicolon and
then a void setName.

37
00:03:05.645 --> 00:03:09.026
So I don't have the field for name, but

38
00:03:09.026 --> 00:03:14.880
that's okay because I want name to
be modifiable by other classes.

39
00:03:14.880 --> 00:03:19.759
And if I would have defined it in this
interface I would have said the name of

40
00:03:19.759 --> 00:03:24.184
the product can only be this, and
that's not what I want, right?

41
00:03:24.184 --> 00:03:30.886
So I've added these two methods by
default, these two methods are abstract.

42
00:03:30.886 --> 00:03:34.552
I don't have to write the word
abstract because that's

43
00:03:34.552 --> 00:03:36.823
just what they are in interfaces.

44
00:03:36.823 --> 00:03:41.174
So you would be writing that in front
of every method basically, and so

45
00:03:41.174 --> 00:03:43.035
Java saves you that trouble.

46
00:03:46.641 --> 00:03:49.348
So this is our interface,
let's go ahead and

47
00:03:49.348 --> 00:03:53.280
make another regular class that
will implement this interface.

48
00:03:53.280 --> 00:03:59.542
So we'll call that one book Now,

49
00:03:59.542 --> 00:04:04.223
in order to make the relationship
between book and

50
00:04:04.223 --> 00:04:08.914
product, again,
you do not extend interfaces.

51
00:04:08.914 --> 00:04:11.416
You're not inheriting from it like that,

52
00:04:11.416 --> 00:04:14.133
we are doing this
implementing an interface.

53
00:04:14.133 --> 00:04:17.208
That interface only has abstract methods,

54
00:04:17.208 --> 00:04:20.542
my job is to implement
those abstract methods.

55
00:04:20.542 --> 00:04:25.663
So the keyword you use here is implements,
not extends.

56
00:04:25.663 --> 00:04:31.648
And then you specify the interface
that you want to implement.

57
00:04:31.648 --> 00:04:37.113
Notice here we get an error right away,
it's gonna tell us,

58
00:04:37.113 --> 00:04:41.410
hey, you got those abstract classes,
right?

59
00:04:41.410 --> 00:04:43.598
This is the same thing, so

60
00:04:43.598 --> 00:04:48.973
an interface is abstract by default
has abstract methods in it.

61
00:04:48.973 --> 00:04:52.928
So in whatever I need to do,
in this case, I have two options.

62
00:04:52.928 --> 00:04:55.125
What are they?

63
00:04:55.125 --> 00:04:58.188
&gt;&gt; Make it abstract or implement.

64
00:04:58.188 --> 00:05:03.160
&gt;&gt; Yes, so I can make the book
class abstracted itself, and

65
00:05:03.160 --> 00:05:10.112
then I wouldn't be on the hook, or I need
to implement those abstract methods.

66
00:05:10.112 --> 00:05:14.479
So we are going to actually
implement those abstract methods.

67
00:05:14.479 --> 00:05:19.436
And I'm gonna just click this
implement methods here and say, yep,

68
00:05:19.436 --> 00:05:20.983
I want both of those.

69
00:05:20.983 --> 00:05:27.640
Notice the implementation is not what we
want, but we'll address that in a moment.

70
00:05:27.640 --> 00:05:31.988
Let's go ahead and
make some fields for the book.

71
00:05:31.988 --> 00:05:38.999
So we want to make that name field
that is implied in the interface.

72
00:05:38.999 --> 00:05:46.056
We want things that
are specific to a book author,

73
00:05:46.056 --> 00:05:52.282
maybe the pages of the book and
then an ISBN.

74
00:05:55.247 --> 00:06:00.166
And we can make some getter and
setter methods for all of those.

75
00:06:10.503 --> 00:06:15.669
The get and set for the name,
notice it didn't create that,

76
00:06:15.669 --> 00:06:21.765
cuz that already exists, and
it basically existed in that interface.

77
00:06:21.765 --> 00:06:25.775
So we've overwritten that, so

78
00:06:25.775 --> 00:06:30.973
we can just change this implementation to

79
00:06:30.973 --> 00:06:36.182
return name and here we'll set the name.

80
00:06:40.162 --> 00:06:43.296
Okay, good?

81
00:06:43.296 --> 00:06:47.217
All right, let's make another class.

82
00:06:47.217 --> 00:06:53.451
And this is to test it out,
we'll call this one library.

83
00:06:54.989 --> 00:06:56.310
Make a main method.

84
00:07:01.867 --> 00:07:09.472
Now, just like abstract classes,
you can use the interface as a type.

85
00:07:09.472 --> 00:07:13.087
However, you cannot
instantiate interfaces.

86
00:07:13.087 --> 00:07:16.063
So I can say product book =,

87
00:07:16.063 --> 00:07:21.395
if I tried to say new product,
I would get an error,

88
00:07:21.395 --> 00:07:26.239
it's abstract, it cannot be instantiated.

89
00:07:26.239 --> 00:07:31.960
So I would need to use one
of the implementing classes.

90
00:07:33.645 --> 00:07:38.085
Okay, and then I can call that set name.

91
00:07:38.085 --> 00:07:42.640
So that was again,
the method that we inherited or

92
00:07:42.640 --> 00:07:46.984
essentially implemented
from the interface.

93
00:07:46.984 --> 00:07:50.149
So I now put your favorite book,

94
00:07:50.149 --> 00:07:55.432
this is not my favorite book,
but it's a common one.

95
00:07:57.563 --> 00:07:59.909
All right, okay.

