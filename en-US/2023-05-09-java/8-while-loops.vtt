WEBVTT

1
00:00:00.000 --> 00:00:03.487
So that is it for decision structures,

2
00:00:03.487 --> 00:00:07.721
the next section is on
repetition structures.

3
00:00:07.721 --> 00:00:11.054
These are also known as loops.

4
00:00:11.054 --> 00:00:17.130
They're a way to repeat a block of
code as many times as necessary.

5
00:00:17.130 --> 00:00:20.430
Okay, so
there's a few different types of loops and

6
00:00:20.430 --> 00:00:22.906
we'll discuss how to use each of them.

7
00:00:25.744 --> 00:00:32.355
So, the first program we'll write is input
validation, and we'll use a loop here.

8
00:00:32.355 --> 00:00:35.984
This goes back to your question
that you asked earlier,

9
00:00:35.984 --> 00:00:38.770
what if we wanted to
kinda keep doing that?

10
00:00:38.770 --> 00:00:41.271
So, in this program, it says each
store employee makes $15 an hour.

11
00:00:41.271 --> 00:00:46.789
Write a program that allows the employee
to enter the number of hours worked for

12
00:00:46.789 --> 00:00:47.550
the week.

13
00:00:47.550 --> 00:00:50.756
Do not allow overtime, okay?

14
00:00:50.756 --> 00:00:53.771
So let's go ahead back to our IDE.

15
00:00:53.771 --> 00:00:57.957
Since we're on a new chapter,

16
00:00:57.957 --> 00:01:02.630
we'll make a new package as well.

17
00:01:05.022 --> 00:01:06.685
So under project.

18
00:01:11.950 --> 00:01:16.863
Under Java, main Java,
I'll make a new package and

19
00:01:16.863 --> 00:01:23.239
I'll call this one loops and
inside of here we'll make a new class.

20
00:01:23.239 --> 00:01:28.101
We can call this one gross
pay input validation.

21
00:01:33.462 --> 00:01:39.116
All right, so I'll make my main method and
let's go ahead and

22
00:01:39.116 --> 00:01:44.881
initialize some variables so
we know that the rate is $15 and

23
00:01:44.881 --> 00:01:51.990
the max number of hours is 40 cuz we're
not allowing any overtime, right?

24
00:01:51.990 --> 00:01:56.934
And then we can ask them,

25
00:01:56.934 --> 00:02:04.002
how many hours did you work, okay?

26
00:02:04.002 --> 00:02:06.700
And we'll scan that result in.

27
00:02:15.671 --> 00:02:21.000
Import the scanner, and we'll set

28
00:02:21.000 --> 00:02:27.036
that to a double, if I do that as double,

29
00:02:27.036 --> 00:02:32.372
sorry I'll make these double too.

30
00:02:32.372 --> 00:02:35.775
Okay, double hours worked.

31
00:02:35.775 --> 00:02:40.076
Notice that CamelCase=

32
00:02:40.076 --> 00:02:45.610
scanner.nextDouble, okay.

33
00:02:45.610 --> 00:02:49.300
And now we want to validate this input.

34
00:02:49.300 --> 00:02:56.335
Now, if we think about this, let's say
that the person enters 45, that's invalid.

35
00:02:56.335 --> 00:02:59.477
We can say invalid in
the program can just end.

36
00:02:59.477 --> 00:03:03.744
They would have to start all the way
over from the top or we can say,

37
00:03:03.744 --> 00:03:07.405
okay, give me your input,
let me check if it's valid.

38
00:03:07.405 --> 00:03:11.256
If it's not valid,
I wanna prompt you again, right?

39
00:03:11.256 --> 00:03:14.808
And in order to prompt this
person multiple times,

40
00:03:14.808 --> 00:03:20.354
the best way to do that is using a loop
because a loop repeats statements, okay?

41
00:03:20.354 --> 00:03:24.881
So the loop we'll use for
this is called a while loop.

42
00:03:24.881 --> 00:03:27.261
And we started off with the word while.

43
00:03:27.261 --> 00:03:31.967
We have a set of parentheses and
inside of the parentheses

44
00:03:31.967 --> 00:03:36.482
we're going to add a condition for
running this loop.

45
00:03:36.482 --> 00:03:41.225
So whatever this condition is,
is saying, while this condition is true,

46
00:03:41.225 --> 00:03:45.310
keep executing the statements
that I'm adding inside of here.

47
00:03:45.310 --> 00:03:50.997
So in our case,
we wanna keep executing while the hours

48
00:03:50.997 --> 00:03:55.830
worked is greater than the max hours,
right?

49
00:03:55.830 --> 00:03:57.953
Cuz that's a faulty condition.

50
00:03:57.953 --> 00:04:03.277
So inside of here we'll print out and

51
00:04:03.277 --> 00:04:08.271
let them know invalid entry your.

52
00:04:09.804 --> 00:04:16.737
Hours must be between 1 and
40, for example.

53
00:04:16.737 --> 00:04:22.553
Okay, now that we've let them know that,

54
00:04:22.553 --> 00:04:29.351
we want them to be able to
input a new entry, okay?

55
00:04:29.351 --> 00:04:36.663
So you might wanna say try again or
something so that they know, try again.

56
00:04:36.663 --> 00:04:38.444
They know to enter something new.

57
00:04:38.444 --> 00:04:45.295
And we're going to store that in
this hours worked variable again.

58
00:04:45.295 --> 00:04:48.681
So we'll say scanner.nextDouble.

59
00:04:48.681 --> 00:04:55.180
Now this is really important, I want
you to look at this while statement.

60
00:04:55.180 --> 00:05:02.763
The condition for the while is based on
two variables, hoursWorked and maxHours.

61
00:05:02.763 --> 00:05:09.243
If we maybe made a new variable here,
let's say double newHours.

62
00:05:09.243 --> 00:05:12.814
Anyone can tell me what's wrong with this?

63
00:05:15.449 --> 00:05:16.490
Yeah.

64
00:05:16.490 --> 00:05:19.499
&gt;&gt; The conditional statement would
still be evaluating on hours worked so

65
00:05:19.499 --> 00:05:20.809
we wouldn't have changed it.

66
00:05:20.809 --> 00:05:25.264
&gt;&gt; Right, so we would not have
changed the two values that are being

67
00:05:25.264 --> 00:05:29.389
evaluated therefore,
if we ever got inside of this loop and

68
00:05:29.389 --> 00:05:34.199
these values never changed,
the condition is always gonna be true.

69
00:05:34.199 --> 00:05:39.003
You have an infinite loop, so
whatever condition you are checking for in

70
00:05:39.003 --> 00:05:44.515
the while, you have to do something inside
of this loop that affects that condition

71
00:05:44.515 --> 00:05:49.187
in some way or has the possibility
to affect the condition in some way.

72
00:05:49.187 --> 00:05:55.612
Now when I say hour's work, they could
very well into 50 again, that's okay.

73
00:05:55.612 --> 00:05:56.826
It still changed, right?

74
00:05:56.826 --> 00:06:01.872
There's a possibility that
they enter something valid.

75
00:06:01.872 --> 00:06:04.288
All right, okay so that's it for the loop.

76
00:06:04.288 --> 00:06:09.000
We just basically tell them in
valid however many times that

77
00:06:09.000 --> 00:06:11.741
they keep writing invalid input.

78
00:06:11.741 --> 00:06:15.999
And then once that is valid,
let's say, they say 40,

79
00:06:15.999 --> 00:06:20.969
is 40 greater than the max hours 40,
that will become false and

80
00:06:20.969 --> 00:06:24.546
we will finally get outside of the loop,
okay.

81
00:06:24.546 --> 00:06:29.091
You can add any other code you want here,
so

82
00:06:29.091 --> 00:06:33.257
I'll go ahead and close our scanner and

83
00:06:33.257 --> 00:06:38.955
then also calculate their salary and
print that out.

84
00:06:38.955 --> 00:06:44.983
So we'll say double grossPay
= hoursWorked times

85
00:06:44.983 --> 00:06:51.159
we had a rate rate yes and
then we'll print this out.

86
00:06:58.600 --> 00:07:01.472
Okay, should we run it?

87
00:07:05.550 --> 00:07:08.380
All right?

88
00:07:12.906 --> 00:07:14.353
So how many hours did I work?

89
00:07:14.353 --> 00:07:19.736
Let's say less than 40, so we'll say 38.

90
00:07:19.736 --> 00:07:21.854
Great, that worked just fine.

91
00:07:21.854 --> 00:07:25.652
Now, let's say 42.

92
00:07:25.652 --> 00:07:30.523
All right, now when we say
42 it'll say invalid entry.

93
00:07:30.523 --> 00:07:34.782
Now we're inside of this loop here.

94
00:07:34.782 --> 00:07:38.542
Try again, I'll say 45 this time, right?

95
00:07:38.542 --> 00:07:43.215
Hours work will become 45,
it's 45 greater than max hours, true.

96
00:07:43.215 --> 00:07:47.718
So they'll ask us again,
we're still inside of that loop, right?

97
00:07:47.718 --> 00:07:52.938
50, still inside of the loop,
if I then say 40, which is not over,

98
00:07:52.938 --> 00:07:57.296
I should get outside of the loop,
so it'll say it's 40.

99
00:07:57.296 --> 00:08:01.864
Greater than 40 that should be false and
now we're outside of the loop.

100
00:08:04.764 --> 00:08:06.785
Questions on while loops.

101
00:08:06.785 --> 00:08:11.891
&gt;&gt; Here's the question on while loop,
but on the scanner

102
00:08:11.891 --> 00:08:19.116
next don't worry if you don't enter in
a double or an int., what does it do?

103
00:08:19.116 --> 00:08:24.890
&gt;&gt; It'll crash, the program will crash
because it'll try to set some sort of data

104
00:08:24.890 --> 00:08:30.949
type into this variable that was declared
as a double and it'll all fall apart.

105
00:08:30.949 --> 00:08:33.054
&gt;&gt; Okay, so you'll just get a system.

106
00:08:33.054 --> 00:08:35.865
&gt;&gt; We'll show you.
I'd like you to see for yourself.

107
00:08:35.865 --> 00:08:40.686
Let's say, hello and
the program crashed, right?

108
00:08:40.686 --> 00:08:45.973
And it said, input mismatch exception.

109
00:08:45.973 --> 00:08:50.204
&gt;&gt; So we said anything that's 40 or
less is valid,

110
00:08:50.204 --> 00:08:54.246
so what happens if we give
it like a negative 5?

111
00:08:54.246 --> 00:08:57.718
&gt;&gt; All right, okay testing mindset,
this is what I love.

112
00:08:57.718 --> 00:09:00.008
All right, so I work- 5.

113
00:09:00.008 --> 00:09:07.013
You're right we said this in our text,
but we did not verify that.

114
00:09:07.013 --> 00:09:09.993
So I think they're gonna
say you owe me some money.

115
00:09:09.993 --> 00:09:11.021
Yeah, gross pay is- 75.

116
00:09:11.021 --> 00:09:14.922
So if we wanted to enhance this,

117
00:09:14.922 --> 00:09:19.689
what can we do based on what we learned in

118
00:09:19.689 --> 00:09:24.176
the last section about conditions?

119
00:09:24.176 --> 00:09:26.012
&gt;&gt; We could use a double ampersand.

120
00:09:26.012 --> 00:09:29.955
&gt;&gt; That's right,
we can use an and so if, so

121
00:09:29.955 --> 00:09:36.061
while the hours worked is greater
than maximum, I would say or.

122
00:09:36.061 --> 00:09:41.314
Or hoursWorked is less than 0,

123
00:09:41.314 --> 00:09:46.961
all right let's double check that

124
00:09:49.747 --> 00:09:54.800
So we say -5 boom and then I say 45

125
00:09:54.800 --> 00:09:59.185
boom and then let's say 34.

126
00:09:59.185 --> 00:10:01.145
Perfect, great catch.

127
00:10:01.145 --> 00:10:04.675
All right, any other questions?

128
00:10:04.675 --> 00:10:10.450
Awesome, all right, let's go back to.

129
00:10:10.450 --> 00:10:12.360
&gt;&gt; Someone said edge case with 0.

130
00:10:12.360 --> 00:10:16.860
&gt;&gt; Edge case 0,
you get 0 that's okay, right?

131
00:10:16.860 --> 00:10:18.723
&gt;&gt; You don't work, you don't get paid.

132
00:10:18.723 --> 00:10:23.392
&gt;&gt; You don't work,
you don't get paid, boom.

133
00:10:23.392 --> 00:10:28.500
So I guess we can change
our message though to say,

134
00:10:28.500 --> 00:10:32.892
0 and 40, that'd be fair, all right?

135
00:10:32.892 --> 00:10:33.979
All right, great.

136
00:10:33.979 --> 00:10:39.431
So the wild loops there
are controlled by a condition.

137
00:10:39.431 --> 00:10:46.046
So the while loop will continue running
as long as that condition is true and

138
00:10:46.046 --> 00:10:51.722
it also tests the condition before
it enters inside of the loop.

139
00:10:51.722 --> 00:10:58.544
So every time it runs again, it'll first
check if that condition remains true.

140
00:10:58.544 --> 00:11:03.252
You wanna use a while loop
when the code inside of it is

141
00:11:03.252 --> 00:11:08.079
conditional and it may or
may not need to run, right?

142
00:11:08.079 --> 00:11:10.292
Based on some condition.

