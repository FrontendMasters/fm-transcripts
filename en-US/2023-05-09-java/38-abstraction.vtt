WEBVTT

1
00:00:00.000 --> 00:00:05.371
So we talked about the core principles
of object oriented programming,

2
00:00:05.371 --> 00:00:10.491
we had encapsulation, we had inheritance,
we have polymorphism.

3
00:00:10.491 --> 00:00:11.627
The fourth and

4
00:00:11.627 --> 00:00:17.318
final core principle of object
oriented programming is abstraction.

5
00:00:17.318 --> 00:00:24.136
So abstraction is defined as
something that exists in theory,

6
00:00:24.136 --> 00:00:28.776
but it does not have a concrete existence.

7
00:00:28.776 --> 00:00:32.142
I see you all like, what?

8
00:00:32.142 --> 00:00:35.495
[LAUGH] Let me give you an example.

9
00:00:35.495 --> 00:00:42.263
So, shape is something that is abstract,
right?

10
00:00:42.263 --> 00:00:47.049
It exists in theory, but
it doesn't have a concrete.

11
00:00:47.049 --> 00:00:52.166
There's types of shapes and
those are concrete, but

12
00:00:52.166 --> 00:00:56.952
shape as a concept on its own is abstract,
right?

13
00:00:56.952 --> 00:01:02.397
And in order to declare
a class as abstract,

14
00:01:02.397 --> 00:01:09.473
we use the abstract keyword
right before the word class.

15
00:01:09.473 --> 00:01:15.646
This is a non-access modifier
that can be used on classes,

16
00:01:15.646 --> 00:01:20.097
or it could even be used on methods, okay?

17
00:01:20.097 --> 00:01:21.889
Why would you do something like this?

18
00:01:21.889 --> 00:01:26.727
It's when you wanted to find
a template of a class or

19
00:01:26.727 --> 00:01:33.138
a template of a method, but
you don't intend for it to be used as is,

20
00:01:33.138 --> 00:01:37.885
you want someone else to implement that,
right?

21
00:01:37.885 --> 00:01:43.507
If we were to think about,
any abstract thing like shape,

22
00:01:43.507 --> 00:01:48.806
or whatever,
it's not designed to be instantiated.

23
00:01:48.806 --> 00:01:53.650
I don't want you to create
a new shape instance, right?

24
00:01:53.650 --> 00:01:58.098
It might be a type, but
not an instance because what

25
00:01:58.098 --> 00:02:03.072
behaviors can it really have,
l how can you define that?

26
00:02:03.072 --> 00:02:06.912
You only could define it once you know
the type of shape you're actually

27
00:02:06.912 --> 00:02:07.752
working with.

28
00:02:07.752 --> 00:02:14.176
So abstract classes,
they're designed to be extended and you're

29
00:02:14.176 --> 00:02:20.843
pushing the burden of implementation
onto the child, the subclass.

30
00:02:23.411 --> 00:02:27.243
So again, shape is an abstract concept.

31
00:02:27.243 --> 00:02:33.085
It can perhaps specify some general
behaviors that a shape would have.

32
00:02:33.085 --> 00:02:37.495
But it's too abstract of
a concept to actually define what

33
00:02:37.495 --> 00:02:39.297
the behavior would be.

34
00:02:39.297 --> 00:02:43.672
For example, if I had this shape class,

35
00:02:43.672 --> 00:02:47.284
then it can't be instantiated.

36
00:02:47.284 --> 00:02:52.365
Its purpose is to serve
as a superclass that

37
00:02:52.365 --> 00:02:57.597
more specific subclasses can extend from.

38
00:02:57.597 --> 00:03:04.695
Now an abstract method is
a method that has no body.

39
00:03:04.695 --> 00:03:10.921
And we will put that non excess
modifier in front of the return type.

40
00:03:13.556 --> 00:03:19.114
For an abstract method, only
the signature of the method is defined.

41
00:03:19.114 --> 00:03:23.965
Again, it's not defined to be run as is,

42
00:03:23.965 --> 00:03:29.246
is designed to be
overwritten by a subclass.

43
00:03:29.246 --> 00:03:35.207
This is a great example because I have
the shape class and I have calculate area.

44
00:03:35.207 --> 00:03:40.058
I cannot think of an implementation
to put inside of this method.

45
00:03:40.058 --> 00:03:43.339
In shape,
how do you calculate the area of a shape?

46
00:03:43.339 --> 00:03:45.428
Well, it depends on the shape, right?

47
00:03:45.428 --> 00:03:47.888
That's exactly what you would say.

48
00:03:47.888 --> 00:03:52.314
So that's what we mean, you can say,
look, if you have a shape,

49
00:03:52.314 --> 00:03:55.792
you should provide a method
to calculate the area.

50
00:03:55.792 --> 00:04:02.462
I don't know what that
implementation is going to be,

51
00:04:02.462 --> 00:04:06.380
but you need to have one, okay?

52
00:04:08.323 --> 00:04:14.906
So, we are going to create
an abstract shape class and

53
00:04:14.906 --> 00:04:20.917
then, I'm gonna create
a new rectangle class.

54
00:04:20.917 --> 00:04:23.816
I don't wanna do too much with
that other rectangle we have.

55
00:04:23.816 --> 00:04:29.875
So we'll create a new rectangle
class that will inherit from shape.

56
00:04:29.875 --> 00:04:35.307
So back to our IDE, we want to make

57
00:04:35.307 --> 00:04:41.141
a new package called abstraction.

58
00:04:51.674 --> 00:04:55.128
In abstraction,
we'll create a new class called shape.

59
00:05:00.378 --> 00:05:04.086
And to make this class abstract,
what do we do?

60
00:05:08.736 --> 00:05:11.099
&gt;&gt; Abstract after public.

61
00:05:11.099 --> 00:05:15.953
&gt;&gt; Yes,
after public we would write abstract.

62
00:05:15.953 --> 00:05:17.656
So that's what we do.

63
00:05:17.656 --> 00:05:19.624
This class is now abstract.

64
00:05:19.624 --> 00:05:25.053
Let's create the abstract method.

65
00:05:25.053 --> 00:05:28.691
So we say abstract,

66
00:05:28.691 --> 00:05:33.188
double calculate area.

67
00:05:35.869 --> 00:05:41.767
Now you don't have to only have
abstract methods in an abstract class,

68
00:05:41.767 --> 00:05:45.320
you can have some methods
that have a body.

69
00:05:45.320 --> 00:05:51.904
So let's just add one of those for
fun, we'll say public void print.

70
00:05:51.904 --> 00:05:57.250
And we'll print out that I am a shape.

71
00:06:14.224 --> 00:06:19.635
All right, let's make the rectangle class.

72
00:06:23.156 --> 00:06:27.431
Now, this is a great example that
I haven't explicitly called out,

73
00:06:27.431 --> 00:06:30.023
but we're making a new rectangle class.

74
00:06:30.023 --> 00:06:33.517
We had another rectangle
class that was in objects.

75
00:06:33.517 --> 00:06:37.937
It's okay to have classes with the same
name as long as they're not in the same

76
00:06:37.937 --> 00:06:38.552
package.

77
00:06:42.677 --> 00:06:46.171
And of course there's no
relation between them.

78
00:06:46.171 --> 00:06:53.829
All right, so in the rectangle class
we're going to extend from shape.

79
00:06:53.829 --> 00:07:00.348
Write our weight, as soon as we do
this inheritance, we get an error.

80
00:07:00.348 --> 00:07:05.913
Because if you're going to
inherit from an abstract class,

81
00:07:05.913 --> 00:07:12.021
you must implement the abstract
methods that you have inherited,

82
00:07:12.021 --> 00:07:17.165
or you can define yourself as
an abstract class as well.

83
00:07:17.165 --> 00:07:19.387
So you have two options.

84
00:07:19.387 --> 00:07:24.562
Implement the stuff that
needs to be implemented or

85
00:07:24.562 --> 00:07:28.182
pass the buck yet again to your kid.

86
00:07:30.805 --> 00:07:36.917
All right, so inside of the rectangle
class, let's go ahead and

87
00:07:36.917 --> 00:07:41.707
implement the abstract
method that we inherited.

88
00:07:41.707 --> 00:07:44.801
You could type this out manually,
but of course,

89
00:07:44.801 --> 00:07:47.905
IntelliJ offers us some
nice ways to handle this.

90
00:07:47.905 --> 00:07:52.294
So, if I hover over the error,
they give me some options.

91
00:07:52.294 --> 00:07:55.849
I can just click this Implement methods.

92
00:07:55.849 --> 00:08:02.398
It shows me which methods are abstract and
it added it there.

93
00:08:02.398 --> 00:08:06.643
I do need to change the body here though.

94
00:08:08.686 --> 00:08:14.012
All right, so
we'll change our calculate area

95
00:08:14.012 --> 00:08:19.871
to length Ã— width which we
haven't defined just yet

96
00:08:19.871 --> 00:08:24.011
and rectangle, but we will, okay?

97
00:08:24.011 --> 00:08:29.115
So in our rectangle class,
let's go ahead, we handled the part

98
00:08:29.115 --> 00:08:34.229
about over overriding the abstract
methods that we inherited.

99
00:08:34.229 --> 00:08:38.000
Now we can take care of our
own business and rectangles.

100
00:08:38.000 --> 00:08:44.609
So let's make a couple of fields for
length and for width.

101
00:08:49.153 --> 00:08:54.438
Let's just leave that for now,

102
00:08:54.438 --> 00:08:59.342
we'll add more if we need to.

103
00:09:06.205 --> 00:09:10.972
I guess we need to add a constructor
to set this stuff up though, right?

104
00:09:10.972 --> 00:09:16.588
Otherwise we can't set the fields so
let's just do that much.

105
00:09:16.588 --> 00:09:19.824
What's this type of constructor call?

106
00:09:19.824 --> 00:09:20.506
&gt;&gt; All arcs?

107
00:09:20.506 --> 00:09:22.529
&gt;&gt; Yes, all arcs.

108
00:09:24.687 --> 00:09:28.827
I'm putting all of the fields
in the parameter list so

109
00:09:28.827 --> 00:09:32.050
we can say, we don't have a setter?

110
00:09:32.050 --> 00:09:37.108
[LAUGH], I might as well go ahead and
generate my getters and setters.

111
00:09:37.108 --> 00:09:40.721
I was trying to be lazy, but.

112
00:09:40.721 --> 00:09:46.245
Generate, getter and
setters for both, yes.

113
00:09:46.245 --> 00:09:49.923
All right, and let's set the length.

114
00:09:53.141 --> 00:09:55.152
And set the width.

115
00:09:59.331 --> 00:09:59.979
Okay.

116
00:10:02.133 --> 00:10:10.397
All right, now let's make a test class
that'll test the abstract stuff.

117
00:10:10.397 --> 00:10:17.247
So in abstraction, we'll make
a class that we'll call ShapeTester.

118
00:10:20.242 --> 00:10:21.281
Make your main method.

119
00:10:27.784 --> 00:10:32.448
Okay, we're going to define this as shape,

120
00:10:32.448 --> 00:10:38.103
which is the superclass,
which is abstract, right?

121
00:10:38.103 --> 00:10:44.795
Shape, rectangle,
we cannot say new shape, why not?

122
00:10:44.795 --> 00:10:45.694
&gt;&gt; Abstract.

123
00:10:45.694 --> 00:10:53.638
&gt;&gt; Is abstract so you cannot instantiate
an abstract class, not possible.

124
00:10:53.638 --> 00:10:58.489
So we would have to use
one of its subclasses.

125
00:10:58.489 --> 00:11:00.241
When you say new rectangle,

126
00:11:00.241 --> 00:11:05.065
make sure you're using the one that's
in this package and not the object one.

127
00:11:07.375 --> 00:11:12.475
And let's just give it
a couple of numbers.

128
00:11:13.759 --> 00:11:18.556
Okay, and I can say rectangle.print,

129
00:11:18.556 --> 00:11:22.655
which comes from the shape class.

130
00:11:22.655 --> 00:11:25.109
So that's normal inheritance, right?

131
00:11:27.662 --> 00:11:30.335
By do that,
let's just test what that does.

132
00:11:32.768 --> 00:11:38.638
It says I am a shape perfect that's
what we got from the shape class here.

133
00:11:38.638 --> 00:11:43.588
And then let's test out the area, right?

134
00:11:43.588 --> 00:11:52.738
So let's say rectangle.calculatearea.

135
00:11:52.738 --> 00:11:57.989
And of course, it's going to
run the one from the rectangle

136
00:11:57.989 --> 00:12:01.992
class that we have some
implementation for.

137
00:12:01.992 --> 00:12:05.388
So that should be 35, yep.

138
00:12:05.388 --> 00:12:06.677
Yes.

139
00:12:06.677 --> 00:12:11.201
&gt;&gt; So an abstract class
probably can't be final then?

140
00:12:11.201 --> 00:12:12.878
&gt;&gt; Can't be final?

141
00:12:12.878 --> 00:12:15.096
Okay, that's a great question, right?

142
00:12:15.096 --> 00:12:22.062
So, abstract, final,
that doesn't make sense, right?

143
00:12:22.062 --> 00:12:26.090
Because that's exactly what it says,
a legal combination.

144
00:12:26.090 --> 00:12:30.555
I love that question,
I love the way that they're thinking.

145
00:12:30.555 --> 00:12:35.015
The purpose of the abstract class is to
be a template that will be implemented by

146
00:12:35.015 --> 00:12:35.835
subclasses.

147
00:12:35.835 --> 00:12:40.031
So to make yourself final means
no one can be a subclass,

148
00:12:40.031 --> 00:12:44.509
no one can inherit from you,
and that doesn't make sense.

149
00:12:44.509 --> 00:12:46.300
Good question.
&gt;&gt; You back to the shape duster?

150
00:12:46.300 --> 00:12:47.341
&gt;&gt; Yeah.

151
00:12:47.341 --> 00:12:50.433
&gt;&gt; That's an interesting question though.

152
00:12:50.433 --> 00:12:56.464
So you can't extend an interface?

153
00:12:56.464 --> 00:12:57.492
&gt;&gt; A final class?

154
00:12:57.492 --> 00:13:00.680
&gt;&gt; No, an abstract class?

155
00:13:00.680 --> 00:13:02.560
&gt;&gt; Yeah, you can, we did here.

156
00:13:02.560 --> 00:13:04.880
&gt;&gt; Yeah.
&gt;&gt; So rectangle, extended shape.

157
00:13:04.880 --> 00:13:07.441
&gt;&gt; Not extend or extend, right?

158
00:13:07.441 --> 00:13:11.073
&gt;&gt; So a final class can't be extended.

159
00:13:11.073 --> 00:13:13.863
An abstract class is meant to be extended.

160
00:13:13.863 --> 00:13:17.231
So an abstract class can't be final.

161
00:13:17.231 --> 00:13:20.625
&gt;&gt; Probably sealed as well, right?

162
00:13:20.625 --> 00:13:22.284
&gt;&gt; What can't be?

163
00:13:22.284 --> 00:13:23.932
&gt;&gt; Couldn't be sealed.

164
00:13:23.932 --> 00:13:24.595
&gt;&gt; What?

165
00:13:24.595 --> 00:13:26.070
&gt;&gt; Abstract class.

166
00:13:26.070 --> 00:13:28.651
&gt;&gt; Can an abstract class be sealed?

167
00:13:28.651 --> 00:13:34.351
Interesting, so there might be,

168
00:13:34.351 --> 00:13:41.627
that might be possible
I don't see why not.

169
00:13:41.627 --> 00:13:46.828
All sealed class, and
then we have to say wait what?

170
00:13:46.828 --> 00:13:52.901
&gt;&gt; [CROSSTALK]
&gt;&gt; Must be final seal, yeah.

171
00:13:52.901 --> 00:13:57.058
So then this would have to,
let's just say non-sealed here, yeah.

172
00:13:57.058 --> 00:14:05.227
So that's fine,
you can have an abstract sealed class.

173
00:14:05.227 --> 00:14:07.203
That was fun.

174
00:14:07.203 --> 00:14:08.585
I've not done that before.

175
00:14:12.446 --> 00:14:15.772
&gt;&gt; Wouldn't that be kind of unhelpful
because you're essentially creating

176
00:14:15.772 --> 00:14:17.934
a class where you can't
do anything with it, but

177
00:14:17.934 --> 00:14:20.379
you can't implement it either
because of the sealed.

178
00:14:20.379 --> 00:14:22.399
&gt;&gt; You can do stuff with it, right?

179
00:14:22.399 --> 00:14:27.270
You can do whatever you want
as long as you're on the list.

180
00:14:27.270 --> 00:14:28.385
&gt;&gt; I see what you're saying, yeah.

181
00:14:28.385 --> 00:14:28.889
&gt;&gt; Yeah.

182
00:14:28.889 --> 00:14:29.458
&gt;&gt; Okay.

183
00:14:29.458 --> 00:14:35.323
&gt;&gt; Yeah, so, having a sealed
abstract class just limits who is

184
00:14:35.323 --> 00:14:40.127
able to implement, those abstract methods,
&gt;&gt; Like

185
00:14:40.127 --> 00:14:42.801
the bouncers letting you into the club.

186
00:14:42.801 --> 00:14:47.874
&gt;&gt; Yes, that's right,
we're on the list [LAUGH].

187
00:14:47.874 --> 00:14:52.879
All right, so key points to
remember about abstraction or

188
00:14:52.879 --> 00:14:56.863
abstract classes and
methods are templates,

189
00:14:56.863 --> 00:15:01.678
they're meant to be implemented
by their subclasses.

190
00:15:01.678 --> 00:15:06.829
The classes in the methods
are declared abstract,

191
00:15:06.829 --> 00:15:10.797
by using the abstract reserved words.

192
00:15:10.797 --> 00:15:16.733
If a subclass inherits from
an abstract class, it must,

193
00:15:16.733 --> 00:15:23.545
it's required to implement
the abstract methods of that class.

194
00:15:23.545 --> 00:15:26.908
Or it has to declare itself as abstract.

195
00:15:26.908 --> 00:15:28.420
I didn't show you that.

196
00:15:28.420 --> 00:15:29.521
Let me show you that.

197
00:15:29.521 --> 00:15:32.598
I told you that, but
I didn't show you that.

198
00:15:32.598 --> 00:15:36.151
So, in rectangle, so
okay, shape is abstract.

199
00:15:36.151 --> 00:15:38.362
Rectangle inherits from shape.

200
00:15:38.362 --> 00:15:41.891
Let's say that they're, look,

201
00:15:41.891 --> 00:15:47.498
I don't want to implement
the calculate area method.

202
00:15:47.498 --> 00:15:50.129
Of course, this gives you an error.

203
00:15:50.129 --> 00:15:53.551
So rectangle could say,
look, I'm abstract too.

204
00:15:53.551 --> 00:15:56.241
And then they're off the hook.

205
00:15:56.241 --> 00:16:01.721
And the reason why you might wanna
do this, so we just had one abstract

206
00:16:01.721 --> 00:16:07.126
method and shape, there could be
20 abstract methods and shape.

207
00:16:07.126 --> 00:16:11.702
And rectangle can say I only
need to implement five of

208
00:16:11.702 --> 00:16:16.491
those the rest of them are not
really applicable to me.

209
00:16:16.491 --> 00:16:18.894
So then rectangle would have to.

210
00:16:18.894 --> 00:16:23.406
They could go ahead and
override those five abstract but

211
00:16:23.406 --> 00:16:28.302
they would have to declare
themselves as abstract as well cuz

212
00:16:28.302 --> 00:16:33.115
they have 15 abstract methods
that they have inherited.

213
00:16:33.115 --> 00:16:36.788
Again, abstract classes
cannot be instantiated.

214
00:16:36.788 --> 00:16:42.811
They are only to be used as a superclass.

215
00:16:42.811 --> 00:16:47.863
&gt;&gt; Once in your example,
make the rectangle class abstract,

216
00:16:47.863 --> 00:16:53.016
that child would have to implement
not only the five abstract

217
00:16:53.016 --> 00:16:58.789
methods from rectangle, but
also the 15 that rectangle did not.

218
00:16:58.789 --> 00:17:00.951
&gt;&gt; Yes.

219
00:17:00.951 --> 00:17:05.870
&gt;&gt; Is that, maybe, why you make a default
method, if you change the parent,

220
00:17:05.870 --> 00:17:09.949
you wouldn't have to require
all the children to implement.

221
00:17:11.595 --> 00:17:15.533
&gt;&gt; Yes, but it's not an abstraction,

222
00:17:15.533 --> 00:17:22.784
it'll be in the next topic we talk
about but yes that's the reason.

