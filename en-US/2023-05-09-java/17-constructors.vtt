WEBVTT

1
00:00:00.000 --> 00:00:06.400
So constructors are also
a part of classes.

2
00:00:06.400 --> 00:00:10.528
And what they do,
they're a special kind of

3
00:00:10.528 --> 00:00:15.552
structure that's used to
initialize the object, so

4
00:00:15.552 --> 00:00:21.037
set its initial state before
you start using that object.

5
00:00:21.037 --> 00:00:23.468
And there's different
types of constructors.

6
00:00:23.468 --> 00:00:27.454
So let's go ahead and
talk about a few of them.

7
00:00:27.454 --> 00:00:30.795
We're gonna add a default constructor and

8
00:00:30.795 --> 00:00:35.915
what's called an all-arg
constructor to the Rectangle class.

9
00:00:35.915 --> 00:00:39.490
So in our ID,
I'm gonna go back to the constructor.

10
00:00:39.490 --> 00:00:42.269
Now, this is also a convention.

11
00:00:42.269 --> 00:00:48.172
The constructors typically appear right
after the fields and before the methods.

12
00:00:48.172 --> 00:00:53.415
Now, within a class, it doesn't really
matter where anything is defined.

13
00:00:53.415 --> 00:00:57.253
I could define my fields.

14
00:00:57.253 --> 00:00:59.487
I could switch the order of these methods.

15
00:00:59.487 --> 00:01:02.009
I could put constructors
at the bottom of the class.

16
00:01:02.009 --> 00:01:03.357
It doesn't really matter.

17
00:01:03.357 --> 00:01:08.317
But convention sake, just so things
are tidy, if you were to go into someone

18
00:01:08.317 --> 00:01:12.207
else's Java code,
you wanna know where to look for stuff.

19
00:01:12.207 --> 00:01:16.481
Usually have your global fields,
your constructors, and then your methods,

20
00:01:16.481 --> 00:01:17.133
all right?

21
00:01:17.133 --> 00:01:24.221
So the constructor has the exact
same name as the class.

22
00:01:24.221 --> 00:01:30.093
So you write an access modifier,
typically public.

23
00:01:30.093 --> 00:01:33.908
No return type or anything,
it's not a method.

24
00:01:33.908 --> 00:01:39.936
And then literally the exact same
name as the class, so Rectangle.

25
00:01:39.936 --> 00:01:42.806
&gt;&gt; Is this the same as overloading
a method like you were doing earlier?

26
00:01:42.806 --> 00:01:45.242
&gt;&gt; No, not quite.

27
00:01:45.242 --> 00:01:50.672
So the constructors, they look like
a method, but they're not really a method.

28
00:01:50.672 --> 00:01:55.564
So their purpose is explicitly
to set up the initial

29
00:01:55.564 --> 00:02:00.126
state of this object
before you start using it.

30
00:02:00.126 --> 00:02:04.227
So what you're gonna do
inside of a constructor

31
00:02:04.227 --> 00:02:07.720
is set values to some of your variables.

32
00:02:07.720 --> 00:02:12.028
Or if you needed to, I don't know,
open connections to something.

33
00:02:12.028 --> 00:02:15.082
It's basically a setup type of thing,
right?

34
00:02:15.082 --> 00:02:18.829
So this one is called
a default constructor

35
00:02:18.829 --> 00:02:22.374
because it does not take any arguments.

36
00:02:22.374 --> 00:02:27.619
Notice there's nothing in
the parameter list there, right?

37
00:02:27.619 --> 00:02:31.910
So what you're gonna do is say,
okay, by default,

38
00:02:31.910 --> 00:02:34.845
what do I want my field values to be?

39
00:02:34.845 --> 00:02:43.410
So maybe you'll do something like set
the length to 0, set the width to 0.

40
00:02:43.410 --> 00:02:45.968
The sides are already set to 4.

41
00:02:45.968 --> 00:02:47.494
I'm good with that.

42
00:02:47.494 --> 00:02:52.513
So that would be an example
of a default constructor,

43
00:02:52.513 --> 00:02:58.210
even if you do not explicitly
define a default constructor.

44
00:02:58.210 --> 00:03:05.778
If I took this out, this class will
already have a default constructor.

45
00:03:05.778 --> 00:03:07.270
You just can't see it.

46
00:03:07.270 --> 00:03:11.889
But by default in Java,
the default constructor is already there.

47
00:03:11.889 --> 00:03:14.950
It has no body,
it doesn't really do anything.

48
00:03:14.950 --> 00:03:20.332
But all classes have a default
constructor by default.

49
00:03:20.332 --> 00:03:24.438
[LAUGH] But
if you wanted to actually do something,

50
00:03:24.438 --> 00:03:29.143
you would then go ahead and
write an explicit one, okay?

51
00:03:29.143 --> 00:03:31.843
&gt;&gt; So you're really just exposing
something that exists under the hood to

52
00:03:31.843 --> 00:03:32.476
manipulate it.

53
00:03:32.476 --> 00:03:35.761
&gt;&gt; And put in a body there, yes.

54
00:03:35.761 --> 00:03:40.602
&gt;&gt; Would you usually call the setters or
would you use

55
00:03:40.602 --> 00:03:45.736
this access from-
&gt;&gt; Yeah, so either way, it's totally fine.

56
00:03:45.736 --> 00:03:50.782
In fact, I'll do both just so
you can see that they're both fine.

57
00:03:50.782 --> 00:03:56.176
So I'll set the length that way,
and I'll set the width this way.

58
00:03:56.176 --> 00:03:59.294
&gt;&gt; Is it more convention or
is one way, I mean, there-

59
00:03:59.294 --> 00:04:01.766
&gt;&gt; So if you have the setter methods,

60
00:04:01.766 --> 00:04:03.905
then it's best to use those.

61
00:04:03.905 --> 00:04:06.094
You kinda don't wanna be in the habit.

62
00:04:06.094 --> 00:04:10.550
Okay, so line 11 is exactly what I
wouldn't wanna another class to do.

63
00:04:10.550 --> 00:04:15.603
I don't want them to set my variables just
like this, call my methods and set it

64
00:04:15.603 --> 00:04:20.903
that way, cuz that's the proper protocol
for how to deal with my fields, right?

65
00:04:20.903 --> 00:04:25.060
So Rectangle is a constructor,
it's in this class.

66
00:04:25.060 --> 00:04:26.940
Technically, it's okay.

67
00:04:26.940 --> 00:04:29.330
I can set the fields
directly if I want to.

68
00:04:29.330 --> 00:04:32.829
But if you have those methods,
it's best to just use those.

69
00:04:32.829 --> 00:04:38.075
Cuz I never know in the set method,
maybe I might not just set this value,

70
00:04:38.075 --> 00:04:41.185
but maybe I need to update something else.

71
00:04:41.185 --> 00:04:45.911
If this was a bigger project, setting
something, maybe I set it in the program,

72
00:04:45.911 --> 00:04:49.475
but I also set some flag in a database or
something like that.

73
00:04:49.475 --> 00:04:52.186
So there's multiple things going on, and

74
00:04:52.186 --> 00:04:55.357
it's best to put them all
within a single method.

75
00:04:55.357 --> 00:04:59.717
So in the constructor,
I would kinda miss all of that

76
00:04:59.717 --> 00:05:04.287
other stuff that was going on
if I set it this way, yes.

77
00:05:04.287 --> 00:05:08.050
&gt;&gt; Do static classes have
a default constructor as well?

78
00:05:08.050 --> 00:05:13.021
&gt;&gt; No, so
[LAUGH] folks will not get off static.

79
00:05:13.021 --> 00:05:16.937
We'll talk about static, and
we're getting into objects, so

80
00:05:16.937 --> 00:05:20.429
we're getting really close
to get into the static part.

81
00:05:20.429 --> 00:05:25.981
But when we talk about objects and
explicitly constructors,

82
00:05:25.981 --> 00:05:33.469
in order to create a new object, I have to
call one of its constructors, all right?

83
00:05:33.469 --> 00:05:36.503
With a static class,
you're basically saying, and remember,

84
00:05:36.503 --> 00:05:38.222
what did I say the constructor does?

85
00:05:38.222 --> 00:05:42.940
It sets up state for
that object, the initial values.

86
00:05:42.940 --> 00:05:44.452
With a static class,

87
00:05:44.452 --> 00:05:49.667
you wanna be able to access any of
these methods without setting up state.

88
00:05:49.667 --> 00:05:51.194
I don't care about state.

89
00:05:51.194 --> 00:05:52.434
I don't need state.

90
00:05:52.434 --> 00:05:56.482
I just need some statements executed.

91
00:05:56.482 --> 00:06:01.541
So in that case,
you would not need to call a constructor,

92
00:06:01.541 --> 00:06:05.789
cuz you don't need any state set up,
all right?

93
00:06:05.789 --> 00:06:07.741
&gt;&gt; This might be skipping
ahead a little bit, but

94
00:06:07.741 --> 00:06:11.059
I have a question about the constructors
and kind of what you're doing there.

95
00:06:11.059 --> 00:06:14.160
By setting it to zero,
does that mean it's not, for example,

96
00:06:14.160 --> 00:06:16.979
starting with a null value
like it would have otherwise?

97
00:06:16.979 --> 00:06:22.484
&gt;&gt; Right, it would've been not defined,
nothing there, right?

98
00:06:22.484 --> 00:06:26.404
All right, okay, so
that's the default constructor.

99
00:06:26.404 --> 00:06:29.501
Let's also write the all-args constructor.

100
00:06:29.501 --> 00:06:33.974
The all-args constructor
will take values for

101
00:06:33.974 --> 00:06:37.773
all of the fields that it has available,

102
00:06:37.773 --> 00:06:42.880
all of its, Those global fields.

103
00:06:42.880 --> 00:06:46.307
So the name would still be the same,
Rectangle.

104
00:06:46.307 --> 00:06:48.821
Again, remember when we
talked about signatures.

105
00:06:48.821 --> 00:06:52.371
Names can be the same, so
that's similar to overload, but

106
00:06:52.371 --> 00:06:55.078
then the parameter list
has to be different.

107
00:06:55.078 --> 00:06:59.942
So we can say, okay, for
this one, people can create

108
00:06:59.942 --> 00:07:04.610
a new object and they can pass in,
what did we have?

109
00:07:04.610 --> 00:07:09.704
The length, they can pass in the width.

110
00:07:09.704 --> 00:07:14.028
And then they can also, maybe you
say they pass in the sides, right?

111
00:07:14.028 --> 00:07:18.145
Since it's a rectangle,
we know that it has to be four sides, so

112
00:07:18.145 --> 00:07:21.288
that would be kinda sloppy
to even allow them to.

113
00:07:21.288 --> 00:07:25.115
But since we're talking about all-args,
that's what it usually means,

114
00:07:25.115 --> 00:07:26.680
all of the arguments, right?

115
00:07:26.680 --> 00:07:30.221
Letting them pass all of the arguments in,
but we're not gonna do that.

116
00:07:30.221 --> 00:07:33.362
[LAUGH] All right, so
in this case, same thing.

117
00:07:33.362 --> 00:07:36.683
You're gonna set the length,
but this time,

118
00:07:36.683 --> 00:07:40.273
you're gonna do it with
whatever they passed in.

119
00:07:40.273 --> 00:07:47.790
And then you're gonna set the width,
To the width that they passed in, okay?

120
00:07:47.790 --> 00:07:49.712
So you're not making up a value this time.

121
00:07:49.712 --> 00:07:52.686
They actually gave you some values to use.

122
00:07:55.595 --> 00:08:00.374
Now, notice here, besides the sides,
I don't really have values for

123
00:08:00.374 --> 00:08:01.808
any of this data, but

124
00:08:01.808 --> 00:08:06.926
I have a perfectly functioning class
that I could calculate the perimeter.

125
00:08:06.926 --> 00:08:08.970
I could calculate the area, and

126
00:08:08.970 --> 00:08:13.221
I don't need to know what the values
are until people wanna use it.

127
00:08:13.221 --> 00:08:17.218
So once they start using it, they can put
in any values that they want and then

128
00:08:17.218 --> 00:08:21.355
they have all of the behaviors here that
they need to do whatever they wanna do.

