WEBVTT

1
00:00:00.000 --> 00:00:05.007
So we're good to go,
we have our project set up and

2
00:00:05.007 --> 00:00:10.386
we can go ahead and
jump right into the basics of Java.

3
00:00:10.386 --> 00:00:14.229
So we're gonna start by
writing our first program,

4
00:00:14.229 --> 00:00:17.121
this is gonna be a very hands on course.

5
00:00:17.121 --> 00:00:20.060
We're gonna write code and
talk about it as we write it so

6
00:00:20.060 --> 00:00:22.382
that we can learn what we're doing, okay?

7
00:00:22.382 --> 00:00:27.208
So the first program that we're gonna
write is a gross pay calculator.

8
00:00:27.208 --> 00:00:31.859
So it says, write a program that
calculates an employee's gross pay.

9
00:00:31.859 --> 00:00:35.157
All right, so back to our IDE.

10
00:00:40.516 --> 00:00:44.524
Now, if you look in the left
panel under Project,

11
00:00:44.524 --> 00:00:50.070
this is where all of our files
are going to live that we create, okay?

12
00:00:50.070 --> 00:00:54.997
So you should have a little thing under
here that says source, a little folder.

13
00:00:54.997 --> 00:00:58.075
Under Source there's a main and a test.

14
00:00:58.075 --> 00:01:02.133
So we're gonna write all
of our code in the main.

15
00:01:02.133 --> 00:01:06.682
And then there's a folder under
main that says Java, all right?

16
00:01:06.682 --> 00:01:13.917
So, the very first thing we
wanna do is to create a package.

17
00:01:13.917 --> 00:01:21.444
So a package in Java is simply a folder
that contains a bunch of Java files.

18
00:01:21.444 --> 00:01:24.368
It doesn't have to be a bunch,
it could be one, zero, whatever.

19
00:01:24.368 --> 00:01:30.104
But it contains Java files, and
it's some sort of logical containment.

20
00:01:30.104 --> 00:01:35.628
So for example, this program that we're
gonna write is a basic Java program,

21
00:01:35.628 --> 00:01:39.911
so we're gonna create a package that's for
basics, okay?

22
00:01:39.911 --> 00:01:46.340
So, under Java, you're gonna right click
and you're going to hover over new.

23
00:01:46.340 --> 00:01:50.467
And then you want to say package,
new package.

24
00:01:50.467 --> 00:01:54.493
Now, the convention, we're gonna talk
about conventions all throughout.

25
00:01:54.493 --> 00:01:59.736
The convention, what it means,
convention means this is what's

26
00:01:59.736 --> 00:02:05.645
widely accepted by Java developers all
over the world as this is what we do.

27
00:02:05.645 --> 00:02:06.826
It's not a rule.

28
00:02:06.826 --> 00:02:11.823
Nothing will break if you don't do this,
but people will look at you funny,

29
00:02:11.823 --> 00:02:12.615
all right?

30
00:02:12.615 --> 00:02:18.592
So your package, the name of that
starts with a lowercase letter,

31
00:02:18.592 --> 00:02:23.395
if it needs to contain multiple
words in it people will

32
00:02:23.395 --> 00:02:27.791
typically do underline or
something like that.

33
00:02:27.791 --> 00:02:31.621
So for ours, we're gonna call it basics,
all lowercase.

34
00:02:35.521 --> 00:02:40.926
All right, so there's our package,
our folder, inside of the package

35
00:02:40.926 --> 00:02:46.253
is where we'll create a new class,
so a class is basically a Java file.

36
00:02:46.253 --> 00:02:48.797
This is what you write your Java code in.

37
00:02:48.797 --> 00:02:53.445
So on basic we're gonna do new and
then Java class.

38
00:02:53.445 --> 00:02:55.805
And then we need to give it a name.

39
00:02:55.805 --> 00:03:02.571
Convention says that your class name
should begin with a capital letter, okay?

40
00:03:02.571 --> 00:03:06.521
So we're gonna call ours
GrossPayCalculator, and

41
00:03:06.521 --> 00:03:09.572
notice this is kind of like three words,

42
00:03:09.572 --> 00:03:15.045
you cannot have spaces in your class
names so they all need to be one word,

43
00:03:15.045 --> 00:03:19.828
but we use camel case to distinguish
between the words, okay?

44
00:03:19.828 --> 00:03:21.972
So notice pay has a capital P.

45
00:03:21.972 --> 00:03:24.739
Calculator has a capital C.

46
00:03:24.739 --> 00:03:27.851
Press Enter.

47
00:03:27.851 --> 00:03:29.394
Okay.

48
00:03:31.286 --> 00:03:35.711
And now we have our new class.

49
00:03:35.711 --> 00:03:39.997
Okay, so
notice here we have our package defined on

50
00:03:39.997 --> 00:03:42.798
the first line that is required.

51
00:03:42.798 --> 00:03:46.477
And then we have the class declaration.

52
00:03:46.477 --> 00:03:51.284
So it starts with public, class,
and then the name of the class.

53
00:03:51.284 --> 00:03:57.809
The name of the class has to be
the same name as the file, okay?

54
00:03:57.809 --> 00:04:00.209
And Java is case sensitive.

55
00:04:00.209 --> 00:04:07.256
So if you happen to have named this with
a lowercase g, I would get an error.

56
00:04:07.256 --> 00:04:09.610
I don't know what you're talking about,
right?

57
00:04:09.610 --> 00:04:14.272
So it has to match this exactly,
and it's case sensitive.

58
00:04:14.272 --> 00:04:17.767
All right, so
the class after the class name,

59
00:04:17.767 --> 00:04:22.263
we have a set of curly braces,
this encompasses the class.

60
00:04:22.263 --> 00:04:27.828
So anything written between these curly
braces belongs to this class, all right?

61
00:04:27.828 --> 00:04:31.392
So our assignment was
to write a program that

62
00:04:31.392 --> 00:04:35.254
calculates an employee's gross pay, right?

63
00:04:35.254 --> 00:04:43.079
So we want to one, get some input from
whoever is going to use this program,

64
00:04:43.079 --> 00:04:48.173
asking them about their
number of hours worked,

65
00:04:48.173 --> 00:04:50.923
as well as their pay rate.

66
00:04:50.923 --> 00:04:54.702
So within the class you need methods.

67
00:04:54.702 --> 00:04:57.212
And then you can write
code within the methods.

68
00:04:57.212 --> 00:04:59.946
And we'll have a whole section on methods.

69
00:04:59.946 --> 00:05:04.202
But for now, trust me,
we're gonna write a main method.

70
00:05:04.202 --> 00:05:08.329
And the main method is where all
Java applications start from.

71
00:05:08.329 --> 00:05:11.919
So it's gonna look for
a main method when the program runs, and

72
00:05:11.919 --> 00:05:13.970
it's gonna start executing that.

73
00:05:13.970 --> 00:05:18.835
So to write the main method,
it has to be exactly

74
00:05:18.835 --> 00:05:23.095
like this public_static void main, and

75
00:05:23.095 --> 00:05:28.691
inside of parentheses,
you're gonna write String,

76
00:05:28.691 --> 00:05:32.967
a set of square brackets, and then args.

77
00:05:35.792 --> 00:05:38.254
Then within the main method,
we can write our code.

78
00:05:38.254 --> 00:05:42.269
So, again, we're gonna do output,

79
00:05:42.269 --> 00:05:46.788
we're gonna say System.out.println.

80
00:05:46.788 --> 00:05:50.986
And then we're going to
print a string text.

81
00:05:50.986 --> 00:05:53.522
This is within quotation marks, okay?

82
00:05:53.522 --> 00:05:59.751
So we can ask them,
how many hours did you work?

83
00:06:03.827 --> 00:06:06.533
And then we're gonna want
to read this back in.

84
00:06:06.533 --> 00:06:09.917
So we can use what's called a scanner.

85
00:06:09.917 --> 00:06:11.974
So it's a class in Java.

86
00:06:11.974 --> 00:06:14.645
Java provides it automatically.

87
00:06:14.645 --> 00:06:20.060
So when we write Scanner,
notice there's an error right here,

88
00:06:20.060 --> 00:06:22.880
and there's also a suggestion.

89
00:06:22.880 --> 00:06:26.804
So I can click on this.

90
00:06:26.804 --> 00:06:32.122
And I basically did the shortcut that
IntelliJ told me which was option and

91
00:06:32.122 --> 00:06:35.402
return, and
it imported the scanner for me.

92
00:06:35.402 --> 00:06:39.695
So if you wanna use a class that
is outside of this one, you wanna

93
00:06:39.695 --> 00:06:44.648
use any of its methods or anything like,
that you need to import that in.

94
00:06:44.648 --> 00:06:51.316
So we'll say scanner,
we'll call it scanner = new Scanner.

95
00:06:51.316 --> 00:06:55.454
And we wanna read from
the input the console.

96
00:06:55.454 --> 00:07:00.692
So we'll say System.in.

97
00:07:00.692 --> 00:07:01.684
All right?

98
00:07:01.684 --> 00:07:05.901
Now with this scanner object,
we can now use the dot operator

99
00:07:05.901 --> 00:07:10.375
to show us a bunch of methods that
are available from this class.

100
00:07:10.375 --> 00:07:16.276
So what we want is to read from the input.

101
00:07:16.276 --> 00:07:19.451
And so, we can do what's called next.

102
00:07:19.451 --> 00:07:25.771
And next will read whatever was the last
thing that was on the console, okay?

103
00:07:25.771 --> 00:07:27.600
So, this will read this in.

104
00:07:27.600 --> 00:07:33.150
Now, notice here, we're asking for hours.

105
00:07:33.150 --> 00:07:37.844
So, this might be a whole number,
an integer.

106
00:07:37.844 --> 00:07:42.085
So we want to read specifically,
there's a bunch of methods here.

107
00:07:42.085 --> 00:07:47.134
Next it's gonna read a string and
we can read nextInt to say,

108
00:07:47.134 --> 00:07:51.893
I'm expecting an integer to
come back here, all right?

109
00:07:51.893 --> 00:07:53.110
Question.

110
00:07:53.110 --> 00:07:57.760
&gt;&gt; So the scanner is to
read from the command line?

111
00:07:57.760 --> 00:08:00.457
&gt;&gt; Yes.

112
00:08:00.457 --> 00:08:06.034
All right, now,
we're reading this from the command line,

113
00:08:06.034 --> 00:08:13.021
however, we need to store it in a variable
if we want to use it later on, okay?

114
00:08:13.021 --> 00:08:18.147
So a variable is essentially a memory
location that can hold data.

115
00:08:18.147 --> 00:08:24.525
Java is a statically typed language
different than JavaScript.

116
00:08:24.525 --> 00:08:29.377
Meaning that the compiler
needs to know what the data

117
00:08:29.377 --> 00:08:34.129
type is before you can
execute the program, okay?

118
00:08:34.129 --> 00:08:40.159
So when we declare our variables,
we have to preface it with the data type.

119
00:08:40.159 --> 00:08:44.783
So we want to say int,
which is the data type for an integer,

120
00:08:44.783 --> 00:08:49.594
we're gonna give the variable a name,
we'll call it hours,

121
00:08:49.594 --> 00:08:52.853
and then we'll put an equal sign, okay?

122
00:08:52.853 --> 00:08:57.245
So, on the left side of this equal sign,
is the declaration of the variable,

123
00:08:57.245 --> 00:09:00.772
on the right is the value that'll
be stored in that variable.

124
00:09:00.772 --> 00:09:02.838
Good?

125
00:09:02.838 --> 00:09:04.466
All right.

126
00:09:04.466 --> 00:09:06.928
So, we have, how many hours they work.

127
00:09:06.928 --> 00:09:08.675
We also need their pay rate.

128
00:09:08.675 --> 00:09:11.489
So, let's ask them another question.

129
00:09:11.489 --> 00:09:15.077
To do so,
we're gonna do another System.out.println.

130
00:09:15.077 --> 00:09:18.586
Now, if you're using IntelliJ,
there's a lot of nice shortcuts.

131
00:09:18.586 --> 00:09:23.640
Java is a very verbose language,
meaning you have to type a lot, right?

132
00:09:23.640 --> 00:09:27.842
In IntelliJ, you'll see me do this.

133
00:09:27.842 --> 00:09:32.909
I'll just say the whole thing, but
I'm gonna do sout, which is a shortcut.

134
00:09:32.909 --> 00:09:36.505
If I press Tab, it'll go ahead and
auto-complete that for me.

135
00:09:36.505 --> 00:09:40.452
So you'll see me do that a lot, but
I won't say it anymore, all right?

136
00:09:40.452 --> 00:09:42.196
So how many hours did you work?

137
00:09:42.196 --> 00:09:49.138
And now we need to know what
is your hourly pay rate?

138
00:09:52.367 --> 00:09:55.078
Okay, we wanna read this Int again, right?

139
00:09:55.078 --> 00:09:59.231
So we've already declared
scanner on line 10.

140
00:09:59.231 --> 00:10:03.335
We don't have to do that again,
we can just use it again.

141
00:10:03.335 --> 00:10:07.867
And this time we're asking for
a pay rate, it could be a decimal number.

142
00:10:07.867 --> 00:10:12.803
So instead of int,
we're gonna use double as the type, and

143
00:10:12.803 --> 00:10:17.559
then we want to name this variable,
we'll name it rate.

144
00:10:17.559 --> 00:10:22.910
Variables, convention,
start with a lowercase letter.

145
00:10:22.910 --> 00:10:29.477
And then we'll say scanner.nextDouble,
right?

146
00:10:29.477 --> 00:10:32.507
We're reading a double.

147
00:10:32.507 --> 00:10:37.504
Now that we're done with the input we
can go ahead and close that scanner, so

148
00:10:37.504 --> 00:10:39.781
we'll just say scanner.close.

149
00:10:39.781 --> 00:10:45.117
Notice, every statement in
Java ends with a semicolon.

150
00:10:45.117 --> 00:10:48.563
This is not optional,
must end with a semicolon.

151
00:10:48.563 --> 00:10:51.838
So now that we have our input,
we can do our calculation.

152
00:10:51.838 --> 00:10:57.257
So in order to determine the close pay,

153
00:10:57.257 --> 00:11:01.205
we can say hours times rate.

154
00:11:01.205 --> 00:11:04.018
What will be the data type for that?

155
00:11:04.018 --> 00:11:09.092
You're multiplying
an integer times a double.

156
00:11:09.092 --> 00:11:09.681
&gt;&gt; Double.

157
00:11:09.681 --> 00:11:11.114
&gt;&gt; Double, good.

158
00:11:11.114 --> 00:11:14.725
So we're gonna say double,
let's call this payRate.

159
00:11:14.725 --> 00:11:16.345
Notice, two words.

160
00:11:16.345 --> 00:11:19.206
Again, variables cannot have space either.

161
00:11:19.206 --> 00:11:24.257
If you're doing a multi where you use
the cam case, start it with lower case.

162
00:11:24.257 --> 00:11:29.409
Double payRate = hours * rate, great,

163
00:11:29.409 --> 00:11:34.425
and now we can print this out to the user.

164
00:11:34.425 --> 00:11:43.062
So we'll say Gross Pay I'm
gonna put a little space there.

165
00:11:43.062 --> 00:11:48.293
Now I want to append the value
from the variable to this stream.

166
00:11:48.293 --> 00:11:51.473
I can do that with a plus sign, okay?

167
00:11:51.473 --> 00:11:55.159
I just write the pay rate right here,
okay?

168
00:11:55.159 --> 00:11:56.627
Good to go.

169
00:11:56.627 --> 00:11:59.673
Should we run it?

170
00:11:59.673 --> 00:12:02.063
All right, let's go ahead and run this

171
00:12:06.795 --> 00:12:11.571
Lovely, so, we see on the console is
asking how many hours did you work?

172
00:12:11.571 --> 00:12:14.150
I'm gonna say 40 hours.

173
00:12:14.150 --> 00:12:18.875
And pay rate, let's say

174
00:12:18.875 --> 00:12:24.056
maybe 15, 50, okay?

175
00:12:24.056 --> 00:12:27.443
So the gross pay would then be 620.

176
00:12:27.443 --> 00:12:31.637
Lovely, all right, so
that was our first program.

177
00:12:31.637 --> 00:12:37.329
We learned a lot of the very
basics of Java, such as packages,

178
00:12:37.329 --> 00:12:41.387
classes, main method, input and output.

179
00:12:41.387 --> 00:12:42.736
Any questions?

180
00:12:46.705 --> 00:12:47.411
Yeah.

181
00:12:47.411 --> 00:12:49.384
&gt;&gt; What happens if you
don't close the scanner?

182
00:12:49.384 --> 00:12:50.203
&gt;&gt; Great question.

183
00:12:50.203 --> 00:12:53.247
Okay, what happens if you
don't close the scanner?

184
00:12:53.247 --> 00:13:00.417
So this is a good question, I'm gonna use
this opportunity to teach two things.

185
00:13:00.417 --> 00:13:01.984
So, I'm gonna comment this out.

186
00:13:01.984 --> 00:13:06.497
A comment is essentially,
you can put two slashes and

187
00:13:06.497 --> 00:13:13.127
it's telling the computer don't listen
to this, ignore that line, right?

188
00:13:13.127 --> 00:13:15.275
Don't try to execute that.

189
00:13:15.275 --> 00:13:20.392
All right, so if you don't close
the scanner, essentially that

190
00:13:20.392 --> 00:13:25.417
resource is left open once
the program like eventually closes,

191
00:13:25.417 --> 00:13:29.418
and ends, and
terminates it may release that, but

192
00:13:29.418 --> 00:13:33.813
if not it'll just kind of be
running in the background.

193
00:13:33.813 --> 00:13:38.274
If this was a really lengthy program,
you had a lot of other resources going on,

194
00:13:38.274 --> 00:13:41.683
you could see how that might
start interfering with things.

195
00:13:41.683 --> 00:13:46.358
So it's not the end of the world
if you forget to close it.

196
00:13:46.358 --> 00:13:51.050
Unless you're on some big, huge
enterprise application you got a bunch of

197
00:13:51.050 --> 00:13:55.233
these things going, and
it could cause some performance issues.

