WEBVTT

1
00:00:00.000 --> 00:00:02.523
Objects can be passed into methods.

2
00:00:02.523 --> 00:00:04.286
They can be returned from methods.

3
00:00:04.286 --> 00:00:09.234
They can be basically used as we've done
with all of our primitive data types

4
00:00:09.234 --> 00:00:09.943
already.

5
00:00:09.943 --> 00:00:11.604
They're just a little bit more powerful.

6
00:00:11.604 --> 00:00:14.943
They have more information inside of them,
okay?

7
00:00:14.943 --> 00:00:19.460
So, we're gonna update
the area of the rooms.

8
00:00:19.460 --> 00:00:26.675
We're gonna include a calculateArea()
method that accepts two rectangles.

9
00:00:26.675 --> 00:00:32.275
And we're gonna also include a getRoom()
method that returns a rectangle object.

10
00:00:32.275 --> 00:00:36.327
So you'll see how to pass objects,
how to return objects, okay?

11
00:00:36.327 --> 00:00:41.414
I'm gonna make another class just so
that you have this basic example.

12
00:00:41.414 --> 00:00:45.278
And then so inside of here,

13
00:00:45.278 --> 00:00:49.313
let's just clone this one.

14
00:00:51.406 --> 00:00:55.734
And we'll call this our redo,

15
00:00:55.734 --> 00:01:01.405
HomeAreaCalculatorRedo, all right?

16
00:01:02.618 --> 00:01:07.681
So, ooh, okay, good.

17
00:01:07.681 --> 00:01:12.607
This one gets into static, so
everybody pay attention, okay?

18
00:01:12.607 --> 00:01:19.954
All right, so let's go ahead and
make those two methods to start off with.

19
00:01:19.954 --> 00:01:27.449
So we're gonna say public,
Rectangle is my return type.

20
00:01:27.449 --> 00:01:32.780
And the name of the method is getRoom(),
takes no arguments, all right?

21
00:01:32.780 --> 00:01:37.290
So in this I can go ahead and ask for

22
00:01:37.290 --> 00:01:40.844
the length and the width.

23
00:01:40.844 --> 00:01:46.302
So instead of me hard coding those values,

24
00:01:46.302 --> 00:01:52.214
I can say,
"Enter the length of the room" and

25
00:01:52.214 --> 00:01:55.563
then I wanna scan that in.

26
00:01:55.563 --> 00:02:00.738
So remember when we talked about
with scanner or any object for

27
00:02:00.738 --> 00:02:05.017
that matter if I wanna use
this in multiple places,

28
00:02:05.017 --> 00:02:08.117
there needs to be a global variable.

29
00:02:08.117 --> 00:02:13.691
So let's go ahead and define scanner here.

30
00:02:13.691 --> 00:02:17.128
And this time I'm not
gonna make scanner static.

31
00:02:17.128 --> 00:02:19.770
I'm gonna show you what that means,
all right?

32
00:02:19.770 --> 00:02:23.455
So we'll make this private.

33
00:02:23.455 --> 00:02:31.318
And I'm even gonna initialize it here,
Okay?

34
00:02:31.318 --> 00:02:32.615
I need to import it, right?

35
00:02:32.615 --> 00:02:34.849
Because it's from another package.

36
00:02:34.849 --> 00:02:40.168
All right, so here into the length,

37
00:02:40.168 --> 00:02:45.487
I'm gonna read it in, double length

38
00:02:45.487 --> 00:02:50.128
= scanner.nextDouble().

39
00:02:50.128 --> 00:02:53.374
Nope, nextDouble(), okay?

40
00:02:53.374 --> 00:02:58.582
And then same thing for the width.

41
00:03:09.350 --> 00:03:11.438
All right?

42
00:03:11.438 --> 00:03:12.801
So, I read them both in.

43
00:03:12.801 --> 00:03:15.165
Now, I wanna return a new object.

44
00:03:15.165 --> 00:03:21.090
So, I can just say return new Rectangle().

45
00:03:21.090 --> 00:03:25.578
I have the length and the width, I might
as well set them in the constructors.

46
00:03:25.578 --> 00:03:28.079
What was the order again?

47
00:03:28.079 --> 00:03:30.946
Hold on, Rectangle().

48
00:03:30.946 --> 00:03:34.591
So notice that it shows me double
length and then double width.

49
00:03:34.591 --> 00:03:40.371
So length and then width, okay?

50
00:03:40.371 --> 00:03:43.642
So, that's a method that's
actually returning an object back.

51
00:03:43.642 --> 00:03:49.640
And then we wanna create a calculate area.

52
00:03:49.640 --> 00:03:53.735
So, let's say public,

53
00:03:53.735 --> 00:04:00.954
I guess double calculateAreaOfRoom().

54
00:04:00.954 --> 00:04:03.545
And this one will take two rooms,
two rectangles.

55
00:04:03.545 --> 00:04:08.870
So Rectangle room1,

56
00:04:08.870 --> 00:04:15.600
Rectangle room2, right?

57
00:04:20.366 --> 00:04:25.421
So here, I can just do a return

58
00:04:25.421 --> 00:04:31.290
room1.calculateArea() +,

59
00:04:31.290 --> 00:04:35.133
I might not need this,

60
00:04:35.133 --> 00:04:40.611
room2.calculateArea().

61
00:04:40.611 --> 00:04:41.656
Yeah.

62
00:04:45.889 --> 00:04:46.575
All right?

63
00:04:46.575 --> 00:04:49.550
And then we need to call
it from the main method.

64
00:04:49.550 --> 00:04:57.210
So I'm gonna erase everything
except that last print line.

65
00:05:01.420 --> 00:05:03.122
In this, all right.

66
00:05:03.122 --> 00:05:08.525
So we say Rectangle room1 is
going to be getRoom(), right?

67
00:05:08.525 --> 00:05:10.121
We're gonna call it getRoom() method.

68
00:05:10.121 --> 00:05:12.206
So notice, I'm trying to call getRoom().

69
00:05:12.206 --> 00:05:13.684
I have an error that says,

70
00:05:13.684 --> 00:05:18.132
Non-static method getRoom() cannot
be referenced from a static content.

71
00:05:18.132 --> 00:05:20.889
So we talked about static a little bit,
right?

72
00:05:20.889 --> 00:05:25.103
So when something is static,
this main method is static,

73
00:05:25.103 --> 00:05:28.285
it means everything
that we've used here or

74
00:05:28.285 --> 00:05:33.015
before here we've made static
because we haven't set up state,

75
00:05:33.015 --> 00:05:37.846
we haven't called it into a constructor,
or anything like that.

76
00:05:37.846 --> 00:05:41.534
Now, I'm in this class, I'm in the main
method, which has to be static.

77
00:05:41.534 --> 00:05:43.474
I have no choice about that.

78
00:05:43.474 --> 00:05:47.445
But I wanna call into
a method that's not static.

79
00:05:47.445 --> 00:05:51.318
Well, in order to do that,
I have to create state,

80
00:05:51.318 --> 00:05:56.737
I have to create an instance of
the class that this method lives within.

81
00:05:56.737 --> 00:06:00.080
It just so happens this method
lives within the same class.

82
00:06:00.080 --> 00:06:05.442
It does not matter, I still have to
instantiate this class in order to do it.

83
00:06:05.442 --> 00:06:12.469
So to do so, I would have to say
HomeAreaCalculatorRedo, right?

84
00:06:12.469 --> 00:06:16.826
And we can just call this calculator = and

85
00:06:16.826 --> 00:06:20.322
I'm instantiating this class.

86
00:06:20.322 --> 00:06:24.928
Notice I do not have a constructor
defined in this class but

87
00:06:24.928 --> 00:06:30.102
one is I called into one just fine
because it's there by default.

88
00:06:30.102 --> 00:06:34.839
So after I have this calculator
now I can use that object to

89
00:06:34.839 --> 00:06:37.217
call non-static methods.

90
00:06:44.670 --> 00:06:47.004
All right?

91
00:06:47.004 --> 00:06:53.527
And this really does depend on things
that have to do with the class, right?

92
00:06:53.527 --> 00:06:56.960
I'm using this scanner object,
which is a global variable.

93
00:06:56.960 --> 00:07:00.620
I needed to have a presence of this room,

94
00:07:00.620 --> 00:07:04.718
to have some sort of state set up,
all right?

95
00:07:04.718 --> 00:07:05.876
So we have the first room.

96
00:07:05.876 --> 00:07:11.495
We can say room2 =
calculator.getRoom() again.

97
00:07:11.495 --> 00:07:15.448
So it'll be same method but
different values, right?

98
00:07:15.448 --> 00:07:17.320
It'll prompt them again.

99
00:07:22.635 --> 00:07:23.373
Okay?

100
00:07:23.373 --> 00:07:28.378
And then I want to call that other method,

101
00:07:28.378 --> 00:07:34.100
calculateAreaOfRoom(), so I can say double

102
00:07:34.100 --> 00:07:39.507
totalArea = calculateAreaOfRoom().

103
00:07:39.507 --> 00:07:46.567
Yeah, I use my object for
this class, calculateAreaOfRoom().

104
00:07:46.567 --> 00:07:52.488
I have to give it two rectangles, so
I give it room1 and I give it room2.

105
00:07:52.488 --> 00:07:55.827
And now I can get that value back.

106
00:07:55.827 --> 00:07:57.288
Okay, let's run it.

107
00:08:02.926 --> 00:08:04.923
So this is the first room, right?

108
00:08:04.923 --> 00:08:08.360
Length, just say anything, okay?

109
00:08:08.360 --> 00:08:16.021
And then the second room, And
then we got area of both rooms.

110
00:08:16.021 --> 00:08:23.077
So, we did it the same thing
except we did it by using methods,

111
00:08:23.077 --> 00:08:27.708
passing and returning objects, okay?

112
00:08:27.708 --> 00:08:30.071
Is the static stuff clear?

113
00:08:30.071 --> 00:08:31.357
Not really?

114
00:08:31.357 --> 00:08:35.670
&gt;&gt; I'm still a little foggy on the why
we wouldn't make the getRoom() and

115
00:08:35.670 --> 00:08:40.420
calculateAreaOfRoom() static and
then not have to instantiate a new class.

116
00:08:40.420 --> 00:08:41.583
&gt;&gt; Which one?

117
00:08:41.583 --> 00:08:42.409
What line number?

118
00:08:42.409 --> 00:08:45.425
&gt;&gt; So if we commented out 10.

119
00:08:45.425 --> 00:08:48.162
&gt;&gt; All right.

120
00:08:48.162 --> 00:08:54.000
&gt;&gt; And then removed our references to
calculator and just called getRoom().

121
00:08:54.000 --> 00:08:56.283
&gt;&gt; Yeah.

122
00:08:56.283 --> 00:08:59.769
&gt;&gt; And then made those two methods static.

123
00:08:59.769 --> 00:09:00.766
What's the difference there?

124
00:09:00.766 --> 00:09:01.556
&gt;&gt; Yeah, yeah, yeah.

125
00:09:01.556 --> 00:09:06.984
Okay, so
say I made this one static, right?

126
00:09:06.984 --> 00:09:08.740
That would be fine.

127
00:09:08.740 --> 00:09:11.075
The problem is with this being static,

128
00:09:11.075 --> 00:09:14.842
now I don't have access to
the global variables in this class.

129
00:09:14.842 --> 00:09:19.482
Because if we think about the class, how
we set it up, the data, the methods, all

130
00:09:19.482 --> 00:09:23.809
of this, the object being all-encompassing
of everything that it needs.

131
00:09:23.809 --> 00:09:27.605
Without an object,
I don't have an all-encompassing.

132
00:09:27.605 --> 00:09:30.035
So the static is like, look,

133
00:09:30.035 --> 00:09:35.194
I make something static if it
doesn't require using fields and

134
00:09:35.194 --> 00:09:40.371
methods that are all connected
within this one objects class.

135
00:09:40.371 --> 00:09:45.629
I can use a static method to
say something like, say for

136
00:09:45.629 --> 00:09:50.772
example, I wanna know is this
a perfect square root or

137
00:09:50.772 --> 00:09:53.763
something like that, right?

138
00:09:53.763 --> 00:09:56.964
I don't really need access to anything
else other than those numbers.

139
00:09:56.964 --> 00:10:01.712
So with static methods, you'll typically
see where they'll wanna receive some

140
00:10:01.712 --> 00:10:05.237
data versus using data that
would be within a class, right?

141
00:10:05.237 --> 00:10:07.520
So I could make a calculate area for

142
00:10:07.520 --> 00:10:11.551
rectangle that allow people to
pass in the length and width.

143
00:10:11.551 --> 00:10:16.393
I could make that static, and that way you
don't have to bother with instantiating

144
00:10:16.393 --> 00:10:18.273
this class, having an object.

145
00:10:18.273 --> 00:10:21.427
You could just say rectangle
dot calculate whatever, right?

146
00:10:21.427 --> 00:10:23.174
Give it the information.

147
00:10:23.174 --> 00:10:27.710
But in object-oriented programming,
the whole goal is to have the data,

148
00:10:27.710 --> 00:10:32.030
have the methods all within this object
itself so you don't have to keep

149
00:10:32.030 --> 00:10:36.355
referencing this data every time you
wanna use something in the class.

150
00:10:36.355 --> 00:10:41.137
You set it up one time, and you can call
the behaviors as you wish without keep on

151
00:10:41.137 --> 00:10:43.036
giving the data over and over.

152
00:10:43.036 --> 00:10:47.583
So that's the benefit of not
having something static.

153
00:10:47.583 --> 00:10:51.961
So you would use static when you don't
really care about having state and

154
00:10:51.961 --> 00:10:54.422
everything associated with an object.

155
00:10:54.422 --> 00:11:01.949
You could just say the class name dot the
method name and do whatever you wanna do.

156
00:11:01.949 --> 00:11:05.534
&gt;&gt; And is this more because this
is an example that is called

157
00:11:05.534 --> 00:11:07.378
HomeAreaCalculatorRedo?

158
00:11:07.378 --> 00:11:12.849
Is it common that you'd be instantiating
the class inside of its own main function?

159
00:11:12.849 --> 00:11:15.769
Or is that more because it's an example?

160
00:11:15.769 --> 00:11:18.215
&gt;&gt; It's because it's an example, really.

161
00:11:18.215 --> 00:11:24.446
Yeah, usually you wouldn't,

162
00:11:24.446 --> 00:11:27.454
necessarily.

163
00:11:27.454 --> 00:11:30.757
Well, it's because it's an example
with the main method and

164
00:11:30.757 --> 00:11:35.157
that main method has to be static because
this is the first method that's called.

165
00:11:35.157 --> 00:11:36.618
&gt;&gt; Yeah.
&gt;&gt; So there's no object set up or

166
00:11:36.618 --> 00:11:37.195
anything.

167
00:11:37.195 --> 00:11:41.567
Java just needs to be able to call
this method without state, right?

168
00:11:41.567 --> 00:11:43.452
So that's why this method is static.

169
00:11:43.452 --> 00:11:47.862
And so if you're gonna do something
inside of your main method, then yes,

170
00:11:47.862 --> 00:11:51.222
you would have to instantiate
the class that you're in,

171
00:11:51.222 --> 00:11:55.289
in order to be able to access these
things or make them static as well.

172
00:11:55.289 --> 00:12:00.110
So that's why before we made everything
static, because we hadn't gotten

173
00:12:00.110 --> 00:12:04.422
the objects yet, and instantiation,
and state, and all of that.

174
00:12:07.147 --> 00:12:11.841
But yeah, in the real world, you're
not really doing things in the main.

175
00:12:11.841 --> 00:12:16.240
There will be one class with the main that
kind of kicks that whole application off.

176
00:12:16.240 --> 00:12:19.620
And then everything else, you're just
dealing with your own classes and

177
00:12:19.620 --> 00:12:22.683
methods and you don't have to bother
with this sort of thing much.

178
00:12:22.683 --> 00:12:24.608
&gt;&gt; Cool, that's more clear.

179
00:12:24.608 --> 00:12:27.129
Thank you.
&gt;&gt; We should have used our bar here.

180
00:12:27.129 --> 00:12:28.219
I'm gonna show you.

181
00:12:28.219 --> 00:12:29.816
Remember we talked about bar?

182
00:12:29.816 --> 00:12:33.348
I'm gonna leave it there since
that was our first time but

183
00:12:33.348 --> 00:12:35.491
next time I'm gonna whip out bar.

184
00:12:35.491 --> 00:12:38.057
All right, are we good?

185
00:12:38.057 --> 00:12:41.676
So we understand passing and

186
00:12:41.676 --> 00:12:46.357
returning objects within methods.

187
00:12:46.357 --> 00:12:47.060
Yes.

