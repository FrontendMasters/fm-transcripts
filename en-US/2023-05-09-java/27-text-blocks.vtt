WEBVTT

1
00:00:00.649 --> 00:00:03.111
Let's talk about text blocks,

2
00:00:03.111 --> 00:00:08.680
which are basically used to work
with multi-line strings, all right?

3
00:00:08.680 --> 00:00:13.261
And this is also something
that's relatively new to

4
00:00:13.261 --> 00:00:17.124
the Java language,
maybe a year or two old.

5
00:00:17.124 --> 00:00:21.035
But yeah, text can be pretty
ugly to work with in Java,

6
00:00:21.035 --> 00:00:23.771
especially when it's multi-line.

7
00:00:23.771 --> 00:00:26.576
So this was life before text blocks.

8
00:00:26.576 --> 00:00:31.976
Let's say you had a JSON response that
you wanted to represent in the string.

9
00:00:31.976 --> 00:00:37.434
I would have to, one,
add all of these new line characters,

10
00:00:37.434 --> 00:00:42.258
so that \n is a new line character,
after each line.

11
00:00:42.258 --> 00:00:48.121
And then these ugly plus signs,
I would need to escape any quotes,

12
00:00:48.121 --> 00:00:52.216
so you know JSON has quotes,
for the key part.

13
00:00:52.216 --> 00:00:56.599
And so, each one of those, I would
have to put a slash in front of it.

14
00:00:56.599 --> 00:01:00.067
It's absolute nightmare to deal with,
all right?

15
00:01:00.067 --> 00:01:05.426
So text blocks allows you to
cleanly define multi-line

16
00:01:05.426 --> 00:01:11.249
strings by using three quotation
marks to open and to close.

17
00:01:11.249 --> 00:01:15.801
Now, I don't have the new line characters,
I don't have the plus signs,

18
00:01:15.801 --> 00:01:17.977
I don't have to escape any quotes.

19
00:01:17.977 --> 00:01:23.089
It's just nice and clean, and
I can actually read this JSON now [LAUGH].

20
00:01:23.089 --> 00:01:27.665
So that's text blocks,
they work pretty much like strings,

21
00:01:27.665 --> 00:01:30.575
other than how they're defined here.

22
00:01:30.575 --> 00:01:33.834
Some rules, you cannot open and

23
00:01:33.834 --> 00:01:38.670
close a text block all on the same line,
right?

24
00:01:38.670 --> 00:01:41.952
They're really supposed to be for
multi-line text anyway.

25
00:01:41.952 --> 00:01:46.576
So this doesn't really make sense
to have this one line in a text

26
00:01:46.576 --> 00:01:49.292
block versus just a regular string.

27
00:01:49.292 --> 00:01:54.153
But yeah, you cannot have the opening and
closing on the same line.

28
00:01:54.153 --> 00:01:57.984
So I move the text to a new line,
this is legal, but

29
00:01:57.984 --> 00:02:00.736
this is also not the preferred way.

30
00:02:00.736 --> 00:02:07.596
So the preferred convention
is start the three lines,

31
00:02:07.596 --> 00:02:16.104
add any text you need in the three
quotes on its own new line, right?

32
00:02:20.061 --> 00:02:26.077
All right, so that is it for
text, so we talked about strings.

33
00:02:26.077 --> 00:02:30.801
We talked about string builder, and
then we also talked about text blocks.

34
00:02:30.801 --> 00:02:33.757
Any questions on strings, yeah.

35
00:02:33.757 --> 00:02:36.884
&gt;&gt; Is text blocks,
are they similar to strings,

36
00:02:36.884 --> 00:02:40.504
do they have the same split and
all that kind of stuff?

37
00:02:40.504 --> 00:02:42.317
&gt;&gt; Yeah, so you can utilize them.

38
00:02:42.317 --> 00:02:46.411
You can even, when you define the type,
you would even define that as string.

39
00:02:46.411 --> 00:02:53.542
So I can say string message = this hey
y'all, and then I do whatever I want.

40
00:02:53.542 --> 00:02:56.357
So the data type is a string.

41
00:02:59.200 --> 00:03:01.015
Good question, yes.

42
00:03:01.015 --> 00:03:04.533
&gt;&gt; When you're working with StringBuilder,

43
00:03:04.533 --> 00:03:09.103
would the return type of
the function be StringBuilder?

44
00:03:11.661 --> 00:03:13.376
&gt;&gt; Which function is it?

45
00:03:13.376 --> 00:03:17.938
Are they referring to-
&gt;&gt; I think that, yeah,

46
00:03:17.938 --> 00:03:21.084
they're referring to the-
&gt;&gt; The constructor.

47
00:03:21.084 --> 00:03:23.559
So this, I put var here.

48
00:03:23.559 --> 00:03:27.757
So this would actually be a StringBuilder.

49
00:03:31.106 --> 00:03:34.340
That would be the type, not string.

50
00:03:34.340 --> 00:03:35.298
&gt;&gt; And I think they're asking,

51
00:03:35.298 --> 00:03:37.405
if they were to be returning from
a function with StringBuilder,

52
00:03:37.405 --> 00:03:38.765
StringBuilder would be the return type.

53
00:03:38.765 --> 00:03:41.652
&gt;&gt; StringBuilder is the type, so

54
00:03:41.652 --> 00:03:46.323
StringBuilder is not the same as string,
right?

55
00:03:46.323 --> 00:03:51.225
StringBuilder is a mutable
version of string.

56
00:03:51.225 --> 00:03:55.797
So yeah, the datatype would be different.

57
00:03:55.797 --> 00:03:58.782
Let's see what happens
if I put string here.

58
00:03:58.782 --> 00:04:01.710
Yeah, doesn't like it.

59
00:04:01.710 --> 00:04:03.664
&gt;&gt; You declared it as a new StringBuilder,
so.

60
00:04:06.850 --> 00:04:09.824
The modified type-
&gt;&gt; I'll show you that doesn't

61
00:04:09.824 --> 00:04:12.665
always matter in a later lesson.

