WEBVTT

1
00:00:00.000 --> 00:00:04.407
Sometimes the Kobe right has
the possibility of throwing various

2
00:00:04.407 --> 00:00:09.226
exceptions and we wanna be prepared
to handle like any of them, right?

3
00:00:09.226 --> 00:00:14.159
So, there's three ways that you can
handle multiple exceptions at once.

4
00:00:14.159 --> 00:00:16.553
You can use polymorphism.

5
00:00:16.553 --> 00:00:17.905
I'll show you how to do that?

6
00:00:17.905 --> 00:00:20.666
You can use multiple catch blocks.

7
00:00:20.666 --> 00:00:26.974
So we only had one before, but we could
put two, three, however many we want or

8
00:00:26.974 --> 00:00:32.958
you can use a single catch block
with multiple exceptions in them.

9
00:00:32.958 --> 00:00:37.089
All right, so for polymorphism,

10
00:00:37.089 --> 00:00:44.786
you could use a superclass as
a way to catch broader exceptions.

11
00:00:44.786 --> 00:00:46.339
So look at this example.

12
00:00:46.339 --> 00:00:48.674
This is the array index out of bound.

13
00:00:48.674 --> 00:00:50.465
Look at the hierarchy there.

14
00:00:50.465 --> 00:00:56.134
So array index out of bounds inherits
from index, out of bounds exception.

15
00:00:56.134 --> 00:00:58.866
Which inherits from runtime exception.

16
00:00:58.866 --> 00:01:01.186
Runtime is checked or unchecked?

17
00:01:01.186 --> 00:01:02.382
&gt;&gt; Unchecked.

18
00:01:02.382 --> 00:01:07.636
&gt;&gt; Unchecked, which is exactly why,
with the array we see it not declared.

19
00:01:07.636 --> 00:01:08.766
It just happens.

20
00:01:08.766 --> 00:01:10.371
It's a runtime exception.

21
00:01:10.371 --> 00:01:16.115
RuntimeException inherits from exception,
who inherits from throwable,

22
00:01:16.115 --> 00:01:20.369
and everybody inherits from the lang,
which is object.

23
00:01:20.369 --> 00:01:25.367
So all of the exceptions that we deal with

24
00:01:25.367 --> 00:01:29.929
inherit from that Exception class.

25
00:01:29.929 --> 00:01:34.763
So I could do something like,
when I did that create new file.

26
00:01:34.763 --> 00:01:39.353
We're catching the IOException because
that's what the method told us that it

27
00:01:39.353 --> 00:01:40.184
might throw.

28
00:01:40.184 --> 00:01:45.204
However, if this method
threw multiple exceptions,

29
00:01:45.204 --> 00:01:50.114
and I wasn't quite sure
exactly what exception it was

30
00:01:50.114 --> 00:01:53.948
gonna throw, I could use polymorphism.

31
00:01:53.948 --> 00:01:59.063
And change that to say I
wanna catch exception.

32
00:01:59.063 --> 00:02:02.996
If I say exception,
exception is the parent of all exceptions.

33
00:02:02.996 --> 00:02:09.709
That means any subclass exception that's
thrown, this will catch that as well.

34
00:02:09.709 --> 00:02:14.081
&gt;&gt; Would this be where you'd probably want
to print whatever message it says to find

35
00:02:14.081 --> 00:02:15.956
out exactly where it's failing?

36
00:02:15.956 --> 00:02:17.909
&gt;&gt; Anytime you wanna get the message.

37
00:02:17.909 --> 00:02:19.331
You wanna, yeah.

38
00:02:21.109 --> 00:02:23.497
Even if it's like the exact exception,

39
00:02:23.497 --> 00:02:26.595
you still wanna get the message
because it may vary.

40
00:02:26.595 --> 00:02:30.396
Even if the exception is the same,
it might, the message might vary.

41
00:02:32.305 --> 00:02:35.282
&gt;&gt; Well, I suppose different methods to
get up multiple things wrong with them.

42
00:02:35.282 --> 00:02:37.921
So, even if you fix one,
it doesn't mean you fix everything.

43
00:02:40.410 --> 00:02:44.839
&gt;&gt; Yeah, but an exception is only
gonna be thrown for one reason.

44
00:02:44.839 --> 00:02:47.835
So I might fix that and then run it again.

45
00:02:47.835 --> 00:02:54.069
And another exception might be thrown for
another problem, yeah, all right.

46
00:02:56.138 --> 00:03:00.481
So another alternative way
is to use multiple catch

47
00:03:00.481 --> 00:03:05.130
clauses to handle the different
types of exceptions.

48
00:03:05.130 --> 00:03:07.721
And I'll show you that in our code.

49
00:03:07.721 --> 00:03:12.854
So let's write a program that reads
decimal numbers from a file and

50
00:03:12.854 --> 00:03:18.915
then we're gonna handle two types of
exceptions that come from that program.

51
00:03:18.915 --> 00:03:24.560
The FileNotFoundException in
the InputMismatchExceptions.

52
00:03:24.560 --> 00:03:26.566
All right, so this should be fun.

53
00:03:26.566 --> 00:03:31.349
We are going to actually to create a file.

54
00:03:31.349 --> 00:03:36.998
So I want you to create this as
appear to this source directory,

55
00:03:36.998 --> 00:03:44.051
so right under whatever your project name
is, I want to create a folder first.

56
00:03:44.051 --> 00:03:47.558
So new directory is what I want,
all right.

57
00:03:47.558 --> 00:03:52.187
So let's call this like files.

58
00:03:52.187 --> 00:03:57.774
And inside of here,
we'll create a new file,

59
00:03:57.774 --> 00:04:04.957
and we'll call this numbers.txt,
all right, perfect.

60
00:04:08.246 --> 00:04:13.880
And let's just throw some numbers

61
00:04:13.880 --> 00:04:21.270
one per line you can do decimals,
integers.

62
00:04:24.288 --> 00:04:30.300
Somewhere in the middle I want you to like
throw a random string in there just so

63
00:04:30.300 --> 00:04:34.570
they mess things up so
I'm gonna just say not a number.

64
00:04:34.570 --> 00:04:37.934
And now I'll say 6, oops, 6.

65
00:04:37.934 --> 00:04:45.251
Throw a negative in there,
all right, say -6, all right.

66
00:04:51.563 --> 00:04:56.506
All right, so inside, let's make another

67
00:04:56.506 --> 00:05:00.385
class under exceptions package.

68
00:05:04.210 --> 00:05:08.613
This one we'll call

69
00:05:08.613 --> 00:05:15.606
MultipleExceptionHandling.

70
00:05:23.141 --> 00:05:29.934
All right, so, this time, within the main
method, we'll create a new file.

71
00:05:29.934 --> 00:05:35.033
Don't forget to import file,

72
00:05:35.033 --> 00:05:38.959
enter equals new file.

73
00:05:38.959 --> 00:05:42.397
All right, [LAUGH] and give it that path.

74
00:05:42.397 --> 00:05:49.744
So the path was files/numbers.txt,

75
00:05:49.744 --> 00:05:57.706
all right So let's go ahead and
make a scanner.

76
00:05:57.706 --> 00:06:01.034
So we use scanner before
to read from the console,

77
00:06:01.034 --> 00:06:04.370
we can also use scanner to
read from files as well.

78
00:06:04.370 --> 00:06:08.580
So we'll say scanner=new Scanner, and

79
00:06:08.580 --> 00:06:15.206
instead of saying system.in,
we can just pass the file object.

80
00:06:23.102 --> 00:06:30.138
So notice, it's already whining
about an unhandled exception.

81
00:06:30.138 --> 00:06:34.220
So it says you have an unhandled
exception, it's file not found.

82
00:06:34.220 --> 00:06:36.575
How do I solve for this again?

83
00:06:36.575 --> 00:06:37.391
&gt;&gt; Try catch.

84
00:06:37.391 --> 00:06:42.718
&gt;&gt; Try catch block, so, let's go ahead and

85
00:06:42.718 --> 00:06:46.379
put this within a try block.

86
00:06:46.379 --> 00:06:52.064
Then we're going to catch that exception.

87
00:06:52.064 --> 00:06:55.406
What was the exception called?

88
00:06:55.406 --> 00:06:57.210
FileNotFoundException.

89
00:06:57.210 --> 00:07:02.457
So FileNotFoundException,

90
00:07:02.457 --> 00:07:06.029
all right, great.

91
00:07:06.029 --> 00:07:10.267
Now I want to read from the file, yes?

92
00:07:10.267 --> 00:07:17.959
So in order to read from this file,
I'm gonna use.

93
00:07:17.959 --> 00:07:20.650
Can I rename this?

94
00:07:20.650 --> 00:07:25.427
I want to call it fileReader just so
you realize that it's not

95
00:07:25.427 --> 00:07:30.777
the same like scanner that's
reading from the system, all right.

96
00:07:34.320 --> 00:07:39.244
So with fileReader,
I mean with scanner with everything

97
00:07:39.244 --> 00:07:42.434
with this thing you can say has next.

98
00:07:42.434 --> 00:07:46.495
And that's just kinda like the iterator
where it lets you know if there's some

99
00:07:46.495 --> 00:07:47.366
more elements.

100
00:07:47.366 --> 00:07:51.794
So this'll let you know if there's
another line to read or not,

101
00:07:51.794 --> 00:07:55.900
and that of course returns
a boolean value of true or false.

102
00:07:55.900 --> 00:07:58.772
So we say, while there's more to read,

103
00:07:58.772 --> 00:08:02.829
keep reading it in, and
then we can just, I don't know.

104
00:08:02.829 --> 00:08:07.411
You can do whatever you want, but
we'll just print like what we've read, so

105
00:08:07.411 --> 00:08:10.743
that we know that it's actually
reading from the file.

106
00:08:10.743 --> 00:08:16.102
So we can say fileReader.nextDouble.

107
00:08:16.102 --> 00:08:21.087
So same thing we've done with the console,
we can do with the file.

108
00:08:21.087 --> 00:08:23.351
We're expecting numbers right.

109
00:08:27.589 --> 00:08:32.871
So let's go ahead we could I
don't know in the file not found,

110
00:08:32.871 --> 00:08:38.067
let's just print the message
that we get there get message.

111
00:08:42.916 --> 00:08:45.038
Shall we run it.

112
00:08:45.038 --> 00:08:46.546
Are you nervous?

113
00:08:48.918 --> 00:08:53.492
It doesn't like this, I ran the wrong one.

114
00:08:58.062 --> 00:08:59.764
All right, here we go.

115
00:08:59.764 --> 00:09:04.429
So, notice it was able to
print out some of the numbers,

116
00:09:04.429 --> 00:09:09.390
3, 2.5, 0, 19.9 but
when it got to that string,

117
00:09:09.390 --> 00:09:14.488
it threw an exception that
says InputMismatchExceptions.

118
00:09:14.488 --> 00:09:18.027
Now why did this not complain?

119
00:09:18.027 --> 00:09:20.409
Why did the compiler not complain?

120
00:09:20.409 --> 00:09:24.709
If it knew that there was a possibility
of an exception being thrown?

121
00:09:27.819 --> 00:09:31.162
&gt;&gt; Still a valid input up until a point.

122
00:09:31.162 --> 00:09:33.731
We told you that string had doubles.

123
00:09:33.731 --> 00:09:41.472
&gt;&gt; Yeah, but this exception that we
have here is an InputMismatchExceptions.

124
00:09:41.472 --> 00:09:44.309
I don't see like anything
here that's complaining

125
00:09:44.309 --> 00:09:47.346
to say like you might get
an InputMismatchExceptions.

126
00:09:47.346 --> 00:09:51.075
&gt;&gt; Sure, I'm checked exceptions
&gt;&gt; And uncheck the box exception.

127
00:09:51.075 --> 00:09:55.831
So next double throws
an unchecked exception.

128
00:09:55.831 --> 00:10:00.173
That's why we don't have to account for
it at all.

129
00:10:00.173 --> 00:10:04.692
But we can if we want to all right?

130
00:10:04.692 --> 00:10:09.265
So, what we can do here is
add another catch block,

131
00:10:12.550 --> 00:10:16.119
And this time we'll say okay,

132
00:10:16.119 --> 00:10:20.928
if InputMismatchExceptions is thrown.

133
00:10:20.928 --> 00:10:24.620
So you can imagine where you
could do anything you want.

134
00:10:24.620 --> 00:10:28.085
Maybe you wanna say, all right,
just skip that line and

135
00:10:28.085 --> 00:10:31.780
keep going to the next line or
something like that, right?

136
00:10:31.780 --> 00:10:34.832
So you can handle this
gracefully if you want to.

137
00:10:34.832 --> 00:10:38.743
You only read the numbers
from the file and

138
00:10:38.743 --> 00:10:43.454
not anything else, for
example, right, okay?

139
00:10:46.171 --> 00:10:51.500
So this is a way that you can
handle like multiple exceptions,

140
00:10:51.500 --> 00:10:55.200
things like multiple catch blocks there.

141
00:10:55.200 --> 00:10:56.787
I'll print the same thing here.

142
00:10:56.787 --> 00:11:01.052
I gave you that example but
I'm not gonna code that up.

143
00:11:01.052 --> 00:11:05.128
&gt;&gt; If you're just doing the same
kind of response can you

144
00:11:05.128 --> 00:11:07.672
be combined those catch blocks?

145
00:11:07.672 --> 00:11:14.506
&gt;&gt; Yeah, but we're not there yet, okay.

146
00:11:19.752 --> 00:11:22.263
All right, so if I wanna use, okay,

147
00:11:22.263 --> 00:11:27.287
let's say I got burned by
the InputMismatchExceptions, and I'm like,

148
00:11:27.287 --> 00:11:31.757
who knows what other unchecked
exceptions might occur, right?

149
00:11:31.757 --> 00:11:36.847
So maybe I want to also
add one third block.

150
00:11:36.847 --> 00:11:42.089
And let's add it up top, that says, what,

151
00:11:42.089 --> 00:11:47.496
if any exception is thrown, any exception.

152
00:11:47.496 --> 00:11:49.661
Go ahead and come here.

153
00:11:49.661 --> 00:11:55.060
Now notice, as soon as I added
that one I got an error here.

154
00:11:55.060 --> 00:12:00.103
On both FileNotFoundExceptions as
well as InputMismatchExceptions.

155
00:12:00.103 --> 00:12:04.917
And that's because if we think
about the hierarchy exception is

156
00:12:04.917 --> 00:12:06.977
the parent to both of them.

157
00:12:06.977 --> 00:12:12.901
So if I catch this exception,
there's no possible way that I would ever

158
00:12:12.901 --> 00:12:17.944
get to this block nor this one All right,

159
00:12:17.944 --> 00:12:23.022
so if you just wanted to add that you
say no, if I get found not found,

160
00:12:23.022 --> 00:12:27.146
I want to catch that and
I want to create the directory.

161
00:12:27.146 --> 00:12:30.399
If I get input mismatch,
I want to skip that line and

162
00:12:30.399 --> 00:12:33.434
I want to just kind of
progress to the next line.

163
00:12:33.434 --> 00:12:35.343
But if I get anything else,

164
00:12:35.343 --> 00:12:39.414
then I want you to just do
something differently, right?

165
00:12:39.414 --> 00:12:44.401
You can do this, you just have to put

166
00:12:44.401 --> 00:12:48.735
most the highest of them last.

167
00:12:56.131 --> 00:12:58.389
Questions on this?

168
00:12:58.389 --> 00:13:04.169
All right, so,
to your question you can handle

169
00:13:04.169 --> 00:13:10.827
like different exceptions
with a single catch block.

170
00:13:10.827 --> 00:13:15.730
And this will eliminate the duplication
like if you see yourself

171
00:13:15.730 --> 00:13:19.724
like doing the same thing
in multiple catch blocks,

172
00:13:19.724 --> 00:13:24.291
then you might want to consolidate
those into a single one.

173
00:13:24.291 --> 00:13:28.978
So for example,
here we are doing the exact same thing,

174
00:13:28.978 --> 00:13:34.989
e.printstacktrace in the catch block for
found not found exception.

175
00:13:34.989 --> 00:13:39.754
We're doing that exact same thing in the
catch block for InputMismatchExceptions.

176
00:13:39.754 --> 00:13:46.988
So what we could do is put them both
together to separate them with a pipe.

177
00:13:46.988 --> 00:13:51.004
So this is saying if you find
FileNotFound exception or

178
00:13:51.004 --> 00:13:55.633
InputMismatchExceptions, notice
there's just one name e,

179
00:13:55.633 --> 00:14:01.595
either one of these, call it e, and then
you can print the stack trace like that.

180
00:14:06.737 --> 00:14:10.674
&gt;&gt; Under the hood, would each of
those be two separate objects,

181
00:14:10.674 --> 00:14:15.457
like each exception is a separate object
that just happens to share a name?

182
00:14:15.457 --> 00:14:20.982
&gt;&gt; No, because the exception will only,
like one exception is thrown at a time,

183
00:14:20.982 --> 00:14:25.521
and so if it matches either one of those,
it's just one object.

184
00:14:25.521 --> 00:14:31.444
So it just picks whichever one it is
makes that object and then carry on.

