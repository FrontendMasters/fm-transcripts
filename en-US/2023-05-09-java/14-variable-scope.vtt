WEBVTT

1
00:00:00.000 --> 00:00:02.813
Now let's talk about variable scope.

2
00:00:02.813 --> 00:00:08.148
So I mentioned this a little bit earlier,
but the variable is only

3
00:00:08.148 --> 00:00:13.388
accessible within the scope that
it is declared in, all right?

4
00:00:13.388 --> 00:00:19.116
So we're gonna write another program
that approves anyone who makes more than

5
00:00:19.116 --> 00:00:25.983
$25,000 and has a credit score of 700 or
better, and is going to reject all others.

6
00:00:25.983 --> 00:00:29.685
So we saw a little clip of this program,
we're gonna actually write it out.

7
00:00:29.685 --> 00:00:32.483
We're ready for that now.

8
00:00:32.483 --> 00:00:36.449
Okay, so we'll create a new class.

9
00:00:36.449 --> 00:00:42.135
And we'll call this class
Instant Credit Check.

10
00:00:47.436 --> 00:00:49.223
How are you doing with your cases?

11
00:00:50.967 --> 00:00:54.366
Good, all classes are beginning
with capital letters?

12
00:00:54.366 --> 00:00:56.413
Perfect, all right.

13
00:00:56.413 --> 00:01:00.975
So, All the classes we've made so far,

14
00:01:00.975 --> 00:01:03.628
the first thing we've done,
we've made our main method, right?

15
00:01:03.628 --> 00:01:06.179
We're getting a little
bit more advanced now,

16
00:01:06.179 --> 00:01:08.361
that doesn't have to be where we start.

17
00:01:08.361 --> 00:01:13.291
We can even define variables
at the class level, all right?

18
00:01:13.291 --> 00:01:14.521
So let's do that now.

19
00:01:14.521 --> 00:01:19.016
We're gonna started with static and

20
00:01:19.016 --> 00:01:25.686
the data type of the first
variable will be an integer,

21
00:01:25.686 --> 00:01:30.907
and we'll call this one requiredSalary,

22
00:01:30.907 --> 00:01:33.817
25,000, okay?

23
00:01:33.817 --> 00:01:38.229
And let's make another variable,

24
00:01:38.229 --> 00:01:45.737
static int requiredCreditScore,
and this will be 700.

25
00:01:51.853 --> 00:01:56.939
All right, now, let's go ahead and
make the main method,

26
00:01:56.939 --> 00:02:00.623
and we'll just go ahead and get our input.

27
00:02:00.623 --> 00:02:04.646
So we'll call some methods.

28
00:02:04.646 --> 00:02:11.900
We'll say double salary =, and we'll
write a new method called getSalary().

29
00:02:11.900 --> 00:02:16.360
Now what I like to do is I like
to flesh out my thought process.

30
00:02:16.360 --> 00:02:19.780
And then I'll create whatever
I need in order to meet that.

31
00:02:19.780 --> 00:02:23.389
But if I go and create that getSalary
method, I'm gonna come back and say,

32
00:02:23.389 --> 00:02:25.585
now what was I doing and
what's my next step?

33
00:02:25.585 --> 00:02:29.702
So I'm gonna write this, you'll see
some red, that's okay, all right?

34
00:02:29.702 --> 00:02:34.566
Now I wanna get the credit score and
so that'll be another

35
00:02:34.566 --> 00:02:39.034
method that we'll create
called getCreditScore.

36
00:02:39.034 --> 00:02:43.566
We're going to say public

37
00:02:43.566 --> 00:02:47.896
static double getSalary

38
00:02:54.093 --> 00:02:58.311
And we'll ask for their salary.

39
00:02:58.311 --> 00:03:01.339
All right,
things are gonna get really juicy.

40
00:03:04.233 --> 00:03:07.612
And now we want to input the salary.

41
00:03:07.612 --> 00:03:13.207
Now, I can define the scanner here and
I can input that.

42
00:03:13.207 --> 00:03:16.277
But then when I go to my
getCreditScore method,

43
00:03:16.277 --> 00:03:19.210
I'm gonna have to do the same thing,
right?

44
00:03:19.210 --> 00:03:26.461
Because if I define the scanner,
I'll do so, don't type this.

45
00:03:28.083 --> 00:03:29.602
Or you can if you want.

46
00:03:29.602 --> 00:03:34.540
[LAUGH] All right, so
if I define this here,

47
00:03:38.416 --> 00:03:43.402
And then, I'm gonna make the other
method just so you can see.

48
00:03:43.402 --> 00:03:50.579
You can go ahead and
type this one too, getCreditScore().

49
00:03:50.579 --> 00:03:57.158
Now, if I tried to say scanner., nothing
is appearing here, or no methods, right?

50
00:03:57.158 --> 00:04:00.125
It doesn't know what I am talking about.

51
00:04:00.125 --> 00:04:04.814
Who is scanner,
is what it's really saying, right?

52
00:04:04.814 --> 00:04:08.493
Let me try to say nextDouble or
something we've been using.

53
00:04:08.493 --> 00:04:12.170
Notice scanner is red and it's saying,
I can't resolve this symbol,

54
00:04:12.170 --> 00:04:14.941
meaning, I don't know what
you're talking about.

55
00:04:14.941 --> 00:04:19.537
That's because scanner was
defined in the getSalary method.

56
00:04:19.537 --> 00:04:24.482
Whatever is defined within a certain
method is only accessible within

57
00:04:24.482 --> 00:04:25.494
that method.

58
00:04:25.494 --> 00:04:28.740
No other methods can utilize it.

59
00:04:28.740 --> 00:04:33.028
Basically, if I think
even broader than that,

60
00:04:33.028 --> 00:04:38.074
it is scoped to the curly
braces in which it was defined.

61
00:04:38.074 --> 00:04:43.127
So even if I had a while loop,
if I had an if statement, if I define some

62
00:04:43.127 --> 00:04:48.794
variable within the curly braces of
that loop, of that decision structure,

63
00:04:48.794 --> 00:04:52.916
anything outside of that
would not know that variable.

64
00:04:52.916 --> 00:04:56.845
So it's defined in scope,
it's scoped to where it was defined,

65
00:04:56.845 --> 00:04:59.352
the curly braces in which it was defined.

66
00:04:59.352 --> 00:05:06.157
So if I want to use this scanner in
multiple methods inside of this class,

67
00:05:06.157 --> 00:05:12.980
I would need to move it outside of
the methods and put it at a higher level.

68
00:05:12.980 --> 00:05:19.107
So the curly braces in which this
now is defined is the entire class.

69
00:05:19.107 --> 00:05:25.746
That means methods are in that class
as well, they now can access it, yes.

70
00:05:25.746 --> 00:05:27.933
&gt;&gt; What does that imply for
closing the scanner,

71
00:05:27.933 --> 00:05:30.077
like in all these
different little methods?

72
00:05:30.077 --> 00:05:32.549
&gt;&gt; Yes, yes, yes, great question.

73
00:05:32.549 --> 00:05:36.984
Let's make this static, all right,
[LAUGH] to the static point,

74
00:05:36.984 --> 00:05:39.817
I know I haven't gotten deep into it yet.

75
00:05:39.817 --> 00:05:43.818
But even with this outside of the class,

76
00:05:43.818 --> 00:05:49.819
this is still complaining,
because this method is static,

77
00:05:49.819 --> 00:05:55.011
which means it can only
access other static things.

78
00:05:55.011 --> 00:05:59.012
Unless we did something special,
which I'll talk about in a bit.

79
00:05:59.012 --> 00:06:02.847
All right, so you asked about closing it,
that's very good.

80
00:06:02.847 --> 00:06:06.857
So, what I would do,
I'm gonna use scanner here,

81
00:06:06.857 --> 00:06:10.885
let's go ahead,
I'll answer that as we get to it.

82
00:06:10.885 --> 00:06:13.333
Let's go ahead and enter the code here.

83
00:06:13.333 --> 00:06:19.180
So we can say, double salary

84
00:06:19.180 --> 00:06:24.785
= scanner.nextDouble,

85
00:06:24.785 --> 00:06:27.960
oops, right?

86
00:06:27.960 --> 00:06:33.193
And this is supposed to return something,
so

87
00:06:33.193 --> 00:06:39.666
I can say return salary, and
then for getCreditScore,

88
00:06:39.666 --> 00:06:44.502
I want to ask them for their credit score.

89
00:06:50.201 --> 00:06:55.820
And we'll say double
creditScore = nextDouble,

90
00:06:55.820 --> 00:06:58.571
and we'll return this.

91
00:07:01.609 --> 00:07:05.105
Okay, now, for both of these, I am done.

92
00:07:05.105 --> 00:07:11.187
Remember, I said I'm using the main,
this is a double.

93
00:07:11.187 --> 00:07:14.904
Okay, I'll make this an int,
sorry, you all.

94
00:07:14.904 --> 00:07:19.654
And then this must be an int,
and then this must be an int.

95
00:07:21.364 --> 00:07:22.876
Okay, I'll give you a minute.

96
00:07:22.876 --> 00:07:25.320
I updated creditScore to use integers.

97
00:07:28.560 --> 00:07:29.455
All right, so

98
00:07:29.455 --> 00:07:34.766
remember I said that we're using the main
method to control the flow of the program.

99
00:07:34.766 --> 00:07:38.951
So I know I'm done getting my input
right here, I can go ahead and

100
00:07:38.951 --> 00:07:40.356
close it right here.

101
00:07:43.611 --> 00:07:44.122
Okay?
&gt;&gt; So

102
00:07:44.122 --> 00:07:47.310
even if someone were to give you
an invalid value for the salary or

103
00:07:47.310 --> 00:07:48.254
the credit score,

104
00:07:48.254 --> 00:07:52.050
it's not gonna hit that close scanner
line until it gets the valid entries.

105
00:07:52.050 --> 00:07:56.288
&gt;&gt; Right, so, if I wanted to put a while
loop inside of here to make sure I

106
00:07:56.288 --> 00:07:58.569
get the values, then that's fine.

107
00:07:58.569 --> 00:08:04.279
And then it wouldn't close it
until I'm back here, all right?

108
00:08:04.279 --> 00:08:07.703
Okay, so we got the input.

109
00:08:07.703 --> 00:08:14.501
Now we want to check if
the user is qualified, right?

110
00:08:14.501 --> 00:08:19.189
So we can say boolean qualified =, and

111
00:08:19.189 --> 00:08:25.734
we'll call a new method that
we haven't written yet.

112
00:08:25.734 --> 00:08:30.743
Remember, I said about the boolean, so
you kinda want some sort of questions.

113
00:08:30.743 --> 00:08:35.475
So we can say isUserQualified.

114
00:08:35.475 --> 00:08:38.319
And we can pass in isUserQualified,

115
00:08:38.319 --> 00:08:42.460
we wanna take the salary
in the credit score, right?

116
00:08:42.460 --> 00:08:48.150
So we can say (double salary,
and int creditScore).

117
00:08:51.593 --> 00:08:55.984
Oops, I'm defining it
right here by mistake.

118
00:08:55.984 --> 00:08:56.660
Hold on a second.

119
00:08:58.980 --> 00:09:04.830
So I would just pass it in salary and
creditScore,

120
00:09:04.830 --> 00:09:08.883
and then I can define that method.

121
00:09:08.883 --> 00:09:14.553
So, little tip, when this is wrong like
this red, i can just click here and

122
00:09:14.553 --> 00:09:20.230
it'll give me something says,
you want me to create a method for you?

123
00:09:20.230 --> 00:09:24.027
And make it for me nicely like this.

124
00:09:24.027 --> 00:09:26.767
It's made this private.

125
00:09:26.767 --> 00:09:30.560
That was fine, but i'll make it public
until we talk more about private.

126
00:09:32.845 --> 00:09:33.792
Okay.

127
00:09:33.792 --> 00:09:37.178
&gt;&gt; How come it's complaining at you,
cuz it was expecting a return type.

128
00:09:37.178 --> 00:09:40.237
So there it is.
&gt;&gt; That's right, all right.

129
00:09:40.237 --> 00:09:45.409
So inside of this isUserQualified,
we can say,

130
00:09:45.409 --> 00:09:50.087
this is decision, right, decision time.

131
00:09:50.087 --> 00:09:54.552
So if the credit score,
let's start with the salary.

132
00:09:54.552 --> 00:09:59.453
If the (salary &gt;= requiredSalary),

133
00:09:59.453 --> 00:10:04.800
and where did I get requiredSalary from?

134
00:10:04.800 --> 00:10:06.944
I define that at the class level.

135
00:10:06.944 --> 00:10:09.630
These are known as global variables.

136
00:10:09.630 --> 00:10:13.893
Global because they can be used
inside of the entire class.

137
00:10:13.893 --> 00:10:21.708
They're not local, local is where you
will use it only within a method, okay?

138
00:10:21.708 --> 00:10:27.966
So if(salary &gt;= requiredSalary &amp;&amp;,

139
00:10:27.966 --> 00:10:34.743
so we're using that and, logical operator,

140
00:10:34.743 --> 00:10:41.351
creditScore &gt;= requiredCreditScore),

141
00:10:41.351 --> 00:10:45.018
then we can return true.

142
00:10:46.649 --> 00:10:50.820
The user has met the requirements.

143
00:10:50.820 --> 00:10:55.280
Otherwise return false.

144
00:10:55.280 --> 00:10:58.210
Notice here, I didn't use curly braces.

145
00:10:58.210 --> 00:11:01.179
When you have just one
statement with an if or

146
00:11:01.179 --> 00:11:04.323
an else,
you don't have to use curly braces.

147
00:11:04.323 --> 00:11:05.541
It's up to you.

148
00:11:05.541 --> 00:11:10.257
Some development shops have
conventions and rules about this,

149
00:11:10.257 --> 00:11:12.448
like don't do single lines.

150
00:11:12.448 --> 00:11:16.935
So you could do it like this,
you could do it like that,

151
00:11:16.935 --> 00:11:20.560
same thing, if it's just one line, okay?

152
00:11:23.415 --> 00:11:26.546
I'll return out, leave it like that, so

153
00:11:26.546 --> 00:11:30.493
you have a couple of examples
in the Git repository.

154
00:11:30.493 --> 00:11:34.018
All right, so
we're returning a value back.

155
00:11:34.018 --> 00:11:40.002
Whatever we return back will be stored
inside of this boolean qualified variable,

156
00:11:40.002 --> 00:11:40.862
all right?

157
00:11:40.862 --> 00:11:44.434
And then a final step,
let's just go ahead and notify the user.

158
00:11:44.434 --> 00:11:46.500
So this will be another method.

159
00:11:46.500 --> 00:11:52.190
We'll call this notifyUser, and
that'll take that qualified variable.

160
00:11:52.190 --> 00:11:55.368
And we'll have them create this for us.

161
00:11:59.168 --> 00:12:04.552
So this, again, takes a boolean,
it won't return anything,

162
00:12:04.552 --> 00:12:07.954
and we'll just say this is a if, right?

163
00:12:07.954 --> 00:12:13.468
If, Qualified,

164
00:12:16.221 --> 00:12:19.551
Then we wanna print something.

165
00:12:19.551 --> 00:12:24.030
Congrat, you've been approved.

166
00:12:28.100 --> 00:12:35.921
Otherwise, Sorry,

167
00:12:35.921 --> 00:12:43.021
you've been declined, okay?

168
00:12:45.734 --> 00:12:52.200
Now, Let's

169
00:12:52.200 --> 00:12:58.380
look at isUserQualified in here.

170
00:12:58.380 --> 00:13:03.240
So notice, when I call it,
I'm using salary and creditScore,

171
00:13:03.240 --> 00:13:07.388
and then here,
I also call it salary and creditScore.

172
00:13:07.388 --> 00:13:11.670
Again, I just wanna re-emphasize,
these are not the same variables.

173
00:13:11.670 --> 00:13:15.800
I could call this literally anything.

174
00:13:15.800 --> 00:13:23.570
Let's call it just s, and call this s,
and that will still be perfectly fine.

175
00:13:23.570 --> 00:13:26.340
S will correspond to salary there.

176
00:13:26.340 --> 00:13:28.020
Does not have to be the same name.

177
00:13:29.810 --> 00:13:33.805
And when it is the same name,
they are not the same thing,

178
00:13:33.805 --> 00:13:36.229
the same memory location, okay?

179
00:13:36.229 --> 00:13:36.909
All right.

180
00:13:36.909 --> 00:13:40.485
&gt;&gt; I think when you create your scanner,

181
00:13:40.485 --> 00:13:45.610
you're setting it
the system in.is in quotes.

182
00:13:45.610 --> 00:13:46.110
&gt;&gt; Is it?

183
00:13:47.110 --> 00:13:48.436
Thank you.

184
00:13:48.436 --> 00:13:53.324
Perfect, Very nice catch.

185
00:13:53.324 --> 00:14:01.388
All right, let's run it without that.

186
00:14:01.388 --> 00:14:05.400
All right, let's see, 50,000.

187
00:14:05.400 --> 00:14:08.050
Okay, great, that was nice.

188
00:14:08.050 --> 00:14:11.700
Okay, credit score, let's say 725.

189
00:14:11.700 --> 00:14:14.498
So should I qualify?

190
00:14:14.498 --> 00:14:20.912
According to this required salary,
I should, right?

191
00:14:20.912 --> 00:14:23.623
So it says, congrats, I've been approved.

192
00:14:23.623 --> 00:14:25.844
All right, let's try again.

193
00:14:25.844 --> 00:14:32.130
This time, let's say only 10,000, but
let's have the good credit score.

194
00:14:32.130 --> 00:14:38.385
So let's say 800, and
then sorry, I've been declined.

195
00:14:38.385 --> 00:14:42.180
Okay, good.

196
00:14:42.180 --> 00:14:45.707
So, yes, question.

197
00:14:45.707 --> 00:14:48.070
&gt;&gt; It's a couple of questions.

198
00:14:49.370 --> 00:14:54.840
For the class attributes and
methods, are those default public?

199
00:14:56.220 --> 00:14:58.944
&gt;&gt; No, they're default protected,

200
00:14:58.944 --> 00:15:03.845
meaning anyone inside of the package
would be able to access it,

201
00:15:03.845 --> 00:15:09.492
any other classes inside of the package,
but not outside of the package.

202
00:15:09.492 --> 00:15:14.900
&gt;&gt; Can you not just return
the value of evaluation in Java?

203
00:15:14.900 --> 00:15:16.150
&gt;&gt; Yeah, I can.

204
00:15:16.150 --> 00:15:18.555
So the question here is, so

205
00:15:18.555 --> 00:15:24.240
I did if cuz I wanted you to just
see exactly what was going on.

206
00:15:24.240 --> 00:15:31.100
I could simplify this a lot by just
saying return whatever this equates to.

207
00:15:32.760 --> 00:15:37.217
I would probably put this
inside of parentheses so

208
00:15:37.217 --> 00:15:40.194
it knows that that's one thing.

209
00:15:40.194 --> 00:15:46.990
And then I can just comment this out and I
could simplify the whole thing like that.

210
00:15:46.990 --> 00:15:53.923
So again, the variables that were defined
at the class level, these are global.

211
00:15:53.923 --> 00:15:57.977
Anything else is local, yes?

212
00:15:57.977 --> 00:16:01.539
&gt;&gt; Required salary, should it be double?

213
00:16:01.539 --> 00:16:02.998
&gt;&gt; It can, yeah.

214
00:16:02.998 --> 00:16:04.487
I hate to mess with it now.

215
00:16:04.487 --> 00:16:05.408
[LAUGH]
&gt;&gt; Well, you could just use

216
00:16:05.408 --> 00:16:06.410
the refactor intelligent.

217
00:16:07.630 --> 00:16:11.801
&gt;&gt; I don't know if it
refactor is the data type.

218
00:16:11.801 --> 00:16:15.901
Yeah, it only refactors the name I think.

219
00:16:15.901 --> 00:16:17.422
Unless I just don't know how to do it.

220
00:16:17.422 --> 00:16:22.051
But okay, where do I use this?

221
00:16:22.051 --> 00:16:27.665
Double salary,
I think I only use it in this comparison.

222
00:16:27.665 --> 00:16:31.684
So, let's just run it again to
make sure we didn't break it.

223
00:16:31.684 --> 00:16:36.688
50,000, 800, all right, cool.

