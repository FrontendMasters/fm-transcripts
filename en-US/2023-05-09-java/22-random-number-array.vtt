WEBVTT

1
00:00:00.370 --> 00:00:04.166
&gt;&gt; Angie Jones: So we're gonna
write a lottery ticket program.

2
00:00:04.166 --> 00:00:08.891
If anyone happens to use this and
they win something,

3
00:00:08.891 --> 00:00:14.142
they have to give me a small
portion of the winnings, okay?

4
00:00:14.142 --> 00:00:18.384
If it's five bucks,
I'll take one buck, all right?

5
00:00:18.384 --> 00:00:21.516
So we're gonna create a lotteries
quick pick application.

6
00:00:21.516 --> 00:00:26.724
It's gonna generate a lottery ticket
with 6 random numbers between 1 and

7
00:00:26.724 --> 00:00:29.640
69, all right, y'all ready?

8
00:00:29.640 --> 00:00:32.168
This should be a fun program to write.

9
00:00:34.666 --> 00:00:40.890
&gt;&gt; Angie Jones: So let's create a new
package, this one we'll call arrays.

10
00:00:40.890 --> 00:00:48.704
And inside of here, we'll create a new
class that we're calling LotteryTicket.

11
00:00:52.164 --> 00:00:57.218
&gt;&gt; Angie Jones: All right, so
I wanna do something different with

12
00:00:57.218 --> 00:01:02.162
my global variables this time,
I'll show you.

13
00:01:02.162 --> 00:01:08.137
So I'm gonna make private, I am going
to use static, I'm going to use final.

14
00:01:08.137 --> 00:01:14.824
Well, I'm pulling out all the big guns,
and I'm gonna use the data type.

15
00:01:14.824 --> 00:01:19.790
And then I'm gonna define this
variable in all caps, and

16
00:01:19.790 --> 00:01:23.725
this is gonna be the length of the array,
6.

17
00:01:23.725 --> 00:01:28.540
What I've done here is declare
what's known as a constant.

18
00:01:29.580 --> 00:01:38.480
Constant means this is a variable
that should not be changed, okay?

19
00:01:38.480 --> 00:01:43.100
It cannot be changed because
I used the word final here.

20
00:01:44.120 --> 00:01:45.758
So this is something like,

21
00:01:45.758 --> 00:01:51.100
I know length will never change because
the lottery tickets only hold 6 numbers.

22
00:01:51.100 --> 00:01:54.520
I feel good about that
by writing in all caps.

23
00:01:54.520 --> 00:01:59.426
When people use this later
on within the same program,

24
00:01:59.426 --> 00:02:00.810
&gt;&gt; Angie Jones: They see it in all caps,

25
00:02:00.810 --> 00:02:04.687
you know immediately,
by just like any other convention in Java,

26
00:02:04.687 --> 00:02:05.874
you know what it is.

27
00:02:05.874 --> 00:02:11.170
All caps, that means a constant,
final variable, okay?

28
00:02:11.170 --> 00:02:14.432
Now, I don't have to write it like that,
I could have written it all in lower case.

29
00:02:14.432 --> 00:02:19.431
But you lose a little bit of context
with other Java developers, all right?

30
00:02:19.431 --> 00:02:23.151
And for
those of you who code in other languages,

31
00:02:23.151 --> 00:02:27.795
you know that someone will have
to modify this at some point.

32
00:02:27.795 --> 00:02:32.771
And it's good if they're able to read
it and know what's going on, right?

33
00:02:32.771 --> 00:02:35.440
All right, so all right,
we made the length.

34
00:02:35.440 --> 00:02:38.401
The other constant I wanna make is

35
00:02:38.401 --> 00:02:43.175
the maximum number that can
be on the lottery ticket.

36
00:02:43.175 --> 00:02:47.858
So we'll do a static final, and

37
00:02:47.858 --> 00:02:54.451
we'll call this one MAX_TICKET_NUMBER,

38
00:02:54.451 --> 00:02:57.234
and that was 69.

39
00:02:57.234 --> 00:03:02.870
All right, question on constants?

40
00:03:02.870 --> 00:03:06.486
All right, so I made the main method,

41
00:03:06.486 --> 00:03:11.357
and inside of here we're
going to create an array.

42
00:03:11.357 --> 00:03:17.102
So we'll make it of integers,
we'll call it ticket, and

43
00:03:17.102 --> 00:03:25.093
I'm gonna call a new method that we have
not written yet to say generateNumbers.

44
00:03:25.093 --> 00:03:27.420
Yes, question.

45
00:03:27.420 --> 00:03:32.199
&gt;&gt; Audience: Can int[]
be written as var here?

46
00:03:34.064 --> 00:03:38.800
&gt;&gt; Angie Jones: Okay,
it can if generateNumbers is written.

47
00:03:38.800 --> 00:03:42.180
So right now it would bark, but
lets write generateNumbers,

48
00:03:42.180 --> 00:03:44.290
at least the header for that.

49
00:03:44.290 --> 00:03:48.476
So if I say public static int[]

50
00:03:48.476 --> 00:03:55.200
generateNumbers(){},
&gt;&gt; Angie Jones: And

51
00:03:55.200 --> 00:04:01.454
then I could say var
because it will infer.

52
00:04:01.454 --> 00:04:05.592
You notice there, remember someone asked,
well, how will you know what it is later?

53
00:04:05.592 --> 00:04:11.349
You see this little gray part,
so IntelliJ is telling me

54
00:04:11.349 --> 00:04:16.995
Java has inferred this as
an integer of arrays, okay?

55
00:04:16.995 --> 00:04:17.780
All right,

56
00:04:17.780 --> 00:04:22.501
I'm gonna leave it as that because I
want you to have that as an example.

57
00:04:22.501 --> 00:04:25.787
Okay, so
you're ready to generate the numbers?

58
00:04:25.787 --> 00:04:29.653
[LAUGH] So much fun.

59
00:04:29.653 --> 00:04:37.910
Okay, so we're are going to
create a ticket in here as well.

60
00:04:37.910 --> 00:04:41.585
So we'll say int[] ticket =,

61
00:04:41.585 --> 00:04:45.790
and this time we'll say new int[].

62
00:04:47.310 --> 00:04:50.490
And then we could use that length in here,
right?

63
00:04:50.490 --> 00:04:51.956
The LENGTH constant.

64
00:04:54.538 --> 00:04:57.922
&gt;&gt; Angie Jones: So
this is another good reason to use these

65
00:04:57.922 --> 00:05:00.832
kinda global constant variables.

66
00:05:00.832 --> 00:05:06.023
Let's say the state changed lottery
tickets, and now it's 5 numbers or 7

67
00:05:06.023 --> 00:05:11.723
numbers or whatever, I can come in here in
this one place, and I can just change it.

68
00:05:11.723 --> 00:05:16.681
And the whole program still works,
as opposed to defining it

69
00:05:16.681 --> 00:05:21.557
in multiple places,
they call those [LAUGH] magic numbers.

70
00:05:21.557 --> 00:05:27.185
You just see random numbers somewhere,
like if I would have put 6 here,

71
00:05:27.185 --> 00:05:31.629
it might not be clear,
why did she make it 6 or whatever?

72
00:05:31.629 --> 00:05:34.464
And then you see it in the for
loops, you see it everywhere,

73
00:05:34.464 --> 00:05:36.810
the number 6 just scattered
all over the place.

74
00:05:36.810 --> 00:05:40.871
And if I needed to update this to 5 or
7, I gotta go all through the code,

75
00:05:40.871 --> 00:05:44.150
find it everywhere the number 6 appears,
right?

76
00:05:44.150 --> 00:05:45.960
Nightmare, all right?

77
00:05:45.960 --> 00:05:49.606
Now we're gonna use this
class called Random.

78
00:05:49.606 --> 00:05:55.162
It is a very useful class for
when you want to generate random things.

79
00:05:55.162 --> 00:05:57.030
So it's one of my favorite ones,

80
00:05:57.030 --> 00:05:59.712
especially when I'm writing games and
stuff.

81
00:05:59.712 --> 00:06:04.522
So Random, and we'll call the variable

82
00:06:04.522 --> 00:06:08.775
name random, too, = new Random.

83
00:06:10.932 --> 00:06:15.587
&gt;&gt; Angie Jones: So because Random is not
in our package, we need to import it.

84
00:06:15.587 --> 00:06:19.440
It comes from Java.util,
it's a built in Java class.

85
00:06:21.320 --> 00:06:25.633
And now I want to go through the array,
and

86
00:06:25.633 --> 00:06:30.080
I want to populate it with random numbers.

87
00:06:31.300 --> 00:06:36.690
Because the array holds multiple values,
this is a perfect use case to use a loop.

88
00:06:36.690 --> 00:06:41.163
I don't want to write code that says
put this in the first one, second one,

89
00:06:41.163 --> 00:06:45.008
third one, and then I'm basically
duplicating the same code.

90
00:06:45.008 --> 00:06:49.920
However many times this length is, I can
write the code one time within a loop.

91
00:06:49.920 --> 00:06:55.114
Because I know the number of times this
needs to execute, what's the best loop?

92
00:06:55.114 --> 00:06:57.207
&gt;&gt; Audience: For loop?
&gt;&gt; Angie Jones: For loop, very good.

93
00:06:57.207 --> 00:07:02.654
All right, so we're gonna say

94
00:07:02.654 --> 00:07:09.575
for(int i = 0, i &lt; LENGTH, right?

95
00:07:09.575 --> 00:07:12.670
Yes, and then i++.

96
00:07:15.734 --> 00:07:22.922
&gt;&gt; Angie Jones: All right,
inside of here, I want to go ahead.

97
00:07:22.922 --> 00:07:24.323
This is getting juicy.

98
00:07:24.323 --> 00:07:27.409
I want to go ahead and

99
00:07:27.409 --> 00:07:32.680
define int randomNumber, okay?

100
00:07:34.500 --> 00:07:40.710
And I'll actually say the randomNumber =,
and we can use that random method.

101
00:07:40.710 --> 00:07:45.145
And we can say nextInt,
inside of nextInt, notice there is,

102
00:07:45.145 --> 00:07:48.900
remember we talked about
overloaded methods?

103
00:07:48.900 --> 00:07:53.342
So there's nextInt that takes nothing,
it'll just give you a random integer.

104
00:07:53.342 --> 00:08:00.150
There's nextInt with a bound, so
I can say up until a certain thing.

105
00:08:00.150 --> 00:08:06.793
And then this next int, I'm not used
to origin, let's see what this does.

106
00:08:06.793 --> 00:08:10.660
Range, int origin,
is that like the initial number?

107
00:08:12.540 --> 00:08:15.685
So these little things
in Java are Java docs.

108
00:08:15.685 --> 00:08:19.308
So if you need to know anything
more about a method, usually

109
00:08:19.308 --> 00:08:24.236
the developer includes some Java docs that
let you know what the parameters are,

110
00:08:24.236 --> 00:08:26.642
what it returns and that sort of thing.

111
00:08:26.642 --> 00:08:30.370
So anyway, let's do nextInt, and

112
00:08:30.370 --> 00:08:35.714
we'll say that we want
the max number as the limit,

113
00:08:35.714 --> 00:08:39.835
right, the max ticket number.

114
00:08:39.835 --> 00:08:42.778
Now, I don't know, we can test it out,

115
00:08:42.778 --> 00:08:48.075
if that other overloaded method,
that third one, allows that origin.

116
00:08:48.075 --> 00:08:50.805
I don't know if that
means an initial number.

117
00:08:50.805 --> 00:08:55.804
If so, that would be great, because
zero is included in integer numbers, and

118
00:08:55.804 --> 00:08:57.705
we don't want 0.

119
00:08:57.705 --> 00:09:01.820
We want 1, so let's try that and
see if it works.

120
00:09:03.400 --> 00:09:06.670
Okay, maybe I can get to it now,
there we go.

121
00:09:06.670 --> 00:09:10.230
Origin, the least value that
can be returned, beautiful.

122
00:09:10.230 --> 00:09:12.310
Okay, that's exactly what we want.

123
00:09:12.310 --> 00:09:13.660
Okay, that's wonderful.

124
00:09:13.660 --> 00:09:19.805
So now we have this random number,
and we can add it to our array.

125
00:09:19.805 --> 00:09:25.210
So we can say ticket, which is the name
of the array, that's how you access it.

126
00:09:25.210 --> 00:09:28.060
And then we wanna give it an index.

127
00:09:28.060 --> 00:09:31.760
So we wanna say, whatever number.

128
00:09:31.760 --> 00:09:37.430
Since we're doing a loop,
i is the representation of the index.

129
00:09:37.430 --> 00:09:40.915
So i is beautiful because it starts at 0,
right?

130
00:09:40.915 --> 00:09:45.528
And arrays start at 0, so
we can just say ticket[i], and

131
00:09:45.528 --> 00:09:49.495
this will be whatever number
we're on in the loop,

132
00:09:49.495 --> 00:09:53.209
it'll add a random number to that slot,
okay?

133
00:09:53.209 --> 00:09:57.872
So we can say tickets[i] =

134
00:09:57.872 --> 00:10:03.125
the randomNumber, all right?

135
00:10:03.125 --> 00:10:08.636
And then outside of this loop, we can
just return the array, so return ticket.

136
00:10:11.043 --> 00:10:14.515
&gt;&gt; Angie Jones: So that's how you
would set a number or whatever,

137
00:10:14.515 --> 00:10:16.757
set an element within an array.

138
00:10:16.757 --> 00:10:22.130
Basically, you would need
to do the sub in an index.

139
00:10:22.130 --> 00:10:26.703
Now, there's one problem with this,
because we're doing random numbers,

140
00:10:26.703 --> 00:10:30.390
it has the possibility of doing
a duplicate number, right?

141
00:10:30.390 --> 00:10:34.234
I don't know about you, but I'd be
pretty upset if I got a quick pick lotto

142
00:10:34.234 --> 00:10:37.880
ticket and there's two 25s on there or
something, right?

143
00:10:37.880 --> 00:10:39.350
No chance of winning.

144
00:10:39.350 --> 00:10:44.159
So we need to add a little bit more logic
here that makes sure that the number

145
00:10:44.159 --> 00:10:47.730
does not already exist within the array.

146
00:10:47.730 --> 00:10:51.170
So this is a good exercise for
us to see how do I read.

147
00:10:51.170 --> 00:10:54.827
We just saw how to write to an array,
how do I read from an array or

148
00:10:54.827 --> 00:10:57.520
search an array,
which is a very common task.

149
00:10:57.520 --> 00:11:00.730
You wanna know if something
already exists within the array.

150
00:11:00.730 --> 00:11:05.230
All right, so
we're gonna refactor this a little bit.

151
00:11:06.490 --> 00:11:11.622
And let's go ahead, and remember, this is,

152
00:11:11.622 --> 00:11:18.790
I wanna do another loop that's
gonna read from the array.

153
00:11:18.790 --> 00:11:20.030
I'm gonna do it inside of this loop.

154
00:11:20.030 --> 00:11:24.037
So now we got a nested loop going on,
right?

155
00:11:24.037 --> 00:11:28.000
So I'm gonna say int random number,
I'm just gonna leave it right there.

156
00:11:28.000 --> 00:11:29.699
And before I add a random number to it,

157
00:11:29.699 --> 00:11:33.200
I wanna make sure that that
thing doesn't already exist.

158
00:11:33.200 --> 00:11:36.773
So we're gonna do a do while,
let's do it one time.

159
00:11:36.773 --> 00:11:40.370
Look at us using do while.

160
00:11:41.992 --> 00:11:43.078
&gt;&gt; Angie Jones: All right?

161
00:11:43.078 --> 00:11:47.828
So I'm gonna do while this
number doesn't already exist,

162
00:11:47.828 --> 00:11:52.010
and so my condition for
while would be, basically,

163
00:11:52.010 --> 00:11:57.060
search the ticket, give me a boolean
value if it exists or not.

164
00:11:57.060 --> 00:11:59.327
So I'm gonna make another method here.

165
00:11:59.327 --> 00:12:04.683
And we'll say public
static boolean search,

166
00:12:04.683 --> 00:12:07.841
this will take the array and

167
00:12:07.841 --> 00:12:13.483
then tell me the number
you want me to search for.

168
00:12:22.011 --> 00:12:27.449
&gt;&gt; Angie Jones: Now, inside of here,
someone asked about for

169
00:12:27.449 --> 00:12:34.014
loops and how that was written and
how verbose that was.

170
00:12:34.014 --> 00:12:37.182
There's another sort of for

171
00:12:37.182 --> 00:12:41.934
loop that's called an enhanced for loop,

172
00:12:41.934 --> 00:12:46.818
and it's perfect for
dealing with arrays or

173
00:12:46.818 --> 00:12:52.220
collections of objects and
things like that.

174
00:12:52.220 --> 00:12:54.500
So let's use it now.

175
00:12:56.550 --> 00:13:00.333
We could have definitely used the other
loop that we already know about, the for

176
00:13:00.333 --> 00:13:03.960
loop that we already know about,
but this is a shorter way to do it.

177
00:13:03.960 --> 00:13:08.467
So inside of for, instead of
the three little mini statements,

178
00:13:08.467 --> 00:13:13.880
you essentially just declare whatever
the individual value will be.

179
00:13:13.880 --> 00:13:17.365
So we could say int value:, and

180
00:13:17.365 --> 00:13:22.020
then you give it the array name, so array.

181
00:13:22.020 --> 00:13:26.323
So what this does is says,
take the element,

182
00:13:26.323 --> 00:13:33.573
whatever element we're on from array,
that will be like index 0 at first,

183
00:13:33.573 --> 00:13:37.905
assign it to this variable
called int value.

184
00:13:37.905 --> 00:13:41.952
Do whatever you wanna do,
come back to the loop,

185
00:13:41.952 --> 00:13:46.790
it'll do the second value in array,
put that into value,

186
00:13:46.790 --> 00:13:50.971
third, fourth, fifth, whatever, all right?

187
00:13:50.971 --> 00:13:58.331
So, I'm gonna say, if the value equals,

188
00:13:58.331 --> 00:14:05.507
we used that double equal sign,
look at this,

189
00:14:05.507 --> 00:14:11.212
numberTosearchFor, return true.

190
00:14:13.387 --> 00:14:17.782
&gt;&gt; Angie Jones: Do I do a else
return false right here, anyone?

191
00:14:17.782 --> 00:14:19.646
Why wouldn't I do that?

192
00:14:22.201 --> 00:14:23.776
&gt;&gt; Audience: Because we wanna
keep going through our for loop.

193
00:14:23.776 --> 00:14:26.736
&gt;&gt; Angie Jones: I wanna keep
going through the for loops, so

194
00:14:26.736 --> 00:14:29.861
be very careful when
you're inside of loops.

195
00:14:29.861 --> 00:14:34.540
If I return outside of that loop,
that's it, it won't check the rest.

196
00:14:34.540 --> 00:14:38.278
So this would check the very first
element, say that's not equal, no,

197
00:14:38.278 --> 00:14:39.761
it's not in there, [LAUGH].

198
00:14:39.761 --> 00:14:43.462
But it didn't look all the way through,
so we got to just kind of let it go.

199
00:14:43.462 --> 00:14:45.369
If it does happen to find it, cool, break,

200
00:14:45.369 --> 00:14:48.260
no need to look through the rest
of the elements of the array.

201
00:14:48.260 --> 00:14:49.600
But if not, all right.

202
00:14:49.600 --> 00:14:52.540
Finish going through all
of them once you are done.

203
00:14:52.540 --> 00:14:56.327
If I get to this point and
I have not already returned true,

204
00:14:56.327 --> 00:14:58.970
it's safe to go ahead and return false.

205
00:15:01.560 --> 00:15:05.462
Because if it was there, I would have
already left this method anyway,

206
00:15:05.462 --> 00:15:06.650
all right?

207
00:15:06.650 --> 00:15:10.433
So that's our search, so
back to our while condition.

208
00:15:10.433 --> 00:15:14.693
We're gonna say while(search(, and

209
00:15:14.693 --> 00:15:20.080
we'll give it our array
which was called ticket and

210
00:15:20.080 --> 00:15:23.969
the number that we wanna search for.

211
00:15:23.969 --> 00:15:26.120
I guess we can assign
this to a random number.

212
00:15:27.200 --> 00:15:28.468
And we'll say random number.

213
00:15:32.098 --> 00:15:32.891
&gt;&gt; Angie Jones: Okay.

214
00:15:39.529 --> 00:15:42.410
&gt;&gt; Angie Jones: So,
if we get outside of this loop,

215
00:15:42.410 --> 00:15:45.780
that means the number is unique, right?

216
00:15:45.780 --> 00:15:51.202
Otherwise if it generates the same
number and this was equal to true,

217
00:15:51.202 --> 00:15:56.261
it will go again, generate another
number until that is false.

218
00:15:56.261 --> 00:16:01.475
Once it's false, we come outside of that,
and now it safe to add it to the ticket.

219
00:16:01.475 --> 00:16:04.534
We got our numbers, now,

220
00:16:04.534 --> 00:16:09.274
we wanna go ahead and print them, okay?

221
00:16:09.274 --> 00:16:15.000
So back to our main method,
we're going to print the ticket.

222
00:16:15.000 --> 00:16:19.410
So we'll call a method call,
print ticket, we'll pass in the array.

223
00:16:19.410 --> 00:16:23.300
We haven't written print tickets yet,
so let's go ahead and do that.

224
00:16:23.300 --> 00:16:25.508
Y'all got this much?

225
00:16:25.508 --> 00:16:26.306
&gt;&gt; Audience: So I have a question?

226
00:16:26.306 --> 00:16:27.062
&gt;&gt; Angie Jones: Sure.

227
00:16:27.062 --> 00:16:30.581
&gt;&gt; Audience: On line number 16 we
already defined that that max array for

228
00:16:30.581 --> 00:16:34.660
the ticket is LENGTH,
we defined that with that constant.

229
00:16:34.660 --> 00:16:37.660
So couldn't you have done enhanced for
loop on line 19 as well?

230
00:16:37.660 --> 00:16:40.800
Cuz you already said what
the length was for the array?

231
00:16:40.800 --> 00:16:42.350
&gt;&gt; Angie Jones: Except I
don't have anything.

232
00:16:42.350 --> 00:16:44.810
I'm glad you asked that,
I meant to point this out.

233
00:16:44.810 --> 00:16:48.580
I don't have anything inside
the array yet, right?

234
00:16:48.580 --> 00:16:52.329
So it only makes sense to use the enhanced
for loop when you actually have

235
00:16:52.329 --> 00:16:56.385
values inside, because I'm actually
assigning it to a variable.

236
00:16:56.385 --> 00:16:59.865
So on the first run,
this equals nothing, right?

237
00:16:59.865 --> 00:17:01.856
Nothing is inside of there, so

238
00:17:01.856 --> 00:17:05.923
it wouldn't really make sense
to do an enhanced for loop here.

239
00:17:07.951 --> 00:17:11.180
&gt;&gt; Angie Jones: And
I need this incrementer,

240
00:17:11.180 --> 00:17:16.482
cuz I'm using it on 26
to actually set a value.

241
00:17:16.482 --> 00:17:19.184
So this i is important right here.

242
00:17:22.227 --> 00:17:26.191
&gt;&gt; Angie Jones: All right, so
print ticket, let's go ahead and

243
00:17:26.191 --> 00:17:28.810
write a method to print ticket.

244
00:17:28.810 --> 00:17:34.040
So this one will be public
static void printTicket.

245
00:17:35.260 --> 00:17:38.591
It takes an array of integers.

246
00:17:42.037 --> 00:17:45.959
&gt;&gt; Angie Jones: And now,
I want to sort the array so

247
00:17:45.959 --> 00:17:51.114
that all of the numbers are in order,
right?

248
00:17:51.114 --> 00:17:55.924
So when you get your lottery ticket,
you have the numbers in, what's that,

249
00:17:55.924 --> 00:17:57.112
ascending order?

250
00:17:57.112 --> 00:18:00.913
So I wanna have that for
my beautiful lottery ticket,

251
00:18:00.913 --> 00:18:03.285
there are convenience methods.

252
00:18:03.285 --> 00:18:08.515
So if you use the Arrays class,
this is where static comes in again.

253
00:18:08.515 --> 00:18:13.739
I don't want to instantiate the Arrays
class and all of that, I can

254
00:18:13.739 --> 00:18:19.820
just say Arrays., and they have a list
of these static methods for me to use.

255
00:18:19.820 --> 00:18:24.141
So I don't have to create a new
Arrays object and all of that stuff.

256
00:18:24.141 --> 00:18:28.648
They don't need any data from me other
than the array, I pass that in, and

257
00:18:28.648 --> 00:18:30.180
we're good to go.

258
00:18:30.180 --> 00:18:33.302
So notice all of these
nice convenience methods,

259
00:18:33.302 --> 00:18:36.030
they can do a binary search on the array.

260
00:18:36.030 --> 00:18:39.470
So when people ask you in your interviews,
how would you do a binary search?

261
00:18:39.470 --> 00:18:45.824
Arrays.binarySearch, [LAUGH] that usually
doesn't go over well, don't do that.

262
00:18:45.824 --> 00:18:51.841
[LAUGH] But you can compare, you can do
all sorts of things, one of which is sort.

263
00:18:51.841 --> 00:18:55.160
So I can sort this array.

264
00:18:55.160 --> 00:18:58.190
Arrays does need to be imported.

265
00:19:00.120 --> 00:19:02.794
And then I just pass it the array, and

266
00:19:02.794 --> 00:19:07.270
now this will be in ascending order for
me, all right?

267
00:19:07.270 --> 00:19:08.940
Now I want to print the tickets.

268
00:19:10.370 --> 00:19:15.470
Again, in order to print,
I'm gonna need a loop, right?

269
00:19:15.470 --> 00:19:20.304
So I'm gonna have to go and basically
go through each element of the array,

270
00:19:20.304 --> 00:19:21.620
print them all out.

271
00:19:21.620 --> 00:19:26.070
Because the array is populated,
I can use the enhanced for loop.

272
00:19:26.070 --> 00:19:29.276
If you don't wanna use it,
you're not comfortable with it,

273
00:19:29.276 --> 00:19:33.731
you just don't want to, you can always use
the other regular for loop as well, okay?

274
00:19:33.731 --> 00:19:35.879
So which one y'all wanna use?

275
00:19:35.879 --> 00:19:37.188
&gt;&gt; Audience: Enhanced.

276
00:19:37.188 --> 00:19:39.044
&gt;&gt; Angie Jones: All right.

277
00:19:39.044 --> 00:19:43.518
Okay, so we'll say int value,

278
00:19:43.518 --> 00:19:47.330
I'll just call it number,

279
00:19:47.330 --> 00:19:51.490
int number, and then array.

280
00:19:51.490 --> 00:19:55.332
And this time, I'm not gonna println, so

281
00:19:55.332 --> 00:19:59.295
println prints a new
line with a line break.

282
00:19:59.295 --> 00:20:01.790
I want all of the numbers
to be on the same line.

283
00:20:01.790 --> 00:20:06.820
So I'm just going to print,
print stays on the same line.

284
00:20:06.820 --> 00:20:10.947
So I wanna say print, man,
you might need the other array.

285
00:20:10.947 --> 00:20:14.990
Let me see, cuz I need the index,
well, I don't,

286
00:20:14.990 --> 00:20:19.518
actually, since I have the value,
I could just do that.

287
00:20:21.195 --> 00:20:23.131
&gt;&gt; Angie Jones: Okay, I can just do this.

288
00:20:23.131 --> 00:20:28.330
I thought I needed to do the index,
ticket[i], right?

289
00:20:28.330 --> 00:20:33.130
But that's what's stored inside of number,
whatever ticket[i] was.

290
00:20:34.540 --> 00:20:39.642
So I can just say number, and then I'll
put a little something in between them,

291
00:20:39.642 --> 00:20:43.110
so the numbers aren't
all jumbled together.

292
00:20:43.110 --> 00:20:47.799
Let's just do a space and
a pipe, for example, okay, so

293
00:20:47.799 --> 00:20:49.962
I think that should work.

294
00:20:49.962 --> 00:20:52.415
&gt;&gt; Audience: What is the pipe doing there?

295
00:20:52.415 --> 00:20:55.361
&gt;&gt; Angie Jones: It's just gonna put
a pipe in between the numbers so

296
00:20:55.361 --> 00:20:58.306
that they aren't all just boom,
boom, boom, and

297
00:20:58.306 --> 00:20:59.426
one big ugly-
&gt;&gt; Audience: Okay, so

298
00:20:59.426 --> 00:21:01.556
it's not the logical operator pipe,
it's just a character, okay.

299
00:21:01.556 --> 00:21:06.188
&gt;&gt; Angie Jones: No, it's a piece of text.

300
00:21:06.188 --> 00:21:11.604
All right, so I think that's our lottery
ticket, wanna run it, all right.

301
00:21:19.140 --> 00:21:23.669
&gt;&gt; Angie Jones: All right,
and there I have it, 7,

302
00:21:23.669 --> 00:21:28.492
17, 44, 55, 56, and 68,

303
00:21:28.492 --> 00:21:36.260
six random numbers printed in
ascending order, that was fun.

