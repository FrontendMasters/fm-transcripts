WEBVTT

1
00:00:00.062 --> 00:00:03.796
So now we're gonna write
a backwards string.

2
00:00:03.796 --> 00:00:06.673
Write a method that prints
a given string backwards.

3
00:00:06.673 --> 00:00:11.378
For example, if given pots,
it prints stop.

4
00:00:13.537 --> 00:00:18.200
All right, so
I'm gonna comment this one, and

5
00:00:18.200 --> 00:00:21.471
we're gonna make another call.

6
00:00:21.471 --> 00:00:26.639
This one will be called reverseString,

7
00:00:26.639 --> 00:00:30.135
we can give it some string.

8
00:00:30.135 --> 00:00:36.080
We haven't written Hello World yet,
let's do it.

9
00:00:40.064 --> 00:00:43.386
All right, so we'll say,

10
00:00:43.386 --> 00:00:47.870
public static void reverseString.

11
00:00:47.870 --> 00:00:50.563
This will take a string.

12
00:00:54.383 --> 00:00:58.803
Okay, So here,

13
00:00:58.803 --> 00:01:04.037
I need to loop through this string.

14
00:01:04.037 --> 00:01:08.802
Now, a string, again,
is a sequence of characters.

15
00:01:08.802 --> 00:01:13.295
So really, you can think of a string,
I hate to say this,

16
00:01:13.295 --> 00:01:17.709
[LAUGH] cuz someone's gonna say,
well, technically.

17
00:01:17.709 --> 00:01:23.321
All right, so you can think of
a string as an array of chars.

18
00:01:23.321 --> 00:01:26.703
Remember we talked about this
individual things, right?

19
00:01:26.703 --> 00:01:33.567
So it's a sequence, and you can access
elements of an array as if it wasn't,

20
00:01:33.567 --> 00:01:39.180
I mean, elements of a string as
if it were an array, all right?

21
00:01:39.180 --> 00:01:44.854
So I can say,
what's the third element of the string?

22
00:01:44.854 --> 00:01:49.895
And it'll give me
the character with an index

23
00:01:49.895 --> 00:01:54.678
of two cuz that would be the third, right?

24
00:01:54.678 --> 00:02:00.182
Yes, all right, so
we're going to use a for loop.

25
00:02:00.182 --> 00:02:04.773
I'm gonna use an old school one
cuz I wanna show you the i and

26
00:02:04.773 --> 00:02:08.065
going inside of the array of characters.

27
00:02:08.065 --> 00:02:13.706
So this time, we're not gonna start at
0 cuz we need to reverse the string.

28
00:02:13.706 --> 00:02:18.241
So we're gonna start at
the back of the string, okay?

29
00:02:18.241 --> 00:02:24.537
So in order to do that,
we can say, text.length.

30
00:02:24.537 --> 00:02:27.921
This will give the length of the string.

31
00:02:27.921 --> 00:02:30.056
How many characters are in this string?

32
00:02:30.056 --> 00:02:31.840
That's where I wanna start.

33
00:02:33.504 --> 00:02:39.089
Now, Indices start at 0.

34
00:02:39.089 --> 00:02:43.943
So if I say .length,
if the word was Hello World,

35
00:02:43.943 --> 00:02:46.839
how many characters is that?

36
00:02:46.839 --> 00:02:52.389
1, 2, 3, 4, 5, 6, 7, 8, 9,
10, 11 is what I'm counting.

37
00:02:52.389 --> 00:02:54.381
Length would be 11.

38
00:02:54.381 --> 00:02:59.039
Is there an array index of 11 for this?

39
00:03:01.919 --> 00:03:05.771
I see some head nodding no, shaking no.

40
00:03:05.771 --> 00:03:10.955
&gt;&gt; You need plus 1 to find the boundary,
it's just outside of the array, correct?

41
00:03:10.955 --> 00:03:14.531
&gt;&gt; Okay, so 11 would be the length.

42
00:03:14.531 --> 00:03:17.827
That means what is the last index?

43
00:03:17.827 --> 00:03:19.131
&gt;&gt; 10.
&gt;&gt; 10 is the last index.

44
00:03:19.131 --> 00:03:23.559
So I wanna do length()- 1, all right?

45
00:03:23.559 --> 00:03:27.457
And that'll give me that very
last element, all right?

46
00:03:27.457 --> 00:03:32.594
And then I wanna say,
you wanna keep doing this,

47
00:03:32.594 --> 00:03:36.612
wow, i is greater than or equal to 0.

48
00:03:36.612 --> 00:03:40.436
Keep looping cuz we haven't
gotten to the first element yet.

49
00:03:40.436 --> 00:03:45.299
And then I wanna say, not i++,

50
00:03:45.299 --> 00:03:49.824
i-- cuz I want to decrement.

51
00:03:49.824 --> 00:03:55.583
i-- is the same as i = i- 1.

52
00:04:01.260 --> 00:04:05.831
Okay, any questions on
that loop declaration?

53
00:04:07.094 --> 00:04:11.351
All right, now that we're in there,
we're going backwards here.

54
00:04:11.351 --> 00:04:13.474
Let's just print.

55
00:04:14.774 --> 00:04:18.100
And we can say text..

56
00:04:18.100 --> 00:04:23.162
There is a convenience
method on the string

57
00:04:23.162 --> 00:04:30.058
object called charAt that takes
an integer for the index.

58
00:04:30.058 --> 00:04:35.124
That's why I wanted to use, This for

59
00:04:35.124 --> 00:04:38.082
loop with the incrementer for
a number of reasons.

60
00:04:38.082 --> 00:04:43.244
One, I need to go backwards,
two, I wanna call the charAt,

61
00:04:43.244 --> 00:04:46.799
which takes an int for the index, right?

62
00:04:46.799 --> 00:04:50.284
And that should print the string
backwards, let's test it out.

63
00:04:54.274 --> 00:04:59.298
I have it all on different lines,

64
00:04:59.298 --> 00:05:07.920
I'm just gonna do a print
instead of println, and boom.

65
00:05:11.200 --> 00:05:12.651
Questions?

66
00:05:16.596 --> 00:05:21.030
&gt;&gt; Could we have used bracket
notation to get the charAt?

67
00:05:21.030 --> 00:05:21.966
&gt;&gt; Yeah, you could.

68
00:05:21.966 --> 00:05:28.586
So if I wanted to do, let me see
if I can just print it like that.

69
00:05:28.586 --> 00:05:34.255
I might be able to just say text[i],
does that work?

70
00:05:34.255 --> 00:05:37.180
No, wait type.

71
00:05:37.180 --> 00:05:39.991
Cuz yeah, yeah, it's not that.

72
00:05:39.991 --> 00:05:43.831
So no,
you couldn't just use the brackets on it

73
00:05:43.831 --> 00:05:48.442
since it is a string object and
not technically an array.

74
00:05:48.442 --> 00:05:52.552
So the charAt is the closest
you can get there.

75
00:05:55.875 --> 00:05:57.506
All right, any other questions?

76
00:06:01.983 --> 00:06:07.742
&gt;&gt; So this method reverses and just
prints it out, but what if you wanted to,

77
00:06:10.306 --> 00:06:13.624
Manually or
manually change the values of the array so

78
00:06:13.624 --> 00:06:18.726
that way they're actually reversed within
the array itself if that makes sense?

79
00:06:18.726 --> 00:06:21.254
&gt;&gt; I am so glad you asked that.

80
00:06:23.406 --> 00:06:29.506
So you cannot change [LAUGH] values and
things within the string itself.

81
00:06:29.506 --> 00:06:35.858
Because as the question came up a little
while ago, strings are immutable.

82
00:06:35.858 --> 00:06:44.226
What that means is that they
cannot be modified, okay?

83
00:06:44.226 --> 00:06:48.805
So we did things like,
we basically read the string.

84
00:06:48.805 --> 00:06:54.246
Yeah, when we print stuff, we append a
little something to it, things like that.

85
00:06:54.246 --> 00:06:58.926
But as far as deleting something,
a character from a string, or

86
00:06:58.926 --> 00:07:01.442
inserting something somewhere,

87
00:07:01.442 --> 00:07:06.050
you are not able to do that sort
of thing with the string object.

88
00:07:06.050 --> 00:07:09.298
Therefore, we have a string builder class.

89
00:07:09.298 --> 00:07:13.086
The string builder creates
a mutable version of

90
00:07:13.086 --> 00:07:17.929
the string that you then can
manipulate however you want to.

