WEBVTT

1
00:00:00.000 --> 00:00:01.464
All right, great.

2
00:00:01.464 --> 00:00:07.453
Now I wanna talk about overloading
methods that we've inherited.

3
00:00:07.453 --> 00:00:10.512
So we talked about overloading before.

4
00:00:10.512 --> 00:00:16.039
As a refresher,
overloading is where you have multiple

5
00:00:16.039 --> 00:00:21.447
methods within the same class
that have the same name,

6
00:00:21.447 --> 00:00:25.577
but different parameter lists, right?

7
00:00:25.577 --> 00:00:32.829
Okay, so now that we're talking about
inhebitance, our scope has grown.

8
00:00:32.829 --> 00:00:39.058
So you can have overloaded methods
that are not in the same class,

9
00:00:39.058 --> 00:00:43.711
but are between a parent class and
a superclass.

10
00:00:43.711 --> 00:00:48.330
So say, for example,
if I'm a subclass, and I've inherited

11
00:00:48.330 --> 00:00:53.139
a method from my superclass, and
I want to overload that method.

12
00:00:53.139 --> 00:00:57.710
Then that means my superclass
has a method named x, and I,

13
00:00:57.710 --> 00:01:01.267
the subclass, have a method name x, right?

14
00:01:01.267 --> 00:01:05.345
I can overload that,
I would need to do a different signature.

15
00:01:05.345 --> 00:01:09.207
Otherwise, there would be a conflict, or

16
00:01:09.207 --> 00:01:14.691
I would be overriding the one
that's from my parent, okay?

17
00:01:14.691 --> 00:01:18.518
So let's go ahead and
update the Rectangle and

18
00:01:18.518 --> 00:01:23.736
Square classes to demonstrate
how we might overload a method.

19
00:01:23.736 --> 00:01:27.341
&gt;&gt; So it's an override if you're
just changing the parameters or

20
00:01:27.341 --> 00:01:29.117
changing one specific thing?

21
00:01:29.117 --> 00:01:32.394
It's an overload if you're
changing the signature altogether?

22
00:01:32.394 --> 00:01:37.379
&gt;&gt; No, override, if you keep
the signature exactly the same,

23
00:01:37.379 --> 00:01:43.365
even the parameters, and you're only
changing the body of the method.

24
00:01:43.365 --> 00:01:50.301
And then overload is when you change the
signature, you have a totally new method.

25
00:01:50.301 --> 00:01:55.503
It has the same name, but
the signature list is different,

26
00:01:55.503 --> 00:01:59.472
and hopefully the body
is different as well.

27
00:01:59.472 --> 00:02:03.428
Okay, so we're gonna create
a print method in a superclass,

28
00:02:03.428 --> 00:02:05.947
we'll overload that in the subclass.

29
00:02:09.703 --> 00:02:13.001
So let's go to Square.

30
00:02:15.531 --> 00:02:20.204
And in Square, we will,

31
00:02:23.405 --> 00:02:25.104
Add a print method.

32
00:02:25.104 --> 00:02:29.616
So we have this override, but
now we're gonna do an overload.

33
00:02:29.616 --> 00:02:34.628
So we'll say public void print, and,

34
00:02:35.974 --> 00:02:42.407
This one will take a string.

35
00:02:47.094 --> 00:02:50.424
I'm sorry, I wanna start with
the Rectangle, since that's the parent.

36
00:02:50.424 --> 00:02:55.390
All right, so let's go ahead and
make a print in Rectangle first.

37
00:02:58.375 --> 00:03:05.665
This one won't take any arguments, and
we'll just print out, I am a rectangle.

38
00:03:13.414 --> 00:03:18.449
And then in the subclass Square,
we'll also have a print method.

39
00:03:18.449 --> 00:03:21.769
So this one will take a string.

40
00:03:21.769 --> 00:03:29.275
So we have a method in the super
called print, takes no arguments.

41
00:03:29.275 --> 00:03:34.092
We have a method in the subclass that's
called print, it takes a string.

42
00:03:34.092 --> 00:03:37.224
So that's how you've overloaded those.

43
00:03:37.224 --> 00:03:41.760
And we'll go ahead and
just print out, I am a, and

44
00:03:41.760 --> 00:03:45.432
then whatever it is that they passed in.

45
00:03:45.432 --> 00:03:51.740
Okay, after you type this,
we'll go ahead and

46
00:03:51.740 --> 00:03:57.583
look in inheritance tester and
test it out.

47
00:03:59.261 --> 00:04:04.686
Ready, okay, in inheritance,

48
00:04:04.686 --> 00:04:10.498
we are going to create a Rectangle,

49
00:04:10.498 --> 00:04:14.392
let's say Rectangle,

50
00:04:20.056 --> 00:04:22.557
And we'll say rectangle.print.

51
00:04:24.928 --> 00:04:30.415
So notice I only have one print method
available on the Rectangle object,

52
00:04:30.415 --> 00:04:33.351
because that is the superclass, yes?

53
00:04:33.351 --> 00:04:37.961
And then if I were to say square.print,

54
00:04:37.961 --> 00:04:42.309
notice I have two print methods here.

55
00:04:42.309 --> 00:04:47.331
The one that I inherited from
my parent that takes nothing,

56
00:04:47.331 --> 00:04:53.266
and the one that I've explicitly
defined myself that takes a string.

57
00:04:58.274 --> 00:05:03.717
So we'll call this one,
and we'll say square.

58
00:05:07.161 --> 00:05:11.901
Okay, and let's go ahead and print out,

59
00:05:11.901 --> 00:05:16.378
we'll print the Rectangle one first.

60
00:05:18.718 --> 00:05:23.094
So yep, shows that I'm a rectangle, and

61
00:05:23.094 --> 00:05:28.852
then the square one, sorry,
shows that I am a square.

62
00:05:28.852 --> 00:05:32.822
&gt;&gt; So
the constructor always needs to be public?

63
00:05:34.805 --> 00:05:40.913
&gt;&gt; Good question, so
the constructor needs to be accessible,

64
00:05:40.913 --> 00:05:44.877
so it doesn't have to be public per se.

65
00:05:44.877 --> 00:05:50.040
But if it's a class that's within the same
package that's inherited from it,

66
00:05:50.040 --> 00:05:54.289
then it needs to have access, so
it could be public or protected.

67
00:05:54.289 --> 00:05:59.577
If it were private, then the inherited
class would not be able to see it,

68
00:05:59.577 --> 00:06:02.796
and therefore wouldn't be able to call it.

69
00:06:02.796 --> 00:06:07.119
So if you think about the purpose
of a constructor, again,

70
00:06:07.119 --> 00:06:10.675
it's to set up some initial state for
an object.

71
00:06:10.675 --> 00:06:13.787
So there's only certain
unique cases where it

72
00:06:13.787 --> 00:06:17.071
even makes sense to have
a private constructor.

73
00:06:17.071 --> 00:06:21.556
It's where you wanna maybe expose
a different constructor to

74
00:06:21.556 --> 00:06:23.893
anyone who's using the class.

75
00:06:23.893 --> 00:06:28.732
And then you call into your
private constructor yourself

76
00:06:28.732 --> 00:06:32.773
to do additional setup or
something like that.

77
00:06:34.312 --> 00:06:37.225
Any other questions on overloading?

78
00:06:37.225 --> 00:06:43.599
&gt;&gt; So we're overloading methods that
happen to be on our parent class?

79
00:06:43.599 --> 00:06:47.823
But there isn't anything
inherently different about this

80
00:06:47.823 --> 00:06:52.820
overloading versus overloading
methods that were on the same class.

81
00:06:52.820 --> 00:06:58.989
&gt;&gt; Right, very good, it's just
the scope is broader now, that's it.

82
00:06:58.989 --> 00:07:03.540
Whereas before we would have had
the other print right here in

83
00:07:03.540 --> 00:07:05.961
the same class that you can see.

84
00:07:05.961 --> 00:07:09.634
So it's kinda invisible, but
it's still there in the scope.

