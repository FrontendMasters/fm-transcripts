WEBVTT

1
00:00:00.029 --> 00:00:03.764
So this next chapter is on exceptions, and

2
00:00:03.764 --> 00:00:08.342
an exception is an event
that occurs due to an error.

3
00:00:08.342 --> 00:00:13.218
So we've run a few programs and
we try some really wild things and

4
00:00:13.218 --> 00:00:16.116
I told you all that's going to crash.

5
00:00:16.116 --> 00:00:19.316
Those crashes are called exceptions.

6
00:00:19.316 --> 00:00:23.351
They disrupt the normal
flow of the program,

7
00:00:23.351 --> 00:00:27.713
everything halts, and
you get an error, okay?

8
00:00:27.713 --> 00:00:34.749
With exceptions like this one,
this code compiles, right?

9
00:00:34.749 --> 00:00:37.973
There are no errors,
there are no warnings.

10
00:00:37.973 --> 00:00:44.217
However, if we were to run this, we would
get an error when the loop attempts

11
00:00:44.217 --> 00:00:50.475
to access index three of this array
because there is no index three, right?

12
00:00:50.475 --> 00:00:53.518
I have 0, 1, and 2 in this array.

13
00:00:53.518 --> 00:01:00.584
This is saying while i is less than 4, so
when it tries to do when i is equal to 3,

14
00:01:00.584 --> 00:01:05.646
an exception will be thrown,
and the specific exception

15
00:01:05.646 --> 00:01:11.032
would be an
ArrayIndexOutOfBoundsException, all right?

16
00:01:11.032 --> 00:01:17.067
The program would crash,
it would not continue running after that.

17
00:01:17.067 --> 00:01:21.764
So it halts the execution of the program.

18
00:01:21.764 --> 00:01:28.607
So we're going to create a new program
where we're gonna handle some exceptions

19
00:01:28.607 --> 00:01:35.062
within our code versus letting them
just interrupt the flow of the program.

20
00:01:35.062 --> 00:01:39.205
And in this program,
we're gonna create a new file.

21
00:01:39.205 --> 00:01:44.574
So this will also give us a little
dabbling into working with external

22
00:01:44.574 --> 00:01:51.166
resources, and we're gonna handle any of
the exceptions that it may throw, okay?

23
00:01:51.166 --> 00:01:57.415
So in IntelliJ, [LAUGH] we're
going to create a new package,

24
00:01:57.415 --> 00:02:00.977
and we'll call this exemptions.

25
00:02:05.547 --> 00:02:08.452
Within exception,
let's create a new class,

26
00:02:08.452 --> 00:02:11.223
and we'll just call it ExceptionHandling.

27
00:02:16.079 --> 00:02:17.347
Let's create our main.

28
00:02:21.691 --> 00:02:25.147
I'm just gonna do everything in
here if you don't mind, all right?

29
00:02:25.147 --> 00:02:27.692
Okay, so we got enough going on.

30
00:02:27.692 --> 00:02:31.933
[LAUGH] So we're gonna create a, well,

31
00:02:31.933 --> 00:02:36.051
we're gonna try to create a new file.

32
00:02:36.051 --> 00:02:40.713
In order to make a file,
we are gonna use the file class as

33
00:02:40.713 --> 00:02:44.697
provided to us by Java
in the java.io package.

34
00:02:44.697 --> 00:02:49.605
We'll name this file,
and we'll say new File.

35
00:02:49.605 --> 00:02:53.245
So this is essentially
creating a file object,

36
00:02:53.245 --> 00:02:56.157
not an actual file on the file system.

37
00:02:56.157 --> 00:02:57.892
That makes sense.

38
00:02:57.892 --> 00:03:04.099
But you can point it to the path name
where the file exists on the system.

39
00:03:04.099 --> 00:03:06.326
Let's give it something
that does not exist,

40
00:03:06.326 --> 00:03:09.480
because that's the kinda stuff
that throws exceptions, okay?

41
00:03:09.480 --> 00:03:13.268
So we're gonna say, all right,

42
00:03:13.268 --> 00:03:19.087
what about look inside of
this resources folder for

43
00:03:19.087 --> 00:03:23.027
a file called nonexistent.txt.

44
00:03:27.370 --> 00:03:28.414
All right, now, and

45
00:03:28.414 --> 00:03:32.650
if we wanted to create this, it's okay
that this file doesn't exist, that's fine.

46
00:03:32.650 --> 00:03:36.546
We could use the file object
to actually create a new file.

47
00:03:36.546 --> 00:03:38.879
So there's this method
called createNewFile.

48
00:03:45.014 --> 00:03:48.875
And notice we have an error right here.

49
00:03:48.875 --> 00:03:53.422
What this error says is
that there's an unhandled

50
00:03:53.422 --> 00:03:57.654
exception called a java.io.IOException.

51
00:03:57.654 --> 00:04:00.794
So it is already anticipating that, hey,

52
00:04:00.794 --> 00:04:04.385
this method could possibly
throw an exception.

53
00:04:04.385 --> 00:04:10.560
If you're gonna call this method, you got
to handle the exception in your code.

54
00:04:10.560 --> 00:04:13.347
So there's a couple of ways
that you can handle it.

55
00:04:13.347 --> 00:04:17.240
One way is by using a try-catch block.

56
00:04:17.240 --> 00:04:21.649
So you try something that has
the potential of throwing an exception.

57
00:04:21.649 --> 00:04:26.541
If that exception is thrown,
you use a catch block to catch it and

58
00:04:26.541 --> 00:04:28.716
kinda basically mitigate or

59
00:04:28.716 --> 00:04:34.616
at least end the program gracefully
without just an exception being thrown.

60
00:04:34.616 --> 00:04:40.704
So how we'll do this is by writing
the word try and a set of curly braces,

61
00:04:40.704 --> 00:04:47.405
and then anything that you want to try
that might possibly throw an exception,

62
00:04:47.405 --> 00:04:51.388
you will add it inside of the try block,
okay?

63
00:04:51.388 --> 00:04:56.868
After try is where we would
write the catch block.

64
00:04:56.868 --> 00:05:02.251
When you write catch, you need a set
of parentheses and inside of here,

65
00:05:02.251 --> 00:05:06.571
you specify which exception
that you are going to catch.

66
00:05:06.571 --> 00:05:10.122
So this was throwing an IOException.

67
00:05:10.122 --> 00:05:12.592
That's the exception
that I'd like to catch.

68
00:05:12.592 --> 00:05:13.823
You give it a name.

69
00:05:13.823 --> 00:05:16.667
So we'll just call it e by convention, and

70
00:05:16.667 --> 00:05:21.249
notice that error has now gone away
because I provided a framework for

71
00:05:21.249 --> 00:05:24.264
catching the exception
should it be thrown.

72
00:05:27.923 --> 00:05:34.928
All right, so when I catch this exception,
for now I just want to exit gracefully.

73
00:05:34.928 --> 00:05:39.669
So I'm gonna just print
out something like,

74
00:05:39.669 --> 00:05:42.676
sorry, an error occurred.

75
00:05:46.643 --> 00:05:50.805
And then that's it, right?

76
00:05:50.805 --> 00:05:53.430
So let's just run this much.

77
00:05:57.947 --> 00:06:01.134
Okay, now, this exception was thrown,

78
00:06:01.134 --> 00:06:07.159
not because nonexistent.txt doesn't exist,
cuz we said create a new file.

79
00:06:07.159 --> 00:06:10.840
But because resources to
the directory doesn't exist, so

80
00:06:10.840 --> 00:06:15.265
it can't create that new file with
the directory not even being there.

81
00:06:15.265 --> 00:06:17.619
So I don't know that, right?

82
00:06:17.619 --> 00:06:20.522
I just said, sorry, an error occurred.

83
00:06:20.522 --> 00:06:27.321
There are some methods available on the
exception that will provide more detail.

84
00:06:27.321 --> 00:06:31.664
So for example, instead of saying, sorry,

85
00:06:31.664 --> 00:06:37.735
an error occurred, I could say,
actually print the message.

86
00:06:37.735 --> 00:06:42.725
So maybe I'll do that,
and then say e.getMessage.

87
00:06:42.725 --> 00:06:49.465
This will give me the error message
that was returned with the exception.

88
00:06:49.465 --> 00:06:52.465
So boom, now I have much more context.

89
00:06:52.465 --> 00:06:59.902
It says, sorry, an error occurred, and now
it's specifying no such file or directory.

