WEBVTT

1
00:00:00.696 --> 00:00:03.749
So list is a collection where
the elements are ordered.

2
00:00:03.749 --> 00:00:06.192
They are ordered, okay?

3
00:00:06.192 --> 00:00:10.006
And the list can contain
duplicate elements.

4
00:00:10.006 --> 00:00:14.674
So an example of where lists might
be used would be, let's say,

5
00:00:14.674 --> 00:00:17.793
the phone numbers from your call history.

6
00:00:17.793 --> 00:00:22.374
If you looked at your call history,
there in order as the calls came in.

7
00:00:22.374 --> 00:00:26.628
And you can have duplicates if
mom called twice, for example.

8
00:00:26.628 --> 00:00:31.303
So we're gonna go ahead and
create a list of fruit.

9
00:00:31.303 --> 00:00:35.725
And we'll do the same sort of
exercises we did with list, all right?

10
00:00:35.725 --> 00:00:39.801
So back to our collections demo class.

11
00:00:39.801 --> 00:00:43.272
I am going to collapse the setDemo.

12
00:00:43.272 --> 00:00:44.965
We'll comment this out.

13
00:00:44.965 --> 00:00:48.033
And let's do a list demo now.

14
00:00:50.029 --> 00:00:56.567
We need to create that
public static void_listDemo.

15
00:00:58.569 --> 00:01:02.932
All right, so to create a list we can use

16
00:01:02.932 --> 00:01:07.703
this as the data type
list as the data type.

17
00:01:07.703 --> 00:01:13.123
We'll call this fruits.

18
00:01:13.123 --> 00:01:14.406
You need to import list.

19
00:01:14.406 --> 00:01:20.482
It also comes from java.util and
a list is an interface,

20
00:01:20.482 --> 00:01:24.672
which means we cannot instantiate it.

21
00:01:24.672 --> 00:01:31.124
One of its implementing
classes is ArrayList.

22
00:01:33.043 --> 00:01:34.489
We'll need to import that as well.

23
00:01:41.827 --> 00:01:42.784
Wait a minute.

24
00:01:46.607 --> 00:01:48.045
Do I do the right list?

25
00:01:48.045 --> 00:01:49.590
No, this is the wrong list.

26
00:01:49.590 --> 00:01:54.305
[LAUGH] I imported the wrong list.

27
00:01:54.305 --> 00:01:57.338
Okay, there we go.

28
00:01:57.338 --> 00:02:01.136
All right, to add,
we use the same add method.

29
00:02:01.136 --> 00:02:07.697
So let's add an apple, let's add a lemon.

30
00:02:12.076 --> 00:02:15.909
We can add banana.

31
00:02:22.736 --> 00:02:24.229
Let's add an orange.

32
00:02:28.378 --> 00:02:34.649
Okay, and let's print the list.

33
00:02:37.189 --> 00:02:40.462
So if I run this, it should stay in order.

34
00:02:40.462 --> 00:02:45.965
Yes, so I added the apple, the lemon,
the banana, and the orange.

35
00:02:45.965 --> 00:02:53.367
And that's exactly the order that
they appear, so that's great.

36
00:02:53.367 --> 00:02:59.233
You can also replace an item in a list.

37
00:02:59.233 --> 00:03:04.829
So let's say, for example,
I want to replace

38
00:03:04.829 --> 00:03:09.708
this third item in
the list with a grape so

39
00:03:09.708 --> 00:03:15.748
I want to replace the banana with a grape,
right?

40
00:03:15.748 --> 00:03:21.524
Because the objects
are in a specific order,

41
00:03:21.524 --> 00:03:25.479
you can access these by index.

42
00:03:25.479 --> 00:03:32.848
Okay, so if I wanna replace,
I can say fruits.set, set is what it is.

43
00:03:32.848 --> 00:03:39.492
So set takes an index, what's the index
of the item that you want to remove?

44
00:03:39.492 --> 00:03:44.673
And then give me the new object that
you want to put there in its place.

45
00:03:44.673 --> 00:03:47.880
So indexes start with zero.

46
00:03:47.880 --> 00:03:52.050
If I wanna remove the banana,
was the index for banana?

47
00:03:52.050 --> 00:03:52.576
&gt;&gt; Two.

48
00:03:52.576 --> 00:04:00.209
&gt;&gt; Two, and then I can give it
the new object that I wanna put there.

49
00:04:00.209 --> 00:04:05.183
So that should remove the banana and
put a great there in its place.

50
00:04:05.183 --> 00:04:07.897
Let's make sure that happens.

51
00:04:07.897 --> 00:04:14.016
Yes, I got an apple and
grape and then an orange, right?

52
00:04:14.016 --> 00:04:18.853
Again, list do allow duplicate elements,
so

53
00:04:18.853 --> 00:04:26.056
I can add another lemon here for
example and it will actually appear.

54
00:04:26.056 --> 00:04:28.137
So we have two lemons now.

55
00:04:32.013 --> 00:04:36.678
If I want to remove an element,
I can say remove, and

56
00:04:36.678 --> 00:04:40.080
I can, this is an overloaded method.

57
00:04:40.080 --> 00:04:44.660
There's two of them that I can use,
I can say remove, and

58
00:04:44.660 --> 00:04:46.961
I can give it an object name.

59
00:04:46.961 --> 00:04:52.294
I mean the object that I want removed or
I can remove it by its index.

60
00:04:52.294 --> 00:04:59.728
So if I wanted to remove lemon, let's
see what would happen if I put lemon.

61
00:04:59.728 --> 00:05:02.837
Do you think they would
remove both of the lemons?

62
00:05:02.837 --> 00:05:07.127
Or the first lemon that it found,
or the last lemon that it found,

63
00:05:07.127 --> 00:05:08.461
what would happen?

64
00:05:08.461 --> 00:05:11.539
Let's run it and see.

65
00:05:11.539 --> 00:05:15.170
So it would remove the first
instance of what it found, but

66
00:05:15.170 --> 00:05:18.069
what if that wasn't
the one you wanna remove?

67
00:05:18.069 --> 00:05:23.230
But if it was the last one you wanna
remove, then you would use the index,

68
00:05:23.230 --> 00:05:27.559
so that you could specify exactly
which one you want it gone.

69
00:05:29.738 --> 00:05:32.471
Removes first found.

70
00:05:35.094 --> 00:05:37.199
And then let's see.

71
00:05:37.199 --> 00:05:40.618
Let's just give the other example,
so you have this one.

72
00:05:40.618 --> 00:05:45.384
I wanna remove element
what's the lemon here

73
00:05:45.384 --> 00:05:50.412
after I remove this one zero one,
two, three?

74
00:05:50.412 --> 00:05:57.274
I wanna remove three, so
that should take care of both lemons.

75
00:05:57.274 --> 00:06:02.617
&gt;&gt; I have a question, if you don't specify
if say you did there's three lemons and

76
00:06:02.617 --> 00:06:06.869
you specified a fruit that was
above lemon that wasn't lemon.

77
00:06:06.869 --> 00:06:09.003
Would it just once it hits that lemon,
it just goes down the list.

78
00:06:09.003 --> 00:06:11.309
&gt;&gt; I'm sorry, say it again.

79
00:06:11.309 --> 00:06:17.075
&gt;&gt; If you did the indexes,
one it's apple, and it's not lemon.

80
00:06:17.075 --> 00:06:19.423
Would it just go down on
the list until it finds lemon or

81
00:06:19.423 --> 00:06:20.900
would it just throw you an error?

82
00:06:20.900 --> 00:06:24.501
&gt;&gt; Tell me which line
you're talking about 44?

83
00:06:24.501 --> 00:06:30.617
&gt;&gt; 36, if you specified that index like
apple, but you're looking to remove lemon.

84
00:06:30.617 --> 00:06:32.306
And obviously apples and the lemon.

85
00:06:32.306 --> 00:06:32.836
What would happen?

86
00:06:32.836 --> 00:06:34.105
Would it throw you an error or
would it go down?

87
00:06:34.105 --> 00:06:35.224
&gt;&gt; No, it doesn't know.

88
00:06:35.224 --> 00:06:36.491
It wouldn't know, right?

89
00:06:36.491 --> 00:06:40.176
So if you said, I added an apple and

90
00:06:40.176 --> 00:06:45.005
then I changed this to
say remove index zero,

91
00:06:45.005 --> 00:06:48.310
which is supposed to be apple,

92
00:06:48.310 --> 00:06:53.279
it has no idea that you
really meant lemon.

93
00:06:53.279 --> 00:06:53.844
&gt;&gt; Okay.

94
00:06:53.844 --> 00:06:55.296
&gt;&gt; Yeah, it's just gonna do it.

95
00:06:59.948 --> 00:07:02.951
And there's no adding back either so.

96
00:07:02.951 --> 00:07:05.388
[LAUGH] I mean, you could say die add, but

97
00:07:05.388 --> 00:07:08.339
these are very simple
objects that are strings.

98
00:07:08.339 --> 00:07:11.836
If you had like a bigger object that
has stayed in all of that stuff,

99
00:07:11.836 --> 00:07:15.597
an account, for example,
you just kind of blew somebody's account.

100
00:07:15.597 --> 00:07:22.053
&gt;&gt; I meant for
the removes first found, that lemon.

101
00:07:22.053 --> 00:07:23.448
Never mind, I think I get it.

102
00:07:23.448 --> 00:07:26.273
&gt;&gt; [LAUGH]
&gt;&gt; Removes first lemon.

103
00:07:26.273 --> 00:07:28.809
&gt;&gt; Yeah, just, it-
&gt;&gt; Yeah,

104
00:07:28.809 --> 00:07:31.754
go down until it finds a lemon and
then remove the first one.

105
00:07:31.754 --> 00:07:32.358
&gt;&gt; Yeah.

106
00:07:32.358 --> 00:07:37.832
&gt;&gt; Yeah, all right, if you want to again,

107
00:07:37.832 --> 00:07:41.540
these things are ordered.

108
00:07:41.540 --> 00:07:47.020
So if you wanted to do
something like print out what

109
00:07:47.020 --> 00:07:52.118
is in a specific spot,
you can do that as well.

110
00:07:52.118 --> 00:07:57.176
So let's say you wanna
know what is at index two.

111
00:07:59.962 --> 00:08:04.556
I can simply say

112
00:08:04.556 --> 00:08:09.157
fruits.get.

113
00:08:09.157 --> 00:08:12.921
So at get, I will specify the index and

114
00:08:12.921 --> 00:08:18.106
then it will give me the object
that is at that index.

115
00:08:18.106 --> 00:08:20.917
So let's print that out.

116
00:08:20.917 --> 00:08:23.362
Index two is orange, okay?

117
00:08:28.363 --> 00:08:34.477
If I need to find an index, I don't
know where it is in the list, right?

118
00:08:34.477 --> 00:08:37.554
I know that this object is there.

119
00:08:37.554 --> 00:08:42.547
I can say fruits.index of,

120
00:08:42.547 --> 00:08:47.539
and I can specify an object,

121
00:08:47.539 --> 00:08:51.491
so let's say grape and

122
00:08:51.491 --> 00:08:57.743
it'll give me the index for grape.

123
00:08:57.743 --> 00:09:01.032
So let's say index of grape.

124
00:09:04.866 --> 00:09:11.696
And then I said fruits.index
of I gave it the object and

125
00:09:11.696 --> 00:09:17.500
then it'll tell me okay
grape is at index one.

126
00:09:17.500 --> 00:09:22.384
Also, if I want,
let me not remove these lemons.

127
00:09:22.384 --> 00:09:28.182
I can do something like the last index of.

128
00:09:35.697 --> 00:09:41.159
So fruits.LastIndexof and

129
00:09:41.159 --> 00:09:45.486
then I specify lemon.

130
00:09:45.486 --> 00:09:53.632
We print this and
it says okay the last index of lemon is 4.

131
00:09:57.734 --> 00:10:00.343
Now question?

132
00:10:00.343 --> 00:10:02.729
Go ahead.

133
00:10:02.729 --> 00:10:06.979
&gt;&gt; If these array lists are so
much more powerful than sets,

134
00:10:06.979 --> 00:10:15.305
why would you ever want to use a set
&gt;&gt; Why do you think they're more powerful?

135
00:10:15.305 --> 00:10:19.308
&gt;&gt; Well, there's more flexibility
because you control both the index and

136
00:10:19.308 --> 00:10:22.588
the position and order and
you can do more things with them,

137
00:10:22.588 --> 00:10:24.177
even as an unordered group.

138
00:10:24.177 --> 00:10:26.159
&gt;&gt; So
what if I don't want to do those things?

139
00:10:26.159 --> 00:10:28.056
That's not always powerful, right?

140
00:10:28.056 --> 00:10:31.713
What if I want a collection that
does not have any duplicates?

141
00:10:31.713 --> 00:10:37.958
I don't want duplicates in here,
like a deck of playing cards, for example.

142
00:10:37.958 --> 00:10:41.546
So list is not helpful for me there.

143
00:10:41.546 --> 00:10:46.130
So if I need those restrictions,

144
00:10:46.130 --> 00:10:51.541
that's when you will use that, okay?

145
00:10:51.541 --> 00:10:54.695
You can also create the list
with the list data.

146
00:10:54.695 --> 00:11:01.850
So that immutable one, so
more fruit equals lists that have and

147
00:11:01.850 --> 00:11:08.204
I'll add like maybe two fruit here,
cherry and a plum.

148
00:11:08.204 --> 00:11:12.569
Again, this creates an immutable list.

149
00:11:12.569 --> 00:11:17.783
So I would not be able to do any adding,
removing, anything like that.

150
00:11:17.783 --> 00:11:24.260
I could do some of these operations
with the index, does it contain this?

151
00:11:24.260 --> 00:11:25.943
I can do that sort of thing.

152
00:11:25.943 --> 00:11:31.044
I cannot do that set where I'm
replacing an object I cannot add,

153
00:11:31.044 --> 00:11:34.267
I cannot remove, okay, so immutable.

154
00:11:36.608 --> 00:11:39.668
Questions on list.

155
00:11:39.668 --> 00:11:43.310
&gt;&gt; Can you repeat again
what last index does?

156
00:11:43.310 --> 00:11:48.063
&gt;&gt; Yeah, so last index of is when you
have since this collection contains

157
00:11:48.063 --> 00:11:51.216
duplicate or occurred, contain duplicate.

158
00:11:51.216 --> 00:11:53.611
Maybe you only want the last index.

159
00:11:53.611 --> 00:11:59.417
If I do index of lemon, it's going to
give me the index of the first one.

160
00:11:59.417 --> 00:12:02.203
Lemon appears twice in our list.

161
00:12:02.203 --> 00:12:08.460
So last index will say,
find me the last index of that item.

162
00:12:08.460 --> 00:12:10.315
&gt;&gt; Is there a first index of?

163
00:12:10.315 --> 00:12:14.818
&gt;&gt; Let's see index.

164
00:12:14.818 --> 00:12:17.221
&gt;&gt; No, so index of is the first one.

165
00:12:17.221 --> 00:12:20.082
Now let's say you have
five of these things.

166
00:12:20.082 --> 00:12:24.291
I don't know how you would get to
like what's in the middle, right?

167
00:12:24.291 --> 00:12:26.491
&gt;&gt; Can you do index of and have a start?

168
00:12:26.491 --> 00:12:28.118
&gt;&gt; That's kind of what I was trying to do.

169
00:12:28.118 --> 00:12:31.933
&gt;&gt; Let's see if there's
an overloaded one of this.

170
00:12:31.933 --> 00:12:33.379
Nope, you got two.

171
00:12:33.379 --> 00:12:37.772
Index of and last index of, yeah.

172
00:12:37.772 --> 00:12:39.614
&gt;&gt; So yeah, that's kind of like
what I was wondering before.

173
00:12:39.614 --> 00:12:43.205
Like with the first one, you can tell
where to start to look on the list, and

174
00:12:43.205 --> 00:12:45.722
would it just go down the list,
but apparently not.

175
00:12:45.722 --> 00:12:50.623
&gt;&gt; Right, and then there was one,
like get, right?

176
00:12:50.623 --> 00:12:55.111
So get gives us.

177
00:12:59.646 --> 00:13:06.162
So the object itself, right?

178
00:13:06.162 --> 00:13:08.262
I'm thinking how I would
go about doing that.

179
00:13:08.262 --> 00:13:11.507
So if I wanted the indexes
of every limit in a list,

180
00:13:11.507 --> 00:13:14.226
I would probably loop through that list.

181
00:13:14.226 --> 00:13:17.696
And then like kind of
store them somewhere.

