WEBVTT

1
00:00:00.000 --> 00:00:04.092
So we are going to write a program that,

2
00:00:04.092 --> 00:00:08.683
has a method it asks the user for
their name.

3
00:00:08.683 --> 00:00:13.983
And then we'll have another method that
greets the user by that name, all right?

4
00:00:13.983 --> 00:00:17.250
So let's go back to our IDE and

5
00:00:17.250 --> 00:00:23.145
we're going to create a new
package called Methods.

6
00:00:24.647 --> 00:00:30.464
And we'll add a new class
here called greetUser.

7
00:00:32.639 --> 00:00:37.603
Side of here we'll make our main,
all right?

8
00:00:37.603 --> 00:00:39.558
So main is a method.

9
00:00:39.558 --> 00:00:42.547
We've been using that all along,
all right?

10
00:00:42.547 --> 00:00:47.404
So let's go ahead and
we're gonna say tring name equals =,

11
00:00:47.404 --> 00:00:52.452
and instead of me doing everything
inside of this main method,

12
00:00:52.452 --> 00:00:57.023
I'm actually just going to make
a call to a new method that

13
00:00:57.023 --> 00:01:01.526
we've not written yet, and
we'll write that method.

14
00:01:01.526 --> 00:01:07.137
So we'll say getUserName,okay?

15
00:01:07.137 --> 00:01:11.432
Let's go ahead and
write the getUserName method.

16
00:01:11.432 --> 00:01:17.642
So we'll say this is public,
we'll make it static.

17
00:01:17.642 --> 00:01:20.670
So you can go ahead and just call it.

18
00:01:20.670 --> 00:01:24.710
It's going to return a string,
which is the user name.

19
00:01:24.710 --> 00:01:28.671
And then the name of
the method is getUserName.

20
00:01:28.671 --> 00:01:32.032
Parameter list,
I don't need any parameters.

21
00:01:32.032 --> 00:01:34.621
So we'll just leave that empty.

22
00:01:34.621 --> 00:01:42.445
And then we have our set of curly
braces to define our body, okay?

23
00:01:42.445 --> 00:01:47.875
So inside of here is where I can
then do my output in my input so

24
00:01:47.875 --> 00:01:55.496
we'll go ahead and just basically, ask
the user for their name, Enter your name.

25
00:01:56.814 --> 00:02:03.520
And let's go ahead and scan it in.

26
00:02:09.653 --> 00:02:16.171
And we'll store it inside a variable.

27
00:02:16.171 --> 00:02:21.134
So we'll say String name
equals scanner.next,

28
00:02:21.134 --> 00:02:26.688
let's close our scanner, and
then this is complaining

29
00:02:26.688 --> 00:02:31.178
because I have not
fulfilled my obligation,

30
00:02:31.178 --> 00:02:36.279
I said I was gonna return to string,
I have to do so.

31
00:02:36.279 --> 00:02:43.799
So to return, I write the word return and
then the value that I want to return back.

32
00:02:43.799 --> 00:02:48.137
All right, so
here we're calling getUserName here,

33
00:02:48.137 --> 00:02:52.759
we're getting the person's name,
and then we're gonna

34
00:02:52.759 --> 00:02:57.681
return it back to here and
we're gonna store it in a variable.

35
00:03:01.300 --> 00:03:05.729
Now we'll talk about scope
in a little bit, but

36
00:03:05.729 --> 00:03:11.707
I wanna point out now I have
a variable on line eight called name,

37
00:03:11.707 --> 00:03:15.379
in a variable on line 14 called name.

38
00:03:15.379 --> 00:03:19.718
All these are not the same cuz they
live in two different methods.

39
00:03:19.718 --> 00:03:22.890
So whatever I do in my method
is my business, wherever you're

40
00:03:22.890 --> 00:03:26.746
doing your method and your business,
they don't know each other, okay?

41
00:03:26.746 --> 00:03:29.564
&gt;&gt; So you could refer to like an ID and
multiple methods, but

42
00:03:29.564 --> 00:03:32.280
it's not talking about
the same thing the whole time.

43
00:03:32.280 --> 00:03:37.345
&gt;&gt; Yeah, it's sculpt to that method.

44
00:03:37.345 --> 00:03:43.754
All right, so yeah, I got the name,
is that all I need?

45
00:03:43.754 --> 00:03:46.053
I don't need to print as well, right?

46
00:03:46.053 --> 00:03:51.473
So let's go ahead and

47
00:03:51.473 --> 00:03:56.298
say, greetuser.

48
00:03:56.298 --> 00:03:57.988
And we'll give it a name.

49
00:03:57.988 --> 00:04:02.749
So this way we exercise sending
data to a method, all right?

50
00:04:02.749 --> 00:04:08.160
So we'll create this new method,
public static.

51
00:04:08.160 --> 00:04:11.960
Greetuser doesn't return anything, it's
just gonna print something to the screen.

52
00:04:11.960 --> 00:04:14.250
So what's the return type for that?

53
00:04:14.250 --> 00:04:17.064
&gt;&gt; Void.
&gt;&gt; Void, okay,

54
00:04:17.064 --> 00:04:22.047
and greetUser is the name.

55
00:04:22.047 --> 00:04:25.588
It does need to accept a name.

56
00:04:25.588 --> 00:04:27.166
What should the datatype be?

57
00:04:27.166 --> 00:04:27.863
&gt;&gt; String.

58
00:04:27.863 --> 00:04:31.396
&gt;&gt; String, and
then we can call it whatever we want.

59
00:04:31.396 --> 00:04:33.769
We can call it name again.

60
00:04:33.769 --> 00:04:38.581
This now belongs to this method, right?

61
00:04:38.581 --> 00:04:42.210
Okay, so
from here we'll just print out the name.

62
00:04:42.210 --> 00:04:48.343
We'll say hi there, and then put the name.

63
00:04:48.343 --> 00:04:53.751
Since it has a void, return type,
we don't need a return statement, yeah.

64
00:04:53.751 --> 00:04:56.715
&gt;&gt; At the very top with your main method.

65
00:04:56.715 --> 00:05:01.952
What's going on with the inputs with
the string double brackets args?

66
00:05:01.952 --> 00:05:02.869
&gt;&gt; Here?

67
00:05:02.869 --> 00:05:03.955
&gt;&gt; Yeah.

68
00:05:03.955 --> 00:05:09.810
&gt;&gt; Okay, so the main method this
can be run from the command line,

69
00:05:09.810 --> 00:05:14.890
it can even be run using IDE settings,
but we could send

70
00:05:14.890 --> 00:05:20.876
it some initial flags of data to
say how we want this run,right?

71
00:05:20.876 --> 00:05:26.520
So let's say you want it run with some
initial input or just something like that,

72
00:05:26.520 --> 00:05:31.420
or some sort of flags like I want this
run headless or whatever you can.

73
00:05:31.420 --> 00:05:37.475
Put whatever you want, but this main
method, this is the signature of it

74
00:05:37.475 --> 00:05:42.552
that says the name is main, and
it takes an array of strings.

75
00:05:42.552 --> 00:05:44.756
So that's how you define it.

76
00:05:44.756 --> 00:05:48.351
In our case, we're not sending any data,
so the array is empty.

77
00:05:48.351 --> 00:05:51.930
But if you were to run this from
the command line, you could do that and

78
00:05:51.930 --> 00:05:53.246
specify a bunch of data.

79
00:05:53.246 --> 00:05:58.865
&gt;&gt; Does it have to be an array of strings,
could you send some kind of other input?

80
00:05:58.865 --> 00:06:01.897
&gt;&gt; It has to be that because that's
how main has defined itself,

81
00:06:01.897 --> 00:06:03.950
as saying I only take an array of strings.

82
00:06:03.950 --> 00:06:07.923
Okay, all right.

83
00:06:10.200 --> 00:06:15.030
So we called a method that
did not take any parameters.

84
00:06:15.030 --> 00:06:19.365
But, it returned a value, and
then we called a method that

85
00:06:19.365 --> 00:06:23.713
does take a parameter, and
it does not return any values.

86
00:06:23.713 --> 00:06:26.262
Shall we run this?

87
00:06:27.978 --> 00:06:33.298
Okay, so, go ahead, enter your name here,

88
00:06:33.298 --> 00:06:36.809
and I got, Hi there, Angie.

89
00:06:36.809 --> 00:06:42.041
So for my main method, notice I'm now
using main as a control mechanism to say,

90
00:06:42.041 --> 00:06:46.881
okay, I'm gonna call this method and
then I'm gonna call this method and

91
00:06:46.881 --> 00:06:50.971
do X, Y, and Z,
versus dumping everything into one method.

92
00:06:50.971 --> 00:06:56.078
So you want your methods kind of
isolated and focused on a specific task,

93
00:06:56.078 --> 00:07:00.112
not like too big and doing three or
four things all in one.

94
00:07:00.112 --> 00:07:05.120
All right, so you can have multiple
methods with the same name,

95
00:07:05.120 --> 00:07:10.874
but remember, the methods are uniquely
identified by their signature,

96
00:07:10.874 --> 00:07:16.097
and a signature consists of the method
name in the parameter list.

97
00:07:16.097 --> 00:07:20.306
So it's legal to have things
with the same name, but

98
00:07:20.306 --> 00:07:23.749
in order to still be uniquely identified,

99
00:07:23.749 --> 00:07:27.880
the parameter list must be different,
all right?

100
00:07:27.880 --> 00:07:30.603
So here's an example of
a class called Month.

101
00:07:30.603 --> 00:07:36.230
It has two methods, one that says getMonth
and another one that says getMonth.

102
00:07:36.230 --> 00:07:41.695
So the first GetMonth method,
it takes a string callMonth.

103
00:07:41.695 --> 00:07:45.372
The second one takes an integer callMonth.

104
00:07:45.372 --> 00:07:51.361
So this signature is different because
they both take different types of data.

105
00:07:51.361 --> 00:07:54.782
Their parameter list is different,
all right?

106
00:07:54.782 --> 00:08:01.124
So this is two unique signatures,
getMonth string, getMonth int.

107
00:08:01.124 --> 00:08:04.453
Again, the name of
the variable is irrelevant.

108
00:08:04.453 --> 00:08:08.754
So notice both of the names
are month on the parameter.

109
00:08:08.754 --> 00:08:13.817
That's irrelevant, even if you were
to have this third method here.

110
00:08:13.817 --> 00:08:19.025
It's another overloaded method
where I say getMonth again,

111
00:08:19.025 --> 00:08:24.542
I take a string but its name is monthName,
this will not compile.

112
00:08:24.542 --> 00:08:26.092
Why?

113
00:08:26.092 --> 00:08:29.328
What does it conflict with?

114
00:08:29.328 --> 00:08:30.989
&gt;&gt; The second one, the one on line seven.

115
00:08:30.989 --> 00:08:32.771
&gt;&gt; Why?

116
00:08:32.771 --> 00:08:34.336
&gt;&gt; Same signature.

117
00:08:34.336 --> 00:08:37.228
&gt;&gt; It has the same
signature getMonth string.

118
00:08:37.228 --> 00:08:39.890
The variable name is irrelevant.

119
00:08:39.890 --> 00:08:43.290
We don't care what you name it,
if I wanna call getMonth and

120
00:08:43.290 --> 00:08:47.574
they both take a string, I'm confused
as the caller as to which one of these

121
00:08:47.574 --> 00:08:49.763
I'm supposed to be calling, right?

122
00:08:49.763 --> 00:08:51.034
So they're conflicting.

