WEBVTT

1
00:00:00.000 --> 00:00:04.119
If you were to have written this for
Loop, I'll write it here and

2
00:00:04.119 --> 00:00:05.504
just comment it out.

3
00:00:05.504 --> 00:00:08.092
But if you were to use this with i,

4
00:00:12.227 --> 00:00:17.702
Another thing, so we could have said,
the hard coded constant value.

5
00:00:17.702 --> 00:00:21.493
But another way, sometimes you
won't have those values defined,

6
00:00:21.493 --> 00:00:26.101
you have a method that accepts an array,
you don't know what this array has in it.

7
00:00:26.101 --> 00:00:30.534
So you can do something like array.length,
and

8
00:00:30.534 --> 00:00:37.900
that'll give you the number of elements
that's in that array, and then i++.

9
00:00:37.900 --> 00:00:43.562
And then inside of here I would
have just printed out ticket,

10
00:00:43.562 --> 00:00:48.014
no, not ticket, it's called array, right?

11
00:00:48.014 --> 00:00:53.631
Array i+, and then this little pipe thing.

12
00:00:53.631 --> 00:00:58.499
So I would have accessed
the element by its index.

13
00:00:58.499 --> 00:01:01.075
So this is another way to do it.

14
00:01:11.908 --> 00:01:13.319
I'll just comment it out.

15
00:01:16.985 --> 00:01:17.633
Okay?

16
00:01:20.382 --> 00:01:23.436
Questions on arrays?

17
00:01:23.436 --> 00:01:24.949
Pretty clear?

18
00:01:24.949 --> 00:01:29.394
Why did we use the do while
instead of a while here?

19
00:01:29.394 --> 00:01:31.091
&gt;&gt; Cuz you wanted it to run at least once.

20
00:01:31.091 --> 00:01:32.655
&gt;&gt; Yeah, we want to run at least once.

21
00:01:32.655 --> 00:01:34.320
So you see, there are valid cases.

22
00:01:34.320 --> 00:01:36.576
So when people are like, well,
why ever use a do while?

23
00:01:36.576 --> 00:01:41.115
I have a little problem with that, this
makes logical sense to do that, right?

24
00:01:41.115 --> 00:01:43.815
Why would I search to see if
the number has been there,

25
00:01:43.815 --> 00:01:46.819
if I haven't even generated
the number first, all right.

26
00:01:46.819 --> 00:01:51.381
&gt;&gt; What did you do to make the numbers
pronounced the same line again?

27
00:01:51.381 --> 00:01:54.994
&gt;&gt; Yeah, instead of print in,
it's just print, yeah.

28
00:01:54.994 --> 00:02:00.335
&gt;&gt; I guess there is one, are the terms
mutable and immutable used in Java?

29
00:02:00.335 --> 00:02:03.704
&gt;&gt; Yes.
&gt;&gt; Kinda related to the constant?

30
00:02:03.704 --> 00:02:08.964
&gt;&gt; They are, and we actually gonna
talk about immutability in this very

31
00:02:08.964 --> 00:02:13.962
next section I'm gonna go over,
but yes, they do exist in Java.

32
00:02:16.624 --> 00:02:20.644
&gt;&gt; The other part is,
right now we're going between 1 and 68, so

33
00:02:20.644 --> 00:02:23.808
I think that's what we could also just.

34
00:02:23.808 --> 00:02:25.734
&gt;&gt; Very good, okay, great.

35
00:02:25.734 --> 00:02:29.969
So, all right.

36
00:02:29.969 --> 00:02:32.765
So, what's your name?

37
00:02:32.765 --> 00:02:33.329
&gt;&gt; Dave.

38
00:02:33.329 --> 00:02:38.603
&gt;&gt; Dave pointed out that this
bound here is not inclusive.

39
00:02:38.603 --> 00:02:43.277
So when we said next in,
it's only gonna do one,

40
00:02:43.277 --> 00:02:47.505
if origin is included, is this inclusive?

41
00:02:47.505 --> 00:02:48.380
&gt;&gt; That's inclusive, yeah.

42
00:02:48.380 --> 00:02:51.136
&gt;&gt; Okay, so
the first parameter is inclusive,

43
00:02:51.136 --> 00:02:56.078
meaning it will be a possibility, but the
last one is a cap, meaning it will not.

44
00:02:56.078 --> 00:03:00.228
So we could do something
like +1 right here.

45
00:03:03.403 --> 00:03:09.872
And that way we include max ticket number,
so our bound would be 70, right?

46
00:03:12.251 --> 00:03:13.756
&gt;&gt; That feels kinda like it works and

47
00:03:13.756 --> 00:03:17.098
it feels like you're just very kludgy
in terms of how it's implemented.

48
00:03:17.098 --> 00:03:20.701
&gt;&gt; You could change this to this,
[COUGH] 70 right here.

49
00:03:20.701 --> 00:03:24.045
&gt;&gt; And then just have a comment about
it just saying inclusive of bounds or

50
00:03:24.045 --> 00:03:25.130
something like that.

51
00:03:25.130 --> 00:03:31.280
Yeah, what I would actually do,
I wouldn't do a origin.

52
00:03:31.280 --> 00:03:36.416
What I would do personally,
I would do max number,

53
00:03:36.416 --> 00:03:40.840
let it just create it and
then I will do +1.

54
00:03:40.840 --> 00:03:41.968
&gt;&gt; Okay, that feels a little bit better.

55
00:03:41.968 --> 00:03:42.994
&gt;&gt; Like that?

56
00:03:42.994 --> 00:03:47.698
And the reason I would do that is
because I don't want 0 included either.

57
00:03:47.698 --> 00:03:50.533
So that really works on
either of the terms.

58
00:03:50.533 --> 00:03:55.135
So create a number between 0 and 68,

59
00:03:55.135 --> 00:04:01.974
69 somewhere in between it and
add add one to it, right?

60
00:04:01.974 --> 00:04:04.791
That way, that's my range.

61
00:04:04.791 --> 00:04:07.235
&gt;&gt; Java Docs.

62
00:04:07.235 --> 00:04:09.258
&gt;&gt; Java Docs, yeah, Java Docs are great.

63
00:04:11.729 --> 00:04:15.275
Just for the sake of time,
we haven't been writing any on our own.

64
00:04:15.275 --> 00:04:20.923
But we should, and to create one,
it's really simple.

65
00:04:20.923 --> 00:04:23.744
Right above the method
itself you would do,

66
00:04:23.744 --> 00:04:26.879
I can't remember if this is slash or
backslash.

67
00:04:26.879 --> 00:04:29.396
Is that back or is that front?

68
00:04:29.396 --> 00:04:34.930
Whatever that is, some sort of slash,
[COUGH] with an asterisk.

69
00:04:34.930 --> 00:04:38.426
And then hit enter, and
that's the closing one.

70
00:04:38.426 --> 00:04:43.488
But in that Java doc, you would then
specify like, what does this method do you

71
00:04:43.488 --> 00:04:48.475
have a little one line there and then
you would enter the parameters it takes,

72
00:04:48.475 --> 00:04:51.562
what it returns and
a nice little description?

73
00:04:51.562 --> 00:04:54.617
So that's being a good developer.

74
00:04:54.617 --> 00:04:56.944
All right so, that is a race.

75
00:05:01.722 --> 00:05:04.904
&gt;&gt; How did you access the Java doc?

76
00:05:04.904 --> 00:05:10.203
&gt;&gt; I clicked on, [COUGH] so
let's go to a method that

77
00:05:10.203 --> 00:05:15.378
this outside of our class,
the random may be.

78
00:05:15.378 --> 00:05:18.273
So this random.nextInt.

79
00:05:18.273 --> 00:05:23.482
I click command, hold command down and
then click it, and

80
00:05:23.482 --> 00:05:29.345
that takes me into here and
you can see how the Java doc is written.

81
00:05:29.345 --> 00:05:32.936
Basically, what is this?

82
00:05:32.936 --> 00:05:38.015
Slash two asterisks,
and then notice it has

83
00:05:38.015 --> 00:05:43.514
the comments, and
then it has the parameters.

84
00:05:43.514 --> 00:05:47.671
I don't know why it has all that,
that's a lot, [LAUGH] this is a book,

85
00:05:47.671 --> 00:05:50.720
here's the parameters,
so you would do @param.

86
00:05:50.720 --> 00:05:56.403
And then you could specify the parameters,
a little bit of information about them,

87
00:05:56.403 --> 00:05:59.618
exclusive, the upper
bound must be positive.

88
00:05:59.618 --> 00:06:03.577
Those are good things to know,
that helped us in our code, right?

89
00:06:03.577 --> 00:06:07.257
And whatever it'll be returned
you let them know that.

90
00:06:07.257 --> 00:06:11.406
&gt;&gt; I bet you the Java doc for var is
probably even more convoluted given how

91
00:06:11.406 --> 00:06:15.783
much the guessing it's doing other
kinds of logic you need to guide that.

92
00:06:15.783 --> 00:06:18.974
[LAUGH]
&gt;&gt; Up there is a dark.

93
00:06:18.974 --> 00:06:19.923
&gt;&gt; Wouldn't be?

94
00:06:19.923 --> 00:06:25.552
So they usually are on methods and
var is not let's see.

95
00:06:25.552 --> 00:06:28.038
&gt;&gt; What else we still kinda
internal logic for like-

96
00:06:28.038 --> 00:06:30.145
&gt;&gt; Yeah, I mean there's Doc's written on,

97
00:06:30.145 --> 00:06:32.835
I just don't know if it's in
the form of Java Docs, but

98
00:06:32.835 --> 00:06:36.427
there I'm sure there's something on
Oracle written on it, let me see.

99
00:06:39.021 --> 00:06:40.544
Yeah, there's nothing here.

