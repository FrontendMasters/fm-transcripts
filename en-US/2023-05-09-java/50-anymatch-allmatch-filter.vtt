WEBVTT

1
00:00:00.185 --> 00:00:07.617
All right, so we are going to look at
some of the common stream operations.

2
00:00:07.617 --> 00:00:12.799
What we're gonna do is we're
gonna write this code.

3
00:00:12.799 --> 00:00:15.979
I'm gonna make this list
of veggies this time and

4
00:00:15.979 --> 00:00:20.105
then we're gonna look at
multiple stream operations, okay?

5
00:00:20.105 --> 00:00:22.468
All right, so let's go to our ID.

6
00:00:25.161 --> 00:00:28.513
And we'll make a new
package called streams.

7
00:00:32.860 --> 00:00:35.474
Inside of streams, let's make a new class.

8
00:00:35.474 --> 00:00:39.122
We'll call this StreamOperations.

9
00:00:45.275 --> 00:00:48.715
All right, I'm gonna actually
make that list global so

10
00:00:48.715 --> 00:00:52.969
that I don't have to redefine it for
every operation that we choose.

11
00:00:52.969 --> 00:00:59.269
So we're gonna say it's
a List&lt;String&gt; called veggies.

12
00:00:59.269 --> 00:01:02.887
I need to import the list, okay?

13
00:01:02.887 --> 00:01:07.580
And I'm gonna use List.of,
who cares that it's not mutable

14
00:01:07.580 --> 00:01:11.470
because we're not gonna
change the thing anyway.

15
00:01:13.179 --> 00:01:14.273
All right?

16
00:01:14.273 --> 00:01:17.247
So you can add any veggies
you want to yours.

17
00:01:17.247 --> 00:01:25.278
I'm gonna put some spinach,
some cabbage, Some peas.

18
00:01:28.072 --> 00:01:29.251
A little green beans.

19
00:01:31.354 --> 00:01:32.572
Brussels, sprouts.

20
00:01:37.137 --> 00:01:39.841
And carrots.

21
00:01:39.841 --> 00:01:42.926
All right, so there's our list of veggies.

22
00:01:42.926 --> 00:01:50.221
And then we'll need a main method, so that
we could call any other methods we want.

23
00:01:50.221 --> 00:01:57.334
So the very first operation that we'll
look into is the any match operation.

24
00:01:57.334 --> 00:02:03.899
If we wanted to see if there are any
vegetables that match a certain criteria,

25
00:02:03.899 --> 00:02:08.854
we can call the any match method
on the stream, all right?

26
00:02:08.854 --> 00:02:14.042
And this any match operation is going
to look through the stream to determine

27
00:02:14.042 --> 00:02:18.759
if any of the elements happened to
match this condition, all right?

28
00:02:18.759 --> 00:02:23.694
So, let's make a new method.

29
00:02:23.694 --> 00:02:27.939
Public static void,
we'll call this any match.

30
00:02:32.995 --> 00:02:34.708
I'm gonna say demo so

31
00:02:34.708 --> 00:02:39.857
you don't get confused with
the actual operation, all right?

32
00:02:39.857 --> 00:02:43.267
And then from main,
we're gonna wanna call this.

33
00:02:46.061 --> 00:02:48.098
So with any match.

34
00:02:48.098 --> 00:02:49.154
And I'm sorry.

35
00:02:49.154 --> 00:02:55.949
We need to make this static if we're
going to use it in these static methods.

36
00:02:55.949 --> 00:02:58.030
Okay.

37
00:02:58.030 --> 00:03:05.150
So this one were just
gonna say veggies,stream,

38
00:03:05.150 --> 00:03:09.733
this will turn it into a stream.

39
00:03:09.733 --> 00:03:12.998
.and then we can do any
processing we want.

40
00:03:12.998 --> 00:03:15.431
In this case, we want to say any match.

41
00:03:15.431 --> 00:03:17.547
Now, any match takes a predicate.

42
00:03:17.547 --> 00:03:21.316
This predicate is what is the condition,
okay?

43
00:03:21.316 --> 00:03:22.277
Predicate also.

44
00:03:32.931 --> 00:03:37.032
Predicate is a functional interface,
right?

45
00:03:37.032 --> 00:03:42.430
So we need to provide an implementation
here that will result in a condition that

46
00:03:42.430 --> 00:03:47.846
was one of the ones we looked at where it
returns a Boolean as the result, right?

47
00:03:47.846 --> 00:03:52.604
So we can specify this
with a lambda expression.

48
00:03:52.604 --> 00:03:56.685
So we wanna say, okay,
do any of the veggies, I don't know,

49
00:03:56.685 --> 00:04:01.630
let's say we wanna make sure, I mean,
we wanna see if any of the vegetables

50
00:04:01.630 --> 00:04:06.445
are two words, like they contain
a space in them or something like that.

51
00:04:06.445 --> 00:04:09.909
So we wanna say, okay,
does any of the veggies contain a space?

52
00:04:09.909 --> 00:04:12.159
How will we write that
as a lambda expression?

53
00:04:12.159 --> 00:04:14.250
Any takers?

54
00:04:14.250 --> 00:04:16.144
What's the first thing we would put?

55
00:04:19.232 --> 00:04:24.150
&gt;&gt; A value like a A single letter.

56
00:04:24.150 --> 00:04:25.914
&gt;&gt; v
&gt;&gt; A single letter.

57
00:04:25.914 --> 00:04:27.229
What are we gonna call it?

58
00:04:27.229 --> 00:04:29.490
&gt;&gt; v carrot or v-
&gt;&gt; All right, here we go.

59
00:04:29.490 --> 00:04:32.023
Say v for veggie, there you go.

60
00:04:32.023 --> 00:04:34.057
And then what?

61
00:04:34.057 --> 00:04:34.602
&gt;&gt; Arrow thing.

62
00:04:34.602 --> 00:04:37.277
&gt;&gt; Arrow.
&gt;&gt; Arrow, all right, perfect.

63
00:04:37.277 --> 00:04:41.476
And now we're gonna say,
okay, that's the input.

64
00:04:41.476 --> 00:04:43.645
And then what do we wanna do with this?

65
00:04:43.645 --> 00:04:47.689
We wanna say, does v contain

66
00:04:49.752 --> 00:04:54.557
And we'll put a white space, all right?

67
00:05:00.130 --> 00:05:07.722
So that will say, basically,
give me Anything that matches this.

68
00:05:07.722 --> 00:05:14.884
Now, if we were to run this,
we would get, what is this return?

69
00:05:14.884 --> 00:05:17.080
Any match, this returns a boolean.

70
00:05:17.080 --> 00:05:18.378
So should we print this out?

71
00:05:18.378 --> 00:05:21.340
Let's just say boolean any found.

72
00:05:21.340 --> 00:05:25.970
Or let's call it any matches,
any matches =.

73
00:05:25.970 --> 00:05:27.825
So I can assign that there, right?

74
00:05:27.825 --> 00:05:31.069
And then we'll just print that out.

75
00:05:38.966 --> 00:05:40.025
So I'm gonna run this.

76
00:05:44.771 --> 00:05:49.455
And yep,
we got true because it found what?

77
00:05:49.455 --> 00:05:53.445
The green beans and
the brussel sprouts, right?

78
00:05:58.735 --> 00:06:00.158
Questions on any match?

79
00:06:02.777 --> 00:06:09.079
So because this is a,
any match is a terminal operation,

80
00:06:09.079 --> 00:06:14.216
there's no other operations
I can do on this.

81
00:06:14.216 --> 00:06:17.214
If I would have put .notice
there's no methods here.

82
00:06:17.214 --> 00:06:17.868
We're done.

83
00:06:17.868 --> 00:06:21.986
It has closed the stream and
is done with us, okay?

84
00:06:25.323 --> 00:06:28.173
And the reason, if you think about this,

85
00:06:28.173 --> 00:06:34.133
why would this one be terminal is because
it's not actually collecting those things.

86
00:06:34.133 --> 00:06:38.483
It would be much different let say,
get the ones that match this condition.

87
00:06:38.483 --> 00:06:44.093
It's not, it's basically doing a true or
false, there's no other objects there.

88
00:06:44.093 --> 00:06:45.010
It's true or false, right?

89
00:06:45.010 --> 00:06:48.002
&gt;&gt; Then you could build out an f loop or
whatever,

90
00:06:48.002 --> 00:06:52.863
where if that boolean condition is true,
pull out the objects that match.

91
00:06:52.863 --> 00:06:57.559
&gt;&gt; Well, there's other operations you can
use, so you wouldn't even use any match.

92
00:06:57.559 --> 00:07:01.087
You would use something else that says,

93
00:07:01.087 --> 00:07:05.462
filter this down to those or
something like that.

94
00:07:07.326 --> 00:07:11.608
All right, let's do another one.

95
00:07:11.608 --> 00:07:16.369
How about we'll say public

96
00:07:16.369 --> 00:07:20.513
static void allMatch.

97
00:07:24.091 --> 00:07:27.919
So the allMatch operation
determines if every

98
00:07:27.919 --> 00:07:32.833
single element in the stream
matches a certain condition.

99
00:07:32.833 --> 00:07:37.219
So we can say boolean allMatches = and

100
00:07:37.219 --> 00:07:43.805
then we'll use the list and
we'll turn it into a stream.

101
00:07:43.805 --> 00:07:47.411
And then we can just call
this allMatch operator.

102
00:07:47.411 --> 00:07:50.656
The allMatch also takes a predicate.

103
00:07:50.656 --> 00:07:54.293
So we would do the same thing
with our lambda expression.

104
00:07:54.293 --> 00:08:00.319
We would say v-&gt; and
then what do we wanna match?

105
00:08:00.319 --> 00:08:05.683
Maybe let's see if everything
contains the letter s, for example.

106
00:08:05.683 --> 00:08:09.699
So I can say v.contains ("s")

107
00:08:14.472 --> 00:08:17.021
And then we'll print out all matches.

108
00:08:22.952 --> 00:08:25.579
And don't forget in the main,
we have to call that.

109
00:08:30.859 --> 00:08:32.806
Okay?
If I were to run allMatch,

110
00:08:32.806 --> 00:08:37.572
I would get false because let's see
if there are any veggies without a s.

111
00:08:37.572 --> 00:08:41.837
Yes, cabbage does not have an s,
so this is false.

112
00:08:47.901 --> 00:08:52.951
Now, I have not looked into this before
but I'm pretty sure that once it

113
00:08:52.951 --> 00:08:58.267
finds one thing, that would make this
all be false, it just kind of stops.

114
00:08:58.267 --> 00:09:01.851
[LAUGH] it doesn't make sense for
it to process the rest of the string.

115
00:09:07.079 --> 00:09:10.165
Questions on allMatch?

116
00:09:10.165 --> 00:09:13.597
All right.
This is also a terminal operation.

117
00:09:13.597 --> 00:09:20.862
So after it's done the check,
it goes ahead and closes the stream.

118
00:09:22.616 --> 00:09:28.273
Now, to the question that you asked about,
maybe we just wanna pull a few out,

119
00:09:28.273 --> 00:09:34.386
so you wouldn't wanna do anyMatch and then
lube and stuff, that would be overkill.

120
00:09:34.386 --> 00:09:38.428
There is a filter option that will
allow you to filter stuff down.

121
00:09:38.428 --> 00:09:39.943
So let's look at that one.

122
00:09:39.943 --> 00:09:42.459
This one is really popular.

123
00:09:42.459 --> 00:09:49.232
So you definitely wanna remember this one.

124
00:09:49.232 --> 00:09:54.021
Oops, filter demo, okay?

125
00:09:54.021 --> 00:10:01.998
So in this one,
we're gonna say veggies.stream, yes.

126
00:10:01.998 --> 00:10:06.273
And we want to use the filter operation.

127
00:10:06.273 --> 00:10:08.898
Filter also takes a predicate, so

128
00:10:08.898 --> 00:10:14.510
we're gonna give it something that
will result in a boolean condition but

129
00:10:14.510 --> 00:10:19.488
what this is saying is to just
basically filter this stream down to

130
00:10:19.488 --> 00:10:24.401
only the elements that match
the condition that I've given it.

131
00:10:24.401 --> 00:10:28.010
So we can add a condition here to say,

132
00:10:28.010 --> 00:10:32.789
find me all of the vegetables
that start with a c.

133
00:10:32.789 --> 00:10:39.615
So we will say v-&gt;v.startsWith.

134
00:10:39.615 --> 00:10:47.198
And these methods that I'm
using contains startsWith.

135
00:10:47.198 --> 00:10:50.702
These are not part of stream,
they are part of what?

136
00:10:50.702 --> 00:10:51.202
&gt;&gt; String.
&gt;&gt; String.

137
00:10:51.202 --> 00:10:53.722
&gt;&gt; String because the element is a string,

138
00:10:53.722 --> 00:10:55.598
very good.
All right, so

139
00:10:55.598 --> 00:11:00.220
I'm saying find me the things
that startWith ("s"),

140
00:11:00.220 --> 00:11:03.466
all right?
I mean, c, right?

141
00:11:03.466 --> 00:11:07.354
c Okay?

142
00:11:07.354 --> 00:11:11.802
So, filter, again,
that's gonna filter them down,

143
00:11:11.802 --> 00:11:16.062
filter is an intermediate operation,
which means,

144
00:11:16.062 --> 00:11:22.045
once they give me that narrowed list,
I can then do something else with it.

145
00:11:22.045 --> 00:11:24.181
So here are all the other operations.

146
00:11:24.181 --> 00:11:25.558
Maybe I wanna print it out.

147
00:11:25.558 --> 00:11:27.410
Let's just go ahead and print it out.

148
00:11:27.410 --> 00:11:28.808
Print out what we got.

149
00:11:28.808 --> 00:11:30.321
So we remember how to do that.

150
00:11:30.321 --> 00:11:35.386
We're gonna use the method reference.

151
00:11:35.386 --> 00:11:36.327
That out.

152
00:11:39.313 --> 00:11:40.530
All right?

153
00:11:51.556 --> 00:11:55.954
So if I run this, I only got
the vegetables that start with a c.

154
00:11:58.001 --> 00:12:01.611
&gt;&gt; I'm sorry, could you scroll over
a little bit on the filter demo, so

155
00:12:01.611 --> 00:12:03.615
I can see the full line for the stream?

156
00:12:07.119 --> 00:12:09.423
&gt;&gt; And it's best practice.

157
00:12:09.423 --> 00:12:11.961
What I did here is kinda raggedy.

158
00:12:11.961 --> 00:12:15.342
So it's best practice after the stream,

159
00:12:15.342 --> 00:12:19.979
you would do something like
new line filter, new line and

160
00:12:19.979 --> 00:12:25.505
have it appear vertical, so
that it's easier to read, all right?

161
00:12:25.505 --> 00:12:30.213
So after I did this for
each, for each is terminal.

162
00:12:30.213 --> 00:12:32.651
So I no longer have the stream anymore.

163
00:12:32.651 --> 00:12:34.642
I couldn't do anything else with it.

