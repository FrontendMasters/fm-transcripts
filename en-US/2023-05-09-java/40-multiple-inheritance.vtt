WEBVTT

1
00:00:00.000 --> 00:00:05.763
A class we talked about,
it can only extend one other class,

2
00:00:05.763 --> 00:00:09.953
but it can implement multiple interfaces.

3
00:00:09.953 --> 00:00:16.993
So this is how you might achieve
multiple inheritance in Java.

4
00:00:16.993 --> 00:00:22.335
Besides Inheriting from a superclass
that inherits from another

5
00:00:22.335 --> 00:00:27.105
superclass, you could
implement multiple interfaces.

6
00:00:27.105 --> 00:00:34.485
And that way you get all of its abstract
methods that you would then implement.

7
00:00:34.485 --> 00:00:39.868
Now, when you're implementing
multiple interfaces, the class header

8
00:00:39.868 --> 00:00:44.920
must specify each of those interfaces
in this comma delimited list.

9
00:00:44.920 --> 00:00:49.412
So in this case, we have a class
called electronic book, and

10
00:00:49.412 --> 00:00:54.273
it's implementing two interfaces,
product and digital file.

11
00:00:54.273 --> 00:00:56.892
So that would be a comma delimited list.

12
00:00:56.892 --> 00:01:01.553
And then all of the abstract methods
that exist in both of those classes

13
00:01:01.553 --> 00:01:06.305
are going to be in this class would
need to be implemented in this class.

14
00:01:09.451 --> 00:01:13.908
If a class declares that it's gonna
implement multiple interfaces,

15
00:01:13.908 --> 00:01:17.012
it must, again,
provide the abstract method.

16
00:01:17.012 --> 00:01:23.750
So this one, electronic book, I have to
implement all methods from product and

17
00:01:23.750 --> 00:01:29.998
all abstract methods from digital file or
I call myself abstract as well.

18
00:01:33.543 --> 00:01:39.079
If more than one of the interfaces
that being implemented

19
00:01:39.079 --> 00:01:43.346
contains a method with the same signature,

20
00:01:43.346 --> 00:01:47.613
like look at this one
product has getSize and

21
00:01:47.613 --> 00:01:53.172
no parameters and so
does DigitalFile, so that's two.

22
00:01:53.172 --> 00:01:57.495
You've inherited two of these methods
that have the exact same signature.

23
00:01:57.495 --> 00:02:02.649
What you can do in the implementing
class in electronic book is just

24
00:02:02.649 --> 00:02:07.537
implement it one time and
that will satisfy that requirement.

25
00:02:07.537 --> 00:02:12.742
So you wouldn't add two methods
in your electronic book class.

26
00:02:12.742 --> 00:02:18.980
Now if there are multiple
interfaces being implemented and

27
00:02:18.980 --> 00:02:24.840
two or more of them contain
a method with the same name but

28
00:02:24.840 --> 00:02:27.597
a different return type.

29
00:02:27.597 --> 00:02:32.950
The class is going to have
an error when attempting

30
00:02:32.950 --> 00:02:38.183
to implement them because
there is a clash here.

31
00:02:38.183 --> 00:02:44.836
So even though I said I'm doing getSize,
the one that returns a string,

32
00:02:44.836 --> 00:02:49.538
it's an error,
who can tell why that's an error?

33
00:02:54.175 --> 00:02:57.042
&gt;&gt; Because the return type isn't
necessarily the same thing as a signature

34
00:02:57.042 --> 00:03:00.869
so it doesn't know what to look for
&gt;&gt; Exactly the return type is not a part

35
00:03:00.869 --> 00:03:02.516
of a method signature.

36
00:03:02.516 --> 00:03:06.634
The method signature is
the name in the parameter list.

37
00:03:06.634 --> 00:03:13.209
So technically, both of those methods
have the same signature, right?

38
00:03:13.209 --> 00:03:18.901
And now Java is smart enough to realize,
wait, they have the same signature but

39
00:03:18.901 --> 00:03:24.120
they have a different return type,
this is a clash, you just can't do it.

40
00:03:27.794 --> 00:03:32.967
Right, in addition to abstract methods,

41
00:03:32.967 --> 00:03:37.423
interfaces can also contain default

42
00:03:37.423 --> 00:03:41.744
methods as well as static methods.

43
00:03:41.744 --> 00:03:44.226
So unlike abstract methods,

44
00:03:44.226 --> 00:03:49.201
both of these types of methods
do provide implementation.

45
00:03:49.201 --> 00:03:54.251
There was a point in time when interfaces
only contain abstract methods,

46
00:03:54.251 --> 00:03:58.079
like that was the definition
of our interface was,

47
00:03:58.079 --> 00:04:02.651
it's a special kind of class and
only contains abstract methods.

48
00:04:02.651 --> 00:04:07.072
But that has since changed
as the language has evolved.

49
00:04:07.072 --> 00:04:11.201
And they allow two other
kinds of methods now static,

50
00:04:11.201 --> 00:04:14.520
which we talked about quite a bit, right?

51
00:04:14.520 --> 00:04:16.679
Who remembers what's a static method?

52
00:04:16.679 --> 00:04:19.141
&gt;&gt; Methods that are available
without an instance.

53
00:04:19.141 --> 00:04:25.030
&gt;&gt; Okay, there we go and then default,
we have not talked about just yet,

54
00:04:25.030 --> 00:04:29.364
but I wanna show you what
that means with an example.

55
00:04:29.364 --> 00:04:35.932
So let's go ahead and
revisit our product interface.

56
00:04:35.932 --> 00:04:40.209
Let's say that after we've
already produced this code,

57
00:04:40.209 --> 00:04:46.682
it's already out in production, there's
already classes that are implementing it.

58
00:04:46.682 --> 00:04:51.605
We realize we wanna update this interface,
right?

59
00:04:51.605 --> 00:04:56.324
And we say yeah,
every product also has a price.

60
00:04:56.324 --> 00:05:03.300
So we wanna add those relative
methods to the product interface.

61
00:05:03.300 --> 00:05:05.372
So let's go back to product.

62
00:05:07.605 --> 00:05:10.726
And we're gonna add a couple
of methods for price.

63
00:05:10.726 --> 00:05:17.813
So we'll say double getPrice and
void setPrice,

64
00:05:22.465 --> 00:05:30.255
Okay, so we have a problem here, right?

65
00:05:30.255 --> 00:05:35.559
Again, by default,
these methods are implicitly

66
00:05:35.559 --> 00:05:40.008
abstract, they're implicitly public.

67
00:05:40.008 --> 00:05:45.625
Which means in the book class
we now have two methods that

68
00:05:45.625 --> 00:05:52.829
have not been implement So
if we are already in production,

69
00:05:52.829 --> 00:05:58.034
we already have like multiple classes
that are implementing this interface.

70
00:05:58.034 --> 00:06:01.372
You can see how this
poses quite a challenge.

71
00:06:01.372 --> 00:06:06.965
Once you've defined this interface,
you don't even wanna update it or

72
00:06:06.965 --> 00:06:11.376
you're gonna break everyone
who has implementing you.

73
00:06:11.376 --> 00:06:16.057
So that's why we have the default methods,

74
00:06:16.057 --> 00:06:21.752
they allow you to provide
a default implementation,

75
00:06:21.752 --> 00:06:26.939
so that they are not abstract and
your subclasses

76
00:06:26.939 --> 00:06:32.781
are not on the hook, for
implementing those methods.

77
00:06:32.781 --> 00:06:37.492
Now they can if they want to by
just overriding the method, but

78
00:06:37.492 --> 00:06:39.132
they don't have to.

79
00:06:39.132 --> 00:06:44.066
So, this avoids breaking all of
the implementing classes with

80
00:06:44.066 --> 00:06:46.306
these newly added methods.

81
00:06:46.306 --> 00:06:51.232
All right, so again,
these methods are called default methods.

82
00:06:51.232 --> 00:06:56.114
They're methods within
the interface that will allow

83
00:06:56.114 --> 00:07:00.572
the coder to provide
a default implementation for

84
00:07:00.572 --> 00:07:05.149
this, and
this ensures backward compatibility.

85
00:07:05.149 --> 00:07:09.062
All right, so
in order to make something default,

86
00:07:09.062 --> 00:07:13.251
you would simply write the word
default in front of it.

87
00:07:13.251 --> 00:07:17.908
So I can say default getPrice and

88
00:07:17.908 --> 00:07:24.990
then I would need to
provide an implementation.

89
00:07:24.990 --> 00:07:28.516
So, in here, this is really tricky,

90
00:07:28.516 --> 00:07:34.375
cause my initial thought is to
make this price be zero, right?

91
00:07:34.375 --> 00:07:38.569
Default initial, but what does that mean?

92
00:07:38.569 --> 00:07:43.658
Any class that has implemented me,
has inherited getPrice.

93
00:07:43.658 --> 00:07:49.376
If they are unaware, that I even
added this method then anyone who's

94
00:07:49.376 --> 00:07:55.014
using their class and they called
getPrice, so it's free is free.

95
00:07:55.014 --> 00:07:59.363
So you set this just be careful,
you can set it to whatever but

96
00:07:59.363 --> 00:08:03.648
some initial value so
that we're not losing a ton of money.

97
00:08:03.648 --> 00:08:08.827
Now if it's really that important
that the all implementing classes

98
00:08:08.827 --> 00:08:14.731
update to provide implementation for
this method, you just let stuff break.

99
00:08:14.731 --> 00:08:18.019
You make it a break and change,
you don't put a default method.

100
00:08:18.019 --> 00:08:22.233
Stuff won't compile, and
those authors will know,

101
00:08:22.233 --> 00:08:26.200
the interface was updated we
have to take care of that.

102
00:08:26.200 --> 00:08:29.201
&gt;&gt; Is there any way to
make it return a message,

103
00:08:29.201 --> 00:08:32.133
let's get a really complex application.

104
00:08:32.133 --> 00:08:35.193
Someone's trying to figure out,
well, okay, why is my code breaking?

105
00:08:35.193 --> 00:08:37.611
The interface updated, like director,

106
00:08:37.611 --> 00:08:41.205
return a message to the system
that's using this interface,

107
00:08:41.205 --> 00:08:45.368
like to return an error message to them so
they know what's happening.

108
00:08:45.368 --> 00:08:50.892
&gt;&gt; No, you wouldn't do that,
you just let it break.

109
00:08:50.892 --> 00:08:53.040
So when I go to open my stuff,

110
00:08:53.040 --> 00:08:58.158
I don't need a message from anybody
because I can see it right here.

111
00:08:58.158 --> 00:09:01.492
And he's straight up telling me
what's wrong and I say what?

112
00:09:01.492 --> 00:09:04.207
I haven't implemented all the methods,
how not,

113
00:09:04.207 --> 00:09:06.744
what methods am I supposed
to be implementing?

114
00:09:06.744 --> 00:09:10.556
And then you see, crap,
he added two new methods here.

115
00:09:14.680 --> 00:09:19.765
All right, so let's make this one default

116
00:09:19.765 --> 00:09:26.696
to setPrice ,I don't have
a variable to even set this to.

117
00:09:26.696 --> 00:09:33.225
So I can leave this as just the curly
braces alone, gives it a body.

118
00:09:33.225 --> 00:09:38.709
I can leave it just like that or
I can not make a default and

119
00:09:38.709 --> 00:09:43.042
force everybody [LAUGH]
to update their stuff

120
00:09:46.017 --> 00:09:50.990
Questions
&gt;&gt; It seems like default for getters and

121
00:09:50.990 --> 00:09:53.398
setters are less useful than
other methods, is that it?

122
00:09:53.398 --> 00:09:55.325
&gt;&gt; Yeah, yeah probably.

123
00:09:58.803 --> 00:10:03.549
Seems like with these interfaces,
basically what you're fundamentally doing

124
00:10:03.549 --> 00:10:08.433
is forcing whoever's using your interface
to make the promise that they're gonna

125
00:10:08.433 --> 00:10:12.078
fulfill whatever it is you're
telling them it needs to have.

126
00:10:12.078 --> 00:10:17.018
&gt;&gt; That's right, that's right, all right,

127
00:10:17.018 --> 00:10:21.962
let's talk about static
methods a bit more.

128
00:10:21.962 --> 00:10:28.099
Like default methods,
static methods provide implementation,

129
00:10:28.099 --> 00:10:33.141
they differ in that static
methods are not inherited,

130
00:10:33.141 --> 00:10:39.295
by the implementing classes and
so, they cannot be overwritten.

131
00:10:41.572 --> 00:10:42.355
Okay.

132
00:10:44.500 --> 00:10:49.313
So this means that an interface's
static methods are not

133
00:10:49.313 --> 00:10:54.034
available from the instance
of an implementing class.

134
00:10:54.034 --> 00:10:58.246
So here, let's say I had
a myStaticMethod and product,

135
00:10:58.246 --> 00:11:01.110
book would not be able to access that.

136
00:11:01.110 --> 00:11:04.547
However, we could if
we just said product.,

137
00:11:04.547 --> 00:11:09.396
again, remember static methods
do not require instantiation,

138
00:11:09.396 --> 00:11:13.556
which we wouldn't be able to
do on an interface anyway.

139
00:11:13.556 --> 00:11:17.840
And so to access that,
I would just say interface name dot and

140
00:11:17.840 --> 00:11:20.480
then access the method.

141
00:11:20.480 --> 00:11:24.334
All right,
key points to remember about interfaces,

142
00:11:24.334 --> 00:11:28.619
they cannot be instantiated,
just like abstract classes.

143
00:11:28.619 --> 00:11:32.024
Interfaces can be implemented by classes.

144
00:11:32.024 --> 00:11:38.052
They can be extended, but
only by other interfaces.

145
00:11:38.052 --> 00:11:44.847
Any class that implements an interface
has to implement all of its methods,

146
00:11:44.847 --> 00:11:51.024
all of its abstract methods, or
it must declare itself as abstract.

147
00:11:51.024 --> 00:11:55.699
And then by default, methods in
an interface are public and abstract.

148
00:11:56.950 --> 00:12:01.950
So you don't need that
explicit declaration of such.

149
00:12:01.950 --> 00:12:04.770
Notice we didn't put public,
we didn't put abstract.

150
00:12:05.800 --> 00:12:08.813
And then in addition to abstract methods,

151
00:12:08.813 --> 00:12:13.425
interfaces can also contain default and
static methods as well.

