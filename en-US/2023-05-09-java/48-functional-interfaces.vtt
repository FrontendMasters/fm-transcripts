WEBVTT

1
00:00:00.000 --> 00:00:02.695
So the next section is on
functional programming.

2
00:00:02.695 --> 00:00:06.079
This is another style of
development software.

3
00:00:06.079 --> 00:00:12.423
It uses mathematical functions on
an input set to produce an output set.

4
00:00:12.423 --> 00:00:18.288
Now while Java is an object
oriented programming language,

5
00:00:18.288 --> 00:00:23.463
it does provide
the java.util.function package,

6
00:00:23.463 --> 00:00:27.950
which hosts several functional interfaces.

7
00:00:27.950 --> 00:00:32.718
I think this might be all of them,
if none were added recently.

8
00:00:32.718 --> 00:00:37.816
But as you can see,
quite a bit of functional interfaces.

9
00:00:37.816 --> 00:00:40.304
So what is a functional interface anyway?

10
00:00:40.304 --> 00:00:46.391
Well, it's an interface that
has just one abstract method.

11
00:00:46.391 --> 00:00:52.892
And that one method is what lambda
expressions and method references.

12
00:00:52.892 --> 00:00:57.699
Remember, we just talked about those,
it's what they implement.

13
00:00:57.699 --> 00:01:03.144
So again, lambda expressions, well,
method references are a shortcut for

14
00:01:03.144 --> 00:01:06.425
lambda expressions, so same thing, right?

15
00:01:06.425 --> 00:01:12.207
But lambda expressions
are essentially an implementation.

16
00:01:12.207 --> 00:01:13.997
They're anonymous functions, right?

17
00:01:13.997 --> 00:01:18.630
They're an anonymous function
that is the implementation of

18
00:01:18.630 --> 00:01:22.913
the one abstract method within
a functional interface.

19
00:01:22.913 --> 00:01:28.870
So example,
this is a list of countries, yes.

20
00:01:28.870 --> 00:01:34.072
If we wanted to print each country,
we could use the for

21
00:01:34.072 --> 00:01:40.418
each in a lambda expression that
says to print each one out, okay?

22
00:01:40.418 --> 00:01:45.733
The lambda expression is
actually the implementation of

23
00:01:45.733 --> 00:01:51.944
the consumer functional interface
from the java.util package.

24
00:01:51.944 --> 00:01:54.802
So on line 9 here,

25
00:01:54.802 --> 00:01:59.810
this is the consumer interface.

26
00:01:59.810 --> 00:02:05.514
On line 9, we see that this
interface has one abstract

27
00:02:05.514 --> 00:02:10.474
method that accepts
a single input argument and

28
00:02:10.474 --> 00:02:13.574
it returns no result, okay?

29
00:02:13.574 --> 00:02:17.799
This is already in the Java util function
is not anything that I've written,

30
00:02:17.799 --> 00:02:19.100
I just pulled the code.

31
00:02:19.100 --> 00:02:26.537
Specifically, our lambda
expression is the implementation.

32
00:02:26.537 --> 00:02:34.073
The functional interfaces single abstract
method, which in this case is the accept.

33
00:02:34.073 --> 00:02:39.754
So what that is doing,
that c arrow system.out.println/c,

34
00:02:39.754 --> 00:02:46.707
it's saying, hey, make that the
implementation for that abstract method.

35
00:02:46.707 --> 00:02:51.146
So to illustrate this,
I've created a variable called print.

36
00:02:53.111 --> 00:02:55.671
Whose type is consumer.

37
00:02:55.671 --> 00:02:59.131
That's the functional
interface from java.util.

38
00:02:59.131 --> 00:03:06.213
When we call for each and
we pass in this interface,

39
00:03:06.213 --> 00:03:11.814
the implementation that we provided for

40
00:03:11.814 --> 00:03:15.780
accept is what is executed.

41
00:03:15.780 --> 00:03:21.090
So, I said,
the consumer equals c arrow println,

42
00:03:21.090 --> 00:03:25.166
give that whole object to forEach, and

43
00:03:25.166 --> 00:03:30.119
it's basically gonna
just execute that code.

44
00:03:30.119 --> 00:03:35.280
So even without the forEach,
we can call the abstract

45
00:03:35.280 --> 00:03:40.453
method from the consumer interface accept,
right?

46
00:03:40.453 --> 00:03:44.850
So I said, all right,
print as a consumer object, .accept.

47
00:03:44.850 --> 00:03:49.415
That's the abstract method, and
then I can pass in any object and

48
00:03:49.415 --> 00:03:54.653
it's going to use that implementation
that I specified on the first line.

49
00:03:54.653 --> 00:04:00.956
And it's using the hello world as
the input to that abstract method.

50
00:04:00.956 --> 00:04:03.299
Cuz remember it takes a single input.

51
00:04:03.299 --> 00:04:08.852
So in addition to the lambda expression,
we could also use the method reference.

52
00:04:08.852 --> 00:04:10.628
And this will work exactly the same.

53
00:04:10.628 --> 00:04:13.187
So consumer,
that's the example I just showed you.

54
00:04:13.187 --> 00:04:14.979
Of course, there are many more.

55
00:04:14.979 --> 00:04:21.823
These are the core functional interfaces
provided in that java.util package.

56
00:04:21.823 --> 00:04:23.198
So, I'll go through these.

57
00:04:23.198 --> 00:04:26.045
We have consumer we've
already talked about.

58
00:04:26.045 --> 00:04:27.405
We also have supplier.

59
00:04:27.405 --> 00:04:33.029
This returns a value, but
it does not accept any input.

60
00:04:33.029 --> 00:04:39.436
We have predicate which has a function
that accepts one argument as input and

61
00:04:39.436 --> 00:04:42.952
it returns a Boolean value as the output.

62
00:04:42.952 --> 00:04:48.992
We have function which accepts
one argument as input and

63
00:04:48.992 --> 00:04:51.954
then it produces a result.

64
00:04:51.954 --> 00:04:57.375
And then the other two there are specific
types of function operators.

65
00:04:57.375 --> 00:05:04.868
Such as the unary operator, an operation
that accepts a single argument as input,

66
00:05:04.868 --> 00:05:08.945
and then it returns
output of that same type.

67
00:05:08.945 --> 00:05:13.131
So notice with unary,
we have T as the type of input, and

68
00:05:13.131 --> 00:05:16.529
also T as the type that
will be returned back.

69
00:05:16.529 --> 00:05:18.597
So that implies that's the same.

70
00:05:18.597 --> 00:05:24.178
And then binary works kind of the same
way except it takes two parameters,

71
00:05:24.178 --> 00:05:30.137
both of the same type, and it returns
something of that same type, all right?

72
00:05:30.137 --> 00:05:36.837
So the remaining interfaces in this
package, the java.util.function,

73
00:05:36.837 --> 00:05:41.241
package there are specific
variations of these.

74
00:05:41.241 --> 00:05:42.835
So these are the core ones.

75
00:05:46.419 --> 00:05:52.991
Basically, given these and
the variations on them,

76
00:05:52.991 --> 00:05:58.978
the idea here is that
whatever lambda expression

77
00:05:58.978 --> 00:06:04.100
you come up with should meet one of these.

78
00:06:04.100 --> 00:06:06.905
Kind of have a lot of different ones for
you to choose from.

79
00:06:06.905 --> 00:06:11.884
So back to functional interfaces,
in addition to the one abstract method

80
00:06:11.884 --> 00:06:15.421
that's available in every
functional interface,

81
00:06:15.421 --> 00:06:19.541
the interface can also provide default and
static methods.

82
00:06:19.541 --> 00:06:22.590
So we talked about that when we
looked at interfaces, right?

83
00:06:22.590 --> 00:06:24.956
So functional interfaces are no different.

84
00:06:24.956 --> 00:06:27.217
They have that one abstract method, but

85
00:06:27.217 --> 00:06:30.090
they can also include
additional methods as well.

86
00:06:30.090 --> 00:06:34.971
So in this example,
this is the function interface, and

87
00:06:34.971 --> 00:06:40.066
this provides the default
method that's called andThen.

88
00:06:40.066 --> 00:06:44.229
Which will allow you to
perform another operation

89
00:06:44.229 --> 00:06:47.903
on the result from the previous operation.

90
00:06:47.903 --> 00:06:50.349
So here are two separate statements.

91
00:06:50.349 --> 00:06:55.525
We have square,
which uses a lambda expression to

92
00:06:55.525 --> 00:07:03.552
implement the apply method of the function
to return the square of the input.

93
00:07:03.552 --> 00:07:08.898
And then we have add,
which adds the input to itself.

94
00:07:08.898 --> 00:07:13.024
And then it returns the sum, so

95
00:07:13.024 --> 00:07:17.946
we could say first execute square and

96
00:07:17.946 --> 00:07:22.867
then execute add and then we could say

97
00:07:22.867 --> 00:07:27.008
apply all of this, all right?

98
00:07:27.008 --> 00:07:28.680
And when you say apply,

99
00:07:28.680 --> 00:07:33.287
that's when you provide the actual
input that you want it to use.

100
00:07:35.061 --> 00:07:38.756
And apply is the abstract
method in the class, right?

101
00:07:38.756 --> 00:07:42.515
So you give it that input and
you say, all right,

102
00:07:42.515 --> 00:07:47.192
with this input, I want you to
do what I specify for square and

103
00:07:47.192 --> 00:07:52.550
then what's this default method and
then do what I provided for add.

104
00:07:52.550 --> 00:07:55.061
So you would get 50 there.

105
00:08:01.200 --> 00:08:06.154
So while the functional interfaces
in the javautil.function package

106
00:08:06.154 --> 00:08:09.298
cover most of the use
cases that you may have.

107
00:08:09.298 --> 00:08:14.588
You can create your own functional
interface if you just need it to, right?

108
00:08:14.588 --> 00:08:19.660
If none of them fit the bill and you're
doing something really extraordinary,

109
00:08:19.660 --> 00:08:23.000
then you can create your
own functional interface.

110
00:08:23.000 --> 00:08:30.467
It's recommended that you use this
functional interface attribute.

111
00:08:30.467 --> 00:08:34.414
So you would just do add
functional interface and

112
00:08:34.414 --> 00:08:37.213
annotation is what it's called.

113
00:08:37.213 --> 00:08:39.950
So you would annotate this
with a functional interface.

114
00:08:39.950 --> 00:08:44.953
You don't have to, but
it's convention and it'll help you out.

115
00:08:44.953 --> 00:08:50.154
Because Java would then enforce that
you can only have one abstract method,

116
00:08:50.154 --> 00:08:55.366
which, if you wanna be a functional
interface, that's the rule, right?

117
00:08:55.366 --> 00:09:00.549
So, if you had that one abstract method,
then you would

118
00:09:00.549 --> 00:09:06.747
let the implementers know what
are the arguments if there are any.

119
00:09:06.747 --> 00:09:10.914
So in yours you say yeah,
I take three arguments or

120
00:09:10.914 --> 00:09:15.589
whatever, and
then the result that would be returned.

121
00:09:15.589 --> 00:09:19.306
So in this one, you specifically said,
I take three integers and

122
00:09:19.306 --> 00:09:21.277
I return an integer back, right?

123
00:09:21.277 --> 00:09:24.229
And some of those other
interfaces that we looked at,

124
00:09:24.229 --> 00:09:27.982
notice they didn't have a return
type that you were familiar with.

125
00:09:27.982 --> 00:09:30.843
They had things like T and R or whatever.

126
00:09:30.843 --> 00:09:36.373
So these are generic types,
where you can say, I don't really care,

127
00:09:36.373 --> 00:09:41.810
the type of the object,
I'm just gonna leave a placeholder here,,

128
00:09:41.810 --> 00:09:46.906
but, they can give me any object,
and I'm able to deal with it.

129
00:09:46.906 --> 00:09:52.159
Okay, optionally in your own custom
functional interface you can

130
00:09:52.159 --> 00:09:57.147
also include your static and
your default methods if you want.

