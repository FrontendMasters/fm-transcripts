WEBVTT

1
00:00:00.000 --> 00:00:05.348
So methods are things that break complex

2
00:00:05.348 --> 00:00:10.861
programs into small manageable pieces.

3
00:00:10.861 --> 00:00:14.631
So we've already been making
calls to some methods, right?

4
00:00:14.631 --> 00:00:19.139
We call system.out.println when
we want to print something.

5
00:00:19.139 --> 00:00:20.770
Println is a method.

6
00:00:20.770 --> 00:00:24.970
We call scanners next methods
when we want to input something.

7
00:00:24.970 --> 00:00:26.663
That's a method, right?

8
00:00:26.663 --> 00:00:32.088
So methods are designed
to be used by other code.

9
00:00:32.088 --> 00:00:37.922
Here's an example of a method declaration,
okay.

10
00:00:37.922 --> 00:00:40.000
This very first line of
the method is a header.

11
00:00:40.000 --> 00:00:43.421
It's called the method header.

12
00:00:43.421 --> 00:00:46.976
So I'll walk you through like
each piece of this method.

13
00:00:46.976 --> 00:00:51.158
So the very first part
is an access modifier.

14
00:00:51.158 --> 00:00:56.641
This could be public,
it could be protected, could be private.

15
00:00:56.641 --> 00:01:03.220
This indicates who has access to this
method outside of the class, all right.

16
00:01:03.220 --> 00:01:08.657
So, within the same class,
anyone can access the method,

17
00:01:08.657 --> 00:01:12.354
but then outside of the class you can then

18
00:01:12.354 --> 00:01:17.161
specify what other code is
able to call this method.

19
00:01:17.161 --> 00:01:21.275
Public means any method anywhere,

20
00:01:21.275 --> 00:01:25.393
any class can utilize this method.

21
00:01:25.393 --> 00:01:29.727
We'll talk about private and
protected in a bit.

22
00:01:29.727 --> 00:01:35.295
The next word here is
a non access modifier so

23
00:01:35.295 --> 00:01:40.411
valid ones are static you can use final,

24
00:01:40.411 --> 00:01:46.750
you can use abstract,
you can use synchronized.

25
00:01:46.750 --> 00:01:49.399
We'll get into what each of those mean.

26
00:01:49.399 --> 00:01:54.307
For now, we've been using static, okay?

27
00:01:54.307 --> 00:02:00.833
The access modifier, and the non-access
modifier, are both optional.

28
00:02:00.833 --> 00:02:02.893
You don't need either one of these.

29
00:02:02.893 --> 00:02:07.112
If you did not put public,
like you didn't put anything,

30
00:02:07.112 --> 00:02:11.865
it would default to protected,
which is a package level access.

31
00:02:11.865 --> 00:02:17.666
Meaning any other classes in the same
package can use this method but

32
00:02:17.666 --> 00:02:19.508
not outside of that.

33
00:02:19.508 --> 00:02:23.576
The next piece of this is the return type.

34
00:02:23.576 --> 00:02:29.551
So, all methods are required
to specify a return type.

35
00:02:29.551 --> 00:02:34.413
This means what is the data
type of the value that

36
00:02:34.413 --> 00:02:38.924
you will return back
to whoever called you.

37
00:02:38.924 --> 00:02:42.524
If you are not gonna return
anything because some methods,

38
00:02:42.524 --> 00:02:47.501
they just want to do some execution but
not necessarily returning anything back.

39
00:02:47.501 --> 00:02:54.651
If you still have to specify
a return type it would just be void.

40
00:02:54.651 --> 00:02:58.470
The next part of the method
header is the name of the method.

41
00:02:58.470 --> 00:03:03.859
So the name of the method by convention
starts with a lowercase letter.

42
00:03:03.859 --> 00:03:09.119
If you use camel case and
it's typically in the form

43
00:03:09.119 --> 00:03:13.779
of a verb because methods
do something righ?

44
00:03:13.779 --> 00:03:18.942
So for me to call a method you
want a name that represents

45
00:03:18.942 --> 00:03:24.676
what it is that method does so
I know to call that one, right?

46
00:03:24.676 --> 00:03:27.481
This isn't always the case
that's also convention.

47
00:03:27.481 --> 00:03:32.069
Sometimes that just doesn't make sense and
that's okay as well.

48
00:03:32.069 --> 00:03:35.975
But in this case we have calculate sum.

49
00:03:35.975 --> 00:03:40.284
The exception here is also for
methods that return a boolean value.

50
00:03:40.284 --> 00:03:44.765
So usually those you're
asking some sort of question.

51
00:03:44.765 --> 00:03:49.002
So those methods names
reflect a question like,

52
00:03:49.002 --> 00:03:52.835
is number positive or something like that.

53
00:03:52.835 --> 00:03:58.829
So boolean methods typically start with
like is or does or something like that.

54
00:03:58.829 --> 00:04:04.188
The next part of the method
header is the parameter list.

55
00:04:04.188 --> 00:04:08.366
Symbol which is enclosed inside
of a set of parentheses,

56
00:04:08.366 --> 00:04:11.684
the parameter list is required for
methods.

57
00:04:11.684 --> 00:04:17.704
Even if there are no parameters, you
would have an empty set of parentheses.

58
00:04:17.704 --> 00:04:23.104
What this parameter list
indicates is that this is the data

59
00:04:23.104 --> 00:04:27.848
that you have to send to me
the method if you call me.

60
00:04:27.848 --> 00:04:29.447
If you call me, I need some data.

61
00:04:29.447 --> 00:04:32.715
So for example,
calculate some is saying, well,

62
00:04:32.715 --> 00:04:37.283
I need two numbers to calculate,
otherwise I can't help you, right?

63
00:04:37.283 --> 00:04:42.234
And you specify the data
type of the parameter you

64
00:04:42.234 --> 00:04:47.075
need as well as the name
that you are calling it.

65
00:04:47.075 --> 00:04:51.080
This name, like number 1 and
number 2, is local and

66
00:04:51.080 --> 00:04:55.797
specific to this method,
it means nothing to anyone other than

67
00:04:55.797 --> 00:05:00.704
some sort of hint about what type
of data are you looking for here?

68
00:05:00.704 --> 00:05:04.968
So when you call me and I say, give me
two numbers, number 1 and number 2,

69
00:05:04.968 --> 00:05:06.617
you have a good indication.

70
00:05:06.617 --> 00:05:11.687
Okay, I get what they want here,
all right.

71
00:05:11.687 --> 00:05:18.564
So methods are uniquely identified
within a class by their signatures.

72
00:05:18.564 --> 00:05:22.837
And the signature of a method
is the name of the method

73
00:05:22.837 --> 00:05:25.667
coupled with the parameter list.

74
00:05:25.667 --> 00:05:29.881
And by parameter lists,
the names of the variables are really

75
00:05:29.881 --> 00:05:34.189
irrelevant is the data types in
the order in which they appear.

76
00:05:34.189 --> 00:05:39.626
So if I were to say what was
the signature of this method,

77
00:05:39.626 --> 00:05:44.035
it would be calculate some int, int, okay?

78
00:05:44.035 --> 00:05:49.758
Now, inside of the curly braces of
the method is the method's body.

79
00:05:49.758 --> 00:05:55.400
This is all of the code that would
be executed if you call this method.

80
00:05:55.400 --> 00:06:00.108
So here we're going to,
add number 1 to number 2.

81
00:06:00.108 --> 00:06:03.058
We're gonna store that
into a variable call sum.

82
00:06:03.058 --> 00:06:09.498
And then the method if it did specify
a return type other than void,

83
00:06:09.498 --> 00:06:14.336
the last line of the method
must return the value.

84
00:06:14.336 --> 00:06:18.624
And it has to be of the type that you say
you were gonna return back because whoever

85
00:06:18.624 --> 00:06:20.676
called you was expecting that right?

86
00:06:20.676 --> 00:06:23.757
So like when we call scanner.next double,

87
00:06:23.757 --> 00:06:27.933
we are expecting a double to
be returned back to us, right?

88
00:06:30.471 --> 00:06:34.353
Questions on method definition.
&gt;&gt; Just one.

89
00:06:34.353 --> 00:06:34.860
&gt;&gt; Yeah.

90
00:06:34.860 --> 00:06:36.855
&gt;&gt; I assume like that's static keyword,
were earlier.

91
00:06:36.855 --> 00:06:40.329
The very start, you mentioned
Java is like statically typed.

92
00:06:40.329 --> 00:06:42.458
Does that have anything
to do with like that?

93
00:06:42.458 --> 00:06:45.898
&gt;&gt; No, so
this static is more like you don't, and

94
00:06:45.898 --> 00:06:51.144
I'll talk about it more after we talk
about objects, but you don't have

95
00:06:51.144 --> 00:06:56.835
to instantiate an object instead of state
and everything in order to use them.

96
00:06:56.835 --> 00:07:03.971
You can just use the method without that,
this way it means all right.

97
00:07:03.971 --> 00:07:05.962
So I guess if I were to think about it,

98
00:07:05.962 --> 00:07:09.320
I don't need to do like anything
dynamic in order to use this.

99
00:07:09.320 --> 00:07:12.853
It's a static kind of flat,

100
00:07:12.853 --> 00:07:17.867
use it whenever you want to kind of method

