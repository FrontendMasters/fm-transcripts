WEBVTT

1
00:00:00.000 --> 00:00:06.422
So there are also stream operations
that allow you to manipulate the data.

2
00:00:06.422 --> 00:00:10.027
Again, not in their original source, but

3
00:00:10.027 --> 00:00:15.246
within the stream itself, and
one of those operation is map.

4
00:00:15.246 --> 00:00:19.753
So not map that we saw before,
not the data structure map, but

5
00:00:19.753 --> 00:00:22.796
map in functional programming, right?

6
00:00:22.796 --> 00:00:27.817
So let's go ahead and
make a new method and

7
00:00:27.817 --> 00:00:31.556
we'll call that one mapDemo.

8
00:00:35.427 --> 00:00:40.168
And we're gonna use map to
convert every element in

9
00:00:40.168 --> 00:00:43.703
the stream to uppercase, all right?

10
00:00:43.703 --> 00:00:48.276
So let's say veggies.stream

11
00:00:52.225 --> 00:00:54.871
.map, and

12
00:00:54.871 --> 00:01:00.960
this map takes a function.

13
00:01:00.960 --> 00:01:03.975
So that's the functional
interface that it takes, right?

14
00:01:03.975 --> 00:01:07.519
So now you're starting to see these
functional interfaces in play.

15
00:01:07.519 --> 00:01:12.241
Basically, remember the definitions that
we had for those functional interfaces.

16
00:01:12.241 --> 00:01:16.972
It takes an argument, and
it returns something of the same type, or

17
00:01:16.972 --> 00:01:20.709
it takes an argument,
it returns a Boolean, right?

18
00:01:20.709 --> 00:01:23.901
So you start seeing how those
functional interfaces come in play.

19
00:01:23.901 --> 00:01:28.907
Whatever you put in here is the
implementation for its abstract method.

20
00:01:28.907 --> 00:01:33.518
So for function,
we can just give it a method, so

21
00:01:33.518 --> 00:01:38.698
we'll say string,
this was a good question earlier.

22
00:01:38.698 --> 00:01:44.956
Say, when we use the method reference,
do we have to use static methods?

23
00:01:44.956 --> 00:01:49.056
No, so I'm gonna use string here and

24
00:01:49.056 --> 00:01:54.756
toUpperCase just to give you some variety,
okay?

25
00:01:56.717 --> 00:02:01.465
So that's the same as if I said V arrow

26
00:02:01.465 --> 00:02:06.221
V.toUpperCase and then like gave it

27
00:02:15.023 --> 00:02:18.488
So map returns a resulting stream.

28
00:02:18.488 --> 00:02:22.924
Basically you start to see like,
you can get a feel what is

29
00:02:22.924 --> 00:02:27.742
intermediate versus was terminal for
each printing things.

30
00:02:27.742 --> 00:02:33.391
Why would they return that same thing
back to me whereas filter is narrowing

31
00:02:33.391 --> 00:02:38.603
the list down, so that makes sense
to return that back to me, right?

32
00:02:38.603 --> 00:02:43.263
Any match in all matches of boolean,
why would they give me the stream back?

33
00:02:43.263 --> 00:02:44.984
It's just a yes or no answer.

34
00:02:44.984 --> 00:02:48.038
So you start getting a feel of
which one of these are terminal,

35
00:02:48.038 --> 00:02:49.579
which ones are intermediate?

36
00:02:49.579 --> 00:02:52.556
This is modifying the stream in some way.

37
00:02:52.556 --> 00:02:55.746
So it's gonna return that
modified stream back to me.

38
00:02:55.746 --> 00:02:59.848
So let's just go ahead and
print it out so we can say for each.

39
00:02:59.848 --> 00:03:03.674
And then let's print it out.

40
00:03:03.674 --> 00:03:10.694
So system.out::println, okay?

41
00:03:10.694 --> 00:03:16.858
Make sure you call it
from your main method.

42
00:03:22.234 --> 00:03:27.526
So notice I have the entire
list printed in uppercase.

43
00:03:27.526 --> 00:03:31.585
Again, it did not modify the initial list.

44
00:03:31.585 --> 00:03:35.035
This is the stream that was modified, so

45
00:03:35.035 --> 00:03:40.215
that is modifying the data that
is in the stream, all right?

46
00:03:40.215 --> 00:03:41.413
We're gonna do another one.

47
00:03:41.413 --> 00:03:42.797
Let's do reduce.

48
00:03:52.191 --> 00:03:58.320
So we'll say public static
void reduceDemo, yes.

49
00:03:58.320 --> 00:04:04.635
What the reduce does is essentially like,
don't think of reduced like a math terms,

50
00:04:04.635 --> 00:04:09.210
think of reduce as in cooking terms,
this is how I think of it.

51
00:04:09.210 --> 00:04:13.686
When you're cooking, any chefs in
the room, people that cook often?

52
00:04:13.686 --> 00:04:18.543
All right, so when you're cooking,
some sort of broth or sauce,

53
00:04:18.543 --> 00:04:20.548
we say, I gotta reduce it.

54
00:04:20.548 --> 00:04:24.161
I wanna kind of basically smush it down or
whatever.

55
00:04:24.161 --> 00:04:26.249
And that's the same way that this works.

56
00:04:26.249 --> 00:04:31.514
So if we were to use,
let's just use veggies,

57
00:04:31.514 --> 00:04:37.320
and say reduce, yeah,
stream.reduce, sorry.

58
00:04:39.853 --> 00:04:40.971
Reduce.

59
00:04:40.971 --> 00:04:46.594
What you need to do with this is you're

60
00:04:46.594 --> 00:04:52.407
going to give it a couple of arguments.

61
00:04:52.407 --> 00:04:57.399
So you can give it basically like
a binary operator functional

62
00:04:57.399 --> 00:05:02.679
interface implementation or
you can start off with an identity,

63
00:05:02.679 --> 00:05:06.721
I see a lot of times people
start with an identity.

64
00:05:06.721 --> 00:05:10.387
So starting with the identity
is basically like,

65
00:05:10.387 --> 00:05:13.278
let me give you the place to start from.

66
00:05:13.278 --> 00:05:18.901
So if you were reducing a string,
usually that would be empty string.

67
00:05:18.901 --> 00:05:20.863
So start with nothing, right?

68
00:05:20.863 --> 00:05:25.329
And then let me give you some
sort of lambda expression.

69
00:05:25.329 --> 00:05:30.152
So the binary operator again,
if we remember when we looked at

70
00:05:30.152 --> 00:05:35.254
that binary signature,
it takes two arguments of the same type,

71
00:05:35.254 --> 00:05:39.266
and then it returns back
a result of that same type.

72
00:05:39.266 --> 00:05:47.542
So here we're gonna need two variables in
our lambda expression, we'll say a and b.

73
00:05:47.542 --> 00:05:50.658
And we basically do the arrow function and

74
00:05:50.658 --> 00:05:53.691
say what do we want to happen with a and
b.

75
00:05:53.691 --> 00:05:59.698
And a and b in this instance and reduce
it would be like the first string and

76
00:05:59.698 --> 00:06:02.370
then the second string, okay?

77
00:06:02.370 --> 00:06:07.040
You'll have a result,
that resulting string in the next part,

78
00:06:07.040 --> 00:06:09.381
the next element in the stream.

79
00:06:09.381 --> 00:06:11.162
How do you want these combined?

80
00:06:11.162 --> 00:06:12.960
How do you want these reduced together?

81
00:06:12.960 --> 00:06:14.943
So I can say, all right.

82
00:06:14.943 --> 00:06:19.035
I want you to have the first string, and

83
00:06:19.035 --> 00:06:24.367
then I want you to add
a little pipe in between them,

84
00:06:24.367 --> 00:06:28.473
and then add the second string, okay?

85
00:06:28.473 --> 00:06:35.453
So what you've done there is
essentially reduce the entire

86
00:06:35.453 --> 00:06:41.045
stream into one string
that is pipe delimited.

87
00:06:45.298 --> 00:06:49.825
Based on gut feeling, do you think
reduce is the intermediate or terminal?

88
00:06:49.825 --> 00:06:53.378
&gt;&gt; Terminal meaning.

89
00:06:53.378 --> 00:06:57.316
&gt;&gt; It returns a string back to me.

90
00:06:57.316 --> 00:06:58.302
That's right.

91
00:06:58.302 --> 00:06:59.107
Okay, nevermind.

92
00:06:59.107 --> 00:07:01.070
So it does return a string back to me.

93
00:07:01.070 --> 00:07:06.144
The stream that we had is squished
it together based on how we say

94
00:07:06.144 --> 00:07:11.987
we wanted to squish and then say
here's your squished TECHSPEC stream,

95
00:07:11.987 --> 00:07:14.793
it's no longer a stream, right?

96
00:07:14.793 --> 00:07:16.898
Okay, so that was a trick question.

97
00:07:16.898 --> 00:07:18.687
I even tricked myself.

98
00:07:18.687 --> 00:07:22.253
[LAUGH] I don't have a stream anymore.

99
00:07:22.253 --> 00:07:24.886
I have a resulting string at that point,
right?

100
00:07:24.886 --> 00:07:28.767
So with that string,
you could then do whatever you want.

101
00:07:28.767 --> 00:07:33.935
So I could essentially print
this whole thing out so

102
00:07:33.935 --> 00:07:40.918
I can put this whole thing in a print
statement for example like such.

103
00:07:45.799 --> 00:07:50.147
All right, so let's go ahead and
print this out.

104
00:07:50.147 --> 00:07:52.260
Let's see what we've done here.

105
00:07:52.260 --> 00:07:53.518
All right, great.

106
00:07:53.518 --> 00:07:58.900
So notice now is a single string all like,
smushed together.

107
00:07:58.900 --> 00:08:04.066
So if I wanted to do any,
like other operations before reduce,

108
00:08:04.066 --> 00:08:06.413
I could definitely do that.

109
00:08:06.413 --> 00:08:11.676
So before I call that terminal operation,

110
00:08:11.676 --> 00:08:16.945
what if I say, well, first sort of thing.

111
00:08:16.945 --> 00:08:21.111
So that'll take that collection,
turn it into a stream,

112
00:08:21.111 --> 00:08:26.817
sorted in alphabetical order, and then
smash it down to an individual string.

113
00:08:26.817 --> 00:08:32.674
And then if we print it that,
notice they're now in alphabetical order.

114
00:08:42.042 --> 00:08:46.450
All right,
now I wanted to also show you integers.

115
00:08:46.450 --> 00:08:51.851
So that's where I mostly see reduce used.

116
00:08:51.851 --> 00:08:54.313
So we'll make another example here.

117
00:08:57.354 --> 00:09:02.011
Public static void.

118
00:09:02.011 --> 00:09:06.880
And we'll say intReduceDemo.

119
00:09:09.605 --> 00:09:12.768
So we're gonna make a list of integers.

120
00:09:18.717 --> 00:09:24.150
And I'm just gonna add
a couple of even numbers here,

121
00:09:28.840 --> 00:09:36.246
And then I can say numbers.stream,
Dot reduce, and

122
00:09:36.246 --> 00:09:42.114
I mean the arguments for reduce do not
change just because it's a number, right?

123
00:09:42.114 --> 00:09:43.509
Still the same ones.

124
00:09:43.509 --> 00:09:47.314
So I wanna give it an identity,
meaning where do I wanna start?

125
00:09:47.314 --> 00:09:54.132
0, and then I wanna give it a binary.

126
00:09:54.132 --> 00:10:00.244
Operator, implementation,
so again, two arguments.

127
00:10:00.244 --> 00:10:06.527
So given the first two numbers,
how do you want this reduced?

128
00:10:06.527 --> 00:10:12.435
I say, you know what, go ahead and
add a to b, If i add a to b,

129
00:10:12.435 --> 00:10:18.006
who can tell me what's
happening to the entire stream?

130
00:10:20.752 --> 00:10:22.498
What would the end result kind of be?

131
00:10:22.498 --> 00:10:23.675
&gt;&gt; It's getting summed.

132
00:10:23.675 --> 00:10:25.782
&gt;&gt; It's summing the whole stream up,
right?

133
00:10:25.782 --> 00:10:29.530
So I'm saying go through this whole thing,
take the first number,

134
00:10:29.530 --> 00:10:31.121
add it to the second number.

135
00:10:31.121 --> 00:10:32.540
Once it does that, it has a sum.

136
00:10:32.540 --> 00:10:34.396
That sum becomes the first number.

137
00:10:34.396 --> 00:10:35.445
That becomes a.

138
00:10:35.445 --> 00:10:40.495
It goes to the next part, add it,
add it, add it, all right?

139
00:10:44.869 --> 00:10:47.621
So that accumulates all of the variables.

140
00:10:47.621 --> 00:10:51.653
So this is when I really see reduced use
with numbers or something like that.

141
00:10:51.653 --> 00:10:55.044
And you wanna know the sum of the whole
thing or something like that.

142
00:10:55.044 --> 00:10:58.328
&gt;&gt; What is that returning then?

143
00:10:58.328 --> 00:11:03.369
&gt;&gt; That would give you an integer
variable back, I think.

144
00:11:03.369 --> 00:11:09.923
Yeah, so whatever the, remember, it gives
you the thing of the same type back.

145
00:11:09.923 --> 00:11:12.904
So we gave it integers,
it should give us an integer back.

146
00:11:12.904 --> 00:11:14.090
Can I assign this?

147
00:11:14.090 --> 00:11:14.942
Let's see.

148
00:11:14.942 --> 00:11:18.213
See, that's when var comes in and you're
like, I don't know what I'm getting back.

149
00:11:18.213 --> 00:11:21.172
Okay, var sum.

150
00:11:21.172 --> 00:11:22.582
Let's see what happens.

151
00:11:22.582 --> 00:11:24.373
Yes, so I got an integer back.

152
00:11:24.373 --> 00:11:28.585
&gt;&gt; And then you could throw that
out into like a system out.

153
00:11:28.585 --> 00:11:31.080
&gt;&gt; Yeah, so
let's just like print out the value.

154
00:11:31.080 --> 00:11:38.010
So if we set out some, right,
so I gotta call this method.

155
00:11:41.698 --> 00:11:44.342
I think I should get 30
back if my math is right.

156
00:11:47.757 --> 00:11:50.350
Okay, let's run this.

157
00:11:50.350 --> 00:11:53.204
Yeah, got 30 back, okay?

