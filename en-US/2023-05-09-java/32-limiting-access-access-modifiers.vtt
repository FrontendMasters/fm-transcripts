WEBVTT

1
00:00:00.000 --> 00:00:04.296
When a subclass inherits from
a superclass not everything is inherited.

2
00:00:04.296 --> 00:00:07.845
As we saw,
those private fields were not inherited.

3
00:00:07.845 --> 00:00:12.320
But there's a few other things
that are not inherited as well,

4
00:00:12.320 --> 00:00:14.015
such as constructors.

5
00:00:14.015 --> 00:00:17.629
Constructors are not
inherited technically,

6
00:00:17.629 --> 00:00:21.340
they are not considered
as members of the class.

7
00:00:21.340 --> 00:00:25.469
The members of the class are the fields
in the methods, all right?

8
00:00:25.469 --> 00:00:27.890
So they are not inherited.

9
00:00:27.890 --> 00:00:32.645
All of the public and
the protected members so the public and

10
00:00:32.645 --> 00:00:39.036
protected fields, public and protected
methods those are indeed inherited.

11
00:00:39.036 --> 00:00:43.377
But the private members are not, okay.

12
00:00:43.377 --> 00:00:47.554
Also, if there are any final methods or

13
00:00:47.554 --> 00:00:54.654
any final fields meaning they had
that word final in front of them.

14
00:00:54.654 --> 00:00:59.012
They cannot be changed or
anything like that.

15
00:00:59.012 --> 00:01:03.942
These are inherited but
they cannot be overridden.

16
00:01:03.942 --> 00:01:04.523
That makes sense, right?

17
00:01:04.523 --> 00:01:08.169
You said this is the final
implementation for this.

18
00:01:08.169 --> 00:01:13.691
In the square class here, we were able
to use the fields size and length.

19
00:01:13.691 --> 00:01:16.154
Remember, we did that in our code and

20
00:01:16.154 --> 00:01:20.378
that's because we inherited
those from the Rectangle class.

21
00:01:20.378 --> 00:01:24.953
And the reason that we were able to
inherit them is because we had to change

22
00:01:24.953 --> 00:01:25.779
it, right?

23
00:01:25.779 --> 00:01:28.744
To protect it in order to do so.

24
00:01:28.744 --> 00:01:33.452
If they're marked as protected, public or

25
00:01:33.452 --> 00:01:40.334
if there's no access modifier
at all it defaults to protected.

26
00:01:40.334 --> 00:01:43.384
And so we will be able to inherit them.

27
00:01:43.384 --> 00:01:47.852
If any of those were private then
square would not inherit it.

28
00:01:47.852 --> 00:01:52.557
If it tried to use it as we saw,
you get a compilation error.

29
00:01:52.557 --> 00:01:56.832
&gt;&gt; So if you want to explicitly
expose one of these methods for

30
00:01:56.832 --> 00:01:59.372
a class you have to mark it public.

31
00:01:59.372 --> 00:02:03.101
If you're not
&gt;&gt; Are protected.

32
00:02:03.101 --> 00:02:05.331
Yes.

33
00:02:05.331 --> 00:02:11.112
What's the difference between public and
protected?

34
00:02:11.112 --> 00:02:12.933
&gt;&gt; Package access.

35
00:02:12.933 --> 00:02:18.367
&gt;&gt; Package access or
not even so that's true but

36
00:02:18.367 --> 00:02:21.801
also with inheritance too.

37
00:02:21.801 --> 00:02:26.754
So even if I'm in a different package,
so for example rectangle is

38
00:02:26.754 --> 00:02:31.626
in our objects package and
square is in our inheritance package.

39
00:02:31.626 --> 00:02:34.416
But those fields are protected so
we're able to...

40
00:02:34.416 --> 00:02:38.323
So basically,
if you're in the same package or

41
00:02:38.323 --> 00:02:43.907
if you're a subclass then you'll
have access to protected stuff.

42
00:02:43.907 --> 00:02:48.054
If you're not a subclass and
you're not in the same package,

43
00:02:48.054 --> 00:02:50.938
you do not have access to protected stuff.

44
00:02:50.938 --> 00:02:52.911
Public everyone has access.

45
00:02:55.901 --> 00:03:02.846
Private no one has access but
that class, all right.

46
00:03:02.846 --> 00:03:08.764
Okay, so let's talk about the access
modifiers a little bit more.

47
00:03:08.764 --> 00:03:11.735
Notice for
squares calculate perimeter method.

48
00:03:11.735 --> 00:03:15.002
It has a public access modifier.

49
00:03:15.002 --> 00:03:18.726
So when we overrode this method,

50
00:03:18.726 --> 00:03:22.988
we had to declare it as public as well.

51
00:03:22.988 --> 00:03:29.008
If we were to try to change
it to anything stricter,

52
00:03:29.008 --> 00:03:31.669
we would get an error.

53
00:03:31.669 --> 00:03:36.507
So if I'm overriding a method it

54
00:03:36.507 --> 00:03:41.531
has to be the same or less strict.

55
00:03:41.531 --> 00:03:44.307
It cannot be more strict, all right.

56
00:03:44.307 --> 00:03:47.201
Now it doesn't mean that
we can't change it right.

57
00:03:47.201 --> 00:03:52.968
Like I said,
it could be something that is less strict.

58
00:03:52.968 --> 00:03:57.640
So for example, a rectangle here if
we had this method be protected.

59
00:03:57.640 --> 00:04:03.267
And then in square, we overrode it and
change it to public then that's fine.

60
00:04:03.267 --> 00:04:06.941
That's fine to do.

61
00:04:06.941 --> 00:04:11.328
&gt;&gt; Is there any particular
reason Java was set up that way?

62
00:04:11.328 --> 00:04:15.386
Or you can't make it l more strict,
I guess?

63
00:04:15.386 --> 00:04:18.922
&gt;&gt; So you're inheriting something but

64
00:04:18.922 --> 00:04:23.603
then you're changing like
who has access to it.

65
00:04:23.603 --> 00:04:25.981
I don't know.
It just feels wrong [LAUGH] feels like

66
00:04:25.981 --> 00:04:27.114
a wrong thing to do.

67
00:04:27.114 --> 00:04:29.107
I don't know like the exact reason.

68
00:04:29.107 --> 00:04:34.415
But I know it's limiting access where that

69
00:04:34.415 --> 00:04:40.470
wasn't what was intended
from the super class.

