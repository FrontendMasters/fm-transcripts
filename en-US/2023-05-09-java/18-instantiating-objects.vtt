WEBVTT

1
00:00:00.000 --> 00:00:03.830
So great,
now we're going to instantiate an object.

2
00:00:03.830 --> 00:00:07.999
So we're gonna create our
first object using that

3
00:00:07.999 --> 00:00:10.984
Rectangle class that we just made.

4
00:00:10.984 --> 00:00:16.058
So we're gonna write a class
that creates instances of

5
00:00:16.058 --> 00:00:21.253
Rectangle to find the total
area of two rooms in a house.

6
00:00:21.253 --> 00:00:23.251
So now you start seeing, okay,

7
00:00:23.251 --> 00:00:28.433
if I thought about this room that we're
in right now, this is a rectangle, right?

8
00:00:28.433 --> 00:00:34.327
So you start seeing how the real world
can be modeled as objects within Java,

9
00:00:34.327 --> 00:00:35.257
all right?

10
00:00:35.257 --> 00:00:40.297
So let's go back and
we're gonna create a new class,

11
00:00:40.297 --> 00:00:45.349
and we're gonna call this
one HomeAreaCalculator.

12
00:00:57.750 --> 00:00:59.719
All right, so let's make our main,

13
00:01:05.846 --> 00:01:10.397
And we're gonna create an instance
of the Rectangle class.

14
00:01:10.397 --> 00:01:15.933
Now, to do this,
it's like we did the scanner.

15
00:01:15.933 --> 00:01:20.982
Do the name of the class,
that it becomes the type.

16
00:01:20.982 --> 00:01:26.595
So, so far, we've looked at
primitive data types, int, Boolean,

17
00:01:26.595 --> 00:01:33.183
double, string, char, Rectangle or
any other object can also be a type, okay?

18
00:01:33.183 --> 00:01:40.051
So this has become our type, and then it's
a variable, we give the variable a name.

19
00:01:40.051 --> 00:01:44.583
So you can name this whatever you want,
I'm gonna name it room1.

20
00:01:47.301 --> 00:01:52.303
And then to instantiate the variable,
that means, I mean instantiate the object,

21
00:01:52.303 --> 00:01:57.105
that means to go ahead and create the
object, you're gonna use the keyword new.

22
00:01:57.105 --> 00:02:00.758
And then you're gonna call
one of its constructors.

23
00:02:00.758 --> 00:02:04.748
Remember if it did not define
any constructor at all,

24
00:02:04.748 --> 00:02:08.840
the default one will still
be available for you to use.

25
00:02:08.840 --> 00:02:11.480
We have two constructors,
so we can use either one,

26
00:02:11.480 --> 00:02:13.520
let's go ahead and use the default one.

27
00:02:13.520 --> 00:02:15.788
And for room2, we'll use the other one so

28
00:02:15.788 --> 00:02:18.120
I can show you
the difference between them.

29
00:02:18.120 --> 00:02:20.491
All right, so now we have room1, and

30
00:02:20.491 --> 00:02:23.991
we've called into the constructor
to instantiate it.

31
00:02:23.991 --> 00:02:26.678
So what's the length and
the width of room1 right now?

32
00:02:26.678 --> 00:02:27.358
&gt;&gt; Zero.

33
00:02:27.358 --> 00:02:34.257
&gt;&gt; Zero, because that's what we said
we were gonna do in our constructor.

34
00:02:34.257 --> 00:02:39.063
So using this object,
now we have access to all of the behavior,

35
00:02:39.063 --> 00:02:43.525
all of the methods that are defined
in the rectangle class.

36
00:02:43.525 --> 00:02:48.456
So I can say room1., boom and
we see everything that we've defined.

37
00:02:48.456 --> 00:02:55.365
So let's go ahead and set the length,
and we'll set the length to 50,

38
00:02:55.365 --> 00:03:01.155
and we'll set the width,
we can just set that to maybe 25.

39
00:03:02.824 --> 00:03:09.743
All right, and now I want to
create the area of this room.

40
00:03:09.743 --> 00:03:14.327
So I can say double areaOfRoom1

41
00:03:14.327 --> 00:03:18.579
= room1.calculateArea.

42
00:03:24.103 --> 00:03:26.313
So now we got an object going, all right?

43
00:03:26.313 --> 00:03:28.654
Let's do the same thing for room2.

44
00:03:28.654 --> 00:03:33.135
So this time,
we'll say Rectangle room2 = new Rectangle.

45
00:03:33.135 --> 00:03:37.936
And let's go ahead and call the other
constructor with the length and the width.

46
00:03:37.936 --> 00:03:43.541
And that way, we won't have to do
those method calls for the values.

47
00:03:43.541 --> 00:03:51.734
So we'll say 30, maybe 75, Okay?

48
00:03:51.734 --> 00:03:56.665
And now, I don't have to call
those setters anymore, so

49
00:03:56.665 --> 00:04:00.481
I can say room2.calculateArea, right?

50
00:04:00.481 --> 00:04:03.875
And let's go ahead and
store that in a variable.

51
00:04:03.875 --> 00:04:09.546
So we'll say double areaOfRoom2 =.

52
00:04:09.546 --> 00:04:13.889
All right, so you see the difference
between the two with the constructors.

53
00:04:13.889 --> 00:04:17.626
&gt;&gt; First, when you're using setters
[INAUDIBLE] you're setting it directly.

54
00:04:17.626 --> 00:04:23.261
&gt;&gt; Yeah, so I use the default constructor,
and then I use methods to set stuff up.

55
00:04:23.261 --> 00:04:27.706
And then because they did
provide me with one, cuz I mean,

56
00:04:27.706 --> 00:04:32.515
every time you use an object,
that specific object may not have

57
00:04:32.515 --> 00:04:38.162
the constructors that you need to set
everything up the way you want it to.

58
00:04:38.162 --> 00:04:43.015
So sometimes you may have to use one of
its constructors and then add a little

59
00:04:43.015 --> 00:04:47.265
bit more to it or something to set
its state the way you need it set.

60
00:04:47.265 --> 00:04:51.541
Or say, for example,
I created this rectangle, and

61
00:04:51.541 --> 00:04:53.829
then I did input from a user.

62
00:04:53.829 --> 00:04:58.393
And then I wanna set it as I'm getting
the input, so that allow me to be

63
00:04:58.393 --> 00:05:02.593
a little bit more flexible with
how I set the object up, right?

64
00:05:02.593 --> 00:05:07.080
So we want the prompt set to calculate
the total area of both of these rooms, so

65
00:05:07.080 --> 00:05:08.958
we can just add these together.

66
00:05:08.958 --> 00:05:16.237
totalArea = areaOfRoom1,
oops, I forgot my equal sign,

67
00:05:19.892 --> 00:05:24.549
+ areaOfRoom2.

68
00:05:24.549 --> 00:05:25.861
All right, and
then we can just print it out.

69
00:05:28.817 --> 00:05:30.356
Area of both rooms.

70
00:05:34.850 --> 00:05:41.262
All right, Amazing.

71
00:05:41.262 --> 00:05:45.278
&gt;&gt; So you didn't have to import the
Rectangle class because it's of the same

72
00:05:45.278 --> 00:05:45.875
package?

73
00:05:45.875 --> 00:05:48.156
&gt;&gt; Yes, very good, very good.

74
00:05:48.156 --> 00:05:55.644
So I did not have to import Rectangle
because it's in the same package.

75
00:05:55.644 --> 00:05:58.862
So if something is in the same package,
Java can find it.

76
00:05:58.862 --> 00:06:03.802
If this Rectangle class was outside
the package, and we'll try that later,

77
00:06:03.802 --> 00:06:06.008
like we did with scanner, right?

78
00:06:06.008 --> 00:06:06.635
&gt;&gt; Yeah.

79
00:06:06.635 --> 00:06:11.012
&gt;&gt; So scanner lives in another package,
which is why we always have to import it.

80
00:06:11.012 --> 00:06:13.626
&gt;&gt; But
if you commented out package objects,

81
00:06:13.626 --> 00:06:16.319
it would suddenly not know anything about.

82
00:06:16.319 --> 00:06:22.033
Yeah, it will complain that I don't
have a package declaration first,

83
00:06:22.033 --> 00:06:28.884
but let's just move, maybe move Rectangle
just for a moment, you all don't do this.

84
00:06:30.217 --> 00:06:33.175
Sure, oops, did I totally lose it?

85
00:06:37.532 --> 00:06:38.428
&gt;&gt; Have you tried?

86
00:06:38.428 --> 00:06:38.928
&gt;&gt; [INAUDIBLE] class.

87
00:06:41.797 --> 00:06:43.375
&gt;&gt; I do, well, that's pretty neat.

88
00:06:47.503 --> 00:06:48.994
How cool is that?

89
00:06:48.994 --> 00:06:50.802
All right, that's not what I wanted to do.

90
00:06:50.802 --> 00:06:59.525
[LAUGH] Okay,
let's just make a new Rectangle class.

91
00:07:05.551 --> 00:07:06.238
Okay, public.

92
00:07:12.115 --> 00:07:19.177
Okay, all right, and then when I come to
home calculator, now it does not, crap.

93
00:07:19.177 --> 00:07:24.117
All right, How do I say yes?

94
00:07:27.443 --> 00:07:30.812
Okay, [LAUGH] all right,
now it does not, no Rectangle, right?

95
00:07:30.812 --> 00:07:38.397
It's like,
I don't know what you're talking about.

96
00:07:38.397 --> 00:07:42.418
And then I would have to
import it from methods.

97
00:07:42.418 --> 00:07:45.323
All right, so let's move that back.

98
00:07:45.323 --> 00:07:49.357
[LAUGH] Okay, nice.

99
00:07:54.845 --> 00:07:58.327
How do I close this whole thing?

100
00:07:58.327 --> 00:07:59.660
Okay.

101
00:07:59.660 --> 00:08:06.489
All right, cool,
any other questions about this so far?

102
00:08:06.489 --> 00:08:09.949
&gt;&gt; Objects are just
collections of fields and

103
00:08:09.949 --> 00:08:13.609
values kind of modeling
a certain behavior.

104
00:08:13.609 --> 00:08:15.714
Objects, can they be composed
of other types of objects?

105
00:08:15.714 --> 00:08:19.876
Let's say, as an example,
you have a car that's a base, but

106
00:08:19.876 --> 00:08:23.970
then you might say a Ferrari or
a Ford or whatever, is that a-

107
00:08:23.970 --> 00:08:24.661
&gt;&gt; Yeah,

108
00:08:24.661 --> 00:08:29.505
so you could have more
specific types of objects.

109
00:08:29.505 --> 00:08:34.109
So you could have, for example,
we have this Rectangle as a generic thing.

110
00:08:34.109 --> 00:08:39.409
We could have created another class
called room that was more specific and

111
00:08:39.409 --> 00:08:43.524
it could be an extension of
the Rectangle class, right?

112
00:08:43.524 --> 00:08:48.171
And we'll talk more about that,
I think what you were asking is,

113
00:08:48.171 --> 00:08:51.227
could you have an object within an object?

114
00:08:51.227 --> 00:08:55.383
Yeah, you could do that sort of
thing as one of your fields.

115
00:08:55.383 --> 00:09:00.230
So in the Rectangle field right here,
I have primitive data types,

116
00:09:00.230 --> 00:09:05.687
doubles and ints, I could have another
object as a data type, for example.

117
00:09:05.687 --> 00:09:11.075
&gt;&gt; So you could have a shape object,
where rectangles always have four sides,

118
00:09:11.075 --> 00:09:13.782
but a circle might not, for example.

119
00:09:13.782 --> 00:09:14.884
&gt;&gt; Yeah.
&gt;&gt; You could say a rectangle is

120
00:09:14.884 --> 00:09:15.493
a kind of a shape.

121
00:09:15.493 --> 00:09:16.137
&gt;&gt; Yeah.

