WEBVTT

1
00:00:00.144 --> 00:00:05.147
Let's talk about overriding
inherited methods.

2
00:00:05.147 --> 00:00:08.685
So methods that we have
inherited from a superclass.

3
00:00:08.685 --> 00:00:11.774
What if we don't want
that implementation and

4
00:00:11.774 --> 00:00:15.029
we wanna override it to
do something different.

5
00:00:15.029 --> 00:00:18.567
That is allowed, all right?

6
00:00:18.567 --> 00:00:25.983
So we are going to create a square
class that inherits from rectangle and

7
00:00:25.983 --> 00:00:33.042
we're going to override its
calculate parameter method, right?

8
00:00:33.042 --> 00:00:37.914
Now, if we go to our IDE,
I'm gonna close these out.

9
00:00:42.838 --> 00:00:43.790
And remember.

10
00:00:48.496 --> 00:00:51.359
We already created a rectangle.

11
00:00:51.359 --> 00:00:54.178
Where did we create that?

12
00:00:54.178 --> 00:00:56.745
We created a rectangle in the objects.

13
00:00:56.745 --> 00:01:03.098
So just for fun, let's go ahead and
inherit from that class, okay?

14
00:01:03.098 --> 00:01:10.874
So we'll make a new Java class
we'll call this one square.

15
00:01:10.874 --> 00:01:14.715
And in order to inherit,
what must we write.

16
00:01:14.715 --> 00:01:15.367
&gt;&gt; Extends.

17
00:01:15.367 --> 00:01:18.850
&gt;&gt; Extends, and what else?

18
00:01:18.850 --> 00:01:21.975
&gt;&gt; And the parent class, rectangle.

19
00:01:21.975 --> 00:01:24.891
&gt;&gt; Rectangle, all right?

20
00:01:24.891 --> 00:01:31.374
And so, now, this square class
is inherited from rectangle.

21
00:01:31.374 --> 00:01:35.671
Rectangle was not in this package,
so, we did need to import it.

22
00:01:35.671 --> 00:01:40.978
When we inherited from the rectangle
class, we get all of the rectangles

23
00:01:40.978 --> 00:01:45.679
goodies for free,
including the calculate parameter method.

24
00:01:45.679 --> 00:01:53.300
However, we do want to override that
to a specific calculation for square.

25
00:01:53.300 --> 00:01:56.330
So in order to override it.

26
00:01:56.330 --> 00:02:00.939
We're going to recreate that method,
it has to have

27
00:02:00.939 --> 00:02:05.989
the exact same signature,
of the method you inherited.

28
00:02:05.989 --> 00:02:12.319
So, I never try to type it out,
cuz I might make a mistake, right?

29
00:02:12.319 --> 00:02:16.582
And instead I just go ahead and
copy, the signature.

30
00:02:16.582 --> 00:02:22.468
So we'll just copy this from rectangle and

31
00:02:22.468 --> 00:02:27.219
we'll paste it inside of square.

32
00:02:30.425 --> 00:02:37.320
And to override this we will
simply change the body, okay?

33
00:02:37.320 --> 00:02:40.988
So we change it to whatever
we want right here.

34
00:02:40.988 --> 00:02:46.085
Before we change the body,
now I copied this over, right?

35
00:02:46.085 --> 00:02:50.595
There's another measure you can take
just in case you type it out yourself.

36
00:02:50.595 --> 00:02:55.750
And it's also just a good practice,
convention not required.

37
00:02:55.750 --> 00:03:01.796
But you can do an @override
above the method.

38
00:03:01.796 --> 00:03:06.747
This tells Java and
also tells any other programmer that might

39
00:03:06.747 --> 00:03:11.125
run across this code that
this method you inherited and

40
00:03:11.125 --> 00:03:14.570
you're overriding its implementation.

41
00:03:14.570 --> 00:03:19.862
Now, this is helpful with
the compiler because let's say,

42
00:03:19.862 --> 00:03:23.196
I just couldn't spell and I did this.

43
00:03:23.196 --> 00:03:27.057
And when I was trying to type it out,
notice here I now have an error and

44
00:03:27.057 --> 00:03:31.873
they're saying you didn't inherit this
method what are you talking about, right?

45
00:03:31.873 --> 00:03:34.833
And I know I messed something up,
all right?

46
00:03:34.833 --> 00:03:39.063
So that's a really helpful
way to catch any mistakes.

47
00:03:39.063 --> 00:03:45.419
Okay, inside of the calculate perimeter,

48
00:03:45.419 --> 00:03:52.133
we'll change this to
return sides × length.

49
00:03:54.582 --> 00:03:58.726
All right, and
we have a little problem here, right?

50
00:03:58.726 --> 00:04:01.908
It's saying it doesn't
know sides are length.

51
00:04:01.908 --> 00:04:07.031
If we go to rectangle, why might that be?

52
00:04:07.031 --> 00:04:08.934
&gt;&gt; They're private.

53
00:04:08.934 --> 00:04:10.458
&gt;&gt; They are private.

54
00:04:10.458 --> 00:04:15.328
So when you inherit from something,
the superclass only

55
00:04:15.328 --> 00:04:20.003
gives its child class the things
that are not private.

56
00:04:20.003 --> 00:04:23.965
Private means its scope
just to this class.

57
00:04:23.965 --> 00:04:29.509
So it's a good practice
if you're okay with other

58
00:04:29.509 --> 00:04:34.789
classes extending you
to make this protected,

59
00:04:34.789 --> 00:04:40.201
so that'll still give
you that encapsulation,

60
00:04:40.201 --> 00:04:45.220
but other classes can
utilize these fields.

61
00:04:50.343 --> 00:04:55.463
All right, and
now notice we don't have size or

62
00:04:55.463 --> 00:05:00.584
length declared in this class explicitly,
but

63
00:05:00.584 --> 00:05:06.486
it inherited those fields
from its parent rectangle.

64
00:05:06.486 --> 00:05:10.100
&gt;&gt; Does it also imply that it has access
to those getters and setters as well?

65
00:05:10.100 --> 00:05:13.550
&gt;&gt; Yes, so those are public, so

66
00:05:13.550 --> 00:05:18.518
it definitely has access to these, okay?

67
00:05:21.154 --> 00:05:23.922
All right, questions on overriding.

68
00:05:26.852 --> 00:05:29.089
Yes.

69
00:05:29.089 --> 00:05:34.009
&gt;&gt; Do you only need to change what you're
trying to use in a different class

70
00:05:34.009 --> 00:05:38.362
to protect it or do you have to
change everything to protect it?

71
00:05:38.362 --> 00:05:43.392
&gt;&gt; Only the things that
you want inherited.

72
00:05:43.392 --> 00:05:49.392
Now, in real life, there may be
classes that you want to inherit from,

73
00:05:49.392 --> 00:05:52.992
maybe they're from the Java library, and

74
00:05:52.992 --> 00:05:58.707
you won't have access to modify
those access modifiers like that.

75
00:05:58.707 --> 00:06:05.796
So, you only can change it if it's
within your own code base, right?

76
00:06:11.902 --> 00:06:12.900
&gt;&gt; Any reason not to.

77
00:06:12.900 --> 00:06:15.532
&gt;&gt; The other way you could have done this.

78
00:06:15.532 --> 00:06:19.238
So let's say you did not own this class,

79
00:06:19.238 --> 00:06:24.580
you have no permission to change
this stuff to protect it.

80
00:06:24.580 --> 00:06:27.259
But you want to still inherit from it.

81
00:06:27.259 --> 00:06:30.399
You can simply use the getter and
setter methods.

82
00:06:30.399 --> 00:06:33.267
So get sides × get length,

83
00:06:33.267 --> 00:06:39.268
because that was the purpose
of encapsulation, right?

84
00:06:39.268 --> 00:06:44.890
Utilize my methods, not my fields.

85
00:06:44.890 --> 00:06:50.081
So if we were to say rectangle like we

86
00:06:50.081 --> 00:06:55.794
had a new object rectangle.calculate

87
00:06:55.794 --> 00:07:00.986
perimeter which method would it run

88
00:07:00.986 --> 00:07:07.058
the one in rectangle or the one in square?

89
00:07:07.058 --> 00:07:08.468
&gt;&gt; Cause of the over?

90
00:07:08.468 --> 00:07:10.428
&gt;&gt; Yeah, so you overrode it.

91
00:07:10.428 --> 00:07:13.805
So if we had a square object and

92
00:07:13.805 --> 00:07:18.403
we said square.calculate perimeter,

93
00:07:18.403 --> 00:07:24.499
it'll run the overwritten implementation,
okay?

94
00:07:24.499 --> 00:07:28.063
So let's go inside of
inheritance tester and

95
00:07:28.063 --> 00:07:32.483
we are going to check for
the overridden method, okay?

96
00:07:32.483 --> 00:07:40.836
So we'll say square which is the subclass,
right?

97
00:07:40.836 --> 00:07:44.724
Square = new square.

98
00:07:44.724 --> 00:07:49.872
And we'll say square.calculateperimeter.

99
00:07:49.872 --> 00:07:54.276
Now we haven't set any of the fields yet,
right?

100
00:07:54.276 --> 00:07:56.478
So we need to do that.

101
00:07:56.478 --> 00:08:00.543
Let's say square.set length.

102
00:08:00.543 --> 00:08:01.059
What was it?

103
00:08:01.059 --> 00:08:03.180
Side and sorry.

104
00:08:03.180 --> 00:08:07.331
Square side × length, okay.

105
00:08:07.331 --> 00:08:12.247
So, side was already set to four and
rectangle

106
00:08:12.247 --> 00:08:17.428
remember hard-coded so
we just say the length.

107
00:08:17.428 --> 00:08:24.044
Let's say 25 oops 25, so
that we have a nice, what?

108
00:08:24.044 --> 00:08:30.567
100, okay,
rectangle will we get that same number?

109
00:08:30.567 --> 00:08:35.389
Possibly, two times the length and
two times the width, no,

110
00:08:35.389 --> 00:08:38.283
because width is not even set right?

111
00:08:38.283 --> 00:08:43.271
Right, okay [LAUGH], so let's run this to

112
00:08:43.271 --> 00:08:48.989
make sure that it ran
the overriding method.

113
00:08:48.989 --> 00:08:54.712
I need to print it out,
okay, print out this.

114
00:09:03.310 --> 00:09:06.092
And boom we got a 100, okay?

