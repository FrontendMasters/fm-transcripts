WEBVTT

1
00:00:00.067 --> 00:00:04.628
Back to the question of, well,
if someone gave me an animal,

2
00:00:04.628 --> 00:00:08.837
how do I know that this is,
like what's in its family, or

3
00:00:08.837 --> 00:00:13.436
if it was instantiated as a cat or
a dog or something like that?

4
00:00:13.436 --> 00:00:18.758
There's this instanceof operator
that exists in Java that allow

5
00:00:18.758 --> 00:00:23.704
you to check if something is
an instance of a specific class.

6
00:00:23.704 --> 00:00:25.710
So even if it's an animal,

7
00:00:25.710 --> 00:00:31.221
you can check to see if maybe it was
instantiated with some other subclass.

8
00:00:31.221 --> 00:00:35.064
So here we have the Animal superclass and

9
00:00:35.064 --> 00:00:39.708
we have our two subclasses,
the Dog and the Cat.

10
00:00:39.708 --> 00:00:44.993
So we can create an object named Sasha,
has the type of Dog,

11
00:00:44.993 --> 00:00:50.191
I mean, has the type of Animal,
and is an instance of Dog.

12
00:00:50.191 --> 00:00:55.406
So if we wanted to check and
see if Sasha is an instance

13
00:00:55.406 --> 00:00:59.921
of Animal,
then this is how we would do that.

14
00:00:59.921 --> 00:01:04.840
Sasha, and then in between,
we have the instanceof operator, and

15
00:01:04.840 --> 00:01:08.652
then we check for
whatever class we wanna check for.

16
00:01:08.652 --> 00:01:12.504
This will return a Boolean of true or
false.

17
00:01:12.504 --> 00:01:15.532
So in this case,
is sasha an instanceof Animal?

18
00:01:15.532 --> 00:01:18.496
Yes, she is.

19
00:01:20.729 --> 00:01:28.928
This one is,
Checking if sasha is an instanceof Dog.

20
00:01:28.928 --> 00:01:35.572
This will also return true,
because Sasha was instantiated as a dog.

21
00:01:40.279 --> 00:01:44.712
&gt;&gt; Does that have any implications,
like with logical operators,

22
00:01:44.712 --> 00:01:49.065
if you wanted to insert some kind
of logic where you're saying,

23
00:01:49.065 --> 00:01:51.391
if this animal is a dog, do x-
&gt;&gt; Yeah.

24
00:01:51.391 --> 00:01:52.505
&gt;&gt; If it is a cat, do y.

25
00:01:52.505 --> 00:01:55.327
&gt;&gt; Yep, exactly.

26
00:01:55.327 --> 00:02:00.401
Cuz remember, like I said about the class
cast exception and how dangerous that

27
00:02:00.401 --> 00:02:05.248
is and stuff like that, it's because
you're making an assumption there,

28
00:02:05.248 --> 00:02:09.284
like, this must be probably
an instance of such and such.

29
00:02:09.284 --> 00:02:13.056
So I'm gonna downcast it to that so
that I can do x, y, and z.

30
00:02:13.056 --> 00:02:16.744
And if it's not,
then the whole program blows up.

31
00:02:16.744 --> 00:02:20.662
So you could do this first to
say is it an instance of that?

32
00:02:20.662 --> 00:02:28.269
It is, great, now I feel safe down
casting or whatever, all right?

33
00:02:28.269 --> 00:02:32.517
If we wanted to check if
sasha's an instanceof Cat,

34
00:02:32.517 --> 00:02:34.938
that would be false, right?

35
00:02:34.938 --> 00:02:40.570
Because there's nothing there
that says Sasha is a cat,

36
00:02:40.570 --> 00:02:43.395
it's not in the hierarchy.

37
00:02:43.395 --> 00:02:48.482
All right, so let's practice
with the instanceof operator.

38
00:02:48.482 --> 00:02:53.787
We are going to create a method
that will put this in,

39
00:02:53.787 --> 00:02:58.256
I don't know what class, in our zoo class.

40
00:02:58.256 --> 00:03:01.409
And this will feed any animal, but

41
00:03:01.409 --> 00:03:06.757
the type of food will vary based
on the kind of animal it is.

42
00:03:06.757 --> 00:03:10.984
All right, so back to the zoo.

43
00:03:15.019 --> 00:03:16.467
Let's make a new method.

44
00:03:16.467 --> 00:03:19.631
We'll call this method feed.

45
00:03:19.631 --> 00:03:24.788
So public static void feed(),

46
00:03:24.788 --> 00:03:31.059
and let's make this one take an animal.

47
00:03:31.059 --> 00:03:39.372
Okay, now, this is another great
example of polymorphism in action.

48
00:03:39.372 --> 00:03:43.849
This feed says it takes an animal but

49
00:03:43.849 --> 00:03:50.872
that means it can take animal or
any subclass of animal.

50
00:03:50.872 --> 00:03:56.317
So I've essentially set this
at the highest level and

51
00:03:56.317 --> 00:04:01.641
that allows a bit of flexibility and
how you call me,

52
00:04:01.641 --> 00:04:07.096
you can send that or
any subclass of that, all right?

53
00:04:07.096 --> 00:04:15.542
So let's say if the animal
is an instanceof Dog,

54
00:04:19.299 --> 00:04:25.625
Then we'll just print out,
here's your dog food.

55
00:04:31.265 --> 00:04:36.767
Else if animal is an instanceof Cat,

56
00:04:36.767 --> 00:04:42.631
we'll print, here's your cat food.

57
00:04:45.914 --> 00:04:51.970
All right, and then we'll go,
and let's get Rocky fed.

58
00:04:51.970 --> 00:04:56.310
So we'll say rocky, wait,

59
00:04:56.310 --> 00:05:02.358
let's call it feed, feed(rocky), okay?

60
00:05:02.358 --> 00:05:08.435
So Rocky is a dog, let me comment
out all this other noise, all right.

61
00:05:08.435 --> 00:05:14.933
So Rocky is a dog, right, and
we are sending a dog object into feed,

62
00:05:14.933 --> 00:05:21.329
again, we're able to do that because
dog is a subclass of animal.

63
00:05:21.329 --> 00:05:28.707
So when we run this, let's make sure
that Rocky is getting his dog food, yes.

64
00:05:28.707 --> 00:05:34.641
And then let's do Animal
sasha = new Dog().

65
00:05:34.641 --> 00:05:40.751
What happens there, sasha,
sorry, feed(sasha).

66
00:05:47.428 --> 00:05:52.188
So Sasha got the dog food,
right, so it determined even

67
00:05:52.188 --> 00:05:57.166
though it's type is animal,
yes it is an instanceof Dog.

68
00:05:57.166 --> 00:06:02.594
And then when we change Sasha
from animal Sasha to a cat,

69
00:06:06.231 --> 00:06:08.191
Let's see what happens there.

70
00:06:10.790 --> 00:06:12.319
Sasha got the cat food.

71
00:06:17.605 --> 00:06:18.739
Makes sense?

72
00:06:21.455 --> 00:06:24.278
Anybody lost?

73
00:06:24.278 --> 00:06:25.214
All right.

74
00:06:25.214 --> 00:06:29.476
&gt;&gt; When you save a reference to a
typecasted object, does that create a new

75
00:06:29.476 --> 00:06:33.255
object, or would changes to that
object affect the original?

76
00:06:33.255 --> 00:06:37.910
&gt;&gt; Yeah, so, on this line 18 here,

77
00:06:37.910 --> 00:06:43.046
this does not save this to a new object.

78
00:06:43.046 --> 00:06:49.587
It's a temporary casting just to be
able to access that scratch method.

79
00:06:49.587 --> 00:06:55.110
And then if you were to
say sasha.scratch again,

80
00:06:55.110 --> 00:07:01.563
you would not be able to,
because you don't have access.

81
00:07:01.563 --> 00:07:05.033
That type didn't stay beyond
this one line, right?

82
00:07:05.033 --> 00:07:07.252
That type casting.

83
00:07:07.252 --> 00:07:13.669
If you wanted to store it into an object,
you could do so yourself.

84
00:07:13.669 --> 00:07:21.498
So you can say something like,
Let me comment this.

85
00:07:21.498 --> 00:07:29.916
So I can say, all right,
here's a newCat, And then do that.

86
00:07:29.916 --> 00:07:35.518
And then I can say newCat.scratch and
that will work just fine.

87
00:07:35.518 --> 00:07:39.768
So I can store it, but
automatically it is not.

88
00:07:41.716 --> 00:07:44.344
&gt;&gt; Will changes to newCat effect Sasha?

89
00:07:44.344 --> 00:07:48.587
So if we're going to use
a setter on newCat for example,

90
00:07:48.587 --> 00:07:51.850
you know how you created a newCat casting?

91
00:07:51.850 --> 00:07:54.089
&gt;&gt; Yeah, yeah, yeah.

92
00:07:54.089 --> 00:07:59.097
&gt;&gt; If you set a property or
change a property

93
00:07:59.097 --> 00:08:03.381
on newCat, is it going to affect?

94
00:08:05.078 --> 00:08:06.562
&gt;&gt; Sasha?

95
00:08:06.562 --> 00:08:09.150
No, okay, good question.

96
00:08:09.150 --> 00:08:14.002
So if I would have changed
something on newCat, newCat and

97
00:08:14.002 --> 00:08:17.972
Sasha are two different
objects at this point.

98
00:08:17.972 --> 00:08:25.355
So nothing I do with newCat affects Sasha,
nothing I do on Sasha affects newCat.

99
00:08:25.355 --> 00:08:27.812
&gt;&gt; Can we use var on the left side?

100
00:08:27.812 --> 00:08:30.997
&gt;&gt; [LAUGH] You all like a good var.

101
00:08:30.997 --> 00:08:33.188
Okay, can we use var?

102
00:08:33.188 --> 00:08:36.495
Yes, we should be able to, let's see.

103
00:08:36.495 --> 00:08:38.820
Yeah, works just fine.

104
00:08:38.820 --> 00:08:41.852
That's dangerous territory though.

105
00:08:41.852 --> 00:08:47.040
Using var in your typecast and
stuff, you're asking for trouble.

