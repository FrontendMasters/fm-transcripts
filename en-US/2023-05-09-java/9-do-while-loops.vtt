WEBVTT

1
00:00:00.068 --> 00:00:01.468
So let's look at another loop.

2
00:00:01.468 --> 00:00:04.291
This time we're going to add numbers.

3
00:00:04.291 --> 00:00:09.415
So we're gonna write a program that
allows a user to enter two numbers and

4
00:00:09.415 --> 00:00:11.687
then sums up those two numbers.

5
00:00:11.687 --> 00:00:16.443
The user should be able to repeat
this action until they indicate that

6
00:00:16.443 --> 00:00:17.592
they're done.

7
00:00:17.592 --> 00:00:23.358
All right, so
we're going to make a new class under,

8
00:00:23.358 --> 00:00:27.717
I'm gonna close these other packages,

9
00:00:27.717 --> 00:00:34.657
under the loops package, and
we'll call this one AddNumbers.

10
00:00:36.774 --> 00:00:41.580
We'll create our main method,

11
00:00:41.580 --> 00:00:46.386
and we want, let's go ahead and

12
00:00:46.386 --> 00:00:50.836
open our scanner right away.

13
00:00:56.292 --> 00:01:03.457
Okay, I need a variable
to control the condition.

14
00:01:03.457 --> 00:01:06.057
So I'm gonna set it to Boolean,
cuz remember,

15
00:01:06.057 --> 00:01:08.658
the conditions have to result to true or
false.

16
00:01:08.658 --> 00:01:11.828
So I'll call this one again.

17
00:01:11.828 --> 00:01:14.856
And I'm not gonna set it, I don't know
if they wanna run again or not, right?

18
00:01:14.856 --> 00:01:17.439
I know that they wanna
run at least one time.

19
00:01:17.439 --> 00:01:21.656
The program runs and then at the end, I'll
ask them, do you wanna do it again, right?

20
00:01:21.656 --> 00:01:25.908
This could be useful for
things like games, they play one time,

21
00:01:25.908 --> 00:01:29.867
and then you say you wanna play again,
and they can do that.

22
00:01:29.867 --> 00:01:34.444
So with this loop where we want
something to run at least once, and

23
00:01:34.444 --> 00:01:39.541
then run again based on a condition,
this is called the do-while loop.

24
00:01:39.541 --> 00:01:45.465
So you start this loop with the word do,
and you add a set of curly braces,

25
00:01:45.465 --> 00:01:50.225
you add any code that you want
executed inside of that, and

26
00:01:50.225 --> 00:01:53.548
then at the end of the do, you write wow.

27
00:01:53.548 --> 00:01:56.794
And then you put the condition at the end,
okay?

28
00:01:56.794 --> 00:02:02.300
So we can say wow, again,
wow they say they wanna run again, right?

29
00:02:02.300 --> 00:02:06.265
Now, of course, this is complaining
because we haven't initialized it.

30
00:02:06.265 --> 00:02:10.210
We can initialize that in the do,
all right?

31
00:02:10.210 --> 00:02:15.491
So inside of the do is where we'll
add all of our code that says,

32
00:02:15.491 --> 00:02:17.595
enter the first number.

33
00:02:17.595 --> 00:02:22.030
So enter the first number.

34
00:02:22.030 --> 00:02:25.448
And we'll read this into a variable.

35
00:02:25.448 --> 00:02:31.321
We'll call this num1 = scanner

36
00:02:31.321 --> 00:02:36.277
dot NextDouble, okay?

37
00:02:36.277 --> 00:02:41.742
And we'll ask them for the next number.

38
00:02:41.742 --> 00:02:46.264
Enter the second, oops.

39
00:02:48.092 --> 00:02:51.352
Enter the second number,

40
00:02:56.949 --> 00:02:58.372
NextDouble.

41
00:02:58.372 --> 00:02:59.943
All right, perfect.

42
00:02:59.943 --> 00:03:03.812
And then we can sum this up,
print that out.

43
00:03:03.812 --> 00:03:09.800
So let's just print it out.

44
00:03:09.800 --> 00:03:13.707
We can do our calculation right here,
and this is interesting.

45
00:03:13.707 --> 00:03:18.013
Okay, inside of here I wanna say,

46
00:03:18.013 --> 00:03:21.586
num1 + num2, all right?

47
00:03:21.586 --> 00:03:26.667
The reason I put this inside of
parentheses is because I am utilizing

48
00:03:26.667 --> 00:03:32.386
this plus sign in two different ways,
basically overloading its purpose.

49
00:03:32.386 --> 00:03:36.434
So I can use it here to append
some value to a string, and

50
00:03:36.434 --> 00:03:39.261
then I'm using it here for addition.

51
00:03:39.261 --> 00:03:43.907
So I don't want them to think if I
didn't put this it'll probably append

52
00:03:43.907 --> 00:03:46.810
the first number and
then the second number.

53
00:03:46.810 --> 00:03:51.253
But by me putting in parentheses,
I think it's gonna add them both together,

54
00:03:51.253 --> 00:03:52.747
we shall see, all right?

55
00:03:52.747 --> 00:03:56.640
Now remember,
I gotta get a value for, again, so

56
00:03:56.640 --> 00:04:00.922
let's go ahead and
ask them if they want to do it again.

57
00:04:00.922 --> 00:04:08.334
Would you like to run again?

58
00:04:08.334 --> 00:04:13.706
And then we'll store that inside of this,
again, variable.

59
00:04:13.706 --> 00:04:21.951
So we'll say scanner.nextBoolean(), yes.

60
00:04:21.951 --> 00:04:25.428
Okay, And

61
00:04:25.428 --> 00:04:30.171
there is our do-while, yeah.

62
00:04:30.171 --> 00:04:33.348
&gt;&gt; What would be a valid response for
a Boolean?

63
00:04:33.348 --> 00:04:37.144
&gt;&gt; [CROSSTALK] Very good question.

64
00:04:37.144 --> 00:04:38.488
Okay, let's see.

65
00:04:42.809 --> 00:04:48.497
So the short answer is true or false.

66
00:04:48.497 --> 00:04:52.480
But people, if you asked it in this way, I
wouldn't think to put true, I may put yes.

67
00:04:52.480 --> 00:04:54.814
So something like that, right?

68
00:04:54.814 --> 00:04:57.542
One or zero are also valid Boolean.

69
00:04:57.542 --> 00:05:00.728
So one would be true, zero would be false.

70
00:05:00.728 --> 00:05:04.788
So do you want to say, enter one for

71
00:05:04.788 --> 00:05:09.694
yes or zero for no or something like that?

72
00:05:09.694 --> 00:05:11.053
We could do something like that.

73
00:05:11.053 --> 00:05:15.805
Would you like to 0 for

74
00:05:15.805 --> 00:05:19.313
no, 1 for yes?

75
00:05:19.313 --> 00:05:20.729
Let's make sure that works.

76
00:05:20.729 --> 00:05:22.979
All right, we got a couple of
things to make sure that works.

77
00:05:22.979 --> 00:05:24.994
[LAUGH] Let's run it.

78
00:05:24.994 --> 00:05:30.931
All right, first number we'll say 5,

79
00:05:30.931 --> 00:05:36.705
and second number is 4, the sum is 9.

80
00:05:36.705 --> 00:05:39.773
Great, so we made sure that this was
actually adding those two numbers

81
00:05:39.773 --> 00:05:40.294
together.

82
00:05:40.294 --> 00:05:42.702
That was great.

83
00:05:42.702 --> 00:05:44.284
Would you like to run again?

84
00:05:44.284 --> 00:05:48.118
0 for no,1 for yes.

85
00:05:48.118 --> 00:05:52.324
Let's say 1 for yes and
make sure that it recognizes that.

86
00:05:52.324 --> 00:05:54.733
It does not, okay.

87
00:05:54.733 --> 00:06:00.504
So input mismatch,
I think all I can say is true or false.

88
00:06:00.504 --> 00:06:02.106
False, renew.

89
00:06:02.106 --> 00:06:06.903
Now what you would do in real life is
not give people these horrible options.

90
00:06:06.903 --> 00:06:11.680
You would give them something
else that was more user friendly.

91
00:06:11.680 --> 00:06:13.242
&gt;&gt; We wouldn't be working in
the console in the first place.

92
00:06:13.242 --> 00:06:14.754
&gt;&gt; We wouldn't be working in the console.

93
00:06:14.754 --> 00:06:16.957
We would have a nice pretty button, right?

94
00:06:19.136 --> 00:06:22.797
Okay, so let's see 8 and 1.

95
00:06:22.797 --> 00:06:27.462
Also 9 in true.

96
00:06:27.462 --> 00:06:32.451
True, all right, [LAUGH] so
true works, okay?

97
00:06:32.451 --> 00:06:37.266
And so the numbers 7, and 3, 10, and

98
00:06:37.266 --> 00:06:41.400
then false shit ended, all right.

99
00:06:41.400 --> 00:06:44.105
&gt;&gt; What if we wanted to,
if they wanna keep going,

100
00:06:44.105 --> 00:06:48.212
they wanna use the previous values
that they've already given?

101
00:06:48.212 --> 00:06:50.085
&gt;&gt; Good question, okay.

102
00:06:50.085 --> 00:06:53.790
So they would not be able to do that,

103
00:06:53.790 --> 00:06:58.980
because when this executes again,
everything,

104
00:06:58.980 --> 00:07:03.314
notice here that we are declaring num1.

105
00:07:03.314 --> 00:07:07.584
So this declaration will start
over again when this is run.

106
00:07:07.584 --> 00:07:09.514
If we wanted to keep the values,

107
00:07:09.514 --> 00:07:14.029
and I think we do that in the next
program, we could do something like that.

108
00:07:14.029 --> 00:07:18.283
But we would have to define these
variables outside of the loop.

109
00:07:18.283 --> 00:07:22.412
Because when we do it inside of the loop,
it's basically starting over each time.

110
00:07:22.412 --> 00:07:25.305
&gt;&gt; So you would need some kind of
variable running total or whatever?

111
00:07:25.305 --> 00:07:30.192
&gt;&gt; Exactly, exactly, okay?

112
00:07:30.192 --> 00:07:34.169
Now, I'll say this about
the do-while loop,

113
00:07:34.169 --> 00:07:37.955
it's not very heavily
used in the industry.

114
00:07:37.955 --> 00:07:41.806
Within my 20 plus years of coding,

115
00:07:41.806 --> 00:07:48.027
I have probably used the do-while
loop a handful of times.

116
00:07:48.027 --> 00:07:52.106
People typically prefer the while loop.

117
00:07:52.106 --> 00:07:53.296
It's a matter of preference.

118
00:07:53.296 --> 00:07:58.689
I've seen some developer shops where
they will straight up like reject your

119
00:07:58.689 --> 00:08:04.182
code review because you used to do-while
and say, turn it into a while loop.

120
00:08:04.182 --> 00:08:09.164
The difference With the do-while loops
is that the condition is checked after,

121
00:08:09.164 --> 00:08:12.108
meaning you are running
this at least one time.

122
00:08:12.108 --> 00:08:16.890
So we would have to initialize this
variable to say true or something,

123
00:08:16.890 --> 00:08:19.496
and then turn it into a while, right?

124
00:08:19.496 --> 00:08:25.150
I think it's a bit silly, but again,
that's what people are doing, all right?

125
00:08:25.150 --> 00:08:29.270
So some things to remember
about do-while loops.

126
00:08:29.270 --> 00:08:31.796
They're also condition controlled.

127
00:08:31.796 --> 00:08:34.548
They test the condition after the loop.

128
00:08:34.548 --> 00:08:39.700
And it's best to use this if that
loop should run at least one time,

129
00:08:39.700 --> 00:08:43.391
and then conditionally
more times after that.

