WEBVTT

1
00:00:00.000 --> 00:00:04.879
Okay so Java is an object
oriented programming language.

2
00:00:04.879 --> 00:00:10.076
And objects are structures
which contain data in the form

3
00:00:10.076 --> 00:00:15.270
of fields also known as variables,
as well as behavior in

4
00:00:15.270 --> 00:00:20.917
the form of methods, so fields and
methods, data behavior.

5
00:00:20.917 --> 00:00:27.757
All right, we use classes to
define the makeup of an object.

6
00:00:27.757 --> 00:00:32.630
So we're gonna create our first, well, not
our first class, but we're gonna create

7
00:00:32.630 --> 00:00:37.061
our first class that represents an object
that's gonna be used as a template.

8
00:00:37.061 --> 00:00:43.096
All right, so this is going to describe
the fields in the methods of a rectangle.

9
00:00:43.096 --> 00:00:47.219
So we're gonna go to the IDE, and

10
00:00:47.219 --> 00:00:52.830
let's create a new package called objects.

11
00:00:57.533 --> 00:01:01.579
And we'll create a new class
inside of here called rectangle.

12
00:01:04.485 --> 00:01:11.354
Okay, so if we were to think about some
fields that a rectangle would have,

13
00:01:11.354 --> 00:01:17.152
some characteristics,
we might say something like a length.

14
00:01:20.033 --> 00:01:21.355
We could have a width.

15
00:01:24.789 --> 00:01:27.675
And then our rectangle has sides, right?

16
00:01:27.675 --> 00:01:33.143
So we could even declare
that it's four sides.

17
00:01:33.143 --> 00:01:38.105
All right, so
these would be the fields for a rectangle.

18
00:01:38.105 --> 00:01:40.447
If we wanted to define behaviors,

19
00:01:40.447 --> 00:01:44.420
then we could do something
like calculate the perimeter.

20
00:01:44.420 --> 00:01:48.568
So we could say double

21
00:01:48.568 --> 00:01:54.564
calculate perimeter, okay?

22
00:01:58.485 --> 00:02:02.652
And perimeter is what?

23
00:02:02.652 --> 00:02:06.017
Two times the length,

24
00:02:06.017 --> 00:02:11.163
2 times length plus 2 times width

25
00:02:13.054 --> 00:02:15.730
So this is now a behavior, right?

26
00:02:15.730 --> 00:02:19.973
You can calculate the perimeter or

27
00:02:19.973 --> 00:02:24.076
maybe we can calculate the area.

28
00:02:28.541 --> 00:02:31.932
And that one could be just
the length times the width.

29
00:02:37.178 --> 00:02:42.295
All right, so this is a class
with both fields and behaviors.

30
00:02:42.295 --> 00:02:46.575
We could do things like create nice

31
00:02:46.575 --> 00:02:51.156
little objects based on this class.

32
00:02:51.156 --> 00:02:55.641
Now notice here we don't
have anything like,

33
00:02:55.641 --> 00:03:03.011
any access modifiers on the fields or
the methods, meaning private words.

34
00:03:03.011 --> 00:03:05.497
I wanna talk about encapsulation a bit.

35
00:03:05.497 --> 00:03:12.716
So Java has four core principles for
object oriented programming.

36
00:03:12.716 --> 00:03:17.963
Encapsulation is one of them,
what encapsulation prescribes

37
00:03:17.963 --> 00:03:24.401
is that all of the data in the behavior
is contained within the object itself.

38
00:03:24.401 --> 00:03:29.585
So given an object, I can do what
I need to do with that object.

39
00:03:29.585 --> 00:03:32.744
And it says to expose the behavior, so

40
00:03:32.744 --> 00:03:38.190
that would be the methods and
restrict direct access to the data.

41
00:03:38.190 --> 00:03:40.314
So that would be the fields.

42
00:03:40.314 --> 00:03:45.421
So we don't really want
these fields just left like

43
00:03:45.421 --> 00:03:52.203
this without an access modifier
because then they're protected.

44
00:03:52.203 --> 00:03:55.744
People can directly access these fields.

45
00:03:55.744 --> 00:04:00.846
What we wanna do is, add a private access

46
00:04:00.846 --> 00:04:05.807
modifier in front of all of the fields.

47
00:04:05.807 --> 00:04:10.851
And then for the methods, this is the
behavior we do want to expose the methods,

48
00:04:10.851 --> 00:04:14.182
right unless there was
a good reason not to, right?

49
00:04:14.182 --> 00:04:19.096
So if you had a method in a class,
that it was only specific to this class is

50
00:04:19.096 --> 00:04:24.109
some sort of process method that you
don't want people to directly call.

51
00:04:24.109 --> 00:04:29.133
You could put a private there, if it's
something that you're making so that

52
00:04:29.133 --> 00:04:34.174
people can call into it and it's useful
for them, you will make that public.

53
00:04:35.586 --> 00:04:39.403
So, we'll make our behaviors public and
our data,

54
00:04:39.403 --> 00:04:44.103
our fields private, and
we've just encapsulated this class.

55
00:04:44.103 --> 00:04:48.856
All right, so that's what
encapsulation means in a nutshell.

56
00:04:48.856 --> 00:04:50.966
&gt;&gt; I have a question about private.

57
00:04:50.966 --> 00:04:52.783
&gt;&gt; Yeah.

58
00:04:52.783 --> 00:04:53.559
&gt;&gt; In the past,

59
00:04:53.559 --> 00:04:58.430
I've read about stuff like people doing,
bad actors doing like field ejection or

60
00:04:58.430 --> 00:05:03.176
to manipulate stuff that's going on in
a program in a way that they shouldn't.

61
00:05:03.176 --> 00:05:05.940
Would this private
keyword be used like for

62
00:05:05.940 --> 00:05:10.020
protecting stuff like that as
an example or is that different?

63
00:05:10.020 --> 00:05:13.780
&gt;&gt; It's different so, what you're
describing is more like the input.

64
00:05:13.780 --> 00:05:19.370
&gt;&gt; So when we accept that input, we
would wanna make sure that it was clean.

65
00:05:19.370 --> 00:05:23.185
And that they haven't put any
sort of sequel injection or

66
00:05:23.185 --> 00:05:25.178
anything like that in there.

67
00:05:25.178 --> 00:05:30.560
This is for example, you wanna

68
00:05:30.560 --> 00:05:37.190
control how people utilize the data.

69
00:05:37.190 --> 00:05:40.703
So you would provide the methods,
the behavior that allows them to do it.

70
00:05:40.703 --> 00:05:45.620
But you wouldn't want people to
directly change the value of in

71
00:05:45.620 --> 00:05:48.044
objects field, for example.

72
00:05:48.044 --> 00:05:52.650
So you allow this with
what's called getter and

73
00:05:52.650 --> 00:05:58.880
setter methods also call accessor methods,
mutator methods.

74
00:05:58.880 --> 00:06:03.920
So we need to add those to this
class cause right now people

75
00:06:03.920 --> 00:06:10.644
have no way to determine, what is length
or set the width in some kind of way.

76
00:06:10.644 --> 00:06:14.081
So we wanna provide them ways
of doing that without them

77
00:06:14.081 --> 00:06:18.050
directly saying rectangle.length
equals whatever, okay?

78
00:06:18.050 --> 00:06:23.203
So to do that, we wanna add getter and
setter methods for all of

79
00:06:23.203 --> 00:06:29.961
the fields that you want people to be able
to get information on or set in some way.

80
00:06:29.961 --> 00:06:34.842
So to do that,
I'm going to do a little trick.

81
00:06:34.842 --> 00:06:38.370
If you're in IntelliJ,
you can right click,

82
00:06:38.370 --> 00:06:43.538
because it's a lot of boilerplate code,
and if you go to generate.

83
00:06:45.152 --> 00:06:49.949
Select the fourth option, getter and
setter, and then you can select

84
00:06:49.949 --> 00:06:54.512
the fields that you want getter and
setter methods generated for.

85
00:06:54.512 --> 00:06:56.869
And then notice they've created them for
me.

86
00:06:56.869 --> 00:07:00.760
So the getLength is just
gonna return the length,

87
00:07:00.760 --> 00:07:05.031
setLength will accept the length,
and then, set it.

88
00:07:05.031 --> 00:07:11.495
Notice this keyword, is on line 22,
we had this.length equals length.

89
00:07:11.495 --> 00:07:14.405
What does that mean?

90
00:07:14.405 --> 00:07:18.366
Remember, variables are local and
scope, right?

91
00:07:18.366 --> 00:07:22.070
So, we have length here as
the perameter name, but

92
00:07:22.070 --> 00:07:25.786
then we also have a global
variable called length.

93
00:07:25.786 --> 00:07:29.944
So what this is saying is
set the global variable,

94
00:07:29.944 --> 00:07:33.211
the length that belongs to this class,

95
00:07:33.211 --> 00:07:37.669
set that variable equal to
my local variable length.

96
00:07:37.669 --> 00:07:40.378
That's what that means, all right?

97
00:07:40.378 --> 00:07:44.017
Same for width and same for sides.

98
00:07:46.726 --> 00:07:51.124
And then that really gives
us that encapsulated object.

99
00:07:51.124 --> 00:07:54.090
&gt;&gt; So you said that this is the global?

100
00:07:54.090 --> 00:07:59.309
&gt;&gt; Yes, this, so that means the variable
that belongs to this class.

101
00:07:59.309 --> 00:08:03.750
So this will give you the global instance,
and then this will be the local one.

