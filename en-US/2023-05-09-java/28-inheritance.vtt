WEBVTT

1
00:00:00.000 --> 00:00:05.335
So there are four main principles
to object oriented programming,

2
00:00:05.335 --> 00:00:12.274
we talked about encapsulation already and
now we're going to talk about inheritance.

3
00:00:12.274 --> 00:00:18.090
So, inheritance is where one class
inherits the members of another class.

4
00:00:18.090 --> 00:00:22.236
So there are two parties
that are involved in

5
00:00:22.236 --> 00:00:27.287
an inheritance relationship,
a parent and a child.

6
00:00:27.287 --> 00:00:31.522
So the parent is known as the super class,

7
00:00:31.522 --> 00:00:38.299
sometimes it's also referred to as
a parent class or a base class.

8
00:00:38.299 --> 00:00:42.941
In this example,
person is our superclass and

9
00:00:42.941 --> 00:00:46.987
then the child is known as the subclass,

10
00:00:46.987 --> 00:00:53.294
this is sometimes referred to as
a subclass or a derived class or

11
00:00:53.294 --> 00:00:58.786
a child class, sorry,
child class or derived class.

12
00:00:58.786 --> 00:01:04.351
And in this example,
the employee is the subclass, all right?

13
00:01:04.351 --> 00:01:12.343
So an inheritance relationship is
known as an is a relationship,

14
00:01:12.343 --> 00:01:16.424
an employee is a person, right?

15
00:01:16.424 --> 00:01:22.171
And being a subclass is
a specialized type of person,

16
00:01:22.171 --> 00:01:27.290
so let's demonstrate
inheritance with code.

17
00:01:27.290 --> 00:01:32.155
We're gonna create a Person class and
then we're gonna create

18
00:01:32.155 --> 00:01:36.579
an Employee class that inherits
from that Person class.

19
00:01:36.579 --> 00:01:42.299
So within our ID,
we'll create a new package,

20
00:01:42.299 --> 00:01:46.594
we'll call this one inheritance.

21
00:01:46.594 --> 00:01:52.111
Inside of here we'll go ahead and
create a Person class.

22
00:01:57.335 --> 00:02:05.004
Now if we think about some
attributes that a person has,

23
00:02:05.004 --> 00:02:10.225
we can come up with things like a name,

24
00:02:10.225 --> 00:02:13.339
maybe an age, right?

25
00:02:13.339 --> 00:02:16.098
And then let's say a gender.

26
00:02:20.057 --> 00:02:23.692
And we can go ahead and
generate the getter and

27
00:02:23.692 --> 00:02:26.380
setter methods for this as well.

28
00:02:26.380 --> 00:02:30.915
Again to generate you would right click,
and

29
00:02:30.915 --> 00:02:35.926
then choose Generate and
then Getter and Setter,

30
00:02:35.926 --> 00:02:40.121
and select all of the fields, all right.

31
00:02:40.121 --> 00:02:46.154
So we have a POJO for a person,
now let's create another class,

32
00:02:46.154 --> 00:02:50.302
make sure you all have this one,
you got it?

33
00:02:50.302 --> 00:02:54.578
Alright, so let's create another
class also under inheritance,

34
00:02:54.578 --> 00:02:56.610
this one we'll call Employee.

35
00:03:05.360 --> 00:03:12.119
And we want the Employee class to
inherit from the Person class.

36
00:03:12.119 --> 00:03:18.167
So to inherit from another class,
within the class's header,

37
00:03:18.167 --> 00:03:22.311
you would specify that this class extends,

38
00:03:22.311 --> 00:03:28.489
extends is the keyword that forms
an inheritance relationship.

39
00:03:28.489 --> 00:03:33.409
And then you would specify what
class this inherits from, so

40
00:03:33.409 --> 00:03:38.715
we can write Person and that's it,
that's all you need to create

41
00:03:38.715 --> 00:03:43.654
this inheritance relationship
between these two classes.

42
00:03:43.654 --> 00:03:52.287
Now everything that is not
private within the Person class,

43
00:03:52.287 --> 00:03:58.041
now also belongs to the Employee class,

44
00:03:58.041 --> 00:04:03.636
it has inherited these things from it.

45
00:04:03.636 --> 00:04:07.717
So, you can inherit from a superclass, but

46
00:04:07.717 --> 00:04:14.351
then remember the subclass is some
specialized version of that class.

47
00:04:14.351 --> 00:04:18.533
So you might have things that
are specific just to an employee, so

48
00:04:18.533 --> 00:04:20.825
we can add anything we want to this.

49
00:04:20.825 --> 00:04:24.848
So we get whatever that we
inherited from our superclass and

50
00:04:24.848 --> 00:04:27.508
then whatever we define for our sales.

51
00:04:27.508 --> 00:04:32.665
So, some attributes for
an employee might be an employeeId.

52
00:04:35.863 --> 00:04:38.384
And maybe a title.

53
00:04:41.459 --> 00:04:48.081
We could go ahead and create the getters
and setters, so we'll generate those.

54
00:04:55.268 --> 00:05:00.854
And great, now we have employee
inherited from person and

55
00:05:00.854 --> 00:05:06.330
then also a couple of attributes and
methods for itself.

56
00:05:06.330 --> 00:05:12.990
Now I want us to test this out,
so we'll create one more class,

57
00:05:12.990 --> 00:05:17.904
and we'll call this one InheritanceTester.

58
00:05:24.609 --> 00:05:30.381
In InheritanceTester,
let's create a main method and

59
00:05:30.381 --> 00:05:35.678
we'll go ahead and
instantiate the Person class.

60
00:05:35.678 --> 00:05:39.407
So we'll say person = new Person.

61
00:05:44.040 --> 00:05:47.200
I have not created any constructors, but

62
00:05:47.200 --> 00:05:51.811
notice I'm able to call to
this default constructor, why?

63
00:05:51.811 --> 00:05:53.225
&gt;&gt; Ghost constructor.

64
00:05:53.225 --> 00:05:58.289
&gt;&gt; Yeah [LAUGH] I think I made that
term up about ghost constructor [LAUGH],

65
00:05:58.289 --> 00:06:03.265
but yes, because Java has implicit
default constructor if you have

66
00:06:03.265 --> 00:06:05.639
not defined any constructors.

67
00:06:05.639 --> 00:06:09.961
Okay, so we have the Person,
right, and then let's go ahead and

68
00:06:09.961 --> 00:06:11.700
make an Employee object.

69
00:06:13.416 --> 00:06:20.876
We'll call him employee = new Employee.

70
00:06:20.876 --> 00:06:24.566
Okay, now notice, if I click,

71
00:06:24.566 --> 00:06:30.047
if I say employee, well,
lemme show you this.

72
00:06:30.047 --> 00:06:35.278
If I say person dot,
the methods that are available

73
00:06:35.278 --> 00:06:40.509
to this person are getAge,
getGender, getName,

74
00:06:40.509 --> 00:06:44.781
setAge, Gender, and Name, all right?

75
00:06:44.781 --> 00:06:51.724
So, if we look in person,
I think I can split this [COUGH].

76
00:06:55.742 --> 00:07:01.637
Okay, nice, okay, so in the person,
this is the Person class on the right,

77
00:07:01.637 --> 00:07:06.990
we have the name, the age,
the gender and in our InheritanceTester,

78
00:07:06.990 --> 00:07:10.744
of course,
we can get those things with person.

79
00:07:10.744 --> 00:07:14.676
But if we look at the employee object and
say, doc,

80
00:07:14.676 --> 00:07:19.155
we have get and set the EmployeeId,
get and set the Title,

81
00:07:19.155 --> 00:07:23.743
which are the things that were
specific to Employee class.

82
00:07:23.743 --> 00:07:27.834
But we also have the GetAge,
the Gender, and the Name,

83
00:07:27.834 --> 00:07:32.642
which are the methods that were
inherited from the Person class.

84
00:07:40.760 --> 00:07:44.311
Does everyone understand,
any questions so far?

85
00:07:46.158 --> 00:07:50.747
Okay, beautiful, all right, so.

86
00:07:54.132 --> 00:08:00.041
Within inheritance constructors
operate a little bit differently,

87
00:08:00.041 --> 00:08:05.247
the constructors in the superclasses
are going to be executed

88
00:08:05.247 --> 00:08:09.868
before the constructors in the subclass,
all right?

89
00:08:09.868 --> 00:08:13.142
So, it makes sense if you think about it,

90
00:08:13.142 --> 00:08:17.911
Java wants to make sure that
before you inherit something and

91
00:08:17.911 --> 00:08:23.535
start executing it, those things
are properly constructed, right?

92
00:08:23.535 --> 00:08:27.765
So it's gonna run the superclass first and
then the subclass.

93
00:08:27.765 --> 00:08:33.662
Let's explore constructors by
adding some to the Person and

94
00:08:33.662 --> 00:08:37.137
the Employee classes, all right?

95
00:08:37.137 --> 00:08:42.284
So back to our Id,
I'm gonna go inside of my Person class

96
00:08:51.482 --> 00:08:52.683
Sorry.

97
00:08:57.108 --> 00:09:00.970
Okay, I'm gonna go inside of Person and

98
00:09:00.970 --> 00:09:06.321
let's go ahead and
create a default constructor here.

99
00:09:07.877 --> 00:09:11.123
So default constructor,
someone give me the syntax.

100
00:09:14.258 --> 00:09:15.952
First word.

101
00:09:15.952 --> 00:09:17.977
&gt;&gt; Public.

102
00:09:17.977 --> 00:09:21.067
&gt;&gt; Public, next word.

103
00:09:21.067 --> 00:09:21.711
&gt;&gt; Person.

104
00:09:21.711 --> 00:09:24.882
&gt;&gt; Person, the exact name of the class,
very good,

105
00:09:24.882 --> 00:09:29.791
no arguments in the default constructor
and we'll just put a print statement

106
00:09:29.791 --> 00:09:33.209
cuz I want you to see where
we are when we execute this.

107
00:09:33.209 --> 00:09:40.472
So we'll just say In Person default

108
00:09:40.472 --> 00:09:46.045
constructor, all right?

109
00:09:48.951 --> 00:09:55.735
And then let's go to the Employee class
and we'll add a constructor there,

110
00:09:55.735 --> 00:10:00.345
so public Employee And

111
00:10:00.345 --> 00:10:08.907
we'll print out In Employee
default constructor.

112
00:10:11.828 --> 00:10:18.957
All right, now, in our
InheritanceTester we'll just run this,

113
00:10:18.957 --> 00:10:24.955
so I want you to see the order
that the constructors run.

114
00:10:24.955 --> 00:10:30.495
So I'm going to actually,
let's just do one at a time.

115
00:10:30.495 --> 00:10:34.438
So let's run the Person
instantiation first, and

116
00:10:34.438 --> 00:10:40.488
of course we should expect to see that
it is in the Person default constructor,

117
00:10:40.488 --> 00:10:45.645
yes, now I'm gonna comment out
that one and run the Employee one.

118
00:10:45.645 --> 00:10:51.357
So if we run Employee,
notice it ran the Person

119
00:10:51.357 --> 00:10:56.635
one first, and then the Employee, okay?

120
00:11:02.444 --> 00:11:09.146
Now we're gonna make another
constructor inside of Person and

121
00:11:09.146 --> 00:11:13.193
this constructor will take a name, so

122
00:11:13.193 --> 00:11:19.398
let's create the second one and
this takes a String name.

123
00:11:22.252 --> 00:11:27.897
And we'll just print out that we're

124
00:11:27.897 --> 00:11:32.821
in In Person 2nd constructor.

125
00:11:37.122 --> 00:11:38.477
All right?

126
00:11:48.040 --> 00:11:51.302
Now, in the Employee class.

127
00:11:54.023 --> 00:11:56.376
If I wanted to.

128
00:11:59.185 --> 00:12:02.973
Not have the default constructor run,
cuz by default,

129
00:12:02.973 --> 00:12:08.787
this Employee constructor is gonna run the
default one from the Person constructor.

130
00:12:08.787 --> 00:12:13.647
But what if I explicitly want to
run one of the other constructors

131
00:12:13.647 --> 00:12:15.450
from the Person class?

132
00:12:15.450 --> 00:12:24.106
Then I would have to specify that myself
in my constructor as the subclass.

133
00:12:24.106 --> 00:12:29.442
All right and to do that,
you make a call to super

134
00:12:31.853 --> 00:12:36.615
All right, so super will call
the constructor that matches

135
00:12:36.615 --> 00:12:41.471
the parameter list, so
in this case, I have no parameters,

136
00:12:41.471 --> 00:12:47.491
this will explicitly call the default
constructor from the Person class.

137
00:12:47.491 --> 00:12:52.704
Now, I was gonna do that anyway,
so this is not necessary,

138
00:12:52.704 --> 00:12:57.813
but if I wanted to call that
second constructor in person,

139
00:12:57.813 --> 00:13:00.756
I would do so by passing in a name.

140
00:13:00.756 --> 00:13:05.528
So you can type in your name there,
and this will call

141
00:13:05.528 --> 00:13:11.392
the constructor that takes a string
in the Parent class, okay?

142
00:13:11.392 --> 00:13:15.696
All right, so
let's run our InheritanceTester with

143
00:13:15.696 --> 00:13:20.486
Employee just to make sure we
understand what's going on.

144
00:13:20.486 --> 00:13:25.601
So it went to the second
constructor of person

145
00:13:25.601 --> 00:13:31.121
first because that's what
we specified to do and

146
00:13:31.121 --> 00:13:35.305
then it implemented anything else.

147
00:13:35.305 --> 00:13:41.547
Now, if you're going to make
an explicit call to super,

148
00:13:41.547 --> 00:13:48.583
it has to be the very first line
of the subclass's constructor.

149
00:13:48.583 --> 00:13:54.375
For example,
I could not move super to after here,

150
00:13:54.375 --> 00:14:00.045
I would get an error and
that makes sense, right?

151
00:14:00.045 --> 00:14:04.398
The parents stayed in
everything needs to be set up

152
00:14:04.398 --> 00:14:09.383
first before you can start
doing things in the subclass.

153
00:14:10.838 --> 00:14:13.753
Does that make sense to everyone?

154
00:14:13.753 --> 00:14:14.958
Okay.

155
00:14:17.348 --> 00:14:22.223
The other thing is if,
let's comment this out for a second, and

156
00:14:22.223 --> 00:14:28.380
let's go back to Person and we're gonna
comment out that default constructor.

157
00:14:28.380 --> 00:14:33.734
Now, if there is no default constructor,

158
00:14:33.734 --> 00:14:42.377
then notice now I get an error in
my subclasses default constructor.

159
00:14:42.377 --> 00:14:47.417
Because it wants to make
the call to that default

160
00:14:47.417 --> 00:14:54.358
constructor from Person whether
I explicitly defined it or not.

161
00:14:54.358 --> 00:14:58.774
And since I added a second
constructor that ghost's default

162
00:14:58.774 --> 00:15:01.294
constructor went away remember.

163
00:15:01.294 --> 00:15:04.176
So there is no constructor now,

164
00:15:04.176 --> 00:15:08.982
no default constructor that
Employee could call, so

165
00:15:08.982 --> 00:15:14.125
I have to explicitly make
a call to a constructor, okay?

166
00:15:20.134 --> 00:15:21.936
Any questions on this?

167
00:15:25.194 --> 00:15:31.753
All right.
&gt;&gt; Can a class have more than one parent?

168
00:15:31.753 --> 00:15:37.196
&gt;&gt; No, so you can only inherit from

169
00:15:37.196 --> 00:15:42.647
one class, one parent, okay?

170
00:15:42.647 --> 00:15:46.584
All right, so,
key points to remember about

171
00:15:46.584 --> 00:15:51.460
constructors when we're
talking about inheritance.

172
00:15:51.460 --> 00:15:57.576
A superclass's constructor is run
before the subclasses constructor,

173
00:15:57.576 --> 00:16:02.507
explicit calls can be made to
the superclasses constructor

174
00:16:02.507 --> 00:16:07.157
from one of the subclasses
constructor by using super.

175
00:16:07.157 --> 00:16:12.273
You'll pass in any arguments you
want to get that right constructor,

176
00:16:12.273 --> 00:16:16.868
if there is an explicit call to
the superclasses constructor,

177
00:16:16.868 --> 00:16:21.480
it must be the first statement
in the subclasses constructor.

178
00:16:21.480 --> 00:16:26.495
And if the superclass doesn't
have a default constructor,

179
00:16:26.495 --> 00:16:32.012
the subclass must explicitly call
one of the other constructors.

