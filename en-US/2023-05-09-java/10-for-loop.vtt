WEBVTT

1
00:00:00.000 --> 00:00:02.807
So now we'll get to your question.

2
00:00:02.807 --> 00:00:07.165
We're gonna write another
program about a cashier, and

3
00:00:07.165 --> 00:00:11.630
this will scan a number of items and
tally the cost, okay?

4
00:00:11.630 --> 00:00:16.130
So let's go back to our IDE.

5
00:00:16.130 --> 00:00:20.338
We'll write a new class called Cashier.

6
00:00:20.338 --> 00:00:26.600
Inside of Cashier let's go ahead and
make the main method, And

7
00:00:26.600 --> 00:00:33.163
we'll ask them for, The number of items.

8
00:00:33.163 --> 00:00:39.679
Enter the number of items
you would like to scan.

9
00:00:42.869 --> 00:00:47.515
And then we'll import and use our scanner,

10
00:00:57.344 --> 00:01:02.166
And we will store the quantity
in an integer variable.

11
00:01:08.810 --> 00:01:13.598
Okay, now I'm going to declare
a variable outside of the loop, and

12
00:01:13.598 --> 00:01:17.467
that variable is gonna be
updated while the loop runs.

13
00:01:17.467 --> 00:01:22.518
So we'll say double total,
we can set it to 0 to begin with.

14
00:01:24.682 --> 00:01:29.556
And now we're gonna make a loop that's
going to run the number of times

15
00:01:29.556 --> 00:01:33.452
that was specified, and
that sort of loop is a for loop.

16
00:01:33.452 --> 00:01:37.553
So we can say for, and
inside a parentheses the for

17
00:01:37.553 --> 00:01:40.590
loop takes three small statements.

18
00:01:40.590 --> 00:01:45.385
The first statement needs to initialize
a counter variable basically,

19
00:01:45.385 --> 00:01:46.962
this is keeping track.

20
00:01:46.962 --> 00:01:52.618
It's an incrementor, if you will, keeping
track of how many times the loop has run.

21
00:01:52.618 --> 00:01:59.101
We say int, it's convention to
call this i for incrementor.

22
00:01:59.101 --> 00:02:03.729
Int i equals and
you set it equal to some initial number.

23
00:02:03.729 --> 00:02:07.512
Usually for loops,
it's set at 0, starts at 0.

24
00:02:07.512 --> 00:02:11.201
It's 0 cuz it hasn't run any times yet,
right?

25
00:02:11.201 --> 00:02:16.305
After it's run, that would be updated to
1, meaning it's run one time, all right?

26
00:02:16.305 --> 00:02:24.399
int i = 0, the next little small statement
is the condition for running this loop.

27
00:02:24.399 --> 00:02:26.963
When do you want this loop to end?

28
00:02:26.963 --> 00:02:33.929
I would like it to keep running as
long as i is less than the quantity.

29
00:02:38.143 --> 00:02:42.873
When i gets equal to the quantity,
that means we've run this loop

30
00:02:42.873 --> 00:02:47.437
the number of times they wanted
us to run it, so we should stop.

31
00:02:47.437 --> 00:02:51.777
And then the last little
mini statement says,

32
00:02:51.777 --> 00:02:57.240
how do you want i to change every
time that this loop is run?

33
00:02:57.240 --> 00:03:00.172
I want 1 to be added to i.

34
00:03:00.172 --> 00:03:03.758
The shortcut for this is i++.

35
00:03:03.758 --> 00:03:10.572
i++ is equivalent to saying i = i + 1,
right?

36
00:03:10.572 --> 00:03:13.555
Shorthand, i++.

37
00:03:16.293 --> 00:03:22.967
And now, inside of this scoop we'll
just run whatever we need to, right?

38
00:03:22.967 --> 00:03:27.909
So inside of here we'll ask them to
enter the cost of a specific item.

39
00:03:27.909 --> 00:03:32.022
So this is gonna handle
each item at a time.

40
00:03:32.022 --> 00:03:37.109
So we'll say, enter

41
00:03:37.109 --> 00:03:42.198
the cost of the item.

42
00:03:42.198 --> 00:03:49.128
Okay, and we'll read that in and
we'll set that to price.

43
00:03:49.128 --> 00:03:50.436
This will be a new variable.

44
00:03:50.436 --> 00:03:58.082
Set price,
double price equals scanner.nextDouble.

45
00:03:58.082 --> 00:04:01.789
And now, we're going to add
that to that total variable.

46
00:04:01.789 --> 00:04:06.802
So I wanna say total equals
whatever is already in total,

47
00:04:06.802 --> 00:04:09.629
plus the price that we just got.

48
00:04:12.611 --> 00:04:14.819
And that way you accumulate this.

49
00:04:14.819 --> 00:04:19.314
It was key that I defined that
variable total outside of the loop so

50
00:04:19.314 --> 00:04:23.497
that it's not overwritten to 0
every time this loop is run.

51
00:04:23.497 --> 00:04:28.442
All right, once we're outside of the loop,
let's go ahead and close our scanner,

52
00:04:28.442 --> 00:04:29.916
and print out the total.

53
00:04:42.296 --> 00:04:43.029
All right.

54
00:04:45.598 --> 00:04:47.228
How many items we're scanning?

55
00:04:49.446 --> 00:04:51.490
Someone give me a number, I see three.

56
00:04:51.490 --> 00:04:52.286
&gt;&gt; Three, yeah.

57
00:04:52.286 --> 00:04:53.549
&gt;&gt; That's a good one, right?

58
00:04:53.549 --> 00:05:00.970
All right, first item is five books,
the second item is two.

59
00:05:00.970 --> 00:05:05.940
The third item is that 7,
let's say 8 for 15.

60
00:05:05.940 --> 00:05:08.498
So your total is 15.

61
00:05:08.498 --> 00:05:12.701
Questions on the for loop?

62
00:05:15.771 --> 00:05:18.627
&gt;&gt; It seems like that's a lot of
boilerplate for writing that for loop.

63
00:05:18.627 --> 00:05:22.171
Are there any easier ways or
more shorthand ways?

64
00:05:22.171 --> 00:05:29.127
&gt;&gt; There are additional types of for
loops that we'll look into in this course,

65
00:05:29.127 --> 00:05:34.274
but they are more for
when you're dealing with objects.

66
00:05:34.274 --> 00:05:38.938
Since this is like,
we don't have an object that we're

67
00:05:38.938 --> 00:05:42.325
looping through or anything like that.

68
00:05:42.325 --> 00:05:43.547
This is your best bet.

69
00:05:47.914 --> 00:05:49.219
All right?

70
00:05:49.219 --> 00:05:54.799
Okay, so
some things to remember about for loops.

71
00:05:54.799 --> 00:06:00.932
For loops are count controlled,
they're not condition controlled.

72
00:06:00.932 --> 00:06:05.584
So, these run a specific number of times,
right?

73
00:06:05.584 --> 00:06:09.290
The person told us,
they have this quantity of items,

74
00:06:09.290 --> 00:06:13.007
and that's how many times the loop is run,
all right?

75
00:06:13.007 --> 00:06:17.340
Remember, when we wrote that code,
I didn't have to say it.

76
00:06:17.340 --> 00:06:21.264
Yes, I wanna run again or
anything like that, it kept a count.

77
00:06:21.264 --> 00:06:25.340
They told us three,
we said run this that many times.

78
00:06:25.340 --> 00:06:28.090
After the three times, boom, it was done.

79
00:06:28.090 --> 00:06:34.633
It also tests the condition that we
specify before the loop is run again.

80
00:06:34.633 --> 00:06:37.759
And then it's best to use this
when you know how many times.

81
00:06:37.759 --> 00:06:42.170
Like you know this needs to run
a specific number of times,

82
00:06:42.170 --> 00:06:46.052
not necessarily infinite number of times,
okay?

83
00:06:48.490 --> 00:06:52.941
You can nest your loops just like you
can nest your decision structures.

84
00:06:52.941 --> 00:07:00.381
So sometimes our tasks have subtasks and
those are also repetitive.

85
00:07:00.381 --> 00:07:04.103
And you can nest any of these
types of loops together so

86
00:07:04.103 --> 00:07:08.415
you could have a while with a for
loop inside of it or whatever.

