WEBVTT

1
00:00:00.091 --> 00:00:01.470
So, let's talk about records.

2
00:00:01.470 --> 00:00:06.639
They are a newer type
of construct in Java.

3
00:00:06.639 --> 00:00:11.959
They are also a Java class,
but they are made for

4
00:00:11.959 --> 00:00:18.609
very simple things where you
basically have some fields and

5
00:00:18.609 --> 00:00:23.538
maybe a method or two, maybe none, right?

6
00:00:23.538 --> 00:00:27.283
So, these are typically
called POJOs in Java.

7
00:00:27.283 --> 00:00:28.920
You might hear somebody say POJO.

8
00:00:28.920 --> 00:00:32.882
POJO stands for Plain Old Java Object.

9
00:00:32.882 --> 00:00:36.629
And Plain Old Java Objects
usually have some fields,

10
00:00:36.629 --> 00:00:40.633
some getters and setters,
nothing else really, okay?

11
00:00:40.633 --> 00:00:46.215
And you use these a lot to model different
things, different types of objects.

12
00:00:46.215 --> 00:00:50.514
And so, records were created
to kind of help with that.

13
00:00:50.514 --> 00:00:53.907
Cuz, there's so much boilerplate
code to write those getters and

14
00:00:53.907 --> 00:00:55.064
setters all the time.

15
00:00:55.064 --> 00:01:00.902
Instead, we can write record instead of
the word class, as we see on line one.

16
00:01:00.902 --> 00:01:05.040
So, you would say the access modifier,
in this case it's public,

17
00:01:05.040 --> 00:01:08.903
record, as opposed to class, and
then the name of the record.

18
00:01:08.903 --> 00:01:10.631
So, this is a count.

19
00:01:10.631 --> 00:01:16.591
Also, something that you don't see with
regular classes is the set of parentheses,

20
00:01:16.591 --> 00:01:18.593
almost like a constructor.

21
00:01:18.593 --> 00:01:23.704
The set of parentheses right after
the declaration of the record, and

22
00:01:23.704 --> 00:01:29.340
then you would just list a comma delimited
list of the fields for that record.

23
00:01:29.340 --> 00:01:32.255
That's it,
I don't have to write anything else.

24
00:01:32.255 --> 00:01:37.141
With this automatically in the background,
my getter methods are created and

25
00:01:37.141 --> 00:01:38.779
all of that sort of stuff.

26
00:01:38.779 --> 00:01:42.980
So, I could use that and
it's really great for

27
00:01:42.980 --> 00:01:47.406
modeling different types of objects and
stuff.

28
00:01:47.406 --> 00:01:52.620
Now, if you just wanted to
add methods to this you can.

29
00:01:53.764 --> 00:01:59.144
And so, to do so, notice, put these
little curly braces, and you're done.

30
00:01:59.144 --> 00:02:02.931
If you want a method,
you would expand those curly braces and

31
00:02:02.931 --> 00:02:07.103
then add any methods that you wanted
to inside of the curly braces.

32
00:02:10.291 --> 00:02:12.351
As far as working with records,

33
00:02:12.351 --> 00:02:16.101
you instantiate them just like
you would any other class.

34
00:02:16.101 --> 00:02:18.040
So, this is an account.

35
00:02:18.040 --> 00:02:21.050
I am calling new Account.

36
00:02:21.050 --> 00:02:25.489
And I'm calling a constructor even though
there is no constructor defined in

37
00:02:25.489 --> 00:02:26.522
record, right?

38
00:02:26.522 --> 00:02:30.229
But, we did say this is the data
that has to come with it, so

39
00:02:30.229 --> 00:02:32.518
you would have to pass in that data.

40
00:02:34.637 --> 00:02:39.615
I don't know if record has, record does
not have a default constructor like that.

41
00:02:39.615 --> 00:02:43.379
I'm glad I mentioned that.

42
00:02:43.379 --> 00:02:49.338
So, and this is the case for classes 2.

43
00:02:49.338 --> 00:02:54.965
If you define a constructor yourself,
it doesn't have to be a default one.

44
00:02:54.965 --> 00:02:57.487
So, we talked about the all arg,

45
00:02:57.487 --> 00:03:01.465
I showed you that you don't
have to use all the args.

46
00:03:01.465 --> 00:03:02.521
You can do whatever you want.

47
00:03:02.521 --> 00:03:06.435
So, you could have had a rectangle that
only takes a length as a constructor.

48
00:03:06.435 --> 00:03:10.016
A rectangle that only takes the width,
you do whatever you wanna do.

49
00:03:10.016 --> 00:03:14.480
But, if you do explicitly
define a constructor,

50
00:03:14.480 --> 00:03:21.512
then that default constructor is not
automatically created for you anymore.

51
00:03:21.512 --> 00:03:24.421
That's wiped away, right?

52
00:03:24.421 --> 00:03:27.743
Even if you have not explicitly
declared a default one, but

53
00:03:27.743 --> 00:03:31.344
you declared a different type,
then that one no longer exists.

54
00:03:31.344 --> 00:03:36.360
Now for records, you're kinda creating
a constructor here if you think about it,

55
00:03:36.360 --> 00:03:40.102
this is like a class and
a constructor declaration all in one.

56
00:03:40.102 --> 00:03:43.332
I'm saying public record and
I'm saying here are all the fields.

57
00:03:43.332 --> 00:03:45.941
Now, records are final.

58
00:03:45.941 --> 00:03:49.790
So, I told you that's one
of the access modifiers,

59
00:03:49.790 --> 00:03:55.051
you don't have to explicitly say it here,
because they are all final.

60
00:03:55.051 --> 00:04:01.865
By it being final, what that means is you
cannot later change the field values.

61
00:04:01.865 --> 00:04:04.742
There are no setters.

62
00:04:04.742 --> 00:04:10.681
When I said this is my account and
I gave it those numbers, that's it.

63
00:04:10.681 --> 00:04:12.517
I can never change that.

64
00:04:12.517 --> 00:04:16.186
So you see on line 3 where
I say account that setType.

65
00:04:16.186 --> 00:04:18.714
There are no setters.

66
00:04:18.714 --> 00:04:22.312
You cannot set the type,
you cannot change anything.

67
00:04:22.312 --> 00:04:25.088
The fields are final.

68
00:04:25.088 --> 00:04:30.439
So, those values that I gave it in line 1,
that's it, that's my one shot.

69
00:04:30.439 --> 00:04:33.991
Now you can do getters on line 5.

70
00:04:33.991 --> 00:04:40.324
But, the getters do not start with get
like they conventionally do in classes and

71
00:04:40.324 --> 00:04:44.436
records, you would call
the field as a method name.

72
00:04:44.436 --> 00:04:50.097
So, this is account balance instead
of account get balance, yes.

73
00:04:50.097 --> 00:04:55.394
&gt;&gt; For this records type,
is it a type or is it a.

74
00:04:55.394 --> 00:04:58.489
&gt;&gt; Yeah, you can define it as a type.

75
00:04:58.489 --> 00:05:02.438
&gt;&gt; Would you also need to do
the boilerplate, for example, for

76
00:05:02.438 --> 00:05:03.451
a hash code or?

77
00:05:03.451 --> 00:05:05.015
&gt;&gt; No.
&gt;&gt; Okay.

78
00:05:05.015 --> 00:05:06.646
&gt;&gt; All of that's done for you.

79
00:05:06.646 --> 00:05:11.470
So all classes, and we'll talk about

80
00:05:11.470 --> 00:05:16.897
inheritance in a while, but all classes or

81
00:05:16.897 --> 00:05:22.477
all objects inherit
from this one godfather

82
00:05:22.477 --> 00:05:27.181
class in Java called object itself.

83
00:05:27.181 --> 00:05:30.150
So, object is god in Java, right?

84
00:05:30.150 --> 00:05:32.513
And everyone inherits from object.

85
00:05:32.513 --> 00:05:37.472
And so with that, object has some
methods like hash code and equals and

86
00:05:37.472 --> 00:05:38.829
things like that.

87
00:05:38.829 --> 00:05:43.009
That typically you would maybe
wanna override those with your own

88
00:05:43.009 --> 00:05:44.229
implementation.

89
00:05:44.229 --> 00:05:47.768
But in records,
you do not have to override them all.

90
00:05:47.768 --> 00:05:51.087
All that is kinda automatically done, yes.

91
00:05:51.087 --> 00:05:55.057
&gt;&gt; When would this be an efficient
method to use where you set everything

92
00:05:55.057 --> 00:05:55.882
originally?

93
00:05:55.882 --> 00:06:00.922
&gt;&gt; Yeah, so this would be good when
you just need to model something,

94
00:06:00.922 --> 00:06:03.446
I just wanna model this account.

95
00:06:03.446 --> 00:06:08.300
There's nothing else I wanna add to
it other than getter methods for

96
00:06:08.300 --> 00:06:09.841
its fields, right?

97
00:06:09.841 --> 00:06:13.962
I don't have anything else to add here.

98
00:06:13.962 --> 00:06:17.984
And so, this would be a good case
to use as a record versus a class,

99
00:06:17.984 --> 00:06:20.411
cuz there's nothing more I wanna put.

100
00:06:20.411 --> 00:06:23.406
There's no other methods
that I wanna add to it.

101
00:06:23.406 --> 00:06:25.003
I don't care about people.

102
00:06:25.003 --> 00:06:27.779
When you first set up your account,
you don't then come and say,

103
00:06:27.779 --> 00:06:30.317
well, it's no longer as checking
I want it to be a savings.

104
00:06:30.317 --> 00:06:32.041
It's not a thing, right?

105
00:06:32.041 --> 00:06:35.940
You don't go and say, my account number,
I don't want it to be this anymore,

106
00:06:35.940 --> 00:06:36.799
I want to be that.

107
00:06:36.799 --> 00:06:39.590
So, this makes sense for final.

108
00:06:39.590 --> 00:06:42.884
Once you set it up,
that initial time, that's it.

109
00:06:42.884 --> 00:06:44.966
Now the balance might change, right?

110
00:06:44.966 --> 00:06:49.604
So, [LAUGH] all right.

111
00:06:49.604 --> 00:06:53.532
&gt;&gt; I noticed you did put
a balance after checking.

112
00:06:53.532 --> 00:06:56.012
So, would that mean that
value would be hardcoded and

113
00:06:56.012 --> 00:06:57.620
that would not be manipulatable?

114
00:06:57.620 --> 00:07:02.060
&gt;&gt; Right, so,
it would not be manipulatable, but,

115
00:07:02.060 --> 00:07:06.712
you might have something
that's updating records or

116
00:07:06.712 --> 00:07:10.552
something like that in a database, right?

117
00:07:10.552 --> 00:07:15.423
So, I might have a method in
there that says update balance.

118
00:07:15.423 --> 00:07:21.384
And then it'll go off to a database, it'll
update the database and all of that stuff.

119
00:07:21.384 --> 00:07:25.500
It would not be reflected
in this object itself.

120
00:07:25.500 --> 00:07:33.304
So maybe balance is not a great
attribute to have on this record.

121
00:07:35.552 --> 00:07:40.212
You might wanna do a new object type
that's called account balance or

122
00:07:40.212 --> 00:07:42.635
something that's more flexible.

123
00:07:42.635 --> 00:07:45.651
&gt;&gt; And then the account balance
might be owned by the account.

124
00:07:45.651 --> 00:07:48.284
&gt;&gt; Yeah.
&gt;&gt; Okay, so records can have or

125
00:07:48.284 --> 00:07:50.551
cannot have message in them.

126
00:07:50.551 --> 00:07:52.755
&gt;&gt; They can, you can add methods.

127
00:07:52.755 --> 00:07:58.011
None of them can change
the values of any of the fields,

128
00:07:58.011 --> 00:08:01.102
but you can add methods, yeah.

129
00:08:03.791 --> 00:08:09.047
And to do so, is like this online 7.

130
00:08:09.047 --> 00:08:13.567
So within those curly braces,
I just added a method there.

131
00:08:13.567 --> 00:08:17.636
&gt;&gt; So a good example for
a record might be, for example,

132
00:08:17.636 --> 00:08:23.800
something like a tax rate where, unless
it's changed 10 years down the line.

133
00:08:23.800 --> 00:08:24.871
Having a permanent value for

134
00:08:24.871 --> 00:08:28.290
that is not necessarily a bad thing
if you're just referencing it once.

135
00:08:28.290 --> 00:08:30.883
&gt;&gt; If it's bigger than just a value,
right?

136
00:08:30.883 --> 00:08:34.680
Otherwise you would just make it
a value into some field or something.

137
00:08:34.680 --> 00:08:40.009
But yeah, if it's an object with
some behaviors, then yeah, sure.

138
00:08:40.009 --> 00:08:44.174
&gt;&gt; Is that kind of meant to replace,
I don't know POJO, or?

139
00:08:44.174 --> 00:08:49.823
&gt;&gt; Yeah, so it's meant as,
we're sick of writing POJOs, okay?

140
00:08:49.823 --> 00:08:53.315
It's just so redundant, and

141
00:08:53.315 --> 00:08:58.630
it's all of this verbose boilerplate code.

142
00:08:58.630 --> 00:09:00.580
I write my feels.

143
00:09:00.580 --> 00:09:03.533
That's why IntelliJ made generate
the getter and setter, so

144
00:09:03.533 --> 00:09:05.120
I don't have to write this.

145
00:09:05.120 --> 00:09:09.480
But back in the day, we were literally
writing these getter and setter methods.

146
00:09:09.480 --> 00:09:12.720
And it's just, gosh,
it's a bane to our existence, right?

147
00:09:12.720 --> 00:09:15.548
And so records is a smarter way.

148
00:09:15.548 --> 00:09:18.441
How about you don't write any methods?

149
00:09:18.441 --> 00:09:21.207
What's the fields that you want?

150
00:09:21.207 --> 00:09:24.670
Specify those and we're good to go.

151
00:09:24.670 --> 00:09:30.986
So, this is a newer construct in Java,
maybe like a year or two.

152
00:09:30.986 --> 00:09:35.413
And so
you may not see them that much just yet.

153
00:09:35.413 --> 00:09:38.517
People are still kind of getting
used to them and stuff like that.

154
00:09:38.517 --> 00:09:42.650
But a lot of Java programmers
were using things like Lombok.

155
00:09:45.610 --> 00:09:50.064
Dependencies and stuff that helped
you manage POJOs a little bit better.

156
00:09:50.064 --> 00:09:55.371
But it's really good for
back-end development where you're

157
00:09:55.371 --> 00:10:01.188
like deserializing, JSON from API
responses and things like that.

158
00:10:01.188 --> 00:10:03.064
You don't necessarily
need to update anything.

159
00:10:03.064 --> 00:10:08.604
You just need a representation of
that JSON in Java object form.

160
00:10:12.960 --> 00:10:18.173
Okay, all right, so
wrapper classes someone asked the question

161
00:10:18.173 --> 00:10:24.347
what's the difference between int and
integer with a capital I for example?

162
00:10:24.347 --> 00:10:31.318
So, all of the primitive data types can
also be represented in object form.

163
00:10:31.318 --> 00:10:36.128
So before we talked about objects, we were
doing int, we were doing double, Boolean,

164
00:10:36.128 --> 00:10:39.200
and char, all of that stuff,
which is perfectly fine.

165
00:10:39.200 --> 00:10:40.906
I still use all of that stuff.

166
00:10:40.906 --> 00:10:45.850
But if you needed that to be in the form
of an object so that you can maybe

167
00:10:45.850 --> 00:10:51.500
access some convenience methods,
you can represent it in that way.

168
00:10:51.500 --> 00:10:57.453
So integer right here like this
second line, it's pretty much exactly

169
00:10:57.453 --> 00:11:04.093
the same as the first line except now with
the number two I can say number two dot,

170
00:11:04.093 --> 00:11:08.383
and I would have a list of
methods I can use for this.

171
00:11:08.383 --> 00:11:10.382
So, here are the primitive data types, and

172
00:11:10.382 --> 00:11:13.300
here are the wrapper classes
that correspond to them.

173
00:11:13.300 --> 00:11:17.093
So, int, double, long, float,
boolean, char, and byte.

174
00:11:17.093 --> 00:11:21.873
Literally, just with a capital letter,
except for integers, always spelled out.

175
00:11:21.873 --> 00:11:23.668
&gt;&gt; Is a string of wrapper class.

176
00:11:23.668 --> 00:11:25.840
&gt;&gt; String is not a wrapper class.

177
00:11:25.840 --> 00:11:28.020
But string is an object.

178
00:11:28.020 --> 00:11:31.473
So string is not a primitive data type.

179
00:11:31.473 --> 00:11:35.750
We've used string, notice that it
always started with a capital letter.

180
00:11:35.750 --> 00:11:37.826
Well, maybe you didn't notice that,
did you?

181
00:11:37.826 --> 00:11:41.337
Okay, so it is an object in and of itself.

