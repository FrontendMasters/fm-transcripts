WEBVTT

1
00:00:00.000 --> 00:00:03.914
In addition to the java.util
function package,

2
00:00:03.914 --> 00:00:08.669
Java also provides us with
a java.util.stream package for

3
00:00:08.669 --> 00:00:11.661
your functional programming needs.

4
00:00:11.661 --> 00:00:17.469
So a stream represents a sequence
of elements from a collection,

5
00:00:17.469 --> 00:00:21.386
from an array, or some other input source.

6
00:00:21.386 --> 00:00:28.736
So the way that it works, it does not
store elements like collections do.

7
00:00:28.736 --> 00:00:33.280
Instead, it allows you to
perform operations on the data

8
00:00:33.280 --> 00:00:37.645
without affecting the original
data source, right?

9
00:00:37.645 --> 00:00:41.585
So it contains built-in methods and
classes and

10
00:00:41.585 --> 00:00:46.106
interfaces that allow you
to perform some operations.

11
00:00:46.106 --> 00:00:49.851
So given that you have an original source,

12
00:00:49.851 --> 00:00:54.228
you could then call any
of the stream operations.

13
00:00:54.228 --> 00:00:57.357
And it could do some sort of processing of

14
00:00:57.357 --> 00:01:01.231
the data without affecting
the original source.

15
00:01:01.231 --> 00:01:06.529
So the original source stays intact and
you can output what would happen,

16
00:01:06.529 --> 00:01:12.090
blah, blah, blah, I've processed
this in this way, here's the output.

17
00:01:13.752 --> 00:01:17.552
So here's an array of numbers.

18
00:01:17.552 --> 00:01:23.430
So we could create a stream of this
array simply by calling string.

19
00:01:23.430 --> 00:01:25.320
So this is on the arrays class.

20
00:01:25.320 --> 00:01:30.395
This would be a static method
on arrays that says, okay,

21
00:01:30.395 --> 00:01:36.116
turn, take that data source and
I need to make a stream out of it.

22
00:01:36.116 --> 00:01:41.117
Given the stream, I then can do
a dot on that stream to perform

23
00:01:41.117 --> 00:01:46.424
any operations that I want, so
I can use forEach, for example.

24
00:01:46.424 --> 00:01:50.933
Now, on the numbers array by itself,
I wouldn't have access to this

25
00:01:50.933 --> 00:01:55.471
forEach method, so this is a great
way to have the forRach on arrays.

26
00:01:55.471 --> 00:02:00.359
You would turn it into a stream, say
forEach, and then do whatever you want.

27
00:02:00.359 --> 00:02:05.395
So in this case,
this is gonna print out the number +1.

28
00:02:07.528 --> 00:02:09.218
So that would be the output.

29
00:02:09.218 --> 00:02:11.755
Now, that's the output, right?

30
00:02:11.755 --> 00:02:14.901
I have not modified
the numbers array at all.

31
00:02:14.901 --> 00:02:18.994
That array still stays intact
the way that it is, but

32
00:02:18.994 --> 00:02:23.553
I performed some operation on
the data that was there, and

33
00:02:23.553 --> 00:02:27.210
then produced the output based on that.

34
00:02:27.210 --> 00:02:32.254
Right, so
the stream API also provides a method

35
00:02:32.254 --> 00:02:37.812
to process operations on
the elements in parallel.

36
00:02:37.812 --> 00:02:42.025
So I can do a couple of different
operations all at the same time.

37
00:02:44.103 --> 00:02:51.242
So if I did this, I'm basically saying
in parallel, I want you to run forEach.

38
00:02:51.242 --> 00:02:54.570
So it's just kinda doing
it kinda randomly.

39
00:02:54.570 --> 00:02:59.449
And notice the numbers are not in
any sort of order or anything,

40
00:02:59.449 --> 00:03:04.376
because they all were kinda
happening at the same time.

41
00:03:04.376 --> 00:03:10.399
Now, it's going to use multiple threads
to process the elements at the same time.

42
00:03:10.399 --> 00:03:13.324
So again, it's not gonna be sequential.

43
00:03:13.324 --> 00:03:16.874
Every time you run this,
it's likely to be different, or whatever.

44
00:03:16.874 --> 00:03:21.146
So if you cared about ordering and
stuff, this is not a great use.

45
00:03:21.146 --> 00:03:25.417
If you don't care,
you just need everything done, right,

46
00:03:25.417 --> 00:03:27.613
then this would be effective.

47
00:03:27.613 --> 00:03:34.149
So the stream API provides several useful
operations that can be performed on its

48
00:03:34.149 --> 00:03:40.604
trees, and these operations can be either
intermediate or they are terminal.

49
00:03:40.604 --> 00:03:42.855
For intermediate operations,

50
00:03:42.855 --> 00:03:48.533
it's gonna return the resulting stream
after it's finished what it's doing.

51
00:03:48.533 --> 00:03:51.826
And this will enable
you to continue running

52
00:03:51.826 --> 00:03:55.481
even more operations on
that resulting stream.

53
00:03:55.481 --> 00:03:58.803
Again, the original data
source wasn't affected, right?

54
00:03:58.803 --> 00:04:02.899
So the stream has all
of that data processed.

55
00:04:02.899 --> 00:04:05.216
It could say, here's that stream,

56
00:04:05.216 --> 00:04:10.242
the resulting stream back to you in case
you wanna do some more processing on it.

57
00:04:10.242 --> 00:04:14.601
Or with the terminal one,
it closes the stream.

58
00:04:14.601 --> 00:04:20.476
It means this is the final operation
that can be performed on that stream,

59
00:04:20.476 --> 00:04:22.577
and the stream is closed.

