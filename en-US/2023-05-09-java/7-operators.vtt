WEBVTT

1
00:00:00.000 --> 00:00:05.172
Okay, so we've been using
a lot of conditions within our

2
00:00:05.172 --> 00:00:11.223
decision structures and with those,
we're using expressions.

3
00:00:11.223 --> 00:00:15.534
So I wanted to quickly go over
some relational operators.

4
00:00:15.534 --> 00:00:20.109
So these are the symbols that we've
been using within our conditions.

5
00:00:20.109 --> 00:00:22.809
Java has six relational operators.

6
00:00:22.809 --> 00:00:27.509
So you can use greater than,
less than, greater than or

7
00:00:27.509 --> 00:00:32.711
equal to, less than or equal to,
equal to, and not equal to.

8
00:00:32.711 --> 00:00:38.475
So the equal and the not equal,
we haven't used their conditions yet.

9
00:00:38.475 --> 00:00:42.991
That equal operator, so
this is the equality operator,

10
00:00:42.991 --> 00:00:45.825
you have to be very careful in Java.

11
00:00:45.825 --> 00:00:49.792
If you use a single equal sign,
that is for assignment.

12
00:00:49.792 --> 00:00:54.435
So even if you said if this
single equal sign that,

13
00:00:54.435 --> 00:01:00.406
what that's gonna do is assign
that value to that other value and

14
00:01:00.406 --> 00:01:02.741
it'll be true, right?

15
00:01:02.741 --> 00:01:06.892
And so you'll go inside of that condition
all the time, you'll be scratching your

16
00:01:06.892 --> 00:01:10.883
brain, this doesn't equal this, why is
it going inside of this if statement?

17
00:01:10.883 --> 00:01:13.149
It's because you just assigned something,
right?

18
00:01:13.149 --> 00:01:15.844
So you have to use the double equal sign.

19
00:01:15.844 --> 00:01:19.959
That checks for equality, right.

20
00:01:19.959 --> 00:01:23.859
Logical operators, so these are great.

21
00:01:23.859 --> 00:01:28.570
If you wanna combine two
conditions into one, right?

22
00:01:28.570 --> 00:01:33.525
So there are three of these,
one is the AND operator.

23
00:01:33.525 --> 00:01:37.670
This will look at two
conditions to determine if,

24
00:01:37.670 --> 00:01:41.231
collectively, this whole thing is true.

25
00:01:41.231 --> 00:01:45.464
In order for it to be true,
both of the conditions must be true.

26
00:01:45.464 --> 00:01:49.440
So in this example, it says,
is 1 less than or equal to 2?

27
00:01:49.440 --> 00:01:50.366
That's true.

28
00:01:50.366 --> 00:01:55.020
And is 4 not equal to 5?

29
00:01:55.020 --> 00:01:58.005
Also true, they both need to be true.

30
00:01:58.005 --> 00:02:00.077
If the first one was false,

31
00:02:00.077 --> 00:02:04.863
it would not evaluate the second
one because there's no need.

32
00:02:04.863 --> 00:02:08.502
It won't result to true because
they both have to be true.

33
00:02:08.502 --> 00:02:10.713
So that's called short circuiting.

34
00:02:10.713 --> 00:02:14.289
In the second one we have OR.

35
00:02:14.289 --> 00:02:16.165
This is two pipes.

36
00:02:16.165 --> 00:02:20.278
At least one condition must be
true in order for this to be true.

37
00:02:20.278 --> 00:02:25.351
So in the example we have is 3 equal to 4,
that's false.

38
00:02:25.351 --> 00:02:29.147
But only one needs to be true, so
it is gonna check the second one.

39
00:02:29.147 --> 00:02:31.215
Is 2 equal to 2, that's true.

40
00:02:31.215 --> 00:02:35.710
Only one needs to be true,
this whole thing is true, all right?

41
00:02:35.710 --> 00:02:37.867
If the first one was true,

42
00:02:37.867 --> 00:02:43.765
it would not evaluate the second one
because we only need one to be true.

43
00:02:43.765 --> 00:02:47.064
And then the last one is not.

44
00:02:47.064 --> 00:02:53.318
This one is going to take whatever the
value of the condition is and negate it.

45
00:02:53.318 --> 00:02:58.106
So in our example it says there's
2 equals 3, that's false, but

46
00:02:58.106 --> 00:03:01.641
we have a not so
the whole condition becomes true.

47
00:03:03.537 --> 00:03:07.048
Okay, questions on logical operators.

48
00:03:09.635 --> 00:03:13.688
So, remember we looked at the nested
IF statements and we did,

49
00:03:13.688 --> 00:03:18.582
if salary is greater than or equal to
requireSalary, then we went in we asked

50
00:03:18.582 --> 00:03:23.864
another question if the years is greater
than or equal to requireYearsEmployed.

51
00:03:23.864 --> 00:03:28.785
We could simplify this
by using the compound

52
00:03:28.785 --> 00:03:34.240
conditions and
use a logical operator instead.

53
00:03:34.240 --> 00:03:38.309
So, for example,
we can say if the salary is &gt;=

54
00:03:38.309 --> 00:03:43.591
the requiredSalary &amp;&amp; the years
are &gt;= the required loan.

55
00:03:43.591 --> 00:03:46.975
So we're putting both of those
conditions into one, okay?

56
00:03:46.975 --> 00:03:50.124
When I said about the short circuit, so

57
00:03:50.124 --> 00:03:55.956
notice the sentence that I have on
the else, sorry, you do not qualify.

58
00:03:55.956 --> 00:04:00.318
I can't tell you whether you don't
qualify because you didn't meet

59
00:04:00.318 --> 00:04:04.012
the salary expectations or
because of the require years.

60
00:04:04.012 --> 00:04:06.221
I don't know which one of those failed,
right?

61
00:04:06.221 --> 00:04:12.113
So if it failed on the first one, it
would have just went right into the else,

62
00:04:12.113 --> 00:04:14.704
and not even looked at the years.

