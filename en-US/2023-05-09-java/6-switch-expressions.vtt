WEBVTT

1
00:00:00.000 --> 00:00:02.191
So there's also switch expressions.

2
00:00:02.191 --> 00:00:06.634
So these are similar to
the switch statements, but

3
00:00:06.634 --> 00:00:11.504
they allow you to directly
assign a value to a variable.

4
00:00:11.504 --> 00:00:16.049
All right, so
we're going to copy that code we just

5
00:00:16.049 --> 00:00:19.229
wrote will copy it into a new class.

6
00:00:19.229 --> 00:00:23.975
And we're gonna use a switch expression to
print the message versus a statement so

7
00:00:23.975 --> 00:00:26.056
you can see the difference, okay.

8
00:00:26.056 --> 00:00:34.301
So let's go back to our ID.

9
00:00:38.551 --> 00:00:45.122
And if we go over to the project let's
right-click on grade message and

10
00:00:45.122 --> 00:00:49.940
choose copy and
then on decision structure paste and

11
00:00:49.940 --> 00:00:57.951
they'll ask you to rename this because you
can't have two classes with the same name.

12
00:00:57.951 --> 00:01:03.854
So we'll just do _switchexpressions

13
00:01:07.415 --> 00:01:08.000
All right.

14
00:01:15.317 --> 00:01:20.422
So right here where we have string
message what we're doing in

15
00:01:20.422 --> 00:01:25.636
this which structure is where
assigning a value to message well

16
00:01:30.000 --> 00:01:34.205
You can do all of this with an expression
expressions are specifically switch

17
00:01:34.205 --> 00:01:38.875
expressions were specifically designed for
this sort of switch statement, right.

18
00:01:38.875 --> 00:01:43.301
This is like a lot of bulk in
order to just assign something.

19
00:01:43.301 --> 00:01:47.320
So instead I can say
string message equals and

20
00:01:47.320 --> 00:01:53.576
then on the right hand side of this
statement, I would use the switch.

21
00:01:53.576 --> 00:01:58.274
So I can say I can just move this
switch up to the right hand side.

22
00:01:58.274 --> 00:02:04.229
So I'm gonna switch on grade, I still
have my curly braces and all of that.

23
00:02:04.229 --> 00:02:07.354
The way that the cases
are written changes a bit.

24
00:02:07.354 --> 00:02:10.910
So it's a bit more streamlined,

25
00:02:10.910 --> 00:02:16.117
instead of this :,
after the case, I use a- and

26
00:02:16.117 --> 00:02:21.332
an &gt;, a caret, right caret,
to make an arrow.

27
00:02:21.332 --> 00:02:25.518
And then I put the mess,
whatever I want the message to be.

28
00:02:25.518 --> 00:02:29.960
So I'm gonna erase message=, and
we'll just put Excellent job.

29
00:02:29.960 --> 00:02:34.655
You don't need break statements
with switch expressions because

30
00:02:34.655 --> 00:02:37.347
there is no fall through, all right?

31
00:02:37.347 --> 00:02:40.168
So this is not even needed, all right?

32
00:02:40.168 --> 00:02:44.611
So let's go ahead and
clean all the rest of these up.

33
00:02:44.611 --> 00:02:48.446
Notice how

34
00:02:48.446 --> 00:02:56.545
streamlined this is.

35
00:03:00.128 --> 00:03:00.703
Okay.

36
00:03:11.199 --> 00:03:12.824
&gt;&gt; Do you still have to initialize it?

37
00:03:12.824 --> 00:03:13.522
&gt;&gt; Let's see.

38
00:03:16.758 --> 00:03:21.176
All right, we're gonna write the default
one and then I'll comment it out.

39
00:03:27.095 --> 00:03:31.045
All right, and
then we just end this with a semicolon.

40
00:03:31.045 --> 00:03:33.817
Much more streamlined, right?

41
00:03:33.817 --> 00:03:38.785
All right, so let's comment out default.

42
00:03:38.785 --> 00:03:42.849
And it looks like you
don't need the default and

43
00:03:42.849 --> 00:03:47.735
you don't need to do some
special initialization of it.

44
00:03:47.735 --> 00:03:49.801
&gt;&gt; So the switch will always return.

45
00:03:49.801 --> 00:03:51.227
&gt;&gt; It has to return something.

46
00:03:54.266 --> 00:04:01.522
You want to see what happens if we put
z I do all right let's print this out.

47
00:04:03.862 --> 00:04:09.338
I'm gonna run this
without the default case.

48
00:04:09.338 --> 00:04:11.531
Okay, so great.

49
00:04:11.531 --> 00:04:16.474
It does not have a compile error meaning
it didn't complain before we run it, but

50
00:04:16.474 --> 00:04:18.743
there's a runtime error that says.

51
00:04:18.743 --> 00:04:23.191
The switch expression does not
cover all possible values.

52
00:04:23.191 --> 00:04:28.691
So, we did in fact get an error,
but at runtime.

53
00:04:28.691 --> 00:04:32.752
So, you do need the default.

54
00:04:32.752 --> 00:04:37.679
[LAUGH] Great question,
any other questions?

55
00:04:37.679 --> 00:04:41.904
Let's run it and with a good case.

56
00:04:41.904 --> 00:04:48.210
So enter our letter grade, let's say C.

57
00:04:48.210 --> 00:04:50.797
And yep, good job.

58
00:04:50.797 --> 00:04:53.552
Okay, so that works.

59
00:04:53.552 --> 00:04:58.598
Now if you want it the effects
of maybe follow through or

60
00:04:58.598 --> 00:05:05.854
you basically just had two cases with
the same code that you wanted to execute.

61
00:05:05.854 --> 00:05:10.366
You don't want to like ever just
kind of be repeating stuff like for

62
00:05:10.366 --> 00:05:13.761
example something like that,
that's not good.

63
00:05:13.761 --> 00:05:16.836
Notice they even have a little squiggly
line, like, what are you doing here?

64
00:05:16.836 --> 00:05:22.529
All right, so if I had,
like if I wanted to say the same thing for

65
00:05:22.529 --> 00:05:27.364
two cases,
I would simply do a comma delimited list,

66
00:05:27.364 --> 00:05:31.895
and for both of those cases,
it would print that.

67
00:05:31.895 --> 00:05:37.049
Let's say that you wanted to execute
multiple statements because this one

68
00:05:37.049 --> 00:05:42.304
little arrow is really cute but what if
you had to do four or five statements?

69
00:05:42.304 --> 00:05:46.619
You could probably just
add curly braces and

70
00:05:46.619 --> 00:05:51.172
then you can write whatever
you want to write.

71
00:05:51.172 --> 00:05:57.701
It needs to be statements, but your final
line a lot of that has to be yield.

72
00:05:57.701 --> 00:06:02.665
You have to yield back some value because
remember the whole purpose of the switch

73
00:06:02.665 --> 00:06:05.809
expressions is to assign
some value to something.

74
00:06:05.809 --> 00:06:10.228
So maybe you need to do some sort
of calculation to get that value.

75
00:06:10.228 --> 00:06:15.019
But your last statement must be a yield.

76
00:06:15.019 --> 00:06:15.740
Great.

77
00:06:17.898 --> 00:06:20.323
Okay, last but not least,

78
00:06:20.323 --> 00:06:25.174
switch expressions they're
not over placement for,

79
00:06:25.174 --> 00:06:30.347
switch statements,
basically there's cases for both.

80
00:06:30.347 --> 00:06:33.932
For statements, you would want to use

81
00:06:33.932 --> 00:06:38.646
those when you essentially
want to execute code.

82
00:06:38.646 --> 00:06:40.066
It's not a matter of assignment.

83
00:06:40.066 --> 00:06:46.595
You just need to execute something based
on a condition versus a switch expression

84
00:06:46.595 --> 00:06:51.623
is when you need to conditionally
assign a value to a variable.

85
00:06:51.623 --> 00:06:52.123
Okay.

86
00:06:53.636 --> 00:06:56.150
All right, questions.

87
00:06:56.150 --> 00:06:57.103
Yes.
&gt;&gt; Are you seeing so

88
00:06:57.103 --> 00:07:00.128
before us the yield you can
have different statements?

89
00:07:00.128 --> 00:07:00.752
&gt;&gt; Yes.

90
00:07:00.752 --> 00:07:06.439
All right, so let's say we may want
to print something out, print.

91
00:07:06.439 --> 00:07:09.753
And you can do whatever you want, right?

92
00:07:09.753 --> 00:07:14.530
You can have however many statements
that final line has to be a yield.

93
00:07:14.530 --> 00:07:19.481
Is that used anywhere outside of a case or
a switch statement?

94
00:07:19.481 --> 00:07:23.694
&gt;&gt; That arrow in lambda expressions.

95
00:07:23.694 --> 00:07:29.372
&gt;&gt; So
it's relatively new to the Java language,

96
00:07:29.372 --> 00:07:36.514
the use of the arrow,
starting I think like Java 8-ish.

97
00:07:36.514 --> 00:07:42.403
But yeah it's used for
these and switch expressions is

98
00:07:42.403 --> 00:07:48.035
like kind of brand new to
the language maybe a year and

99
00:07:48.035 --> 00:07:51.886
it's used in lambda expressions.

