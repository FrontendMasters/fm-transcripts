WEBVTT

1
00:00:00.000 --> 00:00:05.979
So this one says, find the average test
scores for each student in the class.

2
00:00:05.979 --> 00:00:10.105
So you would then need one loop that's
gonna go through every student in

3
00:00:10.105 --> 00:00:10.799
the class.

4
00:00:10.799 --> 00:00:15.049
So there's however many of you in here,
that will be one loop.

5
00:00:15.049 --> 00:00:18.605
And then go through every test
grade that the student has,

6
00:00:18.605 --> 00:00:22.682
that will be another loop that
goes through the tests, all right?

7
00:00:22.682 --> 00:00:25.757
So this is what the code will look
like for something like that.

8
00:00:25.757 --> 00:00:31.189
We say we have 24 students,
they have 4 tests each.

9
00:00:31.189 --> 00:00:37.232
On line 16, we have that for loop that
says go for the number of students.

10
00:00:37.232 --> 00:00:40.680
This is called an outer loop, right?

11
00:00:40.680 --> 00:00:46.836
And then inside of that loop,
we then add another loop on line 21,

12
00:00:46.836 --> 00:00:51.484
and this is for
that particular student's tests.

13
00:00:51.484 --> 00:00:56.328
Notice here, on line 16,
we initialize i as 0,

14
00:00:56.328 --> 00:00:59.719
we use i, cuz that's convention.

15
00:00:59.719 --> 00:01:03.200
If you're gonna use an inner loop,
do not use i again,

16
00:01:03.200 --> 00:01:05.408
cuz i is tracking that outer loop.

17
00:01:05.408 --> 00:01:10.293
You're gonna get yourself royally confused
if you try to reuse that in another loop

18
00:01:10.293 --> 00:01:11.351
inside of there.

19
00:01:11.351 --> 00:01:13.803
So convention is, what's the next letter?

20
00:01:13.803 --> 00:01:16.796
j, we use j for the next loop.

21
00:01:16.796 --> 00:01:20.655
If you had another one,
you would use k or whatever, but

22
00:01:20.655 --> 00:01:24.122
you should rethink life if
you get three loops in.

23
00:01:24.122 --> 00:01:28.606
[LAUGH] All right, so
that will process the number of students,

24
00:01:28.606 --> 00:01:31.832
this is what that inner
loop would look like.

25
00:01:31.832 --> 00:01:36.562
Notice here on line 22,
I said Score for Test #,

26
00:01:36.562 --> 00:01:39.973
and then in parentheses I put j+1.

27
00:01:39.973 --> 00:01:41.855
What is that doing, anyone know?

28
00:01:41.855 --> 00:01:45.306
&gt;&gt; It's printing where we are on the loop,
but since it's 0-indexed,

29
00:01:45.306 --> 00:01:47.615
it would be kind of odd for
the user to read that.

30
00:01:47.615 --> 00:01:51.008
&gt;&gt; [LAUGH] Exactly, so
we start loops with a 0,

31
00:01:51.008 --> 00:01:55.244
that's a programming computer kinda thing,
right?

32
00:01:55.244 --> 00:02:00.354
In real life we don't talk to people like
that, what's test score number 0 like?

33
00:02:00.354 --> 00:02:01.773
No one says that, right?

34
00:02:01.773 --> 00:02:08.133
So we're just adding this for a little
user friendliness, a 1 will be added to j.

35
00:02:08.133 --> 00:02:11.124
It's not actually added to j itself.

36
00:02:11.124 --> 00:02:17.144
We put it in parentheses to say,
just temporarily add 1 to whatever's in

37
00:02:17.144 --> 00:02:22.206
the value of j, and
print that out on the console, all right?

38
00:02:22.206 --> 00:02:25.086
&gt;&gt; So it's displaying it,
but it's not assigning it.

39
00:02:25.086 --> 00:02:27.264
&gt;&gt; Yes, exactly.

40
00:02:28.845 --> 00:02:32.199
Okay, so this would be that whole program.

41
00:02:32.199 --> 00:02:36.118
So 16 is the outer loop,
21 is the inner loop.

42
00:02:36.118 --> 00:02:40.227
Notice 27 goes on to do more things.

43
00:02:40.227 --> 00:02:44.140
It is still inside of the outer loop,
okay?

44
00:02:44.140 --> 00:02:49.011
So this outer loop has statements,
an inner loop, and then more statements.

45
00:02:49.011 --> 00:02:54.451
So that covers loops, any questions?

46
00:02:54.451 --> 00:02:55.831
How do you feel about that?

47
00:02:57.241 --> 00:02:59.320
Feel good?

48
00:02:59.320 --> 00:03:00.220
All right.

49
00:03:00.220 --> 00:03:01.430
&gt;&gt; I do have one question.

50
00:03:01.430 --> 00:03:03.319
&gt;&gt; Yeah.
&gt;&gt; You were talking about

51
00:03:03.319 --> 00:03:07.206
if you had multiple loops inside
of loops inside of loops, and

52
00:03:07.206 --> 00:03:09.619
how it's not a good way to go about it.

53
00:03:09.619 --> 00:03:11.003
What convention would you use-
&gt;&gt; [LAUGH]

54
00:03:11.003 --> 00:03:12.912
&gt;&gt; If you have a less naive way to go

55
00:03:12.912 --> 00:03:14.679
about something like that?

56
00:03:14.679 --> 00:03:17.420
&gt;&gt; Yeah, I mean,
that really depends on the situation.

57
00:03:17.420 --> 00:03:20.419
Sometimes you have no choice,
you just kinda get yourself in that.

58
00:03:20.419 --> 00:03:24.260
Two loops is not abnormal, right?

59
00:03:24.260 --> 00:03:29.103
But as you start getting deeper and
deeper, even the two loops,

60
00:03:29.103 --> 00:03:33.960
you start having performance
implications with that, right?

61
00:03:33.960 --> 00:03:39.009
So there's ways, and
it's beyond the scope of this class,

62
00:03:39.009 --> 00:03:43.563
but you'll start thinking of
how else might I do this to

63
00:03:43.563 --> 00:03:47.921
have a shorter time complexity and
stuff like that.

64
00:03:47.921 --> 00:03:52.046
And it just might be
a way of restructuring.

65
00:03:52.046 --> 00:03:55.752
I can't give a hard answer cuz it
really depends on whatever it is you're

66
00:03:55.752 --> 00:03:56.491
trying to do.

67
00:03:56.491 --> 00:04:02.960
But methods is one way where you might
have this code inside of another method.

68
00:04:02.960 --> 00:04:06.648
So that's another way to
not duplicate stuff, and

69
00:04:06.648 --> 00:04:09.749
you can just call out
to it when you need it.

