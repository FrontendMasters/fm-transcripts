WEBVTT

1
00:00:00.081 --> 00:00:04.704
The next section is one of
my most favorite topics,

2
00:00:04.704 --> 00:00:07.508
data structures, all right?

3
00:00:07.508 --> 00:00:14.006
So data structures are used in programming
languages to store a collection

4
00:00:14.006 --> 00:00:20.620
of objects in such a way that operations
can be performed on the collection.

5
00:00:20.620 --> 00:00:25.113
Java provides this collections framework,

6
00:00:25.113 --> 00:00:29.721
which consists of interfaces, classes, and

7
00:00:29.721 --> 00:00:33.631
methods to store and manipulate data.

8
00:00:33.631 --> 00:00:37.156
So you can think of
the collections framework as

9
00:00:37.156 --> 00:00:41.134
basically Java's data structures and
algorithms.

10
00:00:41.134 --> 00:00:46.112
Now there are multiple
collections in Java,

11
00:00:46.112 --> 00:00:51.090
we'll focus on four of
the most common ones,

12
00:00:51.090 --> 00:00:54.893
the set, list, queue, and map.

13
00:00:54.893 --> 00:01:00.871
So a set is an unordered
collection of unique objects.

14
00:01:00.871 --> 00:01:07.202
An example use case for a set would be
a standard deck of 52 playing cards,

15
00:01:07.202 --> 00:01:12.229
where each card would be
an element in this collection, and

16
00:01:12.229 --> 00:01:17.269
each of them are unique, so
there's no duplicates in set.

17
00:01:20.182 --> 00:01:27.169
All right, so let's make a program,
we're gonna work with fruit today.

18
00:01:27.169 --> 00:01:30.734
We're going to create a set of fruit.

19
00:01:30.734 --> 00:01:32.637
And let's make a new package now.

20
00:01:37.036 --> 00:01:43.679
We'll call this one, data_structures.

21
00:01:50.230 --> 00:01:55.876
And I'm gonna make one class and we're
gonna put different methods in there for

22
00:01:55.876 --> 00:02:00.948
each of the collections so that you
have everything kinda in one place.

23
00:02:00.948 --> 00:02:03.921
So we'll call this CollectionsDemo.

24
00:02:09.952 --> 00:02:15.789
And I'll make a method called setDemo.

25
00:02:15.789 --> 00:02:19.066
Not set, like setter, but
set, like the collection.

26
00:02:19.066 --> 00:02:23.598
Before we go deep into that, let's just
make a main method that we'll call that,

27
00:02:23.598 --> 00:02:26.833
otherwise we'll try to run this and
nothing will happen.

28
00:02:30.750 --> 00:02:32.311
This needs to be static.

29
00:02:36.740 --> 00:02:40.552
Okay, so
we want to make a set of fruits, right?

30
00:02:40.552 --> 00:02:44.816
Set is a collection.

31
00:02:48.425 --> 00:02:49.775
Let's go ahead and import it.

32
00:02:49.775 --> 00:02:52.381
It comes from the java.util package.

33
00:02:56.339 --> 00:03:02.203
Set is an interface,
right, which means what?

34
00:03:02.203 --> 00:03:05.319
We cannot instantiate it.

35
00:03:05.319 --> 00:03:08.875
So I'll call this fruits.

36
00:03:08.875 --> 00:03:14.210
So we need to use one of
its implementing classes.

37
00:03:14.210 --> 00:03:18.433
Notice here they give you some examples,
HashSet, AbstractSet,

38
00:03:18.433 --> 00:03:21.112
SortedSet TreeSet, blah, blah, blah.

39
00:03:21.112 --> 00:03:27.794
A popular implementation is HashSet,
let's just use that one.

40
00:03:27.794 --> 00:03:32.402
Okay, and
I would need to import that as well.

41
00:03:32.402 --> 00:03:37.097
So now we have a new collection
that does not contain anything yet.

42
00:03:37.097 --> 00:03:44.462
In order to add things to a collection,
we can say fruits.add.

43
00:03:44.462 --> 00:03:46.747
Add takes an object.

44
00:03:46.747 --> 00:03:52.767
So collections are a group of objects,
right, not primitive data types.

45
00:03:52.767 --> 00:03:58.740
If you needed to put a set of primitive
data types, how would you do that?

46
00:04:01.739 --> 00:04:04.387
&gt;&gt; So it would be a list or an array?

47
00:04:04.387 --> 00:04:09.644
&gt;&gt; No, if you specifically
want one of these collections,

48
00:04:09.644 --> 00:04:16.650
a set or something like that, but you
needed to put values that are numbers or

49
00:04:16.650 --> 00:04:21.926
something like that,
how would you go about doing this?

50
00:04:21.926 --> 00:04:23.179
&gt;&gt; The wrapper?

51
00:04:23.179 --> 00:04:25.048
&gt;&gt; The wrapper classes.

52
00:04:25.048 --> 00:04:30.021
So remember we talked about wrapper
classes and they are the object forms

53
00:04:30.021 --> 00:04:35.008
of the primitive data types,
since collections can only take objects.

54
00:04:35.008 --> 00:04:39.657
If I needed a set of numbers,
I would use integers,

55
00:04:39.657 --> 00:04:46.809
because that becomes an object versus int,
which is the primitive data type.

56
00:04:46.809 --> 00:04:51.157
All right, so
let's go ahead and add apple.

57
00:04:55.576 --> 00:04:58.545
And we'll add a banana.

58
00:04:58.545 --> 00:05:04.536
So, by default,
because I've added a string,

59
00:05:04.536 --> 00:05:12.731
that means that this collection
holds string values, all right?

60
00:05:12.731 --> 00:05:18.184
They can hold any sort of object,
but for sets at least,

61
00:05:18.184 --> 00:05:23.070
it needs to be the same type of object,
all right?

62
00:05:23.070 --> 00:05:30.324
Add a banana, let's go ahead and
add one more for now, maybe a lemon.

63
00:05:33.726 --> 00:05:36.999
Okay, I wanna print this so far.

64
00:05:36.999 --> 00:05:42.107
So we added an apple, we added a banana,
and then we added a lemon.

65
00:05:44.610 --> 00:05:48.349
When we, sorry,
I need to print something out, right?

66
00:05:48.349 --> 00:05:51.178
So let's go ahead and
add a print statement.

67
00:05:51.178 --> 00:05:55.013
To print this,
you simply write the collection name and

68
00:05:55.013 --> 00:05:56.978
it'll print it out for you.

69
00:05:56.978 --> 00:06:00.554
So we'll run this again.

70
00:06:00.554 --> 00:06:04.279
And notice it's showing
the three fruits but

71
00:06:04.279 --> 00:06:08.995
it's not showing them in
the order that we added them in.

72
00:06:08.995 --> 00:06:13.875
That's because a set is
an unordered collection.

73
00:06:13.875 --> 00:06:18.671
So if it's important to you to model
something where the order matters,

74
00:06:18.671 --> 00:06:20.883
set is not a good option for that.

75
00:06:20.883 --> 00:06:23.724
Because it just puts it
in any random order.

76
00:06:23.724 --> 00:06:28.152
This order can even change,
if I ran this again or something,

77
00:06:28.152 --> 00:06:30.977
it might be a totally different order.

78
00:06:30.977 --> 00:06:34.327
So it adds it, but
it doesn't keep them in order.

79
00:06:36.795 --> 00:06:42.327
All right, let's add another

80
00:06:42.327 --> 00:06:47.440
apple and see what happens.

81
00:06:51.520 --> 00:06:54.645
So I don't have an error.

82
00:06:54.645 --> 00:07:01.863
If I run this though,
notice I don't have two apples either.

83
00:07:01.863 --> 00:07:06.717
That's because sets contain unique items.

84
00:07:06.717 --> 00:07:09.185
There cannot be duplicate items.

85
00:07:09.185 --> 00:07:11.991
Remember the deck of playing cards, right?

86
00:07:11.991 --> 00:07:17.566
You don't want two king of
hearts in there, right?

87
00:07:17.566 --> 00:07:19.935
So you cannot have duplicate items.

88
00:07:19.935 --> 00:07:21.678
It won't complain about it.

89
00:07:21.678 --> 00:07:23.980
It just simply will not add it again.

90
00:07:26.303 --> 00:07:31.764
&gt;&gt; If you care about the specific
position of these different objects,

91
00:07:34.572 --> 00:07:39.290
Would you want to use some
kind of variation on an array?

92
00:07:39.290 --> 00:07:40.740
&gt;&gt; We will use something else.

93
00:07:40.740 --> 00:07:43.681
One of the other four we'll talk about,
yeah.

94
00:07:43.681 --> 00:07:47.127
Some of them allow or
are ordered, some of them don't.

95
00:07:50.238 --> 00:07:54.886
Okay, so let's say that we wanna

96
00:07:54.886 --> 00:08:00.037
know if the set contains something.

97
00:08:00.037 --> 00:08:02.015
We didn't do all of these ads,

98
00:08:02.015 --> 00:08:06.669
we basically got this collection as
a parameter or something like that.

99
00:08:06.669 --> 00:08:11.217
And so it's come to us and
we need to see, hey,

100
00:08:11.217 --> 00:08:14.844
does this thing contain something?

101
00:08:14.844 --> 00:08:17.349
There is a method that you can use for
that.

102
00:08:17.349 --> 00:08:19.987
So let's just do a print statement.

103
00:08:19.987 --> 00:08:23.561
And we wanna see if it contains a lemon.

104
00:08:23.561 --> 00:08:28.305
We can say, let's just do contains lemon.

105
00:08:30.023 --> 00:08:36.256
And then we'll append this
with fruits.contains(),

106
00:08:36.256 --> 00:08:41.221
and then we can ask it,
do you contain a lemon?

107
00:08:41.221 --> 00:08:44.029
And we'll get a Boolean value back.

108
00:08:48.247 --> 00:08:53.665
So if I ran this, I see that it says true.

109
00:08:53.665 --> 00:08:55.411
We do have a lemon in here.

110
00:09:01.708 --> 00:09:06.477
What about if I want to remove
an element from a collection?

111
00:09:06.477 --> 00:09:08.454
I can do that as well.

112
00:09:08.454 --> 00:09:12.321
So to remove an element
from the collection,

113
00:09:12.321 --> 00:09:17.220
we use the collection name and
then I can just say remove.

114
00:09:17.220 --> 00:09:22.875
And inside of remove,
I specify the object I want removed.

115
00:09:22.875 --> 00:09:28.505
So, I'll actually put
this above the check for

116
00:09:28.505 --> 00:09:32.314
lemon so we can see that change.

117
00:09:32.314 --> 00:09:37.678
So now I've removed the lemon and
then I'll ask, is the lemon there?

118
00:09:37.678 --> 00:09:40.947
And this time I have false.

119
00:09:40.947 --> 00:09:45.344
So I printed the fruits before
I remove the lemon, and

120
00:09:45.344 --> 00:09:48.774
then I asked about the lemon being there.

121
00:09:51.794 --> 00:09:59.177
If I need to know the size
of the collection,

122
00:09:59.177 --> 00:10:05.573
I can say size and then fruits.size.

123
00:10:05.573 --> 00:10:07.388
Just call the size method.

124
00:10:07.388 --> 00:10:13.658
So again, this collection provides
a lot of convenience methods so

125
00:10:13.658 --> 00:10:17.291
that you can easily work with the data.

126
00:10:17.291 --> 00:10:20.286
So we have 2 after we've
removed the lemon.

127
00:10:26.856 --> 00:10:31.302
So notice here when we
add a fruit to this set,

128
00:10:31.302 --> 00:10:36.570
we had to do a line for
each fruit that we wanted to add.

129
00:10:37.780 --> 00:10:41.768
And so this is four lines of
code to add those four things.

130
00:10:41.768 --> 00:10:47.401
There's another way that you
can set the initial data.

131
00:10:47.401 --> 00:10:49.014
So let's create another set.

132
00:10:49.014 --> 00:10:54.305
We'll call this one moreFruit.

133
00:10:54.305 --> 00:10:57.334
And we can say set.of.

134
00:10:57.334 --> 00:11:02.059
Set.of will allow you to add however many

135
00:11:02.059 --> 00:11:07.190
objects to this collection
that you want to.

136
00:11:07.190 --> 00:11:10.617
So I'll say pear,

137
00:11:10.617 --> 00:11:14.908
raisin, and a cherry.

138
00:11:17.475 --> 00:11:20.022
So this is nice, it looks really easy.

139
00:11:20.022 --> 00:11:22.943
You're probably thinking,
well, I'm gonna just do that.

140
00:11:22.943 --> 00:11:28.884
Be careful,
because if you utilize this set.of method,

141
00:11:28.884 --> 00:11:36.290
then this set would be immutable,
who remembers what immutable means?

142
00:11:39.186 --> 00:11:41.920
&gt;&gt; You can't change it,
&gt;&gt; You cannot change it.

143
00:11:41.920 --> 00:11:45.150
So you would not be able
to add anything else.

144
00:11:45.150 --> 00:11:47.955
You will not be able to
remove anything else.

145
00:11:47.955 --> 00:11:52.250
In fact, if I tried to add,
it's not gonna complain.

146
00:11:52.250 --> 00:11:58.164
So if I say morefruit.add,
let's put a cranberry in there,

147
00:11:58.164 --> 00:12:02.145
notice I don't get a compilation error,

148
00:12:02.145 --> 00:12:07.056
however, let's go ahead and
just say print this.

149
00:12:07.056 --> 00:12:11.955
When I run this, Notice

150
00:12:11.955 --> 00:12:16.699
it exploded, and it exploded,

151
00:12:19.677 --> 00:12:25.248
Right here when I tried to add
a fruit to this immutable list, and

152
00:12:25.248 --> 00:12:31.035
it says unsupported operation,
basically I cannot modify this.

153
00:12:31.035 --> 00:12:33.580
Same would happen if I did remove.

154
00:12:33.580 --> 00:12:39.457
Now I can do the other things, like
check if it contains something or things

155
00:12:39.457 --> 00:12:44.199
that are not modifying the collection
&gt;&gt; Is that just going off purely off

156
00:12:44.199 --> 00:12:46.849
the values, so it has the pear,
the raisin, and

157
00:12:46.849 --> 00:12:48.928
the cherry can contain nothing else.

158
00:12:48.928 --> 00:12:52.666
What if you wanted to remove the cherry,
add the cranberry in its place,

159
00:12:52.666 --> 00:12:53.781
would that be valid?

160
00:12:53.781 --> 00:12:56.680
&gt;&gt; No, you cannot change this list.

161
00:12:56.680 --> 00:13:00.152
&gt;&gt; Okay, so it cannot be changed cuz it
cannot be changed, not necessarily cuz

162
00:13:00.152 --> 00:13:03.428
there's a certain spot in memory
where only a certain value can exist.

163
00:13:03.428 --> 00:13:03.959
&gt;&gt; No.

164
00:13:03.959 --> 00:13:09.950
&gt;&gt; Okay, I'm thinking about those arrays,
with a set number of spots in that array.

165
00:13:09.950 --> 00:13:10.540
&gt;&gt; Yeah.

166
00:13:10.540 --> 00:13:14.870
&gt;&gt; And if you try to go over that limit,
it doesn't work.

167
00:13:14.870 --> 00:13:16.310
But if you were to change and

168
00:13:16.310 --> 00:13:20.320
remove something out to free
up that space, then you could.

169
00:13:20.320 --> 00:13:21.710
That's just where my head was going.

170
00:13:21.710 --> 00:13:22.210
&gt;&gt; Okay.

