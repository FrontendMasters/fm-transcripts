WEBVTT

1
00:00:00.000 --> 00:00:03.653
Let's talk about sealed
classes still in inheritance.

2
00:00:03.653 --> 00:00:08.716
Not only does Java classes
have control over which

3
00:00:08.716 --> 00:00:13.781
of its methods can be inherited,
but they can also

4
00:00:13.781 --> 00:00:19.824
restrict inheritance altogether
to certain subclasses.

5
00:00:19.824 --> 00:00:23.979
And this is a relatively
new feature within Java.

6
00:00:23.979 --> 00:00:28.229
So classes that restrict inheritance to

7
00:00:28.229 --> 00:00:33.234
specific classes are known
as sealed classes.

8
00:00:33.234 --> 00:00:38.448
So sealed classes are useful for
modeling like a specific domain and

9
00:00:38.448 --> 00:00:43.675
controlling the relationship
between the classes in that domain.

10
00:00:43.675 --> 00:00:49.684
So here we have four classes shape,
circle, rectangle and square.

11
00:00:49.684 --> 00:00:55.341
We can declare that the only
classes that can directly

12
00:00:55.341 --> 00:01:00.247
inherit from shape are rectangle and
circle.

13
00:01:00.247 --> 00:01:05.436
And we could allow square to

14
00:01:05.436 --> 00:01:11.757
inherit from rectangle, okay?

15
00:01:11.757 --> 00:01:17.080
So this is how you would
define a sealed class,

16
00:01:17.080 --> 00:01:24.190
before the word class,
you would write this keyword sealed.

17
00:01:24.190 --> 00:01:31.444
And then before you open those curly
braces, you would use the word permits.

18
00:01:31.444 --> 00:01:34.908
So this is the super class.

19
00:01:34.908 --> 00:01:40.402
After permits,
you would have a comma delimited

20
00:01:40.402 --> 00:01:48.719
list of the classes that are permitted
to inherit from this class, okay?

21
00:01:48.719 --> 00:01:54.102
If a sealed class lists
a subclass in the permits clause,

22
00:01:54.102 --> 00:01:58.373
the subclass has to all ready exist,
right?

23
00:01:58.373 --> 00:02:04.804
And it has to extend this class.

24
00:02:07.904 --> 00:02:11.626
Otherwise you're gonna get
a compilation error, right?

25
00:02:11.626 --> 00:02:15.336
So Rectangle extends Shape,
Circle extends Shape, and

26
00:02:15.336 --> 00:02:18.516
then Shape has permitted Rectangle and
Circle.

27
00:02:18.516 --> 00:02:24.188
Now, the children of sealed
classes are also required

28
00:02:24.188 --> 00:02:30.978
to declare themselves as either sealed,
non-sealed or final.

29
00:02:30.978 --> 00:02:37.187
They have to do this, the sealed class
controls who can inherit from it.

30
00:02:37.187 --> 00:02:42.063
So in our domain,
the Rectangle will make a good sealed

31
00:02:42.063 --> 00:02:46.523
class as we only want to
allow Square to extend it.

32
00:02:46.523 --> 00:02:50.913
So in Rectangle here, we said, okay,

33
00:02:50.913 --> 00:02:57.176
we're sealed and we extend Shape and
we permit Square.

34
00:02:57.176 --> 00:02:59.312
So now you see it's
getting a little longer.

35
00:02:59.312 --> 00:03:02.134
We're doing a little inheritance, and

36
00:03:02.134 --> 00:03:05.706
then we're also saying,
who can inherit from us?

37
00:03:05.706 --> 00:03:12.865
Non-sealed means that the class is open
to be extended by any other class.

38
00:03:12.865 --> 00:03:16.352
So we'll declare Circle as non-sealed.

39
00:03:16.352 --> 00:03:21.109
And any class that extends Circle
is not obligated to declare

40
00:03:21.109 --> 00:03:25.592
themselves as sealed,
non-sealed or a final, right?

41
00:03:25.592 --> 00:03:27.632
It'll simply be a normal inheritance.

42
00:03:27.632 --> 00:03:30.996
So we kind of break the rule by, well,

43
00:03:30.996 --> 00:03:36.054
stop the rule there when we
make ourselves non-sealed.

44
00:03:36.054 --> 00:03:40.850
So none of our children have
to deal with this stuff.

45
00:03:40.850 --> 00:03:48.335
And then final means that the class
cannot have any subclasses, right?

46
00:03:48.335 --> 00:03:50.644
So it cannot be inherited from.

47
00:03:50.644 --> 00:03:57.704
So Square would be the last of
the descendants in this hierarchy.

48
00:04:00.133 --> 00:04:01.677
Questions on sealed?

49
00:04:01.677 --> 00:04:06.598
Okay, to recap a sealed class grants

50
00:04:06.598 --> 00:04:12.486
inheritance to a specific list of classes.

51
00:04:12.486 --> 00:04:17.420
Every permitted subclass
must all ready exist,

52
00:04:17.420 --> 00:04:22.361
and it must explicitly
extend the sealed class.

53
00:04:22.361 --> 00:04:27.455
And if it does then it
must declare itself as

54
00:04:27.455 --> 00:04:32.416
sealed, non-sealed, or final, yes?

55
00:04:32.416 --> 00:04:37.291
&gt;&gt; For sealed classes, because the sealed
inheriting class has to all ready exist,

56
00:04:37.291 --> 00:04:41.330
so that implied has to be in the same
package, just to know about it?

57
00:04:41.330 --> 00:04:45.850
&gt;&gt; No, you would just import
it if you were talking about

58
00:04:45.850 --> 00:04:49.270
a subclass that was in another package.

59
00:04:49.270 --> 00:04:52.894
&gt;&gt; But like the overall overarching class,
like the class that's above it in

60
00:04:52.894 --> 00:04:56.748
the hierarchy still has to know about the
class underneath it in order for it to,

61
00:04:56.748 --> 00:04:58.951
like on the valid permissions list?

62
00:04:58.951 --> 00:05:01.003
&gt;&gt; Yeah, you gotta know it exists.

63
00:05:01.003 --> 00:05:04.168
&gt;&gt; All right.
&gt;&gt; Yeah, you have to know its name and

64
00:05:04.168 --> 00:05:07.993
like where it lives,
what package it lives in.

65
00:05:07.993 --> 00:05:13.639
And again, no one has to declare
themselves as a sealed class.

66
00:05:13.639 --> 00:05:18.597
It's specifically for things where you
don't want everybody inheriting from you.

67
00:05:18.597 --> 00:05:23.004
Maybe you're modeling some
specific construct or domain and

68
00:05:23.004 --> 00:05:26.912
you're saying this is how
the inheritance should go.

69
00:05:26.912 --> 00:05:32.324
So an architect might do something like
this to control who inherits from who and

70
00:05:32.324 --> 00:05:35.332
keep things simple or something like that.

71
00:05:37.370 --> 00:05:42.850
&gt;&gt; So, when do you have to use the
non-sealed keyword, it's a keyword, right?

72
00:05:42.850 --> 00:05:49.834
&gt;&gt; Yeah, so you would use the non-sealed
keyword when you no longer want,

73
00:05:49.834 --> 00:05:53.854
like if you don't want your children to.

74
00:05:56.624 --> 00:06:02.073
You no longer have a need to
do a permission list, right?

75
00:06:02.073 --> 00:06:06.929
So I inherited from a sealed class but
I don't wanna be a sealed class,

76
00:06:06.929 --> 00:06:09.824
I wanna be open for regular inheritance.

77
00:06:09.824 --> 00:06:12.428
So you would say non-sealed.

78
00:06:12.428 --> 00:06:15.607
&gt;&gt; Okay, so you break that basically?

79
00:06:15.607 --> 00:06:19.291
&gt;&gt; Yeah, you break the-
&gt;&gt; The chain of restriction or whatever.

80
00:06:19.291 --> 00:06:21.627
&gt;&gt; Yeah.

81
00:06:21.627 --> 00:06:26.550
&gt;&gt; Then like, class a is sealed,
class b is non-sealed.

82
00:06:26.550 --> 00:06:34.014
For class c, would you have to
use like non-sealed cure at all?

83
00:06:34.014 --> 00:06:35.393
&gt;&gt; b is non-sealed.

84
00:06:35.393 --> 00:06:36.337
&gt;&gt; b is non-sealed.

85
00:06:36.337 --> 00:06:39.287
&gt;&gt; c inherits from b
&gt;&gt; c inherits from b.

86
00:06:39.287 --> 00:06:42.773
&gt;&gt; c inherits from b,
then it's a regular inheritance.

87
00:06:42.773 --> 00:06:46.801
You don't have to use sealed, non-sealed,
final or anything like that anymore.

88
00:06:48.862 --> 00:06:53.559
&gt;&gt; If you use the final statement, and if
you wanted to add another class in there,

89
00:06:53.559 --> 00:06:57.855
it would have to be prior to the final
statement or could you add another?

90
00:06:57.855 --> 00:07:00.175
&gt;&gt; So if you had a final class and

91
00:07:00.175 --> 00:07:04.830
you want to update your own class later,
you can do that.

92
00:07:04.830 --> 00:07:06.345
Yeah, you can do it.

93
00:07:06.345 --> 00:07:11.320
The final part means, anyone who inherits
from you or they can inherit from you,

94
00:07:11.320 --> 00:07:14.558
no one else can inherit from me,
is what that means.

95
00:07:14.558 --> 00:07:16.802
So you can do whatever you
want in the class itself.

96
00:07:16.802 --> 00:07:20.858
You're not saying this is the final
implementation, but you're saying this is

97
00:07:20.858 --> 00:07:24.630
the final stop on this inheritance chain,
no one else can inherit from me.

98
00:07:24.630 --> 00:07:29.418
And if you had like
final can be on classes,

99
00:07:29.418 --> 00:07:34.880
it could be on methods,
or it could be on fields.

100
00:07:34.880 --> 00:07:38.588
So if it was on not the class but
on a method,

101
00:07:38.588 --> 00:07:42.812
then someone can still
inherit from that class.

102
00:07:42.812 --> 00:07:47.480
And they also inherit the final method,
they just cannot override that method.

103
00:07:47.480 --> 00:07:53.023
And if it's the field, they inherit
the field but they cannot change it.

104
00:07:55.517 --> 00:07:58.724
&gt;&gt; So if you had a hard-coded constant,
that's one of those cases where you'd

105
00:07:58.724 --> 00:08:01.205
wanna use the final keyword on
that field or that variable?

106
00:08:01.205 --> 00:08:04.899
&gt;&gt; Yeah, all right?

107
00:08:04.899 --> 00:08:07.464
Any other, yeah.

108
00:08:07.464 --> 00:08:12.185
&gt;&gt; So
sealed is kind of an extension of final,

109
00:08:12.185 --> 00:08:18.100
no one can inherit sealed
only specific can inherit?

110
00:08:22.693 --> 00:08:29.552
&gt;&gt; Sorta, I don't like to
think of it like that though.

111
00:08:29.552 --> 00:08:33.723
So I guess so,
it's a way to limit access for sure.

112
00:08:33.723 --> 00:08:38.027
So with final you're saying,
no one like the descriptor

113
00:08:38.027 --> 00:08:42.702
they gave was correct but
the terminology is not my favorite.

114
00:08:42.702 --> 00:08:45.729
But okay, yes,
the final means no one else.

115
00:08:45.729 --> 00:08:48.998
If I have a final class,
no one else can inherit from this.

116
00:08:48.998 --> 00:08:53.483
If I have a sealed class, then only
these classes can inherit from this.

117
00:08:53.483 --> 00:08:58.744
So in that regard, yes, but
not an extension of final.

118
00:08:58.744 --> 00:09:02.885
But a way to limit access, yes.

