WEBVTT

1
00:00:00.000 --> 00:00:01.684
&gt;&gt; Anjana Vakil: I'm not allowed
to write anything to the console.

2
00:00:01.684 --> 00:00:04.119
I'm not allowed to write any files,
I'm not allowed to read any files.

3
00:00:04.119 --> 00:00:09.484
I'm not allowed to make any fetch
requests or import any libraries or

4
00:00:09.484 --> 00:00:14.306
do anything, basically,
except manipulate truth values.

5
00:00:14.306 --> 00:00:18.986
[LAUGH] Unless you're like a weirdo
philosopher like me, [LAUGH] you probably

6
00:00:18.986 --> 00:00:23.532
are like, how am I supposed to do any
actual programming with this thing?

7
00:00:23.532 --> 00:00:28.013
And that's a very valid question
that is actually something that

8
00:00:28.013 --> 00:00:31.841
the whole industry was asking itself for
many decades,

9
00:00:31.841 --> 00:00:36.664
between in the 1930s when functional
programming was invented.

10
00:00:36.664 --> 00:00:43.693
Essentially, by Alonzo Church, and today
when we have actual productive tools for

11
00:00:43.693 --> 00:00:48.157
doing real-world programming
in functional land.

12
00:00:48.157 --> 00:00:51.280
So how does that work?

13
00:00:51.280 --> 00:00:57.770
Essentially, what we wanna
do is isolate the impurity.

14
00:00:57.770 --> 00:01:01.893
We want to, in the programs
we're gonna look at today, and

15
00:01:01.893 --> 00:01:05.359
in even super complex
functional programmings,

16
00:01:05.359 --> 00:01:09.912
what we do is we push all of the impurity,
all of the side effects.

17
00:01:09.912 --> 00:01:15.810
All of the reading files, whatever,
to the outer edge of the program,

18
00:01:15.810 --> 00:01:20.822
and we make sure that all of that
impurity is just happening in

19
00:01:20.822 --> 00:01:26.651
kind of that outer shell of what's
going on when I execute my program.

20
00:01:26.651 --> 00:01:32.238
Then inside of my program,
once it has received whatever inputs it

21
00:01:32.238 --> 00:01:37.945
needs from the impure code that is
interacting with the real world.

22
00:01:37.945 --> 00:01:42.664
The inside core of the program
we keep pure and functional, so

23
00:01:42.664 --> 00:01:45.133
that it's super predictable.

24
00:01:45.133 --> 00:01:48.854
So even though our program itself
might not be deterministic now,

25
00:01:48.854 --> 00:01:52.775
because we have this outer shell
that can contain impurities, like,

26
00:01:52.775 --> 00:01:55.446
what's the file I should
write that output to?

27
00:01:55.446 --> 00:02:02.548
Or which library should I be
using to generate random numbers,

28
00:02:02.548 --> 00:02:06.843
that's not deterministic, right?

29
00:02:06.843 --> 00:02:12.074
All of that gets pushed
to the furthest reaches,

30
00:02:12.074 --> 00:02:18.837
the outermost, the kind of the very
top level of the program and

31
00:02:18.837 --> 00:02:25.614
everything else stays pure so
that we can more easily predict.

32
00:02:25.614 --> 00:02:31.188
Okay, if I am given this library for
making requests or

33
00:02:31.188 --> 00:02:36.279
what have you,
everything else that follows from

34
00:02:36.279 --> 00:02:42.837
that is going to be deterministic and
not have any side effects.

35
00:02:42.837 --> 00:02:47.563
And that's where fancy jargon like
monads and whatnot also come in,

36
00:02:47.563 --> 00:02:52.861
because there's a lot of different
techniques in functional programming,

37
00:02:52.861 --> 00:02:56.055
which we'll look at for
isolating impurity.

38
00:02:56.055 --> 00:03:00.903
And making sure that it's not
going to affect other parts

39
00:03:00.903 --> 00:03:05.854
of the program that could
cause those unpredictabilities

40
00:03:05.854 --> 00:03:10.313
that give us headaches as
JavaScript programmers.

41
00:03:10.313 --> 00:03:15.366
So what we're gonna be doing here,
and this time you have

42
00:03:15.366 --> 00:03:20.944
a little bit more realistic code,
we have this file render js,

43
00:03:20.944 --> 00:03:25.494
that defines, well,
let's look at what it does.

44
00:03:25.494 --> 00:03:31.321
First of all, here, it has some
functions that don't do anything,

45
00:03:31.321 --> 00:03:36.150
it imports some value, and
then it does a bunch of stuff.

46
00:03:36.150 --> 00:03:43.551
So we're making an SVG element,
configuring it,

47
00:03:43.551 --> 00:03:48.550
setting its contents, and then?

48
00:03:48.550 --> 00:03:50.542
&gt;&gt; Student: Getting it into the DOM,
attaching.

49
00:03:50.542 --> 00:03:54.891
&gt;&gt; Anjana Vakil: Then we're
attaching it to the DOM.

50
00:03:54.891 --> 00:04:00.730
So this is not functional code, [LAUGH]
none of this code is in a function,

51
00:04:00.730 --> 00:04:03.619
first of all, so that's one clue.

52
00:04:03.619 --> 00:04:10.250
But also we got a whole bunch of
impure things happening here, right?

53
00:04:10.250 --> 00:04:13.357
Like replacing all of the children
of an element in the DOM,

54
00:04:13.357 --> 00:04:16.981
that is not returning a value,
that is doing something in the world.

55
00:04:16.981 --> 00:04:22.083
So your mission,
should you choose to accept it,

56
00:04:22.083 --> 00:04:25.119
is to get these tests to pass,

57
00:04:25.119 --> 00:04:29.733
which I'll let you read
through on your own,

58
00:04:29.733 --> 00:04:36.916
by implementing the pure get SVG and
the impure render app functions.

59
00:04:36.916 --> 00:04:42.467
And the idea here is we want to
isolate an impure Render app,

60
00:04:42.467 --> 00:04:47.697
we want all of the messy side
effecting stuff to happen.

61
00:04:47.697 --> 00:04:52.597
And in pure get SVG,
we want it to be a deterministic non-side

62
00:04:52.597 --> 00:04:57.508
effecting function that will
always give me the same output.

63
00:04:57.508 --> 00:05:00.056
So that then we know, yeah,

64
00:05:00.056 --> 00:05:06.001
I might have some debugging to do
an impure Render app once I know but

65
00:05:06.001 --> 00:05:10.142
for everything they
inside that pure get SVG,

66
00:05:10.142 --> 00:05:15.688
I'm in functionally confident
deterministic rend, okay?

67
00:05:15.688 --> 00:05:20.158
So the idea we're gonna move all
this imperative code, do this,

68
00:05:20.158 --> 00:05:22.773
do that, assign this, update that.

69
00:05:22.773 --> 00:05:27.653
We're gonna turn this into a little bit
more of a functional style by moving

70
00:05:27.653 --> 00:05:30.998
this code around into those two functions,
cool?

71
00:05:30.998 --> 00:05:34.619
So every time you edit something here, and

72
00:05:34.619 --> 00:05:38.551
this is just a StackBlitz
tutorial kit thing.

73
00:05:38.551 --> 00:05:43.160
If I edit something here,
like I don't know,

74
00:05:43.160 --> 00:05:46.948
art, it will rerun the tests for you.

75
00:05:46.948 --> 00:05:51.616
So once you see that green passing,
yeah, good.

76
00:05:51.616 --> 00:05:56.198
And if you want to wipe out all of
the stuff that you've already done,

77
00:05:56.198 --> 00:06:01.897
you can click the solve button, but don't
do that yet, cuz where's the fun in that?

78
00:06:01.897 --> 00:06:07.161
[LAUGH] All right, there's also
a reset button, if you do click Solve,

79
00:06:07.161 --> 00:06:13.158
there'll be a little reset button you can
get to go back to the original starter.

