WEBVTT

1
00:00:00.000 --> 00:00:04.017
&gt;&gt; Anjana Vakil: Let's
continue with our update.

2
00:00:04.017 --> 00:00:09.458
So again,
we have in JavaScript this syntax for

3
00:00:09.458 --> 00:00:18.042
updating an array in place by assigning
to the array element at that index.

4
00:00:18.042 --> 00:00:19.718
What can we do?

5
00:00:19.718 --> 00:00:24.713
We can use some of these non mutating
array methods to help ourselves out here.

6
00:00:24.713 --> 00:00:31.038
Would anyone like to share with me how
they would approach this updating?

7
00:00:31.038 --> 00:00:32.808
This is a little trickier.

8
00:00:36.808 --> 00:00:39.471
&gt;&gt; Speaker 2: I mapped it.

9
00:00:39.471 --> 00:00:44.175
&gt;&gt; Anjana Vakil: Okay, we could map, and
I don't know if we have access to our

10
00:00:44.175 --> 00:00:47.773
helpers here, so
let's just use a radop map,

11
00:00:47.773 --> 00:00:52.226
which is again not mutating,
and then what do we pass in?

12
00:00:52.226 --> 00:00:56.742
&gt;&gt; Speaker 2: I put in the item and
then the index.

13
00:00:56.742 --> 00:01:01.665
&gt;&gt; Anjana Vakil: Okay, so if you're
used to writing map functions that look

14
00:01:01.665 --> 00:01:06.595
like this, like item to item,
which I think most of us are.

15
00:01:06.595 --> 00:01:12.011
Don't forget, you also have the option
in JavaScript map input functions,

16
00:01:12.011 --> 00:01:14.107
the transformer functions.

17
00:01:14.107 --> 00:01:20.280
If you add another variable here that
will be given the index of each element.

18
00:01:20.280 --> 00:01:25.456
So, we can then use that to check if it's

19
00:01:25.456 --> 00:01:31.258
the correct index by
checking the value of i.

20
00:01:31.258 --> 00:01:35.145
So if i is the index
that we're interested in,

21
00:01:36.418 --> 00:01:38.318
&gt;&gt; Speaker 2: Then return the value,

22
00:01:38.318 --> 00:01:41.275
otherwise, just the normal item.

23
00:01:41.275 --> 00:01:42.231
&gt;&gt; Anjana Vakil: No, sorry, value.

24
00:01:42.231 --> 00:01:44.039
You're right.

25
00:01:44.039 --> 00:01:48.446
So if I, if we are at the stage in
our mapping where we have reached

26
00:01:48.446 --> 00:01:53.020
the index that we are interested in,
forget that original item and

27
00:01:53.020 --> 00:01:57.367
just return the value and
otherwise return the original item.

28
00:01:58.591 --> 00:02:01.013
&gt;&gt; Anjana Vakil: Sounds good to me.

29
00:02:01.013 --> 00:02:06.007
&gt;&gt; Speaker 3: Say we have one more
suggestion from the chat that kind of

30
00:02:06.007 --> 00:02:11.001
mirrors the push to run
a statement where it spreads over

31
00:02:11.001 --> 00:02:17.164
the array.slice from zero to the index,
then includes the value and

32
00:02:17.164 --> 00:02:22.494
then includes the spreaded array
from the index to the end.

33
00:02:22.494 --> 00:02:26.045
&gt;&gt; Anjana Vakil: Okay, I think I'm
picking up what you're putting down.

34
00:02:26.045 --> 00:02:29.469
So it'd be something
like return new array.

35
00:02:29.469 --> 00:02:34.977
Let's say we can make
a like items before or

36
00:02:34.977 --> 00:02:41.527
like, items before is array.slice
&gt;&gt; Speaker 3: From zero to the index.

37
00:02:41.527 --> 00:02:44.203
&gt;&gt; Anjana Vakil: From
zero to the given index.

38
00:02:44.203 --> 00:02:47.706
So that's gonna stop
right before that index.

39
00:02:47.706 --> 00:02:52.021
And then the items after

40
00:02:52.021 --> 00:02:56.554
would be array.slice.

41
00:02:56.554 --> 00:02:57.533
&gt;&gt; Speaker 4: Index plus 1.

42
00:02:57.533 --> 00:03:01.653
&gt;&gt; Anjana Vakil: Index plus 1.

43
00:03:01.653 --> 00:03:06.259
Because we want the things after
the index, not the thing at the index.

44
00:03:06.259 --> 00:03:10.188
So if we split up this array,
we've isolated there's one thing

45
00:03:10.188 --> 00:03:14.567
in the array that I care about,
one index in the array that I care about.

46
00:03:14.567 --> 00:03:20.424
I want to capture everything in the array
that was before that, and everything

47
00:03:20.424 --> 00:03:26.031
in the array that was after that, and
then what I can do is spread those out.

48
00:03:26.031 --> 00:03:31.893
Now, if I did this.

49
00:03:34.376 --> 00:03:38.079
&gt;&gt; Anjana Vakil: I would
not be satisfying the spec,

50
00:03:38.079 --> 00:03:42.034
because where's the updated value?

51
00:03:42.034 --> 00:03:46.424
So I need to put that
right in between them.

52
00:03:46.424 --> 00:03:50.329
Yeah, is this the solution that we had?

53
00:03:50.329 --> 00:03:51.712
&gt;&gt; Speaker 5: Yep,
that's what they had in there.

54
00:03:51.712 --> 00:03:55.585
&gt;&gt; Anjana Vakil: Cool, and I do I need
these variables items before, items after?

55
00:03:55.585 --> 00:04:01.913
No, I could also just do this directly
in that line and so on and forth.

56
00:04:01.913 --> 00:04:06.259
But that's just a question of readability.

57
00:04:06.259 --> 00:04:10.877
So, these are legit ways to do this.

58
00:04:10.877 --> 00:04:13.636
And the point of this exercise, [LAUGH],

59
00:04:13.636 --> 00:04:19.331
is to get us thinking carefully about when
we're mutating data and when we are not.

60
00:04:19.331 --> 00:04:24.399
So, am I going to demand that you
only use this update function

61
00:04:24.399 --> 00:04:30.356
instead of assigning things to
the square bracket notation of the, no.

62
00:04:30.356 --> 00:04:34.317
But I do think it's a great
idea in JavaScript or

63
00:04:34.317 --> 00:04:40.853
any other place to make sure that you know
what of the features of the language or

64
00:04:40.853 --> 00:04:45.510
built-ins or libraries or
whatever that you're using

65
00:04:45.510 --> 00:04:50.285
are messing with your data and
which ones are copying it.

66
00:04:50.285 --> 00:04:53.712
So that you can be assured the old
one will never get messed up.

67
00:04:53.712 --> 00:04:58.472
So, I just clicked the Solve button here
to show you another possible way we could

68
00:04:58.472 --> 00:04:59.033
do this.

69
00:04:59.033 --> 00:05:04.119
It's very similar to that spread
one that we just saw, which is to

70
00:05:04.119 --> 00:05:10.034
kinda chain these calls together,
which you might see this kind of array and

71
00:05:10.034 --> 00:05:14.865
then dot this, and then dot that and
then dot the other thing.

72
00:05:14.865 --> 00:05:17.759
You might be used to seeing
that a lot in your code, right?

73
00:05:17.759 --> 00:05:22.371
This is a way that we can
essentially pipe information through

74
00:05:22.371 --> 00:05:26.717
multiple functions if we know
that these methods take in,

75
00:05:26.717 --> 00:05:30.705
let's say, in this case,
slice takes in an array and

76
00:05:30.705 --> 00:05:34.895
returns an array, and so
does concat, and so does map.

77
00:05:34.895 --> 00:05:37.791
If we through a reduced
in the middle of here,

78
00:05:37.791 --> 00:05:41.997
where now I've just got one
value instead of a whole array.

79
00:05:41.997 --> 00:05:45.121
That might get a little confusing, but

80
00:05:45.121 --> 00:05:49.107
as long as we are working
on the same types of data.

81
00:05:49.107 --> 00:05:53.996
We can kinda chain these method
calls together to essentially

82
00:05:53.996 --> 00:05:58.790
create a functional pipeline
without having to flip our code

83
00:05:58.790 --> 00:06:03.208
around in our minds, and
without having to indulge on in

84
00:06:03.208 --> 00:06:08.114
exercises where we implement
our own functional utilities.

85
00:06:08.114 --> 00:06:12.870
[LAUGH] So this is also another
way that you might have solved it,

86
00:06:12.870 --> 00:06:15.402
but basically all the same idea.

