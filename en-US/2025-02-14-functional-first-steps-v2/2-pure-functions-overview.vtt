WEBVTT

1
00:00:00.000 --> 00:00:03.432
&gt;&gt; Anjana Vakil: Functional programming
boils down to this one idea,

2
00:00:03.432 --> 00:00:08.097
pure functions, so when I say a pure
function, what am I talking about?

3
00:00:08.097 --> 00:00:12.298
A pure function, one way to think
about it is something that like all

4
00:00:12.298 --> 00:00:17.254
functions that we're used to writing,
it takes inputs and it returns output.

5
00:00:17.254 --> 00:00:21.508
The difference between a regular function
option of the kind that we're used to

6
00:00:21.508 --> 00:00:24.631
working with every day in JavaScript and
a pure function.

7
00:00:24.631 --> 00:00:29.742
Is that in a pure function,
all that this function looks at in order

8
00:00:29.742 --> 00:00:35.698
to decide what its computation is gonna
be, are the inputs that it receives.

9
00:00:35.698 --> 00:00:37.999
So it only takes its inputs in,

10
00:00:37.999 --> 00:00:43.311
it doesn't take in any other information
about the state of the world,

11
00:00:43.311 --> 00:00:48.460
the weather today, the time it is,
etc, only its input arguments.

12
00:00:48.460 --> 00:00:53.624
And then all that it does is do
whatever computation it needs to do and

13
00:00:53.624 --> 00:00:55.175
return its output.

14
00:00:55.175 --> 00:00:59.396
That is, it doesn't do anything else,
and we'll talk about what I need,

15
00:00:59.396 --> 00:01:01.414
anything else might be in a moment.

16
00:01:01.414 --> 00:01:05.843
So a pure function is
essentially a transformation

17
00:01:05.843 --> 00:01:09.453
from inputs to outputs, period, done.

18
00:01:09.453 --> 00:01:14.291
So when we think about functions in
JavaScript, we usually think about

19
00:01:14.291 --> 00:01:18.887
all kinds of other stuff that we can do,
like talk to the browser, or

20
00:01:18.887 --> 00:01:23.344
make Fetch requests or
write something to files or what have you.

21
00:01:23.344 --> 00:01:27.413
Essentially talk to the rest of
the world from within the function.

22
00:01:27.413 --> 00:01:30.610
In functional programming,
that is not allowed.

23
00:01:30.610 --> 00:01:33.512
All the function looks at is its inputs,
and

24
00:01:33.512 --> 00:01:37.055
all that it does is give it an output,
and that's it.

25
00:01:37.055 --> 00:01:41.750
It doesn't look at any of the rest of the
world, and it doesn't have any effect on

26
00:01:41.750 --> 00:01:45.219
the rest of the world,
its only effect is its return value.

27
00:01:45.219 --> 00:01:51.333
So for example, we have a very
simple function here called greet,

28
00:01:51.333 --> 00:01:56.041
where we just have one line and
it's a console log.

29
00:01:56.041 --> 00:02:01.180
So can anybody help me break down what is

30
00:02:01.180 --> 00:02:08.987
not pure about this Greek
function on the left side, yeah.

31
00:02:08.987 --> 00:02:13.324
&gt;&gt; Speaker 2: Well, it's using name
that is not coming in as an argument,

32
00:02:13.324 --> 00:02:16.399
it's just using it from the higher scope.

33
00:02:16.399 --> 00:02:20.565
&gt;&gt; Anjana Vakil: Exactly, so one thing
that it's doing is it's looking at data in

34
00:02:20.565 --> 00:02:25.109
the outside world, like in this case,
the value of the variable name,

35
00:02:25.109 --> 00:02:27.105
that is not part of its inputs.

36
00:02:27.105 --> 00:02:29.458
So that's not allowed, great.

37
00:02:29.458 --> 00:02:31.446
What about anything else?

38
00:02:31.446 --> 00:02:32.745
Yeah?

39
00:02:32.745 --> 00:02:36.324
&gt;&gt; Speaker 3: It's logging to the console,
which is not a pure output.

40
00:02:36.324 --> 00:02:39.495
&gt;&gt; Anjana Vakil: Yes, exactly,
logging to the console is not the same as,

41
00:02:39.495 --> 00:02:42.559
is returning a value,
what does this function return?

42
00:02:42.559 --> 00:02:44.193
&gt;&gt; Speaker 4: Void.

43
00:02:44.193 --> 00:02:46.288
&gt;&gt; Anjana Vakil: Yeah, undefined, right?.

44
00:02:46.288 --> 00:02:49.843
It doesn't have a explicit return,
and in JavaScript,

45
00:02:49.843 --> 00:02:51.998
that means it returns undefined.

46
00:02:51.998 --> 00:02:55.697
So if it's not returning its output value,
and it's a pure,

47
00:02:55.697 --> 00:03:00.607
if it's not returning an output value,
it definitely can't be a pure function,

48
00:03:00.607 --> 00:03:03.404
because it's doing something else, right.

49
00:03:03.404 --> 00:03:08.795
And that means that if something changes
for example, the value of that name,

50
00:03:08.795 --> 00:03:13.613
and I run the function again with
the exact same inputs, in this case,

51
00:03:13.613 --> 00:03:16.571
no inputs, I might get a different value.

52
00:03:16.571 --> 00:03:20.242
It also means that I don't know the side
effect of vlogging to the console that

53
00:03:20.242 --> 00:03:23.982
might work differently in different
situations, different environments.

54
00:03:23.982 --> 00:03:27.729
And so we might get a different
side effect different

55
00:03:27.729 --> 00:03:30.035
times that I run this function.

56
00:03:30.035 --> 00:03:35.555
Now, a pure way of structuring this would
be to make name an input to the function,

57
00:03:35.555 --> 00:03:40.916
so that way, we're only looking at that
data in order to make our computation.

58
00:03:40.916 --> 00:03:45.562
And then to return the output instead
of logging it to the console.

59
00:03:45.562 --> 00:03:50.354
So this is a very, very simple,
but I hope illustrative example of

60
00:03:50.354 --> 00:03:54.394
what we want to not do [LAUGH]
In our functional programs.

