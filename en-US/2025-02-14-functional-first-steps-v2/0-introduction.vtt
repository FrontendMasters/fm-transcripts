WEBVTT

1
00:00:00.000 --> 00:00:01.471
&gt;&gt; Anjana Vakil: My name is Anjana Vakil.

2
00:00:01.471 --> 00:00:11.202
My name is Anjana Vakil.

3
00:00:11.202 --> 00:00:15.614
The first version came out in 2020,
like eight lifetimes ago, right?

4
00:00:15.614 --> 00:00:18.212
And so very excited to be back and

5
00:00:18.212 --> 00:00:23.902
to be re-upping this course on
functional programming principles.

6
00:00:23.902 --> 00:00:28.345
Now I will say functional programming
principles haven't changed a lot since,

7
00:00:28.345 --> 00:00:30.835
well, the 1930s, let alone 2020.

8
00:00:30.835 --> 00:00:36.391
My name is

9
00:00:36.391 --> 00:00:45.422
Anjana Vakil.

10
00:00:45.422 --> 00:00:48.025
And the hope is that
after taking this course,

11
00:00:48.025 --> 00:00:52.628
you'll be really well set up to go on and
continue the entire rest of the functional

12
00:00:52.628 --> 00:00:56.965
programming learning path on the other
Frontend masters courses that go a lot

13
00:00:56.965 --> 00:01:01.333
more in depth into some of these topics
and also some of the tooling around it.

14
00:01:01.333 --> 00:01:06.737
So today, what we're gonna be focusing
on is using vanilla JavaScript,

15
00:01:06.737 --> 00:01:10.223
just the JavaScript we know and
love, mostly,

16
00:01:10.223 --> 00:01:14.667
to get into our head the conceptual
framework, if you will,

17
00:01:14.667 --> 00:01:19.396
not in the React sense, but
in the programming paradigm sense.

18
00:01:19.396 --> 00:01:24.268
That we're gonna need to start using
functional principles in our JavaScript

19
00:01:24.268 --> 00:01:25.093
code basis.

20
00:01:25.093 --> 00:01:29.030
So a little a note on the materials.

21
00:01:29.030 --> 00:01:31.199
You can find all of the materials for

22
00:01:31.199 --> 00:01:34.962
this course at
functional-first-steps.netlify.app.

23
00:01:34.962 --> 00:01:38.518
This is a course website
built in tutorial kit which

24
00:01:38.518 --> 00:01:41.327
is a a product put out by a stack blitz,
so

25
00:01:41.327 --> 00:01:46.306
we're gonna be working through
the whole course right in the browser.

26
00:01:46.306 --> 00:01:49.417
You're not gonna need to download
anything or install anything.

27
00:01:49.417 --> 00:01:53.225
But if you would like to there some
instructions at the bottom of the the main

28
00:01:53.225 --> 00:01:55.703
page here on where you can
find the repository and

29
00:01:55.703 --> 00:01:58.664
download the source code and
why not if you would like to but

30
00:01:58.664 --> 00:02:02.926
right now we're just gonna all be working
through these exercises in the browser.

31
00:02:02.926 --> 00:02:06.545
So we'll see how that goes as we move on.

32
00:02:06.545 --> 00:02:11.028
So you might be wondering why I'm I here?

33
00:02:11.028 --> 00:02:12.043
What I'm I doing in this course?

34
00:02:12.043 --> 00:02:14.705
What are the life choices that
have led me to this moment?

35
00:02:14.705 --> 00:02:19.875
And perhaps those life choices
also include things like becoming

36
00:02:19.875 --> 00:02:24.490
a developer, starting to get
your kind of feet under you.

37
00:02:24.490 --> 00:02:27.785
But realizing that as your programs
get more and more complex,

38
00:02:27.785 --> 00:02:32.324
that complexity is increasingly difficult
to handle, and wondering if there might be

39
00:02:32.324 --> 00:02:36.131
better ways of structuring your
programs and of structuring your code.

40
00:02:36.131 --> 00:02:40.647
So that you can be more productive,
you can write more maintainable code,

41
00:02:40.647 --> 00:02:44.243
code that's easier to predict,
to test, to debug, etc.

42
00:02:44.243 --> 00:02:48.191
So you might be wondering,
how can I just get better at JavaScript?

43
00:02:48.191 --> 00:02:53.804
And I think that functional programming
is one of the tools that we as JavaScript

44
00:02:53.804 --> 00:02:59.019
programmers can use to make sure that
our JavaScript is the best it can be.

45
00:02:59.019 --> 00:03:04.689
So, you might have been hearing about
terms from Functional Programming World,

46
00:03:04.689 --> 00:03:09.043
or hearing about Functional Programming
is sort of the only way

47
00:03:09.043 --> 00:03:10.782
real programmers work.

48
00:03:10.782 --> 00:03:13.145
That's not what we're
gonna be doing today,

49
00:03:13.145 --> 00:03:15.092
we're gonna be exploring it as a way.

50
00:03:15.092 --> 00:03:18.557
So, what we're gonna be looking through
is kind of these questions like what

51
00:03:18.557 --> 00:03:19.902
is functional programming.

52
00:03:19.902 --> 00:03:22.371
I love the high level big picture.

53
00:03:22.371 --> 00:03:23.966
What does it all mean, ma'am?

54
00:03:23.966 --> 00:03:28.822
So we're gonna be talking about that, and
then we're gonna also be talking about how

55
00:03:28.822 --> 00:03:31.858
code actually looks in
functional programming, and

56
00:03:31.858 --> 00:03:34.366
how it feels to be
writing functional code.

57
00:03:34.366 --> 00:03:38.225
We are gonna be doing everything in
JavaScript because you can actually do

58
00:03:38.225 --> 00:03:41.899
functional programming in JavaScript
without having to learn a whole

59
00:03:41.899 --> 00:03:44.823
new language like Haskell or
Clojure, or one of these,

60
00:03:44.823 --> 00:03:48.711
what are more typically considered
functional programming languages.

61
00:03:48.711 --> 00:03:53.071
So if you've been wondering like,
what is this functional programming thing,

62
00:03:53.071 --> 00:03:55.840
why are so many of my dev heroes so
obsessed with it?

63
00:03:55.840 --> 00:03:57.420
What does it all mean?

64
00:03:57.420 --> 00:04:00.014
Can it even happen in JavaScript?

65
00:04:00.014 --> 00:04:02.500
That's what we're gonna
be looking at today.

66
00:04:02.500 --> 00:04:07.000
And the answer to the JavaScript
question is heck, yeah, it can.

67
00:04:07.000 --> 00:04:12.015
So what we're gonna be doing is we're
gonna be exploring again the fundamentals.

68
00:04:12.015 --> 00:04:15.812
They're really the ground floor, the first
steps is what this course is taking.

69
00:04:15.812 --> 00:04:19.408
And as I mentioned, there's a whole
bunch of awesome deep dive courses on

70
00:04:19.408 --> 00:04:22.550
the platform that you can continue
your learning journey with.

71
00:04:22.550 --> 00:04:25.595
These are really just the first steps,
they are not all of the steps.

72
00:04:25.595 --> 00:04:32.779
So what we'll be doing is we will be
looking at concepts like pure functions,

73
00:04:32.779 --> 00:04:38.759
higher order functions,
first class functions, recursion.

74
00:04:38.759 --> 00:04:40.784
And function composition and

75
00:04:40.784 --> 00:04:45.077
all these other jargony words
that you might've heard about.

76
00:04:45.077 --> 00:04:46.915
So we're gonna be exploring them as we go.

77
00:04:46.915 --> 00:04:50.415
So as I mentioned,
everything here is in the browser.

78
00:04:50.415 --> 00:04:53.261
You don't need to check out any
code locally, but if you'd like to,

79
00:04:53.261 --> 00:04:54.549
there are instructions here.

80
00:04:54.549 --> 00:05:00.486
So let's take a look at the plan for
this course.

81
00:05:00.486 --> 00:05:05.585
We're gonna start out by talking about
the single most important concept,

82
00:05:05.585 --> 00:05:10.684
if you take nothing else away from this
course, all I would like you to go home

83
00:05:10.684 --> 00:05:16.123
with, if there's only one thing you get
to go home with, hopefully it's many.

84
00:05:16.123 --> 00:05:17.602
The most important idea for

85
00:05:17.602 --> 00:05:20.630
functional programming is
the idea of a pure function.

86
00:05:20.630 --> 00:05:22.404
So we're gonna spend a lot
of time talking about that.

87
00:05:22.404 --> 00:05:25.714
And then we're gonna move on to some
more kind of techniques that we use in

88
00:05:25.714 --> 00:05:29.531
functional programming that are all based
around this concept of a pure function.

89
00:05:29.531 --> 00:05:34.552
We're gonna talk about what purity is and
what it is not, and

90
00:05:34.552 --> 00:05:39.385
how we manage the real world
in a pure functional program.

91
00:05:39.385 --> 00:05:41.606
So we can actually do useful things,

92
00:05:41.606 --> 00:05:46.136
and we'll talk about why that is
a challenge for functional programming.

93
00:05:46.136 --> 00:05:50.324
Then we'll look at those techniques
like recursion, for example,

94
00:05:50.324 --> 00:05:54.670
as an alternative to iteration for
doing an operation multiple times.

95
00:05:54.670 --> 00:05:57.781
So we're gonna be writing
some recursive functions and

96
00:05:57.781 --> 00:06:00.507
having some fun bending
our minds on that front.

97
00:06:00.507 --> 00:06:03.108
We're also gonna talk about
higher order functions.

98
00:06:03.108 --> 00:06:04.245
What they are?

99
00:06:04.245 --> 00:06:07.501
There are a bunch that you
already know and love, and

100
00:06:07.501 --> 00:06:12.239
if you're a JavaScript programmer,
chances are you've already used, or

101
00:06:12.239 --> 00:06:15.287
probably even written
a higher order function.

102
00:06:15.287 --> 00:06:16.675
You just might not know it yet.

103
00:06:16.675 --> 00:06:18.774
So, we'll talk about that.

104
00:06:18.774 --> 00:06:22.308
We'll also talk about some of
the functional programmers best friends,

105
00:06:22.308 --> 00:06:24.759
which are functions like reduce,
map and filter.

106
00:06:24.759 --> 00:06:30.220
So no, we're not gonna just be relying
on JavaScript to give us these methods.

107
00:06:30.220 --> 00:06:32.144
We're gonna re implement them ourselves so

108
00:06:32.144 --> 00:06:34.485
we understand how they work
in the functional world.

109
00:06:34.485 --> 00:06:38.932
We're also gonna talk about
techniques such as writing closures.

110
00:06:38.932 --> 00:06:41.216
So what that is a certain
type of function and

111
00:06:41.216 --> 00:06:44.379
how it lets us kind of remember
data throughout our program.

112
00:06:44.379 --> 00:06:48.741
And we'll talk about composing
functions together to build

113
00:06:48.741 --> 00:06:51.735
pipelines through which our data flows,

114
00:06:51.735 --> 00:06:57.564
making our programs essentially like one
long string of data transformations.

115
00:06:57.564 --> 00:07:01.614
So we'll talk about functional composition
and how we put together pipelines.

116
00:07:01.614 --> 00:07:06.345
And we will also spend a little bit of
time talking about how important immutable

117
00:07:06.345 --> 00:07:09.042
data is for
functional programming and why.

118
00:07:09.042 --> 00:07:14.120
And we'll look at a couple of ways, or
at least one library that we can use

119
00:07:14.120 --> 00:07:19.536
to help us get that functionality into
JavaScript, which doesn't natively

120
00:07:19.536 --> 00:07:25.391
support the kind of immutable data that
functional programmers like to work with.

121
00:07:25.391 --> 00:07:26.667
Now the question is, why?

122
00:07:26.667 --> 00:07:30.290
Why would we go through all of this
pain of learning jargon terms and

123
00:07:30.290 --> 00:07:32.305
perhaps even different languages?

124
00:07:32.305 --> 00:07:34.711
And why do programmers do this?

125
00:07:34.711 --> 00:07:38.511
Why do we burden our minds with so
many different paradigms?

126
00:07:40.914 --> 00:07:44.335
&gt;&gt; Anjana Vakil: Well, the thing is, if a
function is not looking at anything about

127
00:07:44.335 --> 00:07:48.674
the world other than its inputs, and it's
not doing anything to the world other than

128
00:07:48.674 --> 00:07:52.366
returning its output, that function
becomes a lot more predictable.

129
00:07:52.366 --> 00:07:57.567
It becomes a lot easier to know exactly
what's gonna happen when I call this

130
00:07:57.567 --> 00:08:02.603
function, becomes a lot easier to
test that, and it also means that I'm

131
00:08:02.603 --> 00:08:07.662
gonna have less surprises,
when I am working in complex applications.

132
00:08:07.662 --> 00:08:11.857
And somebody, my co-worker just changed
out the value of the name variable from

133
00:08:11.857 --> 00:08:15.987
under me and I didn't know that and I was
relying on it being the original value,

134
00:08:15.987 --> 00:08:18.099
bla, bla, bla, why do I have this bug?

135
00:08:18.099 --> 00:08:22.856
This are the types of headaches we
wanna avoid by making sure all of our

136
00:08:22.856 --> 00:08:27.531
functions are pure, and this helps
us write more fault tolerant and

137
00:08:27.531 --> 00:08:32.060
more predictable, more testable,
more debuggable programs.

138
00:08:32.060 --> 00:08:34.474
Is the hope and the goal.

139
00:08:34.474 --> 00:08:37.983
And yes, like I said,
that has implications for

140
00:08:37.983 --> 00:08:40.133
our day to day as developers.

141
00:08:40.133 --> 00:08:43.387
So the hope is that if we work
in a pure functional world,

142
00:08:43.387 --> 00:08:45.275
it helps us kind of move faster.

143
00:08:45.275 --> 00:08:50.137
Because we don't have to be doing things
like figuring out what the state of

144
00:08:50.137 --> 00:08:54.228
the program must be at this
particular line in its execution and

145
00:08:54.228 --> 00:08:59.426
how that might be affected by the weather
outside or the time of day or whatever.

146
00:08:59.426 --> 00:09:02.728
We just know this function is
gonna do exactly one thing, and

147
00:09:02.728 --> 00:09:05.980
I can verify that it's doing
what I thought it was gonna do.

148
00:09:08.454 --> 00:09:11.614
&gt;&gt; Anjana Vakil: Some reasons
that some other people use for

149
00:09:11.614 --> 00:09:15.301
doing functional programming
is to feel smart and

150
00:09:15.301 --> 00:09:20.304
put down other programmers by saying
that the way that we functional

151
00:09:20.304 --> 00:09:25.940
programmers do it is the best way,
or sometimes even the only way.

152
00:09:25.940 --> 00:09:28.030
None of that.

153
00:09:28.030 --> 00:09:28.985
We don't need any of that.

154
00:09:28.985 --> 00:09:33.674
We can be perfectly productive programmers
without using functional programming.

155
00:09:33.674 --> 00:09:39.119
What we're interested in are the concrete
benefits for our life as developers,

156
00:09:39.119 --> 00:09:43.760
the headaches it can save us,
the years of life that it can give us back

157
00:09:43.760 --> 00:09:48.349
by not stressing us out over mutable
variables, things like that.

158
00:09:48.349 --> 00:09:53.183
So this why I think we should
use functional JavaScript,

159
00:09:53.183 --> 00:09:56.617
is because of those concrete benefits.

160
00:09:56.617 --> 00:10:01.887
Like I mentioned, one of the motivations
that I have for learning functional

161
00:10:01.887 --> 00:10:07.416
programming was I was starting to learn
JavaScript about 10 years ago, geez.

162
00:10:07.416 --> 00:10:10.032
And I was getting a lot of headaches,

163
00:10:10.032 --> 00:10:14.846
I was like used to a different object
oriented language at the time,

164
00:10:14.846 --> 00:10:20.686
I was a Python developer, and I was trying
to map those principles to JavaScript.

165
00:10:20.686 --> 00:10:22.281
And I was like, what is happening?

166
00:10:22.281 --> 00:10:23.751
We have prototypes.

167
00:10:23.751 --> 00:10:26.737
There's this keyword everywhere, and

168
00:10:26.737 --> 00:10:31.226
I got to memorize a bunch of rules for
it and what's going on.

169
00:10:31.226 --> 00:10:36.203
So I personally think that doing object
oriented programming in JavaScript

170
00:10:36.203 --> 00:10:38.546
gets pretty tricky, pretty fast.

171
00:10:38.546 --> 00:10:43.032
And I found that doing things
on a functional style, or

172
00:10:43.032 --> 00:10:47.811
at least a more functional style,
helped me worry less and

173
00:10:47.811 --> 00:10:51.527
program more,
[LAUGH] let's put it that way.

174
00:10:51.527 --> 00:10:55.325
So I think that functional
JavaScript makes a ton of sense.

175
00:10:55.325 --> 00:10:59.782
There's also a lot of people doing
functional programming in JavaScript,

176
00:10:59.782 --> 00:11:02.368
even if they might not
advertise it as such.

177
00:11:02.368 --> 00:11:07.502
So there is a ton of community resources,
libraries,

178
00:11:07.502 --> 00:11:11.751
tools, frameworks, for example, React.

179
00:11:11.751 --> 00:11:14.163
Any React users out there?

180
00:11:14.163 --> 00:11:15.435
A couple hands.

181
00:11:15.435 --> 00:11:20.035
Is heavily inspired
atleast in its hook-based

182
00:11:20.035 --> 00:11:25.440
instance from principles
of functional programming.

183
00:11:25.440 --> 00:11:29.935
And the entire way that React apps
work with this reactive updates and

184
00:11:29.935 --> 00:11:34.817
the declarative way that we say, I want
the element to look like this is very

185
00:11:34.817 --> 00:11:37.707
much in line with functional programming.

186
00:11:37.707 --> 00:11:41.196
So functional programming has had a pretty
big influence on the web community,

187
00:11:41.196 --> 00:11:42.977
especially in the last 10 years or so.

188
00:11:42.977 --> 00:11:48.218
So it's great to be doing a style of
programming in a setting where you have

189
00:11:48.218 --> 00:11:54.305
other people around you, other community
resources, other courses, other entire

190
00:11:54.305 --> 00:11:59.902
learning paths on Frontend Masters to
help support you through that journey.

191
00:11:59.902 --> 00:12:04.592
So that's, I think another great reason
that JavaScript makes sense as a first

192
00:12:04.592 --> 00:12:09.352
step for functional programming, even if
you go on to get super into the category

193
00:12:09.352 --> 00:12:13.767
theory and the monoids and the functors
and the haskells and the closures.

194
00:12:13.767 --> 00:12:17.288
Even if you go on to do all of that,
I think JavaScript is a great place to

195
00:12:17.288 --> 00:12:20.398
explore the fundamentals because
it has everything we need,

196
00:12:20.398 --> 00:12:24.384
it's right in the browser, and we have
this whole community to help us learn.

