WEBVTT

1
00:00:00.000 --> 00:00:04.123
&gt;&gt; Anjana Vakil: Moving on, let's talk
about the writing side of things, and

2
00:00:04.123 --> 00:00:09.041
I'm curious to see whether we still
feel the same preferences once we're

3
00:00:09.041 --> 00:00:10.167
done with this.

4
00:00:10.167 --> 00:00:15.204
Now, we already burned our cliche
functional programming function factorial,

5
00:00:15.204 --> 00:00:20.180
but we still have one more cliche function
left to use, the Fibonacci sequence.

6
00:00:20.180 --> 00:00:26.965
Have folks encountered
the Fibonacci sequence before?

7
00:00:26.965 --> 00:00:31.900
It has to do with the golden ratio and
shows up in nature and spirals and

8
00:00:31.900 --> 00:00:33.355
all kinds of stuff.

9
00:00:33.355 --> 00:00:35.885
You can deep dive on Wikipedia about it.

10
00:00:35.885 --> 00:00:41.776
But essentially, it's a sequence
of numbers that is Infinite,

11
00:00:41.776 --> 00:00:44.249
that starts with 0 and 1.

12
00:00:44.249 --> 00:00:51.778
And then each following number is
the sum of the previous two numbers,

13
00:00:51.778 --> 00:00:56.625
so 0 plus 1 equals1, 1 plus 1 equals 2,

14
00:00:56.625 --> 00:01:02.507
1 plus 2 equals 3 2 plus 3 equals 5,
etc., etc.

15
00:01:02.507 --> 00:01:07.193
Cool, so this is a sequence that, like I
said, it's often useful for things like,

16
00:01:07.193 --> 00:01:11.879
aesthetic purposes, and you can read all
about it in the Wikipedia article, but for

17
00:01:11.879 --> 00:01:13.991
right now, I'm just gonna say do it.

18
00:01:13.991 --> 00:01:18.155
So [LAUGH] We need to compute
this Fibonacci sequence.

19
00:01:18.155 --> 00:01:22.313
Basically, we're gonna compute nth
number of the Fibonacci sequence.

20
00:01:22.313 --> 00:01:27.242
So these functions, the imperative version
and the recursive version, are both

21
00:01:27.242 --> 00:01:31.743
gonna take in a number, an integer n,
that is like a positive integer, and

22
00:01:31.743 --> 00:01:35.477
it's gonna give us the nth number
in the Fibonacci sequence.

23
00:01:35.477 --> 00:01:41.899
Which means it's gonna be the sum
of the previous two numbers.

24
00:01:41.899 --> 00:01:46.422
And that, those numbers are going to each
be the sum of their previous two numbers,

25
00:01:46.422 --> 00:01:47.661
and so on and so forth.

26
00:01:47.661 --> 00:01:52.919
So your task is to write two versions of
this, one in imperative style with loops,

27
00:01:52.919 --> 00:01:57.113
and one in recursive style with
a call to recursive Fibonacci, or

28
00:01:57.113 --> 00:01:59.801
perhaps more than one call to recursive.

29
00:01:59.801 --> 00:02:03.938
To Fibonacci, I don't know, [LAUGH] And

30
00:02:03.938 --> 00:02:12.226
get the correct output from the test
cases that I've given you here, godspeed.

31
00:02:14.190 --> 00:02:19.775
&gt;&gt; Anjana Vakil: Okay, so how do we
feel about these implementations?

32
00:02:19.775 --> 00:02:25.504
And the writing side of things
versus the reading side of things,

33
00:02:25.504 --> 00:02:31.563
let's review and you're going to
help me code up the solution here.

34
00:02:31.563 --> 00:02:35.497
So, okay, in our imperative Fibonacci,

35
00:02:35.497 --> 00:02:40.198
we are in our familiar world
of writing commands and

36
00:02:40.198 --> 00:02:43.168
telling the program what to do.

37
00:02:43.168 --> 00:02:48.218
And we're gonna try to use
an iterative loop like we would for

38
00:02:48.218 --> 00:02:51.794
a lot of repetitive things in JavaScript.

39
00:02:51.794 --> 00:02:56.525
So there are a couple of situations
in which I don't even need to loop

40
00:02:56.525 --> 00:03:00.601
over anything or
like do any kind of complex computation.

41
00:03:00.601 --> 00:03:04.232
And those are the first two numbers,
right?

42
00:03:04.232 --> 00:03:05.985
They're fixed, they're just defined,

43
00:03:05.985 --> 00:03:08.815
the first two numbers of the Fibonacci
sequence are 0 and 1 period.

44
00:03:08.815 --> 00:03:12.482
So those are some cases that
might be pretty easy to handle.

45
00:03:12.482 --> 00:03:19.108
For example, if I have an N that is 0,
like if this person is asking me for

46
00:03:19.108 --> 00:03:24.323
the zeroth or
the first thing in the Fibonacci sequence,

47
00:03:24.323 --> 00:03:29.557
well, I already know what that is,
I can just return 0.

48
00:03:29.557 --> 00:03:33.866
And likewise, if I have n equals 1,

49
00:03:33.866 --> 00:03:39.009
then I already know what
the element at index

50
00:03:39.009 --> 00:03:45.551
1 of the Fibonacci sequence should be,
it is run boom.

51
00:03:45.551 --> 00:03:48.338
So that solves two of the problems, but

52
00:03:48.338 --> 00:03:53.073
we still have a whole rest of
the natural numbers to deal with here.

53
00:03:53.073 --> 00:03:59.745
So let's think about how we
are gonna do this iteratively, okay?

54
00:03:59.745 --> 00:04:04.609
Cool, we're gonna need
some way to remember

55
00:04:04.609 --> 00:04:08.705
kind of where we are in the sequence and

56
00:04:08.705 --> 00:04:12.555
what values we already know about.

57
00:04:12.555 --> 00:04:20.069
If that makes sense, so
let's define a couple of variables.

58
00:04:20.069 --> 00:04:23.614
We can do, and I'm using a let here

59
00:04:23.614 --> 00:04:28.506
because we're gonna mess
with them previous,

60
00:04:28.506 --> 00:04:34.270
the previous thing like would
be conceptually the if n.

61
00:04:34.270 --> 00:04:38.692
So now I'm if I'm reaching this line of
code 6 here, I already know n is not 0 or

62
00:04:38.692 --> 00:04:42.586
1, and we're assuming n is never
gonna be negative or non-injure or

63
00:04:42.586 --> 00:04:43.777
whatever like that.

64
00:04:43.777 --> 00:04:48.873
So, if I get to line 6,
I know I'm dealing with two or higher.

65
00:04:48.873 --> 00:04:54.168
And so that means, in order to compute
the Fibonacci number at that index,

66
00:04:54.168 --> 00:04:58.301
I need to look at the two
previous numbers in the sequence.

67
00:04:58.301 --> 00:05:02.762
I need to remember those,
so I'll have a previous 1.

68
00:05:02.762 --> 00:05:07.642
And in this case, let's imagine that
that's our like, n minus 2, and

69
00:05:07.642 --> 00:05:11.495
then I'm gonna call the other
thing we want to remember.

70
00:05:11.495 --> 00:05:14.136
I'm going to call it current,
just say, like, where are we at?

71
00:05:14.136 --> 00:05:17.624
What have we already computed so
far in the sequence?

72
00:05:17.624 --> 00:05:21.170
And in this case, if we have an n of
larger than 2, we already know 0, we

73
00:05:21.170 --> 00:05:25.377
already know run, and 1 is kind of as far
as we've gotten, so I'll call it current.

74
00:05:25.377 --> 00:05:31.008
But if you can think of better names for
these variables, please use them.

75
00:05:31.008 --> 00:05:36.503
Now what we want to do is start looping

76
00:05:36.503 --> 00:05:42.043
and,
&gt;&gt; Anjana Vakil: You might I have used

77
00:05:42.043 --> 00:05:47.158
a old school style for a loop, or
a new school for of loop here.

78
00:05:47.158 --> 00:05:49.693
I'm gonna use an old school style,

79
00:05:49.693 --> 00:05:54.945
just because it's very explicit about
how imperative the iteration is.

80
00:05:54.945 --> 00:06:00.516
So let's start with a 4.

81
00:06:00.516 --> 00:06:03.897
And I'm gonna say we're gonna
need another way of representing

82
00:06:03.897 --> 00:06:06.034
like where we are at in the computation.

83
00:06:06.034 --> 00:06:10.282
I'll call it i and
when we start out it'll be n and

84
00:06:10.282 --> 00:06:16.102
n will be like the next item in
the sequence that we need to compute.

85
00:06:16.102 --> 00:06:21.228
And we already have computed the item
that we're currently kind of up to,

86
00:06:21.228 --> 00:06:23.219
and then the previous item.

87
00:06:23.219 --> 00:06:26.065
So we're gonna start i at n, there's,

88
00:06:26.065 --> 00:06:29.686
we could do this in either direction,
basically.

89
00:06:29.686 --> 00:06:30.921
I might do it.

90
00:06:30.921 --> 00:06:33.505
&gt;&gt; BLANK_AUDIO].

91
00:06:33.505 --> 00:06:36.732
&gt;&gt; Anjana Vakil: We are making sure
that i is always like bigger than one,

92
00:06:36.732 --> 00:06:39.422
because we've already
handled the one case.

93
00:06:39.422 --> 00:06:43.756
And then at each step,
we're actually starting from n, so

94
00:06:43.756 --> 00:06:48.014
the number that we want and
we're moving down towards 1.

95
00:06:48.014 --> 00:06:52.287
So we're doing a decrement or
dec sorry not n i minus minus

96
00:06:52.287 --> 00:06:57.197
a decrement decrement I never know
how to pronounce the e in that.

97
00:06:57.197 --> 00:07:01.993
But we are going to be moving from n
the higher number all the way down

98
00:07:01.993 --> 00:07:05.689
through the sequence of
the many numbers until 1.

99
00:07:05.689 --> 00:07:10.391
And you could do this in the opposite
direction, not a huge difference.

100
00:07:10.391 --> 00:07:15.988
But so what we're gonna do is
we are going to add together

101
00:07:15.988 --> 00:07:22.790
the number of the sequence that we
are up to and the previous number.

102
00:07:22.790 --> 00:07:25.500
Because that's what
the sequence is defined by.

103
00:07:25.500 --> 00:07:30.240
So I'm gonna have previous plus
current happening in here, and

104
00:07:30.240 --> 00:07:34.033
I'm just going to capture
that in like a new value.

105
00:07:34.033 --> 00:07:38.881
I'll call it the next value layer,
we're already up to the current value,

106
00:07:38.881 --> 00:07:43.524
and now we wanna get the next one
that's gonna be previous plus current.

107
00:07:43.524 --> 00:07:49.421
And then we wanna swap out these values so

108
00:07:49.421 --> 00:07:55.500
that I keep moving through the sequence.

109
00:07:55.500 --> 00:08:00.770
And so instead of, I am using 0 and
1, always as those values,

110
00:08:00.770 --> 00:08:04.589
I'm gonna keep updating it on every for
loop.

111
00:08:04.589 --> 00:08:11.267
So what I can do now is make
sure that the the current

112
00:08:11.267 --> 00:08:16.045
current becomes the new previous.

113
00:08:16.045 --> 00:08:21.531
So previous equals current and
the new current is gonna

114
00:08:21.531 --> 00:08:27.623
be the value I just calculated,
which is what I called next.

115
00:08:27.623 --> 00:08:32.892
So we're sort of updating
these tracker variables,

116
00:08:32.892 --> 00:08:38.286
the preview and
current as we go through the sequence.

117
00:08:38.286 --> 00:08:44.170
And once we've gone through
all of the numbers between 1,

118
00:08:44.170 --> 00:08:47.818
which we already know the result of,

119
00:08:47.818 --> 00:08:52.189
and n,
kind of summing them up two at a time.

120
00:08:52.189 --> 00:08:57.169
The final thing that
we're left with should

121
00:08:57.169 --> 00:09:01.753
be the last current value, if you will.

122
00:09:01.753 --> 00:09:07.350
The last time that we do an add and
then reassign it to current.

123
00:09:07.350 --> 00:09:09.110
That's gonna be the value that we want.

124
00:09:09.110 --> 00:09:13.388
So we will just return current from here.

125
00:09:13.388 --> 00:09:19.722
Let's look at the recursive implementation
of the Fibonacci calculator.

126
00:09:19.722 --> 00:09:22.327
So here.

127
00:09:23.828 --> 00:09:27.403
&gt;&gt; Anjana Vakil: Well, we still know what
the first two numbers of the Fibonacci

128
00:09:27.403 --> 00:09:28.625
sequence are right?

129
00:09:28.625 --> 00:09:31.745
And because it is a recursive function,

130
00:09:31.745 --> 00:09:35.707
we definitely need a base case,
at least one wink.

131
00:09:35.707 --> 00:09:40.635
And so in this case, honestly,
our code is gonna look identical to

132
00:09:40.635 --> 00:09:44.595
the first couple of lines
of our imperative version,

133
00:09:44.595 --> 00:09:48.832
which essentially is going
to represent our base cases.

134
00:09:48.832 --> 00:09:52.023
So our base cases, we have two of them.

135
00:09:52.023 --> 00:09:57.670
Now, if we get 0, we know it's 0, if we
get 1, we know it's 1, and then what?

136
00:09:57.670 --> 00:10:01.256
Okay, well,
when we talk about in human terms,

137
00:10:01.256 --> 00:10:05.897
what is the Fibonacci sequence like,
how do we think about it?

138
00:10:05.897 --> 00:10:08.380
How do we define it?

139
00:10:08.380 --> 00:10:13.112
As we saw,
we said the next number in the sequence is

140
00:10:13.112 --> 00:10:17.304
the sum of the previous two numbers,
right?

141
00:10:17.304 --> 00:10:23.652
So if we want to know
the recursive Fibonacci of n,

142
00:10:23.652 --> 00:10:28.793
we can recursively compute the previous

143
00:10:28.793 --> 00:10:32.723
two numbers in the sequence and

144
00:10:32.723 --> 00:10:38.486
then add them together
to get the nth number.

145
00:10:38.486 --> 00:10:43.198
And we know that if we get this far,
if we get to line 19 here, or yeah,

146
00:10:43.198 --> 00:10:48.086
that we we don't have 0, we don't have 1,
so we're at least two here.

147
00:10:48.086 --> 00:10:55.859
And so what I can do is call our cursive
Fibonacci on the previous two numbers,

148
00:10:55.859 --> 00:11:01.360
which means I'm gonna call
it on the previous number,

149
00:11:01.360 --> 00:11:04.601
n minus 1, and also on whoops.

150
00:11:04.601 --> 00:11:08.589
And also on the one before that,

151
00:11:08.589 --> 00:11:14.808
which is gonna be n-2,
and add those together.

152
00:11:17.264 --> 00:11:20.402
&gt;&gt; Anjana Vakil: And return the value.

153
00:11:20.402 --> 00:11:26.665
And my goodness I see green in the tests,
we did it.

