WEBVTT

1
00:00:00.098 --> 00:00:04.181
&gt;&gt; Anjana Vakil: The next topic we're
gonna need in our functional programming

2
00:00:04.181 --> 00:00:07.117
toolkit in addition to
purity is recursion.

3
00:00:07.117 --> 00:00:10.490
This is a functional
programmer's best friend.

4
00:00:10.490 --> 00:00:13.854
Can anybody tell me what
a recursive function is,

5
00:00:13.854 --> 00:00:18.192
have you encountered this term before,
a recursive function?

6
00:00:18.192 --> 00:00:21.140
Yeah, okay, we've heard heard it.

7
00:00:21.140 --> 00:00:22.700
&gt;&gt; Speaker 2: A function
that calls itself.

8
00:00:22.700 --> 00:00:28.368
&gt;&gt; Anjana Vakil: It is a function that
calls itself as part of what it does.

9
00:00:28.368 --> 00:00:33.464
It could also be, for example,
a function that indirectly calls

10
00:00:33.464 --> 00:00:38.482
itself by calling another function
that calls it, let's say.

11
00:00:38.482 --> 00:00:41.713
But in today's [LAUGH] functional land,

12
00:00:41.713 --> 00:00:46.558
we're going to talk about
recursion as a recursive function

13
00:00:46.558 --> 00:00:51.511
is a function that uses itself
as part of its own computation.

14
00:00:53.413 --> 00:00:55.521
&gt;&gt; Anjana Vakil: And
in functional programming,

15
00:00:55.521 --> 00:01:00.423
we're gonna use recursion whenever we
need to do something multiple times.

16
00:01:00.423 --> 00:01:05.409
Instead of what we're typically used to
in imperative programming loops, so for

17
00:01:05.409 --> 00:01:08.311
loops, while loops,
all those kind of loops.

18
00:01:08.311 --> 00:01:12.404
Those are things that don't even exist in
some purely functional languages, and that

19
00:01:12.404 --> 00:01:16.328
even though we were using them in some of
our pure functions earlier, because it was

20
00:01:16.328 --> 00:01:20.000
all right since we were wrapping them
up in the deterministic pure function.

21
00:01:20.000 --> 00:01:25.450
We're gonna try to avoid from now on to
get ourselves into the functional mindset.

22
00:01:25.450 --> 00:01:30.412
And in functional programming,
we don't change

23
00:01:30.412 --> 00:01:35.016
the value of A in each loop of a four,
instead,

24
00:01:35.016 --> 00:01:42.477
what we'll do is recursively call
the function again with a new value of A.

25
00:01:42.477 --> 00:01:46.814
So we're gonna get a lot of
practice with this today.

26
00:01:46.814 --> 00:01:52.097
And it is one of the more mind bending
things in functional [LAUGH] programming,

27
00:01:52.097 --> 00:01:55.871
I think, recursion,
it's just, sometimes it gets.

28
00:01:55.871 --> 00:01:58.651
So let's take a moment to
really think about it.

29
00:01:58.651 --> 00:02:02.384
Okay, we said before
that imperative code and

30
00:02:02.384 --> 00:02:06.795
functional code are kinda
in contrast to one another.

31
00:02:06.795 --> 00:02:12.913
So, inside of the imperative programming
paradigm where we're saying do this,

32
00:02:12.913 --> 00:02:15.229
do that, do this other thing.

33
00:02:15.229 --> 00:02:20.339
The way that we execute code multiple
times is with Iteration, right?

34
00:02:20.339 --> 00:02:27.643
Some kind of loop where we say,
on each run through this loop,

35
00:02:27.643 --> 00:02:34.396
change the value of this let a of array,
or what have you.

36
00:02:34.396 --> 00:02:37.513
So that the first time that loop
executes a is gonna be one thing,

37
00:02:37.513 --> 00:02:41.635
and the second time it's going it's gonna
be another thing, and so on and so forth.

38
00:02:41.635 --> 00:02:46.491
That means we have a value a,
in this case, inside of the loop,

39
00:02:46.491 --> 00:02:51.730
that changes over time, and
that is what we call state in a program.

40
00:02:51.730 --> 00:02:56.431
When we have a value that could change
over time or does change over time,

41
00:02:56.431 --> 00:02:59.067
we are dealing with a stateful program.

42
00:02:59.067 --> 00:03:03.723
The values at that particular point in
time matter to the execution of this

43
00:03:03.723 --> 00:03:04.407
program.

44
00:03:04.407 --> 00:03:10.053
And that is a no-no for
a functional programmer.

45
00:03:10.053 --> 00:03:15.277
Because if you have state,
if you have values changing over time,

46
00:03:15.277 --> 00:03:19.105
that means you might not
accurately predict what

47
00:03:19.105 --> 00:03:23.796
the state is at any given point
of your function execution.

48
00:03:23.796 --> 00:03:26.995
And that might lead to surprising effects,
right?

49
00:03:26.995 --> 00:03:31.916
If anyone has ever had the situation where
you thought that this method from this

50
00:03:31.916 --> 00:03:36.909
library was gonna return one thing, but
then surprise, they changed the API and

51
00:03:36.909 --> 00:03:39.564
now it returns a totally different thing.

52
00:03:39.564 --> 00:03:44.586
And so now the value of that thing is,
it has changed from a month ago,

53
00:03:44.586 --> 00:03:50.407
when your tests all passed, to today,
when they don't, and your boss is mad.

54
00:03:50.407 --> 00:03:54.465
That is why we wan to avoid state,
it gives us headaches.

55
00:03:54.465 --> 00:03:59.690
So functional programs are stateless
as much as possible, and how do we do

56
00:03:59.690 --> 00:04:05.441
something multiple times if I can't change
the value of a variable in a for loop?

57
00:04:05.441 --> 00:04:09.414
That's what our friend recursion
is here to help us do.

58
00:04:09.414 --> 00:04:13.482
So, in recursion,
we're still taking a computation, and

59
00:04:13.482 --> 00:04:17.313
executing it multiple times
with different values, but

60
00:04:17.313 --> 00:04:21.701
instead of doing it in a stateful
way with assignment to variables

61
00:04:21.701 --> 00:04:26.435
that the value of which changes,
we're doing it in a functional way.

62
00:04:26.435 --> 00:04:31.858
And instead of imperatively saying on
each run of this function, do this and

63
00:04:31.858 --> 00:04:36.703
do that and do this other thing,
we are giving this self reference.

64
00:04:36.703 --> 00:04:41.617
The recursive function is referencing
itself to execute that same

65
00:04:41.617 --> 00:04:45.927
function code another time,
but with different inputs.

66
00:04:45.927 --> 00:04:50.488
So this is the imperative, this is
sort of like the imperative functional

67
00:04:50.488 --> 00:04:54.991
divide in one small domain area of how
do we execute code multiple times?

68
00:04:54.991 --> 00:04:58.815
How do we do stuff over and over again?

69
00:04:58.815 --> 00:05:04.197
Okay, so as we said, we wanna avoid
iteration, we wanna focus on recursion.

70
00:05:04.197 --> 00:05:09.223
All right, let's take a look at a typical,
this is a little bit old school

71
00:05:09.223 --> 00:05:14.911
JavaScript, but this really makes clear
how stateful a for loop is in JavaScript.

72
00:05:14.911 --> 00:05:17.304
So here we have a function sum,

73
00:05:17.304 --> 00:05:22.380
where we start out with a total of 0,
and then we enter a for loop.

74
00:05:22.380 --> 00:05:26.608
And this is using the traditional syntax,

75
00:05:26.608 --> 00:05:32.017
[LAUGH] where we define
the initial value of a variable.

76
00:05:32.017 --> 00:05:36.364
We define a stopping condition where
when the state of the program,

77
00:05:36.364 --> 00:05:38.499
when the state of this variable,

78
00:05:38.499 --> 00:05:43.475
the value of this variable has reached
a particular condition we wanna stop.

79
00:05:43.475 --> 00:05:48.547
So in this case, as long as i is less
than the length of the numbers array,

80
00:05:48.547 --> 00:05:52.807
keep going, and then on each run,
increment the value of i.

81
00:05:56.162 --> 00:06:00.794
&gt;&gt; Anjana Vakil: So here, for
each index in the array, we're pulling out

82
00:06:00.794 --> 00:06:05.535
the number at that index, and
we're updating the total.

83
00:06:05.535 --> 00:06:09.888
Now this plus plus here,
this is really illustrating, and

84
00:06:09.888 --> 00:06:14.589
it's a little bit clearer to see
than in the newer for of syntax,

85
00:06:14.589 --> 00:06:20.702
this is really illustrating how do this,
then that, how imperative a for loop is.

86
00:06:20.702 --> 00:06:24.942
We're telling JavaScript
exactly what to do,

87
00:06:24.942 --> 00:06:29.712
saying, first run this line
of code with i equals 0,

88
00:06:29.712 --> 00:06:34.594
then increment i,
then check if the condition is met.

89
00:06:34.594 --> 00:06:35.734
Are we still satisfied?

90
00:06:35.734 --> 00:06:42.874
Then run this block of code again
with the incremented value.

91
00:06:42.874 --> 00:06:44.610
So, this is just to illustrate,

92
00:06:44.610 --> 00:06:48.764
there's a lot of baked in imperativeness
in these things that we use every day,

93
00:06:48.764 --> 00:06:51.680
that we probably aren't
even thinking about, right?

94
00:06:51.680 --> 00:06:56.405
Just think for let a of array whatever,
but really what's happening under

95
00:06:56.405 --> 00:07:00.008
the hood is a whole bunch of
imperative values changing.

96
00:07:00.008 --> 00:07:04.278
And when we mess up in thinking about,
okay, at this run of the for loop,

97
00:07:04.278 --> 00:07:07.008
I think I have the right values,
blah, blah,

98
00:07:07.008 --> 00:07:11.148
blah, it becomes very easy to
introduce unexpected bugs in our code.

99
00:07:15.228 --> 00:07:18.619
&gt;&gt; Anjana Vakil: Let's look
at the alternative here, so

100
00:07:18.619 --> 00:07:21.522
this is a recursive sum function.

101
00:07:21.522 --> 00:07:23.793
Same API, we take in an array numbers.

102
00:07:26.652 --> 00:07:31.483
&gt;&gt; Anjana Vakil: And then,
&gt;&gt; Anjana Vakil: We make some decisions.

103
00:07:31.483 --> 00:07:36.243
[LAUGH] Every recursive function
needs two things unless

104
00:07:36.243 --> 00:07:39.086
you want to crash your computer.

105
00:07:39.086 --> 00:07:43.940
[LAUGH] One is a recursive case because
if it didn't have a time where it

106
00:07:43.940 --> 00:07:48.557
was calling itself,
we wouldn't call it a recursive function.

107
00:07:48.557 --> 00:07:53.390
But especially important,
don't forget, every recursive function

108
00:07:53.390 --> 00:07:57.751
needs what we call a base case,
meaning a non-recursive case.

109
00:07:57.751 --> 00:08:01.864
Because if we only had the recursive case,

110
00:08:01.864 --> 00:08:07.005
we would keep recursing over and
over, and over, and

111
00:08:07.005 --> 00:08:11.931
over, and over, and over,
and over again until?

112
00:08:11.931 --> 00:08:14.149
&gt;&gt; Speaker 3: You end up
in the void in inception.

113
00:08:14.149 --> 00:08:15.911
&gt;&gt; Speaker 4: Stack overflow.

114
00:08:15.911 --> 00:08:19.916
&gt;&gt; Anjana Vakil: Yes, and we get what's
called a stack overflow, In JavaScript,

115
00:08:19.916 --> 00:08:21.929
it even says too much recursion.

116
00:08:21.929 --> 00:08:26.217
Sorry, in Firefox's implementation,
the error is too much recursion,

117
00:08:26.217 --> 00:08:27.929
bad functional programmer.

118
00:08:27.929 --> 00:08:30.771
[LAUGH] So
that's why we need the base case.

119
00:08:30.771 --> 00:08:34.775
It's sort of the bottom to our dream
within a dream within a dream,

120
00:08:34.775 --> 00:08:38.706
the spinning top, if you will,
or the fallen over I don't know,

121
00:08:38.706 --> 00:08:41.661
I haven't seen that movie a long time,
anyway.

122
00:08:41.661 --> 00:08:42.888
So in this case,

123
00:08:42.888 --> 00:08:48.771
we need a base case in which we are not
gonna call ourself the sum function again.

124
00:08:48.771 --> 00:08:54.249
And in this case, it's, okay, if we just
have one number, hooray, we're done.

125
00:08:54.249 --> 00:08:58.259
If I give you an array with one number and
I ask you for the sum,

126
00:08:58.259 --> 00:09:03.465
you're just gonna give me back the value
of the one thing in the array, right?

127
00:09:03.465 --> 00:09:08.353
Everything else, longer arrays,
is going to fall into the recursive case.

128
00:09:08.353 --> 00:09:13.314
So we're gonna pull out the first
element and then we're gonna

129
00:09:13.314 --> 00:09:18.274
recursively do this operation
again on a smaller array over and

130
00:09:18.274 --> 00:09:22.124
over and
over again until we get a single number.

131
00:09:22.124 --> 00:09:24.933
And then we're gonna pop out
of the recursive call and

132
00:09:24.933 --> 00:09:29.116
add it to the previous number and pop out,
and add that to the previous number and

133
00:09:29.116 --> 00:09:32.565
pop out, and add that to the previous
number until we get our sum.

134
00:09:32.565 --> 00:09:36.804
All right, so if you're used to writing
recursive functions, great, fabulous,

135
00:09:36.804 --> 00:09:38.310
you're gonna feel awesome.

136
00:09:38.310 --> 00:09:42.754
If you're not, your brain might hurt
a little bit when you start thinking about

137
00:09:42.754 --> 00:09:47.133
how to implement stuff that you're used
to doing with imperative iteration,

138
00:09:47.133 --> 00:09:49.275
with functional recursion instead.

139
00:09:49.275 --> 00:09:52.495
And that's why we're here
to practice together, yay.

