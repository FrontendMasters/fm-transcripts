WEBVTT

1
00:00:00.577 --> 00:00:08.103
&gt;&gt; Anjana Vakil: Our next task is going
to be to write a function called pipe,

2
00:00:08.103 --> 00:00:14.736
which is a common functional
programming utility.

3
00:00:14.736 --> 00:00:18.084
That we could import from a different
library, but we're not gonna,

4
00:00:18.084 --> 00:00:19.171
we're gonna make it.

5
00:00:19.171 --> 00:00:24.761
That is going to take a bunch
of different functions,

6
00:00:24.761 --> 00:00:30.227
however many I want, and
it's going to compose them

7
00:00:30.227 --> 00:00:36.050
together
&gt;&gt; Anjana Vakil: Into a single

8
00:00:36.050 --> 00:00:41.410
function where I don't have to nest
the calls in a backwards order.

9
00:00:41.410 --> 00:00:46.266
So basically, this utility is going
to allow me to write code left to

10
00:00:46.266 --> 00:00:51.379
right that says stuff like, okay,
first join these values together,

11
00:00:51.379 --> 00:00:55.751
and then split up that return value,
and then reverse that.

12
00:00:55.751 --> 00:01:00.886
For example, these are just simple string
manipulations, or array manipulations.

13
00:01:00.886 --> 00:01:04.846
And this is gonna help us not have
to do that mental gymnastics of

14
00:01:04.846 --> 00:01:08.594
reversing the order of operations
in our heads every time.

15
00:01:08.594 --> 00:01:14.554
So this is a very handy utility in
the functional program or toolbox,

16
00:01:14.554 --> 00:01:21.439
is a pipe or pipeline function that takes
a bunch of functions in as arguments and

17
00:01:21.439 --> 00:01:26.298
returns the composition in
the order you would expect.

18
00:01:26.298 --> 00:01:32.684
So that is started out for
you here in funpro.js,

19
00:01:32.684 --> 00:01:37.255
a new addition to our toolkit here.

20
00:01:37.255 --> 00:01:41.964
We still have filter, we have map, we have
reduce, we have all of our little helpers.

21
00:01:41.964 --> 00:01:46.987
And what we're gonna do is use all
of the tools we have accumulated so

22
00:01:46.987 --> 00:01:53.159
far to implement this pipe function so
that we don't have to keep doing that,

23
00:01:53.159 --> 00:01:57.320
and exclaim, and then announce,
and then [INAUDIBLE].

24
00:01:57.320 --> 00:02:04.997
So that we can just write code more
like we would express it verbally.

25
00:02:04.997 --> 00:02:07.690
It's gonna need recursion.

26
00:02:07.690 --> 00:02:15.983
There's some notes in here about
what you're gonna wanna do.

27
00:02:19.100 --> 00:02:20.303
&gt;&gt; Anjana Vakil: Let's have at it.

28
00:02:20.303 --> 00:02:22.351
&gt;&gt; Anjana Vakil: Let's make a pipeliner.

29
00:02:22.351 --> 00:02:26.953
[LAUGH] So,
I added a few hints in the comments, and

30
00:02:26.953 --> 00:02:30.139
in this little purple box thingy.

31
00:02:30.139 --> 00:02:34.340
Again, we are recursing all the way down,

32
00:02:34.340 --> 00:02:39.011
and we are using those
little array helpers just

33
00:02:39.011 --> 00:02:43.113
to practice the functional principles.

34
00:02:43.113 --> 00:02:47.511
And there's one other thing that
might become useful for this,

35
00:02:47.511 --> 00:02:49.717
which is the spread of an array.

36
00:02:49.717 --> 00:02:53.725
So the thing is, the pipe function
is not taking in an array,

37
00:02:53.725 --> 00:02:59.397
it's taking in a bunch of comma-separated
arguments, each of which is a function.

38
00:02:59.397 --> 00:03:04.304
So we don't know how many, pipe should
work with any number of functions.

39
00:03:04.304 --> 00:03:08.958
It should be able to take in as
many arguments as we want, and so

40
00:03:08.958 --> 00:03:13.700
the spread operator is a handy way
of taking as many arguments as

41
00:03:13.700 --> 00:03:17.828
pipe received and
capturing them as this funds array.

42
00:03:17.828 --> 00:03:23.802
And then we can also use spread
to expand an array if we need to.

43
00:03:23.802 --> 00:03:27.346
And if you haven't worked with spread
operators much, totally chill,

44
00:03:27.346 --> 00:03:29.158
there's also other ways to do this.

45
00:03:29.158 --> 00:03:31.883
And if you're curious about them,
MDN them.

46
00:03:31.883 --> 00:03:35.861
All right, base cases,
good place to start.

47
00:03:35.861 --> 00:03:40.396
So, zero functions, our pipeline is done.

48
00:03:40.396 --> 00:03:42.412
Which do we return, however?

49
00:03:42.412 --> 00:03:47.136
Pipe always needs to return a function.

50
00:03:47.136 --> 00:03:52.624
So in this case, we can return what
I've called the identity function, but

51
00:03:52.624 --> 00:03:58.387
basically, a no op function, a function
that does nothing [LAUGH] to its input.

52
00:03:58.387 --> 00:04:00.655
It still has to be a function, though.

53
00:04:00.655 --> 00:04:05.824
And this is gonna be in our base
case where, if we have no functions,

54
00:04:05.824 --> 00:04:10.628
so if our little length helper of fns,
and fns here is an array of

55
00:04:10.628 --> 00:04:15.093
all of the function arguments
that were passed in to pipe.

56
00:04:15.093 --> 00:04:19.536
If the length is 0, then we will return

57
00:04:19.536 --> 00:04:24.789
a function that essentially
takes in whatever

58
00:04:24.789 --> 00:04:29.781
input we give it and
spits it right back out.

59
00:04:29.781 --> 00:04:31.873
Does nothing.

60
00:04:31.873 --> 00:04:34.512
But we need a base case,
so, good starting point.

61
00:04:34.512 --> 00:04:35.916
Sound okay?

62
00:04:35.916 --> 00:04:38.525
All right, second base case.

63
00:04:38.525 --> 00:04:41.731
If there's one function, so,

64
00:04:41.731 --> 00:04:48.037
if (length(fns) == 1),
then what do we want to return?

65
00:04:48.037 --> 00:04:49.265
Well, we wanna return a function.

66
00:04:49.265 --> 00:04:51.645
So I'm just gonna put an arrow
here to remind us to do that.

67
00:04:51.645 --> 00:04:52.556
And what?

68
00:04:56.852 --> 00:04:59.352
&gt;&gt; Anjana Vakil: Well, there's a couple
different ways we could write this that

69
00:04:59.352 --> 00:05:00.379
don't all involve that.

70
00:05:00.379 --> 00:05:02.750
What would we like to return here?

71
00:05:05.459 --> 00:05:09.465
&gt;&gt; Anjana Vakil: So, if I give it
an input, this returned function,

72
00:05:09.465 --> 00:05:11.476
the output that I want is?

73
00:05:11.476 --> 00:05:15.369
&gt;&gt; Speaker 2: The first function of input,
the head.

74
00:05:15.369 --> 00:05:16.811
&gt;&gt; Speaker 3: Calling that
function with that input.

75
00:05:16.811 --> 00:05:19.049
&gt;&gt; Anjana Vakil: Passing
that input to this function.

76
00:05:19.049 --> 00:05:22.701
So one way I could write this,
to be super explicit,

77
00:05:22.701 --> 00:05:26.270
could be that we take the head of fns,
and then, and

78
00:05:26.270 --> 00:05:31.013
this is where we're starting to
get into more functioning syntax.

79
00:05:31.013 --> 00:05:33.724
Head of fns is a fun,
[LAUGH] it's a function.

80
00:05:33.724 --> 00:05:40.462
So that means I can open some parens
to call it on the input, okay?

81
00:05:40.462 --> 00:05:45.312
But there's an even shorter
way I could have written this,

82
00:05:45.312 --> 00:05:49.192
which is that I could
just return the function,

83
00:05:49.192 --> 00:05:52.982
cuz that's already what
this function does.

84
00:05:52.982 --> 00:05:56.273
It takes an input and
it does its operation on the input, right?

85
00:05:56.273 --> 00:06:00.372
So either way, totally legit, equivalent.

86
00:06:00.372 --> 00:06:02.702
All right, base cases sorted,

87
00:06:02.702 --> 00:06:06.598
now all we need to do is draw
the rest of the recursion.

88
00:06:06.598 --> 00:06:12.177
So, as I've mentioned in
the comment right here,

89
00:06:12.177 --> 00:06:19.703
if we have multiple functions,
we're going to apply the first one,

90
00:06:19.703 --> 00:06:24.428
or call it,
&gt;&gt; Anjana Vakil: And

91
00:06:24.428 --> 00:06:30.457
then,
&gt;&gt; Anjana Vakil: Pipeline

92
00:06:30.457 --> 00:06:35.957
it through another pipeline that's
all the rest of the function.

93
00:06:35.957 --> 00:06:39.980
Let's put that into code.

94
00:06:39.980 --> 00:06:43.265
There's gonna be some parentheses,
but we will get through it.

95
00:06:43.265 --> 00:06:45.933
All right, so
I'm still gonna return a function, and

96
00:06:45.933 --> 00:06:49.597
that function is gonna take in whatever
input, just like the other cases.

97
00:06:49.597 --> 00:06:53.787
We're always returning a function that
takes input and returns output, right?

98
00:06:53.787 --> 00:06:58.551
So we're taking in this function
that returns something,

99
00:06:58.551 --> 00:07:01.611
and is going to involve a call to pipe.

100
00:07:01.611 --> 00:07:06.900
[LAUGH] All right,
now we said, we wanna create

101
00:07:06.900 --> 00:07:12.743
a recursive pipeline of
the rest of the functions.

102
00:07:12.743 --> 00:07:16.044
Can anybody help me tell
JavaScript to do that?

103
00:07:16.044 --> 00:07:17.631
&gt;&gt; Speaker 4: We need a tail.

104
00:07:17.631 --> 00:07:18.298
&gt;&gt; Anjana Vakil: Tail, right?

105
00:07:18.298 --> 00:07:23.509
So the counterpart to head,
we're gonna work with the tail of the fns.

106
00:07:23.509 --> 00:07:28.291
And then the thing is, the tail method or

107
00:07:28.291 --> 00:07:31.524
function-
&gt;&gt; Speaker 5: Turns an array.

108
00:07:31.524 --> 00:07:34.318
&gt;&gt; Anjana Vakil: It's actually
an array when it comes back.

109
00:07:34.318 --> 00:07:36.361
So this is gonna be an array of functions.

110
00:07:36.361 --> 00:07:38.044
&gt;&gt; Speaker 6: So we gotta spread it.

111
00:07:38.044 --> 00:07:40.484
&gt;&gt; Anjana Vakil: But pipe doesn't
take an array of functions, so

112
00:07:40.484 --> 00:07:44.066
one thing we can do, and this is where
that spread operator is helpful.

113
00:07:44.066 --> 00:07:48.036
We can take whatever the things are in
this array and spread them out,

114
00:07:48.036 --> 00:07:51.746
sort of unwrap them from the array and
pass them in as arguments.

115
00:07:51.746 --> 00:07:56.038
So this would be sort of
equivalent to passing in each

116
00:07:56.038 --> 00:08:00.538
of the elements in the array
with commas between them.

117
00:08:02.717 --> 00:08:07.623
&gt;&gt; Anjana Vakil: However, we are not done,
because this neglects our good friend,

118
00:08:07.623 --> 00:08:10.645
the head function, the first function.

119
00:08:11.939 --> 00:08:16.636
&gt;&gt; Anjana Vakil: And this is where
the mental gymnastics start happening.

120
00:08:16.636 --> 00:08:19.917
So, pipeline returns a function.

121
00:08:22.870 --> 00:08:27.460
&gt;&gt; Anjana Vakil: And that function,
&gt;&gt; Anjana Vakil: If we go back to our

122
00:08:31.237 --> 00:08:33.725
&gt;&gt; Anjana Vakil: Graphic here, right?

123
00:08:36.944 --> 00:08:39.733
&gt;&gt; Anjana Vakil: Which do
we want to apply first?

124
00:08:39.733 --> 00:08:43.904
The f function or the g function?

125
00:08:43.904 --> 00:08:49.163
So, in our case, the head, or
all the rest of the pipeline?

126
00:08:49.163 --> 00:08:54.194
But whatever input we're passing to
this pipeline, the first function

127
00:08:54.194 --> 00:08:59.652
we wanna pass it through is the first
function passed in as an argument to pipe.

128
00:08:59.652 --> 00:09:04.799
So that means, if we're listing these in,
we're writing this for ourselves,

129
00:09:04.799 --> 00:09:09.735
to be able to stop thinking about what
order these functions are executed in.

130
00:09:09.735 --> 00:09:15.720
We wanna be able to pass in f and then g
and still get out the correct application.

131
00:09:15.720 --> 00:09:20.907
So in this case,
&gt;&gt; Anjana Vakil: The first

132
00:09:20.907 --> 00:09:23.964
thing we wanna do is, similarly to before,

133
00:09:23.964 --> 00:09:28.442
we wanna take the head function and
call it on the input, right?

134
00:09:28.442 --> 00:09:33.382
And so
before we had this head input signature,

135
00:09:33.382 --> 00:09:36.971
like that, we're gonna do that.

136
00:09:36.971 --> 00:09:42.969
And that, if I just say,
&gt;&gt; Anjana Vakil: We

137
00:09:42.969 --> 00:09:44.336
don't have to do this with a variable.

138
00:09:44.336 --> 00:09:48.519
But if I say pipe first is the head
of the funds applied to the input,

139
00:09:48.519 --> 00:09:53.378
which doesn't make sense cuz we're not
in the body of the function here, but

140
00:09:53.378 --> 00:09:54.756
you know what I mean.

141
00:09:54.756 --> 00:09:57.105
Imagine we had curly braces, okay?

142
00:09:57.105 --> 00:10:00.090
And we want to take that.

143
00:10:00.090 --> 00:10:04.317
That is essentially,
our green triangle here.

144
00:10:04.317 --> 00:10:06.332
That's the first output.

145
00:10:06.332 --> 00:10:10.171
And we wanna take that and
pass it into the rest of the pipeline.

146
00:10:10.171 --> 00:10:13.799
Help me get my parentheses
in the right places, please.

147
00:10:13.799 --> 00:10:16.708
Where should I put this little
snippet of code right here?

148
00:10:16.708 --> 00:10:20.932
This head(fns)(input).

149
00:10:20.932 --> 00:10:27.446
Now, that's the first thing that I
want to happen in the execution,

150
00:10:27.446 --> 00:10:32.064
which means it's probably
gonna be- The last.

151
00:10:32.064 --> 00:10:38.013
Backwards in our calling of it.

152
00:10:38.013 --> 00:10:41.661
So this is gonna be that first output.

153
00:10:41.661 --> 00:10:47.357
And we wanna pass that in to
the rest of the pipeline,

154
00:10:47.357 --> 00:10:51.758
which means we need more, close paren,

155
00:10:51.758 --> 00:10:56.159
open paren, and then the output value,

156
00:10:56.159 --> 00:11:02.772
whatever the result is of calling
the first function in fns.

157
00:11:02.772 --> 00:11:07.594
On whatever input we had piped in,
that whole thing is

158
00:11:07.594 --> 00:11:12.095
essentially like the first
function output, and

159
00:11:12.095 --> 00:11:18.431
that is then gonna be the input that
we pass to our recursive pipeline.

160
00:11:18.431 --> 00:11:22.460
Let's take a look at what's
happening in our tests.

161
00:11:22.460 --> 00:11:28.567
We now have a way of left to right piping
a bunch of different functions, composing

162
00:11:28.567 --> 00:11:34.245
them together so that we don't have to
think about the order of operations.

163
00:11:34.245 --> 00:11:35.416
And so there's,

164
00:11:35.416 --> 00:11:40.268
the last test in this test suite is
double checking that we are doing that.

165
00:11:40.268 --> 00:11:43.511
So for example,
here I have this super useful function.

166
00:11:43.511 --> 00:11:47.461
We We have a bunch of little functions
that are all doing one thing.

167
00:11:47.461 --> 00:11:50.057
So we have a reverse,
that reverses an array.

168
00:11:50.057 --> 00:11:54.809
We have a join, that concatenates all of
the values in array into a single string.

169
00:11:54.809 --> 00:11:59.376
And then we have a split, that splits
a string into individual characters.

170
00:11:59.376 --> 00:12:03.186
And we are double checking
that our pipeline is applying

171
00:12:03.186 --> 00:12:06.510
the functions in the correct,
intended order,

172
00:12:06.510 --> 00:12:11.063
by making sure that we're getting
different results out, okay?

173
00:12:11.063 --> 00:12:15.964
So here what we're doing,
is if we're reversing and then joining and

174
00:12:15.964 --> 00:12:20.200
then splitting, we're taking the array,
pipes are cool,

175
00:12:20.200 --> 00:12:23.457
reversing it into the array,
cool are pipes.

176
00:12:23.457 --> 00:12:28.657
Joining that all together into,
cooler pipes of string, and then splitting

177
00:12:28.657 --> 00:12:33.383
that up into individual characters,
to get cooler pipes in an array.

178
00:12:33.383 --> 00:12:37.846
And that is not the same thing as if
we took that exact same input and

179
00:12:37.846 --> 00:12:42.069
put it through a differently
ordered pipeline, where here,

180
00:12:42.069 --> 00:12:45.578
first we're smooshing
particle into one string.

181
00:12:45.578 --> 00:12:49.168
And then we are splitting
it up into a bunch of,

182
00:12:49.168 --> 00:12:53.863
that's our cool letters, and
then we are into an array, and

183
00:12:53.863 --> 00:12:58.763
then we are reversing that array and
getting, look at us poop.

184
00:12:58.763 --> 00:13:03.934
[LAUGH] So, this is just a test to again,
prove to ourselves

185
00:13:03.934 --> 00:13:09.526
that we have now sort of hoisted
ourselves by our own functional

186
00:13:09.526 --> 00:13:14.608
bootstraps into being able to
use a more human readable.

187
00:13:14.608 --> 00:13:18.708
But still purely functional
way of chaining inputs through

188
00:13:18.708 --> 00:13:21.172
pipelines of multiple functions.

189
00:13:21.172 --> 00:13:26.328
Well, rather, of creating that pipeline,
which itself, is a single function.

190
00:13:26.328 --> 00:13:31.138
So now we've got this pipeline, it's like
this one big black box that we don't have

191
00:13:31.138 --> 00:13:35.777
to do any mental gymnastics to call the
functions, nest them in the correct way.

192
00:13:35.777 --> 00:13:40.573
And now we have a function that
takes in our original input and

193
00:13:40.573 --> 00:13:46.696
performs all of the transformations we
want, and gets our ultimate output.

