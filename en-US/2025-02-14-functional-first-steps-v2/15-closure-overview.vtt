WEBVTT

1
00:00:00.000 --> 00:00:02.931
&gt;&gt; Anjana Vakil: Time to talk
about another class of functions,

2
00:00:02.931 --> 00:00:08.368
let's say that is hugely useful, if not
indispensable, to functional programming.

3
00:00:08.368 --> 00:00:12.604
And this also has to do with how we
remember things that in our imperative

4
00:00:12.604 --> 00:00:14.876
life we were used to doing with state.

5
00:00:14.876 --> 00:00:19.599
We were used to remembering, like what
the state of the program is at any

6
00:00:19.599 --> 00:00:23.398
moment with variables that
the values change over time.

7
00:00:23.398 --> 00:00:27.013
And we just said that in
implementing our reducer functions,

8
00:00:27.013 --> 00:00:28.896
we use an accumulator instead.

9
00:00:28.896 --> 00:00:31.350
In functional programming,

10
00:00:31.350 --> 00:00:36.944
we use a value to remember kind of
where we're at in our repetition,

11
00:00:36.944 --> 00:00:42.653
another way that we can remember
things to use them later is closure.

12
00:00:42.653 --> 00:00:47.356
So that is our next topic of discussion.

13
00:00:47.356 --> 00:00:52.112
So, closure is not just
something that's hard to

14
00:00:52.112 --> 00:00:57.094
find after a breakup,
it's also [LAUGH] a very useful

15
00:00:57.094 --> 00:01:01.982
concept that has to do with
the scope in functions.

16
00:01:04.177 --> 00:01:08.610
&gt;&gt; Anjana Vakil: So in addition to
functions being able to be higher order in

17
00:01:08.610 --> 00:01:13.766
the sense that they take in another
function like filter, map, and

18
00:01:13.766 --> 00:01:18.660
reduce do, we can also define
a new function within a function.

19
00:01:18.660 --> 00:01:22.635
Let's take a look,
[LAUGH] what I'm talking about.

20
00:01:22.635 --> 00:01:26.812
So this is when we have these kind of
nested function definitions, this is,

21
00:01:26.812 --> 00:01:31.473
I'm using the function keyword, but you
also might see this with arrow functions.

22
00:01:31.473 --> 00:01:34.421
Although we're not so
much gonna be defining new functions and

23
00:01:34.421 --> 00:01:35.318
arrow functions.

24
00:01:35.318 --> 00:01:41.098
Okay, so in this case I have
a function called makeAjectifier,

25
00:01:41.098 --> 00:01:44.746
[LAUGH] which returns another function.

26
00:01:44.746 --> 00:01:49.442
And makeAdjectifier takes in an adjective,
and

27
00:01:49.442 --> 00:01:55.398
the function that it returns
uses that adjective to objectify

28
00:01:55.398 --> 00:02:01.598
whatever noun I'm gonna pass in
to the adjectifier that I made.

29
00:02:01.598 --> 00:02:06.270
[LAUGH] Okay, so let's say I'm gonna
assign, I'm gonna call makeAdjectifier

30
00:02:06.270 --> 00:02:10.604
with the word cool, and that's gonna
give me a function called coolify.

31
00:02:10.604 --> 00:02:14.484
And so, if I want to coolify a workshop,
I get cool workshop.

32
00:02:14.484 --> 00:02:17.970
If I want to coolify a drink,
I get cool drink.

33
00:02:17.970 --> 00:02:25.209
But notice that the word cool is not part
of my calls to coolify, why is that?

34
00:02:25.209 --> 00:02:32.884
Well, because it is sort
of baked in to coolify.

35
00:02:32.884 --> 00:02:38.361
Essentially, what we're doing here,
when we create this new function

36
00:02:38.361 --> 00:02:44.041
inside an adjective is just a value
here as far as JavaScript is concerned.

37
00:02:44.041 --> 00:02:46.105
And when we define this function,

38
00:02:46.105 --> 00:02:50.244
we know what that value is because
we're calling makeAdjectifier.

39
00:02:50.244 --> 00:02:53.228
So JavaScript takes that value,

40
00:02:53.228 --> 00:02:58.449
which is only available in
the scope of makeAdjectifier,

41
00:02:58.449 --> 00:03:02.295
and uses it inside the returned function.

42
00:03:03.884 --> 00:03:08.558
&gt;&gt; Anjana Vakil: So when I actually
get out this returned function,

43
00:03:08.558 --> 00:03:12.587
it still has that value
baked into its code.

44
00:03:15.256 --> 00:03:20.256
&gt;&gt; Anjana Vakil: In other words,
it remembers the value from the scope

45
00:03:20.256 --> 00:03:27.156
in which it was defined even after we
as programmers have left that scope.

46
00:03:27.156 --> 00:03:31.743
The function is sort of locked in
to that scope, the inner function,

47
00:03:31.743 --> 00:03:36.645
in the sense that it has access to that
adjective only at the time that it's

48
00:03:36.645 --> 00:03:39.720
defined, like, what is the adjective?

49
00:03:39.720 --> 00:03:42.746
Well, that happens at definition,
it's cool.

50
00:03:42.746 --> 00:03:48.137
And then forever and ever now, coolify
is gonna make everything cool, not hot,

51
00:03:48.137 --> 00:03:53.069
unfortunately, for northern climates
in northern hemisphere winter.

52
00:03:53.069 --> 00:03:57.232
[LAUGH] All right, so
this is a very simple example, but

53
00:03:57.232 --> 00:03:59.866
this is a super powerful concept.

54
00:03:59.866 --> 00:04:04.865
What this means is that,
we don't have to take every single little

55
00:04:04.865 --> 00:04:09.416
piece of data that we need to do
computation and make it part of

56
00:04:09.416 --> 00:04:14.711
the function signature, cuz that
would get very unwieldy very fast.

57
00:04:14.711 --> 00:04:18.763
We can also do techniques like closures,

58
00:04:18.763 --> 00:04:24.321
where we say this inner function
is closed over adjective

59
00:04:24.321 --> 00:04:28.852
because adjective is
sort of set in stone now.

60
00:04:28.852 --> 00:04:33.434
The opportunity to change
adjective has closed, and so,

61
00:04:33.434 --> 00:04:39.514
these closures can become very powerful
when we start needing to have more and

62
00:04:39.514 --> 00:04:41.870
more complex computations.

63
00:04:41.870 --> 00:04:46.718
We can start baking those
in to inner functions and

64
00:04:46.718 --> 00:04:53.074
creating closures that we can then
remember the value as needed.

65
00:04:53.074 --> 00:04:57.974
Let's take a moment to talk
about a little jargon.

66
00:04:57.974 --> 00:05:02.872
So we said a closure is one of these
kind of inner functions that closes over

67
00:05:02.872 --> 00:05:05.331
some value from its defining scope.

68
00:05:05.331 --> 00:05:10.392
And another way of or
another term you'll hear used

69
00:05:10.392 --> 00:05:17.698
to talk about doing something like
coolify here is partial application.

70
00:05:17.698 --> 00:05:23.941
So closures are a type of partial
application of functions.

71
00:05:23.941 --> 00:05:27.901
And I'm only using this term,
not because the jargon is important,

72
00:05:27.901 --> 00:05:32.288
but because you might encounter it in
your further learnings and readings.

73
00:05:32.288 --> 00:05:38.267
And what this means is, if we have
a function that takes two arguments,

74
00:05:38.267 --> 00:05:43.945
in general, if I wanted to take in
an adjective, and take in a noun,

75
00:05:43.945 --> 00:05:48.649
and smoosh them together,
I would need two arguments.

76
00:05:48.649 --> 00:05:53.723
We're kinda locking in one of
those arguments, in this case,

77
00:05:53.723 --> 00:05:59.387
adjective and splitting up the scope
of where adjective is passed in.

78
00:05:59.387 --> 00:06:04.360
It's passed in to make ejectifier,
which is sort of

79
00:06:04.360 --> 00:06:09.343
a partial application of
like adjective plus noun.

80
00:06:09.343 --> 00:06:12.457
So coolify is like half done with this.

81
00:06:12.457 --> 00:06:14.519
It still doesn't know what the noun is,
but

82
00:06:14.519 --> 00:06:16.432
it knows what the adjective is gonna be.

83
00:06:16.432 --> 00:06:21.436
So we could say that, if I had a function
that was just like function, adjective

84
00:06:21.436 --> 00:06:26.760
noun returns adjective plus noun, we would
say this is like a partial application.

85
00:06:26.760 --> 00:06:30.847
It's one of the arguments has been
locked in, but not all of them.

86
00:06:30.847 --> 00:06:32.873
Anyway, just a little jargon note.

87
00:06:32.873 --> 00:06:39.412
And so, the idea is that this means
we can make more reusable functions.

88
00:06:39.412 --> 00:06:43.962
So for example, every time I want a cool
workshop, or a cool drink, or cool movie,

89
00:06:43.962 --> 00:06:47.550
or whatever, I don't have to keep
passing in cool over and over.

90
00:06:47.550 --> 00:06:52.534
I can lock it in and
have a partially applied adjective plus

91
00:06:52.534 --> 00:06:57.012
noun function called coolify,
which then I can just

92
00:06:57.012 --> 00:07:01.998
finish out the application by
passing in that next thing or

93
00:07:01.998 --> 00:07:08.129
in case of multi-argument functions,
whatever other values I need.

94
00:07:08.129 --> 00:07:14.069
Okay, so, there is another concept that
we're not gonna have time to cover,

95
00:07:14.069 --> 00:07:16.685
that you might also run into here.

96
00:07:16.685 --> 00:07:21.736
But there is a jargon term called currying
and essentially what this means is,

97
00:07:21.736 --> 00:07:26.483
it's a very common practice in functional
programming to take a function

98
00:07:26.483 --> 00:07:29.870
that could ostensibly have two arguments,
right?

99
00:07:29.870 --> 00:07:36.027
Like, maybe I had a function that's just
like adjective, fine noun that says,

100
00:07:36.027 --> 00:07:42.112
give me the adjective, give me the noun,
and I will return the concatenation.

101
00:07:42.112 --> 00:07:43.637
That wouldn't be a super, or

102
00:07:43.637 --> 00:07:47.483
it would just be really annoying to
have to keep passing in cool every time.

103
00:07:47.483 --> 00:07:49.835
And so, instead what we've done is,

104
00:07:49.835 --> 00:07:54.541
we've essentially taken what would
have been a two-argument function and

105
00:07:54.541 --> 00:07:58.747
we've turned it into a nested
series of one-argument functions.

106
00:07:58.747 --> 00:08:03.934
And that is a technique called currying,
which basically means you have

107
00:08:03.934 --> 00:08:09.120
a partial application where each
function takes in the next argument and

108
00:08:09.120 --> 00:08:12.195
returns the partially applied function.

109
00:08:12.195 --> 00:08:15.825
Which then takes in the next argument and
returns the partially applied function.

110
00:08:15.825 --> 00:08:19.567
Anyway, this is just a way
of saying that sometimes,

111
00:08:19.567 --> 00:08:25.226
instead of working with a multi-argument
signature, we might wanna break that

112
00:08:25.226 --> 00:08:30.824
up into partially applied functions so
that we can lock in some of those values.

113
00:08:30.824 --> 00:08:34.751
So that we don't have to keep repeating
our self over and over again,

114
00:08:34.751 --> 00:08:39.693
because you know me, I'm gonna make a typo
in one of those cools, it's gonna be like,

115
00:08:39.693 --> 00:08:42.219
cowl, or, cool, or something like that.

116
00:08:42.219 --> 00:08:45.467
So, we don't wanna be doing that,
I just wanna type cool one time and

117
00:08:45.467 --> 00:08:47.160
never have to worry about it again.

118
00:08:47.160 --> 00:08:55.111
And currying is a technique that often
goes hand-in-hand with closures.

119
00:08:55.111 --> 00:08:57.251
It's sort of a it leverages closures.

120
00:08:57.251 --> 00:09:00.304
So anyway,
this is a term that you encounter.

121
00:09:00.304 --> 00:09:04.858
You can deep dive into it, but this is
something that is very closely related to

122
00:09:04.858 --> 00:09:06.928
this idea of partial application.

123
00:09:06.928 --> 00:09:09.775
So in currying,
what we would do like, yeah,

124
00:09:09.775 --> 00:09:13.212
here's another example of
a similar type of function.

125
00:09:13.212 --> 00:09:16.236
We have a greet function that we saw
earlier that takes in a greeting

126
00:09:16.236 --> 00:09:16.776
and a name.

127
00:09:16.776 --> 00:09:22.334
And if we wanna curry that function,
meaning turn it into, instead of a single

128
00:09:22.334 --> 00:09:27.488
binary function, meaning a function
with a two-argument signature.

129
00:09:27.488 --> 00:09:31.377
We will partially apply
[LAUGH] just the greeting and

130
00:09:31.377 --> 00:09:34.904
return a new function
that takes in a name, and

131
00:09:34.904 --> 00:09:39.259
that function is what's gonna
return the final output.

132
00:09:39.259 --> 00:09:45.062
So then, it's starts to get
a little bit more weird looking

133
00:09:45.062 --> 00:09:50.179
once you get into many,
many different arguments.

134
00:09:50.179 --> 00:09:55.530
Because you'll start to see things
like curryGreet, howdy, open parens,

135
00:09:55.530 --> 00:09:59.996
Alonzo, like these kind of
successive paren, paren, paren.

136
00:09:59.996 --> 00:10:03.799
So if you see code like that that's like,
take this thing in parens and

137
00:10:03.799 --> 00:10:07.861
then call it on this thing in parens,
and then call it on this thing parens,

138
00:10:07.861 --> 00:10:10.198
you're probably dealing with closures.

139
00:10:10.198 --> 00:10:12.108
It might be a curried function.

140
00:10:12.108 --> 00:10:17.423
So anyway, so this is the idea that
often it's useful to break up function

141
00:10:17.423 --> 00:10:22.497
signatures like this so that we can
create these reusable utilities.

142
00:10:22.497 --> 00:10:25.205
Now, this is probably not one
you're gonna need anytime soon

143
00:10:25.205 --> 00:10:26.520
in your JavaScript journey.

144
00:10:26.520 --> 00:10:31.165
But there are lots of other cases where
we wanna be able to reuse the same

145
00:10:31.165 --> 00:10:35.181
value over and over again in our
code without having to pass it

146
00:10:35.181 --> 00:10:39.473
in as an argument to every single
call to every single function.

147
00:10:39.473 --> 00:10:43.925
So scope is what it's all about,
and the notion of closure,

148
00:10:43.925 --> 00:10:49.445
meaning the notion that we can lock in
the outer scope into the inner scope.

149
00:10:49.445 --> 00:10:54.877
Is what's gonna allow us to
make more modular functional

150
00:10:54.877 --> 00:10:59.865
programs that we can reuse and
recombine as need be.

151
00:10:59.865 --> 00:11:01.971
And we will talk about
the combining part later.

