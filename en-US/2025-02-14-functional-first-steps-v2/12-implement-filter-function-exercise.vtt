WEBVTT

1
00:00:00.000 --> 00:00:04.576
&gt;&gt; Anjana Vakil: Okay, so what we
are going to do next is give ourselves

2
00:00:04.576 --> 00:00:10.681
the headache [LAUGH] of, instead of
using the built-in array methods,

3
00:00:10.681 --> 00:00:14.159
how would we do this in functional land?

4
00:00:14.159 --> 00:00:19.552
How would we make functions like
this that are higher order,

5
00:00:19.552 --> 00:00:25.063
that take in functions and
then do the thing we want them to do?

6
00:00:25.063 --> 00:00:30.098
So, in our next exercise,
we are going through each of

7
00:00:30.098 --> 00:00:35.243
these functions, filter,
math and reduce one by one,

8
00:00:35.243 --> 00:00:41.278
and we are going to reimplement them,
using functionals style.

9
00:00:41.278 --> 00:00:47.694
Okay, so your task here,
we're gonna start with filter.

10
00:00:47.694 --> 00:00:53.076
In funpro.js, [LAUGH] we have
a stub of the filter function and

11
00:00:53.076 --> 00:00:57.735
in funpro.test.js,
we have some pretty basic test

12
00:00:57.735 --> 00:01:02.822
cases that just see if this is
doing what we expect it to do.

13
00:01:02.822 --> 00:01:07.547
Namely, it's taking an array, and
it's filtering some things out, and

14
00:01:07.547 --> 00:01:10.028
it's returning us a new array, okay?

15
00:01:10.028 --> 00:01:14.719
So now, what we're gonna do is,
instead of just using [LAUGH] array.filter

16
00:01:14.719 --> 00:01:18.841
predicate function, which would
make this a pretty fast course.

17
00:01:18.841 --> 00:01:24.032
And also wouldn't help us
learn functional programming,

18
00:01:24.032 --> 00:01:29.118
we're going to write this
higher level function using our

19
00:01:29.118 --> 00:01:36.198
most versatile hammer of recursion to do
something over and over and over again.

20
00:01:36.198 --> 00:01:39.943
Because we don't have iteration,
remember, we can't do for

21
00:01:39.943 --> 00:01:42.709
let element of array,
because I said so, no.

22
00:01:42.709 --> 00:01:47.029
But because we want to avoid state,
we want to avoid surprises,

23
00:01:47.029 --> 00:01:50.549
we want to avoid,
I was just tired that day, and

24
00:01:50.549 --> 00:01:56.087
I didn't realize that I was incrementing
I instead of decrementing, whatever.

25
00:01:56.087 --> 00:01:59.074
If we have no state,
then we don't have to remember values.

26
00:01:59.074 --> 00:02:04.531
So, in addition to recursion, you have
a few other tools to help you out here.

27
00:02:04.531 --> 00:02:09.295
Which are essentially kind of functional
style wrappers around the built-in

28
00:02:09.295 --> 00:02:13.698
array methods that we would be using
in JavaScript if I weren't imposing

29
00:02:13.698 --> 00:02:15.730
artificial constraints on you.

30
00:02:15.730 --> 00:02:19.965
So [LAUGH] instead of calling
array.length for example,

31
00:02:19.965 --> 00:02:25.168
which is a little bit more of
a arguably kind of object-oriented API,

32
00:02:25.168 --> 00:02:31.010
we're gonna use a functional API of
calling the function length on the array.

33
00:02:31.010 --> 00:02:33.740
And similarly for concat.

34
00:02:33.740 --> 00:02:38.589
And then in order to get things out of
the array, these are some functions

35
00:02:38.589 --> 00:02:43.057
you might encounter if you look
into other functional languages.

36
00:02:43.057 --> 00:02:48.654
For example, Lisps, scheme, or closure,

37
00:02:48.654 --> 00:02:53.084
head of an array is the first thing.

38
00:02:53.084 --> 00:02:58.298
So it's equivalent to in
JavaScript API accessing

39
00:02:58.298 --> 00:03:04.977
the zero with element of the array,
and tail is everything else.

40
00:03:04.977 --> 00:03:09.175
So we talk about the head and tail of
arrays in functional programming often.

41
00:03:09.175 --> 00:03:13.811
And this sort of comes out of so
Lisps programming languages are, yeah,

42
00:03:13.811 --> 00:03:17.005
languages that are designed
to operate on Lisps.

43
00:03:17.005 --> 00:03:21.536
And is one of the kind of core
references of a functional

44
00:03:21.536 --> 00:03:23.812
type of language as a Lisp.

45
00:03:23.812 --> 00:03:27.477
However, what we're doing here is we're
just kind of masking how JavaScript

46
00:03:27.477 --> 00:03:29.432
actually is with these functional APIs.

47
00:03:29.432 --> 00:03:33.161
Just so you can get a little more into
the habit of the type of utilities you

48
00:03:33.161 --> 00:03:36.605
would have if you were using either
a purely functional language.

49
00:03:36.605 --> 00:03:40.187
Or some kind of toolkit library
in JavaScript, let's say,

50
00:03:40.187 --> 00:03:44.628
which we'll talk about at the end of
the course, I have some links for you.

51
00:03:44.628 --> 00:03:48.450
All right, so
you can use these in your implementation.

52
00:03:48.450 --> 00:03:53.889
And once you have got the implementation
going, these tests should pass.

53
00:03:53.889 --> 00:03:58.173
So let us take a moment and
harness our inner

54
00:03:58.173 --> 00:04:03.061
recursive programmer and
filter some our A's.

55
00:04:08.143 --> 00:04:12.430
&gt;&gt; Anjana Vakil: Let's implement
this filter function together.

56
00:04:12.430 --> 00:04:15.826
All right, I said it's gonna
be a recursive function, so

57
00:04:15.826 --> 00:04:20.560
that means it's gonna have two cases at
least, a base case and a recursive case.

58
00:04:20.560 --> 00:04:24.283
So, why don't we start, as is usually
a good plan, with the base case,

59
00:04:24.283 --> 00:04:26.801
cuz those are often easier
to think about [LAUGH].

60
00:04:26.801 --> 00:04:32.290
All right, can anybody share what their
base case was in this implementation?

61
00:04:32.290 --> 00:04:37.143
When do we know that we're already done?

62
00:04:37.143 --> 00:04:39.149
&gt;&gt; Student: If length of array zero.

63
00:04:39.149 --> 00:04:41.381
&gt;&gt; Anjana Vakil: If there's
nothing in the array, great,

64
00:04:41.381 --> 00:04:44.056
we've already filtered
everything in the array.

65
00:04:44.056 --> 00:04:51.806
So we can say,
if the length of the array an array is 0,

66
00:04:51.806 --> 00:04:56.367
then, what do we wanna return?

67
00:04:56.367 --> 00:04:58.013
&gt;&gt; Student: Empty array?

68
00:04:58.013 --> 00:05:00.466
&gt;&gt; Anjana Vakil: It has to be an array
because we said by definition,

69
00:05:00.466 --> 00:05:03.273
filter is supposed to take in an array and
return an array.

70
00:05:03.273 --> 00:05:05.539
So in this case, we're just
going to return the empty array.

71
00:05:05.539 --> 00:05:07.219
Boom, done, fabulous.

72
00:05:07.219 --> 00:05:11.177
We could also probably return array,
because it's also empty, but

73
00:05:11.177 --> 00:05:12.074
what have you.

74
00:05:12.074 --> 00:05:17.683
Okay, great, now,
we need a recursive case.

75
00:05:17.683 --> 00:05:25.322
So, if the array has one thing in it,
what do I do?

76
00:05:27.700 --> 00:05:30.386
&gt;&gt; Anjana Vakil: Just like if you
were explaining it to me as a person,

77
00:05:30.386 --> 00:05:33.806
if I'm trying to filter an array
with a given predicate function,

78
00:05:33.806 --> 00:05:36.412
and it has one thing in it,
&gt;&gt; Student: Test that one thing with

79
00:05:36.412 --> 00:05:37.792
the predicate function.

80
00:05:37.792 --> 00:05:38.783
&gt;&gt; Anjana Vakil: Exactly.

81
00:05:38.783 --> 00:05:40.635
&gt;&gt; Student: And then,
return it if it passes.

82
00:05:40.635 --> 00:05:41.540
&gt;&gt; Anjana Vakil: Beautiful, so

83
00:05:41.540 --> 00:05:45.519
we're gonna call the predicate
function on the thing in the array.

84
00:05:45.519 --> 00:05:48.846
And then we're going to see what
its value is and decide whether or

85
00:05:48.846 --> 00:05:50.367
not to put it into the output.

86
00:05:50.367 --> 00:05:54.526
Great, so what we can do is just
capture the first thing in the array,

87
00:05:54.526 --> 00:05:58.202
and we have that head function
that's gonna help us do that.

88
00:05:58.202 --> 00:06:01.414
So the head of the array is gonna
be the first thing in that array.

89
00:06:01.414 --> 00:06:07.378
And then what we wanna do is,
evaluate what this predicate

90
00:06:07.378 --> 00:06:12.990
function actually is for
this input of the first item.

91
00:06:12.990 --> 00:06:18.238
So, I could call this like filteredFirst,
oop.

92
00:06:18.238 --> 00:06:22.926
See, no caps needed,
[LAUGH] and that is gonna be,

93
00:06:22.926 --> 00:06:27.737
anybody help me out with
the implementation here?

94
00:06:27.737 --> 00:06:28.814
&gt;&gt; Student: The predicate function?

95
00:06:28.814 --> 00:06:33.058
&gt;&gt; Anjana Vakil: Yep, okay, so I'm gonna
call the predicate function on first,

96
00:06:33.058 --> 00:06:37.069
we said, but that would be,
if I left it here, if I stop here,

97
00:06:37.069 --> 00:06:39.866
filteredFirst will be a Boolean, right?

98
00:06:39.866 --> 00:06:40.626
&gt;&gt; Student: Because we said,

99
00:06:40.626 --> 00:06:43.623
by definition predictive function
are supposed to return a Boolean.

100
00:06:43.623 --> 00:06:46.311
So that's not what I want, instead,

101
00:06:46.311 --> 00:06:51.434
I want either,
&gt;&gt; Anjana Vakil: This item or

102
00:06:51.434 --> 00:06:52.602
not this item.

103
00:06:52.602 --> 00:06:57.742
Now, there's a few different ways we
could write that on JavaScript, but

104
00:06:57.742 --> 00:07:02.974
the most declarative way We could do
a simple, if else, ternary operator.

105
00:07:02.974 --> 00:07:06.573
The ternary if is a nice,
declarative way of doing these.

106
00:07:06.573 --> 00:07:11.383
So I could say,
is the predicate function of first true?

107
00:07:11.383 --> 00:07:14.891
And if so, what shall I return?

108
00:07:14.891 --> 00:07:16.268
&gt;&gt; Student: First.
First as an array.

109
00:07:16.268 --> 00:07:19.528
&gt;&gt; Anjana Vakil: First in an array,
exactly.

110
00:07:19.528 --> 00:07:21.354
So I don't wanna just
return the object first.

111
00:07:21.354 --> 00:07:23.934
I wanna wrap it in an array,
cuz that's how this works.

112
00:07:23.934 --> 00:07:30.053
And if not,
then I will return nothing in the array.

113
00:07:30.053 --> 00:07:34.620
Beautiful, okay,
now we've solved the two most

114
00:07:34.620 --> 00:07:38.652
important cases of array
has nothing in it.

115
00:07:38.652 --> 00:07:39.979
Array has one thing in it.

116
00:07:39.979 --> 00:07:43.739
But that's not enough to
make our tests happy,

117
00:07:43.739 --> 00:07:46.939
so we need to now draw
the rest of the owl.

118
00:07:46.939 --> 00:07:48.530
[LAUGH] How will we do that?

119
00:07:48.530 --> 00:07:51.785
&gt;&gt; Student: Call filter,
&gt;&gt; Anjana Vakil: Recursion, call filter,

120
00:07:51.785 --> 00:07:52.551
exactly.

121
00:07:52.551 --> 00:07:56.846
Okay, so now at some point, I'm gonna call
filter and I'm gonna pass in the same

122
00:07:56.846 --> 00:08:01.345
predicate function cuz we wanna keep using
the same function on all of our elements.

123
00:08:01.345 --> 00:08:07.926
But instead of passing in the original
array, what should I pass in?

124
00:08:07.926 --> 00:08:09.403
&gt;&gt; Student: Everything but
the first element.

125
00:08:09.403 --> 00:08:12.333
&gt;&gt; Anjana Vakil: So we already checked
the first element, what's left?

126
00:08:12.333 --> 00:08:17.082
Everything else, and in functional land,
we said we call that often tail.

127
00:08:17.082 --> 00:08:21.371
So this tail function is like
everything else in the array.

128
00:08:21.371 --> 00:08:25.446
So we saw that before where, if we have
an array of zero, one, two, three,

129
00:08:25.446 --> 00:08:28.974
four, head will be zero,
tail will be one, two, three, four.

130
00:08:28.974 --> 00:08:33.516
Okay, so
this is gonna be our recursive call.

131
00:08:33.516 --> 00:08:34.551
What are we, done?

132
00:08:34.551 --> 00:08:39.286
[LAUGH] No, obviously, because I'm not
returning anything from this function yet,

133
00:08:39.286 --> 00:08:40.876
so clearly, we [INAUDIBLE].

134
00:08:40.876 --> 00:08:45.298
But I also I don't wanna
just simply return that,

135
00:08:45.298 --> 00:08:49.100
cuz that wouldn't have my first element.

136
00:08:49.100 --> 00:08:53.326
So how do I smush them together?

137
00:08:53.326 --> 00:08:54.504
[LAUGH]?

138
00:08:54.504 --> 00:08:55.283
&gt;&gt; Student: Concat them together.

139
00:08:55.283 --> 00:08:59.648
&gt;&gt; Anjana Vakil: So
I could concat multiple arrays together.

140
00:08:59.648 --> 00:09:04.084
I have that concat helper in here,
concat helper.

141
00:09:04.084 --> 00:09:10.516
And so I want to concat this
filtered rest of the array.

142
00:09:10.516 --> 00:09:12.427
Well, I want that to be at the end.

143
00:09:12.427 --> 00:09:17.367
And what I want to be first is
what value would I wanna put here?

144
00:09:17.367 --> 00:09:20.294
I'm gonna concat these two things,
smush them into one array.

145
00:09:20.294 --> 00:09:21.111
&gt;&gt; Student: FilteredFirst.

146
00:09:21.111 --> 00:09:24.435
&gt;&gt; Anjana Vakil: FilteredFirst is
already an array with the filteredFirst

147
00:09:24.435 --> 00:09:25.393
element or not.

148
00:09:25.393 --> 00:09:27.992
And so if it's empty, cool, no big deal.

149
00:09:27.992 --> 00:09:33.375
If it's there, great,
it gets concatenated to the array.

150
00:09:33.375 --> 00:09:39.196
And hopefully,
we will see some green, yay.

151
00:09:39.196 --> 00:09:40.780
Okay, this is a successful,
excellent job, everybody.

152
00:09:40.780 --> 00:09:46.994
Implementation of the filter, what we're
used to calling a method in JavaScript,

153
00:09:46.994 --> 00:09:51.471
which now it's all functions,
functions all the way down.

154
00:09:51.471 --> 00:09:55.698
We'll talk about that later,
it is not the only solution.

155
00:09:55.698 --> 00:10:01.735
Did anybody use something else to solve
this, particularly maybe the concat part?

156
00:10:03.544 --> 00:10:06.095
Trick question cuz I asked
you to use those helpers.

157
00:10:06.095 --> 00:10:08.585
So thank you for listening to me.

158
00:10:08.585 --> 00:10:11.700
But another thing we can do is, for

159
00:10:11.700 --> 00:10:16.435
example, use the spread
operator into a new array.

160
00:10:16.435 --> 00:10:18.803
This is a JavaScript syntax thingy.

161
00:10:18.803 --> 00:10:21.361
And again, if you haven't
worked with spread operators,

162
00:10:21.361 --> 00:10:24.958
I have a course about JavaScript language
features that is not today's material.

163
00:10:24.958 --> 00:10:29.517
But I'll leave that as an exercise for
afterwards, for

164
00:10:29.517 --> 00:10:35.628
you to see if you can also without using
these built in little helpers here,

165
00:10:35.628 --> 00:10:40.293
if there's another way you
could finish that last line.

