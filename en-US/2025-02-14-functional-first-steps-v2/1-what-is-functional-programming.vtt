WEBVTT

1
00:00:00.000 --> 00:00:03.796
&gt;&gt; Anjana Vakil: So as I mentioned,
the most important concept here that

2
00:00:03.796 --> 00:00:08.481
we're gonna be talking about the whole
day or the whole lifetime that

3
00:00:08.481 --> 00:00:12.782
we do functional programming is
the notion of a pure function.

4
00:00:12.782 --> 00:00:15.468
So in some of the course materials here,

5
00:00:15.468 --> 00:00:19.339
you'll notice these little slides link,
that will bring

6
00:00:19.339 --> 00:00:24.324
you to the presentation slides that
I'm gonna be walking through as we go.

7
00:00:24.324 --> 00:00:30.847
And then we'll jump back to the exercises
after we go through each section.

8
00:00:30.847 --> 00:00:34.482
We are here because we have heard
that it is a thing, [LAUGH] but

9
00:00:34.482 --> 00:00:36.849
we wanna understand better what it is.

10
00:00:36.849 --> 00:00:38.781
And there's a lot of different ways
that I can answer this question.

11
00:00:38.781 --> 00:00:40.627
What is functional programming?

12
00:00:40.627 --> 00:00:45.001
For one thing,
it's certainly a trend, in a sense,

13
00:00:45.001 --> 00:00:48.792
it's become a lot more en vogue,
if you will,

14
00:00:48.792 --> 00:00:53.767
90s reference to [LAUGH] web development,
in particular.

15
00:00:53.767 --> 00:00:58.845
And in the last maybe decade or
two, it has become a lot more

16
00:00:58.845 --> 00:01:04.028
present in kind of the practical
day to day world of software

17
00:01:04.028 --> 00:01:08.811
development outside of the web,
as well as on the web.

18
00:01:08.811 --> 00:01:14.516
But it is not a flash in
the pan kind of trend.

19
00:01:14.516 --> 00:01:18.904
It is something that has been around since
before digital computers even existed.

20
00:01:18.904 --> 00:01:23.374
It existed as a mathematical
construct way back in the 30s when

21
00:01:23.374 --> 00:01:26.687
Alonzo Church developed
the lambda calculus,

22
00:01:26.687 --> 00:01:31.845
which I am happy to dig into after
the course, or if folks have questions.

23
00:01:31.845 --> 00:01:36.143
But this is something that
has been important to

24
00:01:36.143 --> 00:01:40.660
theoretical computer science for
100 years.

25
00:01:40.660 --> 00:01:45.263
So it's not going anywhere, don't worry,
but the buzzwords are real.

26
00:01:45.263 --> 00:01:48.210
There is a lot of jargon
in functional land.

27
00:01:48.210 --> 00:01:52.481
And you'll hear words that sound
like they should make sense,

28
00:01:52.481 --> 00:01:57.736
like higher order, but what does that
mean, or referential transparency.

29
00:01:57.736 --> 00:02:02.895
And you'll hear words that you may have
never encountered before, like monoid or

30
00:02:02.895 --> 00:02:08.144
functor, or maybe you did record some of
those in your very advanced math classes.

31
00:02:08.144 --> 00:02:12.452
But we're not gonna be focusing
too much on this jargon,

32
00:02:12.452 --> 00:02:15.880
because what is the jargon
important about?

33
00:02:15.880 --> 00:02:17.415
What is this lambda symbol anyway,

34
00:02:17.415 --> 00:02:20.550
this thing that's in every logo of
functional programming languages?

35
00:02:20.550 --> 00:02:22.371
What does this all mean?

36
00:02:22.371 --> 00:02:27.813
So today, although at some point you will
wanna go and Wikipedia these various

37
00:02:27.813 --> 00:02:32.940
terms, we're not gonna be focused on
the jargon so much as the concepts.

38
00:02:32.940 --> 00:02:36.110
Because that is what we want
to be taking away as not,

39
00:02:36.110 --> 00:02:39.583
I know a bunch of fancy words
that I can use to sound smart.

40
00:02:39.583 --> 00:02:43.703
But I know a bunch of concepts that
I can use to write code that doesn't

41
00:02:43.703 --> 00:02:44.493
break on me.

42
00:02:44.493 --> 00:02:48.087
[LAUGH] So that's the goal here.

43
00:02:48.087 --> 00:02:50.995
We can also define functional
programming as a coding style.

44
00:02:50.995 --> 00:02:53.809
Some people describe it as
a functional style of programming.

45
00:02:53.809 --> 00:02:57.637
And that style of programming is
supported in certain languages and

46
00:02:57.637 --> 00:02:59.122
not supported in others.

47
00:02:59.122 --> 00:03:04.571
Now I'm not just talking about style in
terms of syntax or naming conventions or

48
00:03:04.571 --> 00:03:09.367
what have you, but really a way of
kind of thinking about the program,

49
00:03:09.367 --> 00:03:12.646
which we will dig into
throughout this course.

50
00:03:12.646 --> 00:03:16.993
But in terms of the languages that support
it, there are a whole bunch of languages

51
00:03:16.993 --> 00:03:20.206
out there that are what
are typically considered functional

52
00:03:20.206 --> 00:03:24.253
languages like Haskell, or Clojure,
or the Elm language family, OCaml.

53
00:03:24.253 --> 00:03:28.834
There are also some that
are specifically developed for the web,

54
00:03:28.834 --> 00:03:33.420
like Elm or Elixir, which is based
on Erlang, things like that.

55
00:03:33.420 --> 00:03:37.525
But we don't need any of those other
bajillion languages cuz we have a great

56
00:03:37.525 --> 00:03:41.565
functional programming language right
in front of us in our browser, and

57
00:03:41.565 --> 00:03:42.820
that's JavaScript.

58
00:03:42.820 --> 00:03:47.782
Now, was it designed to be a purely
functional language like some of

59
00:03:47.782 --> 00:03:49.617
these other languages?

60
00:03:49.617 --> 00:03:50.478
Not really,

61
00:03:50.478 --> 00:03:55.886
has it acquired some less functional
characteristics over the years, perhaps.

62
00:03:55.886 --> 00:04:00.496
But we can still do totally valid
functional programming in JavaScript,

63
00:04:00.496 --> 00:04:02.665
because all we need is a function.

64
00:04:02.665 --> 00:04:03.901
So that's what we're
gonna be digging into.

65
00:04:03.901 --> 00:04:09.166
But as I mentioned, if you would like to
continue your journey after this course,

66
00:04:09.166 --> 00:04:12.526
there are some other cool languages and
toolkits and

67
00:04:12.526 --> 00:04:15.066
things like that that you can explore.

68
00:04:15.066 --> 00:04:20.871
Today, we are in functional
JavaScript land exclusively.

69
00:04:20.871 --> 00:04:24.184
So I mentioned before that this
is more than just a code style in

70
00:04:24.184 --> 00:04:25.916
the sense of syntax or linting.

71
00:04:25.916 --> 00:04:29.382
This is a way of thinking
about our programs.

72
00:04:29.382 --> 00:04:33.323
So another word for
that is a programming paradigm.

73
00:04:33.323 --> 00:04:37.472
A paradigm, in general,
is some kind of worldview or

74
00:04:37.472 --> 00:04:42.545
kind of meta-level understanding
of what this entire world, or

75
00:04:42.545 --> 00:04:48.745
in our programming use case, what the
entire world of the program is made up of.

76
00:04:48.745 --> 00:04:51.032
What are the things inside of a program?

77
00:04:51.032 --> 00:04:53.234
How do they interact with each other?

78
00:04:53.234 --> 00:04:57.776
And there are a whole bunch of different
ways of thinking about computer programs

79
00:04:57.776 --> 00:05:00.733
that are called different
programming paradigms.

80
00:05:00.733 --> 00:05:03.350
So you might have heard
of certain paradigms,

81
00:05:03.350 --> 00:05:05.505
like functional programming is one.

82
00:05:05.505 --> 00:05:09.575
It's often contrasted with
object-oriented programming,

83
00:05:09.575 --> 00:05:14.100
which perhaps is more familiar to
a lot of folks, especially if anyone

84
00:05:14.100 --> 00:05:18.489
is coming out of languages like Python or
Java or that sort of thing.

85
00:05:18.489 --> 00:05:23.409
And we can do both object-oriented and
functional programming in JavaScript,

86
00:05:23.409 --> 00:05:24.143
arguably.

87
00:05:24.143 --> 00:05:28.115
But let us take a moment to step back and
consider,

88
00:05:28.115 --> 00:05:32.669
what is a paradigm, and
how do these paradigms compare?

89
00:05:32.669 --> 00:05:34.418
So, a lot of the time,

90
00:05:34.418 --> 00:05:39.865
we're used to writing code in
JavaScript in an imperative paradigm.

91
00:05:39.865 --> 00:05:44.433
So imperative programming is sort of
a higher class of paradigm that includes

92
00:05:44.433 --> 00:05:46.481
object-oriented programming.

93
00:05:46.481 --> 00:05:49.565
It's sort of a special case
of imperative programming.

94
00:05:49.565 --> 00:05:53.468
In imperative programming,
the program is made up of commands.

95
00:05:53.468 --> 00:05:59.386
I tell the computer, do this, do that,
assign this variable value of this,

96
00:05:59.386 --> 00:06:05.871
assign this function the value of that,
call this function on this variable, etc.

97
00:06:05.871 --> 00:06:09.891
So I'm giving a list of
instructions to the computer, and

98
00:06:09.891 --> 00:06:13.101
the computer is executing
what I told it to do.

99
00:06:13.101 --> 00:06:19.198
So I am telling the computer how
it should execute step by step.

100
00:06:19.198 --> 00:06:22.753
That's in contrast to another
kind of higher level or

101
00:06:22.753 --> 00:06:27.888
meta programming paradigm that we
referred to as declarative programming,

102
00:06:27.888 --> 00:06:31.374
which functional programming
is a special case of.

103
00:06:31.374 --> 00:06:36.066
So in declarative programming,
unlike in imperative programming

104
00:06:36.066 --> 00:06:41.085
where the work that I do as a developer
is to give the computer commands and

105
00:06:41.085 --> 00:06:43.652
tell it how I want the program to run.

106
00:06:43.652 --> 00:06:49.871
In declarative programming, I just tell
the computer kind of the output or

107
00:06:49.871 --> 00:06:56.500
the result that I would like, and I let
it figure out how it's gonna get to that.

108
00:06:56.500 --> 00:07:03.687
So has anybody encountered a declarative
programming language before?

109
00:07:03.687 --> 00:07:11.157
Spoiler alert, you totally have,
things like HTML.

110
00:07:11.157 --> 00:07:15.542
It's declarative, it doesn't say, hey,
here's how you should cascade all of my

111
00:07:15.542 --> 00:07:19.585
style sheets or what have you, or here's
how you should load all of my links.

112
00:07:19.585 --> 00:07:24.074
It just says, this is the page
I wanna see, browser, please,

113
00:07:24.074 --> 00:07:25.525
[LAUGH] give it to me.

114
00:07:25.525 --> 00:07:28.250
Or what about SQL?

115
00:07:28.250 --> 00:07:30.670
Any backend folks around?

116
00:07:30.670 --> 00:07:32.755
SQL is another example.

117
00:07:32.755 --> 00:07:37.396
SQL is a database querying
language that is also a classic

118
00:07:37.396 --> 00:07:41.843
example of a declarative
language where we don't tell

119
00:07:41.843 --> 00:07:46.500
the computer how to execute a lookup or
a select or a join.

120
00:07:46.500 --> 00:07:49.147
We just tell it what we
would like to have, and

121
00:07:49.147 --> 00:07:52.848
we let the underlying implementation
figure out the details.

122
00:07:52.848 --> 00:07:58.277
Now this is all to say that when we're
doing functional programming, we're less

123
00:07:58.277 --> 00:08:03.797
concerned with thinking about the program
as step by step, do this, then do that.

124
00:08:03.797 --> 00:08:08.701
We are more concerned with
thinking about the program as

125
00:08:08.701 --> 00:08:12.887
a single transformation
of input into output.

126
00:08:12.887 --> 00:08:17.019
So we're gonna spend a lot more
time talking about how that works?

127
00:08:17.019 --> 00:08:21.310
What it feels like,
what tools we need to do it, etc.

128
00:08:21.310 --> 00:08:24.770
So functional programming, as I mentioned,

129
00:08:24.770 --> 00:08:28.417
is sort of a subset of
declarative programming.

130
00:08:28.417 --> 00:08:32.309
And in object-oriented programming,

131
00:08:32.309 --> 00:08:39.290
we are focused on essentially taking
our state, meaning information or

132
00:08:39.290 --> 00:08:44.556
values that changes over time
throughout the course of

133
00:08:44.556 --> 00:08:49.600
the program, and
wrapping it up in little objects.

134
00:08:49.600 --> 00:08:54.832
And then having those objects do things
like call methods on each other so

135
00:08:54.832 --> 00:08:58.106
that they can send and
receive information.

136
00:08:58.106 --> 00:08:59.727
In functional programming,

137
00:08:59.727 --> 00:09:03.302
we're gonna be wrapping everything
up in the unit of a function.

138
00:09:03.302 --> 00:09:07.693
That is really the only thing that we
need to do functional programming is one

139
00:09:07.693 --> 00:09:09.489
construct, a pure function.

140
00:09:09.489 --> 00:09:13.882
So that is what we're gonna
spend the entire course

141
00:09:13.882 --> 00:09:17.163
digging into the intricacies about.

142
00:09:17.163 --> 00:09:20.991
So, I wanna give a shout out to a,
it's a bit old now,

143
00:09:20.991 --> 00:09:25.331
but an article that kind of
inspired this whole course called

144
00:09:25.331 --> 00:09:29.861
an introduction to functional
programming by Mary Rose Cook.

145
00:09:29.861 --> 00:09:33.350
It came on publication
from the Recurse Center,

146
00:09:33.350 --> 00:09:37.435
which is an amazing programming
community in New York and

147
00:09:37.435 --> 00:09:42.301
virtual that I was a part of, in about,
or I continue to be a part of.

148
00:09:42.301 --> 00:09:46.833
But I attended this programming retreat,
they call it, in about 2015.

149
00:09:46.833 --> 00:09:48.616
And worked with Mary Rose Cook,

150
00:09:48.616 --> 00:09:52.118
who happened to be an excellent
teacher of the basic principles

151
00:09:52.118 --> 00:09:56.298
of functional programming without
getting caught up in all of the jargon.

152
00:09:56.298 --> 00:10:00.775
Now this article, which you can read
through the links, it's Python-based, but

153
00:10:00.775 --> 00:10:03.057
the principles are essentially the same.

154
00:10:03.057 --> 00:10:05.817
So I just wanna give a huge
shout out to Mary Rose Cook and

155
00:10:05.817 --> 00:10:07.497
the entire Recurse Center crew,

156
00:10:07.497 --> 00:10:11.399
who essentially taught me functional
programming in the world of JavaScript

157
00:10:11.399 --> 00:10:14.776
using the principles that we're
gonna go through in this course.

158
00:10:14.776 --> 00:10:19.017
So, there's some fun further
reading links at the end.

