WEBVTT

1
00:00:00.000 --> 00:00:00.945
&gt;&gt; Anjana Vakil: Okay, when we come to

2
00:00:00.945 --> 00:00:05.561
reduce,
&gt;&gt; Anjana Vakil: It might be kind of mean

3
00:00:05.561 --> 00:00:09.446
of me to make you implement this cuz it's
hard enough to use a reduce function.

4
00:00:09.446 --> 00:00:13.914
So what we're gonna do is just read
through this implementation of the reduce

5
00:00:13.914 --> 00:00:16.732
function, but
then we're going to implement,

6
00:00:16.732 --> 00:00:21.217
instead of reduce itself, we're gonna
implement some reducer functions.

7
00:00:21.217 --> 00:00:27.069
Cuz this is kinda the tricky part,
if you ask me, about working with reduce.

8
00:00:27.069 --> 00:00:31.518
And the pattern is really not that
different from what we've seen so far.

9
00:00:31.518 --> 00:00:32.986
We have our base case.

10
00:00:32.986 --> 00:00:37.881
If there's nothing in the array,
then we just return the value,

11
00:00:37.881 --> 00:00:40.470
the first value, the only value.

12
00:00:40.470 --> 00:00:45.638
And that value is gonna be set by
a variable called the initialValue,

13
00:00:45.638 --> 00:00:49.827
which you sometimes might see
written as accumulator or

14
00:00:49.827 --> 00:00:54.118
something like that, or
sometimes abbreviated to acc.

15
00:00:54.118 --> 00:00:57.917
So you might see that a bit, but
I'm just gonna call it initialValue.

16
00:00:57.917 --> 00:01:04.763
And this is gonna be whatever I want to
come back from this reduce operation if,

17
00:01:04.763 --> 00:01:08.704
let's say I give it
a sliced piece of bread and

18
00:01:08.704 --> 00:01:12.127
I'm asking it to reduce me a sandwich,

19
00:01:12.127 --> 00:01:17.134
then I should expect that same
sliced piece of bread out.

20
00:01:17.134 --> 00:01:19.459
But for other things like maybe sum,

21
00:01:19.459 --> 00:01:23.520
I might start out with a different
initialValue, wink, wink.

22
00:01:23.520 --> 00:01:28.870
Okay, so what we're gonna do, we're gonna
take in in reduce the reducer function and

23
00:01:28.870 --> 00:01:33.855
the array, but also that initialValue,
and that's gonna be kind of our toe hold

24
00:01:33.855 --> 00:01:36.964
that we use to do the rest
of the reduction, okay?

25
00:01:36.964 --> 00:01:41.539
All right, so then, if we have zero,
we're done with our base case.

26
00:01:41.539 --> 00:01:45.685
Otherwise we're gonna compute
a new value by applying

27
00:01:45.685 --> 00:01:49.470
the reducer function to
this accumulated value,

28
00:01:49.470 --> 00:01:54.260
accumulator value, excuse me,
which is initialValue here.

29
00:01:54.260 --> 00:01:58.494
Or again, you could imagine renaming
all of these to accumulator or acc.

30
00:01:58.494 --> 00:02:03.349
But we're going to apply the reducer
function to the initialValue and

31
00:02:03.349 --> 00:02:08.297
the first thing in the array, and
that's gonna give us back one value.

32
00:02:08.297 --> 00:02:10.240
And we're gonna save that.

33
00:02:10.240 --> 00:02:14.860
In this case, I've just saved it to a
variable to make it more clear what we're

34
00:02:14.860 --> 00:02:18.430
doing, and we're gonna pass
that in as the initialValue for

35
00:02:18.430 --> 00:02:20.260
our recursive call to reduce.

36
00:02:20.260 --> 00:02:23.893
So it's like we're
updating the accumulator.

37
00:02:23.893 --> 00:02:28.970
We are accumulating values, which is why
we call it an accumulator sometimes,

38
00:02:28.970 --> 00:02:32.176
and we're gonna call
reduce again recursively.

39
00:02:32.176 --> 00:02:36.800
But this time we're gonna pass in the
newInitialValue or the new accumulator,

40
00:02:36.800 --> 00:02:38.323
and the tail of the array.

41
00:02:38.323 --> 00:02:43.146
And recursively,
we're gonna do the whole thing over and

42
00:02:43.146 --> 00:02:48.264
over again until we hit an empty array,
and then we pop back out

43
00:02:48.264 --> 00:02:54.877
with just one value that represents
the entire smushing, if that makes sense.

44
00:02:54.877 --> 00:02:58.369
The whole sandwich in our example.

45
00:02:58.369 --> 00:03:02.633
So the trick to using
reducers then becomes

46
00:03:02.633 --> 00:03:07.022
the reducer functions
that we pass to them.

47
00:03:07.022 --> 00:03:12.396
So let's take a moment to fill
out the sum and max functions.

48
00:03:12.396 --> 00:03:15.299
Both of these are going to
use our function reduce,

49
00:03:15.299 --> 00:03:17.537
which is already implemented for you.

50
00:03:17.537 --> 00:03:20.087
And they're gonna take
in an initial value,

51
00:03:20.087 --> 00:03:22.712
which you have to figure
out what it should be.

52
00:03:22.712 --> 00:03:24.822
It's not undefined, probably.

53
00:03:24.822 --> 00:03:28.189
[LAUGH] And
it's gonna take in our array, and

54
00:03:28.189 --> 00:03:33.473
it's going to make one value out of
this array that is what we expect.

55
00:03:33.473 --> 00:03:37.481
So in sum, it should be, if we give it
an array of numbers, it should add all of

56
00:03:37.481 --> 00:03:40.969
those numbers together and
give me the sum of all of those numbers.

57
00:03:40.969 --> 00:03:43.567
And for max, if we give it an array,

58
00:03:43.567 --> 00:03:47.909
I want it to return the largest
value in that array, right?

59
00:03:47.909 --> 00:03:52.876
So if I give it an array of numbers,
I want it to return the highest number.

60
00:03:52.876 --> 00:03:56.275
So we're just gonna assume we're
only working with integers and

61
00:03:56.275 --> 00:03:57.457
numbers here, cool?

62
00:03:57.457 --> 00:03:59.902
Okay, you got this.

63
00:04:04.715 --> 00:04:05.795
&gt;&gt; Anjana Vakil: Let's start with sum.

64
00:04:08.118 --> 00:04:11.609
&gt;&gt; Anjana Vakil: Okay, so we said
a reducer function has a certain shape,

65
00:04:11.609 --> 00:04:15.843
which I've just reminded you of in
this little blue call-out here.

66
00:04:19.648 --> 00:04:26.635
&gt;&gt; Anjana Vakil: It takes the accumulator
value, or the initialValue here,

67
00:04:26.635 --> 00:04:32.295
and then the,
&gt;&gt; Anjana Vakil: Array value we

68
00:04:32.295 --> 00:04:39.012
want to be accumulating into that
accumulator, if that makes sense.

69
00:04:39.012 --> 00:04:46.668
So essentially, we're gonna have
function signatures that look like here,

70
00:04:46.668 --> 00:04:51.656
just a way that you often
see it is accumulator value

71
00:04:51.656 --> 00:04:56.769
goes to some kind of something,
some kind of value.

72
00:04:56.769 --> 00:05:00.919
Well, yeah, now let's think about if we're
given an array where we've just got,

73
00:05:00.919 --> 00:05:03.899
let's say, a whole bunch of
the rest of the sum already, and

74
00:05:03.899 --> 00:05:06.258
we have a new value that's
come up in our array.

75
00:05:06.258 --> 00:05:09.824
To keep accumulating the sum,
I'm gonna use?

76
00:05:09.824 --> 00:05:10.374
&gt;&gt; Speaker 2: Addition.

77
00:05:10.374 --> 00:05:15.420
&gt;&gt; Anjana Vakil: Addition,
so I'm going to return

78
00:05:15.420 --> 00:05:21.342
my fat arrow, accumulator plus value.

79
00:05:21.342 --> 00:05:26.347
Oop, I called it v, let's see now, yeah?

80
00:05:26.347 --> 00:05:29.919
Now we need to fix the initial value and

81
00:05:29.919 --> 00:05:34.504
start off with the sum of
an empty array would be?

82
00:05:34.504 --> 00:05:36.229
&gt;&gt; Speaker 3: Zero.

83
00:05:36.229 --> 00:05:38.579
&gt;&gt; Anjana Vakil: Snake eyes or
something, okay?

84
00:05:38.579 --> 00:05:41.001
[LAUGH] No, that's once, never mind, okay?

85
00:05:41.001 --> 00:05:47.838
[LAUGH] So sum, it seems to be passing.

86
00:05:47.838 --> 00:05:51.843
Max is failing, cool.

87
00:05:51.843 --> 00:05:53.969
All right, questions?

88
00:05:53.969 --> 00:05:59.975
So this is why we're often working with
reducers like, what is the reducer I need?

89
00:05:59.975 --> 00:06:01.680
And that's what we're practicing here.

90
00:06:01.680 --> 00:06:03.662
All right, let's do one more, max.

91
00:06:03.662 --> 00:06:07.888
So same function signature,
we're gonna have an accumulator and

92
00:06:07.888 --> 00:06:11.894
the value, or the initialValue and
a new value to accumulate.

93
00:06:11.894 --> 00:06:17.974
And this time,
instead of adding them together,

94
00:06:17.974 --> 00:06:23.039
I want to return cuz I
wanna get the highest

95
00:06:23.039 --> 00:06:28.847
[LAUGH] value from the accumulator or
the value?

96
00:06:32.450 --> 00:06:37.127
&gt;&gt; Anjana Vakil: Can anyone
help me make that happen?

97
00:06:37.127 --> 00:06:41.476
&gt;&gt; Speaker 4: We probably want a ternary
declaring accumulator and value.

98
00:06:41.476 --> 00:06:43.201
&gt;&gt; Anjana Vakil: We're
gonna need some comparing.

99
00:06:43.201 --> 00:06:45.159
Okay, let's think through.

100
00:06:45.159 --> 00:06:48.778
So we're gonna ask ourselves,

101
00:06:48.778 --> 00:06:54.006
is the value bigger than
my previously biggest

102
00:06:54.006 --> 00:06:59.781
value which is gonna be
stored in the accumulator?

103
00:06:59.781 --> 00:07:01.879
And if so?

104
00:07:01.879 --> 00:07:03.590
&gt;&gt; Speaker 5: Return the value.

105
00:07:03.590 --> 00:07:06.772
&gt;&gt; Anjana Vakil: Then the accumulator
is going to become, or

106
00:07:06.772 --> 00:07:11.593
the new accumulator value is gonna
become value cuz it's bigger.

107
00:07:11.593 --> 00:07:12.870
And if not?

108
00:07:12.870 --> 00:07:18.055
[INAUDIBLE]
&gt;&gt; Anjana Vakil: Yes, and small gotcha,

109
00:07:18.055 --> 00:07:23.247
because of JavaScript, yeah?

110
00:07:23.247 --> 00:07:26.676
&gt;&gt; Speaker 6: It's starting
with undefined, so

111
00:07:26.676 --> 00:07:30.798
you want to put a number
there to be the max.

112
00:07:30.798 --> 00:07:35.867
So if there is no accumulator,
you need to set it to the value.

113
00:07:35.867 --> 00:07:40.154
&gt;&gt; Anjana Vakil: Okay, right, so
if we have undefined in here, and

114
00:07:40.154 --> 00:07:44.043
probably, if I'm asking you for
the max, and

115
00:07:44.043 --> 00:07:49.054
I don't have a lot of comparisons to make,
that's legit.

116
00:07:49.054 --> 00:07:51.688
So we wanna make sure
to handle that case of,

117
00:07:51.688 --> 00:07:55.548
what if the value is undefined or
the accumulator is undefined?

118
00:07:55.548 --> 00:08:01.116
So in that case, it's gonna start getting
a little harder to read here, but

119
00:08:01.116 --> 00:08:07.209
you'll often see sometimes ternary split
over multiple lines like this, right?

120
00:08:07.209 --> 00:08:10.384
So we're just gonna keep doing this, and

121
00:08:10.384 --> 00:08:15.281
we're going to kind of nest another
little ternary in here, and

122
00:08:15.281 --> 00:08:19.831
we're going to test if we're
returning the accumulator.

123
00:08:19.831 --> 00:08:26.273
Let's double check that
it's not undefined, yeah?

124
00:08:26.273 --> 00:08:31.678
So if it's undefined,
&gt;&gt; Anjana Vakil: Then

125
00:08:31.678 --> 00:08:33.613
we will return-
&gt;&gt; Speaker 7: Value?

126
00:08:33.613 --> 00:08:35.088
&gt;&gt; Anjana Vakil: Value, cuz actually,

127
00:08:35.088 --> 00:08:39.220
even though JavaScript thinks that
[LAUGH] it's not the case that,

128
00:08:39.220 --> 00:08:44.255
I don't know, a five is, well, maybe if
we wrote it the other way, it would be.

129
00:08:44.255 --> 00:08:46.180
But anyway, it's undefined,
it messes with us.

130
00:08:46.180 --> 00:08:48.370
We're just gonna handle this specifically.

131
00:08:48.370 --> 00:08:52.416
And if not,
then we'll return the accumulator.

132
00:08:52.416 --> 00:08:54.990
Feel reasonable?

133
00:08:54.990 --> 00:08:59.915
&gt;&gt; Speaker 7: We could just set it up in
the base case on top too where it's if

134
00:08:59.915 --> 00:09:04.141
not acc or value is greater than acc,
&gt;&gt; Anjana Vakil: Right, so

135
00:09:04.141 --> 00:09:08.390
we could also, sorry, if-
&gt;&gt; Speaker 7: Yeah, rather than-

136
00:09:08.390 --> 00:09:09.073
&gt;&gt; Anjana Vakil: Right,

137
00:09:09.073 --> 00:09:13.076
we could test the equals
equals could go up here.

138
00:09:13.076 --> 00:09:16.041
There's a few different ways
we could nest this, all good.

139
00:09:16.041 --> 00:09:19.998
But in principle,
does this seem reasonable?

140
00:09:19.998 --> 00:09:22.565
So yeah, so
sometimes these little reducers,

141
00:09:22.565 --> 00:09:26.688
even though they're very tiny functions,
can be a little bit of like a?

142
00:09:26.688 --> 00:09:30.650
So this is the fun that we get to have.

143
00:09:30.650 --> 00:09:35.206
But the thing is that it's really nice to
be able to not care about how many things

144
00:09:35.206 --> 00:09:39.626
you have in your array when you're trying
to compute a single value out of that

145
00:09:39.626 --> 00:09:42.283
array, and
the accumulator is how we do that.

146
00:09:42.283 --> 00:09:45.175
Because it's a function,
it's pure functional programming,

147
00:09:45.175 --> 00:09:46.288
so we don't have state.

148
00:09:46.288 --> 00:09:49.950
We can't just remember max value seen so

149
00:09:49.950 --> 00:09:54.158
far between different
calls to the function.

150
00:09:54.158 --> 00:09:57.036
We don't wanna do that kind
of stateful programming.

151
00:09:57.036 --> 00:10:02.284
So instead,
we turn what we need to remember into

152
00:10:02.284 --> 00:10:10.353
data that we then manipulate as needed
to keep remembering what we need to.

153
00:10:10.353 --> 00:10:15.689
So this is kind of a principle we're
gonna come back to later in the course

154
00:10:15.689 --> 00:10:20.762
is that if we're used to using state
as a way of remembering values and

155
00:10:20.762 --> 00:10:24.806
remembering data and
where we're at in an operation.

156
00:10:24.806 --> 00:10:27.729
For example,
what the value of i is in my for

157
00:10:27.729 --> 00:10:32.860
loop is a way of remembering how far I am
through all of the loops I need to go.

158
00:10:32.860 --> 00:10:37.756
In functional programming, what we will be
ending up doing is taking whatever we need

159
00:10:37.756 --> 00:10:42.179
to remember and making it an input of
the function, making it a value itself.

160
00:10:42.179 --> 00:10:46.891
Not something that's part of the program
that could maybe be different than

161
00:10:46.891 --> 00:10:49.552
I thought it was, but just a single value.

162
00:10:49.552 --> 00:10:54.968
So if I know I'm getting that value in,
I know what result to expect

163
00:10:54.968 --> 00:11:00.213
instead of needing to look at
the program state to figure it out.

