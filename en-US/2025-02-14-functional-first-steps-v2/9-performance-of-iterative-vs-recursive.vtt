WEBVTT

1
00:00:00.001 --> 00:00:03.462
&gt;&gt; Anjana Vakil: Let's see if this works.

2
00:00:07.501 --> 00:00:08.018
&gt;&gt; Anjana Vakil: Okay,

3
00:00:08.018 --> 00:00:15.266
so,
&gt;&gt; Anjana Vakil: Let's

4
00:00:15.266 --> 00:00:22.425
try if we call imperative Fibonacci
with like a really high number.

5
00:00:22.425 --> 00:00:25.792
Anybody have a favorite
multiple digit number?

6
00:00:25.792 --> 00:00:31.399
No, okay, I'm going to give it
a bunch of randomly typed integers.

7
00:00:31.399 --> 00:00:32.762
This is probably too big of a number.

8
00:00:32.762 --> 00:00:40.067
Let's give it a three digit number,
okay, it's not doing anything to be.

9
00:00:42.454 --> 00:00:46.954
&gt;&gt; Anjana Vakil: I don't know, 5, it's not
going to be but this should make it fail.

10
00:00:46.954 --> 00:00:50.507
Okay, so now at least we know that it's
doing something, and let's find out.

11
00:00:50.507 --> 00:00:55.922
Good, it's some ridiculously
long number here, cool.

12
00:00:55.922 --> 00:01:01.156
Let's see if anything happens when
I do the recursive Fibonacci.

13
00:01:07.228 --> 00:01:10.602
&gt;&gt; Anjana Vakil: Come on, Blaze work.

14
00:01:15.392 --> 00:01:19.278
&gt;&gt; Anjana Vakil: Yeah, so it could be
that this is just not loading the test.

15
00:01:19.278 --> 00:01:21.886
But I think it actually
might be running properly,

16
00:01:21.886 --> 00:01:23.956
because this is what I wanted to happen.

17
00:01:23.956 --> 00:01:29.318
There is a performance
implication to recursion,

18
00:01:29.318 --> 00:01:37.424
and that is because in the way JavaScript
is implemented and many languages,

19
00:01:37.424 --> 00:01:44.276
every time we make a new function call,
&gt;&gt; Anjana Vakil: We're

20
00:01:44.276 --> 00:01:48.987
adding something to JavaScript's
memory of all of the functions

21
00:01:48.987 --> 00:01:53.108
that we're calling at the moment
called the call snack.

22
00:01:53.108 --> 00:01:57.815
So every time we call a function
anywhere in our program,

23
00:01:57.815 --> 00:02:02.913
a new frame gets added to the call
stack in JavaScript memory,

24
00:02:02.913 --> 00:02:06.263
and that means new memory is allocated.

25
00:02:06.263 --> 00:02:10.743
And what happens, essentially,
is that JavaScript

26
00:02:10.743 --> 00:02:15.621
recursive function builds up
a bunch of stack frames until

27
00:02:15.621 --> 00:02:20.296
it gets to the base case that
pops out of the recursion and

28
00:02:20.296 --> 00:02:24.699
starts returning from all
of those function calls.

29
00:02:24.699 --> 00:02:29.649
And so, that means that it is
possible to have too much recursion.

30
00:02:29.649 --> 00:02:32.434
We can crash the JavaScript engine.

31
00:02:32.434 --> 00:02:34.028
We can crash the browser window.

32
00:02:34.028 --> 00:02:38.024
You can do not attempt at home.

33
00:02:38.024 --> 00:02:42.855
[LAUGH] But the other thing is that
we might get, even if we don't crash,

34
00:02:42.855 --> 00:02:47.846
we might get a really slow value returned,
because we have to allocate all

35
00:02:47.846 --> 00:02:51.387
this memory and
create all these new stack frames and

36
00:02:51.387 --> 00:02:56.163
do all of the meta level stuff that
JavaScript is doing under the hood.

37
00:02:56.163 --> 00:03:01.493
So often you will hear people say
that recursion is not performant,

38
00:03:01.493 --> 00:03:04.026
and there is some truth to that.

39
00:03:04.026 --> 00:03:09.979
And there are solutions to that as well,
which we won't super get into,

40
00:03:09.979 --> 00:03:13.891
but there are some links
about in the epilogue.

41
00:03:13.891 --> 00:03:19.866
Which, in this case, a way that
we can make a lot more performant

42
00:03:19.866 --> 00:03:25.409
recursive functions is something
called tail recursion.

43
00:03:25.409 --> 00:03:31.084
Which we're not going to define, but that
if the language implements a particular

44
00:03:31.084 --> 00:03:35.870
optimization called tail call
optimization, and we've written our

45
00:03:35.870 --> 00:03:41.563
recursive function in a particular style
that makes it a tail recursive function.

46
00:03:41.563 --> 00:03:47.810
Then, under the hood, JavaScript can
basically move a lot faster through

47
00:03:47.810 --> 00:03:54.466
all of that stuff because it doesn't need
to keep allocating new stack frames.

48
00:03:54.466 --> 00:03:57.445
I'm not gonna say any more
about that today, but

49
00:03:57.445 --> 00:04:02.241
I have a musical talk that I gave that's
on You tube that you can watch if you're

50
00:04:02.241 --> 00:04:05.149
curious about what tail
call optimization is,

51
00:04:05.149 --> 00:04:10.116
and especially if you like 90s Disney
musicals, because that is how it works.

52
00:04:10.116 --> 00:04:15.041
So [COUGH] there are solutions
to these performance problems.

53
00:04:15.041 --> 00:04:19.003
A lot of the time they rely on
the implementation of the language and

54
00:04:19.003 --> 00:04:22.495
not like the features that we
would use as the programmer.

55
00:04:22.495 --> 00:04:23.672
So we don't have control.

56
00:04:23.672 --> 00:04:25.987
I mean, unless you're writing
a new browser engine or

57
00:04:25.987 --> 00:04:28.064
a new JavaScript engine
inside of your browser.

58
00:04:28.064 --> 00:04:31.430
We don't have control over the JavaScript
engine that we're using usually.

59
00:04:31.430 --> 00:04:37.880
So we're gonna kinda only gloss
over the performance application,

60
00:04:37.880 --> 00:04:44.215
but suffice it to say there are ways
to make sure that you don't get so

61
00:04:44.215 --> 00:04:51.353
many call stack size exceeded errors or
too much recursion or what have you.

