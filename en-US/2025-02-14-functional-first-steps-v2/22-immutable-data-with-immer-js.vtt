WEBVTT

1
00:00:00.192 --> 00:00:00.972
&gt;&gt; Anjana Vakil: Now let's come

2
00:00:00.972 --> 00:00:05.559
back to that,
&gt;&gt; Anjana Vakil: Question of

3
00:00:05.559 --> 00:00:06.352
immutable data.

4
00:00:09.552 --> 00:00:12.912
&gt;&gt; Anjana Vakil: As I mentioned,
arrays in JavaScript are mutable, right?

5
00:00:12.912 --> 00:00:16.860
We know that we can mess with
the contents of an array, and

6
00:00:16.860 --> 00:00:22.047
that's not great if we want the
guarantees, and the confidence that comes

7
00:00:22.047 --> 00:00:27.508
with knowing that once I have created
some data, nobody else can mess with it.

8
00:00:27.508 --> 00:00:29.586
And so there are solutions for

9
00:00:29.586 --> 00:00:35.251
doing that in JavaScript libraries that
provide these type of data structures.

10
00:00:35.251 --> 00:00:37.591
And there's a bunch of different choices.

11
00:00:37.591 --> 00:00:41.310
There are more links in
the end of the course, but

12
00:00:41.310 --> 00:00:47.232
one really popular one is called immer,
which Immer in German means always.

13
00:00:47.232 --> 00:00:49.385
And so this gets into the persistence,

14
00:00:49.385 --> 00:00:53.757
which is another word you hear used a lot
with these immutable data structures,

15
00:00:53.757 --> 00:00:56.575
persistent data structures,
they never change.

16
00:00:56.575 --> 00:01:01.691
Once you have created it,
it's like a const declaration.

17
00:01:01.691 --> 00:01:04.536
It's like assigning const to a string.

18
00:01:04.536 --> 00:01:10.335
Once that has been declared,
no one else shall change it.

19
00:01:10.335 --> 00:01:13.055
So Immer is one choice.

20
00:01:13.055 --> 00:01:14.295
There's a bunch of others.

21
00:01:14.295 --> 00:01:16.955
I'll let you read through the docs and
everything on your own.

22
00:01:16.955 --> 00:01:18.454
But how does this work?

23
00:01:18.454 --> 00:01:23.366
Okay, so a cool thing about Immer is that
you don't have to do all these mental

24
00:01:23.366 --> 00:01:28.448
gymnastics of like spreading the slice and
the mapping the thing and whatever.

25
00:01:28.448 --> 00:01:32.542
You can actually still
just use array.push.

26
00:01:32.542 --> 00:01:36.896
But Anjana, didn't you just say
that push is a mutating method and

27
00:01:36.896 --> 00:01:39.007
therefore is super dangerous?

28
00:01:39.007 --> 00:01:44.985
Yes, if I was calling it in
a regular JavaScript land, but

29
00:01:44.985 --> 00:01:50.841
here I'm calling it inside
of a callback function,

30
00:01:50.841 --> 00:01:53.287
first class function.

31
00:01:53.287 --> 00:01:57.207
There is a produce function
exported by Immer.

32
00:02:00.307 --> 00:02:01.590
&gt;&gt; Anjana Vakil: That
works kind of similar to

33
00:02:01.590 --> 00:02:03.198
a lot of our functional utilities.

34
00:02:03.198 --> 00:02:08.893
What it does is it takes in an array and
a function that describes but does not yet

35
00:02:08.893 --> 00:02:14.610
do whatever the transformations are that
you would like to make to this array.

36
00:02:14.610 --> 00:02:17.971
By convention,
the input is sometimes called draft, or

37
00:02:17.971 --> 00:02:19.728
usually it's called draft.

38
00:02:19.728 --> 00:02:22.431
It's like a draft of what
you're gonna return, and

39
00:02:22.431 --> 00:02:24.715
it starts out being
identical to the input.

40
00:02:24.715 --> 00:02:29.899
And then you can mess with it inside
this function body, but under the hood,

41
00:02:29.899 --> 00:02:35.083
MR is managing the immutability for
you using some fancy data structures and

42
00:02:35.083 --> 00:02:40.037
what not, and you can read how it all
works on their documentation site.

43
00:02:40.037 --> 00:02:41.677
There's a whole blog about it,
it's pretty cool.

44
00:02:41.677 --> 00:02:46.506
That allows us to write code as
if we're mutating stuff, but

45
00:02:46.506 --> 00:02:52.092
because it is isolated, that mutation,
what we think is a mutation,

46
00:02:52.092 --> 00:02:57.701
under the hood is maybe not a mutation,
is isolated in this function.

47
00:02:57.701 --> 00:03:04.640
That then gets applied to the older array
to produce a new array, for example.

48
00:03:04.640 --> 00:03:10.580
So, real quick, let's rewrite
these in an Immerized way [LAUGH].

49
00:03:10.580 --> 00:03:15.698
So, instead of, in push, instead of,

50
00:03:15.698 --> 00:03:19.920
returning the stuff we just had.

51
00:03:19.920 --> 00:03:22.940
Well, we have this example
already right here, basically.

52
00:03:22.940 --> 00:03:26.379
[LAUGH] So we can,

53
00:03:29.679 --> 00:03:33.579
&gt;&gt; Anjana Vakil: Turn, yeah.

54
00:03:33.579 --> 00:03:35.985
Well, we don't wanna push always four,

55
00:03:35.985 --> 00:03:39.576
we wanna push the element to
the draft inside of the callback.

56
00:03:39.576 --> 00:03:42.670
Now, I'm just gonna walk
us through this just as

57
00:03:42.670 --> 00:03:47.500
an example of how one implementation
here of persistent data structures and

58
00:03:47.500 --> 00:03:50.602
of immutable data in
JavaScript lets us do this.

59
00:03:50.602 --> 00:03:54.928
But you get the idea, it's gonna be pretty
similar for the rest of these, right?

60
00:03:54.928 --> 00:03:58.554
So if I have return, oops,

61
00:03:58.554 --> 00:04:03.601
I'm supposed to be returning this and

62
00:04:03.601 --> 00:04:09.908
I am going to be returning
here we are updating so

63
00:04:09.908 --> 00:04:16.554
instead of push I want to do an assignmen,
right?

64
00:04:16.554 --> 00:04:20.474
So draft index =new value.

65
00:04:20.474 --> 00:04:25.180
All the same stuff that we're
used to doing in JavaScript

66
00:04:25.180 --> 00:04:29.017
magically gets immutablised
under the hood.

67
00:04:29.017 --> 00:04:34.170
Now for pop, we just need to
think a little bit more carefully

68
00:04:34.170 --> 00:04:38.729
about how we would like
the equivalent to pop in yeah.

69
00:04:38.729 --> 00:04:42.083
Here, we're not really doing,
like, myArray.pop.

70
00:04:42.083 --> 00:04:47.014
We want to return, again, the array
with everything except the popped thing,

71
00:04:47.014 --> 00:04:48.345
if that makes sense.

72
00:04:48.345 --> 00:04:50.385
So we could do something like.

73
00:04:50.385 --> 00:04:53.785
&gt;&gt; Student: In both cases,
you want array instead of oldArray.

74
00:04:53.785 --> 00:04:56.027
&gt;&gt; Anjana Vakil: Oops, thank you.

75
00:04:56.027 --> 00:05:03.953
Okay, so instead of assigning here,

76
00:05:03.953 --> 00:05:10.895
we are going to maybe just pop it.

77
00:05:10.895 --> 00:05:12.515
And then we can return draft.

78
00:05:12.515 --> 00:05:16.695
But actually,
Immer is returning draft for us.

79
00:05:16.695 --> 00:05:20.199
So that's why we didn't need to have
returns statements and the other things.

80
00:05:20.199 --> 00:05:23.826
Immer is taking that draft and
returning it for us.

81
00:05:23.826 --> 00:05:27.437
All right, so we now have, yeah,
and you can look through the test,

82
00:05:27.437 --> 00:05:30.319
but it's just it's just
a demonstration of this API.

83
00:05:30.319 --> 00:05:32.805
This is just one way of doing it, but
a lot of people really like Immer.

84
00:05:32.805 --> 00:05:38.474
There's some other solutions that have
totally different APIs, like for example,

85
00:05:38.474 --> 00:05:43.511
immutable JS is a library that the artists
formerly known as Facebook put out

86
00:05:43.511 --> 00:05:49.299
that, Does the same underlying thing,

87
00:05:49.299 --> 00:05:53.228
but the way that you would work
with it is a lot more different and

88
00:05:53.228 --> 00:05:58.068
you have to remember to always make
your arrays, special immutable arrays.

89
00:05:58.068 --> 00:06:01.188
&gt;&gt; Anjana Vakil: Immer is cool and a lot
of people like it because it lets you just

90
00:06:01.188 --> 00:06:05.268
pretend everything is a regular JavaScript
array, and it just does the magic for

91
00:06:05.268 --> 00:06:07.371
you of making sure nothing gets mutated.

92
00:06:07.371 --> 00:06:11.188
All right, so this is all to say if
you wanna work with immutable data,

93
00:06:11.188 --> 00:06:15.396
which you probably will if you end up
doing a lot of functional programming and

94
00:06:15.396 --> 00:06:19.829
seeing how slow it is to copy everything
all the time and avoid mutation that way.

95
00:06:19.829 --> 00:06:23.869
There are solutions in
the JavaScript ecosystem for that.

