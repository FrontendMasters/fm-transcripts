WEBVTT

1
00:00:00.000 --> 00:00:06.498
&gt;&gt; Anjana Vakil: In addition to functional
purity or sort of a consequence, again,

2
00:00:06.498 --> 00:00:11.856
of our wanting to do programming
deterministically and

3
00:00:11.856 --> 00:00:17.898
with minimal cases where the thing
changed out from underneath

4
00:00:17.898 --> 00:00:23.607
me in a way I didn't expect,
we wanna avoid mutating data.

5
00:00:23.607 --> 00:00:26.140
So when I say mutating data,

6
00:00:26.140 --> 00:00:31.738
I don't just mean getting it
bitten by a radioactive spider and

7
00:00:31.738 --> 00:00:37.018
giving it superpowers,
I mean changing the data in place,

8
00:00:37.018 --> 00:00:41.874
we say, or sort of the same entity,
like an array, for

9
00:00:41.874 --> 00:00:46.339
example, now has different
values inside of it.

10
00:00:46.339 --> 00:00:51.685
So that's what we call
changing data in-place and

11
00:00:51.685 --> 00:00:58.166
mutability and in immutable land,
we don't want to do that.

12
00:00:58.166 --> 00:01:00.606
We never wanna,
let's say we take in an array,

13
00:01:00.606 --> 00:01:03.725
we never wanna mess with that
original array that we took in.

14
00:01:03.725 --> 00:01:07.871
Instead of changing it in-place,

15
00:01:07.871 --> 00:01:14.780
we want to replace it with
an updated new version of the array

16
00:01:14.780 --> 00:01:20.044
without messing with the original version.

17
00:01:21.802 --> 00:01:25.250
&gt;&gt; Anjana Vakil: So, let's take
a very simple array as an example.

18
00:01:25.250 --> 00:01:30.112
We've got a bunch of cities in
an array that are cities in

19
00:01:30.112 --> 00:01:34.042
India that those names
are super outdated and

20
00:01:34.042 --> 00:01:39.024
colonial and we don't like them anymore,
some of them.

21
00:01:39.024 --> 00:01:43.896
So for example, Bombay,
which is what the city, for example,

22
00:01:43.896 --> 00:01:48.317
my dad grew up in,
which was called Bombay when I was a kid,

23
00:01:48.317 --> 00:01:52.131
is no longer called Bombay,
it is called Mumbai.

24
00:01:52.131 --> 00:01:53.715
So we need to update this data.

25
00:01:53.715 --> 00:02:00.251
And in a mutating way, we could
update it by assigning a new value,

26
00:02:00.251 --> 00:02:05.993
Mumbai, to the element at
index one in the array, right?

27
00:02:05.993 --> 00:02:09.479
And we're used to doing this
in our JavaScript code,

28
00:02:09.479 --> 00:02:11.497
hopefully reasonably often.

29
00:02:11.497 --> 00:02:14.910
And so now cities is different.

30
00:02:14.910 --> 00:02:18.776
Before cities had Bombay in it,
now it does not.

31
00:02:18.776 --> 00:02:20.887
It has Mumbai instead.

32
00:02:20.887 --> 00:02:24.299
Cities itself, same array.

33
00:02:24.299 --> 00:02:26.733
As far as JavaScript is concerned,

34
00:02:26.733 --> 00:02:30.719
it's the same thing that it's
pointing to in its memory.

35
00:02:30.719 --> 00:02:35.782
Okay, the problem with that is,
okay, maybe we won't

36
00:02:35.782 --> 00:02:40.629
get into it in this particular case,
but if an array or

37
00:02:40.629 --> 00:02:46.339
any kind of value changes out
from under me that means, again,

38
00:02:46.339 --> 00:02:51.617
we have state, we have a value
that is changing over time,

39
00:02:51.617 --> 00:02:57.064
a single value cities is now
talking about different data.

40
00:02:57.064 --> 00:03:04.069
So if I were to run a function that
used cities at two different points,

41
00:03:04.069 --> 00:03:09.768
one before the update and
one after now I am having the pain

42
00:03:09.768 --> 00:03:14.663
of stateful headaches
[LAUGH] in my programming.

43
00:03:14.663 --> 00:03:18.289
So instead, what we wanna do,

44
00:03:18.289 --> 00:03:23.449
is not update the old object,
in this case,

45
00:03:23.449 --> 00:03:28.329
an array, but rather create a new one that

46
00:03:28.329 --> 00:03:33.223
has the correct data or the updated data.

47
00:03:33.223 --> 00:03:37.713
So one way we could do that
here is by using, in this case,

48
00:03:37.713 --> 00:03:39.878
we can use the built in map.

49
00:03:39.878 --> 00:03:40.657
It's pretty pure.

50
00:03:40.657 --> 00:03:41.865
It returns a new array.

51
00:03:41.865 --> 00:03:46.485
It doesn't mutate the array, but
we could also use our helper map function.

52
00:03:46.485 --> 00:03:52.195
We're going to take each thing in
the array of the original old cities and

53
00:03:52.195 --> 00:03:56.702
then decide if we need to update it or
not, essentially.

54
00:03:56.702 --> 00:04:02.803
And if we do, we will return
the corresponding new value.

55
00:04:02.803 --> 00:04:04.511
So in this case we're saying, okay, Delhi?

56
00:04:04.511 --> 00:04:07.811
Yep, that's still Delhi, continue.

57
00:04:07.811 --> 00:04:08.575
Bombay?

58
00:04:08.575 --> 00:04:11.402
Nope, new name, Mumbai.

59
00:04:11.402 --> 00:04:11.970
Bangalore?

60
00:04:11.970 --> 00:04:14.412
Nope, new name, Bengaluru.

61
00:04:14.412 --> 00:04:20.948
So what we return then, so
this is the inner function here,

62
00:04:20.948 --> 00:04:28.400
this a transformer function that we
pass in to our higher order map,

63
00:04:28.400 --> 00:04:35.223
is then just gonna take in the old
data and return the new data.

64
00:04:35.223 --> 00:04:41.139
And map is gonna take care of doing
that for everything in the array and

65
00:04:41.139 --> 00:04:45.839
then returning a new array
with that transformation.

66
00:04:45.839 --> 00:04:50.084
Crucially, old cities never changes.

67
00:04:50.084 --> 00:04:54.070
So if my coworker was working
with the old cities array and

68
00:04:54.070 --> 00:04:59.480
their tests would fail if I swapped out
all the values, they're still good.

69
00:04:59.480 --> 00:05:01.650
Old cities is still old cities.

70
00:05:01.650 --> 00:05:07.694
New cities is new data that I can work
with that is based on that old city data.

71
00:05:07.694 --> 00:05:08.514
All right.

72
00:05:12.005 --> 00:05:14.120
&gt;&gt; Anjana Vakil: No,
you might be wondering, okay,

73
00:05:14.120 --> 00:05:18.488
that's fine if we have three things in
an array, but every time we use a map or

74
00:05:18.488 --> 00:05:21.310
a filter or reduce,
we're turning a new array.

75
00:05:21.310 --> 00:05:26.165
That means we have to create
more space for more data, right?

76
00:05:26.165 --> 00:05:30.031
We're keeping the old data around and
adding the new data to our program

77
00:05:30.031 --> 00:05:33.393
somewhere, so it has to remember
all of that stuff in memory.

78
00:05:33.393 --> 00:05:37.406
We're gonna start taking up
a bunch of space, [LAUGH].

79
00:05:37.406 --> 00:05:41.395
And it might also become
pretty inefficient

80
00:05:41.395 --> 00:05:45.180
if we are dealing with very complex data.

81
00:05:45.180 --> 00:05:50.109
And so there can start to be similarly
with recursion, but we started to

82
00:05:50.109 --> 00:05:55.223
run into some performance problems
once we get larger and larger inputs.

83
00:05:55.223 --> 00:06:00.632
There can also be some issues to
this whole copy instead of mutate

84
00:06:00.632 --> 00:06:06.853
strategy like make a new modified copy
instead of changing the original.

85
00:06:08.508 --> 00:06:13.189
&gt;&gt; Anjana Vakil: And that can become
pretty inefficient in both time and

86
00:06:13.189 --> 00:06:14.722
space concerns.

87
00:06:14.722 --> 00:06:18.932
And so there is a strategy or
a entity, I guess,

88
00:06:18.932 --> 00:06:24.619
in a lot of functional programming,
languages and toolkits and

89
00:06:24.619 --> 00:06:29.483
things like that that helps
us deal with that problem.

90
00:06:29.483 --> 00:06:34.528
And you'll sometimes hear them
called immutable data structures.

91
00:06:34.528 --> 00:06:39.955
And this is essentially a special type of
array in this case, but you could also

92
00:06:39.955 --> 00:06:45.302
imagine an object or what have you that
we can create copies of that are a little

93
00:06:45.302 --> 00:06:50.996
bit more efficient than just copying every
single thing in the array all the time.

94
00:06:50.996 --> 00:06:53.134
So you might hear them called
immutable data structures.

95
00:06:53.134 --> 00:06:57.468
You might also sometimes hear them
called persistent data structures,

96
00:06:57.468 --> 00:07:02.369
they are a really, I think, really cool,
fascinating implementation detail,

97
00:07:02.369 --> 00:07:06.007
essentially, that we're not
gonna spend too much time on.

98
00:07:06.007 --> 00:07:10.724
But wanna think about it a little bit,
that is a kind of very clever way of

99
00:07:10.724 --> 00:07:16.072
helping us, instead of allocating if we
have an array with a bunch of elements and

100
00:07:16.072 --> 00:07:21.026
we need to update it, we would have to
allocate a whole new array of that same

101
00:07:21.026 --> 00:07:25.076
old length if we're working
with regular data structures.

102
00:07:25.076 --> 00:07:28.728
If we're working with
immutable data structures,

103
00:07:28.728 --> 00:07:34.623
they have special optimizations baked in
that help us only copy the changing parts.

104
00:07:34.623 --> 00:07:39.608
So essentially, what persistent
data structures do is they,

105
00:07:39.608 --> 00:07:42.534
on the surface, look like an array.

106
00:07:42.534 --> 00:07:47.934
But under the hood,
they're actually trees that take, okay,

107
00:07:47.934 --> 00:07:53.734
let's say we had an array of zoo
animals that started with a monkey and

108
00:07:53.734 --> 00:08:00.845
then there was a bunny, and then there was
a panda and a bear and a blah, blah, blah.

109
00:08:00.845 --> 00:08:08.051
And now it's, a UFO just landed and
squashed the bunny.

110
00:08:08.051 --> 00:08:11.617
But now we have a new animal
on the planet, it's an alien.

111
00:08:11.617 --> 00:08:16.868
And so if I wanted to create
an updated array with

112
00:08:16.868 --> 00:08:22.659
just one value changed,
like bunny becomes alien.

113
00:08:22.659 --> 00:08:28.463
I don't wanna have to make new copies of
all the same stuff that didn't change.

114
00:08:28.463 --> 00:08:34.236
So what persistent data structures let us
do is, if I had my original array on call,

115
00:08:34.236 --> 00:08:38.112
it was called zoo,
then when I create my updated array,

116
00:08:38.112 --> 00:08:42.729
which we'll call new, I only need
to make a copy of the values, and

117
00:08:42.729 --> 00:08:47.430
in this case, it clumps some of
the values together cuz doing on each

118
00:08:47.430 --> 00:08:50.763
individual value isn't always so
efficient.

119
00:08:50.763 --> 00:08:56.211
So it might make, let's say in this case,
it's chunking them into twos.

120
00:08:56.211 --> 00:09:01.467
We update that node in this
tree with the new value.

121
00:09:01.467 --> 00:09:05.357
And in this case, yeah, we had a little
bit of copying, we copied the monkey.

122
00:09:05.357 --> 00:09:10.398
And then,
&gt;&gt; Anjana Vakil: The data

123
00:09:10.398 --> 00:09:15.828
structure points to the rest
of the same old data

124
00:09:15.828 --> 00:09:23.858
that we already had in memory without
having to create a new copy of it.

125
00:09:23.858 --> 00:09:27.623
So essentially, and there's a lot
more that could be said about this,

126
00:09:27.623 --> 00:09:31.350
and I also have some links in the further
reading that you can dig into.

127
00:09:31.350 --> 00:09:36.270
But essentially, what we're doing
is we're leveraging some very

128
00:09:36.270 --> 00:09:40.843
clever trickery under the hood to
make it much faster when I want

129
00:09:40.843 --> 00:09:44.573
to copy that new array that
changes just one thing.

130
00:09:44.573 --> 00:09:49.565
I no longer have to allocate new memory
and spend all the time allocating that

131
00:09:49.565 --> 00:09:53.857
memory for each thing in the original
array that didn't change.

132
00:09:53.857 --> 00:09:58.550
I get to skip all the unchanged parts and
just update what I need to.

133
00:09:58.550 --> 00:10:04.016
This is something that is baked into
some functional programming languages,

134
00:10:04.016 --> 00:10:06.185
JavaScript is not one of them.

135
00:10:06.185 --> 00:10:09.979
In JavaScript, we don't have this
kind of functionality out of the box.

136
00:10:09.979 --> 00:10:15.216
Some languages like Clojure, for

137
00:10:15.216 --> 00:10:20.097
example, have these built in.

138
00:10:20.097 --> 00:10:25.129
But what luckily for us, we have,
as I said, a massive ecosystem of other

139
00:10:25.129 --> 00:10:30.164
people who want to do functional
programming in JavaScript, which means

140
00:10:30.164 --> 00:10:36.035
they have implemented these kind of things
for us, and we can take advantage of that.

