WEBVTT

1
00:00:00.000 --> 00:00:04.608
&gt;&gt; Anjana Vakil: So when we talk about
functional programs [LAUGH] there's

2
00:00:04.608 --> 00:00:07.781
a hint right there in the terminology.

3
00:00:07.781 --> 00:00:10.888
In imperative programming or
object oriented program, well,

4
00:00:10.888 --> 00:00:12.217
imperative programming.

5
00:00:12.217 --> 00:00:13.916
What is a program made up of?

6
00:00:13.916 --> 00:00:15.757
A bunch of commands.

7
00:00:15.757 --> 00:00:19.979
Maybe those are grouped together
into things like procedures or

8
00:00:19.979 --> 00:00:24.133
impure functions, but
that's what the program is made up of.

9
00:00:24.133 --> 00:00:26.876
In object oriented programming,

10
00:00:26.876 --> 00:00:32.359
the program is made up of not those
kind of pure individual commands,

11
00:00:32.359 --> 00:00:38.126
but that imperative logic is wrapped
up in these things we call objects,

12
00:00:38.126 --> 00:00:43.157
and that's what the program is made up of,
a bunch of objects.

13
00:00:43.157 --> 00:00:48.151
In functional programming,
a program is just a function, or

14
00:00:48.151 --> 00:00:53.143
perhaps it's better to say it's
a bunch of functions all used

15
00:00:53.143 --> 00:00:58.341
together to do whatever computation
our boss wants us to [LAUGH].

16
00:00:58.341 --> 00:01:05.161
So when we think about a functional
program, we are thinking about a function.

17
00:01:05.161 --> 00:01:10.602
The question is, how do we make a useful
program that's just one function?

18
00:01:10.602 --> 00:01:15.027
Well, we do that by taking a bunch
of smaller functions that do

19
00:01:15.027 --> 00:01:19.212
smaller bits of that program and
composing them into one.

20
00:01:19.212 --> 00:01:22.991
And so this is kind of a very
basic illustration of that.

21
00:01:22.991 --> 00:01:27.359
We talked about having a pure function
that just takes in one thing and

22
00:01:27.359 --> 00:01:28.948
returns another thing.

23
00:01:28.948 --> 00:01:33.476
So maybe we have a f here that's like,
given a circle,

24
00:01:33.476 --> 00:01:37.715
give me the equivalent
triangle of the same color.

25
00:01:37.715 --> 00:01:40.433
And that output is just more data,

26
00:01:40.433 --> 00:01:44.574
which means it's ready to
be an input to a function.

27
00:01:44.574 --> 00:01:48.064
So we can just keep passing.

28
00:01:48.064 --> 00:01:51.780
Input becomes output, which becomes input,
which becomes output, which becomes input,

29
00:01:51.780 --> 00:01:52.744
which becomes output.

30
00:01:52.744 --> 00:01:57.249
So, if I have two functions, one of which
doesn't change the color, but changes

31
00:01:57.249 --> 00:02:01.971
the shape, and the other of which doesn't
change the shape, but changes the color.

32
00:02:01.971 --> 00:02:04.851
If I pass a shape through both of them,

33
00:02:04.851 --> 00:02:08.729
I will get the changed shape and
the changed color.

34
00:02:08.729 --> 00:02:13.678
And this is a composition
of those two functions.

35
00:02:13.678 --> 00:02:19.948
And this is the only kind of little
bit of a gotcha that you want to keep

36
00:02:19.948 --> 00:02:25.118
in mind here is that this is
equivalent to essentially,

37
00:02:25.118 --> 00:02:32.279
what we're doing is we're calling f on x,
and then we're calling g on that.

38
00:02:32.279 --> 00:02:38.263
But the idea here is that in our pipeline,
we think about it kind of left to right,

39
00:02:38.263 --> 00:02:41.966
but sometimes when you're
writing this encode.

40
00:02:41.966 --> 00:02:47.607
We have to kind of mentally flip flop
to right to left, which as we said,

41
00:02:47.607 --> 00:02:52.967
at least here in the West,
where we often are very conventionalized

42
00:02:52.967 --> 00:02:58.156
to left to right thinking just as
a little small, little gotcha.

43
00:02:58.156 --> 00:03:02.975
You just wanna think about which
functions being called first, and

44
00:03:02.975 --> 00:03:08.566
in the parentheses execution, whatever's
inside is gonna be called first.

45
00:03:08.566 --> 00:03:12.636
And you also might see another way of
writing function composition that you

46
00:03:12.636 --> 00:03:14.454
might remember from math class.

47
00:03:14.454 --> 00:03:19.459
Just like a little circle that
thing that goes between f and g.

48
00:03:19.459 --> 00:03:24.390
So you sometimes might see another
functional programming notation,

49
00:03:24.390 --> 00:03:27.595
a different type of notation
that says f dot g or

50
00:03:27.595 --> 00:03:32.952
like f circle g means the composition of
f and g, which is equivalent to this.

51
00:03:32.952 --> 00:03:36.290
So you might see slightly different.

52
00:03:36.290 --> 00:03:40.776
It's like visual jargon, I don't know.

53
00:03:40.776 --> 00:03:44.785
Okay, so for example, and
this is where it starts

54
00:03:44.785 --> 00:03:49.659
to become clear how our partial
applications can be reused.

55
00:03:49.659 --> 00:03:55.975
Earlier we had endectifier,
in this case, we're gonna make an ender,

56
00:03:55.975 --> 00:04:00.944
and what that's gonna do is
take in an ending like rocks or

57
00:04:00.944 --> 00:04:05.830
y'all, or [LAUGH] and
it's going to return a function.

58
00:04:05.830 --> 00:04:10.615
And this is now we're getting into
sort of pipelines of arrow functions,

59
00:04:10.615 --> 00:04:15.861
which is again getting closer and closer
to the syntax you might see in more purely

60
00:04:15.861 --> 00:04:21.366
functional languages, should you ever
decide to abandon our best friend Java's.

61
00:04:21.366 --> 00:04:22.637
Just kidding.

62
00:04:22.637 --> 00:04:26.766
But so this function ender is, well,

63
00:04:26.766 --> 00:04:31.412
the function that is
returned is gonna take

64
00:04:31.412 --> 00:04:36.066
in an input and then smoosh them together.

65
00:04:36.066 --> 00:04:40.822
So that means that this blue
part is a closure, essentially,

66
00:04:40.822 --> 00:04:46.591
this is just a separate way, a different
syntax for writing that nesting.

67
00:04:46.591 --> 00:04:52.167
So within this second arrow function, we
have access to the outer scope as well as

68
00:04:52.167 --> 00:04:57.908
the current scope, and you can extend this
to as many different layers as you want.

69
00:04:57.908 --> 00:05:00.898
And in fact, the lambda calculus,

70
00:05:00.898 --> 00:05:06.788
which is the theoretical underpinnings
of functional programming.

71
00:05:06.788 --> 00:05:13.549
It's a mathematical system for
computation.

72
00:05:13.549 --> 00:05:18.942
That is what Alonzo church invented
in the 30s, which became all

73
00:05:18.942 --> 00:05:25.414
of the lambda logo to functional languages
we see at meetups today, whatever.

74
00:05:25.414 --> 00:05:27.388
You can actually do this,

75
00:05:27.388 --> 00:05:31.516
the type of things that you
would do in super hardcore,

76
00:05:31.516 --> 00:05:37.174
original academic old school functional
programming with just like arrow

77
00:05:37.174 --> 00:05:43.573
function after arrow function there's more
resources about that in the epilogue.

78
00:05:43.573 --> 00:05:49.238
Okay, so given this ender function,
I can create a function called a door,

79
00:05:49.238 --> 00:05:54.567
which is gonna say, I love that thing,
that thing rocks, right?

80
00:05:54.567 --> 00:05:59.333
Or I can create an announce like, hey,
y'all, that's what I just said or

81
00:05:59.333 --> 00:06:04.178
I can create an exclaim function that's
going to make everything align in my

82
00:06:04.178 --> 00:06:08.720
email, cuz I write emails with like
80 million exclamation points,

83
00:06:08.720 --> 00:06:13.368
if you ever send me an email,
correct get ready for exclamation points.

84
00:06:13.368 --> 00:06:19.407
Also I'm terrible replying email,

85
00:06:19.407 --> 00:06:22.722
so what we wanna do.

86
00:06:22.722 --> 00:06:23.774
Let's say,

87
00:06:23.774 --> 00:06:29.519
it's create like I wanna be able to
easily hype up any tech topic I want.

88
00:06:29.519 --> 00:06:34.394
So I'm gonna create a hypeUp
function that's gonna

89
00:06:34.394 --> 00:06:39.267
take in some kind of thing
that I'm excited about and

90
00:06:39.267 --> 00:06:43.475
it's going to pipe it
through all the three of

91
00:06:43.475 --> 00:06:48.153
these functions in order
to get the final output.

92
00:06:48.153 --> 00:06:53.628
So in this case, I hype up js,
I get JS rocks, y'all.

93
00:06:53.628 --> 00:06:57.126
I hype up FP I get FP rocks y'all.

94
00:06:57.126 --> 00:07:01.899
And the only tricky bit
here is don't forget

95
00:07:01.899 --> 00:07:07.188
that the order in which
those endings are gonna be

96
00:07:07.188 --> 00:07:12.348
applied is not the same as
the order left to right

97
00:07:12.348 --> 00:07:17.394
of what we will see in our source code,
right?

98
00:07:17.394 --> 00:07:23.348
So the last thing that happens
as I add an exclamation point,

99
00:07:23.348 --> 00:07:27.686
the first thing that
happens is I add rocks.

100
00:07:27.686 --> 00:07:32.688
Then what that JS rocks gets
passed in to announce and

101
00:07:32.688 --> 00:07:38.039
so then I get JS rocks y'all dead tone,
no excitement.

102
00:07:38.039 --> 00:07:41.985
And then that result gets
passed into exclaim, and

103
00:07:41.985 --> 00:07:47.789
now I get JS rocks y'all with the
excitement that we all deserve and crave.

