WEBVTT

1
00:00:00.173 --> 00:00:03.073
&gt;&gt; Anjana Vakil: So what we're going
to do in our next exercise, first,

2
00:00:03.073 --> 00:00:05.369
we're gonna start with reading some code.

3
00:00:05.369 --> 00:00:07.418
Then we're gonna move on
to writing some code.

4
00:00:07.418 --> 00:00:12.039
So in this case, we're gonna look at
alternative implementations of [LAUGH]

5
00:00:12.039 --> 00:00:15.941
Every functional programming
student's favorite function,

6
00:00:15.941 --> 00:00:17.757
the factorial computation.

7
00:00:17.757 --> 00:00:23.151
Which if you wanna check out the what
factorial is a math class refresher,

8
00:00:23.151 --> 00:00:29.067
there's a Wikipedia link, but essentially,
we're gonna give it an integer,

9
00:00:29.067 --> 00:00:33.939
and it's going to compute the factorial
of that integer, right so

10
00:00:33.939 --> 00:00:37.626
like
&gt;&gt; Anjana Vakil: Factorial of 3 is what 1

11
00:00:37.626 --> 00:00:39.067
times 2 times 3?

12
00:00:39.067 --> 00:00:44.565
Check my math [LAUGH] And so that's
what we want this function to compute.

13
00:00:44.565 --> 00:00:50.649
Basically that number and all of its
smaller numbers multiplied together.

14
00:00:50.649 --> 00:00:54.209
Similar to some, but
same thing but different.

15
00:00:54.209 --> 00:00:59.753
So for right now, let's just take one
minute and read through this factorial

16
00:00:59.753 --> 00:01:05.229
JS just read it just ask yourself, A,
what does each of these functions do?

17
00:01:05.229 --> 00:01:11.148
And B,
do you find one of them more readable?

18
00:01:11.148 --> 00:01:13.610
Easier to understand?

19
00:01:13.610 --> 00:01:15.112
Do you find one less readable?

20
00:01:15.112 --> 00:01:16.186
Less easy to understand?

21
00:01:16.186 --> 00:01:19.733
This is totally subjective but
let's take a moment, read through, and

22
00:01:19.733 --> 00:01:20.613
we will discuss.

23
00:01:26.170 --> 00:01:29.287
&gt;&gt; Anjana Vakil: So
let's take a look at well, first of,

24
00:01:29.287 --> 00:01:32.603
do y'all find one of these easier to read?

25
00:01:32.603 --> 00:01:36.128
This is a subjective thing,
there is no correct answer.

26
00:01:36.128 --> 00:01:38.768
Who finds imperative
factorial easier to read?

27
00:01:38.768 --> 00:01:42.957
Okay, I see a couple hands who finds
recursive factorial easier to read?

28
00:01:42.957 --> 00:01:48.228
Zero hands, all right why?

29
00:01:48.228 --> 00:01:51.868
And again, subjective,
we're just talking about our feelings.

30
00:01:51.868 --> 00:01:56.341
It's good stuff, crucial to software
development, I'm not even kidding.

31
00:01:56.341 --> 00:01:58.103
&gt;&gt; Speaker 2: Just like as I'm reading it,

32
00:01:58.103 --> 00:02:01.702
it feels like there's a little
bit more mental gymnastics.

33
00:02:01.702 --> 00:02:05.375
I have to think about like keeping
track of how it's changing, and

34
00:02:05.375 --> 00:02:06.895
like referencing itself.

35
00:02:06.895 --> 00:02:08.631
&gt;&gt; Anjana Vakil: Okay,
in in recursive factorial,

36
00:02:08.631 --> 00:02:09.681
&gt;&gt; Speaker 3: Go to the bottom and

37
00:02:09.681 --> 00:02:13.093
then start again and
go to the bottom and start again, where,

38
00:02:13.093 --> 00:02:15.522
typically, we learn to read left to right,

39
00:02:15.522 --> 00:02:19.749
top to bottom here in the west, and that's
what a lot of us are used to and so.

40
00:02:19.749 --> 00:02:23.877
When you read something that says do this,
then this, then this,

41
00:02:23.877 --> 00:02:28.238
then this it's like, okay,
that's like a recipe I can follow that.

42
00:02:28.238 --> 00:02:30.045
&gt;&gt; Anjana Vakil: Exactly.
&gt;&gt; Speaker 3: Whereas this says,

43
00:02:30.045 --> 00:02:32.437
do this and then start over again and

44
00:02:32.437 --> 00:02:34.418
do it again it's like,
&gt;&gt; Speaker 2: And

45
00:02:34.418 --> 00:02:36.481
then there's an abstract yeah.

46
00:02:36.481 --> 00:02:37.287
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Anjana Vakil: Great and so

47
00:02:37.287 --> 00:02:42.276
we have to kind of think about that, for
example, the order of execution might

48
00:02:42.276 --> 00:02:47.211
be a little surprising here, and if you
want to, you can mess with this code.

49
00:02:47.211 --> 00:02:52.803
You can add, I'll even let you add
in pure console logs, just for

50
00:02:52.803 --> 00:02:58.396
the sake of learning or
what have you to satisfy yourself of like,

51
00:02:58.396 --> 00:03:01.866
how this function is doing what it does.

52
00:03:01.866 --> 00:03:06.666
But you're right there's a lot of kind of
like, we have this sort of almost muscle

53
00:03:06.666 --> 00:03:11.765
memory built in, especially as programmers
who are used to working with JavaScript.

54
00:03:11.765 --> 00:03:14.945
Most of the code that we see is
imperative code, largely imperative code,

55
00:03:14.945 --> 00:03:17.321
not all of it, like I said,
callbacks are everywhere.

56
00:03:17.321 --> 00:03:22.563
That's functional cool beads but
if we're used to reading while loops and

57
00:03:22.563 --> 00:03:26.487
for loops, something new is
gonna feel a little weird.

58
00:03:26.487 --> 00:03:32.067
Hopefully by the end of this course,
and certainly by the end of the rest

59
00:03:32.067 --> 00:03:37.461
of the courses in the functional
programming path, it will feel a lot

60
00:03:37.461 --> 00:03:43.605
more natural to be working with recursion
instead of while loops in this case.

61
00:03:43.605 --> 00:03:46.886
But there is a certain element
to which recursion is just sort

62
00:03:46.886 --> 00:03:50.231
of one of those things that makes
sense to a functional program

63
00:03:50.231 --> 00:03:52.177
more than it might to a human brain.

64
00:03:52.177 --> 00:03:56.217
So that's why we're gonna spend so
much time practicing it.

