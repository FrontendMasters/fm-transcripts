WEBVTT

1
00:00:00.000 --> 00:00:02.605
&gt;&gt; Anjana Vakil: Let's look
at impure render app first.

2
00:00:02.605 --> 00:00:08.497
What's going on here, is we're
passing in the art we wanna render,

3
00:00:08.497 --> 00:00:12.674
calling Pure Get SVG on it,
whatever that does.

4
00:00:12.674 --> 00:00:15.775
We're not gonna worry about that
till 30 seconds from now [LAUGH].

5
00:00:15.775 --> 00:00:22.092
And then we are doing this impure
side effect of messing with the DOM.

6
00:00:23.896 --> 00:00:31.892
&gt;&gt; Anjana Vakil: Yeah, so this is not a
pure function because of that side effect.

7
00:00:31.892 --> 00:00:36.096
Did anybody have a significantly
different impure render app than mine?

8
00:00:36.096 --> 00:00:38.638
&gt;&gt; Speaker 2: I made it more
impure by putting, [LAUGH].

9
00:00:38.638 --> 00:00:40.212
&gt;&gt; Anjana Vakil: By putting in what,
sorry?

10
00:00:40.212 --> 00:00:43.193
&gt;&gt; Speaker 2: By putting art in
from global scope rather than.

11
00:00:43.193 --> 00:00:46.623
&gt;&gt; Anjana Vakil: Yes, exactly,
so we could, for example,

12
00:00:46.623 --> 00:00:52.388
just do that still passes cuz we know
there's impurity in this function.

13
00:00:52.388 --> 00:00:58.053
So yeah, let's use all the impurity,
why not?

14
00:00:58.053 --> 00:01:02.834
The only reason I put it in as an argument
here is because of a bunch of the other

15
00:01:02.834 --> 00:01:06.293
stuff we're gonna do later
just to make it work nicer.

16
00:01:06.293 --> 00:01:10.102
But yes, perfectly legit.

17
00:01:10.102 --> 00:01:13.757
Now let's take a look at Pure get SVG.

18
00:01:13.757 --> 00:01:19.518
Now is this making anybody uneasy here
that I'm calling this a pure function?

19
00:01:19.518 --> 00:01:23.923
&gt;&gt; Speaker 3: Part of me is at the ID
setting, because then I can't recall it

20
00:01:23.923 --> 00:01:29.120
with a different ID and I'm just,
I don't know, if I try to hit art SVG.

21
00:01:29.120 --> 00:01:33.557
I can't have multiple art SVGs,
I'm going to cause problems for

22
00:01:33.557 --> 00:01:38.652
myself later, but I know that's not
exactly what we're going over here.

23
00:01:38.652 --> 00:01:41.744
&gt;&gt; Anjana Vakil: No, sure, yeah, but so
there is this weird thing of like, okay,

24
00:01:41.744 --> 00:01:44.473
the ID is essentially hard
coded inside of this function.

25
00:01:44.473 --> 00:01:48.828
If I wanted to be able to call
this multiple times to create

26
00:01:48.828 --> 00:01:53.754
different SVGs with different
ID attributes, what could I do?

27
00:01:53.754 --> 00:01:55.045
&gt;&gt; Speaker 2: Add an argument parameter.

28
00:01:55.045 --> 00:01:58.399
&gt;&gt; Anjana Vakil: Exactly,
add a parameter so

29
00:01:58.399 --> 00:02:03.848
that I receive the value
of ID as an argument and

30
00:02:03.848 --> 00:02:09.019
assign it essentially,
so then I would have

31
00:02:09.019 --> 00:02:15.334
to change this now my tests
are failing to art, nope.

32
00:02:15.334 --> 00:02:16.454
&gt;&gt; Speaker 2: The create element.

33
00:02:16.454 --> 00:02:18.134
&gt;&gt; Anjana Vakil: It's probably
looking to see if the-

34
00:02:18.134 --> 00:02:19.179
&gt;&gt; Speaker 2: I think line five

35
00:02:19.179 --> 00:02:23.218
if you scroll all the way over to the end,
there's ID.

36
00:02:23.218 --> 00:02:29.741
&gt;&gt; Anjana Vakil: Right,
I was doing that again for course reasons.

37
00:02:29.741 --> 00:02:32.439
Yeah, the tests aren't using it right,
yeah, exactly, no, of course.

38
00:02:32.439 --> 00:02:36.511
I'm actually running the test, so
I would have to do something like that.

39
00:02:36.511 --> 00:02:37.255
&gt;&gt; Speaker 2: Yeah.

40
00:02:37.255 --> 00:02:37.924
&gt;&gt; Anjana Vakil: There we go.

41
00:02:37.924 --> 00:02:39.215
&gt;&gt; Speaker 2: Nice.

42
00:02:39.215 --> 00:02:41.530
&gt;&gt; Anjana Vakil: See,
this is why we program in community.

43
00:02:41.530 --> 00:02:42.877
Okay, [LAUGH] so yeah, so

44
00:02:42.877 --> 00:02:46.350
there are ways that we could make
this a more flexible function.

45
00:02:46.350 --> 00:02:49.808
And that is exactly the type of stuff
that we're gonna be doing a ton of as

46
00:02:49.808 --> 00:02:51.144
functional programmers.

47
00:02:51.144 --> 00:02:56.341
We're gonna be looking later in
the course at how to make the most

48
00:02:56.341 --> 00:03:01.540
flexible functions possible so
that we can reuse them a lot, and

49
00:03:01.540 --> 00:03:07.339
we can recompose them as well to
create the specific solutions we need.

50
00:03:07.339 --> 00:03:09.737
&gt;&gt; Speaker 3: So we're creating
all the SVG and everything, and

51
00:03:09.737 --> 00:03:11.929
we always know it's
gonna be deterministic.

52
00:03:11.929 --> 00:03:14.098
It's gonna come out to be the same,
that's the core.

53
00:03:14.098 --> 00:03:19.007
We can reuse this function, and then
the outside is where we're attaching it

54
00:03:19.007 --> 00:03:23.400
to the DOM, rendering it all this
possible, calling the function.

55
00:03:23.400 --> 00:03:24.128
&gt;&gt; Anjana Vakil: Exactly.

56
00:03:24.128 --> 00:03:24.992
&gt;&gt; Speaker 3: Okay.

57
00:03:24.992 --> 00:03:28.578
&gt;&gt; Anjana Vakil: And so,
for example, I don't know,

58
00:03:28.578 --> 00:03:32.847
does my document have
an element with id app?

59
00:03:32.847 --> 00:03:37.548
So all of the impurity
happens at this outer level.

60
00:03:37.548 --> 00:03:43.639
And in a way, this is like, if you have
worked with react or any other framework,

61
00:03:43.639 --> 00:03:48.923
that essentially lets you just say,
well, this data in my page,

62
00:03:48.923 --> 00:03:53.700
please, and lets the framework
handle the actual rendering.

63
00:03:53.700 --> 00:03:57.429
That's what we're doing, we're pushing
all of that impure rendering stuff into

64
00:03:57.429 --> 00:03:59.625
the framework,
which is outside of my program.

65
00:03:59.625 --> 00:04:02.492
And we're keeping the logic of like,

66
00:04:02.492 --> 00:04:06.353
deciding what value and
attribute should be pure.

67
00:04:06.353 --> 00:04:09.313
We're keeping that deterministic and
predictable.

68
00:04:09.313 --> 00:04:14.426
And so the code that I'm writing,
if there is anything impure I wanna do,

69
00:04:14.426 --> 00:04:19.307
I'm gonna put it on the outermost layer,
on the outermost function.

70
00:04:19.307 --> 00:04:24.474
And then I'm like I keep everything else
as pure as possible underneath that,

71
00:04:24.474 --> 00:04:29.017
so that I can easily test and
debug and so on and so forth.

72
00:04:29.017 --> 00:04:33.913
&gt;&gt; Anjana Vakil: Sweet, and so this is
really like, okay, so if there's one

73
00:04:33.913 --> 00:04:39.868
concept to walk away from this of course,
whether it's pure functions.

74
00:04:39.868 --> 00:04:42.168
If there's two concepts,

75
00:04:42.168 --> 00:04:47.268
the second one would be the real
world is not a pure function.

76
00:04:47.268 --> 00:04:51.680
Computers are not pure functions,
although they are arguably deterministic.

77
00:04:51.680 --> 00:04:53.940
But anyway, we'll talk about that later.

78
00:04:53.940 --> 00:05:00.584
But the fact of life that we need to do
impure stuff in our work as programmers,

79
00:05:00.584 --> 00:05:05.811
because that is what we get paid for,
is not going anywhere.

80
00:05:05.811 --> 00:05:11.311
So all we can do is box it in and
make sure that we keep anything

81
00:05:11.311 --> 00:05:16.591
that might result in unpredictable
things isolated away

82
00:05:16.591 --> 00:05:21.981
from the logic of calculating,
like whatever our program

83
00:05:21.981 --> 00:05:26.940
is supposed to do, in this case,
come up with an SVG.

84
00:05:26.940 --> 00:05:30.018
So the work that we're doing here, and

85
00:05:30.018 --> 00:05:35.245
the walls that we're bashing our
head against, around purity and

86
00:05:35.245 --> 00:05:41.982
like this is the whole thing of functional
programming is how do we isolate impurity?

87
00:05:41.982 --> 00:05:47.551
How do we make sure that all of the real
world messy stuff stays trapped

88
00:05:47.551 --> 00:05:52.448
in a layer where it can't infect
the rest of the program, and

89
00:05:52.448 --> 00:05:58.807
by calling the pure function from inside
the impure function, that's cool.

90
00:05:58.807 --> 00:06:01.231
We don't introduce any impurity there.

91
00:06:01.231 --> 00:06:04.038
The inverse would be a bad idea, right?

92
00:06:04.038 --> 00:06:08.514
We don't wanna call an impure function,
because inside of our function,

93
00:06:08.514 --> 00:06:13.503
we want to be pure, because that impurity
infects the function, as we saw before.

94
00:06:13.503 --> 00:06:17.667
So this is the technique,
we could stop here.

95
00:06:17.667 --> 00:06:21.984
If you wanna do functional programming,
make sure all the messy crap you're doing

96
00:06:21.984 --> 00:06:24.646
in your code happens on
the outermost layer [LAUGH].

97
00:06:24.646 --> 00:06:26.836
But there's a lot more gotchas to that and

98
00:06:26.836 --> 00:06:30.592
there's a lot more to say about in
real world functional programming,

99
00:06:30.592 --> 00:06:34.302
how do you deal with stuff like reading
files that you need the data of.

100
00:06:34.302 --> 00:06:38.366
Or making that word requests and all that
stuff, and how do languages that really

101
00:06:38.366 --> 00:06:42.393
don't allow impure functions, like
Haskell, etc, like, how do they do it?

102
00:06:42.393 --> 00:06:46.649
Monads, but the core idea here,
even if we're not like this is not

103
00:06:46.649 --> 00:06:50.829
functional code, this is still
our exact same imperative code,

104
00:06:50.829 --> 00:06:54.553
step by step, but
we're wrapping it up in a function, and

105
00:06:54.553 --> 00:06:58.133
we know it's deterministic and
it has no side effects.

106
00:06:58.133 --> 00:07:01.258
And we're taking all of the non
deterministic stuff, and

107
00:07:01.258 --> 00:07:03.119
we're putting it on the outside.

