WEBVTT

1
00:00:00.000 --> 00:00:04.393
&gt;&gt; Anjana Vakil: What we're
gonna do in our next exercise is

2
00:00:04.393 --> 00:00:09.152
think about how we would
create non-mutating

3
00:00:09.152 --> 00:00:14.035
alternatives to some of
the mutating utilities

4
00:00:14.035 --> 00:00:18.809
that we're used to working
with all the time.

5
00:00:18.809 --> 00:00:20.008
So for example,

6
00:00:20.008 --> 00:00:25.584
we're used to pushing elements to
an array that mutates the original array.

7
00:00:25.584 --> 00:00:29.767
We're used to maybe popping something or

8
00:00:29.767 --> 00:00:34.911
updating, assigning a new
value to a given index.

9
00:00:34.911 --> 00:00:39.867
What would it feel like if we
couldn't do all that mutation,

10
00:00:39.867 --> 00:00:42.400
what would we do differently?

11
00:00:42.400 --> 00:00:47.760
How would we return instead of a original
object that's been changed in place,

12
00:00:47.760 --> 00:00:53.041
how would we return a new value that we
can use to replace the original version?

13
00:00:53.041 --> 00:00:56.142
So what we're gonna do is in arrays.js,

14
00:00:56.142 --> 00:01:01.195
we're gonna implement these,
&gt;&gt; Anjana Vakil: Functions that

15
00:01:01.195 --> 00:01:05.938
we are used to using as mutating array
methods in JavaScript like array.push,

16
00:01:05.938 --> 00:01:08.149
array index = value, array.pop.

17
00:01:08.149 --> 00:01:11.692
And we're gonna create kind
of functional equivalent,

18
00:01:11.692 --> 00:01:15.990
not all exactly the same,
like pop doesn't return and it doesn't.

19
00:01:15.990 --> 00:01:20.235
Anyway, but we're going to create the same
functionality without the mutation.

20
00:01:22.590 --> 00:01:25.798
&gt;&gt; Anjana Vakil: And then, to do this
we're just gonna use regular data

21
00:01:25.798 --> 00:01:29.588
structures, then we're just gonna
take a look at how we could.

22
00:01:31.979 --> 00:01:35.644
&gt;&gt; Anjana Vakil: Make sure we're still not
doing that mutation on these operations,

23
00:01:35.644 --> 00:01:37.104
but still use our old APIs.

24
00:01:37.104 --> 00:01:44.588
So first step, we're gonna take in this
arrays.js, these little stubbed functions,

25
00:01:44.588 --> 00:01:49.197
and we will implement them
such that these tests pass.

26
00:01:49.197 --> 00:01:54.451
So for example,
if my original array was 1, 2, 3,

27
00:01:54.451 --> 00:01:59.821
and I call push4 on the original,
pushed should be 1,

28
00:01:59.821 --> 00:02:05.340
2, 3, 4, but
original should still be 1, 2, 3.

29
00:02:05.340 --> 00:02:12.310
Unlike if I were to call original.push4,
in which case, original now has a 4 in it,

30
00:02:12.310 --> 00:02:17.766
sucks to be you if you were expecting
it to only have three elements.

31
00:02:17.766 --> 00:02:24.168
So, if we can get these tests to pass
with our non-mutating versions of these.

32
00:02:24.168 --> 00:02:29.011
We will have satisfied a little tiny
part of our functional programming

33
00:02:29.011 --> 00:02:33.704
hearts that really feels uncomfortable
when we're mutating data.

34
00:02:39.513 --> 00:02:41.931
&gt;&gt; Anjana Vakil: Let's start with push,
shall we?

35
00:02:41.931 --> 00:02:47.203
So again, we wanna take an array with
a bunch of stuff and a new element and

36
00:02:47.203 --> 00:02:52.407
return an array with all the original
stuff, but also the new element.

37
00:02:52.407 --> 00:02:56.039
Anyone care to walk me through
what they would do for this?

38
00:02:56.039 --> 00:03:00.517
&gt;&gt; Speaker 2: You can just
concat them together.

39
00:03:00.517 --> 00:03:05.676
&gt;&gt; Anjana Vakil: I could concat,
&gt;&gt; Speaker 2: The array and the element.

40
00:03:05.676 --> 00:03:10.028
&gt;&gt; Anjana Vakil: I'm not sure if I have
access to this right now, but yes,

41
00:03:10.028 --> 00:03:13.565
I could concat them together,
the array, and

42
00:03:13.565 --> 00:03:17.990
then,
&gt;&gt; Speaker 2: The element.

43
00:03:17.990 --> 00:03:18.904
&gt;&gt; Anjana Vakil: The element.

44
00:03:18.904 --> 00:03:21.370
&gt;&gt; Speaker 2: But
if we using our other function,

45
00:03:21.370 --> 00:03:23.763
the element has to be an array too.

46
00:03:23.763 --> 00:03:27.219
&gt;&gt; Anjana Vakil: Concat operates on
arrays, right, and this would be the same,

47
00:03:27.219 --> 00:03:29.971
I could also use the built-in
array.concat, but

48
00:03:29.971 --> 00:03:32.533
I don't wanna concatenate
it with an element.

49
00:03:32.533 --> 00:03:34.360
That's not gonna work,

50
00:03:34.360 --> 00:03:39.065
I wanna concatenate it with an array
that has that element in it.

51
00:03:39.065 --> 00:03:42.875
This is just the built-in
array.concat which, again, our little

52
00:03:42.875 --> 00:03:47.354
helper was a wrapper around to just make
it feel less object-oriented of an API.

53
00:03:47.354 --> 00:03:51.395
But that is totally one way that
we could do it, using concat,

54
00:03:51.395 --> 00:03:54.930
is there a way that we
could do it without concat?

55
00:03:54.930 --> 00:03:58.321
&gt;&gt; Speaker 3: Return a new array,
first spreading the array,

56
00:03:58.321 --> 00:04:00.315
and then comma the element.

57
00:04:00.315 --> 00:04:04.034
&gt;&gt; Anjana Vakil: So we also have our
spread operator, which we said kind of

58
00:04:04.034 --> 00:04:08.926
spreads out all the elements of an array
into the context where it's used.

59
00:04:08.926 --> 00:04:15.782
And so here, dot, dot, dot, array is sort
of all of those things, plus element.

60
00:04:18.225 --> 00:04:24.297
&gt;&gt; Anjana Vakil: Yeah, so this is gonna
be each element of the original array and

61
00:04:24.297 --> 00:04:29.921
my new element spread out into
a new array.How about pop?

62
00:04:29.921 --> 00:04:35.239
So in the JavaScript method,
it's gonna return the last element here,

63
00:04:35.239 --> 00:04:39.159
but here, what we wanna do is
if I call pop on an array,

64
00:04:39.159 --> 00:04:43.278
I don't care about the last
element that's just gone.

65
00:04:43.278 --> 00:04:47.169
I want an array that has all
the same stuff from the original,

66
00:04:47.169 --> 00:04:48.857
except the last element.

67
00:04:48.857 --> 00:04:53.273
So kind of the inverse, yeah,
of the push, pop, push, okay.

68
00:04:53.273 --> 00:04:56.202
How about this one?

69
00:04:56.202 --> 00:04:57.494
&gt;&gt; Speaker 2: Slice it.

70
00:04:57.494 --> 00:05:02.377
&gt;&gt; Anjana Vakil: We could slice it, we saw
before we had that array.slice, right?

71
00:05:04.481 --> 00:05:09.967
&gt;&gt; Anjana Vakil: And then, we can look
up the documentation of array slice,

72
00:05:09.967 --> 00:05:11.621
it's like zero.

73
00:05:11.621 --> 00:05:16.519
And so, we're gonna start at zero and
we're gonna slice the whole rest of

74
00:05:16.519 --> 00:05:21.421
the array, but then, the second argument,
if we give it a negative one.

75
00:05:21.421 --> 00:05:25.117
It will stop before it gets
all the way through the array,

76
00:05:25.117 --> 00:05:27.658
that's just the documentation here.

77
00:05:27.658 --> 00:05:32.140
But we could also imagine
a way to do this with our

78
00:05:32.140 --> 00:05:36.401
little helpers from before theoretically,

79
00:05:36.401 --> 00:05:40.898
I'll leave that as an exercise for
the reader.

80
00:05:40.898 --> 00:05:45.241
Instead of using slice, for example,
use head and tail to figure this out?

81
00:05:45.241 --> 00:05:50.699
I don't know, let's find out,
but this is a totally legit

82
00:05:50.699 --> 00:05:56.595
implementation because if we hop
over to our friend mdnrslice,

83
00:05:56.595 --> 00:06:02.181
we will be able to look up whether or
not this actually works.

84
00:06:02.181 --> 00:06:06.070
Actually mutates the array
that I'm calling it

85
00:06:06.070 --> 00:06:08.799
on to see if I can rely on it or not.

86
00:06:08.799 --> 00:06:14.729
And so we have a sort of gotcha here
where it does give me a new array.

87
00:06:14.729 --> 00:06:20.324
I just have to be a little careful
if I'm dealing with deeply nested,

88
00:06:20.324 --> 00:06:25.533
complex data with these simple
values like numbers and things,

89
00:06:25.533 --> 00:06:30.172
we are probably okay, but
array slice is a shallow copy.

90
00:06:30.172 --> 00:06:34.572
It's not like a deep copy,
which would make sure that, if like,

91
00:06:34.572 --> 00:06:40.012
let's say the array includes an array,
are we just pointing to that same array,

92
00:06:40.012 --> 00:06:42.911
or are we making a copy
of that inner array?

93
00:06:42.911 --> 00:06:45.881
Anyway, so when in doubt, check MDN,

94
00:06:45.881 --> 00:06:51.377
see if the operation you're trying to
do is a mutating operation or not.

