WEBVTT

1
00:00:00.000 --> 00:00:04.705
&gt;&gt; Anjana Vakil: The next tool that we're
gonna start adding to our toolbox is

2
00:00:04.705 --> 00:00:06.929
higher-order functions.

3
00:00:06.929 --> 00:00:11.513
And the concept of higher-order functions
goes hand in hand with the concept

4
00:00:11.513 --> 00:00:14.838
of first-class functions,
and JavaScript has both.

5
00:00:14.838 --> 00:00:20.052
And so what we're gonna be doing is
using some higher-order functions like,

6
00:00:20.052 --> 00:00:23.930
filter map and
reduce to make some delicious sandwiches.

7
00:00:23.930 --> 00:00:25.427
We'll talk about this in a moment.

8
00:00:25.427 --> 00:00:31.394
And understand how their illustrations
of what a higher-order function is, and

9
00:00:31.394 --> 00:00:37.809
what first class functions are, and why
they're useful for functional programming.

10
00:00:39.382 --> 00:00:43.709
&gt;&gt; Anjana Vakil: Okay, so
first-class and higher-order functions.

11
00:00:43.709 --> 00:00:48.425
We say a language has
first-class functions if it

12
00:00:48.425 --> 00:00:53.478
supports us taking a function
that's been defined,

13
00:00:53.478 --> 00:00:57.645
and sending it around
like a regular value.

14
00:00:57.645 --> 00:01:00.062
The same as a string or
a number or what have you.

15
00:01:00.062 --> 00:01:05.251
So if I can pass a function as an input
argument to another function, for

16
00:01:05.251 --> 00:01:11.496
example, that means that the language I'm
working in has first-class functions.

17
00:01:11.496 --> 00:01:15.951
Cuz I can use a function just like
any other value, and guess what?

18
00:01:15.951 --> 00:01:20.598
JavaScript has first-class functions
that you all have already taken

19
00:01:20.598 --> 00:01:25.178
advantage of I think, for example,
by writing a callback function.

20
00:01:25.178 --> 00:01:29.316
So when we pass a callback function to,
let's say,

21
00:01:29.316 --> 00:01:33.180
set up an event listener
on an element in the DOM.

22
00:01:33.180 --> 00:01:38.487
We pass in a function that every time
somebody clicks on that button or

23
00:01:38.487 --> 00:01:42.983
what have you,
JavaScript will run that function for us.

24
00:01:42.983 --> 00:01:47.895
So it's taking in the function as a value,
it's not calling the function yet,

25
00:01:47.895 --> 00:01:51.357
it's not handling a click yet
when I attach a listener.

26
00:01:51.357 --> 00:01:55.823
It's just going to remember that function,
put it in its pocket,

27
00:01:55.823 --> 00:01:59.992
save it for later, and
then do whatever it needs to do with it.

28
00:01:59.992 --> 00:02:03.567
Just like a regular value,
like a string or a number.

29
00:02:03.567 --> 00:02:07.322
So you all have already taken advantage
of the fact that JavaScript is

30
00:02:07.322 --> 00:02:09.665
a language with first-class functions.

31
00:02:09.665 --> 00:02:14.963
And when we have a function that operates
on functions that either takes them

32
00:02:14.963 --> 00:02:20.284
as input or returns them as output,
we call that a higher-order function.

33
00:02:20.284 --> 00:02:25.094
It's a function that's like one level
above the function it takes in, or

34
00:02:25.094 --> 00:02:28.284
returns or multiple functions or
what have you.

35
00:02:28.284 --> 00:02:31.083
So higher-order functions
are something that we spend

36
00:02:31.083 --> 00:02:33.822
a lot of time working with
in functional programming,

37
00:02:33.822 --> 00:02:37.233
because everything is a function
in pure functional programming.

38
00:02:37.233 --> 00:02:40.400
And so we're kinda passing around
our functions here and there.

39
00:02:40.400 --> 00:02:44.712
Just like the way that we
passed in a logical operator to

40
00:02:44.712 --> 00:02:49.137
our truth table function earlier,
that sort of thing.

41
00:02:49.137 --> 00:02:53.952
Or the same way that you could define
a function like handle click and

42
00:02:53.952 --> 00:02:58.951
pass it into a bunch of different
calls to add event listener on click.

43
00:02:58.951 --> 00:03:02.473
Okay, so
now in functional programming land,

44
00:03:02.473 --> 00:03:06.874
for example, when we wanna
manipulate an array of values,

45
00:03:06.874 --> 00:03:10.572
do something with it
instead of using iteration,

46
00:03:10.572 --> 00:03:15.079
which we said is taboo in
the functional programming world.

47
00:03:15.079 --> 00:03:18.776
Because it has state,
and state is dangerous,

48
00:03:18.776 --> 00:03:22.294
unpredictable, gives me headaches, etc.

49
00:03:22.294 --> 00:03:26.711
We are going to exercise
our newly found skills with

50
00:03:26.711 --> 00:03:31.752
recursion to use functions like map,
reduce and filter.

51
00:03:31.752 --> 00:03:36.379
Which you might be familiar
with because they're also

52
00:03:36.379 --> 00:03:39.809
built in methods on JavaScript arrays.

53
00:03:39.809 --> 00:03:42.697
But instead of using
those built in methods,

54
00:03:42.697 --> 00:03:45.894
we're gonna re-implement
them functionally.

55
00:03:45.894 --> 00:03:48.368
Okay, so map, reduce and filter,

56
00:03:48.368 --> 00:03:52.910
have folks worked with JavaScript
array.map.filter, yeah.

57
00:03:52.910 --> 00:03:57.652
Okay, great, so my favorite way of
thinking about filter, map, and reduce and

58
00:03:57.652 --> 00:03:58.504
what they do.

59
00:03:58.504 --> 00:04:02.734
And illustrating this is a graphic that
someone else, I can't take credit for

60
00:04:02.734 --> 00:04:06.259
this, I just adapted it,
made called the MapReduce sandwich and

61
00:04:06.259 --> 00:04:07.626
I just added the filter.

62
00:04:07.626 --> 00:04:12.768
So filter, map, reduce is these
three functions all take in,

63
00:04:12.768 --> 00:04:19.090
they're all higher order functions,
they all receive a function as input.

64
00:04:19.090 --> 00:04:23.691
And they all apply that function
to elements in an array, but

65
00:04:23.691 --> 00:04:25.775
they do different things.

66
00:04:25.775 --> 00:04:31.537
So filter takes in a function that
we call a predicate function.

67
00:04:31.537 --> 00:04:35.815
Which means,
the predicate function is going to

68
00:04:35.815 --> 00:04:39.780
receive a single element from the array,
and

69
00:04:39.780 --> 00:04:45.222
it's going to return a Boolean value,
either true or false.

70
00:04:45.222 --> 00:04:50.893
So for example, let's say I have
an array of possible sandwich

71
00:04:50.893 --> 00:04:56.243
ingredients here, and
I give a filter a predicate function

72
00:04:56.243 --> 00:05:01.382
like Anjana wants in her sandwich,
this thing, right?

73
00:05:01.382 --> 00:05:05.016
Or Anjana thinks this is tasty,
or Anjana has this at home and

74
00:05:05.016 --> 00:05:09.245
doesn't need to go to the grocery store,
that sort of thing, right?

75
00:05:09.245 --> 00:05:11.684
So for each element in the array,

76
00:05:11.684 --> 00:05:17.622
filter is then gonna call that function on
the element and find out true or false.

77
00:05:17.622 --> 00:05:22.020
And then for the elements that return
true, they pass the filter and for

78
00:05:22.020 --> 00:05:25.559
the elements that return false,
they are filtered out.

79
00:05:25.559 --> 00:05:30.582
So, for example, I can give it
this array of ingredients and

80
00:05:30.582 --> 00:05:36.096
say Anjana likes X and it will filter out,
let's say cucumbers and

81
00:05:36.096 --> 00:05:39.762
onions, even though that's not factual.

82
00:05:39.762 --> 00:05:42.790
I do both of those things, but
whatever, for the sake of example.

83
00:05:42.790 --> 00:05:47.008
And it's going to give us a shorter array,
essentially, now it might be the same

84
00:05:47.008 --> 00:05:50.358
length, but it's certainly not
gonna have anything new in it,

85
00:05:50.358 --> 00:05:53.168
at most,
can have everything in the original array.

86
00:05:53.168 --> 00:05:58.943
Then, if we take that array of
carefully filtered ingredients,

87
00:05:58.943 --> 00:06:01.778
and pass it to the map function,

88
00:06:01.778 --> 00:06:06.608
we are also going to get a new array out,
but this time,

89
00:06:06.608 --> 00:06:11.965
we're going to transform each
of the elements in the array.

90
00:06:11.965 --> 00:06:15.852
So map is gonna take in a function,
but unlike filter, it's not gonna be

91
00:06:15.852 --> 00:06:19.823
a predicate function that takes a value
and always returns true or false.

92
00:06:19.823 --> 00:06:24.339
Instead, map is gonna take something more
like a transform function that takes in

93
00:06:24.339 --> 00:06:26.504
a value and returns a different value.

94
00:06:26.504 --> 00:06:29.874
It might be the same as the original,
it might not, depends on the function.

95
00:06:29.874 --> 00:06:34.243
So, for example, I could pass
in the value of chop up to map,

96
00:06:34.243 --> 00:06:39.750
as a function that takes a thing and
chops it up and returns a bunch of slices.

97
00:06:39.750 --> 00:06:43.481
And map is gonna call that on
every element in my array, and

98
00:06:43.481 --> 00:06:46.999
it's gonna return an array
of all the chopped things.

99
00:06:46.999 --> 00:06:51.726
So bread becomes chopped bread,
tomato becomes chopped tomato, etc.

100
00:06:51.726 --> 00:06:57.133
Okay, so far, hopefully this is a sort
of review, cuz these are often a regular

101
00:06:57.133 --> 00:07:03.046
part of our day to day JavaScript lives,
calling array.filter, array.map, etc.

102
00:07:03.046 --> 00:07:09.056
Reduce is also in there,
have folks work with reduce also?

103
00:07:09.056 --> 00:07:09.608
&gt;&gt; Speaker 2: Yeah.

104
00:07:09.608 --> 00:07:10.924
&gt;&gt; Anjana Vakil: A little bit, yeah.

105
00:07:10.924 --> 00:07:16.301
Okay, some folks are big fans, others
I'm seeing a little more hesitation,

106
00:07:16.301 --> 00:07:20.943
but it's a little bit different
because instead of filter and map,

107
00:07:20.943 --> 00:07:23.647
they take an array and return an array.

108
00:07:23.647 --> 00:07:28.675
And reduce takes an array, but
it returns a single value,

109
00:07:28.675 --> 00:07:35.565
essentially, it reduces an array of
a bunch of stuff, reduces it to one thing.

110
00:07:35.565 --> 00:07:41.206
And so the type of function that reduce
takes in is called a reducer, cleverly.

111
00:07:41.206 --> 00:07:46.170
And this is kind of
a special type of function

112
00:07:46.170 --> 00:07:50.731
that basically is gonna get two things,

113
00:07:50.731 --> 00:07:55.439
sort of the reduced value I already know.

114
00:07:55.439 --> 00:07:59.562
And the new element I wanna
add to that reduction, and

115
00:07:59.562 --> 00:08:04.063
it's going to apply the reducer
to return a single thing.

116
00:08:04.063 --> 00:08:09.047
So for example, let's say I have
a reducer function called stack or

117
00:08:09.047 --> 00:08:11.243
layer, layer these things.

118
00:08:11.243 --> 00:08:14.998
And what that's gonna do is,
if I give it bread and peppers,

119
00:08:14.998 --> 00:08:17.883
it's gonna layer
the peppers into the bread.

120
00:08:17.883 --> 00:08:21.571
And so what this is gonna do is,
it's gonna keep applying to each of these

121
00:08:21.571 --> 00:08:25.742
elements successively in the array, and
it's gonna keep layering them one on top

122
00:08:25.742 --> 00:08:28.543
of the other on top of
the other until we've finished.

123
00:08:28.543 --> 00:08:33.364
And we have one delicious
multi-layer sandwich to

124
00:08:33.364 --> 00:08:37.859
chow down on,
after all of our hard brain work.

