WEBVTT

1
00:00:00.000 --> 00:00:04.089
If we go through, and we have just
a note on this tutorial kit set up here,

2
00:00:04.089 --> 00:00:08.338
there's a kind of drop-down at the top
where you can see all of the course.

3
00:00:08.338 --> 00:00:12.949
And then you'll have these little left and
right buttons to go through the sections.

4
00:00:12.949 --> 00:00:17.116
So we discussed pure functions,
and just to recap,

5
00:00:17.116 --> 00:00:23.000
there are essentially two defining
characteristics of a pure function.

6
00:00:23.000 --> 00:00:28.063
It does not do anything besides
return its return value,

7
00:00:28.063 --> 00:00:33.761
meaning it has no side effects,
like logging to the console, or

8
00:00:33.761 --> 00:00:39.787
maybe writing to a file, or
posting something to an HTTP endpoint.

9
00:00:39.787 --> 00:00:42.170
What have you.

10
00:00:42.170 --> 00:00:44.406
It also is deterministic,

11
00:00:44.406 --> 00:00:50.152
which is another way of saying it
only depends on its input arguments.

12
00:00:50.152 --> 00:00:53.392
So if it depends on some
other state of the world,

13
00:00:53.392 --> 00:00:58.293
like the weather outside the time of day,
it is what happens to be the value

14
00:00:58.293 --> 00:01:01.708
of a certain variable at
this point in the program.

15
00:01:01.708 --> 00:01:06.068
Then that means, like we said before in
our impure greet function, I can call

16
00:01:06.068 --> 00:01:10.849
the function multiple times with the same
inputs and I might get different outputs.

17
00:01:10.849 --> 00:01:13.832
That means it's a non
deterministic function.

18
00:01:13.832 --> 00:01:14.910
In other words,

19
00:01:14.910 --> 00:01:20.146
I can't predict what the output of the
function is gonna be just from its inputs.

20
00:01:20.146 --> 00:01:24.250
So that is not a pure function, and
what we want in pure functions is for

21
00:01:24.250 --> 00:01:26.416
them to be 100% deterministic.

22
00:01:26.416 --> 00:01:29.607
If I call this function a million
times on a million days,

23
00:01:29.607 --> 00:01:32.008
is that even possible in a human lifetime?

24
00:01:32.008 --> 00:01:37.482
[LAUGH] with the same input,
I will always get the same output, okay?

25
00:01:37.482 --> 00:01:39.941
So we are going to take
these considerations.

26
00:01:39.941 --> 00:01:47.695
And use them to work through a little
reading exercise, essentially.

27
00:01:47.695 --> 00:01:54.761
So in this next section, pure or not,
you've got a little function file here,

28
00:01:54.761 --> 00:02:00.046
pure or not JS, which has a bunch
of little and some of them.

29
00:02:00.046 --> 00:02:03.649
Different types of functions in here.

30
00:02:03.649 --> 00:02:08.495
And your mission should you choose to
accept it is to read through these and

31
00:02:08.495 --> 00:02:13.734
then in the comments, think through and
decide whether each function is pure or

32
00:02:13.734 --> 00:02:18.528
not, and just write for yourself,
mostly a few words about why that is.

33
00:02:23.619 --> 00:02:28.485
&gt;&gt; Anjana Vakil: All righty, so I am going
to do to commit a sin of teaching right

34
00:02:28.485 --> 00:02:34.099
now where I am going to do something
that I want you to know is possible but

35
00:02:34.099 --> 00:02:36.643
I do not want you to do right now.

36
00:02:36.643 --> 00:02:40.496
Okay, you will notice that the little
solve button up in the right corner.

37
00:02:40.496 --> 00:02:45.399
Don't click it cuz it will replace
what you've written in your editor

38
00:02:45.399 --> 00:02:47.487
with my reference solution.

39
00:02:47.487 --> 00:02:51.293
So this is gonna become a little bit
more useful as we work with actually

40
00:02:51.293 --> 00:02:52.722
executing code samples.

41
00:02:52.722 --> 00:02:56.176
But right now I'm gonna click it so
you can see my answers and

42
00:02:56.176 --> 00:02:58.190
then we will discuss and compare.

43
00:02:58.190 --> 00:02:59.483
Sound good?

44
00:02:59.483 --> 00:03:02.211
So there are some spoilers, but

45
00:03:02.211 --> 00:03:07.477
let's go through these functions
one at a time, so get time.

46
00:03:07.477 --> 00:03:11.976
Hopefully everyone is on the same page,
so this function is not pure, yeah,

47
00:03:11.976 --> 00:03:13.717
is this what folks have said?

48
00:03:13.717 --> 00:03:17.050
Okay, can anybody tell me
why they thought so yeah.

49
00:03:17.050 --> 00:03:17.889
&gt;&gt; Speaker 2: It's not deterministic.

50
00:03:17.889 --> 00:03:22.111
&gt;&gt; Anjana Vakil: Non deterministic
if I call it a different times,

51
00:03:22.111 --> 00:03:26.444
I will get a different time
because it's the time.

52
00:03:26.444 --> 00:03:30.766
Okay, how about compare date strings?

53
00:03:30.766 --> 00:03:32.785
What about this one?

54
00:03:32.785 --> 00:03:36.568
Do we agree that it is,
as I labeled it, pure?

55
00:03:36.568 --> 00:03:42.515
Okay, now in this case, is there anything?

56
00:03:42.515 --> 00:03:43.494
Did anybody have a different answer?

57
00:03:43.494 --> 00:03:48.531
Did anybody have any question marks
around, wonderings about this one?

58
00:03:48.531 --> 00:03:52.349
Because there is one thing
that's a little eyebrow

59
00:03:52.349 --> 00:03:56.479
raising in this function,
&gt;&gt; Speaker 3: I assume you have to rely on

60
00:03:56.479 --> 00:04:00.735
the fact that day would be
purely functional as well.

61
00:04:00.735 --> 00:04:04.908
&gt;&gt; Anjana Vakil: So date, this date
function, which here, if we notice,

62
00:04:04.908 --> 00:04:07.220
is not passed in as an argument.

63
00:04:07.220 --> 00:04:08.714
So that is something
outside of the function.

64
00:04:08.714 --> 00:04:11.461
But this is a built-in in the language.

65
00:04:11.461 --> 00:04:16.409
So we can be pretty reasonably sure
it's not gonna change between lines

66
00:04:16.409 --> 00:04:17.821
of code execution.

67
00:04:17.821 --> 00:04:20.569
And we have to know whether or not.

68
00:04:20.569 --> 00:04:21.861
We have to know its behavior.

69
00:04:21.861 --> 00:04:23.125
We have to know whether or

70
00:04:23.125 --> 00:04:27.052
not this is going to always give me the
same result if I pass in the same string.

71
00:04:27.052 --> 00:04:29.816
And in this case, it will.

72
00:04:29.816 --> 00:04:34.215
So there are some asterisks on
the never look at anything else in

73
00:04:34.215 --> 00:04:38.033
the rest of the world that I said before,
for example,

74
00:04:38.033 --> 00:04:41.519
built ins are something
that we'll be using, and

75
00:04:41.519 --> 00:04:46.431
there's some more in the rest of this,
right, as we'll go through.

76
00:04:46.431 --> 00:04:53.714
The link on the on the side indicates
MDN is a web developer's best friend.

77
00:04:53.714 --> 00:04:58.906
And so if we wanna find out what
a particular built in does, we can

78
00:04:58.906 --> 00:05:05.369
go to MDN to check out if it's going to
be a deterministic pure operation or not.

79
00:05:05.369 --> 00:05:10.588
Cool, all righty how about string to JSON?

80
00:05:10.588 --> 00:05:11.486
Are we all on the same page?

81
00:05:11.486 --> 00:05:14.666
This one is similarly pure.

82
00:05:14.666 --> 00:05:19.734
Again, we have that JSON built in, but
we can rely on it being predictable.

83
00:05:19.734 --> 00:05:25.218
So, sweet, bow about file to
JSON I'm seeing thumbs down.

84
00:05:25.218 --> 00:05:28.110
I am seeing disgusted faces.

85
00:05:28.110 --> 00:05:33.300
[LAUGH] can anybody explain
what is not pure about this?

86
00:05:36.894 --> 00:05:40.576
&gt;&gt; Anjana Vakil: File to JSON?

87
00:05:40.576 --> 00:05:43.807
&gt;&gt; Speaker 4: It depends
on a file that's outside?

88
00:05:43.807 --> 00:05:46.829
&gt;&gt; Anjana Vakil: It depends on
something outside of the function.

89
00:05:46.829 --> 00:05:49.205
This file that I'm
looking up by file name,

90
00:05:49.205 --> 00:05:52.559
anything could happen to that
between runs to this function.

91
00:05:52.559 --> 00:05:58.181
So if I run it today, and
then tonight my coworker edits the file.

92
00:05:58.181 --> 00:06:01.545
Cool, and then tomorrow I run it again,
expecting the same output,

93
00:06:01.545 --> 00:06:02.597
I will be very upset.

94
00:06:02.597 --> 00:06:06.474
So this is what we want to avoid
by not doing things like this.

95
00:06:06.474 --> 00:06:11.303
And we'll talk about momentarily
how we actually do anything [LAUGH]

96
00:06:11.303 --> 00:06:13.429
when we can't do this stuff.

97
00:06:13.429 --> 00:06:17.812
Okay, add pretty pure,

98
00:06:17.812 --> 00:06:24.081
pretty simple sum question marks.

99
00:06:24.081 --> 00:06:25.579
So I'm going to put
an asterisk on this one.

100
00:06:25.579 --> 00:06:31.223
Did anybody have a different
answer to some here?

101
00:06:31.223 --> 00:06:34.075
Now, I am saying this is impure, but

102
00:06:34.075 --> 00:06:39.227
there is an asterisk on that because
we're gonnna talk a little bit

103
00:06:39.227 --> 00:06:44.486
later about how to work with data
that we don't want to ever change.

104
00:06:44.486 --> 00:06:51.958
But in JavaScript, by default,
&gt;&gt; Anjana Vakil: Even

105
00:06:51.958 --> 00:06:57.115
though I'm taking in this
num array as the argument,

106
00:06:57.115 --> 00:07:00.333
this function is still not pure.

107
00:07:00.333 --> 00:07:02.464
Because it's not
necessarily deterministic.

108
00:07:02.464 --> 00:07:06.773
Can anybody help me explain why?

109
00:07:06.773 --> 00:07:09.672
Why might this not be deterministic?

110
00:07:09.672 --> 00:07:13.556
What could happen that could
ruin our functional purity here?

111
00:07:13.556 --> 00:07:19.069
The thing is, this array, even though it's
being passed in, and I'm looking at it,

112
00:07:19.069 --> 00:07:24.369
arrays are something that my coworker over
on the other team can mess with, right?

113
00:07:24.369 --> 00:07:27.705
Arrays are what we call
mutable in JavaScript.

114
00:07:27.705 --> 00:07:30.243
So if I'm expecting this function

115
00:07:30.243 --> 00:07:34.100
to return the same result
tomorrow as it does today.

116
00:07:34.100 --> 00:07:39.631
But then it turns out that my coworker
pushed a whole bunch of new values

117
00:07:39.631 --> 00:07:44.881
to that array, even though I'm
passing in the same array object,

118
00:07:44.881 --> 00:07:47.349
I might get a different value.

119
00:07:47.349 --> 00:07:48.689
Now that's a gotcha.

120
00:07:48.689 --> 00:07:51.364
So there's a little tricky one.

121
00:07:51.364 --> 00:07:56.158
I'm asking you, but
I think that if we can force ourselves to

122
00:07:56.158 --> 00:08:00.012
work with arrays that we
know will never change,

123
00:08:00.012 --> 00:08:04.254
which we will talk about how
to do later in the course.

124
00:08:04.254 --> 00:08:07.363
Then we could consider
this a pure function.

125
00:08:07.363 --> 00:08:12.573
Logical XOR,
this is a logical operator exclusive or

126
00:08:12.573 --> 00:08:17.681
we got a little arrow fat
arrow syntax here going on.

127
00:08:17.681 --> 00:08:18.988
But that doesn't change the purity.

128
00:08:18.988 --> 00:08:24.745
And as we can see, it's a pretty
simple series of Boolean evaluations.

129
00:08:24.745 --> 00:08:28.495
So does everybody agree with
me that this is a pure one?

130
00:08:28.495 --> 00:08:32.000
Cool, truth table?

131
00:08:32.000 --> 00:08:37.852
Anybody see anything weird going on in
here that I just said was a bad idea?

132
00:08:37.852 --> 00:08:41.665
[LAUGH]
&gt;&gt; Speaker 5: Arrays.

133
00:08:41.665 --> 00:08:43.570
&gt;&gt; Anjana Vakil: Yeah, so
we got arrays going on and

134
00:08:43.570 --> 00:08:45.623
we got this push operation, right?

135
00:08:45.623 --> 00:08:50.912
Which is changes the actual array.

136
00:08:50.912 --> 00:08:52.043
We're pushing new values to it.

137
00:08:52.043 --> 00:08:55.758
However, all of that is happening
inside of the function.

138
00:08:55.758 --> 00:09:00.654
So this isn't something that's gonna
be giving us different results at

139
00:09:00.654 --> 00:09:01.944
different times.

140
00:09:01.944 --> 00:09:07.278
So we can have in the JavaScript case,
not in languages that enforce functional

141
00:09:07.278 --> 00:09:12.453
purity, but in JavaScript which does
not force you to write pure functions,

142
00:09:12.453 --> 00:09:15.973
you can have a pure function
that is deterministic.

143
00:09:15.973 --> 00:09:20.829
And has no side effects, that contains
less functional things like mutation,

144
00:09:20.829 --> 00:09:25.685
but as long as we're wrapping it up in
the purity of the functional definition,

145
00:09:25.685 --> 00:09:28.963
we can still be productive
functional programmers.

146
00:09:28.963 --> 00:09:33.379
So this is what I think is awesome
about doing functional programming in

147
00:09:33.379 --> 00:09:34.271
JavaScript.

148
00:09:34.271 --> 00:09:38.191
We don't have to go 100%,
it's not all or nothing.

149
00:09:38.191 --> 00:09:42.135
We can start functionalizing
our code little by little,

150
00:09:42.135 --> 00:09:47.065
wrapping things up to make sure that
if we're doing any impure things,

151
00:09:47.065 --> 00:09:52.760
they're at least happening in the safe,
little sandbox inside of the function.

152
00:09:52.760 --> 00:09:56.463
And we'll be talking more
about that in one moment.

153
00:09:56.463 --> 00:10:01.626
Okay, now what about this one,
the XOR truth table

154
00:10:01.626 --> 00:10:07.044
that uses our XOR and
our truth table to do something.

155
00:10:07.044 --> 00:10:09.167
Why is this not a pure function?

156
00:10:09.167 --> 00:10:11.518
&gt;&gt; Speaker 6: Log into the console.

157
00:10:11.518 --> 00:10:12.250
&gt;&gt; Anjana Vakil: 110 into the console.

158
00:10:12.250 --> 00:10:13.380
We already saw it side effects.

159
00:10:13.380 --> 00:10:17.784
Now, if I were returning
a string representing the value

160
00:10:17.784 --> 00:10:22.570
of the truth table itself,
that would be a different matter.

161
00:10:22.570 --> 00:10:26.586
But logging to the console, even though
this is gonna do the exact same thing

162
00:10:26.586 --> 00:10:30.310
every time I run it, unless somebody
replaces, redefines console.

163
00:10:30.310 --> 00:10:36.341
Or whatever, which, again, JavaScript
doesn't force us to do functional things,

164
00:10:36.341 --> 00:10:40.141
we are going to be getting
the same output every time but

165
00:10:40.141 --> 00:10:43.959
it is an effect on the world,
and that is not pure cool.

166
00:10:43.959 --> 00:10:48.895
Okay, now we're getting into
a little bit more realistic code.

167
00:10:48.895 --> 00:10:55.866
So some of this is is actual,
like real world code from GitHub.

168
00:10:55.866 --> 00:10:58.445
And again, we're using some built ins,
or some things that are.

169
00:10:58.445 --> 00:11:04.213
Kind of not passed into the functions,
like encode URI component.

170
00:11:04.213 --> 00:11:09.296
So, we might want to refer
to our good friend MDN

171
00:11:09.296 --> 00:11:14.250
to check on any of that,
but when we look at this

172
00:11:14.250 --> 00:11:19.482
encode string, and
feel free to check my facts.

173
00:11:19.482 --> 00:11:24.153
But encodeuri component is
a pure deterministic function

174
00:11:24.153 --> 00:11:28.166
that's always going to
return the same encoded.

175
00:11:31.960 --> 00:11:33.633
&gt;&gt; Anjana Vakil: String based
on the same input string or

176
00:11:33.633 --> 00:11:35.059
based on its given input string.

177
00:11:35.059 --> 00:11:41.022
So in this case, we are using a pure
function inside of our function and

178
00:11:41.022 --> 00:11:44.472
doing nothing else, so we have purity.

179
00:11:46.800 --> 00:11:51.222
&gt;&gt; Anjana Vakil: Now we have encodeArray,
which with that same asterisk

180
00:11:51.222 --> 00:11:56.023
similar to before,
where we're passing in an array value,

181
00:11:56.023 --> 00:11:59.334
and then we're doing something with it.

182
00:11:59.334 --> 00:12:06.458
We're not changing it, But
my coworker might be in some other code.

183
00:12:06.458 --> 00:12:07.392
That's part of this.

184
00:12:07.392 --> 00:12:10.632
So that's the gotcha here.

185
00:12:10.632 --> 00:12:13.197
And then we come to
the last one in code value.

186
00:12:13.197 --> 00:12:15.562
So did folks think this was pure, impure?

187
00:12:15.562 --> 00:12:19.503
I thought it was a zoom here,

188
00:12:19.503 --> 00:12:26.740
perhaps you can help me
understand your reasoning.

189
00:12:26.740 --> 00:12:30.838
If you got the same answer, yep,
&gt;&gt; Speaker 7: It's calling encode array

190
00:12:30.838 --> 00:12:32.900
which is above it,
&gt;&gt; Anjana Vakil: Bingo, so

191
00:12:32.900 --> 00:12:37.859
encode array we just said with that,
gotcha of arrays being mutable

192
00:12:37.859 --> 00:12:42.048
in JavaScript and
we could consider an impure function.

193
00:12:42.048 --> 00:12:45.377
And so when we use an impure function,

194
00:12:45.377 --> 00:12:50.380
it kind of infects whatever
function we're using it in.

195
00:12:50.380 --> 00:12:56.236
So this encode value is infected
by the impurity of ENCODE array,

196
00:12:56.236 --> 00:12:59.972
and therefore also becomes impure Here.

197
00:12:59.972 --> 00:13:05.036
So one little impurity is
enough to ruin the impurity

198
00:13:05.036 --> 00:13:08.844
of an entire function or program even.

199
00:13:08.844 --> 00:13:10.966
And that's a challenge, right?

200
00:13:10.966 --> 00:13:14.828
How do we do real things when
we can't log to the console,

201
00:13:14.828 --> 00:13:19.586
[LAUGH] we can't write the files,
we can't read files, [LAUGH] we can.

202
00:13:19.586 --> 00:13:23.640
Can't make fetch requests like,
what are we supposed to do?

203
00:13:23.640 --> 00:13:28.182
And that's perhaps one of the major like?

204
00:13:28.182 --> 00:13:30.490
We need to wrap our heads around
as functional programmers.

