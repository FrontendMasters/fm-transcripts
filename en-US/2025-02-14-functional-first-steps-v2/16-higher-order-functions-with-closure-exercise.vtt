WEBVTT

1
00:00:00.000 --> 00:00:01.569
&gt;&gt; Anjana Vakil: So in our next exercise,

2
00:00:01.569 --> 00:00:04.424
we are going to revisit
our diamond pattern.

3
00:00:04.424 --> 00:00:09.139
And this time we're not gonna ask,
[LAUGH] we're just gonna test it,

4
00:00:09.139 --> 00:00:13.874
cuz we don't need to visually inspect
the result of a pure function.

5
00:00:13.874 --> 00:00:18.159
We know if we give it the same inputs,
it's always gonna give us the same output.

6
00:00:18.159 --> 00:00:21.682
So we already figured out
our impure rendering bit.

7
00:00:21.682 --> 00:00:24.446
We don't care about that anymore,
that's on the outer edge,

8
00:00:24.446 --> 00:00:26.229
we don't need to actually see the that.

9
00:00:26.229 --> 00:00:28.854
We just need to make sure
the computer verifies it is correct.

10
00:00:28.854 --> 00:00:32.841
So in this case we're just
running some tests, and

11
00:00:32.841 --> 00:00:37.302
these tests are using a couple
of new pattern functions.

12
00:00:37.302 --> 00:00:42.731
So, we have our diamond pattern,
which takes in two different colors,

13
00:00:42.731 --> 00:00:46.914
maybe different, but
two color arguments and a width.

14
00:00:46.914 --> 00:00:51.405
And what we're gonna do here,

15
00:00:51.405 --> 00:00:56.415
is use closure to define new higher

16
00:00:56.415 --> 00:01:04.547
order functions that lock in
some of the values, okay?

17
00:01:04.547 --> 00:01:09.976
So, for example,
I wanna be able to get a monotone pattern.

18
00:01:09.976 --> 00:01:14.373
This is a partial application
of our diamond pattern.

19
00:01:14.373 --> 00:01:20.865
Purple pattern is partially applying
values to the diamond pattern thing.

20
00:01:20.865 --> 00:01:23.363
In this case, it's locking in color1.

21
00:01:23.363 --> 00:01:25.228
Is monotone a good name for that?

22
00:01:25.228 --> 00:01:26.836
Probably not, but bear with me.

23
00:01:26.836 --> 00:01:30.569
Okay, so similarly,
we're gonna have a fixed width pattern,

24
00:01:30.569 --> 00:01:33.344
which is gonna lock in
the width value instead.

25
00:01:33.344 --> 00:01:36.852
And then we're gonna have one
that makes a monotone and

26
00:01:36.852 --> 00:01:39.833
fixed width pattern that
locks in two values.

27
00:01:39.833 --> 00:01:43.199
So, your job is to make the tests pass,

28
00:01:43.199 --> 00:01:49.016
I've already kind of called some
of these make pattern functions,

29
00:01:49.016 --> 00:01:54.627
but your job is to define those functions,
and make sure that they

30
00:01:54.627 --> 00:02:01.592
return functions that have those given
values locked in to the diamond pattern.

31
00:02:01.592 --> 00:02:06.910
Let's take a moment and
stretch our functional muscles.

32
00:02:13.509 --> 00:02:18.618
&gt;&gt; Anjana Vakil: In make monotone pattern,
we want to return a function.

33
00:02:18.618 --> 00:02:22.362
So I'm gonna start you out with,

34
00:02:22.362 --> 00:02:27.985
not anything useful, but
a little scaffolding.

35
00:02:27.985 --> 00:02:32.410
This function,
what arguments is it gonna take?

36
00:02:32.410 --> 00:02:35.962
&gt;&gt; Speaker 2: Color1 and width.

37
00:02:35.962 --> 00:02:40.360
&gt;&gt; Anjana Vakil: It's gonna
take the rest of the stuff.

38
00:02:40.360 --> 00:02:44.465
So this is gonna take in a color1,

39
00:02:44.465 --> 00:02:49.288
and a width, and it's going to return?

40
00:02:49.288 --> 00:02:51.489
&gt;&gt; Speaker 3: Diamond pattern.

41
00:02:51.489 --> 00:02:57.130
&gt;&gt; Anjana Vakil: The application
of diamond pattern to color1,

42
00:02:57.130 --> 00:03:00.570
but also our closed over value

43
00:03:00.570 --> 00:03:05.799
color2,
&gt;&gt; Anjana Vakil: That is not

44
00:03:05.799 --> 00:03:12.713
one of the arguments here, cuz it's locked
in by from our outer scope and our width.

45
00:03:12.713 --> 00:03:17.425
A few of the tests are passing,
seems that the failures

46
00:03:17.425 --> 00:03:22.560
are related to the rest of our functions,
so we are golden.

47
00:03:22.560 --> 00:03:27.662
Let's keep going with
the fixed width pattern.

48
00:03:27.662 --> 00:03:32.934
I'm just gonna
&gt;&gt; Anjana Vakil: Yank, and

49
00:03:32.934 --> 00:03:40.073
how do we need to modify
what we did before?

50
00:03:40.073 --> 00:03:44.505
I know y'all can do this [LAUGH], so
instead of taking in the color1 and

51
00:03:44.505 --> 00:03:47.497
the width, we're going to take in-
&gt;&gt; Speaker 4: Color2.

52
00:03:47.497 --> 00:03:49.131
&gt;&gt; Anjana Vakil: The color2 instead,
but same deal,

53
00:03:49.131 --> 00:03:52.511
we're locking in one of the variables,
it's just changed, which one it is.

54
00:03:52.511 --> 00:03:59.517
This is interesting point, so
I'm using these function keywords,

55
00:03:59.517 --> 00:04:06.402
but we could also write this totally
validly with arrow functions,

56
00:04:06.402 --> 00:04:10.771
and some corrections to our curly braces.

57
00:04:10.771 --> 00:04:13.153
This is a personal choice,

58
00:04:13.153 --> 00:04:18.539
if you prefer feeling like a fancy
one line code type of thing,

59
00:04:18.539 --> 00:04:23.840
instead of using the function keyword and
the curly braces.

60
00:04:23.840 --> 00:04:26.816
And again, I'm a big fan of error
functions, especially for functional

61
00:04:26.816 --> 00:04:30.276
programming, because they make it really
clear that we're just returning a value.

62
00:04:30.276 --> 00:04:32.082
So we could have written it that way, too.

63
00:04:32.082 --> 00:04:36.511
So let's take this, and
let's try to use the same

64
00:04:36.511 --> 00:04:41.256
principle to make our
monotone fixed width pattern,

65
00:04:41.256 --> 00:04:47.266
which is gonna return a pattern
function that locks in two values and

66
00:04:47.266 --> 00:04:50.440
takes in just the remaining value.

67
00:04:50.440 --> 00:04:55.158
So this is gonna lock in both color2 and
width, and

68
00:04:55.158 --> 00:05:03.081
we're gonna return a function that takes
in only color1 and closes over the others.

69
00:05:04.611 --> 00:05:07.831
&gt;&gt; Anjana Vakil: We have our diamond
pattern, originally, it takes in three

70
00:05:07.831 --> 00:05:12.267
different values, meaning it's a ternary
function, it takes three arguments.

71
00:05:12.267 --> 00:05:17.342
And we've used that to make these
partial application functions,

72
00:05:17.342 --> 00:05:21.971
a monotone pattern, a large pattern,
or a small pattern, or

73
00:05:21.971 --> 00:05:25.638
what have you,
a small monotone pattern, etc.

74
00:05:25.638 --> 00:05:30.877
So those are partially applied
versions of these that lock in those

75
00:05:30.877 --> 00:05:36.127
values that we want to remember,
thanks to the notion of closure.

