WEBVTT

1
00:00:00.249 --> 00:00:04.880
&gt;&gt; Anjana Vakil: Okay, now we're gonna
get a little more fun with our recursion.

2
00:00:04.880 --> 00:00:08.929
So you're gonna see this little Functional
Art Studio, and you have a blank canvas.

3
00:00:08.929 --> 00:00:14.938
And your mission is to implement some
functions up here, which under the hood

4
00:00:14.938 --> 00:00:20.023
this little project is passing
those to that impure render SVG and

5
00:00:20.023 --> 00:00:26.421
the pure get SVG art that we wrote before,
and it's rendering them into the page.

6
00:00:26.421 --> 00:00:31.059
So, as you update this
function here in patterns.js,

7
00:00:31.059 --> 00:00:34.414
I'm gonna call it the diamondPattern,

8
00:00:34.414 --> 00:00:39.063
whatever you put here is going
to get called in art.js.

9
00:00:39.063 --> 00:00:43.993
And in a non-function functional way is
gonna get exported as a global there, but

10
00:00:43.993 --> 00:00:47.710
that is going to then be rendered
on this little mini app here,

11
00:00:47.710 --> 00:00:50.299
which is just running
in a little vite app.

12
00:00:50.299 --> 00:00:53.540
Anyway, you can look at the source
code later if you're so inclined, but

13
00:00:53.540 --> 00:00:55.541
it's basically exactly what we saw before.

14
00:00:55.541 --> 00:00:59.919
We're getting some data about an SVG and

15
00:00:59.919 --> 00:01:05.851
we're attaching that data
to the DOM to visualize it.

16
00:01:05.851 --> 00:01:13.205
Anyway, your task, should you choose to
accept it, is to draw something like this.

17
00:01:13.205 --> 00:01:17.213
So this is a pattern
that involves recursion.

18
00:01:17.213 --> 00:01:20.932
And I called it a diamondPattern, even
though I guess it's squares and diamonds,

19
00:01:20.932 --> 00:01:21.472
whatever.

20
00:01:21.472 --> 00:01:25.896
But the idea is that we want to compute

21
00:01:25.896 --> 00:01:31.179
a string representing
the inner contents of

22
00:01:31.179 --> 00:01:36.190
an SVG that will get rendered to the page.

23
00:01:36.190 --> 00:01:39.021
So for example,

24
00:01:39.021 --> 00:01:44.277
if I do return &lt;rect, x is 0,

25
00:01:44.277 --> 00:01:49.533
and y is 0, and width is 50,

26
00:01:49.533 --> 00:01:53.578
and height is 50, and

27
00:01:53.578 --> 00:01:58.452
the fill is rebeccapurple.

28
00:02:00.762 --> 00:02:03.363
&gt;&gt; Anjana Vakil: Then we
get a purple rectangle.

29
00:02:03.363 --> 00:02:06.496
So this isn't a class about SVG art,
although that is a super

30
00:02:06.496 --> 00:02:10.626
fascinating topic that there are some
good courses on frontend masters about.

31
00:02:10.626 --> 00:02:14.860
I believe Shirley Wu has a course
about data visualization with SVGs.

32
00:02:14.860 --> 00:02:17.441
Anyway, but you can, of course,

33
00:02:17.441 --> 00:02:21.361
use our good friend MDN to
look up the SVG reference.

34
00:02:21.361 --> 00:02:24.104
If you're not used to
working with svg elements,

35
00:02:24.104 --> 00:02:28.808
just using this because instead of canvas
or something, because svg is a declarative

36
00:02:28.808 --> 00:02:31.963
way of describing the pixels
you wanna see on the screen.

37
00:02:31.963 --> 00:02:36.124
Not the pixels, but the elements you want
to see on the screen, whereas, let's say,

38
00:02:36.124 --> 00:02:38.125
using the Canvas API, very imperative.

39
00:02:38.125 --> 00:02:42.366
Anyway, svgs are great,
I'm a fan, what have you.

40
00:02:42.366 --> 00:02:47.261
So you can check out MDN if you need any
help with actually what do we do here?

41
00:02:47.261 --> 00:02:52.020
But spoiler alert, you're basically
just gonna need [LAUGH] rect and

42
00:02:52.020 --> 00:02:54.739
maybe something else is going on here.

43
00:02:54.739 --> 00:02:55.858
I don't know.

44
00:02:55.858 --> 00:02:58.939
So this is a challenge.

45
00:02:58.939 --> 00:03:05.132
Can we write a recursive function
that takes in two colors and

46
00:03:05.132 --> 00:03:10.232
a given width and
returns the string representing

47
00:03:10.232 --> 00:03:16.684
the pattern that I wanna see,
which is these nested diamonds.

48
00:03:19.788 --> 00:03:24.866
&gt;&gt; Anjana Vakil: Instead of hard coding
a rect like this with a fixed width and

49
00:03:24.866 --> 00:03:31.588
a fixed height and a fixed fill, we're
gonna start computing that on the fly.

50
00:03:31.588 --> 00:03:39.313
This is how we would define
a rectangle in CSS, in SVG, sorry.

51
00:03:39.313 --> 00:03:43.595
Why don't we start out
with our base case where,

52
00:03:45.801 --> 00:03:47.068
&gt;&gt; Anjana Vakil: Essentially,

53
00:03:49.454 --> 00:03:50.158
&gt;&gt; Anjana Vakil: The width,

54
00:03:50.158 --> 00:03:52.836
we don't want it to go
any smaller than 20,

55
00:03:52.836 --> 00:03:57.003
cuz that's just gonna look visually
cluttered and we can't have it.

56
00:03:57.003 --> 00:04:02.085
So I've just arbitrarily
set this as the stopping

57
00:04:02.085 --> 00:04:05.839
point of our recursive patterning.

58
00:04:05.839 --> 00:04:10.150
So in the case where
width this less than 20,

59
00:04:10.150 --> 00:04:13.475
let's just return one rectangle.

60
00:04:13.475 --> 00:04:18.508
But let's make sure we return it with
the correct width and the correct color.

61
00:04:18.508 --> 00:04:22.400
And I'm just gonna say
we're gonna with color1.

62
00:04:22.400 --> 00:04:23.947
It can only be one color.

63
00:04:23.947 --> 00:04:25.431
We're gonna give it color1.

64
00:04:25.431 --> 00:04:31.707
So there are a few different ways
that we could compute this string,

65
00:04:31.707 --> 00:04:36.660
but my favorite and
the most declarative way to fill in

66
00:04:36.660 --> 00:04:41.395
a string with a bunch of
other values that you don't

67
00:04:41.395 --> 00:04:46.375
know in advance is a template
literal in JavaScript.

68
00:04:46.375 --> 00:04:52.916
Have folks worked with this where instead
of these regular little single quotes,

69
00:04:52.916 --> 00:04:59.266
we're gonna add backticks around this
string, and then inside of the string,

70
00:04:59.266 --> 00:05:04.138
we can use the dollar sign and
curly braces to inject a value.

71
00:05:04.138 --> 00:05:11.610
So in here, instead of hard coding
the width as 50, I'm gonna pass in?

72
00:05:11.610 --> 00:05:13.666
&gt;&gt; Speaker 2: Width.
&gt;&gt; Anjana Vakil: Width, thank you,

73
00:05:13.666 --> 00:05:14.486
[LAUGH].

74
00:05:14.486 --> 00:05:17.983
And the thing is, it's a rectangle
as far as SVG is concerned, but

75
00:05:17.983 --> 00:05:20.429
it's a square as far as
what we are concerned.

76
00:05:20.429 --> 00:05:25.671
So we're also gonna do the same for
the height, yeah.

77
00:05:25.671 --> 00:05:31.277
And then even though rebeccapurple
is our new favorite CSS color,

78
00:05:31.277 --> 00:05:36.380
we are going to let the user
decide what color they want to be,

79
00:05:36.380 --> 00:05:42.211
cuz they might not appreciate such
aggressive color schemes as I do.

80
00:05:42.211 --> 00:05:46.364
We only have one rectangle to draw,
sorry, you don't get alternating colors,

81
00:05:46.364 --> 00:05:49.125
it's just gonna be one,
and it's gonna be color1.

82
00:05:49.125 --> 00:05:50.466
&gt;&gt; Speaker 3: Quotes?

83
00:05:50.466 --> 00:05:57.800
&gt;&gt; Anjana Vakil: And
quotes around that is a great idea.

84
00:05:57.800 --> 00:06:02.981
Okay, so if folks haven't worked with
this dollar sign curly braces thing,

85
00:06:02.981 --> 00:06:04.344
I don't know what?

86
00:06:04.344 --> 00:06:07.653
Because I'm calling it not width 20.

87
00:06:07.653 --> 00:06:09.101
Let's change that.

88
00:06:11.187 --> 00:06:14.481
&gt;&gt; Anjana Vakil: Okay, so
if I call it width 20,

89
00:06:14.481 --> 00:06:19.676
I get a little tiny green square,
cool, face case.

90
00:06:19.676 --> 00:06:21.716
Now, all we need to do
is the rest of the haul.

91
00:06:21.716 --> 00:06:28.129
Okay, so
I'm going to return not only the color1

92
00:06:28.129 --> 00:06:33.330
with square, but the rest of the stuff.

93
00:06:33.330 --> 00:06:36.136
So that means, to start out,

94
00:06:36.136 --> 00:06:41.541
it maybe looks very similar
to what we did before, okay?

95
00:06:41.541 --> 00:06:45.251
This is gonna be the first
part of our SVG,

96
00:06:45.251 --> 00:06:49.183
it's always gonna be this main big square.

97
00:06:49.183 --> 00:06:51.620
Now I'm gonna move this back to here.

98
00:06:51.620 --> 00:06:57.940
Okay, so,
&gt;&gt; Anjana Vakil: First

99
00:06:57.940 --> 00:07:02.713
we need to draw this layer of the pattern,
if you will.

100
00:07:02.713 --> 00:07:06.911
And then we need to draw the next
smaller layer of the pattern,

101
00:07:06.911 --> 00:07:10.642
and the next smaller layer
is gonna be a smaller width.

102
00:07:10.642 --> 00:07:15.345
That's just basically the hypotenuse
of the half of the two,

103
00:07:15.345 --> 00:07:19.243
anyway, [LAUGH] so
it fits perfectly in the square.

104
00:07:19.243 --> 00:07:20.680
I've already done that for you.

105
00:07:20.680 --> 00:07:23.137
Thank you, built-in Math.SQRT2.

106
00:07:23.137 --> 00:07:31.413
And we're going to compute a new
rectangle of the smaller width,

107
00:07:31.413 --> 00:07:36.228
but we want it to be a different color,

108
00:07:36.228 --> 00:07:40.002
and we want it to be diagonal.

109
00:07:40.002 --> 00:07:45.861
So here I'm going to continue using
my declarative string template here,

110
00:07:45.861 --> 00:07:51.078
and I'm just going to add some space so
we can do some other things.

111
00:07:51.078 --> 00:07:56.759
Now here, if I wanted another

112
00:07:56.759 --> 00:08:02.365
rectangle that is,
&gt;&gt; Anjana Vakil: A very

113
00:08:02.365 --> 00:08:06.786
similar pattern to the one
that I'm currently making,

114
00:08:06.786 --> 00:08:11.393
just with some different values,
I'm gonna want to, and

115
00:08:11.393 --> 00:08:15.546
spoiler alert,
we know this is the recursive case.

116
00:08:15.546 --> 00:08:21.312
I'm gonna want to call a function that's
great at producing patterns like this,

117
00:08:21.312 --> 00:08:22.075
which is?

118
00:08:22.075 --> 00:08:22.899
&gt;&gt; Speaker 3: DiamondPattern.
&gt;&gt; Speaker 4: DiamondPattern.

119
00:08:22.899 --> 00:08:26.291
&gt;&gt; Anjana Vakil: Myself,
diamondPattern, exactly.

120
00:08:26.291 --> 00:08:29.786
Okay, and now the values that I pass
in are gonna be a little different.

121
00:08:29.786 --> 00:08:32.372
So can anybody help me guild this?

122
00:08:32.372 --> 00:08:35.620
At each layer if were thinking about
them as layers of the pattern,

123
00:08:35.620 --> 00:08:37.132
we're gonna flip the colors.

124
00:08:37.132 --> 00:08:39.283
So instead of passing in color1, color2?

125
00:08:39.283 --> 00:08:40.269
&gt;&gt; Speaker 3: Color2, color1.

126
00:08:40.269 --> 00:08:44.021
&gt;&gt; Anjana Vakil: Color2,
color1 [LAUGH] swapsies, and

127
00:08:44.021 --> 00:08:47.228
then instead of passing in width?

128
00:08:47.228 --> 00:08:49.275
&gt;&gt; Speaker 5: Smaller widths.
&gt;&gt; Anjana Vakil: Smaller width.

129
00:08:49.275 --> 00:08:52.380
Bingo, okay, well,
now something's happening,

130
00:08:52.380 --> 00:08:54.593
we've got recursion, we can see it.

131
00:08:54.593 --> 00:08:58.036
They keep getting smaller and smaller and

132
00:08:58.036 --> 00:09:02.177
they keep switching colors,
so that feels good.

133
00:09:02.177 --> 00:09:03.347
&gt;&gt; Speaker 6: Looks
like infinite hall way.

134
00:09:03.347 --> 00:09:07.733
&gt;&gt; Anjana Vakil: It is sort of
giving us three dimensional vibes.

135
00:09:07.733 --> 00:09:12.860
So what we need to start
doing now is rotating them.

136
00:09:12.860 --> 00:09:14.964
And in order to do that,

137
00:09:14.964 --> 00:09:20.980
we can wrap this rect that's gonna
come back from diamondPattern.

138
00:09:20.980 --> 00:09:26.082
So what we'll do is we'll just
go to the element reference,

139
00:09:26.082 --> 00:09:30.883
and you're just gonna have to
trust me that there is this g

140
00:09:30.883 --> 00:09:35.803
element that's kind of the div
that we want from our HTML.

141
00:09:35.803 --> 00:09:37.521
Security net, I don't know,

142
00:09:37.521 --> 00:09:41.685
from how we're used to thinking about
transforming elements on the page,

143
00:09:41.685 --> 00:09:45.342
by, let's say, having a div
wrapper that then is transformed.

144
00:09:45.342 --> 00:09:49.017
We'll do the same with g in here.

145
00:09:49.017 --> 00:09:54.201
So whatever, if we wrap some elements,
some SVG content,

146
00:09:54.201 --> 00:10:00.852
in a g, then whatever attributes we set
on the g are gonna apply to the group.

147
00:10:00.852 --> 00:10:05.206
So we can for example, set a bunch
of properties for multiple things.

148
00:10:05.206 --> 00:10:09.547
Okay, so let's wrap this in a g,
which, by itself,

149
00:10:09.547 --> 00:10:12.835
just like a div, doesn't do anything.

150
00:10:12.835 --> 00:10:18.249
In order to manipulate this g, we can
pass a value to the transform attribute

151
00:10:18.249 --> 00:10:23.338
that uses some of these built-in
transform functions similar to CSS.

152
00:10:23.338 --> 00:10:29.210
So for example, I can rotate it 45 degrees
and now, I mean, it doesn't look right,

153
00:10:29.210 --> 00:10:34.278
but at least we've got one little pointy
thing that looks sort of similar,

154
00:10:34.278 --> 00:10:35.495
so that's cool.

155
00:10:35.495 --> 00:10:40.351
So what I'll also need to
do is keep making sure

156
00:10:40.351 --> 00:10:44.968
that everything is centered essentially.

157
00:10:44.968 --> 00:10:50.274
And because all these SVGs
are gonna start at 0,

158
00:10:50.274 --> 00:10:56.367
0, we're gonna kind of
translate this whole system.

159
00:10:56.367 --> 00:11:01.357
It's gonna get rotated,
but then we also wanna

160
00:11:01.357 --> 00:11:06.359
change the point of 0,0 and
where it starts.

161
00:11:06.359 --> 00:11:10.733
So right now we translated it,
sorry, we rotated it, but 0,

162
00:11:10.733 --> 00:11:14.705
0 is still in the top left corner,
same as it was before.

163
00:11:14.705 --> 00:11:20.639
So instead what I wanna do is take this
point, this top of the diamond thing,

164
00:11:20.639 --> 00:11:25.739
that's a little hard to see cuz
it's on top of the other diamond,

165
00:11:25.739 --> 00:11:29.851
and we wanna move it here to
the middle of the square.

166
00:11:29.851 --> 00:11:33.112
And so I can use a translate for that.

167
00:11:33.112 --> 00:11:37.287
Can anybody help me fill in
my translate operation here?

168
00:11:40.432 --> 00:11:43.623
&gt;&gt; Anjana Vakil: And this is where I'm
gonna need to maybe do a little math.

169
00:11:43.623 --> 00:11:46.702
So I'm gonna add a dollar curlies.

170
00:11:46.702 --> 00:11:49.906
And let's say, for example,
if I translate it to the width,

171
00:11:49.906 --> 00:11:52.072
it pops all the way
over to the other side.

172
00:11:52.072 --> 00:11:53.770
That's also not what I want.

173
00:11:53.770 --> 00:11:54.458
You're halfway there?

174
00:11:54.458 --> 00:11:59.967
Halfway there, so
if I divide the width by 2,

175
00:11:59.967 --> 00:12:05.632
now we're cooking with gas or
pure functions.

176
00:12:05.632 --> 00:12:10.351
So what we've got is a purely

177
00:12:10.351 --> 00:12:15.863
recursive real-world object.

178
00:12:15.863 --> 00:12:19.850
Pixels on the page count as
a real-world object in this sense,

179
00:12:19.850 --> 00:12:23.688
because remember,
before we wrote that impure render SVG,

180
00:12:23.688 --> 00:12:28.354
we wrapped all of that impurity of
actually taking this string that we're

181
00:12:28.354 --> 00:12:32.516
computing here and putting it into
the page and making it pixels.

182
00:12:32.516 --> 00:12:36.684
So what we're doing here is we're
just computing that string,

183
00:12:36.684 --> 00:12:39.939
and we're doing it in
a totally declarative way.

184
00:12:39.939 --> 00:12:43.892
We're saying I wanna a string
that looks like this, and

185
00:12:43.892 --> 00:12:47.012
these are the values I
wanna inject into it.

186
00:12:47.012 --> 00:12:51.205
And in order to get our repetition here,
sure, I could have asked you

187
00:12:51.205 --> 00:12:54.911
to do this with a for loop, but
where would be the fun in that?

188
00:12:54.911 --> 00:12:59.448
So in order to do that repetition of
keep going, keep going, keep going,

189
00:12:59.448 --> 00:13:01.443
keep going, we use recursion.

190
00:13:01.443 --> 00:13:06.754
So this is a simple and
yet, I hope illustrative,

191
00:13:06.754 --> 00:13:11.432
example, [LAUGH],
of kind of how we could use

192
00:13:11.432 --> 00:13:15.985
recursion to make recursive things work in

193
00:13:15.985 --> 00:13:21.800
a declarative way without
having to write a for loop and

194
00:13:21.800 --> 00:13:27.004
keep going through each
of the smaller squares.

