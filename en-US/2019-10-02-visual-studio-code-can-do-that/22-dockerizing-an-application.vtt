WEBVTT

1
00:00:00.480 --> 00:00:03.144
&gt;&gt; Burke Holland: The first time
I heard about docker, I saw,

2
00:00:03.144 --> 00:00:07.321
the presentation from, I think it
was one of the founders of docker.

3
00:00:07.321 --> 00:00:10.376
I think it's the most famous presentation
where he talks about the problem of

4
00:00:10.376 --> 00:00:12.000
shipping apps and containers.

5
00:00:12.000 --> 00:00:16.420
And I watched 30 minutes of it and
thought none of that made any sense to me.

6
00:00:16.420 --> 00:00:21.084
It wasn't until I actually use the docker,
that I understood what it was.

7
00:00:21.084 --> 00:00:25.090
So I wanna give you what's
going to be a rough and

8
00:00:25.090 --> 00:00:29.200
possibly bad analogy, but hopefully will
help you understand what docker does.

9
00:00:29.200 --> 00:00:32.360
When you build an application for Windows.

10
00:00:32.360 --> 00:00:35.540
Most people are probably familiar
with Windows applications.

11
00:00:35.540 --> 00:00:36.660
They have a file extension.

12
00:00:36.660 --> 00:00:37.453
What is it?

13
00:00:37.453 --> 00:00:39.800
&gt;&gt; Class: Exe.
&gt;&gt; Burke Holland: Exe.

14
00:00:39.800 --> 00:00:44.920
When you build an exe,
you take your application and

15
00:00:44.920 --> 00:00:48.360
all the dependencies that your
application needs to run, and

16
00:00:48.360 --> 00:00:53.100
you put them inside of that container,
and that container is called an exe.

17
00:00:53.100 --> 00:00:56.470
And then I can take that container,
and I can give it to you, and

18
00:00:56.470 --> 00:01:00.030
you can double click on it, and
it will run on your machine.

19
00:01:00.030 --> 00:01:02.630
Or you can double click on and
it will run on your machine.

20
00:01:04.680 --> 00:01:07.180
But that's not always worked.

21
00:01:07.180 --> 00:01:10.490
Because sometimes,
you need the dot net framework or

22
00:01:10.490 --> 00:01:12.350
you need some runtime that's not there.

23
00:01:12.350 --> 00:01:16.800
So what docker is essentially,
is it's an exe,

24
00:01:16.800 --> 00:01:19.160
where you can put runtime in it as well.

25
00:01:19.160 --> 00:01:23.249
So imagine if I could take any framework
that you needed java.net or whatever,

26
00:01:23.249 --> 00:01:24.340
I just put it in the exe.

27
00:01:24.340 --> 00:01:27.367
And then when you double clicked on it,
whether you had it installed or not,

28
00:01:27.367 --> 00:01:28.136
it would just run.

29
00:01:28.136 --> 00:01:30.580
You don't have to worry
about your environment.

30
00:01:30.580 --> 00:01:33.000
Everything is contained in the exe.

31
00:01:33.000 --> 00:01:36.360
You also get access to a file system,
so that if you're in the container,

32
00:01:36.360 --> 00:01:39.830
it looks like you're the you're
on a server all by yourself.

33
00:01:39.830 --> 00:01:40.330
You're not.

34
00:01:41.530 --> 00:01:44.550
But you're in a container
which thinks that it is.

35
00:01:44.550 --> 00:01:47.650
So if you're gonna imagine that,
you're writing applications,

36
00:01:47.650 --> 00:01:48.970
putting them in a container.

37
00:01:48.970 --> 00:01:51.330
And it's almost like you're
on a preconfigured server.

38
00:01:51.330 --> 00:01:57.760
And then you're shipping that whole thing
up to wherever it's going to run, okay?

39
00:01:57.760 --> 00:01:59.260
Everybody still with me?

40
00:01:59.260 --> 00:02:01.750
All right, so we wanna take
a look at how that works today.

41
00:02:01.750 --> 00:02:05.450
You're gonna need the docker extension
installed in order to do this,

42
00:02:05.450 --> 00:02:08.199
if I haven't mentioned that yet,
when you install it,

43
00:02:08.199 --> 00:02:14.180
you're going to get this little, panel
explorer view over here to the right.

44
00:02:14.180 --> 00:02:18.090
And let me go ahead and
remove some of these containers.

45
00:02:18.090 --> 00:02:19.130
Actually, I'll leave these running.

46
00:02:19.130 --> 00:02:20.810
We're gonna need these later and
I wanna remove them.

47
00:02:20.810 --> 00:02:22.580
It'll just take us longer to build.

48
00:02:23.750 --> 00:02:25.690
So we have an application here.

49
00:02:25.690 --> 00:02:28.210
I'm gonna open this up
in our start folder.

50
00:02:28.210 --> 00:02:32.130
And the application runs.

51
00:02:32.130 --> 00:02:33.500
It's the one we've been running.

52
00:02:33.500 --> 00:02:36.510
It's a Express application here.

53
00:02:36.510 --> 00:02:37.780
It's the one we've been running all along.

54
00:02:37.780 --> 00:02:41.410
And what we wanna do is we wanna
dockerize this application,

55
00:02:41.410 --> 00:02:44.250
to ship it somewhere so
that it would run somewhere else.

56
00:02:44.250 --> 00:02:50.050
Now in order for this application to run,
we have a couple of dependencies.

57
00:02:50.050 --> 00:02:56.330
One of them is, node, wherever we
ship this, node has to be installed.

58
00:02:56.330 --> 00:02:59.150
Okay, it's not gonna run
very well without node.

59
00:02:59.150 --> 00:03:01.600
And so to dockerize this application,

60
00:03:01.600 --> 00:03:05.350
we need to add configuration
files into it first.

61
00:03:05.350 --> 00:03:08.790
We don't know what those configuration
files are, fortunately for

62
00:03:08.790 --> 00:03:12.000
you, visual studio code does.

63
00:03:12.000 --> 00:03:13.730
So what I'm gonna do is
open the command palette.

64
00:03:14.790 --> 00:03:16.530
I'm gonna say docker.

65
00:03:16.530 --> 00:03:19.410
Add Files,
add docker files to workspace, okay?

66
00:03:20.430 --> 00:03:23.550
When I do that it's gonna ask me which
workspace, and then it wants to know.

67
00:03:25.000 --> 00:03:26.850
What's your application platform?

68
00:03:26.850 --> 00:03:30.000
In other words,
what dependencies do you need?

69
00:03:30.000 --> 00:03:30.970
We're using node.

70
00:03:30.970 --> 00:03:34.551
If we're using Go or Java, it would
pull in a base image for those, but

71
00:03:34.551 --> 00:03:38.032
since we're using node,
it's gonna pull in a base image for node.

72
00:03:38.032 --> 00:03:41.835
I'm gonna select enter,
what port does your app placed on?

73
00:03:41.835 --> 00:03:46.590
3000 it's taken a good educated guess,
and now,

74
00:03:46.590 --> 00:03:48.890
it's created a couple of files for us.

75
00:03:48.890 --> 00:03:54.487
Specifically we have a Dockerfile,a
docker compose,a docker compose debug and

76
00:03:54.487 --> 00:03:55.771
a docker ignore.

77
00:03:55.771 --> 00:03:59.330
Let's just walk through and
start with the files that we have and

78
00:03:59.330 --> 00:04:01.856
look at the way they are built.

79
00:04:01.856 --> 00:04:05.850
If we look at the dockerfile here,
here's what's happening.

80
00:04:05.850 --> 00:04:08.510
It's pulling in a base image.

81
00:04:08.510 --> 00:04:11.420
In other words, what it's gonna do is,
it's gonna go up to docker hub and

82
00:04:11.420 --> 00:04:16.100
it's gonna say give me an image
that contains node, and

83
00:04:16.100 --> 00:04:18.610
it's gonna download that and
pull that down.

84
00:04:18.610 --> 00:04:21.010
Then it's setting some
environment variables here.

85
00:04:23.340 --> 00:04:25.300
Then it's gonna set a work directory.

86
00:04:25.300 --> 00:04:27.930
This is just the directory in
the container where our apps is gonna

87
00:04:27.930 --> 00:04:29.390
be located.

88
00:04:29.390 --> 00:04:32.080
Then it copies in our package.Jason.

89
00:04:32.080 --> 00:04:33.740
Runs npm install.

90
00:04:33.740 --> 00:04:36.764
Copies in the rest of the whole project.

91
00:04:36.764 --> 00:04:41.510
Exposes port 3000, so we can
actually access the application, and

92
00:04:41.510 --> 00:04:44.560
then it runs in PM start and
it actually starts the app.

93
00:04:45.670 --> 00:04:49.500
So, this docker file contains everything
we need to containerize this app.

94
00:04:49.500 --> 00:04:51.460
So let's containerized it.

95
00:04:51.460 --> 00:04:55.570
I'm gonna go ahead and command shift,

96
00:04:55.570 --> 00:04:59.300
control shift,
pete of command palette, docker.

97
00:04:59.300 --> 00:05:02.730
And we're gonna do docker build.

98
00:05:02.730 --> 00:05:05.050
Okay, I'm gonna hit enter.

99
00:05:05.050 --> 00:05:07.617
It's gonna ask us which
project we wanna build,

100
00:05:07.617 --> 00:05:10.509
begin working on a workspace
with multiple projects.

101
00:05:11.800 --> 00:05:13.940
And then it wants to know
what do you wanna call it?

102
00:05:13.940 --> 00:05:15.150
Well let's give it a name.

103
00:05:15.150 --> 00:05:21.750
Let's call it, let's give it
a specific name, frontendmasters-lamp.

104
00:05:21.750 --> 00:05:23.750
And see this latest out here on the end?

105
00:05:23.750 --> 00:05:25.020
This is the tag.

106
00:05:25.020 --> 00:05:26.990
So you can add a version to your image.

107
00:05:26.990 --> 00:05:29.910
And then when you use it or
pull it from somewhere else, you can say,

108
00:05:29.910 --> 00:05:31.970
give me that version of the image.

109
00:05:31.970 --> 00:05:34.010
A lot of times you'll see a latest tag,
and

110
00:05:34.010 --> 00:05:38.380
what that means is this is,
this is the latest version of the image.

111
00:05:38.380 --> 00:05:41.640
And so if you're deploying it somewhere,
and you had automatic or

112
00:05:41.640 --> 00:05:43.200
continuous integration set up, and

113
00:05:43.200 --> 00:05:47.190
you deployed a new latest image, that's
the one that would always be running.

114
00:05:48.350 --> 00:05:51.540
So I'm gonna hit Enter, and
now it's gonna go ahead and

115
00:05:51.540 --> 00:05:55.350
it's going to build this
container which you just did.

116
00:05:55.350 --> 00:05:59.720
Now, mine went faster than yours is gonna
go, because I've all ready pulled down

117
00:05:59.720 --> 00:06:03.120
the base note image and
it's cached on my machine.

118
00:06:03.120 --> 00:06:05.360
But you can see it walking
through the steps here.

119
00:06:05.360 --> 00:06:08.705
It's pulling from code,
setting the environment variables and

120
00:06:08.705 --> 00:06:09.975
we're good to go.

121
00:06:09.975 --> 00:06:11.805
And actually, I think in this one, no,

122
00:06:11.805 --> 00:06:14.505
we don't have any more environment
variables that we need.

123
00:06:14.505 --> 00:06:17.535
So now, where is our container?

124
00:06:17.535 --> 00:06:19.905
Where we have an image rather,
we built an image.

125
00:06:19.905 --> 00:06:21.465
We have an image at the moment.

126
00:06:21.465 --> 00:06:22.895
Where is it?

127
00:06:22.895 --> 00:06:25.772
We come over to our docker extension here.

128
00:06:25.772 --> 00:06:31.110
We have it here, right there, you see it?

129
00:06:31.110 --> 00:06:34.440
And I can expand it and it's right inside.

130
00:06:35.620 --> 00:06:40.350
Now if I was to create a different one,
so let's do this sorry, let's build.

131
00:06:41.560 --> 00:06:43.090
And let's do this.

132
00:06:43.090 --> 00:06:46.460
And let's say instead of latest,
let's say it's 1.1.1.

133
00:06:46.460 --> 00:06:48.520
Go ahead and do that,
it's gonna build it again.

134
00:06:48.520 --> 00:06:50.840
And now look,
both versions are there, right?

135
00:06:50.840 --> 00:06:53.490
So you see how tags work, okay?

136
00:06:53.490 --> 00:06:56.800
Now we wanna run this
image as a container.

137
00:06:57.990 --> 00:07:01.770
To do that,
I'm just gonna right click it and say Run.

138
00:07:03.220 --> 00:07:07.640
And it's gonna run the container, and
you can see, port 3000 is already,

139
00:07:07.640 --> 00:07:09.980
so I need to, okay, let's try.

140
00:07:09.980 --> 00:07:11.210
Where are we now?

141
00:07:11.210 --> 00:07:12.360
Okay, good.

142
00:07:12.360 --> 00:07:13.890
Do anything die, nothing died.

143
00:07:13.890 --> 00:07:15.120
All right, good.

144
00:07:15.120 --> 00:07:15.957
So run.

145
00:07:18.241 --> 00:07:18.920
&gt;&gt; Burke Holland: There we go.

146
00:07:18.920 --> 00:07:20.560
So now it's running.

147
00:07:20.560 --> 00:07:22.547
So the containers running, where is it?

148
00:07:22.547 --> 00:07:25.930
It's up here, right there.

149
00:07:25.930 --> 00:07:27.840
So now it's actually running.

150
00:07:27.840 --> 00:07:31.210
So we can access this thing just
like it was running our own machine.

151
00:07:31.210 --> 00:07:34.180
So I'm gonna come over to Chrome.

152
00:07:34.180 --> 00:07:36.420
Let's go to local host 3000.

153
00:07:36.420 --> 00:07:41.260
And, and [LAUGH] we have a problem.

154
00:07:41.260 --> 00:07:43.210
So now we have a running container.

155
00:07:43.210 --> 00:07:45.370
But there's something wrong with it and
we don't know what, so

156
00:07:45.370 --> 00:07:49.380
what we're gonna do is we're going to
look at the logs for this container or

157
00:07:49.380 --> 00:07:51.360
we're gonna run it interactively.

158
00:07:51.360 --> 00:07:53.260
So what I'm gonna do is,
just, I'm gonna stop it.

159
00:07:53.260 --> 00:07:54.240
I'm gonna stop the container.

160
00:07:54.240 --> 00:07:57.020
And I'm gonna come back to my images.

161
00:07:57.020 --> 00:07:57.840
I'm gonna right click.

162
00:07:57.840 --> 00:07:59.930
I'm gonna say run interactive.

163
00:07:59.930 --> 00:08:02.480
What this is gonna do is,
it's gonna open up an interactive

164
00:08:02.480 --> 00:08:05.920
prompt with the container, so we can see
the things that are going on inside.

165
00:08:05.920 --> 00:08:06.580
So let's do that.

166
00:08:08.422 --> 00:08:09.750
&gt;&gt; Burke Holland: There we go.

167
00:08:09.750 --> 00:08:11.704
So the application is running here.

168
00:08:14.364 --> 00:08:18.445
&gt;&gt; Burke Holland: And let me just make
sure we've exposed, look at that.

169
00:08:20.382 --> 00:08:22.170
&gt;&gt; Burke Holland: I
exposed the wrong port.

170
00:08:22.170 --> 00:08:23.470
So let's change this.

171
00:08:24.750 --> 00:08:27.050
And let's do a rebuild,
let's build our image again.

172
00:08:29.150 --> 00:08:30.310
And let's just do latest.

173
00:08:36.030 --> 00:08:40.280
&gt;&gt; Burke Holland: There we go, and
then you always need to run the image.

174
00:08:41.540 --> 00:08:43.130
Even if it looks like it's
already running up there,

175
00:08:43.130 --> 00:08:44.740
you wanna make sure that
you're running the right one.

176
00:08:46.190 --> 00:08:53.639
And the port's already allocated,
[LAUGH] so let's get rid of that.

177
00:08:53.639 --> 00:08:55.900
All right, and that's in the docker
went down, so it's coming back out.

178
00:08:55.900 --> 00:08:56.690
Let's give it a second here.

179
00:08:56.690 --> 00:09:00.670
The port stuff is a little tricky on
this exercise, but just bear with me.

180
00:09:00.670 --> 00:09:03.520
One of the things about docker
that is a little tricky is that,

181
00:09:03.520 --> 00:09:06.940
you have to map ports from
docker back to your machine, so

182
00:09:06.940 --> 00:09:09.060
that you can actually
access the container.

183
00:09:09.060 --> 00:09:11.970
Otherwise, port 3000 is on your machine.

184
00:09:11.970 --> 00:09:14.070
It's not in the container and
they're not mapped to each other,

185
00:09:14.070 --> 00:09:16.835
and you won't be able to access it.

186
00:09:16.835 --> 00:09:21.790
Alright, we're back [LAUGH] up and
running, let's do this again front end

187
00:09:21.790 --> 00:09:27.074
masters, make sure I don't have anything
running on this port, it look good.

188
00:09:27.074 --> 00:09:29.453
We run latest.

189
00:09:32.629 --> 00:09:34.790
&gt;&gt; Burke Holland: All right, and
come back over and hopefully.

190
00:09:35.940 --> 00:09:38.830
All right, so now we're running
inside of our container, okay?

191
00:09:41.000 --> 00:09:43.530
But we can't really see what's
going on inside of the container.

192
00:09:43.530 --> 00:09:45.400
It's a bit of a black box.

193
00:09:45.400 --> 00:09:48.669
So what we can do here
is we can view logs.

194
00:09:49.750 --> 00:09:52.390
And we can see all the logs that
are coming out of our container.

195
00:09:52.390 --> 00:09:54.390
This is our little server that's running.

196
00:09:54.390 --> 00:09:57.920
And if I do a refresh,
you can see all the logs.

197
00:09:57.920 --> 00:10:01.290
Now remember, I told you that
containers think that they're the only

198
00:10:01.290 --> 00:10:04.840
thing on the operating, they think that
they are an operating system essentially.

199
00:10:04.840 --> 00:10:08.900
So if we wanted to look inside of
this container, we can do that.

200
00:10:08.900 --> 00:10:12.300
We can right click and
say, attach a shell.

201
00:10:12.300 --> 00:10:15.350
And now, we have a command
prompt inside of the container.

202
00:10:16.760 --> 00:10:19.390
See that says user/src/app?

203
00:10:19.390 --> 00:10:24.250
Do you remember in our docker file,
that right there?

204
00:10:24.250 --> 00:10:27.660
Okay, so that's the directory that
we created where our app is running.

205
00:10:27.660 --> 00:10:33.700
If I do ls I can see all of the files
that are inside of this docker container.

206
00:10:33.700 --> 00:10:35.130
It's my project files.

207
00:10:35.130 --> 00:10:36.927
They were copied over, there they are.

208
00:10:36.927 --> 00:10:39.330
Now check this out, watch this.

209
00:10:39.330 --> 00:10:45.870
If I change directories and I go to
the root, look, what does that look like?

210
00:10:45.870 --> 00:10:47.490
The root of a Linux file system,

211
00:10:47.490 --> 00:10:52.660
it thinks that it's on a server all by
itself and it has the whole server.

212
00:10:52.660 --> 00:10:54.040
How does this work?

213
00:10:54.040 --> 00:10:55.342
I have no idea.

214
00:10:55.342 --> 00:10:58.130
&gt;&gt; Class: [LAUGH]
&gt;&gt; Burke Holland: This should not work.

215
00:10:58.130 --> 00:11:01.370
This should not be possible but
it is and it changes everything.

216
00:11:01.370 --> 00:11:04.110
And this is why I'm so
excited about docker and

217
00:11:04.110 --> 00:11:06.190
why it's so important for
us to go over it today

