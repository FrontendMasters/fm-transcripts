WEBVTT

1
00:00:00.100 --> 00:00:02.410
&gt;&gt; Burke Holland: TypeScript
has become very popular.

2
00:00:02.410 --> 00:00:03.390
We haven't done any yet.

3
00:00:03.390 --> 00:00:05.500
We're gonna look at
some a little later on.

4
00:00:05.500 --> 00:00:09.252
However, if you're a JavaScript developer,

5
00:00:09.252 --> 00:00:14.518
you actually may wanna use
TypeScript without using TypeScript.

6
00:00:14.518 --> 00:00:16.458
Let me explain what I mean.

7
00:00:16.458 --> 00:00:21.950
If in this method here, let's say
we had added something like this.

8
00:00:23.748 --> 00:00:31.072
Let's say we'd added a console and
we're gonna log out the color.

9
00:00:31.072 --> 00:00:32.309
&gt;&gt; Speaker 2: Log not blog.

10
00:00:32.309 --> 00:00:34.155
&gt;&gt; [LAUGH]
&gt;&gt; Burke Holland: Right, so

11
00:00:34.155 --> 00:00:36.810
we are now gonna console log this color,
correct?

12
00:00:37.910 --> 00:00:39.600
&gt;&gt; Speaker 2: You have canceled out blog.

13
00:00:39.600 --> 00:00:40.881
&gt;&gt; Burke Holland: Yeah,
we're not gonna console-

14
00:00:40.881 --> 00:00:42.014
&gt;&gt; Speaker 2: Sorry [LAUGH] no-

15
00:00:42.014 --> 00:00:43.800
&gt;&gt; Burke Holland: It's not gonna work.

16
00:00:43.800 --> 00:00:46.910
I wish blog was a command, but it isn't.

17
00:00:46.910 --> 00:00:48.380
So now here's the deal.

18
00:00:48.380 --> 00:00:52.010
The problem is if you had a linter,
the linter would pick this up, but

19
00:00:52.010 --> 00:00:54.660
let's just assume that you
don't have a linter running.

20
00:00:54.660 --> 00:00:58.970
One of the cool things about
TypeScript is that it lints for you.

21
00:00:58.970 --> 00:01:02.920
So you don't actually have to
be using TypeScript to exploit

22
00:01:02.920 --> 00:01:06.810
TypeScript's type checking and
linting functionality in VS Code.

23
00:01:06.810 --> 00:01:09.400
This is one of the magical
things about VS Code,

24
00:01:09.400 --> 00:01:13.600
it works with TypeScript
with no configuration.

25
00:01:13.600 --> 00:01:17.223
Now, here's what you can do,
I'm gonna come to the top here, and

26
00:01:17.223 --> 00:01:18.792
I'm going to put a comment.

27
00:01:18.792 --> 00:01:22.979
And then I'm gonna put an at sign,
and see how it popped up a mini there?

28
00:01:22.979 --> 00:01:24.733
And I'm gonna say ts-check, and

29
00:01:24.733 --> 00:01:28.750
then what that's gonna do is it's gonna
start checking my JavaScript for me.

30
00:01:28.750 --> 00:01:32.270
So now it doesn't know about certain
things, and it's like, I don't know what

31
00:01:32.270 --> 00:01:36.460
value is, and I don't know what blog is,
and actually, if I press,

32
00:01:36.460 --> 00:01:41.520
I think it's f8, that will move us
between the errors, so I'm pressing f8.

33
00:01:41.520 --> 00:01:44.933
And we're just going down to the errors in
the file, doesn't know what signalR is,

34
00:01:44.933 --> 00:01:46.410
that's a global variable.

35
00:01:46.410 --> 00:01:48.200
So I'm just gonna keep moving through.

36
00:01:48.200 --> 00:01:50.890
Doesn't see a style,
doesn't think that's right.

37
00:01:50.890 --> 00:01:54.100
Some of these are okay, it's just
TypeScript doesn't know what they are.

38
00:01:54.100 --> 00:01:55.770
But what's interesting is on the blog one,

39
00:01:55.770 --> 00:01:58.310
it says property blog does
not exist on type console.

40
00:01:58.310 --> 00:01:59.316
Did you mean log?

41
00:01:59.316 --> 00:02:04.170
Okay, so TypeScript knows a lot more,
because of typing,

42
00:02:04.170 --> 00:02:08.660
it knows a lot more about your
JavaScript than the linter does.

43
00:02:08.660 --> 00:02:10.110
So you can use TypeScript and

44
00:02:10.110 --> 00:02:14.110
exploit the brains of TypeScript
to type check your JavaScript.

45
00:02:14.110 --> 00:02:19.540
Now, you probably don't wanna do
this at the top of every file.

46
00:02:19.540 --> 00:02:21.473
That does not scale.

47
00:02:21.473 --> 00:02:24.994
So, let's take this out and
look at a different way of doing this.

48
00:02:27.018 --> 00:02:29.113
&gt;&gt; Burke Holland: Let's open
up our settings file, and

49
00:02:29.113 --> 00:02:30.690
I've got a lot of settings.

50
00:02:31.940 --> 00:02:34.759
And I'm gonna get him
down here to the bottom.

51
00:02:34.759 --> 00:02:37.689
Actually, I wanna take out
these favorite colors here.

52
00:02:37.689 --> 00:02:38.800
Let's pull this out.

53
00:02:38.800 --> 00:02:41.410
And what I'm gonna do is
I'm gonna add a setting

54
00:02:41.410 --> 00:02:46.400
called implicitProjectConfig.checkJs.

55
00:02:46.400 --> 00:02:48.180
Not super intuitive, but

56
00:02:48.180 --> 00:02:52.020
this basically says, check my project
using the TypeScript compiler.

57
00:02:52.020 --> 00:02:53.920
That's what this setting means.

58
00:02:53.920 --> 00:02:56.030
So we'll set it on to true.

59
00:02:56.030 --> 00:02:57.380
Let's come back to our app file.

60
00:02:59.160 --> 00:03:02.590
And we're getting the type
checking now from TypeScript

61
00:03:02.590 --> 00:03:05.040
that we were getting
with the comment before.

62
00:03:05.040 --> 00:03:08.578
You can also add that as a workspace
setting instead of a global setting.

63
00:03:08.578 --> 00:03:12.484
So you want it to apply just to your
workspace, a lot of times I keep this

64
00:03:12.484 --> 00:03:15.731
turned off until I get to a scenario
where I got a problem and

65
00:03:15.731 --> 00:03:18.338
I'm having trouble debugging a JavaScript.

66
00:03:18.338 --> 00:03:23.231
And then I turn it on, and I say, okay
TypeScript, I can't find where the area

67
00:03:23.231 --> 00:03:26.731
is, what method am I calling
that just doesn't exist?

68
00:03:26.731 --> 00:03:29.567
A lot of times you'll get an error
object is not a function or

69
00:03:29.567 --> 00:03:31.683
undefined is not a function in JavaScript.

70
00:03:31.683 --> 00:03:34.800
The TypeScript compiler is really good for
checking for that stuff.

71
00:03:34.800 --> 00:03:36.820
So just know that you have
that at your disposal.

72
00:03:36.820 --> 00:03:39.320
You can turn it on,
let it check your JavaScript.

73
00:03:39.320 --> 00:03:44.100
It's basically like a pair programmer
coming in to help you, it's really cool.

74
00:03:45.560 --> 00:03:49.050
All right, so that's typed,
check in your JavaScript there.

75
00:03:51.030 --> 00:03:54.920
I think now since we changed our image,
we're no longer running,

76
00:03:54.920 --> 00:03:57.630
let me go ahead and start that up again.

77
00:03:57.630 --> 00:04:01.770
And I think since I've changed all the
paths and everything, yeah, it's working.

78
00:04:02.850 --> 00:04:05.420
The button doesn't look so
good, but close enough.

79
00:04:05.420 --> 00:04:08.810
You know what it is,
I think I modified that.

80
00:04:09.870 --> 00:04:13.240
This, yeah, right here,
it's not columns, columns.

81
00:04:13.240 --> 00:04:14.408
It's just columns.

82
00:04:16.209 --> 00:04:18.530
&gt;&gt; Burke Holland: Better, okay.

83
00:04:18.530 --> 00:04:19.320
Now's your turn.

84
00:04:19.320 --> 00:04:22.940
You get to go and go through all these
steps and when you get the app running,

85
00:04:22.940 --> 00:04:26.870
feel free to change the colors on
the lint to your heart's content.

