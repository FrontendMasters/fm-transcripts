WEBVTT

1
00:00:00.292 --> 00:00:04.577
&gt;&gt; Burke Holland: All right, so we've
composed but we have other files in this

2
00:00:04.577 --> 00:00:10.138
project as well, particularly one of
interest is this docker debug compose.

3
00:00:10.138 --> 00:00:12.450
What does this file do?

4
00:00:12.450 --> 00:00:16.780
Well, oftentimes or sometimes in your
application, you'll get to a scenario

5
00:00:16.780 --> 00:00:21.900
where you've built the container, and
then you gotta run it and it doesn't work.

6
00:00:21.900 --> 00:00:25.910
Or the application runs but
it fails, and you don't know why.

7
00:00:25.910 --> 00:00:29.430
Now, this is a problem because your
application is running in the container.

8
00:00:29.430 --> 00:00:32.480
And so if you were to debug your
application outside of the container,

9
00:00:32.480 --> 00:00:34.120
you're not in the container anymore.

10
00:00:34.120 --> 00:00:37.430
Now you've changed environments,
and now your problem might go away.

11
00:00:37.430 --> 00:00:43.480
Okay, if that happens,
there is a debug compose that you can use,

12
00:00:43.480 --> 00:00:48.460
along with the Visual Studio Code
debugger to make this work.

13
00:00:48.460 --> 00:00:51.450
So the compose file we don't
need to do anything with, but

14
00:00:51.450 --> 00:00:54.420
we do need to add a debug configuration.

15
00:00:54.420 --> 00:00:58.370
This should look a little bit familiar.

16
00:00:58.370 --> 00:01:05.420
So we'll do start, and then it's going
to add the launch config to our folder.

17
00:01:07.050 --> 00:01:13.397
And then we will say Docker: Node.js,
because that's what we're doing.

18
00:01:13.397 --> 00:01:16.750
And then it wants to
know where is your app.

19
00:01:16.750 --> 00:01:19.700
Remember that path inside of our
container, that's this value.

20
00:01:21.570 --> 00:01:23.570
And here is our launch config.

21
00:01:23.570 --> 00:01:27.230
Now, I need to make sure that
I've got this just right here.

22
00:01:28.680 --> 00:01:31.350
Got the launch config,
I should be just fine.

23
00:01:33.200 --> 00:01:40.870
And now what I'm going to do is, I'm going
to save this and I'm going to compose up,

24
00:01:40.870 --> 00:01:45.670
select start, but this time I'm
gonna pick the compose debug, okay?

25
00:01:49.575 --> 00:01:53.680
&gt;&gt; Burke Holland: And our container is
running, what we need to do is kill it.

26
00:01:53.680 --> 00:01:55.450
So let's just do that, come over here.

27
00:01:56.810 --> 00:02:01.145
So if we kill this one here,
let's stop this one,

28
00:02:01.145 --> 00:02:05.080
here we go, and let's compose debug again.

29
00:02:09.377 --> 00:02:10.850
&gt;&gt; Burke Holland: And
hopefully, that'll do it.

30
00:02:10.850 --> 00:02:13.380
One thing you should know about
the Docker extension is that

31
00:02:13.380 --> 00:02:16.300
every time you run a command,
it opens a new instance of the terminal.

32
00:02:16.300 --> 00:02:20.311
So there's a lot of them.

33
00:02:20.311 --> 00:02:24.421
If you wanna just rerun the last command,
just hit the up arrow in your terminal,

34
00:02:24.421 --> 00:02:25.630
and it will autofill.

35
00:02:25.630 --> 00:02:29.300
Cuz all this is,
is a UI on top of the Docker CLI.

36
00:02:29.300 --> 00:02:32.050
So you do all this stuff with the Docker
CLI, you just have to know all the CLI

37
00:02:32.050 --> 00:02:34.890
commands, it's just
easier to do it visually.

38
00:02:34.890 --> 00:02:36.340
I did talk to the team about this.

39
00:02:36.340 --> 00:02:40.160
There are some technical limitations
about why this is the way that it is.

40
00:02:40.160 --> 00:02:43.965
But for now, do some cleanup every now and
again, clean them all out.

41
00:02:43.965 --> 00:02:46.317
All right, so
we've got our container running, and

42
00:02:46.317 --> 00:02:48.020
now we want to attach the debugger.

43
00:02:48.020 --> 00:02:53.090
So we've got Attach to Node,
which is our debug configuration.

44
00:02:53.090 --> 00:02:54.380
So I'm gonna do that.

45
00:02:54.380 --> 00:03:00.052
And now, if we go over to our container,
let's put a break point here.

46
00:03:01.330 --> 00:03:02.840
And come over to our container.

47
00:03:04.190 --> 00:03:08.110
And let's see local host 3000.

48
00:03:08.110 --> 00:03:12.120
There's our application,
let's change the color.

49
00:03:12.120 --> 00:03:16.331
And now we're debugging
inside the Docker container.

50
00:03:16.331 --> 00:03:19.867
All right, so this is a very,
very powerful option that you have for

51
00:03:19.867 --> 00:03:23.963
when your container doesn't work,
your code is failing in your container and

52
00:03:23.963 --> 00:03:25.101
you don't know why.

53
00:03:25.101 --> 00:03:29.172
In order to flatline you can
just use the Docker debug and

54
00:03:29.172 --> 00:03:33.170
go add breakpoints like
you normally would.

55
00:03:33.170 --> 00:03:35.479
So now we're hitting the break point,
we're actually in production now.

56
00:03:35.479 --> 00:03:40.265
You want to be really careful with this
because, if you've got a break point,

57
00:03:40.265 --> 00:03:43.384
then the application is
halted on the break point,

58
00:03:43.384 --> 00:03:48.050
and so you probably don't wanna do that,
but a better option would be what?

59
00:03:50.161 --> 00:03:53.082
&gt;&gt; Burke Holland: What could we do in
production that will not the disruptive

60
00:03:53.082 --> 00:03:53.890
for our users?

61
00:03:53.890 --> 00:03:54.481
&gt;&gt; Speaker 2: Log out something.

62
00:03:54.481 --> 00:03:55.301
&gt;&gt; Burke Holland: Sorry.

63
00:03:55.301 --> 00:03:55.823
&gt;&gt; Speaker 2: Log out.

64
00:03:55.823 --> 00:03:58.319
&gt;&gt; Burke Holland: You can log
something out, and how do we do that?

65
00:03:59.820 --> 00:04:00.870
Do you remember what it's called?

66
00:04:00.870 --> 00:04:01.400
&gt;&gt; Speaker 3: Log point.

67
00:04:01.400 --> 00:04:02.572
&gt;&gt; Burke Holland: Log points,
that's right.

68
00:04:02.572 --> 00:04:07.564
So we could add a log point and say,
look at record maybe we want to know,

69
00:04:07.564 --> 00:04:12.329
maybe this is failing and
we don't know why, so we wanna look at it.

70
00:04:16.767 --> 00:04:25.350
&gt;&gt; Burke Holland: Okay, and
now we can see the value.

71
00:04:25.350 --> 00:04:30.100
So this is really powerful.

72
00:04:30.100 --> 00:04:33.560
If your provider supports this, of course
app service does, but if your provider

73
00:04:33.560 --> 00:04:38.510
implements this and he has an extension
for VS Code, you can log out from

74
00:04:38.510 --> 00:04:43.330
applications that are in production, which
is pretty nice, troubleshoot on the fly.

75
00:04:44.860 --> 00:04:48.170
All right, man,
we've done some amazing stuff today.

76
00:04:48.170 --> 00:04:52.332
Let's take our Docker knowledge
of which we have a ton now.

77
00:04:52.332 --> 00:04:56.830
I don't think there's anything else
I wanted to cover in this section.

78
00:04:56.830 --> 00:04:58.370
And I hope that was it.

79
00:04:58.370 --> 00:05:02.865
So that was your breakneck
intro to Docker.

