WEBVTT

1
00:00:00.566 --> 00:00:05.419
It's unclear how a request is made
to the loader from the browser what

2
00:00:05.419 --> 00:00:08.357
is Remix doing behind the scene exactly?

3
00:00:08.357 --> 00:00:13.224
&gt;&gt; Yeah, let's talk about that, so,
if I load the page initially you'll see

4
00:00:13.224 --> 00:00:16.126
there actually no fetch
requests made here.

5
00:00:16.126 --> 00:00:18.400
And that's because this
is all server rendered.

6
00:00:18.400 --> 00:00:22.870
All of the content of the HTML here,
if you go to view source,

7
00:00:22.870 --> 00:00:28.148
then you're gonna look at my first post,
just shows up right in there.

8
00:00:28.148 --> 00:00:30.568
You'll actually notice
that this also shows up.

9
00:00:30.568 --> 00:00:33.888
In a second place in here,
this is for hydration.

10
00:00:33.888 --> 00:00:39.470
So, in react when all the JavaScript
shows up in the client,

11
00:00:39.470 --> 00:00:43.418
we need to run all of
the React components.

12
00:00:43.418 --> 00:00:46.646
So, we set up event handlers and
context and all of this stuff.

13
00:00:46.646 --> 00:00:50.394
And so, to be able to render
this component on the client,

14
00:00:50.394 --> 00:00:55.375
we need to have the data that's gonna
come back when you call useLoaderData.

15
00:00:55.375 --> 00:01:03.287
And so, that data shows up in JSON that is
embedded in the content of the document.

16
00:01:03.287 --> 00:01:05.797
All of that is managed for
you automatically by Remix.

17
00:01:05.797 --> 00:01:11.564
It's on this fancy double underscore
variable that is on window.

18
00:01:11.564 --> 00:01:15.650
That Remix just grabs, and
sticks into the Remix context so

19
00:01:15.650 --> 00:01:18.599
it can grab that when
it hydrates your app.

20
00:01:18.599 --> 00:01:23.200
So, you won't get a fetch request
when you land on the page.

21
00:01:23.200 --> 00:01:26.834
But if you navigate to the page,
then you will.

22
00:01:26.834 --> 00:01:29.943
So, if I go back to the homepage and
go to blog posts,

23
00:01:29.943 --> 00:01:34.281
then I'm going to see this fetch request
right here to get all that data.

24
00:01:34.281 --> 00:01:37.433
Because we're not doing full page
reloads between these pages,

25
00:01:37.433 --> 00:01:39.554
we're gonna do a client
side transition and

26
00:01:39.554 --> 00:01:43.755
so Remix says, okay, you're going over
there, let me go grab the data for that.

27
00:01:43.755 --> 00:01:48.286
So that it's ready by the time
we render this component.

28
00:01:48.286 --> 00:01:51.861
And so, this is actually fairly different
from the way that I used to build

29
00:01:51.861 --> 00:01:52.503
react apps.

30
00:01:52.503 --> 00:01:55.784
Where normally,
I would navigate instantly,

31
00:01:55.784 --> 00:01:58.990
show a loading spinner
while I go get the data.

32
00:01:58.990 --> 00:02:03.693
With Remix, the user says hey I
want to navigate, Remix says, okay,

33
00:02:03.693 --> 00:02:08.016
hold that thought let me go get
the stuff and then we'll render.

34
00:02:08.016 --> 00:02:13.032
And these are trade offs here and
Remix gives you levers to switch that to

35
00:02:13.032 --> 00:02:18.566
like be able to navigate instantly and
show a spinner if that's what you want.

36
00:02:18.566 --> 00:02:22.735
And that we'll discuss in
the advanced Remix workshop.

37
00:02:22.735 --> 00:02:25.178
But yeah,
I think that the default makes more sense.

38
00:02:25.178 --> 00:02:27.666
It actually resembles the way
that the web is as well.

39
00:02:27.666 --> 00:02:32.209
So, if you're on,
here's actually a good example of that.

40
00:02:32.209 --> 00:02:35.696
If I want to go to my profile page,
I click on this.

41
00:02:35.696 --> 00:02:37.536
I'm sticking around here.

42
00:02:37.536 --> 00:02:41.459
Nothing's changing until I actually
that page is loaded, right?

43
00:02:41.459 --> 00:02:44.239
So, Remix again, it's a browser emulator,

44
00:02:44.239 --> 00:02:47.386
just doing the same thing
that the browser would do.

45
00:02:47.386 --> 00:02:52.458
&gt;&gt; This type of loader handle
what is serializable JSON?

46
00:02:52.458 --> 00:02:54.063
&gt;&gt; Yeah, thank you for asking.

47
00:02:54.063 --> 00:02:55.352
That's a great question.

48
00:02:55.352 --> 00:03:01.286
So, what if we had a post date on here?

49
00:03:03.473 --> 00:03:07.418
Okay, so now,
if I come over here and I say,

50
00:03:07.418 --> 00:03:14.484
we're going to also say post.post
date.tolocaltime, whatever, right.

51
00:03:14.484 --> 00:03:18.180
That's not working, and
the reason it's not working is

52
00:03:18.180 --> 00:03:22.492
because post date is a string but
I literally just set it to a date and

53
00:03:22.492 --> 00:03:25.728
in fact when I'm on the server
side that is a date.

54
00:03:25.728 --> 00:03:30.977
That's exactly what it is, so what gives
TypeScript to Remix combo, what's up?

55
00:03:30.977 --> 00:03:37.282
Well, JSON does not support the date
type and also doesn't support undefined,

56
00:03:37.282 --> 00:03:41.825
it doesn't support like a whole
host of other like regex,

57
00:03:41.825 --> 00:03:46.107
a whole bunch of things of functions,
all that stuff.

58
00:03:46.107 --> 00:03:51.316
And so, yes, the answer to the question
is the use loader data generic

59
00:03:51.316 --> 00:03:56.175
does handle non serializable types and
it will serialize those so

60
00:03:56.175 --> 00:04:01.119
that you will not have a type error
when you say like to local times or

61
00:04:01.119 --> 00:04:04.601
whatever that thing that
function is called.

62
00:04:04.601 --> 00:04:06.798
Yeah, thank you Copilot.

63
00:04:06.798 --> 00:04:09.509
So, yes that is that.

64
00:04:09.509 --> 00:04:14.282
Now, some of you are probably maybe a
little let down by that you're like well,

65
00:04:14.282 --> 00:04:18.430
I kinda wanted to preserve those
types across the network boundary.

66
00:04:18.430 --> 00:04:21.774
So, there are projects
out there that allow you

67
00:04:21.774 --> 00:04:26.048
to preserve those types where
they provide their own hooks.

68
00:04:26.048 --> 00:04:30.655
Add their own JSON, where it will
serialize it in a special format and

69
00:04:30.655 --> 00:04:35.593
then it will deserialize it to get all
of those, those actual same types.

70
00:04:35.593 --> 00:04:38.996
If you want to use those be my guest,

71
00:04:38.996 --> 00:04:44.329
personally what I like to do
is if I need something to be,

72
00:04:44.329 --> 00:04:51.143
especially with dates, if I need that
to be formatted in a certain way.

73
00:04:51.143 --> 00:04:55.786
If your server is on a different time zone
from your user then you can end up in

74
00:04:55.786 --> 00:04:59.546
funny situation or
not just different time zone but do like,

75
00:04:59.546 --> 00:05:02.219
desires a different format or something.

76
00:05:02.219 --> 00:05:05.229
You can end up with a situation where
the server formats this way and

77
00:05:05.229 --> 00:05:07.560
then the client formats it
this way you get a flash.

78
00:05:07.560 --> 00:05:10.258
And so, I always like to do all
the formatting on the server.

79
00:05:10.258 --> 00:05:15.138
Just format it there, if you want to care
about the user's preferences then give

80
00:05:15.138 --> 00:05:19.901
them away to specify those preferences and
have your server reference those.

81
00:05:19.901 --> 00:05:25.649
So, but again, long winded Kent over
here answering questions too long.

82
00:05:25.649 --> 00:05:27.241
Yeah.

83
00:05:27.241 --> 00:05:31.307
&gt;&gt; When you navigate to the post page,
you get just a data object back.

84
00:05:31.307 --> 00:05:34.175
When do you get like the HTML
that's rendering the list?

85
00:05:34.175 --> 00:05:37.179
Is that when you first visited the site,
or how does that work?

86
00:05:37.179 --> 00:05:42.773
&gt;&gt; Yeah, so, when you navigate or when you
land on the page, you get all the HTML.

87
00:05:42.773 --> 00:05:47.217
When you navigate to the page, you just
get the, let's clear all this out so

88
00:05:47.217 --> 00:05:49.794
we can see that, you'll get just the data.

89
00:05:49.794 --> 00:05:51.911
You'll also notice you get the JavaScript.

90
00:05:51.911 --> 00:05:56.850
So, this is the react components that are
coming in here to generate what ends up

91
00:05:56.850 --> 00:05:58.114
being the DOM here.

92
00:05:58.114 --> 00:06:03.391
&gt;&gt; Can we transmit data any other
way like CSV or YAML or text?

93
00:06:03.391 --> 00:06:08.341
&gt;&gt; Yeah, so, you can absolutely like
read CSV files or YAML files or

94
00:06:08.341 --> 00:06:10.321
whatever in your loader.

95
00:06:10.321 --> 00:06:14.320
If you want to get that data into
your loader, into your component

96
00:06:14.320 --> 00:06:18.114
via use loader data that's got to
be JSON at the end of the day.

97
00:06:18.114 --> 00:06:20.298
So, you can convert it to JSON or
whatever.

98
00:06:20.298 --> 00:06:24.588
If you want to have some sort of endpoint
in your app that serves up a CSV like you

99
00:06:24.588 --> 00:06:28.427
are generating a report or something,
then you can totally do that.

100
00:06:28.427 --> 00:06:33.030
We are not going to get into this today
but it is a subject called resource routes

101
00:06:33.030 --> 00:06:36.261
and basically you can make
a resource route like that.

102
00:06:36.261 --> 00:06:42.546
You just don't export a default
component and now it's a JSON API.

103
00:06:42.546 --> 00:06:43.933
Which is pretty rad and

104
00:06:43.933 --> 00:06:48.605
then from there you can actually say,
I want my content type to be a PDF or

105
00:06:48.605 --> 00:06:53.281
I wanna generate an image or whatever
you want to, the world is your oyster.

106
00:06:53.281 --> 00:06:57.269
And so, yes, the answer to your
question is, yes, you can do that.

107
00:06:57.269 --> 00:07:00.815
I can not think of a situation where
you would want to use loader data

108
00:07:00.815 --> 00:07:01.712
to return a CSV.

109
00:07:01.712 --> 00:07:06.519
More likely, you would want it to return
maybe a string, right, of what the CSV is,

110
00:07:06.519 --> 00:07:08.307
and you could totally do that.

111
00:07:08.307 --> 00:07:11.418
It would just ultimately,
it's gonna be serialized into JSON and

112
00:07:11.418 --> 00:07:12.424
then deserialized.

113
00:07:12.424 --> 00:07:13.084
Yeah.

114
00:07:13.084 --> 00:07:16.665
&gt;&gt; So,
is a loader pretty much an API endpoint?

115
00:07:16.665 --> 00:07:17.892
&gt;&gt; Yes, yeah.

116
00:07:17.892 --> 00:07:21.763
So, no, creating API endpoints
in this directory and

117
00:07:21.763 --> 00:07:26.323
then having some indirection
through a fetch call or whatever.

118
00:07:26.323 --> 00:07:32.823
It's literally just this and yes,
it is 100% in an API endpoint.

119
00:07:32.823 --> 00:07:36.649
I don't advise this but
you could click on this and

120
00:07:36.649 --> 00:07:40.485
now you have the URL to get the data for
this route.

121
00:07:40.485 --> 00:07:45.003
So, you could copy that and boom now
you've got your API endpoint, like I said,

122
00:07:45.003 --> 00:07:47.928
don't do this,
if you really need an API endpoint,

123
00:07:47.928 --> 00:07:50.731
just make resource routes
like I showed earlier.

124
00:07:50.731 --> 00:07:51.574
But, yeah,

125
00:07:51.574 --> 00:07:56.497
each one of these is its own API endpoint
that Remix handles calling for you.

126
00:07:56.497 --> 00:08:02.525
&gt;&gt; Is used loader data effectively
binding the JSON to a template and

127
00:08:02.525 --> 00:08:07.249
how does Remix know what
part of the tree to update?

128
00:08:07.249 --> 00:08:12.379
&gt;&gt; Yeah, so, use loader data and
the loader for the component or for

129
00:08:12.379 --> 00:08:18.086
the route where the component appears,
yes, they are bound together.

130
00:08:18.086 --> 00:08:21.958
And so, you're effectively
taking saying here's my data,

131
00:08:21.958 --> 00:08:26.509
here's my template, squish them
together and I have my HTML and my doc.

132
00:08:26.509 --> 00:08:31.019
&gt;&gt; So, yeah that's maybe a way to
think about it it knows what part of

133
00:08:31.019 --> 00:08:34.468
the tree to update because
it manages all of this.

134
00:08:34.468 --> 00:08:38.278
We'll get into this a little bit here but

135
00:08:38.278 --> 00:08:42.872
if we cd into exercise or
two, npx remix routes,

136
00:08:42.872 --> 00:08:49.483
then this will go through the Remix
convention for your file system and

137
00:08:49.483 --> 00:08:54.658
it shows you the routes that
are in your app currently.

138
00:08:54.658 --> 00:08:59.680
And so, it says, here's our index route,
here's the file for

139
00:08:59.680 --> 00:09:05.086
that index, or yeah,
here's our post route, it's an index file.

140
00:09:05.086 --> 00:09:06.434
And here's the file for that.

141
00:09:06.434 --> 00:09:11.322
And so, it knows which part of the tree
to update based on which module

142
00:09:11.322 --> 00:09:15.046
is responsible for
that loader and that component.

143
00:09:15.046 --> 00:09:19.849
And so, it only will update this part
of the tree it knows it doesn't need to

144
00:09:19.849 --> 00:09:22.461
bother with this part or anything else.

145
00:09:22.461 --> 00:09:24.531
Basically, magic is the answer.

146
00:09:24.531 --> 00:09:27.804
&gt;&gt; The last question is,
is there a use case for

147
00:09:27.804 --> 00:09:32.318
using a generic type of anything
other than type of loader and

148
00:09:32.318 --> 00:09:37.024
use older data and if not why not
build that type and by default?

149
00:09:37.024 --> 00:09:40.516
&gt;&gt; Yeah, great question so unfortunately,

150
00:09:40.516 --> 00:09:45.563
just doing that is impossible
from a TypeScript standpoint.

151
00:09:45.563 --> 00:09:46.646
There's no way for

152
00:09:46.646 --> 00:09:51.119
TypeScript to know that this load us
loader data should be referencing those.

153
00:09:51.119 --> 00:09:53.878
That's kind of a runtime thing.

154
00:09:53.878 --> 00:09:57.193
So, it would be really cool
if that were possible but no,

155
00:09:57.193 --> 00:09:59.762
that is just not possible with TypeScript.

156
00:09:59.762 --> 00:10:04.417
So, yes, you will have this as
your basically the keys you

157
00:10:04.417 --> 00:10:09.170
have to type [LAUGH] every time
you need to access voter data.

