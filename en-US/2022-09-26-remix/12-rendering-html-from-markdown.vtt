WEBVTT

1
00:00:00.380 --> 00:00:02.890
All right, let's make TypeScript help us.

2
00:00:02.890 --> 00:00:08.060
So, I think the first one I
wanna fix is this one here.

3
00:00:08.060 --> 00:00:13.206
So, here it's saying object is possibly
no and that's because getPost,

4
00:00:13.206 --> 00:00:17.714
what if there is no slug by the name
of the thing that we're doing?

5
00:00:17.714 --> 00:00:21.901
So, if I say 90s mixtapes,
then we're reading no of title,

6
00:00:21.901 --> 00:00:26.491
TypeScript told us what would happen and
we didn't listen, right?

7
00:00:26.491 --> 00:00:28.620
That's why we're getting
this runtime error.

8
00:00:28.620 --> 00:00:31.400
So, this could be null.

9
00:00:31.400 --> 00:00:36.453
So, what we're gonna do is,
I say if there's not a post,

10
00:00:36.453 --> 00:00:39.970
then throw a new error, post not found.

11
00:00:41.010 --> 00:00:44.880
Now, this is not the end solution,
we'll come back to this later but

12
00:00:44.880 --> 00:00:47.350
this is what we're gonna do for now.

13
00:00:47.350 --> 00:00:52.213
So that now our server can give us
a much more useful error message

14
00:00:52.213 --> 00:00:56.896
than the user saying,
cannot read no property title of null or

15
00:00:56.896 --> 00:01:01.960
whatever, at least it will say hey,
post not found.

16
00:01:01.960 --> 00:01:04.334
See, that's at least a little
better user experience but

17
00:01:04.334 --> 00:01:07.000
we're gonna make one
that's even way better.

18
00:01:07.000 --> 00:01:11.260
But then, TypeScript also is happy about
that, because it knows that there's no way

19
00:01:11.260 --> 00:01:14.410
that a falsie value can make it
past that If statement, right?

20
00:01:15.560 --> 00:01:16.833
So, we're good there.

21
00:01:16.833 --> 00:01:22.590
Now on the slug, the slug could
be undefined now, why is that?

22
00:01:22.590 --> 00:01:23.610
That's super frustrating.

23
00:01:23.610 --> 00:01:24.600
Why could it be undefined?

24
00:01:24.600 --> 00:01:28.100
Isn't Remix gonna make sure that
the slug is always a string?

25
00:01:28.100 --> 00:01:29.820
Yes, Remix will.

26
00:01:29.820 --> 00:01:31.360
But TypeScript doesn't know that.

27
00:01:31.360 --> 00:01:35.660
And so this is one area where we have to
do something a little extra to appease

28
00:01:35.660 --> 00:01:37.160
TypeScript.

29
00:01:37.160 --> 00:01:41.948
And I'm actually totally cool with
this because it's very easy for

30
00:01:41.948 --> 00:01:46.317
somebody to come in here and
change this to anything, right?

31
00:01:46.317 --> 00:01:49.785
So, it would be cool if
we could teach TypeScript

32
00:01:49.785 --> 00:01:54.536
that convention because then it
could protect against even that.

33
00:01:54.536 --> 00:01:59.692
But because we can't, then we have to do
something like this, if not posts params

34
00:01:59.692 --> 00:02:04.568
slag then throw new error, missing slag,
yeah, whatever you want it to be.

35
00:02:04.568 --> 00:02:08.695
And so now, we get post not found.

36
00:02:08.695 --> 00:02:13.036
I can't actually reproduce a situation
where the slug is not defined unless I

37
00:02:13.036 --> 00:02:14.515
change this to this.

38
00:02:14.515 --> 00:02:17.850
And now there we go missing slug, right?

39
00:02:17.850 --> 00:02:24.299
So now, TypeScript is not angry with
us and it can actually help us out and

40
00:02:24.299 --> 00:02:28.871
we get autocomplete,
which is kinda nice, cool?

41
00:02:28.871 --> 00:02:35.730
Okay, the last thing that we're gonna
do is render out the actual content.

42
00:02:35.730 --> 00:02:39.474
I think I skipped over,
I did these in the wrong word, but

43
00:02:39.474 --> 00:02:44.622
we write our content in Markdown and
we wanna turn it into HTML, so we're going

44
00:02:44.622 --> 00:02:50.530
to use this library called Marked to
do that processing for us, it's pretty.

45
00:02:50.530 --> 00:02:54.910
As far as Markdown parsers go,
it's pretty simple one.

46
00:02:54.910 --> 00:02:58.342
So, we'll get our, oops,

47
00:02:58.342 --> 00:03:03.210
HTML from Marked with post.markdown.

48
00:03:04.920 --> 00:03:06.390
And then here's our HTML.

49
00:03:07.830 --> 00:03:12.270
And then, here let's just get
our post in HTML out of here.

50
00:03:12.270 --> 00:03:16.667
And then we're gonna use
dangerously set inner HTML, and

51
00:03:16.667 --> 00:03:22.420
I know that sounds really scary but
it really is not, and I'll explain why.

52
00:03:23.970 --> 00:03:26.535
So, what we have here is HTML.

53
00:03:26.535 --> 00:03:31.210
Let's see what happens if I say div HTML.

54
00:03:33.390 --> 00:03:34.630
I'll start with the problem first.

55
00:03:35.750 --> 00:03:41.012
So, this is what happens if you
just stick HTML in a div in any

56
00:03:41.012 --> 00:03:46.172
modern framework,
it will automatically escape that for

57
00:03:46.172 --> 00:03:50.908
you so that you can't have
some sort of user come in and

58
00:03:50.908 --> 00:03:54.729
be like, script alert, gotcha, right?

59
00:03:54.729 --> 00:03:58.420
We don't want people to be able to do
stuff like this, that would not be good.

60
00:03:58.420 --> 00:04:03.279
So, React, Angular, all of them,
will automatically escape this for

61
00:04:03.279 --> 00:04:08.456
us so that, or at least they may not
automatically escape it themselves, but

62
00:04:08.456 --> 00:04:13.495
they ensure that it gets into the DOM
without actually executiong as HTML.

63
00:04:13.495 --> 00:04:18.000
This is good because you wouldn't want,
this actually happened to me in real life.

64
00:04:18.000 --> 00:04:19.710
You wanna hear a fun story?

65
00:04:19.710 --> 00:04:23.407
So, when I was at a company called Domo,
we had a chat feature and

66
00:04:23.407 --> 00:04:27.186
I got a bug across my desk that said,
hey, there's a cross site.

67
00:04:27.186 --> 00:04:29.240
This is called cross site scripting.

68
00:04:29.240 --> 00:04:30.680
That's what we're avoiding here.

69
00:04:30.680 --> 00:04:34.413
There's a cross site scripting
vulnerability in our chat, you need to fix

70
00:04:34.413 --> 00:04:38.797
that, because if you don't, then somebody
could steal somebody else's credentials

71
00:04:38.797 --> 00:04:42.412
and see all their data and that would
not be good especially a demo because

72
00:04:42.412 --> 00:04:46.529
it's like a company business intelligence
thing as like literally all the data.

73
00:04:46.529 --> 00:04:50.755
So, as a good engineer,
I need to reproduce it first, right?

74
00:04:50.755 --> 00:04:53.880
To make sure that I know what
what bug we're talking about.

75
00:04:53.880 --> 00:04:58.446
So, I reproduce it by typing in the chat,
script alert,

76
00:04:58.446 --> 00:05:01.501
you done been hacked, is what I said.

77
00:05:01.501 --> 00:05:06.767
But I did it in our
production environment.

78
00:05:06.767 --> 00:05:10.680
Luckily, it was just like our
own internal instance of Domo.

79
00:05:10.680 --> 00:05:14.690
But there are 500 people who on every
page, they would go to anytime they

80
00:05:14.690 --> 00:05:17.809
moved to a different page,
the chat would load up again and

81
00:05:17.809 --> 00:05:21.140
they'd get this alert that said,
you've done been hacked.

82
00:05:22.940 --> 00:05:28.265
And we hadn't yet implemented delete chat
yet, [LAUGH] and so I'm running around for

83
00:05:28.265 --> 00:05:33.140
two hours trying to,
somebody please delete this chat message.

84
00:05:33.140 --> 00:05:35.748
Yeah, that was an embarrassing day.

85
00:05:35.748 --> 00:05:39.314
And that was Backbone JS, so
Backbone did not auto escape stuff and

86
00:05:39.314 --> 00:05:42.960
that's why we had the vulnerability,
to begin with.

87
00:05:42.960 --> 00:05:48.045
So, for that reason,
all modern frameworks will

88
00:05:48.045 --> 00:05:53.249
not just take HTML as face value,
you need to either

89
00:05:53.249 --> 00:05:58.880
escape it yourself like
you are taking user input.

90
00:05:58.880 --> 00:06:00.078
Or if it's not user input,

91
00:06:00.078 --> 00:06:02.850
which is the case here,
we're the ones writing the markdown.

92
00:06:02.850 --> 00:06:05.730
So, we're not gonna hack ourselves,
that would be silly.

93
00:06:05.730 --> 00:06:09.112
So, we are actually safe to use
dangerously set inner HTML.

94
00:06:09.112 --> 00:06:12.373
But that's why it has
the prefix of dangerously,

95
00:06:12.373 --> 00:06:16.185
is because you have to know
what you're doing to use this.

96
00:06:16.185 --> 00:06:20.485
We know what we're doing, we're not
doing anything wrong, so we're fine.

97
00:06:20.485 --> 00:06:21.688
Okay, great.

98
00:06:21.688 --> 00:06:27.880
So with that said, here's my list,
and we've got UL allies and

99
00:06:27.880 --> 00:06:32.810
on this one, okay,
first post isn't this great,

100
00:06:32.810 --> 00:06:37.065
question mark, I think I have a semicolon.

101
00:06:37.065 --> 00:06:40.158
[LAUGH] There we go, cool.

102
00:06:43.986 --> 00:06:45.059
Any questions?

103
00:06:46.829 --> 00:06:48.390
So here's something that's neat.

104
00:06:48.390 --> 00:06:50.160
You might not have thought about this.

105
00:06:51.340 --> 00:06:54.570
But this is all happening at runtime,
right?

106
00:06:54.570 --> 00:06:55.460
No build time stuff.

107
00:06:56.690 --> 00:07:00.128
We have, in our database, or our Markdown,

108
00:07:00.128 --> 00:07:04.660
we're turning it into HTML and
sending that to the client.

109
00:07:06.000 --> 00:07:10.335
So, not only have we saved,
I mean, we could probably

110
00:07:10.335 --> 00:07:15.255
optimize this further to just
send the title, post.title.

111
00:07:16.521 --> 00:07:17.021
There we go.

112
00:07:19.685 --> 00:07:25.337
Now, we've really optimized what we're
sending to be only the stuff that we want,

113
00:07:25.337 --> 00:07:30.275
but also we're reducing the amount of
compute the user's device needs to

114
00:07:30.275 --> 00:07:34.036
do because we're doing all
that compute in our loader.

115
00:07:34.036 --> 00:07:37.299
And in a world where we're talking
about mobile devices and stuff,

116
00:07:37.299 --> 00:07:39.200
that actually is pretty significant.

117
00:07:40.460 --> 00:07:46.448
Additionally, this library is not free,
but it's only being run on our servers so,

118
00:07:46.448 --> 00:07:50.871
we don't have to pay the cost for
downloading of that library.

119
00:07:50.871 --> 00:07:53.155
I think that's pretty rad, yeah.

120
00:07:53.155 --> 00:07:56.022
&gt;&gt; If I use useLoaderData
in a child component,

121
00:07:56.022 --> 00:08:00.257
will the loader only be executed once for
the top level component?

122
00:08:00.257 --> 00:08:03.730
&gt;&gt; Yeah, so, we will not fetch data.

123
00:08:03.730 --> 00:08:07.141
In fact, useLoaderData is not
what triggers the data fetch,

124
00:08:07.141 --> 00:08:10.520
useLoaderData is called after
the fetch is already done.

125
00:08:10.520 --> 00:08:13.520
So we don't even render this component
until the fetch is finished.

126
00:08:13.520 --> 00:08:18.327
So yeah, you can call this as many times
as you want, no problem, no big deal.

127
00:08:20.794 --> 00:08:21.345
Cool?

128
00:08:21.345 --> 00:08:23.450
All right, that's Exercise 3.

