WEBVTT

1
00:00:00.199 --> 00:00:04.588
So while that's running in the background,
let's talk about what is a remix?

2
00:00:04.588 --> 00:00:11.244
[LAUGH] So remix is a web framework with
a laser focus on the web fundamentals or

3
00:00:11.244 --> 00:00:16.444
the foundation of the web,
web standards, and modern UX.

4
00:00:16.444 --> 00:00:21.919
And throughout this workshop, hopefully,
it will become clear to you that remix is

5
00:00:21.919 --> 00:00:27.026
a remix of the mental model of the easy
web of the late 90s or early 2000s.

6
00:00:27.026 --> 00:00:31.467
With the user experience,
the users expect of the modern web.

7
00:00:31.467 --> 00:00:33.984
That is the idea,
that's why it's called remix.

8
00:00:33.984 --> 00:00:35.283
You're remixing that.

9
00:00:35.283 --> 00:00:39.787
How simple it was to build apps
years ago with how complex apps

10
00:00:39.787 --> 00:00:43.419
are today from the user
experience standpoint.

11
00:00:43.419 --> 00:00:49.660
So let's talk about a couple of things
about remix and what this means.

12
00:00:49.660 --> 00:00:52.307
Really quick, I guess on this,

13
00:00:52.307 --> 00:00:57.613
remix is a server-rendered web
application or web framework.

14
00:00:57.613 --> 00:01:03.998
So there's no static site generation with
remix, and that is extremely intentional.

15
00:01:03.998 --> 00:01:09.263
The best UX is impossible with SSG,
that's it.

16
00:01:09.263 --> 00:01:13.983
Your best UX is only possible if you're
server rendering your application.

17
00:01:13.983 --> 00:01:17.728
So there are very few exceptions to this,

18
00:01:17.728 --> 00:01:22.334
but they do exist, so
I should acknowledge those.

19
00:01:22.334 --> 00:01:28.375
But the best possible UX for
99% of cases is to server render.

20
00:01:28.375 --> 00:01:33.568
So one thing that remix has that I think
that you're really going to love and

21
00:01:33.568 --> 00:01:37.122
we'll have exercises for
this is nested routing.

22
00:01:37.122 --> 00:01:43.519
You might be familiar with nested file
system based routing from NestJS or

23
00:01:43.519 --> 00:01:48.173
Gatsby, and
remix has a convention as well for this.

24
00:01:48.173 --> 00:01:52.930
But remix also has layout nested routing,

25
00:01:52.930 --> 00:01:58.226
where the UI is associated
to the URL segments.

26
00:01:58.226 --> 00:02:03.702
And so you can have multiple
routes on the page active

27
00:02:03.702 --> 00:02:10.304
at the same time actually similar
to the hierarchy of your URL.

28
00:02:10.304 --> 00:02:16.599
So we have route modules in remix,
each file is a route.

29
00:02:16.599 --> 00:02:19.645
And then that route can
actually have child routes.

30
00:02:19.645 --> 00:02:22.794
And so here's our root route,
and it's responsible for

31
00:02:22.794 --> 00:02:26.081
everything between the opening HTML and
the closing HTML.

32
00:02:26.081 --> 00:02:30.069
And then somewhere in there, it says, if I
have any children, this is where they go.

33
00:02:30.069 --> 00:02:33.189
And in this case, we say,
I'm in charge of the left nav,

34
00:02:33.189 --> 00:02:35.860
and if I have any children,
they go on the right.

35
00:02:35.860 --> 00:02:38.712
And the child here is the sales route.

36
00:02:38.712 --> 00:02:41.940
And then sales says,
I'm in charge of the header,

37
00:02:41.940 --> 00:02:45.709
and if I have any children,
they go below the list of links.

38
00:02:45.709 --> 00:02:47.493
And then we're at the invoices route.

39
00:02:47.493 --> 00:02:53.359
And invoices says, I'm in charge of
calculating this bar chart or whatever.

40
00:02:53.359 --> 00:02:55.874
I don't know what kind of chart that is,
this chart.

41
00:02:55.874 --> 00:02:58.923
[LAUGH] And then if I have any children,

42
00:02:58.923 --> 00:03:04.083
then the invoices is also responsible for
the list of invoices.

43
00:03:04.083 --> 00:03:06.414
And then if I have any children,
this is where they go.

44
00:03:06.414 --> 00:03:12.442
And this is amazingly
awesome to develop with.

45
00:03:12.442 --> 00:03:18.742
So if you don't have layout UI routes,
then what you're left with is,

46
00:03:18.742 --> 00:03:25.674
because most of your routes are gonna be
using a lot of the same layout, right?

47
00:03:25.674 --> 00:03:30.381
So for other or
non-layout route conventions,

48
00:03:30.381 --> 00:03:35.316
if you have the invoice
id.tsx that you've got for

49
00:03:35.316 --> 00:03:39.792
Gatsby or Nest,
that route is responsible for

50
00:03:39.792 --> 00:03:43.949
the entire page when that route is active.

51
00:03:43.949 --> 00:03:46.374
So if we're on this page or on this URL,

52
00:03:46.374 --> 00:03:50.205
then the entire page is
the responsibility of that one route.

53
00:03:50.205 --> 00:03:54.741
That means that it has to render the left
nav, it has to render logo, it's got to

54
00:03:54.741 --> 00:03:59.173
render the top nav, all of that stuff
is the responsibility of that one file.

55
00:03:59.173 --> 00:04:04.653
And so as is the invoices index route, or
the sales index route, or whatever, like

56
00:04:04.653 --> 00:04:10.551
sales/subscriptions route, all of them are
gonna be responsible for the entire page.

57
00:04:10.551 --> 00:04:13.699
And what do we do when we
have a lot of duplication?

58
00:04:13.699 --> 00:04:16.280
We try to move it into an abstraction,
right?

59
00:04:16.280 --> 00:04:20.405
So this is why you have a layout component
in most of these other frameworks,

60
00:04:20.405 --> 00:04:22.991
is because we want to
reduce that duplication.

61
00:04:22.991 --> 00:04:26.587
But the problem with that now is that
if you wanna server render this,

62
00:04:26.587 --> 00:04:29.068
each one of those routes
is also responsible for

63
00:04:29.068 --> 00:04:31.562
loading the data that you
have to pass as props.

64
00:04:31.562 --> 00:04:34.301
And so every one of the routes
has to load the data for that.

65
00:04:34.301 --> 00:04:37.065
So what inevitably is gonna happen, and

66
00:04:37.065 --> 00:04:41.452
especially in an app with a large team,
is you'll have a lot of or

67
00:04:41.452 --> 00:04:46.188
different teams who are responsible for
different parts of the app.

68
00:04:46.188 --> 00:04:50.352
And at PayPal, where I was working, we had
a team at PayPal that was responsible for

69
00:04:50.352 --> 00:04:53.682
the header and the footer, and
we had to call into their service and

70
00:04:53.682 --> 00:04:55.970
get their HTML and
then stick it in our stuff.

71
00:04:55.970 --> 00:04:57.875
It was kinda weird.

72
00:04:57.875 --> 00:05:01.935
But in a React component type of app,
you're going to have the team that's

73
00:05:01.935 --> 00:05:04.589
responsible for
the layout component in there.

74
00:05:04.589 --> 00:05:06.356
They say, hey, we need these props.

75
00:05:06.356 --> 00:05:08.155
And let's say that they decided,

76
00:05:08.155 --> 00:05:11.888
hey, we're gonna put the currently
logged in user's avatar up here.

77
00:05:11.888 --> 00:05:15.771
So they have a choice,
they can either say, hey,

78
00:05:15.771 --> 00:05:20.947
all 30 teams that are responsible for
this app, you have this new

79
00:05:20.947 --> 00:05:27.063
data that you need to request at server
render time and pass that as a prop to us.

80
00:05:27.063 --> 00:05:31.418
That probably is not awesome, so maybe
they'll try to update it themselves and

81
00:05:31.418 --> 00:05:33.629
they may pull requests for all of these.

82
00:05:33.629 --> 00:05:38.334
And then they'll have to have maybe a
fallback in case that a team doesn't merge

83
00:05:38.334 --> 00:05:41.930
it in time or whatever,
which also sounds like a lot of work.

84
00:05:41.930 --> 00:05:44.739
So you know what normally happens
is they say, the heck with it,

85
00:05:44.739 --> 00:05:48.394
we're not going to server render this,
we're just gonna go load it on the client.

86
00:05:48.394 --> 00:05:50.867
And so
that's why when you go to a lot of sites,

87
00:05:50.867 --> 00:05:55.189
they'll have a little spinner in place of
your avatar because they just gave up.

88
00:05:55.189 --> 00:05:58.446
And then they decide it's
also such a huge burden,

89
00:05:58.446 --> 00:06:02.312
we're gonna start doing microfinance and
stuff like that so

90
00:06:02.312 --> 00:06:07.720
we can have complete isolation from each
other because it's hard to work together.

91
00:06:07.720 --> 00:06:11.571
With nested routing though,
you don't have this problem at all,

92
00:06:11.571 --> 00:06:16.178
because the team that's responsible for
this left nav or the header or footer,

93
00:06:16.178 --> 00:06:18.883
they're gonna be in
charge of the root route.

94
00:06:18.883 --> 00:06:24.029
And they take care of loading the data for
their route and all of that,

95
00:06:24.029 --> 00:06:28.748
and all they care about the child
is to say where the child goes.

96
00:06:28.748 --> 00:06:32.175
This is a dysfunctional family,
parent-child relationship.

97
00:06:32.175 --> 00:06:34.246
They don't care about each other.

98
00:06:34.246 --> 00:06:38.052
And so the child doesn't think
anything about the parent,

99
00:06:38.052 --> 00:06:39.963
it's totally in isolation.

100
00:06:39.963 --> 00:06:43.231
So any data that it needs,
it can get itself.

101
00:06:43.231 --> 00:06:46.598
It's like these children have grown up,
I guess.

102
00:06:46.598 --> 00:06:51.951
And there doesn't have to be any
parent-child communication at all.

103
00:06:51.951 --> 00:06:55.889
There can be, breadcrumbs is a good
example, where the parent needs to know

104
00:06:55.889 --> 00:07:00.212
what children are being rendered so I can
render out the breadcrumbs and whatever.

105
00:07:00.212 --> 00:07:02.816
So it is possible, but it's not necessary.

106
00:07:02.816 --> 00:07:04.561
And most of the time, it's totally not.

107
00:07:04.561 --> 00:07:10.792
So in a remix context, you'd have to
run into a lot of problems before you

108
00:07:10.792 --> 00:07:16.735
start thinking about going into
the complexities of microfinance.

109
00:07:16.735 --> 00:07:20.643
Just because the team isolation is just so
nice and

110
00:07:20.643 --> 00:07:23.536
works well with the nested routing.

111
00:07:23.536 --> 00:07:29.085
So this is why nested routing is so cool,
and we've got some exercises about that.

112
00:07:29.085 --> 00:07:33.465
Okay, so another thing that
remix focuses on is thanks to

113
00:07:33.465 --> 00:07:36.936
the fact that it's server-side rendered,

114
00:07:36.936 --> 00:07:43.073
we hate this loading spinner experience
that we've all become accustomed to.

115
00:07:43.073 --> 00:07:44.287
So check this out.

116
00:07:44.287 --> 00:07:47.195
Chase.com, sorry if
you're Chase engineers,

117
00:07:47.195 --> 00:07:50.808
look at how many spinners there are,
I'm not even logged in.

118
00:07:50.808 --> 00:07:52.804
Look at that.

119
00:07:52.804 --> 00:07:58.358
And this is totally a normal
experience for users of the web.

120
00:07:58.358 --> 00:08:02.918
Yeah, I go to my banking website,
I go to my power company website,

121
00:08:02.918 --> 00:08:08.039
my kid's school website, all of them
just have bounced around junkiness.

122
00:08:08.039 --> 00:08:12.271
Even youtube.com has
a bunch of bounce around

123
00:08:12.271 --> 00:08:16.836
junkiness as you're
loading that initial page.

124
00:08:16.836 --> 00:08:18.609
I do not think that's awesome.

125
00:08:18.609 --> 00:08:22.357
Personally, I feel like we've been
conditioned to accept this, but

126
00:08:22.357 --> 00:08:24.020
it does not have to be this way.

127
00:08:24.020 --> 00:08:29.548
You can have a server render that renders
all the HTML that the user needs.

128
00:08:29.548 --> 00:08:33.086
And the first thing that they see is
the finished thing with the no content

129
00:08:33.086 --> 00:08:33.842
layout shift.

130
00:08:33.842 --> 00:08:37.580
Now, of course,
there are some situations where loading or

131
00:08:37.580 --> 00:08:40.963
server rendering might be
a little bit of a challenge.

132
00:08:40.963 --> 00:08:44.645
And so we're not gonna put our
foot in the ground and say,

133
00:08:44.645 --> 00:08:47.194
you cannot load any data on the client.

134
00:08:47.194 --> 00:08:51.982
Take, for example, a product
listing page that has reviews, and

135
00:08:51.982 --> 00:08:56.596
maybe the review stuff,
it's not that important, at least for

136
00:08:56.596 --> 00:09:01.572
the initial render, maybe that
backend is really slow, whatever.

137
00:09:01.572 --> 00:09:06.615
And so yeah, we can defer that,
wait for that to come on the client.

138
00:09:06.615 --> 00:09:08.614
We don't need to server render that piece.

139
00:09:08.614 --> 00:09:11.700
And remix gives you
really great levers for

140
00:09:11.700 --> 00:09:16.415
controlling what's gonna cause
the content layout shift versus

141
00:09:16.415 --> 00:09:21.570
what's gonna make the response take
a little bit longer on the outset.

142
00:09:21.570 --> 00:09:24.660
And we'll talk about that in
the advanced remix workshop.

143
00:09:24.660 --> 00:09:26.562
We'll have an exercise for that.

144
00:09:26.562 --> 00:09:31.756
But the key thing here is that
remix gives you really nice levers

145
00:09:31.756 --> 00:09:38.620
to choose between the content layout shift
nonsense that we are so accustomed to and

146
00:09:38.620 --> 00:09:45.015
the really nice user experience of
something that progressively enhances.

147
00:09:45.015 --> 00:09:48.932
Amd we've gotten an exercise on that
as well, so look forward to that.

148
00:09:48.932 --> 00:09:52.981
We say, goodbye to spin,
again, with remix.

149
00:09:52.981 --> 00:09:58.188
Another really cool aspect of
remix is that it is your bundler,

150
00:09:58.188 --> 00:10:03.511
your compiler, your data fetching library,
and your router.

151
00:10:03.511 --> 00:10:04.688
It's all of those things.

152
00:10:04.688 --> 00:10:09.027
And because it's all of those things,
it can do a lot of awesome things,

153
00:10:09.027 --> 00:10:11.249
also because it has nested routing.

154
00:10:11.249 --> 00:10:16.068
So what we're able to do is we know
all of your data requirements and

155
00:10:16.068 --> 00:10:19.781
your code requirements just
by looking at the URL.

156
00:10:19.781 --> 00:10:24.643
And so what that means is we don't
have to render any components

157
00:10:24.643 --> 00:10:27.222
before we know what data to load.

158
00:10:27.222 --> 00:10:31.874
So we can actually prefetch stuff when the
user is interacting with your application.

159
00:10:31.874 --> 00:10:35.669
So when your component is rendered,
we can go prefetch the data, or

160
00:10:35.669 --> 00:10:39.283
if the user hovers over your link or
however you configure this.

161
00:10:39.283 --> 00:10:44.555
And so that actually makes the whole
experience feel really fast for users.

162
00:10:44.555 --> 00:10:48.441
So as soon as the user says, hey,
I'm gonna go over to this invoice,

163
00:10:48.441 --> 00:10:51.657
we can actually start requesting the CSS,
the data, and

164
00:10:51.657 --> 00:10:55.411
the JavaScript that we're going
to need when the user gets there.

165
00:10:55.411 --> 00:10:57.687
And so by the time they click,
it's already loaded.

166
00:10:57.687 --> 00:11:02.419
It feels like the entire application was
downloaded the instant that they showed up

167
00:11:02.419 --> 00:11:06.676
to the app, which of course, it wasn't
because most apps we wanna split up

168
00:11:06.676 --> 00:11:10.139
on route boundaries so
that the initial load is much faster.

169
00:11:10.139 --> 00:11:11.566
So, that's another thing.

170
00:11:11.566 --> 00:11:14.668
And what's really cool about this is
we're just using the platform for this.

171
00:11:14.668 --> 00:11:18.566
This isn't just some JavaScript in memory
cache that gets blown away when you close

172
00:11:18.566 --> 00:11:22.072
the tab, and then you open the tab again,
you're like, never mind,

173
00:11:22.072 --> 00:11:24.821
I do wanna go there, and
you got to load up the cache again.

174
00:11:24.821 --> 00:11:30.642
You don't have to do that because we're
just using link tags with prefetch.

175
00:11:30.642 --> 00:11:33.819
And this couldn't be easier,
and we've got an exercise for

176
00:11:33.819 --> 00:11:35.820
that too that you can look forward to.

177
00:11:35.820 --> 00:11:40.849
Data loading is an interesting thing
that frameworks typically nail,

178
00:11:40.849 --> 00:11:42.620
it's easy to load data.

179
00:11:42.620 --> 00:11:45.911
What's tricky is what to do when
a mutation needs to happen,

180
00:11:45.911 --> 00:11:48.116
when somebody needs to change the data.

181
00:11:48.116 --> 00:11:51.795
That's where things get complicated,
accepting remix.

182
00:11:51.795 --> 00:11:56.725
In remix, we just use forms, the way
the web was designed from the beginning,

183
00:11:56.725 --> 00:12:01.303
where you're just like, if you need
to make a mutation, you use a form.

184
00:12:01.303 --> 00:12:06.288
Now, the regular forms are not quite
as powerful as a fetch request because

185
00:12:06.288 --> 00:12:11.114
you have to do a full page refresh,
and so now you've got all the problems

186
00:12:11.114 --> 00:12:14.618
with accessibility and
various things in that way.

187
00:12:14.618 --> 00:12:16.644
But the mental model was sure nice.

188
00:12:16.644 --> 00:12:20.018
And so
remix brings that mental model that's

189
00:12:20.018 --> 00:12:24.911
really simple with the UX that we
expect in modern applications.

190
00:12:24.911 --> 00:12:28.991
And you literally just have a form,
and then in the same file,

191
00:12:28.991 --> 00:12:33.948
you have an action, that's your server
side code for handling this form.

192
00:12:33.948 --> 00:12:35.300
And away you go.

193
00:12:35.300 --> 00:12:39.560
And remix will take care of everything
including form resubmission or

194
00:12:39.560 --> 00:12:41.008
revalidation of data.

195
00:12:41.008 --> 00:12:43.086
So as soon as the post
request is finished,

196
00:12:43.086 --> 00:12:46.970
we'll revalidate the data just the same
way that the web always works, right?

197
00:12:46.970 --> 00:12:49.883
When you submitted a form,
you get a full page refresh, and

198
00:12:49.883 --> 00:12:51.755
the new HTML you got was all up to date.

199
00:12:51.755 --> 00:12:55.898
Remix simulates the same thing,
we call it a browser emulator.

200
00:12:55.898 --> 00:12:58.729
And so you get a successful post requests.

201
00:12:58.729 --> 00:13:02.232
Remix is like, okay,
all bets are off on the data I've got,

202
00:13:02.232 --> 00:13:04.790
so let's just go revalidate all that data.

203
00:13:04.790 --> 00:13:08.699
Now, of course, there's a way to fine
tune some of that if you need that

204
00:13:08.699 --> 00:13:13.539
optimization, but the point is the default
is correct, and I think that's valuable.

205
00:13:13.539 --> 00:13:16.973
Remix also handles resubmissions,
so if the user posts again,

206
00:13:16.973 --> 00:13:20.216
then the data that was coming
back doesn't matter anymore,

207
00:13:20.216 --> 00:13:24.368
because it's gonna be wrong, so
we just cancel that automatically for you.

208
00:13:24.368 --> 00:13:29.189
And then we'll revalidate the data
when that one's finished.

209
00:13:29.189 --> 00:13:34.820
And this is great because remix also
handles race conditions for you as well.

210
00:13:34.820 --> 00:13:38.190
Something that we typically don't think
about, because when you're on your laptop

211
00:13:38.190 --> 00:13:41.345
and everything's running locally,
you're not gonna have race conditions.

212
00:13:41.345 --> 00:13:44.810
But in the real world,
that traffic went the wrong way or

213
00:13:44.810 --> 00:13:49.180
something weird happened, and
race conditions happen all the time.

214
00:13:49.180 --> 00:13:55.076
Hard problems to replicate and
actually real problems for

215
00:13:55.076 --> 00:14:00.741
our users, so
remix manages all of that for you as well.

216
00:14:00.741 --> 00:14:05.707
And then because remix is managing that
for you, it gives you hooks, ways to hook

217
00:14:05.707 --> 00:14:10.182
into what remix is doing so that you
can give some really nice pending UI.

218
00:14:10.182 --> 00:14:12.360
This is where we go from, well,

219
00:14:12.360 --> 00:14:17.309
the web could do that forever ago to,
that's actually quite nice.

220
00:14:17.309 --> 00:14:22.164
This was actually pretty difficult
to do before being able to just use

221
00:14:22.164 --> 00:14:24.182
JavaScript in the browser.

222
00:14:24.182 --> 00:14:27.947
And so yeah,
really nice way to do pending UI, and

223
00:14:27.947 --> 00:14:33.162
even nicer ways to do optimistic
UI than anything you've ever seen.

224
00:14:33.162 --> 00:14:35.753
I promise, I've done optimistic
UI in every framework.

225
00:14:35.753 --> 00:14:39.947
And remix makes it the easiest
of anything I've used.

226
00:14:39.947 --> 00:14:45.674
The last thing is, I love this, [LAUGH]
what happens when there is an error?

227
00:14:45.674 --> 00:14:49.898
I've been meaning to update this to
a rick roll, so I need to do that but.

228
00:14:49.898 --> 00:14:52.778
[LAUGH] I think it just takes you
to our error docs or something.

229
00:14:52.778 --> 00:14:58.140
But error boundaries, this is something
that we're gonna be talking about today.

230
00:14:58.140 --> 00:15:02.087
React error boundaries is something
that some of you might be familiar with.

231
00:15:02.087 --> 00:15:04.816
It's a way to wrap up part
of your component tree, and

232
00:15:04.816 --> 00:15:09.003
if any errors happen in that component
tree, it'll replace what errored out with

233
00:15:09.003 --> 00:15:13.207
a fallback that you provide, so you can
say, hey, this part of the app is busted.

234
00:15:13.207 --> 00:15:16.014
The problem with React error boundaries
is they don't work on the server render.

235
00:15:16.014 --> 00:15:19.075
So if you're doing a server render,
something blows up,

236
00:15:19.075 --> 00:15:22.959
React can't reconstruct anything cuz
it was in the middle of rendering.

237
00:15:22.959 --> 00:15:26.950
So it's just like it blows up and now
you're just left with let's try to render

238
00:15:26.950 --> 00:15:30.819
the header and the footer with a little
koala in the middle with a tear running

239
00:15:30.819 --> 00:15:34.166
down this face saying, I'm sorry,
that's what we do, right?

240
00:15:34.166 --> 00:15:36.775
In remix,
we have route error boundaries, and so

241
00:15:36.775 --> 00:15:39.632
you can export an error
boundary component say, hey,

242
00:15:39.632 --> 00:15:43.376
if this route experiences an error,
then let's render this instead.

243
00:15:43.376 --> 00:15:47.853
And what's really cool about this is it's
not just what happens in the component but

244
00:15:47.853 --> 00:15:51.889
also what happens in some of your server
code as well will result in rendering

245
00:15:51.889 --> 00:15:52.981
an error boundary.

246
00:15:52.981 --> 00:15:55.629
And then we also have catch boundaries,
which we will talk about.

247
00:15:55.629 --> 00:15:58.712
So if things blow up, I love that.

248
00:15:58.712 --> 00:16:00.305
Then we get contextual errors.

249
00:16:00.305 --> 00:16:04.662
This actually has impact on your business,
because the difference between this

250
00:16:04.662 --> 00:16:08.760
experience and koala with a tear running
down its face is the user calls up and

251
00:16:08.760 --> 00:16:12.666
says, hey, support, I'm getting
the koala with a tear down its face,

252
00:16:12.666 --> 00:16:16.922
or I'm getting the unicorn GitHub, or
I'm getting the sad whale, Twitter.

253
00:16:16.922 --> 00:16:18.026
Twitter, they do?

254
00:16:18.026 --> 00:16:19.616
I don't know what they do anymore.

255
00:16:19.616 --> 00:16:22.543
But that's not very helpful for
the support team,

256
00:16:22.543 --> 00:16:24.797
they don't know who to direct that to.

257
00:16:24.797 --> 00:16:28.147
But if you have contextual errors,
then the user can say, hey,

258
00:16:28.147 --> 00:16:31.574
this invoice is busted, right,
the rest of the app still works.

259
00:16:31.574 --> 00:16:34.606
So if I go to this invoice,
everything's fine, it's just this invoice.

260
00:16:34.606 --> 00:16:38.219
And so now their support is like,
let's go talk to the data team,

261
00:16:38.219 --> 00:16:41.223
there's some messed up data,
probably a bad migration or

262
00:16:41.223 --> 00:16:43.645
something for
that particular piece of data.

263
00:16:43.645 --> 00:16:48.622
So, impact on your business, also, it's
conceptually simpler, so better UX for

264
00:16:48.622 --> 00:16:49.333
you, too.

265
00:16:49.333 --> 00:16:52.868
So there's a lot more stuff
to talk about with remix, but

266
00:16:52.868 --> 00:16:55.900
we want to actually do some exercises,
I think.

