WEBVTT

1
00:00:00.000 --> 00:00:05.387
Is there any reason we need
to duplicate the loader

2
00:00:05.387 --> 00:00:12.835
code from index.tsx instead of just
exporting the loader from dot?

3
00:00:12.835 --> 00:00:17.510
&gt;&gt; Yeah, okay, so
we have our admin that has a loader.

4
00:00:17.510 --> 00:00:22.219
And that loader looks suspiciously
like the loader in our index,

5
00:00:22.219 --> 00:00:24.455
in fact, it looks identical.

6
00:00:24.455 --> 00:00:27.373
Except yeah,
this one is a const declaration too.

7
00:00:27.373 --> 00:00:29.465
Okay, now it's identical.

8
00:00:29.465 --> 00:00:37.786
So yes, you actually could, if you
wanted to, export { loader } from '.'.

9
00:00:37.786 --> 00:00:39.992
And that would work, this will work.

10
00:00:39.992 --> 00:00:41.543
I do not advise this.

11
00:00:41.543 --> 00:00:43.717
Because in practical situations,

12
00:00:43.717 --> 00:00:48.871
it's actually quite rare that you'd ever
be able to to do that, that it would work.

13
00:00:48.871 --> 00:00:52.812
Also because the type of loader,
now you have to import that loader.

14
00:00:52.812 --> 00:00:58.686
I really don't typically advise
importing things from route modules,

15
00:00:58.686 --> 00:01:00.423
that is not your job.

16
00:01:00.423 --> 00:01:03.705
So if you have some code
that you need to share,

17
00:01:03.705 --> 00:01:08.596
put it somewhere else and
import it in both, just general practice.

18
00:01:08.596 --> 00:01:12.857
In fact, in the Advanced Remix Workshop,
we do have one situation

19
00:01:12.857 --> 00:01:16.754
where we do import from a route module and
I'll explain why.

20
00:01:16.754 --> 00:01:21.600
But for the most part, you don't wanna
be importing from other modules or

21
00:01:21.600 --> 00:01:23.017
from route modules.

22
00:01:23.017 --> 00:01:26.025
That is the job of the Remix framework.

23
00:01:26.025 --> 00:01:31.509
Again, actually in practical situations,
this is very uncommon to have a loader

24
00:01:31.509 --> 00:01:37.083
that is exactly the same as a sibling, and
so I wouldn't worry too much about this.

25
00:01:37.083 --> 00:01:40.898
But if you did, then just put it in
a separate module and import it from both.

26
00:01:40.898 --> 00:01:46.918
&gt;&gt; Will each route turn into a separate
edge function when deploying to edge or

27
00:01:46.918 --> 00:01:50.851
will the whole Remix app
be deployed to the edge?

28
00:01:50.851 --> 00:01:54.315
&gt;&gt; Great question,
the whole Remix app, on the edge,

29
00:01:54.315 --> 00:01:57.468
in serverless environments, in particular,

30
00:01:57.468 --> 00:02:02.531
you typically have a limit to how big
a JavaScript file you can ship up there.

31
00:02:02.531 --> 00:02:03.543
And typically,

32
00:02:03.543 --> 00:02:08.392
you also have to compile all of your code
into a single file before you upload it.

33
00:02:08.392 --> 00:02:10.923
And so there's a limit to
how big that file can be.

34
00:02:10.923 --> 00:02:14.494
And so, yes, this can be
a concern in a large application,

35
00:02:14.494 --> 00:02:18.360
especially one that's using a lot
of dependencies and things.

36
00:02:18.360 --> 00:02:21.532
Typically, one megabyte worth
of JavaScript is like, wow,

37
00:02:21.532 --> 00:02:23.057
that's a lot of JavaScript.

38
00:02:23.057 --> 00:02:26.749
But it can totally happen in sizable apps.

39
00:02:26.749 --> 00:02:31.614
And currently Remix does not have
anything built in to chunk that out to

40
00:02:31.614 --> 00:02:37.073
separate individual functions that
will integrate seamlessly or whatever.

41
00:02:37.073 --> 00:02:41.745
However, actually just today,
I saw somebody share a tool that they

42
00:02:41.745 --> 00:02:46.516
are using to split up a Remix app
into multiple Cloudflare functions.

43
00:02:46.516 --> 00:02:50.470
So it is possible,
it's just not built into Remix.

44
00:02:50.470 --> 00:02:57.010
&gt;&gt; Will Remix add auth in
the future similar to remix-auth?

45
00:02:57.010 --> 00:02:59.897
&gt;&gt; Great question, will Remix add auth?

46
00:02:59.897 --> 00:03:04.807
Remix may in the future add
built-in authentication.

47
00:03:04.807 --> 00:03:11.217
The challenge is, so there's remix-auth,
a package created by Sergio,

48
00:03:11.217 --> 00:03:16.239
and it's great, I've used it and
it works pretty nicely.

49
00:03:16.239 --> 00:03:19.416
So if Remix were to build in auth,

50
00:03:19.416 --> 00:03:24.408
it might resemble something
like that package, but

51
00:03:24.408 --> 00:03:28.611
this app has auth and
here is the auth for it.

52
00:03:28.611 --> 00:03:31.575
It's like 100 lines of
code that you can change.

53
00:03:31.575 --> 00:03:35.323
And, I don't know, to me,

54
00:03:35.323 --> 00:03:40.019
this is a pretty simple cookie API.

55
00:03:40.019 --> 00:03:43.914
That's the only API in here
that is Remix specific,

56
00:03:43.914 --> 00:03:47.818
everything else is just
general JavaScript stuff.

57
00:03:47.818 --> 00:03:48.765
I kinda like that.

58
00:03:48.765 --> 00:03:56.140
If my auth can be written by myself,
then I'm going to do it that way.

59
00:03:56.140 --> 00:04:00.066
So I'm not sure even if Remix
could build it in or would,

60
00:04:00.066 --> 00:04:03.583
I'm not sure that it'd
be my preference anyway.

61
00:04:03.583 --> 00:04:08.482
But I understand that some people
want to just have everything built in

62
00:04:08.482 --> 00:04:12.398
out of the box,
it's gonna be all taken care of for you.

63
00:04:12.398 --> 00:04:15.130
And that's why we have the stacks,
it's already built for you.

64
00:04:15.130 --> 00:04:19.991
So I don't think,
I guess I can say that's not

65
00:04:19.991 --> 00:04:25.114
a priority currently for
the Remix team, yeah?

66
00:04:25.114 --> 00:04:30.716
&gt;&gt; Could you have
/posts/admin.tsx instead of

67
00:04:30.716 --> 00:04:37.671
moving that code into
/posts/admin/index.tsx?

68
00:04:37.671 --> 00:04:44.902
&gt;&gt; Yeah, so couldn't I just take this
stuff and put it inside of here?

69
00:04:44.902 --> 00:04:48.231
So there's a really important difference.

70
00:04:48.231 --> 00:04:54.897
So this file is the parent route, it's
the layout route, the one responsible for

71
00:04:54.897 --> 00:05:00.605
rendering what shows up when the admin
route is available or showing.

72
00:05:00.605 --> 00:05:02.498
This is what's responsible for

73
00:05:02.498 --> 00:05:05.870
when there are no other
children routes being rendered.

74
00:05:05.870 --> 00:05:07.591
And this is what's responsible for

75
00:05:07.591 --> 00:05:10.467
showing when the /new route
is currently being rendered.

76
00:05:10.467 --> 00:05:14.370
And so depending on what you
want to have show up and where,

77
00:05:14.370 --> 00:05:17.805
that's where you're gonna
be putting your code.

78
00:05:17.805 --> 00:05:21.305
And so we couldn't just take all of
this stuff and put it in the index.

79
00:05:21.305 --> 00:05:26.824
Because then when we go to the new route,
none of this stuff will be here, and

80
00:05:26.824 --> 00:05:32.452
I want this list of links to show up even
when I'm on the create new post route.

81
00:05:32.452 --> 00:05:37.352
So, yeah, where you put it
depends highly on where you want

82
00:05:37.352 --> 00:05:40.492
that UI to show up based on the routes.

83
00:05:40.492 --> 00:05:46.372
And there's an argument to be had for
sharing code.

84
00:05:46.372 --> 00:05:50.354
You could just put all this in a component
and render it in both of these routes.

85
00:05:50.354 --> 00:05:53.909
And there may be a situation or
a use case for that.

86
00:05:53.909 --> 00:05:58.440
I should also mention, we don't really
get into this in today's workshop.

87
00:05:58.440 --> 00:06:03.166
But if you wanted to have
a /post/admin/something else that was not

88
00:06:03.166 --> 00:06:06.930
wrapped by the admin route,
that didn't have this UI,

89
00:06:06.930 --> 00:06:11.278
there are use cases for that, and
I can show you one here in a sec.

90
00:06:11.278 --> 00:06:15.885
If you wanted to do that,
then you'd say, admin.whatever.tsx.

91
00:06:15.885 --> 00:06:19.433
And that dot says,
I want to be a slash in the URL, but

92
00:06:19.433 --> 00:06:23.483
I don't wanna be nested inside
of the admin parent, okay?

93
00:06:23.483 --> 00:06:29.262
And so now I can say, oops,
let's do a rmx component,

94
00:06:29.262 --> 00:06:32.668
return "admin whatever";.

95
00:06:32.668 --> 00:06:36.676
And now if I go to admin/whatever,
then it just shows admin whatever.

96
00:06:36.676 --> 00:06:41.608
So it's not gonna be a part of that
parent route even though it's that way in

97
00:06:41.608 --> 00:06:45.702
the URL segments, and
that's just a part of the convention.

98
00:06:45.702 --> 00:06:50.738
If we look at the npx remix routes now,
we'll get this route

99
00:06:50.738 --> 00:06:56.702
here that you can see is not a nested
route inside of the admin section.

100
00:06:56.702 --> 00:06:59.256
So that is possible, and
what is the use case?

101
00:06:59.256 --> 00:07:01.510
I've got a use case on my blog, actually.

102
00:07:01.510 --> 00:07:03.060
So my blog is the parent route.

103
00:07:03.060 --> 00:07:07.348
Every one of these blog posts
is a child of that parent.

104
00:07:07.348 --> 00:07:09.884
So it's /blog/useuemo-and-usecallback.

105
00:07:09.884 --> 00:07:14.017
But I don't really want that nested under
my big listing of all my blog posts,

106
00:07:14.017 --> 00:07:15.934
that wouldn't really make sense.

107
00:07:15.934 --> 00:07:21.459
And so
I have a blog.$ slug to make that work.

108
00:07:21.459 --> 00:07:26.124
&gt;&gt; Is it possible to nest admin.whatever
into admin/.whatever to keep

109
00:07:26.124 --> 00:07:31.422
the folder structure consistent with
nested routes regarding layout choices?

110
00:07:31.422 --> 00:07:33.774
&gt;&gt; Yeah, it is possible.

111
00:07:33.774 --> 00:07:37.640
Not with the built-in convention,
but as I was saying earlier,

112
00:07:37.640 --> 00:07:40.886
you can build your own
convention in the Remix config.

113
00:07:40.886 --> 00:07:46.091
And you could say routes,
I can't remember,

114
00:07:46.091 --> 00:07:49.037
it's an async function.

115
00:07:49.037 --> 00:07:52.744
And then you get
a defineRoutes thing here.

116
00:07:52.744 --> 00:07:57.241
And you do all your async stuff, and
oops, and then you return defineRoutes,

117
00:07:57.241 --> 00:07:59.231
and there's a whole API for this.

118
00:07:59.231 --> 00:08:00.002
But yes,

119
00:08:00.002 --> 00:08:05.504
you could define your own structure
to be whatever you want it to be.

120
00:08:05.504 --> 00:08:10.983
But currently, no, there's no way for you
to say, I wanna have an admin.whatever,

121
00:08:10.983 --> 00:08:15.349
but actually still put it inside of
the admin directory or whatever.

122
00:08:15.349 --> 00:08:16.250
Yeah, there's no way to do that.

