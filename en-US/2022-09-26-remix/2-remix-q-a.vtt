WEBVTT

1
00:00:00.480 --> 00:00:02.660
What is the tech stack
using Remix look like?

2
00:00:03.750 --> 00:00:04.780
&gt;&gt; Yeah, that's a great question.

3
00:00:04.780 --> 00:00:06.070
Use more than React, right?

4
00:00:06.070 --> 00:00:07.190
&gt;&gt; Yeah totally.

5
00:00:07.190 --> 00:00:11.702
So first on the React piece we
will support other frameworks in

6
00:00:11.702 --> 00:00:16.646
the future that is not the case now but
yeah Remix will support view,

7
00:00:16.646 --> 00:00:21.013
I'm thinking on the order of
months probably maybe weeks.

8
00:00:21.013 --> 00:00:22.492
In the next week or so

9
00:00:22.492 --> 00:00:28.250
we should release the Remix router which
is going to enable other frameworks.

10
00:00:28.250 --> 00:00:33.544
In fact there's already experimentation
and working experimentation of using

11
00:00:33.544 --> 00:00:38.694
the pre release of the Remix router with
view, angular and svelte and pre act.

12
00:00:38.694 --> 00:00:43.209
So that work has already been
done getting that into Remix is

13
00:00:43.209 --> 00:00:48.087
the next challenge but the new Remix
router has a lot of the really

14
00:00:48.087 --> 00:00:51.541
cool features that we're gonna talk about.

15
00:00:51.541 --> 00:00:55.515
What's cool about Remix itself, is that
it handles all the server rendering,

16
00:00:55.515 --> 00:00:58.070
the file-based conventions and
all that stuff.

17
00:00:58.070 --> 00:01:02.758
But a lot of the really great DX that you
experience with Remix can be used just

18
00:01:02.758 --> 00:01:05.920
with the Remix router and
that you could use today.

19
00:01:05.920 --> 00:01:11.379
I mean, it's a pre-release so, beware but
yeah, it's pretty basically done.

20
00:01:12.690 --> 00:01:17.206
So as far as other elements of the tech
stack because Remix is full stack

21
00:01:17.206 --> 00:01:20.496
you're gonna need some
server runtime to run it and

22
00:01:20.496 --> 00:01:24.185
Remix runs everywhere anywhere
you can run JavaScript.

23
00:01:24.185 --> 00:01:29.405
Maybe not IoT I don't know because some of
those have a small JavaScript environment.

24
00:01:29.405 --> 00:01:35.075
But for any modern JavaScript
runtime you can run Remix.

25
00:01:35.075 --> 00:01:39.430
So we even have one running in Bun,
we have official support for

26
00:01:39.430 --> 00:01:43.539
Dino and of course, and
then Cloudflare workers,

27
00:01:43.539 --> 00:01:49.240
Akamai EdgeWorkers, all of the things
wherever you can run JavaScript.

28
00:01:49.240 --> 00:01:51.920
So as far as hosting is concerned,
you're everywhere.

29
00:01:51.920 --> 00:01:54.082
And what's cool about that
is a lot of people are like,

30
00:01:54.082 --> 00:01:56.840
there's no way we're gonna
ship node in production.

31
00:01:56.840 --> 00:01:58.450
And that's fine.

32
00:01:58.450 --> 00:02:00.983
You're probably using Akamai or
one of these other CDN so

33
00:02:00.983 --> 00:02:04.200
you can still actually use
Remix in those environments.

34
00:02:04.200 --> 00:02:08.397
As far as like database it's
really whatever you want it to be.

35
00:02:08.397 --> 00:02:11.978
So at the top here we've got
an example of a route module and

36
00:02:11.978 --> 00:02:15.996
this loader function runs on
the server and so you can have it hit,

37
00:02:15.996 --> 00:02:20.918
you can have it make a fetch request to
another downstream API that you've got.

38
00:02:20.918 --> 00:02:24.216
If I were still at PayPal and
I were implementing Remix,

39
00:02:24.216 --> 00:02:25.770
that's what we would do.

40
00:02:25.770 --> 00:02:27.580
We actually wouldn't do fetch requests.

41
00:02:27.580 --> 00:02:30.650
We had like a bunch of modules for
accessing different services.

42
00:02:30.650 --> 00:02:34.065
So we just X those access
those services in the loader,

43
00:02:34.065 --> 00:02:37.410
as well as in the action for
mutating data.

44
00:02:37.410 --> 00:02:42.470
So however you want to do
that Remix has no opinion.

45
00:02:42.470 --> 00:02:46.007
Actually Remix we consider to be
center stack, so we're in charge

46
00:02:46.007 --> 00:02:49.935
of the network we'll take care of that
between the client and the server.

47
00:02:49.935 --> 00:02:54.233
We'll take care of that for you that's
actually as it turns out the hardest part

48
00:02:54.233 --> 00:02:58.830
of building web app is managing that
Chasm between the client and the server.

49
00:02:58.830 --> 00:03:00.480
So we manage that for you.

50
00:03:00.480 --> 00:03:07.480
And then further downstream on the back
end, you're responsible for that stuff.

51
00:03:07.480 --> 00:03:11.852
We do have if you don't wanna make all
these decisions, because I remember when I

52
00:03:11.852 --> 00:03:16.050
was making these decisions for my app,
it was like I don't do backend stuff.

53
00:03:16.050 --> 00:03:19.410
So I don't know what database to use and
or whatever.

54
00:03:19.410 --> 00:03:23.450
So we put together this really
cool thing called Remix.

55
00:03:23.450 --> 00:03:28.451
If you go to Remix.run/ stacks, these
Remix stacks that come pre configured

56
00:03:28.451 --> 00:03:33.621
with a bunch of tools, a hosting provider,
like all of the things that you want.

57
00:03:33.621 --> 00:03:38.511
And what's really cool about this is
you can actually make custom Stackins.

58
00:03:38.511 --> 00:03:43.910
So And they're all named after music
sub genres because of course they are.

59
00:03:43.910 --> 00:03:45.330
And so there is one.

60
00:03:45.330 --> 00:03:48.330
I think my favorite is
the Kpop stack by Netlify.

61
00:03:48.330 --> 00:03:52.426
And that one of course, the poison
Netlify uses Super Bass for the database,

62
00:03:52.426 --> 00:03:56.207
just like all the things and just
instructions in the read me of how to get

63
00:03:56.207 --> 00:03:59.360
things configured and connected and stuff.

64
00:03:59.360 --> 00:04:01.895
So, yeah, does that answer your question?

65
00:04:01.895 --> 00:04:05.587
Okay, sweet,
we're gonna be using the end stack today.

66
00:04:05.587 --> 00:04:10.039
&gt;&gt; Why in general is it not possible
to achieve the best UX with static site

67
00:04:10.039 --> 00:04:11.610
generation?

68
00:04:11.610 --> 00:04:15.052
&gt;&gt; Great question.
So, because the best UX is accomplished

69
00:04:15.052 --> 00:04:18.668
without, things popping
into place like this.

70
00:04:18.668 --> 00:04:20.811
Right.

71
00:04:20.811 --> 00:04:25.216
So if you are building a blog and
all it has a static content,

72
00:04:25.216 --> 00:04:31.033
then you're not going to get any different
UX whether you serve a render that or

73
00:04:31.033 --> 00:04:35.730
SSG that, and some people are like,
hold on a second with SSG.

74
00:04:35.730 --> 00:04:39.110
I can put that on a CDN and so
it's gonna be faster, right?

75
00:04:39.110 --> 00:04:42.786
Well, it turns out that for
decades now CDNs have been

76
00:04:42.786 --> 00:04:46.713
able to take a server rendered HTML and
save it on the CDN.

77
00:04:46.713 --> 00:04:50.674
And so
you get effectively the same UX anyway and

78
00:04:50.674 --> 00:04:54.942
then you have way more
flexibility if you SSR that.

79
00:04:54.942 --> 00:05:00.219
So SSG will be no better at serving
the user than SSR will even for

80
00:05:00.219 --> 00:05:03.060
a completely static site.

81
00:05:03.060 --> 00:05:05.835
And so
all that you're left with is okay, well,

82
00:05:05.835 --> 00:05:10.440
what about use cases where you're
loading unique data for each user?

83
00:05:10.440 --> 00:05:10.980
And yeah,

84
00:05:10.980 --> 00:05:14.955
you cannot tell me that the site on the
left is better than the site on the right.

85
00:05:14.955 --> 00:05:20.617
&gt;&gt; Right, If I have a marketing site
built with a headless CMS if there

86
00:05:20.617 --> 00:05:25.991
is no static doesn't it mean
calling my CMS for every request?

87
00:05:25.991 --> 00:05:29.240
&gt;&gt; Yeah that's a great question actually
what's interesting about that is every

88
00:05:29.240 --> 00:05:31.130
time you make a change to your content.

89
00:05:31.130 --> 00:05:35.866
You're calling your CMS for all the
content on your site to rebuild the whole

90
00:05:35.866 --> 00:05:40.390
site, and then you say, no, but
next is building ISR or whatever.

91
00:05:40.390 --> 00:05:44.189
Well, they actually just invented stay
while revalidate which CDN supported

92
00:05:44.189 --> 00:05:45.130
for years.

93
00:05:45.130 --> 00:05:48.108
So if you truly have a static site,

94
00:05:48.108 --> 00:05:53.430
you can use a CDN between your user and
the origin server.

95
00:05:53.430 --> 00:05:57.380
And now you're just hitting the CDN which
is exactly what you're doing with SSD.

96
00:05:57.380 --> 00:06:01.370
So again you can do everything from
the user experience standpoint,

97
00:06:01.370 --> 00:06:05.040
you can do everything with
SSR that you can do with SSD.

98
00:06:05.040 --> 00:06:06.180
And way more.

99
00:06:06.180 --> 00:06:09.060
&gt;&gt; Is there a way to get
props at run build time?

100
00:06:10.210 --> 00:06:14.559
&gt;&gt; It is possible to do things that
run only at build time that is not

101
00:06:14.559 --> 00:06:17.820
something that's built into Remix.

102
00:06:17.820 --> 00:06:21.254
&gt;&gt; Do each of these child or
children segments have their

103
00:06:21.254 --> 00:06:26.025
own loaders Like Sales Overview
wouldn't call the loader for invoices.

104
00:06:26.025 --> 00:06:27.689
&gt;&gt; Yes.
&gt;&gt; Is it one loader and

105
00:06:27.689 --> 00:06:30.690
it's all fetched on the server already?

106
00:06:30.690 --> 00:06:31.400
&gt;&gt; Yeah, great question.

107
00:06:31.400 --> 00:06:33.589
So each one of these, and
we'll talk about this, but

108
00:06:33.589 --> 00:06:37.460
each one of these will have its own loader
and they're all called concurrently.

109
00:06:37.460 --> 00:06:42.060
&gt;&gt; For a landing page,
how would you deal with SEO?

110
00:06:42.060 --> 00:06:44.510
&gt;&gt; We will sort of talk about that
we don't have an exercise on it.

111
00:06:44.510 --> 00:06:49.430
But you will see in a couple of spots
in the code where we've got stuff for

112
00:06:49.430 --> 00:06:53.531
SEO, but like the title and
the description and OG image and

113
00:06:53.531 --> 00:06:58.058
all that stuff, but yeah,
it's all just exports on your route.

114
00:06:59.965 --> 00:07:03.040
What about support for
lazy loading of components?

115
00:07:03.040 --> 00:07:06.002
&gt;&gt; Yeah react dot lazy
is totally supported and

116
00:07:06.002 --> 00:07:10.887
with streaming you can actually even
stream lazy loaded components from

117
00:07:10.887 --> 00:07:14.801
the server well,
&gt;&gt; Yeah, it works a little differently

118
00:07:14.801 --> 00:07:19.064
than that but yeah, you can use React
lazy with Remix, so lazy loading.

119
00:07:19.064 --> 00:07:23.868
You typically don't need to unless you've
got component that's like rendering

120
00:07:23.868 --> 00:07:27.833
some D3 chart and it only shows up
when the user changes some state or

121
00:07:27.833 --> 00:07:29.030
something pretty.

122
00:07:30.280 --> 00:07:35.370
Unusual use case but unusual use cases or
what we call the world.

123
00:07:35.370 --> 00:07:39.725
And so yeah, that's totally supported but
you normally don't need to worry about it

124
00:07:39.725 --> 00:07:43.368
because Remix automatically chunks
up each one of your routes anyway.

125
00:07:46.692 --> 00:07:50.520
Can you have multiple forms on
one page with his approach?

126
00:07:50.520 --> 00:07:51.210
&gt;&gt; Yes, absolutely.

127
00:07:51.210 --> 00:07:52.910
And we have an exercise for that.

128
00:07:52.910 --> 00:07:54.740
&gt;&gt; What is the benefit of forms?

129
00:07:54.740 --> 00:07:59.890
Is it used instead of fetch and
are there benefits that come with it?

130
00:07:59.890 --> 00:08:01.645
Or am I misunderstanding?

131
00:08:01.645 --> 00:08:02.440
Something.

132
00:08:02.440 --> 00:08:06.703
&gt;&gt; Yeah, so benefit of form
is the simple mental model,

133
00:08:06.703 --> 00:08:13.030
under the hood the form component that
Remix gives you is just doing a fetch.

134
00:08:13.030 --> 00:08:16.860
But what's cool about it is that it gives
you a simple mental model to work with.

135
00:08:18.140 --> 00:08:20.200
And we will definitely get
into that quite a bit.

136
00:08:21.430 --> 00:08:24.930
&gt;&gt; What's the main difference
between Remix and Next.

137
00:08:24.930 --> 00:08:26.480
&gt;&gt; Yeah that's a great question.

138
00:08:26.480 --> 00:08:32.863
We have a blog post that goes into really
deep in depth on Remix versus Next and

139
00:08:32.863 --> 00:08:39.270
I can't do it justice in a quick answer
here so I would defer to the blog post.

140
00:08:39.270 --> 00:08:44.060
But it really goes deep into the into
the difference between Remix and Next.

141
00:08:45.610 --> 00:08:47.940
&gt;&gt; How does Remix handle state management.

142
00:08:49.100 --> 00:08:50.700
&gt;&gt; What is state management?

143
00:08:50.700 --> 00:08:55.481
No just kidding but sort of not I'm gonna
to show you that you don't actually

144
00:08:55.481 --> 00:08:59.080
think about state management
when you're using Remix.

145
00:08:59.080 --> 00:09:04.630
No Redux, no Apollo, no Mob X, no React
Query, no application state management.

146
00:09:04.630 --> 00:09:07.590
&gt;&gt; You will of course
need state management for

147
00:09:07.590 --> 00:09:12.870
components that like a drop down or
different things like that autocomplete,

148
00:09:12.870 --> 00:09:15.750
so there is still use cases for
use state but

149
00:09:15.750 --> 00:09:20.790
yeah you can say goodbye to your
application state management libraries,

150
00:09:20.790 --> 00:09:24.600
which is like that's a big
deal folks like you.

151
00:09:24.600 --> 00:09:27.592
Probably half of the code
that you write if not more,

152
00:09:27.592 --> 00:09:30.270
is related to state management.

153
00:09:30.270 --> 00:09:35.237
You can just take all that and
throw it away when you're using Remix.

154
00:09:35.237 --> 00:09:39.370
Your Redux store is the database,
this is pretty rad.

155
00:09:39.370 --> 00:09:43.230
&gt;&gt; Can you get end to end
type safety working in Remix?

156
00:09:43.230 --> 00:09:44.220
&gt;&gt; Yes, you can.

157
00:09:44.220 --> 00:09:46.480
You will see that today and it is legit.

158
00:09:46.480 --> 00:09:47.870
It is so cool.

159
00:09:47.870 --> 00:09:49.860
Yeah, you're gonna experience that today.

160
00:09:49.860 --> 00:09:51.140
Ryan, you had a question.

161
00:09:51.140 --> 00:09:55.610
&gt;&gt; Is there any scenario where you
would not recommend using Remix?

162
00:09:55.610 --> 00:09:57.370
&gt;&gt; Yeah, good question.

163
00:09:57.370 --> 00:10:01.560
No.
[LAUGH] So here's here's the thing.

164
00:10:01.560 --> 00:10:04.394
I wouldn't say that Remix is
perfectly well suited for

165
00:10:04.394 --> 00:10:06.750
every use case that you
can have on the web.

166
00:10:06.750 --> 00:10:09.660
Like, let's say you're building a game,
and it's just one page.

167
00:10:09.660 --> 00:10:11.340
There are no routes.

168
00:10:11.340 --> 00:10:13.454
There aren't a lot of use cases like that,

169
00:10:13.454 --> 00:10:16.520
like even games are going to have
your user profile and stuff.

170
00:10:16.520 --> 00:10:18.900
You're gonna have routes but
let's just say that's what you're doing.

171
00:10:20.210 --> 00:10:22.180
What else are you gonna use?

172
00:10:22.180 --> 00:10:25.998
Is there anything else that would
service that use case better?

173
00:10:25.998 --> 00:10:29.416
I don't know what you're probably
going to use some libraries and

174
00:10:29.416 --> 00:10:31.255
stuff you can use those with Remix.

175
00:10:31.255 --> 00:10:37.117
Why not sure so that's why I say I can't
think of anything that I would use for

176
00:10:37.117 --> 00:10:40.243
any use case for anything that has a URL.

177
00:10:40.243 --> 00:10:43.539
I'm not just talking about UIs,

178
00:10:43.539 --> 00:10:48.491
I would build a web API for
a mobile app with Remix.

