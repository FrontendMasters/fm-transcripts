WEBVTT

1
00:00:00.710 --> 00:00:05.200
Let's make some dynamic params with remix.

2
00:00:05.200 --> 00:00:08.382
So I talked about Twitter as an example.

3
00:00:08.382 --> 00:00:11.446
Twitter actually has two dynamic params.

4
00:00:11.446 --> 00:00:13.610
For us, we just have the one.

5
00:00:13.610 --> 00:00:18.229
And so the first thing that we're
gonna do is create this file,

6
00:00:18.229 --> 00:00:20.679
app/routes/posts/$slug.

7
00:00:20.679 --> 00:00:25.530
That dollar sign indicates to Remix
that we want this to be a parameter.

8
00:00:25.530 --> 00:00:28.907
And so it will match anything
that comes after post,

9
00:00:28.907 --> 00:00:33.440
and call whatever that next segment is,
slug, in our code.

10
00:00:33.440 --> 00:00:36.468
So let's go to app/routes/posts.

11
00:00:36.468 --> 00:00:40.260
And we'll create a new
file called $slug.tsx.

12
00:00:40.260 --> 00:00:43.957
And in this,
we're going to have a Remix component, and

13
00:00:43.957 --> 00:00:46.940
I've got a handy little snippet for that.

14
00:00:46.940 --> 00:00:49.413
This is gonna be our PostRoute.

15
00:00:51.569 --> 00:00:58.800
And then we're going to just borrow some
of this JSX for what this is gonna return.

16
00:01:00.760 --> 00:01:05.464
And then we need to make a loader
that uses the slug param to

17
00:01:05.464 --> 00:01:08.017
find the blog post by its slug.

18
00:01:08.017 --> 00:01:12.874
And we're gonna create a new function
in the post server file to do that.

19
00:01:12.874 --> 00:01:15.000
So let's go do that here really quick.

20
00:01:15.000 --> 00:01:21.417
Here we'll export a function
called getPost, it takes a slug.

21
00:01:21.417 --> 00:01:24.505
We'll set that to, well,
I'll just set it to a string.

22
00:01:24.505 --> 00:01:29.073
And then return prisma.post.findUnique,

23
00:01:29.073 --> 00:01:35.490
where the slug is equal to
the one that we've been given.

24
00:01:35.490 --> 00:01:38.479
So now we have a way to
get a post by its slug.

25
00:01:38.479 --> 00:01:39.389
And in this case,

26
00:01:39.389 --> 00:01:43.761
we want to select everything because we're
going to be displaying the post including

27
00:01:43.761 --> 00:01:47.904
the title markdown, and potentially
the created at, and updated at, as well.

28
00:01:47.904 --> 00:01:52.493
So in this case, we don't need to have
a select clause or anything like that.

29
00:01:52.493 --> 00:01:56.466
So then in here,
we're gonna make a Remix loader.

30
00:01:56.466 --> 00:02:01.436
I've got a handy little snippet to import
all the stuff that we need for that.

31
00:02:01.436 --> 00:02:06.754
And we're going to get our
post from await getPost.

32
00:02:06.754 --> 00:02:11.874
And the post accepts the slug, so
we need to get the slug from somewhere.

33
00:02:11.874 --> 00:02:15.064
So this is the dynamic route params part.

34
00:02:15.064 --> 00:02:22.864
We are going to get a params option
in the arguments of our loader.

35
00:02:22.864 --> 00:02:28.530
And params has a slug on it
because the name of our file.

36
00:02:28.530 --> 00:02:34.470
So if we name this postId,
then this would be postId.

37
00:02:34.470 --> 00:02:36.290
Whatever the name of your file is,
that's the convention.

38
00:02:36.290 --> 00:02:39.425
So we'll say slug,
because I want it to be slug.

39
00:02:42.102 --> 00:02:44.111
Okay, great, so now we have our post.

40
00:02:44.111 --> 00:02:48.030
We'll just stick that in here as part
of the JSON data that we send back.

41
00:02:48.030 --> 00:02:49.630
Turns out we don't need the request,
so I'll delete that.

42
00:02:50.720 --> 00:02:53.220
And now our data has our post.

43
00:02:53.220 --> 00:02:55.960
So I'll just say data.post.title.

44
00:02:55.960 --> 00:02:57.830
Now we've got TypeScript
complaining about a few things.

45
00:02:57.830 --> 00:03:00.597
But let's just leave it here for now,

46
00:03:00.597 --> 00:03:05.369
just to make sure that everything
is working as expected, okay?

47
00:03:05.369 --> 00:03:09.223
So if I go to my first post,
ta-da, there we are.

48
00:03:09.223 --> 00:03:13.733
And then, A Mixtape I Made Just For
You, and that is working, so we are.

49
00:03:13.733 --> 00:03:16.806
And actually, we can take a look
at the network request too,

50
00:03:16.806 --> 00:03:20.012
to make sure that the loader is
sending back the data we expect.

51
00:03:20.012 --> 00:03:21.708
Which it is.

52
00:03:21.708 --> 00:03:28.428
Just in review, we created a getPost
function to get a post by its slug,

53
00:03:28.428 --> 00:03:33.020
and then a simple remix
route that has a loader and

54
00:03:33.020 --> 00:03:37.175
a component for using that loader's data.

55
00:03:38.915 --> 00:03:40.365
Yes, Mark?

56
00:03:40.365 --> 00:03:42.900
&gt;&gt; How do you prevent prop
drilling in a larger app?

57
00:03:42.900 --> 00:03:46.984
Can you use,
useLoaderData in a child component, or

58
00:03:46.984 --> 00:03:51.457
do you have to pass data
from route component down?

59
00:03:51.457 --> 00:03:52.567
&gt;&gt; Yeah, great question.

60
00:03:52.567 --> 00:03:57.479
So yes, so for everybody,
terms and all that.

61
00:03:57.479 --> 00:04:02.154
So we've got our Title
component that's gonna be in

62
00:04:02.154 --> 00:04:08.060
charge of rendering out the title for
our post, right?

63
00:04:08.060 --> 00:04:13.922
So a couple of options here,
we can either accept the title and

64
00:04:13.922 --> 00:04:16.970
just render that title out.

65
00:04:16.970 --> 00:04:18.324
That is one option.

66
00:04:18.324 --> 00:04:24.717
And in that case, you would technically be
prop drilling to make that work, right?

67
00:04:24.717 --> 00:04:27.556
Or you can, as the question asker asked,

68
00:04:27.556 --> 00:04:32.031
you can actually use useLoaderData
directly in this component.

69
00:04:32.031 --> 00:04:33.360
And that totally works.

70
00:04:33.360 --> 00:04:37.573
So wherever the component
appears in the route hierarchy,

71
00:04:37.573 --> 00:04:43.410
it will just find the closest parent
route and get the data for that one.

72
00:04:43.410 --> 00:04:45.760
So yes, you can avoid it that way.

73
00:04:45.760 --> 00:04:50.399
In practice, interestingly,
I don't find myself making

74
00:04:50.399 --> 00:04:54.865
very many subcomponents that
care about the route data.

75
00:04:54.865 --> 00:04:58.342
You will obviously, or
I shouldn't say obviously.

76
00:04:58.342 --> 00:05:03.164
But it is very common practice to make
reusable components like a component

77
00:05:03.164 --> 00:05:04.551
library and things.

78
00:05:04.551 --> 00:05:08.840
And those things really never care about
where the data is coming from, right?

79
00:05:08.840 --> 00:05:10.010
They always accept props.

80
00:05:10.010 --> 00:05:13.030
So yeah,
you'll absolutely be passing props.

81
00:05:13.030 --> 00:05:16.647
But for the specific routes
that you're talking about,

82
00:05:16.647 --> 00:05:21.550
especially since they're nested,
they typically don't get very large.

83
00:05:21.550 --> 00:05:24.930
And so I don't find myself even
making multiple components.

84
00:05:24.930 --> 00:05:29.600
And when I do, it's only two or three
additional components for a given route.

85
00:05:29.600 --> 00:05:34.280
And that is just part of
the magic of nested routing, yeah.

86
00:05:34.280 --> 00:05:37.045
&gt;&gt; What if you have nested
dynamic segments and

87
00:05:37.045 --> 00:05:41.590
need to access the loader data
from the parent dynamic segment?

88
00:05:41.590 --> 00:05:42.480
&gt;&gt; Yeah, that's a great question.

89
00:05:42.480 --> 00:05:46.216
So if we're building Twitter, and

90
00:05:46.216 --> 00:05:50.201
then we're gonna have username, and

91
00:05:50.201 --> 00:05:56.190
then we'll have the status,
and then tweetId, right?

92
00:05:56.190 --> 00:05:58.260
So that's the structure
that you would have.

93
00:05:58.260 --> 00:06:02.533
And then you've got params here.

94
00:06:02.533 --> 00:06:09.830
You'll have a params.username and
a params.tweetId.

95
00:06:09.830 --> 00:06:15.380
I should also mention that params is
accessible even from the root component.

96
00:06:15.380 --> 00:06:18.480
So you don't have to be in a nested
component to know what the params are.

97
00:06:18.480 --> 00:06:23.070
Even the root component
can know what those are.

98
00:06:23.070 --> 00:06:28.460
I should say, I actually don't know
whether that's the case for the loaders.

99
00:06:28.460 --> 00:06:29.862
I would have to play around with that.

100
00:06:29.862 --> 00:06:34.740
But most of the time, I can't think of
a use case off the top of my head where

101
00:06:34.740 --> 00:06:38.307
the loader would need to
know what the subparams are.

102
00:06:38.307 --> 00:06:43.219
But in the component, for sure,
you have this useParams hook that

103
00:06:43.219 --> 00:06:48.316
gives you access to the params
wherever they are in the application.

