WEBVTT

1
00:00:00.880 --> 00:00:03.907
Then let's talk about the prefetching.

2
00:00:03.907 --> 00:00:10.258
So, if I go to the post route,
I've got a list of posts here.

3
00:00:10.258 --> 00:00:12.211
If I go to slow 3G and click on this,

4
00:00:12.211 --> 00:00:16.852
there are a couple of things that are
loading, the favicon, that doesn't matter.

5
00:00:16.852 --> 00:00:18.656
That's not gonna be cached, whatever.

6
00:00:18.656 --> 00:00:22.420
I'm talking about the data for
this post, as well as the code for

7
00:00:22.420 --> 00:00:23.683
rendering the post.

8
00:00:23.683 --> 00:00:25.762
Remember, we code split on every route.

9
00:00:25.762 --> 00:00:29.313
And so, the code for this particular
route, even though there's not much of it,

10
00:00:29.313 --> 00:00:30.606
we are still going to load it.

11
00:00:30.606 --> 00:00:35.896
Now, cool thing is that because
Remix knows all of the data,

12
00:00:35.896 --> 00:00:41.823
it knows which route is going to be
active just by looking at the URL.

13
00:00:41.823 --> 00:00:45.207
So, that means as soon as we navigate
there, Remix is, like I'm gonna need this

14
00:00:45.207 --> 00:00:47.752
data and I'm gonna need this code,
and it just goes and gets it.

15
00:00:47.752 --> 00:00:48.786
That's pretty great.

16
00:00:48.786 --> 00:00:51.900
So, we don't have to wait for
the code to load and then render it, and

17
00:00:51.900 --> 00:00:53.586
then that's gonna go load our data.

18
00:00:53.586 --> 00:00:57.527
We don't have that waterfall,
that stairstep waterfall,

19
00:00:57.527 --> 00:00:59.856
we have a straight down waterfall.

20
00:00:59.856 --> 00:01:00.688
That said,

21
00:01:00.688 --> 00:01:05.935
it would be really cool if because Remix
knows exactly what I'm looking for

22
00:01:05.935 --> 00:01:10.782
when I click on it, it actually knows
where those links are gonna go.

23
00:01:10.782 --> 00:01:15.921
And so, if I just say, hey, Remix,
I want you to load all this stuff for

24
00:01:15.921 --> 00:01:21.082
this URL, then we can have it actually
all prefetched and in the cache.

25
00:01:21.082 --> 00:01:24.579
And so that's what we're going to do for
a couple of things.

26
00:01:24.579 --> 00:01:29.832
So we'll go to our index
that lists all of our posts.

27
00:01:29.832 --> 00:01:35.552
And on these links,
we're going to add prefetch="intent".

28
00:01:35.552 --> 00:01:39.349
There are a couple options here,
you can also do render or none.

29
00:01:39.349 --> 00:01:43.067
none is the default behavior,
it's like not having this at all.

30
00:01:43.067 --> 00:01:46.526
render is when this is rendered,
I want you to prefetch it.

31
00:01:46.526 --> 00:01:49.557
But not a whole lot of use cases for
that, but there are some.

32
00:01:49.557 --> 00:01:53.016
You don't wanna load your entire
application upfront, right?

33
00:01:53.016 --> 00:01:57.773
So, maybe sort of just use that for stuff
you're like, I am 99% confident as soon as

34
00:01:57.773 --> 00:02:01.308
they're done with this,
they're gonna want to go over there.

35
00:02:01.308 --> 00:02:03.685
So that's a use case for that.

36
00:02:03.685 --> 00:02:08.815
Intent is if the user started to
tap on it on their mobile device,

37
00:02:08.815 --> 00:02:13.755
or they've hovered over it,
they focused on it, whatever,

38
00:02:13.755 --> 00:02:16.324
then we're going to prefetch.

39
00:02:16.324 --> 00:02:23.358
And that's all that you need to do for
prefetching for this URL.

40
00:02:23.358 --> 00:02:26.764
I don't know of another framework
that allows you to do it that easily.

41
00:02:26.764 --> 00:02:30.425
So, now we come over here,
so I hover over it and

42
00:02:30.425 --> 00:02:35.473
it's prefetching, so
by the time I click on it, it's instant.

43
00:02:35.473 --> 00:02:41.083
And that, my friends, is use the platform
cuz this was in the prefetch cache.

44
00:02:41.083 --> 00:02:44.056
Tada, hooray!

45
00:02:44.056 --> 00:02:46.915
Pretty cool, nice and fast.

46
00:02:46.915 --> 00:02:54.515
It's definitely a low effort, high return
or high reward thing that you can do for

47
00:02:54.515 --> 00:02:58.822
links the users are commonly
use clicking on.

48
00:02:58.822 --> 00:03:03.763
So we can do the same thing for
our create thing and for this link.

49
00:03:03.763 --> 00:03:07.940
The other thing,
we're not gonna talk about this today, but

50
00:03:07.940 --> 00:03:13.099
if you look at the root.tsx of any of
these, we have an export called links.

51
00:03:13.099 --> 00:03:17.454
This is for style sheets,
you could link image, or

52
00:03:17.454 --> 00:03:21.724
do a preconnect, or fonts,
or whatever in here.

53
00:03:21.724 --> 00:03:25.957
So Remix will actually prefetch these too.

54
00:03:25.957 --> 00:03:29.310
So you can have it prefetch
your images if you want to.

55
00:03:29.310 --> 00:03:34.276
I think the Chrome web team suggests
you don't prefetch images for

56
00:03:34.276 --> 00:03:36.766
some reason, I don't know why.

57
00:03:36.766 --> 00:03:40.392
But yeah,
we can prefetch whatever you want

58
00:03:40.392 --> 00:03:44.811
to that's in your links export for
that route, too.

59
00:03:44.811 --> 00:03:48.792
Makes your app feel pretty dang fast,
if you ask me.

60
00:03:48.792 --> 00:03:51.573
And that is prefetching.

61
00:03:51.573 --> 00:03:54.100
This is why we bring in JavaScript.

62
00:03:54.100 --> 00:03:57.421
If it weren't for
a number of things, I guess,

63
00:03:57.421 --> 00:04:01.407
then the regular full refresh
every page is like, yeah,

64
00:04:01.407 --> 00:04:05.659
that's fine, whatever, it works,
the browser can do it.

65
00:04:05.659 --> 00:04:07.481
But if we have JavaScript,

66
00:04:07.481 --> 00:04:11.692
then might as well use it to make
an excellent user experience.

67
00:04:13.135 --> 00:04:15.594
Animations, transitions, stuff like that.

68
00:04:15.594 --> 00:04:20.136
&gt;&gt; Does Remix do server side
streaming out-of-the-box or-

69
00:04:20.136 --> 00:04:20.749
&gt;&gt; Yeah,

70
00:04:20.749 --> 00:04:24.439
yeah, Remix does server side streaming.

71
00:04:24.439 --> 00:04:31.310
Now, keep in mind, not all of the popular
hosts will support streaming.

72
00:04:31.310 --> 00:04:35.739
So, anything built on AWS Lambda,
no streaming.

73
00:04:35.739 --> 00:04:39.052
What they do, you can do streaming,
but what it does is

74
00:04:39.052 --> 00:04:43.966
it will buffer everything and then it will
send it, which is a real crying shame.

75
00:04:43.966 --> 00:04:48.968
So anything built on that, but Deno,
so Netlify builds their thing on AWS,

76
00:04:48.968 --> 00:04:54.305
but their edge functions are pretty,
that's built on Deno, that'll stream.

77
00:04:54.305 --> 00:04:56.268
Vercel, also built on AWS, but

78
00:04:56.268 --> 00:05:01.592
they have their middleware thing that runs
on CloudFlare workers, that will stream.

79
00:05:01.592 --> 00:05:04.187
And then, of course, Node can stream.

80
00:05:04.187 --> 00:05:10.072
And this project is already built to,
no, not this one.

81
00:05:10.072 --> 00:05:14.729
But when you go to the Indie Stack,

82
00:05:14.729 --> 00:05:19.231
I'll just show it really quick.

83
00:05:19.231 --> 00:05:22.072
So when you bootstrap your own app,

84
00:05:22.072 --> 00:05:27.856
this is all built in to do the render
to pipeable stream thing from React.

85
00:05:27.856 --> 00:05:30.915
So yeah, it's all ready for
you to stream, and it's great.

86
00:05:30.915 --> 00:05:34.438
And we'll talk about it in
the Advanced Remix Workshop as well.

87
00:05:37.262 --> 00:05:41.812
Yeah, that's where we start getting
outrageously really cool performance

88
00:05:41.812 --> 00:05:46.572
characteristics and nice levers to decide
what tradeoffs you're happy with and

89
00:05:46.572 --> 00:05:48.328
stuff, it's really great.

90
00:05:48.328 --> 00:05:51.535
Cool, all right, so that was super fun.

91
00:05:51.535 --> 00:05:55.860
Thanks for joining me on this adventure of
Progressive Enhancement and Exercise 6.

