WEBVTT

1
00:00:00.090 --> 00:00:01.168
Great, welcome back.

2
00:00:01.168 --> 00:00:05.522
So, there were a couple of questions in
the chat during the exercise that I wanted

3
00:00:05.522 --> 00:00:09.140
to address before we actually
go through this together.

4
00:00:09.140 --> 00:00:11.660
And they were revolving
around revalidating.

5
00:00:11.660 --> 00:00:15.774
So, when you make a form submission and
that form submission is successful,

6
00:00:15.774 --> 00:00:19.375
Remix will revalidate all of
the data that's on the page.

7
00:00:19.375 --> 00:00:23.170
First, I will say that there are some use
cases where you don't want to revalidate

8
00:00:23.170 --> 00:00:24.525
on all the data on the page.

9
00:00:24.525 --> 00:00:27.585
And we have definitely thought
about this use case but

10
00:00:27.585 --> 00:00:32.277
we haven't landed on an API that we feel
really confident in saying it's stable,

11
00:00:32.277 --> 00:00:34.730
and so it's prefixed as unstable.

12
00:00:34.730 --> 00:00:36.123
And you can totally use it today.

13
00:00:36.123 --> 00:00:39.607
We are satisfied with the use case,
we're just not sure about the API,

14
00:00:39.607 --> 00:00:41.422
that's why its prefix is unstable.

15
00:00:41.422 --> 00:00:45.989
It's called should Reload and
it's unstable underscore should reload and

16
00:00:45.989 --> 00:00:48.911
that runs in In the client
to determine whether or

17
00:00:48.911 --> 00:00:51.565
not a particular route should revalidate.

18
00:00:51.565 --> 00:00:56.724
You can think of that as sort of like
the comparator argument to react up demo.

19
00:00:56.724 --> 00:01:01.002
You may never have used that before but
it's the second argument to react on demo,

20
00:01:01.002 --> 00:01:04.598
that allows you to compare the props
to decide whether that component

21
00:01:04.598 --> 00:01:06.967
should re-render very similar in concept.

22
00:01:06.967 --> 00:01:12.729
Another person asked about, Martin,
asked about whether, If there's any

23
00:01:12.729 --> 00:01:18.317
way to trigger a revalidation imperatively
to just revalidate the current

24
00:01:18.317 --> 00:01:24.720
route because they have some data that
they just wanna keep fresh on the client.

25
00:01:24.720 --> 00:01:26.337
This is possible to do and

26
00:01:26.337 --> 00:01:31.080
I'm not gonna dive into how to
accomplish that in this workshop.

27
00:01:31.080 --> 00:01:35.428
One thing I wanted to mention and
why I wanted to answer this question

28
00:01:35.428 --> 00:01:38.794
is they mentioned that
they can't use WebSockets.

29
00:01:38.794 --> 00:01:43.729
Remix actually supports streaming and
Server Sent Events,

30
00:01:43.729 --> 00:01:48.190
which may be something you
haven't ever used before.

31
00:01:48.190 --> 00:01:51.341
I know it wasn't something I use because
I skip straight to WebSockets because

32
00:01:51.341 --> 00:01:53.312
WebSockets was the new hotness and
everything.

33
00:01:53.312 --> 00:01:56.079
Server Sent Events
are actually pretty cool and

34
00:01:56.079 --> 00:01:59.780
are have been part of the web standard for
quite some time.

35
00:01:59.780 --> 00:02:04.058
It's basically a long lived HTTP
request that the server can send

36
00:02:04.058 --> 00:02:09.100
additional stuff over time,
just stream new stuff in overtime.

37
00:02:09.100 --> 00:02:13.312
The client cannot communicate the other
direction, that's one of the reasons why

38
00:02:13.312 --> 00:02:17.290
people just went to WebSockets cuz
WebSockets have more capabilities.

39
00:02:17.290 --> 00:02:21.810
But for a lot of use cases, all you need
is the server sending stuff to the client.

40
00:02:21.810 --> 00:02:27.172
So, there's this demo by
Jacob EB on the Remix team,

41
00:02:27.172 --> 00:02:31.828
where he shows how to
create a resource route.

42
00:02:31.828 --> 00:02:37.040
So here's our loader that
creates a readable stream that

43
00:02:37.040 --> 00:02:42.490
which is like web platform mdn or
mdn.Io readable stream.

44
00:02:42.490 --> 00:02:48.580
This is again, another web platform
thing that you have access to in Remix.

45
00:02:48.580 --> 00:02:53.507
And to have a readable stream as the
response that you send to keep that long

46
00:02:53.507 --> 00:02:55.750
lived HTTP request going.

47
00:02:55.750 --> 00:02:59.040
And then inside of that you just
use the API, the controller,

48
00:02:59.040 --> 00:03:02.530
to enqueue different events
that you're sending along.

49
00:03:02.530 --> 00:03:06.577
And then on the client, you can use
this event source thing, which again,

50
00:03:06.577 --> 00:03:09.727
web platform thing to subscribe
to that resource route and

51
00:03:09.727 --> 00:03:11.680
then get those events as you go.

52
00:03:11.680 --> 00:03:15.618
And so, if you have a situation where
there's only one specific piece of data

53
00:03:15.618 --> 00:03:17.372
that I just need to keep up to date,

54
00:03:17.372 --> 00:03:22.120
I don't need to revalidate everything
on the page, every minute or whatever.

55
00:03:22.120 --> 00:03:25.880
Then you could totally go for
something like this, and

56
00:03:25.880 --> 00:03:28.670
it would probably serve you quite well.

57
00:03:29.840 --> 00:03:33.676
Certainly would be a little less resource
intensive than what you're trying to do

58
00:03:33.676 --> 00:03:37.170
with, just revalidating
everything every single time.

59
00:03:37.170 --> 00:03:39.550
And this is just a demo for his thing.

60
00:03:39.550 --> 00:03:41.590
I think it's actually pretty cool.

61
00:03:41.590 --> 00:03:45.430
It'll just show how many people
are looking at the site at once.

