WEBVTT

1
00:00:00.000 --> 00:00:03.987
All right, so mutations,
we're going to create a post.

2
00:00:03.987 --> 00:00:08.256
So the first thing I wanna do is go into
this post server to have the create thing,

3
00:00:08.256 --> 00:00:12.168
and then we'll go into the new TSX,
so we can actually do that creation.

4
00:00:12.168 --> 00:00:16.100
So we'll come into our models post.server,
and

5
00:00:16.100 --> 00:00:20.412
we're going to export
a function called createPost.

6
00:00:20.412 --> 00:00:25.686
And that takes a title slug and
markdown as an object.

7
00:00:25.686 --> 00:00:28.872
And I'm gonna just type this as any for
now, we'll come back later and

8
00:00:28.872 --> 00:00:30.613
make TypeScript happier about this.

9
00:00:30.613 --> 00:00:38.187
And we'll return prisma, yeah,
thank you copilot, that works.

10
00:00:38.187 --> 00:00:44.989
Okay, so we're gonna create a new post
with the title slug and markdown.

11
00:00:44.989 --> 00:00:50.993
And then in our new.tsx, we're gonna
use that as part of our action.

12
00:00:50.993 --> 00:00:56.165
So I'm actually gonna jump down to
the JSX first, we're gonna update this

13
00:00:56.165 --> 00:01:01.519
to a capital form, capital F form and
bring that in from remix-run/react.

14
00:01:01.519 --> 00:01:04.412
And this is what's going
to be responsible for

15
00:01:04.412 --> 00:01:07.539
doing the fetch request
that posts the form data.

16
00:01:07.539 --> 00:01:13.083
So when the form is submitted, it will
serialize all of the form elements,

17
00:01:13.083 --> 00:01:17.228
the same way that the browser
would to submit this form.

18
00:01:17.228 --> 00:01:19.872
And I'll actually talk a little
bit more about that later.

19
00:01:19.872 --> 00:01:23.701
So we're also going to
add a method of post,

20
00:01:23.701 --> 00:01:28.785
because the default for
forms is to have the method be get.

21
00:01:28.785 --> 00:01:32.547
Which means it will take
the form values and

22
00:01:32.547 --> 00:01:37.667
serialize them as a URL query string and
do a get to whatever

23
00:01:37.667 --> 00:01:42.492
URL that you're posting to or
getting to, I suppose.

24
00:01:42.492 --> 00:01:46.363
So we want to do a post, and
because Remix is a browser emulator,

25
00:01:46.363 --> 00:01:50.325
it has the same prompts that
a regular form would have for method.

26
00:01:50.325 --> 00:01:55.002
Which means also actually that the form
has an action prop where you can do

27
00:01:55.002 --> 00:01:58.155
whatever API route or
whatever you want it to be.

28
00:01:58.155 --> 00:02:03.360
That's again right from the web platform,
and this will work exactly the same.

29
00:02:03.360 --> 00:02:07.205
And the web platform,
if you don't have an action, it just says,

30
00:02:07.205 --> 00:02:08.932
post this to the current URL.

31
00:02:08.932 --> 00:02:13.878
And so we're still just following
the conventions of the web platform in

32
00:02:13.878 --> 00:02:15.183
this case as well.

33
00:02:15.183 --> 00:02:19.733
Okay, so we've got our form, and that's
all that we're gonna do in our JSX here.

34
00:02:19.733 --> 00:02:24.397
So now we need to implement an action,
because if we try to go and

35
00:02:24.397 --> 00:02:29.244
create a new post,
we're gonna get a 405 method not allowed.

36
00:02:29.244 --> 00:02:33.366
That's coming from Remix, and it's telling
us, hey, you posted to a route that

37
00:02:33.366 --> 00:02:37.403
doesn't have an action, there's no way
to handle that method, not allowed.

38
00:02:37.403 --> 00:02:40.623
You're doing a post,
this route only supports gets,

39
00:02:40.623 --> 00:02:42.941
and it sends back HTML when you do that.

40
00:02:42.941 --> 00:02:46.833
So sorry, that's not gonna work for us.

41
00:02:46.833 --> 00:02:48.480
So let's handle that.

42
00:02:48.480 --> 00:02:52.622
We're gonna export a function,
that's typically an async function for

43
00:02:52.622 --> 00:02:54.436
actions as well called action.

44
00:02:54.436 --> 00:02:58.696
We're gonna take the request,
and this is gonna be ActionArgs,

45
00:02:58.696 --> 00:03:01.876
which we're gonna get from Remix-run/node.

46
00:03:01.876 --> 00:03:03.331
That's a type.

47
00:03:03.331 --> 00:03:08.165
And with that request,
it's gonna have the form body.

48
00:03:08.165 --> 00:03:12.717
So actually, let's go,
yeah todo, hold on this.

49
00:03:12.717 --> 00:03:16.353
And let's just take a look at what the
browser or what Remix is going to do for

50
00:03:16.353 --> 00:03:17.878
us when we do this create post.

51
00:03:17.878 --> 00:03:22.303
It's gonna blow up, but
let's see what that request looked like.

52
00:03:22.303 --> 00:03:26.300
So just widen this in big in that.

53
00:03:26.300 --> 00:03:32.808
So the headers, actually, well, there
is one important piece of this header.

54
00:03:32.808 --> 00:03:38.356
And that is the content of the request
headers, the content type,

55
00:03:38.356 --> 00:03:42.426
application/x-www-form-url-encoded.

56
00:03:42.426 --> 00:03:45.920
The X prefix is actually fun
little story about this,

57
00:03:45.920 --> 00:03:48.793
if you submit like
a regular form on the web,

58
00:03:48.793 --> 00:03:53.939
it's always gonna have this X prefix,
that's because it was experimental.

59
00:03:53.939 --> 00:03:57.814
And then it shipped that way, and
then everybody built around it, and

60
00:03:57.814 --> 00:04:00.583
now we can never change it,
so welcome to the web.

61
00:04:00.583 --> 00:04:05.206
[LAUGH] So it was never actually supposed
to be used and then everybody used it.

62
00:04:05.206 --> 00:04:07.517
So but this is a URL encoded form, so

63
00:04:07.517 --> 00:04:12.304
if we look at the payload,
we're gonna see title, slug, and markdown.

64
00:04:12.304 --> 00:04:14.739
This is maybe a bad example
because I didn't put anything.

65
00:04:14.739 --> 00:04:19.540
So this is the title, this is this slug,

66
00:04:19.540 --> 00:04:23.511
and markdown array, whatever.

67
00:04:23.511 --> 00:04:26.380
Okay, so if we do that again,
now we look and

68
00:04:26.380 --> 00:04:29.029
see the payload has all of those values.

69
00:04:29.029 --> 00:04:33.139
Now, the browser is actually parsed this
to make it nice and presentable, but

70
00:04:33.139 --> 00:04:36.452
if you look at the source,
this is what it actually looks like.

71
00:04:36.452 --> 00:04:40.718
So this is what you're like if you had an
express server put in place or whatever,

72
00:04:40.718 --> 00:04:45.005
and you wanted to look at what the post
body was, that's what it would look like.

73
00:04:45.005 --> 00:04:48.801
And so yeah, and if we wanna look
at the URL encoded and stuff,

74
00:04:48.801 --> 00:04:50.775
it's kind of fancy stuff here.

75
00:04:50.775 --> 00:04:55.425
But the point is this is form data, and
this is the way that the browser does it,

76
00:04:55.425 --> 00:04:58.751
so Remix is again just emulating
what the browser does.

77
00:04:58.751 --> 00:05:03.991
So for us, we want to get
the form data out of the request.

78
00:05:03.991 --> 00:05:07.137
Well, it turns out that
this request object is

79
00:05:07.137 --> 00:05:09.725
just a regular fetch request object.

80
00:05:09.725 --> 00:05:15.307
And just like it has a JSON or
maybe some of you know that a request and

81
00:05:15.307 --> 00:05:20.903
response has a text that you can
also call, it also has a form data.

82
00:05:20.903 --> 00:05:25.648
And that's a sink, just like JSON and
text, and now you get a form data object.

83
00:05:25.648 --> 00:05:27.936
And if you're like,
what the heck is a form data objects?

84
00:05:27.936 --> 00:05:33.172
Well, you can go to MDN and
learn all about form data.

85
00:05:33.172 --> 00:05:38.103
Because this again is Remix,
not hiding the platform from you, but

86
00:05:38.103 --> 00:05:40.353
exposing the platform to you so

87
00:05:40.353 --> 00:05:45.475
that you can build out your application
using the web as a foundation.

88
00:05:45.475 --> 00:05:46.929
I think this is really great.

89
00:05:46.929 --> 00:05:50.148
The better you get at Remix,
the better you get at the web,

90
00:05:50.148 --> 00:05:52.603
that is one of the things
I love about Remix.

91
00:05:52.603 --> 00:05:53.703
Okay, great.

92
00:05:53.703 --> 00:05:58.464
So now we've got our form data,
this is maybe some of you might not like

93
00:05:58.464 --> 00:06:03.385
this part so much, because formed data,
to get things out of form data,

94
00:06:03.385 --> 00:06:08.651
you have to use this .getapi, which is
probably not my favorite thing ever.

95
00:06:08.651 --> 00:06:11.975
Because what I'd much rather do is
actually what copilot wants me to do here

96
00:06:11.975 --> 00:06:15.007
and just like distract structure
all of those things off form data.

97
00:06:15.007 --> 00:06:17.026
Here's the reason why you can't do that.

98
00:06:17.026 --> 00:06:21.871
Because in a form,
it's totally an acceptable

99
00:06:21.871 --> 00:06:27.087
thing to have multiple of
the same named elements.

100
00:06:27.087 --> 00:06:31.374
Okay, so you can have multiple those, this
is good for checkboxes or if you've got

101
00:06:31.374 --> 00:06:35.252
like a list of things, and you wanna
add arbitrary number of those things.

102
00:06:35.252 --> 00:06:38.865
And so for that reason, you can't just
have it be an object because there could

103
00:06:38.865 --> 00:06:40.247
be multiple of those things.

104
00:06:40.247 --> 00:06:45.224
And that's why form data has a getAll, or
you can say get me all the titles, and

105
00:06:45.224 --> 00:06:48.854
then that will return an array
of form data entry values.

106
00:06:48.854 --> 00:06:50.970
And we'll talk more about that too.

107
00:06:50.970 --> 00:06:55.925
But yeah, this is a key thing that
maybe I glossed over a tiny bit, but

108
00:06:55.925 --> 00:07:01.925
the name of each input is what the name of
the form data that you're gonna retrieve.

109
00:07:01.925 --> 00:07:05.580
So we're gonna get the title,
the slug, and the markdown.

110
00:07:05.580 --> 00:07:07.915
And if I wanted to change this to content,

111
00:07:07.915 --> 00:07:10.929
then I would say formData
getContent to get that one.

112
00:07:10.929 --> 00:07:11.558
Okay, great.

113
00:07:11.558 --> 00:07:14.870
So we'll say formData get(*title*), and

114
00:07:14.870 --> 00:07:18.027
let's see if copilot
can help me with these.

115
00:07:18.027 --> 00:07:19.304
Yep, thank you.

116
00:07:19.304 --> 00:07:20.694
Thank you very much.

117
00:07:20.694 --> 00:07:22.642
Co-pilots kind of useful.

118
00:07:22.642 --> 00:07:27.363
Okay, so we get our title, slug, and mark
down, now we're gonna create our posts.

119
00:07:27.363 --> 00:07:32.003
await createPost, nope, not portal, post.

120
00:07:32.003 --> 00:07:32.910
There we go.

121
00:07:32.910 --> 00:07:35.379
Title, slug, and markdown, and

122
00:07:35.379 --> 00:07:40.414
now we have our new post right there,
and we can use that for whatever.

123
00:07:40.414 --> 00:07:44.291
But I wanna just redirect
to post admin for this, so

124
00:07:44.291 --> 00:07:49.342
we'll return a redirect which is
gonna come from Remix rendernode

125
00:07:49.342 --> 00:07:53.775
just like the JSON helper
Ttoo redirect to posts/admin.

126
00:07:53.775 --> 00:07:59.802
And that is the finished implementation.

127
00:07:59.802 --> 00:08:05.693
So New post, new-post-2, whatever.

128
00:08:05.693 --> 00:08:09.651
Yeah, there it is.

129
00:08:09.651 --> 00:08:13.594
And then we haven't implemented
the slides yet, but it worked.

130
00:08:13.594 --> 00:08:19.346
And so if we go to posts, there it is,
new post, whatever, yeah.

131
00:08:19.346 --> 00:08:23.698
Okay, so it may have happened so fast
you didn't notice, or you hadn't thought

132
00:08:23.698 --> 00:08:28.131
about this yet, but watch really carefully
what happens to this list on the left.

133
00:08:28.131 --> 00:08:33.974
So this is Marc Rocks, Marc with a C.

134
00:08:33.974 --> 00:08:37.954
Actually, one of my best friends
growing up was Marc with a C, so

135
00:08:37.954 --> 00:08:40.187
Marc with a K was always weird to me.

136
00:08:40.187 --> 00:08:44.898
But yeah, so Marc Rocks,
and then we go create post,

137
00:08:44.898 --> 00:08:49.425
watch what happens on the left,
it adds that post.

138
00:08:49.425 --> 00:08:54.863
Where's my code that says when
I create a new post item,

139
00:08:54.863 --> 00:08:58.230
I should add a new item to the list?

140
00:08:58.230 --> 00:09:03.316
There is no code for me that says that,
I didn't write any code to do that.

141
00:09:03.316 --> 00:09:04.787
But it's doing the right thing,

142
00:09:04.787 --> 00:09:07.577
that's what I want it to do
because I'm showing all the posts.

143
00:09:07.577 --> 00:09:12.638
This is one of the things that
makes Remix and mutations so great,

144
00:09:12.638 --> 00:09:17.250
this is why you don't have to
do manage state in a Remix app.

145
00:09:17.250 --> 00:09:21.688
No application state management
because Remix is automatically saying

146
00:09:21.688 --> 00:09:25.579
you just made a mutation, let me go and
revalidate the data for you,

147
00:09:25.579 --> 00:09:27.715
that does that just automatically.

148
00:09:27.715 --> 00:09:30.694
It's pretty rad, I like that a lot.

149
00:09:30.694 --> 00:09:34.100
Okay, so there are a couple
of other changes here, so

150
00:09:34.100 --> 00:09:39.172
I will breeze through those here, and
then we can go through all the questions,

151
00:09:39.172 --> 00:09:41.693
so we can get all the questions at once.

152
00:09:41.693 --> 00:09:45.443
So Extra Credit, Error handling,
we want to handle some errors.

153
00:09:45.443 --> 00:09:50.297
So sometimes, actually, well, yeah,
we'll do the error handling first.

154
00:09:50.297 --> 00:09:55.547
So sometimes the user might submit
values for these that are wrong,

155
00:09:55.547 --> 00:10:00.533
or maybe somebody hits your,
like there, this is an endpoint.

156
00:10:00.533 --> 00:10:04.227
So somebody hits it directly with
curl with the wrong data, or

157
00:10:04.227 --> 00:10:09.003
all sorts of things could go wrong, so
we wanna handle those particular cases.

158
00:10:09.003 --> 00:10:13.109
Another thing to keep in mind
is that this is not a string,

159
00:10:13.109 --> 00:10:16.886
this is a form data entry value,
or it could be null.

160
00:10:16.886 --> 00:10:23.498
And if we dive into what that is,
a form data entry value is a file or

161
00:10:23.498 --> 00:10:28.092
a string, so
users upload files with forms.

162
00:10:28.092 --> 00:10:32.140
And so that's why we want to do a little
bit of extra checking to make sure that

163
00:10:32.140 --> 00:10:34.165
the user is submitted this properly,

164
00:10:34.165 --> 00:10:37.729
so that somebody's not just hitting
our thing wrong or whatever.

165
00:10:37.729 --> 00:10:40.844
In addition,
I think it would be nonsensical to try and

166
00:10:40.844 --> 00:10:45.401
make a post that has a slug that has no
length, or whatever title, or whatever.

167
00:10:45.401 --> 00:10:48.405
So let's do a little
bit of validation here.

168
00:10:48.405 --> 00:10:53.309
And now I'm forgetting specifically
how I did this in the final version,

169
00:10:53.309 --> 00:10:55.932
but I think it was something like this.

170
00:10:55.932 --> 00:10:59.205
We're going to make an errors
object that has, yeah,

171
00:10:59.205 --> 00:11:01.921
basically this,
except I want it to be null.

172
00:11:01.921 --> 00:11:03.477
Okay, so it has a property for

173
00:11:03.477 --> 00:11:06.482
each one of these form elements
that could have an error.

174
00:11:06.482 --> 00:11:11.734
So we have a title, if there is no title
then we'll say no, so that that counts for

175
00:11:11.734 --> 00:11:16.236
null or an empty string, and
then we'll just say title is required.

176
00:11:16.236 --> 00:11:19.332
We'll do the same thing for
our slug and for the markdown.

177
00:11:19.332 --> 00:11:24.615
And now we just need to know, do I have
any errors, or can I create this post?

178
00:11:24.615 --> 00:11:31.715
So I'm gonna say const hasErrors
= object.entries(errors),

179
00:11:31.715 --> 00:11:35.705
or actually, let's just do values.

180
00:11:35.705 --> 00:11:40.087
So if some of them are truthy,
you got to spell object correctly,

181
00:11:40.087 --> 00:11:44.167
it doesn't work if you don't,
it's kind of weird, okay?

182
00:11:44.167 --> 00:11:47.509
So if any of those are truthy, so
this is the same as doing like.

183
00:11:50.640 --> 00:11:54.435
Same thing, it's just more terse.

184
00:11:54.435 --> 00:11:56.612
I don't think it's clever,
I just think it's JavaScript.

185
00:11:56.612 --> 00:12:03.384
So if any of these values in this object
is truthy, then we have some errors.

186
00:12:03.384 --> 00:12:08.317
So if that's the case, then instead
of creating the post and redirecting,

187
00:12:08.317 --> 00:12:10.408
we're gonna return some JSON.

188
00:12:10.408 --> 00:12:15.018
So let's return JSON with the errors.

189
00:12:15.018 --> 00:12:19.242
And we'll get JSON the same place
we get redirect just a helper.

190
00:12:19.242 --> 00:12:24.171
And actually,
this redirect is also just to helper,

191
00:12:24.171 --> 00:12:28.771
if we wanted to do this,
we could do new Response,

192
00:12:28.771 --> 00:12:33.055
Headers, Location' : '/posts/admin.

193
00:12:33.055 --> 00:12:35.321
Which one of those do you like best?

194
00:12:35.321 --> 00:12:37.927
Yeah, that's why we have to help her.

195
00:12:37.927 --> 00:12:42.780
So but that's all it's doing, I just wanna
emphasise, it's just a request response,

196
00:12:42.780 --> 00:12:44.409
just web fetch stuff, okay?

197
00:12:44.409 --> 00:12:47.087
So if we have errors,
then we're gonna pass the JSON,

198
00:12:47.087 --> 00:12:49.194
I'm actually gonna put that in an object.

199
00:12:49.194 --> 00:12:56.164
And now to access that,
I'll give you one guess, use action data.

200
00:12:56.164 --> 00:13:00.560
And again, we get type of action
to get some helpers here.

201
00:13:00.560 --> 00:13:04.703
So let's get our action data and

202
00:13:04.703 --> 00:13:08.390
I gotta use correct syntax.

203
00:13:08.390 --> 00:13:15.028
So action data can either be this errors
object or it can be undefined, okay?

204
00:13:15.028 --> 00:13:20.470
So if we have any errors,
did I give you the,

205
00:13:20.470 --> 00:13:24.894
yeah, we're just gonna use this.

206
00:13:24.894 --> 00:13:26.956
If we have an errors,
then we want to display those.

207
00:13:26.956 --> 00:13:31.577
So if actionData.errors.title,

208
00:13:31.577 --> 00:13:38.138
then we'll use that
actionData.errors.title.

209
00:13:38.138 --> 00:13:43.073
Okay, and then we'll do the same thing for
our slug,

210
00:13:43.073 --> 00:13:46.699
and for our text area for the markdown.

211
00:13:46.699 --> 00:13:51.725
So this will be markdown and
this will be slug.

212
00:13:51.725 --> 00:13:52.778
And there we go.

213
00:13:52.778 --> 00:13:57.200
Still, I've managed to avoid use state,
and use effect, and

214
00:13:57.200 --> 00:14:00.719
all that use nonsense except for
use action data.

215
00:14:00.719 --> 00:14:03.667
That's not nonsense,
that's just magic, it's amazing.

216
00:14:03.667 --> 00:14:08.024
And I mean magic in the positive way,
where you're like, wow, I like that,

217
00:14:08.024 --> 00:14:09.915
not wow, that's complicated.

218
00:14:09.915 --> 00:14:14.689
So now we can go and create a new post,
and we get all of those.

219
00:14:14.689 --> 00:14:15.833
It's great and then we can fix it.

220
00:14:15.833 --> 00:14:18.000
So New Post 3.

221
00:14:21.218 --> 00:14:23.659
Yeah, sure.

222
00:14:23.659 --> 00:14:25.603
Cool.

223
00:14:27.006 --> 00:14:27.953
All right.

