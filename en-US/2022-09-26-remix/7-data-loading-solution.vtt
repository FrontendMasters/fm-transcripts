WEBVTT

1
00:00:00.240 --> 00:00:02.810
Hopefully you had a good time
loading data in a Remix app.

2
00:00:03.820 --> 00:00:07.980
So our objective here is we just wanna
show a list of the posts that we have.

3
00:00:07.980 --> 00:00:12.705
And I gave you some posts to use.

4
00:00:12.705 --> 00:00:16.420
Just this, this is our data, oops.

5
00:00:16.420 --> 00:00:24.767
So we'll go into app &gt; routes &gt;
posts &gt; index, and here's my data.

6
00:00:24.767 --> 00:00:29.568
And then we've got our JSX
that we can render for this.

7
00:00:29.568 --> 00:00:32.486
So we'll just do that here and

8
00:00:32.486 --> 00:00:37.630
bring in { Link } from "@remix-run/react".

9
00:00:37.630 --> 00:00:40.950
And then I guess we can
just say data.posts, right?

10
00:00:40.950 --> 00:00:42.589
And we're done, it works.

11
00:00:42.589 --> 00:00:44.734
I'm just kidding,
that's not how you do it.

12
00:00:44.734 --> 00:00:48.215
Because then you'd have to change your
code every time you wanted to write a new

13
00:00:48.215 --> 00:00:49.120
blog post, right?

14
00:00:49.120 --> 00:00:51.093
That would be silly, I wouldn't do that.

15
00:00:51.093 --> 00:00:55.523
So no, we're gonna use
an actual API from Remix, and

16
00:00:55.523 --> 00:01:01.242
it's a convention, and that is to
export a function called loader.

17
00:01:01.242 --> 00:01:04.324
And it's actually typically
an async function.

18
00:01:04.324 --> 00:01:07.001
Very rarely will this not
be an async function, so

19
00:01:07.001 --> 00:01:08.993
we'll just stick an async on there.

20
00:01:08.993 --> 00:01:11.839
And then actually,
you know what I wanna do?

21
00:01:11.839 --> 00:01:17.052
I'm gonna make an async
function called getPosts,

22
00:01:17.052 --> 00:01:20.609
and that is gonna get me all of this.

23
00:01:23.256 --> 00:01:27.821
There we go, so
now I have my posts, getPosts, and

24
00:01:27.821 --> 00:01:30.807
I'm going to return a response.

25
00:01:30.807 --> 00:01:34.635
So the loader accepts a couple of
things we'll talk about later, and

26
00:01:34.635 --> 00:01:35.833
returns a response.

27
00:01:35.833 --> 00:01:41.092
So we return a new Response.

28
00:01:41.092 --> 00:01:43.945
And we're gonna return a JSON response so

29
00:01:43.945 --> 00:01:46.969
that our client can get
that JSON response.

30
00:01:46.969 --> 00:01:51.030
So I'm gonna say JSON.stringify posts.

31
00:01:51.030 --> 00:01:58.902
And then I'll add a header with
"Content-Type": "application/json".

32
00:01:58.902 --> 00:02:01.999
Cool, so I'm sending that response back.

33
00:02:01.999 --> 00:02:06.466
And then in my posts, I'm going to get.

34
00:02:06.466 --> 00:02:11.157
Or in my post component,
I'm gonna get my posts

35
00:02:11.157 --> 00:02:15.630
from useLoader, come on, useLoaderData.

36
00:02:18.340 --> 00:02:21.470
And now I've got my post there, cool.

37
00:02:21.470 --> 00:02:22.990
Refresh, boom, there it is.

38
00:02:24.120 --> 00:02:25.463
Okay, so
let's look at the code really quick,

39
00:02:25.463 --> 00:02:26.546
cuz I went through that pretty quick.

40
00:02:26.546 --> 00:02:28.982
We're gonna make some
modifications to this as well.

41
00:02:28.982 --> 00:02:34.462
So the loader is responsible for
loading data.

42
00:02:34.462 --> 00:02:38.804
And it runs on the server,
and only the server, okay?

43
00:02:38.804 --> 00:02:41.368
And so you have access to database,

44
00:02:41.368 --> 00:02:47.440
you have access to private keys that you
don't want shared in the wide, wide world.

45
00:02:47.440 --> 00:02:52.423
You can read the file system if you're not
running in a serverless environment or

46
00:02:52.423 --> 00:02:55.000
whatever, where that would make sense.

47
00:02:56.120 --> 00:03:01.032
Whatever you want to, your only
responsibility is to return a response.

48
00:03:01.032 --> 00:03:03.353
And the vast majority of the time,

49
00:03:03.353 --> 00:03:07.830
that response should be
a application/json response.

50
00:03:07.830 --> 00:03:10.804
So this looks like a fair
bit of boilerplate.

51
00:03:10.804 --> 00:03:15.669
If that's what I do in almost every one
of my loaders, it would be really nice if

52
00:03:15.669 --> 00:03:19.754
we had a little helper function to
help us with that, and so we do.

53
00:03:19.754 --> 00:03:24.181
json, and yeah, none of these is correct.

54
00:03:24.181 --> 00:03:27.700
It should come from @remix-run/node, so

55
00:03:27.700 --> 00:03:32.155
we'll import { json }
from '@remix-run/node'.

56
00:03:32.155 --> 00:03:36.220
There we go, cool, and
then we say json(posts), and

57
00:03:36.220 --> 00:03:39.083
that effectively does the same thing.

58
00:03:39.083 --> 00:03:43.744
But I want to call out something special
here, something special about Remix.

59
00:03:43.744 --> 00:03:46.690
Remix is not just another framework, okay?

60
00:03:46.690 --> 00:03:52.137
It is a framework that exposes
the web platform to you.

61
00:03:52.137 --> 00:03:55.899
So where a lot of libraries
that I've written and

62
00:03:55.899 --> 00:04:00.856
frameworks that have been written
take the web platform APIs and

63
00:04:00.856 --> 00:04:05.008
wrap them in what they think is a nicer,
cleaner API.

64
00:04:05.008 --> 00:04:09.396
Remix instead exposes
the web platform API.

65
00:04:09.396 --> 00:04:13.947
And in fact, we're running an Express
server under the hood right here.

66
00:04:13.947 --> 00:04:17.434
But you can also, again, run on Dino,

67
00:04:17.434 --> 00:04:21.781
or you can run on Cloudfare Workers or
wherever.

68
00:04:21.781 --> 00:04:25.517
I always mix up Fastify and Fastly.

69
00:04:25.517 --> 00:04:30.969
One of them's a CDN, the other's
a web framework or a node framework.

70
00:04:30.969 --> 00:04:36.242
But wherever you're running, and they all
have their different API, like Netlify

71
00:04:36.242 --> 00:04:41.690
functions or cell functions, they all
have different APIs for request response.

72
00:04:41.690 --> 00:04:46.090
What Remix does is it actually acts
like a jQuery for the platform, and

73
00:04:46.090 --> 00:04:51.280
it turns all of those request responses
into a web fetch request response.

74
00:04:51.280 --> 00:04:57.350
And so if you dive into this response,
then you see this is the Fetch API.

75
00:04:57.350 --> 00:05:01.134
We make the Fetch API global and
actually Node 18,

76
00:05:01.134 --> 00:05:06.995
I think I believe it has Fetch built in,
but I believe it also makes these global.

77
00:05:06.995 --> 00:05:10.835
And so wherever you are, we make
the response global so that you can work

78
00:05:10.835 --> 00:05:15.350
directly with request response,
regardless of where you're deploying to.

79
00:05:15.350 --> 00:05:20.350
I think this is a really powerful
piece of what makes Remix special.

80
00:05:20.350 --> 00:05:25.493
So because we do this a lot,
we have a little utility for that because

81
00:05:25.493 --> 00:05:31.467
that would just be super annoying to have
to do this over and over again, okay?

82
00:05:31.467 --> 00:05:33.635
So that was the first
part of the exercise.

83
00:05:33.635 --> 00:05:36.233
And what I typically do actually,

84
00:05:36.233 --> 00:05:41.259
I typically like to send back
an object rather than just the array.

85
00:05:41.259 --> 00:05:44.711
So I'm gonna send back an object with
a property of posts is one change I

86
00:05:44.711 --> 00:05:45.365
wanna make.

87
00:05:45.365 --> 00:05:52.030
Now we wanna, I think the next one
was to improve the TypeScript piece.

88
00:05:52.030 --> 00:05:56.990
So we wanna make it so that TypeScript
isn't yelling at us about this.

89
00:05:56.990 --> 00:05:59.350
And of course, we could say any,
and now TypeScript's not yelling.

90
00:05:59.350 --> 00:06:01.540
But we wanna actually make
TypeScript be helpful.

91
00:06:01.540 --> 00:06:04.500
We're not just saying hey,
TypeScript, hush.

92
00:06:04.500 --> 00:06:08.702
We want to have TypeScript
to help us because I could

93
00:06:08.702 --> 00:06:12.527
very easily make a mistake like that,
right?

94
00:06:12.527 --> 00:06:16.210
And now my link is pointing to the wrong
place, it's pointing to undefined.

95
00:06:16.210 --> 00:06:19.150
I have no way of knowing
that that's happening.

96
00:06:19.150 --> 00:06:22.170
So here's how you do this with Remix.

97
00:06:22.170 --> 00:06:25.869
It just recently got this good, and
so I'm really excited to show you.

98
00:06:25.869 --> 00:06:33.410
typeof loader, boom, and now you have
type safety across the network chasm.

99
00:06:34.940 --> 00:06:38.800
That's pretty rad, I think that's
kinda nice, I like that a lot.

100
00:06:38.800 --> 00:06:43.540
And what's interesting here is
that Remix will ensure that

101
00:06:43.540 --> 00:06:48.867
because Remix is managing the network
chasm, we can rely on this.

102
00:06:48.867 --> 00:06:53.944
The only situation where you
could end up with a type

103
00:06:53.944 --> 00:07:00.203
error that goes from the loader
to the client when you're using

104
00:07:00.203 --> 00:07:06.680
this is if some EMP hit and
it flipped a bit or something.

105
00:07:06.680 --> 00:07:13.450
So sorry, we can't protect you from
natural disasters or anything.

106
00:07:13.450 --> 00:07:17.284
But other than that,
you're pretty dang type safe just by

107
00:07:17.284 --> 00:07:20.660
adding typeof loader to
your useLoaderData call.

108
00:07:21.700 --> 00:07:22.533
So I think that's pretty neat.

109
00:07:22.533 --> 00:07:24.237
And if I decided, hey, you know what?

110
00:07:24.237 --> 00:07:26.490
Instead of slug,
I wanna have this be the Id.

111
00:07:27.560 --> 00:07:30.110
Well, now I'm getting type errors for
that.

112
00:07:30.110 --> 00:07:30.610
Id, hurray.

113
00:07:31.720 --> 00:07:33.030
It's amazing, it really is cool.

