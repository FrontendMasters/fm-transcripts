WEBVTT

1
00:00:00.195 --> 00:00:01.933
Well, there we go.

2
00:00:01.933 --> 00:00:02.597
You are done.

3
00:00:02.597 --> 00:00:06.371
You can close your laptop if you want,
but, don't maybe.

4
00:00:06.371 --> 00:00:09.694
Cuz, actually if you'd like I
would love some feedback and

5
00:00:09.694 --> 00:00:13.224
at the bottom of the readme at
the root there is a feedback form.

6
00:00:13.224 --> 00:00:16.788
So please do submit
feedback on the workshop.

7
00:00:16.788 --> 00:00:19.847
And I am happy to stand around here for

8
00:00:19.847 --> 00:00:24.980
however longer to answer any
general questions about Remix,

9
00:00:24.980 --> 00:00:30.227
about building for the web,
whatever, I am at your disposal.

10
00:00:33.399 --> 00:00:35.390
Yeah, Ryan.

11
00:00:35.390 --> 00:00:41.066
&gt;&gt; One of the features that Next.js has
is the image optimization component.

12
00:00:41.066 --> 00:00:44.075
Does Remix have any?

13
00:00:44.075 --> 00:00:45.507
&gt;&gt; Yeah, great question.

14
00:00:45.507 --> 00:00:50.132
So Remix doesn't have anything
specifically for that.

15
00:00:50.132 --> 00:00:56.315
And so on my website I built my own, and
it works great and I wrote about it.

16
00:00:56.315 --> 00:01:02.394
The one cool thing that Remix has,
so for me let's see where's that?

17
00:01:02.394 --> 00:01:03.970
This one.

18
00:01:03.970 --> 00:01:09.354
For me, I am using Cloudnary and
so lots of my solution just use it

19
00:01:09.354 --> 00:01:14.467
basically generates this ridiculous,
look at this thing.

20
00:01:14.467 --> 00:01:20.211
That URL to make like, wow.

21
00:01:20.211 --> 00:01:25.061
But yeah using the source set and
sizes properties of the image tag.

22
00:01:25.061 --> 00:01:27.398
It's actually really cool, but

23
00:01:27.398 --> 00:01:32.246
yeah using some of coronaries
fanciness to serve up the right image.

24
00:01:32.246 --> 00:01:36.822
And Remix, you could absolutely
build your own support for

25
00:01:36.822 --> 00:01:40.309
something like this
using a resource route.

26
00:01:40.309 --> 00:01:44.683
And in fact, Jacob on the Remix
team has built something

27
00:01:44.683 --> 00:01:47.601
that he's got a demo somewhere on GitHub.

28
00:01:47.601 --> 00:01:52.155
Where he has a resource route that allows
you to change dimensions and compress and

29
00:01:52.155 --> 00:01:54.465
whatever else for this specific device.

30
00:01:54.465 --> 00:01:58.950
It's actually really cool and there are
packages that you can use to say here's my

31
00:01:58.950 --> 00:02:01.429
user agent,
give me the best image for this.

32
00:02:01.429 --> 00:02:03.292
So yes, you could build it yourself.

33
00:02:03.292 --> 00:02:06.335
Eventually, Remix may have something that,

34
00:02:06.335 --> 00:02:10.243
a Remix image package that just
does all that stuff for you.

35
00:02:10.243 --> 00:02:13.624
Until then, my site is open source and

36
00:02:13.624 --> 00:02:18.387
you can totally steal all of
this stuff if you want to.

37
00:02:18.387 --> 00:02:20.765
Yep, here it is, blurable image.

38
00:02:20.765 --> 00:02:22.433
It's pretty fun.

39
00:02:22.433 --> 00:02:25.678
If you wanna also use Cloudinary.

40
00:02:25.678 --> 00:02:29.204
This isn't actually specific
to Cloudinary necessarily.

41
00:02:29.204 --> 00:02:36.244
All that I need is the image element and
a blurred data URL.

42
00:02:36.244 --> 00:02:39.685
So yeah,
you could build this with anything else.

43
00:02:39.685 --> 00:02:40.618
Yeah.

44
00:02:40.618 --> 00:02:44.862
&gt;&gt; This is related to the SPA question.

45
00:02:44.862 --> 00:02:49.576
If you have multiple disparate
dashboard data sources you

46
00:02:49.576 --> 00:02:54.301
need on a page multiple grids,
how might you approach it?

47
00:02:54.301 --> 00:02:55.759
&gt;&gt; Let me make sure I
understand the question.

48
00:02:55.759 --> 00:02:58.737
So they're saying you have a dashboard and

49
00:02:58.737 --> 00:03:03.381
multiple widgets on that dashboard
from different data sources.

50
00:03:03.381 --> 00:03:07.661
Most dashboards that I'm aware of
like that will persist filters and

51
00:03:07.661 --> 00:03:11.069
different things that in the URL for
very good reason.

52
00:03:11.069 --> 00:03:14.765
Then you can make all your filters and
your check box selections and stuff, and

53
00:03:14.765 --> 00:03:17.789
then copy paste the URL and
send it to somebody else be like here,

54
00:03:17.789 --> 00:03:19.254
look at this view, whatever.

55
00:03:19.254 --> 00:03:22.402
So it's useful from that angle.

56
00:03:22.402 --> 00:03:27.323
And in Remix, your loader can reference
all of those things and go say,

57
00:03:27.323 --> 00:03:31.029
okay, so these query prams are for
this data source.

58
00:03:31.029 --> 00:03:32.498
Let me go get the data for that.

59
00:03:32.498 --> 00:03:33.550
And let me go get the data for that.

60
00:03:33.550 --> 00:03:37.719
You can run all those in parallel or
in concurrently with promise.all.

61
00:03:37.719 --> 00:03:39.721
And so just go resolve on that stuff.

62
00:03:39.721 --> 00:03:43.815
Send it up and then when the user
changes the filter and stuff,

63
00:03:43.815 --> 00:03:48.790
you're gonna go revalidate and it'll
go grab the up to date data for that.

64
00:03:48.790 --> 00:03:51.039
That would be my first approach at that.

65
00:03:51.039 --> 00:03:56.318
The one challenge that you can run into,
if yeah, that is possible

66
00:03:56.318 --> 00:04:02.271
to run into in that situation is,
what if it's just a silly amount of data.

67
00:04:02.271 --> 00:04:07.193
And so you've got like a bunch of widgets
and you're just changing this one widget,

68
00:04:07.193 --> 00:04:08.871
the search params for that.

69
00:04:08.871 --> 00:04:11.100
And you only wanna reload the data for
that widget.

70
00:04:11.100 --> 00:04:16.346
Well, you're loading all the data for
all these different widgets and

71
00:04:16.346 --> 00:04:20.631
so yeah, there's,
I could see a argument to say, well,

72
00:04:20.631 --> 00:04:24.147
I just wanna load the widget or
this one widget.

73
00:04:24.147 --> 00:04:26.900
So that you're gonna use
a hook called useFetchers.

74
00:04:26.900 --> 00:04:30.199
And that is what we're gonna talk
about in the advanced Remix workshop.

75
00:04:30.199 --> 00:04:36.252
But that allows you to run
specific data fetches for

76
00:04:36.252 --> 00:04:40.207
specific components and stuff.

77
00:04:40.207 --> 00:04:44.294
So that would be the next thing to try and
and you could create resource routes for

78
00:04:44.294 --> 00:04:45.032
each widget.

79
00:04:45.032 --> 00:04:48.751
But I would totally start
with just a single loader.

80
00:04:48.751 --> 00:04:53.046
It keys off of the search params goes to
get all the data and slurps it back up to

81
00:04:53.046 --> 00:04:57.430
the client that would be the easiest
most straightforward approach to them.

82
00:04:57.430 --> 00:05:02.551
And so on the subject of SPAs,
cuz somebody

83
00:05:02.551 --> 00:05:08.393
did ask about spas and
now I'm reminded of that.

84
00:05:08.393 --> 00:05:16.313
Remix has kinda funny spot with
the SPA versus MPA conversation.

85
00:05:16.313 --> 00:05:19.763
So originally the web was all MPAs.

86
00:05:19.763 --> 00:05:21.003
That's multi page apps.

87
00:05:21.003 --> 00:05:24.804
So every page is talking
to the server generated,

88
00:05:24.804 --> 00:05:30.062
maybe it's cached on the CDN, but
every single page is individual.

89
00:05:30.062 --> 00:05:32.013
And we ran into some problems with that.

90
00:05:32.013 --> 00:05:36.137
We talked about it a little bit with the
progressive enhancement stuff where it's

91
00:05:36.137 --> 00:05:39.675
just a nicer user experience to not
have to reload every page, right?

92
00:05:39.675 --> 00:05:44.524
So then we started to kind of
combine the two where you'd have

93
00:05:44.524 --> 00:05:48.137
the back end framework
generate some HTML and

94
00:05:48.137 --> 00:05:52.435
then you'd like sprinkle
some JavaScript in right?

95
00:05:52.435 --> 00:05:57.567
And that worked not for very long, [LAUGH]
because what happens there if you have

96
00:05:57.567 --> 00:06:02.857
to duplicate templates between whatever
is generating the HTML on the back end,

97
00:06:02.857 --> 00:06:07.754
and whatever is updating the HTML on
the front end, which is gonna be like,

98
00:06:07.754 --> 00:06:09.983
maybe it's Ruby on the back end.

99
00:06:09.983 --> 00:06:12.353
And it'll be JavaScript on the front end.

100
00:06:12.353 --> 00:06:15.330
And so you not only do you
have template duplication, but

101
00:06:15.330 --> 00:06:17.693
you also have no way to
share that code at all.

102
00:06:17.693 --> 00:06:21.672
And so they fall out of date out of sync
and it just does not work very nicely.

103
00:06:21.672 --> 00:06:24.475
So we pretty quickly went from and
frankly,

104
00:06:24.475 --> 00:06:28.584
still plenty of people are doing
JavaScript script sprinkles.

105
00:06:28.584 --> 00:06:33.644
And a lot of those back end frameworks
are still trying to do things

106
00:06:33.644 --> 00:06:38.616
through the back end framework
that like kinda makes that work.

107
00:06:38.616 --> 00:06:42.700
We've got like hotwire and
life view and stuff like that.

108
00:06:42.700 --> 00:06:46.473
But very quickly a lot of people moved
over to just saying hey this is so

109
00:06:46.473 --> 00:06:48.565
hard to make these two work together.

110
00:06:48.565 --> 00:06:53.646
I'm just gonna throw away all that
we'll just use the SPA that is a single

111
00:06:53.646 --> 00:06:58.999
page app it's all JavaScript only the
client and the back end is just an API.

112
00:06:58.999 --> 00:07:01.266
And my front end just hits that back end.

113
00:07:01.266 --> 00:07:04.845
And then I can do transitions, cuz we
got this cool new history API thing,

114
00:07:04.845 --> 00:07:05.437
push date.

115
00:07:05.437 --> 00:07:09.061
And now I can navigate without having
to go back to the server all the time.

116
00:07:09.061 --> 00:07:13.014
And I know that I can only ever give
a status code of 200 but I don't care.

117
00:07:13.014 --> 00:07:19.418
And so for a long time that's the way I
built web apps, and I liked it that way.

118
00:07:19.418 --> 00:07:21.823
I did not like the template duplication.

119
00:07:21.823 --> 00:07:24.497
I did not like running
Java on my machine at all.

120
00:07:24.497 --> 00:07:31.096
[LAUGH] And so I was happy with just
doing it all front end SPA only.

121
00:07:31.096 --> 00:07:35.546
What Remix is doing is
it's remixing the two.

122
00:07:35.546 --> 00:07:39.371
Remix is both, in particular because
of progressive enhancement, but

123
00:07:39.371 --> 00:07:40.885
also because of hydration.

124
00:07:40.885 --> 00:07:45.681
So it's server rendered HTML and
then it's rehydrated.

125
00:07:45.681 --> 00:07:48.262
And from that point on it's a SPA so

126
00:07:48.262 --> 00:07:52.188
it starts out as an MPA rehydrates,
now it's a SPA.

127
00:07:52.188 --> 00:07:58.570
And there are a lot of benefits
to being in that position

128
00:07:58.570 --> 00:08:05.521
where you get the benefits of
the low content layout shift.

129
00:08:05.521 --> 00:08:08.734
Because if you do a SPA,
you have to load the JavaScript and

130
00:08:08.734 --> 00:08:10.512
then you go load all of the data.

131
00:08:10.512 --> 00:08:12.409
And typically,
you don't wanna just show a white screen.

132
00:08:12.409 --> 00:08:14.298
So you're gonna show a loading spinner.

133
00:08:14.298 --> 00:08:18.089
And yeah, if you showed a white screen,
that would be even worse.

134
00:08:18.089 --> 00:08:19.643
So you show a loading spinner.

135
00:08:19.643 --> 00:08:21.498
Then you load the data and
then you update.

136
00:08:21.498 --> 00:08:25.993
That's called content layout shifts,
the content is there and then shifted.

137
00:08:25.993 --> 00:08:29.150
So that's not a great user experience.

138
00:08:29.150 --> 00:08:34.110
And so with Remix you get the MPA
benefits of not doing the content layout

139
00:08:34.110 --> 00:08:39.236
shift with the SPA benefits of being
able to do client side transitions and

140
00:08:39.236 --> 00:08:42.144
animated transitions even and all that.

141
00:08:42.144 --> 00:08:46.949
So yeah anyway hopefully that answers
the question to the person who's asking

142
00:08:46.949 --> 00:08:50.403
about Remix and SPAs asking question
&gt;&gt; Yes I was gonna say you

143
00:08:50.403 --> 00:08:54.163
mentioned a few things that you
guys are already thinking about it.

144
00:08:54.163 --> 00:08:56.844
What else is next for Remix?

145
00:08:56.844 --> 00:08:57.878
&gt;&gt; What's coming up?

146
00:08:57.878 --> 00:09:00.325
&gt;&gt; Yeah.

147
00:09:00.325 --> 00:09:05.760
&gt;&gt; So the defer API is gonna be legit.

148
00:09:05.760 --> 00:09:09.401
So this is the lever that
allows you to say, well,

149
00:09:09.401 --> 00:09:12.885
I'm actually okay with
content layout shift.

150
00:09:12.885 --> 00:09:16.228
Because it'll help me get
a better time to first byte.

151
00:09:16.228 --> 00:09:20.152
And that's important for me, or
more often it will be, well,

152
00:09:20.152 --> 00:09:22.830
that particular endpoint is really slow.

153
00:09:22.830 --> 00:09:26.356
And I'd rather show the user a spinner
rather than making them wait for

154
00:09:26.356 --> 00:09:27.803
the page in the first place.

155
00:09:27.803 --> 00:09:32.720
And so we'll talk about that in
the Advanced Remix Workshop.

156
00:09:32.720 --> 00:09:36.740
We need to make some more
examples of Server Sent Events.

157
00:09:36.740 --> 00:09:41.049
Because we released support for
that a couple months ago.

158
00:09:41.049 --> 00:09:47.155
And not many people are using it,
and it's actually really great for

159
00:09:47.155 --> 00:09:52.641
real time use cases even multiple
user like this really cool.

160
00:09:52.641 --> 00:09:57.550
As far as what else is next,
the Remix router

161
00:09:57.550 --> 00:10:02.071
work that should be released very soon.

162
00:10:02.071 --> 00:10:06.969
That is gonna open up a lot of these
features to people whether they

163
00:10:06.969 --> 00:10:10.633
want to use a server
rendering framework or not.

164
00:10:10.633 --> 00:10:15.852
So you'll be able to use error boundaries,
loaders, forms, actions.

165
00:10:15.852 --> 00:10:20.675
All of this stuff in a regular react
app without having to switch over to

166
00:10:20.675 --> 00:10:23.796
a server rendered and
Remix compiled thing.

167
00:10:23.796 --> 00:10:26.909
Which I think it's actually really,
really cool.

168
00:10:26.909 --> 00:10:32.011
It also means that we can make
adapters for other frameworks or for

169
00:10:32.011 --> 00:10:37.392
non-framework if you don't want to
have a framework at all you could

170
00:10:37.392 --> 00:10:42.713
just use the Remix Router itself and
have a ton of awesome features.

171
00:10:42.713 --> 00:10:48.351
That work is gonna be pretty
transformative for the web, I think.

172
00:10:48.351 --> 00:10:55.720
I hesitate to talk about this too much
because we haven't released anything yet.

173
00:10:55.720 --> 00:10:58.361
So but I will anyway.

174
00:10:58.361 --> 00:11:04.468
We are evaluating,
well we're working on making it so

175
00:11:04.468 --> 00:11:09.929
that you can use Remix
with your own build tools.

176
00:11:09.929 --> 00:11:15.002
So rather than requiring you to use
the Remix compiler in the package

177
00:11:15.002 --> 00:11:20.164
JSON in of each of these projects
you'll see it's like Remix watch,

178
00:11:20.164 --> 00:11:23.553
and Remix Dab, all Remix specific scripts.

179
00:11:23.553 --> 00:11:25.400
It's all using esbuild under the hood.

180
00:11:25.400 --> 00:11:29.576
Esbuild doesn't support CSS modules,
it doesn't support hot module replacement.

181
00:11:29.576 --> 00:11:33.386
And so,
we'd have to build those ourselves.

182
00:11:33.386 --> 00:11:38.263
And so we're instead going to
support potentially Webpack and

183
00:11:38.263 --> 00:11:43.324
Vite and others so that you can
just bring in the remix conventions

184
00:11:43.324 --> 00:11:47.938
in compiler into your whatever
existing bundler you have.

185
00:11:47.938 --> 00:11:50.672
And get hot module
replacement CSS modules and

186
00:11:50.672 --> 00:11:53.625
vanilla extract and
whatever else you wanna use.

187
00:11:53.625 --> 00:11:57.398
So that work is ongoing and
very promising.

188
00:11:57.398 --> 00:12:01.927
So that's another thing that I think
the ultimate goal here is Ryan and

189
00:12:01.927 --> 00:12:03.999
Michael just wanted to make it so

190
00:12:03.999 --> 00:12:08.485
that when they use their kids website
that it's using React router.

191
00:12:08.485 --> 00:12:11.061
It's not garbage, not their kids,

192
00:12:11.061 --> 00:12:15.058
the website their kids about
their kids school website.

193
00:12:15.058 --> 00:12:19.239
Cuz they would like go to these websites,
and man this is not a good experience and

194
00:12:19.239 --> 00:12:20.912
then they open up the dev tools.

195
00:12:20.912 --> 00:12:24.546
And see that it's react
right in there I did this.

196
00:12:24.546 --> 00:12:27.448
So the idea behind Remix is to make it so

197
00:12:27.448 --> 00:12:31.001
that the user experience
of the web is better.

198
00:12:31.001 --> 00:12:35.735
And we can only do that if we can get
people to migrate over from whatever

199
00:12:35.735 --> 00:12:40.643
they're using to Remix which will
provide the better user experience.

200
00:12:40.643 --> 00:12:45.403
And so
having a compiler agnostic build system,

201
00:12:45.403 --> 00:12:50.401
I think is an important
step in that direction too.

202
00:12:50.401 --> 00:12:52.295
So I'm excited about that also.

203
00:12:52.295 --> 00:12:59.880
And in the future, Ryan actually has
a demo of this have a build lists,

204
00:12:59.880 --> 00:13:04.136
experience or you don't have a build.

205
00:13:04.136 --> 00:13:10.005
You can do that right now,
even with TypeScript in Deno,

206
00:13:10.005 --> 00:13:14.913
and Bun actually supports Typescript and
JSX.

207
00:13:14.913 --> 00:13:18.776
So you just write up a regular
React app and Bun no build and

208
00:13:18.776 --> 00:13:22.895
that's really cool because you
can deploy in five seconds.

209
00:13:22.895 --> 00:13:28.706
That'd be pretty rad I think, welcome
back PHP upload file to FTP server.

210
00:13:28.706 --> 00:13:30.984
I just think that's pretty cool.

211
00:13:30.984 --> 00:13:35.000
So that is another thing,
that's way in the future though,

212
00:13:35.000 --> 00:13:36.742
if that ever does happen.

213
00:13:36.742 --> 00:13:38.237
So anyway there you go.

214
00:13:38.237 --> 00:13:41.123
[LAUGH] Thank you all so
much for coming to the workshop,

215
00:13:41.123 --> 00:13:43.211
it has been awesome to teach you remix.

216
00:13:43.211 --> 00:13:50.055
I love Remix and I feel more excited about
building for the web, than ever before.

217
00:13:50.055 --> 00:13:53.783
Ten exercises is a lot, so
you should pat yourself on the back and

218
00:13:53.783 --> 00:13:55.379
feel good about yourself.

219
00:13:55.379 --> 00:13:59.745
And I mean that there's a lot to learn and
this material is open source and

220
00:13:59.745 --> 00:14:03.053
available forever so
feel free to go through it again.

221
00:14:03.053 --> 00:14:05.172
It is intended to be self paced as well.

222
00:14:05.172 --> 00:14:08.412
So, if you're like what did he say or
what you've got the background and

223
00:14:08.412 --> 00:14:09.381
fill in everything.

224
00:14:09.381 --> 00:14:15.545
So I hope that you give Remix a try on
an actual thing that you're working on.

225
00:14:15.545 --> 00:14:17.338
I think that you will really love it and

226
00:14:17.338 --> 00:14:19.646
it will help you build
better web applications.

227
00:14:19.646 --> 00:14:21.342
That's why I came.

228
00:14:21.342 --> 00:14:23.100
So thanks everybody.

229
00:14:23.100 --> 00:14:28.411
&gt;&gt; [APPLAUSE]

