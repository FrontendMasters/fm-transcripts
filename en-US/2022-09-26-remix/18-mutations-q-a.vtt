WEBVTT

1
00:00:00.240 --> 00:00:05.257
So if you gave the form an action to
a specific URL, do you need to do

2
00:00:05.257 --> 00:00:11.209
anything inside the action loader to
respond to that specified action case?

3
00:00:11.209 --> 00:00:15.876
&gt;&gt; Yeah, so
I think I understand the question, so

4
00:00:15.876 --> 00:00:19.737
you can say action API new post, okay.

5
00:00:19.737 --> 00:00:25.155
So if you wanted to do that then you'd
go into your routes you'd make API and

6
00:00:25.155 --> 00:00:26.535
new-post.tsx.

7
00:00:26.535 --> 00:00:32.104
And then you basically just take
your action code that you have here,

8
00:00:32.104 --> 00:00:33.842
we just paste there.

9
00:00:33.842 --> 00:00:40.383
Bringing all the stuff which we, aw,
the heck with it, let's just do it.

10
00:00:40.383 --> 00:00:43.421
Hopefully it works,
okay, bring all this in.

11
00:00:45.614 --> 00:00:50.725
Okay, cool, so
now we'll just get rid of that.

12
00:00:50.725 --> 00:00:53.761
Yeah, this type of action isn't gonna be
happening, you'd have to import it and

13
00:00:53.761 --> 00:00:55.304
all that, that's why we don't do this.

14
00:00:55.304 --> 00:00:59.027
But we can create a new post, and kaboom!

15
00:00:59.027 --> 00:01:01.479
Man, I messed something up,
I don't know what went wrong.

16
00:01:01.479 --> 00:01:06.204
But that's basically how you would
accomplish this, is you just make

17
00:01:06.204 --> 00:01:11.666
a separate file that has the same route
as the action URL that you're providing.

18
00:01:11.666 --> 00:01:15.084
And then yeah, all of your
action code would just go there.

19
00:01:15.084 --> 00:01:17.050
Hopefully I understood that question,

20
00:01:17.050 --> 00:01:19.491
I might have misunderstood
the question though.

21
00:01:22.020 --> 00:01:26.380
&gt;&gt; So you moved the action code to its own
file matching the action paths specified?

22
00:01:26.380 --> 00:01:28.060
&gt;&gt; Yes.
&gt;&gt; I think I got it, yeah.

23
00:01:28.060 --> 00:01:28.693
&gt;&gt; Exactly.

24
00:01:31.446 --> 00:01:33.929
Cool, yes?

25
00:01:33.929 --> 00:01:39.269
&gt;&gt; This isn't the final extra credit too
but could you explain on the pic work so

26
00:01:39.269 --> 00:01:42.204
that you can type the create post action.

27
00:01:42.204 --> 00:01:47.360
&gt;&gt; Yes, so right now create posts just
accepts any, which is not very useful.

28
00:01:47.360 --> 00:01:51.599
What we really want is to have
something like this, right?

29
00:01:51.599 --> 00:01:53.322
That's what copilot wants us to do.

30
00:01:53.322 --> 00:01:58.150
But I don't wanna change this if I
ever update my model to say, hey,

31
00:01:58.150 --> 00:02:03.004
now markdown is now content, or
markdown is now whatever, right?

32
00:02:03.004 --> 00:02:07.274
So to both make it easier for
me maintenance wise in the future, and

33
00:02:07.274 --> 00:02:12.079
also communicate what these actually is,
this isn't just any old title,

34
00:02:12.079 --> 00:02:14.690
this is a post title, which is special.

35
00:02:14.690 --> 00:02:20.372
Then I'm going to say, I want to pick a
couple of properties off of the post type.

36
00:02:20.372 --> 00:02:25.546
And so, we actually have a type
called Post from the prisma/client,

37
00:02:25.546 --> 00:02:29.768
the prisma/client gets updated
as we update our model.

38
00:02:29.768 --> 00:02:33.871
And so we have all of the types for
our model.

39
00:02:33.871 --> 00:02:37.626
And so we want whoever is calling
create posts to give us a post, but

40
00:02:37.626 --> 00:02:39.783
we don't have all of the properties.

41
00:02:39.783 --> 00:02:44.525
Like see, this is gonna complain
because we're missing the ID and or

42
00:02:44.525 --> 00:02:47.728
the created at and
various other properties.

43
00:02:47.728 --> 00:02:51.281
And so we don't want all of them, we just
want the title, so I get marked down.

44
00:02:51.281 --> 00:02:56.334
So we're going to use a special generic
type from TypeScript called Pick,

45
00:02:56.334 --> 00:03:00.839
and it's going to say okay,
what do you want me to pick types from?

46
00:03:00.839 --> 00:03:04.907
And so
I wanna pick types from the post, and

47
00:03:04.907 --> 00:03:09.880
the types that I want are title,
slug and markdown.

48
00:03:09.880 --> 00:03:11.440
Does that answer your question?

49
00:03:11.440 --> 00:03:13.280
Cool.

50
00:03:13.280 --> 00:03:15.216
&gt;&gt; That's nicer than using partial.

51
00:03:15.216 --> 00:03:18.040
&gt;&gt; Yeah, yeah, I think it's quite handy.

52
00:03:18.040 --> 00:03:22.558
There are some really amazing generics
that are built into TypeScript.

53
00:03:22.558 --> 00:03:27.332
Recently, we got one called Awaited,
or yeah, I think it's awaited,

54
00:03:27.332 --> 00:03:28.753
which is pretty rad.

55
00:03:28.753 --> 00:03:32.363
It allows you to unwrap a promise and
my own utility for it for that,

56
00:03:32.363 --> 00:03:34.960
maybe it's called Await, I can't remember.

57
00:03:34.960 --> 00:03:39.328
And we used to use that a lot until
we got this handy piece of work, and

58
00:03:39.328 --> 00:03:41.794
now we don't need to use that as much.

59
00:03:41.794 --> 00:03:43.864
Okay, so now this is complaining, so

60
00:03:43.864 --> 00:03:47.050
I'm glad you asked that cuz I
was part of the extra credit.

61
00:03:47.050 --> 00:03:52.070
We need to do a little bit of extra work,
because remember

62
00:03:52.070 --> 00:03:56.684
how I said that this could
be a form data entry value?

63
00:03:56.684 --> 00:04:00.555
Well, it could, so
we need to make sure that it's a string.

64
00:04:00.555 --> 00:04:03.225
So what we're going to
do is say invariant.

65
00:04:03.225 --> 00:04:05.866
Invariant is this handy little utility,

66
00:04:05.866 --> 00:04:09.416
this package called tiny
invariant that we're using.

67
00:04:09.416 --> 00:04:14.784
I think invariant as a library was made
popular by the React project actually,

68
00:04:14.784 --> 00:04:17.152
that was the first time I saw that.

69
00:04:17.152 --> 00:04:19.760
And I think they have their
own implementation, but

70
00:04:19.760 --> 00:04:22.851
somebody built a tiny invariant,
so it's a little smaller.

71
00:04:22.851 --> 00:04:27.518
But what this allows you to do is it's
just a function where you give it some

72
00:04:27.518 --> 00:04:31.961
sort of predicate as the first argument,
and then the second argument

73
00:04:31.961 --> 00:04:36.803
is the error message I want thrown if
this predicate is not true, okay, so.

74
00:04:36.803 --> 00:04:41.715
And then it integrates really
nicely with TypeScript as well,

75
00:04:41.715 --> 00:04:44.864
so I can say type of title does not equal,

76
00:04:44.864 --> 00:04:48.861
or is equal to a string,
and title must be a string.

77
00:04:48.861 --> 00:04:52.424
And then we'll do the same for
our slug and our markdown.

78
00:04:52.424 --> 00:04:56.882
And so now, TypeScript knows
that it can't get to this line,

79
00:04:56.882 --> 00:05:01.448
if any of these is not a string,
and so that'll just be thrown.

80
00:05:01.448 --> 00:05:05.721
And we could probably do some
extra stuff if we wanted to give

81
00:05:05.721 --> 00:05:09.406
the user some helpful error message or
something.

82
00:05:09.406 --> 00:05:12.889
But if we get to this point and those
are not strings, then somebody is doing

83
00:05:12.889 --> 00:05:15.938
something nefarious, so
I don't care about them anyway, so.

84
00:05:15.938 --> 00:05:23.211
So we're good, cool, any other questions?

85
00:05:26.117 --> 00:05:27.680
Yeah?
&gt;&gt; Yeah, I got one,

86
00:05:27.680 --> 00:05:32.529
would maybe be strategy for doing like
client side validation for form field?

87
00:05:32.529 --> 00:05:33.770
&gt;&gt; Yeah, great question.

88
00:05:33.770 --> 00:05:40.926
In fact, somebody just asked me that
this morning, so, or maybe it was last.

89
00:05:40.926 --> 00:05:45.207
First of all, I wanna call out something
that actually is really awesome.

90
00:05:45.207 --> 00:05:50.028
I can extract this to a function and
say validate title,

91
00:05:50.028 --> 00:05:52.705
so where did that function go?

92
00:05:52.705 --> 00:05:57.997
Validate title, boom, and yeah,
sure, we'll take FormDataEntryValue.

93
00:05:57.997 --> 00:06:03.401
And now, whatever this validation logic
is, whether I could have a min and max and

94
00:06:03.401 --> 00:06:08.274
all that stuff, I can use that both in
my server code and in my client code.

95
00:06:08.274 --> 00:06:12.968
So that's neat, we can actually do
code sharing across this boundary.

96
00:06:12.968 --> 00:06:17.603
Now of course, if you're doing accessing
the database in here or something like

97
00:06:17.603 --> 00:06:21.913
that's not gonna fly, but you could
make a resource route that does that.

98
00:06:21.913 --> 00:06:25.565
But yeah, so now we can use that,
how do we use that?

99
00:06:25.565 --> 00:06:31.434
For that sort of thing you aren't
going to need to use state,

100
00:06:31.434 --> 00:06:37.548
to manage that, and so you just say,
use state, titleError.

101
00:06:37.548 --> 00:06:42.517
And then yeah, your initial title
error would probably be nothing,

102
00:06:42.517 --> 00:06:45.954
or I guess it'd be action
data errors.title.

103
00:06:45.954 --> 00:06:50.819
And then from there, you would have to
synchronize anytime the user submits

104
00:06:50.819 --> 00:06:55.846
the form, you'd probably use a use effect
or you could probably put it in the.

105
00:06:55.846 --> 00:07:00.350
Yeah, I probably use a use affect any time
the action data changes, you'll go and

106
00:07:00.350 --> 00:07:03.366
call set title error to
whatever the server sent back.

107
00:07:03.366 --> 00:07:07.060
And then as the user is typing you
can set title.error to whatever.

108
00:07:07.060 --> 00:07:11.119
But this is the cool thing, and this is
what we're gonna talk about in our next

109
00:07:11.119 --> 00:07:15.564
exercise, is that doing that does not make
the rest of it more complicated, right?

110
00:07:15.564 --> 00:07:18.763
It's just an additive thing to make
the user experience a little bit better.

111
00:07:18.763 --> 00:07:19.920
We'll talk about that more.

