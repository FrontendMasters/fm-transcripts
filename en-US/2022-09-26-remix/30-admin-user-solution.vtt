WEBVTT

1
00:00:00.010 --> 00:00:04.889
All right, welcome back to
the last exercise of the day.

2
00:00:04.889 --> 00:00:08.041
What a miracle it is that
you made it to this side.

3
00:00:08.041 --> 00:00:11.397
[LAUGH] All right, so
we want to protect some routes.

4
00:00:11.397 --> 00:00:14.937
One thing that's important for

5
00:00:14.937 --> 00:00:19.656
you to know is that
Remix is responsible for

6
00:00:19.656 --> 00:00:22.943
managing the network chasm.

7
00:00:22.943 --> 00:00:27.952
So it's the one that's gonna be calling
your loaders to get the post data,

8
00:00:27.952 --> 00:00:32.582
to get the code, to navigate between
all of these different routes.

9
00:00:32.582 --> 00:00:36.628
So if we start here, we go to Blog Posts,

10
00:00:36.628 --> 00:00:40.793
we go to My First Post,
we go to Admin, and

11
00:00:40.793 --> 00:00:48.065
each one of these routes has its own
loader defined, as well as its code.

12
00:00:48.065 --> 00:00:52.003
And Remix is rather than saying,
okay, call the parent loader,

13
00:00:52.003 --> 00:00:55.152
then call its child, and
then call its child, and so

14
00:00:55.152 --> 00:01:00.181
on all the way down the line, we're going
to say, just run them all concurrently.

15
00:01:00.181 --> 00:01:02.194
That way, it's as fast as possible.

16
00:01:02.194 --> 00:01:05.390
You don't have a stepping stone,
you have a waterfall,

17
00:01:05.390 --> 00:01:07.532
it just goes right down to the bottom.

18
00:01:07.532 --> 00:01:09.071
This makes it faster.

19
00:01:09.071 --> 00:01:12.795
This also makes things
a little challenging for

20
00:01:12.795 --> 00:01:16.340
us for
what we're trying to accomplish now.

21
00:01:16.340 --> 00:01:20.685
And that is, we want to make it so
that no user who is not an admin,

22
00:01:20.685 --> 00:01:25.190
who is not the admin user,
should be able to see this admin link, or

23
00:01:25.190 --> 00:01:30.678
even get to this admin page, or performing
these admin actions, or any of that.

24
00:01:30.678 --> 00:01:35.713
Because if they're run at the same time,
then you can't just do the check in

25
00:01:35.713 --> 00:01:40.605
one place, and say, if they're not
an admin, get them out of here.

26
00:01:40.605 --> 00:01:44.199
You have to do the check in
every single one of the loaders.

27
00:01:44.199 --> 00:01:46.360
This is not great.

28
00:01:46.360 --> 00:01:50.670
However, the Remix team acknowledges this,
and

29
00:01:50.670 --> 00:01:56.737
has some really good ideas for
how to deal with this specific problem.

30
00:01:56.737 --> 00:02:00.841
And so that will come eventually
probably in the form of another export,

31
00:02:00.841 --> 00:02:04.474
where you'll just, again,
we haven't shipped anything, so

32
00:02:04.474 --> 00:02:07.119
I do hesitate to ever
say anything about that.

33
00:02:07.119 --> 00:02:12.207
But you'd go to the parent route, and
you'd have some sort of export like

34
00:02:12.207 --> 00:02:17.227
beforeLoader, or something, or
like dangerously run before loader.

35
00:02:17.227 --> 00:02:20.481
Because you're you're putting
yourself on the slow path,

36
00:02:20.481 --> 00:02:23.428
everything will be at least
as slow as this is, right?

37
00:02:23.428 --> 00:02:26.538
So I'm not sure what it will be, but

38
00:02:26.538 --> 00:02:31.321
there will be a solution for
this particular problem.

39
00:02:31.321 --> 00:02:36.007
But that said, you don't have to wait for
this solution if this really bothers

40
00:02:36.007 --> 00:02:40.638
you a lot, because, again, Remix
integrates with other node frameworks.

41
00:02:40.638 --> 00:02:44.678
And so you could have an express
middleware that runs before Remix even

42
00:02:44.678 --> 00:02:49.335
sees the request that handles this and
boots them out if they're trying to access

43
00:02:49.335 --> 00:02:51.954
or do something that
you don't want them to.

44
00:02:51.954 --> 00:02:55.336
So if it was really important to you,

45
00:02:55.336 --> 00:03:01.241
you could have something that
sits before Remix to handle this.

46
00:03:01.241 --> 00:03:06.428
And another thing is, most of the time,
you actually are going to do something

47
00:03:06.428 --> 00:03:11.079
with the admin user, or with whatever
user you're trying to access.

48
00:03:11.079 --> 00:03:16.337
So only this user has the power
to edit their tweets,

49
00:03:16.337 --> 00:03:19.215
if only we could be so lucky.

50
00:03:19.215 --> 00:03:22.694
Then you're going to first get that user,
and then you're gonna try and

51
00:03:22.694 --> 00:03:23.502
edit the tweet.

52
00:03:23.502 --> 00:03:26.746
And it's not gonna work, because that user
doesn't have access to the tweet anyway.

53
00:03:26.746 --> 00:03:32.860
So typically, you don't have to
intentionally add these protections.

54
00:03:32.860 --> 00:03:35.696
They will just naturally happen
as you're accessing data, and

55
00:03:35.696 --> 00:03:37.228
trying to go get the user's info.

56
00:03:37.228 --> 00:03:40.463
But in our case, actually,
that is not the case.

57
00:03:40.463 --> 00:03:44.964
All we need is some fancy
require admin user function that

58
00:03:44.964 --> 00:03:49.464
we're gonna write to just make
sure that the admin user or

59
00:03:49.464 --> 00:03:55.121
the user performing this action or
loading this data is the admin user.

60
00:03:55.121 --> 00:03:58.525
Okay, so with all of that said, and

61
00:03:58.525 --> 00:04:03.735
one other thing that I didn't
mention also is that when we go,

62
00:04:03.735 --> 00:04:08.163
yeah, I don't have a link
that'll send us to this.

63
00:04:08.163 --> 00:04:12.081
But when you navigate between,
well, yeah, I do, here we go.

64
00:04:12.081 --> 00:04:17.400
So when I navigate between these,
you see that I'm loading some data for

65
00:04:17.400 --> 00:04:23.346
this route, but I'm not loading the list
of posts for the parent route, right?

66
00:04:23.346 --> 00:04:27.568
So there are also plenty of situations
where the child loader will run, but

67
00:04:27.568 --> 00:04:29.185
the parent loader will not.

68
00:04:29.185 --> 00:04:32.326
And so that's another reason why you
can't depend on the parent loader,

69
00:04:32.326 --> 00:04:34.266
cuz sometimes the child
just runs by itself.

70
00:04:34.266 --> 00:04:39.089
So that's why we have to
do things in this way.

71
00:04:39.089 --> 00:04:42.641
So we're gonna create a function
called requireAdminUser.

72
00:04:42.641 --> 00:04:48.292
And we'll say make a function called
requireAdminUser that takes a Request,

73
00:04:48.292 --> 00:04:53.102
and this request object is going
to have our user's information.

74
00:04:53.102 --> 00:04:55.745
And we actually already
have a requireUser,

75
00:04:55.745 --> 00:04:58.464
which will pull the userId
out of the request.

76
00:04:58.464 --> 00:05:03.203
If you look at that, that is going
to get the userId from the request,

77
00:05:03.203 --> 00:05:05.021
so we can go to get userId.

78
00:05:05.021 --> 00:05:07.715
Ultimately, that comes to the Session.

79
00:05:07.715 --> 00:05:09.599
The session comes out of the cookie, so

80
00:05:09.599 --> 00:05:12.293
that's how the authentication
is working in this app.

81
00:05:12.293 --> 00:05:16.664
We have a cookie, and
then we get the USER_SESSION or

82
00:05:16.664 --> 00:05:21.828
the userId out of that session so
that we can get the user's ID.

83
00:05:21.828 --> 00:05:27.007
Then we pull that from getUserById,
so now, we have the user.

84
00:05:27.007 --> 00:05:30.526
And if there is no user, in this case,
then we're gonna log them out.

85
00:05:30.526 --> 00:05:34.354
We're gonna say, hey, logout,
go get me that response.

86
00:05:34.354 --> 00:05:37.777
This is going to get the session and
destroy that session.

87
00:05:37.777 --> 00:05:40.631
This effectively sets the cookie
to a max age of zero, so

88
00:05:40.631 --> 00:05:42.772
that the browser will delete the cookie.

89
00:05:42.772 --> 00:05:46.033
So that's what logout is gonna do
in the case that there is no user.

90
00:05:46.033 --> 00:05:48.281
So that is what we're going to do.

91
00:05:48.281 --> 00:05:53.281
We're gonna build on top
of all of this work to

92
00:05:53.281 --> 00:05:58.685
get our user from requireUser
with the request.

93
00:05:58.685 --> 00:06:04.532
If no user exists,
then we're going to throw.

94
00:06:04.532 --> 00:06:09.052
We're basically gonna do, actually, you
know what, we don't need to worry about

95
00:06:09.052 --> 00:06:12.445
that, cuz that's handled for us,
so there will always be a user.

96
00:06:12.445 --> 00:06:15.012
But if that user is not the admin user,
then we need to throw.

97
00:06:15.012 --> 00:06:20.629
So we'll say, user.email is not,
wait, [LAUGH],

98
00:06:20.629 --> 00:06:24.638
wait, user email, thank you TypeScript.

99
00:06:24.638 --> 00:06:28.756
You know how long we would have spent
debugging that if we didn't have

100
00:06:28.756 --> 00:06:29.612
Typescript?

101
00:06:29.612 --> 00:06:32.898
Yeah, you got to use TypeScript, folks.

102
00:06:32.898 --> 00:06:34.958
Okay, user.email.

103
00:06:34.958 --> 00:06:40.554
So if the user.email is not
equal to our ENV.ADMIN_EMAIL,

104
00:06:40.554 --> 00:06:45.728
then we're going to throw
await logout(request);.

105
00:06:45.728 --> 00:06:49.970
We'll just boot them off
over to the login screen, so

106
00:06:49.970 --> 00:06:53.474
that's where this redirects them to home.

107
00:06:53.474 --> 00:06:58.994
We could also change this to a redirect
to redirect them to the login,

108
00:06:58.994 --> 00:07:05.195
specifically to the login screen, but
yeah, I think, we'll just logout.

109
00:07:05.195 --> 00:07:09.363
Get them out of there, they're not
supposed to be here, you're not allowed.

110
00:07:09.363 --> 00:07:10.693
Otherwise we'll return user;.

111
00:07:13.627 --> 00:07:16.035
Cool, and we'll export this.

112
00:07:16.035 --> 00:07:21.742
All right, so with that now,
I can go to my admin route,

113
00:07:21.742 --> 00:07:28.300
and I'm going to await
requireAdminUser with the request, and

114
00:07:28.300 --> 00:07:33.655
we're gonna get that request
from our loaderArgs.

115
00:07:33.655 --> 00:07:38.207
And this route, the admin route,
specifically, is now protected.

116
00:07:38.207 --> 00:07:42.751
User should not be able to
get to our post/adminRoute.

117
00:07:42.751 --> 00:07:47.523
But again, they can curl a URL,
they can do whatever they want to,

118
00:07:47.523 --> 00:07:50.434
cuz each one of these are API endpoints.

119
00:07:50.434 --> 00:07:54.985
And so we can't just protect this and
assume everything else is protected.

120
00:07:54.985 --> 00:07:59.426
So we're going to also go to our index,

121
00:07:59.426 --> 00:08:04.817
we'll add our export
function called loader.

122
00:08:04.817 --> 00:08:07.565
This needs to be async.

123
00:08:07.565 --> 00:08:12.146
This will take our
([request): LoaderArgs),

124
00:08:15.539 --> 00:08:20.480
And await requireAdminUser
with the request.

125
00:08:20.480 --> 00:08:24.957
And then, important note that
a loader must return a response.

126
00:08:24.957 --> 00:08:31.273
So we're going to return a JSON
response that just has nothing.

127
00:08:31.273 --> 00:08:36.666
Okay, and then finally for the slug, Here,

128
00:08:36.666 --> 00:08:40.170
we gonna request and

129
00:08:40.170 --> 00:08:44.916
await requireAdminUser.

130
00:08:44.916 --> 00:08:52.413
Oops, Okay, now,
we got all the things protected.

131
00:08:52.413 --> 00:08:56.421
Well, if I come over here, and
when it did a refresh, it's like, hey,

132
00:08:56.421 --> 00:08:57.804
you gotta get out of here.

133
00:08:57.804 --> 00:09:04.099
So let's go log in,
kody@remix.run, Kody loves you.

134
00:09:04.099 --> 00:09:06.187
And there we go.

135
00:09:06.187 --> 00:09:10.707
I can get access to this, but
if I try when I'm not logged in,

136
00:09:10.707 --> 00:09:12.938
it'll send me over to login.

137
00:09:12.938 --> 00:09:16.341
Neato fredo burrito,
one other thing I forgot,

138
00:09:16.341 --> 00:09:21.572
the action also needs to have this
protection, await requireAdminUser,

139
00:09:21.572 --> 00:09:26.986
cuz again, somebody could curl this
directly, so you do have to be careful.

140
00:09:26.986 --> 00:09:29.559
All right, so it's not very nice for

141
00:09:29.559 --> 00:09:34.705
users of our little blog to see this
admin link, and be like, sweet,

142
00:09:34.705 --> 00:09:39.286
I can go be an admin now, and
then get sent straight over to login.

143
00:09:39.286 --> 00:09:40.863
I think that's kinda silly.

144
00:09:40.863 --> 00:09:44.661
And it's also not very nice for
us as admins to look at a post,

145
00:09:44.661 --> 00:09:47.280
and be like, I need to make a change.

146
00:09:47.280 --> 00:09:49.054
Now, I guess,
I'll have to go to the admin place.

147
00:09:49.054 --> 00:09:52.245
It would be nice if I had a little
edit link if I'm an admin, right?

148
00:09:52.245 --> 00:09:56.233
We're progressively enhancing based on
the information that we have, right?

149
00:09:56.233 --> 00:10:01.605
So we're going to make
a Handy Dandy Notebook, no, just kidding.

150
00:10:01.605 --> 00:10:05.968
[LAUGH] I heard a couple of chuckles,
you know what I'm talking about.

151
00:10:05.968 --> 00:10:12.137
Yeah, we'll put this in utils.

152
00:10:12.137 --> 00:10:16.532
And right after use optional user,

153
00:10:16.532 --> 00:10:24.159
I'm gonna export a function
called useOptionalAdminUser.

154
00:10:24.159 --> 00:10:28.709
And this is going to be a User or
undefined, and

155
00:10:28.709 --> 00:10:33.510
I'm going to get my user
from useOptionalUser.

156
00:10:33.510 --> 00:10:37.754
And if that (user?.email
is !== ENV.ADMIN_EMAIL),

157
00:10:37.754 --> 00:10:42.726
is that nice that we have the invite
everywhere, server client all over?

158
00:10:42.726 --> 00:10:43.931
That's kinda nice.

159
00:10:43.931 --> 00:10:48.848
If it's not, then we'll return undefined,
otherwise, we'll return the user.

160
00:10:48.848 --> 00:10:53.909
So now, we have a way to get
the admin user in our components.

161
00:10:53.909 --> 00:10:56.477
If the user is the admin,
then we'll get them.

162
00:10:56.477 --> 00:11:01.410
So now, we can come over to,
let's see, our post listing page,

163
00:11:01.410 --> 00:11:06.452
where we list all of these, and
we're rendering that admin link.

164
00:11:06.452 --> 00:11:12.226
And we'll just say, useOptionalAdminUser,

165
00:11:12.226 --> 00:11:17.432
get our admin user, or yeah, adminUser.

166
00:11:17.432 --> 00:11:21.534
And we'll only render this if we
have the admin user, otherwise,

167
00:11:21.534 --> 00:11:23.301
we won't render anything.

168
00:11:23.301 --> 00:11:26.213
And yes, I'm a big fan of ternaries,

169
00:11:26.213 --> 00:11:30.219
don't you bring this into my codebase,
no thanks.

170
00:11:30.219 --> 00:11:34.785
I've got a blog post about that actually,
if you want to know that.

171
00:11:34.785 --> 00:11:41.115
Okay, sweet, so now, if I'm not logged in,
no admin link, if I am, admin link.

172
00:11:41.115 --> 00:11:43.256
Ta-da, that's nice.

173
00:11:43.256 --> 00:11:49.128
Last thing that I wanna
do is on the slug here,

174
00:11:49.128 --> 00:11:57.022
let's say useOptionalAdminUser( ),
const adminUser.

175
00:11:59.908 --> 00:12:03.914
And we're gonna copy this link,
cuz it's nice and

176
00:12:03.914 --> 00:12:06.907
styled the way I want, adminUser ?.

177
00:12:06.907 --> 00:12:09.766
So if we are the admin user,
then we'll render out a link.

178
00:12:09.766 --> 00:12:15.890
Oops, I'll call it edit, otherwise, no.

179
00:12:15.890 --> 00:12:21.021
Bring in the link, and
yeah, that should do it.

180
00:12:21.021 --> 00:12:25.951
[SOUND] Now, we got edit,
all right, that's right.

181
00:12:25.951 --> 00:12:27.965
This needs to go to,

182
00:12:33.365 --> 00:12:39.926
/posts/admin/, post-slup, there we go.

183
00:12:39.926 --> 00:12:45.495
Okay, edit, ta-da, so that's nice,
nice little enhancement for us.

184
00:12:45.495 --> 00:12:52.458
But again, it is only for us, not for
any people just reading your post.

185
00:12:52.458 --> 00:12:57.180
Last thing I think I wanna show about this
is because all this authentication stuff

186
00:12:57.180 --> 00:13:00.327
was built for us,
you didn't get a chance to see,

187
00:13:00.327 --> 00:13:03.901
how are we getting an admin user and
our components and stuff.

188
00:13:03.901 --> 00:13:08.857
That's a little bit beyond the scope
of a Remix fundamentals workshop, but

189
00:13:08.857 --> 00:13:10.716
I will show that code to you,

190
00:13:10.716 --> 00:13:15.604
because I think this will give you maybe
a little preview of how this works.

191
00:13:15.604 --> 00:13:20.374
This, again, is all generated for
you by the Indie stack, and

192
00:13:20.374 --> 00:13:22.990
so, yeah, you can just use that.

193
00:13:22.990 --> 00:13:28.508
But the way that this works is, first, the
root is responsible for getting the user's

194
00:13:28.508 --> 00:13:33.057
data from the server to the client,
so it gets it in through the loader.

195
00:13:33.057 --> 00:13:36.907
But you'll notice the route is
actually not using the user at all,

196
00:13:36.907 --> 00:13:39.329
there's nothing in here about the user.

197
00:13:39.329 --> 00:13:44.259
So in our utils,
we have a function called useMatchesData,

198
00:13:44.259 --> 00:13:51.235
just a handy little utility that uses this
useMatches function from Remix run React.

199
00:13:51.235 --> 00:13:56.726
So this will tell you all of the matching
routes that are active right now.

200
00:13:56.726 --> 00:13:59.790
So here are all of our matching routes,
and

201
00:13:59.790 --> 00:14:05.325
each one of these elements in the array
has some information about the route,

202
00:14:05.325 --> 00:14:10.196
specifically the route ID as well
as the loader data for that route.

203
00:14:10.196 --> 00:14:14.097
So that's what we're doing here,
is we're saying, hey,

204
00:14:14.097 --> 00:14:18.161
I want you to find me the data for
the route that matches this ID.

205
00:14:18.161 --> 00:14:22.956
Now, you can look at what the IDs are, but

206
00:14:22.956 --> 00:14:26.529
in our case, where is the use?

207
00:14:26.529 --> 00:14:32.028
Yeah, in our case, the root route,
the ID for root route is simply root.

208
00:14:32.028 --> 00:14:36.239
So we say, useMatchesData,
get me the data for the root loader.

209
00:14:36.239 --> 00:14:37.438
And now, I've got my data.

210
00:14:37.438 --> 00:14:40.800
If that data doesn't exist for
some reason, or

211
00:14:40.800 --> 00:14:46.516
the data.user is not a user type, so
we're doing some runtime assertion here,

212
00:14:46.516 --> 00:14:52.172
that's an assertion function in
TypeScript, fancy TypeScript magic there.

213
00:14:52.172 --> 00:14:56.313
So if they're not a user, then just return
undefined;, otherwise, return data.user.

214
00:14:56.313 --> 00:14:58.214
So that's how we get the optional user.

215
00:14:58.214 --> 00:15:02.891
And then we actually also have a user
which will throw an error if there's

216
00:15:02.891 --> 00:15:07.501
no user return, so you could actually
use this on pages that are alike.

217
00:15:07.501 --> 00:15:11.374
There should absolutely be a user here,
if there's not, then something's wrong.

218
00:15:11.374 --> 00:15:13.394
And now, your types are a little nicer,

219
00:15:13.394 --> 00:15:17.623
because you don't have to do an undefined
check, so that's all that's all about.

220
00:15:17.623 --> 00:15:22.597
And so
we're just built on top of that to check.

221
00:15:22.597 --> 00:15:26.224
In addition to checking
that the user exists,

222
00:15:26.224 --> 00:15:29.950
also we want to make sure
that email is correct.

223
00:15:29.950 --> 00:15:33.643
All right, and
that is the last exercise for our day.

224
00:15:33.643 --> 00:15:36.242
What questions do you
have about this exercise?

225
00:15:36.242 --> 00:15:39.376
We'll get into general questions
here in a little bit, but

226
00:15:39.376 --> 00:15:41.771
what questions do you have for
exercise ten?

227
00:15:41.771 --> 00:15:47.740
&gt;&gt; Regarding the useMatchesData, will it
throw if it doesn't match anything for?

228
00:15:47.740 --> 00:15:51.822
Yeah, so useMatchesData,
because we've implemented ourselves,

229
00:15:51.822 --> 00:15:56.262
there won't be any throwing going on here,
it'll just return undefined.

230
00:15:56.262 --> 00:15:58.937
Yeah, you could though.

231
00:15:58.937 --> 00:16:00.507
[LAUGH]

