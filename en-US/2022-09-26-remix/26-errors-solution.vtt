WEBVTT

1
00:00:00.210 --> 00:00:02.990
So let us do exercise eight together.

2
00:00:04.260 --> 00:00:05.560
We are going to create this file.

3
00:00:05.560 --> 00:00:08.220
I am going to start with this one.

4
00:00:09.370 --> 00:00:13.770
And we will go to app routes posts.

5
00:00:13.770 --> 00:00:17.517
But before I create that file, first
I just want to call out the fact that

6
00:00:17.517 --> 00:00:21.850
what we are doing is actually very similar
to what we did with the admin route.

7
00:00:21.850 --> 00:00:24.530
So where we have an admin TSX,
that's our parent route.

8
00:00:24.530 --> 00:00:27.610
And then the admin folder
holds all of our child routes.

9
00:00:27.610 --> 00:00:30.973
Well, right now we have a post
directory that has child routes, but

10
00:00:30.973 --> 00:00:34.100
their children have nothing
because we don't have a post TSX.

11
00:00:34.100 --> 00:00:36.670
And so what we're getting is
actually kind of the default.

12
00:00:36.670 --> 00:00:39.260
So this is basically what the default is.

13
00:00:39.260 --> 00:00:43.190
It's just an outlet,
a component that renders an outlet.

14
00:00:43.190 --> 00:00:48.300
You won't see that in the dev tools
that's just like how functionally

15
00:00:48.300 --> 00:00:52.631
equivalent default route so
we're going to create that but

16
00:00:52.631 --> 00:00:57.170
first I want to demonstrate
the problem that we're solving.

17
00:00:57.170 --> 00:01:01.970
Thing and the problem that we're solving
is if I am on the index route for

18
00:01:01.970 --> 00:01:05.650
instance and
I say some runtime error which of course,

19
00:01:05.650 --> 00:01:10.130
TypeScript would protect me from but
if we had Had that situation or

20
00:01:10.130 --> 00:01:14.690
anything yet gonna get this this is
built into remix and it just shows

21
00:01:14.690 --> 00:01:19.840
you all that nonsense and it's like
that is not a great user experience.

22
00:01:19.840 --> 00:01:23.159
So our objective is to just make
something that's more custom,

23
00:01:23.159 --> 00:01:27.270
something that's a better user
experience for our use case.

24
00:01:27.270 --> 00:01:29.430
Okay, so
that is what we're trying to accomplish.

25
00:01:29.430 --> 00:01:32.860
So let's make the parent
route posts dot TSX and

26
00:01:32.860 --> 00:01:35.870
we're actually gonna grab the default.

27
00:01:35.870 --> 00:01:40.273
So we have functionally changed
nothing everything is functioning

28
00:01:40.273 --> 00:01:45.135
exactly as it was before and we just now
have an additional route and because

29
00:01:45.135 --> 00:01:49.842
we have this route now We can export
a function called an error boundary,

30
00:01:49.842 --> 00:01:53.220
this will get a prompt called error.

31
00:01:53.220 --> 00:01:55.410
And that error will be of type error.

32
00:01:56.770 --> 00:02:01.056
And now we can say,
Let's console dot error, the error so

33
00:02:01.056 --> 00:02:05.868
we can look at it you might like send
this off to a logging service or

34
00:02:05.868 --> 00:02:10.943
something Or potentially and yeah,
we'll just return I do in fact we

35
00:02:10.943 --> 00:02:16.546
actually have this error fallback
component that makes things look nice and

36
00:02:16.546 --> 00:02:20.880
inside of here we can say
something went wrong.

37
00:02:20.880 --> 00:02:24.991
If you get to this error boundary, it's
unlikely that the error message is gonna

38
00:02:24.991 --> 00:02:29.227
be something that's useful to show to
the user because it'll probably be, like,

39
00:02:29.227 --> 00:02:32.071
cannot read title of undefined or
something like that,

40
00:02:32.071 --> 00:02:34.110
that just is not very useful.

41
00:02:34.110 --> 00:02:36.330
So I typically in my air boundaries,

42
00:02:36.330 --> 00:02:41.170
I will not show the error message
to the user because most the time.

43
00:02:41.170 --> 00:02:44.231
It won't make sense to them unless my
users or developers in which case it

44
00:02:44.231 --> 00:02:48.370
actually might be quite quite helpful for
them to say yeah, I got this thing.

45
00:02:48.370 --> 00:02:51.761
Okay, so with that,
now we get snap something went wrong,

46
00:02:51.761 --> 00:02:56.199
a little bit nicer user experience you can
make this you know if you want koala with

47
00:02:56.199 --> 00:02:59.810
a tear running down inside whatever so
that is an error boundary.

48
00:02:59.810 --> 00:03:01.220
That's the entire thing.

49
00:03:01.220 --> 00:03:03.770
And now you just slap these
wherever you want them to go.

50
00:03:03.770 --> 00:03:09.150
So something that might be a little
bit more obvious why this is

51
00:03:09.150 --> 00:03:15.875
actually a pretty nice convention is if
we have an error in our admin section so

52
00:03:15.875 --> 00:03:21.100
if I were to say,
when loading save law right here.

53
00:03:21.100 --> 00:03:24.900
And then come over to my admin and
go to a particular post.

54
00:03:24.900 --> 00:03:26.720
We're gonna get,
snap something went wrong.

55
00:03:26.720 --> 00:03:31.498
So interesting thing is that these
error boundaries will bubble though it

56
00:03:31.498 --> 00:03:34.330
remix says there was an error.

57
00:03:34.330 --> 00:03:35.870
Is there an error boundary at my route?

58
00:03:35.870 --> 00:03:37.080
No, there's not error boundary there.

59
00:03:37.080 --> 00:03:39.976
No, and we'll just keep going up until
we get to that post Arab boundary

60
00:03:39.976 --> 00:03:40.668
that I just put.

61
00:03:40.668 --> 00:03:42.460
Put there, okay?

62
00:03:42.460 --> 00:03:47.257
But if we wanna make an even better user
experience, then we can put an error

63
00:03:47.257 --> 00:03:51.981
boundary right here, potentially have
it be a little bit more specific so

64
00:03:51.981 --> 00:03:54.920
we could say something went wrong loading.

65
00:03:54.920 --> 00:03:58.549
This post and now we have an air boundary,

66
00:03:58.549 --> 00:04:04.380
that's more Isolated and
contextual for that area of the app.

67
00:04:04.380 --> 00:04:08.905
And so actually what might be
kind of interesting is if we say,

68
00:04:08.905 --> 00:04:12.820
up here, this is what I was
talking about earlier, so

69
00:04:12.820 --> 00:04:18.180
we have to say params.slug,
Then we blow up.

70
00:04:19.990 --> 00:04:22.590
And then I come down here and
it all still works.

71
00:04:22.590 --> 00:04:25.710
So the users like hey, for some reason,
I can't get my first post.

72
00:04:25.710 --> 00:04:26.560
They call up support.

73
00:04:26.560 --> 00:04:28.320
They say, my first post isn't working.

74
00:04:28.320 --> 00:04:29.220
The rest of them are fine.

75
00:04:29.220 --> 00:04:30.160
It's just my first post.

76
00:04:30.160 --> 00:04:33.317
I don't know why my first post, and then
they report it to us and be like, yeah,

77
00:04:33.317 --> 00:04:35.020
I've totally forgot I
was just doing a demo.

78
00:04:35.020 --> 00:04:35.873
And now we'll delete that.

79
00:04:35.873 --> 00:04:37.132
[LAUGH] Right?

80
00:04:37.132 --> 00:04:41.084
So that is everything with arrow branches.

81
00:04:41.084 --> 00:04:46.026
The last thing that we had here was
just to put one right there,but that is

82
00:04:46.026 --> 00:04:47.370
the basic.

83
00:04:47.370 --> 00:04:52.760
Idea of error boundaries just allows you
to have something that's contextual,

84
00:04:52.760 --> 00:04:57.516
you do get access to the error and
if you find that useful you can send that

85
00:04:57.516 --> 00:05:02.260
off to reporting or whatever but
yeah render whatever you see fit.

86
00:05:02.260 --> 00:05:03.250
For that error.

87
00:05:03.250 --> 00:05:06.704
I mentioned earlier when
we were talking about this,

88
00:05:06.704 --> 00:05:10.771
that this also does work on
the server render, which is cool and

89
00:05:10.771 --> 00:05:15.510
it works inside of our loader,
not just our React components.

90
00:05:15.510 --> 00:05:17.410
So pretty resilient.

91
00:05:17.410 --> 00:05:21.849
The one thing or some areas where it
will not work is some of your code

92
00:05:21.849 --> 00:05:25.910
that's running outside of
the call stack of Remix.

93
00:05:25.910 --> 00:05:31.760
So events use effects
callbacks of various varieties

94
00:05:31.760 --> 00:05:36.570
that are outside of what
remix is doing those

95
00:05:36.570 --> 00:05:41.520
will not be remix is not
able to handle those.

96
00:05:41.520 --> 00:05:45.090
Is just by nature of how JavaScript works.

97
00:05:45.090 --> 00:05:49.457
But yeah,
most everything else should work.

98
00:05:51.574 --> 00:05:52.110
Sweet.

99
00:05:53.150 --> 00:05:55.570
Okay, then let's do catch boundaries.

100
00:05:55.570 --> 00:06:01.310
So, error boundaries are intended for
catching errors that are unexpected.

101
00:06:01.310 --> 00:06:06.630
But if I go to my first posts,
that's not an unexpected error.

102
00:06:06.630 --> 00:06:11.738
I can actually anticipate that that's
probably pretty likely to happen and

103
00:06:11.738 --> 00:06:15.006
in fact we have a convention for
that on the web and

104
00:06:15.006 --> 00:06:20.591
that is status code 404 not found we're
looking for something didn't find it So

105
00:06:20.591 --> 00:06:25.180
what we are going to do is just make
sure yeah, we're an admin slug.

106
00:06:26.690 --> 00:06:30.500
If the post is not found, instead of
just throwing an error saying, hey,

107
00:06:30.500 --> 00:06:32.150
post wasn't found.

108
00:06:32.150 --> 00:06:35.961
What we want to do is we want to send
a response to say, hey, the post wasn't

109
00:06:35.961 --> 00:06:41.330
found and, and then render something that
says, hey, there's no post by that name.

110
00:06:41.330 --> 00:06:44.762
So what we're going to do is
we'll say if there's not a post,

111
00:06:44.762 --> 00:06:47.600
then we don't wanna execute
the rest of this code.

112
00:06:47.600 --> 00:06:53.160
We do still want to throw so that it
doesn't continue and return this JSON.

113
00:06:53.160 --> 00:06:57.504
I suppose we could return JSON
here that says, post is null or

114
00:06:57.504 --> 00:07:01.100
not found or
whatever you want to do and then.

115
00:07:01.100 --> 00:07:05.111
And branch on that inside of our post
admin component and say, hey, if it was

116
00:07:05.111 --> 00:07:09.390
said not found and render this component
instead, that seems like a lot of work.

117
00:07:09.390 --> 00:07:10.790
I don't want to do that.

118
00:07:10.790 --> 00:07:14.647
Instead, what I want to do is I just
want to have some mechanism that says,

119
00:07:14.647 --> 00:07:17.030
happy path is over here and
it's beautiful.

120
00:07:17.030 --> 00:07:20.404
And there's green grass and gardens and
flowers in this awesome and

121
00:07:20.404 --> 00:07:23.770
then sad path is over here,
and they're separate.

122
00:07:23.770 --> 00:07:25.970
So and
that's what the error boundary does.

123
00:07:25.970 --> 00:07:27.630
We have a catch boundary for this as well.

124
00:07:27.630 --> 00:07:31.830
So we're going to throw a new response.

125
00:07:33.200 --> 00:07:36.510
And I'll just say not found
with a status of 404.

126
00:07:36.510 --> 00:07:40.060
We want that status code that's important.

127
00:07:40.060 --> 00:07:42.220
Browsers behave differently.

128
00:07:42.220 --> 00:07:44.040
Search engines behave differently.

129
00:07:44.040 --> 00:07:45.210
All of that.

130
00:07:45.210 --> 00:07:47.800
It is important that you
have proper status codes.

131
00:07:47.800 --> 00:07:52.786
Did for a long time everything was a 200
for me and that is not the way it is

132
00:07:52.786 --> 00:07:57.452
web apps for all force they matter so
we're gonna send that status but

133
00:07:57.452 --> 00:08:01.555
we're throwing Remix's the one
calling our loader, and so

134
00:08:01.555 --> 00:08:04.705
remix is going to catch
this thread response.

135
00:08:04.705 --> 00:08:08.255
So it catches anything and says,
what is this thing that was thrown?

136
00:08:08.255 --> 00:08:09.479
Was it a response?

137
00:08:09.479 --> 00:08:10.195
It was, great.

138
00:08:10.195 --> 00:08:12.045
Then I'm going to go down this code path.

139
00:08:12.045 --> 00:08:17.503
And this code path says I'm going to
look for the closest catch boundary so

140
00:08:17.503 --> 00:08:22.345
we're going to export a function
called a catch boundary this one

141
00:08:22.345 --> 00:08:27.100
has a slightly different API this
one you get a cut that's what we

142
00:08:27.100 --> 00:08:31.087
call it it's kind of a weird name and
we may change it.

143
00:08:31.087 --> 00:08:36.232
But use catch is a hook that you're
going to use from remix on react and

144
00:08:36.232 --> 00:08:41.310
this caught thing is going to
be the response that we threw.

145
00:08:41.310 --> 00:08:42.950
Okay?
So we threw a response.

146
00:08:42.950 --> 00:08:45.694
We get that response with use catch and

147
00:08:45.694 --> 00:08:49.650
I'm also going to get the Params for
my error message.

148
00:08:49.650 --> 00:08:51.120
So use Params.

149
00:08:52.640 --> 00:08:58.346
And then I'm going to say
if the current response

150
00:08:58.346 --> 00:09:03.217
status is 404 then I'm going to return

151
00:09:03.217 --> 00:09:09.180
an error fallback that says no post found.

152
00:09:09.180 --> 00:09:11.818
But found with the slug.

153
00:09:11.818 --> 00:09:13.586
Params.

154
00:09:13.586 --> 00:09:18.911
That's like, If it's not a status 404,
then somebody else somewhere

155
00:09:18.911 --> 00:09:24.690
through a response and I don't recognize
it, so I'm not gonna deal with it.

156
00:09:24.690 --> 00:09:27.530
What I'll do instead is
I'll just throw an error.

157
00:09:27.530 --> 00:09:32.696
It says unhandled response

158
00:09:32.696 --> 00:09:37.200
status, code status.

159
00:09:37.200 --> 00:09:38.410
And guess where that's gonna go?

160
00:09:39.650 --> 00:09:40.922
Right there.

161
00:09:40.922 --> 00:09:45.490
So I can deal with 404,
but you throw me a 403.

162
00:09:45.490 --> 00:09:46.980
I have no idea what to do with that.

163
00:09:46.980 --> 00:09:48.689
So I'm going to just send it over here.

164
00:09:50.520 --> 00:09:55.630
Cool, so now I come over here

165
00:09:55.630 --> 00:10:00.924
snap no posts found with my posts my

166
00:10:00.924 --> 00:10:07.387
thing yep the first post cool And
that will client side render too so

167
00:10:07.387 --> 00:10:11.396
if you have a link that goes to 404 it
will go over there it will not do like

168
00:10:11.396 --> 00:10:15.680
a full page refresh or anything it'll
navigate over there and it'll render.

169
00:10:15.680 --> 00:10:22.590
Under the catch boundary and
the data response.

170
00:10:22.590 --> 00:10:25.650
So the request for the data will be a 404.

171
00:10:25.650 --> 00:10:29.698
You will get a 404 for that response and
it will end up in the cache boundary.

172
00:10:29.698 --> 00:10:35.741
Cool, sweet,

173
00:10:39.102 --> 00:10:44.189
There's our 404 It
matters folks it matters,

174
00:10:44.189 --> 00:10:49.846
okay and then of course we
apply this the same thing to.

175
00:10:49.846 --> 00:10:56.880
Or other route here.

176
00:10:56.880 --> 00:11:00.290
And then if you wanted to reuse this,
how do you reuse components?

177
00:11:00.290 --> 00:11:03.200
You make a component and you use it again.

178
00:11:03.200 --> 00:11:06.090
So if you really wanted
to reduce duplication and

179
00:11:06.090 --> 00:11:10.741
stuff you could totally make it like
the master catch boundary that handles all

180
00:11:10.741 --> 00:11:14.070
the The different status codes
if you want it to do that.

181
00:11:14.070 --> 00:11:15.580
Okay, great.

182
00:11:15.580 --> 00:11:21.590
Any questions about exercise eight and
error and catch boundaries?

183
00:11:21.590 --> 00:11:26.025
&gt;&gt; So error boundary is for unexpected
errors while catch boundary is for

184
00:11:26.025 --> 00:11:28.310
errors you know how to handle?

185
00:11:28.310 --> 00:11:29.390
&gt;&gt; Yes, exactly.

186
00:11:31.472 --> 00:11:36.090
And actually somebody did ask
during the exercise Time.

187
00:11:36.090 --> 00:11:40.690
Whether you should throw
inside of your models.

188
00:11:40.690 --> 00:11:46.460
So in here we could say,
yeah, if we say get post.

189
00:11:46.460 --> 00:11:48.830
Here's my post await.

190
00:11:48.830 --> 00:11:53.674
And then if not post then you
could throw in new response

191
00:11:53.674 --> 00:11:58.729
not found status four four
otherwise return the post, so

192
00:11:58.729 --> 00:12:04.860
now this get post will always return
the post you could do it this way.

193
00:12:06.460 --> 00:12:07.406
I would not,

194
00:12:07.406 --> 00:12:13.690
I prefer to keep my models just like leave
that to just regular JavaScript things.

195
00:12:13.690 --> 00:12:20.092
No semantically meaningful
framework stuff in here but

196
00:12:20.092 --> 00:12:25.430
to each their own, I'm not going to.

197
00:12:25.430 --> 00:12:30.590
I tell you what to do I'm not your mom but
yeah I would not do this.

198
00:12:30.590 --> 00:12:37.285
I prefer to and part of the reason for
that is what if this get.

199
00:12:37.285 --> 00:12:39.605
Post throw like there's a another way for

200
00:12:39.605 --> 00:12:43.313
this to throw an error now in your
loader you have to do a try catch and

201
00:12:43.313 --> 00:12:47.750
you have to do a check was this a response
then re throw that otherwise I gotta do my

202
00:12:47.750 --> 00:12:51.440
stuff like what nonsense
I don't want to do that.

203
00:12:51.440 --> 00:12:54.837
&gt;&gt; So no I wouldn't do it here
are catch boundaries then for

204
00:12:54.837 --> 00:12:59.550
server side loader action logic while
error boundaries are for client side.

205
00:13:01.040 --> 00:13:04.080
&gt;&gt; No so error boundaries work for
server side as well.

206
00:13:04.080 --> 00:13:09.217
It really comes down to unexpected
errors where you say markdown

207
00:13:09.217 --> 00:13:14.257
dot 2 upper case All right, so
maybe Markdown is not a string,

208
00:13:14.257 --> 00:13:18.350
or maybe it's no at this
point error boundary.

209
00:13:18.350 --> 00:13:20.160
So you did not expect that to happen.

210
00:13:20.160 --> 00:13:21.300
You messed up your code.

211
00:13:21.300 --> 00:13:22.553
That's an error boundary.

212
00:13:22.553 --> 00:13:27.630
Whereas the post does not exist.

213
00:13:27.630 --> 00:13:29.490
Yeah, clearly that's possible.

214
00:13:29.490 --> 00:13:32.120
I want to handle that
case that I can expect.

