WEBVTT

1
00:00:00.045 --> 00:00:01.961
So I'm just going to open up this repo,
and

2
00:00:01.961 --> 00:00:05.210
I'm gonna do a tour of the repo later
when we get to the first exercise, so

3
00:00:05.210 --> 00:00:07.369
don't worry about a lot
of these files in here.

4
00:00:07.369 --> 00:00:09.548
If you're following along,
you can just do what I do.

5
00:00:09.548 --> 00:00:12.809
The only thing that you need to make
sure you do is just install your module.

6
00:00:12.809 --> 00:00:16.815
So do a yarn or NPM,
install whatever your flavor is.

7
00:00:16.815 --> 00:00:20.142
It's all in the package .JSON over the
yarn lock, so you should be good there.

8
00:00:20.142 --> 00:00:22.089
Once you do that,
if you're following along,

9
00:00:22.089 --> 00:00:25.215
what I'm going to do is I'm just gonna
create a new file, call it server js.

10
00:00:25.215 --> 00:00:27.668
And we're just gonna put everything
in here for the sake of brevity.

11
00:00:27.668 --> 00:00:30.738
So walking through
creating a server graph,

12
00:00:30.738 --> 00:00:34.309
the first thing we need is
we need to create a schema.

13
00:00:34.309 --> 00:00:38.786
And a schema is based off of
type definitions, and resolvers.

14
00:00:38.786 --> 00:00:41.104
So first thing let's create
our type definitions.

15
00:00:41.104 --> 00:00:44.548
And we're going to use
a GraphQL tag helper here,

16
00:00:44.548 --> 00:00:47.665
which allows us to write
type definitions and

17
00:00:47.665 --> 00:00:52.848
it will compile them to an AST,
something that the server can understand.

18
00:00:52.848 --> 00:00:55.937
So we're gonna use our
graphql-tag like that.

19
00:00:55.937 --> 00:00:58.899
And then we'll just make
our type definition.

20
00:00:58.899 --> 00:01:02.785
So we'll say typeDefs = the gql tag, and

21
00:01:02.785 --> 00:01:07.456
it's gonna use a template
string here like this.

22
00:01:07.456 --> 00:01:10.304
And we'll just make some type definitions.

23
00:01:10.304 --> 00:01:16.074
So most all the APIs have users, so sure,
we'll make a user, give it an id type.

24
00:01:16.074 --> 00:01:18.637
So remember,
type keyword followed by name.

25
00:01:18.637 --> 00:01:23.148
Then these brackets, this is what's
called creating a object type and

26
00:01:23.148 --> 00:01:26.013
this is the foundation
of creating a server.

27
00:01:26.013 --> 00:01:29.202
So we have a user type
who has an ID field, and

28
00:01:29.202 --> 00:01:34.388
that field is expecting to be an ID
type and it is non-null or required.

29
00:01:34.388 --> 00:01:38.702
I can also make another field like
username whose type would be string and

30
00:01:38.702 --> 00:01:40.975
that's also non-null or required.

31
00:01:40.975 --> 00:01:44.038
And you can imagine you can go on and on.

32
00:01:44.038 --> 00:01:48.090
So something like created at might be
an integer or something like that.

33
00:01:48.090 --> 00:01:55.694
And then we might have another
type here called settings.

34
00:01:55.694 --> 00:01:59.043
And settings might belong to a user.

35
00:01:59.043 --> 00:02:01.134
So we can add a relationship like this.

36
00:02:01.134 --> 00:02:05.063
That belongs to the user and
then you can say something like theme, and

37
00:02:05.063 --> 00:02:06.402
that might be a string.

38
00:02:06.402 --> 00:02:10.005
So we have some type definitions.

39
00:02:10.005 --> 00:02:14.427
The next thing we need to do at minimum is
create a query type, which is the exact

40
00:02:14.427 --> 00:02:18.462
same thing as a type definition up here,
but it's special to graphQL.

41
00:02:18.462 --> 00:02:21.341
GraphQL looking for
a type called query by default,

42
00:02:21.341 --> 00:02:23.768
which allows our clients to query for
data.

43
00:02:23.768 --> 00:02:28.936
So we're gonna make a query type here,
and we're going to define some fields

44
00:02:28.936 --> 00:02:33.642
that a client is able to interact
with to actually retrieve some data.

45
00:02:33.642 --> 00:02:37.891
So we'll just make one for me, give me
myself and that returns a user type.

46
00:02:37.891 --> 00:02:43.508
I could also say give me
some settings by a user.

47
00:02:43.508 --> 00:02:46.005
And that's an ID, so
we have some arguments there.

48
00:02:46.005 --> 00:02:48.376
And that returns settings.

49
00:02:48.376 --> 00:02:52.272
Let me give you the same thing for
mutations, which are the opposite of

50
00:02:52.272 --> 00:02:55.782
queries, which allows you to
mutate some type of data source.

51
00:02:55.782 --> 00:03:00.682
So if you said mutation and
if we wanted to create some settings here,

52
00:03:00.682 --> 00:03:03.480
you might have to create an input type.

53
00:03:03.480 --> 00:03:10.150
Input, NewSettingsInput.

54
00:03:10.150 --> 00:03:18.008
So input type is needed if you wanna pass
an object as an argument to a field.

55
00:03:18.008 --> 00:03:23.601
So I want new settings input and
settings takes the user,

56
00:03:23.601 --> 00:03:30.607
which is going to be an ID, and
then it takes a theme, which is a string.

57
00:03:30.607 --> 00:03:34.450
So now I can say cool,
settings takes an input variable name and

58
00:03:34.450 --> 00:03:38.596
its type is NewSettingsInput is
required and it returns Settings.

59
00:03:38.596 --> 00:03:43.752
That's a very basic graphQL server here,

60
00:03:43.752 --> 00:03:48.907
nothing too special, not using E-nums or

61
00:03:48.907 --> 00:03:52.641
unions or anything like that.

62
00:03:52.641 --> 00:03:55.226
So very basic,
just wanted to get a walkthrough on it and

63
00:03:55.226 --> 00:03:57.866
kind of get a grasp of everyone's
understanding of it and

64
00:03:57.866 --> 00:04:00.011
kind of set the tone for
the rest of the course.

65
00:04:00.011 --> 00:04:02.399
So we got our type definitions here.

66
00:04:02.399 --> 00:04:07.278
The next thing is we'll have to make
some resolvers, which is a map that maps

67
00:04:07.278 --> 00:04:11.257
one to one with the fields that
we have in our type definition.

68
00:04:11.257 --> 00:04:12.982
So normally you start off
creating resolvers for

69
00:04:12.982 --> 00:04:14.504
your queries followed by your mutations.

70
00:04:14.504 --> 00:04:18.193
And then you start creating
resolvers on the field level for

71
00:04:18.193 --> 00:04:20.864
any relationships, like this user here.

72
00:04:20.864 --> 00:04:24.790
And then you might create resolvers for
special things like converting or

73
00:04:24.790 --> 00:04:29.034
transforming your value or even
virtualizing, something that doesn't exist

74
00:04:29.034 --> 00:04:31.899
in your database, but
you want graphQL to expose it.

75
00:04:31.899 --> 00:04:38.384
So we'll start off with our query,
Resolvers like this.

76
00:04:38.384 --> 00:04:42.236
And we know we have a me and
we have a setting.

77
00:04:42.236 --> 00:04:43.813
So we'll just say me, and

78
00:04:43.813 --> 00:04:48.063
we'll just return some mock data
here that looks exactly like a user.

79
00:04:48.063 --> 00:04:51.511
And we know what user has an ID,
a username, and I created that.

80
00:04:51.511 --> 00:04:52.643
So I'll just return that.

81
00:04:52.643 --> 00:04:57.139
So it has an ID 1234, or
whatever that is, and

82
00:04:57.139 --> 00:05:00.787
it has a username, and it created that.

83
00:05:00.787 --> 00:05:08.083
So username coder12, and
it createdAt an integer,

84
00:05:08.083 --> 00:05:12.688
so something like that, so cool.

85
00:05:12.688 --> 00:05:17.435
We've got our new query there for
settings looks like it takes some argument

86
00:05:17.435 --> 00:05:21.454
when we turn settings so
we'll just our code step two settings.

87
00:05:21.454 --> 00:05:24.544
First value is gonna be the root value.

88
00:05:24.544 --> 00:05:25.651
We don't have one here.

89
00:05:25.651 --> 00:05:26.918
This is the top level resolver.

90
00:05:26.918 --> 00:05:31.106
And then we get the user
as an argument here, and

91
00:05:31.106 --> 00:05:35.835
the second object here, so
we'll have a user there.

92
00:05:35.835 --> 00:05:40.238
And then what you can do is just
return something like this.

93
00:05:40.238 --> 00:05:45.928
So settings returns a user type and
a theme.

94
00:05:45.928 --> 00:05:49.540
So I'll just say user and
I'll just put the user ID there.

95
00:05:49.540 --> 00:05:52.197
So let's just do that, and a theme.

96
00:05:52.197 --> 00:05:54.502
I'll just hard code something and
call it the Light theme.

97
00:05:54.502 --> 00:05:58.999
Cool, and
then now we have a settings mutation.

98
00:05:58.999 --> 00:06:01.250
So we'll do that.

99
00:06:03.670 --> 00:06:08.267
And for this one we know that it
takes an argument called input,

100
00:06:08.267 --> 00:06:14.448
which is a NewSettingsInput type, and
that's an object, so no group value there.

101
00:06:14.448 --> 00:06:19.020
We do have an argument called input,
and we're returning

102
00:06:19.020 --> 00:06:24.073
the NewSettings like that over
here which has a user and a theme.

103
00:06:24.073 --> 00:06:25.525
And we know we get a user there.

104
00:06:25.525 --> 00:06:28.835
So I'm just going to return the input
because it's the same thing.

105
00:06:28.835 --> 00:06:30.201
This is not a real database.

106
00:06:30.201 --> 00:06:31.692
So I'll just return that.

107
00:06:31.692 --> 00:06:36.116
ust got to make that one, there we go.

108
00:06:36.116 --> 00:06:39.693
And then now you just probably
want to create resolvers for

109
00:06:39.693 --> 00:06:41.810
any type that has relationships.

110
00:06:41.810 --> 00:06:43.222
So settings has a relationship to user.

111
00:06:43.222 --> 00:06:45.445
So we'll make a resolver for that.

112
00:06:45.445 --> 00:06:50.101
So now I'm going out here and
say settings has a user field.

113
00:06:50.101 --> 00:06:53.418
And because this is a field of a resolver,
the first value would be,

114
00:06:53.418 --> 00:06:54.711
in this case, settings.

115
00:06:54.711 --> 00:07:00.226
So given the settings, I want to return
a user that has an ID of settings.user.

116
00:07:00.226 --> 00:07:02.136
That's what you would do
in a normal database.

117
00:07:02.136 --> 00:07:04.754
But I'm just going to return
the same user that we have up here.

118
00:07:06.998 --> 00:07:07.786
Here we go.

119
00:07:07.786 --> 00:07:12.682
And at a minimum that's pretty
much all you need to create

120
00:07:12.682 --> 00:07:17.895
your re-servers,
have your type definitions from there.

121
00:07:17.895 --> 00:07:19.393
You just need to initialize your server.

122
00:07:19.393 --> 00:07:22.962
So I'm gonna say, ApolloServer which
is the framework that we're using,

123
00:07:22.962 --> 00:07:23.921
like I said before.

124
00:07:23.921 --> 00:07:29.663
This comes from a package
called Apollo-server.

125
00:07:29.663 --> 00:07:32.807
And we can go initialize it.

126
00:07:32.807 --> 00:07:37.487
So we can say, server = new ApolloServer,

127
00:07:37.487 --> 00:07:42.421
takes an object with
some type definitions and

128
00:07:42.421 --> 00:07:45.343
a resolvers map like that.

129
00:07:45.343 --> 00:07:51.178
And then we can say server.listen,
which returns a promise.

130
00:07:51.178 --> 00:07:56.241
Callback here should be
a url property there.

131
00:07:56.241 --> 00:07:59.245
And we can say console.log.

132
00:08:03.094 --> 00:08:08.114
Server on url or server at url.

133
00:08:08.114 --> 00:08:08.983
There we go.

134
00:08:08.983 --> 00:08:10.090
Cool!

135
00:08:10.090 --> 00:08:11.347
So let's start this.

136
00:08:14.024 --> 00:08:16.150
You can just node and
followed by the name.

137
00:08:16.150 --> 00:08:18.527
In this case, server.js is from that.

138
00:08:18.527 --> 00:08:22.197
Oops, I spelled require wrong.

139
00:08:33.159 --> 00:08:35.660
Server, it's misspelled Apollo.

140
00:08:35.660 --> 00:08:37.319
Lot of typos there.

141
00:08:42.616 --> 00:08:43.288
There we go.

142
00:08:43.288 --> 00:08:47.629
Unknown type settings,

143
00:08:47.629 --> 00:08:53.419
did you mean settings or string?

144
00:08:53.419 --> 00:08:58.274
So looks like I have unknown
type per settings, settings.

145
00:08:58.274 --> 00:08:59.079
&gt;&gt; Line 23.

146
00:08:59.079 --> 00:09:00.353
&gt;&gt; Line 23.

147
00:09:00.353 --> 00:09:02.565
There we go, thank you.

148
00:09:02.565 --> 00:09:03.892
One too many Ts.

149
00:09:03.892 --> 00:09:07.415
Gotta love that strict nature,
there you go.

150
00:09:07.415 --> 00:09:09.317
So now we have a server, a 4000.

151
00:09:09.317 --> 00:09:13.736
If you just issue a get request to that in
your browser, you get a GraphQI playground

152
00:09:13.736 --> 00:09:17.796
like this which is the exploratory
documentation that I was talking about.

153
00:09:17.796 --> 00:09:20.735
So ignore all this stuff that I have,
we'll get to that later.

154
00:09:20.735 --> 00:09:23.971
But yeah, so now we have that.

155
00:09:23.971 --> 00:09:25.957
If we look at the docs,
let me make this bigger.

156
00:09:27.938 --> 00:09:31.385
If you look at the docs, you'll see
here's our queries, here's our mutations.

157
00:09:31.385 --> 00:09:34.342
If I do something like asking for
me, and I want the ID back.

158
00:09:34.342 --> 00:09:36.446
I'll get that, I'll get an ID back.

159
00:09:36.446 --> 00:09:44.121
And that's basically us walking
through a basic GraphQL API.

160
00:09:44.121 --> 00:09:47.663
Cool, and like I said, yeah,
there's other things here, right?

161
00:09:47.663 --> 00:09:51.914
Like we didn't talk about a lot of other
things you can do in the type definitions

162
00:09:51.914 --> 00:09:54.147
in different strategies for resolvers.

163
00:09:54.147 --> 00:10:00.805
But like I said, that's just more of,
that's not so much necessary.

164
00:10:00.805 --> 00:10:02.724
I'm always focused on
necessary things here, so

165
00:10:02.724 --> 00:10:04.560
we can get involved with
more advanced things.

