WEBVTT

1
00:00:00.040 --> 00:00:04.859
The first topic we're going to talk
about today now that we all know how to

2
00:00:04.859 --> 00:00:08.811
build a Graph API,
is authentication and authorization.

3
00:00:08.811 --> 00:00:12.056
Anyone who wanna give me their
definition of authentication?

4
00:00:15.148 --> 00:00:17.660
&gt;&gt; Authentication is proving who you are.

5
00:00:19.110 --> 00:00:21.850
&gt;&gt; Yeah, that's a good way to put it,
authentication is proving who you are.

6
00:00:21.850 --> 00:00:23.936
What about authorization?

7
00:00:23.936 --> 00:00:25.222
&gt;&gt; Proving what you can do.

8
00:00:25.222 --> 00:00:26.440
&gt;&gt; Proving what you can do.

9
00:00:26.440 --> 00:00:28.120
Well said yeah, basically.

10
00:00:28.120 --> 00:00:31.610
So what I have here,
authentication is used to identify a user,

11
00:00:31.610 --> 00:00:34.960
to determine if they
are who they say they are.

12
00:00:34.960 --> 00:00:39.320
Basically, it answers the questions of,
who is this user?

13
00:00:39.320 --> 00:00:41.350
Are they who they say they are?

14
00:00:41.350 --> 00:00:42.090
Things like that.

15
00:00:42.090 --> 00:00:45.830
That's the questions that
authentication seeks to answer.

16
00:00:47.030 --> 00:00:48.370
Authorization on the other hand,

17
00:00:48.370 --> 00:00:52.600
is used to determine,
usually an already authenticated user,

18
00:00:52.600 --> 00:00:56.730
if they're allowed to perform certain
operations on certain resources.

19
00:00:56.730 --> 00:01:01.940
So for instance, you might have an RBAC
system, role-based access control.

20
00:01:01.940 --> 00:01:05.020
Where people have roles with
different permission levels,

21
00:01:05.020 --> 00:01:09.040
based off different actions on different
resources, that's basically authorization.

22
00:01:09.040 --> 00:01:11.848
You don't have the right
role to either perform or

23
00:01:11.848 --> 00:01:18.060
delete operation on the payment resource,
something like that.

24
00:01:18.060 --> 00:01:22.830
So those two work together, and
I think when people say the word auth,

25
00:01:22.830 --> 00:01:27.250
generally speaking,
I think they always mean authentication.

26
00:01:27.250 --> 00:01:29.270
And authorization is
usually something special.

27
00:01:29.270 --> 00:01:33.370
A lot of people might not even have
authorization systems built into their

28
00:01:33.370 --> 00:01:36.950
application, depending on your app,
it might not even be a thing.

29
00:01:36.950 --> 00:01:41.240
But if you have any type of
multitenancy or any type of SAS app,

30
00:01:41.240 --> 00:01:43.240
you probably definitely
have authorization because

31
00:01:44.330 --> 00:01:47.630
people have data scopes to themselves, and
you don't want other people looking at it.

32
00:01:47.630 --> 00:01:50.220
So you have to be authorized
to look at your own data.

33
00:01:50.220 --> 00:01:54.450
So even though you might not explicitly
set it up, it's implicitly implied.

34
00:01:54.450 --> 00:01:58.050
So let's talk about a good
auth system in GraphQL.

35
00:01:58.050 --> 00:02:01.960
So for authorization, and this is just
some stuff that I've been thinking

36
00:02:01.960 --> 00:02:05.640
about and
things that I've come across and seen.

37
00:02:05.640 --> 00:02:06.750
So let's focus on authorization.

38
00:02:06.750 --> 00:02:09.550
So a good auth system in
GraphQL with authorization.

39
00:02:09.550 --> 00:02:13.610
Basically, your authorization should
never be coupled to a resolver.

40
00:02:15.210 --> 00:02:18.510
Because one, how do you get that out and
use it on another resolver?

41
00:02:18.510 --> 00:02:19.569
So that's gonna be kind of tough.

42
00:02:20.850 --> 00:02:24.820
Authorization should provide
field level customization rules.

43
00:02:24.820 --> 00:02:29.620
So I should be able to say,
on this field, I want to be able to

44
00:02:29.620 --> 00:02:34.580
add some type of logic for
authorization, only for this field.

45
00:02:34.580 --> 00:02:40.800
And it should be able to allow me to opt
out from authorizing my entire schema.

46
00:02:40.800 --> 00:02:44.224
So I don't want to just say,
locked out of my entire schema with this

47
00:02:44.224 --> 00:02:48.489
authorization custom logic, all right cuz
it would be too flexible, especially if

48
00:02:48.489 --> 00:02:52.236
you have something like sign in and
sign up built into your GraphQL or API.

49
00:02:52.236 --> 00:02:53.958
And no one would ever be
able to sign in or sign up,

50
00:02:53.958 --> 00:02:56.120
because they wouldn't
be authorized to do it.

51
00:02:56.120 --> 00:02:57.770
So you don't wanna do things like that.

52
00:02:57.770 --> 00:03:01.730
You might also have some public
query that you want to expose, and

53
00:03:01.730 --> 00:03:06.280
you don't want that to have any type of
authorization, or anything like that.

54
00:03:06.280 --> 00:03:10.709
As far as authentication,
it's very similar to authorization.

55
00:03:10.709 --> 00:03:15.082
The one thing about authentication is,
because its job is to determine if

56
00:03:15.082 --> 00:03:18.275
the user is who they say they are,
and who the user is.

57
00:03:18.275 --> 00:03:22.258
The resolvers need to know who the user
is in order to probably do some work,

58
00:03:22.258 --> 00:03:24.545
especially if you have a multitenant app.

59
00:03:24.545 --> 00:03:28.808
Almost every query you're going to have
inside of a resolver is going to be based

60
00:03:28.808 --> 00:03:32.245
off like a user ID, like give me
the stuff based off this user ID,

61
00:03:32.245 --> 00:03:34.820
give me this stuff based off this user ID.

62
00:03:34.820 --> 00:03:35.350
So that means,

63
00:03:35.350 --> 00:03:39.980
a really good authentication system
should provide the user to the resolvers.

64
00:03:39.980 --> 00:03:41.760
So we don't have to worry about anything.

65
00:03:41.760 --> 00:03:45.470
Otherwise, the resolver is responsible for
figuring out who the user is.

66
00:03:45.470 --> 00:03:47.430
I mean, you'd have to do that for
pretty much every single resolver.

67
00:03:47.430 --> 00:03:49.124
That can get pretty annoying.

68
00:03:49.124 --> 00:03:51.514
Should not be coupled with a resolver,
and it is for

69
00:03:51.514 --> 00:03:54.917
the same reasons authorization
shouldn't be coupled with a resolver.

70
00:03:54.917 --> 00:03:58.200
Can protect some of your schema and
not all of it.

71
00:03:58.200 --> 00:04:00.585
So again, we don't want to
lock down the entire schema,

72
00:04:00.585 --> 00:04:04.640
because we want some things to be open for

73
00:04:04.640 --> 00:04:08.280
everyone like update, like logging in,
and signing up, and stuff like that.

74
00:04:08.280 --> 00:04:11.040
But we want to opt into
things that we want to.

75
00:04:11.040 --> 00:04:13.910
And also, we still wanna get
down to the field level and

76
00:04:13.910 --> 00:04:18.820
say only this field, we wanna be able
to lock down with authentication, and

77
00:04:18.820 --> 00:04:20.680
that's the only thing that matters.

78
00:04:20.680 --> 00:04:25.266
So to me, that is a good system of
authentication, authorization or

79
00:04:25.266 --> 00:04:27.646
just auth in general, in GraphQL.

80
00:04:27.646 --> 00:04:35.260
And I say this because I've built auth at
least 2025 times in the GraphQL system.

81
00:04:35.260 --> 00:04:38.400
And it wasn't until like,
the 10th time that I start figuring out

82
00:04:38.400 --> 00:04:41.840
really good patterns of like,
okay, I should start doing this.

83
00:04:41.840 --> 00:04:46.790
But initially you start off in a way that
seems easy, but it just doesn't scale.

