WEBVTT

1
00:00:00.350 --> 00:00:02.920
So first things first,
let's build out these functions.

2
00:00:02.920 --> 00:00:05.880
So the authenticated function, so if you
check out the comments right here, and

3
00:00:05.880 --> 00:00:08.660
kind of like the description of
what I gave you, it says text if

4
00:00:08.660 --> 00:00:13.420
the user is on the concepts object
continues to the next resolver if true.

5
00:00:13.420 --> 00:00:14.416
And that's basically it.

6
00:00:14.416 --> 00:00:19.667
So what we can do is we can say if
context.user or actually better yet,

7
00:00:19.667 --> 00:00:25.720
we can say if not context.user, then what
we are gonna do is just throw an error.

8
00:00:27.060 --> 00:00:30.220
And don't worry about errors right now on
GraphQL we're gonna get to that later but

9
00:00:30.220 --> 00:00:33.630
you can just throw an error,
not authorized, like that.

10
00:00:34.640 --> 00:00:37.040
If you are,
then we wanna return the next resolver.

11
00:00:37.040 --> 00:00:39.870
And it's important that
you put return here,

12
00:00:39.870 --> 00:00:42.960
because the resolver is
gonna return a value.

13
00:00:42.960 --> 00:00:47.590
If you don't return it, it'll execute it
but the value will always be undefined

14
00:00:47.590 --> 00:00:50.510
because if you don't return inside of
a function, it's always undefined.

15
00:00:50.510 --> 00:00:52.160
So make sure you put that there.

16
00:00:52.160 --> 00:00:57.880
And then we'll just copy all
of these arcs, like that.

17
00:00:57.880 --> 00:00:58.380
There we go.

18
00:00:59.460 --> 00:01:04.115
Pretty simple for that, and then as far as
the authorization, this one's pretty much

19
00:01:04.115 --> 00:01:08.030
the same except for we're checking for
a role on an authenticated user.

20
00:01:08.030 --> 00:01:12.042
So it checks that the user on
the context has the specified role,

21
00:01:12.042 --> 00:01:14.583
continues to the next resolver if true.

22
00:01:14.583 --> 00:01:18.671
So if not, context.user.role or

23
00:01:18.671 --> 00:01:24.123
if context.user.role
does not equal the role

24
00:01:24.123 --> 00:01:29.858
that was passed,
then were gonna throw an error.

25
00:01:35.300 --> 00:01:40.297
Must be a whatever that role is,

26
00:01:45.333 --> 00:01:46.826
There we go.

27
00:01:46.826 --> 00:01:50.352
And if good, we'll just say next,
return that and

28
00:01:50.352 --> 00:01:52.904
pass all these arguments like this.

29
00:01:57.499 --> 00:02:02.604
Cool, everybody following me so far?

30
00:02:02.604 --> 00:02:04.267
All right, simple enough.

31
00:02:04.267 --> 00:02:07.650
Okay, so
now we're going to our resolvers and

32
00:02:07.650 --> 00:02:11.399
we just need to wrap all
the stuff starting with me.

33
00:02:11.399 --> 00:02:16.582
So with me cuz it's returning yourself
the user, and we get the user again

34
00:02:16.582 --> 00:02:22.033
from the context object which is trading
a token, a possible token for user.

35
00:02:22.033 --> 00:02:25.301
So this may be null,
it may be a user, we don't know.

36
00:02:25.301 --> 00:02:28.500
And that's what the authentication
function helper is doing.

37
00:02:28.500 --> 00:02:32.770
It's checking this user on the context
object to see if it exists or not.

38
00:02:32.770 --> 00:02:34.760
That's the responsibility.

39
00:02:34.760 --> 00:02:37.150
So we wanna do that for
everything that involves a user.

40
00:02:37.150 --> 00:02:38.930
So in our case, me so

41
00:02:38.930 --> 00:02:44.640
we can say authenticated here,
convert this to arrow function like so.

42
00:02:44.640 --> 00:02:46.720
And now we have me.

43
00:02:46.720 --> 00:02:50.562
So to check this out,
if I go and start a server,

44
00:02:57.004 --> 00:02:58.371
Go back to Playground.

45
00:03:00.755 --> 00:03:03.912
I think I already have a JWT in
here that should still be good.

46
00:03:03.912 --> 00:03:06.117
So if I get rid of this JWT, and

47
00:03:06.117 --> 00:03:11.168
I try to execute this I'll just get
an arrow saying not authorized.

48
00:03:11.168 --> 00:03:12.292
So that's good.

49
00:03:12.292 --> 00:03:16.098
If I add the JWT back,
I should, I guess I did.

50
00:03:16.098 --> 00:03:20.560
It's not good anymore, I'll sign up,
let's sign up for one right here.

51
00:03:20.560 --> 00:03:24.640
So that's the variables in here, so cool.

52
00:03:24.640 --> 00:03:26.481
So let me sign up, get this token.

53
00:03:28.541 --> 00:03:35.401
Go back, replace this token with this one,
like that.

54
00:03:35.401 --> 00:03:41.480
And now if I do it, I get back me and
get the email all that stuff.

55
00:03:41.480 --> 00:03:44.170
All of it just works, right?

56
00:03:44.170 --> 00:03:47.660
Pretty cool, so
you did the same thing for posts.

57
00:03:47.660 --> 00:03:53.030
So we come here and
we say authenticated arrow function.

58
00:03:53.030 --> 00:03:55.815
We do the same thing for this one post.

59
00:04:00.772 --> 00:04:05.375
Wanna get all of them in here,
userSettings using user.id so

60
00:04:05.375 --> 00:04:06.887
we'll do that too.

61
00:04:06.887 --> 00:04:12.270
Make sure you're not getting someone
else's settings and just yours.

62
00:04:14.020 --> 00:04:15.800
Feed is public, so we won't wrap that.

63
00:04:16.900 --> 00:04:19.301
Update your settings for sure,
you got to be authenticated,

64
00:04:19.301 --> 00:04:20.374
update your own settings.

65
00:04:23.770 --> 00:04:28.542
To create a post, yep, we only want
authorized users creating posts on

66
00:04:28.542 --> 00:04:32.830
our little network that we have,
our authenticated users.

67
00:04:32.830 --> 00:04:36.002
Update yourself,
definitely got to be authenticated.

68
00:04:40.682 --> 00:04:42.340
Invite, so this is a special one.

69
00:04:42.340 --> 00:04:45.080
So invite is not only do you
need to be authenticated,

70
00:04:45.080 --> 00:04:46.920
you need to be authorized to do this.

71
00:04:46.920 --> 00:04:48.820
So in order to do this,
we need to do a couple things.

72
00:04:48.820 --> 00:04:53.490
One, we'll look at the auth sure,
you could have come in authorize and

73
00:04:53.490 --> 00:04:58.370
also check to see if context.user exists
and then you can just have one function.

74
00:04:58.370 --> 00:05:01.650
But I like to keep each function
responsible for its own job.

75
00:05:01.650 --> 00:05:04.770
So this is not the job to check
to see if the user exists,

76
00:05:04.770 --> 00:05:06.430
although it will error if it doesn't.

77
00:05:06.430 --> 00:05:10.020
It's the job to check to see if
the role in the user is correct.

78
00:05:10.020 --> 00:05:15.156
So that means we need to first check to
see if you're authenticated like this.

79
00:05:18.881 --> 00:05:25.837
And then we need to also check to
see if you're authorized like this.

80
00:05:29.151 --> 00:05:31.368
And authorize, this takes in one argument.

81
00:05:31.368 --> 00:05:33.550
In this case,
it's gonna be the admin like that.

82
00:05:34.780 --> 00:05:37.710
Now you have to be an admin
to be able to invite.

83
00:05:38.790 --> 00:05:44.299
So if you wanted to try that out,
I believe my user is a,

84
00:05:44.299 --> 00:05:49.277
it's a member, so
I have that one member I'll make.

85
00:05:49.277 --> 00:05:57.822
Let's see, member, Of course,

86
00:05:57.822 --> 00:06:02.420
now I have a member one, I'll grab that
and then I'll try to do an invite.

87
00:06:02.420 --> 00:06:08.806
So if I said I'm just gonna
do a shorthand mutation here,

88
00:06:08.806 --> 00:06:14.270
invite, take some inputs,
what does that say?

89
00:06:14.270 --> 00:06:15.466
I got email.

90
00:06:19.256 --> 00:06:22.150
I think it also takes a role maybe, yeah.

91
00:06:24.270 --> 00:06:26.380
I'll just put, invite a member here.

92
00:06:27.870 --> 00:06:31.600
Try to get this back and
at my headers for authorization,

93
00:06:40.664 --> 00:06:46.408
With the member JWT, and
if I try execute this, must be an admin.

94
00:06:46.408 --> 00:06:51.100
If I go back and grab my app JWT that
I have here and try to do invite,

95
00:06:55.599 --> 00:06:57.177
We get it, it works.

96
00:06:57.177 --> 00:07:02.350
So super clean, very simple,
just makes sense.

97
00:07:02.350 --> 00:07:05.860
And then for sign up and sign in,
we definitely don't wanna lock those down

98
00:07:05.860 --> 00:07:08.230
because no one would ever be
able to sign up and sign in.

99
00:07:08.230 --> 00:07:10.120
So don't ever do that.

100
00:07:10.120 --> 00:07:12.675
And then we have these
few level resolvers.

101
00:07:12.675 --> 00:07:17.603
So because these few level resolvers
are resolved after types which are usually

102
00:07:17.603 --> 00:07:19.442
resolved on the query level,

103
00:07:19.442 --> 00:07:23.130
we don't necessarily have to
authenticate these fields.

104
00:07:23.130 --> 00:07:26.189
Although there may be different scenarios
where you can like for instance,

105
00:07:26.189 --> 00:07:28.630
I'm not exactly doing
an authentication here.

106
00:07:28.630 --> 00:07:31.610
But I am checking to
make sure that the posts

107
00:07:31.610 --> 00:07:36.160
on the user that you're trying to get,
that belongs to you.

108
00:07:36.160 --> 00:07:39.576
So this will prevent you from
looking at any others user's post.

109
00:07:39.576 --> 00:07:44.501
And that's because the way that this
graph works is you might be able to go

110
00:07:44.501 --> 00:07:47.990
look at another user object
through the post type.

111
00:07:47.990 --> 00:07:50.700
So if I were to go look at a post,
a post has an author field on it,

112
00:07:50.700 --> 00:07:54.920
which is a user type, that user who
created that post might not be you.

113
00:07:54.920 --> 00:07:56.510
And if I don't catch this,

114
00:07:56.510 --> 00:08:01.370
you might find a way to look at some other
user's post through the connection of,

115
00:08:02.380 --> 00:08:06.060
you might find another way to look at
another user's post through a post.

116
00:08:06.060 --> 00:08:08.122
So it's very complicated but this is not,

117
00:08:08.122 --> 00:08:12.092
technically authentication is more like
locking down information as new roles.

118
00:08:12.092 --> 00:08:13.540
It's like a multi-tenet thing.

119
00:08:13.540 --> 00:08:16.510
So we're not doing authentication or
anything like that but

120
00:08:16.510 --> 00:08:17.940
you could do authorization.

121
00:08:17.940 --> 00:08:20.800
I guess, you can think of this
as some sort of authorization.

122
00:08:20.800 --> 00:08:26.350
It's not so much of a role but
are you the user of these posts?

123
00:08:26.350 --> 00:08:28.102
So you could use your
authorization helper here.

124
00:08:28.102 --> 00:08:33.033
So let's say there was a field on
settings that had payment info,

125
00:08:33.033 --> 00:08:37.620
had a payment or a subscription info or
something like that.

126
00:08:37.620 --> 00:08:40.560
And you don't wanna show that to
every person in your organization.

127
00:08:40.560 --> 00:08:44.220
So you will lock that down to only admins
can look at, the subscription info and

128
00:08:44.220 --> 00:08:46.840
a payment last four and stuff like that.

129
00:08:46.840 --> 00:08:49.670
So you could lock it
down on that field level,

130
00:08:49.670 --> 00:08:55.070
that most of the time authentication is
gonna happen on the query mutation level.

131
00:08:56.320 --> 00:09:00.228
&gt;&gt; Is there any advantage
to using the method

132
00:09:00.228 --> 00:09:04.368
an exercise over using schema directives?

133
00:09:04.368 --> 00:09:05.440
&gt;&gt; Man, that's such a good question.

134
00:09:05.440 --> 00:09:07.360
So we're gonna get the schema
directives later today,

135
00:09:07.360 --> 00:09:11.320
and you'll have the opportunity to
make authentication directives.

136
00:09:11.320 --> 00:09:15.660
And the advantage is,
you don't have to rewrite this,

137
00:09:15.660 --> 00:09:18.220
you won't have to wrap every
single resolver every single time.

138
00:09:18.220 --> 00:09:19.460
You can write one directive and

139
00:09:19.460 --> 00:09:23.280
it'll wrap any resolver you want it
to without having to repeat yourself.

140
00:09:23.280 --> 00:09:25.050
So your code will be a lot cleaner.

141
00:09:25.050 --> 00:09:29.850
But the actual implementation is
90% the same of what you just did.

142
00:09:29.850 --> 00:09:33.680
You just have to write some code
to telegraph to how to do it.

143
00:09:33.680 --> 00:09:37.000
So obviously, the other benefit is
that you just have less code, and

144
00:09:37.000 --> 00:09:38.800
it's easier to modify.

145
00:09:38.800 --> 00:09:40.950
And it just looks cleaner honestly.

146
00:09:43.180 --> 00:09:47.941
&gt;&gt; Is it possible to do a data
validation using this method that is

147
00:09:47.941 --> 00:09:50.149
using the authentication?

148
00:09:50.149 --> 00:09:51.663
&gt;&gt; Yeah, you can do data validation.

149
00:09:51.663 --> 00:09:54.797
So I'm guessing what they're
describing is some input arguments.

150
00:09:54.797 --> 00:09:58.893
And you wanna validate that those inputs
are what they are outside of what's

151
00:09:58.893 --> 00:10:03.117
capable what GraphQL input types which
are checking just to see if something is

152
00:10:03.117 --> 00:10:05.052
a string or something is a integer.

153
00:10:05.052 --> 00:10:08.300
But you wanna check to see if something
is greater than this or less than that.

154
00:10:08.300 --> 00:10:10.290
Yes, that's a really
good approach to do that.

155
00:10:10.290 --> 00:10:13.740
You could definitely wrap your
resolvers to check for those inputs.

156
00:10:13.740 --> 00:10:17.409
If you could just think of that process
of what we did is basically like creating

157
00:10:17.409 --> 00:10:21.910
middleware for your resolvers and applying
that middleware to any resolver you want.

158
00:10:21.910 --> 00:10:24.980
So inside of that context, sure,
you can do whatever you want and

159
00:10:24.980 --> 00:10:29.642
checking inputs for different values and
stuff like that, it's a great place.

