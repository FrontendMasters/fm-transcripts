WEBVTT

1
00:00:00.260 --> 00:00:02.864
So if you didn't get a chance to
pull the ripple down, pull it down.

2
00:00:02.864 --> 00:00:06.070
I'm just gonna give you
a tour of what's happening.

3
00:00:06.070 --> 00:00:07.470
So if you're on the master branch,

4
00:00:07.470 --> 00:00:10.180
which you should,
that's what we're gonna be starting.

5
00:00:10.180 --> 00:00:13.710
There's also a solution branch that has

6
00:00:13.710 --> 00:00:17.870
all the code that will be finishing for
this curriculum.

7
00:00:17.870 --> 00:00:21.140
So you can always check that out for
references, or if you just

8
00:00:21.140 --> 00:00:24.720
get to the point where you want to see
how I did something, go check it out.

9
00:00:24.720 --> 00:00:27.490
There's no one way to do any of
the stuff that we're doing today.

10
00:00:27.490 --> 00:00:30.130
There's many ways to do all
the stuff we're doing today.

11
00:00:30.130 --> 00:00:31.840
So that's just a reference.

12
00:00:31.840 --> 00:00:35.930
Your invitation might also be pretty good,
too.

13
00:00:35.930 --> 00:00:39.360
So anyway, walking into the source folder,
you have a couple of files here.

14
00:00:39.360 --> 00:00:42.000
We have author js, you're gonna
be im a lot of work in here for

15
00:00:42.000 --> 00:00:43.260
this exercise, we'll get to it.

16
00:00:44.310 --> 00:00:46.180
Directives, so we'll get to this later.

17
00:00:46.180 --> 00:00:47.280
Don't worry about what's in there.

18
00:00:48.540 --> 00:00:52.620
The index file, this is where we
actually create our graph kill server.

19
00:00:52.620 --> 00:00:55.950
So the thing to note here is,
we already have some type definitions,

20
00:00:55.950 --> 00:00:56.960
we have some resolvers.

21
00:00:56.960 --> 00:01:00.810
And we have this context object
that's doing some authentication.

22
00:01:00.810 --> 00:01:03.080
So already have set up for you.

23
00:01:03.080 --> 00:01:08.840
And JWT based authentication
system in the context objects.

24
00:01:08.840 --> 00:01:11.990
And basically, what I'm doing here,
is I'm just grabbing the token,

25
00:01:11.990 --> 00:01:14.450
if there is a token from
the authorization header, and

26
00:01:14.450 --> 00:01:17.640
I'm trying to see if I can
straight that token for a user.

27
00:01:17.640 --> 00:01:20.110
And if I can,
I pass it down on the context objects.

28
00:01:20.110 --> 00:01:24.700
That user may be null,
this function handles any errors, if there

29
00:01:24.700 --> 00:01:29.350
is no token and there is no user, it won't
break, it'll just set use it to Nolan.

30
00:01:29.350 --> 00:01:30.540
You just have a no user.

31
00:01:30.540 --> 00:01:34.370
So this doesn't block any
execution from graph QL.

32
00:01:34.370 --> 00:01:36.780
This is only for authorization.

33
00:01:36.780 --> 00:01:41.280
It's trying to figure out if the user is
who they say they are, and if they're not,

34
00:01:41.280 --> 00:01:47.320
its job is not to break
the execution of graph QL,

35
00:01:47.320 --> 00:01:50.260
because our whole server would be locked
down, and that's not what we want.

36
00:01:50.260 --> 00:01:52.070
We don't want our whole server
to be locked down because

37
00:01:52.070 --> 00:01:53.480
the user isn't authorized.

38
00:01:53.480 --> 00:01:56.910
Because we might have things that we
don't care if you authorize or not.

39
00:01:56.910 --> 00:01:57.900
So we don't wanna lock it down.

40
00:01:57.900 --> 00:02:00.020
We just wanna figure out who you are and
pass it down.

41
00:02:00.020 --> 00:02:02.020
If you're nobody,
we're gonna pass nobody down.

42
00:02:02.020 --> 00:02:03.533
That's basically what's happening here.

43
00:02:03.533 --> 00:02:05.952
So all this is given to you for free.

44
00:02:05.952 --> 00:02:11.220
Resolvers, these are all the resolvers
that I already created for our server.

45
00:02:11.220 --> 00:02:13.610
Once you look at the type definitions,
you'll understand.

46
00:02:13.610 --> 00:02:18.480
Basically, this server is going
to be based on a social network.

47
00:02:18.480 --> 00:02:22.380
So we have users, we have posts,
users have settings,

48
00:02:22.380 --> 00:02:24.670
we have a feed, things like that.

49
00:02:24.670 --> 00:02:26.980
And these are all the resolvers for that.

50
00:02:26.980 --> 00:02:31.350
You'll notice in here that most of
the resolvers are gonna be using

51
00:02:31.350 --> 00:02:35.440
the user for
doing any type of interaction with our,

52
00:02:35.440 --> 00:02:37.470
our mock database here that
I'll get to in a little bit.

53
00:02:38.840 --> 00:02:42.000
And you'll see a little comment up here
that saying, pretty much any query or

54
00:02:42.000 --> 00:02:47.410
mutation resolver using a user for
a database query requires authentication.

55
00:02:47.410 --> 00:02:51.480
So first is one that doesn't,
this public resolver function for

56
00:02:51.480 --> 00:02:56.180
the feed, this has no authentication,
cuz it's a public feed of posts.

57
00:02:56.180 --> 00:02:57.880
So you wouldn't need to authenticate this.

58
00:02:57.880 --> 00:03:01.800
But for instance, if you wanted to
get a user's settings, well, yeah,

59
00:03:01.800 --> 00:03:03.890
you might need to be authenticated
to get your own settings.

60
00:03:03.890 --> 00:03:07.530
So, and you know that, because we're
using the user ID inside the database.

61
00:03:08.660 --> 00:03:11.990
Type definitions,
here's exactly what our API looks like.

62
00:03:11.990 --> 00:03:14.050
We have some up here.

63
00:03:14.050 --> 00:03:17.070
We have AI type user,
because social networks have users.

64
00:03:17.070 --> 00:03:21.180
We have an authenticated user,
which is a user with a JWT on it.

65
00:03:21.180 --> 00:03:24.630
We have a post that users
can use to create post,

66
00:03:24.630 --> 00:03:26.910
settings which belongs to a user.

67
00:03:26.910 --> 00:03:32.720
We have an invite used to invite
people if you're a certain role.

68
00:03:34.250 --> 00:03:37.350
And then, we have a whole
bunch of queries and stuff.

69
00:03:37.350 --> 00:03:40.456
So for instance, the queries we have
here is be able to get yourself with me.

70
00:03:40.456 --> 00:03:43.100
You can get all the posts,

71
00:03:43.100 --> 00:03:47.560
you can get one post, you can get gesture
settings, and you can get the public feed.

72
00:03:47.560 --> 00:03:50.440
And then, for mutations,
you can update your settings.

73
00:03:50.440 --> 00:03:53.910
You can create a post, update yourself,
you can do an invite, and

74
00:03:53.910 --> 00:03:55.820
you can sign up and sign in.

75
00:03:55.820 --> 00:03:57.849
So a lot of things that
are given to you for

76
00:03:57.849 --> 00:04:00.431
free, so
this seems like a complete server to you.

77
00:04:00.431 --> 00:04:02.290
And you're like,
what is this course about?

78
00:04:02.290 --> 00:04:03.420
Yeah, this is just the beginning.

79
00:04:03.420 --> 00:04:05.150
Everything else is gonna
be on top of that.

80
00:04:05.150 --> 00:04:07.920
So this is all you know about
graph kil do is how to do this.

81
00:04:07.920 --> 00:04:08.780
You're in the right course.

82
00:04:10.570 --> 00:04:12.810
And next thing here is we
got this utils function.

83
00:04:12.810 --> 00:04:16.180
There's only one function here, and
it's helpful for something later on today.

84
00:04:16.180 --> 00:04:18.670
It's formatting a date and
stuff like that.

85
00:04:18.670 --> 00:04:20.910
And the last thing we'll
talk about is the database.

86
00:04:20.910 --> 00:04:22.580
So I don't have a real database in here,

87
00:04:22.580 --> 00:04:25.850
because the dependency of that is
just too crazy for this course.

88
00:04:25.850 --> 00:04:29.820
So I'm using something called the low db,
which is low-database.

89
00:04:29.820 --> 00:04:32.160
And it's based of on a JSON file, so

90
00:04:32.160 --> 00:04:37.020
you have a JSON file here,
that database rights to you synchronously.

91
00:04:37.020 --> 00:04:41.019
And then, I just went ahead and created
some mock models very similar to what you

92
00:04:41.019 --> 00:04:44.911
have in an auditorium, like mongoose,
or sequel, or something like that.

93
00:04:44.911 --> 00:04:46.740
That will basically give
you all these methods.

94
00:04:46.740 --> 00:04:50.550
So find one, find Mini,
update one, remove,

95
00:04:50.550 --> 00:04:53.470
create one, create Mini, stuff like that.

96
00:04:53.470 --> 00:04:59.280
So you'll have access to that models
objects, which is basically this,

97
00:04:59.280 --> 00:05:04.140
models that settings, models that post,
models not user, you have access to that,

98
00:05:04.140 --> 00:05:07.260
inside the context object,
because I'm passing it down here.

99
00:05:07.260 --> 00:05:11.160
So all your resolvers will
have access to DB and models.

100
00:05:11.160 --> 00:05:13.890
So you don't have to import any of that.

101
00:05:13.890 --> 00:05:16.870
I'm a big fan of trying
to pass things down.

102
00:05:16.870 --> 00:05:20.250
To the resolvers, the concepts, as much as
possible, without having an import them,

103
00:05:20.250 --> 00:05:21.300
cuz they're lot easier to test,

104
00:05:21.300 --> 00:05:25.160
cuz you can mark those things out by
injecting things into the arguments,

105
00:05:25.160 --> 00:05:27.850
versus having to mark things
out that you imported on top.

106
00:05:29.940 --> 00:05:33.850
Cool, that's the tour of the also
there's some test in here,

107
00:05:33.850 --> 00:05:36.180
we'll get to test later, so
you don't have to worry about that.

108
00:05:36.180 --> 00:05:38.480
As far as scripts package that JSON,

109
00:05:38.480 --> 00:05:42.690
if you run the yarn dev script, this will
start the server and keep reloading it for

110
00:05:42.690 --> 00:05:45.830
you if you make changes, so
you don't have to worry about anything.

111
00:05:45.830 --> 00:05:47.040
The start command is for production.

112
00:05:47.040 --> 00:05:50.360
And when we get the test, you have
a test command that will run your test.

113
00:05:50.360 --> 00:05:52.080
But the command you interested
in is gonna be Dev.

114
00:05:52.080 --> 00:05:57.250
So yarn dev or NPM run dev, cool.

115
00:05:57.250 --> 00:05:59.080
Any questions on the turning point?

116
00:05:59.080 --> 00:05:59.840
Yes.

117
00:05:59.840 --> 00:06:06.330
&gt;&gt; So index js,
he mentioned that the user, if it

118
00:06:06.330 --> 00:06:11.930
get used from token fails, if there's no
token whatever user is passed down is no,

119
00:06:11.930 --> 00:06:17.635
but I noticed that in the resolvers,
you reference user ID for it or user.id.

120
00:06:17.635 --> 00:06:18.207
&gt;&gt; Yeah.

121
00:06:18.207 --> 00:06:23.080
&gt;&gt; How does Apollo server
handle get errors, [INAUDIBLE].

122
00:06:23.080 --> 00:06:27.261
&gt;&gt; So after authentication, I'm sorry.

123
00:06:27.261 --> 00:06:29.955
Later today,
we're gonna talk about error handling.

124
00:06:29.955 --> 00:06:32.271
But you're right, that will break.

125
00:06:32.271 --> 00:06:34.019
And what you're about to
do right now is fix it.

126
00:06:34.019 --> 00:06:36.501
Cuz that's 100% gonna break.

127
00:06:36.501 --> 00:06:38.271
Yes, good question.

