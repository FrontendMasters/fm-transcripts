WEBVTT

1
00:00:00.140 --> 00:00:01.630
I don't really like
testing on the front end.

2
00:00:01.630 --> 00:00:04.220
I like testing on the back end
because it's so simple, so easy.

3
00:00:04.220 --> 00:00:09.490
This unit integration, mock everything
out is beautiful front end testing.

4
00:00:09.490 --> 00:00:14.080
So painful, so painful like, I mean trying
to set up a testing on a framework is like

5
00:00:14.080 --> 00:00:17.280
there's a new way every day,
and I just can't stand it.

6
00:00:17.280 --> 00:00:21.355
But on the backend is super easy and
I'm glad to say with Apollo and

7
00:00:21.355 --> 00:00:24.920
graphql, it's probably some of the easiest
server testing I've ever had to do.

8
00:00:24.920 --> 00:00:26.870
It's like ridiculously easy.

9
00:00:26.870 --> 00:00:29.050
So we're going to talk about
a few of those things.

10
00:00:29.050 --> 00:00:33.040
But let's talk about the different things
that you can test and how you would test

11
00:00:33.040 --> 00:00:37.570
on the graph do so resolvers,
how would you test resolvers and graphql.

12
00:00:37.570 --> 00:00:41.090
Well, I mean they basically just function
right so you would do a test on them.

13
00:00:41.090 --> 00:00:45.320
They're just methods on an object that
they literally know nothing about graphql,

14
00:00:45.320 --> 00:00:48.030
they get past these arguments and
they execute something.

15
00:00:48.030 --> 00:00:49.540
That's it, that's the visual resolvers,

16
00:00:49.540 --> 00:00:53.440
they have no association with
the framework that's executing them.

17
00:00:53.440 --> 00:00:57.690
They're just a map of methods it's
literally just testing those and

18
00:00:57.690 --> 00:01:00.300
this is why I like to pass
everything in through the context.

19
00:01:00.300 --> 00:01:01.370
Because when I'm testing them,

20
00:01:01.370 --> 00:01:04.680
I can just mock that whole context
object out to be whatever I want.

21
00:01:04.680 --> 00:01:07.840
And it just works versus like
having all these inputs and

22
00:01:07.840 --> 00:01:11.940
trying to mock those out using something
like just or sign on whatever you want to

23
00:01:13.020 --> 00:01:17.180
do, like I said, you just mock out
any data sources that you might use.

24
00:01:17.180 --> 00:01:21.440
So if a resolver is talking to a res
client or if your resolver s talking to

25
00:01:21.440 --> 00:01:22.910
a database, it's not important
that that red client is working.

26
00:01:22.910 --> 00:01:28.950
It's not important that that database
is working, that's not what you're

27
00:01:28.950 --> 00:01:32.800
testing right now, you're only testing
the business logic of the resolver.

28
00:01:32.800 --> 00:01:34.390
So you can mock the other stuff out.

29
00:01:34.390 --> 00:01:36.220
This is a unit test of the resolver.

30
00:01:36.220 --> 00:01:39.880
It's not testing to see if the database
query works, you don't really need to know

31
00:01:39.880 --> 00:01:42.990
that you might need to know if you pass
the right stuff to the database query.

32
00:01:42.990 --> 00:01:46.250
But testing at the database responded
is not the job of the resolver.

33
00:01:46.250 --> 00:01:49.200
The resolver expecting
the database to respond.

34
00:01:49.200 --> 00:01:52.810
So and then yeah,
mock up all the DB calls.

35
00:01:52.810 --> 00:01:54.470
And the next thing is testing a schema.

36
00:01:54.470 --> 00:01:57.670
So basically, you can, there's a lot
of ways you can test the schema.

37
00:01:57.670 --> 00:02:01.950
I mean, the most brutal way to test
the schema Is just to do this string,

38
00:02:01.950 --> 00:02:03.455
Eagles this string.

39
00:02:03.455 --> 00:02:08.390
[LAUGH] I do not recommend doing that,
that is so bad, but you can do it.

40
00:02:08.390 --> 00:02:11.220
And I think in one case, we had to do it
at one point there was no other way to

41
00:02:11.220 --> 00:02:14.760
test the schema that we knew of,
we learned a lot better.

42
00:02:14.760 --> 00:02:18.960
But yeah, you could have like a string
that has tight definitions in it.

43
00:02:18.960 --> 00:02:21.890
And another one in your test
like it's got to equal this.

44
00:02:21.890 --> 00:02:24.450
And whenever you change your type file
someone fall you got to go change it

45
00:02:24.450 --> 00:02:27.420
another file, but you don't want to do
that because then it gets crazy with

46
00:02:27.420 --> 00:02:32.040
spacing and then you gotta try to
format it like just don't do it.

47
00:02:32.040 --> 00:02:35.020
The best way is to convert
your TypeDefs into a schema.

48
00:02:35.020 --> 00:02:40.020
So, for instance if you use that GQO
tag that converts the type definition,

49
00:02:40.020 --> 00:02:42.720
the schema definition language into an AST

50
00:02:42.720 --> 00:02:46.270
which is a JavaScript representation
of a schema so now you have an object.

51
00:02:46.270 --> 00:02:47.710
Okay.
Now, you can compare that object to

52
00:02:47.710 --> 00:02:50.960
another object so maybe that's a little
better than testing strains so

53
00:02:50.960 --> 00:02:53.744
maybe use a GQO tag on
your tag definition.

54
00:02:53.744 --> 00:02:56.500
And maybe have something else
hardcoded somewhere else and

55
00:02:56.500 --> 00:02:59.610
you test it against that,
that might be a good way.

56
00:02:59.610 --> 00:03:01.250
That's one way to test the schemas.

57
00:03:01.250 --> 00:03:04.880
But basically, you can just unit test any
of the object types as well just to see if

58
00:03:04.880 --> 00:03:06.300
they have the right field on them.

59
00:03:06.300 --> 00:03:10.300
User has first name and
its type of string.

60
00:03:10.300 --> 00:03:14.260
User has ID and
this type is ID unit test that

61
00:03:14.260 --> 00:03:17.120
I don't see a lot of people unit
testing their schema, stop.

62
00:03:17.120 --> 00:03:21.340
One thing that I see a lot but sometimes
depending on the application you might

63
00:03:21.340 --> 00:03:24.550
need too and our example,
we had to because our app

64
00:03:24.550 --> 00:03:28.310
generate a schema every time, so we had
to make sure that schema was correct.

65
00:03:28.310 --> 00:03:32.350
So we have to test our schema, but if your
schema is not dynamically generated like

66
00:03:32.350 --> 00:03:34.700
it's read in file like
we've been doing all day.

67
00:03:35.990 --> 00:03:37.730
Testing scheme is probably
not that big of a deal,

68
00:03:37.730 --> 00:03:40.880
you're probably more concerned
about it changing and

69
00:03:40.880 --> 00:03:45.400
people adding things they shouldn't be
adding versus, it's passing a test.

70
00:03:45.400 --> 00:03:49.400
So, you probably want to look at something
like Apollo's service where you can

71
00:03:49.400 --> 00:03:52.140
lock a schema down and prevent it
from being changed without different

72
00:03:52.140 --> 00:03:54.110
authorization rules and stuff like that.

73
00:03:54.110 --> 00:03:57.400
Like a remote schema service that might
something a little more interesting.

74
00:03:57.400 --> 00:03:59.040
Testing won't cover all those basis.

75
00:04:01.750 --> 00:04:04.890
Yeah, and testing the server,
you have integration testing

76
00:04:04.890 --> 00:04:08.300
of the entire server and that's
kinda we're gonna to be doing today.

77
00:04:08.300 --> 00:04:10.150
And that basically is.

78
00:04:10.150 --> 00:04:11.430
There's a lot of ways to do it.

79
00:04:11.430 --> 00:04:12.730
We're going to do it the Apollo way.

80
00:04:12.730 --> 00:04:16.380
First, I just started using the Apollo and
maybe a couple months ago, but

81
00:04:16.380 --> 00:04:18.430
before that I use just like
this standard way, and

82
00:04:18.430 --> 00:04:20.880
it still works like both approaches are so
good.

83
00:04:20.880 --> 00:04:22.570
It really doesn't matter.

84
00:04:22.570 --> 00:04:25.970
But yeah, you basically test the entire
service or like, here's a query.

85
00:04:25.970 --> 00:04:29.210
I'm going to execute this query and
then I expect this result to come back.

86
00:04:29.210 --> 00:04:31.550
Like you're testing the whole flow or
here's a mutation.

87
00:04:31.550 --> 00:04:32.710
I'm going to ask you this mutation.

88
00:04:32.710 --> 00:04:35.610
I expect this result to come back
through testing the typedefs.

89
00:04:35.610 --> 00:04:38.740
So you're testing the query you sent up,
you're testing the schemer,

90
00:04:38.740 --> 00:04:40.520
you're testing the resolvers.

91
00:04:40.520 --> 00:04:41.410
You're doing all of it.

92
00:04:41.410 --> 00:04:43.810
And then you get to pick and choose
what you want to mark out, if you will,

93
00:04:43.810 --> 00:04:47.930
all of its around sure, make all
the run if not mark things out, and

94
00:04:47.930 --> 00:04:49.010
we'll go over that approach.

95
00:04:51.270 --> 00:04:55.350
And then the way you do that is
basically you create a test client to

96
00:04:55.350 --> 00:05:00.030
use to issue queries and mutations with
against a testing instance of your server.

97
00:05:00.030 --> 00:05:03.990
So because we don't have a client, we're
gonna create a fake client on the server

98
00:05:03.990 --> 00:05:07.020
that would act as if it was a react or
graphQL playground.

99
00:05:07.020 --> 00:05:10.560
And then we're going to create
a testing instance of our server.

100
00:05:10.560 --> 00:05:12.000
Just like we created an Apollo server.

101
00:05:12.000 --> 00:05:14.900
We're gonna create a version of that,
that's meant just for

102
00:05:14.900 --> 00:05:16.810
testing and it's really cool.

103
00:05:18.630 --> 00:05:21.240
From there, like I said,
you can mock out whatever you want.

104
00:05:21.240 --> 00:05:23.910
variables, context, data sources.

105
00:05:23.910 --> 00:05:24.600
Doesn't matter.

