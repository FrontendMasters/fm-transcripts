WEBVTT

1
00:00:00.130 --> 00:00:03.410
This is one of my favorite things,
I love Real time graph,

2
00:00:03.410 --> 00:00:05.670
I think it's like this amazing,
it's ridiculous.

3
00:00:05.670 --> 00:00:08.980
Basically you have two solutions
when it comes to accessing data

4
00:00:08.980 --> 00:00:12.140
in real time graph,
we have something called subscriptions.

5
00:00:12.140 --> 00:00:17.130
And basically, they're a well supported
GraphQL operation that's useful for

6
00:00:17.130 --> 00:00:18.660
notified clients of events.

7
00:00:20.390 --> 00:00:23.659
Another approach we have is
something called Live queries,

8
00:00:23.659 --> 00:00:27.064
client side implementation to
be notified when data changes.

9
00:00:27.064 --> 00:00:30.820
These are two different approaches
that graph kill supports.

10
00:00:30.820 --> 00:00:35.079
There's nothing stopping you from
adding your own implementation,

11
00:00:35.079 --> 00:00:37.325
I mean, you could literally throw.

12
00:00:37.325 --> 00:00:40.709
They use something like partknob or
firebase, you can just make your own,

13
00:00:40.709 --> 00:00:43.236
there's nothing to stopping
you from doing that.

14
00:00:43.236 --> 00:00:46.530
These are just the implementations
that are built into GraphQL

15
00:00:46.530 --> 00:00:48.960
through some means either
through the GraphQL spec or

16
00:00:48.960 --> 00:00:53.440
through some server that you are using or
some service that you bought.

17
00:00:53.440 --> 00:00:57.612
These are used with the ones that
GraphQL support on some type of bases.

18
00:01:00.853 --> 00:01:03.779
Subscriptions versus live queries,
so there is a difference and

19
00:01:03.779 --> 00:01:05.544
we're gonna talk about some of those.

20
00:01:05.544 --> 00:01:11.270
So for subscriptions, these
are definitely part of the GraphQL spec.

21
00:01:11.270 --> 00:01:13.150
So if you were to go look at the spec,

22
00:01:13.150 --> 00:01:16.840
you would see something in there about
subscriptions and how to use them.

23
00:01:16.840 --> 00:01:19.777
Very much like you would use queries and
mutations,

24
00:01:19.777 --> 00:01:23.328
descriptions are sibling to queries and
mutation operators.

25
00:01:23.328 --> 00:01:25.609
They're just there, they're pretty well,

26
00:01:25.609 --> 00:01:28.600
except that you're not doing
anything extra to use them.

27
00:01:28.600 --> 00:01:31.680
And they're more concerned
about event observation.

28
00:01:31.680 --> 00:01:35.350
So it's not so
much concerned about when data changes.

29
00:01:35.350 --> 00:01:38.795
It's more about when this event is fired.

30
00:01:38.795 --> 00:01:43.120
Which is a big difference when it comes
to real time so take note of that.

31
00:01:43.120 --> 00:01:45.942
It's definitely concerned about
when the events are fired.

32
00:01:45.942 --> 00:01:49.240
And then because it is part of the spec,
there's great support.

33
00:01:49.240 --> 00:01:53.492
There's, I can't think of a graph kill
server implementation that doesn't support

34
00:01:53.492 --> 00:01:54.374
subscriptions.

35
00:01:54.374 --> 00:01:56.260
I mean,
they would be behind at this point.

36
00:01:56.260 --> 00:01:59.230
Subscriptions had been part of
the spec for over a year now.

37
00:01:59.230 --> 00:02:01.674
And everything pretty much supports it, so

38
00:02:01.674 --> 00:02:05.108
you can pretty much guarantee
that if you use subscriptions,

39
00:02:05.108 --> 00:02:08.888
you should be good to go as far as
having a client-side limitation.

40
00:02:08.888 --> 00:02:13.701
Take advantage of it, or using a tool like
playground, which supports subscriptions.

41
00:02:13.701 --> 00:02:16.030
It's just there, so that's a good feeling.

42
00:02:17.400 --> 00:02:20.460
LiveQueries on the other hand
though are extremely experimental.

43
00:02:22.010 --> 00:02:25.690
They are coming from the graph to spec and
this is something that they wanna do,

44
00:02:25.690 --> 00:02:28.120
but they're just not there yet.

45
00:02:29.470 --> 00:02:33.330
Just to enable them, it's basically
like first finding a service or

46
00:02:33.330 --> 00:02:36.620
a framework that supports them and
then turning on a flag or

47
00:02:36.620 --> 00:02:39.320
paying some extra money or
something like that or changing your code.

48
00:02:39.320 --> 00:02:45.119
It's very experimental, but it's working
on it to become part of the spec.

49
00:02:45.119 --> 00:02:47.420
And it's more concerned
about data observation.

50
00:02:47.420 --> 00:02:51.125
So unlike subscriptions where you're
looking at events and events being fired,

51
00:02:51.125 --> 00:02:55.720
livequeries are like, this data changed,
and that's a big difference too.

52
00:02:55.720 --> 00:02:58.870
So it kind of changes how
you architecture your app,

53
00:02:58.870 --> 00:03:02.440
your clients, to figure out when to
get new data and stuff like that.

54
00:03:04.030 --> 00:03:06.200
And like I said, support is getting there.

55
00:03:06.200 --> 00:03:12.060
I have seen a lot of things pop up that
support life queries, even paid services.

56
00:03:12.060 --> 00:03:14.010
I've seen some support live queries.

57
00:03:14.010 --> 00:03:18.681
I've seen some framework support them and
like a or something like that.

58
00:03:18.681 --> 00:03:22.770
But it's just not up to par with
subscriptions, which is a standard.

59
00:03:22.770 --> 00:03:25.920
Also take note that live queries were
announced way out the subscription.

60
00:03:25.920 --> 00:03:28.440
And so
subscriptions had a head start stop that.

61
00:03:28.440 --> 00:03:32.200
They both were announced and,
[INAUDIBLE] just took off know that

62
00:03:32.200 --> 00:03:34.959
subscriptions was just a thing
before live queries was.

63
00:03:38.030 --> 00:03:42.490
Cool, and if for both of them, they both
have flexible transports and protocols and

64
00:03:42.490 --> 00:03:43.110
what I mean by that.

65
00:03:43.110 --> 00:03:48.050
So like we're talking as
far as transports go and

66
00:03:48.050 --> 00:03:52.180
protocols, we're talking
like web sockets polling.

67
00:03:52.180 --> 00:03:55.402
Server sent events,
they both support all that.

68
00:03:55.402 --> 00:03:59.531
And then as far as like different
protocols you got, you can use Redis for

69
00:03:59.531 --> 00:04:00.080
PubSub.

70
00:04:00.080 --> 00:04:02.889
You can use pretty much whatever you want.

71
00:04:02.889 --> 00:04:06.051
They both really flexible and
don't care, whatever protocol or

72
00:04:06.051 --> 00:04:08.460
transport mechanism that
you use to offer that.

73
00:04:08.460 --> 00:04:14.205
In fact, some of the simplest ways enable
subscriptions is just like use polling,

74
00:04:14.205 --> 00:04:16.926
just like polling you get all the data.

75
00:04:16.926 --> 00:04:18.470
They both have predictable responses.

76
00:04:18.470 --> 00:04:24.570
So you're able to get back exactly what
you want back, just like graphQL queries.

77
00:04:24.570 --> 00:04:27.290
Mutations allow you to do, you can do
those with subscriptions and live queries.

78
00:04:27.290 --> 00:04:29.380
So you won't be surprised,

79
00:04:29.380 --> 00:04:33.240
your application won't break because you
got back something you didn't expect.

80
00:04:33.240 --> 00:04:37.080
You're only gonna get back what you asked
for, the same thing with subscriptions and

81
00:04:37.080 --> 00:04:39.330
live query, so very predictable.

82
00:04:39.330 --> 00:04:43.060
You can be rest assured that these
events or this data that's coming in

83
00:04:43.060 --> 00:04:46.240
as things change are gonna be exactly
what you asked for and nothing more,

84
00:04:46.240 --> 00:04:49.490
nothing less, so
you don't have to figure that part out.

85
00:04:49.490 --> 00:04:53.988
And that's the great thing about using
something like subscriptions and

86
00:04:53.988 --> 00:04:58.920
live queries in GraphQL versus setting up
your own system through something like

87
00:04:58.920 --> 00:05:02.133
firebase or pubnub or
pusher, outside of GraphQL.

88
00:05:02.133 --> 00:05:05.781
Although you can use those technologies
together with subscriptions and

89
00:05:05.781 --> 00:05:09.661
live queries, there's you can also just
completely get away from GraphQL and

90
00:05:09.661 --> 00:05:11.990
just have that stuff work outside of it.

91
00:05:11.990 --> 00:05:14.730
Well, you won't get like predictable
responses and stuff like that, so

92
00:05:14.730 --> 00:05:15.940
you lose out on it.

93
00:05:15.940 --> 00:05:18.580
But it's easier to implement,
so which one to use?

94
00:05:18.580 --> 00:05:19.950
Just use subscriptions.

95
00:05:19.950 --> 00:05:22.310
I mean, it's better support,
it just works.

96
00:05:22.310 --> 00:05:23.860
We're not gonna go to LiveQueries today.

97
00:05:23.860 --> 00:05:26.815
If anyone has questions about LiveQueries,
you can ask me later today and

98
00:05:26.815 --> 00:05:29.400
I'll show you some of
the things that support it.

99
00:05:29.400 --> 00:05:35.680
I've tried to use them once, didn't work,
but I know a lot about them.

100
00:05:35.680 --> 00:05:37.290
So if you got any questions, let me know.

101
00:05:37.290 --> 00:05:38.888
But where's it gonna use subscriptions?

102
00:05:38.888 --> 00:05:43.262
I recommend, if you are interested in real
time and you actually need it then use

103
00:05:43.262 --> 00:05:47.457
subscriptions because honestly,
you might not even need subscriptions.

104
00:05:47.457 --> 00:05:52.235
But if you do 100%, recommend just
using subscriptions, but why?

105
00:05:52.235 --> 00:05:56.851
So, if manual refecthing and
polling have too high of a latency cost,

106
00:05:56.851 --> 00:06:00.750
like for instance, a chat app or
something like that?

107
00:06:00.750 --> 00:06:02.710
Then you definitely
wanna use subscriptions.

108
00:06:02.710 --> 00:06:07.560
But actually, most of the time,
polling does the job, honestly.

109
00:06:07.560 --> 00:06:10.880
If you just are really good with polling,
and use something like Apollo Client,

110
00:06:10.880 --> 00:06:14.070
which has a really good polling
mechanism built into it?

111
00:06:14.070 --> 00:06:19.086
Or even a refetch, just like, just let
me do a refetch when this thing happens,

112
00:06:19.086 --> 00:06:22.916
when this page loads or
when this button is clicked or whatever.

113
00:06:22.916 --> 00:06:25.140
I would say that works most of the time.

114
00:06:25.140 --> 00:06:29.450
You're gonna get the job done, and
it's only when latency is an issue and

115
00:06:29.450 --> 00:06:31.970
you wanna like,
know the minute it happens,

116
00:06:31.970 --> 00:06:36.034
the millisecond it happens, then I would
looked into this as subscriptions.

117
00:06:37.750 --> 00:06:43.170
Also if the initial state is huge, but the
changes are really, really, really small.

118
00:06:43.170 --> 00:06:45.048
That's another good use case for
subscription.

119
00:06:45.048 --> 00:06:49.230
So, and our example would be like a social
network, we have like a public feed.

120
00:06:49.230 --> 00:06:54.040
The initial state on that feed might
be a huge list of thousands of posts.

121
00:06:54.040 --> 00:06:56.140
But a change might just
be one little post.

122
00:06:56.140 --> 00:06:57.490
So that would be a good use case for

123
00:06:57.490 --> 00:07:00.210
subscriptions because we can do a query
to get all the initial feeds and

124
00:07:00.210 --> 00:07:03.590
then we can just subscribe to
get new ones as they come in.

125
00:07:03.590 --> 00:07:07.402
So it's a really good use case for that.

126
00:07:07.402 --> 00:07:10.240
And also, because live queries,
like I said just aren't there yet.

127
00:07:10.240 --> 00:07:14.350
They're just not there yet, so of all
three of those work for you, then yeah,

128
00:07:14.350 --> 00:07:18.478
maybe you need subscriptions, if not,
just use polling or just do a refetch.

129
00:07:18.478 --> 00:07:20.038
And figure out from there.

130
00:07:20.038 --> 00:07:24.401
&gt;&gt; Is there any way to use subscriptions
on a non native GraphQL architecture,

131
00:07:24.401 --> 00:07:27.280
one more GraphQL's wrapped
around the REST API.

132
00:07:29.150 --> 00:07:34.540
&gt;&gt; Yes, subscriptions have no idea

133
00:07:34.540 --> 00:07:37.750
where the data is coming from,
just like any other thing in GraphQL.

134
00:07:37.750 --> 00:07:40.680
It doesn't care if the data
is coming from rest.

135
00:07:40.680 --> 00:07:44.730
Doesn't matter if it's coming from a
database, rest, another graphical server.

136
00:07:44.730 --> 00:07:48.150
You can use subscriptions because
that is completely independent

137
00:07:48.150 --> 00:07:51.740
on how you are notified, because
the notification part of the subscriptions

138
00:07:51.740 --> 00:07:53.110
as you'll find out is manual.

139
00:07:53.110 --> 00:07:54.441
You have to be the one to notify.

140
00:07:54.441 --> 00:07:57.510
So the data sources,
it doesn't really matter.

141
00:07:57.510 --> 00:07:59.490
Usually happens on
a mutation most of the time.

