WEBVTT

1
00:00:00.000 --> 00:00:00.840
We broke some things.

2
00:00:00.840 --> 00:00:04.200
I'm gonna dive a little more in
detail about how to actually

3
00:00:04.200 --> 00:00:05.355
format some of those errors.

4
00:00:05.355 --> 00:00:07.990
And then we're gonna talk
about some of the built in

5
00:00:07.990 --> 00:00:11.880
error classes that Apollo gives us,
that has like very specific error codes.

6
00:00:11.880 --> 00:00:12.410
So let's do that.

7
00:00:14.640 --> 00:00:18.820
So I just showed you how to throw
errors which, it's not that hard.

8
00:00:18.820 --> 00:00:20.200
You just, throw an error.

9
00:00:20.200 --> 00:00:21.430
That's really cool.

10
00:00:21.430 --> 00:00:26.150
But what if we wanted to use
some custom errors like for

11
00:00:26.150 --> 00:00:29.440
instance, a user was not authenticated.

12
00:00:29.440 --> 00:00:32.790
We could handle it like we have
authentication logic in our context,

13
00:00:32.790 --> 00:00:35.290
method and our other server and right now.

14
00:00:37.010 --> 00:00:38.180
We're just throwing errors.

15
00:00:38.180 --> 00:00:39.460
They're super generic.

16
00:00:39.460 --> 00:00:42.900
But what if we wanna make our own error
class that had like a some specific code.

17
00:00:42.900 --> 00:00:44.790
Well, Apollo server has
some of those built in.

18
00:00:44.790 --> 00:00:47.320
And one of them is called
authentication error.

19
00:00:47.320 --> 00:00:48.610
That's a one.

20
00:00:48.610 --> 00:00:52.030
Another one is, user input error.

21
00:00:52.030 --> 00:00:56.050
And I think they're all
based off on Apollo error.

22
00:00:56.050 --> 00:01:00.560
So you can make your own era class
extended from Apollo era and

23
00:01:00.560 --> 00:01:02.730
use them for wherever you want.

24
00:01:02.730 --> 00:01:04.740
So in this case authentication error.

25
00:01:04.740 --> 00:01:07.930
If I wanted to say that
user was authenticated,

26
00:01:07.930 --> 00:01:09.170
I'm just going to replace it here.

27
00:01:10.950 --> 00:01:12.620
Authentication error.

28
00:01:12.620 --> 00:01:16.300
And we can just say, not off like that.

29
00:01:16.300 --> 00:01:20.121
Save that.

30
00:01:20.121 --> 00:01:21.319
There we go.

31
00:01:26.713 --> 00:01:30.118
Try to run this again and you can see
I still get the same message not off

32
00:01:30.118 --> 00:01:32.240
everything but then you get this code.

33
00:01:32.240 --> 00:01:33.610
The code is changed.

34
00:01:33.610 --> 00:01:36.780
It's unauthenticated,
we didn't have to do anything about that.

35
00:01:36.780 --> 00:01:39.210
You can see the statue starts
off with authentication error,

36
00:01:39.210 --> 00:01:41.030
and we still get this stacktrace.

37
00:01:41.030 --> 00:01:45.280
So this is like a really great starting
place to create or to use, like some built

38
00:01:45.280 --> 00:01:51.710
in error messages or error handlers that
a GraphQL or Apollo provides for us.

39
00:01:51.710 --> 00:01:53.460
Another one is like the user input one.

40
00:01:53.460 --> 00:01:58.350
So this is like one if I think we had
a question earlier, what the wrapping

41
00:01:58.350 --> 00:02:03.420
the resolvers be a good place for checking
the input on an incoming resolver.

42
00:02:03.420 --> 00:02:06.200
Yeah, and then if you want to throw an
error based on that you can use this class

43
00:02:06.200 --> 00:02:07.400
right here user input error.

44
00:02:07.400 --> 00:02:10.410
So you gave me the wrong field or
something like that.

45
00:02:12.240 --> 00:02:15.430
This will give you a nice area that you
can handle on your front end to determine

46
00:02:15.430 --> 00:02:17.460
if the user input was messed up or not.

47
00:02:17.460 --> 00:02:19.810
So you can show an error
to your users like,

48
00:02:19.810 --> 00:02:22.220
Hey, you just you didn't
type the right stuff.

49
00:02:22.220 --> 00:02:23.640
And it's a little off.

50
00:02:23.640 --> 00:02:27.960
And usually it's something that like
you can't detect on the schema level.

51
00:02:27.960 --> 00:02:31.610
So, yeah, the schema says it's a string,
and you sent me a string, but

52
00:02:31.610 --> 00:02:33.590
my database says it can't
be longer than eight.

53
00:02:33.590 --> 00:02:34.740
And you sent me 10 characters.

54
00:02:34.740 --> 00:02:37.690
So I'm gonna throw you
a bad user input error.

55
00:02:37.690 --> 00:02:41.950
So something like that, and
you can see is pretty, pretty simple.

56
00:02:41.950 --> 00:02:43.240
There's nothing to it.

57
00:02:43.240 --> 00:02:46.720
And as far as like extending your own,
I mean, you can look at the docs but

58
00:02:46.720 --> 00:02:48.610
it's basically super simple.

59
00:02:48.610 --> 00:02:51.190
All you have to do is
extend this Apollo error.

60
00:02:51.190 --> 00:02:55.840
You can add your own message, you can add
your own code, as it's very basic, but

61
00:02:55.840 --> 00:02:58.350
you can also just make
your own error class.

62
00:02:58.350 --> 00:03:01.550
And it also works pretty
fine to just give it a code.

63
00:03:01.550 --> 00:03:05.850
It's really basic if you go look
at the code for Apollo error.

64
00:03:05.850 --> 00:03:07.860
So that's one thing for
the built in errors.

65
00:03:07.860 --> 00:03:12.310
The other thing is intercepting errors and
changing them.

66
00:03:12.310 --> 00:03:15.150
So you can go down to Apollo Server.

67
00:03:15.150 --> 00:03:18.970
You can type in formatError(),
which is a function.

68
00:03:20.140 --> 00:03:22.490
And you can see that the arguments here

69
00:03:22.490 --> 00:03:25.670
are gonna be basically the error
that comes in from GraphQL.

70
00:03:25.670 --> 00:03:30.550
So if we do this, and
I were to just log this error here?

71
00:03:30.550 --> 00:03:33.537
You'll see what I'm talking about,
console.log(e), and

72
00:03:33.537 --> 00:03:36.590
I'm just gonna return that error,
so we don't break anything.

73
00:03:42.110 --> 00:03:44.320
Run this one more time, still breaks.

74
00:03:44.320 --> 00:03:47.470
And if we go back,
we can see we get this error here.

75
00:03:48.690 --> 00:03:50.180
It's a GraphQL error.

76
00:03:51.330 --> 00:03:53.730
Wrong filters the message that I put and
you can see,

77
00:03:53.730 --> 00:03:57.670
here's all the stuff you have access
to all this so you can remove Pushpop.

78
00:03:57.670 --> 00:03:59.800
Do whatever you want to this error and
return it.

79
00:03:59.800 --> 00:04:02.490
So if I'm just like, you know what,

80
00:04:02.490 --> 00:04:07.930
I don't want to have the exception
on the extensions very quick.

81
00:04:07.930 --> 00:04:09.380
So I'm just got to take that off.

82
00:04:09.380 --> 00:04:11.860
You could just take it off as an object,
you can modify it and

83
00:04:11.860 --> 00:04:13.200
return it however you want.

84
00:04:13.200 --> 00:04:18.471
There's nothing stopping me from
returning a completely new error here.

85
00:04:18.471 --> 00:04:21.721
And says my error.

86
00:04:21.721 --> 00:04:27.150
And completely overriding whatever
you through in your resolvers.

87
00:04:27.150 --> 00:04:28.750
It's my error now.

88
00:04:28.750 --> 00:04:30.630
So you have complete control over that.

89
00:04:30.630 --> 00:04:35.220
This is also a good place if you're
using something like Century or

90
00:04:35.220 --> 00:04:38.720
any error reporting software,
you would do that here.

91
00:04:38.720 --> 00:04:44.230
It's okay,
I wanna report like actual app errors.

92
00:04:44.230 --> 00:04:46.300
I don't wanna report user input errors.

93
00:04:46.300 --> 00:04:49.000
I don't wanna report
authentication errors.

94
00:04:49.000 --> 00:04:53.320
So you would filter based software
errors type to determine.

95
00:04:53.320 --> 00:04:55.502
This is something you wanna
report to Century or not.

96
00:04:55.502 --> 00:05:00.057
First is reporting every single answer,
every single error to century or

97
00:05:00.057 --> 00:05:03.690
whatever your error log in
services if you have one.

98
00:05:03.690 --> 00:05:07.490
That's something we do a lot because the
last thing I wanna do is log into error

99
00:05:07.490 --> 00:05:08.880
reporting software and

100
00:05:08.880 --> 00:05:13.420
see like a 1000 unauthenticated
errors that's not a real error.

101
00:05:13.420 --> 00:05:16.100
I don't really care about that I
used to forget the Azure API key.

102
00:05:16.100 --> 00:05:19.140
But I do want to see if my app crashed
because the resolvers messed up or

103
00:05:19.140 --> 00:05:23.230
the database hung on a query or something
like that I want to see those errors.

104
00:05:23.230 --> 00:05:26.080
So I'll filter them out here and
report only on that.

105
00:05:26.080 --> 00:05:27.020
And it's pretty easy.

106
00:05:27.020 --> 00:05:31.100
So if any one of those errors were created
with Apollo you can do like instance of

107
00:05:31.100 --> 00:05:36.090
Sydney like he instance of and it feels
authentication arrogance is an instance of

108
00:05:36.090 --> 00:05:38.990
authentication error is it an instance of.

109
00:05:38.990 --> 00:05:42.430
Whatever that works pretty well, even an
instance of Apollo era works pretty well,

110
00:05:42.430 --> 00:05:44.190
they all kind of come from there.

111
00:05:44.190 --> 00:05:47.650
Or you can just like look at any other
type of metadata that you want to look at,

112
00:05:47.650 --> 00:05:49.340
but you have complete control over it.

113
00:05:49.340 --> 00:05:53.560
So if you can't get the type of error
reporting you want by creating an error

114
00:05:53.560 --> 00:05:58.060
class, you can always go back to format
and do literally whatever you want.

115
00:05:58.060 --> 00:05:59.000
And that's what's gonna happen.

