WEBVTT

1
00:00:00.250 --> 00:00:02.960
Creating flexibility with directives.

2
00:00:02.960 --> 00:00:05.350
So, what are directives?

3
00:00:05.350 --> 00:00:09.880
Basically, directives are things that
allow you to add logic and metadata to

4
00:00:09.880 --> 00:00:15.015
your Schemas, Queries, Mutations,
fields, types, pretty much anything.

5
00:00:15.015 --> 00:00:18.090
Directives can act like middleware for
your schemas or

6
00:00:18.090 --> 00:00:22.490
even post-processing hooks for
your queries Mutations.

7
00:00:22.490 --> 00:00:24.760
And that's because you can use
directives in two different places.

8
00:00:24.760 --> 00:00:26.890
You can use them on the Schema level,

9
00:00:26.890 --> 00:00:30.190
you can also use directives
on the client side.

10
00:00:30.190 --> 00:00:34.300
So on the query and mutation level,
there's many types of directives and

11
00:00:34.300 --> 00:00:38.840
within those types, you can use
them on different types of nodes,

12
00:00:38.840 --> 00:00:42.947
fields, object types, inomes,

13
00:00:42.947 --> 00:00:48.100
inputs, arguments, whatever you want,
you can add a directive.

14
00:00:48.100 --> 00:00:50.160
What it's gonna do,
I don't know, it's up to you.

15
00:00:50.160 --> 00:00:53.080
People get really silly with these
directive sometimes, I don't know.

16
00:00:53.080 --> 00:00:55.400
You could probably get really creative,
you think about it.

17
00:00:56.400 --> 00:00:59.490
I know we made our directive
that basically does

18
00:00:59.490 --> 00:01:00.800
all of our analytic tracking.

19
00:01:00.800 --> 00:01:04.280
So we can add a directive on any field and
our report to our analytics for us.

20
00:01:04.280 --> 00:01:08.303
So we don't have to hard code analytics
tracking, we just put a directive on it,

21
00:01:08.303 --> 00:01:08.966
just works.

22
00:01:10.861 --> 00:01:12.185
Why is directives?

23
00:01:12.185 --> 00:01:16.240
So, fine-grain control down to the field
level on your type definitions..

24
00:01:16.240 --> 00:01:21.191
So, basically like I said, you can say,
I want an instrument, this fields,

25
00:01:21.191 --> 00:01:26.580
with this logic and only this field and I
don't wanna have to go in the resolver and

26
00:01:26.580 --> 00:01:29.380
write the code for it, or maybe I have
three different fields that I wanna do it

27
00:01:29.380 --> 00:01:33.000
for and I don't have to write them in
every single resolver, and I could use

28
00:01:33.000 --> 00:01:36.740
the approach that we did today where we
wrap the resolver in another function and

29
00:01:36.740 --> 00:01:39.430
then does something and
then calls the resolver.

30
00:01:39.430 --> 00:01:41.590
You can do that, but then you got
to do that for every resolver.

31
00:01:42.620 --> 00:01:44.710
So there are ways around it, but

32
00:01:44.710 --> 00:01:48.140
directors kind of get rid of that where
you write at once and then you forget,

33
00:01:48.140 --> 00:01:50.443
you don't have to worry about it and
you just declare them in the Schema.

34
00:01:51.560 --> 00:01:54.945
You eliminate the the post processing
on your clients at the Query.

35
00:01:54.945 --> 00:02:00.740
So for client's side directives,
they're useful for eliminating like,

36
00:02:00.740 --> 00:02:04.730
okay, now that I got my Query back there's
still something I have to do to this,

37
00:02:04.730 --> 00:02:08.720
I need to transform this
date to be this format, or

38
00:02:08.720 --> 00:02:13.260
I need to change this field to this or
whatever I like.

39
00:02:13.260 --> 00:02:14.610
Directives can help with that.

40
00:02:14.610 --> 00:02:18.015
So you don't have to do
some post processing, and

41
00:02:18.015 --> 00:02:21.583
you don't have to update
your server to handle it for

42
00:02:21.583 --> 00:02:26.955
you because it's a client specific use
case, so it's kind of the middleman.

43
00:02:28.281 --> 00:02:32.883
And they're very extendable, you can
use directors with other directors,

44
00:02:32.883 --> 00:02:37.198
you can have multiple directors
talking to, in like in line, in order,

45
00:02:37.198 --> 00:02:40.594
doing multiple things, and
like I said, because you can

46
00:02:40.594 --> 00:02:45.178
add them pretty much any node that you
want, they are very very extendable.

47
00:02:45.178 --> 00:02:50.900
And there's libraries, multiple libraries
of directives that you can download and

48
00:02:50.900 --> 00:02:53.048
just add and use them,
so that's pretty cool.

49
00:02:53.048 --> 00:02:57.490
And yeah, extremely be powerful
if you haven't figured that out,

50
00:02:57.490 --> 00:03:00.330
just some pretty crazy stuff.

51
00:03:00.330 --> 00:03:02.900
So now,
I want us to follow along about me,

52
00:03:02.900 --> 00:03:07.880
actually using some of the directives
that are built in on a client's side, and

53
00:03:07.880 --> 00:03:12.050
then some of the directives that are built
in on the Schema cyber walk through,

54
00:03:12.050 --> 00:03:16.010
using some of them and
you can understand how they work.

55
00:03:16.010 --> 00:03:20.340
So, what I'll do is let's just
start on the server side here.

56
00:03:20.340 --> 00:03:22.840
I'll keep going with this.

57
00:03:22.840 --> 00:03:28.030
So, one directive that I know is,
that comes embedded

58
00:03:28.030 --> 00:03:33.920
in graph ql spec is
a directive called Deprecated.

59
00:03:33.920 --> 00:03:39.650
So for instance, if I wanted, if I were
getting ready to remove a field, right?

60
00:03:39.650 --> 00:03:42.820
You might, like friends, if I want to get
rid of this error field here on the user,

61
00:03:42.820 --> 00:03:47.070
I could just do this, [LAUGH] It's
gone now, look at that, it's magic.

62
00:03:47.070 --> 00:03:50.140
But the client's gonna break
but's using that field, right?

63
00:03:50.140 --> 00:03:53.179
It's a client's using that field your all
app's broken now because it's depending on

64
00:03:53.179 --> 00:03:55.080
that field, and
now they gotta change their Queries.

65
00:03:55.080 --> 00:03:57.060
So their Queries also remove that field.

66
00:03:57.060 --> 00:04:00.566
So, they came up with
a directive called deprecate.

67
00:04:04.099 --> 00:04:08.340
That basically is going to instrument
this field inside your tooling.

68
00:04:08.340 --> 00:04:13.870
It's going to show different things on
the request to let anyone know that,

69
00:04:13.870 --> 00:04:15.680
hey, this field is no longer supported.

70
00:04:15.680 --> 00:04:19.600
It's still gonna get a value back
until we decide to remove it,

71
00:04:19.600 --> 00:04:22.820
if we ever remove it, but
it's never gonna get updated again and

72
00:04:22.820 --> 00:04:24.750
it probably doesn't do what
you think it does anymore.

73
00:04:24.750 --> 00:04:29.160
And in fact, you gotta use this field
instead, so that's what this is.

74
00:04:29.160 --> 00:04:31.798
So, this syntax is using an @ sign.

75
00:04:31.798 --> 00:04:35.830
You use the @ sign like that, and then
you put the name of the directive, and

76
00:04:35.830 --> 00:04:41.570
you always put it basically to the right
of the node that you're using.

77
00:04:41.570 --> 00:04:44.600
So in this case,
we're using a directive on a field, so

78
00:04:44.600 --> 00:04:47.140
it's to the right of the field,
you wouldn't put it before the type,

79
00:04:47.140 --> 00:04:50.410
you wouldn't put it here,
you will put it after the type.

80
00:04:50.410 --> 00:04:55.310
If this directive was going to be
on a type, we will put on after

81
00:04:55.310 --> 00:04:59.560
the name of the type, like deprecate,
like that, [INAUDIBLE] Go after the name.

82
00:04:59.560 --> 00:05:02.422
But in this case it's after a field,
so we wanna put it there.

83
00:05:02.422 --> 00:05:09.260
So you do deprecated,
we can start this thing, server starts up,

84
00:05:09.260 --> 00:05:14.160
go to our playground, refresh this thing,
and if I try to get me

85
00:05:14.160 --> 00:05:19.210
right there automatically, the user error
is deprecated, no longer supported.

86
00:05:19.210 --> 00:05:21.620
You can see that error there,
it's a warning.

87
00:05:21.620 --> 00:05:24.300
It's not an error cuz I can still do it.

88
00:05:24.300 --> 00:05:25.910
My resolver is just still there,
and it's still working.

89
00:05:25.910 --> 00:05:29.730
But this is letting you know,
hey, it's errors, deprecated, and

90
00:05:29.730 --> 00:05:34.370
you can see you get this error
here saying, hey, I mean well,

91
00:05:34.370 --> 00:05:36.100
we're throwing errors,
that's why we get this errors.

92
00:05:36.100 --> 00:05:37.690
So that's how you know
it's still resolving,

93
00:05:37.690 --> 00:05:39.730
that field actually throws an error.

94
00:05:39.730 --> 00:05:42.450
It's not erroring because it's deprecated,
that's confusing.

95
00:05:42.450 --> 00:05:45.200
Let me make that distinction.

96
00:05:45.200 --> 00:05:49.116
The errors field Throws an error,

97
00:05:49.116 --> 00:05:52.442
which is why we see that error,
not because it's deprecated.

98
00:05:52.442 --> 00:05:56.540
So, if like, let me get rid of that,
let me do this.

99
00:05:58.270 --> 00:05:59.012
That make more sense.

100
00:06:03.117 --> 00:06:06.761
It's still gonna return the value,
it's not gonna throw an error, but

101
00:06:06.761 --> 00:06:09.080
it's gonna let you know
that is deprecated.

102
00:06:09.080 --> 00:06:12.798
And if you were to look at the docs, you
could also see on a user type, right here,

103
00:06:12.798 --> 00:06:15.740
deprecated, no longer
supported error string.

104
00:06:15.740 --> 00:06:21.130
So, this directive is adding
Metadata to our Schema and

105
00:06:21.130 --> 00:06:23.780
Has support for
something called deprecated fields.

106
00:06:23.780 --> 00:06:27.260
It's hooking into that support, and it's
just instrumenting the scheme of like,

107
00:06:27.260 --> 00:06:30.490
hey, add this to the deprecated filter,
deprecated true.

108
00:06:30.490 --> 00:06:32.420
That's basically what it's doing,
on the Schema level.

109
00:06:32.420 --> 00:06:34.790
So it's instrumenting
it on the Schema level,

110
00:06:34.790 --> 00:06:38.080
so you get that nice little
thing here like that.

111
00:06:39.780 --> 00:06:43.280
Any questions on that syntax for
directives on the Schema level?

112
00:06:43.280 --> 00:06:45.309
&gt;&gt; If you deprecate something,

113
00:06:45.309 --> 00:06:50.510
you still have to keep all of the
resolvers around, why [INAUDIBLE] Correct?

114
00:06:50.510 --> 00:06:56.201
&gt;&gt; If it's in your type def, deprecate or
not, you gotta keep the resolvers for it.

115
00:06:56.201 --> 00:06:58.638
&gt;&gt; Okay, so
that is all that adds Metadata?

116
00:06:58.638 --> 00:07:00.781
&gt;&gt; All it does is it adds Metadata.

117
00:07:00.781 --> 00:07:02.667
What people do is they do it to buy time,
right?

118
00:07:02.667 --> 00:07:05.779
So, I guess it depends on your API,
if your API is public facing,

119
00:07:05.779 --> 00:07:09.741
it's probably to buy time, like, hey
customers, we're gonna migrate from this

120
00:07:09.741 --> 00:07:12.934
field to this field now, and
we're deprecating it for whatever.

121
00:07:12.934 --> 00:07:16.464
And I'm pretty sure it takes
an argument like this, or

122
00:07:16.464 --> 00:07:19.400
I think you can do like a reason,
let's see.

123
00:07:19.400 --> 00:07:23.096
Because I said so, let's see.

124
00:07:25.213 --> 00:07:26.792
Yeah, I guess that is it.

125
00:07:28.755 --> 00:07:33.030
So if you do like that, you can see
the reason right there because I said so.

126
00:07:33.030 --> 00:07:36.380
So, you can, yeah, most people do it
to buy time, like, hey customers,

127
00:07:36.380 --> 00:07:39.210
we're gonna transition from this field in
three months, so it's gonna be deprecated.

128
00:07:39.210 --> 00:07:42.760
You got three months to change,
but it's like an internal thing.

129
00:07:42.760 --> 00:07:46.540
You might deprecate it and
completely remove the resolver for it and

130
00:07:46.540 --> 00:07:50.230
just like, you just should not use it,
so, screw you.

131
00:07:50.230 --> 00:07:53.338
So it really depends on what you're doing,
but our solution's just leave it forever,

132
00:07:53.338 --> 00:07:55.270
they'll just leave it forever and
what they'll do and

133
00:07:55.270 --> 00:07:56.961
their reason they'll say something like,
use

134
00:08:01.726 --> 00:08:06.274
They'll say like,
use the other field that we made, right?

135
00:08:06.274 --> 00:08:09.823
So they usually deprecate a field not
because they're getting rid of it,

136
00:08:09.823 --> 00:08:13.900
it's because they're replacing it with
something else, and that's supported.

137
00:08:13.900 --> 00:08:16.000
That's usually what deprecation is for.

138
00:08:16.000 --> 00:08:17.842
It's like, hey,
it's not that we're getting rid of it,

139
00:08:17.842 --> 00:08:19.920
it's just that we replaced
it with something else.

140
00:08:19.920 --> 00:08:24.678
So, Yeah, and

141
00:08:24.678 --> 00:08:31.340
their arguments on directors follow the
same rules as arguments on other fields.

142
00:08:31.340 --> 00:08:36.829
So, you have to name them,
you have to get them a scholar or an input

