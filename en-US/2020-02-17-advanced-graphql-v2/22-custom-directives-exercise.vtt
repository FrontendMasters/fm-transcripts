WEBVTT

1
00:00:00.100 --> 00:00:02.920
You're going to create a custom
date format directive for

2
00:00:02.920 --> 00:00:06.297
fields that formats timestamps.

3
00:00:06.297 --> 00:00:10.650
Except the arguments,
arguments are extra credits.

4
00:00:10.650 --> 00:00:13.170
Everything I just showed you
about arguments as extra credit,

5
00:00:13.170 --> 00:00:16.205
just at least make a directive that
you can put on anything that's

6
00:00:16.205 --> 00:00:18.470
a created at field, and it'll format it.

7
00:00:18.470 --> 00:00:20.606
And don't worry about the formatting
there's a function that does it for

8
00:00:20.606 --> 00:00:21.230
you automatically.

9
00:00:22.400 --> 00:00:26.070
Create a field level auth directive,
which is also extra credit.

10
00:00:26.070 --> 00:00:28.318
So we already have those
authorization helpers,

11
00:00:28.318 --> 00:00:31.258
see if you can get rid of all that
on your resolvers, and instead,

12
00:00:31.258 --> 00:00:35.070
make a directive that does the same thing,
and just add them on the fields yourself.

13
00:00:37.551 --> 00:00:40.100
And then add your directives
to your Schema, obviously.

14
00:00:40.100 --> 00:00:41.039
Otherwise, it's not gonna work.

15
00:00:42.400 --> 00:00:44.150
So maybe a walk around on that.

16
00:00:44.150 --> 00:00:48.610
If you go to the Utils function,
there's gonna be a format date

17
00:00:48.610 --> 00:00:51.630
that takes in a time stamp,
and then it takes in a format.

18
00:00:51.630 --> 00:00:54.870
It uses a package called date-fns.

19
00:00:54.870 --> 00:00:59.290
But the format is pretty standard
timestamp format, and you could do things

20
00:00:59.290 --> 00:01:04.980
like year, year, year, year, or month,
month, month, month, day, day day.

21
00:01:04.980 --> 00:01:06.230
So you can look at the docs,

22
00:01:06.230 --> 00:01:10.240
but this function takes in a stamp and
takes in a format and returns it.

23
00:01:10.240 --> 00:01:14.130
So use this inside of your directive
to actually format a date.

24
00:01:14.130 --> 00:01:15.440
The other thing you might have to do,

25
00:01:15.440 --> 00:01:18.510
and there's two ways you can do it,
is in your type desk.

26
00:01:18.510 --> 00:01:23.480
Anything that says created at,
you might have to change it to a string

27
00:01:23.480 --> 00:01:27.160
inside of your Schemas here,
if it's not already.

28
00:01:27.160 --> 00:01:29.840
There should be strings already,
but they're not.

29
00:01:29.840 --> 00:01:31.120
Make sure they're all strings.

30
00:01:31.120 --> 00:01:33.810
If not, you can like I said, you can
change them all to strings here, but

31
00:01:33.810 --> 00:01:38.100
you can also change them inside
the directive, which is really cool.

32
00:01:38.100 --> 00:01:39.226
So directives are really powerful.

33
00:01:39.226 --> 00:01:44.206
I showed you some pretty crazy stuff,
but I didn't show you that you can

34
00:01:44.206 --> 00:01:49.369
also do things like field dot type is
now going to be a graphqL string type.

35
00:01:49.369 --> 00:01:52.734
You can completely change the whole type
of a field right here, if you wanted to.

36
00:01:52.734 --> 00:01:54.650
You can do anything you want.

37
00:01:54.650 --> 00:01:57.780
So if you wanted to change
created at to a string,

38
00:01:57.780 --> 00:02:01.218
if they used to be integers as timestamps,
but after you format they became strings,

39
00:02:01.218 --> 00:02:03.710
then you would have to change
it to a string right here.

40
00:02:03.710 --> 00:02:05.870
So you can do all that
types of crazy stuff.

41
00:02:05.870 --> 00:02:07.850
Up to you, how you want to do it.

42
00:02:07.850 --> 00:02:09.430
And then again, the auth stuff,

43
00:02:09.430 --> 00:02:14.180
this is literally the same thing that
we did already for the authorization.

44
00:02:14.180 --> 00:02:17.743
You should be able to do a copy and
paste, minus some setup here.

