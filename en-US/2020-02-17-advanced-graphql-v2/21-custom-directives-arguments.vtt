WEBVTT

1
00:00:00.040 --> 00:00:04.190
If you are to declare multiple instances
of this lock and exist on like

2
00:00:05.760 --> 00:00:13.220
I wanna say type definition is
one maybe,done with all these.

3
00:00:13.220 --> 00:00:16.120
So we say type definition,
then you would have to come in here and

4
00:00:16.120 --> 00:00:19.139
say well, this is what happens
when you visit a field definition.

5
00:00:19.139 --> 00:00:24.820
Well, this is what happens when you
visit a Type visited type definition.

6
00:00:24.820 --> 00:00:26.580
And you will have to make a function for
that.

7
00:00:26.580 --> 00:00:31.270
So for every single entity or every single

8
00:00:31.270 --> 00:00:36.250
node that you can visit on your directive,
you'd have to make a function for it.

9
00:00:36.250 --> 00:00:37.962
So you can do multiple for one directive.

10
00:00:40.503 --> 00:00:43.370
The other thing is, you can take
in arguments on your directives.

11
00:00:43.370 --> 00:00:45.160
Just like the deprecated
on taken arguments,

12
00:00:45.160 --> 00:00:46.440
we can have log taking elements to.

13
00:00:46.440 --> 00:00:51.880
So we can say, okay, log takes in, I don't
know, a message, and its type is a string.

14
00:00:53.268 --> 00:00:54.790
And little known fact about GraphQL,

15
00:00:54.790 --> 00:00:57.310
you can use the equals sign in
arguments to set a default.

16
00:00:58.370 --> 00:01:00.950
Like that, that's a default.

17
00:01:00.950 --> 00:01:04.062
If any input on any argument you
can make a default by setting

18
00:01:04.062 --> 00:01:05.376
an equal sign like that.

19
00:01:05.376 --> 00:01:12.651
It's only a default message and then if I
want to get a reference to that argument,

20
00:01:12.651 --> 00:01:17.220
all I have to do is I say
message equals this.args.

21
00:01:17.220 --> 00:01:18.910
Now your reference to
these arguments here.

22
00:01:20.090 --> 00:01:20.978
So now you have those arguments.

23
00:01:24.956 --> 00:01:26.510
You can do whatever you want with them.

24
00:01:26.510 --> 00:01:29.200
This is really cool because now you
can come out here and say, cool.

25
00:01:29.200 --> 00:01:30.894
I need a message here.

26
00:01:30.894 --> 00:01:35.504
And I want to call it,
ID here or something like that.

27
00:01:37.631 --> 00:01:38.429
Start this,

28
00:01:48.860 --> 00:01:57.117
I didn't even log it because
I should log it, Message,

29
00:01:57.117 --> 00:02:01.770
like that, Run that.

30
00:02:01.770 --> 00:02:02.510
And there you go.

31
00:02:02.510 --> 00:02:04.590
You get your message that
you pass it as an argument.

32
00:02:04.590 --> 00:02:07.120
All right, one last thing I
will show you on the rectus.

33
00:02:07.120 --> 00:02:08.330
And then you're going to make some.

34
00:02:08.330 --> 00:02:12.030
So this is cool because you can add
arguments on your schema level.

35
00:02:12.030 --> 00:02:15.910
But what if you wanted to query to
pass up arguments to the directors?

36
00:02:15.910 --> 00:02:17.370
This is where it gets complicated.

37
00:02:17.370 --> 00:02:21.110
So if you want that to happen, then what
you need to do is you need to modify your

38
00:02:23.240 --> 00:02:31.420
fields RX array in to do a field RX push
and need to push in a new argument here.

39
00:02:31.420 --> 00:02:37.150
And the way that this works is basically
you have to give it a type of and

40
00:02:37.150 --> 00:02:39.790
is the same thing as like
creating arguments down here.

41
00:02:39.790 --> 00:02:44.330
So you have to give it a type,
and you have to give it a name.

42
00:02:44.330 --> 00:02:46.510
And you can push those
arguments up like that.

43
00:02:46.510 --> 00:02:48.430
So if I say I want a new type, and

44
00:02:48.430 --> 00:02:52.090
I want it to be a string, then what
you can do is you can go to GraphQL.

45
00:02:52.090 --> 00:02:54.400
You can get a GraphQL string type.

46
00:02:57.715 --> 00:03:01.660
QL, stream type like that.

47
00:03:01.660 --> 00:03:05.150
They say the type is graph qL string.

48
00:03:05.150 --> 00:03:07.040
You can give it a name and
we can call this one.

49
00:03:07.040 --> 00:03:11.720
I don't know,
message called the same thing like that.

50
00:03:11.720 --> 00:03:14.529
And now you get this message and
there's arguments.

51
00:03:15.840 --> 00:03:21.010
And what you can do is now that argument,
is not going to be available to the client

52
00:03:21.010 --> 00:03:25.700
to pass in an argument for that field,
and it's going to be accessible here.

53
00:03:25.700 --> 00:03:28.720
I need to spread that that's
why that wasn't working.

54
00:03:28.720 --> 00:03:31.510
So the arguments gonna be
available inside of here, but

55
00:03:31.510 --> 00:03:34.240
because I'm using this is a spread,
I got to write them all out.

56
00:03:34.240 --> 00:03:35.960
So this is like the route value.

57
00:03:35.960 --> 00:03:38.530
This would be the arguments here.

58
00:03:38.530 --> 00:03:41.240
In this case,
I only wanna get the message.

59
00:03:41.240 --> 00:03:43.610
So I'll say, give me the message.

60
00:03:45.090 --> 00:03:48.438
And then everything else
is the rest of the stuff.

61
00:03:48.438 --> 00:03:51.270
The rest of the arguments is the context.

62
00:03:51.270 --> 00:03:52.390
Here's the info.

63
00:03:52.390 --> 00:03:53.930
So I'll do that.

64
00:03:53.930 --> 00:03:55.480
I'm going to change this to call now.

65
00:03:55.480 --> 00:03:59.350
I'm not using an array, and
I'm going to past rest,

66
00:04:02.814 --> 00:04:07.334
Or I'm sorry, routes, rest context and

67
00:04:07.334 --> 00:04:11.220
info to my original resolver.

68
00:04:11.220 --> 00:04:14.380
And now you should have access
through this message right here.

69
00:04:14.380 --> 00:04:18.813
You should have access to
whatever the user passed up, and

70
00:04:18.813 --> 00:04:21.805
by default, you can have this method.

71
00:04:21.805 --> 00:04:26.711
So basically you will do like some type
of, check your message is either going to

72
00:04:26.711 --> 00:04:31.398
be whatever they passed up to me, or
it's gonna be whatever I defaulted here

73
00:04:31.398 --> 00:04:34.501
as message which could
be obviously this.args.

74
00:04:34.501 --> 00:04:42.150
So it could be let's say message equals
this.args but now you got two messages.

75
00:04:42.150 --> 00:04:45.980
I'm gonna rename this
one to schema message.

76
00:04:45.980 --> 00:04:46.540
There you go.

77
00:04:46.540 --> 00:04:49.702
So you can log either
the message they sent you or

78
00:04:49.702 --> 00:04:53.507
you can do the schema message
that you supply by default.

79
00:04:58.644 --> 00:05:04.540
All right, so if we tried this,
stop this thing.

80
00:05:04.540 --> 00:05:09.286
All right, and if we go here,
if I refresh this you

81
00:05:09.286 --> 00:05:13.927
can see it tells me I have
a message argument now.

82
00:05:13.927 --> 00:05:17.320
See that I get autocomplete for
a message argument and have that before.

83
00:05:17.320 --> 00:05:18.080
So I can say cool.

84
00:05:18.080 --> 00:05:19.620
Yeah, I want that message argument.

85
00:05:19.620 --> 00:05:21.090
Hello.

86
00:05:21.090 --> 00:05:21.750
Cool.

87
00:05:21.750 --> 00:05:22.540
That looks good.

88
00:05:22.540 --> 00:05:26.910
And if you go back to our output,
it logged the one that I put up.

89
00:05:26.910 --> 00:05:27.590
Hello.

90
00:05:27.590 --> 00:05:31.766
If I change that to, Yoda and

91
00:05:31.766 --> 00:05:36.620
I run that log the one this is Yoda.

92
00:05:36.620 --> 00:05:39.570
If I don't say anything it should
send it should log the default

93
00:05:39.570 --> 00:05:41.730
one that I had on the server,
which I forgot what it was.

94
00:05:41.730 --> 00:05:44.604
But let's see what happens, Id here.

95
00:05:44.604 --> 00:05:48.218
[BLANK AUDIO]

