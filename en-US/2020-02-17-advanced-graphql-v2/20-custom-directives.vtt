WEBVTT

1
00:00:00.470 --> 00:00:03.940
So the next part is we're gonna
talk about creating a directive.

2
00:00:03.940 --> 00:00:09.180
And then you're gonna make one, or two, or
three, or how many, we'll figure it out.

3
00:00:09.180 --> 00:00:12.265
So creating custom directives, they can be
challenging if you're unfamiliar with how

4
00:00:12.265 --> 00:00:15.320
GraphQL works, because you're actually
gonna be interacting with like,

5
00:00:17.090 --> 00:00:21.510
the lowest side or GraphQL like the AST
level, you have to interact with that.

6
00:00:21.510 --> 00:00:26.040
And you have to be very explicit
about the changes that you make.

7
00:00:26.040 --> 00:00:30.030
So it's not as simple as writing
a wrapper around a resolver,

8
00:00:30.030 --> 00:00:35.630
because GraphQL is passing you control
over something that it does automatically.

9
00:00:35.630 --> 00:00:39.460
You have to do all the work that it would
normally have to do, like adding arguments

10
00:00:39.460 --> 00:00:43.310
to an object and providing the actual
types for something, and things like that.

11
00:00:43.310 --> 00:00:48.399
So it can be kind of challenging,
but you can get past it.

12
00:00:48.399 --> 00:00:50.111
Requires a definition in your schema.

13
00:00:50.111 --> 00:00:53.942
So the first thing you have to do is you
have to declare a directive definition in

14
00:00:53.942 --> 00:00:55.870
your schema, we'll talk about that.

15
00:00:55.870 --> 00:00:59.080
And that you have to create logic for
when the directive is use, and

16
00:00:59.080 --> 00:01:00.850
tell you GraphQL server about that.

17
00:01:01.860 --> 00:01:04.488
So, let's follow along and
let's create one.

18
00:01:04.488 --> 00:01:11.511
So I'm gonna create a directive here,
and I'm going to call it.

19
00:01:13.439 --> 00:01:15.999
Let's make a directive that that logs,

20
00:01:15.999 --> 00:01:20.870
that logs resolvers before they resolve,
they gotta be a good example.

21
00:01:20.870 --> 00:01:25.633
So the first thing you wanna do is,
Apollo is gonna provide us with

22
00:01:25.633 --> 00:01:29.705
something super helpful to
allow us to use directives,

23
00:01:29.705 --> 00:01:33.620
and it's gonna be called
SchemaDirectiveVisitor.

24
00:01:34.650 --> 00:01:39.050
If you've never worked on AST language
type things, there's this pattern called

25
00:01:39.050 --> 00:01:43.000
the visitor pattern where when you're
crawling an AST, which is a tree.

26
00:01:43.000 --> 00:01:46.010
Every time you visit a node,
that's a visitor,

27
00:01:46.010 --> 00:01:49.680
you're visiting a specific leaf or
a specific node on the tree.

28
00:01:49.680 --> 00:01:51.630
And you're interested
in what that note is.

29
00:01:51.630 --> 00:01:55.710
So you'd normally like subscribe, so when
you enter a specific note, so notify me

30
00:01:55.710 --> 00:01:59.658
when I enter a node that is of type this,
and then you'll run this callback.

31
00:01:59.658 --> 00:02:01.580
That's what
SchemaDirectiveVisitors saying is,

32
00:02:01.580 --> 00:02:06.070
it's a it's going to be an implementation
that allows us to run a function

33
00:02:06.070 --> 00:02:11.380
whenever the AST is being and
it comes across of directive,

34
00:02:11.380 --> 00:02:14.060
it's like okay, cool,
execute this functionality right now.

35
00:02:14.060 --> 00:02:14.681
So that's what we're doing.

36
00:02:14.681 --> 00:02:18.651
So if you've never done any AST level
stuff, this is the part that I was saying

37
00:02:18.651 --> 00:02:22.562
it could a little intimidating, but
I would say GrapgQL is probably the most

38
00:02:22.562 --> 00:02:27.051
pleasant approach to AST level things, and
some of the other stuff I've worked with.

39
00:02:27.051 --> 00:02:29.160
So, pretty good.

40
00:02:29.160 --> 00:02:33.410
The next thing we need to do is we need to
make, lets go to I type definitions and

41
00:02:33.410 --> 00:02:35.680
then what we'll do is we'll
declare our directive.

42
00:02:35.680 --> 00:02:40.640
So you can say @directive,
like that at the top or

43
00:02:40.640 --> 00:02:46.355
wherever you want to put it, and
we're going to make it log, like that.

44
00:02:46.355 --> 00:02:47.963
Or yeah.

45
00:02:47.963 --> 00:02:51.170
Directive log.

46
00:02:51.170 --> 00:02:55.066
And then you need to take on and
then you need to say like what.

47
00:02:58.567 --> 00:03:02.989
You need to tell GraphQL where
you want to put the directives,

48
00:03:02.989 --> 00:03:08.174
like you need to say I want it on
the field level, I wanted on a type level,

49
00:03:08.174 --> 00:03:11.680
I want it on the query level,
that type of thing.

50
00:03:11.680 --> 00:03:15.680
So you need to declare that, and
then there's like these hard coded

51
00:03:18.620 --> 00:03:20.750
very specific names that you have to have.

52
00:03:20.750 --> 00:03:23.560
So for us,
we are gonna do the FIELD_DEFINITION.

53
00:03:23.560 --> 00:03:26.160
So add directive log on FIELD_DEFINITION.

54
00:03:26.160 --> 00:03:28.724
It doesn't look right.

55
00:03:28.724 --> 00:03:32.913
Directive log, no it's at directive.

56
00:03:35.652 --> 00:03:36.567
That looks right.

57
00:03:38.878 --> 00:03:40.010
We'll find out.

58
00:03:40.010 --> 00:03:41.540
So, we'll declare a directive like that.

59
00:03:41.540 --> 00:03:46.540
And then now we need to do the telegraph
to how to handle that directive.

60
00:03:46.540 --> 00:03:48.720
So we'll say, I'll make a new class.

61
00:03:48.720 --> 00:03:50.205
And we'll call it LogDirective.

62
00:03:52.012 --> 00:03:56.210
Call it whatever you want, it just needs
to extend the schema directive visitor,

63
00:03:56.210 --> 00:03:57.920
which is a class.

64
00:03:57.920 --> 00:04:04.156
And then there's a method called, in our
case, because we're on a field definition.

65
00:04:04.156 --> 00:04:06.042
That's what we're on.

66
00:04:06.042 --> 00:04:09.160
We're gonna say visitFieldDefinition.

67
00:04:09.160 --> 00:04:09.660
Like that.

68
00:04:09.660 --> 00:04:11.255
That's gonna be a method.

69
00:04:11.255 --> 00:04:13.440
Field definition,
gets a couple arguments here.

70
00:04:13.440 --> 00:04:15.260
The first one is gonna be filled.

71
00:04:15.260 --> 00:04:20.510
And I believe the second one is gonna
be the object type that field is on or

72
00:04:20.510 --> 00:04:22.470
like its parent, but
we're not interested in that right now.

73
00:04:24.120 --> 00:04:28.927
And basically what we're going to start
with, let's just log this field record.

74
00:04:31.306 --> 00:04:35.989
On this field, and the next thing we're

75
00:04:35.989 --> 00:04:41.236
gonna do is we'll just say field.resolve.

76
00:04:41.236 --> 00:04:44.910
We'll just allow it to call its
resolver and resolve itself.

77
00:04:44.910 --> 00:04:46.800
So we'll do that.

78
00:04:46.800 --> 00:04:47.759
Got our log directive.

79
00:04:49.030 --> 00:04:50.680
Then we need to tell Apollo about that.

80
00:04:50.680 --> 00:04:51.988
So we can go down to.

81
00:04:54.063 --> 00:04:55.200
The server.

82
00:04:55.200 --> 00:04:58.485
And you can pass a thing in
here called schemaDirectives.

83
00:04:59.720 --> 00:05:02.310
And then it's an object where the key,

84
00:05:02.310 --> 00:05:04.520
it needs to be the same name that
you declared in your typeDefs.

85
00:05:04.520 --> 00:05:07.060
So in our case, the name is log.

86
00:05:07.060 --> 00:05:08.017
So that needs to be the key.

87
00:05:11.726 --> 00:05:15.121
And then a value is the class that you
created, which for us was a LogDirective.

88
00:05:20.188 --> 00:05:21.870
Everybody following me.

89
00:05:21.870 --> 00:05:23.901
So you declared in your typeDefs,

90
00:05:23.901 --> 00:05:27.000
which will figure out that
syntax is right or not.

91
00:05:27.000 --> 00:05:30.370
And then you extend
the SchemaDirectiveVisitor.

92
00:05:30.370 --> 00:05:33.240
You do whatever you gotta do, we'll get
to whatever we're gonna do here soon.

93
00:05:33.240 --> 00:05:34.770
And we'll talk about what happens in here.

94
00:05:34.770 --> 00:05:35.830
This is where it gets complicated.

95
00:05:35.830 --> 00:05:40.950
And then you just add it to
your schemaDirectives field and

96
00:05:40.950 --> 00:05:43.910
your Apolloserver instance with the key
as the name, as the declaration and

97
00:05:43.910 --> 00:05:47.680
your typeDefs, and then the value
as in the class that you created.

98
00:05:47.680 --> 00:05:50.509
So, let's see if that works.

99
00:05:52.710 --> 00:05:54.540
So I'm expected, yeah.

100
00:05:54.540 --> 00:05:58.841
So, I think it's going to
be the other way around.

101
00:06:00.715 --> 00:06:05.460
I think it's directive@log.

102
00:06:05.460 --> 00:06:08.545
&gt;&gt; You're misspelling FIELD_DEFINITION.

103
00:06:08.545 --> 00:06:09.509
&gt;&gt; Am I.

104
00:06:09.509 --> 00:06:11.880
&gt;&gt; I after N.

105
00:06:11.880 --> 00:06:14.860
FIELD_DEFINITION, it's a hard one to see.

106
00:06:14.860 --> 00:06:16.480
Yeah, I couldn't see that.

107
00:06:16.480 --> 00:06:17.406
Okay, well then I guess.

108
00:06:20.380 --> 00:06:21.390
Let's try that.

109
00:06:21.390 --> 00:06:21.890
Let's see.

110
00:06:23.390 --> 00:06:24.680
Try to do it without login.

111
00:06:24.680 --> 00:06:25.680
Yeah, I think that was it.

112
00:06:25.680 --> 00:06:28.625
Cool.
So directive @log on FIELD_DEFINITION,

113
00:06:28.625 --> 00:06:30.860
looks like that executed just fine.

114
00:06:30.860 --> 00:06:35.340
So, let's go to our,
now we actually have to use it.

115
00:06:35.340 --> 00:06:36.530
So we have this log directive.

116
00:06:36.530 --> 00:06:39.980
Let's add it on a added on ID.

117
00:06:39.980 --> 00:06:44.640
So we'll say @log, we can only add it
on fields, cuz we set FIELD_DEFINITION.

118
00:06:44.640 --> 00:06:47.660
So we can't add log anywhere else
other than what we described it on

119
00:06:47.660 --> 00:06:49.010
which is the field.

120
00:06:49.010 --> 00:06:53.315
So add it on ID there,

121
00:06:53.315 --> 00:06:58.000
field.resolver.

122
00:06:58.000 --> 00:07:00.080
Actually let's just log it right quick.

123
00:07:01.180 --> 00:07:02.233
We'll get to that part in a minute.

124
00:07:09.334 --> 00:07:12.202
Cool.
So boom, as soon as the server started up,

125
00:07:12.202 --> 00:07:15.034
you can notice It logged
that field immediately.

126
00:07:15.034 --> 00:07:18.944
As soon as the server startup because that
filled up with the log directive on it,

127
00:07:18.944 --> 00:07:20.381
it went ahead and logged it and

128
00:07:20.381 --> 00:07:23.280
you can see how GraphQL represents
a fields in JavaScript.

129
00:07:23.280 --> 00:07:25.840
So you can see a couple things here.

130
00:07:25.840 --> 00:07:26.756
Things like that.

131
00:07:26.756 --> 00:07:29.239
You can see the resolver I
had a rails on the find, and

132
00:07:29.239 --> 00:07:31.629
we'll talk about why that's
on the find to with.

133
00:07:31.629 --> 00:07:34.880
But yeah, pretty awesome.

134
00:07:34.880 --> 00:07:39.050
So what we're gonna do now is we want to
make a log before the resolver runs, and

135
00:07:39.050 --> 00:07:40.990
then we want to execute the resolver.

136
00:07:40.990 --> 00:07:43.580
The reason the resolve function
is undefined is because,

137
00:07:43.580 --> 00:07:47.630
we don't have a resolver function for
a user ID anywhere.

138
00:07:47.630 --> 00:07:49.272
I mean, where do we have that?

139
00:07:49.272 --> 00:07:51.337
I mean we have user error,
but we have user ID.

140
00:07:51.337 --> 00:07:54.580
So you might say, cool,
I'll just make a resolver for the ID.

141
00:07:54.580 --> 00:07:55.970
It's too much work.

142
00:07:55.970 --> 00:08:00.070
So, how does GraphQL automatically
resolve fields when we don't make them?

143
00:08:01.070 --> 00:08:03.660
They use a default resolver and
we're just gonna use that.

144
00:08:03.660 --> 00:08:09.710
So we'll say const, and we're going to
grab the default resolver from GraphQL.

145
00:08:09.710 --> 00:08:11.410
The package called GraphQL.

146
00:08:11.410 --> 00:08:13.955
There's something in here
called defaultFieldResolver.

147
00:08:15.112 --> 00:08:20.370
A defaultFieldResolver is basically
a function that takes in a value,

148
00:08:20.370 --> 00:08:23.270
and it looks at the keys on it,
and if the keys match the field,

149
00:08:23.270 --> 00:08:24.720
then that's the defaultFieldResolver.

150
00:08:24.720 --> 00:08:27.020
It resolves its based off
the return of the value.

151
00:08:27.020 --> 00:08:28.790
So we're gonna set that to that.

152
00:08:28.790 --> 00:08:31.410
So what we'll do,
the strategy is basically what you do,

153
00:08:32.850 --> 00:08:36.710
is you override because
we don't want to log.

154
00:08:36.710 --> 00:08:40.090
When the server starts up, we wanna log
before there was already gets executed.

155
00:08:40.090 --> 00:08:43.045
So we can't put our log
where we just had it,

156
00:08:43.045 --> 00:08:44.580
cuz it'll just log as soon
as the server boots up.

157
00:08:44.580 --> 00:08:48.150
We want to log every time that
the resolver gets executed.

158
00:08:48.150 --> 00:08:51.410
So what we can do is we need to
override what the resolver function is

159
00:08:51.410 --> 00:08:53.660
to our new resolver, and
then call the old one.

160
00:08:53.660 --> 00:08:55.160
Does that make sense?

161
00:08:56.390 --> 00:08:59.550
So we're basically doing everything we
did in that function and authentication,

162
00:08:59.550 --> 00:09:03.690
where we took in a resolver, we did our
own stuff, and then we call the resolver.

163
00:09:03.690 --> 00:09:04.710
We're just wrapping it.

164
00:09:04.710 --> 00:09:06.503
That's exactly what we're doing now.

165
00:09:06.503 --> 00:09:10.225
We're just wrapping the resolver with our
new resolver, and we're gonna call it.

166
00:09:10.225 --> 00:09:14.007
So first thing you did like say like
old resolver or just call it resolver,

167
00:09:14.007 --> 00:09:15.476
whatever you wanna call it.

168
00:09:15.476 --> 00:09:21.620
That's going to be field.resolve, or
it's gonna be the defaultFieldRresolver.

169
00:09:21.620 --> 00:09:28.204
And then you say field.resolve is gonna
equals this new thing, like this.

170
00:09:30.934 --> 00:09:36.100
Then we can do our
console.log of hi in and

171
00:09:36.100 --> 00:09:38.920
something like that.

172
00:09:38.920 --> 00:09:41.278
For something, some cool, here we go.

173
00:09:44.443 --> 00:09:49.520
And then what we wanna do is we wanna
go ahead and return our resolver.

174
00:09:49.520 --> 00:09:51.490
But we wanna get those args in here.

175
00:09:51.490 --> 00:09:56.920
So we'll say, whatever args the it gets
in here, and we can say resolve.apply.

176
00:09:56.920 --> 00:10:05.350
Keep the same context this with the args.

177
00:10:05.350 --> 00:10:07.000
I guess I should say resolver.

178
00:10:08.350 --> 00:10:08.850
There we go.

179
00:10:10.841 --> 00:10:12.359
Cool.
So we made a resolver,

180
00:10:12.359 --> 00:10:14.767
which is gonna be
the field.resolve function or

181
00:10:14.767 --> 00:10:16.860
the default one that GraphQL has.

182
00:10:16.860 --> 00:10:21.080
We're gonna override the resolve
function on the field to log, and

183
00:10:21.080 --> 00:10:25.240
then we're gonna call the resolver that
we created with the current context and

184
00:10:25.240 --> 00:10:26.440
the args that it was passed.

185
00:10:27.940 --> 00:10:29.791
So now, what we're gonna do is.

186
00:10:32.259 --> 00:10:33.530
Hold up, there we go.

187
00:10:34.570 --> 00:10:38.150
Starts the server,
everything is good there.

188
00:10:38.150 --> 00:10:39.970
Go back to our Playground.

189
00:10:39.970 --> 00:10:41.204
And if we ask for the ID.

190
00:10:43.527 --> 00:10:46.064
Run that.

191
00:10:46.064 --> 00:10:47.769
Given these variables that I click.

192
00:10:50.372 --> 00:10:52.266
There you go, run that.

193
00:10:56.933 --> 00:10:58.037
You can see boom.

194
00:10:58.037 --> 00:10:59.290
Hello.

195
00:10:59.290 --> 00:11:00.310
Pretty crazy, right?

196
00:11:00.310 --> 00:11:04.341
So I mean, if you think about it,
you already did this.

197
00:11:04.341 --> 00:11:09.414
If we go look at what we're doing here,
we're basically getting

198
00:11:09.414 --> 00:11:15.704
access to the old resolver or making a
default one, whichever one happens to be.

199
00:11:15.704 --> 00:11:20.060
And then we're making a completely
new one, doing whatever we want.

200
00:11:20.060 --> 00:11:22.630
And then calling the resolver.

201
00:11:22.630 --> 00:11:28.450
That's literally what we did,
here inside of off, off takes in resolver.

202
00:11:28.450 --> 00:11:30.480
So here, this resolver that comes in.

203
00:11:30.480 --> 00:11:31.260
We do whatever we want.

204
00:11:31.260 --> 00:11:32.885
And then we call that resolver.

205
00:11:32.885 --> 00:11:35.199
It's the exact same thing.

206
00:11:35.199 --> 00:11:39.128
Except for we don't have to
go rap all these resolvers.

207
00:11:39.128 --> 00:11:47.290
The alternative for us is all we have
to do is add a directive, or server.

208
00:11:47.290 --> 00:11:49.531
All we have to do is add
a directive to the field,

209
00:11:49.531 --> 00:11:52.960
so instead of wrapping a resolver,
we just added directly to the field.

