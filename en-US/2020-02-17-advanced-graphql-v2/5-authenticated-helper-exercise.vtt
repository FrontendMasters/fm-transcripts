WEBVTT

1
00:00:00.069 --> 00:00:02.470
You're gonna create
an authenticated helper.

2
00:00:02.470 --> 00:00:04.522
So if you head over to the auth file,

3
00:00:04.522 --> 00:00:08.310
you're gonna see a lot
of stuff happening here.

4
00:00:08.310 --> 00:00:11.402
But the two things that you're gonna
be concerned about is this blank

5
00:00:11.402 --> 00:00:14.620
authenticated function and
this blank authorized function.

6
00:00:14.620 --> 00:00:17.840
So the first task is to create
an authenticated helper.

7
00:00:17.840 --> 00:00:21.208
So what this function does
is it takes in a resolver,

8
00:00:21.208 --> 00:00:24.050
this next thing here
is an actual resolver.

9
00:00:24.050 --> 00:00:26.120
It's gonna take in a resolver
as an argument, and

10
00:00:26.120 --> 00:00:27.622
it's gonna return a new resolver.

11
00:00:27.622 --> 00:00:31.600
But before it returns the new resolver and
actually executes it with these arguments,

12
00:00:31.600 --> 00:00:34.810
it's going to check to see if
a user exists on a context or not.

13
00:00:35.830 --> 00:00:36.600
That's basically it.

14
00:00:36.600 --> 00:00:41.020
So if there is not a user on the context
objects, it's gonna throw an error.

15
00:00:41.020 --> 00:00:42.625
If there is a user in the context object,

16
00:00:42.625 --> 00:00:46.130
it'll just call the next resolver
with the given args that it got.

17
00:00:46.130 --> 00:00:46.825
That's all it does.

18
00:00:48.819 --> 00:00:51.198
From there,
you're gonna create an authorized helper,

19
00:00:51.198 --> 00:00:53.340
which is very similar to
the authenticated helper.

20
00:00:53.340 --> 00:00:56.997
So the authorized helper takes in two
arguments, it's gonna take a role and

21
00:00:56.997 --> 00:00:59.090
it's going to take another resolver.

22
00:00:59.090 --> 00:01:03.350
And its job is to check to see if
the user on the context object.

23
00:01:03.350 --> 00:01:07.999
So it's assuming that the user is already
authenticated if the user on the context

24
00:01:07.999 --> 00:01:11.590
object has a role that is equal
to the one that was passed in.

25
00:01:11.590 --> 00:01:13.730
If it doesn't, it throws an error.

26
00:01:13.730 --> 00:01:17.552
If it does, it just calls the next
resolver with the given arguments.

27
00:01:19.445 --> 00:01:20.964
That's it.

28
00:01:20.964 --> 00:01:23.086
And then I'm gonna show you
how to actually use those.

29
00:01:23.086 --> 00:01:26.851
And then you need to wrap
the resolvers that use the users for

30
00:01:26.851 --> 00:01:31.800
DB quarries with the authenticated
helper and the authorized helper.

31
00:01:31.800 --> 00:01:35.640
So if we go back to our resolvers,
basically what I was saying is if you look

32
00:01:35.640 --> 00:01:42.650
at any resolver in here that's using
a user for any database interaction,

33
00:01:42.650 --> 00:01:46.620
it probably needs to be wrapped
with the authenticated resolver.

34
00:01:46.620 --> 00:01:50.805
So when I say wrap, if you look at
the syntax of these functions here,

35
00:01:50.805 --> 00:01:53.760
they're a function that takes
another function, right?

36
00:01:53.760 --> 00:01:56.890
So the way that you would use them
is you would just wrap a function.

37
00:01:56.890 --> 00:02:01.166
So in this case, if I wanted to say I
need to authorize me, I would come here,

38
00:02:01.166 --> 00:02:04.460
they're already imported up top,
so let's take authenticated.

39
00:02:04.460 --> 00:02:10.365
Now we'll say me, actually it needs to
be wrapped by authenticated first, and

40
00:02:10.365 --> 00:02:15.847
that's gonna take a callback,
like that, and then parentheses there.

41
00:02:15.847 --> 00:02:17.271
So that's how you would wrap it.

42
00:02:17.271 --> 00:02:20.989
So I'm gonna wrap this resolver that
I already have with the authenticated

43
00:02:20.989 --> 00:02:22.195
helper, right?

44
00:02:22.195 --> 00:02:25.666
And then authorized helper is very much
the same, except for, remember, it takes

45
00:02:25.666 --> 00:02:28.952
a first argument here of some role that
you need and then it takes the resolver.

46
00:02:31.832 --> 00:02:33.187
So that's what I mean by wrap.

47
00:02:33.187 --> 00:02:36.593
As far as what you're gonna
use on the authorized one,

48
00:02:36.593 --> 00:02:39.680
there's one down here
that says admin role.

49
00:02:39.680 --> 00:02:42.860
This is the only resolver that
you should have that requires

50
00:02:42.860 --> 00:02:48.240
the authorized helper, and
there needs to be a role of admin.

51
00:02:48.240 --> 00:02:51.740
And the role of admin, if you look at
the type definitions, is an enum, and

52
00:02:51.740 --> 00:02:54.270
it looks like this, all caps ADMIN.

53
00:02:54.270 --> 00:02:56.250
So that's the role that
you need to prevent,

54
00:02:56.250 --> 00:03:01.140
that's a role that you need to check for
inside the invite helper here.

55
00:03:01.140 --> 00:03:03.265
So when you wrap this,
remember two things.

56
00:03:06.251 --> 00:03:10.941
The authorized helper is already expecting
the user to be authenticated, so

57
00:03:10.941 --> 00:03:13.420
you might have to wrap it twice.

58
00:03:13.420 --> 00:03:17.720
You might have to say this resolver
is authenticated and it's authorized.

59
00:03:17.720 --> 00:03:20.080
And remember, these are just functions
that return another function so

60
00:03:20.080 --> 00:03:22.260
you can put one inside of another one and
they should just work.

61
00:03:23.400 --> 00:03:25.010
You just gotta figure out what
order do you wanna do it.

62
00:03:25.010 --> 00:03:26.232
Are you authenticating first?

63
00:03:26.232 --> 00:03:27.323
Are you authorizing first?

64
00:03:27.323 --> 00:03:28.135
Are you authorizing first?

65
00:03:28.135 --> 00:03:29.895
Are you authenticating first?

66
00:03:29.895 --> 00:03:31.111
I think you'll figure it out.

67
00:03:31.111 --> 00:03:36.756
Once you have that, what you can do is,
not there yet, start your server.

68
00:03:36.756 --> 00:03:40.729
So I'm gonna start mine, yarn dev.

69
00:03:40.729 --> 00:03:43.495
Whoa, I already have it started somewhere.

70
00:03:43.495 --> 00:03:46.730
Guess I got it in this tab, yeah,
I already have it in this tab right there.

71
00:03:46.730 --> 00:03:51.322
Let me restart to access to demo one, and

72
00:03:51.322 --> 00:03:55.580
I'll do yarn dev here instead.

73
00:03:55.580 --> 00:04:00.870
Cool, so 4000, Go over to Playground.

74
00:04:02.930 --> 00:04:06.310
And now if I try to access me, because
I think in my example, I went ahead and

75
00:04:06.310 --> 00:04:06.915
wrapped it.

76
00:04:06.915 --> 00:04:08.110
So let me save that.

77
00:04:08.110 --> 00:04:10.870
So I wrapped the me query
as being authenticated.

78
00:04:10.870 --> 00:04:13.810
So if I try to do that, and
right now I'm just gonna

79
00:04:13.810 --> 00:04:18.011
go into the authenticated helper and
I'm just going to throw an error.

80
00:04:26.948 --> 00:04:29.700
And if I try to execute this,
I get that error back.

81
00:04:29.700 --> 00:04:33.692
Nope, because the authentication
helper said, I couldn't do it, right?

82
00:04:33.692 --> 00:04:38.321
In the case where you were authenticated,
and everything just worked, and

83
00:04:38.321 --> 00:04:47.804
I called next with all these args,
And I asked for me.

84
00:04:47.804 --> 00:04:50.087
It didn't error on authentication, but

85
00:04:50.087 --> 00:04:54.329
it's still broke because technically
the context function didn't provide

86
00:04:54.329 --> 00:04:57.695
a user because I didn't authorize
it in the context object.

87
00:04:57.695 --> 00:05:02.530
Cuz I didn't give in a JWT, so
it doesn't know what user you want.

88
00:05:02.530 --> 00:05:05.420
So although it didn't break
on the resolver level,

89
00:05:05.420 --> 00:05:08.090
as far as you're not authorized,

90
00:05:08.090 --> 00:05:13.360
it doesn't know what a user is because I
didn't set up a JWT in the context object.

91
00:05:16.090 --> 00:05:20.189
Here it's looking for a JWT to figure
out who the user is, so this is null.

92
00:05:20.189 --> 00:05:24.129
And then when I went to the resolver,
it's returning user, which is null, so

93
00:05:24.129 --> 00:05:25.600
it's just returning null.

94
00:05:25.600 --> 00:05:31.160
So that's why this broke, cuz it's saying
cannot return a non-nullable field me.

95
00:05:31.160 --> 00:05:33.840
But it is null because I
didn't set up as a JWT.

96
00:05:33.840 --> 00:05:35.770
So that's what I was saying.

97
00:05:35.770 --> 00:05:39.790
You get to the flexibility of locking
down a resolver when you want to,

98
00:05:39.790 --> 00:05:40.607
even though the user's null.

99
00:05:41.780 --> 00:05:44.560
So you can do that, test out your
stuff that you authenticated.

100
00:05:45.710 --> 00:05:49.000
When you want to authenticate,
there is a sign up method.

101
00:05:49.000 --> 00:05:56.110
So you have to use a mutation here,
like Signup, and you can say signup.

102
00:05:57.590 --> 00:06:02.050
And you wanna get a token, and maybe get
the user and get an ID if you want here.

103
00:06:03.280 --> 00:06:08.253
And we'll make a variable called auth,

104
00:06:08.253 --> 00:06:14.403
which is gonna be a signupInput type,
like that.

105
00:06:14.403 --> 00:06:16.505
And nope, nope, failure.

106
00:06:16.505 --> 00:06:21.957
Go to Query Variables here, Make

107
00:06:21.957 --> 00:06:28.054
a object here called auth,
Or let me add this here.

108
00:06:28.054 --> 00:06:32.927
I think this takes a input,
we'll call that auth, there we go.

109
00:06:36.677 --> 00:06:40.436
And I think it takes email, and

110
00:06:40.436 --> 00:06:45.209
we're gonna say master@code.com,

111
00:06:45.209 --> 00:06:48.253
and it takes a password.

112
00:06:53.391 --> 00:06:55.793
So you can sign up like that.

113
00:06:55.793 --> 00:06:57.541
What is this saying?

114
00:06:57.541 --> 00:06:58.302
And these are role too.

115
00:06:58.302 --> 00:07:01.345
Yeah, you can sign up with your own role,
how cool is that?

116
00:07:03.920 --> 00:07:06.040
Make it a admin, I'm an admin.

117
00:07:06.040 --> 00:07:08.030
You hit that, and
the you'll get back this response here,

118
00:07:08.030 --> 00:07:12.870
which will give you an adjacent web token
and a user ID or whatever you want.

119
00:07:12.870 --> 00:07:16.592
So if you wanna issue authorize request
once you've set up your resolvers,

120
00:07:16.592 --> 00:07:18.232
you can copy this JSON web token.

121
00:07:18.232 --> 00:07:23.183
And you could just add it on your
HTTP headers as authorization,

122
00:07:23.183 --> 00:07:25.667
like this, so Authorization.

123
00:07:29.992 --> 00:07:31.544
Actually, I'll go back
here to the me query.

124
00:07:31.544 --> 00:07:40.402
So if I add that back to the me query
as Authorization, You just paste it in.

125
00:07:40.402 --> 00:07:45.690
And I were to issue this
authorization when you,

126
00:07:45.690 --> 00:07:51.577
sorry, that was query,
it wasn't headers, there we go.

127
00:07:55.741 --> 00:07:59.182
Auth, my god, my keyboard.

128
00:08:02.151 --> 00:08:03.967
There we go, Authorization.

129
00:08:03.967 --> 00:08:07.525
So when you set your stuff up,
you should see your user come back,

130
00:08:07.525 --> 00:08:09.605
if you were to authorize with the JWT.

131
00:08:13.142 --> 00:08:15.940
Cool, so
just to recap what you're gonna be doing.

132
00:08:15.940 --> 00:08:20.613
You're just going to create
these two helper methods.

133
00:08:20.613 --> 00:08:24.189
And then you're going to wrap
the resolvers that are using any

134
00:08:24.189 --> 00:08:27.620
users in the database queries
with those helper methods.

135
00:08:27.620 --> 00:08:32.480
And then the one helper method that needs
authorization is the one that's called

136
00:08:32.480 --> 00:08:35.450
invite that has an admin role, so
you need to wrap that as well.

137
00:08:35.450 --> 00:08:37.400
That also needs to be
wrapped in authentication.

138
00:08:37.400 --> 00:08:39.050
And you can just check them
out in GraphQL Playground.

