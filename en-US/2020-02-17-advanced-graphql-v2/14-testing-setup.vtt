WEBVTT

1
00:00:00.290 --> 00:00:03.405
If you're in the repo,
you'll probably see a test folder.

2
00:00:03.405 --> 00:00:05.250
There's some snapshot stuff in there.

3
00:00:05.250 --> 00:00:06.573
And we'll talk about that in a little bit.

4
00:00:06.573 --> 00:00:08.400
But there's a file in
here called helper js.

5
00:00:08.400 --> 00:00:10.041
I wanna walk you through
this file right quick,

6
00:00:10.041 --> 00:00:11.734
cuz it's doing some
pretty interesting stuff.

7
00:00:11.734 --> 00:00:13.871
And I want you to understand
what's happening here,

8
00:00:13.871 --> 00:00:15.636
cuz we're gonna use it
to write some tests.

9
00:00:15.636 --> 00:00:19.384
So this file tests helpers js,
a couple things that are happening,

10
00:00:19.384 --> 00:00:23.808
is basically creating a, there's
a function here called createTestServer.

11
00:00:23.808 --> 00:00:25.967
And it takes in a context object.

12
00:00:25.967 --> 00:00:30.880
And what it's doing is it's creating
a completely new Apollo server based off

13
00:00:30.880 --> 00:00:34.020
our type definitions,
based off our resolvers.

14
00:00:34.020 --> 00:00:36.952
But you'll see these two new properties
that you've probably never seen before.

15
00:00:36.952 --> 00:00:39.802
This first one here that
says mockEntireSchema, so

16
00:00:39.802 --> 00:00:41.170
I have this set to false.

17
00:00:41.170 --> 00:00:45.355
And this basically is a property that
coexists with this one below it, mocks.

18
00:00:45.355 --> 00:00:46.766
So let's talk about mocks first.

19
00:00:46.766 --> 00:00:50.136
mocks basically means, and
this is where a graph feels legit.

20
00:00:50.136 --> 00:00:55.530
Because all your type defs are typed,
as in they have a type.

21
00:00:55.530 --> 00:00:57.688
It's really easy to generate mocks for
them now, right?

22
00:00:57.688 --> 00:00:59.180
If I know a field is a string,

23
00:00:59.180 --> 00:01:02.866
then I can just use any generator that
I want to return a random string.

24
00:01:02.866 --> 00:01:06.417
If I know a field is an integer, I can use
any generator I want to return an integer.

25
00:01:06.417 --> 00:01:09.557
If you put mocks true on a server,
that's exactly what it's gonna do.

26
00:01:09.557 --> 00:01:13.720
It's gonna ignore your resolvers, and
it's gonna mock them out with random data.

27
00:01:13.720 --> 00:01:17.412
And they're always gonna fit
the type that you put in the schema.

28
00:01:17.412 --> 00:01:21.071
They might be weird things that don't
make sense, but the data is valid, and

29
00:01:21.071 --> 00:01:22.099
it fits your schema.

30
00:01:22.099 --> 00:01:25.505
So that's the sweet thing about GraphQL,
is that you can just turn on mocks and

31
00:01:25.505 --> 00:01:26.807
never have the right server.

32
00:01:26.807 --> 00:01:29.329
This is a good feature if
you're on a front end team, and

33
00:01:29.329 --> 00:01:31.600
the backend team is still
writing the resolvers.

34
00:01:31.600 --> 00:01:32.399
And they're still doing all this stuff.

35
00:01:32.399 --> 00:01:34.507
You can just turn mock true on the server.

36
00:01:34.507 --> 00:01:37.597
And you can build your whole front end app
without any of the resolvers being done.

37
00:01:37.597 --> 00:01:40.624
And then when they turn the resolvers on,
you still have to change your code,

38
00:01:40.624 --> 00:01:41.659
nothing changes for you.

39
00:01:41.659 --> 00:01:43.818
So you're good to go.

40
00:01:43.818 --> 00:01:45.071
We're gonna use them in the test.

41
00:01:45.071 --> 00:01:49.862
So by default, we get all the resolvers
mocked out for us for free.

42
00:01:49.862 --> 00:01:53.806
And in this field up here, mock entire
schema false, this is basically saying,

43
00:01:53.806 --> 00:01:58.046
hey, don't mock all the resolvers because
I'm still gonna give you some resolvers.

44
00:01:58.046 --> 00:02:01.774
Only mock the the resolvers
that I don't use.

45
00:02:01.774 --> 00:02:06.758
That's basically saying with this option
in combination, it's gonna allow us inside

46
00:02:06.758 --> 00:02:11.537
of our test to mock out specific resolvers
that we're testing in that instance, and

47
00:02:11.537 --> 00:02:14.727
still have the other ones be
automatically mocked out.

48
00:02:14.727 --> 00:02:18.454
So it's given us the control over to opt
into whatever resolvers we want to control

49
00:02:18.454 --> 00:02:19.814
for this specific test case.

50
00:02:19.814 --> 00:02:22.659
And then later saying, actually,
this one, I don't really care.

51
00:02:22.659 --> 00:02:25.539
Cuz sometimes inside of a resolver, where
you're testing it, you might wanna say,

52
00:02:25.539 --> 00:02:27.741
well, I wanna see what happens if
the database returns an error.

53
00:02:27.741 --> 00:02:29.595
Or I wanna see what happens
if you're not authorized.

54
00:02:29.595 --> 00:02:32.495
So you want a different test cases,
so you need more control over it.

55
00:02:32.495 --> 00:02:36.998
So that's why we have this option to
be able to opt in opt out of having

56
00:02:36.998 --> 00:02:39.853
an automatic mocking on a resolver level.

57
00:02:39.853 --> 00:02:41.016
And then, obviously,

58
00:02:41.016 --> 00:02:45.099
we have this context function that just
returns whatever context that you pass it.

59
00:02:45.099 --> 00:02:49.796
And that's it, and then we use this really
nifty createTestClient function from

60
00:02:49.796 --> 00:02:52.940
ApolloServer testing that
does exactly what it says.

61
00:02:52.940 --> 00:02:55.923
It takes a server, and
it creates a test client.

62
00:02:55.923 --> 00:02:59.804
This is gonna return an object with
a query method and a mutation method.

63
00:02:59.804 --> 00:03:03.031
Just like you would use in GraphQL
playground, you use a query or mutation.

64
00:03:03.031 --> 00:03:04.361
That's what's gonna return.

65
00:03:04.361 --> 00:03:05.916
We can use query in our tests.

66
00:03:05.916 --> 00:03:08.329
We can use mutation in our tests and
issue a query and

67
00:03:08.329 --> 00:03:10.586
a mutation against
the server that we created.

68
00:03:10.586 --> 00:03:12.719
Now we can get a result.

69
00:03:12.719 --> 00:03:16.772
So for instance, if we go to the query
test, you'll see an example of that.

70
00:03:16.772 --> 00:03:20.024
So you can see here I'm
requiring my query test server.

71
00:03:20.024 --> 00:03:23.999
I'm making a query for
a feed that has all these items on it.

72
00:03:23.999 --> 00:03:27.988
So just like you would on the client,
I'm making a query, and

73
00:03:27.988 --> 00:03:29.619
I create my test server.

74
00:03:29.619 --> 00:03:31.151
And this is where you can mock things out.

75
00:03:31.151 --> 00:03:33.856
So the name of the test server
takes a context object.

76
00:03:33.856 --> 00:03:37.732
So I know some of our stuff in our
server requires authentication and

77
00:03:37.732 --> 00:03:38.753
requires a user.

78
00:03:38.753 --> 00:03:41.706
So I'll mock the user out on the context
object and put a user there.

79
00:03:41.706 --> 00:03:45.287
I know that most of our resolvers
have this models object.

80
00:03:45.287 --> 00:03:46.337
So I mocked that out.

81
00:03:46.337 --> 00:03:47.414
I say models.

82
00:03:47.414 --> 00:03:50.871
I know that the feed resolver is only
interested in models that I post.

83
00:03:50.871 --> 00:03:52.220
So I put that there.

84
00:03:52.220 --> 00:03:55.175
And I know it's using the findmany
method cuz I looked at the code.

85
00:03:55.175 --> 00:03:57.115
And I'll just mock that out with jest.

86
00:03:57.115 --> 00:04:00.029
So if you've never use jest before,
don't worry,

87
00:04:00.029 --> 00:04:02.223
you literally don't have to use this.

88
00:04:02.223 --> 00:04:04.373
You can use a regular function here.

89
00:04:04.373 --> 00:04:06.874
This is only appropriate
if you wanna spy on it and

90
00:04:06.874 --> 00:04:10.237
figure out how many times it was called,
what it was called with.

91
00:04:10.237 --> 00:04:13.449
But if you're not interested in that,
which actually, in this case, we're not,

92
00:04:13.449 --> 00:04:15.139
you could just put regular function error.

93
00:04:15.139 --> 00:04:17.140
It doesn't matter,
as long as it returns something.

94
00:04:17.140 --> 00:04:17.956
And this is what I was saying.

95
00:04:17.956 --> 00:04:21.528
Sometimes you wanna be able to override
the resolvers yourself with their value.

96
00:04:21.528 --> 00:04:24.216
So you would say,
don't mock the entire schema,

97
00:04:24.216 --> 00:04:26.525
because I still wanna do things like this.

98
00:04:26.525 --> 00:04:30.474
If you didn't have that Boolean for
not mocking the entire schema,

99
00:04:30.474 --> 00:04:32.421
this resolver will get ignored.

100
00:04:32.421 --> 00:04:36.247
And GraphQL would mock it out
completely different every single time,

101
00:04:36.247 --> 00:04:37.658
which is not predictive.

102
00:04:37.658 --> 00:04:41.156
Cuz every time you start the server,
it's gonna generate new mocks for it.

103
00:04:41.156 --> 00:04:42.837
Those mocks get generated.

104
00:04:42.837 --> 00:04:44.079
So they're not predictive.

105
00:04:44.079 --> 00:04:45.957
So you can't really write
tests against them.

106
00:04:45.957 --> 00:04:47.402
So you wanna do this.

107
00:04:47.402 --> 00:04:49.941
And here is something that's really cool.

108
00:04:49.941 --> 00:04:53.428
If you think about it,
we're gonna get back a JSON object.

109
00:04:53.428 --> 00:04:55.413
And it's always gonna look
the same no matter what.

110
00:04:55.413 --> 00:04:58.268
So we can do what's
called snapshot testing.

111
00:04:58.268 --> 00:05:00.852
Anybody ever heard of snapshot testing,
right?

112
00:05:00.852 --> 00:05:02.234
It's mostly for UI, right?

113
00:05:02.234 --> 00:05:03.129
So you would, for

114
00:05:03.129 --> 00:05:07.078
React, you might do snapshot testing
where you wanna render this component.

115
00:05:07.078 --> 00:05:10.383
Get the HTML output of it,
whatever the output of it is, and

116
00:05:10.383 --> 00:05:12.052
you save the output to a file.

117
00:05:12.052 --> 00:05:15.497
And then next time when you run the test,
you get the output of that you compare

118
00:05:15.497 --> 00:05:18.425
the two, they're not exactly the same,
that snapshot failed.

119
00:05:18.425 --> 00:05:20.187
So that's basically what we're doing here,

120
00:05:20.187 --> 00:05:21.957
just as automatic snapshot
testing built in.

121
00:05:21.957 --> 00:05:23.171
We don't have to do anything.

122
00:05:23.171 --> 00:05:25.610
All you have to do is just
say to match snapshot.

123
00:05:25.610 --> 00:05:30.565
And basically what's gonna happen is if
you look in this folder called snapshots,

124
00:05:30.565 --> 00:05:32.847
this will be an example of a snapshot.

125
00:05:32.847 --> 00:05:38.062
So I ran this test before, and
the response I got back was exactly this.

126
00:05:38.062 --> 00:05:40.633
So if I run the test again
with the exact same values,

127
00:05:40.633 --> 00:05:44.088
I should get back exactly the same
thing with exactly the same format.

128
00:05:44.088 --> 00:05:45.568
So it should just match.

129
00:05:45.568 --> 00:05:47.801
And that's what snapshot testing is.

130
00:05:47.801 --> 00:05:53.671
Sometimes you actually did make a change,
and you do wanna update the snapshot.

131
00:05:53.671 --> 00:05:55.955
So then, jest has a function that says,
okay, actually,

132
00:05:55.955 --> 00:05:58.390
I did wanna make this change,
the format should have changed.

133
00:05:58.390 --> 00:05:59.705
So update all the snapshots.

134
00:05:59.705 --> 00:06:01.729
And it will go in and
clear out all the old ones and

135
00:06:01.729 --> 00:06:03.105
make new ones as new baselines.

136
00:06:03.105 --> 00:06:06.242
And now your new snapshots
will be updated.

137
00:06:06.242 --> 00:06:09.284
So that's one way, and that's pretty
much what we're gonna do here.

138
00:06:09.284 --> 00:06:11.288
But you can also do the other ways,
I mean,

139
00:06:11.288 --> 00:06:13.643
you can just get the data
back from this response.

140
00:06:13.643 --> 00:06:21.116
And this is like I expect
res.data.id to be one.

141
00:06:21.116 --> 00:06:26.239
I expect res.data.feed.message to be
whatever message that I put in here,

142
00:06:26.239 --> 00:06:27.335
you can do that.

143
00:06:27.335 --> 00:06:28.623
But I mean, at the end of the day,

144
00:06:28.623 --> 00:06:31.258
you're checking all the properties
you got [INAUDIBLE] a snapshot.

145
00:06:31.258 --> 00:06:32.916
So it's automatic.

146
00:06:32.916 --> 00:06:35.680
Okay, now to execute it,
I'm just gonna do yarn test.

147
00:06:41.850 --> 00:06:43.330
So once the test run,

148
00:06:43.330 --> 00:06:47.785
you can see it passed because my
snapshots are exactly the same.

149
00:06:47.785 --> 00:06:53.360
If I changed one of these two, that's
gonna completely change the snapshot,

150
00:06:53.360 --> 00:06:55.989
and it's probably not gonna match.

151
00:06:58.096 --> 00:07:00.722
Well, it failed and
you can see it shows you the difference.

152
00:07:00.722 --> 00:07:04.587
We got one in the snapshot that saves on
the file, but the new one generated too,

153
00:07:04.587 --> 00:07:05.524
so that's wrong.

154
00:07:05.524 --> 00:07:07.437
So now you know your stuff's not right.

155
00:07:07.437 --> 00:07:08.624
So you can fix your test.

156
00:07:08.624 --> 00:07:11.642
Unless you mean to make that change, and
you will just update all your snapshots.

