WEBVTT

1
00:00:00.210 --> 00:00:03.330
So subscriptions must be added to your
schema, like queries and mutations.

2
00:00:03.330 --> 00:00:05.770
Like I said, they are sibling types.

3
00:00:05.770 --> 00:00:07.930
So you would make a type for
subscriptions,

4
00:00:07.930 --> 00:00:10.910
which is a name that
graphQL is looking for.

5
00:00:10.910 --> 00:00:13.950
Do not rename that as something else
until graphQL bought it just call it

6
00:00:13.950 --> 00:00:14.580
subscriptions.

7
00:00:16.080 --> 00:00:19.680
You need to set up a pub
sub protocol server side.

8
00:00:19.680 --> 00:00:22.760
So Pub Sub, if you're not familiar
with that publish subscribe.

9
00:00:22.760 --> 00:00:26.970
Basically a protocol where you can
like publish to like a channel.

10
00:00:26.970 --> 00:00:29.440
And you can subscribe to
that channel to receive

11
00:00:29.440 --> 00:00:31.470
whatever you're publishing usually events.

12
00:00:31.470 --> 00:00:35.450
So people use like, things like Redis for
this or in our example,

13
00:00:35.450 --> 00:00:37.280
probably something like in memory.

14
00:00:37.280 --> 00:00:39.930
But it's just a place where
you can publish events and

15
00:00:39.930 --> 00:00:41.740
eventually subscribe to those events.

16
00:00:41.740 --> 00:00:44.500
So you had a separate protocol for
that server side.

17
00:00:44.500 --> 00:00:48.300
Whatever implementation is,
and then you have to create

18
00:00:48.300 --> 00:00:52.500
the subscription event resolvers you
have to create resolvers, just so

19
00:00:52.500 --> 00:00:54.540
subscription is a type type definition.

20
00:00:54.540 --> 00:00:56.660
And it has to feel just like
a mutation and queries do.

21
00:00:56.660 --> 00:00:58.060
You have to make resolvers for

22
00:00:58.060 --> 00:01:02.600
those fields, those fields needs to
know what events are they listening for.

23
00:01:02.600 --> 00:01:06.561
So you have to make those resolvers for
every single field on a subscription that

24
00:01:06.561 --> 00:01:09.115
you create otherwise it
wouldn't know what to do.

25
00:01:11.524 --> 00:01:15.070
And then you need to add any
needed authentication in context.

26
00:01:15.070 --> 00:01:18.410
So authenticating what subscriptions
is gonna be completely different

27
00:01:18.410 --> 00:01:21.580
than authenticating
with non subscriptions.

28
00:01:21.580 --> 00:01:24.160
So we need to address that and
handle that.

29
00:01:24.160 --> 00:01:26.260
And make sure that you're good to go.

30
00:01:26.260 --> 00:01:30.030
Otherwise people can just, I don't know,
subscribe to your graphical API and

31
00:01:30.030 --> 00:01:31.930
not be authenticated, authorized.

32
00:01:31.930 --> 00:01:34.250
So if you have authentication
authorization,

33
00:01:34.250 --> 00:01:37.780
you got to make sure
you set that stuff up.

34
00:01:37.780 --> 00:01:40.130
And then, of course,
there's a client site setup.

35
00:01:40.130 --> 00:01:46.580
So if you have a react App, Review app,
you can now you have to add some stuff.

36
00:01:46.580 --> 00:01:51.020
So what Apollo client there's, you have to
add a transport protocol usually like web

37
00:01:51.020 --> 00:01:55.640
sockets or it could be pulling up whatever
you want, but you have to set it up there.

38
00:01:55.640 --> 00:01:59.560
And then usually an application if
you're subscribing to something,

39
00:01:59.560 --> 00:02:04.560
you probably kick off that subscription
early on an application, like maybe in

40
00:02:04.560 --> 00:02:07.990
a layout file somewhere that's always
active and it's always watching.

41
00:02:07.990 --> 00:02:11.190
So when you change routes,
that subscription is still watching and

42
00:02:11.190 --> 00:02:12.920
maintaining the state.

43
00:02:12.920 --> 00:02:15.020
You kick that off before
anything else happens.

44
00:02:15.020 --> 00:02:16.640
It really depends on your use case.

45
00:02:16.640 --> 00:02:19.360
So you want to make sure you set all
that up to actually take advantage of

46
00:02:19.360 --> 00:02:19.920
subscriptions.

47
00:02:19.920 --> 00:02:22.910
Otherwise, why do you have subscriptions?

48
00:02:22.910 --> 00:02:25.330
So this is all you need
to set up subscriptions.

49
00:02:25.330 --> 00:02:27.626
And now I'm going to walk
through how to do it.

50
00:02:27.626 --> 00:02:31.370
So you can follow along.

51
00:02:31.370 --> 00:02:35.260
But if not, don't worry, you're going to
be making it on your own right after this.

52
00:02:35.260 --> 00:02:40.190
So first thing is, according to this is we
need to add subscriptions to our schema

53
00:02:40.190 --> 00:02:41.880
like crazy mutations.

54
00:02:41.880 --> 00:02:45.960
So I'm going to go down here to our type
definitions and my demo file that I have.

55
00:02:45.960 --> 00:02:47.213
And I'm at a subscription type.

56
00:02:49.007 --> 00:02:53.752
And for this example, we don't really
have anything that's meaningful for

57
00:02:53.752 --> 00:02:54.780
subscription.

58
00:02:54.780 --> 00:02:59.180
So I'll make a new type,
and I'll call it item.

59
00:02:59.180 --> 00:03:04.095
An item just has a task
which is a string Like that.

60
00:03:08.132 --> 00:03:11.568
And then what we can do
is we can say we want to

61
00:03:11.568 --> 00:03:16.260
subscribe to whenever a new type is or
new item is created.

62
00:03:16.260 --> 00:03:17.440
So we can say new item.

63
00:03:17.440 --> 00:03:19.360
We can call this Phil whatever we want,

64
00:03:19.360 --> 00:03:22.710
because it's follows the same rules as
any other field than any other type.

65
00:03:22.710 --> 00:03:26.120
And then it's going to return and
item type like that.

66
00:03:27.180 --> 00:03:28.640
And then I just need to make a mutation.

67
00:03:28.640 --> 00:03:30.600
So when we actually create a type,

68
00:03:30.600 --> 00:03:34.630
we can actually create a type
which will cause a subscription.

69
00:03:34.630 --> 00:03:41.749
So I'll just say, create item that
takes in a task which is a string.

70
00:03:45.085 --> 00:03:46.750
Like that, that's required.

71
00:03:46.750 --> 00:03:50.570
And it's just going to return an item,
cool.

72
00:03:50.570 --> 00:03:53.760
So the next thing we need to do is,
set up pub up protocols.

73
00:03:54.800 --> 00:03:56.090
Luckily for us, we get that for

74
00:03:56.090 --> 00:03:58.890
free with Apollo server,
with this pub sub constructor here.

75
00:04:00.070 --> 00:04:04.780
And a pub sub implementation is
basically a publish subscribe.

76
00:04:04.780 --> 00:04:08.600
Protocol, the pups of thing that they have
here is following an interface that you

77
00:04:08.600 --> 00:04:11.360
can override and
extend with your own capabilities.

78
00:04:11.360 --> 00:04:13.660
If you want to use Redis or
any other pops up invitation,

79
00:04:13.660 --> 00:04:15.660
you can do it or
we're going to use theirs for free.

80
00:04:15.660 --> 00:04:18.000
So we'll make a new instance of that and
we'll call it plug.

81
00:04:19.150 --> 00:04:22.450
So equals a new pops up.

82
00:04:22.450 --> 00:04:26.260
And then from there, what we need to do is
we need to create subscription events and

83
00:04:26.260 --> 00:04:27.020
the resolvers.

84
00:04:27.020 --> 00:04:32.480
So, for our subscription newItem field
we need to make a resolver for it.

85
00:04:32.480 --> 00:04:36.530
And the way we can do that, is if we
go down to our resolvers objects and

86
00:04:36.530 --> 00:04:44.170
sibling of mutation and query, will make
one for subscription and for the newItem.

87
00:04:44.170 --> 00:04:48.250
Unlike all the other resolvers
that you we would right where

88
00:04:48.250 --> 00:04:50.420
the resolver is a function
that returns something, for

89
00:04:50.420 --> 00:04:53.150
subscriptions because there's
going to be other options here.

90
00:04:53.150 --> 00:04:56.550
Yeah, they haven't objects,
in the resolver that you want to write,

91
00:04:56.550 --> 00:04:59.060
it's going to be for
subscribing to something.

92
00:04:59.060 --> 00:05:05.450
So we need to tell the new items
subscription, what we're subscribing to.

93
00:05:05.450 --> 00:05:06.280
So in this case,

94
00:05:06.280 --> 00:05:10.540
we're gonna return a functional
unsubscribe method on the new item field.

95
00:05:10.540 --> 00:05:13.447
And we're gonna use that pub sub,and
we are going do something called

96
00:05:13.447 --> 00:05:14.290
an a sync iterator.

97
00:05:16.260 --> 00:05:21.340
What a key words and
async iterator is in JavaScript basically,

98
00:05:21.340 --> 00:05:23.960
an iterator that allows you
to iterate asynchronously.

99
00:05:23.960 --> 00:05:24.700
So you can wait for

100
00:05:24.700 --> 00:05:27.200
one thing to process asynchronously
before you go to the next one.

101
00:05:27.200 --> 00:05:31.790
And this takes either an array of
interested triggers that you're

102
00:05:31.790 --> 00:05:35.450
interested in or just one and it triggers
basically you get together as an event.

103
00:05:35.450 --> 00:05:39.940
So what we'll do is we'll make an event
on top here and I'm gonna call this event

104
00:05:39.940 --> 00:05:45.600
a new item event like this,
but the same name.

105
00:05:45.600 --> 00:05:50.280
So we got a new item and basically,
what I'm saying is the new item

106
00:05:50.280 --> 00:05:54.990
subscription is subscribing to any
event by the name of new item.

107
00:05:57.080 --> 00:06:01.990
So we got that part, and
the next part we need to do

108
00:06:01.990 --> 00:06:06.500
is add the actual trigger
when a new item is created.

109
00:06:06.500 --> 00:06:11.512
So we need to go to our mutations,
and create a mutations for

110
00:06:11.512 --> 00:06:16.147
when we create an item so
create an item mutation here.

111
00:06:16.147 --> 00:06:19.710
Do that, there's no route arc here.

112
00:06:19.710 --> 00:06:25.530
I know it takes in arguments of a task,
which will be a string, so I'll get that.

113
00:06:25.530 --> 00:06:30.910
And then what I can do is I can just say,
right now

114
00:06:30.910 --> 00:06:35.860
I'm just going to return an object that
represents an item that has a task on it.

115
00:06:36.870 --> 00:06:37.710
And but before I do that,

116
00:06:37.710 --> 00:06:41.970
what I want to do is I want to publish to
our subscription using the same event.

117
00:06:41.970 --> 00:06:47.290
So I can say pops up that publish.

118
00:06:47.290 --> 00:06:50.610
That's going to take a trigger,
in this case, the new items.

119
00:06:50.610 --> 00:06:52.190
That's what subscribing to.

120
00:06:52.190 --> 00:06:57.130
And because subscriptions are only
interested and sending and

121
00:06:57.130 --> 00:06:58.480
notifying about events.

122
00:06:58.480 --> 00:07:03.050
We have to pass the actual data,
the payload that we want

123
00:07:03.050 --> 00:07:06.680
the subscription to have access to
when we create inside of our client.

124
00:07:06.680 --> 00:07:10.190
So it has to match exactly what
the subscription is referencing.

125
00:07:10.190 --> 00:07:15.050
So in this case, an object with a new
item fill that is an item type.

126
00:07:15.050 --> 00:07:16.550
So that's what we'll do.

127
00:07:16.550 --> 00:07:17.770
So we'll say, new item.

128
00:07:19.400 --> 00:07:22.490
Filled with a, item type.

129
00:07:22.490 --> 00:07:25.180
So let me just make this
available real quick.

130
00:07:29.510 --> 00:07:33.710
That, they send an item like that and

131
00:07:33.710 --> 00:07:37.579
then we'll just return the item, cool.

132
00:07:38.650 --> 00:07:41.020
So we got that stuff setup says here,

133
00:07:41.020 --> 00:07:43.800
we also need to add any authentication and
context.

134
00:07:43.800 --> 00:07:45.880
And this example there's
no authentication, but for

135
00:07:45.880 --> 00:07:49.110
context, it's very, very similar
to what you would normally do.

136
00:07:49.110 --> 00:07:53.170
So you have your context object or
a context method on the server instance.

137
00:07:53.170 --> 00:07:55.310
And you're gonna get an objects here.

138
00:07:55.310 --> 00:07:56.790
Normally, we will use
something like the requests,

139
00:07:56.790 --> 00:07:58.280
like we did an authentication section, but

140
00:07:58.280 --> 00:08:00.180
it's also gonna be something
here called connection.

141
00:08:00.180 --> 00:08:03.720
So if we're using the incoming
request is a Subscription

142
00:08:03.720 --> 00:08:05.380
is gonna have a connection property.

143
00:08:05.380 --> 00:08:07.090
And if there is a connection,

144
00:08:07.090 --> 00:08:09.690
then we wanna handle the context
creation a little differently.

145
00:08:09.690 --> 00:08:17.080
Because the connection is gonna have
something on it's called context.

146
00:08:17.080 --> 00:08:20.440
So we can get the connection context and
pass that around and handle that a little

147
00:08:20.440 --> 00:08:25.830
differently than we would non
subscription context for authentication.

148
00:08:25.830 --> 00:08:30.030
Because we don't have any in this case,
you would just use the subscriptions field

149
00:08:30.030 --> 00:08:33.330
on this Apollo instance this
arguments here, which is an object.

150
00:08:33.330 --> 00:08:36.230
And there's a hook for on Connect.

151
00:08:36.230 --> 00:08:38.880
On Connect takes a few arguments with
the first one that you're going to be

152
00:08:38.880 --> 00:08:40.350
interested in are going to be params.

153
00:08:40.350 --> 00:08:43.500
Or you might see them refer
to this connection params,

154
00:08:43.500 --> 00:08:45.120
you can think of these as headers.

155
00:08:45.120 --> 00:08:50.500
So if you were to use something like
req.header or leave the request

156
00:08:50.500 --> 00:08:53.380
object up here and you were looking
at the headers to get the off token.

157
00:08:53.380 --> 00:08:56.430
You could think of these params
as headers for your subscription.

158
00:08:56.430 --> 00:08:58.090
So whatever you pass up on the headers and

159
00:08:58.090 --> 00:09:01.280
graphical playground is going to be
attached to this params object here.

160
00:09:01.280 --> 00:09:04.530
So whatever authentication
logic you do in the context for

161
00:09:04.530 --> 00:09:09.790
a non subscription based request,
you can pretty safely do the same thing

162
00:09:09.790 --> 00:09:15.010
in the onConnect subscriptions,
using the params instead of rect.headers.

163
00:09:15.010 --> 00:09:20.110
So we got the context set up,
we got the params, we got our pubSub.

164
00:09:20.110 --> 00:09:22.490
And from here, it's client side setup.

165
00:09:22.490 --> 00:09:24.333
We don't have an app right now, but

166
00:09:24.333 --> 00:09:27.288
Playground does support
Subscriptions luckily for us.

167
00:09:27.288 --> 00:09:28.521
So all we have to do is just,

168
00:09:28.521 --> 00:09:31.110
perams is going to start
this node server up on 4000.

169
00:09:31.110 --> 00:09:36.350
I'm going to go to that

170
00:09:36.350 --> 00:09:42.070
URL and get rid of this stuff.

171
00:09:42.070 --> 00:09:45.030
So refresh, and let's run a subscription.

172
00:09:45.030 --> 00:09:48.280
So first thing is, use the subscription
keyword which is normally where you would

173
00:09:48.280 --> 00:09:50.270
put query or mutation or
just description one.

174
00:09:50.270 --> 00:09:53.090
Now, we're going to use a new item.

175
00:09:53.090 --> 00:09:54.800
Item is an object type.

176
00:09:54.800 --> 00:09:56.260
So we need a sub selection.

177
00:09:56.260 --> 00:10:00.355
So I'm going to say it only has a task,
I believe, but then I'm gonna hit play.

178
00:10:00.355 --> 00:10:02.910
You notice, nothing happening.

179
00:10:02.910 --> 00:10:05.700
It's not that the service taking
forever and it's hanging.

180
00:10:05.700 --> 00:10:08.340
No, it's listening for
any subscriptions to come in.

181
00:10:08.340 --> 00:10:11.050
So now, we need to actually add some
new items that we can see this being

182
00:10:11.050 --> 00:10:11.680
published.

183
00:10:11.680 --> 00:10:14.450
We can't do this in a new tab and
grab your playground.

184
00:10:14.450 --> 00:10:18.650
Once you have a subscription here,
the connection is being taken from that.

185
00:10:18.650 --> 00:10:22.010
So we have to add a new browser tab.

186
00:10:22.010 --> 00:10:22.620
Go here.

187
00:10:24.960 --> 00:10:28.020
And in this case,
we'll just go ahead and make a new test.

188
00:10:28.020 --> 00:10:33.660
So we'll make a, My aiki is so
busy so mutation.

189
00:10:35.560 --> 00:10:40.980
And we'll say new or I think it's called
create item actually which takes the task.

190
00:10:40.980 --> 00:10:47.430
And we can say this is my task,
and I'll get the task back.

191
00:10:47.430 --> 00:10:51.264
So once I publish that, I get my task
back just like it would in a mutation.

192
00:10:51.264 --> 00:10:52.940
But then if I go back to this description,

193
00:10:52.940 --> 00:10:55.830
you'll see that it showed
up here on the right.

194
00:10:55.830 --> 00:11:02.580
And if I do another one,
That other one also shows up here.

195
00:11:03.630 --> 00:11:06.580
And that's basically
how subscriptions work.

