WEBVTT

1
00:00:00.106 --> 00:00:03.573
So this part is gonna be on error handling
and testing, which I think is very

2
00:00:03.573 --> 00:00:06.840
important if you're gonna be
an advanced GraphQL server developer.

3
00:00:06.840 --> 00:00:08.380
You need to know how handle errors.

4
00:00:08.380 --> 00:00:12.040
So we've talked about it, we've thrown
errors in here, we've done so many things.

5
00:00:12.040 --> 00:00:13.940
And if you've ever worked
on a server before,

6
00:00:13.940 --> 00:00:17.120
especially know that if you throw
an error, the server breaks.

7
00:00:17.120 --> 00:00:20.600
But if you notice, we've been throwing
errors like crazy and nothing's broken.

8
00:00:20.600 --> 00:00:22.630
It continues to work just fine.

9
00:00:22.630 --> 00:00:25.710
So something's happening, and
we didn't do anything about it.

10
00:00:25.710 --> 00:00:28.796
So I'm going to explain to you
what's actually happening.

11
00:00:28.796 --> 00:00:33.420
But basically throw your errors,
they will be caught.

12
00:00:33.420 --> 00:00:37.780
And that's because GraphQL and
not Apollo, but the actual GraphQL spec

13
00:00:37.780 --> 00:00:42.890
inside the resolvers and as the framework
is or the GraphQL is initializing

14
00:00:42.890 --> 00:00:47.880
in the context of GraphQL, any error
that is thrown is automatically caught.

15
00:00:47.880 --> 00:00:51.910
And that error is gonna be
sent down through the query.

16
00:00:51.910 --> 00:00:55.950
So you're still gonna get back,
most likely at 200 unless you change it.

17
00:00:55.950 --> 00:00:59.370
And instead of getting back a data
property, you're gonna get back an error's

18
00:00:59.370 --> 00:01:03.220
property, which can be an array of
errors that have everything on it from

19
00:01:03.220 --> 00:01:07.030
the message of the error all the way
down to the stack trace by default.

20
00:01:07.030 --> 00:01:08.626
And that's what GraphQL's got to do.

21
00:01:08.626 --> 00:01:11.759
So to demonstrate that,

22
00:01:11.759 --> 00:01:16.689
what we can do is let me stop this thing.

23
00:01:16.689 --> 00:01:21.625
And I'm gonna go to this
example one that I have here,

24
00:01:21.625 --> 00:01:25.147
let's just make a new field on a user.

25
00:01:25.147 --> 00:01:26.500
And we'll just call it error.

26
00:01:27.520 --> 00:01:31.550
And it's just gonna return,
it's supposed to return a string.

27
00:01:31.550 --> 00:01:32.050
Let's see that.

28
00:01:33.260 --> 00:01:40.877
But instead, what I'm gonna do
is I'm gonna go to a user, oops.

29
00:01:44.443 --> 00:01:46.937
And I'm gonna make a resolver for
that error field and

30
00:01:46.937 --> 00:01:48.217
I was gonna throw an error.

31
00:01:56.443 --> 00:02:00.989
Like that, so I'll start this up,

32
00:02:00.989 --> 00:02:04.332
node server, like that.

33
00:02:04.332 --> 00:02:08.530
And then I'll try to go
get a user error field.

34
00:02:15.512 --> 00:02:20.300
So, if I say give me, and
then give me the error field like this,

35
00:02:20.300 --> 00:02:24.510
you can see I get back this
errors array and data is null.

36
00:02:24.510 --> 00:02:28.200
So if it wasn't an error, data would
be the objects and some stuff and

37
00:02:28.200 --> 00:02:29.940
errors would probably be null.

38
00:02:29.940 --> 00:02:31.960
So let's inspect this and
figure out what's going on.

39
00:02:31.960 --> 00:02:33.250
So errors has a couple things.

40
00:02:33.250 --> 00:02:34.237
One, it's an array.

41
00:02:34.237 --> 00:02:37.180
So that tells you you might
have many errors happening.

42
00:02:37.180 --> 00:02:39.960
And it really depends on your
implementation and what you wanna do.

43
00:02:39.960 --> 00:02:43.240
But this is where it's got to go,
and this is GraphQL spec,

44
00:02:43.240 --> 00:02:45.890
this is not something that Apollo's doing.

45
00:02:45.890 --> 00:02:48.194
By default,
you're gonna get something like a message.

46
00:02:48.194 --> 00:02:50.978
So that's probably, and
if you're ever using error in JavaScript,

47
00:02:50.978 --> 00:02:54.295
all errors have a message, it's usually
whatever you type into the constructor.

48
00:02:54.295 --> 00:02:56.671
Like I typed in no, so message showed up.

49
00:02:56.671 --> 00:02:59.544
Locations are exactly
what they sound like.

50
00:02:59.544 --> 00:03:01.181
The line numbers and

51
00:03:01.181 --> 00:03:07.062
the columns that those error's
happening according to that resolver.

52
00:03:07.062 --> 00:03:09.457
The path is the path to the resolver.

53
00:03:09.457 --> 00:03:12.846
So you can see,
I issued a query on the me field and

54
00:03:12.846 --> 00:03:17.840
then that returned a user type and
then I got the error field from there.

55
00:03:17.840 --> 00:03:21.720
So it's showing me the path
to where the error happened.

56
00:03:21.720 --> 00:03:25.596
And this extensions thing is something
that frameworks like Apollo and

57
00:03:25.596 --> 00:03:28.576
I think GraphQL does a lot of
this stuff by default too.

58
00:03:28.576 --> 00:03:33.010
It takes advantage of to allow you
more metadata on the error itself.

59
00:03:33.010 --> 00:03:34.417
So right now by default,

60
00:03:34.417 --> 00:03:38.381
we're getting an error code right
now saying internal server error.

61
00:03:38.381 --> 00:03:42.210
And then we get an exception which
has an array of stack traces.

62
00:03:42.210 --> 00:03:44.450
So it can be pretty detailed.

63
00:03:44.450 --> 00:03:46.710
Now you might be asking yourself,

64
00:03:46.710 --> 00:03:48.710
you don't want to show
the stack trace to your client.

65
00:03:48.710 --> 00:03:49.940
This is kind of crazy.

66
00:03:49.940 --> 00:03:51.370
I don't know about that.

67
00:03:51.370 --> 00:03:53.751
No worries,
if you put your app in production mode,

68
00:03:53.751 --> 00:03:56.959
Apollo gets rid of the stack trace for
you, so you don't have to do it.

69
00:03:56.959 --> 00:03:57.609
Even then,

70
00:03:57.609 --> 00:04:02.490
you can also modify it yourself with a
method that I'm gonna show you how to do.

71
00:04:02.490 --> 00:04:07.590
But this is a perfect place for
you to basically, instead

72
00:04:07.590 --> 00:04:12.590
of looking at status quos to figure
out what's going over your server.

73
00:04:12.590 --> 00:04:15.834
Instead, you will look at these
extensions and look at the codes.

74
00:04:15.834 --> 00:04:20.670
You will have deterministic codes
that happened depending on what

75
00:04:20.670 --> 00:04:24.410
error happened on your server, and
your client can respond to those codes.

76
00:04:24.410 --> 00:04:29.328
You can also put other extensions in
here like a message to show in the UI.

77
00:04:29.328 --> 00:04:31.170
So maybe the server even
comes up that message.

78
00:04:31.170 --> 00:04:32.961
So the client doesn't to figure out like,

79
00:04:32.961 --> 00:04:35.265
what do I need to tell the user
when this error happens?

80
00:04:35.265 --> 00:04:38.350
So the server can tell you this is
what you need to tell the user.

81
00:04:38.350 --> 00:04:39.302
So you don't have to do anything.

82
00:04:39.302 --> 00:04:41.902
The whole purpose is to offload
all that stuff to the server and

83
00:04:41.902 --> 00:04:43.450
have GraphQL take care of it.

84
00:04:43.450 --> 00:04:45.670
So the client can just take it and
render it on the page.

85
00:04:45.670 --> 00:04:47.600
You shouldn't have to do
anything on the client side.

86
00:04:47.600 --> 00:04:51.090
Although you can if you want to, but you
have the ability to handle it all here.

87
00:04:52.140 --> 00:04:56.588
So again, that's any error that you
throw or any error that is not caught.

88
00:04:56.588 --> 00:04:59.612
Any exception that's thrown is
gonna be automatically caught and

89
00:04:59.612 --> 00:05:00.805
it's gonna show up here.

90
00:05:00.805 --> 00:05:02.080
And your server is gonna keep running.

91
00:05:03.850 --> 00:05:04.770
It's gonna keep running.

92
00:05:04.770 --> 00:05:06.690
So that may be a little different.

93
00:05:06.690 --> 00:05:10.812
Cuz I know a lot of work goes into keeping
your server running when you have errors,

94
00:05:10.812 --> 00:05:12.028
especially with node.

95
00:05:12.028 --> 00:05:16.079
Well now, it's just gonna run unless
it breaks completely outside of

96
00:05:16.079 --> 00:05:21.370
GraphQL in a middleware somewhere or
something like that database connection.

97
00:05:21.370 --> 00:05:24.060
It's always gonna keep going as
far as errors are concerned.

