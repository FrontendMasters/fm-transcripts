WEBVTT

1
00:00:00.090 --> 00:00:04.020
Welcome to Advanced GraphQL V2
here with Frontend Masters.

2
00:00:04.020 --> 00:00:06.010
I'm Scott Moss,
I'm gonna be your instructor today.

3
00:00:07.360 --> 00:00:11.210
For me, GraphQL is a technology
that I use every single day.

4
00:00:11.210 --> 00:00:12.920
We've used it on the front end,

5
00:00:12.920 --> 00:00:16.360
we use it on the back end,
I'm using it for years now.

6
00:00:16.360 --> 00:00:19.030
I've been helping and
watching it advance and

7
00:00:19.030 --> 00:00:22.030
it's becoming an integral part
of the technology that I love.

8
00:00:22.030 --> 00:00:23.980
It's one of my favorite
pieces of technology.

9
00:00:23.980 --> 00:00:28.411
And I'm really excited about teaching
this course because it's basically based

10
00:00:28.411 --> 00:00:31.939
on a lot of this stuff that I learned
along the way over the few years

11
00:00:31.939 --> 00:00:33.330
of using GraphQL.

12
00:00:33.330 --> 00:00:34.570
The things I learned the hard way and

13
00:00:34.570 --> 00:00:38.710
I'm just going to show you how I get past
them and different strategies like that.

14
00:00:38.710 --> 00:00:42.930
So if you're interested in becoming
really savvy with GraphQL API,

15
00:00:42.930 --> 00:00:44.740
this is definitely the course.

16
00:00:44.740 --> 00:00:48.720
If you don't have any
experience with GraphQL APIs,

17
00:00:48.720 --> 00:00:51.400
we're still gonna go over some things
that could help you get caught up.

18
00:00:51.400 --> 00:00:54.840
But having some experience of what
GraphQL is will definitely be helpful for

19
00:00:54.840 --> 00:00:55.360
this course.

20
00:00:57.380 --> 00:01:02.620
Awesome, so first thing is, get everyone
the links to the slides and repos.

21
00:01:02.620 --> 00:01:05.360
So the repo that we're gonna
be using today is gonna be on

22
00:01:05.360 --> 00:01:08.250
GitHub Frontend Masters,
Advanced GraphQL V2.

23
00:01:08.250 --> 00:01:12.090
So make sure you clone that repo,
pull it down in the read me,

24
00:01:12.090 --> 00:01:14.520
there's a link to some slides
that I'm gonna be using for

25
00:01:14.520 --> 00:01:18.070
the course today, follow along with
yourself or you can just watch me.

26
00:01:18.070 --> 00:01:20.780
And then you'll also be
doing work in this repo.

27
00:01:20.780 --> 00:01:24.830
There are no dependencies in this repo,
other than just having node

28
00:01:24.830 --> 00:01:29.010
version greater than equal to six and
obviously having kit and that's about it.

29
00:01:30.770 --> 00:01:32.520
So we'll just get going with that.

30
00:01:34.064 --> 00:01:39.320
All right, so first thing I wanna do is
just do a refresher on GraphQL APIs for

31
00:01:39.320 --> 00:01:43.410
anyone who hasn't used GraphQL API
before or you maybe you have,

32
00:01:43.410 --> 00:01:46.120
but it's been a while, or
you just need a refresher.

33
00:01:46.120 --> 00:01:49.580
We do have an intro to GraphQL API,
so you can watch that course.

34
00:01:49.580 --> 00:01:52.500
But I'm also just gonna go
over a lot of that stuff now.

35
00:01:52.500 --> 00:01:55.980
So if you are,
i.e considering yourself a GraphQL expert,

36
00:01:55.980 --> 00:01:59.320
a lot of this might not
be that important to you.

37
00:01:59.320 --> 00:02:00.840
I'm just gonna go through it.

38
00:02:00.840 --> 00:02:01.703
So what is GraphQL?

39
00:02:01.703 --> 00:02:06.173
A spec that describes a declarative query
language that your clients can use to ask

40
00:02:06.173 --> 00:02:08.520
an API for the exact data they want.

41
00:02:08.520 --> 00:02:11.320
This is achieved by creating
a strongly typed schema for

42
00:02:11.320 --> 00:02:15.100
your API, ultimate flexibility in
how your API can resolve data, and

43
00:02:15.100 --> 00:02:17.730
client queries validated
against your schema.

44
00:02:17.730 --> 00:02:21.960
And that's just a made up
definition that I came up with.

45
00:02:21.960 --> 00:02:25.500
But basically it's describing,
you can think of it as like TypeScript for

46
00:02:25.500 --> 00:02:27.550
your API or in front of your API.

47
00:02:27.550 --> 00:02:29.470
And you can use your clients x for

48
00:02:29.470 --> 00:02:32.620
exactly what you want based
off those type definitions.

49
00:02:32.620 --> 00:02:33.980
And that's basically it.

50
00:02:34.980 --> 00:02:39.270
So some of the main parts, we have type
definitions, which are basically you

51
00:02:39.270 --> 00:02:43.070
describing the different entities that
your API can expose via queries and

52
00:02:43.070 --> 00:02:43.950
mutations.

53
00:02:43.950 --> 00:02:46.870
We have resolvers that are responsible for
fetching the data for

54
00:02:46.870 --> 00:02:48.860
the fields on the type definitions.

55
00:02:48.860 --> 00:02:53.160
We have a schema, which is a combination
of type definitions and resolvers.

56
00:02:53.160 --> 00:02:57.620
We have data sources which work in
tandem with resolvers to fetch data from

57
00:02:57.620 --> 00:03:01.080
third party resources like
rest servers and databases.

58
00:03:01.080 --> 00:03:05.993
Queries are what clients use to read
data from your GraphQL server and

59
00:03:05.993 --> 00:03:10.746
mutations are what clients use to
mutate data on your GraphQL API.

60
00:03:12.918 --> 00:03:13.890
Tools and libraries.

61
00:03:13.890 --> 00:03:18.860
So graphql-js is
Facebook's JavaScript GraphQL

62
00:03:18.860 --> 00:03:21.090
implementation of the graphql spec.

63
00:03:21.090 --> 00:03:22.630
It's a very handy tool.

64
00:03:22.630 --> 00:03:23.340
A lot of people use it.

65
00:03:23.340 --> 00:03:27.030
I think a lot of tooling is
based off of this underneath.

66
00:03:27.030 --> 00:03:30.103
Apollo Server is what we're
gonna be using today,

67
00:03:30.103 --> 00:03:34.609
which I think is the best serve framework
for GraphQL as far as NodeJs goes.

68
00:03:34.609 --> 00:03:36.166
We are gonna be taking
advantage of that one.

69
00:03:36.166 --> 00:03:39.205
Express is a serve framework
that's very well known and

70
00:03:39.205 --> 00:03:43.406
then Node.js eagle system, never heard
of it, it's a really good server,

71
00:03:43.406 --> 00:03:47.220
Apollo Server is based on top of that,
pretty much everything is based

72
00:03:47.220 --> 00:03:50.255
on Express these days as far
as servers go in Node.js.

73
00:03:50.255 --> 00:03:53.050
GraphQL Playground is an application.

74
00:03:53.050 --> 00:03:55.320
So if you've ever used
something like swagger, or

75
00:03:55.320 --> 00:03:58.830
an interactive documentation Explorer,
that's what GraphQL playground is.

76
00:03:58.830 --> 00:03:59.750
And we get that for free.

77
00:03:59.750 --> 00:04:03.500
We're gonna be using that to
explore the API that we're gonna be

78
00:04:03.500 --> 00:04:04.640
building out today.

79
00:04:04.640 --> 00:04:08.030
Because we don't have a client,
this course is purely for API.

80
00:04:08.030 --> 00:04:09.980
So GraphQL Playground will be our client.

81
00:04:09.980 --> 00:04:12.860
That's how we're going to test
out the queries and mutations and

82
00:04:12.860 --> 00:04:14.730
all the different things that
we're going to be doing today.

83
00:04:17.090 --> 00:04:19.200
So, let's build a GraphQL API.

84
00:04:19.200 --> 00:04:20.510
So follow along on this.

85
00:04:20.510 --> 00:04:23.984
We're just gonna spend like 10-15
minutes building a Hello World API.

86
00:04:23.984 --> 00:04:29.273
Just to get a refresher on what
a GraphQL API is, ask questions if there's

87
00:04:29.273 --> 00:04:32.403
some things you're still hazy on if you've
never use it, definitely ask me questions.

88
00:04:32.403 --> 00:04:35.313
This is the time because after this,
we're gonna go straight in and

89
00:04:35.313 --> 00:04:36.543
do some crazy stuff.

90
00:04:36.543 --> 00:04:37.163
So let's do that.

