WEBVTT

1
00:00:00.060 --> 00:00:03.200
And then for resolvers,
let's make one for resolvers.

2
00:00:05.030 --> 00:00:06.830
This one should be pretty simple.

3
00:00:06.830 --> 00:00:14.840
So we can say describe resolvers and
tests.

4
00:00:14.840 --> 00:00:19.035
I'll just pick one,

5
00:00:23.736 --> 00:00:25.417
Update settings.

6
00:00:25.417 --> 00:00:29.725
Let's just do feed, so
query.feed, let's do that one,

7
00:00:29.725 --> 00:00:32.320
this can get more simple than that.

8
00:00:34.320 --> 00:00:39.736
So we go here,
close that will import our resolvers.

9
00:00:43.896 --> 00:00:45.873
Or is that a default export?

10
00:00:45.873 --> 00:00:50.955
Yep, default export and
easily resolvers.test,

11
00:00:57.246 --> 00:00:59.155
There we go, so resolvers,

12
00:01:04.890 --> 00:01:07.380
Source resolvers.

13
00:01:10.440 --> 00:01:15.305
Cool, so we got some resolvers here and
we'll just say, feed and

14
00:01:15.305 --> 00:01:17.790
it's literally just an object.

15
00:01:17.790 --> 00:01:25.250
So let's say resolvers.query.feed, and
we can just mark out all these values.

16
00:01:25.250 --> 00:01:30.120
So, no, here we go look at the resolvers
and see what it's expecting.

17
00:01:30.120 --> 00:01:33.960
Right now it's expecting your context to
have models and it's doing fine many cool.

18
00:01:33.960 --> 00:01:35.440
I'll just mark that out.

19
00:01:35.440 --> 00:01:38.721
No big deal.

20
00:01:38.721 --> 00:01:41.680
So that's an object to the models on it.

21
00:01:41.680 --> 00:01:44.050
And it has post object on it.

22
00:01:44.050 --> 00:01:49.250
And that has fine mini,

23
00:01:49.250 --> 00:01:52.730
and that's a method
that returns something.

24
00:01:52.730 --> 00:01:55.160
I get this return an array of strings,

25
00:01:55.160 --> 00:01:56.827
I can do whatever I want,
doesn't matter here.

26
00:02:00.860 --> 00:02:07.131
So then Results, Equals that.

27
00:02:07.131 --> 00:02:12.215
So we get the result
then I could say expect

28
00:02:12.215 --> 00:02:17.743
results to equal whatever
is returned here.

29
00:02:21.474 --> 00:02:25.073
Coming around that to us If I didn't
break anything that should work.

30
00:02:28.560 --> 00:02:31.828
Cool, and we tested our
resolver a real test obviously,

31
00:02:31.828 --> 00:02:35.520
you would you would test the input
of this but there's no input.

32
00:02:35.520 --> 00:02:38.250
So you probably just test
to see that it was called.

33
00:02:38.250 --> 00:02:42.970
I expect model.post.findMany
to have been called.

34
00:02:42.970 --> 00:02:46.380
And that's what you would test for
because this is such a trivial example.

35
00:02:46.380 --> 00:02:49.930
Cuz it's literally not doing anything but
other calling a factual argument.

36
00:02:49.930 --> 00:02:55.020
Cool, just FYI, there is another
way to issue these queries and

37
00:02:55.020 --> 00:02:57.580
mutations in a test without
having to create a server.

38
00:02:57.580 --> 00:03:02.880
You could just use the GraphQL

39
00:03:02.880 --> 00:03:07.338
function from GraphQL.

40
00:03:07.338 --> 00:03:11.158
So this GraphQL function right here takes
a few things you can basically if you

41
00:03:11.158 --> 00:03:14.743
invoke the function, I thought it
would give us some type definitions or

42
00:03:14.743 --> 00:03:16.120
some TypeScript support.

43
00:03:16.120 --> 00:03:18.420
But basically it takes
like four arguments.

44
00:03:18.420 --> 00:03:23.335
But what it does is it's going
to return a promise that

45
00:03:23.335 --> 00:03:27.923
when given like some typedefs,
some resolvers,

46
00:03:27.923 --> 00:03:32.417
actually I think the queries
of first argument.

47
00:03:32.417 --> 00:03:35.617
So you give it a queries and
typedefs and some resolvers at minimum,

48
00:03:35.617 --> 00:03:39.150
then you can even like sent a context and
some stuff like that.

49
00:03:39.150 --> 00:03:42.090
It's gonna return a promise
of the resolve result

50
00:03:42.090 --> 00:03:45.060
which is pretty much exactly
what we're doing here.

51
00:03:45.060 --> 00:03:47.360
So you can do that without even
setting up a server just by using

52
00:03:47.360 --> 00:03:48.220
the GraphQL function.

53
00:03:48.220 --> 00:03:51.740
In fact, this when people talk about
GraphQL this what they're talking

54
00:03:51.740 --> 00:03:53.200
about is just one function.

55
00:03:53.200 --> 00:03:56.000
GraphQL is just one function.

56
00:03:56.000 --> 00:03:59.189
It's a function that takes these things
and resolves the value has nothing to do

57
00:03:59.189 --> 00:04:03.450
with a server, has nothing to do with
a client, has nothing to do with anything.

58
00:04:03.450 --> 00:04:07.280
It's a function that can take a query,
validate it against some type definitions

59
00:04:07.280 --> 00:04:12.330
or some resolvers, and come up with
the result asynchronously, that's GraphQL.

60
00:04:12.330 --> 00:04:14.580
So you can use this to
actually write a test.

61
00:04:14.580 --> 00:04:17.690
The only reason you'd wanna
use the Apollo Server setup is

62
00:04:17.690 --> 00:04:21.540
if you were testing something that Apollo
provided to you, you'd want to use that.

63
00:04:21.540 --> 00:04:23.689
For instance,
if we started using custom direct does and

64
00:04:23.689 --> 00:04:24.819
stuff like that, well yeah.

65
00:04:24.819 --> 00:04:28.338
We're not gonna use that GraphQL thing
because that GraphQL function is not going

66
00:04:28.338 --> 00:04:30.849
to know about a custom directives
would Apollo it though.

67
00:04:30.849 --> 00:04:33.710
So you can't like bypass
a lot of that stuff.

68
00:04:33.710 --> 00:04:37.220
So it's only good if you're just
only testing like simple queries and

69
00:04:37.220 --> 00:04:38.300
mutations and things like that.

