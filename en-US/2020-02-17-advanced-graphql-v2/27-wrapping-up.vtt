WEBVTT

1
00:00:00.230 --> 00:00:03.601
The questions on caching
GraphQL directives,

2
00:00:03.601 --> 00:00:07.992
server side stuff, resolvers,
any stuff we covered today.

3
00:00:07.992 --> 00:00:11.771
&gt;&gt; We didn't talk about directives,
and if I heard you correctly,

4
00:00:11.771 --> 00:00:14.872
use the qualifier that these
are Apollo directives.

5
00:00:14.872 --> 00:00:18.040
And correct me if I'm wrong,
these are kinda non-standard,

6
00:00:18.040 --> 00:00:21.090
they're not part of the GQL spec,
is that correct?

7
00:00:21.090 --> 00:00:23.070
&gt;&gt; Which one specifically?

8
00:00:23.070 --> 00:00:24.610
&gt;&gt; I guess, maybe you can speak to them

9
00:00:24.610 --> 00:00:25.520
generally-
&gt;&gt; Okay.

10
00:00:25.520 --> 00:00:29.820
&gt;&gt; Are there directives that are part of
the GQL spec, and others that are just

11
00:00:29.820 --> 00:00:34.250
implemented by Apollo, or
are directives, just an Apollo thing.

12
00:00:34.250 --> 00:00:36.292
&gt;&gt; No,
directives are definitely a GraphQL thing.

13
00:00:36.292 --> 00:00:40.730
So GraphQL spec and all the ones that I
showed you that are already implemented,

14
00:00:40.730 --> 00:00:43.020
which will think was skip,
include and deprecated.

15
00:00:43.020 --> 00:00:45.880
Those are built into GraphQL,
had nothing to do with Apollo.

16
00:00:45.880 --> 00:00:51.420
The only specific Apollo ones that I think
I showed you where the cache control ones,

17
00:00:51.420 --> 00:00:52.628
that's Apollo specific.

18
00:00:52.628 --> 00:00:53.240
&gt;&gt; Got it.

19
00:00:55.376 --> 00:00:59.840
&gt;&gt; And there are some other Apollo
specific directives, but we didn't talk

20
00:00:59.840 --> 00:01:04.910
about that because that kinda gets
into what's called Apollo federation.

21
00:01:04.910 --> 00:01:06.200
Which is something new
that they came up with.

22
00:01:06.200 --> 00:01:10.830
Which is basically allowing users
to have like a one GraphQL API,

23
00:01:10.830 --> 00:01:15.466
that federate to other GraphQL API's
through one unified schema.

24
00:01:15.466 --> 00:01:19.510
So, I was gonna talk about that and have
an exercise for that but actually just so

25
00:01:19.510 --> 00:01:24.270
hard to do, just as an exercise like you
would have to like deploy your thing and

26
00:01:24.270 --> 00:01:26.600
deploy many other apps and
then connect them all together.

27
00:01:26.600 --> 00:01:28.650
It would take us all day just to do that.

28
00:01:28.650 --> 00:01:32.470
But yeah, there's they have other
directors that they use for that as well.

29
00:01:32.470 --> 00:01:37.430
&gt;&gt; Yeah, which was part of my
other question was, what kind of

30
00:01:37.430 --> 00:01:39.460
familiarity do you have
with Apollo Federation,

31
00:01:39.460 --> 00:01:43.730
because we're working on building up
a proof of concept around that now.

32
00:01:43.730 --> 00:01:48.534
And only recently realized that
the subscriptions through Federation

33
00:01:48.534 --> 00:01:50.781
currently supported all three.

34
00:01:50.781 --> 00:01:54.354
So, I don't know if you
had any insight on?

35
00:01:54.354 --> 00:01:55.362
&gt;&gt; Yeah, that sucks.

36
00:01:55.362 --> 00:01:57.510
[LAUGH]
&gt;&gt; Yeah, that sucks.

37
00:01:57.510 --> 00:02:01.150
The only way to get around that
is far as federation goes,

38
00:02:03.040 --> 00:02:04.740
it's actually pretty legit.

39
00:02:04.740 --> 00:02:09.180
I was, I haven't deploy a production rate
for the federational though I went through

40
00:02:09.180 --> 00:02:12.360
a couple times, but I did use schema
stitching before they kind of phased that

41
00:02:12.360 --> 00:02:13.870
out, and know that,
that's no longer a thing.

42
00:02:13.870 --> 00:02:17.460
And schema system was pretty cool,
it's a hell complicated but really cool.

43
00:02:17.460 --> 00:02:20.580
But from my experience with the Federation
stuff was just relatively new like

44
00:02:20.580 --> 00:02:22.040
the last couple months.

45
00:02:22.040 --> 00:02:24.520
It seems pretty straightforward.

46
00:02:24.520 --> 00:02:27.830
You've got to use those directives as
long as you understand that stuff,

47
00:02:27.830 --> 00:02:30.860
and enables a really good workflow for
you and your team.

48
00:02:30.860 --> 00:02:33.890
I think the problem with
the Federation stuff is basically,

49
00:02:33.890 --> 00:02:36.010
it's gonna come to performance,
it's gonna come to caching, right?

50
00:02:36.010 --> 00:02:40.746
Like you got this one gateway GraphQL API
talking to all these other GraphQL API's,

51
00:02:40.746 --> 00:02:45.082
and then those are all talking to each
other like, man, if someone just sends

52
00:02:45.082 --> 00:02:50.039
this query that does this round trip, like
this, like man, how you gonna handle that?

53
00:02:50.039 --> 00:02:52.746
So I think,
in order to do Federation well,

54
00:02:52.746 --> 00:02:55.103
you should just work on caching well.

55
00:02:55.103 --> 00:02:57.469
First, like, what is our caching strategy?

56
00:02:57.469 --> 00:02:58.893
How do we handle caching?

57
00:02:58.893 --> 00:03:02.966
Because in something like Federation,
where all the services are going to be

58
00:03:02.966 --> 00:03:06.330
blocked publicly and
only accessible by the gateway.

59
00:03:06.330 --> 00:03:09.808
Then there's no way that they could be
cached, like on a network level probably,

60
00:03:09.808 --> 00:03:11.460
they probably cache on application level.

61
00:03:11.460 --> 00:03:13.490
They're just not accessing
those over the network.

62
00:03:13.490 --> 00:03:19.060
So, unless you like put them behind
some internal know thing inside of,

63
00:03:19.060 --> 00:03:21.500
some internal IP VPN or
something like that.

64
00:03:21.500 --> 00:03:24.030
There's really no way
cuz they're not public.

65
00:03:24.030 --> 00:03:27.730
So yeah, the caching strategies
that seems crazy, I think, again,

66
00:03:27.730 --> 00:03:29.880
if Paul's like, well,
if you use our product, it just works.

67
00:03:29.880 --> 00:03:33.720
So I think that's kinda how they get you,
but yeah, you'd have to get the caching

68
00:03:33.720 --> 00:03:37.500
strategy down for that, cuz to me,
that just sounds like, wow.

69
00:03:37.500 --> 00:03:41.390
Yeah, that could be crazy, but
seems like it'll work pretty well.

70
00:03:41.390 --> 00:03:42.840
&gt;&gt; How do you limit query depth?

71
00:03:42.840 --> 00:03:44.330
&gt;&gt; Wow, that's a good question.

72
00:03:44.330 --> 00:03:46.400
So security, security, security, security.

73
00:03:46.400 --> 00:03:50.130
So there is a very, very.

74
00:03:50.130 --> 00:03:52.760
So, I'm gonna tell you then I'm
gonna show a very good article that

75
00:03:52.760 --> 00:03:54.510
talks about it way more detail.

76
00:03:54.510 --> 00:03:57.760
But basically,
there is no one way to limit query.

77
00:03:59.180 --> 00:04:00.750
So the question is basically this.

78
00:04:00.750 --> 00:04:06.140
So if I go me, and I have post,
and post has an author,

79
00:04:06.140 --> 00:04:11.180
and author has a post, and
post has an author, this goes on forever.

80
00:04:11.180 --> 00:04:14.486
So like how do you limit someone
from doing this to your server?

81
00:04:14.486 --> 00:04:16.808
There's not one way,
there's a lot of ways, and

82
00:04:16.808 --> 00:04:19.958
I can give you some examples of what
some of the best GraphQL APIs that

83
00:04:19.958 --> 00:04:23.736
are running live in production now are
doing, and I can kinda give you my advice.

84
00:04:23.736 --> 00:04:27.820
So, something like GitHub,
GitHub has a really good GraphQL API.

85
00:04:27.820 --> 00:04:31.400
And basically what they do to help limit
this is because if you think about it,

86
00:04:31.400 --> 00:04:32.620
this is just one request.

87
00:04:32.620 --> 00:04:34.760
So you can't rely on a CDN
to help you from DDoS.

88
00:04:34.760 --> 00:04:36.027
And because the CDN's like,

89
00:04:36.027 --> 00:04:38.367
only one request came in how
am I suppose to block that.

90
00:04:38.367 --> 00:04:40.760
So CDN is not gonna help you.

91
00:04:40.760 --> 00:04:45.476
What you have to do, at least is what
GitHub does, is they count how many nodes

92
00:04:45.476 --> 00:04:50.576
you do per some interval, whether it's
per second, per minute, whatever it is.

93
00:04:50.576 --> 00:04:55.261
And they only allow you to query for
a X amount of nodes up on that interval.

94
00:04:55.261 --> 00:04:59.350
And each object is a node basically.

95
00:04:59.350 --> 00:05:01.464
So they keep track of how
many nodes you have, and

96
00:05:01.464 --> 00:05:03.126
there's a lot of ways you can do that.

97
00:05:03.126 --> 00:05:07.061
You can literally add a directive on
every single type that logs somewhere,

98
00:05:07.061 --> 00:05:09.960
how many nodes this request has and
then just counts it.

99
00:05:09.960 --> 00:05:11.477
And then after that they block you.

100
00:05:11.477 --> 00:05:12.948
They check how many nodes you have and
the block you.

101
00:05:12.948 --> 00:05:14.860
So that seems to work for them.

102
00:05:14.860 --> 00:05:16.810
The downside of that approach I think,

103
00:05:16.810 --> 00:05:19.990
is you have to be explicit about
like how many nodes you want.

104
00:05:19.990 --> 00:05:27.170
So you have to say like post, like
from 12 to 300 or something like that.

105
00:05:27.170 --> 00:05:28.760
You have to tell them how many you want,
so

106
00:05:28.760 --> 00:05:31.430
they understand how
many nodes you can get.

107
00:05:31.430 --> 00:05:32.270
That seems to work.

108
00:05:32.270 --> 00:05:34.410
In my opinion, there's just not one way.

109
00:05:34.410 --> 00:05:35.600
So there's a couple strategies.

110
00:05:35.600 --> 00:05:39.740
One is, well a lot of people do is they
will limit query depth, they might say,

111
00:05:39.740 --> 00:05:43.560
well, I don't want a user
to go four levels deep.

112
00:05:43.560 --> 00:05:45.760
Well, that's not actually
gonna help you a lot,

113
00:05:45.760 --> 00:05:48.200
because there might be thousands
of nodes on one level.

114
00:05:48.200 --> 00:05:49.750
So, it's not really helping you.

115
00:05:49.750 --> 00:05:52.200
Then some people might actually
come up with directives,

116
00:05:52.200 --> 00:05:54.150
that give different types of scores.

117
00:05:54.150 --> 00:05:57.510
And they might say, you can only
make a query that's 100 points, and

118
00:05:57.510 --> 00:06:00.510
this type has four points.

119
00:06:00.510 --> 00:06:03.970
This type has five points,
and combine this many points.

120
00:06:03.970 --> 00:06:07.070
Well, then you get to the point where it's
like, well, how do you rank these points?

121
00:06:07.070 --> 00:06:08.180
Which one has a high priority?

122
00:06:08.180 --> 00:06:11.170
How do you know,
it kind of never really works out?

123
00:06:11.170 --> 00:06:12.150
And then from there,

124
00:06:12.150 --> 00:06:17.120
people start doing things like basically
just a combination of all of that.

125
00:06:17.120 --> 00:06:18.420
So they'll count the nodes.

126
00:06:18.420 --> 00:06:20.150
They'll see how far you can go.

127
00:06:20.150 --> 00:06:23.020
They might do a score
query analysis like that.

128
00:06:23.020 --> 00:06:24.600
And then they try to
figure out what to do.

129
00:06:24.600 --> 00:06:27.070
But, at the end of the day
not doing something, yeah,

130
00:06:27.070 --> 00:06:28.780
somebody is gonna break your app.

131
00:06:28.780 --> 00:06:29.920
And that's it.

132
00:06:29.920 --> 00:06:35.190
So now that I said all that,
there's a really good close, a here we go.

133
00:06:35.190 --> 00:06:36.770
So this one talks about
a little more detail.

134
00:06:36.770 --> 00:06:39.700
They talk about the maximum
query depth that I mentioned.

135
00:06:39.700 --> 00:06:43.350
And you know what it does,
and why does it work.

136
00:06:43.350 --> 00:06:46.750
They also talk about query complexity,
which is basically

137
00:06:46.750 --> 00:06:50.735
adding points to every single thing,
and why it works and why it doesn't.

138
00:06:50.735 --> 00:06:54.430
They talked about throttling and
while you can just say, well,

139
00:06:54.430 --> 00:06:57.340
I'll just time out after X amount of time.

140
00:06:57.340 --> 00:07:00.320
And I talked about why that works and
why that doesn't.

141
00:07:00.320 --> 00:07:02.080
But basically at the end of the day,
they're just saying, yeah,

142
00:07:02.080 --> 00:07:04.240
you just gotta do all the things.

143
00:07:04.240 --> 00:07:07.784
So, there really is no one answer
that people will give you.

144
00:07:07.784 --> 00:07:08.927
We've.
[CROSSTALK]

145
00:07:08.927 --> 00:07:09.466
&gt;&gt; A lot of those

146
00:07:09.466 --> 00:07:12.896
solutions by the time you've determined
that they've gotten too many nodes, and

147
00:07:12.896 --> 00:07:15.015
that it's gone too long,
like the damage is done.

148
00:07:15.015 --> 00:07:18.470
&gt;&gt; Is done yeah,
it's definitely done, yeah.

149
00:07:18.470 --> 00:07:20.770
So, there isn't just one thing,

150
00:07:20.770 --> 00:07:24.340
that's the one thing where graph
cues cuz it is a GraphQL API.

151
00:07:24.340 --> 00:07:26.080
People can do whatever the hell they want.

152
00:07:26.080 --> 00:07:29.020
So you got to get pretty creative
with figuring that part out.

153
00:07:29.020 --> 00:07:30.110
But there are solutions.

154
00:07:30.110 --> 00:07:31.770
You just have to combine them.

155
00:07:31.770 --> 00:07:33.690
I think what GitHub is
doing is pretty good.

156
00:07:33.690 --> 00:07:36.020
I think their approach is pretty solid.

157
00:07:36.020 --> 00:07:37.210
I tried to DDoS it before.

158
00:07:38.260 --> 00:07:39.320
Didn't work.

159
00:07:39.320 --> 00:07:41.720
I did, I actually tried it cuz
I wanted to see if it worked.

160
00:07:41.720 --> 00:07:42.323
It worked pretty well.

161
00:07:42.323 --> 00:07:46.299
So, pretty good approach, yeah.

162
00:07:46.299 --> 00:07:50.312
&gt;&gt; What are your favorite
documentation tools for GraphQL?

163
00:07:50.312 --> 00:07:54.004
&gt;&gt; Well obviously, definitely Playground,
doesn't get any better than that.

164
00:07:54.004 --> 00:07:59.090
Playground is pretty legit,
although Playground is base of GraphQL.

165
00:07:59.090 --> 00:08:04.852
And GraphQL has this one feature that I
like now, I don't think Playground has,

166
00:08:04.852 --> 00:08:09.289
let me see if I can find a live
version of GraphQL somewhere.

167
00:08:09.289 --> 00:08:09.789
Here we go.

168
00:08:12.332 --> 00:08:13.540
They don't have it on here.

169
00:08:13.540 --> 00:08:15.957
No, I guess not all GraphQL has it, but

170
00:08:15.957 --> 00:08:21.013
there's this really cool feature where you
can like open up on the left side here,

171
00:08:21.013 --> 00:08:26.387
and it'll show you every single field,
every single query, every single mutation.

172
00:08:26.387 --> 00:08:29.480
And when you click on it,
it'll just auto-write it in here for you.

173
00:08:29.480 --> 00:08:30.510
So you don't have to write it.

174
00:08:30.510 --> 00:08:31.640
That's really cool.

175
00:08:31.640 --> 00:08:33.480
I've only seen it on GraphQL,
I forgot what it's called.

176
00:08:34.640 --> 00:08:36.320
Other documentation generators.

177
00:08:37.450 --> 00:08:38.900
That's it.
Those are always the things I use.

178
00:08:38.900 --> 00:08:44.750
I actually, no I didn't,
there's one there's, man.

179
00:08:44.750 --> 00:08:46.939
It's on my computer right now,
I'm trying to get the name of it.

180
00:08:49.420 --> 00:08:51.750
Insomnia, so
you can use an Insomnia app and

181
00:08:51.750 --> 00:08:55.520
you can do all different types
of GraphQL tuff in there.

182
00:08:55.520 --> 00:08:56.580
I don't know.
I'll do it right now.

183
00:08:56.580 --> 00:09:00.140
I haven't used in a while but, God, no.

184
00:09:00.140 --> 00:09:02.440
So yeah, this one works pretty good.

185
00:09:02.440 --> 00:09:03.920
I think Postman is really good too.

186
00:09:03.920 --> 00:09:04.830
They support GraphQL.

187
00:09:04.830 --> 00:09:05.560
I just don't use it.

188
00:09:05.560 --> 00:09:07.820
But for me, this is GraphQL Playground.

189
00:09:07.820 --> 00:09:10.640
And sometimes GraphQL.

190
00:09:10.640 --> 00:09:12.690
I've never really needed anything else.

191
00:09:12.690 --> 00:09:13.190
Yep, Mark.

192
00:09:15.000 --> 00:09:21.110
&gt;&gt; Is there any data validation
directives available in Apollo?

193
00:09:21.110 --> 00:09:26.159
&gt;&gt; There are no data validation
directives built into Apollo,

194
00:09:26.159 --> 00:09:31.505
but there is a library that has
a lot of those custom directives.

195
00:09:34.142 --> 00:09:40.810
GraphQL, this is one library with his
developer made a whole bunch of them.

196
00:09:40.810 --> 00:09:42.880
I don't know if it's this one or
another one.

197
00:09:42.880 --> 00:09:46.690
I think this was just transforming things,
and also not that one.

198
00:09:50.074 --> 00:09:54.220
It came library but,
I saw library sometime this week.

199
00:09:54.220 --> 00:09:59.513
A whole bunch of validation directors, but
now that you know how to make directives,

200
00:09:59.513 --> 00:10:02.317
you can take something like validator.js.

201
00:10:05.709 --> 00:10:07.286
My A key doesn't work.

202
00:10:09.439 --> 00:10:13.088
So something like validator.js, and make
a director for all different validations

203
00:10:13.088 --> 00:10:16.140
that exist in validator.js, or
start like tons of different things.

204
00:10:16.140 --> 00:10:20.972
Its currency, its decimal, its divisible,
you can make a director every single way.

205
00:10:20.972 --> 00:10:22.560
In fact it's a really
double resource project,

206
00:10:22.560 --> 00:10:25.470
I guess as you may I will totally use it,
so yeah.

207
00:10:25.470 --> 00:10:26.850
But I can't think of anything
other top of my head.

208
00:10:28.860 --> 00:10:30.480
Any other questions?

209
00:10:30.480 --> 00:10:30.980
Yeah.

210
00:10:30.980 --> 00:10:36.576
&gt;&gt; Didn't have a time to discuss
frontend clients at all.

211
00:10:36.576 --> 00:10:42.495
Do you have a preferred or recommended
approach for evaluating frontend clients,

212
00:10:42.495 --> 00:10:47.432
Apollo client,
&gt;&gt; if you're using Apollo server,

213
00:10:47.432 --> 00:10:50.741
always use Apollo client 100%.

214
00:10:50.741 --> 00:10:53.208
I mean, is it a Greenfield project?

215
00:10:53.208 --> 00:10:53.845
&gt;&gt; Yes.

216
00:10:53.845 --> 00:10:58.647
&gt;&gt; If it's Greenfield, definitely 100% use
Apollo client, because not only will it'll

217
00:10:58.647 --> 00:11:02.640
work 100% well with Apollo server,
but it also manager state.

218
00:11:02.640 --> 00:11:06.580
So we have the intro to GraphQL
on a frontend that we taught.

219
00:11:06.580 --> 00:11:08.120
It goes over that.

220
00:11:08.120 --> 00:11:10.940
And really good detail was
widely covered in this course.

221
00:11:10.940 --> 00:11:14.080
But yeah, Apollo client, and you won't
even need Redux if we're using React,

222
00:11:14.080 --> 00:11:15.600
you only view x if you're using View.

223
00:11:15.600 --> 00:11:17.090
It will handle all of that.

224
00:11:17.090 --> 00:11:20.550
And you can write a schema on
the frontend for your local state,

225
00:11:20.550 --> 00:11:23.070
to emerge that schema
with your API schema.

226
00:11:23.070 --> 00:11:28.500
And you can query data on API and
your local schema in one query.

227
00:11:28.500 --> 00:11:31.770
And your app doesn't really care if it
came from local state or from the API.

228
00:11:31.770 --> 00:11:33.800
So, you get a lot of that stuff for free.

229
00:11:33.800 --> 00:11:35.553
So, I highly recommend doing that.

230
00:11:35.553 --> 00:11:38.461
Especially in React, cuz they have hooks
supports now too, which is really cool.

231
00:11:38.461 --> 00:11:39.320
&gt;&gt; Yup.

232
00:11:41.686 --> 00:11:42.702
&gt;&gt; You got any questions?

233
00:11:45.736 --> 00:11:47.140
Nope.

234
00:11:47.140 --> 00:11:49.659
Well, let's see if [INAUDIBLE].

235
00:11:49.659 --> 00:11:50.913
Looks like it did.

236
00:11:52.400 --> 00:11:53.170
Yehey!

237
00:11:53.170 --> 00:11:55.994
I forgot to change the host, look at that.

238
00:11:55.994 --> 00:11:59.530
&gt;&gt; [LAUGH]
&gt;&gt; Look at that, it's a local host.

239
00:11:59.530 --> 00:12:01.300
If I go to, I guarantee you it won't work.

240
00:12:03.370 --> 00:12:04.880
It's not working.

241
00:12:04.880 --> 00:12:09.440
Yeah, I think, I don't know what
the environment available is for the host.

242
00:12:11.710 --> 00:12:13.360
Yeah, I need the chance to host on there.

243
00:12:13.360 --> 00:12:15.890
But, I think you get the point of
deploying, you don't have to do much.

244
00:12:15.890 --> 00:12:21.060
If there are no other questions,
then you are now a GraphQL API pro.

245
00:12:21.060 --> 00:12:24.390
I promise you no more than most,
this stuff is really challenging.

246
00:12:24.390 --> 00:12:27.790
And I hope you go forth and actually
get to use some of this knowledge in

247
00:12:27.790 --> 00:12:30.350
your endeavors at the companies,
personal projects.

248
00:12:30.350 --> 00:12:34.840
Teaching other employees or friends,
coworkers, that would be really awesome.

249
00:12:34.840 --> 00:12:39.620
And if you need anything else, my email
is scott@typeIO just hit me up, and

250
00:12:39.620 --> 00:12:40.175
thanks for coming.

251
00:12:40.175 --> 00:12:45.653
[APPLAUSE]

