WEBVTT

1
00:00:00.030 --> 00:00:04.070
So many ways to off, couple ways here
in is probably more than this but

2
00:00:04.070 --> 00:00:06.110
these are the three biggest ones.

3
00:00:06.110 --> 00:00:08.110
One is, outside of graph QL.

4
00:00:08.110 --> 00:00:10.200
So in our case,
we're using an Apollo server.

5
00:00:10.200 --> 00:00:15.790
Apollo server can also be used as
a middleware attached to an existing

6
00:00:15.790 --> 00:00:16.970
Express server.

7
00:00:16.970 --> 00:00:18.120
Or it can be the other way around,

8
00:00:18.120 --> 00:00:21.550
where you attach Express
middleware to an Apollo server.

9
00:00:21.550 --> 00:00:24.730
So either way, that means you
could be running some type of

10
00:00:24.730 --> 00:00:28.662
Logic outside the Apollo
server on your server.

11
00:00:28.662 --> 00:00:31.250
So when I say outside of
GraphQL an example and

12
00:00:31.250 --> 00:00:34.760
that is if you have Apollo
server any GraphQL server

13
00:00:34.760 --> 00:00:39.520
running as no where on Express server,
you might do the authentication logic and

14
00:00:39.520 --> 00:00:42.840
in the middle where before your
execution of a GraphQL server.

15
00:00:42.840 --> 00:00:45.757
And then, you'll find some way to
pass that to the GraphQL execution.

16
00:00:45.757 --> 00:00:47.700
So that's one way you can do it.

17
00:00:47.700 --> 00:00:52.720
Another way is, when you're creating
the context object in GraphQL.

18
00:00:52.720 --> 00:00:55.580
So the context object is when
you initialize the server,

19
00:00:55.580 --> 00:00:59.010
like what we just did when we
created new Apollo server.

20
00:00:59.010 --> 00:01:00.440
You could add a method there,

21
00:01:00.440 --> 00:01:04.180
that creates the context object that's
passed to every single resolver.

22
00:01:04.180 --> 00:01:07.490
That's a place where you could also
do authentication, you could say,

23
00:01:07.490 --> 00:01:11.020
I'm about to create the context, which by
the way, it gets initialized every single

24
00:01:11.020 --> 00:01:14.340
request that that context object
gets created every single request.

25
00:01:14.340 --> 00:01:17.880
So during that creation,
you could say I'm going to go ahead and

26
00:01:17.880 --> 00:01:21.210
do some type of authentication or
authorization here.

27
00:01:21.210 --> 00:01:24.680
The last one is the obvious one,
which is just inside the resolvers.

28
00:01:24.680 --> 00:01:27.779
All the resolvers are encapsulated,
they only know about themselves,

29
00:01:27.779 --> 00:01:30.182
they're the small little
functions that do one thing.

30
00:01:30.182 --> 00:01:34.270
They're responsible for
resolving one value for one field.

31
00:01:34.270 --> 00:01:37.350
So there's nothing stopping you from
just saying, I'll just check for

32
00:01:37.350 --> 00:01:41.910
off every in every single resolver
that needs it, and you're good to go.

33
00:01:41.910 --> 00:01:44.130
So those are the three different ways.

34
00:01:44.130 --> 00:01:47.640
But based off the what I said before here,
a good system and

35
00:01:47.640 --> 00:01:48.630
these three different ways.

36
00:01:48.630 --> 00:01:51.530
We're going to talk about
some of the pros and cons of

37
00:01:51.530 --> 00:01:54.920
how these different approaches might
fit into a really good off system and

38
00:01:54.920 --> 00:01:57.030
which ones you might want to use and,
and why.

39
00:01:58.460 --> 00:02:03.970
So talking about outside of graph QL,
using something like Express middleware

40
00:02:03.970 --> 00:02:07.540
before the GraphQL Server executes, so
that's the example that I gave you.

41
00:02:07.540 --> 00:02:12.530
The downside of this is, it completely
locks down all your GraphQL queries and

42
00:02:12.530 --> 00:02:14.900
mutations, because you're
outside the server.

43
00:02:14.900 --> 00:02:20.440
So I've done this before and basically
what you get into is like, all right?

44
00:02:20.440 --> 00:02:23.100
Everything GraphQL
related is authenticated,

45
00:02:23.100 --> 00:02:26.270
everything that is not authenticated
an't be GraphQL related.

46
00:02:26.270 --> 00:02:30.170
So, you either make regular
routes on the express server, or

47
00:02:30.170 --> 00:02:32.920
you literary make a whole
another GraphQL server

48
00:02:32.920 --> 00:02:36.010
next to the authenticated server and
that was not authenticated.

49
00:02:36.010 --> 00:02:37.160
I've seen that happen before.

50
00:02:38.270 --> 00:02:40.400
Either way,
it's probably not the best approach.

51
00:02:40.400 --> 00:02:44.550
It doesn't really tie well into
the flexibility of GraphQL of

52
00:02:44.550 --> 00:02:48.120
being able to access things on
a field level and stuff like that.

53
00:02:48.120 --> 00:02:51.780
So I would say probably,
stay away from this one.

54
00:02:51.780 --> 00:02:54.990
In any scenario,
if you want to lock down the entire API,

55
00:02:54.990 --> 00:02:57.540
I would probably still stay
away from this approach.

56
00:02:57.540 --> 00:03:00.280
Because there is extra
complexity of passing

57
00:03:00.280 --> 00:03:03.690
the alt information to
the GraphQL execution.

58
00:03:03.690 --> 00:03:06.560
And express is not that big of a deal cuz
you could just, in the middle of nowhere,

59
00:03:06.560 --> 00:03:08.990
you can just attach something
to the request body.

60
00:03:08.990 --> 00:03:11.450
And in the request body,
you can use that in the context and

61
00:03:11.450 --> 00:03:12.620
you can figure things out.

62
00:03:12.620 --> 00:03:16.310
But in other sort of implementations,
this might not be as simple of passing

63
00:03:16.310 --> 00:03:21.380
some outside information into
the execution context of GraphQL.

64
00:03:21.380 --> 00:03:23.280
So there's always extra complexity there.

65
00:03:23.280 --> 00:03:25.450
And that's always going
to be a point of fault.

66
00:03:25.450 --> 00:03:30.810
So I recommend not doing that approach at
all, unless you have a really good reason.

67
00:03:30.810 --> 00:03:35.360
Like for instance, your graph kill server
is dynamically generated based off

68
00:03:35.360 --> 00:03:36.580
something in your database.

69
00:03:36.580 --> 00:03:40.300
So therefore, you do need to authenticate
before your server executes.

70
00:03:40.300 --> 00:03:43.200
So like we actually do that
in our example, there's we

71
00:03:43.200 --> 00:03:46.250
actually can't even run a graphical
server, unless we authenticate you first.

72
00:03:46.250 --> 00:03:49.440
So that might be an extreme example where
you would have to do something like that.

73
00:03:49.440 --> 00:03:53.060
So when creating the context object,
the second approach, so

74
00:03:53.060 --> 00:03:56.100
you can use the context creation function
when creating your Apollo server.

75
00:03:56.100 --> 00:03:59.000
Again, I can just go back to
show you what I'm talking about

76
00:03:59.000 --> 00:04:01.550
when I when I mentioned that,
if you don't remember what that is.

77
00:04:01.550 --> 00:04:06.810
That's basically here and Apollo server,
you can use this context method like this.

78
00:04:06.810 --> 00:04:10.180
And whatever you return here is going
to be an object that gets passed

79
00:04:10.180 --> 00:04:13.240
as the third argument to
every single resolver.

80
00:04:13.240 --> 00:04:16.400
So every resolver is going to get
a context objects, like here.

81
00:04:16.400 --> 00:04:19.550
And that object is going to
be whatever you return, here.

82
00:04:19.550 --> 00:04:22.990
And this object is computed
every single request.

83
00:04:22.990 --> 00:04:27.220
It's never the same and unless it is,
and you can also be asynchronous.

84
00:04:27.220 --> 00:04:31.730
So, you can do pretty much
whatever you want in here.

85
00:04:31.730 --> 00:04:35.770
You also get access to things like the
request object from in this case express.

86
00:04:35.770 --> 00:04:37.460
So you do some pretty crazy stuff in here.

87
00:04:37.460 --> 00:04:38.710
This is what I'm talking about.

88
00:04:38.710 --> 00:04:41.720
When I say Context object,so like I said,

89
00:04:41.720 --> 00:04:44.550
you can access the incoming request
to determine authentication.

90
00:04:44.550 --> 00:04:47.840
So if your authentication is like a WT,
and

91
00:04:47.840 --> 00:04:52.230
you're using the authentication header,
that's the perfect place to grab it.

92
00:04:52.230 --> 00:04:55.750
And then there really is no extra work
that passes to the graph qL resolvers

93
00:04:55.750 --> 00:04:59.140
because whatever you return, gets
passed in with the execution for free.

94
00:04:59.140 --> 00:05:03.916
So there's no trying to figure out how do
we get this authentication info down to

95
00:05:03.916 --> 00:05:05.572
the execution of graph ql.

96
00:05:05.572 --> 00:05:08.640
You not have to worry about, just
return the objects, you're good to go.

97
00:05:08.640 --> 00:05:13.230
So, also you have the ability to lock
down the entire schema if you want to.

98
00:05:13.230 --> 00:05:16.530
This is why I said if you do want to
lock down the entire graphical API,

99
00:05:16.530 --> 00:05:20.040
I still wouldn't use the first approach
of doing outside of graph kill.

100
00:05:20.040 --> 00:05:21.135
I will just do it here,

101
00:05:21.135 --> 00:05:24.041
because you can also lock down
the entire graph qL API here.

102
00:05:24.041 --> 00:05:27.275
You can just say, I'm not gonna return
object was gonna throw an error because

103
00:05:27.275 --> 00:05:29.160
you're your unauthenticated.

104
00:05:29.160 --> 00:05:31.658
And that's probably a better
approach than doing it outside.

105
00:05:31.658 --> 00:05:36.020
The last one that I mentioned was
basically inside the resolvers.

106
00:05:36.020 --> 00:05:37.560
This one just has a whole bunch of cons.

107
00:05:37.560 --> 00:05:39.950
I actually can't think of
anything good other than,

108
00:05:39.950 --> 00:05:43.060
that it's the simplest to implement
because it's the most natural one.

109
00:05:43.060 --> 00:05:47.070
It's I think this is what most people
do when they first use graph QL they

110
00:05:47.070 --> 00:05:48.820
fall in love with the resolvers.

111
00:05:48.820 --> 00:05:52.123
And then they realize that
the resolvers can do anything and

112
00:05:52.123 --> 00:05:54.708
the resolvers are like
super huge resolvers.

113
00:05:54.708 --> 00:05:57.176
And as they get better and
understand graph QL more,

114
00:05:57.176 --> 00:06:00.160
they try to find a way to
keep the resolvers skinny.

115
00:06:00.160 --> 00:06:02.280
So a lot of people just put
everything in the resolver,

116
00:06:02.280 --> 00:06:05.770
authentication, authorization,
transactions.

117
00:06:05.770 --> 00:06:07.830
I mean whatever you want,
you stored in resolver.

118
00:06:07.830 --> 00:06:11.150
And that's kinda how it starts out, before
you start figuring out different patterns.

119
00:06:11.150 --> 00:06:14.270
So I think because of that it's
the simplest to implement, but

120
00:06:14.270 --> 00:06:15.970
it is really the hardest to reuse.

121
00:06:15.970 --> 00:06:18.170
Because you have that authentication,

122
00:06:18.170 --> 00:06:21.690
logic authorization logic tied
up with the business logic.

123
00:06:21.690 --> 00:06:24.670
And to me, that's just too much.

124
00:06:24.670 --> 00:06:28.150
Those are separation of concerns, there
are two different systems, the business

125
00:06:28.150 --> 00:06:31.000
logic doesn't need to know about
the authentication logic and vice versa.

126
00:06:31.000 --> 00:06:34.170
As you just assume something,
like it should just to

127
00:06:34.170 --> 00:06:36.820
just like if you were to lock
down the whole GraphQL server.

128
00:06:36.820 --> 00:06:39.478
That graphQL execution assumes
that whoever is accessing

129
00:06:39.478 --> 00:06:42.243
it is always authenticated,
they're always authorized,

130
00:06:42.243 --> 00:06:45.510
they don't have to do the check or
the resolvers will work the same way.

131
00:06:45.510 --> 00:06:49.367
They should already assume that they're
good to go, they shouldn't have to worry

132
00:06:49.367 --> 00:06:52.138
about hold on now are you allowed
to do what I'm about to do?

133
00:06:52.138 --> 00:06:54.669
That's shouldn't be their job,
they should just do what they need to do,

134
00:06:54.669 --> 00:06:55.810
and that's it.

135
00:06:55.810 --> 00:07:03.500
So I almost always recommend not adding
authentication and authorization this way.

136
00:07:03.500 --> 00:07:04.480
So it's not, not a good thing.

