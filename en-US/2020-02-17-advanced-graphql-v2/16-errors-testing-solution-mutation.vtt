WEBVTT

1
00:00:00.130 --> 00:00:04.280
What we want to do to write some
tests already had an example

2
00:00:04.280 --> 00:00:06.570
of queer actually let's
start with the arrows first.

3
00:00:06.570 --> 00:00:07.480
Let's do that.

4
00:00:07.480 --> 00:00:12.770
So I know that we have in the alt file,
yes,

5
00:00:12.770 --> 00:00:19.270
I never went where's my solution or branch
of my on my stash I did it get stash.

6
00:00:19.270 --> 00:00:22.320
So for the authenticated
I'll just write it again.

7
00:00:22.320 --> 00:00:27.890
So, if not context.user then

8
00:00:28.950 --> 00:00:36.264
instead of throwing a new error here
we'll just throw a new authentication

9
00:00:36.264 --> 00:00:40.460
error from I guess I got
to require the plot.

10
00:00:40.460 --> 00:00:41.670
Let's do that.

11
00:00:42.760 --> 00:00:50.830
So we got authentication
equals acquire Apollo server.

12
00:00:53.050 --> 00:00:54.320
There we go.

13
00:00:54.320 --> 00:00:56.527
Grab that.
And then we come out here and

14
00:00:56.527 --> 00:01:00.990
say new authentication error and
for me to say not authenticated.

15
00:01:03.897 --> 00:01:04.940
Not all that's good enough.

16
00:01:06.670 --> 00:01:12.531
Turn next with these things, there we go.

17
00:01:12.531 --> 00:01:13.954
Oops!

18
00:01:13.954 --> 00:01:15.380
Cool!

19
00:01:15.380 --> 00:01:17.930
And then for
authorize is pretty much the same thing.

20
00:01:17.930 --> 00:01:23.315
So if context.user.role does not = role,

21
00:01:23.315 --> 00:01:28.850
then we can,
let's return that right quick.

22
00:01:30.070 --> 00:01:30.940
Oops!

23
00:01:33.271 --> 00:01:36.209
We can just throw a new error here.

24
00:01:36.209 --> 00:01:40.581
Authentication error and we can say
Incorrect roll or whatever you want,

25
00:01:40.581 --> 00:01:45.250
you wanna put some more context in there
and show them what role they should be.

26
00:01:45.250 --> 00:01:46.820
You can do that.

27
00:01:46.820 --> 00:01:50.340
Whatever you want, everybody get on that.

28
00:01:50.340 --> 00:01:51.420
It's pretty simple.

29
00:01:51.420 --> 00:01:53.250
Throw those arrows in there.

30
00:01:53.250 --> 00:01:55.970
Let's check our resolve to see if you got
any other errors being thrown in here.

31
00:01:55.970 --> 00:02:01.490
We can update those as well for
new, new keyword here.

32
00:02:01.490 --> 00:02:03.910
So for the better, there we go.

33
00:02:03.910 --> 00:02:08.810
So on sign up looks like
I have if you sign up and

34
00:02:08.810 --> 00:02:13.680
there's already a user there, I'm throwing
a new era here for you can't do that.

35
00:02:13.680 --> 00:02:18.220
I would say, me for this one, this is
probably another authentication error too.

36
00:02:18.220 --> 00:02:21.821
So, maybe import that from up top.

37
00:02:25.220 --> 00:02:28.040
I guess you might even say,
this is an inputter.

38
00:02:28.040 --> 00:02:30.290
I mean, there's really no wrong or
right way, it's really up to you.

39
00:02:33.180 --> 00:02:35.240
So throw an AuthenticationError, and

40
00:02:35.240 --> 00:02:38.680
you might because a user already
exists within now you're exposing so

41
00:02:38.680 --> 00:02:42.430
your people that hey, this email exists
on our database or maybe not say that.

42
00:02:42.430 --> 00:02:45.050
So this be, you know, something valid.

43
00:02:45.050 --> 00:02:48.920
Never understood why apps say that
sometimes this user already exists, like,

44
00:02:48.920 --> 00:02:52.000
all right, I'm just gonna go take
Elon Musk's email and go sign up for

45
00:02:52.000 --> 00:02:55.110
this app and see if he sign up for it and
they'll let me know if he's there or not.

46
00:02:55.110 --> 00:02:56.060
It's not a good idea.

47
00:02:57.120 --> 00:03:03.000
So, on sign in, if not a user,
then then this might be a bad user input.

48
00:03:03.000 --> 00:03:08.026
You can also just say, authentication
as well and just be like, invalid,

49
00:03:08.026 --> 00:03:13.500
password, plus email, combo or whatever.

50
00:03:14.530 --> 00:03:15.980
That's pretty safe.

51
00:03:15.980 --> 00:03:16.770
So cool.

52
00:03:16.770 --> 00:03:18.430
I don't think we have any
other errors in here.

53
00:03:20.930 --> 00:03:24.230
Was this one post so
not read ID does not equal that.

54
00:03:24.230 --> 00:03:25.460
So this might be another one.

55
00:03:26.750 --> 00:03:31.680
And that's not yours, not your ID.

56
00:03:31.680 --> 00:03:36.840
Okay, got any other here
looks good all right.

57
00:03:36.840 --> 00:03:38.155
Any questions on errors?

58
00:03:40.007 --> 00:03:41.321
No.
And like I said,

59
00:03:41.321 --> 00:03:43.713
when you turn node
environment to production,

60
00:03:43.713 --> 00:03:46.540
Apollo removes the structures
from the errors for you.

61
00:03:46.540 --> 00:03:47.260
So in production,

62
00:03:47.260 --> 00:03:50.780
when you deploy, a node environment is
probably gonna be a production anyway.

63
00:03:50.780 --> 00:03:52.300
So the stack tries to be removed for
you so

64
00:03:52.300 --> 00:03:54.960
you don't have to mainly do
that in that format error.

65
00:03:54.960 --> 00:03:57.474
Function if you don't want
your stacktrace is there.

66
00:03:57.474 --> 00:03:58.746
Cool!

67
00:03:58.746 --> 00:04:01.608
Let's see.

68
00:04:01.608 --> 00:04:08.230
So for directives, sorry,
not the participant out there yet.

69
00:04:08.230 --> 00:04:09.020
Test.

70
00:04:09.020 --> 00:04:14.320
So for tests, we have these query
helpers I'm sorry, this this

71
00:04:14.320 --> 00:04:18.050
helper here that create a test servers for
us and a client and all that stuff.

72
00:04:18.050 --> 00:04:23.200
So what we can do is make another test for
a query and another test for mutation.

73
00:04:23.200 --> 00:04:28.255
So I'm just gonna make a new file here for
mutation

74
00:04:28.255 --> 00:04:33.080
that test.js and
I'm basically just going to copy

75
00:04:33.080 --> 00:04:37.190
everything that's in this query file and
paste it into my mutation file.

76
00:04:37.190 --> 00:04:39.070
Changes describes the mutations.

77
00:04:40.890 --> 00:04:43.370
And then I'm going to go find
a mutation that I want to test.

78
00:04:43.370 --> 00:04:49.520
So my type deaths and
I'll test the create a post mutation.

79
00:04:49.520 --> 00:04:50.660
Let's try that.

80
00:04:50.660 --> 00:04:54.750
So if we create a post,
we can go back to our test.

81
00:04:54.750 --> 00:04:56.060
Change that to create a post.

82
00:04:57.590 --> 00:05:03.440
Okay, new creator create a post and

83
00:05:03.440 --> 00:05:10.870
know that's going to use a, okay,
where's the app, take this.

84
00:05:11.980 --> 00:05:16.880
Create post takes a new post input,
which looks like an input with a message.

85
00:05:18.020 --> 00:05:19.110
That's basically it.

86
00:05:19.110 --> 00:05:19.920
Super simple.

87
00:05:19.920 --> 00:05:23.270
So we can hard code that message in
the query or we can make it dynamic.

88
00:05:23.270 --> 00:05:24.390
So you'll see what I mean.

89
00:05:24.390 --> 00:05:30.408
So if I wanted to hardcoded can just use
the shorthand mutation thing like this and

90
00:05:30.408 --> 00:05:32.278
just hardcoded in here.

91
00:05:34.404 --> 00:05:39.491
Which takes like inputs and
put some message,

92
00:05:39.491 --> 00:05:43.860
so I could just hard quote it like that.

93
00:05:43.860 --> 00:05:47.100
That's cool but if you want to dynamically
pass it in a test and you will the use

94
00:05:47.100 --> 00:05:51.890
variables parameter after mutation to do
it but I was gonna hard quote it for now.

95
00:05:51.890 --> 00:05:53.480
It's not like I really care about it.

96
00:05:54.650 --> 00:05:57.720
Message, as always be Hello.

97
00:05:59.000 --> 00:06:02.970
And then I'll get back,
the message like that.

98
00:06:02.970 --> 00:06:04.300
Cool!
So we have a creative post.

99
00:06:06.130 --> 00:06:09.090
I'm going to get back to mutation here or
mutate and not query.

100
00:06:09.090 --> 00:06:14.760
And then I need to mock out all the stuff
that this resolver is going to expect.

101
00:06:14.760 --> 00:06:16.130
So if I go to the resolvers for

102
00:06:16.130 --> 00:06:20.140
creating a post on the mutation,
it's expecting this input here.

103
00:06:20.140 --> 00:06:23.560
So that should be there because
we pass it in as an argument.

104
00:06:23.560 --> 00:06:24.560
So we should be good there.

105
00:06:25.780 --> 00:06:30.200
We also have this context or
here's what we need to mock out.

106
00:06:30.200 --> 00:06:36.340
So you to mock out a user, and it means
a mock out models and we basically.

107
00:06:36.340 --> 00:06:37.460
Yeah, that's basically all we want to do.

108
00:06:37.460 --> 00:06:42.370
So what I'll do is I'll go back to here,
models we have, I'm gonna say user

109
00:06:43.700 --> 00:06:49.200
and it looks like it's using, createOne.

110
00:06:49.200 --> 00:06:55.500
So I'll mark out createOne,
and pops up stuff.

111
00:06:55.500 --> 00:06:56.760
We can ignore that for now.

112
00:06:58.240 --> 00:07:00.540
See I will mark createOne and
then it was returned one.

113
00:07:00.540 --> 00:07:02.900
So let's say findMany.

114
00:07:02.900 --> 00:07:04.630
That's got to be createOne.

115
00:07:04.630 --> 00:07:08.740
I'll say createOne is just gonna return,
I mean literally anything that I want.

116
00:07:08.740 --> 00:07:13.700
So I'll say it's a function and
it's gonna return an objects

117
00:07:13.700 --> 00:07:18.590
with a message on it that's
going to look like that.

118
00:07:18.590 --> 00:07:22.740
So it's all the same, cool.

119
00:07:22.740 --> 00:07:26.942
The next thing is I need a user here
which doesn't really matter, but

120
00:07:26.942 --> 00:07:30.942
I'm just gonna return URL,
anyway cuz I'm not really using it.

121
00:07:30.942 --> 00:07:34.240
Cuz, I'm just marking it out because
if we go look at the resolver,

122
00:07:35.700 --> 00:07:37.320
it's using the author here and
the user ID,

123
00:07:37.320 --> 00:07:41.630
but I overrated this to do something else,
I'm completely ignoring it.

124
00:07:41.630 --> 00:07:42.310
So it doesn't matter.

125
00:07:42.310 --> 00:07:46.910
But this is where you might want to put
a spy or you might want to spy on this

126
00:07:46.910 --> 00:07:50.030
to make sure the right inputs were passed
to it to make sure it's good to go.

127
00:07:50.030 --> 00:07:53.340
You don't really care what it returns
you just you're interested in

128
00:07:53.340 --> 00:07:56.480
what it receives because that's what
this was lovers responsible for

129
00:07:56.480 --> 00:07:58.580
its responsibilities passing
in the correct arguments.

130
00:07:58.580 --> 00:08:00.980
So you want to spy on it to
figure those arguments out.

131
00:08:00.980 --> 00:08:04.610
You're not so much concerned about what
it returns because that's a whole nother

132
00:08:04.610 --> 00:08:06.150
entity that's tested separately.

133
00:08:06.150 --> 00:08:08.080
So you don't really care what
the return value of it is.

134
00:08:08.080 --> 00:08:09.070
And that's why we mark it out.

135
00:08:10.500 --> 00:08:11.800
And this case,
I'm going to mark it out and

136
00:08:11.800 --> 00:08:13.650
I don't really care about
the input right now.

137
00:08:13.650 --> 00:08:17.850
So having called me tape,
we can await need state like this.

138
00:08:17.850 --> 00:08:24.800
I'm pretty sure it still takes query and
this is gonna be createPost,

139
00:08:24.800 --> 00:08:32.390
that's close to go make a run this test so
I'll say test.

140
00:08:35.690 --> 00:08:36.950
See if anything breaks.

141
00:08:38.070 --> 00:08:41.230
Of course it past the first time was
there was no snapshot it just works.

142
00:08:41.230 --> 00:08:44.160
So, look at the result of it and

143
00:08:44.160 --> 00:08:47.332
yeah, this one looks like it broke
because cannot read property.

144
00:08:47.332 --> 00:08:52.030
createOne undefined.

145
00:08:52.030 --> 00:08:56.468
We're gonna do that.

146
00:08:56.468 --> 00:08:58.820
Create one.

147
00:08:58.820 --> 00:09:00.490
What did I call it?

148
00:09:00.490 --> 00:09:02.459
User, should be posted, there we go.

149
00:09:03.980 --> 00:09:04.888
That will be better.

150
00:09:09.538 --> 00:09:15.020
Okay, cuz now it's obviously gonna break
because it's a whole new object, right?

151
00:09:15.020 --> 00:09:18.314
The snapshot is dead, so you're gonna
update your snapshot but I was going quick

152
00:09:18.314 --> 00:09:21.230
as just to delete that and write it again,
so I'll make a new snapshot.

153
00:09:23.940 --> 00:09:25.320
Cool, so snapshots good.

154
00:09:25.320 --> 00:09:28.540
We can go look at it and we can see the
result is exactly what we thought it was

155
00:09:28.540 --> 00:09:32.210
going to be arrows are undefined,
whatever deterministic.

156
00:09:32.210 --> 00:09:35.620
So if I were to run out again, it'll work.

157
00:09:35.620 --> 00:09:39.470
And just to show you an example of
why we have to set that setting and

158
00:09:39.470 --> 00:09:41.630
the helpers like if I got rid of.

159
00:09:41.630 --> 00:09:43.490
For actually met this true or

160
00:09:43.490 --> 00:09:47.640
got rid of it which defaults to true,
then it's going to ignore my resolvers and

161
00:09:47.640 --> 00:09:53.120
is going to have its own generated
resolvers which will probably just, yeah.

162
00:09:53.120 --> 00:09:56.349
So you can see instead of generated this,

163
00:09:57.730 --> 00:09:59.800
completely different
than what I generated.

164
00:09:59.800 --> 00:10:01.610
So it's generating stuff
every single time,

165
00:10:01.610 --> 00:10:03.750
and every time you generate
it's a different value.

166
00:10:03.750 --> 00:10:05.200
So it's not deterministic, so

167
00:10:05.200 --> 00:10:08.810
you can't really use those values for
things like Snapshot testing,

168
00:10:08.810 --> 00:10:11.620
because the values will be different
every single time you run them.

169
00:10:11.620 --> 00:10:15.660
So that's why we have to have that
flag there to say like, wait,

170
00:10:15.660 --> 00:10:19.370
hold on, not the whole stuff,
because I'm going to mark some things out.

171
00:10:19.370 --> 00:10:22.550
But there are scenarios where you
don't really care what the values are.

172
00:10:22.550 --> 00:10:25.030
For instance,
if you need a resolver to work, but

173
00:10:25.030 --> 00:10:28.520
you're not testing the value of it,
then yeah, you will let that mark.

174
00:10:28.520 --> 00:10:31.846
But if you're testing the output of it,
and if it's the deterministic,

175
00:10:31.846 --> 00:10:35.100
then you will not let the mark having
cuz it's gonna be generated every time.

