WEBVTT

1
00:00:00.270 --> 00:00:05.218
So, now that we've got those beginner
types down, the integers, the strings,

2
00:00:05.218 --> 00:00:10.312
the lists, we're gonna talk about some of
the more advanced data types in Python and

3
00:00:10.312 --> 00:00:13.990
those are sets, tuples, and dictionaries.

4
00:00:13.990 --> 00:00:18.127
These container types let us organize
other types of objects into data

5
00:00:18.127 --> 00:00:21.080
structures and take actions on them.

6
00:00:21.080 --> 00:00:23.940
Some of these are mutable,
some of them are not.

7
00:00:23.940 --> 00:00:28.450
They have different ways of
accessing the values inside.

8
00:00:28.450 --> 00:00:33.786
Just like I had a cheat sheet for
lists on the course website,

9
00:00:33.786 --> 00:00:39.410
I also have a cheat sheet for
sets Tuples and dictionaries.

10
00:00:39.410 --> 00:00:42.584
So after this chapter if you
feel like you're still not

11
00:00:42.584 --> 00:00:44.447
sure what the differences are,

12
00:00:44.447 --> 00:00:49.620
how to access values in them what methods
you can call if they're mutable or not.

13
00:00:49.620 --> 00:00:51.220
Just go back to the cheat sheet.

14
00:00:51.220 --> 00:00:55.721
It will be your handy guide and
spirit animal tuples are The first data

15
00:00:55.721 --> 00:01:00.689
type that we're going to talk about
they're lightweight collections that

16
00:01:00.689 --> 00:01:05.030
are used to keep track of related but
different items.

17
00:01:05.030 --> 00:01:09.780
There's no rule or syntax error that
says they have to be used this way.

18
00:01:09.780 --> 00:01:16.650
Lists are generally used to have
contained similar types of items in them.

19
00:01:16.650 --> 00:01:20.770
But again that's just a guideline and
you can use them however you want.

20
00:01:20.770 --> 00:01:25.540
The difference with tuples and
lists is that tuples are immutable.

21
00:01:25.540 --> 00:01:29.260
Once a tuple is created,
you cannot change the items in it.

22
00:01:29.260 --> 00:01:32.020
You cannot append you cannot pop.

23
00:01:32.020 --> 00:01:36.555
You cannot do an assignment
at an index like you

24
00:01:36.555 --> 00:01:40.740
could with a list But tuples are sorted.

25
00:01:40.740 --> 00:01:45.792
So they have an order to them and
how they're stored so

26
00:01:45.792 --> 00:01:53.000
you can access the zeroeth item in a tuple
and the first and so on and so forth.

27
00:01:55.010 --> 00:01:59.616
There are occasions where you expect
an immutable types you don't want

28
00:01:59.616 --> 00:02:03.452
to pass a list into a function
because it might get changed by

29
00:02:03.452 --> 00:02:05.840
something later down the line.

30
00:02:05.840 --> 00:02:10.630
And so tuple is a great way of ensuring
that the data structure that you

31
00:02:10.630 --> 00:02:13.119
are passing around won't change.

32
00:02:16.070 --> 00:02:24.930
One of the good uses for tuple is storing
information in a row in a spreadsheet.

33
00:02:24.930 --> 00:02:29.707
So a spreadsheet might have different
values and different columns and

34
00:02:29.707 --> 00:02:32.420
the tuple can be used to represent that.

35
00:02:34.430 --> 00:02:38.500
Now, I'm not going to go
too deep into tuples.

36
00:02:38.500 --> 00:02:42.730
But there are some important
things that I want to show you.

37
00:02:42.730 --> 00:02:46.777
And again, I really recommend that you
type along with me in the ripple because

38
00:02:46.777 --> 00:02:49.476
that's how you're going to
get the muscle memory to

39
00:02:49.476 --> 00:02:53.060
really differentiate between these
different kinds of data types.

40
00:02:54.480 --> 00:03:01.770
So a tuple like a list was
defined with square brackets.

41
00:03:01.770 --> 00:03:08.566
tuple is defined with parentheses.

42
00:03:08.566 --> 00:03:16.030
So if we assign this to a variable And
we take a look at the type.

43
00:03:18.920 --> 00:03:21.050
We'll see that it's a tuple.

44
00:03:21.050 --> 00:03:23.190
But there's kind of a gotcha here.

45
00:03:25.190 --> 00:03:32.445
What if I say that my tuple
only has one item in it

46
00:03:34.579 --> 00:03:40.090
Can anyone on zoom tell me
what the type is of my tubal,

47
00:03:40.090 --> 00:03:42.469
my tube
&gt;&gt; String I believe

48
00:03:42.469 --> 00:03:44.120
&gt;&gt; It's a string.

49
00:03:44.120 --> 00:03:49.087
And that's because, remember when
we did our math operations and

50
00:03:49.087 --> 00:03:55.470
we defined The order that we would like
things to be executed with parentheses.

51
00:03:55.470 --> 00:03:58.678
Python doesn't really know how to
differentiate that syntax from

52
00:03:58.678 --> 00:04:00.420
the tuple syntax.

53
00:04:00.420 --> 00:04:06.993
So tuple isn't just the parentheses
tuple is actually the parentheses and

54
00:04:06.993 --> 00:04:12.000
a comma Since a very,
very important differentiation,

55
00:04:12.000 --> 00:04:16.460
this one has bitten me lots and
lots of times.

56
00:04:16.460 --> 00:04:19.487
If you want to define
a tuple with one item in it,

57
00:04:19.487 --> 00:04:23.210
you need to make sure that
you include a trailing comma.

58
00:04:23.210 --> 00:04:24.819
So that will look like this.

59
00:04:26.050 --> 00:04:30.310
Now, if I say that my_tup is
equal to this and I ask for

60
00:04:30.310 --> 00:04:34.520
the type(my_tup), it is now a tuple.

61
00:04:34.520 --> 00:04:36.880
So make sure that you
have that comma in there.

62
00:04:40.250 --> 00:04:46.453
Now, when you're creating a tuple you
can just use these parentheses and

63
00:04:46.453 --> 00:04:52.480
then let's say we have a student and
we're going to have a name.

64
00:04:52.480 --> 00:04:57.112
And we're going to have, age and

65
00:04:57.112 --> 00:05:00.759
subject maybe like a GPA.

66
00:05:03.220 --> 00:05:08.410
Now we can get the item that
is at the zeroeth index.

67
00:05:10.030 --> 00:05:14.700
Remember, tuples are immutable and
we cannot change it.

68
00:05:14.700 --> 00:05:19.950
One of the useful features of tuples
that you might see and lists in Python

69
00:05:19.950 --> 00:05:25.560
is called tuple unpacking So you can get
multiple items out of a tuple at once.

70
00:05:27.760 --> 00:05:33.820
And we can do that when we declare our
variables we separate them with commas.

71
00:05:39.379 --> 00:05:43.750
And then assign those to
the value of the tuple.

72
00:05:43.750 --> 00:05:45.960
And now I have all of these pulled out.

73
00:05:47.330 --> 00:05:52.012
Note that when you do this,
the number Have arguments on the left

74
00:05:52.012 --> 00:05:56.781
hand side need to match the number
of argument items in the tuple or

75
00:05:56.781 --> 00:06:01.980
you're going to get this value
error too many values to unpack.

76
00:06:01.980 --> 00:06:03.610
You will see this error a lot.

77
00:06:03.610 --> 00:06:04.830
So remember it.

78
00:06:04.830 --> 00:06:09.301
That means that the items, number of items
on the left hand side of the expression

79
00:06:09.301 --> 00:06:11.830
don't match the number of items in.

80
00:06:11.830 --> 00:06:16.738
The right hand side, if there's
something that you don't care about,

81
00:06:16.738 --> 00:06:19.640
you can use a shortcut called underscore.

82
00:06:19.640 --> 00:06:23.580
And that means like, I need, I know
I need to match the number of items.

83
00:06:23.580 --> 00:06:27.340
I don't care about saving this one
in a variable, toss that one away.

84
00:06:27.340 --> 00:06:29.759
So that's also syntax that you might see.

85
00:06:29.759 --> 00:06:33.200
&gt;&gt; Does that syntax work with arrays or
only tuples?

86
00:06:33.200 --> 00:06:34.770
It works with lists as well.

87
00:06:36.420 --> 00:06:40.640
But generally, you'll mostly see
the syntax used with tuples.

88
00:06:41.810 --> 00:06:44.280
Because remember that lists are mutable.

89
00:06:44.280 --> 00:06:47.809
So as lists change, you don't have that
guarantee that the number of items on

90
00:06:47.809 --> 00:06:51.250
the left hand side are going to match
the expression on the right hand side.

