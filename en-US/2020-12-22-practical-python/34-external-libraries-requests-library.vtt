WEBVTT

1
00:00:00.620 --> 00:00:07.186
Now, to install external packages you use
pip, but make sure that you know your

2
00:00:07.186 --> 00:00:13.150
packages there's a lot of packages
in the python package index.

3
00:00:13.150 --> 00:00:17.360
You can browse them at pypi.org.

4
00:00:17.360 --> 00:00:19.760
So for example, let's look up a request.

5
00:00:20.960 --> 00:00:27.130
And we should see, The library
that we're looking for right here.

6
00:00:30.043 --> 00:00:32.684
Make sure that you check and
see, well, okay,

7
00:00:32.684 --> 00:00:37.030
this is 43,000 stars on GitHub
it's probably the right thing.

8
00:00:37.030 --> 00:00:40.807
There are a lot of libraries
that have similar names and

9
00:00:40.807 --> 00:00:46.570
there have been malicious libraries that
have popped up for common misspellings.

10
00:00:46.570 --> 00:00:51.541
So it's very important to verify your
external package names before you

11
00:00:51.541 --> 00:00:53.470
run the command.

12
00:00:53.470 --> 00:00:57.458
Better yet,
copy the package name straight from pypi.

13
00:00:57.458 --> 00:01:01.910
If we go here, there's just a big blue
button here where you can copy it.

14
00:01:01.910 --> 00:01:05.810
So you don't have to risk typing it in and
getting it wrong.

15
00:01:07.820 --> 00:01:10.600
A little bit about the requests library.

16
00:01:10.600 --> 00:01:15.355
We saw it early on in the course,
it allows us to make requests and

17
00:01:15.355 --> 00:01:17.560
get back responses.

18
00:01:17.560 --> 00:01:23.703
The first thing we would
want to do is import it,

19
00:01:23.703 --> 00:01:28.927
and let's use the shibe online API which

20
00:01:28.927 --> 00:01:33.970
returns, Shibe dog.

21
00:01:33.970 --> 00:01:36.387
Is that the right way of pronouncing it,
shibe?

22
00:01:36.387 --> 00:01:41.639
I'm gonna go with that but

23
00:01:41.639 --> 00:01:47.380
tldr API with cute puppies.

24
00:01:48.500 --> 00:01:53.620
So now that you've installed requests
in your virtual environment,

25
00:01:53.620 --> 00:01:55.364
you can copy this file.

26
00:01:55.364 --> 00:02:00.727
And we're going to call it shebi.py.

27
00:02:07.142 --> 00:02:08.110
And we're going to run it.

28
00:02:10.340 --> 00:02:15.070
And what we did here was define a URL.

29
00:02:15.070 --> 00:02:17.719
We got a response by calling request.get.

30
00:02:17.719 --> 00:02:22.770
We found out what the status code was,
in this case it was 200.

31
00:02:22.770 --> 00:02:25.890
We got the results as JSON and
then we printed it out.

32
00:02:25.890 --> 00:02:28.930
So we got a list with an image URL.

33
00:02:28.930 --> 00:02:30.297
I'm going to click on it.

34
00:02:32.738 --> 00:02:33.464
It is adorable.

35
00:02:33.464 --> 00:02:35.970
No, puppy.

36
00:02:39.180 --> 00:02:42.860
Cool, so how do we deal with errors?

37
00:02:42.860 --> 00:02:47.880
If we try to pass in a non existent URL,
we're going to get a 404.

38
00:02:47.880 --> 00:02:52.863
So, we want to make sure that
we check the status code.

39
00:02:52.863 --> 00:02:57.947
And we can also pass in
different parameters when

40
00:02:57.947 --> 00:03:02.536
we use the requests
library just like this.

41
00:03:06.915 --> 00:03:08.800
And let's copy this whole thing over.

42
00:03:11.220 --> 00:03:12.888
Oops, that is not what I wanted.

43
00:03:12.888 --> 00:03:17.430
No, I have angered my rebel.

44
00:03:18.860 --> 00:03:20.108
Let's reopen that again.

45
00:03:24.566 --> 00:03:28.647
So here, I am now defining
a parameters count 10 and

46
00:03:28.647 --> 00:03:33.360
I'm passing in those
parameters with the request.

47
00:03:33.360 --> 00:03:35.160
I'm getting that JSON.

48
00:03:35.160 --> 00:03:38.377
And now because it's a list
that has multiple items in it,

49
00:03:38.377 --> 00:03:40.620
I am looping over it and printing it out.

50
00:03:42.940 --> 00:03:45.510
Now I have 10 puppy
pictures to choose from.

51
00:03:45.510 --> 00:03:46.817
I'm gonna open this one.

52
00:03:46.817 --> 00:03:48.263
Very cute.

53
00:03:53.623 --> 00:03:55.134
So that's how you pass in parameters.

54
00:03:55.134 --> 00:03:59.928
That's the 1000 level overview
of the request library.

55
00:03:59.928 --> 00:04:03.470
If you want to learn more about it after
the class, take a look at the Quickstart.

56
00:04:03.470 --> 00:04:05.010
It's very powerful.

57
00:04:05.010 --> 00:04:08.430
So we are now going to take a short break.

58
00:04:08.430 --> 00:04:13.328
Let's say about 20 minutes and
over break take a look at the practice for

59
00:04:13.328 --> 00:04:15.870
object oriented Python.

60
00:04:15.870 --> 00:04:19.473
Go ahead and skip over the practice for
inheritance and

61
00:04:19.473 --> 00:04:23.388
come back to it after class,
it's a more involved topic and

62
00:04:23.388 --> 00:04:28.390
follow through with the practice for
libraries and modules.

63
00:04:28.390 --> 00:04:32.788
Once we come back from break,
we're gonna talk about our final topic,

64
00:04:32.788 --> 00:04:35.070
which is web frameworks and Django.

65
00:04:36.200 --> 00:04:40.190
I'm sure your brains are totally
full of knowledge right now,

66
00:04:40.190 --> 00:04:43.289
before we go on break,
are there any questions?

67
00:04:44.810 --> 00:04:47.490
Can you have multiple tries?

68
00:04:47.490 --> 00:04:48.930
Generally not.

69
00:04:51.530 --> 00:04:54.443
No, I think that's
a syntax error in python.

70
00:04:54.443 --> 00:04:59.449
And for questions like that, I would
recommend that you type them out in

71
00:04:59.449 --> 00:05:04.803
the rubble, that would be a very quick and
easy way to get an answer for that.

72
00:05:08.486 --> 00:05:09.100
Yeah, there we go.

73
00:05:09.100 --> 00:05:12.440
So as soon as I tried that
I get a syntax error.

74
00:05:12.440 --> 00:05:17.600
Each try needs to have an accept
associated with it, one or more.

75
00:05:17.600 --> 00:05:21.010
And then you can have separate
try blocks later on in your code.

