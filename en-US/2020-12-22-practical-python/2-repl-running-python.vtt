WEBVTT

1
00:00:00.160 --> 00:00:05.467
There's one other thing that I want to
talk about and that is the python REPL.

2
00:00:05.467 --> 00:00:07.610
What is a REPL?

3
00:00:07.610 --> 00:00:11.273
REPL stands for read evaluate print loop.

4
00:00:11.273 --> 00:00:15.632
This is an interactive Python
prompt where you can type

5
00:00:15.632 --> 00:00:20.384
in Python programs line by line and
see results right away.

6
00:00:20.384 --> 00:00:24.322
There are lots and
lots of benefits to using a REPL.

7
00:00:24.322 --> 00:00:29.475
By seeing this instantaneous output,
you get instantaneous feedback,

8
00:00:29.475 --> 00:00:33.305
which is exactly what you
need when you're learning.

9
00:00:33.305 --> 00:00:38.856
You want to fail fast and
fail often make mistakes experiment.

10
00:00:38.856 --> 00:00:41.853
There's really not much
that you can break.

11
00:00:41.853 --> 00:00:46.398
So, take full advantage of the REPL for
the first few chapters.

12
00:00:46.398 --> 00:00:49.009
We're going to be working
exclusively in the REPL and

13
00:00:49.009 --> 00:00:50.755
I asked that you type along with me.

14
00:00:52.906 --> 00:00:57.823
Now, the downside to the REPL
is you eventually will

15
00:00:57.823 --> 00:01:01.753
want to store your Python code for reuse.

16
00:01:01.753 --> 00:01:06.137
And that's what Python files are for
and Python programs,

17
00:01:06.137 --> 00:01:09.740
you can consider the REPL
more of a scratch area.

18
00:01:09.740 --> 00:01:14.315
So it's where you can experiment and
play and try out Python code.

19
00:01:14.315 --> 00:01:18.396
If you want to save the output of
your REPL, you can just copy and

20
00:01:18.396 --> 00:01:23.017
paste that into a file, which I recommend
doing if you want to go back and

21
00:01:23.017 --> 00:01:25.190
look at what you were working on.

22
00:01:26.670 --> 00:01:29.745
The REPL isn't just a tool for beginners.

23
00:01:29.745 --> 00:01:31.022
As a Python programmer.

24
00:01:31.022 --> 00:01:32.541
I use it all the time.

25
00:01:32.541 --> 00:01:38.208
If I can't remember what a method does or
what the return value of something is.

26
00:01:38.208 --> 00:01:42.164
I pop up a REPL and
I can quickly answer that question for

27
00:01:42.164 --> 00:01:46.126
myself without having to Google or
redox or whatever.

28
00:01:46.126 --> 00:01:48.773
So it's not just something
that beginners used.

29
00:01:48.773 --> 00:01:52.384
It's going to be a tool that
you'll have in your toolkit for

30
00:01:52.384 --> 00:01:54.343
the rest of your Python career.

31
00:01:54.343 --> 00:01:56.532
Now you'll know that you're in a REPL.

32
00:01:56.532 --> 00:01:58.917
When you see three arrow lines,

33
00:01:58.917 --> 00:02:04.052
those are gonna indicate that a line
of input was given at the prompt.

34
00:02:04.052 --> 00:02:08.911
If you see three arrows in the example
code throughout the course,

35
00:02:08.911 --> 00:02:11.619
don't copy them into your own REPL.

36
00:02:11.619 --> 00:02:18.531
He built in copy function on this course
website should take care of that for you.

37
00:02:18.531 --> 00:02:22.719
Now, comments can start
with the pound sign, and

38
00:02:22.719 --> 00:02:25.909
comments will be ignored in the REPL,

39
00:02:25.909 --> 00:02:31.111
both if they are on a new line,
or if they follow a line of code.

40
00:02:31.111 --> 00:02:36.651
So you might see me add in some
comments for some context, as I type.

41
00:02:36.651 --> 00:02:41.175
And then lines that don't start
with either of those things or,

42
00:02:41.175 --> 00:02:45.941
a dot means that it was output produced
by running input from the prompt.

43
00:02:45.941 --> 00:02:49.382
So let's try this out.

44
00:02:49.382 --> 00:02:52.382
If you want to open the ripple.

45
00:02:52.382 --> 00:02:59.379
On your terminal without VS code, as long
as your virtual environment is activated,

46
00:02:59.379 --> 00:03:03.472
you can type Python and
it will bring it up for you.

47
00:03:03.472 --> 00:03:06.604
And you should see these three arrows and

48
00:03:06.604 --> 00:03:11.772
a blinking prompt letting you know
that Python is ready for input.

49
00:03:11.772 --> 00:03:18.253
On Mac and Linux systems, you can exit
out of this by hitting Ctrl D on Windows.

50
00:03:18.253 --> 00:03:20.306
I think it's slightly different.

51
00:03:20.306 --> 00:03:26.158
I don't remember the command offhand, but
I'm pretty sure the ruffle prints it out.

52
00:03:26.158 --> 00:03:30.913
Either way on Linux or Windows
systems if you don't remember how to.

53
00:03:30.913 --> 00:03:37.284
With this REPL you can just type exit as
a function, and that will exit it for you.

54
00:03:37.284 --> 00:03:41.599
If you don't want to remember
the keyboard shortcuts.

55
00:03:41.599 --> 00:03:46.176
Now, in VS code, we can just pull up
the REPL from the command palette and

56
00:03:46.176 --> 00:03:48.518
have it in our integrated terminal.

57
00:03:48.518 --> 00:03:53.010
So to do that Ctrl Shift p for
Windows Command Shift p for Mac.

58
00:03:53.010 --> 00:03:57.786
Then Python, start REPL and that will

59
00:03:57.786 --> 00:04:02.866
bring up the REPL right in VS code for me.

60
00:04:02.866 --> 00:04:08.442
Now we can start typing some Python
code and seeing what happens.

61
00:04:08.442 --> 00:04:13.437
We can type a number and see that

62
00:04:13.437 --> 00:04:18.635
the output is just printed out.

63
00:04:18.635 --> 00:04:19.796
We can assign a variable.

64
00:04:19.796 --> 00:04:24.068
So in this case,
I'm gonna assign the number five to X.

65
00:04:24.068 --> 00:04:27.180
You'll see here that
nothing was printed out.

66
00:04:27.180 --> 00:04:30.872
That's because an assignment was made and.

67
00:04:30.872 --> 00:04:33.392
Nothing was returned from that assignment.

68
00:04:33.392 --> 00:04:38.342
So in the ripple, if you want to
see the value of what's an X now,

69
00:04:38.342 --> 00:04:43.222
you can just type X by itself and
you'll see that output again.

70
00:04:43.222 --> 00:04:47.985
Once we move to files, and we don't
have these handy features of the ripple,

71
00:04:47.985 --> 00:04:50.418
you're going to need to use the print.

72
00:04:50.418 --> 00:04:52.990
Function in order to see any output.

73
00:04:52.990 --> 00:04:55.183
We're going to talk a lot
more about printing later.

74
00:04:55.183 --> 00:05:02.178
But for the time being, you can just
pass a variable to the print function,

75
00:05:02.178 --> 00:05:07.629
or you can pass in a string
that is delineated with quotes.

76
00:05:07.629 --> 00:05:12.214
And in the REPL, that'll do the same
thing as just typing the variable

77
00:05:18.020 --> 00:05:22.951
So now you should be all set up to work on
the rest of the exercises in this course.

78
00:05:22.951 --> 00:05:24.852
There's a bit of a checklist.

79
00:05:24.852 --> 00:05:29.174
If you're missing a step, I recommend
that you go back in the break and

80
00:05:29.174 --> 00:05:31.313
make sure that you're all set up.

81
00:05:31.313 --> 00:05:34.123
You need to have Python 3.9 installed.

82
00:05:34.123 --> 00:05:37.642
You need to have the vs code
extensionist installed.

83
00:05:37.642 --> 00:05:41.681
You need to have the Python extension for
vs code installed.

84
00:05:41.681 --> 00:05:46.454
You need to have made
a PI workshop directory

85
00:05:46.454 --> 00:05:50.841
in your home folder and navigated to it.

86
00:05:50.841 --> 00:05:53.672
Created a virtual environment.

87
00:05:53.672 --> 00:06:00.571
Activated that virtual environment and
open VS code in your project directory.

88
00:06:00.571 --> 00:06:05.704
If you have that, if you have code on
your path, you can just navigate to

89
00:06:05.704 --> 00:06:11.111
a directory where you have a virtual
environment opened and type code dot.

90
00:06:11.111 --> 00:06:14.373
That will open VS code in
this project directory.

91
00:06:14.373 --> 00:06:17.739
It should pick up the virtual
environment automatically but

92
00:06:17.739 --> 00:06:19.791
you'll still want to double check.

93
00:06:19.791 --> 00:06:22.420
If you don't have that
installed on your path.

94
00:06:22.420 --> 00:06:23.352
That's okay.

95
00:06:23.352 --> 00:06:29.402
You can just launch VS code and
navigate to the project directory.

96
00:06:29.402 --> 00:06:33.263
It's not a prerequisite for the course,
it's just a handy shortcut.

97
00:06:36.522 --> 00:06:41.392
And there are some steps where you can go
ahead and check that you have everything.

98
00:06:41.392 --> 00:06:47.724
Once you're done with setup, go ahead and
open the ripple either in VS code or,

99
00:06:47.724 --> 00:06:52.560
on the terminal and
that will set you up for the next chapter.

100
00:06:52.560 --> 00:06:57.436
And somebody mentioned that in
Windows to exit the REPL Ctrl Z works.

101
00:06:57.436 --> 00:07:04.320
So yes, that is the keyboard shortcut.

102
00:07:04.320 --> 00:07:08.432
Somebody's in chats that they keep
getting Python 3.8 point six.

103
00:07:08.432 --> 00:07:13.601
That means that they might have
an older version of Python installed.

104
00:07:13.601 --> 00:07:19.216
If that is the case, and they went
through the steps to install Python 3.9.

105
00:07:19.216 --> 00:07:22.994
They might be able to create
their virtual environment or

106
00:07:22.994 --> 00:07:27.018
check with the version with
another more specific command.

107
00:07:27.018 --> 00:07:32.237
So here in my project folder,
I'm going to type deactivate and

108
00:07:32.237 --> 00:07:37.957
that will deactivate the virtual
environment that I had activated.

109
00:07:37.957 --> 00:07:39.318
I am instead of typing this,

110
00:07:39.318 --> 00:07:42.506
I don't want any of you to deactivate
your virtual environments.

111
00:07:42.506 --> 00:07:45.392
I'm just going to open a new window.

112
00:07:45.392 --> 00:07:50.633
And you'll see here that in my new window,
I don't have a virtual environment.

113
00:07:50.633 --> 00:07:55.326
So if you have an older
version of Python three.

114
00:07:55.326 --> 00:07:58.853
You should have a Python 3.9 command.

115
00:07:58.853 --> 00:08:03.097
I believe in Windows, it's pi 3.9.

116
00:08:03.097 --> 00:08:06.491
And that will let you
target the more specific

117
00:08:06.491 --> 00:08:09.534
version of Python three on your system.

118
00:08:09.534 --> 00:08:13.922
&gt;&gt; There was one other suggestion
of potentially using a REPL.

119
00:08:13.922 --> 00:08:16.175
If all else fails.

120
00:08:16.175 --> 00:08:21.714
Was that a good option or not,
like got online Python owner?

121
00:08:21.714 --> 00:08:25.649
&gt;&gt; No, because if you want to run
Python programs on your system,

122
00:08:25.649 --> 00:08:28.412
you wanna make sure
that you're all set up.

123
00:08:28.412 --> 00:08:32.692
For the person in chat who's
on Python 3.8, that's okay,

124
00:08:32.692 --> 00:08:38.445
it's a modern enough version of Python 3
that, they shouldn't be too far behind.

125
00:08:38.445 --> 00:08:44.352
And I'm not going to cover any Python
3.9 specific features in class today,

126
00:08:44.352 --> 00:08:48.334
but they do want to get their
environments dialed in.

127
00:08:48.334 --> 00:08:51.794
Unfortunately, I'll chat
about this in a little bit.

128
00:08:51.794 --> 00:08:56.420
Versioning and
Python is something that has.

129
00:08:56.420 --> 00:08:58.040
There's some history there.

130
00:08:58.040 --> 00:09:02.535
And it's not the easiest thing to do,
I imagine that that's where the history of

131
00:09:02.535 --> 00:09:06.980
virtual environments came from originally
is to solve some of these problems.

132
00:09:06.980 --> 00:09:12.081
So it is possible to have multiple
versions of Python on your machine.

133
00:09:12.081 --> 00:09:15.300
And you wanna make sure that you're
using the right one for your project.

