WEBVTT

1
00:00:00.460 --> 00:00:02.360
A little bit about tracebacks.

2
00:00:03.630 --> 00:00:08.964
We talked about how to read the traceback
from a Python program earlier in the day,

3
00:00:08.964 --> 00:00:13.320
that we wanna start at the bottom and
go up to the top.

4
00:00:13.320 --> 00:00:20.584
If we have any uncaught exceptions in our
program, it is going to exit the program.

5
00:00:20.584 --> 00:00:26.807
So let's make a new file
called exceptions.py.

6
00:00:31.660 --> 00:00:38.518
And run this, and we will see that
end of the program never printed out.

7
00:00:38.518 --> 00:00:43.145
Because this through an exception, I'm
trying to ask Python to convert the letter

8
00:00:43.145 --> 00:00:48.110
A into an integer and it's like,
I don't know what you're talking about.

9
00:00:48.110 --> 00:00:52.556
So you need to be mindful that your
programs don't have any uncaught

10
00:00:52.556 --> 00:00:56.226
exceptions or
they will behave in unpredictable ways.

11
00:00:56.226 --> 00:01:02.519
You want to catch your exceptions
with syntax called try and accept.

12
00:01:03.703 --> 00:01:07.720
And let's look at what that looks like.

13
00:01:10.756 --> 00:01:13.981
Try is a keyword with a colon and

14
00:01:13.981 --> 00:01:19.946
you need to indent the code
that you are trying one level.

15
00:01:19.946 --> 00:01:25.713
And then, The accept keyword.

16
00:01:25.713 --> 00:01:29.489
And following the accept keyword,
this will work,

17
00:01:32.312 --> 00:01:34.841
Without any additional arguments.

18
00:01:40.460 --> 00:01:42.400
I can say an exception happened.

19
00:01:44.510 --> 00:01:48.232
So if I run this, it will print
out an exception happened and

20
00:01:48.232 --> 00:01:50.390
then end of the program.

21
00:01:50.390 --> 00:01:56.320
Generally, we want to catch exceptions
that are specific as possible.

22
00:01:57.370 --> 00:02:01.750
And for the most part,
Python gives us a helpful hint.

23
00:02:01.750 --> 00:02:03.234
What was the exception here?

24
00:02:03.234 --> 00:02:05.608
Well, it was a value error.

25
00:02:05.608 --> 00:02:10.220
I tried to pass in
a string into the integer.

26
00:02:10.220 --> 00:02:15.910
So I can just copy this class and
paste it after the accept.

27
00:02:15.910 --> 00:02:21.049
And that will catch the very specific
exception that was thrown in this case.

28
00:02:23.392 --> 00:02:27.760
If I had another exception in
here like a divide by zero.

29
00:02:32.496 --> 00:02:34.290
No, that's also a value error.

30
00:02:35.620 --> 00:02:37.628
It's another good exception.

31
00:02:37.628 --> 00:02:42.965
Let's say I have a dictionary and
I tried to get a key

32
00:02:42.965 --> 00:02:47.942
that is not in that
dictionary that will error.

33
00:02:52.555 --> 00:02:55.039
Is that also value error?

34
00:02:55.039 --> 00:02:57.770
Yeah, right,

35
00:02:57.770 --> 00:03:03.401
I would need to change the order of these.

36
00:03:03.401 --> 00:03:07.956
So because this threw an exception first,
it's getting caught here.

37
00:03:07.956 --> 00:03:09.470
I wanna show you something else.

38
00:03:10.570 --> 00:03:12.260
This will throw a key error.

39
00:03:14.890 --> 00:03:18.843
And so now if I run this,
I will see my key error.

40
00:03:18.843 --> 00:03:22.884
That's because this is the code
that threw the exception.

41
00:03:22.884 --> 00:03:27.541
If I change this back to just
accept with no specific exception,

42
00:03:27.541 --> 00:03:30.760
it's going to catch both of them.

43
00:03:30.760 --> 00:03:33.333
Generally, this is a bad thing.

44
00:03:33.333 --> 00:03:37.889
You want to be as specific about catching
your exceptions as possible so that when

45
00:03:37.889 --> 00:03:42.249
you need to go back and figure out and
debug and troubleshoot what went wrong.

46
00:03:42.249 --> 00:03:46.270
You have a pretty clear idea about
which code caught which exception.

47
00:03:47.920 --> 00:03:53.240
Now, you can also have different
code run for different exceptions.

48
00:03:53.240 --> 00:03:59.782
So I can say accept value error,
say, a value exception happened.

49
00:03:59.782 --> 00:04:07.106
And then I can say accept key error,
which I got the class from right here and

50
00:04:07.106 --> 00:04:11.700
print out, A key was not found.

51
00:04:14.922 --> 00:04:19.068
And now because this was first,
I got my key error first.

52
00:04:19.068 --> 00:04:25.510
If I switch the order of these,
I will get my value error first.

53
00:04:26.760 --> 00:04:31.490
But now I have both scenarios covered.

54
00:04:31.490 --> 00:04:34.810
And I know exactly which
exception was thrown and where.

55
00:04:35.900 --> 00:04:39.044
I'm not going to deep
dive into exceptions, but

56
00:04:39.044 --> 00:04:43.500
I think they're a pretty important
fundamental concept of Python.

57
00:04:43.500 --> 00:04:48.620
So I recommend that you go back through
and take a look at this detailed chapter.

58
00:04:50.930 --> 00:04:55.898
Most importantly, you never want to catch

59
00:04:55.898 --> 00:05:00.180
exceptions that aren't specific.

60
00:05:02.490 --> 00:05:08.201
If you try to catch from the exception
that all exceptions inherit from,

61
00:05:08.201 --> 00:05:14.004
you could end up with a program that
doesn't let you exit it with Ctrl+C or

62
00:05:14.004 --> 00:05:17.000
other weird and subtle bugs.

63
00:05:17.000 --> 00:05:23.110
So make sure that you have a pretty good
understanding of how exceptions work.

64
00:05:24.480 --> 00:05:30.516
There's also a finally clause that you
can include that is an optional block,

65
00:05:30.516 --> 00:05:36.710
that will run after the try regardless
of if an exception was thrown or not.

66
00:05:36.710 --> 00:05:41.360
So if you need to do some cleanup,
that's the right place for it.

67
00:05:41.360 --> 00:05:44.970
So let's chat about
the exception hierarchy.

68
00:05:44.970 --> 00:05:49.668
Python has a lot of useful built-in
exceptions that you are probably going to

69
00:05:49.668 --> 00:05:51.030
encounter.

70
00:05:51.030 --> 00:05:55.233
You can find a detailed list of those
built-in exceptions in the Python

71
00:05:55.233 --> 00:05:56.820
documentation.

72
00:05:56.820 --> 00:05:59.617
An important thing to
know about exceptions is,

73
00:05:59.617 --> 00:06:02.660
like everything else in Python,
are just objects.

74
00:06:02.660 --> 00:06:06.513
So they follow an inheritance hierarchy,
and

75
00:06:06.513 --> 00:06:11.670
more specific classes inherit
from more general ones.

76
00:06:11.670 --> 00:06:16.658
For example, the zero division error
is a subclass of arithmetic error,

77
00:06:16.658 --> 00:06:21.652
which is a subclass of exception,
which is a subclass of base exception.

78
00:06:21.652 --> 00:06:30.027
That's why the best practice is to
catch more specific exceptions first.

79
00:06:30.027 --> 00:06:36.800
And don't catch exception and
especially don't catch base exception.

80
00:06:36.800 --> 00:06:42.440
If you catch base exception, you're gonna
swallow every type of exception, including

81
00:06:42.440 --> 00:06:47.495
the one that is thrown when you press
Ctrl+C while a Python program is running.

82
00:06:47.495 --> 00:06:50.880
And that is the keyboard
interrupt exception.

83
00:06:50.880 --> 00:06:55.158
If you catch base exception,
it will cause your Python program not to

84
00:06:55.158 --> 00:06:59.340
respond to Ctrl+C,
which is not something that anybody wants.

85
00:06:59.340 --> 00:07:00.250
So don't do it.

86
00:07:01.370 --> 00:07:04.444
Because exceptions are regular classes,

87
00:07:04.444 --> 00:07:09.290
we can also inherit from them
from our own custom exceptions.

88
00:07:09.290 --> 00:07:14.450
Which makes it very easy to make
our own custom specific exceptions.

89
00:07:14.450 --> 00:07:16.600
This makes our programs
a lot more readable.

90
00:07:18.330 --> 00:07:21.209
And I'm not going to cover
custom exceptions here, but

91
00:07:21.209 --> 00:07:24.710
there are custom exceptions that
you can work through in practice.

