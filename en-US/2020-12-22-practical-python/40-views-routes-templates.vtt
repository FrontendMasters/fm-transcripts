WEBVTT

1
00:00:00.200 --> 00:00:04.210
Now, let's chat about views,
routes, and templates.

2
00:00:06.430 --> 00:00:11.192
Views and routes allow us to map URLs
in our web application to pages,

3
00:00:11.192 --> 00:00:13.990
API, and points and more.

4
00:00:13.990 --> 00:00:16.560
Our blog right now has
three different sections.

5
00:00:16.560 --> 00:00:22.880
There's an index here that
will show all of our posts.

6
00:00:22.880 --> 00:00:25.970
If I click on Read More,
I go to a detail page.

7
00:00:26.970 --> 00:00:31.479
And I also have an about page
right here that is at /about.

8
00:00:33.226 --> 00:00:38.357
So we have routes that are defined
at the project level in

9
00:00:38.357 --> 00:00:44.814
practical_blog/urls.py and
at the app level at blog/urls.py.

10
00:00:44.814 --> 00:00:47.320
Let's take a quick look
at those side by side.

11
00:00:50.182 --> 00:00:54.700
So on the left hand side is
the practical_blog URL configuration.

12
00:00:54.700 --> 00:00:57.810
This is the top level configuration for
everything.

13
00:00:59.760 --> 00:01:05.350
Here, I'm including a path to the admin,
which we'll look at in just a second.

14
00:01:05.350 --> 00:01:10.230
It's one of the built in things about
Django that is really fantastic.

15
00:01:10.230 --> 00:01:14.470
The next thing is
an include("blog.urls")).

16
00:01:14.470 --> 00:01:18.712
So that's going to take all of
the URLs that I've defined in my app

17
00:01:18.712 --> 00:01:21.580
specific blog.urls and import them here.

18
00:01:22.760 --> 00:01:28.774
So looking at urls.py in blog this is
where you'll see I've defined the index,

19
00:01:28.774 --> 00:01:31.610
the about page, and the detail page.

20
00:01:33.860 --> 00:01:38.579
And that is the path that I'm
passing in as the first argument.

21
00:01:41.933 --> 00:01:47.423
We also have some templates,
and those are located

22
00:01:47.423 --> 00:01:52.154
in the blog &gt; templates/blog directory.

23
00:01:52.154 --> 00:01:59.630
So a bit of a weird data structure,
but that is what Django expects.

24
00:01:59.630 --> 00:02:02.890
We also have static/blog/css.

25
00:02:04.020 --> 00:02:08.585
If I take a look at base.html,
this is just the base

26
00:02:08.585 --> 00:02:13.055
template that all of my
other templates will use.

27
00:02:13.055 --> 00:02:18.122
It's got a header and a footer and
all of those reusable elements.

28
00:02:18.122 --> 00:02:23.098
I need to call load static at
the top here, which means load

29
00:02:23.098 --> 00:02:28.190
up all of the static resources
I might need, such as my CSS.

30
00:02:29.430 --> 00:02:33.159
These funky looking tags
with the curly braces and

31
00:02:33.159 --> 00:02:36.192
the percent symbols are template tags.

32
00:02:36.192 --> 00:02:41.152
And those allow you to use some special
commands in your html templates that

33
00:02:41.152 --> 00:02:43.366
let them interface with Django.

34
00:02:43.366 --> 00:02:47.650
Now, the important thing in
base.html is this block right here.

35
00:02:47.650 --> 00:02:54.555
This content blocks lets us know that
we can use base.html as a template.

36
00:02:54.555 --> 00:02:59.776
If I then take a look at about.html,
I have a template directive

37
00:02:59.776 --> 00:03:04.531
here that says,
extend this one from blog/base.html.

38
00:03:04.531 --> 00:03:09.804
And then everything that is in between
these content blocks, insert that,

39
00:03:15.028 --> 00:03:18.625
Right into here,
right into the matching content blocks.

40
00:03:22.406 --> 00:03:24.524
So that is pretty straightforward.

41
00:03:24.524 --> 00:03:31.610
We have a post_list that has a little bit
of a more complex template tag usage.

42
00:03:31.610 --> 00:03:33.330
Here we have a for loop.

43
00:03:33.330 --> 00:03:37.727
We are getting a post list variable
passed into this template from our view,

44
00:03:37.727 --> 00:03:40.610
which we'll look at in just a second.

45
00:03:40.610 --> 00:03:41.910
And we're looping over it.

46
00:03:41.910 --> 00:03:45.651
So for every post that we have,
we're going to display it.

47
00:03:45.651 --> 00:03:50.133
And then for the detail,
we are using a post variable.

48
00:03:50.133 --> 00:03:53.378
And we are pulling out the post title,

49
00:03:53.378 --> 00:03:57.849
the post.created_at | date and
the post.body.

50
00:03:57.849 --> 00:04:03.830
The slug that is being used here for
the Read More button.

51
00:04:03.830 --> 00:04:08.799
We're using this URL template tag, and

52
00:04:08.799 --> 00:04:11.869
we're passing in post,

53
00:04:11.869 --> 00:04:18.022
which is the name of the view
followed by the slug.

54
00:04:18.022 --> 00:04:24.470
This matches our URL
defined here in urls.py.

55
00:04:24.470 --> 00:04:27.334
So that lets us get a link
to the detail view.

56
00:04:30.809 --> 00:04:34.160
Now, we're gonna take
a quick look at views.

57
00:04:34.160 --> 00:04:39.058
These are some simple basic views that
you might define when you're first

58
00:04:39.058 --> 00:04:40.660
starting out.

59
00:04:40.660 --> 00:04:44.350
But the more advanced
concept is class based views.

60
00:04:46.100 --> 00:04:50.370
So here we have our defined views.

61
00:04:50.370 --> 00:04:55.157
And these views map to the URLs that we

62
00:04:55.157 --> 00:04:59.980
have defined in your blog urls.py.

63
00:04:59.980 --> 00:05:07.780
So here we see views.about,
views.index, views.post.

64
00:05:07.780 --> 00:05:13.440
And we've also given these names so that
we can access them from our templates.

65
00:05:13.440 --> 00:05:19.257
Now, this view, the about view,
is just getting a template and

66
00:05:19.257 --> 00:05:23.476
rendering it and
returning an http response.

67
00:05:23.476 --> 00:05:29.554
This index view is taking a post,
getting all of the objects

68
00:05:29.554 --> 00:05:34.548
in the database via query,
creating a context.

69
00:05:34.548 --> 00:05:39.810
So we remember in our template earlier,
we used a variable called post_list.

70
00:05:39.810 --> 00:05:41.160
This is where it came from.

71
00:05:41.160 --> 00:05:43.470
We're passing it in here.

72
00:05:43.470 --> 00:05:48.501
And then for a detail view in our post,
we're using a shortcut called

73
00:05:48.501 --> 00:05:53.623
get_object_or_404, which means
that if a post with the passed

74
00:05:53.623 --> 00:05:58.340
in slug isn't found,
Django will return a 404 status code.

75
00:05:58.340 --> 00:06:02.490
Now, this is a pattern that you
will see over and over in Django.

76
00:06:02.490 --> 00:06:07.639
And so Django has built in some handy
shortcuts called class based views that

77
00:06:07.639 --> 00:06:12.804
allow you to take out a lot of this stuff
that you might do over and over again.

78
00:06:12.804 --> 00:06:18.396
So I'm going to check out
the class_based_views

79
00:06:18.396 --> 00:06:21.391
branch in the repository.

80
00:06:21.391 --> 00:06:24.333
And we're gonna take a look at
what class based views look like.

81
00:06:26.728 --> 00:06:27.238
This is it.

82
00:06:27.238 --> 00:06:30.381
So from django.views.generic,

83
00:06:30.381 --> 00:06:35.827
I've imported DetailView,
which means give me one object,

84
00:06:35.827 --> 00:06:41.820
and I've imported ListView,
which gets a list of objects.

85
00:06:41.820 --> 00:06:47.260
And I've also imported the model that
we care about, in this case it's Post.

86
00:06:47.260 --> 00:06:52.440
So I'm creating a class-based view called
PostListView that inherits from ListView.

87
00:06:52.440 --> 00:06:55.284
And I'm telling it what model to use.

88
00:06:55.284 --> 00:07:01.090
If we take a look at our URLs again,
they look a little bit different.

89
00:07:01.090 --> 00:07:05.997
Now, you notice that I didn't
have the about page in here.

90
00:07:05.997 --> 00:07:10.721
That's because I'm using a class
based view called TemplateView.

91
00:07:10.721 --> 00:07:13.150
And I'm using it right in URLs.

92
00:07:13.150 --> 00:07:15.924
So I'm calling a method
on it called as_view and

93
00:07:15.924 --> 00:07:18.709
I'm telling it what
template name I care about.

94
00:07:19.880 --> 00:07:21.030
Super quick shortcut.

95
00:07:22.210 --> 00:07:26.115
I'm also calling as_view on
my imported PostListView and

96
00:07:26.115 --> 00:07:29.450
PostDetailView and giving it a name.

97
00:07:29.450 --> 00:07:34.346
Now this code does the same exact
thing that the other code was doing

98
00:07:34.346 --> 00:07:36.013
with a lot less craft.

99
00:07:36.013 --> 00:07:41.220
So let me make sure that my server is
still running and take a look here.

100
00:07:41.220 --> 00:07:43.760
And here we are,
everything still works as expected.

