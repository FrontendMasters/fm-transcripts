WEBVTT

1
00:00:00.214 --> 00:00:04.260
Earlier we talked about
object oriented Python.

2
00:00:04.260 --> 00:00:09.710
We talked about classes and
self and what the difference is.

3
00:00:09.710 --> 00:00:16.760
So let's open a new file and
save this one as class underscore example.

4
00:00:18.060 --> 00:00:22.073
And we're going to be running this one
from the command line rather than from

5
00:00:22.073 --> 00:00:22.770
the repple.

6
00:00:24.240 --> 00:00:27.794
We're going to pass in
several variables and

7
00:00:27.794 --> 00:00:31.260
save them to the instance
by using the self.

8
00:00:35.071 --> 00:00:40.490
In this example,
we added some class variables.

9
00:00:40.490 --> 00:00:45.690
So these are variables that exists for
all instances of a class.

10
00:00:45.690 --> 00:00:49.360
Here we set the number of wheels
to be four at the class scope.

11
00:00:50.980 --> 00:00:55.300
And we can query both the instance and
the class variables.

12
00:00:55.300 --> 00:00:58.673
When we set the instance variable to 3,

13
00:00:58.673 --> 00:01:02.750
we'll note that the class
variable is still 4.

14
00:01:04.400 --> 00:01:09.510
Now inheritance is a topic that you
should go through on your own time.

15
00:01:09.510 --> 00:01:14.276
I highly recommend that you revisit
this chapter and this practice,

16
00:01:14.276 --> 00:01:18.230
because it's one of
the foundational topics in Python.

17
00:01:20.200 --> 00:01:24.867
We talked about using type,
isinstance and issubclass to learn more

18
00:01:24.867 --> 00:01:29.460
about the different classes and
objects that we're working with.

19
00:01:30.870 --> 00:01:34.960
And we also learned about tracebacks and
exceptions.

20
00:01:34.960 --> 00:01:39.568
So, you've probably already seen
the indentation error quite a few

21
00:01:39.568 --> 00:01:42.360
times as you've been working in Python.

22
00:01:44.230 --> 00:01:47.250
You've also seen the more
general syntax error.

23
00:01:47.250 --> 00:01:52.080
And there are other common
exceptions that you might see.

24
00:01:52.080 --> 00:01:56.450
For example, if you try to divide by
zero you will see a zero division error.

25
00:01:56.450 --> 00:02:00.111
Or if you try to get a key out of
a dictionary and that key doesn't exist,

26
00:02:00.111 --> 00:02:02.390
you will see a key error.

27
00:02:02.390 --> 00:02:06.840
Adding together two unrelated types
will throw an exception as well.

28
00:02:06.840 --> 00:02:09.510
If you want to raise your own exceptions,

29
00:02:09.510 --> 00:02:13.320
you will need to inherit
from the exception class.

30
00:02:13.320 --> 00:02:18.219
If you do that by when you define
your class, passing in the exception

31
00:02:18.219 --> 00:02:23.180
class in parentheses, and
then you can go ahead and just raise it.

32
00:02:23.180 --> 00:02:27.575
Having a custom exceptions in your
programs is a great best practice because

33
00:02:27.575 --> 00:02:31.590
we want to catch exceptions that
are as specific as possible.

34
00:02:31.590 --> 00:02:36.548
So that we have a better idea of what's
going wrong when things do inevitably

35
00:02:36.548 --> 00:02:37.250
go wrong.

36
00:02:38.760 --> 00:02:42.120
You can catch exceptions with try and
accept.

37
00:02:42.120 --> 00:02:46.880
So, try followed by an indented block
of code with what you are trying

38
00:02:46.880 --> 00:02:51.068
that might throw an exception,
followed by an accept clause

39
00:02:51.068 --> 00:02:55.840
that also defines what exception
you would like to catch.

40
00:02:55.840 --> 00:02:59.610
You could also use the as keyword if
you need a handle on that exception.

41
00:02:59.610 --> 00:03:02.240
For example,
if you wanted to grab the error message.

42
00:03:03.440 --> 00:03:06.826
You can also re-raise
exceptions as needed.

43
00:03:06.826 --> 00:03:10.162
So catching an exception and
then raising a more specific one.

44
00:03:10.162 --> 00:03:12.133
Or catching an exception and

45
00:03:12.133 --> 00:03:17.810
then raising a custom exception are both
things that you might see in Python code.

