WEBVTT

1
00:00:00.110 --> 00:00:06.110
Functions are a way to help us organize
our code in a way that is reusable.

2
00:00:06.110 --> 00:00:10.010
It lets us accept arguments like
we saw earlier on in the class.

3
00:00:10.010 --> 00:00:14.990
It also lets us provide defaults
where needed and loops.

4
00:00:14.990 --> 00:00:19.401
Let us take actions on collections of
items that we've built up our lists or

5
00:00:19.401 --> 00:00:21.930
dictionaries or tuples.

6
00:00:21.930 --> 00:00:26.170
And then we can use Boolean logic
to control the flow of the program.

7
00:00:28.240 --> 00:00:31.702
Now, we've been working in the repo so
far,

8
00:00:31.702 --> 00:00:35.450
it's time to move on to
working in Python files.

9
00:00:36.700 --> 00:00:40.330
We wanna be able to save,
and reuse, and run again.

10
00:00:41.900 --> 00:00:48.320
So, if you need to create a Python file,
it ends in a .py extension.

11
00:00:49.430 --> 00:00:54.384
There are some naming conventions that you
can find in pep eight guidelines, but for

12
00:00:54.384 --> 00:00:58.420
the most part Python file names
should be all in lowercase.

13
00:00:58.420 --> 00:01:00.140
They should be separated.

14
00:01:00.140 --> 00:01:03.050
The words should be
separated with underscores.

15
00:01:03.050 --> 00:01:05.150
File names should be as short as possible.

16
00:01:06.250 --> 00:01:07.710
And they should end in .py.

17
00:01:07.710 --> 00:01:14.460
We're gonna talk about modules a little
bit later, but you don't want to.

18
00:01:14.460 --> 00:01:15.580
It's called Smurf.

19
00:01:15.580 --> 00:01:17.310
Name your files.

20
00:01:17.310 --> 00:01:21.855
So you don't wanna say my _libAPIs,

21
00:01:21.855 --> 00:01:26.700
my_libhelpers, my_libutilities.

22
00:01:26.700 --> 00:01:31.705
Instead, you would put all of those
in a folder called my_lib and

23
00:01:31.705 --> 00:01:36.190
just name them the simple files names,
just APIs.

24
00:01:36.190 --> 00:01:40.369
Just exceptions just blog.py.

25
00:01:40.369 --> 00:01:43.460
Here are some bad example file names.

26
00:01:43.460 --> 00:01:45.670
Don't name your Python files in all caps.

27
00:01:45.670 --> 00:01:48.080
Don't use camel case.

28
00:01:48.080 --> 00:01:53.018
So capitalizing the first letter of
each word that is a best practice or

29
00:01:53.018 --> 00:01:57.380
standard from a different
programming language.

30
00:01:57.380 --> 00:02:04.552
And don't use smurfy
really_long_ever_descriptive_project_file-

31
00:02:04.552 --> 00:02:05.720
_name.py.

32
00:02:05.720 --> 00:02:10.974
You might see .pyc files
in your directory as you

33
00:02:10.974 --> 00:02:16.368
start running your Python projects,
those are.

34
00:02:16.368 --> 00:02:21.730
Complied intermediary python
files they are for optimization.

35
00:02:21.730 --> 00:02:23.800
You don't have to worry about them.

36
00:02:23.800 --> 00:02:29.570
But you do need to be careful
about not committing them to get.

37
00:02:29.570 --> 00:02:33.670
So those pyc files are just
they don't matter.

38
00:02:33.670 --> 00:02:36.330
They don't need to be
included with your program.

39
00:02:36.330 --> 00:02:41.070
And sometimes, stale versions of
these files can cause problems.

40
00:02:41.070 --> 00:02:45.145
For example, if you're checking
out a different branch in git, and

41
00:02:45.145 --> 00:02:48.010
your pi c files don't really match.

42
00:02:48.010 --> 00:02:53.617
So if you're running into weird problems
when working with Python files,

43
00:02:53.617 --> 00:02:57.460
you can use this command on Mac or
Linux to.

44
00:02:57.460 --> 00:03:02.190
Find all of those pyc files and
just blow them away all at once.

45
00:03:03.830 --> 00:03:08.016
We already saw how to run Python
programs from VS code and

46
00:03:08.016 --> 00:03:11.170
how to create new Python files.

47
00:03:11.170 --> 00:03:15.073
If you want to run that same
file from your terminal,

48
00:03:15.073 --> 00:03:20.842
you just need to make sure that you
have your Virtual Environment activated,

49
00:03:20.842 --> 00:03:23.790
and let's see what I have in this file.

50
00:03:25.510 --> 00:03:29.350
So again, when your virtual
environment is activated,

51
00:03:29.350 --> 00:03:33.220
you can just use Python,
not Python 3 or Python 3.9.

52
00:03:33.220 --> 00:03:36.978
Python is the executable in your
virtual environment that you

53
00:03:36.978 --> 00:03:38.790
know maps to the right place.

54
00:03:38.790 --> 00:03:42.234
And then you would just
pass in the file name.

55
00:03:45.769 --> 00:03:51.551
Or envious code We would want to make

56
00:03:51.551 --> 00:03:58.150
sure to exit our ripple and
then run python file in terminal.

57
00:03:58.150 --> 00:03:59.840
And I will go ahead and do the same thing.

58
00:03:59.840 --> 00:04:02.388
So those are the different options.

59
00:04:02.388 --> 00:04:07.806
Once we move on to files, remember
earlier, I said that the repo, when you

60
00:04:07.806 --> 00:04:14.160
type a variable or a string, it'll just
show you the value right then and there.

61
00:04:14.160 --> 00:04:16.670
That functionality does
not exist in files.

62
00:04:16.670 --> 00:04:19.098
So if you want to see
the output in Python files,

63
00:04:19.098 --> 00:04:22.340
you're gonna need to start
putting print statements in them.

64
00:04:23.460 --> 00:04:29.860
So make sure that you print the values
of your strings if you want to see them.

65
00:04:29.860 --> 00:04:32.580
If not, that's totally fine as well.

66
00:04:32.580 --> 00:04:35.489
You can have print statements
in while you debug and

67
00:04:35.489 --> 00:04:38.850
then comment them out once
your program is ready.

68
00:04:38.850 --> 00:04:44.300
Or once you start writing more advanced
programs, you might use the logger module.

69
00:04:44.300 --> 00:04:49.270
Which lets you configure how output
from your Python program is presented.

70
00:04:49.270 --> 00:04:52.130
That is outside of
the scope of the course.

71
00:04:52.130 --> 00:04:53.843
So I won't be covering it today.

72
00:04:55.443 --> 00:04:59.751
So if you're going to be
sharing your code with a team,

73
00:04:59.751 --> 00:05:04.632
or you plan on sharing it, or
you're working in production.

74
00:05:04.632 --> 00:05:10.740
You generally, don't want to leave
print statements littered in your code,

75
00:05:10.740 --> 00:05:15.840
those are for your own debugging,
so something to be mindful of.

76
00:05:16.870 --> 00:05:21.556
Output formatting tips, remember
earlier I showed you the backslash n

77
00:05:21.556 --> 00:05:25.110
signified a new line,
backslash T is for tab.

78
00:05:25.110 --> 00:05:29.489
You can use the special control
characters for your advantage when you're

79
00:05:29.489 --> 00:05:34.090
printing stuff out, and
you want to make sure that it is readable.

80
00:05:34.090 --> 00:05:41.360
You can also pretty print with something
called the pretty print module.

81
00:05:41.360 --> 00:05:45.320
And I wanna show that to you quickly
because I find it super useful.

82
00:05:47.080 --> 00:05:51.151
So, opening up my repple here,

83
00:05:55.072 --> 00:06:02.390
I'm going to create a long list if I tried
to print this, it's not very readable.

84
00:06:02.390 --> 00:06:05.400
Pretty print is included in
the Python standard library.

85
00:06:05.400 --> 00:06:09.924
So I can say from p print,
import p print And

86
00:06:09.924 --> 00:06:13.084
that will let me access this.

87
00:06:13.084 --> 00:06:21.660
This module, because p print is not one
of those built-in functions that we saw.

88
00:06:21.660 --> 00:06:26.320
It's not len it's not print where we
can just use it without importing it.

89
00:06:26.320 --> 00:06:28.350
This is kind of a special case.

90
00:06:28.350 --> 00:06:33.452
And once you have imported it,
we can pass in the long list here,

91
00:06:33.452 --> 00:06:38.220
and it will go ahead and
print it out with line breaks.

92
00:06:38.220 --> 00:06:40.684
So if you're looking at complex code,

93
00:06:40.684 --> 00:06:44.130
this is a great tool to use to
make it more human readable

