WEBVTT

1
00:00:00.176 --> 00:00:02.927
When you're working with
libraries in Python,

2
00:00:02.927 --> 00:00:05.685
you're going to make use
of the import keyword.

3
00:00:05.685 --> 00:00:09.035
So let's take a look at
how this looks like.

4
00:00:16.223 --> 00:00:19.629
You can import packages that
are in the standard library

5
00:00:19.629 --> 00:00:22.177
without needing to do anything special.

6
00:00:22.177 --> 00:00:27.257
So for example,
random is part of the standard library.

7
00:00:27.257 --> 00:00:34.484
And this random module, if I wanted to see
what was in it, I could call dir on it.

8
00:00:34.484 --> 00:00:38.948
Has a method here called randint.

9
00:00:38.948 --> 00:00:42.076
If I wanted to know what it does,
I could pass that into help.

10
00:00:42.076 --> 00:00:47.627
So returns a random integer in the range
of a and b including both end points.

11
00:00:47.627 --> 00:00:52.332
So I can call random.rantint between 0 and
100, and

12
00:00:52.332 --> 00:00:56.556
that will give me a random
number each time I run it.

13
00:00:59.769 --> 00:01:04.157
You can also specify
that instead of importing

14
00:01:04.157 --> 00:01:08.433
everything that it is
in this random module,

15
00:01:08.433 --> 00:01:12.818
you can say from the random module import,
and

16
00:01:12.818 --> 00:01:18.467
then the specific name of
the function that you want to use.

17
00:01:18.467 --> 00:01:24.366
And then I can call randint this way
without any extra qualifications.

18
00:01:24.366 --> 00:01:28.014
You'll get more comfortable with this
concept as you advance in your python

19
00:01:28.014 --> 00:01:28.532
journey.

20
00:01:28.532 --> 00:01:32.670
But know that,
if you are going to be using a lot of or

21
00:01:32.670 --> 00:01:39.237
all of the definitions from a module,
go ahead and import that top level module.

22
00:01:39.237 --> 00:01:41.399
If you just want to use one thing,

23
00:01:41.399 --> 00:01:45.425
stick with the best practice of
only importing what you need.

24
00:01:47.756 --> 00:01:51.789
You can also install libraries with pip.

25
00:01:51.789 --> 00:01:56.139
And generally you want to run
pip this way python-m pip.

26
00:01:56.139 --> 00:02:01.494
Remember the -m flag means from the next

27
00:02:01.494 --> 00:02:06.229
argument as a standalone program.

28
00:02:06.229 --> 00:02:10.869
And this makes sure that we're always
using the version of pip that is

29
00:02:10.869 --> 00:02:15.443
associated with the version of
Python in our virtual environment.

30
00:02:15.443 --> 00:02:20.712
Because unfortunately, you can also end up
with multiple versions of pip installed.

31
00:02:20.712 --> 00:02:23.873
Sometimes you might have a pip three for
Python three.

32
00:02:23.873 --> 00:02:28.342
So this is the guaranteed way of
getting the right package installed.

33
00:02:28.342 --> 00:02:33.720
Go ahead and do a python-m pip install
requests in your virtual environment.

34
00:02:33.720 --> 00:02:38.549
And we're going to use
that external library

35
00:02:38.549 --> 00:02:42.749
in the last practice for this chapter.

36
00:02:42.749 --> 00:02:45.635
Make sure that you
are in your terminal and

37
00:02:45.635 --> 00:02:51.172
your virtual environment is activated and
do python -m pip install requests.

38
00:02:51.172 --> 00:02:56.503
And you should see an install here,
I've already installed it.

39
00:02:56.503 --> 00:02:59.195
So it says requirement already satisfied.

40
00:03:02.410 --> 00:03:05.622
Now a little bit more about modules and
imports.

41
00:03:05.622 --> 00:03:08.725
Python has this batteries
included philosophy.

42
00:03:08.725 --> 00:03:13.519
There is a rich and versatile standard
library available without having to

43
00:03:13.519 --> 00:03:15.504
download separate packages.

44
00:03:15.504 --> 00:03:20.277
There's a lot of useful stuff
in here like working with

45
00:03:20.277 --> 00:03:24.646
JSON we saw earlier working with times and
dates.

46
00:03:24.646 --> 00:03:28.078
If you want to make your own modules,

47
00:03:28.078 --> 00:03:32.630
just make a new folder and
put your code in there.

48
00:03:32.630 --> 00:03:37.473
And that way you can import everything

49
00:03:37.473 --> 00:03:42.321
that is in that module just like this.

50
00:03:42.321 --> 00:03:48.429
In older versions of Python,
you had to have an empty dunderinit.py

51
00:03:48.429 --> 00:03:53.502
file in folders for
Python to recognize them as modules.

52
00:03:53.502 --> 00:03:56.438
In Python three,
that is no longer the case.

53
00:03:56.438 --> 00:04:03.198
And when you have time, you can go
through here and look at best practices.

54
00:04:03.198 --> 00:04:06.767
We're not going to talk
about tests right now, but

55
00:04:06.767 --> 00:04:09.922
I will cover tests when
we talk about Django.

56
00:04:09.922 --> 00:04:12.552
Know that you should write them.

57
00:04:12.552 --> 00:04:16.940
They are a cornerstone of
solid Python programs.

58
00:04:16.940 --> 00:04:22.352
And the unit testing library
is built in to Python.

59
00:04:22.352 --> 00:04:28.205
You just have to import unit test and
then you have a lot of features available.

60
00:04:28.205 --> 00:04:33.534
In the course website, you'll also
see that there is a cheat sheet for

61
00:04:33.534 --> 00:04:36.243
all of the test case assertions that

62
00:04:36.243 --> 00:04:40.778
you might commonly use when you
are unit testing your code.

63
00:04:40.778 --> 00:04:45.464
Like assert equal, assert,
not equal assert true assert false.

64
00:04:45.464 --> 00:04:48.660
You'll be using a combination
of these in your unit tests.

