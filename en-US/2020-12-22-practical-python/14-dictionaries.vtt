WEBVTT

1
00:00:00.505 --> 00:00:03.683
Next up, we have dictionaries.

2
00:00:03.683 --> 00:00:11.182
Dictionaries are a data type that
allow us to store key and value pairs.

3
00:00:11.182 --> 00:00:15.715
Dictionaries themselves aren't mutable,
but

4
00:00:15.715 --> 00:00:21.250
just like sets,
dictionary keys is can only be immutable.

5
00:00:21.250 --> 00:00:22.654
Why?

6
00:00:22.654 --> 00:00:26.302
Because dictionary keys
need to be hashable.

7
00:00:26.302 --> 00:00:31.227
Dictionaries allow fast item lookup and
fast membership testing

8
00:00:31.227 --> 00:00:36.338
you can quickly say, given a key is
this key in my dictionary or not.

9
00:00:36.338 --> 00:00:40.606
And that's because the hash of the key
is compared with the hash of the keys in

10
00:00:40.606 --> 00:00:45.407
the dictionary, don't have to look through
it each item in that dictionary and say,

11
00:00:45.407 --> 00:00:49.830
are are you the item, are you the item,
are you the item that I'm looking for?

12
00:00:49.830 --> 00:00:54.262
So can I have a list as a dictionary and
a key, or I'm sorry,

13
00:00:54.262 --> 00:00:56.761
a list as a key in the dictionary?

14
00:00:56.761 --> 00:01:01.558
If I ask that question correctly,
I would get a better answer.

15
00:01:01.558 --> 00:01:02.488
No.

16
00:01:02.488 --> 00:01:03.308
Right.

17
00:01:03.308 --> 00:01:07.478
So a list is mutable dictionary
keys can only be immutable.

18
00:01:07.478 --> 00:01:11.550
We cannot have mutable data
types as dictionary keys.

19
00:01:11.550 --> 00:01:17.305
Can we have a tuple as a dictionary key?

20
00:01:17.305 --> 00:01:18.578
Yes.

21
00:01:18.578 --> 00:01:23.298
Tuples are immutable, so
we can use them as a dictionary key.

22
00:01:23.298 --> 00:01:27.508
I have a dictionary cheat sheet here for
you.

23
00:01:27.508 --> 00:01:31.710
But let's go through some examples of
what dictionaries in Python look like.

24
00:01:35.576 --> 00:01:38.818
So if sets had curly braces,

25
00:01:38.818 --> 00:01:44.088
dictionaries have curly braces and
colons and

26
00:01:44.088 --> 00:01:51.669
that colon is how you differentiate
between the key and the value.

27
00:01:54.954 --> 00:01:58.079
If I wanted to create an empty dictionary,
how do I do that?

28
00:01:58.079 --> 00:01:59.108
We already saw that.

29
00:02:04.583 --> 00:02:07.971
&gt;&gt; Two curly braces
&gt;&gt; Just two curly braces.

30
00:02:07.971 --> 00:02:12.768
If I wanted to create
dictionaries with items in them,

31
00:02:12.768 --> 00:02:16.539
I would now have to define keys and
values.

32
00:02:16.539 --> 00:02:17.863
So.

33
00:02:17.863 --> 00:02:23.175
And separate them with commas.

34
00:02:23.175 --> 00:02:26.040
So the key is on the left
hand side of the colon,

35
00:02:26.040 --> 00:02:30.541
the value is on the right hand side
of the colon, separated with commas.

36
00:02:30.541 --> 00:02:35.384
And that has now given me a dictionary
with two key value pairs in it.

37
00:02:35.384 --> 00:02:40.076
I can go ahead and assign this to

38
00:02:40.076 --> 00:02:45.499
a variable and then check its type.

39
00:02:45.499 --> 00:02:49.419
And that will show me
that it is a dictionary.

40
00:02:49.419 --> 00:02:54.887
Now, dictionary keys need to be immutable.

41
00:02:54.887 --> 00:02:59.341
Dictionary values do not
have that same restriction.

42
00:02:59.341 --> 00:03:04.660
So you can say my_numbers

43
00:03:04.660 --> 00:03:08.770
are a dictionary and

44
00:03:08.770 --> 00:03:13.361
say, the key is one and

45
00:03:13.361 --> 00:03:18.210
the value is this list.

46
00:03:18.210 --> 00:03:21.120
That is totally fine.

47
00:03:21.120 --> 00:03:24.748
Because when I want to retrieve
this item from my dictionary,

48
00:03:24.748 --> 00:03:26.438
I'll be doing it by its key.

49
00:03:26.438 --> 00:03:30.524
[COUGH] Now, dictionaries,

50
00:03:30.524 --> 00:03:36.310
like sets do not have an order in my dict,

51
00:03:36.310 --> 00:03:41.940
there is no zeroeth item or first item.

52
00:03:41.940 --> 00:03:47.088
If I try to access the zeroeth item,
I'm going to get

53
00:03:47.088 --> 00:03:52.828
an error saying I expect to key and
that key does not exist.

54
00:03:52.828 --> 00:03:59.194
So to access items in a dictionary,
you use the square bracket notation but

55
00:03:59.194 --> 00:04:04.044
instead of providing an index
like you would with a list or

56
00:04:04.044 --> 00:04:07.090
tuple, you instead provide a key.

57
00:04:07.090 --> 00:04:15.588
And now that's going to get the value from
my dictionary that has the key of one.

58
00:04:15.588 --> 00:04:21.946
If I tried to get a value that
doesn't exist again, I got a keyError.

59
00:04:21.946 --> 00:04:27.637
If I wanted to get something
from my dictionary and

60
00:04:27.637 --> 00:04:33.599
not deal with an exception
that I then have to catch,

61
00:04:33.599 --> 00:04:38.067
I can use the get method and this will not

62
00:04:38.067 --> 00:04:42.838
throw an error if that key does not exist.

63
00:04:42.838 --> 00:04:50.356
The get method has a second optional
argument that is a default value.

64
00:04:50.356 --> 00:04:55.767
So I can say, if this key does not exist,
return this default instead.

65
00:04:58.132 --> 00:05:01.687
If I pass in a key here that does exist,
what will I see?

66
00:05:02.751 --> 00:05:03.782
Will I see default?

67
00:05:11.313 --> 00:05:14.194
No, I'm going to get back the number two,

68
00:05:14.194 --> 00:05:19.491
from my dict because that key exists,
therefore the default is not relevant.

69
00:05:19.491 --> 00:05:23.032
To add and remove items from dictionaries,

70
00:05:23.032 --> 00:05:28.679
you can use that same notation that
we used to update items and lists but

71
00:05:28.679 --> 00:05:33.959
instead of passing in a position,
you're going to pass in a key.

72
00:05:33.959 --> 00:05:38.629
So if I wanted to update
the dictionary at key two.

73
00:05:43.694 --> 00:05:46.235
I could use this notation.

74
00:05:46.235 --> 00:05:50.537
And now my dict has that very
silly long string in it.

75
00:05:50.537 --> 00:05:53.057
I could use the same notation for

76
00:05:53.057 --> 00:05:57.735
adding items to the dictionary
that don't already exist.

77
00:06:01.870 --> 00:06:05.867
And now I have a new key in there.

78
00:06:05.867 --> 00:06:11.249
Just like with sets, you could update, you
can call the update on a dictionary and

79
00:06:11.249 --> 00:06:16.633
pass in another dictionary and that will
combine the two dictionaries together.

80
00:06:16.633 --> 00:06:21.598
So whatever dictionary you're calling
the update on will be the one

81
00:06:21.598 --> 00:06:23.002
that is modified.

82
00:06:23.002 --> 00:06:28.639
You can have pretty complex dictionaries,

83
00:06:28.639 --> 00:06:34.893
remember a dictionary can
have a list as a value.

84
00:06:36.465 --> 00:06:42.346
Let's say this key is one and

85
00:06:42.346 --> 00:06:46.517
the value is a list.

86
00:06:46.517 --> 00:06:51.934
If I call my_nums and
pass in this key of one,

87
00:06:51.934 --> 00:06:55.510
I'm going to get back a list.

88
00:06:55.510 --> 00:06:57.791
I can call .append on a list,

89
00:06:57.791 --> 00:07:02.277
which means that I can just
chain these actions together.

90
00:07:02.277 --> 00:07:07.956
So if I know that this returns a list,

91
00:07:07.956 --> 00:07:12.168
I can call .append on it and

92
00:07:12.168 --> 00:07:19.510
append to this list just
like I normally would.

93
00:07:19.510 --> 00:07:24.973
Now, if I look at my dictionary, Oops!

94
00:07:24.973 --> 00:07:30.753
And I spell it correctly we'll see
that I have upended a list to my list.

95
00:07:30.753 --> 00:07:36.993
So dictionaries can get very complex,
the values in them can be objects.

96
00:07:36.993 --> 00:07:42.327
So know that when you look at
them you might have to break down

97
00:07:42.327 --> 00:07:48.191
which type is which in the value and
be mindful of, curly braces,

98
00:07:48.191 --> 00:07:53.972
parentheses, square brackets to
figure out what type is what.

99
00:07:53.972 --> 00:07:56.435
If you want to work with the.

100
00:08:00.644 --> 00:08:03.014
Values in a dictionary.

101
00:08:03.014 --> 00:08:05.894
There are three methods that
you need to know about.

102
00:08:05.894 --> 00:08:11.101
One is .keys,
that will get you all of the keys.

103
00:08:11.101 --> 00:08:16.366
One is .values,
that will get you all of the values but

104
00:08:16.366 --> 00:08:24.268
the most important one that you're going
to use most often Is my_dict.items and

105
00:08:24.268 --> 00:08:29.560
that's going to return all of the key and
value pairs.

106
00:08:29.560 --> 00:08:34.525
When you're going to try to loop over a
dictionary, you might expect that what is

107
00:08:34.525 --> 00:08:38.469
actually returned is going to be
the items the key value pairs but

108
00:08:38.469 --> 00:08:40.896
unfortunately, that is not correct.

109
00:08:40.896 --> 00:08:46.910
When you loop over a dictionary with
actually returned is just the keys.

110
00:08:46.910 --> 00:08:52.172
So something to be mindful of,
if you want to loop over a dictionary,

111
00:08:52.172 --> 00:08:56.890
which we'll look at later,
you want to make sure that you call

112
00:08:56.890 --> 00:09:00.920
.items on it to get both the key and
the value pairs.

113
00:09:00.920 --> 00:09:06.822
So just a quick thing about mutability,
the simple types in float,

114
00:09:06.822 --> 00:09:12.214
decimal, string, Boolean,
tuple, those are immutable.

115
00:09:12.214 --> 00:09:15.471
Lists, sets, dictionaries are mutable.

116
00:09:15.471 --> 00:09:20.295
So if you don't remember,
take a look at the mutability cheat sheet.

117
00:09:20.295 --> 00:09:25.022
For the time being, we are going to skip
over the practice for this chapter and

118
00:09:25.022 --> 00:09:27.290
go through it with the next chapter.

