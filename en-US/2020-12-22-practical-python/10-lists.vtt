WEBVTT

1
00:00:00.080 --> 00:00:02.712
So for lists, I included a very,

2
00:00:02.712 --> 00:00:09.030
very handy list cheat sheet in this
chapter where he talks about the use.

3
00:00:09.030 --> 00:00:16.220
I show you how to create lists,
I show you search methods, search speeds.

4
00:00:16.220 --> 00:00:17.111
So searching for

5
00:00:17.111 --> 00:00:21.910
an item in a list in Python is actually
quite slow because you have to check each.

6
00:00:21.910 --> 00:00:24.980
Value in it and some common methods.

7
00:00:24.980 --> 00:00:27.691
So, let's look at lists and practice.

8
00:00:31.521 --> 00:00:37.481
You can declare lists two different ways,
one is with these square bracket

9
00:00:37.481 --> 00:00:43.710
notation which is how you will
commonly see lists being declared.

10
00:00:43.710 --> 00:00:48.640
You can also declare them,here and
this has come back to bite me.

11
00:00:48.640 --> 00:00:53.300
You can also declare lists
by calling the constructor.

12
00:00:53.300 --> 00:00:56.800
I got this type error stir
object is not callable.

13
00:00:56.800 --> 00:01:00.920
That's because I declared
a variable names list.

14
00:01:00.920 --> 00:01:04.540
Earlier on in this program and
I forgot about it.

15
00:01:04.540 --> 00:01:09.409
So I'm going to exit my ripple and
restart it.

16
00:01:18.444 --> 00:01:23.195
Weird, it looks like start ripple
is just broken in my VS code.

17
00:01:23.195 --> 00:01:26.497
So I'm just going to
start it the normal way.

18
00:01:26.497 --> 00:01:30.039
Because I have my virtual environment
activated here, I can just type Python and

19
00:01:30.039 --> 00:01:32.447
it will bring up the right thing.

20
00:01:32.447 --> 00:01:35.567
So lists can be declared with
square bracket notation.

21
00:01:35.567 --> 00:01:41.160
They can also be declared by calling that
constructor, you're more likely to see.

22
00:01:41.160 --> 00:01:42.248
This notation,

23
00:01:42.248 --> 00:01:48.240
you'll only really spot this when you're
converting between different types.

24
00:01:48.240 --> 00:01:51.400
And again,
we can verify that type right there.

25
00:01:52.710 --> 00:01:57.079
Lists have values that
are separated by commas.

26
00:02:01.439 --> 00:02:06.330
And in order to close off the list, you'll
have to put that closing square bracket.

27
00:02:06.330 --> 00:02:11.630
If you forget it, especially in
the ripple, it's just gonna do that.

28
00:02:11.630 --> 00:02:15.056
And that means that Python is waiting for
input, it's waiting for

29
00:02:15.056 --> 00:02:16.850
you to close that list.

30
00:02:16.850 --> 00:02:21.990
So, as soon as you enter that closing
square bracket that it expects and

31
00:02:21.990 --> 00:02:27.140
you press enter that will that will
knock you out of that continuation.

32
00:02:28.420 --> 00:02:30.410
And let's take a look at names.

33
00:02:30.410 --> 00:02:32.870
We'll see here that we have a few values.

34
00:02:34.920 --> 00:02:40.350
There are some built in methods that
let you act on sequences like this.

35
00:02:40.350 --> 00:02:43.970
One that you'll see all
the time is called Len.

36
00:02:43.970 --> 00:02:46.220
That means give me
the length of the sequence.

37
00:02:47.790 --> 00:02:53.170
You can also access
things in lists by index.

38
00:02:53.170 --> 00:02:57.430
So python, like most programming
languages is zero indexed.

39
00:02:57.430 --> 00:03:01.785
So if I wanted the first
name in this list of names,

40
00:03:01.785 --> 00:03:06.520
I would ask for
name zero names one names, too.

41
00:03:06.520 --> 00:03:09.530
I have three items in my list.

42
00:03:09.530 --> 00:03:12.850
What error am I going to see when
I asked for names at index three?

43
00:03:16.978 --> 00:03:18.360
&gt;&gt; Out of bounds or whatever?

44
00:03:19.840 --> 00:03:24.269
&gt;&gt; Yeah, so I'm going to see index
error list index out of range.

45
00:03:28.096 --> 00:03:31.340
And that's because there is no
item at the third position.

46
00:03:33.650 --> 00:03:36.783
If you wanted to update an item in a list,
and

47
00:03:36.783 --> 00:03:40.849
you can update an item in a list
because a list is mutable,

48
00:03:40.849 --> 00:03:45.692
meaning that a list can be changed,
you can do that with the index.

49
00:03:45.692 --> 00:03:49.463
[SOUND] So

50
00:03:49.463 --> 00:03:54.127
now if I look at my list of names,
I'll see mark, Max and Jean.

51
00:03:59.077 --> 00:04:01.586
You might notice that in python,

52
00:04:01.586 --> 00:04:07.290
all of the items in the list don't
have to be declared on the same line.

53
00:04:07.290 --> 00:04:11.086
So you might notice this more when
you are working with long strings or

54
00:04:11.086 --> 00:04:12.920
large data types.

55
00:04:12.920 --> 00:04:17.726
So I can declare a list like this and
have the opening bracket and

56
00:04:17.726 --> 00:04:23.080
then the data on the repple
means it's expecting more input.

57
00:04:23.080 --> 00:04:24.759
So I can just separate them.

58
00:04:26.650 --> 00:04:28.370
These line by line.

59
00:04:28.370 --> 00:04:32.080
You'll notice here that trailing
commas on like JSON are allowed.

60
00:04:32.080 --> 00:04:36.280
And in fact, in Python, I would say
they're encouraged because they really

61
00:04:36.280 --> 00:04:38.830
help with diffs and version control.

62
00:04:38.830 --> 00:04:42.630
So I tend to always include the trailing
comma in my in my list definitions.

63
00:04:45.009 --> 00:04:48.281
Let's declare some lottery numbers.

64
00:04:56.920 --> 00:04:58.250
And let me fix that.

65
00:05:01.490 --> 00:05:02.910
Put an equal sign.

66
00:05:05.460 --> 00:05:06.590
There we go.

67
00:05:06.590 --> 00:05:09.790
So now I have a list of lottery numbers.

68
00:05:09.790 --> 00:05:16.429
If I wanted to, sort these temporarily,
I could call sorted on them.

69
00:05:21.790 --> 00:05:28.807
You'll see here though,
that my original list has not changed.

70
00:05:31.630 --> 00:05:33.816
I could also call sorted with reverse,

71
00:05:37.870 --> 00:05:43.277
As an argument and this will take

72
00:05:43.277 --> 00:05:48.699
the source and then reverse it.

73
00:05:48.699 --> 00:05:52.950
Again though, this list has not changed.

74
00:05:54.750 --> 00:06:00.530
If I did want to sort in a place,
I would have to call a method on the list.

75
00:06:04.020 --> 00:06:05.770
Called dot sort.

76
00:06:07.430 --> 00:06:10.483
Now if I take a look at my
lottery numbers variable,

77
00:06:10.483 --> 00:06:12.900
you'll see that it has in fact changed.

78
00:06:12.900 --> 00:06:20.690
So the difference here is that the sorted
is a built in and calling dot sort.

79
00:06:20.690 --> 00:06:23.550
I called that sort on the variable itself.

80
00:06:23.550 --> 00:06:28.945
That's what allowed it to be
changed in place.And, again,

81
00:06:28.945 --> 00:06:33.822
if you were curious about what
methods are available and

82
00:06:33.822 --> 00:06:37.452
list, you can always call dirt on list and

83
00:06:37.452 --> 00:06:41.704
then call help on any one
of these by saying help,

84
00:06:41.704 --> 00:06:47.306
let's say list dot count and
that will print out what the value or

85
00:06:47.306 --> 00:06:52.530
what this method does as well
as what arguments it expects.

86
00:06:54.530 --> 00:07:01.220
If you wanted to add items to a list,
you can call the append method on it,

87
00:07:07.279 --> 00:07:14.280
And pass in the new value and
that will impact, change the list.

88
00:07:16.790 --> 00:07:21.250
You can also insert items into
a list by passing in an index.

89
00:07:23.110 --> 00:07:27.128
I'm going to say index zero so

90
00:07:27.128 --> 00:07:34.530
inserted at the beginning of
the list oops dot insert.

91
00:07:36.640 --> 00:07:40.162
And then if I take a look at that,
remember zero is the position and

92
00:07:40.162 --> 00:07:44.134
fifty five is the value that I'm inserting
will say that it was inserted at

93
00:07:44.134 --> 00:07:45.630
the beginning of the list.

94
00:07:45.630 --> 00:07:50.510
&gt;&gt; Is there an equivalent to append
an insert doesn't mutate the list.

95
00:07:52.800 --> 00:07:58.370
&gt;&gt; You could concatenate
the list with a different one.

96
00:07:58.370 --> 00:08:00.350
And that would return a new list.

97
00:08:00.350 --> 00:08:05.127
So for example, let's say a list

98
00:08:05.127 --> 00:08:09.910
of with the number one and three.

99
00:08:11.420 --> 00:08:16.360
This will append create a will create
a new list with these values upended.

100
00:08:17.360 --> 00:08:21.900
But the original list will
not in fact be changed.

101
00:08:21.900 --> 00:08:26.459
If you wanted to see if
an item was in a list,

102
00:08:26.459 --> 00:08:31.529
you would use the in keyword and
this will either

103
00:08:31.529 --> 00:08:37.770
return true if the item is in the list or
false If it's not.

