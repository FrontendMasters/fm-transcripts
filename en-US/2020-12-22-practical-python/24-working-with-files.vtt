WEBVTT

1
00:00:00.141 --> 00:00:05.406
I'm not gonna dive into this too much, but
there are a few important concepts and

2
00:00:05.406 --> 00:00:08.589
syntax that I would like
you to be familiar with.

3
00:00:10.664 --> 00:00:16.195
When you work with files, there
are different modes for opening them,

4
00:00:16.195 --> 00:00:20.631
don't recognize them or
sorry, don't memorize them.

5
00:00:20.631 --> 00:00:25.616
Instead, check out this cheat sheet for
when you need it,

6
00:00:25.616 --> 00:00:29.902
and forget it,
it's kind of useless knowledge.

7
00:00:29.902 --> 00:00:36.138
The important one though, is r which is
open for reading, that is the default.

8
00:00:36.138 --> 00:00:42.379
So if you don't pass in a file mode
that's the one that it's going to be.

9
00:00:42.379 --> 00:00:46.980
There are other file modes like truncate,
open for

10
00:00:46.980 --> 00:00:51.905
writing, but
truncate the file there's a text mode.

11
00:00:51.905 --> 00:00:56.169
Generally, you'll probably
only be working with r or w or

12
00:00:56.169 --> 00:01:01.401
occasionally a, which means open this
file I would like to write to it.

13
00:01:01.401 --> 00:01:08.466
But if that file already exists, append to
the end of it instead of overwriting it.

14
00:01:08.466 --> 00:01:14.005
So opening a file in Python
looks something like this.

15
00:01:14.005 --> 00:01:15.578
You call open on it.

16
00:01:15.578 --> 00:01:19.596
Remember that will open a file
in read mode by default.

17
00:01:19.596 --> 00:01:26.876
If you want to open a file for writing but
replace any existing file use mode w or

18
00:01:26.876 --> 00:01:31.916
if you want to open a file for
reading and writing, but

19
00:01:31.916 --> 00:01:37.300
append to the end of a file if
it already exists use mode a.

20
00:01:37.300 --> 00:01:39.575
Now the thing about files is,

21
00:01:39.575 --> 00:01:45.035
you want to call close on any open file
that you have to release the handle

22
00:01:45.035 --> 00:01:49.959
that your program has on that file
back to the operating system.

23
00:01:49.959 --> 00:01:51.771
Otherwise you're locking it up.

24
00:01:51.771 --> 00:01:57.054
And if your program crashes
before you happen to call close,

25
00:01:57.054 --> 00:02:01.000
you might end up in some
pretty weird states.

26
00:02:01.000 --> 00:02:05.803
So Python has some shortcuts and
tax called a context manager.

27
00:02:05.803 --> 00:02:10.276
And a context manager is
like taking a block of code

28
00:02:10.276 --> 00:02:14.332
that depends on some resource,
like a file.

29
00:02:14.332 --> 00:02:18.595
And there's, some stuff that happens under

30
00:02:18.595 --> 00:02:23.530
the hood when you use this
syntax this keyword with,

31
00:02:23.530 --> 00:02:27.455
that will then close the file for you, and

32
00:02:27.455 --> 00:02:33.865
also take care of any cleanup if
this happens to throw an exception.

33
00:02:33.865 --> 00:02:37.481
So if you are familiar with
other programming languages,

34
00:02:37.481 --> 00:02:42.073
it's similar to a try and finally block
but it's a lot cleaner to look at.

35
00:02:42.073 --> 00:02:47.350
So you can think of context managers
as code that just automagically

36
00:02:47.350 --> 00:02:53.380
provisions a resource before your code
runs and then cleans it up afterward.

37
00:02:53.380 --> 00:02:58.820
And that open function that we saw
earlier that works as a context manager.

38
00:02:58.820 --> 00:03:02.374
And so opening a file can look like this.

39
00:03:02.374 --> 00:03:06.456
And then we don't have to call
close on that file every time and

40
00:03:06.456 --> 00:03:09.842
litter our code with open,
close, open, close.

41
00:03:09.842 --> 00:03:14.150
We can use this with keyword and know
that that closing is happening for us.

