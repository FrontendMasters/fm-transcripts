WEBVTT

1
00:00:00.950 --> 00:00:05.374
There are a few concepts here that
probably match what you might be

2
00:00:05.374 --> 00:00:09.399
familiar with,
object oriented programming language and

3
00:00:09.399 --> 00:00:12.310
whatever language that you already know.

4
00:00:13.450 --> 00:00:19.750
But an object can kind of be anything,
it can be variable a property, a class.

5
00:00:19.750 --> 00:00:22.920
Everything in Python is an object.

6
00:00:22.920 --> 00:00:26.410
And you can think of an object
kind of like a generic container.

7
00:00:26.410 --> 00:00:31.575
So, a list object might contain
a sequence of integer objects,

8
00:00:31.575 --> 00:00:34.454
along with some function objects.

9
00:00:34.454 --> 00:00:39.780
And the list could have lists in it.

10
00:00:39.780 --> 00:00:41.510
Everything in Python is an object.

11
00:00:41.510 --> 00:00:45.675
So everything that you might be
able to do with Python objects,

12
00:00:45.675 --> 00:00:50.076
you can do with any of these things
that are objects under the hood,

13
00:00:50.076 --> 00:00:53.789
which isn't necessarily
the case in other languages.

14
00:00:54.900 --> 00:00:58.670
Python really buys heavily into this
object oriented programming model.

15
00:01:00.470 --> 00:01:04.449
But that doesn't really mean that you
need to use object oriented programming

16
00:01:04.449 --> 00:01:05.360
in your own code.

17
00:01:06.820 --> 00:01:10.879
Python works perfectly well as
a procedural or a scripting language,

18
00:01:10.879 --> 00:01:15.510
where one command is just executed
one after the other like a recipe.

19
00:01:15.510 --> 00:01:18.946
But getting familiar with object
oriented programming will really help

20
00:01:18.946 --> 00:01:20.360
you level up as a programmer.

21
00:01:22.190 --> 00:01:24.460
So a little bit about classes.

22
00:01:25.730 --> 00:01:30.406
A really important concept for
you to be solid on is the difference

23
00:01:30.406 --> 00:01:34.480
between a class and
an instance of that class.

24
00:01:34.480 --> 00:01:41.876
So, for example, the number 42
is an instance of the class int,

25
00:01:41.876 --> 00:01:46.380
whereas int itself is the class object.

26
00:01:48.690 --> 00:01:54.052
Now, you can think of a class as
a type of something like a car,

27
00:01:54.052 --> 00:01:59.210
and then you can think of
an instance like a specific thing,

28
00:01:59.210 --> 00:02:04.410
such as my car the Subaru,
which is a type of car.

29
00:02:04.410 --> 00:02:07.620
Both classes and
instances can have variables and

30
00:02:07.620 --> 00:02:10.760
methods on them which is
a little bit confusing.

31
00:02:11.940 --> 00:02:15.233
Changing a variable on the class
is going to change what

32
00:02:15.233 --> 00:02:19.830
you get returned when you call
that variable from an instance.

33
00:02:19.830 --> 00:02:22.861
However, when you change
things on an instance,

34
00:02:22.861 --> 00:02:25.110
it does not affect the class itself.

35
00:02:26.280 --> 00:02:29.440
And we're gonna come back to
that concept in a second.

36
00:02:29.440 --> 00:02:35.017
But I want to cover the self keyword,
and you might have seen that

37
00:02:35.017 --> 00:02:41.750
peppered in to the examples of
python code that you've seen so far.

38
00:02:41.750 --> 00:02:47.478
Self is used inside of classes to refer
to abound instance of that variable or

39
00:02:47.478 --> 00:02:49.010
object.

40
00:02:49.010 --> 00:02:51.687
So if we have a class car, and

41
00:02:51.687 --> 00:02:56.940
we made a specific instance
of that class called my car.

42
00:02:58.290 --> 00:03:02.779
When we call the start
method here to see if

43
00:03:02.779 --> 00:03:07.540
that car runs,
we pass in the self keyword.

44
00:03:10.815 --> 00:03:16.466
So let's start a new
file named chapter_6.py.

45
00:03:16.466 --> 00:03:21.810
And you can just go ahead and copy all
of this code and paste it in there.

46
00:03:25.113 --> 00:03:27.526
Let's go ahead and run this.

47
00:03:27.526 --> 00:03:32.750
We should see some output here
it says my_car runs is true.

48
00:03:32.750 --> 00:03:36.140
And then my_car.start prints.

49
00:03:36.140 --> 00:03:37.262
My car is started.

50
00:03:41.770 --> 00:03:46.730
What happens if we set
my_car.runs to false?

51
00:03:52.694 --> 00:03:54.150
And run this again.

52
00:03:55.590 --> 00:03:58.040
We'll see that my car is broken.

53
00:04:00.140 --> 00:04:01.130
It's very sad.

54
00:04:03.200 --> 00:04:10.170
If we make a new instance of this and
say, my other car as a car,

55
00:04:10.170 --> 00:04:15.282
and if I print out my other car,
my other car,

56
00:04:30.402 --> 00:04:35.613
And around this We'll see that

57
00:04:37.825 --> 00:04:43.800
Oops, sorry, did not want to print that
out since this already does some printing.

58
00:04:44.870 --> 00:04:48.550
So let's run that again and
we'll see better results.

59
00:04:48.550 --> 00:04:51.650
We'll see that this car is broken.

60
00:04:51.650 --> 00:04:56.520
But my other car runs just fine.

61
00:04:56.520 --> 00:05:01.410
So when you change properties on an
instance, it only affects that instance.

62
00:05:02.520 --> 00:05:07.468
And in your Python code,
self refers to an instance.

63
00:05:10.170 --> 00:05:15.239
So, that means that self,
when we created that

64
00:05:15.239 --> 00:05:21.320
instance variable on my car,
when we called start on it,

65
00:05:21.320 --> 00:05:26.644
that self keyword told
the interpreter to look for

66
00:05:26.644 --> 00:05:31.358
an instance variable
in my car called runs.

67
00:05:31.358 --> 00:05:36.230
And when we called my other car.start,
it was attached to that other instance.

68
00:05:37.880 --> 00:05:42.446
All instance variables in these classes
are going to take self as their first

69
00:05:42.446 --> 00:05:43.170
argument.

70
00:05:45.200 --> 00:05:52.404
If we try to call start on the car class,
instead of on an instance.

71
00:05:52.404 --> 00:05:54.840
Let's see what happens.

72
00:06:02.034 --> 00:06:04.580
I'm going to get an error here.

73
00:06:04.580 --> 00:06:08.967
And it's gonna say that start is
missing one required positional

74
00:06:08.967 --> 00:06:11.150
argument called self.

75
00:06:11.150 --> 00:06:15.745
As you write Python code, I promise
that you will see this error over and

76
00:06:15.745 --> 00:06:19.170
over, so
might as well get familiar with it.

77
00:06:19.170 --> 00:06:25.670
That's because I'm trying to call this
method, which is a instance method.

78
00:06:25.670 --> 00:06:28.720
It's expecting an instance
on the class itself.

79
00:06:31.812 --> 00:06:33.479
And that does not work.

80
00:06:36.742 --> 00:06:39.320
Let's take a look at
the opposite scenario.

81
00:06:41.640 --> 00:06:48.520
If I have an instance here called my
other car, and I call my car.start.

82
00:06:48.520 --> 00:06:50.630
This should work just fine.

83
00:06:50.630 --> 00:06:57.124
If I remove this self keyword here,

84
00:06:57.124 --> 00:07:01.440
and comment this out.

85
00:07:01.440 --> 00:07:05.512
And I'm going to put
a stab here called pass,

86
00:07:05.512 --> 00:07:10.880
which makes this valid Python
code without anything in it.

87
00:07:10.880 --> 00:07:12.037
When I run this,

88
00:07:12.037 --> 00:07:17.950
I'm gonna see that start takes 0
positional arguments but 1 was given.

89
00:07:17.950 --> 00:07:21.550
So it's also an error that you'll
see quite a bit in Python.

90
00:07:21.550 --> 00:07:23.920
So make sure that you recognize it.

91
00:07:23.920 --> 00:07:28.650
This means that you are trying
to call a method on an instance.

92
00:07:28.650 --> 00:07:34.023
Which passes self to this method,
this class method

93
00:07:34.023 --> 00:07:40.020
under the hood, but
you forgot to include self here.

94
00:07:40.020 --> 00:07:44.471
So calling start on this instance
is passing in self under the hood,

95
00:07:44.471 --> 00:07:50.110
if you forget to provide it in the list of
arguments, you're going to see this error.

96
00:07:51.720 --> 00:07:54.824
So now that I've added self back in,
this should run just fine.

