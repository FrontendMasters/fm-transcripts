WEBVTT

1
00:00:00.160 --> 00:00:04.640
Cool, so
classes can have class methods on them.

2
00:00:04.640 --> 00:00:09.190
Those are methods that are shared among
all the instances of a certain type.

3
00:00:11.440 --> 00:00:16.281
They can be overwritten in
a specific instance or subclass.

4
00:00:16.281 --> 00:00:21.189
And in order to do that,
you have to add what's called

5
00:00:21.189 --> 00:00:26.318
an Annotation over that method,
called Class Method,

6
00:00:26.318 --> 00:00:31.570
to say that this method does
not expect an instance on it.

7
00:00:31.570 --> 00:00:38.689
Instead you get a variable called Class or
CLS or whatever you wanna call it,

8
00:00:38.689 --> 00:00:44.260
you should not name it CLASS
because that is a keyword.

9
00:00:44.260 --> 00:00:46.230
So you might see something like this.

10
00:00:46.230 --> 00:00:49.764
If you see this,
you might also see it called CLAZZ.

11
00:00:49.764 --> 00:00:53.230
Just so that it doesn't
override this keyword here.

12
00:00:54.500 --> 00:00:59.030
And this lets you access some of the
variables that are defined in the class.

13
00:00:59.030 --> 00:01:03.315
So now I can access CLS dot runs and
CLS dot number of wheels.

14
00:01:06.582 --> 00:01:12.250
So I know that all of my car CLSs
are going to have four wheels.

15
00:01:12.250 --> 00:01:16.270
And so this method can be shared
between all of the instances.

16
00:01:18.700 --> 00:01:23.300
We can though just override
that in our instance itself.

17
00:01:23.300 --> 00:01:27.850
If I make a new my car instance,
I can set number of wheels to six.

18
00:01:27.850 --> 00:01:30.220
That will only affect that one instance.

19
00:01:34.160 --> 00:01:38.891
Now, just like we used type on
the repr there are two more helper

20
00:01:38.891 --> 00:01:44.700
methods that you can give us is instance,
and is subclass to tell you.

21
00:01:44.700 --> 00:01:49.103
What if a particular variable is

22
00:01:49.103 --> 00:01:54.002
an instance of a particular class.

23
00:01:54.002 --> 00:01:59.000
So for example, let's try these out.

24
00:02:00.880 --> 00:02:06.597
I can ask Python,
find know the type of 42,

25
00:02:06.597 --> 00:02:12.313
and I know the type of string,
I can ask Python

26
00:02:12.313 --> 00:02:17.752
is instance 42 int and I should get true.

27
00:02:17.752 --> 00:02:23.672
Can I also ask is instance
the string hi int?

28
00:02:23.672 --> 00:02:30.130
No, is instance hi, str,
this will return true.

29
00:02:31.890 --> 00:02:36.075
And I can do the same thing for
the objects that I define.

30
00:02:39.723 --> 00:02:47.566
So here, Let's exit out of the repr.

31
00:02:49.882 --> 00:02:54.059
I can print out, is instance,

32
00:02:54.059 --> 00:02:58.879
my other car, car and run this, and

33
00:02:58.879 --> 00:03:03.140
we'll see that it is true.

34
00:03:03.140 --> 00:03:09.070
So if you need to investigate what's going
on with your objects or your instances.

35
00:03:09.070 --> 00:03:13.040
Is instance and is subclass will
help you figure out those answers.

36
00:03:16.160 --> 00:03:21.058
One other method I want to talk to
you about in classes is this optional

37
00:03:21.058 --> 00:03:23.510
magic method called init.

38
00:03:23.510 --> 00:03:25.998
We haven't talked about
magic methods just yet.

39
00:03:25.998 --> 00:03:33.960
Magic methods are defined by having
two underscores before and after them.

40
00:03:33.960 --> 00:03:40.050
That means that there's something special
about these functions, these methods.

41
00:03:40.050 --> 00:03:45.751
So in this case, Dunder init,
Dunder stands for double underscores,

42
00:03:45.751 --> 00:03:50.610
is going to get run when you
create an instance of that class.

43
00:03:51.770 --> 00:03:54.370
And you can do that Dunder init method.

44
00:03:55.440 --> 00:04:00.529
You can use that method to define
any scenarios or setup that you need

45
00:04:00.529 --> 00:04:06.330
when an instance is being created,
including setting instance variables,

46
00:04:06.330 --> 00:04:11.880
so that you can save what is passed
into that constructor to use for later.

47
00:04:14.190 --> 00:04:19.219
So let's copy this and take a look at it.

48
00:04:27.621 --> 00:04:34.890
This is the my car class just like we had
but I've added a Dunder init method here.

49
00:04:34.890 --> 00:04:40.860
Remember, it's axon an instance so
I need to pass in self first.

50
00:04:40.860 --> 00:04:44.210
I can also pass an in make inner model.

51
00:04:44.210 --> 00:04:46.300
These are required arguments.

52
00:04:46.300 --> 00:04:50.830
So if I don't pass these in,
instantiation will fail.

53
00:04:50.830 --> 00:04:55.870
Now, if I want to save
those values to use later.

54
00:04:55.870 --> 00:05:00.090
I need to save them on
the instance just like this.

55
00:05:00.090 --> 00:05:02.447
Once I save them on the instance,

56
00:05:02.447 --> 00:05:07.510
that means that I can use them later
on when I call other methods on them.

57
00:05:08.780 --> 00:05:14.114
So here when I call my car equals
car Ford and Thunderbird and

58
00:05:14.114 --> 00:05:21.491
I call start, I will print out that my
Ford Thunderbird is started vroom, vroom.

59
00:05:25.242 --> 00:05:28.510
There are other magic methods
that you might come across.

60
00:05:28.510 --> 00:05:31.950
One is Dunder str
the other is Dunder repr.

61
00:05:31.950 --> 00:05:38.300
These are two handy magic methods
that are useful for debugging.

62
00:05:38.300 --> 00:05:42.840
You can think of and
they both return a string.

63
00:05:42.840 --> 00:05:46.756
You can think of Dunder str
as the representation of your

64
00:05:46.756 --> 00:05:51.421
object that should be human readable,
something that you can pass

65
00:05:51.421 --> 00:05:56.189
back to the end user to let them
know how this object is represented.

66
00:05:56.189 --> 00:06:01.173
Whereas Dunder repr should return
the Python code that's maybe necessary

67
00:06:01.173 --> 00:06:03.280
to rebuild the object.

68
00:06:03.280 --> 00:06:06.244
So Dunder wrapper is used more for
under the hood,

69
00:06:06.244 --> 00:06:10.700
a representation for other programmers
a representation for debugging.

70
00:06:10.700 --> 00:06:12.699
And that's kind of the difference.

71
00:06:14.920 --> 00:06:21.184
If you take a look at what is returned
from datetime dot datetime dot now,

72
00:06:21.184 --> 00:06:26.980
which just creates a new object
with the current date and time.

73
00:06:26.980 --> 00:06:29.658
If you take a look at
the str representation,

74
00:06:29.658 --> 00:06:34.378
you'll see that there's a date and a time
stamp, if you take a look at the repr,

75
00:06:34.378 --> 00:06:38.350
it will let you know that this is a date,
time dot date time.

76
00:06:38.350 --> 00:06:42.517
And these are the arguments that you
would pass into that method in order

77
00:06:42.517 --> 00:06:43.500
to recreate it.

78
00:06:45.350 --> 00:06:47.110
These are just conventions.

79
00:06:47.110 --> 00:06:52.624
You don't have to follow them but
you will see these throughout Python code.

80
00:06:52.624 --> 00:06:57.920
Generally you do wanna have a str and
a repr in each of your classes.

81
00:07:00.260 --> 00:07:05.860
Know that you can also instantiate objects
in for loops or in list comprehension.

82
00:07:05.860 --> 00:07:08.610
So a lot of these concepts
are meant mix and match.

