WEBVTT

1
00:00:00.250 --> 00:00:04.469
So, Boolean Logic in Python.

2
00:00:04.469 --> 00:00:08.347
You might have heard this expression,
truthiness.

3
00:00:08.347 --> 00:00:13.245
Truthiness is figuring out what
expressions evaluate to true or

4
00:00:13.245 --> 00:00:14.610
false in Python.

5
00:00:14.610 --> 00:00:18.266
And that's going to help us
control the flow of our program.

6
00:00:20.839 --> 00:00:25.490
Now I have a little handy cheat sheet for
you here at the top.

7
00:00:25.490 --> 00:00:31.451
With integers, truthiness works a little
bit differently than you might expect.

8
00:00:31.451 --> 00:00:35.270
The truthiness of integers, 0 is false.

9
00:00:35.270 --> 00:00:40.899
All other numbers that have a value
are true, including negative numbers.

10
00:00:42.760 --> 00:00:48.123
For container types, like the list,
the tuple, the set, the dictionary.

11
00:00:48.123 --> 00:00:53.121
Empty containers evaluate to
false containers with items

12
00:00:53.121 --> 00:00:55.367
in them evaluate to true.

13
00:00:55.367 --> 00:01:01.352
Now the non or null type is always false.

14
00:01:01.352 --> 00:01:06.256
There are also keyword
arguments of true with

15
00:01:06.256 --> 00:01:10.393
a capital T and false with a capital F.

16
00:01:10.393 --> 00:01:15.538
Now, sometimes truthiness is pretty

17
00:01:15.538 --> 00:01:19.725
obvious is this true or false?

18
00:01:21.988 --> 00:01:24.315
It's True, right.

19
00:01:24.315 --> 00:01:29.202
If I tried it the reverse way,
that's False.

20
00:01:29.202 --> 00:01:34.038
You can always figure
out what truthiness your

21
00:01:34.038 --> 00:01:38.626
expression will have
by calling bool on it.

22
00:01:38.626 --> 00:01:43.011
And bool maps to the constructor for

23
00:01:43.011 --> 00:01:46.381
the built in True or False.

24
00:01:46.381 --> 00:01:52.353
So, I can call bool with 1 which is True,
bool with 0 which is False,

25
00:01:52.353 --> 00:01:56.931
but I can also pass in some
complex expressions here.

26
00:01:56.931 --> 00:02:01.030
And it will let me know what
the truthiness value of them is.

27
00:02:03.470 --> 00:02:09.554
So, calling bool on an empty list False,
putting some items into it is True.

28
00:02:14.363 --> 00:02:16.892
Bool of none type is always False.

29
00:02:19.780 --> 00:02:24.252
You can compare different items
in Python with less than,

30
00:02:24.252 --> 00:02:27.830
greater than, less than or equals.

31
00:02:27.830 --> 00:02:32.436
But there's also the double equals and
the not equals.

32
00:02:35.143 --> 00:02:39.927
So, double equals is equality.

33
00:02:39.927 --> 00:02:41.988
This is not equals.

34
00:02:46.592 --> 00:02:51.880
Equality for different container
types is a little bit interesting.

35
00:02:54.330 --> 00:03:00.035
So, equality for list will check for
the items in the list.

36
00:03:00.035 --> 00:03:08.388
So, let's say I have list1 and list2.

37
00:03:08.388 --> 00:03:13.758
If I call list1 equals list2,
I'm checking for equality of the contents.

38
00:03:13.758 --> 00:03:20.678
And I'm not asking,
is this the same exact list.

39
00:03:20.678 --> 00:03:23.898
If you do want to check for, hey,

40
00:03:23.898 --> 00:03:28.503
are these lists pointing
at the same variable?

41
00:03:28.503 --> 00:03:32.869
That is, you're gonna use
a different keyword called is,

42
00:03:32.869 --> 00:03:34.888
that checks for identity.

43
00:03:42.214 --> 00:03:45.407
Basically asking,
do these points the same place in memory?

44
00:03:52.532 --> 00:03:55.902
They don't,
they're stored at different variables.

45
00:03:55.902 --> 00:04:00.062
So, this is a little bit
of a more advanced topic.

46
00:04:00.062 --> 00:04:05.136
But the reason that I'm introducing it

47
00:04:05.136 --> 00:04:11.438
is because we have a lot
of keywords in Python that

48
00:04:11.438 --> 00:04:17.141
we've seen, like True and False and none.

49
00:04:17.141 --> 00:04:22.121
In order to check for
equality with these keywords,

50
00:04:22.121 --> 00:04:26.994
we want to use the is keyword to check for
identity.

51
00:04:26.994 --> 00:04:32.590
Do these things point to the same
place in memory and not with equality?

52
00:04:32.590 --> 00:04:38.107
This is especially handy with none

53
00:04:38.107 --> 00:04:45.152
because a empty list
can evaluate to False.

54
00:04:45.152 --> 00:04:50.364
So, if we want to
differentiate between non and

55
00:04:50.364 --> 00:04:55.329
an empty list,
we need to use the is keyword.

56
00:04:55.329 --> 00:05:01.359
And we can say x is none.

57
00:05:01.359 --> 00:05:02.594
And that is True.

58
00:05:05.260 --> 00:05:10.730
If I ask,
empty list is none that is False.

59
00:05:10.730 --> 00:05:15.284
So, if you need to differentiate between
the truthiness of a none value or

60
00:05:15.284 --> 00:05:19.332
something that has a false truthiness
like an empty list or zero.

61
00:05:19.332 --> 00:05:22.093
You're going to need to
use that is keyword.

62
00:05:29.710 --> 00:05:31.801
And same for True and False.

63
00:05:31.801 --> 00:05:36.293
So, don't do a equals True.

64
00:05:36.293 --> 00:05:42.481
If you want to know explicitly,
you can say a is True, oops.

65
00:05:45.364 --> 00:05:47.362
I would need to define that.

66
00:05:47.362 --> 00:05:49.731
And that will say True.

67
00:05:49.731 --> 00:05:55.067
So, the difference between equality and
identity.

68
00:05:55.067 --> 00:06:02.121
There's also the and, or and
not statements in Python.

69
00:06:02.121 --> 00:06:05.374
One of the great things about Python

70
00:06:05.374 --> 00:06:10.259
is that these statements
are just English keywords.

71
00:06:13.801 --> 00:06:18.238
And it kind of spells out like you would
type a sentence, for those of you who

72
00:06:18.238 --> 00:06:22.978
might come from Java, or another language,
you don't have to do these stuff.

73
00:06:25.962 --> 00:06:30.160
It's super hard to remember
when you're a beginner, so

74
00:06:30.160 --> 00:06:35.679
I think having these keywords definitely
helps out with learning Python.

75
00:06:35.679 --> 00:06:40.645
And let's say a equals True,
and b equals True,

76
00:06:40.645 --> 00:06:44.773
and means are both of these values True?

77
00:06:44.773 --> 00:06:46.907
Only return True when they're both True.

78
00:06:50.042 --> 00:06:54.512
If one of the values is False,
that will return False.

79
00:06:54.512 --> 00:07:01.264
Or means, are any of these values True so
True or False will return True,

80
00:07:01.264 --> 00:07:06.701
True and True will return True but
False or False is False.

81
00:07:09.261 --> 00:07:13.156
Not just negates what you already have.

82
00:07:13.156 --> 00:07:17.664
So, if a is True, then not a is False.

83
00:07:22.310 --> 00:07:25.851
And you can also use these
things in combination.

84
00:07:25.851 --> 00:07:30.543
And make sure that you maintain the order
that you want with parentheses.

85
00:07:30.543 --> 00:07:37.026
So, I can say True and True or
False and that will return True.

86
00:07:42.403 --> 00:07:46.709
We can then go ahead and
use these in if statements.

87
00:07:46.709 --> 00:07:52.492
So, if statements will only
run if the expression is True,

88
00:07:52.492 --> 00:07:55.625
not if the expression is False.

89
00:07:55.625 --> 00:08:00.547
To define if statements,
you just type the if keyword followed by

90
00:08:00.547 --> 00:08:04.135
an expression that evaluates to True or
False.

91
00:08:04.135 --> 00:08:08.602
If you're not sure if your expression
evaluates to True or False,

92
00:08:08.602 --> 00:08:10.370
you can pass it into bool.

93
00:08:10.370 --> 00:08:13.063
So, I can say if 3 is less than 5.

94
00:08:17.071 --> 00:08:21.034
And that will run because
my expression is True.

95
00:08:21.034 --> 00:08:24.799
If I try to do the same thing, but

96
00:08:24.799 --> 00:08:28.985
reverse the order, 3 is, sorry,

97
00:08:28.985 --> 00:08:34.720
I wanted to ask is 5 less than 3,
this is False.

98
00:08:34.720 --> 00:08:37.328
And so, this will never run.

99
00:08:42.971 --> 00:08:44.935
You can use and or not,

100
00:08:44.935 --> 00:08:50.122
all of those inside of
the expression in your if statement.

101
00:08:50.122 --> 00:08:54.502
So, if I have a is True and

102
00:08:54.502 --> 00:09:00.571
b equals False, I can say if not b.

103
00:09:00.571 --> 00:09:03.055
Will this print out Hi or not?

104
00:09:03.055 --> 00:09:08.700
It will, right, because b is False I've
now negated it in my if statement.

105
00:09:10.780 --> 00:09:14.319
You want to be mindful of if
statements and truthiness,

106
00:09:14.319 --> 00:09:18.172
all of those same things that
we talked about earlier apply.

107
00:09:18.172 --> 00:09:22.136
So, if I try to say,
if empty list print Hi,

108
00:09:22.136 --> 00:09:25.904
the truthiness of an empty list is False.

109
00:09:25.904 --> 00:09:28.502
And so nothing is going to happen.

110
00:09:28.502 --> 00:09:33.776
I can put some values in here and
then that will print Hi.

111
00:09:33.776 --> 00:09:40.043
Same for zero is False,
any number including negatives is true.

112
00:09:40.043 --> 00:09:47.015
And if I have a variable
like this b is empty list,

113
00:09:47.015 --> 00:09:51.958
I can just say if b print Hi, oops.

114
00:09:55.700 --> 00:09:58.455
So, pretty important Python syntax,

115
00:09:58.455 --> 00:10:04.053
I don't have to say if b is double equals
to emptying list or anything like that.

116
00:10:04.053 --> 00:10:09.822
Because what really matters is
the truthiness of the expression.

117
00:10:09.822 --> 00:10:15.676
So, that's a pretty important concept.

118
00:10:15.676 --> 00:10:22.990
We want to be mindful of not using that
double equals True in our if statements.

119
00:10:22.990 --> 00:10:29.634
So, I don't wanna say if b double
equals True don't do this.

120
00:10:29.634 --> 00:10:33.616
Print Hi, well it might work,

121
00:10:33.616 --> 00:10:38.219
that is not correct Python syntax.

122
00:10:42.300 --> 00:10:45.336
We can add an all statement
to our if statement and

123
00:10:45.336 --> 00:10:48.905
that will only run if the if
statement itself did not run.

124
00:10:48.905 --> 00:10:53.030
I Just wanna show you the syntax for
that in Python.

125
00:10:53.030 --> 00:11:00.293
So, if 5 is less than 3, print, Hi.

126
00:11:00.293 --> 00:11:05.371
Else goes right beneath that
if statement with a colon.

127
00:11:05.371 --> 00:11:07.562
There's no expression for else,

128
00:11:07.562 --> 00:11:11.045
because else only runs if
the if statement is not true.

129
00:11:11.045 --> 00:11:16.141
I also want to indent that.

130
00:11:16.141 --> 00:11:20.147
And now my else statement is going to run.

131
00:11:20.147 --> 00:11:25.208
&gt;&gt; I actually had a question on dicts,
is it possible to delete a key

132
00:11:25.208 --> 00:11:30.758
I saw instances of you overwriting one but
I wasn't sure if you could.

133
00:11:30.758 --> 00:11:36.561
&gt;&gt; Yes, you can delete a key from
a dictionary with the del keyword.

134
00:11:36.561 --> 00:11:40.023
You can also pop from a dictionary.

135
00:11:40.023 --> 00:11:45.582
So, let's quickly

136
00:11:45.582 --> 00:11:51.145
take a look at that.

137
00:11:56.032 --> 00:12:00.703
Oops, I need to use curly braces.

138
00:12:00.703 --> 00:12:06.811
So, my dictionary now
has these keys in it.

139
00:12:06.811 --> 00:12:10.593
And I can pass in which one to delete.

140
00:12:10.593 --> 00:12:14.992
I recommend not using this syntax
even though you might see it.

141
00:12:14.992 --> 00:12:20.322
I think it's kind of weird,
I prefer pop instead.

142
00:12:20.322 --> 00:12:27.942
Because pop also returns the value
of the key that you just deleted.

143
00:12:27.942 --> 00:12:34.837
And if you need to know more about pop,
you can look at help on dict.pop.

144
00:12:34.837 --> 00:12:36.958
You can also provide a defaults.

145
00:12:40.283 --> 00:12:44.101
&gt;&gt; So, you would have a default
one to pop that's kind of.

146
00:12:44.101 --> 00:12:47.638
&gt;&gt; Yeah,
&gt;&gt; The default would be what's returned by

147
00:12:47.638 --> 00:12:48.394
the pop.

148
00:12:48.394 --> 00:12:52.191
&gt;&gt; If the key is not found.

149
00:12:52.191 --> 00:12:58.317
So, kind of, if you don't wanna take that
extra step of checking for an exception.

150
00:12:58.317 --> 00:13:03.270
Because if I tried to delete
from my dictionary a key

151
00:13:03.270 --> 00:13:08.235
that does not exist,
I'm going to get a key error.

152
00:13:08.235 --> 00:13:12.892
So, if you don't want to do any extra
exception handling, you can use pop.

153
00:13:12.892 --> 00:13:14.751
And pass in a default.

154
00:13:16.843 --> 00:13:20.635
To return if that key isn't found
instead of throwing an exception.

155
00:13:23.092 --> 00:13:25.927
&gt;&gt; I have a question regarding, so

156
00:13:25.927 --> 00:13:30.862
I'm little confused about
the whole equals, equals.

157
00:13:30.862 --> 00:13:34.442
&gt;&gt; Yeah.
&gt;&gt; For example, I put this in the Zoom

158
00:13:34.442 --> 00:13:39.699
chat three is less than five equals,
equals to True.

159
00:13:39.699 --> 00:13:40.980
The value is False.

160
00:13:43.070 --> 00:13:47.514
&gt;&gt; Yeah, you don't want to
do that because generally,

161
00:13:47.514 --> 00:13:50.983
expressions have their own truthiness.

162
00:13:50.983 --> 00:13:58.033
And so, you don't have to use that double
equals to compare it to True or False.

163
00:13:58.033 --> 00:14:00.402
It just happens under the hood.

164
00:14:00.402 --> 00:14:06.360
And you can double check that by passing
an e-value, or an expression to bool.

165
00:14:08.585 --> 00:14:13.711
So, I can say if 3 is less than 5,
what's happening here is that

166
00:14:13.711 --> 00:14:19.695
Python is replacing this expression
with the result of this under the hood.

167
00:14:26.138 --> 00:14:29.799
&gt;&gt; Okay, I think I understand
why I don't have to do that.

168
00:14:29.799 --> 00:14:30.369
&gt;&gt; Mm-hm.

169
00:14:30.369 --> 00:14:36.106
&gt;&gt; But I don't think I
understand why the result seems

170
00:14:36.106 --> 00:14:41.324
to be countered to what
I believe it should be.

171
00:14:41.324 --> 00:14:43.323
&gt;&gt; I'm not 100% sure,

172
00:14:43.323 --> 00:14:49.325
because generally I know it's best
practice not to do this and so I don't.

173
00:14:49.325 --> 00:14:53.676
I think there's a weird order of
operations thing happening here,

174
00:14:53.676 --> 00:14:58.646
where this is getting evaluated first and
this is getting evaluated second.

175
00:14:58.646 --> 00:15:00.992
I think that's why it's returning False.

176
00:15:00.992 --> 00:15:05.380
So, it's saying is 5 equals to True or
False is 3 less than False.

177
00:15:05.380 --> 00:15:11.092
Remember False is actually a number,
False is 0 in Python.

178
00:15:11.092 --> 00:15:16.177
So, then this expression becomes
is 3 less than 0 which is False.

179
00:15:16.177 --> 00:15:18.240
So, you end up with
some weird subtle bugs.

