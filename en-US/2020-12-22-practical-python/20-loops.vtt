WEBVTT

1
00:00:00.940 --> 00:00:05.740
Now let's go back and talk about for
loops and range and enumerate and

2
00:00:05.740 --> 00:00:10.483
then we'll come back to the last
part of this exercise afterwards.

3
00:00:15.847 --> 00:00:20.514
So we are talking about loops.

4
00:00:20.514 --> 00:00:24.859
Loops in Python don't necessarily
look like they do in other

5
00:00:24.859 --> 00:00:26.743
programming languages.

6
00:00:26.743 --> 00:00:31.111
If you write JavaScript,
Java or some other languages,

7
00:00:31.111 --> 00:00:35.479
you might be used to loops
that look something like this,

8
00:00:35.479 --> 00:00:39.574
where you define a for,
you define a starting point,

9
00:00:39.574 --> 00:00:45.034
you define what number you're looping to,
and then define a condition

10
00:00:45.034 --> 00:00:50.143
that helps progress that starting
value to the ending condition.

11
00:00:50.143 --> 00:00:55.252
Looping in python is a lot simpler and
cleaner and actually

12
00:00:55.252 --> 00:01:01.717
a lot of other programming languages
have borrowed from Python syntax and

13
00:01:01.717 --> 00:01:06.838
now incorporate some of these
nicer looping structures.

14
00:01:06.838 --> 00:01:12.226
So in the past we had used this in
keyword to test if an item was inside

15
00:01:12.226 --> 00:01:18.193
of a sequence, but when we combine
the end keyboard with the for keyword in

16
00:01:18.193 --> 00:01:24.083
can be used to indicate that you
are looping over each item in a sequence.

17
00:01:24.083 --> 00:01:27.712
So the syntax for this is for
a single item, and

18
00:01:27.712 --> 00:01:32.090
that's gonna be a temporary variable name.

19
00:01:32.090 --> 00:01:37.052
In items, which is a sequence,
followed by a colon,

20
00:01:37.052 --> 00:01:44.129
you're gonna start a new line and then
indent under to loop in that for loop.

21
00:01:44.129 --> 00:01:48.112
And again, if you're in the repple,

22
00:01:48.112 --> 00:01:54.593
you'll need to press Enter again
in order to see the results.

23
00:01:56.044 --> 00:02:02.264
Instead, I'm going to make a new
Python file called loops.pi.

24
00:02:02.264 --> 00:02:03.640
And we can start up here.

25
00:02:06.240 --> 00:02:09.760
So if I exit my repple here and

26
00:02:09.760 --> 00:02:14.601
I run this Python file in the terminal,

27
00:02:14.601 --> 00:02:21.220
I will see the color is red,
green, blue and orange.

28
00:02:23.070 --> 00:02:26.641
And I'm printing out the value of color,

29
00:02:26.641 --> 00:02:30.424
which I define right
here inside of my loop.

30
00:02:41.343 --> 00:02:46.249
Something interesting that
I want to point out is

31
00:02:46.249 --> 00:02:51.522
that loops don't have
the same scope as functions.

32
00:02:51.522 --> 00:02:52.562
So here the for

33
00:02:52.562 --> 00:02:58.660
loop was updating the value of color
each time that we looped over the loop.

34
00:02:58.660 --> 00:03:04.031
When we are outside of the loop,
this variable color still exists.

35
00:03:08.952 --> 00:03:15.407
And the value of that variable is
the last value that was in the list.

36
00:03:15.407 --> 00:03:18.960
So something to be mindful of
when you're thinking about scope.

37
00:03:18.960 --> 00:03:24.301
There's also a range function that
lets you generate a range of numbers.

38
00:03:27.253 --> 00:03:31.226
You can pass in one value into it.

39
00:03:31.226 --> 00:03:36.184
If you want to see what is actually
generated, you're going to need to pass

40
00:03:36.184 --> 00:03:41.549
this range into a list because this is
what's called a generator type in Python.

41
00:03:41.549 --> 00:03:47.045
Python 2 used to be more inefficient in
Python 3, if you passed a large number

42
00:03:47.045 --> 00:03:52.128
in here, it's not going to create
a new data structure where the numbers

43
00:03:52.128 --> 00:03:56.910
from one to that very large number
are also stored in memory at once.

44
00:03:58.030 --> 00:04:04.037
So if you want to take a look at this,
let's pass it into the list constructor,

45
00:04:04.037 --> 00:04:08.512
and it would tell you what this
would generate all at once.

46
00:04:08.512 --> 00:04:13.342
But generally because you're going to be
using this range to loop over something,

47
00:04:13.342 --> 00:04:17.480
you don't necessarily have to
have that whole range in memory.

48
00:04:17.480 --> 00:04:21.248
You only care about what that value
is while you're in the loop and

49
00:04:21.248 --> 00:04:22.971
what the next value might be.

50
00:04:22.971 --> 00:04:26.280
And that's an optimization that
allows Python to save memory.

51
00:04:28.000 --> 00:04:30.533
You could also pass in two numbers,

52
00:04:30.533 --> 00:04:36.160
where this would be the starting point and
this would be the ending point.

53
00:04:36.160 --> 00:04:39.591
The ending point is not inclusive.

54
00:04:39.591 --> 00:04:44.617
So you can go ahead and
use range along with the for loop.

55
00:04:52.261 --> 00:04:55.870
And that will go ahead and
print out each item in this range.

56
00:04:58.891 --> 00:05:06.305
Now, if you need to get a handle on an
index, let's say that I have these colors.

57
00:05:08.351 --> 00:05:12.388
If you needed to print out
both the name of the color and

58
00:05:12.388 --> 00:05:17.799
the position that it was in,
don't go back to your old style for loops.

59
00:05:17.799 --> 00:05:22.511
You don't need to declare a variable to
keep track of i and then increment i and

60
00:05:22.511 --> 00:05:24.270
then print that out.

61
00:05:24.270 --> 00:05:29.538
There's a shortcut in Python for
that called enumerate, and

62
00:05:29.538 --> 00:05:36.236
the enumerate function, you pass it in
a list or set and it will return a tuple.

63
00:05:41.603 --> 00:05:46.130
So if we passed in the value
of enumerate to look at it.

64
00:05:47.860 --> 00:05:52.908
We'll see that it returns a list of
tuples where the first item is zero.

65
00:05:52.908 --> 00:05:59.130
So that's the index and the second item
is what was contained in our list.

66
00:05:59.130 --> 00:06:03.100
So this matches a position with a value.

67
00:06:03.100 --> 00:06:10.550
And then you can use that tuple unpacking
that we saw earlier, inside of a for loop.

68
00:06:10.550 --> 00:06:14.572
In order to get both of
these values at once.

69
00:06:14.572 --> 00:06:22.482
So I can say for
index color in enumerate colors and

70
00:06:22.482 --> 00:06:31.197
then I can print out the index,
And the color.

71
00:06:37.013 --> 00:06:41.425
Without having to keep track of
an i without incrementing it

72
00:06:41.425 --> 00:06:44.433
without creating any extra variables.

73
00:06:44.433 --> 00:06:49.255
The use of the enumerate function is
one of those things that differentiates

74
00:06:49.255 --> 00:06:54.078
beginners to Python, who don't
necessarily understand the core concepts

75
00:06:54.078 --> 00:06:58.773
like all of you do with programmers and
Python who are more intermediate.

76
00:06:58.773 --> 00:07:03.172
If I spot somebody using the enumerate
function, I know that they have

77
00:07:03.172 --> 00:07:07.276
a pretty good understanding of
what's going on under the hood and

78
00:07:07.276 --> 00:07:09.310
what pythonic code looks like.

79
00:07:12.050 --> 00:07:16.540
Now remember,
if we want to loop over a dictionary,

80
00:07:16.540 --> 00:07:23.720
we need to be mindful that by default,
a dictionary just gives us back the keys.

81
00:07:23.720 --> 00:07:27.989
So we need to explicitly asked for
both keys and values.

82
00:07:29.680 --> 00:07:38.950
So I'm going to grab this dictionary
right here with some hex colors.

83
00:07:38.950 --> 00:07:43.156
If I were going to loop over,

84
00:07:47.793 --> 00:07:51.864
This, I would just get the keys.

85
00:07:51.864 --> 00:07:55.791
If I wanted to loop over keys and
values at the same time,

86
00:07:55.791 --> 00:08:01.970
I would need to call hex_colors.items
to get back the keys and the values.

87
00:08:01.970 --> 00:08:02.758
And look,

88
00:08:02.758 --> 00:08:09.110
this is returning a list of tuples that
means that we can use tuple unpacking.

89
00:08:09.110 --> 00:08:15.662
So I can now say for
key comma value in hex_colors.items.

90
00:08:17.405 --> 00:08:23.156
Print the key, print something else and

91
00:08:23.156 --> 00:08:26.377
then print the value.

92
00:08:28.481 --> 00:08:34.026
So this is how I loop over both the key
and the value in a dictionary at once and

93
00:08:34.026 --> 00:08:38.603
use tuple unpacking to get the key
into a variable named key and

94
00:08:38.603 --> 00:08:44.341
the value into a variable name value, so
that I could then use them in my loop.

95
00:08:48.520 --> 00:08:52.028
Python also has while loops,
and for those,

96
00:08:52.028 --> 00:08:55.810
you will need to use some sort of counter.

97
00:08:55.810 --> 00:09:00.063
I'm not going to jump into while
loops because you all have some

98
00:09:00.063 --> 00:09:02.430
programming experience.

99
00:09:02.430 --> 00:09:07.384
And so I expect that while loops look
pretty similar to what they might in

100
00:09:07.384 --> 00:09:10.120
your programming language of choice.

101
00:09:11.560 --> 00:09:16.750
I will say that the syntax for
a while loops looks something like this.

102
00:09:16.750 --> 00:09:20.509
So I can say maybe Val = 0 and

103
00:09:20.509 --> 00:09:26.307
then say while Val &lt; 5,
print the value and

104
00:09:26.307 --> 00:09:30.539
then increase the value by one,

105
00:09:30.539 --> 00:09:36.026
either by saying Val equals now val+1 or

106
00:09:36.026 --> 00:09:38.722
saying Val+=1.

107
00:09:38.722 --> 00:09:42.350
And that will go ahead and
run a while loop.

108
00:09:43.490 --> 00:09:46.592
So for a while loops you just do while and

109
00:09:46.592 --> 00:09:50.352
an expression that evaluates to true or
false.

110
00:09:50.352 --> 00:09:55.268
When you're doing while loops,
make sure that you will eventually have

111
00:09:55.268 --> 00:10:00.280
a condition or this is false otherwise
your program will run for forever.

112
00:10:01.590 --> 00:10:04.197
If you need to short circuit your loop,

113
00:10:04.197 --> 00:10:08.120
you can use a return
statement to break out of it.

114
00:10:08.120 --> 00:10:12.925
So let's say I have some names.

115
00:10:18.884 --> 00:10:24.123
If I wanted to loop over these names and

116
00:10:24.123 --> 00:10:29.035
stop when I found the target value so

117
00:10:29.035 --> 00:10:33.637
I can say if name is equal to Stan.

118
00:10:40.122 --> 00:10:47.050
Oops, sorry,
what I wanted to say was that you

119
00:10:47.050 --> 00:10:52.566
would want to use this in a function.

120
00:10:52.566 --> 00:10:55.418
Let's do this a little bit differently.

121
00:10:55.418 --> 00:10:59.966
Let's save return_target and
pass in the name of a target.

122
00:11:02.882 --> 00:11:09.053
And now we could do the same for loop and
make sure that it is indented correctly.

123
00:11:16.138 --> 00:11:16.989
Oops, sorry.

124
00:11:21.995 --> 00:11:25.861
If name is equal to the target,

125
00:11:25.861 --> 00:11:30.038
we're going to return the name.

126
00:11:30.038 --> 00:11:32.544
Let me make sure that
is indented correctly.

127
00:11:36.215 --> 00:11:42.119
So now I can return target and
it will print Stan or

128
00:11:42.119 --> 00:11:45.874
I can make a new target of Nina.

129
00:11:45.874 --> 00:11:51.099
And once that target is found
the function will return.

130
00:11:51.099 --> 00:11:53.916
So that's a way of short
circuiting a loop,

131
00:11:53.916 --> 00:11:58.420
a different way of short circuiting
loops is with break and continue.

132
00:11:58.420 --> 00:12:02.210
Those are more advanced concepts
that I'm not going to cover but

133
00:12:02.210 --> 00:12:06.631
there is an optional chapter here in
the course website where you can follow

134
00:12:06.631 --> 00:12:07.630
through on those

