WEBVTT

1
00:00:00.400 --> 00:00:02.130
Hi and welcome back.

2
00:00:02.130 --> 00:00:08.490
We're going to go over the practice for
our basic data types, strings and numbers.

3
00:00:11.620 --> 00:00:19.228
Going back into our repple,
Let's go ahead and

4
00:00:19.228 --> 00:00:23.760
start that from scratch so that we don't
have any of the variables that we were.

5
00:00:23.760 --> 00:00:26.590
Using before making stuff up.

6
00:00:28.100 --> 00:00:31.116
So in Python, we have integers.

7
00:00:31.116 --> 00:00:37.402
And we have floats and
we have complex numbers and

8
00:00:37.402 --> 00:00:43.086
we can check the type on
all of those to verify

9
00:00:46.410 --> 00:00:49.218
We also have strings.

10
00:00:51.767 --> 00:00:54.009
And lists.

11
00:01:01.427 --> 00:01:04.660
And the types for those are as you expect.

12
00:01:04.660 --> 00:01:11.010
We used helper functions on the ripple
to help us diagnose, and solve problems.

13
00:01:11.010 --> 00:01:17.020
So, type will let us know
the type of variable or a value.

14
00:01:17.020 --> 00:01:22.065
We can also use dir, to figure out
what methods are available for

15
00:01:22.065 --> 00:01:23.939
that particular type.

16
00:01:25.060 --> 00:01:30.450
And we can use help to either
look at the help for that type or

17
00:01:30.450 --> 00:01:34.851
help is more useful when
you pass in the specific

18
00:01:34.851 --> 00:01:39.680
method that you would
like to know more about.

19
00:01:39.680 --> 00:01:44.636
So for example, Stir is upper will
tell me that this will return

20
00:01:44.636 --> 00:01:49.124
true if the string is uppercase and
false otherwise, and

21
00:01:49.124 --> 00:01:54.190
help will also give us some hints
as to what that method expects.

22
00:01:56.610 --> 00:02:01.500
Now, strings in Python
are delineated either with.

23
00:02:03.240 --> 00:02:08.536
Single quotes or double quotes,
but remember that

24
00:02:08.536 --> 00:02:14.580
the type of the quote has to match or
that is a syntax error.

25
00:02:17.220 --> 00:02:22.024
We can also pass in a string to print

26
00:02:24.145 --> 00:02:27.030
Or that's not a very good name.

27
00:02:27.030 --> 00:02:29.600
I'm going to change that
variable to be Nina.

28
00:02:30.900 --> 00:02:34.000
If I can pass in a variable name here,

29
00:02:34.000 --> 00:02:39.405
i can also pass in multiple
arguments to print for example name.

30
00:02:39.405 --> 00:02:43.714
And five and period and
that will print out all of

31
00:02:43.714 --> 00:02:48.580
the arguments that I pass
in with a space delineated.

32
00:02:50.530 --> 00:02:52.830
Now we also have F strings.

33
00:02:54.100 --> 00:02:55.820
They start with the letter F.

34
00:02:57.370 --> 00:03:02.350
And when we have brackets
in these F strings.

35
00:03:02.350 --> 00:03:05.340
We can put variables.

36
00:03:05.340 --> 00:03:10.648
So for example,
name somebody in chat was very astute and

37
00:03:10.648 --> 00:03:17.780
figured out that you can also put
any kinds of expressions in here.

38
00:03:17.780 --> 00:03:22.239
So let's say I had an expression
like this I can go ahead and

39
00:03:22.239 --> 00:03:25.340
just put that between the curly braces.

40
00:03:27.130 --> 00:03:29.362
So very useful shortcut.

41
00:03:32.733 --> 00:03:39.490
Let's say that I used that
upper method from before.

42
00:03:39.490 --> 00:03:41.910
To uppercase my string.

43
00:03:41.910 --> 00:03:45.342
Again, remember that this doesn't
actually change the value of the string,

44
00:03:45.342 --> 00:03:46.730
string is immutable.

45
00:03:46.730 --> 00:03:49.540
I could use that in
combination with an f string.

46
00:03:52.880 --> 00:03:55.700
By calling that method
inside of the string.

47
00:03:57.560 --> 00:04:01.680
And again, just using this for
output, not changing the value here.

48
00:04:03.190 --> 00:04:06.300
In Python, we also have lists.

49
00:04:06.300 --> 00:04:12.165
Remember, do not name your list,

50
00:04:12.165 --> 00:04:16.424
you'll have a bad time.

51
00:04:16.424 --> 00:04:20.660
As we saw earlier when I had a bad
time when I named a variable list and

52
00:04:20.660 --> 00:04:22.561
completely forgot about it.

53
00:04:22.561 --> 00:04:26.120
And then got weird syntax errors and
had to think about it.

54
00:04:27.680 --> 00:04:30.662
So if we have a list called my list

55
00:04:43.209 --> 00:04:45.230
I can check it out in the repple.

56
00:04:45.230 --> 00:04:49.674
I can ask for its length And

57
00:04:49.674 --> 00:04:54.120
I can append values to it.

58
00:05:00.686 --> 00:05:05.356
So append, because I'm calling
it on this list itself, and

59
00:05:05.356 --> 00:05:10.170
the list is mutable,
meaning the list can be changed.

60
00:05:10.170 --> 00:05:13.690
This is going to go ahead and
change my list in place.

61
00:05:15.020 --> 00:05:18.280
I can get values by index.

62
00:05:18.280 --> 00:05:20.289
Remember lists have a 0 index.

63
00:05:24.233 --> 00:05:27.460
And that will go ahead and
grab the individual items.

64
00:05:27.460 --> 00:05:29.020
I can change.

65
00:05:29.020 --> 00:05:32.550
Items in a list with assignment.

66
00:05:32.550 --> 00:05:35.391
So if I take a look at my list here,

67
00:05:35.391 --> 00:05:40.279
if I wanted to change the zero
value to get the zero value.

68
00:05:40.279 --> 00:05:43.670
I would just call that to change it,
I would make an assignment to it.

69
00:05:48.160 --> 00:05:54.564
And now I've modified my list If we
want to delete elements from a list.

70
00:05:54.564 --> 00:05:57.940
We could use the delete keyword.

71
00:05:57.940 --> 00:06:00.620
I would recommend not doing that.

72
00:06:00.620 --> 00:06:03.180
It's kind of confusing.

73
00:06:03.180 --> 00:06:07.930
So instead,
I would advise you to call pop and

74
00:06:07.930 --> 00:06:11.933
you can call pop with an index as well.

75
00:06:15.208 --> 00:06:21.010
So pop with no arguments just pop
that last item, off the list if

76
00:06:21.010 --> 00:06:27.048
I wanted to save it at this point,I
could assign it to a variable.

77
00:06:27.048 --> 00:06:31.220
And this operation has
in fact changed my list.

78
00:06:32.760 --> 00:06:35.820
I can also sort my list in two ways.

79
00:06:35.820 --> 00:06:40.590
The first is with the sorted keyword.

80
00:06:40.590 --> 00:06:45.110
The sorted keyword does not
change the value of the list.

81
00:06:46.310 --> 00:06:49.151
But if I call my list.sort because I'm

82
00:06:49.151 --> 00:06:52.605
taking that action on
a list which is a mutable.

83
00:06:52.605 --> 00:06:58.020
Type that's going to go ahead and
modify the values inside.

84
00:06:59.490 --> 00:07:04.520
Does anyone have any questions before we
move on to sets tuples and dictionaries.

