WEBVTT

1
00:00:00.390 --> 00:00:07.000
Let's talk about practice for loops, going
down to control statements and looping.

2
00:00:08.230 --> 00:00:13.642
We talked about if, else, and else if,
so when we have a statement like this,

3
00:00:13.642 --> 00:00:19.510
the if statement, we're gonna check and
see if the expression afterwards is true.

4
00:00:19.510 --> 00:00:22.061
If it is, we'll run this code,

5
00:00:22.061 --> 00:00:26.881
if there's an else if present and
the if statement is false,

6
00:00:26.881 --> 00:00:32.000
we will keep checking the else ifs
until we find one that is true.

7
00:00:33.600 --> 00:00:36.513
If there are no else ifs
with a true statement,

8
00:00:36.513 --> 00:00:40.110
then we will jump to the else and
go through the code here.

9
00:00:41.600 --> 00:00:46.073
So in this case,
when we call this on the number 5,

10
00:00:46.073 --> 00:00:51.070
we're gonna print out this
is a small number, for 99,

11
00:00:51.070 --> 00:00:57.046
we're gonna say, this,
This is a pretty small number as well.

12
00:00:57.046 --> 00:01:00.552
If it's exactly 100, we're gonna say,
this number is all right.

13
00:01:00.552 --> 00:01:03.976
And then for this number here,
we will jump to the else statement, and

14
00:01:03.976 --> 00:01:05.207
say this number is huge.

15
00:01:05.207 --> 00:01:09.865
We can also have multiple
conditions in an if statement.

16
00:01:09.865 --> 00:01:15.330
So here we're checking to see if
the number that is passed into fizzbuzz

17
00:01:15.330 --> 00:01:21.390
is both divisible by 3 and divisible by 5,
then we'll print fizzbuzz.

18
00:01:21.390 --> 00:01:27.084
So we print nothing for 3, nothing for
5, and then fizzbuzz for the number 15.

19
00:01:28.570 --> 00:01:32.460
We also can use if to test for
an empty list.

20
00:01:32.460 --> 00:01:35.309
So here, my function is expecting a list.

21
00:01:35.309 --> 00:01:39.655
Remember that an empty list is falsey and
resolves to false,

22
00:01:39.655 --> 00:01:44.270
while a list with values in it is
truthy and will resolve to true.

23
00:01:44.270 --> 00:01:49.168
So when I pass in a list with values,
this if statement will be valid and

24
00:01:49.168 --> 00:01:52.002
I'll jump down into this block of code.

25
00:01:52.002 --> 00:01:56.396
If I pass in an empty list,
I'm going to jump straight

26
00:01:56.396 --> 00:02:01.390
to the else statement here and
print out, got an empty list.

27
00:02:03.000 --> 00:02:07.621
We talked about some of those helper
functions, like the range and

28
00:02:07.621 --> 00:02:12.503
enumerate, we can use those in
conjunction with the for loop as well.

29
00:02:12.503 --> 00:02:17.846
If I have a list defined here, if I wanted
to go through all the values between 0 and

30
00:02:17.846 --> 00:02:22.240
2, I could write them out manually and
have a bad time of it.

31
00:02:22.240 --> 00:02:27.772
Or instead, I can use a shortcut of the
range function, passing a start of 0 and

32
00:02:27.772 --> 00:02:33.650
an end of 3, because that ending value
is not inclusive and do the same thing.

33
00:02:33.650 --> 00:02:38.103
The advantage of using range is that
there are some optimizations in play

34
00:02:38.103 --> 00:02:41.979
that mean I don't have to define
a list with all my values in it.

35
00:02:41.979 --> 00:02:46.851
Which is fine for my list of three items,
but starts to become more of an issue for

36
00:02:46.851 --> 00:02:49.200
large or complex lists.

37
00:02:49.200 --> 00:02:54.511
And lastly, if we wanted to loop over and
have both an index and

38
00:02:54.511 --> 00:03:00.045
the value at that index,
we want to use the enumerate function.

39
00:03:00.045 --> 00:03:04.320
And the enumerate function is a generator.

40
00:03:04.320 --> 00:03:07.868
But if you take a look at
what it's actually returning,

41
00:03:07.868 --> 00:03:10.067
it's returning a list of tuples.

42
00:03:10.067 --> 00:03:16.780
And the first item in that tuple is an
index, and the second is the item itself.

43
00:03:16.780 --> 00:03:20.987
So we can use tuple unpacking in our for
statement here and

44
00:03:20.987 --> 00:03:25.556
get back the index and
the item from enumerate all in one step.

45
00:03:25.556 --> 00:03:29.356
We can also use this to
loop over a dictionary.

46
00:03:29.356 --> 00:03:35.580
Remember, by default, if you loop over
a dictionary, you loop over just the keys.

47
00:03:35.580 --> 00:03:39.539
If you want both the keys and the values,

48
00:03:39.539 --> 00:03:45.599
you have to make sure that you
call the .items function on it.

49
00:03:45.599 --> 00:03:50.501
And when you do that, you also get
back a list of tuples with the first

50
00:03:50.501 --> 00:03:55.710
value being the key and
the second value being the value itself.

51
00:03:55.710 --> 00:03:59.690
So you can also use tuple unpacking
here to loop through both the key and

52
00:03:59.690 --> 00:04:01.251
the value at the same time.

53
00:04:03.734 --> 00:04:08.260
We can use return statements to break
out of functions and break out of loops,

54
00:04:08.260 --> 00:04:11.510
which is useful when you are looking for
a flag.

55
00:04:11.510 --> 00:04:14.346
And I'm not going to go over while loops,
but

56
00:04:14.346 --> 00:04:18.077
if you want to learn more about
while loops or nested loops,

57
00:04:18.077 --> 00:04:22.803
I recommend that you read the chapters
at practical.learnpython.dev.

58
00:04:22.803 --> 00:04:27.055
I also recommend that you check out
the optional chapter on break and

59
00:04:27.055 --> 00:04:31.977
continue on your own time, because those
are two concepts that tend to trip out

60
00:04:31.977 --> 00:04:35.709
folks who are beginners or
intermediate programmers, and

61
00:04:35.709 --> 00:04:39.610
they're important concepts for
you to have a solid grasp of.

