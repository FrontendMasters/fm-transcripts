WEBVTT

1
00:00:00.255 --> 00:00:05.082
We're gonna cover some advanced
looping techniques that you

2
00:00:05.082 --> 00:00:09.815
might see like list comprehensions,
how to convert between

3
00:00:09.815 --> 00:00:14.196
different types in Python,
and how to work with files.

4
00:00:14.196 --> 00:00:20.057
So, list comprehensions are one of
the more unique features of Python.

5
00:00:20.057 --> 00:00:24.192
And they're so
popular that other languages have

6
00:00:24.192 --> 00:00:29.024
also started implementing
list comprehensions as well.

7
00:00:29.024 --> 00:00:33.760
List comprehensions allow you to take what
would normally be quite a lot of code

8
00:00:33.760 --> 00:00:37.434
that is actually pretty common
while you're programming.

9
00:00:37.434 --> 00:00:44.485
Which is going through a list of items,
having a list of results,

10
00:00:44.485 --> 00:00:50.914
and then appending to your
results as you go through a list.

11
00:00:50.914 --> 00:00:55.731
So let's say that we wanted
to take a list of names and

12
00:00:55.731 --> 00:00:59.682
return a list of
the length of those names.

13
00:00:59.682 --> 00:01:04.148
And let's see what this would
look like in a Python ripple.

14
00:01:04.148 --> 00:01:09.930
Let's do this in a new file.

15
00:01:09.930 --> 00:01:15.486
And I'm gonna save this
as list comprehensions or

16
00:01:15.486 --> 00:01:20.117
list_commstop_ un, gonna go ahead and

17
00:01:20.117 --> 00:01:26.085
exit my repple and
then run this file in the terminal.

18
00:01:26.085 --> 00:01:31.721
So I have a list here 4,
3, 4, 5 that relates

19
00:01:31.721 --> 00:01:37.502
to the length of each of
these strings in the list.

20
00:01:37.502 --> 00:01:42.173
A list comprehension is going to
let us do the same thing in one

21
00:01:42.173 --> 00:01:44.658
line pretty simply and easily.

22
00:01:44.658 --> 00:01:50.721
So here I'm going to print
before followed by my list.

23
00:01:50.721 --> 00:01:56.574
[SOUND] And then,
I'm going to write my list comprehension.

24
00:01:56.574 --> 00:01:59.578
So a list comprehension,

25
00:01:59.578 --> 00:02:05.455
I find it easiest to write
kind of in reverse order.

26
00:02:05.455 --> 00:02:10.186
So I'm gonna start with the square
brackets because I know that I want

27
00:02:10.186 --> 00:02:14.854
a list comprehension and
square brackets are the syntax for lists.

28
00:02:14.854 --> 00:02:18.571
And then,
I'm gonna type in what I'm looping over.

29
00:02:18.571 --> 00:02:23.826
So I'm gonna type in for name in names.

30
00:02:23.826 --> 00:02:30.006
Once I do that, I'm gonna move my
cursor all the way to the left,

31
00:02:30.006 --> 00:02:34.709
[SOUND] to just after
the opening square bracket.

32
00:02:34.709 --> 00:02:39.704
This is where I type in what
result I want from looping

33
00:02:39.704 --> 00:02:44.941
over this set, or sorry,
looping over these values.

34
00:02:44.941 --> 00:02:48.582
In this case,
I want the length of names and

35
00:02:48.582 --> 00:02:53.350
that is a list comprehension,
it replaces all of this.

36
00:02:53.350 --> 00:02:59.331
And now, I can print out after and

37
00:02:59.331 --> 00:03:05.102
run this and get the same thing.

38
00:03:05.102 --> 00:03:09.753
So I can assign it to a variable as well.

39
00:03:14.926 --> 00:03:16.609
And get the same result.

40
00:03:16.609 --> 00:03:22.503
I think this is pretty clean and
readable and understandable.

41
00:03:22.503 --> 00:03:27.126
It is one of the things that folks who
are new to Python tend to trip over

42
00:03:27.126 --> 00:03:28.017
quite a bit.

43
00:03:28.017 --> 00:03:34.152
And the best way to get over that hump
is to just practice as much as possible.

44
00:03:34.152 --> 00:03:39.594
So typing in these exercises and
getting that muscle memory and I find that

45
00:03:39.594 --> 00:03:45.410
trick of writing my list comprehensions
in reverse really helps me remember.

46
00:03:45.410 --> 00:03:48.324
Okay, I need the square
brackets because it's a list.

47
00:03:48.324 --> 00:03:50.929
I need to figure out
what I'm looping over.

48
00:03:50.929 --> 00:03:56.045
And then, I need to figure out
what do I want to extract.

49
00:03:56.045 --> 00:03:58.678
In this case,
it's the length of the names.

50
00:04:00.404 --> 00:04:08.106
We can also have conditional statements
in these list comprehensions.

51
00:04:08.106 --> 00:04:13.109
If we want to add a condition, we move our
cursor all the way to the right-hand side,

52
00:04:13.109 --> 00:04:15.444
and that's where our condition goes.

53
00:04:15.444 --> 00:04:18.196
The condition is optional.

54
00:04:18.196 --> 00:04:20.938
And here you can type if, and

55
00:04:20.938 --> 00:04:26.208
an expression that either
evaluates to true or false.

56
00:04:26.208 --> 00:04:31.262
When the expression is true, that value
on the left-hand side will end up

57
00:04:31.262 --> 00:04:36.170
in the list comprehension,
if that expression is false, it will not.

58
00:04:36.170 --> 00:04:39.377
So if I want to only get the,

59
00:04:39.377 --> 00:04:44.397
let's say the names that have even numbers

60
00:04:44.397 --> 00:04:49.417
of characters, I can say, remove this and

61
00:04:49.417 --> 00:04:54.587
say what I actually want
is the name itself.

62
00:04:54.587 --> 00:04:58.324
And then, have a condition that says,

63
00:04:58.324 --> 00:05:03.421
if the length of the name
modular 2 means is the length

64
00:05:03.421 --> 00:05:08.537
of the name even equal to 0,
then put it in my_list.

65
00:05:08.537 --> 00:05:13.220
So now, when I run this,
I will only see the names

66
00:05:13.220 --> 00:05:17.116
that have an even number of characters.

67
00:05:17.116 --> 00:05:21.744
If I flip this condition and
say not equals, and

68
00:05:21.744 --> 00:05:26.256
run this,
then I will get the other two names,

69
00:05:26.256 --> 00:05:31.016
the ones that had the odd
numbers of characters.

70
00:05:31.016 --> 00:05:35.689
There are ways of moving between
different types in Python.

71
00:05:35.689 --> 00:05:37.274
One is split.

72
00:05:37.274 --> 00:05:42.518
So if you have a string that
is separated by commas, and

73
00:05:42.518 --> 00:05:47.657
you want to extract those values,
you can use split.

74
00:05:47.657 --> 00:05:50.144
So going back to the repple,

75
00:05:50.144 --> 00:05:54.920
if I have a name string that
looks something like this.

76
00:06:00.693 --> 00:06:05.594
You might see something like this in a CSV
file, if you ever worked with those.

77
00:06:05.594 --> 00:06:11.856
If you want to get a list of
names out of this string,

78
00:06:11.856 --> 00:06:16.663
you can call the .split method on it and

79
00:06:16.663 --> 00:06:21.919
pass in the token that
you want to split on.

80
00:06:21.919 --> 00:06:25.252
If you have spaces in between those names,

81
00:06:25.252 --> 00:06:30.726
then you would need to pass in a token
that is a comma and a space as well.

82
00:06:30.726 --> 00:06:33.743
So, this is one very quick and

83
00:06:33.743 --> 00:06:38.467
easy way of moving between a string and
a list.

84
00:06:38.467 --> 00:06:45.088
If you then wanted to save
these values in a CSV file.

85
00:06:45.088 --> 00:06:51.028
So in this case,
I have not modified my name string.

86
00:06:51.028 --> 00:06:53.265
Remember, strings are immutable.

87
00:06:53.265 --> 00:06:57.546
So let's say I call this a names list.

88
00:06:57.546 --> 00:07:02.072
And I said name_strings.split on common.

89
00:07:02.072 --> 00:07:08.674
Now, I have a list If I wanted
to get that back into a string,

90
00:07:08.674 --> 00:07:13.175
I can call the .join method on a string.

91
00:07:13.175 --> 00:07:16.792
In this case,
it's gonna look a little funky.

92
00:07:16.792 --> 00:07:21.240
I'm gonna use space and then a dash and

93
00:07:21.240 --> 00:07:25.553
a space, and I'm gonna say .join.

94
00:07:25.553 --> 00:07:30.592
With my names list, and that's going to

95
00:07:30.592 --> 00:07:35.791
return a string that has this delimiter.

96
00:07:35.791 --> 00:07:42.432
You can also use this string joining
with a list comprehension as well.

97
00:07:42.432 --> 00:07:47.104
So let's say that, I wanted to

98
00:07:47.104 --> 00:07:52.690
multiply each number in a list by 2.

99
00:07:58.994 --> 00:08:03.933
I could use a list comprehension for
that and

100
00:08:03.933 --> 00:08:08.738
say for num in my_nums, and move my cursor

101
00:08:08.738 --> 00:08:13.697
all the way to the left side and
say num * 2.

102
00:08:13.697 --> 00:08:17.602
That's going to be a list comprehension.

103
00:08:17.602 --> 00:08:25.493
I can call .join with
this list comprehension,

104
00:08:25.493 --> 00:08:30.887
sorry, that did not copy right.

105
00:08:30.887 --> 00:08:35.930
I can call .join with this
list comprehension here,

106
00:08:35.930 --> 00:08:39.636
and it will accomplish the same thing.

107
00:08:39.636 --> 00:08:46.094
Oops, sorry,
I need to convert this into a string.

108
00:08:46.094 --> 00:08:48.029
Yep.

109
00:08:48.029 --> 00:08:54.380
So moving between types in
Python is really quite simple.

110
00:08:54.380 --> 00:08:59.025
And if any of you have done any
coding challenges like the advent of

111
00:08:59.025 --> 00:09:00.208
code calendar,

112
00:09:00.208 --> 00:09:05.367
you'll find that a lot of programmers
who do that will reach for Python.

113
00:09:05.367 --> 00:09:10.192
Because moving between types is so
simple and straightforward, and

114
00:09:10.192 --> 00:09:14.949
that's not necessarily the case
in other programming languages.

115
00:09:14.949 --> 00:09:18.051
There are other kinds of comprehensions,

116
00:09:18.051 --> 00:09:22.279
like dictionary comprehensions,
set comprehensions.

117
00:09:22.279 --> 00:09:26.163
I'm not going to talk about
those during this course.

118
00:09:26.163 --> 00:09:31.969
There is a chapter available in the course
website that you can read on your own,

119
00:09:31.969 --> 00:09:35.012
and there is practice available as well.

120
00:09:35.012 --> 00:09:40.960
What I do want to chat
about though is generators.

121
00:09:40.960 --> 00:09:43.573
Generator expressions are, well,

122
00:09:43.573 --> 00:09:47.795
we've already seen some of
those generator expressions.

123
00:09:47.795 --> 00:09:52.892
Like when we tried to call range,
we didn't just get back a full list of all

124
00:09:52.892 --> 00:09:58.834
the numbers that range generated, instead
we got back a different kind of function.

125
00:09:58.834 --> 00:10:02.113
So a generator is a more advanced concept.

126
00:10:02.113 --> 00:10:07.964
It's like an object that you're
able to iterate over like a list.

127
00:10:07.964 --> 00:10:13.235
But unlike a list, a generator
only knows about where it is now,

128
00:10:13.235 --> 00:10:15.688
and how to get the next value.

129
00:10:15.688 --> 00:10:20.208
And it does that on demand without
generating that list of values all

130
00:10:20.208 --> 00:10:20.852
at once.

131
00:10:20.852 --> 00:10:26.010
So a generator comprehension does
look a lot like a list comprehension,

132
00:10:26.010 --> 00:10:30.674
except it uses a single pair of
parentheses instead of brackets.

133
00:10:30.674 --> 00:10:34.918
So here's a list comprehension

134
00:10:34.918 --> 00:10:39.480
where we are generating squares.

135
00:10:42.025 --> 00:10:47.271
For every number under 10
if that number is even,

136
00:10:47.271 --> 00:10:52.519
I could change this to
a generator comprehension by

137
00:10:52.519 --> 00:10:57.656
changing these square
brackets to parentheses.

138
00:10:57.656 --> 00:11:01.218
If I check the type of my
list comprehension, sorry,

139
00:11:01.218 --> 00:11:04.630
I'm gonna call this my
generator comprehension.

140
00:11:04.630 --> 00:11:09.778
If I check the tape of my generator
comprehension, we'll see that it

141
00:11:09.778 --> 00:11:15.394
is a generator and if I try to look at it,
it's going to come back with that.

142
00:11:15.394 --> 00:11:20.375
If I wanted to see what was in this
generator, I could call list on it.

143
00:11:20.375 --> 00:11:25.195
But generally, when you are using
a generator, you don't have a need to have

144
00:11:25.195 --> 00:11:29.211
all of those numbers or values or
whatever in memory all at once.

145
00:11:29.211 --> 00:11:33.237
Instead, you probably want to loop
through them and do something with them.

146
00:11:33.237 --> 00:11:38.637
So I can loop over every item
in this generator comprehension.

147
00:11:40.071 --> 00:11:42.162
And print it out.

148
00:11:42.162 --> 00:11:47.621
And I can do that just
like I would with a list,

149
00:11:47.621 --> 00:11:50.798
that syntax is seamless.

150
00:11:50.798 --> 00:11:55.132
The thing about generators though,
is that once you use the generator,

151
00:11:55.132 --> 00:11:57.205
again it doesn't have any state.

152
00:11:57.205 --> 00:11:59.174
It's not stored in memory.

153
00:11:59.174 --> 00:12:04.564
So once you loop over all these items,
the generator is exhausted.

154
00:12:04.564 --> 00:12:09.273
It doesn't know how to get back to
whatever state it was in beforehand.

155
00:12:09.273 --> 00:12:16.830
So if I try to loop over this again,
I'm not going to get anything back.

156
00:12:16.830 --> 00:12:20.657
I've used up my generator and
if I want to use it again,

157
00:12:20.657 --> 00:12:23.833
I have to recreate it and
start from scratch.

158
00:12:25.681 --> 00:12:31.393
So as Python has migrated to Python 3,
a lot more of these internal

159
00:12:31.393 --> 00:12:37.109
structures have moved over to
be generators or generator-like.

160
00:12:37.109 --> 00:12:41.739
And even though this is a more advanced
concept, it's really important to know

161
00:12:41.739 --> 00:12:46.039
about because of those optimizations
that have happened over the years.

