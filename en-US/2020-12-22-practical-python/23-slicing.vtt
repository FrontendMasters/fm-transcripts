WEBVTT

1
00:00:00.100 --> 00:00:06.683
Slicing in Python is an easy way to
create sub lists from larger lists.

2
00:00:06.683 --> 00:00:11.780
So we saw how easy it is
to access an item by index.

3
00:00:14.230 --> 00:00:21.064
We can also ask for
a range at an index with splicing.

4
00:00:21.064 --> 00:00:27.940
So let's say I had a string here.

5
00:00:27.940 --> 00:00:34.910
If I got the value at 0,
that would just be the letter H.

6
00:00:36.910 --> 00:00:42.134
I can ask for a slice of the string
by passing in the starting point,

7
00:00:42.134 --> 00:00:45.970
followed by a colon, and
then the ending point.

8
00:00:47.650 --> 00:00:53.200
So that's just going to return
everything from index 7 and onwards.

9
00:00:53.200 --> 00:00:58.350
You can also do lopsided slicing.

10
00:00:58.350 --> 00:01:02.956
So if this first value was not present,

11
00:01:02.956 --> 00:01:07.430
that is a shortcut saying start at 0.

12
00:01:11.800 --> 00:01:17.480
If we have a value on the left-hand side,
but not on the right-hand side.

13
00:01:17.480 --> 00:01:19.770
That's a shortcut that says,

14
00:01:19.770 --> 00:01:24.450
go all the way to the end of the string or
the end of the sequence.

15
00:01:26.380 --> 00:01:30.653
So that's a little bit of shortcut
syntax that you might see.

16
00:01:30.653 --> 00:01:35.720
If you quickly want to create
a full copy of a string or

17
00:01:35.720 --> 00:01:41.070
a list, you can omit both the start and
the end.

18
00:01:41.070 --> 00:01:45.130
And that will return just a full
copy from the beginning to the end.

19
00:01:47.100 --> 00:01:50.520
You can also have negative indexing.

20
00:01:50.520 --> 00:01:55.706
So if I wanted just the last character,
I could pass in

21
00:01:55.706 --> 00:02:00.792
negative 1 and that says,
go back one from the end.

22
00:02:00.792 --> 00:02:05.950
You can also do a little bit of
reversing here with negative indexing.

23
00:02:05.950 --> 00:02:11.223
So I can say from negative
10 to negative 7,

24
00:02:11.223 --> 00:02:16.094
and that will get the values from the 10th

25
00:02:16.094 --> 00:02:21.730
index from last to
the 7th index from last.

26
00:02:21.730 --> 00:02:25.624
If I switched the order of these, oops,

27
00:02:25.624 --> 00:02:29.960
then you would not see anything at all.

28
00:02:29.960 --> 00:02:34.190
Because that's asking for
a slice that doesn't exist.

29
00:02:34.190 --> 00:02:39.310
You can also pass in a stride or
a step as well.

30
00:02:39.310 --> 00:02:44.370
That will be a optional
third argument here.

31
00:02:44.370 --> 00:02:46.200
I'm not going to cover it.

32
00:02:46.200 --> 00:02:51.029
You generally won't see it too much
out there in code in the wild, but

33
00:02:51.029 --> 00:02:53.785
in case you do you know what to look for.

34
00:02:53.785 --> 00:02:58.831
There's another optional exercise
on the zip function that lets you

35
00:02:58.831 --> 00:03:03.790
take two different lists and
combine them together to form some data

36
00:03:03.790 --> 00:03:09.470
structures that might help you
translate into a dictionary if needed.

37
00:03:09.470 --> 00:03:13.920
Some more advanced concept if that's
something that you find interesting,

38
00:03:13.920 --> 00:03:16.596
I recommend going back and
checking that out.

39
00:03:16.596 --> 00:03:18.856
But we're gonna talk
about working with files.

