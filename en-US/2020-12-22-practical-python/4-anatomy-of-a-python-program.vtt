WEBVTT

1
00:00:00.020 --> 00:00:04.979
Now that you know all about Python,
you know how to set up your environment,

2
00:00:04.979 --> 00:00:08.951
I'm gonna quickly show you
the anatomy of a Python program.

3
00:00:08.951 --> 00:00:11.730
Note that you don't need
to understand everything

4
00:00:11.730 --> 00:00:13.675
that's happening in the program.

5
00:00:13.675 --> 00:00:15.406
So don't worry, don't panic.

6
00:00:15.406 --> 00:00:19.121
You're gonna understand all of the
concepts throughout the course of the day.

7
00:00:19.121 --> 00:00:23.225
But I wanna show you what some typical
Python code might look like and

8
00:00:23.225 --> 00:00:26.342
what it does and
break it down into pieces.

9
00:00:26.342 --> 00:00:32.096
So here I have a Python program for
using the GitHub Search API.

10
00:00:32.096 --> 00:00:35.490
And I'm gonna open this up in my editor so
that I can walk you through it,

11
00:00:35.490 --> 00:00:37.882
and I'm gonna run it and
we'll see some results.

12
00:00:49.725 --> 00:00:53.277
So first line I'm importing requests.

13
00:00:53.277 --> 00:00:58.423
This is a package import in this case
requests is a third party package that

14
00:00:58.423 --> 00:01:03.984
I would need to install in my virtual
environment before running this program,

15
00:01:03.984 --> 00:01:07.642
since it's not included
in Python status library.

16
00:01:07.642 --> 00:01:12.457
Then I'm going ahead and
defining a GITHUB_API_URL.

17
00:01:12.457 --> 00:01:15.236
So, what this piece of
code is going to do is,

18
00:01:15.236 --> 00:01:18.251
it's going to use the public
GitHub search API.

19
00:01:18.251 --> 00:01:22.197
And it's gonna pass an e-query asking for

20
00:01:22.197 --> 00:01:29.661
repositories in particular languages that
have more than a set number of stars.

21
00:01:31.769 --> 00:01:36.829
These are methods and you can tell
because they have the def keyword

22
00:01:36.829 --> 00:01:41.900
in front of them and some code that
is indented to the right of them.

23
00:01:41.900 --> 00:01:45.810
But for the time being,
I'm gonna scroll all the way down.

24
00:01:45.810 --> 00:01:48.773
And this code is only 40 lines.

25
00:01:48.773 --> 00:01:53.531
So once you start getting more familiar
in Python, you'll have no trouble

26
00:01:53.531 --> 00:01:57.770
reading this line by line and
understanding exactly what it does.

27
00:01:57.770 --> 00:02:00.826
But the thing that I'm scrolling
down to is on line 30.

28
00:02:00.826 --> 00:02:05.674
And it says, if __name__ is equal to

29
00:02:05.674 --> 00:02:10.530
__ main in quotes, that's a string.

30
00:02:10.530 --> 00:02:16.492
This is how Python knows whether
the main method is being run.

31
00:02:16.492 --> 00:02:20.640
So when we start a Python
program from the command line,

32
00:02:20.640 --> 00:02:23.476
this is going to be the point of entry.

33
00:02:25.093 --> 00:02:27.434
Here I'm defining a list.

34
00:02:27.434 --> 00:02:31.591
And this is a list of what languages
I would like to query for.

35
00:02:31.591 --> 00:02:35.503
In this case, it's Python,
JavaScript and Ruby.

36
00:02:35.503 --> 00:02:40.275
And then I'm calling
a method that is defined in

37
00:02:40.275 --> 00:02:44.343
this file called repos with most stars.

38
00:02:44.343 --> 00:02:49.202
And I'm passing in the list
of languages as an argument.

39
00:02:49.202 --> 00:02:53.147
Now in VS code,
I can in Mac Command click or

40
00:02:53.147 --> 00:02:57.321
in Windows+ Ctrl, click on to this method.

41
00:02:57.321 --> 00:03:01.189
And it will automatically jump and
bring me straight to it in the code.

42
00:03:03.866 --> 00:03:06.629
This method is defined in line 16.

43
00:03:06.629 --> 00:03:11.359
So first I am creating a query
with that list of languages.

44
00:03:11.359 --> 00:03:15.750
Create query is another method
that I've defined in this file.

45
00:03:15.750 --> 00:03:17.845
Let's jump up to that.

46
00:03:17.845 --> 00:03:23.662
This one takes a list of languages and
a second argument.

47
00:03:23.662 --> 00:03:29.279
Here I'm providing a default value
of 60,000 as the second argument.

48
00:03:29.279 --> 00:03:36.372
So if that second argument is not
provided, it's going to use the default.

49
00:03:36.372 --> 00:03:40.132
Then I'm going to build up my query.

50
00:03:40.132 --> 00:03:43.442
This is something called
an F string in Python or

51
00:03:43.442 --> 00:03:45.941
a string with built in formatting.

52
00:03:45.941 --> 00:03:53.940
And this allows me to provide a variable
inside of curly braces, just like this.

53
00:03:53.940 --> 00:03:58.864
And the representation of that variable
is going to get inserted right

54
00:03:58.864 --> 00:04:00.122
into the string.

55
00:04:00.122 --> 00:04:02.451
So I start building my base query and

56
00:04:02.451 --> 00:04:06.920
then I loop through every language
in the list of languages.

57
00:04:06.920 --> 00:04:12.734
And I append onto my query
a string that looks like this.

58
00:04:12.734 --> 00:04:17.518
So a sample query that might
be generated from this method

59
00:04:17.518 --> 00:04:20.617
looks like this comment right here.

60
00:04:20.617 --> 00:04:23.053
Stars colon greater than 50,

61
00:04:23.053 --> 00:04:27.481
language colon Python space
language colon JavaScript.

62
00:04:27.481 --> 00:04:33.813
This is syntax that the GitHub Search API
expects as part of a query.

63
00:04:33.813 --> 00:04:37.911
And then it returns the built up query.

64
00:04:37.911 --> 00:04:42.189
Now we're back in the repos
with most stars method.

65
00:04:43.931 --> 00:04:49.285
I'm going to build a dictionary that's
defined with these curly braces.

66
00:04:49.285 --> 00:04:57.721
The first entry in this dictionary has
a key of Q and the value of query.

67
00:04:57.721 --> 00:05:03.312
A key of sort, that is going to be
in this case the default value,

68
00:05:03.312 --> 00:05:06.328
which sort by the number of stars.

69
00:05:06.328 --> 00:05:12.500
And then also a key of order, it will
have a value of disc for descending.

70
00:05:14.390 --> 00:05:21.003
I'm going to get a response from the
GitHub API by using this requests library.

71
00:05:21.003 --> 00:05:26.791
The request library provides a .get
method that maps to HTTP GET where I

72
00:05:26.791 --> 00:05:33.753
pass in the URL, and then that dictionary
of parameters that I built online, a team.

73
00:05:33.753 --> 00:05:38.702
And then I'm gonna get
the status code in the response.

74
00:05:38.702 --> 00:05:43.825
So for those of you familiar
with API's it might be 200 for

75
00:05:43.825 --> 00:05:49.662
okay, 404 for not found,
maybe 503 if I wasn't authorized.

76
00:05:49.662 --> 00:05:50.952
It doesn's matter to me.

77
00:05:50.952 --> 00:05:55.476
If I got back a status
code that was not 200,

78
00:05:55.476 --> 00:06:00.349
sorry, I have ligatures turned on,
for myself,

79
00:06:00.349 --> 00:06:05.467
I will turn those off for
all of you at the next break.

80
00:06:05.467 --> 00:06:10.555
Because what this should
actually look like is not equals

81
00:06:10.555 --> 00:06:15.433
without a space in between,
I just have a fancy setup.

82
00:06:15.433 --> 00:06:18.411
So, for that I apologize.

83
00:06:18.411 --> 00:06:22.382
But I'm checking here that if
the status code does not equal 200,

84
00:06:22.382 --> 00:06:26.092
I'm gonna raise a runtime error,
my programs just gonna quit.

85
00:06:26.092 --> 00:06:28.292
I got an error code,
I don't know what it is.

86
00:06:28.292 --> 00:06:31.293
Don't know where to go from here.

87
00:06:31.293 --> 00:06:36.019
Otherwise, I'm going to get
the JSON from the response,

88
00:06:36.019 --> 00:06:39.789
save it in a variable
called response_JSON.

89
00:06:39.789 --> 00:06:44.781
And then I'm gonna return
the items key in that

90
00:06:44.781 --> 00:06:49.913
response JSON back to
the calling main method.

91
00:06:49.913 --> 00:06:54.204
So now I'm here,
I've gotten the results from

92
00:06:54.204 --> 00:06:58.505
the repos with most stars
method right up here.

93
00:06:58.505 --> 00:07:06.352
And I'm gonna loop through every
results in that list of results.

94
00:07:06.352 --> 00:07:12.537
And I'm going to get the language which
I know from reading the GitHub API docs,

95
00:07:12.537 --> 00:07:17.983
that it's gonna be in a JSON format
that's gonna have a language key,

96
00:07:17.983 --> 00:07:19.922
a stargazers count key,

97
00:07:19.922 --> 00:07:24.942
which is the number of people who
have started that repository.

98
00:07:24.942 --> 00:07:28.397
And it's also gonna have
the name of the repository.

99
00:07:29.874 --> 00:07:33.732
Then, for every result in these results,

100
00:07:33.732 --> 00:07:39.209
I'm gonna use one of these f strings,
to print out an arrow.

101
00:07:39.209 --> 00:07:45.468
The name of the repo is a language
repo with these many stars.

102
00:07:47.282 --> 00:07:49.682
So it's pretty short program.

103
00:07:49.682 --> 00:07:52.165
It's only 40 lines of code.

104
00:07:52.165 --> 00:07:55.486
I like to think that
this is pretty readable.

105
00:07:55.486 --> 00:07:58.895
Do you folks think that this is readable?

106
00:07:58.895 --> 00:08:00.761
Yeah.

107
00:08:00.761 --> 00:08:05.935
It's compact and condensed, it's pretty
straightforward, what's happening.

108
00:08:05.935 --> 00:08:09.061
And let's go ahead and run this.

109
00:08:09.061 --> 00:08:12.749
And I'm just gonna do that by
opening up the command palette, and

110
00:08:12.749 --> 00:08:15.306
then selecting run
python file in terminal.

111
00:08:18.679 --> 00:08:21.703
This is something that you might run into,

112
00:08:21.703 --> 00:08:26.155
if you already have a repo open
in your terminal and you select,

113
00:08:26.155 --> 00:08:31.111
run Python file in terminal VS code
is gonna try to paste in the commands

114
00:08:31.111 --> 00:08:36.074
to run the file into your repo, and
then your repo is going to explore.

115
00:08:36.074 --> 00:08:40.805
So if you see something like this,
this is the fully

116
00:08:40.805 --> 00:08:45.878
qualified path to the Python
executable on my system.

117
00:08:45.878 --> 00:08:49.630
And the file that I'm trying
to run if you see that and

118
00:08:49.630 --> 00:08:54.660
like invalid syntax, know that you
just need to exit out of your repo or

119
00:08:54.660 --> 00:08:59.643
open a new terminal here with plus
before you try running that again.

120
00:08:59.643 --> 00:09:01.431
So, let's try that again.

121
00:09:01.431 --> 00:09:05.749
I'm gonna select Python run file and
terminal and now it works successfully.

122
00:09:05.749 --> 00:09:10.205
And this went and
reached out to the GitHub API and

123
00:09:10.205 --> 00:09:14.879
pretty quickly returned this
list of some of the top

124
00:09:14.879 --> 00:09:19.781
Python JavaScript and,
forget the third language.

125
00:09:19.781 --> 00:09:20.839
What was the third one?

126
00:09:24.389 --> 00:09:26.483
Let's see, Ruby.

127
00:09:26.483 --> 00:09:32.558
I guess there are no Ruby
repositories of over 60,000 stars.

128
00:09:32.558 --> 00:09:40.022
The GitHub_Search_API doesn't always
return super accurate values, just an FYI.

129
00:09:40.022 --> 00:09:46.760
It optimizes for returning quickly
versus super accurate results.

130
00:09:46.760 --> 00:09:53.652
So if you run this multiple times,
you might get multiple different results.

131
00:09:53.652 --> 00:09:57.086
But that was,
it was pretty straightforward.

132
00:09:57.086 --> 00:10:02.174
It used a lot of the language features
that we are going to learn today.

133
00:10:02.174 --> 00:10:07.736
And it's a really quick and easy way to
interact with API's, interact with data,

134
00:10:07.736 --> 00:10:12.120
and automate a lot of the tasks that
you might have to do day to day.

