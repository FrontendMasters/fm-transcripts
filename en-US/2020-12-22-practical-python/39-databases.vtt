WEBVTT

1
00:00:00.000 --> 00:00:03.827
Let's talk about how Django
interacts with databases.

2
00:00:03.827 --> 00:00:07.744
Let's Ctrl+C out of this for
just a moment and

3
00:00:07.744 --> 00:00:11.970
open up this folder in VS Code,
either with code.

4
00:00:11.970 --> 00:00:16.910
Or by going to VS Code and
saying File, Open,

5
00:00:16.910 --> 00:00:20.300
and then opening this folder.

6
00:00:20.300 --> 00:00:25.954
And let's open a Python file by
using the Quick Find Ctrl+P or

7
00:00:25.954 --> 00:00:29.250
Command P and opening models.py.

8
00:00:29.250 --> 00:00:33.167
And this will start
the the Python extension,

9
00:00:33.167 --> 00:00:38.390
make sure you click down here and
ensure that the right virtual

10
00:00:38.390 --> 00:00:43.220
environment is selected for
me it's ./bin/Python.

11
00:00:44.820 --> 00:00:49.475
And that will clear up any if you saw some
squigglies before, under here, that's

12
00:00:49.475 --> 00:00:54.740
because Django was not installed in the
virtual environment that VS code selected.

13
00:00:54.740 --> 00:00:58.165
I'm not sure why it's not selecting
the right thing at the moment or

14
00:00:58.165 --> 00:01:00.680
recognizing my virtual environments.

15
00:01:00.680 --> 00:01:04.414
Maybe it's a weird setting on my side
because it is something that usually

16
00:01:04.414 --> 00:01:05.391
works quite well.

17
00:01:09.481 --> 00:01:13.000
I've opened up models.py.

18
00:01:13.000 --> 00:01:15.966
And models.py lives in the blog folder,
but

19
00:01:15.966 --> 00:01:19.410
I recommend that you open
that up via the Quick Find.

20
00:01:21.160 --> 00:01:27.670
This is a custom model that I've defined
in Django and it's got a few fields in it.

21
00:01:27.670 --> 00:01:32.980
It's got a title which is the character
field with a maximum of 300.

22
00:01:32.980 --> 00:01:35.960
It's got a body which is a text field.

23
00:01:35.960 --> 00:01:42.500
It's got a slug which is a newspaper term
but you might see used commonly in blogs.

24
00:01:42.500 --> 00:01:45.542
A slug is a way of taking a title and
then adding,

25
00:01:45.542 --> 00:01:50.320
removing any special characters,
adding dashes or underscores.

26
00:01:50.320 --> 00:01:55.850
That some of that title can be in the URL
for the blog post for SEO purposes.

27
00:01:55.850 --> 00:02:01.466
And then we also have a created at
field which is a date time field and

28
00:02:01.466 --> 00:02:04.789
a string representation of our model.

29
00:02:08.443 --> 00:02:13.376
Now this model maps to a database,
a sequel lite database that we have on

30
00:02:13.376 --> 00:02:17.653
our systems and we don't need
to know anything about sequel or

31
00:02:17.653 --> 00:02:22.610
databases in order to use databases
with Django, which is just great.

32
00:02:24.230 --> 00:02:30.194
Once we create our application here at
the blog app, we're going to want to make

33
00:02:30.194 --> 00:02:35.447
sure that when we open settings.py,
which is the global settings for

34
00:02:35.447 --> 00:02:40.434
our Django application, and
we scroll down to installed_Apps,

35
00:02:40.434 --> 00:02:45.600
we want make sure that we have
blog.apps.BlogConfig in here.

36
00:02:45.600 --> 00:02:49.270
That tells Django to register
various applications.

37
00:02:51.080 --> 00:02:58.120
Now, the practical blog
directory is the project.

38
00:02:58.120 --> 00:03:03.470
Level directory where all the project
specific settings live for

39
00:03:03.470 --> 00:03:05.130
my, this project.

40
00:03:06.180 --> 00:03:11.150
The blog directory has app
specific stuff in it for my blog.

41
00:03:11.150 --> 00:03:13.907
When you're working on
small Django projects,

42
00:03:13.907 --> 00:03:18.800
having multiple apps doesn't matter,
but let's say you are a company.

43
00:03:18.800 --> 00:03:22.260
And practical blog is your project.

44
00:03:22.260 --> 00:03:26.520
Now you might have an app for a blog, you
might have an app for an e-commerce site.

45
00:03:26.520 --> 00:03:29.320
You might have an app for a forum.

46
00:03:29.320 --> 00:03:34.519
And those are all going to have their
own individual folders in Django,

47
00:03:34.519 --> 00:03:38.592
where you can define your models and
views and routes and

48
00:03:38.592 --> 00:03:43.640
everything for that specific app
in its own happy little namespace.

49
00:03:48.470 --> 00:03:53.343
Now, I'm not going to talk about
how to make migrations, but

50
00:03:53.343 --> 00:04:00.140
if you do want to complete the final
exercise, I recommend that you go back to.

51
00:04:00.140 --> 00:04:05.482
This section, anytime you change your
models, let's say you delete one

52
00:04:05.482 --> 00:04:10.994
of these or you add a new one, you need
to tell Django to make instructions for

53
00:04:10.994 --> 00:04:16.880
the database, to match the new model,
and then run those instructions.

54
00:04:16.880 --> 00:04:19.518
Let's say if you delete a field here,

55
00:04:19.518 --> 00:04:25.890
Django needs to issue instructions to
drop a column from a table in a database.

56
00:04:25.890 --> 00:04:31.900
In order to do that, you need to run
a command called make migrations.

57
00:04:31.900 --> 00:04:35.070
You can optionally pass in
the name of the app here.

58
00:04:35.070 --> 00:04:37.080
It's called blog.

59
00:04:37.080 --> 00:04:40.914
And then you can run the migrate
command and that will go ahead and

60
00:04:40.914 --> 00:04:44.540
update your database so
that it matches your latest models.

61
00:04:46.290 --> 00:04:51.800
If you want to work with models,
you can do that in the python.

62
00:04:51.800 --> 00:04:52.300
Shell.

63
00:04:53.460 --> 00:04:55.728
I'm going to open up my terminal here.

64
00:04:55.728 --> 00:05:02.228
And type in Python managed.py
followed by the word shell,

65
00:05:02.228 --> 00:05:07.298
this is going to bring up
a special Django shell

66
00:05:07.298 --> 00:05:13.700
that knows a lot about how
our project is structured.

67
00:05:13.700 --> 00:05:18.645
It's a little bit different than
just a standard ruppel, now we can

68
00:05:18.645 --> 00:05:24.790
work with our models and objects that
we defined in Django in the shell.

69
00:05:24.790 --> 00:05:31.012
For example, I can say from blog.models,
import posts,

70
00:05:31.012 --> 00:05:36.123
and that is the model that
I had defined up there.

71
00:05:37.235 --> 00:05:41.529
Now I can query that model by saying,
sorry,

72
00:05:41.529 --> 00:05:50.260
post.objects.all is going to query all of
the tables, all the rows in this table.

73
00:05:50.260 --> 00:05:53.498
Currently, we don't have any.

74
00:05:53.498 --> 00:05:57.850
If I wanted to, I have an example for
creating posts.

75
00:05:57.850 --> 00:06:01.665
From the command line here, so

76
00:06:01.665 --> 00:06:07.550
let me just copy and
paste this first post here.

77
00:06:09.890 --> 00:06:13.255
I'm defining all of the fields
providing values for

78
00:06:13.255 --> 00:06:15.890
all of the fields I defined up here.

79
00:06:15.890 --> 00:06:18.776
Title body and slug everything except for

80
00:06:18.776 --> 00:06:23.750
created because I'm using this
auto add auto now add equals true.

81
00:06:23.750 --> 00:06:27.092
That means when I create
a row in this database,

82
00:06:27.092 --> 00:06:31.370
it's going to automatically
add the created at timestamp.

83
00:06:33.300 --> 00:06:38.446
In order for
me to save this into my database I need

84
00:06:38.446 --> 00:06:43.466
to run first post.save and
now, when I rerun my

85
00:06:43.466 --> 00:06:49.820
query, My first post is in here.

86
00:06:52.100 --> 00:06:58.350
Let's go ahead and open a new tab in
VS code and start our server again.

87
00:06:58.350 --> 00:07:01.480
Python manage.py runserver.

88
00:07:01.480 --> 00:07:06.423
If you never exited your server in the
first place and you try to run it again,

89
00:07:06.423 --> 00:07:10.690
you might get an error about
the port being busy or occupied.

90
00:07:10.690 --> 00:07:15.640
Know that means that you're probably
already running your server in

91
00:07:15.640 --> 00:07:16.960
a different tab.

92
00:07:16.960 --> 00:07:20.982
There is my first post
reflected in the webpage.

93
00:07:24.810 --> 00:07:30.456
We can interact with these models,
just like objects in Python.

94
00:07:30.456 --> 00:07:34.358
There's a get method so

95
00:07:34.358 --> 00:07:39.233
I can pass in to get get me where

96
00:07:39.233 --> 00:07:44.510
the slug is equal to first post.

97
00:07:46.150 --> 00:07:49.977
And that will return
the record I just created,

98
00:07:49.977 --> 00:07:56.300
if I say first post to I'm going to get
an exception here, post does not exist.

99
00:07:56.300 --> 00:08:00.060
There's no post matching
your query makes sense.

100
00:08:00.060 --> 00:08:06.950
I can also use the dot filter method.

101
00:08:06.950 --> 00:08:11.740
Get will get you one result dot
filter will get you a list.

102
00:08:11.740 --> 00:08:14.290
And you'll see that you
got a query set back.

103
00:08:15.700 --> 00:08:20.110
If you have multiple items that match
that query, they'll come back there.

104
00:08:22.860 --> 00:08:26.785
This query set kind of acts like
a list and you can treat it as one so

105
00:08:26.785 --> 00:08:27.670
you can call.

106
00:08:29.300 --> 00:08:32.450
Let's save this to
a variable called results.

107
00:08:32.450 --> 00:08:34.900
You can call length on results.

108
00:08:34.900 --> 00:08:39.420
You can get the first item and results.

109
00:08:39.420 --> 00:08:43.700
Just like a list, this will throw an
exception because we only have one item.

110
00:08:43.700 --> 00:08:45.630
This throws list index out of range.

111
00:08:47.560 --> 00:08:53.190
The Django Orem It features a lot
of optimizations under the hood.

112
00:08:53.190 --> 00:08:56.704
And the best part is you really don't
need to know about the internal workings

113
00:08:56.704 --> 00:08:58.770
of databases to take
full advantage of them.

