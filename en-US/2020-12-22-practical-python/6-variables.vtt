WEBVTT

1
00:00:00.265 --> 00:00:05.789
All right, so we're going to dive
into variables and data types.

2
00:00:05.789 --> 00:00:07.841
And these are gonna be the simple ones.

3
00:00:07.841 --> 00:00:12.954
So numbers, strings, lists,
those kinds of things.

4
00:00:12.954 --> 00:00:15.512
We're going to go ahead and
open up the ripple.

5
00:00:22.733 --> 00:00:25.136
Once you have the rappel open.

6
00:00:33.956 --> 00:00:37.705
My fiuas code does not
want to start the rappel.

7
00:00:37.705 --> 00:00:40.435
Unless it's done so
in a different terminal.

8
00:00:43.664 --> 00:00:48.623
&gt;&gt; I was having a similar issue, where I
had the repo open on one of the terminals,

9
00:00:48.623 --> 00:00:51.176
I tried to open a new one and
run the file,

10
00:00:51.176 --> 00:00:54.581
it would keep using the old
one that the repo running.

11
00:00:54.581 --> 00:00:57.758
I don't know how to open a new
Python terminal, like a second one.

12
00:00:57.758 --> 00:01:00.325
&gt;&gt; Yeah.
So there, that's a great question.

13
00:01:00.325 --> 00:01:04.690
Somebody asked, how do you open
a new Python terminal, envious code.

14
00:01:04.690 --> 00:01:06.874
You should see here a drop down and

15
00:01:06.874 --> 00:01:11.012
this'll be all of the different
terminals that you have open.

16
00:01:11.012 --> 00:01:14.665
You can open a regular terminal
with the plus symbol here.

17
00:01:14.665 --> 00:01:16.625
Or in the command palette,

18
00:01:16.625 --> 00:01:21.664
if you have the Python extension
you'll see Python Create Terminal.

19
00:01:21.664 --> 00:01:27.913
And that will create a new terminal
with your virtual environment activated.

20
00:01:27.913 --> 00:01:34.357
I'm going to hit Delete and close all of
these out and try to start my rebel again.

21
00:01:34.357 --> 00:01:35.661
There we go.

22
00:01:35.661 --> 00:01:37.258
Let's come up now.

23
00:01:37.258 --> 00:01:42.833
Yeah, sometimes there's small changes
in VS code throughout versions.

24
00:01:42.833 --> 00:01:48.685
So if something's not working,
shut it down, start it back up, or

25
00:01:48.685 --> 00:01:55.890
in this case, just close all of your open
terminal windows and start from scratch.

26
00:01:55.890 --> 00:02:01.006
Hopefully you don't run into
the same issue that I did.

27
00:02:01.006 --> 00:02:06.679
Well, so you should all have your REPL
open and see these three arrows and

28
00:02:06.679 --> 00:02:11.998
a blinking cursor to indicate that
you can now start typing into it.

29
00:02:11.998 --> 00:02:17.871
So I mentioned earlier that
Python is a dynamic language.

30
00:02:17.871 --> 00:02:23.149
And we defined some variables earlier
on when we were exploring the REPL.

31
00:02:23.149 --> 00:02:26.030
If you come from a language like Java,

32
00:02:26.030 --> 00:02:30.273
you will notice that I didn't
have to specify the type.

33
00:02:30.273 --> 00:02:34.616
When I instantiated this variable,
I didn't have to tell Python, hey,

34
00:02:34.616 --> 00:02:35.816
this is an integer.

35
00:02:35.816 --> 00:02:41.893
I could just define whatever
variable I wanted and the.

36
00:02:41.893 --> 00:02:46.546
Type it doesn't need to be consistent
throughout the execution of your code.

37
00:02:46.546 --> 00:02:53.588
So this could be a number in one instance,
I can change it to a string and in other.

38
00:02:53.588 --> 00:02:57.265
This is something that you
want to be very mindful of

39
00:02:57.265 --> 00:03:00.609
because it can introduce
a lot of subtle bugs.

40
00:03:05.234 --> 00:03:10.799
And because Python is a dynamic language,
naming variables is very, very important.

41
00:03:10.799 --> 00:03:13.378
So you want to be as explicit as possible.

42
00:03:13.378 --> 00:03:15.762
Once you've moved on
from the learning phase.

43
00:03:15.762 --> 00:03:20.214
You really want to avoid having
any single variable names where

44
00:03:20.214 --> 00:03:22.067
you're not really sure.

45
00:03:22.067 --> 00:03:25.892
What they do, because you're gonna
end up in a world of pain afterwards.

46
00:03:25.892 --> 00:03:34.269
So be as descriptive in naming
your variables as possible.

47
00:03:34.269 --> 00:03:38.698
Now, in Python convention
says that your variable

48
00:03:38.698 --> 00:03:43.545
should be lowercased and
separated with underscores.

49
00:03:43.545 --> 00:03:49.415
That is called snake casing,
which I think is pretty cute.

50
00:03:49.415 --> 00:03:54.620
Snake case naming your variables and
snake case is convention in Python.

51
00:03:54.620 --> 00:04:00.122
So try to follow that as much as possible
regardless of what the convention

52
00:04:00.122 --> 00:04:05.198
is in the programming language
that you're coming to Python from.

53
00:04:05.198 --> 00:04:11.320
In Python variable names cannot start
with special symbols or numbers.

54
00:04:11.320 --> 00:04:14.703
So if I try to name a variable like this,

55
00:04:14.703 --> 00:04:20.565
I'm going to get a syntax error
saying that this is invalid syntax.

56
00:04:20.565 --> 00:04:27.359
There are some variable names that
Python will allow you to use.

57
00:04:27.359 --> 00:04:30.865
But you really shouldn't.

58
00:04:30.865 --> 00:04:34.593
And these are special keywords in Python.

59
00:04:34.593 --> 00:04:36.662
They are built in functions.

60
00:04:36.662 --> 00:04:41.123
And this is something that might
bite you as you're learning Python.

61
00:04:41.123 --> 00:04:45.309
But I think you'll quickly start to
recognize when this is happening.

62
00:04:45.309 --> 00:04:51.567
And when we start working in files,
those keywords will be a different color.

63
00:04:51.567 --> 00:04:58.573
And so you'll be able to recognize
them a little bit more easily.

64
00:04:58.573 --> 00:05:05.235
So some obvious keywords are going
to result in syntax errors.

65
00:05:05.235 --> 00:05:11.338
If I tried to name a variable if
that's a invalid syntax syntax error,

66
00:05:11.338 --> 00:05:15.897
because that's the definition
of an if statement.

67
00:05:15.897 --> 00:05:21.378
But here's a really subtle bug that bit me
so many times when I was learning Python.

68
00:05:21.378 --> 00:05:26.024
So in Python, one of the ways that
you can declare a list because in

69
00:05:26.024 --> 00:05:30.852
Python everything is an object is
by calling the list constructor.

70
00:05:30.852 --> 00:05:36.406
And that just returns an empty list.

71
00:05:36.406 --> 00:05:41.391
Will this let's do this is
this a syntax error in Python?

72
00:05:43.570 --> 00:05:49.030
Now, Note is not.

73
00:05:49.030 --> 00:05:54.037
Now if we try to make a new list
again using the list constructor,

74
00:05:54.037 --> 00:05:57.858
we're going to get an error
that says that stir.

75
00:05:57.858 --> 00:06:00.037
Stir meaning string.

76
00:06:00.037 --> 00:06:03.089
Object is not callable.

77
00:06:03.089 --> 00:06:08.074
Because what's actually happening under
the hood is that Python is trying to

78
00:06:08.074 --> 00:06:08.694
do this.

79
00:06:08.694 --> 00:06:15.392
You've just made the list
constructor into a string.

80
00:06:15.392 --> 00:06:20.971
And this is one way of having very,
very subtle annoying errors.

81
00:06:20.971 --> 00:06:23.032
So don't name.

82
00:06:23.032 --> 00:06:27.089
Don't name your variables,

83
00:06:27.089 --> 00:06:32.287
things like stir list, etc.

84
00:06:32.287 --> 00:06:37.330
If you're not sure while you're working
on the RAPLE you can type in one

85
00:06:37.330 --> 00:06:42.556
of these keywords just right in the RAPLE
and it will come back with class.

86
00:06:42.556 --> 00:06:44.020
In this case class int.

87
00:06:44.020 --> 00:06:47.377
That means that this is one
of those built in Python.

