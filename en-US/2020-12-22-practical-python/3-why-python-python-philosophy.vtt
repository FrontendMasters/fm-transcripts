WEBVTT

1
00:00:00.000 --> 00:00:03.270
All right.
So what is the draw of using Python?

2
00:00:03.270 --> 00:00:05.398
How is it different from other languages?

3
00:00:05.398 --> 00:00:07.232
What advantages does it offer?

4
00:00:07.232 --> 00:00:09.424
Python is a dynamic programming language.

5
00:00:09.424 --> 00:00:13.024
And this really caught
me by surprise at first,

6
00:00:13.024 --> 00:00:17.350
it was created by Guido van
Rossum in the late 1980s.

7
00:00:17.350 --> 00:00:20.514
That means that Python is 30-years-old.

8
00:00:20.514 --> 00:00:24.064
That means that it's
older than some of you.

9
00:00:24.064 --> 00:00:26.969
It is old enough to vote.

10
00:00:26.969 --> 00:00:31.381
So a lot of folks think that
Python is a new language.

11
00:00:31.381 --> 00:00:33.331
Or that it's new on the scene.

12
00:00:33.331 --> 00:00:34.481
That is not true.

13
00:00:34.481 --> 00:00:40.401
It's just been gaining a lot of popularity
in probably the past ten years or so.

14
00:00:40.401 --> 00:00:44.871
There's also this common misconception
that Python is only a scripting language.

15
00:00:44.871 --> 00:00:46.632
It's really simple.

16
00:00:46.632 --> 00:00:49.173
And that is not true at all.

17
00:00:49.173 --> 00:00:54.132
Django is a web framework that's built
in Python is used to run Instagram,

18
00:00:54.132 --> 00:00:58.713
which is one of the largest websites
in the world with the most users.

19
00:00:58.713 --> 00:01:00.642
It powers parts of Reddit.

20
00:01:00.642 --> 00:01:02.611
It's used at Netflix and

21
00:01:02.611 --> 00:01:07.782
early versions of Dropbox were
built almost entirely in Python.

22
00:01:07.782 --> 00:01:13.471
Dropbox credits a lot of its success to
Python, because Python is easy to read and

23
00:01:13.471 --> 00:01:18.001
easy to write and it's easy for
teams to collaborate in Python.

24
00:01:18.001 --> 00:01:19.256
They had this idea and

25
00:01:19.256 --> 00:01:23.165
they were able to get a product out
the door as quickly as possible.

26
00:01:23.165 --> 00:01:28.154
And then, when they had to scale, that
was something that they started dealing

27
00:01:28.154 --> 00:01:31.581
with by replacing parts of
their application with go or

28
00:01:31.581 --> 00:01:33.827
other more performant languages.

29
00:01:33.827 --> 00:01:38.696
But they didn't optimize when they didn't
need to and that let them have this.

30
00:01:38.696 --> 00:01:41.120
Very, very successful company.

31
00:01:41.120 --> 00:01:47.659
It's also becoming an increasingly popular
language for education of all ages.

32
00:01:47.659 --> 00:01:50.515
There is our Python books for kids.

33
00:01:50.515 --> 00:01:57.953
Python is taught in universities and
I found this great quote that in 2014,

34
00:01:57.953 --> 00:02:04.623
Python was the most popular teaching
language at top US universities.

35
00:02:04.623 --> 00:02:08.812
And if you know Python, you might
not have a hard time finding a job.

36
00:02:08.812 --> 00:02:12.985
Because it's one of the fastest
growing programming languages.

37
00:02:12.985 --> 00:02:17.251
Guiteau said that Python is now
also the language of amateurs.

38
00:02:17.251 --> 00:02:20.433
And I mean that in the best way possible.

39
00:02:20.433 --> 00:02:26.242
That means that the language is
accessible to a lot of people.

40
00:02:26.242 --> 00:02:29.692
One of the great things with
Python is that it's open source.

41
00:02:29.692 --> 00:02:34.024
It's an active development, there's
a committed team of core contributors and

42
00:02:34.024 --> 00:02:37.807
there are also a lot of issues that
are tagged welcoming for beginners.

43
00:02:37.807 --> 00:02:41.113
So as you advance in your Python journey,
if you decide that you want

44
00:02:41.113 --> 00:02:44.950
to contribute back to the language,
that is something that you can easily do.

45
00:02:46.470 --> 00:02:49.863
We chatted a little bit
about versions in Python.

46
00:02:49.863 --> 00:02:53.551
You might hear something about
Python 2 versus Python 3.

47
00:02:53.551 --> 00:02:54.780
What's that all about?

48
00:02:56.190 --> 00:03:00.343
I will say that this is maybe a little
bit of a stain on Python's history.

49
00:03:00.343 --> 00:03:04.029
Python 3 was actually released in 2008.

50
00:03:04.029 --> 00:03:07.580
And its adoption was very slow.

51
00:03:07.580 --> 00:03:12.387
There were a lot of really popular
frameworks that didn't want to migrate

52
00:03:12.387 --> 00:03:15.032
because it would have been a lot of work.

53
00:03:15.032 --> 00:03:18.845
And because of that,
a lot of folks stuck to Python two and

54
00:03:18.845 --> 00:03:24.343
instead of Python three, there was some
breaking changes that were introduced.

55
00:03:24.343 --> 00:03:27.760
At this point,
that chapter is now fully closed.

56
00:03:27.760 --> 00:03:32.572
Python two seven, which was the last
version of Python two is deprecated.

57
00:03:32.572 --> 00:03:37.535
It has reached its end of life, it's
not getting critical security updates.

58
00:03:37.535 --> 00:03:42.110
It's not getting critical,
new features that you might want to use.

59
00:03:42.110 --> 00:03:48.936
So it's time to use Python three and
move on from Python two.

60
00:03:48.936 --> 00:03:53.773
All of those popular libraries and
frame works have now migrated as well and

61
00:03:53.773 --> 00:03:58.689
are likely not supporting their Python
two features because that's double

62
00:03:58.689 --> 00:03:59.548
of the work.

63
00:03:59.548 --> 00:04:03.147
So this course is going to
focus on Python three only.

64
00:04:03.147 --> 00:04:05.986
And I would encourage you
all to use Python three for

65
00:04:05.986 --> 00:04:08.770
all your personal projects and
projects at work.

66
00:04:10.440 --> 00:04:16.466
Python has an incredibly rich
fully featured standard library,

67
00:04:16.466 --> 00:04:21.514
there is a saying that Python
is batteries including.

68
00:04:21.514 --> 00:04:26.580
So anything that you might want to do,
like working with JSON.

69
00:04:26.580 --> 00:04:29.353
All of those are included
in the standard library,

70
00:04:29.353 --> 00:04:32.265
you don't need to install
any additional packages.

71
00:04:32.265 --> 00:04:36.786
And there's a link here into
the standard library and you can kind of

72
00:04:36.786 --> 00:04:41.482
go through here and see what is available,
there's a lot of, stuff.

73
00:04:43.944 --> 00:04:49.633
There's also the PyPi package index for
third party packages.

74
00:04:49.633 --> 00:04:55.488
As of today,
there are almost 300,000 projects,

75
00:04:55.488 --> 00:04:59.360
and almost half a million users.

76
00:04:59.360 --> 00:05:03.887
So, this is where you go
where you want to find

77
00:05:03.887 --> 00:05:08.548
something that's maybe water or
more niche.

78
00:05:08.548 --> 00:05:13.271
And there are lots of third party packages
available for many different uses.

79
00:05:13.271 --> 00:05:20.481
There's tons of stuff for AI and
Ml Scipy Numpy pandas pytorch.

80
00:05:20.481 --> 00:05:24.122
There are great options for
hardware and microcontrollers.

81
00:05:24.122 --> 00:05:29.145
There are two very popular web development
frameworks that are Django and

82
00:05:29.145 --> 00:05:31.502
flask lots of tooling for DevOps.

83
00:05:31.502 --> 00:05:37.513
And the absolute best part of Python
is actually the incredible community.

84
00:05:37.513 --> 00:05:41.863
So after this course, I encourage you
all to continue in that community.

85
00:05:41.863 --> 00:05:48.089
PyCon US is the biggest yearly conference
with approximately 4000 attendees.

86
00:05:48.089 --> 00:05:51.352
There are lots of local user groups.

87
00:05:51.352 --> 00:05:54.582
A lot of them are listed
in a wiki that is linked.

88
00:05:54.582 --> 00:05:57.076
A lot of these groups
are now having online and

89
00:05:57.076 --> 00:05:59.510
remote events that you can participate in.

90
00:05:59.510 --> 00:06:04.356
And there are also many great and
supportive groups for women and

91
00:06:04.356 --> 00:06:09.390
non binary developers,
such as pi ladies and Django girls.

92
00:06:09.390 --> 00:06:14.830
And these organizations tend to
have chapters in most major cities.

93
00:06:14.830 --> 00:06:17.050
And they do a lot of really,
really great work.

94
00:06:18.910 --> 00:06:23.564
So, a little bit about
the philosophy of Python.

95
00:06:23.564 --> 00:06:28.481
A lot of ideas in Python were formed
by something called the Zen of Python.

96
00:06:28.481 --> 00:06:32.965
It's a collection of 19 software
principles that was sent to

97
00:06:32.965 --> 00:06:35.684
the Python mailing list in 1999.

98
00:06:35.684 --> 00:06:40.114
And you can actually find
the Zen of Python included in

99
00:06:40.114 --> 00:06:43.667
the Python distribution as an Easter egg.

100
00:06:43.667 --> 00:06:48.162
So let's go to our repple wherever you

101
00:06:48.162 --> 00:06:52.526
have that open and type import this.

102
00:06:56.470 --> 00:06:58.713
And we're not gonna read this whole thing.

103
00:06:58.713 --> 00:07:03.566
But the the top few tenets
beautiful is better than ugly.

104
00:07:03.566 --> 00:07:08.328
Explicit is better than implicit,
simple is better than complex,

105
00:07:08.328 --> 00:07:11.011
complex is better than complicated.

106
00:07:11.011 --> 00:07:15.624
Flat is better than nested
sparse is better than dense, and

107
00:07:15.624 --> 00:07:18.953
most importantly, readability counts.

108
00:07:18.953 --> 00:07:22.502
So as you advance through
your Python career,

109
00:07:22.502 --> 00:07:26.062
you'll see more and
more of this in practice.

110
00:07:26.062 --> 00:07:32.348
Python code should be simple,
you shouldn't try to make the most,

111
00:07:32.348 --> 00:07:37.663
the smallest one liner that
nobody else can understand.

112
00:07:37.663 --> 00:07:39.554
Python can give you those tools.

113
00:07:39.554 --> 00:07:41.903
You can do it, but you shouldn't.

114
00:07:41.903 --> 00:07:45.141
You should focus on making
your code very clear.

115
00:07:45.141 --> 00:07:50.361
Very simple,
very readable flat is better than

116
00:07:50.361 --> 00:07:55.322
nested means don't have arrow shaped code.

117
00:07:55.322 --> 00:07:59.184
So no if statement if statement
if statement if statement,

118
00:07:59.184 --> 00:08:00.893
not a ton of nested loops.

119
00:08:00.893 --> 00:08:06.306
Try to keep everything as close to
the left margin as possible and

120
00:08:06.306 --> 00:08:11.018
really focus on this is what
makes Python different from

121
00:08:11.018 --> 00:08:14.340
a lot of other programming languages.

122
00:08:18.282 --> 00:08:22.607
Now a way that Python
encourages you to write simple,

123
00:08:22.607 --> 00:08:27.412
readable code is with a style
guideline that's included in

124
00:08:27.412 --> 00:08:32.810
the languages list of official
proposals it's called Pep eight.

125
00:08:34.040 --> 00:08:42.782
And if we take a look at this Pep eight
gives coding conventions for Python.

126
00:08:42.782 --> 00:08:47.667
Everything from indentation
to maximum line

127
00:08:47.667 --> 00:08:52.809
length to where blank
lines should be to where,

128
00:08:52.809 --> 00:08:57.443
how the spacing around equal signs works.

129
00:08:57.443 --> 00:09:01.957
You don't have to remember all of these
rules because tools called linters,

130
00:09:01.957 --> 00:09:04.603
he should have installed
a linter in VS code.

131
00:09:04.603 --> 00:09:08.683
We'll show you warnings when your
code doesn't meet PEPB standards.

132
00:09:08.683 --> 00:09:14.078
Know that the warnings that lintec
linters give they're not syntax errors,

133
00:09:14.078 --> 00:09:19.812
your code will still run, but it won't
be accepted Python code style standards.

134
00:09:19.812 --> 00:09:23.113
Not very important when you're
working on your own, but

135
00:09:23.113 --> 00:09:27.947
much more important when you're working
on a team and collaborating with others.

136
00:09:27.947 --> 00:09:32.970
There are a few other easter
eggs that I'm going to show you.

137
00:09:32.970 --> 00:09:37.082
Actually, I don't know if this
one works in Python three.

138
00:09:37.082 --> 00:09:43.005
This was a Python two easter egg.

139
00:09:45.691 --> 00:09:46.514
There we go.

140
00:09:46.514 --> 00:09:50.642
So if you type from underscore
future import braces

141
00:09:50.642 --> 00:09:55.538
like well Python the programming
language ever get braces,

142
00:09:55.538 --> 00:10:00.247
you'll see a syntax error and
the message is not a chance.

143
00:10:00.247 --> 00:10:07.294
[LAUGH] So Python won't be looking like
JavaScript anytime in the near future.

144
00:10:07.294 --> 00:10:15.222
And then one of my favorite easter
eggs is if you import anti gravity.

145
00:10:15.222 --> 00:10:20.638
This will take you to an XKCD comic
about Python that says you're

146
00:10:20.638 --> 00:10:26.671
flying how with Python I learned it
last night everything is so simple.

147
00:10:26.671 --> 00:10:30.854
Hello world is just print hello
world says Python two and

148
00:10:30.854 --> 00:10:34.063
Python three you need those parentheses.

149
00:10:34.063 --> 00:10:40.692
So, yeah, pythons a pretty fun language
but it's also very, very powerful.

150
00:10:40.692 --> 00:10:42.832
We're going to take a short.

151
00:10:42.832 --> 00:10:49.260
Break before we talk about the anatomy of
a Python program and jump into data types,

