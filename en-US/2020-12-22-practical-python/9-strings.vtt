WEBVTT

1
00:00:00.210 --> 00:00:05.884
If we want to represent strings,
there are two ways that we can do that,

2
00:00:05.884 --> 00:00:10.237
Python accepts both single quotes and
double quotes,

3
00:00:10.237 --> 00:00:16.510
if you are Defining a string,

4
00:00:16.510 --> 00:00:20.186
make sure that whatever
type of quote that you use,

5
00:00:20.186 --> 00:00:24.390
make sure that it matches or
you're going to get an error.

6
00:00:27.740 --> 00:00:33.932
I prefer double quotes because if
you have a sentence like this,

7
00:00:33.932 --> 00:00:39.740
is this going to work,
when I enter this into my ripple?

8
00:00:39.740 --> 00:00:44.930
No, it's gonna blow up because Python
thinks that this string has ended here.

9
00:00:44.930 --> 00:00:49.980
So if you're using single quotes and you
have a single quote inside of your string,

10
00:00:49.980 --> 00:00:53.676
you're going to want to escape
it with the backwards slash.

11
00:00:56.682 --> 00:00:59.454
And now Python does the right thing, or

12
00:00:59.454 --> 00:01:04.335
you can just use double quotes and
then you don't have that problem.

13
00:01:04.335 --> 00:01:09.587
Because single quotes can be nested
inside of double quotes without issue and

14
00:01:09.587 --> 00:01:13.627
without escaping,
because Python knows that the match for

15
00:01:13.627 --> 00:01:18.819
this first double quote is this second
double quotes If you have long strings

16
00:01:23.463 --> 00:01:27.376
You can start them with three quotes,
either double or single, and

17
00:01:27.376 --> 00:01:28.897
then you can press enter.

18
00:01:34.384 --> 00:01:38.550
And then to end your very long string,
you wanna use three quotes again.

19
00:01:40.410 --> 00:01:45.863
If we take a look at the string
we'll see that it doesn't

20
00:01:45.863 --> 00:01:51.780
look like this when we print it out,
it's separated by \n,

21
00:01:51.780 --> 00:01:57.366
\n is the symbol for new line,
\t is the symbol for tab.

22
00:01:57.366 --> 00:02:04.013
If we print this out, we'll see that
it looks how we expect it to but

23
00:02:04.013 --> 00:02:08.900
that's not how Python
stores it under the hood.

24
00:02:10.840 --> 00:02:17.218
So printing it out is basically asking for
how it might look like when it's rendered.

25
00:02:17.218 --> 00:02:23.055
Now print is something that
you'll be using a lot,

26
00:02:23.055 --> 00:02:29.588
you can print out strings,
you can print out variables.

27
00:02:29.588 --> 00:02:34.432
And something that I find very
handy in print is that you

28
00:02:34.432 --> 00:02:38.660
can actually pass in
multiple values to print.

29
00:02:38.660 --> 00:02:42.053
And if they're separated by a comma,

30
00:02:42.053 --> 00:02:46.929
the output of print will put
a space in between them, so

31
00:02:46.929 --> 00:02:51.607
I can say print hi and
then a, and it'll print hi 5.

32
00:02:51.607 --> 00:02:56.573
This is just kind of a quick and
handy shortcut when you don't wanna use

33
00:02:56.573 --> 00:03:00.444
an F string,
when you don't wanna format something,

34
00:03:00.444 --> 00:03:04.120
you just wanna print it out
see what it looks like.

35
00:03:04.120 --> 00:03:09.083
I use this all the time, but for
some reason it is not common syntax.

36
00:03:09.083 --> 00:03:11.487
You can also concatenate strings,

37
00:03:11.487 --> 00:03:16.707
just like you added two numbers together,
you can add two strings together.

38
00:03:18.971 --> 00:03:23.566
And you can do that with the plus symbol,
know that you don't wanna use string

39
00:03:23.566 --> 00:03:28.010
concatenation for very large or
very large numbers of strings.

40
00:03:28.010 --> 00:03:32.512
I'm talking like, really, really large
cuz then things start slowing down,

41
00:03:32.512 --> 00:03:36.489
you probably won't run into that
problem for a very long time though.

42
00:03:38.750 --> 00:03:42.266
Now, I showed you F strings
a little bit earlier,

43
00:03:42.266 --> 00:03:46.650
those are the modern way of
formatting Python strings.

44
00:03:46.650 --> 00:03:52.020
So an F string just
starts with the letter F,

45
00:03:52.020 --> 00:03:57.200
and you can put curly braces in here.

46
00:03:57.200 --> 00:04:02.195
And inside of those curly braces, you
can put an expression, so in this case,

47
00:04:02.195 --> 00:04:06.451
I'm going to put the variable
a because I've already defined it.

48
00:04:09.903 --> 00:04:13.655
You want to be mindful though,
I don't have a variable b, so

49
00:04:13.655 --> 00:04:18.215
if I try to do that I'm going to get
an error that says name b is not defined,

50
00:04:18.215 --> 00:04:21.257
kind of looks like we would expect it to,
right?

51
00:04:24.691 --> 00:04:27.992
You can also pass in F
strings into print and

52
00:04:27.992 --> 00:04:31.660
use them like you would regular strings.

53
00:04:31.660 --> 00:04:36.497
They are really great because there
are a few old ways of formatting strings

54
00:04:36.497 --> 00:04:42.110
in python that you might run into that
are not as nice, they are error prone.

55
00:04:42.110 --> 00:04:46.663
How you saw a lot of those errors like
can't concatenate number and string,

56
00:04:46.663 --> 00:04:50.080
F strings take care of that for
you under the hood.

57
00:04:50.080 --> 00:04:53.966
So if you're just learning Python and you
don't have any attachment to the old way

58
00:04:53.966 --> 00:04:57.650
of formatting, reach straight for
this and you will be much, much happier.

59
00:04:58.840 --> 00:05:03.620
Somebody asked, is there an auto
decrement like plus plus and minus minus.

60
00:05:07.420 --> 00:05:14.200
No, I don't believe that there is,
there is a plus equals and a minus equals.

61
00:05:14.200 --> 00:05:18.827
If you want to work with some of the
methods I showed you on strings earlier,

62
00:05:18.827 --> 00:05:23.610
there are some examples of that on
the course website that I won't dive into.

63
00:05:25.220 --> 00:05:29.874
If you want to, I'll just show
you an example of one though,

64
00:05:29.874 --> 00:05:34.619
if you want to replace characters
like if I have a name = Nina,

65
00:05:34.619 --> 00:05:41.540
if I wanted to call a method on this, I
would just use the variable name and dot.

66
00:05:41.540 --> 00:05:47.174
And in this case I can call replace and
I would replace,

67
00:05:47.174 --> 00:05:51.352
and let's see, and that returns Zina.

68
00:05:54.891 --> 00:05:59.557
You can see here though that
the original string was not modified,

69
00:05:59.557 --> 00:06:03.670
it's because strings in
Python can't be changed.

70
00:06:03.670 --> 00:06:06.573
So if you want to do
something with this string,

71
00:06:06.573 --> 00:06:09.780
you're going to have to
assign it to a new variable.

72
00:06:11.070 --> 00:06:15.941
So I could say, z_name=name.replace, oops,

73
00:06:15.941 --> 00:06:20.696
and see, and z,
if I take a look in that variable,

74
00:06:20.696 --> 00:06:25.699
I've now saved the value
of running this function.

75
00:06:31.197 --> 00:06:36.113
Are there any other quick questions
before I move on to lists?

76
00:06:36.113 --> 00:06:39.607
&gt;&gt; I read somewhere that
strings are immutable in

77
00:06:39.607 --> 00:06:41.110
Python
&gt;&gt; Right

78
00:06:41.110 --> 00:06:44.126
&gt;&gt; When would you replace the N with

79
00:06:44.126 --> 00:06:44.804
the C?

80
00:06:44.804 --> 00:06:49.080
&gt;&gt; So if you saw this code right here,

81
00:06:49.080 --> 00:06:55.280
running name.replaced
returned in new string.

82
00:06:55.280 --> 00:06:58.850
And if I took a look at
my name variable here,

83
00:06:58.850 --> 00:07:04.251
you will see that the value was not
changed, I had to save the result

84
00:07:04.251 --> 00:07:10.110
of name.replace to a different
variable before I was able to save it.

85
00:07:10.110 --> 00:07:15.600
So, the value in named did not change and
we can verify that one more time.

86
00:07:15.600 --> 00:07:19.351
So the question was,
when you're using F strings,

87
00:07:19.351 --> 00:07:24.820
if you want to use curly braces in
your output, how would you do that?

88
00:07:24.820 --> 00:07:30.205
I believe that you can escape
them just like you would with

89
00:07:30.205 --> 00:07:36.502
other special characters by putting
a backslash in front of them.

90
00:07:40.073 --> 00:07:43.997
F string, this might need a double
backslash, and if this doesn't work,

91
00:07:43.997 --> 00:07:45.381
I would have to look it up.

92
00:07:50.722 --> 00:07:53.107
Yeah, I'm not sure I would
have to look that up,

93
00:07:53.107 --> 00:07:56.670
I don't think I've never done this before,
so it's a great question.

94
00:07:58.916 --> 00:08:02.948
&gt;&gt; What if we want to declare
a variable with a data type, but

95
00:08:02.948 --> 00:08:05.054
we don't mention its value?

96
00:08:07.273 --> 00:08:13.520
Like for example, a of type string but
we don't give it any value.

97
00:08:13.520 --> 00:08:18.469
&gt;&gt; So, to have a variable that
doesn't have a value you can just

98
00:08:18.469 --> 00:08:22.105
use the non keyword
&gt;&gt; As the datatype string.

99
00:08:22.105 --> 00:08:24.608
&gt;&gt; It doesn't have a data type, so

100
00:08:24.608 --> 00:08:31.080
if we look at the type of a we'll see
that the type is actually none type.

101
00:08:31.080 --> 00:08:35.812
So this symbolizes no or
nothing, with Python you don't

102
00:08:35.812 --> 00:08:40.850
have to declare types of
variables before you declare them.

