WEBVTT

1
00:00:00.190 --> 00:00:01.424
Next up, we have sets.

2
00:00:01.424 --> 00:00:06.209
Sets are also mutable data types,
and they allow you to

3
00:00:06.209 --> 00:00:11.006
only store immutable items
in them in an unsorted way.

4
00:00:11.006 --> 00:00:14.585
Sets are mutable,
meaning that you can add items to them,

5
00:00:14.585 --> 00:00:16.568
you can remove items from them.

6
00:00:16.568 --> 00:00:21.347
They can contain other immutable
types like integers string

7
00:00:21.347 --> 00:00:26.124
tuple because tuple is immutable but
not lists, not sets and

8
00:00:26.124 --> 00:00:30.260
not dictionaries,
which are themselves mutable.

9
00:00:30.260 --> 00:00:36.174
Unlike a list or tuple, sets can
only contain unique items in them.

10
00:00:36.174 --> 00:00:40.425
If you make a set and you try to add
items from the set into it instead

11
00:00:40.425 --> 00:00:44.210
of like a list where you can
have as many copies as you want,

12
00:00:44.210 --> 00:00:46.632
the set is just gonna toss that away.

13
00:00:46.632 --> 00:00:52.013
And the benefit of this is that sets are
fast, they have fast membership testing.

14
00:00:52.013 --> 00:00:54.427
We'll talk about this a little bit later.

15
00:00:54.427 --> 00:00:57.111
But because the items
in them are immutable,

16
00:00:57.111 --> 00:01:01.499
you can run a function called a hash
function and very quickly figure out.

17
00:01:01.499 --> 00:01:04.469
Is the item I'm looking for in the set or

18
00:01:04.469 --> 00:01:08.613
not without having to look
at every single value in it.

19
00:01:08.613 --> 00:01:12.835
And you can also use powerful set
operations like union intersection

20
00:01:12.835 --> 00:01:13.717
difference.

21
00:01:13.717 --> 00:01:18.505
I'm not going to jump into these
during the course of this chapter,

22
00:01:18.505 --> 00:01:21.538
but there are some exercises around them.

23
00:01:21.538 --> 00:01:27.579
Quick set cheat sheet here at the top and
let's talk about sets.

24
00:01:27.579 --> 00:01:31.811
So, if lists have square brackets, and

25
00:01:31.811 --> 00:01:35.677
tuples are parentheses and commas.

26
00:01:35.677 --> 00:01:40.423
You might think that sets are curly braces

27
00:01:45.503 --> 00:01:46.832
But there's an aha here.

28
00:01:49.204 --> 00:01:57.500
If we try to create an empty
set with just curly braces.

29
00:02:00.605 --> 00:02:04.059
We are instead going to
end up with a dictionary

30
00:02:04.059 --> 00:02:08.586
because dictionaries are also
surrounded by curly braces.

31
00:02:08.586 --> 00:02:13.074
So if you need to create
an empty set in this case,

32
00:02:13.074 --> 00:02:16.911
you will want to use the set constructor.

33
00:02:16.911 --> 00:02:22.143
And that will give you the empty
set that you are looking for.

34
00:02:22.143 --> 00:02:28.604
Sets can have one item in them Or

35
00:02:28.604 --> 00:02:33.571
multiples if we have a set
where I tried to pass in,

36
00:02:33.571 --> 00:02:38.538
three, three and
four can anyone on zoom tell me,

37
00:02:38.538 --> 00:02:41.990
how many items will be in this set?

38
00:02:41.990 --> 00:02:49.759
Two, awesome, because sets
can't contain duplicate values.

39
00:02:49.759 --> 00:02:52.594
If you have a list of names

40
00:03:03.506 --> 00:03:07.598
And you wanted to very
quickly duplicate this list,

41
00:03:07.598 --> 00:03:11.970
you can actually just pass
it into the SEC constructor.

42
00:03:11.970 --> 00:03:18.690
No more duplicates so
one of the very handy use cases for sets.

43
00:03:18.690 --> 00:03:25.391
Sets cannot contain mutable types without
having to always look at the cheat sheet.

44
00:03:25.391 --> 00:03:27.193
How do we know what types are immutable?

45
00:03:27.193 --> 00:03:29.325
What types are not?

46
00:03:29.325 --> 00:03:31.510
Shortcut to check for mutability,

47
00:03:35.192 --> 00:03:42.928
Is to use the built in hash function.

48
00:03:42.928 --> 00:03:45.220
Can I call hash on an integer?

49
00:03:45.220 --> 00:03:47.741
Yes, can I call hash on a string?

50
00:03:47.741 --> 00:03:52.075
Yes, can I call hash on a list?

51
00:03:52.075 --> 00:03:56.547
Nope, it's immutable,
it's an unhackable type.

52
00:03:56.547 --> 00:04:04.904
What happens if I try to have
a set with a list in it?

53
00:04:04.904 --> 00:04:09.078
I'm going to get that same
error on hashable type list.

54
00:04:09.078 --> 00:04:12.614
You're probably going to see
this exception quite a bit,

55
00:04:12.614 --> 00:04:14.716
so I encourage you to remember it.

56
00:04:14.716 --> 00:04:19.458
And when you run into exceptions
like this, just read them from

57
00:04:19.458 --> 00:04:24.116
the bottom up and think where
else have I seen this exception?

58
00:04:24.116 --> 00:04:27.149
And that's gonna help you get
to the root of the problem.

59
00:04:30.947 --> 00:04:34.454
Now, sets, don't have an order.

60
00:04:34.454 --> 00:04:39.923
So, if I put a bunch of items into a set.

61
00:04:39.923 --> 00:04:42.859
There is no guarantee at all,

62
00:04:42.859 --> 00:04:48.033
that they will be the same
order that I put them into.

63
00:04:48.033 --> 00:04:51.908
Because in sets order does not matter.

64
00:04:51.908 --> 00:04:58.203
What is going to happen if I try to
get the zeroeth item in the set?

65
00:04:58.203 --> 00:05:01.844
Can I do this?

66
00:05:01.844 --> 00:05:04.252
Nope, it's going to blow up and

67
00:05:04.252 --> 00:05:09.160
say is that object is not scriptable
that makes a whole lot of sense

68
00:05:09.160 --> 00:05:14.442
right sets don't have an order there
is no item at the zero with index.

69
00:05:14.442 --> 00:05:21.583
And in the same vein, I cannot say my set
zero equals some other item because again,

70
00:05:21.583 --> 00:05:27.212
there is no order in sets and
sets do not support item assignment.

71
00:05:27.212 --> 00:05:34.002
If you do want to add and
remove from sets,

72
00:05:34.002 --> 00:05:39.050
you can use the add operation.

73
00:05:39.050 --> 00:05:42.426
And again,
because I'm calling this on my set, and

74
00:05:42.426 --> 00:05:45.360
my set is mutable that
does in fact change it.

75
00:05:45.360 --> 00:05:48.136
I can also call the discard operation.

76
00:05:55.670 --> 00:05:58.167
And that goes ahead and
removes the item from the set.

77
00:06:02.492 --> 00:06:07.793
If I had two sets and
I wanted to combine them together,

78
00:06:07.793 --> 00:06:10.796
I could use the update method.

79
00:06:10.796 --> 00:06:15.589
So I could say that colors are red and
orange.

80
00:06:15.589 --> 00:06:21.137
Oops, I'm going to name this colors and

81
00:06:21.137 --> 00:06:27.345
numbers are a set that is one,
two and three.

82
00:06:27.345 --> 00:06:34.337
So if I look at my colors, I could call
colors update and pass in my numbers.

83
00:06:34.337 --> 00:06:36.890
And now I have a new set.

84
00:06:36.890 --> 00:06:40.320
Member set is mutable I
called update on it and

85
00:06:40.320 --> 00:06:43.308
that has in fact changed the data in it.

86
00:06:43.308 --> 00:06:47.979
There are set operations like
difference intersection.

87
00:06:47.979 --> 00:06:51.695
I'm not going to cover them but
there is a section on

88
00:06:51.695 --> 00:06:56.285
those in the set operations cheat
sheet on the course website.

89
00:06:56.285 --> 00:07:00.706
So set operations are the most useful and
most powerful.

90
00:07:00.706 --> 00:07:05.812
Feature of sets,
you can quickly figure out what items

91
00:07:05.812 --> 00:07:11.362
are the same between two sets,
what items are different and

92
00:07:11.362 --> 00:07:14.475
do that in a very performant way.

93
00:07:14.475 --> 00:07:16.359
Next up, we have dictionaries.

94
00:07:16.359 --> 00:07:24.432
Dictionaries are a data type that
allow us to store key and value pairs.

95
00:07:24.432 --> 00:07:31.305
Dictionaries themselves are mutable,
but just like sets,

96
00:07:31.305 --> 00:07:36.571
dictionary keys can only be immutable,
why?

97
00:07:36.571 --> 00:07:40.166
Because dictionary keys
need to be hashable.

98
00:07:40.166 --> 00:07:45.287
Dictionaries allow fast item lookup and
fast membership testing.

99
00:07:45.287 --> 00:07:50.330
You can quickly say given a key is
this key in my dictionary or not?

100
00:07:50.330 --> 00:07:54.977
And that's because the hash of the key
is compared with the hash of the keys in

101
00:07:54.977 --> 00:07:56.077
the dictionary.

102
00:07:56.077 --> 00:08:00.725
You don't have to look through
each item in that dictionary and

103
00:08:00.725 --> 00:08:04.065
say, are you the item
that I'm looking for?

104
00:08:04.065 --> 00:08:08.361
So can I have a list as
a dictionary in a key I'm sorry,

105
00:08:08.361 --> 00:08:13.710
a list as a key in the dictionary
by asked that question correctly,

106
00:08:13.710 --> 00:08:16.020
I would get a better answer.

107
00:08:16.020 --> 00:08:17.422
No, right?

108
00:08:17.422 --> 00:08:21.909
So a list is mutable dictionary
keys can only be immutable.

109
00:08:21.909 --> 00:08:26.146
We cannot have mutable data
types as dictionary keys.

110
00:08:26.146 --> 00:08:31.042
Can we have a tuple as
a dictionary key yes,

111
00:08:31.042 --> 00:08:37.850
tuples are immutable so
we can use them as a dictionary key.

112
00:08:37.850 --> 00:08:40.859
I have a dictionary cheat sheet here for
you.

