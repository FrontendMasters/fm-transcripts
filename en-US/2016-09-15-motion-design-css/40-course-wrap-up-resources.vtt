WEBVTT

1
00:00:00.000 --> 00:00:04.009
[MUSIC]

2
00:00:04.009 --> 00:00:05.470
&gt;&gt; Rachel Nabors: Let's
go back into Chrome.

3
00:00:05.470 --> 00:00:09.800
Because Chrome did tout that they were
gonna have some super super cool animation

4
00:00:09.800 --> 00:00:12.360
tools at Chrome Dev Summit this year.

5
00:00:12.360 --> 00:00:14.515
Hang on, hang on, we can do this.

6
00:00:14.515 --> 00:00:17.315
I don't want you there anymore,
I want you here.

7
00:00:17.315 --> 00:00:18.075
There you go.

8
00:00:18.075 --> 00:00:19.475
That's better.
Thank you, Chrome.

9
00:00:19.475 --> 00:00:21.195
Thank you for listening to me.

10
00:00:21.195 --> 00:00:22.785
I don't want to see timeline.

11
00:00:22.785 --> 00:00:24.785
I want to go to.

12
00:00:24.785 --> 00:00:28.695
Have to hit escape and
then go to animations.

13
00:00:28.695 --> 00:00:30.610
I'm just gonna make this one bigger.

14
00:00:30.610 --> 00:00:34.398
If I can, there we go, aw I can't.

15
00:00:34.398 --> 00:00:36.324
So anyway.

16
00:00:36.324 --> 00:00:40.080
Elements, there we go.

17
00:00:40.080 --> 00:00:42.440
Making the animations really big.

18
00:00:42.440 --> 00:00:43.730
Now I'm gonna refresh it.

19
00:00:43.730 --> 00:00:44.310
So check it out.

20
00:00:44.310 --> 00:00:47.490
You see these little things
happening down here.

21
00:00:47.490 --> 00:00:49.640
These are actually
collections of animations and

22
00:00:49.640 --> 00:00:51.210
they let you skip between them.

23
00:00:52.590 --> 00:00:55.470
So when I click this to go down,

24
00:00:55.470 --> 00:00:58.270
this should result in
another set of animations.

25
00:00:58.270 --> 00:01:02.210
This tool may or
may not be handy to you in your workplace.

26
00:01:02.210 --> 00:01:06.130
But the idea is that you can
jump back into the animation and

27
00:01:06.130 --> 00:01:08.738
have access to its timeline.

28
00:01:08.738 --> 00:01:13.969
See how I'm moving her forward and
backward and her screaming kicking or

29
00:01:13.969 --> 00:01:19.213
all the way back to the beginning here and
I can actually like stop [SOUND].

30
00:01:19.213 --> 00:01:21.190
I have a little bit more control.

31
00:01:21.190 --> 00:01:27.110
It's a new feature, it's not as
100% useful as I'd like it to be,

32
00:01:27.110 --> 00:01:29.100
but I admire the chrome team for

33
00:01:29.100 --> 00:01:35.290
their ambition in creating this
animation and this animation tool set.

34
00:01:35.290 --> 00:01:37.540
You can even hit pause
you can just remove them.

35
00:01:38.770 --> 00:01:39.410
It's a good idea.

36
00:01:39.410 --> 00:01:40.439
I like where they're going.

37
00:01:43.498 --> 00:01:46.008
&gt;&gt; Rachel Nabors: But
I actually have some experience with some

38
00:01:46.008 --> 00:01:49.190
really cool animation tools
that I had some fun input on.

39
00:01:49.190 --> 00:01:52.750
There is this site that I
helped build with Mozilla.

40
00:01:52.750 --> 00:01:57.209
I'm just going to say,
you know a disclaimer, I worked on this.

41
00:01:58.540 --> 00:02:03.100
Basically, it's this little educational
site that shows you how to use

42
00:02:03.100 --> 00:02:07.340
the dev tools over at
Firefox Developer Edition.

43
00:02:09.140 --> 00:02:11.677
And it's neat because not
only is it a tutorial.

44
00:02:15.793 --> 00:02:17.290
&gt;&gt; Rachel Nabors: Not
only is it a tutorial.

45
00:02:18.600 --> 00:02:23.930
But it also rewards you for
doing things right with knowledge.

46
00:02:23.930 --> 00:02:29.400
It's an underwater tour, they're little
videos that show you how to use each tool.

47
00:02:29.400 --> 00:02:34.590
So what we're doing here is you'll
notice that this fish, he has a paused,

48
00:02:34.590 --> 00:02:38.530
he is paused in his animation,
it's not set to running.

49
00:02:38.530 --> 00:02:40.090
But we can use the animations tab.

50
00:02:40.090 --> 00:02:45.778
Boop, boop, there's the animations tab,
to actually hit play and

51
00:02:45.778 --> 00:02:50.682
there he goes and that triggers
an event which gets all of his

52
00:02:50.682 --> 00:02:54.919
little swimmy,
flashy buddies to join the party.

53
00:02:54.919 --> 00:02:59.827
And the other fun thing is
after we get him there,

54
00:02:59.827 --> 00:03:03.298
We can actually go all the way up and

55
00:03:03.298 --> 00:03:08.208
check out all of the fishies
that are swimming and

56
00:03:08.208 --> 00:03:16.740
we can actually manipulate all of their
different timelines together and hit play.

57
00:03:17.800 --> 00:03:18.620
That's a lot of fun.

58
00:03:20.120 --> 00:03:24.210
There's examples for the cubic-bezier
tools which we already experimented with.

59
00:03:26.340 --> 00:03:29.230
Actually I'm going to turn
the motion off for this.

60
00:03:30.340 --> 00:03:34.590
So this one might induce seizures in
some folks but this is now flashing at

61
00:03:34.590 --> 00:03:39.340
such a rate that you can see that
it's not going to cause seizures.

62
00:03:39.340 --> 00:03:46.564
This is a low motion alternative,
&gt;&gt; Rachel Nabors: But

63
00:03:46.564 --> 00:03:50.084
the idea there was that you would scrub
to see that the squid aren't actually

64
00:03:50.084 --> 00:03:54.880
flashing red and white, they're actually
fading really really fast between the two.

65
00:03:54.880 --> 00:03:56.135
Just like they do in the wild.

66
00:03:56.135 --> 00:04:00.260
Let's see,
do I have any other really cool tools?

67
00:04:00.260 --> 00:04:02.770
So basically I think I'm
just showing you off,

68
00:04:02.770 --> 00:04:05.540
showing off these cool little
animation tools over here.

69
00:04:05.540 --> 00:04:06.680
I love the timeline.

70
00:04:06.680 --> 00:04:08.660
I love how cute it is.

71
00:04:08.660 --> 00:04:11.820
I love how it lets us see
exactly who's moving and

72
00:04:11.820 --> 00:04:14.880
then we can see the different changes
like this is that cheek patch.

73
00:04:16.560 --> 00:04:19.230
See, can we jump to this guy?

74
00:04:19.230 --> 00:04:20.470
Scroll interview.

75
00:04:20.470 --> 00:04:20.970
There we go.

76
00:04:22.790 --> 00:04:26.820
Hit play and notice how I hit play on just
that blinking cheat patch right there.

77
00:04:26.820 --> 00:04:31.540
And if I want to get them all playing,
I go all the way

78
00:04:31.540 --> 00:04:36.818
up, and hit them all.

79
00:04:36.818 --> 00:04:40.390
There we go.

80
00:04:40.390 --> 00:04:43.670
Right now the two browsers are sort
of caught in a death struggle for

81
00:04:43.670 --> 00:04:45.771
who can create the best
timeline tools first.

82
00:04:46.850 --> 00:04:47.710
I'll be quite blunt.

83
00:04:48.940 --> 00:04:50.260
Neither of these tools are perfect.

84
00:04:51.490 --> 00:04:54.088
Part of that is because the original
tools were flash based.

85
00:04:54.088 --> 00:04:57.560
They were a UI built by
a commercial company, Adobe.

86
00:04:57.560 --> 00:05:00.440
And their solution worked for
their developers.

87
00:05:00.440 --> 00:05:02.730
It doesn't necessarily mean that
that's the solution that's going to

88
00:05:02.730 --> 00:05:04.300
work with the web.

89
00:05:04.300 --> 00:05:05.540
Flash had limitations.

90
00:05:05.540 --> 00:05:08.780
Limitations makes tools easy to use.

91
00:05:08.780 --> 00:05:13.720
The web has its different kind of
imitations and limitations, and

92
00:05:13.720 --> 00:05:18.090
those limitations can make it
harder to build tools for.

93
00:05:18.090 --> 00:05:22.430
I'm hoping that we will see a competitive
race to make the best animation tools

94
00:05:22.430 --> 00:05:24.840
where the best ones will win.

95
00:05:24.840 --> 00:05:27.430
The best ones for the community that is.

96
00:05:27.430 --> 00:05:28.740
That's my hopes.

97
00:05:28.740 --> 00:05:31.542
Experiment with both of them,
figure out which one makes you happier.

98
00:05:31.542 --> 00:05:36.065
For me, using Firefox developer tools
made the project go so much faster and

99
00:05:36.065 --> 00:05:38.790
I had a lot of input
on this isn't working.

100
00:05:38.790 --> 00:05:39.850
This is working, etc.

101
00:05:41.430 --> 00:05:42.750
So pick what works for

102
00:05:42.750 --> 00:05:46.280
your workflow, but do know that
there are animation tools, and

103
00:05:46.280 --> 00:05:51.680
when you are developing animations, they
make animation development so much faster.

104
00:05:51.680 --> 00:05:54.250
Especially being able to change
things like Bezier curves and

105
00:05:54.250 --> 00:05:57.210
durations on the fly, and
being able to scrub back and forth and

106
00:05:57.210 --> 00:05:59.730
slow down the overall animation time.

107
00:05:59.730 --> 00:06:00.451
So much useful.

108
00:06:03.042 --> 00:06:04.680
&gt;&gt; Rachel Nabors: All right.

109
00:06:04.680 --> 00:06:07.920
Here's the fun part where I get to give
you a little taste of what's coming up.

110
00:06:08.950 --> 00:06:12.880
The Web Animation API is actually
what lets both Chrome and

111
00:06:12.880 --> 00:06:15.300
Firefox build tools like these.

112
00:06:15.300 --> 00:06:18.375
I've mentioned it throughout this talk,
and this workshop.

113
00:06:18.375 --> 00:06:22.230
CSS animations are great but
they can't do it all, and

114
00:06:22.230 --> 00:06:27.260
specifically the web animations API
underlies the CSS animations and

115
00:06:27.260 --> 00:06:30.690
you can write animation
in the web animation API.

116
00:06:30.690 --> 00:06:34.499
It's not just for browsers to access CSS
animations that you can build tools with.

117
00:06:34.499 --> 00:06:40.441
It's also for you to build animations
with using JavaScript and CSS properties.

118
00:06:40.441 --> 00:06:44.809
Just as a little sample of what it
can do that CSS on its own can't.

119
00:06:47.997 --> 00:06:51.058
&gt;&gt; Rachel Nabors: When we add cats with
CSS you'll notice that they're not

120
00:06:51.058 --> 00:06:52.680
all running in sync.

121
00:06:52.680 --> 00:06:56.490
That's because each one of these
animations starts at a different

122
00:06:56.490 --> 00:06:59.570
time on the document system clock.

123
00:06:59.570 --> 00:07:02.100
So all of these animations
are starting at different times and

124
00:07:02.100 --> 00:07:04.420
we physically have no way
of synchronizing them.

125
00:07:04.420 --> 00:07:09.146
There is no way to synchronize
those animations with CSS, but

126
00:07:09.146 --> 00:07:14.680
with the web animations API,
we are actually able to copy

127
00:07:14.680 --> 00:07:20.770
the current time of each cat and then use
it for each other cat that we're making.

128
00:07:20.770 --> 00:07:24.770
This way they all run in sync,
no matter when we add them useful,

129
00:07:24.770 --> 00:07:26.990
not useful, use cases will tell.

130
00:07:29.150 --> 00:07:32.840
And another fun thing which is
useful from a usability perspective,

131
00:07:32.840 --> 00:07:35.260
we have access to that playback rate.

132
00:07:35.260 --> 00:07:39.680
So what happens is we can speed up
how long this animation is taking or

133
00:07:39.680 --> 00:07:40.570
we can slow it down.

134
00:07:43.520 --> 00:07:44.840
Well, I slowed it down too much.

135
00:07:49.248 --> 00:07:52.878
&gt;&gt; Rachel Nabors: If you're interested in
things like that I do encourage you check

136
00:07:52.878 --> 00:07:56.310
out these CodePens, and
keep an eye on MDN's web animation,

137
00:07:56.310 --> 00:08:00.430
API documentation as I'm currently
updating it and writing it.

138
00:08:00.430 --> 00:08:03.670
And future generations will get
to go there and check it out.

139
00:08:03.670 --> 00:08:08.588
For more information just keep
an eye on rachelnabors.com/waapi,

140
00:08:08.588 --> 00:08:10.180
or web animation API.

141
00:08:10.180 --> 00:08:15.990
You can find me on rachelnabors at
Twitter or at rachelnabors.com.

142
00:08:15.990 --> 00:08:20.260
I would be ever so happy if you joined
the slack animation at work community.

143
00:08:21.380 --> 00:08:25.770
This is a great place to meet other people
who are working with CSS animations,

144
00:08:25.770 --> 00:08:29.390
the web animation API,
GSAP, all things animated.

145
00:08:29.390 --> 00:08:34.160
We are all good friends and we'd love
to have you sign up for web animation

146
00:08:34.160 --> 00:08:38.340
weekly if you haven't already, all new
animation of elements go out there weekly.

147
00:08:39.350 --> 00:08:40.920
And if you have the chance,

148
00:08:40.920 --> 00:08:44.180
I have a five minute survey I would
be super happy if you would take it.

149
00:08:44.180 --> 00:08:45.410
I will even give you a coupon for

150
00:08:45.410 --> 00:08:47.960
one of my other online
courses as a special thanks.

151
00:08:49.570 --> 00:08:51.920
Lastly, let's be animation friends.

152
00:08:53.660 --> 00:08:55.300
&gt;&gt; Speaker 2: There is one
last question from Kevin.

153
00:08:55.300 --> 00:08:56.170
&gt;&gt; Rachel Nabors: All right.

154
00:08:56.170 --> 00:09:00.290
&gt;&gt; Speaker 2: What are you most looking
forward to do with animation and

155
00:09:00.290 --> 00:09:01.900
an API you haven't explored yet?

156
00:09:03.600 --> 00:09:05.522
&gt;&gt; Rachel Nabors: I'm not
sure how to interpret that.

157
00:09:05.522 --> 00:09:07.875
Is that an API that I haven't explored,

158
00:09:07.875 --> 00:09:12.390
like an API that I would like to use with
animation that hasn't been made yet?

159
00:09:13.440 --> 00:09:18.200
Or is that the web animation's API,
something I haven't done with it yet?

160
00:09:18.200 --> 00:09:23.385
&gt;&gt; Speaker 2: What you're looking forward
to not doing was CSS transitions and

161
00:09:23.385 --> 00:09:25.181
animation with WAPI.

162
00:09:25.181 --> 00:09:30.163
&gt;&gt; Rachel Nabors: I'm actually looking
forward to be able to move behavior fully

163
00:09:30.163 --> 00:09:31.970
into JavaScript.

164
00:09:31.970 --> 00:09:35.330
Because right now we are having
to define behavior in CSS,

165
00:09:35.330 --> 00:09:37.630
this thing should move like this.

166
00:09:37.630 --> 00:09:38.150
But, for

167
00:09:38.150 --> 00:09:42.820
a lot of us i know is comfortable to move
that sort of behavior into JavaScript, and

168
00:09:42.820 --> 00:09:48.430
to have JavaScript handlers doing this,
if animations are available to them or

169
00:09:48.430 --> 00:09:53.210
not doing it at all and just substituting
jump cuts if it's not the case.

170
00:09:53.210 --> 00:09:57.770
I would love the idea that you could build
a JavaScript library from scratch to just

171
00:09:57.770 --> 00:10:01.260
handle your user interfaces
animations the way you want.

172
00:10:01.260 --> 00:10:04.310
Not having to download a big
beefy library like GreenSock.

173
00:10:04.310 --> 00:10:07.350
Not having to use
somebody's SAS functions,

174
00:10:07.350 --> 00:10:10.690
just being able to build something
specifically for your needs.

175
00:10:10.690 --> 00:10:13.590
That's the most exciting part for
me of the web animations API.

176
00:10:13.590 --> 00:10:18.002
It will really let people approach
animation from a more programmatic angle.

177
00:10:19.928 --> 00:10:21.060
&gt;&gt; Rachel Nabors: Good question, Kevin.

