WEBVTT

1
00:00:00.000 --> 00:00:03.934
[MUSIC]

2
00:00:03.934 --> 00:00:05.453
&gt;&gt; Rachel Nabors: So
with all this state going around,

3
00:00:05.453 --> 00:00:06.880
isn't it hard to keep track of it?

4
00:00:07.910 --> 00:00:09.720
Yes, yes, it is.

5
00:00:09.720 --> 00:00:14.220
On rachelnabors.com, I store whether or
not the sidebar is open.

6
00:00:14.220 --> 00:00:17.060
So that when people come back,
the sidebar is either open or

7
00:00:17.060 --> 00:00:18.940
closed depending on where they go.

8
00:00:18.940 --> 00:00:20.460
Notice that they left it closed.

9
00:00:20.460 --> 00:00:22.410
They bounced over to the site.

10
00:00:22.410 --> 00:00:26.794
Now they're gonna go back to my site and
it's still closed.

11
00:00:26.794 --> 00:00:29.270
[SOUND] How did I do that?

12
00:00:29.270 --> 00:00:32.955
I am using local storage to
remember where they were.

13
00:00:32.955 --> 00:00:38.827
And then I'm using that to a set a class
of sidebar opened on the main page or

14
00:00:38.827 --> 00:00:40.270
sidebar closed.

15
00:00:40.270 --> 00:00:45.090
Now for this feed taking care of
Rachel thing, this pet Rachel.

16
00:00:46.430 --> 00:00:51.514
I was using JavaScript to keep track of
what her state should be like at any time.

17
00:00:51.514 --> 00:00:54.840
But I was storing how she
should look with CSS.

18
00:00:54.840 --> 00:00:59.220
And there's a difference between what
something is and how it should look.

19
00:00:59.220 --> 00:01:03.830
And this made a lot of sense when I
was developing this with CSS in mind.

20
00:01:03.830 --> 00:01:06.582
However, the client project used SVG.

21
00:01:06.582 --> 00:01:12.170
And SVG is best animated with
a library at this point called GSAP.

22
00:01:12.170 --> 00:01:16.340
Because GSAP also does a really
good job of normalizing

23
00:01:16.340 --> 00:01:18.960
SVG behaviors across browsers.

24
00:01:18.960 --> 00:01:22.220
SVG can behave a little
weird in certain browsers.

25
00:01:22.220 --> 00:01:24.405
So for backwards compatibility and

26
00:01:24.405 --> 00:01:28.166
cross-browser normalization, we decided
it would be a good idea to go with GSAP.

27
00:01:28.166 --> 00:01:31.313
If you want to learn more
about SVG animation and

28
00:01:31.313 --> 00:01:35.650
GSAP, Sarah Drasner has a lovely
course with Frontend Masters.

29
00:01:35.650 --> 00:01:37.416
Which is probably a great place to start.

30
00:01:37.416 --> 00:01:42.532
So this is what my code started
looking like once I started

31
00:01:42.532 --> 00:01:49.050
trying to control all of the animations
and the states with JavaScript.

32
00:01:49.050 --> 00:01:51.390
And it started getting pretty big.

33
00:01:51.390 --> 00:01:56.360
What I had in a couple of
states started blimping out.

34
00:01:56.360 --> 00:02:01.190
So perhaps it would have been different
if I'd come into this project thinking in

35
00:02:01.190 --> 00:02:05.870
terms of making my states
displaying with both.

36
00:02:05.870 --> 00:02:10.230
[LAUGH] Perhaps it would
have been better if I had

37
00:02:10.230 --> 00:02:12.360
been working with JavaScript
from the beginning.

38
00:02:12.360 --> 00:02:15.810
And hadn't built this prototype
using CSS and JavaScript together.

39
00:02:15.810 --> 00:02:17.520
Because I grew lazy.

40
00:02:17.520 --> 00:02:22.700
I was relying on CSS to remember
what the state should look like.

41
00:02:22.700 --> 00:02:24.325
I was taking advantage of that.

42
00:02:24.325 --> 00:02:27.630
You get state handling for free with CSS.

43
00:02:27.630 --> 00:02:29.340
If the class is there,
it should be like this.

44
00:02:29.340 --> 00:02:33.055
If the class is not there, go do the thing
that was in the cascade before it.

45
00:02:33.055 --> 00:02:35.460
CSS gives you a lot of freebies like that.

46
00:02:35.460 --> 00:02:39.600
And I learned that what's good for
the declarative CSS Goose is not always so

47
00:02:39.600 --> 00:02:42.840
great for
the functional JavaScript Gander.

48
00:02:42.840 --> 00:02:46.920
So keep in mind, if you're doing
state-based animations just

49
00:02:46.920 --> 00:02:50.856
with JavaScript, you might have
a more difficult time of it.

50
00:02:54.348 --> 00:02:55.385
&gt;&gt; Speaker 2: Before we move on.

51
00:02:55.385 --> 00:02:56.340
&gt;&gt; Rachel Nabors: Yes?

52
00:02:56.340 --> 00:02:59.625
&gt;&gt; Speaker 2: I have another
question from Philippe.

53
00:02:59.625 --> 00:03:01.440
&gt;&gt; Rachel Nabors: All right.

54
00:03:01.440 --> 00:03:06.050
&gt;&gt; Speaker 2: Is SVG animation
supported with CSS on IE Edge?

55
00:03:07.324 --> 00:03:10.440
&gt;&gt; Rachel Nabors: Yes, so

56
00:03:10.440 --> 00:03:14.440
the interesting thing with SVG is
that SVG is a bunch of DOM elements.

57
00:03:14.440 --> 00:03:16.590
It's a specific way of
writing DOM elements.

58
00:03:16.590 --> 00:03:19.920
So, it's the same as a div or a p tag.

59
00:03:19.920 --> 00:03:23.115
You've just got an SVG
with a g tag inside it.

60
00:03:23.115 --> 00:03:26.150
And you can animate it the same
way you animate those things.

61
00:03:26.150 --> 00:03:29.340
There are a couple of different
properties that SVGs have.

62
00:03:29.340 --> 00:03:33.909
Like outlines and such that you won't
find in your regular old p tags, etc.

63
00:03:35.150 --> 00:03:39.400
The issue with animating SVG with CSS is

64
00:03:39.400 --> 00:03:44.430
figuring out which of those properties
are animatable in which browsers.

65
00:03:44.430 --> 00:03:47.850
In fact, some of them,
like in the olden days, the g tag for

66
00:03:47.850 --> 00:03:49.460
some browsers was not animatable.

67
00:03:49.460 --> 00:03:53.210
So don't bother trying to
animate anything on the g tag.

68
00:03:53.210 --> 00:03:57.880
But more and more browsers are making
those SVG elements animatable with CSS.

69
00:03:57.880 --> 00:04:01.720
So you don't have to go in there and
manipulate them directly with JavaScript.

70
00:04:03.800 --> 00:04:06.770
It's a bit confusing because
we tend to think about SVG

71
00:04:06.770 --> 00:04:09.674
animation as being something
different from CSS animation.

72
00:04:09.674 --> 00:04:16.380
There is an SVG language, SMIL,
made specifically for animating SVG.

73
00:04:16.380 --> 00:04:18.938
It's also called smile,
that's how you pronounce it.

74
00:04:18.938 --> 00:04:24.069
Downside to SMIL is that it is
currently deprecated in Chrome.

75
00:04:24.069 --> 00:04:27.857
And Chrome was like the big pusher for
everyone should use SMIL.

76
00:04:27.857 --> 00:04:31.866
And it's the whole reason we have a web
animations API was so that browsers

77
00:04:31.866 --> 00:04:36.370
could write the animation rules for CSS
and transitions and animations and SMIL.

78
00:04:36.370 --> 00:04:38.821
And incorporate them
all with this one API.

79
00:04:38.821 --> 00:04:40.780
And it would rule them all and
everything would be awesome.

80
00:04:40.780 --> 00:04:43.350
But then SMIL got deprecated,
but we still have this API.

81
00:04:43.350 --> 00:04:45.359
So maybe one day, it will come back.

82
00:04:45.359 --> 00:04:50.740
But in the meantime,
we animate SVG with CSS.

83
00:04:50.740 --> 00:04:53.480
And sometimes, browsers are buggy.

84
00:04:54.770 --> 00:04:59.580
And yes, I can animate a g tag or
I can animate that SVG property.

85
00:05:00.650 --> 00:05:02.540
GSAP normalizes that kind of behavior.

86
00:05:04.000 --> 00:05:07.371
It's a crying shame,
browsers should have more pride.

87
00:05:09.542 --> 00:05:12.160
&gt;&gt; Rachel Nabors: So good question.

88
00:05:12.160 --> 00:05:14.820
I hope I managed to clarify that.

89
00:05:14.820 --> 00:05:19.810
I'm sure in the future,
before I move on here, browsers will

90
00:05:19.810 --> 00:05:25.320
have normalized their abilities
to animate and display SVG.

91
00:05:25.320 --> 00:05:29.630
Such that we will have sites like
you might not need GSAP the same

92
00:05:29.630 --> 00:05:32.380
way we have sites like you
might not need jQuery.

93
00:05:32.380 --> 00:05:35.470
Because there was a time when
selecting things without jQuery

94
00:05:35.470 --> 00:05:36.864
was a pain in the butt.

95
00:05:36.864 --> 00:05:39.630
Then jQuery came along,
showed browsers how to do it.

96
00:05:39.630 --> 00:05:42.660
Browsers got on their game and
gave us better selectors for going out and

97
00:05:42.660 --> 00:05:44.570
manipulating JavaScript.

98
00:05:44.570 --> 00:05:51.531
By tag, by element, by ID,
by class, etc, more natural syntax.

99
00:05:51.531 --> 00:05:54.987
So this is the same thing that we're
seeing with CSS animations and

100
00:05:54.987 --> 00:05:56.971
with the web animation API coming up.

101
00:05:56.971 --> 00:06:01.240
In the future, hopefully,
browsers will all work as well.

102
00:06:01.240 --> 00:06:03.100
And we'll all be very performant.

103
00:06:03.100 --> 00:06:06.348
And we won't have to worry so
much about handling those buggy browsers.

104
00:06:06.348 --> 00:06:09.459
But until then, for
mission critical projects,

105
00:06:09.459 --> 00:06:12.059
you might want to check GSAP for your SVG.

106
00:06:14.605 --> 00:06:18.220
&gt;&gt; Rachel Nabors: So libraries for
managing those state.

107
00:06:18.220 --> 00:06:21.650
If you use JavaScript for
complex stateful animation.

108
00:06:21.650 --> 00:06:24.940
You'll probably want to implement
some sort of a state machine strapped

109
00:06:24.940 --> 00:06:28.500
separately to keep track of that,
or you might struggle a lot.

110
00:06:28.500 --> 00:06:32.650
No CSS free rides,
although this could act.

111
00:06:32.650 --> 00:06:35.010
This is JavaScript Finite State Machine,

112
00:06:35.010 --> 00:06:37.620
which handles linear
state transitions easily.

113
00:06:37.620 --> 00:06:39.660
But many-to-many states get complicated.

114
00:06:39.660 --> 00:06:43.920
I've actually found many-to-many
states are what CSS excels at.

115
00:06:43.920 --> 00:06:45.610
It handles any change just like that.

116
00:06:45.610 --> 00:06:48.870
I get that, I totally understand,
I'll just check the cascade.

117
00:06:48.870 --> 00:06:51.790
And there's also jStorage.

118
00:06:51.790 --> 00:06:56.540
JStorage is what I'm using to stash
values in localStorage on my site.

119
00:06:56.540 --> 00:06:59.970
It's great for helping me store state
when people might leave the site and

120
00:06:59.970 --> 00:07:01.130
then come back.

121
00:07:01.130 --> 00:07:03.530
This is really good if you have
people who are going off site.

122
00:07:03.530 --> 00:07:05.950
And you want to make that transition
a little bit easier for them.

123
00:07:05.950 --> 00:07:07.050
And keep track of where they were.

124
00:07:08.640 --> 00:07:10.540
And it's library agnostic as a bonus.

