WEBVTT

1
00:00:00.000 --> 00:00:04.097
[MUSIC]

2
00:00:04.097 --> 00:00:07.672
&gt;&gt; Rachel: Before we dive too far into the
tools which are fun, it's important that

3
00:00:07.672 --> 00:00:12.280
we acknowledge, that all browsers have
slightly different rendering pipelines.

4
00:00:12.280 --> 00:00:16.612
They all have their own ways of doing
things and a lot of perf people,

5
00:00:16.612 --> 00:00:19.817
tend to forget that and
only optimize for Chrome.

6
00:00:19.817 --> 00:00:24.167
Because it's got the nicest dev tools and
it's got the biggest share of the market,

7
00:00:24.167 --> 00:00:26.017
but Chrome is not the only browser.

8
00:00:26.017 --> 00:00:29.619
And it has a very specific
performance space and

9
00:00:29.619 --> 00:00:33.786
it has a very specific pipeline for
rendering things.

10
00:00:33.786 --> 00:00:38.830
But it is one that we are very
familiar with, and thus I will use

11
00:00:38.830 --> 00:00:43.770
it to describe one browser's
kind of development.

12
00:00:43.770 --> 00:00:45.050
This is CSS.

13
00:00:45.050 --> 00:00:46.470
&gt;&gt; Speaker 2: Sorry I'm gonna interrupt,

14
00:00:46.470 --> 00:00:48.570
can we just get that
question really quick?

15
00:00:48.570 --> 00:00:49.100
&gt;&gt; Rachel: Yes, I'm sorry.

16
00:00:49.100 --> 00:00:50.292
&gt;&gt; Speaker 2: There's, no, that's okay.

17
00:00:50.292 --> 00:00:55.326
Okay, so before you jump into performance
staff, Christine has a question,

18
00:00:55.326 --> 00:00:59.291
is there any way to reverse
an animation from animation fill,

19
00:00:59.291 --> 00:01:03.200
forwards back to the beginning,
initiated by user action?

20
00:01:05.182 --> 00:01:06.000
&gt;&gt; Rachel: That's a good question.

21
00:01:06.000 --> 00:01:10.240
Let's see,
reverse an animation from fill forwards.

22
00:01:15.610 --> 00:01:21.100
&gt;&gt; Rachel: I would assume that
Christine has already tried using

23
00:01:21.100 --> 00:01:26.224
something like changing
the animation to reverse

24
00:01:26.224 --> 00:01:32.083
in that situation,
changing its direction to reverse.

25
00:01:32.083 --> 00:01:35.630
But you would need to also give it
another set of iterations to complete.

26
00:01:35.630 --> 00:01:39.630
And you would have to trigger it to play.

27
00:01:39.630 --> 00:01:42.850
So to that, I'm gonna answer I don't know.

28
00:01:42.850 --> 00:01:45.860
I haven't encountered
that use case myself, so

29
00:01:45.860 --> 00:01:49.010
I don't know how to provide a solution for
it.

30
00:01:49.010 --> 00:01:52.147
If anyone has any ideas, would be
awesome to share them with Christine.

31
00:01:52.147 --> 00:01:52.987
&gt;&gt; Speaker 3: GreenSock.

32
00:01:56.481 --> 00:01:57.220
&gt;&gt; Rachel: What did you say?

33
00:01:57.220 --> 00:01:58.049
&gt;&gt; Speaker 3: GreenSock.

34
00:01:58.049 --> 00:01:58.767
&gt;&gt; Rachel: GreenSock.

35
00:01:58.767 --> 00:02:00.082
&gt;&gt; Speaker 3: GSAP.

36
00:02:00.082 --> 00:02:07.293
&gt;&gt; Rachel: All right, that's one option
but GreenSock is not CSS animation.

37
00:02:07.293 --> 00:02:10.544
All right, so this is csstriggers.com.

38
00:02:11.760 --> 00:02:13.480
It used to just be for Chrome.

39
00:02:13.480 --> 00:02:20.660
This is maintained by some Chrome folks.

40
00:02:20.660 --> 00:02:23.400
So originally, it was just for
the Blink engine.

41
00:02:23.400 --> 00:02:28.250
But now it displays information,
about Blink, Gecko, that is,

42
00:02:28.250 --> 00:02:32.780
I believe, Firefox, WebKit, Safari, Opera.

43
00:02:32.780 --> 00:02:35.780
Sorry, Opera is blank and edgeHTML.

44
00:02:35.780 --> 00:02:40.030
So now we can see how all of
these different CSS properties

45
00:02:40.030 --> 00:02:41.730
affect their rendering pipelines as well.

46
00:02:43.360 --> 00:02:46.150
So change from default
is that initial change,

47
00:02:46.150 --> 00:02:50.030
when you first animate something and
then subsequent updates after it started

48
00:02:50.030 --> 00:02:55.220
changing, how much does it
cost to continue changing it.

49
00:02:55.220 --> 00:02:58.710
I'm going to assume that the blank spots
here are for information insufficient.

50
00:03:00.360 --> 00:03:04.490
Now as you can see these do change
a little bit, from one to the other.

51
00:03:04.490 --> 00:03:07.950
This is color coded so
the purple bars represent layout,

52
00:03:07.950 --> 00:03:12.470
the light green ones represent paint and
the dark green ones represent composite.

53
00:03:12.470 --> 00:03:13.320
What do those mean?

54
00:03:14.530 --> 00:03:19.140
So does anyone remember when
we used to build websites?

55
00:03:19.140 --> 00:03:22.680
We were admonished not to use percentages.

56
00:03:22.680 --> 00:03:26.320
We used to use tables, and you could
set them to be like 50% wide, and

57
00:03:26.320 --> 00:03:28.400
the cell would be 25% wide.

58
00:03:28.400 --> 00:03:30.410
And all of the books
used to say things like,

59
00:03:30.410 --> 00:03:34.210
don't use percentages on your images or
on your layouts because

60
00:03:34.210 --> 00:03:37.676
browsers take a long time to
calculate those, use exact widths.

61
00:03:37.676 --> 00:03:42.510
So then we started being like, okay, exact
width, okay, it's 800 pixels wide and

62
00:03:42.510 --> 00:03:43.550
the image should be this.

63
00:03:43.550 --> 00:03:45.120
Browsers are a lot better at doing that.

64
00:03:45.120 --> 00:03:49.200
Computers are a lot faster and now we can
use percentages like nobody's business.

65
00:03:49.200 --> 00:03:52.340
But it still takes browsers
time to calculate,

66
00:03:52.340 --> 00:03:54.170
where everything should be on the page.

67
00:03:54.170 --> 00:03:59.800
From its width all the way to how long the
text is, where this image appears, etc.

68
00:03:59.800 --> 00:04:03.714
It does all these calculations,
that's called the layout process,

69
00:04:03.714 --> 00:04:06.115
where it's calculating where things go.

70
00:04:06.115 --> 00:04:11.760
The paint process is where the individual
items are painted, sometimes on the GPU.

71
00:04:11.760 --> 00:04:15.030
They are painted and
then composite happens.

72
00:04:15.030 --> 00:04:18.120
Where those things
are pasted into the layout.

73
00:04:18.120 --> 00:04:20.980
That's might be a pidgin
way of putting it, but

74
00:04:20.980 --> 00:04:24.160
that's the best way I can describe,
it's a three-step process.

75
00:04:24.160 --> 00:04:26.060
The where, the what, and
then combining them.

76
00:04:28.010 --> 00:04:32.750
So, we can see which of these different
effects are being triggered by which

77
00:04:32.750 --> 00:04:36.520
of these different CSS properties.

78
00:04:37.835 --> 00:04:41.036
I get to do this one
all on the screen now.

79
00:04:41.036 --> 00:04:45.171
So when we see solid bars,
that's a very bad sign.

80
00:04:45.171 --> 00:04:46.537
For instance, a line items.

81
00:04:46.537 --> 00:04:52.655
That changes if words are centered or
if they're right or left aligned.

82
00:04:52.655 --> 00:04:56.121
This can change layout in pretty big ways.

83
00:04:56.121 --> 00:05:00.476
So not only does it trigger layout,
but it also triggers repaints, and

84
00:05:00.476 --> 00:05:02.080
it triggers composites.

85
00:05:02.080 --> 00:05:07.020
So it's a very intensive thing for
any browser to perform.

86
00:05:08.300 --> 00:05:11.350
We get to backface-visibility, we start
seeing that in different browsers,

87
00:05:11.350 --> 00:05:13.550
it doesn't trigger layouts.

88
00:05:13.550 --> 00:05:19.110
It doesn't trigger in Firefox,
it appears to not trigger paint either.

89
00:05:19.110 --> 00:05:21.770
So once you start seeing
these bars greying out,

90
00:05:21.770 --> 00:05:25.460
these are things that
are better to animate.

91
00:05:25.460 --> 00:05:28.390
I don't believe that you can animate
background-attachment, by the way.

92
00:05:29.620 --> 00:05:31.560
Sometimes, that's why they are grayed out.

93
00:05:32.790 --> 00:05:35.489
All right, like background-repeat,
that's not animatable.

94
00:05:37.660 --> 00:05:38.440
So let's see.

95
00:05:38.440 --> 00:05:40.861
Let's go on this little stroll.

96
00:05:40.861 --> 00:05:44.762
Borders trigger all kinds of stuff because
when you change something's width,

97
00:05:44.762 --> 00:05:47.004
you're pushing things around on the page.

98
00:05:47.004 --> 00:05:48.370
No, I gotta go do the layout.

99
00:05:48.370 --> 00:05:51.749
It's a really expensive
performance problem.

100
00:05:51.749 --> 00:05:56.249
[SOUND] Cursor, cursor's great,

101
00:05:56.249 --> 00:06:00.030
not that you can animate that.

102
00:06:00.030 --> 00:06:04.099
So many solid bars,
what can we orphans, orphans?

103
00:06:04.099 --> 00:06:04.833
Man.

104
00:06:04.833 --> 00:06:09.887
Perspective, this is
a 3D transform property,

105
00:06:09.887 --> 00:06:14.230
which we haven't been using at all today.

106
00:06:14.230 --> 00:06:19.174
Things associated with 3D transforms
tend to be very performant.

107
00:06:19.174 --> 00:06:21.460
Here we go, transform.

108
00:06:21.460 --> 00:06:27.640
So transform as you can see on blink, that
is to say on Chrome and the new Opera.

109
00:06:29.090 --> 00:06:33.220
Transform is very performant in that
it does not trigger layouts and

110
00:06:33.220 --> 00:06:35.110
it does not trigger repaints.

111
00:06:35.110 --> 00:06:37.198
So when you're moving something around,

112
00:06:37.198 --> 00:06:41.150
using transform it's not actually
re-positioning anything else on the page.

113
00:06:41.150 --> 00:06:44.550
So Chrome just kicks it over to the GPU.

114
00:06:44.550 --> 00:06:46.462
And continues onward with
its currently out and

115
00:06:46.462 --> 00:06:48.340
doesn't bother re-calculating anything.

116
00:06:48.340 --> 00:06:52.160
But you can see that in the other
browsers, that's not the case.

117
00:06:52.160 --> 00:06:58.540
So, this might not be as performant on
other browsers as it is here in Chrome.

118
00:06:58.540 --> 00:07:03.284
Although it looks like Edge at
least doesn't trigger layouts

119
00:07:03.284 --> 00:07:05.480
after that initial change.

120
00:07:05.480 --> 00:07:07.310
That's nice to know Edge, thank you.

121
00:07:08.481 --> 00:07:13.710
[SOUND] And opacity should be in here too.

122
00:07:13.710 --> 00:07:16.252
I was a bit surprised by opacity but

123
00:07:16.252 --> 00:07:21.263
it is a little bit more across
the board performant than transform.

124
00:07:21.263 --> 00:07:25.045
These are our two favorites as
far as animatable properties,

125
00:07:25.045 --> 00:07:28.770
these are our two favorites to win,
opacity and transform.

126
00:07:28.770 --> 00:07:32.450
Because they're the least disruptive
across the most browsers.

127
00:07:33.620 --> 00:07:37.730
You can see here that opacity in Blink,
in Firefox, and

128
00:07:37.730 --> 00:07:41.190
even in Edge, does not trigger layouts.

129
00:07:41.190 --> 00:07:43.100
And in Chrome,

130
00:07:43.100 --> 00:07:47.560
in Blink, it doesn't trigger repaints
either on subsequent changes.

131
00:07:47.560 --> 00:07:49.100
So it's a handy resource.

132
00:07:49.100 --> 00:07:52.310
But once again, you should definitely
try to check these against

133
00:07:52.310 --> 00:07:53.690
the browsers you're developing for.

134
00:07:54.760 --> 00:07:58.570
Because sometimes, things don't
perform the way you think they would.

135
00:07:58.570 --> 00:08:03.128
So our two best friends are opacity and
transform because they

136
00:08:03.128 --> 00:08:08.220
trigger the least amount of layouts,
the least amount of repaints.

137
00:08:08.220 --> 00:08:11.408
So how do we take common animations and

138
00:08:11.408 --> 00:08:15.500
think of them in terms of transform and
opacity?

139
00:08:15.500 --> 00:08:18.994
As a designer, this is really,
really, really, really important,

140
00:08:18.994 --> 00:08:21.860
because I have seen designers
do some really cool things.

141
00:08:21.860 --> 00:08:24.541
Then try to hand them off to
developers and the developer be like,

142
00:08:24.541 --> 00:08:26.410
this does not look good
in the browser at all.

143
00:08:26.410 --> 00:08:28.290
You can't do all of these things.

144
00:08:28.290 --> 00:08:33.271
In fact I have actually made some things
that today don't perform too well.

145
00:08:33.271 --> 00:08:34.330
We'll look at some of those too.

146
00:08:34.330 --> 00:08:36.042
Once again, I use my own examples,

147
00:08:36.042 --> 00:08:39.150
because if I'm gonna embarrass anyone,
I should embarrass myself.

148
00:08:39.150 --> 00:08:42.400
But first, let's take a look at some of
these things that we can convert over.

149
00:08:42.400 --> 00:08:48.220
For instance, instead of animating height
or width, which trigger a lot of layout.

150
00:08:48.220 --> 00:08:51.660
You can use scale to transform the size
of something or something's container.

151
00:08:53.660 --> 00:08:58.876
Instead of transforming position,
like using position absolute top zero,

152
00:08:58.876 --> 00:09:02.818
left zero and then animating the top and
left properties.

153
00:09:02.818 --> 00:09:04.012
You can use translate.

154
00:09:04.012 --> 00:09:08.697
Translate is going to
position that element in

155
00:09:08.697 --> 00:09:13.030
relation to where it existed previously.

156
00:09:13.030 --> 00:09:14.930
It's sort of like position relative,

157
00:09:14.930 --> 00:09:16.800
except it doesn't move
anything else around it.

158
00:09:19.479 --> 00:09:24.300
&gt;&gt; Rachel: And we can use opacity instead
of using z-index or visibility hidden.

159
00:09:24.300 --> 00:09:27.870
Just a really quick opacity
change can look like a jump cut.

160
00:09:27.870 --> 00:09:28.980
And sometimes you want that.

