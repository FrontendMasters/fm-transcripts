WEBVTT

1
00:00:00.000 --> 00:00:03.710
[MUSIC]

2
00:00:03.710 --> 00:00:05.194
&gt;&gt; Rachel Nabors: So
going into the editor view,

3
00:00:05.194 --> 00:00:08.220
what's happening here
is we've got a stage.

4
00:00:08.220 --> 00:00:14.640
We have this lovely piece of HTML with the
ID of stage that we get to latch on to.

5
00:00:14.640 --> 00:00:16.027
And it contains a loader.

6
00:00:16.027 --> 00:00:19.844
And it contains a scene with
tuna sitting in the window.

7
00:00:19.844 --> 00:00:23.847
What we wanna do involves
the JavaScript and the CSS.

8
00:00:26.768 --> 00:00:31.210
&gt;&gt; Rachel Nabors: Specifically
we want to change the scene.

9
00:00:31.210 --> 00:00:36.480
We want to remove the class that's on
it when it loads which is loading.

10
00:00:36.480 --> 00:00:42.410
And we want to swap in a class
of loaded on that stage element.

11
00:00:42.410 --> 00:00:47.260
The other thing we want to do, actually
let me show you how to do this first.

12
00:00:47.260 --> 00:00:51.060
So I hope I won't regret
removing my own notes.

13
00:00:53.590 --> 00:00:58.113
We're gonna go after stage, and

14
00:00:58.113 --> 00:01:05.550
we're gonna remove
&gt;&gt; Rachel Nabors: loading,

15
00:01:05.550 --> 00:01:09.304
and we are going to addClass.

16
00:01:11.696 --> 00:01:13.890
&gt;&gt; Rachel Nabors: That's
an unfortunate line break.

17
00:01:13.890 --> 00:01:19.987
We're gonna add the class of loaded.

18
00:01:19.987 --> 00:01:21.971
And we're going to do that with a 6.

19
00:01:21.971 --> 00:01:24.190
We've got it on a set time out here.

20
00:01:24.190 --> 00:01:25.150
So it will wait for

21
00:01:25.150 --> 00:01:29.360
six seconds in because we want people
to see how fancy our loader is.

22
00:01:29.360 --> 00:01:31.100
Now you notice that it
just jumped cut right.

23
00:01:31.100 --> 00:01:32.700
I'm gonna shorten the load time here.

24
00:01:33.920 --> 00:01:38.570
I just love seeing loaders that
are set with set time outs.

25
00:01:38.570 --> 00:01:43.850
It's always an indication of terrible,
[LAUGH] terrible performance.

26
00:01:43.850 --> 00:01:46.366
So no,
the user must see our pretty loader.

27
00:01:46.366 --> 00:01:48.199
We spent a lot of time on this loader.

28
00:01:48.199 --> 00:01:49.083
They are gonna see it.

29
00:01:49.083 --> 00:01:51.870
Use loaders to hide loading.

30
00:01:51.870 --> 00:01:54.610
Don't use them to show off
your pretty design skills.

31
00:01:54.610 --> 00:01:55.460
I know they're pretty.

32
00:01:55.460 --> 00:01:56.660
Everyone thinks they're pretty.

33
00:01:56.660 --> 00:01:59.710
But it's gotta have more reason.

34
00:01:59.710 --> 00:02:01.116
So you'll notice that
there's a jump cut here.

35
00:02:01.116 --> 00:02:04.178
Remember how I said that the nice
thing about transitions is now

36
00:02:04.178 --> 00:02:06.908
if they're not supported,
we just get some jump cuts.

37
00:02:06.908 --> 00:02:09.000
Well, we're about to change that.

38
00:02:09.000 --> 00:02:14.460
See, loader and scene, they both have
their opacity scoped by these classes.

39
00:02:14.460 --> 00:02:18.490
So when things are loaded,
the loader has an opacity of 0.

40
00:02:18.490 --> 00:02:23.239
When things are loading, the scene has
an opacity of 0, the window scene that is.

41
00:02:25.660 --> 00:02:28.900
What we're gonna do is we are gonna
set a transition on that opacity.

42
00:02:33.366 --> 00:02:37.188
&gt;&gt; Rachel Nabors: So that instead of
a jump cut, we're gonna get a nice fade,

43
00:02:37.188 --> 00:02:38.109
a crossfade.

44
00:02:38.109 --> 00:02:42.095
There we go, looks very nice.

45
00:02:42.095 --> 00:02:46.264
So what I just showed you, it seems very
simple, or it might not seem simple,

46
00:02:46.264 --> 00:02:48.970
depending on your
proficiency with JavaScript.

47
00:02:50.110 --> 00:02:54.410
For those of you who think it looks
very simple, it's deceptively simple.

48
00:02:55.560 --> 00:02:59.720
This is an example of how we manage
state using CSS and JavaScript together.

49
00:03:01.480 --> 00:03:03.510
I use this for
projects like Black Brick Road.

50
00:03:05.380 --> 00:03:08.050
I'm gonna actually demo
this one in person.

51
00:03:08.050 --> 00:03:09.185
This is pretty darn awesome.

52
00:03:13.742 --> 00:03:15.450
&gt;&gt; Rachel Nabors: So this is the loader.

53
00:03:15.450 --> 00:03:18.520
As you can see,
the loader just stands here and

54
00:03:18.520 --> 00:03:20.080
looks at us until it's done loading.

55
00:03:20.080 --> 00:03:21.910
The only animation is little dots.

56
00:03:23.850 --> 00:03:25.950
Go step, step, step, step, step.

57
00:03:25.950 --> 00:03:29.290
This was a project I worked on
with a lovely Russian cartoonist.

58
00:03:29.290 --> 00:03:31.690
And notice that when we
click the arrow to go down,

59
00:03:32.760 --> 00:03:35.410
the class on the body actually changes.

60
00:03:35.410 --> 00:03:36.890
Or maybe it's using data attribute.

61
00:03:36.890 --> 00:03:39.428
So you can use data
attributes with CSS too.

62
00:03:39.428 --> 00:03:42.870
If you wanna store state in
data attributes on an element

63
00:03:42.870 --> 00:03:45.330
that also makes sense,
whatever you're more comfortable with,

64
00:03:45.330 --> 00:03:50.230
whatever your company's team
approves of as a best practice.

65
00:03:50.230 --> 00:03:54.430
But notice that these states
are like upstairs and downstairs.

66
00:03:54.430 --> 00:03:57.770
And they're just changing
this whole block.

67
00:03:57.770 --> 00:04:00.310
This whole room is a big element.

68
00:04:00.310 --> 00:04:04.120
And its transform is changing
where it's positioned.

69
00:04:04.120 --> 00:04:06.110
So the transition is set to transform.

70
00:04:08.390 --> 00:04:12.530
Same here, menu open, menu closed,

71
00:04:12.530 --> 00:04:18.590
with transitions dictating when that class
is on the page, where this should be.

72
00:04:18.590 --> 00:04:20.810
Well, the transition dictates
how it should change.

73
00:04:22.030 --> 00:04:27.135
So for instance when the body has a class
of menu open, the menu is front in center.

74
00:04:27.135 --> 00:04:31.216
When the body has a class of menu closed,
the menu is offscreen.

75
00:04:31.216 --> 00:04:36.413
And the transition on menu says we
want it to move by two seconds.

76
00:04:38.315 --> 00:04:45.662
&gt;&gt; Rachel Nabors: So
that's that state in classes.

77
00:04:45.662 --> 00:04:50.450
So I tried doing this on a project,
a pet project with a client.

78
00:04:50.450 --> 00:04:51.680
The project didn't go too far.

79
00:04:51.680 --> 00:04:58.140
But the idea was to recreate
a Tamagotchi using, in the browser.

80
00:04:58.140 --> 00:05:01.349
So basically you can feed me.

81
00:05:01.349 --> 00:05:04.016
This is all CSS animation and
sprites we played with.

82
00:05:04.016 --> 00:05:05.433
So you can get me to sleep.

83
00:05:05.433 --> 00:05:10.962
And you'll notice on the top, there are
these little bars indicating how alert,

84
00:05:10.962 --> 00:05:13.300
how hungry, and how engaged I am.

85
00:05:15.840 --> 00:05:16.640
That's not what I want.

86
00:05:18.180 --> 00:05:22.090
Darn it, go back, there we go.

87
00:05:22.090 --> 00:05:26.640
So, as we go through this, we can see
that the bars are changing in reaction,

88
00:05:27.730 --> 00:05:31.580
the bars are changing in reaction to
these buttons that you're clicking.

89
00:05:31.580 --> 00:05:37.590
But they're also changing the classes
on the page, to change her expression.

90
00:05:37.590 --> 00:05:41.650
I'm using JavaScript objects on
the backend to manage how happy,

91
00:05:41.650 --> 00:05:45.410
how full,
how bored she is at any given time.

92
00:05:45.410 --> 00:05:48.675
And as they change,
as their levels go up and down,

93
00:05:48.675 --> 00:05:53.750
I'm editing the levels on the page in
those meters, but I'm also changing

94
00:05:53.750 --> 00:05:57.850
the classes on the page to indicate
which animation should be running.

95
00:05:57.850 --> 00:06:00.440
So all of these animations
you're seeing on this page,

96
00:06:00.440 --> 00:06:02.450
they are scoped to the classes.

97
00:06:02.450 --> 00:06:05.630
But I'm figuring out which one I should
use with some JavaScript happening on

98
00:06:05.630 --> 00:06:08.120
the backend.

99
00:06:08.120 --> 00:06:10.890
It seemed really simple to
me when I first did this.

100
00:06:10.890 --> 00:06:15.088
And I promised the client that
we were gonna do the work using,

101
00:06:15.088 --> 00:06:16.636
we ended up using SVG.

102
00:06:16.636 --> 00:06:23.181
And well, I learned some fun things
about managing state with SVG.

103
00:06:23.181 --> 00:06:24.951
I'll get in with JavaScript.

104
00:06:24.951 --> 00:06:27.194
I'll get into that in a moment.

105
00:06:27.194 --> 00:06:31.757
A disclaimer, I'm gonna show you
another example of some state being

106
00:06:31.757 --> 00:06:34.632
managed with JavaScript showing up in CSS.

107
00:06:34.632 --> 00:06:40.083
But before I show you this,
I just wanna say that this uses parallax.

108
00:06:40.083 --> 00:06:44.218
You should not use parallax without
the supervision of a trained UX expert so

109
00:06:44.218 --> 00:06:48.430
that you're not hurting the poor users
cuz parallax is kind of a trite thing.

110
00:06:48.430 --> 00:06:52.800
And it can be discombobulating for
people with vestibular disorders.

111
00:06:52.800 --> 00:06:56.630
But for this Blue Sky Project I
did with Adobe, it made sense.

112
00:06:56.630 --> 00:06:57.989
So let's have a look.

113
00:06:57.989 --> 00:06:59.729
This is Alice in Videoland.

114
00:06:59.729 --> 00:07:02.650
And it's a modern take on
the Alice in Wonderland story.

115
00:07:02.650 --> 00:07:03.650
We have a loader.

116
00:07:03.650 --> 00:07:06.800
Notice that the state changed to loading,
and the loader flew away.

117
00:07:06.800 --> 00:07:11.050
And every time we go to a new page,
a new animation is triggered because

118
00:07:11.050 --> 00:07:15.730
I am triggering a new, I'm using
JavaScript to add a new class and

119
00:07:15.730 --> 00:07:19.280
remove the old class to say which
one of these is in view at any time.

120
00:07:19.280 --> 00:07:22.030
I'm actually using a library
called waypoints.js

121
00:07:22.030 --> 00:07:25.360
to decipher which one of the screens
is in view at any time and

122
00:07:25.360 --> 00:07:29.430
just from the animations and transitions
on those screens when they're in view.

123
00:07:30.930 --> 00:07:32.910
So now when we scroll down,
as we scroll down,

124
00:07:32.910 --> 00:07:37.600
I'm also letting the browser know
what state of mind she should be in.

125
00:07:37.600 --> 00:07:40.830
She goes from being scared,
to being curious, to being tired.

126
00:07:40.830 --> 00:07:43.570
Each one of these is
triggered as we go down.

127
00:07:43.570 --> 00:07:46.660
JavaScript is going,
I see were on screen number eight.

128
00:07:46.660 --> 00:07:50.480
So her expression should be happy,
out a class a happy to that body.

129
00:07:52.040 --> 00:07:54.640
It's more complicated way
that you can manage state

130
00:07:54.640 --> 00:07:55.880
with a little help from JavaScript.

131
00:07:58.350 --> 00:08:00.620
So let's talk about those
libraries that I used.

132
00:08:00.620 --> 00:08:02.980
For the parallax, I use Skrollr.

133
00:08:02.980 --> 00:08:06.700
It's kind of the big heavy weight in
the industry as far as parallax goes.

134
00:08:06.700 --> 00:08:12.267
If you ever wanna use parallax,
Skrollr is not a bad idea.

135
00:08:12.267 --> 00:08:15.630
It basically interpolates property
values based on scroll position.

136
00:08:15.630 --> 00:08:17.130
We will play with it, I promise.

137
00:08:18.420 --> 00:08:21.140
And Waypoints,
Waypoints is my best friend.

138
00:08:21.140 --> 00:08:23.400
Waypoints can work with or without jQuery.

139
00:08:23.400 --> 00:08:25.110
It has a standalone library.

140
00:08:25.110 --> 00:08:27.570
The developer is in Portland where I live.

141
00:08:27.570 --> 00:08:29.590
And he is a really cool fellow.

142
00:08:29.590 --> 00:08:33.570
He's very eager to talk about Waypoints.

143
00:08:33.570 --> 00:08:38.020
So he's always responding to any
questions you might have on the GitHub.

144
00:08:38.020 --> 00:08:41.290
But an idea of how Waypoints works is,

145
00:08:41.290 --> 00:08:45.640
notice as I scroll down the site,
different things are being triggered

146
00:08:46.840 --> 00:08:48.800
by how far you are from
the top of the screen.

147
00:08:51.050 --> 00:08:52.420
It's a really handy library for

148
00:08:52.420 --> 00:08:56.200
figuring out where a person is
on the screen at any given time.

149
00:08:56.200 --> 00:08:59.805
And when we had that lovely parallax
effect, when her attitude was changing,

150
00:08:59.805 --> 00:09:05.430
Waypoints was letting my JavaScript
system know where she was.

151
00:09:05.430 --> 00:09:08.600
And my JavaScript would return by
saying we should give the whole body,

152
00:09:08.600 --> 00:09:12.330
this class that would change her CSS and
display a different sprite.

