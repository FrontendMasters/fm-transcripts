WEBVTT

1
00:00:00.086 --> 00:00:03.808
[MUSIC]

2
00:00:03.808 --> 00:00:12.670
&gt;&gt; Speaker 1: Can you tell from the event
which of the key frames it finished?

3
00:00:12.670 --> 00:00:13.870
&gt;&gt; Rachel Nabors: Good question.

4
00:00:13.870 --> 00:00:16.560
Can you tell from the animation
event in which one of the key frames

5
00:00:16.560 --> 00:00:17.370
blocks just ran?

6
00:00:18.770 --> 00:00:20.920
I'm gonna say there's no
direct way to do that.

7
00:00:20.920 --> 00:00:24.940
However, you might want to double check
me on that one, I might be wrong.

8
00:00:24.940 --> 00:00:27.050
But to my knowledge, no.

9
00:00:27.050 --> 00:00:30.980
You could have to do a little bit of
sniffing to see what the final value is,

10
00:00:32.110 --> 00:00:32.950
but there should be.

11
00:00:32.950 --> 00:00:35.352
If there isn't a way,
there should be a way.

12
00:00:39.163 --> 00:00:41.080
&gt;&gt; Rachel Nabors: I know there
is with the Web Animations API.

13
00:00:42.400 --> 00:00:43.420
So it is possible.

14
00:00:43.420 --> 00:00:44.770
It is physically possible for

15
00:00:44.770 --> 00:00:47.300
the computer to know which one of
the key frames blocks has ended.

16
00:00:47.300 --> 00:00:54.330
With the Web Animations API each
animation set has a special finish or

17
00:00:54.330 --> 00:00:59.670
on finish event which delivers
a promise or a callback respectively.

18
00:00:59.670 --> 00:01:01.740
So it is possible to know
which of those it is.

19
00:01:03.490 --> 00:01:04.180
But good question.

20
00:01:05.830 --> 00:01:09.920
I wish I weren't so
tired I could probably answer it better.

21
00:01:09.920 --> 00:01:11.680
&gt;&gt; Speaker 1: No it's a good answer.

22
00:01:11.680 --> 00:01:14.190
I don't know check it out.

23
00:01:14.190 --> 00:01:15.040
&gt;&gt; Rachel Nabors: Okay fair enough.

24
00:01:16.630 --> 00:01:19.530
There is MDN documentation
if you go to MDN I

25
00:01:19.530 --> 00:01:24.210
think it's .NET It's a great resource for
learning all sorts of things.

26
00:01:24.210 --> 00:01:28.440
I'm currently the person writing all
the Web Animations API documentation but

27
00:01:28.440 --> 00:01:32.700
it has documentation for
all the animation event listeners as well.

28
00:01:32.700 --> 00:01:33.830
It's a good place to get your feet wet.

29
00:01:35.480 --> 00:01:38.260
Other questions?

30
00:01:38.260 --> 00:01:39.660
&gt;&gt; Speaker 3: Those are running here MVM?

31
00:01:41.422 --> 00:01:43.559
&gt;&gt; Rachel Nabors: This is a great chance,
hang on a moment.

32
00:01:43.559 --> 00:01:44.815
Let's do a little plug

33
00:01:44.815 --> 00:01:49.364
&gt;&gt; [MUSIC]

34
00:01:49.364 --> 00:01:51.304
&gt;&gt; Rachel Nabors: So MDO.

35
00:01:56.659 --> 00:01:57.663
&gt;&gt; Speaker 3: MDN I see yeah.

36
00:01:57.663 --> 00:02:04.708
&gt;&gt; Rachel Nabors: MDN
developer.Mozilla.org.

37
00:02:04.708 --> 00:02:11.290
This place, so often abbreviated
MDN from Mozilla Developer Network.

38
00:02:11.290 --> 00:02:15.000
It's really nice compendium,
over in the docs.

39
00:02:15.000 --> 00:02:19.198
You can do a search for
instance animation start, and

40
00:02:19.198 --> 00:02:24.887
it will bring up all of the locations
let's see you got Animation event,

41
00:02:24.887 --> 00:02:27.420
transition event, here we go.

42
00:02:29.630 --> 00:02:32.840
Animation event represents events
providing information related to

43
00:02:32.840 --> 00:02:34.390
animations.

44
00:02:34.390 --> 00:02:37.165
We can get animation event lapse time and
mission.

45
00:02:37.165 --> 00:02:38.652
Check it out.

46
00:02:38.652 --> 00:02:39.669
[CROSSTALK]
&gt;&gt; Speaker 3: Just looking.

47
00:02:39.669 --> 00:02:45.264
&gt;&gt; Rachel Nabors: [SOUND] We can
get animation event.animationname.

48
00:02:45.264 --> 00:02:50.007
So we can get a dom string containing
the value of the animation's name so

49
00:02:50.007 --> 00:02:55.143
whatever it's fired, whatever just
fired the animation event animation and

50
00:02:55.143 --> 00:03:00.043
animation iteration it will also deliver
the name of its key frames block so

51
00:03:00.043 --> 00:03:02.820
you could be like hey Tuna only do this.

52
00:03:02.820 --> 00:03:06.010
My God I wanna do it,
I want to actually do it.

53
00:03:06.010 --> 00:03:09.234
I want to but it'll probably crash and
burn and look very embarrassing but

54
00:03:09.234 --> 00:03:13.240
I've been up here looking great all
day and maybe it's time for that.

55
00:03:13.240 --> 00:03:17.779
So what we would do is we'd
put a little check in here

56
00:03:17.779 --> 00:03:20.850
where we'd be like hey, is this?

57
00:03:22.730 --> 00:03:24.480
What's the name of that Tuna walk cycle?

58
00:03:24.480 --> 00:03:25.363
Someone give it to me.

59
00:03:25.363 --> 00:03:26.803
&gt;&gt; Speaker 3: Walk-cycle.

60
00:03:26.803 --> 00:03:32.097
&gt;&gt; Rachel Nabors: Walk-cycle so it would
be like hey this is walk-cycle and

61
00:03:32.097 --> 00:03:35.670
if it is we want to fire this thing.

62
00:03:35.670 --> 00:03:43.901
So we would do something in here that
would be like [SOUND] see animation event,

63
00:03:43.901 --> 00:03:50.502
animation name [CROSSTALK] so
we'd be like hi animation name.

64
00:03:50.502 --> 00:03:53.585
This is how developers do it.

65
00:03:53.585 --> 00:03:58.027
Hi animation name I'm going to
guess that we would do like

66
00:03:58.027 --> 00:04:02.387
a I'm gonna look so
embarrassing, but here we go.

67
00:04:02.387 --> 00:04:03.276
&gt;&gt; Speaker 1: That's great.

68
00:04:03.276 --> 00:04:05.857
&gt;&gt; Rachel Nabors: I'm gonna
guess that we're gonna be like,

69
00:04:05.857 --> 00:04:08.496
please let this be supported in Chrome.

70
00:04:08.496 --> 00:04:12.356
We're I'm gonna be like if the animation
name, it's gonna be an if statement,

71
00:04:12.356 --> 00:04:18.016
if e.animationName ===

72
00:04:18.016 --> 00:04:25.280
"walk-cycle" and then we'd be all like,
and we gotta put parentheses on that, and

73
00:04:25.280 --> 00:04:30.550
then we're gonna be like curly brackets,
this add class sit.

74
00:04:30.550 --> 00:04:32.160
Does it work?

75
00:04:32.160 --> 00:04:33.420
Yes, it works.

76
00:04:33.420 --> 00:04:33.926
We did it.

77
00:04:33.926 --> 00:04:37.168
[APPLAUSE] Wait no.

78
00:04:37.168 --> 00:04:40.340
&gt;&gt; Multiple: [LAUGH]
&gt;&gt; Rachel Nabors: It didn't work.

79
00:04:40.340 --> 00:04:42.870
&gt;&gt; Speaker 1: Actually it's
a little bit lower than that.

80
00:04:42.870 --> 00:04:43.840
&gt;&gt; Rachel Nabors: Little bit lower?

81
00:04:43.840 --> 00:04:48.469
&gt;&gt; Speaker 1: Yeah,
&gt;&gt; Speaker 1: You have to look

82
00:04:48.469 --> 00:04:49.810
in-
&gt;&gt; Speaker 3: AnimationName.

83
00:04:49.810 --> 00:04:54.120
&gt;&gt; Speaker 1: There's original event,
gives you the actual event.

84
00:04:54.120 --> 00:04:55.356
&gt;&gt; Speaker 3: You're looking
at the jQuery interpretation.

85
00:04:55.356 --> 00:04:56.987
&gt;&gt; Speaker 1: When you're passing that in.

86
00:04:56.987 --> 00:05:00.252
&gt;&gt; Rachel Nabors: Okay,
what's original event?

87
00:05:00.252 --> 00:05:03.858
&gt;&gt; Speaker 1: On your
event that got passed in?

88
00:05:03.858 --> 00:05:04.713
&gt;&gt; Rachel Nabors: Yeah.

89
00:05:04.713 --> 00:05:07.154
&gt;&gt; Speaker 1: Okay, it's-
&gt;&gt; Rachel Nabors: It's a jQuery event?

90
00:05:07.154 --> 00:05:10.270
&gt;&gt; Speaker 1: Part of the event-
&gt;&gt; Speaker 3: Right after E.

91
00:05:10.270 --> 00:05:11.682
&gt;&gt; Speaker 1: In a class itself.

92
00:05:11.682 --> 00:05:12.430
&gt;&gt; Rachel Nabors: All right.

93
00:05:12.430 --> 00:05:17.280
&gt;&gt; Speaker 1: Okay, so you have to
get below the actual event class.

94
00:05:17.280 --> 00:05:19.930
So E.original event
with the E capitalized.

95
00:05:21.950 --> 00:05:24.900
&gt;&gt; Rachel Nabors: Wow,
that's something I haven't used before.

96
00:05:24.900 --> 00:05:26.370
Let's see if that works.

97
00:05:26.370 --> 00:05:26.950
My God.
&gt;&gt; Speaker 3: Nice.

98
00:05:26.950 --> 00:05:29.185
JQuery wraps up the original event?

99
00:05:29.185 --> 00:05:29.800
&gt;&gt; Rachel Nabors: That's right.

100
00:05:29.800 --> 00:05:31.712
&gt;&gt; Speaker 3: It's on property.

101
00:05:31.712 --> 00:05:32.812
&gt;&gt; Rachel Nabors: Man.

102
00:05:32.812 --> 00:05:35.496
This is what I get for
just going straight with jQuery.

103
00:05:35.496 --> 00:05:39.860
So, yes, do have to use original
event to get past that jQuery event.

104
00:05:39.860 --> 00:05:43.076
But dang that's how you could do it.

105
00:05:43.076 --> 00:05:44.225
&gt;&gt; Speaker 5: But this is so cool.

106
00:05:44.225 --> 00:05:47.649
&gt;&gt; Rachel Nabors: You could write a tiny
little animation event library to handle

107
00:05:47.649 --> 00:05:51.985
your site's animations and help you
fire animations when they're finished.

108
00:05:53.070 --> 00:05:53.980
It would be really cool.

109
00:05:55.690 --> 00:05:57.220
Well how's that for some live coding?

110
00:05:59.310 --> 00:06:00.140
Nice.

111
00:06:00.140 --> 00:06:01.610
This documentation is new.

