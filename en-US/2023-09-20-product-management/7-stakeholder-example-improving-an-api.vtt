WEBVTT

1
00:00:00.000 --> 00:00:04.765
Here's another one that might hit close
to home for many technical folks here.

2
00:00:04.765 --> 00:00:08.930
Let's say you are the Google Maps PM and
you're like, hey, we have a janky API

3
00:00:08.930 --> 00:00:12.846
that, you call this method with this
object shape and you call this one and

4
00:00:12.846 --> 00:00:16.343
it's actually just a post and
there's no body that goes with it.

5
00:00:16.343 --> 00:00:20.377
And we've duct taped this
together over a decade.

6
00:00:20.377 --> 00:00:23.356
None of this sounds familiar
to anybody I know, right?

7
00:00:23.356 --> 00:00:27.663
So let's go and let's unify this and
let's make a v2 of our API.

8
00:00:27.663 --> 00:00:33.928
And let's make it all consistent and
beautiful and lovely.

9
00:00:33.928 --> 00:00:37.983
And it's gonna have a swagger spec and
it's gonna use GRPC.

10
00:00:37.983 --> 00:00:41.909
That's I think those are mutually
exclusive things but I don't care and

11
00:00:41.909 --> 00:00:43.527
blah, blah, blah, right?

12
00:00:43.527 --> 00:00:48.015
Aka what GitHub did when they went to
GraphQL is their public API, right?

13
00:00:51.221 --> 00:00:52.117
That seems like a slam dunk, right?

14
00:00:52.117 --> 00:00:53.150
It's like, all right, we got space.

15
00:00:53.150 --> 00:00:57.697
Let's go make things better for
everybody, right?

16
00:00:57.697 --> 00:00:58.795
It might be.

17
00:00:58.795 --> 00:01:01.322
But let's go back and
think about this as stakeholders.

18
00:01:01.322 --> 00:01:06.092
You have a bunch of people that have
already built a bunch of stuff on

19
00:01:06.092 --> 00:01:06.866
your API.

20
00:01:06.866 --> 00:01:07.864
Right there,

21
00:01:07.864 --> 00:01:12.869
are millions of apps potentially that
are based on the Google Maps API.

22
00:01:12.869 --> 00:01:16.784
If you break it,
you are breaking a lot of people's apps.

23
00:01:16.784 --> 00:01:20.690
Or let's say you even keep it around, now
you either are trading off the stakeholder

24
00:01:20.690 --> 00:01:23.508
internally, we have to now
support two versions of our API.

25
00:01:23.508 --> 00:01:26.104
Or we're basically saying, okay,

26
00:01:26.104 --> 00:01:31.306
we'll try not to break this other one but
we're not gonna fix it, right?

27
00:01:31.306 --> 00:01:35.610
All sudden you're in this kind of
mode of stakeholder management,

28
00:01:35.610 --> 00:01:40.591
you have to think about not just this
potentially golden future you also have to

29
00:01:40.591 --> 00:01:44.761
think about what am I doing to all
the people that care about this.

30
00:01:44.761 --> 00:01:48.696
This is also extremely real to me because
this is basically Stripe's perpetual

31
00:01:48.696 --> 00:01:49.232
problem.

32
00:01:49.232 --> 00:01:53.791
If you build something on Stripe in 2015,
it still works today,

33
00:01:53.791 --> 00:01:56.634
because they never have broken their API.

34
00:01:56.634 --> 00:02:01.236
That means the Stripe API in some
ways is pretty janky, right?

35
00:02:01.236 --> 00:02:04.942
Because they have had
a lot of ideas since 2015.

36
00:02:04.942 --> 00:02:08.768
And basically what they do, they do have
a modern API that is actually much better.

37
00:02:08.768 --> 00:02:13.766
And if you make a call to an old API,
it goes through a translation layer

38
00:02:13.766 --> 00:02:17.606
that goes back to those old APIs and
things like that.

39
00:02:17.606 --> 00:02:21.236
But every team has to maintain every
API that they have ever put out.

40
00:02:21.236 --> 00:02:25.275
It makes Stripe move a little bit slower,
right?

41
00:02:25.275 --> 00:02:27.402
But people don't wanna upgrade their apps.

42
00:02:27.402 --> 00:02:29.297
Particularly think about like money apps,
right?

43
00:02:29.297 --> 00:02:34.231
So you have the Stripe integration, and
if you have this Stripe integration and

44
00:02:34.231 --> 00:02:38.500
it works exactly the way that you
want it to, and it's been tested and

45
00:02:38.500 --> 00:02:42.055
used over for like a decade,
you don't wanna change it.

46
00:02:42.055 --> 00:02:42.921
Why would you wanna change it?

47
00:02:42.921 --> 00:02:44.025
Money is scary, right?

48
00:02:44.025 --> 00:02:48.192
And so if you introduce a new bug or
Stripe introduces a new bug,

49
00:02:48.192 --> 00:02:51.743
you are literally affecting
people's bottom line.

50
00:02:51.743 --> 00:02:55.576
Which is why I think Stripe somewhat
wisely, has basically said,

51
00:02:55.576 --> 00:02:59.410
if you build something in 2015,
we're gonna do everything we

52
00:02:59.410 --> 00:03:03.671
can to make sure that it's continues
to work the way that you expect it to.

53
00:03:03.671 --> 00:03:07.375
Stakeholders, right?
You have to frame it in the sense of,

54
00:03:07.375 --> 00:03:12.438
who is holding the back here
at the end of this,right?

55
00:03:12.438 --> 00:03:15.732
And a lot of companies like GitHub in
that particular case, when they went for

56
00:03:15.732 --> 00:03:16.955
v3, they went to Graph QL.

57
00:03:16.955 --> 00:03:19.255
They basically said, hey, everybody,

58
00:03:19.255 --> 00:03:22.814
you now have to learn Graph QL to
even integrate with GitHub now.

59
00:03:22.814 --> 00:03:26.942
At the time, GitHub was, or sorry,
GraphQL was so hot, and everyone was like,

60
00:03:26.942 --> 00:03:30.951
this is the best, this is the future,
and some years later everyone's like,

61
00:03:30.951 --> 00:03:33.359
maybe it's not, maybe it's not the future.

62
00:03:33.359 --> 00:03:35.873
Maybe we shouldn't build things
like this anymore, right?

63
00:03:35.873 --> 00:03:40.501
And v4 of their API, surprise,
surprise, not GraphQL anymore, right?

64
00:03:40.501 --> 00:03:44.040
So that kind of churn is
exhausting as a developer, right?

65
00:03:44.040 --> 00:03:46.677
And you'll find things that you
don't have to churn as much.

66
00:03:46.677 --> 00:03:49.066
Why do you think WordPress is still so
popular, right?

67
00:03:49.066 --> 00:03:52.490
It's a reliable partner that
you can build things on.

68
00:03:52.490 --> 00:03:53.688
It's awesome.

69
00:03:53.688 --> 00:03:58.154
I will never disparage WordPress
except when I have to work on it, and

70
00:03:58.154 --> 00:04:00.159
then I will disparage it a lot.

71
00:04:00.159 --> 00:04:02.559
God, if I have to think about
the loop one more time,

72
00:04:02.559 --> 00:04:04.425
I swear I'm just gonna pull my hair out.

73
00:04:04.425 --> 00:04:07.701
So every time that you go to approach,
what am I gonna build and

74
00:04:07.701 --> 00:04:11.607
why am I gonna build it, please think
about who you're building it for and

75
00:04:11.607 --> 00:04:15.587
who is not gonna like what you're
gonna build, cuz it's always someone.

76
00:04:15.587 --> 00:04:19.875
And if you cannot think of someone that
is adversely affected by what you're

77
00:04:19.875 --> 00:04:23.359
building, at the very least is
your own team maintaining it,

78
00:04:23.359 --> 00:04:27.247
then you're not thinking about it
thoroughly enough, I would say.

79
00:04:27.247 --> 00:04:29.092
Yeah, Mark.

80
00:04:29.092 --> 00:04:36.708
&gt;&gt; Do you ever anticipate that
developers are gonna go over time and

81
00:04:36.708 --> 00:04:40.811
just kind of change the deadline?

82
00:04:40.811 --> 00:04:45.018
Communicate the deadline
as something further out to

83
00:04:45.018 --> 00:04:47.922
the business versus the developer.

84
00:04:47.922 --> 00:04:51.110
I know this is more of
a project management.

85
00:04:51.110 --> 00:04:54.168
&gt;&gt; Sure, no, but I mean,
it applies to product managers,

86
00:04:54.168 --> 00:04:58.405
cuz we're equally beholden to the timeline
and to delivering things on time.

87
00:04:58.405 --> 00:05:05.995
So, I mean, I think that to rephrase that
question is, do I trust my developers?

88
00:05:05.995 --> 00:05:10.853
I've had the good fortune of working
with awesome developers that I don't

89
00:05:10.853 --> 00:05:15.651
ever question that this person is
intentionally gonna try and slack off.

90
00:05:18.496 --> 00:05:21.331
I don't know what to do about that.

91
00:05:21.331 --> 00:05:24.056
I'm not a taskmaster, right?
I'm not gonna go in there and

92
00:05:24.056 --> 00:05:26.857
sit on them and watch what they do.

93
00:05:26.857 --> 00:05:27.875
Not my style.

94
00:05:27.875 --> 00:05:31.000
And it's honestly,
it's not my particular issue,

95
00:05:31.000 --> 00:05:34.549
that would be an engineering
manager's issue to deal with.

96
00:05:34.549 --> 00:05:38.177
I do push back sometimes when a developer
will say, this is gonna take me X

97
00:05:38.177 --> 00:05:42.470
amount of months, and I'll ask, are you
intentionally is that an overestimation?

98
00:05:42.470 --> 00:05:44.763
Because you're anticipating
something like what?

99
00:05:44.763 --> 00:05:47.322
What's built into your estimation?

100
00:05:47.322 --> 00:05:51.711
And you'll kinda figure out developer
by developer, including myself as,

101
00:05:51.711 --> 00:05:53.745
I'm padding it for these reasons.

102
00:05:53.745 --> 00:05:58.568
And sometimes, I'm padding this because I
don't know how the dependency org is gonna

103
00:05:58.568 --> 00:05:59.966
react, that's valid.

104
00:05:59.966 --> 00:06:04.570
I accept that, or I'm padding this because
I'm worried that I can't deliver on time.

105
00:06:04.570 --> 00:06:09.801
Well, let's try and give it the real
estimation and we'll adjust, right?

106
00:06:09.801 --> 00:06:13.420
There's mechanisms to modify
timelines when we run into issues.

107
00:06:13.420 --> 00:06:14.983
Don't give me the padded one,

108
00:06:14.983 --> 00:06:18.183
give me closer to what you actually
think this is going to take.

109
00:06:18.183 --> 00:06:22.111
Acknowledging that software
estimation is an impossible science.

110
00:06:22.111 --> 00:06:28.182
Or an impossible art, if we're being
really honest about it, right?

