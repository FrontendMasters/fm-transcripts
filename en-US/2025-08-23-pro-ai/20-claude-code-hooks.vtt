WEBVTT

1
00:00:00.320 --> 00:00:04.480
&gt;&gt; Steve Kinney: The other thing you can
do is these things called Claude hooks.

2
00:00:05.600 --> 00:00:09.074
Literally before, as I was taking
the screenshot this morning,

3
00:00:09.074 --> 00:00:11.360
they added a new one called Session Start.

4
00:00:12.720 --> 00:00:15.742
These are bash commands right now,

5
00:00:15.742 --> 00:00:21.089
only that it will run at various
different lifecycle moments.

6
00:00:21.089 --> 00:00:25.943
So session start, anyone take
a lucky guess when that happens?

7
00:00:25.943 --> 00:00:29.370
I'll give you a hint, the matchers
are startup, resume, and clear.

8
00:00:30.810 --> 00:00:33.050
That's when you start a new cloud session.

9
00:00:33.050 --> 00:00:37.034
Pre compact happens right
before it compacts.

10
00:00:37.034 --> 00:00:41.196
So if you wanted to do something,
I will be honest with you,

11
00:00:41.196 --> 00:00:43.627
this is a relatively new feature.

12
00:00:43.627 --> 00:00:47.370
The only one that I've seen
people use is on Stop.

13
00:00:48.570 --> 00:00:49.290
They either use.

14
00:00:49.290 --> 00:00:52.002
There's this thing you can get from
Homebrew called Terminal notifier,

15
00:00:52.002 --> 00:00:53.370
which will show you a notification.

16
00:00:54.650 --> 00:00:58.010
The more ridiculous among us will.

17
00:00:58.010 --> 00:01:02.888
And I hooked it up to the Twilio API to
text me every time Claude's done with

18
00:01:02.888 --> 00:01:05.890
something like, wow, okay, make a sound.

19
00:01:05.890 --> 00:01:07.962
Sure.
I don't need a text message every time

20
00:01:07.962 --> 00:01:09.610
Claude is done with something.

21
00:01:09.610 --> 00:01:13.050
But you could do it.
And so any of these lifecycle hooks.

22
00:01:13.050 --> 00:01:18.251
I have a ridiculous one in this file
that I have that I will just show you,

23
00:01:18.251 --> 00:01:19.563
because why not?

24
00:01:19.563 --> 00:01:25.034
But it's not something I'd
necessarily recommend.

25
00:01:25.034 --> 00:01:29.899
When the user does a sprint,
the one that I was

26
00:01:29.899 --> 00:01:35.420
considering that I might
do soon is either on Stop.

27
00:01:35.420 --> 00:01:36.870
Yeah, I think on stop,

28
00:01:36.870 --> 00:01:41.371
I might do one called summarize everything
you just learned into a file and

29
00:01:41.371 --> 00:01:46.161
you'll see that I have this ridiculous
hook right now that is like me iterating

30
00:01:46.161 --> 00:01:50.952
towards that plan, which is I have one
where I'm listening for everything and

31
00:01:50.952 --> 00:01:56.570
writing the payload into a file so I can
look at all them and think about it later.

32
00:01:56.570 --> 00:01:58.570
Yeah, that's who I am.

33
00:01:58.570 --> 00:02:05.228
But arguably the useful ones
are pre tool use and post tool Use.

34
00:02:05.228 --> 00:02:09.650
Tool is anything that it's going to do,
right?

35
00:02:09.650 --> 00:02:12.642
That could be calling an MCP server, but

36
00:02:12.642 --> 00:02:15.900
you can get a sense of
what some of these are.

37
00:02:15.900 --> 00:02:17.780
So if it's going to run a shell command.

38
00:02:17.780 --> 00:02:19.100
Hey, you're going to run a shell command.

39
00:02:19.100 --> 00:02:20.997
Let me look at that.

40
00:02:20.997 --> 00:02:25.700
It's git commit, no verify.

41
00:02:25.700 --> 00:02:27.140
No, you're not.

42
00:02:27.140 --> 00:02:28.260
Absolutely not.

43
00:02:30.852 --> 00:02:34.820
You're going to write to eslint
config to go comment something out.

44
00:02:35.860 --> 00:02:39.870
I'm blocking that, right?

45
00:02:39.870 --> 00:02:44.890
You're gonna web fetch and
you're gonna an API token in there?

46
00:02:44.890 --> 00:02:49.609
[LAUGH] No, so you can kinda use it.

47
00:02:49.609 --> 00:02:52.954
And you can always block these
rules in general, but you can also,

48
00:02:52.954 --> 00:02:54.160
what were you going to.

49
00:02:54.160 --> 00:02:57.000
You can block all Git commands.

50
00:02:57.000 --> 00:03:02.226
You can block all git commit commands, but
if you want to go look at the git commit

51
00:03:02.226 --> 00:03:07.621
command, say that four times fast and make
sure it doesn't have a no verify flag.

52
00:03:07.621 --> 00:03:10.402
Then you wanna pipe it into
a Bash script to just check it.

53
00:03:10.402 --> 00:03:15.015
And you give it exit code of 2,
cuz 0s usually good, 1 is usually used for

54
00:03:15.015 --> 00:03:15.610
errors.

55
00:03:15.610 --> 00:03:18.930
A lot of times 2 is
a little bit more specific.

56
00:03:18.930 --> 00:03:20.370
I'm saying stop.

57
00:03:20.370 --> 00:03:22.530
It will stop and it will not continue.

58
00:03:22.530 --> 00:03:23.650
There's some other things you can do.

59
00:03:23.650 --> 00:03:26.163
I'll show you the output in a second.

60
00:03:26.163 --> 00:03:31.271
But yeah,
if you're gonna edit particular files that

61
00:03:31.271 --> 00:03:36.490
you're not allowed to edit,
it will get mad at you.

62
00:03:36.490 --> 00:03:38.170
Yeah, so on and so forth.

63
00:03:38.170 --> 00:03:42.090
Post tool use is like,
you just did the thing.

64
00:03:42.090 --> 00:03:47.004
This one I use for like, okay, go ESLint
that file or go run Prettier on it,

65
00:03:47.004 --> 00:03:48.330
honestly, right?

66
00:03:48.330 --> 00:03:49.649
Or something along those lines.

67
00:03:49.649 --> 00:03:50.770
Or run the test file on that.

68
00:03:50.770 --> 00:03:54.250
You can kind of like say,
like, you just did a thing.

69
00:03:54.250 --> 00:03:55.313
You can step in.

70
00:03:55.313 --> 00:03:58.241
My current use cases are pretty easy,

71
00:03:58.241 --> 00:04:03.410
which is like eslint the file
you just touched, Prettier it.

72
00:04:03.410 --> 00:04:05.966
I'm also doing this thing where I
log every single one of them to

73
00:04:05.966 --> 00:04:06.931
a directory right now so

74
00:04:06.931 --> 00:04:09.890
I can look at them later, which is
going to make my file look ridiculous.

75
00:04:09.890 --> 00:04:13.410
But we'll ignore that for a second.

76
00:04:14.690 --> 00:04:18.210
So, yeah, I set an environment variable
and I pass them all into the same script.

77
00:04:18.210 --> 00:04:19.752
So ignore that for a moment.

78
00:04:19.752 --> 00:04:21.970
Did you edit, multi edit or write?

79
00:04:21.970 --> 00:04:22.850
Okay, cool.

80
00:04:22.850 --> 00:04:23.850
Take the file path.

81
00:04:23.850 --> 00:04:24.370
Yes.

82
00:04:24.370 --> 00:04:26.710
Gnarly bash command inside of a string.

83
00:04:26.710 --> 00:04:30.493
Turns out you can get Claude to
write them though, so that's fun.

84
00:04:30.493 --> 00:04:36.230
And then if Prettier fails, exit 2 and
be like, we have a problem here, right?

85
00:04:36.230 --> 00:04:41.168
Cool, run ESLint with
a max warnings of zero.

86
00:04:41.168 --> 00:04:44.590
So if it triggers a warning,
we're in trouble, right?

87
00:04:44.590 --> 00:04:46.790
It has to fix its own warnings.

88
00:04:46.790 --> 00:04:49.790
If I cause a warning, the build will pass.

89
00:04:49.790 --> 00:04:54.140
If it touches a file and it triggers
a warning, it's not allowed to do it.

90
00:04:54.140 --> 00:04:56.780
So I have more draconian rules for
it than I have for myself.

91
00:04:56.780 --> 00:04:57.660
It's not fair.

92
00:04:57.660 --> 00:04:59.306
It's fine.

93
00:04:59.306 --> 00:05:02.484
And then ESLint failed and
it'll give you the file and why and

94
00:05:02.484 --> 00:05:03.860
send it in to go handle it.

95
00:05:03.860 --> 00:05:08.384
So you can kind of like, that's part of
the reasons why I can trust fix the lint

96
00:05:08.384 --> 00:05:11.808
issues, because it is literally
stopped from moving on.

97
00:05:11.808 --> 00:05:15.340
Because sometimes, all right,
here's Claude Code's bad habit.

98
00:05:16.700 --> 00:05:25.010
Fixed all the high priority Things didn't
get around to the low priority things.

99
00:05:26.210 --> 00:05:30.050
I'm sorry,
I didn't specify which ones were optional.

100
00:05:31.090 --> 00:05:32.930
That's not your choice to make.

101
00:05:34.770 --> 00:05:40.130
Yeah, so some of these are to
compel it into good habits, right?

102
00:05:40.130 --> 00:05:46.187
There is a library that I haven't played
around with as much as I want to yet,

103
00:05:46.187 --> 00:05:48.090
but I will under hooks.

104
00:05:48.090 --> 00:05:51.045
Somebody made this one.

105
00:05:51.045 --> 00:05:56.357
It's a TypeScript library where instead
of those long strings of wild bash,

106
00:05:56.357 --> 00:06:00.210
you can literally just have
some TypeScript that will.

107
00:06:00.210 --> 00:06:02.307
You can write Typescript
code against this and

108
00:06:02.307 --> 00:06:05.313
it will put in the line of bash to
have it go to your typescript file,

109
00:06:05.313 --> 00:06:08.881
which is effectively what I'm doing at
this point when I log them all in there.

110
00:06:08.881 --> 00:06:11.314
It was the beginning stages of that.

111
00:06:11.314 --> 00:06:14.879
So I can then analyze them with
TypeScript and make decisions so

112
00:06:14.879 --> 00:06:16.231
I can get a little more.

113
00:06:16.231 --> 00:06:19.319
Cuz even I was editing some of
those strings of bash by hand and

114
00:06:19.319 --> 00:06:21.140
I don't want to anymore.

115
00:06:21.140 --> 00:06:22.223
I'll show you what I have, but

116
00:06:22.223 --> 00:06:23.980
this library is probably
better than what I have.

117
00:06:23.980 --> 00:06:26.669
So you should use this instead.

118
00:06:26.669 --> 00:06:31.860
But yeah, then each payload you can
basically say async function pre tool use.

119
00:06:31.860 --> 00:06:36.041
You can just define all the hooks like
this and it will then all of the things

120
00:06:36.041 --> 00:06:40.580
that pass through actually let you write
TypeScript to say if it's okay or not.

121
00:06:41.860 --> 00:06:46.999
Another example is like I said,
my buddy Rowland does one

122
00:06:46.999 --> 00:06:52.349
where it's like every either task
as a tool or pre tool use or

123
00:06:52.349 --> 00:06:56.970
the user prompt,
it says go check the CSV of tasks.

124
00:06:58.490 --> 00:07:03.473
If this is a big enough task,
isn't just an EslinFix, put it on that and

125
00:07:03.473 --> 00:07:07.210
then go to the top priority
thing on that list.

126
00:07:07.210 --> 00:07:09.477
So you can even tell it to do
something and it will go back,

127
00:07:09.477 --> 00:07:12.147
it'll put it on the list, but
it will continue on what he decided.

128
00:07:12.147 --> 00:07:14.195
He's a product manager, so

129
00:07:14.195 --> 00:07:19.560
this is his thing is putting stuff in
order, and I want what I want now.

130
00:07:19.560 --> 00:07:23.883
And he'll have it check in and add things
to the list and check stuff off and

131
00:07:23.883 --> 00:07:27.809
approve and sort the list,
which I think is incredibly powerful.

132
00:07:27.809 --> 00:07:29.080
I don't wanna do that.

133
00:07:29.080 --> 00:07:30.400
But this is a cool tool.

134
00:07:30.400 --> 00:07:33.734
We can just use TypeScript instead of
that wild Bash stuff, tell it whether or

135
00:07:33.734 --> 00:07:35.960
not it's allowed to continue,
so on and so forth.

136
00:07:35.960 --> 00:07:39.395
And it handles all the standard in,
standard out stuff for you.

137
00:07:39.395 --> 00:07:44.110
So I was gonna write this myself and
it exists, so I didn't.

138
00:07:44.110 --> 00:07:51.341
I had the beginning of it in that

139
00:07:51.341 --> 00:07:57.189
file we saw a second ago.

140
00:07:57.189 --> 00:08:00.324
Or yeah, I am kinda right now I'm
just writing all of them to a file so

141
00:08:00.324 --> 00:08:03.523
I could look at what they looked like and
I wanna see them in practice.

142
00:08:03.523 --> 00:08:05.414
What are the tools that it calls?

143
00:08:05.414 --> 00:08:08.525
For me to truly understand all the things
you'll see gonna do this task,

144
00:08:08.525 --> 00:08:09.800
I'm going to write to a file.

145
00:08:09.800 --> 00:08:14.209
I have a ridiculous temp
directory right now,

146
00:08:14.209 --> 00:08:19.408
which this is just every
single thing that it has done,

147
00:08:19.408 --> 00:08:26.623
honestly, probably for days,
&gt;&gt; Steve Kinney: Right,

148
00:08:26.623 --> 00:08:29.273
and so I can kinda get a sense of
what are the things it can do,

149
00:08:29.273 --> 00:08:31.930
what are the things I want to respond to,
so on and so forth.

150
00:08:31.930 --> 00:08:34.850
I don't look at this right now and
expect to know anything I don't actually.

151
00:08:34.850 --> 00:08:38.194
I'm just recording it right now so
I can kind of like pop in and look at it

152
00:08:38.194 --> 00:08:41.730
later and try to say like, cool,
this is the name of a tool that he uses.

153
00:08:41.730 --> 00:08:45.230
Like here's a post tool used for
grep and here's the files that I got.

154
00:08:45.230 --> 00:08:46.861
I could theoretically take this and

155
00:08:46.861 --> 00:08:50.050
like remove certain files I just
didn't want it to ever know about.

156
00:08:50.050 --> 00:08:51.210
I don't know that I need to do that.

157
00:08:51.210 --> 00:08:53.250
I'm just trying to get
a sense of what you could do.

158
00:08:53.250 --> 00:08:55.170
So I've been recording them for
a little bit.

159
00:08:55.170 --> 00:08:59.806
Not a lot to take away here, but like
again, a way to kind of like try to get

160
00:08:59.806 --> 00:09:04.300
an understanding of the inner workings of,
of what a given tool does.

161
00:09:06.780 --> 00:09:13.814
So it's usually good for blocking or
saying, hey, these are all pre tool use.

162
00:09:13.814 --> 00:09:16.950
And a post tool use is it just did a Bash.

163
00:09:16.950 --> 00:09:21.420
This is one that we totally probably
did just a second ago or two.

164
00:09:22.940 --> 00:09:25.603
Yeah, this is when it was
adding the TRPC server.

165
00:09:25.603 --> 00:09:28.271
So it's like, hey,
if you're gonna add stuff,

166
00:09:28.271 --> 00:09:31.650
I could theoretically respond it
with a check in with me first.

167
00:09:31.650 --> 00:09:32.490
Now it did.

168
00:09:32.490 --> 00:09:34.090
It was part of the plan.

169
00:09:34.090 --> 00:09:35.130
I approved it.

170
00:09:36.490 --> 00:09:40.403
But you could, if there are things that
are happening that you don't want to

171
00:09:40.403 --> 00:09:44.685
happen, you could theoretically step in
and either say you're never allowed to do

172
00:09:44.685 --> 00:09:48.810
this or have some introspection on like
when you are and are not allowed to do it.

