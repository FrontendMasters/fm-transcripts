[00:00:00]
>> Steve Kinney: Like I said before, I open up Cursor and then in the terminal tend to open up Claude code simultaneously. And some of the workflow is I'll have Claude code executing one of the plans while I'm talking on that sidebar and coming up with new plans and writing them down into markdown files, right?

[00:00:21]
100%, but cloud code, again, lives in the terminal. It's like either I'm in an echo chamber or whatever one until they fully nerf the max plan. The fact that you don't pay per token, because I will show you why that's important in a little bit, is great. And it is wildly powerful, I get better results from it right to the point when Ryland was running up those bills, and I told him he had to switch, he was resisted.

[00:00:58]
And then like two days was like, I'm sold. So I think there's a time and a place for both, for the interaction pattern. I use both simultaneously to install. You can just do it from npm. There is also, I haven't used it yet. You can also just install as a package and it has an SDK where you can like programmatically call it.

[00:01:17]
And like, I think that there's something there that is cool to do in terms of orchestrating a bunch of work. I know that there's there. I just haven't figured it out yet. So stay tuned on that one. Once you have it, you want to make sure it works.

[00:01:31]
These are things I can't really truly simulate because I was not going to break my Claude installation before doing a workshop on Claude. So you get slides, but you can run Claude doctor which will make sure everything's set up correctly and use it. And then in any given directory that's it, type that you don't even need the period like a cursor.

[00:01:52]
I do have, I did like break it previously and take the screenshots so you can see what the installation process looks like. But then I unbroke it because I need to use it, and I was not willing to take that risk. So it's got some basic settings like color, which I'm like, whatever.

[00:02:12]
Just use whatever my terminal uses. It gives you nice ASCII art, which Gemini does as well. I think after the first time, you never see that again though so whatever. And then you have two options. You can either a, if you've got a max account, $20 for pro, and then either $100 or $200 a month for max predictable pricing with rate limits that they change on whenever they feel like it.

[00:02:40]
We'll talk about that in a second. Or you can put in your API key. I will give you a cautionary tale about that in a second. Two ways that you can pay for it. May I recommend the one that you know what the bill is going to be.

[00:02:56]
I don't care if you choose the $201, the $101, or the $21, but at least what those 200100 like whatever. Claude can make mistakes. Only use the code you trust. That's the extent of the security notes. Yes User recommended Settings option Enter for new lines. Rylan did a thing.

[00:03:22]
We have shift enter now, which I need to figure out what he did, but I've now gotten used to option enter, so I don't really care. A few things. One is literally I took these screenshots this morning and there was a new version out with new features. Mostly the one that is important is the session start hook.

[00:03:41]
We'll talk about hooks in a second. Yeah, maybe that sign for custom agents anyway, but the sign we'll see later works exactly like it does ish in cursor. Works enough that you don't need to think about how they're different. And yeah, you have some other slash commands that we'll see in a second.

[00:04:01]
And you have this one other mode that I use once, just so I could. If you give it -p it'll like, do what? Like we said before, like one shot where it'll like go do a thing without dropping you into an interactive terminal. This could be great. This means in a CICD process you could say like, hey, if the lint errors failed in CI cd, you could either say fix them, which I don't know, I trust.

[00:04:22]
Or like, hey, write to the GitHub issue a synopsis of why this is breaking and what they should do. Because it'll just run one command, just like ESLint, just like vtest, so on and so forth. Run at one off, great. So the nice part is there's a lot to talk about with Cloud Code.

[00:04:43]
The other side of it is some of it we already have hooks into because we talked about it with cursor. So there is model selection. Remember we went through okay Anthropics, got these models, and Google has these models and GPT, and I didn't get to all of them.

[00:04:58]
There's like deep SEQ and a whole bunch of other ones I just ran out of. Like, I got tired of making those slides. Nice part about callgoat is you've got Three models. Two really, because one you don't use, which is Sonnet and Opus. Sonnet is the daily driver.

[00:05:16]
Opus is I would like to burn through my rate limit as quickly as possible, which sometimes you would like to burn. Like which one to use is really tricky because if Sonnet cost four times as many tokens, four times as much per token, but can get it done in 1/8.

[00:05:33]
I don't know. Like the math is tricky, right? Like maybe it's worth it. Like should you fight all day with Sonnet versus when you could add Opus to it? I don't know. I just like in my. I spent a decent amount of time just taking screenshots. Not all of them made it into the stock.

[00:05:47]
But I like this one. I do believe this one a lot. But you have two choices. If you are just on the $20 a month plan, you don't have two choices, you have one choice. So it's even easier. My general thing and the 68, I'm doing this from memory, they changed some of the rate limits, and in the email, they're like, yeah.

[00:06:13]
Now on top of every five hour rate limits, you also have weekly rate limits on top of that. And there was something like that's 240 to 480 sonnet requests per 5-hour window or 40 to 60 opus requests. That math doesn't fully align up completely, but it gives you a hint of the order of magnitude.

[00:06:36]
I'll show you how to switch back and forth on the command line, stuff like that. What I tend to do is jockey back and forth between them. Am I writing a plan and coming up with a bunch of research, so on and so forth? I will use Opus.

[00:06:49]
And is that then if I have a good enough plan in place that steps out exactly what I need done, where the files are, what the architecture is, so on and so forth. Let's use the cheaper one, right? Like I put in the guardrails, I held this hand like a small child.

[00:07:05]
If that fails, so on and so forth. And then it creates this weird incentive structure which is it's just your anthropic Claude rate limits. Which, if somebody's asking what the real reason why I'm like, I have Anthropic write the code while I'm brainstorming and talking with O3 and Gemini.

[00:07:33]
Because I'm protecting my precious rate limits, right? And so it's like I only got so many tokens that I can use in a five hour window with these. So I'm going to go talk to ChatGPT not talking to Opus while Opus is writing code absolutely not. So that's part of my philosophy on why I talk to different models too, which is like protecting my rate limits.

[00:07:59]
So yeah, keep that in mind as well, and we'll see some strategies around this one. At a given point, you can do model, you'll get a menu. The third option is Haiku which even they're like maybe editing comments and docs or something like you know like Sonnet is your daily driver for most things.

[00:08:16]
Opus for the big brain activities. There's also Haiku you can do model and change it. You can also at any given point switch between the two of them. So like I will usually use all three. You can also start it up in a given mode with a command line flag right?

[00:08:36]
So this if you want to put in a given mode before you do something, I do this as well.

