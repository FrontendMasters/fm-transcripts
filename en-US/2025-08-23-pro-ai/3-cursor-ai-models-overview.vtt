WEBVTT

1
00:00:00.136 --> 00:00:04.358
&gt;&gt; Steve Kinney: Let's talk about our
first contestant on the Agent A code is

2
00:00:04.358 --> 00:00:06.220
right, which is Cursor.

3
00:00:06.220 --> 00:00:11.077
I'm going to show you this next slide,
which is a picture of a web page that's

4
00:00:11.077 --> 00:00:16.011
going to buy you a second in case you
need to go Download it@cursor.com that is

5
00:00:16.011 --> 00:00:19.564
my reminder to remind you to
download it if you have not.

6
00:00:19.564 --> 00:00:22.917
As I explained a few things that
thereby when I go jump into it,

7
00:00:22.917 --> 00:00:24.540
you also have it downloaded.

8
00:00:24.540 --> 00:00:29.495
Cursor, effectively,
has three and a half modes.

9
00:00:29.495 --> 00:00:31.574
I rolled two of them in together,

10
00:00:31.574 --> 00:00:34.933
mostly because I was running
out of room on the slide.

11
00:00:34.933 --> 00:00:37.401
Three of them that you can trigger and

12
00:00:37.401 --> 00:00:41.789
one of them that is just kind of there and
is arguably my favorite.

13
00:00:41.789 --> 00:00:46.139
You've got inline edit,
which is this is true with Copilot and

14
00:00:46.139 --> 00:00:48.120
Visual Studio Code as well.

15
00:00:48.120 --> 00:00:53.273
You highlight some text or
put your cursor somewhere in the document.

16
00:00:53.273 --> 00:01:00.648
You hit Cmd or Ctrl+K and
you get a little modal above your code.

17
00:01:00.648 --> 00:01:02.905
For those of you who
are Vs Code power users,

18
00:01:02.905 --> 00:01:06.030
you're like Cmd+K is what I use
to use move windows around.

19
00:01:06.030 --> 00:01:07.317
That's Cmd+R.

20
00:01:07.317 --> 00:01:09.896
Now you'll get the muscle memory
eventually and you'll hate it.

21
00:01:09.896 --> 00:01:14.472
Whenever you switch back and forth
you have then Cmd or Ctrl+L, Ctrl for

22
00:01:14.472 --> 00:01:18.222
the Windows folks and Linux folks,
Cmd for the Mac, Cmd for

23
00:01:18.222 --> 00:01:20.190
those of you who have a Cmd key.

24
00:01:20.190 --> 00:01:22.394
Ctrl for those of you who don't,

25
00:01:22.394 --> 00:01:26.900
which opens up that chat window
along the side, much like ChatGPT.

26
00:01:26.900 --> 00:01:31.893
In the past that was very much
like ChatGPT where you could talk

27
00:01:31.893 --> 00:01:33.632
to it about the code.

28
00:01:33.632 --> 00:01:38.168
And these tools are great because they
have the context of your code base and

29
00:01:38.168 --> 00:01:43.281
will learn, as I alluded to, we'll learn
lots about managing what context it has,

30
00:01:43.281 --> 00:01:45.390
but it knows about your code base.

31
00:01:45.390 --> 00:01:50.573
A lot of times it is better than
my old workflow of just randomly

32
00:01:50.573 --> 00:01:55.770
asking ChatGPT how to write
a really fast hashing algorithm.

33
00:01:55.770 --> 00:01:57.814
Now I can at least see
what I'm trying to do.

34
00:01:57.814 --> 00:02:00.013
So on and so forth.

35
00:02:00.013 --> 00:02:06.870
In that same side panel,
there's also this idea of agent mode.

36
00:02:06.870 --> 00:02:11.664
Agent mode is and
now go do things to my code base for me,

37
00:02:11.664 --> 00:02:14.074
they're kind of in there.

38
00:02:14.074 --> 00:02:17.803
Third and a half is this tab, which you
might remember from GitHub, copilot and

39
00:02:17.803 --> 00:02:18.814
visual Studio code.

40
00:02:18.814 --> 00:02:20.930
The Cursor one's just better.

41
00:02:20.930 --> 00:02:25.278
It's just like if you started renaming
a variable or tweaking something or

42
00:02:25.278 --> 00:02:29.570
even should probably delete a conditional
that wasn't doing anything.

43
00:02:29.570 --> 00:02:31.345
You'll see it highlighted.

44
00:02:31.345 --> 00:02:35.308
We'll have to see that in practice because
it's very hard to create a situation where

45
00:02:35.308 --> 00:02:39.049
I know it will do it reliably, but it'll
do it, it's all the time and it will just

46
00:02:39.049 --> 00:02:42.210
kind of that tedious thing and
not only for where you are in the code.

47
00:02:42.210 --> 00:02:45.642
Let's say you changed
two variables names or

48
00:02:45.642 --> 00:02:49.081
added a fourth argument
to a given function.

49
00:02:49.081 --> 00:02:53.222
It will then give you the ability to hit
tab to jump down 200 lines to the next

50
00:02:53.222 --> 00:02:55.912
place where you probably
were going to go do that.

51
00:02:55.912 --> 00:03:00.683
Honestly, not all of this working
with AI tools has to be generate me

52
00:03:00.683 --> 00:03:02.370
a SaaS app in a weekend.

53
00:03:02.370 --> 00:03:06.897
Sometimes it can be don't make me hunt and
look for that code,

54
00:03:06.897 --> 00:03:08.826
which is very nice stuff.

55
00:03:08.826 --> 00:03:13.576
It will read your ESLint errors and
let you jump to them, so on and so forth.

56
00:03:13.576 --> 00:03:18.386
So those are kind of the three and
a half major modalities and we'll kind of

57
00:03:18.386 --> 00:03:23.440
take a look at them in a second as I buy
you a little bit of time to download this.

58
00:03:23.440 --> 00:03:28.000
Like I said before, we are going to
look at all of these things in a second.

59
00:03:28.000 --> 00:03:31.130
But the best practices from earlier apply.

60
00:03:31.130 --> 00:03:34.570
If you don't review the code,
you deserve whatever happens to you.

61
00:03:34.570 --> 00:03:37.464
If you don't use version control,
you deserve whatever happens to you.

62
00:03:37.464 --> 00:03:42.174
So on and so forth.

63
00:03:42.174 --> 00:03:43.189
It has some heuristics.

64
00:03:43.189 --> 00:03:47.533
Again, it is not magic for how this works.

65
00:03:47.533 --> 00:03:49.542
It will read whatever file
you currently have open.

66
00:03:49.542 --> 00:03:51.690
That entire file is there.

67
00:03:51.690 --> 00:03:56.028
It has a list of the recently viewed files
that it will determine if it needs to go

68
00:03:56.028 --> 00:03:56.903
reread those.

69
00:03:56.903 --> 00:04:01.281
It will try to do a search look for
active lintering compilers and

70
00:04:01.281 --> 00:04:02.831
recent edit history.

71
00:04:02.831 --> 00:04:05.702
There are some caveats though,

72
00:04:05.702 --> 00:04:10.496
because again you can only load so
much into context.

73
00:04:10.496 --> 00:04:15.395
It tries to be clever and if you don't
know how it is clever, then you don't know

74
00:04:15.395 --> 00:04:20.148
why it's not working, which is it'll
get the first 250 lines of a file and

75
00:04:20.148 --> 00:04:23.610
if it's searching we'll get
the first hundred lines.

76
00:04:23.610 --> 00:04:28.457
So you can either there's some lessons
to learn about how do you architect your

77
00:04:28.457 --> 00:04:29.566
code base there?

78
00:04:29.566 --> 00:04:34.494
Is it that you just assume that and
just deal with it or

79
00:04:34.494 --> 00:04:38.526
do you keep your files under 250 lines or

80
00:04:38.526 --> 00:04:43.118
as close as you can possibly
get away with it might

81
00:04:43.118 --> 00:04:47.270
use a smaller model if
you give it more to do.

82
00:04:47.270 --> 00:04:49.110
So on and so forth.

83
00:04:49.110 --> 00:04:50.430
We can figure out ways.

84
00:04:50.430 --> 00:04:56.950
Okay, if 250 is a little hard,
maybe it's 400.

85
00:04:56.950 --> 00:05:02.268
Can we have ESLint rules that stop
any AI writing code from making

86
00:05:02.268 --> 00:05:08.288
files because it will make you 1000
line file that then cannot read.

87
00:05:08.288 --> 00:05:14.420
Can you keep these files smaller,
so on and so forth.

88
00:05:14.420 --> 00:05:17.515
Can you actually point it in the right
direction rather than rely on these

89
00:05:17.515 --> 00:05:18.132
heuristics?

90
00:05:18.132 --> 00:05:22.959
You can say I need you to look at this
file, this file and this file, or

91
00:05:22.959 --> 00:05:27.541
in this folder, or this given
symbols are basically a function or

92
00:05:27.541 --> 00:05:32.654
a variable name or a class or something
like that, or go read these docs.

93
00:05:32.654 --> 00:05:35.112
You actually give it a URL for
the docs and

94
00:05:35.112 --> 00:05:38.163
we'll go read those docs
before you do the thing.

95
00:05:38.163 --> 00:05:42.753
Or go search the web for
the recent version of Svelte or

96
00:05:42.753 --> 00:05:46.119
Zod or React or Redux or what have you and

97
00:05:46.119 --> 00:05:51.132
go read that before we do the thing and
all of those things.

98
00:05:51.132 --> 00:05:56.361
The other conceptual thing
just to wrap our heads

99
00:05:56.361 --> 00:06:01.217
around is you get a choice of models,
right?

100
00:06:01.217 --> 00:06:07.620
And that choice has trade offs, even
if you are infinite money bags, right?

101
00:06:07.620 --> 00:06:10.109
Like there are trade offs in all of those.

102
00:06:10.109 --> 00:06:14.631
Because the bigger the model,
the longer it's going to take,

103
00:06:14.631 --> 00:06:17.545
the more it has a bigger context window.

104
00:06:17.545 --> 00:06:19.960
Cool, now it has to process that.

105
00:06:19.960 --> 00:06:24.390
You got the anthropic models,
which we'll see again later in the day.

106
00:06:24.390 --> 00:06:26.017
Sonnet is the daily driver.

107
00:06:26.017 --> 00:06:28.093
There's older versions of Sonnet,
so on and so forth.

108
00:06:28.093 --> 00:06:30.030
There's Haiku as well,
which is even smaller.

109
00:06:30.030 --> 00:06:34.553
Opus is the big one.

110
00:06:34.553 --> 00:06:38.430
Opus will cost you somewhere between
four and six times as much though.

111
00:06:38.430 --> 00:06:43.649
A lot of times in dollars or
in rate limits, your choice, same thing.

112
00:06:43.649 --> 00:06:49.727
I gotta say, even as somebody who aspires
to be good at front end engineering,

113
00:06:49.727 --> 00:06:52.408
that's a pretty nice looking ui.

114
00:06:52.408 --> 00:06:56.590
As long as you like Tailwind, that's
a pretty nice UI that you did there.

115
00:06:56.590 --> 00:07:00.281
I like it, I'm impressed.

116
00:07:00.281 --> 00:07:03.650
Some code, simplification,
refactoring sometimes.

117
00:07:05.330 --> 00:07:07.850
It is usually my go to for coding tasks.

118
00:07:07.850 --> 00:07:09.751
For brainstorming,
I tend to use either Gemini or O3,

119
00:07:09.751 --> 00:07:11.010
which we'll talk about in a second.

120
00:07:12.130 --> 00:07:17.321
But for the actual doing of the code,
I really like Sonnet most of

121
00:07:17.321 --> 00:07:23.380
the time because it's that sweet
spot of affordable and also good.

122
00:07:23.380 --> 00:07:25.620
We like that sweet spot.

123
00:07:25.620 --> 00:07:30.500
We've got the Google family of models.

124
00:07:30.500 --> 00:07:34.460
The numbers change, but
you've got Flash, you've got Pro.

125
00:07:34.460 --> 00:07:39.928
Flash is fast Pro does thinking,
which is before it tries to do anything,

126
00:07:39.928 --> 00:07:46.280
it thinks about what does it mean by that
question and considers an approach before.

127
00:07:46.280 --> 00:07:50.440
Before spitting out an answer,
which I aspire to be good at one day.

128
00:07:51.640 --> 00:07:52.918
It has a giant window.

129
00:07:52.918 --> 00:07:54.034
OpenSoc has a giant window.

130
00:07:54.034 --> 00:07:57.040
And O3 does as well of 200 million tokens.

131
00:07:57.040 --> 00:07:59.960
So for those keeping track at home,
that's almost like 8 million characters.

132
00:07:59.960 --> 00:08:05.640
That said, your entire
conversation is taking up that.

133
00:08:05.640 --> 00:08:08.280
So work accordingly.

134
00:08:10.120 --> 00:08:14.828
I really like it for code reviews or
giving it an entire repo and saying,

135
00:08:14.828 --> 00:08:17.970
help me make sense of this
because you can even.

136
00:08:17.970 --> 00:08:21.921
I'll show you some tools towards the end
of our time together where you can

137
00:08:21.921 --> 00:08:25.425
even just go into regular Gemini,
like the browser chat thing and

138
00:08:25.425 --> 00:08:29.010
give it an entire code base and
be like, help me make sense of this.

139
00:08:29.010 --> 00:08:32.490
So it's great for the planning because
you can feed it in the entire code base.

140
00:08:32.490 --> 00:08:35.410
Maybe it's not so
good then the surgical precision there.

141
00:08:35.410 --> 00:08:38.090
But again, you're in the brainstorming,
you're in the planning phase.

142
00:08:39.210 --> 00:08:43.159
Also, it's deep research is far and
away, in my opinion the best.

143
00:08:43.159 --> 00:08:47.363
It feels faster if you download
both Gemini CLI today and

144
00:08:47.363 --> 00:08:51.960
Claude Code,
Gemini always just seems a lot faster.

145
00:08:51.960 --> 00:08:56.464
Again, these could always change at some
point too, but it's really good for,

146
00:08:56.464 --> 00:09:00.920
I think, writing, brainstorming,
understanding a large code generation.

147
00:09:00.920 --> 00:09:04.043
I use a lot more for the planning and

148
00:09:04.043 --> 00:09:10.200
I use a lot of the anthropic models for
the actual doing of the thing.

149
00:09:10.200 --> 00:09:13.283
Sonnet will go wild if you leave it
on its own because it's very good at

150
00:09:13.283 --> 00:09:13.985
writing code.

151
00:09:13.985 --> 00:09:17.310
You have somebody on your team like that,
right?

152
00:09:17.310 --> 00:09:19.150
Very good at writing a lot of code.

153
00:09:19.150 --> 00:09:22.350
Yeah, you got the OpenAI ones.

154
00:09:23.550 --> 00:09:26.830
Again, brainstorming predominantly.

155
00:09:26.830 --> 00:09:29.070
What am I missing here
is what I use it for.

156
00:09:30.670 --> 00:09:33.550
Less likely to hallucinate
on the factual questions.

157
00:09:33.550 --> 00:09:35.790
Not so good at writing code.

158
00:09:35.790 --> 00:09:36.350
Sorry.

159
00:09:36.350 --> 00:09:38.426
In my opinion, your mileage may vary and

160
00:09:38.426 --> 00:09:42.518
we'll definitely give up halfway through
a task if you actually haven't tried

161
00:09:42.518 --> 00:09:45.950
to implement something 40 in particular,
I'm looking at you.

162
00:09:47.390 --> 00:09:49.450
That said Sonnet,
we'll do that sometimes as well.

163
00:09:49.450 --> 00:09:56.510
So again, it is a lot of times the one
I am brainstorming with as well.

164
00:09:57.790 --> 00:09:59.950
Sometimes it just depends on the day and
my mood.

165
00:09:59.950 --> 00:10:05.470
But yes, this one I don't use,
but it's worth mention.

166
00:10:05.470 --> 00:10:07.430
You can host your own models.

167
00:10:07.430 --> 00:10:10.771
There's an app called LM Studio which
I think is cross platform which

168
00:10:10.771 --> 00:10:13.017
will download models from Hugging Face and
and

169
00:10:13.017 --> 00:10:15.970
let you host whatever your poor
little computer can handle.

170
00:10:17.810 --> 00:10:21.287
Great.
If you are like I don't need ChatGPT,

171
00:10:21.287 --> 00:10:22.970
not the GPT models.

172
00:10:22.970 --> 00:10:25.410
It's remembering every conversation
you have and referencing it.

173
00:10:25.410 --> 00:10:26.330
Knows what kind of car I drive.

174
00:10:26.330 --> 00:10:27.010
I don't like that.

175
00:10:28.370 --> 00:10:29.490
So I get it.

176
00:10:31.730 --> 00:10:35.465
And so you better have some pretty good
hardware you can host your own models,

177
00:10:35.465 --> 00:10:38.930
you can give it an OpenAI compliant
API around any given model you find.

178
00:10:40.050 --> 00:10:44.864
That said, you probably don't have the
hardware for this in any meaningful way,

179
00:10:44.864 --> 00:10:47.254
but I think it's always a useful thing.

180
00:10:47.254 --> 00:10:48.916
So there's this app LM code.

181
00:10:48.916 --> 00:10:53.518
You can download all of these different
models, you can chat with it,

182
00:10:53.518 --> 00:10:57.886
you can expose it as a local host
server and it'll have you can point

183
00:10:57.886 --> 00:11:01.802
the OpenAI SDK at it and
use your own models on your machine.

184
00:11:01.802 --> 00:11:06.774
I think definitely worth playing with and
worthy mention if

185
00:11:06.774 --> 00:11:11.846
you're getting the scaries from
shipping all of your code or

186
00:11:11.846 --> 00:11:17.226
your security and IT department
is getting the scaries as well.

187
00:11:17.226 --> 00:11:22.089
This is theoretically an option that one
day when I own a $10,000 Mac Studio,

188
00:11:22.089 --> 00:11:24.225
I might use the last piece of advice.

189
00:11:24.225 --> 00:11:26.291
Smaller models are also faster,
cheaper models.

190
00:11:26.291 --> 00:11:28.813
If you're on a free plan,
you are rate limited.

191
00:11:28.813 --> 00:11:33.418
If you like to use it,
I will say I can confirm that and

192
00:11:33.418 --> 00:11:36.992
we'll see this later with Claude code.

193
00:11:36.992 --> 00:11:42.121
If you write a really good detailed plan,
if you do all the things that we're

194
00:11:42.121 --> 00:11:47.828
going to talk about today, if you have the
feedback loops, if you have solid plans.

195
00:11:47.828 --> 00:11:51.637
If you've written everything
out in incredible detail,

196
00:11:51.637 --> 00:11:56.780
a small model with good detail plan will
do better than Opus let loose, right?

197
00:11:56.780 --> 00:12:01.576
If I have to do one like major hit
on the theme of today, that is it.

198
00:12:01.576 --> 00:12:04.240
And with that, let's go look at another.

