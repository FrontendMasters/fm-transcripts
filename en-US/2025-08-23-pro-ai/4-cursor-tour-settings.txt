[00:00:00]
>> Steve Kinney: Like, my encouragement is if you have some code to play with that exists, like I think like seeing it in, like having using Cursor in a code base that you can index and do stuff with. Useful if you don't. We have this course webpage which is all of my various notes that if I'm going to write them, might as well put them somewhere, as well as some stuff that I have no intention that we'll ever get to down at the bottom here and some of the links.

[00:00:27]
So you're like, he showed me a screenshot of a thing, cool. But also here is a little template library which is vite, TypeScript, some Es, like all of the, like baseline stuff that like, some git hooks, stuff that we might need or want at various points. So if you're like, I don't got anything, you can go, I'm gonna jump in here and like kind of go tabla rasa a little bit.

[00:00:51]
So you can do the traditional way, which is kind of go find cursor, hit like open a project or clone a repo, so on and so forth. You can see my embarrassing project names or as I usually use it from the command line, navigate into a folder cursor, same way as you do in VS code.

[00:01:17]
And as I think I joked before to you earlier, if it looks a lot like VS code, that's cuz it's a fork of VS code with the one questionable decision of putting those sidebar icons along the top, which I do not agree with. And they only did that like a month ago and I don't like it.

[00:01:38]
All right, so let's take a tour of our friendly little tool here. So again, some of it needs no introduction. If you would like to hear me ramble about VS code for hours on end, that is available to you. But let's talk about the things that make Cursor cursor.

[00:01:56]
Most notably is we've got this sidebar and I'm aware there is a version that looks shockingly similar in VS code these days for Copilot, but this is the one in Cursor where we've got a few things going on. Let's start with the main chat window which does what we think what is the tech stack of this code base?

[00:02:27]
All right, so figured out the question, you gonna analyze this, you can kinda see what it's doing. Now I'm going to argue to you that this might look boring. And for reading, you could probably walk away and get a cup of coffee when you're writing, you probably want to watch this, right?

[00:02:44]
Because yelling at it to stop might be a thing that you want to do. Because yeah, obviously if you have good discipline and there is this idea of checkpoints in cursor, you can roll stuff back. But again, I will remind you, you are either playing with the rate limits on whatever plan you are on or I'll show you, you can put in your own API keys and pay by token, right.

[00:03:05]
And when it is your money or you're worried about getting cut off for the day, the week, the month or even the year, like you care a lot more about the rabbit holes it goes down to goes down. So I would argue that like taking a look at this probably makes sense.

[00:03:24]
So you can kind of get a sense where it's gone through the code base and like, okay, this is a relatively simple app, but like you can see that it's got a general shape of the things involved and knows roughly what's going on. Cool. And you get a sense of how much of the context window for the given model you are using at this point.

[00:03:49]
So there's a way to get a sense because if it runs out of context and we'll see different ways for handling that, it's going to start dropping packets and losing context, which increases the likelihood that that it's going to start making stuff up. So you have this idea of add context, which you can click and I will.

[00:04:11]
Because we're all here together where you can kind of pull in any docs you've given it. This case, it doesn't necessarily have one, but you can add a new one. We'll take a look at that. I predominantly use it almost all the time for files and folders, which is like, hey, these are the related files for this thing that we're doing.

[00:04:33]
I need you to go look at this one file that's fetching the data from the server and this other file where we have the component that's displaying it and the CSS file and we need to do such and such. I almost never click this button. You're welcome to.

[00:04:50]
It's also nice, especially when you're first learning to go see any of these things. This is also a relatively empty project, I'll pull up another one in a second. You can get a sense of all those things, but then the other way to do it is just to hit the symbol and you do something like, I don't know, just easily App application, which is not the file that I'm in presently, but now it will go and it will read application TSX and have the contents of that file in place.

[00:05:19]
And what's nice about that is not just reading that file. Let's say that file import stuff. It can follow the breadcrumbs. You don't necessarily have to be exhaustive about this. You just want to get the general shape of the files that you think might be relevant. More importantly, we've got this model toggle where you have auto, where it's like cursor, you figure it out.

[00:05:46]
Most of the time this probably changes, but I think most of the time it's either like 4.0 or Sonnet 3.5 or you can turn that off and you can pick which model. If your list looks different than my list, I will show you how to change this list in one second.

[00:06:05]
Probably, yeah, you just go down there and change it. But that's fine, don't worry about it. You don't have a different cursor than I do. I mean, I pay for it, so I do have a different cursor than you. Then you also have max mode, which is I will spend money to make this problem go away.

[00:06:22]
And trust me, you will spend money. These are the kind of different modes that you can put it in. This one you will not have on the hobby plan or maybe if you don't have a credit card. But we'll talk about that in a second. The two that we really care about are agent, which is go build a thing or change code or ask which is the safer one of like can we just talk about the code base, right?

[00:06:46]
And you're like, no, I'm here to make it. Write code for me one thing and we'll talk about ways you can run parallel agents again. I thought it was really cool when I first saw that you could do it. I now don't do it because I have to review all that stuff.

[00:07:00]
And I'm always like, you know how in JavaScript there's one main thread, you are the main thread, right, you can spin off other web workers and stuff like that, but ultimately you are the main thread. And I tend to not paralyze too much work anymore because I still like when I wasn't reviewing anything that felt cost free and great.

[00:07:19]
And then I learned my lesson and now I review everything and I don't do that anymore. But ask mode is really cool because a lot of times while if you're working on just one branch, while if Claude code or a cursor agent is going and changing stuff, having two things change the file system at the same time it's gonna be bad cuz it's like this file has changed the last time I read it.

[00:07:39]
They'll get into a loop. Things will end poorly. But what I will do a lot of times is either a switch it into ask mode on a separate one and just start brainstorming and talking about the code base. I'm like, which components don't have good enough accessibility? Which components don't have test coverage?

[00:07:59]
Where am I not where do I have a memory leak? Because I'm building a Chrome extension right now. I've got memory disks all over the place, constantly. I can go ahead and ask these questions while I have an agent doing something. Or if I am in agent mode, it's like I've got something working on some code while I'm watching it.

[00:08:19]
And then I'm like, let's write a plan down to a markdown file. It's the only thing the other agent is doing. But I'll show you how you can get four of these running at once at your own peril, and I do it still, I did it this week.

[00:08:34]
You've got that here. Background agents, we'll talk about chat history, so on and so forth. Let's go into these settings. You can go either going into this more models will get us there. Or cursor settings. Cursor settings. You can see VS code settings. Those are what you think they are because it's VS code.

[00:08:56]
Really cool. And so here's some important things to configure that are cursor specific. I'm not going to go into the VS code stuff because that's been covered by me previously. You can import all your settings from VS code. If you are opening cursor for the first time, it prompted you to do so.

[00:09:13]
Would you like to port in everything from VS code and leave pass behind? Sure, go for it, so on and so forth. The interesting one here is in chat where you can tweak a few things based on your preferences. We've got what mode do we want to start out in?

[00:09:29]
Up to you. I'm usually writing plans. I'm still asking questions. And let's write this down to a markdown file, so on and so forth. Should it auto clear the chat after periods of activity? Because you will not. Maybe you're a better person than me. I don't have the discipline to remember to clear it out when I have a grand idea that I want to talk about.

[00:09:53]
So letting it clear out is good. This idea, like we talked about before both Cloud Code and Cursor have this ability to come up with to do lists and show you the to do list of what it's going to do before it does it. And I keep track of a multi step thing.

[00:10:07]
That's a great feature. I don't know why you would turn it off, but if you wanted to, you could. And queue messages is that you can keep stacking up more things that you wanted to do afterwards. You know, it's good in the ways you think it's good, it's bad in the ways you think it's bad, which is like.

[00:10:25]
Then you gotta clear that queue if you wanna interject something in the middle. Yeah, so the interesting ones that we care about, this one, I toggle on and off depending on whether I need it, which is you can reference a full folder, right? Which is if it is like I need to do everything, I need you to have all of the files in this folder's context.

[00:10:44]
You want that on. But again, the name of the game is context management. Up to you. This one's good. Unless you want to turn it off for a specific reason, but leave it on, which is dot file protection, don't touch any of my dot files. You're like, hey, yeah, Gitignore, that seems important.

[00:11:03]
Don't touch that. Or hey, cursor, don't change your own rules cuz that goes into a dot file as well, right? So that one stays on most of the time. Even if you thought you needed it for a given reason, you leave it on. You know, don't leave the folder.

[00:11:19]
We'll see. For all these tools, like especially Monorebo situations, there is a time these switches exist for a reason. That doesn't mean you should turn them off, it just means that they're there if you need it. The other one that we care about here though is the models.

[00:11:31]
You can just kind of choose what's in that list. Again, you will be billed at API pricing for the fancy ones, which for stuff like Opus and O3 just got a big discount, right, but it used to be O3 was very expensive. You can also, if you do not want to pay Cursor or you can't or you have some reason where you have a key from your company, you can actually put in your API keys for any of these services.

[00:12:01]
And instead of going through Cursor, because effectively when you use Cursor, any of these models, you're going to Cursor, Cursor is hitting the model, Cursor is paying OpenAI or Anthropic. You are paying cursor, you can cut out the middleman if you need to. Obviously don't like it when you do that cuz I'm sure they're taking a cut.

[00:12:19]
I know they're taking a cut, but you can put in these, especially if it's something like both. I think AWS bedrock and other stuff are kinda ways to have corporately managed ones as well.

