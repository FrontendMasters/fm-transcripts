WEBVTT

1
00:00:00.640 --> 00:00:02.320
&gt;&gt; Steve Kinney: So
there's a bunch of ways to make them.

2
00:00:02.320 --> 00:00:05.200
One, you could just literally
make that folder and do it right.

3
00:00:05.200 --> 00:00:11.514
The other one,
you do add user rule or user rule,

4
00:00:11.514 --> 00:00:17.520
view user rules,
new cursor rules, do that.

5
00:00:18.720 --> 00:00:26.250
Okay, so let's call this one reaction.

6
00:00:26.250 --> 00:00:31.166
And as you can see,
this basically looks like a markdown

7
00:00:31.166 --> 00:00:36.090
file where you can start to
express some of that intent.

8
00:00:38.570 --> 00:00:40.090
We were talking about this earlier.

9
00:00:40.090 --> 00:00:45.930
This is one of the things that
multiple people have mentioned.

10
00:00:45.930 --> 00:00:47.950
My co founder, Rylan,

11
00:00:47.950 --> 00:00:54.020
does this where he's got this one
where he uses, he has three of these.

12
00:00:54.020 --> 00:00:59.658
It's funny, when I grab his code,
he said, always print these three

13
00:00:59.658 --> 00:01:04.740
emojis to the chat to acknowledge
that you have read this file.

14
00:01:06.660 --> 00:01:10.820
If he doesn't see those, he knows
his file has not gotten picked up.

15
00:01:10.820 --> 00:01:16.608
Which is when I talk about there's
more art to this than science,

16
00:01:16.608 --> 00:01:19.070
genius and ridiculous.

17
00:01:19.070 --> 00:01:20.030
And it works.

18
00:01:20.030 --> 00:01:22.990
And now every time I see this code,
I see those emojis all the time.

19
00:01:22.990 --> 00:01:24.430
It's like not taking up that many tokens.

20
00:01:24.430 --> 00:01:26.910
So, you know, have fun.

21
00:01:26.910 --> 00:01:31.230
But, like, I'm like, it's wild.

22
00:01:31.230 --> 00:01:34.390
So if anyone else has, like, weird tricks
like that, definitely bring them up.

23
00:01:34.390 --> 00:01:39.430
Because, like, I was like, that would
have never occurred to me to do so.

24
00:01:39.430 --> 00:01:40.190
Yeah.

25
00:01:40.190 --> 00:01:41.790
So we've got.

26
00:01:41.790 --> 00:01:42.500
You can.

27
00:01:42.500 --> 00:01:44.740
Some of these.
You can tweak in these settings.

28
00:01:44.740 --> 00:01:46.580
So these are the options we saw earlier.

29
00:01:46.580 --> 00:01:48.100
I don't trust that one.

30
00:01:48.100 --> 00:01:52.900
I don't trust that one because I'm
not a good enough person for that.

31
00:01:52.900 --> 00:01:54.140
So apply to specific files.

32
00:01:54.140 --> 00:01:56.020
I think it's the interesting one for
our case.

33
00:01:56.020 --> 00:01:57.540
Okay.
And you can see some suggestions.

34
00:01:57.540 --> 00:02:03.460
So if this one is React, it makes sense
that we definitely want TSX files.

35
00:02:03.460 --> 00:02:08.650
And the nice thing just to,
like, as a sanity check

36
00:02:08.650 --> 00:02:14.830
is if you type in a bogus pattern,
you at least get a warning.

37
00:02:16.030 --> 00:02:19.299
I know this because I
made a typo one day and

38
00:02:19.299 --> 00:02:23.230
I think I spelled svelte wrong,
which I do daily.

39
00:02:25.470 --> 00:02:27.750
And you can at least catch that.

40
00:02:27.750 --> 00:02:32.992
And you can do stuff like where you can
get, like, again, the regular brain,

41
00:02:32.992 --> 00:02:37.540
smart brain, galaxy brain version
of this is like, all TSX files.

42
00:02:37.540 --> 00:02:38.180
Great.

43
00:02:38.180 --> 00:02:38.980
All REACT files.

44
00:02:38.980 --> 00:02:42.140
Like, hey, we write them in typescript,
hey, we do this, so on and so forth.

45
00:02:42.140 --> 00:02:43.500
Don't export them as default.

46
00:02:43.500 --> 00:02:45.980
I don't have weird things.

47
00:02:45.980 --> 00:02:51.354
But, like, if I could convince six
people on my team to follow them,

48
00:02:51.354 --> 00:02:56.450
I think I can convince an AI and,
like, you can build this up, but

49
00:02:56.450 --> 00:03:01.919
then you can also do, like, you know,
this obviously won't work but

50
00:03:01.919 --> 00:03:05.905
let's say like Source/ Components TS so
now hey,

51
00:03:05.905 --> 00:03:09.280
this rule only to my reusable components.

52
00:03:11.440 --> 00:03:13.480
And then let's say I had
two different files.

53
00:03:13.480 --> 00:03:17.946
I could have one for all react
components and I could have one for

54
00:03:17.946 --> 00:03:23.336
the react components in this file or the
other thing that I will do is I have and

55
00:03:23.336 --> 00:03:28.389
I codify these in some rules for
creating files and I have a bunch of other

56
00:03:28.389 --> 00:03:33.695
weird stuff that is my own making where
it's like if I'm defining tools for

57
00:03:33.695 --> 00:03:37.400
an agent to use,
I'll actually use a tool TS file and

58
00:03:37.400 --> 00:03:42.120
then those are automatically
pulled into those rules.

59
00:03:42.120 --> 00:03:44.360
You can start to build
out what you want for

60
00:03:44.360 --> 00:03:48.782
react component they should be in this
folder, they should export the function or

61
00:03:48.782 --> 00:03:52.883
export default whatever it is that you
should be consistent in your code base

62
00:03:52.883 --> 00:03:57.090
because again, the consistency
matters because I am tightly wound.

63
00:03:57.090 --> 00:04:02.450
The consistency matters because that
is context clues for the LLM right?

64
00:04:02.450 --> 00:04:07.330
And giving it more patterns is only
adding chaos and entropy into the system.

65
00:04:07.330 --> 00:04:14.050
And I used to deal with people,
I let go of a lot of that.

66
00:04:14.050 --> 00:04:18.189
I don't need to hassle my hard working
team that I like arrow functions and

67
00:04:18.189 --> 00:04:20.370
Alex likes function expressions.

68
00:04:20.370 --> 00:04:25.466
You know what, the code base has both
because Alex is working very hard and

69
00:04:25.466 --> 00:04:28.190
that's not helpful in a pull request.

70
00:04:29.230 --> 00:04:32.416
But for an AI,
I can be the worst version of myself and

71
00:04:32.416 --> 00:04:34.670
it's been working out great for me.

72
00:04:35.710 --> 00:04:37.190
So I will kind of, I'll show you.

73
00:04:37.190 --> 00:04:41.043
So I've got some that I wrote

74
00:04:41.043 --> 00:04:46.510
recently where I reuse my own jokes.

75
00:04:46.510 --> 00:04:52.533
So for TypeScript, even if it's creating
a TypeScript file or whatever, but

76
00:04:52.533 --> 00:04:59.270
also to make sure it doesn't change it,
okay, here are the files we're gonna use.

77
00:04:59.270 --> 00:05:04.310
And again, where do you think
the inspiration for this rule came from?

78
00:05:04.310 --> 00:05:08.950
Never use @ts-ignore or ts-expect-error
without explanatory comments.

79
00:05:10.550 --> 00:05:11.750
You know where that came from.

80
00:05:11.750 --> 00:05:12.470
It did it.

81
00:05:14.550 --> 00:05:20.770
And some of this, as you can see my
increased frustration over time.

82
00:05:20.770 --> 00:05:24.050
And yes, I'm aware of what I'm
doing to the token counts.

83
00:05:25.490 --> 00:05:27.330
I'm aware that I'm a hypocrite at times.

84
00:05:28.930 --> 00:05:32.530
But as you can see, I don't like enums.

85
00:05:32.530 --> 00:05:36.410
So some of that is my own personal things.

86
00:05:36.410 --> 00:05:38.210
We can kinda begin again.

87
00:05:38.210 --> 00:05:40.049
Some of that though is useful, right,

88
00:05:40.049 --> 00:05:42.290
document the complex
type with JSON comments.

89
00:05:42.290 --> 00:05:45.810
Now every time it goes into
a Typescript file it reads that.

90
00:05:45.810 --> 00:05:50.610
Sometimes it doesn't,
you know, so on and so forth.

91
00:05:50.610 --> 00:05:54.658
Again, as you see,
I care strongly about eslint but

92
00:05:54.658 --> 00:06:01.098
I wrote this one before I got the flow of
making, now I've got pre-commit hooks and

93
00:06:01.098 --> 00:06:05.238
so it's like a lot of times I
will have to say in a prompt

94
00:06:05.238 --> 00:06:09.850
you are not successful until
you can make a commit, right?

95
00:06:11.520 --> 00:06:16.812
And knowing that my pre-commit hooks will

96
00:06:16.812 --> 00:06:21.520
not pass if my rules are not followed.

97
00:06:22.640 --> 00:06:26.441
When we look at cloud hooks later you can
have hooks where you can see it will check

98
00:06:26.441 --> 00:06:28.400
with you Pre tool use and post tool use.

99
00:06:28.400 --> 00:06:29.440
Where post tool use.

100
00:06:29.440 --> 00:06:32.273
You can run all those checks and
yell at it or

101
00:06:32.273 --> 00:06:37.232
pre tool use if it starts to say hey,
it's going to run this bash command git

102
00:06:37.232 --> 00:06:40.880
commit no verify which skips
all the pre commit hooks.

103
00:06:40.880 --> 00:06:43.120
You can literally block it, right?

104
00:06:43.120 --> 00:06:48.040
And that's like again that is the set of
controls to keep this stuff like in place.

105
00:06:49.240 --> 00:06:53.280
You know, like just little like is this
the most important thing in the world?

106
00:06:53.280 --> 00:06:53.960
No.

107
00:06:53.960 --> 00:06:55.080
Am I a bad person?

108
00:06:55.080 --> 00:06:56.440
Probably.

109
00:06:56.440 --> 00:06:58.520
I like my imports in a certain order.

110
00:06:58.520 --> 00:07:00.840
Like do you understand how hard
I am to work with as a person?

111
00:07:03.730 --> 00:07:06.570
I do type validation with Zod now.

112
00:07:06.570 --> 00:07:10.004
I think I have like the one that
I have in my project now is

113
00:07:10.004 --> 00:07:13.530
like always use Zod v4 again rules,
so on and so forth.

114
00:07:13.530 --> 00:07:16.793
You can kind of see about like, you know,

115
00:07:16.793 --> 00:07:21.730
like don't just trust that fetch
because fetch returns any.

116
00:07:21.730 --> 00:07:23.970
It'll just believe whatever you said.

117
00:07:23.970 --> 00:07:28.882
Actually this is like a known pattern
that somehow works, wrong and

118
00:07:28.882 --> 00:07:30.700
right anti-patterns.

119
00:07:31.980 --> 00:07:35.078
If you've ever done the image generation,

120
00:07:35.078 --> 00:07:40.017
negative prompts are a thing like
statistics, you say what you want,

121
00:07:40.017 --> 00:07:44.370
but also making it very clear
what you don't want actually for

122
00:07:44.370 --> 00:07:48.140
these models is an effective
counterbalance.

123
00:07:48.140 --> 00:07:51.100
So you can begin to try to
find some of these patterns.

124
00:07:51.100 --> 00:07:54.010
But again these are just
ones of TypeScript.

125
00:07:54.010 --> 00:07:56.635
What I want an employee
to do is eventually

126
00:07:56.635 --> 00:07:59.485
read these documents
about the architecture

127
00:07:59.485 --> 00:08:03.690
of this application before you
touch any files in this directory.

128
00:08:06.090 --> 00:08:07.370
I have JSON.

129
00:08:07.370 --> 00:08:08.650
There's a bunch of code that I.

130
00:08:09.929 --> 00:08:13.772
A lot of those Zod schemas that I use in
my code base I actually have generated

131
00:08:13.772 --> 00:08:15.690
from the types out of other things.

132
00:08:15.690 --> 00:08:17.770
So it's like never edit these files.

133
00:08:19.530 --> 00:08:24.300
Always run this bun command to
generate those files whenever you

134
00:08:24.300 --> 00:08:29.421
update this other file to express
all the rules in writing clearly and

135
00:08:29.421 --> 00:08:32.870
then you end up with better results,
right?

136
00:08:32.870 --> 00:08:35.350
And so like I said, there's a bunch
of ways you can begin to tweak this.

137
00:08:35.350 --> 00:08:38.887
I would implore you in
your copious free time,

138
00:08:38.887 --> 00:08:44.630
you can go into kinda rules and
again, do not, I want that one.

139
00:08:44.630 --> 00:08:47.590
I'm building a Chrome extension right now,
as I mentioned.

140
00:08:47.590 --> 00:08:49.990
So I'm like, I'm at least gonna read this.

141
00:08:49.990 --> 00:08:51.870
But you can kinda see
some interesting ones.

142
00:08:51.870 --> 00:08:55.291
Even this one jumped out at me because
it's got some things similar before,

143
00:08:55.291 --> 00:08:56.840
as we saw earlier.

144
00:08:56.840 --> 00:09:01.484
Like, and it's like, for me, when I
said some of those file extensions and

145
00:09:01.484 --> 00:09:03.445
folders in a Chrome extension,

146
00:09:03.445 --> 00:09:08.360
you've got a service worker which does
not have access to the dom, right?

147
00:09:08.360 --> 00:09:12.518
You've got content scripts that run in the
DOM that do not have access to a lot of

148
00:09:12.518 --> 00:09:14.280
the Chrome extension APIs.

149
00:09:14.280 --> 00:09:18.040
You've got these weird things
that have access to both, right?

150
00:09:18.040 --> 00:09:18.920
I start with the rules.

151
00:09:18.920 --> 00:09:24.590
Then I have eslint rules that apply
adaptively to those file paths.

152
00:09:24.590 --> 00:09:28.390
And again,
you tell it not to do it 60% of the time.

153
00:09:28.390 --> 00:09:29.150
It works every time.

154
00:09:30.350 --> 00:09:34.429
And then you have the feedback loop
to make sure it doesn't do that,

155
00:09:34.429 --> 00:09:35.576
because ideally,

156
00:09:35.576 --> 00:09:40.390
you still want to tell it not to do it,
because that feedback loop is tokens now.

157
00:09:40.390 --> 00:09:42.830
It's better than me having
to tell it to start over.

158
00:09:42.830 --> 00:09:44.190
Yeah, have both.

159
00:09:44.190 --> 00:09:47.230
But ideally, if you can get it right
the first time, that is great.

160
00:09:47.230 --> 00:09:51.242
Because a lot of times it won't read
the ESLint error message unless it gets

161
00:09:51.242 --> 00:09:53.150
an error exit code of not zero.

162
00:09:53.150 --> 00:09:53.790
Awesome.

163
00:09:53.790 --> 00:09:55.853
&gt;&gt; Male: One thing I found
interesting is if you ask it why,

164
00:09:55.853 --> 00:09:58.030
sometimes it'll tell you
how I got to that thought.

165
00:09:58.030 --> 00:10:00.590
And then you can kind of reverse
engineer the psychology.

166
00:10:00.590 --> 00:10:01.230
&gt;&gt; Steve Kinney: Yeah, yeah.

167
00:10:01.230 --> 00:10:03.963
Every time it does
something you don't want,

168
00:10:03.963 --> 00:10:07.830
if you build your own muscle memory
of why did you do that, right?

169
00:10:07.830 --> 00:10:09.230
Again, it's not unlike parenting.

170
00:10:09.230 --> 00:10:12.590
Like I said, how those rules
apply is an interesting dance.

171
00:10:13.630 --> 00:10:17.450
As many as you need,
as few as you can get away with, right?

172
00:10:18.890 --> 00:10:21.556
And, like, make sure you're not
repeating yourself across them unless

173
00:10:21.556 --> 00:10:22.330
you feel the need to.

174
00:10:23.610 --> 00:10:27.050
And like,
they will be read ideally every time.

175
00:10:27.050 --> 00:10:29.210
So they start to take away
some of that boilerplate.

176
00:10:29.210 --> 00:10:32.493
And there are other tools that
we'll look at in a little bit for

177
00:10:32.493 --> 00:10:34.970
taking away some of that
boilerplate as well.

