WEBVTT

1
00:00:00.160 --> 00:00:04.804
&gt;&gt; Steve Kinney: Before we said we had
this command L to chat which will drop you

2
00:00:04.804 --> 00:00:09.280
over to that sidebar we just saw and
command K to generate.

3
00:00:10.880 --> 00:00:15.358
So let's try it out, let's say anyone know
what they want to generate?, I have ideas,

4
00:00:15.358 --> 00:00:18.240
but like it's going to be a to
do list if you leave it to me.

5
00:00:19.600 --> 00:00:21.520
&gt;&gt; Student: VS Code fork button.

6
00:00:21.520 --> 00:00:22.120
&gt;&gt; Steve Kinney: What's that?

7
00:00:22.120 --> 00:00:23.608
&gt;&gt; Student: Should you do
like a VS Code fork button.

8
00:00:29.930 --> 00:00:33.740
&gt;&gt; Steve Kinney: So before we hit anything
there, who knows how it's going to end up

9
00:00:33.740 --> 00:00:38.250
for us, you can see that in this situation
it is tending to use a lighter model.

10
00:00:38.250 --> 00:00:41.988
So you can have the agent is going to
be able to traverse the code base,

11
00:00:41.988 --> 00:00:45.032
figure out what files it
thinks it needs to understand.

12
00:00:45.032 --> 00:00:49.273
Both the ones you told it about as well as
ones it thinks it needs to know based on

13
00:00:49.273 --> 00:00:50.810
what it's doing.

14
00:00:50.810 --> 00:00:53.651
You can even see by default,
I think I had on auto,

15
00:00:53.651 --> 00:00:57.590
I left it on Claude Force on it with
thinking, the brain is thinking.

16
00:00:58.870 --> 00:01:03.444
Thinking is great, we like thinking,
thinking costs money,

17
00:01:03.444 --> 00:01:05.510
same is true for humans.

18
00:01:05.510 --> 00:01:10.912
It will tend to use a lighter model for
these inline things because it doesn't

19
00:01:10.912 --> 00:01:15.910
need as much context, it doesn't
need to consider what it's doing.

20
00:01:15.910 --> 00:01:21.182
It just kind of like needs to know
the current thing you have highlighted or

21
00:01:21.182 --> 00:01:25.024
where it is, for instance,
who knows how this goes.

22
00:01:30.110 --> 00:01:34.772
&gt;&gt; Steve Kinney: Interesting choice,
we'll kind of just take the thing

23
00:01:34.772 --> 00:01:38.350
that you are highlighting and do it right.

24
00:01:40.190 --> 00:01:44.757
But let's play with this a little bit more
because there's some powerful things you

25
00:01:44.757 --> 00:01:49.127
can do with this, being able to surgically
go to the piece of code that you need and

26
00:01:49.127 --> 00:01:51.210
ask it about to do something is great.

27
00:01:52.570 --> 00:01:59.050
But there are ways that we
can make this even better,

28
00:01:59.050 --> 00:02:03.909
so let's just make a brand new file, so

29
00:02:03.909 --> 00:02:11.370
let's say we want to say not a Rust file,
typescript file.

30
00:02:11.370 --> 00:02:16.228
And we'll say you can
see you get that kind of

31
00:02:16.228 --> 00:02:21.743
Copilot stuff in there as well,
but you can say and

32
00:02:21.743 --> 00:02:29.381
here's that tab feature which is
ruining all of my mojo right now,.

33
00:02:29.381 --> 00:02:34.240
Where it kind of guesses
what you want to do next,

34
00:02:34.240 --> 00:02:40.260
which is pretty great and
it's kind of neat how it works.

35
00:02:40.260 --> 00:02:45.279
Let's make it X and Y and
it saw that I just changed

36
00:02:45.279 --> 00:02:50.419
the last two variables of add from A and
B to X and Y,

37
00:02:50.419 --> 00:02:56.270
and it goes,
you probably want to do that for subtract.

38
00:02:56.270 --> 00:03:00.690
And you probably want to add
the rest of these, which is like,

39
00:03:00.690 --> 00:03:06.215
if I wasn't trying to show how to use
Control K, that would be 100% true,

40
00:03:06.215 --> 00:03:11.070
and it figured out what to do with
the export and so on and so forth.

41
00:03:11.070 --> 00:03:17.268
But you can do stuff like that,
you do not need to use proper markdown,

42
00:03:17.268 --> 00:03:21.994
I don't know why I'm like this,
so I was like, hey,

43
00:03:21.994 --> 00:03:29.270
this is my own personal preference,
I like to do export const, doesn't matter.

44
00:03:31.350 --> 00:03:33.423
AI is generally the code base
I have to live in it, so

45
00:03:33.423 --> 00:03:34.790
it's going to live in my styles.

46
00:03:36.470 --> 00:03:41.453
So two things, one is that it generally
speaking got the intention with what I

47
00:03:41.453 --> 00:03:43.840
selected and what I want to do again.

48
00:03:43.840 --> 00:03:48.360
And this is like this kind of
surgical approach is definitely not

49
00:03:48.360 --> 00:03:52.120
the vibe in vibe coding,
do you know what I mean?

50
00:03:52.120 --> 00:03:56.035
You are not going to create a giant
mess selecting code and expressing

51
00:03:56.035 --> 00:04:00.920
your intention on one given thing, so
choose your level of risk taking ness.

52
00:04:00.920 --> 00:04:05.090
Obviously this is just could I do
this with multiple cursors?, yeah,

53
00:04:05.090 --> 00:04:07.600
because that's like my 1 talent in life.

54
00:04:08.880 --> 00:04:12.703
But the idea of just being able to
do some of these quick refactors or

55
00:04:12.703 --> 00:04:14.560
stuff like that is incredible.

56
00:04:15.760 --> 00:04:22.543
And use current in all these functions,

57
00:04:22.543 --> 00:04:30.730
let's get functional
programming about this.

58
00:04:33.040 --> 00:04:36.336
So currying is when you have a function
where you apply the first argument,

59
00:04:36.336 --> 00:04:39.840
it returns a function that waits for
the second argument, not that bad in ES6,

60
00:04:39.840 --> 00:04:42.080
it used to be a pain previously.

61
00:04:42.080 --> 00:04:45.120
You can continue following up and
giving it more things you want to do.

62
00:04:45.120 --> 00:04:49.382
The other thing that you might notice is

63
00:04:49.382 --> 00:04:54.293
that both currently exist simultaneously,

64
00:04:54.293 --> 00:05:00.410
because this isn't necessarily
committed just yet.

65
00:05:00.410 --> 00:05:04.389
This is effectively like this is what
you wanted, and it will do this in agent

66
00:05:04.389 --> 00:05:07.450
mode too, you will be much more
tempted to hit accept all.

67
00:05:08.970 --> 00:05:12.249
This like you are not going to make
a big mess from this one modality.

68
00:05:12.249 --> 00:05:15.964
And it's arguably incredibly powerful
because if you were going to sit there in

69
00:05:15.964 --> 00:05:18.182
a larger code base and
change these all by hand,

70
00:05:18.182 --> 00:05:20.730
it would take you a while
do this stuff totally.

71
00:05:20.730 --> 00:05:25.521
You can accept all of them, you can keep
any individual one, in this case you could

72
00:05:25.521 --> 00:05:30.470
add more, in this case we'll hit accept,
and now you have these new pieces of code.

73
00:05:30.470 --> 00:05:34.914
What's nice about this mode
is I know how it does it,

74
00:05:34.914 --> 00:05:41.990
I'm not entirely sure because it seems to
work for Cursor and not for other things.

75
00:05:41.990 --> 00:05:47.226
Anyway is that let's say you had this app
running with hot module reloading going

76
00:05:47.226 --> 00:05:52.870
you will see what the suggested version
would do, it'll run the suggested code.

77
00:05:52.870 --> 00:05:57.705
So you can say, no, this broke everything,
and get all that kind of in place,

78
00:05:57.705 --> 00:06:00.354
but you can do these
like larger refactors.

79
00:06:00.354 --> 00:06:04.734
And so I can say something like there
are some kind of interesting ones,

80
00:06:04.734 --> 00:06:08.100
like what is called a lot of
times one shot prompting.

81
00:06:08.100 --> 00:06:12.180
So when we think about ChatGPT, we think
about chat, a back and forth dialogue.

82
00:06:12.180 --> 00:06:18.702
One shot is do thing, so
a lot of times you do mirror,

83
00:06:18.702 --> 00:06:24.796
like either like const or
variable or function.

84
00:06:24.796 --> 00:06:28.646
And you can say mirror
divide as modulo and

85
00:06:28.646 --> 00:06:33.597
it will go effectively look
at the divide function and

86
00:06:33.597 --> 00:06:38.670
give you another one that is
very like similar to that.

87
00:06:39.790 --> 00:06:45.090
And so for instance,
we said something like const add action,

88
00:06:45.090 --> 00:06:50.290
which will assume we're doing redux,
we'll say type sure,

89
00:06:50.290 --> 00:06:54.200
as you can see,
it's helpful in a lot of ways.

90
00:06:54.200 --> 00:06:58.596
But when you're trying to actually
show the things, the tab completion,

91
00:06:58.596 --> 00:07:01.666
which is my favorite feature
that I use constantly,

92
00:07:01.666 --> 00:07:05.671
you probably wanted to export this,
didn't you?, I did, I did.

93
00:07:05.671 --> 00:07:09.434
We can say something like mirror is
nice if you have a piece of code and

94
00:07:09.434 --> 00:07:12.748
you just want to make another
one with some slight changes.

95
00:07:12.748 --> 00:07:16.312
It'll look at that function,

96
00:07:16.312 --> 00:07:21.522
it will figure out
roughly what it's doing,

97
00:07:21.522 --> 00:07:25.223
it'll make you another one, so

98
00:07:25.223 --> 00:07:29.747
we can even say like mirror addaction as

99
00:07:29.747 --> 00:07:35.220
subtract action, no giant surprises here.

100
00:07:35.220 --> 00:07:38.208
The other one that's
interesting of mirror,

101
00:07:38.208 --> 00:07:41.700
I need a variable that does something.

102
00:07:41.700 --> 00:07:48.933
The other one I think
is really kind of neat,

103
00:07:48.933 --> 00:07:55.189
is like just saying I need a function,

104
00:07:55.189 --> 00:08:00.480
this one's saying a function.

105
00:08:00.480 --> 00:08:05.918
You roughly describe what it's supposed
to do and it will go ahead and

106
00:08:05.918 --> 00:08:10.417
look at the code in that file
because it has that context,

107
00:08:10.417 --> 00:08:16.610
roughly give you something that aspires
to be the very few words you gave it.

108
00:08:16.610 --> 00:08:19.394
Now again, you're not going to get into
too much trouble here because ideally you

109
00:08:19.394 --> 00:08:20.250
are looking at the code.

110
00:08:20.250 --> 00:08:25.164
I mean getting into the flow can be
dangerous because all of a sudden

111
00:08:25.164 --> 00:08:28.846
you're just like, yes, yes, yes, yes, yes,

112
00:08:28.846 --> 00:08:34.370
we have problems here, but you can
begin to spec some of the stuff out.

113
00:08:34.370 --> 00:08:40.784
Also, the same way is and

114
00:08:40.784 --> 00:08:45.060
so you can kind of

115
00:08:45.060 --> 00:08:49.650
get some of that.

116
00:08:49.650 --> 00:08:53.629
Again, this is code that you could
totally have written yourself and

117
00:08:53.629 --> 00:08:57.530
it would have taken you 5,
10 minutes and now it doesn't.

118
00:08:57.530 --> 00:08:59.766
So immediately, even if you're like,

119
00:08:59.766 --> 00:09:03.530
I'm not comfortable with all of
this go across my entire code base.

120
00:09:05.620 --> 00:09:11.317
You can begin to kind of get a sense
of ways that at least engaging

121
00:09:11.317 --> 00:09:18.103
with some of these tools can speed up
the less glamorous stuff in your life.

122
00:09:18.103 --> 00:09:23.092
That kind of surgical, presumably

123
00:09:23.092 --> 00:09:28.081
we can highlight the piece of code,

124
00:09:28.081 --> 00:09:33.402
if even all of a sudden, you're still

125
00:09:33.402 --> 00:09:38.723
on the hook for doing some stuff here,

126
00:09:38.723 --> 00:09:44.044
but it's not how I would have done it,

127
00:09:44.044 --> 00:09:47.870
welcome to the game.

128
00:09:47.870 --> 00:09:52.190
But you can begin to take little pieces
and again, you're expressing yourself in

129
00:09:52.190 --> 00:09:55.710
code and again you can play
a game called Follow the Problem.

130
00:09:55.710 --> 00:09:59.562
Which leads me to my next
favorite Cursor feature,

131
00:09:59.562 --> 00:10:05.394
we all know this little pop up from
VS Code, it's you made Typescript Angry.

132
00:10:05.394 --> 00:10:10.408
I live in you made Typescript angry land,
this right here,

133
00:10:10.408 --> 00:10:16.625
this button, I mean Ctrl+Shift+D as well,
this button which is like,

134
00:10:16.625 --> 00:10:20.760
as you can see it,
like loads it into the chat,.

135
00:10:20.760 --> 00:10:23.818
And starts to write you the initial
part of the prompt, I love this,

136
00:10:23.818 --> 00:10:25.600
I know, it's so dumb, it's so dumb.

137
00:10:27.440 --> 00:10:31.694
For the code present, we get this
error unknown is not assignable,

138
00:10:31.694 --> 00:10:35.960
how can I resolve this?,
if you propose, please make it concise.

139
00:10:35.960 --> 00:10:41.355
And so let's do that and see what it does,
our first taste of some of these

140
00:10:41.355 --> 00:10:47.840
other modes, where now you can see how
these two modes start to play together.

141
00:10:47.840 --> 00:10:53.385
So looking at the TypeScript one,
it explains it to you,

142
00:10:53.385 --> 00:11:00.200
two, it proposes a fix because
technically, if you return action and

143
00:11:00.200 --> 00:11:05.649
yeah, I get it,
Typescript's not wrong in this case.

144
00:11:05.649 --> 00:11:10.129
In strict mode, it's totally legit,
but here we coerce it into a Boolean,

145
00:11:10.129 --> 00:11:13.490
so we're not taking something
that is truthy or falsey,

146
00:11:13.490 --> 00:11:18.280
it is actually true and false because I
have type mode set to Typescript Strict.

147
00:11:18.280 --> 00:11:23.332
Whatever, language is hard, but
we can see that it proposes

148
00:11:23.332 --> 00:11:27.800
the changes and I can go ahead and
like keep or remove.

