[00:00:00]
>> Steve Kinney: Okay, so starting Claude up, typing Claude. Do you trust this folder? I do. So a few things that you have options here. Typing slash will get you a kind of list of all of the funneled options. Some tasty notes that don't necessarily deserve their own sections. Add dir Add directory so let's say you are in a monorepo or the other day Rylan is working on this one library for abstracting calls between OpenAI, anthropic, yada yada yada in a way that we needed it to.

[00:00:41]
I had that cloned down. I was NPM linking it, and so I wanted to go read some of the documentation files from that one. You can basically say add this other sibling or other directory into things you're allowed to access. Bug is to complain. Clear and compact, we saw, don't look at that one.

[00:01:01]
Export is kind of cool. So one of the things about Claude is theoretically, not theoretically, really. In your home directory there is a CLAUDE file and it actually just has what's called a JSON L file, which is JSON lines where you could have many JSON files in a single file.

[00:01:22]
And basically all of your conversations in all of your directories on your computer are just stored in plain text JSON on the file system. It means you can go look at whatever is recorded at any given point. You can also do export. And there's not a lot to see in this particular one because I haven't done anything yet where it will literally either save it to a file or write it to your clipboard.

[00:01:50]
Basically, everything on that screen. But you can go ahead and see every single thing it did. If you're somewhat curious, which I think is super useful, Dr. Is like if something's not working, we'll talk about hooks IDE it will if you open it up in the terminal in either VS Code or Cursor or possibly another IDE.

[00:02:09]
I don't know, it will go ahead and install its own VS Code extension where it can show you side by side diffs, kind of like Cursor does, but not nearly as good and stuff like that. And it'll show it to you in there as well. Install the GitHub app.

[00:02:24]
We'll set up some GitHub actions where you can then in your own pull request God and ask it a question. And that will just be set up like GitHub Action for you. Log in and log out. Memory will actually just be your cloud MD file, which we'll see in a second model we saw earlier, which is the ability to proxy in between Sonnet and opus permissions.

[00:02:50]
If you're like you're no longer allowed to run git commands, you can basically deny it that ability. You can deny it or you can allow it. Please don't ever ask me again about git commands. Or you are allowed to git status but not git commit. Or you're allowed to git commit but not git push.

[00:03:06]
Or you can do bash but you can't git whatever. You can tweak all of those things because all of those settings will also show up in this cloud directory under Settings JSON. The other ones that are super interesting are resume where I have done this before where Cursor wanted to update or VS code wanted to update, I quit.

[00:03:29]
I kind of was in the middle of something. You can hit resume in this case I don't like. This is a brand new thing. I don't have any message but you can find any previous session that you've done cuz they're all stored in JSON files on your file system.

[00:03:39]
I'll just load any one of those back up. You can also start with continue and it'll be the last one. If you want Vim mode, have at it. If you are in the middle of vibing and want to upgrade your plan, they will take your money from you happily.

[00:03:57]
This one's super useful though. So what this one does is effectively the more important part here is it'll show you the model and if you are, if you hit a rate limit on Opus or if you hit a rate limit overall, you will see when you are in their good graces again.

[00:04:18]
You can get a sense of when you're allowed to use whatever model for a second time. You can check all those out, but you can get a sense of what you have going on, so on and so forth. I think I have multiple installations. I installed it again to get you those screenshots from earlier, so I'll deal with that at some point.

[00:04:37]
But it's not bothering anyone right now. So yeah, you can install all those different things. But yeah, the slash status is useful if you are getting rate limited or you're just curious what model you're on. But you can also just do that slash model that I showed you earlier, right?

[00:04:52]
You can swap, you're like hey, I want to use Sonnet for this thing. And like I said before, I spent a lot of time jockeying back and forth because again, six to eight times more tokens on opus planning Big brain thought if I'm coming up with A PRD in one file and an implementation plan in another file.

[00:05:12]
I'll maybe do all that in Opus and review it. And then for the fix my lint errors, we'll let Sana do that one. Cool, so the most important thing when you first start on a project is you do this /init, right? And one of the best parts, I don't know what this is called, but the verbs that it just cycles through, particularly when you get angry, are a treat.

[00:05:44]
This one's not great, but don't sleep on the ridiculous stuff it says as I demo this to you, right? It's worth it. This is not the most. We can kind of also see the token usage, which strikes you as, why do I need to see this? You care.

[00:06:03]
When you see the seconds going up and you don't see the tokens going up, right? It means like, your test suite is just sitting there stalling. Or like it's tried to start up a dev server and that blocked the terminal the same way Vite holds the entire thread.

[00:06:21]
Or like a server does and you might need to intervene. It will timeout after two minutes, but that's like two minutes, which doesn't feel long in the grand sense of things, but like it is when you're watching, like a pot of water boil. All right, so do you want to make this edit?

[00:06:39]
So you have two choices. You have this yes and yes. And don't ask again this session, I'm going to tell you which one you should use. I'm going to tell you which one you're going to use. Cool, cool, cool, I think it showed you. I just had this really small.

[00:06:54]
If you have the VS coder Cursor extensions, I'll show you in the side panel over here. Cool, cool, cool, so it goes ahead and you don't have necessarily all of those rule files. There's some other different files that we'll see. Like you had with cursor, you basically have this one claw MD file, which is everything that you need to know about the project.

[00:07:18]
And like I said, if you don't have one, you hit Init, and it will make one for you. And it does the things you think it does. It tells it about, like. And you can see it definitely read my file system, right? It discusses the project architecture, how we use the state management.

[00:07:42]
Again, it's like overall a synopsis on what this project does and is and how I need to turn off that markdown linter that I had to catch my own logical errors when I was doing the notes which I'll do in a second but components use typescript inferior. It does a pretty good job of understanding the code base.

[00:08:02]
It did spend a decent amount of time doing that. How we do the testing and your job is to curate this again Cursor had a bunch of rules files. Claude code has this one file. The only I think true downside of using both is now guess what you've signed up for keeping them in sync.

[00:08:22]
Ask me how I know that. That can be problematic. Cool, so on and so forth. You can begin to refine this over time with your preferences more about the architecture. If you do whatever you can reference another file it will go read that file. Here's the PSA that you've heard a thousand times today.

[00:08:41]
Sure, write more in there, more detail, at all the files in the world. It will read this file every time or before at least it starts doing something. As long as it'll make sure it has this file in context. Not every time but if it's already in context it's not going to put it a second time in context.

[00:08:55]
But it will make sure it's in there all the time. But even figured out like the various eslint rules I was talking about earlier that I installed it knows roughly most of the things that are going on pretty well. Your job is to kind of curate this and work with it, right?

[00:09:17]
So like I said, there are both the positives. Definitely do this and don't you ever as you saw with that some of those rules that I showed you earlier. Yeah, it's like a general purpose Cursor rule. I'll show you the one I'm using the project I'm doing in a second.

[00:09:39]
You can reference other files or other folders it should read or anything it needs to know problem solving approaches. I even have make sure you run lint every single time. So the other thing you can do is at any given point in that little command line window if you do pound, you can almost, where'd it go?

[00:10:03]
There you are. If you hit the pound sign you can kind of see the autocomplete here, pound add to memory you can be like, all files should be kebab case you can choose project memory or user memory. Again I want them all readily accessible and because stuff like the work projects are in bun the projects I do here in NPM I tend to keep everything it's markdown, landing, whatever, but it will add that to your cloud MD file.

[00:10:43]
So in a pinch and if you see it doing something you can kind of like, hey, just remember. And it will go ahead and it will add it to that Cloud MD file. Like, in the moment, you can always go in there. It's just a markdown file. You can edit yourself whenever you want.

