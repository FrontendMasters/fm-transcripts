WEBVTT

1
00:00:00.240 --> 00:00:02.560
&gt;&gt; Steve Kinney: All right,
the other main thing,

2
00:00:02.560 --> 00:00:07.921
it will be the common refrain that we talk
about, this idea of a context window.

3
00:00:07.921 --> 00:00:13.331
If you're not familiar with what that is,
it's basically like when you talk to

4
00:00:13.331 --> 00:00:18.577
a ChatGPT or a Gemini or a Claude or what
have you, there is a limited window and

5
00:00:18.577 --> 00:00:22.560
that window grows exponentially
all the time, right?

6
00:00:22.560 --> 00:00:28.010
Like Gemini's is like 2 million tokens and
a token is roughly four characters.

7
00:00:28.010 --> 00:00:29.290
So, a lot.

8
00:00:30.650 --> 00:00:31.930
But that wasn't always the case.

9
00:00:31.930 --> 00:00:33.850
It's not always the case for
every model, right?

10
00:00:33.850 --> 00:00:38.650
And the bigger and better the model is,
the slower and more expensive it is.

11
00:00:40.090 --> 00:00:43.690
But even then, having too much
stuff in context makes it hard.

12
00:00:43.690 --> 00:00:44.490
You lose the thread.

13
00:00:44.490 --> 00:00:48.410
Just imagine being a human and having too
many things in your head at the same time.

14
00:00:48.410 --> 00:00:50.170
It doesn't work out well.

15
00:00:50.170 --> 00:00:53.282
And arguably this is going to
be the biggest theme of our

16
00:00:53.282 --> 00:00:56.735
time together is this idea of
managing the context window and

17
00:00:56.735 --> 00:00:59.860
what you have in the context window and
how much stuff.

18
00:00:59.860 --> 00:01:03.893
And making sure you have the right stuff
in the context window is effectively

19
00:01:03.893 --> 00:01:05.100
the answer right now.

20
00:01:05.100 --> 00:01:09.340
The tricky part is the nuance of
how do you do that effectively?

21
00:01:09.340 --> 00:01:11.820
The answer of how do
you get better results?

22
00:01:11.820 --> 00:01:15.412
And how do you not end up as like,
hey, I just sent off to do a thing and

23
00:01:15.412 --> 00:01:18.460
it did something wild to like,
hey, I said to do a thing.

24
00:01:18.460 --> 00:01:19.980
I roughly got what I was expecting.

25
00:01:20.990 --> 00:01:23.310
Sometimes that's breaking
the problem down to smaller pieces.

26
00:01:23.310 --> 00:01:27.515
Sometimes that's making sure that
it knows about the right things and

27
00:01:27.515 --> 00:01:32.005
it's not reading old deprecated legacy
code to then pattern match your old

28
00:01:32.005 --> 00:01:33.950
deprecated legacy patterns.

29
00:01:33.950 --> 00:01:34.670
Totally.

30
00:01:36.030 --> 00:01:40.712
The other one is my old boss used to have
a sticker on his iPad that he only used to

31
00:01:40.712 --> 00:01:46.670
log into Zoom meetings, which was weeks
of coding can save you hours of planning.

32
00:01:46.670 --> 00:01:47.870
This was 2017.

33
00:01:47.870 --> 00:01:52.698
But it's true,
it turns out clearly writing

34
00:01:52.698 --> 00:01:57.790
down your plan explicitly
about what you want.

35
00:01:57.790 --> 00:02:02.990
If you say do auth, it will do auth.

36
00:02:04.110 --> 00:02:09.194
If you say, hey, use Auth0 as
JavaScript SDK to implement a react hook

37
00:02:09.194 --> 00:02:14.537
that checks for user authentication and
hooks into Google OAuth, you're

38
00:02:14.537 --> 00:02:20.170
going to get something closer to what
you wanted, if that's what you wanted.

39
00:02:22.570 --> 00:02:27.334
Actually, a lot of times having plans,
even stuff like architectural decision

40
00:02:27.334 --> 00:02:31.130
records and stuff like that,
turns out to be wildly effective.

41
00:02:31.130 --> 00:02:32.753
Like we said before,

42
00:02:32.753 --> 00:02:38.170
name of the game is managing the context
window every line of your chat.

43
00:02:39.650 --> 00:02:42.690
These are not stateful machines as
much as they feel like they are.

44
00:02:42.690 --> 00:02:48.690
When you use any of these APIs you're not
just sending the most recent message.

45
00:02:48.690 --> 00:02:52.290
You are sending the entire chat history
as if it had never seen any of it before.

46
00:02:52.290 --> 00:02:56.532
There's no sessions, there's no cookies
per se, other than for the auth,

47
00:02:56.532 --> 00:02:58.370
you're sending it everything.

48
00:02:59.970 --> 00:03:02.930
So some of that is just clearing
out the chat, starting a new chat.

49
00:03:02.930 --> 00:03:04.490
Some of it is compacting it down.

50
00:03:04.490 --> 00:03:06.290
Some of it is to make sure
it has only what it wants.

51
00:03:06.290 --> 00:03:12.340
Some of it is instead of saying,
build me an enterprise SaaS app,

52
00:03:12.340 --> 00:03:18.280
starting with I need a drag and
drop file upload widgetin the UI.

53
00:03:20.520 --> 00:03:26.280
Okay, now when someone drags it and they
hit submit, let's go put it in S3 bucket.

54
00:03:27.800 --> 00:03:33.400
Keeping these tasks again,
a lot of this applies to humans too.

55
00:03:35.080 --> 00:03:37.795
And breaking down those small pieces,

56
00:03:37.795 --> 00:03:43.640
you are going to get better success than
if you say, go off and do this wild thing.

57
00:03:43.640 --> 00:03:45.800
And I will argue there are two phases.

58
00:03:47.080 --> 00:03:49.320
In some cases you call this
plan implement and verify.

59
00:03:49.320 --> 00:03:50.400
So it gets a third phase.

60
00:03:50.400 --> 00:03:54.689
But I think the verify is implicit,
which is there's a difference between

61
00:03:54.689 --> 00:03:58.240
brainstorming and executing and
especially working alone.

62
00:03:58.240 --> 00:04:01.750
A lot of times even having
the brainstorming part of.

63
00:04:01.750 --> 00:04:03.030
Let me think through this.

64
00:04:03.030 --> 00:04:05.102
The idea of rubber ducking where
you talk to rubber duck and

65
00:04:05.102 --> 00:04:06.550
all of a sudden you solve your problems.

66
00:04:06.550 --> 00:04:07.830
This one will talk back to you.

67
00:04:09.430 --> 00:04:14.310
Or even stuff like, hey,
I wrote this code, what am I missing?

68
00:04:14.310 --> 00:04:18.434
Some of these tools that work with the
PRs, like GitHub has Copilot now in a PR,

69
00:04:18.434 --> 00:04:20.470
you can have it review your PR.

70
00:04:20.470 --> 00:04:22.790
Sometimes it's like, yeah,
I did absolutely miss that.

71
00:04:23.830 --> 00:04:26.949
Because as the manager of a team,
if I open a PR for my team,

72
00:04:26.949 --> 00:04:30.030
I always get it looks good to
me because nobody will ever.

73
00:04:30.030 --> 00:04:31.350
They just assume I know what I'm doing.

74
00:04:31.350 --> 00:04:33.070
I'm like, I'm doing this during a meeting.

75
00:04:34.670 --> 00:04:37.401
So I think there's a time for
brainstorming and there's a time for

76
00:04:37.401 --> 00:04:38.430
executing.

77
00:04:38.430 --> 00:04:40.510
Those are not at the same time, right?

78
00:04:40.510 --> 00:04:42.990
It is okay to sit there and
kind of come up with the plan.

79
00:04:44.030 --> 00:04:45.150
We were talking before.

80
00:04:45.150 --> 00:04:49.878
More than one of us have the strategy of
come up with a plan with ChatGPT03 and

81
00:04:49.878 --> 00:04:52.150
then bring it over to Google Gemini.

82
00:04:52.150 --> 00:04:54.891
Be, poke holes in this plan and then bring
that over to Claude with the plan and

83
00:04:54.891 --> 00:04:57.960
the poked holes in the plan and
come up with a third, right?

84
00:04:57.960 --> 00:05:00.280
There's a time and a place for
that too, which I think is valuable.

85
00:05:01.560 --> 00:05:05.000
You should always be the arbiter
of how that ends up.

86
00:05:05.000 --> 00:05:07.770
If you just take the plan and
you don't read it,

87
00:05:07.770 --> 00:05:09.858
I don't know why you did that then.

88
00:05:09.858 --> 00:05:12.796
But there is a place for
the brainstorming.

89
00:05:12.796 --> 00:05:15.942
There's a place to be executing, trying to
figure out what you want to build while

90
00:05:15.942 --> 00:05:17.640
you're building it is
not going to go well.

91
00:05:20.200 --> 00:05:24.039
And then again,
it is on you to keep your house in order,

92
00:05:24.039 --> 00:05:28.390
either starting your day or
end your day auditing everything.

93
00:05:28.390 --> 00:05:34.660
Because a lot of these tools,
Claude code is really guilty of this,

94
00:05:34.660 --> 00:05:39.170
which is it'll start just
making a v2js file and

95
00:05:39.170 --> 00:05:43.910
leaving the old one there and
a simplified TS file.

96
00:05:43.910 --> 00:05:45.790
When you said this is wild,
what are you doing?

97
00:05:47.790 --> 00:05:51.514
It will just leave those around and all
these tools again, they're not magic and

98
00:05:51.514 --> 00:05:52.510
they're not human.

99
00:05:53.820 --> 00:05:58.525
Cursor is using a vector database
to index your code base and

100
00:05:58.525 --> 00:06:03.321
it kind of knows what the legacy code and
the real code is, but

101
00:06:03.321 --> 00:06:08.140
only based on heuristics,
which it could make mistakes on.

102
00:06:09.340 --> 00:06:13.257
So trimming the dead code,
keeping up with things, looking at it,

103
00:06:13.257 --> 00:06:14.860
trimming your own rules.

104
00:06:14.860 --> 00:06:18.140
I had an issue where I thought
it wasn't listening to me.

105
00:06:18.140 --> 00:06:21.428
What I realized is that my
Cloude MD said one thing and

106
00:06:21.428 --> 00:06:26.012
my Cursor rules said a different thing
cuz I updated one of them, right?

107
00:06:26.012 --> 00:06:29.600
A lot of these are issues that
we think these tools are bad or

108
00:06:29.600 --> 00:06:32.470
we think they're magical when they're not.

109
00:06:32.470 --> 00:06:33.590
They're tools.

110
00:06:33.590 --> 00:06:38.267
And if, I mean, we've all had bad days,
but if regular TypeScript or

111
00:06:38.267 --> 00:06:41.836
JavaScript wasn't doing
what it was supposed to do,

112
00:06:41.836 --> 00:06:45.430
we kind of know it's kind of our fault,
right?

113
00:06:45.430 --> 00:06:48.977
With these tools, we assume it's their
fault, which is sometimes true, but

114
00:06:48.977 --> 00:06:51.680
a lot of times it's still only
one of you is going to change.

