WEBVTT

1
00:00:00.240 --> 00:00:03.537
&gt;&gt; Steve Kinney: There isn't
a lot of new ground to cover on,

2
00:00:03.537 --> 00:00:07.280
if you have good tests,
you catch regressions.

3
00:00:07.280 --> 00:00:12.800
There's nothing like AI agent specific,
there is more you were playing fast and

4
00:00:12.800 --> 00:00:17.840
loose the tests before because you
trusted yourself and your team.

5
00:00:17.840 --> 00:00:21.226
And honestly,
there are parts of the code base,

6
00:00:21.226 --> 00:00:26.595
even in the last project I worked on,
that weren't particularly well tested

7
00:00:26.595 --> 00:00:31.490
because I wrote them four years ago
when I was by myself and was sloppy.

8
00:00:31.490 --> 00:00:35.782
But the code never changed and
they work, you know what I mean?, and

9
00:00:35.782 --> 00:00:39.690
you knew that no one was
going to touch those things.

10
00:00:39.690 --> 00:00:44.856
And when you have an AI agent,
you don't know that anymore, and

11
00:00:44.856 --> 00:00:51.090
so, yes, you do need to be good about
your test coverage, so on and so forth.

12
00:00:51.090 --> 00:00:55.751
And honestly, if as long as you're
willing to read the test, have it help

13
00:00:55.751 --> 00:01:00.488
you with that, there's no glamour in
like writing a bunch of unit tests for

14
00:01:00.488 --> 00:01:05.250
code that's already there, do it,
it's important, but it's not fun.

15
00:01:05.250 --> 00:01:08.846
And it's probably both a product
manager and an engineering manager

16
00:01:08.846 --> 00:01:11.884
who are not happy that you want
to spend a month doing that so

17
00:01:11.884 --> 00:01:14.170
you can have AI write code for you.

18
00:01:14.170 --> 00:01:18.834
Got it, I live in the real world too,
I was an engineering manager, no,

19
00:01:18.834 --> 00:01:22.670
I was always down to do those things,
it's not important.

20
00:01:24.030 --> 00:01:26.818
So have good tests,
commit early and often, but

21
00:01:26.818 --> 00:01:30.350
there's not a lot of new
ground to cover there.

22
00:01:30.350 --> 00:01:35.230
I think this part was interesting to me
because I kind of joked about this before.

23
00:01:35.230 --> 00:01:39.612
There are rules that
seem good to install and

24
00:01:39.612 --> 00:01:44.236
then there would be
a revolution on your team.

25
00:01:44.236 --> 00:01:49.326
If you tried to install something,
if nobody could get,

26
00:01:49.326 --> 00:01:56.420
if no one could pass CICD because of
some of these rules, I got it right.

27
00:01:56.420 --> 00:02:01.119
And in so far that there are still humans
contributing to your code base a lot of

28
00:02:01.119 --> 00:02:04.242
the time,
some of these might still be off limits.

29
00:02:04.242 --> 00:02:09.004
But I have the unique perspective right
now as somebody who is just by myself for

30
00:02:09.004 --> 00:02:11.140
the first time in like years.

31
00:02:11.140 --> 00:02:15.282
Like, until like four years ago, I was
starting at temporal when I was by myself,

32
00:02:15.282 --> 00:02:18.540
it's the first time in four years
where I can do whatever I want.

33
00:02:18.540 --> 00:02:22.809
These are ones that have
particularly served me for

34
00:02:22.809 --> 00:02:27.683
the purpose of using a lot of these,
like AI coding tools.

35
00:02:27.683 --> 00:02:32.600
Because they have reduced
the chaos when cursor rules and

36
00:02:32.600 --> 00:02:38.710
we'll see Claude MD in a little bit,
weren't doing the trick.

37
00:02:38.710 --> 00:02:42.803
So some of these, I'm just gonna kind
of show them to you because, like,

38
00:02:42.803 --> 00:02:46.310
I don't know,
reading them is not that much fun.

39
00:02:46.310 --> 00:02:51.837
But I'll explain to you is there is
a term called cyclomatic complexity,

40
00:02:51.837 --> 00:02:54.958
which is basically like how many loops and

41
00:02:54.958 --> 00:02:59.342
nested things are in your code,
each one of those counts.

42
00:02:59.342 --> 00:03:05.352
And again, you probably couldn't turn
this on your code base if you wanted to,

43
00:03:05.352 --> 00:03:11.199
in fact, I actually can't turn it on my
code base either I have it set to warn.

44
00:03:11.199 --> 00:03:15.470
And the number's a lot higher, but
I hammed it up a little bit for the slide.

45
00:03:16.510 --> 00:03:21.217
But you could either greenfield, or you
can actually set it for a little bit and

46
00:03:21.217 --> 00:03:25.390
let the LLM have to deal with it
in a particular file or something.

47
00:03:25.390 --> 00:03:29.019
You can begin to use these, it's less
about having the rule on all the time,

48
00:03:29.019 --> 00:03:31.184
it's about using this
as the feedback loop.

49
00:03:31.184 --> 00:03:35.675
And ideally, if you can get around
all the time, that would be great,

50
00:03:35.675 --> 00:03:40.420
but like how you know how much nested
loops and conditionals can you have.

51
00:03:40.420 --> 00:03:46.230
Like max depth is kind of similar,
how many lines can you have per file?

52
00:03:46.230 --> 00:03:48.328
My numbers are all actually
a little higher than this,

53
00:03:48.328 --> 00:03:50.516
I hammed them down to my
aspirational ones because like,

54
00:03:50.516 --> 00:03:53.990
this is an aspirational talk,
they're all a little higher than this.

55
00:03:53.990 --> 00:03:59.603
But if we know that they only read
the first 250 lines of a file,

56
00:03:59.603 --> 00:04:03.686
you know,
not letting the LLM create files that

57
00:04:03.686 --> 00:04:08.605
are longer than that could
possibly be useful now maybe.

58
00:04:08.605 --> 00:04:13.815
Because context window,
maybe the first 250 lines is

59
00:04:13.815 --> 00:04:19.131
all I should have read and
decided if it needs to read more,

60
00:04:19.131 --> 00:04:23.810
but now you split it to many
files that it will read.

61
00:04:23.810 --> 00:04:26.696
That's actually back to this,
it's like where the art meets the science,

62
00:04:26.696 --> 00:04:29.537
which is like playing around with that,
I'm not saying take these rules,

63
00:04:29.537 --> 00:04:31.090
these are like the rules you should use.

64
00:04:31.090 --> 00:04:35.871
I'm saying like, well,
there's some trade offs here, so

65
00:04:35.871 --> 00:04:39.994
lines for file,
max lines per function, so on, and

66
00:04:39.994 --> 00:04:45.650
some of this is like those last two
are less about what's good for LLMs.

67
00:04:45.650 --> 00:04:49.529
That's more like what's good for
the human reading them later,

68
00:04:49.529 --> 00:04:54.112
cause what I've noticed for that max
params 1, like no more than 3 params is

69
00:04:54.112 --> 00:04:58.360
what it'll do is it'll use one of
those options objects at some point.

70
00:04:58.360 --> 00:05:00.756
Which is good, I'd rather have that and so

71
00:05:00.756 --> 00:05:04.560
like that is like it actually does
a good pattern to get around that.

72
00:05:04.560 --> 00:05:07.521
And so having some of these
like just general size and

73
00:05:07.521 --> 00:05:11.627
stuff rules that are in place because
what happens if you say like, hey,

74
00:05:11.627 --> 00:05:14.680
you need to run lint after each and
every one of these.

75
00:05:14.680 --> 00:05:18.851
Or you have a pre commit hook, you can
start to be like you're not successful and

76
00:05:18.851 --> 00:05:22.770
it will take that and it will like I had
to do some controlling to get it to stop

77
00:05:22.770 --> 00:05:24.780
touching my lint rules, but I did it.

78
00:05:24.780 --> 00:05:28.757
It doesn't do that anymore,
sometimes I want it to and it doesn't,

79
00:05:28.757 --> 00:05:32.380
getting those things in place
I think works really well.

80
00:05:32.380 --> 00:05:34.473
And then this one, because I am neurotic,

81
00:05:34.473 --> 00:05:38.079
there's this one called Unicorn which
has a bunch of really great stuff,

82
00:05:38.079 --> 00:05:41.180
there's also another eslint
library called Perfectionist.

83
00:05:43.100 --> 00:05:48.298
They are for people like me, which is
I want my file names to be the same,

84
00:05:48.298 --> 00:05:54.310
and so now I get an eslint rule and
I don't have to remind it all the time.

85
00:05:54.310 --> 00:05:58.129
And at a certain size to the code base,
even having the cursor rule,

86
00:05:58.129 --> 00:06:02.870
it will eventually get the hint, but
then one out of every 100 times mess up.

87
00:06:02.870 --> 00:06:07.426
And so this will catch it and I don't have
to shove it in the rules all the time, so

88
00:06:07.426 --> 00:06:10.486
there are a lot of these rules,
there are some again,

89
00:06:10.486 --> 00:06:12.950
like import order is
a hard sell on a team.

90
00:06:12.950 --> 00:06:17.760
That cyclematic complexity on an existing
code base is a hard sell, but you could

91
00:06:17.760 --> 00:06:22.357
use tools like Linstage will only it will
allow you when you go to a git commit,

92
00:06:22.357 --> 00:06:25.570
do only the ones that have
changed in this git commit.

93
00:06:25.570 --> 00:06:30.123
So hey, and if you have that with
an environment variable just for the LLM,

94
00:06:30.123 --> 00:06:33.805
it's like if you touch this file,
you need to clean this up,

95
00:06:33.805 --> 00:06:35.850
you can play with it a little bit.

96
00:06:35.850 --> 00:06:40.644
You could just turn it on for a little bit
and then otherwise have the normal rules,

97
00:06:40.644 --> 00:06:41.770
so on and so forth.

98
00:06:41.770 --> 00:06:46.050
You can use it to do the refactors like,
hey, I'm gonna turn this on for a minute.

99
00:06:46.050 --> 00:06:49.110
I'm gonna send you into this one
directory to pay down some tech debt and

100
00:06:49.110 --> 00:06:52.620
then I'm gonna turn it back off so
my team doesn't kill me.

101
00:06:52.620 --> 00:06:58.573
All fine options, but I think like either
I am totally wrong or like no one else

102
00:06:58.573 --> 00:07:04.820
is really thinking about just using the
normal tools to reinforce these things.

103
00:07:04.820 --> 00:07:07.832
Cause I've had wildly great success
with it or everyone else is doing it,

104
00:07:07.832 --> 00:07:09.980
I'm just late to the party,
that's possible too.

105
00:07:11.020 --> 00:07:13.420
But I've had wildly great success with it.

