WEBVTT

1
00:00:00.160 --> 00:00:03.078
&gt;&gt; Steve Kinney: So the rough edges
around these sub agents is again,

2
00:00:03.078 --> 00:00:04.680
I'm kind of mentioning it.

3
00:00:04.680 --> 00:00:08.760
It's kind of like the MCP stuff we saw
earlier, where I'm kind of mentioning it.

4
00:00:08.760 --> 00:00:14.880
But it's somewhat like I hope that
it chooses the right agent, right?

5
00:00:14.880 --> 00:00:18.960
And I have noticed that unless I
mention the agent by name, no chance.

6
00:00:18.960 --> 00:00:22.000
Which considering some of
these other things, I'm okay.

7
00:00:23.920 --> 00:00:27.625
So like I said before, it has its own
context window, it does its own thread,

8
00:00:27.625 --> 00:00:31.159
and then it only does the return value
effectively back to the main agent,

9
00:00:31.159 --> 00:00:32.926
which means that if you reject that,

10
00:00:32.926 --> 00:00:35.730
that's gone,
it's not in that context thread anymore.

11
00:00:35.730 --> 00:00:38.650
Which means those tokens
kiss them goodbye.

12
00:00:38.650 --> 00:00:42.570
Maybe you could find them in those
files that live in your home directory.

13
00:00:42.570 --> 00:00:44.410
I have not checked.

14
00:00:44.410 --> 00:00:50.850
The other thing is we see that constant
flow of information from the main agent.

15
00:00:50.850 --> 00:00:51.570
You can see that.

16
00:00:51.570 --> 00:00:54.392
All I can see is that front end
architect is doing something or

17
00:00:54.392 --> 00:00:56.660
the junior engineer is doing something.

18
00:00:56.660 --> 00:00:58.500
I don't know necessarily
what they're doing.

19
00:01:00.020 --> 00:01:05.788
Like I said, as we saw token and
time bloat say I was setting something up,

20
00:01:05.788 --> 00:01:09.060
token and time bloat splitting stuff up.

21
00:01:09.060 --> 00:01:09.990
And in this case,

22
00:01:09.990 --> 00:01:13.780
we're serializing, not parallelizing,
it is gonna take extra time.

23
00:01:15.620 --> 00:01:18.900
And then obviously too
many chefs in the kitchen.

24
00:01:18.900 --> 00:01:23.590
And those prompts that we saw,
I would probably edit them down over time.

25
00:01:23.590 --> 00:01:28.390
Like again, this is a feature that
came out four or five days ago.

26
00:01:28.390 --> 00:01:33.121
So those will probably be things I
edit and tweak as time goes on, but

27
00:01:33.121 --> 00:01:34.870
time has not gone on yet.

28
00:01:36.390 --> 00:01:40.935
So like I said,
I would probably start small and

29
00:01:40.935 --> 00:01:46.630
keep them short because they
will eat up your token budget.

30
00:01:48.310 --> 00:01:53.633
I have never had it pick one on its own
just yet and honestly, I don't want it to.

31
00:01:53.633 --> 00:01:58.046
So name the ones when you wanna pull
them in, make sure they're clear, and

32
00:01:58.046 --> 00:02:01.360
don't let them do things they
shouldn't be able to do.

33
00:02:02.640 --> 00:02:07.735
Especially with the MCP servers we talked
about before with Cursor and with Claude,

34
00:02:07.735 --> 00:02:12.682
really we have this problem which is like,
hey, if you have all these CP servers,

35
00:02:12.682 --> 00:02:17.128
all of the information is getting sent
as options that the LLM can choose,

36
00:02:17.128 --> 00:02:19.550
even if you don't want to use them.

37
00:02:19.550 --> 00:02:24.217
With now these sub agents,
you can say, hey, test engineer,

38
00:02:24.217 --> 00:02:29.150
you have the ability to spin up
playwright, front end architect,

39
00:02:29.150 --> 00:02:32.870
you're not allowed to
contribute code anymore.

40
00:02:32.870 --> 00:02:33.470
Get out of here.

41
00:02:34.590 --> 00:02:41.310
You have the ability to edit markdown
files and Google Docs and go to meetings.

42
00:02:43.470 --> 00:02:46.608
You can have an agent who is allowed
to touch the ESLint files and, and

43
00:02:46.608 --> 00:02:48.130
the rest of them aren't.

44
00:02:48.130 --> 00:02:49.490
You know what I mean?

45
00:02:49.490 --> 00:02:53.530
I think there's a lot to play with here
in terms of like permissioning and

46
00:02:53.530 --> 00:02:55.410
how you play with that context.

47
00:02:55.410 --> 00:02:59.250
And again, a lot of this is very new and
is an emerging field.

48
00:02:59.250 --> 00:03:00.770
But I think that there's definitely.

49
00:03:00.770 --> 00:03:04.550
It's like I'm like, I could see
already like having used this for

50
00:03:04.550 --> 00:03:07.010
like five days now, I'm like, I'm into it.

51
00:03:08.850 --> 00:03:11.172
So yeah, keep it, you know,
just keep it small and

52
00:03:11.172 --> 00:03:13.550
limited, cuz it's all part
of what we said before.

53
00:03:15.310 --> 00:03:18.833
A few other things we talked about git
work trees but I got a few slides so

54
00:03:18.833 --> 00:03:20.816
we're going to talk about them again.

55
00:03:20.816 --> 00:03:22.344
So the question came up earlier,

56
00:03:22.344 --> 00:03:26.510
we answered it with background agents
of how do you parallelize stuff?

57
00:03:26.510 --> 00:03:29.005
Because if they're all
working on the same branch,

58
00:03:29.005 --> 00:03:30.830
you're going to have a gitastrophe.

59
00:03:32.990 --> 00:03:36.643
Git work trees are a feature
in git that let you

60
00:03:36.643 --> 00:03:41.260
spin off multiple timelines
from the sacred timeline and

61
00:03:41.260 --> 00:03:46.760
like have different things happening
all on your same file system.

62
00:03:48.040 --> 00:03:50.320
I, you know, have played with it.

63
00:03:50.320 --> 00:03:52.520
At one point I was like, this is the way.

64
00:03:52.520 --> 00:03:56.561
First of all, you will just hit your rate
limits 4 times faster, 5 times faster,

65
00:03:56.561 --> 00:03:57.560
10 times faster.

66
00:03:57.560 --> 00:03:58.840
So that's the thing.

67
00:03:58.840 --> 00:04:04.280
Two, if you are reviewing all this code,
are you really moving any faster?

68
00:04:06.640 --> 00:04:10.354
And three, it's now you've got all these
directories you gotta clean up and

69
00:04:10.354 --> 00:04:11.280
like bun install.

70
00:04:11.280 --> 00:04:14.760
So they exist, I think a lot of
people talk about them and like them.

71
00:04:14.760 --> 00:04:18.240
The people who are like posting that
they have nine terminal windows open.

72
00:04:19.520 --> 00:04:23.247
When anthropic tightened the rate limits,
they were definitely

73
00:04:23.247 --> 00:04:28.960
saying because the people who are using
this 24/7 are ruining it for everyone.

74
00:04:28.960 --> 00:04:31.920
Yeah, there's a piece to that.

75
00:04:31.920 --> 00:04:36.070
So you can go spin them up,
basically git worktree add.

76
00:04:36.070 --> 00:04:37.350
I have found that having.

77
00:04:37.350 --> 00:04:40.790
And I'll show you this
in the repo in a second.

78
00:04:40.790 --> 00:04:44.396
I have a subdirectory so
that my node modules will still work and

79
00:04:44.396 --> 00:04:48.310
I get ignore and everything,
ignore ESLintIgnore that folder.

80
00:04:48.310 --> 00:04:52.950
I don't use it anymore because I
personally found that I don't need.

81
00:04:52.950 --> 00:04:57.086
When I was vibing all the time
in the earliest days, I'm like,

82
00:04:57.086 --> 00:05:00.180
now I can vibe four
times at the same time.

83
00:05:00.180 --> 00:05:01.540
That's a lot of vibes.

84
00:05:02.740 --> 00:05:06.523
Then I realized that I had to be
responsible to review plans and

85
00:05:06.523 --> 00:05:08.180
read everything.

86
00:05:08.180 --> 00:05:12.858
And I'm like, I'm still the main thread,
I'm still blocking.

87
00:05:12.858 --> 00:05:16.139
And so you can do these.

88
00:05:16.139 --> 00:05:19.020
This is a pattern that I think a lot of
people like the Anthropic team recommends.

89
00:05:19.020 --> 00:05:23.711
So I think it's worth mentioning there
is this app called Crystal which

90
00:05:23.711 --> 00:05:28.326
will effectively it's like Electron Apple
as is everything that will

91
00:05:28.326 --> 00:05:32.720
let you spin up multiple work trees
in a graphical user interface.

92
00:05:32.720 --> 00:05:36.240
The problem is all your clotting now
lives in this little box in here.

93
00:05:37.760 --> 00:05:39.280
But it'll show you the git diff.

94
00:05:41.040 --> 00:05:42.536
It's an open source project and
as I mean for

95
00:05:42.536 --> 00:05:44.080
an open source project
that is pretty young.

96
00:05:44.080 --> 00:05:47.413
It's good,
it's definitely every version is

97
00:05:47.413 --> 00:05:50.920
a noticeable improvement
over the previous one.

98
00:05:50.920 --> 00:05:53.120
That is both a compliment
to the current version.

99
00:05:56.860 --> 00:05:57.580
I'll leave it there.

100
00:05:59.260 --> 00:06:04.155
And so if one wanted to try it I found
that this was way more sane than

101
00:06:04.155 --> 00:06:05.820
doing it myself.

102
00:06:05.820 --> 00:06:10.554
Other things that you could try is having
some commands and letting Claude make and

103
00:06:10.554 --> 00:06:12.940
destroy the trees itself.

104
00:06:12.940 --> 00:06:14.540
I don't have the stomach for that.

105
00:06:15.660 --> 00:06:21.820
It's worth it if you are interested in it,
so definitely worth checking out as well.

