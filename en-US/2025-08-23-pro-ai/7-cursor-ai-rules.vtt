WEBVTT

1
00:00:00.240 --> 00:00:02.160
&gt;&gt; Steve Kinney: So the first piece
of that is these cursor rules.

2
00:00:03.280 --> 00:00:05.920
Cursor rules are just
persistent instructions.

3
00:00:05.920 --> 00:00:10.400
That way I do not have to type stuff
like I need it to be accessible.

4
00:00:10.400 --> 00:00:11.880
I need it to be responsive design.

5
00:00:11.880 --> 00:00:14.720
Now, that one I got on its own like that.

6
00:00:14.720 --> 00:00:19.040
We use BUN instead of NPM for
installing things.

7
00:00:20.240 --> 00:00:21.480
Don't install js DOM.

8
00:00:21.480 --> 00:00:23.440
I already have Happy DOM installed.

9
00:00:23.440 --> 00:00:26.620
Ask me how I'm coming up with these so
quickly, cuz I've written them, right?

10
00:00:26.620 --> 00:00:29.020
And a lot of times it is
a living document, which is.

11
00:00:29.020 --> 00:00:30.380
It does thing you hate.

12
00:00:31.420 --> 00:00:33.500
You update rules.

13
00:00:33.500 --> 00:00:35.660
Hopefully it does not do thing you hate.

14
00:00:35.660 --> 00:00:39.660
If it does, you either a use stronger
language or get more specific.

15
00:00:39.660 --> 00:00:43.260
Like there's some, you know, some thinking
on your part that has to happen, right?

16
00:00:43.260 --> 00:00:46.220
But the rules are persistent
instructions that you define.

17
00:00:46.220 --> 00:00:49.460
And ideally, and there's some nuance
to how this works, like not even.

18
00:00:49.460 --> 00:00:51.140
Like maybe sometimes it reads it.

19
00:00:51.140 --> 00:00:54.790
Like you can tweak which ones get read,
when and why.

20
00:00:54.790 --> 00:01:01.390
And that's important because those rules
count towards your context window, right?

21
00:01:01.390 --> 00:01:04.288
And so let's say you have
a whole bunch of rules for

22
00:01:04.288 --> 00:01:07.790
how you want a REACT
component to get written.

23
00:01:07.790 --> 00:01:09.390
Those are good rules.

24
00:01:09.390 --> 00:01:10.430
I love that for you.

25
00:01:11.470 --> 00:01:15.624
You probably don't need to take them up in
the context window if you're making an API

26
00:01:15.624 --> 00:01:16.630
endpoint, right?

27
00:01:16.630 --> 00:01:18.030
And so you can kind of be a little.

28
00:01:18.030 --> 00:01:20.840
It's not like you want all your rules
followed all the time or included all

29
00:01:20.840 --> 00:01:23.990
the time, because sometimes you don't
want rules that don't matter included.

30
00:01:23.990 --> 00:01:28.920
I don't need any mention of BUN
mentioned when we're writing css,

31
00:01:28.920 --> 00:01:30.310
so on and so forth.

32
00:01:31.830 --> 00:01:34.710
There's kinda two types of rules.

33
00:01:34.710 --> 00:01:37.430
One I use and
one that maybe I should use, but I don't.

34
00:01:38.870 --> 00:01:40.390
Project level rules.

35
00:01:40.390 --> 00:01:43.350
These are like in your project file,

36
00:01:43.350 --> 00:01:47.910
in the case of cursor,
they're in .cursor/rules.

37
00:01:47.910 --> 00:01:51.840
They are MDC files.

38
00:01:51.840 --> 00:01:53.840
I assume the C is cursor.

39
00:01:53.840 --> 00:01:57.600
They're like markdown files with some YAML
front matter that cursor cares about.

40
00:01:59.440 --> 00:02:01.920
You can commit them into Git and
share them with your team.

41
00:02:03.280 --> 00:02:05.920
Again, you can say what frameworks or.

42
00:02:08.400 --> 00:02:12.156
Rylan and I have one project
that he's working on right now,

43
00:02:12.156 --> 00:02:16.722
which is he actually has a system where
it's like every task or whatever,

44
00:02:16.722 --> 00:02:19.522
any big thing actually
goes into a CSV file and

45
00:02:19.522 --> 00:02:23.970
he has to approve it by flipping
the little boolean from false to true.

46
00:02:23.970 --> 00:02:27.728
And then it has to work down that list and
he curates the list so

47
00:02:27.728 --> 00:02:32.442
it's like if you get something that
looks bigger than a tiny little change,

48
00:02:32.442 --> 00:02:34.530
it goes onto the spreadsheet.

49
00:02:34.530 --> 00:02:38.610
I will triage it and put it in the right
order and then you can go do the thing.

50
00:02:38.610 --> 00:02:42.978
You can get from everything from
your coding style to how we roll and

51
00:02:42.978 --> 00:02:45.170
what we're doing in this case.

52
00:02:45.170 --> 00:02:48.370
So you can have in the project level,
you can also have user level rules.

53
00:02:49.970 --> 00:02:54.212
I don't know that I at this point in my
life consistently feel like outside of

54
00:02:54.212 --> 00:02:58.190
main repo, where I'd have to navigate
somewhere else to tweak them and

55
00:02:58.190 --> 00:02:59.810
change them.

56
00:02:59.810 --> 00:03:02.246
And applying to all of my projects,

57
00:03:02.246 --> 00:03:06.970
obviously project level ones supersede
the user level ones one day.

58
00:03:06.970 --> 00:03:10.070
I aspire to have a set of rules
that I'm so comfortable with.

59
00:03:10.070 --> 00:03:12.630
I want them applied to all of my projects.

60
00:03:12.630 --> 00:03:13.990
I'm not fully there yet.

61
00:03:13.990 --> 00:03:17.223
Also, in the line of work that I do where,
like I said, I use BUN at work,

62
00:03:17.223 --> 00:03:19.030
I'm not gonna make you all install bun.

63
00:03:19.030 --> 00:03:20.550
So I use NPM here.

64
00:03:20.550 --> 00:03:22.310
I can't live like that.

65
00:03:22.310 --> 00:03:25.110
So they're usually project level for me.

66
00:03:25.110 --> 00:03:28.833
But if you're making lots of tiny repos or
stuff like that, but they're also not

67
00:03:28.833 --> 00:03:32.030
checked into version control at
that point, your mileage can vary.

68
00:03:32.030 --> 00:03:34.870
I tend to use project level ones,
so on and so forth.

69
00:03:35.910 --> 00:03:41.260
You have, like I said before,
you don't necessarily want

70
00:03:41.260 --> 00:03:46.610
all of the rules applied all
the time because you are sending

71
00:03:46.610 --> 00:03:51.960
those to an LLM where if you're
paying by the token, cool,

72
00:03:51.960 --> 00:03:56.840
you just paid Claude Opus
at a very expensive price.

73
00:03:56.840 --> 00:03:59.990
All your opinions on how
CSS should be written so

74
00:03:59.990 --> 00:04:02.680
that it could write like a shell script.

75
00:04:04.530 --> 00:04:06.130
You don't necessarily want to do that.

76
00:04:06.130 --> 00:04:11.161
So auto attached takes a bunch
of file globs, so patterns for

77
00:04:11.161 --> 00:04:17.970
files that it should apply to, which
is okay if you are reading a .css file.

78
00:04:17.970 --> 00:04:21.810
I think you should know about our opinions
on how CSS gets written around here.

79
00:04:21.810 --> 00:04:29.260
However, if you go then to read a Rust
file, that rule is not included.

80
00:04:29.260 --> 00:04:30.220
Seems good.

81
00:04:30.220 --> 00:04:32.380
That is probably your
best friend in this case.

82
00:04:32.380 --> 00:04:33.984
But one thing that I will do, and

83
00:04:33.984 --> 00:04:37.729
I'll mention it now just in case I don't
find a reason to bring it up later,

84
00:04:37.729 --> 00:04:40.700
is I will then get really
fancy with my file extensions.

85
00:04:40.700 --> 00:04:47.500
So I'm working on this agent
thing that has tools of its own.

86
00:04:47.500 --> 00:04:49.380
Those tools I want certain rules for.

87
00:04:49.380 --> 00:04:55.510
So all of my tools are called
whatever.tool.ts, right?

88
00:04:55.510 --> 00:05:00.411
And so now whenever I touch one of those
files or you can have it applied to just

89
00:05:00.411 --> 00:05:05.698
a directory if it's going into your design
system component directory you can say

90
00:05:05.698 --> 00:05:11.310
like source slash components slash star,
star, you know, whatever, tsx, right?

91
00:05:11.310 --> 00:05:14.056
So you can only pull in the react
rules on TSX files, but

92
00:05:14.056 --> 00:05:16.341
the typescript rules on every TS or
TSX file.

93
00:05:16.341 --> 00:05:18.036
You can get kind of like nuanced and

94
00:05:18.036 --> 00:05:21.030
flexible with this next two we
don't trust for two reasons.

95
00:05:22.050 --> 00:05:26.739
The two people who are likely to
fail in this case agent requested,

96
00:05:26.739 --> 00:05:32.264
which is you kind of give it a sentence
about when you think this rule applies and

97
00:05:32.264 --> 00:05:38.210
the LLM will decide if it agrees that
the rule applies and then it will read it.

98
00:05:38.210 --> 00:05:40.610
Don't trust that one second person.

99
00:05:40.610 --> 00:05:42.530
I don't trust me.

100
00:05:43.810 --> 00:05:47.850
And the other was manually where I can
do an @ symbol and mention the rule and

101
00:05:47.850 --> 00:05:50.050
if I mention the rule then it is applied.

102
00:05:51.970 --> 00:05:53.010
I'm not gonna do that.

103
00:05:54.210 --> 00:05:55.130
I'm going to forget.

104
00:05:55.130 --> 00:05:56.010
I'm going to forget.

105
00:05:56.010 --> 00:05:59.502
And then we get angry when it doesn't
listen to my rule because when I just

106
00:05:59.502 --> 00:06:02.610
think about all my rules,
I tend to forget which mode I set it to.

107
00:06:04.130 --> 00:06:08.370
So I don't trust anything but
the first two.

108
00:06:08.370 --> 00:06:12.408
But the other two exist for a reason and
maybe you're a better person than I am and

109
00:06:12.408 --> 00:06:15.250
my job is to tell you that they exist,
so on and so forth.

110
00:06:16.840 --> 00:06:21.080
No surprises here because I put all of the
real cheat sheet in the very beginning.

111
00:06:21.080 --> 00:06:22.360
What makes a good rule?

112
00:06:22.360 --> 00:06:22.880
I don't know.

113
00:06:22.880 --> 00:06:23.560
It's specific.

114
00:06:27.400 --> 00:06:32.520
If you want to use the React functional
component type all the time, great.

115
00:06:32.520 --> 00:06:35.480
Just saying use TypeScript not as good.

116
00:06:37.160 --> 00:06:41.720
Add JS comments to all exported
functions is better than document code.

117
00:06:44.650 --> 00:06:46.874
The clearer you are about what you want,

118
00:06:46.874 --> 00:06:49.690
the better things are going to end up for
you.

119
00:06:49.690 --> 00:06:53.634
If you are using React Redux or
RTK Toolkit or

120
00:06:53.634 --> 00:06:57.576
React Query in this case,
or what have you,

121
00:06:57.576 --> 00:07:03.450
that's a good file to put it in and
say auto attach to any TSX file.

122
00:07:04.730 --> 00:07:07.766
If you have certain context
APIs that you want used,

123
00:07:07.766 --> 00:07:10.880
this is a good place to just
outline all those things.

124
00:07:10.880 --> 00:07:15.073
The better you can express your
architecture, the better the LLM is going

125
00:07:15.073 --> 00:07:19.880
to understand your architecture versus
handle Async properly, so on and so forth.

126
00:07:23.000 --> 00:07:28.149
Even better than the versions that I wrote
that last slide because it fit on the two

127
00:07:28.149 --> 00:07:33.240
column slide and then even then I was
uncomfortable so I wrote the second slide.

128
00:07:34.440 --> 00:07:38.808
And even these, you don't want to make
them too long because again you're like,

129
00:07:38.808 --> 00:07:42.490
I'm going to be so
specific about everything that I want.

130
00:07:42.490 --> 00:07:44.290
Cool.
Those are gonna get loaded in the context

131
00:07:44.290 --> 00:07:44.970
window every time.

132
00:07:46.090 --> 00:07:48.810
So you do need to find that balance.

133
00:07:48.810 --> 00:07:52.170
A few good resources for
rules before we play around with some.

134
00:07:54.010 --> 00:07:55.791
As is true in the modern era,

135
00:07:55.791 --> 00:08:00.250
whenever there's a thing ever
there is an awesome list.

136
00:08:00.250 --> 00:08:03.130
This one unsurprisingly
called awesome Cursor Rules.

137
00:08:04.710 --> 00:08:08.950
You will see a .cursorrules mentioned.

138
00:08:10.310 --> 00:08:13.558
In simpler times when we thought we get
away with a single file that had all

139
00:08:13.558 --> 00:08:17.073
the rules and we didn't want to worry
about auto attached versus always versus

140
00:08:17.073 --> 00:08:18.310
manual versus reference.

141
00:08:18.310 --> 00:08:22.950
You had one file that had all your rules,
you will still see that mentioned.

142
00:08:22.950 --> 00:08:24.630
Do not do that.

143
00:08:24.630 --> 00:08:28.098
It's bad for all the reasons that I've
been saying over and over and over again,

144
00:08:28.098 --> 00:08:29.350
don't do it.

145
00:08:29.350 --> 00:08:33.170
But the site exists and
it has a bunch of them.

146
00:08:33.170 --> 00:08:38.850
And again, if you're writing Vue, my react
rules are not going to be great for you.

147
00:08:38.850 --> 00:08:44.410
Unsurprisingly, so on and so
forth definitely proves that.

148
00:08:44.410 --> 00:08:49.407
And there is another site that's even more
extreme called Cursor Directory which also

149
00:08:49.407 --> 00:08:53.033
has a bunch of MCP servers which
we'll talk about a little bit,

150
00:08:53.033 --> 00:08:56.610
as well as rules where you can search and
type and go find some.

