WEBVTT

1
00:00:00.180 --> 00:00:03.682
Now we're gonna get into some of
the main features of state charts.

2
00:00:03.682 --> 00:00:08.207
Some of them we already went over such
as guarded transitions, and actions and

3
00:00:08.207 --> 00:00:11.991
these are things that can be applied
directly to a state machine.

4
00:00:11.991 --> 00:00:15.176
Which we've been working with
up until this point, but

5
00:00:15.176 --> 00:00:17.358
are also very useful in state charts.

6
00:00:17.358 --> 00:00:22.000
So, what are the charts and
how do they differ from state machines?

7
00:00:22.000 --> 00:00:26.803
State charts bring a lot of new
capabilities to state machines but

8
00:00:26.803 --> 00:00:32.070
at the same time, they can be
decomposed into state machines.

9
00:00:32.070 --> 00:00:36.777
State machines have this problem where
when you have too many states and

10
00:00:36.777 --> 00:00:42.032
transitions, a lot of the connections
between different states and events and

11
00:00:42.032 --> 00:00:47.370
things like that become redundant and
also combinatorially explosive.

12
00:00:47.370 --> 00:00:53.350
So let me give you a quick example,
just demonstrating why that is.

13
00:00:53.350 --> 00:00:58.182
So if we go to xceltra,
let's take this event

14
00:00:58.182 --> 00:01:02.260
right here, this buffering events.

15
00:01:03.260 --> 00:01:07.105
And let's say that we're in
either a playing state or

16
00:01:07.105 --> 00:01:10.730
a paused state and buffering can happen.

17
00:01:10.730 --> 00:01:13.570
But right now it says that buffering
can happen in the playing state.

18
00:01:13.570 --> 00:01:17.532
But we know that,
the internet connection can go out and

19
00:01:17.532 --> 00:01:20.580
buffering can really happen in any state.

20
00:01:20.580 --> 00:01:25.594
So, just gonna add another
arrow here make it white and

21
00:01:25.594 --> 00:01:29.850
we also have buffering
happening right here.

22
00:01:29.850 --> 00:01:32.900
We can even rotate this if we want,
there we go.

23
00:01:34.780 --> 00:01:39.259
All right, so this is one of the first
telltale signs that we're not really

24
00:01:39.259 --> 00:01:43.114
doing anything dry here,
we're really repeating ourselves.

25
00:01:43.114 --> 00:01:48.179
And we have this transition over here in
this exact same transition over here,

26
00:01:48.179 --> 00:01:52.704
when really we want to represent that
whether you're in the playing or

27
00:01:52.704 --> 00:01:57.383
pause state, any one of those states
can receive a buffering event, and

28
00:01:57.383 --> 00:02:01.930
that buffering events can cause us
to go back into the loading states.

29
00:02:03.620 --> 00:02:07.028
Again, this isn't the actual machine
that we're going to be using in

30
00:02:07.028 --> 00:02:09.299
our application, but it's just an example.

31
00:02:10.340 --> 00:02:15.402
So one thing that we could do,
is instead represents the loading

32
00:02:15.402 --> 00:02:20.666
state in both the playing and
pause state as two different states.

33
00:02:20.666 --> 00:02:28.150
So, if I draw like a big state over here.

34
00:02:28.150 --> 00:02:31.838
Then we could group these
two states together.

35
00:02:31.838 --> 00:02:34.000
And so
let's just move this out of the way.

36
00:02:38.620 --> 00:02:40.728
And so now, by doing this,

37
00:02:40.728 --> 00:02:45.600
we could actually get rid of at
least one of these transitions.

38
00:02:45.600 --> 00:02:50.246
And say that we want
the buffering transition to go to

39
00:02:50.246 --> 00:02:55.217
the loading state regardless
of which state we're in.

40
00:02:55.217 --> 00:02:57.676
And now we could also say that,

41
00:02:57.676 --> 00:03:02.406
this loaded transition is going
to go to this parent state,

42
00:03:02.406 --> 00:03:07.438
which we're gonna call ready,
make that a little bit bigger.

43
00:03:07.438 --> 00:03:12.381
And so this ready state
contains both the playing and

44
00:03:12.381 --> 00:03:17.770
the paused state and
what we want to do is also specify that

45
00:03:17.770 --> 00:03:24.080
there is an initial state over here,
which is this playing state.

46
00:03:24.080 --> 00:03:30.270
And so now this actually allows us to dry
up a lot of the logic in our application.

47
00:03:30.270 --> 00:03:35.206
So now instead of saying whether
we're in the playing or paused state,

48
00:03:35.206 --> 00:03:39.914
if it's buffering go to the loading
state for each of these states.

49
00:03:39.914 --> 00:03:45.297
Now we could say in this parents ready
states when the buffering event happens,

50
00:03:45.297 --> 00:03:49.009
go to loading regardless of
what state we're in here.

51
00:03:49.009 --> 00:03:52.370
So we could add 100,
1000 trialed states here and

52
00:03:52.370 --> 00:03:55.671
we don't have to specify
1000 extra transitions.

53
00:03:55.671 --> 00:04:01.151
And so, the way that this state chart now
works is when we're in the loading state

54
00:04:01.151 --> 00:04:06.553
and the loaded event happens, we're now
in the ready states but since the ready

55
00:04:06.553 --> 00:04:12.378
state has trialed states it's also going
to immediately enter this playing states.

56
00:04:12.378 --> 00:04:16.750
So everything is still going
to work just as we expect.

57
00:04:16.750 --> 00:04:20.399
We could pause, we could play,
we could have maybe other states,

58
00:04:20.399 --> 00:04:24.210
but now we have some share
transitions between those states.

59
00:04:24.210 --> 00:04:28.470
And also these transitions
are going to be taken if none of

60
00:04:28.470 --> 00:04:32.070
the children specified that transition.

61
00:04:32.070 --> 00:04:36.950
So if for some reason we have a buffering
transition on one of the children,

62
00:04:36.950 --> 00:04:40.677
then that's going to be taken
as priority over this one.

63
00:04:40.677 --> 00:04:45.898
It's where the same way that in
events propagation in the DOM works,

64
00:04:45.898 --> 00:04:48.067
we start at the trialed nod.

65
00:04:48.067 --> 00:04:52.656
And then if that doesn't handle it, we
propagate it up to the parent's node and

66
00:04:52.656 --> 00:04:57.185
if that doesn't handle it, we go to the
next parent node and so on and so forth.

67
00:04:57.185 --> 00:05:01.730
A compound state is a recursive
data structure in XState.

68
00:05:01.730 --> 00:05:06.683
And we could specify that,
I'll just go into the visualizer,

69
00:05:06.683 --> 00:05:11.179
so we could specify that inside
any of the actual states.

70
00:05:11.179 --> 00:05:15.814
So, we could give this an initial of one,
I'm just going to

71
00:05:15.814 --> 00:05:20.658
make some contrived states and
then we have states one, two.

72
00:05:20.658 --> 00:05:26.169
And so now if we take a look at this and
there's no implementation for

73
00:05:26.169 --> 00:05:29.650
that guard, so I'm gonna get rid of that,

74
00:05:29.650 --> 00:05:35.743
we see that we immediately entered
the initial state of the loaded state and

75
00:05:35.743 --> 00:05:39.732
we could pretty much do
this as deep as we want to.

76
00:05:39.732 --> 00:05:42.610
In fact I could just copy this here.

77
00:05:45.330 --> 00:05:52.042
And so, now we have even deeper trialed
states, so just to show you over here so

78
00:05:52.042 --> 00:05:57.127
now we enter the initial state
of loaded which I set to two and

79
00:05:57.127 --> 00:06:00.812
the initial state of
two which I set to one.

80
00:06:00.812 --> 00:06:05.462
And you could go as deep as
you want with this grouping

81
00:06:05.462 --> 00:06:10.650
the states in a way that makes sense for
your application.

82
00:06:10.650 --> 00:06:15.788
The general strategy for
this by the way is just like you

83
00:06:15.788 --> 00:06:21.372
would start with transition actions and
move into entry and

84
00:06:21.372 --> 00:06:26.286
exit actions,
when you see repetition happening,

85
00:06:26.286 --> 00:06:30.790
you would do the same with trialed states.

86
00:06:30.790 --> 00:06:35.091
So if you see that playing in pause
both have transitions in common,

87
00:06:35.091 --> 00:06:39.542
you have to stop and think to yourself,
how are these states related,

88
00:06:39.542 --> 00:06:43.627
if they are and should they be
gripped in a parent state instead.

89
00:06:43.627 --> 00:06:48.587
So using compound states is more of
an organizational technique which comes

90
00:06:48.587 --> 00:06:53.157
with a lot of cool features like we're
gonna talk about in the upcoming

91
00:06:53.157 --> 00:06:56.428
lessons such as history states and
final states.

92
00:06:56.428 --> 00:07:01.025
So it's definitely a really useful
tool that helps you cut down on

93
00:07:01.025 --> 00:07:04.210
the number of transitions
in your state chart

