WEBVTT

1
00:00:00.130 --> 00:00:05.730
Let's go to our final exercise and
this exercise is on actors.

2
00:00:05.730 --> 00:00:09.493
So we have two types of actors
that we talked about, or

3
00:00:09.493 --> 00:00:15.195
rather behaviors which is this callback
behavior over here creates fake audio.

4
00:00:15.195 --> 00:00:19.537
And this is something that you don't
really need to know too much about

5
00:00:19.537 --> 00:00:21.459
the implementation details.

6
00:00:21.459 --> 00:00:26.327
But this createFakeAudio is gonna
create something that feels just like

7
00:00:26.327 --> 00:00:30.590
the audio interface that you
get with the Web Audio API.

8
00:00:30.590 --> 00:00:33.790
So this is just a fake shell for that.

9
00:00:33.790 --> 00:00:39.070
And so our invokeAudio is gonna be that
callback actor that we talked about.

10
00:00:39.070 --> 00:00:42.142
So we have sendBack and receive.

11
00:00:42.142 --> 00:00:47.583
And so this actor can receive a play
event which causes it to play and

12
00:00:47.583 --> 00:00:54.160
it could receive a pause event which
causes it to call its pause method.

13
00:00:54.160 --> 00:00:57.744
And the audio or
at least our fake audio interface

14
00:00:57.744 --> 00:01:02.200
also has an addEventListener
method with timeUpdate.

15
00:01:02.200 --> 00:01:06.043
And so this is useful because it
gives us both the current time and

16
00:01:06.043 --> 00:01:10.314
the duration of the audio which is
both useful information that we could

17
00:01:10.314 --> 00:01:13.179
incorporate directly
into our state machine.

18
00:01:14.220 --> 00:01:16.477
So that's invokeAudio,

19
00:01:16.477 --> 00:01:21.510
we also have loadSong which
loads a new song every second.

20
00:01:21.510 --> 00:01:25.369
So now you'd no longer have to
do that loaded event manually.

21
00:01:25.369 --> 00:01:28.150
We're gonna be invoking a promise instead.

22
00:01:28.150 --> 00:01:29.904
And this promise is pretty simple,

23
00:01:29.904 --> 00:01:32.880
you could easily replace
this with a fetch function.

24
00:01:32.880 --> 00:01:36.789
It's going to give us the data of
the song, the title, artist, and

25
00:01:36.789 --> 00:01:38.653
the duration after one second.

26
00:01:38.653 --> 00:01:41.999
And it's just incrementing
the song counter and

27
00:01:41.999 --> 00:01:45.540
having a random duration for each song.

28
00:01:45.540 --> 00:01:49.610
So we want to do two main
things in this machine.

29
00:01:50.840 --> 00:01:54.610
In this loading state,
we want to invoke that promise.

30
00:01:54.610 --> 00:01:59.513
And in onDone, we want to go back
to that ready.hyst.state that we

31
00:01:59.513 --> 00:02:01.929
defined in the previous lesson.

32
00:02:03.440 --> 00:02:07.693
Now in the ready state, this is where
we want to invoke the audio callback.

33
00:02:07.693 --> 00:02:12.554
Because up until this moment,
we've been defining

34
00:02:12.554 --> 00:02:18.526
the behavior of playing, paused,
and also it going finished.

35
00:02:18.526 --> 00:02:23.970
But of course without side effects which
is this invoking of the audio callback,

36
00:02:23.970 --> 00:02:26.621
our media player really does nothing.

37
00:02:26.621 --> 00:02:31.529
So we want it to actually do something and
that's where invoking that callback,

38
00:02:31.529 --> 00:02:35.004
which is that invokeAudio function,
comes into handy.

39
00:02:38.352 --> 00:02:43.596
[COUGH] So
there is also the two things over here

40
00:02:43.596 --> 00:02:49.255
where we want to send events
to that invoked audio

41
00:02:49.255 --> 00:02:54.241
actor which again is an invoked callback.

42
00:02:54.241 --> 00:02:58.801
So this playAudio actually
needs to be an action

43
00:02:58.801 --> 00:03:03.252
that sends the play
events to that playAudio.

44
00:03:03.252 --> 00:03:08.140
And the pauseAudio action
should be an action that sends

45
00:03:08.140 --> 00:03:10.745
the pause event to the audio.

46
00:03:10.745 --> 00:03:15.248
And remember you could send an event or

47
00:03:15.248 --> 00:03:21.720
create that action object using send and
the events and

48
00:03:21.720 --> 00:03:26.940
to the invoked ID, or
the invoked actor ID.

