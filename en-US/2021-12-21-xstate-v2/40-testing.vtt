WEBVTT

1
00:00:00.080 --> 00:00:02.490
The final lesson is more open ended.

2
00:00:02.490 --> 00:00:04.973
We're gonna be talking
about strategies for

3
00:00:04.973 --> 00:00:07.330
testing the state machines that we built.

4
00:00:07.330 --> 00:00:12.044
We're also gonna be talking about the flip
side of that in using state machines for

5
00:00:12.044 --> 00:00:16.486
what's known as model based testing,
in which we could test any application

6
00:00:16.486 --> 00:00:19.630
whether they're using state machines or
not.

7
00:00:19.630 --> 00:00:23.720
And then the floor is open to other
topics and questions that you may have.

8
00:00:25.350 --> 00:00:29.755
So the machines that we created
are pretty amenable to testing, and

9
00:00:29.755 --> 00:00:34.793
there is a guide in the documentation for
how exactly to test these machines.

10
00:00:34.793 --> 00:00:39.349
So remember that the machines
have a transition function and

11
00:00:39.349 --> 00:00:42.843
this transition function
is a pure function.

12
00:00:42.843 --> 00:00:49.619
So probably the simplest way to test
this is to have an expected value.

13
00:00:49.619 --> 00:00:53.151
So for example,
let's say we have a traffic light and

14
00:00:53.151 --> 00:00:55.201
the expected value is yellow.

15
00:00:55.201 --> 00:00:58.964
So if we transition,
if we have a state of green and

16
00:00:58.964 --> 00:01:04.690
a timer event happens, then we expect
that this state should be yellow.

17
00:01:04.690 --> 00:01:09.860
So we could do actual state.matches
yellow and check if it's truthy.

18
00:01:11.260 --> 00:01:15.205
And so basically the same way that
you would unit test functions,

19
00:01:15.205 --> 00:01:19.738
you can unit test state machines by
unit testing the transition function.

20
00:01:19.738 --> 00:01:24.618
And you don't need to just verify that
the state is correct you could also

21
00:01:24.618 --> 00:01:29.338
verify that the actions that the state
is going to execute is correct,

22
00:01:29.338 --> 00:01:33.991
you can verify that it receives
the right event and other things too.

23
00:01:33.991 --> 00:01:38.860
Now, in testing services is where it
gets a little bit more intersting.

24
00:01:38.860 --> 00:01:43.813
So when you test services these
should really be treated as

25
00:01:43.813 --> 00:01:47.551
async tests, so
you could use a promise, or

26
00:01:47.551 --> 00:01:52.417
what I'd like to do is in Jest or
Mocha you could use done.

27
00:01:52.417 --> 00:01:58.118
And so basically for example,
in this machine, what we're saying

28
00:01:58.118 --> 00:02:04.533
is that we want to test that the machine
eventually reaches a certain state.

29
00:02:04.533 --> 00:02:06.654
And so that's what we're doing in here,

30
00:02:06.654 --> 00:02:11.300
we have this on transition callback that
is called whenever the state transitions.

31
00:02:11.300 --> 00:02:16.697
And so we could check that if the machine
eventually ends up in this success state,

32
00:02:16.697 --> 00:02:18.950
then we're done.

33
00:02:18.950 --> 00:02:21.775
And so then the test succeeds.

34
00:02:21.775 --> 00:02:26.212
What we could also do is we could
have an expect call over here and

35
00:02:26.212 --> 00:02:29.326
make additional assertions on that state.

36
00:02:29.326 --> 00:02:34.668
And then Jest has this feature where
you could say expect.assertions and

37
00:02:34.668 --> 00:02:38.730
see the number of assertions
that you expect to happen.

38
00:02:40.510 --> 00:02:44.723
So again, testing services is
more of an acing thing and

39
00:02:44.723 --> 00:02:50.921
testing the actual machine logic can be
done in your normal unit testing fashion.

40
00:02:50.921 --> 00:02:54.787
Now, because machines
are configurable all of

41
00:02:54.787 --> 00:02:58.949
the implementation details
can really be mocked.

42
00:02:58.949 --> 00:03:03.982
So in the machine basically has
a built in way of doing this.

43
00:03:03.982 --> 00:03:09.204
So just using the same width config
callback that we've been using

44
00:03:09.204 --> 00:03:14.614
in previous exercises,
you can provide alternatives for actions,

45
00:03:14.614 --> 00:03:20.507
services, guards, delays and
other things, especially in the future.

46
00:03:20.507 --> 00:03:23.888
And so that way you can mock responses for

47
00:03:23.888 --> 00:03:28.973
example if we have a fetch from
API service that's invoked.

48
00:03:28.973 --> 00:03:35.020
We could provide a mock response instead
of actually trying to mock that call.

49
00:03:35.020 --> 00:03:39.560
So things become a lot easier when it's
all contained in the same machine.

50
00:03:41.330 --> 00:03:46.514
So those are the general strategies for
testing the application logic.

51
00:03:46.514 --> 00:03:51.340
Another strategy is using the state
machine to test applications that

52
00:03:51.340 --> 00:03:53.883
might not use state machines at all.

53
00:03:53.883 --> 00:03:58.763
In this article I wrote we're testing
a feedback flow where we have three steps,

54
00:03:58.763 --> 00:04:00.360
how was your experience?

55
00:04:00.360 --> 00:04:01.960
You could answer good or bad.

56
00:04:01.960 --> 00:04:05.094
If you click bad, it asks you why?

57
00:04:05.094 --> 00:04:06.564
And then you could submit it.

58
00:04:06.564 --> 00:04:10.205
If you answer good,
it says thanks for your feedback and

59
00:04:10.205 --> 00:04:15.650
then we could close it from this button,
or this button, or that button.

60
00:04:15.650 --> 00:04:20.373
So this app may or may not be implemented
with XState or state machines,

61
00:04:20.373 --> 00:04:24.850
we might just be implementing it
with the old ways that we know.

62
00:04:24.850 --> 00:04:28.780
But we could still use state
machines to test the application.

63
00:04:28.780 --> 00:04:32.314
So in here there's a bunch of tests and

64
00:04:32.314 --> 00:04:37.380
especially end to end tests
that result from this.

65
00:04:37.380 --> 00:04:41.543
We have as a user if I'm on the how was
your experience screen, and I click good,

66
00:04:41.543 --> 00:04:45.090
I should be on the things for
your feedback screen.

67
00:04:45.090 --> 00:04:48.991
Similarly, as a user if I'm on
the form screen and I press submit,

68
00:04:48.991 --> 00:04:52.282
then I should be on the things for
your feedback screen.

69
00:04:52.282 --> 00:04:55.666
Or if I'm on the form screen and
I press escape, or

70
00:04:55.666 --> 00:05:00.112
press this little x over here then
I should be in the closed state.

71
00:05:00.112 --> 00:05:05.763
And so, instead of specifying all of these
end to end tests one by one which is

72
00:05:05.763 --> 00:05:11.701
really hard to do exhaustively and takes
an enormous amount of time and effort.

73
00:05:11.701 --> 00:05:16.518
It's better to represent it as
a model instead or a test model.

74
00:05:16.518 --> 00:05:22.066
So this test model is a state machine,
and the state machine represents

75
00:05:22.066 --> 00:05:27.166
all of your given when then
statements in a single state machine.

76
00:05:27.166 --> 00:05:30.902
So now we could see each
of our specifications

77
00:05:30.902 --> 00:05:34.780
are represented completely
in this machine.

78
00:05:34.780 --> 00:05:38.283
For example, if we're on
the question state and we click bad,

79
00:05:38.283 --> 00:05:41.960
now we're on the form state and
so on and so forth.

80
00:05:41.960 --> 00:05:45.982
So this could be represented using XState,
and

81
00:05:45.982 --> 00:05:49.850
then using a library called X dates test.

82
00:05:49.850 --> 00:05:54.798
We could take that machine,
provide test data, and

83
00:05:54.798 --> 00:05:59.753
asserts that we are in each state for
that test data.

84
00:05:59.753 --> 00:06:03.429
So it also provides
a way to execute events.

85
00:06:03.429 --> 00:06:07.166
And so what this is going to do,
and I'll just scroll down here,

86
00:06:07.166 --> 00:06:11.808
it's going to generate all the possible
paths through the machine depending on

87
00:06:11.808 --> 00:06:14.184
the configuration parameters you set.

88
00:06:14.184 --> 00:06:17.422
Like how exhaustive you
want these tests to be, and

89
00:06:17.422 --> 00:06:22.715
it's going to try to traverse the entire
state machine and test all of these paths.

90
00:06:22.715 --> 00:06:27.377
And make sure that your app which again
might or might not use XState matches

91
00:06:27.377 --> 00:06:32.310
the specification that you modeled
in that test state machine.

92
00:06:32.310 --> 00:06:37.356
And so, while the learning curve here is
pretty much the same as learning state

93
00:06:37.356 --> 00:06:42.413
machines and hopefully in this workshop
you surmounted that learning curve.

94
00:06:42.413 --> 00:06:46.875
It really shows how state machines can be
useful in other areas rather than just

95
00:06:46.875 --> 00:06:48.844
application, implementation.

96
00:06:48.844 --> 00:06:53.381
So for example, this is a video
showing puppeteer running and

97
00:06:53.381 --> 00:06:57.567
going through all of those test cases,
and manually, or

98
00:06:57.567 --> 00:07:00.971
automatically entering
that information for

99
00:07:00.971 --> 00:07:05.810
you, and making sure that
every state is what we expect.

100
00:07:05.810 --> 00:07:10.790
So I encourage you to research model based
testing and see how you can use state

101
00:07:10.790 --> 00:07:14.860
machine and XState tests to test
your existing applications.

