WEBVTT

1
00:00:00.180 --> 00:00:03.144
The next thing I wanna
talk about is guards, or

2
00:00:03.144 --> 00:00:05.580
specifically guarded transitions.

3
00:00:05.580 --> 00:00:08.686
What are guarded transitions?

4
00:00:08.686 --> 00:00:11.367
Typically when we have a transition,

5
00:00:11.367 --> 00:00:16.310
the transition tells us which states
to potentially go to next based on

6
00:00:16.310 --> 00:00:20.109
the events, but
sometimes that isn't sufficient.

7
00:00:20.109 --> 00:00:25.917
We want to take that transition only if
the event of course is the one received,

8
00:00:25.917 --> 00:00:30.090
and if we have some sort
of condition that is true.

9
00:00:30.090 --> 00:00:33.813
So this is what is meant
by guarded transitions.

10
00:00:33.813 --> 00:00:38.781
And just to give you an example
over here we're gonna go back into

11
00:00:38.781 --> 00:00:42.001
our main state machine that we have here.

12
00:00:42.001 --> 00:00:47.716
All right, so let's say that we
have a SKIP event over here,

13
00:00:47.716 --> 00:00:51.315
just in our contrived state machine.

14
00:00:51.315 --> 00:00:57.462
And I want this to go to the loaded state,
which is over here, so target loaded.

15
00:00:57.462 --> 00:01:01.920
But I only want it to go to the loaded
state if some condition is met.

16
00:01:01.920 --> 00:01:08.620
So I'm gonna say cond for condition, and
we're just gonna be doing this inline.

17
00:01:08.620 --> 00:01:12.085
We want this transition
to only be taken if

18
00:01:12.085 --> 00:01:17.140
the context.count is greater than 100,
for instance.

19
00:01:18.270 --> 00:01:23.300
All right, so if I go to the machine,
and we see that we have

20
00:01:23.300 --> 00:01:29.173
the context over here, so
I'm going to also log the state.value.

21
00:01:29.173 --> 00:01:34.389
So you see we're in the loading state and
the count is 42.

22
00:01:34.389 --> 00:01:39.398
So if I send a SKIP event,
then you're going to

23
00:01:39.398 --> 00:01:46.220
see that it's still going to
stay in the same loading state.

24
00:01:46.220 --> 00:01:49.350
And that's because the count
is not greater than 100.

25
00:01:49.350 --> 00:01:51.165
So now let's change that.

26
00:01:51.165 --> 00:01:55.146
Let's say that the count either
originally is greater than 100 or

27
00:01:55.146 --> 00:01:59.745
another event caused the assign action
that we learned in the previous module to

28
00:01:59.745 --> 00:02:03.127
change the counts to something above 100,
so 101.

29
00:02:03.127 --> 00:02:06.245
Now when we send the exact same event,

30
00:02:06.245 --> 00:02:11.813
that transition will be taken, and
we will get to the loaded state.

31
00:02:11.813 --> 00:02:17.724
So assigning guards to transitions
can be done inline like this,

32
00:02:17.724 --> 00:02:22.886
or just like actions you could
specify it as a string too.

33
00:02:22.886 --> 00:02:26.408
So we could say greater than 100.

34
00:02:26.408 --> 00:02:33.805
And then we could add a configuration
option here under guards and

35
00:02:33.805 --> 00:02:40.273
say greater than 100 and
provide that in right there.

36
00:02:40.273 --> 00:02:46.807
So now, again, when we try the same event,
it's going to take us to the loaded state.

37
00:02:46.807 --> 00:02:50.518
So those are the two ways of
specifying a condition over here.

38
00:02:50.518 --> 00:02:53.914
Specifying it as a string is better for
visualizing,

39
00:02:53.914 --> 00:02:57.241
cuz you can see the name
directly in the visualizer.

40
00:02:57.241 --> 00:03:00.392
But if you're quickly
prototyping a state machine,

41
00:03:00.392 --> 00:03:03.900
then you could easily just
specify that condition inline.

