WEBVTT

1
00:00:00.100 --> 00:00:03.511
When we were talking about
modeling in the first lesson,

2
00:00:03.511 --> 00:00:06.213
we were describing states or
finite states in

3
00:00:06.213 --> 00:00:10.779
particular as representing the different
behaviors of your application.

4
00:00:10.779 --> 00:00:15.510
So what do we do with the extra
states that we're used to knowing?

5
00:00:15.510 --> 00:00:20.395
So this is sort of the difference between
qualitative and quantitative state.

6
00:00:20.395 --> 00:00:25.026
Where qualitative means it
describes something like a mode or

7
00:00:25.026 --> 00:00:30.902
a status of your app that determines
the behavior, and then quantitative more

8
00:00:30.902 --> 00:00:37.149
describes things that don't really have
anything to do directly with the states.

9
00:00:37.149 --> 00:00:40.778
For example going back to
me as a state machine,

10
00:00:40.778 --> 00:00:45.696
I can be either asleep or awake and
that determines my behavior.

11
00:00:45.696 --> 00:00:50.076
But I could also have different
attributes like my height or

12
00:00:50.076 --> 00:00:55.259
my age which more or less don't
really affect the behavior directly.

13
00:00:55.259 --> 00:00:59.062
They're not specific ways of
categorizing my behavior,

14
00:00:59.062 --> 00:01:01.242
they're just attributes of me.

15
00:01:01.242 --> 00:01:06.260
Or my favorite color,
my eye color, things like that.

16
00:01:06.260 --> 00:01:10.929
So in xstate we represent this so
called extended state or

17
00:01:10.929 --> 00:01:14.542
state that's not finite state in context.

18
00:01:14.542 --> 00:01:19.790
And we could update that context
using an assign action creator.

19
00:01:20.900 --> 00:01:25.322
And then we can read from
the context via state.context.

20
00:01:25.322 --> 00:01:30.935
So let's take a look at how this
looks in an actual application.

21
00:01:30.935 --> 00:01:37.290
I'm going to go back to the machine
that I created in our sandbox over here.

22
00:01:37.290 --> 00:01:42.601
And the way we add a context,
which is our initial data so

23
00:01:42.601 --> 00:01:47.799
to speak for the machine,
is by specifying the initial

24
00:01:47.799 --> 00:01:52.441
context in the context
property of the machine.

25
00:01:52.441 --> 00:01:59.133
So I could say for example count: 42.

26
00:01:59.133 --> 00:02:03.511
And so now in my app when I'm reading and

27
00:02:03.511 --> 00:02:08.960
when we're going to
actually read the context.

28
00:02:10.335 --> 00:02:15.053
When we're reading the state, we could
read the state.context and get that data.

29
00:02:15.053 --> 00:02:17.740
So over here it's logging count: 42,

30
00:02:17.740 --> 00:02:23.035
just because that is exactly what
we specified in the state.context.

31
00:02:23.035 --> 00:02:28.612
Now what if we want to actually
to modify that context.

32
00:02:28.612 --> 00:02:30.859
Well, we use an action to do so.

33
00:02:30.859 --> 00:02:37.120
So I'm gonna create an assign action here
and I'm gonna pull this in from xstate.

34
00:02:39.150 --> 00:02:44.268
And then the easiest way to do this
is to pass an object in here and

35
00:02:44.268 --> 00:02:50.364
the parts of the context that you want
to change go in that object over here.

36
00:02:50.364 --> 00:02:55.808
So we could say counts, and
let's just change this now to a 100.

37
00:02:55.808 --> 00:02:59.712
All right, so the count is still 42.

38
00:02:59.712 --> 00:03:04.674
But now if I send SUCCESS,
which is where that action is defined,

39
00:03:04.674 --> 00:03:07.032
the counts changes to 100.

40
00:03:07.032 --> 00:03:10.773
Now this is changing it to a static value.

41
00:03:10.773 --> 00:03:15.795
You could also change it to a value
depending on what the current context and

42
00:03:15.795 --> 00:03:18.517
the events that was passed in gives you.

43
00:03:18.517 --> 00:03:23.873
So we could increment
the counts by saying,

44
00:03:23.873 --> 00:03:28.521
just gonna say context.count + 1.

45
00:03:28.521 --> 00:03:34.337
And so now we send SUCCESS,
the count is 43.

46
00:03:34.337 --> 00:03:37.967
Especially if we have
events with a payload,

47
00:03:37.967 --> 00:03:41.796
we could base it on that
events payload as well.

48
00:03:41.796 --> 00:03:46.757
So let's say that we have
in events.value and so

49
00:03:46.757 --> 00:03:53.414
we have to add that payload, so
we're just gonna say value 10.

50
00:03:53.414 --> 00:03:57.399
So now that's going to take
the current context, count,

51
00:03:57.399 --> 00:03:59.685
and it's going to add 10 to it.

52
00:04:01.065 --> 00:04:04.254
And so now you could see the count is 52.

53
00:04:04.254 --> 00:04:09.805
Yeah, so keep in mind that even if
you have other properties in here,

54
00:04:09.805 --> 00:04:14.687
such as, name David,
those aren't affected by this assign

55
00:04:14.687 --> 00:04:20.730
action because in this case
we're only modifying the counts.

56
00:04:20.730 --> 00:04:27.076
So if I add a 10 again, I still have
the name of David, and the count is 52.

