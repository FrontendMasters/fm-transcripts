WEBVTT

1
00:00:00.000 --> 00:00:05.746
Let's actually create an actor and
we're gonna be starting

2
00:00:05.746 --> 00:00:10.601
from scratch here not in this file but
in main.js.

3
00:00:10.601 --> 00:00:18.743
So, I'm gonna to be deleting all of this,
all right.

4
00:00:18.743 --> 00:00:21.117
So let's create a very simple actor.

5
00:00:21.117 --> 00:00:24.025
And echoing the the first
exercise that we did,

6
00:00:24.025 --> 00:00:27.526
we're gonna be doing this
without using any libraries.

7
00:00:27.526 --> 00:00:30.115
So we're gonna push XD to
the side a bit just so

8
00:00:30.115 --> 00:00:34.320
that we understand the actor
model a little bit better.

9
00:00:34.320 --> 00:00:42.400
So we're gonna have function createActor
and let's give it a behavior as well.

10
00:00:42.400 --> 00:00:46.629
So this behavior can be represented
by a function just like

11
00:00:46.629 --> 00:00:51.049
the reducer function that we
talked about in the beginning.

12
00:00:51.049 --> 00:00:55.401
So I'm just gonna call this
function countBehavior and

13
00:00:55.401 --> 00:01:01.802
that takes the current states in an event
and let's just make this really simple.

14
00:01:01.802 --> 00:01:07.019
So if event.type = INC, so
if we're incrementing then we return

15
00:01:07.019 --> 00:01:14.118
state where the count is state.count + 1,
all pretty simple stuff, return the state.

16
00:01:14.118 --> 00:01:19.600
So, in createActor what we ultimately
want to do is we want to return

17
00:01:19.600 --> 00:01:25.083
an object where, just like we
described in this diagram over here,

18
00:01:25.083 --> 00:01:30.300
we could send an event to the actor and
that should do something.

19
00:01:30.300 --> 00:01:34.400
Now, this send is a void function,
which means it doesn't return anything.

20
00:01:34.400 --> 00:01:36.408
It just receives the event and

21
00:01:36.408 --> 00:01:40.103
then it could change its own
behavior with the event but

22
00:01:40.103 --> 00:01:44.860
it's not gonna be synchronous or
immediately respond to the sender.

23
00:01:46.340 --> 00:01:49.980
And so let's also have
an initial state over here.

24
00:01:49.980 --> 00:01:55.480
So we're gonna call it
currentState = behavior.

25
00:01:55.480 --> 00:01:59.370
Let's also have an initial state here.

26
00:02:01.060 --> 00:02:04.930
So we're going to just have the current
state be this initial state.

27
00:02:07.110 --> 00:02:12.710
So whenever we're sent an event,
we're going to update the current state.

28
00:02:12.710 --> 00:02:18.668
So currentState =
behavior(currentState and

29
00:02:18.668 --> 00:02:22.860
the event that we received.

30
00:02:22.860 --> 00:02:27.423
Now this of course looks very familiar
to the first exercise we've done.

31
00:02:27.423 --> 00:02:31.604
So, in a way we're coming
full circle over here.

32
00:02:31.604 --> 00:02:36.481
So now let's create this actor so
const actor = createActor,

33
00:02:36.481 --> 00:02:40.622
and we're gonna create it
with our countsBehavior,

34
00:02:40.622 --> 00:02:44.964
which, again, is just a reducer,
so countBehavior.

35
00:02:44.964 --> 00:02:50.076
And we're gonna give it an initial
state of count of just 42,

36
00:02:50.076 --> 00:02:55.777
just to make sure that things
are working and window.actor = actor.

37
00:02:55.777 --> 00:03:00.508
Okay, so now we have our actor and
we see that this actor,

38
00:03:00.508 --> 00:03:03.775
it definitely has its own local state.

39
00:03:03.775 --> 00:03:09.549
And we know this cuz, well,
we don't know this, because it's internal,

40
00:03:09.549 --> 00:03:13.983
it's local, we can't see it,
but we can send it events.

41
00:03:13.983 --> 00:03:18.118
So, just to make sure that
things are happening and

42
00:03:18.118 --> 00:03:25.250
get a little bit of observability in here,
I'm gonna console.log the current state.

43
00:03:26.352 --> 00:03:30.802
And now we could see that if
we send the actor an event, so

44
00:03:30.802 --> 00:03:34.395
type INC, It's going to log 43.

45
00:03:34.395 --> 00:03:38.715
Remember, we started on 42 and
so now it's on 43.

46
00:03:38.715 --> 00:03:44.812
Now we're gonna send it INC again, 44,
45, 46 and it keeps going up and up.

47
00:03:44.812 --> 00:03:49.335
So that's the actor changing
its own internal states.

48
00:03:49.335 --> 00:03:55.331
Now its internal state can include
other actors that it decides to create.

49
00:03:55.331 --> 00:03:57.513
So all right, we have send.

50
00:03:57.513 --> 00:04:01.638
But to make things a little
bit more practical for

51
00:04:01.638 --> 00:04:08.578
real world usage we also want some way to
subscribe to the actor's current state,

52
00:04:08.578 --> 00:04:12.920
if the actor so
chooses to share that state with us.

53
00:04:12.920 --> 00:04:15.721
So, let's create,

54
00:04:15.721 --> 00:04:20.705
I'm just gonna call this listeners,

55
00:04:20.705 --> 00:04:25.240
and this is going to be a set.

56
00:04:25.240 --> 00:04:26.580
And so we're gonna subscribe to these.

57
00:04:26.580 --> 00:04:32.411
So subscrib Listener and
listeners.add that listener and

58
00:04:32.411 --> 00:04:38.366
we're also gonna call the listener
with the current state.

59
00:04:38.366 --> 00:04:42.038
So every time the state changes here,

60
00:04:42.038 --> 00:04:46.398
now we're gonna have
some way of notifying or

61
00:04:46.398 --> 00:04:51.463
emitting the current state
to all of our listeners.

62
00:04:51.463 --> 00:04:55.292
So listeners.forEach listener,

63
00:04:55.292 --> 00:05:01.296
we're gonna call listener
with the new currentState.

64
00:05:01.296 --> 00:05:04.071
Okay, so let's try this.

65
00:05:04.071 --> 00:05:11.316
If we do actor.subscribe now,
and we say whatever the value is,

66
00:05:11.316 --> 00:05:15.676
we're gonna console.Log the value.

67
00:05:15.676 --> 00:05:23.765
And now if we send,
it's going to log the value all the same.

68
00:05:23.765 --> 00:05:28.456
Remember, we got rid of our
console.log in here and

69
00:05:28.456 --> 00:05:32.622
now we're doing it by
using that subscriber.

70
00:05:32.622 --> 00:05:39.163
So you could think of this subscriber
as an implicit way of sending events.

71
00:05:39.163 --> 00:05:44.267
And so what we could sort of
conceptually do with actors too

72
00:05:44.267 --> 00:05:49.476
is have some way of saying,
okay, let's pretend that I'm

73
00:05:49.476 --> 00:05:54.917
already subscribed to you but
I'm not going to be listening.

74
00:05:54.917 --> 00:05:59.065
Or I don't want to receive an event for
every single time you update.

75
00:05:59.065 --> 00:06:01.475
I just sorta want you to cache that away.

76
00:06:01.475 --> 00:06:09.454
And so I can easily access that value that
you emitted to me, just whenever I want.

77
00:06:09.454 --> 00:06:13.051
And so that's what we could do with,

78
00:06:13.051 --> 00:06:17.461
if we have some sorta
getSnapshot function,

79
00:06:17.461 --> 00:06:21.419
we could just return the currentState.

80
00:06:22.780 --> 00:06:27.324
All right, so now if we send
the actor a bunch of stuff and

81
00:06:27.324 --> 00:06:31.606
we say actor.getSnapshot
now we have counts 51.

82
00:06:31.606 --> 00:06:36.178
Because remember,
this is in implicit subscription,

83
00:06:36.178 --> 00:06:41.052
we're not directly reading
the actor's internal state.

84
00:06:41.052 --> 00:06:49.020
We're just getting the last known value or
the last known snapshot of that actor.

85
00:06:49.020 --> 00:06:54.104
And so, this in short, the reason why
I created this from scratch is becasue

86
00:06:54.104 --> 00:06:59.029
I wanted to show you just how things
are working internally with X State and

87
00:06:59.029 --> 00:07:02.220
X State's version of the actor model.

88
00:07:02.220 --> 00:07:07.720
So the core the functionality of an actor
is being able to send it an event.

89
00:07:07.720 --> 00:07:12.088
These other two things don't
directly break the actor model, but

90
00:07:12.088 --> 00:07:16.700
they just make it a lot more practical for
real world usage.

91
00:07:16.700 --> 00:07:18.919
So subscribe and getSnapshot,

92
00:07:18.919 --> 00:07:23.366
you can think of these as abstractions
on top of the actor model.

