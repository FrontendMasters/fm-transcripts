WEBVTT

1
00:00:00.440 --> 00:00:06.890
Okay, so now let's talk about using
the actor model within a machine.

2
00:00:08.450 --> 00:00:13.461
So I'm gonna make a new machine here,
createMachine.

3
00:00:13.461 --> 00:00:18.881
And we're not gonna have any
states in this machine just

4
00:00:18.881 --> 00:00:25.708
because I wanna show you just the basic
features of invoking an actor.

5
00:00:25.708 --> 00:00:34.310
So with invoke, the machine itself when
it's interpreted, it becomes an actor.

6
00:00:34.310 --> 00:00:39.325
And so we know this because we've
been using state machines in this way

7
00:00:39.325 --> 00:00:45.210
where we interpret them, we subscribe
to them, we can send stuff to them.

8
00:00:45.210 --> 00:00:52.240
And this is a pretty useful interface
that covers a lot of use cases.

9
00:00:52.240 --> 00:00:56.165
So the other part of the actor
model is being able to spawn or

10
00:00:56.165 --> 00:01:01.066
create your own actors and so we could
do that in next state using invoke.

11
00:01:01.066 --> 00:01:08.870
So one of the simplest actors
to invoke is a Promise.

12
00:01:08.870 --> 00:01:13.366
And so everything that goes
in this source by the way for

13
00:01:13.366 --> 00:01:17.420
the invoke,
is a way of creating that actor.

14
00:01:17.420 --> 00:01:24.589
So just like many other functions in
XD it takes the context in the event,

15
00:01:24.589 --> 00:01:30.827
and it should return the thing
that can be turned into an actor.

16
00:01:33.255 --> 00:01:38.200
So for instance,
we're going to be returning a Promise.

17
00:01:38.200 --> 00:01:43.032
And so I'm just going to say,
this is gonna be a new

18
00:01:43.032 --> 00:01:47.532
Promise that resolves after some time-out.

19
00:01:47.532 --> 00:01:55.370
So resolve with 42 and we're gonna
have this resolved after a second.

20
00:01:58.442 --> 00:02:01.336
Okay, so now let's interpret this machine,

21
00:02:03.697 --> 00:02:09.710
And, Let's also subscribe to it.

22
00:02:09.710 --> 00:02:15.088
So service.subscribe(state,
console.log(state,

23
00:02:15.088 --> 00:02:18.210
just to see exactly what happens.

24
00:02:20.728 --> 00:02:23.627
All right, so we reload after a second,

25
00:02:23.627 --> 00:02:28.880
you see that something happens over
here and we get an event pack.

26
00:02:28.880 --> 00:02:33.220
We get this done.invoke
dot whatever this is.

27
00:02:33.220 --> 00:02:38.520
So to make this a little bit nicer,
you can also give the invoking ID.

28
00:02:38.520 --> 00:02:43.730
So id, we're just gonna be
calling this fetchNumber.

29
00:02:43.730 --> 00:02:49.680
And so now after one second,
this event has a nicer name.

30
00:02:49.680 --> 00:02:52.520
It's done.invoke.fetchNumber.

31
00:02:52.520 --> 00:02:56.386
And the data that is returned
from that Promise or

32
00:02:56.386 --> 00:03:01.380
a result from it is in this
data property of the events.

33
00:03:01.380 --> 00:03:07.520
And so what we could do is have an onDone
transition inside of this invoke.

34
00:03:07.520 --> 00:03:13.400
So onDone, actions and we are going to,
let's just log the event.

35
00:03:13.400 --> 00:03:20.875
So I'm gonna say console.log('DONE!') and
we're gonna get the events.

36
00:03:23.406 --> 00:03:27.700
All right, cool, so we have done and
here is the events,

37
00:03:27.700 --> 00:03:31.910
we have done.invoke.fetchNumber
with data of 42.

38
00:03:31.910 --> 00:03:36.167
And so
just like the other onDone transition,

39
00:03:36.167 --> 00:03:40.170
this can target a different state.

40
00:03:40.170 --> 00:03:46.882
So if we have initial loading,
states, loading,

41
00:03:46.882 --> 00:03:52.812
we can put this invoke
inside of that state and

42
00:03:52.812 --> 00:03:57.194
onDone, we could go to success,

43
00:03:59.120 --> 00:04:03.220
And we could target success over here,
so target success.

44
00:04:05.200 --> 00:04:10.140
And it's still going to log('DONE,
so I wanna log the state.value now.

45
00:04:11.640 --> 00:04:13.010
And so now let's see what happens.

46
00:04:14.630 --> 00:04:16.330
So we're in the loading state.

47
00:04:16.330 --> 00:04:21.195
And after a second we get that same
done.invoke.fetchNumber events,

48
00:04:21.195 --> 00:04:25.910
but it calls the onDone transition,
and it targets the success date.

49
00:04:25.910 --> 00:04:28.280
So now, we're in success.

50
00:04:30.390 --> 00:04:35.464
One thing that is in SEX mail, which
I find to be a really useful feature.

51
00:04:35.464 --> 00:04:38.892
And I'm gonna bump this up
to five seconds, just so

52
00:04:38.892 --> 00:04:43.838
we could demonstrate is the facts that
when we leave this loading states,

53
00:04:43.838 --> 00:04:46.981
this invocation will
actually be cancelled.

54
00:04:46.981 --> 00:04:52.242
So whatever this Promise resolves with,
it's going to be ignored as we expect

55
00:04:52.242 --> 00:04:58.330
because this invocation is only active
while the state machine is in the states.

56
00:04:58.330 --> 00:05:02.220
So let's now add a transition,
so on CANCEL.

57
00:05:02.220 --> 00:05:06.529
We're gonna go to the cancelled,
so we're just leaving the state,

58
00:05:06.529 --> 00:05:09.440
we're not doing any specific cancellation.

59
00:05:09.440 --> 00:05:14.868
We're not dealing with this invoke,
we just know that it's gonna be

60
00:05:14.868 --> 00:05:20.501
cancelled when we leave that states,
so window.service = service.

61
00:05:20.501 --> 00:05:25.769
I have five seconds to type this, so
let me jump this up to 10 seconds.

62
00:05:25.769 --> 00:05:34.110
All right, so service.send( 'CANCEL,
Wow, I think it's gonna.

63
00:05:34.110 --> 00:05:40.099
Okay there we go, we're canceled,
somehow I made that below 10 seconds but

64
00:05:40.099 --> 00:05:43.560
yeah, we do go to the canceled state and
now.

65
00:05:43.560 --> 00:05:48.473
The Promise is not, so
we don't get that done.invoke dot

66
00:05:48.473 --> 00:05:51.590
that data because it was cancelled.

67
00:05:53.700 --> 00:05:55.889
So just to verify that this is working.

68
00:05:55.889 --> 00:06:00.906
All right, I sense cancel, but it was too
fast for me, so I'm gonna do this again,

69
00:06:00.906 --> 00:06:09.902
and I'm gonna console.log(' resolved,
There we go.

70
00:06:09.902 --> 00:06:14.023
So we have resolved,
which means the Promise did resolve, but

71
00:06:14.023 --> 00:06:17.060
it did not cause any transition.

72
00:06:17.060 --> 00:06:21.047
This onDone transition wasn't taken,
we don't have this done events.

73
00:06:21.047 --> 00:06:26.570
And that's because we're in a state where
this transition doesn't do anything.

74
00:06:26.570 --> 00:06:29.874
So you get cancellation for
free basically.

75
00:06:29.874 --> 00:06:34.698
And this is sort of going back to the idea
that state machines prevent impossible

76
00:06:34.698 --> 00:06:37.005
states and impossible transitions.

77
00:06:37.005 --> 00:06:39.989
Because when we're not
in the loading state,

78
00:06:39.989 --> 00:06:43.910
we should not be handling
this onDone of this invoke.

79
00:06:43.910 --> 00:06:49.104
You could also have on error if you want,
and that would be a good exercise to

80
00:06:49.104 --> 00:06:54.520
you at home, just learning how to
handle errors in invocations as well.

81
00:06:54.520 --> 00:06:56.236
But yeah.

82
00:06:56.236 --> 00:07:00.758
So another thing that you
can invoke is actually,

83
00:07:00.758 --> 00:07:08.415
a lot more flexible than a Promise because
a Promise cannot receive any more events.

84
00:07:08.415 --> 00:07:12.047
It started and then it's gonna
go do something it think, and

85
00:07:12.047 --> 00:07:14.982
then it might eventually
return with the value.

86
00:07:14.982 --> 00:07:20.107
Now, we need something a little
bit more powerful than that and

87
00:07:20.107 --> 00:07:23.692
so that's what invoking callbacks is for.

88
00:07:23.692 --> 00:07:29.223
So invokes callback,
I'm just gonna put it up here.

89
00:07:29.223 --> 00:07:35.250
It has a special function signature
where it takes two arguments.

90
00:07:35.250 --> 00:07:40.031
It takes send back arguments where
we basically can send an event

91
00:07:40.031 --> 00:07:43.490
back to the parents and
it takes an on receive.

92
00:07:43.490 --> 00:07:46.530
I'm just gonna call this
receive arguments as well.

93
00:07:46.530 --> 00:07:50.838
And so both of these are really useful for
doing communication back and

94
00:07:50.838 --> 00:07:53.120
forth between the machine.

95
00:07:53.120 --> 00:07:58.953
So I'm gonna say receive and
that's gonna take an event and

96
00:07:58.953 --> 00:08:04.448
so we could console.log('
Received in that events.

97
00:08:04.448 --> 00:08:09.391
And so
let's actually just try this out for now.

98
00:08:09.391 --> 00:08:16.577
Instead of this, I'm going to be
replacing this with that callback.

99
00:08:18.182 --> 00:08:22.472
And so we have fetchNumber, and
this id is gonna be important for

100
00:08:22.472 --> 00:08:26.240
communicating back to that invoked actor.

101
00:08:26.240 --> 00:08:32.273
So instead of canceling,
I'm gonna have a on notify events,

102
00:08:35.034 --> 00:08:40.291
And that's going to,
gonna grab send from here,

103
00:08:40.291 --> 00:08:43.928
that's going to do a send action.

104
00:08:43.928 --> 00:08:50.267
And we're going to send what did we call
it, no, let's find out over here actually,

105
00:08:50.267 --> 00:08:55.479
yeah, we didn't specify an event,
so we could just send any events.

106
00:08:55.479 --> 00:09:00.800
So ANY_EVENT, and
we're gonna send it to that ID.

107
00:09:00.800 --> 00:09:03.246
So fetchNumber.

108
00:09:05.336 --> 00:09:10.210
All right, so now when we reload and
I'm gonna send the NOTIFY events.

109
00:09:11.820 --> 00:09:15.310
It says received ANY_EVENT
from the machine.

110
00:09:16.530 --> 00:09:19.596
So there's a lot of
useful actions like this.

111
00:09:19.596 --> 00:09:24.144
This is ANY_EVENT, but
if I wants to just straight-up

112
00:09:24.144 --> 00:09:28.498
forward that event,
I could use the forward action,

113
00:09:28.498 --> 00:09:33.350
which I think is in here,
might be, let's find out.

114
00:09:33.350 --> 00:09:39.031
So forward, and then you could yeah,
just specify it that way but

115
00:09:39.031 --> 00:09:44.835
that's something that you could
discover in the documentation.

116
00:09:44.835 --> 00:09:49.372
This is something that we're gonna be
using in the actual exercise itself.

117
00:09:49.372 --> 00:09:53.962
Okay, so with the callback,
you could receive an events and

118
00:09:53.962 --> 00:09:59.633
do something based on that event, and
you could also send something back.

119
00:09:59.633 --> 00:10:04.611
So let's say that whenever
I receive an event,

120
00:10:04.611 --> 00:10:12.210
I'm gonna setTimeout And I'm gonna
send back just type PING, I guess.

121
00:10:12.210 --> 00:10:15.695
And we're gonna do that after a second,

122
00:10:15.695 --> 00:10:20.690
whenever I receive an event,
so let's try that out.

123
00:10:20.690 --> 00:10:23.420
So here's how we're gonna model it.

124
00:10:23.420 --> 00:10:28.630
When we notify, we're gonna send
ANY_EVENT to that, that's number actor.

125
00:10:28.630 --> 00:10:32.783
After a second, that actor is
going to send a PING event, and

126
00:10:32.783 --> 00:10:34.749
we're gonna respond to it.

127
00:10:36.410 --> 00:10:41.276
Or we're going to respond to the events
in the machine by just transitioning to

128
00:10:41.276 --> 00:10:42.650
the success state.

129
00:10:42.650 --> 00:10:45.052
So it seems a little bit complicated, but

130
00:10:45.052 --> 00:10:49.110
we're gonna make it a little
bit more clear in a minute.

131
00:10:49.110 --> 00:10:51.200
All right, so let's try this out.

132
00:10:52.680 --> 00:10:57.095
We're in the loading state,
we send notify, and then after a second,

133
00:10:57.095 --> 00:10:59.650
we end up in the success states.

134
00:10:59.650 --> 00:11:02.520
Okay, so
what exactly is happening over here?

135
00:11:03.820 --> 00:11:07.711
I know we just talked about it, but
just like using state machines and

136
00:11:07.711 --> 00:11:11.000
state charts,
it is nice to see them diagram form.

137
00:11:11.000 --> 00:11:16.530
And so that's why I like swimlanes.io
as a tool for doing this.

138
00:11:16.530 --> 00:11:19.700
So okay, we have this machine over here.

139
00:11:21.260 --> 00:11:26.120
And this is fetch number, so

140
00:11:26.120 --> 00:11:33.620
it's sending ANY_EVENT to fetchNumber.

141
00:11:33.620 --> 00:11:37.473
So after one second,

142
00:11:39.492 --> 00:11:43.759
fetchNumber is sending

143
00:11:43.759 --> 00:11:48.670
the machine a PING events.

144
00:11:49.730 --> 00:11:53.789
So this sort of describes the
communication between these two different

145
00:11:53.789 --> 00:11:54.329
actors.

146
00:11:56.300 --> 00:12:01.104
When the machine, sorry, when the I'm
just gonna call this the client.

147
00:12:01.104 --> 00:12:04.132
When the client sends the machine NOTIFY,

148
00:12:04.132 --> 00:12:09.012
that's gonna cause the machine to
send ANY_EVENT to fetchNumber,

149
00:12:09.012 --> 00:12:12.895
fetchNumber is going to send
PING back to the machine.

150
00:12:12.895 --> 00:12:17.230
And some of the machine is going to
transition to the success state.

151
00:12:17.230 --> 00:12:21.232
So this is called a sequence diagram,
and it's really useful for

152
00:12:21.232 --> 00:12:24.730
diagramming the communication
between actors.

153
00:12:24.730 --> 00:12:29.616
And so I recommend you use swimlanes.io or
other tools for

154
00:12:29.616 --> 00:12:33.116
sequence diagrams in your application.

155
00:12:33.116 --> 00:12:38.013
Just to describe the different use cases
of how different actors can communicate

156
00:12:38.013 --> 00:12:39.440
with each other.

157
00:12:39.440 --> 00:12:40.787
They're really useful tools.

158
00:12:42.999 --> 00:12:48.399
All right, so the last thing that I
want to show you that you can invoke,

159
00:12:48.399 --> 00:12:53.560
and we're gonna be using a machine
instead of a callback here.

160
00:12:53.560 --> 00:12:57.678
I'm just gonna call this
const fetchMachine, and

161
00:12:57.678 --> 00:13:01.520
I'm gonna be creating
a new machine over here.

162
00:13:01.520 --> 00:13:07.884
So when I enter this machine, let's say
that the initial state is fetching.

163
00:13:10.379 --> 00:13:14.920
And just to make things simple,
after one second,

164
00:13:14.920 --> 00:13:18.414
we're gonna go to the success states.

165
00:13:18.414 --> 00:13:22.919
And this success state is
gonna have type of final.

166
00:13:22.919 --> 00:13:28.550
All right, so in this machine, now we
have a final state as a top level state.

167
00:13:28.550 --> 00:13:32.040
And so
this signifies that the machine is done.

168
00:13:32.040 --> 00:13:36.123
Now, just like you remember
from invoking a Promise,

169
00:13:36.123 --> 00:13:40.577
we could think of this invoking
of a machine in the same way.

170
00:13:40.577 --> 00:13:44.810
Where this machine is like
a combination of invoking

171
00:13:44.810 --> 00:13:49.338
a promise in a callback because
the machine can be done.

172
00:13:49.338 --> 00:13:53.292
The machine can also send events
to the parents machine and

173
00:13:53.292 --> 00:13:57.500
the machine can also receive
events from the machine as well.

174
00:13:57.500 --> 00:14:00.290
So it is really powerful.

175
00:14:00.290 --> 00:14:05.053
And we could also, and this is something
that we haven't exactly talked about

176
00:14:05.053 --> 00:14:08.790
with final states, but
we could also send its data.

177
00:14:08.790 --> 00:14:11.356
So we could send it counts 42,

178
00:14:11.356 --> 00:14:16.214
which is the example data that
I'd love to send all the time.

179
00:14:16.214 --> 00:14:21.317
And now instead of this
context events callback,

180
00:14:21.317 --> 00:14:26.305
we could just provide
the fetch machine itself.

181
00:14:26.305 --> 00:14:30.001
All right, so now let's see what happens.

182
00:14:30.001 --> 00:14:35.487
We're no longer, we don't have the NOTIFY
or PING, it's going to invoke the machine,

183
00:14:35.487 --> 00:14:40.110
and after one second, this machine
is going to be in its final state.

184
00:14:40.110 --> 00:14:44.193
And so it's going to send this
parent machine, a done event,

185
00:14:44.193 --> 00:14:48.759
and we're going to see, hopefully,
this done data logged in here.

186
00:14:50.140 --> 00:14:55.328
So when we go back here, we see it
says done, if we look at the data,

187
00:14:55.328 --> 00:15:00.540
we have counts as 42 and
we transition to the success date.

188
00:15:00.540 --> 00:15:05.575
So that's showing you how machines
can also invoke other machines too.

189
00:15:05.575 --> 00:15:10.876
And so like I said, we could also
send events to that machine and

190
00:15:10.876 --> 00:15:14.890
everything's going to
work just as expected.

191
00:15:15.920 --> 00:15:19.953
One final thing before we get
off this topic, with a callback,

192
00:15:19.953 --> 00:15:25.218
it is important that in this callback,
you might be doing some imperative stuff.

193
00:15:25.218 --> 00:15:29.681
Or some leaky stuff such as having
a setTimeout or set interval or

194
00:15:29.681 --> 00:15:32.720
maybe you open a web socket connection.

195
00:15:32.720 --> 00:15:35.980
There's literally anything you
could do in this callback.

196
00:15:35.980 --> 00:15:40.300
But there needs to be a way to
dispose of the callback as well.

197
00:15:40.300 --> 00:15:43.460
And so that's why you could
return a disposal function.

198
00:15:43.460 --> 00:15:45.635
So if I just say let timeout and

199
00:15:45.635 --> 00:15:51.230
just being a little bit responsible
over here timeout = setTimeout.

200
00:15:51.230 --> 00:15:54.364
Then I could I think
it's called clearTimeout,

201
00:15:54.364 --> 00:16:00.033
I always get confused whether it's clear
or cancel, clearTimeouts that's timeout.

202
00:16:00.033 --> 00:16:04.227
So this is just being a good
citizen preventing memory leaks,

203
00:16:04.227 --> 00:16:08.351
just showing you that you can
return that cleanup function.

204
00:16:11.827 --> 00:16:16.800
All right, so
the other thing that is something that

205
00:16:16.800 --> 00:16:21.870
I do recommend you research
is spawning an actor.

206
00:16:21.870 --> 00:16:26.042
And so spawning is basically
the same as invoking, but

207
00:16:26.042 --> 00:16:29.320
the spawn actor does
not live in the state.

208
00:16:29.320 --> 00:16:32.950
In fact, it lives for
the entire lifetime of the machine.

209
00:16:32.950 --> 00:16:36.490
And if you want to stop it,
it must be manually stopped.

210
00:16:36.490 --> 00:16:40.539
And so that's basically the only
difference between spawning an actor and

211
00:16:40.539 --> 00:16:41.880
invoking an actor.

212
00:16:41.880 --> 00:16:46.601
So I recommend if you want to look up
the use cases for spawning in actor,

213
00:16:46.601 --> 00:16:48.850
read the documentation on it.

214
00:16:48.850 --> 00:16:52.430
There are a few examples on that as well.

215
00:16:52.430 --> 00:16:56.340
But we won't be going over that in
too much detail in this course.

216
00:16:56.340 --> 00:16:59.730
We're just gonna be talking about invoking
actors for the sake of this example.

