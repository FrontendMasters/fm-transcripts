WEBVTT

1
00:00:00.000 --> 00:00:03.920
Let us implement compound
states into our application.

2
00:00:03.920 --> 00:00:09.355
So this pause and playing state now
need to be children of the ready state.

3
00:00:09.355 --> 00:00:13.790
And so we could add the ready
state right over here.

4
00:00:13.790 --> 00:00:18.340
And then we could move the paused and
playing state right into it.

5
00:00:18.340 --> 00:00:23.706
So, if I have a states object in here,
we could just copy and paste,

6
00:00:23.706 --> 00:00:29.939
if I have everything selected, the pause
and playing state right into there.

7
00:00:29.939 --> 00:00:31.841
So now this is the overall structure.

8
00:00:31.841 --> 00:00:37.389
We have a ready state, and the ready state
has two child states, paused and playing.

9
00:00:37.389 --> 00:00:41.846
And so we need to specify
an initial state, too, so

10
00:00:41.846 --> 00:00:46.423
initial, so just have it playing,
and there we go.

11
00:00:46.423 --> 00:00:50.868
That is all it takes to move
things into a parent state.

12
00:00:50.868 --> 00:00:57.629
So now you're going to see that
the application will continue to work,

13
00:00:57.629 --> 00:01:03.050
hopefully if I don't speak too soon,
compound states.

14
00:01:03.050 --> 00:01:07.846
And so it says invalid transition
definition for state node loading.

15
00:01:07.846 --> 00:01:11.170
Child state pause does
not exist on machine.

16
00:01:11.170 --> 00:01:14.197
So let's debug that.

17
00:01:14.197 --> 00:01:18.311
We have loading and
it goes to target paused.

18
00:01:18.311 --> 00:01:22.295
So, I forgot, we have to add
this to the ready state instead,

19
00:01:22.295 --> 00:01:25.220
at least the error
message was clear enough.

20
00:01:25.220 --> 00:01:31.553
And so now we're in the ready state, which
immediately goes to playing, not paused.

21
00:01:31.553 --> 00:01:35.704
And so now we can just click play,

22
00:01:35.704 --> 00:01:39.419
paused over here, and yeah.

23
00:01:39.419 --> 00:01:46.872
So a couple things to keep in mind, too,
is that when we're doing stuff in, for

24
00:01:46.872 --> 00:01:51.991
example, rendering based
on what the state value is,

25
00:01:51.991 --> 00:01:58.914
there is a tendency to sort of tie this
directly to the machine structure.

26
00:01:58.914 --> 00:02:04.436
So, if we want to know whether we're
in the playing or paused state,

27
00:02:04.436 --> 00:02:11.501
we might have something like, const
isPlaying = states.matches('playing').

28
00:02:11.501 --> 00:02:15.468
And so this would have worked
prior to the refactor,

29
00:02:15.468 --> 00:02:18.814
where we moved everything
to a ready state.

30
00:02:18.814 --> 00:02:24.082
But now we have to change this to
state.matches({ ready: 'playing' }),

31
00:02:24.082 --> 00:02:26.410
because this is the new structure.

32
00:02:26.410 --> 00:02:33.344
And so you might be looking at this and
thinking, isn't that a little bit fragile?

33
00:02:33.344 --> 00:02:37.955
And the answer is yes, and that's why
XState has introduced tags as well.

34
00:02:37.955 --> 00:02:42.771
So instead of trying to determine the
exact structure of the machine in order

35
00:02:42.771 --> 00:02:47.152
to match the state against that,
we could introduce tags in states.

36
00:02:47.152 --> 00:02:50.815
So I could just call this playing.

37
00:02:50.815 --> 00:02:56.335
And down here we could instead, say,

38
00:02:56.335 --> 00:03:01.518
state.hastag('playing').

39
00:03:01.518 --> 00:03:05.872
Which will return true or
false if that tag matches one

40
00:03:05.872 --> 00:03:09.758
of the state nodes that
are active in the state.

41
00:03:09.758 --> 00:03:15.044
And so this is going to work whether
we have playing as a parent state,

42
00:03:15.044 --> 00:03:21.060
or, sorry, this is gonna work whether
we have playing as a top-level state or

43
00:03:21.060 --> 00:03:23.724
as a child state of a parent state.

44
00:03:23.724 --> 00:03:26.498
And so it's pretty refactor-proof, and

45
00:03:26.498 --> 00:03:31.438
it's a good way of abstracting your
machine implementation even further.

46
00:03:31.438 --> 00:03:36.982
So, one question in the chat, what
differences do we get from tags over meta?

47
00:03:36.982 --> 00:03:41.484
And so, yeah,
I'll quickly talk about meta, so

48
00:03:41.484 --> 00:03:46.536
each state can actually have
meta information as well.

49
00:03:46.536 --> 00:03:52.893
For example, in playing,
I could have meta,

50
00:03:52.893 --> 00:03:57.792
and summary, the song is playing.

51
00:03:57.792 --> 00:04:01.537
And then when we console.log this state,

52
00:04:05.010 --> 00:04:07.590
Now you're going to see in the meta,

53
00:04:07.590 --> 00:04:12.500
we have a pretty flat structure where
we have the full ID of the song, or

54
00:04:12.500 --> 00:04:17.767
sorry, of the state, and we have
the metadata that we added to that state.

55
00:04:17.767 --> 00:04:21.485
So we have this text that says,
the song is playing,

56
00:04:21.485 --> 00:04:24.788
under the summary property
that we provided.

57
00:04:24.788 --> 00:04:29.980
So you can use this instead of tags,
but meta is really meant not for

58
00:04:29.980 --> 00:04:35.175
identifying which states are active,
which is what tags are for,

59
00:04:35.175 --> 00:04:39.760
but really for
adding any extra metadata to those states.

60
00:04:39.760 --> 00:04:44.944
And this is useful, for example,
if you want to generate documentation or

61
00:04:44.944 --> 00:04:50.064
have some descriptive parameters for
testing, and other things, too.

62
00:04:50.064 --> 00:04:51.944
You can even use meta for

63
00:04:51.944 --> 00:04:57.775
actually rendering parts of your UI
without having to hard code all of it.

64
00:04:57.775 --> 00:04:59.746
You could just put it directly in meta.

65
00:04:59.746 --> 00:05:05.149
There's a lot of use cases for that, but
they are conceptually different things.

66
00:05:05.149 --> 00:05:08.501
Other than using tags,
what are some of the best practices for

67
00:05:08.501 --> 00:05:11.995
maintaining deeply nested compound
states in large machines?

68
00:05:11.995 --> 00:05:17.231
And I would say that the first
thing is that you should

69
00:05:17.231 --> 00:05:22.359
try not to prematurely add
these compound states.

70
00:05:22.359 --> 00:05:26.903
Try to keep your machine as
flat as possible until it makes

71
00:05:26.903 --> 00:05:29.942
sense to have these compound states.

72
00:05:29.942 --> 00:05:35.634
So you could use tags to sort of, at least
form a state-level perspective, flatten

73
00:05:35.634 --> 00:05:40.700
the structure of the machine so that you
only have to read based on the tags.

74
00:05:40.700 --> 00:05:44.851
You could also use meta for
that same thing.

75
00:05:44.851 --> 00:05:51.123
And you could also target using IDs if
you need to cross ancestor boundaries.

76
00:05:51.123 --> 00:05:56.035
So if this state needs to
target this loading state,

77
00:05:56.035 --> 00:06:01.293
then you could do that by using
that ID that you provide.

78
00:06:01.293 --> 00:06:06.274
But in general, if you see that your
machine is getting a little too big,

79
00:06:06.274 --> 00:06:10.030
then you could, and
we'll talk about this later, but

80
00:06:10.030 --> 00:06:13.153
you could split it up
into different actors.

81
00:06:13.153 --> 00:06:20.351
In the same way that you would just split
a mega function up into smaller functions.

82
00:06:20.351 --> 00:06:24.167
And yeah, someone mentioned in the chat,
too, that I guess that's where actors and

83
00:06:24.167 --> 00:06:25.600
nested state machines come in.

84
00:06:25.600 --> 00:06:26.990
Yep, that's absolutely correct.

