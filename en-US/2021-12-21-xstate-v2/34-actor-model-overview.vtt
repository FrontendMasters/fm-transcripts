WEBVTT

1
00:00:00.000 --> 00:00:01.874
Now we're going to get into a big topic.

2
00:00:01.874 --> 00:00:06.411
And this is something that XD is really
built around because it's just such

3
00:00:06.411 --> 00:00:07.573
a useful concept.

4
00:00:07.573 --> 00:00:12.290
And it's also something that is going
to be simpler than you might think.

5
00:00:12.290 --> 00:00:14.825
And that's the actor model.

6
00:00:14.825 --> 00:00:19.118
So the actor model is
a model of computation where

7
00:00:19.118 --> 00:00:22.266
basically everything is an actor.

8
00:00:22.266 --> 00:00:25.434
So what do we mean by an actor?

9
00:00:25.434 --> 00:00:30.273
And again,
I'm going to show you just by drawing.

10
00:00:30.273 --> 00:00:35.059
So let's pretend that
this circle is an actor.

11
00:00:35.059 --> 00:00:40.288
And we'll even label it as Actor.

12
00:00:40.288 --> 00:00:44.322
So an actor can do a few things.

13
00:00:44.322 --> 00:00:49.360
First of all, the actor has a behavior.

14
00:00:49.360 --> 00:00:53.583
And so,
this behavior determines what it does,

15
00:00:53.583 --> 00:00:57.086
depending on which events it receives.

16
00:00:57.086 --> 00:01:01.555
So, we could have this behavior, or
we could have a different behavior.

17
00:01:01.555 --> 00:01:06.417
So, if we're considering this to be
a human actor, just like the example I

18
00:01:06.417 --> 00:01:11.064
gave earlier, we could have an Asleep
behavior and an Awake behavior.

19
00:01:11.064 --> 00:01:14.580
And we could transition
between these two behaviors.

20
00:01:16.967 --> 00:01:19.359
So, event might come in, and

21
00:01:19.359 --> 00:01:24.733
I'm going to label this as just
an arrow that comes into the actor.

22
00:01:24.733 --> 00:01:29.929
And this event can just
be something like ALARM.

23
00:01:29.929 --> 00:01:38.047
And so, this ALARM can cause the actor to
change its behavior from Asleep to Awake.

24
00:01:38.047 --> 00:01:41.538
So actors can actually have
this internal state machine.

25
00:01:41.538 --> 00:01:45.687
Or in other words, their behavior
can be represented by many things.

26
00:01:45.687 --> 00:01:50.111
But one of the best things hopefully
you learn from this workshop is

27
00:01:50.111 --> 00:01:55.090
that it's usually best to describe
behaviors in terms of state machines.

28
00:01:55.090 --> 00:02:00.552
And so this actor can change its behavior
depending on an event coming in.

29
00:02:00.552 --> 00:02:05.737
And like we learned, this changing
of behavior due to an event can

30
00:02:05.737 --> 00:02:11.786
include things like updating its context
or performing some side effects.

31
00:02:11.786 --> 00:02:18.480
So what actors can also do in
response to an event is the actors

32
00:02:18.480 --> 00:02:23.485
themselves can send
events to other actors.

33
00:02:23.485 --> 00:02:27.731
So I'm just gonna label this as AN_EVENT.

34
00:02:27.731 --> 00:02:32.662
And we are gonna create
another actor over here with

35
00:02:32.662 --> 00:02:36.340
the right stroke, so Another Actor.

36
00:02:36.340 --> 00:02:44.991
Now, actors can only send events to
actors that they have reference to.

37
00:02:44.991 --> 00:02:51.070
So this actor has a reference to another
actor, so it could send it an event.

38
00:02:51.070 --> 00:02:55.936
However, let's say that we have
a third actor right over here.

39
00:02:55.936 --> 00:03:02.569
Since this actor has no way of knowing
this, I'm just gonna call this Actor 3,

40
00:03:02.569 --> 00:03:09.311
has no way of knowing that this Actor 3
exists, it's unable to send it an event.

41
00:03:09.311 --> 00:03:14.355
Now what actors could also do is
they can spawn other actors and

42
00:03:14.355 --> 00:03:16.883
basically create new actors.

43
00:03:16.883 --> 00:03:21.617
So I'm gonna represent this by
just having a line over here where

44
00:03:21.617 --> 00:03:24.956
this is an actor spawned
by this other actor.

45
00:03:24.956 --> 00:03:28.852
And of course,
since this actor spawned that actor,

46
00:03:28.852 --> 00:03:32.931
it can send events to it because
it has a reference to it.

47
00:03:32.931 --> 00:03:38.589
Now depending on your implementation of
actors, actors can also send events back

48
00:03:38.589 --> 00:03:44.416
to the parent's actor because it's like
the they're born with that information.

49
00:03:44.416 --> 00:03:49.775
They know who their parent is so
they can send events back and forth.

50
00:03:49.775 --> 00:03:53.392
One of the easiest ways to
conceptualize the actor

51
00:03:53.392 --> 00:03:58.226
model is pretending that each actor
is a human just like you and me.

52
00:03:58.226 --> 00:04:03.397
I'm talking to you and you could talk to
me, as long as you have contact with me.

53
00:04:03.397 --> 00:04:08.161
For example, if you have my phone number
or email address or Twitter username,

54
00:04:08.161 --> 00:04:09.806
you have a reference to me.

55
00:04:09.806 --> 00:04:12.854
So you can send messages to me.

56
00:04:12.854 --> 00:04:17.174
And you can also include,
for example, your email, and

57
00:04:17.174 --> 00:04:22.491
I can reply to you via email because
now I have reference to you as well.

58
00:04:22.491 --> 00:04:28.402
Another concept of actors is actors
each have their own local state.

59
00:04:28.402 --> 00:04:33.700
And this state cannot be
directly read by other actors.

60
00:04:33.700 --> 00:04:37.799
So everything is done via sending events.

61
00:04:37.799 --> 00:04:43.645
And so with actors, if one actor wants
to read the state of another actor,

62
00:04:43.645 --> 00:04:49.509
what typically happens, and
this is best represented in HTTP requests.

63
00:04:49.509 --> 00:04:53.500
Is that this actor would
send a request like,

64
00:04:53.500 --> 00:04:56.976
I want to get this part of data from you.

65
00:04:56.976 --> 00:05:02.644
And after some async operation,
this actor might respond and

66
00:05:02.644 --> 00:05:06.350
say, okay, here's the information.

67
00:05:06.350 --> 00:05:12.722
Now you could also model publishing and
subscribing as implicit events.

68
00:05:12.722 --> 00:05:17.394
So you could say that this actor
can subscribe to some part of

69
00:05:17.394 --> 00:05:18.893
this other actor.

70
00:05:18.893 --> 00:05:23.983
Which in reality is this actor
sending events to its subscribers

71
00:05:23.983 --> 00:05:29.179
on some sort of regular interval or
whenever something changes.

72
00:05:29.179 --> 00:05:34.177
So, in short, the actor model
is representing each entity in

73
00:05:34.177 --> 00:05:39.187
your application as something
that you could send events to.

74
00:05:39.187 --> 00:05:44.617
Something that could send events to
other actors it has reference to,

75
00:05:44.617 --> 00:05:48.491
and something that can
also spawn its own actors.

76
00:05:48.491 --> 00:05:52.583
And an actor also has its
own internal state which can

77
00:05:52.583 --> 00:05:56.120
change depending on what
events it was sent.

