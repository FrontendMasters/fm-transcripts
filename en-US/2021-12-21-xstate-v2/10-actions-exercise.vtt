WEBVTT

1
00:00:00.200 --> 00:00:07.000
Inside this exercise, we have
a pretty fleshed out player machine.

2
00:00:07.000 --> 00:00:11.357
And so, this player machine is doing
what we did in the previous exercise,

3
00:00:11.357 --> 00:00:14.420
but we actually need it
to start doing stuff.

4
00:00:14.420 --> 00:00:18.177
And we don't know exactly what
the implementation details of that stuff

5
00:00:18.177 --> 00:00:19.810
is gonna be.

6
00:00:19.810 --> 00:00:24.178
So we are just going to put some
stub actions in there for now.

7
00:00:24.178 --> 00:00:29.077
So on the loaded state, we want to add
an action that assigns the song data.

8
00:00:29.077 --> 00:00:33.253
And we're gonna cover what that
means in the next lesson, but

9
00:00:33.253 --> 00:00:36.630
you could just add a console.log there.

10
00:00:36.630 --> 00:00:40.430
And then we're going to be adding
two actions in the playing state.

11
00:00:40.430 --> 00:00:43.214
So whenever the playing state is entered,

12
00:00:43.214 --> 00:00:46.600
we need to add an action
to play the audio.

13
00:00:46.600 --> 00:00:53.623
And so when the state is exited, we want
to add the action to pause the audio.

14
00:00:53.623 --> 00:00:56.977
Now, we have a few more actions over here,
and

15
00:00:56.977 --> 00:00:59.989
this is something I wanna talk about too.

16
00:00:59.989 --> 00:01:05.420
That you could specify this on
object on the routes of the machine.

17
00:01:05.420 --> 00:01:10.488
And so what this is going to mean is
that these events should be handled,

18
00:01:10.488 --> 00:01:16.328
no matter what state you're in, unless
they are overwritten by another states.

19
00:01:16.328 --> 00:01:17.651
But yeah, so for now,

20
00:01:17.651 --> 00:01:22.257
just realize that these events can be
handled whether you're in the loading,

21
00:01:22.257 --> 00:01:26.462
playing or paused state, and
we could customize that behavior later.

22
00:01:26.462 --> 00:01:29.916
So in the skip states,
we're going to skip the song, so

23
00:01:29.916 --> 00:01:35.500
again, just make a dummy action that
console logs I'm skipping the song.

24
00:01:35.500 --> 00:01:38.910
We also have the option to like or
unlike a song.

25
00:01:38.910 --> 00:01:42.667
These are also actions that don't
go to a specific state, but

26
00:01:42.667 --> 00:01:45.900
they're just side effects that are done.

27
00:01:45.900 --> 00:01:51.762
And we have a dislike action, now this is
actually interesting because if we go to,

28
00:01:51.762 --> 00:01:57.037
I think it's testing, you'll notice that,
sure, we could like a song,

29
00:01:57.037 --> 00:02:01.180
but when we dislike a song,
it needs to do two things.

30
00:02:01.180 --> 00:02:06.600
It needs to mark the song it's disliked,
and also skip to the next song.

31
00:02:06.600 --> 00:02:11.310
Because, obviously, if a song is disliked,
we want to stop listening to it.

32
00:02:11.310 --> 00:02:17.360
So this is where the actions
array is going to come in handy.

33
00:02:17.360 --> 00:02:20.430
So we also want to add
an action to the volume.

34
00:02:20.430 --> 00:02:23.029
And if you want, and if you have time,

35
00:02:23.029 --> 00:02:26.210
specify the actions in
withConfig over here.

36
00:02:27.210 --> 00:02:31.730
Now there's one more thing that I
want to mention for this exercise.

37
00:02:31.730 --> 00:02:37.430
And that's that you can
also raise an event.

38
00:02:37.430 --> 00:02:42.030
And so this is an example of
a built in action in XState.

39
00:02:42.030 --> 00:02:49.760
So we're gonna import raise
from xstate/lib/actions.

40
00:02:50.850 --> 00:02:54.079
And so, this is actually
a really useful technique,

41
00:02:54.079 --> 00:02:58.621
because when you raise an event,
that event is sent to the machine itself.

42
00:02:58.621 --> 00:03:01.341
It's like you as a person
telling yourself or

43
00:03:01.341 --> 00:03:05.430
reminding yourself to do something,
same thing with the machine.

44
00:03:05.430 --> 00:03:11.090
The machine can tell
itself to do something.

45
00:03:11.090 --> 00:03:17.567
So, for example, I'm just gonna
make a BLAH event over here,

46
00:03:17.567 --> 00:03:23.329
this is just a demo, so
the names don't really matter.

47
00:03:23.329 --> 00:03:28.741
I'm going to raise a success event,
so type SUCCESS.

48
00:03:28.741 --> 00:03:33.856
And so now, When I'm in loading, and

49
00:03:33.856 --> 00:03:42.035
I send, instead of type SUCCESS,
I send type BLAH, it's gonna go to loaded.

50
00:03:42.035 --> 00:03:46.313
And the reason it goes to loaded is
because it's going to execute this

51
00:03:46.313 --> 00:03:49.864
transition and
one of the actions is to raise this event.

52
00:03:49.864 --> 00:03:53.402
So this event is going to be
sent to the machine itself, and

53
00:03:53.402 --> 00:03:56.612
it's going to now execute this transition.

54
00:03:56.612 --> 00:04:00.332
So the raise action
creator is really useful.

