WEBVTT

1
00:00:00.000 --> 00:00:04.857
One question was, can we say that creating
state machines like this is the JavaScript

2
00:00:04.857 --> 00:00:07.970
implementation of the good
old state design pattern?

3
00:00:07.970 --> 00:00:10.530
And so the short answer is yes.

4
00:00:10.530 --> 00:00:15.766
The state pattern, if you remember
your gang of four design patterns,

5
00:00:15.766 --> 00:00:20.230
the state pattern is very similar
to a finite state machine.

6
00:00:20.230 --> 00:00:23.604
So in the state pattern if you don't know,

7
00:00:23.604 --> 00:00:28.680
a state pattern defines an object
that can change its behavior.

8
00:00:28.680 --> 00:00:33.925
And so for example, in this application,
if we were to represent this as a class,

9
00:00:33.925 --> 00:00:38.637
we might have a loading behavior,
which is going to be a separate function

10
00:00:38.637 --> 00:00:42.605
that describes this is what
should happen when I'm loading.

11
00:00:42.605 --> 00:00:46.863
But we're also giving it the ability
to change behaviors as well.

12
00:00:46.863 --> 00:00:50.832
One good way that you could do
this in your app and sort of get

13
00:00:50.832 --> 00:00:55.780
closer to that state design pattern
is by separating this in a function.

14
00:00:55.780 --> 00:01:00.960
So let's say we have this case,
let's go over here.

15
00:01:00.960 --> 00:01:05.961
So we have this, if event type is loaded,
return the playing state.

16
00:01:05.961 --> 00:01:10.329
Otherwise, we just want to
return the normal state.

17
00:01:10.329 --> 00:01:16.350
And so we could have something
like function loading behavior in

18
00:01:16.350 --> 00:01:21.479
which we know that if we're
in this loading behavior,

19
00:01:21.479 --> 00:01:26.062
we're going to have
the state value as loading.

20
00:01:26.062 --> 00:01:31.168
And so
instead of having to switch on the state,

21
00:01:31.168 --> 00:01:35.009
we could just pop this function in.

22
00:01:35.009 --> 00:01:41.720
And so we could just cut this,
put there, otherwise return the state.

23
00:01:41.720 --> 00:01:48.801
And so now over here we could just
return loadingBehavior(state, event).

24
00:01:48.801 --> 00:01:55.060
So like I said, this gets closer
to that state design pattern.

25
00:01:55.060 --> 00:02:00.203
The only difference between this state's
design pattern and using a finite state

26
00:02:00.203 --> 00:02:05.345
machine is that the state design pattern
says the machine, or sorry, the class or

27
00:02:05.345 --> 00:02:09.986
object, or whatever you wanna call it,
can change its behavior at will.

28
00:02:09.986 --> 00:02:15.948
With finite state machines, the only way
a behavior can change is due to an event.

29
00:02:15.948 --> 00:02:20.376
And I promise you that's a lot
more flexible than it sounds.

30
00:02:20.376 --> 00:02:25.089
But it's a good constraint to keep
in mind, that you shouldn't be

31
00:02:25.089 --> 00:02:29.982
arbitrarily changing behavior, but
instead make it due to events.

32
00:02:29.982 --> 00:02:35.025
So yea, if you want to refactor this
as a separate behavior function,

33
00:02:35.025 --> 00:02:38.025
then that's definitely one way to do it.

34
00:02:38.025 --> 00:02:42.752
Does XState allow you to import
state machines written in SCXML

35
00:02:42.752 --> 00:02:47.211
as XState compatible state machines and
export them to, or

36
00:02:47.211 --> 00:02:52.585
as SCXML state machines for
state machine related tools in libraries?

37
00:02:52.585 --> 00:02:55.285
So yeah,
that's jumping ahead a little bit.

38
00:02:55.285 --> 00:02:59.216
But by SCXML,
this is a a specification by the W3C.

39
00:02:59.216 --> 00:03:03.175
And it's a state machine
notation that is represented,

40
00:03:03.175 --> 00:03:05.576
as you probably guessed, in XML.

41
00:03:05.576 --> 00:03:10.629
And so this standard, if you read
it all in, it's a pretty big read,

42
00:03:10.629 --> 00:03:15.436
it is going to feel very close to XState,
and that's on purpose.

43
00:03:15.436 --> 00:03:18.834
XState implements SCXML and
the algorithms.

44
00:03:18.834 --> 00:03:26.220
And one of the long-term goals of XState
is to be compatible with SCXML in general.

45
00:03:26.220 --> 00:03:31.296
Currently, we do import SCXML
internally for a lot of testing, but

46
00:03:31.296 --> 00:03:36.830
there aren't public-facing features
that allow you to do this easily.

47
00:03:36.830 --> 00:03:39.956
But it is definitely possible.

48
00:03:39.956 --> 00:03:42.701
So the takeaway from this question is,

49
00:03:42.701 --> 00:03:47.609
if you really want to understand
what XState is about more in-depth,

50
00:03:47.609 --> 00:03:52.620
I really recommend you read the W3
specification for state chart XML.

51
00:03:52.620 --> 00:03:57.702
You're going to find a lot of
things in common with XState and

52
00:03:57.702 --> 00:04:03.393
this SCXML notation and
see inspiration for a lot of XState's API.

53
00:04:03.393 --> 00:04:08.175
The question was, is there a reason
to name the events in all caps, or

54
00:04:08.175 --> 00:04:10.661
as I like to call it screaming case?

55
00:04:10.661 --> 00:04:13.230
The short answer is no,
you don't need to do it.

56
00:04:13.230 --> 00:04:18.871
I like doing it just because it's a visual
differentiator between states and events.

57
00:04:18.871 --> 00:04:25.065
I know something is an event because
it's something that's screaming at me.

58
00:04:25.065 --> 00:04:27.390
So I could just quickly scan the page and

59
00:04:27.390 --> 00:04:30.995
see, that's an event because
it's all in uppercase.

60
00:04:30.995 --> 00:04:33.960
But there is no reason
that you have to do this.

61
00:04:33.960 --> 00:04:39.448
And even myself, I'm finding
myself writing lowercase events,

62
00:04:39.448 --> 00:04:43.669
like pause,
more frequently in my applications.

63
00:04:43.669 --> 00:04:50.106
I think the uppercase events name was
just something that was started by

64
00:04:50.106 --> 00:04:55.886
libraries and Redux, and it became
sort of an unofficial convention.

65
00:04:55.886 --> 00:04:57.891
If you don't wanna use uppercase,
you don't have to.

66
00:04:57.891 --> 00:05:01.890
It's not a restriction in XStates or
pretty much anything.

67
00:05:01.890 --> 00:05:08.567
There's nothing that's checking that
all of your state names are uppercase.

68
00:05:08.567 --> 00:05:13.831
However, I will say that for
future versions of XState,

69
00:05:13.831 --> 00:05:18.766
what you should do is like,
if you have events that can

70
00:05:18.766 --> 00:05:23.262
really be described within
a group of events, so

71
00:05:23.262 --> 00:05:26.794
let's say that we have audio paused.

72
00:05:26.794 --> 00:05:31.690
I really recommend that you
separate it with a dot.

73
00:05:31.690 --> 00:05:36.216
And that's the one convention that's
actually going to be really useful.

74
00:05:36.216 --> 00:05:40.714
Because in the future, and this is
XState version 5, not XState version 4,

75
00:05:40.714 --> 00:05:43.800
you're going to be able to
specify wildcard events.

76
00:05:43.800 --> 00:05:49.390
And so this basically handles any
event that starts with his audio dot.

77
00:05:49.390 --> 00:05:54.738
And the delimiter is the dot, so
this is also specified in SCXML.

78
00:05:54.738 --> 00:06:00.339
So that convention I would recommend,
the uppercase convention,

79
00:06:00.339 --> 00:06:03.785
you can have your own preference on that.

80
00:06:03.785 --> 00:06:08.227
There was a comments that we
do have a Stately Discord.

81
00:06:08.227 --> 00:06:13.311
And for all questions related
to state machines, state charts,

82
00:06:13.311 --> 00:06:18.952
the actor model, events-driven
architecture, software modeling,

83
00:06:18.952 --> 00:06:25.807
and also the tools that we release, it's
at discord.gg/xstate, open invitation.

84
00:06:25.807 --> 00:06:29.807
I highly recommend that you join this
Discord because we are extremely

85
00:06:29.807 --> 00:06:33.819
responsive in there and wanna help
everyone with all their problems.

86
00:06:33.819 --> 00:06:38.771
And there's also so many good ideas and
sources of inspiration in the Discord.

87
00:06:38.771 --> 00:06:42.371
So if you have any questions or
you just wanna chat,

88
00:06:42.371 --> 00:06:47.666
feel free to join the Stately Discord,
again, at discord.gg/xstate.

89
00:06:47.666 --> 00:06:52.700
The question online was, what about
naming the actual states over here?

90
00:06:52.700 --> 00:06:58.196
How do we determine what these
states should be named?.

91
00:06:58.196 --> 00:07:00.757
And so for the states,
I have two general guidelines.

92
00:07:00.757 --> 00:07:04.920
First, you should name it
based on what is happening.

93
00:07:04.920 --> 00:07:08.382
And you should also name it based
on what the behavior should be.

94
00:07:08.382 --> 00:07:13.093
So as long as you choose any of those,
or ideally a combination of both,

95
00:07:13.093 --> 00:07:14.437
you should be safe.

96
00:07:14.437 --> 00:07:19.011
So for example, in this state
we're asking, what's happening?

97
00:07:19.011 --> 00:07:20.763
Well, the song is loading.

98
00:07:20.763 --> 00:07:23.524
And now we're asking,
what's happening over here?

99
00:07:23.524 --> 00:07:24.449
The song is playing.

100
00:07:24.449 --> 00:07:26.961
And we're asking, what's happening here?

101
00:07:26.961 --> 00:07:28.410
The song is paused.

102
00:07:28.410 --> 00:07:31.770
If we were to model something else,
like, for

103
00:07:31.770 --> 00:07:36.078
example let's say that we're
modeling drag and drop, but

104
00:07:36.078 --> 00:07:41.180
we're locking to the x-axis or
y-axis so you can't move it freely.

105
00:07:41.180 --> 00:07:43.697
You could only move it on one of the axes.

106
00:07:43.697 --> 00:07:49.659
Then we might have something like,

107
00:07:49.659 --> 00:07:53.641
I call it x-axis lock.

108
00:07:53.641 --> 00:07:58.616
And so now, this isn't exactly
describing what's happening,

109
00:07:58.616 --> 00:08:01.609
it's describing a behavior instead.

110
00:08:01.609 --> 00:08:06.859
So this x-axis lock is a state that
says any event that happens here,

111
00:08:06.859 --> 00:08:11.035
we have to lock any positional
changes to the x-axis.

112
00:08:11.035 --> 00:08:15.373
So again, this is a demonstration
of what's happening or

113
00:08:15.373 --> 00:08:17.592
what the behavior should be.

114
00:08:17.592 --> 00:08:21.442
And so that's how you should
describe your states.

115
00:08:21.442 --> 00:08:26.223
Can a state receive multiple
events at the same time?

116
00:08:26.223 --> 00:08:30.990
How does the state transition
to the next state?

117
00:08:30.990 --> 00:08:35.385
And so with state machines and
state charts,

118
00:08:35.385 --> 00:08:40.830
the idea is that you always
receive events one at a time.

119
00:08:40.830 --> 00:08:45.812
So for example, let's say that we spammed
this machine in the loading state with

120
00:08:45.812 --> 00:08:50.888
five instances of loaded, all being sent
at the same time, for whatever reason.

121
00:08:50.888 --> 00:08:54.777
Let's say that one of our services
is just behaving badly and

122
00:08:54.777 --> 00:08:57.378
has some race conditions or something.

123
00:08:57.378 --> 00:09:01.610
And we just get multiple
events at the same time.

124
00:09:01.610 --> 00:09:06.326
So what should happen is those
events should be queued up.

125
00:09:06.326 --> 00:09:11.132
So we have a queue of events and
we pop from the queue each time and

126
00:09:11.132 --> 00:09:15.497
we say, okay,
let's handle these events one at a time.

127
00:09:15.497 --> 00:09:20.092
So in the loading state, we're only going
to handle one event, which is loaded,

128
00:09:20.092 --> 00:09:21.034
we transition.

129
00:09:21.034 --> 00:09:26.111
And once we're on this state,
this all happens immediately, by the way,

130
00:09:26.111 --> 00:09:30.959
once we're on that state, then
the next loaded event will do nothing.

131
00:09:30.959 --> 00:09:34.182
Because we're in the playing state and

132
00:09:34.182 --> 00:09:38.484
the loaded transition does
not exist on that state.

133
00:09:38.484 --> 00:09:43.150
So in summary,
events are handled one at a time, always.

