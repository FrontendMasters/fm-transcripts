WEBVTT

1
00:00:00.223 --> 00:00:04.773
Hello, everyone, my name is David
Khourshid, and I'm really excited to be

2
00:00:04.773 --> 00:00:08.916
doing another workshop on state
machines with XState in JavaScript.

3
00:00:08.916 --> 00:00:13.650
And we're gonna be discussing a lot
more than version one of the workshop.

4
00:00:13.650 --> 00:00:18.244
So if you've taken version one, and
you've taken the React's versions of

5
00:00:18.244 --> 00:00:22.064
the workshop, then we're going
to be building on top of that.

6
00:00:22.064 --> 00:00:24.777
Still working in vanilla JavaScript, but

7
00:00:24.777 --> 00:00:28.023
we're going to be going
over a lot of things today.

8
00:00:28.023 --> 00:00:30.671
We're gonna be going
over software modeling,

9
00:00:30.671 --> 00:00:33.780
when to use state machines and
when to use state charts,

10
00:00:33.780 --> 00:00:37.306
all the fundamental parts of
state machines and state charts.

11
00:00:37.306 --> 00:00:40.356
They're going to be useful in
your everyday applications.

12
00:00:40.356 --> 00:00:43.773
And we're also gonna be talking
a lot about the actor model and

13
00:00:43.773 --> 00:00:48.308
how you could use actors to represent the
different parts of your application that

14
00:00:48.308 --> 00:00:51.130
are communicating with each other.

15
00:00:51.130 --> 00:00:53.708
So like I said,
my name is David Khourshid,

16
00:00:53.708 --> 00:00:56.860
I work at Stately,
which is a company that I founded.

17
00:00:56.860 --> 00:01:01.491
And we're creating a lot of tools for
visualizing application logic,

18
00:01:01.491 --> 00:01:06.910
whether it's with state machines, or
state charts, or other types of diagrams.

19
00:01:07.980 --> 00:01:12.539
So a lot of what we do today is
actually going to be represented in

20
00:01:12.539 --> 00:01:15.730
the tools that we're building at Stately.

21
00:01:15.730 --> 00:01:21.321
I'm also on Twitter @DavidKPiano,
so please feel free to follow me,

22
00:01:21.321 --> 00:01:24.780
reach out to me, DM me, whatever you want.

23
00:01:26.140 --> 00:01:27.752
So before we get started,

24
00:01:27.752 --> 00:01:31.650
I wanna talk about how this
workshop is going to be structured.

25
00:01:31.650 --> 00:01:36.464
So you should have received the link
to the GitHub repo, it's at

26
00:01:36.464 --> 00:01:43.440
https://github.com/davidkpiano/frontend-m-
asters-xstate-v2.

27
00:01:43.440 --> 00:01:46.567
The previous workshop is
Frontend Masters XState Workshop.

28
00:01:46.567 --> 00:01:51.041
So if you do wanna go back and review
that, then a lot of the material will

29
00:01:51.041 --> 00:01:55.950
be similar, but there's also a lot
of new things in this workshop.

30
00:01:55.950 --> 00:02:00.021
Now, this assumes that you have Node
installed because this is a JavaScript

31
00:02:00.021 --> 00:02:00.858
application.

32
00:02:00.858 --> 00:02:06.454
And we're going to be using Vite,
it's a newer tool just for

33
00:02:06.454 --> 00:02:13.920
bundling applications and making them run,
and I found that very useful.

34
00:02:13.920 --> 00:02:18.832
This application is a vanilla JavaScript
app, we're not using any frameworks.

35
00:02:18.832 --> 00:02:23.860
And this is important because
we want to keep things simple.

36
00:02:23.860 --> 00:02:28.570
And also we want you to learn skills that
you could apply to any framework that

37
00:02:28.570 --> 00:02:33.353
you're using with XState,
whether it's React, Vue, Svelte, Angular,

38
00:02:33.353 --> 00:02:36.738
any of those frameworks, or
even no framework at all,

39
00:02:36.738 --> 00:02:39.999
if you're applying XState
in different contexts.

40
00:02:39.999 --> 00:02:45.859
So of course, make sure that you have
Node installed and NPM installed as well.

41
00:02:45.859 --> 00:02:49.054
To get started,
you are going to run npm install,

42
00:02:49.054 --> 00:02:53.945
or if you're using Yarn, you could run
yarn install as well, or just yarn.

43
00:02:53.945 --> 00:02:56.735
And then you're going to run npm run dev.

44
00:02:56.735 --> 00:03:00.503
This is going to start the web
server at localhost port 3000.

45
00:03:00.503 --> 00:03:04.450
And so when you do that, and
I'll do that real quick right now.

46
00:03:05.640 --> 00:03:10.531
So you just go to, all right, we're in
there, so you're going to run yarn or

47
00:03:10.531 --> 00:03:11.840
npm install.

48
00:03:11.840 --> 00:03:16.447
I've already done that, so
I'm just gonna run yarn dev.

49
00:03:16.447 --> 00:03:21.035
And so this is going to run
the site at localhost 3000.

50
00:03:21.035 --> 00:03:28.290
So if we go to localhost 3000,
You're going to see the main page here.

51
00:03:28.290 --> 00:03:31.550
Now, let me show you in
the repo where this lives.

52
00:03:31.550 --> 00:03:35.791
If you git clone the repo and
bring it down to your local system,

53
00:03:35.791 --> 00:03:41.310
you're going to see in VS Code,
you're gonna see a whole bunch of folders.

54
00:03:41.310 --> 00:03:44.900
Each of these folders contains files for

55
00:03:44.900 --> 00:03:49.230
the exercises that we're
going to be doing, but

56
00:03:49.230 --> 00:03:55.368
the main file that you see over here
lives right here in the main repo.

57
00:03:55.368 --> 00:04:00.238
So this is the index.html page, and
you can use this as a scratch pad.

58
00:04:00.238 --> 00:04:02.776
And so I really encourage you to do so.

59
00:04:02.776 --> 00:04:07.997
We're going to be using this a lot for
just going over the various concepts in

60
00:04:07.997 --> 00:04:13.920
XState and also playing around with some
code before we jump into the exercises.

61
00:04:13.920 --> 00:04:19.028
So just to test that everything's working,
if you console.log a nice Hello world!,

62
00:04:19.028 --> 00:04:22.770
then you should be able to see it
right in the console over there.

63
00:04:22.770 --> 00:04:26.580
And that's how you know
that things are working.

64
00:04:26.580 --> 00:04:31.105
Vite is also really good at doing
fast refresh, so keep that in mind.

65
00:04:31.105 --> 00:04:35.745
When you make changes to the files,
you don't have to manually reload,

66
00:04:35.745 --> 00:04:39.590
you could just see it live
in the actual window.

67
00:04:39.590 --> 00:04:44.249
Now, what we're actually building
today is a real world app.

68
00:04:44.249 --> 00:04:46.113
We're building a media player.

69
00:04:46.113 --> 00:04:49.893
And so if you go to the last exercise,
which is 10 Testing,

70
00:04:49.893 --> 00:04:53.500
you're going to see this
media player in action.

71
00:04:53.500 --> 00:04:57.099
Now, this is just one of
your typical media players.

72
00:04:57.099 --> 00:05:01.917
It doesn't actually connect to media
because we're not trying to play audio

73
00:05:01.917 --> 00:05:02.666
over here.

74
00:05:02.666 --> 00:05:08.139
But it's a good starting point for if you
do want to create a media player that does

75
00:05:08.139 --> 00:05:13.936
play media, either through the audio, the
Web Audio API, or some other mechanism,

76
00:05:13.936 --> 00:05:19.112
then you could use this exact same app
logic that we create in XState to do so.

77
00:05:19.112 --> 00:05:22.045
This app has a number
of different functions.

78
00:05:22.045 --> 00:05:26.718
You could like or unlike a song,
dislike it, you could play or pause,

79
00:05:26.718 --> 00:05:32.124
of course, you could skip forward, and
you can mute and unmute the microphone.

80
00:05:32.124 --> 00:05:35.714
This is also an app that's
meant to be incomplete,

81
00:05:35.714 --> 00:05:38.810
which means it is really
what you make of it.

82
00:05:38.810 --> 00:05:43.744
Because while we do have certain
functionality that we're going to

83
00:05:43.744 --> 00:05:48.242
be building here, the functionality
that you decide to add is

84
00:05:48.242 --> 00:05:51.630
something that can be
added on after the fact.

85
00:05:51.630 --> 00:05:56.095
So if you wanted to add advanced
audio controls like changing

86
00:05:56.095 --> 00:06:00.907
the microphone volume, or
if you want to do things like go back and

87
00:06:00.907 --> 00:06:04.074
go forward, or maybe display a playlist.

88
00:06:04.074 --> 00:06:07.465
This app is meant for
you to really experiment and

89
00:06:07.465 --> 00:06:12.262
see all the different things that
you could add, and also realize how

90
00:06:12.262 --> 00:06:17.242
easy it is to add once you have the app
logic modelled as a state machine.

91
00:06:17.242 --> 00:06:20.288
So really, this is something that is for

92
00:06:20.288 --> 00:06:25.138
you to play around with and
is not meant to be 100% complete.

93
00:06:25.138 --> 00:06:29.432
Rather, each of the exercises are meant
to teach different parts of XState, and

94
00:06:29.432 --> 00:06:33.400
state machines, and state charts,
and parts of the actor model.

95
00:06:33.400 --> 00:06:38.080
And like I said, it's up to you
to build on top of those things.

