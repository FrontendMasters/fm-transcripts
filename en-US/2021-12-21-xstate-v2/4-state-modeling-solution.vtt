WEBVTT

1
00:00:00.180 --> 00:00:04.774
Let's go over how we would
represent this state machine using

2
00:00:04.774 --> 00:00:08.318
either a switch statement or
an object in code.

3
00:00:08.318 --> 00:00:13.202
So just like we did for
the simple promise example,

4
00:00:13.202 --> 00:00:18.541
we're gonna create a transition
function over here and

5
00:00:18.541 --> 00:00:22.301
we're gonna have a state and an event.

6
00:00:22.301 --> 00:00:27.874
And remember too that this state
is going to look something

7
00:00:27.874 --> 00:00:32.775
like status: 'idle' or status: 'loading'.

8
00:00:32.775 --> 00:00:37.239
But just to keep with the way that
we're doing things in XState,

9
00:00:37.239 --> 00:00:39.727
I'd like to have it just as a value.

10
00:00:39.727 --> 00:00:45.025
And so I consider this the value of
the finite state in the machine.

11
00:00:45.025 --> 00:00:47.902
So remember,
instead of switching on the event,

12
00:00:47.902 --> 00:00:50.717
we're gonna be switching
on that finite state.

13
00:00:50.717 --> 00:00:55.368
So switch and
then we're gonna say state.value.

14
00:00:55.368 --> 00:01:03.183
And so now we have three different states
that we're going to be considering.

15
00:01:03.183 --> 00:01:08.887
We have the loading state,
loading, playing, and paused.

16
00:01:08.887 --> 00:01:13.271
So case 'loading', case 'playing',
and case 'paused'.

17
00:01:13.271 --> 00:01:14.758
Default: break.

18
00:01:14.758 --> 00:01:20.409
Now, talking about impossible
states really real quick,

19
00:01:20.409 --> 00:01:26.409
these are really the only possible
states that we should have.

20
00:01:26.409 --> 00:01:31.955
So if you really want to,
you could throw an error to make

21
00:01:31.955 --> 00:01:37.632
yourself feel better and
say this should be impossible.

22
00:01:37.632 --> 00:01:43.840
But, yeah, using XState or other
libraries, it prevents this too, because

23
00:01:43.840 --> 00:01:49.594
it ensures that only these possible
states happen in your application.

24
00:01:49.594 --> 00:01:54.543
Okay, so now, we're going to just
return the state, just to make sure.

25
00:01:54.543 --> 00:01:58.899
So in the loading state,
we see that only one event can happen.

26
00:01:58.899 --> 00:02:01.155
We could have a loaded event and so

27
00:02:01.155 --> 00:02:05.758
we should go into the playing state
when that loaded event happens.

28
00:02:05.758 --> 00:02:12.555
Instead of using a switch statement,
cuz it's a little bit too verbose,

29
00:02:12.555 --> 00:02:16.502
we're just going to have an if statement,

30
00:02:16.502 --> 00:02:20.340
if (event.type === 'LOADED'),

31
00:02:20.340 --> 00:02:26.175
then we're gonna return the state
where the value is playing.

32
00:02:26.175 --> 00:02:31.882
And so we're gonna be doing that
with the other ones as well.

33
00:02:31.882 --> 00:02:37.603
So if the event type is pause, then
we're going to go to the paused state.

34
00:02:37.603 --> 00:02:40.986
If the event is play in the paused state,

35
00:02:40.986 --> 00:02:45.274
we're going to be going
back to the playing state.

36
00:02:45.274 --> 00:02:50.251
And so this is our entire switch statement
over here representing all of the events,

37
00:02:50.251 --> 00:02:53.967
states, and transitions,
the three main building blocks for

38
00:02:53.967 --> 00:02:56.230
building this finite state machine.

39
00:02:56.230 --> 00:02:58.588
But we also do need an initialState too.

40
00:02:58.588 --> 00:03:01.311
So const initialState=, and

41
00:03:01.311 --> 00:03:06.555
we're just gonna have value,
this is going to be loading.

42
00:03:09.655 --> 00:03:14.481
In fact, we could do something
that I believe Redux does,

43
00:03:14.481 --> 00:03:20.883
where if we don't provide the state or
just have this explicitly undefined,

44
00:03:20.883 --> 00:03:25.131
just say that this is going
to be the initialState.

45
00:03:25.131 --> 00:03:27.759
So now, let's attach this to the window,

46
00:03:27.759 --> 00:03:32.072
window.transition=transition, and
let's play around with it.

47
00:03:32.072 --> 00:03:35.551
So we're gonna go back to
the media player over here.

48
00:03:35.551 --> 00:03:41.407
And let's first try the initialState and

49
00:03:41.407 --> 00:03:45.260
say (type: 'PLAY').

50
00:03:45.260 --> 00:03:49.482
Now notice I'm intentionally doing the
PLAY event to show you that it should not

51
00:03:49.482 --> 00:03:53.279
be handled in the loading state
because we're still loading the song.

52
00:03:53.279 --> 00:03:58.272
So you see that the value is still
loading just like we expect.

53
00:03:58.272 --> 00:04:04.160
But now if I have loaded, now it goes
to playing, again just as we expect.

54
00:04:04.160 --> 00:04:07.813
And so if I take this and
put this over here, and

55
00:04:07.813 --> 00:04:13.339
now that we're in the playing state,
let's say play happens again,

56
00:04:13.339 --> 00:04:16.916
of course, it's still going to be playing.

57
00:04:16.916 --> 00:04:21.715
And if I have the PAUSE event,
it's going to be paused.

58
00:04:21.715 --> 00:04:24.895
And so that's how you could do
it using a switch statement.

59
00:04:24.895 --> 00:04:30.307
But there is another way in that by
using the objects notation as well,

60
00:04:30.307 --> 00:04:36.378
which I find a little bit simpler and
it comes with some other benefits as well.

61
00:04:36.378 --> 00:04:40.108
So I'm going to be making
a machine over here,

62
00:04:40.108 --> 00:04:46.052
providing the initialState of loading and
again, we have three states.

63
00:04:46.052 --> 00:04:52.732
We have loading, playing, and paused.

64
00:04:52.732 --> 00:04:58.812
So in the loading state,
on the loaded events, we go to playing.

65
00:04:58.812 --> 00:05:04.269
In the playing state,
on the PAUSE event, we go to paused.

66
00:05:04.269 --> 00:05:11.477
And in the paused state,
on the PLAY event, we go to playing.

67
00:05:11.477 --> 00:05:16.342
And now we could take that same
function that we wrote in our

68
00:05:16.342 --> 00:05:21.308
scratchpad for just looking
things up on this machine, and

69
00:05:21.308 --> 00:05:25.401
I'm just gonna copy it
here from the final.js.

70
00:05:25.401 --> 00:05:27.073
Just gonna copy this.

71
00:05:31.093 --> 00:05:34.990
And I'm going to call
this machineTransition.

72
00:05:34.990 --> 00:05:39.689
And I'm gonna be using the same
technique that we used before and

73
00:05:39.689 --> 00:05:44.314
just give this an initialState
of value: machine.initial.

74
00:05:44.314 --> 00:05:50.499
So now it becomes configurable, and we're
going to be looking up a couple things.

75
00:05:50.499 --> 00:05:55.324
First, we're going to be looking up
that state object based on the value.

76
00:05:55.324 --> 00:06:00.159
So for example, if the value is loading,
we're grabbing this entire object,

77
00:06:00.159 --> 00:06:03.551
and then we're going to be
looking up the OnProperty and

78
00:06:03.551 --> 00:06:05.883
seeing if there are any transitions.

79
00:06:05.883 --> 00:06:08.539
Remember, it might not be defined, so

80
00:06:08.539 --> 00:06:12.089
we're gonna put this
optional accessor over here.

81
00:06:12.089 --> 00:06:18.420
And then we're going to look up if
there is a transition on that event.

82
00:06:18.420 --> 00:06:22.042
Now, if any of this is undefined,
which is shown over here,

83
00:06:22.042 --> 00:06:26.671
if we don't have an XState value,
we're going to stay in the currentState.

84
00:06:26.671 --> 00:06:28.454
This is how state machines work.

85
00:06:28.454 --> 00:06:32.381
If events are not handled in
the states that we specify, or

86
00:06:32.381 --> 00:06:36.405
that we're currently in,
then it stays in the same state.

87
00:06:36.405 --> 00:06:40.059
So just consider that
a feature of state machines.

88
00:06:40.059 --> 00:06:45.642
So
window.machineTransition=machineTransit-

89
00:06:45.642 --> 00:06:46.189
ion.

90
00:06:46.189 --> 00:06:52.664
And so, this is going to behave
exactly the same way as before.

91
00:06:52.664 --> 00:06:58.417
So, let's say we have transition,
let's call this machineTransition instead.

92
00:06:58.417 --> 00:07:04.348
And playerMachineObject, aha,
that's because I'm into this machine.

93
00:07:04.348 --> 00:07:06.231
There we go.

94
00:07:06.231 --> 00:07:10.426
So now we go to playing, just as expected.

95
00:07:10.426 --> 00:07:13.590
And again if we copy this over,

96
00:07:13.590 --> 00:07:19.189
we have machineTransition and
we have a type of PAUSE,

97
00:07:19.189 --> 00:07:23.705
then this is going to
go to the paused state.

98
00:07:23.705 --> 00:07:28.175
And same thing if we're in the paused
state and the PLAY event happens,

99
00:07:28.175 --> 00:07:31.768
now we're going to be going
to the playing state itself.

100
00:07:31.768 --> 00:07:36.028
Now, you could get creative with this,
this is just a pure function.

101
00:07:36.028 --> 00:07:40.207
And pure functions, as awesome as
they are especially if you're in

102
00:07:40.207 --> 00:07:42.493
love with functional programming.

103
00:07:42.493 --> 00:07:44.138
Not having side effects or

104
00:07:44.138 --> 00:07:48.862
way to persist states doesn't really
make your application that useful.

105
00:07:48.862 --> 00:07:53.364
So thankfully we could use this
pure function in a way that we

106
00:07:53.364 --> 00:07:55.987
could persist the currentState.

107
00:07:55.987 --> 00:08:00.236
And like I said,
you could get really creative with this,

108
00:08:00.236 --> 00:08:04.758
I'm just going to have a really
simple implementation here.

109
00:08:04.758 --> 00:08:08.647
So I'm just gonna say let currentState and

110
00:08:08.647 --> 00:08:15.459
that's just going to be our initialState
of value and machine.initial.

111
00:08:15.459 --> 00:08:21.563
And then I'm going to say const,
we're gonna call this a service.

112
00:08:21.563 --> 00:08:26.126
And so this service is going to
allow us to send events to it.

113
00:08:26.126 --> 00:08:30.014
So we could send: (event).

114
00:08:30.014 --> 00:08:35.514
And so we're going to say
the currentState should be

115
00:08:35.514 --> 00:08:42.265
the result of the currentState and
the event that was passed in.

116
00:08:42.265 --> 00:08:46.815
And we'll also consol.log,
the currentState,

117
00:08:46.815 --> 00:08:51.590
just to make sure it does
exactly what we expect it to.

118
00:08:51.590 --> 00:08:54.455
So window.service=service.

119
00:08:54.455 --> 00:08:58.393
And again, this is a very simple
implementation, put this in class,

120
00:08:58.393 --> 00:09:02.024
have fun with it, make it subscribable,
do whatever you want.

121
00:09:02.024 --> 00:09:06.735
But the main point is that now
it's something that's live.

122
00:09:06.735 --> 00:09:10.611
We're persisting the currentState just
in this local variable over here,

123
00:09:10.611 --> 00:09:12.322
actually it's a global variable.

124
00:09:12.322 --> 00:09:16.485
And we're also imperatively
sending events to the service.

125
00:09:16.485 --> 00:09:20.449
So, let's try it out.

126
00:09:20.449 --> 00:09:25.765
Service.send, so
again we're in the initialState right now.

127
00:09:25.765 --> 00:09:31.910
So if I send type of loaded,
we're gonna get playing.

128
00:09:31.910 --> 00:09:34.918
And so
again because my state is persisted,

129
00:09:34.918 --> 00:09:37.610
if I do PLAY, it's gonna stay on play.

130
00:09:37.610 --> 00:09:41.056
If I do PAUSE,
now it's going to be paused.

131
00:09:41.056 --> 00:09:47.598
So I could send a gibberish event,
and because that event is not handled,

132
00:09:47.598 --> 00:09:51.727
it's going to stay in
exactly the same state.

133
00:09:51.727 --> 00:09:55.898
And so that is a solution to the exercise.

134
00:09:55.898 --> 00:09:58.293
Now, also, two things I wanna mention.

135
00:09:58.293 --> 00:10:02.809
First of all, if you do wanna go to
the solution of the exercise and

136
00:10:02.809 --> 00:10:06.584
see it, and I do encourage you to do so
if you get stuck,

137
00:10:06.584 --> 00:10:10.147
you could always take a look
at the final.js file.

138
00:10:10.147 --> 00:10:15.531
And in the actual application HTML,
you could uncomment

139
00:10:15.531 --> 00:10:22.051
the main.final.js just to make sure
that you see the final result.

140
00:10:22.051 --> 00:10:27.070
And you could make sure that what you're
doing matches up with that final result.

