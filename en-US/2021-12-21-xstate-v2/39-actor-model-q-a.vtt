WEBVTT

1
00:00:00.056 --> 00:00:02.975
One question asked is in a nutshell,

2
00:00:02.975 --> 00:00:07.221
what is the difference between
a service in an actor?

3
00:00:07.221 --> 00:00:13.898
The X term service to mean a machine
that's interpreted in made into an actor.

4
00:00:13.898 --> 00:00:19.450
So, really, there is no difference
between a service and an actor right now.

5
00:00:19.450 --> 00:00:24.071
A service and an actor are both things
where you could send events to.

6
00:00:24.071 --> 00:00:26.294
They could spawn other actors,

7
00:00:26.294 --> 00:00:30.999
they could change their own behavior
based on what events comes in.

8
00:00:30.999 --> 00:00:38.736
And an interesting bit of trivia is that
the actor model came into X state later.

9
00:00:38.736 --> 00:00:42.940
And so before the actor model,
we just called things services.

10
00:00:42.940 --> 00:00:47.887
And that's because that's what SC XML
called, the things that were or

11
00:00:47.887 --> 00:00:52.264
the the interpreted machines and
the things that are invoked.

12
00:00:52.264 --> 00:00:55.028
However, they are exactly the same thing.

13
00:00:55.028 --> 00:00:59.296
And so when we rewrite the documentation
and we move on to version five,

14
00:00:59.296 --> 00:01:02.153
that terminology is going
to be consolidated.

15
00:01:02.153 --> 00:01:05.808
But yeah, a service is an actor.

16
00:01:05.808 --> 00:01:10.033
And you could just think of services
as actors with state machine behavior.

17
00:01:10.033 --> 00:01:14.933
Someone asked can you repeat
the difference between spawn and invoke?

18
00:01:14.933 --> 00:01:20.081
So when you invoke an actor,
that actor is alive for

19
00:01:20.081 --> 00:01:24.210
the duration of what state it's in.

20
00:01:24.210 --> 00:01:30.008
We service in the example over here,
where this audio actor is only

21
00:01:30.008 --> 00:01:36.480
alive while we're in the ready
state which is playing or paused.

22
00:01:36.480 --> 00:01:41.273
When we skip, that actor gets disposed and
then when we go back to the ready state,

23
00:01:41.273 --> 00:01:42.805
we have a brand new actor.

24
00:01:42.805 --> 00:01:49.266
When you spawn an actor, that actor is
alive until the machine itself is stopped.

25
00:01:49.266 --> 00:01:54.907
And so you could also manually
stop in a spawned actor.

26
00:01:54.907 --> 00:01:58.652
But essentially they're both just actors.

27
00:01:58.652 --> 00:02:02.689
It's just one has a different
life cycle than the other one.

28
00:02:02.689 --> 00:02:07.433
Now the use case of where you will
want to spawn an actor which again I

29
00:02:07.433 --> 00:02:09.657
encourage you to read up on it.

30
00:02:09.657 --> 00:02:14.358
In the state documentation versus
invoking an actor is when you need

31
00:02:14.358 --> 00:02:16.345
a dynamic number of actors.

32
00:02:16.345 --> 00:02:23.847
For example,
let's say that we have a playlist machine.

33
00:02:23.847 --> 00:02:32.722
And the playlist spawns
dynamically a number of actors and

34
00:02:32.722 --> 00:02:38.523
each of these actors are song actors.

35
00:02:38.523 --> 00:02:40.999
So we have song, song, song.

36
00:02:44.248 --> 00:02:49.168
This would be a good candidate for
spawning actors because invocations

37
00:02:49.168 --> 00:02:53.029
are all about, like there being one or
a finite number.

38
00:02:53.029 --> 00:02:57.512
A predetermined number of
actors that represents what's

39
00:02:57.512 --> 00:03:00.170
happening in the current states.

40
00:03:00.170 --> 00:03:05.560
For these spawn actors,
they're not directly tied to a state and

41
00:03:05.560 --> 00:03:09.286
there could be just
a dynamic number of them.

42
00:03:09.286 --> 00:03:13.541
So we could read from context and
be like, okay, I have our playlist.

43
00:03:13.541 --> 00:03:17.057
We need to spawn the song actor for
each one of these and

44
00:03:17.057 --> 00:03:19.411
send events to them individually.

45
00:03:19.411 --> 00:03:25.257
That would be a use case for spawned
actors which are not tied to a state.

46
00:03:25.257 --> 00:03:30.205
Is it possible to send in events
from outside any machine if we

47
00:03:30.205 --> 00:03:31.862
know the actors ID?

48
00:03:31.862 --> 00:03:37.749
so in general no you cannot do that you
need a reference to the actor itself.

49
00:03:37.749 --> 00:03:43.053
Thankfully, you can can't have
a reference to that actor from from here.

50
00:03:43.053 --> 00:03:46.005
So I'm actually gonna type service.

51
00:03:46.005 --> 00:03:50.283
Actually, you know what, let's pause this.

52
00:03:50.283 --> 00:03:56.332
And let's actually grab it just so
I could show you.

53
00:03:56.332 --> 00:03:57.625
Let's see we have window that service.

54
00:04:02.448 --> 00:04:09.032
Okay, yeah, so
I'm gonna say service.subscribe.

55
00:04:09.032 --> 00:04:13.655
Or actually let's just log and see.

56
00:04:13.655 --> 00:04:17.757
So service.subscribe, state and

57
00:04:17.757 --> 00:04:22.548
we're going to console.log the state.

58
00:04:22.548 --> 00:04:27.848
So this date has a property
called children.

59
00:04:27.848 --> 00:04:31.025
In this these children,

60
00:04:31.025 --> 00:04:36.026
each one of these is the invoked actor.

61
00:04:36.026 --> 00:04:40.442
So we have an audio actor and
it has a simple interface,

62
00:04:40.442 --> 00:04:43.521
just like we built with get snapshot.

63
00:04:43.521 --> 00:04:48.731
We have sent, we have subscribe,
we have the idea of it,

64
00:04:48.731 --> 00:04:54.394
and so you can access this directly and
just send it's stuff.

65
00:04:54.394 --> 00:04:58.585
So actually, this is interesting.

66
00:04:58.585 --> 00:05:02.584
So right now,
we are in the past states but

67
00:05:02.584 --> 00:05:07.856
what I could do is if I get
direct access to this states.

68
00:05:07.856 --> 00:05:14.037
I could say temp1.children.audio.send,

69
00:05:14.037 --> 00:05:18.368
and I could send it a play events.

70
00:05:18.368 --> 00:05:21.940
And so now even though I'm in
the past date, it is playing.

71
00:05:21.940 --> 00:05:24.402
And so this just goes to show you.

72
00:05:24.402 --> 00:05:27.509
Obviously, this should be in
the impossible state the song should not

73
00:05:27.509 --> 00:05:28.207
be playing.

74
00:05:28.207 --> 00:05:29.708
Sorry, impossible behavior,

75
00:05:29.708 --> 00:05:33.050
because the song should not be playing
while we're in the pause state.

76
00:05:33.050 --> 00:05:37.537
And the reason this happened
is because as a human hacker

77
00:05:37.537 --> 00:05:40.411
directly got access to that actor.

78
00:05:40.411 --> 00:05:46.254
And I sort of sent it information and I
told it what to do outside of the parents.

79
00:05:46.254 --> 00:05:51.553
So that's like if you again think of
this in terms of humans it's like your

80
00:05:51.553 --> 00:05:57.197
manager telling you what to do but then
someone completely outside the company

81
00:05:57.197 --> 00:06:03.020
sneaking into the company and
being like hey you should do this instead.

82
00:06:03.020 --> 00:06:05.350
So, obviously that's going
to cause some problems.

83
00:06:05.350 --> 00:06:09.814
And that's why you shouldn't be just
randomly sending actors events.

84
00:06:09.814 --> 00:06:14.554
You should be doing so
in a controlled way.

85
00:06:14.554 --> 00:06:17.728
So I could pause it.

86
00:06:17.728 --> 00:06:22.774
Yeah, so you see what happens when
we have direct access to an actor or

87
00:06:22.774 --> 00:06:28.704
try to access an actor directly when it's
not part of the system that we created.

88
00:06:28.704 --> 00:06:33.666
Can I have two separately created machines
interact with each other as actors?

89
00:06:33.666 --> 00:06:38.637
And so the problem with that is that
if you have, let's say, a machine here,

90
00:06:38.637 --> 00:06:42.941
in the machine here, they have no
way of knowing about each other.

91
00:06:42.941 --> 00:06:48.518
You need some sort of glue layer
on top of here that sort of knows

92
00:06:48.518 --> 00:06:54.762
about both machines and can Past
events back and forth between them.

93
00:06:54.762 --> 00:06:58.353
But that becomes an implicit
way of modeling that.

94
00:06:58.353 --> 00:07:04.084
So instead it's recommended that you have
a parent's machine or a parent's actor.

95
00:07:04.084 --> 00:07:10.402
However, you want to implement
it in this parents actor.

96
00:07:10.402 --> 00:07:14.380
Is responsible for
spawning both machines and

97
00:07:14.380 --> 00:07:18.769
then what it could do is
when it spawns the machine.

98
00:07:18.769 --> 00:07:23.477
This parent machine can send
a reference to this actor.

99
00:07:23.477 --> 00:07:28.221
So if I give this a blue background and

100
00:07:28.221 --> 00:07:33.883
this machine or this actor, sort of sense,

101
00:07:33.883 --> 00:07:38.628
a reference to that actor as a message

102
00:07:38.628 --> 00:07:42.777
then let's lower the opacity.

103
00:07:42.777 --> 00:07:49.130
Then now this actor can talk to that
actor directly because this parents actor

104
00:07:49.130 --> 00:07:55.302
told it about that sibling actor so
that's sort of one way of modelling it.

105
00:07:55.302 --> 00:08:00.972
Another way is that you can have this
sending events to the parents and

106
00:08:00.972 --> 00:08:02.357
make that full.

107
00:08:02.357 --> 00:08:07.690
And so that parents can routes
that events to the other actor and

108
00:08:07.690 --> 00:08:11.725
so this parents essentially
becomes a router.

