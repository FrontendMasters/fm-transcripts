WEBVTT

1
00:00:00.110 --> 00:00:04.135
We're gonna be starting with our first
lesson which is on software modeling.

2
00:00:04.135 --> 00:00:07.718
Instead of jumping right into
state machines and statecharts,

3
00:00:07.718 --> 00:00:11.644
I really want to get down to the why
of state machines and statecharts.

4
00:00:11.644 --> 00:00:16.178
And why you would actually want to use
these types of things when the way we've

5
00:00:16.178 --> 00:00:20.296
been coding really didn't touch on
state machines or statecharts for

6
00:00:20.296 --> 00:00:22.686
however many years we've been coding.

7
00:00:22.686 --> 00:00:24.881
But why it's important today and

8
00:00:24.881 --> 00:00:29.434
should have been important the entire
time we've been developers.

9
00:00:29.434 --> 00:00:33.106
So the first question is
what is software modeling?

10
00:00:33.106 --> 00:00:40.120
Software modeling in short is the art of
planning ahead, at least in my own words.

11
00:00:40.120 --> 00:00:43.929
Really, if you look up
what software modeling is,

12
00:00:43.929 --> 00:00:47.484
you see that it talks
a lot about abstractions.

13
00:00:47.484 --> 00:00:52.067
And that's really what software
modeling is about is creating

14
00:00:52.067 --> 00:00:56.920
a layer of abstraction that is one
degree separated from the code.

15
00:00:56.920 --> 00:01:02.728
So the code is the implementation layer
and the model is the abstraction layer.

16
00:01:02.728 --> 00:01:08.398
Now, there are many ways to model
software, one of the most popular ways and

17
00:01:08.398 --> 00:01:12.312
useful in my opinion to do so,
is by using diagrams.

18
00:01:12.312 --> 00:01:17.210
So, you might have started planning
software in the past by just grabbing

19
00:01:17.210 --> 00:01:21.477
a whiteboard or maybe a pencil and
paper and drawing user flows or

20
00:01:21.477 --> 00:01:25.601
flowcharts or diagrams like
entity relationship diagrams.

21
00:01:25.601 --> 00:01:30.283
And just trying to understand what
your code is supposed to do and

22
00:01:30.283 --> 00:01:32.546
accomplish at a higher level.

23
00:01:32.546 --> 00:01:36.690
And so this essentially is
what software modeling is.

24
00:01:36.690 --> 00:01:41.080
It's creating these abstract
models that we could code against.

25
00:01:41.080 --> 00:01:46.016
However, something that I see way too
often in software development is jumping

26
00:01:46.016 --> 00:01:47.571
straight into the code.

27
00:01:47.571 --> 00:01:52.040
So we'll look at something like
a user interface of something we're

28
00:01:52.040 --> 00:01:56.355
supposed to implement and
one of our first reactions says, okay,

29
00:01:56.355 --> 00:01:59.065
let's start coding the user interface.

30
00:01:59.065 --> 00:02:01.865
And then we start adding functionality on

31
00:02:01.865 --> 00:02:06.667
top of that user interface by putting
a lot of logic and event handlers.

32
00:02:06.667 --> 00:02:11.673
And if something needs to be different,
then we'll add an if statements.

33
00:02:11.673 --> 00:02:15.940
And this is what quickly
creates spaghetti code.

34
00:02:15.940 --> 00:02:19.810
So this is something that we really
wants to avoid just by planning ahead.

35
00:02:20.940 --> 00:02:25.869
Now, one of the problems or I'd like to
call it a friction points with diagrams

36
00:02:25.869 --> 00:02:29.466
is that diagrams aren't always
up to date with the code.

37
00:02:29.466 --> 00:02:32.972
We might draw a really nice
architecture diagram or

38
00:02:32.972 --> 00:02:35.343
a flowchart describing our code.

39
00:02:35.343 --> 00:02:40.043
But once we starts to code, and
once new requirements come in,

40
00:02:40.043 --> 00:02:46.620
it becomes double efforts to both update
the diagram and also update the code.

41
00:02:46.620 --> 00:02:49.130
So that's what state machines and
statecharts are for.

42
00:02:49.130 --> 00:02:51.320
And we're gonna talk about
that in a little bit.

43
00:02:51.320 --> 00:02:55.584
But it allows you to do both
the software modeling upfront and

44
00:02:55.584 --> 00:03:00.850
the actual implementation at the same
time, and do it in a way that you could

45
00:03:00.850 --> 00:03:07.050
change the model and the implementation
and they could stay completely in sync.

46
00:03:07.050 --> 00:03:11.024
And so this allows you to add new
features, change features, and

47
00:03:11.024 --> 00:03:14.432
really understand your software
as a whole in one step.

48
00:03:14.432 --> 00:03:18.900
Instead of doing it in multiple
steps of creating a diagram,

49
00:03:18.900 --> 00:03:24.157
then code into the diagram, or
even skipping the diagram altogether,

50
00:03:24.157 --> 00:03:26.800
which definitely not a good thing.

51
00:03:26.800 --> 00:03:28.158
So state machines and

52
00:03:28.158 --> 00:03:32.918
statecharts are part of what's
called events-driven-architecture.

53
00:03:32.918 --> 00:03:37.916
And so event driven architecture is
about the fact that you have events

54
00:03:37.916 --> 00:03:42.150
as a primitive, anything that
can happen to whatever app or

55
00:03:42.150 --> 00:03:45.639
software that you're
programming is an event.

56
00:03:45.639 --> 00:03:50.016
So something that a user does,
whether they click something, or

57
00:03:50.016 --> 00:03:54.489
swipe something, or type something in,
all of those are events.

58
00:03:54.489 --> 00:03:59.430
And by events I mean things that
happen which is the literal definition

59
00:03:59.430 --> 00:04:00.358
of an event.

60
00:04:00.358 --> 00:04:04.983
So when the user clicks a button,
that button clicked events is

61
00:04:04.983 --> 00:04:09.346
an event that can be fed into
this model that we created and so

62
00:04:09.346 --> 00:04:14.343
that model can decide what should
happen next based on that events.

63
00:04:14.343 --> 00:04:19.716
Now keep in mind that events aren't just
something that originates from the user,

64
00:04:19.716 --> 00:04:24.014
but events can also be something
that originates from the system or

65
00:04:24.014 --> 00:04:28.970
other systems that are interacting
with your software itself.

66
00:04:28.970 --> 00:04:34.036
For example, if we start fetching a
promise, then the user action of clicking

67
00:04:34.036 --> 00:04:39.361
a button or pressing answer on a phone to
start fetching that promise is an events.

68
00:04:39.361 --> 00:04:44.290
But also the promise resolving or
rejecting, those are also events and

69
00:04:44.290 --> 00:04:46.517
they don't come from the user.

70
00:04:46.517 --> 00:04:51.391
So it's important to keep in mind that
events encompass anything that can happen

71
00:04:51.391 --> 00:04:54.840
in your application, and
not just things from the user.

72
00:04:56.300 --> 00:05:00.232
So how do we specify
behavior in an application?

73
00:05:00.232 --> 00:05:03.505
This is where things
like given-when-then and

74
00:05:03.505 --> 00:05:06.549
test-driven developments come into play.

75
00:05:06.549 --> 00:05:10.207
And these are really
loose specifications for

76
00:05:10.207 --> 00:05:15.000
how we talk about how our
application is supposed to behave.

77
00:05:15.000 --> 00:05:19.770
Now, let's actually talk about
the media player for a minute because I

78
00:05:19.770 --> 00:05:24.636
want us to start creating a specification
on how it's supposed to work.

79
00:05:24.636 --> 00:05:31.580
And you could see that specification if
you go into modeling and this readme.

80
00:05:32.660 --> 00:05:37.456
We have a loose text description
of what is supposed to

81
00:05:37.456 --> 00:05:41.000
happen in the app at each step.

82
00:05:41.000 --> 00:05:43.720
Now I actually really
like given-when-then.

83
00:05:43.720 --> 00:05:48.203
And that's because when we
represent a specification in this

84
00:05:48.203 --> 00:05:53.117
given-when-then structure,
we already have all of the building

85
00:05:53.117 --> 00:05:58.270
blocks we need to make a really
solid model of our application.

86
00:05:58.270 --> 00:05:59.640
So, for example,

87
00:05:59.640 --> 00:06:05.170
we say we have here a song when
loaded will start playing by default.

88
00:06:05.170 --> 00:06:10.002
So, we could say that given, and

89
00:06:10.002 --> 00:06:13.330
I will bump this up.

90
00:06:13.330 --> 00:06:14.910
Let's just use large over here.

91
00:06:15.960 --> 00:06:20.140
Given a song is not loaded yet.

92
00:06:21.800 --> 00:06:25.315
When a song is loaded,

93
00:06:25.315 --> 00:06:31.050
then the song should start playing.

94
00:06:32.310 --> 00:06:37.539
So now we have everything here that
represents just the different building

95
00:06:37.539 --> 00:06:42.900
blocks of our application, or at least
one small part of our application.

96
00:06:42.900 --> 00:06:48.155
So, this given over here is a state,
is a precondition, but

97
00:06:48.155 --> 00:06:53.370
it could also be represented
as a state in our application.

98
00:06:53.370 --> 00:06:57.440
So we had this idea of
a song not being loaded yet.

99
00:06:57.440 --> 00:07:00.310
And then this one represents an event.

100
00:07:00.310 --> 00:07:04.655
So when a song is loaded, so
now we know that that loading, or

101
00:07:04.655 --> 00:07:10.170
that loaded part is an events that
can happen in the application.

102
00:07:10.170 --> 00:07:12.480
Then the song should start playing.

103
00:07:12.480 --> 00:07:15.190
So now we have a different states.

104
00:07:15.190 --> 00:07:16.823
If the states aren't changing,

105
00:07:16.823 --> 00:07:19.927
then this then part is going to
be exactly the same as the given.

106
00:07:19.927 --> 00:07:24.005
But user specifications usually
specify that the state of

107
00:07:24.005 --> 00:07:26.175
the application does change.

108
00:07:26.175 --> 00:07:29.719
So we have a bunch of these user stories.

109
00:07:29.719 --> 00:07:32.919
The user could also play or
pause the song and

110
00:07:32.919 --> 00:07:38.024
we could translate that to, for
example, given the song is playing,

111
00:07:38.024 --> 00:07:42.536
when the user presses pause,
then the song should be paused.

112
00:07:42.536 --> 00:07:46.716
So now we have our playing states,
our paused state, and

113
00:07:46.716 --> 00:07:50.997
the events of clicking the pause
button to pause the song.

114
00:07:50.997 --> 00:07:54.926
So, that's why specifying behavior is so
useful and

115
00:07:54.926 --> 00:07:59.816
this is why we typically do this
using user stories because it gives

116
00:07:59.816 --> 00:08:04.382
us all of the building blocks
of specifying our application.

117
00:08:04.382 --> 00:08:10.056
&gt;&gt; So is modeling making a list of all
possible events that can occur in an app?

118
00:08:10.056 --> 00:08:11.024
&gt;&gt; Yes, exactly.

119
00:08:11.024 --> 00:08:16.337
Like I was talking about before,
typically when we start coding an app,

120
00:08:16.337 --> 00:08:22.188
we start coding with the user interface
and just start shoving events in there.

121
00:08:22.188 --> 00:08:26.948
So now that we're thinking in
an event-first architecture,

122
00:08:26.948 --> 00:08:32.697
event-first really describes that
there's a bunch of events happening,

123
00:08:32.697 --> 00:08:36.845
and our application is going
to react to those events.

124
00:08:36.845 --> 00:08:42.277
But it can be really tempting to put all
of the logic inside of event handlers for

125
00:08:42.277 --> 00:08:43.040
this.

126
00:08:43.040 --> 00:08:48.004
And this typically isn't really the best
way to go especially as the app scales up

127
00:08:48.004 --> 00:08:48.881
in features.

128
00:08:48.881 --> 00:08:54.817
For example, you might be putting fetch
logic inside of a form submit handler.

129
00:08:54.817 --> 00:09:00.692
Or you might be having like defensive
conditions and if statements inside

130
00:09:00.692 --> 00:09:07.341
of a click handler that determines what
should happen when this button is clicked.

131
00:09:07.341 --> 00:09:10.847
For example,
you might say if the form is loading and

132
00:09:10.847 --> 00:09:15.708
the submit button is clicked again,
then we might have an if statement,

133
00:09:15.708 --> 00:09:21.870
like if, if is loading, then do nothing,
otherwise start fetching the data.

134
00:09:21.870 --> 00:09:25.770
And this makes the behavior implicit.

135
00:09:25.770 --> 00:09:30.762
It makes the behavior such that we're
describing the application in terms of

136
00:09:30.762 --> 00:09:35.697
when this event happens, do this, but
also keep in mind these conditions.

137
00:09:35.697 --> 00:09:41.519
And so now instead of thinking in terms of
like the entire state of the application.

138
00:09:41.519 --> 00:09:46.774
Or thinking in terms of okay,
let's have an event just do something and

139
00:09:46.774 --> 00:09:50.452
if that's not doing the exact
thing we want it to,

140
00:09:50.452 --> 00:09:55.726
add more if statements in there so
that we get to do the behavior we want.

141
00:09:55.726 --> 00:09:59.956
And so that's why I encourage
you to take a step back into

142
00:09:59.956 --> 00:10:03.140
a state-first approach instead.

143
00:10:03.140 --> 00:10:07.160
And so I'm going to demonstrate
what we mean by this.

144
00:10:07.160 --> 00:10:11.830
And this is also going to get into
state machines and statecharts as well.

145
00:10:13.300 --> 00:10:17.679
So first, when we look at this,
this specification,

146
00:10:17.679 --> 00:10:22.330
we have a state-first
approach already over here.

147
00:10:22.330 --> 00:10:26.430
We say when the song is loaded,
then the song should start playing.

148
00:10:27.990 --> 00:10:32.940
But we have this precondition over here
too, given a song is not loaded yet.

149
00:10:32.940 --> 00:10:37.681
Now, we can make another user
story that says, for example,

150
00:10:37.681 --> 00:10:42.240
given a song is playing,
when the pause button is pressed,

151
00:10:42.240 --> 00:10:44.719
then the song should be paused.

152
00:10:44.719 --> 00:10:51.749
All right, so this specification allows us
to prevent any unintentional behavior of,

153
00:10:51.749 --> 00:10:56.499
for example, if the pause button
is pressed when the song is

154
00:10:56.499 --> 00:11:00.778
already paused,
if you have a pause button visible.

155
00:11:00.778 --> 00:11:08.224
Or if the play button is visible
while the song is already playing and

156
00:11:08.224 --> 00:11:12.153
the user happens to press it again.

157
00:11:12.153 --> 00:11:16.927
Some unintended behavior might happen
if the exact same button is pressed

158
00:11:16.927 --> 00:11:21.624
more than once and we're attaching
logic to the event handler instead of

159
00:11:21.624 --> 00:11:24.242
considering a state-first approach.

160
00:11:24.242 --> 00:11:29.031
And so that's why this given part of
the given-when-then statements are so

161
00:11:29.031 --> 00:11:29.848
important.

162
00:11:29.848 --> 00:11:34.960
And so like I was saying,
this gets into what state machines and

163
00:11:34.960 --> 00:11:37.090
statecharts really are.

