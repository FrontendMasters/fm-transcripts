WEBVTT

1
00:00:00.200 --> 00:00:02.722
So I'm going to go into
the scratch pad over here,

2
00:00:02.722 --> 00:00:06.102
and we're going to start by creating
a very simple state machine.

3
00:00:06.102 --> 00:00:11.004
That's doesn't need any libraries,
it's just, we're going to be using

4
00:00:11.004 --> 00:00:15.689
just a switch statement and we're
going to be modeling a simple prompt.

5
00:00:15.689 --> 00:00:19.555
So I'm just going to have over here,

6
00:00:19.555 --> 00:00:25.510
function, let's just call this transition.

7
00:00:25.510 --> 00:00:29.468
And so this is going to describe
transitioning the states or

8
00:00:29.468 --> 00:00:34.630
describing what the next state should
be given this current state in events.

9
00:00:34.630 --> 00:00:38.775
And we're going to be
describing like I said,

10
00:00:38.775 --> 00:00:43.148
a simple fetch flow, so
we have state and event.

11
00:00:43.148 --> 00:00:47.424
And so,
typically we would start by saying or

12
00:00:47.424 --> 00:00:51.369
by having a switch on the events dot type.

13
00:00:51.369 --> 00:00:56.955
So this is assuming that the events
looks like type FETCH or

14
00:00:56.955 --> 00:01:01.977
it could have other payload
like that in the states.

15
00:01:01.977 --> 00:01:06.618
It doesn't matter exactly
what it looks like but

16
00:01:06.618 --> 00:01:11.258
let's assume that the state
looks like states,

17
00:01:11.258 --> 00:01:16.592
we have data, null, error,
null, things like that.

18
00:01:16.592 --> 00:01:20.917
All right, so
when we start switching on the event type,

19
00:01:20.917 --> 00:01:24.680
we might do something like case FETCH.

20
00:01:24.680 --> 00:01:31.760
And then we could say console dot log,

21
00:01:31.760 --> 00:01:36.405
starting to fetch data,

22
00:01:36.405 --> 00:01:41.510
break and defaults break.

23
00:01:41.510 --> 00:01:46.631
Okay, so I'm just gonna say,
window dot transition equals transition.

24
00:01:46.631 --> 00:01:49.135
And we're going to attach this
directly to the window, so

25
00:01:49.135 --> 00:01:50.830
we could start playing around with it.

26
00:01:50.830 --> 00:01:55.560
And I encourage you to do the same thing
if you're playing around with things in

27
00:01:55.560 --> 00:01:57.075
the scratchpad as well.

28
00:01:57.075 --> 00:02:00.895
So we could transition again the state
doesn't matter right now, but

29
00:02:00.895 --> 00:02:03.040
let's say that we have a type of FETCH.

30
00:02:04.820 --> 00:02:08.430
Okay, so
now it says starting to fetch data, but

31
00:02:08.430 --> 00:02:10.997
the immediate issue here is that.

32
00:02:10.997 --> 00:02:16.350
The user or even something else
in the system can send that fetch

33
00:02:16.350 --> 00:02:22.619
events multiple times and it begin
to start fetching data repetitively.

34
00:02:22.619 --> 00:02:28.680
And so we want to avoid unwanted
states and unwanted actions like that.

35
00:02:28.680 --> 00:02:36.310
So that's why, let's just assume
that we have a status over here.

36
00:02:36.310 --> 00:02:40.226
So let's say that we have
status of idle and so

37
00:02:40.226 --> 00:02:43.743
we have starting to fetch data, break.

38
00:02:43.743 --> 00:02:47.364
It's something that we would typically do,

39
00:02:47.364 --> 00:02:51.090
well actually first
let's change the state.

40
00:02:51.090 --> 00:02:57.405
So we're going to return status loading
and we're going to see if that's and

41
00:02:57.405 --> 00:03:02.380
just as a follow through,
we're going to return the state.

42
00:03:03.860 --> 00:03:07.937
Okay, so now, if we transition status,

43
00:03:07.937 --> 00:03:13.530
let's say that we're idle and
we send the FETCH events.

44
00:03:15.170 --> 00:03:17.853
Okay, so now it says status loading, but

45
00:03:17.853 --> 00:03:21.610
what happens if the status
is already loading?

46
00:03:21.610 --> 00:03:25.657
It's going to fetch data again and so this
is something that you might immediately

47
00:03:25.657 --> 00:03:28.820
see if you start clicking
a button multiple times.

48
00:03:28.820 --> 00:03:33.457
So your first inclination would be
probably to have a little bit of

49
00:03:33.457 --> 00:03:36.370
defensive logic to solve this problem.

50
00:03:36.370 --> 00:03:42.580
So we would say,
if state dot status is not loading,

51
00:03:45.407 --> 00:03:48.197
Then we're going to start to fetch data.

52
00:03:48.197 --> 00:03:55.680
So now again, if the status is loading and
we sent fetch, nothing happens.

53
00:03:55.680 --> 00:04:00.980
And so this is the first step to starting
to think in terms of states first.

54
00:04:00.980 --> 00:04:04.414
So instead of switching
on the events type first,

55
00:04:04.414 --> 00:04:08.111
what we really want to do is
switch some finite state.

56
00:04:08.111 --> 00:04:12.146
So we could use the status
in this example and

57
00:04:12.146 --> 00:04:17.064
say switch state dot status,
and then say case idle.

58
00:04:17.064 --> 00:04:24.312
And now we could do our same fetch
data over here and so case loading.

59
00:04:24.312 --> 00:04:30.445
We could have maybe some other behavior,
break and then defaults, break.

60
00:04:31.466 --> 00:04:37.976
And then, now what you could do in here
and this might look a little bit ugly.

61
00:04:37.976 --> 00:04:43.847
But you could switch on the events
dot type if you have multiple events.

62
00:04:43.847 --> 00:04:48.551
Or if you're only handling
a couple of events per state,

63
00:04:48.551 --> 00:04:52.870
what I'd like to do is just
put it in an if statement.

64
00:04:52.870 --> 00:04:59.753
So I say, if event dot type is fetch, then
we're going to start loading the data.

65
00:04:59.753 --> 00:05:03.933
And then we're going
to return that status,

66
00:05:03.933 --> 00:05:08.782
otherwise, we're just
going to return the state.

67
00:05:08.782 --> 00:05:13.775
And so now, we're going to see
that if we have idle over here.

68
00:05:13.775 --> 00:05:21.270
It's going to start to fetch data and it's
going to return our next date of loading.

69
00:05:21.270 --> 00:05:25.881
And so now, when we load it again,
like I showed you over here,

70
00:05:25.881 --> 00:05:28.900
it's not going to do anything.

71
00:05:28.900 --> 00:05:32.179
So keep in mind the difference
between doing this and

72
00:05:32.179 --> 00:05:36.437
taking a state first approach and
taking an events first approach.

73
00:05:36.437 --> 00:05:41.641
With the state first approach,
we don't need to have defensive logic,

74
00:05:41.641 --> 00:05:44.985
again this could just
be a switch statements.

75
00:05:44.985 --> 00:05:49.524
And we don't need to cover up
any impossible transitions or

76
00:05:49.524 --> 00:05:53.720
states that might arise by
doing things events first.

77
00:05:53.720 --> 00:06:00.425
And so the big reason for
this is the way we define finite states.

78
00:06:00.425 --> 00:06:05.397
Finite states in state machines and
state charts,

79
00:06:05.397 --> 00:06:09.220
what these represents are behaviors.

80
00:06:09.220 --> 00:06:16.900
And so, a behavior is how the application
is going to react based on an events.

81
00:06:16.900 --> 00:06:21.358
The example I'd like to give is,
as humans we're either asleep or awake and

82
00:06:21.358 --> 00:06:23.530
those are two different behaviors.

83
00:06:23.530 --> 00:06:28.752
So we could call those states, I'm either
in the asleep state or the awake state.

84
00:06:28.752 --> 00:06:33.832
And the reason that I would distinguish
between those two states is because.

85
00:06:33.832 --> 00:06:38.590
I'm going to react differently to events
when I'm asleep rather than when I'm

86
00:06:38.590 --> 00:06:39.096
awake.

87
00:06:39.096 --> 00:06:43.784
And so that should be a good guide for
thinking about like how to

88
00:06:43.784 --> 00:06:48.850
separate the different reactions
to events in your application.

89
00:06:48.850 --> 00:06:51.666
So for example with this fetch logic or

90
00:06:51.666 --> 00:06:55.979
separating the idle behavior
from the loading behavior.

91
00:06:55.979 --> 00:07:01.648
In idle, when the events fetch is sent,
then we should start fetching data.

92
00:07:01.648 --> 00:07:08.180
In the loading behavior, when the fetch
event is sent, nothing should happen.

93
00:07:08.180 --> 00:07:12.970
So, that's a good way to distinguish
what the different behaviors are.

94
00:07:14.720 --> 00:07:17.886
So, one more thing before
I get to the exercise.

95
00:07:17.886 --> 00:07:21.723
We could also represent
this state first approach,

96
00:07:21.723 --> 00:07:24.871
which is actually a finite state machine.

97
00:07:24.871 --> 00:07:29.043
We could represent this as
an object instead and again,

98
00:07:29.043 --> 00:07:32.344
we're not going to be using any libraries.

99
00:07:32.344 --> 00:07:36.549
I'm just going to be using
an object as a lookup table, so

100
00:07:36.549 --> 00:07:42.440
I'm going to call this const machine and
I'm going to give it an initial state.

101
00:07:42.440 --> 00:07:47.104
So remember, I'm just using this as a pure
lookup table rather than something.

102
00:07:47.104 --> 00:07:52.072
That we inject into a library, which
we're gonna be doing in the next lesson.

103
00:07:52.072 --> 00:07:56.134
So let's say I give the initial
state of idle and so

104
00:07:56.134 --> 00:08:01.180
now I have a bunch of states, so
I have idle and I have loading.

105
00:08:02.200 --> 00:08:09.501
So inside this object,
I could specify that on the FETCH events,

106
00:08:09.501 --> 00:08:13.500
we should go to the loading states.

107
00:08:13.500 --> 00:08:17.990
And we'll just keep it simple for
now and keep it like this.

108
00:08:17.990 --> 00:08:23.470
By the way, the reason that I'm not just
putting fetched directly on the object.

109
00:08:23.470 --> 00:08:26.734
Is because we might want to,
or in the future,

110
00:08:26.734 --> 00:08:31.530
we're going to want to add entry and
exit actions and other things.

111
00:08:31.530 --> 00:08:35.401
So this object doesn't just
represent transitions, but

112
00:08:35.401 --> 00:08:38.170
it could represent other things as well.

113
00:08:39.240 --> 00:08:43.783
All right, so how do we use
this machine to actually work

114
00:08:43.783 --> 00:08:47.950
the same way as this
transition machine over here.

115
00:08:49.150 --> 00:08:55.540
I'm gonna call this transition2, and
let's give it a states and an event.

116
00:08:55.540 --> 00:09:00.380
So, now instead of creating
this big switch statements,

117
00:09:00.380 --> 00:09:03.552
we could just look it up on the object.

118
00:09:03.552 --> 00:09:08.842
And we could say const nextStates
equals the machine dot states.

119
00:09:08.842 --> 00:09:14.795
And we're going to be grabbing the,
let's just grab the state over here.

120
00:09:14.795 --> 00:09:19.729
And remember we're putting
it on state dot status,

121
00:09:19.729 --> 00:09:23.654
the finite state and
then on which might or

122
00:09:23.654 --> 00:09:27.480
might not exist and the events dot type.

123
00:09:27.480 --> 00:09:31.263
Now, if this doesn't give us a state,

124
00:09:31.263 --> 00:09:35.628
like if it's an event
that we don't handle.

125
00:09:35.628 --> 00:09:41.512
Then we're just going to
return the current state and

126
00:09:41.512 --> 00:09:48.190
then we could return status,
next status, just like that.

127
00:09:48.190 --> 00:09:54.410
So window dot transition2 equals
transition2 and let's test it out.

128
00:09:56.100 --> 00:10:00.291
So I'm also going to be exporting or

129
00:10:00.291 --> 00:10:03.783
sharing the machine as well,

130
00:10:03.783 --> 00:10:08.405
so window dot machine equals machine.

131
00:10:08.405 --> 00:10:11.016
And so if I console dot log the machine,

132
00:10:11.016 --> 00:10:14.670
we're going to see that we
have our machine over here.

133
00:10:14.670 --> 00:10:16.262
And then transition2,

134
00:10:16.262 --> 00:10:21.052
now we could build up this initial
states with status machine dot initial.

135
00:10:21.052 --> 00:10:24.831
Because we have it over here
in a nice convenient property,

136
00:10:24.831 --> 00:10:27.489
and then we're going to send the events.

137
00:10:27.489 --> 00:10:32.283
Again we are going to be sending
a FETCH event and so what happens is,

138
00:10:32.283 --> 00:10:34.650
it takes us to the loading state.

139
00:10:34.650 --> 00:10:40.373
So this is going to work exactly
the same way as our switch statements.

140
00:10:40.373 --> 00:10:44.843
And it's going to default to
staying at the same state

141
00:10:44.843 --> 00:10:49.226
if there are no transitions to find for
that events.

142
00:10:49.226 --> 00:10:53.722
So whichever way you decide to
write it without a library,

143
00:10:53.722 --> 00:10:59.436
whether you're using an object or
a switch statements, it's up to you.

144
00:10:59.436 --> 00:11:03.980
The question was,
is the transition function a reducer?

145
00:11:03.980 --> 00:11:08.451
Yes, the transition function
is essentially a reducer.

146
00:11:08.451 --> 00:11:12.167
So if you're used to Redux or
view X or NGR X or

147
00:11:12.167 --> 00:11:17.390
any of those other libraries
that make use of these reducers,

148
00:11:17.390 --> 00:11:21.218
then it's pretty much
the exact same thing.

149
00:11:21.218 --> 00:11:23.276
Some of the differences though,

150
00:11:23.276 --> 00:11:27.992
are that while it does return the next
date in response to a state in an event.

151
00:11:27.992 --> 00:11:32.728
It could also contain other things too
which we're going to be seeing in the X

152
00:11:32.728 --> 00:11:33.247
state.

153
00:11:33.247 --> 00:11:37.908
And it sort of has this specific structure
where this state is going to have

154
00:11:37.908 --> 00:11:42.284
some sort of field that represents
the finite states of the machine.

155
00:11:42.284 --> 00:11:46.970
And of course it could represent
other things as well but

156
00:11:46.970 --> 00:11:50.869
conceptually you can
think of it as a reducer.

157
00:11:53.790 --> 00:12:00.077
So again, going over the building blocks
of what a finite state machine is.

158
00:12:00.077 --> 00:12:04.718
Now that we seen it in code,
let's take a look at it visually.

159
00:12:04.718 --> 00:12:10.765
So we have the idle state and
that was our initial state.

160
00:12:12.205 --> 00:12:17.653
So, we also have a symbol
that represents that

161
00:12:17.653 --> 00:12:23.809
this is an initial state,
now we also have loading.

162
00:12:23.809 --> 00:12:31.950
And so you could see these
states are represented by boxes.

163
00:12:31.950 --> 00:12:37.823
So now if we want to describe how the idle
state moves to the loading states.

164
00:12:37.823 --> 00:12:42.925
In state machine notation we would
just draw an arrow like this and

165
00:12:42.925 --> 00:12:47.390
then we would add the events
that causes the transition.

166
00:12:47.390 --> 00:12:52.550
So, in this case, we have a fetch event.

167
00:12:52.550 --> 00:12:56.014
So now the graphical
representation of this

168
00:12:56.014 --> 00:13:01.040
logic is exactly the same as
we're expressing it in code.

169
00:13:01.040 --> 00:13:04.826
Whether it's using the object or
using the the switch statements.

170
00:13:04.826 --> 00:13:07.891
And so to follow this,
you would first look for

171
00:13:07.891 --> 00:13:10.728
the initial state in this case it's idle.

172
00:13:10.728 --> 00:13:14.341
And then depending on what
events the machine receives,

173
00:13:14.341 --> 00:13:16.152
you would follow the arrow.

174
00:13:16.152 --> 00:13:19.884
So let's say we're in idle and
the fetch event happened.

175
00:13:19.884 --> 00:13:24.015
So we're going to follow this
arrow from idle to loading because

176
00:13:24.015 --> 00:13:27.007
that's where the fetch
transition takes us.

177
00:13:27.007 --> 00:13:31.300
So now if we get a fetch
event in the loading states

178
00:13:31.300 --> 00:13:34.250
then nothing is going to happen.

179
00:13:34.250 --> 00:13:38.628
And the reason nothing is going to happen
is because there's no outgoing transitions

180
00:13:38.628 --> 00:13:40.370
from the loading state.

181
00:13:40.370 --> 00:13:44.990
And so this is exactly what the finite
state machine really helps with,

182
00:13:44.990 --> 00:13:48.920
is preventing impossible states and
transitions.

183
00:13:48.920 --> 00:13:53.980
If instead we had this arrow just floating
randomly and going to the loading state.

184
00:13:53.980 --> 00:13:58.160
Then there are the chance that we
could have unintended transitions.

185
00:13:58.160 --> 00:14:03.454
But because this is a well defined visual
formalism, we know that it's impossible.

186
00:14:03.454 --> 00:14:07.852
For a fetch events to do anything
when we're in the loading states,

187
00:14:07.852 --> 00:14:11.880
just looking at the graph we
could see nothing should happen.

