WEBVTT

1
00:00:00.134 --> 00:00:05.085
In this exercise, we're going to be
adding a few guarded transitions.

2
00:00:05.085 --> 00:00:10.355
And so, these guarded transitions
are going to ensure that we go to

3
00:00:10.355 --> 00:00:16.958
the right states, and or perform the right
actions only if the conditions are met.

4
00:00:16.958 --> 00:00:21.310
The simplest one to start with is
going to be this volume over here.

5
00:00:21.310 --> 00:00:26.407
So we want to make sure that when we send
a VOLUME event, which isn't in the UI,

6
00:00:26.407 --> 00:00:30.891
but you could send it directly to
the service, just via the console,

7
00:00:30.891 --> 00:00:35.170
we want to make sure that the volume
is only between zero and 10.

8
00:00:35.170 --> 00:00:38.867
And so you could add a guard to do that.

9
00:00:38.867 --> 00:00:44.663
Another guard that we
want to add is a TOGGLE.

10
00:00:44.663 --> 00:00:52.144
And so, this light.toggle is for,
I'll just go over here, guards.

11
00:00:52.144 --> 00:00:57.187
The light.5oggle is for
this heart ,so this is for disliking but

12
00:00:57.187 --> 00:01:02.229
we want to be able to send a light.toggle
event from this heart that

13
00:01:02.229 --> 00:01:07.292
will either like or unlike it,
depending on which one is clicked.

14
00:01:07.292 --> 00:01:12.135
If we go back to our main js,
I just want to show you

15
00:01:12.135 --> 00:01:16.640
that transitions can
also be in the rate too.

16
00:01:16.640 --> 00:01:21.181
So if this transition,
the condition for it is not met,

17
00:01:21.181 --> 00:01:26.310
then we could fall through and
choose a different transition.

18
00:01:26.310 --> 00:01:28.787
So we could say, target,

19
00:01:30.754 --> 00:01:34.960
Let's just having an error state,
so error.

20
00:01:34.960 --> 00:01:38.990
And then let me just show you
how these works real quick.

21
00:01:38.990 --> 00:01:41.000
Let's move the counts below 100.

22
00:01:41.000 --> 00:01:46.951
And so when we skip, now we're in
the error state because that condition or

23
00:01:46.951 --> 00:01:50.351
that guarded transition falls through and

24
00:01:50.351 --> 00:01:54.428
it picks the next one,
since this one wasn't met.

25
00:01:54.428 --> 00:02:00.239
And these are going to be picked
in the order that you specify.

26
00:02:00.239 --> 00:02:02.075
So in the guards challenge,

27
00:02:02.075 --> 00:02:06.780
we are going to be doing the exact
same thing here for 'LIKE.TOGGLE'.

28
00:02:06.780 --> 00:02:10.443
Now there's one more thing to explain for
this exercise and

29
00:02:10.443 --> 00:02:13.667
that's something called
an always transition, or

30
00:02:13.667 --> 00:02:17.340
it's called either an eventless or
an always transition.

31
00:02:17.340 --> 00:02:19.857
We're gonna call it
an eventless transition, but

32
00:02:19.857 --> 00:02:22.674
it's specified with always,
sorry for the confusion.

33
00:02:22.674 --> 00:02:27.581
And so, an eventless transition
is a transition that

34
00:02:27.581 --> 00:02:32.166
is immediately taken when
the condition is true.

35
00:02:32.166 --> 00:02:36.071
So it doesn't need an event to activate,

36
00:02:36.071 --> 00:02:41.091
it's just something that
whenever something causes

37
00:02:41.091 --> 00:02:47.352
the state to change it's going to
be taken if the condition is met.

38
00:02:47.352 --> 00:02:52.002
So, for instance,
instead of this skip over here,

39
00:02:52.002 --> 00:02:54.972
let's say that I have an always.

40
00:02:54.972 --> 00:03:01.635
And I'm always going to,
if the context.count is greater than 100,

41
00:03:01.635 --> 00:03:05.619
then I'm going to go
to the success states.

42
00:03:05.619 --> 00:03:10.803
So notice, this is in the loading state,
and this transition will

43
00:03:10.803 --> 00:03:15.897
now only always be taken if something
causes the state to change or

44
00:03:15.897 --> 00:03:21.283
like when we initially entered
the state and this condition is true.

45
00:03:21.283 --> 00:03:28.524
So, right now,
I'm just going to put a success here.

46
00:03:28.524 --> 00:03:31.904
All right, so right now,
it stays in the loading state,

47
00:03:31.904 --> 00:03:36.144
because that eventless transition
specified via always is not taken.

48
00:03:36.144 --> 00:03:38.204
So now, if I change this to 101,

49
00:03:38.204 --> 00:03:42.345
now you're going to see that it
immediately goes to the success state.

50
00:03:42.345 --> 00:03:45.473
And so that's why eventless
transitions are useful,

51
00:03:45.473 --> 00:03:48.536
because they don't require
events to be activated.

52
00:03:48.536 --> 00:03:52.116
They're just automatically taken
when some condition is true.

53
00:03:52.116 --> 00:03:57.561
So you're going to be using that in
this exercise to go to the pause

54
00:03:57.561 --> 00:04:02.920
state whenever the elapsed value
is greater than the duration.

