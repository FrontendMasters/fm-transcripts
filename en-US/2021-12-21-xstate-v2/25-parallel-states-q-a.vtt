WEBVTT

1
00:00:00.668 --> 00:00:04.272
So, one of the questions might
be why would we do that?

2
00:00:04.272 --> 00:00:08.435
And honestly, it's only an organizational
thing and keeping things nice and

3
00:00:08.435 --> 00:00:09.138
organized.

4
00:00:09.138 --> 00:00:12.216
Just so that you could clearly see, okay,

5
00:00:12.216 --> 00:00:15.987
these are the responsibility
of this player state.

6
00:00:15.987 --> 00:00:20.456
And these transitions are the
responsibility of this volume state,

7
00:00:20.456 --> 00:00:22.622
anything that happens in there?

8
00:00:22.622 --> 00:00:24.576
All right, one question asked in the chat.

9
00:00:24.576 --> 00:00:29.376
Is it better to use final
in nested states and

10
00:00:29.376 --> 00:00:34.318
on exit?or on done rather
than target in ID?

11
00:00:34.318 --> 00:00:35.121
And the answer is yes.

12
00:00:35.121 --> 00:00:38.195
And we're gonna be taking a look
at that at the next section, or

13
00:00:38.195 --> 00:00:39.771
one question asked in the chat.

14
00:00:39.771 --> 00:00:44.068
Was in order to make it a bit more
readable is it recommended to split

15
00:00:44.068 --> 00:00:48.849
the child machines or the child states
into their own functions or files?

16
00:00:48.849 --> 00:00:52.205
And honestly, this is up to you.

17
00:00:52.205 --> 00:00:55.167
Think about how you would
structure your own code base.

18
00:00:55.167 --> 00:00:59.194
Since this is just an object,
you could separate these outs into

19
00:00:59.194 --> 00:01:03.835
separate variables and just call it
volume state or something like that.

20
00:01:03.835 --> 00:01:06.403
And then import it into this file and so

21
00:01:06.403 --> 00:01:09.625
that might make things
a little bit more clear.

22
00:01:09.625 --> 00:01:14.748
Also if you can't do that then you could
just basically collapse everything and

23
00:01:14.748 --> 00:01:17.816
get a really nice higher
level overview of how.

24
00:01:17.816 --> 00:01:20.630
Just everything that can happen.

25
00:01:20.630 --> 00:01:23.309
And so while yes, this is big,

26
00:01:23.309 --> 00:01:29.302
try to imagine this in code without
a state machine or a state charts.

27
00:01:29.302 --> 00:01:29.805
Over here.

28
00:01:29.805 --> 00:01:32.613
I could take a glance at everything and

29
00:01:32.613 --> 00:01:38.600
understand what the different states of my
app can be in such as loading or ready.

30
00:01:38.600 --> 00:01:42.461
And what can happen in
each of those states.

31
00:01:42.461 --> 00:01:47.171
And so I also see that I'm handling
the player in the volume if I

32
00:01:47.171 --> 00:01:50.172
also handle something else over here.

33
00:01:50.172 --> 00:01:55.360
Then I have a really nice higher
level overview of those things.

34
00:01:55.360 --> 00:01:57.792
And I also have a way of saying or

35
00:01:57.792 --> 00:02:03.419
of seeing what transitions in events
are handled in the state machine.

36
00:02:03.419 --> 00:02:07.578
So I already have a really good
overview of all the features of my

37
00:02:07.578 --> 00:02:10.571
application just by
looking at this object.

38
00:02:10.571 --> 00:02:14.835
And if your object is big, that means
that you have a lot of features and

39
00:02:14.835 --> 00:02:19.624
you have a lot of different ways that
users can interact with the application.

40
00:02:19.624 --> 00:02:25.186
Which definitely not a bad thing but
yes having that organized is something

41
00:02:25.186 --> 00:02:30.667
that's up to you and something that
of course is always beneficial to do.

42
00:02:30.667 --> 00:02:35.267
So yeah I do recommend if you want
to split it up into separate files

43
00:02:35.267 --> 00:02:38.121
that's up to you and in a future lesson.

44
00:02:38.121 --> 00:02:42.551
We're gonna talk bout just the idea
of splitting things up into

45
00:02:42.551 --> 00:02:46.325
separate machines as well if
you wanna do it that way.

46
00:02:46.325 --> 00:02:51.388
And that's essentially the same idea
as splitting it up into separate files

47
00:02:51.388 --> 00:02:56.228
the follow up question is will you be
able to get a Serializable machine.

48
00:02:56.228 --> 00:03:00.788
If we're exporting this from
a different file into this machine and

49
00:03:00.788 --> 00:03:02.071
the answer is yes.

50
00:03:02.071 --> 00:03:07.065
And that's because in our player machine
we are collecting all of those and

51
00:03:07.065 --> 00:03:10.802
we are basically creating
a runtime big objects value.

52
00:03:10.802 --> 00:03:13.129
Of all of the different states and

53
00:03:13.129 --> 00:03:17.377
transitions regardless of where
they live in our code base.

54
00:03:17.377 --> 00:03:22.423
And that is something that, for example,
if you're using X state inspect.

55
00:03:22.423 --> 00:03:27.220
That's something that is sent
over the wire to the inspector,

56
00:03:27.220 --> 00:03:31.665
and it's still going to be able
to see the entire machine.

57
00:03:31.665 --> 00:03:36.425
So you know what, I'll just do
a Small little example over here.

58
00:03:36.425 --> 00:03:39.947
We have an object over here that's
not really reading anything that

59
00:03:39.947 --> 00:03:40.948
we need to import.

60
00:03:40.948 --> 00:03:46.862
So I'm just gonna copy and
paste this and call this volume state.

61
00:03:46.862 --> 00:03:50.392
And we're gonna put it over here so

62
00:03:50.392 --> 00:03:54.543
volumes state equals that big objects.

63
00:03:54.543 --> 00:03:57.925
And you can imagine that this
might live in a separate file.

64
00:03:57.925 --> 00:04:02.249
But now, we see that we have
volume as volume state, and

65
00:04:02.249 --> 00:04:05.754
this is going to be
visualized just the same.

66
00:04:05.754 --> 00:04:09.035
So we could even, for example,

67
00:04:09.035 --> 00:04:13.660
copy all of this and
put it in our visualizer.

68
00:04:16.626 --> 00:04:19.274
And the raise of n is missing, so

69
00:04:19.274 --> 00:04:24.286
I'm just going to comment that
out just for the sake of time.

70
00:04:24.286 --> 00:04:28.334
And so you're going to see that even
though we have that as a separate parts

71
00:04:28.334 --> 00:04:30.571
it's still being visualized the same.

72
00:04:30.571 --> 00:04:33.767
So we have the volume right down here.

73
00:04:33.767 --> 00:04:38.673
[LAUGH] And that's something else
that we also added in there too and

74
00:04:38.673 --> 00:04:39.997
also the player.

75
00:04:39.997 --> 00:04:44.925
We have loading ready with our
playing in paused states and so

76
00:04:44.925 --> 00:04:47.736
it could go between those states.

77
00:04:47.736 --> 00:04:52.200
And we could see just the different
regions that we have in our application.

