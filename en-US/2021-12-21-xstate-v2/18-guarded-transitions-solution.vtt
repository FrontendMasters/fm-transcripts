WEBVTT

1
00:00:00.043 --> 00:00:03.070
In this current exercise,
we had to do a few things.

2
00:00:03.070 --> 00:00:06.438
And I'm gonna start with
the simplest thing first over here,

3
00:00:06.438 --> 00:00:09.106
which is making sure
the volume is within range.

4
00:00:09.106 --> 00:00:14.691
Of course, you could add a condition
over here and apply this in line.

5
00:00:14.691 --> 00:00:20.650
So, the condition function takes two
arguments, the context and the events.

6
00:00:20.650 --> 00:00:25.901
But we want to make sure that this
event level, and we're only focused

7
00:00:25.901 --> 00:00:31.426
on the event level but we wanna make
sure that that's between 0 and 10.

8
00:00:31.426 --> 00:00:35.747
So you can do something like return

9
00:00:35.747 --> 00:00:40.217
event.level is greater than 0 and

10
00:00:40.217 --> 00:00:45.733
event.level is less than or equal to 10.

11
00:00:45.733 --> 00:00:52.522
And so now, when we run this, Guards,

12
00:00:52.522 --> 00:00:57.739
we see over here that
the volume is currently 5.

13
00:00:57.739 --> 00:01:02.704
So if we send a volume level of,
let's say 6, and

14
00:01:02.704 --> 00:01:07.200
they have it conveniently
over there ready,

15
00:01:07.200 --> 00:01:13.021
then we see that the volume changed to 6,
which is great.

16
00:01:13.021 --> 00:01:20.777
So now if we send something like 600,
That is going to keep it at 6.

17
00:01:20.777 --> 00:01:24.595
Now one question might be,
okay, why do we have to have

18
00:01:24.595 --> 00:01:29.585
a guard here where we could just
constrain the volume in assignVolume?

19
00:01:29.585 --> 00:01:31.855
And you definitely can do that.

20
00:01:31.855 --> 00:01:33.357
Here's the difference, though.

21
00:01:33.357 --> 00:01:36.462
If you allow this transition to be taken,

22
00:01:36.462 --> 00:01:42.065
it's going to basically tell the state
machine, this state is changing.

23
00:01:42.065 --> 00:01:46.791
But if the volume isn't changing at all,
then nothing really is changing, so

24
00:01:46.791 --> 00:01:49.737
you're sort of lying
about the state changing.

25
00:01:49.737 --> 00:01:55.803
So, it's just a more concrete way of us
describing that, no, nothing is changing.

26
00:01:55.803 --> 00:01:57.786
We're not changing the state,

27
00:01:57.786 --> 00:02:02.198
we're not running any actions because
the volume is not within range.

28
00:02:02.198 --> 00:02:04.823
And with things like states.can,

29
00:02:04.823 --> 00:02:10.599
which is that useful method that tells you
if a state is able to accept an event,

30
00:02:10.599 --> 00:02:14.554
that is going to be false if
the volume is out of range.

31
00:02:14.554 --> 00:02:16.963
Because it is going to
check this condition and

32
00:02:16.963 --> 00:02:19.940
tell you nothing's gonna
happen if you send that event.

33
00:02:19.940 --> 00:02:24.782
Whereas if we had this in assignVolume,
then it's gonna say yes,

34
00:02:24.782 --> 00:02:26.606
we do accept that event.

35
00:02:26.606 --> 00:02:28.918
But nothing will happen, but

36
00:02:28.918 --> 00:02:33.367
there's no way of you knowing
that nothing will happen.

37
00:02:33.367 --> 00:02:37.784
So the second part that I want
to go over is using an always or

38
00:02:37.784 --> 00:02:44.297
an eventless transition to automatically
go somewhere when some condition is true.

39
00:02:44.297 --> 00:02:47.313
And so we specify that here using always.

40
00:02:47.313 --> 00:02:52.398
And one trick to prevent infinite loops,
because always functions,

41
00:02:52.398 --> 00:02:56.620
or sorry, always transitions
are always gonna be taken,

42
00:02:56.620 --> 00:03:01.209
is that you want to get in the habit
of adding a condition first.

43
00:03:01.209 --> 00:03:06.042
So, add the condition
that the context.elapsed

44
00:03:06.042 --> 00:03:10.765
is greater than or
equal to context.duration.

45
00:03:10.765 --> 00:03:17.166
And so, when that happens,
we want to go to the paused state.

46
00:03:17.166 --> 00:03:19.389
So now when we run this, and

47
00:03:19.389 --> 00:03:25.499
let's say that right now it is currently
playing and we have a minute 40.

48
00:03:25.499 --> 00:03:31.351
And so, let's say that we have something
that changes the elapsed time.

49
00:03:31.351 --> 00:03:36.325
And that thing is gonna be audio.time,
which is this assignTime here.

50
00:03:36.325 --> 00:03:40.718
So, I'm going to send type AUDIO.TIME and

51
00:03:40.718 --> 00:03:47.379
I'm gonna give it a current time,
which is what we have over here.

52
00:03:47.379 --> 00:03:52.350
That current time is gonna be something
really, really high, like 1000,

53
00:03:52.350 --> 00:03:53.621
just trigger this.

54
00:03:53.621 --> 00:03:58.383
And so, yeah,
you have to add service.send.

55
00:03:58.383 --> 00:04:03.429
And so now you see that it immediately
went to the paused state because

56
00:04:03.429 --> 00:04:07.960
it elapsed or the elapsed time
was greater than the duration.

57
00:04:07.960 --> 00:04:13.254
And so, yeah, that's just a useful way

58
00:04:13.254 --> 00:04:19.029
of combining both transitions and guards.

59
00:04:19.029 --> 00:04:24.621
And using that within always is
a really useful pattern because this,

60
00:04:24.621 --> 00:04:29.659
again, doesn't have to be
dependent on any specific events.

61
00:04:29.659 --> 00:04:36.279
So now if we go to main.final, you could
take a look at all of these implemented.

62
00:04:36.279 --> 00:04:41.612
We have this which is always
going to the paused state when

63
00:04:41.612 --> 00:04:46.733
the elapsed value is greater
than the duration value.

64
00:04:46.733 --> 00:04:50.477
And over here we also have the guards for
LIKE.TOGGLE.

65
00:04:50.477 --> 00:04:55.932
So it's going to check this one first and
say, if the like status is liked,

66
00:04:55.932 --> 00:04:59.310
and we're using the raise
action here again,

67
00:04:59.310 --> 00:05:04.518
we raised the unlike event which is
going to cause us to unlike the song.

68
00:05:04.518 --> 00:05:06.577
And if the like status is unliked,

69
00:05:06.577 --> 00:05:10.562
then we raise the like event, so
we're just going back and forth.

70
00:05:10.562 --> 00:05:14.802
Now, some of you observant ones
might look at this and be like,

71
00:05:14.802 --> 00:05:17.922
isn't this sort of a state
machine on its own?

72
00:05:17.922 --> 00:05:21.605
And the answer is yes, and so
this is also an exercise to the reader.

73
00:05:21.605 --> 00:05:26.190
You could also implement
this as a separate parallel

74
00:05:26.190 --> 00:05:30.363
state once we get to that
in a couple of lessons.

75
00:05:30.363 --> 00:05:36.358
So, the final behavior over here should
be, I'll just show it to you right here.

76
00:05:36.358 --> 00:05:41.394
So yeah, this is the desired behavior,
if you're able to implement it,

77
00:05:41.394 --> 00:05:44.254
where it goes between liked and unliked.

78
00:05:44.254 --> 00:05:49.674
And so also we have the guards preventing
the volume from getting too loud and

79
00:05:49.674 --> 00:05:51.960
also skipping ahead, or yeah,

80
00:05:51.960 --> 00:05:58.071
going to the paused state when the elapsed
time is greater than the current duration.

81
00:05:58.071 --> 00:06:02.952
One of the questions asked was,
when we apply the guards,

82
00:06:02.952 --> 00:06:07.547
so cond, how does that look
in the actual state chart?

83
00:06:07.547 --> 00:06:12.231
So we could visualize that here or here.

84
00:06:12.231 --> 00:06:17.724
So let me just make an example over here,

85
00:06:17.724 --> 00:06:22.743
so const machine = createMachine.

86
00:06:22.743 --> 00:06:28.731
All right, so
let's say that we have a loading state.

87
00:06:28.731 --> 00:06:34.881
And on some event,
we only want to do something

88
00:06:34.881 --> 00:06:39.939
if the condition is true, so loaded.

89
00:06:39.939 --> 00:06:45.705
So we could say cond: 'dataReceived',
sorry,

90
00:06:45.705 --> 00:06:50.587
'dataValid', and target: 'loaded'.

91
00:06:50.587 --> 00:06:56.320
So this is how it's going to look and this
is how it's represented in a state chart.

92
00:06:56.320 --> 00:06:59.030
We have the event here, some event, and

93
00:06:59.030 --> 00:07:03.505
we have the guard here that's
represented using these brackets.

94
00:07:03.505 --> 00:07:05.960
And so this is typical for
state chart notation.

95
00:07:05.960 --> 00:07:10.484
So whenever you see those brackets,
just realize that this event is a guarded

96
00:07:10.484 --> 00:07:13.280
transition or
is part of a guarded transition.

