WEBVTT

1
00:00:00.000 --> 00:00:04.815
For now, the simplest way to get
started with actions is to actually

2
00:00:04.815 --> 00:00:06.938
just implement them inline.

3
00:00:06.938 --> 00:00:09.386
So for example, on the loaded state,

4
00:00:09.386 --> 00:00:13.454
we see that we have to add an action
here to assign the song data.

5
00:00:13.454 --> 00:00:19.056
And so for now,
I'm just going to say actions,

6
00:00:19.056 --> 00:00:24.800
and I could specify this
as an inline function and

7
00:00:24.800 --> 00:00:29.859
to say console.log assigning song data.

8
00:00:29.859 --> 00:00:34.260
And so now when I go to actions, it says,

9
00:00:34.260 --> 00:00:38.662
assigning song data because that loaded

10
00:00:38.662 --> 00:00:43.462
event is being sent at
the bottom over here.

11
00:00:46.443 --> 00:00:53.001
Now, what we could do is we could
serialize this and say that instead,

12
00:00:53.001 --> 00:00:59.133
we just want this to be a named action and
call it assignSongData.

13
00:00:59.133 --> 00:01:02.410
And then we could specify
it in withConfig over here.

14
00:01:02.410 --> 00:01:09.634
So we could say, assignSongData and
just have the same thing,

15
00:01:09.634 --> 00:01:13.873
console.log assigning song data.

16
00:01:13.873 --> 00:01:18.730
And so same thing should be happening.

17
00:01:18.730 --> 00:01:22.160
Just make sure, yep, assigning song data.

18
00:01:22.160 --> 00:01:27.040
So now that's something that you could do
for the rest of the actions over here.

19
00:01:27.040 --> 00:01:30.041
Of course, an entry action is
going to be the same format,

20
00:01:30.041 --> 00:01:32.280
just with a different property name.

21
00:01:32.280 --> 00:01:36.215
We have entry actions, or sorry,

22
00:01:36.215 --> 00:01:40.294
not actions, but just playAudio.

23
00:01:40.294 --> 00:01:43.215
And so same thing with exit.

24
00:01:44.652 --> 00:01:48.420
Instead of play, we have pauseAudio.

25
00:01:48.420 --> 00:01:52.618
So we have assigning song data and,

26
00:01:54.733 --> 00:01:57.865
We have this playAudio and
pauseAudio action.

27
00:01:57.865 --> 00:02:02.561
We're not console.logging it yet, but you
could see over here that we subscribed and

28
00:02:02.561 --> 00:02:04.631
we're logging the state.actions.

29
00:02:04.631 --> 00:02:11.775
So we should see that, okay, when the song
is loaded, we're doing two actions.

30
00:02:11.775 --> 00:02:15.355
We're assigning the song data,
and we're playing the audio.

31
00:02:15.355 --> 00:02:21.711
So now if I pause, one action is gonna
happen, which is that pauseAudio action.

32
00:02:21.711 --> 00:02:26.405
And again, you could specify
the implementation details

33
00:02:26.405 --> 00:02:29.093
inside of the actions over here.

34
00:02:29.093 --> 00:02:36.950
Now there was one event that is
supposed to cause multiple actions.

35
00:02:36.950 --> 00:02:38.938
Let's see how we could do that.

36
00:02:38.938 --> 00:02:43.023
So because we specify
our actions in an array,

37
00:02:43.023 --> 00:02:46.913
we could have something like dislike song.

38
00:02:46.913 --> 00:02:49.733
And we could also raise the skip event.

39
00:02:49.733 --> 00:02:53.675
Because that's a built-in event,

40
00:02:53.675 --> 00:03:00.296
we could just specify it right over here,
so raise type SKIP.

41
00:03:00.296 --> 00:03:04.650
So let's see what happens
if we dislike the song.

42
00:03:04.650 --> 00:03:06.000
Look at our array.

43
00:03:06.000 --> 00:03:12.996
We have dislikeSong, and
we also have pauseAudio.

44
00:03:12.996 --> 00:03:15.277
So what exactly happened over there?

45
00:03:15.277 --> 00:03:20.209
Well, this skip event takes
us to the loading states,

46
00:03:20.209 --> 00:03:23.864
and this should actually be .loading.

47
00:03:25.295 --> 00:03:29.447
And the loading state, so
I'm gonna dislike it again.

48
00:03:30.667 --> 00:03:34.641
The loading state goes out
of the playing state, so

49
00:03:34.641 --> 00:03:40.014
this exit action is gonna happen as well,
and so we have pauseAudio.

50
00:03:40.014 --> 00:03:45.126
Now, this really highlights
the value of why raise events

51
00:03:45.126 --> 00:03:51.382
are useful is because if we were to
have skip functionality elsewhere,

52
00:03:51.382 --> 00:03:57.974
like we have over here in two places,
both with the skip event and dislike.

53
00:03:57.974 --> 00:04:00.560
Now we don't have to copy and
paste that logic.

54
00:04:00.560 --> 00:04:05.439
Instead, we could represent it
in a more abstract and dry way,

55
00:04:05.439 --> 00:04:11.422
which is to say when the dislike event
happens, we want to dislike the song and

56
00:04:11.422 --> 00:04:17.070
we also want this machine to behave
as if a skip event was sent to it.

57
00:04:17.070 --> 00:04:21.240
And so it sends itself a skip event,
and it does all the logic there.

58
00:04:21.240 --> 00:04:26.158
So now it becomes really
easy to centralize

59
00:04:26.158 --> 00:04:30.673
this skip logic into this transition.

60
00:04:30.673 --> 00:04:33.400
And so now you don't have to
repeat yourself everywhere.

61
00:04:33.400 --> 00:04:36.961
So let's say that we wanted
skip to do something else.

62
00:04:36.961 --> 00:04:38.356
We want to add actions.

63
00:04:38.356 --> 00:04:40.373
We want to add a condition to the skip.

64
00:04:40.373 --> 00:04:45.425
We could do it all in here instead of
having to copy and paste all of those

65
00:04:45.425 --> 00:04:51.360
different things inside the dislike
action or the dislike transition as well.

66
00:04:51.360 --> 00:04:53.697
I'm not going to do the rest, but

67
00:04:53.697 --> 00:04:58.220
you could take a look at main.final.js and
see how it's done.

68
00:04:58.220 --> 00:05:02.500
One common pattern with XState is that for

69
00:05:02.500 --> 00:05:10.480
things that might take multiple objects,
you can pass in an array or not.

70
00:05:10.480 --> 00:05:15.938
I recommend you be consistent,
though, in passing an array just so

71
00:05:15.938 --> 00:05:21.318
that it becomes easier for
you to add another action if you desire.

72
00:05:23.804 --> 00:05:27.358
So looking at the rest of this,
it's all pretty much the same thing.

73
00:05:27.358 --> 00:05:29.263
We have our actions over here.

74
00:05:29.263 --> 00:05:34.070
Again, put them in an array if you'd like,
which makes multiple actions easier.

75
00:05:34.070 --> 00:05:36.208
We have raise SKIP.

76
00:05:36.208 --> 00:05:38.656
And because this is
an event without payload,

77
00:05:38.656 --> 00:05:40.804
we are representing it just as a string.

78
00:05:40.804 --> 00:05:42.989
But if you want to be consistent,

79
00:05:42.989 --> 00:05:47.059
you could also just provide
the entire event object in there.

80
00:05:47.059 --> 00:05:51.689
And then we have a bunch of actions
over here, and this is something that

81
00:05:51.689 --> 00:05:55.790
we're going to fill in for
the most parts in the next exercise.

