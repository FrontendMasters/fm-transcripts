WEBVTT

1
00:00:00.280 --> 00:00:04.855
All right, so let's add final states
into our application just to clean

2
00:00:04.855 --> 00:00:09.730
things up a little bit, since we are
targeting this loading state with an ID,

3
00:00:09.730 --> 00:00:15.220
and we want to avoid doing that just to
model things a little bit more cleanly.

4
00:00:15.220 --> 00:00:18.823
So first things first,
instead of going to loading,

5
00:00:18.823 --> 00:00:24.600
let's make a finished state right over
here, and let's target that state instead.

6
00:00:26.060 --> 00:00:31.976
So what's happening over here is when
the elapsed is greater than the duration,

7
00:00:31.976 --> 00:00:36.415
now we're saying okay,
this song is now gonna be finished.

8
00:00:36.415 --> 00:00:41.246
And by doing that we are now just
separating from the fact that

9
00:00:41.246 --> 00:00:43.527
we have this loading state.

10
00:00:43.527 --> 00:00:47.574
So now we don't even need to know about
this loading state because it becomes

11
00:00:47.574 --> 00:00:49.861
the responsibility of the player states.

12
00:00:49.861 --> 00:00:53.580
So if we want to change this
loading state and maybe just,

13
00:00:53.580 --> 00:00:58.694
we have a song already cached or we want
to replay the song if we're on repeat and

14
00:00:58.694 --> 00:01:00.800
we don't need to load it again.

15
00:01:00.800 --> 00:01:05.624
Then none of those details matter
because all we're saying is, hey,

16
00:01:05.624 --> 00:01:07.841
parent state, I'm finished.

17
00:01:07.841 --> 00:01:12.155
And so we specify that with
type: [COUGH] 'final'.

18
00:01:15.287 --> 00:01:20.224
All right, so now we are going to make
sure that everything still works.

19
00:01:20.224 --> 00:01:25.770
And we're going to go to 07-final-states.

20
00:01:25.770 --> 00:01:32.336
[COUGH] So now we see that play and
pause still work.

21
00:01:32.336 --> 00:01:36.650
But we do want to trigger this
when elapsed is greater than or

22
00:01:36.650 --> 00:01:38.130
equal to duration.

23
00:01:38.130 --> 00:01:42.527
And again, the way that this happens
is using the AUDIO.TIME event.

24
00:01:42.527 --> 00:01:48.310
So, if we do service.send,
type: 'AUDIO.TIME',

25
00:01:48.310 --> 00:01:54.940
and we give it a currentTime
of something big, like 1,000.

26
00:01:56.880 --> 00:02:01.760
What should happen is it should go back
to the loading state, which it does.

27
00:02:02.900 --> 00:02:06.420
And of course we could go
from loading to loaded.

28
00:02:06.420 --> 00:02:12.050
I'm just gonna copy this, and
see that it goes back there.

29
00:02:12.050 --> 00:02:13.930
So our final state is working.

