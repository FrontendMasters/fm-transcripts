WEBVTT

1
00:00:00.000 --> 00:00:03.776
One of the questions asked,
was raised, sounds like a way for

2
00:00:03.776 --> 00:00:06.837
a child state to send events
to the parent states.

3
00:00:06.837 --> 00:00:08.772
Can I use it for that, too?

4
00:00:08.772 --> 00:00:10.579
The short answer is yes, and

5
00:00:10.579 --> 00:00:15.491
that's exactly what we're going to be
doing in the compound states lesson.

6
00:00:15.491 --> 00:00:18.471
And so again, raising an event makes it so

7
00:00:18.471 --> 00:00:23.837
that even if the child is handling
a different event but it needs the machine

8
00:00:23.837 --> 00:00:29.058
to behave as if another event handled
in potentially a different state.

9
00:00:29.058 --> 00:00:34.615
But with handle it then raising event
basically lets you abstract that away.

10
00:00:34.615 --> 00:00:39.516
So updates should not be performed
solely on the value of the target,

11
00:00:39.516 --> 00:00:42.654
they should only be
performed on an action.

12
00:00:42.654 --> 00:00:47.485
So I'm interpreting updates to
mean what is shown in the UI, and

13
00:00:47.485 --> 00:00:50.355
also what side effects are executed.

14
00:00:50.355 --> 00:00:54.362
Side effects which are things
that are done externally,

15
00:00:54.362 --> 00:00:57.209
those should always be done in actions.

16
00:00:57.209 --> 00:00:59.431
Now the way that UI changes,

17
00:00:59.431 --> 00:01:04.069
we could have just what we
consider to be implicit actions.

18
00:01:04.069 --> 00:01:09.095
And react, and other frameworks
sort of just abstract this away for

19
00:01:09.095 --> 00:01:13.590
you, because anytime we're
changing something in the UI,

20
00:01:13.590 --> 00:01:16.777
that is actually an action or side effect.

21
00:01:16.777 --> 00:01:21.884
It's just that we abstract that
away in a declarative view layer,

22
00:01:21.884 --> 00:01:27.090
which is what react and view and
other popular frameworks provide.

23
00:01:27.090 --> 00:01:31.709
So over here we're just synchronizing
the UI to the state, and

24
00:01:31.709 --> 00:01:36.602
that's based on the actual state,
like Loading, Play, Pause.

25
00:01:36.602 --> 00:01:38.801
Now if we want to get really granular,

26
00:01:38.801 --> 00:01:42.239
we could do something like when
we enter the loading state,

27
00:01:42.239 --> 00:01:47.014
show the Loading button when we exit the
loading state, hide the loading button.

28
00:01:47.014 --> 00:01:50.050
But that's gonna get very
verbose very quickly.

29
00:01:50.050 --> 00:01:53.844
And so that's, again,
why frameworks exist, and

30
00:01:53.844 --> 00:01:59.292
why right now we're just synchronizing
the state with those attributes.

31
00:01:59.292 --> 00:02:04.069
So it's up to you to decide
whether you want to represent

32
00:02:04.069 --> 00:02:09.163
updates as actions, or
as just synchronizing with state.

33
00:02:09.163 --> 00:02:16.236
But yeah, just keep in mind that external
side effects should be done in actions,

34
00:02:16.236 --> 00:02:20.541
or actions executed in
sequence will Raise skip,

35
00:02:20.541 --> 00:02:24.860
only start executing after
dislike song is done.

36
00:02:24.860 --> 00:02:29.504
So, yeah, the way that this works,
and, in fact,

37
00:02:29.504 --> 00:02:33.420
I'm gonna take this and I'm gonna copy it.

38
00:02:33.420 --> 00:02:38.773
And we are going to put this
inside the visualizer so

39
00:02:38.773 --> 00:02:42.517
that we could just take a look at it.

40
00:02:42.517 --> 00:02:49.541
Let's import Raise from
next day live actions.

41
00:02:50.583 --> 00:02:55.321
All right, so the way that the actions
are going to be executed, for

42
00:02:55.321 --> 00:03:00.644
example, when we're in the loading state,
and the loaded event happens,

43
00:03:00.644 --> 00:03:05.910
now we're in the playing states, and
let's say we want to skip this song.

44
00:03:05.910 --> 00:03:09.157
What's gonna happen is that skip song,

45
00:03:09.157 --> 00:03:15.085
because it's a transition action,
that's going to be executed first.

46
00:03:15.085 --> 00:03:19.191
And since we're exiting
the playing states,

47
00:03:19.191 --> 00:03:23.302
now the Pause Audio action
is going to happen.

48
00:03:23.302 --> 00:03:28.134
I'm pretty sure, and
also you should not be

49
00:03:28.134 --> 00:03:32.714
super dependent on the order of actions.

50
00:03:32.714 --> 00:03:37.499
Assume that the actions are going to be
run at the same time even though they're

51
00:03:37.499 --> 00:03:42.158
not run concurrently, just don't depend
too much on the order of actions.

52
00:03:42.158 --> 00:03:47.145
If you do want actions to run in sequence,
like this action needs to run before this

53
00:03:47.145 --> 00:03:51.939
one, then that's something that should
be represented in separate states.

54
00:03:51.939 --> 00:03:57.715
So that it is 100% clear and precise
which actions are going to execute when.

55
00:03:57.715 --> 00:04:03.316
Another question, I'm curious why X state
has many ways to do the same thing.

56
00:04:03.316 --> 00:04:06.996
It seems there's a preferred way,
so why allow so

57
00:04:06.996 --> 00:04:11.828
many ways such as inline actions
versus using with config, etc.

58
00:04:11.828 --> 00:04:15.670
So part of this is just
the evolution of the X state.

59
00:04:15.670 --> 00:04:19.910
It's a state machine and state chart's
library that's about six years old.

60
00:04:19.910 --> 00:04:23.676
So it's gone through a lot of iteration,

61
00:04:23.676 --> 00:04:28.635
and also it's about the purpose
of what you use it for.

62
00:04:28.635 --> 00:04:34.985
So X state is meant to be like this hybrid
of allowing you to model your states and

63
00:04:34.985 --> 00:04:39.233
your logic, and
also allowing you to implement it.

64
00:04:39.233 --> 00:04:41.272
So just like we're doing in this lesson,

65
00:04:41.272 --> 00:04:44.203
we're implementing our actions
in the nice and quick way.

66
00:04:44.203 --> 00:04:48.994
Like, I honestly appreciate that I
could just type in whatever action,

67
00:04:48.994 --> 00:04:51.909
and worry about the implementation later.

68
00:04:51.909 --> 00:04:56.591
Because this is something that
can be immediately visualized,

69
00:04:56.591 --> 00:05:01.010
handed off to someone without
having to think I actually

70
00:05:01.010 --> 00:05:05.864
didn't implement that yet so
I can't share with you the diagram or

71
00:05:05.864 --> 00:05:09.786
the model that we're gonna
be programming against.

72
00:05:09.786 --> 00:05:14.777
So, I also want to say, too,
that if X state only allowed one way,

73
00:05:14.777 --> 00:05:16.751
it would be very verbose.

74
00:05:16.751 --> 00:05:21.814
So for example, actions, let's say
that every action required a type,

75
00:05:21.814 --> 00:05:24.754
which this is what it's converted to, and

76
00:05:24.754 --> 00:05:28.529
the actions can have multiple
actions inside of them.

77
00:05:28.529 --> 00:05:32.767
So this is how you would have
to type everything, and so for

78
00:05:32.767 --> 00:05:37.785
example this target, or yeah,
the target is already playing this,

79
00:05:37.785 --> 00:05:40.223
you'd have to put it in an array.

80
00:05:40.223 --> 00:05:44.013
So I do see the benefit of
staying consistent, and

81
00:05:44.013 --> 00:05:47.724
that's something that
I've heard in the past.

82
00:05:47.724 --> 00:05:52.340
However, as a prototyping tool,
that becomes a friction point.

83
00:05:52.340 --> 00:05:57.269
And so that's why X state does
have a couple of different ways of

84
00:05:57.269 --> 00:05:59.039
doing the same thing.

85
00:05:59.039 --> 00:06:05.382
In the future with X state version 5 and
other helper libraries on top of X state,

86
00:06:05.382 --> 00:06:11.091
it's going to make it easier to enforce
a single way of doing something.

87
00:06:11.091 --> 00:06:14.453
And also,
we are going to be updating the docs and

88
00:06:14.453 --> 00:06:19.291
we're gradually doing so already,
where we only emphasize one way of

89
00:06:19.291 --> 00:06:24.137
doing things such as typing your actions,
or putting your states in.

90
00:06:24.137 --> 00:06:29.135
But the key is that we want you to
be able to move fast with actually

91
00:06:29.135 --> 00:06:33.487
modeling your application,
instead of having to drown

92
00:06:33.487 --> 00:06:37.670
yourself in a bunch of syntax
that you might not need.

93
00:06:37.670 --> 00:06:39.698
Another question in the chat,

94
00:06:39.698 --> 00:06:43.373
can you recap what Raise does
in how it compares to send?

95
00:06:43.373 --> 00:06:47.433
And so that's something
that we're also going to be

96
00:06:47.433 --> 00:06:52.415
talking about in the last lesson,
or second to the last lesson,

97
00:06:52.415 --> 00:06:57.420
on actors, is that Raise is
a machine sending events to itself.

98
00:06:57.420 --> 00:07:01.400
Send is either a machine
sending an event to itself, or

99
00:07:01.400 --> 00:07:04.178
sending an event to another machine.

100
00:07:04.178 --> 00:07:09.753
I recommend you use Raise if you're
sending events to yourself, and you Send

101
00:07:09.753 --> 00:07:15.173
if you're sending events to another actor,
or machine which is an actor.

102
00:07:15.173 --> 00:07:18.718
So, that's in short the difference there,
and

103
00:07:18.718 --> 00:07:24.082
in version 5 we're going to consolidate
it so that Send becomes Sent To,

104
00:07:24.082 --> 00:07:28.594
and really becomes an action for
sending to a separate actor.

105
00:07:28.594 --> 00:07:34.917
And encouraging the use of rays in order
to send in events to the machine itself.

106
00:07:38.310 --> 00:07:41.662
And another question,
does Raise work with parallel states, too?

107
00:07:41.662 --> 00:07:44.854
We're gonna be talking about parallel
states in the future lesson, but

108
00:07:44.854 --> 00:07:46.280
yes, Raise works everywhere.

