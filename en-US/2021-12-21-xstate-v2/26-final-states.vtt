WEBVTT

1
00:00:00.060 --> 00:00:03.941
When we talk about the mathematical
definition of Stephen scenes,

2
00:00:03.941 --> 00:00:05.377
there is five part to it.

3
00:00:05.377 --> 00:00:10.529
There is an initial state,
a finite set of state,

4
00:00:10.529 --> 00:00:17.780
a finite set of transitions,
a finite set of events and a final state.

5
00:00:17.780 --> 00:00:22.449
Or final states there could
be multiple final states but

6
00:00:22.449 --> 00:00:27.529
a final state represents
somewhere where the machine ends.

7
00:00:27.529 --> 00:00:32.140
So if you have a machine that's
doing a certain process where it has

8
00:00:32.140 --> 00:00:34.527
a clearly defined start In an end,

9
00:00:34.527 --> 00:00:38.907
then the final state represents
that process being finished.

10
00:00:38.907 --> 00:00:42.403
Whether it errored out or
it is successful and

11
00:00:42.403 --> 00:00:47.187
it represents the fact that that
machine can no longer make any

12
00:00:47.187 --> 00:00:51.523
further transitions because
it is in that final state.

13
00:00:51.523 --> 00:00:56.931
So, final states are used to
signify that something is done.

14
00:00:56.931 --> 00:01:01.267
And in the machine a final
state can be used to,- like I

15
00:01:01.267 --> 00:01:04.285
said signify the end of a process, but

16
00:01:04.285 --> 00:01:10.348
we could also include final states
inside of compound and parallel states.

17
00:01:10.348 --> 00:01:13.810
So, let me just give you an example here.

18
00:01:13.810 --> 00:01:17.436
Now our big example
that we have over here,

19
00:01:17.436 --> 00:01:23.505
am gonna remove a few transition just
to make things a little bit clear.

20
00:01:23.505 --> 00:01:26.836
Let's say the we are on
the loading state and

21
00:01:26.836 --> 00:01:30.887
we have a success state that
is going to go to loaded and

22
00:01:30.887 --> 00:01:36.669
am also going to remove this axle just
to make things a little bit more clear.

23
00:01:36.669 --> 00:01:40.135
We could mark this as type, final.

24
00:01:41.701 --> 00:01:47.255
And so,
Let's see what happens when we do that.

25
00:01:49.086 --> 00:01:52.765
All right, so we're loading and
when we send for

26
00:01:52.765 --> 00:01:55.741
example, let's send loaded events.

27
00:01:58.634 --> 00:02:01.104
Success events, just kidding.

28
00:02:02.919 --> 00:02:04.849
Getting my machines confused.

29
00:02:04.849 --> 00:02:06.539
Now we're in loaded.

30
00:02:06.539 --> 00:02:12.145
And the states also has a done
property that says done is true.

31
00:02:12.145 --> 00:02:16.865
And so this is a good way to just
determine whether a machine is

32
00:02:16.865 --> 00:02:17.893
done or not.

33
00:02:17.893 --> 00:02:22.623
And so you see over here this previous
state has a done false property.

34
00:02:22.623 --> 00:02:30.000
[COUGH] Now like I said, Done states or
sorry, final states are also useful for

35
00:02:30.000 --> 00:02:34.326
signifying that part of
the machine is done.

36
00:02:34.326 --> 00:02:39.167
And then you could handle what happens
when that part of a machine such as

37
00:02:39.167 --> 00:02:41.920
a compound, or parallel state is done.

38
00:02:41.920 --> 00:02:46.060
So, for instance,
when we're in this loading state,

39
00:02:46.060 --> 00:02:49.155
let's see that we have to do a few things.

40
00:02:49.155 --> 00:02:53.549
I'm gonna make this a compound state

41
00:02:53.549 --> 00:02:58.798
getting data and then states getting data.

42
00:02:58.798 --> 00:03:01.927
[COUGH] And
I could add a transition here but

43
00:03:01.927 --> 00:03:05.863
I'm being lazy I'm gonna
add an after transition,

44
00:03:05.863 --> 00:03:11.247
which is just a transition that happens
after a certain amount of time.

45
00:03:11.247 --> 00:03:13.606
And yes,
you can think of time as an event as well.

46
00:03:13.606 --> 00:03:15.796
So I'm gonna do this after a second.

47
00:03:15.796 --> 00:03:21.075
I'm gonna be getting more data.

48
00:03:21.075 --> 00:03:24.180
So getting more data.

49
00:03:24.180 --> 00:03:28.925
And then after let's make this 500.

50
00:03:28.925 --> 00:03:31.710
We have a finished state.

51
00:03:31.710 --> 00:03:38.695
So this finish state,
we're gonna mark as type final.

52
00:03:38.695 --> 00:03:45.449
Now keep in mind that this is not a top
level state of the machine, this is.

53
00:03:45.449 --> 00:03:50.926
So we have this top level
loaded state which is final,

54
00:03:50.926 --> 00:03:56.535
but this is a final state
inside of this loading state.

55
00:03:56.535 --> 00:03:58.439
So what happens over here?

56
00:03:58.439 --> 00:04:01.425
First let's log this and see what happens.

57
00:04:01.425 --> 00:04:06.097
It says getting data then getting
more data then finished, okay?

58
00:04:06.097 --> 00:04:08.087
So what uses that?

59
00:04:08.087 --> 00:04:12.157
Well, when we're in the compound state,

60
00:04:12.157 --> 00:04:19.178
we could listen to a state being done
by using on done over here, and so on.

61
00:04:19.178 --> 00:04:23.770
Done, I'm just gonna say,
actions console.log

62
00:04:23.770 --> 00:04:28.054
done just to show you
that that gets triggered.

63
00:04:28.054 --> 00:04:33.730
So, we reached the finish state, and
we have the done message over there.

64
00:04:33.730 --> 00:04:41.767
Now, this on done transition is just
as implied it is a transition so

65
00:04:41.767 --> 00:04:46.988
we could transition, to the loaded state.

66
00:04:46.988 --> 00:04:52.213
And now you're gonna see that it's
going to immediately go to that

67
00:04:52.213 --> 00:04:57.252
loaded state because once we reach
the final state of finished,

68
00:04:57.252 --> 00:05:02.216
it's going to take this transition and
go to the loaded state.

69
00:05:02.216 --> 00:05:06.466
Now you can also have final states
in parallel states as well.

70
00:05:06.466 --> 00:05:10.007
And we talked about top level
final states of the machine.

71
00:05:10.007 --> 00:05:14.888
But with parallel states,
it's a little bit different and

72
00:05:14.888 --> 00:05:19.280
I really recommend you read
the documentation on this

73
00:05:19.280 --> 00:05:24.257
because with parallel states the on done,
is called when all

74
00:05:24.257 --> 00:05:29.055
of the child states reach
their respective final states.

75
00:05:29.055 --> 00:05:35.356
So for example if I have oops,
if I have this state over here and

76
00:05:35.356 --> 00:05:42.156
maybe another state here and so
yeah let's say I have all of these.

77
00:05:42.156 --> 00:05:47.689
And let's say that this
date is a final state which

78
00:05:47.689 --> 00:05:52.840
I'm going to mark with
a double box over here.

79
00:05:52.840 --> 00:05:58.016
And let's say that we
have one two over here.

80
00:05:58.016 --> 00:06:05.419
And let's say this is an on done
transition on that parallel states.

81
00:06:05.419 --> 00:06:10.287
So what happens here is when
we reach the final state of

82
00:06:10.287 --> 00:06:15.153
one of the regions, so
let me just mark this as green,

83
00:06:15.153 --> 00:06:19.824
then this on done is not
going to be called just yet.

84
00:06:19.824 --> 00:06:27.134
But when we reach the final states of
all of the regions in parallel states,

85
00:06:27.134 --> 00:06:34.344
then and only then is the onDone
transition taken in that parallel state.

86
00:06:34.344 --> 00:06:39.295
Now, this is more of a niche use case but
it is useful to know.

87
00:06:39.295 --> 00:06:45.548
And this is something that is defined in
SCXML in the original state charts paper.

88
00:06:45.548 --> 00:06:48.846
And it could be useful in
certain situations but

89
00:06:48.846 --> 00:06:52.721
most of the time you're going
to be using final states in

90
00:06:52.721 --> 00:06:56.770
the context of compound states or
in the machine overall.

