WEBVTT

1
00:00:00.340 --> 00:00:04.969
I also wanted to mention that if
you want just a collection of state

2
00:00:04.969 --> 00:00:08.926
machines that you just want to look at for
inspiration or

3
00:00:08.926 --> 00:00:13.234
see how other people are modeling
their application logic.

4
00:00:13.234 --> 00:00:17.993
There is a registry at
stately.ai/registry with a ton of

5
00:00:17.993 --> 00:00:23.246
different machines, for example,
here's an offline queue.

6
00:00:23.246 --> 00:00:26.235
And so this is going to
open in the visualizer and

7
00:00:26.235 --> 00:00:28.345
just show the machine over here.

8
00:00:28.345 --> 00:00:31.688
So that you could look at it and
just really understand

9
00:00:31.688 --> 00:00:35.777
what's going on especially by
playing around with the machine,

10
00:00:35.777 --> 00:00:38.399
sending events and seeing what happens.

11
00:00:38.399 --> 00:00:41.684
So I recommend you take
a look at the registry,

12
00:00:41.684 --> 00:00:46.413
there's also xstate-catalogue,
the British spelling.com.

13
00:00:46.413 --> 00:00:49.541
And so in this catalog there
are a bunch of, I guess,

14
00:00:49.541 --> 00:00:53.890
handpicked state machines where
they're actually described for you.

15
00:00:53.890 --> 00:00:57.939
So anything that you might want to do,

16
00:00:57.939 --> 00:01:04.022
such as creating a multi-step form,
is in the catalog.

17
00:01:04.022 --> 00:01:07.803
And so it talks about just the different
states that it could be and

18
00:01:07.803 --> 00:01:10.430
the different events that can happen.

19
00:01:10.430 --> 00:01:15.033
And basically, it gives you an overview
of how you would model a state machine in

20
00:01:15.033 --> 00:01:19.379
order to accomplish whatever tasks you
might want to do in an application.

21
00:01:21.220 --> 00:01:24.881
So I definitely recommend you
check out the xstate catalogue and

22
00:01:24.881 --> 00:01:26.840
the xstate registry.

23
00:01:26.840 --> 00:01:31.297
Also, you can go to
stately.ai/biz at any time for

24
00:01:31.297 --> 00:01:37.790
just playing around with state machines
and you can save them as well.

25
00:01:37.790 --> 00:01:44.390
You just log in via GitHub, and then your
machines are accessible when you log in.

26
00:01:44.390 --> 00:01:49.393
So yeah, we're gonna be coming out with
a lot more tools in the future too.

27
00:01:49.393 --> 00:01:53.200
The one that I'm most excited about
is a visual state machine and

28
00:01:53.200 --> 00:01:54.477
state chart editor.

29
00:01:54.477 --> 00:01:57.660
Where just like I've been
doing in ExcaliDraw for

30
00:01:57.660 --> 00:02:02.509
this whole workshop instead I could do
in a state machine editor that makes it

31
00:02:02.509 --> 00:02:07.164
easier to create these state machines and
export them directly to code.

32
00:02:07.164 --> 00:02:12.430
And also integrate them with your existing
state machine code in your applications.

33
00:02:12.430 --> 00:02:15.600
&gt;&gt; We've talked from the beginning
about given when then syntax, and

34
00:02:15.600 --> 00:02:18.824
then you just showed model based I
think it's really cool that you can

35
00:02:18.824 --> 00:02:20.454
iterate through all those paths.

36
00:02:20.454 --> 00:02:23.925
Would there be a pro and
con of that versus vanilla Cucumber?

37
00:02:23.925 --> 00:02:28.287
If you wanted to write that and then have
some other mechanism writing in plain

38
00:02:28.287 --> 00:02:32.513
English with the given when then like
you started out and having it maybe use

39
00:02:32.513 --> 00:02:36.702
Puppeteer or Cypress to interact with
machines for integrated testing?

40
00:02:36.702 --> 00:02:41.045
&gt;&gt; So the question was about using
these given when statements instead

41
00:02:41.045 --> 00:02:45.323
of just a model based testing approach
where you find it all in one.

42
00:02:45.323 --> 00:02:50.210
And honestly both of them are pretty much
one in the same, you can do it either way.

43
00:02:50.210 --> 00:02:52.850
You could have separate
given when then tests or

44
00:02:52.850 --> 00:02:55.230
you could represent it
all as a test model.

45
00:02:55.230 --> 00:03:00.221
So the test model in model based
testing is basically all of those

46
00:03:00.221 --> 00:03:04.943
given when then specifications
combined into one machine.

47
00:03:04.943 --> 00:03:10.451
So instead of saying on a,
if b then c and on a if c then d and

48
00:03:10.451 --> 00:03:16.080
on b if e then g,
it's just represented as one model where

49
00:03:16.080 --> 00:03:23.970
you could derive all of the given when
then statements from that state machine.

50
00:03:23.970 --> 00:03:27.044
So they're really one and the same.

51
00:03:27.044 --> 00:03:32.301
And especially if you don't want to
code that state machine up front,

52
00:03:32.301 --> 00:03:36.843
then you can just continue to
use Cucumber given when then and

53
00:03:36.843 --> 00:03:39.714
create all of those test statements.

54
00:03:39.714 --> 00:03:43.448
And then later, take a look at
each of those specifications and

55
00:03:43.448 --> 00:03:47.682
put them into a state machine so
that you can merge all of them together.

56
00:03:47.682 --> 00:03:52.486
And I think that that's actually
a really good technique and

57
00:03:52.486 --> 00:03:56.818
a good way of organically
discovering how you can model

58
00:03:56.818 --> 00:04:00.604
your application with
these specifications.

59
00:04:00.604 --> 00:04:04.972
In fact,
I think Bob Martin talked about how these

60
00:04:04.972 --> 00:04:10.072
specifications are essentially
a state machine anyway.

61
00:04:10.072 --> 00:04:13.406
So it's just different ways of
writing the same state machine.

62
00:04:13.406 --> 00:04:15.352
What are your recommendations for

63
00:04:15.352 --> 00:04:18.651
model based testing with state
machines that use actors?

64
00:04:18.651 --> 00:04:24.086
So one way you could do this
is you can mock the actors.

65
00:04:24.086 --> 00:04:29.685
But what I also recommend is
if you go to the Xstate repo,

66
00:04:29.685 --> 00:04:34.333
which is @statelyai/xstate, if you look at

67
00:04:34.333 --> 00:04:39.357
the test files, and we look@actor.test.ts.

68
00:04:39.357 --> 00:04:44.171
You're going to see an example of
just the different ways that you can

69
00:04:44.171 --> 00:04:45.585
test these actors.

70
00:04:45.585 --> 00:04:51.298
So something I'd like to do is when
testing the actors I just make sure

71
00:04:51.298 --> 00:04:57.603
that when we test them that the actors
either respond immediately or respond

72
00:04:57.603 --> 00:05:04.217
with something that doesn't require any
outside interaction with the actor.

73
00:05:04.217 --> 00:05:08.441
And basically, I'm testing in
my parent state machine that it

74
00:05:08.441 --> 00:05:13.394
eventually reaches a final state or
that it reaches some specific state.

75
00:05:13.394 --> 00:05:19.351
And what's great about this is that I
can call onDone in interpret, and so

76
00:05:19.351 --> 00:05:26.383
this is a callback that's called when this
machine reaches its top level final state.

77
00:05:26.383 --> 00:05:29.595
And so, I know if I reach
that top level final state,

78
00:05:29.595 --> 00:05:34.429
then the interaction between the state
machine and the actor was successful.

79
00:05:34.429 --> 00:05:39.724
So yeah, it's just a really
easy way of testing that.

80
00:05:39.724 --> 00:05:44.371
But in general, you can mock actors,
and that's something that I'd

81
00:05:44.371 --> 00:05:48.880
recommend unless you're doing
integration testing, then yeah.

82
00:05:48.880 --> 00:05:52.087
Again, if you have a direct
reference to that actor,

83
00:05:52.087 --> 00:05:57.381
which you do in state.children, or if
you're spawning in state.context directly.

84
00:05:57.381 --> 00:06:01.774
Then you can send events to that actor
to sort of coerce it to behave in

85
00:06:01.774 --> 00:06:05.874
a certain way and send events
back to the parents potentially.

86
00:06:05.874 --> 00:06:09.054
All right,
there was a good question in the chat,

87
00:06:09.054 --> 00:06:13.316
can context be serializable or
can you store anything in context?

88
00:06:13.316 --> 00:06:18.200
So unofficially,
you can store anything in context.

89
00:06:18.200 --> 00:06:23.576
And especially in just practical
use cases, I love using maps and

90
00:06:23.576 --> 00:06:30.731
sets and custom data structures, things
that are not really directly serializable.

91
00:06:30.731 --> 00:06:34.178
So serializability is really important for

92
00:06:34.178 --> 00:06:38.096
when you're actually
using developer tooling.

93
00:06:38.096 --> 00:06:41.685
So that you can take
that initial context and

94
00:06:41.685 --> 00:06:46.147
you can present it in a way
where you can ship it as JSON or

95
00:06:46.147 --> 00:06:49.647
maybe even converted to SC XML somewhere.

96
00:06:49.647 --> 00:06:56.633
And these target locations really don't
have a way of understanding a map or

97
00:06:56.633 --> 00:07:01.887
a set because there's no way
to serialize them cleanly.

98
00:07:01.887 --> 00:07:04.184
However with xstate inspect,

99
00:07:04.184 --> 00:07:08.611
we are coming up with a new way
to serialize custom context.

100
00:07:08.611 --> 00:07:13.956
So even if you have custom data
structures like maps and sets you should

101
00:07:13.956 --> 00:07:20.045
be able to tell the serializer, I want
to serialize these in this specific way.

102
00:07:20.045 --> 00:07:24.687
So that in the developer tooling,
it's shown either as null or

103
00:07:24.687 --> 00:07:29.416
as just the string map, or
just as a custom data structure that is

104
00:07:29.416 --> 00:07:34.510
serializable and that you can
understand in the developer tooling.

105
00:07:34.510 --> 00:07:37.950
So in short,
put whatever you want into context, but

106
00:07:37.950 --> 00:07:41.467
just keep in mind when you're
using developer tools,

107
00:07:41.467 --> 00:07:46.906
that machine definition is sent over the
wire to whatever inspector you're using.

108
00:07:46.906 --> 00:07:51.546
And it needs to show that somehow,
and obviously JSON and

109
00:07:51.546 --> 00:07:57.647
JSON serializable things are the easiest
way for the inspector to do that.

110
00:07:57.647 --> 00:07:59.519
Today, we covered a lot.

111
00:07:59.519 --> 00:08:04.114
We talked about software modelling event
driven architecture, and the why behind

112
00:08:04.114 --> 00:08:08.327
using state machines and state charts
to describe your application logic.

113
00:08:08.327 --> 00:08:13.113
We went over the fundamental parts of
state machines and state charts and

114
00:08:13.113 --> 00:08:16.802
how to use them effectively
in your application logic,

115
00:08:16.802 --> 00:08:21.682
especially to improve it in a natural
way and an easily visualizable way.

116
00:08:21.682 --> 00:08:26.674
We also talked about the actor model and
how it's important to

117
00:08:26.674 --> 00:08:32.434
conceptually view your app as different
actors talking to each other,

118
00:08:32.434 --> 00:08:35.892
just for a proper separation of concerns.

119
00:08:35.892 --> 00:08:40.338
And we talked about other topics as well,
such as using state machines for

120
00:08:40.338 --> 00:08:45.157
things other than implementing your
application logic like testing your app.

121
00:08:45.157 --> 00:08:50.005
And just some developer tooling that
you can use to make state machines

122
00:08:50.005 --> 00:08:53.056
that much more useful in your application.

123
00:08:53.056 --> 00:08:57.677
I hope that you surmounted the learning
curve of XState and learned about state

124
00:08:57.677 --> 00:09:02.172
machines and state charts and how useful
they could be in your application.

125
00:09:02.172 --> 00:09:04.600
And I wanna thank you all for
joining this workshop.

