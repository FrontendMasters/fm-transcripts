WEBVTT

1
00:00:00.089 --> 00:00:03.378
All right.
Now let's talk about actions.

2
00:00:03.378 --> 00:00:08.076
This was also a question that was
brought up like how do we express side

3
00:00:08.076 --> 00:00:10.994
effects inside the state machine as well.

4
00:00:10.994 --> 00:00:15.675
In state machine and state chart
terminology in action is a side effect.

5
00:00:15.675 --> 00:00:19.895
It is something that is performed
as the result of an event.

6
00:00:19.895 --> 00:00:24.548
So there's three different types of
actions that we could specify in

7
00:00:24.548 --> 00:00:28.180
those our entry, exit and
transition actions.

8
00:00:28.180 --> 00:00:34.211
So, one important thing to realize is
that actions don't happen randomly,

9
00:00:34.211 --> 00:00:37.470
they happen always due to an events.

10
00:00:37.470 --> 00:00:42.581
So for example,
if we're in the loading when we entered

11
00:00:42.581 --> 00:00:47.850
the states, and
I could just add this over here.

12
00:00:47.850 --> 00:00:52.480
So I'm gonna make this different color,

13
00:00:52.480 --> 00:00:57.772
we could say entry load
data actually let me make

14
00:00:57.772 --> 00:01:02.813
that a little bit smaller
if I can [INAUDIBLE].

15
00:01:02.813 --> 00:01:07.909
There we go, so what this is saying
is that when we enter this date we

16
00:01:07.909 --> 00:01:13.005
want to start loading data and
this is a side effects that happens,

17
00:01:13.005 --> 00:01:16.736
this side effects might
eventually come back and

18
00:01:16.736 --> 00:01:19.924
say okay here's your data it's loaded.

19
00:01:19.924 --> 00:01:22.860
And then we go into the playing states.

20
00:01:22.860 --> 00:01:27.270
So again, we could represent entry and
exit actions here too.

21
00:01:27.270 --> 00:01:28.544
So we could say,

22
00:01:28.544 --> 00:01:33.466
play audio over here because
playing the audio is a side effect.

23
00:01:33.466 --> 00:01:38.610
We have to tell something
external that the audio file

24
00:01:38.610 --> 00:01:43.527
actually needs to start playing and
when we're not

25
00:01:43.527 --> 00:01:48.344
in this playing states we
want to pause the audio.

26
00:01:48.344 --> 00:01:53.048
So this just make sure that
the behavior of not only the way

27
00:01:53.048 --> 00:01:57.857
that the machine can change
its behavior based on events.

28
00:01:57.857 --> 00:02:01.786
But also on what side
effects are executed,

29
00:02:01.786 --> 00:02:07.000
the behavior of that is
specified through these actions.

30
00:02:07.000 --> 00:02:11.144
Now, there are also transition actions and

31
00:02:11.144 --> 00:02:17.753
these are actually the actions that
I would recommend you start with.

32
00:02:17.753 --> 00:02:25.265
So a transition action in state machine
terminology is specified with do.

33
00:02:25.265 --> 00:02:29.417
So it's not gonna look
like this in x states.

34
00:02:29.417 --> 00:02:33.385
But when you're looking at state machine
diagrams, it has a do in it, and

35
00:02:33.385 --> 00:02:37.290
that's how you know that
this is a transition action.

36
00:02:37.290 --> 00:02:42.088
So when you're starting to specify
what side effects should happen in

37
00:02:42.088 --> 00:02:44.350
when they should happen.

38
00:02:44.350 --> 00:02:48.790
Like I said, I really recommend
putting them on the transition first.

39
00:02:48.790 --> 00:02:52.910
So for example, when we loaded we
want to start playing the audio.

40
00:02:52.910 --> 00:02:58.844
And when we pause, we wanna pause
the audio but notice that, okay.

41
00:02:58.844 --> 00:03:03.237
Over here when we're paused
in the play event happens,

42
00:03:03.237 --> 00:03:06.560
we want to play the audio as well.

43
00:03:06.560 --> 00:03:09.470
So now look at these two events over here.

44
00:03:10.850 --> 00:03:17.157
These two events are interesting because
they are doing the same thing and

45
00:03:17.157 --> 00:03:21.634
it's showing you that any
transition that goes into

46
00:03:21.634 --> 00:03:26.440
the playing state needs
to execute those events.

47
00:03:26.440 --> 00:03:29.572
And so that's how you know that
that's actually a candidate for

48
00:03:29.572 --> 00:03:30.739
having an entry event.

49
00:03:30.739 --> 00:03:36.251
[COUGH] So, use entry events when
you realize that every single

50
00:03:36.251 --> 00:03:41.763
transition to the states results
in that action being taken,

51
00:03:41.763 --> 00:03:46.324
same thing with exit events or
sorry exit actions.

52
00:03:46.324 --> 00:03:51.063
If you notice that every single
transition out of the states

53
00:03:51.063 --> 00:03:55.990
results in this exit action,
then or results in this action,

54
00:03:55.990 --> 00:03:59.809
then you should convert
that to an exit action.

55
00:03:59.809 --> 00:04:04.798
So for example, if we have do pause
audio but we realize that anytime

56
00:04:04.798 --> 00:04:09.888
that we're exiting this playing state,
this pause audio happens.

57
00:04:09.888 --> 00:04:12.227
And so let me just make
another example over here.

58
00:04:12.227 --> 00:04:14.210
So let's say that we're playing.

59
00:04:14.210 --> 00:04:19.616
And let's say that we have this dreaded,
gonna color this.

60
00:04:21.778 --> 00:04:27.230
We have this dreaded buffering events,
which we're not gonna model

61
00:04:27.230 --> 00:04:32.308
in our actual state machine, but
just lets pretend it happens.

62
00:04:32.308 --> 00:04:35.286
If we only have pause
audio on this pause event,

63
00:04:35.286 --> 00:04:39.680
we need to duplicate it over here
because we also want to pause the audio

64
00:04:39.680 --> 00:04:44.370
if it's buffering because obviously
there's no audio to play.

65
00:04:44.370 --> 00:04:49.810
And so now we know this that every single
exit events, or sorry, yet every single

66
00:04:49.810 --> 00:04:55.810
exit transition on the state note is going
to cause this same pause audio events.

67
00:04:55.810 --> 00:05:03.039
That's a candidate for instead having
exit pause audio and removing these two.

68
00:05:03.039 --> 00:05:05.854
So in summary using entry and

69
00:05:05.854 --> 00:05:11.483
exit actions is a way to dry up
your state machine logic but

70
00:05:11.483 --> 00:05:18.654
starts by specifying the actions on
the transitions themselves first.

71
00:05:18.654 --> 00:05:25.043
Alright, so the way that we specify
these actions on the states or

72
00:05:25.043 --> 00:05:29.922
the transitions is by,
here I'll add over here,

73
00:05:29.922 --> 00:05:33.541
is by specifying it in line at first.

74
00:05:33.541 --> 00:05:39.833
And so this is going to be the first
thing we're doing over here.

75
00:05:39.833 --> 00:05:44.092
I'm going to go to the scratchpad,
okay, so

76
00:05:44.092 --> 00:05:50.033
again we have our simple machine
we have our loading machine and

77
00:05:50.033 --> 00:05:55.431
on success loaded let's make
this a target over loaded.

78
00:05:55.431 --> 00:06:01.517
So in this state objects,
we could specify entry actions and

79
00:06:01.517 --> 00:06:05.942
we could specify multiple actions as well.

80
00:06:05.942 --> 00:06:10.093
So, an action can either
look like a string,

81
00:06:10.093 --> 00:06:15.021
so we could say, load data,
or it could be an object.

82
00:06:15.021 --> 00:06:22.129
In this way, it allows you to have
parameters, just whatever you want.

83
00:06:22.129 --> 00:06:26.276
But in this case, we're just gonna have it
as a string just to keep things simple.

84
00:06:26.276 --> 00:06:31.065
All right, so now,
if we go back to the homepage,

85
00:06:31.065 --> 00:06:35.855
we're gonna see that it
shows loading over here,

86
00:06:35.855 --> 00:06:40.091
but I also want to log the states.actions.

87
00:06:40.091 --> 00:06:44.683
And so now we're going to see that
we entered the loading state and

88
00:06:44.683 --> 00:06:46.948
now we have an array of actions.

89
00:06:46.948 --> 00:06:52.090
Notice how it converted it to an object
over here we have a type of load data.

90
00:06:52.090 --> 00:06:58.550
And that's gonna do something we haven't
specified what it's going to do yet,

91
00:06:58.550 --> 00:07:03.760
but that shows us that this
action is meant to be executed.

92
00:07:03.760 --> 00:07:08.165
Now, the state machine transition
function will not execute actions,

93
00:07:08.165 --> 00:07:12.928
the interpreter will and that's one of
the roles of the interpreter is not only

94
00:07:12.928 --> 00:07:17.620
persisting the current state,
but also executing actions too.

95
00:07:17.620 --> 00:07:20.485
So if instead we change
this to an inline function.

96
00:07:22.642 --> 00:07:27.524
And we say consult.log loading data.

97
00:07:29.741 --> 00:07:34.229
Then you'll see here that
this loading data message

98
00:07:34.229 --> 00:07:38.309
appears because we're
entering that state and

99
00:07:38.309 --> 00:07:44.038
executing this action which it's
going to console dot log it out.

100
00:07:44.038 --> 00:07:48.769
And so we could do the same thing for
transitions, so

101
00:07:48.769 --> 00:07:52.758
I could have an action over here, actions.

102
00:07:52.758 --> 00:07:59.928
And I'm just gonna do an inline action
again, and say console.logdataloaded.

103
00:07:59.928 --> 00:08:04.787
Or I might do something like
assigning data which we're gonna

104
00:08:04.787 --> 00:08:07.224
be doing in the future lesson.

105
00:08:08.257 --> 00:08:11.103
So now it says loading data.

106
00:08:11.103 --> 00:08:17.208
And if I send type success, that just
shows you the same machine is working.

107
00:08:17.208 --> 00:08:19.521
Now we see it says assigning data.

108
00:08:19.521 --> 00:08:24.758
And that's because it's executing
that inline transition action.

109
00:08:24.758 --> 00:08:27.459
Now, you as a refactor target,

110
00:08:27.459 --> 00:08:32.069
you don't have to specify
all of your actions in line.

111
00:08:32.069 --> 00:08:37.915
Instead what you could do is, for
example, let's have load data,

112
00:08:37.915 --> 00:08:42.943
the machine itself has a withconfig
method that allows you

113
00:08:42.943 --> 00:08:50.680
to specify the implementation details of
these actions and other things as well.

114
00:08:50.680 --> 00:08:56.183
So if I put actions as an object here,
and we say, load data,

115
00:08:58.046 --> 00:09:04.901
And then we console.log
configured loading data.

116
00:09:04.901 --> 00:09:10.428
Then we should see that this
configured loading data message shows,

117
00:09:10.428 --> 00:09:16.159
and that's because it is reading
from these implementation details.

118
00:09:16.159 --> 00:09:21.034
So those are the ways to specify
actions either in Entry Exit or

119
00:09:21.034 --> 00:09:23.661
transition actions over here and

120
00:09:23.661 --> 00:09:27.716
I do recommend that you
specified them as an array.

121
00:09:27.716 --> 00:09:33.176
Because there is always the chance
that you might need to execute

122
00:09:33.176 --> 00:09:39.660
multiple actions inside your transitions
or in entry or exit other states.

