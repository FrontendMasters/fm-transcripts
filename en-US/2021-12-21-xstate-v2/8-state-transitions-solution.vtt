WEBVTT

1
00:00:00.040 --> 00:00:05.408
And so this is really useful for
debugging or

2
00:00:05.408 --> 00:00:10.195
just getting a glance at what state is my

3
00:00:10.195 --> 00:00:16.630
application currently in as it's running.

4
00:00:16.630 --> 00:00:22.243
We also talked about adding the states and
transitions into the machine in a very

5
00:00:22.243 --> 00:00:28.940
similar way like we did with the previous
exercise of having that objects notation.

6
00:00:28.940 --> 00:00:31.049
So, if we go in here.

7
00:00:32.780 --> 00:00:38.230
And we remember that our state
machine is supposed to look like this.

8
00:00:38.230 --> 00:00:41.080
Where we have a loading, playing,

9
00:00:41.080 --> 00:00:45.362
paused state and the loaded,
play and pause events.

10
00:00:45.362 --> 00:00:50.552
Then hopefully you're
getting more used to how to

11
00:00:50.552 --> 00:00:56.492
actually add these states and
transitions into XState.

12
00:00:56.492 --> 00:01:02.679
You want an initial state at first, so
that's going to be our loading state and

13
00:01:02.679 --> 00:01:07.646
then we want to specify all of
the states that we have in our state

14
00:01:07.646 --> 00:01:11.512
machine which is loading,
playing and paused.

15
00:01:14.540 --> 00:01:19.708
Now to specify a transition inside
the loading state, we put it

16
00:01:19.708 --> 00:01:25.670
inside the on object which stands for
on this event, we go to this state.

17
00:01:26.750 --> 00:01:32.496
So on the loaded state,
the way that we specify this XState,

18
00:01:32.496 --> 00:01:39.030
the full way is by giving it
an object with a target of playing.

19
00:01:39.030 --> 00:01:43.688
And so what this is going to do is it's
going to say if we're in the loading state

20
00:01:43.688 --> 00:01:49.100
and the loaded event happens, go to
this next target state which is playing.

21
00:01:49.100 --> 00:01:54.913
Now a shorthand for
this is if you have no other actions or

22
00:01:54.913 --> 00:01:59.984
things to specify in
the object you could just put

23
00:01:59.984 --> 00:02:07.051
the key of that state inside as
the value instead of the full object.

24
00:02:07.051 --> 00:02:09.820
Both ways work both ways are the same.

25
00:02:09.820 --> 00:02:13.826
I do recommend you use
the object especially if

26
00:02:13.826 --> 00:02:18.140
you're going to add actions and
conditions, and

27
00:02:18.140 --> 00:02:23.395
things like that that we're
gonna talk about in the future.

28
00:02:23.395 --> 00:02:28.462
So in the playing state, on pause,
we go to the paused state.

29
00:02:28.462 --> 00:02:34.810
And in the paused state,
on play- We go to the playing state.

30
00:02:36.740 --> 00:02:41.565
Now below you see that we already have
the machine being interpreted and

31
00:02:41.565 --> 00:02:44.230
we also have the step tools true thing.

32
00:02:44.230 --> 00:02:46.180
And I'll show you what
that does in a minute.

33
00:02:46.180 --> 00:02:50.170
But this starts the service so
that it could start receiving events.

34
00:02:50.170 --> 00:02:54.650
What we also did, and just for the sake
of time, it's already done for you.

35
00:02:54.650 --> 00:02:58.030
We have a bunch of elements
that we could access.

36
00:02:58.030 --> 00:03:02.680
And so, we're adding event
listeners to each one of them.

37
00:03:02.680 --> 00:03:07.011
And so, this is going to be
an important pattern using whatever

38
00:03:07.011 --> 00:03:11.997
framework that you plan on using with
XState, is that the only thing that

39
00:03:11.997 --> 00:03:17.250
should really happen inside events
listeners is sending an event.

40
00:03:17.250 --> 00:03:21.927
And so this alone simplifies
the implementation of the logic in your

41
00:03:21.927 --> 00:03:26.590
application and it also allows
you to centralize that logic.

42
00:03:26.590 --> 00:03:31.456
So now, when we click a button for
instance, all that's doing is being

43
00:03:31.456 --> 00:03:36.565
translated to a play events and same
thing over here with the pause button,

44
00:03:36.565 --> 00:03:41.570
when we click it,
that's being translated to a pause event.

45
00:03:41.570 --> 00:03:45.671
And so we're also subscribing to
the state because we do want things to

46
00:03:45.671 --> 00:03:47.510
happen on the screen.

47
00:03:47.510 --> 00:03:53.506
So, we want the loading button to be
hidden if the state doesn't match loading.

48
00:03:53.506 --> 00:03:57.050
We want the play button to be hidden.

49
00:03:57.050 --> 00:04:02.810
And so now instead of using matches
we could do something else.

50
00:04:02.810 --> 00:04:06.138
Since this play button
is based on an event and

51
00:04:06.138 --> 00:04:10.170
not the states,
we could do it if we can't play.

52
00:04:10.170 --> 00:04:14.780
So the state machine does make this
obvious where if we're in the playing

53
00:04:14.780 --> 00:04:19.520
states then we can't play because
that transition is not defined.

54
00:04:19.520 --> 00:04:26.575
And so the state.can method allows
you to do this pretty easily.

55
00:04:26.575 --> 00:04:32.216
And say if sending this event is not gonna
cause a transition in the state machine,

56
00:04:32.216 --> 00:04:35.020
then this is going to return false.

57
00:04:35.020 --> 00:04:38.652
Otherwise, if it will cause a transition,
it's going to return true.

58
00:04:38.652 --> 00:04:43.733
So it is really useful and
you could use either dot matches or

59
00:04:43.733 --> 00:04:47.180
state.can to control the UI.

60
00:04:47.180 --> 00:04:55.200
So congratulations.

61
00:04:55.200 --> 00:04:57.380
And when we go into
the actual application-

62
00:05:00.770 --> 00:05:05.985
We see that this pause play,
pause play it works.

63
00:05:05.985 --> 00:05:11.400
And so, again when you're testing machines
or you just want to debug them you

64
00:05:11.400 --> 00:05:18.590
could attach the service to the window-
And you could send events that way.

65
00:05:18.590 --> 00:05:22.417
So, for example,
now we can see the loading state and

66
00:05:22.417 --> 00:05:26.720
that's because I commented
out this loaded event.

67
00:05:26.720 --> 00:05:34.420
And so if we send the play,
nothing's gonna happen.

68
00:05:34.420 --> 00:05:36.480
We're still gonna be in the loading state.

69
00:05:36.480 --> 00:05:41.120
And that's because we
haven't loaded the data yet.

70
00:05:41.120 --> 00:05:45.817
So, if we instead send loaded now
that changes to the plays states, and

71
00:05:45.817 --> 00:05:48.556
I know it confused me
before in the past but

72
00:05:48.556 --> 00:05:54.117
showing the pause button means it's in
the played state because it shows like,

73
00:05:54.117 --> 00:05:57.445
okay, you could pause it
because it's playing.

74
00:05:57.445 --> 00:06:03.390
So you could click pause, and now it's in
the play state, pause state, play, etc.

75
00:06:03.390 --> 00:06:07.764
So if your app in this
file looks like this and

76
00:06:07.764 --> 00:06:12.200
it behaves like this, then it's working.

77
00:06:12.200 --> 00:06:14.180
So congratulations.

78
00:06:14.180 --> 00:06:18.075
And so this is really useful for
debugging or

79
00:06:18.075 --> 00:06:25.900
just getting a glance at what state is my
application currently in as it's running.

80
00:06:25.900 --> 00:06:28.629
And so this is really useful for
debugging or

81
00:06:28.629 --> 00:06:34.410
just getting a glance at what state is my
application currently in as it's running.

82
00:06:34.410 --> 00:06:39.054
So you could import inspect
from XState inspect and

83
00:06:39.054 --> 00:06:42.079
then give it a couple of options.

84
00:06:42.079 --> 00:06:45.082
By default it's gonna try
to find an iframe and

85
00:06:45.082 --> 00:06:50.175
this option might be changing in the
future or this default might be changing.

86
00:06:50.175 --> 00:06:56.323
And we also wanna open it up
in stately.ai/viz?inspect.

87
00:06:56.323 --> 00:07:00.767
And so what this is gonna do
is it's going to visualize our

88
00:07:00.767 --> 00:07:03.552
machine as it is running in the app.

89
00:07:03.552 --> 00:07:07.002
And so this is what we call
inspecting the state machine.

90
00:07:07.002 --> 00:07:10.227
So right now we see that
it's in the loading state.

91
00:07:10.227 --> 00:07:15.247
And so this is really useful for
debugging or just getting a glance

92
00:07:15.247 --> 00:07:20.117
at what state is my application
currently in as it's running.

93
00:07:20.117 --> 00:07:22.975
[COUGH] So we can press pause to pause it.

94
00:07:22.975 --> 00:07:25.972
And now we see it's in the paused state,
but

95
00:07:25.972 --> 00:07:30.844
one cool feature about this inspector
is that it goes both directions.

96
00:07:30.844 --> 00:07:35.770
You could also click play over here and
cause the machine to be playing.

97
00:07:38.410 --> 00:07:42.870
So it's bi directional,
it's going to work both ways.

98
00:07:42.870 --> 00:07:45.830
And so this is really useful for
debugging or

99
00:07:45.830 --> 00:07:51.520
just getting a glance at what state is my
application currently in as it's running.

