WEBVTT

1
00:00:00.000 --> 00:00:04.622
In the first exercise,
we learned how to model this simple state

2
00:00:04.622 --> 00:00:09.168
machine using either a switch statement or
by using an object.

3
00:00:09.168 --> 00:00:12.855
And so now we're going to be
taking this to the next level.

4
00:00:12.855 --> 00:00:16.203
And specifically focusing on this object,
and

5
00:00:16.203 --> 00:00:21.567
using this to actually implement a state
machine using the XState library.

6
00:00:21.567 --> 00:00:26.603
And so if you go to xstate.js.org/docs,

7
00:00:26.603 --> 00:00:30.340
this is the XState library.

8
00:00:30.340 --> 00:00:36.760
And the installation and quick start
are all on the homepage over here.

9
00:00:36.760 --> 00:00:41.613
So you could npm install xstate, and then
you create a machine using createMachine.

10
00:00:41.613 --> 00:00:45.874
And you interpret the machine, which
makes a live version of that machine,

11
00:00:45.874 --> 00:00:47.213
which persists state.

12
00:00:47.213 --> 00:00:52.081
And is something like that object we
talked about in the first lesson,

13
00:00:52.081 --> 00:00:54.487
where you could send events to it.

14
00:00:54.487 --> 00:00:56.633
And so when you create a machine,

15
00:00:56.633 --> 00:01:01.617
the object syntax that we put inside of
here is going to look exactly the same,

16
00:01:01.617 --> 00:01:05.549
or at least pretty close,
to what we did in the first lesson.

17
00:01:05.549 --> 00:01:07.609
Now the quickest way to get up and

18
00:01:07.609 --> 00:01:11.660
running with XState is actually
by using the Visualizer.

19
00:01:11.660 --> 00:01:16.380
So if you go to stately.ai/viz,
you're gonna be greeted by this homepage,

20
00:01:16.380 --> 00:01:20.024
where you can see an example or
just start coding right away,

21
00:01:20.024 --> 00:01:22.220
which we're going to do.

22
00:01:22.220 --> 00:01:28.200
And so if I create a machine, I'm actually
going to copy this entire object,

23
00:01:28.200 --> 00:01:33.240
and I'm gonna put it inside
of createMachine over here.

24
00:01:33.240 --> 00:01:35.700
Let's see, const.machine = createMachine.

25
00:01:37.420 --> 00:01:41.819
And so when I press Cmd + Enter,
or if I click Visualize over here,

26
00:01:41.819 --> 00:01:46.710
now you're going to see the state
machine visualized in the visualizer.

27
00:01:46.710 --> 00:01:51.640
And so it's going to look pretty much like
the diagram that we just drew over here.

28
00:01:51.640 --> 00:01:56.867
So we have a loading, playing, paused.

29
00:01:56.867 --> 00:02:01.431
And notice we call this AUDIO.PAUSED,
it could be paused.

30
00:02:01.431 --> 00:02:06.520
And so we could actually navigate
through this machine, and

31
00:02:06.520 --> 00:02:11.722
show how each event is going to
affect the machine's states.

32
00:02:11.722 --> 00:02:16.152
So this is a really useful tool, where you
could just copy and paste your machines,

33
00:02:16.152 --> 00:02:18.828
whether you have it in JavaScript or
TypeScript.

34
00:02:18.828 --> 00:02:23.016
And I definitely encourage
you to try it out.

35
00:02:23.016 --> 00:02:29.903
So, again, if you wanna get started with
XState, you would do npm install xstate.

36
00:02:29.903 --> 00:02:33.132
And we're are going to be
using the createMachine and

37
00:02:33.132 --> 00:02:35.296
interpret functions from XState.

38
00:02:35.296 --> 00:02:41.776
And so, yeah, just gonna show
you how that works real quick.

39
00:02:41.776 --> 00:02:47.357
We're gonna be jumping
into exercise number one,

40
00:02:47.357 --> 00:02:51.525
just to show you how all of this works.

41
00:02:51.525 --> 00:02:55.740
And actually,
exercise one is all ready done, so yeah.

42
00:02:55.740 --> 00:03:01.888
But if you wanna do it yourself,
then please feel free.

43
00:03:01.888 --> 00:03:05.673
What should really happen over here is
like this should be empty, so yeah.

44
00:03:07.802 --> 00:03:11.253
Okay, so for this exercise,

45
00:03:11.253 --> 00:03:16.639
what you're supposed to
do is create a machine

46
00:03:16.639 --> 00:03:21.750
using XState that matches
the state machine

47
00:03:21.750 --> 00:03:26.880
that you created in the previous exercise.

48
00:03:27.980 --> 00:03:32.270
So just to give you a quick intro on that,

49
00:03:32.270 --> 00:03:38.000
I'm gonna jump into
the scratchpad over here.

50
00:03:38.000 --> 00:03:40.675
And let's clear some stuff out.

51
00:03:42.261 --> 00:03:46.951
All right, so we're going to import
a couple things from Xstate,

52
00:03:46.951 --> 00:03:51.404
gonna import createMachine and
also the interpret function.

53
00:03:51.404 --> 00:03:53.856
For now we're just gonna
be using createMachine.

54
00:03:53.856 --> 00:03:59.262
And so we're gonna be creating a machine
using createMachine, saying that a lot.

55
00:03:59.262 --> 00:04:06.245
And this machine, the object inside
actually doesn't need to take anything.

56
00:04:06.245 --> 00:04:09.690
This is a perfectly valid state machine,
even though it's completely empty.

57
00:04:09.690 --> 00:04:15.080
So if we console.log
the machine.initialState,

58
00:04:15.080 --> 00:04:23.050
you're going to discover what exactly
is in that state objects that we have.

59
00:04:24.110 --> 00:04:28.340
So the initial state is created by,

60
00:04:28.340 --> 00:04:35.682
let's have initial state of loading,
so states, loading.

61
00:04:38.720 --> 00:04:43.189
All right, so our initial state is
going to have a few important things.

62
00:04:43.189 --> 00:04:46.584
First of all is the value,
just like we talked about,

63
00:04:46.584 --> 00:04:48.701
this value over here of loading.

64
00:04:48.701 --> 00:04:52.628
And so this represents
the finite state of the machine.

65
00:04:52.628 --> 00:04:55.998
There's also going to be
an event over here, and

66
00:04:55.998 --> 00:05:00.864
that represents the events that
caused the transition to this state.

67
00:05:00.864 --> 00:05:04.254
In this case it's just an xstate.init
event, which is an internal event.

68
00:05:04.254 --> 00:05:07.788
And there's also going to be context,

69
00:05:07.788 --> 00:05:12.832
which we're gonna be taking
care of in a future lesson.

70
00:05:12.832 --> 00:05:17.605
But for now this value is

71
00:05:17.605 --> 00:05:21.906
the important part.

72
00:05:21.906 --> 00:05:26.995
And yeah, so when we have this
machine inside createMachine,

73
00:05:26.995 --> 00:05:32.479
we actually have the transition
function built into this machine.

74
00:05:32.479 --> 00:05:35.658
So we could say const nextState
= machine.transition.

75
00:05:35.658 --> 00:05:37.738
And so just like we did before,

76
00:05:37.738 --> 00:05:43.410
we could specify undefined as the first
argument, and we could give it an event.

77
00:05:43.410 --> 00:05:48.270
So let's say that we have two states,
loading and loaded.

78
00:05:48.270 --> 00:05:55.210
So we say on LOADED: 'loaded',
that's actually pretty redundant.

79
00:05:55.210 --> 00:05:58.390
Let's call it SUCCESS just for
the sake of this example.

80
00:05:58.390 --> 00:06:03.404
And so we're gonna send type: 'SUCCESS'.

81
00:06:03.404 --> 00:06:06.081
And we're going to
console.log the nextState.

82
00:06:10.589 --> 00:06:14.590
All right, so now we see that we
have a state with value of loading.

83
00:06:15.720 --> 00:06:19.880
And when we send that event,
now we have a state with value of loaded.

84
00:06:19.880 --> 00:06:23.555
So we see the event in the state object,
and

85
00:06:23.555 --> 00:06:28.470
we see the value of loaded
also within that state object.

86
00:06:30.390 --> 00:06:34.580
Now this state object has a couple
of other features as well.

87
00:06:34.580 --> 00:06:40.800
So one feature that's going to be
useful in our application is matches.

88
00:06:40.800 --> 00:06:47.589
So if I say console.log(nextState.matches,

89
00:06:47.589 --> 00:06:53.470
and we say loaded, this should be true.

90
00:06:53.470 --> 00:06:57.274
And so
this gives us an easy way to match and

91
00:06:57.274 --> 00:07:02.600
make sure that we're in
the expected finite state.

92
00:07:02.600 --> 00:07:05.510
So we have true over here.

93
00:07:05.510 --> 00:07:09.404
If we have something else,
then it's going to be false.

94
00:07:09.404 --> 00:07:13.705
So you can use nextState.matches.

95
00:07:13.705 --> 00:07:17.045
Just like we did before
in the first lesson,

96
00:07:17.045 --> 00:07:22.462
we created this sort of object that
lets us send events to the machine and

97
00:07:22.462 --> 00:07:25.463
also we have a way to persist the state.

98
00:07:25.463 --> 00:07:28.261
There is a built in way to do
that in XState as well, and

99
00:07:28.261 --> 00:07:30.517
that's by using the interpret function.

100
00:07:30.517 --> 00:07:38.079
And so instead of this, we're gonna
be creating what's called a service.

101
00:07:38.079 --> 00:07:39.288
And again, this is just convention.

102
00:07:39.288 --> 00:07:44.327
But this service is going to take
that machine that we created,

103
00:07:44.327 --> 00:07:48.986
and we have to call start in
order to start the service, and

104
00:07:48.986 --> 00:07:51.859
say, I'm ready to accept events.

105
00:07:51.859 --> 00:07:57.344
Now, we could listen to events on
the service by calling service.subscribe.

106
00:08:00.039 --> 00:08:05.915
And we are going to
console.log the state.value.

107
00:08:09.548 --> 00:08:13.196
And we're also going to expose
the service on the window,

108
00:08:13.196 --> 00:08:15.960
so window.service = service = service.

109
00:08:18.707 --> 00:08:19.470
All right, so

110
00:08:19.470 --> 00:08:23.554
right now the service immediately told
us that we're in the loading state.

111
00:08:23.554 --> 00:08:27.697
So if I send type: 'SUCCESS',
we called it,

112
00:08:27.697 --> 00:08:34.445
now it's gonna tell us that we're in
the loaded state, just as we expected.

113
00:08:34.445 --> 00:08:42.484
So now we see that everything
is working and it's all good.

114
00:08:42.484 --> 00:08:46.545
So interpreting the machine to create
these services is really useful.

115
00:08:46.545 --> 00:08:51.796
And you could use this essentially as
an event emitter in your application.

116
00:08:51.796 --> 00:08:54.459
And it becomes something that you
could send events to, subscribe to.

117
00:08:54.459 --> 00:08:57.397
And those two things alone
are really powerful, and

118
00:08:57.397 --> 00:09:01.215
it's what's going to drive
the entire media player application.

