WEBVTT

1
00:00:00.220 --> 00:00:02.103
We talked about pre-trained models, so

2
00:00:02.103 --> 00:00:04.350
let's actually start to
do it in JavaScript.

3
00:00:04.350 --> 00:00:07.294
So if you've cloned the repository,
if people have not,

4
00:00:07.294 --> 00:00:09.406
I'm just gonna mention the URL quickly.

5
00:00:09.406 --> 00:00:16.693
So github.com/charliegerald/fem,
for Frontend Masters, -ml-workshop.

6
00:00:16.693 --> 00:00:19.971
You can clone everything in there.

7
00:00:19.971 --> 00:00:25.018
And if you then navigate to
the folder called Exercises and

8
00:00:25.018 --> 00:00:29.035
then Project 1,
if I open the folder here, so

9
00:00:29.035 --> 00:00:34.091
I'm gonna go through the files
that are already in there.

10
00:00:34.091 --> 00:00:36.385
So I have code that is pre-written, and

11
00:00:36.385 --> 00:00:41.138
then we're going to write the parts
that are specific to machine learning.

12
00:00:41.138 --> 00:00:45.800
When you work with TensorFlow in
JavaScript, TensorFlow is just a library,

13
00:00:45.800 --> 00:00:50.189
the code that you're writing is not
completely just machine learning.

14
00:00:50.189 --> 00:00:55.705
So here I have a utils file in which I
wrote a few JavaScript functions that

15
00:00:55.705 --> 00:01:01.342
have nothing to do with TensorFlow.js,
but just to help in the UI.

16
00:01:01.342 --> 00:01:04.502
So here I have a first function
that's just showResults().

17
00:01:04.502 --> 00:01:08.763
Because when you're returning the output
from the model, you can just log it to

18
00:01:08.763 --> 00:01:12.592
the browser console, but sometimes
it's nice to see it on the screen.

19
00:01:12.592 --> 00:01:14.912
So it's just some dumb manipulation.

20
00:01:14.912 --> 00:01:20.010
I'm just getting an element, and then
I'm appending the labels to the screen.

21
00:01:20.010 --> 00:01:22.811
So this is just a helper function,
you don't have to use it.

22
00:01:22.811 --> 00:01:27.724
If you just want to see the outputs in
the browser console, you can do that.

23
00:01:27.724 --> 00:01:32.646
And then I just have a handleFilePicker
function because what we're gonna do in

24
00:01:32.646 --> 00:01:37.283
the first exercise, so if you go back
to the terminal and you run npm watch.

25
00:01:37.283 --> 00:01:39.742
It should open, and
at the moment if you click,

26
00:01:39.742 --> 00:01:42.828
nothing is gonna happen because
we didn't write the code.

27
00:01:42.828 --> 00:01:46.139
But it's a simple UI with a button,
Choose File, and

28
00:01:46.139 --> 00:01:50.200
when we're gonna click on it,
it's gonna open the file picker.

29
00:01:50.200 --> 00:01:53.322
So we're gonna choose an image.

30
00:01:53.322 --> 00:01:58.163
If you have already an image ready in your
desktop or if you can go to Google and

31
00:01:58.163 --> 00:02:02.489
download an image of a cat, or a dog,
or a car, feel free to do this.

32
00:02:02.489 --> 00:02:04.248
But we're gonna open the file picker,

33
00:02:04.248 --> 00:02:07.739
we're gonna pick an image that we
have saved locally on our desktop.

34
00:02:07.739 --> 00:02:10.420
And that's going to be given to
the machine learning model, and

35
00:02:10.420 --> 00:02:12.799
we're gonna get the prediction on screen.

36
00:02:12.799 --> 00:02:17.679
So at the moment, the UI is very
simple to use the pre-trained models.

37
00:02:17.679 --> 00:02:23.925
So if we go back to our code in the utils
file, the handleFilePicker function

38
00:02:23.925 --> 00:02:30.087
is some normal like vanilla JavaScript
that uses the file reader with API.

39
00:02:30.087 --> 00:02:34.277
So again, that's not directly
related to machine learning.

40
00:02:34.277 --> 00:02:38.214
If you have implemented something that
was using the file picker before,

41
00:02:38.214 --> 00:02:42.698
you might have even written this code,
but not with machine learning.

42
00:02:42.698 --> 00:02:45.023
So just to go through what it does,
I'm just getting an element.

43
00:02:45.023 --> 00:02:49.052
And on, oops, onChange, I'm just checking
that it's an image then I select it,

44
00:02:49.052 --> 00:02:51.348
otherwise, if it's not, then we return.

45
00:02:51.348 --> 00:02:53.846
You could add an error message
here to the user saying,

46
00:02:53.846 --> 00:02:56.988
make sure you select an image and
not a PDF, for example.

47
00:02:56.988 --> 00:03:01.762
And then here with your extension and
with your file reader, and onLoad,

48
00:03:01.762 --> 00:03:04.303
we are gonna create an image element and

49
00:03:04.303 --> 00:03:08.395
we're going to kind of load
the image that we selected onto it.

50
00:03:08.395 --> 00:03:13.044
And this is the part here,
that's just like a callback function and

51
00:03:13.044 --> 00:03:18.605
that's going to be in Javascript or
in Tensorflow.js, our predict function.

52
00:03:18.605 --> 00:03:23.215
So now, this is just the two details
function that we're gonna use.

53
00:03:23.215 --> 00:03:26.663
But let's write some TensorFlow.

54
00:03:26.663 --> 00:03:31.945
Okay, so if you open the part1.js file,
so there is nothing in it right now,

55
00:03:31.945 --> 00:03:36.514
and we are going to add our kinda
like image detection logic.

56
00:03:36.514 --> 00:03:39.785
So the first thing that we need
to do is import TensorFlow.js.

57
00:03:39.785 --> 00:03:42.838
So if we import, oops, tensorflow, and

58
00:03:42.838 --> 00:03:47.395
we're gonna just import
the whole TensorFlow.js library.

59
00:03:48.405 --> 00:03:51.745
And then we also need to
actually import the model.

60
00:03:51.745 --> 00:03:54.895
So the model that we're going
to use here is called CocoSSD.

61
00:03:54.895 --> 00:03:56.935
It's an image detection model.

62
00:03:56.935 --> 00:04:02.205
So we import everything in the CocoSSD,

63
00:04:02.205 --> 00:04:06.946
yep, from, and then coco-ssd.

64
00:04:06.946 --> 00:04:10.885
So I forgot to mention I had
already done it before, but

65
00:04:10.885 --> 00:04:15.169
if you have not run npm install
in the terminal here, oops,

66
00:04:15.169 --> 00:04:19.539
not here, in the terminal her
before running npm run watch,

67
00:04:19.539 --> 00:04:26.128
you need to do that to be able to actually
use the packages that we just imported.

68
00:04:26.128 --> 00:04:29.262
So just to show you here,
I had written them before, so

69
00:04:29.262 --> 00:04:33.366
this one we'll use later, but first,
coco detection is the one here.

70
00:04:33.366 --> 00:04:36.527
And so if you run npm install,
it is going to install them and

71
00:04:36.527 --> 00:04:38.878
we're gonna be able to
use them in the code.

72
00:04:39.988 --> 00:04:42.402
So at the moment,
we just imported TensorFlow.js, and

73
00:04:42.402 --> 00:04:45.038
we just imported the pre-trained model.

74
00:04:45.038 --> 00:04:47.938
So what we can do now is just
create a model variable.

75
00:04:47.938 --> 00:04:50.255
And we're going to use it
in two different places.

76
00:04:50.255 --> 00:04:55.828
So we just declare it here, and then we're
gonna use it in the rest of the functions.

77
00:04:55.828 --> 00:04:59.458
So before you can actually use
the model to predict something,

78
00:04:59.458 --> 00:05:01.970
you actually have to load that model.

79
00:05:01.970 --> 00:05:04.650
It's like kind of the way
you instantiate an object.

80
00:05:04.650 --> 00:05:08.270
So we're gonna just
write a function in it.

81
00:05:08.270 --> 00:05:11.874
That's gonna be an async function.

82
00:05:11.874 --> 00:05:15.380
Oops, and yeah, so the first step,
we need to load it.

83
00:05:15.380 --> 00:05:19.246
So the way that you can do
that is on CocoSSD, and

84
00:05:19.246 --> 00:05:24.683
on a lot of TensorFlow.js models,
you can call a load method.

85
00:05:24.683 --> 00:05:29.593
Sometimes there's a bit of a difference as
other methods that you can call as well.

86
00:05:29.593 --> 00:05:30.518
But for CocoSSD,

87
00:05:30.518 --> 00:05:34.103
you're gonna load the model and
we store it into our model variable.

88
00:05:35.123 --> 00:05:40.353
And what we do next is that because we
want to use this model when the image

89
00:05:40.353 --> 00:05:46.908
from the is loaded, we actually need to
call our handleFilePicker util method.

90
00:05:46.908 --> 00:05:51.681
So file picker, and
if you use VS Code it probably or

91
00:05:51.681 --> 00:05:55.127
might have been imported directly.

92
00:05:55.127 --> 00:05:57.158
Otherwise, it's you write it here,

93
00:05:57.158 --> 00:06:01.396
so you import the function
handleFilePicker from the utils.

94
00:06:01.396 --> 00:06:04.996
And if we go back quickly to what this
does, as I was mentioning before,

95
00:06:04.996 --> 00:06:06.676
it takes in a callback function,

96
00:06:06.676 --> 00:06:10.526
because this callback function is going
to be used when the image is loaded.

97
00:06:10.526 --> 00:06:13.509
So once we've selected
it from the file picker,

98
00:06:13.509 --> 00:06:18.371
we're directly going to feed that image
to the predict function of the model.

99
00:06:18.371 --> 00:06:21.820
So here we're just gonna pass it
a function we have not written yet, but

100
00:06:21.820 --> 00:06:25.921
it's gonna be called predict, and
we're going to to write it right now.

101
00:06:25.921 --> 00:06:30.532
So now if you write the function predict,
also an async function, and

102
00:06:30.532 --> 00:06:32.498
we pass it the image element.

103
00:06:32.498 --> 00:06:37.486
When we call the function on the model,
it'll produce predictions, so

104
00:06:37.486 --> 00:06:41.359
we're gonna have a variable
called predictions.

105
00:06:41.359 --> 00:06:46.230
And what we can do is that because we have
the model available, we can do model dot,

106
00:06:46.230 --> 00:06:50.589
oops, and then detect is the method
that you can call on the model.

107
00:06:50.589 --> 00:06:52.835
And we're going to pass
it the image element.

108
00:06:52.835 --> 00:06:57.438
And here at this point,
you can either console log it,

109
00:06:57.438 --> 00:07:02.541
console log the predictions,
or you can also, if you want,

110
00:07:02.541 --> 00:07:07.765
import the showResult function
that's in the utils as well.

111
00:07:07.765 --> 00:07:11.449
So here, again, if you use VS Code,
it might have done it automatically,

112
00:07:11.449 --> 00:07:15.760
otherwise you just need to add
showResult on this line here at the top.

113
00:07:15.760 --> 00:07:21.612
And at this point, all we need to do then,
is actually call our init function.

114
00:07:21.612 --> 00:07:26.596
And now, if you have installed and
if you've written this code and

115
00:07:26.596 --> 00:07:31.592
if you go back to the browser and
you refresh, what should happen?

116
00:07:31.592 --> 00:07:34.985
Is when you click Choose File,
it opens to the file picker.

117
00:07:34.985 --> 00:07:37.960
And then here I have
an image of a little cat.

118
00:07:37.960 --> 00:07:40.160
I have prediction cat and
probability 0.98.

119
00:07:40.160 --> 00:07:46.439
So the predictions or the probabilities
come back as a number between 0 and 1.

120
00:07:46.439 --> 00:07:49.632
And 0.98 just mean that the model

121
00:07:49.632 --> 00:07:54.378
is 98% confident that what's
in the image is a cat.

122
00:07:54.378 --> 00:07:59.337
So in this [LAUGH] case, that is
basically all the code that you need to

123
00:07:59.337 --> 00:08:03.095
just use a pre-trained
model in TensorFlow.js.

124
00:08:03.095 --> 00:08:06.800
And in general, even if you use other
tools, that's the real purpose or

125
00:08:06.800 --> 00:08:09.315
the real benefit of using
a pre-trained model.

126
00:08:09.315 --> 00:08:13.115
It really reduces the amount of code
that you have to write yourself to

127
00:08:13.115 --> 00:08:16.635
actually start and
get a result and get predictions.

128
00:08:16.635 --> 00:08:21.593
So as I was saying before, using this
model here, I have a picture of a cat and

129
00:08:21.593 --> 00:08:25.330
it was right, but
there's a lot of cats on the Internet.

130
00:08:25.330 --> 00:08:27.814
So if this model was
trained with Google images,

131
00:08:27.814 --> 00:08:30.610
then it's pretty nice that
you can recognize the cat.

132
00:08:30.610 --> 00:08:33.018
But if you have other
images on your desktop and

133
00:08:33.018 --> 00:08:36.909
the model wasn't trained with that,
you might end up noticing that either

134
00:08:36.909 --> 00:08:40.834
the label is wrong and then
the probability might be lower as well.

135
00:08:40.834 --> 00:08:43.189
And this is what I was mentioning before,

136
00:08:43.189 --> 00:08:47.154
is that I did not find what
CocoSSD was actually trained with.

137
00:08:47.154 --> 00:08:51.445
I could have maybe done more research,
but I think at some point,

138
00:08:51.445 --> 00:08:56.283
I don't have the image here, but I had
a cooking class with my work team and

139
00:08:56.283 --> 00:08:59.038
I took a picture of the, it was a risotto.

140
00:08:59.038 --> 00:09:01.523
We made a risotto and
I just tried it with it, and

141
00:09:01.523 --> 00:09:05.577
I think it detected that it was a truck or
something, which is not at all that.

142
00:09:05.577 --> 00:09:10.507
So it means that, obviously, CocoSSD was
not trained with images of risottos.

143
00:09:10.507 --> 00:09:15.357
So it just tried to find whatever is
closest in its training data to what it

144
00:09:15.357 --> 00:09:16.707
was trained with.

145
00:09:16.707 --> 00:09:18.786
So I don't know how risotto
can be close to a truck.

146
00:09:18.786 --> 00:09:22.791
But maybe all the rest
of the images were so

147
00:09:22.791 --> 00:09:27.723
far from that,
that it thought that it was a truck.

148
00:09:27.723 --> 00:09:32.721
So again, depending on what you decide
to build, if what you want to do

149
00:09:32.721 --> 00:09:37.233
is build an app that detects animals,
then you should be fine.

150
00:09:37.233 --> 00:09:38.515
Or, you have a question?

151
00:09:38.515 --> 00:09:43.151
&gt;&gt; Yeah, so the CocoSSD is 7K?

152
00:09:43.151 --> 00:09:48.035
And I'm assuming if you wanted
to get more accurate models,

153
00:09:48.035 --> 00:09:53.220
it would be far, far larger,
cuz that's a pretty small model.

154
00:09:53.220 --> 00:09:59.095
&gt;&gt; Yes, so it's definitely possible, but
again, it depends on what you want to do.

155
00:09:59.095 --> 00:10:03.667
Because then if you make your own and
it's more tuned to the images you want to

156
00:10:03.667 --> 00:10:06.605
detect, then you might
not need that much data.

157
00:10:06.605 --> 00:10:08.097
So it really depends on what you wanna do.

158
00:10:08.097 --> 00:10:11.680
And with pre-trained models,
what's difficult is that, obviously,

159
00:10:11.680 --> 00:10:13.584
if you want to do your own custom thing,

160
00:10:13.584 --> 00:10:16.262
it might be very different
from the data that was used.

161
00:10:16.262 --> 00:10:19.604
So, of course, more data is better.

162
00:10:19.604 --> 00:10:23.885
But again, the model is just
the output of the training data.

163
00:10:23.885 --> 00:10:26.585
So the model does not
contain all of the images.

164
00:10:26.585 --> 00:10:31.427
The images were fed into the algorithm
that then updated a model,

165
00:10:31.427 --> 00:10:36.268
and some models are heavier than others,
but it's not going to be

166
00:10:36.268 --> 00:10:40.424
as big as the gigabytes of
data that you trained it with.

167
00:10:40.424 --> 00:10:43.334
So it's possible that maybe it's the size,

168
00:10:43.334 --> 00:10:47.020
but it's also optimized for
it to be used in the browser.

169
00:10:47.020 --> 00:10:51.913
So it really depends on
what you want to do.

170
00:10:51.913 --> 00:10:56.100
Cuz there's another model called
MobileNet, and I don't know how

171
00:10:56.100 --> 00:11:00.435
much bigger it is, but actually felt
that when I was using MobileNet,

172
00:11:00.435 --> 00:11:03.966
I had lower accuracy
than with using CocoSSD.

173
00:11:03.966 --> 00:11:07.694
So it could have been that the data that
was trained to use MobileNet was even

174
00:11:07.694 --> 00:11:11.068
further than what I needed,
maybe there were no cats in MobileNet or

175
00:11:11.068 --> 00:11:13.286
no risotto or whatever.

176
00:11:13.286 --> 00:11:17.176
But sometimes I just actually didn't
look at the size of MobileNet.

177
00:11:17.176 --> 00:11:23.755
So maybe it is related, but
also it's like, I mean, yeah, gzip is 2.8.

178
00:11:23.755 --> 00:11:27.884
So I would say it depends as
a classic senior engineer.

179
00:11:27.884 --> 00:11:30.892
[LAUGH]
&gt;&gt; It's just amazing to me that it's that

180
00:11:30.892 --> 00:11:34.385
small that you could easily
put this in a web app.

181
00:11:34.385 --> 00:11:37.225
&gt;&gt; That's the whole
point of Tensorflow.js,

182
00:11:37.225 --> 00:11:42.589
is to be able to actually build machine
learning applications in JavaScript.

183
00:11:42.589 --> 00:11:49.539
So again, as I said, if you use an image
and it was tuned to it, then it's great.

184
00:11:49.539 --> 00:11:53.389
But again, it will depend on what
you actually want to predict.

185
00:11:53.389 --> 00:11:57.630
Maybe sometimes it might not know what
a pin is, or a glass, or a phone.

186
00:11:57.630 --> 00:12:01.953
So it's gonna be a bit of trial and
error and see what works for you.

187
00:12:01.953 --> 00:12:06.201
But in terms of steps that you
have to take, you import it,

188
00:12:06.201 --> 00:12:08.726
then you load the model.

189
00:12:08.726 --> 00:12:11.646
Then here I have some utils, but you
don't even have to write a file picker.

190
00:12:11.646 --> 00:12:16.601
If you wanted,
you could just add an image tag here with

191
00:12:16.601 --> 00:12:22.312
the source to a local image or
a remote image hosted somewhere,

192
00:12:22.312 --> 00:12:25.892
and all you would need to do is get that.

193
00:12:25.892 --> 00:12:30.533
Don't write that because it's not gonna
work, but if you're just doing a document,

194
00:12:30.533 --> 00:12:33.713
getElementsByTagName like image,
something like that,

195
00:12:33.713 --> 00:12:37.289
then you would be able to pass that in and
that would be all you need.

196
00:12:37.289 --> 00:12:39.455
So I just tried to be
a bit more interactive so

197
00:12:39.455 --> 00:12:42.573
that you can let the user pick
an image that they want to detect.

198
00:12:42.573 --> 00:12:46.482
But it could be just as quick
as having a tag with an image,

199
00:12:46.482 --> 00:12:50.479
then getting it in JavaScript and
feeding it to the model.

