WEBVTT

1
00:00:00.059 --> 00:00:04.222
So kind of the same thing as project-1,
where I have a starter HTML file,

2
00:00:04.222 --> 00:00:07.342
and we're going to kind of
fill in the blanks and write.

3
00:00:07.342 --> 00:00:10.551
Except that this time
there's no utils file,

4
00:00:10.551 --> 00:00:13.774
we're gonna write a lot
of this from scratch.

5
00:00:13.774 --> 00:00:16.341
So there is a part 2 as
well to this project.

6
00:00:16.341 --> 00:00:21.321
And part 2 is where instead of teaching
the model through teachable machine,

7
00:00:21.321 --> 00:00:24.804
we're going to do everything
in our own application.

8
00:00:24.804 --> 00:00:30.941
But to get started, as more of the quick
start, we just have three divs here.

9
00:00:30.941 --> 00:00:34.397
There's a Start button that's
gonna kinda init everything.

10
00:00:34.397 --> 00:00:37.841
And then we have a webcam-container and

11
00:00:37.841 --> 00:00:42.102
a label-container so
pretty, just small divs.

12
00:00:42.102 --> 00:00:43.978
So if we open, let me just check that.

13
00:00:43.978 --> 00:00:47.620
Verify that here,
the first file that's imported is part 1.

14
00:00:47.620 --> 00:00:50.244
It should be if you have
not modified these files.

15
00:00:50.244 --> 00:00:53.710
So we're going to start writing our code.

16
00:00:53.710 --> 00:00:58.158
Okay, so if you have run npm install,

17
00:00:58.158 --> 00:01:03.441
you should now be able to run,
npm run start.

18
00:01:03.441 --> 00:01:06.276
And yes, okay, no error, that's cool.

19
00:01:06.276 --> 00:01:09.510
Okay, so here we just have a Start button,
at the moment it does nothing,

20
00:01:09.510 --> 00:01:10.617
we have no interaction.

21
00:01:10.617 --> 00:01:14.128
Yeah, no interaction that we implemented.

22
00:01:14.128 --> 00:01:19.465
So the point of this example is,
again, we're gonna start the webcam.

23
00:01:19.465 --> 00:01:23.801
I'm gonna do a little bit differently,
because here,

24
00:01:23.801 --> 00:01:28.599
if you look at the index.html,
there is actually a teachable

25
00:01:28.599 --> 00:01:32.953
machine image library that
you can have in a script tag.

26
00:01:32.953 --> 00:01:37.835
So import into your application and they
have their own syntax in terms of toggling

27
00:01:37.835 --> 00:01:40.381
the webcam and taking a screen capture, so

28
00:01:40.381 --> 00:01:44.145
we're just gonna use what
they're offering us, basically.

29
00:01:44.145 --> 00:01:48.522
So here, I'm gonna change the syntax
a little bit, we're not importing here.

30
00:01:48.522 --> 00:01:52.599
We have the script tags there just to show
you that you can do it in two different

31
00:01:52.599 --> 00:01:56.117
ways, but there's just the minified
TensorFlow.js library and

32
00:01:56.117 --> 00:01:58.283
the minified teachable machine image.

33
00:01:58.283 --> 00:02:03.567
Because, as I showed before, there's
also one with sound and one with pose.

34
00:02:03.567 --> 00:02:09.299
Okay, so first of all, to be able to
use our model, we also have to load it.

35
00:02:09.299 --> 00:02:13.787
So the first thing that we're gonna do
is go and get the path to the file.

36
00:02:13.787 --> 00:02:17.787
So let's say, or maybe,
yeah, I can call it path.

37
00:02:17.787 --> 00:02:21.304
And then, for me here,
I can see I called it my_model".

38
00:02:21.304 --> 00:02:27.234
So here, it's just going to be the folder
that has the three different files here.

39
00:02:27.234 --> 00:02:32.675
And then we also want to be able to
add interaction with a startButton,

40
00:02:32.675 --> 00:02:37.669
so we're going to get that button,
I think it has idea of start.

41
00:02:37.669 --> 00:02:41.711
So at the moment,
we have the path to the folder,

42
00:02:41.711 --> 00:02:47.437
we have a startButton, and we want
to be able to add an onclick event.

43
00:02:47.437 --> 00:02:52.095
So as we did before,
we have startButton.onclick,

44
00:02:52.095 --> 00:02:54.371
we have arrow function and

45
00:02:54.371 --> 00:03:00.177
we are going to call init that we
have not created yet, but we will.

46
00:03:00.177 --> 00:03:05.722
Again, we're just kinda
setting up the project.

47
00:03:05.722 --> 00:03:10.231
And now let's create
the actual init function.

48
00:03:10.231 --> 00:03:17.025
So, we have, oops, init, and probably will
actually be an asynchronous function,

49
00:03:17.025 --> 00:03:21.607
cuz I think, yes,
it needs to be asynchronous function.

50
00:03:21.607 --> 00:03:24.895
Okay, as was mentioned very recently,

51
00:03:24.895 --> 00:03:29.841
in the my_model folder,
there's three different files.

52
00:03:29.841 --> 00:03:34.507
So here in the model.json file,
what this has is more the description of

53
00:03:34.507 --> 00:03:38.723
the different layers of the model
that was actually downloaded.

54
00:03:38.723 --> 00:03:41.675
So for example,
here you have class name is sequential.

55
00:03:41.675 --> 00:03:45.483
So in terms of types of models that
you can create with TensorFlow.js,

56
00:03:45.483 --> 00:03:48.283
there is sequential models and
functional models.

57
00:03:48.283 --> 00:03:50.730
I have not used functional models before,
but

58
00:03:50.730 --> 00:03:54.255
sequential just means that you have
layers that are in a sequence.

59
00:03:54.255 --> 00:03:57.311
So you start by feeding a lot
of data to your first layer, and

60
00:03:57.311 --> 00:04:00.610
then it has an output that is fed
to the second, and to the third,

61
00:04:00.610 --> 00:04:02.403
and how many layers that you have.

62
00:04:02.403 --> 00:04:08.299
So here, oops, here, for example,
you have layers that's an array in here,

63
00:04:08.299 --> 00:04:14.379
so it's a description of how your model
was actually built in terms of its layers.

64
00:04:14.379 --> 00:04:18.727
And you have different
parameters like here, Conv1,

65
00:04:18.727 --> 00:04:22.900
that must be a convolutional,
like a Conv2D layer.

66
00:04:22.900 --> 00:04:27.400
So usually, it's what's working
with images, and 2D means x and y,

67
00:04:27.400 --> 00:04:32.503
two-dimensional layer, and you have
some parameters like number of filters.

68
00:04:32.503 --> 00:04:34.834
I wouldn't know too much more about this,

69
00:04:34.834 --> 00:04:37.767
cuz obviously we did not
write this model ourselves.

70
00:04:37.767 --> 00:04:41.971
It's a combination of what we're using
the background of teachable machine,

71
00:04:41.971 --> 00:04:45.999
which is the MobileNet model, and
we're adding our content on top of that.

72
00:04:45.999 --> 00:04:50.253
That might make a little bit more sense
once we do part 2, where we're writing

73
00:04:50.253 --> 00:04:54.455
everything from scratch, but the
model.json by itself is not everything.

74
00:04:54.455 --> 00:04:58.262
What you also need is the metadata.json.

75
00:04:58.262 --> 00:05:02.866
And this is more of like it also has some
parameters where it tells you the version

76
00:05:02.866 --> 00:05:07.470
of TensorFlow.js used, the package that
it might need to actually use with and

77
00:05:07.470 --> 00:05:09.482
the labels that we were training.

78
00:05:09.482 --> 00:05:14.062
So right and left, so that then when
you have the prediction from the model,

79
00:05:14.062 --> 00:05:16.495
it will know it's either right or left,

80
00:05:16.495 --> 00:05:19.662
it cannot predict something
that it doesn't know.

81
00:05:19.662 --> 00:05:22.333
And also,
it was trained with an image size of 224.

82
00:05:22.333 --> 00:05:28.198
So that's kind of important, because
when you're feeding images to the model,

83
00:05:28.198 --> 00:05:32.033
it will expect an image size
of that number of pixels.

84
00:05:32.033 --> 00:05:35.722
And then we have the weights file here,
but this is a binary file.

85
00:05:35.722 --> 00:05:39.608
So even if I was opening it
with a X editor or something,

86
00:05:39.608 --> 00:05:44.441
that's not really readable, but
this weights file is essential.

87
00:05:44.441 --> 00:05:48.880
So if you thought, that's useless,
I'm gonna remove it, you actually can't.

88
00:05:48.880 --> 00:05:54.796
It won't work, because I think
it's in the, oop, not here.

89
00:05:54.796 --> 00:06:00.137
Yes, so here in your model.json file,
it's describing how the model was built.

90
00:06:00.137 --> 00:06:04.631
And it will need this weights stat
bin file, because that will tell

91
00:06:04.631 --> 00:06:09.383
it a little bit how the model was
tweaked during the training process.

92
00:06:09.383 --> 00:06:12.346
So as I was mentioning
earlier on in the course,

93
00:06:12.346 --> 00:06:16.283
the weights are just adjusted
as the model is being retrained.

94
00:06:16.283 --> 00:06:20.925
So even though we can't see what's in this
weight span or if you were doing maybe

95
00:06:20.925 --> 00:06:25.176
binary reverse engineering or
something like that, it still needs it.

96
00:06:25.176 --> 00:06:29.850
So even we're gonna import just the
model.json file, but in the background,

97
00:06:29.850 --> 00:06:34.403
this file is going to kind of require
the details that are in the weights file.

98
00:06:34.403 --> 00:06:37.461
So now that we have these three files,
though,

99
00:06:37.461 --> 00:06:42.437
we need to just specify the ones that
we're gonna import in our application.

100
00:06:42.437 --> 00:06:47.301
So in our init function, we can have,

101
00:06:47.301 --> 00:06:52.931
oops, a variable called const modelPath.

102
00:06:52.931 --> 00:06:56.380
We called it path before, so
let's just keep it like that.

103
00:06:56.380 --> 00:06:59.476
And that would be either path and
model.json.

104
00:06:59.476 --> 00:07:02.981
So because we're going into the, sorry,

105
00:07:02.981 --> 00:07:07.375
by the way, at the beginning,
I forgot the end slash here.

106
00:07:07.375 --> 00:07:09.221
So if you've been following along,

107
00:07:09.221 --> 00:07:12.382
don't forget to pass in the slash
after the name of the folder.

108
00:07:12.382 --> 00:07:16.882
So the path to the model is
the path + the name, model.json.

109
00:07:16.882 --> 00:07:21.905
If you decide to rename that file,
don't forget to rename it here as well,

110
00:07:21.905 --> 00:07:25.495
and we're going to import
the metadataPath as well,

111
00:07:25.495 --> 00:07:30.161
and that would be the same thing path,
but two metadata.json file.

112
00:07:30.161 --> 00:07:33.963
Okay, so at the moment,
it's just stored in variables,

113
00:07:33.963 --> 00:07:37.773
we haven't actually loaded
anything in the browser yet.

114
00:07:37.773 --> 00:07:40.747
Let's declare a model variable
as well outside of the function,

115
00:07:40.747 --> 00:07:43.025
cuz we're gonna use it in
a few different places.

116
00:07:43.025 --> 00:07:45.143
So we have a model variable, and

117
00:07:45.143 --> 00:07:49.385
here we're going to actually
assign it the model being loaded.

118
00:07:49.385 --> 00:07:54.965
See it's an await function, and here,
we're writing tmImage and that's

119
00:07:54.965 --> 00:08:01.260
coming from the teachable machine library
that's impoted in the index.html file.

120
00:08:01.260 --> 00:08:06.003
So we have tmImage.load,
because it's always load.

121
00:08:06.003 --> 00:08:08.589
And then we are gonna pass
it the two parameters.

122
00:08:08.589 --> 00:08:14.244
So the path to the model, so modelPath and
the path to the metadata file as well.

123
00:08:14.244 --> 00:08:20.187
So at this point here, in the model
variable should be our accessible

124
00:08:20.187 --> 00:08:26.237
like the actual model loaded in
the browser so you can actually use it.

125
00:08:26.237 --> 00:08:31.847
Then what we can do, there's a function
that you can call on that model that's

126
00:08:31.847 --> 00:08:37.887
called getTotalClasses to kind of see that
the total classes that we trained is two.

127
00:08:37.887 --> 00:08:41.477
In our case, we know the number of
classes, because we trained the model.

128
00:08:41.477 --> 00:08:45.985
So I'm gonna write it anyway in case
sometimes someone sends you a model that

129
00:08:45.985 --> 00:08:50.352
you have to use and you don't know how
many classes there is even though you

130
00:08:50.352 --> 00:08:55.233
could see it from here, but let's just
imagine that we want to write that anyway.

131
00:08:55.233 --> 00:08:59.478
So we have maxPredictions or
could also be, no,

132
00:08:59.478 --> 00:09:04.447
it could be maxPredictions,
cuz it could either be one of

133
00:09:04.447 --> 00:09:09.635
the two label, so
that would be model.getTotalClasses.

134
00:09:09.635 --> 00:09:17.534
So that's also a method that's available
on the model when we're using tmImage.

135
00:09:17.534 --> 00:09:21.356
And then at this point,
the model is loaded and

136
00:09:21.356 --> 00:09:24.795
we just have the number of total classes.

137
00:09:24.795 --> 00:09:28.671
Okay, so the next step that we
have to do is to get the webcam,

138
00:09:28.671 --> 00:09:32.171
because we're going to have
to take pictures from it.

139
00:09:32.171 --> 00:09:36.239
So where you declared the model variable,

140
00:09:36.239 --> 00:09:39.968
we can also have webcam variable here.

141
00:09:39.968 --> 00:09:46.243
And we're going to assign it, webcam =.

142
00:09:46.243 --> 00:09:51.589
Again, it's going to be method that
you can call from tmImage, so we're

143
00:09:51.589 --> 00:09:57.644
gonna instantiate a new webcam object, so
a new tmImage.webcam with a capital M.

144
00:09:57.644 --> 00:10:00.628
Don't forget that,

145
00:10:00.628 --> 00:10:05.943
otherwise it will not know what it is.

146
00:10:05.943 --> 00:10:10.246
And in that webcam,
we are going to pass it, oops, a question?

147
00:10:10.246 --> 00:10:15.331
&gt;&gt; Just real simple one, how tmImage is in
scope because of the CDN calls additional?

148
00:10:15.331 --> 00:10:16.235
&gt;&gt; Yes.

149
00:10:16.235 --> 00:10:17.147
&gt;&gt; Okay.

150
00:10:17.147 --> 00:10:21.913
&gt;&gt; Yeah, exactly, I didn't import it
the way that I did before just to show

151
00:10:21.913 --> 00:10:24.414
that you could do it in multiple ways,

152
00:10:24.414 --> 00:10:28.732
you could definitely also have
a package that you import, yeah.

153
00:10:28.732 --> 00:10:29.672
But yes, yes, that's right.

154
00:10:29.672 --> 00:10:33.705
I think that when you import this,
it adds,

155
00:10:33.705 --> 00:10:37.965
yes, it makes available
a tmImage variable.

156
00:10:37.965 --> 00:10:41.987
Okay, so now that we kind of declared
a new webcam, there's actually parameters

157
00:10:41.987 --> 00:10:45.215
that you need to pass and
that will be the dimension of the webcam.

158
00:10:45.215 --> 00:10:49.638
So here in my particular
example had 200 and 200 and

159
00:10:49.638 --> 00:10:54.537
true is flipping of, I mean,
there's a third value, sorry.

160
00:10:54.537 --> 00:10:57.589
I have it true, but I'm wondering
if we should have true or false.

161
00:10:57.589 --> 00:10:58.990
It's like flipping the webcam.

162
00:10:58.990 --> 00:11:02.518
And in the previous example,
we had it false, so

163
00:11:02.518 --> 00:11:05.972
let's start with false
to keep it consistent.

164
00:11:05.972 --> 00:11:09.252
And if we had an issue
because we just did right and

165
00:11:09.252 --> 00:11:12.777
left, maybe flip is going to,
let's give it a try.

166
00:11:12.777 --> 00:11:15.523
So I'll have to remember later
that if there's an issue,

167
00:11:15.523 --> 00:11:16.879
it might be because of that.

168
00:11:16.879 --> 00:11:21.027
But for now, let's have it false, and

169
00:11:21.027 --> 00:11:27.081
we need to actually call a new function,
that's setup.

170
00:11:27.081 --> 00:11:29.807
So I think that's going to,
actually, this, it's an await.

171
00:11:29.807 --> 00:11:34.039
So await webcam.setup, and that's going
to do things in the background that I'm

172
00:11:34.039 --> 00:11:37.191
actually, it's going to
request access to the camera.

173
00:11:37.191 --> 00:11:40.685
So the same way that we had it before,
but more manually.

174
00:11:40.685 --> 00:11:44.172
This setup is making sure that it's
requesting you for access, and

175
00:11:44.172 --> 00:11:46.202
you'll have to allow it if it asks you.

176
00:11:46.202 --> 00:11:50.176
If it doesn't ask you, you might have at
some point allowed it for all websites or

177
00:11:50.176 --> 00:11:51.292
something like that.

178
00:11:51.292 --> 00:11:54.812
But at this point, it's not actually
rendering the webcam in the page.

179
00:11:54.812 --> 00:11:58.558
So what we're gonna do is
await webcam.play, and

180
00:11:58.558 --> 00:12:03.358
that will actually start playing
the webcam feed in the browser.

181
00:12:03.358 --> 00:12:08.596
And then after that, so
even though you have the webcam set up and

182
00:12:08.596 --> 00:12:14.320
it will start streaming, we need to
actually do something with that.

183
00:12:14.320 --> 00:12:17.358
We need to start kind of
continuously calling a function so

184
00:12:17.358 --> 00:12:20.900
that it will run continuously
the prediction on the webcam output.

185
00:12:20.900 --> 00:12:26.810
So what we're gonna do, we just have
a window.requestAnimationFrame, and

186
00:12:26.810 --> 00:12:32.282
we are gonna call it, I'm gonna try
to find a word that's maybe, okay.

187
00:12:32.282 --> 00:12:37.647
We're gonna call it loop just to
be maybe clear that it's looping.

188
00:12:37.647 --> 00:12:41.777
But we have not declared that
function yet, so we will.

189
00:12:41.777 --> 00:12:45.721
First, we need to append
the camera onto the page,

190
00:12:45.721 --> 00:12:49.408
cuz at the moment,
we instantiated on object.

191
00:12:49.408 --> 00:12:52.764
We are setting it up and playing it, but

192
00:12:52.764 --> 00:12:58.885
we're not appending the image coming
back from the webcam to the page.

193
00:12:58.885 --> 00:13:02.805
So here,
if you look at the index.html file,

194
00:13:02.805 --> 00:13:06.233
this is what the webcam-container is.

195
00:13:06.233 --> 00:13:13.096
So we're going to do
document.getElementById("webcam-containe-

196
00:13:13.096 --> 00:13:17.062
r"), and we're going to append as a child,

197
00:13:17.062 --> 00:13:22.817
not just the webcam, but
webcam.canvas, webcam.canvas.

198
00:13:22.817 --> 00:13:29.911
Okay, and at this point,
that should be it for the beginning.

199
00:13:29.911 --> 00:13:33.338
So we have webcam,
it plays, it's rendered.

200
00:13:33.338 --> 00:13:37.320
But we have not declared
our looping function.

