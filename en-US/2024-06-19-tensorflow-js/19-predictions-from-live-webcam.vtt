WEBVTT

1
00:00:00.000 --> 00:00:03.989
So now if we think in terms of
what's happening in the UI,

2
00:00:03.989 --> 00:00:09.491
it means that we've clicked on our train
model, we see a little bit of output.

3
00:00:09.491 --> 00:00:13.460
And what we want to do is actually
start predicting the live things

4
00:00:13.460 --> 00:00:15.344
that are happening on screen.

5
00:00:15.344 --> 00:00:18.103
So, we have a predict button
that I just showed, so

6
00:00:18.103 --> 00:00:20.426
we're going to add an onClick event on it.

7
00:00:20.426 --> 00:00:24.140
So predictButton.onclick,

8
00:00:24.140 --> 00:00:29.431
that's gonna be an async function as well.

9
00:00:29.431 --> 00:00:32.547
And, oops, not buttons, button, sorry.

10
00:00:32.547 --> 00:00:37.590
Okay, so predictButton.onclick,
we're gonna start

11
00:00:37.590 --> 00:00:42.115
by having our pre,
that is predicting set to true.

12
00:00:42.115 --> 00:00:47.182
And while we are predicting,
because again, we wanna do it on the fly,

13
00:00:47.182 --> 00:00:51.334
we don't want to predict only
one snapshot of the camera.

14
00:00:51.334 --> 00:00:54.850
It's like, as we are moving, we want
to get each frame and predict them.

15
00:00:54.850 --> 00:00:59.954
So we're gonna have a while loop and
whiloPredicting, what we're going

16
00:00:59.954 --> 00:01:04.741
to do is reuse our getImage function
as what that we declared before.

17
00:01:04.741 --> 00:01:08.685
So we can recreate a variable code image,
and we can call again,

18
00:01:08.685 --> 00:01:12.646
our getImage function because
it's going to do the same thing.

19
00:01:12.646 --> 00:01:17.074
It's going to take live snapshots, but
instead of storing them in memory to add

20
00:01:17.074 --> 00:01:20.459
examples, we're actually going
to predict it right away.

21
00:01:20.459 --> 00:01:25.473
So first of all,
we are going to make a prediction,

22
00:01:25.473 --> 00:01:28.167
first through Mobilenet.

23
00:01:28.167 --> 00:01:33.646
So what we're doing is
we can call it initial

24
00:01:33.646 --> 00:01:38.987
model prediction or something like that.

25
00:01:38.987 --> 00:01:43.188
And we're going to call
initialModel.predict, because,

26
00:01:43.188 --> 00:01:48.355
if we remember, I mean, we haven't
used mobile nets in the other example,

27
00:01:48.355 --> 00:01:52.333
we use Coco SSD, but
it would be either predict or detect.

28
00:01:52.333 --> 00:01:57.133
But we're gonna pass our image in here,
and if you remember the way that we're

29
00:01:57.133 --> 00:02:02.531
loading the mobile net, we're not loading
the model itself, we're loading a layer.

30
00:02:02.531 --> 00:02:06.758
So what's coming back here is not
necessarily a label of like, left and

31
00:02:06.758 --> 00:02:11.838
right, it's called embeddings, and I can
probably talk more about that tomorrow.

32
00:02:11.838 --> 00:02:15.639
But once we do a first prediction
with our layer of mobile net,

33
00:02:15.639 --> 00:02:19.233
we can now pass it to the model
that we just created before.

34
00:02:19.233 --> 00:02:23.278
So here we're actually going to
have access to our predictions,

35
00:02:23.278 --> 00:02:26.893
where we have our new model and
we can call predict as well.

36
00:02:26.893 --> 00:02:30.593
And we are going to pass
in the first kind of,

37
00:02:30.593 --> 00:02:35.193
what's coming back from
the first pass in mobile net.

38
00:02:35.193 --> 00:02:39.097
So at this point, if we just log that,

39
00:02:39.097 --> 00:02:43.006
actually, there's a bit more code.

40
00:02:43.006 --> 00:02:48.412
So to make it better, maybe let's not
log it, let's keep going a little bit.

41
00:02:48.412 --> 00:02:55.880
And we're gonna want to extract
the class of the predicted gesture.

42
00:02:55.880 --> 00:03:00.331
So we can do predictedClass,

43
00:03:00.331 --> 00:03:07.099
this is going to be
coming from predictions.

44
00:03:07.099 --> 00:03:10.495
In the previous example, when I did
some kind of calculation of like, math,

45
00:03:10.495 --> 00:03:13.159
max, and stuff,
ao there's actually another way to do it,

46
00:03:13.159 --> 00:03:15.167
and I just wanted to
show you different ways.

47
00:03:15.167 --> 00:03:19.934
And you can call an as one-dimensional
function, that is something that's

48
00:03:19.934 --> 00:03:24.042
available on predictions coming
from a model in TensorFlow.js,

49
00:03:24.042 --> 00:03:26.189
and then you can also call argMax.

50
00:03:26.189 --> 00:03:29.107
So these are not like,
native JavaScript methods,

51
00:03:29.107 --> 00:03:32.905
it's what can be called on predictions
coming back from the model.

52
00:03:32.905 --> 00:03:35.941
So in actual new model,
the custom way to do it, but

53
00:03:35.941 --> 00:03:38.849
there is there is a shorter way to do it,
as well.

54
00:03:38.849 --> 00:03:43.565
So this is going to return
the predicted class of the argument

55
00:03:43.565 --> 00:03:46.346
that has the maximum probability.

56
00:03:46.346 --> 00:03:50.659
And then what I want to do is we're

57
00:03:50.659 --> 00:03:55.587
going to get maybe the ID of the class,

58
00:03:55.587 --> 00:03:59.761
I forgot why I wanted to do this.

59
00:03:59.761 --> 00:04:00.678
I think we're gonna log it.

60
00:04:00.678 --> 00:04:06.857
Okay, so let's just try,
so we're gonna do classid,

61
00:04:06.857 --> 00:04:11.858
and what you can have
is the predicted class.

62
00:04:11.858 --> 00:04:15.621
So we're gonna do, wait, predictedClass.

63
00:04:15.621 --> 00:04:19.533
Yeah, there's a method called data, and
we can look later about what that returns.

64
00:04:19.533 --> 00:04:25.517
But on this, we can get the first element,
which should be, because predictedClass

65
00:04:25.517 --> 00:04:30.437
is the maximum, I think that function
might reorder by probability.

66
00:04:30.437 --> 00:04:34.288
And here we're getting the first one
because we're interested in the one

67
00:04:34.288 --> 00:04:35.975
with the maximum probability.

68
00:04:35.975 --> 00:04:40.390
So what we can do it now Is then
we're gonna log our labels,

69
00:04:40.390 --> 00:04:45.184
our array of left and right, and
we're going to call classId.

70
00:04:45.184 --> 00:04:49.480
So this is going to be like index, I
could have just called the index as well.

71
00:04:49.480 --> 00:04:53.598
So it's gonna be the index of the label
with the highest probability, and

72
00:04:53.598 --> 00:04:55.931
we're getting it from our labels array.

73
00:04:55.931 --> 00:04:59.152
And just to avoid keeping too much stuff,

74
00:04:59.152 --> 00:05:03.121
we're gonna call dispose again,
img.dispose.

75
00:05:03.121 --> 00:05:11.588
And we also should call the function
that we called previously, nextPrint.

76
00:05:11.588 --> 00:05:14.750
So again,
every time it's kind of like waiting for

77
00:05:14.750 --> 00:05:19.320
requests admission frame to finish and
then it's like running the rest.

78
00:05:19.320 --> 00:05:24.037
So at this point, I think that we're
almost done, but now is gonna be the time

79
00:05:24.037 --> 00:05:28.775
where we wrote a bunch of code, I'm gonna
try it and see if it actually works.

80
00:05:28.775 --> 00:05:31.282
And if it doesn't, that's gonna be fun.

81
00:05:31.282 --> 00:05:36.353
So now at this point, if we refresh
our project, I'm just going to open

82
00:05:36.353 --> 00:05:41.865
the console log over the console, so
we can see the logs when they are coming.

83
00:05:41.865 --> 00:05:46.205
But what you should be able to do is,
when you press,

84
00:05:46.205 --> 00:05:51.343
I'm gonna tilt my head left,
I'm gonna press the button.

85
00:05:51.343 --> 00:05:52.456
It's not working.

86
00:05:52.456 --> 00:05:53.098
I knew it.

87
00:05:53.098 --> 00:05:56.974
Okay, when coding with two arguments,
the first argument must be a string.

88
00:05:56.974 --> 00:06:00.511
Okay, there's multiple errors,
which is not fun.

89
00:06:00.511 --> 00:06:02.973
Okay, so I have an error with inner text.

90
00:06:02.973 --> 00:06:05.971
So there is somewhere where
I am setting inner text,

91
00:06:05.971 --> 00:06:08.227
maybe an element that doesn't exist.

92
00:06:08.227 --> 00:06:10.362
Is that the issue?

93
00:06:10.362 --> 00:06:16.063
Yes, so why does total not exist?

94
00:06:16.063 --> 00:06:18.035
&gt;&gt; I think you need a dash.

95
00:06:18.035 --> 00:06:19.163
&gt;&gt; You're right, thank you.

96
00:06:19.163 --> 00:06:24.282
Okay, I forgot the dash, so, if you
followed as I wrote, yes, add the dash.

97
00:06:24.282 --> 00:06:28.590
Otherwise, if you use the solutions,
then it should already be working for you.

98
00:06:28.590 --> 00:06:32.574
And here, this one, tf.tidy, okay, so

99
00:06:32.574 --> 00:06:39.451
somewhere I used the tidy function and
I must have, I know what it is.

100
00:06:39.451 --> 00:06:43.867
So here, the labels length
is supposed to be the second

101
00:06:43.867 --> 00:06:46.848
argument to the one hot tensor here.

102
00:06:46.848 --> 00:06:49.296
I think that's it.

103
00:06:49.296 --> 00:06:53.624
So if I refresh, and
now if I tilt my head left.

104
00:06:53.624 --> 00:06:58.308
Yay, okay, so I'm gonna 54 examples.

105
00:06:58.308 --> 00:07:04.358
And if I do it right, Okay,

106
00:07:04.358 --> 00:07:09.193
and now if I train the model, so
at this point, we should have images and

107
00:07:09.193 --> 00:07:13.484
labels kinda kept in memory,
waiting to be fit into the model.

108
00:07:13.484 --> 00:07:17.532
So when we click on Train, Okay,

109
00:07:17.532 --> 00:07:20.621
it took a little bit of time, but you can
see the loss and well, it went quickly,

110
00:07:20.621 --> 00:07:23.318
but it started as 0.8,
which is a bit high, it's too close to 1.

111
00:07:23.318 --> 00:07:30.894
And as it's going into 0.000 10, it means
that the probability is much better.

112
00:07:30.894 --> 00:07:35.533
And because it stopped updating, it means
that our model has finished training.

113
00:07:35.533 --> 00:07:39.515
So now if I click on Start Prediction,
okay, I can see a label,

114
00:07:39.515 --> 00:07:44.419
so I have right, and then I have left,
and right, and left, and that's it.

115
00:07:44.419 --> 00:07:47.537
So basically,
instead of using a teachable machine,

116
00:07:47.537 --> 00:07:51.061
where obviously it's much faster,
all of this is actually,

117
00:07:51.061 --> 00:07:54.820
it's kind of basically very similar code,
but in like a nice UI.

118
00:07:54.820 --> 00:08:00.347
You can actually create
an application where you're

119
00:08:00.347 --> 00:08:05.759
letting your users do it
right into your app as well.

120
00:08:05.759 --> 00:08:09.151
So what's happening here is like,
when I refresh them, the modal is gone,

121
00:08:09.151 --> 00:08:10.379
you'd have to retrain it.

122
00:08:10.379 --> 00:08:13.642
So there is, I think there is a way but
I haven't done it right now.

123
00:08:13.642 --> 00:08:19.127
So I wouldn't be able to really
show it to you, but I think there

124
00:08:19.127 --> 00:08:24.836
is a function called saveModel or
maybe, no, I swear I wrote it.

125
00:08:24.836 --> 00:08:27.040
Okay, or maybe it's called save.

126
00:08:27.040 --> 00:08:31.717
And you can save your newly trained
model into some kind of local storage in

127
00:08:31.717 --> 00:08:32.627
the browser.

128
00:08:32.627 --> 00:08:35.386
And I think that then if you
refresh your app, you can

129
00:08:35.386 --> 00:08:39.593
maybe fetch that model directly and have
your app still running with the samples

130
00:08:39.593 --> 00:08:43.445
that you created without having to ask
the user to retrain it every time.

131
00:08:43.445 --> 00:08:48.459
So, when I was playing with transfer
learning, that wasn't really a thing.

132
00:08:48.459 --> 00:08:51.774
So that seems to be,
I don't know how new, but

133
00:08:51.774 --> 00:08:55.953
it seems like you are able to
maybe do something like this.

134
00:08:55.953 --> 00:09:00.833
So in terms of calling the save method,
we will do that later in the workshop,

135
00:09:00.833 --> 00:09:03.311
when we actually create our model, and

136
00:09:03.311 --> 00:09:07.841
we're gonna actually generate files
that we're gonna be able to use.

137
00:09:07.841 --> 00:09:11.925
But I think that's also possible to
do when we do transfer learning.

