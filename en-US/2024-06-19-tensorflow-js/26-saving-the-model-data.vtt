WEBVTT

1
00:00:00.630 --> 00:00:03.220
So here, hopefully it has worked for you.

2
00:00:03.220 --> 00:00:05.445
If you've run node train-drawings.js,

3
00:00:05.445 --> 00:00:09.030
you could you should see this
this as well in the terminal.

4
00:00:09.030 --> 00:00:10.581
And if we go back to the code,

5
00:00:10.581 --> 00:00:14.610
what we haven't done here is we
haven't actually saved the model.

6
00:00:14.610 --> 00:00:19.876
So here you don't see any model folder
where the model has been saved,

7
00:00:19.876 --> 00:00:21.759
so we can write this now.

8
00:00:23.059 --> 00:00:28.119
So here, let me just check this second.

9
00:00:29.139 --> 00:00:33.507
Okay, so we can do a wait and
then model.save, so

10
00:00:33.507 --> 00:00:39.123
that's the method that you can
call to save your model locally,

11
00:00:39.123 --> 00:00:46.273
and as we're going to save it in as a
local file, we can write file as a string.

12
00:00:46.273 --> 00:00:54.315
So, file:// and then we're going to
have it under the public folder and

13
00:00:54.315 --> 00:00:59.867
we're gonna call it model,
and that should be it.

14
00:00:59.867 --> 00:01:02.990
So that means that whenever
the training process is done,

15
00:01:02.990 --> 00:01:06.494
it will save our model into a new
folder that is going to actually,

16
00:01:06.494 --> 00:01:09.299
don't remember if it creates
the folder directly or

17
00:01:09.299 --> 00:01:13.817
if we're going to have to credit
ourselves, but we can try that just now.

18
00:01:13.817 --> 00:01:17.846
So if you save your file and
we run it, might complain about,

19
00:01:17.846 --> 00:01:22.567
I don't know what the model folder is,
no, it didn't complain?

20
00:01:22.567 --> 00:01:23.071
It did.

21
00:01:23.071 --> 00:01:27.989
Okay, so it does create automatically
the folder that as long

22
00:01:27.989 --> 00:01:30.861
as you pass the right path to it.

23
00:01:30.861 --> 00:01:35.661
So now it means that here we have our
machine learning model that has very poor

24
00:01:35.661 --> 00:01:38.811
accuracy [LAUGH], but
it means that here you have,

25
00:01:38.811 --> 00:01:40.987
as I was talking about yesterday.

26
00:01:40.987 --> 00:01:42.565
In the model.json file,

27
00:01:42.565 --> 00:01:46.439
you have the details of the layers
that we created ourselves, so

28
00:01:46.439 --> 00:01:50.835
we can see our sequential, here we
have a first layer that's a conv2d.

29
00:01:50.835 --> 00:01:55.521
And then there are probably some default
settings because variance scaling,

30
00:01:55.521 --> 00:02:01.262
we didn't write that, so it means that
that's probably one of the default stuff.

31
00:02:01.262 --> 00:02:06.282
And here we have a kernel_size that we
did define, we didn't define strides.

32
00:02:06.282 --> 00:02:08.665
I'm not sure how to explain
what strides are, but

33
00:02:08.665 --> 00:02:10.972
here I think the default
values will be 1,1.

34
00:02:10.972 --> 00:02:14.197
And here we have a MaxPooling2D layer, and

35
00:02:14.197 --> 00:02:18.222
you have our activation
that's using 10 units.

36
00:02:18.222 --> 00:02:22.426
So here you can see that you have a mix of
things that we have cleared manually and

37
00:02:22.426 --> 00:02:26.119
a bunch of things that
are probably have default values.

38
00:02:26.119 --> 00:02:29.943
But here we have this and we should be
able to also see that it's actually

39
00:02:29.943 --> 00:02:34.217
then requiring the weights that been
filed and if you remember from yesterday,

40
00:02:34.217 --> 00:02:39.059
that's like a binary file so you can't
really exactly see what's going on.

41
00:02:39.059 --> 00:02:41.449
But the binary, the weights file,

42
00:02:41.449 --> 00:02:46.453
it contains the way that the model
was tweaked as it was being trained.

43
00:02:46.453 --> 00:02:50.701
So usually, sometimes if you
only know the layers of a model,

44
00:02:50.701 --> 00:02:54.473
that doesn't necessarily
tell you really that much.

45
00:02:54.473 --> 00:02:58.802
I think at the moment, if you follow
a little bit what's going on with AI and

46
00:02:58.802 --> 00:03:03.704
open AI and things, you can sometimes hear
people being, open source the weights.

47
00:03:03.704 --> 00:03:07.711
And it's because if you know the way that
your model was created in terms of layers,

48
00:03:07.711 --> 00:03:09.724
it doesn't really tell you everything.

49
00:03:09.724 --> 00:03:13.144
It's like the weights is more the way
that it was tweaked to get to that,

50
00:03:13.144 --> 00:03:17.094
either accuracy or things like that,
so that's also important.

51
00:03:17.094 --> 00:03:25.073
And I guess usually maybe companies
don't want to open source that okay, so

52
00:03:25.073 --> 00:03:30.321
now we have our model and
we saved it to our folder.

53
00:03:30.321 --> 00:03:37.185
So maybe at this point, before we use it
in our app to actually predict things,

54
00:03:37.185 --> 00:03:43.937
let's maybe try to make some changes and
see if we can update the accuracy.

55
00:03:43.937 --> 00:03:47.841
So the thing as well as, you might have
noticed that is that I got 0.5, but

56
00:03:47.841 --> 00:03:49.976
the thing is sometimes
you can rerun it and

57
00:03:49.976 --> 00:03:53.367
it will actually give you see all
of a sudden have 0.9, [LAUGH].

58
00:03:53.367 --> 00:03:55.951
So, the thing as well is that
with machine learning models,

59
00:03:55.951 --> 00:03:59.450
sometimes they're people you will hear
people tell you that they're some kind of

60
00:03:59.450 --> 00:04:01.872
like a black box you don't
really understand how?

61
00:04:01.872 --> 00:04:06.542
They ended up making certain decisions or
having a certain level of accuracy.

62
00:04:06.542 --> 00:04:11.162
So unfortunately, sometimes I just ruin it
a few times and when the accuracy is good,

63
00:04:11.162 --> 00:04:15.062
then I stop touching it, which is
probably not the best way to do it.

64
00:04:15.062 --> 00:04:17.988
But it's also in AI,
you'll hear people say that,

65
00:04:17.988 --> 00:04:22.443
if companies use AI, you should get to a
point where you want to be able to explain

66
00:04:22.443 --> 00:04:26.659
how the model made certain decisions,
but it's difficult.

67
00:04:26.659 --> 00:04:31.626
But I think here I have no idea
what all of a sudden, it's 0.9 but

68
00:04:31.626 --> 00:04:34.730
it means that if I did
not retrain it now and

69
00:04:34.730 --> 00:04:39.697
I used the model that is now in my
model folder here, it means that in

70
00:04:39.697 --> 00:04:45.062
the UI I should expect it to recognize
better a circle and a triangle.

71
00:04:45.062 --> 00:04:49.414
So maybe, for me,
maybe we're not gonna tweak it now,

72
00:04:49.414 --> 00:04:53.832
maybe I'm gonna use mine
that's on 0.95 now.

73
00:04:53.832 --> 00:04:58.811
So it means that 95% of the time it was
able to actually recognize correctly

74
00:04:58.811 --> 00:05:01.004
what was in the test folder.

75
00:05:01.004 --> 00:05:04.182
So if for you it's like
a lower accuracy of below 0.5,

76
00:05:04.182 --> 00:05:06.394
maybe like retrain it a few times.

77
00:05:06.394 --> 00:05:11.239
And then if really it's the next
step of this project is we're going

78
00:05:11.239 --> 00:05:13.974
to use it in the UI to get live data.

79
00:05:13.974 --> 00:05:18.527
And then once that's working, then we can
maybe tweak parameters or add a layer and

80
00:05:18.527 --> 00:05:20.214
see how that works as well.

81
00:05:20.214 --> 00:05:23.075
But here if we look at look
at the output of the model,

82
00:05:23.075 --> 00:05:25.944
we can see that the values
do change over time.

83
00:05:25.944 --> 00:05:30.084
So here I started at 0.653,
and then it kind of well,

84
00:05:30.084 --> 00:05:32.524
the next step was a bit lower.

85
00:05:32.524 --> 00:05:38.220
And over time, you can either increase
the number of epochs or increase the batch

86
00:05:38.220 --> 00:05:43.428
size or add more images, so there's
a lot of things that you can do there.

