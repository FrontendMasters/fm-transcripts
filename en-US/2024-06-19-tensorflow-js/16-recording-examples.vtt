WEBVTT

1
00:00:00.000 --> 00:00:05.050
So to record samples,
we're going to go back to the code,

2
00:00:05.050 --> 00:00:10.834
I mean, we can leave it in there and
write it below, that's fine.

3
00:00:10.834 --> 00:00:13.131
So we had our buttonsContainer.

4
00:00:13.131 --> 00:00:17.309
So here we have buttonsContainer, and
we gonna have an on mouse down event,

5
00:00:17.309 --> 00:00:19.073
because we're going to steal,

6
00:00:19.073 --> 00:00:22.554
we going want to keep running
the logic while the mouse is down.

7
00:00:22.554 --> 00:00:26.098
So that we don't have to do click record,
click record that would be annoying.

8
00:00:26.098 --> 00:00:32.072
So if we do on mouse down and
then we have an event object and

9
00:00:32.072 --> 00:00:38.170
the way that I did it here pretty
simply is that if the target

10
00:00:38.170 --> 00:00:43.158
of the event is the first
of our record buttons.

11
00:00:43.158 --> 00:00:47.810
Then if we look at the html file,
the first is the left sample.

12
00:00:47.810 --> 00:00:52.294
So again, that's not very dynamic,
that's kind of hard coded, but

13
00:00:52.294 --> 00:00:54.271
you could update the UI later.

14
00:00:54.271 --> 00:00:58.903
And here what we're going to do is
we're going to call a function we

15
00:00:58.903 --> 00:01:03.456
haven't written yet, but
that's called handleAddExample and

16
00:01:03.456 --> 00:01:08.109
we're passing it 0 as kind of like
our label for the left gesture.

17
00:01:08.109 --> 00:01:14.607
And if it's not, if the button that
is pressed is not the first one,

18
00:01:14.607 --> 00:01:20.086
it's the second one,
then we can handleAddExample1.

19
00:01:20.086 --> 00:01:23.298
So sometimes as well,
your labels instead of being strings,

20
00:01:23.298 --> 00:01:25.603
they're being transformed into a number.

21
00:01:25.603 --> 00:01:28.965
So you have 0, 1, 2 and things like that,

22
00:01:28.965 --> 00:01:33.757
depending on the index in the array
of labels that you have here.

23
00:01:33.757 --> 00:01:37.610
So at the moment, when we press the button
is going to call this function,

24
00:01:37.610 --> 00:01:39.797
but we have not read enough function yet.

25
00:01:39.797 --> 00:01:44.613
Before we do that,
actually not before we are going to

26
00:01:44.613 --> 00:01:47.833
create our handle AddExample now.

27
00:01:47.833 --> 00:01:52.010
So if we do const handleAddExample,

28
00:01:52.010 --> 00:01:56.456
this is going to be an async function and

29
00:01:56.456 --> 00:02:01.461
we pass it the label index,
so label index.

30
00:02:01.461 --> 00:02:06.035
So what this is going to do, first of all,
we had a mouse down variable.

31
00:02:06.035 --> 00:02:10.434
We're gonna set it to true because
while we're clicking or mouse downing,

32
00:02:10.434 --> 00:02:14.502
we're gonna set it to true because
then we're gonna have a loop lock.

33
00:02:14.502 --> 00:02:20.983
So as long as you're clicking on
the button, then we're gonna addExamples.

34
00:02:20.983 --> 00:02:25.781
But first, we had a total,
basically in the UI,

35
00:02:25.781 --> 00:02:32.226
we want to update to this total
as we're adding examples as well.

36
00:02:32.226 --> 00:02:37.021
So we're gonna have just
a total variable and

37
00:02:37.021 --> 00:02:45.787
what we're going to do is, Yes, okay?

38
00:02:45.787 --> 00:02:50.817
So let me just check something,
I forgot what I was doing here.

39
00:02:50.817 --> 00:02:55.699
So document.getElementsById.

40
00:02:55.699 --> 00:02:59.538
And here at the beginning we declared
our labels variable with left and right.

41
00:02:59.538 --> 00:03:04.578
So we're just gonna do labels and
then the label index because if it's 0,

42
00:03:04.578 --> 00:03:07.780
then it will be left and
we're just doing that.

43
00:03:07.780 --> 00:03:12.491
So it's just a dynamic way of saying
we're getting this right total

44
00:03:12.491 --> 00:03:14.154
instead of left total.

45
00:03:14.154 --> 00:03:19.094
What you could do instead is to get
these elements separately and say,

46
00:03:19.094 --> 00:03:22.360
this is the left example,
right example, and

47
00:03:22.360 --> 00:03:26.231
you change them over time just
to be a bit more dynamic.

48
00:03:26.231 --> 00:03:30.529
We're getting the labels and we're getting
the idea of the element based on that.

49
00:03:30.529 --> 00:03:33.500
It's just maybe a bit
more overcomplicated, but

50
00:03:33.500 --> 00:03:35.700
you can rewrite it if you want later.

51
00:03:35.700 --> 00:03:38.885
So we were saying that while
we're clicking on the mouse,

52
00:03:38.885 --> 00:03:40.185
we want to add example.

53
00:03:40.185 --> 00:03:45.060
So we gonna have while mouseDown.

54
00:03:45.060 --> 00:03:47.821
We're gonna call the function
we have not written yet either.

55
00:03:47.821 --> 00:03:52.245
But here we're gonna no, careful
with auto complete we're not calling

56
00:03:52.245 --> 00:03:57.485
handleAddExample again, but addExample,
and we're passing it the index as well.

57
00:03:57.485 --> 00:04:01.059
And we want to update our total
variable to be able to be one example,

58
00:04:01.059 --> 00:04:05.217
two examples, three examples, for
as long as we're pressing on the button.

59
00:04:05.217 --> 00:04:10.323
So we have our div, and
we are changing the inner text,

60
00:04:10.323 --> 00:04:15.762
so total.innerText, and
we're going to ++ our totals

61
00:04:15.762 --> 00:04:20.757
that was declared at the top,
the array with 0, 0,

62
00:04:20.757 --> 00:04:25.871
and we are increasing the total
that was in this array.

63
00:04:25.871 --> 00:04:29.573
And we're putting that
into our variable here.

64
00:04:29.573 --> 00:04:32.818
So what that means is that when you're
gonna click is going to look at that

65
00:04:32.818 --> 00:04:36.457
total array of 0, 0 is gonna increment
the one that I'm currently selecting.

66
00:04:36.457 --> 00:04:39.584
And, adding that number into the variable.

67
00:04:39.584 --> 00:04:44.504
And something that you that is available
with TensorFlow just as well is

68
00:04:44.504 --> 00:04:46.639
something called nextFrame.

69
00:04:46.639 --> 00:04:53.490
And that basically returns a promise when
request animation frame is computed.

70
00:04:53.490 --> 00:05:02.031
So that it's kind of maybe allows it
to not just kind of block your browser.

71
00:05:02.031 --> 00:05:06.210
Okay, so we have the first
handler of the AddExample, but

72
00:05:06.210 --> 00:05:11.601
we created here a function called
addExample that we have not yet created.

73
00:05:11.601 --> 00:05:14.818
And that might start to become
a little bit more complicated.

74
00:05:14.818 --> 00:05:16.819
So let's see what we can do with this.

75
00:05:16.819 --> 00:05:21.259
So we create the addExample function here,
and

76
00:05:21.259 --> 00:05:25.373
that's also going to be an async function.

77
00:05:25.373 --> 00:05:30.058
And as before, we passed it the label
index, I'm just gonna call it index.

78
00:05:30.058 --> 00:05:34.975
And when we're adding example, what this
means is that we're taking a snapshot

79
00:05:34.975 --> 00:05:37.665
of the camera and
feeding it into the model.

80
00:05:37.665 --> 00:05:42.690
So the first thing that we need to do
is get this snapshot of the camera.

81
00:05:42.690 --> 00:05:47.223
So I just created a separate

82
00:05:47.223 --> 00:05:51.956
function called getImage.

83
00:05:51.956 --> 00:05:55.790
And maybe before we keep writing
what's in the addExample,

84
00:05:55.790 --> 00:06:00.464
let's create that getImage so that we
kind of have an idea of what it does.

85
00:06:00.464 --> 00:06:06.683
So we have const,
getImage to be an async function as well.

86
00:06:06.683 --> 00:06:14.007
And here, if we were looking again
at the way we declared the camera or

87
00:06:14.007 --> 00:06:18.699
the webcam, here it was with tfd.webcam.

88
00:06:18.699 --> 00:06:22.380
So there is a method available
on it that's called capture.

89
00:06:22.380 --> 00:06:27.181
So the image here is,
we're going to await, webcam.capture,

90
00:06:27.181 --> 00:06:31.913
and that's going to be the image
captured from the webcam feed.

91
00:06:31.913 --> 00:06:36.044
So at this point, we have an image,
but usually what you have

92
00:06:36.044 --> 00:06:40.507
to do is you might do a little bit
of resizing or process the image.

93
00:06:40.507 --> 00:06:47.207
So what we can do is const processed
image or resized image or anything.

94
00:06:47.207 --> 00:06:52.888
And so the way that it's done in my
example, is I'm introducing a new function

95
00:06:52.888 --> 00:06:58.486
that I have not talked about yet
that's called a tf.tidy and it's basically

96
00:06:58.486 --> 00:07:03.506
a way to make sure that you're not
keeping too many things in memory.

97
00:07:03.506 --> 00:07:07.285
So it's kinda cleaning up after it's done,
because when we're taking the image,

98
00:07:07.285 --> 00:07:08.882
we're fitting it to the model, but

99
00:07:08.882 --> 00:07:12.575
we don't need to keep that image in memory
cuz what we're gonna need is the model.

100
00:07:12.575 --> 00:07:13.642
We don't need to keep all the image.

101
00:07:13.642 --> 00:07:19.709
So tf.tidy on its own it
actually takes a function.

102
00:07:19.709 --> 00:07:24.708
So we can do this and we are going to
call a few different methods that I maybe

103
00:07:24.708 --> 00:07:28.352
can explain more tomorrow,
where we have the image.

104
00:07:28.352 --> 00:07:34.017
And we need to expand it's dimensions
because the model might have

105
00:07:34.017 --> 00:07:39.897
been trained with four dimensions and
maybe this image has only one.

106
00:07:39.897 --> 00:07:41.265
So in terms of tensor,

107
00:07:41.265 --> 00:07:45.083
sometimes you also have to give
it the dimension of the tensor.

108
00:07:45.083 --> 00:07:48.496
So if you have a model that was trained
with the dimension like three numbers and

109
00:07:48.496 --> 00:07:52.134
you actually give it something with four,
it's not going to be able to run with it.

110
00:07:52.134 --> 00:07:56.817
So I can go further into that tomorrow
cuz we're gonna go a little bit

111
00:07:56.817 --> 00:07:57.979
deeper into it.

112
00:07:57.979 --> 00:08:00.922
But then we called, toFloat.

113
00:08:00.922 --> 00:08:03.732
So whatever is going to
be returned from this,

114
00:08:03.732 --> 00:08:06.404
we want to transform
it into float numbers.

115
00:08:06.404 --> 00:08:10.167
And then we divide by 127 and

116
00:08:10.167 --> 00:08:15.235
I think that it's a transformation thing

117
00:08:15.235 --> 00:08:19.596
on the image and then I had .sub1.

118
00:08:19.596 --> 00:08:21.566
And so
I can get back into this kind of thing,

119
00:08:21.566 --> 00:08:24.353
we're gonna write something kind
of similar to Mura as well.

120
00:08:24.353 --> 00:08:29.267
But these are all methods that are used to
transform the original image that we have.

121
00:08:29.267 --> 00:08:31.054
What you can do later, if you want,

122
00:08:31.054 --> 00:08:34.226
is to try to see what happens
when you don't use these methods.

123
00:08:34.226 --> 00:08:38.538
And it's probably going to return an error
because the model was expecting a certain

124
00:08:38.538 --> 00:08:41.027
shape, and
you need to figure out what that is and

125
00:08:41.027 --> 00:08:43.170
transform your current image into that.

126
00:08:43.170 --> 00:08:47.863
So what we are doing here then is that we
are going to need the processed image, but

127
00:08:47.863 --> 00:08:51.812
we don't need to keep the image
created from the capture in memory.

128
00:08:51.812 --> 00:08:54.104
So we do is dispose.

129
00:08:54.104 --> 00:08:57.074
So we are disposing here
of the original image and

130
00:08:57.074 --> 00:08:59.833
we're just returning the processed image.

131
00:08:59.833 --> 00:09:04.294
So the image that has been resized and
optimized to work with our model.

132
00:09:04.294 --> 00:09:07.202
So this is our getImage function.

133
00:09:07.202 --> 00:09:10.577
So now that we've written it here,

134
00:09:10.577 --> 00:09:15.309
we can go back into our
addExample function here.

135
00:09:15.309 --> 00:09:19.554
So once we get an image from the webcam.

136
00:09:19.554 --> 00:09:24.587
We are starting by feeding it to
the original model to get kind

137
00:09:24.587 --> 00:09:29.816
of an example label, so
we can have example here as a variable,

138
00:09:29.816 --> 00:09:35.858
and we are gonna call predict on our
initial model that we created above.

139
00:09:35.858 --> 00:09:42.246
So we do predict, and we pass it the image
that we just got from the webcam.

140
00:09:42.246 --> 00:09:48.536
And at this point, this example, variable
is going to be kind of kept in memory and

141
00:09:48.536 --> 00:09:53.006
concatenated with subsequent
examples until where it's

142
00:09:53.006 --> 00:09:57.310
actually ready to be used to
create a totally new model.

143
00:09:57.310 --> 00:10:02.092
So maybe as I'm talking about it right
now, it doesn't make the most sense,

144
00:10:02.092 --> 00:10:06.671
but as we're gonna put it together,
hopefully it will a little bit more.

145
00:10:06.671 --> 00:10:12.101
Just before I add the example function,
what we can do is create,

146
00:10:12.101 --> 00:10:17.334
let's say, I wanted to call it
maybe examples and labels, but

147
00:10:17.334 --> 00:10:24.391
that might be confusing or that might be
conflicting with other variables later on.

148
00:10:24.391 --> 00:10:29.731
So the way that they sometimes shrink
it is to just like xs and xy, but

149
00:10:29.731 --> 00:10:35.540
that is basically going to be, xs is
going to be the actual example data and

150
00:10:35.540 --> 00:10:40.345
xy is going to be the labels
attached to these pieces of data.

151
00:10:40.345 --> 00:10:44.883
So we can do it like this and
then at first,

152
00:10:44.883 --> 00:10:50.199
we're going to create a y
variable maybe y isn't

153
00:10:50.199 --> 00:10:56.182
optimized I'm not quite sure
how to call it right now.

154
00:10:56.182 --> 00:10:58.809
Let's start with y and
then maybe you can rename it later.

155
00:10:58.809 --> 00:11:03.969
But again, we're gonna write
a function inside the tf.tidy function

156
00:11:03.969 --> 00:11:08.699
to again clean it up once we're
done with what we're doing here.

157
00:11:08.699 --> 00:11:13.692
We're gonna create what's called a one-hot

158
00:11:13.692 --> 00:11:18.429
tensor and that is basically turning yeah,

159
00:11:18.429 --> 00:11:22.793
categorical data into numerical data.

160
00:11:22.793 --> 00:11:27.606
So instead of having to feed it like
right and left is just gonna be 0 and

161
00:11:27.606 --> 00:11:29.903
1 and numbers starting from 0.

162
00:11:29.903 --> 00:11:32.839
So we have one-hot,
it's called one-hot tensor, and

163
00:11:32.839 --> 00:11:35.416
you have to declare your
tensor inside it as well.

164
00:11:35.416 --> 00:11:39.749
So we have tf.tensor1d and
here it just means that

165
00:11:39.749 --> 00:11:43.995
the data is written as
a one-dimensional array.

166
00:11:43.995 --> 00:11:47.328
We don't need to actually create,
we can have tensor 2D, 3D,

167
00:11:47.328 --> 00:11:49.885
4D, just depending on how
complex your data is.

168
00:11:49.885 --> 00:11:54.044
But here for the image, we're just
transforming the image into a very long

169
00:11:54.044 --> 00:11:56.230
array of just one-dimensional data.

170
00:11:56.230 --> 00:12:02.079
And what we need to pass in
it is the index because we're

171
00:12:02.079 --> 00:12:09.469
creating one- dimensional tensor
of just the index for that image.

172
00:12:09.469 --> 00:12:13.803
I'm not quite sure, there might be
different ways to do this as well cuz that

173
00:12:13.803 --> 00:12:15.847
kind of seems maybe over computed.

174
00:12:15.847 --> 00:12:20.349
So maybe I'll see tomorrow if we can
simplify a little bit but for now,

175
00:12:20.349 --> 00:12:24.107
it starts with this, and
you have to call toInteger on it.

176
00:12:24.107 --> 00:12:29.717
Sorry, the toInteger is after the oneHot,

177
00:12:29.717 --> 00:12:37.759
so it's the oneHot tensor that
we are converting to integers.

178
00:12:37.759 --> 00:12:40.475
And then we're passing labels.length.

179
00:12:40.475 --> 00:12:44.328
So what's gonna end up happening
here is that I think as a result,

180
00:12:44.328 --> 00:12:48.180
we should get an array of maybe
it's gonna be something like 0 and

181
00:12:48.180 --> 00:12:51.636
then labels length will be 2 and
things like that, okay?

182
00:12:51.636 --> 00:12:53.954
So what do we do with that variable?

183
00:12:53.954 --> 00:12:55.714
We'll see that, shortly.

184
00:12:55.714 --> 00:13:00.404
But we had an xs and xy here.

185
00:13:00.404 --> 00:13:05.592
So first of all,
if these are empty, because they

186
00:13:05.592 --> 00:13:10.654
are not set at first,
oops, so if they are null,

187
00:13:10.654 --> 00:13:16.229
we have not yet
added any example to create our model.

188
00:13:16.229 --> 00:13:20.654
So the first thing we're gonna do,
we're gonna set a value, to xs and

189
00:13:20.654 --> 00:13:23.213
it's going to be tf.keep the example.

190
00:13:23.213 --> 00:13:26.695
So here the example that we had
is a prediction from the model.

191
00:13:26.695 --> 00:13:31.012
I mean, .keep is kind of a way
to keep it in memory and

192
00:13:31.012 --> 00:13:36.326
we're going to concatenate
everything in the else statement.

193
00:13:36.326 --> 00:13:41.767
But at first access is set to
the prediction from the example and

194
00:13:41.767 --> 00:13:44.136
xy is going to be the label.

195
00:13:44.136 --> 00:13:48.707
So we're going to keep the label
that we just declared above.

196
00:13:48.707 --> 00:13:53.490
And in the else statement, so if one
example has already been added, then we

197
00:13:53.490 --> 00:13:58.530
are going to concatenate our examples
all together before training the model.

198
00:13:58.530 --> 00:14:05.532
So here we can have a previous x,
and that will be equal to access.

199
00:14:05.532 --> 00:14:09.516
And we're going to redefine x or
add a new value to it, and

200
00:14:09.516 --> 00:14:12.338
that's going to be our tf.keep again,

201
00:14:12.338 --> 00:14:17.559
but we're going to concatenate so
we're using our previous version.

202
00:14:17.559 --> 00:14:19.076
My notes are annoying, okay?

203
00:14:19.076 --> 00:14:22.905
Our previous version of sorry,
previous x, sorry.

204
00:14:22.905 --> 00:14:25.247
And we're going to concat in it,

205
00:14:25.247 --> 00:14:30.785
our new example because while we're at
this point, we have the example here.

206
00:14:30.785 --> 00:14:35.173
That's a prediction again, but we're
going into the else statement this time.

207
00:14:35.173 --> 00:14:38.933
And another one of this is a 0,

208
00:14:38.933 --> 00:14:43.280
I forgot what this second value is.

209
00:14:43.280 --> 00:14:49.175
Let's move on for now and we're doing
the same for the y value as well.

210
00:14:49.175 --> 00:14:54.656
So the labels, so we can kind of copy but

211
00:14:54.656 --> 00:15:00.483
change it from xs to xy, and then xy here.

212
00:15:00.483 --> 00:15:04.284
And then instead of previous x,
we're concatenating the labels.

213
00:15:04.284 --> 00:15:07.019
And instead of example is going to be y.

214
00:15:07.019 --> 00:15:12.194
So in the end, xs is going to be a big
concatenation of all the examples,

215
00:15:12.194 --> 00:15:16.871
and then xy is going to be all
the concatenation from the labels.

216
00:15:16.871 --> 00:15:20.418
And again, we don't want to keep
too much stuff in memory, so

217
00:15:20.418 --> 00:15:22.341
we're going to dispose of them.

218
00:15:22.341 --> 00:15:27.924
So previousX.dispose, and

219
00:15:27.924 --> 00:15:33.508
then previousY.dispose and

220
00:15:33.508 --> 00:15:39.991
then we can also dispose of y here.

221
00:15:39.991 --> 00:15:46.773
Oops, dispose and
we can also dispose of the image, okay?

222
00:15:46.773 --> 00:15:51.577
So at this point,
this is the main function that's

223
00:15:51.577 --> 00:15:56.270
adding all the examples
together into some kind of

224
00:15:56.270 --> 00:16:00.645
data that we're gonna be
able to use later on.

