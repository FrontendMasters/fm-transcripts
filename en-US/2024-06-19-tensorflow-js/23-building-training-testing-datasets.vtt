WEBVTT

1
00:00:00.190 --> 00:00:03.612
So if you go back to your code, you can
remove this, we don't need to call out

2
00:00:03.612 --> 00:00:07.260
we just wanted to show you what's the
buffer data the way that it's coming back.

3
00:00:08.360 --> 00:00:10.452
So under your buffer variable here,

4
00:00:10.452 --> 00:00:14.440
we're going to create an image
tensor out of this buffer data.

5
00:00:14.440 --> 00:00:17.990
So we can create a variable
called ImageTensor.

6
00:00:19.200 --> 00:00:22.973
And because we're in node here,
we are going to call tf.node.

7
00:00:22.973 --> 00:00:27.775
And then on top of that, we're going
to be able to call some specific

8
00:00:27.775 --> 00:00:31.123
methods to decode our data and
also resize it.

9
00:00:31.123 --> 00:00:34.504
Because at the moment, our drawings
are in 200 by 200 thresholds, but

10
00:00:34.504 --> 00:00:37.468
we don't actually need to feed into
the model data that is that big,

11
00:00:37.468 --> 00:00:39.563
we're gonna resize it to a smaller size.

12
00:00:39.563 --> 00:00:41.636
So it's usually,
it will just go faster and

13
00:00:41.636 --> 00:00:45.355
we really don't need to be looking at
every single pixel in a 200 by 200.

14
00:00:45.355 --> 00:00:50.382
So after tf.node, we're going to call
the method called decodeImage and

15
00:00:50.382 --> 00:00:52.467
we're passing it the buffer.

16
00:00:54.117 --> 00:01:01.541
And then the resize method here that we're
going to use is resizeNearestNeighbor.

17
00:01:01.541 --> 00:01:04.310
So there's two different
methods to resize,

18
00:01:04.310 --> 00:01:08.561
I'm actually not quite sure why one
would be better than the other.

19
00:01:08.561 --> 00:01:12.631
In this case here,
nearest neighbor works for me.

20
00:01:12.631 --> 00:01:17.411
And when we're calling it we need to pass
the shape that we want our data to be in.

21
00:01:17.411 --> 00:01:22.365
So we're basically transforming each
of our images from a 200 by 200 to a 28

22
00:01:22.365 --> 00:01:25.213
by 28,
you can pick another number later on.

23
00:01:25.213 --> 00:01:28.669
As long as the number that you pick
here is going to be the same as

24
00:01:28.669 --> 00:01:33.138
the number that you going to pick when
we're going to actually build our model.

25
00:01:33.138 --> 00:01:36.988
If you use a different shape here than
the one that the model is expecting,

26
00:01:36.988 --> 00:01:40.481
then you'll get an error of being,
the model was expected shape.

27
00:01:40.481 --> 00:01:43.361
I don't know 24, 24, and
this image is 28, 28.

28
00:01:43.361 --> 00:01:47.241
So as long as you keep the shape the same,
we we should be good.

29
00:01:47.241 --> 00:01:51.366
So, if you're following along,
I picked 28 so maybe use the same value so

30
00:01:51.366 --> 00:01:53.311
that it's easier.

31
00:01:53.311 --> 00:02:00.732
And I think that, we just need to call
the expandDims() function as well.

32
00:02:00.732 --> 00:02:06.483
So this will expand the dimension of the
tensor, because I think some errors before

33
00:02:06.483 --> 00:02:12.142
where the image had an array of three
numbers and actually was expecting four.

34
00:02:12.142 --> 00:02:13.942
So I need to double check exactly why.

35
00:02:13.942 --> 00:02:16.480
But when you get an error,
you run your code and it says,

36
00:02:16.480 --> 00:02:19.452
the model was expecting a certain shape,
and it has another one.

37
00:02:19.452 --> 00:02:22.433
And you can see that the number
of dimension is different.

38
00:02:22.433 --> 00:02:26.308
Sometimes you can just call expandDims and
it will add,

39
00:02:26.308 --> 00:02:31.293
is there a no value or
a zero to add a dimension to your tensor?

40
00:02:31.293 --> 00:02:34.113
It doesn't really do
anything more than that.

41
00:02:34.113 --> 00:02:39.582
And now that we have our image tensor,
we're gonna push it into our images or

42
00:02:39.582 --> 00:02:42.414
so images, push an (imageTensor).

43
00:02:42.414 --> 00:02:46.975
So our images array is going to
contain all of the tensors that

44
00:02:46.975 --> 00:02:49.038
represent our image data.

45
00:02:50.108 --> 00:02:55.738
So that is for the images themselves, but
we still need to deal with the labels.

46
00:02:55.738 --> 00:02:59.331
So under it, what we're going to do is so

47
00:02:59.331 --> 00:03:05.144
the way that I did it we're
going to create a variable.

48
00:03:05.144 --> 00:03:10.174
And because we drew circles and
triangle, I'm gonna do constant circle.

49
00:03:10.174 --> 00:03:15.366
And for each file again,
so files, (i) so this for

50
00:03:15.366 --> 00:03:21.148
each file, just to be sure to
just turn it to lower case some

51
00:03:21.148 --> 00:03:26.703
of you have written circle
with a capital C or anything.

52
00:03:26.703 --> 00:03:30.738
So just to really make sure that
our data is formatted all the same,

53
00:03:30.738 --> 00:03:34.433
just call to lowercase, and
then we're gonna do endsWith.

54
00:03:34.433 --> 00:03:40.963
So we're checking that each of our file
is ending with, here (`circle.png`).

55
00:03:40.963 --> 00:03:45.407
So we're making sure that all of the each
file that we're that we're trying to load

56
00:03:45.407 --> 00:03:47.193
is either a circle or a triangle.

57
00:03:47.193 --> 00:03:51.160
And that's why, when I asked you
to name your files this way,

58
00:03:51.160 --> 00:03:56.073
7-triangle, 8-circle,
it's to make it this easier here.

59
00:03:56.073 --> 00:03:59.243
It's easier to actually figure out if the
current file is a circle or a triangle.

60
00:03:59.243 --> 00:04:01.869
So we're gonna do the same for
the triangle as well.

61
00:04:01.869 --> 00:04:05.931
So if you have decided to draw
a square instead of a triangle,

62
00:04:05.931 --> 00:04:09.049
just make sure to also
adapt your code to that.

63
00:04:10.309 --> 00:04:14.985
But here we have variables here and
what we need to check now is that, well,

64
00:04:14.985 --> 00:04:18.089
is the current file a triangle or
a square?

65
00:04:18.089 --> 00:04:22.357
So there's probably other ways to do this,
but

66
00:04:22.357 --> 00:04:27.672
here I just have okay so if,
not square if circle is true.

67
00:04:27.672 --> 00:04:31.728
So if at the moment the current
font that we are going through in

68
00:04:31.728 --> 00:04:36.182
our loop is actually a circle,
we are going to push into our labels.

69
00:04:36.182 --> 00:04:40.917
So labels.push, and
we're going to push 0, so

70
00:04:40.917 --> 00:04:45.765
that's gonna be,
let's say that squares are 0 or

71
00:04:45.765 --> 00:04:49.622
circles are 0 and triangles will be 1.

72
00:04:49.622 --> 00:04:56.365
So then we can say, Okay,
else if then triangle is true,

73
00:04:56.365 --> 00:05:01.011
we are going to do labels.push and 1.

74
00:05:01.011 --> 00:05:02.991
So the way that TensorFlow or

75
00:05:02.991 --> 00:05:08.591
in general tensors work is that you
can't really pass it pieces of string.

76
00:05:08.591 --> 00:05:11.541
First of all, here we're passing
an integer, and then we'll also

77
00:05:11.541 --> 00:05:14.771
transform that into a tensor as well,
so that it will work with the model.

78
00:05:16.071 --> 00:05:21.527
So at this point here, we have looped
through all the files in our folder,

79
00:05:21.527 --> 00:05:24.871
and we've created tensors from images, and

80
00:05:24.871 --> 00:05:30.915
we've also kind of pushed some label,
either 0 or 1, into our labels array.

81
00:05:30.915 --> 00:05:36.051
And what we need to do after
that is just return our array

82
00:05:36.051 --> 00:05:40.861
of images and labels, so
you can just return that.

83
00:05:43.341 --> 00:05:46.924
But at this point,
we have not called our load images, and

84
00:05:46.924 --> 00:05:51.332
because we need to call it for
both the train images and the test images.

85
00:05:51.332 --> 00:05:55.712
Let's just call a new function
called const loaddata, and

86
00:05:55.712 --> 00:05:58.964
it's just gonna be an arrow function.

87
00:05:58.964 --> 00:06:04.018
And inside there, we're just gonna
make the other console log just so

88
00:06:04.018 --> 00:06:09.609
that when we run this in the terminal
later, not load console.log.

89
00:06:09.609 --> 00:06:13.549
And we're just gonna give us some
little hints of what's going on.

90
00:06:13.549 --> 00:06:18.380
So just console.log, no loading images,
and then we're going to

91
00:06:18.380 --> 00:06:23.849
assign to the variables that we
created here train data and test data.

92
00:06:23.849 --> 00:06:30.067
So, if we call trainData, we're going
to call our loadImages function,

93
00:06:30.067 --> 00:06:33.829
and we're passing it
the path to the folder.

94
00:06:33.829 --> 00:06:39.269
So trainImages there, here and
do the same for testData.

95
00:06:39.269 --> 00:06:46.092
So, testData reloading,
calling our loadImages function and

96
00:06:46.092 --> 00:06:52.284
we're passing testsImages directory,
and after that,

97
00:06:52.284 --> 00:06:59.135
I just want to just to make it
a little bit easier for us as well.

98
00:06:59.135 --> 00:07:03.380
We are going to just call
images loaded successfully but

99
00:07:03.380 --> 00:07:05.818
actually I'm not awaiting, so

100
00:07:05.818 --> 00:07:11.887
maybe it won't even matter I think it
might just console.log at the same time.

101
00:07:11.887 --> 00:07:15.773
So maybe it's not that helpful but
let's leave it like this for now.

102
00:07:15.773 --> 00:07:21.603
Okay, so we started to put
it into arrays images and

103
00:07:21.603 --> 00:07:26.620
labels we have our data,
but at the moment we

104
00:07:26.620 --> 00:07:31.920
kind of need to have two
different functions.

105
00:07:31.920 --> 00:07:37.004
Because we have loaded our trainData and
our testData, but they're not really yet

106
00:07:37.004 --> 00:07:42.103
returned as thing tensors the labels,
at least, are not written as tensors yet.

107
00:07:42.103 --> 00:07:46.544
So to make it easier in terms of structure
of like requiring the data later,

108
00:07:46.544 --> 00:07:51.266
we're just gonna have a function that
we're gonna call, get trainData to only

109
00:07:51.266 --> 00:07:56.103
get the training data, and then get
testData to only get the test data.

110
00:07:56.103 --> 00:08:01.364
So if we call const, getTrainData,

111
00:08:01.364 --> 00:08:06.897
that's an array function as well.

112
00:08:06.897 --> 00:08:14.767
And we're just going to return an object
here and we're gonna have our images.

113
00:08:14.767 --> 00:08:19.807
And these images we're gonna concatenate
all of our training data, so

114
00:08:19.807 --> 00:08:25.191
tf.concat, and that's going to be
trainData and the first element of it.

115
00:08:25.191 --> 00:08:28.727
So if you ever later on decide to
console.log what trainData is,

116
00:08:28.727 --> 00:08:33.296
what's happening is that trainData, the
first element is the bunch of tensors from

117
00:08:33.296 --> 00:08:38.301
our images, and the second is actually
the labels for these images as well.

118
00:08:38.301 --> 00:08:43.411
So we just want to concat the tensors, and

119
00:08:43.411 --> 00:08:48.263
labels here is going to be tf.oneHot.

120
00:08:48.263 --> 00:08:50.964
And again, if you remember yesterday,

121
00:08:50.964 --> 00:08:54.783
it's kind of modifying
categorical data into numbers.

122
00:08:54.783 --> 00:08:56.631
So we already have 0 and 1, but

123
00:08:56.631 --> 00:09:00.706
we want to actually transform
that into a 2 times 10 as well.

124
00:09:00.706 --> 00:09:06.386
So, okay, tensor 1 dimensional, we don't
need more than one dimension here.

125
00:09:06.386 --> 00:09:10.814
And we're going to call trainData in
the first element cuz that will be

126
00:09:10.814 --> 00:09:13.086
the labels of our images.

127
00:09:13.086 --> 00:09:15.358
And we need to transform that into, so

128
00:09:15.358 --> 00:09:19.619
the second element of tensor 1d
needs to be either float 32 and 32.

129
00:09:19.619 --> 00:09:26.989
So here in this case, we will, actually
maybe I think yesterday I used float32.

130
00:09:26.989 --> 00:09:31.379
So let's use float32 and see what happens.

131
00:09:31.379 --> 00:09:35.643
The second argument to the one-Hot is
going to be the number of classes, and

132
00:09:35.643 --> 00:09:37.019
here we only have two.

133
00:09:37.019 --> 00:09:40.263
It's either square or
no, circle or triangle.

134
00:09:40.263 --> 00:09:45.160
So I'm gonna write 2 and I have an issue
with, sorry, I forgot the comma here so

135
00:09:45.160 --> 00:09:49.838
after images because we're returning
an object with just, if you have been

136
00:09:49.838 --> 00:09:54.771
following in you have the same error
as me, don't forget the comma here.

137
00:09:54.771 --> 00:09:55.783
Okay, my bad.

138
00:09:55.783 --> 00:09:59.787
So float 32 needs to be passed
in as the second argument of,

139
00:09:59.787 --> 00:10:04.656
tensor1d not, Yeah, okay, that's it.

140
00:10:04.656 --> 00:10:09.520
Okay, so just to recap, we're calling
TensorFlow oneHot to transform

141
00:10:09.520 --> 00:10:14.544
whatever is passed inside, and
what's passed inside is a one dimensional

142
00:10:14.544 --> 00:10:20.059
tensor of the training data labels,
kind of transformed as floats.

143
00:10:20.059 --> 00:10:22.819
And the second argument
is the number of classes.

144
00:10:22.819 --> 00:10:26.485
So here I had coded 2,
yesterday I think we did labels.length,

145
00:10:26.485 --> 00:10:30.359
but here I didn't actually have
DND clear variable labels.

146
00:10:30.359 --> 00:10:32.899
So you could do it both ways,
it's up to you.

147
00:10:32.899 --> 00:10:35.299
And here this is only to
get the training data, but

148
00:10:35.299 --> 00:10:39.978
we're gonna create another small function
to return the same thing, but testData.

149
00:10:39.978 --> 00:10:44.920
So if you want to not have to rewrite
everything from scratch, we can just

150
00:10:44.920 --> 00:10:50.118
copy the same block and just change
the name of the function to get testData.

151
00:10:51.188 --> 00:10:54.161
And on the images,
we want to then concat the testData,

152
00:10:54.161 --> 00:10:57.068
the first element of the test data array.

153
00:10:57.068 --> 00:11:00.825
And the labels will do the same,
we are just going to change

154
00:11:00.825 --> 00:11:05.058
the trainData to testData, but
otherwise it should be the same.

155
00:11:05.058 --> 00:11:08.241
So that means that the way that we're
transforming our data into tensor is going

156
00:11:08.241 --> 00:11:10.298
to be the same for
the training set and the test set.

157
00:11:11.438 --> 00:11:17.608
And then because we're in node,
we're just going to do module.exports.

158
00:11:17.608 --> 00:11:22.702
And we're going to export
the loadData function,

159
00:11:22.702 --> 00:11:30.294
cuz we gonna call it in another file and
our getTestData and I getTrainData.

160
00:11:30.294 --> 00:11:35.459
Okay, so at this point,
everything should be good.

161
00:11:35.459 --> 00:11:39.749
So just to recap,
we imported the tools that we wanna use.

162
00:11:39.749 --> 00:11:44.193
We have the path to our training set our
test set, we have a function to loop

163
00:11:44.193 --> 00:11:49.445
through all the files in our directory,
transform the images to tensors.

164
00:11:49.445 --> 00:11:53.405
Making new checking if our current
image is a circle or triangle,

165
00:11:53.405 --> 00:11:58.105
pushing an integer representation
of our label into our labels array.

166
00:11:58.105 --> 00:12:02.102
Then we have, just a load function
that's going to load either or

167
00:12:02.102 --> 00:12:04.507
both the training set and the test set.

168
00:12:04.507 --> 00:12:09.138
And then we just have two utils function
to actually return these data as

169
00:12:09.138 --> 00:12:11.846
a tensors with images and labels, okay.

