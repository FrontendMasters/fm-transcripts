WEBVTT

1
00:00:00.110 --> 00:00:05.037
The first thing that we're gonna do,
because we're gonna write kind of most of

2
00:00:05.037 --> 00:00:10.112
the transfer learning logic ourselves,
we can start by in the index.html file,

3
00:00:10.112 --> 00:00:14.400
we're going to comment out the three
lines that were part of part 1.

4
00:00:14.400 --> 00:00:18.210
So what's just under this comment part 1,
we're gonna comment that out.

5
00:00:18.210 --> 00:00:22.920
And we also will not need
the two script tags at the top.

6
00:00:22.920 --> 00:00:26.020
So we're commenting out the teachable
machine library and sensor flow.

7
00:00:26.020 --> 00:00:33.330
We'll import them separately, and we are
going to comment in what's under part two.

8
00:00:33.330 --> 00:00:37.300
So as you can see these,
there's a little bit more elements.

9
00:00:37.300 --> 00:00:41.400
But because you know the way that we
were looking at teachable machine,

10
00:00:41.400 --> 00:00:45.040
they were like buttons to start
recording and stop recording.

11
00:00:45.040 --> 00:00:47.610
So we're gonna have to
have that ourselves.

12
00:00:47.610 --> 00:00:50.702
For example here,
I kind of hard-coded it to left and

13
00:00:50.702 --> 00:00:54.530
right to keep my theme of left tilting,
left tilting, right.

14
00:00:54.530 --> 00:00:57.762
There's gonna be a button that we're
gonna press to record left samples,

15
00:00:57.762 --> 00:01:00.185
a button that we're gonna
press to have right samples.

16
00:01:00.185 --> 00:01:00.735
Polls, and

17
00:01:00.735 --> 00:01:04.535
here this Div is just going to tell us the
amount of examples we've trained so far.

18
00:01:05.855 --> 00:01:10.352
And here, as well, one important thing
as well is change part 1 to part 2, so

19
00:01:10.352 --> 00:01:13.915
that we can write our code
separately in the part2.js file.

20
00:01:14.915 --> 00:01:21.152
So just to recap as well, comment out part
1, the script tags and comment, In part 2.

21
00:01:22.312 --> 00:01:28.132
So if we have a look at what's,
let's try to run this.

22
00:01:28.132 --> 00:01:31.662
So if you go back to your terminal,
it should still be the same comment.

23
00:01:31.662 --> 00:01:38.372
So if we go to local host, 1, 2, 3,
4, yes was yes, so that's normal.

24
00:01:38.372 --> 00:01:40.131
So at the moment,
we didn't write any logic.

25
00:01:40.131 --> 00:01:43.139
So that's normal,
that it's just saying loading model,

26
00:01:43.139 --> 00:01:44.891
that's kinda the default state.

27
00:01:44.891 --> 00:01:47.401
And when it's loaded we'll
just remove that div.

28
00:01:49.291 --> 00:01:54.203
Okay, so let's start, it's gonna be a bit
more complicated because we're moving

29
00:01:54.203 --> 00:01:59.321
from kinda like the magical thing of like,
as you use a tool that does everything for

30
00:01:59.321 --> 00:02:03.538
me, and now we're actually going to do it,
and it's gonna be hopefully

31
00:02:03.538 --> 00:02:07.446
a nice segue onto building our
custom model later on in project 3.

32
00:02:07.446 --> 00:02:10.710
As we were doing in, mostly in project 1,

33
00:02:10.710 --> 00:02:16.076
we're gonna start by importing
everything as tf from TensorFlow js.

34
00:02:16.076 --> 00:02:20.085
So from @tensorflow/tfjs.

35
00:02:20.085 --> 00:02:24.371
And for this one,
when you're doing transfer learning,

36
00:02:24.371 --> 00:02:29.535
kind of implementing it from scratch
you also need to import something

37
00:02:29.535 --> 00:02:34.434
called TensorFlow.js data, and
for everything as tfd from, and

38
00:02:34.434 --> 00:02:39.735
then the package @tensorflow/,
don't seem to have that.

39
00:02:39.735 --> 00:02:42.482
Well, yeah, tensorFlow.js tfjs data.

40
00:02:42.482 --> 00:02:45.482
So the packages are important.

41
00:02:45.482 --> 00:02:49.762
And because again in this UI we're gonna
have to have interaction with our buttons.

42
00:02:49.762 --> 00:02:53.039
And then let's start to create
our variables that are gonna hold

43
00:02:53.039 --> 00:02:55.902
the reference to the better
limit dependent elements.

44
00:02:55.902 --> 00:03:03.634
So at first in the index.html I have,
yeah.

45
00:03:03.634 --> 00:03:05.478
So I have a buttons container and

46
00:03:05.478 --> 00:03:08.962
instead of adding an onclick
event to each separate button,

47
00:03:08.962 --> 00:03:13.214
I'm just going to get the whole
container and then use event delegation.

48
00:03:13.214 --> 00:03:18.864
So we're gonna do record buttons, okay?

49
00:03:20.188 --> 00:03:27.988
I'm going to get document of, cannot type
document dot get element by class name.

50
00:03:27.988 --> 00:03:32.318
And why is that correct?

51
00:03:33.658 --> 00:03:34.507
Let me check.

52
00:03:37.186 --> 00:03:39.339
Okay, no,
I did in an environment to spread it.

53
00:03:39.339 --> 00:03:41.516
Okay, that's fine, let's keep it that way.

54
00:03:41.516 --> 00:03:45.200
So each button has a record button class.

55
00:03:45.200 --> 00:03:47.240
So we're just gonna get both of them here.

56
00:03:47.240 --> 00:03:51.896
And then yes, I do have a buttons
container that I also need

57
00:03:51.896 --> 00:03:55.326
because you'll see it a little bit later.

58
00:03:55.326 --> 00:04:00.358
But if you want to go a bit faster,
that's gonna be by ID, and

59
00:04:00.358 --> 00:04:06.086
that's gonna be buttons container,
okay, so we have each button,

60
00:04:06.086 --> 00:04:12.649
we have the container, then we also have
a button to run the training process.

61
00:04:12.649 --> 00:04:18.025
So we're gonna train button document,
the get element by that's

62
00:04:18.025 --> 00:04:23.113
an ID of train and we also have
a button to start the prediction,

63
00:04:23.113 --> 00:04:26.391
so we're going to call predict button.

64
00:04:30.708 --> 00:04:35.548
Predict, and we have a status
element to kind of give us

65
00:04:35.548 --> 00:04:40.807
an idea of like is the model,
I think it is the model loaded or

66
00:04:40.807 --> 00:04:46.069
In the next step of the training
process that is happening,

67
00:04:46.069 --> 00:04:49.880
so let's have a status element variable.

68
00:04:49.880 --> 00:04:53.794
And the ID for
this one is just status, okay?

69
00:04:53.794 --> 00:04:58.345
So this is I think all what we're
going to need in terms of getting

70
00:04:58.345 --> 00:05:01.311
the elements from the index to HTML file.

71
00:05:01.311 --> 00:05:05.931
And now we're gonna start declaring some
variables that we'll use along the way.

72
00:05:05.931 --> 00:05:08.884
So as before,
because we are going to use the webcam,

73
00:05:08.884 --> 00:05:12.031
we're gonna have a variable called webcam.

74
00:05:12.031 --> 00:05:16.942
And because transfer learning is creating
a new model on top of an existing one,

75
00:05:16.942 --> 00:05:20.179
we're gonna have a variable
called initial model.

76
00:05:22.970 --> 00:05:27.386
And because we're gonna track a mouse down
event on the button to keep recording,

77
00:05:27.386 --> 00:05:31.226
we're gonna have a mouse down variable
that we're gonna set to true and

78
00:05:31.226 --> 00:05:33.290
false to know when to stop recording.

79
00:05:34.490 --> 00:05:39.063
And we're also going to have
a new model variable that's

80
00:05:39.063 --> 00:05:44.274
gonna kind of keep the reference
to the model that we create.

81
00:05:44.274 --> 00:05:47.255
So that hopefully should
still make sense and

82
00:05:47.255 --> 00:05:51.594
we're gonna slowly go into
the more complicated things.

83
00:05:51.594 --> 00:05:56.226
So at first, because we are here
only training two different labels,

84
00:05:56.226 --> 00:06:00.164
we are going to start by creating
a variable called totals.

85
00:06:00.164 --> 00:06:03.698
And it's which is gonna be
an array of numbers and

86
00:06:03.698 --> 00:06:08.641
00 because when we start,
we have not recorded any examples.

87
00:06:08.641 --> 00:06:12.681
So as we go,
we're going to increment these numbers.

88
00:06:12.681 --> 00:06:14.661
It's just to be able to like
display them on the screen.

89
00:06:14.661 --> 00:06:18.616
So if you refactor this later, you might
not need this variable but at the moment

90
00:06:18.616 --> 00:06:22.469
in the way that I built, it made it a
little bit easier to increment over time.

91
00:06:23.469 --> 00:06:24.789
Then we also have our labels.

92
00:06:24.789 --> 00:06:29.969
And in my particular example,
I used left and right.

93
00:06:29.969 --> 00:06:32.459
We can start with that, and
then you can change it as you want.

94
00:06:32.459 --> 00:06:34.659
But that will be the labels
that we're going to train.

95
00:06:34.659 --> 00:06:38.093
If you wanted it later on, you could
have an input field in your HTML and

96
00:06:38.093 --> 00:06:40.239
let the users customize it in the UI.

97
00:06:40.239 --> 00:06:43.410
But that would just be faster
to do it that way here.

98
00:06:43.410 --> 00:06:47.879
And then we're going to start creating
variables that are related to the way that

99
00:06:47.879 --> 00:06:49.860
the parameters of our model.

100
00:06:49.860 --> 00:06:52.850
So first we're going to create
a variable called learning rate.

101
00:06:54.060 --> 00:07:00.542
And this is maybe going to sound weird,
but we're going to set it to 0.0001.

102
00:07:00.542 --> 00:07:05.007
And that's just the value I've
been using in my project.

103
00:07:05.007 --> 00:07:09.496
But the learning rate is how frequently
the model's weights are changed during

104
00:07:09.496 --> 00:07:10.168
training.

105
00:07:10.168 --> 00:07:14.019
So, as we go, if we have time or
if you want to do that later,

106
00:07:14.019 --> 00:07:19.339
you can experiment with sending it to
0.1 or 0.5 and see how it actually makes

107
00:07:19.339 --> 00:07:24.967
it more accurate or not, depending on
the amount of samples and all of that.

108
00:07:24.967 --> 00:07:28.717
But for me, for my particular
project here, that works, and

109
00:07:28.717 --> 00:07:30.747
we can play around with it later.

110
00:07:30.747 --> 00:07:33.903
Then, I was talking about
batch sizes before, so

111
00:07:33.903 --> 00:07:38.413
we're gonna have a batch size here in
the way that we're gonna pass it in

112
00:07:38.413 --> 00:07:41.888
wherever it needs to be used later,
it has a fraction.

113
00:07:41.888 --> 00:07:46.408
So we're gonna use 0.4,
which is basically we're gonna yeah,

114
00:07:46.408 --> 00:07:51.601
a batch size is like, instead of
saying 40, we're just gonna use 0.4.

115
00:07:51.601 --> 00:07:56.261
We could just divide it by 100 later,
but that's just probably easier here.

116
00:07:56.261 --> 00:08:03.457
And in terms of Ebox, again, I used here
30, and that 30 steps to train the model.

117
00:08:03.457 --> 00:08:06.022
You could have less steps,
it will go faster, but

118
00:08:06.022 --> 00:08:09.076
it might not be as accurate, or
you could have more steps and

119
00:08:09.076 --> 00:08:12.377
it might be more accurate,
but it will also take longer.

120
00:08:12.377 --> 00:08:17.110
I picked 30, again, sometimes people
say that when you tune these parameters

121
00:08:17.110 --> 00:08:19.767
they're more of an art than the science.

122
00:08:19.767 --> 00:08:23.673
So let's say that if you use these exact
parameters, but with more samples or less,

123
00:08:23.673 --> 00:08:26.639
you might actually get different results.

124
00:08:26.639 --> 00:08:28.439
So we get start with that,
and then tweak it.

125
00:08:29.709 --> 00:08:33.948
And then we have a variable
called dense units, and

126
00:08:33.948 --> 00:08:37.589
that is the number of
outputs of the layer.

127
00:08:37.589 --> 00:08:41.709
So every time that you have a layer in a
machine learning model, there's an output

128
00:08:41.709 --> 00:08:44.874
that comes out of each layer that
is then fed into another one and

129
00:08:44.874 --> 00:08:46.386
that's called dense units.

130
00:08:46.386 --> 00:08:50.858
So it's not maybe not super clear the way
that certain terms are used in machine

131
00:08:50.858 --> 00:08:52.226
learning.

132
00:08:52.226 --> 00:08:54.976
Hopefully when we actually use it later.

133
00:08:54.976 --> 00:08:56.036
Yeah, it will make a bit more sense.

134
00:08:56.036 --> 00:08:59.564
But let's say that in the model
that we're gonna create,

135
00:08:59.564 --> 00:09:04.028
I believe there's only two or three
layers, and the final layer will need

136
00:09:04.028 --> 00:09:08.582
a different type of dense units but
we'll talk about that when we write it.

137
00:09:08.582 --> 00:09:13.566
And then just a variable to set the stage
of if it's currently training or not.

138
00:09:13.566 --> 00:09:18.640
So I just have like a simple is training
that is the initial value will be

139
00:09:18.640 --> 00:09:23.800
false because when you load your app,
it's not currently training and

140
00:09:23.800 --> 00:09:28.108
then is predicting,
I think that's just to update the UI.

141
00:09:28.108 --> 00:09:29.711
You can set it to false or just leave it.

142
00:09:29.711 --> 00:09:34.267
So let's see, I was like
a initial step of our application.

143
00:09:34.267 --> 00:09:37.117
We imported the models,
we get some elements from the page.

144
00:09:37.117 --> 00:09:40.244
We declare some variables that
we're gonna need later, and so

145
00:09:40.244 --> 00:09:44.256
it's gonna be a bit easier to tweak if we
instead of not declaring these variables

146
00:09:44.256 --> 00:09:47.383
and using them in place,
we get to actually put a name on them and

147
00:09:47.383 --> 00:09:50.538
understand what they're used for
and we can tweak them.

148
00:09:50.538 --> 00:09:52.038
It makes it easier to tweak them later.

149
00:09:53.308 --> 00:09:56.185
So, as we've done
throughout these projects,

150
00:09:56.185 --> 00:09:58.698
we need to start by loading the model.

151
00:09:58.698 --> 00:10:02.876
So, we are gonna have a load model
function that's gonna be an async

152
00:10:02.876 --> 00:10:03.621
function.

153
00:10:05.871 --> 00:10:10.311
And the first thing that we're gonna
do is, we are going to have to go and

154
00:10:10.311 --> 00:10:12.541
get the initial model that we need.

155
00:10:12.541 --> 00:10:15.621
So that model is going to be MobileNet.

156
00:10:15.621 --> 00:10:18.050
So before we use COCO-SSD for
transfer learning,

157
00:10:18.050 --> 00:10:19.921
seems like they're using MobileNet.

158
00:10:19.921 --> 00:10:21.777
So we're gonna keep it that way.

159
00:10:21.777 --> 00:10:26.827
So if we do, actually for this one,
just to make sure that people get the URL,

160
00:10:26.827 --> 00:10:31.247
right, because we're getting
it from in a remote storage.

161
00:10:31.247 --> 00:10:32.611
We are going to cheat a little bit and

162
00:10:32.611 --> 00:10:34.937
we're going to go into
the solutions folder.

163
00:10:34.937 --> 00:10:39.167
So if you go back to your terminal
I'm gonna stop my server running.

164
00:10:39.167 --> 00:10:44.175
But if you go back to the roots of the
project, I added a solutions folder, and

165
00:10:44.175 --> 00:10:49.935
inside this solutions folder there's
the three projects that we're working on.

166
00:10:49.935 --> 00:10:53.770
But if you could not look at it in
advance, to not spoil everything,

167
00:10:53.770 --> 00:10:55.405
that would be great.

168
00:10:55.405 --> 00:10:59.799
But if you're a bit behind or anything,
if you're worried that you're missing out,

169
00:10:59.799 --> 00:11:00.711
then it's fine.

170
00:11:01.872 --> 00:11:06.189
So we're gonna go into project 2.

171
00:11:06.189 --> 00:11:12.172
And if I open this, so
that should be the solutions to project-2.

172
00:11:12.172 --> 00:11:17.752
And all I want you to copy for
now is this here from line 24 to 27.

173
00:11:17.752 --> 00:11:25.135
It's a URL to the Mobilenet Moodle stored,
you know, in like Google Storage thing.

174
00:11:25.135 --> 00:11:28.275
So I didn't want to have to like,
you know, dictate like the long URL.

175
00:11:28.275 --> 00:11:32.175
So let's just copy this and
then the rest we can read it ourselves.

176
00:11:32.175 --> 00:11:36.263
So just again to repeat solutions folder,
a project two and

177
00:11:36.263 --> 00:11:38.645
then part two, line 24 to 26.

178
00:11:38.645 --> 00:11:43.720
And then you can Close that let's
not look at the solutions in events.

179
00:11:43.720 --> 00:11:45.616
But again, it's fine if you do.

180
00:11:45.616 --> 00:11:49.241
Here, you can see that
we're not putting load.

181
00:11:49.241 --> 00:11:51.790
We're putting load layers model.

182
00:11:51.790 --> 00:11:54.762
And I think that this is a method
that allows us to then extract

183
00:11:54.762 --> 00:11:57.400
the different layers of
the machine learning model.

184
00:11:57.400 --> 00:12:00.263
So we're not loading the model itself.

185
00:12:00.263 --> 00:12:03.649
When we're loading, we're gonna load
a specific layer of ID that we're gonna

186
00:12:03.649 --> 00:12:05.693
reuse to train our own model.

187
00:12:05.693 --> 00:12:10.973
And the way to do that is we're going
to declare a variable called layer.

188
00:12:10.973 --> 00:12:12.942
And specifically,

189
00:12:12.942 --> 00:12:18.614
they seem to be extracting some
mobile net dot get layer and

190
00:12:18.614 --> 00:12:23.591
the one that we want is
called conv underscore pwu,

191
00:12:23.591 --> 00:12:29.513
I'm not sure what pw will use for,
and then 13 and relu.

192
00:12:29.513 --> 00:12:35.538
So I do not have the details about

193
00:12:35.538 --> 00:12:43.329
how Mobilenet was actually created.

194
00:12:43.329 --> 00:12:48.200
And it might be the end layer of the whole
training process that we're extracting

195
00:12:48.200 --> 00:12:49.569
to then train our own.

196
00:12:49.569 --> 00:12:53.922
I'm not sure about that one,
but what we're gonna do

197
00:12:53.922 --> 00:12:58.684
then with that layer is we're
going to return tf.model.

198
00:12:58.684 --> 00:13:03.006
And I think that's creating
almost kind of like a new layer,

199
00:13:03.006 --> 00:13:05.670
new model out of that layer, right?

200
00:13:05.670 --> 00:13:08.620
But right now I don't remember completely.

201
00:13:08.620 --> 00:13:11.266
So what we need, we have inputs,

202
00:13:11.266 --> 00:13:16.570
that's gonna be mobile net dot inputs,
and then we have outputs.

203
00:13:17.620 --> 00:13:23.650
That's gonna be the layer.output.

204
00:13:23.650 --> 00:13:28.760
Okay, so for this, in terms of
loading the initial model, that's it.

205
00:13:28.760 --> 00:13:33.236
So we loaded in mobilenet,
we extracted a layer, and outside of that,

206
00:13:33.236 --> 00:13:38.158
we created kind of like a new model that
we can work with when we're gonna create

207
00:13:38.158 --> 00:13:39.490
our own model.

208
00:13:39.490 --> 00:13:41.099
So you'll see later, but

209
00:13:41.099 --> 00:13:45.350
this is going to end up being
the first layer of our custom model.

210
00:13:45.350 --> 00:13:48.876
So we kind of build on top of Mobilenet.

211
00:13:48.876 --> 00:13:52.916
So for loading the model, that's it.

212
00:13:52.916 --> 00:13:56.440
And then we can have,
as we did before, an init function.

213
00:13:56.440 --> 00:13:59.650
That's gonna be an async function.

214
00:13:59.650 --> 00:14:03.114
And the first thing that we need,
again, we're working with images.

215
00:14:03.114 --> 00:14:05.944
So we're going to get the webcam.

216
00:14:05.944 --> 00:14:07.948
And what's interesting here, so

217
00:14:07.948 --> 00:14:11.894
we did declare a webcam at the top,
so we can just write it like this.

218
00:14:11.894 --> 00:14:16.110
So the webcam we're going to await, and

219
00:14:16.110 --> 00:14:21.071
this time it's going to
be tfd.webcam because

220
00:14:21.071 --> 00:14:26.032
apparently here we imported
tfts data as tfd and

221
00:14:26.032 --> 00:14:31.502
they have a method available
called webcam as well.

222
00:14:31.502 --> 00:14:36.889
And what you need to pass in is the webcam
element from the index.html page,

223
00:14:36.889 --> 00:14:41.620
so what we have here so our video
stream here that has the ID webcam.

224
00:14:41.620 --> 00:14:43.741
We actually need to pass
it in there as well.

225
00:14:43.741 --> 00:14:49.449
So document.getelementbyid webcam.

226
00:14:49.449 --> 00:14:55.837
Okay, so at this point,
we are starting to get the webcam and

227
00:14:55.837 --> 00:15:01.489
we are going to load our model
onto a variable as well.

228
00:15:01.489 --> 00:15:05.576
So we had our initial model variable
that we declared before, and

229
00:15:05.576 --> 00:15:09.439
what we're gonna do is call or
await our load model function so

230
00:15:09.439 --> 00:15:14.751
that now the initial model is actually
stored in the correct variable.

231
00:15:14.751 --> 00:15:19.871
So at this point, that is done, and
if you look at the here you know, at first

232
00:15:19.871 --> 00:15:25.351
I had like loading model to say that
the page is not quite ready to do things.

233
00:15:25.351 --> 00:15:30.397
Once the model has been loaded,
then we can get the status element and

234
00:15:30.397 --> 00:15:34.371
we are just gonna do some
simple style display is not.

235
00:15:34.371 --> 00:15:37.884
So it means that as soon as the model is
loaded onto the page, we're just hiding

236
00:15:37.884 --> 00:15:41.732
that status message to kind of say, to the
user like you're ready to go, basically.

237
00:15:43.802 --> 00:15:48.915
And here what we can do as
well is that we're going

238
00:15:48.915 --> 00:15:54.912
to be able to then at first
here this div is displayed on.

239
00:15:54.912 --> 00:15:58.932
So we're hiding the kind of
the elements that we're gonna need.

240
00:15:58.932 --> 00:16:03.058
And now we start to actually show them as
well because the model is ready to go.

241
00:16:03.058 --> 00:16:05.578
And we started loading the webcam.

242
00:16:05.578 --> 00:16:08.714
So if we just get that element,
as we have been getting the others,

243
00:16:08.714 --> 00:16:12.423
we could have declared it outside as well
but we're just going to need it here.

244
00:16:12.423 --> 00:16:16.937
Controller and style,
display and block, so again,

245
00:16:16.937 --> 00:16:23.116
if you wanted to extract that in like
a separate function to make it easier,

246
00:16:23.116 --> 00:16:27.784
that's that would be
obviously possible as well.

247
00:16:27.784 --> 00:16:33.514
But in terms of the, let's say
initial state, that is pretty much it.

248
00:16:33.514 --> 00:16:37.916
So if you wanted to just call it here,
we're not done with the logic, but if you

249
00:16:37.916 --> 00:16:42.698
just wanted to call it here so now that we
loaded the model and we have the webcam.

250
00:16:42.698 --> 00:16:47.028
Let's see if it works because at first
we have the loading status of the model.

251
00:16:47.028 --> 00:16:51.036
And now if it works well but the model
should be loaded, this kind of like status

252
00:16:51.036 --> 00:16:54.924
should disappear and we should see the
webcam on screen with the rest of the of

253
00:16:54.924 --> 00:16:58.738
the divs that are there select
train model and things like that.

254
00:16:58.738 --> 00:17:02.040
So if I reopen, oops.

255
00:17:02.040 --> 00:17:04.282
I forgot which, oops.

256
00:17:04.282 --> 00:17:08.900
Okay, so 1, 2, 3, 4, yes, okay.

257
00:17:08.900 --> 00:17:12.518
So what's happening here, if you see
if I refresh again, loading model,

258
00:17:12.518 --> 00:17:13.559
then it disappears.

259
00:17:13.559 --> 00:17:17.571
And then I have my camera here,
it's maybe zoomed in a little bit, and

260
00:17:17.571 --> 00:17:20.439
at the moment we don't have
the rest of the logic.

261
00:17:20.439 --> 00:17:24.343
We don't have any handler for adding left,
right, and right, starting or training,

262
00:17:24.343 --> 00:17:26.729
but that's kind of like
the basic UI that you need.

263
00:17:26.729 --> 00:17:29.601
We're gonna add samples,
then we're gonna train the model live and

264
00:17:29.601 --> 00:17:32.039
then we're gonna be able to
actually start predictions.

