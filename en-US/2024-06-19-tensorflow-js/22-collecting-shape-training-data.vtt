WEBVTT

1
00:00:00.231 --> 00:00:04.730
So at this point,
I think the download is already working.

2
00:00:04.730 --> 00:00:09.109
But what we're gonna do, and
it's going to be a little painful, but

3
00:00:09.109 --> 00:00:12.447
we are going to,
you can pick two different shapes.

4
00:00:12.447 --> 00:00:19.370
I'm going to draw a triangle and a circle,
and we're going to do that 40 times each.

5
00:00:19.370 --> 00:00:24.339
So, we're going to probably spend
maybe the next 10, 15 minutes,

6
00:00:24.339 --> 00:00:28.668
we're going to draw and
we're gonna download every picture.

7
00:00:28.668 --> 00:00:33.823
And what we'll do after is,
you can create,

8
00:00:33.823 --> 00:00:38.491
let's create now a data folder.

9
00:00:38.491 --> 00:00:42.123
So let me just check check,
a second, where exactly, so yeah,

10
00:00:42.123 --> 00:00:45.978
the Data folder can be outside of
the Public folder, that's fine.

11
00:00:45.978 --> 00:00:50.521
So here at the root of the project,
create an empty Data folder.

12
00:00:50.521 --> 00:00:54.717
And for now,
what we're going to do is, so again,

13
00:00:54.717 --> 00:00:58.237
I can do one just to
show you to get started.

14
00:00:58.237 --> 00:01:04.021
So, let's say I draw a triangle,
so I have a triangle like this,

15
00:01:04.021 --> 00:01:09.349
and I'm going to download it,
and it will be this one.

16
00:01:09.349 --> 00:01:12.972
And here I'm going to
start by renaming it, and

17
00:01:12.972 --> 00:01:18.960
I'm gonna do 0 because this is the first
one, and then triangle, like that.

18
00:01:18.960 --> 00:01:24.625
And then I will, I'm gonna stop my
server and open my folder here.

19
00:01:24.625 --> 00:01:30.097
And in my data folder, I'm going to
drag this zero triangle drawing,

20
00:01:30.097 --> 00:01:33.638
and I'm going to do the same again and
again.

21
00:01:33.638 --> 00:01:38.327
So I clear, and then I draw a new
triangle, and then I download, and

22
00:01:38.327 --> 00:01:40.647
why do I call it, 1-triangle.

23
00:01:40.647 --> 00:01:45.670
And I'm gonna do that, and you're
gonna do that 40 times for each label.

24
00:01:45.670 --> 00:01:51.063
So if you want to do a square instead of a
circle or whatever, I'm gonna do triangle

25
00:01:51.063 --> 00:01:57.177
and circle and I'm probably, I think we
could be able to do in 10, 15 minutes.

26
00:01:57.177 --> 00:02:01.831
So, if you want to get started now,
I'm gonna do it as well.

27
00:02:01.831 --> 00:02:03.834
All right, so let's do it.

28
00:02:03.834 --> 00:02:11.304
All right, so, hopefully you're done with
drawing 40 circles and 40 triangles.

29
00:02:11.304 --> 00:02:15.491
If you haven't had the time or
if you're not ready to have 40 but

30
00:02:15.491 --> 00:02:18.474
you have at least maybe 30, that's right.

31
00:02:18.474 --> 00:02:20.785
If you only have 10,
that's gonna be not enough.

32
00:02:20.785 --> 00:02:25.426
But at the end, your data folder should
be kinda full of files that have

33
00:02:25.426 --> 00:02:30.251
the format like 0- and then your labels,
so the name of your shape.

34
00:02:30.251 --> 00:02:33.605
So I have 0-circle.png, 0-triangle, and

35
00:02:33.605 --> 00:02:37.792
then, 1-circle, 1-triangle,
all the way to the end.

36
00:02:37.792 --> 00:02:40.091
So it looks kind of cool like that.

37
00:02:40.091 --> 00:02:44.474
So you should have about 80 files,
that would be a good start.

38
00:02:44.474 --> 00:02:47.624
In general, obviously,
if look at open source datasets,

39
00:02:47.624 --> 00:02:51.287
they have like thousands of images,
we do not have the time for that.

40
00:02:51.287 --> 00:02:54.711
So what's gonna be interesting is
that as we create our model later on,

41
00:02:54.711 --> 00:02:58.364
we'll see that our accuracy is probably
not going to be 90% or anything,

42
00:02:58.364 --> 00:03:00.437
it's probably gonna be lower because-.

43
00:03:00.437 --> 00:03:03.044
Because of the amount
of images that we have.

44
00:03:03.044 --> 00:03:05.602
And then we'll be able to
talk about how you can

45
00:03:05.602 --> 00:03:08.431
improve your accuracy by
drawing more triangles.

46
00:03:08.431 --> 00:03:13.970
And obviously here we did it by hand,
we drew circles and we drew triangles.

47
00:03:13.970 --> 00:03:18.390
And in the end, if you get tired, your
circles end up looking more like squares.

48
00:03:18.390 --> 00:03:23.323
But yes, usually, there are ways where you
can actually automate some of that work,

49
00:03:23.323 --> 00:03:25.119
some of you might have done it.

50
00:03:25.119 --> 00:03:28.877
And what I've done in the past is you
can do, I think it's called either data

51
00:03:28.877 --> 00:03:32.698
augmentation or data transformation,
is you can write a Python script, and

52
00:03:32.698 --> 00:03:35.789
you can take one of your image and
resize it in a different way.

53
00:03:35.789 --> 00:03:39.141
So you can flip it, for example,
or you can reverse it, and

54
00:03:39.141 --> 00:03:43.499
you can then end up generating maybe five
more images from a single image, and

55
00:03:43.499 --> 00:03:46.944
that's like a quick way to end
up with having a lot more data.

56
00:03:46.944 --> 00:03:49.078
So, if you want at
the end of this workshop,

57
00:03:49.078 --> 00:03:52.543
you realize that your model is not
accurate enough and you want to data,

58
00:03:52.543 --> 00:03:55.291
then you can go and
write a Python script that will take.

59
00:03:55.291 --> 00:03:59.298
For example, your first circle, and
then you are rotate it 19 degrees, and

60
00:03:59.298 --> 00:04:01.057
then again, again, again.

61
00:04:01.057 --> 00:04:05.089
So you have like all the different angles
and then you can also flip it, and

62
00:04:05.089 --> 00:04:08.684
that will give you about six images
from one circle that you drew.

63
00:04:08.684 --> 00:04:11.717
So you end up 80 drawings times 6.

64
00:04:11.717 --> 00:04:16.896
I'm not gonna count here, but you can end
up with maybe a couple hundred drawings.

65
00:04:16.896 --> 00:04:20.850
So that will hopefully then improve
the accuracy of your model.

66
00:04:20.850 --> 00:04:26.120
But for now, I wanted to do it the manual
way, just to show you how it's done.

67
00:04:26.120 --> 00:04:31.424
And now that we have our data in
the Data folder, one thing that is good

68
00:04:31.424 --> 00:04:36.546
to know when we are working with
machine learning is that you need to

69
00:04:36.546 --> 00:04:41.495
kind of split your data set between
a training set and a test set.

70
00:04:41.495 --> 00:04:46.494
So what we can do here is,
inside your data folder still,

71
00:04:46.494 --> 00:04:49.002
you can create a new folder.

72
00:04:49.002 --> 00:04:49.942
So I'm gonna do it outside.

73
00:04:49.942 --> 00:04:54.837
So I'm gonna create a folder here
that I'm gonna call train, and

74
00:04:54.837 --> 00:04:57.785
I'm gonna drag it into my data folder.

75
00:04:57.785 --> 00:05:02.245
And I'm also gonna create a new
folder called test, and again,

76
00:05:02.245 --> 00:05:04.895
I'm dragging it into my data folder.

77
00:05:04.895 --> 00:05:07.613
So in the end, your data folder
should have all your images and

78
00:05:07.613 --> 00:05:09.298
then a test folder and a train folder.

79
00:05:09.298 --> 00:05:14.612
And what we're gonna do in here
is we are going to maybe copy,

80
00:05:14.612 --> 00:05:19.317
let's say,
if you have 40 drawings of each shape.

81
00:05:19.317 --> 00:05:24.990
Maybe we're gonna copy 30 of each
drawing into the train's folder and

82
00:05:24.990 --> 00:05:27.509
then 10 into the test folder.

83
00:05:27.509 --> 00:05:32.673
So you kind of maybe want a split of 80%
of your images into a train folder and

84
00:05:32.673 --> 00:05:35.227
then maybe 20% into a test folder.

85
00:05:35.227 --> 00:05:39.640
So depend, if you don't have 40 images,
kind of like,

86
00:05:39.640 --> 00:05:44.232
see how much you can actually
drag in there, but if I have, so

87
00:05:44.232 --> 00:05:49.030
here I will go until my, or
maybe let's do either 25 or 30.

88
00:05:49.030 --> 00:05:52.753
I think it should be fine.

89
00:05:52.753 --> 00:05:56.380
So if we select until our 30th drawing and

90
00:05:56.380 --> 00:06:00.421
we drag it into, okay,
well, I can just copy.

91
00:06:00.421 --> 00:06:04.594
So we can select them, Copy,
go in your Train folder, Paste.

92
00:06:04.594 --> 00:06:06.952
You should paste them all, okay?

93
00:06:06.952 --> 00:06:12.111
So we should have 0 to 30, and
then we are going to maybe,

94
00:06:12.111 --> 00:06:15.634
well, let's select from 31 to 40.

95
00:06:15.634 --> 00:06:21.199
So actually, it's not more gonna be 31 9,
but that's fine.

96
00:06:21.199 --> 00:06:27.019
So we can copy here and
put them in the Test folder, Paste.

97
00:06:27.019 --> 00:06:30.729
Okay, so now if you want, you can
delete the images I started for them.

98
00:06:30.729 --> 00:06:34.297
We're gonna keep them, it's fine,
we're not going to load them into our app.

99
00:06:34.297 --> 00:06:38.294
But it means that if you look at your
train folder, you should have a bunch of

100
00:06:38.294 --> 00:06:41.813
images, and in your test folder
you should have a bit less.

101
00:06:41.813 --> 00:06:45.196
So the way this is going to be used is
that we're going to use all of the images

102
00:06:45.196 --> 00:06:47.414
in the train folder to
actually train our model.

103
00:06:47.414 --> 00:06:50.994
And then at the end of the training step,
we'll use the test images, so

104
00:06:50.994 --> 00:06:53.739
the images that the model
would have not seen before and

105
00:06:53.739 --> 00:06:57.815
be able to check if its prediction match
the label that's in the name of the file.

106
00:06:58.966 --> 00:07:04.936
So at this point, all we have is data,
kind of, hand drawn data.

107
00:07:04.936 --> 00:07:12.436
So the first thing that we need to do is
to, start to load that data in our app.

108
00:07:12.436 --> 00:07:16.993
So if we go to, the getData file,
I kind of split my

109
00:07:16.993 --> 00:07:21.889
files into the three steps
that we're going to take.

110
00:07:21.889 --> 00:07:24.756
So this is going to be written in Node.js.

111
00:07:24.756 --> 00:07:29.161
So if you have not really written
Node.js before, it's just very similar,

112
00:07:29.161 --> 00:07:32.229
it just doesn't run
directly in the browser.

113
00:07:32.229 --> 00:07:37.651
So instead of using import, though,
we're going to use const tf,

114
00:07:37.651 --> 00:07:43.662
and we're going to require @tensorflow,
and we're gonna use node GPU.

115
00:07:43.662 --> 00:07:47.995
So, @tensorflow/tfgs-node-gpu, and

116
00:07:47.995 --> 00:07:54.949
t TensorFlow here is going to be used
to create tensors out of our images,

117
00:07:54.949 --> 00:07:59.588
so that then they can
be fed into the model.

118
00:07:59.588 --> 00:08:04.968
But then because we are working with
a file system, we also need to require fs.

119
00:08:04.968 --> 00:08:10.431
So const fs require the file system,

120
00:08:10.431 --> 00:08:13.609
native node module.

121
00:08:13.609 --> 00:08:16.828
And we also need to
declare a path variable.

122
00:08:16.828 --> 00:08:18.322
So require and then path.

123
00:08:18.322 --> 00:08:24.623
So, in terms of things that you need
to require, that should be it for now.

124
00:08:24.623 --> 00:08:31.289
Then we're going to create a variable
to indicate the path to our data.

125
00:08:31.289 --> 00:08:35.001
So we can do train, images,

126
00:08:35.001 --> 00:08:39.953
directory, so trainImagesDir, and

127
00:08:39.953 --> 00:08:46.010
this is just going to be ./data and
/train.

128
00:08:46.010 --> 00:08:49.079
And we need to do the same to also
indicate the path to our test file.

129
00:08:49.079 --> 00:08:54.332
So you can copy your line, and
instead of trainImagesDir,

130
00:08:54.332 --> 00:08:58.008
we're going to write testImageDir, and

131
00:08:58.008 --> 00:09:03.905
we also update the path from
./data/train to ./data/test.

132
00:09:05.415 --> 00:09:10.398
And then what we're going to do
is we're going to just create two

133
00:09:10.398 --> 00:09:12.351
arrays to hold our data.

134
00:09:12.351 --> 00:09:18.601
So we create, let trainData,
it's gonna be an empty array,

135
00:09:18.601 --> 00:09:22.223
or, actually, let me just check.

136
00:09:23.793 --> 00:09:27.164
I think we can actually just not
even give it a value for now,

137
00:09:27.164 --> 00:09:29.603
cuz we'll just assign it directly later.

138
00:09:29.603 --> 00:09:33.829
So we can have,
let trainData and testData, so

139
00:09:33.829 --> 00:09:38.592
that will contain our tensors
with our data later on.

140
00:09:39.922 --> 00:09:43.071
So at this point, we just have like
a basic setup but we have not yet

141
00:09:43.071 --> 00:09:44.172
loaded their images.

142
00:09:44.172 --> 00:09:50.004
So we can create a function
called const loadImages, and

143
00:09:50.004 --> 00:09:56.519
it's going to take in our
data directory as parameter.

144
00:09:56.519 --> 00:10:02.944
And we're gonna create, oops,
my arrow function is not good here, okay.

145
00:10:02.944 --> 00:10:08.580
And we're going to create two arrays, one
that's gonna actually contain the images,

146
00:10:08.580 --> 00:10:13.016
the image data at least, and
one that is going to contain the labels.

147
00:10:13.016 --> 00:10:17.110
Now, the next step is to
actually fetch the files or

148
00:10:17.110 --> 00:10:20.688
read the files from the local folder.

149
00:10:20.688 --> 00:10:23.760
So we can have let files, and

150
00:10:23.760 --> 00:10:28.496
we're going to use the file system method.

151
00:10:28.496 --> 00:10:32.148
So fs.readirSync.

152
00:10:32.148 --> 00:10:35.579
So, careful here, readdir, like,
dir doesn't have like a capital letter.

153
00:10:35.579 --> 00:10:37.544
Sometimes I get confused.

154
00:10:37.544 --> 00:10:41.714
So readdir with a lowercase d and
sync with a S.

155
00:10:41.714 --> 00:10:45.244
And we are passing it
the path to our directory.

156
00:10:47.354 --> 00:10:50.783
So what this is going to do is going
to read the files that are from

157
00:10:50.783 --> 00:10:51.884
the directory, but

158
00:10:51.884 --> 00:10:56.316
then we need to loop through these files
to actually get the images and the label.

159
00:10:56.316 --> 00:11:02.410
So we can create a for loop,
so we have for(let i = 0,

160
00:11:02.410 --> 00:11:06.650
and then until the number of files, so

161
00:11:06.650 --> 00:11:11.577
i is less than the files.length and i++.

162
00:11:11.577 --> 00:11:17.645
So this loop is going to loop through all
of the files that we have in our folder.

163
00:11:17.645 --> 00:11:22.248
And what we're going to
do is get the file path.

164
00:11:22.248 --> 00:11:27.042
So here we, maybe not, but
let file path is going to be,

165
00:11:27.042 --> 00:11:31.278
we're going to use the path
module that we required.

166
00:11:31.278 --> 00:11:36.589
We're going to join and
then we do data directory.

167
00:11:36.589 --> 00:11:40.777
And the second argument will be the name
of every single file, so files,

168
00:11:40.777 --> 00:11:44.638
and then you get the particular
file that we're looking through.

169
00:11:44.638 --> 00:11:48.245
So this is going to be the path for
each individual file, and

170
00:11:48.245 --> 00:11:52.369
then we're going to be able to read
the data that's from that file.

171
00:11:52.369 --> 00:11:56.508
So we can create a buffer, so
let's buffer as a variable, and

172
00:11:56.508 --> 00:11:59.221
we're going to use file system as well.

173
00:11:59.221 --> 00:12:04.879
So fs.readFileSync, and
we're passing it our file path.

174
00:12:04.879 --> 00:12:09.271
So this is going to return the data that
is contained into each of our file, and

175
00:12:09.271 --> 00:12:10.839
it's returning a buffer.

176
00:12:10.839 --> 00:12:17.011
So even here,
if we wanted to look at what's going on,

177
00:12:17.011 --> 00:12:24.527
what we could try to do is,
if you want to console.log the buffer,

178
00:12:24.527 --> 00:12:28.848
we can try to call this function here.

179
00:12:28.848 --> 00:12:34.702
So if you take the load function and
you call it and you pass it,

180
00:12:34.702 --> 00:12:39.430
the train image variable,
if we want to run this,

181
00:12:39.430 --> 00:12:46.324
it should actually then just show you
what the data actually looks like.

182
00:12:46.324 --> 00:12:52.070
So if you have called and
then in the terminal you write node,

183
00:12:52.070 --> 00:12:58.715
and that's getData.js,
it should actually return a bunch of yes.

184
00:12:58.715 --> 00:13:01.154
So you can see for
every file that we are returning,

185
00:13:01.154 --> 00:13:03.615
the data that we're getting
back is like a buffer.

186
00:13:03.615 --> 00:13:07.641
So this is important, because then
there's some methods from TensorFlow that

187
00:13:07.641 --> 00:13:09.335
are going to decode this buffer.

