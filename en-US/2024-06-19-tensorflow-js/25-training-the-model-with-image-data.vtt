WEBVTT

1
00:00:00.640 --> 00:00:04.068
So we're going to move to
our train drawings file, and

2
00:00:04.068 --> 00:00:09.740
there again should be nothing in there
yet, and we're going to write everything.

3
00:00:09.740 --> 00:00:13.061
So if we do it the same way as before,
const tf,

4
00:00:13.061 --> 00:00:17.068
and we're going to require tensorflow,
the node gpu,

5
00:00:17.068 --> 00:00:22.183
that's gonna be needed to actually
run the training, and we're going

6
00:00:22.183 --> 00:00:28.148
to be able to import some of the functions
that we wrote in our get data file.

7
00:00:28.148 --> 00:00:33.999
So we're going to load or
to import loadData,

8
00:00:33.999 --> 00:00:40.196
so okay, loadData, okay, getTrainData.

9
00:00:40.196 --> 00:00:45.101
And then we have geTestData as well, and

10
00:00:45.101 --> 00:00:48.562
we are going to oops, oops,

11
00:00:48.562 --> 00:00:53.049
require that from our get data file.

12
00:00:53.049 --> 00:00:57.496
So that should be our three main
functions that we're going to need.

13
00:00:58.596 --> 00:01:02.450
And then we also need to
import the model itself.

14
00:01:02.450 --> 00:01:09.500
So const model, and
we're gonna require create model here.

15
00:01:09.500 --> 00:01:10.724
So at this point,

16
00:01:10.724 --> 00:01:15.788
we should have our kind of functions
that are gonna help us load the data and

17
00:01:15.788 --> 00:01:20.620
only retrieve the test set and
we also have access to the model itself.

18
00:01:22.010 --> 00:01:27.882
So then we can start
creating our function.

19
00:01:27.882 --> 00:01:33.720
Okay, so I called it run, but maybe
let's call it train, makes more sense.

20
00:01:33.720 --> 00:01:38.600
So we have const train and
it's going be an async function.

21
00:01:38.600 --> 00:01:41.610
So like this.

22
00:01:41.610 --> 00:01:47.070
And first of all,
we're going to load our data.

23
00:01:47.070 --> 00:01:52.258
So we load the data, and
if we remember what this

24
00:01:52.258 --> 00:01:58.330
does here is that it's
calling the loadImages here.

25
00:01:58.330 --> 00:02:02.710
Okay, and what we're going to do,

26
00:02:02.710 --> 00:02:07.820
is then we're going to be able to actually

27
00:02:07.820 --> 00:02:13.077
get our images, so trainImages here, and

28
00:02:13.077 --> 00:02:19.174
then we're going to get
the labels as well.

29
00:02:19.174 --> 00:02:24.795
It's gonna be trainLabels and
that will be from getTrainingData.

30
00:02:25.925 --> 00:02:27.485
Oops, yeah, getTrainData, sorry.

31
00:02:29.375 --> 00:02:33.828
We're loading it and
then we're only requiring

32
00:02:33.828 --> 00:02:37.743
the training image in the training label.

33
00:02:37.743 --> 00:02:43.686
And then what we can do before we,
actually no we can do that now.

34
00:02:43.686 --> 00:02:46.286
So then, if you remember from yesterday,

35
00:02:46.286 --> 00:02:49.926
the method to call to train
the model is called .fit.

36
00:02:49.926 --> 00:02:53.813
So if we do a wait, and
then model.fit, and

37
00:02:53.813 --> 00:02:58.542
the first two arguments
are gonna be training data and

38
00:02:58.542 --> 00:03:05.024
training label, so here will
trainImages and then trainLabels.

39
00:03:05.024 --> 00:03:07.854
And then there's a few extra parameters.

40
00:03:07.854 --> 00:03:11.550
So if you remember from yesterday as well,

41
00:03:11.550 --> 00:03:16.066
what epochs are so
epoch is just the number of times or

42
00:03:16.066 --> 00:03:22.070
the number of steps that the training
model is going to go through.

43
00:03:22.070 --> 00:03:28.400
So here for epochs, let's say we're
going to do, how many do I have here?

44
00:03:28.400 --> 00:03:32.380
10, okay, we're gonna do 10 steps to start
with, and then again, you can change that.

45
00:03:32.380 --> 00:03:34.800
The more epochs you have,
the longer it's going to train.

46
00:03:34.800 --> 00:03:36.440
But also you might have better accuracy.

47
00:03:36.440 --> 00:03:42.166
And if you use a lower number, you might
have lower accuracy but it go faster.

48
00:03:42.166 --> 00:03:43.426
So again, it will depend.

49
00:03:43.426 --> 00:03:44.038
There's so

50
00:03:44.038 --> 00:03:48.566
many different parameters because it also
depends on number of images that you have.

51
00:03:48.566 --> 00:03:52.166
Okay, so we have epochs and
we also need a batchSize.

52
00:03:52.166 --> 00:03:53.976
So we have a batchSize.

53
00:03:53.976 --> 00:03:58.296
That's the number of images that are going
to be used for each of the training step.

54
00:03:58.296 --> 00:04:02.256
I picked five we can
change that later as well.

55
00:04:02.256 --> 00:04:08.526
And then the third argument that you can
pass it as well is a validationSplit.

56
00:04:08.526 --> 00:04:15.823
And what that means, I'm gonna declare it,
we're gonna use 0.2.

57
00:04:15.823 --> 00:04:22.700
ValidationSplit, yeah, and
that is different from the testing part.

58
00:04:22.700 --> 00:04:27.540
So the validationSplit means
that here we're gonna use 20% of

59
00:04:27.540 --> 00:04:31.852
our training images to actually
validate that it predicts

60
00:04:31.852 --> 00:04:36.860
the right label before we even
go into the testing set as well.

61
00:04:36.860 --> 00:04:41.766
So testing, when you run into the testing
of a model it's more about feeding

62
00:04:41.766 --> 00:04:46.354
it images never seen before and
see if it actually has the right label.

63
00:04:46.354 --> 00:04:48.874
And the validation is using
the training data already.

64
00:04:48.874 --> 00:04:52.173
So you're going through the process,
you're using the training data,

65
00:04:52.173 --> 00:04:56.109
you're learning from it, and through each
of the step, you're using kind of 20% or

66
00:04:56.109 --> 00:04:59.885
here, yes, here 20% of your training data,
and you're just checking, okay,

67
00:04:59.885 --> 00:05:04.317
I just gave you that training data do you
recognize the data you've already seen?

68
00:05:04.317 --> 00:05:08.145
And if already that's good, then
the testing set should do a even better

69
00:05:08.145 --> 00:05:11.507
evaluation because it's
given a data it hasn't seen.

70
00:05:11.507 --> 00:05:16.525
So, this is not required,
but usually I guess it's,

71
00:05:16.525 --> 00:05:20.384
I guess it would be
good to pass it anyway.

72
00:05:20.384 --> 00:05:23.817
To kind of train our model with
data it's already seen and

73
00:05:23.817 --> 00:05:26.544
then we can do the testing part of it.

74
00:05:26.544 --> 00:05:30.154
So here again, this fit method
is going to do the training.

75
00:05:30.154 --> 00:05:34.482
And now if we move on to the testing, you
can copy the line that you had above where

76
00:05:34.482 --> 00:05:37.794
we were requiring the training images and
training labels.

77
00:05:39.084 --> 00:05:44.716
So instead of calling it from trainImages,
we have testImages and

78
00:05:44.716 --> 00:05:50.848
then testLabels and
we're calling a function getTestData.

79
00:05:50.848 --> 00:05:54.928
So this is going to get our
objects of tensors, images and

80
00:05:54.928 --> 00:06:00.806
labels from the test set from under
our test folder in our data folder.

81
00:06:00.806 --> 00:06:08.116
And the way to do the testing here is
going to be to call the evaluate method.

82
00:06:08.116 --> 00:06:13.648
So first we can call a function or
a variable called evalOutput and

83
00:06:13.648 --> 00:06:17.170
we're going to call model.evaluate and

84
00:06:17.170 --> 00:06:22.111
we're going to pass it these
testImages and testLabels.

85
00:06:23.171 --> 00:06:28.251
So testImages and then testLabels.

86
00:06:29.381 --> 00:06:33.097
And at this point, what is useful
is to actually then log this into

87
00:06:33.097 --> 00:06:36.207
the terminal so
that when we run the training process,

88
00:06:36.207 --> 00:06:40.533
we'll have an output every time that we
tests things and we'll be able to see

89
00:06:40.533 --> 00:06:45.636
how the accuracy changes over the courses
of the course of the training process.

90
00:06:45.636 --> 00:06:52.671
So the way that we can do this is maybe
we're gonna create a variable called loss,

91
00:06:52.671 --> 00:07:00.106
and it's going to have the evalOutput,
the first element of the evalOutput.

92
00:07:00.106 --> 00:07:04.583
And then there's a method you can do to
extract the data that's called dataSync.

93
00:07:04.583 --> 00:07:11.903
And we're going to get the first value
of that as well, and then toFixed3.

94
00:07:13.433 --> 00:07:18.099
And I mean, we can see even if we don't
use that, what's coming back of it, but

95
00:07:18.099 --> 00:07:19.854
that's the way that I had it.

96
00:07:19.854 --> 00:07:24.064
And then the accuracy is the second
element of that evaluation output.

97
00:07:24.064 --> 00:07:28.775
So here if we change to accuracy,
we have evalOutput the first element, and

98
00:07:28.775 --> 00:07:33.391
we can do the rest just to format
the numbers in the same way.

99
00:07:33.391 --> 00:07:38.176
And then we can have a console.log and
we can have,

100
00:07:38.176 --> 00:07:42.754
maybe we can have two just
to format it properly.

101
00:07:42.754 --> 00:07:49.151
So we can do have loss, and
then we can pass that as loss here, and

102
00:07:49.151 --> 00:07:54.377
then below we can have accuracy,
accuracy, okay.

103
00:07:54.377 --> 00:07:57.056
So I'm tempted at this point,
there's another step,

104
00:07:57.056 --> 00:08:00.194
but maybe let's first check
that it even runs, okay.

105
00:08:00.194 --> 00:08:03.543
So here, if you call your train function,

106
00:08:03.543 --> 00:08:09.522
let's see if at least we're not
getting any error, hopefully.

107
00:08:09.522 --> 00:08:14.343
Okay, so if you're at this point and
we're calling train,

108
00:08:14.343 --> 00:08:19.537
you can go to your terminal, and
the way to run this is to do node and

109
00:08:19.537 --> 00:08:23.172
then you should have train-drawings.js.

110
00:08:23.172 --> 00:08:29.797
If we run this, no, okay, so I know why.

111
00:08:29.797 --> 00:08:34.608
So here it's complaining because
when we declared our one hot tensor,

112
00:08:34.608 --> 00:08:39.758
it's telling you it must be an int 32,
but actually we passed it for 32.

113
00:08:39.758 --> 00:08:43.669
So it's something where I would try to
improvise and see what it would change.

114
00:08:43.669 --> 00:08:46.932
But what I like sometimes is that
even if you do trial and error,

115
00:08:46.932 --> 00:08:49.919
tensor flow will tell you what's wrong.

116
00:08:49.919 --> 00:08:55.809
So if we go back to our,
it probably would be in our getData file.

117
00:08:55.809 --> 00:09:01.502
So here where we're creating
one hot tensor for the labels,

118
00:09:01.502 --> 00:09:06.745
we just need to change it to int 32,
instead of 32 for

119
00:09:06.745 --> 00:09:12.767
both, for both training data and
then test data as well.

120
00:09:12.767 --> 00:09:18.367
So once this is done, it seemed to,
hopefully that will work.

121
00:09:18.367 --> 00:09:24.708
So if we run node train-drawings.js again,
okay, so it is going through sorry.

122
00:09:24.708 --> 00:09:27.214
So another thing that I miss coded here,

123
00:09:27.214 --> 00:09:30.910
I can fix that error coz I wanna
talk about what's up there.

124
00:09:30.910 --> 00:09:34.348
But here I just need to,
actually I'm gonna do it now.

125
00:09:34.348 --> 00:09:38.538
So instead of I wrote model.evaluation,
but this is model.evaluate.

126
00:09:38.538 --> 00:09:43.301
I think the autocomplete was probably,
didn't help me here.

127
00:09:43.301 --> 00:09:47.831
Okay, so what's happening here is
that we have trained our model.

128
00:09:47.831 --> 00:09:52.276
We haven't saved it yet, that will be
what's happening after, but here, yeah, so

129
00:09:52.276 --> 00:09:55.177
I was right here I didn't call
any await or anything, so

130
00:09:55.177 --> 00:09:58.381
it console logged everything
at the same time anyway.

131
00:09:58.381 --> 00:10:00.621
So here we can see that, if you remember,

132
00:10:00.621 --> 00:10:04.397
in terms of number of epochs I believe
we had 10 and we can see here, so

133
00:10:04.397 --> 00:10:08.253
you have the output of, okay,
the first step of the training process.

134
00:10:08.253 --> 00:10:13.773
So one out of 10 we are getting here an
accuracy of 0.49, which is not even half,

135
00:10:13.773 --> 00:10:17.773
so it is we're not doing very well,
and then a very high loss.

136
00:10:17.773 --> 00:10:22.939
So I'm actually not exactly sure what
these are compared to acccuracy and loss.

137
00:10:22.939 --> 00:10:25.269
But usually I look at these ones here.

138
00:10:25.269 --> 00:10:27.249
And the issue as well is that as you see,

139
00:10:27.249 --> 00:10:31.449
when we go through the subsequent steps
of the training process, so epoch 2, 3,

140
00:10:31.449 --> 00:10:34.329
the value actually doesn't change,
it stays the same.

141
00:10:34.329 --> 00:10:38.395
So there is definitely here
something that we need to change and

142
00:10:38.395 --> 00:10:41.089
we can experiment a little bit with that.

143
00:10:41.089 --> 00:10:46.124
And at the end of the last training
process, we have only an accuracy of 0.5.

144
00:10:46.124 --> 00:10:51.120
So at this point,
we're not gonna tweak our model yet.

145
00:10:51.120 --> 00:10:54.233
We're probably going to keep
going with the exercise to have

146
00:10:54.233 --> 00:10:56.470
our full implementation ready.

147
00:10:56.470 --> 00:11:02.868
And then we are going to tweak some
parameters and then retrain it and

148
00:11:02.868 --> 00:11:07.480
see how it impacts also
the experience in the UI.

