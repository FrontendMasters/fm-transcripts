WEBVTT

1
00:00:00.130 --> 00:00:06.139
So I wanna talk about several things
that are less than optimal, we'll say.

2
00:00:06.139 --> 00:00:08.969
And again,
I wanna start with the LOOKUP function,

3
00:00:08.969 --> 00:00:12.056
because that one was a little
bit easier to reason about,

4
00:00:12.056 --> 00:00:15.745
we didn't have to do quite so
much thinking to get to that solution.

5
00:00:15.745 --> 00:00:19.898
The fact that we had to
do anything in the LOOKUP

6
00:00:19.898 --> 00:00:24.596
function should be a little
bit of a code smell to us.

7
00:00:24.596 --> 00:00:27.566
We have all of that information there.

8
00:00:27.566 --> 00:00:29.469
We know all of the symbols upfront,

9
00:00:29.469 --> 00:00:32.266
that's not a thing that
needs to be computed later.

10
00:00:32.266 --> 00:00:36.240
We know all of that, and
we're not saving any of that information,

11
00:00:36.240 --> 00:00:39.184
we're not remembering
any of that information.

12
00:00:39.184 --> 00:00:43.157
Just think about the fact that we call the
LOOKUP, you could call it multiple times

13
00:00:43.157 --> 00:00:45.816
with the same symbol and
it would research every time.

14
00:00:45.816 --> 00:00:47.819
It's not remembering any of its work, and

15
00:00:47.819 --> 00:00:51.502
it's having to search potentially through
the whole list every single time.

16
00:00:51.502 --> 00:00:56.029
So there are red flags that should
be going off all over the place,

17
00:00:56.029 --> 00:00:58.760
just about those few for lines of code.

18
00:00:58.760 --> 00:01:03.838
Now, this is not gonna break
anybody's performance bank.

19
00:01:03.838 --> 00:01:07.564
This is not gonna be
the reason why your app fails,

20
00:01:07.564 --> 00:01:10.946
something like this, but it's a paper cut.

21
00:01:10.946 --> 00:01:15.861
In fact it's a couple dozen paper cuts and
we know that paper cuts add up, you've

22
00:01:15.861 --> 00:01:20.793
heard of that adage the death of 1,000
paper cuts, we know that they add up.

23
00:01:20.793 --> 00:01:27.235
And an algorithmist says,
if I can avoid the paper cuts, I should.

24
00:01:27.235 --> 00:01:30.907
Can't always avoid them,
you're not gonna get a perfect solution.

25
00:01:30.907 --> 00:01:34.460
But if I can look at something and
I've got a red flag that tells me there's

26
00:01:34.460 --> 00:01:37.749
a paper cut there that I could avoid,
then we should think about it.

27
00:01:37.749 --> 00:01:40.532
And in fact, here's another principle,
it could have been one of

28
00:01:40.532 --> 00:01:43.613
the ones that I put on the slides earlier
at the beginning of the workshop,

29
00:01:43.613 --> 00:01:44.876
in the intro to the workshop.

30
00:01:44.876 --> 00:01:47.037
Here's another one of those takeaways.

31
00:01:47.037 --> 00:01:51.274
If you know something up front,
remember it.

32
00:01:51.274 --> 00:01:53.402
Don't throw it away and
recompute it later.

33
00:01:53.402 --> 00:01:59.191
Don't be lazy like, I can always recompute
the answer to that question later.

34
00:01:59.191 --> 00:02:03.174
If you've discovered it, remember it.

35
00:02:03.174 --> 00:02:07.057
That's gonna be a key to developing
more optimal algorithms.

36
00:02:07.057 --> 00:02:12.307
So when we load up the whole list of
elements here, we effectively know all

37
00:02:12.307 --> 00:02:17.557
of the mappings between an element's
symbol name and the element entry,

38
00:02:17.557 --> 00:02:22.739
but we're not remembering any of that
when we throw it all into an array.

39
00:02:22.739 --> 00:02:26.831
So the first thing that we're
gonna do is remember that.

40
00:02:26.831 --> 00:02:30.371
And you might recall that I discussed
this notion of creating indexes,

41
00:02:30.371 --> 00:02:32.790
we're not gonna duplicate
our data structure,

42
00:02:32.790 --> 00:02:35.275
our data structure is what
our data structure is.

43
00:02:35.275 --> 00:02:38.297
That's how it comes from the JSON,
there's no reason for

44
00:02:38.297 --> 00:02:40.895
us to construct a new data
structure in this case.

45
00:02:40.895 --> 00:02:42.198
We're just gonna leave it that way.

46
00:02:42.198 --> 00:02:46.699
But we are gonna construct an index
that allows us to look up something with

47
00:02:46.699 --> 00:02:51.069
a single operation rather than having
to loop through the whole thing.

48
00:02:51.069 --> 00:02:54.347
Constructing an index sounds
a whole lot more complicated and

49
00:02:54.347 --> 00:02:56.307
sophisticated than it actually is.

50
00:02:56.307 --> 00:03:00.275
So, go back to your co-workers
the next time you're at work and say,

51
00:03:00.275 --> 00:03:04.535
I constructed an index and it increased
the optimization of my algorithm.

52
00:03:04.535 --> 00:03:07.436
And they'll buy you lunch that day,
I promise.

53
00:03:07.436 --> 00:03:12.037
Like cool, constructed an index to
optimize the algorithm, is pretty cool.

54
00:03:12.037 --> 00:03:16.002
All we're gonna do is create another
object with some properties in it,

55
00:03:16.002 --> 00:03:19.002
it's not that fancy, but
it is gonna get the job done.

56
00:03:19.002 --> 00:03:22.451
All right, so first thing I wanna do is,
in addition to this element,

57
00:03:22.451 --> 00:03:25.726
so I'm gonna create a variable
here that I'm gonna call symbols,

58
00:03:25.726 --> 00:03:29.607
that's gonna be my index, it's gonna
be an object, it's gonna be my index.

59
00:03:29.607 --> 00:03:34.529
So I'll go ahead and
initialize it to an empty object.

60
00:03:34.529 --> 00:03:37.137
And this is the right
place to do that work,

61
00:03:37.137 --> 00:03:42.002
I'm not gonna lazily discover these
indexes, I'm gonna upfront do the work.

62
00:03:42.002 --> 00:03:47.022
Technically, you could lazily discover and
build the index as you go, but we're just

63
00:03:47.022 --> 00:03:52.212
gonna build it all up front, especially
since it's only 118 elements, no big deal.

64
00:03:52.212 --> 00:03:53.639
So what am I gonna do?

65
00:03:53.639 --> 00:03:57.651
After I got that array,
I'm gonna go through the elements.

66
00:04:01.253 --> 00:04:02.900
I do a for of them.

67
00:04:02.900 --> 00:04:05.875
I occasionally get questions,
why don't you use for each or

68
00:04:05.875 --> 00:04:08.640
why aren't you getting maps and
reduces here?

69
00:04:08.640 --> 00:04:12.290
I'm not doing any maps and reduces cuz
this is not the functional programming

70
00:04:12.290 --> 00:04:15.450
course and that would be more mental
context for me to throw at you.

71
00:04:15.450 --> 00:04:18.908
Hey, now you got to go learn what
a MapReduce is, map or reduce or

72
00:04:18.908 --> 00:04:19.943
filter whatever.

73
00:04:19.943 --> 00:04:23.165
I don't used those unless I'm
doing functional programming, so

74
00:04:23.165 --> 00:04:24.438
that's the answer that.

75
00:04:24.438 --> 00:04:28.362
I use forEach because that's not,
it's neither good imperative coding nor

76
00:04:28.362 --> 00:04:30.001
is it functional programming.

77
00:04:30.001 --> 00:04:32.791
It's just the bastard child,
so I don't use forEach.

78
00:04:32.791 --> 00:04:37.912
I'm gonna use For
Loop 9,000 times out of 10.

79
00:04:37.912 --> 00:04:41.243
All right, so I got my for of loop here,
let me zoom back in because I had

80
00:04:41.243 --> 00:04:43.805
zoomed out a little bit,
it's a little hard to read.

81
00:04:43.805 --> 00:04:45.210
We got our for of loop here.

82
00:04:45.210 --> 00:04:48.803
This is about as straightforward
as you could probably make it.

83
00:04:48.803 --> 00:04:51.517
Remember we have symbols,
which is an object.

84
00:04:51.517 --> 00:04:54.851
And we're just gonna store
properties in this symbol and

85
00:04:54.851 --> 00:04:57.639
what property name do you
think we ought to use?

86
00:04:57.639 --> 00:05:01.070
Anybody think what property?

87
00:05:01.070 --> 00:05:02.420
Well, let me show you
what we're gonna assign.

88
00:05:02.420 --> 00:05:03.430
We're gonna assign the element.

89
00:05:04.470 --> 00:05:09.620
So what are we gonna put here for
the property name in the symbols object?

90
00:05:09.620 --> 00:05:10.346
Anybody got an idea?

91
00:05:13.542 --> 00:05:14.803
What's our task at hand?

92
00:05:14.803 --> 00:05:16.234
What are we trying to do?

93
00:05:23.077 --> 00:05:25.235
What is the LOOKUP function trying to do?

94
00:05:29.789 --> 00:05:30.643
Yes.

95
00:05:30.643 --> 00:05:33.590
&gt;&gt; I've got a couple of
different answers here.

96
00:05:33.590 --> 00:05:39.024
&gt;&gt; Okay.
&gt;&gt; Symbol, element dot symbol, number.

97
00:05:39.024 --> 00:05:42.961
&gt;&gt; Could use number but those are not
probably the best keys for us to use,

98
00:05:42.961 --> 00:05:44.310
and I'll explain why.

99
00:05:45.760 --> 00:05:46.290
Any others?

100
00:05:47.900 --> 00:05:49.440
&gt;&gt; Lots of people saying symbol.

101
00:05:49.440 --> 00:05:52.726
&gt;&gt; Okay, we are gonna wanna use the symbol
as the key but I just wanna make sure

102
00:05:52.726 --> 00:05:56.920
everybody understands why, because that's
what the LOOKUP function is doing.

103
00:05:56.920 --> 00:06:00.690
The LOOKUP function is mapping
from a symbol to an element.

104
00:06:01.760 --> 00:06:06.948
So we're gonna create an index that
maps from the symbol, the string,

105
00:06:06.948 --> 00:06:13.060
the lowercase one or two characters
which is unique to the element entry.

106
00:06:13.060 --> 00:06:14.620
So that's what we're gonna do up here.

107
00:06:14.620 --> 00:06:19.277
We're gonna say symbols of,
and the property name that

108
00:06:19.277 --> 00:06:23.848
we're gonna use is
element.symbol.toLowerCase.

109
00:06:28.048 --> 00:06:32.110
So, at the end of that, if we were to
log out that object, we're gonna have

110
00:06:32.110 --> 00:06:36.693
an object with a whole bunch of properties
in it, 118 properties to be specific,

111
00:06:36.693 --> 00:06:39.876
and each one of those is a string
property that has a value.

112
00:06:39.876 --> 00:06:43.309
That is not a copy of the element entry,
it is simply a link,

113
00:06:43.309 --> 00:06:46.470
a reference into our main data structure,
our array,

114
00:06:46.470 --> 00:06:49.721
it's pointing at each one of
the entries in that array.

115
00:06:49.721 --> 00:06:55.295
And now with this,
separate data structure I'll call it,

116
00:06:55.295 --> 00:07:01.326
with this index having been created,
this code gets real easy.

117
00:07:03.700 --> 00:07:08.015
Return symbols [LAUGH] of elementSymbol.

118
00:07:14.664 --> 00:07:18.510
You see why this is better,
because we did all of that looping.

119
00:07:18.510 --> 00:07:24.420
We did 118 iterations loop once up
front and remembered some information,

120
00:07:24.420 --> 00:07:29.359
instead of re-looping for
every time we needed to do the lookup.

121
00:07:36.655 --> 00:07:39.521
A little hard to show both those
snippets on the same screen, but

122
00:07:39.521 --> 00:07:41.690
this is the important stuff.

123
00:07:41.690 --> 00:07:44.870
We're doing that loop here,
this is effectively building an index.

124
00:07:46.420 --> 00:07:48.505
I'm using some air quotes here,

125
00:07:48.505 --> 00:07:52.608
that's not quite as sophisticated
as a database index might be.

126
00:07:52.608 --> 00:07:57.817
But we're basically doing a helper
data structure that's gonna allow

127
00:07:57.817 --> 00:08:04.190
us to index into the main data structure
in what we call an O of one operation.

128
00:08:04.190 --> 00:08:06.717
That's a fancy way of saying
it's a single operation,

129
00:08:06.717 --> 00:08:10.450
there's no built-in complexity in it,
at least at our level of understanding.

130
00:08:12.330 --> 00:08:15.371
And our layer of abstraction
being JavaScript,

131
00:08:15.371 --> 00:08:17.828
a property axis is a single operation.

132
00:08:19.642 --> 00:08:24.373
Between JavaScript and C, or whatever
language layer you wanna think of that

133
00:08:24.373 --> 00:08:27.430
the JavaScript engine is implemented in,
Rost or

134
00:08:27.430 --> 00:08:29.929
whatever they build them in these days.

135
00:08:31.410 --> 00:08:36.055
It may not be a single operation cuz they
may not be using a perfect HashMap as

136
00:08:36.055 --> 00:08:37.990
the backing for their object.

137
00:08:39.520 --> 00:08:42.686
So there's an assumption here that
we're making that only holds for

138
00:08:42.686 --> 00:08:46.540
our layer of abstraction,
which is the JavaScript language.

139
00:08:46.540 --> 00:08:50.617
And that assumption is that when
I do symbols of element symbol,

140
00:08:50.617 --> 00:08:55.912
that's a single operation, a single unit
of operation, that's my unit of cost.

141
00:09:03.264 --> 00:09:07.516
When I say O of one for
something like that, big O notation,

142
00:09:07.516 --> 00:09:11.690
which we'll come back to
a bit later in the workshop.

143
00:09:11.690 --> 00:09:17.107
But big O notation is a way that computer
scientists talk about the complexity

144
00:09:17.107 --> 00:09:21.858
both the time processing complexity and
the memory complexity that

145
00:09:21.858 --> 00:09:27.380
a particular algorithm takes, in best
case, average case, and worst case.

146
00:09:28.450 --> 00:09:33.316
It's a way of describing what's the worst
possible outcome if this algorithm

147
00:09:33.316 --> 00:09:35.538
was given the worst possible data.

148
00:09:35.538 --> 00:09:39.598
What's its worst possible performance,
that's what we call this big O.

149
00:09:39.598 --> 00:09:44.108
O of 1 is what we call
constant time because it's

150
00:09:44.108 --> 00:09:47.410
a single operation, single unit.

151
00:09:49.280 --> 00:09:51.933
We'll talk about all the other
ones that are above it, but

152
00:09:51.933 --> 00:09:55.454
it doesn't get any better than constant
time other than no operation at all,

153
00:09:55.454 --> 00:09:58.350
which I guess the best operation
is when you don't perform.

154
00:09:58.350 --> 00:10:02.158
But if you got to perform an operation,
the best performance is O of 1.

155
00:10:04.890 --> 00:10:05.652
Yes.

156
00:10:05.652 --> 00:10:08.854
&gt;&gt; So
we just turned this from O of n to O of 1?

157
00:10:08.854 --> 00:10:10.085
&gt;&gt; Yeah, exactly.

158
00:10:10.085 --> 00:10:13.463
So actually,
it was a little bit worse than O of n,

159
00:10:13.463 --> 00:10:18.550
because we're doing O of n for
each letter, or for each symbol, I guess.

160
00:10:18.550 --> 00:10:21.510
So it was really kind
of like O of n times m,

161
00:10:21.510 --> 00:10:25.078
m being the number of
symbols in our return value.

162
00:10:25.078 --> 00:10:29.954
And we went from whatever n times m was,
which wasn't big, but

163
00:10:29.954 --> 00:10:31.895
whatever it was, to 1.

164
00:10:31.895 --> 00:10:33.505
So that's good.

