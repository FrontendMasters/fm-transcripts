WEBVTT

1
00:00:00.130 --> 00:00:04.390
To use this library, you need to
construct an instance of the pool.

2
00:00:04.390 --> 00:00:07.850
So you're allowed to have as
many pool instances as you want.

3
00:00:07.850 --> 00:00:12.430
You would want one pool instance for
each type of value that you were pooling.

4
00:00:12.430 --> 00:00:14.820
In other words, don't put arrays and
objects in the same pool.

5
00:00:14.820 --> 00:00:18.416
If you're doing array pooling,
have one pool for the arrays, if you're

6
00:00:18.416 --> 00:00:22.434
doing object pooling, have another one,
if you're doing class instance pool.

7
00:00:22.434 --> 00:00:25.220
They should all be identical is the point.

8
00:00:25.220 --> 00:00:28.220
That's one of the concepts of
this sort of data structure.

9
00:00:28.220 --> 00:00:29.994
So we'll create ourselves an array pool.

10
00:00:33.870 --> 00:00:35.900
It's the create function.

11
00:00:35.900 --> 00:00:40.818
And what you pass to it is a function that
constructs instances of the value that

12
00:00:40.818 --> 00:00:42.310
you care about.

13
00:00:42.310 --> 00:00:45.260
So in our case, we just need
something that creates empty arrays.

14
00:00:45.260 --> 00:00:48.150
I'll pass it an error function
that creates an empty array.

15
00:00:50.300 --> 00:00:53.845
DeePool will automatically invoke
that function anytime it needs to

16
00:00:53.845 --> 00:00:58.040
make new instances of your value,
anytime it needs to grow itself.

17
00:00:58.040 --> 00:00:59.760
So that can be as complex as you want.

18
00:00:59.760 --> 00:01:03.719
That could be like constructing a class
instance or calling out your data.

19
00:01:03.719 --> 00:01:07.180
Whatever you need it to
be goes in that function.

20
00:01:07.180 --> 00:01:11.066
Ideally, usually, it's just returning
an empty array or an empty object, but

21
00:01:11.066 --> 00:01:12.450
can be more sophisticated.

22
00:01:15.120 --> 00:01:18.841
You can start using that pool just as is,
and

23
00:01:18.841 --> 00:01:23.990
it defaults because
the documentation discloses this.

24
00:01:23.990 --> 00:01:27.380
It defaults to starting out
with five entries in your pool.

25
00:01:27.380 --> 00:01:30.542
It lazily does that, when you ask for
the first one it goes ahead and

26
00:01:30.542 --> 00:01:33.980
creates a pool of five, and
then it doubles from there.

27
00:01:33.980 --> 00:01:38.480
That five doubling might be good for
many of your small usages.

28
00:01:38.480 --> 00:01:43.350
In this particular case, I've already
done some pre-work on this exercise,

29
00:01:43.350 --> 00:01:45.602
which is that I first went through and

30
00:01:45.602 --> 00:01:49.600
benchmarked how many arrays was I
creating and throwing away in my

31
00:01:49.600 --> 00:01:53.981
average case when I was typing in,
say, a 10 or 11 character word?

32
00:01:53.981 --> 00:01:57.687
And it turns out that number was in
the multi thousands of arrays that

33
00:01:57.687 --> 00:02:01.330
I was creating and throwing away
as it recursively went through and

34
00:02:01.330 --> 00:02:05.250
made all of its matches of several
hundred words to return to me, okay?

35
00:02:05.250 --> 00:02:09.667
So several thousand arrays
are what is being created, and

36
00:02:09.667 --> 00:02:15.708
then I went through and using some console
logging and some counters and stuff,

37
00:02:15.708 --> 00:02:20.958
tried to get an approximation for
how many do I need at any given time.

38
00:02:20.958 --> 00:02:26.515
What's the most that I'm ever
using concurrently when we're 8,

39
00:02:26.515 --> 00:02:29.740
10, 12 levels deep of recursion?

40
00:02:29.740 --> 00:02:35.580
And that number was around,
it was somewhere between 20 and 25.

41
00:02:35.580 --> 00:02:40.020
So I set it at 25 and then I fine-tuned
it a little lower and a little higher.

42
00:02:40.020 --> 00:02:45.382
And I arrived at, for my testing, that
if I picked 23 as the size of the pool,

43
00:02:45.382 --> 00:02:48.340
that the pool never needed to grow.

44
00:02:48.340 --> 00:02:52.020
But I didn't end up with any
unused items in my pool.

45
00:02:52.020 --> 00:02:56.111
Now, your mileage may vary if you're
trying out different dictionary lengths or

46
00:02:56.111 --> 00:02:58.440
trying out different lengths of input.

47
00:02:58.440 --> 00:03:01.910
You might end up needing 25 or 24.

48
00:03:01.910 --> 00:03:06.697
But we're just gonna go ahead and
pre-grow our pool to size

49
00:03:06.697 --> 00:03:11.579
23 since I already did some
of that pre fine-tuning work,

50
00:03:11.579 --> 00:03:16.190
and I think that's a pretty
close number for most cases.

51
00:03:19.290 --> 00:03:21.690
So how do we use this pool?

52
00:03:21.690 --> 00:03:24.640
That's where the real big game is.

53
00:03:24.640 --> 00:03:28.919
The first thing that we're gonna do
is we are still gonna have that same

54
00:03:28.919 --> 00:03:32.474
function here, but
I'm gonna make another function that

55
00:03:32.474 --> 00:03:35.757
will be the findWords function
that takes our input.

56
00:03:35.757 --> 00:03:39.558
And then we're gonna rename
this function to findAllWords,

57
00:03:39.558 --> 00:03:43.881
just cuz I'm uncreative and
I can't come up with another name for it.

58
00:03:43.881 --> 00:03:47.934
I will explain in a little bit
why we need two functions, but

59
00:03:47.934 --> 00:03:53.054
it's because I need to do a little bit
of cleanup work after the final call.

60
00:03:53.054 --> 00:03:57.903
All right, so in the findWords function,
I'm going to,

61
00:04:01.534 --> 00:04:05.930
Call my findAllWords with my input.

62
00:04:07.520 --> 00:04:09.920
Actually, I should have
probably left this as the same.

63
00:04:11.360 --> 00:04:12.430
We could leave this or not.

64
00:04:12.430 --> 00:04:13.500
You don't technically.

65
00:04:15.340 --> 00:04:18.724
Whether you use this or
not, it would be fine, but

66
00:04:18.724 --> 00:04:22.926
we'll leave it there since that's
what I did in the Git repo.

67
00:04:22.926 --> 00:04:28.026
Okay, so findAllWords is our sub function,
the one that doesn't get called publicly,

68
00:04:28.026 --> 00:04:31.570
and it's the one that's gonna
do all of its recursion for us.

69
00:04:33.090 --> 00:04:36.095
We're gonna go ahead and
call that and you might think, well,

70
00:04:36.095 --> 00:04:38.490
all we need to do is
just return all words.

71
00:04:38.490 --> 00:04:40.680
Why do we even create
this adaptor function?

72
00:04:40.680 --> 00:04:46.324
Well, before we get into the internals
of what findAllWords is gonna do,

73
00:04:46.324 --> 00:04:49.145
it is going to return us an array, and

74
00:04:49.145 --> 00:04:54.080
the array that it returns us will
have come from the object pool.

75
00:04:55.330 --> 00:04:58.060
And we don't wanna lose that object.

76
00:04:58.060 --> 00:05:00.630
We want to reset and recycle that object.

77
00:05:02.140 --> 00:05:06.776
So we wanna pass out to the calling
code a new array that's not part of our

78
00:05:06.776 --> 00:05:11.490
pool that the calling code can
do whatever it wants with.

79
00:05:11.490 --> 00:05:14.839
But we are internally managing
our set of pooled arrays, and

80
00:05:14.839 --> 00:05:16.750
we don't wanna lose one of those.

81
00:05:16.750 --> 00:05:19.375
We need to keep all of them and
reset all of them and

82
00:05:19.375 --> 00:05:22.570
make sure the pool gets
back to its initial state.

83
00:05:22.570 --> 00:05:28.259
So we are going to use something that has
become much less common to see these days,

84
00:05:28.259 --> 00:05:33.216
but we're gonna use a version of
the try construct called try finally.

85
00:05:33.216 --> 00:05:37.243
I don't know if anybody out there
has used the finally block before,

86
00:05:37.243 --> 00:05:39.055
you don't see that too often.

87
00:05:39.055 --> 00:05:41.022
But what the purpose of the finally block,

88
00:05:41.022 --> 00:05:43.460
notice I don't even need
a catch clause here.

89
00:05:43.460 --> 00:05:48.123
If I put a finally block,
it will happen every time no matter what,

90
00:05:48.123 --> 00:05:50.390
even if an exception occurred.

91
00:05:51.520 --> 00:05:54.208
So the purpose of finally
blocks is to do cleanup,

92
00:05:54.208 --> 00:05:57.060
which is exactly what we're doing here.

93
00:05:57.060 --> 00:05:58.387
We are cleaning up our memory.

94
00:05:58.387 --> 00:06:03.782
This is exactly what try finally
exists for, is this kind of work.

95
00:06:03.782 --> 00:06:08.388
So we need to take the allWords and

96
00:06:08.388 --> 00:06:13.981
set its length = 0, that's resetting

97
00:06:13.981 --> 00:06:19.150
the array back to an empty array.

98
00:06:19.150 --> 00:06:24.790
And we need to do pool.recycle and
recycle all the words.

99
00:06:26.510 --> 00:06:28.270
Recycle that back into our pool.

100
00:06:32.060 --> 00:06:32.981
That's our cleanup.

101
00:06:36.153 --> 00:06:38.690
Does anybody spot
the problem with this code?

102
00:06:38.690 --> 00:06:41.811
Before we even look at how
findAllWords does what it does,

103
00:06:41.811 --> 00:06:44.980
does anybody spot the problem with this?

104
00:06:44.980 --> 00:06:45.730
Somebody in the chat?

105
00:06:47.190 --> 00:06:48.990
&gt;&gt; We are not taking
the words from the pool.

106
00:06:50.790 --> 00:06:53.032
&gt;&gt; We are gonna do that inside
of this findAllWords function.

107
00:06:53.032 --> 00:06:56.314
Like I said, we're assuming that this
thing is gonna return us an array that

108
00:06:56.314 --> 00:06:58.900
came from the pool,
which is why we need to recycle it back.

109
00:07:01.530 --> 00:07:04.390
&gt;&gt; You are returning and
the function exits.

110
00:07:06.130 --> 00:07:09.173
&gt;&gt; We are returning and
the function exits, but

111
00:07:09.173 --> 00:07:13.268
it always guarantees to do
the finally block after it exits.

112
00:07:13.268 --> 00:07:15.100
&gt;&gt; AllWords is not a new array.

113
00:07:16.150 --> 00:07:17.290
&gt;&gt; There you go.

114
00:07:17.290 --> 00:07:22.900
We are returning allWords, and
then immediately emptying out allWords.

115
00:07:22.900 --> 00:07:24.519
So the calling code is gonna be like,
what?

116
00:07:24.519 --> 00:07:26.250
You gave me an empty array.

117
00:07:26.250 --> 00:07:32.430
We need to return a copy of allWords, and
then clean out the allWords in recycler.

118
00:07:34.480 --> 00:07:37.948
Little nuances that when you start doing
stuff like working with an object pool,

119
00:07:37.948 --> 00:07:40.750
you gotta pay attention to
very little nuances like this.

120
00:07:40.750 --> 00:07:42.351
It's easy to get tripped up.

121
00:07:48.293 --> 00:07:53.244
Okay, this next set of work that we're
going to do, we're going to wire

122
00:07:53.244 --> 00:07:57.804
up the findAllWords function in as
many places as we possibly can.

123
00:07:57.804 --> 00:08:02.232
When it goes to create a new array,
instead of creating a new array,

124
00:08:02.232 --> 00:08:04.641
we wanna get an array from the pool and

125
00:08:04.641 --> 00:08:10.670
add values into that array rather than
constructing a new array, that's the task.

126
00:08:10.670 --> 00:08:14.582
And whenever we're done with an array,
we want to reset the array and

127
00:08:14.582 --> 00:08:17.040
recycle it back into the pool.

128
00:08:17.040 --> 00:08:20.500
So that's what I meant by saying
it's a little bit intrusive here, so

129
00:08:20.500 --> 00:08:25.180
it makes the code a little bit uglier,
but it's not too bad, I don't think.

130
00:08:25.180 --> 00:08:29.190
We just need to look for places like
this where we construct the new array.

131
00:08:29.190 --> 00:08:33.436
And so
instead of constructing this new array,

132
00:08:33.436 --> 00:08:37.690
we are going to check
an array out from the pool.

133
00:08:40.080 --> 00:08:46.031
So we will, instead of saying that,
we will say pool.use,

134
00:08:46.031 --> 00:08:50.479
that gets us another
instance from our pool.

135
00:08:56.040 --> 00:08:58.480
Let's look for
other places that we create arrays.

136
00:08:58.480 --> 00:09:00.020
Here's a place that we create an array.

137
00:09:00.020 --> 00:09:02.547
When we're creating remaining letters,
we create an array.

138
00:09:02.547 --> 00:09:10.242
So let's do, Pool.use,

139
00:09:10.242 --> 00:09:14.584
and instead of being able to
kind of nicely declare this,

140
00:09:14.584 --> 00:09:20.379
we're gonna actually have to push into
the array that we got out of the pool.

141
00:09:20.379 --> 00:09:27.521
So it's slightly less ergonomic,
but we'll push in, These values.

142
00:09:30.092 --> 00:09:31.139
We'll still spread them out.

143
00:09:33.559 --> 00:09:38.059
One note is that the slice method here
built in to JavaScript is in fact

144
00:09:38.059 --> 00:09:43.897
returning arrays, and we can't do anything
about that cuz that's a built-in method.

145
00:09:43.897 --> 00:09:47.600
So this is an example of an array that
we just have to get the array and

146
00:09:47.600 --> 00:09:49.730
it just has to get garbage collected.

147
00:09:49.730 --> 00:09:52.416
This is not a perfect solution, but in so

148
00:09:52.416 --> 00:09:57.160
far as any arrays that we can control,
we wanna use those from the pool.

149
00:09:59.070 --> 00:10:02.892
And any of the other ones that we don't
have control over, we just shrug and

150
00:10:02.892 --> 00:10:05.027
say it's just part of using JavaScript.

151
00:10:05.027 --> 00:10:07.293
So we can't do anything
about those slices,

152
00:10:07.293 --> 00:10:11.361
but we did take care of the array that we
had been creating for remaining letters.

153
00:10:14.824 --> 00:10:21.620
Now we wanna take the array that
is coming back from findWords.

154
00:10:21.620 --> 00:10:26.292
We know that findWords, I'm sorry, this
is gonna be findAllWords, I mess this up

155
00:10:26.292 --> 00:10:30.965
every time I do this workshop, we have
renamed that, that's our recursive call,

156
00:10:30.965 --> 00:10:35.100
findAllWords, but
we need to take that function and call it.

157
00:10:35.100 --> 00:10:40.630
And we know that that thing
returns us a pooled array, right?

158
00:10:41.980 --> 00:10:47.240
Because look, that thing is gonna be this,
and that's a pooled array.

159
00:10:47.240 --> 00:10:51.240
We know findAllWords is giving us a pooled
array, just like we know it up here.

160
00:10:51.240 --> 00:10:52.720
It's a pooled array.

161
00:10:52.720 --> 00:10:56.560
So we need to get that array.

162
00:10:56.560 --> 00:10:58.248
So I'll call moreWords.

163
00:11:05.793 --> 00:11:07.910
We need to get that array.

164
00:11:07.910 --> 00:11:13.680
We need to push those values into
our existing levels words array.

165
00:11:13.680 --> 00:11:17.685
So we need to say
words.push(...moreWords).

166
00:11:20.890 --> 00:11:25.388
And now we have this moreWords array,
which is a pooled array.

167
00:11:25.388 --> 00:11:26.807
What do we do when we're
done with an array?

168
00:11:29.624 --> 00:11:31.052
We reset it.

169
00:11:33.426 --> 00:11:37.408
Which for JavaScript arrays is as
easy as setting its length = 0.

170
00:11:37.408 --> 00:11:40.655
And then what's the last thing that we do?

171
00:11:40.655 --> 00:11:41.291
Recycle.

172
00:11:53.352 --> 00:11:59.186
In fact, we are also done with remaining
letters because we've made this call.

173
00:11:59.186 --> 00:12:07.207
So we can also set remainingLetters,
.length = 0.

174
00:12:07.207 --> 00:12:10.917
And we can also recycle remaining letters.

175
00:12:19.683 --> 00:12:23.142
We pulled two different
arrays out of the pool, and

176
00:12:23.142 --> 00:12:27.010
now we're resetting both of them and
putting them back.

177
00:12:28.170 --> 00:12:31.837
The discipline here is any time you
take something out of the pool,

178
00:12:31.837 --> 00:12:36.520
make sure you know where you're done
with it, and reset it and recycle it.

179
00:12:36.520 --> 00:12:40.513
Otherwise, you've completely shot yourself
in the foot because the pools are gonna

180
00:12:40.513 --> 00:12:43.688
grow infinitely and you're not
gonna get that reuse that you want.

181
00:12:49.022 --> 00:12:54.992
One last little nuance that we have
to handle is this code down here,

182
00:12:54.992 --> 00:12:57.830
which is calling our uniquing.

183
00:12:59.350 --> 00:13:04.020
You see that we're creating an array here,
and we don't wanna do that with an array.

184
00:13:04.020 --> 00:13:11.100
So what we're gonna do is say
wordsSet is a new set with the words.

185
00:13:12.150 --> 00:13:15.731
That's a new set instance, and
because we're only doing this once,

186
00:13:15.731 --> 00:13:18.110
we don't really need to
worry about pooling.

187
00:13:18.110 --> 00:13:20.320
We're only doing this on that last call,
if you will, so

188
00:13:20.320 --> 00:13:22.710
we don't really need to
worry about pooling.

189
00:13:22.710 --> 00:13:26.361
But you could also do
a pool of set instances or

190
00:13:26.361 --> 00:13:29.920
a pool of map instances or whatever.

191
00:13:29.920 --> 00:13:31.770
Here there's only one, so
it's not that big a deal.

192
00:13:33.300 --> 00:13:38.300
I've constructed the set, so I've now
copied the words over into a unique set.

193
00:13:38.300 --> 00:13:40.570
And so now I can do my resetting.

194
00:13:40.570 --> 00:13:46.860
I can say words.length = 0,
cuz I no longer need that array.

195
00:13:48.110 --> 00:13:50.220
And I can,

196
00:13:55.330 --> 00:14:03.897
Then push into words,
What comes out of wordsSet.

197
00:14:03.897 --> 00:14:06.188
So we'll dot dot dot of wordsSet.

198
00:14:08.604 --> 00:14:13.044
So I reset it to 0 because I don't
wanna reconstruct an instance of it.

199
00:14:13.044 --> 00:14:15.400
I'm reusing the same pooled instance.

200
00:14:15.400 --> 00:14:19.059
I set it's length to 0,
pulled it back out of the set, and

201
00:14:19.059 --> 00:14:22.136
that's now what I'm going
to end up returning.

202
00:14:28.840 --> 00:14:34.708
So if you follow through the logic here,
we have a pool.use and

203
00:14:34.708 --> 00:14:40.705
a pool.use, and we have a pool.recycle and
a pool.recycle.

204
00:14:44.165 --> 00:14:44.770
Yes?

205
00:14:44.770 --> 00:14:50.415
&gt;&gt; Why doesn't recycling method
make an array empty itself?

206
00:14:50.415 --> 00:14:52.960
&gt;&gt; Why do you have to
do your own resetting?

207
00:14:52.960 --> 00:14:54.830
That's basically the question.

208
00:14:54.830 --> 00:14:57.160
Because the pool is generalized.

209
00:14:57.160 --> 00:14:59.580
It says I can handle any kinds of values.

210
00:14:59.580 --> 00:15:04.710
You might be handing me instances of some
complex custom class that you've defined.

211
00:15:04.710 --> 00:15:08.720
It has no way of knowing
how to reset a value.

212
00:15:08.720 --> 00:15:11.271
It technically could have
done some special casing and

213
00:15:11.271 --> 00:15:15.050
said, I know how to reset arrays and
I know how to reset objects or whatever.

214
00:15:15.050 --> 00:15:17.908
But because it doesn't do any frills and

215
00:15:17.908 --> 00:15:22.532
doesn't have any performance
overheads that it doesn't need,

216
00:15:22.532 --> 00:15:27.419
it's your job to do the resetting
before you pass it back to recycle.

217
00:15:27.419 --> 00:15:28.458
Another question?

218
00:15:28.458 --> 00:15:32.772
&gt;&gt; If we do this recycling manually,
does the JS recycling engine check all

219
00:15:32.772 --> 00:15:37.030
these steps again after the function
gets removed from the stack call?

220
00:15:39.330 --> 00:15:44.266
&gt;&gt; The way that you should think about
this is that we are not actually

221
00:15:44.266 --> 00:15:48.863
growing the JavaScript memory
stack very much as we go down.

222
00:15:48.863 --> 00:15:53.440
That's by design, what we're trying
to do is not grow the stack.

223
00:15:53.440 --> 00:15:58.564
We grew the stack by all the arrays
that we needed when we did pool.use23.

224
00:15:59.600 --> 00:16:04.113
So as we walk our way down into
all of these recursive levels,

225
00:16:04.113 --> 00:16:08.627
we are in fact having JavaScript
construct new function call

226
00:16:08.627 --> 00:16:13.671
frames on the call stack, and
there is a little bit of value creation

227
00:16:13.671 --> 00:16:18.563
on the stack because of
the input.slice that we don't control.

228
00:16:18.563 --> 00:16:23.133
And so some of that is getting cleaned up
as it goes back after the call stack frame

229
00:16:23.133 --> 00:16:25.757
goes away, that has to get cleaned up.

230
00:16:25.757 --> 00:16:29.763
But the big thing that we're focused on
here is that all of these thousands of

231
00:16:29.763 --> 00:16:33.833
intermediary arrays that we were creating
before in the previous solution,

232
00:16:33.833 --> 00:16:35.837
were no longer creating thousands and

233
00:16:35.837 --> 00:16:40.167
thousands of arrays that JavaScript
needs to garbage collect.

234
00:16:40.167 --> 00:16:44.759
We pre-created the 23 that we knew that
we would need, we checked them out,

235
00:16:44.759 --> 00:16:47.419
used them, reset them, and recycled them.

236
00:16:49.168 --> 00:16:53.036
So I guess the real answer to
the question being posed is,

237
00:16:53.036 --> 00:16:57.633
JavaScript is still needing to do
its own memory cleanup, and yes,

238
00:16:57.633 --> 00:17:01.680
there might be some garbage
collection that happens.

239
00:17:01.680 --> 00:17:06.926
We have significantly reduced
the pressure on the garbage collector

240
00:17:06.926 --> 00:17:12.460
by simply putting out thousands fewer
bags of trash down at the curb.

241
00:17:12.460 --> 00:17:16.715
&gt;&gt; How many arrays did you manage to get
rid of using the object pool in this

242
00:17:16.715 --> 00:17:18.740
particular case?

243
00:17:18.740 --> 00:17:21.803
&gt;&gt; Based on my estimate,
I went from, in my testing,

244
00:17:21.803 --> 00:17:25.940
from using several thousand arrays,
to using 23 arrays.

245
00:17:25.940 --> 00:17:30.935
All right, we didn't change any of
the functionality of the code, and

246
00:17:30.935 --> 00:17:34.690
we haven't really impacted
any of the performance.

247
00:17:34.690 --> 00:17:39.492
We could rerun it to show that,
as long as I didn't make a mistake here,

248
00:17:39.492 --> 00:17:44.377
it should still work, and
we should still be getting roughly, uh-oh,

249
00:17:44.377 --> 00:17:46.477
do we have a JavaScript error?

250
00:17:49.804 --> 00:17:54.564
I know what happens, I didn't pull
over the deePool implementation, so

251
00:17:54.564 --> 00:17:56.734
I can't actually run this code.

252
00:17:56.734 --> 00:17:59.012
Just to save the time though, the timings,

253
00:17:59.012 --> 00:18:02.646
you can run it yourself, the timings
are gonna be roughly the same, so

254
00:18:02.646 --> 00:18:06.380
we're not really paying hardly
any performance penalty for this.

255
00:18:06.380 --> 00:18:09.410
We're just simply reducing
the memory pressure on it.

256
00:18:09.410 --> 00:18:11.350
It's just a technique to have in your bag.

257
00:18:11.350 --> 00:18:15.070
Do I use object pools all the time?

258
00:18:15.070 --> 00:18:19.088
No, but I would say maybe 1
out of 100 cases where I'm

259
00:18:19.088 --> 00:18:22.525
implementing an application like this.

260
00:18:22.525 --> 00:18:26.137
I see a place where the algorithm
that I've designed or

261
00:18:26.137 --> 00:18:29.908
that I'm using is particularly
wasteful in creating and

262
00:18:29.908 --> 00:18:35.065
throwing away lots of intermediary
instances of an array or an object.

263
00:18:35.065 --> 00:18:39.810
And then my brain kicks in and I'm like, I
should probably use object pooling, okay?

264
00:18:39.810 --> 00:18:44.718
Another example of places where people
have used object pools, somebody took my

265
00:18:44.718 --> 00:18:49.117
library and used it in, at least for
a while, in one of the semi-popular

266
00:18:49.117 --> 00:18:53.182
libraries that was, I think it was
Redux or something like Redux.

267
00:18:53.182 --> 00:18:56.887
Because they were creating all these
objects for the state dispatches,

268
00:18:56.887 --> 00:19:01.151
and they were creating and throwing away
thousands and millions of these objects.

269
00:19:01.151 --> 00:19:06.065
And then they ended up using deePool
as a way to manage those objects.

270
00:19:06.065 --> 00:19:08.824
And I don't know whether they're still
using it, I think they're probably not.

271
00:19:08.824 --> 00:19:11.350
But for a while, it was being
used by one of those libraries.

272
00:19:11.350 --> 00:19:15.315
So that's just an example in a place
where you're creating and throwing away

273
00:19:15.315 --> 00:19:19.770
a lot of those intermediate data structure
instances, object pooling can be useful.

