WEBVTT

1
00:00:00.000 --> 00:00:02.147
All right, now,
let's go back to my mistake.

2
00:00:02.147 --> 00:00:03.826
Everybody likes to talk about mistakes,
right?

3
00:00:03.826 --> 00:00:05.293
Let's go back to my mistake.

4
00:00:05.293 --> 00:00:10.823
You'll notice, if you do a comparison to
what I've got typed out here right now and

5
00:00:10.823 --> 00:00:15.098
what is actually in the repository,
it is slightly different.

6
00:00:15.098 --> 00:00:19.190
Because what I have typed out in
the repository is that I went ahead and

7
00:00:19.190 --> 00:00:21.601
did my array concatenation right here.

8
00:00:27.761 --> 00:00:33.792
Oops, I did it ahead
of time in which case,

9
00:00:35.671 --> 00:00:39.656
We do want to compare this to charlesLeft.

10
00:00:43.227 --> 00:00:46.201
And we do want to return only result.

11
00:00:48.995 --> 00:00:53.804
Those are functionally equivalent
pieces of code just doing one operation

12
00:00:53.804 --> 00:00:58.316
before doing it after, but
functionally equivalent pieces of code.

13
00:00:58.316 --> 00:01:02.943
When I got tripped up in my copy, paste
preparing the repository is that I did

14
00:01:02.943 --> 00:01:06.792
that for the one-block but
I didn't do it for the two-block.

15
00:01:06.792 --> 00:01:11.352
So to make things consistent for
what you're gonna see,

16
00:01:11.352 --> 00:01:16.583
let's make sure that we do this
same approach up here, which is,

17
00:01:19.465 --> 00:01:25.599
Type a two in there,
spread out the spell word into an array.

18
00:01:25.599 --> 00:01:32.108
We wanna check this against charsLeft,
and then we want to return result.

19
00:01:38.847 --> 00:01:41.242
So those blocks should
now mirror each other.

20
00:01:41.242 --> 00:01:45.774
This block will slightly differ from what
you currently see in the repository.

21
00:01:45.774 --> 00:01:48.067
Maybe by the time you're
watching this video,

22
00:01:48.067 --> 00:01:50.257
I'll have already patched the repository.

23
00:01:50.257 --> 00:01:50.858
But anyway,

24
00:01:50.858 --> 00:01:54.418
those two blocks should look the same
because they're doing the same thing.

25
00:01:54.418 --> 00:01:56.218
It's just that we're doing it with two and

26
00:01:56.218 --> 00:01:58.325
then we're doing it with
one letter candidates.

27
00:02:01.297 --> 00:02:01.972
Yes?

28
00:02:01.972 --> 00:02:07.612
&gt;&gt; Could you use two sets,
like one letter candidates and

29
00:02:07.612 --> 00:02:12.522
two letter candidates
in spellwork function?

30
00:02:12.522 --> 00:02:15.539
&gt;&gt; If you had wanted to pass
them as two separate sets, sure.

31
00:02:15.539 --> 00:02:19.441
That would have muddied up the function
signature to spell word to pass in both

32
00:02:19.441 --> 00:02:23.777
candidate lists, but there's no reason
why you couldn't have kept them separate.

33
00:02:23.777 --> 00:02:25.635
All right, so let me restate the question.

34
00:02:25.635 --> 00:02:30.351
They're basically saying,
should we special case a pre-check for

35
00:02:30.351 --> 00:02:34.510
these before we attempt to do
the spelling of the whole word?

36
00:02:34.510 --> 00:02:38.036
Should we look for
all of the single letter candidates and

37
00:02:38.036 --> 00:02:42.882
match against any of the single letters
in our input word and do a pre-check for

38
00:02:42.882 --> 00:02:47.730
those before invoking the recursive spell
word function which will then favor

39
00:02:47.730 --> 00:02:50.682
two letter versions over
one letter versions?

40
00:02:50.682 --> 00:02:55.607
I do not agree with that, and I actually
think that would be functionally

41
00:02:55.607 --> 00:02:58.044
incorrect in some circumstances.

42
00:02:58.044 --> 00:03:03.770
Because I do believe there are periodic
table elements where there is a character

43
00:03:03.770 --> 00:03:08.483
that appears only as the second
character in a two letter symbol and

44
00:03:08.483 --> 00:03:11.699
never appears as its
own individual letter.

45
00:03:11.699 --> 00:03:14.761
That would be, I think,
the biggest functional trap.

46
00:03:14.761 --> 00:03:18.459
I'd have to validate that, but
that's my instinct that that would fail.

47
00:03:18.459 --> 00:03:23.626
But even if it was functionally okay
to do, I think a further special

48
00:03:23.626 --> 00:03:29.443
casing of this, the question was,
what do you think about the trade-off?

49
00:03:29.443 --> 00:03:32.767
A further special casing
where we pre-check for

50
00:03:32.767 --> 00:03:36.494
stuff that we're then already
gonna check for later,

51
00:03:36.494 --> 00:03:41.941
that is a premature optimization,
we'll say, or an immature optimization.

52
00:03:41.941 --> 00:03:44.381
Our algorithm already checks for

53
00:03:44.381 --> 00:03:49.609
the one letter candidates being in
there by default, and I don't think

54
00:03:49.609 --> 00:03:55.199
avoiding a few iterations before we get
there on the whole is going to end up.

55
00:03:55.199 --> 00:03:58.619
It's definitely not going to change or

56
00:03:58.619 --> 00:04:03.604
improve the bigger order of
magnitude of this solution.

57
00:04:03.604 --> 00:04:08.778
It might trim off in some cases and
might not trim off in others.

58
00:04:08.778 --> 00:04:09.706
There's another question?

59
00:04:09.706 --> 00:04:14.138
&gt;&gt; But to comment on that,
I would say that is the wrong way to go,

60
00:04:14.138 --> 00:04:17.805
because you want to rule
out your large sets first,

61
00:04:17.805 --> 00:04:21.579
because we want to return
the largest set possible.

62
00:04:21.579 --> 00:04:25.701
So we want to get all of those
out of the set that we're

63
00:04:25.701 --> 00:04:30.600
iterating before we match, so
we can use implicit negation.

64
00:04:30.600 --> 00:04:31.194
&gt;&gt; Yeah.

65
00:04:31.194 --> 00:04:35.215
&gt;&gt; Because we know everything that we've
already matched, we only look at single

66
00:04:35.215 --> 00:04:39.129
characters for what isn't matched, and
that is a much lower overhead flow.

67
00:04:39.129 --> 00:04:40.163
&gt;&gt; I agree with you.

68
00:04:40.163 --> 00:04:45.088
However, in fairness, what was being asked
from the chat room is a valid question-

69
00:04:45.088 --> 00:04:45.873
&gt;&gt; Yes, totally agree.

70
00:04:45.873 --> 00:04:51.081
&gt;&gt; Because it's very similar to when
we were talking earlier in the workshop

71
00:04:51.081 --> 00:04:55.785
about boundary box overlaps and
I said if you check for whether they

72
00:04:55.785 --> 00:05:01.416
are overlapped that's more conditions
to check than to check for the reverse.

73
00:05:01.416 --> 00:05:05.092
So they're effectively not checking for
one-letter candidates,

74
00:05:05.092 --> 00:05:08.893
they're checking for the absence of
one-letter candidates as a way to

75
00:05:08.893 --> 00:05:12.206
short-circuit not even going
into the spell word function.

76
00:05:12.206 --> 00:05:16.583
So it's a valid approach in the similar
way we're checking a negated case to see

77
00:05:16.583 --> 00:05:18.620
if we can short-circuit out early.

78
00:05:18.620 --> 00:05:20.910
I just think in this particular case,

79
00:05:20.910 --> 00:05:25.777
duplicating that logic into a special
case, first of all, duplicating logic,

80
00:05:25.777 --> 00:05:29.070
then ends up creating either
a maintenance overhead or

81
00:05:29.070 --> 00:05:33.536
a performance overhead if you then have
to call it as a separate function.

82
00:05:33.536 --> 00:05:39.788
And secondly, probably my instinct is if
you were to work out the math on that,

83
00:05:39.788 --> 00:05:45.980
it doesn't actually create any
statistical increase in your performance.

84
00:05:45.980 --> 00:05:49.965
It increased your code overhead and
you didn't get anything for it,

85
00:05:49.965 --> 00:05:51.551
would be my instinct here.

86
00:05:51.551 --> 00:05:57.209
So what has this changed versus
the way that I solved it before?

87
00:05:57.209 --> 00:05:59.546
Well, first,
before we answer that question,

88
00:05:59.546 --> 00:06:02.738
let's just double check to make
sure I didn't make any mistakes,

89
00:06:02.738 --> 00:06:05.427
because I probably did with
all my typing and retyping.

90
00:06:05.427 --> 00:06:06.357
Let's just double check.

91
00:06:06.357 --> 00:06:12.919
So we're gonna slide on over to our
browser here, we're gonna refresh.

92
00:06:12.919 --> 00:06:14.701
No JavaScript errors, that's a good sign.

93
00:06:14.701 --> 00:06:18.326
Let's try because, that still works.

94
00:06:18.326 --> 00:06:20.001
How about accept?

95
00:06:20.001 --> 00:06:24.136
How about pancreas, as I showed before?

96
00:06:24.136 --> 00:06:29.411
Oops, I did have a JavaScript error,
what did I do wrong?

97
00:06:29.411 --> 00:06:33.803
Spell word, this is why you run tests.

98
00:06:37.979 --> 00:06:38.978
What does that say?

99
00:06:38.978 --> 00:06:44.832
In just a moment here, or
it's returned value is not iterable.

100
00:06:44.832 --> 00:06:48.451
There is an implied else
condition right here.

101
00:06:48.451 --> 00:06:55.013
And it should return an empty array in
that case, because it wasn't a match.

102
00:06:55.013 --> 00:06:58.761
And rather than putting that else
condition right there because I don't

103
00:06:58.761 --> 00:07:00.728
actually want to return right there,

104
00:07:00.728 --> 00:07:03.691
because I want to allow the one
candidates to go forward.

105
00:07:03.691 --> 00:07:07.673
So I'd have to figure it around.

106
00:07:07.673 --> 00:07:10.406
So I don't put the else
candidate here either.

107
00:07:10.406 --> 00:07:13.543
So if both of those fall through,

108
00:07:13.543 --> 00:07:18.370
then we get down here and
we return the empty array.

109
00:07:18.370 --> 00:07:22.570
So I think my only problem
is that in my rush to,

110
00:07:28.036 --> 00:07:32.251
My rush to remove lines of code,
I just should not have removed this one.

111
00:07:32.251 --> 00:07:35.199
I don't know what I was thinking,
so sorry about that.

112
00:07:35.199 --> 00:07:38.434
Let's try this again, just double check,
make sure that it works.

113
00:07:46.793 --> 00:07:52.466
Okay, so
what's a takeaway from my mistake here?

114
00:07:52.466 --> 00:07:56.246
A takeaway from my mistake
is that it is very important

115
00:07:56.246 --> 00:08:00.455
that you have that reference
implementation to go back to.

116
00:08:00.455 --> 00:08:03.810
Because if I couldn't have
figured out this bug, or

117
00:08:03.810 --> 00:08:07.944
if I had been banging my head on this bug,
what would I have done?

118
00:08:07.944 --> 00:08:11.498
I would have pulled back up my
reference implementation and

119
00:08:11.498 --> 00:08:15.915
tried it with the exact same example and
seen if I got it to succeed or fail.

120
00:08:15.915 --> 00:08:19.253
It might have been the case that I
had some corner case that I had not

121
00:08:19.253 --> 00:08:19.989
come across.

122
00:08:19.989 --> 00:08:24.678
So I would have gone back and tested
against the reference implementation to

123
00:08:24.678 --> 00:08:29.002
verify that something about my
optimization had caused the problem,

124
00:08:29.002 --> 00:08:30.769
as opposed to my algorithm.

125
00:08:30.769 --> 00:08:34.670
So in this particular case,
the mistake that I made,

126
00:08:37.319 --> 00:08:40.972
Was as I was reading off
the code that I needed to do, and

127
00:08:40.972 --> 00:08:43.840
I deleted code a little too aggressively.

128
00:08:43.840 --> 00:08:49.684
I should not have deleted line 91 here,
because that is my implied else condition.

129
00:08:49.684 --> 00:08:54.516
If both of those two matches fail,
that's my implied else condition, and

130
00:08:54.516 --> 00:08:57.134
I just accidentally deleted that line.

131
00:08:57.134 --> 00:09:02.108
And that's why what's coming back from
spell word in that particular case,

132
00:09:02.108 --> 00:09:05.551
in that case it was undefined
instead of an array, and

133
00:09:05.551 --> 00:09:09.551
that's why we were getting
the JavaScript error that we got.

