WEBVTT

1
00:00:00.000 --> 00:00:03.478
Tetris, many of you have
probably played this game.

2
00:00:03.478 --> 00:00:04.348
I've certainly played it.

3
00:00:04.348 --> 00:00:07.404
I've made Tetris games for fun before.

4
00:00:07.404 --> 00:00:09.790
It's harder to implement
than you might think.

5
00:00:09.790 --> 00:00:14.165
But I got to thinking,
as most people do that play games,

6
00:00:14.165 --> 00:00:16.729
what if I wrote a bot to play this?

7
00:00:16.729 --> 00:00:21.117
What if I wrote a Tetris bot that just sat
there so I could go take a snack break and

8
00:00:21.117 --> 00:00:24.262
come back and
the game would still be going or whatever.

9
00:00:24.262 --> 00:00:27.723
And that's a similar kind of question.

10
00:00:27.723 --> 00:00:32.685
How would you model the current
state of a Tetris board the next

11
00:00:32.685 --> 00:00:37.473
piece that's coming up, and
where best to put that piece?

12
00:00:37.473 --> 00:00:39.652
There are many places to put that piece.

13
00:00:39.652 --> 00:00:41.571
Not all of them are gonna
produce the same output.

14
00:00:41.571 --> 00:00:45.251
So how would you model solving a Tetris or

15
00:00:45.251 --> 00:00:51.542
even just playing a Tetris game in
some sort of remotely optimal way?

16
00:00:51.542 --> 00:00:53.861
What would be the things
that would matter?

17
00:00:53.861 --> 00:00:56.269
Here's some questions that
would come to my mind.

18
00:00:56.269 --> 00:00:57.598
What am I optimizing for?

19
00:00:57.598 --> 00:01:02.585
[LAUGH] Am I optimizing for longest
gameplay like prolonging the inevitable?

20
00:01:02.585 --> 00:01:06.284
Am I optimizing for as many lines
cleared or am I optimizing for

21
00:01:06.284 --> 00:01:09.498
clearing four lines so
I get more of the bonus points?

22
00:01:09.498 --> 00:01:13.206
What are the things that my gameplay needs
to optimize for I'd play it differently?

23
00:01:13.206 --> 00:01:18.205
Now truth be told complex problems
like this are rarely solved directly

24
00:01:18.205 --> 00:01:20.463
programmatically these days.

25
00:01:20.463 --> 00:01:23.393
Most of these are solved
through machine learning.

26
00:01:23.393 --> 00:01:27.572
You effectively reverse engineer
the perfect solution by playing a bunch of

27
00:01:27.572 --> 00:01:32.076
really bad games and selecting the best of
the bad games and then keep doing that and

28
00:01:32.076 --> 00:01:33.072
keep doing that.

29
00:01:33.072 --> 00:01:35.821
And then you end up with
a style of play that

30
00:01:35.821 --> 00:01:39.368
is almost completely unlike
what any human would do.

31
00:01:39.368 --> 00:01:41.747
But it ends up being the best gameplay.

32
00:01:41.747 --> 00:01:45.260
That's how a lot of those
kinds of tools work now.

33
00:01:45.260 --> 00:01:49.456
But if you were to write a direct
non-machine learning algorithm to this,

34
00:01:49.456 --> 00:01:51.129
not reverse engineering it.

35
00:01:51.129 --> 00:01:54.805
You would translate some of the things
that you think of as a player,

36
00:01:54.805 --> 00:01:59.212
some of the things that you optimize for,
you would translate those into steps.

37
00:01:59.212 --> 00:02:03.113
And you'd say I think if I see one
left side of it really, really tall,

38
00:02:03.113 --> 00:02:06.174
I'd try to put all of the pieces
on the right hand side.

39
00:02:06.174 --> 00:02:11.542
That might be one of your
informal game playing rules.

40
00:02:11.542 --> 00:02:15.482
A machine learning algorithm might
literally come up with the exact opposite

41
00:02:15.482 --> 00:02:17.190
rule and still do better than us.

42
00:02:17.190 --> 00:02:21.636
But the point is, if you were writing
your own algorithm to represent your

43
00:02:21.636 --> 00:02:24.878
gameplay in Tetris,
what are the steps you'd take?

44
00:02:24.878 --> 00:02:27.572
What questions would you ask?

45
00:02:27.572 --> 00:02:30.254
What diagrams would you draw?

46
00:02:30.254 --> 00:02:34.278
All fundamental steps to
being a better algorithmist.

47
00:02:36.326 --> 00:02:41.237
Very similar question during the pandemic,
as many people did,

48
00:02:41.237 --> 00:02:43.745
my wife and I did a lot of puzzles.

49
00:02:43.745 --> 00:02:49.121
And we did some that were fairly
straightforward, it took us a day or two.

50
00:02:49.121 --> 00:02:55.898
We had one puzzle that a relative
sent us that was really evil.

51
00:02:55.898 --> 00:02:59.863
First of all,
it was a 1500 piece puzzle, so

52
00:02:59.863 --> 00:03:04.431
really tiny pieces and
it was tons of color repetition.

53
00:03:04.431 --> 00:03:07.008
So it was gonna be a nightmare.

54
00:03:07.008 --> 00:03:09.959
And we poured it out, and
I like looked at it and

55
00:03:09.959 --> 00:03:14.064
then about ten minutes in I was like,
I refuse to do this puzzle.

56
00:03:14.064 --> 00:03:18.691
[LAUGH] First of all, I don't need to
waste weeks of my life on this puzzle.

57
00:03:18.691 --> 00:03:20.985
I was looking for
something for a few hours,

58
00:03:20.985 --> 00:03:24.774
not something that I'm gonna worry
about for weeks and weeks and weeks.

59
00:03:24.774 --> 00:03:30.365
But secondly, the pieces the way they fit,
the way they cut that puzzle.

60
00:03:30.365 --> 00:03:34.941
And I think this is probably just true,
the more pieces that you have,

61
00:03:34.941 --> 00:03:40.385
the more likely it is that you have pieces
that are almost a perfect fit but aren't.

62
00:03:40.385 --> 00:03:43.046
And I had a few of those,
so I had no color clue.

63
00:03:43.046 --> 00:03:47.802
And then I was trying to pair the pieces
by their shape, and it was ever so

64
00:03:47.802 --> 00:03:53.370
slightly, and I'm talking about half
a millimeter not quite perfectly correct.

65
00:03:53.370 --> 00:03:55.761
And then you're wondering, is it wrong?

66
00:03:55.761 --> 00:04:00.403
Or is this just the imperfection in
the cutting of the cardboard piece?

67
00:04:00.403 --> 00:04:03.662
I was, no, I'm not gonna spend
my life mad at this puzzle, so

68
00:04:03.662 --> 00:04:05.118
we just gave up on that one.

69
00:04:05.118 --> 00:04:10.230
But I got to thinking, what if I could
just take a picture of this pile

70
00:04:10.230 --> 00:04:15.992
of my puzzle pieces and tell the computer,
at least give me the edge pieces.

71
00:04:15.992 --> 00:04:16.949
Give me a head start.

72
00:04:16.949 --> 00:04:20.296
[LAUGH] Not even solving the whole puzzle,

73
00:04:20.296 --> 00:04:24.034
how would you just solve
the edges of a puzzle?

74
00:04:24.034 --> 00:04:26.713
How would you write that algorithm?

75
00:04:26.713 --> 00:04:28.766
There's ways to do it.

76
00:04:28.766 --> 00:04:33.993
There's image recognition and
all kinds of stuff like that.

77
00:04:33.993 --> 00:04:38.016
But if you were gonna write code to
do that, what steps would you take?

78
00:04:38.016 --> 00:04:41.324
What are the base conditions
that you would wanna look at?

79
00:04:41.324 --> 00:04:45.761
We know every rectangular puzzle
has four corner pieces, so

80
00:04:45.761 --> 00:04:48.024
let's identify those first.

81
00:04:48.024 --> 00:04:50.902
That's what I do as a human,
I identify the corner pieces and

82
00:04:50.902 --> 00:04:52.434
then the straight edge pieces.

83
00:04:52.434 --> 00:04:55.120
So that's probably the steps
that you'd start writing code.

84
00:04:55.120 --> 00:04:57.640
Use your image recognition
to find all of those and

85
00:04:57.640 --> 00:04:59.686
start kind of shuffling them together.

86
00:04:59.686 --> 00:05:01.859
Then you'd probably sort
by average color or

87
00:05:01.859 --> 00:05:04.784
something like that just to
kind of get them approximately.

88
00:05:04.784 --> 00:05:08.961
And then you'd probably just
start trying permutations

89
00:05:08.961 --> 00:05:13.929
of shapes fitting together until
you found the right pieces to fit.

90
00:05:16.891 --> 00:05:19.426
All right,
I've put this up here as a representation.

91
00:05:19.426 --> 00:05:21.497
I know we already saw a map, but

92
00:05:21.497 --> 00:05:26.144
there's a classic computer science
problem, which is given a map.

93
00:05:26.144 --> 00:05:29.663
And in the case of the map that
we're gonna be talking about,

94
00:05:29.663 --> 00:05:32.907
it's just a two-dimensional
array of zeros and ones.

95
00:05:32.907 --> 00:05:35.850
That represent islands, okay?

96
00:05:35.850 --> 00:05:37.924
So here are some islands.

97
00:05:37.924 --> 00:05:41.310
Given this two dimensional
grid of zeros and

98
00:05:41.310 --> 00:05:44.520
ones, not a complex map like we see here.

99
00:05:44.520 --> 00:05:49.582
How would you determine the size
of the largest island, which is

100
00:05:49.582 --> 00:05:56.066
the size of the largest contiguous group
of ones in that two-dimensional array?

101
00:05:56.066 --> 00:05:58.007
How would you go through and

102
00:05:58.007 --> 00:06:02.321
find that the largest island is
six versus four or whatever?

103
00:06:04.409 --> 00:06:10.872
This is a classic computer science problem
and there's classic known solutions to it.

104
00:06:15.713 --> 00:06:20.060
Lots of different applications to this
besides geographic maps by the way.

105
00:06:20.060 --> 00:06:25.217
You could think about this in image
editing programs like filling of paint,

106
00:06:25.217 --> 00:06:30.149
find the largest, you could think
about it in an image representation.

107
00:06:30.149 --> 00:06:33.748
Like if you were doing a scaling or
thumbnailing of a picture, and

108
00:06:33.748 --> 00:06:38.144
you might take a grid of some pixels and
try to find the average colors within it.

109
00:06:38.144 --> 00:06:42.632
So you need to find the largest section
of contiguous color within a grouping of

110
00:06:42.632 --> 00:06:43.182
pixels.

111
00:06:43.182 --> 00:06:47.829
Lots of different ways that this
kind of algorithm can show up in

112
00:06:47.829 --> 00:06:51.783
the programming that we do
besides geographic maps.

113
00:06:51.783 --> 00:06:56.526
What are the steps that you might take

114
00:06:56.526 --> 00:07:00.658
to finding the largest island?

115
00:07:00.658 --> 00:07:05.396
For this particular problem,
I actually have a link here to

116
00:07:05.396 --> 00:07:09.390
a just where I implemented
it two different ways.

117
00:07:09.390 --> 00:07:12.404
I'm not claiming that this is good code.

118
00:07:12.404 --> 00:07:14.082
This is just my attempt.

119
00:07:14.082 --> 00:07:18.562
I solved it first with
the recursive approach,

120
00:07:18.562 --> 00:07:23.719
the depth first, as we call it,
recursive approach.

121
00:07:23.719 --> 00:07:28.290
And then I went back and resolved it
again, and that's what this code here is,

122
00:07:28.290 --> 00:07:31.076
is a snapshot of
the breadth-first approach.

123
00:07:31.076 --> 00:07:34.255
And it's very small code,
but I just want you to,

124
00:07:34.255 --> 00:07:37.753
if you can see there on line 9,
you see some for loops.

125
00:07:37.753 --> 00:07:39.182
I'm not doing any recursion at all.

126
00:07:39.182 --> 00:07:42.536
This is a couple of nested loops and
a queue.

127
00:07:42.536 --> 00:07:49.674
I'm doing a breadth-first search through
the tree or graph of information.

128
00:07:49.674 --> 00:07:54.465
You can treat this two-dimensional array
of pixels as if it's kind of a graph, and

129
00:07:54.465 --> 00:07:57.626
I'm doing a breadth-first
traversal through that.

130
00:07:57.626 --> 00:08:02.308
Once I find an island, basically spreading
out until I found all the edges of

131
00:08:02.308 --> 00:08:06.567
the island and keeping track of how
many units I found in that island.

132
00:08:06.567 --> 00:08:10.448
And then I've got a set in there to make
sure that I don't revisit that island from

133
00:08:10.448 --> 00:08:13.551
some other direction as I keep
going looking for other islands.

134
00:08:13.551 --> 00:08:15.534
So that's my approach.

135
00:08:15.534 --> 00:08:16.583
Maybe it's a good one.

136
00:08:16.583 --> 00:08:17.705
Maybe it's a terrible approach.

137
00:08:17.705 --> 00:08:20.725
I don't know, there's probably
much more efficient algorithms.

138
00:08:25.385 --> 00:08:28.958
If this is your first foray
into algorithmic programming,

139
00:08:28.958 --> 00:08:33.458
I'm gonna go out on a limb and suggest
that some of you might feel a little bit

140
00:08:33.458 --> 00:08:36.045
intimidated by looking at code like that.

141
00:08:36.045 --> 00:08:40.933
And the reason I wanted to show you
this code is that you will build up code

142
00:08:40.933 --> 00:08:42.902
like that in this workshop.

143
00:08:42.902 --> 00:08:46.775
And it won't feel intimidating
when you build it piece by piece.

144
00:08:46.775 --> 00:08:50.015
The intimidation comes when you look
at the final solution and you say,

145
00:08:50.015 --> 00:08:51.749
I wouldn't even know where to start.

146
00:08:51.749 --> 00:08:55.669
Part of the purpose of this workshop is
helping you learn where to start, okay?

147
00:08:55.669 --> 00:08:59.350
But you're gonna end
up getting to more and

148
00:08:59.350 --> 00:09:03.552
more complex solutions
piece by piece by piece.

