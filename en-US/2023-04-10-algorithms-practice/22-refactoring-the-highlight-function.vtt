WEBVTT

1
00:00:00.045 --> 00:00:02.902
Let's move down to the highlight function.

2
00:00:05.038 --> 00:00:07.964
And I'm gonna temporarily
comment this out,

3
00:00:07.964 --> 00:00:11.349
that reminds us that we need
to come back and fix that.

4
00:00:11.349 --> 00:00:12.876
Let's come down here.

5
00:00:12.876 --> 00:00:16.724
We know that we were previously
getting the title row index and

6
00:00:16.724 --> 00:00:21.461
title column index, and we were pulling
that out from the dataset, right?

7
00:00:21.461 --> 00:00:26.069
So we could still store it into
the dataset and then here,

8
00:00:26.069 --> 00:00:30.582
we could recompute the major index and
the minor index.

9
00:00:30.582 --> 00:00:32.669
Are you with me?

10
00:00:32.669 --> 00:00:37.706
I could copy these computations down here.

11
00:00:37.706 --> 00:00:42.124
And then I would know based
on the tile that was clicked,

12
00:00:42.124 --> 00:00:47.294
I would know what major diagonal index and
minor diagonal index,

13
00:00:47.294 --> 00:00:50.687
that particular clicked tile belongs to.

14
00:00:50.687 --> 00:00:53.463
You just copy the math and do it again.

15
00:00:53.463 --> 00:00:57.121
But even that is redoing
computational work,

16
00:00:57.121 --> 00:01:02.092
it's not that much computational work,
it's trivial math,

17
00:01:02.092 --> 00:01:05.491
but it is redoing work
that we already did.

18
00:01:05.491 --> 00:01:11.781
So I'm gonna go back up here, and
I'm gonna further rethink things.

19
00:01:11.781 --> 00:01:15.586
Why am I computing the index and
then pushing it in,

20
00:01:15.586 --> 00:01:19.048
only to then have to later
we can put the index?

21
00:01:19.048 --> 00:01:23.811
Earlier, somebody mentioned
that if we wanna store more

22
00:01:23.811 --> 00:01:28.587
rich information with a DOM element,
we could use a map.

23
00:01:28.587 --> 00:01:30.571
And that's what I wanna do.

24
00:01:30.571 --> 00:01:33.799
I don't wanna store
the index that you're in and

25
00:01:33.799 --> 00:01:36.248
then have to go retrieve that index.

26
00:01:36.248 --> 00:01:41.222
I actually want to associate with
each tile element, a reference to

27
00:01:41.222 --> 00:01:46.472
the diagonal that it belongs to,
the two diagonals that it belongs to.

28
00:01:46.472 --> 00:01:47.674
So here's what we're gonna do.

29
00:01:47.674 --> 00:01:53.789
We're gonna create ourselves a variable,
we'll call this tileDiagonals.

30
00:01:59.695 --> 00:02:04.145
And we're gonna make capital M map,
an instance of capital M map.

31
00:02:04.145 --> 00:02:06.804
This is different from objects,
because remember,

32
00:02:06.804 --> 00:02:09.353
this is going to allow us
to use anything as the key.

33
00:02:09.353 --> 00:02:12.697
And in this case,
we're gonna use DOM elements as the key.

34
00:02:12.697 --> 00:02:14.570
Are you with me?

35
00:02:14.570 --> 00:02:16.093
Let me hear thumbs up, thumbs down.

36
00:02:16.093 --> 00:02:17.513
Have I lost you yet?

37
00:02:17.513 --> 00:02:20.280
We're doing okay, all right?

38
00:02:20.280 --> 00:02:27.006
So, at this moment, I want to insert
an entry into that tile diagonals

39
00:02:27.006 --> 00:02:33.735
map that includes references to
the two diagonals that it belongs to.

40
00:02:33.735 --> 00:02:35.222
Are you with me?

41
00:02:35.222 --> 00:02:37.530
And I'm gonna key it by the tile element.

42
00:02:37.530 --> 00:02:39.145
So in other words,
I'm gonna do something like this.

43
00:02:39.145 --> 00:02:44.706
I'm gonna say tileDiagonals.,
I think it's add.

44
00:02:46.669 --> 00:02:48.011
I'm sorry, set.

45
00:02:48.011 --> 00:02:50.580
tileDiagonals.set, that's
the method on maps.

46
00:02:50.580 --> 00:02:52.830
tileDiagonals.set, what's the index?

47
00:02:52.830 --> 00:02:54.606
It's the tile element.

48
00:02:54.606 --> 00:02:56.060
And what is the value?

49
00:02:56.060 --> 00:03:03.449
Well, why don't we just collect the two
references to the two diagonals?

50
00:03:03.449 --> 00:03:05.149
So how are we gonna get
those two diagonals?

51
00:03:05.149 --> 00:03:07.378
Well, here's what I'm gonna do.

52
00:03:07.378 --> 00:03:10.649
We actually move this down.

53
00:03:10.649 --> 00:03:13.985
I'm just gonna combine this,

54
00:03:13.985 --> 00:03:18.861
instead of saving it
separately as indexes,

55
00:03:18.861 --> 00:03:25.939
I'm just gonna get a reference to
the major and minor diagonals.

56
00:03:31.761 --> 00:03:35.326
So now I have my major diagonal and
my minor diagonal.

57
00:03:46.059 --> 00:03:48.969
&gt;&gt; And
those are the two things that I want to

58
00:03:48.969 --> 00:03:51.628
put their references in right here.

59
00:04:19.185 --> 00:04:21.587
Does everybody follow how we did this?

60
00:04:21.587 --> 00:04:27.511
We took our tile element and used it
as the key to store two element array,

61
00:04:27.511 --> 00:04:33.455
a tuple, that includes the major
diagonal and the minor diagonal in it.

62
00:04:33.455 --> 00:04:36.905
The major diagonal and
the minor diagonal are references, so

63
00:04:36.905 --> 00:04:38.900
this is just merely more indexing.

64
00:04:38.900 --> 00:04:43.401
These are references to the actual
arrays that we created up

65
00:04:43.401 --> 00:04:47.553
here that we stuffed the tile
element reference into.

66
00:04:47.553 --> 00:04:50.422
So it's kind of making like
a double linkage like,

67
00:04:50.422 --> 00:04:54.906
the diagonal knows about the element and
the element knows about the diagonal.

68
00:04:54.906 --> 00:04:55.864
You see that.

69
00:04:58.029 --> 00:05:01.479
And we're using the map
as a way to create that,

70
00:05:01.479 --> 00:05:06.318
you might think of it as a third
party association between the two.

71
00:05:06.318 --> 00:05:10.446
We have a DOM element and
we have a tuple array, and

72
00:05:10.446 --> 00:05:14.773
we wanna create a relationship
between the two, and

73
00:05:14.773 --> 00:05:19.316
we store that relationship
in our tile diagonals map.

74
00:05:19.316 --> 00:05:23.688
Thank you map data structure,
that's a nice, good solution for us.

75
00:05:25.277 --> 00:05:26.625
It's gonna be nice and efficient.

76
00:05:26.625 --> 00:05:32.360
Now that we come back to highlight,
this is where the fun stuff starts.

77
00:05:32.360 --> 00:05:38.764
What do I need to do with a tile
element to get its major and

78
00:05:38.764 --> 00:05:46.824
minor diagonal which I might call
the things that I need to highlight?

79
00:05:46.824 --> 00:05:51.041
So I'll call this toHighlight.

80
00:05:51.041 --> 00:05:52.959
That's gonna be my little tuple array.

81
00:05:52.959 --> 00:06:00.512
I'm gonna call tileDiagonals.get, and
I'm gonna give it the tile element.

82
00:06:05.531 --> 00:06:06.765
Everybody with me?

83
00:06:11.607 --> 00:06:15.664
There are two elements in there,
so I'm going to say,

84
00:06:15.664 --> 00:06:18.234
for (let diag of toHighlight).

85
00:06:28.579 --> 00:06:31.858
And then for let el of,

86
00:06:31.858 --> 00:06:37.388
I'll spell this out instead of diag.

87
00:06:41.829 --> 00:06:46.135
El.classlist.add("highlighted").

88
00:06:46.135 --> 00:06:46.907
That should look familiar.

89
00:06:46.907 --> 00:06:50.630
That's the same way we've been
highlighting the tiles all along, so

90
00:06:50.630 --> 00:06:51.840
that's nothing new.

91
00:06:51.840 --> 00:06:57.851
The only thing new is this outer for
loop is now going over our new

92
00:06:57.851 --> 00:07:02.857
tuple from our tuple index
into our data structure.

93
00:07:02.857 --> 00:07:07.769
Otherwise, this already looks exactly
the same kind of loop that we were

94
00:07:07.769 --> 00:07:08.826
doing before.

95
00:07:08.826 --> 00:07:14.996
Just go over all the el references and
add highlighted to all of them.

96
00:07:14.996 --> 00:07:18.085
Are you ready for the fun part?

97
00:07:18.085 --> 00:07:21.695
All of this we get to delete, I just love.

98
00:07:21.695 --> 00:07:22.597
That's all gone.

99
00:07:25.296 --> 00:07:29.841
Because this is it, this for loop is
literally all we need to do to highlight

100
00:07:29.841 --> 00:07:32.017
that diagonals for a tile element.

101
00:07:35.538 --> 00:07:38.444
So take just a moment, we're not
quite done, but take just a moment.

102
00:07:38.444 --> 00:07:43.387
Make sure you understand how we were
able to remove all that other stuff and

103
00:07:43.387 --> 00:07:46.746
how this all it's doing,
it solves the problem.

104
00:07:53.511 --> 00:07:56.371
We are storing in the map a reference from

105
00:07:56.371 --> 00:08:00.673
a tile element to the two
diagonals that it participates in.

106
00:08:00.673 --> 00:08:06.118
And when we are clicking on a tile
element, we retrieve that tuple

107
00:08:06.118 --> 00:08:11.374
to know the major and
minor diagonals that it participates in.

108
00:08:11.374 --> 00:08:16.072
And when we're simply looping over
any elements that are in either of

109
00:08:16.072 --> 00:08:18.829
those two diagonals and highlighting.

110
00:08:20.595 --> 00:08:24.952
We don't need to keep track of
any indexes or row, none of that,

111
00:08:24.952 --> 00:08:27.871
we don't have to keep
track of any of that.

112
00:08:27.871 --> 00:08:32.565
We've already stored a data structure that
gave us a flat reference to the elements

113
00:08:32.565 --> 00:08:34.385
that we will need to care about.

114
00:08:36.035 --> 00:08:39.996
But there's one last little detail which
is that I commented this code out, so

115
00:08:39.996 --> 00:08:42.829
that we would remember that
we needed to come back to it.

116
00:08:42.829 --> 00:08:50.533
How do we know which elements
that we need to unhighlight?

117
00:08:50.533 --> 00:08:55.169
You remember that up until this point,
we've only had this basically dumb

118
00:08:55.169 --> 00:08:58.714
algorithm which was just try
to unhighlight all of them.

119
00:08:58.714 --> 00:09:01.105
But now spot this.

120
00:09:01.105 --> 00:09:05.948
This tuple represents the stuff
that we highlighted before, and

121
00:09:05.948 --> 00:09:10.882
that's information that we're
trying to basically recompute or

122
00:09:10.882 --> 00:09:13.802
ignore, why don't we just save that?

123
00:09:13.802 --> 00:09:19.030
In fact,
instead of declaring this as a variable,

124
00:09:19.030 --> 00:09:23.176
I'm gonna rename this to highlighted.

125
00:09:27.659 --> 00:09:31.605
I'm gonna declare that as one of

126
00:09:31.605 --> 00:09:37.159
the variables that I
have in my module scope,

127
00:09:37.159 --> 00:09:41.554
so that I can remember it over time.

128
00:09:46.613 --> 00:09:47.738
And here's the fun part.

129
00:09:47.738 --> 00:09:52.108
This code right here,
this nested for loop,

130
00:09:52.108 --> 00:09:57.168
I'm gonna copy it,
I'm gonna paste it right here,

131
00:09:57.168 --> 00:10:02.010
unindent it one level,
and change add to remove.

132
00:10:14.816 --> 00:10:16.959
That's it, that's our entire solution.

133
00:10:22.208 --> 00:10:25.904
How many people think that we drastically

134
00:10:25.904 --> 00:10:30.137
simplified the way that
we solve this problem?

135
00:10:30.137 --> 00:10:35.258
And indeed, haven't we improved
the performance of this?

136
00:10:35.258 --> 00:10:39.033
Because we are now only looking
at the tiles that we care about,

137
00:10:39.033 --> 00:10:43.094
and we don't even need to recompute
which tiles those are because we

138
00:10:43.094 --> 00:10:46.104
save that information as
we construct the board.

139
00:10:52.496 --> 00:10:56.346
To me, this is one of the clearest of the
various examples that I could give you.

140
00:10:56.346 --> 00:11:00.851
It's one of the clearest examples
of how powerful it is when you

141
00:11:00.851 --> 00:11:05.526
have a data structure that is
aligned with your problem Instead of

142
00:11:05.526 --> 00:11:09.353
trying to align your problem
to your data structure.

143
00:11:11.219 --> 00:11:15.416
Sometimes that means finding
a data structure that somebody

144
00:11:15.416 --> 00:11:17.315
else has already written.

145
00:11:17.315 --> 00:11:21.794
Go get the NPM package, install it,
use it, boom, you're done.

146
00:11:21.794 --> 00:11:26.126
Sometimes, you have to get
a little bit creative and

147
00:11:26.126 --> 00:11:29.878
construct our own list
of diagonals arrays.

148
00:11:29.878 --> 00:11:32.162
You shouldn't be scared of that.

149
00:11:32.162 --> 00:11:34.132
Was this painful code?

150
00:11:34.132 --> 00:11:35.924
I feel like, by this point,

151
00:11:35.924 --> 00:11:41.153
most of you should feel pretty confident
that all we did was construct some arrays,

152
00:11:41.153 --> 00:11:45.130
there wasn't any sophisticated
algorithmic thinking here.

153
00:11:45.130 --> 00:11:50.026
The only light bulb moment that I
had to have was turning the problem

154
00:11:50.026 --> 00:11:52.562
by 45 degrees, and that was it,

155
00:11:52.562 --> 00:11:57.915
to make sure that we didn't make
a mistake somewhere which does happen.

156
00:11:57.915 --> 00:12:04.058
Let me go do our regression test and
make sure we didn't make a mistake.

157
00:12:13.487 --> 00:12:16.965
And it works.

158
00:12:19.436 --> 00:12:22.549
It's important for you to have
fingers on keyboard with this stuff.

159
00:12:22.549 --> 00:12:26.324
If I had simply told you this,
it wouldn't really click, so

160
00:12:26.324 --> 00:12:30.409
having the fingers on keyboard
is an important characteristic.

161
00:12:30.409 --> 00:12:35.347
But I will say that the bigger
takeaway from this exercise is not

162
00:12:35.347 --> 00:12:40.017
the code that we wrote,
it's not the code that we deleted.

163
00:12:40.017 --> 00:12:46.174
It's the discipline and the willingness
to ask questions about our problem,

164
00:12:46.174 --> 00:12:49.905
to back track and
ask different questions, and

165
00:12:49.905 --> 00:12:54.491
to attempt things, in this case,
at a 45 degree angle.

166
00:12:54.491 --> 00:12:58.991
I don't know if any of you have ever
looked weirdly at your code before,

167
00:12:58.991 --> 00:13:00.570
I've done that before.

168
00:13:00.570 --> 00:13:05.159
This is a literal manifestation of the,
what is it doing?

169
00:13:05.159 --> 00:13:07.483
Now I see what it's doing.

