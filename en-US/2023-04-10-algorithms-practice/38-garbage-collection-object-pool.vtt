WEBVTT

1
00:00:00.000 --> 00:00:06.033
Okay, back in our slides, I want us
to talk about garbage collection.

2
00:00:06.033 --> 00:00:08.694
And while I got these slides projected,

3
00:00:08.694 --> 00:00:13.005
I just want you to look back at
the code that we've just worked on.

4
00:00:13.005 --> 00:00:17.321
And I want you to see just how many
places that we are just treating for

5
00:00:17.321 --> 00:00:20.653
free that we can create an array and
return it back and

6
00:00:20.653 --> 00:00:25.601
spread it into another array and throw
it into a set and create another array.

7
00:00:25.601 --> 00:00:29.652
This is one of those cases where
JavaScript makes that super ergonomic and

8
00:00:29.652 --> 00:00:34.355
quite honestly, it's pretty performant in
doing it, we don't see a big penalty for

9
00:00:34.355 --> 00:00:35.430
doing it.

10
00:00:35.430 --> 00:00:39.700
So it ends up creating some pretty
reasonably nice code for us to write.

11
00:00:40.870 --> 00:00:44.532
The C programmers of the world
are cringing because they're like

12
00:00:44.532 --> 00:00:48.194
that dot-dot-dot is like 6,000
lines of its own complexity and

13
00:00:48.194 --> 00:00:51.450
all the memory implications,
and all that other stuff.

14
00:00:51.450 --> 00:00:55.740
At our layer of abstraction, we just sort
of treat it as almost a free operation.

15
00:00:56.790 --> 00:01:00.632
And one of the things that you need
to get good at as an algorithmist is,

16
00:01:00.632 --> 00:01:04.218
even though you do play in some
particular layer of abstraction,

17
00:01:04.218 --> 00:01:07.540
you shouldn't be completely
ignorant of the layer below.

18
00:01:07.540 --> 00:01:11.038
You should be at least competent
at understanding the layer below.

19
00:01:11.038 --> 00:01:16.102
For us, that's what JavaScript is managing
memory-wise underneath the covers.

20
00:01:16.102 --> 00:01:20.277
So I want us to talk about the creation
and throwing away of a whole bunch of

21
00:01:20.277 --> 00:01:25.156
arrays as temporary transport values,
that's basically what we're doing here.

22
00:01:25.156 --> 00:01:30.240
And I wanna talk about an approach
that you sometimes might employ

23
00:01:30.240 --> 00:01:35.333
to reduce the pressure on the garbage
collector in our programs.

24
00:01:35.333 --> 00:01:36.525
Why is that important?

25
00:01:36.525 --> 00:01:40.961
Because it is always the case that
in the small, we test things out and

26
00:01:40.961 --> 00:01:42.270
everything works.

27
00:01:42.270 --> 00:01:43.699
And then in production,

28
00:01:43.699 --> 00:01:47.919
we end up starting to see people complain
that our animations start to just

29
00:01:47.919 --> 00:01:52.703
randomly be janky or there's a delay when
somebody clicks something or whatever.

30
00:01:52.703 --> 00:01:54.576
And it seems very unpredictable.

31
00:01:54.576 --> 00:01:59.338
And that's because we can't really predict
or control when the JavaScript engine is

32
00:01:59.338 --> 00:02:02.792
gonna say, you've put out too
many bags of trash at the curb.

33
00:02:02.792 --> 00:02:06.409
I gotta come by and pick them all up and
I gotta collect all the garbage.

34
00:02:06.409 --> 00:02:07.740
We don't really control that.

35
00:02:07.740 --> 00:02:11.057
We're not suppose to control it,
but we don't control it.

36
00:02:11.057 --> 00:02:16.057
And yet, it is actually
an important factor that plays into

37
00:02:16.057 --> 00:02:20.762
the real experienced performance
that our users have.

38
00:02:20.762 --> 00:02:23.978
It may not end up showing
up in your test week, but

39
00:02:23.978 --> 00:02:29.482
real users will experience the effects of
us being lazy about garbage collection.

40
00:02:29.482 --> 00:02:33.887
So as a little bit of a detour here,
I wanted us to spend just a brief

41
00:02:33.887 --> 00:02:37.904
moment talking about minimizing
our garbage collection.

42
00:02:37.904 --> 00:02:40.140
And there's a technique for doing this.

43
00:02:40.140 --> 00:02:43.802
Obviously, if there's a way for
you to say, I don't need an array here,

44
00:02:43.802 --> 00:02:46.600
I could return something else,
just don't do the array.

45
00:02:46.600 --> 00:02:50.631
But the way we wrote our algorithm, we
kinda based it on the ability to like make

46
00:02:50.631 --> 00:02:54.069
arrays and return partial arrays and
concatenate them together.

47
00:02:54.069 --> 00:02:57.423
The algorithm kind of just
assumes all of these arrays, so

48
00:02:57.423 --> 00:03:00.169
it would be difficult to
avoid returning them.

49
00:03:00.169 --> 00:03:04.199
But there is a technique that we can
use to cut down drastically on just

50
00:03:04.199 --> 00:03:05.946
how many arrays that we need.

51
00:03:05.946 --> 00:03:09.309
And that technique is referred
to as an object pool.

52
00:03:11.405 --> 00:03:16.196
So put simply an object pool
front loads the creation of

53
00:03:16.196 --> 00:03:19.738
some number of instances of some value,

54
00:03:19.738 --> 00:03:24.338
usually a data structure like an array or
an object.

55
00:03:24.338 --> 00:03:30.205
It could be an instance of a class or
something but, If I know for example,

56
00:03:30.205 --> 00:03:36.565
that at any given time, I only need 25
of this thing, whatever this thing is.

57
00:03:36.565 --> 00:03:42.135
I could pre-create all 25 of them and
then, not that much unlike

58
00:03:42.135 --> 00:03:47.405
a library when I need one of them,
I could check one of them out,

59
00:03:47.405 --> 00:03:52.397
use it, reset it, and
then check it back into the library.

60
00:03:52.397 --> 00:03:56.917
And if 25 was the most that
I ever need concurrently,

61
00:03:56.917 --> 00:04:01.832
then I might end up putting back and
checking out hundreds or

62
00:04:01.832 --> 00:04:04.600
thousands or millions of times.

63
00:04:04.600 --> 00:04:07.976
But notice that I only ever created 25.

64
00:04:07.976 --> 00:04:11.812
If they were arrays in our case,
I only ever created 25 arrays.

65
00:04:11.812 --> 00:04:15.333
Even though at any given time,
I might have 13 checked out and

66
00:04:15.333 --> 00:04:18.595
then put a few back and
then get 12 more and put a few back.

67
00:04:18.595 --> 00:04:23.544
But I never go above 25,
then I've drastically reduced it

68
00:04:23.544 --> 00:04:28.019
from the thousands or
millions of arrays down to 25.

69
00:04:28.019 --> 00:04:29.162
Does that make sense?

70
00:04:29.162 --> 00:04:33.661
&gt;&gt; This is analogous to the process that
databases use for repeated queries and

71
00:04:33.661 --> 00:04:37.105
essentially caching correct
that we know that there's so

72
00:04:37.105 --> 00:04:38.877
much information in the set.

73
00:04:38.877 --> 00:04:43.651
We know what our maximum overhead is,
so we materialize that,

74
00:04:43.651 --> 00:04:47.180
which makes it readily available for
lookup.

75
00:04:47.180 --> 00:04:51.769
Instead of sitting somewhere, we have to
compute it, we compute it, dump it, and

76
00:04:51.769 --> 00:04:52.897
make it available.

77
00:04:52.897 --> 00:04:56.333
Is that the same loop that
we're describing here?

78
00:04:56.333 --> 00:05:01.932
&gt;&gt; Possibly, I will say that I'm
certainly not sufficiently well-versed

79
00:05:01.932 --> 00:05:07.271
in the internals of database
implementation to speak to what they do.

80
00:05:07.271 --> 00:05:12.220
But I can say that as
a correlated relationship, yes,

81
00:05:12.220 --> 00:05:18.794
the concept of resource pooling as
a broader version of object pooling.

82
00:05:18.794 --> 00:05:23.196
Resource pooling is extremely common when
we're dealing with fixed, finite, and

83
00:05:23.196 --> 00:05:26.544
expensive resources,
like network interface connections and

84
00:05:26.544 --> 00:05:29.030
database connections,
and things like that.

85
00:05:29.030 --> 00:05:32.990
It is extremely common that you might
create three or four database connection

86
00:05:32.990 --> 00:05:36.172
in a pool because you know,
you don't really need all of them.

87
00:05:36.172 --> 00:05:38.431
But you don't wanna create and
throw away and create and

88
00:05:38.431 --> 00:05:41.580
throw away that's very expensive,
performance-wise and memory-wise.

89
00:05:41.580 --> 00:05:46.668
So, yes, the broader idea of
resource pooling is very common.

90
00:05:46.668 --> 00:05:49.321
Whether you're dealing
with garbage collection or

91
00:05:49.321 --> 00:05:53.482
not, you just simply don't wanna create
and destroy a whole bunch of memory cuz it

92
00:05:53.482 --> 00:05:56.880
fragments your memory and
it wastes CPU performance and so forth.

93
00:05:56.880 --> 00:06:02.930
So this use, reset, recycle loop, that's
the conceptual thing to think about.

94
00:06:02.930 --> 00:06:09.351
Now another extension to this pool is,
sometimes you don't know how many unique.

95
00:06:09.351 --> 00:06:15.150
So you might start the pool at five and
then just let it run, and what happens

96
00:06:15.150 --> 00:06:21.064
if you try to check out the sixth array
when you started out your pool at five?

97
00:06:21.064 --> 00:06:26.393
You might think, I guess that fails or
there's no more array.

98
00:06:26.393 --> 00:06:28.773
Well, the general response is,

99
00:06:28.773 --> 00:06:33.707
you just grow the size of the pool
according to how many you asked for.

100
00:06:33.707 --> 00:06:37.770
So if I started it at five,
I could grow the size to six and

101
00:06:37.770 --> 00:06:39.508
give you the sixth one.

102
00:06:39.508 --> 00:06:43.791
But we have this general
principle of what's

103
00:06:43.791 --> 00:06:47.746
called exponential backoff in timings.

104
00:06:47.746 --> 00:06:52.655
And we use this a very similar principle
here, which is to say, if I asked for

105
00:06:52.655 --> 00:06:57.590
the sixth one, you start out with five and
I've now asked for the sixth one.

106
00:06:57.590 --> 00:07:01.052
There's a pretty good chance, I'm probably
gonna ask for a seventh, eighth, and

107
00:07:01.052 --> 00:07:01.553
ninth one.

108
00:07:01.553 --> 00:07:05.387
So rather than just give you six and
then grow it to seven and then grow

109
00:07:05.387 --> 00:07:09.853
at eight and grow, how about if just every
time you ask for one more than I have.

110
00:07:09.853 --> 00:07:12.196
I'll just double the size of my pool.

111
00:07:12.196 --> 00:07:16.249
So I'll go from 5 to 10, because there's
statistically a pretty good chance that

112
00:07:16.249 --> 00:07:18.348
you're gonna want 7, 8, 9, and 10.

113
00:07:18.348 --> 00:07:22.706
And then if you ask for the 11th one,
I'll just add another 10 to the pool,

114
00:07:22.706 --> 00:07:27.064
10 that are out and another 10 that
creates a total pool size would have been

115
00:07:27.064 --> 00:07:29.600
20 or total capacity would have been 20.

116
00:07:29.600 --> 00:07:31.709
And I'll give you the 11th one.

117
00:07:31.709 --> 00:07:35.598
And then after you go past the 20th one,
I'll make the capacity 40 and

118
00:07:35.598 --> 00:07:36.927
give you the 21st one.

119
00:07:36.927 --> 00:07:41.734
So that's the general idea of a data
structure like this object pool,

120
00:07:41.734 --> 00:07:44.909
is that you just ask it to
give you a new value and

121
00:07:44.909 --> 00:07:47.856
you don't really worry about it too much.

122
00:07:47.856 --> 00:07:52.108
But you do want to sometimes
kind of fine tune the pool size.

123
00:07:52.108 --> 00:07:55.870
If you started out too small,
you end up with too many doublings.

124
00:07:55.870 --> 00:07:59.812
If you started out too large,
you end up with wasted arrays or

125
00:07:59.812 --> 00:08:02.298
wasted instances that you never use.

126
00:08:02.298 --> 00:08:03.410
Do you follow me?

127
00:08:03.410 --> 00:08:06.227
So you could just use the object
pool right out of the box.

128
00:08:06.227 --> 00:08:08.942
However, it's been implemented and
not worry about it.

129
00:08:08.942 --> 00:08:12.585
It'll take care of its own doubling and
giving you new values.

130
00:08:12.585 --> 00:08:16.954
But in the end, if you're gonna go to
the trouble of using an object pool.

131
00:08:16.954 --> 00:08:21.311
You'd probably eventually wanna try to
fine tune it down to a number closer to

132
00:08:21.311 --> 00:08:22.730
what you probably need.

133
00:08:22.730 --> 00:08:25.945
Because there's no real
reason to let it double and

134
00:08:25.945 --> 00:08:28.500
have to pay that penalty in the runtime.

135
00:08:28.500 --> 00:08:33.362
If you know up front, I need 23,
just go ahead and set it to like 23 or

136
00:08:33.362 --> 00:08:35.322
25 and then you're good.

137
00:08:35.322 --> 00:08:37.117
You follow where I'm coming from?

138
00:08:37.117 --> 00:08:41.917
If you know that you need 10,000,
I might not set it to 10,000,

139
00:08:41.917 --> 00:08:44.993
cuz that's an awful lot
of upfront allocation.

140
00:08:44.993 --> 00:08:49.757
I might let that grow as my application
goes, cuz maybe I need 10,000,

141
00:08:49.757 --> 00:08:53.438
but maybe only 1% of the time
do I ever need 10,000.

142
00:08:53.438 --> 00:08:57.545
So that one might be a case
where I'd set it to like 500 and

143
00:08:57.545 --> 00:09:03.315
let it grow itself to those bigger numbers
in the rare cases where we really need is.

144
00:09:03.315 --> 00:09:07.431
There's a lot of little fine tuning and
subjective judgment that you make and

145
00:09:07.431 --> 00:09:08.824
you wanna benchmark, but

146
00:09:08.824 --> 00:09:12.385
that's the general concept of
an object pool as a data structure.

147
00:09:12.385 --> 00:09:15.221
So how does that apply to our code?

148
00:09:15.221 --> 00:09:19.925
This is going to be a little bit
more intrusive on our coding style,

149
00:09:19.925 --> 00:09:25.385
it's a little bit annoying to work with,
but we get this big payoff in terms of

150
00:09:25.385 --> 00:09:31.441
how many fewer objects we're just throwing
down at the curb to be garbage collected.

151
00:09:31.441 --> 00:09:34.265
Far less chances that we're
gonna have animations or

152
00:09:34.265 --> 00:09:37.662
other things that become janky
because of garbage collection.

153
00:09:37.662 --> 00:09:40.471
So we'll switch back
over to our code editor.

154
00:09:40.471 --> 00:09:43.904
And we are now on
the option three branch or

155
00:09:43.904 --> 00:09:49.411
we are now finished with option two,
that's the starting point.

156
00:09:49.411 --> 00:09:54.379
But you'll notice in the option three
branch, I've included a library that does

157
00:09:54.379 --> 00:09:57.910
an object pool for
us rather than us implementing our own.

158
00:09:57.910 --> 00:10:00.320
That library I happen to have authored.

159
00:10:00.320 --> 00:10:07.593
I wrote this like seven or eight years
ago, it's called deePool, D-E-E-P-O-O-L.

160
00:10:07.593 --> 00:10:12.755
So it's just in there in the option three
branch, you can switch to option three and

161
00:10:12.755 --> 00:10:16.768
grab it and copy it out if you want,
get it off of the GitHub repo.

162
00:10:16.768 --> 00:10:19.974
However you wanna grab that, or

163
00:10:19.974 --> 00:10:25.327
you can get it off of
NPM again D-E-E-P-O-O-L.

164
00:10:25.327 --> 00:10:32.105
So deePool is my attempt at writing
the most stripped down least feature rich,

165
00:10:32.105 --> 00:10:37.669
but most performant object pool
that I could possibly imagine.

166
00:10:37.669 --> 00:10:42.486
And I spent a considerable amount
of effort tuning and benchmarking

167
00:10:42.486 --> 00:10:48.162
the performance, but big disclaimer here,
I'm not a performance engineer.

168
00:10:48.162 --> 00:10:52.322
I'm not one of those ones who went and
looked at the internal guts of VA aid and

169
00:10:52.322 --> 00:10:54.992
like tried to figure out
all the nuanced quirks.

170
00:10:54.992 --> 00:10:59.080
I just did my best to take out
all the frills and give a very,

171
00:10:59.080 --> 00:11:02.345
very stripped down version
of an object pool.

172
00:11:02.345 --> 00:11:07.178
It uses a very simple Round Robin strategy
to prevent the memory from getting over

173
00:11:07.178 --> 00:11:11.170
clustered and it Round Robins
through an array and all that stuff.

174
00:11:11.170 --> 00:11:12.970
All of those details are in that tool.

175
00:11:12.970 --> 00:11:16.480
You can completely ignore
this library from here on.

176
00:11:16.480 --> 00:11:20.098
I'm not trying to sell anybody on using
it, but I wanted us to have an object pool

177
00:11:20.098 --> 00:11:22.977
to use, so I pulled out this
whole project that I've written.

178
00:11:22.977 --> 00:11:27.006
So how are we gonna use deePool.

179
00:11:27.006 --> 00:11:34.514
If you've gone and gotten it and
you have it, you can just import it.

180
00:11:34.514 --> 00:11:41.039
So we're gonna import deePool and

181
00:11:41.039 --> 00:11:47.789
I put it in the external directory.

