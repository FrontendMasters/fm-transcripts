WEBVTT

1
00:00:00.247 --> 00:00:04.458
Let's switch over to our code editor.

2
00:00:04.458 --> 00:00:09.223
And in our dialer module, you'll note
that we have the three functions that

3
00:00:09.223 --> 00:00:12.807
correspond to the three tasks
that I just described you.

4
00:00:12.807 --> 00:00:16.855
And our to do comments they're quite
helpfully explained to us what we need to

5
00:00:16.855 --> 00:00:17.676
be returning.

6
00:00:17.676 --> 00:00:22.536
The reachableKeys function
is called by the app.

7
00:00:22.536 --> 00:00:23.340
You with me?

8
00:00:23.340 --> 00:00:24.847
It's called by the app.

9
00:00:24.847 --> 00:00:27.814
And when we go to run our app,

10
00:00:27.814 --> 00:00:33.640
we're going to need it to be
able to respond correctly.

11
00:00:33.640 --> 00:00:37.701
Because in our app, when you hover
over a key, the app uses the return

12
00:00:37.701 --> 00:00:41.919
from reachableKeys to highlight
the possible places that we can jump.

13
00:00:41.919 --> 00:00:43.865
So it's just a little usability thing.

14
00:00:43.865 --> 00:00:47.378
So reachableKeys is not
just an internal utility,

15
00:00:47.378 --> 00:00:50.903
it's one of our public API
methods used by the app.

16
00:00:50.903 --> 00:00:54.654
We'll look at the app here
in just a moment, okay?

17
00:00:54.654 --> 00:00:59.177
We also want to implement the count Paths,
that's their counter.

18
00:00:59.177 --> 00:01:04.060
And you can probably guess that this
is where we're gonna have some pretty

19
00:01:04.060 --> 00:01:07.928
deep and moderately complex
recursion going on, right?

20
00:01:07.928 --> 00:01:11.602
Because there's a lot of paths and a lot
of backtracking that immediately evokes

21
00:01:11.602 --> 00:01:14.746
the idea that we're probably gonna
want to be doing some recursion.

22
00:01:14.746 --> 00:01:18.211
And then we have our listing out
of our acyclic paths, and again,

23
00:01:18.211 --> 00:01:21.500
we're probably gonna end up
using some recursion to do that.

24
00:01:21.500 --> 00:01:26.482
Lots to tackle, we're gonna do it one
by one so don't feel too intimidated.

25
00:01:26.482 --> 00:01:29.937
Let's just start with the reachableKeys.

26
00:01:29.937 --> 00:01:34.815
The first thing that we want to
do is start with some basic data

27
00:01:34.815 --> 00:01:39.034
structure that's going to
allow us to build off of.

28
00:01:39.034 --> 00:01:42.279
It may not be the data structure
that we finish with, and in fact,

29
00:01:42.279 --> 00:01:43.580
it definitely won't be.

30
00:01:43.580 --> 00:01:45.570
But let's just pick a place to start.

31
00:01:45.570 --> 00:01:49.737
It's putting a stake in the sand and
saying, this is what I can start with.

32
00:01:49.737 --> 00:01:54.867
And I want to just describe what
I think is the most basic and

33
00:01:54.867 --> 00:01:58.331
obvious of possible data structures.

34
00:01:58.331 --> 00:02:02.657
Which is that I want to represent my

35
00:02:02.657 --> 00:02:07.589
dialpad as a two-dimensional array.

36
00:02:15.821 --> 00:02:20.680
I'm gonna leave spaces here for
those empty ones and

37
00:02:20.680 --> 00:02:27.205
put the zero in its location, just so
it's obvious what's going on.

38
00:02:31.033 --> 00:02:34.693
Dialpad is my starting data structure.

39
00:02:42.099 --> 00:02:47.781
And the purpose of reachableKeys is given
any specific input startingDigit, any

40
00:02:47.781 --> 00:02:53.313
one of these, return me an array of all
the possible places that I could move to.

41
00:02:53.313 --> 00:02:56.893
The reachableKeys from that location.

42
00:03:01.666 --> 00:03:04.239
So let's dive in.

43
00:03:04.239 --> 00:03:08.661
I do want to declare a thing
which I'll call nearbyKeys,

44
00:03:08.661 --> 00:03:11.800
this is my array that I'm gonna return.

45
00:03:13.457 --> 00:03:19.620
And I will fill it in with any keys
that I can discover that I'm able to.

46
00:03:22.080 --> 00:03:26.841
If you think about our dial pad,
I'm gonna go back to the slides for

47
00:03:26.841 --> 00:03:30.770
a moment, so
we can get some conceptual backing here.

48
00:03:32.445 --> 00:03:37.690
If you think about our dial pad, the
coordinate system of our dial pad is not

49
00:03:37.690 --> 00:03:43.370
that unlike the coordinate system we
initially started with on our chessboard.

50
00:03:43.370 --> 00:03:47.170
Unlike our chessboard, we don't have any
diagonals going on here, which is nice.

51
00:03:47.170 --> 00:03:50.045
But we do have this sort of horizontal and

52
00:03:50.045 --> 00:03:55.544
vertical movement by coordinates that
was very similar to the horizontal and

53
00:03:55.544 --> 00:03:59.955
vertical movement that we made
on the chessboard initially.

54
00:03:59.955 --> 00:04:03.634
And you'll notice that if I start on 1 and

55
00:04:03.634 --> 00:04:08.154
I go over to 6,
then I increased my row index by 1,

56
00:04:08.154 --> 00:04:12.796
from 0 to 1, and
I increased my column index by 2.

57
00:04:15.202 --> 00:04:17.581
I went from column 0 to column 2.

58
00:04:17.581 --> 00:04:21.392
So we went from the coordinate 0,
0 to the coordinate 1, 2.

59
00:04:23.673 --> 00:04:26.249
And notice that if I
were going from 1 to 8,

60
00:04:26.249 --> 00:04:30.426
it would be going from the coordinate 0,
0 to the coordinate 2, 1,

61
00:04:30.426 --> 00:04:33.303
that increased the row by 2 and
the column by 1.

62
00:04:33.303 --> 00:04:36.344
You might start to see a pattern here.

63
00:04:36.344 --> 00:04:39.622
Similar to how on the diagonals
the coordinates change,

64
00:04:39.622 --> 00:04:42.297
both by one the row and
the column index by one.

65
00:04:42.297 --> 00:04:47.844
Here we have a bit of asymmetry, which is
that in any given move, we always change

66
00:04:47.844 --> 00:04:53.496
one of the two coordinates by two and we
always change the other coordinate by one.

67
00:04:53.496 --> 00:04:57.390
That is, we never do a 1, 1 move,
and we never do a 2, 2 move.

68
00:04:57.390 --> 00:05:03.752
It's always 1, 2, 2, 1, negative 1,
2, negative 1, negative 2, etc.

69
00:05:03.752 --> 00:05:05.428
Everybody follow that?

70
00:05:05.428 --> 00:05:08.433
We're always changing by one
of the coordinates by one and

71
00:05:08.433 --> 00:05:09.976
the other coordinate by two.

72
00:05:11.874 --> 00:05:14.170
So we can just simply exploit that.

73
00:05:14.170 --> 00:05:16.910
Matter of fact,
we can just simply brute force this.

74
00:05:16.910 --> 00:05:20.749
I can start,
if I was given the starting key of one,

75
00:05:20.749 --> 00:05:26.374
I can try all combinations of increasing
my row and or my column index by 1 or

76
00:05:26.374 --> 00:05:30.868
2 respectively, and
check to see if there's a key there.

77
00:05:30.868 --> 00:05:34.910
And if there is,
put it in the array and if not, don't.

78
00:05:34.910 --> 00:05:37.341
So, I can just brute force and
answer to this.

79
00:05:37.341 --> 00:05:41.704
I don't even need something super clever,
we can just simply start with any

80
00:05:41.704 --> 00:05:44.975
index and try all the possible
coordinate connections,

81
00:05:44.975 --> 00:05:46.829
and see if there are keys there.

82
00:05:46.829 --> 00:05:48.822
That's what we're gonna do.

83
00:05:48.822 --> 00:05:51.392
Just plain old brute force.

84
00:05:51.392 --> 00:05:53.957
That makes sense to everyone?

85
00:05:53.957 --> 00:05:54.536
Okay.

86
00:05:56.866 --> 00:05:58.246
So let's do it.

87
00:05:58.246 --> 00:06:04.001
What we're going to do is
start with an outer loop, And

88
00:06:04.001 --> 00:06:08.030
I'm gonna do something some
of you are familiar with,

89
00:06:08.030 --> 00:06:12.772
I'm going to do a destructuring
here of the dialpad.entries.

90
00:06:14.435 --> 00:06:19.031
So this is giving me an iterator that
returns me tuples with the key and

91
00:06:19.031 --> 00:06:21.972
the value in it,
instead of only the value.

92
00:06:21.972 --> 00:06:26.671
You've seen for of loops before,
but here I'm gonna get the key and

93
00:06:26.671 --> 00:06:29.818
the value so
it's gonna be row index and row.

94
00:06:29.818 --> 00:06:34.143
Entries will return this back,
these pairings of the index and

95
00:06:34.143 --> 00:06:36.765
the value, the row index and the row.

96
00:06:36.765 --> 00:06:40.757
And we're just simply destructuring
those into individual variables here so

97
00:06:40.757 --> 00:06:43.607
that I don't have to have
a temporary variable, okay?

98
00:06:45.975 --> 00:06:51.309
Now what I need to do is ask if the
startingDigit is in this particular row,

99
00:06:51.309 --> 00:06:56.138
whatever iteration we're on,
is the startingDigit in this row?

100
00:06:56.138 --> 00:07:02.022
So we could say, is the colIdx,

101
00:07:05.557 --> 00:07:09.646
Because we know row is gonna
be an array of numbers,

102
00:07:09.646 --> 00:07:14.874
if you give me 2 on the first row
that I look at, we definitely will

103
00:07:14.874 --> 00:07:20.221
have 2 there and its index will be 1,
zero based index will be 1.

104
00:07:20.221 --> 00:07:21.418
Everybody follow that?

105
00:07:21.418 --> 00:07:22.899
Did I lose anyone?

106
00:07:25.315 --> 00:07:30.629
If startingDigit is 2, the first
iteration is gonna look at this row and

107
00:07:30.629 --> 00:07:34.898
it's gonna say what is the index
of startingDigit 2, and

108
00:07:34.898 --> 00:07:38.488
it's gonna find it here and
the index will be 1.

109
00:07:38.488 --> 00:07:41.240
So here, we'll have rowIdx 0, colIdx 1.

110
00:07:41.240 --> 00:07:44.700
So how do I know if I
found it in this row?

111
00:07:44.700 --> 00:07:48.511
Well, if colIdx is not equal to -1,
if it's 0 or above,

112
00:07:48.511 --> 00:07:50.810
then we know that we found it.

113
00:07:50.810 --> 00:07:53.850
Otherwise, this is not the row
that we care about, so move on.

114
00:07:53.850 --> 00:07:55.530
So we'll just wrap an if statement here.

115
00:07:55.530 --> 00:08:00.212
We'll say, if colIdx is not equal to -1.

116
00:08:02.404 --> 00:08:08.792
I prefer the not equal to -1 to
the greater than or equal to 0 approach,

117
00:08:08.792 --> 00:08:14.886
other people see it differently,
however you feel stylistically.

118
00:08:16.559 --> 00:08:18.111
Okay, so we know we have found it.

119
00:08:18.111 --> 00:08:23.292
We have the rowIdx and the colIdx of
the thing that we've been asked for.

120
00:08:23.292 --> 00:08:25.902
Everybody follow that?

121
00:08:25.902 --> 00:08:29.737
By the way, we could have done that
with math, but we were gonna need to

122
00:08:29.737 --> 00:08:33.448
loop anyway, so it just made sense
to use a loop to get to this point.

123
00:08:33.448 --> 00:08:34.773
But we could've done it.

124
00:08:34.773 --> 00:08:37.689
Strictly speaking, we could've
done it with some modulus math,

125
00:08:37.689 --> 00:08:41.210
but, We needed a loop anyway.

126
00:08:41.210 --> 00:08:48.028
Okay, so let's look at the column.

127
00:08:48.028 --> 00:08:48.767
I'm sorry.

128
00:08:48.767 --> 00:08:53.593
Let's look at the possible
moves that could happen from

129
00:08:53.593 --> 00:08:57.195
the perspective of changing a row index.

130
00:08:57.195 --> 00:09:04.431
A row index could increase by 1 or
increase by 2.

131
00:09:04.431 --> 00:09:09.968
Or a row index could decrease by 1 or
it could decrease by 2.

132
00:09:09.968 --> 00:09:11.977
Follow that?

133
00:09:11.977 --> 00:09:15.670
That doesn't mean that it's on the board,
but it's just theoretically that's what

134
00:09:15.670 --> 00:09:17.859
could happen to a row index
if we were making a move.

135
00:09:17.859 --> 00:09:22.402
It could either increase by 1, increase
by 2, decrease by 1, or decrease by 2.

136
00:09:22.402 --> 00:09:23.208
I'm gonna write that out.

137
00:09:23.208 --> 00:09:27.045
I'm gonna say, let's do a for loop for

138
00:09:27.045 --> 00:09:31.929
all of those moves,
let's do let rowMove of, and

139
00:09:31.929 --> 00:09:37.301
I'm gonna list those out,
-2, -1, 1, and 2.

140
00:09:40.184 --> 00:09:44.353
So rowMove is like my delta, right?

141
00:09:46.477 --> 00:09:51.021
Same thing with my columns, my columns
can change by plus 1, plus 2, minus 1, or

142
00:09:51.021 --> 00:09:51.607
minus 2.

143
00:09:51.607 --> 00:10:00.329
Let's write the same kind of for
loop there.

144
00:10:09.931 --> 00:10:16.201
All right, First of all, we know that a 1,

145
00:10:16.201 --> 00:10:21.149
1, a 1 negative 1, a 2, 2, a 2 negative 2.

146
00:10:21.149 --> 00:10:22.921
Those are all invalid moves, right?

147
00:10:22.921 --> 00:10:24.699
Those are not night moves.

148
00:10:24.699 --> 00:10:28.598
So of the 16 possible moves
that are happening here,

149
00:10:28.598 --> 00:10:31.922
not all of them are actually
even night moves.

150
00:10:31.922 --> 00:10:33.498
That make sense?

151
00:10:33.498 --> 00:10:37.035
So we're gonna need an if statement to
filter out the things that are not even

152
00:10:37.035 --> 00:10:37.982
valid night moves.

153
00:10:37.982 --> 00:10:43.440
And that can be, we're gonna take
the absolute value of the rowMove

154
00:10:43.440 --> 00:10:47.963
has to be not equal to
the absolute value of the colMove.

155
00:10:47.963 --> 00:10:50.447
That is one of them is got to
have an absolute value of one and

156
00:10:50.447 --> 00:10:52.756
the other one's got to have
an absolute value of two.

157
00:10:56.899 --> 00:11:00.033
I know we're getting
super deeply nested here.

158
00:11:00.033 --> 00:11:03.375
Part of the reason why we're doing this by
the way, just to give you a little hint.

159
00:11:03.375 --> 00:11:07.425
I want this code to
feel super ugly because

160
00:11:07.425 --> 00:11:12.062
it's gonna motivate what
we do in a little bit.

161
00:11:25.244 --> 00:11:32.001
Okay, s we definitely have valid night
moves, but they may not be on the board.

162
00:11:32.001 --> 00:11:36.455
We need to make sure that we're only
looking at moves that are actually within

163
00:11:36.455 --> 00:11:38.041
the geometry of the board.

164
00:11:38.041 --> 00:11:43.532
So we need to have several conditions
be true to make it a valid move.

165
00:11:43.532 --> 00:11:47.861
We need to say that our
current rowIdx plus rowMove

166
00:11:47.861 --> 00:11:51.066
has to be greater than or equal to 0.

167
00:11:51.066 --> 00:11:55.113
In other words,
we have to stay on the board.

168
00:11:55.113 --> 00:12:01.459
And rowIdx plus a rowMove has to be,
how many rows do we have?

169
00:12:01.459 --> 00:12:06.755
We have row index three,
we have four rows, right?

170
00:12:06.755 --> 00:12:10.719
So that has be less than or
equal to 3 on my rowIdx.

171
00:12:10.719 --> 00:12:16.864
And my colIdx plus my colMove has
to be greater than or equal to 0.

172
00:12:16.864 --> 00:12:22.299
And my colIdx plus my colMove
has to be less than or equal to,

173
00:12:22.299 --> 00:12:27.430
there's only three columns so
less than or equal to 2.

174
00:12:27.430 --> 00:12:32.537
And one final little wrinkle,
is that we don't wanna end up

175
00:12:32.537 --> 00:12:37.967
in the bottom left or
bottom right which aren't keys, right?

176
00:12:37.967 --> 00:12:44.097
So the last little part
of this condition is

177
00:12:44.097 --> 00:12:49.888
that the dialpad of rowIdx + rowMove and

178
00:12:49.888 --> 00:12:55.698
colIdx + colMove cannot be undefined.

179
00:12:58.587 --> 00:13:01.294
Because it would be undefined for
the two bottom empty corners,

180
00:13:01.294 --> 00:13:03.012
otherwise there would be a value there.

181
00:13:09.723 --> 00:13:14.908
All the way down, deeply nested in here,
if we get all the way down to this point,

182
00:13:14.908 --> 00:13:19.561
we know for sure we have found a valid
move that we could make from whatever

183
00:13:19.561 --> 00:13:23.798
the startingDigit was,
because we brute forced our way to that.

184
00:13:23.798 --> 00:13:29.415
Does everybody see why
that would guarantee

185
00:13:29.415 --> 00:13:33.981
us one of our possible valid moves?

186
00:13:35.066 --> 00:13:41.619
So now I need to simply
stick these into nearbyKeys.

187
00:13:45.218 --> 00:13:51.772
Whatever it is at that position

188
00:13:51.772 --> 00:13:58.333
is what goes into nearbyKeys.

189
00:14:03.171 --> 00:14:05.183
I'm gonna make this
slightly more readable.

190
00:14:05.183 --> 00:14:07.524
I'm moving on to another line.

191
00:14:11.184 --> 00:14:19.466
I don't know if there's a way to make this
line slightly more readable but, I'll try.

192
00:14:27.190 --> 00:14:31.075
All right,
there is our reachableKeys function.

193
00:14:36.978 --> 00:14:39.782
Everybody with me on that solution?

194
00:14:39.782 --> 00:14:44.361
It's ugly, it's brute force,
but it gets the job done.

195
00:14:47.104 --> 00:14:50.140
And we wanna test that
it gets the job done.

196
00:14:50.140 --> 00:14:52.690
And we have our nights dialer here,

197
00:14:52.690 --> 00:14:58.217
we haven't done any of the counting stuff
yet, but if we hover over the keys,

198
00:14:58.217 --> 00:15:02.315
we should see the nearby keys
being highlighted in blue.

199
00:15:02.315 --> 00:15:08.074
If your implementation of that
reachable keys function did not work,

200
00:15:08.074 --> 00:15:12.380
don't fret because I'm about to delete it,
okay?

201
00:15:14.420 --> 00:15:18.757
I'm just like one of those mean teachers
back in school that makes you do work and

202
00:15:18.757 --> 00:15:21.360
then shows you that it wasn't even for
a grade.

