WEBVTT

1
00:00:00.352 --> 00:00:04.444
Okay, so find candidates.

2
00:00:04.444 --> 00:00:06.307
Hopefully we feel pretty good about that.

3
00:00:08.927 --> 00:00:12.318
Let's look at the check function, which
was full of our previous implementation.

4
00:00:12.318 --> 00:00:18.169
And I'm gonna do one of my favorite
things to do in all of programming.

5
00:00:18.169 --> 00:00:20.878
Which is to delete it all.

6
00:00:20.878 --> 00:00:24.570
[LAUGH] I don't know about you, but
I just love that visceral feeling.

7
00:00:24.570 --> 00:00:26.783
We're gonna write more code in its place,
but

8
00:00:26.783 --> 00:00:29.572
I love that visceral feeling
of getting to get rid of code.

9
00:00:29.572 --> 00:00:34.502
So, the check function, this is the public
API method that's called on our module,

10
00:00:34.502 --> 00:00:38.008
and in the check function,
we need to get those candidates.

11
00:00:38.008 --> 00:00:40.528
So this is gonna be where we call,

12
00:00:40.528 --> 00:00:45.761
we're gonna say candidates =
findCandidates for that input word.

13
00:00:45.761 --> 00:00:50.497
And then we want to call another
function which is going to be

14
00:00:50.497 --> 00:00:54.774
our recursive function which
I will call spellWord.

15
00:00:54.774 --> 00:00:58.861
And we need to pass in the candidate for

16
00:00:58.861 --> 00:01:03.733
it to use for this word,
and the word itself.

17
00:01:03.733 --> 00:01:07.253
You might wonder why we're
passing in candidates,

18
00:01:07.253 --> 00:01:11.181
as opposed to simply referencing
it as an outer variable.

19
00:01:11.181 --> 00:01:13.026
It's simply to be a little
bit more appropriate.

20
00:01:13.026 --> 00:01:17.384
We're not gonna modify candidates ever so
we don't have any mutation of that value.

21
00:01:17.384 --> 00:01:21.639
But it is better to pass that along than
it is to reference an outer variable,

22
00:01:21.639 --> 00:01:25.827
just again in terms of trying to reduce
the surface area of places where bugs

23
00:01:25.827 --> 00:01:26.507
can occur.

24
00:01:28.876 --> 00:01:35.058
So, what's left for us to do then
is to write the spellWord function.

25
00:01:35.058 --> 00:01:37.535
We know that it takes the candidates.

26
00:01:42.594 --> 00:01:48.278
And the inputWord and
you remember that its job is to return,

27
00:01:48.278 --> 00:01:53.741
the worst case scenario if it
didn't find anything its job

28
00:01:53.741 --> 00:02:01.233
is to return the empty array to indicate
that we were not able to find something.

29
00:02:01.233 --> 00:02:07.898
So, how do we know that we
definitely can't find something?

30
00:02:07.898 --> 00:02:11.758
This is called the base condition when
you do recursive programming you may have

31
00:02:11.758 --> 00:02:13.785
heard that term base conditions before.

32
00:02:13.785 --> 00:02:17.615
Turns out in this case it's pretty
straightforward to know what our base

33
00:02:17.615 --> 00:02:18.446
condition is.

34
00:02:18.446 --> 00:02:21.730
So rather than just having kind of like
a fall through return we can actually put

35
00:02:21.730 --> 00:02:23.371
this in an affirmative if statement and

36
00:02:23.371 --> 00:02:25.230
make the base condition
a bit more obvious.

37
00:02:27.710 --> 00:02:28.767
Characters left,

38
00:02:28.767 --> 00:02:32.796
we're gonna do a different thing
rather than passing in the inputWord,

39
00:02:32.796 --> 00:02:37.301
we're just gonna have a counter down for
how many characters that we need to get.

40
00:02:37.301 --> 00:02:38.713
So we'll explain that
here in just a minute.

41
00:02:45.038 --> 00:02:47.097
Sorry, charsleft is the string,

42
00:02:47.097 --> 00:02:51.431
the length of it is the count I keep
getting myself confused right there.

43
00:02:51.431 --> 00:02:55.552
So, charsleft is what I wanna call it and
not length,

44
00:02:55.552 --> 00:02:59.137
sorry I got confused between left and
length.

45
00:02:59.137 --> 00:03:03.204
Okay, so if the count of
the characters left or the inputWord,

46
00:03:03.204 --> 00:03:06.449
whatever parameter name
you wanted to give that.

47
00:03:06.449 --> 00:03:11.084
If the count of those is down to 0,
then we're definitely sure that we've got

48
00:03:11.084 --> 00:03:16.091
nothing else to do for this iteration, and
so we can simply return that empty array.

49
00:03:24.239 --> 00:03:27.664
If there's more characters left,
then there's more work to do.

50
00:03:27.664 --> 00:03:30.381
Now we said that we want to prefer or

51
00:03:30.381 --> 00:03:34.807
prioritize to letter matches
over one letter matches.

52
00:03:34.807 --> 00:03:38.592
Which is part of the reason why we
returned them at the beginning of that

53
00:03:38.592 --> 00:03:40.978
candidates list, we want to prefer those.

54
00:03:40.978 --> 00:03:45.935
And so what we're going to do is check for
those first, so

55
00:03:45.935 --> 00:03:50.701
we're gonna say check for
two letters symbols first.

56
00:03:54.516 --> 00:03:58.975
That can only happen if
the charsleft.length that is how many

57
00:03:58.975 --> 00:04:01.812
characters we have left is at least 2.

58
00:04:07.076 --> 00:04:12.890
So let's get the two left
most of those characters so

59
00:04:12.890 --> 00:04:17.789
we'll say charsletf.slice (0,2).

60
00:04:17.789 --> 00:04:21.322
That gets our next two
characters off of our string.

61
00:04:21.322 --> 00:04:25.780
And let's just for convenience,
put the rest of them into another

62
00:04:25.780 --> 00:04:29.932
variable called rest,
are we slice starting at position 2?

63
00:04:36.238 --> 00:04:37.348
I got a typo here, charsleft.

64
00:04:41.747 --> 00:04:45.199
[COUGH] So, if.

65
00:04:48.395 --> 00:04:55.344
The candidates includes the two
that we just pulled off,

66
00:04:55.344 --> 00:05:01.150
in other words,
is that one of our candidates?

67
00:05:01.150 --> 00:05:02.607
If we had made it into a combined set,
then it would just be a.has call.

68
00:05:02.607 --> 00:05:07.795
But here we, again,
just to imply the ordering,

69
00:05:07.795 --> 00:05:10.520
we kept it as arrays here.

70
00:05:10.520 --> 00:05:15.164
And then we can say if this is
similar to our previous condition,

71
00:05:15.164 --> 00:05:20.417
we need to know whether or not we have
any more work to do after this match.

72
00:05:20.417 --> 00:05:28.102
This was a match, so we could put a little
comment here we could say, found a match.

73
00:05:28.102 --> 00:05:33.238
All right, so if we did find
the match now we need to know,

74
00:05:33.238 --> 00:05:37.680
do we need to do more work or are we done?

75
00:05:37.680 --> 00:05:41.775
Remember how we asked that same question
before and the way we asked it was,

76
00:05:41.775 --> 00:05:43.726
is there anything left in the rest?

77
00:05:43.726 --> 00:05:48.783
So we could say, if rest.length &gt; 0
that means there's more work to do.

78
00:06:01.684 --> 00:06:03.053
So far making sense?

79
00:06:03.053 --> 00:06:07.217
Give me some thumbs up,
thumbs down, how are we feeling?

80
00:06:07.217 --> 00:06:08.576
Or at least thumbs sideways.

81
00:06:08.576 --> 00:06:10.093
Give me thumbs sideways.

82
00:06:10.093 --> 00:06:12.963
Okay, I'll take it,
I'II take the thumbs sideways.

83
00:06:12.963 --> 00:06:16.040
I gotta stop and
go back if I get a thumbs down, but

84
00:06:16.040 --> 00:06:19.357
thumbs sideways we'll keep
trudging along [LAUGH].

85
00:06:19.357 --> 00:06:24.369
Okay, so if the length &gt; 0,
I think in the checked

86
00:06:24.369 --> 00:06:30.794
in version of the repo I think I
have not equal to the empty string.

87
00:06:30.794 --> 00:06:33.815
Either one of those checks is equivalent,
we're are saying is it,

88
00:06:33.815 --> 00:06:36.368
not the empty string so
I'll just leave it as the length.

89
00:06:36.368 --> 00:06:39.112
I think this one communicates
a little bit better.

90
00:06:39.112 --> 00:06:44.744
If the length &gt; 0, and then we'll say,
let's go ahead and make our recursive

91
00:06:44.744 --> 00:06:50.559
calls similar to what we did before,
we're gonna say, let result = spellWord.

92
00:06:50.559 --> 00:06:54.961
And we'll give it the candidates as is
whenever changing the candidates will give

93
00:06:54.961 --> 00:06:58.110
you the candidates as is and
will give it whatever is left.

94
00:06:58.110 --> 00:07:02.457
But what's left is rest
instead of charsleft.

95
00:07:25.460 --> 00:07:28.534
If, what comes back from this call.

96
00:07:35.969 --> 00:07:40.696
Is equal to what we were trying to match

97
00:07:40.696 --> 00:07:45.434
then we can simply return the result.

98
00:07:55.551 --> 00:08:00.293
So, there's join here is
joining an empty string.

99
00:08:00.293 --> 00:08:03.687
Is joining whatever we passed in.

100
00:08:09.137 --> 00:08:12.319
Careful, I think this should have been.

101
00:08:12.319 --> 00:08:14.424
We'll check this in just a moment.

102
00:08:14.424 --> 00:08:16.782
I might have a little bit of mistake here,
we'll check.

103
00:08:22.297 --> 00:08:27.839
What comes back if there's
no more work to do?

104
00:08:27.839 --> 00:08:31.412
That is this check fails
there's no more work to do,

105
00:08:31.412 --> 00:08:36.711
then we know that we simply need to return
an array with only the element that.

106
00:08:48.278 --> 00:08:52.382
Okay, so that takes care of looking for
our two character symbols and

107
00:08:52.382 --> 00:08:55.213
you'll notice that we
are recursing in here and

108
00:08:55.213 --> 00:08:58.425
we're recursing into the two
symbol options first.

109
00:08:58.425 --> 00:09:02.578
So we'll be looking at all of our two
symbol options all the way down first.

110
00:09:04.477 --> 00:09:08.822
As I'm thinking about this, I'm pretty
sure that I do have a slight mistake.

111
00:09:08.822 --> 00:09:12.973
Although, the end result is still working,
but I'll go ahead and

112
00:09:12.973 --> 00:09:17.065
call it out because I'm sure
somebody will eventually get this.

113
00:09:17.065 --> 00:09:21.355
I am checking to see if what comes
back from spellWord is equal to my

114
00:09:21.355 --> 00:09:22.370
current word.

115
00:09:22.370 --> 00:09:31.078
Which means that spellWord has to go then
do that work a second time at each level.

116
00:09:31.078 --> 00:09:35.320
So what I should have been doing
is checking to see if what

117
00:09:35.320 --> 00:09:39.307
comes back from spellWord is rest,
and returning.

118
00:09:46.076 --> 00:09:52.040
Returning to the ....result, like we did
in our first version of the solution,

119
00:09:52.040 --> 00:09:56.409
either of those is going to end
up producing correct answers.

120
00:09:56.409 --> 00:10:00.065
This one is gonna produce
a few less iterations.

121
00:10:00.065 --> 00:10:03.135
In our case,
it's not gonna be that big of a problem.

122
00:10:03.135 --> 00:10:06.303
So the other one is not
necessarily super wrong, but

123
00:10:06.303 --> 00:10:10.121
it is doing unnecessary work so
I just make this little change.

124
00:10:10.121 --> 00:10:13.662
So that's slightly different from
the code that you'll see in the repo.

125
00:10:16.772 --> 00:10:22.902
Okay, so now we wanna check for
the one that are symbols.

126
00:10:26.722 --> 00:10:29.750
And it's a very similar process.

127
00:10:29.750 --> 00:10:32.004
We only wanna do this if charsleft is.

128
00:10:36.421 --> 00:10:40.095
&gt;=1.
It always should be because if it was 0 we

129
00:10:40.095 --> 00:10:43.940
would have not even come into this branch.

130
00:10:43.940 --> 00:10:47.528
But this is just doubly
making sure to communicate.

131
00:10:47.528 --> 00:10:50.421
This is the one character symbols length.

132
00:10:50.421 --> 00:10:53.818
Technically that if
statements not necessary.

133
00:10:53.818 --> 00:10:57.924
Just trying to make code that
makes a little more sense here.

134
00:10:57.924 --> 00:11:04.441
So we're gonna do the same thing
with the one as we did with the two.

135
00:11:04.441 --> 00:11:06.430
Which is we'll let 1 = and

136
00:11:06.430 --> 00:11:12.065
we'll get the characters charsleft at
position 0 the leftmost character.

137
00:11:12.065 --> 00:11:17.378
We'll get the rest is = charsleft.slice.

138
00:11:19.636 --> 00:11:23.283
Quick poll, do you say chars,
cars, characters?

139
00:11:23.283 --> 00:11:26.220
What's the correct pronunciation?

140
00:11:26.220 --> 00:11:30.825
I guess chars sounds best to me,
but I think I always like to say

141
00:11:30.825 --> 00:11:35.267
chars as in characters, but
I think chars maybe is better.

142
00:11:35.267 --> 00:11:39.001
I don't know, anyway, if,
let me scroll this down.

143
00:11:39.001 --> 00:11:43.384
Candidates.includes (one).

144
00:11:43.384 --> 00:11:47.966
So is the thing that we've just sliced off
the single character one of our one letter

145
00:11:47.966 --> 00:11:50.596
candidates is it found
in the candidates list?

146
00:11:56.616 --> 00:12:03.225
We can do the not equals to this or
I again above I kinda like the &gt; 0.

147
00:12:03.225 --> 00:12:04.579
Either way you wanna do that check.

148
00:12:14.735 --> 00:12:18.012
I know how I got off track on the two
letter one, we'll go back and

149
00:12:18.012 --> 00:12:19.122
fix this in a moment.

150
00:12:19.122 --> 00:12:24.101
So, in the above one the way
that we did this was we said

151
00:12:24.101 --> 00:12:28.537
let result = spellWord and
we did candidates.

152
00:12:32.807 --> 00:12:36.606
Now I know how I got,
it was a copy paste here that got us off.

153
00:12:36.606 --> 00:12:40.079
Okay, so we can do let result and

154
00:12:40.079 --> 00:12:44.583
then we can say if result.join = chars,

155
00:12:44.583 --> 00:12:49.343
we wanted to say rest,
return in this case,

156
00:12:49.343 --> 00:12:55.283
we want to return one and
whatever came back in result.

157
00:13:00.568 --> 00:13:03.912
And if we didn't have any work left to do,
one second I'll get to the question.

158
00:13:03.912 --> 00:13:07.729
If we didn't have any work left to do,
then we would simply return one.

159
00:13:07.729 --> 00:13:11.917
So those two if blocks, if you compare
them, they should look exactly the same

160
00:13:11.917 --> 00:13:15.090
except one is doing it with
the two character candidates and

161
00:13:15.090 --> 00:13:17.900
one's doing it with the one
character candidates.

162
00:13:17.900 --> 00:13:19.817
But algorithmically they're
doing the same work.

163
00:13:19.817 --> 00:13:23.293
Basically the question was, did
candidates really need to be in an array?

164
00:13:23.293 --> 00:13:26.535
I mentioned earlier,
remember we had this discussion?

165
00:13:26.535 --> 00:13:30.168
What if we'd done these with
sets instead of with arrays?

166
00:13:30.168 --> 00:13:33.542
And I suggested to you that the choice for
the array,

167
00:13:33.542 --> 00:13:37.772
there were multiple factors that
I put into that choice, right?

168
00:13:37.772 --> 00:13:42.964
One of the reasons I put that into
that choice is that we want order,

169
00:13:42.964 --> 00:13:45.116
and a set implies no order.

170
00:13:45.116 --> 00:13:46.452
You with me?

171
00:13:46.452 --> 00:13:49.986
So if I were to have done this with sets.

172
00:13:49.986 --> 00:13:55.641
I would end up with two sets here, and
I could concatenate the two sets together,

173
00:13:55.641 --> 00:13:58.885
which requires iterating
over the two sets and

174
00:13:58.885 --> 00:14:02.147
then creating a new set
from their iteration.

175
00:14:02.147 --> 00:14:05.772
There's no set append
operator in JavaScript.

176
00:14:05.772 --> 00:14:09.199
You basically have to
drop down into arrays,

177
00:14:09.199 --> 00:14:14.347
combine the two arrays together and
then produce it back into a set.

178
00:14:14.347 --> 00:14:17.240
The way I'm using it is indeed as a set,

179
00:14:17.240 --> 00:14:21.821
I am not actually going through
the candidates list in order.

180
00:14:21.821 --> 00:14:26.120
So we don't technically need
the ordering to be preserved.

181
00:14:26.120 --> 00:14:30.139
But what I was trying to
suggest here was that,

182
00:14:30.139 --> 00:14:34.983
one of the factors for
me choosing an array over a set here

183
00:14:34.983 --> 00:14:39.542
was that I wanted to
communicate ordering matters.

184
00:14:39.542 --> 00:14:44.558
It is not the case that strictly speaking
the ordering in this array matters.

185
00:14:44.558 --> 00:14:48.038
But overall order does matter and
in that case,

186
00:14:48.038 --> 00:14:51.002
it is in fact the order of if statements.

187
00:14:51.002 --> 00:14:54.765
The way that we go through it it's kind of
if you're thinking about traversing a tree

188
00:14:54.765 --> 00:14:58.263
you go down the left branch versus the
right branch you are gonna get a different

189
00:14:58.263 --> 00:14:58.856
traversal.

190
00:14:58.856 --> 00:15:03.087
We're going down the two branch versus
the one branch that's gonna give us

191
00:15:03.087 --> 00:15:06.450
the ordering that we
want in our recursion.

192
00:15:06.450 --> 00:15:11.076
If I had made these as sets,
I think it communicates when somebody's

193
00:15:11.076 --> 00:15:16.206
reading fine candidates that ordering
doesn't matter to the candidates.

194
00:15:16.206 --> 00:15:19.712
And it would be harder to spot that
the if statements are what's applying

195
00:15:19.712 --> 00:15:20.467
the ordering.

196
00:15:20.467 --> 00:15:23.562
So that was one of the reasons
why I chose the array.

197
00:15:23.562 --> 00:15:28.135
The other reason I chose the array is
because I know that JavaScript cannot

198
00:15:28.135 --> 00:15:32.573
concatenate two sets together without
dropping it back into an array.

199
00:15:32.573 --> 00:15:37.677
Which is slightly more expensive, not
a big deal, but slightly more expensive.

200
00:15:37.677 --> 00:15:43.289
Whereas with these arrays, the ...array
concatenation is very highly optimized.

201
00:15:43.289 --> 00:15:46.560
So to be honest with you,
it's kind of 50, 50.

202
00:15:46.560 --> 00:15:51.323
It is not the case that have we chosen
sets that would have been wrong and

203
00:15:51.323 --> 00:15:57.006
if you had preferred sets here probably
would have gotten a perfectly fine answer.

204
00:15:57.006 --> 00:16:02.347
The final impact of all of this or
the final kind of swaying point for me,

205
00:16:02.347 --> 00:16:08.418
was the candidates is never more than
a half dozen, maybe a dozen entries total.

206
00:16:08.418 --> 00:16:10.374
For any word that you type in,

207
00:16:10.374 --> 00:16:16.070
which means that the array includes is
going to be just as fast as a set house.

208
00:16:16.070 --> 00:16:19.957
So we're not really losing any
performance by making this choice, and

209
00:16:19.957 --> 00:16:21.963
I felt it was a slightly better one but

210
00:16:21.963 --> 00:16:25.943
it's entirely reasonable that you
might have chosen to do it with sets.

211
00:16:25.943 --> 00:16:29.980
Hopefully that answers the question
more fully than I had answered before.

