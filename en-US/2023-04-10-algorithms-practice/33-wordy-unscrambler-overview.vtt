WEBVTT

1
00:00:00.000 --> 00:00:02.413
Okay, progressing right along,

2
00:00:02.413 --> 00:00:07.668
we're gonna turn our attention to
a somewhat different kind of a problem.

3
00:00:07.668 --> 00:00:13.292
I alluded to this previously, that we're
gonna turn our attention to words.

4
00:00:13.292 --> 00:00:18.259
And we're gonna talk about algorithmically
solving problems around words.

5
00:00:18.259 --> 00:00:21.005
So, this I call Wordy Unscrambler.

6
00:00:21.005 --> 00:00:25.998
I don't know if any of you have ever
played games like Wordscapes or

7
00:00:25.998 --> 00:00:30.544
these other games where you have
to mix and match letters, or

8
00:00:30.544 --> 00:00:33.859
reorder letters to spell different words.

9
00:00:33.859 --> 00:00:38.657
I used to play Wordscapes a whole bunch,
and I think I got to like level 2000 or

10
00:00:38.657 --> 00:00:42.206
something in Wordscapes and
I was like it's the same game.

11
00:00:42.206 --> 00:00:45.935
It's never getting harder or different or
more interesting, so I gave up.

12
00:00:45.935 --> 00:00:48.128
Anyways, I used to play
a lot of Wordscapes.

13
00:00:48.128 --> 00:00:51.285
And I also used to cheat at Wordscapes.

14
00:00:51.285 --> 00:00:55.419
There are websites out there where you can
give it a set of letters that can make

15
00:00:55.419 --> 00:00:55.927
a word and

16
00:00:55.927 --> 00:00:59.635
it'll tell you all the different
words that you could make for that.

17
00:00:59.635 --> 00:01:02.966
And so occasionally,
I would get stuck on a puzzle and

18
00:01:02.966 --> 00:01:06.606
I would go and use one of those
cheating websites for that.

19
00:01:06.606 --> 00:01:09.656
And that's what inspired
me to make a problem,

20
00:01:09.656 --> 00:01:14.615
because I wondered what would be the
algorithmic approach to trying to do this

21
00:01:14.615 --> 00:01:18.143
unscrambling of letters
into real dictionary words.

22
00:01:18.143 --> 00:01:23.268
So that's what we're gonna be
tackling in Wordy Unscrambler.

23
00:01:23.268 --> 00:01:29.524
So let's think about this, again,
we're gonna take this in little pieces.

24
00:01:29.524 --> 00:01:31.617
We're gonna try to get a working solution,
and

25
00:01:31.617 --> 00:01:34.559
then we're gonna try to optimize
it just like we've done before.

26
00:01:34.559 --> 00:01:38.164
This one is almost less
about the algorithm and

27
00:01:38.164 --> 00:01:42.331
almost more about picking
the right data structure.

28
00:01:42.331 --> 00:01:47.373
Because the choice of data structure is
gonna end up being the whole game here.

29
00:01:47.373 --> 00:01:50.062
So just as a forewarning
in some of the other ones,

30
00:01:50.062 --> 00:01:54.173
it was really more about what algorithm
is the right algorithm to pick here.

31
00:01:54.173 --> 00:01:55.423
It's the right data structure.

32
00:01:55.423 --> 00:01:56.294
In general,

33
00:01:56.294 --> 00:02:01.214
both of those are really critical
choices in any solution that you write.

34
00:02:01.214 --> 00:02:05.054
The data structure you pick and
the algorithm that you use, they have to

35
00:02:05.054 --> 00:02:09.605
be well-matched together, and they both
have to be well-aligned to the problem.

36
00:02:09.605 --> 00:02:14.558
And we've learned that lesson somewhat
painfully over the last several exercises.

37
00:02:14.558 --> 00:02:16.176
So the same will be true here but

38
00:02:16.176 --> 00:02:19.741
it's more heavily weighted on
choosing the right data structure.

39
00:02:19.741 --> 00:02:23.317
And that is a difficult task because
if you haven't seen a data structure,

40
00:02:23.317 --> 00:02:26.691
it's hard for you to even conceive
of what data structure to look for.

41
00:02:26.691 --> 00:02:28.502
It's hard to know what to Google for.

42
00:02:28.502 --> 00:02:33.416
So really, at least part of this is just
exposing you to a few other kinds of data

43
00:02:33.416 --> 00:02:37.289
structures that you maybe haven't
worked with very much, so

44
00:02:37.289 --> 00:02:40.870
that you have more words to use for
your Google searches.

45
00:02:40.870 --> 00:02:48.911
All right, so let's say that we had
the input letters, P, C, E, R, and A.

46
00:02:48.911 --> 00:02:53.916
And yes, that set of letters
is actually my little pun,

47
00:02:53.916 --> 00:02:58.600
because that's how old I am,
I grew up in the PC era,

48
00:02:58.600 --> 00:03:03.734
back before we had all these laptops and
stuff like that.

49
00:03:03.734 --> 00:03:08.590
I grew up where we built desktop
computers and put hard drives in them.

50
00:03:08.590 --> 00:03:11.739
And I was working in MS-DOS 3.0 like so.

51
00:03:11.739 --> 00:03:14.829
I go way, way back, so yes,
there's a little bit of a pun there.

52
00:03:14.829 --> 00:03:19.141
But if we just started with those letters,
P, C, E, R, and

53
00:03:19.141 --> 00:03:24.045
A, and we tried to come up with a list
of the possible matching words,

54
00:03:24.045 --> 00:03:29.573
we would need a dictionary, a list of
valid words to be able to match against.

55
00:03:29.573 --> 00:03:33.640
So if we started out with this dictionary,
and

56
00:03:33.640 --> 00:03:39.689
we said what words of this dictionary
could be made by unscrambling,

57
00:03:39.689 --> 00:03:43.359
reordering some or all of these letters?

58
00:03:43.359 --> 00:03:49.170
So, it's pretty straightforward that we
could run through and see that the word

59
00:03:49.170 --> 00:03:54.652
can is not able to be made by those
letters, but cap, cape, car, care can.

60
00:03:54.652 --> 00:03:58.711
Sorry, my check marks are misaligned here,
but

61
00:03:58.711 --> 00:04:02.477
you can visually shift
those check marks up.

62
00:04:02.477 --> 00:04:08.465
That we've got cap, cape,
car, care, and ear.

63
00:04:08.465 --> 00:04:09.776
Those are able to be made, but

64
00:04:09.776 --> 00:04:12.980
the other ones are not able to be made
because there's a missing letter.

65
00:04:12.980 --> 00:04:17.363
There's a missing N in our input,
that's why can,

66
00:04:17.363 --> 00:04:21.457
there's a missing L, and
there's a missing H.

67
00:04:21.457 --> 00:04:24.784
That's why those words can't be made.

68
00:04:24.784 --> 00:04:31.020
So, if we started to try to
formulate an algorithm for this,

69
00:04:31.020 --> 00:04:38.380
what is one of the first most important
questions that we wanna tackle?

70
00:04:38.380 --> 00:04:42.042
What occurs to you as a question that
we should ask about this problem?

71
00:04:42.042 --> 00:04:45.589
&gt;&gt; First one that occurs to me is
how am I checking against words?

72
00:04:45.589 --> 00:04:48.264
Do I have a big word bank
that I can go into and-

73
00:04:48.264 --> 00:04:49.203
&gt;&gt; What is my word list,

74
00:04:49.203 --> 00:04:51.932
what is my dictionary, and
where am I gonna get a dictionary?

75
00:04:51.932 --> 00:04:54.037
That's a very important question, right?

76
00:04:54.037 --> 00:04:59.234
Similar to, I don't know the periodic
table elements by heart like my kids do,

77
00:04:59.234 --> 00:05:01.808
so how do I get a list of periodic table?

78
00:05:01.808 --> 00:05:04.882
Fortunately, that was simply
a quick Google away and

79
00:05:04.882 --> 00:05:07.419
I found a JSON file with
the periodic table.

80
00:05:07.419 --> 00:05:14.160
I thought, surely I'll be able to
Google good English words dot JSON and

81
00:05:14.160 --> 00:05:21.025
out would spit a nice, well-formatted,
great-to-use dictionary.

82
00:05:21.025 --> 00:05:24.290
That turns out to be completely not true.

83
00:05:24.290 --> 00:05:26.394
It turns out that it's much,

84
00:05:26.394 --> 00:05:30.357
much harder than I would have
liked to get a dictionary.

85
00:05:30.357 --> 00:05:37.196
Because it turns out that that's not
actually a very well-defined concept.

86
00:05:37.196 --> 00:05:40.180
What is a dictionary word?

87
00:05:40.180 --> 00:05:42.656
Let me give you some examples.

88
00:05:42.656 --> 00:05:46.685
The word laser, L-A-S-E-R.

89
00:05:46.685 --> 00:05:50.672
Should that be a dictionary word or
should that not be a dictionary word?

90
00:05:50.672 --> 00:05:54.659
That's actually a subjective question
that not everybody agrees on.

91
00:05:54.659 --> 00:05:55.554
Why?

92
00:05:55.554 --> 00:05:59.043
You might not know this, but
laser is actually an acronym.

93
00:05:59.043 --> 00:06:02.624
And some people say that acronyms
don't belong in a dictionary.

94
00:06:02.624 --> 00:06:05.298
And other people say, well,
it's a commonly used word,

95
00:06:05.298 --> 00:06:06.839
so it belongs in the dictionary.

96
00:06:06.839 --> 00:06:08.667
There's a ton of subjectivity here.

97
00:06:08.667 --> 00:06:12.380
What about contractions like don't and
can't?

98
00:06:12.380 --> 00:06:14.823
Should those show up in a dictionary?

99
00:06:14.823 --> 00:06:20.005
What about plurals and other conjugations
of words like with ed or ing?

100
00:06:20.005 --> 00:06:23.891
Are those words that should be
separately in a dictionary, or

101
00:06:23.891 --> 00:06:28.318
should they just be applied or
assumed from the conjugation of a word?

102
00:06:28.318 --> 00:06:33.188
There's tons of subjectivity here on what
should or should not be a valid word?

103
00:06:33.188 --> 00:06:36.034
There's also offensive words, and

104
00:06:36.034 --> 00:06:40.639
how we even define what is
offensive is hugely subjective.

105
00:06:40.639 --> 00:06:44.098
And I don't even wanna wade into
the waters of what makes something

106
00:06:44.098 --> 00:06:48.608
an offensive word or not an offensive word
from all different angles, religious, and

107
00:06:48.608 --> 00:06:49.997
cultural, and so forth.

108
00:06:49.997 --> 00:06:54.390
So it turns out that it's not very easy to
just Google and say, give me the list of

109
00:06:54.390 --> 00:06:58.211
dictionary words and then I can
start running my algorithm against.

110
00:06:58.211 --> 00:07:00.897
You'll notice in the project
that I've provided for

111
00:07:00.897 --> 00:07:03.709
you that I provided you three
different dictionaries.

112
00:07:03.709 --> 00:07:07.304
One is a very tiny dictionary
that only has 80 words in it.

113
00:07:07.304 --> 00:07:12.397
One of them is somewhat longer
dictionary of about 2400 somewhat

114
00:07:12.397 --> 00:07:18.211
common English words that I actually
hand picked all 2400 of those words.

115
00:07:18.211 --> 00:07:23.140
And then there is a really giant
dictionary of 300,000 something words,

116
00:07:23.140 --> 00:07:27.575
and that is one that I just found
somewhere, and it has a ton of junk in it.

117
00:07:27.575 --> 00:07:31.660
It has all kinds of acronyms and
abbreviations.

118
00:07:31.660 --> 00:07:33.050
That's another one, abbreviations.

119
00:07:33.050 --> 00:07:35.820
Should abbreviations
show up in a dictionary?

120
00:07:35.820 --> 00:07:36.960
Another subjective question.

121
00:07:38.320 --> 00:07:42.683
So I provided you those three
different JSON files because it's

122
00:07:42.683 --> 00:07:46.155
going to be useful for
us in terms of our performance

123
00:07:46.155 --> 00:07:50.546
benchmarking to check against
different sizes of dictionary.

124
00:07:50.546 --> 00:07:54.401
So in our little application, we'll have
a selector where you'll pick the tiny

125
00:07:54.401 --> 00:07:57.918
dictionary, the regular dictionary,
or the very long dictionary, and

126
00:07:57.918 --> 00:07:59.975
we'll see different timings as a result.

127
00:07:59.975 --> 00:08:05.861
And importantly, the reason why that is in
our app, why we're doing that, is because

128
00:08:05.861 --> 00:08:11.601
there are different performances that we
actually need to concern ourselves with.

129
00:08:11.601 --> 00:08:15.898
That's not a monolithic idea,
like how fast things run because there's

130
00:08:15.898 --> 00:08:20.278
the startup performance, and
then there's the run-time performance.

131
00:08:20.278 --> 00:08:22.999
And we haven't really
talked about that much, but

132
00:08:22.999 --> 00:08:26.414
there is a tradeoff sometimes
between doing more work up front,

133
00:08:26.414 --> 00:08:30.610
things take a little bit longer to start
up, but then it runs faster as it goes.

134
00:08:30.610 --> 00:08:34.249
That's yet another tradeoff axis
that we have to be worried about.

135
00:08:34.249 --> 00:08:38.490
So when we load up a data structure
with our dictionary words, it might be

136
00:08:38.490 --> 00:08:43.297
a really fast data structure to build, but
it might be kinda slow to walk through.

137
00:08:43.297 --> 00:08:46.701
Or it might be kind of a slower
data structure to build, but

138
00:08:46.701 --> 00:08:49.003
really, really fast to walk through.

139
00:08:49.003 --> 00:08:53.179
So you can see the trade-offs, and
we'll have timings in our app for

140
00:08:53.179 --> 00:08:56.347
the loading of the dictionary
data structure and for

141
00:08:56.347 --> 00:08:59.382
the searching of
the dictionary data structure.

142
00:08:59.382 --> 00:09:04.433
Before we go any further,
there's actually one more

143
00:09:04.433 --> 00:09:10.844
critical question that we need to
ask to clarify the behavior here.

144
00:09:10.844 --> 00:09:14.335
And I wonder if it occurs to anyone
what that question should be.

145
00:09:14.335 --> 00:09:16.030
&gt;&gt; Can we use letters twice?

146
00:09:16.030 --> 00:09:17.967
&gt;&gt; That is the question.

147
00:09:17.967 --> 00:09:19.280
They got it.

148
00:09:19.280 --> 00:09:21.288
That's an important question here.

149
00:09:21.288 --> 00:09:24.508
What if I have a single P
in my input characters,

150
00:09:24.508 --> 00:09:29.271
am I allowed to do words that have
two P's in it, like the word appear?

151
00:09:29.271 --> 00:09:34.395
Would we want to allow appear to match
here because it's reusing the P and

152
00:09:34.395 --> 00:09:35.909
it's reusing the A?

153
00:09:36.920 --> 00:09:40.771
That's a question, and it turns out the
answer is no, we don't wanna allow that.

154
00:09:40.771 --> 00:09:45.260
[LAUGH] We do not want to allow
the duplication of letters.

155
00:09:45.260 --> 00:09:48.080
Now, that's a choice that we're making.

156
00:09:48.080 --> 00:09:53.160
You might think it seems like it would
be easier to allow the duplication.

157
00:09:53.160 --> 00:09:55.426
It's much harder to do this algorithm and

158
00:09:55.426 --> 00:09:58.740
to come up with a data structure
that allows the repetition.

159
00:09:58.740 --> 00:10:02.747
So we're going to choose not to
allow repetition of the inputs.

160
00:10:02.747 --> 00:10:06.270
If you want to have two P's,
then you have to put that in the input.

161
00:10:09.551 --> 00:10:12.783
But again, going back to the very
beginning of the workshop,

162
00:10:12.783 --> 00:10:16.826
asking these kinds of clarifying
questions, radically changes the kinds of

163
00:10:16.826 --> 00:10:20.270
data structures and algorithms
that we use to solve the problem.

164
00:10:20.270 --> 00:10:23.213
You don't wanna ask that
question after three or

165
00:10:23.213 --> 00:10:25.447
four weeks of implementation work.

166
00:10:25.447 --> 00:10:28.647
You wanna ask that question
during requirements gathering.

167
00:10:28.647 --> 00:10:32.784
I cannot emphasize enough,
that is not the product manager's job,

168
00:10:32.784 --> 00:10:35.436
that's the algorithmist's job, right?

169
00:10:35.436 --> 00:10:39.790
You have to make sure you understand
the entire constraints of the problem.

170
00:10:39.790 --> 00:10:43.732
You won't understand it, but you have to
understand as much of it as you can and

171
00:10:43.732 --> 00:10:45.662
ask as many of those questions early.

172
00:10:45.662 --> 00:10:51.156
So developing the habit of asking
those questions is a key skill.

