WEBVTT

1
00:00:00.228 --> 00:00:06.253
So let's start to think about an algorithm
that if our algorithm had been

2
00:00:06.253 --> 00:00:12.796
trying to simply go through the letters
and see if all the letters in our input.

3
00:00:12.796 --> 00:00:15.902
If we were going through a dictionary and
we were saying,

4
00:00:15.902 --> 00:00:18.567
what are all the letters
that I have in this word?

5
00:00:18.567 --> 00:00:21.612
And then just checking to see if those
letters are in our input letters,

6
00:00:21.612 --> 00:00:23.657
that would have been
the most naive algorithm.

7
00:00:23.657 --> 00:00:27.880
But that algorithm would not have taken
account, or it would have allowed

8
00:00:27.880 --> 00:00:32.528
replication of the letters, and so
it wouldn't solve our particular purpose.

9
00:00:32.528 --> 00:00:35.385
So let's think about a different
kind of an algorithm, and

10
00:00:35.385 --> 00:00:38.766
there's actually a variety of
different ways that you might do this.

11
00:00:38.766 --> 00:00:42.778
You might count the letters and see if the
count, and the letters is sufficient or

12
00:00:42.778 --> 00:00:43.371
whatever.

13
00:00:43.371 --> 00:00:47.238
There's a lot of little nuances here,
but let's take a step back and

14
00:00:47.238 --> 00:00:50.574
try to come up with a different
algorithmic way that might or

15
00:00:50.574 --> 00:00:53.997
might be great or really terrible for
solving this problem.

16
00:00:53.997 --> 00:00:58.579
So what we're going to think about is
what if we were to simply think about or

17
00:00:58.579 --> 00:01:02.604
consider all of the possible
permutations of the input letters?

18
00:01:02.604 --> 00:01:05.742
Permutation, that's
a fancy mathematic word.

19
00:01:05.742 --> 00:01:10.025
It simply means all of
the possible reorderings, okay?

20
00:01:10.025 --> 00:01:15.379
So it turns out that for a five letter
input, there are five factorial,

21
00:01:15.379 --> 00:01:19.143
there are 120 permutations
of those letters.

22
00:01:19.143 --> 00:01:22.750
And what's interesting about
the permutation space, first of all,

23
00:01:22.750 --> 00:01:25.130
I was able to fit it all on the screen,
and yes,

24
00:01:25.130 --> 00:01:28.081
this slide did take me 30
minutes to put all of those in.

25
00:01:28.081 --> 00:01:29.534
And it was kind of a nightmare.

26
00:01:29.534 --> 00:01:34.361
Anyway, nobody appreciates how much work
it takes to create slides these days.

27
00:01:34.361 --> 00:01:41.119
Anyway, so all 120 of those permutations,
and what's interesting about that is,

28
00:01:41.119 --> 00:01:45.137
for the words that we're
interested in looking at,

29
00:01:45.137 --> 00:01:49.427
it is guaranteed that our word
will appear in one of these

30
00:01:49.427 --> 00:01:54.030
permutations if it's possible
to do the reordering of it.

31
00:01:54.030 --> 00:01:57.335
That's, by nature of
permutating the input letters,

32
00:01:57.335 --> 00:02:00.721
we are getting all possible
reorderings of the letters.

33
00:02:00.721 --> 00:02:04.945
So the word that we care about has got
to appear somewhere in this list if it's

34
00:02:04.945 --> 00:02:07.592
possible to make that
word with these letters.

35
00:02:07.592 --> 00:02:09.659
And that takes care,
by the way, of our repetition.

36
00:02:09.659 --> 00:02:12.840
It just automatically says, you got
to have enough of those letters for

37
00:02:12.840 --> 00:02:13.481
it to show up.

38
00:02:13.481 --> 00:02:15.780
Not only do we know that it must show up,

39
00:02:15.780 --> 00:02:19.072
we know that it must show up
in the first few characters.

40
00:02:19.072 --> 00:02:21.937
So the word CAN never appears anywhere.

41
00:02:21.937 --> 00:02:26.689
But the word CAP does appear as
the first three letters of at least

42
00:02:26.689 --> 00:02:31.007
one of these permutations,
in fact, two of them, okay?

43
00:02:31.007 --> 00:02:37.632
And the word CAPE does show up in exactly
one word in the very first position.

44
00:02:37.632 --> 00:02:39.931
It also shows up in the last position, but

45
00:02:39.931 --> 00:02:43.559
it shows up in exactly one word
where it's in the first position.

46
00:02:43.559 --> 00:02:46.388
Same thing with CAR, same thing with CARE.

47
00:02:46.388 --> 00:02:49.564
The word CLAP is never gonna
show up in these permutations.

48
00:02:49.564 --> 00:02:51.277
The word EACH is never gonna show up.

49
00:02:51.277 --> 00:02:55.591
The word EAR is gonna show up
in one of these permutations,

50
00:02:55.591 --> 00:02:58.860
in fact,
two of them at the very beginning.

51
00:02:58.860 --> 00:03:03.408
So if we were to think about this as
an algorithm, we could say, well,

52
00:03:03.408 --> 00:03:06.338
I could take my inputs,
whatever those are,

53
00:03:06.338 --> 00:03:09.750
produce the entire space
of permutations of those.

54
00:03:09.750 --> 00:03:13.710
And then simply search through those
to see if the word that I'm looking

55
00:03:13.710 --> 00:03:17.936
out in the dictionary appears in the first
position of any permutation, and

56
00:03:17.936 --> 00:03:19.865
then I know whether it's a match.

57
00:03:19.865 --> 00:03:22.078
So that is a workable algorithm.

58
00:03:22.078 --> 00:03:24.395
Does the algorithm make sense?

59
00:03:24.395 --> 00:03:26.925
We'll talk about whether
it's a good algorithm, but

60
00:03:26.925 --> 00:03:28.857
it is an algorithm that we can implement.

61
00:03:28.857 --> 00:03:31.670
Does it make sense?

62
00:03:31.670 --> 00:03:38.813
Let's think about the problem space and
a little bit about its theoretical growth.

63
00:03:38.813 --> 00:03:43.153
One of the things about factorial
is that it grows pretty quickly.

64
00:03:43.153 --> 00:03:46.026
So five inputs is 120, not a big deal.

65
00:03:46.026 --> 00:03:48.765
Six inputs, 720, also not a big deal.

66
00:03:48.765 --> 00:03:53.818
Seven inputs, 5,040,
also not terribly bad.

67
00:03:53.818 --> 00:03:58.187
But these numbers really
start to grow very quickly.

68
00:03:58.187 --> 00:04:02.892
About 10 factorial is when that
number of possible permutations

69
00:04:02.892 --> 00:04:07.523
starts to really get out of hand,
and then, 11, 12, 13.

70
00:04:07.523 --> 00:04:13.467
By 15 factorial,
we're at 1.3 trillion permutations.

71
00:04:13.467 --> 00:04:16.392
Now, if you think about it,
you could write your app so

72
00:04:16.392 --> 00:04:20.790
that people were constrained in how many
possible characters they could type in.

73
00:04:20.790 --> 00:04:23.195
You could limit that to eight or nine, but

74
00:04:23.195 --> 00:04:27.686
how many words are there in the English
dictionary that are longer than that?

75
00:04:27.686 --> 00:04:32.864
It turns out that the average length of
words is somewhere between 11 and 12.

76
00:04:32.864 --> 00:04:38.048
So if you limited it to 12 for most
common words that people are gonna type,

77
00:04:38.048 --> 00:04:40.243
then you're at, what is that?

78
00:04:40.243 --> 00:04:43.402
479 million permutations of those words.

79
00:04:43.402 --> 00:04:47.560
That's pretty large and it's gonna take
up a pretty sizable chunk of memory,

80
00:04:47.560 --> 00:04:48.509
not impossible.

81
00:04:48.509 --> 00:04:54.286
1.3 trillion is probably approaching,
you're gonna run out of space.

82
00:04:54.286 --> 00:04:58.891
At least, on some users devices,
of course, this is context dependent, yes.

83
00:04:58.891 --> 00:05:03.547
&gt;&gt; Kyle, and as you're speaking of
these numbers, this is one user,

84
00:05:03.547 --> 00:05:05.357
one instance, correct?

85
00:05:05.357 --> 00:05:09.419
You would have to multiply this by
however many users are actually accessing

86
00:05:09.419 --> 00:05:10.188
this system.

87
00:05:10.188 --> 00:05:12.993
&gt;&gt; It's gonna be done client-side, so
I don't think it actually matters.

88
00:05:12.993 --> 00:05:14.193
We wouldn't be doing on the server.

89
00:05:14.193 --> 00:05:16.029
You'd be doing this only in the browser.

90
00:05:16.029 --> 00:05:18.367
But yes,
if you were doing this server-side,

91
00:05:18.367 --> 00:05:22.178
then you would have to have the system
resources to handle this for all users.

92
00:05:22.178 --> 00:05:25.605
Hopefully, you'd be able to share
some of that work between users, but

93
00:05:25.605 --> 00:05:26.795
probably not a lot of it.

94
00:05:26.795 --> 00:05:29.539
But yeah, we're talking about
a purely client-side solution,

95
00:05:29.539 --> 00:05:30.427
that is a good point.

96
00:05:30.427 --> 00:05:31.327
&gt;&gt; Thank you.

97
00:05:31.327 --> 00:05:36.851
&gt;&gt; All right, so, and by the way,
just some of my analysis on dictionaries.

98
00:05:36.851 --> 00:05:41.031
There are words that are 20,
25, 30 characters long.

99
00:05:41.031 --> 00:05:45.729
Those are pretty unusual words, but
there are quite a few words that we use in

100
00:05:45.729 --> 00:05:49.488
everyday English that are at
least 12 to 15 characters.

101
00:05:49.488 --> 00:05:54.064
So it is not completely unreasonable that
somebody might wanna use an app like this

102
00:05:54.064 --> 00:05:56.132
and type in 12 to 15 characters.

103
00:05:56.132 --> 00:06:01.002
These aren't crazy numbers, and
we're already getting into very,

104
00:06:01.002 --> 00:06:06.788
very huge numbers that are quite easily
beyond the bounds of practicality, okay?

105
00:06:06.788 --> 00:06:09.895
So 1.3 trillion is a pretty big and
scary number.

106
00:06:09.895 --> 00:06:14.582
And so we can already know in a similar
way to when we theoretically analyzed our

107
00:06:14.582 --> 00:06:17.075
exponential solution in nights dialer.

108
00:06:17.075 --> 00:06:21.234
We already know that even though this
is a workable solution in the small,

109
00:06:21.234 --> 00:06:23.193
it gets really bad, really fast.

110
00:06:23.193 --> 00:06:27.208
A couple of other things to point out
is that it's actually worse than that.

111
00:06:27.208 --> 00:06:31.856
[LAUGH] The worst part is that we actually
can't do that permutation once for

112
00:06:31.856 --> 00:06:33.272
those large numbers.

113
00:06:33.272 --> 00:06:37.172
Because there's no possible way
that we could put 1.3 trillion of

114
00:06:37.172 --> 00:06:41.812
those permutations in memory and keep all
of them in memory while we go through each

115
00:06:41.812 --> 00:06:46.138
of the dictionary words,
potentially 300,000 dictionary words.

116
00:06:46.138 --> 00:06:50.198
So if we're gonna do this,
we're actually going to have to

117
00:06:50.198 --> 00:06:54.763
redo the permutation as we go every
single word in the dictionary.

118
00:06:54.763 --> 00:07:00.073
We're not permuting the dictionary words,
but we are permuting the input.

119
00:07:00.073 --> 00:07:04.527
And because we can't keep all of that
in memory for those big numbers,

120
00:07:04.527 --> 00:07:08.620
we're gonna have to redo
the permutation for each single word.

121
00:07:08.620 --> 00:07:14.502
That means we'll have to redo that
permutation potentially 300,000 times.

122
00:07:14.502 --> 00:07:17.182
So it's actually worse than O of k.

123
00:07:17.182 --> 00:07:21.869
It's O of n times k factorial,

124
00:07:21.869 --> 00:07:27.106
which k being the length of input.

125
00:07:27.106 --> 00:07:30.419
The good news is it's
not actually that bad.

126
00:07:30.419 --> 00:07:35.018
Still pretty bad, but it's not that bad
because the permutation of the input,

127
00:07:35.018 --> 00:07:38.311
regardless of how many characters it is,
it can stop once

128
00:07:38.311 --> 00:07:42.929
we've reached the number of characters for
that particular dictionary word.

129
00:07:42.929 --> 00:07:46.471
So if we're looking at a dictionary
word that is three letters long,

130
00:07:46.471 --> 00:07:48.559
we don't need to do all 15 factorial.

131
00:07:48.559 --> 00:07:51.697
We only need to go 15 times 14 times 13,
and

132
00:07:51.697 --> 00:07:57.001
it will guarantee that that three-letter
word shows up in there if it's a match.

133
00:07:57.001 --> 00:07:59.888
So it's much better than 15 factorial.

134
00:07:59.888 --> 00:08:04.938
But 15 times 14 times 13 in the best
case for a three-letter word and

135
00:08:04.938 --> 00:08:08.292
in the worst case,
it's still 15 factorial.

136
00:08:08.292 --> 00:08:12.746
We can also abandon any of the partial
permutations as we're going opposively,

137
00:08:12.746 --> 00:08:15.967
where the next character that
we permute doesn't match.

138
00:08:15.967 --> 00:08:17.493
We can just bail out early.

139
00:08:17.493 --> 00:08:20.132
So there's a lot of
opportunities to bail out early.

140
00:08:20.132 --> 00:08:25.160
And I don't even know with those
complexities involved exactly

141
00:08:25.160 --> 00:08:30.105
what the growth of this algorithm is,
in a theoretical sense.

142
00:08:30.105 --> 00:08:31.925
I don't know what the O of n is.

143
00:08:31.925 --> 00:08:36.227
It's not quite n factorial, but
it's a lot worse than polynomial or

144
00:08:36.227 --> 00:08:39.578
exponential, so
it's somewhere in between those.

145
00:08:39.578 --> 00:08:42.673
And we'll see that play out when
we implemented our timings.

146
00:08:42.673 --> 00:08:46.831
It'll be another great illustration of,
wow, I added one more character and

147
00:08:46.831 --> 00:08:48.285
it went 11 times as long.

148
00:08:48.285 --> 00:08:50.746
It's a fun illustration.

149
00:08:50.746 --> 00:08:53.211
Okay, so
that's our algorithm to start with.

150
00:08:53.211 --> 00:08:58.647
Again, as the baseline, it's good to have
a working algorithm to compare against,

151
00:08:58.647 --> 00:09:03.264
even though we know that this is probably
not the one we are gonna ship to.

152
00:09:03.264 --> 00:09:06.345
It's definitely not the one we
are gonna ship to production.

