WEBVTT

1
00:00:00.000 --> 00:00:04.462
This is only part of the problem, but it
is at least useful that we've constructed

2
00:00:04.462 --> 00:00:08.034
ourselves a trie tree data structure and
just a few lines of code.

3
00:00:08.034 --> 00:00:11.673
We're now gonna need to
adjust our find words

4
00:00:11.673 --> 00:00:16.575
utility to know how to search
through such a data structure.

5
00:00:16.575 --> 00:00:21.348
So, what I'm going to do is

6
00:00:21.348 --> 00:00:26.123
delete, our find words and

7
00:00:26.123 --> 00:00:31.115
our check word, function.

8
00:00:31.115 --> 00:00:32.368
And we'll start over.

9
00:00:37.848 --> 00:00:41.215
So, remember, in the autocomplete sense,

10
00:00:41.215 --> 00:00:46.084
what we really need to do is be able
to get to a part of the tree to know

11
00:00:46.084 --> 00:00:50.977
if we've found a match or
have any other matches that we can go to.

12
00:00:50.977 --> 00:00:55.734
So we're gonna use a very similar concept,
which is we're going to,

13
00:00:55.734 --> 00:01:00.173
again recursively step down our
trie tree until we have convinced

14
00:01:00.173 --> 00:01:05.010
ourselves that there are no more
matches and we're gonna stop.

15
00:01:05.010 --> 00:01:09.395
But if along the way, if we find any notes
where we've got an is word marked then we

16
00:01:09.395 --> 00:01:13.820
know we found a matching word that's
our broad general overall strategy.

17
00:01:13.820 --> 00:01:17.240
So we're just gonna keep traverse for
every word in your dictionary.

18
00:01:17.240 --> 00:01:21.886
Keep traversing the dictionionary, sorry
for every one of our input permutation.

19
00:01:21.886 --> 00:01:25.710
We're gonna keep traversing our tree and
whatever words pop out,

20
00:01:25.710 --> 00:01:28.861
those will be the words that
we spit back as our result.

21
00:01:28.861 --> 00:01:31.041
That'll be our general strategy.

22
00:01:31.041 --> 00:01:35.831
Okay, the first thing that we need
to do is check if we're already,

23
00:01:35.831 --> 00:01:40.240
I'm sorry, we also need to change
the signature of find words.

24
00:01:40.240 --> 00:01:43.093
So we're gonna still pass in the input but

25
00:01:43.093 --> 00:01:48.474
I'm gonna this is another technique
where I'm not creating an inner function

26
00:01:48.474 --> 00:01:53.705
to do my recursion I'm just changing
the signature of the function itself.

27
00:01:53.705 --> 00:01:59.909
In this particular case I'm adding on two
extra parameters that have default values.

28
00:01:59.909 --> 00:02:04.317
So from the perspective of the place
in the code that calls find words,

29
00:02:04.317 --> 00:02:06.716
it still only passes in one argument.

30
00:02:06.716 --> 00:02:10.572
But I've got two other parameters
that have default values and so

31
00:02:10.572 --> 00:02:13.175
I'm able to do this
with the same function.

32
00:02:13.175 --> 00:02:17.938
I just wanted to illustrate to you
that we saw using a sub-function for

33
00:02:17.938 --> 00:02:19.401
our recursiveness.

34
00:02:19.401 --> 00:02:22.047
We've seen using separate functions and
now here

35
00:02:22.047 --> 00:02:25.959
we're just gonna adapt the existing
function to our needs as recursion.

36
00:02:25.959 --> 00:02:29.039
Each one of those is
techniques that you can use.

37
00:02:29.039 --> 00:02:34.116
All right, so the second parameter will be
the prefix starting at the empty string,

38
00:02:34.116 --> 00:02:35.775
as we probably saw before.

39
00:02:35.775 --> 00:02:39.125
And the current node that
we're at in the tree, again,

40
00:02:39.125 --> 00:02:42.204
this being like a node pointer,
a node reference.

41
00:02:42.204 --> 00:02:46.271
So, we'll start that,
we'll default that to the root dictionary.

42
00:02:49.436 --> 00:02:53.603
All right, so the question that we need
to ask is, are we already at a word?

43
00:02:53.603 --> 00:02:56.802
If so, we need to go ahead and
add that into our words list.

44
00:02:56.802 --> 00:03:00.095
So we can say, if node of is word,

45
00:03:00.095 --> 00:03:05.410
have we found a node that is
marked as the end of a word?

46
00:03:05.410 --> 00:03:10.334
Then we need to push in and
this is why we're passing down prefix.

47
00:03:10.334 --> 00:03:14.997
We don't want to go then have to walk
back up the tree to reconstruct our word

48
00:03:14.997 --> 00:03:18.929
remember we got to this node
letter by letter letter by letter.

49
00:03:18.929 --> 00:03:22.596
But we're pushing down with
each level of recursion,

50
00:03:22.596 --> 00:03:26.832
the progressively built up string
that represents that word.

51
00:03:26.832 --> 00:03:31.190
So at this iteration,
if we're at a node that says it's a word,

52
00:03:31.190 --> 00:03:35.003
the thing that's in prefix is
the full word as a string.

53
00:03:35.003 --> 00:03:38.358
We push that down,
that'll save us some work basically.

54
00:03:38.358 --> 00:03:42.847
So we can just push this Into
the list of words that we can return.

55
00:03:45.363 --> 00:03:50.621
And now we start to go through
whatever's left in the input characters.

56
00:03:50.621 --> 00:03:52.581
And again, kind of do our,

57
00:03:52.581 --> 00:03:57.200
basically our permutation
recursively down through our tree.

58
00:03:57.200 --> 00:04:02.098
So we're gonna say for( let i=

59
00:04:02.098 --> 00:04:07.729
0:i&lt; input.length, i++).

60
00:04:07.729 --> 00:04:10.259
Let's pull off the current
letter off of the input.

61
00:04:10.259 --> 00:04:13.451
This looks a lot like when we were pulling
the letter out of the remaining or

62
00:04:13.451 --> 00:04:15.162
whatever it's the same concept here.

63
00:04:15.162 --> 00:04:20.772
So I'll call this current letter.

64
00:04:20.772 --> 00:04:22.052
Input of AI.

65
00:04:22.052 --> 00:04:24.337
It'll start out with the first one and

66
00:04:24.337 --> 00:04:28.063
then the next iteration will take
the second one and so forth.

67
00:04:28.063 --> 00:04:32.961
The question we want to ask is if
the node that we're currently pointed out

68
00:04:32.961 --> 00:04:34.936
wherever that is in the tree,

69
00:04:34.936 --> 00:04:39.691
if the node that we're currently
pointed at has a node for this letter.

70
00:04:41.435 --> 00:04:44.891
If not, there's nothing else for
us to do in this part of the tree, right?

71
00:04:44.891 --> 00:04:47.581
But if it does have a node for
that, then we can keep going down.

72
00:04:47.581 --> 00:04:49.391
So this is the big if statement.

73
00:04:49.391 --> 00:04:50.481
We need to check that.

74
00:04:50.481 --> 00:04:54.968
Now, what we need to do is get the set of
the remaining letters and this is, again,

75
00:04:54.968 --> 00:04:56.736
similar to doing it with Slice.

76
00:04:56.736 --> 00:04:59.346
I'm just gonna show you a slightly
different style of doing it.

77
00:04:59.346 --> 00:05:04.150
We're gonna say that the remaining
letters Is an array.

78
00:05:04.150 --> 00:05:09.395
Rather than keeping that as a string,
I'm just going to keep it as an array.

79
00:05:09.395 --> 00:05:12.553
Arrays and strings are very similar,
but I'm going to keep it as an array.

80
00:05:12.553 --> 00:05:17.927
So I'm just gonna spread out
input.slice from 0 up to i,

81
00:05:17.927 --> 00:05:23.094
and then spread out input.slice
starting at i plus 1.

82
00:05:23.094 --> 00:05:26.496
That should look familiar because that's
the same way we kind of picked out

83
00:05:26.496 --> 00:05:28.765
a single one when we were
doing the permutations.

84
00:05:35.051 --> 00:05:39.910
So I'm going to call find words
with remaining letters as

85
00:05:39.910 --> 00:05:43.961
the input we just computed
remaining letters so

86
00:05:43.961 --> 00:05:48.534
I'm going to pass in remaining
letters as the input.

87
00:05:48.534 --> 00:05:53.357
The prefix is going to be
whatever the prefix was passed to

88
00:05:53.357 --> 00:05:56.784
us plus whatever our current letter is.

89
00:05:56.784 --> 00:06:00.573
So if it was the empty string now it's
the first letter if it was first letter,

90
00:06:00.573 --> 00:06:02.048
now it's the second letter.

91
00:06:02.048 --> 00:06:07.875
And the node is the node
of the current letter.

92
00:06:07.875 --> 00:06:14.278
So now we're walking down in the tree one,
one layer of node reference.

93
00:06:14.278 --> 00:06:18.623
&gt;&gt; So to make that more readable, I'll
put that on to sip A few separate lines.

94
00:06:22.146 --> 00:06:26.448
That's our recursive call and
what does that return back to us?

95
00:06:26.448 --> 00:06:33.038
It returns back an array of a partial
list of matching words potentially.

96
00:06:33.038 --> 00:06:36.452
It'll at least always pass
us back an empty array but

97
00:06:36.452 --> 00:06:41.118
it'll pass us back any words that it
found in its part of the sub-tree.

98
00:06:41.118 --> 00:06:42.635
You with me?

99
00:06:42.635 --> 00:06:47.721
So what we want to do is add
that into the words array.

100
00:06:47.721 --> 00:06:52.807
So I'm gonna do words.push,
and whatever this array is,

101
00:06:52.807 --> 00:06:57.195
I wanna spread that out as
arguments to the push call

102
00:06:59.226 --> 00:07:02.726
Might have returned best back an empty
array in which case it found none and

103
00:07:02.726 --> 00:07:06.067
we're just spreading out an empty
array and doing nothing pushed in.

104
00:07:06.067 --> 00:07:07.956
It might have found thousand words and

105
00:07:07.956 --> 00:07:11.787
we'll put all those in as well
&gt;&gt; They're a little confused on why you're

106
00:07:11.787 --> 00:07:13.404
used the symbol for is word.

107
00:07:13.404 --> 00:07:16.775
And where that could
possibly get mixed up?

108
00:07:16.775 --> 00:07:19.465
&gt;&gt; It could not get mixed up.

109
00:07:19.465 --> 00:07:24.895
I used the symbol because it's
the best semantic coding choice.

110
00:07:24.895 --> 00:07:26.935
This is a special property on the node.

111
00:07:26.935 --> 00:07:30.600
It's not a child property that
represents a letter and a word.

112
00:07:30.600 --> 00:07:34.138
I could have picked some
other thing like 1 2 3 but

113
00:07:34.138 --> 00:07:37.934
the best way of doing this
this is what symbols are for.

114
00:07:37.934 --> 00:07:43.107
Is to create special meta properties
special properties on objects so

115
00:07:43.107 --> 00:07:46.264
I'm just using the JavaScript feature for

116
00:07:46.264 --> 00:07:50.921
what it is for, which is to make
a special set apart character.

117
00:07:50.921 --> 00:07:55.740
But our particular usage of these
objects doesn't enumerate over

118
00:07:55.740 --> 00:07:59.620
the children in some way
where it could get confused.

119
00:07:59.620 --> 00:08:03.412
It just would make more confusing code
to pick some other arbitrary value for

120
00:08:03.412 --> 00:08:04.486
that property name.

121
00:08:15.393 --> 00:08:21.419
One last little thing to fix up
which is that at the end of this for

122
00:08:21.419 --> 00:08:28.730
loop It may not be obvious, but if
the inputs had had any repeat characters.

123
00:08:28.730 --> 00:08:33.770
In other words, if anybody had typed
in the p letter twice in the input,

124
00:08:33.770 --> 00:08:36.460
we would end up with duplicate words.

125
00:08:36.460 --> 00:08:41.114
Because we would have ended up
visiting that same part of the tree

126
00:08:41.114 --> 00:08:46.034
multiple times and got all of its
sub matched words multiple times.

127
00:08:46.034 --> 00:08:52.133
So our list might annoyingly to the user
end up with some duplicates in it.

128
00:08:52.133 --> 00:08:54.675
That's one of the implications
of this algorithm.

129
00:08:54.675 --> 00:09:00.925
And so to fix that up, I'm going to
use the JavaScript set data structure.

130
00:09:00.925 --> 00:09:04.235
I'm going to push our array into a set and
then pull it right back out as an array.

131
00:09:04.235 --> 00:09:07.222
So I'll do that.

132
00:09:07.222 --> 00:09:14.833
New set of words, and
then spread it back out into an array.

133
00:09:14.833 --> 00:09:19.391
So this is just making sure that our
list of words that we return is unique.

134
00:09:25.437 --> 00:09:30.772
Then what's checked in the code
repository, this is how the code looks,

135
00:09:30.772 --> 00:09:35.864
but I want to point out something,
that this is a recursive function.

136
00:09:35.864 --> 00:09:39.000
And because I'm not using
an adapter function,

137
00:09:39.000 --> 00:09:42.681
this function is the actual
one that recurses on itself.

138
00:09:42.681 --> 00:09:47.377
Which means that we are reuniquing
this at every single level before we

139
00:09:47.377 --> 00:09:48.498
return back up.

140
00:09:48.498 --> 00:09:51.452
Which is a whole lot of unnecessary work.

141
00:09:51.452 --> 00:09:56.222
So we really only wanna do
this line at the last level,

142
00:09:56.222 --> 00:10:00.569
right before we return
back to the calling code.

143
00:10:00.569 --> 00:10:04.466
After all the recursion is done, and we've
gotten a big old list of all the possible

144
00:10:04.466 --> 00:10:06.930
words with potentially
a bunch of duplicates in it.

145
00:10:06.930 --> 00:10:11.698
Then we just wannna do one last
deduplication if we had an adapter

146
00:10:11.698 --> 00:10:15.936
function that had called this
one we could put that line of

147
00:10:15.936 --> 00:10:20.731
code in the adapter function and
not in the recursive function.

148
00:10:20.731 --> 00:10:25.422
A way of approximating that same
thing is that we know that when

149
00:10:25.422 --> 00:10:30.383
node is back at the dictionary
level we know that's our last level

150
00:10:30.383 --> 00:10:33.648
out because we always start with the root.

151
00:10:33.648 --> 00:10:37.249
So we can just simply, this is just
a little, it's tiny performance,

152
00:10:37.249 --> 00:10:41.163
it probably wouldn't matter, but
if just as we're thinking about things.

153
00:10:41.163 --> 00:10:46.438
You can say if node is equal to the
dictionary, that let's us know that we're

154
00:10:46.438 --> 00:10:51.490
at the last level, so that's the only
place that we need to do duplicate.

155
00:10:56.029 --> 00:10:58.780
I see the question I'll get to it in
just a moment I just want to finish

156
00:10:58.780 --> 00:10:59.372
typing this.

157
00:11:15.379 --> 00:11:16.757
So what was the question?

158
00:11:16.757 --> 00:11:21.403
&gt;&gt; Can you please clarify why we have
what we have in remaining letters?

159
00:11:21.403 --> 00:11:24.223
&gt;&gt; Okay, so
we are going through the input,

160
00:11:24.223 --> 00:11:29.705
which is the set of characters that we
can basically permute on, let's whatever

161
00:11:29.705 --> 00:11:34.638
the user typed into the input box,
that's a array or string of letters.

162
00:11:34.638 --> 00:11:38.018
It starts out as a string and
we end up turning it into an array, but

163
00:11:38.018 --> 00:11:40.057
the way we use it, it doesn't matter.

164
00:11:40.057 --> 00:11:44.468
And so we're looking at that
set of those letters and

165
00:11:44.468 --> 00:11:49.690
we're saying I wanna take each
one of them as the next letter.

166
00:11:49.690 --> 00:11:50.925
But I want to do that one at a time.

167
00:11:50.925 --> 00:11:55.741
So I'm gonna start with again going
back to the PC, And A example,

168
00:11:55.741 --> 00:11:58.171
I would take P as my current letter.

169
00:11:58.171 --> 00:12:03.004
And then remaining letters is going to be

170
00:12:03.004 --> 00:12:07.410
the array that holds C, E,R and A and

171
00:12:07.410 --> 00:12:13.393
then on the next iteration
of line 43 Waterloo.

172
00:12:13.393 --> 00:12:17.103
Instead of taking P,
now I'm gonna look at C.

173
00:12:17.103 --> 00:12:21.143
So I wanna take C as the letter that
I'm fixed on as my next letter in

174
00:12:21.143 --> 00:12:22.179
a permutation.

175
00:12:22.179 --> 00:12:27.717
And I wanna pull out a remaining
set that has P, E, R, A.

176
00:12:27.717 --> 00:12:30.223
So remaining letters becomes those four.

177
00:12:30.223 --> 00:12:35.106
Then on the next loop of line 43,
I take the e as my next

178
00:12:35.106 --> 00:12:40.625
letter that I'm fixed on and
I get a set of remaining letters,

179
00:12:40.625 --> 00:12:44.462
that is P,C, R and A and
then I keep going.

180
00:12:44.462 --> 00:12:48.288
So it's just pulling out one letter
from the set of possible letters and

181
00:12:48.288 --> 00:12:50.661
getting everything else into another set.

182
00:12:50.661 --> 00:12:52.333
That's what we're doing.

183
00:12:52.333 --> 00:12:55.511
&gt;&gt; Can we just remove duplicate
letters from the input first

184
00:12:57.181 --> 00:13:00.205
&gt;&gt; So if we were to remove duplicate

185
00:13:00.205 --> 00:13:04.909
letters first,
then it would prevent us matching

186
00:13:04.909 --> 00:13:08.946
words like that we want the duplicates in.

187
00:13:08.946 --> 00:13:12.871
Remember that we constrained our problem,

188
00:13:12.871 --> 00:13:19.351
such that you have to pass in PP and
AA if you want the word appear to match.

189
00:13:19.351 --> 00:13:21.503
If we deduplicated that down,

190
00:13:21.503 --> 00:13:26.713
then you would get to the part where you
did A and P, and you'd be looking for

191
00:13:26.713 --> 00:13:31.460
another P in our algorithm, and
it wouldn't be in the input set,.

192
00:13:31.460 --> 00:13:36.205
So therefore we couldn't keep going
down that part of the sub-tree.

193
00:13:36.205 --> 00:13:39.413
So unfortunately,
we can't deduplicate the input letters,

194
00:13:39.413 --> 00:13:41.235
we have to deduplicate the output.

195
00:13:41.235 --> 00:13:44.737
This is just a side effect, if you will,

196
00:13:44.737 --> 00:13:48.651
of the algorithmic choice
that we made here.

197
00:13:48.651 --> 00:13:50.752
That may or may not end up actually,

198
00:13:50.752 --> 00:13:54.612
it won't end up being what we like
about this particular choice.

199
00:13:54.612 --> 00:13:58.742
But we are gonna see the performance
implications that we, little hint,

200
00:13:58.742 --> 00:14:01.548
this is gonna be significantly
more performant.

201
00:14:01.548 --> 00:14:05.775
Because this is a linear algorithm as
compared to the factorial algorithm

202
00:14:05.775 --> 00:14:07.078
that we tried before.

203
00:14:14.878 --> 00:14:19.294
All right, so let's go ahead and
switch on over to our browser.

204
00:14:19.294 --> 00:14:26.095
Now, with our new implementation in place,
pay attention now to these benchmarks for

205
00:14:26.095 --> 00:14:30.211
our data structure for
a 2400 word dictionary.

206
00:14:30.211 --> 00:14:34.499
We ended up creating 5705 nodes.

207
00:14:34.499 --> 00:14:38.304
Each node is only represented
by a single character, but

208
00:14:38.304 --> 00:14:43.139
we are creating about It looks like
they're just about a little more than

209
00:14:43.139 --> 00:14:47.836
twice about two and a half times as
many entries in the data structure.

210
00:14:47.836 --> 00:14:51.897
And for treating entries in a data
structure as units of memory we could sort

211
00:14:51.897 --> 00:14:56.218
of approximate that this is using a little
bit more memory to represent this data

212
00:14:56.218 --> 00:14:56.940
structure.

213
00:14:56.940 --> 00:15:00.027
Looking at the timing of it,
8.6 milliseconds,

214
00:15:00.027 --> 00:15:03.676
I don't remember exactly what
the short dictionary one was,

215
00:15:03.676 --> 00:15:08.256
but I do remember that this one ended
up at something like 20 milliseconds.

216
00:15:08.256 --> 00:15:10.188
So let's see how long it takes.

217
00:15:10.188 --> 00:15:16.500
So that took 210 milliseconds
to construct the tri-tree.

218
00:15:16.500 --> 00:15:20.761
That was about ten times as much time to
construct the try tree as it was to just

219
00:15:20.761 --> 00:15:21.700
copy the array.

220
00:15:22.930 --> 00:15:23.972
Notice also that for

221
00:15:23.972 --> 00:15:28.520
370,000 words, we've got a little bit
over a million entries in our trie tree.

222
00:15:29.830 --> 00:15:34.748
So, yes, we are using both more memory and
more startup time to construct our

223
00:15:34.748 --> 00:15:38.920
trie tree data structure as opposed
to simply copying the array.

224
00:15:41.060 --> 00:15:42.090
What's that gonna buy us?

225
00:15:42.090 --> 00:15:46.127
What's that,
we're paying the more upfront memory and

226
00:15:46.127 --> 00:15:49.070
more upfront performance not horribly,

227
00:15:49.070 --> 00:15:54.418
I mean 0.200 milliseconds is not
that terrible for the startup time.

228
00:15:54.418 --> 00:15:59.340
And a 370,000 word dictionary is
a pretty large dictionary to represent.

229
00:15:59.340 --> 00:16:03.212
So seems like 200 milliseconds is not
that big of a penalty to pay, but

230
00:16:03.212 --> 00:16:07.610
whatever that penalty is that we
are paying, what's that buying us?

231
00:16:07.610 --> 00:16:09.540
What's our runtime performance?

232
00:16:09.540 --> 00:16:10.910
Let's go back to our example.

233
00:16:10.910 --> 00:16:13.632
I'm gonna go back to the 2400 word
dictionary because I remember those

234
00:16:13.632 --> 00:16:15.080
timings a little better.

235
00:16:15.080 --> 00:16:21.571
And let's go back to our eight
character input America.

236
00:16:23.139 --> 00:16:25.585
That's 0.8 of a millisecond.

237
00:16:25.585 --> 00:16:29.485
Let's see what happens
when we go to nine inputs.

238
00:16:32.140 --> 00:16:35.104
It went down actually.

239
00:16:35.104 --> 00:16:40.200
What that doesn't mean is not
that it was faster in any way.

240
00:16:40.200 --> 00:16:44.960
What it means is that it didn't
grow by 5 or 6x like it did before.

241
00:16:44.960 --> 00:16:46.610
Let's try it again.

242
00:16:46.610 --> 00:16:48.610
Let's go to 10.

243
00:16:48.610 --> 00:16:51.060
Went to 1.4 milliseconds.

244
00:16:51.060 --> 00:16:56.411
When we did 10 before, you remember
it was like multiple seconds remember

245
00:16:56.411 --> 00:17:01.107
when I tried meaningful and
that one ended up at like 36 seconds.

246
00:17:01.107 --> 00:17:04.502
Let's try it 0.8 milliseconds.

247
00:17:04.502 --> 00:17:09.330
So now we have a linear search algorithm
and that's a huge payoff win for

248
00:17:09.330 --> 00:17:12.068
us compared to the relatively I would say

249
00:17:12.068 --> 00:17:16.600
small cost that we had to pay to
construct a better data structure.

250
00:17:18.490 --> 00:17:23.314
It's a very good chance that at this
point, you would look at the memory and

251
00:17:23.314 --> 00:17:28.142
performance profile of this solution
compared to relatively not that many

252
00:17:28.142 --> 00:17:30.980
lines of code that you needed to write.

253
00:17:30.980 --> 00:17:33.870
And you would say, I'm done ship it.

254
00:17:33.870 --> 00:17:35.560
Because this is a pretty good balance.

255
00:17:36.950 --> 00:17:39.240
It is taking up a bit more memory.

256
00:17:39.240 --> 00:17:43.052
It is still taking up a bit
more of our time upfront but

257
00:17:43.052 --> 00:17:47.733
it's ending up with a pretty good
overall balanced solution and

258
00:17:47.733 --> 00:17:52.520
nobody would fault you if this is
the one that you said ship it for.

259
00:17:54.280 --> 00:17:59.970
But as we transition into our next
set of discussions there are a few

260
00:17:59.970 --> 00:18:05.672
other things that I want us to
consider about our implementation.

