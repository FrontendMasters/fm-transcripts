WEBVTT

1
00:00:00.000 --> 00:00:03.807
As I mentioned at the top of
this exercise discussion,

2
00:00:03.807 --> 00:00:08.194
we have different data structures
that we can choose that end up

3
00:00:08.194 --> 00:00:11.942
leading us down different
algorithmic approaches.

4
00:00:11.942 --> 00:00:16.398
So sometimes, the real question is not,
can I come up with a different algorithm?

5
00:00:16.398 --> 00:00:19.940
It's actually, can I come up with
a better suited data structure?

6
00:00:19.940 --> 00:00:24.194
And a lot of times,
the data structure it's front loading,

7
00:00:24.194 --> 00:00:26.698
the processing work, if you will,

8
00:00:26.698 --> 00:00:31.717
to get the data into a format that will
make it easier for us to work with.

9
00:00:31.717 --> 00:00:38.044
So there are data structures that are
pretty well known in these words space.

10
00:00:38.044 --> 00:00:42.630
And I wanna talk about a choice of using
one of those because it seems like

11
00:00:42.630 --> 00:00:44.708
a pretty natural choice for us.

12
00:00:44.708 --> 00:00:49.307
The data structures referred to as a Trie,
a T-r-i-e.

13
00:00:49.307 --> 00:00:53.985
There's a little bit of debate as
to how to pronounce this because

14
00:00:53.985 --> 00:00:56.630
a lot of people pronounce it as Trie.

15
00:00:56.630 --> 00:01:00.798
Because if you say Trie TrIe,
that's really confusing.

16
00:01:00.798 --> 00:01:03.760
I think prefer to
pronounce it as Trie Trie.

17
00:01:03.760 --> 00:01:08.634
But the guy who invented this invented
the name of this from the middle

18
00:01:08.634 --> 00:01:13.858
characters of the word retrieval, so
he wanted it to be pronounced Trie.

19
00:01:13.858 --> 00:01:16.745
So if you're sticking to
the original definition,

20
00:01:16.745 --> 00:01:18.589
this is a gift versus gift thing.

21
00:01:18.589 --> 00:01:20.835
You're supposed to call it a Trie Trie,

22
00:01:20.835 --> 00:01:24.481
but most people like to say Trie Trie,
whichever one you prefer.

23
00:01:24.481 --> 00:01:26.252
What's the notion of this data structure?

24
00:01:26.252 --> 00:01:30.023
Well, obviously it is
a Trie data structure.

25
00:01:30.023 --> 00:01:32.887
You'll notice that we
start out with a node and

26
00:01:32.887 --> 00:01:36.418
the values inside of the node
are not the important part.

27
00:01:36.418 --> 00:01:40.047
It's the linkages between nodes
where the meaning is assigned.

28
00:01:40.047 --> 00:01:45.184
So, we're always start out with a root
node, and it has, in this case,

29
00:01:45.184 --> 00:01:50.170
for this dictionary, two children,
one labeled C and one labeled E.

30
00:01:50.170 --> 00:01:54.044
That represents of all
the words in our dictionary,

31
00:01:54.044 --> 00:01:58.981
what are the unique first characters
of all the words that we have.

32
00:01:58.981 --> 00:02:02.331
So we have CAN, CAP, CAPE,
CAR, CARE, and CLAP.

33
00:02:02.331 --> 00:02:05.231
Those are all C.

34
00:02:05.231 --> 00:02:09.341
And then EACH and EAR I'll start with E.

35
00:02:09.341 --> 00:02:10.843
That's why we have a C and an E.

36
00:02:10.843 --> 00:02:16.206
And you'll notice that it's
a recursively defined Trie so

37
00:02:16.206 --> 00:02:22.436
the same is true that underneath C we
have A and L because of our words.

38
00:02:22.436 --> 00:02:26.276
The only first two letters are C-A and
C-L.

39
00:02:26.276 --> 00:02:30.294
And then we have C-A-N, C-A-P, C-A-R.

40
00:02:30.294 --> 00:02:32.041
Those are the only first three letters.

41
00:02:32.041 --> 00:02:34.089
We have C-L-A-P.

42
00:02:34.089 --> 00:02:40.086
So, you can see how this dictionary
structure, or this Tri-Trie structure,

43
00:02:40.086 --> 00:02:44.937
is representing all of the words
in our Trie one letter at a time.

44
00:02:44.937 --> 00:02:48.150
Here's where this data structure
is most commonly cited.

45
00:02:48.150 --> 00:02:53.828
One of the most common usages of it is for
autocomplete.

46
00:02:53.828 --> 00:02:58.059
When somebody has typed in the first
several letters of something, like for

47
00:02:58.059 --> 00:03:02.488
example in a search box, and you wanna
return all of the possible suggestions to

48
00:03:02.488 --> 00:03:05.485
make to them,
you match on the first few characters.

49
00:03:05.485 --> 00:03:08.686
And hopefully visually you can
see why that would be useful.

50
00:03:08.686 --> 00:03:13.247
If you had a data structure like this
representing all the possible suggestions,

51
00:03:13.247 --> 00:03:17.279
and somebody typed in the first three
letters, you just simply go down,

52
00:03:17.279 --> 00:03:20.912
you follow what they've typed down
in the Trie one at a time down,

53
00:03:20.912 --> 00:03:24.147
and then the rest of the words
that can be made in that Trie,

54
00:03:24.147 --> 00:03:26.832
are the suggestions that
you give back to them.

55
00:03:26.832 --> 00:03:32.017
You don't need to consider the whole rest
of the structure, only that sub-Trie.

56
00:03:32.017 --> 00:03:35.855
So that's one of the most common
usages of this data structure.

57
00:03:35.855 --> 00:03:39.693
I'm showing it to you because
when I started this problem,

58
00:03:39.693 --> 00:03:44.834
I kind of had this intuition, maybe this
data structure would also be useful for

59
00:03:44.834 --> 00:03:49.078
our case, which is a little bit
like autocomplete but not quite.

60
00:03:49.078 --> 00:03:52.901
And so, it was an exploration
that I tried to see whether or

61
00:03:52.901 --> 00:03:54.938
not this Trie Trie would work.

62
00:03:54.938 --> 00:03:59.096
The only other thing to point out,
it should be obvious here, but

63
00:03:59.096 --> 00:04:03.327
the blue coding that I have there,
we have to indicate which ones of

64
00:04:03.327 --> 00:04:07.509
these nodes represent actual end
of words where they're valid.

65
00:04:07.509 --> 00:04:10.293
So the black ones don't
represent an end of a word.

66
00:04:10.293 --> 00:04:14.852
CA in our dictionary is not a word,
but C-A-P is a word and

67
00:04:14.852 --> 00:04:17.003
C-A-P-E is also a word.

68
00:04:17.003 --> 00:04:21.298
So, it is not the case that only
leaf nodes can be the end of words.

69
00:04:21.298 --> 00:04:25.848
We have to track an additional
boolean on each node that says is this

70
00:04:25.848 --> 00:04:27.485
the end of a word or not?

71
00:04:27.485 --> 00:04:32.014
And we track that as we
build up the Trie Tree.

72
00:04:32.014 --> 00:04:36.045
So we see E-A-R is a word and
that's why that's marked as blue.

73
00:04:36.045 --> 00:04:41.035
But E-A-C is not a word and
that's why that one is still black.

74
00:04:41.035 --> 00:04:45.259
Another thing that we know just because
this is a well known data structure,

75
00:04:45.259 --> 00:04:48.560
we know that traversal of
a Trie Tree is done in linear time.

76
00:04:48.560 --> 00:04:54.496
It's actually K times M,
⁠K is the length of the dictionary,

77
00:04:54.496 --> 00:04:56.967
like the number of words.

78
00:04:56.967 --> 00:05:02.123
And I'm sorry, K is the average
length of words in the dictionary,

79
00:05:02.123 --> 00:05:05.663
and M is the number of
words in the dictionary.

80
00:05:05.663 --> 00:05:10.263
So K times M, that's sort of a fixed,
known thing in your dictionary size.

81
00:05:10.263 --> 00:05:13.501
You can treverse it in linear time.

82
00:05:13.501 --> 00:05:19.099
Make sure I'm saying that correctly.

83
00:05:19.099 --> 00:05:21.123
I think I said it incorrectly.

84
00:05:21.123 --> 00:05:29.470
The average length of words represents
the average height of the tree.

85
00:05:29.470 --> 00:05:32.914
So that's what K is,
is the height of the Trie and

86
00:05:32.914 --> 00:05:35.939
M is the number of words
in the dictionary.

87
00:05:35.939 --> 00:05:37.530
I think I'm saying that correctly.

88
00:05:37.530 --> 00:05:41.567
Anyway, because it's a known data
structure, we just know it has that known

89
00:05:41.567 --> 00:05:44.749
property we need to go and
re-prove to ourselves that math.

90
00:05:44.749 --> 00:05:46.746
That's just a known stated property.

91
00:05:46.746 --> 00:05:48.768
If we construct a data
structure like that,

92
00:05:48.768 --> 00:05:51.401
we know that we'll be able to
traverse it in linear time.

93
00:05:51.401 --> 00:05:55.456
Let's switch back over to our code editor.

94
00:05:55.456 --> 00:05:59.586
And we're gonna start
again with our load words.

95
00:05:59.586 --> 00:06:03.971
Instead of making dictionary an array,
we're now gonna make an object.

96
00:06:03.971 --> 00:06:08.727
A Trie,
it doesn't need to be anything more

97
00:06:08.727 --> 00:06:13.109
than simply linking objects together.

98
00:06:13.109 --> 00:06:17.129
Having an object with one or
more properties under that point to other

99
00:06:17.129 --> 00:06:20.264
objects, that's all it
really takes to make a tree.

100
00:06:20.264 --> 00:06:25.000
So we're just gonna start with a plain
old empty object that will represent our

101
00:06:25.000 --> 00:06:25.724
root node.

102
00:06:25.724 --> 00:06:31.783
And instead of loading this thing up into
a copy of an array, we're gonna just

103
00:06:31.783 --> 00:06:38.232
create this nested series of objects as we
load the words from the word list array.

104
00:06:38.232 --> 00:06:42.491
And then we need to keep
track of how many we've done,

105
00:06:45.100 --> 00:06:49.201
So I'll have that count here and
we'll return that.

106
00:06:51.188 --> 00:06:54.582
One other thing that I wanna
do is I wanna have a special

107
00:06:54.582 --> 00:06:59.563
property on each node that let's us know
whether or not it's the end of a word,

108
00:06:59.563 --> 00:07:02.148
and I wanna have a symbol to define that.

109
00:07:02.148 --> 00:07:04.421
So I'm gonna call that symbol as word.

110
00:07:06.560 --> 00:07:11.348
Symbol is one of the primitive data
structures added in JavaScript back

111
00:07:11.348 --> 00:07:11.998
in ES6.

112
00:07:11.998 --> 00:07:16.459
It's just a Unique primitive

113
00:07:16.459 --> 00:07:21.205
value could think of it like a number or a
string, but it's guaranteed to be unique.

114
00:07:23.428 --> 00:07:27.833
All right, so what we're going to do,
firstly, let's just make sure,

115
00:07:27.833 --> 00:07:31.669
because we know that our app can
call load words multiple times,

116
00:07:31.669 --> 00:07:36.099
we need to reset the dictionary each
time we pick a different drop-down.

117
00:07:36.099 --> 00:07:40.759
So, I'm just gonna check to see whether or
not our dictionary has anything in it.

118
00:07:46.721 --> 00:07:49.237
And I'll reset it to
an empty object in case.

119
00:07:49.237 --> 00:07:53.234
So we'll just throw away the old Trie and
rebuild it.

120
00:07:53.234 --> 00:07:58.172
All right, we're gonna go one at
a time through the words in the word

121
00:07:58.172 --> 00:08:01.827
list array that was given
to us from the JSON file.

122
00:08:08.310 --> 00:08:13.159
And there's no recursion involved here,
which is kind of nice.

123
00:08:13.159 --> 00:08:17.813
We're just going to do an iterative
traversal down this Trie.

124
00:08:17.813 --> 00:08:21.423
And the way we do an iterative
traversal down the Trie,

125
00:08:21.423 --> 00:08:25.346
is we just keep track of a reference,
a pointer if you will,

126
00:08:25.346 --> 00:08:29.047
a reference to the current
level of Trie that we're at.

127
00:08:29.047 --> 00:08:33.767
So we start that reference at the root
node and this property, I mean,

128
00:08:33.767 --> 00:08:38.807
this variable code node will be our
reference pointer to our current root or

129
00:08:38.807 --> 00:08:41.293
our sub-root as we go down our Trie.

130
00:08:45.044 --> 00:08:45.809
And then,

131
00:08:45.809 --> 00:08:51.436
we need to loop through all of the letters
in this particular dictionary word.

132
00:08:51.436 --> 00:08:56.030
So let letter of word.

133
00:08:56.030 --> 00:08:59.950
It's nice that JavaScript ES6
made strings iterable.

134
00:08:59.950 --> 00:09:04.886
So we can just get each of the characters
out of a string with a full of loop.

135
00:09:08.941 --> 00:09:14.790
And we need to ask if at, for this
letter and wherever I am at traversing

136
00:09:14.790 --> 00:09:19.666
down in my Trie, have I yet
created a node for that letter?

137
00:09:19.666 --> 00:09:24.082
Because we're gonna see the same starting
letter from a whole bunch of words, and

138
00:09:24.082 --> 00:09:26.910
we don't need to recreate
the object over and over.

139
00:09:26.910 --> 00:09:28.306
So we only need to create
it the first time.

140
00:09:28.306 --> 00:09:33.022
So we can just say if node being
our pointer to whatever our current

141
00:09:33.022 --> 00:09:37.993
portion of the Trie is, if not node
of letter, meaning we have not yet

142
00:09:37.993 --> 00:09:42.750
created that child, then we need
to go ahead and create that child

143
00:09:45.516 --> 00:09:48.021
And that object I said that
the objects were empty or

144
00:09:48.021 --> 00:09:50.876
that they didn't carry any
particular data payload, but

145
00:09:50.876 --> 00:09:54.194
they do need to have that Boolean
flag on them that tells us whether or

146
00:09:54.194 --> 00:09:57.600
not they're a word or not,
whether they represent the end of a word.

147
00:09:57.600 --> 00:10:01.392
So we're gonna include that symbol,

148
00:10:01.392 --> 00:10:05.538
the isword symbol as our property name and

149
00:10:05.538 --> 00:10:10.881
we'll initially set each
node the Boolean to false.

150
00:10:10.881 --> 00:10:15.489
So we're saying the property
of that symbol name value is

151
00:10:15.489 --> 00:10:17.505
false as we add in a node.

152
00:10:17.505 --> 00:10:20.665
We do need to keep track of the count.

153
00:10:20.665 --> 00:10:24.173
So this is a good place for
us to increment our counter so

154
00:10:24.173 --> 00:10:30.006
that we know how many of these
nodes we have created Actually,

155
00:10:30.006 --> 00:10:33.895
let's do that inside the F because
that's where we actually created it

156
00:10:38.696 --> 00:10:42.492
After we have added a letter or
at least found an existing one,

157
00:10:42.492 --> 00:10:47.248
whether we added it or found an existing
one, now we can advance the pointer.

158
00:10:47.248 --> 00:10:51.165
So we can say node = node of letter.

159
00:10:51.165 --> 00:10:54.810
So we're simply taking that running
reference that was started out at

160
00:10:54.810 --> 00:10:58.946
the root, and now it's pointing to this
child node whether we just created it or

161
00:10:58.946 --> 00:11:00.258
had already created it.

162
00:11:00.258 --> 00:11:04.733
So we're basically just walking our way
down for every word in the dictionary.

163
00:11:04.733 --> 00:11:07.462
We're walking our way down
to the place in the Trie,

164
00:11:07.462 --> 00:11:10.700
where that word would have needed
to be finally represented.

165
00:11:10.700 --> 00:11:13.888
And at any place where we haven't yet
gotten the nodes for

166
00:11:13.888 --> 00:11:16.626
the letters left in that word,
we just add them.

167
00:11:16.626 --> 00:11:20.504
So we're just progressively filling out
more and more of the Trie with more and

168
00:11:20.504 --> 00:11:21.573
more of these nodes.

169
00:11:21.573 --> 00:11:26.139
At the end of the four loop where we
have added all of the letters for

170
00:11:26.139 --> 00:11:30.789
a word, we know that the node reference,
the node pointer there,

171
00:11:30.789 --> 00:11:35.689
that variable node that is pointing
at the last letter of the word, and

172
00:11:35.689 --> 00:11:40.121
therefore, we should take that one and
set its symbol to true.

173
00:11:40.121 --> 00:11:42.950
Because that does represent
the end of a word.

174
00:11:42.950 --> 00:11:50.256
So we're gonna say node,
of is word = true.

175
00:11:50.256 --> 00:11:55.783
Those 20 or so lines of code
are all that it takes to construct

176
00:11:55.783 --> 00:12:00.586
a basic data structure that
behaves like a Trie tree.

177
00:12:04.397 --> 00:12:08.853
Now, there are well known
implementations of data

178
00:12:08.853 --> 00:12:13.423
structures like Trie trees
that you can find on NPM.

179
00:12:13.423 --> 00:12:15.661
And some of you have
probably already Googled for

180
00:12:15.661 --> 00:12:17.851
this is there an implementation
of a Trie tree?

181
00:12:17.851 --> 00:12:19.401
They are more sophisticated.

182
00:12:19.401 --> 00:12:21.425
They have API methods.

183
00:12:21.425 --> 00:12:25.388
They're written as instances of
classes and all of this other fanfare.

184
00:12:25.388 --> 00:12:29.303
And those very well might be
the kind of code that you would like

185
00:12:29.303 --> 00:12:31.347
to just use in a production app.

186
00:12:31.347 --> 00:12:35.980
But I like to do the bare minimum that
is necessary to get the job done.

187
00:12:35.980 --> 00:12:41.212
So, if it only took me 15 or 20 lines of
code to write a Trie tree implementation,

188
00:12:41.212 --> 00:12:45.267
like I've done here,
that's what I would almost certainly do,

189
00:12:45.267 --> 00:12:49.864
rather than going and getting a 400
line nicely packaged, Trie Tree.

190
00:12:49.864 --> 00:12:53.937
There is a dividing line where
the complexity of doing your own

191
00:12:53.937 --> 00:12:58.795
implementation, and all of the potential
performance gotchas where you

192
00:12:58.795 --> 00:13:03.651
might not have an optimized solution,
it becomes actually way better for

193
00:13:03.651 --> 00:13:07.278
you to use a known well
battle tested implementation.

194
00:13:07.278 --> 00:13:12.026
So this one's only 15 or 20 lines of code,
it's conceptually pretty straightforward.

195
00:13:12.026 --> 00:13:15.047
there's not a lot of places where
we could have made a mistake or

196
00:13:15.047 --> 00:13:17.610
performance foot gun or
something like that.

197
00:13:17.610 --> 00:13:20.309
So, I think this code is the right code.

198
00:13:20.309 --> 00:13:22.490
This is the code I would
use in production.

199
00:13:22.490 --> 00:13:26.652
But in our next option, we're gonna start
looking at data structures that are much

200
00:13:26.652 --> 00:13:30.464
more complicated and that we definitely
don't wanna reinvent ourselves.

201
00:13:30.464 --> 00:13:33.738
And we'll use packages that exist for
them.

202
00:13:33.738 --> 00:13:36.937
Okay, so
you do have to make those judgement calls,

203
00:13:36.937 --> 00:13:41.229
just be wary of where's that balance
line of how many lines of codes and

204
00:13:41.229 --> 00:13:44.233
how many potential pitfalls
have I introduced.

