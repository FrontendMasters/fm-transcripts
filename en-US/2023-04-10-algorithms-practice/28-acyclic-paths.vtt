WEBVTT

1
00:00:00.000 --> 00:00:03.480
We're gonna push forward, we wanna get
ourselves to the option one solution.

2
00:00:03.480 --> 00:00:07.609
The last thing that we need to be able to
do is list out all of the acyclic paths.

3
00:00:07.609 --> 00:00:11.539
This is going to be a little
conceptually easier to look at.

4
00:00:11.539 --> 00:00:15.859
It's gonna take a little bit more code,
but hopefully,

5
00:00:15.859 --> 00:00:18.654
it won't be too confusing of a code.

6
00:00:18.654 --> 00:00:21.187
Hopefully, we'll be able to explain it so
it won't be too confusing.

7
00:00:21.187 --> 00:00:24.104
Okay, so the acyclic paths,
we're not counting,

8
00:00:24.104 --> 00:00:26.506
we actually want to
keep track of the path.

9
00:00:26.506 --> 00:00:27.594
So that's slightly more complex.

10
00:00:27.594 --> 00:00:30.471
We're not just being able to return
numbers and add them together.

11
00:00:30.471 --> 00:00:33.181
We're gonna have to be able to
build up these partial paths and

12
00:00:33.181 --> 00:00:36.304
fill them up further and further and
figure out when we need to stop, and

13
00:00:36.304 --> 00:00:37.938
also do our backtracking and stuff.

14
00:00:37.938 --> 00:00:40.587
So there's a little bit
more juggling to do.

15
00:00:40.587 --> 00:00:43.098
But this is basically what
an acyclic path might look like.

16
00:00:43.098 --> 00:00:47.391
Starting from digit 1, you might go
over to 6, and then 6 down to 0,

17
00:00:47.391 --> 00:00:51.685
the orange arrow, and then 0 up to 4,
the green arrow, 4 over to 3,

18
00:00:51.685 --> 00:00:54.503
the red arrow, 3 down to 8,
the pink arrow.

19
00:00:54.503 --> 00:01:00.918
Once we get to 8,
can you see that we have to stop?

20
00:01:00.918 --> 00:01:04.669
Because we can't go anywhere else
that we haven't already been.

21
00:01:04.669 --> 00:01:06.641
We can't go to 1 because
we've already been there.

22
00:01:06.641 --> 00:01:08.768
We can't go to 3 because
we've already been there.

23
00:01:08.768 --> 00:01:10.853
So that path, how many is that?

24
00:01:10.853 --> 00:01:14.484
One, two, three, four, five.

25
00:01:14.484 --> 00:01:17.706
That's the longest of that acyclic path.

26
00:01:17.706 --> 00:01:19.441
It's only five.

27
00:01:19.441 --> 00:01:23.601
Other choices that we might have made
along the way might have made a longer or

28
00:01:23.601 --> 00:01:24.449
shorter path.

29
00:01:24.449 --> 00:01:27.466
All we wanna do is for
any given starting digit,

30
00:01:27.466 --> 00:01:31.925
list out all of these acyclic paths
that we could have possibly taken.

31
00:01:31.925 --> 00:01:33.503
Makes sense?

32
00:01:38.663 --> 00:01:41.661
We are still going to
use recursion to do so,

33
00:01:46.323 --> 00:01:49.608
But it's gonna be, as I said,
slightly more to juggle.

34
00:01:49.608 --> 00:01:50.724
All right, so

35
00:01:50.724 --> 00:01:56.034
now we're gonna be implementing
the listAcyclicPaths function.

36
00:01:56.034 --> 00:01:59.699
All right, so the good news is that
this function that we're gonna write,

37
00:01:59.699 --> 00:02:01.502
it's gonna look pretty simple, but

38
00:02:01.502 --> 00:02:05.188
it's gonna call another function,
where more of the complexity will be.

39
00:02:05.188 --> 00:02:11.662
What we need to do here is
have an array of paths.

40
00:02:11.662 --> 00:02:15.649
So that's not a counter again,
that's gonna be an array of paths.

41
00:02:15.649 --> 00:02:19.236
Paths are simply gonna be an array
of numbers, like 8, 3, 4,

42
00:02:19.236 --> 00:02:21.668
2, whatever the number would be, right?

43
00:02:21.668 --> 00:02:26.481
So we're just gonna push into the paths,
however, many acyclic paths we find for

44
00:02:26.481 --> 00:02:27.956
a given starting digit.

45
00:02:27.956 --> 00:02:30.974
And it's different,
we'll see that there's an asymmetry here.

46
00:02:30.974 --> 00:02:35.190
There's some symmetry but not all digits
have the same number of paths and

47
00:02:35.190 --> 00:02:36.691
the same length of paths.

48
00:02:36.691 --> 00:02:40.108
So there's some really interesting
geometry going on, and

49
00:02:40.108 --> 00:02:42.055
I'm still kind of fascinated by.

50
00:02:42.055 --> 00:02:44.885
Okay, for any given starting digit,

51
00:02:44.885 --> 00:02:49.936
we know that we can get the next
hops that we can take, I'll call it.

52
00:02:49.936 --> 00:02:55.455
We can get that from the nearby
keys of that starting digit.

53
00:02:55.455 --> 00:02:58.214
Same thing we did before, right?

54
00:02:58.214 --> 00:03:01.194
Could call the function, I think
that's the way it is in the Git repo.

55
00:03:01.194 --> 00:03:07.044
I'm just gonna go ahead and access
the array cuz why call the function.

56
00:03:11.219 --> 00:03:18.295
For each of those, we're gonna say,
for let nextHop of nextHops.

57
00:03:18.295 --> 00:03:21.356
For each of those hops
that we're going to take,

58
00:03:21.356 --> 00:03:24.276
we need to basically
create kind of a sub path.

59
00:03:24.276 --> 00:03:25.419
Are you with me?

60
00:03:25.419 --> 00:03:31.752
So we're gonna say, this path has
the startingDigit at the beginning

61
00:03:31.752 --> 00:03:37.025
of the path, and
it has the nextHop in that next position.

62
00:03:37.025 --> 00:03:41.526
So if that iterates three times, we're
gonna create three separate sub-paths.

63
00:03:41.526 --> 00:03:46.341
All three of them rooted
with the startingDigit, but

64
00:03:46.341 --> 00:03:51.907
each of them having a different
nextHop in the next position.

65
00:03:51.907 --> 00:03:52.777
Does that makes sense?

66
00:03:57.966 --> 00:04:00.217
Here's where we hand wave and

67
00:04:00.217 --> 00:04:04.367
pretend as if this is as easy as it is,
which it isn't.

68
00:04:04.367 --> 00:04:08.083
We're gonna call this function
that magically doesn't yet exist,

69
00:04:08.083 --> 00:04:09.693
but we're gonna write that.

70
00:04:09.693 --> 00:04:14.700
Just magically follows all of those
paths and fills in our path's array.

71
00:04:14.700 --> 00:04:17.889
And then we just simply return paths.

72
00:04:20.236 --> 00:04:24.016
So it's kind of like if you're watching
one of those TV shows and the chef,

73
00:04:24.016 --> 00:04:27.736
it's one of those cooking TV shows,
and the chef just kind of says, hey,

74
00:04:27.736 --> 00:04:31.456
we stick it in the oven, and then two
seconds later, they pull it out, and

75
00:04:31.456 --> 00:04:33.381
it's a fully baked cake or whatever.

76
00:04:33.381 --> 00:04:34.977
I'm just hand waving here,

77
00:04:34.977 --> 00:04:38.176
there's a followPath function
that does all this work.

78
00:04:38.176 --> 00:04:41.026
It's not as bad as I'm making it seem,
but in the past,

79
00:04:41.026 --> 00:04:45.105
when I've taught this workshop, more
of the questions come from followPath.

80
00:04:45.105 --> 00:04:50.581
So I'm just preparing you,
it's slightly more to juggle.

81
00:04:50.581 --> 00:04:52.005
So what does followPath take?

82
00:04:52.005 --> 00:04:58.527
It takes a path and the list of paths that
we wanna follow, that we want to mutate.

83
00:04:58.527 --> 00:05:01.551
Now, I'm deliberately
making a choice here,

84
00:05:01.551 --> 00:05:06.160
which is that I'm gonna pass in
a reference to an array that I don't own,

85
00:05:06.160 --> 00:05:09.423
and I'm gonna mutate that
thing as I recurse down.

86
00:05:09.423 --> 00:05:12.029
And there are pros and cons to that.

87
00:05:12.029 --> 00:05:16.859
It is more efficient, it is also more
likely to be the source of bugs when

88
00:05:16.859 --> 00:05:19.608
you start mutating stuff at a distance.

89
00:05:19.608 --> 00:05:21.800
Generally, you don't wanna
pass in an array and

90
00:05:21.800 --> 00:05:23.411
have some other function mutated.

91
00:05:23.411 --> 00:05:25.665
You wanna return back a new array,

92
00:05:25.665 --> 00:05:29.958
but there would be a lot of sub
arrays that I'd be returning here.

93
00:05:29.958 --> 00:05:32.923
Creates a lot more memory and
garbage collection waste.

94
00:05:32.923 --> 00:05:36.486
So I'm just gonna take the more
efficient route and mutate the paths.

95
00:05:36.486 --> 00:05:41.018
But be aware of it, probably in production
code, I'd be putting a be aware comment

96
00:05:41.018 --> 00:05:44.923
here saying, beware of the side effects,
I am mutating at a distance.

97
00:05:44.923 --> 00:05:48.121
Cuz this is more likely where
bugs are gonna come from.

98
00:05:48.121 --> 00:05:52.803
All right, so followPath is gonna do
something very similar to the first step

99
00:05:52.803 --> 00:05:54.541
that listAcylicPaths did.

100
00:05:54.541 --> 00:05:57.746
It needs to get the nextHops.

101
00:05:57.746 --> 00:06:01.361
And the nextHops that it needs are from,

102
00:06:04.426 --> 00:06:06.943
Get this,
we have that path that's passed in.

103
00:06:06.943 --> 00:06:11.850
Whatever the last element in the path is,
in other words, wherever we currently

104
00:06:11.850 --> 00:06:16.412
are in the path, that's where we need
to find out the next hops from there.

105
00:06:16.412 --> 00:06:20.097
So we're gonna say, path[path.length- 1].

106
00:06:20.097 --> 00:06:22.561
So I know that's kind of double nested.

107
00:06:24.481 --> 00:06:27.599
References in here,
array references or whatever.

108
00:06:27.599 --> 00:06:31.693
What we're saying, path[path.length- 1],
that's where we currently are.

109
00:06:31.693 --> 00:06:33.425
And we need to get
the next hops from there.

110
00:06:38.332 --> 00:06:40.775
I'm gonna keep track in a Boolean.

111
00:06:40.775 --> 00:06:43.514
There's other ways of doing this,
but I like the Boolean approach.

112
00:06:43.514 --> 00:06:47.668
ForwardFound, I'm gonna start
this out = false, okay?

113
00:06:47.668 --> 00:06:52.864
This is a Boolean that's
gonna let me know if any of

114
00:06:52.864 --> 00:06:58.080
the subpaths that I
considered actually worked.

115
00:06:58.080 --> 00:07:04.247
If I never found any other subpaths,
then there's nothing else for me to do.

116
00:07:04.247 --> 00:07:07.071
If I did find any other subpaths,
then I need to keep going.

117
00:07:07.071 --> 00:07:08.385
Make sense?

118
00:07:08.385 --> 00:07:10.676
So I'm just gonna keep
track of that Boolean.

119
00:07:10.676 --> 00:07:12.917
And actually, let's go ahead and
write the if statement for that.

120
00:07:12.917 --> 00:07:17.846
If I did not, Find

121
00:07:17.846 --> 00:07:22.248
any further paths, what does that tell me?

122
00:07:22.248 --> 00:07:26.726
It tells me that that path is complete,
and therefore,

123
00:07:26.726 --> 00:07:29.505
I can push it into the paths array.

124
00:07:29.505 --> 00:07:35.565
I am mutating that paths
array with this path.

125
00:07:35.565 --> 00:07:39.593
I know that this path has nowhere
else that it can go, and therefore,

126
00:07:39.593 --> 00:07:42.520
it is complete, and
I'll push it into the array.

127
00:07:42.520 --> 00:07:43.703
Does that part make sense?

128
00:07:43.703 --> 00:07:44.837
Give me thumbs up, thumbs down.

129
00:07:44.837 --> 00:07:48.390
How does that part feel, okay?

130
00:07:48.390 --> 00:07:55.275
All right, Hopefully, it's not as painful
as I warned you that it might be.

131
00:07:55.275 --> 00:07:57.522
Hopefully, this isn't feeling too bad.

132
00:07:57.522 --> 00:07:59.589
We're almost there.

133
00:07:59.589 --> 00:08:06.530
We need to look at all those next hops,
so let's do the let nextHop of nextHops.

134
00:08:06.530 --> 00:08:11.835
There could be 02 or
3 of those for us to consult.

135
00:08:11.835 --> 00:08:16.242
We're just gonna go through
however many of them there are.

136
00:08:16.242 --> 00:08:20.397
And here's the key thing
that this function needs.

137
00:08:20.397 --> 00:08:25.285
It's an if statement that says,
if the path that we've

138
00:08:25.285 --> 00:08:29.448
been on does not already
include this nextHop.

139
00:08:29.448 --> 00:08:32.690
That's how we make sure that
we're not cycling back.

140
00:08:32.690 --> 00:08:37.613
I've got a subpath, a path that I'm
building up, and I've got another place

141
00:08:37.613 --> 00:08:41.956
that I can jump, but I can't jump
there if I've already been there.

142
00:08:41.956 --> 00:08:43.990
You follow that?

143
00:08:43.990 --> 00:08:45.489
Can't do this with a set.

144
00:08:45.489 --> 00:08:47.336
Why can't I do this with a set?

145
00:08:47.336 --> 00:08:51.229
&gt;&gt; [INAUDIBLE]
&gt;&gt; Cuz order matters,

146
00:08:51.229 --> 00:08:55.037
I got to just check to
see if I have not yet

147
00:08:55.037 --> 00:08:59.320
gone there in this particular path, okay?

148
00:08:59.320 --> 00:09:05.430
If that is not true,
then I still have a path forward.

149
00:09:05.430 --> 00:09:09.206
So I will say, pathForwardFound = true.

150
00:09:09.206 --> 00:09:12.827
That way I don't go ahead and
add that partial path to the list.

151
00:09:12.827 --> 00:09:16.873
We only wanna add that partial path
whenever there's nowhere else to go.

152
00:09:16.873 --> 00:09:17.669
You with me?

153
00:09:21.451 --> 00:09:23.745
And here's the last thing,

154
00:09:23.745 --> 00:09:28.232
let's recursively follow
that path on its way down.

155
00:09:28.232 --> 00:09:29.897
I'm sorry, we got to define the nextPath.

156
00:09:29.897 --> 00:09:31.946
What is that nextPath look like?

157
00:09:31.946 --> 00:09:37.894
NextPath is the current path plus nextHop.

158
00:09:40.679 --> 00:09:43.612
And now, let's follow that path and
see where that gets us.

159
00:09:48.814 --> 00:09:51.196
So the strategy here is
keep recursing down,

160
00:09:51.196 --> 00:09:53.709
keep following all of
our different nextHops.

161
00:09:53.709 --> 00:09:58.658
Keep recursing down until such a time
as none of the places that I can move

162
00:09:58.658 --> 00:10:04.123
are valid for me to move to, in which
case, I know that we're done recursing.

163
00:10:04.123 --> 00:10:08.276
So I set the pathForwardFound, or
I leave the pathForwardFound to false.

164
00:10:08.276 --> 00:10:11.475
That ends up pushing it
into our paths array,

165
00:10:11.475 --> 00:10:15.525
mutating our paths array,
and not doing any recursion.

166
00:10:15.525 --> 00:10:20.996
So that function call stack just stops,
it doesn't keep going any further deeper.

167
00:10:20.996 --> 00:10:27.503
As a little bit of a side note,
listAcyclicPaths probably could have been,

168
00:10:27.503 --> 00:10:34.123
we could have figured out a way to make
that itself be the recursive function.

169
00:10:34.123 --> 00:10:38.496
But one of the things that you very
quickly get comfortable with when you're

170
00:10:38.496 --> 00:10:43.211
doing recursion is that you often wanna
make another function be the recursive one

171
00:10:43.211 --> 00:10:47.604
because you might want a different
signature for your recursive function.

172
00:10:47.604 --> 00:10:51.216
Then what you expose to
the outside calling code,

173
00:10:51.216 --> 00:10:53.974
what you expose to the rest of the app.

174
00:10:53.974 --> 00:10:55.998
So there's a little technique here,

175
00:10:55.998 --> 00:10:59.041
which is followPath is not
exposed to the outside world.

176
00:10:59.041 --> 00:11:01.549
I don't wanna give a function
to the outside world,

177
00:11:01.549 --> 00:11:04.463
where somebody's passing in an array and
I'm mutating it.

178
00:11:04.463 --> 00:11:07.000
That's total chaos.

179
00:11:07.000 --> 00:11:10.511
I only expose
the listAcyclicPaths as a nice,

180
00:11:10.511 --> 00:11:14.750
clean encapsulation of that
side effecting behavior.

181
00:11:14.750 --> 00:11:19.186
Meaning that from the beginning of
listAcylicPaths to the end of it,

182
00:11:19.186 --> 00:11:23.773
all of those side effects that
are happening, those are all completely

183
00:11:23.773 --> 00:11:29.221
self-contained and they don't leak out to
cause problems for the rest of the code.

184
00:11:29.221 --> 00:11:33.963
So it is very common that you will end
up creating these side helper functions

185
00:11:33.963 --> 00:11:38.853
that are the recursive ones so that you
have control over their signatures, so

186
00:11:38.853 --> 00:11:42.953
that you have control over
containing their side effects, etc.

187
00:11:49.748 --> 00:11:53.250
The last thing that we
should do is test it.

188
00:11:53.250 --> 00:11:55.271
See if I've made a mistake or if it works.

189
00:11:58.815 --> 00:12:02.857
Okay, let's come back over
to our knights dialer, and

190
00:12:02.857 --> 00:12:08.018
remember that this one is not concerned
with however many hops I add in.

191
00:12:08.018 --> 00:12:13.681
If I add in 6 or 12, this one is only
concerned with the starting digit, right?

192
00:12:13.681 --> 00:12:15.061
So if I click 4,

193
00:12:15.061 --> 00:12:21.097
here are the distinct acyclic paths
that you can get to starting from 4.

194
00:12:21.097 --> 00:12:24.356
You've got 4, 3, 8, 1, 6, 7, 2, 9.

195
00:12:24.356 --> 00:12:28.706
You've got 4, 3, 8, 1, 6, but
instead of going to 7, you went to 0, and

196
00:12:28.706 --> 00:12:31.373
then that was it cuz you
couldn't go any further.

197
00:12:31.373 --> 00:12:36.478
4, 9, 2, 7, 6, 1, 8, 3,
that was it, no further to go.

198
00:12:36.478 --> 00:12:38.257
And these ones stopped
kept a little early.

199
00:12:38.257 --> 00:12:43.026
So you can see here that we've
got two of them that are visiting

200
00:12:43.026 --> 00:12:44.778
eight of the numbers.

201
00:12:44.778 --> 00:12:46.999
So they didn't quite
get all of the numbers.

202
00:12:46.999 --> 00:12:50.247
But then we've got 4 of them that
visited only 6 of the numbers,

203
00:12:50.247 --> 00:12:51.797
so they stopped kind of short.

204
00:12:51.797 --> 00:12:54.124
That's what happens when you click 4.

205
00:12:54.124 --> 00:13:00.147
Would you expect a similar
symmetry if I clicked 6?

206
00:13:00.147 --> 00:13:04.992
Just by the geometry of the board,
if I click 6, we kind of expect,

207
00:13:04.992 --> 00:13:09.933
and indeed we get two 8s and
four 6s in terms of path length, right?

208
00:13:09.933 --> 00:13:11.906
What about if I click 1?

209
00:13:11.906 --> 00:13:14.727
We're expecting something different,
probably, right?

210
00:13:14.727 --> 00:13:18.108
Let's see what we get when we click 1.

211
00:13:18.108 --> 00:13:24.607
We've got two paths that are able
to visit all nine of the numbers.

212
00:13:24.607 --> 00:13:28.916
We've got one path that it can only visit
eight of the numbers, two of them at 7 and

213
00:13:28.916 --> 00:13:29.865
one of them at 6.

214
00:13:29.865 --> 00:13:33.987
So if that's the outcome from 1,
what do I expect from 3?

215
00:13:33.987 --> 00:13:38.012
Do I expect something somewhat similar?

216
00:13:38.012 --> 00:13:40.307
And in fact, we see the same shape there.

217
00:13:40.307 --> 00:13:43.419
Now, what about 7 and 9?

218
00:13:43.419 --> 00:13:46.380
Do we expect the same outcome from 7 and

219
00:13:46.380 --> 00:13:50.436
9 that we got from 1 and
3, the same shape, I mean?

220
00:13:50.436 --> 00:13:54.250
Not the exact same paths,
obviously, but the same shape.

221
00:13:56.502 --> 00:13:59.756
Let's try it, let's see what 7 gives us.

222
00:13:59.756 --> 00:14:05.532
Well, we still got two 9s and
8, two 7s and a 6.

223
00:14:05.532 --> 00:14:08.224
We ended up enumerating
them in different orders.

224
00:14:08.224 --> 00:14:13.336
But I think you might say that we
still visited the same kind of number,

225
00:14:13.336 --> 00:14:18.813
we still had the same magnitude of paths
that we had available to us from 7.

226
00:14:18.813 --> 00:14:20.297
Same thing with 9.

227
00:14:21.802 --> 00:14:28.382
Oops, we had 4 and 6 gave us the same,
what about 2 and 8?

228
00:14:28.382 --> 00:14:29.711
Those are giving us different ones.

229
00:14:29.711 --> 00:14:34.068
Let's look at 2,
we had quite a few more paths from 2.

230
00:14:34.068 --> 00:14:39.317
All of them or
most all of them were of length 8.

231
00:14:39.317 --> 00:14:40.893
We had none of length 9, but

232
00:14:40.893 --> 00:14:44.723
we had quite a few different paths
of length 8, couple of length 6.

233
00:14:46.554 --> 00:14:47.650
Let's see what 8 does.

234
00:14:47.650 --> 00:14:50.483
Does it give us something similar now?

235
00:14:50.483 --> 00:14:53.816
I guess it basically gives
us the same shape, but

236
00:14:53.816 --> 00:14:56.344
in slightly different orders here.

237
00:14:56.344 --> 00:15:00.331
There's one last key on the board,
which is the 0 key.

238
00:15:00.331 --> 00:15:04.141
Does anybody have a prediction based
upon the geometry that we see?

239
00:15:04.141 --> 00:15:10.398
Do you think that we will see more and/or
longer paths when we start from 0?

240
00:15:10.398 --> 00:15:14.807
Or do you think we will see
shorter paths if we start from 0?

241
00:15:14.807 --> 00:15:17.646
Some of you have already clicked the 0,
so you already know the answer.

242
00:15:17.646 --> 00:15:23.344
But if you start from 0, are you
expecting fewer paths or more paths?

243
00:15:23.344 --> 00:15:26.934
And are you expecting shorter paths or
longer paths?

244
00:15:31.942 --> 00:15:36.017
I'll tell you how I thought about it
before I ever ran this the first time.

245
00:15:36.017 --> 00:15:39.851
I thought, well, the 0 is kinda
isolated all down by itself, so

246
00:15:39.851 --> 00:15:42.656
I bet it's gonna have shorter and
fewer paths.

247
00:15:42.656 --> 00:15:45.234
That was my intuition.

248
00:15:48.761 --> 00:15:55.128
Fewer paths but all of them are of
length 9, that totally blew me away.

249
00:15:55.128 --> 00:16:01.250
I totally did not expect that starting
from 0 no matter what path you take,

250
00:16:01.250 --> 00:16:05.928
you can visit all of the digits
other than 5, of course.

251
00:16:05.928 --> 00:16:07.881
That blew me away when I
ran that the first time.

252
00:16:07.881 --> 00:16:10.759
Thats totally not what
my intution gave me.

253
00:16:10.759 --> 00:16:15.022
Its starts out in the most what we were
kind of geometricly saying that the most

254
00:16:15.022 --> 00:16:19.419
constrained position and it ends up
getting the most freedom around the board,

255
00:16:19.419 --> 00:16:21.340
which is kind of fasinating to me.

