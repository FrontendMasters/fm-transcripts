WEBVTT

1
00:00:00.109 --> 00:00:02.416
All right, so let's visualize it this way.

2
00:00:02.416 --> 00:00:07.291
And these slides, these next several
slides, are designed specifically to

3
00:00:07.291 --> 00:00:11.716
help you visually see what kind of
code algorithm we're gonna write.

4
00:00:11.716 --> 00:00:15.169
So we've moved from the metaphorical or
the theoretical into.

5
00:00:15.169 --> 00:00:17.209
I'm now trying to help you set up.

6
00:00:17.209 --> 00:00:20.448
Okay, that sounds cool in theory,
but I have no idea how to code that.

7
00:00:20.448 --> 00:00:24.911
And I'll show you that it's actually
pretty straightforward to write code for

8
00:00:24.911 --> 00:00:25.586
this idea.

9
00:00:25.586 --> 00:00:30.490
We know that there are only 10 digits,
so there are only 10 buckets.

10
00:00:30.490 --> 00:00:34.315
And if we could compute all of
the possible six count paths for

11
00:00:34.315 --> 00:00:39.715
each one of those numbers, as I've done
here, then it's a trivial question to say,

12
00:00:39.715 --> 00:00:43.701
well, what if I started from four,
what would that number be?

13
00:00:43.701 --> 00:00:44.710
It's 168.

14
00:00:44.710 --> 00:00:46.823
What if I started from two,
what would that number be?

15
00:00:46.823 --> 00:00:47.812
It's 104.

16
00:00:47.812 --> 00:00:51.369
So we'd already know the answer
to all ten digits up front and

17
00:00:51.369 --> 00:00:53.960
then it's just simply selecting that one.

18
00:00:53.960 --> 00:00:55.133
So how do we do that?

19
00:00:55.133 --> 00:00:57.885
How do we get those 10 buckets computed.

20
00:00:57.885 --> 00:01:02.627
What we're going to do is start out
with the 10 buckets initialized to 0.

21
00:01:02.627 --> 00:01:04.778
That should be pretty self explanatory.

22
00:01:04.778 --> 00:01:09.406
And I've notated below these
ten buckets the nearby keys.

23
00:01:09.406 --> 00:01:15.340
Because this is key to us, this represents
the going backward along the path.

24
00:01:15.340 --> 00:01:17.644
Where could I have been to get to zero?

25
00:01:17.644 --> 00:01:19.618
I could have been at four or six.

26
00:01:19.618 --> 00:01:22.539
Where could I have been to get to
one I could have been at six or

27
00:01:22.539 --> 00:01:24.244
I could have been an eight, okay?

28
00:01:24.244 --> 00:01:26.863
You'll notice above the set of buckets.

29
00:01:26.863 --> 00:01:28.205
I've got a series of ones.

30
00:01:28.205 --> 00:01:31.516
That's kind of like the metaphorical
leaves that are falling into the bucket.

31
00:01:31.516 --> 00:01:34.514
But that is going to be our
temporary count set and

32
00:01:34.514 --> 00:01:37.670
that's where our counts are going to grow,
okay?

33
00:01:37.670 --> 00:01:41.132
So what we're going to do as
we set this up is we're gonna

34
00:01:41.132 --> 00:01:42.985
go through all of the digits.

35
00:01:42.985 --> 00:01:47.768
So we're gonna basically have a loop
that goes 0 to 9, all ten digits.

36
00:01:47.768 --> 00:01:51.852
For each of those digits, we're going
to go through their nearby keys.

37
00:01:51.852 --> 00:01:56.308
So on average,
we're gonna go to 2.22 other places.

38
00:01:56.308 --> 00:01:59.320
A total of 20, if you counted out.

39
00:01:59.320 --> 00:02:02.736
There's a total of 20 possible
places that we're going to visit.

40
00:02:02.736 --> 00:02:06.770
So we've got 10, basically times the 2.22.

41
00:02:06.770 --> 00:02:11.801
On average, we're going to end
up going to 20 other places.

42
00:02:11.801 --> 00:02:17.939
And we're going to ask what is your count,
and add that in to our count.

43
00:02:17.939 --> 00:02:22.876
So we're basically saying for
the zero to figure out that count,

44
00:02:22.876 --> 00:02:26.213
we're going to say where
could I have been?

45
00:02:26.213 --> 00:02:29.148
I could have been at four or six.

46
00:02:29.148 --> 00:02:32.974
What were the counts that four or
six could have had at this moment?

47
00:02:32.974 --> 00:02:34.137
Well, they just start out at one.

48
00:02:34.137 --> 00:02:37.516
Remember, we defined the base condition
as if you don't move anywhere,

49
00:02:37.516 --> 00:02:40.689
if your hop count is zero,
you're just on the digit and that's one.

50
00:02:40.689 --> 00:02:45.416
So, we're gonna grab those two ones,
add them together, and that becomes two.

51
00:02:45.416 --> 00:02:46.957
And then we're gonna move
on to the next digit.

52
00:02:46.957 --> 00:02:50.299
The next digit is one, and
it could have been, at six, and eight.

53
00:02:50.299 --> 00:02:52.746
So, we'll go grab those two ones and
add them together.

54
00:02:52.746 --> 00:02:54.907
And then we'll do the next thing for
each of these.

55
00:02:54.907 --> 00:02:57.809
And you'll notice that many
of them end up as two.

56
00:02:57.809 --> 00:03:00.522
A few of a couple of them end up is three,

57
00:03:00.522 --> 00:03:03.660
the five one again,
always going to be zero.

58
00:03:03.660 --> 00:03:07.393
We could skip over doing the five work,
but it just, it's a nice clean, so

59
00:03:07.393 --> 00:03:10.559
you don't have to like remember
that we're skipping it over.

60
00:03:10.559 --> 00:03:13.494
So it'll just keep being
a 0 the whole time.

61
00:03:13.494 --> 00:03:16.816
So that's our first pass when
we were at hop count of six.

62
00:03:16.816 --> 00:03:20.304
We've done one layer of the tree,
if you will.

63
00:03:20.304 --> 00:03:22.076
We got to go up to the next
layer of the tree.

64
00:03:22.076 --> 00:03:26.804
So what we're going to do is take
the current counts and slide those up and

65
00:03:26.804 --> 00:03:29.219
start again with zero in the bucket.

66
00:03:29.219 --> 00:03:33.377
So it's almost like we've got another set
of buckets that we keep pulling from and

67
00:03:33.377 --> 00:03:34.110
adding into.

68
00:03:34.110 --> 00:03:36.838
The metaphor starts to get
really strained here, but

69
00:03:36.838 --> 00:03:39.389
I'm hoping that it's not
too far afield for you.

70
00:03:39.389 --> 00:03:41.226
So we're gonna repeat
the same thing again.

71
00:03:41.226 --> 00:03:42.777
We're going to start back over at zero.

72
00:03:42.777 --> 00:03:44.787
We're on another iteration of the loop.

73
00:03:44.787 --> 00:03:46.416
Our hop count is down at five.

74
00:03:46.416 --> 00:03:49.387
We're on our second iteration,
so our hop count's down at five.

75
00:03:49.387 --> 00:03:52.291
We're gonna start at zero and
say, where could I have been?

76
00:03:52.291 --> 00:03:53.514
I could have been at four and six.

77
00:03:53.514 --> 00:03:56.485
We're gonna go grab those two counts and
add them together.

78
00:03:56.485 --> 00:03:58.059
So that becomes six.

79
00:03:58.059 --> 00:04:01.421
And then we're going to do the same
thing for the rest of those digits.

80
00:04:01.421 --> 00:04:05.020
Go and find all of the places
that they could have been and

81
00:04:05.020 --> 00:04:07.483
add their previous counts together.

82
00:04:07.483 --> 00:04:08.827
And that's how many places.

83
00:04:08.827 --> 00:04:15.620
So at this moment, what this tells us
is that if I were to start at zero and

84
00:04:15.620 --> 00:04:20.511
only make two hops then I
could have done six paths.

85
00:04:20.511 --> 00:04:21.508
You see that?

86
00:04:24.055 --> 00:04:28.574
Because the six is the number of all
the places that I could have been and

87
00:04:28.574 --> 00:04:31.266
all the places that they could have been.

88
00:04:34.028 --> 00:04:37.527
All the places I could have been and
all the places they could have been.

89
00:04:37.527 --> 00:04:40.098
We've already calculated and
that number is six.

90
00:04:40.098 --> 00:04:42.915
And that's why that's in the 0 slot.

91
00:04:42.915 --> 00:04:47.697
So we're just simply inferring
that how you could get to

92
00:04:47.697 --> 00:04:50.962
me is the same as how I could get to you.

93
00:04:50.962 --> 00:04:54.502
And that was the original question,
we wanted to know how many places,

94
00:04:54.502 --> 00:04:56.104
how many ways could I get to you?

95
00:04:56.104 --> 00:05:01.198
We're just asking the reverse question,
how many ways could you have gotten to me?

96
00:05:01.198 --> 00:05:06.061
And by keeping track of all the counts
as we go we always know that number to

97
00:05:06.061 --> 00:05:08.874
add those two or three numbers together.

98
00:05:08.874 --> 00:05:13.363
So we'll do it again,
we added two 6's together and got 12,

99
00:05:13.363 --> 00:05:17.290
we added two 5's together and
got 10, and so forth.

100
00:05:17.290 --> 00:05:19.282
Now, we're on iteration four.

101
00:05:19.282 --> 00:05:21.601
Hop count is continuing to go down.

102
00:05:21.601 --> 00:05:26.235
We've added a 12 and I'm sorry,

103
00:05:28.332 --> 00:05:34.877
We added a 12 and a four and
six, a 16 and a 16.

104
00:05:34.877 --> 00:05:37.210
Together, excuse me to get the 32.

105
00:05:37.210 --> 00:05:40.582
We added a 10 and
a 16 together to get the 26 and so on.

106
00:05:40.582 --> 00:05:43.835
So we just keep doing
this running through.

107
00:05:43.835 --> 00:05:46.347
It's the same loop visiting,
the same neighbors over and

108
00:05:46.347 --> 00:05:48.251
over again grabbing their previous count.

109
00:05:48.251 --> 00:05:52.146
Once we're done, sliding the counts up and
doing it again on spurred on sliding,

110
00:05:52.146 --> 00:05:52.888
the counts up.

111
00:05:52.888 --> 00:05:55.665
And this is the final time
that we went through.

112
00:05:55.665 --> 00:05:58.107
We recalculated the 168.

113
00:05:58.107 --> 00:06:02.961
Now that our hop count goes down to 0,
we don't need to do anything else, but

114
00:06:02.961 --> 00:06:06.709
simply select the 168 answer
they're in position for.

115
00:06:08.642 --> 00:06:11.248
So think about the memory usage of this.

116
00:06:11.248 --> 00:06:15.282
We have one array of ten numbers in it.

117
00:06:15.282 --> 00:06:18.277
And we have a second array that's
kind of our temporary count,

118
00:06:18.277 --> 00:06:21.852
like we're remembering it for
the next iteration, and then for.

119
00:06:21.852 --> 00:06:25.736
So you can basically say,
we got two arrays of ten elements, right?

120
00:06:25.736 --> 00:06:30.500
And we have a 4 loop that goes
through ten iterations to count all,

121
00:06:30.500 --> 00:06:32.810
to get through all the numbers.

122
00:06:32.810 --> 00:06:38.811
And for each one of those does
an average of 2.22 other operations.

123
00:06:38.811 --> 00:06:43.181
So we basically have 20
operations to go through.

124
00:06:43.181 --> 00:06:46.291
The reason it's 20 is because when we
get to 5 there's nothing to do, right.

125
00:06:46.291 --> 00:06:49.144
So it's not actually 22 [COUGH].

126
00:06:49.144 --> 00:06:54.234
But we do 20 total operations
times the number of hops.

127
00:06:54.234 --> 00:07:01.410
So countPaths is an O of n that
we can calculate as n times 20.

128
00:07:01.410 --> 00:07:06.056
And that works out to an O of n of n.

129
00:07:06.056 --> 00:07:09.913
Which is referred to as linear.

130
00:07:09.913 --> 00:07:13.660
You might remember the big O graph
that we talked about before.

131
00:07:13.660 --> 00:07:16.150
And there's only one other,

132
00:07:16.150 --> 00:07:21.235
there's only a couple of others
that are lower than linear.

133
00:07:21.235 --> 00:07:23.688
We have logarithmic and we have constant.

134
00:07:23.688 --> 00:07:26.102
Linear is well within the green zone.

135
00:07:26.102 --> 00:07:29.118
If you can write a linear algorithm for
something,

136
00:07:29.118 --> 00:07:34.117
it's generally quite safe to put out into
production because it's very unlikely.

137
00:07:34.117 --> 00:07:37.473
That it will grow in such a way
that the performance fails for you.

138
00:07:37.473 --> 00:07:41.605
So we now have constructed a linear
solution to what was previously

139
00:07:41.605 --> 00:07:43.317
an exponential solution.

140
00:07:43.317 --> 00:07:49.553
We're getting the same answer, and
by the way, there's constant memory usage.

141
00:07:49.553 --> 00:07:52.985
It's O of 1 constant memory usage.

142
00:07:52.985 --> 00:07:55.498
And O of n computation time.

143
00:07:56.808 --> 00:08:01.564
It's unlikely that you will run
across very many algorithmic

144
00:08:01.564 --> 00:08:03.582
outcomes in your career.

145
00:08:03.582 --> 00:08:08.721
Where you end up in this unicorn
scenario where you have perfect memory,

146
00:08:08.721 --> 00:08:11.344
usage and linear computation time.

147
00:08:11.344 --> 00:08:14.016
That's almost as good as it gets.

148
00:08:14.016 --> 00:08:18.050
It just happens to be that this
problem is well set up for that.

149
00:08:18.050 --> 00:08:21.877
What are some of the characteristics of
this problem that do set it up for that?

150
00:08:21.877 --> 00:08:25.448
Well, there's a very small set of buckets.

151
00:08:25.448 --> 00:08:27.501
There's only ten buckets, actually nine.

152
00:08:27.501 --> 00:08:30.140
There's a very small set
of possible buckets.

153
00:08:30.140 --> 00:08:34.117
If the nature of your problem is
that there could be millions and

154
00:08:34.117 --> 00:08:38.632
millions of different buckets,
it's still gonna run in linear time.

155
00:08:38.632 --> 00:08:42.342
But that's gonna be
a million n instead of 20 n.

156
00:08:42.342 --> 00:08:46.780
So there will be some performance
penalty that you will pay to do

157
00:08:46.780 --> 00:08:49.054
a million n versus 20 of them.

158
00:08:49.054 --> 00:08:53.302
But it still gonna be a whole lot
better than if you wrote the recursive

159
00:08:53.302 --> 00:08:54.265
version of it.

160
00:08:54.265 --> 00:08:58.658
The recursive version of it even with the
memoization because yes the memoization

161
00:08:58.658 --> 00:09:01.148
will give you back a much
faster performance.

162
00:09:01.148 --> 00:09:03.909
But at the trade off of
a ton of memory usage.

163
00:09:03.909 --> 00:09:06.365
And here we get constant memory usage.

164
00:09:06.365 --> 00:09:11.081
So, hopefully some of parts
of that conceptual approach

165
00:09:11.081 --> 00:09:14.235
are not completely confusing to you.

166
00:09:14.235 --> 00:09:16.400
I know that it is a foreign concept.

167
00:09:16.400 --> 00:09:19.331
This is not how we
typically solve problems.

168
00:09:19.331 --> 00:09:23.928
But discrete math,
tells us that those, path and

169
00:09:23.928 --> 00:09:27.879
graph theory and
a lot of math and science.

170
00:09:27.879 --> 00:09:31.761
They tell us that if we solve
two equivalent problems, and

171
00:09:31.761 --> 00:09:36.370
one is much easier to solve,
then that one's the better one to take.

172
00:09:36.370 --> 00:09:40.803
And that's what we basically said, is I'd
like to solve a different problem that

173
00:09:40.803 --> 00:09:43.964
gets me the same result and
do a whole lot less work to do it.

174
00:09:43.964 --> 00:09:46.515
And that's what we end up with here.

175
00:09:46.515 --> 00:09:50.484
Let's try to switch over to our code and

176
00:09:50.484 --> 00:09:55.536
write the dynamic programming
tabulation bottom

177
00:09:55.536 --> 00:10:00.477
up dynamic programming
version of countPaths.

