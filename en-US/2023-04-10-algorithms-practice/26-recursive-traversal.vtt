WEBVTT

1
00:00:00.200 --> 00:00:04.532
Fair warning, might stretch your brain
a little bit if you're not super familiar

2
00:00:04.532 --> 00:00:07.568
with the notions of recursion,
if that's newer to you.

3
00:00:07.568 --> 00:00:11.785
It's another one of those stretch
your brain things, but it really is

4
00:00:11.785 --> 00:00:16.575
actually the same concept as what we've
seen before already a couple of times,

5
00:00:16.575 --> 00:00:20.884
which is take a bigger problem and
divided down into smaller problems.

6
00:00:20.884 --> 00:00:24.438
Almost all recursion is like that.

7
00:00:24.438 --> 00:00:30.739
If I asked, the countPaths function takes
as its first input the starting digit and

8
00:00:30.739 --> 00:00:34.260
as its second input
the number of hops to take.

9
00:00:34.260 --> 00:00:39.337
So if I called countPaths(4,6),
what I'm asking

10
00:00:39.337 --> 00:00:44.305
is how many possible paths
can I take starting from 4,

11
00:00:44.305 --> 00:00:48.529
where my path length is 6,
my hopCount is 6?

12
00:00:48.529 --> 00:00:53.764
Technically, I guess the path length
would be 7 since the hops are 6, okay?

13
00:00:53.764 --> 00:00:59.222
How many paths can I take of length
7 where I've taken six possible hops?

14
00:00:59.222 --> 00:01:00.094
That's what is being asked.

15
00:01:04.822 --> 00:01:09.049
So how could we break this
down into smaller problems?

16
00:01:09.049 --> 00:01:13.955
If you pull up on your screens a picture
of the dial pad, you can tell me

17
00:01:13.955 --> 00:01:18.964
what are the three possible digits
that I could go to from the digit 4?

18
00:01:21.878 --> 00:01:23.511
Somebody say them out loud,

19
00:01:23.511 --> 00:01:26.920
what are the three digits that
I can get to from the digit 4?

20
00:01:26.920 --> 00:01:28.134
&gt;&gt; 3, 9, and 0.

21
00:01:28.134 --> 00:01:29.915
&gt;&gt; 3, 9 and 0.

22
00:01:29.915 --> 00:01:34.518
So we could say that
the number of places that I

23
00:01:34.518 --> 00:01:39.607
could get to from 4 with
a hopCount of 6 is exactly

24
00:01:39.607 --> 00:01:44.331
equal to the number of
places that I could get to

25
00:01:44.331 --> 00:01:49.326
from 3 with a hopCount of 5,
whatever that is.

26
00:01:49.326 --> 00:01:54.024
Plus the number of places that I could
get to from 9 with a hopCount of 5,

27
00:01:54.024 --> 00:01:58.799
whatever that is, plus the number of
places that I could get to from 0 with

28
00:01:58.799 --> 00:02:01.207
a hopCount of 5, whatever that is.

29
00:02:01.207 --> 00:02:03.727
Whatever those three things are,
if you add them up,

30
00:02:03.727 --> 00:02:06.590
they have to be equal to
whatever countPaths(4, 6) is.

31
00:02:08.500 --> 00:02:11.852
There's a mathematical leap that I'm
asking you to make, that some of you,

32
00:02:11.852 --> 00:02:15.690
that will be an easy leap, and others, you
will be like, whoa, I don't believe that.

33
00:02:16.860 --> 00:02:20.814
But I want you to spend a moment
if you are doubting that,

34
00:02:20.814 --> 00:02:25.191
look at that path and
convince yourself that it has to be true,

35
00:02:25.191 --> 00:02:31.523
because there's nowhere else that we could
go from 4 other than to go to 3, 9, and 0.

36
00:02:35.547 --> 00:02:42.286
So this has to be accounting for
all of those possible paths.

37
00:02:46.262 --> 00:02:48.099
Again, we referenced this
earlier in the course.

38
00:02:48.099 --> 00:02:51.202
This is one of those fundamental
principles that when you study

39
00:02:51.202 --> 00:02:54.726
something like discrete math,
you just start getting really good at.

40
00:02:54.726 --> 00:02:59.872
You start getting almost this spider
sense intuition of, I know that

41
00:02:59.872 --> 00:03:05.351
this is equal to that,because it couldn't
possibly be divided any further.

42
00:03:05.351 --> 00:03:08.882
There are no other options,
so it has to be this, or

43
00:03:08.882 --> 00:03:11.277
the reverse of that has to be this.

44
00:03:11.277 --> 00:03:14.724
We get these intuition points
from a study of discrete math, so

45
00:03:14.724 --> 00:03:16.350
it is worth thinking about and

46
00:03:16.350 --> 00:03:20.594
looking into, that's a good foundation for
a lot of your algorithmic work.

47
00:03:24.887 --> 00:03:29.379
Now, we have not yet answered how do I
figure out what countPaths(3,5) is, (9,5),

48
00:03:29.379 --> 00:03:30.175
or (0,5).

49
00:03:30.175 --> 00:03:31.917
We haven't answered that yet.

50
00:03:31.917 --> 00:03:34.261
We're gonna answer that in just a moment.

51
00:03:34.261 --> 00:03:39.071
But whatever that answer is, do we now
agree that if I add those three numbers

52
00:03:39.071 --> 00:03:43.600
together, that it has to give me
the answer to countPaths (4,6)?

53
00:03:46.735 --> 00:03:51.082
If you're still doubting it,
just keep looking at that dial pad and

54
00:03:51.082 --> 00:03:55.736
looking at the possible ways that
you could go, and convince yourself,

55
00:03:55.736 --> 00:04:00.182
is there anything else that I would
need to account for other counts?

56
00:04:00.182 --> 00:04:03.752
And hopefully, you'll eventually get that
light-bulb moment where you realize, yep,

57
00:04:03.752 --> 00:04:05.154
this has to account for all of them.

58
00:04:09.110 --> 00:04:12.459
So how would I answer the countPaths(3,
5)?

59
00:04:12.459 --> 00:04:15.025
By the way,
these are what those actual numbers are.

60
00:04:17.209 --> 00:04:24.483
The 168 possible paths that I can
take from digit 4 making 6 hops.

61
00:04:24.483 --> 00:04:27.701
And here's the breakdown of those,
52, 52, and 64.

62
00:04:32.327 --> 00:04:35.215
How do I figure out something
like countPaths(3,5)?

63
00:04:35.215 --> 00:04:40.985
How I figure out countPaths(3,5) is I look
at all the places I can go from digit 3.

64
00:04:40.985 --> 00:04:44.857
What are the places that
I can go from digit 3?

65
00:04:44.857 --> 00:04:46.255
&gt;&gt; 4 and 8.

66
00:04:46.255 --> 00:04:48.012
&gt;&gt; 4 and 8.

67
00:04:48.012 --> 00:04:52.438
And I'm gonna take one fewer
hopCount from those places, right?

68
00:04:52.438 --> 00:04:57.493
So starting from digit 4 with hopCount
of 4 and starting from digit 8

69
00:04:57.493 --> 00:05:02.902
with hopCount of 4, the amount of paths
that I can do there has to be equal.

70
00:05:06.966 --> 00:05:11.331
The two together have to
be equal to the (3, 5).

71
00:05:11.331 --> 00:05:13.217
And so on, we could continue.

72
00:05:13.217 --> 00:05:19.545
We could say (4, 4) would break down into
what its three constituent ones would be.

73
00:05:19.545 --> 00:05:23.530
And countPaths would break down into
what its two constituent paths would be.

74
00:05:23.530 --> 00:05:26.464
We could keep going until,
when would we stop?

75
00:05:30.560 --> 00:05:34.056
When hop count was 0,
because there's nowhere else to go.

76
00:05:34.056 --> 00:05:38.734
[LAUGH] We've made all the hops.

77
00:05:38.734 --> 00:05:39.830
You follow me?

78
00:05:42.108 --> 00:05:45.204
In other words,
if I were to call countPaths(3,0),

79
00:05:45.204 --> 00:05:46.982
what should the return value be?

80
00:05:50.348 --> 00:05:53.026
This is a very critical point.

81
00:05:53.026 --> 00:05:57.894
Think to yourself, if I call
countPaths(3,0) starting from digit

82
00:05:57.894 --> 00:06:01.418
3 with no hops,
how many possible paths are there?

83
00:06:03.967 --> 00:06:04.582
&gt;&gt; 0.

84
00:06:04.582 --> 00:06:07.518
&gt;&gt; There's only two rational answers,
0 or 1.

85
00:06:07.518 --> 00:06:11.520
I'm going to suggest to you
why 1 is the right answer,

86
00:06:11.520 --> 00:06:16.746
because if they were all 0s at the end,
we would never add anything up.

87
00:06:16.746 --> 00:06:21.590
So we have to define the base
case as if I am on the key and

88
00:06:21.590 --> 00:06:26.115
I can't move anywhere,
there is only one path for

89
00:06:26.115 --> 00:06:29.691
me to take, which is to stay right put.

90
00:06:29.691 --> 00:06:32.717
So we define that base case as 1.

91
00:06:34.168 --> 00:06:37.942
If we define it as 0,
all of our math is gonna add up to 0.

92
00:06:37.942 --> 00:06:39.801
[LAUGH] You follow me?

93
00:06:42.684 --> 00:06:47.406
So we actually already now have the
constituent and it's not that much code.

94
00:06:47.406 --> 00:06:53.310
We already have the constituent pieces
that we need to be able to calculate this.

95
00:06:53.310 --> 00:06:59.142
We have the constituent pieces, because
we see the recurrence relationship,

96
00:06:59.142 --> 00:07:04.972
which is the countPaths of any starting
digit with a hopCount is equal to the 2 or

97
00:07:04.972 --> 00:07:09.079
3 possible sub-countPaths
with one fewer hopCount.

98
00:07:09.079 --> 00:07:13.480
That is the countPaths for all of my
reachable teams with one fewer hopCount.

99
00:07:13.480 --> 00:07:18.515
And we know that the base case is
that when hopCount comes in as 0,

100
00:07:18.515 --> 00:07:19.627
what do we do?

101
00:07:19.627 --> 00:07:20.507
We return 1.

102
00:07:23.498 --> 00:07:27.057
So from that conceptual basis alone,

103
00:07:27.057 --> 00:07:31.518
we now have what we need
to be able to solve this.

104
00:07:31.518 --> 00:07:34.949
I'm wanna give you one
further set of diagrams for

105
00:07:34.949 --> 00:07:37.650
you to understand what's happening.

106
00:07:37.650 --> 00:07:41.646
In this diagram that I'm about
to do that's gonna animate out,

107
00:07:41.646 --> 00:07:45.274
f is the countPath, but
I just replaced countPath with f,

108
00:07:45.274 --> 00:07:49.508
because there's a bunch of stuff and
I needed to save space, okay?

109
00:07:49.508 --> 00:07:54.175
But when you see f(4, 6),
that means countPaths (4,6).

110
00:07:54.175 --> 00:07:58.890
There are two kinds of ways that we could
traverse through all of the possible paths

111
00:07:58.890 --> 00:08:00.062
to do the counting.

112
00:08:00.062 --> 00:08:01.560
We've referred to these before.

113
00:08:01.560 --> 00:08:04.486
We've referred to breadth-first and
depth-first.

114
00:08:04.486 --> 00:08:06.892
You may have seen those terms before, but

115
00:08:06.892 --> 00:08:10.073
this animation shows you
the difference in ordering.

116
00:08:10.073 --> 00:08:16.140
So this would be a breadth-first traversal
through all of those possible counts.

117
00:08:16.140 --> 00:08:21.504
And, You can see that

118
00:08:21.504 --> 00:08:26.303
we are going to the leaf level and going
all the way through the possible leaves,

119
00:08:26.303 --> 00:08:30.671
and then going to the next level and
checking out all of their leaves, and

120
00:08:30.671 --> 00:08:34.635
then going to the next level and
checking out all of their leaves.

121
00:08:34.635 --> 00:08:36.422
We are going wide before we go deep,

122
00:08:36.422 --> 00:08:40.000
and that's why this is called
a breadth-first traversal.

123
00:08:40.000 --> 00:08:46.060
But you see there that the countPath
(4.6) is the same thing.

124
00:08:46.060 --> 00:08:48.010
I wish I had a red mouse cursor here.

125
00:08:48.010 --> 00:08:51.520
But the countPath (4,6), this root node,

126
00:08:51.520 --> 00:08:55.801
is the same thing as visiting
the countPath (3,5) plus

127
00:08:55.801 --> 00:09:01.196
the countPath(9,5) plus
the countPath (0,5), who, in turn,

128
00:09:01.196 --> 00:09:08.010
are the same thing as f(3,5) is the same
thing as visiting f(4,4) and f(8,4).

129
00:09:08.010 --> 00:09:13.620
f(9,5) is the same thing as visiting
f(2,4) and f(4,4) and so on.

130
00:09:13.620 --> 00:09:15.230
Does everybody see that?

131
00:09:15.230 --> 00:09:20.570
This isn't an actual physical tree,
it's a conceptual tree for the call stack.

132
00:09:22.400 --> 00:09:27.201
These are all the function calls
that we would make, recursively,

133
00:09:27.201 --> 00:09:28.810
as we went through it.

134
00:09:28.810 --> 00:09:32.257
Because counting addition is commutative,

135
00:09:32.257 --> 00:09:36.620
it doesn't matter what order
we go through in this tree.

136
00:09:38.040 --> 00:09:42.108
But that would be the breadth-first
traversal, is looking at all of those and

137
00:09:42.108 --> 00:09:43.411
looking at all of those.

138
00:09:43.411 --> 00:09:47.696
As it turns out, it's going to be much,
much easier to write

139
00:09:47.696 --> 00:09:52.167
a depth-first computation of this,
far fewer lines of code.

140
00:09:52.167 --> 00:09:55.040
So here's the animation for
the depth-first traversal.

141
00:09:56.296 --> 00:10:00.850
By the way, we could write this, we would
write it as a for loop with a queue.

142
00:10:00.850 --> 00:10:04.080
Breadth-first traversal is
an iterative for loop with a queue.

143
00:10:04.080 --> 00:10:09.102
And I hinted at that when we talked about
the problem before, you remember, okay?

144
00:10:09.102 --> 00:10:10.510
We're not gonna write that code, but

145
00:10:10.510 --> 00:10:13.647
you could write a version of this with an
iterative and queue, it's just more work.

146
00:10:16.088 --> 00:10:20.223
So the depth-first traversal looks
like this, look at where we go first.

147
00:10:20.223 --> 00:10:24.555
We go from (4, 6) down to (3, 5),
down to (4, 4), down to (3, 3),

148
00:10:24.555 --> 00:10:26.320
all the way down to the leaf.

149
00:10:26.320 --> 00:10:29.294
And then we backtrack up and
then we go down to the leaves again and

150
00:10:29.294 --> 00:10:33.180
then we backtrack up, and
we go down to the leaves again and so on.

151
00:10:33.180 --> 00:10:35.953
And that's why you can see with
that animation that we're going

152
00:10:35.953 --> 00:10:37.913
depth-first rather than breadth-first.

153
00:10:46.029 --> 00:10:49.766
Both traversals would visit every node,
and

154
00:10:49.766 --> 00:10:54.781
therefore both traversals would
make every function call,

155
00:10:54.781 --> 00:11:01.484
and therefore the entire resolution of
this would be the same, which is 168.

156
00:11:01.484 --> 00:11:04.939
These are two different ways of
conceptualizing the problem.

157
00:11:04.939 --> 00:11:08.430
And it turns out that even though
they would both give the same answer,

158
00:11:08.430 --> 00:11:11.282
one of them is drastically
easier to code than the other.

159
00:11:13.485 --> 00:11:14.588
Follow me?

160
00:11:14.588 --> 00:11:18.074
But they are isomorphic,
you could write them in either way,

161
00:11:18.074 --> 00:11:21.910
since the recursion is gonna be
a lot easier, make a lot more sense.

162
00:11:23.170 --> 00:11:25.301
So we're gonna do this
approach with recursion.

163
00:11:25.301 --> 00:11:29.364
So hopefully you now are getting
enough of the sense of that,

164
00:11:29.364 --> 00:11:35.320
that we can, Tackle writing
the recursive version of countPaths.

165
00:11:35.320 --> 00:11:40.528
And while that was a lot of words for
me to describe the algorithm, it might

166
00:11:40.528 --> 00:11:46.580
be somewhat anticlimactic that it's only
gonna be a handful of lines of code, okay?

167
00:11:48.070 --> 00:11:51.100
Remember in recursion,
we always need a base case.

168
00:11:51.100 --> 00:11:54.862
What was our base case?

169
00:12:06.828 --> 00:12:11.663
What did I say we were going to simply
define as happening at some point?

170
00:12:13.998 --> 00:12:16.114
&gt;&gt; Return 1 where there's no hops.

171
00:12:16.114 --> 00:12:20.962
&gt;&gt; When the hopCount was 0,
we defined it as?

172
00:12:20.962 --> 00:12:23.257
&gt;&gt; [INAUDIBLE] 1.
&gt;&gt; A path count of 1, right?

173
00:12:23.257 --> 00:12:25.038
We just stay in place.

174
00:12:25.038 --> 00:12:31.648
So if hopCount is 0, return 1.

175
00:12:40.360 --> 00:12:44.646
I now need a variable
that I will increment.

176
00:12:44.646 --> 00:12:47.663
I'll start it at 0, and
I'm gonna call this pathCount, and

177
00:12:47.663 --> 00:12:49.763
that is going to be
the thing that I return.

178
00:12:55.146 --> 00:12:59.935
Now, from a given starting digit,
how do I know which

179
00:12:59.935 --> 00:13:04.951
nodes in the conceptual call
stack tree I need to visit?

180
00:13:04.951 --> 00:13:08.737
What thing tells me
the answer to that question?

181
00:13:08.737 --> 00:13:14.240
Given a starting digit of, say, 4,
how do I know where I need to visit?

182
00:13:14.240 --> 00:13:20.001
I need to visit a certain
set of digits from what?

183
00:13:22.676 --> 00:13:24.419
&gt;&gt; The reachable keys?

184
00:13:24.419 --> 00:13:26.844
&gt;&gt; It's calling the reachable
keys function, yes, but

185
00:13:26.844 --> 00:13:29.281
we don't even need to call
that function in this case.

186
00:13:29.281 --> 00:13:33.995
We can literally just do
nearby keys of starting digit,

187
00:13:33.995 --> 00:13:37.220
right, cuz they're the same thing.

188
00:13:37.220 --> 00:13:38.520
Let's just skip the function call.

189
00:13:40.710 --> 00:13:43.890
Yes, the JavaScript engine would probably
inline it, but there's no reason for

190
00:13:43.890 --> 00:13:45.050
us to call it unnecessarily.

191
00:13:47.260 --> 00:13:49.058
So if we were starting on digit 4,

192
00:13:49.058 --> 00:13:53.240
then this loop would do three
different iterations, right?

193
00:13:53.240 --> 00:13:59.703
It would do an iteration with 3, an
iteration with 9, and an iteration with 0.

194
00:13:59.703 --> 00:14:02.594
And so digit would be 3, 9, and 0.

195
00:14:02.594 --> 00:14:07.216
So you ready for the big reveal?

196
00:14:07.216 --> 00:14:10.206
pathCount incremented by,

197
00:14:12.289 --> 00:14:16.913
CountPaths with the digit
that we're looking at,

198
00:14:16.913 --> 00:14:21.655
in this case, 3, 9, and
0, and hopCount -1.

199
00:14:25.619 --> 00:14:30.234
So hopCount starts out at 6, and then on
the next recursive call stack, it's 5 and

200
00:14:30.234 --> 00:14:31.995
then it's 4 and then it's 3.

201
00:14:31.995 --> 00:14:36.295
And eventually, it gets to 0,
and what do we do?

202
00:14:36.295 --> 00:14:41.582
&gt;&gt; Return.
&gt;&gt; We return 1.

203
00:14:50.761 --> 00:14:55.148
I had to spend 15 minutes explaining
through slides and diagrams and

204
00:14:55.148 --> 00:14:59.683
all kinds of complicated animations
that which only took us a grand total

205
00:14:59.683 --> 00:15:01.561
of six lines of code to write.

206
00:15:08.522 --> 00:15:14.207
Still, if you were presented
this problem in a job interview,

207
00:15:14.207 --> 00:15:18.607
and you wrote those six
lines of code correctly,

208
00:15:18.607 --> 00:15:22.272
I think it's probably an instant hire.

209
00:15:22.272 --> 00:15:27.295
[LAUGH] Because 99.9% of people
would stare blankly at the screen,

210
00:15:27.295 --> 00:15:33.002
they'd fumble around, and maybe eventually
get something kind of on the path.

211
00:15:33.002 --> 00:15:38.230
But this illustrates how
important it is as a skill

212
00:15:38.230 --> 00:15:44.090
that we engineers need that
we be able to think this way.

213
00:15:45.410 --> 00:15:47.435
Because once I taught
you to think this way,

214
00:15:47.435 --> 00:15:50.570
it didn't actually take much effort
to code that way, didn't it?

215
00:15:51.700 --> 00:15:52.990
What was the real challenge?

216
00:15:54.420 --> 00:15:58.000
Helping you to understand
the mental model, right?

217
00:15:58.000 --> 00:16:03.861
If you can think algorithmically,
you can code algorithmically.

218
00:16:03.861 --> 00:16:04.412
You follow me?

219
00:16:08.188 --> 00:16:09.727
Let's test it.

220
00:16:09.727 --> 00:16:16.956
Let's go back over to the browser,
refresh the page.

221
00:16:16.956 --> 00:16:23.268
And we said that we wanted to take 6 hops,
and we wanted to start from 4,

222
00:16:23.268 --> 00:16:27.929
and we know that the answer should be 168,
right?

223
00:16:27.929 --> 00:16:31.019
Let's try, and

224
00:16:31.019 --> 00:16:35.659
there we got our 168.

