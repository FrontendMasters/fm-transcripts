WEBVTT

1
00:00:00.400 --> 00:00:02.590
Okay, here we are in the code editor.

2
00:00:02.590 --> 00:00:06.094
First things, we need to undo
the work we did in option 3.

3
00:00:06.094 --> 00:00:08.740
We're gonna get rid of
the memoization stuff.

4
00:00:08.740 --> 00:00:11.107
That was a cool trick, but
for this particular problem,

5
00:00:11.107 --> 00:00:12.450
there was a much better option.

6
00:00:14.010 --> 00:00:16.979
If you try tabulation and
that ends up not working,

7
00:00:16.979 --> 00:00:20.430
I think the next best one is
often memoization, but again,

8
00:00:20.430 --> 00:00:25.060
you have to make sure you're using
something in the appropriate way.

9
00:00:25.060 --> 00:00:29.760
Okay, so
what are we going to do to do countPaths?

10
00:00:29.760 --> 00:00:33.390
So basically, I'm going to delete
what's currently in countPaths.

11
00:00:34.580 --> 00:00:37.813
Actually, I guess I should have
probably kept that first one,

12
00:00:37.813 --> 00:00:40.140
because that base
condition stays the same.

13
00:00:41.210 --> 00:00:46.267
The base condition is still if we
call countPaths with a hopCount is 0,

14
00:00:46.267 --> 00:00:51.830
the base condition is still the only thing
that you can do is stay on that digit,

15
00:00:51.830 --> 00:00:53.631
so that's a count of 1.

16
00:00:57.751 --> 00:01:02.535
All right, remember in the slides, and
if you want to have the slides up while

17
00:01:02.535 --> 00:01:06.656
I'm typing, sometimes that's
a little more helpful for folks to

18
00:01:06.656 --> 00:01:11.461
kind of visually connect or have the
slides on a separate window side by side.

19
00:01:11.461 --> 00:01:14.271
But the first step that
we wanted to do was have,

20
00:01:16.407 --> 00:01:21.026
An array that was initialized to all 1s.

21
00:01:21.026 --> 00:01:22.980
That was our priorPathCount.

22
00:01:22.980 --> 00:01:27.230
That basically represents calling each
one of these functions with hopCount 0.

23
00:01:27.230 --> 00:01:31.310
We're just gonna go ahead and pre-fill
a set of buckets with all those ones.

24
00:01:31.310 --> 00:01:36.384
So our trick in JavaScript for
creating an array of ten elements long

25
00:01:36.384 --> 00:01:41.291
with 1s in it is to do array of ten and
then fill with the one value.

26
00:01:43.103 --> 00:01:47.878
So that's our little temporary
priorPathCounts that we will replace each

27
00:01:47.878 --> 00:01:48.793
time as we go.

28
00:01:52.381 --> 00:01:55.422
We're gonna set ourselves up a loop.

29
00:01:55.422 --> 00:01:57.690
This loop is the hopCount.

30
00:01:57.690 --> 00:02:02.213
Remember I told you we had an iteration
count that was just decrementing hops, so

31
00:02:02.213 --> 00:02:06.938
I'm gonna have it counting upward rather
than counting downward, but only because

32
00:02:06.938 --> 00:02:11.090
it's a little bit more convenient
to write the terminating condition.

33
00:02:11.090 --> 00:02:15.717
But it's basically the same thing, we're
gonna do our six iterations because if we

34
00:02:15.717 --> 00:02:19.540
pass in hopCount of six,
we're gonna do six iterations here.

35
00:02:19.540 --> 00:02:25.390
So hops = 0,
hops less than hopCount, and hops++.

36
00:02:26.620 --> 00:02:27.690
That's our outer loop.

37
00:02:29.510 --> 00:02:34.930
And whatever our loop ends up computing,
the thing that we're

38
00:02:34.930 --> 00:02:42.100
going to return is whatever is in prior
pathCounts at the position startingDigit.

39
00:02:44.544 --> 00:02:48.671
We're taking advantage of the fact
that our digits are zero-based and

40
00:02:48.671 --> 00:02:50.400
our arrays are zero-based.

41
00:02:50.400 --> 00:02:54.360
If your problem had a different
set of values for the buckets,

42
00:02:54.360 --> 00:02:57.114
then you'd need to do a translation here.

43
00:02:57.114 --> 00:03:01.996
But in our case, it's quite convenient
that the digits on the dialpad happened to

44
00:03:01.996 --> 00:03:05.124
be zero-based,
just like our arrays are indexed.

45
00:03:05.124 --> 00:03:07.390
But that ends up selecting that bucket.

46
00:03:07.390 --> 00:03:12.078
For example, 4 would have 168 in it,
and that's what we return.

47
00:03:14.778 --> 00:03:21.331
For each hopCount, remember that we
did a loop through all ten digits.

48
00:03:21.331 --> 00:03:26.465
I'm sorry, the first thing that we
did was set up a bucket of 0s, so

49
00:03:26.465 --> 00:03:34.247
that will call pathCount,
With ten buckets all filled with 0s.

50
00:03:34.247 --> 00:03:37.750
That's our actual buckets that
we're gonna be filling into.

51
00:03:37.750 --> 00:03:43.084
And then we will replace priorPathCounts
with pathCounts when we slide it up.

52
00:03:43.084 --> 00:03:48.986
All right, now we need to set up a loop
to go through all the ten digits.

53
00:03:54.475 --> 00:03:55.494
It's pretty straightforward.

54
00:03:55.494 --> 00:03:57.572
Hopefully, that makes sense.

55
00:03:57.572 --> 00:04:00.472
We need to go through the ten digits,
so we set up a plain old normal for

56
00:04:00.472 --> 00:04:01.327
loop to go through.

57
00:04:01.327 --> 00:04:03.360
And what was the last thing that we did?

58
00:04:03.360 --> 00:04:05.383
For each digit, what did we do?

59
00:04:10.951 --> 00:04:15.815
We visited the other digits
that we could have been at to

60
00:04:15.815 --> 00:04:20.373
get to that digit, so
we need one more loop inside.

61
00:04:20.373 --> 00:04:25.587
I'll say n is the digit of the nearby key,

62
00:04:28.508 --> 00:04:30.756
Of the digit that we're on.

63
00:04:30.756 --> 00:04:36.183
So if we are on digit 0,
the nearby keys of digit will give

64
00:04:36.183 --> 00:04:41.496
us an array of 4 and 6, so
we will go visit 4 and 6, and

65
00:04:41.496 --> 00:04:47.190
we will take into our current
count at digitPosition.

66
00:04:47.190 --> 00:04:53.481
We will simply add in or append in
the value that is in the priorPathCount,,

67
00:04:55.479 --> 00:04:57.871
Of n.

68
00:04:57.871 --> 00:05:00.139
So remember when we reached
out to the other two and

69
00:05:00.139 --> 00:05:04.480
we grabbed their priorPathCounts and added
them together and made our own bucket?

70
00:05:04.480 --> 00:05:07.785
So we're going through all these ten
buckets and grabbing in the two or

71
00:05:07.785 --> 00:05:12.020
the three from the other places,
adding them together to create pathCount.

72
00:05:12.020 --> 00:05:16.909
And our last step in this
algorithm is at the end of

73
00:05:16.909 --> 00:05:22.275
each hop iteration, so
on the outside of the digits,

74
00:05:22.275 --> 00:05:27.540
we simply replace
priorPathCount with pathCount.

75
00:05:29.030 --> 00:05:34.927
This is 11 lines of code and the recursive
implementation was 6 lines of code,

76
00:05:34.927 --> 00:05:38.780
so yes, this is a little bit more code.

77
00:05:38.780 --> 00:05:40.698
But let's take a step back and

78
00:05:40.698 --> 00:05:45.009
realize that this is not hundreds
of lines of complex code, is it?

79
00:05:46.030 --> 00:05:48.100
It's a set of for loops.

80
00:05:49.720 --> 00:05:53.135
And most of us have enough
familiarity with programming and

81
00:05:53.135 --> 00:05:56.700
with JavaScript that we can
manage to reason about for loops.

82
00:05:58.140 --> 00:06:01.790
The real key here is not
the code that we could write.

83
00:06:01.790 --> 00:06:03.588
I mean, yes, that's a thing,

84
00:06:03.588 --> 00:06:07.264
we need to be able to translate
what we've planned out into code.

85
00:06:07.264 --> 00:06:11.508
But I figured out on the slides
what the algorithm was, and

86
00:06:11.508 --> 00:06:15.065
then I simply wrote a line of code for
each slide.

87
00:06:15.065 --> 00:06:18.824
That's it, it's not like I had to
come up with some whole new theory or

88
00:06:18.824 --> 00:06:20.570
whole new algorithm.

89
00:06:20.570 --> 00:06:23.800
I just figured out on those slides,
well, what would I need to do?

90
00:06:23.800 --> 00:06:27.821
I would need to do a loop for all
the hopCounts, and then for each of those

91
00:06:27.821 --> 00:06:32.445
hopCounts, I need to do a loop for all of
the digits, and for each of those digits,

92
00:06:32.445 --> 00:06:35.881
a loop for all of the nearby keys
that they could have been at.

93
00:06:35.881 --> 00:06:41.043
And that's it, so I needed three loops and
I needed two arrays.

94
00:06:41.043 --> 00:06:45.170
I wrote it out on the slides just like you
could write it out on a sheet of paper,

95
00:06:45.170 --> 00:06:48.110
coming up with a plan for how to solve it.

96
00:06:48.110 --> 00:06:51.630
The translation to code is
almost the trivial part.

97
00:06:51.630 --> 00:06:55.560
And I know that we as engineers kinda
feel like maybe it's the reverse.

98
00:06:55.560 --> 00:06:59.211
We kinda feel like, no, the really
hard part is the writing of the code.

99
00:06:59.211 --> 00:07:03.072
The big takeaway that I hope you're
getting from this workshop, and

100
00:07:03.072 --> 00:07:04.870
I keep repeating myself over and

101
00:07:04.870 --> 00:07:09.280
over, you've got to first think the
problem before you can code the problem.

102
00:07:10.650 --> 00:07:12.630
If you can solve thinking the problem,

103
00:07:12.630 --> 00:07:16.180
the code is probably gonna shake
itself out pretty straightforward.

104
00:07:17.210 --> 00:07:21.393
I mean that's not entirely true, because,
yes, there are complexities depending on

105
00:07:21.393 --> 00:07:24.120
our language,
depending on the mechanisms that we use.

106
00:07:24.120 --> 00:07:28.753
Sometimes we do face these challenges, but
the vast majority of the problem here is

107
00:07:28.753 --> 00:07:32.012
getting our brains to think
about the problem correctly.

108
00:07:34.567 --> 00:07:37.925
We have to think algorithms
before we can code algorithms.

109
00:07:41.841 --> 00:07:47.339
As I've said multiple times in this
course, there's no way that anybody

110
00:07:47.339 --> 00:07:53.457
could expect you to now be an expert on
bottom-up dynamic programming tabulation

111
00:07:53.457 --> 00:07:59.328
because you just simply saw one problem
that one guy helped you write code for.

112
00:07:59.328 --> 00:08:00.629
That's not sufficient.

113
00:08:00.629 --> 00:08:04.960
But hopefully, there's enough from the way
I've described it, cuz when I was trying

114
00:08:04.960 --> 00:08:08.420
to learn this stuff, there was not
a lot of great material out there.

115
00:08:08.420 --> 00:08:14.512
The only material I found was, if you
wanna compute Fibonacci with tabulation or

116
00:08:14.512 --> 00:08:17.473
something, this is very toy problems and

117
00:08:17.473 --> 00:08:22.234
the solutions end up looking very,
very specific to the problem.

118
00:08:22.234 --> 00:08:27.089
And this one is a solution that's very,
very specific to the problem, but

119
00:08:27.089 --> 00:08:31.510
there are pieces of this that
I do see as generalizable.

120
00:08:31.510 --> 00:08:36.613
If I can think about a problem as having
a very specific defined set of inputs,

121
00:08:36.613 --> 00:08:39.203
if I can figure out what those would be,

122
00:08:39.203 --> 00:08:43.441
then I can figure out how to count
each of them in the reverse order

123
00:08:43.441 --> 00:08:47.710
that I would go through it when I
was doing a recursive approach.

124
00:08:47.710 --> 00:08:51.673
So maybe the first step is to
write the recursive version, so

125
00:08:51.673 --> 00:08:56.723
that I have my brain in tune with what
the order is, if I would do it recursively

126
00:08:56.723 --> 00:09:01.330
in this order, do the reverse order,
to do a bottom-up tabulation.

127
00:09:02.380 --> 00:09:05.437
Those are things that
are generalizable principles and

128
00:09:05.437 --> 00:09:09.599
hopefully will help you attempt this
technique the next time you're trying

129
00:09:09.599 --> 00:09:11.890
to write a recursive counting solution.

130
00:09:13.550 --> 00:09:15.575
Questions, I see questions.

131
00:09:15.575 --> 00:09:20.802
&gt;&gt; Having three nested loops here,
is this acceptable in this scenario,

132
00:09:20.802 --> 00:09:24.558
because the iterations do
not grow much as n grows?

133
00:09:24.558 --> 00:09:26.697
&gt;&gt; The iterations don't grow any.

134
00:09:26.697 --> 00:09:29.981
[LAUGH] This is all fixed work.

135
00:09:29.981 --> 00:09:33.676
Look at the values that
are returning here.

136
00:09:33.676 --> 00:09:36.353
We have a fixed for loop of 10,

137
00:09:36.353 --> 00:09:41.322
that never changes no matter
how many hopCounts there are.

138
00:09:41.322 --> 00:09:46.012
And we have this for loop, this inner for
loop is only looking at the nearby digits,

139
00:09:46.012 --> 00:09:50.103
which is based on the fixed geometry
of the dial pad which never changes.

140
00:09:50.103 --> 00:09:54.120
It's either 2 or 3 or 0 every single time.

141
00:09:54.120 --> 00:10:00.029
So these two inner loops don't grow
at all and this loop only grows at n.

142
00:10:00.029 --> 00:10:05.372
So that should tell you more than
anything why this is a linear algorithm,

143
00:10:05.372 --> 00:10:10.296
cuz the only thing that grows is
the outer loop and it only grows by n.

144
00:10:10.296 --> 00:10:12.993
There's nothing else complecting it.

145
00:10:12.993 --> 00:10:15.610
There's nothing else adding to it.

146
00:10:15.610 --> 00:10:19.026
It's not like one of these inner
loops is then also bounded by n, so

147
00:10:19.026 --> 00:10:21.409
now it's an n squared or
something like that.

148
00:10:23.083 --> 00:10:28.945
If we go back to the browser,
just to kinda get a sense of things,

149
00:10:28.945 --> 00:10:33.288
I'm gonna refresh, and
I'm gonna go ahead and

150
00:10:33.288 --> 00:10:38.085
start us at 25, [LAUGH] and
I'm gonna click the 4.

151
00:10:38.085 --> 00:10:40.929
And we're gonna see that
that was 0.2 milliseconds.

152
00:10:40.929 --> 00:10:45.452
And then I'm gonna go up to 250,
and that was 1.2 milliseconds.

153
00:10:45.452 --> 00:10:51.137
And then I'm gonna go up to 2500,
and that was 13.1 milliseconds.

154
00:10:52.998 --> 00:10:55.709
Because it's doing almost no work.

155
00:10:57.066 --> 00:10:59.987
It's just simply running through.

156
00:10:59.987 --> 00:11:02.422
And if we go back to the slides,

157
00:11:02.422 --> 00:11:07.970
we'll be able to kind of reinforce
what's actually happening here.

158
00:11:09.890 --> 00:11:13.403
An O(6) does exactly 120 operations, and

159
00:11:13.403 --> 00:11:18.030
if you do an O(60) it does
exactly 1200 operations, and

160
00:11:18.030 --> 00:11:23.280
if you do an O(600),
it does exactly 12000 operations.

161
00:11:23.280 --> 00:11:26.170
I literally counted those,
I put a countering.

162
00:11:27.790 --> 00:11:31.530
No matter how big n is,
if you multiply n by 10,

163
00:11:31.530 --> 00:11:35.821
you just get a number of
operations multiplied by 10,

164
00:11:35.821 --> 00:11:42.514
which proves to use that this is a perfect
linear solution, exactly linear solution.

165
00:11:42.514 --> 00:11:47.273
Like I said, it's rare that we get to
those unicorn solutions, but when we do,

166
00:11:47.273 --> 00:11:52.175
that's when you turn the computer off and
you get a beer, and you're like, hah,

167
00:11:52.175 --> 00:11:52.691
did it.

168
00:11:52.691 --> 00:11:55.199
I earned my pay for today.

169
00:11:55.199 --> 00:11:59.120
I thought about the problem and
I figured out the better solution.

170
00:11:59.120 --> 00:12:03.060
Any other questions or
comments about the Knight's Dialer?

171
00:12:04.890 --> 00:12:09.003
&gt;&gt; Comparing the two, cuz the previous
recursion with the memoization was

172
00:12:09.003 --> 00:12:12.983
top-down and this is bottom-up,
if there was a case in production of

173
00:12:12.983 --> 00:12:16.710
a Knight's Dialer, would this
actually be what is put it to use?

174
00:12:16.710 --> 00:12:20.199
&gt;&gt; If I had to do the Knight's Dialer for
production, would I do this?

175
00:12:20.199 --> 00:12:23.280
&gt;&gt; Yeah.
&gt;&gt; I 100% would write that code with

176
00:12:23.280 --> 00:12:25.248
a bottom-up tabulation.

177
00:12:25.248 --> 00:12:28.652
My process is that my brain does not,
for me,

178
00:12:28.652 --> 00:12:33.313
my brain does not naturally think
about the problem in reverse

179
00:12:33.313 --> 00:12:38.670
the way the bottom-up tabulation
requires you to think about it.

180
00:12:38.670 --> 00:12:44.231
So for me, I almost always have to solve
the problem top-down recursively first,

181
00:12:44.231 --> 00:12:48.452
knowing that it's likely not to
be the performance solution.

182
00:12:48.452 --> 00:12:53.558
And then I have to decide,
is there a way for me to do it in reverse?

183
00:12:53.558 --> 00:12:57.254
In other words, are the number of
possible buckets for all those

184
00:12:57.254 --> 00:13:01.718
leaves to be in a fixed and small enough
number or is it practically infinite?

185
00:13:01.718 --> 00:13:06.707
If it's a fixed and small enough number
and if the problem is a counting thing or

186
00:13:06.707 --> 00:13:11.631
is something that I can make act like
counting, right, can I make that work?

187
00:13:11.631 --> 00:13:14.960
Then I'll start trying to write
the bottom-up tabulation.

188
00:13:14.960 --> 00:13:19.448
And if not, I'll apply a memorization and
see, I'll look at my problem, but

189
00:13:19.448 --> 00:13:23.460
I'll apply memorization to see if
that solves my recursive problem.

190
00:13:23.460 --> 00:13:25.689
So that would be my
general approach to this.

191
00:13:25.689 --> 00:13:28.357
I hope maybe someday I can
just look at a problem and

192
00:13:28.357 --> 00:13:32.040
immediately know,
that's a bottom-up tabulation.

193
00:13:32.040 --> 00:13:35.404
I'm not there yet, but
I've at least generalized enough

194
00:13:35.404 --> 00:13:38.974
of this that I can see what parts
of this do need to be present for

195
00:13:38.974 --> 00:13:41.830
this kind of solution to even be possible.

196
00:13:41.830 --> 00:13:43.220
Yeah.

197
00:13:43.220 --> 00:13:46.685
&gt;&gt; Comment on interpreting this problem.

198
00:13:46.685 --> 00:13:50.979
One of the features,
and this is quite rare,

199
00:13:50.979 --> 00:13:54.942
problem you had is you have a stable tree.

200
00:13:54.942 --> 00:13:58.414
Your state tree is finite short, and

201
00:13:58.414 --> 00:14:02.568
it is a legitimate tree, so no cycles, no.

202
00:14:02.568 --> 00:14:09.670
And so as you expand, it expands
to an endpoint to a fixed width.

203
00:14:09.670 --> 00:14:10.720
That's your cue.

204
00:14:12.110 --> 00:14:16.982
When you can say, that fixed
width fits nicely in a small box,

205
00:14:16.982 --> 00:14:20.723
that's the cue that this
could be a good strategy,

206
00:14:20.723 --> 00:14:25.084
because the function is
self-organizing in those cases.

207
00:14:25.084 --> 00:14:27.060
So that's just a comment, but
I agree with you very much.

208
00:14:27.060 --> 00:14:29.749
It's not something that's
gonna jump out to you.

209
00:14:29.749 --> 00:14:31.974
&gt;&gt; Right, and
you do have to inspect the problem,

210
00:14:31.974 --> 00:14:33.707
you have to think about the problem.

211
00:14:33.707 --> 00:14:37.432
To put it in slightly different
terms than what he just said,

212
00:14:37.432 --> 00:14:40.584
if you think about it as
the recursive fanning out.

213
00:14:40.584 --> 00:14:45.840
If there's a convergence into and
I keep using this term of buckets, but

214
00:14:45.840 --> 00:14:51.008
as he said, it's kinda a finite set,
even if that finite set is large,

215
00:14:51.008 --> 00:14:54.990
if it's finite,
it can be done with this tabulation.

216
00:14:54.990 --> 00:15:00.216
But if as you fan out into all possible
solutions, you get to practically

217
00:15:00.216 --> 00:15:05.445
infinite, then this probably isn't
the algorithmic approach that's

218
00:15:05.445 --> 00:15:10.760
gonna prove fruitful for you, so
I probably wouldn't even try it.

219
00:15:10.760 --> 00:15:13.730
So let's take for example,
because this is segue for

220
00:15:13.730 --> 00:15:16.850
the next exercise that
we're gonna dive into.

221
00:15:16.850 --> 00:15:21.024
If you were trying to think
about all the possible words

222
00:15:21.024 --> 00:15:25.652
that you might be generating and
fanning out recursively and

223
00:15:25.652 --> 00:15:30.640
trying to generate a bunch
of different English words.

224
00:15:30.640 --> 00:15:36.100
Well, the English dictionary's 80,000
words, that is a fixed finite size.

225
00:15:36.100 --> 00:15:40.114
So if you were trying to count that,
you could have, practically speaking,

226
00:15:40.114 --> 00:15:43.440
100,000 buckets and
do the counting of that.

227
00:15:43.440 --> 00:15:48.086
But if it was all possible combinations of
characters that aren't constrained by they

228
00:15:48.086 --> 00:15:52.427
need to be valid words in the dictionary,
that's practically an infinite set.

229
00:15:52.427 --> 00:15:54.832
And if you have
a practically infinite set,

230
00:15:54.832 --> 00:15:57.500
that's not where this
algorithm is gonna work.

231
00:15:57.500 --> 00:16:01.511
So that's, I think, what he's saying, is
you have to be able to see that it's gonna

232
00:16:01.511 --> 00:16:03.760
converge to something finite,
not infinite.

233
00:16:05.650 --> 00:16:07.510
Yes, there's another question.

234
00:16:07.510 --> 00:16:09.069
&gt;&gt; What are the cons of tabulation?

235
00:16:10.810 --> 00:16:16.230
&gt;&gt; I mean, the big con to
tabulation is the unfamiliarity.

236
00:16:17.510 --> 00:16:21.580
It's not what most people
see other people writing.

237
00:16:21.580 --> 00:16:25.000
It's not what people pull out readily.

238
00:16:25.000 --> 00:16:29.840
And at least for me, it's not the way my
brain first thinks about the problem.

239
00:16:29.840 --> 00:16:34.462
Because, if I look at the function 4,
6, my brain starts with, okay,

240
00:16:34.462 --> 00:16:35.953
if I'm gonna recurse,

241
00:16:35.953 --> 00:16:40.968
I'm gonna break down the problem into
the hopCount of 5 and the hopCount of 4.

242
00:16:40.968 --> 00:16:43.089
It's the divide and
conquer way of thinking.

243
00:16:43.089 --> 00:16:48.990
So if you've been trained to think that
way, it's very hard to think in reverse.

244
00:16:48.990 --> 00:16:53.154
And once you get better at being able to
think in reverse, that gets easier, but

245
00:16:53.154 --> 00:16:56.636
I'm not sure it ever gets to the point
where that's the natural way

246
00:16:56.636 --> 00:16:59.570
that you think is to solve
a problem in reverse.

247
00:16:59.570 --> 00:17:01.036
That's just one of those
techniques that you pick up.

248
00:17:01.036 --> 00:17:05.632
So I'd say that's the big downside to it.

249
00:17:05.632 --> 00:17:11.008
The sort of secondary effect of that
is whatever code you write to do that,

250
00:17:11.008 --> 00:17:13.783
somebody else can read that code, but

251
00:17:13.783 --> 00:17:18.055
they can't understand why
that code solves the problem.

252
00:17:18.055 --> 00:17:21.862
I mean, most people are not gonna have
any trouble reading your three-nested

253
00:17:21.862 --> 00:17:22.445
for loops.

254
00:17:22.445 --> 00:17:25.327
It's pretty straightforward code,
it's not terribly declarative, but

255
00:17:25.327 --> 00:17:26.776
it's pretty straightforward code.

256
00:17:26.776 --> 00:17:30.741
Most people are not gonna really struggle
with understanding, I see some for

257
00:17:30.741 --> 00:17:31.740
loops here.

258
00:17:31.740 --> 00:17:36.276
But they are likely to strongly
struggle with seeing that code and

259
00:17:36.276 --> 00:17:40.160
understanding how that
code solves the problem.

260
00:17:40.160 --> 00:17:44.593
So there's an additional burden for
you to document, perhaps even creating

261
00:17:44.593 --> 00:17:48.701
the slides like I did, document why
that solution solves the problem.

262
00:17:48.701 --> 00:17:53.155
You have to remember that the code that
we write is our communication to other

263
00:17:53.155 --> 00:17:55.531
humans, including our future selves.

264
00:17:55.531 --> 00:17:59.106
And the code in this particular
solution is not doing

265
00:17:59.106 --> 00:18:02.120
a great job of explaining the why.

266
00:18:02.120 --> 00:18:04.620
It's doing a pretty good
job of explaining the how.

267
00:18:05.970 --> 00:18:09.240
So there's an additional documentation
burden to explain the why.

