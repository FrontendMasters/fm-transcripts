WEBVTT

1
00:00:00.000 --> 00:00:03.470
I figured we start with
the easy stuff first,

2
00:00:03.470 --> 00:00:07.960
the little bit lighter work,
which is I've got an array.

3
00:00:07.960 --> 00:00:09.852
Remember, I just had that,
I should have left it open.

4
00:00:09.852 --> 00:00:12.529
Remember, I have this JSON file.

5
00:00:12.529 --> 00:00:17.684
This is giving me an array of objects,
and we know with an array,

6
00:00:17.684 --> 00:00:24.376
the positioning of elements that's
numerically indexed sequentially, right?

7
00:00:24.376 --> 00:00:30.169
Given a lowercase h, for example,
how do I find and return just this object?

8
00:00:30.169 --> 00:00:33.289
That's what the lookup
functions job is to do,

9
00:00:33.289 --> 00:00:36.410
is to find the element in the list and
return it.

10
00:00:36.410 --> 00:00:42.101
So let's, for example,

11
00:00:42.101 --> 00:00:47.540
let me do a shorter word.

12
00:00:47.540 --> 00:00:56.143
I like this word, it's funny that
you can spell words like this.

13
00:00:58.463 --> 00:01:01.806
All of those are single letter elements.

14
00:01:01.806 --> 00:01:05.234
You can spell the word yucky, so let's
imagine that that's what we had typed in

15
00:01:05.234 --> 00:01:08.632
and we somehow found those symbols, so
we're just hard cutting that for now.

16
00:01:08.632 --> 00:01:11.692
And we're gonna test our
little lookup function,

17
00:01:11.692 --> 00:01:15.194
we need to be able to find each
one of those symbols, okay?

18
00:01:15.194 --> 00:01:17.521
So let's write some code to do that.

19
00:01:17.521 --> 00:01:20.006
I'm gonna give myself some space here so
it's easier to read.

20
00:01:28.171 --> 00:01:34.707
We have an array, it's not indexed on or
property named on the symbol name.

21
00:01:34.707 --> 00:01:40.335
So we don't have that available to us to
just look up and say single operation,

22
00:01:40.335 --> 00:01:44.534
give me the element of why we're
gonna have to look for it.

23
00:01:44.534 --> 00:01:46.908
So let's just do that work.

24
00:01:46.908 --> 00:01:51.215
Again remember that my suggestion is
always to write the most naïve and

25
00:01:51.215 --> 00:01:55.086
straightforward implementation first,
and then optimize,

26
00:01:55.086 --> 00:01:58.163
thinking of course about
optimization as you go.

27
00:01:58.163 --> 00:02:00.999
But don't get wrapped up
in optimizations too early,

28
00:02:00.999 --> 00:02:03.782
you do want to have a good
reference implementation.

29
00:02:07.011 --> 00:02:12.175
So I'm gonna do a for of loop here to go
over, I'm sorry, not of elementSymbol.

30
00:02:12.175 --> 00:02:15.009
The variable that we have is called
elements, so I'm gonna do for

31
00:02:15.009 --> 00:02:16.668
(let element of element), sorry.

32
00:02:20.477 --> 00:02:23.524
So each one of those is those
object in that array, and

33
00:02:23.524 --> 00:02:28.015
I'm gonna say if (element.symbol),
that's the property name in there,

34
00:02:30.440 --> 00:02:34.893
The a party takes care of sending
this one to us in lowercase letters.

35
00:02:34.893 --> 00:02:36.740
That part is already taken care of, so

36
00:02:36.740 --> 00:02:39.408
you don't need to worry
about lowercasing the input.

37
00:02:39.408 --> 00:02:42.620
But you'll notice that the symbols
here are not lowercase, so

38
00:02:42.620 --> 00:02:45.768
we do need to take care of to do
a case insensitive comparison,

39
00:02:45.768 --> 00:02:48.207
there's a couple of
different ways to do that.

40
00:02:48.207 --> 00:02:51.657
You can use a regex,
we're gonna just lowercase the symbol.

41
00:02:51.657 --> 00:02:56.916
So I'm gonna say
.toLowerCase on that symbol.

42
00:02:56.916 --> 00:03:01.647
I'm gonna see if it's equal to
the element symbol that was passed in.

43
00:03:01.647 --> 00:03:06.993
I always get people asking me why I use
double equals instead of triple equals,

44
00:03:06.993 --> 00:03:11.693
and I've got a multi-hour answer to
that in my other deep JavaScript

45
00:03:11.693 --> 00:03:13.571
foundations course here.

46
00:03:13.571 --> 00:03:17.352
But the simple answer is,
when I'm comparing two strings,

47
00:03:17.352 --> 00:03:21.503
the double equals works exactly
the same as the triple equals, and

48
00:03:21.503 --> 00:03:24.412
I just don't wanna type
the extra character.

49
00:03:24.412 --> 00:03:26.895
So since I know how the types work,
I'm gonna use double equals here.

50
00:03:26.895 --> 00:03:30.449
But if you want to unpack that more,
check out my other course.

51
00:03:30.449 --> 00:03:36.639
Okay, so we're going to go through
this whole list of elements.

52
00:03:36.639 --> 00:03:39.736
This is the most kind of naïve
algorithm we can think of.

53
00:03:39.736 --> 00:03:41.921
In the worst case, we're gonna
have to go through all of them.

54
00:03:41.921 --> 00:03:46.410
There's 118, so it's not like we have
to go through millions of elements in

55
00:03:46.410 --> 00:03:47.622
the periodic table.

56
00:03:47.622 --> 00:03:52.059
There's only 118, but in the worst case,
we have to go through all of them for

57
00:03:52.059 --> 00:03:52.854
each symbol.

58
00:03:52.854 --> 00:03:57.362
So if we spelled out a word
with five symbols, worst case,

59
00:03:57.362 --> 00:04:01.694
we'd have to go through
about 570 something times.

60
00:04:01.694 --> 00:04:09.314
Okay, so let's talk about, so once we find
the element, we know that it is matched.

61
00:04:09.314 --> 00:04:13.565
All we need to do is return element, okay?

62
00:04:13.565 --> 00:04:18.796
And we could probably do
an empty object return here.

63
00:04:18.796 --> 00:04:23.547
We're going to assume that lookup is
never past anything that we don't

64
00:04:23.547 --> 00:04:25.051
already know is that,

65
00:04:25.051 --> 00:04:30.130
because all the inputs to the lookup
function come from the check function.

66
00:04:30.130 --> 00:04:34.231
So it would not have given us
a symbol that we don't know is there,

67
00:04:34.231 --> 00:04:37.150
which makes line 31 technically optional.

68
00:04:37.150 --> 00:04:38.793
We know it's gonna find it somewhere.

69
00:04:38.793 --> 00:04:42.604
But if you wanted to make this slightly
more robust, you could come up with some

70
00:04:42.604 --> 00:04:45.280
kind of default thing that
returned with properties.

71
00:04:45.280 --> 00:04:50.070
A default thing, maybe that's helpful for
error checking like return a default so

72
00:04:50.070 --> 00:04:53.082
that it's obvious that
your thing didn't find, or

73
00:04:53.082 --> 00:04:55.693
that it returned something it didn't find.

74
00:04:55.693 --> 00:04:58.966
But for now, we know that the only thing
we're gonna pass to that lookup, so

75
00:04:58.966 --> 00:05:00.156
I'm just gonna save that.

76
00:05:00.156 --> 00:05:05.347
I'm gonna switch back over to my browser,
and I'm gonna refresh, and

77
00:05:05.347 --> 00:05:11.159
it doesn't matter what I type here,
because we hardcoded it to the word yucky.

78
00:05:11.159 --> 00:05:15.987
But let's just check to make
sure that we are in fact pulling

79
00:05:15.987 --> 00:05:20.826
up all of those, and
that in fact was showing up correctly.

80
00:05:20.826 --> 00:05:22.693
It won't all fit on the screen at once,
but there you go.

81
00:05:29.406 --> 00:05:36.410
So we know the app rendering part, and
we know the lookup is working correctly.

82
00:05:36.410 --> 00:05:40.532
As a little side note, one thing that
an algorithm should always be asking

83
00:05:40.532 --> 00:05:45.052
themselves, and I think this is true of
really all engineering, but especially

84
00:05:45.052 --> 00:05:49.592
the algorithms, we have a lookup function
that with one test worked correctly.

85
00:05:51.727 --> 00:05:57.587
That does not guarantee us that it
will work under all conditions.

86
00:05:57.587 --> 00:06:02.293
We can reason about, we can infer that
the conditions where it would fail

87
00:06:02.293 --> 00:06:05.919
are not conditions that our
function needs to support,

88
00:06:05.919 --> 00:06:09.718
which is why we left off that
return statement or default.

89
00:06:09.718 --> 00:06:14.811
But that's not really a good test suite
that I ran it with one hardcoded thing and

90
00:06:14.811 --> 00:06:16.721
it returned what I expected.

91
00:06:16.721 --> 00:06:22.181
So we should ask ourselves at every
time that we write some implementation,

92
00:06:22.181 --> 00:06:25.950
how much do I need to do to
write a test suite for this?

93
00:06:25.950 --> 00:06:29.193
What is the minimum number
of work that I need to do?

94
00:06:29.193 --> 00:06:33.653
And the reason I call this out,
this question of testing algorithmic work,

95
00:06:33.653 --> 00:06:37.347
I've run into this problem many,
many times in my career, and

96
00:06:37.347 --> 00:06:39.665
I think you will run into this problem.

97
00:06:39.665 --> 00:06:42.855
If you haven't yet,
you will eventually run into this problem,

98
00:06:42.855 --> 00:06:45.642
which is that you write
an implementation of something.

99
00:06:45.642 --> 00:06:50.787
You write some algorithm for
something, some code to do some task,

100
00:06:50.787 --> 00:06:54.776
and you want to test that it
is doing the right thing.

101
00:06:54.776 --> 00:06:59.650
And the generation of
a sufficient number of

102
00:06:59.650 --> 00:07:04.929
test cases is impossible to hardcode,
right?

103
00:07:04.929 --> 00:07:09.018
Here, there is only 118 symbols, so

104
00:07:09.018 --> 00:07:13.723
we could make a test case for
each one of those.

105
00:07:13.723 --> 00:07:15.337
You could hardcode those out, or

106
00:07:15.337 --> 00:07:17.939
maybe programmatically
generate those test cases.

107
00:07:17.939 --> 00:07:22.747
But if our data set was in the thousands
or tens of thousands, there's no way

108
00:07:22.747 --> 00:07:28.479
you're gonna probably write a test for
every one of those 10,000 different cases.

109
00:07:28.479 --> 00:07:31.752
You don't necessarily need a test for
all of them, but

110
00:07:31.752 --> 00:07:34.612
you need more than a couple
to have a guarantee.

111
00:07:34.612 --> 00:07:38.906
That all the different variations of 1 and
2 letter and 1 symbol and

112
00:07:38.906 --> 00:07:41.062
12 symbols, and is there a max?

113
00:07:41.062 --> 00:07:43.422
You wanna test all of those cases.

114
00:07:43.422 --> 00:07:48.970
And what you run into,
that I have run into on many occasions,

115
00:07:48.970 --> 00:07:54.519
is that you run into this problem
where the only way to generate

116
00:07:54.519 --> 00:08:00.194
the test cases is to use the algorithm
that solves the problem.

117
00:08:00.194 --> 00:08:01.286
In other words,

118
00:08:01.286 --> 00:08:06.285
you end up in this problem where you're
basically testing does 1 equal 1?

119
00:08:06.285 --> 00:08:10.948
I run my code to generate all of my
possible test cases, and then I run my

120
00:08:10.948 --> 00:08:16.018
code against those test cases and
they all work, is that testing anything?

121
00:08:16.018 --> 00:08:21.446
Quick story, years ago, actually
before I even started teaching here,

122
00:08:21.446 --> 00:08:25.924
so many years ago, I got one of
what I thought was a dream job.

123
00:08:25.924 --> 00:08:30.854
I got hired to work on the developer
tools team at Mozilla for

124
00:08:30.854 --> 00:08:35.403
the Firefox browser, and
this was before Firefox 4.

125
00:08:35.403 --> 00:08:40.698
My starting day was the second day
of Firefox 4 being in existence.

126
00:08:40.698 --> 00:08:42.864
This was way, way back in the day.

127
00:08:42.864 --> 00:08:46.016
First external hire that
Mozilla made to that team, and

128
00:08:46.016 --> 00:08:48.108
I thought this was gonna be awesome.

129
00:08:48.108 --> 00:08:52.951
I'm gonna work on the developer tools and
get to interact with developers and

130
00:08:52.951 --> 00:08:54.749
make better tools for them.

131
00:08:54.749 --> 00:08:58.670
For those of you that maybe have been
around long enough, at that point,

132
00:08:58.670 --> 00:09:02.848
the only developer tools in the Firefox
browser were made by a third-party,

133
00:09:02.848 --> 00:09:04.281
non-Mozilla employee.

134
00:09:04.281 --> 00:09:08.530
Actually, a couple of people made this,
but they were not employees of Mozilla,

135
00:09:08.530 --> 00:09:09.956
and it was called Firebug.

136
00:09:09.956 --> 00:09:13.151
And that was the only developer tools we
had for Firefox for many, many years and

137
00:09:13.151 --> 00:09:15.881
Mozilla had finally said,
we're gonna build in developer tools.

138
00:09:15.881 --> 00:09:20.789
So they'd already had a couple of internal
employees working on the task for

139
00:09:20.789 --> 00:09:21.873
a little while.

140
00:09:21.873 --> 00:09:23.924
I was the first external hire to the team.

141
00:09:23.924 --> 00:09:26.025
And to get my feet wet, they said,

142
00:09:26.025 --> 00:09:29.222
okay, we're gonna give you
a couple of bugs to fix.

143
00:09:29.222 --> 00:09:33.769
And so the first bug that I
ended up tackling as an employee

144
00:09:33.769 --> 00:09:36.930
there was related to the zoom.

145
00:09:36.930 --> 00:09:40.671
That when you had zoomed in and
they were rendering the developer tools,

146
00:09:40.671 --> 00:09:43.632
it was the developer tools
were rendering incorrectly.

147
00:09:43.632 --> 00:09:47.276
And I think it was actually the overlay
where you're inspecting a DOM element and

148
00:09:47.276 --> 00:09:48.892
it draws a little square around it.

149
00:09:48.892 --> 00:09:53.388
The square was drawn in the wrong spot
if the page was zoomed in, so it's yeah,

150
00:09:53.388 --> 00:09:56.333
it's a fairly straightforward
kind of a problem.

151
00:09:56.333 --> 00:10:01.495
And so I go in, I dig into the code and
I figured out solving this bug was

152
00:10:01.495 --> 00:10:06.657
actually pretty straightforward,
because there was this property

153
00:10:06.657 --> 00:10:11.288
exposed on the document object
like zoom ratio or something.

154
00:10:11.288 --> 00:10:16.273
And I just put in document.zoomratio
as multiplying all of the calculations

155
00:10:16.273 --> 00:10:20.872
that the developer tools were doing
to draw stuff by the zoom ratio, and

156
00:10:20.872 --> 00:10:22.111
boom, it worked.

157
00:10:22.111 --> 00:10:25.731
Now all of my squares are being
drawn in all the right places, so

158
00:10:25.731 --> 00:10:28.753
it was a couple of lines of code,
not that big a deal.

159
00:10:28.753 --> 00:10:33.452
But to put in this code,
I also have to put in a test for it.

160
00:10:33.452 --> 00:10:37.094
They have very strict guidelines,
no code without tests.

161
00:10:37.094 --> 00:10:40.630
Right, they've got all kinds of guidelines
there, no performance regressions,

162
00:10:40.630 --> 00:10:43.585
all kinds of stuff, but put in your code,
you've gotta put in a test.

163
00:10:43.585 --> 00:10:47.000
I'm like, all right,
how am I going to test this?

164
00:10:47.000 --> 00:10:52.043
And it turns out that there was
no independent way to verify what

165
00:10:52.043 --> 00:10:58.153
the zoom ratio of the browser was from
JavaScript other than this property.

166
00:10:58.153 --> 00:11:01.176
So my code is multiplying
everything by zoom ratio,

167
00:11:01.176 --> 00:11:04.759
and then my test cases are dividing
everything by zoom ratio.

168
00:11:04.759 --> 00:11:08.335
So I was quite literally writing
test to see if 1 equals 1, and

169
00:11:08.335 --> 00:11:12.126
I submitted those tests and
they were like, yeah, that's fine.

170
00:11:12.126 --> 00:11:13.256
I'm like no, it's not fine.

171
00:11:13.256 --> 00:11:17.569
I had code comments like this is dumb,
these are my tests,

172
00:11:17.569 --> 00:11:19.690
but this is not sufficient.

173
00:11:19.690 --> 00:11:21.568
This is not actually testing anything.

174
00:11:21.568 --> 00:11:25.560
We're just testing if in one
place I multiply by it and

175
00:11:25.560 --> 00:11:27.966
in another place I divide by it.

176
00:11:27.966 --> 00:11:29.431
This is pointless, right?

177
00:11:31.765 --> 00:11:36.708
The end result of that story is that it
turned out that to write actual tests for

178
00:11:36.708 --> 00:11:40.435
that required us to create this
whole mechanism by which we

179
00:11:40.435 --> 00:11:45.096
could take screenshots of the page at
the zoom ratio and compare pixels.

180
00:11:45.096 --> 00:11:48.792
It was bonkers,
I wrote hundreds of lines of code for

181
00:11:48.792 --> 00:11:52.069
the test that took two
lines of code in the app.

182
00:11:52.069 --> 00:11:56.559
And it taught me this lesson, very
painfully, that thinking about how you're

183
00:11:56.559 --> 00:12:01.264
gonna test stuff as you're writing it, and
what am I gonna test this against then?

184
00:12:01.264 --> 00:12:05.194
How am I going to get an independent
implementation of this to test against?

185
00:12:05.194 --> 00:12:09.254
It can be challenging, and it is never
more challenging in my experience than

186
00:12:09.254 --> 00:12:10.884
when we deal with algorithms.

187
00:12:10.884 --> 00:12:13.309
When you start dealing with
large datasets and algorithms,

188
00:12:13.309 --> 00:12:16.507
we've got people here that are into
machine learning, you know this, right?

189
00:12:16.507 --> 00:12:21.018
The only code that exists to
produce the data set in question is

190
00:12:21.018 --> 00:12:26.071
the code that's solving it, so
how do I use that to generate my test?

191
00:12:26.071 --> 00:12:31.607
All right, so little side note on testing,
just be aware of those kinds of problems.

192
00:12:31.607 --> 00:12:34.951
But we feel pretty good for
now that lookup is working, so

193
00:12:34.951 --> 00:12:39.200
let's now shift our attention to
a little bit more of the heavy lifting,

194
00:12:39.200 --> 00:12:40.959
which is the check function.

