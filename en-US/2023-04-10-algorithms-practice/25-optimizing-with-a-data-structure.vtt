WEBVTT

1
00:00:00.621 --> 00:00:04.346
I want you to notice something
about reachable keys,

2
00:00:04.346 --> 00:00:06.845
it is brute force, it is ugly code.

3
00:00:06.845 --> 00:00:13.001
But I want you to notice something
about the output of reachable keys.

4
00:00:13.001 --> 00:00:19.306
Does it ever change, depending on
anything about the user's actions?

5
00:00:24.164 --> 00:00:28.262
Is there anything about
the user's actions that affects

6
00:00:28.262 --> 00:00:31.511
the outcome of the reachable
keys function?

7
00:00:34.871 --> 00:00:36.630
The answer is no.

8
00:00:36.630 --> 00:00:43.326
In fact, what we are doing is
brute force computing something

9
00:00:43.326 --> 00:00:49.650
which is already pre-known by
the geometry of the board.

10
00:00:49.650 --> 00:00:50.866
You with me?

11
00:00:55.169 --> 00:01:00.005
Why don't we just make a data structure
that has the reachableKeys in it,

12
00:01:00.005 --> 00:01:05.153
instead of making a data structure that is
the dial pad that we then have to go and

13
00:01:05.153 --> 00:01:07.963
compute some geometry information from?

14
00:01:07.963 --> 00:01:12.939
Why don't we just start with the data
structure that is the list of

15
00:01:12.939 --> 00:01:14.304
reachableKeys?

16
00:01:14.304 --> 00:01:18.378
It's fixed information,
it's gonna be very easy to compute.

17
00:01:18.378 --> 00:01:24.167
Why recompute it every single
time we hover over a key?

18
00:01:24.167 --> 00:01:26.812
Everybody follow that?

19
00:01:26.812 --> 00:01:30.267
I'm gonna show you how
easy it is to precompute.

20
00:01:33.101 --> 00:01:37.086
I'm gonna copy that code, and
I think only that code, let me make sure.

21
00:01:37.086 --> 00:01:39.968
Yeah, only that code I'm gonna copy.

22
00:01:43.048 --> 00:01:46.362
Just gonna drag over my
little console here,

23
00:01:46.362 --> 00:01:50.206
so we have a little bit more
space to put some code in.

24
00:01:53.794 --> 00:01:55.143
I'm gonna put that code in here.

25
00:02:04.230 --> 00:02:07.417
It's a little harder for you to read down
there, but maybe I can zoom this in, so

26
00:02:07.417 --> 00:02:08.955
it's a little easier for you to type.

27
00:02:08.955 --> 00:02:11.324
All I'm going to do is create a for

28
00:02:11.324 --> 00:02:15.991
loop that calls this function once for
each of the possible keys.

29
00:02:15.991 --> 00:02:21.056
And I'm gonna call that

30
00:02:21.056 --> 00:02:26.374
nearbykeys for (let i =

31
00:02:26.374 --> 00:02:31.439
0; i &lt;= 9; i ++)

32
00:02:31.439 --> 00:02:41.439
{NearbyKeys.push(reachableKeys(i));}.

33
00:02:45.588 --> 00:02:49.669
This for loop is simply going
to call that function once for

34
00:02:49.669 --> 00:02:52.850
each of the possible digits, 0 through 9.

35
00:02:52.850 --> 00:02:57.026
Whatever it returns, we're just gonna
push it into this nearbyKeys array.

36
00:02:57.026 --> 00:03:00.811
And then just for good measure,

37
00:03:00.811 --> 00:03:06.138
I'm gonna pretty print out the nearbyKeys,

38
00:03:06.138 --> 00:03:10.075
you'll see why here in a moment.

39
00:03:12.406 --> 00:03:16.948
So we run this code.

40
00:03:16.948 --> 00:03:20.978
I meant to do a JSON string, sorry.

41
00:03:20.978 --> 00:03:28.299
Console.log(JSON.stringify), was
what I meant to pretty print it.

42
00:03:30.860 --> 00:03:33.943
And now, I'm simply going to copy-paste.

43
00:03:37.049 --> 00:03:42.041
I'm gonna copy that and
I go back to the code editor,

44
00:03:42.041 --> 00:03:45.335
and I'm gonna delete all of that.

45
00:03:55.005 --> 00:03:58.667
And give me just a moment
to manually type all this.

46
00:03:58.667 --> 00:04:02.479
I could probably do this with
a regular expression, but

47
00:04:02.479 --> 00:04:08.005
I'm gonna type this out even quicker than
I could write the regular expression.

48
00:04:08.005 --> 00:04:12.224
The truth is in about the same amount
of time as we wrote the code and

49
00:04:12.224 --> 00:04:17.310
then wrote the code to drive it, we could
have just manually written this out.

50
00:04:17.310 --> 00:04:20.684
You could have just looked
at the board and said,

51
00:04:20.684 --> 00:04:23.990
I know if I'm on key 0,
I can go to key 4 and 6.

52
00:04:23.990 --> 00:04:26.062
And if I'm on key 1, I can go to 6 and 8.

53
00:04:26.062 --> 00:04:28.920
And if I'm on keys 2, I can go to 7 and 9.

54
00:04:28.920 --> 00:04:32.357
You could have just written this out,
probably a lot quicker than it took for

55
00:04:32.357 --> 00:04:33.924
us to go through writing the code.

56
00:04:33.924 --> 00:04:39.506
But I did that because I want to reinforce
the point that in many algorithmic

57
00:04:39.506 --> 00:04:44.291
problems that we tackle,
there is fixed known upfront stuff and

58
00:04:44.291 --> 00:04:47.946
you should precompute as
much of that as you can.

59
00:04:47.946 --> 00:04:52.469
You should not defer until
the run time that which can be

60
00:04:52.469 --> 00:04:54.838
figured out pre-run time.

61
00:04:57.124 --> 00:05:02.088
There is absolutely nothing about
that knowledge of those nearby

62
00:05:02.088 --> 00:05:07.155
keys that needs to be recomputed,
and so we should precompute it.

63
00:05:09.428 --> 00:05:14.260
And it turns out that the nearbyKeys
is gonna be a much better

64
00:05:14.260 --> 00:05:18.718
data structure for
us to start from than the data path.

65
00:05:18.718 --> 00:05:23.447
We do still need that reachable keys
function, because again, it's a,

66
00:05:27.439 --> 00:05:32.470
Public API method but look what it
now does, instead of all that other

67
00:05:32.470 --> 00:05:38.210
junk that it was doing, now it just
simply says nearbyKeys of startingDigit.

68
00:05:38.210 --> 00:05:41.028
That's a lot better, right?

69
00:05:41.028 --> 00:05:43.959
How many people like that solution better?

70
00:05:43.959 --> 00:05:48.353
If you liked the previous one,
no shame, but I don't understand why,

71
00:05:48.353 --> 00:05:52.527
just as a little bit of a heads up,
because I like this code better and

72
00:05:52.527 --> 00:05:55.549
because it gets rid of
a bunch of clutter in here.

73
00:05:55.549 --> 00:05:57.517
I jumped ahead a little bit,

74
00:05:57.517 --> 00:06:02.768
this optimization that I just made
wasn't until one of our later branches.

75
00:06:02.768 --> 00:06:04.778
So in the branches when you div,

76
00:06:04.778 --> 00:06:09.175
you'll see that I still left in that
older version of reachableKeys.

77
00:06:09.175 --> 00:06:13.927
I just jumped ahead because I didn't
wanna keep seeing all that ugly code.

