WEBVTT

1
00:00:00.000 --> 00:00:04.705
Let's talk about implementing the
loadWords function in the most basic way

2
00:00:04.705 --> 00:00:06.626
that we can possibly imagine.

3
00:00:06.626 --> 00:00:11.087
If we load in the dictionary from
a JSON file that just has an array,

4
00:00:11.087 --> 00:00:14.204
we can just stick it in another array,
right?

5
00:00:14.204 --> 00:00:15.977
We can just stick it in an array, and

6
00:00:15.977 --> 00:00:19.778
that's kinda the most basic form of
data structure that we will start with.

7
00:00:19.778 --> 00:00:25.847
So I will make a dictionary variable.

8
00:00:25.847 --> 00:00:30.304
I'll have it be an object, I'm sorry,
we'll have it be an array.

9
00:00:30.304 --> 00:00:33.590
Actually, we don't even need to assign it
to an array, but we'll just assign that.

10
00:00:33.590 --> 00:00:38.555
Because in our loadWords function,
all we're going to

11
00:00:38.555 --> 00:00:43.634
do is assign it to a copy of
what was passed in on wordList.

12
00:00:43.634 --> 00:00:45.107
We're only making a copy of it,

13
00:00:45.107 --> 00:00:48.063
because we're not actually gonna
mutate this array in any way.

14
00:00:48.063 --> 00:00:51.126
But just as a kind of a good step,

15
00:00:51.126 --> 00:00:55.902
it's important to be clean
with what we receive.

16
00:00:55.902 --> 00:01:00.307
We don't wanna receive things and
then potentially cause mutations of them.

17
00:01:00.307 --> 00:01:04.759
The other thing that the to-do comment
mentions is that the loadWords function

18
00:01:04.759 --> 00:01:09.277
needs to return a value that represents
how many entries are in the data structure

19
00:01:09.277 --> 00:01:12.013
for whatever that means for
the data structure.

20
00:01:12.013 --> 00:01:15.656
In this case,
it's whatever the length of the array is.

21
00:01:15.656 --> 00:01:18.456
But we'll be doing different
data structure shortly, and

22
00:01:18.456 --> 00:01:22.040
those will have different representations
of their quote, unquote size.

23
00:01:22.040 --> 00:01:26.386
So here,
we'll just return dictionary.length.

24
00:01:26.386 --> 00:01:31.060
But in other cases,
we'll run a return a different value.

25
00:01:31.060 --> 00:01:33.850
The reason why we're returning that value,
by the way,

26
00:01:33.850 --> 00:01:35.898
we're treating that as a unit of memory.

27
00:01:35.898 --> 00:01:39.428
We're not actually getting down to the low
level and trying to count bytes or

28
00:01:39.428 --> 00:01:40.985
do any kind of memory profiling.

29
00:01:40.985 --> 00:01:42.431
Again, that was asked earlier.

30
00:01:42.431 --> 00:01:46.780
There are great courses on here about
how to use the deep developer tools and

31
00:01:46.780 --> 00:01:49.487
do real memory profiling and
heap snapshots.

32
00:01:49.487 --> 00:01:53.019
We're just approximating
here with units of memory.

33
00:01:53.019 --> 00:01:57.671
So we'll just treat each string as kind
of an equally sized unit of memory.

34
00:01:57.671 --> 00:02:02.897
And so if we have 1,000 strings,
that's 1,000 units of memory.

35
00:02:02.897 --> 00:02:06.627
If we have 10,000,
then that's 10 times as much, so

36
00:02:06.627 --> 00:02:08.934
we'll just treat it kind of that way.

37
00:02:08.934 --> 00:02:11.955
So it's an approximation of our memory
usage that's why we're doing that.

38
00:02:11.955 --> 00:02:15.786
The next thing that we need to do is
implement the algorithm that we described,

39
00:02:15.786 --> 00:02:18.117
the permutation algorithm
that we described.

40
00:02:18.117 --> 00:02:22.988
So I'll take out, let me give us
some room down here at the bottom.

41
00:02:24.781 --> 00:02:26.517
Take out that to-do comment.

42
00:02:26.517 --> 00:02:32.432
And we do want a list of words that
we will fill in the array of words,

43
00:02:32.432 --> 00:02:36.673
and that does end up being
what we wanna return.

44
00:02:36.673 --> 00:02:40.671
So we know that we have an array
of dictionary words to consult, so

45
00:02:40.671 --> 00:02:45.486
we're definitely gonna need to loop
over the entire data structure of words.

46
00:02:45.486 --> 00:02:54.630
So we'll say, let word of dictionary,
And for each one of those,

47
00:02:54.630 --> 00:02:59.752
we can do some very basic filtering,
which is if the input.length,

48
00:02:59.752 --> 00:03:05.518
meaning the number of characters that
were passed in for us to match against.

49
00:03:05.518 --> 00:03:09.694
If the input.length is at least
as long as the word.length,

50
00:03:09.694 --> 00:03:11.957
then we know we should look at it.

51
00:03:11.957 --> 00:03:16.466
Otherwise, if the word is longer than
our input characters, there's no

52
00:03:16.466 --> 00:03:21.065
reason to even possibly consider it,
because it's definitely too long.

53
00:03:21.065 --> 00:03:23.387
So that's one of our quick filters.

54
00:03:23.387 --> 00:03:26.762
And then we're gonna call out
to a function we're gonna write.

55
00:03:26.762 --> 00:03:28.938
We're gonna call out a checkWord function,

56
00:03:28.938 --> 00:03:32.097
that's gonna be our recursive
function that we'll check this.

57
00:03:32.097 --> 00:03:36.727
And it needs to check the word that
we are looking at and the input.

58
00:03:36.727 --> 00:03:41.093
And if that works, then we want to
push that into our words already.

59
00:03:41.093 --> 00:03:43.940
So we'll say words.push(word).

60
00:03:43.940 --> 00:03:48.601
So if it returns as true, then we'll push
it, otherwise, we'll just keep going.

61
00:03:48.601 --> 00:03:53.620
So all the real heavy lifting we'll do
in a function that we called checkWord.

62
00:03:57.426 --> 00:04:02.918
I'm going to for just simply purposes
of creating a slightly cleaner API,

63
00:04:02.918 --> 00:04:08.072
I'm going to use an inner function
that actually does its recursion.

64
00:04:08.072 --> 00:04:12.714
We could have reworked it a little bit so
that the outer checkWord does this, but

65
00:04:12.714 --> 00:04:15.778
I'm just gonna to keep
things a little bit cleaner.

66
00:04:15.778 --> 00:04:20.127
So what we will do is call the inner
function that will name permute.

67
00:04:20.127 --> 00:04:24.347
We're gonna start with an empty string and
the input.

68
00:04:24.347 --> 00:04:29.958
So effectively, what's gonna happen
is that we're gonna take a character

69
00:04:29.958 --> 00:04:35.130
off of the input and add it to this
word that we're building up little by

70
00:04:35.130 --> 00:04:40.937
little by little until we are able to
find a permutation that matches the word.

71
00:04:40.937 --> 00:04:42.794
So that's what this empty string is.

72
00:04:42.794 --> 00:04:46.067
It's gonna go character by character
through the possible tree of

73
00:04:46.067 --> 00:04:47.996
permutations adding a character, and

74
00:04:47.996 --> 00:04:51.514
then adding all the other possible
characters after it, and so forth.

75
00:04:51.514 --> 00:04:55.521
So that first parameter to permute
is the thing that's gonna build

76
00:04:55.521 --> 00:04:58.747
up progressively as we take
characters off of input.

77
00:04:58.747 --> 00:05:00.307
So let's then,

78
00:05:07.201 --> 00:05:09.700
Write our inner function called permute.

79
00:05:11.675 --> 00:05:16.940
We'll call that prefix because, again,
that's the leading characters of

80
00:05:16.940 --> 00:05:23.107
a permutation that we're hoping will match
the word basically, that's what prefix is.

81
00:05:23.107 --> 00:05:26.796
And then we'll call the letters passed in,
we'll call them remaining.

82
00:05:33.229 --> 00:05:36.518
So we have a prefix which starts
out as an empty string, but

83
00:05:36.518 --> 00:05:40.567
then on the next recursive call,
it'll have a single character in it.

84
00:05:40.567 --> 00:05:43.859
And we've got the remaining characters,
cuz we've taken that one out of the set,

85
00:05:43.859 --> 00:05:45.329
get the remaining characters left.

86
00:05:45.329 --> 00:05:49.714
So we need to look at all of the remaining
characters to create our next level,

87
00:05:49.714 --> 00:05:51.746
our next layer of our permutation.

88
00:05:51.746 --> 00:05:56.804
So we will say, for let i =0; i &lt;

89
00:05:56.804 --> 00:06:01.875
remaining.length, and i++.

90
00:06:01.875 --> 00:06:06.540
So this is just a loop to go
through all of, I don't know why

91
00:06:06.540 --> 00:06:11.413
I called that remaining,
all of the remaining characters.

92
00:06:11.413 --> 00:06:14.669
Let's pull off the current character.

93
00:06:14.669 --> 00:06:18.084
I'm sorry,
this will be kind of the current word, but

94
00:06:18.084 --> 00:06:23.077
it's not really a word yet, because we
haven't matched it to the dictionary.

95
00:06:23.077 --> 00:06:29.145
But we'll just call it current, and that
is the catenation of whatever prefix is.

96
00:06:29.145 --> 00:06:31.459
Again, starts out at empty string, and

97
00:06:31.459 --> 00:06:34.737
then builds up whatever
prefix is plus remaining(i).

98
00:06:34.737 --> 00:06:39.701
So what you can see here is that
whatever that prefix is, let's say,

99
00:06:39.701 --> 00:06:45.021
that prefix is AC, and now our remaining
characters are P, and E, and T.

100
00:06:45.021 --> 00:06:49.966
So we're gonna have one loop iteration,
which is ACP, ACT, ACE, so far,

101
00:06:49.966 --> 00:06:52.305
follow where I'm going with this?

102
00:06:52.305 --> 00:06:59.279
All right, now,
what we can ask is if we made a match.

103
00:06:59.279 --> 00:07:04.571
If the current== word,
then we know we can just exit out quickly.

104
00:07:04.571 --> 00:07:06.074
We'll say, return true.

105
00:07:09.698 --> 00:07:14.180
If we have more characters to consider, so

106
00:07:14.180 --> 00:07:19.413
remaining.length has to be greater 1,
not 0.

107
00:07:19.413 --> 00:07:24.478
Cuz we already took the first, or
one of the items out of remaining.

108
00:07:24.478 --> 00:07:27.880
So we just need to make sure that
remaining has more than one other

109
00:07:27.880 --> 00:07:32.232
character, at least one other character
besides the one that we're looking at.

110
00:07:32.232 --> 00:07:36.347
And we need to make sure that we haven't

111
00:07:36.347 --> 00:07:41.219
gone over the length of it,
so word.length.

112
00:07:41.219 --> 00:07:43.584
We already have a check here that says,

113
00:07:43.584 --> 00:07:46.744
don't even try dictionary
words that are too long.

114
00:07:46.744 --> 00:07:50.758
Well, this is just making sure that we
stop the permutation whenever we reach

115
00:07:50.758 --> 00:07:52.006
the length of the word.

116
00:07:52.006 --> 00:07:56.789
So remember, I said if we had a three
letter word in the dictionary, but

117
00:07:56.789 --> 00:08:01.601
we had 15 input letters,
we would stop at 15 times 14 times 13.

118
00:08:01.601 --> 00:08:05.209
So that's what we're doing
here as we're saying,

119
00:08:05.209 --> 00:08:09.228
as long as the current.length
that we built up is less than

120
00:08:09.228 --> 00:08:14.162
the word.length that we're considering,
let's go ahead and stop.

121
00:08:14.162 --> 00:08:19.607
And then we're gonna check to see
if we make our recursive call.

122
00:08:19.607 --> 00:08:22.747
We're going to pass in current.

123
00:08:22.747 --> 00:08:26.647
Remember, current is
kind of the temporary,

124
00:08:26.647 --> 00:08:30.454
partial permutation is the best word for
it.

125
00:08:30.454 --> 00:08:34.003
We're gonna pass in that
partial permutation.

126
00:08:34.003 --> 00:08:37.972
And we need to pass in
the remaining characters

127
00:08:37.972 --> 00:08:42.261
minus whichever one it is
that we just pulled out.

128
00:08:42.261 --> 00:08:45.511
We're pulling them out from
different positions as we go along.

129
00:08:45.511 --> 00:08:48.768
So we're gonna need to do
a slice on the remaining,

130
00:08:51.511 --> 00:08:56.007
From 0 up to whatever i is,
but not including i.

131
00:08:56.007 --> 00:09:02.912
And then a slice starting at i,
i think, starting at i+1

132
00:09:06.183 --> 00:09:11.632
Okay, just so we are clear here.

133
00:09:13.839 --> 00:09:16.390
You see that remaining of slice,

134
00:09:16.390 --> 00:09:21.221
remaining.slice0 up to i is
whatever characters are earlier

135
00:09:21.221 --> 00:09:26.155
in the remaining string that we
aren't considering right now.

136
00:09:26.155 --> 00:09:29.712
Those are in the set of further remaining.

137
00:09:29.712 --> 00:09:33.949
And then whatever is after the characters,
the one character that we're looking at,

138
00:09:33.949 --> 00:09:35.177
that's also in the set.

139
00:09:35.177 --> 00:09:39.141
So take the two slices on either side of
whichever character we're looking at,

140
00:09:39.141 --> 00:09:43.063
put them together, and that makes a new
smaller set of remaining characters.

141
00:09:43.063 --> 00:09:47.696
Because we've already taken off one of
those characters and put it into current.

142
00:09:47.696 --> 00:09:53.254
All right, so if the permute was able to
find that by going down its recursive tree

143
00:09:53.254 --> 00:09:58.923
however far and it bubbled us back up to
true, then we can just simply return true.

144
00:09:58.923 --> 00:10:02.513
But if it somehow failed
way down deep in its tree,

145
00:10:02.513 --> 00:10:07.482
and we need to bubble back up,
we don't wanna bubble back up a false.

146
00:10:07.482 --> 00:10:09.969
Because that doesn't mean
that we haven't found it,

147
00:10:09.969 --> 00:10:12.739
it just means that we didn't find
it in that part of the tree.

148
00:10:12.739 --> 00:10:13.916
So we just need to keep going.

149
00:10:13.916 --> 00:10:16.886
So that's why we're not just
returning the result of permute,

150
00:10:16.886 --> 00:10:18.759
we're checking to see if that was true.

151
00:10:18.759 --> 00:10:21.538
And if so, then bubbling back up the true.

152
00:10:23.646 --> 00:10:27.175
So what this is going to do
is keep looping through and

153
00:10:27.175 --> 00:10:29.983
keep checking these different words, or

154
00:10:29.983 --> 00:10:35.038
these different partial permutations
until we find a match or until we know

155
00:10:35.038 --> 00:10:40.116
that we're never gonna find a match and
then it just exits out of this loop.

156
00:10:40.116 --> 00:10:44.075
And so at the end of the loop,
if we never returned true,

157
00:10:44.075 --> 00:10:47.381
then we know for
sure that we can return false.

158
00:10:47.381 --> 00:10:52.144
Let's make sure we understand from a
theory perspective how this is recursion,

159
00:10:52.144 --> 00:10:54.044
how this is divide and conquer.

160
00:10:54.044 --> 00:10:58.834
What we're saying is that to
permute a set of characters,

161
00:10:58.834 --> 00:11:01.865
we start with the first character and

162
00:11:01.865 --> 00:11:08.048
then we take the permutations of all
of the remaining characters, right?

163
00:11:08.048 --> 00:11:11.351
So we're saying all these
remaining characters,

164
00:11:11.351 --> 00:11:15.489
if I started with the five characters,
the P, C, E, R, and A,

165
00:11:15.489 --> 00:11:20.668
let's start with P, and let's get all
of the permutations of C, E, R, and A.

166
00:11:20.668 --> 00:11:26.418
And then, let's start with C, and get
all the permutations of P, E, R, and A.

167
00:11:26.418 --> 00:11:31.214
And then let's start with E, and
get all the permutations of P, C,R, and

168
00:11:31.214 --> 00:11:32.140
A, and so on.

169
00:11:32.140 --> 00:11:36.784
So we're starting with
the first letter and then,

170
00:11:36.784 --> 00:11:42.086
again, we're breaking down to permute C,
E, R, and A.

171
00:11:42.086 --> 00:11:46.929
C, E, R, A, to permute those
four characters, we could start

172
00:11:46.929 --> 00:11:51.978
with C plus all the permutations of E,
R, and A, you follow that?

173
00:11:51.978 --> 00:11:59.576
That's our recursive definition or divide
and conquer definition for a permutation.

174
00:11:59.576 --> 00:12:04.220
And we are absolutely taking
advantage of the short-circuiting,

175
00:12:04.220 --> 00:12:07.566
which is, as soon as find a match,
exit out now.

176
00:12:07.566 --> 00:12:10.349
Don't keep going through the entire tree.

177
00:12:10.349 --> 00:12:14.915
So if you think back to our
discussion about traversal, here,

178
00:12:14.915 --> 00:12:18.113
in some ways, the order kinda does matter.

179
00:12:18.113 --> 00:12:22.400
Because we could go out this from
the wrong order and ended up going through

180
00:12:22.400 --> 00:12:26.494
a much longer portion of the tree
before we ended up at the right thing.

181
00:12:26.494 --> 00:12:31.366
That's why we're picking the permutation
where it matches in the first position

182
00:12:31.366 --> 00:12:35.812
as opposed to waiting until we got
a permutation where it matched in the last

183
00:12:35.812 --> 00:12:36.531
position.

184
00:12:36.531 --> 00:12:39.971
We would had go through a whole
lot more of the tree to find that.

185
00:12:39.971 --> 00:12:44.937
So we're optimizing to quit as early
as we know that we found a match,

186
00:12:44.937 --> 00:12:49.666
and we only exhaust all possible
options if we never find a match.

187
00:12:49.666 --> 00:12:54.954
Let's save that, switch back over to

188
00:12:54.954 --> 00:13:00.652
our browser And

189
00:13:00.652 --> 00:13:08.136
we should have a working solution if not
a particularly non-performance solution.

190
00:13:08.136 --> 00:13:12.297
So on the short dictionary,
which is the one that comes up by default,

191
00:13:12.297 --> 00:13:15.044
I know that there's the tiny and
the long, but

192
00:13:15.044 --> 00:13:18.023
I'm just gonna stick with
the short dictionary.

193
00:13:18.023 --> 00:13:22.371
But just so you can check,
if we load in the 80 word dictionary,

194
00:13:22.371 --> 00:13:26.740
it loads in so quick that it's
not even a 10th of a millisecond.

195
00:13:26.740 --> 00:13:30.021
But the 370,000 words dictionary,

196
00:13:30.021 --> 00:13:34.281
it takes 23 milliseconds to
copy that size of an array.

197
00:13:34.281 --> 00:13:39.034
So we can see even in this very
small first example a little bit of

198
00:13:39.034 --> 00:13:42.094
benchmarking of the performance time.

199
00:13:42.094 --> 00:13:45.347
We see VA it's now kinda
caching some of that work, but

200
00:13:45.347 --> 00:13:48.123
you can see a little bit
of that benchmarking.

201
00:13:48.123 --> 00:13:51.088
And we will see later when we
try other data structures that

202
00:13:51.088 --> 00:13:52.976
those times significantly change.

203
00:13:52.976 --> 00:13:56.389
The other thing to be looking
at is the size of the entries.

204
00:13:56.389 --> 00:13:59.631
When there's 80 words in the dictionary,
there's 80 entries.

205
00:13:59.631 --> 00:14:01.953
When there's 2,400, there's 2,400, right?

206
00:14:01.953 --> 00:14:03.722
So we will also keep an eye on that,

207
00:14:03.722 --> 00:14:07.263
because some data structures will
have more entries than words, and

208
00:14:07.263 --> 00:14:10.208
some data structures will
have less entries than words.

209
00:14:10.208 --> 00:14:13.556
So that's our approximation
of the memory usage, and

210
00:14:13.556 --> 00:14:16.323
our approximation of
the processing time for

211
00:14:16.323 --> 00:14:20.571
the startup of the app before we've
tried to do any searching at all.

212
00:14:20.571 --> 00:14:25.115
And we'll keep an eye on that as we try
our different options as we finish this

213
00:14:25.115 --> 00:14:25.826
exercise.

214
00:14:25.826 --> 00:14:29.498
So because I'm here in the United States,

215
00:14:29.498 --> 00:14:35.013
I'm gonna go ahead and
try a set of characters that I know works.

216
00:14:35.013 --> 00:14:39.742
I'm gonna try an eight letter input,
a, m, e, r, i, c, and a, and

217
00:14:39.742 --> 00:14:44.897
let's see what words come back from
our short dictionary matching though.

218
00:14:44.897 --> 00:14:47.297
Okay, so we got acre and air,

219
00:14:47.297 --> 00:14:51.910
we got America like we'd expect arc,
are, area, arm.

220
00:14:51.910 --> 00:14:56.948
You'll notice that the order that we're
getting these in is alphabetized,

221
00:14:56.948 --> 00:15:00.592
because we went through
an alphabetized dictionary and

222
00:15:00.592 --> 00:15:04.480
we preserved the order in the way
that we went through them.

223
00:15:04.480 --> 00:15:09.117
So that's why those words are ending
up in alphabetized order.

224
00:15:09.117 --> 00:15:12.892
That won't necessarily always be
true of any algorithm that you pick.

225
00:15:12.892 --> 00:15:16.955
So that's another thing that we
would just wanna keep an eye on is,

226
00:15:16.955 --> 00:15:20.970
did I accidentally end up selecting
other words in a different order?

227
00:15:20.970 --> 00:15:24.219
And then maybe I need to go back and
sort my words,

228
00:15:24.219 --> 00:15:29.155
because users generally want to see
them presented in dictionary order.

229
00:15:29.155 --> 00:15:31.907
Okay, so that took 0.2 of a second.

230
00:15:31.907 --> 00:15:36.318
It took 200 milliseconds on 8 input.

231
00:15:36.318 --> 00:15:43.587
Let's try american,
which is nine letters and

232
00:15:43.587 --> 00:15:48.684
let's watch the timing of that.

233
00:15:48.684 --> 00:15:53.288
It went from 200 milliseconds
up to 1100 milliseconds.

234
00:15:53.288 --> 00:15:58.688
So that was about a five or
six X, looks like.

235
00:15:58.688 --> 00:16:04.375
Let's go up to ten characters.

236
00:16:11.413 --> 00:16:16.011
It's still going, so
we went up to 6.36 seconds.

237
00:16:16.011 --> 00:16:19.748
So we see it starting to
significantly grow by way

238
00:16:19.748 --> 00:16:22.950
more than just double each time, right?

239
00:16:22.950 --> 00:16:29.928
So if I did this word,
which is 11 characters if

240
00:16:29.928 --> 00:16:35.215
I'm counting correctly, is that?

241
00:16:35.215 --> 00:16:39.091
No, that's still ten, but
should be the same as Americans.

242
00:16:39.091 --> 00:16:41.107
I just wanna run that one and
see what it does.

243
00:16:47.638 --> 00:16:51.798
So that took 39.25
seconds to run that one.

244
00:16:51.798 --> 00:16:55.700
So you can see that this is
growing at what we predicted,

245
00:16:55.700 --> 00:17:00.028
which was approximately factorial or
in that neighborhood.

246
00:17:00.028 --> 00:17:02.410
It's growing at a significantly long time.

247
00:17:02.410 --> 00:17:05.503
And the more characters that we put in,
it would lock up for

248
00:17:05.503 --> 00:17:07.094
even longer periods of time.

249
00:17:07.094 --> 00:17:09.515
So we know we have
generally working solution.

250
00:17:09.515 --> 00:17:14.337
We've kind of done some some
visual checking against this, but

251
00:17:14.337 --> 00:17:19.805
we've only been checking against
the 2400 character dictionary.

252
00:17:19.805 --> 00:17:23.453
What happens if we try go back and
try the long dictionary,

253
00:17:23.453 --> 00:17:27.858
and try it with our eight character and
let's just see what that does.

254
00:17:31.539 --> 00:17:37.545
So before, that was 200 milliseconds, And

255
00:17:37.545 --> 00:17:40.515
it's still running, and
it's still running.

256
00:17:43.292 --> 00:17:46.959
It's kinda funny that when I do this,
sometimes it does what I'm expecting,

257
00:17:46.959 --> 00:17:49.084
but sometimes it's significantly longer.

258
00:17:49.084 --> 00:17:54.306
I can't control what background processes
might be running on my computer or

259
00:17:54.306 --> 00:17:55.120
whatever.

260
00:17:55.120 --> 00:17:58.613
But yeah,
14 seconds just to do the eight input.

261
00:17:58.613 --> 00:18:02.499
I'm not even gonna try the nine input,
because we'd be here for another minute or

262
00:18:02.499 --> 00:18:03.301
two waiting on.

263
00:18:03.301 --> 00:18:08.738
But you can see that now, we see
a verification that not only is it growing

264
00:18:08.738 --> 00:18:14.467
on the size of our input characters,
but also on the size of our dictionary.

265
00:18:14.467 --> 00:18:19.497
Now, 370,000 word dictionary
is way bigger than we need.

266
00:18:19.497 --> 00:18:24.170
My estimates from my Google searching
are that almost all common English words

267
00:18:24.170 --> 00:18:26.807
could fit in about 80 to 100,000.

268
00:18:26.807 --> 00:18:31.536
So that's almost four times
the size that it needs to be,

269
00:18:31.536 --> 00:18:34.897
but that's still crazy too long for us.

270
00:18:34.897 --> 00:18:39.309
It was too long at 2,400 words,
which was way too short of a dictionary.

271
00:18:39.309 --> 00:18:44.250
So we can imagine if we had
a dictionary at 80 or 100,000 words,

272
00:18:44.250 --> 00:18:46.358
we'd have similar problems.

273
00:18:46.358 --> 00:18:52.756
Okay, so we can see here that
our initial kind of naive,

274
00:18:52.756 --> 00:18:59.711
recursive permutation approach
is not going to work for us.

275
00:18:59.711 --> 00:19:04.163
The code that you have now
represents option one.

276
00:19:04.163 --> 00:19:07.509
And so if your code happened to not work,
you missed parentheses or

277
00:19:07.509 --> 00:19:11.894
a comma somewhere, again, stash whatever
you've done so you can check it out later.

278
00:19:11.894 --> 00:19:16.564
And then just check out the option one
branch so that's your starting point for

279
00:19:16.564 --> 00:19:18.980
the next optimizations that will do it.

