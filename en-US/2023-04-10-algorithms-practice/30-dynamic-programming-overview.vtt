WEBVTT

1
00:00:00.000 --> 00:00:03.447
So because we're using so
much memory when we're caching,

2
00:00:03.447 --> 00:00:07.445
we need to be careful about how
a memoized function is going to be used.

3
00:00:07.445 --> 00:00:10.136
And we need to think about what
types of inputs are gonna come in.

4
00:00:10.136 --> 00:00:14.228
For example, if you had a function that
was taking in the XY coordinates of

5
00:00:14.228 --> 00:00:18.188
somebody's mouse cursor as they moved
it around, think about how many

6
00:00:18.188 --> 00:00:21.753
unique different types of inputs
are gonna be coming into that.

7
00:00:21.753 --> 00:00:23.370
That's gonna create a lot of cache.

8
00:00:23.370 --> 00:00:29.040
And think about how relatively
low percentage there is of reuse.

9
00:00:29.040 --> 00:00:32.014
Meaning, yeah, we're creating
all these cache entries, but

10
00:00:32.014 --> 00:00:35.550
it's very unlikely that we're hitting
hardly any of these cache entries.

11
00:00:35.550 --> 00:00:38.563
In other words, most of the inputs
are unique and novel and

12
00:00:38.563 --> 00:00:41.159
the first time that
the functions ever seen them.

13
00:00:41.159 --> 00:00:46.051
So the profile that you wanna look for
is a function that it's a rather small

14
00:00:46.051 --> 00:00:50.711
constrained set of inputs that you
expect to come in, and you expect for

15
00:00:50.711 --> 00:00:52.980
those inputs to be repeated a lot.

16
00:00:52.980 --> 00:00:56.689
That's when memoization is
actually a really good technique.

17
00:00:56.689 --> 00:01:00.613
But I often hear people say, well,
if memoization is so magical and awesome,

18
00:01:00.613 --> 00:01:03.896
why didn't JavaScript just memoize
every function by default?

19
00:01:03.896 --> 00:01:08.335
And the reason why is because we don't
wanna just have runaway memory and

20
00:01:08.335 --> 00:01:10.973
terrible performance in a different way.

21
00:01:10.973 --> 00:01:13.217
So in those places where it's helpful,

22
00:01:13.217 --> 00:01:17.309
this is a great tool to pull out of your
tool belt, but be careful to analyze

23
00:01:17.309 --> 00:01:20.954
which types of functions you're
using a technique like that on.

24
00:01:23.646 --> 00:01:27.175
All right, so
that is our option three solution.

25
00:01:27.175 --> 00:01:30.552
Now, we're going to switch gears for
our fourth and

26
00:01:30.552 --> 00:01:32.940
final solution to the night styler.

27
00:01:32.940 --> 00:01:39.061
And I'm going to forewarn you that as
we dive into the next several slides,

28
00:01:39.061 --> 00:01:44.903
it is going to be a fair bit more
complicated to wrap your brains around.

29
00:01:44.903 --> 00:01:48.538
So just preparing you right now,
if you need to refill the coffee cup,

30
00:01:48.538 --> 00:01:50.763
make sure you're ready to dive into this.

31
00:01:50.763 --> 00:01:56.569
It is, I think, one of the most
mind-bending aspects in all of DSA.

32
00:01:56.569 --> 00:02:01.403
If you've been able to follow along
at least partially with recursion,

33
00:02:01.403 --> 00:02:06.314
it's gonna take that to a whole another
level in a somewhat ironic sense by

34
00:02:06.314 --> 00:02:08.473
not doing any recursion at all.

35
00:02:08.473 --> 00:02:12.360
We're gonna be able to calculate all the
same things that we were just calculating,

36
00:02:12.360 --> 00:02:15.711
the count and all of that, but
we're not gonna use any recursion at all.

37
00:02:15.711 --> 00:02:22.584
And it's going to run significantly faster
than the memoized version of recursion.

38
00:02:22.584 --> 00:02:24.112
And it's not gonna use any memory.

39
00:02:24.112 --> 00:02:30.144
So it's like the unicorn solution
that's both less memory usage and

40
00:02:30.144 --> 00:02:32.332
significantly faster.

41
00:02:32.332 --> 00:02:34.419
And you're wondering,
what is this sorcery?

42
00:02:34.419 --> 00:02:35.909
How are we going to do it?

43
00:02:35.909 --> 00:02:40.975
This technique is referred to, in
the general terms, as dynamic programming.

44
00:02:40.975 --> 00:02:45.853
The good news is you've actually already
learned one form of dynamic programming,

45
00:02:45.853 --> 00:02:50.327
which is top-down dynamic programming,
otherwise known as memoization.

46
00:02:50.327 --> 00:02:55.223
But there's another form of dynamic
programming, which is what usually people

47
00:02:55.223 --> 00:03:00.338
mean when they use this phrase, and
it's called bottom-up dynamic programming.

48
00:03:00.338 --> 00:03:02.262
So we're gonna go in reverse.

49
00:03:02.262 --> 00:03:06.428
In essence, that's the idea that you
should have in your mind from now.

50
00:03:06.428 --> 00:03:11.994
And there's another term for that, this
is referred to generally as tabulation.

51
00:03:11.994 --> 00:03:17.959
Tabulation should imply to you that most
of the time when you're going to employ

52
00:03:17.959 --> 00:03:24.565
this technique, it's when you are counting
things, when you are tabulating things.

53
00:03:24.565 --> 00:03:28.290
So it might not be as useful
of a technique, for example,

54
00:03:28.290 --> 00:03:32.870
to calculate the acyclic paths
where we weren't counting anything,

55
00:03:32.870 --> 00:03:36.849
we were just enumerating all
the possible different paths.

56
00:03:36.849 --> 00:03:41.519
You probably wouldn't necessarily want
to apply this technique in that case.

57
00:03:41.519 --> 00:03:45.441
Tabulation is something that should evoke
that idea that I wanna count things,

58
00:03:45.441 --> 00:03:47.557
I wanna find out how
many things are doing.

59
00:03:47.557 --> 00:03:51.469
Another example might be if you were
trying to come up with a bottom-up

60
00:03:51.469 --> 00:03:52.278
tabulation.

61
00:03:52.278 --> 00:03:57.217
Remember one of the warm-up problems I
posed to you was calculating the size

62
00:03:57.217 --> 00:03:58.769
of the largest island.

63
00:03:58.769 --> 00:04:02.971
Well, that is counting because we're
counting the units of the size.

64
00:04:02.971 --> 00:04:06.921
As a side note, I don't think
that that problem can actually

65
00:04:06.921 --> 00:04:11.725
be done with tabulation because
there's another characteristic here,

66
00:04:11.725 --> 00:04:15.366
which is that you have to be
able to define an ordering for

67
00:04:15.366 --> 00:04:18.781
the tabulation to occur for
this technique to work.

68
00:04:18.781 --> 00:04:24.227
And I know that may not make much sense,
but you have to be able to go in

69
00:04:24.227 --> 00:04:30.741
a deterministic order through your data
to be able to get a tabulation solution.

70
00:04:30.741 --> 00:04:36.203
And with the island's size problem, if you
start from the top left of your grid and

71
00:04:36.203 --> 00:04:40.322
you work yourself downward and
rightward through your grid,

72
00:04:40.322 --> 00:04:44.542
that might seem like a deterministic
order to go through that.

73
00:04:44.542 --> 00:04:48.493
But unfortunately, you would miss parts
of the island that might have curved back

74
00:04:48.493 --> 00:04:50.104
around and you hadn't seen yet.

75
00:04:50.104 --> 00:04:52.813
So you would have to go in
multiple directions, and

76
00:04:52.813 --> 00:04:56.215
you can't really go in multiple
directions at the same time, or

77
00:04:56.215 --> 00:04:59.119
at least I haven't been able
to figure out how to do so.

78
00:04:59.119 --> 00:05:04.402
So I'm not convinced that all problems
that are counting can be done that way,

79
00:05:04.402 --> 00:05:07.934
but there are some that can,
and this is one of them.

80
00:05:07.934 --> 00:05:09.607
So we're gonna learn this technique.

81
00:05:10.693 --> 00:05:15.513
So this slide I originally
used as a way to help folks

82
00:05:15.513 --> 00:05:20.458
get some sort of mental
picture of what's going on.

83
00:05:20.458 --> 00:05:24.009
It's somewhat misleading,
but it's metaphoric.

84
00:05:24.009 --> 00:05:28.456
So I want you to not try to take too
much or infer too much from this.

85
00:05:28.456 --> 00:05:32.334
If we look at the tree and we think
about a tree in a physical sense as

86
00:05:32.334 --> 00:05:36.296
having leaves, and if we went up
to the tree, and we just shook it.

87
00:05:36.296 --> 00:05:39.485
And I'm talking about like in the fall
time when leaves are about to fall, and

88
00:05:39.485 --> 00:05:40.613
we just shook the tree, and

89
00:05:40.613 --> 00:05:43.532
all of the leaves on the end of
the branches just started falling down.

90
00:05:43.532 --> 00:05:47.794
And if we had laid out ten
buckets underneath this tree,

91
00:05:47.794 --> 00:05:50.515
conceptually or metaphorically,

92
00:05:50.515 --> 00:05:55.966
we can think of all of those leaves
as falling into one of those buckets.

93
00:05:55.966 --> 00:06:01.287
Now, here's why this is not actually
an accurate way of thinking about

94
00:06:01.287 --> 00:06:07.596
tabulation because you don't need just one
tree, you actually need all ten trees.

95
00:06:07.596 --> 00:06:10.859
So if all ten trees were
in the exact same spot and

96
00:06:10.859 --> 00:06:15.590
we shook all of them at the same time,
and all of their leaves fell into

97
00:06:15.590 --> 00:06:19.996
one of these ten buckets,
we could then go through the bucket for

98
00:06:19.996 --> 00:06:24.100
bucket 4 and count how many
leaves landed in the bucket 4.

99
00:06:24.100 --> 00:06:28.116
And it turns out there would be
exactly 168 leaves in that bucket,

100
00:06:28.116 --> 00:06:30.756
which is the number
that we're looking for.

101
00:06:30.756 --> 00:06:35.134
Remember in our running example,
the (4, 6), the answer is 168.

102
00:06:35.134 --> 00:06:39.734
If we took all ten trees and we shook all
their leaves off, and they could fall in

103
00:06:39.734 --> 00:06:44.056
only one of these ten buckets,
it turns out that, not accidentally quite

104
00:06:44.056 --> 00:06:48.469
on purpose, there would be exactly
168 leaves in the bucket number 4.

105
00:06:48.469 --> 00:06:52.581
So let's set the metaphor aside cuz it's
a little bit strange, a little bit hard to

106
00:06:52.581 --> 00:06:55.951
imagine shaking a tree like that,
and let's try to think about it.

107
00:06:55.951 --> 00:07:02.410
Let's try to infer what we mean by
this top-down versus bottom-up.

108
00:07:02.410 --> 00:07:06.906
Top-down, which is what we've done before,
is starting from the top of the problem,

109
00:07:06.906 --> 00:07:10.633
that is the statement of the problem,
which in this case is (4, 6).

110
00:07:10.633 --> 00:07:16.702
And we are working from (4,
6) down to (3, 5) and down to (4, 4).

111
00:07:16.702 --> 00:07:19.255
We're working down the tree, if you will,

112
00:07:19.255 --> 00:07:21.745
from the top of the tree
down to the leaves.

113
00:07:21.745 --> 00:07:26.896
So you could think about bottom-up as
what if we knew where all the leaves

114
00:07:26.896 --> 00:07:32.654
were without having constructed the tree
and worked in the opposite direction?

115
00:07:32.654 --> 00:07:34.893
What if we didn't need to
recurse through the tree?

116
00:07:34.893 --> 00:07:39.447
What if we could just infer or understand
exactly where all the leaves possibly

117
00:07:39.447 --> 00:07:41.592
were and then just count all of them?

118
00:07:41.592 --> 00:07:46.645
Run through our way up and keep track
of how many leaves we see as we go up,

119
00:07:46.645 --> 00:07:50.197
and then we would have our
final answer at the end.

120
00:07:50.197 --> 00:07:54.636
What's interesting about this
is that that process actually

121
00:07:54.636 --> 00:07:59.428
is completely independent of
the starting digit that we end up at.

122
00:07:59.428 --> 00:08:02.192
In other words,
we basically do the count for

123
00:08:02.192 --> 00:08:04.755
all possible digits all at the same time.

124
00:08:04.755 --> 00:08:07.278
And then at the end, we just say, okay,

125
00:08:07.278 --> 00:08:10.193
the only one that I
actually care about was 4.

126
00:08:10.193 --> 00:08:14.579
So I'm gonna do the count for
all 10 of the digits.

127
00:08:14.579 --> 00:08:17.635
5, of course, is always gonna be 0,
but I'm gonna do the count for

128
00:08:17.635 --> 00:08:18.702
all 10 of the digits.

129
00:08:18.702 --> 00:08:22.445
And then at the end,
simply select which bucket I wanna count,

130
00:08:22.445 --> 00:08:24.221
which bucket I wanna look at.

131
00:08:24.221 --> 00:08:26.542
So let's try to develop some intuition for
that.

132
00:08:26.542 --> 00:08:32.116
If we started at 4 and we were doing the
top-down approach, we would branch out.

133
00:08:32.116 --> 00:08:36.963
Remember that's how we did it,
we would say, I could go from 4 to 3.

134
00:08:36.963 --> 00:08:42.303
That arrow is a little off, but
I could go 4 to 9 and 4 to 0.

135
00:08:42.303 --> 00:08:45.804
I could branch my way outward, right?

136
00:08:45.804 --> 00:08:48.463
Well, what if we could go
in the reverse direction?

137
00:08:48.463 --> 00:08:54.948
What if we could ask if I wanted to
determine all of the possible paths?

138
00:08:54.948 --> 00:08:58.851
We've been thinking about these
paths as directed arrows.

139
00:08:58.851 --> 00:09:01.661
But if you think about this logically,

140
00:09:01.661 --> 00:09:05.760
it doesn't matter which
direction you went in the path.

141
00:09:05.760 --> 00:09:09.813
You could start at the end of any one of
those paths and work your way backward and

142
00:09:09.813 --> 00:09:11.115
get the exact same path.

143
00:09:11.115 --> 00:09:14.093
So it's not actually a directed thing,

144
00:09:14.093 --> 00:09:17.782
it's simply an undirected
traversal of a graph.

145
00:09:17.782 --> 00:09:22.742
And by that, what that means is that
we could actually start from each

146
00:09:22.742 --> 00:09:26.601
of the digits and ask, not,
where could I go from 4?

147
00:09:26.601 --> 00:09:31.907
But get this, what if we asked
where could I go to get to 4?

148
00:09:31.907 --> 00:09:34.284
If I got to 4, where could I have been?

149
00:09:34.284 --> 00:09:40.012
I could have been at 3, I could have
been at 9, or I could have been at 0.

150
00:09:40.012 --> 00:09:43.238
So we're actually asking
the reverse question,

151
00:09:43.238 --> 00:09:47.996
which is the best way that I can help
you to understand this notion of moving

152
00:09:47.996 --> 00:09:51.327
from the top-down model
to the bottom-up model.

153
00:09:51.327 --> 00:09:52.813
We're asking the reverse question.

154
00:09:52.813 --> 00:09:57.045
I'm not gonna start from 4 and go 6 hops.

155
00:09:57.045 --> 00:10:02.605
I'm gonna say, from all of the various
places that I could have been,

156
00:10:02.605 --> 00:10:08.088
how many paths would have ended at
digit 4 after having made 6 hops?

157
00:10:08.088 --> 00:10:14.561
Because that number is exactly equal
to the other number, which is 168.

158
00:10:14.561 --> 00:10:16.399
So we're actually solving
a different problem.

159
00:10:16.399 --> 00:10:20.791
It's kind of like when we talked about
the whole bounding box thing, and

160
00:10:20.791 --> 00:10:25.184
we said, do my two bounding boxes overlap,
has there been a collision?

161
00:10:25.184 --> 00:10:29.086
And it turns out that it was much easier
to ask the question, do they not overlap?

162
00:10:29.086 --> 00:10:30.501
This is very similar.

163
00:10:30.501 --> 00:10:33.443
It's much easier to calculate and

164
00:10:33.443 --> 00:10:38.422
to compute the other direction
than it is to recurse down.

165
00:10:38.422 --> 00:10:41.952
It's still kinda mind-bending and
difficult, even for me and

166
00:10:41.952 --> 00:10:43.790
I've been doing this for years.

167
00:10:43.790 --> 00:10:46.494
It's still difficult, and
each time I come up with a new problem,

168
00:10:46.494 --> 00:10:47.955
it's a little bit more difficult.

169
00:10:47.955 --> 00:10:52.050
It's still difficult for me to try to
prove to myself that it either can or

170
00:10:52.050 --> 00:10:53.947
cannot be done with tabulation.

171
00:10:53.947 --> 00:10:56.905
This is one of those deeper areas
that takes a lot of practice.

172
00:10:56.905 --> 00:11:00.845
So I'm not suggesting that you can just
master this at the first time you try it.

173
00:11:00.845 --> 00:11:04.770
But I'm gonna walk you through how to
derive a solution to this problem.

174
00:11:04.770 --> 00:11:09.656
And hopefully, some of those
principles will stick with you so

175
00:11:09.656 --> 00:11:12.616
that you can try it on other problems.

176
00:11:12.616 --> 00:11:18.524
So if we were asking what digits could
I have been at when I arrived at 4?

177
00:11:18.524 --> 00:11:22.781
We then could ask what digits could
I have been at that I arrived at 3?

178
00:11:22.781 --> 00:11:27.566
And then what digits could I
have arrived at 8 and so on?

179
00:11:27.566 --> 00:11:31.287
So we're just gonna work our
way back up the tree, so

180
00:11:31.287 --> 00:11:33.918
this is the bottom-up tabulation.

