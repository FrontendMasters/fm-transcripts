WEBVTT

1
00:00:00.000 --> 00:00:04.315
All right, our second task,
our much more interesting and

2
00:00:04.315 --> 00:00:09.231
important task, is to handle that
when we click on one of the tiles,

3
00:00:09.231 --> 00:00:14.605
we are going to highlight the two
diagonals that that tile participates.

4
00:00:14.605 --> 00:00:18.292
Note in this code comment, which is
also part of the readme instructions,

5
00:00:18.292 --> 00:00:19.707
in case you've deleted it.

6
00:00:19.707 --> 00:00:24.247
But note in this code comment that
we are given the tile element

7
00:00:24.247 --> 00:00:28.890
reference that has been clicked
on that is taken care of by app.

8
00:00:28.890 --> 00:00:31.070
So we're not gonna change
any of that app code.

9
00:00:31.070 --> 00:00:33.852
We are going to be given a tile element.

10
00:00:33.852 --> 00:00:37.890
If you are given no tile element, in
other words, if it comes in as undefined,

11
00:00:37.890 --> 00:00:40.786
that is basically the same
thing as clearing the board.

12
00:00:40.786 --> 00:00:42.479
So you saw that there's a clear button.

13
00:00:42.479 --> 00:00:47.218
So if tile element comes in as undefined,
then we're gonna clear it.

14
00:00:47.218 --> 00:00:52.129
In other words, we're gonna need to
clear it always and then if tile element

15
00:00:52.129 --> 00:00:56.671
has been set, that's when we're
going to highlight its diagonals.

16
00:00:56.671 --> 00:01:04.245
Okay, so first question is,
how do we know what possible,

17
00:01:04.245 --> 00:01:08.493
where that tile was on the board?

18
00:01:08.493 --> 00:01:12.137
So that we could possibly start to
figure out what diagonals it's in.

19
00:01:12.137 --> 00:01:16.039
What does where it is even mean?

20
00:01:16.039 --> 00:01:21.006
Well, if you think about the DOM elements
as participating in a data structure

21
00:01:21.006 --> 00:01:21.758
right now,

22
00:01:21.758 --> 00:01:27.195
a two-dimensional data structure where
the values are references to DOM elements.

23
00:01:27.195 --> 00:01:32.302
We have an array of rows that
that array happens to also

24
00:01:32.302 --> 00:01:37.872
be a DOM element, but
it is conceptually an array of rows.

25
00:01:37.872 --> 00:01:41.854
That's the board element, and
then within each one of those,

26
00:01:41.854 --> 00:01:45.325
we have an array of DOM elements,
which are the tiles.

27
00:01:45.325 --> 00:01:48.306
So we have a two-dimensional array,
it's a data structure,

28
00:01:48.306 --> 00:01:52.091
it just happens to be DOM nodes, but
that doesn't make it not a data structure.

29
00:01:52.091 --> 00:01:56.449
So how do we find out where in
our data structure this specific

30
00:01:56.449 --> 00:01:58.335
tile that was clicked is?

31
00:01:58.335 --> 00:02:00.939
And what does where even mean?

32
00:02:00.939 --> 00:02:04.638
To answer that question,
we're gonna go back to the slides.

33
00:02:04.638 --> 00:02:10.758
You'll note that if I clicked on this one,
for example,

34
00:02:10.758 --> 00:02:17.528
that it has a position that we
could think of like a coordinate.

35
00:02:17.528 --> 00:02:21.011
Think about this grid as if
it's a coordinate system.

36
00:02:21.011 --> 00:02:23.609
You're probably familiar
with XY coordinate systems,

37
00:02:23.609 --> 00:02:25.513
two-dimensional coordinate systems.

38
00:02:25.513 --> 00:02:29.502
We could think about the position of
the thing that was collected as having

39
00:02:29.502 --> 00:02:32.154
a coordinate, and
what would that position be.

40
00:02:32.154 --> 00:02:37.175
Well, if we numbered the natural
number indexing zero-based as

41
00:02:37.175 --> 00:02:42.663
they would be in arrays, if we named
numbered the rows and the columns.

42
00:02:42.663 --> 00:02:47.263
And we click on a specific element,
then it has a coordinate that

43
00:02:47.263 --> 00:02:51.281
corresponds to the row number and
to the column number.

44
00:02:51.281 --> 00:02:53.590
So we could say that
its coordinate is 4,2.

45
00:02:53.590 --> 00:02:57.657
Now, some of you might be surprised
that I did 4,2 instead of 2,4,

46
00:02:57.657 --> 00:03:00.459
because in traditional
Cartesian coordinates,

47
00:03:00.459 --> 00:03:05.348
we typically list the horizontal component
first, and then the vertical component.

48
00:03:05.348 --> 00:03:09.352
And so
in a typical Cartesian coordinate system,

49
00:03:09.352 --> 00:03:14.896
we would have said 2,4 instead of 4,2,
for the same position.

50
00:03:14.896 --> 00:03:22.104
There's one key reason why I did the 4,2.

51
00:03:22.104 --> 00:03:24.784
And that is because we
already made a decision,

52
00:03:24.784 --> 00:03:27.599
whether we were cognizant
of the decision or not.

53
00:03:27.599 --> 00:03:33.287
We made a decision that we
were creating rows of columns,

54
00:03:33.287 --> 00:03:36.258
rather than columns of rows.

55
00:03:36.258 --> 00:03:40.975
And when we made a decision that
we were making rows of columns,

56
00:03:40.975 --> 00:03:44.535
then we automatically
said that the row index,

57
00:03:44.535 --> 00:03:48.369
the vertical index,
is the first most important.

58
00:03:48.369 --> 00:03:53.230
It is the highest order
of the two coordinates.

59
00:03:53.230 --> 00:03:54.830
So that's why we got 4,2.

60
00:03:54.830 --> 00:04:01.174
Had we gone back and redone that
where we did columns of tiles or

61
00:04:01.174 --> 00:04:05.567
columns of rows, then it would be 2,4.

62
00:04:05.567 --> 00:04:10.313
But we would have more CSS to deal
with to get them to stack properly.

63
00:04:10.313 --> 00:04:15.021
It turns out that it's really easy to make
them stack the way we wanted to make them

64
00:04:15.021 --> 00:04:18.635
stack when we did rows of columns
rather than columns of rows.

65
00:04:18.635 --> 00:04:23.119
So we made a decision based upon some
constraints that the DOM and/or the CSS

66
00:04:23.119 --> 00:04:24.110
engine gave us.

67
00:04:24.110 --> 00:04:27.675
And that may or
may not have been a good decision, but

68
00:04:27.675 --> 00:04:30.520
it's the decision we made nonetheless.

69
00:04:30.520 --> 00:04:35.354
At this point, we could be feeding back
into as an algorithm just asking questions

70
00:04:35.354 --> 00:04:37.327
like, was that a good decision?

71
00:04:37.327 --> 00:04:38.645
Should I have made that decision?

72
00:04:38.645 --> 00:04:41.137
Should I have made a different decision?

73
00:04:41.137 --> 00:04:43.470
Everybody following me so far?

74
00:04:43.470 --> 00:04:48.138
Okay, so if we have the coordinate 4,2,

75
00:04:48.138 --> 00:04:52.438
that represents where we have clicked.

76
00:04:52.438 --> 00:04:56.972
Let me temporarily switch back
to the code for just a moment.

77
00:04:56.972 --> 00:05:04.829
How would I get,
The tiles that I need to work with?

78
00:05:04.829 --> 00:05:08.996
We have this original board element,
but that's just a DOM element.

79
00:05:08.996 --> 00:05:11.912
How would I get
a two-dimensional array of them?

80
00:05:11.912 --> 00:05:18.888
How would I construct the JavaScript data
structure that we could interact with?

81
00:05:18.888 --> 00:05:20.911
There's a couple of
different ways to do it.

82
00:05:20.911 --> 00:05:24.210
I'm not gonna suggest that there's
one right or wrong way, but

83
00:05:24.210 --> 00:05:25.994
let me show you one way of doing it.

84
00:05:25.994 --> 00:05:28.654
origBoardEL, this is, again,

85
00:05:28.654 --> 00:05:33.594
some core DOM API stuff that most
people never get exposed to.

86
00:05:33.594 --> 00:05:35.298
We have this thing
called querySelectorAll.

87
00:05:35.298 --> 00:05:38.593
Anybody ever heard of querySelectorAll?

88
00:05:38.593 --> 00:05:42.578
This is the less powerful
built-in version of jQuery,

89
00:05:42.578 --> 00:05:47.259
that's how I like to think of it,
but only the CSS selector part.

90
00:05:47.259 --> 00:05:52.113
We can give it a CSS selector, and it'll
go find matching elements to that CSS

91
00:05:52.113 --> 00:05:54.888
selector, so I'm gonna give it div, div.

92
00:05:54.888 --> 00:05:57.886
That's gonna say go find me all
those tiles and return me an array.

93
00:05:57.886 --> 00:06:02.159
It's actually not technically an array,
it's technically this nodelist thing,

94
00:06:02.159 --> 00:06:03.250
which is array like.

95
00:06:03.250 --> 00:06:09.153
And we'll have a couple
places where that's okay and

96
00:06:09.153 --> 00:06:17.039
a couple of other places where we turn
it into an array in order to use it.

97
00:06:17.039 --> 00:06:22.453
Let's clear our currently
highlighted items.

98
00:06:22.453 --> 00:06:25.420
We don't know where they are,
we haven't stored them in any way.

99
00:06:25.420 --> 00:06:29.521
So the only dumb approach that
we can do to clear them is to go

100
00:06:29.521 --> 00:06:31.379
through all of the tiles.

101
00:06:31.379 --> 00:06:38.920
I'm gonna just say we'll clear
all currently highlighted tiles.

102
00:06:38.920 --> 00:06:42.139
If we didn't clear them, each click
would highlight a different row, and

103
00:06:42.139 --> 00:06:44.246
then eventually the whole
board would get read.

104
00:06:44.246 --> 00:06:45.877
So we gotta clear it every time.

105
00:06:45.877 --> 00:06:49.919
So I guess we could have
done the whole react thing,

106
00:06:49.919 --> 00:06:53.597
which is to redraw
the whole board every time.

107
00:06:53.597 --> 00:06:54.855
I'm not a big fan of that.

108
00:06:54.855 --> 00:06:57.827
I'm not a big fan of rerender
the whole page with every change, so

109
00:06:57.827 --> 00:06:59.787
we're gonna go ahead and just clear them.

110
00:07:02.772 --> 00:07:05.966
And here's another DOM API that
you maybe haven't worked with.

111
00:07:05.966 --> 00:07:08.655
The class list gives us an API for

112
00:07:08.655 --> 00:07:13.843
dealing with the classes that
are currently on a DOM element.

113
00:07:13.843 --> 00:07:17.028
And we're just gonna remove
the highlighted class from any of them.

114
00:07:17.028 --> 00:07:20.697
So we're going through all
64 of the tile elements and

115
00:07:20.697 --> 00:07:23.596
removing all of the highlighted elements.

116
00:07:23.596 --> 00:07:27.381
Here's a quick little quiz to make sure
everybody's awake and paying attention.

117
00:07:27.381 --> 00:07:28.854
You ready for the quiz?

118
00:07:28.854 --> 00:07:34.733
How many DOM elements are we using
to represent our chessboard?

119
00:07:34.733 --> 00:07:36.804
I wish I had the Jeopardy
theme music to play.

120
00:07:51.010 --> 00:07:52.512
I've heard 64.

121
00:07:52.512 --> 00:07:53.767
&gt;&gt; I've heard 65.

122
00:07:53.767 --> 00:07:57.239
&gt;&gt; [INAUDIBLE]
&gt;&gt; You said 72?

123
00:07:57.239 --> 00:07:58.594
&gt;&gt; Yeah, like the divs.

124
00:07:58.594 --> 00:07:59.379
&gt;&gt; Okay.

125
00:07:59.379 --> 00:08:01.086
&gt;&gt; 9 plus 1, what's that?

126
00:08:01.086 --> 00:08:02.645
&gt;&gt; It's 8 times 9 plus 1.

127
00:08:02.645 --> 00:08:03.360
8 times 9?

128
00:08:03.360 --> 00:08:06.944
&gt;&gt; 9 elements plus the container for the-
&gt;&gt; 9 elements?

129
00:08:06.944 --> 00:08:09.388
&gt;&gt; Yeah, cuz you have the div
container for the row, and

130
00:08:09.388 --> 00:08:11.900
you have the div container for
each element in the row.

131
00:08:11.900 --> 00:08:13.699
&gt;&gt; Okay.
&gt;&gt; And you have the global container.

132
00:08:13.699 --> 00:08:14.695
&gt;&gt; Okay.

133
00:08:14.695 --> 00:08:17.832
&gt;&gt; So yeah, there's probably
more that they stick on us,

134
00:08:17.832 --> 00:08:20.514
but that would be
the minimum we're creating.

135
00:08:20.514 --> 00:08:21.497
&gt;&gt; Okay.

136
00:08:21.497 --> 00:08:24.446
&gt;&gt; Lots of 65s, a couple of 73s.

137
00:08:24.446 --> 00:08:27.793
&gt;&gt; Yeah, 73 is-
&gt;&gt; 73 is the correct answer.

138
00:08:27.793 --> 00:08:31.973
We have 64 tiles,
we have 8 parent rows that make 72.

139
00:08:31.973 --> 00:08:35.305
And we have one board element
that contains all of them.

140
00:08:35.305 --> 00:08:36.738
That's 73.

141
00:08:36.738 --> 00:08:39.471
You got there with different math,
but the same answer.

142
00:08:39.471 --> 00:08:44.863
Okay, so we're going through
only the 64 tile elements and

143
00:08:44.863 --> 00:08:48.708
removing the highlighted from all of them.

144
00:08:48.708 --> 00:08:51.967
That's a bit of a brute
force way of doing it.

145
00:08:51.967 --> 00:08:56.168
You can already probably imagine that
it might be nice if we had a reference

146
00:08:56.168 --> 00:08:58.134
to which ones were highlighted and

147
00:08:58.134 --> 00:09:01.067
we only removed the class
from the ones that had it.

148
00:09:01.067 --> 00:09:05.932
But is it that big of a deal
to go through 64 versus 15?

149
00:09:05.932 --> 00:09:10.931
Here's another one of the questions that
we probably should have asked about this

150
00:09:10.931 --> 00:09:13.259
problem before diving into the code.

151
00:09:13.259 --> 00:09:18.158
Does our code need to handle
arbitrarily sized chess boards?

152
00:09:18.158 --> 00:09:19.303
In this particular case,

153
00:09:19.303 --> 00:09:22.118
we're gonna say we're only
dealing with 8 by 8 chess boards.

154
00:09:22.118 --> 00:09:26.072
But sometimes you get presented with
a problem and they're like, well,

155
00:09:26.072 --> 00:09:28.511
what about the 317 by 317 chess board?

156
00:09:28.511 --> 00:09:30.621
How does it work then?

157
00:09:30.621 --> 00:09:32.102
There are problems like that.

158
00:09:32.102 --> 00:09:36.633
There's classic algorithmic problems like
the n queens problem and stuff like that,

159
00:09:36.633 --> 00:09:38.877
that deal with arbitrarily sized boards.

160
00:09:38.877 --> 00:09:40.851
That's a question that we need to ask.

161
00:09:40.851 --> 00:09:45.567
Those are fundamental characteristics
of the problem that change

162
00:09:45.567 --> 00:09:47.427
the way we approach this.

163
00:09:47.427 --> 00:09:51.567
If we had to deal with n-sized
chessboards, we might not just be

164
00:09:51.567 --> 00:09:56.179
willing to do a loop over all the possible
tiles if it could be millions.

165
00:09:56.179 --> 00:10:00.958
Here, we know it's fixed at 64,
so not that big a deal.

166
00:10:00.958 --> 00:10:04.585
We still wanna fix it, but
it's not that big a deal.

167
00:10:04.585 --> 00:10:09.763
Okay, so fundamentally what we need,
if tile element has been clicked,

168
00:10:09.763 --> 00:10:13.018
because we're gonna clear it every time,
but

169
00:10:13.018 --> 00:10:17.626
we're only gonna do highlighting
if title element was clicked.

170
00:10:17.626 --> 00:10:22.243
Fundamentally, what we need to do
here is figure out the coordinate of

171
00:10:22.243 --> 00:10:24.054
the tile that was clicked.

172
00:10:24.054 --> 00:10:25.693
Does everybody agree with that?

173
00:10:25.693 --> 00:10:27.883
Does that makes sense?

174
00:10:27.883 --> 00:10:32.437
I need the rowIndex and the columnIndex
of the tile that was clicked.

175
00:10:32.437 --> 00:10:37.123
So I need a rowIndex, and

176
00:10:37.123 --> 00:10:41.369
I need a columnIndex.

177
00:10:41.369 --> 00:10:43.257
How are we gonna figure that out?

178
00:10:43.257 --> 00:10:49.584
So let's go back to the slides for
a moment,

179
00:10:49.584 --> 00:10:54.544
and let's observe the rowIndex.

180
00:10:54.544 --> 00:10:56.053
So that is the 4 here.

181
00:10:56.053 --> 00:11:00.456
If that's the thing
that we had clicked on,

182
00:11:00.456 --> 00:11:08.197
the rowIndex is the position of that
tile's row parent in the board element.

183
00:11:08.197 --> 00:11:12.720
The board element only has eight children,
this one, this one, this one,

184
00:11:12.720 --> 00:11:16.622
this one, this one, this one,
this one and this one right here.

185
00:11:16.622 --> 00:11:19.613
If you were to do the dominance vector and
expand it out,

186
00:11:19.613 --> 00:11:23.127
you would see that the board element
has eight row elements in it.

187
00:11:23.127 --> 00:11:26.053
So if I wanted to know what is the index,

188
00:11:26.053 --> 00:11:29.444
then I just need to know
what is my row parent?

189
00:11:29.444 --> 00:11:34.421
And then I need to ask of the board,
what index is

190
00:11:34.421 --> 00:11:39.287
this row element in
the board's child nodes?

191
00:11:39.287 --> 00:11:44.438
Once I find the row element,
the columnIndex is pretty straightforward,

192
00:11:44.438 --> 00:11:47.871
because the row element
has child nodes in it, and

193
00:11:47.871 --> 00:11:52.715
I just need to ask which index are you
at within the row elements child?

194
00:11:52.715 --> 00:11:57.451
So really,
all that we need to do is actually

195
00:11:57.451 --> 00:12:02.323
find the row element,
rowEl for the tileEl.

196
00:12:02.323 --> 00:12:05.905
Turns out this is quite convenient,
there's a thing called parentNode.

197
00:12:15.165 --> 00:12:18.283
Just to be slightly more precise here,

198
00:12:18.283 --> 00:12:24.240
I'm gonna just change these variable
names to rowIndex and columnIndex.

199
00:12:24.240 --> 00:12:29.300
Now, remember that I said that
this thing is not a real array.

200
00:12:29.300 --> 00:12:31.742
But I wanna do some index searching in it,
so

201
00:12:31.742 --> 00:12:34.690
I'm gonna need to turn
it into a real array.

202
00:12:34.690 --> 00:12:39.411
So the way that I'm gonna turn it into
a real array is to say, or actually,

203
00:12:39.411 --> 00:12:44.456
not that thing into a real array, for
the rowIndex, I need to turn origBoard,

204
00:12:46.807 --> 00:12:53.194
El.childNodes, I need to
turn that into a real array.

205
00:12:53.194 --> 00:12:57.475
And then I can call findIndex on it,

206
00:12:57.475 --> 00:13:02.342
where the element is equal to the rowEl.

207
00:13:07.793 --> 00:13:10.685
Let's put that into a second line so
you can see I'm calling.

208
00:13:11.721 --> 00:13:15.094
Do it this way.

209
00:13:15.094 --> 00:13:17.925
The first thing I'm doing is trying
to get into a real array, and

210
00:13:17.925 --> 00:13:20.878
then I'm calling findIndex on it,
and I'm giving it a function.

211
00:13:20.878 --> 00:13:26.649
That only returns true once I
find that particular rowEl.

212
00:13:26.649 --> 00:13:35.109
A smaller, more compact way of
doing this is indexOf(rowEl).

213
00:13:35.109 --> 00:13:39.578
So whichever one you prefer,
we can do that.

214
00:13:44.135 --> 00:13:49.228
ColumnIndex is pretty straightforward,

215
00:13:49.228 --> 00:13:57.013
we just need to take the rowEl.childNodes
and do the same thing.

216
00:14:05.278 --> 00:14:08.447
That'll tell us our index,
that'll tell us our 4,2 coordinate.

