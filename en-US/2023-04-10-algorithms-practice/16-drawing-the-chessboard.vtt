WEBVTT

1
00:00:00.000 --> 00:00:02.794
The next exercise that we wanna tackle,

2
00:00:02.794 --> 00:00:06.009
it's gonna be a little
bit of a change of pace.

3
00:00:06.009 --> 00:00:08.430
Hopefully, that'll be a good thing.

4
00:00:08.430 --> 00:00:13.514
We're gonna mess around with a few
things that you may not be super

5
00:00:13.514 --> 00:00:18.519
familiar with messing around with,
specifically the DOM API.

6
00:00:18.519 --> 00:00:21.832
Most people these days only
work with these frameworks

7
00:00:21.832 --> 00:00:25.297
that have heavily abstracted
away working with things.

8
00:00:25.297 --> 00:00:28.687
We're actually going to work
with the direct DOM API here.

9
00:00:28.687 --> 00:00:32.320
So, hopefully that doesn't
scare you too much.

10
00:00:32.320 --> 00:00:34.481
This exercise is chessboard diagonals.

11
00:00:34.481 --> 00:00:36.179
Again, there's the link for the repo.

12
00:00:36.179 --> 00:00:41.642
Hopefully, you have that cloned and
changed to the start here branch.

13
00:00:41.642 --> 00:00:45.978
What we're going to be doing is
dealing with a chessboard and

14
00:00:45.978 --> 00:00:51.685
specifically highlighting the diagonals
when you click on a particular tile.

15
00:00:51.685 --> 00:00:54.781
So if I were to click on
any particular tile here,

16
00:00:54.781 --> 00:00:57.507
I want you to know that
there are actually.

17
00:00:58.594 --> 00:01:04.603
Two diagonals that any square on
the chessboard participates in,

18
00:01:04.603 --> 00:01:08.261
and some of you are probably chest fans.

19
00:01:08.261 --> 00:01:13.656
From the chess world, there's actually
a name for these two diagonals.

20
00:01:13.656 --> 00:01:18.144
So, the diagonal that starts on the top
left and works to the bottom right,

21
00:01:18.144 --> 00:01:22.003
if it goes in that direction,
that's called a major diagonal.

22
00:01:22.003 --> 00:01:26.597
And you'll note as I'm kinda doing my
mouse cursor here to illustrate as

23
00:01:26.597 --> 00:01:31.191
a pointer here, you'll notice that
this diagonal is going from top left

24
00:01:31.191 --> 00:01:35.211
to top right that there are 15 of them,
if you count them out.

25
00:01:35.211 --> 00:01:38.468
This square right here is a diagonal
that only has one square in it.

26
00:01:38.468 --> 00:01:40.514
This one has two squares in it.

27
00:01:40.514 --> 00:01:43.206
This one has three squares in it and
so on.

28
00:01:43.206 --> 00:01:48.556
So, those top left to bottom right
diagonals are called the major diagonals.

29
00:01:48.556 --> 00:01:52.306
And then we have another 15
diagonals going the other direction,

30
00:01:52.306 --> 00:01:56.406
which are the minor diagonals going
from the top right to the bottom left.

31
00:01:56.406 --> 00:01:59.517
So this one's a top right,
this one's on top right.

32
00:01:59.517 --> 00:02:06.201
This one with three white squares
in it as a top is a minor.

33
00:02:06.201 --> 00:02:07.402
This one's another minor.

34
00:02:07.402 --> 00:02:09.651
So we have another 15 of
those minor diagonals.

35
00:02:09.651 --> 00:02:15.532
So any square that you click on or put
a piece on, if you will, in a chessboard,

36
00:02:15.532 --> 00:02:20.610
for example, the queen, you put
a queen on any square on the board,

37
00:02:20.610 --> 00:02:26.703
and there are two diagonals, one major and
one minor that that piece can move on.

38
00:02:26.703 --> 00:02:31.463
In our case, we're gonna just be
highlighting these diagonals as

39
00:02:31.463 --> 00:02:36.308
you click on them, much like you
might do if you were clicking to show

40
00:02:36.308 --> 00:02:41.154
all of the places that a bishop or
a queen could move on a chessboard.

41
00:02:41.154 --> 00:02:42.020
Make sense?

42
00:02:42.020 --> 00:02:47.324
All right, so what we're going
to do is we're going to think

43
00:02:47.324 --> 00:02:53.466
about what is the conceptual basis for
how we're going to solve this?

44
00:02:53.466 --> 00:02:57.260
In other words, what is the mental
model that we're going to create for

45
00:02:57.260 --> 00:03:00.631
the chessboard that we're then
going to translate into code?

46
00:03:00.631 --> 00:03:05.091
Can anybody suggest a data structure that

47
00:03:05.091 --> 00:03:09.559
might be used to represent a chessboard?

48
00:03:17.971 --> 00:03:19.301
This is not a trick question.

49
00:03:22.449 --> 00:03:24.380
A two-dimensional array, right?

50
00:03:24.380 --> 00:03:27.464
That might be what the people in
the chatroom were about to say, Mark.

51
00:03:27.464 --> 00:03:31.440
A two-dimensional array seems
like a fairly reasonable

52
00:03:31.440 --> 00:03:34.185
first assumption at a data structure.

53
00:03:34.185 --> 00:03:39.278
We have columns going across here and
rows going across here and

54
00:03:39.278 --> 00:03:44.772
you can have an array of rows, or
you could have an array of columns.

55
00:03:44.772 --> 00:03:49.663
And the columns could have elements in
them, but either way you could represent

56
00:03:49.663 --> 00:03:53.905
a two-dimensional grid as a matrix,
as a two-dimensional array.

57
00:03:53.905 --> 00:03:59.122
Since that's the most natural thing and
also since we need to

58
00:03:59.122 --> 00:04:04.850
ask ourselves how are we going to
draw a chess board on our webpage,

59
00:04:04.850 --> 00:04:11.911
and there's a heavy emphasis on child
elements being inside of parent elements,

60
00:04:11.911 --> 00:04:16.720
there's a hierarchical grid
structure just implied by

61
00:04:16.720 --> 00:04:21.046
the way the DOM elements
are gonna sit on our page.

62
00:04:21.046 --> 00:04:23.048
So that seems like a place to start.

63
00:04:23.048 --> 00:04:24.250
Everybody agree with that?

64
00:04:24.250 --> 00:04:27.639
We're gonna see that may be is
not the best data structure for

65
00:04:27.639 --> 00:04:31.640
our problem but we're gonna start
there and then work our way forward.

66
00:04:31.640 --> 00:04:38.364
So, at any given point on this chessboard,
we'll come back to the diagram.

67
00:04:38.364 --> 00:04:40.749
So let's go ahead and
take a look at some of the code and

68
00:04:40.749 --> 00:04:44.211
orient ourselves to that and then we'll
look at some of these diagrams here.

69
00:04:48.243 --> 00:04:51.995
You're gonna have an index.html and
you'll notice that we have a div id for

70
00:04:51.995 --> 00:04:54.223
the board, but
there's nothing in it yet and

71
00:04:54.223 --> 00:04:56.625
it has a little to-do that
says remove the text,

72
00:04:56.625 --> 00:04:59.990
so you should go ahead and remove
the text just like I did just there.

73
00:04:59.990 --> 00:05:04.551
But the reason that to-do comment was
there is because it reminds us that

74
00:05:04.551 --> 00:05:07.564
we need to write code to
fill in those elements.

75
00:05:07.564 --> 00:05:11.563
Whatever elements are going to
be used to represent the board,

76
00:05:11.563 --> 00:05:16.778
we need to fill in those elements and that
will be part of what we need to implement.

77
00:05:16.778 --> 00:05:19.154
If we look at the chessboard module,

78
00:05:19.154 --> 00:05:24.607
which is where we're gonna be doing all of
our coding, we won't be making changes.

79
00:05:24.607 --> 00:05:29.237
Other than that little change to
index.html, we won't change the CSS or

80
00:05:29.237 --> 00:05:30.143
the app.js.

81
00:05:30.143 --> 00:05:34.623
But we do have a draw function here and
indeed that's where we're going to

82
00:05:34.623 --> 00:05:38.251
write the code that creates
eight rows of eight tiles each.

83
00:05:40.177 --> 00:05:42.353
We're gonna use divs inside of divs.

84
00:05:42.353 --> 00:05:45.680
Nothing fancy, no,
there's not a chessboard element and

85
00:05:45.680 --> 00:05:48.219
we're not gonna make
a custom element here.

86
00:05:48.219 --> 00:05:51.580
So we're just gonna make
divs inside of divs.

87
00:05:51.580 --> 00:05:56.305
Now, what are we gonna do to
make it colored in the way that

88
00:05:56.305 --> 00:05:58.477
a chessboard is colored?

89
00:05:58.477 --> 00:06:04.507
If I come back to this diagram, you'll
note that we have an alternating pattern

90
00:06:04.507 --> 00:06:10.542
on the first row that just goes white,
black, white, black, white, black.

91
00:06:10.542 --> 00:06:15.485
So you might think, well, if I just create
it and it's an eight by eight chessboard

92
00:06:15.485 --> 00:06:20.433
so there's 64 elements, you might just
think what if I just created 64 divs and

93
00:06:20.433 --> 00:06:25.331
have them alternating odd, even, odd,
even, white, black, white, black.

94
00:06:25.331 --> 00:06:28.246
Does anybody spot a problem
with that approach?

95
00:06:32.972 --> 00:06:37.372
&gt;&gt; That's going to be some
gnarly CSS to keep them alive.

96
00:06:37.372 --> 00:06:44.388
&gt;&gt; Potentially, but the biggest problem Is
that when we get to the eighth element,

97
00:06:44.388 --> 00:06:49.461
and then we get to the ninth element,
they are both black.

98
00:06:49.461 --> 00:06:53.464
And then this element and
this element are both white.

99
00:06:53.464 --> 00:06:59.527
So what we have is an alternation not
only across a row, but across columns.

100
00:06:59.527 --> 00:07:02.554
We have an odd even
relationship in the columns and

101
00:07:02.554 --> 00:07:04.870
an odd even relationship in the rows.

102
00:07:04.870 --> 00:07:09.775
It turns out there is actually a pretty
straightforward trick to doing this in

103
00:07:09.775 --> 00:07:14.846
CSS and you don't have to write any CSS,
I've already written the CSS for you.

104
00:07:14.846 --> 00:07:19.274
But it turns out that if we simply do
eight rows of eight elements each rather

105
00:07:19.274 --> 00:07:24.070
than doing all 64 and letting them just
sort of float into the grid or whatever.

106
00:07:24.070 --> 00:07:27.273
If we did eight rows of eight divs each,

107
00:07:27.273 --> 00:07:32.322
we can target the row individually
with a CSS index selector,

108
00:07:32.322 --> 00:07:36.710
and then target each tile
inside of it individually.

109
00:07:36.710 --> 00:07:40.049
And so we'll be able to very easily,
with one CSS rule,

110
00:07:40.049 --> 00:07:42.194
create this alternating pattern.

111
00:07:42.194 --> 00:07:47.315
So, all we really need to do, since I've
already done the work of writing that CSS,

112
00:07:47.315 --> 00:07:51.571
we just simply need to create eight divs,
one for each row, and then,

113
00:07:51.571 --> 00:07:57.230
inside of each row, create eight divs for
the columns, and the CSS will do the rest.

114
00:07:57.230 --> 00:08:03.940
If we go and look at that code, just so
in case you're curious, here's the trick.

115
00:08:03.940 --> 00:08:05.890
We use the nth-child selector.

116
00:08:05.890 --> 00:08:10.506
So you notice this first div is
the row cuz that's the direct

117
00:08:10.506 --> 00:08:13.287
descendant of the board is the row.

118
00:08:13.287 --> 00:08:17.594
And what I'm saying, is the 2n divs and
we'll come back to that in just a moment.

119
00:08:17.594 --> 00:08:21.973
And then for all of those rows,

120
00:08:21.973 --> 00:08:28.212
we wanna target the 2n+1 cells or tiles.

121
00:08:28.212 --> 00:08:33.163
And we wanna target the 2n+1 rows at

122
00:08:33.163 --> 00:08:37.038
the position 2n in the tile.

123
00:08:37.038 --> 00:08:39.601
That's what we're saying here,
so this is a compound selector.

124
00:08:39.601 --> 00:08:43.459
For any of those make them block,
the rest of them leave white, okay?

125
00:08:45.573 --> 00:08:48.554
Quick little note on this 2n thing and

126
00:08:48.554 --> 00:08:53.877
being of course the indexing,
the counting of the child elements.

127
00:08:53.877 --> 00:08:56.840
But here's a little trick that
you may not know about CSS.

128
00:08:56.840 --> 00:09:00.278
CSS is 1-based not 0-based,

129
00:09:00.278 --> 00:09:05.064
so whereas we might think
of 2n is being even or

130
00:09:05.064 --> 00:09:10.368
2n+1 as being odd,
it's actually different.

131
00:09:10.368 --> 00:09:15.080
So we're targeting the odd row and
the even tile, and

132
00:09:15.080 --> 00:09:17.707
the even row and the odd tile.

133
00:09:17.707 --> 00:09:18.858
It's kind of a,

134
00:09:18.858 --> 00:09:24.389
just got to keep straight the whole n is
1-based in CSS that always trips me up.

135
00:09:24.389 --> 00:09:26.438
I don't know if it trips anybody else up.

136
00:09:26.438 --> 00:09:27.308
Okay.

137
00:09:27.308 --> 00:09:30.079
But that CSS selector,
if we create those divs,

138
00:09:30.079 --> 00:09:33.945
the CSS selectors are gonna do
the coloring for us, which is great.

139
00:09:33.945 --> 00:09:37.267
So, all we need to do is write that code.

140
00:09:37.267 --> 00:09:42.213
Now here's where I promised that we
were gonna actually spend a little bit

141
00:09:42.213 --> 00:09:44.220
of effort in native DOM work.

142
00:09:44.220 --> 00:09:50.151
First thing I wanna do is I'm gonna need,
and it'll become obvious later why,

143
00:09:50.151 --> 00:09:53.957
I'm gonna need to keep
a reference to the board EL,

144
00:09:53.957 --> 00:09:58.222
the DOM element that is
the parent element for our board.

145
00:09:58.222 --> 00:10:00.874
That's being passed into the draw
function, and I need to save that off.

146
00:10:00.874 --> 00:10:05.813
So I'm gonna say, very first thing,
origBoardEL = boardEL.

147
00:10:10.660 --> 00:10:14.547
To construct eight rows
of eight tiles each,

148
00:10:14.547 --> 00:10:19.467
the most straightforward way
of doing this is two loops.

149
00:10:19.467 --> 00:10:21.626
I loop nested inside of another loop.

150
00:10:21.626 --> 00:10:27.736
We're not gonna do anything more
complicated than let i equal 0,

151
00:10:27.736 --> 00:10:30.912
i less than or equal to 7, i++.

152
00:10:30.912 --> 00:10:35.855
Quick little note here,
since I'm using less than or equal to 7,

153
00:10:35.855 --> 00:10:39.320
we know that this is
going to do 8 iterations.

154
00:10:39.320 --> 00:10:44.077
I actually think this is a little bit
more semantic because it shows the eight.

155
00:10:44.077 --> 00:10:47.857
Some people like the less than or equal
and then the number because they they

156
00:10:47.857 --> 00:10:50.558
don't like it to think about
it as beyond the bounds.

157
00:10:50.558 --> 00:10:53.869
But I just think the eight kind of
communicates, so you can do less than or

158
00:10:53.869 --> 00:10:56.220
equal to seven or
less than eight, whichever one.

159
00:10:56.220 --> 00:10:57.768
It's gonna do the same
number of iterations.

160
00:10:57.768 --> 00:11:00.265
But just from a code
communication perspective,

161
00:11:00.265 --> 00:11:02.114
I like being able to see eight there.

162
00:11:02.114 --> 00:11:07.940
I would for example use a constant for
this I might say something like,

163
00:11:07.940 --> 00:11:13.273
NUM-ROWS = 8, and
then I would wanna use that NUM-ROWS there

164
00:11:13.273 --> 00:11:18.742
I wouldn't wanna do NUM-ROWS minus one,
if I what I'm saying.

165
00:11:18.742 --> 00:11:22.270
So to me, that's a little bit of a more
semantic signal to use the eight.

166
00:11:22.270 --> 00:11:26.056
I'm gonna leave off the constants
just to keep a little less

167
00:11:26.056 --> 00:11:29.926
code that we're digging into,
but you get the point there.

168
00:11:29.926 --> 00:11:34.325
Okay, so
our nested loop i being the row index and

169
00:11:34.325 --> 00:11:38.724
j will make us the,
We're good algorithmists,

170
00:11:38.724 --> 00:11:43.791
we like to use single letter variables for
everything.

171
00:11:43.791 --> 00:11:49.310
We'll use better variable names elsewhere,
but for right now,

172
00:11:49.310 --> 00:11:53.936
we'll just use i and j for
row and tile index, I think.

173
00:11:53.936 --> 00:11:56.970
Column index, tile index,
those will be interchangeable for us.

174
00:11:56.970 --> 00:11:59.898
Okay, so we need to create a div.

175
00:11:59.898 --> 00:12:07.096
Some of you have never done this before,
but document.createElement("div").

176
00:12:07.096 --> 00:12:13.196
It's not quite as cool looking as JSX,
but it gets the job done.

177
00:12:13.196 --> 00:12:17.453
JSX compiles to document.createElement,
so it's the same thing.

178
00:12:26.816 --> 00:12:28.412
We also need a real element.

179
00:12:28.412 --> 00:12:29.666
I neglected to do that one.

180
00:12:29.666 --> 00:12:32.957
For each row, we're gonna need
to create a parent row element.

181
00:12:32.957 --> 00:12:33.973
So, let's go back and do that.

182
00:12:39.135 --> 00:12:41.374
Same way, row elements and tile element.

183
00:12:43.876 --> 00:12:46.164
What do we do with a tile element?

184
00:12:46.164 --> 00:12:49.088
We append it to the parent row element.

185
00:12:49.088 --> 00:12:55.197
So we do rowEl.appendChild(titleEl).

186
00:13:01.370 --> 00:13:05.303
And after we've appended all of
the tile elements to a row element,

187
00:13:05.303 --> 00:13:09.171
what do we do with the row element
we append it to the board element.

188
00:13:14.692 --> 00:13:20.458
Let's switch over to the browser.

189
00:13:20.458 --> 00:13:22.955
I've got a web server
running on this code.

190
00:13:22.955 --> 00:13:26.104
And when I refresh, boom,
there's our chess board.

191
00:13:31.550 --> 00:13:37.434
One other thing to note is that our
chessboard isn't clickable yet,

192
00:13:37.434 --> 00:13:41.498
but it will be clickable
when we write our code.

193
00:13:41.498 --> 00:13:44.121
So the idea of this is
that I come along here and

194
00:13:44.121 --> 00:13:47.659
I click one of these, and
that's when it should highlight.

