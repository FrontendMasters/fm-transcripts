WEBVTT

1
00:00:00.000 --> 00:00:01.204
Now the fun stuff.

2
00:00:01.204 --> 00:00:05.761
How are we gonna turn that into

3
00:00:05.761 --> 00:00:10.507
highlighting our diagonals?

4
00:00:10.507 --> 00:00:14.738
But let's look at the relationship of
coordinates of the thing that we clicked

5
00:00:14.738 --> 00:00:16.930
and the thing that we want to highlight.

6
00:00:16.930 --> 00:00:21.687
Here's our starting element
that we've clicked on and

7
00:00:21.687 --> 00:00:27.060
here are the first four coordinates
that we need to highlight.

8
00:00:27.060 --> 00:00:30.327
Got a little bit of spacing off here.

9
00:00:30.327 --> 00:00:37.034
But we are highlighting this element
at (3,1), (3,1) this one at (3,3).

10
00:00:37.034 --> 00:00:40.552
This one at (5,1) and this is at (5,3).

11
00:00:40.552 --> 00:00:46.112
Do you see those coordinates
how they match up?

12
00:00:46.112 --> 00:00:48.172
This is row three column three.

13
00:00:48.172 --> 00:00:49.916
This is row three, column one.

14
00:00:49.916 --> 00:00:53.756
This is row five column one and
row five column three.

15
00:00:53.756 --> 00:00:58.670
What do you notice about the relationship
between the coordinates of these

16
00:00:58.670 --> 00:01:02.183
four elements that are on
the respective diagonals?

17
00:01:02.183 --> 00:01:06.144
What's the relationship between
those coordinate values and

18
00:01:06.144 --> 00:01:09.516
the coordinate value of
the thing that we clicked on?

19
00:01:09.516 --> 00:01:12.416
&gt;&gt; Adding, subtracting.

20
00:01:12.416 --> 00:01:16.223
&gt;&gt; It's just different by one, right?

21
00:01:16.223 --> 00:01:18.174
Take (4,2) and go to (3,1).

22
00:01:18.174 --> 00:01:21.549
That means we subtracted
1 from the row index and

23
00:01:21.549 --> 00:01:24.358
we subtracted 1 from the column index.

24
00:01:24.358 --> 00:01:28.843
Take (4,2) and go to (3,3) that's
subtracting 1 from the row index but

25
00:01:28.843 --> 00:01:30.536
adding 1 to the column index.

26
00:01:30.536 --> 00:01:35.042
Same thing going in the downward
direction, we add 1 to the row index,

27
00:01:35.042 --> 00:01:38.436
subtract 1 from the column
index to get (5,1).

28
00:01:38.436 --> 00:01:42.765
We add 1 to both the row and
column index to get (5,3).

29
00:01:42.765 --> 00:01:45.600
The same would be true all the way up and

30
00:01:45.600 --> 00:01:49.327
down all four directions
along those diagonals.

31
00:01:49.327 --> 00:01:55.184
Each thing along the diagonal is just
a + or- of 1 from the previous one.

32
00:01:55.184 --> 00:01:57.264
Following that?

33
00:01:57.264 --> 00:02:00.465
So that kind of suggests
to us an algorithm for

34
00:02:00.465 --> 00:02:03.424
highlighting the diagonals does it not?

35
00:02:03.424 --> 00:02:08.205
We could start at the selected
tile at the clicked tile and

36
00:02:08.205 --> 00:02:13.785
run some loops in the four directions
Increasing indexes of row and

37
00:02:13.785 --> 00:02:18.780
column or decreasing accordingly
in the four directions.

38
00:02:18.780 --> 00:02:24.205
And that would give us the indexes of
the elements that we need to highlight.

39
00:02:24.205 --> 00:02:27.392
Wouldn't give us the elements yet, but

40
00:02:27.392 --> 00:02:31.809
at least gives us the indexes
that we need to highlight.

41
00:02:31.809 --> 00:02:32.804
Make sense?

42
00:02:35.071 --> 00:02:37.051
Let's switch back to the code editor.

43
00:02:40.794 --> 00:02:45.883
We're gonna do four separate loops,
one for each of these directions, okay?

44
00:02:45.883 --> 00:02:52.482
I'm going to highlight in
the upper left direction.

45
00:02:52.482 --> 00:02:56.736
Okay, you'll see me sometimes
just pointing at my computer and

46
00:02:56.736 --> 00:03:02.347
making sure my left's and rights are not
getting backwards or something like that.

47
00:03:02.347 --> 00:03:06.584
So highlighting in the upper left
direction for you it's this, for

48
00:03:06.584 --> 00:03:09.722
me it's this,
the upper left direction, okay?

49
00:03:09.722 --> 00:03:12.192
So what do we know in the upper left?

50
00:03:12.192 --> 00:03:14.712
We know that both the row index and

51
00:03:14.712 --> 00:03:18.678
the column index decrease
in the up left direction.

52
00:03:18.678 --> 00:03:23.691
So we're going to set ourselves
up with a two variable four loop.

53
00:03:23.691 --> 00:03:27.544
Some of you may be aware that
this syntax can be done,

54
00:03:27.544 --> 00:03:33.340
others may be seeing this for the first
time, but we're gonna have an I and a J.

55
00:03:34.456 --> 00:03:38.164
The I starts at the tiles row index and

56
00:03:38.164 --> 00:03:42.120
the J starts at the tiles column index.

57
00:03:42.120 --> 00:03:48.506
We want to keep going while, And
these are gonna be decreasing.

58
00:03:48.506 --> 00:03:52.674
How do we know when we've
reached the edge of the board?

59
00:03:52.674 --> 00:03:55.703
&gt;&gt; We've reached a minimum or a maximum.

60
00:03:55.703 --> 00:04:00.094
&gt;&gt; And what is the minimum for
the row index and column index?

61
00:04:00.094 --> 00:04:01.304
&gt;&gt; 0.

62
00:04:01.304 --> 00:04:02.374
&gt;&gt; 0.

63
00:04:02.374 --> 00:04:06.825
So while i, which is our row indexing,
while i is greater than or

64
00:04:06.825 --> 00:04:10.048
equal to 0 and
j is greater than or equal to 0.

65
00:04:10.048 --> 00:04:13.952
We wanna keep going in that direction, and

66
00:04:13.952 --> 00:04:18.080
we're going to decrement i and
decrement j.

67
00:04:18.080 --> 00:04:21.335
Single four loop doing both,

68
00:04:23.148 --> 00:04:26.753
Decrementing of the row and
column indexes.

69
00:04:26.753 --> 00:04:31.857
The i and j in this loop is going to
give us the indexes of those elements

70
00:04:31.857 --> 00:04:37.059
along that diagonal but it doesn't
give us the elements themselves.

71
00:04:37.059 --> 00:04:42.298
So to get the element themselves,
we're going to need to call

72
00:04:42.298 --> 00:04:47.736
a function which I will call find tile,
that we pass in the row and

73
00:04:47.736 --> 00:04:53.204
column index two and it gives us
back the DOM element reference.

74
00:04:54.689 --> 00:05:00.528
And assuming that that function exists,
which we'll write in a moment

75
00:05:00.528 --> 00:05:06.680
once we get a reference to it we just
need to add the highlighted class to it.

76
00:05:07.820 --> 00:05:13.915
Does everybody understand
how I wrote that four loop?

77
00:05:13.915 --> 00:05:15.615
Does that one make sense?

78
00:05:15.615 --> 00:05:19.273
It's one of the four loops that we need.

79
00:05:19.273 --> 00:05:23.504
It is the one that is going in
the upward and leftward direction.

80
00:05:26.428 --> 00:05:31.522
I don't know if leftward is a word,
but I'm gonna use it.

81
00:05:35.095 --> 00:05:40.988
To save myself some typing,
I'm gonna duplicate that loop and

82
00:05:40.988 --> 00:05:44.997
I'm gonna go do the up-right direction.

83
00:05:44.997 --> 00:05:48.475
What is different about going
in the upright direction?

84
00:05:48.475 --> 00:05:51.291
My row indexes still decrease, so

85
00:05:51.291 --> 00:05:56.446
I still want to do greater than or
equal to 0 for my row indexes.

86
00:05:56.446 --> 00:06:02.733
But my column indexes increase
when I'm going rightward, right?

87
00:06:02.733 --> 00:06:05.425
So I don't want j greater than or
equal to 0.

88
00:06:05.425 --> 00:06:10.535
What I want j, What should this be?

89
00:06:10.535 --> 00:06:17.572
Not greater than or equal to 0,
it should be, Less than 8 or

90
00:06:17.572 --> 00:06:22.851
less than or equal to 7 if you prefer that
form but I'm gonna use the less than 8.

91
00:06:22.851 --> 00:06:26.703
And j is naught- -, what should it be?

92
00:06:26.703 --> 00:06:28.580
I suppose.

93
00:06:29.656 --> 00:06:34.899
That's the only thing I needed to change
was the condition of when it finishes and

94
00:06:34.899 --> 00:06:36.531
incrementing that one.

95
00:06:38.422 --> 00:06:39.953
And now I'm really lazy.

96
00:06:39.953 --> 00:06:45.557
So to do the other two loops, I'm just
gonna duplicate both of those loops.

97
00:06:45.557 --> 00:06:48.732
For these loops, what changes?

98
00:06:48.732 --> 00:06:53.601
We're changing from up to down, And

99
00:06:53.601 --> 00:06:58.278
that's gonna change our i's, right?

100
00:06:58.278 --> 00:07:01.254
So our i is no longer greater than or
equal to 0.

101
00:07:01.254 --> 00:07:08.651
What's the condition for
i when our row index is increasing?

102
00:07:08.651 --> 00:07:14.353
Less than or equal to 7 or less than or
equal to 8, if you like that, right?

103
00:07:14.353 --> 00:07:19.231
So for both of these loops, I'm gonna
change the i condition to i less than 8.

104
00:07:19.231 --> 00:07:25.335
And for both of these I'm gonna
change it from i-- to i + +.

105
00:07:27.706 --> 00:07:32.484
I've taught this workshop
a dozen times now, and

106
00:07:32.484 --> 00:07:38.757
every workshop, including me,
people get these wrong, okay?

107
00:07:38.757 --> 00:07:42.302
So even though you're trying very
meticulously to get the less than or

108
00:07:42.302 --> 00:07:43.083
greater than,

109
00:07:43.083 --> 00:07:46.822
this is one of those places where it's
easy for us to trip up and get wrong.

110
00:07:46.822 --> 00:07:49.713
Even when you're looking at it and
looking at yours and you're like,

111
00:07:49.713 --> 00:07:51.097
it looks right, it looks right.

112
00:07:51.097 --> 00:07:52.326
I don't see what's wrong.

113
00:07:52.326 --> 00:07:56.270
If we try this and yours breaks,
don't waste any more time on it.

114
00:07:56.270 --> 00:07:59.777
You understand how this works just
grab the copy from the repo, right?

115
00:07:59.777 --> 00:08:03.808
I don't want people sitting here
frustrated because they missed a-- or

116
00:08:03.808 --> 00:08:04.922
something, okay?

117
00:08:04.922 --> 00:08:09.675
As long as you understand conceptually how
I constructed the four different loops.

118
00:08:09.675 --> 00:08:14.040
We're simply either incrementing or
decrementing the row and

119
00:08:14.040 --> 00:08:19.738
the tile indexes respectively, so that
we go in the four respective directions.

120
00:08:19.738 --> 00:08:24.623
And the last thing that we're
gonna need is just this little old

121
00:08:24.623 --> 00:08:26.290
find tile function.

122
00:08:27.820 --> 00:08:28.609
Following?

123
00:08:28.609 --> 00:08:32.716
So let's write our find tile function, and

124
00:08:32.716 --> 00:08:37.829
then we'll test everything and
see how we did, okay?

125
00:08:37.829 --> 00:08:46.118
Remember that find tile,
Receives a row index and a column index.

126
00:08:46.118 --> 00:08:51.363
I'll just call it row and
column to keep things short here.

127
00:08:54.672 --> 00:08:57.882
How are we, given a numerical index,

128
00:08:57.882 --> 00:09:03.012
going to pull out a reference
to the respective DOM element?

129
00:09:03.012 --> 00:09:05.315
There are multiple ways to do this.

130
00:09:05.315 --> 00:09:07.880
Some of them are better than others.

131
00:09:07.880 --> 00:09:11.878
I'm only gonna show you one of them,
but this is not certainly the only way.

132
00:09:11.878 --> 00:09:14.652
You could loop through all of
them until you find an i and

133
00:09:14.652 --> 00:09:16.108
j that match row and column.

134
00:09:16.108 --> 00:09:20.690
I'm gonna use the CSS engine to do it.

135
00:09:20.690 --> 00:09:24.951
Because we have the nth tile selector,
and I have these indexes, and

136
00:09:24.951 --> 00:09:29.960
I'm just gonna construct a CSS selector
that pulls out the respective element.

137
00:09:29.960 --> 00:09:33.057
So that is gonna look like this,

138
00:09:33.057 --> 00:09:38.107
we're gonna use our our
friend query selector all,

139
00:09:38.107 --> 00:09:42.486
I'm sorry query selector not selector all.

140
00:09:42.486 --> 00:09:48.810
We got to do it on document and, Oops,

141
00:09:48.810 --> 00:09:53.414
we're gonna select
the parent element board and

142
00:09:53.414 --> 00:09:56.454
then div, this will be our row.

143
00:09:56.454 --> 00:10:02.644
So we're gonna do nth-tile, And

144
00:10:02.644 --> 00:10:09.467
remember that CSS deals with
indexes in one based so

145
00:10:09.467 --> 00:10:13.760
we're gonna take our row + 1.

146
00:10:20.712 --> 00:10:22.178
So if our row index was 4,

147
00:10:22.178 --> 00:10:26.733
then we want to actually pass the selector
5 because that's how CSS will see it.

148
00:10:30.585 --> 00:10:33.028
And then we'll do another
direct descendant.

149
00:10:33.028 --> 00:10:39.934
Actually, since this is a template string
I'll just do these on separate lines.

150
00:10:41.300 --> 00:10:43.847
So it's easier for you to read.

151
00:10:43.847 --> 00:10:47.023
So this was selecting the row element.

152
00:10:47.023 --> 00:10:50.990
Now we wanna select
the tile inside of that.

153
00:10:50.990 --> 00:10:55.864
So we've got another direct descendant and
we'll do nth tile.

154
00:10:57.620 --> 00:11:00.507
And we'll do column + 1.

155
00:11:00.507 --> 00:11:06.268
This offloads to the CSS engine, all
of the work of finding the DOM element.

156
00:11:06.268 --> 00:11:11.123
And it goes on the assumption
that the CSS engine is going to

157
00:11:11.123 --> 00:11:16.092
be more efficient at doing that
than my four loops would be.

158
00:11:16.092 --> 00:11:21.308
If we haven't made a mistake,
hopefully we should

159
00:11:21.308 --> 00:11:27.990
be able to save this file and
switch over to the browser.

160
00:11:27.990 --> 00:11:35.353
Refresh our page, click on an item,
and there's our highlighted tiles.

161
00:11:37.223 --> 00:11:38.617
&gt;&gt; First try.

162
00:11:38.617 --> 00:11:40.419
No mistakes.

163
00:11:40.419 --> 00:11:43.831
&gt;&gt; Doesn't happen very often.

164
00:11:43.831 --> 00:11:46.842
&gt;&gt; They call them first try tile.

165
00:11:46.842 --> 00:11:52.754
&gt;&gt; Somebody mark this date
because we'll wanna remember

166
00:11:52.754 --> 00:11:58.546
the date that I wrote code and
didn't make a mistake.

167
00:11:58.546 --> 00:12:00.752
Turn up very often.

168
00:12:00.752 --> 00:12:05.688
Like I said don't bang your head against
too much if it's like, it's missing

169
00:12:05.688 --> 00:12:10.144
one of the diagonals or it's throwing
an out of bounds are, or something.

170
00:12:10.144 --> 00:12:13.585
It's almost certainly,
you have missed doing a- -, or

171
00:12:13.585 --> 00:12:16.831
you missed doing a less than,
or something like that.

172
00:12:16.831 --> 00:12:19.094
That happens all the time with this stuff.

173
00:12:19.094 --> 00:12:23.456
This is not the kind of code that I'd like
to check into production and say, Hey,

174
00:12:23.456 --> 00:12:27.901
please keep this code around forever cause
it's hard to read, hard to maintain.

175
00:12:27.901 --> 00:12:29.794
But what does it do critically?

176
00:12:29.794 --> 00:12:34.393
It gets us to a first step, a working
algorithm which is out baseline that we

177
00:12:34.393 --> 00:12:39.947
can work from to improve the code, improve
the optimization, improve the readability.

178
00:12:39.947 --> 00:12:43.330
This is the code as it sits
in the option one branch.

179
00:12:43.330 --> 00:12:43.925
So if for

180
00:12:43.925 --> 00:12:49.369
some reason yours missed the character
somewhere it's not quite working.

181
00:12:49.369 --> 00:12:53.454
As long as you feel comfortable
with how we did it and

182
00:12:53.454 --> 00:12:56.779
what the concept was that approached it,

183
00:12:56.779 --> 00:13:01.434
stash your changes, and
check out the option one branch so

184
00:13:01.434 --> 00:13:06.954
that's the correct starting point for
the next work that we'll do.

185
00:13:06.954 --> 00:13:11.354
&gt;&gt; What another way to do this
roll call stuff based on arrays

186
00:13:11.354 --> 00:13:15.854
without the CSS selector,
which approach would you use?

187
00:13:19.105 --> 00:13:23.835
&gt;&gt; Yes, you could have done
this with the tile nodes,

188
00:13:23.835 --> 00:13:27.471
arrays and use those indexes that way.

189
00:13:27.471 --> 00:13:30.546
So you could have said,
original board element,

190
00:13:30.546 --> 00:13:33.412
dot tile nodes dot tile nodes of call.

191
00:13:33.412 --> 00:13:36.333
It absolutely could have done it that way.

192
00:13:36.333 --> 00:13:41.998
My impression, or my guess, is that both
of those are gonna perform about the same

193
00:13:41.998 --> 00:13:47.513
which is to say that they're quite fast
because they're using built in stuff.

194
00:13:47.513 --> 00:13:51.635
I don't think that the CSS
selector is gonna be any less slow

195
00:13:51.635 --> 00:13:55.934
than the array reference because
those aren't real arrays.

196
00:13:55.934 --> 00:13:57.877
Those are DOM node lists.

197
00:13:57.877 --> 00:14:00.918
If they were real native
JavaScript arrays,

198
00:14:00.918 --> 00:14:06.370
then it would be much faster to access
the real native JavaScript array element.

199
00:14:06.370 --> 00:14:11.416
But we don't yet
have an array in JavaScript of those,

200
00:14:11.416 --> 00:14:15.155
what we have is these DOM element lists.

201
00:14:15.155 --> 00:14:19.191
So, I don't think that there's gonna be
much of a performance difference between

202
00:14:19.191 --> 00:14:19.825
the two, but

203
00:14:19.825 --> 00:14:23.300
it's certainly a valid approach if
you like that style of code better.

