WEBVTT

1
00:00:01.316 --> 00:00:07.139
So that's our first improvement to this is
that we improved our lookup by storing and

2
00:00:07.139 --> 00:00:08.460
using this index.

3
00:00:08.460 --> 00:00:13.288
I now want to switch attention to
evaluating the check function,

4
00:00:13.288 --> 00:00:17.347
our recursive implementation
of the check function.

5
00:00:17.347 --> 00:00:21.122
We are absolutely still
going to use recursion here.

6
00:00:22.744 --> 00:00:27.231
But the fundamental question I
want us to ask ourselves is,

7
00:00:27.231 --> 00:00:32.274
do we really have to keep recursing
over the entire elements list?

8
00:00:34.144 --> 00:00:40.914
Is there something that we could recurse
over that would be much smaller?

9
00:00:47.220 --> 00:00:52.041
Effectively, what this technique
is going to work out to do,

10
00:00:52.041 --> 00:00:56.787
we are going to pre-process our
data set or our problem set.

11
00:00:56.787 --> 00:01:01.570
That's another one of these techniques
that you end up seeing is like,

12
00:01:01.570 --> 00:01:06.352
if I did an initial pass through some
stuff and figured some things out,

13
00:01:06.352 --> 00:01:10.440
and then I had a new set of data
to work on from that first path.

14
00:01:10.440 --> 00:01:14.136
My second pass through might
be a lot more efficient.

15
00:01:14.136 --> 00:01:19.095
&gt;&gt; The smallest set you have in any
individual execution of that function is

16
00:01:19.095 --> 00:01:20.322
your input work.

17
00:01:20.322 --> 00:01:25.602
And the pairs that make up your input
word, you have at most a 2-arity pair,

18
00:01:25.602 --> 00:01:30.902
because that is the maximum length of
a tuple in your periodic table data set.

19
00:01:30.902 --> 00:01:35.481
So you are looking at pairwise
combinations, ordered pairwise

20
00:01:35.481 --> 00:01:41.768
combinations So if we are looking at
input word, it would be I-N-N-P-P-U-U-T.

21
00:01:41.768 --> 00:01:45.938
Those are your,
that is your max input set, is the i,

22
00:01:45.938 --> 00:01:48.642
j pairs that you iterate through.

23
00:01:48.642 --> 00:01:50.910
&gt;&gt; True,
except there's more complication to it,

24
00:01:50.910 --> 00:01:53.990
which is we also have the single letters,
there's not just pairs.

25
00:01:53.990 --> 00:01:55.330
&gt;&gt; Yes, you're right.

26
00:01:55.330 --> 00:01:56.164
&gt;&gt; You are right.

27
00:01:56.164 --> 00:02:00.436
&gt;&gt; I am handling that after we have
failures of 2-arities, that's my,

28
00:02:00.436 --> 00:02:03.152
I didn't say that, but yes, you are right.

29
00:02:03.152 --> 00:02:04.469
&gt;&gt; You are correct.

30
00:02:04.469 --> 00:02:07.249
So to put this in terms
that are going to map

31
00:02:07.249 --> 00:02:10.188
to the code that I'm about to write for
you,

32
00:02:10.188 --> 00:02:14.963
what we effectively can do is look at
any given word like the word yucky.

33
00:02:14.963 --> 00:02:19.126
And say that there
are only a fixed number of

34
00:02:19.126 --> 00:02:23.876
possible elements that
could ever match for us.

35
00:02:23.876 --> 00:02:29.541
We don't know whether and in what order
and whether they will actually match up,

36
00:02:29.541 --> 00:02:32.726
but we can actually take that list of 118.

37
00:02:32.726 --> 00:02:37.407
And drastically reduce it to a list
of candidate symbols that could only

38
00:02:37.407 --> 00:02:38.584
possibly match.

39
00:02:40.742 --> 00:02:44.316
Because there's a whole bunch of symbols
that could never possibly match.

40
00:02:44.316 --> 00:02:47.216
And in our current algorithm,
we are reconsulting

41
00:02:47.216 --> 00:02:51.476
all of those every single time,
which is to say, just like I said earlier.

42
00:02:51.476 --> 00:02:56.184
We are learning some information which is
to say we learned that there was a non

43
00:02:56.184 --> 00:02:58.585
match and we forgot that information.

44
00:02:58.585 --> 00:03:01.775
And then we relearned it over, and over,

45
00:03:01.775 --> 00:03:05.252
and over, and
over again let's not do that.

46
00:03:05.252 --> 00:03:08.781
Let's find the list of
possible candidates,

47
00:03:08.781 --> 00:03:14.480
the attendee here was using much more
formal language than I'm gonna use,

48
00:03:14.480 --> 00:03:17.480
but let's find all of the candidates.

49
00:03:17.480 --> 00:03:18.812
That are two letter or

50
00:03:18.812 --> 00:03:23.770
one letter candidates that could possibly
be in our word, and when we recurse,

51
00:03:23.770 --> 00:03:28.582
we're gonna only consider those candidates
and not the whole element list.

52
00:03:28.582 --> 00:03:32.309
Does everybody see why that's gonna
drastically reduce the amount of work?

53
00:03:32.309 --> 00:03:36.943
And not only the amount of work,
but really to an order of

54
00:03:36.943 --> 00:03:41.486
magnitude in big O terms,
it's going to be less work.

55
00:03:41.486 --> 00:03:47.750
It'll actually move the needle in
terms of our work complexity okay,

56
00:03:47.750 --> 00:03:52.961
so I'm going to write us
a function called find candidates

57
00:03:59.496 --> 00:04:03.657
And it will probably be a very
similar translation of what

58
00:04:03.657 --> 00:04:08.337
the attendee was just describing here,
which is we're going to

59
00:04:08.337 --> 00:04:13.210
create two lists that we're going
to then concatenate together.

60
00:04:13.210 --> 00:04:18.195
The list of all the single letter
symbols that could be an R word, and

61
00:04:18.195 --> 00:04:23.195
a list of all the two letter symbols
that could possibly be an R word.

62
00:04:23.195 --> 00:04:27.041
As he described the, I-N,
the N-P, the P-U, and the U-T,

63
00:04:27.041 --> 00:04:30.760
those are the two letter ones
that could possibly be an R word.

64
00:04:30.760 --> 00:04:34.998
We're going to find all those different
candidates and the order in which we can

65
00:04:34.998 --> 00:04:39.570
catenate them together, is going to create
that preference that we have expressed.

66
00:04:39.570 --> 00:04:42.440
Which is that we want
the shortest outcome we want to

67
00:04:42.440 --> 00:04:45.259
spell the word with
the fewest number of symbols.

68
00:04:45.259 --> 00:04:50.604
If we change the order of candidates,
we would end up with a different response.

69
00:04:50.604 --> 00:04:52.810
Everybody follow me, generally?

70
00:04:52.810 --> 00:04:56.678
Sounds more complicated than it is,
so let's just write some code.

71
00:04:59.073 --> 00:05:04.808
I'm gonna set myself up
with a couple of arrays.

72
00:05:08.789 --> 00:05:15.453
Now on the side note, I often get asked by
people somebody may ask why you use VARs?

73
00:05:15.453 --> 00:05:19.251
Because the VAR keyword is
still superior for some tasks,

74
00:05:19.251 --> 00:05:23.369
despite what you've been told
that you should only use const.

75
00:05:23.369 --> 00:05:28.371
Var, let and occasionally const,
are all three useful

76
00:05:28.371 --> 00:05:33.373
in a program and
I've got a multiple hours long dialogue

77
00:05:33.373 --> 00:05:38.492
on that again in my deep
JavaScript Foundations course.

78
00:05:38.492 --> 00:05:41.996
But you'll notice that I use let
in places and I use var in places,

79
00:05:41.996 --> 00:05:46.546
that's on purpose, it's not just because
I'm trying to keep rerunning the test.

80
00:05:46.546 --> 00:05:53.903
Okay, so what I'm doing here
is I'm going to go through

81
00:05:57.114 --> 00:06:01.942
The input word one letter at a time, and
I'm going to use the really old school for

82
00:06:01.942 --> 00:06:06.574
loop way of doing this instead of a for
of loop because I also want the indexes.

83
00:06:06.574 --> 00:06:09.290
I could have done a for
of loop with the entries and

84
00:06:09.290 --> 00:06:11.151
I've done that in other places.

85
00:06:11.151 --> 00:06:15.925
But here I'm gonna go ahead and do a for
of loop so that I have that i index and

86
00:06:15.925 --> 00:06:19.706
it's gonna allow me to step
through at different levels.

87
00:06:19.706 --> 00:06:22.616
Okay, so the first thing is
that we want to collect this

88
00:06:22.616 --> 00:06:26.626
is the most obvious is that we wanna
collect all the one letter candidates.

89
00:06:29.102 --> 00:06:29.960
How are we going to do that?

90
00:06:29.960 --> 00:06:36.350
We're going to say if our
input word is in symbols,

91
00:06:36.350 --> 00:06:41.848
so this is saying does
that single character

92
00:06:41.848 --> 00:06:47.361
appear as a property
in the symbols object?

93
00:06:49.484 --> 00:06:52.866
We could have done symbols.jason
property if you like, but

94
00:06:52.866 --> 00:06:55.864
I like the IN operator here
in terms of its semantics.

95
00:06:55.864 --> 00:07:03.285
We're saying, is that there And, is it
not the case that one letter symbols?

96
00:07:08.829 --> 00:07:09.764
Already has it.

97
00:07:13.669 --> 00:07:16.888
I'm gonna split this onto two lines,
because it's a little easier to read here.

98
00:07:23.918 --> 00:07:29.150
So our condition is,
is the letter that we're consulting

99
00:07:29.150 --> 00:07:35.042
in our input word does it exist as
a single letter symbol yes or no?

100
00:07:35.042 --> 00:07:39.478
If it does exist,
have we not already found it?

101
00:07:39.478 --> 00:07:42.616
Because I don't want to unnecessarily
stick it into that array.

102
00:07:42.616 --> 00:07:49.668
Now want to pause for a moment does
anybody spot a potential sub optimal or

103
00:07:49.668 --> 00:07:54.075
less efficiency with
what I just described?

104
00:08:01.710 --> 00:08:05.813
I made a deliberate choice here but there
are some consequences to the deliberate

105
00:08:05.813 --> 00:08:08.179
choice does anybody spot
where they might be?

106
00:08:16.452 --> 00:08:20.739
&gt;&gt; We are using, well, and this might not
be the one you're thinking of, but we're

107
00:08:20.739 --> 00:08:25.299
using NOT on line 129, which if you have
a very large set you're checking against.

108
00:08:25.299 --> 00:08:28.874
Is going to be incredibly expensive
because it's going to have to exhaust

109
00:08:28.874 --> 00:08:29.864
the set every time.

110
00:08:29.864 --> 00:08:34.208
To run that operation, you would
probably want to optimize it by matching

111
00:08:34.208 --> 00:08:37.571
explicitly there instead of
using the NOT operator, but

112
00:08:37.571 --> 00:08:41.375
that's getting really pedantic and
I think I'm missing here.

113
00:08:41.375 --> 00:08:46.477
&gt;&gt; I think you're in the right direction,
but not quite on it, so

114
00:08:46.477 --> 00:08:51.868
let me say it this way,
I'm effectively checking to see whether or

115
00:08:51.868 --> 00:08:55.161
not it's unique in that array, right?

116
00:08:55.161 --> 00:09:00.546
Did I have a data structure
that we talked about earlier

117
00:09:00.546 --> 00:09:08.521
today in our workshop whose job it is to
keep track of things that are unique sets?

118
00:09:08.521 --> 00:09:14.253
So if I just tried to stick it into a set,
and then check whether it was in the set,

119
00:09:14.253 --> 00:09:20.001
the set data structure would make sure
that I didn't reinsert it a second time.

120
00:09:20.001 --> 00:09:24.068
So that could avoid my condition here, so

121
00:09:24.068 --> 00:09:29.193
you might ask, well,
why don't you just use a set?

122
00:09:29.193 --> 00:09:32.593
I want to see if anybody can
spot why I don't use a set here.

123
00:09:37.856 --> 00:09:39.759
It's subtle, but it's important, yes?

124
00:09:39.759 --> 00:09:43.105
&gt;&gt; Because it doesn't have indexes.

125
00:09:43.105 --> 00:09:47.548
&gt;&gt; That's not quite it, no, yes Mark.

126
00:09:47.548 --> 00:09:51.416
&gt;&gt; This would cost a lot of
memory work because we don't have

127
00:09:51.416 --> 00:09:53.763
a unique reference to the symbol.

128
00:09:53.763 --> 00:09:58.396
&gt;&gt; No that's not so, I think I kind of see
where that comment is coming from, but

129
00:09:58.396 --> 00:10:02.843
that's something that we should leave
to the JavaScript engine anyway.

130
00:10:02.843 --> 00:10:05.250
That's at a lower layer of optimization,
yes,

131
00:10:05.250 --> 00:10:05.899
here
&gt;&gt; Well,

132
00:10:05.899 --> 00:10:08.834
in the example yucky we
needed the Y twice, right?

133
00:10:08.834 --> 00:10:10.579
&gt;&gt; We did need the Y twice,
but that's okay,

134
00:10:10.579 --> 00:10:12.772
because we're just
constructing candidates here.

135
00:10:12.772 --> 00:10:17.247
We're not constructing the actual answer,
good thinking you are right, yes?

136
00:10:17.247 --> 00:10:19.087
&gt;&gt; Several people said you need order.

137
00:10:19.087 --> 00:10:22.478
&gt;&gt; Yes, thank you I'm glad,
sets are un ordered,

138
00:10:22.478 --> 00:10:25.057
and the order here matters, right?

139
00:10:25.057 --> 00:10:29.725
Remember I said that the order that we put
these things in, is going to matter in

140
00:10:29.725 --> 00:10:33.634
terms of what outcome we get,
whether we get the longer than not.

141
00:10:33.634 --> 00:10:38.490
Within each one,
the order doesn't super matter, but

142
00:10:38.490 --> 00:10:42.001
it is kind of important, but moreover,

143
00:10:42.001 --> 00:10:46.880
the set is the wrong data
structure when order matters.

144
00:10:46.880 --> 00:10:49.566
If we're going to discover these in order,
and

145
00:10:49.566 --> 00:10:52.052
we're going to concatenate them in order,

146
00:10:52.052 --> 00:10:56.774
we should not confuse the reader of this
code by using an unordered data structure.

147
00:10:56.774 --> 00:11:04.625
Even if it worked, it would create
the wrong communication in this code.

148
00:11:04.625 --> 00:11:08.621
Since order matters here,
I'm going to stick with the array and

149
00:11:08.621 --> 00:11:10.103
do the array includes.

150
00:11:11.992 --> 00:11:15.633
One other small subtle
thing that is really

151
00:11:15.633 --> 00:11:20.493
a JavaScriptism rather than
an algorithm sort of thing.

152
00:11:20.493 --> 00:11:24.127
If I constructed these as two sets, and

153
00:11:24.127 --> 00:11:29.195
I then wanted to iterate over them,
the iteration over

154
00:11:29.195 --> 00:11:35.046
a set is a more expensive operation
in one of two possible ways.

155
00:11:35.046 --> 00:11:39.198
I can either render the set
out to an ordered array, and

156
00:11:39.198 --> 00:11:43.077
the order of the array that
comes out of the set is a,

157
00:11:43.077 --> 00:11:47.882
predefined in the specification
how it knows what order to do.

158
00:11:47.882 --> 00:11:52.705
But there is a specification defined
ordering if you enumerate a set.

159
00:11:52.705 --> 00:11:58.918
I could render that out to an array, or I
could construct an iterator over the set.

160
00:11:58.918 --> 00:12:03.520
Either one of those is going to create
more memory pressure versus just

161
00:12:03.520 --> 00:12:06.724
keeping these two arrays around and
using them.

162
00:12:06.724 --> 00:12:12.623
So there is a trade off that I'm making
here, which is to say, the includes

163
00:12:12.623 --> 00:12:19.105
method does need to do a lookup that's not
quite as efficient as a set Has would be.

164
00:12:19.105 --> 00:12:25.555
But we're only gonna have a maximum of
like a dozen maybe two dozen candidates.

165
00:12:25.555 --> 00:12:29.031
If you think about it
there's only 118 symbols so

166
00:12:29.031 --> 00:12:33.700
we're never gonna have any more than
a few dozen candidates in any word

167
00:12:36.435 --> 00:12:41.055
So I make the determination that for both
code readability, communication, and for

168
00:12:41.055 --> 00:12:43.569
performance, memory performance reasons.

169
00:12:43.569 --> 00:12:47.215
The array was the right choice,
but I just wanted you to see

170
00:12:47.215 --> 00:12:51.103
that there's a choice being made
here versus the set choice.

171
00:12:51.103 --> 00:12:54.671
And in other cases, the set might
have been the right data structure.

172
00:12:54.671 --> 00:12:59.627
Okay, so now that we have checked
to see if we can stick it in,

173
00:12:59.627 --> 00:13:01.391
then we just simply.

174
00:13:05.379 --> 00:13:06.148
Push it in.

175
00:13:13.973 --> 00:13:18.939
That's collected the one word candidates
we now need to also collect the two word

176
00:13:18.939 --> 00:13:19.822
candidates.

177
00:13:20.837 --> 00:13:22.349
Sorry, two letter candidates.

178
00:13:24.502 --> 00:13:26.882
Doing it in the same
loop as we go through,

179
00:13:26.882 --> 00:13:29.469
we can collect those
two letter candidates.

180
00:13:29.469 --> 00:13:33.247
So we're gonna say if i is less than or
equal to,

181
00:13:33.247 --> 00:13:38.360
this is just a little bit of math
to let me know that I need to stop.

182
00:13:38.360 --> 00:13:41.274
One before the end rather than at the end.

183
00:13:47.537 --> 00:13:49.937
Because I can't get
a two letter candidate,

184
00:13:49.937 --> 00:13:54.104
starting at the last letter of the word,
I can only get a two letter candidate,

185
00:13:54.104 --> 00:13:56.145
at the next to last letter of the word.

186
00:14:00.789 --> 00:14:06.863
I'll go ahead and get that so I don't
have to just keep re-slicing it over and

187
00:14:06.863 --> 00:14:11.628
over, so we'll say slice starting at i and
going to i + 2 and

188
00:14:11.628 --> 00:14:14.725
the slices Non-inclusive on the end.

189
00:14:14.725 --> 00:14:18.962
So, it goes from i, to i + 1,
and then when it gets to i + 2,

190
00:14:18.962 --> 00:14:23.794
it does not include it so,
this is only getting those two characters.

191
00:14:27.911 --> 00:14:35.441
I'm going to say if two in symbols
same kind of if statement is above.

192
00:14:35.441 --> 00:14:40.290
If two that is those two
characters in the Word, or

193
00:14:40.290 --> 00:14:45.146
as the smarter gentleman
said the pairwise here.

194
00:14:45.146 --> 00:14:50.102
If the two N symbols and
this is not already something

195
00:14:50.102 --> 00:14:54.278
that we put into the two
letter symbols array

196
00:14:56.635 --> 00:15:04.518
Includes Two

197
00:15:04.518 --> 00:15:09.204
letter symbols.push two.

198
00:15:11.663 --> 00:15:16.492
So one loop through our input word which
is that most what again is gonna be

199
00:15:16.492 --> 00:15:21.323
like 5,10 15 characters that somebody
is going to type at most 5 or

200
00:15:21.323 --> 00:15:25.458
10 or 15 characters that
they're going to loop through.

201
00:15:25.458 --> 00:15:30.469
And we're going to collect the one
letter symbol candidates and

202
00:15:30.469 --> 00:15:33.825
the two letter symbol candidates as we go.

203
00:15:33.825 --> 00:15:36.520
We've got them in two separate arrays and

204
00:15:36.520 --> 00:15:39.758
we want to return one final
array with all of them.

205
00:15:39.758 --> 00:15:43.462
And this is where the order
matters because we want to

206
00:15:43.462 --> 00:15:48.442
order the two letter symbols first,
and then the one letter symbols.

207
00:15:48.442 --> 00:15:52.002
That is to say that as our
algorithm progresses and

208
00:15:52.002 --> 00:15:54.885
recurses over this list of candidates,

209
00:15:54.885 --> 00:15:59.913
we want it to prefer a two letter
option first over a one letter option.

