WEBVTT

1
00:00:00.000 --> 00:00:03.667
Okay, so we're gonna switch
back to our code editor.

2
00:00:06.659 --> 00:00:11.491
And we're gonna take out this
hard coding of return yucky.

3
00:00:11.491 --> 00:00:13.939
And I'm gonna make it go
back to the empty array,

4
00:00:13.939 --> 00:00:16.405
because it is in fact part
of the specification.

5
00:00:16.405 --> 00:00:20.176
That in the case that we do not find it,
we wanna return an empty array.

6
00:00:20.176 --> 00:00:22.642
That's how we indicate if
it failed to spell it,

7
00:00:22.642 --> 00:00:24.336
is that we return an empty array.

8
00:00:24.336 --> 00:00:28.626
Okay, so the first thing that we
definitely want to check is to make sure,

9
00:00:28.626 --> 00:00:33.127
this might not seem like it's super
useful but you'll see why, in a minute,

10
00:00:33.127 --> 00:00:34.815
why we're gonna want this.

11
00:00:34.815 --> 00:00:38.529
We need to check that we actually
have been given something.

12
00:00:38.529 --> 00:00:42.317
The app is gonna make sure that we do
that but you'll see why in a moment,

13
00:00:42.317 --> 00:00:44.796
cuz we're gonna invoke
some recursion here.

14
00:00:44.796 --> 00:00:48.293
We need to check to make sure that we
actually have some input word to look at.

15
00:00:48.293 --> 00:00:49.269
So, first thing,

16
00:00:49.269 --> 00:00:53.490
we definitely need that if statement kinda
bounding what it is that we're doing.

17
00:00:53.490 --> 00:00:57.684
Now, we want to go through all
of the elements and figure out,

18
00:00:57.684 --> 00:00:59.713
how do I start spelling this?

19
00:00:59.713 --> 00:01:02.712
So, if you were to pull out a pen and
a piece of paper and

20
00:01:02.712 --> 00:01:06.983
you had the periodic table in the job,
which I've linked to in the project,

21
00:01:06.983 --> 00:01:09.484
you could just sort of hand do that,
right?

22
00:01:09.484 --> 00:01:13.002
You could say, all right,
I'm gonna start with the first letter, and

23
00:01:13.002 --> 00:01:16.009
I'll see if I find an element
that matches the first letter.

24
00:01:16.009 --> 00:01:19.056
And then you might go back and
say, well, actually,

25
00:01:19.056 --> 00:01:23.049
what I wanna first do is check to see
if I find the first two letters as a,

26
00:01:23.049 --> 00:01:25.797
symbol because I want to
prefer fewer symbols.

27
00:01:25.797 --> 00:01:27.655
That's the interpretation we'll take.

28
00:01:27.655 --> 00:01:31.383
I wanna prefer fewer symbols, so maybe
I'll first go through the periodic list

29
00:01:31.383 --> 00:01:33.286
and see if I find any two letter matches.

30
00:01:33.286 --> 00:01:37.842
But even if we find a two letter match, it
may end up being that the next letter you

31
00:01:37.842 --> 00:01:41.107
don't have, and so,
actually have a one letter match.

32
00:01:41.107 --> 00:01:43.073
So, you're gonna have to
do some backtracking.

33
00:01:43.073 --> 00:01:46.528
As soon as you start to write
this out on a piece of paper,

34
00:01:46.528 --> 00:01:51.454
you're gonna immediately notice some
examples where the greedy approach of,

35
00:01:51.454 --> 00:01:55.349
let me take the two symbol every
time ends up not being optimal or

36
00:01:55.349 --> 00:01:59.562
it ends up putting you in a corner
where the solution doesn't work.

37
00:01:59.562 --> 00:02:02.591
So, sometimes you wanna start
with the two symbol but

38
00:02:02.591 --> 00:02:05.158
be able to backtrack and
try a single symbol.

39
00:02:05.158 --> 00:02:08.093
That'll end up happening a lot
if you try that out on paper, so

40
00:02:08.093 --> 00:02:11.890
I'm short-circuiting a little bit of
that work for you, but try it yourself.

41
00:02:11.890 --> 00:02:14.222
Take a couple of words and try it.

42
00:02:14.222 --> 00:02:16.131
And by the way,
I should have mentioned this before.

43
00:02:16.131 --> 00:02:18.380
Let me switch back to the app.js.

44
00:02:18.380 --> 00:02:20.697
I gave you some test cases here.

45
00:02:20.697 --> 00:02:24.862
These are all words that can actually be
spelled with just the periodic symbols,

46
00:02:24.862 --> 00:02:28.430
and I wanna highlight even words
like the word irresponsibilities.

47
00:02:28.430 --> 00:02:32.940
Some really interesting words
that you might not have expected,

48
00:02:32.940 --> 00:02:37.942
dynasties, all of these are words
that can be spelled with our speller,

49
00:02:37.942 --> 00:02:42.866
and there are, I'm sure, many more,
ostentatious, viscosities.

50
00:02:42.866 --> 00:02:45.710
I told you about yucky, I like that one.

51
00:02:45.710 --> 00:02:48.916
So, there's some fun options in here.

52
00:02:48.916 --> 00:02:52.413
Anyway, you can pick any of those as
you're kind of testing on your paper.

53
00:02:52.413 --> 00:02:56.333
Try spelling those out and
see that you'll end up needing to do some

54
00:02:56.333 --> 00:03:00.050
backtracking from the two back to the one,
that sort of thing.

55
00:03:00.050 --> 00:03:01.815
So, we're gonna need to handle that.

56
00:03:01.815 --> 00:03:06.660
And as soon as you start realizing that
your problem is gonna need to backtrack,

57
00:03:06.660 --> 00:03:09.771
that's the first mental
bookmark that tells you,

58
00:03:09.771 --> 00:03:12.468
I'm gonna need to manage
a stack of states.

59
00:03:12.468 --> 00:03:15.549
I'm gonna need to go down
in a problem solution path,

60
00:03:15.549 --> 00:03:19.997
and then I might get to the end and
everything's great, or it might realize,

61
00:03:19.997 --> 00:03:24.532
I need to back myself back up, so, I need
to remember those states and back up.

62
00:03:24.532 --> 00:03:28.782
And as soon as you're managing a stack of
states, the first thing that should come

63
00:03:28.782 --> 00:03:31.818
to your mind is,
maybe I wanna solve this with recursion.

64
00:03:31.818 --> 00:03:36.652
I could do it with a loop and managing my
own states, but this is probably gonna be

65
00:03:36.652 --> 00:03:40.634
a case where I want some recursion
to make things a little easier.

66
00:03:40.634 --> 00:03:44.459
So, we do need to go through
all of the elements.

67
00:03:44.459 --> 00:03:47.529
There's no short-circuiting this.

68
00:03:47.529 --> 00:03:50.884
So, I'm gonna of elements.

69
00:03:52.256 --> 00:03:59.735
We need to go through the whole list of
our elements to see, to inspect each one.

70
00:03:59.735 --> 00:04:04.027
And the thing that we
want to guard on is if

71
00:04:04.027 --> 00:04:08.827
the input word has enough
characters in it for

72
00:04:08.827 --> 00:04:12.763
whatever symbol we're looking at.

73
00:04:12.763 --> 00:04:15.982
The input word at this moment could
have only one character in it, and

74
00:04:15.982 --> 00:04:18.813
we might be looking at a symbol
that has two characters in it,

75
00:04:18.813 --> 00:04:21.830
in which case we don't need to
pay any attention to that symbol.

76
00:04:21.830 --> 00:04:22.718
You follow me?

77
00:04:22.718 --> 00:04:27.732
So, we're gonna do an if statement
here that says, if the symbol length,

78
00:04:30.827 --> 00:04:33.562
Sorry, let me do this.

79
00:04:33.562 --> 00:04:39.548
Let's save ourselves a little bit of
typing by assigning this to a variable.

80
00:04:39.548 --> 00:04:44.846
We're gonna say, element.symbol, and
we're gonna need it to be lowercase for

81
00:04:44.846 --> 00:04:48.935
our comparison, so
I'm just gonna go ahead and lowercase it.

82
00:04:48.935 --> 00:04:50.296
So, we're just saving off that property.

83
00:04:50.296 --> 00:04:50.804
There's a question?

84
00:04:50.804 --> 00:04:52.608
Yes.

85
00:04:52.608 --> 00:04:55.166
&gt;&gt; Should we divide input by two and

86
00:04:55.166 --> 00:05:00.300
recursively cover both cases and
do that for each possibility?

87
00:05:00.300 --> 00:05:02.082
&gt;&gt; That's a great question.

88
00:05:02.082 --> 00:05:06.482
So, you remember that we talked earlier
in the workshop in the primer about that

89
00:05:06.482 --> 00:05:09.450
notion of divide and
conquer that recursive search.

90
00:05:09.450 --> 00:05:13.494
Remember the eight golden spheres, if we
did four and four and then two and two and

91
00:05:13.494 --> 00:05:14.400
then one and one.

92
00:05:14.400 --> 00:05:18.588
The nature of that problem
allowed us to eliminate half of

93
00:05:18.588 --> 00:05:22.000
the possible things that
we needed to look at.

94
00:05:22.000 --> 00:05:26.235
Does the nature of this problem
allow us that same strategy?

95
00:05:26.235 --> 00:05:29.861
Imagine if we took the first
half of whatever the word is and

96
00:05:29.861 --> 00:05:31.638
the second half of the word.

97
00:05:31.638 --> 00:05:33.711
We are gonna have to do both.

98
00:05:33.711 --> 00:05:37.782
So, that's not really removing
part of our problem, but

99
00:05:37.782 --> 00:05:40.117
it does make the problem easier.

100
00:05:40.117 --> 00:05:43.804
So, it does still fit generally under
the concept of divide and conquer.

101
00:05:43.804 --> 00:05:47.715
If I can find out the symbols for
the first half and the symbols for

102
00:05:47.715 --> 00:05:52.079
the second half, that seems on
the surface to be a plausible approach.

103
00:05:52.079 --> 00:05:54.754
And then for each one of those,
you can divide and divide.

104
00:05:54.754 --> 00:05:59.341
So, it does seem, on the surface, that it
works, but there is a wrinkle here that

105
00:05:59.341 --> 00:06:02.411
will make this probably not
the right strategy for us.

106
00:06:02.411 --> 00:06:08.087
I wonder if anybody can spot the wrinkle,
why might that not be what we wanna do?

107
00:06:11.519 --> 00:06:13.610
&gt;&gt; If you do it, it's in the middle.

108
00:06:13.610 --> 00:06:19.140
The combination of letters that you
used to split could have been needed for

109
00:06:19.140 --> 00:06:20.823
you to spell the word.

110
00:06:20.823 --> 00:06:24.074
&gt;&gt; Yeah, exactly,
if you chose to split, first of all,

111
00:06:24.074 --> 00:06:28.399
we have the question of, what if my
word is not an even number of letters?

112
00:06:28.399 --> 00:06:30.880
So then, I'm gonna have a four and
a three, for example,

113
00:06:30.880 --> 00:06:33.628
not that big a deal cuz we can
still handle those independently.

114
00:06:33.628 --> 00:06:38.147
But if I chose to divide it at four and
three, and figure out symbols for

115
00:06:38.147 --> 00:06:40.751
the four and then symbols for the three,

116
00:06:40.751 --> 00:06:45.978
what if the symbol that actually works to
make this a match needs to span that gap?

117
00:06:45.978 --> 00:06:50.202
So, I'm actually gonna need to potentially
pick multiple pivot points for

118
00:06:50.202 --> 00:06:52.850
that splitting and
do the work multiple times.

119
00:06:52.850 --> 00:06:55.556
Do the work in one way,
and if it doesn't work,

120
00:06:55.556 --> 00:06:59.762
then try splitting it in a different way
and see if I can make it work there.

121
00:06:59.762 --> 00:07:02.492
So, we're gonna end up potentially
doing more work that way.

122
00:07:02.492 --> 00:07:04.524
So, that's the wrinkle
that we wanna worry about.

123
00:07:04.524 --> 00:07:05.547
Yes,
&gt;&gt; I would say

124
00:07:05.547 --> 00:07:09.244
that you also have to duplicate
your reference dataset somehow.

125
00:07:09.244 --> 00:07:11.159
If you are running two checks,

126
00:07:11.159 --> 00:07:14.559
you can't assume that
the lookup table can be halved.

127
00:07:14.559 --> 00:07:19.643
So, if you have if you split one array
into two, you either need to have two

128
00:07:19.643 --> 00:07:25.302
references to the same lookup or you need
to ship that lookup table to both points,

129
00:07:25.302 --> 00:07:30.735
because you can't make the assumption
that you know how to split up your data.

130
00:07:30.735 --> 00:07:34.654
&gt;&gt; Yeah, so, another way of stating
that is that we have a state management

131
00:07:34.654 --> 00:07:38.319
problem, which we have anyway when
we're doing this recursive and

132
00:07:38.319 --> 00:07:42.498
backtracking thing, but we have
a reference problem, which is just passing

133
00:07:42.498 --> 00:07:46.520
the array to the next level or keeping
track of the array at the next level.

134
00:07:46.520 --> 00:07:51.299
Might not work because of the references
that the array might survive across those

135
00:07:51.299 --> 00:07:52.349
function calls.

136
00:07:52.349 --> 00:07:56.251
So, you're right, we'd have to be more
careful with our state management in that

137
00:07:56.251 --> 00:07:57.489
scenario, absolutely.

138
00:07:57.489 --> 00:08:01.864
So, we're gonna go a different approach
here, which is what our strategy that

139
00:08:01.864 --> 00:08:05.409
we're going to take, and
you may have arrived at this already.

140
00:08:05.409 --> 00:08:09.058
But this is, again, we're gonna do
an implementation is the naive way, and

141
00:08:09.058 --> 00:08:12.168
then we'll come back and
try to rethink if there's a better way.

142
00:08:12.168 --> 00:08:14.732
So, when you look at this
solution that I'm gonna try,

143
00:08:14.732 --> 00:08:16.383
you may think, this is awful.

144
00:08:16.383 --> 00:08:19.671
That's the point,
we want something that works.

145
00:08:19.671 --> 00:08:24.082
And this was the most
naive that I came up with.

146
00:08:24.082 --> 00:08:26.114
Others may come up with different ones,

147
00:08:26.114 --> 00:08:28.215
this is the most naive
that I came up with.

148
00:08:28.215 --> 00:08:32.797
What we're going to do is, we're
going to take off a symbol off of our

149
00:08:32.797 --> 00:08:37.696
element list if it matches the first
one or two characters in the input word

150
00:08:37.696 --> 00:08:42.612
that we're considering, we're gonna
take one of those and attempt it.

151
00:08:42.612 --> 00:08:44.727
Basically we'll think about
it kind of like a candidate.

152
00:08:44.727 --> 00:08:46.107
We're gonna have a partial match.

153
00:08:46.107 --> 00:08:50.917
So, we'll take that one, and then we'll
split the word into what we matched

154
00:08:50.917 --> 00:08:53.213
versus what we have not yet matched.

155
00:08:53.213 --> 00:08:55.601
So, it's kinda like divide and
conquer, but

156
00:08:55.601 --> 00:08:59.643
it's not a binary thing where we're
doing halves, we're gonna split it into

157
00:08:59.643 --> 00:09:02.914
what I've already matched versus
what I have not yet matched.

158
00:09:02.914 --> 00:09:07.625
And we're gonna recurse into matching what
I have not yet matched as the new word,

159
00:09:07.625 --> 00:09:10.641
it's a partial word that gets smaller and
smaller.

160
00:09:10.641 --> 00:09:14.002
So, it's an implementation of divide and
conquer, but

161
00:09:14.002 --> 00:09:17.502
it's not your strictly half and
half kind of thing the way,

162
00:09:17.502 --> 00:09:20.383
we typically think of in a binary search,
okay?

163
00:09:20.383 --> 00:09:23.956
We're gonna try that and
go all the way down.

164
00:09:23.956 --> 00:09:28.445
So, we're gonna sort of depth-first
recurse all the way down to try to find

165
00:09:28.445 --> 00:09:29.295
that answer.

166
00:09:29.295 --> 00:09:33.625
And if we succeed, great, but if we fail,
then we have to kinda back our way up and

167
00:09:33.625 --> 00:09:36.329
try a different symbol at
each one of those steps.

168
00:09:36.329 --> 00:09:39.894
We have to keep trying to go down and
back up and down and

169
00:09:39.894 --> 00:09:45.390
back up until we either have exhausted all
possible options, or we found a match.

170
00:09:45.390 --> 00:09:48.460
That'll be our basic strategy here.

171
00:09:48.460 --> 00:09:48.980
Makes sense?

172
00:09:50.400 --> 00:09:51.472
Hopefully, at least roughly.

173
00:09:51.472 --> 00:09:56.170
I'm getting a couple of nods, so, we'll
hope that that makes at least rough sense.

174
00:09:56.170 --> 00:09:57.820
Let's try this with some code.

175
00:09:57.820 --> 00:10:00.420
So, let's say that we
need to double check.

176
00:10:00.420 --> 00:10:03.581
As I was saying a bit before
I got ahead of myself,

177
00:10:03.581 --> 00:10:08.058
we wanna double check that we actually
have enough characters left in

178
00:10:08.058 --> 00:10:11.857
the input word to match
the symbol that we're looking at.

179
00:10:11.857 --> 00:10:14.563
So, we wanna say that
the symbol.length is less than or

180
00:10:14.563 --> 00:10:16.243
equal to the inputWord.length.

181
00:10:19.274 --> 00:10:21.579
Remember, as I recurse down,

182
00:10:21.579 --> 00:10:25.937
this parameter is gonna get a smaller and
smaller string.

183
00:10:25.937 --> 00:10:28.752
We're gonna be slicing off more and
more off the front of it and

184
00:10:28.752 --> 00:10:31.257
leaving only the remaining
characters in the string.

185
00:10:31.257 --> 00:10:33.368
So, we're going from the front.

186
00:10:33.368 --> 00:10:36.571
We could go from the back, but it turns
out it's better to go from the front.

187
00:10:36.571 --> 00:10:38.021
It's less work to go from the front.

188
00:10:40.509 --> 00:10:44.367
So, what we're checking here is,
for this given symbol,

189
00:10:44.367 --> 00:10:48.472
do I have at least enough input
word characters to make a match?

190
00:10:48.472 --> 00:10:51.913
And then we're gonna ask,
did I actually make a match?

191
00:10:51.913 --> 00:10:56.894
So, if the input word.slice, and we're
gonna take the number of characters that

192
00:10:56.894 --> 00:11:01.447
we need off of the input word, I could
do this with a regular expression, but

193
00:11:01.447 --> 00:11:06.027
since people don't like regular
expressions, we're gonna avoid those.

194
00:11:06.027 --> 00:11:10.857
So, we need to get the slice of that,
and the way I know how many characters I

195
00:11:10.857 --> 00:11:15.770
want is to do inputWord,slice,
starting at position 0, going forward,

196
00:11:15.770 --> 00:11:19.715
the number of characters in the symbol,
could be one or two.

197
00:11:19.715 --> 00:11:24.663
But I need to get that many characters
off of the input word string.

198
00:11:24.663 --> 00:11:28.392
So, take the first one or
two characters off the string and

199
00:11:28.392 --> 00:11:30.309
see if it's equal to symbol.

200
00:11:30.309 --> 00:11:34.058
In other words, did I make a match?

201
00:11:34.058 --> 00:11:40.773
Put a code comment here so
we're not losing track,

202
00:11:40.773 --> 00:11:45.456
did the symbol match the first one or

203
00:11:45.456 --> 00:11:49.540
two characters in inputWord?

204
00:11:49.540 --> 00:11:51.444
Some people hate code comments,

205
00:11:51.444 --> 00:11:54.778
they think that it is a smell
that your code is not written.

206
00:11:54.778 --> 00:11:56.142
Those people are wrong.

207
00:11:56.142 --> 00:12:01.064
Code comments are extremely important,
and they are 1000 times more important

208
00:12:01.064 --> 00:12:04.611
when you're trying to figure
out how to write an algorithm.

209
00:12:04.611 --> 00:12:08.632
So, absolutely write code comments,
leave breadcrumbs for yourself.

210
00:12:08.632 --> 00:12:11.970
Yes, it does require you to
maintain those code comments.

211
00:12:11.970 --> 00:12:14.317
That's just part of the job.

212
00:12:14.317 --> 00:12:19.328
Okay, so we do have a match,
but now we have another

213
00:12:19.328 --> 00:12:24.352
decision point,
which is have we finished or not?

214
00:12:24.352 --> 00:12:30.570
Did the match that we just make fully
sufficiently match the whole word?

215
00:12:30.570 --> 00:12:35.831
In our base case, if we passed in
a two-character word like the word be,

216
00:12:35.831 --> 00:12:39.455
B-E, and
we found the symbol beryllium, B-E,

217
00:12:39.455 --> 00:12:44.752
I think that's beryllium, B-E and
B-E, well, we've made a match.

218
00:12:44.752 --> 00:12:47.367
We've found enough symbols
to cover the word.

219
00:12:47.367 --> 00:12:51.711
So, we need to ask,
have we made that full word match?

220
00:12:51.711 --> 00:12:53.524
Are there any characters left?

221
00:12:53.524 --> 00:12:58.222
So, that's how we're gonna ask it
is if the inputWord, remember,

222
00:12:58.222 --> 00:13:01.148
this slice is just pulled a substring off.

223
00:13:01.148 --> 00:13:03.332
It didn't actually mutate the string.

224
00:13:03.332 --> 00:13:08.469
So, we still have the full word here and
inputWord and we need to say,

225
00:13:08.469 --> 00:13:13.077
if the inputWord length is
greater than the symbol.length,

226
00:13:13.077 --> 00:13:15.839
then we still have characters left.

227
00:13:15.839 --> 00:13:22.165
I'll make another code comment for
that, still have characters left.

228
00:13:25.379 --> 00:13:27.900
If inputWord length is
greater than symbol length,

229
00:13:27.900 --> 00:13:30.319
that means they're still
characters to look at.

230
00:13:30.319 --> 00:13:37.298
And this is where we eventually now have
arrived at our need to recurse, okay?

231
00:13:37.298 --> 00:13:41.410
We cannot do a return
of the recursive call.

232
00:13:41.410 --> 00:13:45.036
Many, many times you see recursive
examples, they'll do return and

233
00:13:45.036 --> 00:13:46.210
then a function call.

234
00:13:46.210 --> 00:13:51.872
But here we can't return because we have
to conditionally decide whether what

235
00:13:51.872 --> 00:13:57.442
we got from the return worked, in which
case we can return it, or did it fail,

236
00:13:57.442 --> 00:14:03.044
in which case we need to let the loop at
this layer of the stack just keep going.

237
00:14:03.044 --> 00:14:07.289
So, we're gonna save this off into a
variable, I'll call it res, for a result.

238
00:14:07.289 --> 00:14:10.930
And we're gonna recursively
call our same function.

239
00:14:10.930 --> 00:14:15.534
And here's where this becomes recursive,
because we're going to say,

240
00:14:15.534 --> 00:14:20.079
inputWord, but less than the inputWord
that we received at this level.

241
00:14:20.079 --> 00:14:21.816
This is where we shrink our problem.

242
00:14:21.816 --> 00:14:25.553
This is our divide and conquer approach,
we're shrinking the word.

243
00:14:25.553 --> 00:14:34.011
So, the shrinking of that word is to take
inputWord.slice starting at this position,

244
00:14:34.011 --> 00:14:38.830
starting at symbol.length and
going to the end.

245
00:14:38.830 --> 00:14:43.706
And I don't need to put a second
argument to slice because it will

246
00:14:43.706 --> 00:14:48.236
automatically go to the end if
I provide only one argument.

247
00:14:48.236 --> 00:14:52.308
So, this expression here says get
all the rest of the characters,

248
00:14:52.308 --> 00:14:56.034
I could assign that to a variable
called rest of characters.

249
00:14:56.034 --> 00:15:00.066
And I'm calling check on
the rest of the characters.

250
00:15:00.066 --> 00:15:02.723
There's our recursive call.

251
00:15:02.723 --> 00:15:05.941
We matched off two characters and
we've got seven left.

252
00:15:05.941 --> 00:15:10.809
So, check, go figure out how to
spell these seven characters

253
00:15:10.809 --> 00:15:15.587
with the periodic table of elements,
and then I'll combine

254
00:15:15.587 --> 00:15:20.660
your answer with my symbol for
passing back up to the next level.

