WEBVTT

1
00:00:00.000 --> 00:00:04.598
The last thing that we need to check
is whether or not that succeeded.

2
00:00:04.598 --> 00:00:08.319
And we said that we return an empty
array in the case of failure,

3
00:00:08.319 --> 00:00:10.858
a non-empty array in the case of success.

4
00:00:10.858 --> 00:00:19.764
So if res.length is greater than 0,
Matched successfully.

5
00:00:24.715 --> 00:00:25.735
Thumbs up, thumbs down.

6
00:00:25.735 --> 00:00:27.389
How are we following, so far in the logic?

7
00:00:27.389 --> 00:00:28.991
Is it making sense?

8
00:00:28.991 --> 00:00:30.231
You can give me thumbs sideways.

9
00:00:30.231 --> 00:00:31.254
If you're still iffy.

10
00:00:31.254 --> 00:00:31.826
I get it.

11
00:00:31.826 --> 00:00:33.473
All right.

12
00:00:33.473 --> 00:00:37.257
Some of you haven't coded a lot
like this before, and that's okay.

13
00:00:37.257 --> 00:00:41.401
&gt;&gt; Someone said I can see where comments
help a lot for an algorithmist.

14
00:00:41.401 --> 00:00:45.833
&gt;&gt; Thank you.
I'm glad that point is clearly

15
00:00:45.833 --> 00:00:47.836
made already.

16
00:00:47.836 --> 00:00:51.762
I could not write code without code
comments if I was in a language that

17
00:00:51.762 --> 00:00:55.363
didn't allow it, I would give up and
find a different career.

18
00:00:55.363 --> 00:00:58.471
All right.
If this was successful then we know that

19
00:00:58.471 --> 00:01:03.952
everything to the right of our pivot
point, all the rest of the characters,

20
00:01:03.952 --> 00:01:07.481
we've got an array of
symbols that match those.

21
00:01:07.481 --> 00:01:11.055
And we know we have a symbol for
the first one or

22
00:01:11.055 --> 00:01:14.171
two characters of what we were passed.

23
00:01:14.171 --> 00:01:15.940
So we know we're good.

24
00:01:15.940 --> 00:01:20.506
So we finally now can return
an array with all of that in it.

25
00:01:20.506 --> 00:01:23.141
We return symbol and we return and

26
00:01:23.141 --> 00:01:28.616
that...there is saying spread
out everything, not rest, res.

27
00:01:28.616 --> 00:01:30.708
Spread out everything in res.

28
00:01:30.708 --> 00:01:33.066
Maybe I should have called that rest,
I don't know.

29
00:01:34.701 --> 00:01:38.521
But this is gonna spread out that
array of whatever was returned to us,

30
00:01:38.521 --> 00:01:40.224
one element or 20 elements.

31
00:01:40.224 --> 00:01:45.404
And then it will append this to
the beginning and return that new array.

32
00:01:45.404 --> 00:01:49.627
We've got another else
condition to consider,

33
00:01:49.627 --> 00:01:53.548
which is what if we had
just gotten to the end?

34
00:01:53.548 --> 00:01:57.190
Remember I have this if statement here
that says, do we have any characters left?

35
00:01:57.190 --> 00:01:59.102
What if we don't have any characters left?

36
00:01:59.102 --> 00:02:01.062
Well, then we know we're done.

37
00:02:01.062 --> 00:02:03.062
So what do we do?

38
00:02:03.062 --> 00:02:07.092
We just return an array
with only the symbol in it.

39
00:02:07.092 --> 00:02:10.990
It's like returning the first
part of this answer.

40
00:02:10.990 --> 00:02:15.774
Here we only need to return The only thing

41
00:02:15.774 --> 00:02:20.209
that we have to return is
the symbol that we know we matched.

42
00:02:27.151 --> 00:02:30.094
And if you run through this in your mind,

43
00:02:30.094 --> 00:02:34.953
do a couple of mental executions
with a couple of those test words.

44
00:02:34.953 --> 00:02:38.658
For example, take the test word yucky.

45
00:02:38.658 --> 00:02:40.639
Just think through it in your mind.

46
00:02:40.639 --> 00:02:45.633
We're gonna go through a whole
bunch of elements until we

47
00:02:45.633 --> 00:02:48.450
find one that has a y in it or a yu.

48
00:02:48.450 --> 00:02:51.269
I don't even know if there is a yu,
but we know there is a y.

49
00:02:51.269 --> 00:02:51.960
Okay?

50
00:02:51.960 --> 00:02:53.687
So let's assume that there's only a y.

51
00:02:53.687 --> 00:02:58.632
We're gonna find the y element
that's gonna be the first time that

52
00:02:58.632 --> 00:03:03.665
this if statement passes is when we
found the element where the first

53
00:03:03.665 --> 00:03:08.628
character of the word yucky matches
the periodic table element y.

54
00:03:08.628 --> 00:03:12.928
Which I don't even know what that element
is like it's on the other screen,

55
00:03:12.928 --> 00:03:14.821
I'm not gonna switch over to it.

56
00:03:14.821 --> 00:03:16.866
But whatever that element is, it's the y.

57
00:03:16.866 --> 00:03:18.335
Okay?

58
00:03:18.335 --> 00:03:19.840
So what's gonna happen here?

59
00:03:19.840 --> 00:03:24.411
We're gonna say, do I have any
more letters in my word to do?

60
00:03:24.411 --> 00:03:27.342
Yes, I still have the u-c-k-y part.

61
00:03:27.342 --> 00:03:29.911
I did the y, but
I still got the last four.

62
00:03:29.911 --> 00:03:33.729
So we're gonna go into that branch and
we're gonna say give me the symbols for

63
00:03:33.729 --> 00:03:34.853
the u-c-k-y word.

64
00:03:34.853 --> 00:03:39.826
As if somebody had only typed u-c-k-y,
right?

65
00:03:39.826 --> 00:03:41.226
I know I've got y and

66
00:03:41.226 --> 00:03:46.840
I need you to figure out if you can spell
the rest of this word with periodic table.

67
00:03:46.840 --> 00:03:51.702
We know that eventually through all of
that recursion multiple levels deep,

68
00:03:51.702 --> 00:03:53.944
in this case four more levels deep,

69
00:03:53.944 --> 00:03:58.003
it'll eventually get to a branch
where the final y is returned.

70
00:03:58.003 --> 00:04:02.408
Cuz there weren't any more characters,
that y will get

71
00:04:02.408 --> 00:04:07.667
concatenated one level up in
the the call stack with the k and the y.

72
00:04:07.667 --> 00:04:13.084
The k in the y will get concatenated
with the c and it'll be c-k-y.

73
00:04:13.084 --> 00:04:17.573
And then, the c-k-y will get concatenated
with the u and it'll be u-c-k-y.

74
00:04:17.573 --> 00:04:22.124
And finally we'll be back to our
original invocation of this check

75
00:04:22.124 --> 00:04:26.999
function at the bottom of the call stack,
where we will get back from res

76
00:04:26.999 --> 00:04:31.652
an array that has c-k-y in it and
we have the y that we just matched.

77
00:04:31.652 --> 00:04:36.074
So we spread out the u-c-k-y sorry and
the y that we got, and

78
00:04:36.074 --> 00:04:40.768
that's the final return, and
that's what comes out to our app.

79
00:04:44.842 --> 00:04:49.964
Good chance that some of you watching this
still feel pretty iffy about recursion.

80
00:04:49.964 --> 00:04:53.845
Maybe it's the first time anybody's
pushed you to really think recursively.

81
00:04:53.845 --> 00:04:57.380
Unfortunately, I cannot teach
you an algorithms course without

82
00:04:57.380 --> 00:05:00.280
forcing you to get more
comfortable with recursion.

83
00:05:00.280 --> 00:05:04.108
There is just far too many things
that we can't do if we can't wrap our

84
00:05:04.108 --> 00:05:05.169
brains around it.

85
00:05:05.169 --> 00:05:09.814
And if I showed you the iterative approach
to this problem where we had to manage our

86
00:05:09.814 --> 00:05:12.593
own stack,
I promise you it would be much worse.

87
00:05:12.593 --> 00:05:16.895
Managing all of that stack yourself rather
than letting the JavaScript engine do

88
00:05:16.895 --> 00:05:18.673
it is not something you wanna do.

89
00:05:18.673 --> 00:05:20.064
That's not something for
the faint of heart.

90
00:05:20.064 --> 00:05:21.188
It can't be done.

91
00:05:21.188 --> 00:05:23.559
That should not be your first
algorithm that you write.

92
00:05:23.559 --> 00:05:25.977
Managing your own call stack.

93
00:05:25.977 --> 00:05:30.966
So we wanna take advantage of recursion
when we can because it's doing a lot of

94
00:05:30.966 --> 00:05:31.821
work for us.

95
00:05:31.821 --> 00:05:34.291
Why do the work when somebody
else can do the work for us?

96
00:05:38.208 --> 00:05:41.925
I know it's a little smaller to read, it's
harder to fit on there, but I just wanna

97
00:05:41.925 --> 00:05:45.390
Zoom out so we can approximately see
the whole thing on the screen all at once.

98
00:05:48.893 --> 00:05:50.492
This is our whole first solution.

99
00:05:50.492 --> 00:05:52.478
Now, we've gotta test it here.

100
00:05:52.478 --> 00:05:54.957
But if I did things correctly.

101
00:05:54.957 --> 00:05:57.915
Hopefully, we're able to go
through the reasoning of it and

102
00:05:57.915 --> 00:06:00.245
you have a sense that
this is probably correct.

103
00:06:00.245 --> 00:06:01.880
But we're about to test it.

104
00:06:03.782 --> 00:06:06.583
I'll save that file and
we'll refresh here in a moment.

105
00:06:06.583 --> 00:06:09.085
Just letting those of you that
are still typing catch up.

106
00:06:09.085 --> 00:06:13.150
Again, remember, you've got the GitHub
repo with these solutions in it so

107
00:06:13.150 --> 00:06:16.514
you can always do your DEF checks
if you missed an if statement or

108
00:06:16.514 --> 00:06:18.308
something, if I move too quick.

109
00:06:18.308 --> 00:06:23.689
Side note here,
a little question for you to ponder.

110
00:06:23.689 --> 00:06:27.120
We think this is gonna work, but

111
00:06:27.120 --> 00:06:31.450
what if we were not allowed to run a test?

112
00:06:31.450 --> 00:06:37.487
Did you know that there used
to be a day when the process

113
00:06:37.487 --> 00:06:42.316
of writing code was not
as simple as save and

114
00:06:42.316 --> 00:06:47.431
automatic hot load refresh, rerun my test.

115
00:06:47.431 --> 00:06:50.611
People would write programs and
spend days waiting for

116
00:06:50.611 --> 00:06:53.867
those to get all punched out
onto a bunch of punch cards.

117
00:06:53.867 --> 00:06:56.259
And then spend another
several days waiting for

118
00:06:56.259 --> 00:07:00.460
some operator to put them through and then
they'd get in the mail the results of it.

119
00:07:00.460 --> 00:07:04.967
And imagine if you would wait at all of
that time and you got back something and

120
00:07:04.967 --> 00:07:07.723
it was like,
you miss the semicolon, right?

121
00:07:07.723 --> 00:07:12.915
Or you had an off by one error and
you start it over with that whole process.

122
00:07:12.915 --> 00:07:13.858
For us, it's real nice.

123
00:07:13.858 --> 00:07:16.535
I just type the character,
I'm gonna go refresh the page and

124
00:07:16.535 --> 00:07:17.699
we'll check if it works.

125
00:07:17.699 --> 00:07:22.249
How would you get t o the point where you
had a level of confidence over this code

126
00:07:22.249 --> 00:07:25.616
that you knew what it was gonna
do before you ran the test?

127
00:07:29.282 --> 00:07:30.661
These are rhetorical questions.

128
00:07:30.661 --> 00:07:34.616
There's no absolute right
answer to this question.

129
00:07:34.616 --> 00:07:39.708
But I am taking an opportunity to give
myself another little plug, which is that

130
00:07:39.708 --> 00:07:44.964
I have another workshop here at Front End
Masters called functional JavaScript.

131
00:07:44.964 --> 00:07:49.218
Which teaches functional programming
principles in JavaScript.

132
00:07:49.218 --> 00:07:53.510
And one of the premises of that course
is we should be able to get to the point

133
00:07:53.510 --> 00:07:57.872
where the code that we write, we have
confidence enough over that code that

134
00:07:57.872 --> 00:08:00.866
we know what it will do
before we run the test suite.

135
00:08:00.866 --> 00:08:03.687
Doesn't mean that we don't test but

136
00:08:03.687 --> 00:08:08.965
we don't run the test with our
fingers crossed, hoping for a green.

137
00:08:08.965 --> 00:08:12.098
We run the test knowing that
we're gonna get a green.

138
00:08:12.098 --> 00:08:15.941
That's a level of confidence that
is difficult to achieve with code.

139
00:08:15.941 --> 00:08:20.750
But I'm just providing a little
plug that it's worth it.

140
00:08:20.750 --> 00:08:24.258
This code is not that.

141
00:08:24.258 --> 00:08:28.407
We would need to do code very differently
to get to a level where we were

142
00:08:28.407 --> 00:08:31.997
absolutely certain at first
glance what this was gonna do.

143
00:08:31.997 --> 00:08:34.494
But there is a way to do that.

144
00:08:34.494 --> 00:08:38.659
And that's the way of the functional
programmer, I guess I'll call it.

145
00:08:38.659 --> 00:08:41.992
All right, so with that little side note

146
00:08:41.992 --> 00:08:46.219
aside let's switch back
over to our browser here.

147
00:08:46.219 --> 00:08:50.474
And we're gonna refresh I didn't
get any JavaScript errors there so

148
00:08:50.474 --> 00:08:53.421
at least I didn't miss
a semicolon somewhere.

149
00:08:53.421 --> 00:08:54.445
Let's try it.

150
00:08:54.445 --> 00:08:57.456
Our running example was yucky.

151
00:08:57.456 --> 00:09:01.744
Let's just see what happens that worked
but that doesn't show you anything cuz

152
00:09:01.744 --> 00:09:04.824
that was my previous example
let's try a different one.

153
00:09:04.824 --> 00:09:06.073
Let's try the word because.

154
00:09:08.083 --> 00:09:10.441
Okay, that's good.

155
00:09:10.441 --> 00:09:13.453
What about the word unicorns?

156
00:09:13.453 --> 00:09:14.901
I love that one.

157
00:09:17.512 --> 00:09:20.265
That worked.

158
00:09:20.265 --> 00:09:22.029
Here's a really strange word and

159
00:09:22.029 --> 00:09:25.568
you're gonna wonder why on earth
am I gonna try the word pancreas?

160
00:09:28.080 --> 00:09:30.988
Which can be spelled.

161
00:09:30.988 --> 00:09:35.851
Here's why I know that the word pancreas
can be spelled with the periodic symbol

162
00:09:35.851 --> 00:09:36.586
elements.

163
00:09:36.586 --> 00:09:40.528
My daughter who's just about to turn 10,
two and

164
00:09:40.528 --> 00:09:44.745
a half years ago she was
diagnosed with type 1 diabetes

165
00:09:44.745 --> 00:09:49.248
which was right in the middle
of the worst of the pandemic.

166
00:09:49.248 --> 00:09:52.987
And it was pretty rock our world upside
down our universe kind of events and

167
00:09:52.987 --> 00:09:54.807
we're still digging up from that.

168
00:09:54.807 --> 00:09:59.628
We are tremendously blessed that what we

169
00:09:59.628 --> 00:10:03.748
have to be able to provide for her.

170
00:10:03.748 --> 00:10:08.766
All the technology and
the doctors and all that stuff,

171
00:10:08.766 --> 00:10:13.893
but we wanted to come up with
a phrase that she could spell

172
00:10:13.893 --> 00:10:19.694
out of the periodic table elements
that was meaningful to her.

173
00:10:19.694 --> 00:10:24.907
And we ended up suggesting and she
submitted in her project yucky pancreas.

174
00:10:24.907 --> 00:10:26.031
[LAUGH] So there you go.

175
00:10:26.031 --> 00:10:29.034
That's why I know that yucky and
pancreas can be spelled.

176
00:10:32.004 --> 00:10:35.482
All right, so we have a working
solution to our problem, or

177
00:10:35.482 --> 00:10:39.101
at least it seems like that we've
tested several problems and

178
00:10:39.101 --> 00:10:43.221
there we're seeing double and
single letter responses coming back.

179
00:10:43.221 --> 00:10:47.458
So it seems we're developing a little bit
of confidence that it seems like we've

180
00:10:47.458 --> 00:10:49.155
arrived at a working solution.

181
00:10:51.877 --> 00:10:56.442
How many of you feel confident that
we've arrived at an optimal solution to

182
00:10:56.442 --> 00:10:57.389
this problem?

183
00:10:57.389 --> 00:10:58.518
Anyone?

184
00:11:00.281 --> 00:11:04.790
That's a leading question obviously I
wouldn't ask that question if I didn't

185
00:11:04.790 --> 00:11:06.551
have a contradictory answer.

186
00:11:06.551 --> 00:11:11.548
But I now want us to shift
our thinking up another gear

187
00:11:11.548 --> 00:11:14.282
from I just got it to work to.

188
00:11:14.282 --> 00:11:18.208
Now, I know why it's
doing what it's doing and

189
00:11:18.208 --> 00:11:23.227
why there's potential downforce
to the way it's working.

190
00:11:23.227 --> 00:11:26.879
So I wanna go back to the code now.

191
00:11:26.879 --> 00:11:32.775
This by the way is our current state
effectively made of typed of comment or

192
00:11:32.775 --> 00:11:35.545
variable slightly differently.

193
00:11:35.545 --> 00:11:38.947
But this is basically what you
see on the option one branch.

194
00:11:38.947 --> 00:11:41.302
So this is our option one solution.

195
00:11:41.302 --> 00:11:44.748
We're now gonna talk about
redoing this in a different way.

196
00:11:44.748 --> 00:11:48.009
And we're gonna talk about it
as the option two solution.

197
00:11:48.009 --> 00:11:52.513
We'll be working towards option two, which
is a more efficient way of doing this.

198
00:11:52.513 --> 00:11:54.557
So you wanna start with option one.

199
00:11:54.557 --> 00:11:58.661
And if your code happens to not work
cuz you missed any of statement or

200
00:11:58.661 --> 00:12:03.414
a variable name, just stash your changes
and check out the option one branch.

201
00:12:03.414 --> 00:12:06.245
That's our starting point for
doing the next set of work.

