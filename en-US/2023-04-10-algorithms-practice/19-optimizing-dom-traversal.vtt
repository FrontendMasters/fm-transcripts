WEBVTT

1
00:00:00.230 --> 00:00:03.450
Let's observe a few things
about our current approach.

2
00:00:04.690 --> 00:00:07.100
Let's see if there's
any low-hanging fruit,

3
00:00:07.100 --> 00:00:09.460
any paper cuts that we
could easily eliminate.

4
00:00:10.870 --> 00:00:14.006
For me the one that jumps out the most,
and

5
00:00:14.006 --> 00:00:19.212
maybe it's just because I've made
this mistake many, many times.

6
00:00:19.212 --> 00:00:23.688
But every time I click the highlight,
I requery the DOM for

7
00:00:23.688 --> 00:00:26.163
the list of 64 tile elements.

8
00:00:26.163 --> 00:00:31.860
You see that,
that is something that never changes.

9
00:00:31.860 --> 00:00:37.472
Once we draw the board that is fixed,
but every single time I clicked on it,

10
00:00:37.472 --> 00:00:44.060
I am re computing the answer to that
question, that's unnecessary work.

11
00:00:44.060 --> 00:00:46.500
To me that's the lowest
hanging of the fruit here.

12
00:00:46.500 --> 00:00:49.140
There's other things that others
might have changed first.

13
00:00:49.140 --> 00:00:51.180
That's the first thing I wanna change,

14
00:00:51.180 --> 00:00:54.940
is I don't wanna recompute that
every time I wanna save that work.

15
00:00:54.940 --> 00:00:58.056
So instead of the original board element,

16
00:00:58.056 --> 00:01:02.200
I'm just going to maintain
an array of the tiles.

17
00:01:02.200 --> 00:01:05.142
It has that DOM element so
it's not a real native array but

18
00:01:05.142 --> 00:01:07.052
I'm just gonna maintain that list.

19
00:01:07.052 --> 00:01:11.206
So instead of saving off this reference
to original board element here's what I'm

20
00:01:11.206 --> 00:01:11.750
gonna do.

21
00:01:11.750 --> 00:01:16.780
I'm gonna set this right here,
right after I've

22
00:01:16.780 --> 00:01:21.705
drawn the board I'm gonna do it once and
save it.

23
00:01:31.361 --> 00:01:35.673
Now I know I'm using the vehicle of
DOM API calls that almost none of

24
00:01:35.673 --> 00:01:39.170
you ever worked with any
more because of frameworks.

25
00:01:39.170 --> 00:01:42.058
I know we're using that
as the vehicle here and

26
00:01:42.058 --> 00:01:45.612
it may feel like this system
Old School are out of touch but

27
00:01:45.612 --> 00:01:50.350
I don't want you to worry about the DOM
API usage nearly as much as I want you to

28
00:01:50.350 --> 00:01:54.449
think about when is work being done and
how often is it being done.

29
00:01:54.449 --> 00:01:58.894
DOM work is one of those things
that is exceptionally costly,

30
00:01:58.894 --> 00:02:04.200
cuz the DOM is still always the slowest
part of our JavaScript times.

31
00:02:04.200 --> 00:02:08.130
And so it's a way for
me to illustrate the problem here.

32
00:02:08.130 --> 00:02:11.830
But it's really about when that work
gets done and how often it gets done.

33
00:02:11.830 --> 00:02:13.295
Why not do it once upfront and

34
00:02:13.295 --> 00:02:17.035
remember that information instead of
waiting until much later to do it.

35
00:02:20.791 --> 00:02:21.942
Does it makes sense?

36
00:02:48.543 --> 00:02:51.888
There's one other little
change that because we don't

37
00:02:51.888 --> 00:02:53.675
have this original board EL.

38
00:02:57.176 --> 00:03:01.108
We're not gonna be able to do that one,
and so

39
00:03:01.108 --> 00:03:06.500
we're gonna need to do,
let board EL and get that from row EL.

40
00:03:11.897 --> 00:03:14.324
And then we're gonna put in board EL here.

41
00:03:22.412 --> 00:03:26.360
All right,
let's talk about this findtile function.

42
00:03:27.600 --> 00:03:30.617
Let's think about yet another different
way that we could have done it,

43
00:03:30.617 --> 00:03:33.790
maybe not better but a different
way that we could have done it.

44
00:03:33.790 --> 00:03:36.822
Instead of relying upon
the built-in ones or

45
00:03:36.822 --> 00:03:42.165
the built-in node list maybe what we do,
because we now have that tiles array,

46
00:03:42.165 --> 00:03:45.435
maybe we just simply loop
over the tiles array and

47
00:03:45.435 --> 00:03:49.620
use the indexing to find the element
within that tiles array.

48
00:03:52.440 --> 00:03:57.626
So if I were to loop
over this tiles array,

49
00:03:57.626 --> 00:04:06.520
I'm gonna get an element that I
could ask it, what is your index?

50
00:04:06.520 --> 00:04:10.400
And I could compare that index to
the index that I'm looking for.

51
00:04:10.400 --> 00:04:12.470
And if I found the right one,
I could return it.

52
00:04:13.480 --> 00:04:14.830
Did I lose you or did that make sense?

53
00:04:15.880 --> 00:04:18.970
Remember how we computed
the index of any given element?

54
00:04:20.220 --> 00:04:21.440
We did it just right here.

55
00:04:22.930 --> 00:04:28.317
This was computing the row and
column index for any element.

56
00:04:28.317 --> 00:04:31.240
So we could copy that
logic down into here or

57
00:04:31.240 --> 00:04:35.948
even put it into its own function
to recompute an element's index and

58
00:04:35.948 --> 00:04:41.000
ask it if its computed index is the same
as the one that we're looking for.

59
00:04:42.110 --> 00:04:43.390
That's a way of doing this.

60
00:04:45.690 --> 00:04:50.712
But that's a big old waste of time
to recompute the index over and

61
00:04:50.712 --> 00:04:54.250
over again because I
already know the index.

62
00:04:55.300 --> 00:04:57.510
When do I know the index?

63
00:04:57.510 --> 00:04:59.688
When I'm constructing the board,

64
00:04:59.688 --> 00:05:04.050
that's information that I know at
this moment and then I throw it away.

65
00:05:05.580 --> 00:05:08.310
And I recompute it later,
over and over and over again.

66
00:05:09.730 --> 00:05:14.663
What if we saved the information
of what each tile elements row and

67
00:05:14.663 --> 00:05:18.527
column index coordinate
is with the tile element?

68
00:05:18.527 --> 00:05:22.791
You follow that,
don't throw the work away, save the work,

69
00:05:22.791 --> 00:05:25.745
that's an algorithm in this best friend.

70
00:05:27.035 --> 00:05:31.435
Now how are we going to save a piece
of information with a DOM element?

71
00:05:31.435 --> 00:05:36.032
It turns out another part of the native
DOM API's that many of you have

72
00:05:36.032 --> 00:05:38.972
not been exposed to Is
what we call dataset.

73
00:05:40.132 --> 00:05:45.982
It's a special mechanism for
associating data with a dom element.

74
00:05:45.982 --> 00:05:51.186
There is a gigantic caveat that you need
to pay attention to so don't miss this.

75
00:05:51.186 --> 00:05:56.745
The only data that you can associate
with a DOM element in this way,

76
00:05:56.745 --> 00:06:00.726
through the data set,
is string information.

77
00:06:02.296 --> 00:06:06.176
If you try to save a number, guess
what's going to happen to the number?

78
00:06:07.916 --> 00:06:12.746
It's going to get turned into a string and
that will create a gotcha for us later.

79
00:06:12.746 --> 00:06:14.616
But we'll deal with that
when we get to it, okay?

80
00:06:15.810 --> 00:06:21.560
So we can store information with
an element in its data set question.

81
00:06:23.090 --> 00:06:26.005
&gt;&gt; It's just a personal note.

82
00:06:26.005 --> 00:06:30.147
If you can use a set and
then pass in the element and

83
00:06:30.147 --> 00:06:35.217
then you can associate any
arbitrary data with an element.

84
00:06:35.217 --> 00:06:37.250
&gt;&gt; You're talking about map?

85
00:06:38.870 --> 00:06:39.390
&gt;&gt; Yeah.

86
00:06:39.390 --> 00:06:39.930
&gt;&gt; Yes.

87
00:06:39.930 --> 00:06:41.900
&gt;&gt; Or sorry, map.set.
&gt;&gt; We can use the dom element as a key

88
00:06:41.900 --> 00:06:43.310
in the map, absolutely.

89
00:06:43.310 --> 00:06:44.310
&gt;&gt; Yeah, map.set, I mean.

90
00:06:44.310 --> 00:06:45.740
&gt;&gt; Yes, we absolutely could do that.

91
00:06:45.740 --> 00:06:50.909
We're not going to do that this time, but
we absolutely could construct another

92
00:06:50.909 --> 00:06:56.340
data structure M map, remember I talked
about it at the beginning of the course.

93
00:06:56.340 --> 00:06:57.610
What is a map?

94
00:06:57.610 --> 00:07:04.890
A map is a hash map, meaning any object
can be a key including a DOM element.

95
00:07:04.890 --> 00:07:08.322
And then within the map,
if we save as the key a DOM element,

96
00:07:08.322 --> 00:07:11.020
we can save whatever values we want.

97
00:07:11.020 --> 00:07:15.190
Right now, we're gonna take a much more
narrow approach, which is the data set.

98
00:07:15.190 --> 00:07:20.920
And the builtin HTML5 data set capability,
it can only store stuff as strings.

99
00:07:20.920 --> 00:07:24.091
And if you want a mental model for
why it can only do strings,

100
00:07:24.091 --> 00:07:27.590
it's because it represents it as
attributes on the DOM element.

101
00:07:27.590 --> 00:07:31.034
And we know that attributes
can only be string values, so

102
00:07:31.034 --> 00:07:32.770
that's your mental model.

103
00:07:32.770 --> 00:07:37.940
It's literally like serializing it as
if it's an attribute on the element.

104
00:07:37.940 --> 00:07:40.600
But nevertheless,
that's still gonna work okay for us.

105
00:07:40.600 --> 00:07:46.406
So that's what we're gonna
do is we're gonna say

106
00:07:46.406 --> 00:07:51.546
tileelement.dataset.row is equal to i.

107
00:07:51.546 --> 00:07:59.580
And dataset.com, this j.

108
00:07:59.580 --> 00:08:03.260
So I've created two dataset
properties row and column.

109
00:08:03.260 --> 00:08:06.790
They are gonna have the values i and
j respectively.

110
00:08:06.790 --> 00:08:12.260
But note the caveat that it will
have turned those into strings,

111
00:08:12.260 --> 00:08:15.416
even though we assigned it numbers.

112
00:08:15.416 --> 00:08:20.298
So you cannot assign it a function or
some complex circularly nested object or

113
00:08:20.298 --> 00:08:25.642
anything like that, that's gonna fail
because it can't be stratified properly.

114
00:08:34.818 --> 00:08:37.690
So we can now use that information,
can't we?

115
00:08:37.690 --> 00:08:43.166
As we loop over our tiles,
all we need to do is

116
00:08:43.166 --> 00:08:48.495
say if el.dataset.row is equal to row and

117
00:08:48.495 --> 00:08:55.312
el.dataset.column is equal to column,
return el.

118
00:09:27.864 --> 00:09:32.092
I wonder if anybody spots but

119
00:09:32.092 --> 00:09:39.501
rather important large
caveat here in line 64.

120
00:09:51.090 --> 00:09:53.748
Maybe I'll make it super explicit and
put the cursor here.

121
00:10:00.592 --> 00:10:03.221
What would happen if I wrote
the code like that the way so

122
00:10:03.221 --> 00:10:05.060
many people write their JavaScript?

123
00:10:06.830 --> 00:10:08.490
&gt;&gt; The type of the diffference?

124
00:10:08.490 --> 00:10:10.965
&gt;&gt; It would fail,
because we're passing in numbers and

125
00:10:10.965 --> 00:10:13.610
the thing that's in data set
has been turned to a string.

126
00:10:15.210 --> 00:10:20.260
So you can either cast it back to
a number or you can do as I do,

127
00:10:20.260 --> 00:10:27.750
and let JavaScript coercion mechanism take
care of that implementation detail for us.

128
00:10:31.220 --> 00:10:34.199
And if your linter yells at
you just turn your linter off.

129
00:10:41.921 --> 00:10:45.234
Again, I'm not saying that this is
the right way for fine tile to be written

130
00:10:45.234 --> 00:10:48.930
indeed, we're eventually gonna refactor
it so there is no fine tile function.

131
00:10:48.930 --> 00:10:53.460
I'm just simply showing you different ways
of approaching this and letting you see

132
00:10:53.460 --> 00:10:57.482
the trade-offs, the good and
the bad in different ways of doing things.

133
00:11:05.372 --> 00:11:07.480
Let's do a little regression test.

134
00:11:07.480 --> 00:11:13.531
Let's switch over to our browser, refresh,
and make sure that it's still working.

135
00:11:16.050 --> 00:11:21.964
It's not an automated test, but it still
appears to be working correctly even for

136
00:11:21.964 --> 00:11:25.320
the quite literal corner
cases pun intended.

137
00:11:27.680 --> 00:11:28.920
Y'all must be too asleep.

138
00:11:28.920 --> 00:11:31.510
It must be like the post lunch.

139
00:11:31.510 --> 00:11:34.300
What is he talking about, chessboards?

140
00:11:35.380 --> 00:11:38.287
Even my good jokes nobody laughs that
well, maybe they're just not good jokes,

141
00:11:38.287 --> 00:11:38.852
I don't know.

142
00:11:48.232 --> 00:11:50.850
This code represents
the option two branch.

143
00:11:52.170 --> 00:11:56.499
If your code happens to not be working,
you miss something less than equals

144
00:11:56.499 --> 00:12:01.259
somewhere, don't feel bad, stash your
changes check out the option to branch.

