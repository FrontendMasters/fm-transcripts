WEBVTT

1
00:00:00.000 --> 00:00:02.940
We're not doing any of these parts yet,
cuz we haven't written that code.

2
00:00:02.940 --> 00:00:06.017
That code's a bit more complicated,
but we'll tackle that in a second.

3
00:00:06.017 --> 00:00:09.067
But we just know that we got 6 hops.

4
00:00:09.067 --> 00:00:12.421
And I want you to notice something
that I didn't tell you about before.

5
00:00:12.421 --> 00:00:16.961
But I inserted into this exercise
a little bit of rudimentary

6
00:00:16.961 --> 00:00:19.193
performance benchmarking.

7
00:00:19.193 --> 00:00:21.207
It's very, very crude.

8
00:00:21.207 --> 00:00:28.864
But notice that that operation took us
0.3 milliseconds, it's pretty quick.

9
00:00:28.864 --> 00:00:33.222
You can probably imagine
that as we increase

10
00:00:33.222 --> 00:00:38.414
the number of hops,
starts to take longer, right?

11
00:00:38.414 --> 00:00:41.900
So I went from 10 to 11.

12
00:00:41.900 --> 00:00:48.817
I want you to see what happens from 2.7
to, that was probably not a good example.

13
00:00:52.937 --> 00:00:55.369
I think the other one was an outlier.

14
00:00:55.369 --> 00:00:56.911
Let's go from 12 to 30.

15
00:00:56.911 --> 00:01:00.284
Actually, I know that this doesn't
start to really show up until we're at

16
00:01:00.284 --> 00:01:02.813
a slightly higher number,
so I'm gonna start at 20.

17
00:01:02.813 --> 00:01:06.366
That was 0.19 seconds,
that's 190 milliseconds.

18
00:01:06.366 --> 00:01:12.539
What happens when I go to 21?

19
00:01:12.539 --> 00:01:18.129
So we went from 0.19 to 0.46, that's
a little bit more than double, isn't it?

20
00:01:18.129 --> 00:01:24.086
What happens when I go from 21 to 22,

21
00:01:24.086 --> 00:01:26.894
any predictions?

22
00:01:31.222 --> 00:01:35.474
0.94, a little bit more than double.

23
00:01:37.136 --> 00:01:38.046
23?

24
00:01:41.739 --> 00:01:43.580
A little bit more than double.

25
00:01:43.580 --> 00:01:46.823
You spotting a pattern here?

26
00:01:46.823 --> 00:01:50.965
It's doubling a little bit
more than doubling each time.

27
00:01:50.965 --> 00:01:57.494
We have a word for this in computer
science, we call this exponential growth.

28
00:01:57.494 --> 00:01:59.490
It's problematic, isn't it?

29
00:01:59.490 --> 00:02:05.376
We're only 23 hops, and we're already
taking 2.31 physical seconds.

30
00:02:05.376 --> 00:02:09.824
What do you predict is
gonna happen when I do 24?

31
00:02:09.824 --> 00:02:11.360
What's it gonna be?

32
00:02:11.360 --> 00:02:15.137
&gt;&gt; [INAUDIBLE]
&gt;&gt; Approximately 5, maybe 5.2,

33
00:02:15.137 --> 00:02:16.731
5.3 seconds, we'll see.

34
00:02:20.135 --> 00:02:21.306
It's painful to wait.

35
00:02:21.306 --> 00:02:22.762
Slightly less than that, all right.

36
00:02:22.762 --> 00:02:25.056
My math wasn't graded estimating.

37
00:02:25.056 --> 00:02:29.901
Where are we gonna be here,
a little bit over ten seconds maybe,

38
00:02:29.901 --> 00:02:32.520
maybe slightly over ten seconds?

39
00:02:32.520 --> 00:02:35.926
We'll wait the ten seconds,
it's worth it just to prove it.

40
00:02:35.926 --> 00:02:40.163
I'm not gonna go any further than the ten
seconds, but I think you get the point.

41
00:02:40.163 --> 00:02:47.185
It's steadily growing slightly more than
exponential was up to 12, all right?

42
00:02:47.185 --> 00:02:53.035
So we have a working solution
that's completely impractical for

43
00:02:53.035 --> 00:02:56.130
any arbitrarily large datasets.

44
00:02:56.130 --> 00:02:58.759
This is where the theoretical
math starts to kick in.

45
00:02:58.759 --> 00:03:04.473
It's where the theorist theoretical
gist of the algorithmic job kicks in.

46
00:03:04.473 --> 00:03:08.667
Because we could have looked at the code
before we ever ran any tests and

47
00:03:08.667 --> 00:03:10.741
known that this was gonna be true.

48
00:03:10.741 --> 00:03:13.571
And I wanna help you see that,
I wanna help you understand that.

49
00:03:13.571 --> 00:03:15.465
So I'm gonna go back to the slides.

50
00:03:21.150 --> 00:03:27.226
In fact, it is an o(n) of not 2 to the n,
which is exponential,

51
00:03:27.226 --> 00:03:31.314
but 2.222 repeating forever to the n,

52
00:03:31.314 --> 00:03:35.859
which is slightly more
than doubling each time.

53
00:03:35.859 --> 00:03:38.879
And how do I know that it's 2.222?

54
00:03:38.879 --> 00:03:43.525
Well, I can actually do the math,
because I read this.

55
00:03:43.525 --> 00:03:46.995
But there's another way that
later we'll come back to, and

56
00:03:46.995 --> 00:03:49.523
we'll see that 2.22 coming back to us.

57
00:03:49.523 --> 00:03:55.451
There's another way of verifying that, but
I'll just give you a quick little preview.

58
00:03:55.451 --> 00:04:01.455
If you think about all of the places
that I can go from any digit.

59
00:04:01.455 --> 00:04:04.500
Some of the digits have
two places that I can go.

60
00:04:04.500 --> 00:04:08.894
Some of them have three
places that I can go, right?

61
00:04:08.894 --> 00:04:13.679
If you average out the number of
places on average that I can go,

62
00:04:13.679 --> 00:04:15.770
guess what the average is?

63
00:04:15.770 --> 00:04:16.776
&gt;&gt; 2.22.

64
00:04:16.776 --> 00:04:22.240
&gt;&gt; 2.22, and there bears out for us.

65
00:04:22.240 --> 00:04:27.691
It's rare, actually, that we get something
that is so crystal clear the empirical

66
00:04:27.691 --> 00:04:32.475
evidence that we have matching with
the theoretical theory that we have.

67
00:04:32.475 --> 00:04:35.274
But we could have looked
at this problem and

68
00:04:35.274 --> 00:04:39.625
said even before I ran it the first time,
I could have said I know for

69
00:04:39.625 --> 00:04:44.246
a fact this code is going to run at
slightly above exponential growth.

70
00:04:44.246 --> 00:04:47.173
You follow me,
cuz I can just look at what it's doing.

71
00:04:47.173 --> 00:04:53.716
I know that it's doing for everything,
it's doing an average of 2.22 more things,

72
00:04:53.716 --> 00:04:58.707
so it's definitely going to grow
slightly more than exponential.

73
00:04:58.707 --> 00:04:59.884
We call this exponential.

74
00:04:59.884 --> 00:05:01.555
Now, I've used a couple
of different terms.

75
00:05:01.555 --> 00:05:04.448
I've used constant, I've used linear,
I've used exponential.

76
00:05:04.448 --> 00:05:05.814
What are these?

77
00:05:05.814 --> 00:05:11.670
These are ways of articulating
the severity of the equation,

78
00:05:11.670 --> 00:05:15.169
the theoretical worst case growth.

79
00:05:15.169 --> 00:05:19.230
This is a chart that I stole
directly off of bigocheatsheet.com.

80
00:05:19.230 --> 00:05:21.220
You should totally go to that website.

81
00:05:21.220 --> 00:05:23.582
It's got a lot of great
information about this.

82
00:05:23.582 --> 00:05:26.803
So it's good foundational material and
back reading.

83
00:05:26.803 --> 00:05:30.459
But I want you to look at,
I've listed up there on the top,

84
00:05:30.459 --> 00:05:35.325
we've got starting from the top,
we have kind of the worst of the Big-O's.

85
00:05:35.325 --> 00:05:38.979
At least the worst of the most
commonly named Big-O's,

86
00:05:38.979 --> 00:05:42.643
all the way down to the bottom,
constant being the best.

87
00:05:42.643 --> 00:05:45.918
So we have constant time is awesome.

88
00:05:45.918 --> 00:05:49.415
Again, technically the best is zero,
cuz we never did it.

89
00:05:49.415 --> 00:05:51.422
But if you have to do some work,

90
00:05:51.422 --> 00:05:56.223
the best growth is the growth that
never grows because it just flatlines.

91
00:05:56.223 --> 00:05:58.927
That's that black line
there at the bottom.

92
00:05:58.927 --> 00:06:01.541
Or, the next step up is
what we call logarithmic.

93
00:06:01.541 --> 00:06:04.184
That's that darker green.

94
00:06:04.184 --> 00:06:06.541
It's almost horizontal, isn't it?

95
00:06:06.541 --> 00:06:08.269
No matter how far out we go,
it's almost horizontal.

96
00:06:08.269 --> 00:06:09.803
There's barely any growth at all.

97
00:06:09.803 --> 00:06:14.819
And then we have the o(n)
is up there at that line,

98
00:06:14.819 --> 00:06:18.910
you see that it kind of steadily grows up.

99
00:06:18.910 --> 00:06:22.762
It's not growing super fast,
but it's growing in a line.

100
00:06:22.762 --> 00:06:28.441
Then you look up at o(n) log(n),
that's what we call linear logarithmic.

101
00:06:28.441 --> 00:06:30.963
So it's ever so
slightly starting to bend up.

102
00:06:30.963 --> 00:06:34.155
It kinda looks mostly like a line,
but it's starting to bend up, and

103
00:06:34.155 --> 00:06:37.475
the further up you go, the higher
it's gonna get quicker and quicker.

104
00:06:37.475 --> 00:06:40.913
It's going a little bit faster than o(n),
actually, fairly faster.

105
00:06:40.913 --> 00:06:43.613
We're into that orange,
that's kinda that warning sign.

106
00:06:43.613 --> 00:06:48.203
If you're in this area,
you should be a little bit concerned that

107
00:06:48.203 --> 00:06:51.549
maybe it might not be
practical in production.

108
00:06:51.549 --> 00:06:53.058
Once you get into the red,

109
00:06:53.058 --> 00:06:57.793
you're almost never gonna see one of those
deployed in production unless you have

110
00:06:57.793 --> 00:07:02.473
a pretty fixed constraint on your problem
set where you know it doesn't matter.

111
00:07:02.473 --> 00:07:07.163
It could grow of n squared because n
never gets above 5, big deal, right?

112
00:07:07.163 --> 00:07:09.671
But if n can ever get out of our control,

113
00:07:09.671 --> 00:07:12.568
then we have to be really
concerned about it.

114
00:07:12.568 --> 00:07:16.327
So we have o(n) squared,
which is our exponential.

115
00:07:16.327 --> 00:07:18.254
I'm sorry, that's our poly.

116
00:07:18.254 --> 00:07:19.212
I just did it.

117
00:07:19.212 --> 00:07:21.396
I was about to tell you,
I always mix this up.

118
00:07:21.396 --> 00:07:24.243
That's polygnomic n squared.

119
00:07:24.243 --> 00:07:25.882
And then we have 2 to the n.

120
00:07:25.882 --> 00:07:27.841
That's the very close one
that we just looked at.

121
00:07:27.841 --> 00:07:29.023
That's exponential.

122
00:07:29.023 --> 00:07:32.402
Polynomic and exponential,
n squared, 2 to the n,

123
00:07:32.402 --> 00:07:35.565
I always mix these two up,
and I did it just there.

124
00:07:35.565 --> 00:07:39.027
I was even trying not to mix it up,
and then I mixed it up.

125
00:07:39.027 --> 00:07:45.189
N squared is polynomic, same thing with
n cubed, or n to the 4th, or whatever.

126
00:07:45.189 --> 00:07:49.810
2 to the n, or 3 to the n, or
4 to the n, or 2.222 to the n,

127
00:07:49.810 --> 00:07:52.062
that's called exponential.

128
00:07:52.062 --> 00:07:56.140
And then the worst of all is factorials.

129
00:07:56.140 --> 00:07:58.396
And there are technically
worse than factorial, but

130
00:07:58.396 --> 00:08:00.560
they don't really go by
any commonly known names.

131
00:08:00.560 --> 00:08:04.771
So these are the commonly known names
that you need to be familiar with.

132
00:08:04.771 --> 00:08:09.191
If you're gonna speak, computer scientist,
you're gonna speak algorithm,

133
00:08:09.191 --> 00:08:10.629
you need to be able to say.

134
00:08:10.629 --> 00:08:14.184
Yeah, I think my algorithm grows that
linear logarithmic, or I think it's

135
00:08:14.184 --> 00:08:18.030
exponential, or I think it's polynomial,
or I'm pretty sure it's constant.

136
00:08:18.030 --> 00:08:20.823
You need to be able to say
those kinds of things.

137
00:08:20.823 --> 00:08:28.874
Remember that these
are an estimate of the worst case.

138
00:08:28.874 --> 00:08:31.338
A lot of times,
we like to code based on, well,

139
00:08:31.338 --> 00:08:34.741
I'm pretty sure that in the average case,
it's gonna do great.

140
00:08:34.741 --> 00:08:37.652
And the algorithmist is gonna
look back at you and say,

141
00:08:37.652 --> 00:08:40.130
I don't really care what
the average case is.

142
00:08:40.130 --> 00:08:44.772
What I care about is is this gonna
crash because in the worst case it is

143
00:08:44.772 --> 00:08:49.667
exponential, and it takes you
a thousand minutes to run or something.

144
00:08:49.667 --> 00:08:52.489
Here's a true story on this.

145
00:08:52.489 --> 00:08:58.273
Way back earlier in my career, almost 20
years, certainly more than 15 years ago,

146
00:08:58.273 --> 00:09:03.194
very early on in my career, one of
the jobs that I took was as, my job title,

147
00:09:03.194 --> 00:09:08.375
it sounds better than it was, but my job
title was user experience architect.

148
00:09:08.375 --> 00:09:10.619
And I did not work in
the engineering department,

149
00:09:10.619 --> 00:09:14.101
I actually reported directly to the
product manager for a software company.

150
00:09:14.101 --> 00:09:19.055
And my job was to design and
prototype out and do user testing of

151
00:09:19.055 --> 00:09:24.117
interfaces and ways to interface
in our enterprise software.

152
00:09:24.117 --> 00:09:27.681
And then to develop that hand those
designs and those prototypes and

153
00:09:27.681 --> 00:09:31.381
the tests off to the engineering
department who then implemented it.

154
00:09:31.381 --> 00:09:34.691
And then I had to work with QA to
make sure that they did it right,

155
00:09:34.691 --> 00:09:37.758
that they implemented what we
had designed and tested it.

156
00:09:37.758 --> 00:09:39.411
All right, so that was my job.

157
00:09:39.411 --> 00:09:41.854
So I didn't report to
the engineering director, but

158
00:09:41.854 --> 00:09:44.851
I worked closely with them to make
sure that they implemented it.

159
00:09:44.851 --> 00:09:48.701
That's how in theory it worked,
here's how in practice it worked.

160
00:09:48.701 --> 00:09:52.408
Nine times out of ten, they took my code
and just dropped it into production.

161
00:09:52.408 --> 00:09:57.259
So I knew that I did need to be careful
because they were more likely to just,

162
00:09:57.259 --> 00:10:01.113
we're all lazy as engineers,
right, lazy as engineers.

163
00:10:01.113 --> 00:10:02.886
If it looks good enough, just drop it in.

164
00:10:02.886 --> 00:10:04.832
Why re-implement it, right?

165
00:10:04.832 --> 00:10:09.241
So I knew that there was a bit
of an additional responsibility

166
00:10:09.241 --> 00:10:14.179
that I had to make sure I didn't
just hand off really terrible code.

167
00:10:14.179 --> 00:10:16.450
Well, we had this feature that
they wanted me to design.

168
00:10:16.450 --> 00:10:21.133
And it was effectively a multi-column
sorting kind of a thing on this

169
00:10:21.133 --> 00:10:22.839
particular data table.

170
00:10:22.839 --> 00:10:25.870
And so I wrote up some quick code for it.

171
00:10:25.870 --> 00:10:28.533
That was n squared, it was polynomial.

172
00:10:28.533 --> 00:10:33.267
I don't think it was exponential,
it was polynomial in its theoretical

173
00:10:33.267 --> 00:10:36.455
growth to do this
multi-column sorting thing.

174
00:10:36.455 --> 00:10:40.638
It's very quick and dirty code,
and I put it was maybe,

175
00:10:40.638 --> 00:10:45.266
I feel like it was maybe about 10 or
15 lines of my code, and

176
00:10:45.266 --> 00:10:50.784
I probably wrote double that in code
comments, in all capital characters

177
00:10:50.784 --> 00:10:56.228
saying this code should absolutely
positively never go to production.

178
00:10:56.228 --> 00:10:58.361
This is the prototype, and

179
00:10:58.361 --> 00:11:03.197
it's being tested on a data set
that is a max of 15 elements.

180
00:11:03.197 --> 00:11:06.138
But we don't know what our customers
are gonna do with this, and

181
00:11:06.138 --> 00:11:09.200
our customers could have thousands or
tens of thousands, right?

182
00:11:09.200 --> 00:11:10.929
I put all this out in the code comments.

183
00:11:10.929 --> 00:11:12.319
I told my boss, I was like,

184
00:11:12.319 --> 00:11:15.285
I don't have time to go write
the correct version of this.

185
00:11:15.285 --> 00:11:16.683
We need to ship this feature.

186
00:11:16.683 --> 00:11:21.167
But this is our prototyping that
we've user experience tested, and

187
00:11:21.167 --> 00:11:22.956
it works well in the small.

188
00:11:22.956 --> 00:11:27.175
But if they just took my code and
shipped it, that would be bad.

189
00:11:27.175 --> 00:11:30.742
You probably can tell
where this story is going,

190
00:11:30.742 --> 00:11:34.571
because there was a lot of
pressure to ship this out.

191
00:11:34.571 --> 00:11:37.552
Whatever engineer it was,
I don't even know who it was, but

192
00:11:37.552 --> 00:11:41.528
whatever engineer it was, just took my
code, took out all this code comments and

193
00:11:41.528 --> 00:11:44.160
dropped it right into production.

194
00:11:44.160 --> 00:11:47.800
And I told the QA department,
use a larger dataset.

195
00:11:47.800 --> 00:11:52.232
Make sure that even with a larger dataset
than 15 that I had available to me,

196
00:11:52.232 --> 00:11:56.868
fake some data, do something, but test it
with a larger data set to make sure that

197
00:11:56.868 --> 00:12:00.295
the engineers have accounted for
the performance of this.

198
00:12:00.295 --> 00:12:03.600
If somebody clicks on this thing,
that it's not just gonna hang or die, or

199
00:12:03.600 --> 00:12:04.129
whatever.

200
00:12:04.129 --> 00:12:07.930
It was kind of an important
screen that we were adding.

201
00:12:07.930 --> 00:12:13.365
So guess how many test elements
the QA department used?

202
00:12:13.365 --> 00:12:16.085
The exact same number as I did,
they used the 15 dataset.

203
00:12:16.085 --> 00:12:19.160
I told them use hundreds or
thousands or something, just so

204
00:12:19.160 --> 00:12:23.227
that you'll spot it if there's a
performance problem use something bigger.

205
00:12:23.227 --> 00:12:26.650
Everybody along the line after
I had handed it off thought,

206
00:12:26.650 --> 00:12:31.033
I can't imagine a customer of having
more than 15 elements in this table,

207
00:12:31.033 --> 00:12:33.034
we will never have more than 15.

208
00:12:33.034 --> 00:12:36.967
So they just used 15 because
they thought it was fixed at 15.

209
00:12:36.967 --> 00:12:39.546
High profile feature,
we did a press release.

210
00:12:39.546 --> 00:12:43.154
We launched it with our biggest client.

211
00:12:43.154 --> 00:12:48.377
It crashes while the CEO is
doing a demo to his wife and

212
00:12:48.377 --> 00:12:52.553
other shareholders, totally crashes.

213
00:12:52.553 --> 00:12:53.678
And guess who got blamed?

214
00:12:53.678 --> 00:12:55.925
Even though I said over and
over and over again,

215
00:12:55.925 --> 00:12:57.959
this code is not ready
to go to production.

216
00:12:57.959 --> 00:12:59.813
I'm not the engineer.

217
00:12:59.813 --> 00:13:03.853
They still shipped that code
because it turns out that

218
00:13:03.853 --> 00:13:08.080
that customer had 10,000
records in that table.

219
00:13:08.080 --> 00:13:10.635
And he was like, look how cool
this is when I go to sort this.

220
00:13:10.635 --> 00:13:12.497
It's just gonna sort real quick.

221
00:13:12.497 --> 00:13:16.783
And it probably would have
taken 30 minutes to sort it,

222
00:13:16.783 --> 00:13:19.925
if I'm doing the math correctly, okay?

223
00:13:19.925 --> 00:13:21.975
So this stuff does matter,
it absolutely matters.

224
00:13:21.975 --> 00:13:23.983
I got the blame.

225
00:13:23.983 --> 00:13:30.555
Even though I had tried as much CYA as I
could possibly muster, I got the blame,

226
00:13:30.555 --> 00:13:36.651
because I didn't make sure that QA
had done a large enough test dataset.

227
00:13:36.651 --> 00:13:38.713
So anyway, this stuff matters.

