WEBVTT

1
00:00:00.000 --> 00:00:05.478
Moving on from option two
as our starting point,

2
00:00:05.478 --> 00:00:10.564
why are we still
recomputing these indexes?

3
00:00:10.564 --> 00:00:13.265
We don't need to recompute the indexes,
do we?

4
00:00:13.265 --> 00:00:15.509
Because we saved it
with the title element.

5
00:00:15.509 --> 00:00:17.567
Let's get rid of these index UPS.

6
00:00:33.904 --> 00:00:36.881
Now, we don't need the board yell anymore.

7
00:00:36.881 --> 00:00:39.179
It's nice.

8
00:00:39.179 --> 00:00:41.678
Or do we need the road yield?

9
00:00:41.678 --> 00:00:47.099
I love it when I get to delete stuff,
my favorite programming activity.

10
00:00:47.099 --> 00:00:49.890
Does anybody spot
the problem with this code?

11
00:00:49.890 --> 00:00:52.875
What's gonna happen right here?

12
00:00:52.875 --> 00:00:55.632
Actually, I'll be even
more specific about it.

13
00:00:55.632 --> 00:00:56.955
What's gonna happen right here?

14
00:00:56.955 --> 00:00:58.487
&gt;&gt; Someone said strings.

15
00:00:58.487 --> 00:01:01.835
&gt;&gt; Yep, we still have the same problem.

16
00:01:01.835 --> 00:01:03.614
These things are coming out as stings and

17
00:01:03.614 --> 00:01:05.876
we're trying to do numerical
addition with them.

18
00:01:05.876 --> 00:01:10.849
And depending on which numerical
mathematics we do with it,

19
00:01:10.849 --> 00:01:15.430
we might end up getting string
concatenation instead of

20
00:01:15.430 --> 00:01:18.560
incrementation the way that we want.

21
00:01:18.560 --> 00:01:21.292
So quick little fix.

22
00:01:21.292 --> 00:01:25.806
If we can just, Force those to be numbers.

23
00:01:30.659 --> 00:01:38.765
Number is my favorite way to
explicitly cast a string to a number.

24
00:01:38.765 --> 00:01:42.135
Other people like the plus
operator in front of it.

25
00:01:42.135 --> 00:01:45.234
I think that's harder to understand.

26
00:01:45.234 --> 00:01:49.075
Next thing that we want to change,
I know we're kind of going back and

27
00:01:49.075 --> 00:01:51.008
forth on a number of these things.

28
00:01:51.008 --> 00:01:55.466
But that's okay,
we're kind of doing this on purpose.

29
00:01:55.466 --> 00:01:58.375
The next thing that we want to change is,

30
00:01:58.375 --> 00:02:03.096
let's get rid of having this as
a single-dimensional DOMLIST.

31
00:02:03.096 --> 00:02:07.836
And let's make a data structure that
is a two-dimensional JavaScript array,

32
00:02:07.836 --> 00:02:11.811
that is a native JavaScript array
that is going to run much faster.

33
00:02:11.811 --> 00:02:15.264
Because we're still touching the DOM
with every access of that tiles array,

34
00:02:15.264 --> 00:02:18.783
every iteration over the tiles array,
we're still touching the native DOM.

35
00:02:18.783 --> 00:02:23.175
Let's go and just get references to
those DOM elements into a real two

36
00:02:23.175 --> 00:02:26.901
dimensional JavaScript array
that represents our grid.

37
00:02:26.901 --> 00:02:28.588
It represents our chessboard.

38
00:02:28.588 --> 00:02:33.194
It's the data structure that we probably
should have done at the beginning, but

39
00:02:33.194 --> 00:02:37.069
we got away with just using the DOM
as a data structure to start with.

40
00:02:37.069 --> 00:02:40.988
And now we want to create a real data
structure that is a two dimensional array.

41
00:02:40.988 --> 00:02:45.382
Turns out it's not gonna be nearly
as hard as you think it is.

42
00:02:45.382 --> 00:02:48.804
To do that, we're just gonna
construct that two dimensional array,

43
00:02:48.804 --> 00:02:50.080
as we construct the doll.

44
00:02:50.080 --> 00:02:54.132
So I'll make tiles into an array.

45
00:02:54.132 --> 00:02:58.891
I will, For each row,

46
00:02:58.891 --> 00:03:03.962
construct a row array,
we'll call it row tiles here.

47
00:03:06.695 --> 00:03:12.658
I will append into row tiles, a reference
to the div that we just created.

48
00:03:12.658 --> 00:03:19.630
So rowTiles.push(tileEl) I think for
good measure I'll put that at the end,

49
00:03:19.630 --> 00:03:24.460
just so,
it's more obvious where that's happening.

50
00:03:24.460 --> 00:03:28.288
And then, after I've appended,

51
00:03:28.288 --> 00:03:34.624
I don't need to append anything,
because rowTiles is,

52
00:03:34.624 --> 00:03:39.784
it needs to be pushed
into tiles ahead of time.

53
00:03:39.784 --> 00:03:40.801
So, tiles.push rowTiles.

54
00:03:45.981 --> 00:03:48.505
Now I can get rid of this line.

55
00:03:48.505 --> 00:03:49.592
I love deleting things.

56
00:03:49.592 --> 00:03:55.751
There's where we got rid of that
whole query selector all call.

57
00:03:55.751 --> 00:03:59.382
So now we're just pushing into this array,
a set of row arrays and

58
00:03:59.382 --> 00:04:03.227
into those row arrays,
respectively the tile element references.

59
00:04:03.227 --> 00:04:08.115
Can everybody see that the end result
of the draw function is that we

60
00:04:08.115 --> 00:04:13.020
now have a DOM built up of a two
dimensional matrix of DOM elements.

61
00:04:13.020 --> 00:04:17.800
And we separately have a two dimensional
JavaScript array with references to

62
00:04:17.800 --> 00:04:19.129
those DOM elements.

63
00:04:19.129 --> 00:04:24.029
It's kind of like an index,
like we did in the other exercise.

64
00:04:24.029 --> 00:04:26.801
Our JavaScript array is
not holding any new data,

65
00:04:26.801 --> 00:04:30.700
it's just holding references to
the DOM elements that are in the DOM.

66
00:04:30.700 --> 00:04:34.851
So we've constructed ourselves
a nice little fast index to get at

67
00:04:34.851 --> 00:04:36.593
the elements that we want.

68
00:04:48.191 --> 00:04:53.250
Unfortunately, it is gonna temporarily
slightly complicate our loop here.

69
00:04:53.250 --> 00:04:56.783
So we're going to need to do
a two-dimensional loop to be able to go

70
00:04:56.783 --> 00:04:59.890
through them now instead of
a single-dimensional loop.

71
00:04:59.890 --> 00:05:07.736
So our clearing of the highlighted
is now going to be row of tiles and

72
00:05:07.736 --> 00:05:12.093
tile, we'll just call it el of row.

73
00:05:22.560 --> 00:05:27.266
And we'll do the same thing down here with

74
00:05:27.266 --> 00:05:31.711
our FindTile, we need to adjust this.

75
00:05:31.711 --> 00:05:39.575
But here's a bit of a payoff.

76
00:05:39.575 --> 00:05:46.382
I'm more excited about this
payoff than you are but

77
00:05:46.382 --> 00:05:51.140
I like it that this is just now that.

78
00:05:53.199 --> 00:05:57.604
And in fact, you look at that,
and you say, well,

79
00:05:57.604 --> 00:06:03.957
if the only thing that fine tile is
doing is simply accessing that position

80
00:06:03.957 --> 00:06:09.196
in an array, maybe we don't
even need a fine tile function.

81
00:06:09.196 --> 00:06:12.770
JavaScript would do the inlining for
us, but

82
00:06:12.770 --> 00:06:18.518
I would argue that this is just gonna
be clear code to get rid of fine tile.

83
00:06:18.518 --> 00:06:26.003
And unfortunately I'm gonna have to change
those parentheses to square brackets.

84
00:06:26.003 --> 00:06:28.697
I mean take out the parentheses I
should have done let me back this up.

85
00:06:28.697 --> 00:06:30.261
I should have done tiles,

86
00:06:38.688 --> 00:06:40.191
And then I change these,

87
00:06:45.648 --> 00:06:51.018
To square brackets.And
now we can just delete

88
00:06:51.018 --> 00:06:56.946
find tile entirely,
which gives me even more joy.

89
00:06:58.338 --> 00:07:00.867
I can't do comma that way.

90
00:07:00.867 --> 00:07:03.759
That's not JavaScript it should be,
but it's not.

91
00:07:06.970 --> 00:07:08.751
We got to do the two
square brackets thing.

92
00:07:21.539 --> 00:07:26.476
I'm going to regression test
my code to make sure I didn't

93
00:07:26.476 --> 00:07:28.911
make another dumb mistake.

94
00:07:28.911 --> 00:07:30.412
Hey look at that still working.

95
00:07:46.881 --> 00:07:53.225
There are undoubtedly other optimizations
that we could make to this code.

96
00:07:57.211 --> 00:08:01.675
But I got to be honest with you, I'm
getting a little bit tired of trying to

97
00:08:01.675 --> 00:08:04.845
polish what is basically
just an ugly piece of junk.

98
00:08:08.523 --> 00:08:13.398
And at this moment,
I as an algorithmist I'm asking myself,

99
00:08:13.398 --> 00:08:18.953
did some of those early decisions I
make sort of paint me into a corner?

100
00:08:20.518 --> 00:08:25.785
Did they force me down on a road
that I now wish I wasn't down.

101
00:08:28.007 --> 00:08:32.046
And I'm gonna do is, any good
algorithmic should do at some point.

102
00:08:32.046 --> 00:08:38.474
You need to take a step back and
potentially we think the whole problem.

103
00:08:40.551 --> 00:08:45.066
This code roughly l Minus a few
potentially slightly different variable

104
00:08:45.066 --> 00:08:46.998
names, this is option three.

105
00:08:46.998 --> 00:08:48.838
So that's your new starting point for

106
00:08:48.838 --> 00:08:51.723
the final iteration that we're
going to make on this code.

107
00:08:51.723 --> 00:08:56.767
But before we make that iteration on this
code, we've got to go rewire our brains.

