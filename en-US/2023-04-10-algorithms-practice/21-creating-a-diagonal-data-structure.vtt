WEBVTT

1
00:00:00.000 --> 00:00:06.060
If you find yourself banging your
head against an algorithm solution,

2
00:00:06.060 --> 00:00:11.918
one of the questions that you should
somewhat regularly revisit is,

3
00:00:11.918 --> 00:00:16.881
did one of my earlier decisions
put me into this position?

4
00:00:16.881 --> 00:00:21.960
And could I have made a different
decision that might unstick me?

5
00:00:21.960 --> 00:00:26.570
Ironically, it's somewhat like
the back tracking in recursive dissent

6
00:00:26.570 --> 00:00:31.550
algorithms that we've already kind of
seen that you might go three-fourths of

7
00:00:31.550 --> 00:00:34.691
the way down the tree to
one particular solution.

8
00:00:34.691 --> 00:00:38.159
And then only then discover that
wasn't the optimal path and

9
00:00:38.159 --> 00:00:39.792
have to some back tracking.

10
00:00:39.792 --> 00:00:43.890
And sometimes you have to back
track all the way to the beginning.

11
00:00:43.890 --> 00:00:48.777
Thus far, we've been trying to convince
ourselves that maybe if we just keep

12
00:00:48.777 --> 00:00:54.116
plugging away at this, we're gonna get
something that looks like a more graceful,

13
00:00:54.116 --> 00:00:59.017
or more direct, or more straightforward
kind of solution that's optimal.

14
00:00:59.017 --> 00:01:03.665
And I think we definitely have improved
the performance of the solution

15
00:01:03.665 --> 00:01:05.300
insofar as is possible.

16
00:01:05.300 --> 00:01:08.924
Maybe there are a few tweaks here and
there, but

17
00:01:08.924 --> 00:01:13.827
I really think that the mental
model that we used is the problem.

18
00:01:13.827 --> 00:01:15.154
And that's okay.

19
00:01:15.154 --> 00:01:19.440
We learned some valuable
things lessons along the way.

20
00:01:19.440 --> 00:01:25.517
But sometimes, it does make sense
to go back and start from scratch.

21
00:01:25.517 --> 00:01:28.013
So, I wanna show you this next slide,

22
00:01:28.013 --> 00:01:32.632
you remember I told you about these
at the beginning of this exercise.

23
00:01:32.632 --> 00:01:36.411
This being the major diagonals,
and the minor diagonals.

24
00:01:40.315 --> 00:01:45.053
We fundamentally chose a data
structure that was oriented

25
00:01:45.053 --> 00:01:47.670
horizontally and vertically.

26
00:01:49.080 --> 00:01:50.140
And why do we choose that?

27
00:01:50.140 --> 00:01:54.830
Well, it was quite convenient
to use the data structure of

28
00:01:54.830 --> 00:01:58.577
the DOM as our earliest
bootstrapping steps.

29
00:01:58.577 --> 00:02:05.320
The DOM is oriented in that way, it's kind
of very hierarchical nested in that way.

30
00:02:05.320 --> 00:02:09.860
In other words,
the DOM has no notion of diagonals.

31
00:02:09.860 --> 00:02:15.323
So what we have been attempting
to do is retrofit on to a data

32
00:02:15.323 --> 00:02:21.800
structure that is horizontally and
vertically oriented a problem.

33
00:02:21.800 --> 00:02:26.563
That is quite literally
45 degrees of skew.

34
00:02:28.664 --> 00:02:30.652
You follow me?

35
00:02:30.652 --> 00:02:36.058
And it's not a surprise that that only
becomes apparent when you draw it out,

36
00:02:36.058 --> 00:02:41.045
I said earlier in the workshop,
don't be afraid of pulling out a pen and

37
00:02:41.045 --> 00:02:42.310
a sheet of paper.

38
00:02:42.310 --> 00:02:47.099
And when I was working on this problem and
trying to come up with better ways to do

39
00:02:47.099 --> 00:02:51.179
things, I pulled out a sheet of paper and
I started drawing it out.

40
00:02:51.179 --> 00:02:55.164
And I don't know exactly what it was,
why it happened, but

41
00:02:55.164 --> 00:02:59.387
I'm gonna tell you a story as if it is,
I'm telling a story as if

42
00:02:59.387 --> 00:03:03.400
this really happened even
though it technically didn't.

43
00:03:03.400 --> 00:03:08.134
A little tuft of wind
blew the paper just so

44
00:03:08.134 --> 00:03:12.462
it turned 45 degrees on my desk, and

45
00:03:12.462 --> 00:03:16.135
the light bulb moment went off.

46
00:03:16.135 --> 00:03:22.658
And what went off for me was,
why am I doing arrays have rows and

47
00:03:22.658 --> 00:03:28.321
columns instead of doing
a matrices of my diagonals?

48
00:03:28.321 --> 00:03:34.371
Why don't I construct a data
structure that is shaped and

49
00:03:34.371 --> 00:03:39.918
oriented to the problem that
I have Instead of trying

50
00:03:39.918 --> 00:03:45.857
to take the problem and
retrofit it to a data structure?

51
00:03:45.857 --> 00:03:47.301
You see that?

52
00:03:47.301 --> 00:03:52.193
So I want you to notice
that I have arbitrarily

53
00:03:52.193 --> 00:03:57.732
indexed these major
diagonals zero through 14,

54
00:03:57.732 --> 00:04:00.712
the 15 major diagonals.

55
00:04:00.712 --> 00:04:04.999
I just chose this ordering, you could
have picked a different ordering but

56
00:04:04.999 --> 00:04:06.299
this was convenient.

57
00:04:06.299 --> 00:04:11.853
I ordered these major diagonals
zero through 14 as such.

58
00:04:11.853 --> 00:04:15.990
And notice that when we look
at the minor diagonals,

59
00:04:15.990 --> 00:04:22.865
I started there indexing at 15 rather than
at zero and ordered them from 15 to 29.

60
00:04:22.865 --> 00:04:27.780
So there are a total of 30 diagonals,
15 major and

61
00:04:27.780 --> 00:04:32.367
15 minor, and
I chose to put them in one list zero

62
00:04:32.367 --> 00:04:36.752
through 29 as opposed
to two separate lists.

63
00:04:36.752 --> 00:04:39.316
Is that a good or bad choice?

64
00:04:39.316 --> 00:04:43.827
Could be debated, but
that's just a convention I chose, okay?

65
00:04:43.827 --> 00:04:46.103
And we're gonna see what we
can do with those numbers.

66
00:04:46.103 --> 00:04:51.459
Sometimes it's literally just an arbitrary
decision that you make, you put a stick

67
00:04:51.459 --> 00:04:56.378
in the ground and you build the fence
around the stick, and that's all I did.

68
00:04:56.378 --> 00:05:01.268
I looked at these diagonals and said,
I'm gonna treat them as a data structure.

69
00:05:01.268 --> 00:05:04.696
And rather than doing like a two
dimensional set of diagonal data

70
00:05:04.696 --> 00:05:09.157
structures or something, I'm just gonna
have one dimension of all my diagonals.

71
00:05:09.157 --> 00:05:13.090
The first half of my data structure is the
majors and the second half is the minors,

72
00:05:13.090 --> 00:05:13.719
that's it.

73
00:05:13.719 --> 00:05:19.099
That's all I did, it's not very
sophisticated but I numbered them as such.

74
00:05:19.099 --> 00:05:23.965
And here's what that further got me
because going back to the coordinate

75
00:05:23.965 --> 00:05:28.429
system, if this is my,
we'll call it the Cartesian coordinate or

76
00:05:28.429 --> 00:05:30.760
the DOM coordinate, four, two.

77
00:05:30.760 --> 00:05:39.479
I need to translate that coordinate
into the diagonals coordinate system.

78
00:05:39.479 --> 00:05:44.129
In other words, there's an index
of the major diagonal that four,

79
00:05:44.129 --> 00:05:46.415
two square participates in, and

80
00:05:46.415 --> 00:05:51.490
there's an index of the minor diagonal
that four, two participates in.

81
00:05:51.490 --> 00:05:56.282
Specifically, it participates in
the major diagonal at index 5 and

82
00:05:56.282 --> 00:05:58.689
the minor diagonal at index 21.

83
00:06:01.333 --> 00:06:06.383
So in other words, I need a way
to convert the coordinate four,

84
00:06:06.383 --> 00:06:09.254
two to the coordinate five, 21.

85
00:06:12.788 --> 00:06:15.749
This is not gonna turn out to
be very much rocket science,

86
00:06:15.749 --> 00:06:17.734
it's pretty straightforward math.

87
00:06:17.734 --> 00:06:24.200
It might look slightly arbitrary but
if you follow along with this math,

88
00:06:24.200 --> 00:06:29.500
you will see that I can take
the coordinate four minus two and

89
00:06:29.500 --> 00:06:33.106
subtract that from seven and I get five.

90
00:06:33.106 --> 00:06:35.510
And you think, well, there's a lot
of ways that you could have done it.

91
00:06:35.510 --> 00:06:40.109
But notice that if I do that same thing
for all of the other coordinates along

92
00:06:40.109 --> 00:06:43.467
that diagonal,
they all have the exact same pattern.

93
00:06:43.467 --> 00:06:48.305
Which is that if I subtract the column
index from the row index and

94
00:06:48.305 --> 00:06:53.697
then subtract that from seven I get,
the major diagonal index of five.

95
00:06:56.574 --> 00:07:00.252
I was just messing around with numbers and
I was like, yep, that works.

96
00:07:00.252 --> 00:07:04.988
And then, I tried it on the other rows,
like on row four, I mean diagonal four,

97
00:07:04.988 --> 00:07:07.270
and diagonal three, and all of them.

98
00:07:07.270 --> 00:07:11.399
And it turns out that math works for
all of those diagonals.

99
00:07:11.399 --> 00:07:15.019
And I said, okay, well,
I've done half the problem,

100
00:07:15.019 --> 00:07:18.884
I've converted my row index
into my major diagonal index.

101
00:07:18.884 --> 00:07:23.483
Now, I need to convert my column
index into my minor diagonal index.

102
00:07:25.596 --> 00:07:29.140
That being the general formula for
converting.

103
00:07:29.140 --> 00:07:34.159
And that general formula is only the
general formula based upon the arbitrary

104
00:07:34.159 --> 00:07:38.340
decisions that I made about how
I structured my data structure.

105
00:07:38.340 --> 00:07:42.779
So I inferred it from looking at
the diagram that I drew out on paper.

106
00:07:43.840 --> 00:07:46.362
You'd make different decisions
in your data structure,

107
00:07:46.362 --> 00:07:47.960
you end up with a different formula.

108
00:07:49.110 --> 00:07:51.890
But it can be the exact same concept.

109
00:07:51.890 --> 00:07:53.490
You follow me?

110
00:07:53.490 --> 00:07:55.480
So then we switch to the minor diagonal.

111
00:07:55.480 --> 00:08:00.269
And it turns out that I can
compute 21 as taking the row

112
00:08:00.269 --> 00:08:04.863
index plus the column index,
and then adding 15.

113
00:08:04.863 --> 00:08:10.098
And the same is true for
all of the tiles along that diagonal and

114
00:08:10.098 --> 00:08:14.930
so I have a general formula for
converting from the row and

115
00:08:14.930 --> 00:08:18.065
column index to the minor diagonal.

116
00:08:21.026 --> 00:08:21.838
Like that.

117
00:08:26.390 --> 00:08:31.449
That means that if I had a data
structure that kept track of all of

118
00:08:31.449 --> 00:08:37.271
those diagonals in those indexes, and
I click one specific diagonal and

119
00:08:37.271 --> 00:08:41.775
I know what it's tile and row,
I know what its index is.

120
00:08:41.775 --> 00:08:46.763
Then it's a trivial computation
mathematically to find out what

121
00:08:46.763 --> 00:08:50.762
indexes of the two major and
minor diagonals I have.

122
00:08:50.762 --> 00:08:55.148
And then I just need to loop over all the
elements in each of those two diagonals,

123
00:08:55.148 --> 00:08:59.612
I don't need to do any math of like minus
ones and plus ones and less than or equal.

124
00:08:59.612 --> 00:09:02.909
It's just all the elements in
the major diagonal collection and

125
00:09:02.909 --> 00:09:07.001
all of the elements in the minor diagonal
collection I had highlighted to them,

126
00:09:07.001 --> 00:09:07.691
that's it.

127
00:09:07.691 --> 00:09:10.057
No math at all.

128
00:09:15.427 --> 00:09:16.324
So let's do it.

129
00:09:19.301 --> 00:09:24.985
First thing is that our list of tiles
in the two dimensional grid which we

130
00:09:24.985 --> 00:09:31.438
thought was an improvement on the previous
stuff, we're gonna get rid of that.

131
00:09:31.438 --> 00:09:33.846
Actually, we're gonna do
a lot of deleting, so

132
00:09:33.846 --> 00:09:37.218
it's gonna get kind of fun here,
I love when I get to delete things.

133
00:09:37.218 --> 00:09:41.087
We do need to add something, which is that
we need to keep track of our new data

134
00:09:41.087 --> 00:09:43.874
structure, which I'm gonna call diagonals,
okay?

135
00:09:43.874 --> 00:09:49.253
And diagonals is going to be an array,
indexed zero through 29,

136
00:09:49.253 --> 00:09:53.201
so it's gonna be 30 diagonals in this,
okay?

137
00:09:53.201 --> 00:09:57.113
So we need to set up those 30 diagonals.

138
00:09:57.113 --> 00:10:02.157
There might be more clever
ways of doing it, but

139
00:10:02.157 --> 00:10:07.202
I wanna be super obvious about it,
I'm going to

140
00:10:07.202 --> 00:10:14.409
create 30 diagonals by pushing
an empty array into it 30 times.

141
00:10:14.409 --> 00:10:18.370
This is setting up my

142
00:10:18.370 --> 00:10:23.965
diagonals data structure.

143
00:10:26.045 --> 00:10:27.184
Everybody following so far?

144
00:10:29.993 --> 00:10:33.803
I can get rid of the row tiles and
tiles push, and

145
00:10:33.803 --> 00:10:37.434
row tiles push,
that stuff we can get rid of.

146
00:10:37.434 --> 00:10:44.183
And indeed I can get rid
of the dataset row and

147
00:10:44.183 --> 00:10:48.380
dataset column stuff, and

148
00:10:48.380 --> 00:10:53.501
you'll see why in just a moment.

149
00:10:53.501 --> 00:10:58.386
I need to compute from the row and
column index,

150
00:10:58.386 --> 00:11:03.516
which of the diagonals,
the 30 that are there,

151
00:11:03.516 --> 00:11:08.402
which ones do I need to
store a reference to it and

152
00:11:08.402 --> 00:11:11.840
which index do I need to put it in?

153
00:11:11.840 --> 00:11:12.926
You with me?

154
00:11:12.926 --> 00:11:20.043
We have those formulas on the slides and
just gonna type them out here.

155
00:11:20.043 --> 00:11:25.891
If I were to say the major diagonal index,

156
00:11:25.891 --> 00:11:30.403
you recall that it is seven minus

157
00:11:30.403 --> 00:11:36.262
the quantity row index which is I minus J.

158
00:11:36.262 --> 00:11:39.014
You remember that from the slides?

159
00:11:39.014 --> 00:11:46.703
And minor diagonal index is 15 plus,
I plus J.

160
00:11:56.327 --> 00:12:00.505
So I need to store the tile element

161
00:12:00.505 --> 00:12:05.729
reference inside of those diagonals, so

162
00:12:05.729 --> 00:12:12.744
I can say diagonals of major
Diagindx.push, tileEl,

163
00:12:12.744 --> 00:12:19.163
and diagonals of minor
Diagindx.push,tileEl,

164
00:12:19.163 --> 00:12:23.939
that is the constructing of my new data

165
00:12:23.939 --> 00:12:28.737
structure, everybody follow that?

166
00:12:28.737 --> 00:12:33.474
Each time I create a new tile elements
I make sure to insert it into

167
00:12:33.474 --> 00:12:35.682
the appropriate diagonals.

168
00:12:35.682 --> 00:12:39.780
Order doesn't matter within these
diagonals cuz all we're doing is

169
00:12:39.780 --> 00:12:43.580
highlighting all of them
are clearing all of them.

170
00:12:43.580 --> 00:12:44.690
We don't care what order it is.

