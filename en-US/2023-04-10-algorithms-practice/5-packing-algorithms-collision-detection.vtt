WEBVTT

1
00:00:00.000 --> 00:00:04.089
So with the illustration of
these concepts out of the way,

2
00:00:04.089 --> 00:00:08.605
I wanna make sure your brains
are fully firing on all cylinders.

3
00:00:08.605 --> 00:00:11.886
So we're gonna go through
some warm-up exercises.

4
00:00:11.886 --> 00:00:14.140
These are not actually ones
that you're gonna be coding.

5
00:00:14.140 --> 00:00:17.622
But I am going to pause for
a moment in between each and

6
00:00:17.622 --> 00:00:22.373
actually want you to spend a little
bit of time thinking about writing,

7
00:00:22.373 --> 00:00:27.547
coding, drawing something, how you
might tackle these kinds of problems.

8
00:00:27.547 --> 00:00:32.195
So here are a few warm-ups
that I want us to go through.

9
00:00:32.195 --> 00:00:34.566
The first one you don't
actually need to code, but

10
00:00:34.566 --> 00:00:36.565
I just want you to think
about in your mind.

11
00:00:36.565 --> 00:00:41.165
This is actually code,
fun little story that my son wrote.

12
00:00:41.165 --> 00:00:45.898
I taught my son how to write this code.

13
00:00:45.898 --> 00:00:49.279
I had to dictate a fair amount
of it to him, let's be honest.

14
00:00:49.279 --> 00:00:54.327
But he's twelve, and he asked me one day,
I don't even know how we got on the topic,

15
00:00:54.327 --> 00:00:58.971
but he asked me one day about binary
versus base 10 number representation.

16
00:00:58.971 --> 00:01:02.224
And I said, this is a very
straightforward algorithm for

17
00:01:02.224 --> 00:01:05.426
how you convert from binary to base 10 and
vice versa.

18
00:01:05.426 --> 00:01:08.506
And I learned it about his age,
maybe age 13 or so.

19
00:01:08.506 --> 00:01:10.757
So I was like,
let me explain the algorithm to you.

20
00:01:10.757 --> 00:01:14.832
So I explained to him the steps that
you take, and we did it manually first,

21
00:01:14.832 --> 00:01:18.843
where he converted a number from,
he just made up some ones and zeros, and

22
00:01:18.843 --> 00:01:22.361
then we figured out what the number
representation of that was.

23
00:01:22.361 --> 00:01:25.601
And then I was like,
now that we've written out those steps,

24
00:01:25.601 --> 00:01:27.106
we could write that in code.

25
00:01:27.106 --> 00:01:28.518
And let me show you how to do that.

26
00:01:28.518 --> 00:01:31.510
So it was mostly me teaching
him how to do the steps and

27
00:01:31.510 --> 00:01:34.910
then I helped him kind of figure
out what code to write here.

28
00:01:34.910 --> 00:01:38.228
But if we wanted to convert
from binary to decimal,

29
00:01:38.228 --> 00:01:41.094
you can go back and
take a look at the slides.

30
00:01:41.094 --> 00:01:45.645
The point of the workshop is not
that code, but think in your mind,

31
00:01:45.645 --> 00:01:51.176
if somebody asked you convert binary to
decimal and you didn't already have it,

32
00:01:51.176 --> 00:01:54.694
is the only answer,
let me look for an NPM package?

33
00:01:54.694 --> 00:01:56.274
Sometimes that's the right answer.

34
00:01:56.274 --> 00:01:57.972
I'm not saying that's a bad answer.

35
00:01:57.972 --> 00:02:02.183
Sometimes that's the right answer if
it's something that we definitely know

36
00:02:02.183 --> 00:02:06.009
there's a lot of gotchas and
we don't wanna trip over those gotchas and

37
00:02:06.009 --> 00:02:08.962
we just need to expediently
get a good solid solution.

38
00:02:08.962 --> 00:02:12.064
Nothing wrong with looking for
a good solid solution.

39
00:02:12.064 --> 00:02:17.096
But sometimes being able to solve that
problem yourself is useful, being able

40
00:02:17.096 --> 00:02:22.127
to translate a series of steps that you
could do on pen and paper down into code,

41
00:02:22.127 --> 00:02:27.120
that's one of the key first steps
to becoming a better algorithmist.

42
00:02:27.120 --> 00:02:30.063
So maybe on some free time,
you might try your hand at this and

43
00:02:30.063 --> 00:02:31.803
then check your code against mine.

44
00:02:31.803 --> 00:02:34.990
There's other ways of doing it,
maybe you have a better way.

45
00:02:34.990 --> 00:02:36.995
Here's another problem.

46
00:02:36.995 --> 00:02:39.530
I actually stumbled across
this one most recently.

47
00:02:39.530 --> 00:02:41.228
This one might look kinda strange.

48
00:02:41.228 --> 00:02:45.480
I don't know why, but in my social media
feeds, these were popping up for a while.

49
00:02:45.480 --> 00:02:47.882
If somebody gave you a set of squares,

50
00:02:47.882 --> 00:02:51.933
you were told they were squares,
and they said, how can you pack

51
00:02:51.933 --> 00:02:56.616
those squares into a larger square
that is of the smallest possible size?

52
00:02:56.616 --> 00:03:01.557
If we were thinking about this as
a shipping container and this is 2D,

53
00:03:01.557 --> 00:03:03.902
we're looking at it from above,

54
00:03:03.902 --> 00:03:08.785
how would we pack these boxes into
the smallest shipping container?

55
00:03:08.785 --> 00:03:11.537
Well, for four,
that's pretty straightforward.

56
00:03:11.537 --> 00:03:13.923
You just do a two by two grid,
that's the smallest.

57
00:03:13.923 --> 00:03:16.351
For nine, that's pretty easy,
a three by three grid.

58
00:03:16.351 --> 00:03:17.881
But what about for other numbers?

59
00:03:17.881 --> 00:03:21.988
And this is the question for 17 boxes, and

60
00:03:21.988 --> 00:03:27.320
you think to yourself, well,
how would I make a square?

61
00:03:27.320 --> 00:03:28.214
It can't be a rectangle.

62
00:03:28.214 --> 00:03:29.078
How would I make a square?

63
00:03:29.078 --> 00:03:31.719
What's the smallest square container?

64
00:03:31.719 --> 00:03:35.551
You might think a five by five would
be the smallest container, and

65
00:03:35.551 --> 00:03:38.503
then you just wouldn't use
some of the free space.

66
00:03:38.503 --> 00:03:43.241
But it turns out that you can
rearrange things, and this,

67
00:03:43.241 --> 00:03:47.700
I think, is a 4.356 by 4.356 outer square.

68
00:03:47.700 --> 00:03:52.614
And at present, this is not proven
to be the best solution, but

69
00:03:52.614 --> 00:03:58.299
it is the best known solution to
the number 17 square packing problem.

70
00:03:58.299 --> 00:04:01.536
There are all kinds of other
packing problems, by the way,

71
00:04:01.536 --> 00:04:04.664
packing of spheres and
packing of other kinds of shapes.

72
00:04:04.664 --> 00:04:07.318
This is a whole area of mathematics.

73
00:04:07.318 --> 00:04:12.975
But take a moment and think,
if you were asked to write

74
00:04:12.975 --> 00:04:18.657
some code to figure this out,
where would you start?

75
00:04:18.657 --> 00:04:22.261
And this is rhetorical, I'm not actually
asking you where would you start, but

76
00:04:22.261 --> 00:04:23.798
I'm asking you to think about it.

77
00:04:23.798 --> 00:04:26.791
Where would you start if the problem was,

78
00:04:26.791 --> 00:04:31.248
given n number of squares,
how do I compute the best packing?

79
00:04:31.248 --> 00:04:35.928
Because that is a piece of software that I
guarantee somebody has written somewhere,

80
00:04:35.928 --> 00:04:39.575
somebody's written for shipping,
manufacturing, whatever.

81
00:04:39.575 --> 00:04:43.654
Somebody's written algorithms for figuring
out how to pack stuff into the boxes.

82
00:04:43.654 --> 00:04:47.453
Although, the junk that I get from Amazon
doesn't look particularly optimized,

83
00:04:47.453 --> 00:04:49.089
so maybe that software does exist.

84
00:04:49.089 --> 00:04:53.873
But I just imagine somebody's got to have
written the software to figure out how to

85
00:04:53.873 --> 00:04:55.757
pack things more efficiently.

86
00:04:55.757 --> 00:04:59.201
How would you do that if
you were tasked with it?

87
00:04:59.201 --> 00:05:02.917
An algorithmist doesn't shun
away from a problem like that.

88
00:05:02.917 --> 00:05:06.956
I'll be honest with you,
I don't know that there is code.

89
00:05:06.956 --> 00:05:09.352
It's not like I'm withholding
the right answer from you.

90
00:05:09.352 --> 00:05:14.103
This is purposely trying to get your
brain firing on those cylinders,

91
00:05:14.103 --> 00:05:19.018
to think about what could be
a potentially pretty challenging problem,

92
00:05:19.018 --> 00:05:21.935
what are the first steps that you'd take?

93
00:05:21.935 --> 00:05:26.023
Hopefully, in your mind,
you're going back to the list of four

94
00:05:26.023 --> 00:05:29.897
techniques that I gave you at
the beginning of our workshop.

95
00:05:29.897 --> 00:05:32.909
Hopefully, you're going back and
saying I need to ask some questions.

96
00:05:32.909 --> 00:05:33.976
Is it any number?

97
00:05:33.976 --> 00:05:36.142
Is there a maximum number?

98
00:05:36.142 --> 00:05:40.850
[LAUGH] Even am I allowed to
go outside of the bounds?

99
00:05:40.850 --> 00:05:44.980
There's all kinds of questions that
you probably wanna ask to clarify and

100
00:05:44.980 --> 00:05:47.117
go about this solution differently.

101
00:05:47.117 --> 00:05:49.067
You might ask,
is it only two dimensional or

102
00:05:49.067 --> 00:05:52.777
do I also have to have an algorithm that
works three dimensionally stacking on top?

103
00:05:52.777 --> 00:05:57.213
Cuz it might be very different if I
had three dimensions to work with.

104
00:05:57.213 --> 00:06:02.448
Asking good clarifying questions
should be your first step.

105
00:06:02.448 --> 00:06:07.872
Probably step 1.b, if I went back and
added a little step in between those,

106
00:06:07.872 --> 00:06:11.459
is pull out a pen and
a sheet of paper, in this case,

107
00:06:11.459 --> 00:06:16.151
literally having a pen and
a sheet of paper drawing out solutions.

108
00:06:16.151 --> 00:06:19.881
But you'd be surprised how often
writing out your problem and

109
00:06:19.881 --> 00:06:23.324
drawing out your problem helps
your brain to organize and

110
00:06:23.324 --> 00:06:27.843
get to those first few steps that you
might start picking a data structure or

111
00:06:27.843 --> 00:06:32.100
picking an algorithm, just being
able to organize things visually.

112
00:06:32.100 --> 00:06:36.740
It is said, and I don't know whether
it's true, but it is said that we're

113
00:06:36.740 --> 00:06:41.457
all born inherently with visual
communication and visual spatial skills,

114
00:06:41.457 --> 00:06:45.455
and many of us unlearn those
skills through nature and nurture.

115
00:06:45.455 --> 00:06:50.129
I don't know that to be scientifically
factual, but I do know many,

116
00:06:50.129 --> 00:06:55.223
many people, including myself,
who have been able to foster that skill.

117
00:06:55.223 --> 00:06:57.818
It is a discipline that you can foster and
build.

118
00:06:57.818 --> 00:07:01.978
And so if even if you're one of those who
would never think to pull out a sheet of

119
00:07:01.978 --> 00:07:04.986
paper and draw something,
I encourage you to try that.

120
00:07:04.986 --> 00:07:06.466
As an algorithmist,

121
00:07:06.466 --> 00:07:11.327
I think you will find that it will
help you unlock and organize better.

122
00:07:11.327 --> 00:07:12.906
Okay, let's move on to the next one.

123
00:07:14.975 --> 00:07:18.408
I'm gonna play this video in just a
moment, but I wanna give you the problem.

124
00:07:18.408 --> 00:07:23.254
This happened to be, I had this problem
on my mind, I had written it down,

125
00:07:23.254 --> 00:07:27.493
and then I just happen to experience
this live having been done.

126
00:07:27.493 --> 00:07:28.413
Here's the problem.

127
00:07:28.413 --> 00:07:32.611
Let's say that you're working with
a geographic map and you see on here these

128
00:07:32.611 --> 00:07:35.788
icons, the multicolor with
the numbers in between them.

129
00:07:35.788 --> 00:07:38.832
These various different icons
that have been plotted onto this

130
00:07:38.832 --> 00:07:41.201
I'll explain in just a moment
what the icons represent.

131
00:07:41.201 --> 00:07:43.651
But imagine if the problem was,

132
00:07:43.651 --> 00:07:48.733
at different zoom levels of this map,
you need to decide whether or

133
00:07:48.733 --> 00:07:54.753
not to individually represent each one
of those points of interest as an icon.

134
00:07:54.753 --> 00:07:59.625
Or at what level of the zoom are points
close enough that they should be

135
00:07:59.625 --> 00:08:04.918
combined into a single icon, just to
reduce the visual clutter of the map?

136
00:08:04.918 --> 00:08:08.363
This is an extremely important
kind of an algorithm, and

137
00:08:08.363 --> 00:08:12.908
there actually are real algorithms for
this and you can go and Google them.

138
00:08:12.908 --> 00:08:16.819
But if somebody asked you, hey, our map
is too cluttered, when people zoom out to

139
00:08:16.819 --> 00:08:21.620
level 11, it's too cluttered, how do we
figure out how to make it less cluttered?

140
00:08:21.620 --> 00:08:27.309
Dropping the icons is one answer, but
merging the icons is another answer.

141
00:08:27.309 --> 00:08:29.870
It's a more sophisticated and
more pleasing answer.

142
00:08:29.870 --> 00:08:31.402
So as I play this,

143
00:08:31.402 --> 00:08:37.446
you'll see this was actually a map
that I encountered a few weeks ago.

144
00:08:37.446 --> 00:08:41.006
And literally, I just accidentally found,
you'll notice as I zoom out,

145
00:08:41.006 --> 00:08:42.429
there's pretty cluttered.

146
00:08:42.429 --> 00:08:46.233
Notice how they replotted those points and
they start grouping them together.

147
00:08:46.233 --> 00:08:50.083
And the numbers go up as they've grouped
them together, so they kind of indicate to

148
00:08:50.083 --> 00:08:53.440
you visually more of these things
have been grouped together.

149
00:08:53.440 --> 00:08:58.372
S, they're applying something
like this algorithm in this map.

150
00:08:58.372 --> 00:09:00.070
Where would you start?

151
00:09:00.070 --> 00:09:03.606
How would you decide how to
implement something like that?

152
00:09:03.606 --> 00:09:06.368
And while you think about that,
I'll give you the backstory of the map.

153
00:09:06.368 --> 00:09:09.746
This is a map from a couple of weeks ago.

154
00:09:09.746 --> 00:09:14.169
I'm from Austin and we had a historic
electrical outage after a historic ice

155
00:09:14.169 --> 00:09:17.636
storm, we don't get very many
of those in Austin, Texas.

156
00:09:17.636 --> 00:09:24.614
We had a huge ice storm and there was
a ridiculous amount of power outages.

157
00:09:24.614 --> 00:09:29.620
I think something like 70% of the city was
without power for prolonged periods of

158
00:09:29.620 --> 00:09:34.783
time, and some people, it took almost two
weeks to get their electricity restored.

159
00:09:34.783 --> 00:09:36.875
And this is in a major metropolitan city.

160
00:09:36.875 --> 00:09:40.629
Imagine the rural areas
must have much worse.

161
00:09:40.629 --> 00:09:44.184
But this was the power outage map,
and this was day 12, and

162
00:09:44.184 --> 00:09:49.159
there were still that many power outages
on day 12 in the middle of Austin, Texas.

163
00:09:49.159 --> 00:09:50.722
So I just happened to see it,

164
00:09:50.722 --> 00:09:54.185
seem like a really good illustration
of what I was describing.

165
00:09:54.185 --> 00:09:59.735
But again, think to yourself for a moment,
what would be the questions you would ask?

166
00:09:59.735 --> 00:10:05.949
What would you do if you were gonna
draw it out to figure out, A solution?

167
00:10:05.949 --> 00:10:07.891
Where would you start?

168
00:10:07.891 --> 00:10:11.575
An algorithmist is not intimidated
by hard problems like this.

169
00:10:11.575 --> 00:10:14.798
They break it down into smaller and
smaller pieces, and

170
00:10:14.798 --> 00:10:19.819
they solve each small piece, and then they
assemble it into larger and larger pieces.

171
00:10:25.444 --> 00:10:30.419
I'll tell you one question I would ask,
are all my icons the same aspect ratio?

172
00:10:31.902 --> 00:10:35.582
Right, cuz I'm gonna need to figure
out where my icons overlap and

173
00:10:35.582 --> 00:10:40.180
if they're all circular or they're all
square, or some of them are rectangular or

174
00:10:40.180 --> 00:10:43.681
triangular, I'm gonna need to
use some different geometry.

175
00:10:43.681 --> 00:10:46.470
So that's one of the first
clarifying questions.

176
00:10:46.470 --> 00:10:50.632
At every level of zoom, are my icons
the same or are they different?

177
00:10:50.632 --> 00:10:54.027
Here's another little
algorithmic trick for you.

178
00:10:54.027 --> 00:10:59.640
This is more in, it's often used in
game programming and things like that.

179
00:10:59.640 --> 00:11:03.093
We have this notion of what's
called collision detection,

180
00:11:03.093 --> 00:11:07.570
which is, I need to know if two items
are moving across, do they ever overlap?

181
00:11:07.570 --> 00:11:13.420
Are they about to basically hit, like
a bullet hitting a character in a game or

182
00:11:13.420 --> 00:11:17.838
something like that, right,
something moving around?

183
00:11:17.838 --> 00:11:22.063
Collision detection, it's interesting and
I'll just simplify this.

184
00:11:22.063 --> 00:11:26.360
If you think about a box that is
the bounding box for some element and

185
00:11:26.360 --> 00:11:29.199
you wanna ask,
does the bounding box of this

186
00:11:29.199 --> 00:11:32.905
element overlap the bounding
box of some other element?

187
00:11:32.905 --> 00:11:35.800
That's effectively how we
do collision detection.

188
00:11:35.800 --> 00:11:39.554
And it would be similar here, there's
some bounding box around these icons.

189
00:11:39.554 --> 00:11:44.545
And when I zoom out and I render my
icons and their bounding boxes overlap,

190
00:11:44.545 --> 00:11:46.799
do I want to allow any overlap, or

191
00:11:46.799 --> 00:11:51.087
do I want to immediately merge
as soon as there's any overlap?

192
00:11:51.087 --> 00:11:55.058
Is it once they're 70% overlapped,
then I need to merge them?

193
00:11:55.058 --> 00:11:57.017
Those are questions that we wanna ask.

194
00:11:57.017 --> 00:12:01.724
But for a collision detection, if you
have two bounding boxes and they have x,

195
00:12:01.724 --> 00:12:06.643
y coordinates, this is in 2D, it's a lot
easier, same algorithm works in 3D,

196
00:12:06.643 --> 00:12:08.597
but in 2D, it's a lot easier.

197
00:12:08.597 --> 00:12:13.470
But you effectively have to ask eight
questions to see if the x and/or

198
00:12:13.470 --> 00:12:18.008
y coordinate of any of the four
corners is overlapped with the x or

199
00:12:18.008 --> 00:12:22.474
y coordinate of any of the other
four corners of a bounding box.

200
00:12:22.474 --> 00:12:26.779
And by the way, more complex shapes
are typically made up as a composite of

201
00:12:26.779 --> 00:12:28.803
several smaller bounding boxes.

202
00:12:28.803 --> 00:12:30.936
Bounding boxes, the math is a lot easier.

203
00:12:30.936 --> 00:12:34.468
So instead of trying to literally
calculate the intersection with a sphere,

204
00:12:34.468 --> 00:12:36.205
which is much more complicated math,

205
00:12:36.205 --> 00:12:39.430
you might just actually approximate
it with a bunch of smaller boxes.

206
00:12:39.430 --> 00:12:44.934
But anyway, if I needed to know,
is these two boxes overlapping in any way,

207
00:12:44.934 --> 00:12:48.033
you might ask directly, do they overlap?

208
00:12:48.033 --> 00:12:52.704
And the answer to that requires you
to basically do eight if statements.

209
00:12:52.704 --> 00:12:58.347
But here's an interesting observation that
the algorithmist eventually comes to,

210
00:12:58.347 --> 00:13:02.043
which is, we can answer that
question in the negation.

211
00:13:02.043 --> 00:13:06.190
And it turns out you only need four
if statements to be sure that they

212
00:13:06.190 --> 00:13:09.315
don't overlap, and
then you negate the result.

213
00:13:09.315 --> 00:13:12.702
So it's more efficient and
it's less code to maintain.

214
00:13:12.702 --> 00:13:16.348
To write the negation,
I wanna know that they don't overlap and

215
00:13:16.348 --> 00:13:18.926
then I negate that to
know if they do overlap.

216
00:13:18.926 --> 00:13:20.823
So again, thinking like that,

217
00:13:20.823 --> 00:13:24.137
that's part of what an algorithmist
has to learn to do.

