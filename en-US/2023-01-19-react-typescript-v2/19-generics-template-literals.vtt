WEBVTT

1
00:00:00.000 --> 00:00:04.655
Yeah, I think it is worth spending a few
minutes to talk like we've like hand

2
00:00:04.655 --> 00:00:06.564
waved around these generics.

3
00:00:06.564 --> 00:00:11.030
And if you look at like how
[INAUDIBLE] Works that like T and

4
00:00:11.030 --> 00:00:15.793
like extend string number of symbol,
those are generics.

5
00:00:15.793 --> 00:00:19.678
And we've been around and we've
definitely like directly addressed them.

6
00:00:19.678 --> 00:00:24.012
So let's spend a minute or
two or five or ten.

7
00:00:24.012 --> 00:00:28.850
Just talk a little bit about
what they are and how they work.

8
00:00:28.850 --> 00:00:35.637
Cuz like, we're gonna have to do some
like magic with them in a heartbeat in

9
00:00:35.637 --> 00:00:42.665
order to kind of like solve that context
issue that we had before, right?

10
00:00:42.665 --> 00:00:45.436
So we should probably at least
do our due diligence, right?

11
00:00:45.436 --> 00:00:48.725
Like it's a little deviating from reaction
TypeScript to a little bit of type script.

12
00:00:48.725 --> 00:00:52.627
But, when we start using them to solve
our context problem that I set up for us,

13
00:00:52.627 --> 00:00:54.640
we're gonna need them.

14
00:00:54.640 --> 00:00:57.935
So let's head over to the course website.

15
00:00:57.935 --> 00:01:01.797
We're gonna go to the section on generics.

16
00:01:01.797 --> 00:01:06.341
And I'm gonna open up
the TypeScript Playground too,

17
00:01:06.341 --> 00:01:11.084
which is just tsplayground, And

18
00:01:11.084 --> 00:01:15.555
all this is is looks like
Visual Studio Code, bigger fonts.

19
00:01:15.555 --> 00:01:20.039
And you can see that like I was clearly
playing around like it saves your

20
00:01:20.039 --> 00:01:24.690
last thing I was playing around with
template literals before, right?

21
00:01:24.690 --> 00:01:26.170
You can see this is very similar.

22
00:01:26.170 --> 00:01:30.126
So I have this user, got a first name and
last name and an age.

23
00:01:30.126 --> 00:01:34.826
We saw this earlier when I was struggling
with the colour conversion cuz

24
00:01:34.826 --> 00:01:36.401
the library's using.

25
00:01:36.401 --> 00:01:38.900
So I showed you already how I can do this.

26
00:01:40.040 --> 00:01:41.288
And that's super cool.

27
00:01:41.288 --> 00:01:44.466
But then we're gonna talk a little
bit more generics in a second but

28
00:01:44.466 --> 00:01:47.203
like this is kind of one that I made for
an action, right?

29
00:01:47.203 --> 00:01:51.867
Which is, it should take some kind
of type, in this case user, right?

30
00:01:51.867 --> 00:01:55.500
And user has these three keys, right?

31
00:01:55.500 --> 00:02:00.211
So say, hey, we've got some
type that I'm gonna hand you

32
00:02:00.211 --> 00:02:03.974
just like we did with partial and
omit before.

33
00:02:03.974 --> 00:02:07.713
And then we're gonna say,
also we're gonna have another value.

34
00:02:07.713 --> 00:02:09.799
Now there's single letters
cuz that's the convention.

35
00:02:10.830 --> 00:02:11.976
Could you call this,

36
00:02:20.758 --> 00:02:23.590
Like you wouldn't a JavaScript
verb you totally could.

37
00:02:23.590 --> 00:02:26.610
So we've got,
the tag that we're passing in.

38
00:02:27.690 --> 00:02:30.468
And then this one's a little trickier,
right?

39
00:02:30.468 --> 00:02:35.093
Which we're saying we got this other
one called K, which stands for

40
00:02:35.093 --> 00:02:38.012
key, which needs to be
one of the keys of T,

41
00:02:38.012 --> 00:02:41.685
which is the user that I passed in,
and also a string.

42
00:02:41.685 --> 00:02:45.868
Which first name is,
first name is a string absolutely.

43
00:02:45.868 --> 00:02:48.805
And it is one of these keys.

44
00:02:48.805 --> 00:02:54.807
All I am going to say is for
the years that I've been using TypeScript,

45
00:02:54.807 --> 00:02:58.590
every time I saw one of
these I wanted to cry.

46
00:02:58.590 --> 00:03:01.105
And then one day I had to do
something really complicated and

47
00:03:01.105 --> 00:03:04.170
I just sat there I pumped one out and
it worked the first time.

48
00:03:04.170 --> 00:03:06.530
I don't know when you cross the chasm.

49
00:03:06.530 --> 00:03:07.888
I don't know how it happens.

50
00:03:07.888 --> 00:03:11.723
I will just say this is a simple one,
like we can look at some more advancements

51
00:03:11.723 --> 00:03:14.732
later, if this stresses you
out that it's an okay feeling,

52
00:03:14.732 --> 00:03:16.979
there's no need to have impostor syndrome.

53
00:03:16.979 --> 00:03:20.637
And then one day, you will surprise us
hopefully one day you will surprise

54
00:03:20.637 --> 00:03:24.413
yourself and just like busting out with
[INAUDIBLE] And like conditionals and

55
00:03:24.413 --> 00:03:26.070
it will do exactly what you want.

56
00:03:26.070 --> 00:03:29.140
You will not know how you
acquired this superpower.

57
00:03:29.140 --> 00:03:30.925
So, understand that this is a journey and

58
00:03:30.925 --> 00:03:35.430
don't feel stressed out like this is kind
of why it's like a little bit of an aside.

59
00:03:35.430 --> 00:03:42.672
But the really cool thing is that it
automatically looked at okay, cool.

60
00:03:42.672 --> 00:03:45.168
First name has to be a key on user.

61
00:03:45.168 --> 00:03:49.587
And then the payload automatically
became a value on the user object,right?

62
00:03:49.587 --> 00:03:57.495
If I change this to, You can see that
it automatically became a number,right?

63
00:03:57.495 --> 00:03:58.653
And this is great for reusability.

64
00:03:58.653 --> 00:04:03.314
We started before there is a trade off
between should you get all fancy like this

65
00:04:03.314 --> 00:04:06.930
or like would making three
actions by hand have been better.

66
00:04:08.390 --> 00:04:11.344
If you are the maintainer of
like [INAUDIBLE] Redux and

67
00:04:11.344 --> 00:04:15.590
you're trying to make a CreateAction
hook that generates the right type.

68
00:04:16.760 --> 00:04:19.280
This is where you live now.

69
00:04:19.280 --> 00:04:23.759
If you are the consumer of one of those
libraries, like I will not do in this.

70
00:04:23.759 --> 00:04:28.230
I took one foray into the React types, And

71
00:04:28.230 --> 00:04:31.190
I don't know that I came back
out the same person, right?

72
00:04:32.350 --> 00:04:35.878
Like you can do similar version of these,
but this is kind of the and

73
00:04:35.878 --> 00:04:39.343
I put a lot of reading on like some
really wild stuff about even some

74
00:04:39.343 --> 00:04:42.179
of the implementation details and
some of the stuff,

75
00:04:42.179 --> 00:04:46.715
but I'm mostly only going to touch lightly
on it because it doesn't fit the heuristic

76
00:04:46.715 --> 00:04:50.839
of have I used it in my own production
codebase in the last six months to a year.

77
00:04:50.839 --> 00:04:54.447
There was a question in
the chat why did it work for

78
00:04:54.447 --> 00:04:58.671
age let's bring this all back
as a number and we said it but

79
00:04:58.671 --> 00:05:03.341
if it's a string type age,
the key itself is a string, right?

80
00:05:03.341 --> 00:05:08.370
The value because it's almost the same
syntax as regular like accessing

81
00:05:08.370 --> 00:05:14.238
a value of an object in JavaScript, right,
which is we're saying go grab this key.

82
00:05:14.238 --> 00:05:17.620
It's very much like in
JavaScript if we said const,

83
00:05:42.195 --> 00:05:45.589
Right, in this case, the key is a string.

84
00:05:45.589 --> 00:05:49.284
The value is a number, so
it's why age still works.

85
00:05:49.284 --> 00:05:52.141
The key age is definitely a string.

86
00:05:52.141 --> 00:05:57.081
It's a number that's a value, and
this is getting go into the type user.

87
00:05:57.081 --> 00:06:01.033
Grab the key age and
its value is a number for the payload and

88
00:06:01.033 --> 00:06:05.160
this is just using the template
literals that we saw before.

