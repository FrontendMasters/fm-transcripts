WEBVTT

1
00:00:00.000 --> 00:00:04.178
So in the repository we're gonna
grab this inspirational quotes, and

2
00:00:04.178 --> 00:00:06.066
we're gonna take it for a spin.

3
00:00:06.066 --> 00:00:09.779
Because the other thing turns out
a lot of times in our UI apps,

4
00:00:09.779 --> 00:00:14.425
we always just don't have, we're not
just making counters all the time, or

5
00:00:14.425 --> 00:00:16.511
even in memory, only to do lists.

6
00:00:16.511 --> 00:00:19.200
Sometimes we have to talk to APIs.

7
00:00:19.200 --> 00:00:22.675
I know, I know, it happens, right?

8
00:00:22.675 --> 00:00:23.870
And we have to make network requests.

9
00:00:23.870 --> 00:00:27.672
Let's just talk about some
of the pieces around that.

10
00:00:27.672 --> 00:00:31.648
And we'll also then talk about,
what if we wanna pass set states through?

11
00:00:31.648 --> 00:00:35.782
And we'll kinda use that as a slightly
more sophisticated playground for

12
00:00:35.782 --> 00:00:37.924
getting a few more concepts in there.

13
00:00:37.924 --> 00:00:41.875
So go ahead and just pull that down,
and you should be good to go.

14
00:00:41.875 --> 00:00:42.927
And I'll get set up as well.

15
00:00:42.927 --> 00:00:44.477
And then I'll see you in a minute.

16
00:00:44.477 --> 00:00:46.826
So there's not a lot to
see in this app yet,

17
00:00:46.826 --> 00:00:50.631
because it is supposed to hit an API and
I have not dealt with that yet.

18
00:00:50.631 --> 00:00:54.691
So applications that are supposed
to hit APIs and then don't,

19
00:00:54.691 --> 00:00:57.381
don't do a lot of stuff yet, but we will.

20
00:00:57.381 --> 00:01:02.339
I do have the functionality
to hit said APIs, all right?

21
00:01:02.339 --> 00:01:07.071
We've got fetchRandomQuote and
fetchQuotes.

22
00:01:07.071 --> 00:01:09.522
Just for those you that are interested,

23
00:01:09.522 --> 00:01:14.148
this is using a library called mirage.js,
which simulates an API server.

24
00:01:14.148 --> 00:01:16.123
So I don't have to worry
about core stuff later,

25
00:01:16.123 --> 00:01:17.815
but it's also really great for testing.

26
00:01:17.815 --> 00:01:22.552
Or the hypothetical situation
where you need to build

27
00:01:22.552 --> 00:01:25.087
a UI before the API is ready.

28
00:01:25.087 --> 00:01:26.914
That happens to me.

29
00:01:26.914 --> 00:01:28.876
&gt;&gt; That's why we use Frontend Masters-
&gt;&gt; Yeah.

30
00:01:28.876 --> 00:01:34.319
&gt;&gt; For development,
then the backend can just make it real.

31
00:01:34.319 --> 00:01:40.949
&gt;&gt; So right now we have a problem,
which is, theoretically,

32
00:01:40.949 --> 00:01:45.735
we don't know what a quote is yet, right?

33
00:01:45.735 --> 00:01:47.271
And that's an easy fix, but

34
00:01:47.271 --> 00:01:50.408
this is where I let TypeScript
handle everything for you.

35
00:01:50.408 --> 00:01:53.609
It's really good about that,
until it does not have enough information.

36
00:01:53.609 --> 00:01:57.536
That's usually the only time that you
need to step in because you're like, yo,

37
00:01:57.536 --> 00:01:58.880
useState is like, quote.

38
00:01:58.880 --> 00:02:03.390
Quote is undefined, right?

39
00:02:03.390 --> 00:02:04.788
And it thinks that it will
forever be undefined.

40
00:02:04.788 --> 00:02:09.249
It's like, cool, quote is undefined,

41
00:02:09.249 --> 00:02:14.479
you can only set quote to undefined,
now great.

42
00:02:14.479 --> 00:02:20.015
And then, I think, if I tried to use quote
down here it's like, we do catch it.

43
00:02:20.015 --> 00:02:27.541
It is a constant of undefined, you almost
always get the loading situation here.

44
00:02:27.541 --> 00:02:30.610
So, what we need to do is figure out,

45
00:02:30.610 --> 00:02:34.867
if we tried to take the solution
that we had before,

46
00:02:34.867 --> 00:02:40.618
if I look at the quote type, I can see
it has an id content and a source.

47
00:02:40.618 --> 00:02:43.543
Really, I need the content and
the source to make this work.

48
00:02:43.543 --> 00:02:48.344
And so, one solution, and
honestly depending on your use case,

49
00:02:48.344 --> 00:02:50.876
which is not a terrible solution,

50
00:02:50.876 --> 00:02:55.525
which would be to give it what I
call an empty value in this case.

51
00:02:55.525 --> 00:03:00.909
And then maybe you have a skeleton loader,
and you get the right shape of everything.

52
00:03:00.909 --> 00:03:04.798
If you can pull it off with
whatever you're working on,

53
00:03:04.798 --> 00:03:08.273
this does have some problems,
which is now like,

54
00:03:08.273 --> 00:03:13.104
this won't work because technically
this is an object that exists.

55
00:03:13.104 --> 00:03:14.154
Also it's like,

56
00:03:14.154 --> 00:03:18.844
this is not prepared to have an ID because
it's trying to guess it from the type.

57
00:03:18.844 --> 00:03:21.927
There's lots of other edge cases.

58
00:03:21.927 --> 00:03:26.036
Let's talk about the more generic one
where it's like, the data might have one

59
00:03:26.036 --> 00:03:29.957
of a few different shapes, or more than
you have, more than you can just fake

60
00:03:29.957 --> 00:03:33.481
out in the very beginning, or
to the point where it's not worth it.

61
00:03:33.481 --> 00:03:37.783
So in this case, we basically just
need to say kinda like when we used

62
00:03:37.783 --> 00:03:42.692
a question mark before to say, this is
either this value or it's undefined.

63
00:03:42.692 --> 00:03:44.444
We've seen this syntax, and

64
00:03:44.444 --> 00:03:48.441
if you've used TypeScript before
you've definitely seen it, but

65
00:03:48.441 --> 00:03:52.946
I made promises that if you hadn't used
it you should be able to join with us.

66
00:03:52.946 --> 00:03:56.188
And we can say, basically,
pass it a generic or

67
00:03:56.188 --> 00:03:58.872
a type argument to what this should be.

68
00:03:58.872 --> 00:04:03.378
It is trying to guess, but in the event
that it cannot guess correctly,

69
00:04:03.378 --> 00:04:07.882
cuz it does not have enough information,
we can basically say, okay,

70
00:04:07.882 --> 00:04:11.278
this is a quote, or it's undefined.

71
00:04:11.278 --> 00:04:15.013
Right, so now it has figured
it all out for us, right?

72
00:04:15.013 --> 00:04:19.031
We just had to give it a little bit of a
helping hand to get it all the way there.

73
00:04:19.031 --> 00:04:22.905
And this will theoretically work for
us in this case.

74
00:04:22.905 --> 00:04:27.226
So now this one will fetch
a quote when it finally runs.

75
00:04:27.226 --> 00:04:32.020
And you'll notice that if I took this out,
because it's commented out, and

76
00:04:32.020 --> 00:04:36.103
the JavaScript will still run if
you don't have a compile error.

77
00:04:36.103 --> 00:04:39.997
So it's why you saw just an empty screen,
if you just spun up the app and

78
00:04:39.997 --> 00:04:42.903
the loading indicator
didn't stay there forever.

79
00:04:42.903 --> 00:04:44.325
Cuz the JavaScript was running,

80
00:04:44.325 --> 00:04:46.721
it was just a TypeScript issue
that we had at that point.

81
00:04:46.721 --> 00:04:49.118
But now it knows that it can be one or
the other.

82
00:04:49.118 --> 00:04:50.530
We can actually pull this in.

83
00:04:52.551 --> 00:04:57.818
What's really cool about this, that I
kinda wanna point out in this situation,

84
00:04:57.818 --> 00:05:01.471
which is up here, quote is quote or
undefined, right?

85
00:05:01.471 --> 00:05:03.646
Let's just, I don't know,

86
00:05:03.646 --> 00:05:08.004
console.log a quote in the market
remind me to take it out.

87
00:05:10.233 --> 00:05:12.866
It's quote or undefined, right?

88
00:05:15.283 --> 00:05:18.483
Here we're saying,
it's quote or undefined.

89
00:05:18.483 --> 00:05:20.618
But if there's no quote, return.

90
00:05:20.618 --> 00:05:25.237
And not only does TypeScript check
the actual types in the type system, but

91
00:05:25.237 --> 00:05:28.258
it's also kind of analyzing your code,
right?

92
00:05:28.258 --> 00:05:29.682
And this is a dead end.

93
00:05:29.682 --> 00:05:34.402
In the event that a quote is undefined,
right?

94
00:05:34.402 --> 00:05:35.918
It's faulty, we return.

95
00:05:35.918 --> 00:05:38.645
That means this code path stops here,
right?

96
00:05:38.645 --> 00:05:41.252
This branch timeline ends, right?

97
00:05:41.252 --> 00:05:42.355
It's been what pruned?

98
00:05:42.355 --> 00:05:43.604
Is that the term of art?

99
00:05:43.604 --> 00:05:48.420
Note, at this point forward,
if quote exists,

100
00:05:48.420 --> 00:05:53.359
at all,
it can't be undefined anymore, right?

101
00:05:53.359 --> 00:05:57.305
So you'd no longer have to deal with the
fact that it could be a quote or it could

102
00:05:57.305 --> 00:06:01.762
be undefined, because the world in which
it was undefined ended on line 29, right?

103
00:06:01.762 --> 00:06:05.539
And you can just kinda move along and it's
like it has already analyzed your code,

104
00:06:05.539 --> 00:06:06.919
it has figured it out for you.

105
00:06:06.919 --> 00:06:11.608
So it's one of those things if you find
yourself doing all these extra checks,

106
00:06:11.608 --> 00:06:13.111
you could hover over it.

107
00:06:13.111 --> 00:06:17.609
If I see somebody had put an like quote
nn to make sure it exists, right?

108
00:06:17.609 --> 00:06:21.162
I can hover over and
see was this code necessary, right?

109
00:06:21.162 --> 00:06:23.964
And get a sense of,
is this actually quote or undefined, or

110
00:06:23.964 --> 00:06:26.949
is it now definitely a quote
cuz I've done something, right?

111
00:06:26.949 --> 00:06:28.379
To confirm it one way or the other.

112
00:06:28.379 --> 00:06:32.384
And this will come back to
surprise us in a delightful way,

113
00:06:32.384 --> 00:06:36.720
unlike most technical surprises,
which are not delightful,

114
00:06:36.720 --> 00:06:40.342
when we work on action creators and
reducers later.

115
00:06:40.342 --> 00:06:43.766
But, yeah, that is a nice thing to
know as you kinda go through and

116
00:06:43.766 --> 00:06:45.465
work through all these things.

117
00:06:45.465 --> 00:06:48.945
But if you don't have a default value, you
can say, could be this thing or undefined.

118
00:06:48.945 --> 00:06:51.780
You have lots of options, you just
have to help TypeScript along the way.

119
00:06:51.780 --> 00:06:55.625
And sometimes, in return,
TypeScript will help you, right?

120
00:06:55.625 --> 00:06:57.390
It's a symbiotic relationship.

