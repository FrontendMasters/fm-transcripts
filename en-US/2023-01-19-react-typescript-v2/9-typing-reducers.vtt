WEBVTT

1
00:00:00.460 --> 00:00:01.320
We talked about useState.

2
00:00:01.320 --> 00:00:06.226
The more other built-in way
to manage state in a React

3
00:00:06.226 --> 00:00:08.961
application is useReducer.

4
00:00:08.961 --> 00:00:10.952
And as I alluded to several times,

5
00:00:10.952 --> 00:00:13.848
useState is just an abstraction
of a useReducer.

6
00:00:13.848 --> 00:00:19.300
So we can argue that there is really
one way, I'm not here to argue today.

7
00:00:19.300 --> 00:00:22.860
But how is that different?

8
00:00:22.860 --> 00:00:26.053
And I will tell you a story
before we get into this,

9
00:00:26.053 --> 00:00:30.766
which is originally I was gonna start
a new app, and then I was gonna let you

10
00:00:30.766 --> 00:00:35.110
implement it in the counter
that we were working on before.

11
00:00:35.110 --> 00:00:38.830
And I think I alluded to this
earlier when I was just building out

12
00:00:38.830 --> 00:00:41.846
the example first and
with a bunch of any types, and

13
00:00:41.846 --> 00:00:46.573
then I was like, watch me fix it, right,
or setting up for you to go fix it.

14
00:00:46.573 --> 00:00:50.947
And I was trying to test to make sure it
actually worked before you fix the types.

15
00:00:50.947 --> 00:00:52.216
I was like why doesn't this work?

16
00:00:52.216 --> 00:00:54.739
And I was throwing console logs in places.

17
00:00:54.739 --> 00:00:57.470
And I was like, what's even going on?

18
00:00:57.470 --> 00:01:00.170
And then I realized that
I had made a small,

19
00:01:00.170 --> 00:01:04.752
little mistake that wouldn't have
happened if I was using TypeScript.

20
00:01:04.752 --> 00:01:09.705
And thereby realize that I'll use that
as the example and then I'll kind of

21
00:01:09.705 --> 00:01:14.577
send you on the way with the original
one I was gonna show in a brand new app,

22
00:01:14.577 --> 00:01:17.427
which it'd be fun for everyone involved.

23
00:01:17.427 --> 00:01:20.200
But let's do the simplest version first.

24
00:01:20.200 --> 00:01:25.089
So useReducer, if you've ever used
Redux or even seen it, it's the same.

25
00:01:25.089 --> 00:01:27.670
usereducer is like Redux light,
light, light, right?

26
00:01:27.670 --> 00:01:33.019
So no middleware, no dev tools,
not all the batteries kind of included,

27
00:01:33.019 --> 00:01:36.227
particularly Redux toolkit now existing.

28
00:01:36.227 --> 00:01:40.798
It's not necessarily, but
it's a nice, easy light version,

29
00:01:40.798 --> 00:01:43.670
I will a lot of times reach for it.

30
00:01:43.670 --> 00:01:48.739
If I have to put one
useState in a component,

31
00:01:48.739 --> 00:01:52.444
fine, two, okay, five, no.

32
00:01:52.444 --> 00:01:56.112
At that point, it's a great way to say
a thing happened, especially if I have

33
00:01:56.112 --> 00:01:59.628
to coordinate, changing this should
then change this other thing.

34
00:01:59.628 --> 00:02:03.812
I will at that point say, this thing
happened, right, and have some logic that

35
00:02:03.812 --> 00:02:07.510
is easily testable to make sure that
the end result comes out, right?

36
00:02:07.510 --> 00:02:11.744
And so when things get a little
bit more complicated for you,

37
00:02:11.744 --> 00:02:16.072
then useState makes it easy,
then I'll go grab useReducer.

38
00:02:16.072 --> 00:02:20.687
Now talking to some people during the
break, I know that not everyone has used

39
00:02:20.687 --> 00:02:24.097
this, so let's look at
the world's simplest version.

40
00:02:24.097 --> 00:02:29.227
And so the world's simplest version, which
I will pull in to the app in a second,

41
00:02:29.227 --> 00:02:34.368
is basically what useState is under
the hood, right, simplified a little bit.

42
00:02:34.368 --> 00:02:40.716
But the way to think about a reducer,
it is simply a JavaScript function, right,

43
00:02:40.716 --> 00:02:47.162
that takes two arguments, the current
state of the world, a thing that happened.

44
00:02:47.162 --> 00:02:50.156
And it takes those things
into the function, and

45
00:02:50.156 --> 00:02:53.015
it returns the new state of the world,
right?

46
00:02:53.015 --> 00:02:57.613
Now there's a lot of things that we do,
but the world's simplest version is,

47
00:02:57.613 --> 00:03:00.970
this current state of the world
is that there's a count.

48
00:03:02.220 --> 00:03:05.579
The new thing that happened is
that now there's a new number.

49
00:03:05.579 --> 00:03:08.590
The thing that comes out
is the new number, right?

50
00:03:08.590 --> 00:03:11.340
Update the state accordingly,
and then the hook's like,

51
00:03:11.340 --> 00:03:14.589
figure all that with the underlying
link list and fun stuff like that.

52
00:03:14.589 --> 00:03:21.501
So this version of useReducer is
effectively an analog to setState,

53
00:03:21.501 --> 00:03:29.022
in so much that let's just drop it in and
we'll kinda just see it in action.

54
00:03:33.353 --> 00:03:35.079
So we got pull in, yes.

55
00:03:35.079 --> 00:03:39.031
&gt;&gt; If you are using Redux,
is it still worth using useReducer?

56
00:03:39.031 --> 00:03:43.504
&gt;&gt; So my general rule, that's a great
question, is that I try to think about

57
00:03:43.504 --> 00:03:47.400
state in my application in
a number of different ways, right?

58
00:03:47.400 --> 00:03:52.111
So for instance,
there's the true data application state,

59
00:03:52.111 --> 00:03:55.643
right, which is what blog posts or
whatever,

60
00:03:55.643 --> 00:04:00.009
what are the things that I
have loaded in my application?

61
00:04:00.009 --> 00:04:01.450
What is the editing state?

62
00:04:01.450 --> 00:04:06.814
Then there's a bunch of state that I think
about, either view layer state or I call

63
00:04:06.814 --> 00:04:12.590
ephemeral state, which is kinda like, hey,
is this accordion open or close, right?

64
00:04:12.590 --> 00:04:16.709
Which I do not need to store in a giant
data structure that then causes re-renders

65
00:04:16.709 --> 00:04:20.760
throughout my entire app that I then
need to cache and memorize, right?

66
00:04:20.760 --> 00:04:24.897
And so there's a world where
I am using Redux for my big,

67
00:04:24.897 --> 00:04:30.002
real application state of, yeah,
what models do I have loaded up for

68
00:04:30.002 --> 00:04:32.750
whatever we're building, right?

69
00:04:32.750 --> 00:04:38.427
Got that open Redux but stuff of like,
is this form valid, right?

70
00:04:38.427 --> 00:04:41.466
That's really just on that
view layer thing, right?

71
00:04:41.466 --> 00:04:45.122
And I might still use a useReducer for
that, cuz checking to see if all

72
00:04:45.122 --> 00:04:49.403
the values in the form,
that's probably 7, 8, 10, 15 new states.

73
00:04:49.403 --> 00:04:52.666
Yeah, that's still not necessarily
worth keeping that form that

74
00:04:52.666 --> 00:04:54.717
hasn't been saved in the store, right?

75
00:04:54.717 --> 00:04:59.742
So I will still use it in that kinda
middle ground of not necessarily worthy of

76
00:04:59.742 --> 00:05:05.335
being in the Redux store, getting a little
ridiculous to do it in useState, right?

77
00:05:05.335 --> 00:05:10.363
But this one is ridiculous because,
effectively, it's useState but

78
00:05:10.363 --> 00:05:14.315
I had to write my own
implementation of useState first.

79
00:05:14.315 --> 00:05:19.243
But it still kinda make the point
about TypeScript first, and

80
00:05:19.243 --> 00:05:24.720
then we'll then do it to a more
real example with useReducer.

81
00:05:24.720 --> 00:05:28.124
So this just being a JavaScript function,
right, in fact,

82
00:05:28.124 --> 00:05:31.392
if I wanted to, unlike useState,
you take this, I mean,

83
00:05:31.392 --> 00:05:34.910
you could do it as function
callbacks in useState as well.

84
00:05:34.910 --> 00:05:38.536
This is just a JavaScript function,
it can go in a file somewhere else.

85
00:05:38.536 --> 00:05:42.170
I can write up a bunch of unit tests,
pass a bunch of stuff in,

86
00:05:42.170 --> 00:05:46.210
look at the return values,
so on and so forth, right?

87
00:05:46.210 --> 00:05:49.150
And as you can see, it automatically
knows where to return your number.

88
00:05:49.150 --> 00:05:52.046
I could be explicit about
that if I wanted to, right?

89
00:05:52.046 --> 00:05:54.110
And that way, I can't accidentally
return the wrong thing.

90
00:05:55.280 --> 00:05:59.018
And so we say useReducer,
we pass it this function that

91
00:05:59.018 --> 00:06:04.280
has a return value of a number, and
that means it's a number, right?

92
00:06:04.280 --> 00:06:08.879
And yeah, just to kinda show you the way
this works under the hood, I don't know,

93
00:06:08.879 --> 00:06:12.496
ReducerState, Michael,
you have to remind me to delete this.

94
00:06:12.496 --> 00:06:15.160
So we have this and we say,

95
00:06:22.020 --> 00:06:25.835
All right, return type is a utility
type we'll see in a little bit, and

96
00:06:25.835 --> 00:06:28.897
then we're grabbing the type
of this reducer function.

97
00:06:28.897 --> 00:06:34.942
So type of reducer, as you can see,
takes two numbers, returns a number.

98
00:06:34.942 --> 00:06:37.794
We're just getting the return
type of that type, and so

99
00:06:37.794 --> 00:06:39.865
ReducerState is just a number, right?

100
00:06:39.865 --> 00:06:44.363
And so it is using that mechanism
to figure out what count should be.

101
00:06:44.363 --> 00:06:47.771
And then setCount is
react.dispatch number.

102
00:06:47.771 --> 00:06:52.176
So someone asked in the chat earlier,
is there an easier way than

103
00:06:52.176 --> 00:06:56.829
react.dispatch and then open
angle brackets react.setState and

104
00:06:56.829 --> 00:07:01.742
then number, like this, right,
especially if you pull in dispatch?

105
00:07:04.312 --> 00:07:05.664
It was pulled in from React.

106
00:07:09.035 --> 00:07:10.532
I wonder if it automatically updates here.

107
00:07:14.534 --> 00:07:16.816
Yeah, it's just Dispatch&lt;number&gt; now,
right?

108
00:07:16.816 --> 00:07:21.616
So that's a lot easier to pass through
than all that other ceremony with

109
00:07:21.616 --> 00:07:24.105
setState and all that other things.

110
00:07:24.105 --> 00:07:26.937
So this is an easy type to just call out,
and

111
00:07:26.937 --> 00:07:31.442
we'll actually do that in a little
bit as well in the secondary app.

112
00:07:31.442 --> 00:07:33.709
And so it is simpler to pass around.

113
00:07:33.709 --> 00:07:36.080
Yeah, you have to hold its
hand a little bit more, but

114
00:07:36.080 --> 00:07:39.054
especially when the complexity of,
I have multiple values.

115
00:07:39.054 --> 00:07:41.374
The next app that we're gonna
build is a color palette.

116
00:07:41.374 --> 00:07:44.826
So you've got hex codes and
RGB values and you can change the RGB and

117
00:07:44.826 --> 00:07:46.742
it will change the hex code, right?

118
00:07:46.742 --> 00:07:49.425
There's enough of wiring
all that together.

119
00:07:49.425 --> 00:07:53.436
But there's a super powerful pattern,
Redux aside,

120
00:07:53.436 --> 00:07:56.760
of the state of the world,
a thing happened.

121
00:07:58.280 --> 00:08:01.596
Figure it out inside this function and
let me know what happens, right?

122
00:08:01.596 --> 00:08:02.891
Whether you use Redux,

123
00:08:02.891 --> 00:08:07.102
whether you use useReducer, the pattern
itself also just works when you're

124
00:08:07.102 --> 00:08:11.393
writing just regular JavaScript
functionality, and it's super powerful.

125
00:08:11.393 --> 00:08:13.100
And so we've got that in place.

126
00:08:13.100 --> 00:08:16.957
And so that is, we can see that basically
all the types in React behave like they

127
00:08:16.957 --> 00:08:20.932
did with setState, which is not surprising
given the fact that I've repeatedly

128
00:08:20.932 --> 00:08:24.090
mentioned that setState is
an abstraction over useReducer, so

129
00:08:24.090 --> 00:08:25.974
we shouldn't be totally surprised.

130
00:08:25.974 --> 00:08:29.980
But that is some of
the mechanism of how it works.

131
00:08:29.980 --> 00:08:31.983
Now, this is a ridiculous reducer.

132
00:08:31.983 --> 00:08:36.790
That said, there are versions of this
that I have written before, right?

133
00:08:36.790 --> 00:08:42.618
I could, for instance, have a useState for
firstName, a useState for lastName.

134
00:08:42.618 --> 00:08:46.472
And then when both of those change,
listen to the other one, or

135
00:08:46.472 --> 00:08:50.834
I can have a reducer that has an object
that has firstName and lastName,

136
00:08:50.834 --> 00:08:53.910
takes them both and
spits out a fullName, right?

137
00:08:53.910 --> 00:08:56.610
Stuff along those lines where
either parcel is changed, right?

138
00:08:56.610 --> 00:09:01.050
The moment you are deriving state,
reducers aren't bad.

139
00:09:01.050 --> 00:09:07.496
Okay, so as you can see,
this all kinda works.

140
00:09:07.496 --> 00:09:11.001
setCount works as expected, if you
don't believe me, we can try it out.

141
00:09:14.594 --> 00:09:21.675
At this point, it actually should
take a number and returns void, cool.

