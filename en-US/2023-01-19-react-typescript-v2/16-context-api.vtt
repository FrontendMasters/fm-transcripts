WEBVTT

1
00:00:00.340 --> 00:00:05.683
Now, a better way is if I had done this
with the Context API, I could just

2
00:00:05.683 --> 00:00:11.312
have the thing itself be able to dispatch
that action with its own onclick.

3
00:00:11.312 --> 00:00:15.468
We should do that,
that sounds good, right?

4
00:00:15.468 --> 00:00:21.865
But I'm gonna teach a workshop
on React performance later.

5
00:00:21.865 --> 00:00:25.796
And the Context API has some implications
that are sometimes not great, and

6
00:00:25.796 --> 00:00:28.018
we'll talk about how to get around those.

7
00:00:28.018 --> 00:00:30.683
But the Context API,
all the time, every time,

8
00:00:30.683 --> 00:00:34.713
there's a really great blog post by
Mark Erickson where he talks about how

9
00:00:34.713 --> 00:00:37.325
the Context API is not
a state management tool.

10
00:00:37.325 --> 00:00:42.258
And that's not the theme of our workshop
today, but that's the thing to go read,

11
00:00:42.258 --> 00:00:44.843
if you really want, and I somewhat agree.

12
00:00:44.843 --> 00:00:46.451
So we've got that in place,

13
00:00:46.451 --> 00:00:50.540
let's actually look at implementing
the Context API in here, as well.

14
00:00:50.540 --> 00:00:56.224
So I'll make a new file
called context.tsx,

15
00:00:56.224 --> 00:00:59.877
put it in the root directory.

16
00:01:02.631 --> 00:01:06.444
For those of you who don't know
the context, there was an old API,

17
00:01:06.444 --> 00:01:11.011
Legacy Context API, which gave any
component anywhere in the hierarchy tree,

18
00:01:11.011 --> 00:01:13.551
the ability to reach in
to this shared tree.

19
00:01:13.551 --> 00:01:17.038
It was not a stable or documented API, but

20
00:01:17.038 --> 00:01:22.240
libraries like React Redox and
stuff like that used it.

21
00:01:22.240 --> 00:01:25.899
It's one thing for a library that has it
in fully supported to use, is nothing if

22
00:01:25.899 --> 00:01:30.040
you just wanna use a code base, and then
the Facebook team wanted to change it.

23
00:01:30.040 --> 00:01:37.080
But now there is a real Context API,
and we say createContext.

24
00:01:38.990 --> 00:01:42.490
And this is where it gets tricky,
give it a default value.

25
00:01:44.350 --> 00:01:46.480
Well, we've played this game before.

26
00:01:46.480 --> 00:01:49.532
We've played it with useState,
we've played it with useReducer,

27
00:01:49.532 --> 00:01:52.020
we've played this game many a time before.

28
00:01:52.020 --> 00:01:57.470
So I could be like,
here's a hexColor, right?

29
00:01:57.470 --> 00:02:00.238
And maybe it starts out as

30
00:02:03.677 --> 00:02:07.009
I'm not gonna use that special type
cuz we didn't really implement it.

31
00:02:07.009 --> 00:02:12.206
And so I could say, ColorContext, and

32
00:02:12.206 --> 00:02:17.246
it knows that ColorContext has a hex or

33
00:02:17.246 --> 00:02:20.490
has a string, right?

34
00:02:20.490 --> 00:02:25.240
Cool, cool, cool, and
at first, life seems great.

35
00:02:26.360 --> 00:02:27.640
Life seems good, right?

36
00:02:27.640 --> 00:02:30.632
We'll go ahead and

37
00:02:30.632 --> 00:02:36.620
we'll export const ColorProvider.

38
00:02:36.620 --> 00:02:43.111
Let's also, cuz I know that I'm
gonna forget, export ColorProvider.

39
00:02:43.111 --> 00:02:45.462
And that's gonna need children,
but we know how to deal with that.

40
00:02:45.462 --> 00:02:48.510
We'll deal with that in a second.

41
00:02:48.510 --> 00:02:54.690
And we kind of wrap this we say,
ColorContext.Provider.

42
00:02:54.690 --> 00:02:55.833
This is just a thing.

43
00:02:55.833 --> 00:02:59.507
This is not a TypeScript-specific thing,
just yet.

44
00:02:59.507 --> 00:03:00.894
We'll give it children.

45
00:03:03.010 --> 00:03:07.714
And we'll say that this
is PropsWithChildren.

46
00:03:07.714 --> 00:03:13.499
But then we need to actually Declare that,
as well.

47
00:03:22.588 --> 00:03:23.273
Let's see,

48
00:03:29.444 --> 00:03:33.848
Sometimes you make the same mistakes so
often that when you see it you're like,

49
00:03:33.848 --> 00:03:37.677
I don't even need to read the error
message cuz I do that all the time.

50
00:03:37.677 --> 00:03:42.477
So we have that in place, and so
now it's like, yo, I need a value.

51
00:03:42.477 --> 00:03:43.999
So the default value was fine, but

52
00:03:43.999 --> 00:03:46.319
this one we use it like this
we have to give it a value.

53
00:03:50.235 --> 00:03:53.996
And if you ever look at the,
what was Mark's favorite one, again?

54
00:03:59.137 --> 00:04:00.526
There we go.

55
00:04:00.526 --> 00:04:05.390
If you ever look at the documentation,
and I believe this is still true,

56
00:04:05.390 --> 00:04:09.700
I've not personally pulled up
the Context API documentation,

57
00:04:09.700 --> 00:04:12.601
the example is, there is a theme, right?

58
00:04:12.601 --> 00:04:15.334
Object of the different colors or
whatever.

59
00:04:15.334 --> 00:04:20.310
And they pass in the value, and
then that is available to everything.

60
00:04:20.310 --> 00:04:23.447
The docs there's like,
I believe this is still true,

61
00:04:23.447 --> 00:04:27.412
somewhat silent on state management
in here, and yet, we all do it.

62
00:04:27.412 --> 00:04:29.116
Even when I said we should
use the Context API,

63
00:04:29.116 --> 00:04:30.612
I saw a bunch of people nodding, right?

64
00:04:30.612 --> 00:04:34.469
Yeah, we should, but I guess we all do it.

65
00:04:34.469 --> 00:04:38.680
And we gave it a default value,
so it figured it out.

66
00:04:39.830 --> 00:04:43.278
We also wanna give it dispatch, right?

67
00:04:45.452 --> 00:04:53.393
But I can only use reducer
inside of a React component.

68
00:04:53.393 --> 00:04:56.709
And if I wanna export this ColorContext,

69
00:04:56.709 --> 00:05:00.316
I can only do it outside
of a React component.

70
00:05:02.299 --> 00:05:05.343
These two things are fundamentally
different, right?

71
00:05:05.343 --> 00:05:07.930
If I try to do something like,
yeah, yeah, check it out.

72
00:05:09.100 --> 00:05:12.660
Well, it's getting the type, so
we can do the same trick we did before.

73
00:05:14.110 --> 00:05:21.260
We're like, yeah, I think you're not gonna
pull one over on me, hexColor is a string.

74
00:05:22.910 --> 00:05:24.648
It's happy with that cuz it's like, cool,

75
00:05:24.648 --> 00:05:26.722
you gave me an object where
the hexColor was a string.

76
00:05:26.722 --> 00:05:31.396
I'm like, cool, cool, cool, Dispatch, and

77
00:05:31.396 --> 00:05:39.195
that's gonna be supported in, ColorAction.

78
00:05:43.742 --> 00:05:46.077
It's like, yo, give me a dispatch.

79
00:05:46.077 --> 00:05:47.630
The dispatch is ColorActions.

80
00:05:49.120 --> 00:05:53.120
I don't have one until over here, inside
this closure scope that I can't escape.

81
00:05:54.810 --> 00:05:55.320
What am I gonna do?

82
00:05:57.460 --> 00:05:59.360
I got options, none of them are great.

83
00:05:59.360 --> 00:06:03.560
I will eventually get you to a better but
more confusing option.

84
00:06:03.560 --> 00:06:10.000
But I've two options here,
both are not great.

85
00:06:11.730 --> 00:06:15.960
I can do this, but guess what?

86
00:06:15.960 --> 00:06:21.601
Now the dispatch can either be
Dispatch&lt;ColorActions&gt; are undefined,

87
00:06:21.601 --> 00:06:23.937
I will forever live with this.

88
00:06:23.937 --> 00:06:32.148
Which is super annoying cuz I am going
to define it five lines from now, right?

89
00:06:32.148 --> 00:06:36.781
And since this is going to, this code
will run, this will wrap my entire

90
00:06:36.781 --> 00:06:41.725
application component, there is very
little chance that there will ever be

91
00:06:41.725 --> 00:06:46.227
a world where dispatch is not defined and
we're using this context.

92
00:06:46.227 --> 00:06:51.221
I'm sure you can create some
weird edge case, it can happen.

93
00:06:51.221 --> 00:06:56.288
I'm not gonna say, no possible way,
but yo, I'm gonna define it before

94
00:06:56.288 --> 00:07:01.221
it even gets to application,
good luck using it before it's defined.

95
00:07:01.221 --> 00:07:06.258
And, yet, then I have to forever live
with the fact that it's an optional,

96
00:07:06.258 --> 00:07:07.609
that's not great.

97
00:07:07.609 --> 00:07:12.941
It's correct, but it's not great.

98
00:07:12.941 --> 00:07:20.134
The other option is to sell
TypeScript to chill, right?

99
00:07:20.134 --> 00:07:23.270
And, again, Michael in the chat
commented what that is,

100
00:07:23.270 --> 00:07:25.769
when we're saying, this is a hexColor.

101
00:07:25.769 --> 00:07:28.623
With great power comes great
responsibility, right?

102
00:07:28.623 --> 00:07:31.382
You better unit test those functions,
because if you're gonna insist that

103
00:07:31.382 --> 00:07:33.030
something is so tight,
you better be right.

104
00:07:34.040 --> 00:07:39.184
We have another option here where
we're gonna be like, okay, yeah,

105
00:07:39.184 --> 00:07:43.829
it's not that time, but for
a minute, pretend it is, right?

106
00:07:43.829 --> 00:07:49.595
And this is less dangerous than
an cuz it is isolated to one place,

107
00:07:49.595 --> 00:07:52.578
it doesn't affect everything else.

108
00:07:52.578 --> 00:07:57.054
But it should be treated with
the same amount of concern,

109
00:07:57.054 --> 00:08:00.605
which is, let's actually make this a type.

110
00:08:10.157 --> 00:08:12.443
Just trying to make sure I didn't
pick one that was already taken.

111
00:08:12.443 --> 00:08:13.957
I don't love that name,
but it's good enough.

112
00:08:17.175 --> 00:08:20.598
And it's like, well, that's yeah,

113
00:08:20.598 --> 00:08:25.487
that's not the right type,
but pretend it is, right?

114
00:08:25.487 --> 00:08:26.257
And that will work.

115
00:08:26.257 --> 00:08:32.341
And if you feel bad about this,
I will say two things to you, valid.

116
00:08:32.341 --> 00:08:37.163
The second thing I will say to you is,
let's look at literally

117
00:08:37.163 --> 00:08:41.360
what Create React does to
bootstrap your entire app.

118
00:08:43.240 --> 00:08:47.121
Because, theoretically,
document.getElementById('root'),

119
00:08:47.121 --> 00:08:48.940
there could not be a root on there.

120
00:08:48.940 --> 00:08:53.100
So getElementById returns either a or
undefined.

121
00:08:54.130 --> 00:08:58.482
Now, anyone setting this
template up understands that they

122
00:08:58.482 --> 00:09:02.670
made the public.html,
there is a root on there.

123
00:09:02.670 --> 00:09:04.820
So they're saying, your type should chill.

124
00:09:04.820 --> 00:09:07.313
I know you don't know, but I know.

125
00:09:07.313 --> 00:09:11.744
So, valid, and we will actually
get rid of this in a little bit.

126
00:09:11.744 --> 00:09:14.109
So if you're like, yeah, what is he doing?

127
00:09:14.109 --> 00:09:19.334
Don't worry, also,
I have [SOUND] never been bitten

128
00:09:19.334 --> 00:09:24.215
by this one, yet, but
we also will solve for it.

129
00:09:24.215 --> 00:09:25.881
But that is one way to handle this.

130
00:09:25.881 --> 00:09:28.556
Now it's all yelling at you like,
you didn't give me a dispatch over here.

131
00:09:28.556 --> 00:09:31.685
So you know that this is not infecting
other things in your code base.

132
00:09:31.685 --> 00:09:35.287
This is a one-time, trust me,
I know what I'm doing.

133
00:09:35.287 --> 00:09:37.400
I can see the chat moving.

134
00:09:37.400 --> 00:09:39.270
Yeah, nobody likes this.

135
00:09:39.270 --> 00:09:44.904
Anyone who feels good about this,
I mean, good for you.

136
00:09:44.904 --> 00:09:48.366
But yeah, I agree.

137
00:09:48.366 --> 00:09:52.500
And we'll look at another way that
is a little bit more complicated,

138
00:09:52.500 --> 00:09:55.075
but also kind of like solves this problem.

139
00:09:55.075 --> 00:09:58.611
But this is, it's the chicken and
the egg scenario, [COUGH], and

140
00:09:58.611 --> 00:10:00.678
something we kinda have to deal with.

141
00:10:00.678 --> 00:10:04.682
So then I can pull this fun stuff,

142
00:10:04.682 --> 00:10:09.687
let's leave it in there for a second, and

143
00:10:09.687 --> 00:10:14.840
we'll move it into the context, as well.

144
00:10:14.840 --> 00:10:15.896
We'll grab useReducer.

145
00:10:25.476 --> 00:10:27.794
Here we just need to pass
in that dispatch, as well.

146
00:10:30.887 --> 00:10:35.059
Awesome, and so
now this all wires up and it works, and

147
00:10:35.059 --> 00:10:37.708
we can use this context anywhere.

148
00:10:37.708 --> 00:10:41.221
So I will initially put it
in all those buttons and

149
00:10:41.221 --> 00:10:44.100
we'll move it into the app real quick.

150
00:10:44.100 --> 00:10:48.440
I guess, yeah,
we don't wanna hard code in that anymore.

151
00:10:48.440 --> 00:10:52.650
So pull the one from state, cool.

152
00:10:53.650 --> 00:10:55.235
And here we'll say,

153
00:11:00.129 --> 00:11:04.139
Notice that I forgot to wrap my index.tsx
in this, so somebody hold me accountable

154
00:11:04.139 --> 00:11:07.316
to that in a moment before I get
confused why nothing's working.

155
00:11:11.707 --> 00:11:15.187
So here we only need to pull out,
I guess I could pull out, yeah,

156
00:11:15.187 --> 00:11:18.228
I'll pull out both the hexColor and
the dispatch here.

157
00:11:18.228 --> 00:11:21.799
Because that way I can just put
the hook in the new place, and

158
00:11:21.799 --> 00:11:26.604
I don't have to put it everywhere cuz I
did some of that threading earlier, so.

159
00:11:30.215 --> 00:11:32.916
Just limiting the amount of refactoring
I have to do at this moment.

160
00:11:32.916 --> 00:11:34.790
Cool, so we've got all that in place.

161
00:11:34.790 --> 00:11:38.770
I'm just gonna validate that I have not
broken anything before I go, remember,

162
00:11:38.770 --> 00:11:41.910
someone has to keep me accountable,
I'll put in index.tsx.

163
00:11:41.910 --> 00:11:43.928
We do need to wrap our
application in this.

164
00:11:48.708 --> 00:11:50.397
What did I name it,
ColorContext or ColorProvider?

165
00:11:50.397 --> 00:11:58.159
ColorProvider, Awesome,

166
00:11:58.159 --> 00:12:03.379
and so
now let's validate that it works, cool.

167
00:12:03.379 --> 00:12:05.867
So now wiring up the rest of
these buttons or honestly,

168
00:12:05.867 --> 00:12:08.970
these input fields should be
a lot easier at this point.

169
00:12:08.970 --> 00:12:14.416
And so let's do it for
the color buttons, color swatch buttons.

170
00:12:18.233 --> 00:12:23.370
ColorChangeSwatch, so
that had the onclick.

171
00:12:23.370 --> 00:12:27.877
I would say, if nobody gave you one,
we'll use the one that I just wrote.

172
00:12:30.794 --> 00:12:35.416
Really, in this case,
all we care about is dispatch.

173
00:12:39.435 --> 00:12:47.285
UseContext with ColorContext.

174
00:12:51.356 --> 00:12:52.620
You know what?

175
00:12:54.521 --> 00:12:56.859
Let's get rid of this,
I'll do one with a refactor, but

176
00:12:56.859 --> 00:12:59.118
it's easier than putting
a weird condition on there.

177
00:12:59.118 --> 00:13:04.466
So on here, in this case,
what we'll do is we'll say, dispatch.

178
00:13:04.466 --> 00:13:09.744
Again, love to see it, every time

179
00:13:09.744 --> 00:13:14.662
it makes me happy, every time.

180
00:13:20.812 --> 00:13:22.105
That didn't need to be an object, though.

181
00:13:24.288 --> 00:13:31.984
Awesome, and so now, theoretically,
All these work throughout the code.

182
00:13:36.305 --> 00:13:37.610
I lost it.

183
00:13:37.610 --> 00:13:40.014
One of them had a name.

184
00:13:40.014 --> 00:13:42.350
Anyway, so now they all exist.

185
00:13:42.350 --> 00:13:43.690
It all works, everything's great.

