WEBVTT

1
00:00:00.090 --> 00:00:03.280
Let's do a slightly more aggressive one.

2
00:00:03.280 --> 00:00:07.304
Before I use that use effect
that I didn't wanna use to, or

3
00:00:07.304 --> 00:00:10.835
at least alluded to using a use effect to,
okay, so

4
00:00:10.835 --> 00:00:16.600
listen to when the count changes, and
then go ahead and update the DraftCount.

5
00:00:16.600 --> 00:00:19.372
I kind of said before,
a lot of times it's easy to say, yo,

6
00:00:19.372 --> 00:00:23.270
one of these two things has changed, or
they've clicked the Update Count button.

7
00:00:24.480 --> 00:00:27.250
These things could happen, figure it out.

8
00:00:28.380 --> 00:00:32.160
Just because we're focused on TypeScript,
I'm gonna pull in a reducer,

9
00:00:32.160 --> 00:00:36.070
kinda like in a cooking show when
I pull the turkey out of the oven.

10
00:00:36.070 --> 00:00:37.177
I'm gonna pull in one and

11
00:00:37.177 --> 00:00:40.610
that is not necessarily where
the problem in my code is gonna be.

12
00:00:40.610 --> 00:00:44.127
But we'll look at it first,
we'll talk about it, but

13
00:00:44.127 --> 00:00:48.390
watching me write this is probably
not the best use of your time.

14
00:00:48.390 --> 00:00:54.240
I will be pulling in this any, which
is a hint for where I get bitten later.

15
00:00:54.240 --> 00:00:58.010
[LAUGH] Just setting the scene now.

16
00:00:58.010 --> 00:01:01.271
So if we look, we've got this initial
state, which I've given a type,

17
00:01:01.271 --> 00:01:03.190
you might call it counter state.

18
00:01:03.190 --> 00:01:07.271
Just to keep the understanding of code,
we're seeing for the first time a little

19
00:01:07.271 --> 00:01:11.550
bit simpler, and we'll have just a default
object that we'll pass in as well.

20
00:01:11.550 --> 00:01:16.365
The cool part is I don't have to give
state a type if it has a default value,

21
00:01:16.365 --> 00:01:16.920
right?

22
00:01:16.920 --> 00:01:21.479
In any TypeScript function, if something
has a default value, TypeScript's like,

23
00:01:21.479 --> 00:01:24.602
let me guess, if you're saying
that defaults to a number,

24
00:01:24.602 --> 00:01:25.984
it's probably a number.

25
00:01:25.984 --> 00:01:30.626
Now if you wanna say it's a number or a
string, you gotta step back in again, but

26
00:01:30.626 --> 00:01:35.225
as long as you've done the bare minimum,
it will try to help you along the way.

27
00:01:35.225 --> 00:01:39.960
And all this really does is, again,
because of, reducers follow the same rule

28
00:01:39.960 --> 00:01:44.707
as React does writ large, which is
everything's got to be immutable, right?

29
00:01:44.707 --> 00:01:48.740
And so with these we have the count and
the draftCount.

30
00:01:48.740 --> 00:01:49.540
All right, cool.

31
00:01:49.540 --> 00:01:55.200
If increment comes in, increment the count
and then set it to the newCount.

32
00:01:55.200 --> 00:01:58.137
We also wanted to update draftCount
along with that every time.

33
00:01:58.137 --> 00:02:03.243
So we wanna say if that input field should
change along with when I hit the buttons,

34
00:02:03.243 --> 00:02:06.800
decrement, reset, sets them both to zero.

35
00:02:06.800 --> 00:02:09.830
I don't need to explain to
you how a counter works.

36
00:02:09.830 --> 00:02:11.990
We also have one that's
gonna take updateDraftCount.

37
00:02:11.990 --> 00:02:15.160
That's when they change the number
in the input field, right?

38
00:02:15.160 --> 00:02:18.315
That's actually going to be one where
we actually have what we might call

39
00:02:18.315 --> 00:02:19.410
a payload.

40
00:02:19.410 --> 00:02:23.050
One of the things that I'm gonna do is,
and you don't have to do this,

41
00:02:23.050 --> 00:02:25.890
in Redux for instance,
there is one rule for actions,

42
00:02:25.890 --> 00:02:28.520
is that all actions have a type property,
right?

43
00:02:28.520 --> 00:02:35.660
So, It's got to have a type.

44
00:02:35.660 --> 00:02:41.325
It's got to be some kind of,
usually a string, if you like yourself.

45
00:02:41.325 --> 00:02:45.350
After that, in Redux, there are no rules.

46
00:02:45.350 --> 00:02:48.550
useReducer and React,
it has even less rules, as you saw.

47
00:02:48.550 --> 00:02:51.370
I'm just tossing in a number, right?

48
00:02:51.370 --> 00:02:52.890
And it's like, that's cool.

49
00:02:52.890 --> 00:02:54.030
I'm into it.

50
00:02:54.030 --> 00:02:57.320
And so it literally could be anything.

51
00:02:57.320 --> 00:03:01.972
Now a great way to have your
teammates hate you is to just wing it

52
00:03:01.972 --> 00:03:03.770
with all these things.

53
00:03:03.770 --> 00:03:07.770
It's like, the pattern I like, there's
something called flux standard actions.

54
00:03:07.770 --> 00:03:11.030
Redux being an implementation of flux,
we don't have to talk about this.

55
00:03:11.030 --> 00:03:14.015
Which is like basically
having like fourish fields,

56
00:03:14.015 --> 00:03:18.985
two that we really care about, which is
to say, definitely have to have a type.

57
00:03:18.985 --> 00:03:22.108
And then just to make it standard,
having this payload property,

58
00:03:22.108 --> 00:03:25.504
which is everything you need to
know about the thing that happened.

59
00:03:25.504 --> 00:03:28.115
They changed the value
of that input field.

60
00:03:28.115 --> 00:03:32.356
In payload, you would either put the new
value or an object that had the keys and

61
00:03:32.356 --> 00:03:33.585
properties, right?

62
00:03:33.585 --> 00:03:36.920
That's better than,
I wonder what properties.

63
00:03:36.920 --> 00:03:38.650
I wonder what the shape of this action is.

64
00:03:38.650 --> 00:03:39.950
It's just a convention.

65
00:03:39.950 --> 00:03:40.720
You don't have to do it.

66
00:03:40.720 --> 00:03:45.094
I'm going to do it because I do it
right and because I'm teaching, and so

67
00:03:45.094 --> 00:03:49.759
it makes sense to follow some sort of
convention rather than just making stuff

68
00:03:49.759 --> 00:03:51.330
up as I go along.

69
00:03:51.330 --> 00:03:53.459
So we'll have actions in a payload.

70
00:03:53.459 --> 00:03:57.540
And so you'll see, if I go down
into the reducer we'll bring in.

71
00:03:57.540 --> 00:03:59.986
So, should we update the count manually?

72
00:03:59.986 --> 00:04:03.750
Go look at the payload,
which will be the new value, right?

73
00:04:03.750 --> 00:04:06.520
And everything will kind of work as well.

74
00:04:06.520 --> 00:04:09.251
This, obviously, as we all know,

75
00:04:09.251 --> 00:04:15.600
was written before I learned about
event value as number, two hours ago.

76
00:04:15.600 --> 00:04:20.650
So it does do some
coercing of stuff as well.

77
00:04:20.650 --> 00:04:23.130
But let's pull this in cuz this
is not my problematic code.

78
00:04:23.130 --> 00:04:28.921
So there's, other than there's just been
a reducer, which is inherently typed,

79
00:04:28.921 --> 00:04:33.416
really, despite the fact that it
doesn't look like it too much.

80
00:04:33.416 --> 00:04:37.481
So let's go ahead and
let's remove all of my riffing.

81
00:04:37.481 --> 00:04:40.163
And I'm gonna put this all in
the same file just for clarity,

82
00:04:40.163 --> 00:04:43.160
normally you would break
this out into its own file.

83
00:04:43.160 --> 00:04:45.745
But rather than watch me jump
around between six different files,

84
00:04:45.745 --> 00:04:47.693
it's probably easier to
keep it all in one place.

85
00:04:47.693 --> 00:04:52.354
So we've got this reducer, and again,
what I would do and in some of the other

86
00:04:52.354 --> 00:04:57.234
example apps, probably have a bunch of
tests than just passing the number two and

87
00:04:57.234 --> 00:05:00.249
then the accurate action
with a type increment and

88
00:05:00.249 --> 00:05:03.090
then sees the number three comes out,
right?

89
00:05:03.090 --> 00:05:06.895
Then I have one that passes and decrement
and sees that the number one comes out, so

90
00:05:06.895 --> 00:05:07.680
on and so forth.

91
00:05:07.680 --> 00:05:08.690
Super easy tests.

92
00:05:08.690 --> 00:05:12.679
You don't have to use React testing
library to mount the component and

93
00:05:12.679 --> 00:05:14.037
click a bunch of stuff.

94
00:05:14.037 --> 00:05:16.230
You might choose to do that as well, but

95
00:05:16.230 --> 00:05:18.894
it's nice that you don't
have to in this case.

96
00:05:18.894 --> 00:05:22.600
Cool, and so he's angry at me, right?

97
00:05:22.600 --> 00:05:24.040
And that's good.

98
00:05:24.040 --> 00:05:26.670
I just pasted some code in,
TypeScript is upset with me.

99
00:05:26.670 --> 00:05:27.170
Why?

100
00:05:32.529 --> 00:05:34.080
It's expecting an object.

101
00:05:35.140 --> 00:05:39.800
Now, this reducer expects an object
that has a count and a draftCount.

102
00:05:39.800 --> 00:05:43.360
And it's like, yo, you left this old
code in here when this was a zero.

103
00:05:43.360 --> 00:05:47.972
I was like, yes, I did cuz I was talking
to my friends while I was doing this,

104
00:05:47.972 --> 00:05:48.487
right?

105
00:05:48.487 --> 00:05:53.072
And instantly it catches that, so
I don't have to embarrass myself in front

106
00:05:53.072 --> 00:05:57.120
of my friends and
sit here flailing wildly, so that's good.

107
00:05:57.120 --> 00:06:04.250
So now we've got this and we can see
automatically the count and draftCount.

108
00:06:04.250 --> 00:06:06.184
That draftCount is any, and

109
00:06:06.184 --> 00:06:10.200
that was on purpose as I was
setting you up to change stuff.

110
00:06:10.200 --> 00:06:11.686
But again, got bitten by it,

111
00:06:11.686 --> 00:06:14.490
so I'm telling you the story
of how that happened to me.

112
00:06:14.490 --> 00:06:15.420
And then, setCount.

113
00:06:16.758 --> 00:06:18.017
Wow, setCount is now any.

114
00:06:19.625 --> 00:06:24.702
Right now, weirdly, hypothetically, if we
changed this to a number for a moment.

115
00:06:31.520 --> 00:06:34.240
Same type, string.

116
00:06:34.240 --> 00:06:38.078
payload is number, hypothetically.

117
00:06:38.078 --> 00:06:43.780
You'll notice, now,
I can only dispatch the right things.

118
00:06:43.780 --> 00:06:47.270
Do you see how I'm about to get hurt,
[LAUGH] right?

119
00:06:47.270 --> 00:06:49.820
Do you see what's about
to happen to me here?

120
00:06:49.820 --> 00:06:55.203
One any threw away all the type safety
of what came out of my reduce and

121
00:06:55.203 --> 00:06:57.480
what I could dispatch to it.

122
00:06:57.480 --> 00:07:01.178
And as we learned about some of the other
really nice stuff that TypeScript gives

123
00:07:01.178 --> 00:07:04.045
me, when I follow the rules and
use reducer, we're gonna see

124
00:07:04.045 --> 00:07:08.330
how the damage is much worse and
even we're probably thinking of right now.

125
00:07:08.330 --> 00:07:11.640
So we've got that in place,
I've got that any in there.

126
00:07:11.640 --> 00:07:15.401
And so, I was going about my business,
I can go in here,

127
00:07:15.401 --> 00:07:18.380
obviously these are all bogus now.

128
00:07:18.380 --> 00:07:20.240
So what I can do is I can dispatch.

129
00:07:23.130 --> 00:07:28.324
We wanna call this, I was making
a point that it was setCount but

130
00:07:28.324 --> 00:07:31.170
let's actually do the thing now.

131
00:07:31.170 --> 00:07:37.768
Well, dispatch, Could really go for
some autocomplete now.

132
00:07:39.511 --> 00:07:42.370
Well, I'm not gonna get any.

133
00:07:42.370 --> 00:07:45.280
Does anyone remember what the name
of my increment action was?

134
00:07:46.280 --> 00:07:49.160
That seems good, yeah.

135
00:07:49.160 --> 00:07:51.324
Well, let me scroll up and look.

136
00:07:51.324 --> 00:07:52.419
I'm making a point.

137
00:07:52.419 --> 00:07:58.009
[LAUGH] Increment, whoa, you can see
that I'm like, if it's the wizard

138
00:07:58.009 --> 00:08:03.255
behind the cloak, as soon as I don't
have autocomplete working for me,

139
00:08:03.255 --> 00:08:08.340
I have a lot of empathy for every
coding interview we have to do in this.

140
00:08:08.340 --> 00:08:12.120
We don't need a payload on that object,
but I don't really remember.

141
00:08:12.120 --> 00:08:17.022
Also you'll notice that I've once again
made the mistake that I've made a thousand

142
00:08:17.022 --> 00:08:20.129
times, of course,
multiple workshops I'll have,

143
00:08:20.129 --> 00:08:24.600
where I give increment decrement and
decrement increment.

144
00:08:24.600 --> 00:08:29.560
Increment, I could go for
some autocomplete.

145
00:08:29.560 --> 00:08:31.410
Now, that wasn't even for show.

146
00:08:31.410 --> 00:08:36.240
That wasn't even me trying to make the
point, that was literally me not knowing

147
00:08:36.240 --> 00:08:41.089
how to type while talking, despite the
fact that I did it for a living for years.

148
00:08:41.089 --> 00:08:43.804
All right, for count, we needed to do,

149
00:08:43.804 --> 00:08:47.820
we'll still call it state
now since it's two things.

150
00:08:47.820 --> 00:08:49.672
It does know what this is at least.

151
00:08:49.672 --> 00:08:50.908
Well, it knows what a count is.

152
00:08:57.702 --> 00:09:02.490
Cool, we don't need this anymore
since that will exist on state.

153
00:09:02.490 --> 00:09:04.333
Now, it will be in any type.

154
00:09:08.312 --> 00:09:09.779
What was the name of that one?

155
00:09:13.386 --> 00:09:17.070
Cool, and I can say,
I'll show you what I did.

156
00:09:19.220 --> 00:09:23.416
Typed action, And
I typed action cuz I was doing actions and

157
00:09:23.416 --> 00:09:25.751
I was doing types and I was somewhat,

158
00:09:25.751 --> 00:09:30.598
I was just kinda in autopilot setting
this thing up and not really thinking.

159
00:09:30.598 --> 00:09:35.705
Now, I don't need to explain
how conditionals work to

160
00:09:35.705 --> 00:09:41.588
you to explain that if you were
looking for an action type any and

161
00:09:41.588 --> 00:09:47.350
you pass in an object,
that action is updateDraftCount.

162
00:09:47.350 --> 00:09:51.936
It just falls right through
all of these conditionals and

163
00:09:51.936 --> 00:09:54.619
you get back your initial state.

164
00:09:54.619 --> 00:09:59.940
And then you hit a button repeatedly,
and nothing happens, right?

165
00:09:59.940 --> 00:10:01.800
Because you don't even get an error,
the code works.

166
00:10:01.800 --> 00:10:07.181
It's just on a very nuanced
version of what works is.

167
00:10:08.633 --> 00:10:15.280
We could take the event target value,
so on and so forth.

168
00:10:15.280 --> 00:10:20.368
But the point that I wanted to make
is that having won any in there opted

169
00:10:20.368 --> 00:10:26.181
me out of type safety everywhere, right,
effectively on dispatch at least.

170
00:10:26.181 --> 00:10:30.955
Made it so that I had to sit there and
type every action by hand and look up and

171
00:10:30.955 --> 00:10:33.880
remember it, so on and so forth, right?

172
00:10:33.880 --> 00:10:39.184
It's kind of like setting the stage
of how life is now with one any,

173
00:10:39.184 --> 00:10:44.205
one innocuous any,
just unlike literally one value, right,

174
00:10:44.205 --> 00:10:48.775
which is just simply the action,
affected everything.

175
00:10:48.775 --> 00:10:53.620
And I lost, yeah, it was like ten minutes,
but still, you know what?

176
00:10:53.620 --> 00:10:56.980
Enough of those ten minutes, and
you're like, yeah, I can write some types.

177
00:10:58.170 --> 00:11:02.803
So let's kinda look at how we might
make that a little bit better, right,

178
00:11:02.803 --> 00:11:07.510
instead of doubling down and watching
me fall all the way after you've seen

179
00:11:07.510 --> 00:11:10.710
where I got bitten by
a real world mistake.

180
00:11:10.710 --> 00:11:11.790
Let's make this better

