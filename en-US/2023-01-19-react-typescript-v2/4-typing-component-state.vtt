WEBVTT

1
00:00:00.330 --> 00:00:03.691
We figured out all the different kind
of props we can pass in even up until

2
00:00:03.691 --> 00:00:04.258
children.

3
00:00:04.258 --> 00:00:09.141
The other kind of the two kinda core
ways that React does its thing is props,

4
00:00:09.141 --> 00:00:10.936
and what's the other one?

5
00:00:12.869 --> 00:00:14.947
State, right?

6
00:00:14.947 --> 00:00:20.971
[SOUND] Okay, so
what do we do about state?

7
00:00:20.971 --> 00:00:25.871
So for that we're going to
switch over to another example.

8
00:00:25.871 --> 00:00:30.395
And so I'm gonna just take a minute and
switch gears.

9
00:00:35.659 --> 00:00:37.575
And we're gonna go to
that accident counter.

10
00:00:37.575 --> 00:00:38.399
So again,

11
00:00:38.399 --> 00:00:43.992
I guess we start in a world where we
have what is mostly a React component.

12
00:00:43.992 --> 00:00:45.281
Let's take a look at it in the browser.

13
00:00:45.281 --> 00:00:48.005
We can count the days since
our last JavaScript accident.

14
00:00:48.005 --> 00:00:51.056
Last time undefined was not a function, or

15
00:00:51.056 --> 00:00:55.620
we tried to call map on null or
something along those lines.

16
00:00:55.620 --> 00:00:59.600
Right now it has no
real state to speak of.

17
00:00:59.600 --> 00:01:03.199
And again, this is where we kinda
double down on one of my core themes,

18
00:01:03.199 --> 00:01:07.570
which is when possible, TypeScript
does try to stay out of your way.

19
00:01:07.570 --> 00:01:08.867
So where do I use state?

20
00:01:10.976 --> 00:01:13.238
I'll say count.

21
00:01:13.238 --> 00:01:14.329
&gt;&gt; How did you do that?

22
00:01:14.329 --> 00:01:16.337
&gt;&gt; I have a snippet.

23
00:01:16.337 --> 00:01:17.130
I'll show it to you later.

24
00:01:19.840 --> 00:01:21.177
It just basically fills it in.

25
00:01:21.177 --> 00:01:24.588
The cool part is that it'll
capitalize that C for me.

26
00:01:24.588 --> 00:01:28.010
I haven't figured how to make it also auto
import useState if I haven't already, but

27
00:01:28.010 --> 00:01:28.970
that's one extra tab.

28
00:01:30.220 --> 00:01:34.430
Yeah, there's a bunch of things
that I can, I'm very lazy.

29
00:01:34.430 --> 00:01:39.288
So we've got this count and
we give it a default value of 0.

30
00:01:39.288 --> 00:01:41.400
And guess what, it knows a count is.

31
00:01:41.400 --> 00:01:42.869
It knows it's a number.

32
00:01:42.869 --> 00:01:44.234
It knows I'm not using it anywhere.

33
00:01:44.234 --> 00:01:47.613
But it also knows that it's a number,
right?

34
00:01:47.613 --> 00:01:54.385
And that's pretty cool cuz now
we can go ahead and find that 0.

35
00:01:54.385 --> 00:01:56.084
There it is.

36
00:01:56.084 --> 00:01:59.584
Swap it in and cool, whatever.

37
00:01:59.584 --> 00:02:06.681
But the nice part too is that,
We can only set it to a number.

38
00:02:06.681 --> 00:02:09.247
If we look at actually setCount as well,
that, and

39
00:02:09.247 --> 00:02:13.373
some of the ceremony around this, if it
stresses you out, don't worry about it.

40
00:02:13.373 --> 00:02:16.833
useState is really a wrapper
around useReducer, so

41
00:02:16.833 --> 00:02:19.593
that's why it's dispatching actions.

42
00:02:19.593 --> 00:02:22.391
It just kind of uses
this very basic action.

43
00:02:22.391 --> 00:02:23.099
In this case,

44
00:02:23.099 --> 00:02:27.525
we'll actually kinda accidentally rewrite
this a little bit later, but it's saying,

45
00:02:27.525 --> 00:02:32.025
like, hey, we're gonna dispatch an action,
for setState it's just a value, really.

46
00:02:32.025 --> 00:02:33.460
And it's gotta be a number.

47
00:02:33.460 --> 00:02:38.302
This way, if we do try to set the count
to a string, and let me tell you where we

48
00:02:38.302 --> 00:02:42.788
accidentally get strings when we
think we're dealing with numbers.

49
00:02:42.788 --> 00:02:46.313
One of my biggest pet peeves
which is input type number,

50
00:02:46.313 --> 00:02:49.280
the event target value is a string, right?

51
00:02:49.280 --> 00:02:53.336
And then also you know that you
can add two strings together and

52
00:02:53.336 --> 00:02:55.980
it'll concatenate them, right?

53
00:02:55.980 --> 00:02:59.844
And so the nice part is you will now have
to become immediately aware of it while

54
00:02:59.844 --> 00:03:02.826
also becoming blissfully
unaware that that's a problem.

55
00:03:02.826 --> 00:03:06.860
Because since you could only set it to
a number, if you ever accidentally take

56
00:03:06.860 --> 00:03:10.832
event target value which happens to be
a string and try to use setCount, as if

57
00:03:10.832 --> 00:03:15.079
there was a form field towards the bottom
here for no reason whatsoever, right?

58
00:03:15.079 --> 00:03:17.062
It will immediately catch that for you.

59
00:03:17.062 --> 00:03:21.661
&gt;&gt; Did you know about
input.value as number?

60
00:03:21.661 --> 00:03:29.164
Or instead of doing .value,
you can do value as number, which is nice.

61
00:03:29.164 --> 00:03:33.772
I'm not gonna do what I have planned here,
which is to parse into it or

62
00:03:33.772 --> 00:03:37.992
whatever objective is number,
we're gonna do that instead.

63
00:03:37.992 --> 00:03:40.657
I'm gonna live learn about
value that as number.

64
00:03:40.657 --> 00:03:43.559
What's the support on that?

65
00:03:43.559 --> 00:03:44.940
&gt;&gt; Great.

66
00:03:44.940 --> 00:03:45.996
&gt;&gt; Awesome, I'm into it.

67
00:03:45.996 --> 00:03:47.653
See, this is why I come out here so
I can learn things.

68
00:03:47.653 --> 00:03:51.985
&gt;&gt; I'll double check in the meantime,
&gt;&gt; All right, we'll have live updates

69
00:03:51.985 --> 00:03:56.807
from Mark on the support for
eventTargetValue.asNumber.

70
00:03:56.807 --> 00:03:57.823
Cool.
&gt;&gt; Yeah, it's clean across the board.

71
00:03:57.823 --> 00:03:59.120
&gt;&gt; Clean across the board.

72
00:03:59.120 --> 00:04:04.331
So we've got this onClick where I
can say that when that happens,

73
00:04:04.331 --> 00:04:10.224
we wanna say, Say count is count + 1.

74
00:04:11.914 --> 00:04:16.295
And it can only take a number as I said,
for some reason I decide

75
00:04:16.295 --> 00:04:21.508
that, They won't let me
set it to a string, right?

76
00:04:21.508 --> 00:04:23.030
And so I instantly get caught.

77
00:04:23.030 --> 00:04:29.414
Cuz not knowing about eventTarget.asValue,
I have made this mistake before, right?

78
00:04:29.414 --> 00:04:31.909
And yeah, I catch it pretty quickly, but

79
00:04:31.909 --> 00:04:35.560
it does involve me going to the browser,
clicking a button.

80
00:04:35.560 --> 00:04:38.712
You don't really know what in these apps
look like other than these moments that

81
00:04:38.712 --> 00:04:40.130
I flashed them on the screen.

82
00:04:40.130 --> 00:04:44.010
Because mostly I'm getting all my
feedback in the editor itself.

83
00:04:44.010 --> 00:04:46.808
setState also takes a function
which I really love.

84
00:04:49.449 --> 00:04:54.510
And again,
it knows already that this value is count.

85
00:04:54.510 --> 00:04:55.240
Yeah.

86
00:04:55.240 --> 00:04:57.910
&gt;&gt; Does it know that because
you put 0 on the useState?

87
00:04:57.910 --> 00:05:01.630
&gt;&gt; Yep, yep, which you're setting up
a nice segue for the next section.

88
00:05:01.630 --> 00:05:06.218
It's like, what happens if I don't have
a value yet, right, or other situations?

89
00:05:06.218 --> 00:05:09.929
When TypeScript can't figure stuff out for
us, is when we have to step in, and

90
00:05:09.929 --> 00:05:12.700
we'll talk about what those cases are and
how to step in.

91
00:05:12.700 --> 00:05:13.716
Yeah.
&gt;&gt; Quick question.

92
00:05:13.716 --> 00:05:19.717
So you're explicitly taking count in and
setCount.

93
00:05:19.717 --> 00:05:23.462
Is it an equivalent to prevent race
conditions around previous state

94
00:05:23.462 --> 00:05:24.241
kinda thing?

95
00:05:24.241 --> 00:05:29.105
&gt;&gt; Basically, it's also nice cuz it
gives me a bunch of options, right?

96
00:05:29.105 --> 00:05:31.685
So the question was,
does this prevent a race condition?

97
00:05:31.685 --> 00:05:39.601
If I had a fictitious, Count + 1,
and then you know what?

98
00:05:39.601 --> 00:05:42.166
Let's just do it three more times.

99
00:05:42.166 --> 00:05:43.547
Do you know what my new count will be?

100
00:05:43.547 --> 00:05:44.566
&gt;&gt; 1.

101
00:05:44.566 --> 00:05:45.814
&gt;&gt; 1, right?

102
00:05:45.814 --> 00:05:48.460
Because closure state, count was at 0.

103
00:05:48.460 --> 00:05:50.290
So it's like 0 plus 1, okay?

104
00:05:50.290 --> 00:05:51.631
0 plus 1, okay?

105
00:05:51.631 --> 00:05:54.130
0 plus 1, okay, right.

106
00:05:54.130 --> 00:05:56.350
And that seems inefficient.

107
00:05:56.350 --> 00:05:59.340
But this is not the workshop
on React performance.

108
00:05:59.340 --> 00:05:59.981
This is one on TypeScript.

109
00:05:59.981 --> 00:06:06.698
But yeah, so if I did this on
the other hand, If I am in

110
00:06:06.698 --> 00:06:13.808
any way a 10x developer is because my
multi cursor skills are incredibly strong.

111
00:06:13.808 --> 00:06:21.125
So this case, it'll be like cool, 0 plus 1
is 1, then it'll pass that value in again.

112
00:06:21.125 --> 00:06:22.267
It'll be 2, it'll be 3, right?

113
00:06:22.267 --> 00:06:26.444
And so the other nice part is that I
could, the reason I typically use it,

114
00:06:26.444 --> 00:06:29.882
I'm not usually super worried
about the race conditions.

115
00:06:29.882 --> 00:06:34.437
The reason I will use it is,
it's super easy to test,

116
00:06:37.120 --> 00:06:41.594
Not having to mount an entire, at this
point, I have to say that's the number.

117
00:06:41.594 --> 00:06:45.420
Cuz I've given TypeScript just
no clue what's going on here.

118
00:06:45.420 --> 00:06:46.637
Pulling those functions out,

119
00:06:46.637 --> 00:06:49.970
if they're a little bit more
complicated than incrementing a number.

120
00:06:49.970 --> 00:06:51.890
This is a JavaScript function.

121
00:06:51.890 --> 00:06:54.920
JavaScript functions
are very easy to test.

122
00:06:54.920 --> 00:06:58.591
I put a parameter in,
I look at what the return value is, and

123
00:06:58.591 --> 00:07:00.580
I make sure it's what I expect.

124
00:07:00.580 --> 00:07:04.711
So if I have more complicated logic,
I'll also use that function syntax so

125
00:07:04.711 --> 00:07:08.820
that I don't have to mount a component and
fake click on things.

126
00:07:08.820 --> 00:07:11.630
I will just pull that out and
test it like that.

127
00:07:13.790 --> 00:07:20.135
Cool, but everything is handled for
us and life is good.

