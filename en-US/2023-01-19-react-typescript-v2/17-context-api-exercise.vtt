WEBVTT

1
00:00:00.143 --> 00:00:04.329
And so the cool part, you can also do some
interesting things like give yourself

2
00:00:04.329 --> 00:00:08.327
custom hooks as well that are wrapped
around this, you don't actually have

3
00:00:08.327 --> 00:00:12.528
to pull in dispatch either, and that'll
all theoretically work as expected.

4
00:00:12.528 --> 00:00:16.578
But we do have to do a little
bit of what I think is fair to

5
00:00:16.578 --> 00:00:21.269
define as shenanigans in order
to get the context API to work.

6
00:00:21.269 --> 00:00:26.708
Now again, for those of you who
agree with me in the chat and

7
00:00:26.708 --> 00:00:32.936
in the room, that forcing it is not great,
but maybe acceptable.

8
00:00:32.936 --> 00:00:35.054
We will look at another option and
the other way.

9
00:00:35.054 --> 00:00:40.672
But what I would challenge you to
do is we have another example,

10
00:00:40.672 --> 00:00:42.793
the packing lists app.

11
00:00:42.793 --> 00:00:44.170
They'll show you real quick.

12
00:00:47.791 --> 00:00:49.581
Where you're gonna try it out.

13
00:00:49.581 --> 00:00:56.315
The twist on the theme this time is
that it's just gonna use, use state.

14
00:00:56.315 --> 00:00:58.919
So same idea, but instead of dispatch,
we're gonna use state.

15
00:00:58.919 --> 00:01:02.567
The nice part is it does save you from
having to do that React at dispatch.

16
00:01:02.567 --> 00:01:08.551
React.setstate action and then the type,
because you're just gonna pass.

17
00:01:08.551 --> 00:01:11.081
But you'll have to do it
in the context once, but

18
00:01:11.081 --> 00:01:13.073
then you'll kind of have it in place.

19
00:01:13.073 --> 00:01:17.568
The only thing that I need to call out is
that there is a with TypeScript branch

20
00:01:17.568 --> 00:01:18.841
that you have to use.

21
00:01:18.841 --> 00:01:22.884
This is an application that was in case we
felt like pointing out from JavaScript to

22
00:01:22.884 --> 00:01:26.652
TypeScript also existed, but there is
one with TypeScript totally set up.

23
00:01:30.599 --> 00:01:34.796
So if you look in here,
I did some of the setup already,

24
00:01:34.796 --> 00:01:40.479
just simply cuz no one needs to watch
me retype the same stuff I just typed.

25
00:01:40.479 --> 00:01:42.293
So I've got the createContext,

26
00:01:42.293 --> 00:01:46.649
it started out with a null I've got
the provider set up, just triple checking.

27
00:01:46.649 --> 00:01:49.658
It is wrapped around the index component.

28
00:01:49.658 --> 00:01:53.493
Most of the non-type script
parts are set up for us.

29
00:01:53.493 --> 00:01:57.413
So now, we can kind of do the other piece,

30
00:01:57.413 --> 00:02:04.245
which is I can pull in all of these
helper methods that I'll need as well,

31
00:02:04.245 --> 00:02:08.949
and we can say that this
will start out as initial or

32
00:02:08.949 --> 00:02:12.207
getinitial state initial items.

33
00:02:12.207 --> 00:02:15.169
Cool, and so like that is,
you know, the initial part.

34
00:02:15.169 --> 00:02:18.886
None of this is hooked up to anything and
still no getting passed through and

35
00:02:18.886 --> 00:02:21.836
all those things but
like the non TypeScript parts of this,

36
00:02:21.836 --> 00:02:25.730
other than the fact that they use state
for having an array that we saw earlier,

37
00:02:25.730 --> 00:02:27.812
but actually this returns an item array.

38
00:02:27.812 --> 00:02:32.521
So like if you had a function that always
promise that it was gonna return not

39
00:02:32.521 --> 00:02:36.408
promises a tricky word not return
a promise that has like, but

40
00:02:36.408 --> 00:02:40.168
then TypeScript would then cast
it in just as we saw before.

41
00:02:40.168 --> 00:02:43.164
But just to be explicit, here it is.

42
00:02:43.164 --> 00:02:46.509
So that's the context of that
we just saw a second ago.

43
00:02:46.509 --> 00:02:51.375
Let's pull in the state management pieces
from application, because we're going

44
00:02:51.375 --> 00:02:55.086
to move it in here that's already
in place, but we'll grab it.

45
00:02:55.086 --> 00:03:01.411
And these are all the things that
we're gonna pull out as well.

46
00:03:01.411 --> 00:03:06.429
And I'm not gonna save the file yet
because it's gonna start crashing stuff,

47
00:03:06.429 --> 00:03:08.725
but we can pull it in to context TSX.

48
00:03:10.843 --> 00:03:16.021
And just make it available, so we can stop
the prop drilling and paste it all in.

49
00:03:16.021 --> 00:03:20.546
Now there is a little surprise in there.

50
00:03:20.546 --> 00:03:22.563
You're staring closely enough and
you can see it.

51
00:03:22.563 --> 00:03:26.374
If not,
I will make it obvious to you in a moment.

52
00:03:26.374 --> 00:03:29.239
But we have this in place and so
we've got all these features.

53
00:03:29.239 --> 00:03:33.289
So now what we really want to
do is be able to kind of like

54
00:03:33.289 --> 00:03:36.261
pass those through all of the context.

55
00:03:36.261 --> 00:03:41.005
So really before when we were just
using the reducer use, reducer.

56
00:03:41.005 --> 00:03:46.317
There's just one dispatch right because
like we can't just batch all sorts

57
00:03:46.317 --> 00:03:51.632
of different actions, we need to have
like some kind of method for each one.

58
00:03:51.632 --> 00:03:57.384
We need some way of like
bundling these all together

59
00:03:57.384 --> 00:04:02.885
in order to thread them
through the context API.

60
00:04:02.885 --> 00:04:07.684
So we can say in this case we'll say like
const value because that's gonna be we

61
00:04:07.684 --> 00:04:09.878
pass into the provider down there.

62
00:04:09.878 --> 00:04:14.310
And we'll say that this is like items,
and it's our unpacked items.

63
00:04:14.310 --> 00:04:18.868
Packed items, and we've got

64
00:04:18.868 --> 00:04:23.789
was it add, update, remove and

65
00:04:23.789 --> 00:04:29.269
then mark all as unpacked, right?

66
00:04:29.269 --> 00:04:31.482
We'll take a look at the second.

67
00:04:31.482 --> 00:04:36.506
To mark all is unpacked, so
that'll be everything bundled

68
00:04:36.506 --> 00:04:40.934
together real nicely, and
we can pass it in to here.

69
00:04:40.934 --> 00:04:45.860
This is where the yelling starts, because
it's like, yo, you told me value is null.

70
00:04:45.860 --> 00:04:47.843
Yeah, that's true.

71
00:04:47.843 --> 00:04:53.087
So here we'll say, but as what?

72
00:04:53.087 --> 00:04:59.018
Before I could just say dispatch with
the action types, here I can't write.

73
00:04:59.018 --> 00:05:03.247
This is one of the reasons like I like
use reducer a lot, especially because

74
00:05:03.247 --> 00:05:07.091
the number of things I'm doing like
this is a case where again like.

75
00:05:07.091 --> 00:05:10.153
I might have reached already wanted
to show you both because like,

76
00:05:10.153 --> 00:05:13.881
sometimes you fight the army, you fight
the battle, the army you have, right?

77
00:05:13.881 --> 00:05:17.876
One of things I could do is literally
again to kind of hit that running theme

78
00:05:17.876 --> 00:05:21.548
rather than wreck my head and
sit there and try to like get it right and

79
00:05:21.548 --> 00:05:22.395
watch my code.

80
00:05:22.395 --> 00:05:24.294
Now, compile the answer a lot of times.

81
00:05:24.294 --> 00:05:26.699
It's just stealing it from your own code,
right?

82
00:05:26.699 --> 00:05:29.509
Let typescript give you the answer, so

83
00:05:29.509 --> 00:05:33.695
that you can give TypeScript
the answers somewhere else.

84
00:05:33.695 --> 00:05:37.630
So we can grab this, and
I can make this his own type, right?

85
00:05:37.630 --> 00:05:38.665
I can call it.

86
00:05:47.578 --> 00:05:52.636
Now we have this, and
we can see that like this is

87
00:05:52.636 --> 00:05:58.088
verify that those are both the same thing,
right?

88
00:05:58.088 --> 00:06:01.471
Cool because we don't get a compiler.

89
00:06:01.471 --> 00:06:04.579
This is how we know that
they are both valid, and

90
00:06:04.579 --> 00:06:07.004
they are simpatico with each other.

91
00:06:07.004 --> 00:06:07.907
So that all kind of works.

92
00:06:07.907 --> 00:06:11.233
It's great like there
are fun things that you,

93
00:06:11.233 --> 00:06:15.224
if these were in the same scope,
you could do stuff like,

94
00:06:15.224 --> 00:06:20.481
I don't even know if you can write
a type inside of a, it's smaller shape.

95
00:06:20.481 --> 00:06:23.076
Yeah, I'm pretty sure, so
I'm getting yelled at, but

96
00:06:23.076 --> 00:06:25.957
I'll show you what this looks like
if it was up and out of there.

97
00:06:25.957 --> 00:06:27.059
You can say type.

98
00:06:35.710 --> 00:06:37.828
Right now, we'll figure out,
type of value.

99
00:06:48.518 --> 00:06:51.953
And you can see that that is a way to
figure out the type based on an object.

100
00:06:51.953 --> 00:06:57.449
This is a regular old JavaScript value,
it has determined the type,

101
00:06:57.449 --> 00:07:02.589
and it's allowing me to then make
a type on the fly dynamically.

102
00:07:02.589 --> 00:07:06.862
That said, we still have that closure
scope problem that we had before, so,

103
00:07:06.862 --> 00:07:07.536
both work.

104
00:07:07.536 --> 00:07:11.092
I use this a lot
especially with arrays for

105
00:07:11.092 --> 00:07:17.098
statuses we have a bunch of labels
of running, paused, terminated.

106
00:07:17.098 --> 00:07:20.423
I want those to be types, so I can make
those union types like you saw with

107
00:07:20.423 --> 00:07:23.432
the actions, but I also need them
as values that I iterate over.

108
00:07:23.432 --> 00:07:27.942
So a lot of times I'll do

109
00:07:27.942 --> 00:07:32.453
like loading, error,

110
00:07:32.453 --> 00:07:37.872
success for whatever it is.

111
00:07:37.872 --> 00:07:41.238
I do as const which means this is
an array that's never gonna change.

112
00:07:41.238 --> 00:07:43.446
It's kind of like when we saw number,
number, number.

113
00:07:43.446 --> 00:07:45.918
This is not an array
that you can push onto or

114
00:07:45.918 --> 00:07:48.880
pop off of this is a static array and
then if you did.

115
00:07:59.252 --> 00:08:02.917
You would get this full array,
but then if you did.

116
00:08:07.682 --> 00:08:10.812
That's the key of type of status, yeah.

117
00:08:10.812 --> 00:08:15.500
This will give you the full array of them
that you can kind of like pick one of in

118
00:08:15.500 --> 00:08:20.065
this case and then if you said for
a raise the keys or numbers, think I got.

119
00:08:24.533 --> 00:08:28.249
See, got a union type based
out of that array, right?

120
00:08:28.249 --> 00:08:32.581
So this is saying like go through all
the keys which are numbers 123 gives

121
00:08:32.581 --> 00:08:36.527
you a status and so now I can like
set them very clearly based on this.

122
00:08:36.527 --> 00:08:40.716
So if you have a value that you need to
use in JavaScript, and then also a type,

123
00:08:40.716 --> 00:08:43.954
you can kind of dynamically
derive the type from the value.

124
00:08:43.954 --> 00:08:46.859
It is not just a,
if you cast your types and

125
00:08:46.859 --> 00:08:50.678
values, you can also pull
types out of values as well.

126
00:08:50.678 --> 00:08:54.470
Cool, but we were gonna do the copy-paste
method for now because like,

127
00:08:54.470 --> 00:08:56.782
again, we want that in
the top level scope.

128
00:08:56.782 --> 00:09:00.948
And this also, I think is a little
bit more sane for our purposes.

129
00:09:00.948 --> 00:09:02.746
So pass it in, we say that listen,

130
00:09:02.746 --> 00:09:06.654
this is going to be everything I promise
I'm going to do it, two lines now.

131
00:09:06.654 --> 00:09:09.482
And again, we will look at another
solution to this in a second.

132
00:09:09.482 --> 00:09:12.758
But we have it in place because
like honestly, this one does work,

133
00:09:12.758 --> 00:09:15.974
like when I show you the other one
you might still choose this one,

134
00:09:15.974 --> 00:09:18.216
that's why I'm like keeping it for
a while.

135
00:09:18.216 --> 00:09:22.392
So we've got that like in place, it's
getting passed through, everything seems

136
00:09:22.392 --> 00:09:26.702
mostly good applications angry me because
I literally removed all these functions.

137
00:09:26.702 --> 00:09:31.098
So like we've got to still have to
do that refactor, absolutely, but

138
00:09:31.098 --> 00:09:34.386
we will do it with the aid
of TypeScript in this case.

139
00:09:34.386 --> 00:09:37.158
So could I?

140
00:09:37.158 --> 00:09:39.585
This was just getting items and
showing the count.

141
00:09:39.585 --> 00:09:42.868
This one has one function, could I
thread them through with use dispatch?

142
00:09:42.868 --> 00:09:43.975
I totally could.

143
00:09:43.975 --> 00:09:45.363
You can later.

144
00:09:45.363 --> 00:09:49.263
I'm gonna do the ones that have
multi depths of layers of items.

145
00:09:49.263 --> 00:09:52.465
Item list to the individual item
to actually showing that to having

146
00:09:52.465 --> 00:09:54.072
the actions on the right button.

147
00:09:54.072 --> 00:09:56.020
So I'm going to do the two item list.

148
00:09:56.020 --> 00:09:59.292
These aren't really worth it, but

149
00:09:59.292 --> 00:10:03.990
I can pull them in here,
so we'll say use context.

150
00:10:03.990 --> 00:10:07.765
Did I export everything.

151
00:10:21.092 --> 00:10:29.009
Items context here I'm gonna grab
just items add, and what's the other?

152
00:10:29.009 --> 00:10:30.316
Just mark it all is unpacked.

153
00:10:34.059 --> 00:10:36.448
Cool, so you can see these are happy.

154
00:10:36.448 --> 00:10:39.495
I don't need to pass these
props through anymore, right?

155
00:10:39.495 --> 00:10:42.953
Because I can pull them when I need them.

156
00:10:42.953 --> 00:10:44.883
Let's actually pass these in too.

157
00:10:44.883 --> 00:10:47.458
That way,
I can just reuse the same component.

158
00:10:54.022 --> 00:10:54.552
Cool.

159
00:10:54.552 --> 00:10:57.306
Still angry with me cuz it was
expecting update and remove.

160
00:10:57.306 --> 00:11:01.094
So we can say like, hey, wait, what if
you just didn't worry about this anymore?

161
00:11:05.239 --> 00:11:07.242
No, we don't have to pass him in here.

162
00:11:07.242 --> 00:11:09.449
And again,
it's kind of just following the errors.

163
00:11:09.449 --> 00:11:12.570
It's a little cathartic at times.

164
00:11:15.809 --> 00:11:19.202
Versus like, I don't have enough test,
let me keep checking and so on and so

165
00:11:19.202 --> 00:11:19.954
forth, right?

166
00:11:19.954 --> 00:11:21.905
And kind of just follow
the compile errors through.

167
00:11:26.670 --> 00:11:30.179
I don't need them here, and
keep that because we're gonna use that

168
00:11:30.179 --> 00:11:33.331
functionality and
second they don't need to be in the type.

169
00:11:33.331 --> 00:11:36.703
So now here we can do useContext,

170
00:11:48.982 --> 00:11:50.039
Let's update and remove.

171
00:11:54.071 --> 00:11:56.671
Awesome, and if we go fire up the app,

172
00:12:07.840 --> 00:12:11.896
And again, other than when I'm dealing
with third party libraries where I forget

173
00:12:11.896 --> 00:12:15.479
that they need a certain string,
will I open a pull request saying that,

174
00:12:15.479 --> 00:12:17.566
it there's no hashtag at the beginning.

175
00:12:17.566 --> 00:12:19.321
Maybe you try that first
before you blow up.

176
00:12:19.321 --> 00:12:20.503
I might later.

177
00:12:20.503 --> 00:12:26.368
Just for glory and or my own
misunderstanding of closure scope for

178
00:12:26.368 --> 00:12:28.187
a hot minute there.

179
00:12:28.187 --> 00:12:32.111
Generally speaking, I can feel confident
just in my editor without the need to,

180
00:12:32.111 --> 00:12:33.508
like, jump back and forth.

181
00:12:33.508 --> 00:12:34.593
Should you have tests?

182
00:12:34.593 --> 00:12:36.284
Absolutely, you should have tests.

183
00:12:36.284 --> 00:12:38.238
Do you need as many for
all these educations?

184
00:12:38.238 --> 00:12:41.709
I was feeling comfortable, and
a lot of times while I'm using TypeScript,

185
00:12:41.709 --> 00:12:43.780
I feel comfortable just
doing the refactor.

186
00:12:43.780 --> 00:12:47.759
So now, we can see that we can update one,
we can remove it.

187
00:12:49.353 --> 00:12:52.969
So to stream with me.

188
00:12:55.497 --> 00:12:56.577
There it is at the bottom.

189
00:12:56.577 --> 00:12:57.557
Cool, everything works.

190
00:12:57.557 --> 00:12:58.734
I can check boxes.

191
00:12:58.734 --> 00:12:59.753
I can edit a name.

192
00:13:04.728 --> 00:13:05.459
Awesome.

