WEBVTT

1
00:00:00.000 --> 00:00:04.319
Now, there are some things that we can
theoretically do to make this a little bit

2
00:00:04.319 --> 00:00:08.718
better, but they're all kinda nice to
have, this kinda gets to the main point.

3
00:00:08.718 --> 00:00:11.988
But we're gonna do something first,
which is,

4
00:00:11.988 --> 00:00:16.790
did anyone see the bad thing that I did
that I hid in there for you to find?

5
00:00:16.790 --> 00:00:18.826
It's the same bad thing I
keep hiding everywhere.

6
00:00:18.826 --> 00:00:20.580
Hey, let's look at the context.

7
00:00:20.580 --> 00:00:24.518
Yeah, right,
I think maybe I'll stop the editor, right?

8
00:00:24.518 --> 00:00:26.348
No, there it is.

9
00:00:26.348 --> 00:00:27.573
What?

10
00:00:27.573 --> 00:00:28.289
Any.

11
00:00:28.289 --> 00:00:33.725
&gt;&gt; Any, right,
which means this can be any,

12
00:00:33.725 --> 00:00:36.449
which means update.

13
00:00:36.449 --> 00:00:39.758
Who knows the ways this can mess me up?

14
00:00:39.758 --> 00:00:45.504
But this creates a somewhat
interesting problem.

15
00:00:45.504 --> 00:00:50.482
So the way that update works is it takes
an object that has the keys available

16
00:00:50.482 --> 00:00:55.315
in an object, and then it just kinda
replaces the current ones, right?

17
00:00:55.315 --> 00:01:01.778
If I turn this into Item, well,
that's gonna be problematic,

18
00:01:01.778 --> 00:01:07.415
because theoretically,
I also have to change it here.

19
00:01:07.415 --> 00:01:11.544
Yo, I fixed it in my
actual implementation, but

20
00:01:11.544 --> 00:01:13.974
you know why not blowing up?

21
00:01:13.974 --> 00:01:16.289
Cuz they spread.

22
00:01:19.341 --> 00:01:22.007
Look, now is angry at me, one any.

23
00:01:22.007 --> 00:01:26.967
All it takes is one any,
you saw it with my action earlier.

24
00:01:26.967 --> 00:01:32.429
And the way this works is we're
only replacing one property, right?

25
00:01:32.429 --> 00:01:36.654
Over here, we're just replacing the name,

26
00:01:36.654 --> 00:01:40.217
we're just replacing path, right?

27
00:01:40.217 --> 00:01:45.045
And so I want the situation
where any keys you give me

28
00:01:45.045 --> 00:01:50.448
better be on item, but
I don't need all of them, right?

29
00:01:50.448 --> 00:01:54.649
I don't wanna replace the ID of an item,
kind of person would do that.

30
00:01:54.649 --> 00:02:00.088
I just wanna say, optionally, I wanna
be replaced anything on an item, right?

31
00:02:00.088 --> 00:02:04.931
And this is where utility types, which
is just pure TypeScript come in helpful,

32
00:02:04.931 --> 00:02:07.226
but in a very specific React use case.

33
00:02:07.226 --> 00:02:10.788
So what would this look like?

34
00:02:10.788 --> 00:02:14.064
So let's go back into our context.

35
00:02:14.064 --> 00:02:17.549
And you might say that, hey, Steve,
if you had magically derived this, or

36
00:02:17.549 --> 00:02:20.669
if using useDispatch, you wouldn't
have to do this in two places.

37
00:02:20.669 --> 00:02:23.862
Yeah, you're great?

38
00:02:23.862 --> 00:02:26.860
But this is the point we see with use
state and some of the trade offs.

39
00:02:26.860 --> 00:02:33.183
So one of the things I
could do is a Partial.

40
00:02:33.183 --> 00:02:36.615
What partial does,
Partial is a utility method, right?

41
00:02:36.615 --> 00:02:39.879
You can see it by hovering over it, and

42
00:02:39.879 --> 00:02:45.185
if that stresses you out,
that's okay, it stresses me out.

43
00:02:45.185 --> 00:02:48.061
But basically, it takes all the keys in
the object, it makes them all optional.

44
00:02:48.061 --> 00:02:49.970
It's basically taking everything and

45
00:02:49.970 --> 00:02:52.928
dynamically putting a question
mark in front of all of them.

46
00:02:52.928 --> 00:02:56.692
It's built into TypeScript, I don't have
to do anything, I don't have to write it,

47
00:02:56.692 --> 00:02:57.994
it's been there for a while.

48
00:02:57.994 --> 00:03:00.448
Each new version, not each new version,

49
00:03:00.448 --> 00:03:04.738
new versions of TypeScript very
frequently have more and more of these.

50
00:03:04.738 --> 00:03:07.178
There's a one that I really
liked that came out.

51
00:03:07.178 --> 00:03:11.632
It's either coming out in 49,
or came out in 48.

52
00:03:11.632 --> 00:03:13.607
I think it's coming out in 49,
which is awaited.

53
00:03:13.607 --> 00:03:15.143
Which is if you use a weight,

54
00:03:15.143 --> 00:03:19.180
it's like this is either the promise
that we're awaiting or is the value.

55
00:03:19.180 --> 00:03:21.691
And it just does all of that for you.

56
00:03:21.691 --> 00:03:24.917
Cuz previously, I think even when we
did a previous version, of course,

57
00:03:24.917 --> 00:03:27.259
figuring out whether or
not something was a promise,

58
00:03:27.259 --> 00:03:29.563
you had to check for
then method and stuff like that.

59
00:03:29.563 --> 00:03:33.669
It was not easy, and there's been a lot of
abstractions that make that a lot better.

60
00:03:33.669 --> 00:03:36.352
I have a custom one in my
code base that I hate, and

61
00:03:36.352 --> 00:03:41.141
I'm waiting until we upgrade to 49, yeah,
that's what it is, before I can use it.

62
00:03:41.141 --> 00:03:43.164
So this makes them all optional.

63
00:03:43.164 --> 00:03:47.325
But what if you wanted to say,
all of them optional but

64
00:03:47.325 --> 00:03:50.389
I better not see an ID in there, right?

65
00:03:50.389 --> 00:03:53.875
This is where more utility
types come in handy.

66
00:03:53.875 --> 00:03:57.287
So we could say Omit.

67
00:03:57.287 --> 00:03:59.404
And if I just put it around Item,
it would just take it out Item.

68
00:03:59.404 --> 00:04:01.575
But this is omitting the partial one,
right?

69
00:04:01.575 --> 00:04:04.416
So I can say Omit, and I can say id.

70
00:04:04.416 --> 00:04:09.193
And if I grab this real quick,
we can see kind of break it out so

71
00:04:09.193 --> 00:04:11.648
we can just hover over and see.

72
00:04:11.648 --> 00:04:19.293
So we'll say, PartialItem,
We'll just grab that first part.

73
00:04:21.391 --> 00:04:27.194
And it will say type Partial,

74
00:04:32.853 --> 00:04:34.868
Omit.

75
00:04:34.868 --> 00:04:40.592
This is great way, is like not
re-type stuff all over the place,

76
00:04:40.592 --> 00:04:45.084
PartialItem, and then but
don't include the id.

77
00:04:45.084 --> 00:04:49.746
So if you look at PartialItem, these
can all be either a string or undefined

78
00:04:49.746 --> 00:04:54.563
versus the regular item, that was not
the case for, they all had to be there.

79
00:04:54.563 --> 00:04:58.898
And WithoutId, it says,
but not the id, right?

80
00:04:58.898 --> 00:05:00.832
There's a bunch of these.

81
00:05:00.832 --> 00:05:05.714
It is not the best use of our time
in a workshop on how React and

82
00:05:05.714 --> 00:05:08.069
TypeScript play together.

83
00:05:08.069 --> 00:05:11.822
They have it written up, you can go take a
look at it on the documentation I put for

84
00:05:11.822 --> 00:05:12.612
this workshop.

85
00:05:12.612 --> 00:05:16.832
Absolutely, do I remember
all of them all the time?

86
00:05:16.832 --> 00:05:18.792
No, is it important?

87
00:05:18.792 --> 00:05:21.276
Or if you're doing something squarely or
copy base,

88
00:05:21.276 --> 00:05:24.878
it'd be like I should see what the latest
set cuz they do update a lot, right?

89
00:05:24.878 --> 00:05:30.387
There are new ones in many of the point
releases, not just 3.0, 4.0, 5.0, but like

90
00:05:30.387 --> 00:05:35.086
in each new release, some new ones come
out that solve a lot of common problems.

91
00:05:35.086 --> 00:05:40.302
So in a lot of these cases, if you need
to do something special like that,

92
00:05:40.302 --> 00:05:45.533
you can reach for some of these to kind
of create new types on your behalf.

93
00:05:45.533 --> 00:05:48.931
So what I'm gonna say is cool,

94
00:05:48.931 --> 00:05:54.551
any of the properties that
are on an item but not ID,

95
00:05:54.551 --> 00:05:59.679
I should be able to use
this now in both places.

96
00:06:02.957 --> 00:06:06.230
Yep, cuz it's not getting the right thing,
so I just gotta swap it in here.

97
00:06:06.230 --> 00:06:08.989
And my code compiles, and
now it's a lot safer,

98
00:06:08.989 --> 00:06:11.626
I don't have that any
infecting everything.

99
00:06:11.626 --> 00:06:15.637
But I also didn't have to go and
statically make another type again,

100
00:06:15.637 --> 00:06:20.490
cuz you can imagine that's well and good
in a stupid little example app, totally.

101
00:06:20.490 --> 00:06:22.486
All of a sudden, one thing changes, and

102
00:06:22.486 --> 00:06:25.857
you've hard coded all these
different sets of values everywhere.

103
00:06:25.857 --> 00:06:26.703
It's not great, right?

104
00:06:26.703 --> 00:06:29.005
So letting the type system, and

105
00:06:29.005 --> 00:06:33.104
you'll notice that React has
done a bunch of this for us.

106
00:06:33.104 --> 00:06:35.166
It's how props with children works, right?

107
00:06:35.166 --> 00:06:38.889
It was like, cool,
take whatever it had and jam on children.

108
00:06:38.889 --> 00:06:41.850
That is React.ReactNode, right?

109
00:06:41.850 --> 00:06:44.080
We used these already in prior examples,

110
00:06:44.080 --> 00:06:46.700
we just didn't really talk about them,
right?

111
00:06:46.700 --> 00:06:49.321
And having some of those variables
being able to pass in, right,

112
00:06:49.321 --> 00:06:50.857
it's kinda what set state was doing.

113
00:06:50.857 --> 00:06:53.350
It's like, hey, OU state, right?

114
00:06:53.350 --> 00:06:56.646
It tried to derive the value,
if not, we could pass one in.

115
00:06:56.646 --> 00:06:58.884
That's very much what we're
doing with our Partial, right?

116
00:06:58.884 --> 00:07:01.730
We're making a new type based
on some other information.

