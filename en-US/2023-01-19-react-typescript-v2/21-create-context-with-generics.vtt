WEBVTT

1
00:00:01.267 --> 00:00:06.232
Now that we know a little bit more
about generics, we're gonna look at one

2
00:00:06.232 --> 00:00:11.296
way to solve for that createContext issue
where we had to use as to force it.

3
00:00:11.296 --> 00:00:16.251
Pulling together a lot of the things
that we've all picked up over

4
00:00:16.251 --> 00:00:19.584
the course in the last
few hours together and

5
00:00:19.584 --> 00:00:23.660
kind of pulled them together to solve for
this issue.

6
00:00:23.660 --> 00:00:29.145
Now that we're armed with generics and
we can take a run at it.

7
00:00:29.145 --> 00:00:33.215
So I have this in place for now,
I'm gonna leave this code here for

8
00:00:33.215 --> 00:00:35.217
a second until it gets in my way.

9
00:00:35.217 --> 00:00:37.444
One of the things, actually, why don't I,

10
00:00:37.444 --> 00:00:40.563
I'm gonna make myself a fresh
file somewhere right next to it.

11
00:00:40.563 --> 00:00:47.432
I'm gonna make my own createContext, File.

12
00:00:47.432 --> 00:00:49.084
Look at that.

13
00:00:49.084 --> 00:00:51.261
I'm only getting yelled at cuz
it doesn't like empty files.

14
00:00:51.261 --> 00:00:54.492
That's fine,
I will make it not empty soon.

15
00:00:54.492 --> 00:00:57.446
So, why right now?

16
00:00:57.446 --> 00:00:59.528
There we go, create context.

17
00:01:01.416 --> 00:01:03.766
This is gonna be in addition to React.

18
00:01:03.766 --> 00:01:08.350
And sometimes this is a useful
technique for other things as well.

19
00:01:08.350 --> 00:01:09.643
Let's actually call it the right thing.

20
00:01:11.053 --> 00:01:13.544
Talking and coding, createContext.

21
00:01:15.621 --> 00:01:19.174
Awesome, everything's happy with me again.

22
00:01:19.174 --> 00:01:23.932
There's some leftover stuff
from previous typing, okay.

23
00:01:23.932 --> 00:01:29.126
So, we want to be able to
basically know about what the type

24
00:01:29.126 --> 00:01:35.489
should be at the same time that we
have the information available to us.

25
00:01:35.489 --> 00:01:39.107
So like I said, this is gonna pull
in a bunch of different concepts,

26
00:01:39.107 --> 00:01:42.862
most notably it's gonna pull in what
we just learned about generics.

27
00:01:42.862 --> 00:01:47.677
It's also gonna pull in what we learned
about reducing some of the cases, right?

28
00:01:47.677 --> 00:01:52.325
We saw the action type which is the more
of them that we call it out and

29
00:01:52.325 --> 00:01:57.729
then return values from the less options
TypeScript thought it had, right?

30
00:01:57.729 --> 00:02:02.682
So really what we need is a way that
if it didn't know what properties were

31
00:02:02.682 --> 00:02:06.579
on this object,
that by the time this function returns,

32
00:02:06.579 --> 00:02:10.335
it is confident, right,
that it has the right thing.

33
00:02:10.335 --> 00:02:13.614
And there are some trade-offs here,
and we can talk about them.

34
00:02:13.614 --> 00:02:17.261
There was a perfect solution.

35
00:02:17.261 --> 00:02:23.134
I would argue that, like most things,
the way I feel about performance,

36
00:02:23.134 --> 00:02:26.354
if there was a you should always do this,

37
00:02:26.354 --> 00:02:30.825
they would have just put it
into the framework, right?

38
00:02:30.825 --> 00:02:33.062
Everything they could have put
into a microchip, they did.

39
00:02:33.062 --> 00:02:36.785
And every level of abstraction up, we're
only left with the weird edge cases and

40
00:02:36.785 --> 00:02:39.149
the specific applications
of that at the very end.

41
00:02:39.149 --> 00:02:42.916
So welcome to being a software engineer,
what do want me to say?

42
00:02:42.916 --> 00:02:47.744
But the goal here is to kinda use a bunch
of these different concepts to come up

43
00:02:47.744 --> 00:02:52.269
with a situation where it's like,
all right, here's the context and

44
00:02:52.269 --> 00:02:54.473
I know that the value is what it is.

45
00:02:54.473 --> 00:02:58.397
So, we're gonna use a generic here,
we'll call it T,

46
00:02:58.397 --> 00:03:00.747
you can call it C if you wanted to.

47
00:03:00.747 --> 00:03:03.262
I don't know, whatever.

48
00:03:03.262 --> 00:03:04.509
I'm gonna do in the color app.

49
00:03:04.509 --> 00:03:08.353
It actually, literally this technique,
I could have pulled up any app,

50
00:03:08.353 --> 00:03:09.912
it wouldn't really matter.

51
00:03:09.912 --> 00:03:13.948
I'm gonna do it in the color app cuz I
should fix it in the way I did it and

52
00:03:13.948 --> 00:03:17.506
then implement stuffs in the items app so
you can do it there.

53
00:03:17.506 --> 00:03:20.659
But it's gonna be the same in both apps,
so, doesn't matter.

54
00:03:20.659 --> 00:03:25.603
So we're gonna have this T, and the only
thing I really care is we saw that value,

55
00:03:25.603 --> 00:03:28.604
every time that we used it was an object,
right?

56
00:03:28.604 --> 00:03:33.268
But it was either wrapping all the stuff
for the items in that packing list app,

57
00:03:33.268 --> 00:03:37.237
it was either wrapping the hex color and
other stuff there as well.

58
00:03:37.237 --> 00:03:38.961
So I think that's a fine heuristic.

59
00:03:38.961 --> 00:03:40.166
We're gonna say T.

60
00:03:40.166 --> 00:03:43.638
But I don't want to deal with undefined or
no or anything like that.

61
00:03:43.638 --> 00:03:46.717
I wanna at least assume that I'm
gonna get some kind of object,

62
00:03:46.717 --> 00:03:48.236
even if it's an empty object.

63
00:03:48.236 --> 00:03:49.991
I wanna assume that this
is some kinda object,

64
00:03:49.991 --> 00:03:51.529
even if I don't know anything about it.

65
00:03:51.529 --> 00:03:56.249
So let's say that T extends
some kind of object, right?

66
00:03:56.249 --> 00:04:00.574
The very least,
it could have more keys in this object.

67
00:04:00.574 --> 00:04:03.214
But it at least as to have
that rough shape to it.

68
00:04:03.214 --> 00:04:04.798
That feels like a fair
constraint to put on.

69
00:04:04.798 --> 00:04:07.802
They're tacked into the context API,
you can undefined,

70
00:04:07.802 --> 00:04:09.674
I don't know if you can put it a null.

71
00:04:09.674 --> 00:04:10.441
Yeah, yeah, I did earlier.

72
00:04:10.441 --> 00:04:11.804
You can put it in null.

73
00:04:11.804 --> 00:04:14.500
But we're gonna say that if we're
gonna go through all this work,

74
00:04:14.500 --> 00:04:17.017
it's gonna be something that we
can swap values in and out of.

75
00:04:17.017 --> 00:04:19.454
It was just a static value, like a string,

76
00:04:19.454 --> 00:04:22.037
that we don't need to do this at all,
right?

77
00:04:22.037 --> 00:04:25.501
We only need to do this cuz we didn't have
dispatch of the key on that object yet,

78
00:04:25.501 --> 00:04:26.653
or setState or whatever.

79
00:04:26.653 --> 00:04:31.772
So let's assume that we're pulling out
this trick, it's gonna be an object.

80
00:04:31.772 --> 00:04:34.725
So that's step one.

81
00:04:34.725 --> 00:04:36.543
So then we wanna create a context.

82
00:04:36.543 --> 00:04:41.344
I'm gonna not pull things off of
React because if I say import in

83
00:04:41.344 --> 00:04:44.515
curly braces createContext from React,

84
00:04:44.515 --> 00:04:49.406
I'm gonna just recreate that bug
I had with RGB in the color app,

85
00:04:49.406 --> 00:04:53.953
except maybe redefining a constant,
I'll get yelled at.

86
00:04:53.953 --> 00:04:58.158
And I don't feel like coming
up with a new name for this.

87
00:04:58.158 --> 00:05:03.343
So we'll say, we'll make a context
inside this closure scope,

88
00:05:03.343 --> 00:05:05.901
right, inside this function.

89
00:05:05.901 --> 00:05:10.844
And we'll say, we'll make a context,
before I called it colorContext or

90
00:05:10.844 --> 00:05:13.596
itemContext, this is a generic helper.

91
00:05:13.596 --> 00:05:21.118
We'll say it is React.createContext.

92
00:05:21.118 --> 00:05:26.257
And we're gonna say that
we're gonna give you

93
00:05:26.257 --> 00:05:31.130
a type that is either
the one that we want with

94
00:05:31.130 --> 00:05:36.271
everything batteries included, dispatch,

95
00:05:36.271 --> 00:05:42.353
all the fun stuff, or,
this guy again on the generic.

96
00:05:42.353 --> 00:05:46.257
It's either gonna be T or
it's gonna be undefined, right,

97
00:05:46.257 --> 00:05:50.856
which is what we did, we either put
an empty object or we did something.

98
00:05:50.856 --> 00:05:52.917
It doesn't really matter, right?

99
00:05:52.917 --> 00:05:58.335
The other half of this or statement
could probably be anything you wanted,

100
00:05:58.335 --> 00:06:00.925
because we're gonna figure that.

101
00:06:00.925 --> 00:06:02.639
Undefined is nice and easy to check for.

102
00:06:02.639 --> 00:06:06.315
So we'll go with that one, you could put,
if I put a nan, I don't know.

103
00:06:06.315 --> 00:06:09.996
We'll say it's either the one we want or
it's undefined,

104
00:06:09.996 --> 00:06:14.640
which is not totally different than
the problem statement we had earlier.

105
00:06:14.640 --> 00:06:19.606
And for now, We're

106
00:06:19.606 --> 00:06:24.203
gonna say it's undefined.

107
00:06:24.203 --> 00:06:32.138
Now, I need to make the like
abbreviation second.

108
00:06:32.138 --> 00:06:35.572
I get bitten by it all the time,
it's never the day I wanna do it.

109
00:06:35.572 --> 00:06:38.816
Maybe tonight is the day I wanna do it,
we'll see.

110
00:06:38.816 --> 00:06:42.408
Cool, so we've got this context.

111
00:06:42.408 --> 00:06:49.335
And now this could be anything,
we don't know what it is yet.

112
00:06:49.335 --> 00:06:55.103
And so what we wanna say is,
we also need a useContext.

113
00:06:55.103 --> 00:06:58.868
We basically need to create our own
createContext and our own useContext.

114
00:06:58.868 --> 00:07:01.485
And they also need to live in
this little encapsulated bubble.

115
00:07:01.485 --> 00:07:05.418
Cuz the problem we had before is,

116
00:07:05.418 --> 00:07:10.345
if you remember, we had context up here.

117
00:07:10.345 --> 00:07:14.906
And that was fine cuz we
can then export stuff.

118
00:07:14.906 --> 00:07:18.755
So we had context up here and that was
fine, cuz then we could export stuff.

119
00:07:18.755 --> 00:07:26.527
But then we can only make the hooks
inside of a React component.

120
00:07:26.527 --> 00:07:28.284
So the fact that they couldn't exist.

121
00:07:28.284 --> 00:07:32.511
Now, in here, we've got a function
scope that is encapsulated, right?

122
00:07:32.511 --> 00:07:35.363
And then we can package
up in certain places.

123
00:07:35.363 --> 00:07:38.670
And so what we can do is let's create
our own useContext hook here too.

124
00:07:41.811 --> 00:07:47.620
All right, and useContext,
this is gonna be kind of a wrapper

125
00:07:47.620 --> 00:07:52.553
around the one in React,
just like this is, right?

126
00:07:52.553 --> 00:07:55.278
We're basically using closure
scope to solve our own problems,

127
00:07:55.278 --> 00:07:57.320
even though it created problems for
me earlier.

128
00:07:57.320 --> 00:08:00.174
And I've forgiven it.

129
00:08:00.174 --> 00:08:04.514
So we'll say that we'll have,
I got to call it something.

130
00:08:04.514 --> 00:08:10.409
We'll say, calling it lowercase
context will confuse everyone.

131
00:08:10.409 --> 00:08:11.359
It'll make us all sad.

132
00:08:11.359 --> 00:08:17.387
I can't say uppercase and
lowercase letters with words.

133
00:08:17.387 --> 00:08:24.333
So we'll say useContext
with this one up here.

134
00:08:24.333 --> 00:08:29.220
So, this one implicitly already
knows without any module exports,

135
00:08:29.220 --> 00:08:34.202
before we had an export itemContext,
we had an export colorContext.

136
00:08:34.202 --> 00:08:37.476
And then in the one we pulled in React and
we pulled in other context.

137
00:08:37.476 --> 00:08:42.585
Here, we have the advantage of,
we don't necessarily have to do that

138
00:08:42.585 --> 00:08:47.523
because we are living inside of
a function and we don't get yelled at

139
00:08:47.523 --> 00:08:52.482
by React about using hooks outside
of function, so on and so forth.

140
00:08:52.482 --> 00:08:54.386
So we've got that in place.

141
00:08:54.386 --> 00:08:59.224
And so you're like,
okay, cool, cool, cool,

142
00:08:59.224 --> 00:09:03.716
what if I, no,
we don't need that in braces,

143
00:09:03.716 --> 00:09:07.880
useContext, it's just that one, yeah.

144
00:09:07.880 --> 00:09:11.330
useContext, we'll have the CTS [SOUND].

145
00:09:11.330 --> 00:09:18.085
And then ideally return the context,
you'll see why this blob at me a second.

146
00:09:22.575 --> 00:09:27.481
And then what we're gonna do
is find a nice way to say,

147
00:09:27.481 --> 00:09:32.060
I wanna be able to give you
that useContext hook and

148
00:09:32.060 --> 00:09:37.187
the context provider so
we can wrap our application with

149
00:09:37.187 --> 00:09:42.993
in one package that you could
import everywhere that you want.

150
00:09:42.993 --> 00:09:47.610
You should spell return right,
that's key to making this work.

151
00:09:47.610 --> 00:09:51.683
Right now, this could still be,
it's almost there.

152
00:09:51.683 --> 00:09:53.989
There's a few little tweaks we need to do.

153
00:09:53.989 --> 00:09:56.164
We're gonna have some kinda T,

154
00:09:56.164 --> 00:10:01.012
it looks like we're gonna have an array
that could be a bunch of things.

155
00:10:01.012 --> 00:10:05.840
It could be a function that
returns context or undefined,

156
00:10:05.840 --> 00:10:10.774
that's our useContext hook,
or you could come back here.

157
00:10:10.774 --> 00:10:15.721
Or it could have a React provider that
is T or undefined, and that will be

158
00:10:15.721 --> 00:10:21.170
an array of infinite number of these
useContact hooks and context providers.

159
00:10:21.170 --> 00:10:24.373
Well, one,
we know that if we can lock down an array,

160
00:10:24.373 --> 00:10:27.519
it's not an infinite array
of any of these, right?

161
00:10:27.519 --> 00:10:30.485
It can be a static, two things.

162
00:10:30.485 --> 00:10:33.618
The first one is this,
the second one is that.

163
00:10:33.618 --> 00:10:36.052
That's just simply putting.

164
00:10:36.052 --> 00:10:38.774
So now this is not an array
of many of these things.

165
00:10:38.774 --> 00:10:42.610
It is an array, just like useState,
the first thing is always the state, and

166
00:10:42.610 --> 00:10:44.391
the second one is always setState.

167
00:10:44.391 --> 00:10:47.623
Here, we're gonna say
now if we hover over it.

168
00:10:47.623 --> 00:10:50.098
Okay, cool.
This is getting better already.

169
00:10:50.098 --> 00:10:53.095
Still, we haven't solved
the core problem yet.

170
00:10:53.095 --> 00:10:56.051
We've just moved the problem
around a little bit.

171
00:10:56.051 --> 00:11:01.019
And so here we have, all right, we've got
to, it should extend some kind of object,

172
00:11:01.019 --> 00:11:05.854
right, and it's gonna return,
there's two element, arrays, tuple, tuple.

173
00:11:05.854 --> 00:11:09.071
I have never decided which one I like,
they're both are appropriate to say.

174
00:11:09.071 --> 00:11:13.413
I think I'm gonna say tuple cuz I'm
from New Jersey and it just feels right.

175
00:11:13.413 --> 00:11:18.456
The first one is affectively the same
signature as a useContext hoop or

176
00:11:18.456 --> 00:11:21.199
the value of the useContext, right?

177
00:11:21.199 --> 00:11:27.819
It's T or undefined, which is, okay,
and the provider has T or undefined.

178
00:11:27.819 --> 00:11:32.184
So we know if we can end one
of these branch timelines,

179
00:11:32.184 --> 00:11:36.069
we can eliminate one of these options,
right?

180
00:11:36.069 --> 00:11:40.078
And so really I wanted to say,
yo, this is always gonna be T and

181
00:11:40.078 --> 00:11:44.341
I want you to feel confident that
it's always gonna be T, right?

182
00:11:44.341 --> 00:11:48.637
And previously the way we've done that
is return out early with a different jsx

183
00:11:48.637 --> 00:11:50.471
element or something like that.

184
00:11:50.471 --> 00:11:55.035
Unfortunately, if we return out early and
we don't have a value,

185
00:11:55.035 --> 00:11:57.163
that doesn't do us much good.

186
00:11:57.163 --> 00:12:01.951
So the question is, and
this is a JavaScript meditation for

187
00:12:01.951 --> 00:12:06.665
a hot minute, and 50 points for
anyone who can guess it.

188
00:12:06.665 --> 00:12:11.009
There are three ways to get
out of a function, one,

189
00:12:11.009 --> 00:12:14.149
you run out of code, like line 13.

190
00:12:14.149 --> 00:12:17.646
That's one way to end a function,
get to the bottom of it.

191
00:12:17.646 --> 00:12:22.960
Line 12 is the second way to get
out of a function, return, right?

192
00:12:22.960 --> 00:12:26.148
I could return on line five and
be out, right?

193
00:12:26.148 --> 00:12:31.007
There is a third way to get
out of a function that does

194
00:12:31.007 --> 00:12:33.383
not have a return value.

195
00:12:33.383 --> 00:12:35.464
&gt;&gt; Break?

196
00:12:35.464 --> 00:12:36.755
&gt;&gt; I think break gets you in a loop.

197
00:12:36.755 --> 00:12:39.075
I don't think break gets
you out of a function.

198
00:12:39.075 --> 00:12:39.719
&gt;&gt; Throw?

199
00:12:39.719 --> 00:12:40.771
&gt;&gt; Throw, yeah.

200
00:12:40.771 --> 00:12:45.119
If I throw an error and
I don't catch it, out we go, right?

201
00:12:45.119 --> 00:12:49.374
So what I can do is say like,
and listen, if for some way,

202
00:12:49.374 --> 00:12:53.750
somehow, have error boundaries
set up in your React app.

203
00:12:53.750 --> 00:12:59.190
If [INAUDIBLE] yield,
I think only gets me out of a generator.

204
00:12:59.190 --> 00:13:03.271
Throw and error is, in my opinion,

205
00:13:03.271 --> 00:13:06.952
the best way to do this, right?

206
00:13:06.952 --> 00:13:10.090
So we're saying there
shouldn't be a world,

207
00:13:10.090 --> 00:13:13.398
we saw it before where
our context is undefined.

208
00:13:13.398 --> 00:13:17.928
If so, let's deal with that, right, and
say that we are going to hit an error

209
00:13:17.928 --> 00:13:22.670
boundary, catch that error somewhere,
deal with our application code to say,

210
00:13:22.670 --> 00:13:25.945
if you use this,
we will confirm that T exists so that for

211
00:13:25.945 --> 00:13:29.604
the rest of our application,
you can also know that T exists.

212
00:13:29.604 --> 00:13:34.577
So we'll say if ctx, I'm not gonna talk

213
00:13:34.577 --> 00:13:39.112
ill of the Go programming language,

214
00:13:39.112 --> 00:13:43.660
I don't like short variable names.

215
00:13:43.660 --> 00:13:45.404
I don't even like it in my types.

216
00:13:45.404 --> 00:13:48.980
It's the convention, I live with it.

217
00:13:48.980 --> 00:13:50.582
For me, I'm cool with a variable name.

218
00:13:50.582 --> 00:13:52.450
That's 42 characters long.

219
00:13:52.450 --> 00:13:55.985
I have autocomplete,
you know that I like my autocomplete.

220
00:13:55.985 --> 00:14:00.086
All right, so if ctx is undefined,

221
00:14:00.086 --> 00:14:05.008
right, then what we're gonna say is, and

222
00:14:05.008 --> 00:14:09.268
you can get as fancy as you want here.

223
00:14:09.268 --> 00:14:11.727
I'm gonna make this a template string.

224
00:14:19.843 --> 00:14:24.539
The most likely case of this happens is
the value never got passed in when we set

225
00:14:24.539 --> 00:14:25.414
it up before.

226
00:14:33.663 --> 00:14:35.800
I've seen worse error messages in my life.

227
00:14:41.353 --> 00:14:44.825
Cool, so now we're gonna create
the context, we're gonna see,

228
00:14:44.825 --> 00:14:46.874
did anything come out of this context?

229
00:14:46.874 --> 00:14:51.694
If something came out and
it's not undefined, and we get past,

230
00:14:51.694 --> 00:14:55.363
really depends on what we
want to say we get past.

231
00:14:55.363 --> 00:14:58.322
Don't wanna say we get past,
either we get past,

232
00:14:58.322 --> 00:15:03.331
the condition where we get past the throw,
it's really a philosophical question.

233
00:15:03.331 --> 00:15:07.598
But if we get through this
conditional statement, right,

234
00:15:07.598 --> 00:15:10.425
cuz up here, ctx, it's T undefined.

235
00:15:10.425 --> 00:15:16.524
We're saying, you, if you're undefined,
yell at the person writing the code,

236
00:15:16.524 --> 00:15:22.295
get out, which means by the time we get
here, it can only be one thing, right?

237
00:15:22.295 --> 00:15:29.658
So now, if we hover over this, this is a
useContext function that will give you T,

238
00:15:29.658 --> 00:15:35.022
it'll throw and
the provider itself can be T or undefined.

239
00:15:35.022 --> 00:15:38.314
But we know that when you
pull the value out of this,

240
00:15:38.314 --> 00:15:40.624
we're gonna be good to go, right?

241
00:15:40.624 --> 00:15:43.213
And now we can actually have that
typing from the very beginning.

242
00:15:43.213 --> 00:15:45.121
Yeah,
&gt;&gt; Is there an insert in TypeScript

243
00:15:45.121 --> 00:15:46.566
we could replace them with.

244
00:15:46.566 --> 00:15:54.381
&gt;&gt; So TypeScript itself does not have
any powers to do anything in your code.

245
00:15:54.381 --> 00:15:58.626
When you like run the build process,
it's gone, right?

246
00:15:58.626 --> 00:16:01.110
It's all JavaScript at the end of the day,

247
00:16:01.110 --> 00:16:04.153
it is only kind of hovering
around your JavaScript.

248
00:16:04.153 --> 00:16:07.452
It cannot meddle itself in
the affairs of models, right?

249
00:16:07.452 --> 00:16:12.826
It has to kinda just hover over and
check to make sure everything's okay but

250
00:16:12.826 --> 00:16:18.554
it can't actually do anything yourself
which sometimes is annoying, right?

251
00:16:18.554 --> 00:16:23.146
I could make a type out of a value,
but I couldn't make a value out of

252
00:16:23.146 --> 00:16:27.988
a type cuz TypeScript cannot impact
the world of JavaScript, right?

253
00:16:27.988 --> 00:16:30.464
It lives in the shadows.

254
00:16:30.464 --> 00:16:34.209
Cool, metaphors I did not
expect to pull in today.

255
00:16:34.209 --> 00:16:34.790
But here we are.

