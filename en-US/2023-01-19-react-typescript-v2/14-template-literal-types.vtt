WEBVTT

1
00:00:00.050 --> 00:00:03.639
One thing that I don't know if we should
implement live, let's do it like at least

2
00:00:03.639 --> 00:00:07.196
the theoretical part, cuz when I explain
this to you later you'll find out why.

3
00:00:07.196 --> 00:00:14.305
TypeScript, Four point something,

4
00:00:14.305 --> 00:00:17.160
you have template literals and
JavaScript, right?

5
00:00:17.160 --> 00:00:20.080
So you can do like, and then you do.

6
00:00:22.150 --> 00:00:23.350
And you put a variable in there, right?

7
00:00:24.710 --> 00:00:27.254
So TypeScript added this
super powerful thing,

8
00:00:27.254 --> 00:00:30.580
which is the ability to do that
with your type definitions.

9
00:00:30.580 --> 00:00:31.740
So I could say type.

10
00:00:33.810 --> 00:00:35.360
And this is still somewhat limited.

11
00:00:35.360 --> 00:00:37.620
I long for a day where this is better.

12
00:00:37.620 --> 00:00:41.300
And this is way better than when
I did this course last time.

13
00:00:41.300 --> 00:00:45.610
So my longing is not from nowhere, right?

14
00:00:45.610 --> 00:00:51.456
So I could say, that it's a string
that starts with a hash code,

15
00:00:51.456 --> 00:00:54.070
with a hashtag, right?

16
00:00:54.070 --> 00:00:58.540
And now this will only accept strings that
start with that, which if they use it in

17
00:00:58.540 --> 00:01:03.430
their type system for this library great,
it's relatively new TypeScript feature.

18
00:01:03.430 --> 00:01:05.930
Yeah, it's totally safe to use it,
for libraries.

19
00:01:05.930 --> 00:01:08.920
For your own code, totally safe to use.

20
00:01:08.920 --> 00:01:11.713
What TypeScript added in 4.6 or

21
00:01:11.713 --> 00:01:18.170
4.7 was it used to be you could only
put other string types in there.

22
00:01:18.170 --> 00:01:22.622
The crazy thing that and this is
something I use in my code as well is, so

23
00:01:22.622 --> 00:01:26.560
when I say like RGBString like
the one that like CSS respects.

24
00:01:27.580 --> 00:01:34.997
Brand new in the last few months is
the ability to do something like this,

25
00:01:34.997 --> 00:01:39.383
rgb and we could do number in here, right?

26
00:01:42.586 --> 00:01:47.252
Now the only problem is we know that rgbs
are supposed to be maxed out at 255,

27
00:01:47.252 --> 00:01:50.025
you can't do a number range or
anything that.

28
00:01:50.025 --> 00:01:51.357
But you could make okay,

29
00:01:51.357 --> 00:01:55.360
now it has to be a string that
matches this general pattern.

30
00:01:55.360 --> 00:01:57.220
Which is yeah, new-ish, right?

31
00:01:57.220 --> 00:01:59.950
And this is, yeah, not true of
last time we did this workshop.

32
00:01:59.950 --> 00:02:02.530
And it's super powerful as well.

33
00:02:02.530 --> 00:02:09.549
And yes, at one point, did I try to make
a union type of zero through nine A,

34
00:02:09.549 --> 00:02:14.170
B, C, D, E, F hashtag and
then six of those.

35
00:02:14.170 --> 00:02:15.960
I did try to do that.

36
00:02:15.960 --> 00:02:19.898
The number of type complexes I
create has got TypeScripts say,

37
00:02:19.898 --> 00:02:21.540
absolutely not, right?

38
00:02:21.540 --> 00:02:22.980
And so, you are somewhat limited.

39
00:02:22.980 --> 00:02:27.383
You could say that it is six, you could
say a string that starts with a hashtag,

40
00:02:27.383 --> 00:02:30.550
you could say that it's this and
it could be any number.

41
00:02:30.550 --> 00:02:32.710
You're still somewhat limited.

42
00:02:32.710 --> 00:02:37.992
But where this is really useful is you
saw those action types I was creating.

43
00:02:37.992 --> 00:02:43.080
What I could do so yeah, this is
update-hex-color, update-rgb-color, right?

44
00:02:43.080 --> 00:02:49.612
I could say that, Is so

45
00:02:49.612 --> 00:02:54.710
let's say we had,
Color formats, I don't know.

46
00:02:54.710 --> 00:02:59.587
And we said it was rgb, hex,

47
00:03:01.370 --> 00:03:06.682
Hsl, Hsv, right?

48
00:03:06.682 --> 00:03:10.190
I think those are the the ones I have.

49
00:03:10.190 --> 00:03:15.055
What I could do is say that
my valid action types are,

50
00:03:15.055 --> 00:03:18.602
and I use this all the time in actions.

51
00:03:26.178 --> 00:03:31.550
If you look at this, it is now all
of those made on the fly for me.

52
00:03:31.550 --> 00:03:32.960
Right, so I don't have to type them all.

53
00:03:34.570 --> 00:03:38.640
The camera can't see the faces facing me,
but I can see them.

54
00:03:38.640 --> 00:03:41.140
Some of the power inconvenience.

55
00:03:41.140 --> 00:03:46.198
So for a lot of stuff, if you're getting
resources like requested, loaded error or

56
00:03:46.198 --> 00:03:51.202
loading, you can automatically have these
templates that you're kind of using.

57
00:03:51.202 --> 00:03:55.115
And generate a bunch of these
string types automatically and

58
00:03:55.115 --> 00:03:59.420
particularly actually in this use case,
I use this a lot, right?

59
00:03:59.420 --> 00:04:01.447
I will use it for
all sorts of different statuses and

60
00:04:01.447 --> 00:04:03.870
stuff along those lines
where I expect something.

61
00:04:03.870 --> 00:04:08.750
So something like this is super useful.

62
00:04:08.750 --> 00:04:11.830
Now the problem is, we saw with that,

63
00:04:11.830 --> 00:04:16.547
we have value as number,
however this type that I made like

64
00:04:16.547 --> 00:04:21.580
those color inputs are not going
to give me this type, right?

65
00:04:21.580 --> 00:04:24.370
And so you would have to write something
like this to check it all the time.

66
00:04:24.370 --> 00:04:29.522
So that's why we're not totally gonna
go all the way down this road but

67
00:04:29.522 --> 00:04:32.924
I do want to tell you that
this road exists and so

68
00:04:32.924 --> 00:04:37.230
we can do isHexColor and
we'll take some string, right?

69
00:04:37.230 --> 00:04:39.790
So we wanna insist as a string
in the very beginning.

70
00:04:39.790 --> 00:04:45.823
And I can say return, Starts with a hash,

71
00:04:45.823 --> 00:04:48.590
which is really the only
thing that makes this true.

72
00:04:48.590 --> 00:04:52.742
And then if this is a Boolean return,
right, normally, right?

73
00:04:52.742 --> 00:04:55.592
It says it returns a Boolean,
what I can do is say

74
00:04:59.709 --> 00:05:02.549
And it's basically TypeScript is saying,

75
00:05:02.549 --> 00:05:06.550
if you validate that this is
the right type I will believe you.

76
00:05:06.550 --> 00:05:08.686
Right, and so if it's like, yo,

77
00:05:08.686 --> 00:05:12.940
that string was totally had a hash
tag at the beginning, right?

78
00:05:12.940 --> 00:05:16.490
This is just as a string because
the type system, I don't really know.

79
00:05:16.490 --> 00:05:19.892
You can write this logic, and
now if something goes in, right,

80
00:05:19.892 --> 00:05:23.740
it will tell you that this is the actual
type that you want to use, right?

81
00:05:23.740 --> 00:05:28.530
And so you can like say, hey, Texas, I'm
not sure you're like, let me check It is.

82
00:05:28.530 --> 00:05:29.752
And they'll be like, okay cool.

83
00:05:29.752 --> 00:05:33.690
This is a hex color, I'll treat it like
that from now on, super, super powerful.

84
00:05:33.690 --> 00:05:38.440
I use this especially when getting
JSON data back from APIs, right?

85
00:05:38.440 --> 00:05:40.210
Where it could be anything.

86
00:05:40.210 --> 00:05:43.666
And I want to insist as a certain
type throughout my code base when

87
00:05:43.666 --> 00:05:47.186
I get that API request back in,
I will do a bunch of these checks and

88
00:05:47.186 --> 00:05:50.462
cast it to the correct type based
on these super unit tested.

89
00:05:50.462 --> 00:05:53.072
Because this is a powerful tool so
if you just like,

90
00:05:53.072 --> 00:05:56.548
if this returns true I can cast
anything I want to anything, right?

91
00:05:56.548 --> 00:05:59.759
But I can go ahead and
if I really don't know what something is,

92
00:05:59.759 --> 00:06:03.332
like if it could be an array or
could be a string or something like that,

93
00:06:03.332 --> 00:06:06.870
that's where unknown comes in,
where it makes no assumptions.

94
00:06:06.870 --> 00:06:09.390
You figure out everything in
the Thunderdome over here.

95
00:06:09.390 --> 00:06:11.850
And then whatever comes out
will be the type that it uses.

96
00:06:13.920 --> 00:06:18.555
So that mistake gave us
an interesting aside which I'm,

97
00:06:18.555 --> 00:06:20.784
we'll call it a total win.

98
00:06:20.784 --> 00:06:24.843
But yeah, so now I should I think I
already validated everything worked but

99
00:06:24.843 --> 00:06:27.485
yeah there are little things
that can go wrong and

100
00:06:27.485 --> 00:06:30.722
sometimes the type system is
not going to totally help you.

101
00:06:30.722 --> 00:06:33.856
But there are also techniques
that you can do, right,

102
00:06:33.856 --> 00:06:36.660
that will save you from
some of these headaches.

103
00:06:36.660 --> 00:06:39.210
You just kinda have to step in,
if you work with TypeScript,

104
00:06:39.210 --> 00:06:41.010
TypeScript could have caught that for me.

105
00:06:41.010 --> 00:06:43.063
I'd be like, yo, when I set this state,

106
00:06:43.063 --> 00:06:46.178
which is eventually what those
other things took that value and

107
00:06:46.178 --> 00:06:51.020
tried to convert into something, it was a
library code that was crashing, not mine.

108
00:06:51.020 --> 00:06:53.720
It was my mistake, but
it was a library code that was crashing.

109
00:06:53.720 --> 00:06:59.240
But I could say, never let a string out of
here that does not start with a hashtag.

110
00:06:59.240 --> 00:07:02.104
I could definitely have TypeScript
help me with that, right,

111
00:07:02.104 --> 00:07:04.112
using the technique
that I just showed you.

