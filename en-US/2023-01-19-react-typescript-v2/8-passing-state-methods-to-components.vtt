WEBVTT

1
00:00:00.210 --> 00:00:02.510
I did say that pulling count
out does cause re-renders.

2
00:00:02.510 --> 00:00:07.241
Like I said, at this point I would
probably keep it normally because

3
00:00:07.241 --> 00:00:11.300
the performance,
it's not worth the added headache.

4
00:00:11.300 --> 00:00:14.234
But let's talk about what this would
look like if I wanted to pass set quotes

5
00:00:14.234 --> 00:00:15.510
through instead.

6
00:00:15.510 --> 00:00:19.750
So instead of onSubmit, we're gonna
give it just the set quotes function.

7
00:00:21.470 --> 00:00:25.258
And again,
this is a refactor that I will know

8
00:00:25.258 --> 00:00:28.660
is finished when the red squiggly stop.

9
00:00:28.660 --> 00:00:33.264
So then we can push count,
yeah, the countdown.

10
00:00:40.403 --> 00:00:45.218
Accounts need your state, nope,
no duplicates, cool, cool,

11
00:00:45.218 --> 00:00:48.117
cool, we're not using that anymore.

12
00:00:48.117 --> 00:00:51.587
We're not even doing these two.

13
00:00:51.587 --> 00:00:56.120
What we want,
Is to be able to pass through a set count.

14
00:00:57.900 --> 00:00:58.400
But what is it?

15
00:01:01.544 --> 00:01:04.117
I mean cyclops rather.

16
00:01:04.117 --> 00:01:05.252
How many times have I done this?

17
00:01:05.252 --> 00:01:09.978
It's a function, but what's the signature?

18
00:01:09.978 --> 00:01:13.453
&gt;&gt; Start typing in [INAUDIBLE] [LAUGH]
&gt;&gt; Well, the problem is for

19
00:01:13.453 --> 00:01:16.510
when you're defining the arguments,
it doesn't have the information yet.

20
00:01:16.510 --> 00:01:21.193
It's like, yo, these are the things I'm
ready for, it can't reverse engineer.

21
00:01:21.193 --> 00:01:27.501
And be clear, I await a future version of
TypeScript, be like, yeah, I can, right?

22
00:01:27.501 --> 00:01:32.343
I saw you use it somewhere else and this
is the one time you gave it something,

23
00:01:32.343 --> 00:01:36.290
I'm sure that I can't wait for
that comment to be out of date.

24
00:01:36.290 --> 00:01:38.070
But presently it's true.

25
00:01:38.070 --> 00:01:41.330
And so if we look, it is this function

26
00:01:41.330 --> 00:01:46.288
which likely takes an array of quotes and
returns void.

27
00:01:46.288 --> 00:01:53.043
And I could hard code that myself and
that is what I did for years, right?

28
00:01:53.043 --> 00:01:56.408
But that's actually,
then if I change it to something else and

29
00:01:56.408 --> 00:01:59.850
I refactor it's like my reinventing
the wheel did not serve me.

30
00:01:59.850 --> 00:02:04.938
But what I could say is,
this is a very valid type,

31
00:02:04.938 --> 00:02:08.217
I can literally just grab this,

32
00:02:11.552 --> 00:02:14.353
Say this is what kind of
function it should be.

33
00:02:17.358 --> 00:02:21.482
And that, let's save everything in
this case, and now we just say,

34
00:02:32.181 --> 00:02:33.417
Did we pull that in?

35
00:02:33.417 --> 00:02:34.698
Yep.

36
00:02:34.698 --> 00:02:36.246
Then we set the quotes.

37
00:02:48.917 --> 00:02:52.405
Hope we didn't define it here.

38
00:02:54.246 --> 00:02:59.090
Cool, now that all works let's see,
where else am I getting yelled at?

39
00:03:01.903 --> 00:03:04.419
We took that off, that's fine.

40
00:03:12.351 --> 00:03:16.573
Let's actually define that and we'll say,

41
00:03:16.573 --> 00:03:20.027
now I get to use that new thing again.

42
00:03:22.642 --> 00:03:23.142
Check it out.

43
00:03:27.025 --> 00:03:30.939
It's like I didn't even have to go see,
there's Arizona,

44
00:03:30.939 --> 00:03:32.875
I have not looked at them yet.

45
00:03:32.875 --> 00:03:33.757
Cool, pass that through.

46
00:03:36.992 --> 00:03:40.298
That no longer takes
accounts to get rid of that.

47
00:03:41.632 --> 00:03:42.599
Or does it?

48
00:03:50.726 --> 00:03:55.220
Awesome, no issues found,
everything is good, big reveal.

49
00:03:57.594 --> 00:03:59.383
Yeah, it works, right?

50
00:03:59.383 --> 00:04:03.373
And so the refactoring helped and
the other part that we brought in,

51
00:04:03.373 --> 00:04:06.453
basically everything we've talked about so
far and

52
00:04:06.453 --> 00:04:10.100
then went for a little bonus
run by passing down set count.

53
00:04:10.100 --> 00:04:12.263
Like I said,
I would probably do it that first way, but

54
00:04:12.263 --> 00:04:14.626
I think it's useful to show one,
the active refactoring.

55
00:04:14.626 --> 00:04:18.895
And then two, if I needed the type for
something that I didn't totally know.

56
00:04:18.895 --> 00:04:23.288
Like a lot of times,
especially if I have the value already,

57
00:04:23.288 --> 00:04:26.830
I can reverse engineer
what that type should be.

58
00:04:26.830 --> 00:04:30.600
And there's actually ways, there are some
utility methods called return type

59
00:04:30.600 --> 00:04:33.863
that you can literally hand it the type
of a function and it will get you

60
00:04:33.863 --> 00:04:37.650
even the return values or parameters
that will get you the parameters, right?

61
00:04:37.650 --> 00:04:42.386
There's a whole bunch of ways that I use
throughout my codebase to figure out

62
00:04:42.386 --> 00:04:44.162
stuff based on other stuff.

63
00:04:44.162 --> 00:04:45.209
So it's not like,

64
00:04:45.209 --> 00:04:49.603
here's the set of types that have carved
in stone everything must adhere to it.

65
00:04:49.603 --> 00:04:53.948
I can dynamically figure out types
based on actual properties and

66
00:04:53.948 --> 00:04:56.951
use cases that I'm using
in my application.

67
00:04:56.951 --> 00:05:00.344
So we have that kind of all
in place now and it works and

68
00:05:00.344 --> 00:05:02.900
the refactoring becomes a lot easier.

69
00:05:02.900 --> 00:05:05.232
If I was doing that normally,
I would've to switch back and

70
00:05:05.232 --> 00:05:07.296
forth between the browser,
look at the next error.

71
00:05:07.296 --> 00:05:10.459
But for me a lot of times even
hovering over some of the stuff,

72
00:05:10.459 --> 00:05:13.700
I could see the answer and
get a sense of it incredibly easily.

73
00:05:15.440 --> 00:05:19.705
This still, I will show you why I would
probably use use reducer in this case

74
00:05:19.705 --> 00:05:21.930
because it just become simpler.

75
00:05:21.930 --> 00:05:26.529
That is true of React in Vanilla
JavaScript, and it is also especially true

76
00:05:26.529 --> 00:05:31.867
because then there's just one dispatch, it
becomes very easy to pass around and use.

77
00:05:31.867 --> 00:05:34.467
That kind of just to set the roadmap for

78
00:05:34.467 --> 00:05:38.130
us kind of going forward a little bit,
which is cool.

79
00:05:38.130 --> 00:05:40.920
We've now seen how to deal with props.

80
00:05:40.920 --> 00:05:44.100
We've seen how to deal
with event handlers.

81
00:05:44.100 --> 00:05:46.441
We've seen how to deal
with state from use state,

82
00:05:46.441 --> 00:05:50.740
kind of the next kind of few hurdles,
we've had to deal with asynchronous state.

83
00:05:50.740 --> 00:05:54.690
The next few hurdles for us are, okay,
how does this work with use reducer?

84
00:05:54.690 --> 00:05:56.990
What about the context API, right?

85
00:05:56.990 --> 00:06:01.179
That's the thing that we
all tend to use as well.

86
00:06:01.179 --> 00:06:05.489
And then we'll see, because the context
API has some interesting problems

87
00:06:05.489 --> 00:06:07.317
with the time space continuum.

88
00:06:07.317 --> 00:06:12.393
And then, we will just look at, hey, it
seems like I'm taking a lot of stuff from

89
00:06:12.393 --> 00:06:17.636
the underlying elements, like a form,
like an input, and retyping them myself.

90
00:06:17.636 --> 00:06:22.614
Could I just have some of that goodness
that you're just talking about where

91
00:06:22.614 --> 00:06:26.593
we can use some amount of dynamic
typing to figure stuff out?

92
00:06:26.593 --> 00:06:28.750
Absolutely, and so
we'll talk about that as well.

