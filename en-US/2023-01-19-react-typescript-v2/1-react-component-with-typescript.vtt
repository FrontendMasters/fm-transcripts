WEBVTT

1
00:00:00.258 --> 00:00:02.420
TypeScript component, all right?

2
00:00:02.420 --> 00:00:06.118
This is a TypeScript component,
and my challenge for

3
00:00:06.118 --> 00:00:11.228
you is to try to delineate what uniquely
makes it a TypeScript component.

4
00:00:13.470 --> 00:00:13.970
Yeah.

5
00:00:15.070 --> 00:00:16.540
&gt;&gt; File extension is TSX?

6
00:00:16.540 --> 00:00:17.780
&gt;&gt; Yeah, that's about it.

7
00:00:17.780 --> 00:00:21.009
If I change the file
extension on this file,

8
00:00:21.009 --> 00:00:26.410
it would go from a TSX to a JSX and
we go from TypeScript to JavaScript.

9
00:00:26.410 --> 00:00:31.146
And this is, again, one of the main
points that I wanna like double down on,

10
00:00:31.146 --> 00:00:35.730
which is, TypeScript tries its hardest
to stay out of your way, right?

11
00:00:35.730 --> 00:00:37.710
It just tries to be helpful.

12
00:00:37.710 --> 00:00:41.419
If you find yourself out of the box,
doing a ton of typing,

13
00:00:41.419 --> 00:00:44.243
that's probably an anti pattern, right?

14
00:00:44.243 --> 00:00:47.890
Cuz TypeScript is gonna do everything
in its power to figure stuff out.

15
00:00:47.890 --> 00:00:53.430
So even in this, if we hover over name
badge, we can do that one, right?

16
00:00:53.430 --> 00:00:56.442
It knows that this is a function
that takes no arguments and

17
00:00:56.442 --> 00:00:58.340
returns at JSX element, right?

18
00:00:58.340 --> 00:01:01.162
And so if I tried to use
some other function in JSX,

19
00:01:01.162 --> 00:01:05.063
it wouldn't work, cuz it knows it's
not returning a JSX element and

20
00:01:05.063 --> 00:01:09.250
it knows that this is a valid react
component that's a function, right?

21
00:01:09.250 --> 00:01:13.000
It just figure that all out on its own.

22
00:01:13.000 --> 00:01:17.588
Even if I hover over any of these
elements, I kinda get the types and yeah,

23
00:01:17.588 --> 00:01:22.028
they look a bit much, but if you squint
you can mostly figure out what's

24
00:01:22.028 --> 00:01:24.930
going on as I hover over that section,
right?

25
00:01:24.930 --> 00:01:27.090
It's an HTML element, right?

26
00:01:27.090 --> 00:01:30.720
Cool cool cool, of the section type,
so on and so forth.

27
00:01:30.720 --> 00:01:33.840
Class names, you can see they
can be a string or undefined.

28
00:01:33.840 --> 00:01:37.548
You can mostly try to use
the inspiration of what the typing and

29
00:01:37.548 --> 00:01:43.030
react has already done for you, to kinda
figure out what something should be.

30
00:01:43.030 --> 00:01:44.584
Now, that said, this is no,

31
00:01:44.584 --> 00:01:48.212
not only is this both a TypeScript
as well as a JavaScript component.

32
00:01:48.212 --> 00:01:51.175
I guess technically if it wasn't for
class name,

33
00:01:51.175 --> 00:01:55.230
it was just classes would
also be almost HTML, right?

34
00:01:55.230 --> 00:02:00.122
So to say they're almost the same,
it's a little disingenuous because

35
00:02:00.122 --> 00:02:03.680
we haven't really done
anything with this yet.

36
00:02:03.680 --> 00:02:07.660
So there are usually some kind of react
component either takes some kind of

37
00:02:07.660 --> 00:02:12.300
state or props, right, that's a thing,
otherwise you would just handcraft HTML.

38
00:02:14.040 --> 00:02:17.457
And that is the case here as well,
so for instance,

39
00:02:17.457 --> 00:02:20.872
we could throw in a prop,put a name for
instance and

40
00:02:20.872 --> 00:02:26.210
you can see that TypeScript is starting
to get angry with me, that's good.

41
00:02:26.210 --> 00:02:28.700
I need it angry with me.

42
00:02:28.700 --> 00:02:32.530
So I have strict mode turned on for
the entirety of this workshop.

43
00:02:32.530 --> 00:02:38.148
And if you're migrating a code base,
you might still choose use strict mode.

44
00:02:38.148 --> 00:02:40.826
You might choose not to but
for the purposes,

45
00:02:40.826 --> 00:02:45.282
especially if it's learning having
all the rules in place, makes sense.

46
00:02:45.282 --> 00:02:49.300
And so the first thing is,
that name has implicitly an any type.

47
00:02:49.300 --> 00:02:54.174
It has an any type,
any is like I don't know, YOLO, right?

48
00:02:54.174 --> 00:02:57.306
And what it's saying is, can you tell
me what name is supposed to be so

49
00:02:57.306 --> 00:02:59.300
I make sure it has all the methods.

50
00:02:59.300 --> 00:03:04.350
And if you look right now with name,
if I put a dot after it, I get nothing.

51
00:03:04.350 --> 00:03:07.780
However, I can say, okay,
here are the prop types.

52
00:03:07.780 --> 00:03:11.922
And a lot of times in regular JavaScript,
you don't have to use that library called

53
00:03:11.922 --> 00:03:14.761
prop types, but
you can to have react check to make sure,

54
00:03:14.761 --> 00:03:17.780
hey, you said name was
supposed to be a string.

55
00:03:17.780 --> 00:03:18.450
Is this a string?

56
00:03:18.450 --> 00:03:23.518
Because most of us have encountered what
was previous and known as undefined as

57
00:03:23.518 --> 00:03:28.760
not a function or you call an array method
on null or something along those lines.

58
00:03:28.760 --> 00:03:33.180
Most of the errors in our
applications are type errors, right?

59
00:03:33.180 --> 00:03:35.353
And so
having something to run in check, but

60
00:03:35.353 --> 00:03:38.350
TypeScript was able to figure
out the return value of this but

61
00:03:38.350 --> 00:03:42.370
it doesn't know what is eventually gonna
get passed in just by reading the code.

62
00:03:42.370 --> 00:03:44.720
Now, that's something happens in practice.

63
00:03:44.720 --> 00:03:46.447
So whatever TypeScript can figure out for

64
00:03:46.447 --> 00:03:49.050
you, it does,
you don't have to worry about it.

65
00:03:49.050 --> 00:03:53.100
However, anything that TypeScript can't
figure out, you get gotta be a friend.

66
00:03:53.100 --> 00:03:54.380
You gotta help out, right?

67
00:03:54.380 --> 00:03:58.970
And so we can basically just say,
all right, cool.

68
00:03:58.970 --> 00:04:00.880
It's an object and name is a string.

69
00:04:02.210 --> 00:04:03.965
Now TypeScript is happy again,

70
00:04:03.965 --> 00:04:07.345
you can see the application TSX
is immediately upset with me.

71
00:04:07.345 --> 00:04:12.008
All right, good, it ought to be
upset with me I told it that

72
00:04:12.008 --> 00:04:17.030
the name badge takes name and
I didn't give it a name in here.

73
00:04:17.030 --> 00:04:17.623
So I can go.

74
00:04:22.144 --> 00:04:25.962
Cool, you save that, and
I didn't even need to save for

75
00:04:25.962 --> 00:04:30.607
all those errors to happen as I typed
all this checking was going on.

76
00:04:30.607 --> 00:04:33.537
I don't have to flip back to
my browser see it crash go

77
00:04:33.537 --> 00:04:37.830
look at the console log get yelled at or
sometimes in development mode react.

78
00:04:37.830 --> 00:04:40.281
It'll show it to you, but
I don't have to do that,

79
00:04:40.281 --> 00:04:42.510
I can instantly see tabs
are changing colors.

80
00:04:42.510 --> 00:04:45.950
If I had the sidebar open,
stuff would change colors there as well.

81
00:04:45.950 --> 00:04:50.250
It becomes really easy once you get used
to just kind of following the flow, right?

82
00:04:50.250 --> 00:04:53.110
Especially if you're doing a refactor,
which is sometimes perilous.

83
00:04:53.110 --> 00:04:54.646
Especially if you don't
have great unit tests,

84
00:04:54.646 --> 00:04:55.890
of course, you have great unit tests.

85
00:04:55.890 --> 00:04:58.085
Everyone has great unit tests, right?

86
00:04:58.085 --> 00:05:01.081
Having something immediately telling
you the first time that you're using

87
00:05:01.081 --> 00:05:01.990
TypeScript.

88
00:05:01.990 --> 00:05:06.147
And you get all the red squigglies go away
and then you flip over to your browser and

89
00:05:06.147 --> 00:05:08.365
you're like, big refactor just worked.

90
00:05:08.365 --> 00:05:09.883
It all pays off.

91
00:05:09.883 --> 00:05:14.751
All right, so
if this looks confusing to you at all,

92
00:05:14.751 --> 00:05:19.410
in TypeScript,
a simpler version would be like.

93
00:05:23.297 --> 00:05:25.621
It's just the type of that argument,
right?

94
00:05:28.344 --> 00:05:30.900
And so you can see this is takes a number,
returns a number.

95
00:05:30.900 --> 00:05:33.113
I could specify that it
returns a number as well.

96
00:05:33.113 --> 00:05:34.390
I don't need to.

97
00:05:34.390 --> 00:05:38.437
I do this actually a lot though in a lot
of my helper functions because sometimes

98
00:05:38.437 --> 00:05:42.320
I accidentally don't have a conditional or
something along those lines.

99
00:05:42.320 --> 00:05:46.101
So sometimes it would be, don't ever
return undefined or void in this case,

100
00:05:46.101 --> 00:05:47.860
make sure I get a number out of this.

101
00:05:47.860 --> 00:05:51.057
I will sometimes type the return argument
to keep myself honest, but if you don't,

102
00:05:51.057 --> 00:05:53.920
TypeScript will just look at
the function and figure it out.

103
00:05:53.920 --> 00:05:59.592
So this kind of set of curly
braces over here is the same

104
00:05:59.592 --> 00:06:05.990
as changing this just props Here as well,
right?

105
00:06:05.990 --> 00:06:07.270
Everything is the same idea.

106
00:06:07.270 --> 00:06:11.570
It's just regular TypeScript for function,
and everything works as expected.

107
00:06:11.570 --> 00:06:14.080
The other cool part is now
that knows it's a string.

108
00:06:14.080 --> 00:06:19.080
The only methods that show up
here are string methods, right?

109
00:06:19.080 --> 00:06:21.797
So immediately,
not only am I getting the safety and

110
00:06:21.797 --> 00:06:25.420
all the checking in my very
complicated app as you can see.

111
00:06:25.420 --> 00:06:30.412
But on top of that, my life is now
more convenient cuz I've been doing

112
00:06:30.412 --> 00:06:33.220
this now for a really long time.

113
00:06:33.220 --> 00:06:36.638
There's a few methods that I
will still never remember,

114
00:06:36.638 --> 00:06:38.638
like which one is which, right?

115
00:06:38.638 --> 00:06:43.475
Unshift verses push and shift and
pop, pop and push I got,

116
00:06:43.475 --> 00:06:46.357
unshift and shift never, right?

117
00:06:46.357 --> 00:06:50.521
And so remembering all of those and
even some of the new ones that are all,

118
00:06:50.521 --> 00:06:55.439
which strings have includes the includes
versus contains I'll never remember which

119
00:06:55.439 --> 00:06:56.900
one's on which.

120
00:06:56.900 --> 00:06:59.452
And the nice part is,
because I'm using TypeScript,

121
00:06:59.452 --> 00:07:01.180
I don't ever have to learn, right?

122
00:07:01.180 --> 00:07:04.640
Cuz my editor and
my compiler will just tell me.

123
00:07:04.640 --> 00:07:08.475
I think this is what, when I started
writing Ruby and JavaScript, and

124
00:07:08.475 --> 00:07:11.660
people who were coming from
real programming languages,

125
00:07:11.660 --> 00:07:15.110
I would say like,
strongly typed languages are better.

126
00:07:15.110 --> 00:07:18.010
I think I now know what I mean,
like a decade later.

127
00:07:18.010 --> 00:07:22.810
So we have all this in place, everything
kind of works and that's pretty great.

128
00:07:22.810 --> 00:07:28.510
Now, be clear this works because this
is a pretty standard function, right?

129
00:07:28.510 --> 00:07:32.986
If I did something,
if you look at this function now,

130
00:07:32.986 --> 00:07:37.810
well, this could return a JSX element or
no, right?

131
00:07:37.810 --> 00:07:41.929
And if that's what you want, that's great
cuz now TypeScript will know that this

132
00:07:41.929 --> 00:07:46.320
function depending on how you call
it can turn one or the other, right?

133
00:07:46.320 --> 00:07:49.630
If however you are writing something
the first time I will do this a lot.

134
00:07:49.630 --> 00:07:53.191
Which is, I will say no,
make sure I return a JSX element,

135
00:07:53.191 --> 00:07:58.420
at which point it's hey, there is some
condition here where you don't, right.

136
00:07:58.420 --> 00:08:03.331
And for me, this saves how many unit
tests have you ever written, which this

137
00:08:03.331 --> 00:08:09.130
function is supposed to take a string,
but what happens if I pass an undefined?

138
00:08:09.130 --> 00:08:11.480
What happens if a number comes in?

139
00:08:11.480 --> 00:08:16.309
There's so many unit tests that we write
and so one of the many other things I'm

140
00:08:16.309 --> 00:08:20.624
gonna try to pitch to you over our
time together is, sometimes, yes,

141
00:08:20.624 --> 00:08:25.330
this is a little more work than just
playing fast and loose with JavaScript.

142
00:08:25.330 --> 00:08:29.579
Often times the number of unit
tests that you save yourself,

143
00:08:29.579 --> 00:08:32.087
that you totally were gonna write.

144
00:08:32.087 --> 00:08:34.270
All bugs in production really?

145
00:08:34.270 --> 00:08:37.700
Will are cut down drastically, right?

146
00:08:37.700 --> 00:08:40.290
And if you're like I do
these things all the time,

147
00:08:40.290 --> 00:08:42.646
just think of your least
favorite teammate.

148
00:08:42.646 --> 00:08:45.640
Cool.
So we have that all in place.

149
00:08:45.640 --> 00:08:50.843
So what we can do now is figure out
what does it mean to navigate from these

150
00:08:50.843 --> 00:08:56.501
props and stuff along those lines,
there were other ways to do this, right?

151
00:08:56.501 --> 00:09:02.803
That's right there were prop types, if we
look at over here at this control panel,

152
00:09:02.803 --> 00:09:08.491
which I'm not really using but it makes
it this is a JavaScript file, JSX.

153
00:09:08.491 --> 00:09:11.150
Two things to point out,
I could import this file just fine.

154
00:09:11.150 --> 00:09:16.163
So if you're worried about migrating,
react app from JavaScript to TypeScript,

155
00:09:16.163 --> 00:09:18.741
once you have the basic TypeScript set up,

156
00:09:18.741 --> 00:09:21.977
there's a property in the TS
config called allow JS.

157
00:09:21.977 --> 00:09:25.768
Does anyone want to venture
wild guess what that does?

158
00:09:25.768 --> 00:09:27.733
Yeah, it allows us, right?

159
00:09:27.733 --> 00:09:31.571
That's right and so
one of the things that we could do,

160
00:09:31.571 --> 00:09:34.158
one of things I'm gonna have you do,

161
00:09:34.158 --> 00:09:40.018
is kind of we're gonna try to transition
this file from JavaScript to TypeScript.

162
00:09:40.018 --> 00:09:44.869
So,two major things,one, is that if you
have prop types already kind of set up,

163
00:09:44.869 --> 00:09:47.000
it's fairly easy to do.

164
00:09:47.000 --> 00:09:49.935
Two is that we know that JavaScript and

165
00:09:49.935 --> 00:09:53.519
TypeScript can live
together pretty nicely.

166
00:09:53.519 --> 00:09:57.089
It's a little trickier when the TypeScript
file is importing the JavaScript file to

167
00:09:57.089 --> 00:10:00.506
be totally honest cuz everything is in any
type but it's kind of like you were just

168
00:10:00.506 --> 00:10:02.991
working with JavaScript,
Beginnings are great nicely.

169
00:10:02.991 --> 00:10:06.455
Then to converting is fairly easy.

170
00:10:06.455 --> 00:10:07.860
Mark.

171
00:10:07.860 --> 00:10:10.922
&gt;&gt; I would see a couple of
questions in chat around setup and

172
00:10:10.922 --> 00:10:12.690
configuration of TypeScript.

173
00:10:13.850 --> 00:10:15.590
&gt;&gt; Yep, let's see.

174
00:10:15.590 --> 00:10:17.360
&gt;&gt; Are we using create react app?

175
00:10:17.360 --> 00:10:20.163
&gt;&gt; I am using create react app because
I feel like it's a common standard

176
00:10:20.163 --> 00:10:20.800
denominator.

177
00:10:22.040 --> 00:10:27.850
&gt;&gt; And are there any configuration,
things you tend to use in TypeScript?

178
00:10:27.850 --> 00:10:33.940
&gt;&gt; Yeah, I will show you just
kind of the basic one that I use.

179
00:10:33.940 --> 00:10:37.942
Okay, so this is, I can't remember if this
is the one that comes with create react

180
00:10:37.942 --> 00:10:40.611
app or doesn't want to paste
it from another project.

181
00:10:40.611 --> 00:10:43.585
I actually just made my own
templates I do enough of these.

182
00:10:43.585 --> 00:10:46.845
This one I don't normally keep on
if I'm starting a new project,

183
00:10:46.845 --> 00:10:49.345
which is allowed JS because
I'm starting fresh.

184
00:10:49.345 --> 00:10:52.906
I don't need to create
a future migration problem for

185
00:10:52.906 --> 00:10:57.903
myself, but this is, you know most of
these are kind of standard, right?

186
00:10:57.903 --> 00:11:02.814
As soon as you might want to target
a later version of JavaScript ES5

187
00:11:02.814 --> 00:11:04.027
is pretty safe.

188
00:11:04.027 --> 00:11:05.600
Yeah, obviously we're using JSX.

189
00:11:07.170 --> 00:11:09.438
I would see what else
is kind of unique and

190
00:11:09.438 --> 00:11:13.848
important because mostly standard I
almost always keep strict mode on Because

191
00:11:13.848 --> 00:11:16.740
when I don't and
then I decided to turn it on later.

192
00:11:16.740 --> 00:11:20.047
I then have to make things in strict mode.

193
00:11:20.047 --> 00:11:25.010
So some of these,
I think these are very safe defaults.

194
00:11:25.010 --> 00:11:28.522
This one up here lets you just import
react instead of like star from react,

195
00:11:28.522 --> 00:11:31.000
which you might seen in
some TypeScript blog posts.

196
00:11:32.390 --> 00:11:35.855
So instant yeah, if it doesn't have
a default export, you can just,

197
00:11:35.855 --> 00:11:37.280
it figures that out for you.

198
00:11:38.610 --> 00:11:42.600
These are kind of, most of the cases, this
is nice too, which is like if you have

199
00:11:42.600 --> 00:11:46.070
a case statement and you exhaust
all the different options, right?

200
00:11:46.070 --> 00:11:47.310
You don't have to do the default thing.

201
00:11:47.310 --> 00:11:49.670
It'll like figure all that out for you.

202
00:11:50.730 --> 00:11:56.359
Again, stuff like strict mode, I might
turn off if I'm migrating an app, right?

203
00:11:56.359 --> 00:12:00.176
Allow JS, I might turn on if I'm
migrating app, but generally speaking,

204
00:12:00.176 --> 00:12:02.130
this is a setup, please.

205
00:12:02.130 --> 00:12:07.782
&gt;&gt; Yeah, there was another question
around being able to run from the command

206
00:12:07.782 --> 00:12:12.938
line and see all the TypeScript
errors throughout your project.

207
00:12:12.938 --> 00:12:15.478
&gt;&gt; Yeah.
Depending on your setup, so

208
00:12:15.478 --> 00:12:20.106
if you're using hvidt, or
a modern version of Webpack, and

209
00:12:20.106 --> 00:12:25.050
you have the server running,
you will see them, right?

210
00:12:25.050 --> 00:12:29.012
I just couldn't see them in the editor,
so I didn't but for instance,

211
00:12:29.012 --> 00:12:33.450
let's take this out and now the editor
knows immediately that I have a problem.

212
00:12:34.710 --> 00:12:36.610
We got to change over.

213
00:12:48.092 --> 00:12:48.940
We gotta save that file.

214
00:12:48.940 --> 00:12:53.635
So, you'll notice that like I didn't see
the error immediately in my web server

215
00:12:53.635 --> 00:12:55.993
because I didn't save all those files.

216
00:12:55.993 --> 00:13:00.214
So the web server knows when you save
the file, your editor knows immediately,

217
00:13:00.214 --> 00:13:03.052
which is also kinda nice
during a refractor, right?

218
00:13:03.052 --> 00:13:06.647
Now that it will still be up and running
and I can solve all the red squigglies and

219
00:13:06.647 --> 00:13:10.025
then go take a look, but you will see
it in your terminal as well across your

220
00:13:10.025 --> 00:13:12.617
entire app,
not just the file that you're looking at.

