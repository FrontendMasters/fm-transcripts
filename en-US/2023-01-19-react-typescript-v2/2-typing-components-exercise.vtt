WEBVTT

1
00:00:00.790 --> 00:00:05.849
All right, so your mission is
to take that control, that JSX,

2
00:00:05.849 --> 00:00:10.531
do the very hard work of flipping it,
that J to a T, right?

3
00:00:10.531 --> 00:00:16.045
And then what we wanna do is refactor
those prop types into an actual prop and

4
00:00:16.045 --> 00:00:19.122
just kind of get warmed up and
get into it.

5
00:00:19.122 --> 00:00:22.654
Like I said, for
stuff that might not be totally obvious,

6
00:00:22.654 --> 00:00:24.323
try not to look at the docs.

7
00:00:24.323 --> 00:00:29.405
See if you can do it from just
hovering over the editor and

8
00:00:29.405 --> 00:00:34.391
use the actual tools to figure
out how to use the tools.

9
00:00:34.391 --> 00:00:35.928
It's like building your own lightsaber,
right?

10
00:00:39.953 --> 00:00:45.444
Guys, we're changing the file
extension from JSX to TSX.

11
00:00:45.444 --> 00:00:49.188
We're gonna take those
control panel props and

12
00:00:49.188 --> 00:00:52.470
turn them into actual TypeScript types.

13
00:00:53.940 --> 00:00:56.375
We might go for a bonus run and
just add another property so

14
00:00:56.375 --> 00:00:58.775
we can play around with it
a little bit on our name badge.

15
00:00:58.775 --> 00:01:00.403
And then we're gonna try to
figure out what to do with

16
00:01:00.403 --> 00:01:01.666
at least the on change handler, right?

17
00:01:01.666 --> 00:01:04.216
Cuz I told you, hey,
just say it's a string for the name,

18
00:01:04.216 --> 00:01:06.368
I didn't really tell you
what to do with events.

19
00:01:06.368 --> 00:01:10.512
So that was, a little vision quest for
you to kind of look through, but

20
00:01:10.512 --> 00:01:14.392
we'll kind of figure out how to
use the editor to figure that out.

21
00:01:14.392 --> 00:01:18.550
Okay, so
we have some of the answers down here.

22
00:01:18.550 --> 00:01:22.669
Step one, you can either change
the editor or you can get move,

23
00:01:22.669 --> 00:01:25.171
you want your get history to be nicer.

24
00:01:25.171 --> 00:01:28.033
I'll just do it in here for right now.

25
00:01:28.033 --> 00:01:30.795
And so okay, I changed the TSX.

26
00:01:30.795 --> 00:01:33.748
I'm getting,
everything mostly works except for

27
00:01:33.748 --> 00:01:37.879
the fact that it didn't acquiesce to
these prop types were real types.

28
00:01:37.879 --> 00:01:39.741
So the convention, and

29
00:01:39.741 --> 00:01:44.874
I like conventions cuz I don't
wanna come up with my own, right?

30
00:01:44.874 --> 00:01:48.636
And also, one of the hard problems in
computer science is naming things.

31
00:01:48.636 --> 00:01:53.382
So what you will normally see, what is,
I don't know who made this rule, but

32
00:01:53.382 --> 00:01:56.523
the standard convention is
you can type it in line or

33
00:01:56.523 --> 00:01:59.900
you can make a new type,
which is what we're gonna do.

34
00:01:59.900 --> 00:02:05.543
And a lot of times for React components,
you would call it ControlPanelProps.

35
00:02:05.543 --> 00:02:08.635
And that would be the type of the props,

36
00:02:08.635 --> 00:02:12.205
you would pass to the control panel,
right?

37
00:02:12.205 --> 00:02:17.415
And we'll start out by saying that
we know that name is a string and

38
00:02:17.415 --> 00:02:21.690
let's just say that on change for
a hot minute is any.

39
00:02:21.690 --> 00:02:27.211
Now, one of the things I
wanna say early now which is,

40
00:02:27.211 --> 00:02:33.362
if you ever feel tempted to use any,
you should avoid that.

41
00:02:33.362 --> 00:02:38.909
Any is infectious, one you have one any,
anything that any touches basically

42
00:02:38.909 --> 00:02:44.117
becomes any and now you have signed up for
a life where you do most of the work

43
00:02:44.117 --> 00:02:49.431
of having TypeScript in your React app and
get only 60% of the benefits.

44
00:02:49.431 --> 00:02:54.740
So as soon as an any is entering, it just
everything an any touches turns to an any.

45
00:02:54.740 --> 00:02:59.404
So we'll do that for a minute, there'll
be, I'll like sneak a few anys in there,

46
00:02:59.404 --> 00:03:03.690
to set up exercises and we'll try to
eradicate them over our time together.

47
00:03:04.750 --> 00:03:05.920
So we'll save that.

48
00:03:05.920 --> 00:03:09.157
And then all I have to do at this point,
if you didn't like that set of curly

49
00:03:09.157 --> 00:03:12.720
braces in the other one,
you just do ControlPanel props.

50
00:03:12.720 --> 00:03:18.749
And this is now officially
a TypeScript component.

51
00:03:18.749 --> 00:03:23.393
It has some extra stuff I don't need, like
this doesn't do anyone any favors anymore,

52
00:03:23.393 --> 00:03:25.110
which means I don't need this.

53
00:03:25.110 --> 00:03:30.051
And that, for a very simple component,
which if you think about your app,

54
00:03:30.051 --> 00:03:35.620
it's a few complicated pieces and then the
way the satellites are around the earth,

55
00:03:35.620 --> 00:03:38.307
a satellite of smaller pieces, right?

56
00:03:38.307 --> 00:03:42.823
We can have this kind of in place,
which leads us to our next challenge,

57
00:03:42.823 --> 00:03:45.551
which is what do we do
about OnChange here?

58
00:03:45.551 --> 00:03:48.603
So my challenge to you, yeah, [INAUDIBLE].

59
00:03:48.603 --> 00:03:49.461
&gt;&gt; Can I answer?

60
00:03:49.461 --> 00:03:50.472
&gt;&gt; Sure.

61
00:03:50.472 --> 00:03:53.613
&gt;&gt; Change event handler
HTML input element.

62
00:03:53.613 --> 00:03:55.409
&gt;&gt; Let's hover over that.

63
00:03:55.409 --> 00:03:59.763
And yeah, we can see that
the default type of an onChange.

64
00:03:59.763 --> 00:04:02.025
So, what do we do about our onChange?

65
00:04:02.025 --> 00:04:07.154
Well, we look over reacted to the default
element and we steal that, right?

66
00:04:07.154 --> 00:04:11.532
So it's saying like,
an input elements onChange is this type,

67
00:04:11.532 --> 00:04:15.762
React change event handler on
an HTML input element or undefined.

68
00:04:18.079 --> 00:04:23.896
Yoink, copy, Paste.

69
00:04:23.896 --> 00:04:25.109
Boom, right?

70
00:04:25.109 --> 00:04:28.678
We just used our editor to figure out what
the type should be on that one, right?

71
00:04:28.678 --> 00:04:33.180
And so a lot of times if I'm like,
I don't know what a form should be,

72
00:04:33.180 --> 00:04:37.994
you can mostly kind of, I'll make
the element and I'll figure it out, Mark.

73
00:04:37.994 --> 00:04:41.380
&gt;&gt; Is there a reason why we
are using type over interface here?

74
00:04:41.380 --> 00:04:42.877
Is it a different use case?

75
00:04:42.877 --> 00:04:46.596
&gt;&gt; Yes, I am spiritually prepared for
this question.

76
00:04:46.596 --> 00:04:47.647
One moment, please.

77
00:04:49.145 --> 00:04:53.613
So, the question was, why are we
using type instead of interface?

78
00:04:55.810 --> 00:05:00.788
And so, a while back there was
a lot more of a difference

79
00:05:00.788 --> 00:05:03.828
between a type and an interface.

80
00:05:03.828 --> 00:05:06.848
In modern versions of TypeScript,

81
00:05:06.848 --> 00:05:11.889
there are less differences
between types and interfaces.

82
00:05:11.889 --> 00:05:16.224
An interface is kind of like
a class where you can extend it and

83
00:05:16.224 --> 00:05:19.293
kind of override individual properties.

84
00:05:19.293 --> 00:05:21.392
A type is a little bit more constrained,
but

85
00:05:21.392 --> 00:05:25.447
you can kind of use it with what we'll see
later are like generics or type variables.

86
00:05:25.447 --> 00:05:28.021
A little bit easier when you're
combining stuff together.

87
00:05:28.021 --> 00:05:32.542
If one were to Google this,
you would find probably,

88
00:05:32.542 --> 00:05:36.560
I would say 80% of this
advice saying that for

89
00:05:36.560 --> 00:05:42.287
public facing things where you want
someone to be able to extend it,

90
00:05:42.287 --> 00:05:46.406
to be able to pull it
forward using interfaces for

91
00:05:46.406 --> 00:05:51.242
public libraries, but for
internal stuff using types.

92
00:05:51.242 --> 00:05:54.573
You will also find some
arguing the opposite.

93
00:05:54.573 --> 00:05:56.402
It doesn't matter so much.

94
00:05:56.402 --> 00:06:01.266
Generally speaking, my heuristic then
given the private public kind of peace and

95
00:06:01.266 --> 00:06:04.368
extending versus using unions and
intersections,

96
00:06:04.368 --> 00:06:06.355
which we'll see in a little bit.

97
00:06:06.355 --> 00:06:10.856
I tend to use types unless I
explicitly need an interface.

98
00:06:10.856 --> 00:06:14.286
There's little places where combining two
types that have an overriding property

99
00:06:14.286 --> 00:06:17.283
where it can become a little tricky and
then I'll grab for an interface.

100
00:06:17.283 --> 00:06:23.301
But my heuristic is to use types.

101
00:06:23.301 --> 00:06:27.994
However, if I were to go to somebody else,
join a new team, and in their

102
00:06:27.994 --> 00:06:33.496
application they're using interfaces
everywhere, you know what I start using?

103
00:06:33.496 --> 00:06:35.480
Interfaces, right?

104
00:06:35.480 --> 00:06:36.031
Yeah.

105
00:06:36.031 --> 00:06:38.142
&gt;&gt; Sorry, what exactly is an interface?

106
00:06:38.142 --> 00:06:43.567
&gt;&gt; So interface, if I wanted to change
this type from a type to an interface,

107
00:06:43.567 --> 00:06:46.467
I would change this word to interface.

108
00:06:46.467 --> 00:06:51.616
I would get rid of that equal sign,
no red squigglies, right?

109
00:06:51.616 --> 00:06:57.681
The difference is if I wanted to,
I can say interface,

110
00:07:03.003 --> 00:07:06.630
ForAdminsOnly, I can do this extends.

111
00:07:09.820 --> 00:07:11.035
&gt;&gt; It's kind of a class.

112
00:07:11.035 --> 00:07:14.674
&gt;&gt; Yeah, and I could say, it's always
got all the other properties but

113
00:07:14.674 --> 00:07:20.869
I could also say like, Right,

114
00:07:20.869 --> 00:07:26.045
so now this has name which is a string
on change with an event handler and

115
00:07:26.045 --> 00:07:28.869
is admin has to be set to true, right?

116
00:07:28.869 --> 00:07:36.750
If I wanted to do this with types,

117
00:07:36.750 --> 00:07:40.975
it would be like,

118
00:07:44.830 --> 00:07:46.467
That, right?

119
00:07:46.467 --> 00:07:48.945
So, they both get me the same effect.

120
00:07:48.945 --> 00:07:53.166
It's usually when these have overlapping
properties or stuff like that,

121
00:07:53.166 --> 00:07:56.788
stuff is a little bit different
in the actual implementations.

122
00:07:56.788 --> 00:08:01.206
But generally speaking,
these will do functionally the same thing.

123
00:08:01.206 --> 00:08:05.260
So my rule of thumb, so the question was.

124
00:08:05.260 --> 00:08:08.578
Do I always leave them in this file, or

125
00:08:08.578 --> 00:08:14.420
do I put them into a globally
available definition file.

126
00:08:14.420 --> 00:08:19.760
The answer to that question that either or
question is yes.

127
00:08:19.760 --> 00:08:24.060
Generally speaking,
I cuz if I put them into a data ts file,

128
00:08:24.060 --> 00:08:27.331
I think I have an empty
one sitting over here.

129
00:08:27.331 --> 00:08:31.775
Any types that I put into this file and
later examples will have stuff in here.

130
00:08:31.775 --> 00:08:36.283
Mostly cuz I don't wanna clutter stuff up,
but in a larger app,

131
00:08:36.283 --> 00:08:39.801
I will usually put the very
commonly used models.

132
00:08:39.801 --> 00:08:43.009
So the thing I work on has workflows and
workflows have events, and

133
00:08:43.009 --> 00:08:44.680
those are used all over the place.

134
00:08:44.680 --> 00:08:49.447
It's the whatever they're the core
things that your app is showing.

135
00:08:49.447 --> 00:08:53.760
If was Twitter tweets,
those types that I'm using everywhere.

136
00:08:53.760 --> 00:08:57.745
I don't want to import those constantly,
so I will move them into this file.

137
00:08:57.745 --> 00:09:01.845
That said, I personally and this is
definitely a subjective opinion thing.

138
00:09:03.530 --> 00:09:05.821
Tend to start them out in the file,

139
00:09:05.821 --> 00:09:09.701
cuz, I don't need to be
littering the global namespace.

140
00:09:09.701 --> 00:09:12.739
With all these types that are only ever
actually getting used in one file.

141
00:09:12.739 --> 00:09:16.224
So, normally a lot of my types
will start out in a file, and

142
00:09:16.224 --> 00:09:20.084
when I find myself getting very
annoyed importing them places.

143
00:09:20.084 --> 00:09:23.943
I will begin to break them out, and
move them into definition file, so,

144
00:09:23.943 --> 00:09:26.425
it's usually a refactor for
me at some point.

145
00:09:26.425 --> 00:09:28.020
&gt;&gt; Excuse me, I also have one more.

146
00:09:28.020 --> 00:09:32.319
If I recall correctly,
another difference between interface and

147
00:09:32.319 --> 00:09:36.245
type is that for typed you can or
the types when you pass it in.

148
00:09:36.245 --> 00:09:40.805
So especially if it's helpful in Redux,
I believe.

149
00:09:40.805 --> 00:09:42.670
I don't think you can do
that with interfaces.

150
00:09:42.670 --> 00:09:45.720
&gt;&gt; Yeah, I don't think so, it's one of
those things where since I predominantly

151
00:09:45.720 --> 00:09:47.003
use types of specially for that.

152
00:09:47.003 --> 00:09:50.716
For primitives I wouldn't straight I
think about for very simple things.

153
00:09:50.716 --> 00:09:53.756
Like a type makes total sense because
you can say this one or that one.

154
00:09:53.756 --> 00:09:57.252
There's really interesting
things you do with unions.

155
00:09:57.252 --> 00:10:00.482
It's like they are,
they have an overlap about 60 or 80%.

156
00:10:00.482 --> 00:10:03.702
There's a chart that I have
a broken link to, that'll fix.

157
00:10:03.702 --> 00:10:09.133
That shows most of the check boxes
are green on both of them with one or

158
00:10:09.133 --> 00:10:12.098
two smaller edge cases across both.

159
00:10:12.098 --> 00:10:16.360
I think the more important thing
is consistency in your code base.

160
00:10:16.360 --> 00:10:21.773
I choose to use types, but like I said,
they have certain limitations.

161
00:10:21.773 --> 00:10:25.090
And some edge cases interfaces
are gonna have certain limitations and

162
00:10:25.090 --> 00:10:25.827
the other one.

163
00:10:25.827 --> 00:10:29.282
But I think consistency is probably
the answer but there is not necessarily.

164
00:10:29.282 --> 00:10:30.475
Like this is right and

165
00:10:30.475 --> 00:10:34.263
this is wrong despite what blog
posts on the internet will tell you.

166
00:10:35.672 --> 00:10:42.419
I have been in code bases since I do both.

167
00:10:42.419 --> 00:10:44.888
Okay, so we've got on change handled.

168
00:10:44.888 --> 00:10:49.102
Again, if I needed to know
what a form element was, look,

169
00:10:49.102 --> 00:10:51.175
it's a form event handler.

170
00:10:51.175 --> 00:10:52.292
There are a bunch of these,

171
00:10:52.292 --> 00:10:54.632
I have a link in the notes slide
we can just see all of them.

172
00:10:54.632 --> 00:10:58.776
But generally speaking, I do wanna
encourage you, rather than looking at

173
00:10:58.776 --> 00:11:02.483
the list to kind of our habit is
going to be learning through doing.

174
00:11:02.483 --> 00:11:05.605
Learning through getting
hints from our editor.

175
00:11:05.605 --> 00:11:10.064
But these are basically just if you
like Command click you can eventually

176
00:11:10.064 --> 00:11:13.512
get to the definition and
kind of see everything I like.

177
00:11:13.512 --> 00:11:17.721
Obviously the types for
reactor obviously complex.

178
00:11:17.721 --> 00:11:19.206
But you can kind of go through and

179
00:11:19.206 --> 00:11:22.180
see that they're all kind of going
over the regular dom events.

180
00:11:22.180 --> 00:11:27.266
Cuz events have different properties,
only ones based on input

181
00:11:27.266 --> 00:11:32.831
elements have a value on the event
target and stuff along those lines.

182
00:11:32.831 --> 00:11:35.247
So it's basically trying to figure
out what you have on that event and

183
00:11:35.247 --> 00:11:36.480
what you don't.

184
00:11:36.480 --> 00:11:38.400
Cuz not all events in
the DOM are created equal,

185
00:11:38.400 --> 00:11:40.090
some of them have different properties.

186
00:11:40.090 --> 00:11:43.422
Like mouse moves have the mouse position,

187
00:11:43.422 --> 00:11:47.190
while form submits have
the target of the form.

188
00:11:47.190 --> 00:11:49.880
So it basically fills in all those for
you.

189
00:11:49.880 --> 00:11:53.015
So generally speaking, if I don't
know if I need to use an element,

190
00:11:53.015 --> 00:11:54.830
I need something that will match that.

191
00:11:54.830 --> 00:11:58.249
I will usually just even create
that element hover over and

192
00:11:58.249 --> 00:12:01.329
steal the answer is a lot of
times a lot easier for me.

193
00:12:01.329 --> 00:12:07.192
Than stopping when I'm doing pulling up
Safari because I will get distracted and

194
00:12:07.192 --> 00:12:08.925
I will look at guitars.

195
00:12:08.925 --> 00:12:12.877
So this is a lot of times easier to
kind of keep that train of thought and

196
00:12:12.877 --> 00:12:13.840
focus in there.

197
00:12:14.950 --> 00:12:15.470
Yeah.

198
00:12:15.470 --> 00:12:19.420
&gt;&gt; So for
my on change I assumed it was a function.

199
00:12:19.420 --> 00:12:22.380
I just did the open and
close parenthesis and

200
00:12:22.380 --> 00:12:25.582
arrow function to void and
that seemed to work.

201
00:12:25.582 --> 00:12:29.020
&gt;&gt; That will work as long as you
don't seek to use the event in it.

202
00:12:29.020 --> 00:12:34.672
Because it'll be like JavaScript will take
more arguments that a function uses and

203
00:12:34.672 --> 00:12:36.216
not just ignore them.

204
00:12:36.216 --> 00:12:39.903
In JavaScript, you took a function and
took two arguments and past it.

205
00:12:39.903 --> 00:12:44.142
Nine, it'll use the first two and
ignore the other seven.

206
00:12:44.142 --> 00:12:47.190
And so it'll work until you try to
use that event and it'll be like,

207
00:12:47.190 --> 00:12:49.129
I don't know what you're talking about.

208
00:12:49.129 --> 00:12:53.250
Type script is kinda cool,
it's got the same type system as OCaml.

209
00:12:53.250 --> 00:12:54.480
You're like, cool.

210
00:12:54.480 --> 00:12:57.460
Who amongst us has write
OCaml in our free time.

211
00:12:57.460 --> 00:12:59.787
One of the nice things is instead of Java,

212
00:12:59.787 --> 00:13:02.793
if you've ever seen that
enterprise FizzBuzz meme.

213
00:13:02.793 --> 00:13:06.316
Where they have to make
Abstract Factory abstract class for

214
00:13:06.316 --> 00:13:08.156
everything like TypeScript.

215
00:13:08.156 --> 00:13:14.060
As long as it roughly matches what you're
looking for, TypeScript is totally okay.

216
00:13:14.060 --> 00:13:17.971
That's kind of endless what we think about
what JavaScript too, if you're saying.

217
00:13:17.971 --> 00:13:22.699
This thing should have a first name and a
last name, and that's the type full name.

218
00:13:22.699 --> 00:13:25.772
If you pass another just regular old
JavaScript object that has a first name

219
00:13:25.772 --> 00:13:26.858
and a last name property.

220
00:13:26.858 --> 00:13:28.587
TypeScript, like thumbs up,

221
00:13:28.587 --> 00:13:31.782
even though you didn't
explicitly say it was that type.

222
00:13:31.782 --> 00:13:32.332
And so like,

223
00:13:32.332 --> 00:13:35.595
you can get away with stuff until you
do something that's actually going to.

224
00:13:35.595 --> 00:13:38.730
Like it's about as forceful as it
needs to be and no more than that.

225
00:13:38.730 --> 00:13:40.331
Until you try to use it, and

226
00:13:40.331 --> 00:13:44.450
we'll actually see that in another
example I believe, later on too.

227
00:13:45.730 --> 00:13:50.806
But yeah,
you could have done event is even

228
00:13:50.806 --> 00:13:56.740
like HTMLElement, and
actually should be void.

229
00:13:56.740 --> 00:13:59.271
And you can try to write your own,
but generally speaking,

230
00:13:59.271 --> 00:14:02.180
it's super nice especially if
you're gonna pass it through.

231
00:14:02.180 --> 00:14:06.330
Just to be like, hey, I'm expecting this
function that matches what I'm going to

232
00:14:06.330 --> 00:14:09.140
pass it to is better than
trying to write your own types.

233
00:14:09.140 --> 00:14:13.030
That mostly match up, because eventually,
this will lead to sadness.

234
00:14:13.030 --> 00:14:16.030
Eventually, you'll be like
slightly off in one use case.

235
00:14:16.030 --> 00:14:18.760
And then you have to stop what
you're doing and pay down your debt.

236
00:14:18.760 --> 00:14:20.250
&gt;&gt; This assignment stuff.

237
00:14:20.250 --> 00:14:21.620
&gt;&gt; Yeah.

238
00:14:21.620 --> 00:14:26.113
&gt;&gt; One other thing, do you do it
in the interface slash type above,

239
00:14:26.113 --> 00:14:30.430
just in case you want to add
more props than name on change?

240
00:14:30.430 --> 00:14:31.510
&gt;&gt; Yeah.
&gt;&gt; Later on?

241
00:14:31.510 --> 00:14:33.321
&gt;&gt; Yeah.
You can see that if I was in lining

242
00:14:33.321 --> 00:14:34.190
it in here.

243
00:14:34.190 --> 00:14:35.400
&gt;&gt; Yeah.

244
00:14:35.400 --> 00:14:39.342
&gt;&gt; And have I taken this to its natural
conclusion before breaking it out,

245
00:14:39.342 --> 00:14:40.337
of course I have.

246
00:14:40.337 --> 00:14:43.901
But you can see that trying to both
have the properties in here and

247
00:14:43.901 --> 00:14:45.491
then also to find the types.

248
00:14:45.491 --> 00:14:46.308
&gt;&gt; It gets, yeah.

249
00:14:46.308 --> 00:14:50.932
&gt;&gt; It gets ridiculous, and then if I ever
do need to export that out somewhere,

250
00:14:50.932 --> 00:14:52.670
guess why I end up with?

251
00:14:52.670 --> 00:14:53.500
&gt;&gt; Yeah.
&gt;&gt; So for

252
00:14:53.500 --> 00:14:58.590
me normally my workflow is every
part of me wants to do it in line.

253
00:14:59.950 --> 00:15:02.640
And most parts of me know
that I will regret it.

254
00:15:02.640 --> 00:15:05.883
And then so, if it's early in the day,
my willpower and

255
00:15:05.883 --> 00:15:08.375
I can resist the marshmallow on the table.

256
00:15:08.375 --> 00:15:12.943
I will break it out into a type later in
the day, things get a little bit fast and

257
00:15:12.943 --> 00:15:13.446
loose.

258
00:15:13.446 --> 00:15:15.697
And then I make poor choices and
inline it, but

259
00:15:15.697 --> 00:15:19.230
then I always eventually have to pull
it out on a long enough timeline.

260
00:15:19.230 --> 00:15:22.190
If it's just one argument,
you don't want to do all that extra work.

261
00:15:22.190 --> 00:15:23.590
Yeah, sure put it in there.

262
00:15:23.590 --> 00:15:25.449
But generally speaking,

263
00:15:25.449 --> 00:15:30.863
I will try to break it out into a type I
really wanna change this back to a type.

264
00:15:37.453 --> 00:15:40.786
I also wanna change this back
to [LAUGH] I wanna change all of

265
00:15:40.786 --> 00:15:44.130
the things I was just talking and
typing at the same time.

266
00:15:46.008 --> 00:15:50.781
The nice part is I can also
just grab it from here.

267
00:15:50.781 --> 00:15:52.663
If I hit tab, I can auto import it.

268
00:15:54.465 --> 00:16:00.969
From react
&gt;&gt; But it's a generic righ,so I think we.

269
00:16:00.969 --> 00:16:03.636
&gt;&gt; Yeah, I was hoping the autocomplete
was gonna pull it in I got distracted

270
00:16:03.636 --> 00:16:04.170
for a minute.

271
00:16:11.912 --> 00:16:14.990
Didn't auto import, so
I was just gonna say react.

272
00:16:14.990 --> 00:16:17.940
Cool, all right, so
that's back where I wanna to be.

273
00:16:17.940 --> 00:16:18.700
Pull this out too.

274
00:16:21.140 --> 00:16:25.216
Let's go ahead and
immediately regret previous mistakes here.

275
00:16:32.691 --> 00:16:37.622
Type NameBadgeProps pass in that name.

276
00:16:40.418 --> 00:16:45.198
And if I want to say
something that's optional,

277
00:16:45.198 --> 00:16:48.118
I can just say like greeting?

278
00:16:48.118 --> 00:16:50.502
And if it exists it should be a string.

279
00:16:50.502 --> 00:16:54.203
Now if I look over at this I'll see
that it can be a string or undefined.

280
00:16:54.203 --> 00:16:57.480
And what's really cool about this is,

281
00:16:57.480 --> 00:17:03.550
if I ever try to use greeting like it
exists, TypeScript will yell at me.

282
00:17:03.550 --> 00:17:06.915
Hey, that could be undefined,
right, and so

283
00:17:06.915 --> 00:17:10.729
if it's something that
that matters like strings.

284
00:17:10.729 --> 00:17:14.452
It'll just coerce into an empty
string a lot of times, no big deal.

285
00:17:14.452 --> 00:17:17.469
But if I'm trying to actually
use that value in some of this,

286
00:17:17.469 --> 00:17:18.948
definitely having a string or

287
00:17:18.948 --> 00:17:22.810
something along those lines it will force
me to confirm that it exists first.

288
00:17:22.810 --> 00:17:26.649
And we'll actually see that again in
a little bit of a later example two

289
00:17:26.649 --> 00:17:31.023
where we'll see that like I can't use
things unless I confirm that they exist.

290
00:17:31.023 --> 00:17:34.177
And some other like features along
those lines and then after I

291
00:17:34.177 --> 00:17:38.073
confirm exists then I'm free to do
whatever I want so on and so forth, yeah.

292
00:17:38.073 --> 00:17:40.642
&gt;&gt; I always had that confusion about,

293
00:17:40.642 --> 00:17:45.621
since we're using the question
mark optional TypeScript, right?

294
00:17:45.621 --> 00:17:48.097
Technically the need for null for
now goes away completely.

295
00:17:48.097 --> 00:17:50.624
We use undefined as the absence of value,
right?

296
00:17:50.624 --> 00:17:54.368
&gt;&gt; Yeah, I will sometimes
use null is like explicit.

297
00:17:54.368 --> 00:17:58.236
Yeah, like I use no in TypeScript the way
I'm supposed to use now that I haven't

298
00:17:58.236 --> 00:18:01.036
always used before,
which is like explicitly nothing.

299
00:18:01.036 --> 00:18:04.907
&gt;&gt; Because sometimes I've seen people
make mistakes when, let's say,

300
00:18:04.907 --> 00:18:08.595
you mark it optional or
something from libraries marked optional.

301
00:18:08.595 --> 00:18:13.608
And then instead of just using I guess
a truth value if that thing somebody

302
00:18:13.608 --> 00:18:16.819
explicitly does equals null that's
&gt;&gt; Yeah.

303
00:18:16.819 --> 00:18:18.866
&gt;&gt; That it's gonna fail but, but

304
00:18:18.866 --> 00:18:21.665
just because it's a silly mistake,
&gt;&gt; Yeah.

305
00:18:21.665 --> 00:18:26.831
&gt;&gt; But okay, so thank you.

306
00:18:26.831 --> 00:18:29.754
&gt;&gt; Yeah, and we'll know that you can't
pass it null like if I tried to pass

307
00:18:29.754 --> 00:18:31.433
a null in here, I get yelled at, right.

308
00:18:31.433 --> 00:18:33.926
It's like string or undefined.

309
00:18:33.926 --> 00:18:35.608
No zeros.

310
00:18:35.608 --> 00:18:36.927
No falses.

311
00:18:36.927 --> 00:18:39.026
Right, like string or undefined.

312
00:18:39.026 --> 00:18:41.369
Undefined can be falsely and
that can be a check, but

313
00:18:41.369 --> 00:18:43.508
it will know that case
like I will limit it down.

314
00:18:43.508 --> 00:18:46.953
We'll see a few other examples where it's
like things I normally would have done

315
00:18:46.953 --> 00:18:49.553
a whole bunch of type guards for
like in regular JavaScript.

316
00:18:49.553 --> 00:18:51.875
If this type of this, if it's that,
if it's the other thing, right?

317
00:18:51.875 --> 00:18:54.714
I don't wanna talk about how
many times I've gotten bitten

318
00:18:54.714 --> 00:18:56.199
by the fact that zero is false.

319
00:18:56.199 --> 00:18:58.801
I'm not interested in talking about that.

320
00:18:58.801 --> 00:19:00.086
It will save me for that.

321
00:19:00.086 --> 00:19:03.433
So we'll actually see this kind of like,
I wanted to point out now so

322
00:19:03.433 --> 00:19:06.338
that when we see it,
we're already mentally aware of it.

323
00:19:12.539 --> 00:19:16.085
And yeah,
now I can pass this in I can say like and

324
00:19:16.085 --> 00:19:18.756
we got to pass them to the props too.

325
00:19:18.756 --> 00:19:20.766
Look at autocomplete.

326
00:19:20.766 --> 00:19:24.392
Yes, right in this case like
I don't get yelled at because

327
00:19:24.392 --> 00:19:28.468
like passing an empty string into
an HTM element is fine, right?

328
00:19:28.468 --> 00:19:31.680
Or undefined coerces into
an empty string in this case.

329
00:19:31.680 --> 00:19:33.563
So that's totally okay.

330
00:19:33.563 --> 00:19:37.067
But if I tried to use it for
some other value, we will get yelled at.

331
00:19:37.067 --> 00:19:39.580
But you'll see that as I was
starting to use this component,

332
00:19:39.580 --> 00:19:42.008
especially if you're making
like this is all in the file.

333
00:19:42.008 --> 00:19:45.048
If I was then using this
component somewhere else,

334
00:19:45.048 --> 00:19:48.732
I implicitly have documentation
on this component, right?

335
00:19:48.732 --> 00:19:55.159
I can't really use it wrong, try me,
it is harder to use it wrong.

336
00:19:55.159 --> 00:19:57.351
How about that?

337
00:19:57.351 --> 00:19:59.809
And so
like implicitly you get documentation,

338
00:19:59.809 --> 00:20:03.502
implicitly you get safety checks as
I use this component other places.

