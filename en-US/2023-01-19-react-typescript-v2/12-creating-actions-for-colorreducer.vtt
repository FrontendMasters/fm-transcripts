WEBVTT

1
00:00:00.438 --> 00:00:07.673
All right, let's take a tour of this
new app together and check it out.

2
00:00:07.673 --> 00:00:13.843
So there's a lot of functionality
that still needs to be added in.

3
00:00:13.843 --> 00:00:16.695
Like for instance,
you can see the RGB values,

4
00:00:16.695 --> 00:00:20.912
you can't change them because there's
no action setup for that yet.

5
00:00:20.912 --> 00:00:22.767
Wow, imagine that.

6
00:00:22.767 --> 00:00:27.962
In a perfect world,
you could click any of these colors and

7
00:00:27.962 --> 00:00:31.153
switch it into like the main color.

8
00:00:31.153 --> 00:00:36.233
You can save colors was this
one called 24 Carrot in

9
00:00:36.233 --> 00:00:42.698
memory until you refresh the page,
but like generally speaking,

10
00:00:42.698 --> 00:00:49.757
it's got the accoutrements of a full
app that needs an implementation.

11
00:00:49.757 --> 00:00:55.623
Things that does have is stored somewhere
list of 6000 different color names.

12
00:00:55.623 --> 00:01:00.050
So if you happen to come across one of
the colors that has a name because there's

13
00:01:00.050 --> 00:01:01.737
billions of colors, right?

14
00:01:01.737 --> 00:01:06.655
If you come across one of the 6000 has
a name, it will show you the name.

15
00:01:06.655 --> 00:01:10.887
And this color input definitely works.

16
00:01:10.887 --> 00:01:17.223
I don't want to talk about how much time
I spent doing this looking for a color.

17
00:01:17.223 --> 00:01:20.593
It's not important.

18
00:01:20.593 --> 00:01:23.290
These are two of the named colors, though.

19
00:01:23.290 --> 00:01:24.892
1989 Miami Hotline was
the name of a color.

20
00:01:24.892 --> 00:01:25.927
That's what that one is.

21
00:01:25.927 --> 00:01:30.105
Blue Fire and 24 Carat were some of the
more delightful color names that I found.

22
00:01:30.105 --> 00:01:35.053
But if you get bored later, can you
scroll around looking for colors and

23
00:01:35.053 --> 00:01:36.961
see which ones have names?

24
00:01:36.961 --> 00:01:38.149
You, absolutely could.

25
00:01:38.149 --> 00:01:41.541
We should talk later about what
you do with your free time,

26
00:01:41.541 --> 00:01:46.336
but it's an option and I can't judge you
because it's what I do with my free time.

27
00:01:46.336 --> 00:01:49.497
So, we have the input field we have
some amount of a reducer set up.

28
00:01:49.497 --> 00:01:53.412
So we'll take a look at that and then
what we're going to try to do is kind of

29
00:01:53.412 --> 00:01:56.949
get at least either a these inputs or
be clicking on these buttons to

30
00:01:56.949 --> 00:02:00.929
work is kind of be a little bit of a
choose your own adventure like eventually

31
00:02:00.929 --> 00:02:05.642
we should probably have both working but
like yeah, we'll have choice time as well.

32
00:02:05.642 --> 00:02:07.213
So let's take a look at the app.

33
00:02:07.213 --> 00:02:08.398
Right now it's using new state.

34
00:02:08.398 --> 00:02:12.406
So we got to actually change this out for
a use reducer in a hot minute, but

35
00:02:12.406 --> 00:02:15.851
like first let's set up some of
those actions for ourselves.

36
00:02:15.851 --> 00:02:19.453
So what I'm gonna do is I'm
gonna create a new file.

37
00:02:19.453 --> 00:02:24.413
Let's call it a Colors.

38
00:02:24.413 --> 00:02:26.329
It's gonna have the red,
let's call it color reducer.

39
00:02:30.929 --> 00:02:31.760
It can just be a TS.

40
00:02:31.760 --> 00:02:35.352
We're not gonna run any TSX file in there.

41
00:02:35.352 --> 00:02:38.926
Now the one setting that I have turned on,
which is good for normal,

42
00:02:38.926 --> 00:02:42.312
which is like, it doesn't like
when I just have empty files, so

43
00:02:42.312 --> 00:02:44.089
that will go away in a heartbeat.

44
00:02:44.089 --> 00:02:47.656
Let's talk about really if we only
worried about the RGB colors and

45
00:02:47.656 --> 00:02:50.968
the hex colors, which we can
figure out some abstractions for

46
00:02:50.968 --> 00:02:54.361
doing better stuff in a little bit,
what would that look like?

47
00:02:54.361 --> 00:02:57.727
So we have type, update.

48
00:03:01.163 --> 00:03:06.217
Update color action, and
that's gonna take the equal sign.

49
00:03:06.217 --> 00:03:09.475
That's an action that's going to take,
let's call it

50
00:03:13.189 --> 00:03:18.338
Update hex color and its payload.

51
00:03:18.338 --> 00:03:22.374
Like there are some tricks that we can see
later for like ways to get even a better

52
00:03:22.374 --> 00:03:25.434
type here when we look at
template literals later but like,

53
00:03:25.434 --> 00:03:28.083
It's like hex color is right now a string,
right?

54
00:03:28.083 --> 00:03:33.003
And so now we've got a little
bit more of a full on put that

55
00:03:33.003 --> 00:03:35.632
export to keep things happy.

56
00:03:35.632 --> 00:03:40.781
We'll just say, let's make one more,
like, could you go ahead and like,

57
00:03:40.781 --> 00:03:45.696
did I later in a pre-baked thing make hsv,
hsl all the other color ones?

58
00:03:45.696 --> 00:03:47.068
Yes, absolutely.

59
00:03:47.068 --> 00:03:52.626
But let's just do a simple one for now.

60
00:03:52.626 --> 00:03:54.063
Type and we'll say, and

61
00:03:54.063 --> 00:03:58.718
like I'm not even super worried about like
miss typing because I know that like,

62
00:03:58.718 --> 00:04:03.662
the mistake won't bite me later because I
will have autocomplete on these two types.

63
00:04:03.662 --> 00:04:07.711
Now I will need to fix it because I don't
need to embarrass myself during code

64
00:04:07.711 --> 00:04:08.228
review.

65
00:04:08.228 --> 00:04:13.687
But here we are, RGB and we're gonna say
that takes an array of three values.

66
00:04:13.687 --> 00:04:17.444
You could just say number, number, number.

67
00:04:17.444 --> 00:04:20.184
And what's cool about this is that like,

68
00:04:20.184 --> 00:04:25.058
TypeScript knows that you're not just
gonna give it an array of numbers.

69
00:04:25.058 --> 00:04:28.184
You're gonna give it an array
of three numbers, right?

70
00:04:28.184 --> 00:04:32.299
Cuz an array of numbers could
be an array of one number,

71
00:04:32.299 --> 00:04:35.710
an array of 25 different numbers, right?

72
00:04:35.710 --> 00:04:37.826
This is a number, number, number, right?

73
00:04:37.826 --> 00:04:40.417
In a lot of ways this is either tuple or
a tuple,

74
00:04:40.417 --> 00:04:43.872
depending which way you like to say it,
you can have a string,

75
00:04:43.872 --> 00:04:47.680
you can have an array of,
can be a string or Boolean or a number.

76
00:04:47.680 --> 00:04:51.482
But if you say in the brackets string
Boolean number is expecting an array with

77
00:04:51.482 --> 00:04:54.581
the first element is a string,
the second one is a Boolean, and

78
00:04:54.581 --> 00:04:57.642
the third one is a number, right,
and this is a powerful way.

79
00:04:57.642 --> 00:05:00.470
Why are we using an array for RGB?

80
00:05:00.470 --> 00:05:03.719
Because the library that I'm using
to come up with the hex colors and

81
00:05:03.719 --> 00:05:06.284
do all the conversion that
is not apropos to the actual

82
00:05:06.284 --> 00:05:08.913
thing that we're trying to
learn here takes an array.

83
00:05:08.913 --> 00:05:13.173
[LAUGH] So there's ways to, you saw me use
that return value before could I have like

84
00:05:13.173 --> 00:05:16.879
pulled in the RGB function, and
unlike return value of that function,

85
00:05:16.879 --> 00:05:18.540
I could have done that as well.

86
00:05:18.540 --> 00:05:22.155
I'm gonna do later if I feel like it,
but for now that's yeah,

87
00:05:22.155 --> 00:05:23.598
that's how this works.

88
00:05:23.598 --> 00:05:25.120
So we've got that in place.

89
00:05:25.120 --> 00:05:28.175
What is my color state like right now
we're gonna say that everything is based

90
00:05:28.175 --> 00:05:29.357
on the hex color because why?

91
00:05:29.357 --> 00:05:33.599
Because the input color field
that is built into the DOM gives

92
00:05:33.599 --> 00:05:36.770
you back a hex code as
its event target value.

93
00:05:36.770 --> 00:05:41.345
So that seems like a good enough
place to base our color state on,

94
00:05:41.345 --> 00:05:43.816
color stable hex color state.

95
00:05:43.816 --> 00:05:45.170
Just color, hex color.

96
00:05:45.170 --> 00:05:48.065
It's gonna be that string.

97
00:05:48.065 --> 00:05:53.045
And, cool, our initial state,
I don't have a favorite hex color that

98
00:05:53.045 --> 00:05:56.460
I can remember off the top of my head,
maybe I do.

99
00:05:59.700 --> 00:06:03.880
Initial state should be
of the type color state.

100
00:06:03.880 --> 00:06:07.947
And this is mostly to keep me honest cuz
like I define this, I just wanna make

101
00:06:07.947 --> 00:06:11.757
sure the next thing I write,
particularly while I'm live coding, is

102
00:06:11.757 --> 00:06:16.800
the right shape cuz it's gonna otherwise
guess based on whatever I type in here.

103
00:06:16.800 --> 00:06:22.179
Does anyone have a favorite hex color?

104
00:06:22.179 --> 00:06:29.489
Seems like you're good enough
hex color the ad fi ad a five.

105
00:06:29.489 --> 00:06:35.595
Just for
viewers at home watching this later,

106
00:06:35.595 --> 00:06:40.449
that was Mark, [LAUGH] the founder and

107
00:06:40.449 --> 00:06:43.905
CEO of Frontend Masters.

108
00:06:43.905 --> 00:06:45.820
So just FYI.

109
00:06:48.090 --> 00:06:52.399
Cool, so we've got that in place.

110
00:06:52.399 --> 00:06:57.248
We'll make a color reducer which
is going to take stuff that we saw

111
00:06:57.248 --> 00:06:59.800
me kind of riffing on earlier.

112
00:06:59.800 --> 00:07:02.844
The state is going to be some
kind of color state, and

113
00:07:02.844 --> 00:07:06.391
I could say that by default,
it should be the initial state.

114
00:07:06.391 --> 00:07:11.960
And do I need to do both as you've all
learned, I do not want, wait a minute.

115
00:07:15.744 --> 00:07:19.234
Yeah, cuz if you use curly braces,
it thinks it's an object.

116
00:07:19.234 --> 00:07:24.030
Initial state, And

117
00:07:24.030 --> 00:07:27.260
I like to do both cuz I don't
trust myself honestly, right?

118
00:07:27.260 --> 00:07:31.094
This is kind of like it went like
cuz TypeScript will try to help and

119
00:07:31.094 --> 00:07:33.688
infer things sometimes I don't want that.

120
00:07:33.688 --> 00:07:38.170
Sometimes I want to triple check
everything because especially while live

121
00:07:38.170 --> 00:07:39.242
coding, right?

122
00:07:39.242 --> 00:07:43.472
And we'll have an action that is either
going to be the type update hex color

123
00:07:43.472 --> 00:07:46.800
action or
I'll call it ColorAction in this case.

124
00:07:46.800 --> 00:07:48.848
I think we should call it HexColorAction.

125
00:07:56.340 --> 00:07:59.292
That will change in both places, cool.

126
00:07:59.292 --> 00:08:03.580
And or
it is the type UpdateRGBColorAction.

127
00:08:04.820 --> 00:08:06.575
All right, so we've got that in place.

128
00:08:06.575 --> 00:08:10.538
We'll say if I was like, do I try to write
another switch statement even though I

129
00:08:10.538 --> 00:08:12.210
never write switch statements.

130
00:08:12.210 --> 00:08:15.139
I'm like,
now this is not the time for that.

131
00:08:15.139 --> 00:08:18.010
Will say, look at that autocomplete.

132
00:08:18.010 --> 00:08:20.928
Who doesn't love that?

133
00:08:20.928 --> 00:08:24.711
One thing I'm gonna do is show you real
quick as I'll have action payload, right?

134
00:08:24.711 --> 00:08:30.326
And so now it knows on the other side
of the equal signs that action payload,

135
00:08:30.326 --> 00:08:35.140
H hex color, right because it
knows what properties are allowed

136
00:08:35.140 --> 00:08:38.638
to be on an action of
the type update hex color.

137
00:08:38.638 --> 00:08:42.188
So it's like yo, that has a payload
totally autocomplete that for you but

138
00:08:42.188 --> 00:08:43.630
it's only got one property.

139
00:08:43.630 --> 00:08:48.483
So as you're deconstructing it because
obviously it's the hex color right and

140
00:08:48.483 --> 00:08:49.577
non RGB, right?

141
00:08:49.577 --> 00:08:50.750
Love this makes me so happy.

142
00:08:51.810 --> 00:08:56.430
And then we'll return everything else

143
00:08:56.430 --> 00:09:01.332
in the state plus that hex color, right?

144
00:09:01.332 --> 00:09:05.021
Let's grab some of this here for
it like cool thing.

145
00:09:05.021 --> 00:09:09.797
This comparison appears to be
unintentional because you already use this

146
00:09:09.797 --> 00:09:10.881
one basically.

147
00:09:10.881 --> 00:09:15.923
It sounds like it's saying the only
option left is update rgb color and

148
00:09:15.923 --> 00:09:18.833
you just did an rgb hex update hex color.

149
00:09:18.833 --> 00:09:22.494
Yeah, if I had more things
that you'd be like, yo,

150
00:09:22.494 --> 00:09:26.504
that one does not fit into all
the things I was expecting.

151
00:09:26.504 --> 00:09:28.550
So you can't have two cases in here.

152
00:09:30.400 --> 00:09:34.490
Right, and it's okay, cool, but
this can't be a hex color then.

153
00:09:39.729 --> 00:09:42.383
Rgb, cool and now it's like well,

154
00:09:42.383 --> 00:09:48.412
yeah that's not like that's not a valid
hex color so you can't do that, right?

155
00:09:48.412 --> 00:09:53.380
And so it's like just again following the
red squiggles makes things a lot easier.

156
00:09:53.380 --> 00:09:58.622
Yeah, so there is a library
that I'm going to pull in.

157
00:10:04.406 --> 00:10:08.388
I think it's what, color convert.

158
00:10:08.388 --> 00:10:10.792
Other trick.

159
00:10:10.792 --> 00:10:12.008
You start with this and go.

160
00:10:17.577 --> 00:10:20.137
If you don't remember exactly
what you're pulling out.

161
00:10:20.137 --> 00:10:21.110
Yeah, there it is.

162
00:10:21.110 --> 00:10:26.052
Cool yeah, normally we write it the other
way like Python does import the library

163
00:10:26.052 --> 00:10:30.351
and then what you want which would be
a lot easier for us but here we are.

164
00:10:30.351 --> 00:10:34.941
Typed, it was great to protect you
from lots of silly mistakes, but

165
00:10:34.941 --> 00:10:39.221
not ones that are totally legal and
legit JavaScript, right?

166
00:10:39.221 --> 00:10:41.643
So yeah, I pulled in this RGB and
I'm using it up here.

167
00:10:41.643 --> 00:10:45.322
All right, like before I was like,
Yo, it looks like it's not being used.

168
00:10:45.322 --> 00:10:49.621
And yet, if I wrote it up there at work,
but here was redefined,

169
00:10:49.621 --> 00:10:54.322
because one line above enclosure scope
you can have a variable that has

170
00:10:54.322 --> 00:10:57.285
the same name in
a different closure scope.

171
00:10:57.285 --> 00:11:00.551
And that is totally legal and
valid JavaScript.

172
00:11:00.551 --> 00:11:01.566
That is not what I wanted.

173
00:11:01.566 --> 00:11:05.877
So yeah, some of the rules still apply.

174
00:11:05.877 --> 00:11:10.920
So let's not redefine the same name
as our conversion function here.

175
00:11:10.920 --> 00:11:14.824
We'll just say context color is easier.

176
00:11:14.824 --> 00:11:19.381
Multi cursor later, will say, look,

177
00:11:19.381 --> 00:11:22.517
RGB is now what I think it is.

178
00:11:22.517 --> 00:11:26.454
RGB.hex exactly what I wanted, and

179
00:11:26.454 --> 00:11:30.905
I will pass it in action.payload.rgb.

180
00:11:30.905 --> 00:11:34.774
Now you could say maybe getting
a little fancy, deconstructing

181
00:11:34.774 --> 00:11:39.155
wasn't the greatest and you're doing
it again over here, it's fine.

182
00:11:39.155 --> 00:11:41.894
So cool, now I have both of those
actions kinda taken care of.

183
00:11:41.894 --> 00:11:43.175
Again, just to validate.

184
00:11:46.406 --> 00:11:50.911
We can see that it's type the tie
does not exist on never because

185
00:11:50.911 --> 00:11:55.510
we've handled all cases for
the action object and it's tight.

186
00:11:55.510 --> 00:11:57.838
Like that's it,
that's all they can possibly be.

187
00:11:57.838 --> 00:12:03.780
We know I'm still going to do this,
because I have it, honestly.

188
00:12:03.780 --> 00:12:09.499
So I don't trust myself and
I don't want to get bitten by it later,

189
00:12:09.499 --> 00:12:11.863
but probably forget that.

190
00:12:11.863 --> 00:12:17.989
Nice, so now we've got that as a full
on reducer let's export it and

191
00:12:17.989 --> 00:12:22.190
we can go ahead and
switch out an application.

192
00:12:27.259 --> 00:12:31.498
Let's set state with like say const,
useReducer.

193
00:12:34.349 --> 00:12:40.675
And that's going to bring in What
did I name that reducer before?

194
00:12:42.355 --> 00:12:45.406
Color reducer.

195
00:12:45.406 --> 00:12:46.765
Color reducer.

196
00:12:46.765 --> 00:12:50.683
And look, it's angry because I'm not
getting the right initial state,

197
00:12:50.683 --> 00:12:53.349
which I probably didn't export or
did look at me.

198
00:12:57.085 --> 00:12:58.638
Cool, so we've got that in place.

199
00:12:58.638 --> 00:13:01.570
And what's nice is it's gonna
know the types in this case.

200
00:13:01.570 --> 00:13:03.412
So we know that state.

201
00:13:05.435 --> 00:13:08.161
And if I pull it down here, you can see.

202
00:13:09.842 --> 00:13:10.680
It's got hex color.

203
00:13:10.680 --> 00:13:13.150
It automatically has the typing
of everything there.

204
00:13:13.150 --> 00:13:17.051
So I can even say, look, and that works.

205
00:13:17.051 --> 00:13:18.349
And we'll grab dispatch out.

206
00:13:20.087 --> 00:13:23.240
Cool, and now on change,
what we want to do is say

207
00:13:27.322 --> 00:13:33.256
Yeah, update-hex-color.

208
00:13:36.933 --> 00:13:39.760
And again, was that a key?

209
00:13:39.760 --> 00:13:43.864
I don't really have to remember because
all of my typing will handle stuff for me.

210
00:13:43.864 --> 00:13:44.840
What you angry about?

211
00:13:46.944 --> 00:13:48.490
One argument we got to

212
00:13:53.740 --> 00:13:58.047
Say it's actually event target value do
you don't fancy there but it caught it for

213
00:13:58.047 --> 00:13:59.060
me so that's good.

214
00:14:06.367 --> 00:14:07.970
That's not inside an object.

215
00:14:11.387 --> 00:14:19.826
Paul, what's you angry about now?

216
00:14:19.826 --> 00:14:21.470
Payload, it's got to
be wrapped in payload.

217
00:14:21.470 --> 00:14:22.720
That's why I made that object before.

218
00:14:26.320 --> 00:14:28.773
Like, the nice part is if I had
messed it up in JavaScript,

219
00:14:28.773 --> 00:14:30.336
you know what I would have found out?

220
00:14:30.336 --> 00:14:32.430
When I went to change
the color a bunch of times.

221
00:14:33.540 --> 00:14:36.969
Or when I already had a pre-written
component test and all those things.

222
00:14:36.969 --> 00:14:41.200
Like, all of those are feedback
loops that I don't love.

223
00:14:41.200 --> 00:14:42.332
That said, let's make sure.

224
00:14:45.430 --> 00:14:47.216
Cool, all my functionality works.

225
00:14:47.216 --> 00:14:51.340
We learned what Mark's favorite
color actually looks like.

226
00:14:51.340 --> 00:14:57.416
Which is a little bit
of like a snack grain.

227
00:14:57.416 --> 00:14:59.325
&gt;&gt; Definitely not very poorly.

228
00:14:59.325 --> 00:15:01.217
&gt;&gt; [LAUGH] Yeah, no,
I didn't say it was like yeah,

229
00:15:01.217 --> 00:15:02.705
delude that was your favorite color.

230
00:15:02.705 --> 00:15:04.470
We know why you chose it.

231
00:15:04.470 --> 00:15:07.355
I'll leave that as
an exercise to the reader.

232
00:15:07.355 --> 00:15:11.228
But we have that kind of in place,
so we've got that wired up.

