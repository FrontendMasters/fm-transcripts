WEBVTT

1
00:00:00.370 --> 00:00:03.737
Let's start with a slightly
simpler example and

2
00:00:03.737 --> 00:00:09.167
one of the ways to show you how this has
been helping you under the hood, right?

3
00:00:09.167 --> 00:00:13.466
Are you all familiar with
the data structure link list?

4
00:00:13.466 --> 00:00:14.408
Yeah, it's a collection, right?

5
00:00:14.408 --> 00:00:15.697
One node points to the other one.

6
00:00:15.697 --> 00:00:18.778
Like an array, you have the entire array.

7
00:00:18.778 --> 00:00:22.636
If you need to like work through it,
you totally can, but if you need to put

8
00:00:22.636 --> 00:00:27.055
one in the middle, you've got to basically
in C at least create a brand-new array,

9
00:00:27.055 --> 00:00:30.443
like put it in, it still happens
under the hood and JavaScript.

10
00:00:30.443 --> 00:00:34.022
But you do need to, it's tricky to put one
in a linked list is you have the first

11
00:00:34.022 --> 00:00:37.568
link like a chain link that points to
the next one, that points the next one.

12
00:00:37.568 --> 00:00:41.153
Which means if you want to get to the 56th
one, you have to go through all of them.

13
00:00:41.153 --> 00:00:45.170
But if you want to put a 33rd
one in the middle, unlike them,

14
00:00:45.170 --> 00:00:46.958
link them back in, right?

15
00:00:46.958 --> 00:00:49.846
So it's just a data
structure that is useful.

16
00:00:49.846 --> 00:00:52.824
It's one of those one where it's like,
almost like breadth first search or

17
00:00:52.824 --> 00:00:53.670
depth first search.

18
00:00:53.670 --> 00:00:57.318
You're like, I'm never going to need this,

19
00:00:57.318 --> 00:01:00.878
and then one day you
absolutely need it once.

20
00:01:00.878 --> 00:01:05.503
I say this is somebody who had
to write a breadth first search

21
00:01:05.503 --> 00:01:09.215
generator in JavaScript
that work on purpose.

22
00:01:09.215 --> 00:01:11.759
Cool.
And has written way too many compilers and

23
00:01:11.759 --> 00:01:14.502
parsers for
reasons I don't totally understand.

24
00:01:14.502 --> 00:01:17.161
I blame working on email editors and
outlook.

25
00:01:17.161 --> 00:01:22.362
Anyway, so we said type was like a link or
a link node, so

26
00:01:22.362 --> 00:01:27.481
we don't get confused with
what links mean in the web.

27
00:01:27.481 --> 00:01:30.457
It's a way to say, I'm gonna use
the same valuable multiple places,

28
00:01:30.457 --> 00:01:31.676
please store it somewhere.

29
00:01:31.676 --> 00:01:35.962
So we say link is T, and then the value,

30
00:01:38.769 --> 00:01:42.831
Should also be a T.

31
00:01:42.831 --> 00:01:47.053
And then it can point to another one,
which is a link node, optionally,

32
00:01:47.053 --> 00:01:51.228
because eventually this chain is
gonna have to end somewhere, right?

33
00:01:51.228 --> 00:01:54.046
A link node that is also the same T.

34
00:01:54.046 --> 00:01:57.953
And all the generic really does for
you is to say,

35
00:01:57.953 --> 00:02:02.735
whatever T is,
it should be the same T everywhere, right?

36
00:02:02.735 --> 00:02:10.203
And so if I say, const,
Text node, and that is the type.

37
00:02:16.372 --> 00:02:20.656
Not literally string, I mean,
you could do that too, but like.

38
00:02:20.656 --> 00:02:25.162
Then you'll notice it's angry at me,
because it's like hey,

39
00:02:25.162 --> 00:02:28.678
values missing in your
empty object as required.

40
00:02:28.678 --> 00:02:35.387
So, we say value, angry at me
because it said had to be a string.

41
00:02:41.036 --> 00:02:44.844
And then this one is saying, cool,
you can point to another link note,

42
00:02:44.844 --> 00:02:46.886
but it also has to be a string, right?

43
00:02:46.886 --> 00:02:51.709
And if this one started as a number,
It would have the same rules, right?

44
00:02:51.709 --> 00:02:54.214
And this is like what
we'll see in a second,

45
00:02:54.214 --> 00:02:57.277
is how some of the React
stuff isn't working for you.

46
00:02:57.277 --> 00:03:01.237
But generally speaking, so
then we could say like,

47
00:03:01.237 --> 00:03:04.208
is another link node, with the value.

48
00:03:09.508 --> 00:03:12.543
No question mark that time, though, right?

49
00:03:12.543 --> 00:03:15.808
And like this one has, it has to be
a text node because the first one was, so

50
00:03:15.808 --> 00:03:17.352
it's automatically casting it.

51
00:03:17.352 --> 00:03:21.542
It's already told you what this T
needs to be based on the first T.

52
00:03:21.542 --> 00:03:24.722
Fine, fine, fine, whatever, right?

53
00:03:24.722 --> 00:03:27.908
That is, roughly you can think about
them as variables for your type,

54
00:03:27.908 --> 00:03:30.015
that is not a wrong way
of thinking about them.

55
00:03:30.015 --> 00:03:32.710
It's a little nuanced,
but like, it's fine.

56
00:03:32.710 --> 00:03:37.894
The interesting part is the rule that
we have repeatedly double-clicked

57
00:03:37.894 --> 00:03:43.077
on to use a business term is if TypeScript
can figure it out on your behalf,

58
00:03:43.077 --> 00:03:45.687
you don't have to tell it what to do.

59
00:03:45.687 --> 00:03:46.492
So let's try this.

60
00:03:49.327 --> 00:03:55.401
CreateLink, it's gonna be a function,
and it's gonna take a value.

61
00:03:57.296 --> 00:04:06.702
And it's gonna return,
That value in the array.

62
00:04:06.702 --> 00:04:09.420
So just hover over it, it's like yeah,
I'm gonna yell at you about that any.

63
00:04:13.857 --> 00:04:16.807
So now it's like cool,
you got to return one of these.

64
00:04:16.807 --> 00:04:18.931
Okay, but what if I said,

65
00:04:30.284 --> 00:04:32.571
It was gonna be a function
that returns at.

66
00:04:40.676 --> 00:04:41.516
All right,

67
00:04:41.516 --> 00:04:46.644
that will theoretically make whatever
comes out known to be a link node.

68
00:04:46.644 --> 00:04:49.375
That's, I don't want to type
that ever again, honestly.

69
00:04:49.375 --> 00:04:52.139
So the other way I could do that,
will get better and

70
00:04:52.139 --> 00:04:53.952
better at this, as time goes on.

71
00:04:53.952 --> 00:04:57.981
I could say that hey, I'm going to tell
you that you should return a link node.

72
00:04:57.981 --> 00:04:59.548
All right, same basic effect.

73
00:04:59.548 --> 00:05:04.411
But what if I wanted to
have linked nodes for

74
00:05:04.411 --> 00:05:07.932
numbers, objects, arrays.

75
00:05:07.932 --> 00:05:12.798
I don't, like, anything,
I'm I going to make 1000 of these.

76
00:05:12.798 --> 00:05:17.632
And we may create a text node, and
we're going to create, like whatever,

77
00:05:17.632 --> 00:05:19.566
like, no, I don't want to.

78
00:05:19.566 --> 00:05:24.426
What I want to say is, yes, I'm going
to tell you what the type should be.

79
00:05:24.426 --> 00:05:29.278
And what I want you to do is like
make sure that I get the right type.

80
00:05:29.278 --> 00:05:34.169
So what I could say is,
And one thing you have

81
00:05:34.169 --> 00:05:38.243
to do if you have JSX turned on, and this
is why there's a little bit of reactism.

82
00:05:38.243 --> 00:05:42.224
The compiler has a hard time figuring out,

83
00:05:42.224 --> 00:05:48.872
is Steve talking about generic here or
is he starting to write some JSX?

84
00:05:48.872 --> 00:05:54.005
Right, so if you did like,
that'll totally work.

85
00:05:54.005 --> 00:05:59.633
And if you did, t and u,
t stands are type, by the way.

86
00:05:59.633 --> 00:06:02.618
U is because it's the letter after t.

87
00:06:02.618 --> 00:06:07.266
That's the level of sophistication,
like you'll see in the conventions.

88
00:06:07.266 --> 00:06:10.259
You can just put a comma too, and
in JSX, if you're not using JSX,

89
00:06:10.259 --> 00:06:11.501
you don't have to do that.

90
00:06:11.501 --> 00:06:16.383
But the compiler gets very confused
about what is JSX, and was the type.

91
00:06:16.383 --> 00:06:22.156
So now we're saying, cool,
there is this idea of T.

92
00:06:22.156 --> 00:06:26.339
And whatever T is,
it better be the value, and

93
00:06:26.339 --> 00:06:30.752
it also better be the T and
the link node, right?

94
00:06:30.752 --> 00:06:31.416
And you're like cool.

95
00:06:31.416 --> 00:06:37.365
Now it's a function that takes a T,

96
00:06:37.365 --> 00:06:40.545
and it returns a T.

97
00:06:40.545 --> 00:06:45.206
Great, excited, life's going on
I don't have any T's around.

98
00:06:45.206 --> 00:06:47.799
Where this becomes cool is I can say,

99
00:07:07.876 --> 00:07:10.110
Interesting, both those words.

100
00:07:10.110 --> 00:07:13.112
I'm not getting yelled at.

101
00:07:13.112 --> 00:07:15.119
String node.

102
00:07:15.119 --> 00:07:19.561
You're a link node string.

103
00:07:19.561 --> 00:07:22.919
Another node, your link node with number.

104
00:07:22.919 --> 00:07:27.819
I didn't even have to use
a generic in there, right?

105
00:07:27.819 --> 00:07:32.151
If this reminds you of use state and
use reducer,

106
00:07:32.151 --> 00:07:36.809
this is effectively how they were working,
right?

107
00:07:36.809 --> 00:07:40.753
It's like,
I'm a liberal arts major, but like,

108
00:07:40.753 --> 00:07:44.254
I was somewhat awake in algebra one,
right?

109
00:07:44.254 --> 00:07:49.275
Which is basically TypeScript is trying
to figure out how to solve for t.

110
00:07:49.275 --> 00:07:52.828
Cool, you filled in the value,
it figured out what T was and

111
00:07:52.828 --> 00:07:56.897
then confirm that the return value
was also the same thing, right?

112
00:07:56.897 --> 00:08:01.272
As long as you solve for one of these,
as long as you give TypeScript again,

113
00:08:01.272 --> 00:08:02.600
the recurring theme.

114
00:08:02.600 --> 00:08:06.704
If you find yourself writing
a ton of boilerplate right?

115
00:08:06.704 --> 00:08:08.260
That is a moment to step back and reflect,

116
00:08:08.260 --> 00:08:10.000
the moment that we're
talking about a break.

117
00:08:10.000 --> 00:08:12.391
Sometimes you need to go for
a walk to write better code.

118
00:08:12.391 --> 00:08:16.514
Right, it's a moment to go for a walk
because a lot of times if TypeScript can

119
00:08:16.514 --> 00:08:18.783
figure it out, and sometimes it can't.

120
00:08:18.783 --> 00:08:21.162
API requests when you're
talking to a server.

121
00:08:21.162 --> 00:08:24.769
Guests could use PTO and generate types
and import those types, as with cheating,

122
00:08:24.769 --> 00:08:26.121
you're importing the types.

123
00:08:26.121 --> 00:08:29.565
Generally speaking, like if it's something
external or something like that, or

124
00:08:29.565 --> 00:08:32.368
something that's coming from like
the user, like an input field,

125
00:08:32.368 --> 00:08:33.610
it could be a little trigger.

126
00:08:33.610 --> 00:08:37.046
Or that hex code where like I did
the is hex code thing we did there is.

127
00:08:37.046 --> 00:08:39.665
It's like there's occasional
times when you have to step in.

128
00:08:39.665 --> 00:08:42.079
There's occasional times or
arguments we have to help out.

129
00:08:42.079 --> 00:08:46.738
But generally speaking, if you're
writing good, especially with React,

130
00:08:46.738 --> 00:08:49.687
which has a very good
battle tested type system.

131
00:08:49.687 --> 00:08:53.295
If you find yourself running
a lot of type stuff,

132
00:08:53.295 --> 00:08:57.082
that is a moment for
pause and reflection, right?

133
00:08:57.082 --> 00:09:02.746
So those are our generics, and
we will see them on our journey

134
00:09:02.746 --> 00:09:07.759
to solve the create context
issue that we had before.

135
00:09:07.759 --> 00:09:10.352
Are we ready to put that monster to bed?

136
00:09:10.352 --> 00:09:12.331
We are going to pull out some generics.

137
00:09:12.331 --> 00:09:14.697
A little what I said before
about sometimes you see them,

138
00:09:14.697 --> 00:09:16.580
they make you want to cry
a little bit is true.

