WEBVTT

1
00:00:00.450 --> 00:00:02.131
I would love to give this a type.

2
00:00:02.131 --> 00:00:06.792
But as you can see, I have some
things to work out here, right?

3
00:00:06.792 --> 00:00:11.735
Well, it could have any
one of these strings, and

4
00:00:11.735 --> 00:00:18.103
it has a payload if and
only if it's updateDraftCount, right?

5
00:00:18.103 --> 00:00:22.510
The rest of them,
it doesn't have a payload, right?

6
00:00:22.510 --> 00:00:23.922
And you're like, cool, cool, cool,

7
00:00:23.922 --> 00:00:25.844
at least you can get
autocomplete on the type, right?

8
00:00:25.844 --> 00:00:29.822
And make sure you have
the right properties, wait.

9
00:00:29.822 --> 00:00:31.580
So there's a bunch of ways
that I could do this, right?

10
00:00:31.580 --> 00:00:36.104
The most naïve way,
which we'll skip to the second one,

11
00:00:36.104 --> 00:00:41.947
the most naïve way is to every case,
we'll have a increment action type,

12
00:00:41.947 --> 00:00:47.439
and we'll have a decrement action type,
so on and so forth, right?

13
00:00:47.439 --> 00:00:51.576
The cool thing about TypeScript and
its ability to figure stuff out,

14
00:00:51.576 --> 00:00:56.136
we kind of saw this before where we said,
if there's no quote, return, and

15
00:00:56.136 --> 00:00:58.364
then it knew what quote was, right?

16
00:00:58.364 --> 00:01:02.750
You can give us some information
about the problem at hand and

17
00:01:02.750 --> 00:01:05.247
it can kind of figure out the rest.

18
00:01:05.247 --> 00:01:10.443
So I could say, I could have,
let's say, type, I don't know,

19
00:01:10.443 --> 00:01:15.712
we'll call it, let's just call it, I'll

20
00:01:15.712 --> 00:01:20.864
just call it action.

21
00:01:20.864 --> 00:01:26.669
And this action can have
the type increment.

22
00:01:26.669 --> 00:01:31.303
I might break this, I could break
this down, I'll just type increment,

23
00:01:31.303 --> 00:01:33.092
decrement, Reset.

24
00:01:36.896 --> 00:01:38.480
Let's see, what were the other ones?

25
00:01:38.480 --> 00:01:39.670
The ones that didn't take payloads.

26
00:01:39.670 --> 00:01:44.754
I think we're just updateCountFromDraft,
cool.

27
00:01:47.843 --> 00:01:52.755
I gotta watch where I put my cursor,
and I can paste this in, right?

28
00:01:52.755 --> 00:01:54.314
And those don't have a type.

29
00:01:54.314 --> 00:01:59.576
And then the one that had to type, it's
gonna be a little bit different, which is,

30
00:02:03.373 --> 00:02:06.893
type ActionWithPayload.

31
00:02:09.216 --> 00:02:13.793
And in this case,
we'll say that the type is just this one.

32
00:02:13.793 --> 00:02:21.926
And we'll go ahead and say the payload
in this case is a number, cool.

33
00:02:21.926 --> 00:02:24.110
We gotta put some equal signs in there or
else things won't work.

34
00:02:29.120 --> 00:02:32.689
And where did I leave
dangling code otherwise?

35
00:02:32.689 --> 00:02:35.961
Down here where I got stuff like half
done, so we'll take that out for a minute.

36
00:02:35.961 --> 00:02:40.582
Yeah, cuz that's from my
previous iteration earlier,

37
00:02:40.582 --> 00:02:43.868
we'll get all that wired up in a second.

38
00:02:43.868 --> 00:02:46.406
That's just a half written, cool.

39
00:02:54.792 --> 00:02:55.411
I'll pull that back in.

40
00:02:55.411 --> 00:03:01.358
And what I wanna show you is a few things.

41
00:03:01.358 --> 00:03:04.590
I was gonna rewrite this one,
for instance.

42
00:03:04.590 --> 00:03:06.337
Let's take out the body of it so
I can use it again.

43
00:03:11.618 --> 00:03:12.817
Action.type, yeah.

44
00:03:12.817 --> 00:03:18.566
Oop, let's actually pull out all these for
a moment.

45
00:03:18.566 --> 00:03:22.797
I didn't replace any, so let's do both.

46
00:03:22.797 --> 00:03:28.629
We'll say that this is now
either one of these actions, Or

47
00:03:28.629 --> 00:03:30.783
that action with the payload.

48
00:03:30.783 --> 00:03:34.208
And if you look at some of them,
Redux, for instance,

49
00:03:34.208 --> 00:03:36.823
has abstractions to figure this all out.

50
00:03:36.823 --> 00:03:39.683
If you use their create
action in Redux Toolkit,

51
00:03:39.683 --> 00:03:42.205
it'll automatically type stuff for you.

52
00:03:42.205 --> 00:03:44.480
But now let's look what happens.

53
00:03:44.480 --> 00:03:48.074
In my reducer as I'm writing this logic,

54
00:03:48.074 --> 00:03:53.105
I go action.type is a new type equals,
look at this,

55
00:03:53.105 --> 00:03:58.877
cuz I've misspelled things before and
it falls through, right?

56
00:03:58.877 --> 00:04:01.703
I can do increment, cool.

57
00:04:01.703 --> 00:04:03.692
And then we'll say, we'll paste that in.

58
00:04:03.692 --> 00:04:05.650
And then check this out.

59
00:04:05.650 --> 00:04:11.026
action.type ===,
you know what's not on that list?

60
00:04:11.026 --> 00:04:11.789
Increment.

61
00:04:11.789 --> 00:04:13.286
You know why it's not on that list?

62
00:04:13.286 --> 00:04:14.580
Cuz I already returned from that.

63
00:04:14.580 --> 00:04:16.580
So it's not an option anymore, right?

64
00:04:16.580 --> 00:04:23.121
Cool, and so you can imagine now
as I bring these all back in,

65
00:04:23.121 --> 00:04:29.279
and I say if ( action.type0,
it's gotten nothing for

66
00:04:29.279 --> 00:04:35.436
me, right, cuz at this point,
action.type is never,

67
00:04:35.436 --> 00:04:42.393
because you handled all the cases
it could possibly be, right?

68
00:04:42.393 --> 00:04:48.953
And then, if I go in here and
I want to dispatch an action,

69
00:04:50.985 --> 00:04:53.860
Cool, I get type immediately.

70
00:04:53.860 --> 00:04:56.022
I get all the values.

71
00:04:56.022 --> 00:05:02.048
But let's say I use Increment,
And I wanna put a payload in.

72
00:05:04.755 --> 00:05:08.760
It's like, no, cuz that's not one
of the ones that takes a payload.

73
00:05:08.760 --> 00:05:13.727
Or more importantly, let's say that I
want the one that takes the payload, and

74
00:05:13.727 --> 00:05:15.814
I forget that it takes a payload.

75
00:05:19.009 --> 00:05:21.276
It's like, yeah,
you can't do that one, right?

76
00:05:21.276 --> 00:05:26.431
And so the amount of mental space
that you do not need to reserve for

77
00:05:26.431 --> 00:05:32.173
keeping track of that complexity,
it's just handled for you, right?

78
00:05:32.173 --> 00:05:36.903
Because the union type of action, action
payload is like, cool, if this first

79
00:05:36.903 --> 00:05:41.157
part matches, then it matches the fact
that it has no payload, right?

80
00:05:41.157 --> 00:05:45.154
Moving on, if it matches this one,
then it has to have a payload of a number.

81
00:05:45.154 --> 00:05:49.471
So types who kind of does some algebra
to figure this all out for you and

82
00:05:49.471 --> 00:05:52.235
of all the possible combinations, right?

83
00:05:52.235 --> 00:05:55.702
It is not a combination where you
have increment in a payload and

84
00:05:55.702 --> 00:06:00.558
there's not a combination where you have
updateDraftCount and not a payload, right?

85
00:06:00.558 --> 00:06:05.244
So as you go to use it, if you're saying
that it is the union of these two types,

86
00:06:05.244 --> 00:06:10.001
then you get the fact that it will figure
that out based on the information that it

87
00:06:10.001 --> 00:06:10.866
has, right?

88
00:06:10.866 --> 00:06:14.996
And that's kind of above me on like,
is my number a number, right,

89
00:06:14.996 --> 00:06:19.355
where you start to kinda tap into a lot
of the power here as well, right?

90
00:06:19.355 --> 00:06:21.325
And everything is kind of keeping track.

91
00:06:21.325 --> 00:06:25.174
And so some of those silly mistakes
that you might make, right, and it's one

92
00:06:25.174 --> 00:06:28.982
of those ones if you have not made that
thing already, you definitely will.

93
00:06:28.982 --> 00:06:33.421
And I think the other really cool thing
is then also one of the criticisms of

94
00:06:33.421 --> 00:06:36.717
reducers and
particularly popular with the criticism

95
00:06:36.717 --> 00:06:40.172
of Redux was that there was
a lot of boilerplate, right?

96
00:06:40.172 --> 00:06:44.343
To stop yourself from mistyping an action,

97
00:06:44.343 --> 00:06:48.410
what people used to do is const INCREMENT.

98
00:06:48.410 --> 00:06:52.603
And this is the best use of my
time at my salary level, right?

99
00:06:52.603 --> 00:06:57.805
Cuz if you misspell a variable name,
JavaScript yells at you.

100
00:06:57.805 --> 00:06:59.775
But now you can't misspell this.

101
00:06:59.775 --> 00:07:02.193
I mean you can, but
you will immediately know, right?

102
00:07:02.193 --> 00:07:07.648
And so a lot of the extra work is
solved for you as well, right?

103
00:07:07.648 --> 00:07:12.555
And having an autocomplete when
just using dispatch, either, a,

104
00:07:12.555 --> 00:07:17.733
removes the need in a lot of cases for
simple cases for action creators.

105
00:07:17.733 --> 00:07:21.190
I still like them cuz you can
do a thing where it's like, hey,

106
00:07:21.190 --> 00:07:24.665
automatically type the action for
me based on stuff, right?

107
00:07:24.665 --> 00:07:28.890
I'll show you an example if we get in
a second later where there is createAction

108
00:07:28.890 --> 00:07:33.436
in Redux toolkit that's like, hey, just
give me a function about what arguments it

109
00:07:33.436 --> 00:07:37.878
takes and what it spits out and I'll give
you the type for the action immediately.

110
00:07:37.878 --> 00:07:41.310
But a lot of cool stuff,
but some of the power, one,

111
00:07:41.310 --> 00:07:45.836
saves you in code you are gonna type
anyway to make your reducer safe,

112
00:07:45.836 --> 00:07:49.762
but then also, I have made
the mistake of mistyping a case.

113
00:07:49.762 --> 00:07:55.632
The other kind of example, and
I'm gonna see if I have one written up or

114
00:07:55.632 --> 00:08:01.721
yeah, no, I gotta write it myself,
but I'll do a simplified version.

115
00:08:01.721 --> 00:08:04.678
So we'll comment this out for a second.

116
00:08:04.678 --> 00:08:08.273
And I could theoretically get away
without the return state since all cases

117
00:08:08.273 --> 00:08:12.455
are handled if it was a If-else, but I'll
show you where this also becomes powerful.

118
00:08:12.455 --> 00:08:16.222
We all know that the best practice in
switch statements is to have a default

119
00:08:16.222 --> 00:08:17.026
case, right?

120
00:08:17.026 --> 00:08:25.125
So if we do switch(action.type),
we will do case.

121
00:08:25.125 --> 00:08:29.124
I love this, right, and I don't know.

122
00:08:29.124 --> 00:08:33.698
We'll just return the initial state each
ones I don't have to remember how to add

123
00:08:33.698 --> 00:08:34.310
numbers.

124
00:08:34.310 --> 00:08:39.198
Decrement, So we do,

125
00:08:39.198 --> 00:08:43.692
yeah, return the state as I like off
script, so we'll find out together

126
00:08:58.847 --> 00:09:00.725
See if I made mistake in there.

127
00:09:04.390 --> 00:09:06.132
Probably made a boo-boo.

128
00:09:06.132 --> 00:09:10.800
I'll pull it out in a second cuz
I greatly prefer If-elses, so

129
00:09:10.800 --> 00:09:15.820
my ability to write a switch statement
is slightly less than great,

130
00:09:15.820 --> 00:09:22.180
but a lot of times, it'll say, yo, you
don't even need the default state, right?

131
00:09:22.180 --> 00:09:25.763
It was curly cuz it'll figure
out that it was never.

132
00:09:25.763 --> 00:09:32.230
Say I have a screenshot of it, but,
It looks about the same maybe,

133
00:09:32.230 --> 00:09:33.550
cuz I didn't write real
implementations in here.

134
00:09:33.550 --> 00:09:38.562
But the major point versus watching
me do a switch statement repeatedly

135
00:09:38.562 --> 00:09:44.254
is that it'll analyze the code to figure
out, have you dealt with all the cases?

136
00:09:44.254 --> 00:09:47.041
Are you aware that everything
is gonna happen here, right?

137
00:09:47.041 --> 00:09:48.869
And then figure it out for you.

138
00:09:48.869 --> 00:09:51.845
In the same way that action
type became never, right,

139
00:09:51.845 --> 00:09:55.986
you can have a world where also you don't
need a default case cuz it knows that

140
00:09:55.986 --> 00:09:58.780
it hit every single case along the way.

141
00:09:58.780 --> 00:10:02.599
You can't dispatch a bad action that
would pass through, because it knows what

142
00:10:02.599 --> 00:10:05.969
the valid actions are, and it will
analyze your code as you pass it in.

143
00:10:05.969 --> 00:10:09.250
You can't forget a payload on
a valid action if it requires one.

144
00:10:09.250 --> 00:10:14.108
And even though it's a less bad scenario,
you can't accidentally put a payload

145
00:10:14.108 --> 00:10:19.038
on the wrong action, right, which is
sometimes we'll catch you of even, let's

146
00:10:19.038 --> 00:10:24.203
be clear, were updateCountFromDraft and
updateDraftCount my two best names ever?

147
00:10:24.203 --> 00:10:25.628
Probably not, right?

148
00:10:25.628 --> 00:10:26.887
Even as I was live coding,

149
00:10:26.887 --> 00:10:30.048
was I slightly where I was gonna
mess one of those up at some point?

150
00:10:30.048 --> 00:10:32.028
Absolutely, right?

151
00:10:32.028 --> 00:10:36.828
But the idea that I couldn't dispatch
the wrong action with a payload is

152
00:10:36.828 --> 00:10:41.800
incredibly powerful, right, and
we can kinda have all of that in place.

153
00:10:41.800 --> 00:10:46.426
So let me put back my if-elses
because I like the more honestly, and

154
00:10:46.426 --> 00:10:48.548
I'm not rewriting that code.

155
00:10:48.548 --> 00:10:52.475
I'm not rewriting add in front
of you over and over again.

156
00:10:52.475 --> 00:10:53.493
So we can pull this in.

157
00:10:57.764 --> 00:11:01.404
Right, and I know that I've
got type safety here, right?

158
00:11:01.404 --> 00:11:04.152
And there's a bunch of really interesting,

159
00:11:04.152 --> 00:11:09.081
I don't know if I can do it from scratch,
but I'll try to get the concept enough.

160
00:11:09.081 --> 00:11:14.092
Okay, we can go look at these different
objects and derive a type from it.

161
00:11:14.092 --> 00:11:16.308
I probably can't do it live,

162
00:11:16.308 --> 00:11:20.394
I can look it up in a second
from the last time I wrote it.

163
00:11:20.394 --> 00:11:24.153
Or we can look at createAction
from Redux toolkit.

164
00:11:24.153 --> 00:11:26.424
But there are other ways that you
don't even have to type this much.

165
00:11:26.424 --> 00:11:30.511
But to your question earlier,
getting all that stuff for

166
00:11:30.511 --> 00:11:33.576
free in Redux toolkit, cuz React Redux and

167
00:11:33.576 --> 00:11:38.619
Redux toolkit were rewritten
In TypeScript a year or two ago, right?

168
00:11:38.619 --> 00:11:44.333
So they have full TypeScript support out
of the box, so you get all this for free.

169
00:11:44.333 --> 00:11:49.021
So would I get super fancy with crazy
dynamic types if I was just doing a form

170
00:11:49.021 --> 00:11:49.939
validation?

171
00:11:49.939 --> 00:11:51.035
No, right?

172
00:11:51.035 --> 00:11:54.848
The last thing I'll show you at the end
of this workshop is this crazy thing,

173
00:11:54.848 --> 00:11:58.559
you can do polymorphic components and
even the example that inspired it.

174
00:11:58.559 --> 00:12:01.765
I went to look at their source code and
they have a hard coded list, right?

175
00:12:01.765 --> 00:12:05.650
Sometimes, it's just easier to be
explicit than to be totally dynamic.

176
00:12:06.720 --> 00:12:09.107
So for short thing like this
will give you all the safety and

177
00:12:09.107 --> 00:12:11.840
it will stop you from
the stupid mistake that I made.

178
00:12:11.840 --> 00:12:14.778
And it's not that much more work
than the safeguards we were

179
00:12:14.778 --> 00:12:18.387
putting regular JavaScript,
plus you get autocomplete in that sense.

180
00:12:18.387 --> 00:12:23.065
Plus it will protect you from extra
properties in a way that even a lot of our

181
00:12:23.065 --> 00:12:28.138
safeguards don't, because you could
be like, okay, we'll throw an error.

182
00:12:28.138 --> 00:12:31.560
Yeah, that's great in development, right?

183
00:12:31.560 --> 00:12:35.333
You've gotta be a little bit careful how
much you're throwing errors around when

184
00:12:35.333 --> 00:12:38.845
you push it to production, right,
cuz it's like taking the whole UI down.

185
00:12:38.845 --> 00:12:42.523
It's usually not great,
it's usually frowned upon, so

186
00:12:42.523 --> 00:12:44.481
it gets a little bit trickier.

187
00:12:44.481 --> 00:12:49.237
But the amount you get for free by
just one, I think we saw two things,

188
00:12:49.237 --> 00:12:53.912
what an any will do to you,
it infected everything, and it made it so

189
00:12:53.912 --> 00:12:56.142
I made a boo boo preparing this.

190
00:12:56.142 --> 00:13:01.402
And two, just the amount of, even
autocomplete and knowing that I handled

191
00:13:01.402 --> 00:13:06.098
all the cases and stuff along those
lines is incredibly powerful.

192
00:13:06.098 --> 00:13:10.772
And this is my point that I made
earlier in the workshop that, yeah,

193
00:13:10.772 --> 00:13:15.610
having to have the type and
not just doing whatever you want, I guess,

194
00:13:15.610 --> 00:13:18.740
is a slightly more typing, pun unintended.

195
00:13:18.740 --> 00:13:21.995
But the payoff of typing,
you save later, and

196
00:13:21.995 --> 00:13:27.188
also weird head-scratching errors,
you have to throw console logs in.

197
00:13:27.188 --> 00:13:33.146
I am aware that the exists,
I don't care, saves you later.

