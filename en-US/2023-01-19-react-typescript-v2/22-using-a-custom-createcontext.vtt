WEBVTT

1
00:00:00.306 --> 00:00:03.379
So let's take this thing out for
a spin, let's try it out.

2
00:00:03.379 --> 00:00:08.156
This is hard-earned, and
so let's try it out.

3
00:00:08.156 --> 00:00:13.797
So now, [LAUGH] and
you got to ask yourself,

4
00:00:13.797 --> 00:00:17.104
right, what's worse?

5
00:00:17.104 --> 00:00:20.545
And if someone's got a better solution,
I'm here for it.

6
00:00:20.545 --> 00:00:25.285
But as far as I know, this is the way.

7
00:00:25.285 --> 00:00:30.573
So what we wanna do is say that,
we're gonna get rid of React.

8
00:00:36.357 --> 00:00:42.632
And am I so lazy that I'm gonna
tempt auto complete here?

9
00:00:42.632 --> 00:00:45.402
Look it, I got it, cool.

10
00:00:45.402 --> 00:00:48.698
All right, so createContext,
we'll say it's ColorContextState.

11
00:00:48.698 --> 00:00:50.101
Now, this one doesn't take a value.

12
00:00:52.606 --> 00:00:56.891
And it does return me a different,
it returns to both these things.

13
00:00:56.891 --> 00:00:58.650
So I have my own used context.

14
00:01:23.003 --> 00:01:28.614
So far so good, except for
the fact that I got rid of some stuff.

15
00:01:28.614 --> 00:01:34.565
This one should still now wrap index.tsx,
right?

16
00:01:34.565 --> 00:01:39.707
That should still be the same,
one that we had before.

17
00:01:39.707 --> 00:01:44.251
So now we have to use our own useContext,
let's see.

18
00:01:44.251 --> 00:01:47.768
Try to have a more convenient way.

19
00:01:47.768 --> 00:01:49.209
Yeah, I don't.

20
00:01:51.209 --> 00:01:54.147
This is now we get to
the points of opinions, and

21
00:01:54.147 --> 00:01:56.283
you can do whatever you want here.

22
00:01:56.283 --> 00:01:58.933
I wanna pull this out of the array and
export it.

23
00:01:58.933 --> 00:02:01.531
I want it to be easy,
I want it to be reliable.

24
00:02:01.531 --> 00:02:05.109
I don't really wanna pull out the both
cuz I don't need both all the time.

25
00:02:05.109 --> 00:02:09.472
So what I wanna say is I'll call
this one useColorContext, and

26
00:02:09.472 --> 00:02:11.460
then export to useContext.

27
00:02:11.460 --> 00:02:14.818
I don't ever have to think about what the
name was again, you could do the opposite,

28
00:02:14.818 --> 00:02:15.734
I don't really care.

29
00:02:15.734 --> 00:02:24.293
I personally have waffled on this one,
export const.

30
00:02:28.774 --> 00:02:35.566
If you'd rather use your special one here
and keep the name inside, I don't care.

31
00:02:35.566 --> 00:02:36.607
So we can do this.

32
00:02:41.659 --> 00:02:44.057
We wanna get rid of the one
we pulled in from React.

33
00:02:52.061 --> 00:02:55.927
And this one does not take an argument.

34
00:02:55.927 --> 00:02:59.432
Cool, there are other versions of this,
I have to go hunt down.

35
00:03:04.476 --> 00:03:08.869
This is now my bespoke one, I don't need
to pull in the context all over the place,

36
00:03:08.869 --> 00:03:10.856
I don't need to pull in useContext.

37
00:03:10.856 --> 00:03:14.111
I have a hook that's entirely encapsulated
with everything it needs to know,

38
00:03:14.111 --> 00:03:15.902
I can use this one from
this point forward.

39
00:03:19.499 --> 00:03:21.068
Yeah, I can pull the dispatch out.

40
00:03:28.612 --> 00:03:31.077
And are we ready for the big reveal?

41
00:03:31.077 --> 00:03:31.772
Does it work?

42
00:03:31.772 --> 00:03:34.750
Did he do all that work to
find out that he has a bug?

43
00:03:40.530 --> 00:03:43.137
Everything works, so there's no more as.

44
00:03:43.137 --> 00:03:47.736
I did have to create abstraction,
I did have to wire up my own bespoke

45
00:03:47.736 --> 00:03:52.110
version of createContext that
is special to throwing an error.

46
00:03:52.110 --> 00:03:55.270
And I don't disagree that that
shouldn't be in the library,

47
00:03:55.270 --> 00:03:58.453
cuz maybe you don't wanna throw an error,
maybe insisting.

48
00:03:58.453 --> 00:04:02.225
And forcing that on every
JavaScript user is also a thing and

49
00:04:02.225 --> 00:04:04.799
changing the API and a breaking change.

50
00:04:04.799 --> 00:04:10.937
And if you've used React's Redux
toolkit or anything like that,

51
00:04:10.937 --> 00:04:15.759
wrapping things with the more
specific parts of your

52
00:04:15.759 --> 00:04:20.489
use case is a common pattern
that you'll see a lot.

53
00:04:20.489 --> 00:04:25.400
You get to choose which one you like more.

54
00:04:25.400 --> 00:04:28.476
If you're really against
the casting as an as, that is fine.

55
00:04:28.476 --> 00:04:33.184
I think the reason to kinda talk about
this one is it does pull together many of

56
00:04:33.184 --> 00:04:37.768
the subtle undercurrents of what
we've been talking about using React.

57
00:04:37.768 --> 00:04:42.736
And I think the other powerful thing
that you can do if you're like, yo,

58
00:04:42.736 --> 00:04:48.047
to useContext hooks, I'm gonna import
the wrong one and it's gonna break.

59
00:04:48.047 --> 00:04:51.001
I love your thinking,
I agree, let's fix that.

60
00:04:57.166 --> 00:05:00.869
So yeah, this is gonna be confusing.

61
00:05:00.869 --> 00:05:05.901
A lot of the times,
I want to build my particularly my state

62
00:05:05.901 --> 00:05:12.801
management code in my React app in a way
that allows me to change my mind, right?

63
00:05:12.801 --> 00:05:15.325
What if I don't wanna use
a context API anymore?

64
00:05:15.325 --> 00:05:18.355
What if I wanna switch to Redux?

65
00:05:18.355 --> 00:05:21.081
Do I wanna redo everything in my app?

66
00:05:21.081 --> 00:05:23.208
No, I don't.

67
00:05:23.208 --> 00:05:24.709
So I could do stuff like,

68
00:05:30.533 --> 00:05:34.609
useHexColor, right?

69
00:05:34.609 --> 00:05:37.712
The name doesn't imply that
I'm using a context API,

70
00:05:37.712 --> 00:05:42.786
it doesn't imply that I'm using Redux, it
doesn't imply any of these things, right?

71
00:05:42.786 --> 00:05:47.660
That's gonna do, let's say, magically I
didn't export this one anyway, that this

72
00:05:47.660 --> 00:05:52.564
becomes an internal implementation detail
that I never exposed to the world, right?

73
00:05:52.564 --> 00:06:02.560
And so now I could say, This one.

74
00:06:02.560 --> 00:06:04.335
Already, I'm confusing myself, right?

75
00:06:13.846 --> 00:06:18.352
And what I will do in most of the apps
that I work on is create a series of these

76
00:06:18.352 --> 00:06:20.553
that hide what I'm using, right?

77
00:06:20.553 --> 00:06:23.177
Now, throughout my app,
I call useHexColor.

78
00:06:23.177 --> 00:06:28.877
I can call,
Depending on how much I have going on,

79
00:06:28.877 --> 00:06:33.880
if there's a whole bunch of things, I can
say I'll maybe make a use actions, right?

80
00:06:33.880 --> 00:06:36.255
Or if it's like use update hexColor,

81
00:06:36.255 --> 00:06:40.571
it'll just be a function that
dispatches the right action, right?

82
00:06:40.571 --> 00:06:43.090
There's a bunch of ways
that you can do this, but

83
00:06:43.090 --> 00:06:45.129
what I'll frequently do is create it.

84
00:06:45.129 --> 00:06:47.294
I might choose to use this technique,

85
00:06:47.294 --> 00:06:50.010
but I want to hide this
from everyone involved.

86
00:06:50.010 --> 00:06:54.301
I think one of the roles under the hood,
it's electrons going through copper wires.

87
00:06:54.301 --> 00:06:57.889
It's a levels of abstraction
to make things better.

88
00:06:57.889 --> 00:07:02.287
One of my important rules when
maintaining a large code base,

89
00:07:02.287 --> 00:07:07.971
that I like to enforce on my team, which
is sometimes you have to do dark things.

90
00:07:07.971 --> 00:07:11.039
You put that in a file and
you encapsulate it in one place and

91
00:07:11.039 --> 00:07:13.932
you do not let it spread
through our code base, right?

92
00:07:13.932 --> 00:07:18.432
Sometimes an API is not what we want, and
we have to put an abstraction over it.

93
00:07:18.432 --> 00:07:22.864
Okay, that lives in one place contained,
right?

94
00:07:22.864 --> 00:07:25.932
It's like every horror
movie you've ever seen,

95
00:07:25.932 --> 00:07:28.353
you put that in the dungeon somewhere.

96
00:07:28.353 --> 00:07:30.048
You don't let the dragon out.

97
00:07:30.048 --> 00:07:32.647
And so you can encapsulate a lot of this.

98
00:07:32.647 --> 00:07:37.245
And if you look at useHexColor,
your hexColor is still a string,

99
00:07:37.245 --> 00:07:40.685
which has bitten me once today,
but it's true.

100
00:07:40.685 --> 00:07:44.736
The rest of my application is type save,
is aware of everything,

101
00:07:44.736 --> 00:07:47.545
it's not string or something else, right?

102
00:07:47.545 --> 00:07:55.969
Even the simplest version is to say
useDispatch, right, which will,

103
00:08:03.637 --> 00:08:08.406
This looks like the one I was in libraries
that we can talk about later, right?

104
00:08:08.406 --> 00:08:12.990
That's it, that's the type,
I will get dispatched out of there, right?

105
00:08:12.990 --> 00:08:15.083
And then I can use it everywhere.

106
00:08:15.083 --> 00:08:17.103
Everything we did is hidden.

107
00:08:17.103 --> 00:08:19.932
It's sounds like I'm now juggling
two different createContexts,

108
00:08:19.932 --> 00:08:22.136
two different useContexts,
or anything like that.

109
00:08:22.136 --> 00:08:25.932
I can create it up in this file,
and then for the rest of my app,

110
00:08:25.932 --> 00:08:30.385
I can just use dispatch or I can even
make more specific ones, right, and

111
00:08:30.385 --> 00:08:32.583
have those available everywhere.

112
00:08:32.583 --> 00:08:35.833
Use adjust color and it'll give
me the functions for doing that.

113
00:08:35.833 --> 00:08:41.234
I use those throughout my app,
if I dramatically change my mind, right,

114
00:08:41.234 --> 00:08:46.476
then I have the option to just change
my abstractions in this one place.

115
00:08:46.476 --> 00:08:51.903
And the problem with TypeScript,
as long as I adhere to the same contract,

116
00:08:51.903 --> 00:08:54.844
everything is just gonna work, right?

117
00:08:54.844 --> 00:08:57.792
And so
it's one of the advantages that you get,

118
00:08:57.792 --> 00:09:02.003
is a compiler is gonna run around
if you use these hooks everywhere.

119
00:09:02.003 --> 00:09:06.374
And it's gonna confirm that if you swap
out this implementation for even the other

120
00:09:06.374 --> 00:09:10.821
one, right, that original one, nothing
changes in the rest of your app, right?

121
00:09:10.821 --> 00:09:16.998
If you swap out the context API for
Redux, nothing changes in your app.

122
00:09:16.998 --> 00:09:22.591
If you swap out use state for use reducer,
nothing changes in your app, right?

123
00:09:22.591 --> 00:09:26.320
And TypeScript will make sure
that you didn't make a boo boo,

124
00:09:26.320 --> 00:09:31.566
almost immediately at lightning speed,
to make sure that everything works, right?

125
00:09:31.566 --> 00:09:33.640
And you get all those abstractions for
free.

