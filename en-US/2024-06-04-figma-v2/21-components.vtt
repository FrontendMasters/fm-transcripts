WEBVTT

1
00:00:00.150 --> 00:00:06.110
All right, so we talked about reusable
styles, we talked about reusable values.

2
00:00:06.110 --> 00:00:09.518
And just like JavaScript,
now we'll go up one level of abstraction,

3
00:00:09.518 --> 00:00:11.930
let's talk about reusable components.

4
00:00:11.930 --> 00:00:16.925
Again, this is where my job gets really
easy because when I say the word

5
00:00:16.925 --> 00:00:20.311
component, it's not like but
it's deep now,

6
00:00:20.311 --> 00:00:23.374
it's like kind of the same thing, right?

7
00:00:23.374 --> 00:00:28.534
It's like a reusable piece
of UI that you can use and

8
00:00:28.534 --> 00:00:31.394
change and update things.

9
00:00:31.394 --> 00:00:34.639
There are some nuances that
we'll kind of get into, but

10
00:00:34.639 --> 00:00:37.414
let's start with the very
basics in this case.

11
00:00:37.414 --> 00:00:41.539
Which is let's say we wanted to create
a little kinda like fake button,

12
00:00:41.539 --> 00:00:46.075
just like we did before, auto layout
will say Button or Button, in this case,

13
00:00:46.075 --> 00:00:47.330
Button, all right?

14
00:00:47.330 --> 00:00:52.390
And we'll say make that
an auto layer frame, awesome.

15
00:00:54.990 --> 00:00:57.958
And let's go ahead and let's actually say.

16
00:01:00.864 --> 00:01:06.742
I don't wanna use the cozy padding,
so we'll say.

17
00:01:10.051 --> 00:01:16.654
Rounded and I'm gonna then say that
that is, I think I like 16 for buttons.

18
00:01:16.654 --> 00:01:20.629
Good part about variables,
I can change it if I don't like it,

19
00:01:20.629 --> 00:01:24.835
and we'll scope that over only
a quarter radius, corner radius.

20
00:01:24.835 --> 00:01:28.710
Cool, and so let's go ahead, and

21
00:01:28.710 --> 00:01:34.591
we'll say that that is gonna
be our rounded value and

22
00:01:34.591 --> 00:01:39.285
then the fill is gonna be primary 400.

23
00:01:39.285 --> 00:01:44.243
Now that's too roundy.

24
00:01:44.243 --> 00:01:49.055
So go ahead, change that to an 8.

25
00:01:49.055 --> 00:01:51.765
Nice, that looks like a button.

26
00:01:51.765 --> 00:01:54.954
Again, I can maybe make another
variable that is button label,

27
00:01:54.954 --> 00:01:58.045
just like you saw in those
other examples before.

28
00:01:58.045 --> 00:02:03.807
For the sake of staying on topic,
I'll skip that for a moment.

29
00:02:03.807 --> 00:02:05.017
So I have this button,

30
00:02:05.017 --> 00:02:09.097
most of the UIs I've worked on
tend to have more than one button.

31
00:02:09.097 --> 00:02:11.910
There are a lot of buttons,
almost as many as they have input fields,

32
00:02:11.910 --> 00:02:13.777
there's a lot more input fields.

33
00:02:13.777 --> 00:02:18.187
But I might wanna have more buttons, I
might wanna use them throughout my design.

34
00:02:18.187 --> 00:02:20.459
Even though making that
button was somewhat simple.

35
00:02:20.459 --> 00:02:23.615
And even though I'm referencing at
least for the border radius and for

36
00:02:23.615 --> 00:02:27.522
the fill color, changeable things, I don't
wanna make this button that many times,

37
00:02:27.522 --> 00:02:28.076
all right?

38
00:02:28.076 --> 00:02:32.176
In fact, cuz there are other things about
this, like could I make more variables for

39
00:02:32.176 --> 00:02:32.884
the padding?

40
00:02:32.884 --> 00:02:34.076
Should I?
Absolutely,

41
00:02:34.076 --> 00:02:38.084
I should because I'm gonna use the same
kind of values multiple places.

42
00:02:38.084 --> 00:02:43.753
But the idea of a button I might
seek to have in more than one place.

43
00:02:43.753 --> 00:02:48.649
So as you sort of build out a design
system and some companies have a design

44
00:02:48.649 --> 00:02:53.314
system team to build out a design
system a long enough period of time.

45
00:02:53.314 --> 00:02:56.164
You always, there's a design
system you intended to build and

46
00:02:56.164 --> 00:02:59.498
the design system you ended up with
just because your application grew and

47
00:02:59.498 --> 00:03:01.350
has more than one button.

48
00:03:01.350 --> 00:03:05.569
Are there are various different
things that you use, so

49
00:03:05.569 --> 00:03:10.412
with this we can go ahead, and
I can either click this up here, or

50
00:03:10.412 --> 00:03:14.299
I can right-click on it and
say create component.

51
00:03:14.299 --> 00:03:19.795
Or I'm sure there's a keystroke that I can
press was obviously, Options+Cmd+K, and

52
00:03:19.795 --> 00:03:25.650
it'll go ahead, and it'll create a button,
and then it gets this purple thing, right?

53
00:03:25.650 --> 00:03:26.887
And that seems real cool.

54
00:03:26.887 --> 00:03:29.913
I like that, and if I go into assets,

55
00:03:29.913 --> 00:03:35.600
under local components,
I have the concept of a button.

56
00:03:35.600 --> 00:03:39.803
And with this button,
I can make many buttons.

57
00:03:39.803 --> 00:03:46.029
This is also a button,
you're all JavaScript engineers, right?

58
00:03:46.029 --> 00:03:48.759
Are you familiar with the idea
of prototype inheritance, right?

59
00:03:48.759 --> 00:03:50.049
Nobody deals with it anymore.

60
00:03:50.049 --> 00:03:53.484
But this button is basically
the kind of prototype for

61
00:03:53.484 --> 00:03:55.859
all of these other buttons, right?

62
00:03:55.859 --> 00:04:00.671
So I did not store the padding
in a variable like an adult.

63
00:04:00.671 --> 00:04:04.031
I just made a button real quick, and
then dragged a bunch onto the page,

64
00:04:04.031 --> 00:04:05.487
did not store the label color.

65
00:04:05.487 --> 00:04:09.086
But what I can do is I can
change my prototype and

66
00:04:09.086 --> 00:04:13.703
then for all the properties
that are not being overridden,

67
00:04:13.703 --> 00:04:17.707
they will go ahead and
inherit that as well.

68
00:04:17.707 --> 00:04:22.046
So now, I have the world's ugliest button,
I can go ahead and

69
00:04:22.046 --> 00:04:26.860
say, And you'll be like,

70
00:04:26.860 --> 00:04:29.968
that's not what I want, I want my
buttons to have different labels.

71
00:04:29.968 --> 00:04:32.681
It works exactly like prototype
inheritance in JavaScript,

72
00:04:32.681 --> 00:04:36.378
which is if the instance doesn't have it
defined, it looks up to the prototype.

73
00:04:36.378 --> 00:04:38.216
So if I went and said.

74
00:04:48.620 --> 00:04:49.663
Actually, let's keep that one.

75
00:04:55.107 --> 00:05:00.756
Right, only the one where it's not
overridden actually gets the change.

76
00:05:00.756 --> 00:05:05.006
And that's actually true, so
let's say hypothetically,

77
00:05:05.006 --> 00:05:09.686
let's get rid of the variable now for
a minute just to make a point.

78
00:05:11.046 --> 00:05:15.022
Where instead of 8,
we're gonna get rid of that, and

79
00:05:15.022 --> 00:05:19.093
we're gonna say actually,
you're gonna be 16 now.

80
00:05:19.093 --> 00:05:23.785
They all changed, but
if this one, no go back to 8,

81
00:05:23.785 --> 00:05:29.449
it won't inherit the change even
if this one changes, right?

82
00:05:29.449 --> 00:05:37.129
So whatever's not being
overridden gets all the changes.

83
00:05:37.129 --> 00:05:41.217
This means you can have large scale,
sets of components.

84
00:05:41.217 --> 00:05:44.025
So we have one called Holocene
that we'll use it tomorrow,

85
00:05:44.025 --> 00:05:47.846
that's currently still like internal OS,
but it's an open source project, so

86
00:05:47.846 --> 00:05:50.137
one could go look at it if they wanted to.

87
00:05:50.137 --> 00:05:52.477
It's just not totally ready for
mass consumption.

88
00:05:52.477 --> 00:05:57.110
And then I made one just as a kind of
example, where you have your buttons, and

89
00:05:57.110 --> 00:05:58.837
you might have your alerts.

90
00:05:58.837 --> 00:06:03.945
And you might have your checkboxes and
your accurate set of icons and

91
00:06:03.945 --> 00:06:08.975
your inputs and labels and
your radio buttons and stuff like that.

92
00:06:08.975 --> 00:06:12.821
So now, you gonna have all of these
component pieces, yeah, let's go with

93
00:06:12.821 --> 00:06:17.075
the unintended pawn, that you kind of
drag and use throughout your code base.

94
00:06:17.075 --> 00:06:22.215
And then should you make a change to how
these work, anything along those lines,

95
00:06:22.215 --> 00:06:27.099
then you get to the point where you can
begin to kind of pull it all together.

96
00:06:27.099 --> 00:06:30.850
And so, the idea and concept of
a component out of the box makes,

97
00:06:30.850 --> 00:06:34.463
I think some amount of sense like
what I would say is like you can

98
00:06:34.463 --> 00:06:37.679
build a component based on
other components, right?

99
00:06:37.679 --> 00:06:45.941
So if you looked over here,
I have a label and an input.

100
00:06:45.941 --> 00:06:49.281
Anyone wanna take a lucky guess what
this label is on the radio button?

101
00:06:49.281 --> 00:06:51.865
Let's go, if I look at this label,

102
00:06:51.865 --> 00:06:56.871
it is actually referencing my label
component from before, right?

103
00:06:56.871 --> 00:07:00.434
And so, if I change what the idea of
a label looks like or anything about it,

104
00:07:00.434 --> 00:07:03.903
everything that uses that label,
everything that uses an input field.

105
00:07:03.903 --> 00:07:07.468
Even if it's like I could build
a component that is a login form,

106
00:07:07.468 --> 00:07:09.853
that's made of two input fields, right?

107
00:07:09.853 --> 00:07:13.201
If I change anything about those input
fields, the login form that references

108
00:07:13.201 --> 00:07:15.902
those components,
even if it's a component itself, right?

109
00:07:15.902 --> 00:07:18.711
You can begin to build
a level of abstraction,

110
00:07:18.711 --> 00:07:21.880
that is second nature to
a lot of us as engineers, and

111
00:07:21.880 --> 00:07:26.504
everything you think about how you
would use it is absolutely true, right?

112
00:07:26.504 --> 00:07:30.534
And so, unlike some of the earlier things,
I don't necessarily feel the need to

113
00:07:30.534 --> 00:07:34.466
labor that point too much, because
components, they work exactly in Figma.

114
00:07:35.889 --> 00:07:38.347
The nuances, but like on a high level,

115
00:07:38.347 --> 00:07:42.102
they work mostly in Figma
the way they do in your code.

116
00:07:42.102 --> 00:07:47.327
And the other thing that you can
do is if you have a team account,

117
00:07:47.327 --> 00:07:50.679
you can at some point go in there and say,

118
00:07:50.679 --> 00:07:54.741
okay I want to go publish it as a library,
right?

119
00:07:54.741 --> 00:07:59.222
So now if you have multiple design teams,
they all use the same set of components.

120
00:07:59.222 --> 00:08:04.163
You might have a Figma project that has
all of these kinds of core components like

121
00:08:04.163 --> 00:08:09.252
we have one for our color system that's
kind of shared across our marketing site,

122
00:08:09.252 --> 00:08:11.631
as well as the applications, right?

123
00:08:11.631 --> 00:08:15.986
We have one for our cloud UI, one for the
open source UI, but they all inherit from

124
00:08:15.986 --> 00:08:20.194
the same, set of components that
are shared across all of these files.

125
00:08:20.194 --> 00:08:23.494
And then, can be used and then if
the design team changes some part of our

126
00:08:23.494 --> 00:08:27.234
design language, they can push out these
changes and all the designs can opt in.

127
00:08:27.234 --> 00:08:29.074
We'll take a look at
that a little bit later.

128
00:08:29.074 --> 00:08:32.122
But the fundamental concept is there,
and you can go ahead and

129
00:08:32.122 --> 00:08:34.654
create a component at any given time.

130
00:08:34.654 --> 00:08:39.195
If you are using a component and
this file is not super interesting,

131
00:08:39.195 --> 00:08:43.989
you can always hit main component,
you can go to that main component.

132
00:08:43.989 --> 00:08:46.872
If you change an instance, and
you actually wanna push it back up to

133
00:08:46.872 --> 00:08:50.179
the prototype, you can push those
changes to the main component.

134
00:08:50.179 --> 00:08:51.759
Dangerous as you might think it is, right?

135
00:08:51.759 --> 00:08:54.825
Hey, I'm in this really
important context now,

136
00:08:54.825 --> 00:08:58.849
I changed five other files I wouldn't,
but you do what you want.

137
00:08:58.849 --> 00:09:03.660
And you also go to the main component
which will then jump you back over there,

138
00:09:03.660 --> 00:09:05.594
so on and so forth, all right?

139
00:09:05.594 --> 00:09:09.375
Again, they take a lot of
stuff that we saw earlier and

140
00:09:09.375 --> 00:09:14.586
allow you to abstract it, the rules
that we said earlier about slashes and

141
00:09:14.586 --> 00:09:18.080
names also work for organization as well.

142
00:09:18.080 --> 00:09:21.370
If they are any given page,
once you have more than one,

143
00:09:21.370 --> 00:09:24.614
they'll begin to use
the structure of your file.

144
00:09:24.614 --> 00:09:29.884
But if you have like icon/warning,
that will be then be nested under icons,

145
00:09:29.884 --> 00:09:33.474
button/primary will be
nested under buttons.

146
00:09:33.474 --> 00:09:37.170
You can also use sections for
the same purpose, so

147
00:09:37.170 --> 00:09:39.640
if I made a section and we call it.

148
00:09:44.261 --> 00:09:47.424
You can now see that it jumped under
the whatever very importantly,

149
00:09:47.424 --> 00:09:49.045
now I have my button here, right?

150
00:09:49.045 --> 00:09:51.089
And so, you can use sections and pages and

151
00:09:51.089 --> 00:09:54.002
stuff like that to add some
level of organization.

152
00:09:54.002 --> 00:09:57.455
And as we saw before, there's stuff
the design team's working on, and

153
00:09:57.455 --> 00:09:59.783
then some of those ready for
development or not.

