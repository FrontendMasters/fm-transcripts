WEBVTT

1
00:00:00.100 --> 00:00:02.870
&gt;&gt; James Halliday: I noticed another
thing that I hadn't put into the notes,

2
00:00:02.870 --> 00:00:07.930
which we talked about a little bit
already, which is exit codes and

3
00:00:09.270 --> 00:00:11.460
chaining together commands
in different ways.

4
00:00:11.460 --> 00:00:18.188
So, try to put that into
the notes after this,

5
00:00:18.188 --> 00:00:22.980
so whenever you're in a command,
there's this notion of the exit code.

6
00:00:22.980 --> 00:00:25.310
So if you're in a command and
it's successful,

7
00:00:25.310 --> 00:00:27.280
the exit code is gonna be zero.

8
00:00:27.280 --> 00:00:30.190
You can read out what the exit code is by

9
00:00:30.190 --> 00:00:33.060
this special variable called
dollar sign question mark.

10
00:00:34.210 --> 00:00:37.180
And so
it's zero if the command was successful,

11
00:00:37.180 --> 00:00:41.381
if the command fails like I try to
list out a file that doesn't exist,

12
00:00:41.381 --> 00:00:44.152
for example,
then the exit code is non zero.

13
00:00:49.519 --> 00:00:54.345
&gt;&gt; James Halliday: There are different
kinds of operators that you

14
00:00:54.345 --> 00:00:59.120
can use to kind of make
use of these exit codes.

15
00:00:59.120 --> 00:01:03.031
So, we used the while command earlier and

16
00:01:03.031 --> 00:01:08.173
how the while command works
is whatever command you put

17
00:01:08.173 --> 00:01:14.048
as an argument to it will be run and,
&gt;&gt; James Halliday: So,

18
00:01:14.048 --> 00:01:19.650
while this command is successful,
it's gonna do something else.

19
00:01:19.650 --> 00:01:21.580
So we can create an example of this.

20
00:01:21.580 --> 00:01:29.430
So why don't we do while ls
cool.txt; do date; sleep 1.

21
00:01:29.430 --> 00:01:34.950
So every second should print out the date,
so long as cool.txt exists.

22
00:01:34.950 --> 00:01:38.580
So I'm gonna go ahead and create that
with another command called touch.

23
00:01:38.580 --> 00:01:40.350
Touch is a very simple command
that just creates a file.

24
00:01:40.350 --> 00:01:43.540
It also modifies timestamps, but whatever.

25
00:01:44.550 --> 00:01:47.720
So now, here we go, the file exists.

26
00:01:47.720 --> 00:01:52.290
So the LS command is gonna exit with
an exit code of zero, successful.

27
00:01:52.290 --> 00:01:53.690
If I remove that file,

28
00:01:54.970 --> 00:01:59.360
now the y loop terminates because
the file doesn't exist anymore.

29
00:01:59.360 --> 00:02:03.396
There's actually a better way to do
this particular thing which is to use

30
00:02:03.396 --> 00:02:04.859
the command called test.

31
00:02:04.859 --> 00:02:07.426
It takes a bunch of options.

32
00:02:07.426 --> 00:02:10.820
One is called -f,
which just tests if a file exists.

33
00:02:10.820 --> 00:02:14.150
So then you don't get this message
like firm LS cannot access.

34
00:02:14.150 --> 00:02:19.080
The test is a bit quieter, so it's good if
you're expecting a file to exist or not.

35
00:02:19.080 --> 00:02:19.977
A little bit more.

36
00:02:21.835 --> 00:02:24.828
&gt;&gt; James Halliday: So if I do the same
thing, the first time I run it,

37
00:02:24.828 --> 00:02:28.935
the file doesn't exist yet, so
it's just gonna exit right away.

38
00:02:28.935 --> 00:02:33.796
If I create that file,
now the exit code of test is gonna be,

39
00:02:33.796 --> 00:02:36.960
I can show you by running that here.

40
00:02:36.960 --> 00:02:40.980
The exit code is zero because it exists.

41
00:02:40.980 --> 00:02:41.535
And delete it.

42
00:02:41.535 --> 00:02:47.113
The exit code is non-zero because

43
00:02:47.113 --> 00:02:51.544
the file no longer exists.

44
00:02:51.544 --> 00:02:58.408
There's also a command called until
which is just the opposite of while.

45
00:02:58.408 --> 00:03:05.140
As long as that command has an exit code
that is non-zero, the command will run.

46
00:03:05.140 --> 00:03:11.840
It just flips it around a little bit.

47
00:03:11.840 --> 00:03:16.250
The other thing you can do with exit
codes is you can chain together

48
00:03:16.250 --> 00:03:21.880
commands depending on whether
something was successful or not.

49
00:03:21.880 --> 00:03:25.570
Good example of this is
if you only wanna do

50
00:03:25.570 --> 00:03:29.800
subsequent commands if the first
command succeeded or not.

51
00:03:29.800 --> 00:03:34.310
So if you have something that
kind of takes a few steps to do.

52
00:03:34.310 --> 00:03:35.690
If it fails somewhere in the middle,

53
00:03:35.690 --> 00:03:41.410
you don't wanna keep going with the steps
that kind of assume the previous steps.

54
00:03:41.410 --> 00:03:45.880
Maybe, they operate on some files that
were created by the preceding steps.

55
00:03:45.880 --> 00:03:50.290
So to build that kind of a pipeline
you can use the &amp;&amp; character.

56
00:03:50.290 --> 00:03:55.190
How this works is So
say we use just, for example,

57
00:03:55.190 --> 00:03:58.510
the test-f command,
which is going to be successful.

58
00:03:58.510 --> 00:04:00.622
You can put another command after it.

59
00:04:00.622 --> 00:04:04.706
Maybe I'll do test-f cool.txt.

60
00:04:04.706 --> 00:04:07.590
You can put in another command
after a double ampersand.

61
00:04:07.590 --> 00:04:11.450
And then,
if the first command was successful,

62
00:04:11.450 --> 00:04:15.810
meaning its exit code is 0 Then
the second command will run.

63
00:04:15.810 --> 00:04:20.630
So in this case cool.txt does not exist so
it should not be successful.

64
00:04:23.080 --> 00:04:26.490
So here, I have this echo whatever.

65
00:04:27.490 --> 00:04:30.480
So we should not see
the message whatever at first.

66
00:04:31.880 --> 00:04:35.129
And then if I make the file cool.txt.

67
00:04:36.490 --> 00:04:39.380
Now, that command tuns so
we see the message.

68
00:04:41.405 --> 00:04:45.330
&gt;&gt; James Halliday: Related to the double
ampersand percent is the double pipe

69
00:04:45.330 --> 00:04:47.902
character which is the ore operator.

70
00:04:49.773 --> 00:04:54.810
&gt;&gt; James Halliday: So,
the ore operator will not

71
00:04:54.810 --> 00:05:03.220
run the second command
if the first succeeded.

72
00:05:03.220 --> 00:05:06.840
So it's kind of like the opposite
of the double ampersand command.

73
00:05:06.840 --> 00:05:10.440
This is sometimes known
as short circuiting.

74
00:05:10.440 --> 00:05:15.530
Cuz if you have a logical or operation,
if the first thing was true on the left,

75
00:05:15.530 --> 00:05:20.314
you don't even care whether the second
thing is true because you know that

76
00:05:20.314 --> 00:05:22.724
the results is going to be like true.

77
00:05:22.724 --> 00:05:25.674
So that's kind of where
this idea comes from.

78
00:05:25.674 --> 00:05:31.260
So now it's gonna work just the opposite
way as using the ampersand.

79
00:05:31.260 --> 00:05:33.800
So in this case cool.txt exist.

80
00:05:33.800 --> 00:05:35.890
So we don't see the message.

81
00:05:35.890 --> 00:05:38.830
If I remove the file,
now we do see the message.

82
00:05:38.830 --> 00:05:40.580
It's the opposite behavior.

83
00:05:41.670 --> 00:05:47.020
The final operator is the semi colon and
semi colon

84
00:05:47.020 --> 00:05:51.630
is just like a, with new lines is always
going to execute the next command.

85
00:05:53.870 --> 00:05:58.410
The command doesn't even have to exist.

86
00:05:58.410 --> 00:06:03.660
If you do a semicolon,
the next thing is always going to run.

87
00:06:03.660 --> 00:06:07.848
If you did that with &amp;&amp;, it wouldn't
run the next thing, if you did it with,

88
00:06:07.848 --> 00:06:09.765
|| it would run the next command.

89
00:06:13.170 --> 00:06:16.110
&gt;&gt; James Halliday: Okay, so
that's, you have a question?

90
00:06:16.110 --> 00:06:21.120
&gt;&gt; Speaker 2: Is there something like
a ternary operator where it's like

91
00:06:21.120 --> 00:06:24.680
if it's true, then it does the first one,
if it's false, it does the second one?

92
00:06:24.680 --> 00:06:27.300
&gt;&gt; James Halliday: I don't know of one,
but I bet there is.

93
00:06:27.300 --> 00:06:28.273
But you'd have to dig for it.

94
00:06:28.273 --> 00:06:28.903
[LAUGH]
&gt;&gt; Speaker 2: Yeah.

95
00:06:28.903 --> 00:06:29.800
&gt;&gt; James Halliday: I don't know off

96
00:06:29.800 --> 00:06:30.856
the top of my head if there is one.

97
00:06:30.856 --> 00:06:35.600
But
&gt;&gt; Speaker 2: I'm sure you can also

98
00:06:35.600 --> 00:06:37.040
build one.

99
00:06:37.040 --> 00:06:40.340
&gt;&gt; James Halliday: Yeah, I think you could
build it out of or and and operations.

100
00:06:40.340 --> 00:06:42.030
&gt;&gt; Speaker 2: Right.
&gt;&gt; James Halliday: Probably.

101
00:06:42.030 --> 00:06:46.030
Or there's also an if statement that
you could use to do this kinda stuff.

102
00:06:46.030 --> 00:06:48.470
So there's if else as well.

103
00:06:48.470 --> 00:06:50.640
So if, why don't I just go ahead and
show that?

104
00:06:50.640 --> 00:06:55.280
So, all right it's usually more useful to
do things like if in a shell script but

105
00:06:55.280 --> 00:06:57.180
I will just do it on
the command line right here.

106
00:06:57.180 --> 00:07:04.630
So, if we have a if test -f cool.txt,
we do a semicolon nd then

107
00:07:04.630 --> 00:07:09.850
then similar to kind of the do syntax
with the while loop that we just saw.

108
00:07:11.080 --> 00:07:19.930
Then it's like echo okay else echo,

109
00:07:19.930 --> 00:07:24.890
or I'll just say echo true false.

110
00:07:24.890 --> 00:07:25.390
That'll be good.

111
00:07:27.470 --> 00:07:29.950
And then you do FI at
the end instead of done,

112
00:07:29.950 --> 00:07:33.870
which is burned from
Algol 68 of all things.

113
00:07:33.870 --> 00:07:40.440
I was reading about yesterday
very old programming language.

114
00:07:40.440 --> 00:07:43.610
So the file does not exist.

115
00:07:43.610 --> 00:07:47.200
Then if I create the file it does exist.

116
00:07:47.200 --> 00:07:51.980
So that's what I would probably use in for
like the kind of if else case.

117
00:07:51.980 --> 00:07:54.901
Just do an if statement.

118
00:07:56.104 --> 00:07:59.397
&gt;&gt; James Halliday: I don't think I
have anything in the notes about sub

119
00:07:59.397 --> 00:08:02.710
shells but, sub shells are the best thing.

120
00:08:02.710 --> 00:08:08.260
So, any time you can have these
kinds of little one-liners,

121
00:08:08.260 --> 00:08:09.790
you can put parentheses around them.

122
00:08:11.470 --> 00:08:15.180
And you can do things like, so
when you put parentheses around it,

123
00:08:15.180 --> 00:08:18.900
it sorts of treats it, or
maybe they're called subcommands.

124
00:08:18.900 --> 00:08:24.680
Anyways, it sort of treats it like
a program, like a Separate program.

125
00:08:24.680 --> 00:08:31.022
So you can do things like echo
the status code for example.

126
00:08:31.022 --> 00:08:37.130
So like if I exit 1 then it should
be an exit code of one, very simple.

127
00:08:38.340 --> 00:08:41.360
If you type exit normally, it's just
gonna like close your terminal but

128
00:08:41.360 --> 00:08:44.930
because we're instead the sub commands
with parentheses it like of like it have

129
00:08:44.930 --> 00:08:49.110
it's own It has its own sense of
standard out and standard error as well.

130
00:08:49.110 --> 00:08:54.250
So if you have a program, so
normally you can do things like

131
00:08:56.430 --> 00:08:58.690
redirect standard error to standard out.

132
00:08:58.690 --> 00:09:03.950
So that message is actually printed to
secondary thing called standard error.

133
00:09:03.950 --> 00:09:10.700
So if you try to pipe that, it's,
&gt;&gt; James Halliday: Let's see.

134
00:09:10.700 --> 00:09:15.430
If I try to redirect that to dev null,
which is a way of throwing the data away,

135
00:09:15.430 --> 00:09:17.790
I still see the message,
which is annoying, right?

136
00:09:17.790 --> 00:09:19.934
Because what if you don't
want to see anything?

137
00:09:19.934 --> 00:09:24.309
So there's a little trick
you can do where you do 2,

138
00:09:24.309 --> 00:09:28.983
which is the File descriptor code for
standard error and

139
00:09:28.983 --> 00:09:31.682
you redirect to and &amp;1, why?

140
00:09:31.682 --> 00:09:34.480
I don't know that's just how it is and
now.

141
00:09:36.178 --> 00:09:36.835
&gt;&gt; James Halliday: Hang on,

142
00:09:36.835 --> 00:09:41.610
right this is actually a little bit
complicated it has to come after.

143
00:09:41.610 --> 00:09:46.790
All right and then it discards it.

144
00:09:46.790 --> 00:09:51.380
What's cool though is if you have
a subcommands, like suppose that you only

145
00:09:51.380 --> 00:09:56.400
want to see the standard error, you don't
actually want the standard out, you can

146
00:09:56.400 --> 00:10:01.180
sort of like juggle around the subcommands
in such a way to make that work.

147
00:10:01.180 --> 00:10:05.650
Which I'll not show because you sort of
have to like concoct a reason to do that,

148
00:10:05.650 --> 00:10:06.990
but I've had to do that.

149
00:10:06.990 --> 00:10:08.660
Like enough times that.

150
00:10:10.860 --> 00:10:16.000
Okay, so that's sort of what double
ampersand means, what the double or

151
00:10:16.000 --> 00:10:20.010
character means, and how semi-colon works,
and what exit codes are.

152
00:10:20.010 --> 00:10:24.190
And when you might use them with
the test command and if else.

153
00:10:26.650 --> 00:10:28.520
Let's see if there's any questions?

154
00:10:30.420 --> 00:10:32.800
Cool, someone has a littler ternary there.

155
00:10:32.800 --> 00:10:36.010
Yeah, I guess you can just chain and
and or commands, and

156
00:10:36.010 --> 00:10:37.450
it basically does ternary.

157
00:10:38.950 --> 00:10:40.660
So that's how you can build that feature.

