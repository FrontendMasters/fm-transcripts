WEBVTT

1
00:00:00.090 --> 00:00:02.710
&gt;&gt; James Halliday: I have been
using this a bit already but

2
00:00:02.710 --> 00:00:05.820
there is this concept of
anchoring the regular expression.

3
00:00:05.820 --> 00:00:07.750
So if you want the regex engine,

4
00:00:07.750 --> 00:00:12.240
it's walking along your string
like character by character.

5
00:00:12.240 --> 00:00:16.354
If you want it to start at
the beginning you use a caret.

6
00:00:16.354 --> 00:00:20.144
This is, unfortunately caret is also
used for character class negations but

7
00:00:20.144 --> 00:00:24.320
this is a different one, that is not
at the start of a character class.

8
00:00:24.320 --> 00:00:28.190
So you can anchor at
the beginning with a caret and

9
00:00:28.190 --> 00:00:31.390
anchor at the end with a dollar sign.

10
00:00:31.390 --> 00:00:35.622
And later in Vim we will learn that these
conventions are actually rather more

11
00:00:35.622 --> 00:00:37.390
widespread than it might seem.

12
00:00:40.120 --> 00:00:44.100
So, why don't we play around
with that a little bit,

13
00:00:44.100 --> 00:00:47.750
so may be I'll stick to node here.

14
00:00:47.750 --> 00:00:54.270
So suppose we have a sting
like cool beans and we want

15
00:00:54.270 --> 00:01:00.870
to replace beans but only if it's like the
start of the word, we wanna capitalize it.

16
00:01:00.870 --> 00:01:04.190
So that's not gonna match normally, right?

17
00:01:04.190 --> 00:01:11.430
Unless we start the string out that way,
then it matches.

18
00:01:11.430 --> 00:01:14.100
Same thing with dollar sign,
but at the end.

19
00:01:14.100 --> 00:01:19.140
So we had it the first way,
the dollar sign matches.

20
00:01:19.140 --> 00:01:25.410
Makes sense, okay.

21
00:01:25.410 --> 00:01:30.570
There's also similar in spirit
to how character classes work,

22
00:01:30.570 --> 00:01:33.790
how it kind of enumerates
a bunch of options.

23
00:01:33.790 --> 00:01:39.470
We have this notion of groups, both
captured groups and noncaptured groups.

24
00:01:41.020 --> 00:01:48.460
This is a way of telling the engine like
either one of these patterns is valid.

25
00:01:48.460 --> 00:01:51.560
So, but these patterns can
be in multiple characters,

26
00:01:51.560 --> 00:01:54.430
not just a single character
like with the character class.

27
00:01:54.430 --> 00:01:58.455
So if we have something like,

28
00:01:58.455 --> 00:02:02.158
say we have beep and boop and

29
00:02:02.158 --> 00:02:07.801
we want to match b and
then either ee or oo.

30
00:02:11.379 --> 00:02:12.633
&gt;&gt; James Halliday: We can do that.

31
00:02:16.230 --> 00:02:20.001
&gt;&gt; James Halliday: Another way of writing
this might be you could do this and

32
00:02:20.001 --> 00:02:24.510
then these are quantifier to specify
two of them be the same thing.

33
00:02:29.600 --> 00:02:33.400
So, capture groups
are a little bit special.

34
00:02:33.400 --> 00:02:40.050
So, capture groups can also
be used to match content.

35
00:02:40.050 --> 00:02:45.079
So if I wanted, so suppose I had,
if we go back to that example

36
00:02:45.079 --> 00:02:50.420
earlier with the brackets, so
suppose that this is our string.

37
00:02:50.420 --> 00:02:56.870
And now we want to match everything
that is inside of the brackets.

38
00:02:56.870 --> 00:02:58.030
How can we do that?

39
00:02:58.030 --> 00:03:01.260
Capture group, so I'll put that.

40
00:03:01.260 --> 00:03:03.310
That's how we had it earlier, right?

41
00:03:03.310 --> 00:03:08.020
So you can put that middle
part in parentheses.

42
00:03:08.020 --> 00:03:12.110
This tells the regex engine
to save that text and

43
00:03:12.110 --> 00:03:17.590
make it available and so
we can use .exec with the string.

44
00:03:17.590 --> 00:03:23.630
And now, the match object that we get has
the contents that were captured as m[1],

45
00:03:23.630 --> 00:03:26.340
which is the part that is inside of here.

46
00:03:27.910 --> 00:03:32.080
Everyone of these capture groups that you
specify in your regular expression is

47
00:03:32.080 --> 00:03:37.560
going to be available
with an integer index.

48
00:03:37.560 --> 00:03:43.580
So if we have two of them, the second
one would be m with square brackets,

49
00:03:43.580 --> 00:03:45.590
2, and it goes one, by one, by one.

50
00:03:48.440 --> 00:03:52.230
You can also use these
in your replacement.

51
00:03:52.230 --> 00:03:55.810
I'll show you an example in JavaScript,
and also an example in sed.

52
00:03:55.810 --> 00:04:03.238
So for example,
if we have the string cool &lt;beans&gt;

53
00:04:03.238 --> 00:04:09.120
.replace that, maybe globally sure,

54
00:04:09.120 --> 00:04:14.390
you can refer to this
capture group by doing $1.

55
00:04:14.390 --> 00:04:19.470
So maybe we wanna change angle
brackets to quotes, for example.

56
00:04:19.470 --> 00:04:24.533
So I can put quotes in there, and
then the replacement engine is gonna

57
00:04:24.533 --> 00:04:29.599
substitute $1 for whatever I put
in the first capture group there,

58
00:04:29.599 --> 00:04:33.286
which is now cool beans
with quotes around it zzz.

59
00:04:36.103 --> 00:04:43.200
&gt;&gt; James Halliday: Maybe we want to also
capture the next word as the second group.

60
00:04:43.200 --> 00:04:48.187
So you can put $2 in there as well,
and that is also captured.

61
00:04:50.092 --> 00:04:53.830
&gt;&gt; James Halliday: There's also a
non-capture groups, so sometimes you need

62
00:04:53.830 --> 00:04:57.870
the, like if you need to use the OR
character, inside of a group.

63
00:04:57.870 --> 00:05:01.300
For example, if we want to
match either angle brackets or

64
00:05:01.300 --> 00:05:06.660
maybe curly brackets, we can do that.

65
00:05:06.660 --> 00:05:12.844
If I'd have done that with,
let's do it like this.

66
00:05:15.428 --> 00:05:19.449
&gt;&gt; James Halliday: So if we have this
first pattern, which is gonna be angle

67
00:05:19.449 --> 00:05:25.450
brackets, and then our second pattern
maybe will be the double quotes, right?

68
00:05:25.450 --> 00:05:27.130
So we'll just do the same kind of thing.

69
00:05:28.280 --> 00:05:34.320
It would be good if we could maybe not

70
00:05:34.320 --> 00:05:41.750
match the first bit into a pattern.

71
00:05:41.750 --> 00:05:45.780
You can do that by specifying
a question mark colon around, and

72
00:05:45.780 --> 00:05:48.360
that just basically means
don't capture this pattern.

73
00:05:51.570 --> 00:05:54.650
Just a nice little thing
sometimes if need,

74
00:05:54.650 --> 00:05:58.630
if you have to add a bit that
is a branch into your regex.

75
00:05:58.630 --> 00:06:04.340
But not something that you
have to use all the time.

76
00:06:05.950 --> 00:06:10.759
We can also do capture groups in sed,
there's a few ways,

77
00:06:10.759 --> 00:06:16.470
you can use the $ syntax or you can
also use a / in front of the number.

78
00:06:17.730 --> 00:06:22.611
So if we go back to sed,
&gt;&gt; James Halliday: And

79
00:06:22.611 --> 00:06:25.579
we do sed -E and then do this replacement.

80
00:06:32.142 --> 00:06:34.470
&gt;&gt; James Halliday: If we want to just get
rid of the angle brackets, for example.

81
00:06:35.940 --> 00:06:36.490
Whoops.

82
00:06:38.780 --> 00:06:42.130
All right, and you've gotta do the parens
around it if you want it to work.

83
00:06:42.130 --> 00:06:43.270
There we go.

84
00:06:43.270 --> 00:06:47.192
We could also, like,
put around like tildes or

85
00:06:47.192 --> 00:06:51.730
something,around the quoted bit,
that works.

86
00:06:51.730 --> 00:06:54.600
Dollar sign I guess doesn't work in
sed but it does work in JavaScript.

87
00:06:56.090 --> 00:06:59.800
Related to this is the idea
of back references.

88
00:06:59.800 --> 00:07:04.737
So, you can actually use a capture
group that you've captured in your

89
00:07:04.737 --> 00:07:09.854
regex inside of the regex itself, so
it's still inside of the pattern.

90
00:07:09.854 --> 00:07:14.971
For example a good use case is this if
you wanna search for all words that

91
00:07:14.971 --> 00:07:20.640
are kinda of repeated twice, like
the the or something, we can do the regex.

92
00:07:20.640 --> 00:07:27.820
So the the whatever cats
dogs dogs etcetera.

93
00:07:29.210 --> 00:07:33.674
We can now search for all words that are,

94
00:07:33.674 --> 00:07:38.664
immediately after the word
is the same word,

95
00:07:38.664 --> 00:07:43.785
which is what this means
because \1 refers to

96
00:07:43.785 --> 00:07:49.060
the first capture group
that was just matched.

97
00:07:50.110 --> 00:07:53.300
And we can replace that
with the first word again.

98
00:07:53.300 --> 00:07:56.770
So this regex right here,
this substitution,

99
00:07:56.770 --> 00:08:00.470
will replace all of the repeated words.

100
00:08:00.470 --> 00:08:03.240
So it should replace the the with
just a single the and

101
00:08:03.240 --> 00:08:07.510
it should replace dogs dogs with
a single dogs, did it do it?

102
00:08:10.040 --> 00:08:12.900
All right you have to do it in -E mode,
of course.

103
00:08:12.900 --> 00:08:14.810
There we go, so that's what we expect.

104
00:08:23.720 --> 00:08:27.651
Back references also works in node,
so we can take this example and

105
00:08:27.651 --> 00:08:31.314
I'll just show you how to do
that in JavaScript really quick.

106
00:08:34.435 --> 00:08:38.560
&gt;&gt; James Halliday: Do just w+ \1/,
and then you have to use $1, but

107
00:08:38.560 --> 00:08:41.965
otherwise I think they
ought to be the same.

108
00:08:41.965 --> 00:08:43.264
Yeah, there we go.

109
00:08:47.508 --> 00:08:51.283
&gt;&gt; James Halliday: Right, and -1 in
JavaScript land means something else, so

110
00:08:51.283 --> 00:08:53.036
you have to use dollar sign.

111
00:09:00.672 --> 00:09:05.040
&gt;&gt; James Halliday: Okay, that should be
a lot for people to play around with.

112
00:09:05.040 --> 00:09:10.880
So there is more that I'm gonna get
to in a bit but just play around.

113
00:09:10.880 --> 00:09:15.500
If you have any questions,
if you're getting stuck you can

114
00:09:15.500 --> 00:09:20.410
either use the command line,
you can use something like the node repo.

115
00:09:20.410 --> 00:09:25.612
You can try out filtering
files with grep to search for

116
00:09:25.612 --> 00:09:28.260
patterns, so you can try using sed.

117
00:09:28.260 --> 00:09:33.090
There's also some handy flags for sed like
you can use -i which does an in place

118
00:09:33.090 --> 00:09:37.010
substitution, so if you wanna modify
a file this a pretty nifty trick.

119
00:09:38.430 --> 00:09:45.450
So suppose in this file hello.txt we want
to modify it to replace the word, maybe

120
00:09:46.960 --> 00:09:51.930
we'll replace the word
cool with the capital,

121
00:09:51.930 --> 00:09:57.820
maybe the word cool spelled with a k,
because that's really tacky.

122
00:09:57.820 --> 00:10:02.524
So if we do cool with be also 0s and

123
00:10:02.524 --> 00:10:07.590
1, that's extremely tacky -i.

124
00:10:07.590 --> 00:10:12.602
And now instead of printing
out to standard out,

125
00:10:12.602 --> 00:10:15.370
sed will go ahead and
update that file first in place.

126
00:10:15.370 --> 00:10:19.847
And if I open it again, yep,
we can see that the file was modified.

127
00:10:24.505 --> 00:10:25.687
&gt;&gt; James Halliday: And,
that's just pretty handy

128
00:10:25.687 --> 00:10:29.120
if you have a file that has a bunch of
stuff that you want to fix really quick.

129
00:10:29.120 --> 00:10:30.830
Just, you can do it all
in one place like that,

