WEBVTT

1
00:00:00.740 --> 00:00:03.870
&gt;&gt; James Halliday: So
I talked a little bit about flags.

2
00:00:03.870 --> 00:00:07.490
These are how you can
configure the RegEx engine.

3
00:00:07.490 --> 00:00:08.820
So, these are the ones,

4
00:00:08.820 --> 00:00:12.950
I think I don't really use any
other flags aside from these.

5
00:00:12.950 --> 00:00:18.420
Use the first two all the time and
the second two pretty rarely.

6
00:00:18.420 --> 00:00:22.530
So, if you know ing, I'd say you're
pretty set for the most part.

7
00:00:24.674 --> 00:00:27.890
In mns,
you're kind of like rather more obscure.

8
00:00:31.490 --> 00:00:34.570
Okay, so
the main thing that you need to know

9
00:00:34.570 --> 00:00:39.910
when dealing with RegEx is these things
which are called meta characters.

10
00:00:39.910 --> 00:00:42.525
So these characters that are kind of,

11
00:00:42.525 --> 00:00:46.622
some of them are operated a bit
like wild cards like the dot.

12
00:00:46.622 --> 00:00:49.610
Other are called quantifiers.

13
00:00:50.700 --> 00:00:55.120
So here's an example of what how
the other dot.characters works.

14
00:00:55.120 --> 00:00:57.210
So dot means any character.

15
00:00:57.210 --> 00:01:04.146
So you can do things like,
if we have the input, go hello beep boop,

16
00:01:04.146 --> 00:01:10.840
then we can replace any character
that comes between a b and a p, so

17
00:01:10.840 --> 00:01:16.119
any two characters,
dot dot with something else.

18
00:01:21.220 --> 00:01:22.585
&gt;&gt; James Halliday: So
if we don't pass in g,

19
00:01:22.585 --> 00:01:26.880
that's going to replace the first
instance which should be beep.

20
00:01:26.880 --> 00:01:28.970
So it says, hello whatever boop, but

21
00:01:28.970 --> 00:01:33.300
if we put a g at the end said is
going to replace every occurrence.

22
00:01:33.300 --> 00:01:35.326
So we get hello, whatever, whatever.

23
00:01:39.443 --> 00:01:47.570
&gt;&gt; James Halliday: The next thing we
can cover, is this idea of quantifiers.

24
00:01:47.570 --> 00:01:52.960
So quantifiers are a way of specifying
how many times something should appear.

25
00:01:54.570 --> 00:01:58.924
Question mark is a 0 or 1 times,

26
00:01:58.924 --> 00:02:03.278
a star means 0 or many times, and

27
00:02:03.278 --> 00:02:07.330
a plus means one or many times.

28
00:02:07.330 --> 00:02:11.490
And there are other ways of doing
quantifiers with curly brackets.

29
00:02:11.490 --> 00:02:14.630
I don't think I put them in the notes,
but I'll cover them as well.

30
00:02:14.630 --> 00:02:18.590
So here's just some example
that you can try about,

31
00:02:18.590 --> 00:02:20.240
I can explain what each one of these does.

32
00:02:20.240 --> 00:02:25.240
So if we have this string,
dog and doge, then we wanna match

33
00:02:25.240 --> 00:02:31.770
everything that is dog, and it may or
may not have an e at the end.

34
00:02:31.770 --> 00:02:37.450
So you can use sed -r here to not
have to put that back slash or

35
00:02:37.450 --> 00:02:39.040
a dash capital e I guess on Mac.

36
00:02:40.170 --> 00:02:45.319
And this will match anything that's dog or

37
00:02:45.319 --> 00:02:50.476
doge, cuz the e can appear 0, or 1 time.

38
00:02:50.476 --> 00:02:58.660
Similarly you can match things like here
the e can appear has 0 or more times.

39
00:02:58.660 --> 00:03:03.390
So might have no e's like
you might just have BP or

40
00:03:03.390 --> 00:03:07.690
you might have a lot of e's like this or
you have 2 or 1 e.

41
00:03:07.690 --> 00:03:09.422
It's all going to match and
be replaced by a beep.

42
00:03:09.422 --> 00:03:13.563
So that works, and then plus is 1 or

43
00:03:13.563 --> 00:03:19.490
more time that means BP
is not going to match.

44
00:03:19.490 --> 00:03:24.750
But bep and beeeep will match, because

45
00:03:24.750 --> 00:03:29.768
there has to be at least one occurrence
for the plus quantifier to match.

46
00:03:29.768 --> 00:03:30.736
&gt;&gt; Speaker 2: Question.

47
00:03:30.736 --> 00:03:31.328
&gt;&gt; James Halliday: Yeah.

48
00:03:31.328 --> 00:03:36.298
Is that s slash, the beginning of that
string, is that technically a flag where

49
00:03:36.298 --> 00:03:39.600
you would be able to do m
slash if it was a multi-way?

50
00:03:39.600 --> 00:03:42.470
&gt;&gt; Speaker 2: For the trailing bit,
the part with the g?

51
00:03:42.470 --> 00:03:43.898
&gt;&gt; James Halliday: No,
the part with the s.

52
00:03:43.898 --> 00:03:47.856
&gt;&gt; Speaker 2: No, this is specific
to said and curl, and vim as well,

53
00:03:47.856 --> 00:03:52.566
where this just means that we're
performing a substitution.

54
00:03:52.566 --> 00:03:53.788
&gt;&gt; James Halliday: Got it, a substitution.

55
00:03:53.788 --> 00:03:57.614
&gt;&gt; Speaker 2: Yes, so you don't do
that in, the flag goes on the end.

56
00:03:57.614 --> 00:04:01.592
&gt;&gt; James Halliday: Got it,
You could do gm the you multiflag.

57
00:04:01.592 --> 00:04:06.152
&gt;&gt; Speaker 2: Yes you could do gm and like
also the order of the flag doesn't matter

58
00:04:06.152 --> 00:04:11.360
at all so there is i, g, m, and s more
depending on what engine you are using.

59
00:04:12.460 --> 00:04:17.846
Okay, so why don't we just if you
wanna try around the rejects.md files

60
00:04:17.846 --> 00:04:23.584
should be in the same ripple if you wanna
like pull up some of these examples and

61
00:04:23.584 --> 00:04:29.146
while all of you do that I'm just gonna
fiddle around on the command line for

62
00:04:29.146 --> 00:04:33.500
some stuff that you can just
see what I'm up to if you like.

63
00:04:33.500 --> 00:04:39.658
And if you have any questions online or
in person, then just ask them.

64
00:04:50.868 --> 00:04:53.282
&gt;&gt; Speaker 2: So
if you find any good files or

65
00:04:53.282 --> 00:04:58.496
anything else that you would like
to like do some processing on,

66
00:04:58.496 --> 00:05:03.052
column formats are good for
playing around with RegEx.

67
00:05:03.052 --> 00:05:06.713
I'll see if I have any
in my data directory.

68
00:05:10.890 --> 00:05:13.344
&gt;&gt; Speaker 2: The CSV
files are pretty good.

69
00:05:13.344 --> 00:05:15.443
Sweet, I do have one, landsat.csv.

70
00:05:20.307 --> 00:05:21.314
&gt;&gt; Speaker 2: It's a very big file.

71
00:05:38.820 --> 00:05:41.154
&gt;&gt; Speaker 2: Probably not the best
to use as an example though.

72
00:06:24.643 --> 00:06:28.084
&gt;&gt; Speaker 2: [LAUGH] Or
The CAT by Herman Melville.

73
00:06:37.523 --> 00:06:38.483
&gt;&gt; Speaker 2: [LAUGH]

74
00:07:17.290 --> 00:07:18.913
&gt;&gt; Speaker 2: If you want to experiment

75
00:07:18.913 --> 00:07:24.980
with a certain number of characters,
you can use braces for your quantifier.

76
00:07:24.980 --> 00:07:31.822
So if I want between 2 and
4, I can do 2, 4.

77
00:07:31.822 --> 00:07:36.460
Or if you want more than 4,
or more than 2,

78
00:07:36.460 --> 00:07:40.080
you can just leave off the remaining one.

79
00:07:40.080 --> 00:07:42.574
So that will match plus g.

80
00:07:45.904 --> 00:07:50.763
&gt;&gt; Speaker 2: Wait, sed right needs to
be put into enhanced mode to do that.

81
00:07:54.300 --> 00:07:57.382
&gt;&gt; Speaker 2: Cool, Dashy works on Linux,
so I'm gonna use that from now on.

82
00:07:57.382 --> 00:07:59.457
[LAUGH]

83
00:08:12.743 --> 00:08:15.095
&gt;&gt; Speaker 2: Right, so see in this case,

84
00:08:15.095 --> 00:08:19.505
it's gonna match for
because RegEx will try to expand

85
00:08:19.505 --> 00:08:24.040
out to be the longest
sequence that it can.

86
00:08:24.040 --> 00:08:27.993
Which is called the greediness of the
RegEx, there's also non-greedy RegExes,

87
00:08:27.993 --> 00:08:29.752
which are kind of an enhanced thing.

88
00:08:32.079 --> 00:08:33.821
&gt;&gt; Speaker 2: So it's gonna match 4 and 4,

89
00:08:33.821 --> 00:08:37.330
and then there's gonna be
a left over o in this case.

90
00:08:37.330 --> 00:08:39.194
So that's why there's a o
in the output right here.

91
00:09:01.425 --> 00:09:05.962
&gt;&gt; Speaker 2: Yeah, so with grep and
sed unless you pass in -E,

92
00:09:05.962 --> 00:09:10.609
these commands are going
to require that you escape

93
00:09:10.609 --> 00:09:15.165
the meta characters except for
star for reasons.

94
00:09:15.165 --> 00:09:19.885
So, probably it's good to just use
capital E all the time I would say,

95
00:09:19.885 --> 00:09:24.845
unless you wanna keep in your head which
meta characters you have to escape

96
00:09:24.845 --> 00:09:27.340
which is not very useful information

