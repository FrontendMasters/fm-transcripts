WEBVTT

1
00:00:00.490 --> 00:00:04.710
&gt;&gt; James Halliday: Let's learn
now about regular expressions.

2
00:00:04.710 --> 00:00:10.745
So regular expressions
are a pattern matching language,

3
00:00:10.745 --> 00:00:15.303
it's often used for
different kinds of text

4
00:00:15.303 --> 00:00:19.748
processing problems that you might have.

5
00:00:19.748 --> 00:00:23.340
A lot of programming languages
have built in support for

6
00:00:23.340 --> 00:00:27.170
regular expressions like JavaScript,
Pearl, and Ruby.

7
00:00:27.170 --> 00:00:30.950
And like pretty much every program and
language is gonna have at least

8
00:00:30.950 --> 00:00:35.393
a library that can do these regular
expressions, so they're very widespread.

9
00:00:35.393 --> 00:00:39.893
If you learn them,
you can use them pretty much anywhere.

10
00:00:39.893 --> 00:00:42.999
The command line, programming language.

11
00:00:42.999 --> 00:00:49.540
But they're a little bit weird to look at,
and they take some getting used to.

12
00:00:49.540 --> 00:00:51.750
But I think they're very powerful.

13
00:00:51.750 --> 00:00:55.600
I probably write regular
expressions every single day.

14
00:00:57.170 --> 00:01:02.180
Even if I'm not really doing much on a
computer, preferably at least a regex here

15
00:01:02.180 --> 00:01:06.540
and there, just because, once you know
them and once you're kind of used to them,

16
00:01:06.540 --> 00:01:12.340
there's just so many places where you
just need to fix some text a little bit.

17
00:01:12.340 --> 00:01:16.520
And you can also use them from
inside of VIM and other editors.

18
00:01:16.520 --> 00:01:20.750
So plenty of opportunities to use
them once you can get to know them.

19
00:01:20.750 --> 00:01:22.590
So here's a few of those commands.

20
00:01:22.590 --> 00:01:27.050
We've already seen grep and sed,
which are probably in your system.

21
00:01:27.050 --> 00:01:30.830
There's also,
you can use perl or vim or less.

22
00:01:30.830 --> 00:01:33.122
It's all places where
you can find regexes.

23
00:01:33.122 --> 00:01:37.393
There are some annoying differences
sometimes between the engines because in

24
00:01:37.393 --> 00:01:41.609
some of them you have to escape different
meta characters in different ways.

25
00:01:41.609 --> 00:01:46.520
But,
&gt;&gt; James Halliday: In JavaScript,

26
00:01:46.520 --> 00:01:51.460
you can do all of these kinds of methods.

27
00:01:51.460 --> 00:01:53.940
That comma should be a closed paren.

28
00:01:53.940 --> 00:01:57.360
Like splitting, so I could just show
you what each of these looks like.

29
00:01:57.360 --> 00:02:03.660
So here if we have a string,
and we wanna split on a regex.

30
00:02:03.660 --> 00:02:10.340
So I'll get into a moment,
but \s means wide space.

31
00:02:10.340 --> 00:02:12.280
+ means one or more.

32
00:02:12.280 --> 00:02:13.000
So we can

