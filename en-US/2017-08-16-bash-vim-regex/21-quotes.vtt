WEBVTT

1
00:00:00.320 --> 00:00:04.067
&gt;&gt; James: One thing that we've been using
a little bit already is quotes, and

2
00:00:04.067 --> 00:00:07.563
I think it's important to talk
about how quotes work exactly.

3
00:00:07.563 --> 00:00:12.250
So if you do some things like,
say you want to have some text that has

4
00:00:12.250 --> 00:00:17.022
things like less thans and greater
thans in it, if you just try to run

5
00:00:17.022 --> 00:00:21.963
the command like that, then bash is
gonna interpret the less thans and

6
00:00:21.963 --> 00:00:25.766
greater thans probably in
a way that you don't want.

7
00:00:25.766 --> 00:00:28.129
And to try to create a file and
write to it and

8
00:00:28.129 --> 00:00:31.096
try to read from a file that
doesn't exist probably.

9
00:00:31.096 --> 00:00:35.980
So it's good to put when you're using
things like literal dollar signs,

10
00:00:35.980 --> 00:00:40.648
and literal less thans and greater
thans to put them in single quotes.

11
00:00:42.715 --> 00:00:46.484
&gt;&gt; James: Or double quotes in some cases.

12
00:00:46.484 --> 00:00:49.403
And this means literally that.

13
00:00:52.579 --> 00:00:56.649
&gt;&gt; James: So double quotes, how they work
is a little bit different because you can

14
00:00:56.649 --> 00:01:00.454
put things like backticks and
dollar signs that will expand out to be

15
00:01:00.454 --> 00:01:05.210
environment variables inside of
double quotes, but not single quotes.

16
00:01:05.210 --> 00:01:12.170
So if I say, if I say this message,
hello $USER,

17
00:01:12.170 --> 00:01:16.200
that's not gonna work with single quotes,
but it will work with double quotes.

18
00:01:16.200 --> 00:01:18.476
It will expand out USER.

19
00:01:18.476 --> 00:01:20.309
So it's the main difference there.

20
00:01:20.309 --> 00:01:25.378
You can also put both forms
of doing backticks like

21
00:01:25.378 --> 00:01:30.205
$(whoami) is another
way of saying $USER or

22
00:01:30.205 --> 00:01:33.716
include backticks, same thing.

23
00:01:36.142 --> 00:01:40.566
&gt;&gt; James: So you've just gotta be careful
sometimes if you want literal characters

24
00:01:40.566 --> 00:01:43.862
that bash is gonna interpret
like pipes and whatever.

25
00:01:43.862 --> 00:01:45.207
Put quotes around them.

26
00:01:48.497 --> 00:01:52.099
&gt;&gt; James: Another important thing
is if sometimes you have to,

27
00:01:52.099 --> 00:01:56.080
you want things like spaces
in the value of an argument.

28
00:01:56.080 --> 00:01:59.720
A good example of this is if you wanna
specify a commit message with git

29
00:01:59.720 --> 00:02:00.870
on the command line.

30
00:02:00.870 --> 00:02:05.240
You do a git commit and
then you can do a message with -m.

31
00:02:06.906 --> 00:02:11.315
This is a great opportunity to talk
about some of the ways in which

32
00:02:11.315 --> 00:02:15.900
switches work because there's
a lot of subtle conventions here.

33
00:02:15.900 --> 00:02:20.775
So -am is often, but not always,

34
00:02:20.775 --> 00:02:24.483
the same as doing -a -m.

35
00:02:24.483 --> 00:02:28.550
So it's like a little bit of a shorthand
that some options parsers will expose.

36
00:02:28.550 --> 00:02:32.480
In certain commands like git
interpret commands in this way.

37
00:02:32.480 --> 00:02:34.129
But it's not universally true.

38
00:02:34.129 --> 00:02:37.310
It's just something that's often true.

39
00:02:37.310 --> 00:02:40.530
You kinda have to know a little
bit more about the command.

40
00:02:40.530 --> 00:02:44.540
But, in this case,
that's what git -an means.

41
00:02:44.540 --> 00:02:47.840
And that only works when the commands that

42
00:02:47.840 --> 00:02:50.220
preface the other one
are boolean commands.

43
00:02:50.220 --> 00:02:53.160
It's a little technical and complicated
but, anyways, that's how that works.

44
00:02:53.160 --> 00:02:56.730
So what I was saying is if you

45
00:02:56.730 --> 00:03:00.200
want to have things like spaces
there is a few ways of doing that.

46
00:03:00.200 --> 00:03:05.730
Say I want commit message
to say hello world right?

47
00:03:05.730 --> 00:03:10.550
If I just typed this, it wouldn't
actually do what I want it to do because

48
00:03:10.550 --> 00:03:14.840
the m command would read this argument,
hello and

49
00:03:14.840 --> 00:03:19.070
then, git commit command would be
past world, which is not what I want.

50
00:03:19.070 --> 00:03:20.240
So there're two ways to do this.

51
00:03:20.240 --> 00:03:24.050
You can either put a backspace
in front of the space,

52
00:03:24.050 --> 00:03:27.310
which will work to be
the message hello world.

53
00:03:27.310 --> 00:03:30.900
You have to do that with all of
the white space if you do it this way.

54
00:03:30.900 --> 00:03:36.650
Or you can use- you can quote it and
then that whole argument will be one chunk

55
00:03:36.650 --> 00:03:39.330
that the am will receive.

56
00:03:40.330 --> 00:03:43.070
If that all makes sense, but

57
00:03:43.070 --> 00:03:48.480
you kinda run into this sort of thing
fairly often so that's how that all works.

