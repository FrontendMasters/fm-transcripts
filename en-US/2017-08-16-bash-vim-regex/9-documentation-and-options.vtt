WEBVTT

1
00:00:00.740 --> 00:00:03.710
&gt;&gt; James Halliday: And again,
I already mentioned this, but if you wanna

2
00:00:03.710 --> 00:00:07.850
learn more about the different
arguments that the wc command takes,

3
00:00:07.850 --> 00:00:10.770
you can type man space wc.

4
00:00:10.770 --> 00:00:13.270
And you can read all about it.

5
00:00:13.270 --> 00:00:20.340
So here's, it's kind of written
in a very reference oriented way.

6
00:00:20.340 --> 00:00:26.723
There aren't too many options for
the wc command, but that's what they are.

7
00:00:33.896 --> 00:00:38.266
&gt;&gt; James Halliday: Okay, so
we've been using these things, flags or

8
00:00:38.266 --> 00:00:43.580
switches or options or
arguments a while for a little bit.

9
00:00:43.580 --> 00:00:47.080
But it's important to know
kind of how they usually work.

10
00:00:48.190 --> 00:00:53.280
But it's sort of up to every program
to implement these conventions.

11
00:00:53.280 --> 00:00:56.470
Mostly the programs do implement
the standard conventions but

12
00:00:56.470 --> 00:00:59.230
sometimes they do something
in a different way.

13
00:00:59.230 --> 00:01:03.070
And you kind of just have to read the
documentation for every program to know

14
00:01:04.330 --> 00:01:10.230
specifically how it works but generally
speaking, these conventions tend to hold.

15
00:01:10.230 --> 00:01:16.000
So one of these conventions is
that you can generally speaking,

16
00:01:16.000 --> 00:01:18.620
move the arguments around.

17
00:01:18.620 --> 00:01:23.580
So I can do wc -l, in a file, or

18
00:01:23.580 --> 00:01:27.360
I can put that -l at the end,
and these mean the same thing.

19
00:01:31.373 --> 00:01:35.940
&gt;&gt; James Halliday: Generally speaking,
the order of the arguments doesn't matter.

20
00:01:35.940 --> 00:01:39.520
Some commands, some programs, take

21
00:01:42.070 --> 00:01:46.540
flags that expect values.

22
00:01:46.540 --> 00:01:51.890
So head is an example of a program
that will print out the first,

23
00:01:51.890 --> 00:01:54.292
by default, I think the first
ten characters from the file.

24
00:01:54.292 --> 00:01:59.370
So if I run head on this file,
I see the little

25
00:01:59.370 --> 00:02:03.010
blurb from Project Gutenberg that they
stick at the front of this text file.

26
00:02:04.020 --> 00:02:05.810
So that's ten lines.

27
00:02:05.810 --> 00:02:12.380
But if I want a different number of lines,
I can do -n5 and I get five lines.

28
00:02:12.380 --> 00:02:14.960
You can also specify.

29
00:02:14.960 --> 00:02:19.280
You can do -n5, which usually works but

30
00:02:19.280 --> 00:02:23.270
not always, or
sometimes you have to do -n space 5.

31
00:02:23.270 --> 00:02:30.120
Or sometimes for longer options,
especially ones with dash dash.

32
00:02:30.120 --> 00:02:32.809
So if I read the page for man, so

33
00:02:32.809 --> 00:02:37.830
I can see that lines are -n
is an alias for --lines.

34
00:02:37.830 --> 00:02:42.690
And when you pass in --lines,
you have to put an equal sign afterward.

35
00:02:42.690 --> 00:02:48.840
So if I do head --lines=5,
then it works like that.

36
00:02:48.840 --> 00:02:49.990
So these all mean the same thing.

37
00:02:54.268 --> 00:02:57.427
&gt;&gt; James Halliday: And again,
I can move that --lines to be before or

38
00:02:57.427 --> 00:02:59.085
after the file name.

39
00:02:59.085 --> 00:03:02.245
The order usually doesn't matter,
although sometimes it does.

