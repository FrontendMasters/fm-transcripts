WEBVTT

1
00:00:00.390 --> 00:00:04.420
&gt;&gt; James Halliday: The next thing that
I wanna show is both wildcards and

2
00:00:04.420 --> 00:00:05.710
brace expansions.

3
00:00:05.710 --> 00:00:08.090
There's this really neat feature.

4
00:00:08.090 --> 00:00:09.460
First, I'll do wildcards.

5
00:00:09.460 --> 00:00:13.400
So you might have seen wildcards
in some other context before,

6
00:00:13.400 --> 00:00:15.310
but they're also available in Mesh.

7
00:00:15.310 --> 00:00:20.494
So I could type cat beep.txt boop.txt and

8
00:00:20.494 --> 00:00:23.530
then moby-dick.txt.

9
00:00:23.530 --> 00:00:28.410
And then it would concatenate all of
those, or for something a bit shorter,

10
00:00:28.410 --> 00:00:32.100
I could type cat space *.txt, and

11
00:00:32.100 --> 00:00:38.637
what that's gonna do is it's gonna expand
out to be all of those arguments, so.

12
00:00:38.637 --> 00:00:40.596
Goodness.

13
00:00:43.803 --> 00:00:44.530
&gt;&gt; James Halliday: Why?

14
00:00:44.530 --> 00:00:45.714
It's gzipped.

15
00:00:45.714 --> 00:00:51.526
Hang on, I gotta gunzip that.

16
00:00:59.448 --> 00:01:02.290
&gt;&gt; James Halliday: Here's a great example
of where I can use brace expansions.

17
00:01:03.600 --> 00:01:07.200
So now I have two files,
moby-dick.txt which is actually gzipped.

18
00:01:08.230 --> 00:01:12.540
And I have the better one
which is moby-dick.txt_

19
00:01:12.540 --> 00:01:15.600
which I want to replace the existing file.

20
00:01:15.600 --> 00:01:19.340
So I can use the move command
that we covered already.

21
00:01:19.340 --> 00:01:22.650
I could type out long form,
moby-dick.txt_,

22
00:01:22.650 --> 00:01:26.330
just like the original file.

23
00:01:26.330 --> 00:01:33.470
Then I wanna copy it over,
moby-dick.txt, which is the destination.

24
00:01:33.470 --> 00:01:39.749
Or, a bit shorter way to write that
would be to use an open curly brace,

25
00:01:39.749 --> 00:01:44.050
an underscore, comma, and a closing brace.

26
00:01:44.050 --> 00:01:47.080
So, what this does, and
you can always test

27
00:01:47.080 --> 00:01:50.790
what these kinds of different expansions
like wildcards and braces you're

28
00:01:50.790 --> 00:01:55.560
going to expand to by putting echo in
front of whatever you're gonna do.

29
00:01:56.860 --> 00:02:01.360
And so this will show you what
that commands expands out to, so

30
00:02:01.360 --> 00:02:03.970
it's gonna be the same as this.

31
00:02:03.970 --> 00:02:09.190
So how it works is all of the different
things that you might list

32
00:02:09.190 --> 00:02:12.775
separated by commas inside of
braces are going to be expanded.

33
00:02:13.890 --> 00:02:17.765
So I'll go ahead and run that commence and

34
00:02:17.765 --> 00:02:24.530
you can see that now the file txt_
doesn't exist and the other one does.

35
00:02:24.530 --> 00:02:27.500
Which is now uncompressed.

36
00:02:27.500 --> 00:02:30.795
&gt;&gt; Speaker 2: You used underscore because
that was the trailing character of that

37
00:02:30.795 --> 00:02:34.607
file, and you used just a comma with
nothing because that was also the trailing

38
00:02:34.607 --> 00:02:35.905
character, if you will.

39
00:02:35.905 --> 00:02:36.737
&gt;&gt; James Halliday: Yes.

40
00:02:36.737 --> 00:02:37.834
Yeah, correct.

41
00:02:37.834 --> 00:02:43.655
So, there's the common element of both
of those files was moby-dick.txt.

42
00:02:43.655 --> 00:02:47.812
And then, one of them had an underscore
at the end, and the other one didn't have

43
00:02:47.812 --> 00:02:51.940
anything at the end, so that's why I
used underscore and then empty string.

44
00:02:51.940 --> 00:02:53.620
&gt;&gt; Speaker 2: Can you
chain that brace then?

45
00:02:53.620 --> 00:02:58.293
For here's the common ground to this
point, here are the variations to this

46
00:02:58.293 --> 00:03:01.954
point, and then continue
the string with more [CROSSTALK]?

47
00:03:01.954 --> 00:03:02.905
&gt;&gt; James Halliday: Yes, yeah you can.

48
00:03:02.905 --> 00:03:05.540
So I can show an example of
what that would look like.

49
00:03:05.540 --> 00:03:06.910
So-
&gt;&gt; Speaker 2: Like beep and

50
00:03:06.910 --> 00:03:07.420
boop, for example.

51
00:03:07.420 --> 00:03:12.688
&gt;&gt; James Halliday: Yeah, so for example,
maybe I wanna cat everything that

52
00:03:12.688 --> 00:03:18.660
starts with the b, and is ee and
oo, and then a p.txt, right?

53
00:03:18.660 --> 00:03:26.240
So, if I wanna see what that expands out
to, I can see beep.txt and boop.txt.

54
00:03:26.240 --> 00:03:29.330
Which I could also use a star for that.

55
00:03:29.330 --> 00:03:33.350
So, if I want anything,
not just ee and oo,

56
00:03:33.350 --> 00:03:38.304
that begins with an b then goes p.txt.

57
00:03:38.304 --> 00:03:42.550
Can use the star.

58
00:03:42.550 --> 00:03:47.427
You can also chain the brace
expansions together which does

59
00:03:47.427 --> 00:03:52.705
a kind of combinatoric enumeration
which is sometimes useful.

60
00:03:52.705 --> 00:03:55.175
Probably not very common, but
it's really fun to play with.

61
00:03:55.175 --> 00:03:57.470
So, you could do something like.

62
00:03:59.830 --> 00:04:03.495
Also things that you expand with
brace expansion unlike wildcards,

63
00:04:03.495 --> 00:04:04.769
don't have to exists.

64
00:04:04.769 --> 00:04:08.157
So if you just need to generate options
and things for different commands,

65
00:04:08.157 --> 00:04:09.110
you could do that.

66
00:04:09.110 --> 00:04:18.617
So do something like {a,b}{c,d}
will be ac ad bc bd,

67
00:04:18.617 --> 00:04:24.249
or you can have even more options.

68
00:04:24.249 --> 00:04:30.860
Maybe x, y, z which just generates a, what
is that a combination or a permutation?

69
00:04:30.860 --> 00:04:32.336
I don't know but it does that, so.

70
00:04:32.336 --> 00:04:37.217
[LAUGH]
&gt;&gt; Speaker 2: Something I

71
00:04:37.217 --> 00:04:41.305
wasn't sure about till I tried,
it was the stars actually matching

72
00:04:41.305 --> 00:04:42.954
the files in your-
&gt;&gt; James Halliday: Correct.

73
00:04:42.954 --> 00:04:45.658
&gt;&gt; Speaker 2: Folder with the other
one is creating new stuff.

74
00:04:45.658 --> 00:04:48.335
&gt;&gt; James Halliday: Yeah.
So when you use the brace expansion,

75
00:04:48.335 --> 00:04:52.387
it just generates patterns and
stars will look for files,

76
00:04:52.387 --> 00:04:56.452
and if the files exist then it will,
or we'll print them.

77
00:04:58.920 --> 00:05:04.083
And if you're gonna use the star wildcard
expansion, you can preface that with

78
00:05:04.083 --> 00:05:09.260
directories or preface it with any other
part of the string that you know about.

79
00:05:09.260 --> 00:05:11.004
I could do cat.

80
00:05:11.004 --> 00:05:17.700
cat *.txt will expand to be this,
beep, boop and moby-dick.

81
00:05:17.700 --> 00:05:20.990
You can also test this stuff,
which is the echo command, Cindy.

82
00:05:22.410 --> 00:05:26.650
Echo is a very simple command
that prints out a string.

83
00:05:26.650 --> 00:05:31.850
So, it's a handy way
of providing stuff for

84
00:05:31.850 --> 00:05:37.610
standard out, or
just printing different commands.

85
00:05:37.610 --> 00:05:39.930
We'll be using this a lot to

86
00:05:39.930 --> 00:05:44.472
play around with different commands
that read from standard in later.

87
00:05:47.400 --> 00:05:48.576
So that's brace expansion.

88
00:05:48.576 --> 00:05:52.660
A practical example of when you
might wanna use this stuff,

89
00:05:52.660 --> 00:05:57.150
or when I've used it a lot in the past,
is if you need to.

90
00:05:57.150 --> 00:05:58.260
So you could.

91
00:05:59.410 --> 00:06:06.810
Maybe you're tasked with creating a bunch
of numbered directories for example.

92
00:06:06.810 --> 00:06:08.072
So you could type that out.

93
00:06:08.072 --> 00:06:09.530
You can make a script even.

94
00:06:09.530 --> 00:06:15.560
That lists out every single one or another
thing you can do with brace expansion

95
00:06:15.560 --> 00:06:20.110
is you can do sequences, so
if I need to generate a sequence

96
00:06:20.110 --> 00:06:25.040
of image directories from 0 to 100,
there we go.

97
00:06:26.060 --> 00:06:29.870
So img and then your number from 0 to 100,
inclusive.

98
00:06:29.870 --> 00:06:34.399
So if I wanna mkdir,
all of those image directories.

99
00:06:34.399 --> 00:06:42.070
Maybe I'll even mkdir a -p something
like images/img, whatever.

100
00:06:42.070 --> 00:06:46.835
Now, in images directory,
I have 101 image directories, or

101
00:06:46.835 --> 00:06:51.006
actually 100, because the top one is,
or no, it is.

102
00:06:51.006 --> 00:06:51.986
So, this 101.

103
00:06:53.170 --> 00:06:54.200
I guess that's how it works.

104
00:06:54.200 --> 00:06:59.050
You could also specify a step, which is
a bit obscure, but sometimes it's useful.

105
00:06:59.050 --> 00:07:03.816
So if I get rid of that directory,
I'll cover the rm command in a moment,

106
00:07:03.816 --> 00:07:08.880
but maybe I only want every ten images,
or ten numbers.

107
00:07:08.880 --> 00:07:09.819
I think that does it, right?

108
00:07:11.370 --> 00:07:15.360
Yes, so now only 0, 10, 20, 30, 40, 50.

109
00:07:16.540 --> 00:07:19.975
&gt;&gt; Speaker 2: So the first argument is
starting, second is ending, and third is-

110
00:07:19.975 --> 00:07:20.970
&gt;&gt; James Halliday: Increment.

111
00:07:20.970 --> 00:07:21.810
&gt;&gt; Speaker 2: Increments.
&gt;&gt; James Halliday: Yes.

112
00:07:23.170 --> 00:07:24.940
So just some fun stuff
to play around with.

113
00:07:24.940 --> 00:07:28.481
It doesn't come up too much but
it's just kinda handy.

114
00:07:28.481 --> 00:07:31.760
This is kind of how a lot of
this command line stuff goes.

115
00:07:31.760 --> 00:07:35.408
You just kinda have to
learn a lot of trivia and

116
00:07:35.408 --> 00:07:39.152
then the more of these
little tricks you know,

117
00:07:39.152 --> 00:07:44.534
the faster you can become and
kind of like the more stuff you can do.

118
00:07:44.534 --> 00:07:49.080
But it's sort of just a gradual process
of learning these little one-off pieces.

119
00:07:49.080 --> 00:07:52.900
In the aggregate, they kind of
amount to being proficient, I guess.

120
00:07:54.510 --> 00:07:57.590
It's kind of handy because you can
get away with not knowing very much

121
00:07:57.590 --> 00:07:58.420
to do what you want.

122
00:07:58.420 --> 00:08:01.310
And then as you learn new pieces,
you just get better and better.

123
00:08:01.310 --> 00:08:05.930
So that beats having to learn
a ton of stuff up front, I think.

