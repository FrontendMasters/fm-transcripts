WEBVTT

1
00:00:00.500 --> 00:00:01.030
&gt;&gt; James Halliday: Okay, so

2
00:00:01.030 --> 00:00:04.260
why don't we talk now a little
bit about character classes.

3
00:00:04.260 --> 00:00:07.020
So, character classes
are ways of specifying

4
00:00:08.710 --> 00:00:12.160
different characters that could match.

5
00:00:12.160 --> 00:00:16.460
So we've already seen an example of
dot which matches any character.

6
00:00:16.460 --> 00:00:21.490
But we couldn't match for example
just several of a set of characters.

7
00:00:21.490 --> 00:00:24.650
So maybe we want to match, so

8
00:00:24.650 --> 00:00:29.410
if we have a string
&gt;&gt; James Halliday: 'dog

9
00:00:31.979 --> 00:00:33.455
&gt;&gt; James Halliday: days'.

10
00:00:36.646 --> 00:00:42.389
&gt;&gt; James Halliday: If we wanna match
both D-O and D-A, we could make a little

11
00:00:42.389 --> 00:00:48.550
regex that will take d and
then start with a square brace.

12
00:00:48.550 --> 00:00:52.150
And then just list out the characters
that it could possibly be.

13
00:00:53.370 --> 00:00:59.048
And then we can replace that with
&gt;&gt; James Halliday: Capital DA,

14
00:00:59.048 --> 00:01:00.560
for example.

15
00:01:00.560 --> 00:01:02.907
So matches these two things.

16
00:01:06.051 --> 00:01:10.864
&gt;&gt; James Halliday: Where it starts to get
really fun is you can match things like

17
00:01:10.864 --> 00:01:15.302
character classes,
you can put quantifiers around.

18
00:01:15.302 --> 00:01:20.086
So, for example, if we wanna match one or
more of either a or

19
00:01:20.086 --> 00:01:24.590
o, WE Can put a + after
that character class.

20
00:01:24.590 --> 00:01:28.853
And now it's gonna take that
whole string of D-O-O-O-O-O and

21
00:01:28.853 --> 00:01:30.918
it's gonna replace it with DA.

22
00:01:32.501 --> 00:01:33.926
&gt;&gt; James Halliday: That's
something you can try.

23
00:01:43.729 --> 00:01:48.366
&gt;&gt; James Halliday: So we might also wanna
do something like put all the vowels,

24
00:01:48.366 --> 00:01:50.325
aeiou, and replace it.

25
00:01:50.325 --> 00:01:54.680
So now if we have like deg,
it also matches.

26
00:01:55.710 --> 00:01:59.720
You can also do the negation of
a character class by putting

27
00:01:59.720 --> 00:02:04.010
a caret at the start, so
that will match any vowel.

28
00:02:04.010 --> 00:02:07.790
In this case,
we don't have any of the letter d that's

29
00:02:07.790 --> 00:02:11.480
followed by a non-vowel, so
it won't match anything.

30
00:02:12.530 --> 00:02:15.542
But we could put some in there, so, like,

31
00:02:15.542 --> 00:02:19.331
dx matches now because d
is followed by a non-vowel.

32
00:02:25.583 --> 00:02:27.694
&gt;&gt; James Halliday: More
about character classes,

33
00:02:27.694 --> 00:02:33.300
you can specify ranges that the character
classes can be using a hyphen.

34
00:02:33.300 --> 00:02:37.647
So for example, if we wanna

35
00:02:37.647 --> 00:02:42.185
match things like numbers,

36
00:02:51.073 --> 00:02:53.171
&gt;&gt; James Halliday: So if we wanna match

37
00:02:53.171 --> 00:02:59.606
all of the numbers in here,
we can do that by doing 0-9.

38
00:02:59.606 --> 00:03:03.361
And then if we want one or
more numbers, we can use a +.

39
00:03:05.925 --> 00:03:09.600
&gt;&gt; James Halliday: And so this will remove
all of the numbers from that output.

40
00:03:11.599 --> 00:03:14.067
&gt;&gt; James Halliday: So
we just see the word hello what.

41
00:03:14.067 --> 00:03:17.799
You can also do the same
thing with letters, so

42
00:03:17.799 --> 00:03:23.172
if we have things like a-z, so
we'll replace all of the letters.

43
00:03:23.172 --> 00:03:24.340
You can mix and match ranges.

44
00:03:24.340 --> 00:03:26.592
So you can have capital letters and

45
00:03:26.592 --> 00:03:30.092
lower case letters all in a replacement,
like that.

46
00:03:32.054 --> 00:03:36.270
&gt;&gt; James Halliday: So if we had some
capital letters in there, let's put a few.

47
00:03:36.270 --> 00:03:40.790
It replaces them,
whereas before, it would not.

48
00:03:40.790 --> 00:03:44.110
You can also put more characters
in there if you wanna match,

49
00:03:44.110 --> 00:03:45.690
like, underscores as well.

50
00:03:45.690 --> 00:03:46.268
Oops!

51
00:03:51.175 --> 00:03:53.741
&gt;&gt; James Halliday: So
if we wanna match A through Z capital,

52
00:03:53.741 --> 00:03:56.172
a through z lowercase in underscore.

53
00:03:56.172 --> 00:04:00.136
And if there is like underscores
in here that we wanna get rid off,

54
00:04:00.136 --> 00:04:02.815
then that also gets rid
of the underscores.

55
00:04:05.245 --> 00:04:08.917
&gt;&gt; Speaker 2: You have
the escape spaces there?

56
00:04:08.917 --> 00:04:10.947
&gt;&gt; James Halliday: You
have to escape spaces-

57
00:04:10.947 --> 00:04:12.424
&gt;&gt; Speaker 2: Or what happens if you

58
00:04:12.424 --> 00:04:15.160
wanna put spaces in those brackets?

59
00:04:15.160 --> 00:04:15.811
&gt;&gt; James Halliday: You can do that.

60
00:04:15.811 --> 00:04:16.893
It's fine.
&gt;&gt; Speaker 2: Or tabs?

61
00:04:16.893 --> 00:04:18.244
&gt;&gt; James Halliday: Yeah, you can do that.

62
00:04:18.244 --> 00:04:22.668
I don't know how to type a tab but
you can do it somehow.

63
00:04:22.668 --> 00:04:24.890
[LAUGH] Probably by writing
a program to do it.

64
00:04:24.890 --> 00:04:26.950
So that also got rid of the space.

65
00:04:26.950 --> 00:04:27.467
We can see.

66
00:04:29.892 --> 00:04:35.672
&gt;&gt; James Halliday: I see on the chat that
someone asks is RegEx knowledge useful or

67
00:04:35.672 --> 00:04:39.238
very useful in REST API development.

68
00:04:39.238 --> 00:04:43.354
RegEx is one of those things
that if you don't know RegEx,

69
00:04:43.354 --> 00:04:47.430
you're not gonna use it, and
you can get by without it.

70
00:04:47.430 --> 00:04:51.260
But if you do know RegEx,
you're gonna be so

71
00:04:51.260 --> 00:04:56.485
much better off when you see a problem
where RegEx is pissed at you.

72
00:04:56.485 --> 00:04:59.155
Recently I read a bunch of
code that had for example,

73
00:04:59.155 --> 00:05:02.345
it was a parser and
it had all of these slice calls in it and

74
00:05:02.345 --> 00:05:06.515
it was doing index of everywhere and
it was just all of this integer math.

75
00:05:07.655 --> 00:05:11.830
When a handful of RegExs would
probably be much simpler and

76
00:05:11.830 --> 00:05:16.772
much easier to understand and
probably also faster too because these

77
00:05:16.772 --> 00:05:20.365
RegEx engines are heavily,
heavily optimized.

78
00:05:20.365 --> 00:05:28.345
And could avoid doing a bunch of
allocations and things of that sort.

79
00:05:28.345 --> 00:05:34.027
It's sort of the kind of topic
that is as useful as you make it.

80
00:05:34.027 --> 00:05:34.610
I don't know.

81
00:05:36.820 --> 00:05:40.390
I don't have a good answer to that
question, but I know that I personally

82
00:05:40.390 --> 00:05:44.870
write RegEx like every single day and
all the kinds of stuff that I do.

83
00:05:44.870 --> 00:05:49.811
So
&gt;&gt; James Halliday: You can

84
00:05:49.811 --> 00:05:52.678
certainly get away with not knowing it,
but

85
00:05:52.678 --> 00:05:56.694
it's probably best to know
it [LAUGH] rather than not.

86
00:05:56.694 --> 00:06:02.130
I'll show you how do some
of this in Node as well.

87
00:06:02.130 --> 00:06:08.171
So if we have like this string,
we can do .replace would be the word.

88
00:06:08.171 --> 00:06:11.377
So much of the time when
you're programming something,

89
00:06:11.377 --> 00:06:15.067
you have a little bit of string that
you just need to slice up a bit.

90
00:06:15.067 --> 00:06:19.934
And RegEx is
&gt;&gt; James Halliday: Oftentimes

91
00:06:19.934 --> 00:06:21.450
the best way to do that.

92
00:06:21.450 --> 00:06:24.930
So you have some prefix
you wanna get rid of,

93
00:06:24.930 --> 00:06:29.740
or some kind of string format you
need to split up and repackage.

94
00:06:29.740 --> 00:06:35.550
So we can just get rid of all
of the certain characters.

95
00:06:35.550 --> 00:06:39.778
So if you have to test whether a password
field has the right characters in it,

96
00:06:39.778 --> 00:06:43.549
you could do that with a RegEx pretty
easily with a character class and

97
00:06:43.549 --> 00:06:44.997
maybe some quantifiers.

98
00:06:44.997 --> 00:06:48.310
You could use curly braces.

99
00:06:48.310 --> 00:06:50.520
Here let's build one of those,
that would be kind of fun.

100
00:06:50.520 --> 00:06:57.852
So we can test whether a password field
is acceptable under some policies.

101
00:06:57.852 --> 00:07:02.525
So suppose that we need to have
at least eight characters and

102
00:07:02.525 --> 00:07:06.542
it has to contain a number and
a lower case letter and

103
00:07:06.542 --> 00:07:10.480
a capital letter and
one of a handful of symbols.

104
00:07:10.480 --> 00:07:11.403
So we can do that.

105
00:07:17.792 --> 00:07:22.697
&gt;&gt; James Halliday: So if we have,
&gt;&gt; James Halliday: This

106
00:07:22.697 --> 00:07:27.502
is gonna be our test password,
&gt;&gt; James Halliday: Which,

107
00:07:27.502 --> 00:07:29.172
autopass I think.

108
00:07:29.172 --> 00:07:31.439
If we have a capital in it.

109
00:07:31.439 --> 00:07:34.175
So we can do something like,
starting at the beginning,

110
00:07:34.175 --> 00:07:36.290
I'll get a little more
into how that works.

111
00:07:36.290 --> 00:07:39.322
But we can use quantifiers now.

112
00:07:39.322 --> 00:07:44.880
So it has to have at least eight
characters and $ means go to the end.

113
00:07:44.880 --> 00:07:46.430
That's in the notes as well.

114
00:07:46.430 --> 00:07:51.633
So we need to have
a pattern that's going to

115
00:07:51.633 --> 00:07:56.700
be capitals, and lowercase and digits.

116
00:07:56.700 --> 00:08:01.890
And there is a shortcut for
this called \w for word character.

117
00:08:06.170 --> 00:08:11.123
So we can test
&gt;&gt; James Halliday: Whether

118
00:08:11.123 --> 00:08:14.580
that condition is true
with their password.

119
00:08:14.580 --> 00:08:18.656
It's not in this case because there's
non-word characters there like

120
00:08:18.656 --> 00:08:23.421
an exclamation mark, so we can modify the
character class to include some symbols.

121
00:08:25.590 --> 00:08:28.110
&gt;&gt; James Halliday: I'll
just hit the top key there.

122
00:08:30.670 --> 00:08:35.026
And if you have a dash, it's little bit
special because you have to escape that

123
00:08:35.026 --> 00:08:37.806
with backslash if you don't
want it to be a range.

124
00:08:37.806 --> 00:08:40.775
So in this case that part is true.

125
00:08:40.775 --> 00:08:44.630
So how do we enforce the second part
of our password policy which is it

126
00:08:44.630 --> 00:08:47.880
has to have at least a capital letter,

127
00:08:47.880 --> 00:08:51.600
at least a lower case,
at least a number, or at least a symbol.

128
00:08:51.600 --> 00:08:56.570
So we can do that by either testing
each one of those cases, or

129
00:08:56.570 --> 00:09:02.625
doing it in the same RegEx is probably
possible, but I wouldn't do that.

130
00:09:02.625 --> 00:09:04.700
I would just do it the simpler way.

131
00:09:04.700 --> 00:09:08.734
So we need to make sure that there's
at least one lowercase letter.

132
00:09:10.550 --> 00:09:14.150
And at least one uppercase letter.

133
00:09:16.270 --> 00:09:21.035
And at least one digit,
which you can do 0 through 9, or

134
00:09:21.035 --> 00:09:27.211
there's another shortcut called \d
that matches any digit character.

135
00:09:27.211 --> 00:09:34.380
So do it that way, or you can do \d.

136
00:09:34.380 --> 00:09:39.081
And at least one symbol, so
if we have a character class where we

137
00:09:39.081 --> 00:09:42.719
can type out all of
the symbols that are allowed,

138
00:09:42.719 --> 00:09:47.356
being a bit careful about the dash
because to escape that one.

139
00:09:49.348 --> 00:09:53.730
&gt;&gt; James Halliday: Then, the password
that we've defined in pw matches.

140
00:09:53.730 --> 00:09:58.682
If we do another password,
&gt;&gt; James Halliday: Password

141
00:09:58.682 --> 00:10:00.310
doesn't match our policy.

142
00:10:00.310 --> 00:10:05.104
So this is kind of a more practical
example of something when you might need

143
00:10:05.104 --> 00:10:13.305
RegEX in sort of a rest server
in HTTP layer, for example.

144
00:10:13.305 --> 00:10:16.502
I'll paste that into the chat,
if you wanna mess with it.

145
00:10:21.890 --> 00:10:24.347
&gt;&gt; James Halliday: So
hopefully this makes sense.

146
00:10:24.347 --> 00:10:30.200
We didn't cover yet what the anchors do,
but I can just get into that in a sec.

147
00:10:32.410 --> 00:10:37.205
Negating character classes is
sometimes useful if you want to do

148
00:10:37.205 --> 00:10:39.438
things like match brackets.

149
00:10:39.438 --> 00:10:43.730
So for example, if you have some text and

150
00:10:43.730 --> 00:10:48.630
you wanna match whatever
is in the brackets.

151
00:10:48.630 --> 00:10:51.650
I would caution you not to use RegExs for

152
00:10:51.650 --> 00:10:54.726
parsing things like HTML because
they're actually nested.

153
00:10:54.726 --> 00:10:58.690
And so RegEx is not really a good tool for
that, you should use a parser.

154
00:10:58.690 --> 00:11:04.250
But if you have just some simple formatted
text that's like relatively uniform,

155
00:11:04.250 --> 00:11:07.570
then you can use it for that as well.

156
00:11:07.570 --> 00:11:13.280
So if we wanna replace anything
that begins with a bracket

157
00:11:14.330 --> 00:11:19.880
and has a character class
that's any character

158
00:11:19.880 --> 00:11:24.480
that's not a right-angled bracket, one or

159
00:11:24.480 --> 00:11:27.800
more of those up to
a closing angle bracket.

160
00:11:29.270 --> 00:11:31.400
Then we will replace it with string XXX.

161
00:11:32.710 --> 00:11:34.020
Does that make sense?

162
00:11:34.020 --> 00:11:36.289
It's kind of a lot to digest.

163
00:11:39.263 --> 00:11:42.320
&gt;&gt; James Halliday: So here we're
just using the negation of that.

164
00:11:42.320 --> 00:11:44.935
It's also useful if you wanna,
for example,

165
00:11:44.935 --> 00:11:48.769
if you wanna match where some quotes
begin and where the quotes end.

166
00:11:50.748 --> 00:11:54.310
&gt;&gt; James Halliday: Then we can modify
this so that we're doing quotes instead.

167
00:11:55.380 --> 00:11:56.411
And it's the same idea.

168
00:12:00.203 --> 00:12:04.028
&gt;&gt; James Halliday: So oftentimes you
might have, for whatever reason,

169
00:12:04.028 --> 00:12:07.420
some strings quoted for whatever reason.

170
00:12:07.420 --> 00:12:09.750
But this is a handy way to do that.

171
00:12:09.750 --> 00:12:12.100
It gets more complicated if
you wanna address things,

172
00:12:12.100 --> 00:12:15.550
like if you have a backslash quote
that you don't want to show up.

173
00:12:16.960 --> 00:12:21.215
Maybe we can do that at the end, once
I've covered kind of all of the rules for

174
00:12:21.215 --> 00:12:22.424
how to build RegExs.

175
00:12:25.601 --> 00:12:27.576
&gt;&gt; Speaker 2: That top line there,

176
00:12:27.576 --> 00:12:33.200
can you just verbally say what
you're doing there again.

177
00:12:33.200 --> 00:12:34.890
&gt;&gt; James Halliday: Yeah, so all right.

178
00:12:34.890 --> 00:12:39.950
So we have the string, cool and then
beans is inside of angle brackets, right?

179
00:12:39.950 --> 00:12:42.240
Open angle bracket, close angle bracket.

180
00:12:42.240 --> 00:12:44.940
And then some other fluff at the end.

181
00:12:44.940 --> 00:12:50.110
So what this RegEx says,
is it says, okay, RegEx engine,

182
00:12:50.110 --> 00:12:56.270
I want you to find starting
from a left angle bracket,

183
00:12:56.270 --> 00:13:00.710
once you've found one of those,
here's what you gotta do.

184
00:13:00.710 --> 00:13:07.280
After the opening angle bracket,
search for this character class.

185
00:13:07.280 --> 00:13:15.079
This character class means anything
that is not a right angle bracket.

186
00:13:15.079 --> 00:13:20.130
And then it says, one or
more of those kind of characters.

187
00:13:20.130 --> 00:13:22.951
So basically, step through that pattern,

188
00:13:22.951 --> 00:13:27.905
which is like anything that's not a right
bracket, I want you to keep going,

189
00:13:27.905 --> 00:13:31.506
keep going, keep going until
you hit one and then stop.

190
00:13:31.506 --> 00:13:35.200
And then I want you to match that right
angle bracket that you stopped on.

191
00:13:36.370 --> 00:13:40.130
And that whole pattern,
that you found RegEx engine,

192
00:13:40.130 --> 00:13:45.650
I want you to replace that with
the string XXX which is what it does.

193
00:13:45.650 --> 00:13:48.330
So I can maybe walk through a couple
of cases where it wouldn't do that,

194
00:13:48.330 --> 00:13:53.170
like if there's no closing angle bracket,
it won't replace, because

195
00:13:54.650 --> 00:13:58.530
the RegEx engine will actually go all
the way to the end of the string and

196
00:13:58.530 --> 00:14:01.030
it never found a closing angle bracket.

197
00:14:01.030 --> 00:14:04.523
So it's not gonna replace it.

198
00:14:04.523 --> 00:14:09.891
Could also maybe that is at
the end of the string, same deal.

199
00:14:15.201 --> 00:14:16.110
&gt;&gt; James Halliday: Does that help?

200
00:14:16.110 --> 00:14:20.420
Are people kind of getting how
this little machine works?

201
00:14:20.420 --> 00:14:23.870
Cuz we are building little machines
here with this RegEX language.

202
00:14:25.830 --> 00:14:27.418
Okay, cool.

203
00:14:30.107 --> 00:14:34.979
&gt;&gt; James Halliday: So it takes a lot of
practice to kind of internalize these, but

204
00:14:34.979 --> 00:14:36.420
very powerful.

205
00:14:36.420 --> 00:14:38.240
I use them all the time.

206
00:14:38.240 --> 00:14:39.971
I personally vouch for them.

207
00:14:39.971 --> 00:14:44.920
[LAUGH] Okay, so we used a couple of these
already in some of the other sections,

208
00:14:44.920 --> 00:14:48.140
but there are a bunch of shortcuts you
can use for different character classes.

209
00:14:49.830 --> 00:14:54.686
There is word characters,
there's white space characters,

210
00:14:54.686 --> 00:14:59.459
there's digits which are w,
s for white space, d for digit.

211
00:14:59.459 --> 00:15:05.070
And there's also the negations, which are
capitalized versions of those shortcuts.

212
00:15:05.070 --> 00:15:09.970
So if you have W, it means anything
that's not a word character.

213
00:15:09.970 --> 00:15:12.810
So it's the same as doing each
of these character classes.

214
00:15:12.810 --> 00:15:16.660
So here we have, for words,
A through Z, capital and

215
00:15:16.660 --> 00:15:20.940
lower case, and digits 0 through 9 and
also underscore.

216
00:15:20.940 --> 00:15:24.958
But then the negation just
puts a caret inside of

217
00:15:24.958 --> 00:15:28.581
the character class as the first element.

218
00:15:28.581 --> 00:15:31.510
And it does that for
all of these different things.

219
00:15:31.510 --> 00:15:32.440
&gt;&gt; Speaker 2: Can you mix that?

220
00:15:32.440 --> 00:15:36.100
Can I start,
I don't know if you'd wanna do this.

221
00:15:36.100 --> 00:15:39.319
But can you start with positives and
then obviously put a caret in and

222
00:15:39.319 --> 00:15:41.029
anything after that is a negation?

223
00:15:41.029 --> 00:15:42.880
Or would you not do it that way?

224
00:15:42.880 --> 00:15:43.760
&gt;&gt; James Halliday: No, the negations

225
00:15:43.760 --> 00:15:45.950
can only be at the start
of the character class.

226
00:15:45.950 --> 00:15:47.180
&gt;&gt; Speaker 2: Got it.
&gt;&gt; James Halliday: So you probably have to

227
00:15:47.180 --> 00:15:48.080
have a couple of different

228
00:15:48.080 --> 00:15:50.030
character classes if you
wanna do something like that.

229
00:15:52.010 --> 00:15:56.215
Okay, so these are just kind of the stuff
you get for free in almost any engine or

230
00:15:56.215 --> 00:15:58.894
you might have felt like
toggle extended notice,

231
00:15:58.894 --> 00:16:00.901
something silly like that to get it.

232
00:16:00.901 --> 00:16:05.163
But if the engine you're
using doesn't support these,

233
00:16:05.163 --> 00:16:09.710
you can always use the more long
form version of these rules.

