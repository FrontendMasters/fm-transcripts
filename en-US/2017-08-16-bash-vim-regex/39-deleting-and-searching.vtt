WEBVTT

1
00:00:00.419 --> 00:00:01.051
&gt;&gt; James Halliday: Okay, so

2
00:00:01.051 --> 00:00:06.350
now we can start to combine some of these
ways of hopping around with operators.

3
00:00:06.350 --> 00:00:13.040
So if we want to delete a character,
you can just type x from command mode.

4
00:00:13.040 --> 00:00:16.370
So if I do x, x, x, x, x, x,

5
00:00:16.370 --> 00:00:21.580
x, x, but say,
what if I wanna delete the whole line?

6
00:00:21.580 --> 00:00:24.830
Well, I can use the d operator for
that, so

7
00:00:24.830 --> 00:00:27.230
there's a couple of ways
of using the d operator.

8
00:00:27.230 --> 00:00:30.210
So I can do d$,

9
00:00:30.210 --> 00:00:35.720
which deletes from the current
position to the end of line.

10
00:00:35.720 --> 00:00:37.760
So maybe if I'm not at
the beginning of the line,

11
00:00:37.760 --> 00:00:42.440
so If I'm right here, I can do d$.

12
00:00:42.440 --> 00:00:45.081
Deletes everything to the end of the line.

13
00:00:45.081 --> 00:00:49.848
If I do d0 or D caret,
it deletes everything from the current

14
00:00:49.848 --> 00:00:53.690
position to the beginning of the line,
like so.

15
00:00:55.690 --> 00:01:01.367
Also there's if you need to undo
something you can hit u in command mode.

16
00:01:01.367 --> 00:01:05.211
If you wanna redo something,

17
00:01:05.211 --> 00:01:09.527
you can do Ctrl + R, [INAUDIBLE].

18
00:01:23.509 --> 00:01:25.340
&gt;&gt; James Halliday: Okay, so
more fun things that we can delete.

19
00:01:26.900 --> 00:01:32.640
We can sort of combine the ways of
skipping around even more, so for example,

20
00:01:32.640 --> 00:01:38.890
if we do dj,
j is a way of going down one line.

21
00:01:38.890 --> 00:01:43.150
So what vim will do is it
will delete from wherever you

22
00:01:43.150 --> 00:01:46.500
are to the next line and
also delete that line.

23
00:01:46.500 --> 00:01:48.960
So this is a way of kind of
deleting those two lines.

24
00:01:50.700 --> 00:01:55.050
Or you could also do dk, which deletes
the current line and the next line.

25
00:01:56.070 --> 00:02:00.390
Or you can do dgg,

26
00:02:00.390 --> 00:02:03.200
which deletes from the current
position to the beginning of the file.

27
00:02:04.590 --> 00:02:10.040
Or you can do dG, which deletes from the
current position to the end of the file.

28
00:02:11.630 --> 00:02:14.411
So everything you just
learned about moving around,

29
00:02:14.411 --> 00:02:16.832
you can also use to delete
to different spots.

30
00:02:20.853 --> 00:02:21.810
&gt;&gt; James Halliday: There's also some ones.

31
00:02:21.810 --> 00:02:26.580
I don't use these but maybe I should where
you can do things like combine numbers.

32
00:02:26.580 --> 00:02:33.230
So if you do 5dd, it's gonna delete
the next five lines, I think, yeah.

33
00:02:34.840 --> 00:02:37.380
Or if you wanna go back the other way,

34
00:02:37.380 --> 00:02:41.330
I think maybe d negative five,
would that work?

35
00:02:41.330 --> 00:02:42.020
No.

36
00:02:42.020 --> 00:02:47.124
Anyways, lots of fun ways
of combining these pieces.

37
00:02:50.414 --> 00:02:55.730
&gt;&gt; James Halliday: But yeah, you can
also dl, which deletes to the left and

38
00:02:55.730 --> 00:02:59.670
dh, which deletes to the right.

39
00:02:59.670 --> 00:03:01.670
If you don't wanna use x for some reason.

40
00:03:11.401 --> 00:03:17.530
&gt;&gt; James Halliday: So you can also use
regular expressions to hop around in them.

41
00:03:17.530 --> 00:03:20.770
So you could search for a pattern.

42
00:03:20.770 --> 00:03:26.690
For example, if we wanna, so

43
00:03:26.690 --> 00:03:34.300
if I do /cool, I'm gonna skip ahead to
the next occurrence of the word cool.

44
00:03:34.300 --> 00:03:37.300
If there are multiple occurrences
like here, I'll create a few more.

45
00:03:40.748 --> 00:03:44.729
&gt;&gt; James Halliday: So if I search for
cool with /cool from command mode,

46
00:03:44.729 --> 00:03:48.690
you can hit the N key,
which goes to the next match.

47
00:03:48.690 --> 00:03:51.230
This is also true in less,

48
00:03:51.230 --> 00:03:55.940
which is the pager that you're in if you
type get log or some other commands.

49
00:03:55.940 --> 00:03:59.880
You can use capital N to go back to
the previous match, like that, so

50
00:03:59.880 --> 00:04:00.780
n, capital N.

51
00:04:01.840 --> 00:04:05.480
If you wanna search backward,
instead of a forward slash,

52
00:04:05.480 --> 00:04:07.200
you can use a question mark.

53
00:04:07.200 --> 00:04:11.326
So from command mode,
you can type a question mark and

54
00:04:11.326 --> 00:04:13.995
then do something like a pattern.

55
00:04:13.995 --> 00:04:17.729
Maybe question mark
change will match change.

56
00:04:20.250 --> 00:04:24.600
The pattern system is
uses regular expressions.

57
00:04:24.600 --> 00:04:29.130
So if you wanna search for maybe I'll
put some numbers in this text file.

58
00:04:30.920 --> 00:04:33.280
So if you wanna search for
some numbers, we can do that.

59
00:04:33.280 --> 00:04:39.240
So I'll put forward slash and then do
a character class match for 0 through 9.

60
00:04:39.240 --> 00:04:42.500
And there I can skip
through those results.

61
00:04:46.988 --> 00:04:49.570
&gt;&gt; James Halliday: And the same goes for
searching backward with question mark.

62
00:04:52.760 --> 00:04:57.410
So here is another fun thing that
we can do, combining the matching

63
00:04:57.410 --> 00:05:01.100
searching capabilities with regular
expressions with the delete operator.

64
00:05:01.100 --> 00:05:07.362
We could do things, I can delete from
the current character by typing d and

65
00:05:07.362 --> 00:05:11.806
then I can do /[0-9],
with square brackets.

66
00:05:11.806 --> 00:05:17.422
And what this is gonna do is it's gonna,
starting at the current position,

67
00:05:17.422 --> 00:05:21.940
it's gonna delete everything
until it gets to a number.

68
00:05:21.940 --> 00:05:26.635
So if I do that,
I just deleted everything up to this

69
00:05:26.635 --> 00:05:29.815
number not including the number.

70
00:05:29.815 --> 00:05:35.321
I'll show you again, so you do d/ and
then the pattern that you want

71
00:05:35.321 --> 00:05:42.544
to delete
&gt;&gt; Speaker 2: And

72
00:05:42.544 --> 00:05:45.350
it deletes everything
until it hits the pattern?

73
00:05:45.350 --> 00:05:46.020
&gt;&gt; James Halliday: Yes.

74
00:05:46.020 --> 00:05:47.311
&gt;&gt; Speaker 2: From where your cursor is.

75
00:05:47.311 --> 00:05:51.990
&gt;&gt; James Halliday: Yeah, and
not including the pattern.

76
00:05:51.990 --> 00:05:54.790
There's also, you can now do dn as well,

77
00:05:54.790 --> 00:05:58.880
which deletes to the next
occurrence of the pattern.

78
00:05:58.880 --> 00:06:03.750
So if you already had a pattern that
you'd just done, you could do dn,

79
00:06:03.750 --> 00:06:05.505
which deletes to the next occurence.

80
00:06:05.505 --> 00:06:09.810
Or dN, which searches from the current
position to the previous occurrence.

81
00:06:16.217 --> 00:06:18.615
&gt;&gt; Speaker 2: After you do that,
you delete something,

82
00:06:18.615 --> 00:06:20.995
is there a way to get out of that mode?

83
00:06:20.995 --> 00:06:25.965
Cuz I still see my pattern down there
after I deleted to that pattern.

84
00:06:25.965 --> 00:06:27.795
&gt;&gt; James Halliday: Do you,
let me see here.

85
00:06:31.906 --> 00:06:36.825
&gt;&gt; James Halliday: You still see
the pattern after you hit Enter or.

86
00:06:36.825 --> 00:06:37.599
&gt;&gt; Speaker 2: Let me try again.

87
00:06:37.599 --> 00:06:38.678
&gt;&gt; James Halliday: Okay.

88
00:06:38.678 --> 00:06:39.381
&gt;&gt; Speaker 2: Keep going.

89
00:06:39.381 --> 00:06:40.921
&gt;&gt; James Halliday: Okay [LAUGH].

90
00:06:46.163 --> 00:06:49.626
&gt;&gt; James Halliday: So
there's some more ways to jump around,

91
00:06:49.626 --> 00:06:55.397
other than regular expressions,
you can also use these operators f and

92
00:06:55.397 --> 00:06:58.200
t and also capital F and capital T.

93
00:06:58.200 --> 00:07:02.348
So for example, if I wanna skip,

94
00:07:02.348 --> 00:07:07.030
suppose because I have
a sentence like this.

95
00:07:07.030 --> 00:07:11.479
If I wanna jump from my current
position to that first period,

96
00:07:11.479 --> 00:07:16.310
I could go l, l, l, l, l, l,
l, that's a lot of typing.

97
00:07:16.310 --> 00:07:18.100
What I can do instead is type f.

98
00:07:20.713 --> 00:07:24.008
&gt;&gt; James Halliday: Which is a little
bit easier sometimes than popping

99
00:07:24.008 --> 00:07:26.842
into Regex mode, especially with the dot,

100
00:07:26.842 --> 00:07:30.731
because dot is a meta character,
so all I have to do /\..

101
00:07:30.731 --> 00:07:34.890
So f dot to go to pattern, I'll set t dot

102
00:07:34.890 --> 00:07:38.820
to go to the character before that
character that you're searching for.

103
00:07:39.950 --> 00:07:46.440
So do f dot, it goes straight to that
character, if I do t dot, right before it.

104
00:07:46.440 --> 00:07:51.023
That works for any character,
so if I wanna hop to the t,

105
00:07:51.023 --> 00:07:58.180
I can do t, capital T, right there.

106
00:07:58.180 --> 00:08:04.000
You can combine the t and f way of hopping
around with deletes of course, as well.

107
00:08:04.000 --> 00:08:09.903
So if I wanna delete everything
before the capital T,

108
00:08:09.903 --> 00:08:12.919
I could do dt capital T, and

109
00:08:12.919 --> 00:08:18.709
it deletes everything that
precedes the capital T.

110
00:08:18.709 --> 00:08:26.550
So dT, capital T there, deletes everything
before the T, not including the T.

111
00:08:26.550 --> 00:08:30.390
I could also do df capital T and
that deletes the capital T,

112
00:08:30.390 --> 00:08:32.420
as well as everything preceding it.

113
00:08:34.720 --> 00:08:38.790
There's also if you capitalize d and t,

114
00:08:38.790 --> 00:08:42.840
you do a search backwards
instead of forwards, so

115
00:08:42.840 --> 00:08:47.590
if I do a capital FI then it search
backwards on the current line.

116
00:08:47.590 --> 00:08:49.880
I should mention again t and

117
00:08:49.880 --> 00:08:53.990
f only search the current line only
Regex is which search the entire file.

