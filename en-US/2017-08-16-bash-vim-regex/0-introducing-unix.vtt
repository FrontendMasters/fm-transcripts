WEBVTT

1
00:00:00.410 --> 00:00:03.730
&gt;&gt; James Halliday: Welcome everyone,
both here and in cyber-space.

2
00:00:03.730 --> 00:00:08.420
Today, we're going to be going
through the command line using bash,

3
00:00:08.420 --> 00:00:11.140
which is a shell for the Unix system.

4
00:00:11.140 --> 00:00:16.400
And so, I wanted to start out by talking
a little bit about what the heck is Unix?

5
00:00:16.400 --> 00:00:21.520
So, Unix is an operating system
that actually got its start

6
00:00:21.520 --> 00:00:28.140
as a project called Multix that started in
1964 is a collaboration between Phil Labs,

7
00:00:28.140 --> 00:00:35.730
General Electric and MIT, and then,
I think, in 1969 Phil Labs pulled out and

8
00:00:35.730 --> 00:00:40.360
made their own version of this,
bundable projects that became UNIX.

9
00:00:40.360 --> 00:00:44.970
So, Phil Labs is kind of
a really important place

10
00:00:44.970 --> 00:00:49.750
where a lot of this stuff happened
probably from the 60s up until the 80s.

11
00:00:51.670 --> 00:00:57.510
So, at Bell Labs not only that
you get the transistor in

12
00:00:57.510 --> 00:01:02.370
previous times, but you got Unix and
the C programming language and

13
00:01:02.370 --> 00:01:06.650
a lot of the different utilities
that are kind of like still around,

14
00:01:06.650 --> 00:01:12.790
still important foundational
pieces of modern systems.

15
00:01:12.790 --> 00:01:15.420
So, there's a really great video

16
00:01:15.420 --> 00:01:19.620
in the lecture notes right here
that's from AT&amp;T's archive.

17
00:01:19.620 --> 00:01:25.130
I think, it was made from In the 70s,
maybe, or early 80s, about.

18
00:01:25.130 --> 00:01:27.300
And people like Brian Kernighan and

19
00:01:27.300 --> 00:01:31.110
Ken Thompson talk about what
makes the UNIX system work.

20
00:01:31.110 --> 00:01:35.800
And I really love this one little segment
where Brian Kernighan just sits down

21
00:01:35.800 --> 00:01:37.700
on the terminal and

22
00:01:37.700 --> 00:01:42.150
makes a little one-liner spell checker
[LAUGH] using a bunch of small tools.

23
00:01:42.150 --> 00:01:44.350
I think,
that really embodies the power and

24
00:01:44.350 --> 00:01:48.060
flexibility of this kind
of approach to computing.

25
00:01:48.060 --> 00:01:50.430
That's still really useful, even today.

26
00:01:52.160 --> 00:01:57.290
So, I think, it's important kind of to
talk a little bit about the context and

27
00:01:57.290 --> 00:02:00.840
the history where these
systems were built.

28
00:02:00.840 --> 00:02:05.400
So, the big thing,
kind of in the 60s and early 70s,

29
00:02:05.400 --> 00:02:10.320
was building time-sharing systems, because
computers were very, very expensive.

30
00:02:10.320 --> 00:02:15.150
And so, you wanted many people to be
able to use them at the same time,

31
00:02:15.150 --> 00:02:18.390
because then you wouldn't have to buy so
many.

32
00:02:18.390 --> 00:02:22.631
So, the original systems were built
around the idea of time sharing, or

33
00:02:22.631 --> 00:02:27.428
like batch computing, so a bunch of people
could be logged into the same machine,

34
00:02:27.428 --> 00:02:31.531
and their little programs could be
running sort of simultaneously and

35
00:02:31.531 --> 00:02:35.382
then our printing system can kind
of schedule then accordingly.

36
00:02:38.257 --> 00:02:42.444
&gt;&gt; James Halliday: To do this at first
there are these pretty ridiculous by

37
00:02:42.444 --> 00:02:47.184
standards machines that had a keyboard and
they had a printer, and so,

38
00:02:47.184 --> 00:02:52.800
when you would run your program on one
of these things called a teleprinter.

39
00:02:52.800 --> 00:02:57.370
You would type in a command on a keyboard
and a line feed printer would print

40
00:02:57.370 --> 00:03:00.650
out the output of your program line
by line as it ran on the mainframe.

41
00:03:01.650 --> 00:03:06.050
These systems weren't very complicated and

42
00:03:06.050 --> 00:03:10.990
they were replaced by monochrome monitors
instead of a printer, to save on paper,

43
00:03:10.990 --> 00:03:16.000
but the basic idea was the same,
the terminal it was called,

44
00:03:16.000 --> 00:03:20.140
that sits at your desk,
can't really do any computing of its own.

45
00:03:20.140 --> 00:03:23.110
It's all wired up either through
the telephone network, or

46
00:03:23.110 --> 00:03:25.190
through fiber optic
cable to the mainframe.

47
00:03:26.840 --> 00:03:31.850
Later, this went away and

48
00:03:31.850 --> 00:03:35.540
the mini computer,
micro computer era, kind of.

49
00:03:35.540 --> 00:03:39.660
Now, we have CPUs in
the machines on our desk.

50
00:03:39.660 --> 00:03:42.250
But the legacy was really
important from this era,

51
00:03:42.250 --> 00:03:47.240
because it gave us an idea of
this called standard input,

52
00:03:47.240 --> 00:03:50.740
like someone typing on the keyboard,
and standard output,

53
00:03:50.740 --> 00:03:54.490
like this printer that's printing out
the characters from your program.

54
00:03:55.840 --> 00:04:01.790
And even writing any
kind of program today,

55
00:04:01.790 --> 00:04:06.790
these ideas are really important,
because they sort of give

56
00:04:06.790 --> 00:04:11.770
you a place where you can log information,
you can display output,

57
00:04:11.770 --> 00:04:15.069
and you don't have to come up with
your own system for doing that.

58
00:04:16.170 --> 00:04:19.000
But I know they're really
important piece about this idea

59
00:04:19.000 --> 00:04:22.550
is that instead of the keyboard,
instead of having to type everything,

60
00:04:22.550 --> 00:04:26.420
you can get a program to do the typing for
you, and I'll get more into that later.

61
00:04:28.170 --> 00:04:32.881
And we still use ideas of course like a,
printed, which back in the old days meant

62
00:04:32.881 --> 00:04:37.314
that an actual printer was printing,
but now, it's just a word that we used

63
00:04:37.314 --> 00:04:40.597
to say that characters are being
written to the screen.

64
00:04:43.331 --> 00:04:48.344
&gt;&gt; James Halliday: So,
the UNIX system has this kind of layered

65
00:04:48.344 --> 00:04:53.760
model where at the core,
you have the kernel.

66
00:04:53.760 --> 00:04:58.270
The kernel is a program that
kind of manages resources, and

67
00:04:58.270 --> 00:05:01.690
then you have the shell, that's what
we're gonna be doing mostly today.

68
00:05:01.690 --> 00:05:06.380
And then, you have utilities, so the shell
is a program that runs other programs.

69
00:05:06.380 --> 00:05:10.280
And the utilities are little system tools,
maybe you've written,

70
00:05:10.280 --> 00:05:12.990
maybe the system provides them,
maybe your friend wrote them.

71
00:05:15.641 --> 00:05:20.040
&gt;&gt; James Halliday: So, the kernel's
job is to do things like scheduling.

72
00:05:20.040 --> 00:05:26.414
So, if you have two programs and they're
running at the same time on this machine,

73
00:05:26.414 --> 00:05:31.784
you might only have one CPU, so
the kernel's job is to make sure that,

74
00:05:31.784 --> 00:05:36.611
okay, this program gets to
run 1,000 instructions, and

75
00:05:36.611 --> 00:05:40.436
then we're gonna switch
over to this program that

76
00:05:40.436 --> 00:05:45.300
can run 1,000 instructions and
does this balancing act.

77
00:05:45.300 --> 00:05:50.278
It's also important that the kernel
provides a kind of standardized interface

78
00:05:50.278 --> 00:05:55.140
to a lot of different kinds of
hardware like a keyboard and a mouse.

79
00:05:55.140 --> 00:05:57.880
Or maybe a network card
in a consistent way, so

80
00:05:57.880 --> 00:06:02.380
that you don't have to write a different
program based on whether you

81
00:06:02.380 --> 00:06:06.700
have a Ethernet card from Broadcom,
or whether you have one from Realtek.

82
00:06:06.700 --> 00:06:09.440
It's all standardized at the kernel level.

83
00:06:10.720 --> 00:06:16.429
And also the kernel sort of deals with how
programs can allocate and free memory.

84
00:06:18.600 --> 00:06:21.980
So, both that they can't read each
others memory, which is important for

85
00:06:21.980 --> 00:06:27.390
security and stability, so

86
00:06:27.390 --> 00:06:32.170
that the kernel can manage using
the actual physical memory, and also

87
00:06:32.170 --> 00:06:36.570
things like swap space, which is when your
computer uses the hard disk for memory.

88
00:06:38.440 --> 00:06:44.500
And there's this thing called a SYSCALL
and a standard called Posix, P-O-S-I-X,

89
00:06:44.500 --> 00:06:49.990
that sort of say how this all
should basically work in a kind

90
00:06:49.990 --> 00:06:55.700
of standards compliant way on any kind
of system that's like a Unix C system,

91
00:06:55.700 --> 00:06:59.724
that includes Linux and
VSD and even Mac OS 10.

