WEBVTT

1
00:00:00.380 --> 00:00:03.810
&gt;&gt; James Halliday: Another fun thing you
can do in visual mode, you can yank text.

2
00:00:03.810 --> 00:00:05.990
So here, born visual line mode.

3
00:00:07.760 --> 00:00:11.430
Whenever you delete something, which
you can do a d or x from visual mode,

4
00:00:11.430 --> 00:00:14.320
it actually gets put into a paste buffer.

5
00:00:14.320 --> 00:00:19.325
So if you navigate somewhere else in
the file, and you hit p, it gets pasted.

6
00:00:19.325 --> 00:00:27.900
A way to do that without deleting
what you're working on is to press y.

7
00:00:27.900 --> 00:00:33.531
So if you visually select something, press
y and then you can go somewhere else and

8
00:00:33.531 --> 00:00:37.050
press p to paste it without
deleting the original.

9
00:00:41.030 --> 00:00:43.670
So that's yank and cut.

10
00:00:46.370 --> 00:00:52.040
If you want to adjust
the amount of indentation

11
00:00:52.040 --> 00:00:56.990
that you're using,
there are a bunch of ways to do that.

12
00:00:56.990 --> 00:01:00.640
There is, in fact,
a .vimrc file that you can set.

13
00:01:00.640 --> 00:01:06.280
So if you wanna look at mine,
if you like tabs, don't set this.

14
00:01:06.280 --> 00:01:10.520
But if you don't like tabs, if you like
spaces better, you can do set expandtab.

15
00:01:10.520 --> 00:01:13.900
And every time you hit the tab
character on your keyboard,

16
00:01:13.900 --> 00:01:17.500
it will expand out to be
a certain number of spaces.

17
00:01:17.500 --> 00:01:19.640
So, I have my vim configured so

18
00:01:19.640 --> 00:01:23.395
that every time I hit the tab key,
I'll get two spaces of output.

19
00:01:23.395 --> 00:01:27.601
You can also configure it to
do things like autoindent,

20
00:01:27.601 --> 00:01:29.846
which is a very good setting.

21
00:01:29.846 --> 00:01:34.419
This means that whenever you're in a line
of code like I can show a line of code

22
00:01:34.419 --> 00:01:35.815
again.

23
00:01:35.815 --> 00:01:40.651
So when I'm in an indented part of code,
if I hit Enter again,

24
00:01:40.651 --> 00:01:45.024
I stay at that level indentation
which is really handy.

25
00:01:45.024 --> 00:01:49.240
Another nice feature is there are other
ways of getting into insert mode.

26
00:01:49.240 --> 00:01:53.113
If you press o instead of i,
you go into insert mode and

27
00:01:53.113 --> 00:01:56.654
a new line will be placed
after the current line.

28
00:01:56.654 --> 00:02:03.000
And there's likewise capital O, which does
the same thing but for the preceding line.

29
00:02:03.000 --> 00:02:06.180
So if I go into O,
I'm now in insert mode and

30
00:02:06.180 --> 00:02:11.010
a new line has been inserted,
the previous spot to where I was.

31
00:02:11.010 --> 00:02:17.105
But at the same indentation level,
if you have r indent turned on.

32
00:02:19.640 --> 00:02:24.040
&gt;&gt; James Halliday: Right, there's also one
called A, which if you do capital A, it

33
00:02:24.040 --> 00:02:30.260
puts you in INSERT mode at the end of the
current line, which is sometimes handy.

34
00:02:30.260 --> 00:02:36.210
And there's also a lowercase a, which puts
you into INSERT mode, next character.

35
00:02:36.210 --> 00:02:41.070
Whereas INSERT mode will put you into
INSERT mode at the current character.

36
00:02:41.070 --> 00:02:46.733
So just like little worn off, quick ways
to jump to the right spot in the file.

37
00:02:46.733 --> 00:02:51.609
I think it sounds maybe like
this kinda stuff wouldn't

38
00:02:51.609 --> 00:02:55.748
really save you much time,
but I don't know.

39
00:02:55.748 --> 00:02:58.853
I think that you can get muscle memory for

40
00:02:58.853 --> 00:03:03.060
doing this kinda stuff,
it feels really satisfying.

41
00:03:03.060 --> 00:03:05.479
I don't know how else to describe it but.

42
00:03:05.479 --> 00:03:08.617
[LAUGH]
&gt;&gt; James Halliday: Right,

43
00:03:08.617 --> 00:03:10.650
capital J is another good trick.

44
00:03:13.040 --> 00:03:17.460
If you wanna take this line and
join it to the next line.

45
00:03:17.460 --> 00:03:20.860
If you do capital J,
it sticks them together.

46
00:03:20.860 --> 00:03:23.930
So now, it just removed that new line,
that's a really useful trick.

47
00:03:26.600 --> 00:03:29.820
And back tick dot is really easy.

48
00:03:29.820 --> 00:03:34.418
So if I quit this file,
&gt;&gt; James Halliday: And I open it again and

49
00:03:34.418 --> 00:03:40.500
I do back tick dot, I jump to
the last part where I made an edit.

50
00:03:40.500 --> 00:03:43.745
That's really hideous well if you
are editing source files, and

51
00:03:43.745 --> 00:03:47.058
you wanna skip back to the last part
of the file you were working on.

52
00:03:47.058 --> 00:03:48.696
&gt;&gt; Speaker 2: Where does it store that?

53
00:03:48.696 --> 00:03:50.042
&gt;&gt; James Halliday: I don't
know where it stores it.

54
00:03:50.042 --> 00:03:52.164
[LAUGH] Good question.
&gt;&gt; Speaker 2: I was just looking,

55
00:03:52.164 --> 00:03:58.845
there's a vim info file in mine machine
that I'm guessing that stores that.

56
00:04:00.834 --> 00:04:02.220
&gt;&gt; James Halliday: Yeah, it seems like it.

57
00:04:02.220 --> 00:04:05.190
Yeah, cool,
it is like all the places in the file.

58
00:04:05.190 --> 00:04:05.690
That's neat.

