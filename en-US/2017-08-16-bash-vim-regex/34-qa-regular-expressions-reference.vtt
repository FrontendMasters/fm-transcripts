WEBVTT

1
00:00:00.210 --> 00:00:05.143
&gt;&gt; James Halliday: Another good tip,
if you want a handy reference

2
00:00:05.143 --> 00:00:10.199
that might already be
installed on your system,

3
00:00:10.199 --> 00:00:13.423
you can do perldoc perlreref.

4
00:00:13.423 --> 00:00:18.470
Even though we're not doing Perl, it's
a very handy regular expression reference.

5
00:00:18.470 --> 00:00:22.070
If you just scroll passed all
of the Perl-specific part,

6
00:00:22.070 --> 00:00:27.010
you see the syntax section is
a really good, quick reference for

7
00:00:27.010 --> 00:00:28.950
something that's already on your system.

8
00:00:28.950 --> 00:00:35.111
So you can see that here the dollar
sign is anchor at the end of the string,

9
00:00:35.111 --> 00:00:40.381
different kinds of range quantifiers,
character classes.

10
00:00:40.381 --> 00:00:44.373
It gets into all of the kinds
of escape codes as well.

11
00:00:44.373 --> 00:00:48.415
Here's a reference for digit,
nondigit, word, non-word, whitespace,

12
00:00:48.415 --> 00:00:49.465
non-whitespace.

13
00:00:49.465 --> 00:00:53.686
This horizontal whitespace as well is
something that might be supported in some

14
00:00:53.686 --> 00:00:54.257
engines.

15
00:00:55.639 --> 00:00:58.570
&gt;&gt; James Halliday: I know that I
personally consult this now and then.

16
00:00:58.570 --> 00:01:03.890
Especially if I need some rather
more esoteric kind of capturing,

17
00:01:03.890 --> 00:01:04.950
if the engine supports it.

18
00:01:05.958 --> 00:01:09.562
We're not gonna go into the quite so

19
00:01:09.562 --> 00:01:13.654
fancy stuff though, because that's.

20
00:01:15.604 --> 00:01:17.669
&gt;&gt; Speaker 2: You showed that
example that you had up,

21
00:01:17.669 --> 00:01:20.050
where you were replacing
a word within a file.

22
00:01:21.060 --> 00:01:22.010
&gt;&gt; James Halliday: Yeah.

23
00:01:22.010 --> 00:01:23.658
&gt;&gt; Speaker 2: Using sed.

24
00:01:23.658 --> 00:01:24.680
&gt;&gt; James Halliday: This one.

25
00:01:29.205 --> 00:01:36.400
&gt;&gt; Speaker 3: Can you comment on how,
I think this is all oriented around lines.

26
00:01:36.400 --> 00:01:41.470
And is this, what if you wanna match
something on multiple lines, or?

27
00:01:41.470 --> 00:01:48.170
&gt;&gt; James Halliday: Right, so sed and
grep are oriented around lines, generally.

28
00:01:48.170 --> 00:01:52.507
If you do this kind of
thing in JavaScript,

29
00:01:52.507 --> 00:01:59.747
it's not oriented on lines,
unless you pass in a modifier, I think m.

30
00:01:59.747 --> 00:02:03.405
If you pass the m flag into
your regex at the end,

31
00:02:03.405 --> 00:02:10.470
then that will turn the regular expression
from non-line mode into line mode.

32
00:02:10.470 --> 00:02:15.670
But the default behavior in JavaScript
is that things will generally process

33
00:02:17.540 --> 00:02:21.360
as a big single string, single line,
even if there's new lines in it.

34
00:02:21.360 --> 00:02:26.270
But that's not true of sed and grep,
I don't know if it's even possible.

35
00:02:26.270 --> 00:02:30.350
It's possibly possible to configure sed
and grep not to work in line mode, but

36
00:02:30.350 --> 00:02:33.016
they're really oriented
around line mode operation.

37
00:02:33.016 --> 00:02:38.032
If that answers, yep.

38
00:02:38.032 --> 00:02:40.660
Yeah, regular expressions are kind
of one of those things that,

39
00:02:43.110 --> 00:02:45.730
there's a bunch of rules.

40
00:02:45.730 --> 00:02:49.680
We've more or
less gone through all of the rules, but

41
00:02:49.680 --> 00:02:53.620
it's kind of like the implications of
those rules are not always obvious.

42
00:02:53.620 --> 00:02:58.732
And sometimes it takes just a lot
of experimentation to kind of work

43
00:02:58.732 --> 00:03:04.318
through how you can use those rules
to solve problems in different ways.

44
00:03:04.318 --> 00:03:10.519
And how the different pieces
kind of work with other pieces.

45
00:03:10.519 --> 00:03:15.593
You can, for example,
always put a quantifier on a group,

46
00:03:15.593 --> 00:03:20.261
or you can put a character
class inside of something and

47
00:03:20.261 --> 00:03:24.850
it's sort of like,
it's a language like any other.

48
00:03:24.850 --> 00:03:29.210
So there's this synthesis that happens,
but I don't know, it's hard to communicate

49
00:03:29.210 --> 00:03:33.710
that without having people go in and
try stuff out, I guess.

50
00:03:33.710 --> 00:03:37.550
&gt;&gt; Speaker 3: When you did the matching
for the password or the password rules.

51
00:03:37.550 --> 00:03:41.006
&gt;&gt; James Halliday: Yeah.
&gt;&gt; Speaker 3: You put a quantifier

52
00:03:41.006 --> 00:03:45.400
on the end, the {8,}..

53
00:03:45.400 --> 00:03:47.865
&gt;&gt; James Halliday: Here it is,
yes, so this means 8 or

54
00:03:47.865 --> 00:03:51.920
more characters
&gt;&gt; Speaker 3: Yeah, so the comma, and

55
00:03:51.920 --> 00:03:56.440
then no character after that,
no number after that, means unlimited?

56
00:03:56.440 --> 00:03:58.020
&gt;&gt; James Halliday: Yes.
&gt;&gt; Speaker 3: So if you put a limit on it,

57
00:03:58.020 --> 00:04:00.230
you could say a max size of something?

58
00:04:00.230 --> 00:04:04.005
&gt;&gt; James Halliday: Yeah, a max size of 16,
for example, would be just comma 16.

59
00:04:04.005 --> 00:04:08.269
It means anything between 8 and
16, inclusive.

60
00:04:09.560 --> 00:04:14.030
And the thing on the left of
the quantifier might not even be

61
00:04:14.030 --> 00:04:16.240
a character class.

62
00:04:16.240 --> 00:04:19.778
You could even have something
that is not a single character,

63
00:04:19.778 --> 00:04:24.079
it could be like a group, for example,
so if you had something else there.

64
00:04:26.455 --> 00:04:30.769
&gt;&gt; James Halliday: That's kinda what I was
trying to get at with how these operations

65
00:04:30.769 --> 00:04:31.952
sort of compose.

66
00:04:39.148 --> 00:04:40.140
&gt;&gt; James Halliday: There we go.

67
00:04:40.140 --> 00:04:43.317
&gt;&gt; Speaker 3: So can you help
me understand the difference if

68
00:04:43.317 --> 00:04:48.692
the quantifier with the 8 applied to a
group that you just had when you put the,

69
00:04:48.692 --> 00:04:50.870
what's the difference?

70
00:04:50.870 --> 00:04:51.546
I don't think I quite got it.

71
00:04:51.546 --> 00:04:53.858
&gt;&gt; James Halliday: Yeah, why don't
I come up with an example for that.

72
00:04:53.858 --> 00:04:58.807
So if we have something

73
00:04:58.807 --> 00:05:03.557
like,
&gt;&gt; James Halliday: Something that's

74
00:05:03.557 --> 00:05:06.868
multi-character that repeats would be,

75
00:05:14.606 --> 00:05:16.515
&gt;&gt; James Halliday: So say we have,

76
00:05:23.543 --> 00:05:24.947
&gt;&gt; James Halliday: Oops, some string,

77
00:05:24.947 --> 00:05:27.911
this is an extremely contrived example,
but

78
00:05:27.911 --> 00:05:31.189
I'm sure there are much
better examples of this.

79
00:05:31.189 --> 00:05:35.085
So if we want to match at least, actually,

80
00:05:35.085 --> 00:05:39.430
why don't I do a test for
this particular case?

81
00:05:40.560 --> 00:05:45.466
If we wanna match this pattern
at least twice, for example, so

82
00:05:45.466 --> 00:05:50.250
we could do maybe something
a little more complicated.

83
00:05:50.250 --> 00:05:54.940
Capital or lowercase c, and
then a t, and then maybe d,

84
00:05:56.370 --> 00:05:59.700
o, o or e, I don't know.

85
00:05:59.700 --> 00:06:02.400
And then we take that whole group, right?

86
00:06:02.400 --> 00:06:07.140
Or maybe it's or, right, so
we'll match cat or dog, and

87
00:06:07.140 --> 00:06:11.830
with these variations exactly two times.

88
00:06:13.220 --> 00:06:17.810
So that would match because
there's cat and dog.

89
00:06:18.866 --> 00:06:20.967
Hang on.

90
00:06:20.967 --> 00:06:25.107
All right, and then you've gotta
have another quantifier actually,

91
00:06:25.107 --> 00:06:27.460
like a space or a white space character.

92
00:06:29.270 --> 00:06:30.630
There we go.

93
00:06:30.630 --> 00:06:33.070
So, [LAUGH] here's an example of that.

94
00:06:33.070 --> 00:06:36.530
So this says, all right, so

95
00:06:36.530 --> 00:06:40.600
the regex engine, it's like,
all right, I get a start.

96
00:06:40.600 --> 00:06:44.310
Whenever I see the start of this pattern,
either a cat or

97
00:06:44.310 --> 00:06:47.470
dog, I have to match, and
I'm gonna keep matchings.

98
00:06:47.470 --> 00:06:51.860
If I hit c, then I better see an A,
a capital or lower case a.

99
00:06:51.860 --> 00:06:58.550
If I see a d, then I better see an o or
an e followed by either g or a t.

100
00:06:58.550 --> 00:07:00.980
And then I'd better see
a white space character, and

101
00:07:00.980 --> 00:07:03.630
then I'd better see two of
those whole patterns, right?

102
00:07:04.640 --> 00:07:10.323
So things that will match
are like cat cAt, hang on a sec.

103
00:07:15.619 --> 00:07:18.480
&gt;&gt; Speaker 3: You need
a space after the second cat?

104
00:07:18.480 --> 00:07:20.780
&gt;&gt; James Halliday: I have a white
space character, that ought to match.

105
00:07:20.780 --> 00:07:22.080
&gt;&gt; Speaker 2: What about the second cat?

106
00:07:23.800 --> 00:07:25.970
&gt;&gt; James Halliday: Yeah, you're right,
it needs a space after it.

107
00:07:25.970 --> 00:07:29.300
So here's an even fancier
way to make this happen.

108
00:07:29.300 --> 00:07:32.870
You could do another group that's
like either whitespace, or

109
00:07:32.870 --> 00:07:36.730
the end would match in both cases then,
so.

110
00:07:38.210 --> 00:07:41.830
Yeah, these things,
you can stack them in all kinds of ways,

111
00:07:41.830 --> 00:07:47.980
maybe two or more would match.

112
00:07:47.980 --> 00:07:52.311
Or maybe you wanna do a replacement,
so we can turn this into replacement.

113
00:07:56.521 --> 00:07:58.035
&gt;&gt; James Halliday: And
just replace it with

114
00:07:58.035 --> 00:08:00.954
something,
&gt;&gt; James Halliday: So

115
00:08:00.954 --> 00:08:03.984
that takes all of those out.

116
00:08:05.576 --> 00:08:08.531
&gt;&gt; James Halliday: And
because we put in the other grouping,

117
00:08:08.531 --> 00:08:11.915
it'll also just go to the end,
and also match.

118
00:08:11.915 --> 00:08:14.320
So it doesn't have to be whitespace,
necessarily.

119
00:08:14.320 --> 00:08:15.910
There's yet another shortcut for

120
00:08:15.910 --> 00:08:20.430
this kind of thing, where you have
either whitespace or the end.

121
00:08:20.430 --> 00:08:25.578
You could do, in some engines it's \y,
but in other it's \b.

122
00:08:25.578 --> 00:08:30.414
I think in JavaScript it's \b,
which is a break word character.

123
00:08:30.414 --> 00:08:32.520
All right,
maybe JavaScript doesn't have that one.

124
00:08:33.600 --> 00:08:34.310
I guess it doesn't.

125
00:08:36.394 --> 00:08:40.430
Anyway, so you can always enumerate
the possibilities instead.

