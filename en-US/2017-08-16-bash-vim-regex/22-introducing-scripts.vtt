WEBVTT

1
00:00:00.300 --> 00:00:05.660
&gt;&gt; James Halliday: The really fun part and
useful part about writing scripts

2
00:00:05.660 --> 00:00:10.900
in Bash is you can take all of
the commands that we've already learned,

3
00:00:10.900 --> 00:00:15.640
that we've already been typing, put them
into a file, and then run them again and

4
00:00:15.640 --> 00:00:17.276
again with whatever arguments you want.

5
00:00:17.276 --> 00:00:23.920
So all of you pretty much already
know how to write Bash scripts.

6
00:00:23.920 --> 00:00:27.095
We just need to do a few more things, and

7
00:00:27.095 --> 00:00:31.044
then we can take these
command line work flows and

8
00:00:31.044 --> 00:00:37.039
encapsulate them into something that
is more reusable, more portable.

9
00:00:37.039 --> 00:00:42.478
So how you do this is, so
maybe we'll make a script that

10
00:00:42.478 --> 00:00:50.188
will just log a message into a file
that's based on the current date, right?

11
00:00:53.148 --> 00:00:57.123
&gt;&gt; James Halliday: So
I'm gonna make a new directory to do this.

12
00:00:57.123 --> 00:01:03.550
I'll call this script Logger,
no extension.

13
00:01:03.550 --> 00:01:09.110
Sometimes people put a .sh extension,
but you don't have to.

14
00:01:09.110 --> 00:01:13.300
The first thing that you put
is called a number of things.

15
00:01:13.300 --> 00:01:17.200
I've heard it called the shebang line,
or the hashbang line, or

16
00:01:17.200 --> 00:01:21.780
the interpreter it's also sometimes known.

17
00:01:21.780 --> 00:01:27.025
I don't know exactly, but anyways,
you put a pound sign, an exclamation mark,

18
00:01:27.025 --> 00:01:31.827
and then the name of the interpreter
which in our case will be /bin/bash.

19
00:01:31.827 --> 00:01:36.213
And there are other interpreters on
the system, like sed and Perl and

20
00:01:36.213 --> 00:01:39.320
whatnot, but
here is how we write a Bash script.

21
00:01:40.350 --> 00:01:45.990
So the next thing that we wanna do
is we wanna put the commands that

22
00:01:45.990 --> 00:01:50.450
we would otherwise type, but
we're gonna put them in this file instead.

23
00:01:50.450 --> 00:01:58.400
So to do that we're gonna say,
we'll maybe print out the timestamp,

24
00:01:58.400 --> 00:02:03.650
because logs with time stamps are more
useful I think than without them.

25
00:02:03.650 --> 00:02:08.768
So to do that we can use
back ticks which we just

26
00:02:08.768 --> 00:02:15.246
learned about to this state
stream %F %T or %T not +T.

27
00:02:16.453 --> 00:02:18.110
&gt;&gt; James Halliday: Maybe with a dot.

28
00:02:18.110 --> 00:02:22.070
I like that format or
how do they usually put it?

29
00:02:22.070 --> 00:02:26.208
It's like z, I don't know, that's fine.

30
00:02:26.208 --> 00:02:31.375
So that's gonna be the start of our,
this is our log format.

31
00:02:31.375 --> 00:02:33.629
Why don't we just stat doing
this in the command line so

32
00:02:33.629 --> 00:02:35.513
we can kind of test out
how this is gonna work.

33
00:02:35.513 --> 00:02:42.220
All right, your %F %T just like this,
and then we're gonna have our message.

34
00:02:42.220 --> 00:02:45.267
So message goes here.

35
00:02:45.267 --> 00:02:47.637
All right, and we gotta do echo
in front of all of that and

36
00:02:47.637 --> 00:02:49.058
that should be back text, okay.

37
00:02:52.390 --> 00:02:54.770
Great, so this is how we want
our log format to work and

38
00:02:54.770 --> 00:03:00.500
then we're gonna wanna write that out to
our Log file base on the current date.

39
00:03:00.500 --> 00:03:02.831
So we can use backticks again for that.

40
00:03:02.831 --> 00:03:10.320
We'll just date %F which is gonna be the
year, month, day with dashes in between.

41
00:03:11.830 --> 00:03:14.330
And we'll call it .log, all right, so

42
00:03:14.330 --> 00:03:18.810
this is what we would do on the command
line to put a message, right?

43
00:03:18.810 --> 00:03:22.910
But the thing is we don't wanna have to
type this out every single time, right?

44
00:03:22.910 --> 00:03:27.240
So the part that's gonna be different
every time is this message in

45
00:03:27.240 --> 00:03:28.600
the middle, right?

46
00:03:28.600 --> 00:03:33.760
Let me just make sure that that works and
here we see 2017 whatever log.

47
00:03:33.760 --> 00:03:35.300
Looks like it works, all right.

48
00:03:35.300 --> 00:03:41.768
So now we can copy paste
this into this other file,

49
00:03:41.768 --> 00:03:46.852
that starts with a #!/bin/bash and

50
00:03:46.852 --> 00:03:49.944
we can use an argument.

51
00:03:49.944 --> 00:03:55.190
So there are different
ways of doing arguments.

52
00:03:55.190 --> 00:04:01.110
Whenever your script is called, you'll
get all of the arguments that were passed

53
00:04:01.110 --> 00:04:06.610
to it as environment variables that
start at one and increase in number.

54
00:04:06.610 --> 00:04:11.354
So like, dollar sign one,
dollar sign two, dollar sign three, etc.

55
00:04:11.354 --> 00:04:13.480
So here, we have our script, right.

56
00:04:15.190 --> 00:04:19.780
And the next thing that we
need to do is do this command,

57
00:04:19.780 --> 00:04:23.520
chmod +x and
then the name of our script file.

58
00:04:24.935 --> 00:04:28.755
And what that does, is it sets
the executable bit on the file, and

59
00:04:28.755 --> 00:04:31.265
I'll talk about this
a little more in a bit.

60
00:04:31.265 --> 00:04:36.576
But basically, to run a script,
you have to do ch1+x.

61
00:04:40.374 --> 00:04:44.589
&gt;&gt; James Halliday: So to run this file,
you have to specify either the absolute,

62
00:04:44.589 --> 00:04:46.215
or relative path.

63
00:04:46.215 --> 00:04:47.455
You can't just type logger.

64
00:04:48.460 --> 00:04:52.450
So we can use one of the things that
we already learned which is that

65
00:04:52.450 --> 00:04:55.430
the current directory is called dot.

66
00:04:55.430 --> 00:05:00.642
So you can do ./logger, and
then give it a message.

67
00:05:03.310 --> 00:05:07.430
&gt;&gt; James Halliday: And
now we see a new file, cool.

68
00:05:07.430 --> 00:05:09.229
So now our new message
shows up in the log.

69
00:05:11.350 --> 00:05:13.830
But there's one more thing
that I think we wanna do.

70
00:05:13.830 --> 00:05:19.230
So if I do a message that has two
words in it, right, hello world,

71
00:05:19.230 --> 00:05:23.060
and cut it out, we only see the first
bit of that, which is hello.

72
00:05:23.060 --> 00:05:27.520
So I could either run the logger
by quoting the string like this,

73
00:05:27.520 --> 00:05:32.400
which prints out what we would expect,
like the complete message.

74
00:05:32.400 --> 00:05:36.220
Or there's another variable we can
use in our script, which is called,

75
00:05:36.220 --> 00:05:39.590
there's a few of them.

76
00:05:39.590 --> 00:05:44.285
But so there's $* and $@,

77
00:05:44.285 --> 00:05:49.020
whoops, $@ sign, there's kinda some
subtle differences that I don't wanna get

78
00:05:49.020 --> 00:05:53.630
into about which is which and which works
in which circumstances, but whatever.

79
00:05:53.630 --> 00:05:59.460
For this we can use either one,
so we'll use $* and

80
00:05:59.460 --> 00:06:07.130
now, I can say hello Minnesota and when
I cut it out I see the complete message.

81
00:06:07.130 --> 00:06:12.350
So I don't have to quote it necessarily,
but if I quote that then also

82
00:06:12.350 --> 00:06:19.517
works,
&gt;&gt; James Halliday: Right,

83
00:06:19.517 --> 00:06:23.305
and when the next day rolls around it'll
start writing output to a new log file

84
00:06:23.305 --> 00:06:25.120
because that's how our script works

