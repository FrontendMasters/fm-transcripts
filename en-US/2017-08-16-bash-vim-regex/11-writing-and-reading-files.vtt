WEBVTT

1
00:00:00.500 --> 00:00:03.190
&gt;&gt; James Halliday: Okay so we already
saw the echo command a little bit.

2
00:00:03.190 --> 00:00:10.050
This is gonna be important now for piping,
&gt;&gt; James Halliday: And redirects.

3
00:00:10.050 --> 00:00:15.042
So one of the first things that we can
experiment with is if we have a command,

4
00:00:15.042 --> 00:00:18.250
it's gonna print by default
to standard output.

5
00:00:18.250 --> 00:00:21.059
So you'll be able to see it and
read it on your terminal.

6
00:00:22.350 --> 00:00:26.148
So if I have a command,
just say a simple echo commands,

7
00:00:26.148 --> 00:00:31.670
echo hello there,
it's gonna print a message.

8
00:00:31.670 --> 00:00:38.050
If I wanna save that output to a file,
I can use a greater than.

9
00:00:39.180 --> 00:00:44.820
And then specify a file name where
that output is going to be saved.

10
00:00:44.820 --> 00:00:48.393
So I'll call it hello.txt.

11
00:00:50.633 --> 00:00:54.110
&gt;&gt; James Halliday: Now I don't see
the output on my standard out anymore.

12
00:00:54.110 --> 00:00:57.964
But if I cat out
the contents of that file,

13
00:00:57.964 --> 00:01:03.737
then the file hello.txt contains
the text 'hello there'.

14
00:01:03.737 --> 00:01:08.320
That's an example of output redirect.

15
00:01:09.840 --> 00:01:12.250
So this works for any kind of command.

16
00:01:12.250 --> 00:01:15.419
So, for example,
we can use the output of the ls command.

17
00:01:15.419 --> 00:01:19.950
We can write it to a file called list.txt.

18
00:01:19.950 --> 00:01:25.060
You might notice that sometimes the output
that you see on the screen, like for

19
00:01:25.060 --> 00:01:30.790
the ls command, is gonna be different
than the output that you see in the file.

20
00:01:30.790 --> 00:01:32.820
This is because sometimes the programs

21
00:01:34.000 --> 00:01:38.430
know whether they're on
it's called a TTY or not.

22
00:01:38.430 --> 00:01:40.960
Which means whether they're
being run interactively or

23
00:01:40.960 --> 00:01:44.620
whether they're being run in
this kind of scripted way.

24
00:01:44.620 --> 00:01:50.350
So, commands like ls, when they're being
run not on a TTY in this scripted fashion

25
00:01:50.350 --> 00:01:55.490
by using redirects or pipes, will
output the same as if you'd done ls -1.

26
00:01:55.490 --> 00:01:58.800
In this case which just prints
out the files line by line.

27
00:01:59.850 --> 00:02:01.520
Cuz that's generally more useful for

28
00:02:01.520 --> 00:02:03.600
programs to read than
something with columns in it.

29
00:02:06.670 --> 00:02:10.693
So &lt; redirects standard out to a file.

30
00:02:17.573 --> 00:02:22.610
&gt;&gt; James Halliday: There's also another
kind of redirect which does appending.

31
00:02:22.610 --> 00:02:27.890
So if you put two greater
thans side by side, then

32
00:02:27.890 --> 00:02:32.920
it will add the standard out from whatever
you're piping in to the end of the file.

33
00:02:33.970 --> 00:02:38.830
So if I want to add another
message to my hello.txt,

34
00:02:38.830 --> 00:02:43.890
which, I guess,
can turn into 90s style CGI guest book.

35
00:02:46.450 --> 00:02:47.810
I can make another message.

36
00:02:47.810 --> 00:02:51.329
So I'll say, whatever and

37
00:02:51.329 --> 00:02:56.687
double greater than, then hello.txt.

38
00:02:56.687 --> 00:03:00.651
Now if I cat hello.txt, I see the original
message and then the new message.

39
00:03:05.206 --> 00:03:08.650
&gt;&gt; James Halliday: And
a third message, there we go.

40
00:03:08.650 --> 00:03:11.740
So now, we can, sort of,
accumulate contents.

41
00:03:11.740 --> 00:03:15.580
So maybe if you have a little program
that you wanna run periodically, and

42
00:03:15.580 --> 00:03:20.750
you wanna log the contents of, like,
whatever that program outputs to

43
00:03:20.750 --> 00:03:26.960
a log file, the append
redirectives is handy to do that.

44
00:03:26.960 --> 00:03:29.690
&gt;&gt; Speaker 2: How about to
the beginning of the file, I just tried

45
00:03:29.690 --> 00:03:34.496
appending to the beginning with a single
greater than just over on everything.

46
00:03:34.496 --> 00:03:38.560
&gt;&gt; James Halliday: Right, well, so,
a single greater than overwrites the file.

47
00:03:38.560 --> 00:03:42.670
If you wanna append to the beginning,
it's a little bit complicated.

48
00:03:42.670 --> 00:03:46.820
You'd have to compose some
different kinds of operations.

49
00:03:46.820 --> 00:03:53.390
I guess if I wanted to append, I would
probably use a subshell to do that.

50
00:03:53.390 --> 00:03:58.480
So put my message at the beginning and

51
00:03:59.690 --> 00:04:02.220
then do cat hello.txt.

52
00:04:02.220 --> 00:04:09.670
And then overwrite to a different
file that's not called hello.txt.

53
00:04:09.670 --> 00:04:14.040
And then move hello.txt{_,}
to be hello.txt.

54
00:04:14.040 --> 00:04:18.100
That's how I would do pre-pending,
it's more complicated.

55
00:04:18.100 --> 00:04:20.690
&gt;&gt; Speaker 2: So what do you mean to say?

56
00:04:20.690 --> 00:04:21.428
So I won't do that.

57
00:04:21.428 --> 00:04:24.372
[LAUGH]
&gt;&gt; James Halliday: You can do that, but

58
00:04:24.372 --> 00:04:26.800
maybe once we get to these concepts,
you can do it.

59
00:04:26.800 --> 00:04:28.040
Just, make sure it works here.

60
00:04:28.040 --> 00:04:29.070
There we go, at the beginning.

61
00:04:30.320 --> 00:04:33.560
Yeah, so putting stuff at
the beginning of the file,

62
00:04:33.560 --> 00:04:36.540
a lot harder than putting
it at the end of the file.

63
00:04:36.540 --> 00:04:42.464
This also has to do with how,
&gt;&gt; James Halliday: The operating

64
00:04:42.464 --> 00:04:43.211
system works,

65
00:04:43.211 --> 00:04:47.100
it's generally cheaper to put things at
the end of a file than at the beginning.

66
00:04:47.100 --> 00:04:48.880
Because if you put
something in the beginning,

67
00:04:48.880 --> 00:04:50.950
you have to smush everything else down.

68
00:04:50.950 --> 00:04:54.170
You have to push it down and
reallocate a new file.

69
00:04:54.170 --> 00:04:57.100
But if you put things at the end,
the operating system will just

70
00:04:57.100 --> 00:05:00.290
allocate a new block or
write to the end of an existing block.

71
00:05:00.290 --> 00:05:02.500
Because things are done in blocks.

72
00:05:02.500 --> 00:05:05.904
Sort of a linked structure
internally is what's going on.

73
00:05:05.904 --> 00:05:13.190
Okay, so those are the two
kinds of output redirects.

74
00:05:13.190 --> 00:05:15.950
Greater than and
double greater than to append.

75
00:05:15.950 --> 00:05:22.385
There's also a kind of input redirect,
which is a less than, yeah.

76
00:05:22.385 --> 00:05:26.632
So the input redirect takes
the contents of a file and

77
00:05:26.632 --> 00:05:29.528
sort of types it into another file,

78
00:05:29.528 --> 00:05:35.530
as if you'd typed in the contents of
that file on a keyboard for yourself.

79
00:05:37.151 --> 00:05:40.159
&gt;&gt; James Halliday: So, if,
for example, we wanna, so

80
00:05:40.159 --> 00:05:46.570
suppose that the wc commands didn't
have an option to pass in a file name.

81
00:05:46.570 --> 00:05:51.410
So imagine if we couldn't do
things like wc -c hello.txt.

82
00:05:51.410 --> 00:05:59.120
We can only do things like wc- c and
it would read for standard in.

83
00:05:59.120 --> 00:06:04.540
So if we have programs like that you can
use an input reader direct with less than.

84
00:06:04.540 --> 00:06:06.970
And you can give the name of the file.

85
00:06:06.970 --> 00:06:11.225
And then it will write
the contents of the file

86
00:06:11.225 --> 00:06:15.300
hello.txt into the standard
input of the wc command.

87
00:06:16.440 --> 00:06:22.640
In this case we know that
hello.txt is 52 bytes.

88
00:06:27.320 --> 00:06:32.640
If you have these kind of commands where
they maybe don't know how to read files,

89
00:06:32.640 --> 00:06:34.590
but they know how to
read from standard in,

90
00:06:34.590 --> 00:06:36.890
you can still copy files
into the standard in.

