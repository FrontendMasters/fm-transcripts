WEBVTT

1
00:00:00.340 --> 00:00:04.070
&gt;&gt; James Halliday: Okay, so hopefully
people got a bit of a chance to experiment

2
00:00:04.070 --> 00:00:08.548
with writing a little script,
whatever commands you wanna put in here.

3
00:00:08.548 --> 00:00:14.010
And you can put more commands if you want
as well, so you could print the date.

4
00:00:14.010 --> 00:00:14.603
I don't know.

5
00:00:14.603 --> 00:00:16.900
Do whatever you want.

6
00:00:16.900 --> 00:00:21.120
Few extra things I want to add
based on some of the feedback

7
00:00:21.120 --> 00:00:24.762
I got that aren't in the notes yet, but
hopefully I will remember to add them,

8
00:00:24.762 --> 00:00:30.730
is that if you want to do things for
your script, like maybe prompt for

9
00:00:30.730 --> 00:00:34.820
input, there a command called
read that you can use to

10
00:00:37.940 --> 00:00:42.150
read a line from standard end and set
the result into an environment variable.

11
00:00:42.150 --> 00:00:46.410
So you do read LINE, maybe.

12
00:00:46.410 --> 00:00:49.740
That's a good name for a line of input.

13
00:00:49.740 --> 00:00:54.315
If you type that in then you
type the message, hit Enter, and

14
00:00:54.315 --> 00:01:00.690
it's gonna save that value into
an environment variable called LINE.

15
00:01:00.690 --> 00:01:06.096
So this is a way then, in your scripts,
you can do things like prompt for input.

16
00:01:06.096 --> 00:01:08.320
So for example,
if you had a script that did,

17
00:01:08.320 --> 00:01:12.230
let me just change the script up a bit.

18
00:01:12.230 --> 00:01:17.470
So there's an option to echo called
-n that doesn't print the newline.

19
00:01:19.930 --> 00:01:23.370
So you can do things like have a question,
or have a little caret or something

20
00:01:25.120 --> 00:01:28.780
with -n, and then it's gonna print it
without putting the newline at the end.

21
00:01:29.880 --> 00:01:34.850
So if you do that, you could ask,
what is your name?

22
00:01:36.700 --> 00:01:44.470
And then read NAME, and
then say echo hello $NAME.

23
00:01:44.470 --> 00:01:50.410
If you use an exclamation mark, that would
make sure that you quote it properly, or

24
00:01:50.410 --> 00:01:51.610
with double quotes in this case,

25
00:01:51.610 --> 00:01:54.210
because exclamation marks
are a little bit tricky there.

26
00:01:54.210 --> 00:01:55.858
They actually expand out to be something

27
00:01:55.858 --> 00:02:00.671
from the history
&gt;&gt; James Halliday: So

28
00:02:00.671 --> 00:02:03.864
now if I run the script,

29
00:02:03.864 --> 00:02:08.510
it's gonna prompt me for my name.

30
00:02:10.920 --> 00:02:13.720
There we go.
And it prints out my name.

31
00:02:13.720 --> 00:02:14.540
So this is a way.

32
00:02:16.080 --> 00:02:21.060
Sometimes, you wanna read from standard
in, although it's less common.

33
00:02:22.080 --> 00:02:25.275
But sometimes, it make sense.

34
00:02:25.275 --> 00:02:31.350
A lot of the basic utilities don't
generally prompt for input interactively.

35
00:02:31.350 --> 00:02:35.625
They mostly deal with argument,
but for your own scripts,

36
00:02:35.625 --> 00:02:38.029
you can do them however you like.

37
00:02:43.590 --> 00:02:45.330
Right, so that's just the read command.

38
00:02:46.820 --> 00:02:50.980
The main time when I use the read command
is actually in conjunction with some other

39
00:02:50.980 --> 00:02:52.440
commands that I'd like to talk about.

40
00:02:52.440 --> 00:02:55.890
They're also not in the notes, but
it's very useful for scripting.

41
00:02:55.890 --> 00:03:00.680
I just wanna quickly cover a few things,
like loops and stuff like that,

42
00:03:00.680 --> 00:03:03.620
which I use a whole lot.

43
00:03:03.620 --> 00:03:05.245
Actually, I use them all the time, but

44
00:03:05.245 --> 00:03:11.070
[LAUGH] I don't know how common they
are for other people who use Bash.

45
00:03:11.070 --> 00:03:14.580
So, why don't I just cover it?

46
00:03:14.580 --> 00:03:17.020
So we've already seen the watch commands.

47
00:03:17.020 --> 00:03:20.470
There's something similar to it,
if you just remember.

48
00:03:22.550 --> 00:03:26.000
So there's a command called true.

49
00:03:26.000 --> 00:03:27.960
This gets into something
called exit codes,

50
00:03:27.960 --> 00:03:29.620
which I'm gonna talk about a bit later.

51
00:03:29.620 --> 00:03:36.060
But suffice it to say for now, there's
a command called true that is truth-y.

52
00:03:36.060 --> 00:03:40.247
So if we do something like while true,
we can print the date.

53
00:03:40.247 --> 00:03:44.027
There's also a command called
sleep that will just sit there for

54
00:03:44.027 --> 00:03:46.910
however many seconds you specify.

55
00:03:46.910 --> 00:03:50.450
And so this command, every second,
will print out the date.

56
00:03:53.390 --> 00:03:59.489
There's also another kind of loop
where if you have command that

57
00:03:59.489 --> 00:04:04.730
will split things by white space,
you can loop over all of the values.

58
00:04:04.730 --> 00:04:10.600
So we can use the brace expansion for
sequences to do something fun there.

59
00:04:10.600 --> 00:04:17.470
So if we [INAUDIBLE] do for
x in {0..10}; echo $x.

60
00:04:17.470 --> 00:04:23.640
In this case, for
is going to define a variable called

61
00:04:23.640 --> 00:04:28.410
whatever we specified right here, and

62
00:04:28.410 --> 00:04:31.840
then we can give it a list
of things to loop over.

63
00:04:31.840 --> 00:04:35.780
And then, for every one of those things,
we can run this command.

64
00:04:35.780 --> 00:04:39.132
And you could put as many
commands as you want in here,

65
00:04:39.132 --> 00:04:43.304
separated by semicolons or
on their own line, and then at the end,

66
00:04:43.304 --> 00:04:47.290
you put done, and
that tells the loop to be over.

67
00:04:47.290 --> 00:04:49.324
So that just, ahh!

68
00:04:49.324 --> 00:04:50.110
Sorry.

69
00:04:50.110 --> 00:04:50.700
I did this wrong.

70
00:04:50.700 --> 00:04:53.940
You have to put do immediately after for.

71
00:04:55.030 --> 00:04:56.930
And then it will print.

72
00:04:56.930 --> 00:05:03.182
These will become more useful once we talk
about exit codes and signals a bit later.

73
00:05:10.615 --> 00:05:13.340
&gt;&gt; James Halliday: For now, it's just
kind of this nifty little one liner

74
00:05:13.340 --> 00:05:14.140
you can use.

75
00:05:14.140 --> 00:05:17.756
The while true thing is really
handy if you have buggy scripts,

76
00:05:17.756 --> 00:05:22.671
like a server or something that crashes
sometimes, but it's not that important, so

77
00:05:22.671 --> 00:05:25.510
you just want it to restart itself.

78
00:05:25.510 --> 00:05:29.110
So you could do, I do this all the time,

79
00:05:29.110 --> 00:05:33.500
I do while true; do node server.js; done.

80
00:05:33.500 --> 00:05:37.632
If it crashes, whatever, it just restarts.

81
00:05:37.632 --> 00:05:39.597
Pretty handy, little trick to do.

82
00:05:53.076 --> 00:05:56.703
&gt;&gt; James Halliday: Another really
useful thing to use loops for,

83
00:05:56.703 --> 00:06:01.633
especially while loops,
is if you have a command like ls -1,

84
00:06:01.633 --> 00:06:07.865
that's gonna give us every file in a
directory, you can pipe into a while loop,

85
00:06:07.865 --> 00:06:12.236
which is kind of a little bit
strange to think about, but

86
00:06:12.236 --> 00:06:15.520
it'll hopefully make sense in a second.

87
00:06:15.520 --> 00:06:17.810
So we can combine all of
the the things that we've already seen

88
00:06:17.810 --> 00:06:19.390
to do something really cool.

89
00:06:19.390 --> 00:06:24.460
So if you remember, the read command
will read a line from standard in.

90
00:06:24.460 --> 00:06:30.810
So we can read each line of standard
in into an environment variable

91
00:06:30.810 --> 00:06:35.800
called line, and

92
00:06:35.800 --> 00:06:40.310
maybe we'll do the wc -l command to
print out the number of lines for

93
00:06:40.310 --> 00:06:45.870
every file, and maybe we'll also
print out the name of the file.

94
00:06:45.870 --> 00:06:49.260
Every file should be
coming in on standard in.

95
00:06:49.260 --> 00:06:53.870
And then we wanna do -n, so

96
00:06:53.870 --> 00:06:58.015
that it doesn't print out A new line,
and we also wanna put a space in there.

97
00:06:59.505 --> 00:07:03.635
And there's another little thing,
because my ls happens to be configured so

98
00:07:03.635 --> 00:07:09.555
that it does, puts those starts and
things at the end if it's an executable.

99
00:07:09.555 --> 00:07:13.530
So I'm actually gonna do /bin/ls
to get around to my alias.

100
00:07:13.530 --> 00:07:17.652
You probably won't have to do this,
but in my case, I do.

101
00:07:17.652 --> 00:07:21.590
A little bit lost in the weeds, but this
is a really neat thing that you can do.

102
00:07:21.590 --> 00:07:24.464
Hang on.
And then you have to put done at the end.

103
00:07:24.464 --> 00:07:26.870
There we go.

104
00:07:29.230 --> 00:07:33.880
Wc -l also prints out the file after.

105
00:07:35.290 --> 00:07:36.760
So, I don't like that.

106
00:07:36.760 --> 00:07:37.904
I'm gonna get rid of that.

107
00:07:37.904 --> 00:07:42.500
I could pipe into sed and

108
00:07:42.500 --> 00:07:48.040
cut off the end, but I'll pipe into
awk and print out the first column.

109
00:07:50.260 --> 00:07:51.036
There we go.

110
00:07:51.036 --> 00:07:54.470
So you don't have to know exactly what
this means, but it's just something that

111
00:07:54.470 --> 00:07:58.560
you can do, if you know a little
bit about each of these tools.

112
00:08:00.150 --> 00:08:03.500
We can print our own file formats and
things.

113
00:08:05.680 --> 00:08:09.218
And I'll paste that into chat as well,
just for

114
00:08:09.218 --> 00:08:13.033
some kind of examples to chew on,
if nothing else.

115
00:08:17.226 --> 00:08:19.827
&gt;&gt; James Halliday: Again,
relatively advance use case, but

116
00:08:19.827 --> 00:08:23.005
it's kind of, hopefully,
will give you an idea for

117
00:08:23.005 --> 00:08:27.650
how you can sort of string together a lot
of these concepts in a coherent way.

