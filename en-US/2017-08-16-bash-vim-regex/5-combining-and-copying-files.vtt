WEBVTT

1
00:00:00.290 --> 00:00:03.750
&gt;&gt; James Halliday: The cat command was
originally intended to concatenate files,

2
00:00:03.750 --> 00:00:06.640
which you can still use it for
that purpose.

3
00:00:06.640 --> 00:00:11.640
So, all of the files that
you specify as arguments to

4
00:00:11.640 --> 00:00:14.340
the cat commands will be concatenated.

5
00:00:14.340 --> 00:00:16.027
So, if I make two files really quick.

6
00:00:19.796 --> 00:00:21.500
&gt;&gt; James Halliday: I'll make one
called beep, and one called boop.

7
00:00:23.320 --> 00:00:28.720
Now, if I type cat beep.txt, boop.txt,

8
00:00:28.720 --> 00:00:33.510
I see the contents of both of those
files written to standard output.

9
00:00:35.580 --> 00:00:39.820
You can put as many, or
as few files as you want.

10
00:00:39.820 --> 00:00:44.215
If you don't specify any commands,
then it reads from standard input, so

11
00:00:44.215 --> 00:00:45.623
you have to type stuff.

12
00:00:45.623 --> 00:00:49.256
If you ever get stuck in a program
that you don't know how to quit from,

13
00:00:49.256 --> 00:00:53.214
like this, because it's reading from
the standard input on the keyboard.

14
00:00:53.214 --> 00:00:57.433
You can usually do CTRL+D,
which ends gracefully, or

15
00:00:57.433 --> 00:01:03.285
CTRL+C if it's like, get me out of this
thing, I want this program to exit.

16
00:01:06.254 --> 00:01:09.202
&gt;&gt; James Halliday: But another useful
thing you can use the cat command for

17
00:01:09.202 --> 00:01:12.580
is if you just wanna display
the contents of a file.

18
00:01:12.580 --> 00:01:16.920
You can do cat, just the name of that
file, and you can see what's in it.

19
00:01:16.920 --> 00:01:22.320
So this is really useful if you're moving
around in your directory structure CD and

20
00:01:22.320 --> 00:01:24.480
LS, that kind of stuff.

21
00:01:24.480 --> 00:01:26.487
You can see what's in your files.

22
00:01:26.487 --> 00:01:31.612
If you accidentally do something like
cat a JPEG file, so I can show you.

23
00:01:31.612 --> 00:01:34.495
What that looks like, or a PNG file,

24
00:01:34.495 --> 00:01:38.690
you'll get something like this,
not very helpful.

25
00:01:38.690 --> 00:01:40.720
Also, your terminal might
get a little bit stuck.

26
00:01:41.720 --> 00:01:43.762
If that happens, type reset,

27
00:01:43.762 --> 00:01:49.342
even though you might not be able to see
the characters that you're typing anymore,

28
00:01:49.342 --> 00:01:53.367
because some odd characters can
get printed to your screen.

29
00:01:53.367 --> 00:01:57.051
If you type reset and then press Enter,
it'll usually fix that.

30
00:02:00.456 --> 00:02:01.299
&gt;&gt; James Halliday: That's the cat command.

31
00:02:05.842 --> 00:02:10.496
&gt;&gt; James Halliday: Another useful
command to try out is the copy command

32
00:02:10.496 --> 00:02:11.669
which is cp.

33
00:02:11.669 --> 00:02:18.093
So how it works is, for example,
you can pass in a source file,

34
00:02:18.093 --> 00:02:22.470
is the first argument to the copy command.

35
00:02:22.470 --> 00:02:29.185
So I'm gonna copy beep.txt to
a file called message.txt.

36
00:02:29.185 --> 00:02:34.205
What this is gonna do, is it's gonna
copy the contents of beep.txt and

37
00:02:34.205 --> 00:02:37.564
it will create a new
file called message.txt.

38
00:02:37.564 --> 00:02:41.916
And now if I cat message.txt,
it has the contents of the first file.

39
00:02:45.431 --> 00:02:48.881
&gt;&gt; James Halliday: You can also
copy into directories if you want.

40
00:02:48.881 --> 00:02:52.509
So all of the rules about paths apply, so

41
00:02:52.509 --> 00:02:56.778
you can use things like
../ if I wanna copy for

42
00:02:56.778 --> 00:03:00.751
example this file to the parent directory.

43
00:03:03.125 --> 00:03:05.877
&gt;&gt; James Halliday: Because I
don't specify a file name,

44
00:03:05.877 --> 00:03:10.693
what the copy command is gonna do
is it's gonna copy beep.txt into

45
00:03:10.693 --> 00:03:14.485
the parent directory into
a file called beep.txt.

46
00:03:14.485 --> 00:03:16.600
So it's the same as doing this.

47
00:03:16.600 --> 00:03:20.471
These are the same,
both of these commands.

48
00:03:23.519 --> 00:03:26.076
&gt;&gt; James Halliday: Now,
if I go up a directory, I see beep.txt.

49
00:03:33.991 --> 00:03:35.101
&gt;&gt; James Halliday: Oops.

50
00:03:45.808 --> 00:03:50.492
&gt;&gt; James Halliday: So you can also use
the copy commands to copy multiple

51
00:03:50.492 --> 00:03:52.738
files into a directory.

52
00:03:52.738 --> 00:04:00.048
So if I have a directory like, I'll call
it cool, oops didn't mean to do that.

53
00:04:02.755 --> 00:04:05.968
&gt;&gt; James Halliday: So
here I have a directory called cool, and

54
00:04:05.968 --> 00:04:10.967
if I wanna copy both of these text files,
so I can copy beep.txt and

55
00:04:10.967 --> 00:04:14.290
boop.txt into the directory called cool.

56
00:04:15.400 --> 00:04:19.140
And I don't have to include
the slash at the end.

57
00:04:19.140 --> 00:04:23.598
What the copy command is gonna do
is it's gonna look at the last

58
00:04:23.598 --> 00:04:28.510
argument in this argument list
of beep.txt, boop.txt and cool.

59
00:04:28.510 --> 00:04:30.946
If the last thing is a directory,

60
00:04:30.946 --> 00:04:35.388
then it will copy all of
the preceding files into that place.

61
00:04:35.388 --> 00:04:42.737
So now, if I go into the cool directory,
I see two files, beep.txt and boop.txt.

62
00:04:42.737 --> 00:04:45.500
And I can cat them both again.

63
00:04:48.450 --> 00:04:50.980
All right, so that's the copy command,
and that's cat.

64
00:04:50.980 --> 00:04:54.720
And there's some other things, I think.

65
00:04:54.720 --> 00:04:55.460
Great, so we're here.

66
00:04:57.720 --> 00:05:04.730
Another really useful thing, so
this is the first example of flag.

67
00:05:04.730 --> 00:05:09.730
A flag is a special kind of argument
that starts with a dash, or

68
00:05:09.730 --> 00:05:11.860
sometimes they start with two dashes.

69
00:05:13.320 --> 00:05:15.600
It's also called the switch sometimes.

70
00:05:15.600 --> 00:05:18.540
So flag and switch are sort
of interchangeable terms for

71
00:05:18.540 --> 00:05:19.740
this kind of thing.

72
00:05:19.740 --> 00:05:23.600
It's sort of a way to customize
the behavior of a command.

73
00:05:23.600 --> 00:05:29.230
So in this case,
the copy commands takes a flag called -r,

74
00:05:29.230 --> 00:05:32.100
which means recursively copy.

75
00:05:32.100 --> 00:05:37.075
So what you can do is you can
recursively copy an entire directory

76
00:05:37.075 --> 00:05:40.864
structure to someplace
else with this command.

77
00:05:40.864 --> 00:05:45.502
So if I go up a couple of directories,

78
00:05:45.502 --> 00:05:51.192
then I can recursively
copy this directory,

79
00:05:51.192 --> 00:05:56.745
day1 into a place called the called great.

80
00:05:56.745 --> 00:05:59.289
And what it's going to do is
it's going to go into day1,

81
00:05:59.289 --> 00:06:02.950
it's gonna see all the files, it's gonna
copy them into this second directory.

82
00:06:02.950 --> 00:06:06.710
It's also gonna see every directory
in the day1 directory, and

83
00:06:06.710 --> 00:06:09.320
it's gonna recursively copy those as well.

84
00:06:10.520 --> 00:06:13.870
So if I go into the great directory now,
it has all of the files and

85
00:06:13.870 --> 00:06:15.810
also all of the directories.

86
00:06:15.810 --> 00:06:21.286
Oops, so it's a very handy switch,
or flag.

87
00:06:21.286 --> 00:06:26.090
If you wanna read more
about these flags and

88
00:06:26.090 --> 00:06:30.530
switches to every command, you can use
the man command which is short for manual.

89
00:06:30.530 --> 00:06:35.390
So if you do man space cp, you can list
out all of the different switches that

90
00:06:35.390 --> 00:06:39.650
any command that you
wanna learn about ticks.

91
00:06:39.650 --> 00:06:44.737
So if I scroll down, i can see the -r.

92
00:06:44.737 --> 00:06:49.596
So there's also more than
one way to run cp -r.

93
00:06:49.596 --> 00:06:54.598
You can use a lower case r or a capital R,
or you can pass in --recursive,

94
00:06:54.598 --> 00:06:58.251
which is a longer way of
specifying what you wanna do.

95
00:06:58.251 --> 00:07:03.099
Sometimes it's nice to use the longer
form, cuz if you have a shell scripts and

96
00:07:03.099 --> 00:07:06.554
it's kind of an obscure one,
then someone reading your

97
00:07:06.554 --> 00:07:10.099
shell script might have a picture
of what that flag does.

