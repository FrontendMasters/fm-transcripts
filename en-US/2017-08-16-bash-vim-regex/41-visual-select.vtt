WEBVTT

1
00:00:00.080 --> 00:00:02.710
&gt;&gt; James Halliday: Visual select
is a fantastic feature that I use

2
00:00:02.710 --> 00:00:03.290
all of the time.

3
00:00:03.290 --> 00:00:07.575
It's really useful when you're coding
because you can do things like indent and

4
00:00:07.575 --> 00:00:09.860
unindent whole blocks of code.

5
00:00:09.860 --> 00:00:15.798
So why don't I open a file
on some programming?

6
00:00:18.740 --> 00:00:20.385
&gt;&gt; James Halliday: Let me just pick one.

7
00:00:23.872 --> 00:00:26.620
&gt;&gt; James Halliday: Okay,
here's some source code.

8
00:00:26.620 --> 00:00:31.690
So to go into visual mode,
there's a few ways of doing it.

9
00:00:31.690 --> 00:00:32.538
There's a,

10
00:00:32.538 --> 00:00:37.157
if you just hit v from command mode,
&gt;&gt; James Halliday: Then vim

11
00:00:37.157 --> 00:00:41.580
prints out VISUAL at the bottom, and
you're in character select mode.

12
00:00:41.580 --> 00:00:48.840
So you can move around with j and
k and l and h and select something.

13
00:00:48.840 --> 00:00:50.240
When you're in visual mode as well,

14
00:00:50.240 --> 00:00:53.990
you can also use all of
the ways of skipping around.

15
00:00:53.990 --> 00:00:59.070
So 0, $ forward slash to a pattern,
so I can skip ahead to function

16
00:00:59.070 --> 00:01:04.190
by doing /function, and
now I'm skipped ahead to there.

17
00:01:04.190 --> 00:01:07.140
You can also do things like if I
want to delete everything that

18
00:01:07.140 --> 00:01:12.120
is currently matched in visual mode,
I can hit x or d, and it all goes away.

19
00:01:12.120 --> 00:01:14.750
I can undo that.

20
00:01:14.750 --> 00:01:16.680
There's also visual line select mode,

21
00:01:16.680 --> 00:01:19.520
which I think is even more useful for
our coding.

22
00:01:19.520 --> 00:01:26.170
So you do that by typing
capital V from command mode.

23
00:01:26.170 --> 00:01:28.190
So when you're in visual line mode,

24
00:01:28.190 --> 00:01:30.240
it prints out VISUAL LINE at
the bottom of the screen.

25
00:01:31.370 --> 00:01:34.600
Now you can move around with j, and k.

26
00:01:34.600 --> 00:01:38.860
You can also search for things but
you can't move around with h and

27
00:01:38.860 --> 00:01:42.350
l because it's only
selecting individual lines.

28
00:01:42.350 --> 00:01:46.280
So really handy thing when you're
in this mode is for example,

29
00:01:46.280 --> 00:01:52.340
if I want to indent a whole section of
code, I can visually select something.

30
00:01:52.340 --> 00:01:57.452
And maybe I'll search for
a curly brace at the beginning

31
00:01:57.452 --> 00:02:02.017
of the line,
which I did by typing slash, caret,

32
00:02:02.017 --> 00:02:06.990
close curly brace, and
then I can go up a character.

33
00:02:06.990 --> 00:02:12.550
And there's built-in functionality for
doing indents and unindent.

34
00:02:12.550 --> 00:02:17.320
So to indent this whole block of code that
I've selected, I can do greater than.

35
00:02:17.320 --> 00:02:19.810
So if you type greater than,
it all gets indented.

36
00:02:20.840 --> 00:02:25.197
You can also push dot to indent again and
again and

37
00:02:25.197 --> 00:02:28.400
again and you can hit u to undo that.

38
00:02:28.400 --> 00:02:31.700
You can also unindent
code by doing less than.

39
00:02:31.700 --> 00:02:38.190
So if I select the same thing, or I can
actually hit colon and do the up arrow.

40
00:02:38.190 --> 00:02:40.610
Or I think, no, I can't do that.

41
00:02:40.610 --> 00:02:46.470
But if I do that and I do less than,
then it gets unindented.

42
00:02:46.470 --> 00:02:49.310
So here's all of that code
flush with the left margin.

43
00:02:50.600 --> 00:02:53.930
You can also if you have
line selected something,

44
00:02:55.270 --> 00:02:58.210
do a replacement just
on this block of code.

45
00:02:58.210 --> 00:03:02.436
So suppose I wanna replace,
this code has four spaces.

46
00:03:02.436 --> 00:03:04.560
Maybe I want it to be two spaces.

47
00:03:04.560 --> 00:03:09.904
So I can do a little regular
expression now by typing colon

48
00:03:09.904 --> 00:03:14.790
s/, and then I can hit,
I can either hit the space bar four times.

49
00:03:14.790 --> 00:03:19.668
Or I can probably do that and
then replace it with two-

50
00:03:19.668 --> 00:03:20.841
&gt;&gt; Speaker 2: Those carets there,

51
00:03:20.841 --> 00:03:22.214
did you want that there?

52
00:03:22.214 --> 00:03:22.832
&gt;&gt; James Halliday: Yeah,

53
00:03:22.832 --> 00:03:28.000
those are put there by vim when
you're in line select mode.

54
00:03:28.000 --> 00:03:31.450
That's just the way that it's done.

55
00:03:31.450 --> 00:03:36.210
All right, so
I guess vim doesn't like the quantifiers.

56
00:03:36.210 --> 00:03:38.760
Probably the engine doesn't support it.

57
00:03:38.760 --> 00:03:43.804
So if you hit space bar four times,
&gt;&gt; James Halliday: Just as well.

58
00:03:43.804 --> 00:03:46.130
Okay, so
now it's indented with two spaces.

59
00:03:46.130 --> 00:03:49.660
You could also do the same thing to add or
remove semicolons, all kinds of stuff.

