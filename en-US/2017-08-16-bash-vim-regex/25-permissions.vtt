WEBVTT

1
00:00:00.337 --> 00:00:04.010
&gt;&gt; James Halliday: Maybe now would be a
good time to talk a bit about permissions.

2
00:00:04.010 --> 00:00:08.487
Every file on a Unix
system has permissions.

3
00:00:08.487 --> 00:00:13.063
And how it works is there
are three main categories of

4
00:00:13.063 --> 00:00:15.976
permissions that you can grant.

5
00:00:15.976 --> 00:00:20.353
There's three kinds of permissions,
and three categories.

6
00:00:20.353 --> 00:00:28.380
So there's this notion of the user,
the group, and other, or everybody.

7
00:00:28.380 --> 00:00:33.730
And these are specified by
the shorthand U for the user,

8
00:00:33.730 --> 00:00:38.790
which is the owner of the file, G for
the group, which is the group of the file,

9
00:00:38.790 --> 00:00:42.790
and O for other,
which is anybody else on the system.

10
00:00:42.790 --> 00:00:48.178
So, if you do ls -l,
you can see the permissions for any file.

11
00:00:48.178 --> 00:00:52.925
In this case, a lot of systems these
days especially, will create a new group

12
00:00:52.925 --> 00:00:57.835
called the same as your user names, so
it's a little bit confusing sometimes.

13
00:00:57.835 --> 00:01:02.187
But if I go somewhere else on the system,

14
00:01:02.187 --> 00:01:07.051
like if I ls -l says it
also by the user group.

15
00:01:07.051 --> 00:01:10.192
Maybe there's a better spot,
let's see maybe in etc somewhere.

16
00:01:12.318 --> 00:01:15.414
&gt;&gt; James Halliday: Okay so a few of
these things like this is the user and

17
00:01:15.414 --> 00:01:17.360
this is the group, its shadow.

18
00:01:21.244 --> 00:01:25.520
&gt;&gt; James Halliday: So this second piece
here, this is the user, the group.

19
00:01:25.520 --> 00:01:27.860
This bit right here, is the permission.

20
00:01:27.860 --> 00:01:34.290
So how you read this is, it goes,
U, G, O, so this is the user.

21
00:01:34.290 --> 00:01:38.020
So the owner of the file,
the first one of these bits,

22
00:01:38.020 --> 00:01:41.170
this column, has these permissions.

23
00:01:41.170 --> 00:01:44.020
The user sub stack can read and
write to this file.

24
00:01:45.530 --> 00:01:49.180
The group sub stack can
only read to the file, but

25
00:01:49.180 --> 00:01:53.380
not write to the file, and
everybody else can only read that file.

26
00:01:53.380 --> 00:01:55.530
They can't write to it,
and they can't execute it.

27
00:01:57.900 --> 00:02:02.580
So there's also this other
piece of the permissions,

28
00:02:02.580 --> 00:02:04.080
which is called the executable bit.

29
00:02:05.090 --> 00:02:12.475
And how that works is for a directory, if
the executable bit is set it's an x here,

30
00:02:12.475 --> 00:02:16.760
then that means that you can
list the directory contents.

31
00:02:16.760 --> 00:02:20.480
So here if I ls logs I see the contents.

32
00:02:20.480 --> 00:02:25.950
If I chmod -x logs, and try to ls logs,
I get Permission denied.

33
00:02:25.950 --> 00:02:28.545
But then it does it anyways, that's weird.

34
00:02:28.545 --> 00:02:33.561
[LAUGH] Probably because I
probably have to do it like this.

35
00:02:43.955 --> 00:02:46.180
&gt;&gt; James Halliday: Yeah,
and you can set it back.

36
00:02:46.180 --> 00:02:51.200
For scripts you might
recall that a moment ago we

37
00:02:51.200 --> 00:02:56.370
did chmod +x, and the name of our
script because we wanted to execute it.

38
00:02:56.370 --> 00:03:00.490
So here, that script logger has
its executable bit set, and

39
00:03:00.490 --> 00:03:03.320
that just means that you
can run it as a program.

40
00:03:03.320 --> 00:03:06.760
So for files the executable bit
means that you can run it, and for

41
00:03:06.760 --> 00:03:10.540
directories the executable bit means
that you can list the contents.

42
00:03:13.097 --> 00:03:15.763
&gt;&gt; James Halliday: If you wanna
see what groups your user is in,

43
00:03:15.763 --> 00:03:19.020
you can type groups, and
then you see a list of stuff.

44
00:03:19.020 --> 00:03:21.640
So, these are kinda standard things.

45
00:03:21.640 --> 00:03:27.725
I have access to the video,
the audio, cdrom device,

46
00:03:27.725 --> 00:03:34.750
I guess they still have that in computers,
also, bluetooth.

47
00:03:34.750 --> 00:03:39.270
So the permissions in /dev for
example, are more interesting.

48
00:03:39.270 --> 00:03:42.970
Because the user might be group,
but then you can

49
00:03:46.520 --> 00:03:48.780
set different groups that
users are members of.

50
00:03:48.780 --> 00:03:51.930
If someone is a member of the tty group,
they can read and

51
00:03:51.930 --> 00:03:55.690
write depending, to these tty devices,
or they can read and

52
00:03:55.690 --> 00:04:00.170
write to different kinds of dial out,
whatever that means.

53
00:04:00.170 --> 00:04:02.141
It looks like it's for serial devices.

54
00:04:05.162 --> 00:04:06.342
&gt;&gt; James Halliday: Lots of stuff there.

55
00:04:11.081 --> 00:04:16.354
&gt;&gt; James Halliday: Right so the basic
thing to remember, is that it goes user,

56
00:04:16.354 --> 00:04:22.330
group, other, ugo, and
then read, write, execute rwx.

57
00:04:22.330 --> 00:04:26.090
So there's a way to set this
with numbers that you might

58
00:04:26.090 --> 00:04:29.700
have seen before like chmod 644 or
whatever.

59
00:04:29.700 --> 00:04:36.250
These correspond to the rwx in octal,
which is kind of confusing.

60
00:04:36.250 --> 00:04:42.310
So how that works is the first number
is the user, the second is the group,

61
00:04:42.310 --> 00:04:48.340
the final is the other, and then you
have to think in binary for a bit.

62
00:04:48.340 --> 00:04:51.621
I don't usually use the octal codes, but
you might, see stuff on the internet

63
00:04:51.621 --> 00:04:55.193
especially, that's written out in octal,
so it's just good to know how it works.

64
00:04:55.193 --> 00:05:00.740
And how it works,
is you add 4 for writable.

65
00:05:03.190 --> 00:05:09.530
So 4 for write, I think 2 for
read, and 1 for execute.

66
00:05:10.790 --> 00:05:15.880
And you can figure out what it means
by decomposing the numbers into these.

67
00:05:15.880 --> 00:05:20.580
So, how that works for example is
if a file is gonna be readable and

68
00:05:20.580 --> 00:05:24.960
writable, that would be 4 plus 2 is 6.

69
00:05:24.960 --> 00:05:29.800
If a file is gonna be readable, writable,
and executable, that would be 4 plus 2,

70
00:05:29.800 --> 00:05:31.260
plus 1, is 7.

71
00:05:31.260 --> 00:05:38.380
If a file is gonna be say, readable and
executable, that would be 2 plus 1 is 3.

72
00:05:38.380 --> 00:05:41.590
That's basically how
the octal permissions work.

73
00:05:43.330 --> 00:05:46.911
And then, it goes user, group, other.

74
00:05:49.999 --> 00:05:52.981
&gt;&gt; James Halliday: Right,
so there's more written

75
00:05:52.981 --> 00:05:57.141
in the notes if you need
to consult that piece.

76
00:05:57.141 --> 00:06:02.520
And we've already used the chmod command,
but this is how you can set permissions.

77
00:06:02.520 --> 00:06:05.140
So why don't we go ahead and
use that a bit more.

78
00:06:05.140 --> 00:06:09.680
So if you ls -l,
now if I wanna change the permissions.

79
00:06:09.680 --> 00:06:14.730
For example, say I wanna add
write permission to the group for

80
00:06:14.730 --> 00:06:17.720
that file 2017 whatever, .log.

81
00:06:17.720 --> 00:06:24.190
So I can do g, and then I wanna grant it,
so I can do +w for that file.

82
00:06:24.190 --> 00:06:29.250
Now if I ls -l, I see that the group
before didn't have write permission, but

83
00:06:29.250 --> 00:06:30.600
now it has write permission.

84
00:06:31.670 --> 00:06:35.220
If I wanna take that permission away,
I can do minus.

85
00:06:35.220 --> 00:06:38.511
And that is great,
you can also stack the command.

86
00:06:38.511 --> 00:06:42.921
So if you wanna grant like say, group and

87
00:06:42.921 --> 00:06:49.549
other permission at the same time,
you can do go or og, +w.

88
00:06:49.549 --> 00:06:54.450
You can also stack the readable and
executables in a single go like this.

89
00:06:55.870 --> 00:07:00.500
Sort of just a little bit of
shorthand that is sometimes handy.

90
00:07:01.670 --> 00:07:04.473
If you wanna revoke everything, you can.

91
00:07:06.468 --> 00:07:07.847
&gt;&gt; James Halliday: Do that as well.

92
00:07:19.312 --> 00:07:20.495
&gt;&gt; James Halliday: Right.

93
00:07:23.336 --> 00:07:27.650
&gt;&gt; James Halliday: So, just rwx and
ugo, user, group, other.

94
00:07:28.720 --> 00:07:33.110
And plus and minus, and you just can
string those together however you like.

