WEBVTT

1
00:00:00.240 --> 00:00:05.301
&gt;&gt; James: Environment variables are ways
that you can kind of both save little

2
00:00:05.301 --> 00:00:10.185
pieces of information from the output
of your various commands or

3
00:00:10.185 --> 00:00:13.409
maybe you wanna just to define constants.

4
00:00:13.409 --> 00:00:18.396
And also a way to configure
the behavior of some of the system

5
00:00:18.396 --> 00:00:21.606
utilities and also the shell itself.

6
00:00:21.606 --> 00:00:26.338
So the first thing you can try,
is just type export.

7
00:00:26.338 --> 00:00:31.189
And it should tell you everything
that's already defined in your system.

8
00:00:31.189 --> 00:00:35.972
So here you can see I've got a lot
of these environment variables that,

9
00:00:35.972 --> 00:00:38.603
some are defined by Bash like Home, and

10
00:00:38.603 --> 00:00:43.249
also Shell which we looked at in
the very first part of this workshop.

11
00:00:43.249 --> 00:00:48.503
Other ones I've set this
one called PAGER="less"

12
00:00:48.503 --> 00:00:53.055
because some commands
they'll check to see if

13
00:00:53.055 --> 00:00:57.970
a variable called PAGER,
all caps, is defined.

14
00:00:57.970 --> 00:01:02.366
And if it is, if they want to
display some long bit of output,

15
00:01:02.366 --> 00:01:05.051
they'll pipe it into this command.

16
00:01:05.051 --> 00:01:07.319
So you can customize what that command is.

17
00:01:10.337 --> 00:01:11.790
&gt;&gt; James: So lots of fun stuff there.

18
00:01:11.790 --> 00:01:17.390
If you want to print out what
different kind of variable is,

19
00:01:17.390 --> 00:01:22.435
I can look at echo $TZ,
which I've set on my system.

20
00:01:22.435 --> 00:01:27.512
TZ sets the time zone
used by the date command,

21
00:01:27.512 --> 00:01:31.960
so If I do like America/Los _Angeles.

22
00:01:31.960 --> 00:01:35.321
I think with, Angeles.

23
00:01:35.321 --> 00:01:36.814
Is that how you spell it?

24
00:01:36.814 --> 00:01:38.154
&gt;&gt; Speaker 2: O-s I think.
&gt;&gt; James: Yeah it seems so.

25
00:01:38.154 --> 00:01:41.095
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; James: Then you can see what time it

26
00:01:41.095 --> 00:01:44.860
is in LA, or anywhere on Pacific Time.

27
00:01:46.320 --> 00:01:52.936
Or I can see like America/ Anchorage to
see what time it is fin Alaska right now.

28
00:01:52.936 --> 00:01:56.920
In the non-illusion part of Alaska anyway.

29
00:01:56.920 --> 00:02:03.065
So how this works when you do something
like echo like $USER is Bash looks for

30
00:02:03.065 --> 00:02:08.346
anything that has a dollar sign in it and
has letter and numbers and

31
00:02:08.346 --> 00:02:14.801
it will substitute whatever the value of
the environment variable is for that.

32
00:02:14.801 --> 00:02:19.499
So you can use this kind of thing,
like if I want to create a file,

33
00:02:19.499 --> 00:02:24.760
maybe, I'm going to echo a message
to something called $USER.log.

34
00:02:24.760 --> 00:02:29.213
Now there's a file called substack.log
because that's my user name on

35
00:02:29.213 --> 00:02:30.092
this system.

36
00:02:34.650 --> 00:02:39.765
&gt;&gt; James: So, you can also like if
I wanna list the home directory,

37
00:02:39.765 --> 00:02:46.818
there happens to be an environment
variable declared called HOME, all caps.

38
00:02:46.818 --> 00:02:52.602
Or you could do like /home, on Linux
anyways you could do like /home/$USER.

39
00:02:52.602 --> 00:02:55.730
I think it's in a different place on Mac,
if you have one of those.

40
00:03:01.302 --> 00:03:05.501
&gt;&gt; James: Now, so the next thing that we
can do is we can start to declare some of

41
00:03:05.501 --> 00:03:06.766
our own variables.

42
00:03:06.766 --> 00:03:12.441
So, to set a variable we just type
its name It's sort of a convention

43
00:03:12.441 --> 00:03:17.634
to use all caps, but
you can use lowercase as well, it works.

44
00:03:17.634 --> 00:03:24.855
So, I'll declare a variable called MSG and
I'll say MSG is hi,

45
00:03:24.855 --> 00:03:30.490
and now I'll echo out the value of MSG,
it's hi.

46
00:03:30.490 --> 00:03:34.555
I'll also do hello.

47
00:03:34.555 --> 00:03:35.518
Now it's hello.

48
00:03:35.518 --> 00:03:40.452
So you can also do things like if
we go back to the year example

49
00:03:40.452 --> 00:03:45.584
with the date command, so
if we wanna save the value of the year

50
00:03:45.584 --> 00:03:51.431
in an environment variable for later,
we can do this with back ticks.

51
00:03:51.431 --> 00:03:58.950
So, if we run date+%Y, that's gonna print
2017 and we can save that to a variable.

52
00:03:58.950 --> 00:04:01.777
So now if we echo out year, see that.

53
00:04:01.777 --> 00:04:05.498
So you could also do something like

54
00:04:05.498 --> 00:04:09.429
the current year is $YEAR
&gt;&gt; Speaker 2: Is that persistent or

55
00:04:09.429 --> 00:04:12.676
is that just as long as long as
it's terminal windows are open?

56
00:04:12.676 --> 00:04:15.746
&gt;&gt; James: That variable exists so
long as this terminal is open.

57
00:04:15.746 --> 00:04:22.333
And also it's important to note
that if you open a sub shell or

58
00:04:22.333 --> 00:04:27.770
another command,
it's not going to be defined.

59
00:04:28.990 --> 00:04:34.032
So this is a perfect segue into the next

60
00:04:34.032 --> 00:04:38.769
bit which is exporting variables.

61
00:04:38.769 --> 00:04:43.234
So if you wanna be able to use these
environment variables in another

62
00:04:43.234 --> 00:04:45.755
program that you're going to spawn.

63
00:04:45.755 --> 00:04:47.840
You need to export it.

64
00:04:47.840 --> 00:04:52.407
So if you've defined
environment variable already,

65
00:04:52.407 --> 00:04:55.684
you can type export and then its name and

66
00:04:55.684 --> 00:05:00.860
now in node I have access to that,
or I guess it's called MSG.

67
00:05:00.860 --> 00:05:02.963
Now I have access to that variable.

68
00:05:02.963 --> 00:05:08.172
You can also declare the contents
of that variable in line so

69
00:05:08.172 --> 00:05:11.619
if you want to set it to something else.

70
00:05:11.619 --> 00:05:15.190
Different message,
you can do it like that as well.

71
00:05:19.756 --> 00:05:22.918
&gt;&gt; James: So
if you want to declare variables,

72
00:05:22.918 --> 00:05:28.120
that will kind of be around
whenever you open a new terminal,

73
00:05:28.120 --> 00:05:31.950
you can edit this file in a new directory.

74
00:05:31.950 --> 00:05:33.622
Using Bash it's called .bashrc.

75
00:05:33.622 --> 00:05:36.714
There is also one called .profile and

76
00:05:36.714 --> 00:05:41.736
that will work on login shows not
interactive shows as well but

77
00:05:41.736 --> 00:05:45.321
for now if you just
open this file .bashrc.

78
00:05:45.321 --> 00:05:49.762
We'll get into how to use Vim in
a moment but if you get stuck,

79
00:05:49.762 --> 00:05:52.827
hit Escape or Ctrl+C and then colon, Q.

80
00:05:52.827 --> 00:05:57.807
And you might have to do :Q!.

81
00:05:57.807 --> 00:06:00.970
So if you get stuck,
that's how to get unstuck.

82
00:06:00.970 --> 00:06:04.595
But for just a moment,
we're gonna go into vi.

83
00:06:04.595 --> 00:06:08.263
You have to hit I to go into insert mode,
which will probably be more familiar.

84
00:06:08.263 --> 00:06:12.760
Again, we'll go over all of this
stuff in a bit later today.

85
00:06:13.970 --> 00:06:18.378
So here, I've already got like
a bunch of variables I've exported,

86
00:06:18.378 --> 00:06:21.601
like my default time zone
I've set up in my Bashrc.

87
00:06:21.601 --> 00:06:23.580
But I can set a new one when I travel.

88
00:06:23.580 --> 00:06:27.364
This is a lot easier than
configuring the system, I think.

89
00:06:27.364 --> 00:06:29.860
You can also set things like
your prefix and your path.

90
00:06:29.860 --> 00:06:34.178
So my path has my home directory in it, so

91
00:06:34.178 --> 00:06:39.512
I can put things in my
tool list /$PREFIX/ bin.

92
00:06:39.512 --> 00:06:42.009
And anything in there will
be a command that I can run.

93
00:06:42.009 --> 00:06:43.610
So I can show you what that looks like.

94
00:06:43.610 --> 00:06:48.890
All right, so if you hit Ctrl C :q!,

95
00:06:48.890 --> 00:06:54.341
you will get out of them no matter what.

96
00:06:54.341 --> 00:06:57.510
So I've got all of these little
scripts in my prefix bin that aren't.

97
00:06:57.510 --> 00:06:59.551
I don't know what all
those extensive ones are.

98
00:06:59.551 --> 00:07:03.153
I must have compiled something and
installed it into there.

99
00:07:03.153 --> 00:07:08.640
Anyways, that's environment variables.

100
00:07:08.640 --> 00:07:14.393
You can also use any environment
variable in the arithmetic

101
00:07:14.393 --> 00:07:19.226
expressions, which we
talked about briefly, so

102
00:07:19.226 --> 00:07:23.267
if I have N=5, I can do echo like N*5.

103
00:07:23.267 --> 00:07:28.042
Inside of an environment, inside of
an arithmetic you don't have to put

104
00:07:28.042 --> 00:07:30.797
a $ in front of an environment variable.

105
00:07:30.797 --> 00:07:34.629
I think the only case that's like that.

106
00:07:34.629 --> 00:07:39.720
Probably if you put a $ it will also work,

107
00:07:39.720 --> 00:07:42.490
so whatever you like.

108
00:07:42.490 --> 00:07:45.418
Okay, so I've kinda been, yeah, question.

109
00:07:45.418 --> 00:07:50.370
&gt;&gt; Speaker 2: I guess,
&gt;&gt; Speaker 2: I don't

110
00:07:50.370 --> 00:07:55.156
know how to pronounce his name,
but he was just asking about any

111
00:07:55.156 --> 00:07:59.943
time of practice example-type
stuff that you know of online,

112
00:07:59.943 --> 00:08:04.188
aside from the examples that
you've put in the slides,

113
00:08:04.188 --> 00:08:09.374
to learn some of those basic Bash
commands get practice using them.

114
00:08:09.374 --> 00:08:11.272
&gt;&gt; James: Not off the top of my head.

115
00:08:11.272 --> 00:08:15.840
Sometimes at the bottom of the main pages,
they have some examples but not always.

116
00:08:18.960 --> 00:08:22.461
There aren't really that many good
resources, unfortunately, for.

117
00:08:22.461 --> 00:08:23.803
&gt;&gt; Speaker 2: Which is why
you're doing this course.

118
00:08:23.803 --> 00:08:25.153
&gt;&gt; James: Which is why
I'm doing this workshop.

119
00:08:25.153 --> 00:08:28.831
[LAUGH] Why I compiled those information,
cuz this is basically just,

120
00:08:28.831 --> 00:08:32.758
I sat down a while ago and just did
a stream of consciousness brain dump about

121
00:08:32.758 --> 00:08:35.380
of the tricks that I've
learned over the years.

122
00:08:35.380 --> 00:08:40.753
So I don't know of too many other
examples of that, but Maybe there's some.

123
00:08:40.753 --> 00:08:45.051
You can-if you know about the command,
you can read the man page and

124
00:08:45.051 --> 00:08:49.590
you can also search the internet
different ways in which people use it.

125
00:08:49.590 --> 00:08:53.320
That's about the best I can answer
that question, unfortunately.

