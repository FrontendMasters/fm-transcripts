WEBVTT

1
00:00:00.245 --> 00:00:04.006
&gt;&gt; James Halliday: We've seen
the kinds of file redirects now.

2
00:00:04.006 --> 00:00:08.890
The other kind of redirect that
we can use is called a pipe.

3
00:00:08.890 --> 00:00:13.484
A pipe is the character on the keyboard,
like on a US keyboard if you hold

4
00:00:13.484 --> 00:00:18.830
Shift it's the same one as the Backspace
character, it's right there.

5
00:00:18.830 --> 00:00:22.850
On my keyboard, it's between the Backspace
and the Enter key on the far right.

6
00:00:22.850 --> 00:00:27.240
But, I don't know, on different
keyboards they put it different places.

7
00:00:27.240 --> 00:00:33.840
And the pipe character is used to
take the output, the standard out

8
00:00:33.840 --> 00:00:39.420
of one program, and copy it into
the standard input of a second program.

9
00:00:39.420 --> 00:00:43.930
This is a really powerful idea in
Unix because it means that you can

10
00:00:43.930 --> 00:00:45.920
compose programs.

11
00:00:45.920 --> 00:00:50.987
So you can kind of make a bigger program,
on the fly, that combines

12
00:00:50.987 --> 00:00:57.840
the functionality of two simpler programs
to do something that you wanna do.

13
00:00:57.840 --> 00:01:03.048
For an example of that, if we have,
so suppose that we want to know

14
00:01:03.048 --> 00:01:08.662
how many files and directories
are in the current directory, right?

15
00:01:08.662 --> 00:01:11.966
We already know all of the commands
that we need to get this output,

16
00:01:11.966 --> 00:01:15.260
we just have to combine them
with the pipe character.

17
00:01:15.260 --> 00:01:17.690
So we already know that the ls -1 command

18
00:01:18.980 --> 00:01:24.860
prints out every file in directory,
on a single line, right, line by line.

19
00:01:24.860 --> 00:01:31.707
So what we can do is take
the output of the ls -1 command,

20
00:01:31.707 --> 00:01:36.994
and we can pipe that
into the wc -l command.

21
00:01:36.994 --> 00:01:42.108
And what this is gonna tell us is the
number of files and directories because

22
00:01:42.108 --> 00:01:48.000
ls -1 prints a new line every time, and
we know to count the number of lines.

23
00:01:48.000 --> 00:01:52.516
So now we have a program right here that
will tell us the number of files and

24
00:01:52.516 --> 00:01:53.489
directories.

25
00:02:03.842 --> 00:02:06.895
&gt;&gt; James Halliday: If we can
modify this program to print,

26
00:02:06.895 --> 00:02:13.460
maybe we wanna know how many TXT files
there are in the current directory.

27
00:02:13.460 --> 00:02:20.920
So we can take that program and
modify it to use a wild card, a *.txt.

28
00:02:20.920 --> 00:02:25.050
And now the program tells
us that there are four TXT

29
00:02:25.050 --> 00:02:27.350
files in the current directory.

30
00:02:27.350 --> 00:02:31.679
So we can kind of ask these ad hoc
questions using existing tools and

31
00:02:31.679 --> 00:02:33.466
combining them together.

32
00:02:36.351 --> 00:02:40.089
&gt;&gt; James Halliday: What's really
nice about pipes as well is that you

33
00:02:40.089 --> 00:02:45.410
can always inspect the data
that's going into one program.

34
00:02:45.410 --> 00:02:51.330
So if you leave off the pipe you can see,
okay, that's the output of that command.

35
00:02:51.330 --> 00:02:55.280
So I can read that,
I can make sure that it makes sense.

36
00:02:55.280 --> 00:02:57.470
And then I can pipe it
into the other command and

37
00:02:57.470 --> 00:02:59.150
make sure that that makes sense.

38
00:02:59.150 --> 00:03:02.910
You can keep going too, so
if we wanna see how many

39
00:03:02.910 --> 00:03:07.940
bytes of output there are, which
would sort of correspond to, I think,

40
00:03:07.940 --> 00:03:14.540
the base ten logarithm
of the number of files.

41
00:03:14.540 --> 00:03:17.868
Then we can pipe that into wc -c
to count the number of bytets,

42
00:03:17.868 --> 00:03:19.410
which I think ought to be 2.

43
00:03:19.410 --> 00:03:26.730
Because there's the number 4 and
then there is a new line, so yeah, 2.

44
00:03:26.730 --> 00:03:31.220
Or maybe if we get rid of the *.txt,

45
00:03:31.220 --> 00:03:35.770
I think there were 11 files, so
that would be 3 bytes, right?

46
00:03:35.770 --> 00:03:37.410
So one, one, new line.

47
00:03:37.410 --> 00:03:40.330
So yeah, 3 bytes, pretty cool.

48
00:03:41.700 --> 00:03:44.600
And you can chain together these

49
00:03:44.600 --> 00:03:49.290
programs as much as you want to make
any kind of new program on the fly.

