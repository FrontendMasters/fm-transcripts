WEBVTT

1
00:00:00.480 --> 00:00:01.440
&gt;&gt; James Halliday: So another fun command.

2
00:00:01.440 --> 00:00:05.734
Hopefully, you've all by now made a lot of
directories [LAUGH] that you wanna get rid

3
00:00:05.734 --> 00:00:08.016
of, so
you can use the rm command to do that.

4
00:00:08.016 --> 00:00:10.849
Be very careful with the rm
command because it deletes files.

5
00:00:12.086 --> 00:00:15.120
&gt;&gt; James Halliday: So
if we wanna delete a file.

6
00:00:15.120 --> 00:00:22.200
So like I say, I wanna delete boop.txt,
you can do rm boop.txt.

7
00:00:22.200 --> 00:00:22.700
Now that file is gone.

8
00:00:25.145 --> 00:00:27.728
&gt;&gt; James Halliday: If you
wanna delete a directory,

9
00:00:27.728 --> 00:00:31.057
there is a few things
that you have to know.

10
00:00:31.057 --> 00:00:35.878
So if I try to delete this
directory called good,

11
00:00:35.878 --> 00:00:42.240
the rm command won't let me do
that because good is a directory.

12
00:00:42.240 --> 00:00:44.377
There's also an rmdir command,

13
00:00:44.377 --> 00:00:48.050
which will also fail because
the directory is not empty.

14
00:00:49.200 --> 00:00:53.399
So if you have an empty directory,
like here, I'll just make a new one.

15
00:00:54.810 --> 00:00:56.820
So I can rmdir that directory.

16
00:00:56.820 --> 00:01:02.230
Or another way to do that, if I create
that directory again, it's to do rm -r,

17
00:01:02.230 --> 00:01:06.745
which is recursively remove something.

18
00:01:09.408 --> 00:01:13.818
&gt;&gt; James Halliday: If I need to delete,
so suppose I wanna delete this

19
00:01:13.818 --> 00:01:18.438
directory called good and
everything inside of it,

20
00:01:18.438 --> 00:01:24.890
then we could do rm-r good, and then,
&gt;&gt; James Halliday: Everything is gone.

21
00:01:24.890 --> 00:01:31.200
Be very careful with -r and -rf,
because if you accidentally do something

22
00:01:31.200 --> 00:01:35.830
like recursively delete root directory or
your home directory or something

23
00:01:35.830 --> 00:01:40.150
with a lot important files that you didn't
wanna get rid of, there is no undo.

24
00:01:40.150 --> 00:01:43.735
So,
&gt;&gt; James Halliday: A lot of these tools,

25
00:01:43.735 --> 00:01:46.820
this also goes for things like
the move command and the copy command.

26
00:01:46.820 --> 00:01:52.950
If you actually overwrite some file, if
you move over some file, not really much

27
00:01:52.950 --> 00:01:57.790
you can do aside from some kind of data
forensic's tools to get back your files.

28
00:01:57.790 --> 00:01:58.800
So just be careful.

29
00:02:01.384 --> 00:02:04.924
&gt;&gt; James Halliday: These tools are very,
another to word to describe them,

30
00:02:04.924 --> 00:02:06.870
but they're unforgiving.

31
00:02:06.870 --> 00:02:08.740
They can be very unforgiving at times.

32
00:02:13.601 --> 00:02:16.690
&gt;&gt; James Halliday: Okay, so
that's the rm command, not a lot to it.

33
00:02:16.690 --> 00:02:18.600
There's also the wc command.

34
00:02:18.600 --> 00:02:23.610
So the wc command is a good
example of a command that

35
00:02:23.610 --> 00:02:27.400
can both read from files and
read from standard input.

36
00:02:27.400 --> 00:02:30.972
So if I ran wc on a file with lots

37
00:02:30.972 --> 00:02:35.440
of lines,
&gt;&gt; James Halliday: So

38
00:02:35.440 --> 00:02:37.779
wc is short for word count.

39
00:02:37.779 --> 00:02:40.270
And then there's three columns.

40
00:02:40.270 --> 00:02:43.290
I never can remember which
column is which, but

41
00:02:43.290 --> 00:02:45.050
one is the number of characters.

42
00:02:45.050 --> 00:02:46.540
I think that's the last one.

43
00:02:46.540 --> 00:02:49.210
Another one is the number of words.

44
00:02:49.210 --> 00:02:52.502
And another one is the number of lines.

45
00:02:52.502 --> 00:02:56.290
And there are different switches that
you can pass, or flags, to do that.

46
00:02:56.290 --> 00:02:58.830
So- l is short for the number of lines.

47
00:02:58.830 --> 00:03:02.032
So I can count the number of
lines in this big text file.

48
00:03:02.032 --> 00:03:08.066
Also if you wanna copy of this particular
text file, there's a link to this one,

49
00:03:08.066 --> 00:03:12.350
it's just Moby Dick off
Project Gutenberg in the notes.

50
00:03:14.188 --> 00:03:18.247
&gt;&gt; James Halliday: So you can do wc -l,
counts the number of lines,

51
00:03:18.247 --> 00:03:22.365
wc -c is the number of bytes in the file.

52
00:03:22.365 --> 00:03:25.186
So it's about 1.2 megabytes.

53
00:03:27.291 --> 00:03:31.529
&gt;&gt; James Halliday: Also, if you want the
word count, like maybe you have to write

54
00:03:31.529 --> 00:03:36.764
an essay, and you're back in high school
and it has to be 800 words or so.

55
00:03:36.764 --> 00:03:40.353
So I did, back in high school,
when I was writing essays,

56
00:03:40.353 --> 00:03:45.385
I was writing them in vim, and I would use
the wc -w commands to do the word count.

57
00:03:45.385 --> 00:03:49.442
[LAUGH] So here this one is,

58
00:03:50.603 --> 00:03:54.403
&gt;&gt; James Halliday: About 215,000 words.

59
00:03:57.099 --> 00:04:01.257
&gt;&gt; James Halliday: So
the other thing is, if you just type wc,

60
00:04:01.257 --> 00:04:04.860
then it's going to sit there.

61
00:04:04.860 --> 00:04:09.450
And what the wc command is waiting for,
is it's waiting for

62
00:04:09.450 --> 00:04:11.700
you to type things in on the keyboard.

63
00:04:11.700 --> 00:04:18.466
So I can do hello world, hello minnesota,

64
00:04:18.466 --> 00:04:22.330
whatever, and I can keep typing things.

65
00:04:22.330 --> 00:04:26.590
And when you wanna tell the program that,
all right,

66
00:04:26.590 --> 00:04:29.810
I'm done typing things,
you can type Ctrl+D.

67
00:04:29.810 --> 00:04:35.260
And this sends the end-of-file
signal to this program, so Ctrl+D.

68
00:04:35.260 --> 00:04:38.180
And now, I get the awesome numbers back.

69
00:04:38.180 --> 00:04:39.650
I get the number of lines,

70
00:04:39.650 --> 00:04:44.110
which is 3, get the number of words
which is 5, does that make sense?

71
00:04:44.110 --> 00:04:45.434
One, two, three, four, five, yep.

72
00:04:45.434 --> 00:04:49.020
And I get the number of characters,
or bytes, which is 37.

73
00:04:49.020 --> 00:04:53.591
All right, if you just want one of those
things, if you read from standard in,

74
00:04:53.591 --> 00:04:55.940
you can pass in -l or -w or -c.

75
00:04:55.940 --> 00:04:59.646
So,
&gt;&gt; James Halliday: If I just want to

76
00:04:59.646 --> 00:05:03.595
count the number of lines,
Ctrl+D and I get 3 lines.

