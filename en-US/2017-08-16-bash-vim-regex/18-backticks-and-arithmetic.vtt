WEBVTT

1
00:00:00.270 --> 00:00:04.290
&gt;&gt; James Halliday: Backticks, are
something I just covered a little bit ago,

2
00:00:04.290 --> 00:00:07.940
but really, really useful.

3
00:00:07.940 --> 00:00:10.450
So, there's two ways of doing backticks.

4
00:00:10.450 --> 00:00:16.340
You can do them with backticks like this,
so if I want to just backticks,

5
00:00:16.340 --> 00:00:21.010
basically run a command and
whatever was written to standard output,

6
00:00:21.010 --> 00:00:26.600
is like kinda just like copy pasted
straight into whatever your command was.

7
00:00:26.600 --> 00:00:31.040
So if you ever have a command where you
kind of need it to be dependent on some

8
00:00:31.040 --> 00:00:35.650
other like an argument, to be dependent
on some other command that you wanna run,

9
00:00:35.650 --> 00:00:37.740
you can use backticks to do that.

10
00:00:37.740 --> 00:00:40.765
So the two ways of doing backticks are,

11
00:00:40.765 --> 00:00:44.716
you can use just the backtick
character like that.

12
00:00:44.716 --> 00:00:50.411
These are the keys that's like on my
keyboard it's like right below the escape.

13
00:00:50.411 --> 00:00:54.190
It's the same one that
has the tilda on it.

14
00:00:54.190 --> 00:00:56.410
On your keyboard it might
be different placed, but

15
00:00:57.570 --> 00:01:02.620
you can also use parenthesis like this.

16
00:01:02.620 --> 00:01:04.840
So with the dollar sign in front.

17
00:01:04.840 --> 00:01:06.160
So these are kind of the two ways.

18
00:01:06.160 --> 00:01:09.380
It's a little bit more readable I think
sometimes to use the dollar sign,

19
00:01:09.380 --> 00:01:10.180
parenthesis case.

20
00:01:10.180 --> 00:01:12.898
But, you can mix and
match whatever you like.

21
00:01:12.898 --> 00:01:15.073
So.

22
00:01:17.186 --> 00:01:22.273
&gt;&gt; James Halliday: A really handy thing
if you wanna use the date in your

23
00:01:22.273 --> 00:01:28.187
file calculation,
you could do something like move well,

24
00:01:28.187 --> 00:01:32.681
like some log data you
want to write out to file

25
00:01:32.681 --> 00:01:37.200
with those the same,
or like quote that log.

26
00:01:38.470 --> 00:01:44.190
And you can put whatever text you want,
like in front of or behind

27
00:01:45.780 --> 00:01:50.470
the bit that's gonna be run in backticks.

28
00:01:50.470 --> 00:01:54.280
So that makes a file called
blah whatever dot log.

29
00:01:55.356 --> 00:01:59.920
We can right some more data, so

30
00:01:59.920 --> 00:02:04.870
if you had a script that did this,
then and it like periodically wrote

31
00:02:04.870 --> 00:02:09.810
data to whatever was specified
in those backticks, then as

32
00:02:09.810 --> 00:02:13.110
soon as the next day rolled around, it
would start writing two different files.

33
00:02:13.110 --> 00:02:17.320
So this is a really handy was to
do some pretty rudimentary but

34
00:02:17.320 --> 00:02:19.060
useful logging, for example.

35
00:02:21.831 --> 00:02:23.340
&gt;&gt; James Halliday: Okay,
this is a fun thing.

36
00:02:23.340 --> 00:02:28.390
So if you want your program to print
out whatever the current date is,

37
00:02:28.390 --> 00:02:29.100
you could do.

38
00:02:31.365 --> 00:02:34.390
&gt;&gt; James Halliday: There should be an echo
in front of that command in the notes.

39
00:02:34.390 --> 00:02:38.940
But, like greetings from the year 2017.

40
00:02:38.940 --> 00:02:42.565
I can't believe that I
first wrote that in 2014,

41
00:02:42.565 --> 00:02:46.687
that is such a long time ago [LAUGH]
I first gave this work shop.

42
00:02:46.687 --> 00:02:52.111
Yeah, so another really fun thing that
you can do is not just backticks and

43
00:02:52.111 --> 00:02:58.270
running programs, but you can actually
do some basic arithmetic as well.

44
00:02:58.270 --> 00:03:04.760
So you do this similar to backticks
with the form where you have

45
00:03:04.760 --> 00:03:10.965
dollar sign parentheses, but you but two
parentheses instead of just a single one.

46
00:03:10.965 --> 00:03:12.685
And that let's you do arithmetic.

47
00:03:12.685 --> 00:03:16.745
LIke if you just run this
command with like 4*5+1,

48
00:03:16.745 --> 00:03:18.825
you get the result which is 21.

49
00:03:18.825 --> 00:03:21.133
So, here I'll go and we'll do some math.

50
00:03:21.133 --> 00:03:27.064
5*11+5.

51
00:03:27.064 --> 00:03:29.900
Should be 5 times 12, 60, yep.

52
00:03:31.250 --> 00:03:34.000
Another cool thing that you can do, so

53
00:03:34.000 --> 00:03:38.260
suppose that I wanna add
a thousand to my greeting.

54
00:03:38.260 --> 00:03:42.379
So I want it to print
greetings from the year 3017.

55
00:03:43.440 --> 00:03:46.740
So what I could do,
is I could stack some of these ideas, so

56
00:03:46.740 --> 00:03:50.450
I'll do the normal
substitution with backticks.

57
00:03:51.530 --> 00:03:57.242
But I'll add +1000 with
some arithmetic operations.

58
00:04:04.048 --> 00:04:07.122
&gt;&gt; James Halliday: Yeah, so I think I'll
give everyone a little bit of time to play

59
00:04:07.122 --> 00:04:09.390
around with these, cuz they're really fun.

60
00:04:11.870 --> 00:04:13.020
And sometimes useful.

61
00:04:13.020 --> 00:04:17.500
I don't think that I use the arithmetic
expressions too much, but now and then

62
00:04:17.500 --> 00:04:22.110
it's just useful to know about that kinda
stuff that you can do this kinda thing.

63
00:04:22.110 --> 00:04:24.170
I use backticks all the time though.

64
00:04:26.070 --> 00:04:29.420
Cuz a lot times you want like a
procedurally generated file name, or some

65
00:04:29.420 --> 00:04:33.050
procedurally generated options that you
get from the output of another command.

66
00:04:33.050 --> 00:04:36.972
Related to backticks is
another program called Xargs.

67
00:04:36.972 --> 00:04:42.450
I don't know if I have anything
about Xargs in the notes,

68
00:04:42.450 --> 00:04:48.290
but it's certainly worth researching
if you haven't used that before.

69
00:04:49.580 --> 00:04:51.520
Okay, I can show you an example.

70
00:04:51.520 --> 00:04:54.400
So you could write it this way.

71
00:04:55.920 --> 00:04:58.100
This is maybe not the best example.

72
00:04:58.100 --> 00:05:02.270
But if I go to the previous example,
I can show you something cool with xargs.

73
00:05:02.270 --> 00:05:07.060
So I could have something that
runs like this, or I could do.

74
00:05:08.973 --> 00:05:17.030
&gt;&gt; James Halliday: Date + %y xargs
echo Greetings from the year block.

75
00:05:17.030 --> 00:05:18.039
And this does the same thing.

76
00:05:20.479 --> 00:05:24.681
&gt;&gt; James Halliday: Xarg pretty much takes
this, it reads from standard in and

77
00:05:24.681 --> 00:05:30.630
copies all of the data from standard in,
and into the arguments of the program.

78
00:05:30.630 --> 00:05:35.430
So it like, tacks the arguments onto
the end of whatever command you specified.

79
00:05:38.110 --> 00:05:43.950
So if you wanna read more about the
different time strings, if you do mandate.

80
00:05:43.950 --> 00:05:47.880
The cool thing is you can use,
if you learn this little language for

81
00:05:47.880 --> 00:05:54.900
formatting time with the time strings,
most programming languages have

82
00:05:54.900 --> 00:05:59.920
ways of using the exact same knowledge to
format dates in that programming language.

83
00:05:59.920 --> 00:06:03.840
There's an NPM module called STRFTIME,
that does the same thing.

84
00:06:03.840 --> 00:06:09.250
There's also a library,
you can read the man page for STRFTIME.

85
00:06:09.250 --> 00:06:11.580
There's a C library for
doing this kinda stuff.

86
00:06:11.580 --> 00:06:13.720
So it comes up again and again.

