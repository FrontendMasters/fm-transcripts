WEBVTT

1
00:00:00.200 --> 00:00:04.080
&gt;&gt; James Halliday: I'd like to keep
going if that's okay, and talk about

2
00:00:04.080 --> 00:00:09.580
job control which is an important idea in
bash and also like the operating system.

3
00:00:09.580 --> 00:00:14.020
It contextualizes how we run programs
as well I think in a nice way.

4
00:00:14.020 --> 00:00:20.130
So If you remember, UNIX systems
are kind of first designed for

5
00:00:20.130 --> 00:00:23.850
doing time sharing on
these big mainframes which

6
00:00:23.850 --> 00:00:27.840
kind of carry you over a lot of those
ideas into modern systems as well.

7
00:00:27.840 --> 00:00:29.390
They're still useful for

8
00:00:29.390 --> 00:00:32.740
time sharing operating systems
which is what we all have now.

9
00:00:33.970 --> 00:00:39.220
We can run multiple programs at the same
time, so here's a fun game we can play.

10
00:00:39.220 --> 00:00:41.716
It's called time cat.

11
00:00:41.716 --> 00:00:46.477
So if you take time cat, how you play
this game is (you do time cat) you

12
00:00:46.477 --> 00:00:50.857
try to get as close to one second
without going over as possible.

13
00:00:52.615 --> 00:00:53.775
&gt;&gt; James Halliday: 0.5.

14
00:00:56.183 --> 00:01:00.130
&gt;&gt; James Halliday: 0.7,
0.91, that's pretty good.

15
00:01:00.130 --> 00:01:04.320
And then you hit CTRL + C when
you want the program to exit.

16
00:01:04.320 --> 00:01:07.840
And it will print the amount
of time that has elapsed.

17
00:01:07.840 --> 00:01:12.464
So Ctrl+C is an example of
a signal that gets sent to

18
00:01:12.464 --> 00:01:16.670
the program when you
want the program to exit.

19
00:01:26.536 --> 00:01:28.642
&gt;&gt; James Halliday: Any high scores?

20
00:01:28.642 --> 00:01:29.769
&gt;&gt; Speaker 2: 0.97.

21
00:01:29.769 --> 00:01:31.855
&gt;&gt; Speaker 3: Yep, 1.017.

22
00:01:31.855 --> 00:01:33.635
&gt;&gt; James Halliday: That doesn't count,
you went over it.

23
00:01:33.635 --> 00:01:35.940
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Speaker 2: That's what I was afraid of.

24
00:01:35.940 --> 00:01:37.580
&gt;&gt; James Halliday: [LAUGH] It's
like Price is Right rules.

25
00:01:40.640 --> 00:01:43.598
So anyways,
that's just a fun example of CTRL+C.

26
00:01:43.598 --> 00:01:46.796
Also if a program is running and
you just want it to stop,

27
00:01:46.796 --> 00:01:50.951
if you hit CTRL+C,
&gt;&gt; James Halliday: Then it will stop.

28
00:01:50.951 --> 00:01:55.879
[LAUGH]
&gt;&gt; James Halliday: There's

29
00:01:55.879 --> 00:01:58.602
another fun thing called CTRL+Z.

30
00:01:58.602 --> 00:02:02.360
So CTRL+Z takes something
from the foreground.

31
00:02:02.360 --> 00:02:04.700
Which is all that we've dealt with so far.

32
00:02:04.700 --> 00:02:11.139
So whenever you run a command, you're
actually running it in the foreground and

33
00:02:11.139 --> 00:02:16.836
so for example if I run watch
&gt;&gt; James Halliday: That

34
00:02:16.836 --> 00:02:19.790
should one date then it's gonna
just run this command every second.

35
00:02:19.790 --> 00:02:24.690
If I hit Ctrl+Z then it
takes that program that

36
00:02:24.690 --> 00:02:29.130
was running in the foreground and it puts
it in the background and it stops it So

37
00:02:29.130 --> 00:02:33.350
now that program is no longer running,
and I can do other stuff.

38
00:02:33.350 --> 00:02:35.630
I can take LS, take date.

39
00:02:35.630 --> 00:02:38.270
And when I resume that program,
I can type fg,

40
00:02:38.270 --> 00:02:41.065
which puts that program
back in the foreground.

41
00:02:41.065 --> 00:02:42.220
And there it is.

42
00:02:43.495 --> 00:02:47.565
&gt;&gt; James Halliday: You can actually do
this to more than one program at a time.

43
00:02:47.565 --> 00:02:50.555
So if I want to open up
a file called cool.txt,

44
00:02:52.530 --> 00:02:54.424
&gt;&gt; James Halliday: I can do CTRL+Z there

45
00:02:54.424 --> 00:02:58.850
as well, and
now I see that this is job number two.

46
00:02:58.850 --> 00:03:03.690
And you can type this command called
jobs to see what jobs are running,

47
00:03:04.890 --> 00:03:11.070
and if you do foreground, it's going
to go the last Job that was active.

48
00:03:11.070 --> 00:03:16.020
But you can also specify a number for
the job, like %1 refers to the first job,

49
00:03:17.250 --> 00:03:20.310
which is the watch kids.

50
00:03:20.310 --> 00:03:24.141
And %2 is in this case VI,
which is the running.

51
00:03:27.400 --> 00:03:32.394
&gt;&gt; James Halliday: You can also
use the command called kill to

52
00:03:32.394 --> 00:03:37.540
send a signal to the program to terminate.

53
00:03:38.710 --> 00:03:44.620
So, if I do kill %2,
that's gonna stop the text editor, vim.

54
00:03:46.720 --> 00:03:51.030
So, if I type jobs now,
actually it didn't kill it,

55
00:03:51.030 --> 00:03:55.240
because some programs are a bit touchy
about what signals they accept.

56
00:03:55.240 --> 00:03:59.460
So if you send just the standard
which is the hangup signal to vim,

57
00:03:59.460 --> 00:04:00.700
then it won't actually stop.

58
00:04:01.770 --> 00:04:04.550
So you might have to send
a different kind of signal like,

59
00:04:04.550 --> 00:04:09.650
if you've ever heard of -9,
that's like the most severe kind of

60
00:04:09.650 --> 00:04:13.930
Signal you can get a program that can't
be intercepted by the program itself.

61
00:04:13.930 --> 00:04:16.630
So the operating system
will just deal with it, and

62
00:04:16.630 --> 00:04:19.930
it will get rid of that program for
you, so.

63
00:04:19.930 --> 00:04:23.450
So then if you hit Enter again, you see
that, yeah that job was killed now.

64
00:04:23.450 --> 00:04:26.000
And there's only this one running.

65
00:04:26.000 --> 00:04:28.630
I think the other one will
probably be better behaved.

66
00:04:28.630 --> 00:04:30.280
No it's still running.

67
00:04:30.280 --> 00:04:33.210
Could try HUP, no doesn't do.

68
00:04:36.670 --> 00:04:41.183
Yeah I guess just -9 that one as well,
then it's gone.

69
00:04:41.183 --> 00:04:43.612
I think when jobs are in
a stop status they

70
00:04:43.612 --> 00:04:45.831
don't,
&gt;&gt; James Halliday: It's

71
00:04:45.831 --> 00:04:46.720
a little bit harder.

72
00:04:46.720 --> 00:04:51.790
So how the signals work with
like hitting CTRL+Z and

73
00:04:51.790 --> 00:04:57.820
also doing fg is also with bt sending
a signal, which is what killed us.

74
00:04:57.820 --> 00:05:04.150
So, there's a bunch of signals,
I think if you man kill, it doesn't

75
00:05:04.150 --> 00:05:07.719
list the signals there, but there's a man
page that it references called signal.

76
00:05:08.940 --> 00:05:12.710
And you can read about what all the
signals do, it's actually about c source,

77
00:05:12.710 --> 00:05:16.050
but I think if you scroll down a ways,
well, I guess it's not in there.

78
00:05:16.050 --> 00:05:21.001
But, anyways, there are a bunch of
these signals, they also have names,

79
00:05:21.001 --> 00:05:24.539
so they are called things like SIGTERM,
or SIGKILL,

80
00:05:24.539 --> 00:05:29.767
is the one that's dash nine, or SIGCUP
&gt;&gt; James Halliday: And how the stop and

81
00:05:29.767 --> 00:05:34.919
foreground works is there's one
called sig cont, sig continue, for

82
00:05:34.919 --> 00:05:40.870
doing the foregrounding, and sig stop,
which puts the Java in the background.

83
00:05:40.870 --> 00:05:42.650
So it's sort of how that
works behind the scenes.

84
00:05:43.760 --> 00:05:47.747
And this is something that
the kernel handles for you.

85
00:05:49.962 --> 00:05:54.099
&gt;&gt; James Halliday: There's also a %% which
is like the same as the last job if you

86
00:05:54.099 --> 00:05:56.920
need to mess around with jobs.

87
00:05:56.920 --> 00:05:59.900
I found that it's pretty handy to use Vim.

88
00:05:59.900 --> 00:06:02.700
If you're giving a presentation or
something and

89
00:06:02.700 --> 00:06:07.040
you have Vim open, and
maybe you're coding something and

90
00:06:07.040 --> 00:06:09.900
then you wanna like drop down
to the command line really fast.

91
00:06:09.900 --> 00:06:14.920
You can just hit Ctrl+Z, and do some
stuff, like run a program whatever,

92
00:06:14.920 --> 00:06:17.250
and then fg back into your text editor.

93
00:06:17.250 --> 00:06:20.729
That's a pretty handy work for
us sometimes.

94
00:06:23.811 --> 00:06:27.885
&gt;&gt; James Halliday: Another way to
background something right away,

95
00:06:27.885 --> 00:06:30.892
if you don't wanna run something and

96
00:06:30.892 --> 00:06:35.840
then hit Ctrl+Z right away,
you can do just an N percent.

97
00:06:35.840 --> 00:06:41.020
So for example, if I do watch dash N

98
00:06:41.020 --> 00:06:46.240
one date ampersand, it's going to put that
program in the background immediately.

99
00:06:47.810 --> 00:06:52.150
But it's not actually going to run
that program because it stopped.

100
00:06:52.150 --> 00:06:57.540
So what you have to do if you want one of
those programs that's in the background

101
00:06:57.540 --> 00:07:01.830
to run in the background
you can do BG which

102
00:07:03.740 --> 00:07:07.160
not all programs are very happy about, so

103
00:07:07.160 --> 00:07:10.680
like this one in particular doesn't
really like being put in the background.

104
00:07:12.570 --> 00:07:17.009
But for other programs,
they'll just keep going, so

105
00:07:17.009 --> 00:07:21.061
like if I write a little
script with the sub shell,

106
00:07:21.061 --> 00:07:25.419
I think that that'll work,
so I do sleep one, date.

107
00:07:28.146 --> 00:07:31.780
&gt;&gt; James Halliday: Right, yes, so
this one is just running on its own.

108
00:07:31.780 --> 00:07:33.210
And so this is pretty trippy.

109
00:07:33.210 --> 00:07:36.160
There's actually a program running that's
spamming my terminal with output but

110
00:07:36.160 --> 00:07:37.890
I can also type commands and things.

111
00:07:39.270 --> 00:07:42.546
So if you just kill % % then it stops it.

112
00:07:44.718 --> 00:07:45.880
&gt;&gt; James Halliday: And
now, there's no more jobs.

113
00:07:50.850 --> 00:07:55.030
If you accidentally spawn a bunch of
zombie processes that are running in

114
00:07:55.030 --> 00:07:57.880
the background and you don't know how to
stop them, there's a really useful command

115
00:07:57.880 --> 00:08:05.070
called pgrep that searches for
a process by its name.

116
00:08:05.070 --> 00:08:08.400
So, if you remember that you started
a program like watch or something,

117
00:08:08.400 --> 00:08:13.370
you can do, so if I start up that
program again, It's like no,

118
00:08:14.370 --> 00:08:20.160
and if you do pgrep watch then you can
see that there's all of these processes.

119
00:08:20.160 --> 00:08:21.024
Wanna do it over here.

120
00:08:21.024 --> 00:08:28.520
You could also -l and -lf will kinda
list a bit more about the program.

121
00:08:28.520 --> 00:08:33.450
So this is all watchdog, it's actually
because the watch command is,

122
00:08:33.450 --> 00:08:35.410
this isn't the watch command, that's why.

123
00:08:35.410 --> 00:08:37.160
This is a while true command.

124
00:08:39.768 --> 00:08:41.700
&gt;&gt; James Halliday: Now,
why don't I run a watch command?

125
00:08:43.640 --> 00:08:44.920
Now, over here we should see it.

126
00:08:47.080 --> 00:08:48.150
Right.
So there we go.

127
00:08:48.150 --> 00:08:49.360
That's our program.

128
00:08:49.360 --> 00:08:52.760
If I just do this other
command called pkill watch,

129
00:08:52.760 --> 00:08:57.060
it's gonna try to kill all these jobs, but
these are all owned by the root user so

130
00:08:57.060 --> 00:09:01.350
it's only gonna be able to kill this one
which is actually what we want it to do.

131
00:09:01.350 --> 00:09:03.690
And there we go,
that program is already terminated.

132
00:09:03.690 --> 00:09:07.020
So these are some ways p-grab, p-kill,

133
00:09:07.020 --> 00:09:09.790
different ways of managing
processes on your system.

134
00:09:09.790 --> 00:09:15.550
You could also kill a process by its pid
it's called which is the process ID,

135
00:09:15.550 --> 00:09:17.500
which is this number right here.

136
00:09:17.500 --> 00:09:21.030
So every process has an ID that
you can reference that by.

137
00:09:26.420 --> 00:09:27.160
Okay, why don't we-.

138
00:09:27.160 --> 00:09:27.790
&gt;&gt; Speaker 2: Question.

139
00:09:27.790 --> 00:09:30.430
&gt;&gt; James Halliday: Yeah.
&gt;&gt; Speaker 2: If I do CTRL+Z to put

140
00:09:30.430 --> 00:09:36.190
a process in the background,
on my terminal it says suspended,

141
00:09:36.190 --> 00:09:38.750
and to me the word means sleep or
not running.

142
00:09:38.750 --> 00:09:41.470
But it's really running, right?

143
00:09:41.470 --> 00:09:42.340
&gt;&gt; James Halliday: It depends.

144
00:09:42.340 --> 00:09:46.747
Sometimes, the programs,
they can listen to these events and

145
00:09:46.747 --> 00:09:49.005
decide to do different things.

146
00:09:49.005 --> 00:09:53.607
I think by default, the process will
keep going if you do CTRL+Z, but

147
00:09:53.607 --> 00:09:58.521
some programs know that they shouldn't
do anything cuz they can listen for

148
00:09:58.521 --> 00:10:03.850
that event, like the watch command and
VI, just kinda suspends operations.

149
00:10:03.850 --> 00:10:05.050
&gt;&gt; Speaker 2: So it depends.

150
00:10:05.050 --> 00:10:05.585
&gt;&gt; James Halliday: It depends, yeah.

151
00:10:05.585 --> 00:10:06.735
&gt;&gt; Speaker 2: All right.

