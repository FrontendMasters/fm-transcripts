WEBVTT

1
00:00:00.170 --> 00:00:04.120
&gt;&gt; James Halliday: So here's another
fun command, it's called curl.

2
00:00:04.120 --> 00:00:07.052
So curl will take any url, so

3
00:00:07.052 --> 00:00:12.300
here's the project Gutenberg from Moby
Dick that I've been using for my example.

4
00:00:12.300 --> 00:00:14.570
You can get it from the notes or

5
00:00:14.570 --> 00:00:17.080
if someone could paste it into
the chat that would be handy.

6
00:00:18.180 --> 00:00:20.120
&gt;&gt; Speaker 2: I just did and
I was playing with this and

7
00:00:20.120 --> 00:00:24.490
I had to add a dash dash compressed
flag cuz it was coming back gzipped.

8
00:00:24.490 --> 00:00:25.140
&gt;&gt; James Halliday: Yeah.
Well,

9
00:00:25.140 --> 00:00:28.000
there is another command
that we can do with a pike

10
00:00:28.000 --> 00:00:31.910
that might even be a better example,
but, yeah, okay.

11
00:00:31.910 --> 00:00:37.390
I think when I last did this workshop
it wasn't gzipped by default.

12
00:00:37.390 --> 00:00:41.560
So anyway, if we do curl with the url,

13
00:00:41.560 --> 00:00:44.880
what the curl command does
is it loads the url and

14
00:00:44.880 --> 00:00:50.540
it prints the contents to standard
out before whatever URL you've done.

15
00:00:50.540 --> 00:00:55.830
And I recommend to use the dash -s
flag with curl because by default,

16
00:00:55.830 --> 00:01:00.410
curl prints a progress bar that can
kind of get in your way sometimes.

17
00:01:00.410 --> 00:01:05.910
So, if I do if I do curl -s and
give it a URL,

18
00:01:05.910 --> 00:01:10.180
like a text file, or whatever kind of file
that you want, then it's going to print

19
00:01:10.180 --> 00:01:16.740
the contents to standard out,
which happens to be compressed with gzip.

20
00:01:16.740 --> 00:01:20.220
So there's a program that should be
already installed on your system

21
00:01:20.220 --> 00:01:21.190
called gunzip.

22
00:01:21.190 --> 00:01:26.280
All right, so if you

23
00:01:26.280 --> 00:01:29.710
happen to have done the curl command and
your terminal looks so weird like this,

24
00:01:29.710 --> 00:01:34.960
and if you type and it looks like
gibberish, you can fix it by typing reset.

25
00:01:36.990 --> 00:01:38.250
And now you're terminal should be better.

26
00:01:40.350 --> 00:01:46.120
Okay, so there's a program called gunzip,
which is spelled like this.

27
00:01:46.120 --> 00:01:50.510
And that will read from standard input,
g-zipped, compressed data.

28
00:01:50.510 --> 00:01:53.480
And it will write uncompressed
data to standard out.

29
00:01:53.480 --> 00:01:57.350
So we can combine these existing
tools to do something that we want.

30
00:01:57.350 --> 00:01:58.300
So here we go.

31
00:01:58.300 --> 00:02:00.166
And now I see the uncompressed output.

32
00:02:00.166 --> 00:02:02.070
Pretty sweet.

33
00:02:02.070 --> 00:02:06.920
All right,
&gt;&gt; James Halliday: So

34
00:02:06.920 --> 00:02:09.160
we can do some other fun things.

35
00:02:09.160 --> 00:02:13.160
I'm gonna cover this more in
the regular expression section later.

36
00:02:13.160 --> 00:02:18.540
But here I have a little
program using sed,

37
00:02:18.540 --> 00:02:22.000
which replaces all
whitespace with new lines.

38
00:02:22.000 --> 00:02:27.240
So if there's something like a space,
it's gonna turn that into a new line.

39
00:02:27.240 --> 00:02:32.400
And this is really useful because
it means that every word will be

40
00:02:32.400 --> 00:02:37.650
on its own lines so we can start to do
things like a filter those lines or

41
00:02:37.650 --> 00:02:39.961
a count the number lines, for example.

42
00:02:41.680 --> 00:02:46.625
So if I add that a little bit at the end,
&gt;&gt; James Halliday: at the end of

43
00:02:46.625 --> 00:02:51.260
my program, then now,
I see every word gets its own line.

44
00:02:52.460 --> 00:02:58.500
And I can use another program called
grep that's gonna filter the output.

45
00:02:58.500 --> 00:03:03.280
So suppose that I only wanna
see lines that contain whale.

46
00:03:05.330 --> 00:03:07.150
It's Moby Dick so
of course there's a lot of them.

47
00:03:09.330 --> 00:03:14.490
Also sometimes,
whale is at the beginning of a sentence.

48
00:03:14.490 --> 00:03:17.050
So like a capital W.

49
00:03:17.050 --> 00:03:21.430
There is an other flag that you can
pass to grep that does case insensitive

50
00:03:21.430 --> 00:03:24.020
matching, -i,
which you can put in the middle or

51
00:03:24.020 --> 00:03:27.120
you can put it at the end because
the order doesn't matter.

52
00:03:27.120 --> 00:03:31.160
So if I want to see all of the instances
of the word whale, lowercase or

53
00:03:31.160 --> 00:03:37.550
uppercase can do, we curl this text file,
which is compressed.

54
00:03:37.550 --> 00:03:42.092
Then we gunzip it, and then we turn
all of the whitespace into new lines,

55
00:03:42.092 --> 00:03:45.300
so that every word is on it's own line.

56
00:03:45.300 --> 00:03:51.473
And then we search for all of the lines
that contain the word whale, like that.

57
00:03:51.473 --> 00:03:56.908
And now we can pipe that
to the wc -l command to

58
00:03:56.908 --> 00:04:03.776
know how many times in Mobby Dick
the word whale appears,

59
00:04:03.776 --> 00:04:07.798
which happens to be 1,692.

60
00:04:07.798 --> 00:04:12.819
So you can answer question like this
about files just by kind of composing

61
00:04:12.819 --> 00:04:17.530
all of these very small tools that
kind of do one thing and do it well.

62
00:04:19.640 --> 00:04:25.710
Again, I'll get more into how this works
in the regular expression section but

63
00:04:25.710 --> 00:04:28.620
It's not just whale, but
also words like whaling,

64
00:04:28.620 --> 00:04:32.880
and different kinds of verbs
that include the word whales.

65
00:04:32.880 --> 00:04:38.420
So if we wanna see everything
that matches whale,

66
00:04:38.420 --> 00:04:43.730
or whaling,
we can use this group right here.

67
00:04:43.730 --> 00:04:50.094
And the pipe character inside of
the string there means either an e or ing.

68
00:04:52.133 --> 00:04:53.470
&gt;&gt; James Halliday: And so, whoa.

69
00:04:55.190 --> 00:04:59.160
All right, and you have to give grep
the capital E command if you don't want to

70
00:04:59.160 --> 00:05:00.770
back space the parentheses.

71
00:05:02.460 --> 00:05:06.090
Again I'll get more into how that all
works in the regular expression section.

72
00:05:06.090 --> 00:05:11.858
So there are actually 1,823 instances
of whale words in Moby Dick,

73
00:05:11.858 --> 00:05:16.772
which is a fun question that we
can answer with our command line

74
00:05:16.772 --> 00:05:21.798
pipeline here, which is a little
program that counts whales.

75
00:05:27.481 --> 00:05:29.607
&gt;&gt; James Halliday: Yeah, so we can use
some of the other stuff that we just

76
00:05:29.607 --> 00:05:31.440
talked about as well.

77
00:05:31.440 --> 00:05:35.520
So for example, maybe we wanna, that's
really good pieces of information we wanna

78
00:05:35.520 --> 00:05:41.320
save for later so what we can also do is
we could use the redirect character so

79
00:05:41.320 --> 00:05:46.810
we're gonna use &gt; to write
the whale counts to a file.

80
00:05:46.810 --> 00:05:50.640
We'll call it whale-count.txt.

81
00:05:50.640 --> 00:05:53.563
And so now,
we have that information for later.

82
00:05:59.248 --> 00:06:03.450
&gt;&gt; James Halliday: And you can combine and
remix all of these sorts of pieces.

83
00:06:03.450 --> 00:06:10.110
So I think that should give you
a lot to play with hopefully.

84
00:06:10.110 --> 00:06:13.020
I've got a little breakdown here of
what every piece does just to kind of

85
00:06:13.020 --> 00:06:15.800
review and then hopefully
everyone can get a chance to

86
00:06:15.800 --> 00:06:18.450
play around with some of these commands
because they're really fun, I think.

87
00:06:20.070 --> 00:06:26.320
So curl -s, again,
fetches Moby Dick from Project Gutenberg.

88
00:06:27.500 --> 00:06:31.800
It so happens that you get compressed
output to your terminal so

89
00:06:31.800 --> 00:06:36.280
you can pipe that to the gunzip commands,
which reads from standard in and

90
00:06:36.280 --> 00:06:40.850
prints the uncompressed
text to standard out.

91
00:06:40.850 --> 00:06:46.520
Then we have this little program here
that runs sed which does substitutions.

92
00:06:46.520 --> 00:06:51.371
So in this case /S means non,
or no, sorry,

93
00:06:51.371 --> 00:06:56.864
/ s means white space characters and
+ means one or

94
00:06:56.864 --> 00:07:03.730
more white space characters,
so that's what it matches.

95
00:07:03.730 --> 00:07:07.000
It replaces one or more white space
characters with a single new line.

96
00:07:08.090 --> 00:07:11.640
And the g means it does that for
every whitespace character that it finds,

97
00:07:11.640 --> 00:07:12.510
not just the first one.

98
00:07:13.600 --> 00:07:18.490
So if you want to play around with this
little sed thingie, you can sort of

99
00:07:18.490 --> 00:07:22.970
see what this program does in isolation
by typing in some data with echo.

100
00:07:22.970 --> 00:07:27.070
So here I have just some one two three,
whatever.

101
00:07:27.070 --> 00:07:30.700
And I can see that in fact
it works like I expect.

102
00:07:30.700 --> 00:07:35.600
That's a really nice thing about pipelines
in Unix is that you can always test

103
00:07:35.600 --> 00:07:40.520
what every piece does in isolation
before building something really big and

104
00:07:40.520 --> 00:07:41.070
complicated.

105
00:07:43.280 --> 00:07:46.030
So, that's what this little
piece of our pipeline does.

106
00:07:47.240 --> 00:07:52.019
There's also grep which
filters the output.

107
00:07:52.019 --> 00:07:57.755
So remember before we had all
of the words in Moby Dick and

108
00:07:57.755 --> 00:08:03.246
now if we put this rep piece
on the end of our pipeline,

109
00:08:03.246 --> 00:08:07.046
we only see words with whale in them.

110
00:08:09.726 --> 00:08:11.422
&gt;&gt; James Halliday: And then finally,

111
00:08:11.422 --> 00:08:16.080
wc -l will count the number
of lines in the output.

112
00:08:16.080 --> 00:08:18.580
So, we can count the number
of times that whale appears.

