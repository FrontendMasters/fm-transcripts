WEBVTT

1
00:00:00.000 --> 00:00:04.954
&gt;&gt; Steve Kinney: Let's go look at the same
basic approach, but now on the client,

2
00:00:04.954 --> 00:00:09.999
right and you will see the immediate
problem that we have to solve,

3
00:00:09.999 --> 00:00:14.078
which is, how do I get these
types over in the client?

4
00:00:14.078 --> 00:00:18.478
But for first,
we're gonna start with the most tried, and

5
00:00:18.478 --> 00:00:22.527
true method for
handling this which is copy and paste,

6
00:00:22.527 --> 00:00:27.281
which I'm just moving my problem
around in the very beginning,

7
00:00:27.281 --> 00:00:30.914
right we've got to figure
out how to share them.

8
00:00:30.914 --> 00:00:33.526
We'll talk about some of the different
strategies, we'll revisit those

9
00:00:33.526 --> 00:00:36.517
strategies, we'll undo some of those
strategies, entirely different strategy.

10
00:00:36.517 --> 00:00:40.878
But let's start with the very least
of just seeing the same basic

11
00:00:40.878 --> 00:00:43.718
concepts over on the other side, right?

12
00:00:43.718 --> 00:00:48.841
So we'll go over to the client,
and they're gonna hop over

13
00:00:48.841 --> 00:00:55.714
to C comes before S in alphabetical order
for those of you keeping track at home.

14
00:00:55.714 --> 00:01:00.213
So here we have this type that
I just randomly wrote out,

15
00:01:00.213 --> 00:01:05.286
which is not going to do us a lot
of good because it's accurate,

16
00:01:05.286 --> 00:01:09.309
but even partial task isn't
really what update or

17
00:01:09.309 --> 00:01:13.945
new are supposed to be,
it just happens to work, right?

18
00:01:13.945 --> 00:01:17.947
But like they're not actually accurate, so

19
00:01:17.947 --> 00:01:23.211
we could start out by pulling
the pulling in the same types,

20
00:01:23.211 --> 00:01:28.263
get rid of this, and
now what we could do is for instance,

21
00:01:28.263 --> 00:01:32.285
we could take this response.json, right?

22
00:01:32.285 --> 00:01:36.486
We could even say like just for fun,

23
00:01:36.486 --> 00:01:44.474
const task = await response.json
because that's the promise and

24
00:01:44.474 --> 00:01:49.955
then what we could do is say,
tasks, plural.

25
00:01:55.049 --> 00:01:59.178
&gt;&gt; Steve Kinney: And
then return those tasks.

26
00:02:03.652 --> 00:02:08.879
&gt;&gt; Steve Kinney: And this is currently
broken because I deleted that reference,

27
00:02:08.879 --> 00:02:11.212
it's is also like up there.

28
00:02:11.212 --> 00:02:16.055
So let's go ahead and make one based
on the schema just like we saw earlier.

29
00:02:16.055 --> 00:02:17.439
TypeScript does hoist things,

30
00:02:17.439 --> 00:02:20.936
so if you don't want them below, you can
also make them up here, it's up to you.

31
00:02:31.170 --> 00:02:36.217
&gt;&gt; Steve Kinney: Cool, and then we
can just replace this over here, and

32
00:02:36.217 --> 00:02:42.605
what's nice about this is we will
get the validation cuz this is now.

33
00:02:42.605 --> 00:02:45.909
Always is never any like before,
when we saw that initial slide in the very

34
00:02:45.909 --> 00:02:49.503
beginning, we were just saying, like,
yeah, it's totally a list of tasks.

35
00:02:49.503 --> 00:02:53.526
But that's because any will, like,
respect anything, and it might have been,

36
00:02:53.526 --> 00:02:54.705
it might not have been.

37
00:02:54.705 --> 00:03:01.118
Now, this fetch task will blow up if it's
not, and you're like, blowing up is bad.

38
00:03:01.118 --> 00:03:05.404
Blowing up is better than
suddenly being broken,

39
00:03:05.404 --> 00:03:11.741
right at least when you blow up,
you get a stack trace at an error, right?

40
00:03:11.741 --> 00:03:16.600
When things suddenly are weird and
broken, it's not as easy, right and

41
00:03:16.600 --> 00:03:21.141
then ideally, the next galaxy brain
move here there is obviously to

42
00:03:21.141 --> 00:03:26.019
then have tests to break the stuff
before it goes to production, right?

43
00:03:26.019 --> 00:03:29.080
It's like you're always testing,
either you're doing it manually, you have

44
00:03:29.080 --> 00:03:32.383
automated tests, or you're relying on your
users to do it, somebody's testing it.

45
00:03:32.383 --> 00:03:39.111
But in this case, we could even get
rid of this explicit return type,

46
00:03:39.111 --> 00:03:43.646
which are good when you're not sure,
right?

47
00:03:43.646 --> 00:03:48.741
And it's still the right thing now,
right always the right thing.

48
00:03:48.741 --> 00:03:52.469
If this thing ever gets something back,
that is not the right thing, we will know,

49
00:03:52.469 --> 00:03:55.988
and so we have confidence now that we're
not just guessing that it's tasks and

50
00:03:55.988 --> 00:03:57.449
just being like, sure, sure.

51
00:03:57.449 --> 00:04:02.665
It's tasks, like we know that it's
tasks because we validated it, right?

52
00:04:02.665 --> 00:04:05.993
As opposed to just like trusting,
like we verified.

53
00:04:05.993 --> 00:04:10.963
So now we have the same
approach works in both places.

