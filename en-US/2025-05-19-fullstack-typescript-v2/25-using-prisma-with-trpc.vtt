WEBVTT

1
00:00:00.015 --> 00:00:05.498
&gt;&gt; Steve Kinney: So now, ideally,
what we should be able to do is,

2
00:00:05.498 --> 00:00:13.082
we can do it, I guess we can do it on
the REST server or the TRPC server.

3
00:00:13.082 --> 00:00:16.138
I actually think doing this in
TRPC is going to be easy and

4
00:00:16.138 --> 00:00:17.709
there I just jinxed myself.

5
00:00:17.709 --> 00:00:22.236
Sue will import the Prisma

6
00:00:29.091 --> 00:00:31.113
&gt;&gt; Steve Kinney: From Prisma client, and

7
00:00:31.113 --> 00:00:36.118
we've got that in place, and
with any luck, actually,

8
00:00:36.118 --> 00:00:39.121
we don't want in this file, sorry.

9
00:00:39.121 --> 00:00:41.710
Only for one second?

10
00:00:41.710 --> 00:00:46.855
We want it in the context so I can pass
it in to all of those GRPC methods.

11
00:00:46.855 --> 00:00:51.773
We'll do it here and
with any luck we should see stuff like

12
00:01:01.097 --> 00:01:03.169
&gt;&gt; Steve Kinney: So not dissimilar from my

13
00:01:03.169 --> 00:01:05.345
little task client here.

14
00:01:05.345 --> 00:01:06.955
We can make a Prisma client.

15
00:01:06.955 --> 00:01:10.226
If I was really fancy,
I would probably just call it tasks, but

16
00:01:10.226 --> 00:01:11.787
we'll see, and hopefully.

17
00:01:14.443 --> 00:01:19.145
&gt;&gt; Steve Kinney: You can see that it's got
task on it as a method that it knows about

18
00:01:19.145 --> 00:01:19.765
About.

19
00:01:19.765 --> 00:01:20.609
That's interesting.

20
00:01:22.375 --> 00:01:24.992
&gt;&gt; Steve Kinney: And
if I go to task, look at this,

21
00:01:24.992 --> 00:01:29.110
all the things that I might
ever want to possibly do.

22
00:01:29.110 --> 00:01:35.627
Create, create many, create many and
return, so on and so forth, right?

23
00:01:35.627 --> 00:01:38.003
Those are all things that I can now do.

24
00:01:38.003 --> 00:01:42.839
For free, cuz all of the different
variations have been generated for me,

25
00:01:42.839 --> 00:01:43.386
right?

26
00:01:43.386 --> 00:01:48.738
So what I am able to do
at this point is we could

27
00:01:48.738 --> 00:01:54.171
say,
&gt;&gt; Steve Kinney: I

28
00:01:54.171 --> 00:01:56.785
was about to do something reckless.

29
00:01:56.785 --> 00:01:59.993
I'm not going to, but
then I'm gonna Going to later.

30
00:01:59.993 --> 00:02:06.670
Let's go ahead,
let's grab it here actually.

31
00:02:06.670 --> 00:02:08.234
I could argue for either way.

32
00:02:08.234 --> 00:02:12.231
We'll pass it into the context.

33
00:02:12.231 --> 00:02:18.896
And then now instead of
the tasks coming in,

34
00:02:18.896 --> 00:02:23.398
we can say, We'll just let my

35
00:02:23.398 --> 00:02:28.097
arrow key go from the context.

36
00:02:28.097 --> 00:02:35.861
And now we could return
prisma-task.findMany.

37
00:02:46.759 --> 00:02:47.576
&gt;&gt; Steve Kinney: Swap it out.

38
00:02:47.576 --> 00:02:54.348
And so the important part here is, there's
I don't have to do any Zod parsing.

39
00:02:54.348 --> 00:02:56.502
I don't have to do anything, right?

40
00:02:56.502 --> 00:02:58.510
It knows the schema of my database.

41
00:02:58.510 --> 00:03:03.164
It generated a client for
me that did all of that already.

42
00:03:03.164 --> 00:03:09.146
Right, and so here we've got return many.

43
00:03:09.146 --> 00:03:13.979
I wonder if I just swap it in
without changing any code on

44
00:03:13.979 --> 00:03:16.406
the client if it'll work.

45
00:03:16.406 --> 00:03:17.714
I literally don't know, actually.

46
00:03:17.714 --> 00:03:19.024
I'm not convinced it's going to.

47
00:03:19.024 --> 00:03:20.511
&gt;&gt; Speaker 2: It's a different database,
so it shouldn't.

48
00:03:20.511 --> 00:03:22.766
To get ready into one reading.

49
00:03:22.766 --> 00:03:24.744
&gt;&gt; Steve Kinney: But
even if the API is that compliant?

50
00:03:29.364 --> 00:03:34.006
&gt;&gt; Steve Kinney: Not totally,
but that part is also it's pro,

51
00:03:34.006 --> 00:03:37.825
no, it's a promise or was it return.

52
00:03:42.665 --> 00:03:44.412
&gt;&gt; Steve Kinney: It, It's interesting,
cuz it did not crash.

53
00:03:44.412 --> 00:03:48.039
&gt;&gt; Speaker 2: You're writing to one
database file and reading from another.

54
00:03:48.039 --> 00:03:49.759
&gt;&gt; Steve Kinney: That'll do it.

55
00:03:49.759 --> 00:03:51.623
I should probably finish what I started.

56
00:03:51.623 --> 00:03:56.018
Yeah, if I the whole thing,
will let me protect myself and

57
00:03:56.018 --> 00:03:59.799
make it a different database
you can write to one.

58
00:03:59.799 --> 00:04:06.493
So let's at least get the write,
read, cycle, go and how about that?

59
00:04:06.493 --> 00:04:11.788
So here we'll pull that in
off the context as well,

60
00:04:11.788 --> 00:04:15.369
and here we'll return and again.

61
00:04:15.369 --> 00:04:21.309
The nice part is the squiggly
lines will guide me create.

62
00:04:27.520 --> 00:04:28.859
&gt;&gt; Steve Kinney: And
again, no squiggly lines.

63
00:04:28.859 --> 00:04:30.501
I'm feeling pretty good, right?

64
00:04:30.501 --> 00:04:33.346
So we'll go ahead.

65
00:04:38.220 --> 00:04:38.960
&gt;&gt; Steve Kinney: Hey, it works.

66
00:04:38.960 --> 00:04:43.061
Obviously, edit and delete won't work, but
you can imagine not a lot I have to do.

