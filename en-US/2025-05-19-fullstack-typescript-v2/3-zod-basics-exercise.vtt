WEBVTT

1
00:00:00.000 --> 00:00:04.608
&gt;&gt; Steve Kinney: So let's do kind of
a tour of what we've got going on here,

2
00:00:04.608 --> 00:00:09.028
which is we've got an application
where most of our time

3
00:00:09.028 --> 00:00:13.843
today is gonna be spent in the client and
the server folders.

4
00:00:13.843 --> 00:00:18.448
Spoiler alert, one's an express app and
one's a react app is anything we're

5
00:00:18.448 --> 00:00:23.049
talking about specific to express or
react per se, no, but it is kind of like,

6
00:00:23.049 --> 00:00:26.747
I felt like the lowest common
denominator of things that like,

7
00:00:26.747 --> 00:00:29.644
even if you don't write
react all day every day.

8
00:00:29.644 --> 00:00:32.449
And again, we're not going to
touch a lot of the react code or

9
00:00:32.449 --> 00:00:33.714
express all day every day,

10
00:00:33.714 --> 00:00:37.580
you've probably seen enough of it before
to be at least somewhat familiar with it.

11
00:00:37.580 --> 00:00:41.682
We're not actually going to touch too much
of the action framework code itself, but

12
00:00:41.682 --> 00:00:45.288
we are just gonna have some stuff in
there to make it a little bit more real.

13
00:00:45.288 --> 00:00:49.476
We've got a shared folder for stuff we
wanna share between the two of them and

14
00:00:49.476 --> 00:00:53.995
then we have this like weird exercises
folder that shouldn't be in this repo, but

15
00:00:53.995 --> 00:00:57.291
like making you download two
repos felt rude so it's here.

16
00:00:57.291 --> 00:01:01.615
Which is where we're gonna start our life

17
00:01:01.615 --> 00:01:06.556
together in this exercises,
Zod folder here,

18
00:01:06.556 --> 00:01:12.980
where there are a bunch of little
exercises that definitely,

19
00:01:12.980 --> 00:01:17.196
right now, need some schemas, right?

20
00:01:17.196 --> 00:01:20.494
And so what we'll do is try
to get our hands dirty like,

21
00:01:20.494 --> 00:01:25.103
listening to me talk about schemas any
longer seems egregiously terrible.

22
00:01:25.103 --> 00:01:29.225
So why don't even if we're feeling like,
but I just learned about this,

23
00:01:29.225 --> 00:01:31.029
I'm not ready to, we can do it.

24
00:01:31.029 --> 00:01:34.752
I believe in you, also the answers
are like, right over here, and

25
00:01:34.752 --> 00:01:38.492
I will go after like, I will do it
along with you in a second as well.

26
00:01:38.492 --> 00:01:43.259
But like, you're not, you are in
a safe space to start playing around,

27
00:01:43.259 --> 00:01:45.136
getting your hands dirty but

28
00:01:45.136 --> 00:01:49.296
what we wanna do is we want to
take away the .todo here, right?

29
00:01:49.296 --> 00:01:53.872
And we're gonna do good old fashioned,
test driven development,

30
00:01:53.872 --> 00:01:58.122
where it will be a sea of red, and
we will seek to make it green and

31
00:01:58.122 --> 00:02:01.351
we will get a sense of that
as we go along as well.

32
00:02:01.351 --> 00:02:06.013
So from the main repo, like I said before,
there's a few, like, little kind of sub

33
00:02:06.013 --> 00:02:09.692
folders between our client side
app that we'll play around with,

34
00:02:09.692 --> 00:02:14.317
our server side app, some shared folder,
and this weird little exercise folder.

35
00:02:14.317 --> 00:02:18.431
So what we'll do is we'll head in,
you know,

36
00:02:18.431 --> 00:02:23.914
from the top I'll go into this exercises,
and then in there,

37
00:02:23.914 --> 00:02:28.868
I've got this Zod set of exercises,
and out of the box,

38
00:02:28.868 --> 00:02:34.364
if we just do NPM test,
not a lot happens in this case, right?

39
00:02:34.364 --> 00:02:36.452
We've got some passing ones, but

40
00:02:36.452 --> 00:02:39.699
the ones that we really want
are skip to this point up.

41
00:02:39.699 --> 00:02:44.473
Pro tip, if you only wanna run one file,

42
00:02:44.473 --> 00:02:49.670
you can kind of type in
some of the name of it,

43
00:02:49.670 --> 00:02:53.337
so we can do exercises.test.

44
00:02:53.337 --> 00:02:57.729
So right now, they're all skipped, which
is intentional, they are called .todo.

45
00:02:57.729 --> 00:03:03.470
This is all the test, didn't blow up
because we haven't done anything yet.

46
00:03:03.470 --> 00:03:08.041
So you can remove that, I put some little
mini ones in here, just to kind of like,

47
00:03:08.041 --> 00:03:12.210
slow myself down, you can do that,
you cannot do that it's up to you, but

48
00:03:12.210 --> 00:03:14.999
we'll kind of get each one
running one at a time.

49
00:03:14.999 --> 00:03:17.867
So like I said, by definition,

50
00:03:17.867 --> 00:03:23.089
this is going to fail because
one is not a zod schema at all.

51
00:03:23.089 --> 00:03:27.652
And typescript has nothing to say
about it because you said that it's,

52
00:03:27.652 --> 00:03:31.756
I said, we said, it was said that
we're gonna mark it as any, so

53
00:03:31.756 --> 00:03:34.209
this code will legit blow up, right?

54
00:03:34.209 --> 00:03:40.641
And in our test suite, any blow up
technically counts as a test failure,

55
00:03:40.641 --> 00:03:45.807
so going ahead, I can kind of
take this first sweet here and

56
00:03:45.807 --> 00:03:52.674
I'll remove the .todo, and we can see
it has blown up out of the box, right?

57
00:03:52.674 --> 00:03:55.777
There are some that are expected
to blow up, right, so

58
00:03:55.777 --> 00:03:57.742
we'll play that game in a second.

59
00:04:04.531 --> 00:04:08.801
&gt;&gt; Steve Kinney: So basically, we wanna
see is our basic schema should have,

60
00:04:08.801 --> 00:04:13.571
should be able to kind of work with
a type that has a name as a string and

61
00:04:13.571 --> 00:04:17.924
age is nothing but a number, but
that number should be at least

62
00:04:17.924 --> 00:04:22.475
a positive number, like you cannot
be negative five years old.

63
00:04:22.475 --> 00:04:27.446
You can act like it, but you probably
can't be it, so let's write our first

64
00:04:27.446 --> 00:04:32.280
odd schema together, which is, again,
we know this could be an object.

65
00:04:32.280 --> 00:04:37.225
And in this case, we can say,
yeah, name is a string and

66
00:04:37.225 --> 00:04:42.723
the age we can do, we have a few
options I'll show you a bunch.

67
00:04:42.723 --> 00:04:46.692
Let's make sure this passes first, okay,
it passes so we can say number, and

68
00:04:46.692 --> 00:04:50.605
we get a little bit more granularity
than TypeScript would normally give us,

69
00:04:50.605 --> 00:04:53.579
because like in TypeScript,
there is a type four number.

70
00:04:53.579 --> 00:05:00.680
That number could be a negative number, a
positive number, it could be 3.67, right?

71
00:05:00.680 --> 00:05:04.359
So Zod does give us the ability to put
some additional checks on top of that.

72
00:05:04.359 --> 00:05:08.953
So in this case, we can say it's a number,
it should be a whole number,

73
00:05:08.953 --> 00:05:12.110
an integer, and
it should be positive, right?

74
00:05:12.110 --> 00:05:16.678
Another way that you could do it,
you could say something like,

75
00:05:16.678 --> 00:05:22.103
mean is zero so that will at least get
you to the positive number right again.

76
00:05:22.103 --> 00:05:27.375
It all depends like, do you insist that
the age is an integer or not, right?

77
00:05:27.375 --> 00:05:32.469
I don't, personally, if I'm going
with the assignment as given, like,

78
00:05:32.469 --> 00:05:37.184
this technically fits the assignment,
but you could also do the INT.

79
00:05:37.184 --> 00:05:39.895
Yeah, and these are kind of just,

80
00:05:39.895 --> 00:05:44.850
as you can kind of see like
refinements on that initial number so

81
00:05:44.850 --> 00:05:49.429
as we can see, they all pass,
and just to kind of show you,

82
00:05:49.429 --> 00:05:54.758
I could say like type user z.infer,
and this is that utility type,

83
00:05:54.758 --> 00:05:59.680
I can say type of,
&gt;&gt; Steve Kinney: And

84
00:05:59.680 --> 00:06:03.428
so now if I look at this type, you can see
that I did a pretty good job of coming up

85
00:06:03.428 --> 00:06:05.422
with the Typescript type out of the box.

86
00:06:05.422 --> 00:06:09.498
All right, so our first initial,
we wrote our first odd schema,

87
00:06:09.498 --> 00:06:12.104
we're killing it, we're doing great.

88
00:06:12.104 --> 00:06:16.122
Awesome and so these all pass
we can go down to the next one.

89
00:06:16.122 --> 00:06:21.258
Okay, so for my next one,
I want to have an optional number, right?

90
00:06:21.258 --> 00:06:25.457
Okay, so let's go ahead and
get these failing, and

91
00:06:25.457 --> 00:06:30.039
we'll look at two different
ways we can go about this, so

92
00:06:30.039 --> 00:06:34.819
we can go ahead and again,
we know it's gonna be an object.

93
00:06:34.819 --> 00:06:40.101
And we know the names can be a string,
so a few things you can do here.

94
00:06:40.101 --> 00:06:44.917
That's a little more than I wanted for
the first pass in this case,

95
00:06:44.917 --> 00:06:48.792
but I like it and
we're going to talk about it anyway.

96
00:06:48.792 --> 00:06:54.008
So we're gonna say that name is a string,
number is again a positive integer,

97
00:06:54.008 --> 00:06:57.973
In this case,
we can also say that it's optional, right?

98
00:06:57.973 --> 00:07:02.755
And that if it doesn't exist, we do want
a default value to it, which is nice so

99
00:07:02.755 --> 00:07:06.595
it's like if that is not on there,
maybe zero is a fine answer,

100
00:07:06.595 --> 00:07:11.595
now the big question is like the logic of
whatever you're trying to implement that

101
00:07:11.595 --> 00:07:14.807
is either the behavior you want or
not the behavior.

102
00:07:14.807 --> 00:07:19.595
My job is just to show you that it's
an option and that you can do these kinds

103
00:07:19.595 --> 00:07:23.938
of things, we do have a failing test,
let's see which one fails.

104
00:07:29.746 --> 00:07:31.216
&gt;&gt; Steve Kinney: Interesting I have,
you know,

105
00:07:31.216 --> 00:07:33.780
I'll show you the one that I did earlier,
too, right?

106
00:07:33.780 --> 00:07:37.739
Because this is like the auto
complete one but this one we did not

107
00:07:37.739 --> 00:07:41.995
get the default is zero, I'm curious
it has to do with the chain, or

108
00:07:41.995 --> 00:07:44.782
what I have number min optional, default.

109
00:07:44.782 --> 00:07:47.768
Number, min, optional, default, all right,

110
00:07:47.768 --> 00:07:51.834
let's put it back in the middle there,
or the transform works too.

111
00:07:51.834 --> 00:07:54.030
Hey, hey we learned all,
we all learned something together,

112
00:07:54.030 --> 00:07:55.034
which is the order matters.

113
00:07:55.034 --> 00:08:00.088
Cool, so
now not only did we achieve the core

114
00:08:00.088 --> 00:08:04.869
part of having optional values in there,

115
00:08:04.869 --> 00:08:11.988
we also learned a little bit
about the ordering along the way.

116
00:08:11.988 --> 00:08:15.122
Cool, and so it goes through,
and it does all these things,

117
00:08:15.122 --> 00:08:18.883
third challenge, this is one where
we can reference other ones as well.

118
00:08:18.883 --> 00:08:23.423
One thing I do wanna show real
quick is again, I think I deleted

119
00:08:23.423 --> 00:08:28.047
that other type so we can see again
what the type is in this case,

120
00:08:28.047 --> 00:08:32.849
which you'll notice that it does
say that there is an age property

121
00:08:32.849 --> 00:08:36.203
because we fill it in with a default,
right?

122
00:08:36.203 --> 00:08:37.813
If I got rid of this.

123
00:08:41.547 --> 00:08:44.105
&gt;&gt; Steve Kinney: You can see that now
it is actually an optional prop in

124
00:08:44.105 --> 00:08:46.210
the type that was created as well, right?

125
00:08:46.210 --> 00:08:49.767
Because whatever gets parsed, when you
have a default value, you would have

126
00:08:49.767 --> 00:08:53.214
always got a number, so now TypeScript
is not gonna yell at you about like,

127
00:08:53.214 --> 00:08:56.442
are you sure this number is possibly
undefined and you're like, no,

128
00:08:56.442 --> 00:08:58.827
because I made a zero or
an object or whatever, so.

129
00:08:58.827 --> 00:09:02.661
When doing this, would you create
your types in just that way?

130
00:09:02.661 --> 00:09:06.492
It depends,
sometimes I already have the types, right?

131
00:09:06.492 --> 00:09:12.077
And so which way, I have to go the other
direction if I don't have the types,

132
00:09:12.077 --> 00:09:13.397
and yes, right?

133
00:09:13.397 --> 00:09:18.343
But sometimes, it's like the types were
for like, when we're gonna look at like,

134
00:09:18.343 --> 00:09:20.991
either open API slash swagger docs for
like,

135
00:09:20.991 --> 00:09:23.721
that will generate an API like schema for
you.

136
00:09:23.721 --> 00:09:27.616
Like, in some of those cases, you might
have the types from somewhere else, or you

137
00:09:27.616 --> 00:09:31.623
might have, especially if you're sending
it to like, if you have the types of like,

138
00:09:31.623 --> 00:09:34.486
a third party API or an SDK, or
something along those lines.

139
00:09:34.486 --> 00:09:36.435
You might have the types,
but not the schemas,

140
00:09:36.435 --> 00:09:38.872
if you don't have either,
then this will work, because,

141
00:09:38.872 --> 00:09:41.684
again, like you know, and
you can write tests against it, right?

142
00:09:41.684 --> 00:09:45.360
Are there ways to test types in like,
various testing frameworks, like V test?

143
00:09:45.360 --> 00:09:49.118
Yes, does anyone do them?

144
00:09:49.118 --> 00:09:51.696
No, do we more likely
test regular JavaScript?

145
00:09:51.696 --> 00:09:53.955
Absolutely, so it depends is the answer?

146
00:09:53.955 --> 00:09:58.778
[LAUGH] unfortunately,
which is the answer for a lot of things,

147
00:09:58.778 --> 00:10:03.601
so awesome, so yeah,
then like having ones that refer to other

148
00:10:03.601 --> 00:10:07.065
schemas like we kind of
talked about before.

149
00:10:07.065 --> 00:10:12.149
So we can go ahead and
I kind of have at least the end state that

150
00:10:12.149 --> 00:10:16.828
I'm looking for,
which is a person will have a name and

151
00:10:16.828 --> 00:10:21.428
then they will have some
array of addresses, right?

152
00:10:21.428 --> 00:10:25.054
And Typescripts or
Typescripts types are nice 'cause they

153
00:10:25.054 --> 00:10:28.691
are at all just kind of hoisted and
stuff along those lines.

154
00:10:28.691 --> 00:10:32.458
You do have to follow the rules of
JavaScript when writing JavaScript,

155
00:10:32.458 --> 00:10:34.230
which is order matters, right?

156
00:10:34.230 --> 00:10:36.803
You can't reference stuff
until it's defined,

157
00:10:36.803 --> 00:10:40.426
there are ways to do it we'll talk
about it, but we're not there yet.

158
00:10:40.426 --> 00:10:45.055
So an address schema seems
to have a city street, zip,

159
00:10:45.055 --> 00:10:48.286
apartment number that's optional.

160
00:10:48.286 --> 00:10:52.871
So we can kind of play with some
various options here as well, so

161
00:10:52.871 --> 00:10:57.725
we've got this object street part is easy,
the city part is easy.

162
00:10:57.725 --> 00:11:02.998
As you can see, you can say as
a string with a length of 5 you can

163
00:11:02.998 --> 00:11:10.018
then also provide a reject to make sure
that it's like 5 numbers, right as well.

164
00:11:10.018 --> 00:11:13.699
Which is nice because like you can't
really do that in typescriopt?

165
00:11:13.699 --> 00:11:18.130
You can say it should be 5 numbers for
those numbers could be lots and

166
00:11:18.130 --> 00:11:22.813
lots of digits, so like to say five
actual digits is kinda nice as well.

167
00:11:22.813 --> 00:11:28.208
And here we wanna say that it's optional,
and again you will get a type but

168
00:11:28.208 --> 00:11:34.061
the nice part is one schema can very very
very easily reference another schema.

169
00:11:34.061 --> 00:11:38.250
So in this case, we can say that
a user profile is a object, and

170
00:11:38.250 --> 00:11:41.474
it's gonna have the name,
that's a string and

171
00:11:41.474 --> 00:11:46.413
then an array, but you can see,
I'm just referencing the one address.

172
00:11:46.413 --> 00:11:50.778
I could just literally say that
address was, like, legit just point to

173
00:11:50.778 --> 00:11:55.164
the schema and like, those nested
objects will all just work, right?

174
00:11:55.164 --> 00:11:59.309
So if you find yourself,
you can reuse stuff,

175
00:11:59.309 --> 00:12:06.124
you can kind of compose one thing out
of another, so on and so forth, right?

176
00:12:06.124 --> 00:12:10.167
And so we go through, we make sure it
doesn't throw as we validate the things,

177
00:12:10.167 --> 00:12:11.163
so on and so forth.

178
00:12:11.163 --> 00:12:15.041
If we add one where it's that,
like too many numbers in it, or

179
00:12:15.041 --> 00:12:19.086
in this case too many obviously
it will fail, so on and so forth.

180
00:12:19.086 --> 00:12:23.971
Cool, moving on to this
idea of like a union and so

181
00:12:23.971 --> 00:12:29.452
in this case, right,
like we want to either the string

182
00:12:29.452 --> 00:12:34.112
literal anonymous or
an ID and a name, right?

183
00:12:34.112 --> 00:12:38.562
And so in this case, we could make
this one thing or not it's up to us.

184
00:12:38.562 --> 00:12:47.105
I'm actually gonna break it up into two
just to make my point, anonymous schema.

185
00:12:47.105 --> 00:12:51.019
This way it could be a literal so it's
like we're not saying that it's a string

186
00:12:51.019 --> 00:12:54.302
or an object, we're saying it
is literally the word anonymous.

187
00:12:54.302 --> 00:12:59.246
Or one of these other objects, I can
make that anonymous schema as well and

188
00:12:59.246 --> 00:13:04.111
then for the user identity,
I can do something like, actually, let's

189
00:13:04.111 --> 00:13:08.974
do a user schema as well and a different
way of doing this is the answers but

190
00:13:08.974 --> 00:13:13.080
I've decided I hate myself and
that I'm going to live code.

191
00:13:13.080 --> 00:13:18.073
And be a cowboy about this, so
here we'll say that the ID is a number and

192
00:13:18.073 --> 00:13:22.135
the name is a string, and so
what we could do in this case is

193
00:13:22.135 --> 00:13:26.563
literally say that this is
a union between those two, right.

194
00:13:26.563 --> 00:13:29.995
And again,
I've got to make sure I delete these so

195
00:13:29.995 --> 00:13:33.201
they don't conflict, but I think I'm good.

196
00:13:33.201 --> 00:13:37.442
Now, if we look at this,
it is either, that's user schema.

197
00:13:37.442 --> 00:13:42.561
I want user identity schema so
it's either the string

198
00:13:42.561 --> 00:13:47.235
anonymous or
the things I'm expecting it to be.

