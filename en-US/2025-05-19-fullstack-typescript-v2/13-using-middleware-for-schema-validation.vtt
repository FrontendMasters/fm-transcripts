WEBVTT

1
00:00:00.329 --> 00:00:05.688
&gt;&gt; Steve Kinney: What we want to do next
is figure out ways in which to get our

2
00:00:05.688 --> 00:00:11.495
application to not have to go and
find every single request and

3
00:00:11.495 --> 00:00:17.540
response right, because that's,
again, not just tedious.

4
00:00:17.540 --> 00:00:19.591
I do tedious things all the time.

5
00:00:19.591 --> 00:00:24.498
Error-prone, because if I miss one,
it's going to fall back to an any.

6
00:00:24.498 --> 00:00:29.512
Then if I apply this stuff but
I only apply it 80% of the way,

7
00:00:29.512 --> 00:00:35.987
that's better than not, but it's not
giving me that peace of mind and sanity.

8
00:00:35.987 --> 00:00:39.840
So there are some patterns, and again, we
will just and this point, lightly touch on

9
00:00:39.840 --> 00:00:43.116
them, cuz I don't want to get too much
into the weeds of express itself.

10
00:00:43.116 --> 00:00:46.190
But it is more like we will do it,
so then you can apply the pattern.

11
00:00:46.190 --> 00:00:49.105
Cuz none of these frameworks,
none of like,

12
00:00:49.105 --> 00:00:52.862
if you even look at what comes
out of next, or spell kit, or

13
00:00:52.862 --> 00:00:57.326
Hono, or what have you, all right,
they're all roughly the same.

14
00:00:57.326 --> 00:01:00.596
Which is you can use in this case,
in the case of Express,

15
00:01:00.596 --> 00:01:04.155
you can use middleware as well
to add some of that type safety.

16
00:01:04.155 --> 00:01:08.089
And effectively reusable middleware
to say hey, for all of these,

17
00:01:08.089 --> 00:01:12.930
I'm expecting various different things,
and give yourself some abstractions.

18
00:01:12.930 --> 00:01:17.332
So to do that, we're going to go back
into our little server land where we were

19
00:01:17.332 --> 00:01:18.697
before and like I said.

20
00:01:18.697 --> 00:01:23.211
This is actually a great example because
we didn't do it to every single thing

21
00:01:23.211 --> 00:01:23.775
in here.

22
00:01:23.775 --> 00:01:26.867
We did in that smaller example, and
you already got bored watching me there.

23
00:01:26.867 --> 00:01:30.788
So I'll spare you in here
because it's the same thing.

24
00:01:30.788 --> 00:01:35.283
But here we can actually take a little

25
00:01:35.283 --> 00:01:40.220
bit more of a one level higher approach.

26
00:01:40.220 --> 00:01:46.355
Which is, again, you can have middleware
either for entire parts of the app, right,

27
00:01:46.355 --> 00:01:51.417
and or you can just do it on a given
route depending on what you want to do.

28
00:01:51.417 --> 00:01:56.341
Or mix and match places that you will see
Middleware normally used a lot is stuff

29
00:01:56.341 --> 00:01:59.336
like, if it is you need to be logged in,
right?

30
00:01:59.336 --> 00:02:03.594
You can have some middleware which checks
to see if they have an auth token.

31
00:02:03.594 --> 00:02:04.885
And in some cases,

32
00:02:04.885 --> 00:02:09.911
we'll fill in the current user onto
that local thing that we said before.

33
00:02:09.911 --> 00:02:14.311
So you do request.user and
actually get a real user versus either

34
00:02:14.311 --> 00:02:17.838
just the auth token or
something along those lines.

35
00:02:17.838 --> 00:02:22.308
And then you can then reuse
that across many routes, right?

36
00:02:22.308 --> 00:02:26.104
Or everything under a certain route,
so on and so forth, right?

37
00:02:26.104 --> 00:02:33.089
You can do the same thing
with this as well, right?

38
00:02:33.089 --> 00:02:36.859
You can do the same thing with like
middleware to like validate your types.

39
00:02:36.859 --> 00:02:42.658
Right, which is again, make a bunch of
assumptions on every request that comes

40
00:02:42.658 --> 00:02:47.674
through this so that by the time we
get to the part of the code we write,

41
00:02:47.674 --> 00:02:50.286
all of that has been handled for us.

42
00:02:50.286 --> 00:02:53.623
So, like the dumbest middleware, right,

43
00:02:53.623 --> 00:02:59.146
is dumbest middleware.

44
00:02:59.146 --> 00:03:01.009
&gt;&gt; Steve Kinney: We're lowercasing the w.

45
00:03:06.149 --> 00:03:10.731
&gt;&gt; Steve Kinney: Is this.

46
00:03:10.731 --> 00:03:14.944
The first part of the Middleware looks
exactly like the request, right?.

47
00:03:14.944 --> 00:03:19.819
Okay, and
then it has this next function, right?

48
00:03:19.819 --> 00:03:23.626
And that says okay,
now move on to the next part of the chain.

49
00:03:23.626 --> 00:03:28.825
And the way that you would use it is for
instance, you would pop it in here.

50
00:03:28.825 --> 00:03:32.985
And so when they get to the get test,
first, it would go through this dumbest

51
00:03:32.985 --> 00:03:37.290
middleware, hit next, and then move on
to the next part of the chain, right?

52
00:03:37.290 --> 00:03:41.192
And so
what we can do here is start to make some

53
00:03:41.192 --> 00:03:45.313
assumptions about what we're working with.

54
00:03:45.313 --> 00:03:49.511
And so one thing I'm gonna do real quick
is you get a lot better typing if you go

55
00:03:49.511 --> 00:03:51.355
in the opposite direction here.

56
00:03:51.355 --> 00:03:55.665
We just say that this
is a request handler,

57
00:03:55.665 --> 00:04:00.692
cuz now you can see,
it does get the request type,

58
00:04:00.692 --> 00:04:04.664
the response type, and the next type.

59
00:04:04.664 --> 00:04:09.855
So, what we could do for instance,

60
00:04:09.855 --> 00:04:16.259
let's say this is, validate CreateUser,

61
00:04:16.259 --> 00:04:20.078
that seems good, right?

62
00:04:20.078 --> 00:04:28.794
We could say,
&gt;&gt; Steve Kinney: We'll

63
00:04:28.794 --> 00:04:35.963
have a try-catch block where we will try
to make sure that this request body,

64
00:04:35.963 --> 00:04:42.828
we'll just Store in a variable here for
a second, is actually a new user.

65
00:04:42.828 --> 00:04:47.674
Are too many different examples, validate,

66
00:04:47.674 --> 00:04:53.637
create task is what we're doing here,
and that this is,

67
00:04:53.637 --> 00:04:58.497
in fact, a task if so,
move on to the next one.

68
00:04:58.497 --> 00:05:03.735
Otherwise, go ahead and throw an error.

69
00:05:03.735 --> 00:05:06.877
So now we know by
the time that it will get

70
00:05:06.877 --> 00:05:11.275
to the post request that it
ought to have been checked.

71
00:05:11.275 --> 00:05:15.971
We'll see what happens in a second.

72
00:05:15.971 --> 00:05:18.692
Cool and so where's that post request?

73
00:05:18.692 --> 00:05:24.477
Here it is, and
we just pop that middleware in right here,

74
00:05:24.477 --> 00:05:29.096
and request hasn't really changed, right?

75
00:05:29.096 --> 00:05:33.046
Which is a bummer, but
we could do is like, add some again,

76
00:05:33.046 --> 00:05:34.715
that type annotations.

77
00:05:34.715 --> 00:05:37.294
Gotta get rid of the dumbest middleware.

78
00:05:37.294 --> 00:05:37.877
It's gone.

79
00:05:37.877 --> 00:05:41.538
There is no more dumbest middleware.

80
00:05:41.538 --> 00:05:48.144
Is in here, effectively there
are defaults for all of this type stuff.

81
00:05:48.144 --> 00:05:50.074
So yeah, it's cool.

82
00:05:50.074 --> 00:05:54.338
This is the middleware that keeps
everything as chaotic as it was.

83
00:05:54.338 --> 00:05:57.161
Right, but what we can do is say,
actually, no,

84
00:05:57.161 --> 00:06:01.334
this is a request handler and
unfortunately, to get to the request body,

85
00:06:01.334 --> 00:06:05.398
you've got to get through the path
params and the response body first.

86
00:06:05.398 --> 00:06:10.081
I don't make the rules,
what we can do is we can,

87
00:06:10.081 --> 00:06:16.023
it's going to yell at me because
it's not going to like that,

88
00:06:16.023 --> 00:06:18.557
that was the path params.

89
00:06:18.557 --> 00:06:24.522
And then I'm going to
go with an unknown for

90
00:06:24.522 --> 00:06:29.494
the response body and I'm gonna say

91
00:06:29.494 --> 00:06:34.299
that the request body is going to be

92
00:06:34.299 --> 00:06:38.787
that create task type, right?

93
00:06:38.787 --> 00:06:46.158
And other than some poor choices over
in there, what are we angry about?

94
00:06:46.158 --> 00:06:50.565
Otherwise, yeah, it doesn't like this,
but and like that, but

95
00:06:50.565 --> 00:06:53.095
we'll leave that alone for a second.

96
00:06:53.095 --> 00:06:57.731
If we look, we just actually grabbed we

97
00:06:57.731 --> 00:07:02.090
can just get rid of this completely.

98
00:07:08.047 --> 00:07:11.012
&gt;&gt; Steve Kinney: Look at that task
is what it is supposed to be,

99
00:07:11.012 --> 00:07:15.773
right because we have this middleware
called validate Create task, and

100
00:07:15.773 --> 00:07:19.067
it passed through and
checked everything right.

101
00:07:19.067 --> 00:07:23.717
And so now we can define just like these
middleware that we need right, and

102
00:07:23.717 --> 00:07:28.747
then any route that uses the middleware,
everything will be correctly typed.

103
00:07:28.747 --> 00:07:31.082
And we don't have to find
this all over the place.

