WEBVTT

1
00:00:00.071 --> 00:00:02.995
&gt;&gt; Steve Kinney: So
then there are more advanced use cases.

2
00:00:02.995 --> 00:00:06.789
So why don't we spend another few minutes
we're gonna dig into the other ones,

3
00:00:06.789 --> 00:00:09.447
because like, at that point,
we will stop with the like

4
00:00:09.447 --> 00:00:13.095
training ground of Zod schemas, and
we'll actually put it into practice.

5
00:00:13.095 --> 00:00:16.578
But I think like getting
our sea legs under us and

6
00:00:16.578 --> 00:00:19.813
then taking a run at it
in the real world app.

7
00:00:19.813 --> 00:00:23.774
Application, we will be better
prepared in our journey together.

8
00:00:23.774 --> 00:00:28.599
So like I said, before you've got
my notes, you've got the docs,

9
00:00:28.599 --> 00:00:33.254
we'll do it together, and
I'll show you some of my feels on what I

10
00:00:33.254 --> 00:00:37.334
thought of all of the advanced
ones were the most useful.

11
00:00:37.334 --> 00:00:40.975
You might need other ones in there and
have to like in your day-to-day life.

12
00:00:40.975 --> 00:00:42.955
But these were from, again,

13
00:00:42.955 --> 00:00:48.027
the very scientific way that I reflected
on who's hurt me at 2 in the morning

14
00:00:48.027 --> 00:00:52.876
by changing arrays into null back
in engineers, it's never the tools.

15
00:00:52.876 --> 00:00:55.958
These are the ones that I find
myself reaching for the most.

16
00:00:55.958 --> 00:00:59.367
So take a look and
then we will try it out together.

17
00:01:05.236 --> 00:01:07.939
&gt;&gt; Steve Kinney: All right, so
we covered some of the basics together.

18
00:01:07.939 --> 00:01:12.793
There are, again, my small selection based

19
00:01:12.793 --> 00:01:17.518
on feels of what some of
the more esoteric but

20
00:01:17.518 --> 00:01:23.281
useful enough that I felt
compelled to include them.

21
00:01:23.281 --> 00:01:28.949
Schemas going through every single
one of them would be boring, right?

22
00:01:28.949 --> 00:01:33.722
And so
kinda take a look at a few of these.

23
00:01:33.722 --> 00:01:38.332
One of the problems that we
have is JavaScript is hard.

24
00:01:38.332 --> 00:01:44.862
Shocker, and so if we wanted to have
a category that could have subcategories,

25
00:01:44.862 --> 00:01:49.742
we're gonna come up with
a little bit of a problem, right?

26
00:01:49.742 --> 00:01:53.341
So I could try to do something, and

27
00:01:53.341 --> 00:01:59.064
that's because I kinda hit
the answer in here as well.

28
00:01:59.064 --> 00:02:00.459
No, don't give me the answer yet.

29
00:02:00.459 --> 00:02:05.712
I'm trying to make a point
where we have an object,

30
00:02:05.712 --> 00:02:11.453
where the name is a string,
and then like I said before,

31
00:02:11.453 --> 00:02:15.743
we can reference other schemas, right?

32
00:02:15.743 --> 00:02:22.843
And that is normally a AOK
way to handle this, right?

33
00:02:24.769 --> 00:02:27.549
&gt;&gt; Steve Kinney: Category schema.

34
00:02:32.429 --> 00:02:34.604
&gt;&gt; Steve Kinney: The problem
is not a Zod problem.

35
00:02:34.604 --> 00:02:38.652
The problem is JavaScript angry with me,
right?

36
00:02:38.652 --> 00:02:42.269
It's like you can't use
it before it was defined,

37
00:02:42.269 --> 00:02:47.669
because it's evaluating at this point
before it assigns it there, right?

38
00:02:47.669 --> 00:02:51.652
So it's like, you can't use
this cuz it's not defined yet,

39
00:02:51.652 --> 00:02:55.107
cuz you're currently in
the process of defining it.

40
00:02:55.107 --> 00:03:01.699
So we need to do is figure out
a way to tell Zod to wait a second.

41
00:03:01.699 --> 00:03:07.426
Cuz you wait a second,
then it will be defined.

42
00:03:07.426 --> 00:03:10.818
And so, again, the hint is
hiding literally in plain sight.

43
00:03:10.818 --> 00:03:17.932
What we can do here is say z.lazy,
which takes a function, right?

44
00:03:17.932 --> 00:03:24.810
And just in the nature of the way that
JavaScript works this will be defined,

45
00:03:24.810 --> 00:03:28.798
and then it will call the function, right?

46
00:03:28.798 --> 00:03:33.675
And so at that point, category schema
is now, in this case, defined, right?

47
00:03:33.675 --> 00:03:35.742
And so also,
if you want an array of something,

48
00:03:35.742 --> 00:03:37.966
which I should have probably
put in the basics, but

49
00:03:37.966 --> 00:03:41.141
didn't think about until just now,
but we did it anyway, it's great.

50
00:03:41.141 --> 00:03:45.220
So now you can kinda have this thing
where you can have a self-referential,

51
00:03:45.220 --> 00:03:47.017
recursive version of it as well.

52
00:03:47.017 --> 00:03:51.105
You just have to, yeah, if you don't have
the value just yet, wait a second, and

53
00:03:51.105 --> 00:03:53.136
then JavaScript will figure it all out.

54
00:03:53.136 --> 00:03:55.244
Let's take off that to do.

55
00:03:55.244 --> 00:04:00.255
And it's gonna blow up on me, because
I've got all those other describes,

56
00:04:00.255 --> 00:04:05.518
so I'm just gonna there's only five in
this challenge, so that'll be great.

57
00:04:05.518 --> 00:04:09.280
Multi cursor is for the win.

58
00:04:09.280 --> 00:04:14.834
Great, I'm only running
that previous test file,

59
00:04:14.834 --> 00:04:18.198
so that Zod exercise is advanced.

60
00:04:18.198 --> 00:04:21.004
All right, so that one passes,
and we're good to go and again.

61
00:04:21.004 --> 00:04:24.614
Just to make my point,
cuz I think it's worth a while.

62
00:04:33.577 --> 00:04:37.933
&gt;&gt; Steve Kinney: For the ones who
are lazy, we can't do it for you, so

63
00:04:37.933 --> 00:04:42.198
then you do need to give
a little bit of hint as well.

64
00:04:42.198 --> 00:04:44.868
And I'm trying to remember how
to do it off the top of my head.

65
00:04:49.818 --> 00:04:51.937
&gt;&gt; Steve Kinney: This point,
you might need to know the type first.

66
00:04:51.937 --> 00:04:53.991
I will look it up a second.

67
00:04:53.991 --> 00:04:55.717
I've done it enough times before, but

68
00:04:55.717 --> 00:04:58.446
I'm now forgetting exactly how
to do it off the top of my head.

69
00:04:58.446 --> 00:05:04.335
So we've got that one, and okay, so
the other one that's kinda interesting

70
00:05:04.335 --> 00:05:09.964
is something where we might wanna
preprocess the data a little bit first.

71
00:05:09.964 --> 00:05:16.787
And so the challenge here, if I scroll
up and look a little bit closer,

72
00:05:16.787 --> 00:05:22.916
is I want it to either be this object
that I think makes a schema or

73
00:05:22.916 --> 00:05:28.030
like a JSON string that is
also could be that object.

74
00:05:28.030 --> 00:05:28.893
Do you know what I mean?

75
00:05:28.893 --> 00:05:34.303
So either the object or the JSON
representation of that object, right?

76
00:05:34.303 --> 00:05:38.308
And I need to do some amount of
pre-processing to try to like,

77
00:05:38.308 --> 00:05:42.786
if it's a string, try to turn it
into an object and then validate it.

78
00:05:42.786 --> 00:05:45.655
So now what's really cool is you can,
kinda like,

79
00:05:45.655 --> 00:05:47.936
save yourself the JSON parses, right?

80
00:05:47.936 --> 00:05:49.199
You can just put in the schema.

81
00:05:49.199 --> 00:05:53.181
Now it'll either be the object or
the string that represents the object.

82
00:05:53.181 --> 00:05:57.562
Either is fine, you will get the object
at the end as you processed it,

83
00:05:57.562 --> 00:05:59.354
it will have the right type.

84
00:05:59.354 --> 00:06:02.988
You will save yourself
a whole lot of other sadness.

85
00:06:02.988 --> 00:06:08.897
So let's take a look at
how that might work.

86
00:06:08.897 --> 00:06:13.693
So we've got the z dot pre-process, and

87
00:06:13.693 --> 00:06:21.646
that starts out with a function
that's gonna take something right.

88
00:06:21.646 --> 00:06:27.049
In this case, we've got an input unknown,
cuz I don't know what it is just yet,

89
00:06:27.049 --> 00:06:32.370
and I am kinda insisting right now that it
is, I did this looking at my own notes,

90
00:06:32.370 --> 00:06:35.568
that starts and close,
like that is an object.

91
00:06:35.568 --> 00:06:38.394
I'm not sure that that's
incredibly important.

92
00:06:38.394 --> 00:06:43.536
Cuz theoretically,
this will throw if it wasn't valid JSON,

93
00:06:43.536 --> 00:06:47.427
and maybe I was just being
a little over the top.

94
00:06:47.427 --> 00:06:49.344
We'll experiment that together.

95
00:06:49.344 --> 00:06:51.991
I've already gone off the script
enough times and suffered, so

96
00:06:51.991 --> 00:06:54.847
we're gonna stick to the script,
and then I'm gonna go off script.

97
00:06:54.847 --> 00:06:57.198
It's gonna be great.

98
00:06:57.198 --> 00:07:00.307
So we've got the ability
to pre process it, and

99
00:07:00.307 --> 00:07:04.836
then I wanna make sure that it is
that thing that I think it is, right?

100
00:07:04.836 --> 00:07:10.255
So that I wanna say that it's
like in this case, what is it?

101
00:07:10.255 --> 00:07:11.509
What am I expecting it to be?

102
00:07:11.509 --> 00:07:14.192
Let me check my own test.

103
00:07:14.192 --> 00:07:20.148
Cool, should be an object
with the type JSON,

104
00:07:20.148 --> 00:07:23.978
the data value 42, great.

105
00:07:31.417 --> 00:07:36.734
&gt;&gt; Steve Kinney: So we'll say z.object and
the type, I believe,

106
00:07:36.734 --> 00:07:43.947
yeah, type is literal, JSON, and
the date is a value of a number and

107
00:07:43.947 --> 00:07:49.277
I got close my curly braces or
regular, awesome.

108
00:07:49.277 --> 00:07:53.492
And so basically, all I'm doing,
I think I can get rid of this part,

109
00:07:53.492 --> 00:07:58.362
we'll find out together, is if it is
a string, parse it as JSON first, right,

110
00:07:58.362 --> 00:08:00.645
and then go check the object itself.

111
00:08:00.645 --> 00:08:03.049
So now it'll kinda hopefully work for
both,

112
00:08:03.049 --> 00:08:05.526
we'll find out together
if I made a boo-boo.

113
00:08:11.120 --> 00:08:15.030
&gt;&gt; Steve Kinney: Cool, didn't skip,
so, yeah, we should be good.

114
00:08:15.030 --> 00:08:18.148
&gt;&gt; Speaker 2: Your top describe has to do.

115
00:08:18.148 --> 00:08:20.807
&gt;&gt; Steve Kinney: Where,
I thought I got rid of that one?

116
00:08:20.807 --> 00:08:23.125
We're gonna find out.

117
00:08:23.125 --> 00:08:23.935
Did I add it back?

118
00:08:23.935 --> 00:08:25.515
Why did I do that?

119
00:08:25.515 --> 00:08:28.182
This is why you live code
with all your friends.

120
00:08:28.182 --> 00:08:33.090
So, which one is failing?

121
00:08:38.657 --> 00:08:42.038
&gt;&gt; Steve Kinney: All right, yeah, an
actual one that should be found because I

122
00:08:42.038 --> 00:08:44.847
didn't get to it yet, so
you'll love to see that.

123
00:08:44.847 --> 00:08:47.493
I can have a prefix,

124
00:08:47.493 --> 00:08:52.640
that test seems like a little bit much.

125
00:08:52.640 --> 00:08:56.485
Let's find out if I could have,
this whole time,

126
00:08:56.485 --> 00:08:59.608
not checked anything about the string.

127
00:08:59.608 --> 00:09:07.913
So, I gotta at least checked that
it is a string in this case.

128
00:09:07.913 --> 00:09:14.280
But I don't think I need to check for the
curly braces cuz it will pass this phase,

129
00:09:14.280 --> 00:09:19.338
but I think that the scheme of
validation afterwards will fail,

130
00:09:19.338 --> 00:09:21.229
or I did it for a reason.

131
00:09:21.229 --> 00:09:23.027
Yeah, so you can just parse it first.

132
00:09:23.027 --> 00:09:25.678
So if it's a string, pass it,
move it on through, and

133
00:09:25.678 --> 00:09:28.807
then we're gonna check the object
that comes out the other end.

134
00:09:28.807 --> 00:09:33.708
The test that failed is apparently
a previous version of me wanting to

135
00:09:33.708 --> 00:09:38.691
make a union where something could
also start with the string prefix,

136
00:09:38.691 --> 00:09:42.765
which is probably why I made
it more complicated as well.

137
00:09:42.765 --> 00:09:49.097
So I'm trying to think if there are other
fun ones that we need to look at.

138
00:09:49.097 --> 00:09:53.022
Yeah, so
this is sometimes you need to do something

139
00:09:53.022 --> 00:09:57.055
asynchronous to figure out if it's valid,
right?

140
00:09:57.055 --> 00:10:02.106
The example I came up with is if it
was a form, you wanna be able to see

141
00:10:02.106 --> 00:10:07.268
if it's a valid username by checking
to see that username is taken.

142
00:10:07.268 --> 00:10:12.287
In this case,
I will have just a silly little function

143
00:10:12.287 --> 00:10:16.973
that returns a promise cuz
it's an async function

144
00:10:16.973 --> 00:10:22.008
that will tell me whether or
not it's taken, right?

145
00:10:22.008 --> 00:10:24.935
But this could be hitting the API,
something along those lines.

146
00:10:24.935 --> 00:10:26.439
When would you use this one?

147
00:10:26.439 --> 00:10:31.688
Most likely like form validation or maybe
to see that like is that ID taken already?

148
00:10:31.688 --> 00:10:35.342
Something where you need to confirm
what's the source of truth,

149
00:10:35.342 --> 00:10:39.071
whether or not it's valid beforehand or
anything asynchronous.

150
00:10:39.071 --> 00:10:42.722
Which theoretically, I guess you
could also go fetch that data and

151
00:10:42.722 --> 00:10:44.297
then check it all yourself.

152
00:10:44.297 --> 00:10:46.204
But then again, now you have the schema.

153
00:10:46.204 --> 00:10:47.291
It will go check the thing.

154
00:10:47.291 --> 00:10:48.776
You will be happy.

155
00:10:48.776 --> 00:10:50.933
Life will be great.

156
00:10:50.933 --> 00:10:55.541
So in this case,
what we can do is we can go and

157
00:10:55.541 --> 00:11:02.280
of just use refine to kinda get
a sense of whether or not it works.

158
00:11:02.280 --> 00:11:06.775
So what we'll do is first we do need
to make sure it's a string, right?

159
00:11:06.775 --> 00:11:08.946
That seems totally fair.

160
00:11:08.946 --> 00:11:14.083
And so we'll say z.string,
and then we'll refine

161
00:11:14.083 --> 00:11:21.451
with a asynchronous function to make
sure that that username is not taken.

162
00:11:21.451 --> 00:11:22.913
Again, this would call an API.

163
00:11:22.913 --> 00:11:26.778
I did not set this up,
an entire server for this as well.

164
00:11:26.778 --> 00:11:29.736
Let's make sure that passes, great.

165
00:11:29.736 --> 00:11:31.321
And so now you can do asynchronous things.

166
00:11:31.321 --> 00:11:32.287
You can validate.

167
00:11:32.287 --> 00:11:36.571
Most useful thing there is the parts
where you might do form validation or

168
00:11:36.571 --> 00:11:39.379
someone's lines, but
I could come up, I could

169
00:11:39.379 --> 00:11:43.831
definitely riff on different places I
would use in the server side as well.

170
00:11:43.831 --> 00:11:47.732
All the places that I have used it
are very, very bespoke and weird,

171
00:11:47.732 --> 00:11:49.244
not worth talking about.

172
00:11:49.244 --> 00:11:51.327
But it comes up.

173
00:11:51.327 --> 00:11:53.696
You can look at some of the errors
I kinda in the name of brevity.

174
00:11:53.696 --> 00:11:59.462
The one that I also wanna get to is
the one I talked to in the beginning,

175
00:11:59.462 --> 00:12:04.144
which is again,
the answers are hiding in plain sight.

176
00:12:04.144 --> 00:12:09.425
But the ability to use this coerce first,
which is to say, if this case,

177
00:12:09.425 --> 00:12:14.722
now, if it's anything that can coerce
into a number, it'll be valid.

178
00:12:14.722 --> 00:12:21.688
So, the number 100 will be, or
just as valid as the string 100, right?

179
00:12:21.688 --> 00:12:28.621
Because query params are always strings,
even in the browser or in Express.

180
00:12:28.621 --> 00:12:30.844
And lot of times,
you'd be then casting them.

181
00:12:30.844 --> 00:12:32.839
And you're kinda a lot of times hoping for

182
00:12:32.839 --> 00:12:35.518
the best when you put a plus
sign in front of the string and

183
00:12:35.518 --> 00:12:39.052
just hope it turns into a number, or,
a parse int, and hope for the best,

184
00:12:39.052 --> 00:12:43.045
hope it's not NaN, which will technically
be a type of number, so on and so forth.

185
00:12:43.045 --> 00:12:47.787
So like, in this case,
it'll allow you to say again, 01,

186
00:12:47.787 --> 00:12:50.356
will coerce into true and false.

187
00:12:50.356 --> 00:12:54.805
If you're looking for a Boolean,
like a string that matches the number,

188
00:12:54.805 --> 00:12:58.629
it does all this stuff where it's like,
sure, close enough.

189
00:12:58.629 --> 00:13:02.925
But, as long as it can become the thing,
and the nice part is you will get the,

190
00:13:02.925 --> 00:13:03.865
the number out.

191
00:13:03.865 --> 00:13:06.127
In this case, you'll get the Boolean.

192
00:13:06.127 --> 00:13:07.629
It will fix everything.

193
00:13:07.629 --> 00:13:08.541
And this can work the other way.

194
00:13:08.541 --> 00:13:13.610
If you say z.coerce.string, and
you pass in the number two,

195
00:13:13.610 --> 00:13:18.016
it'll pass, and
you'll get the string too, right?

196
00:13:18.016 --> 00:13:23.356
So a nice little
convenience method as well.

197
00:13:23.356 --> 00:13:26.537
Cool, as you can see,
it doesn't throw on a string 150.

198
00:13:26.537 --> 00:13:33.458
It does in this case throw on
50 cuz that's less than 100.

199
00:13:33.458 --> 00:13:37.886
So you kinda got a whole bunch of stuff
for free in one very simple line of code

200
00:13:37.886 --> 00:13:40.574
and again it will throw
if you give it a b and c.

201
00:13:40.574 --> 00:13:44.553
So numbers that are number-ish, and
you can validate it based on his

202
00:13:44.553 --> 00:13:48.130
number-ishness, that's a technical term,
we'll pass.

