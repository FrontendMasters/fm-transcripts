WEBVTT

1
00:00:00.000 --> 00:00:04.769
&gt;&gt; Steve Kinney: So let's start to, like,
explore a little bit on this idea of

2
00:00:04.769 --> 00:00:09.656
how can we make sure things
are the way that they are at runtime?

3
00:00:09.656 --> 00:00:15.112
And one of the strategies for doing that
is something called a type guard, right?

4
00:00:15.112 --> 00:00:19.735
And this is just a native
TypeScript thing that you can do.

5
00:00:19.735 --> 00:00:22.343
I have done and
the problem is that it works,

6
00:00:22.343 --> 00:00:27.139
especially if you decide that something's
going to be unknown rather than any,

7
00:00:27.139 --> 00:00:30.187
because the goal is to try
to get all the any's out.

8
00:00:30.187 --> 00:00:35.921
Any any is an insist like it will go and
just pollute literally everything.

9
00:00:35.921 --> 00:00:38.534
So sometimes it'll be like,
okay, I'm gonna call it unknown.

10
00:00:38.534 --> 00:00:43.307
Well, then you have to ask
literally everything about it.

11
00:00:43.307 --> 00:00:44.999
It doesn't know what type it is,
doesn't know anything about it.

12
00:00:44.999 --> 00:00:52.251
And even in the simple use case that I
can fit on a slide, it gets ridiculous.

13
00:00:52.251 --> 00:00:58.729
So let's say, hey, I got
an individual task from my todo list.

14
00:00:58.729 --> 00:01:02.518
Because, spoiler alert,
it's gonna be a to-do list, right?

15
00:01:02.518 --> 00:01:05.870
Because did I try to come up with
something that wasn't a to-do list?

16
00:01:05.870 --> 00:01:08.384
Everything is really a to-do list
at the end of the day, right?

17
00:01:08.384 --> 00:01:11.818
All apps, everything you work on that's
super sophisticated, is really just

18
00:01:11.818 --> 00:01:15.370
a to-do list at the end of the day, maybe
a set of to-do lists, so on and so forth.

19
00:01:15.370 --> 00:01:19.746
But there's a reason why it is the example
that we use for everything all the time.

20
00:01:19.746 --> 00:01:21.691
So a given task.

21
00:01:21.691 --> 00:01:26.249
Well, we need to make sure, we gotta
figure out that it's an actual task.

22
00:01:26.249 --> 00:01:31.081
And JavaScript, the wonderful programming
language that I use every day is not

23
00:01:31.081 --> 00:01:33.184
doing us any favors here, right?

24
00:01:33.184 --> 00:01:37.838
We could say something it
should be an object, right?

25
00:01:37.838 --> 00:01:38.891
Let's try to round it down.

26
00:01:38.891 --> 00:01:40.416
Should be an object.

27
00:01:40.416 --> 00:01:41.268
If it's not an object.

28
00:01:41.268 --> 00:01:43.271
Then it's not a task, right?

29
00:01:43.271 --> 00:01:45.003
But technically null.

30
00:01:45.003 --> 00:01:48.033
If you do type of null,
guess what null is.

31
00:01:48.033 --> 00:01:50.033
It's an object, right?

32
00:01:50.033 --> 00:01:53.291
So you also have to make sure it's not
you have to make sure it's an object,

33
00:01:53.291 --> 00:01:55.275
and you also have to
make sure it's not null.

34
00:01:55.275 --> 00:01:57.847
You'd be like, could I just like,
make sure it was like,

35
00:01:57.847 --> 00:02:00.381
not falsely in the beginning,
yet, you can do that too.

36
00:02:00.381 --> 00:02:02.231
And then for every property.

37
00:02:02.231 --> 00:02:05.648
You've got to make sure that is
what you think it is, right?

38
00:02:05.648 --> 00:02:08.837
And if it's not, then you don't
have the thing you think you do.

39
00:02:08.837 --> 00:02:15.636
And again, it is we are lucky on the day
that we get an object back from an API,

40
00:02:15.636 --> 00:02:20.226
and it's not like a deeply nested object,
right?

41
00:02:20.226 --> 00:02:22.511
And you can,
I've got some that it's going,

42
00:02:22.511 --> 00:02:26.739
get one of some of them are very primitive
values, like a number, string of Boolean.

43
00:02:26.739 --> 00:02:30.811
Great love to see it right sometimes,
then there's another object, and

44
00:02:30.811 --> 00:02:32.659
that object has another object.

45
00:02:32.659 --> 00:02:36.989
And I've written some of these in my past,

46
00:02:36.989 --> 00:02:44.100
version of my life that are increasingly
Fraught with peril, right?

47
00:02:44.100 --> 00:02:48.004
But there is still some other problems
here, which is we kind of look at

48
00:02:48.004 --> 00:02:51.840
the return value of the function up
on the first line towards the end,

49
00:02:51.840 --> 00:02:55.310
you are going to say,
if it passes all of these conditionals.

50
00:02:55.310 --> 00:03:00.437
Then I guess it must be a task, or my
logic was flawed, one of the two, right?

51
00:03:00.437 --> 00:03:03.386
If I made a boo boo.

52
00:03:03.386 --> 00:03:06.439
Typescript is gonna think it's a task no
matter what, because I said it's a task.

53
00:03:06.439 --> 00:03:10.653
And Typescript's like, II Captain,
here for it, let's do it, right?

54
00:03:10.653 --> 00:03:13.673
If I messed up in some way,
shape, or form, and like,

55
00:03:13.673 --> 00:03:17.250
I say this 'cause I have messed
up in some shape or form, right?

56
00:03:17.250 --> 00:03:22.028
In various points of my life,
then any confidence that I

57
00:03:22.028 --> 00:03:27.019
think this gives me is not
really worth anything, right?

58
00:03:27.019 --> 00:03:28.708
And so in this case, right?

59
00:03:28.708 --> 00:03:31.964
Like, especially if it's a nested object,
because, like, even at the bottom, though,

60
00:03:31.964 --> 00:03:34.080
you can say,
I'm not incredibly confident here, right?

61
00:03:34.080 --> 00:03:37.653
If something gets added by the API,
I might have a new thing.

62
00:03:37.653 --> 00:03:42.687
If I have some way, like, who knows
the ways I can mess this up or even, like.

63
00:03:42.687 --> 00:03:48.574
Again, there are little things of like,
is that Id really a number,

64
00:03:48.574 --> 00:03:53.865
or is it like, one in quotes,
two in quotes so on and so forth.

65
00:03:53.865 --> 00:03:59.218
And getting a little more nuanced
about this, and like, this is already

66
00:03:59.218 --> 00:04:04.409
hurting my feelings, and that's
the one I can fit on a slide, right?

67
00:04:04.409 --> 00:04:06.981
I have written much worse than this.

68
00:04:06.981 --> 00:04:10.165
So luckily, I have a heuristic,

69
00:04:10.165 --> 00:04:14.829
which is if something is terrible and
feels bad,

70
00:04:14.829 --> 00:04:21.684
probably you're not the only one
that feels that way about it, right?

71
00:04:21.684 --> 00:04:22.759
And if that's true.

72
00:04:22.759 --> 00:04:28.230
Then there is a library or
an opportunity to make a library.

73
00:04:28.230 --> 00:04:31.660
Let's just hope there is a library to
deal with it cause a lot of times like,

74
00:04:31.660 --> 00:04:35.486
I'm gonna make an open source library is
the last thing your manager wants to hear.

75
00:04:35.486 --> 00:04:37.043
I say that as a manager.

76
00:04:37.043 --> 00:04:40.299
So there are some strategies around,
there's a bunch of different libraries.

77
00:04:40.299 --> 00:04:42.089
We're gonna look at one of them and

78
00:04:42.089 --> 00:04:44.574
I'll peek at some of
the other ones in a second.

79
00:04:44.574 --> 00:04:46.578
We're gonna look at one of them today,
called Zod.

80
00:04:46.578 --> 00:04:52.602
Zod is a library that is built to,
kind of give you an abstraction for

81
00:04:52.602 --> 00:04:59.384
making sure an object actually validates
as the object that you think it is.

82
00:04:59.384 --> 00:05:03.122
And there are some other ones, like
there's another strategy using this thing

83
00:05:03.122 --> 00:05:05.925
called.JSON schema that we'll
take a look at in a second.

84
00:05:05.925 --> 00:05:10.678
JSON schema is just some rules
about JSON to describe what

85
00:05:10.678 --> 00:05:13.361
a JSON object should look like.

86
00:05:13.361 --> 00:05:17.883
Again, these are just schemas for saying,
here is a serializable way to say like,

87
00:05:17.883 --> 00:05:22.424
hey, I'm expecting this to have an ID
that's a number, a title that's a string.

88
00:05:22.424 --> 00:05:26.651
Description that's an optional string,
a completed that's a Boolean,

89
00:05:26.651 --> 00:05:29.609
a way to kind of like,
have a standard way to do that.

90
00:05:29.609 --> 00:05:31.735
Zod can like be translated into that.

91
00:05:31.735 --> 00:05:33.950
JSON schema can be
translated back into Zod.

92
00:05:33.950 --> 00:05:39.957
The reason I picked Zod for
this course is it's also like for

93
00:05:39.957 --> 00:05:42.613
a lot of the structured I.

94
00:05:42.613 --> 00:05:45.143
Outputs from a lot of AI
models like the OpenAI,

95
00:05:45.143 --> 00:05:48.750
one will take a dot schema out of
the box translate to a JSON schema for

96
00:05:48.750 --> 00:05:52.182
reels and be able to kind of give
you that structure back as well.

97
00:05:52.182 --> 00:05:53.118
So it is, I think,

98
00:05:53.118 --> 00:05:56.706
at this moment probably one of the more
popular options some other ones.

99
00:05:56.706 --> 00:06:01.197
You may have heard of that will
kind of we've got some slides for

100
00:06:01.197 --> 00:06:03.158
which is like IoTs and yup.

101
00:06:03.158 --> 00:06:06.953
Yup wins for the best name.

102
00:06:06.953 --> 00:06:09.539
And when I show you them on slides later,

103
00:06:09.539 --> 00:06:14.102
you will see that if you get really
good with the learning curve for Yup,

104
00:06:14.102 --> 00:06:18.845
if it's asking your code base,
it's like they're basically the same.

105
00:06:18.845 --> 00:06:23.736
In fact, a lot of the creators of these
libraries are actually collaborating on

106
00:06:23.736 --> 00:06:27.900
a standardized schema that can kind
of be shared across all of them.

107
00:06:27.900 --> 00:06:32.880
So what, not only are they somewhat the
same now, they aspire to be a little bit

108
00:06:32.880 --> 00:06:36.433
more of the same than we saw
then they are even right now.

109
00:06:36.433 --> 00:06:43.214
So we saw that a wild get simplified,
honestly, is a task function.

110
00:06:43.214 --> 00:06:48.094
What would that look like as a Zod schema?

111
00:06:48.094 --> 00:06:51.868
And this is you can add a little
more detail to this, but

112
00:06:51.868 --> 00:06:55.397
this is the simple version,
which is to say, hey,

113
00:06:55.397 --> 00:07:00.509
a task ought to be an object where the ID
is a number, the title is a string.

114
00:07:00.509 --> 00:07:04.797
I didn't put the description this
one because completed as a Boolean.

115
00:07:04.797 --> 00:07:07.115
And you can also do some interesting,

116
00:07:07.115 --> 00:07:11.970
there's some nice like abstractions
around this where you can say like, hey,

117
00:07:11.970 --> 00:07:16.472
ID should be a number or something that
I can coerce into a number, right?

118
00:07:16.472 --> 00:07:20.739
So, if it is like, yeah, again, the number
one, two, three in quotes, right?.

119
00:07:20.739 --> 00:07:24.157
And you could parse in that
into a number very easily.

120
00:07:24.157 --> 00:07:27.570
Do that and that also, when you've done
parsing it, give me the number, right?

121
00:07:27.570 --> 00:07:28.487
Same with the booleans.

122
00:07:28.487 --> 00:07:31.729
If it's like, sure,
true again, you opt into that.

123
00:07:31.729 --> 00:07:35.553
It's not gonna do it for you under
the hood, unless you choose to do it.

124
00:07:35.553 --> 00:07:40.575
But you can say stuff like, hey, this
should be a Boolean, or something that

125
00:07:40.575 --> 00:07:45.693
coerces into a Boolean, like 01,
should be fair game in this case, right?

126
00:07:45.693 --> 00:07:48.684
And so a lot of that other stuff that
you might write a bunch of code to

127
00:07:48.684 --> 00:07:51.851
do yourself, you are now off the hook,
and it will be handled for you.

128
00:07:51.851 --> 00:07:52.697
We'll see a lot of that.

129
00:07:52.697 --> 00:07:57.500
You can put custom error messages so that
if it does blow up, you can kind of see,

130
00:07:57.500 --> 00:08:01.537
you can actually even display
something nice on the page, right?

131
00:08:01.537 --> 00:08:06.381
Because, like, you can handle all
that stuff, so on and so forth.

132
00:08:06.381 --> 00:08:08.391
And, yeah, there's, you know,

133
00:08:08.391 --> 00:08:12.548
a lot of the things you can do in
TypeScript are also available and usable.

134
00:08:12.548 --> 00:08:16.919
You can do unions, you can pick, you can
omit, you can do partials, so on and

135
00:08:16.919 --> 00:08:17.542
so forth.

136
00:08:17.542 --> 00:08:19.678
And the other nice thing is,

137
00:08:19.678 --> 00:08:24.667
with literally no extra code if you want,
there is a utility type.

138
00:08:24.667 --> 00:08:27.474
The type that comes with Zod,
that will take a schema and

139
00:08:27.474 --> 00:08:29.586
actually give you back the type, right?

140
00:08:29.586 --> 00:08:34.252
So you could theoretically, instead of
Leo, when I did that, is task thing.

141
00:08:34.252 --> 00:08:38.105
I normally had the type, and I was
trying to reverse engineer it, right?

142
00:08:38.105 --> 00:08:41.638
And sometimes you want to be
able to use those values, and

143
00:08:41.638 --> 00:08:46.274
it's really hard to like let's say I
had a bunch of statuses like pending,

144
00:08:46.274 --> 00:08:48.946
done, running so on and so forth, right?

145
00:08:48.946 --> 00:08:52.425
I both wanted to use those in my code and
also have them be the type.

146
00:08:52.425 --> 00:08:55.993
So then I would like do weird things with,
like an array as const, and

147
00:08:55.993 --> 00:08:58.097
then try to do a type of so
on and so forth.

148
00:08:58.097 --> 00:09:01.094
Because sometimes you both need
them as runtime values to, like,

149
00:09:01.094 --> 00:09:02.055
put in a select box for

150
00:09:02.055 --> 00:09:05.663
the filters, as well as types to make sure
things are the way you want them to be.

151
00:09:05.663 --> 00:09:08.184
So this makes it really easy as well.

152
00:09:08.184 --> 00:09:11.135
And don't worry,
we will play around with this a lot.

153
00:09:11.135 --> 00:09:16.510
So once you have the schema,
you can go ahead and you can grab anything

154
00:09:16.510 --> 00:09:21.618
that comes from your API and
you can go ahead and parse it, right?

155
00:09:21.618 --> 00:09:23.250
If it passes, guess what?

156
00:09:23.250 --> 00:09:24.883
You know that it is the type.

157
00:09:24.883 --> 00:09:30.217
In fact,
this part's method will take that any or

158
00:09:30.217 --> 00:09:33.525
that unknown or what have you.

159
00:09:33.525 --> 00:09:38.624
And it will actually, now it will
be that type going forward, right?

160
00:09:38.624 --> 00:09:42.583
And so now, as long as you do
this at those scary intersections

161
00:09:42.583 --> 00:09:47.013
between the back end, the Front end,
the back end and the database.

162
00:09:47.013 --> 00:09:52.422
So on, or honestly form inputs or
anything, you get users is the wars.

163
00:09:52.422 --> 00:09:54.338
We're making fun of backend engineers.

164
00:09:54.338 --> 00:09:57.559
We all know who the real problem is,
so users, right?

165
00:09:57.559 --> 00:10:02.012
And so we can validate input from users,
so on and so forth, right?

166
00:10:02.012 --> 00:10:06.712
So we can call parse and
the only kind of like nuance for

167
00:10:06.712 --> 00:10:09.333
parse is that what does it do?

168
00:10:09.333 --> 00:10:12.358
If it doesn't parse it?

169
00:10:12.358 --> 00:10:15.198
It throws an error right?

170
00:10:15.198 --> 00:10:19.281
Which, I think, actually like
we're all scared of throwing and

171
00:10:19.281 --> 00:10:21.295
catching errors a lot, right?

172
00:10:21.295 --> 00:10:25.495
But it's actually pretty powerful to
actually If it is not the thing that we

173
00:10:25.495 --> 00:10:29.693
think it is, maybe we just blow up and
try to instead of silently hiding it,

174
00:10:29.693 --> 00:10:31.242
like we do in a lot of cases.

175
00:10:31.242 --> 00:10:34.876
But being able to say, this is not
what I think it is, stop everything.

176
00:10:34.876 --> 00:10:39.042
And let's go to the catch part of the try
catch block is, I think, a lot of times,

177
00:10:39.042 --> 00:10:40.649
an underused pattern as well.

178
00:10:40.649 --> 00:10:45.228
But if you don't need that, or you don't
want that, or something along those lines,

179
00:10:45.228 --> 00:10:49.305
that is problematic and throwing is not
an acceptable use case at the moment,

180
00:10:49.305 --> 00:10:51.522
there is also a method called safe parse.

181
00:10:51.522 --> 00:10:56.560
Safe parse doesn't throw, right?

182
00:10:56.560 --> 00:11:00.642
It will return an object that
has a property called success,

183
00:11:00.642 --> 00:11:02.732
which is either true or false.

184
00:11:02.732 --> 00:11:07.477
It will also,
if it is not the thing you think it is.

185
00:11:07.477 --> 00:11:12.667
It will also have a property that will
tell you what is not the thing you know.

186
00:11:12.667 --> 00:11:16.364
That was, we were expecting ID to be a
number, but it turned out to be a string.

187
00:11:16.364 --> 00:11:19.658
The same things you would see from
TypeScript Zod will also give you, and

188
00:11:19.658 --> 00:11:21.442
you can kind of handle them at run time.

189
00:11:21.442 --> 00:11:23.385
So maybe it is you want to do
something special with it.

190
00:11:23.385 --> 00:11:28.837
Sometimes The API is wildly
different than I thought it was.

191
00:11:28.837 --> 00:11:30.086
Throw up an error page.

192
00:11:30.086 --> 00:11:34.238
Sometimes it's like,
we can navigate this, right?

193
00:11:34.238 --> 00:11:36.502
It's broken in a way that I can handle,

194
00:11:36.502 --> 00:11:40.565
maybe we just don't show part of
the information, so on and so forth.

195
00:11:40.565 --> 00:11:44.619
So either because you'll get the error
with the regular parse when you throw it

196
00:11:44.619 --> 00:11:47.705
and catch it, or
here you'll get the errors in the object.

197
00:11:47.705 --> 00:11:50.429
And if you there are things you want
to do, which is just kind of like, hey,

198
00:11:50.429 --> 00:11:52.785
I can use some of this data, but
maybe I can't show everything.

199
00:11:52.785 --> 00:11:57.843
You can kind of navigate that, but that's
kind of a individual journey as well.

200
00:11:57.843 --> 00:12:05.252
In this case,
like you won't get the typing of it.

201
00:12:05.252 --> 00:12:07.953
But you can do that kind of type
guard typecasting that we saw from

202
00:12:07.953 --> 00:12:08.960
the previous example.

203
00:12:08.960 --> 00:12:12.959
But the important tasting note here is
a lot less lines of code in that first

204
00:12:12.959 --> 00:12:14.132
one I wrote, right?

205
00:12:14.132 --> 00:12:18.134
And because I am literally parsing
against the schema, right,

206
00:12:18.134 --> 00:12:21.022
I do trust that I didn't
make a boo boo as much,

207
00:12:21.022 --> 00:12:24.819
especially if that task type
was generated from the schema.

208
00:12:24.819 --> 00:12:28.520
If I did that, infer that we
saw in the previous slide here,

209
00:12:28.520 --> 00:12:33.571
right if task is coming from the schema
and safe parse says it matches the schema.

210
00:12:33.571 --> 00:12:37.989
I am a lot more confident in that case,
that everything is what I think it is,

211
00:12:37.989 --> 00:12:41.716
that it is, if I wrote the code,
maybe as the end of the workday,

212
00:12:41.716 --> 00:12:44.223
which is when I do
the most technical debt.

213
00:12:44.223 --> 00:12:45.896
And again, day, it's never the morning.

214
00:12:45.896 --> 00:12:50.974
It's four o'clock in the afternoon
is when my worst choices emerge.

215
00:12:50.974 --> 00:12:53.439
Like I said before,
there are some alternatives.

216
00:12:53.439 --> 00:12:56.439
I will show them to you now so

217
00:12:56.439 --> 00:13:01.276
that you can see that
they're all the same.

218
00:13:01.276 --> 00:13:03.206
So this is yup.

219
00:13:03.206 --> 00:13:04.245
As you can see, you define.

220
00:13:04.245 --> 00:13:07.197
Find an object or
a schema that has an object, and

221
00:13:07.197 --> 00:13:10.582
then you say that it's strings and
they're required.

222
00:13:10.582 --> 00:13:16.600
These are all methods you can do
on Zod as well effectively and

223
00:13:16.600 --> 00:13:21.205
it's a.validate instead of.parse great.

224
00:13:21.205 --> 00:13:24.789
Iots, again, same basic idea here.

225
00:13:24.789 --> 00:13:31.732
They have that data that's unknown,
it's decode instead of parse.

226
00:13:31.732 --> 00:13:33.631
It's like they're roughly the same.

227
00:13:33.631 --> 00:13:37.735
So if you're like, okay, this is cool, but

228
00:13:37.735 --> 00:13:44.431
I use one of these other ones in my in
the app I work on a day-to-day basis,

229
00:13:44.431 --> 00:13:48.104
the conceptual parts still apply here.

