WEBVTT

1
00:00:00.000 --> 00:00:04.158
&gt;&gt; Steve Kinney: All right, so let's
talk about another approach called tRPC.

2
00:00:04.158 --> 00:00:07.193
You might have also heard
of things like gRPC.

3
00:00:07.193 --> 00:00:11.452
The idea is the same, it's just the first
letter that is different, right?

4
00:00:11.452 --> 00:00:16.142
tRPC, the T stands for TypeScript.

5
00:00:16.142 --> 00:00:22.336
gRPC, the G stands for Google,
who also own the language Go,

6
00:00:22.336 --> 00:00:26.517
which is the first two letters of Google.

7
00:00:26.517 --> 00:00:29.992
But the RPC part is
the part that's the same,

8
00:00:29.992 --> 00:00:33.571
which is this idea of
a remote procedure call.

9
00:00:33.571 --> 00:00:35.471
The caveat obviously,

10
00:00:35.471 --> 00:00:40.511
if we have not figured that out already,
is that this one does.

11
00:00:40.511 --> 00:00:45.199
It theoretically implies that
your API is in TypeScript.

12
00:00:45.199 --> 00:00:50.793
Now, a pattern that exists for lots of
reasons, most of which should be somewhat

13
00:00:50.793 --> 00:00:56.571
obvious is, there is a pattern sometimes
called back end for front end, which is.

14
00:00:56.571 --> 00:00:59.975
And there are lots of reasons
why you might do this pattern,

15
00:00:59.975 --> 00:01:03.243
Walmart did it famously for
a while, which is, you put,

16
00:01:03.243 --> 00:01:06.259
if you don't like the API
contract in your back end.

17
00:01:06.259 --> 00:01:12.834
And we're not just talking about,
you don't like it because it's gross.

18
00:01:12.834 --> 00:01:15.627
You don't like it because it's in Fortran,
right?

19
00:01:15.627 --> 00:01:20.149
I think Walmart had to do this where you
kind of paper over your older legacy APIs

20
00:01:20.149 --> 00:01:24.122
that are like SOAP or XML or whatever,
in, you paper over it once, so

21
00:01:24.122 --> 00:01:28.668
that everyone in the company doesn't
ever have to deal with it again, right?

22
00:01:28.668 --> 00:01:33.566
And so even if the backend team is
maybe in a different language and

23
00:01:33.566 --> 00:01:35.702
you can't make use of this,

24
00:01:35.702 --> 00:01:41.149
you can still put a layer over where
you can then ultimately use this one.

25
00:01:41.149 --> 00:01:44.219
So just because your backend is not
in TypeScript does not mean that this

26
00:01:44.219 --> 00:01:45.403
approach is off the table.

27
00:01:45.403 --> 00:01:49.731
But like, super useful if you need a very,
very flexible API,

28
00:01:49.731 --> 00:01:54.224
you still might want to consider like,
something like this if for

29
00:01:54.224 --> 00:01:58.981
instance, you do have, very heavy
API responses from a legacy API.

30
00:01:58.981 --> 00:02:02.486
There are parts to this where even
if the furthest backend backend

31
00:02:02.486 --> 00:02:05.236
is not in TypeScript,
you might choose to do this.

32
00:02:05.236 --> 00:02:07.168
Because sometimes doing
this stuff server side,

33
00:02:07.168 --> 00:02:10.302
close to the data is easier than sending
everything over the wire to deal with it.

34
00:02:10.302 --> 00:02:15.668
Particularly if you're working with mobile
or like low bandwidth, stuff like that.

35
00:02:15.668 --> 00:02:21.661
And the nice part is, again,
once you define the kind of contract,

36
00:02:21.661 --> 00:02:25.445
you can begin to generate
all of the rest and

37
00:02:25.445 --> 00:02:31.886
keep those contracts in place versus
having to implement it all by hand.

38
00:02:31.886 --> 00:02:35.304
So like I said, especially too,
it's like, hey,

39
00:02:35.304 --> 00:02:38.802
we're still figuring out
what this experience is and

40
00:02:38.802 --> 00:02:44.181
we don't necessarily even know what the
API contract ought to have been, right?

41
00:02:44.181 --> 00:02:45.435
It becomes incredibly useful.

42
00:02:45.435 --> 00:02:49.057
And sometimes you end up in
legacy situations, right?

43
00:02:49.057 --> 00:02:54.180
A company that I worked at that
sends emails for a living,

44
00:02:54.180 --> 00:02:59.839
to actually construct the current
user was like six API calls,

45
00:02:59.839 --> 00:03:04.459
right, and
then you could wire that all together.

46
00:03:04.459 --> 00:03:06.908
Now, you can do that client-side,
right, or

47
00:03:06.908 --> 00:03:10.413
you can choose to put layers that
abstract that, so on and so forth.

48
00:03:10.413 --> 00:03:12.137
And sometimes you didn't
need all that data.

49
00:03:12.137 --> 00:03:14.977
Lots of reasons why you
might take this approach.

50
00:03:14.977 --> 00:03:18.545
But effectively, it sits,
the services could be,

51
00:03:18.545 --> 00:03:22.449
microservice is my backend
written in other languages.

52
00:03:22.449 --> 00:03:25.100
It could even be ones in Node,
your databases, so on and so forth.

53
00:03:25.100 --> 00:03:28.559
But again, you are just trying
to put an abstraction over that,

54
00:03:28.559 --> 00:03:32.481
that that will then let you build on top
of it and resolve it as we go along.

55
00:03:32.481 --> 00:03:37.213
So there is a little bit
of kinda pieces in here.

56
00:03:37.213 --> 00:03:42.554
This is the client side where you
just grab the type of the route.

57
00:03:42.554 --> 00:03:46.253
It's not dissimilar from what we
just saw with the OpenAPI schemas,

58
00:03:46.253 --> 00:03:49.781
where we could generate an entire
client just based on the types.

59
00:03:49.781 --> 00:03:53.428
You can do very something
very similar here as well.

60
00:03:53.428 --> 00:03:56.948
And what's kind of cool about
it is it will send stuff,

61
00:03:56.948 --> 00:04:00.096
you can even do,
like updates over WebSockets.

62
00:04:00.096 --> 00:04:01.488
It's all kind of built in.

63
00:04:01.488 --> 00:04:04.609
And you begin to just say
what you want to grab.

64
00:04:04.609 --> 00:04:05.442
And we'll see it in practice.

65
00:04:05.442 --> 00:04:06.070
It'll be a little better.

66
00:04:06.070 --> 00:04:07.620
This is the fits on a slide version.

67
00:04:07.620 --> 00:04:12.894
So this is the server side implementation,
where you would grab the @trpc/server,

68
00:04:12.894 --> 00:04:15.649
you kind of just go ahead and
create a server.

69
00:04:15.649 --> 00:04:17.195
And then you have a router, right?

70
00:04:17.195 --> 00:04:20.811
And so for instance,
this router will support, again, hello,

71
00:04:20.811 --> 00:04:22.729
which will send back this string.

72
00:04:22.729 --> 00:04:24.830
And, like, we just export the type.

73
00:04:24.830 --> 00:04:27.748
So we just effectively
are coming up with a contract.

74
00:04:27.748 --> 00:04:31.730
This contract is interesting because it
also gets to be the implementation, right?

75
00:04:31.730 --> 00:04:34.779
So now, if somebody wants to
call the Hello procedure, right?

76
00:04:34.779 --> 00:04:38.900
Basically, it's almost like, instead of
calling APIs and getting responses back,

77
00:04:38.900 --> 00:04:41.948
think of it like you can remotely
call functions on the server and

78
00:04:41.948 --> 00:04:42.922
get the stuff back.

79
00:04:42.922 --> 00:04:46.726
So this procedure is really,
you can basically call hello and

80
00:04:46.726 --> 00:04:49.151
you're going to get back this string.

81
00:04:49.151 --> 00:04:53.322
You're not necessarily worried about
what's the path for that and what are,

82
00:04:53.322 --> 00:04:54.342
all those things.

83
00:04:54.342 --> 00:04:59.123
It's basically a contract that is exposed
to you that then all the transport

84
00:04:59.123 --> 00:05:00.699
will be handled for you.

85
00:05:00.699 --> 00:05:05.997
On the client, again, you can see that
we do create the proxy client, but then

86
00:05:05.997 --> 00:05:11.643
we can just call trpc.hello, and query it,
versus mutate it, so on and so forth.

87
00:05:11.643 --> 00:05:14.610
Some of these terms might sound like
GraphQL, and if you've never used GraphQL,

88
00:05:14.610 --> 00:05:16.374
you don't need to know
anything about GraphQL.

89
00:05:16.374 --> 00:05:17.240
So it's fine.

90
00:05:17.240 --> 00:05:20.948
And then call it, and so we can call
different things with different

91
00:05:20.948 --> 00:05:25.518
parameters, only get back part of the data
that we want and send less over the wire.

92
00:05:25.518 --> 00:05:29.152
With a regular old HTTP request,
obviously, if you hit that endpoint,

93
00:05:29.152 --> 00:05:33.265
you could get fancy with the query params
and what you do and don't want to see, but

94
00:05:33.265 --> 00:05:35.069
you're doing a lot of that by hand.

95
00:05:35.069 --> 00:05:40.129
This kind of gives you the ability to call
things as you need it and pass in options.

96
00:05:40.129 --> 00:05:44.868
And when we see it in practice,
it's pretty, pretty nice.

97
00:05:44.868 --> 00:05:48.321
So it does, again, it is in TypeScript.

98
00:05:48.321 --> 00:05:52.934
So for a lot of smaller things,
definitely like useful.

99
00:05:52.934 --> 00:05:56.116
It is not a totally
separate kind of server,

100
00:05:56.116 --> 00:06:01.190
where you're installing Apollo or
whatever to get GraphQL support.

101
00:06:01.190 --> 00:06:04.526
It is just effectively TypeScript
at the end of the day.

102
00:06:04.526 --> 00:06:07.425
But it allows you to be very custom.

103
00:06:07.425 --> 00:06:10.752
It does have some caveats, which,
again, only for TypeScript.

104
00:06:10.752 --> 00:06:14.475
Like you probably, either you own
the backend for the frontend, or

105
00:06:14.475 --> 00:06:16.121
you own the backend, right?

106
00:06:16.121 --> 00:06:17.679
But generally speaking,

107
00:06:17.679 --> 00:06:21.794
you probably want to own at least
some server side component as well.

108
00:06:21.794 --> 00:06:24.341
Obviously, it's tricky.

109
00:06:24.341 --> 00:06:28.032
We did it to great success at Twilio,

110
00:06:28.032 --> 00:06:32.802
but also,
you know what everything supports?

111
00:06:32.802 --> 00:06:35.809
Regular old HTTP and REST clients.

112
00:06:35.809 --> 00:06:37.954
There's always going to
be better tooling for

113
00:06:37.954 --> 00:06:41.426
that stuff despite all of the things I
just told you about why this is great.

114
00:06:41.426 --> 00:06:44.468
But again, in the ways of
solving this problem that we've

115
00:06:44.468 --> 00:06:48.958
been tackling from multiple different
angles, it's a particularly interesting.

116
00:06:48.958 --> 00:06:53.682
At the very least, knowing that it
exists in case you need it is probably

117
00:06:53.682 --> 00:06:57.934
also worth your time,
even if you don't have an immediate use,

118
00:06:57.934 --> 00:07:01.188
cuz it solved a very,
very large problem for us.

119
00:07:01.188 --> 00:07:02.499
So, where does it fit?

120
00:07:02.499 --> 00:07:04.083
All-in on TypeScript?

121
00:07:04.083 --> 00:07:08.470
Definitely, we used it for a large project
because we were young and stupid, but

122
00:07:08.470 --> 00:07:10.096
it worked out, so who cares?

123
00:07:10.096 --> 00:07:15.151
But we also were trying to create
one abstraction because every team

124
00:07:15.151 --> 00:07:20.571
was putting their own abstraction
over the Java backends and whatever.

125
00:07:20.571 --> 00:07:23.180
We were trying to solve
a different problem with it.

126
00:07:23.180 --> 00:07:26.001
But mostly that third
bullet point of many,

127
00:07:26.001 --> 00:07:30.966
many different teams needing to do
slightly different things as we go along.

