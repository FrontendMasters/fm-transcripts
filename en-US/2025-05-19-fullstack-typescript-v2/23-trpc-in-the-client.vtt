WEBVTT

1
00:00:00.802 --> 00:00:02.716
&gt;&gt; Steve Kinney: Now for our next trick,

2
00:00:02.716 --> 00:00:06.747
let's talk about using it in the client,
right?

3
00:00:06.747 --> 00:00:13.611
Cuz having a bunch of new endpoints
doesn't really do much for me.

4
00:00:13.611 --> 00:00:18.758
Cool, so let's go ahead and

5
00:00:18.758 --> 00:00:24.119
we're gonna over into the API

6
00:00:24.119 --> 00:00:29.914
part of our client, I believe.

7
00:00:29.914 --> 00:00:34.096
So now we've got these fetch tasks,
so on and so forth.

8
00:00:34.096 --> 00:00:41.008
All we're gonna do is
pull in import{create}.

9
00:00:46.764 --> 00:00:49.210
&gt;&gt; Steve Kinney: The client,
what you angry about?

10
00:00:52.027 --> 00:00:53.970
&gt;&gt; Steve Kinney: TRPC is a proxy client.

11
00:00:53.970 --> 00:00:55.255
Of course, why not?

12
00:00:58.457 --> 00:01:02.104
&gt;&gt; Steve Kinney: Cool, and so
this will do stuff too, which is,

13
00:01:02.104 --> 00:01:07.940
if it can batch requests together,
there will be a whole bunch of other fun,

14
00:01:07.940 --> 00:01:12.984
little, not dissimilar to what
both gRPC and GraphQL do as well.

15
00:01:12.984 --> 00:01:17.643
Where it will try to do
other helpful things for

16
00:01:17.643 --> 00:01:21.115
you, in the name of performance.

17
00:01:21.115 --> 00:01:29.625
And now we're gonna say,
&gt;&gt; Steve Kinney: And

18
00:01:29.625 --> 00:01:35.335
all it really needs is
access to that router,

19
00:01:35.335 --> 00:01:38.200
which I think that I did

20
00:01:46.199 --> 00:01:52.109
&gt;&gt; Steve Kinney: Yep, export const router.

21
00:01:52.109 --> 00:01:55.325
And the nice part is it actually
doesn't need the router itself,

22
00:01:55.325 --> 00:01:56.909
it only needs the type, right?

23
00:01:56.909 --> 00:02:00.837
It's very much like when we when
we created that client from

24
00:02:00.837 --> 00:02:02.106
the Open API spec.

25
00:02:02.106 --> 00:02:06.522
As long as you give it the type, it will
do all the right stuff out of the box,

26
00:02:06.522 --> 00:02:07.800
which is kinda nuts.

27
00:02:17.776 --> 00:02:21.249
&gt;&gt; Steve Kinney: So really all we
want is the type in this case.

28
00:02:31.869 --> 00:02:37.400
&gt;&gt; Steve Kinney: And
what we'll do is we'll give it a link.

29
00:02:37.400 --> 00:02:40.274
In this case, yep, that's the right URL.

30
00:02:40.274 --> 00:02:45.939
And now I have this client, and
the cool things the client can do,

31
00:02:45.939 --> 00:02:50.498
in this case, is we can do,
&gt;&gt; Steve Kinney: As you can see,

32
00:02:50.498 --> 00:02:54.216
out of the box,
just by importing the type, that's it.

33
00:02:54.216 --> 00:02:58.432
The only thing on the client that we're
really pulling in is this little,

34
00:02:58.432 --> 00:02:59.592
create me a client.

35
00:02:59.592 --> 00:03:04.356
And then get telling it about
the contract, that's it.

36
00:03:04.356 --> 00:03:07.249
And then we can see it's got getTasks,
right?

37
00:03:07.249 --> 00:03:10.735
If we look at getTasks,
it looks kind of crazy, but

38
00:03:10.735 --> 00:03:16.266
you can see that completed Boolean or
undefined, it will have the right output.

39
00:03:16.266 --> 00:03:18.607
Everything is built-in and ready to go.

40
00:03:18.607 --> 00:03:24.796
So what we could do theoretically, is,
instead of sending fetch requests now,

41
00:03:24.796 --> 00:03:29.173
we could just go ahead and
literally just pull in things.

42
00:03:29.173 --> 00:03:34.758
So all this right here, let's go ahead and

43
00:03:34.758 --> 00:03:40.511
let's do,
&gt;&gt; Steve Kinney: New,

44
00:03:41.731 --> 00:03:45.399
single task.

45
00:03:45.399 --> 00:03:52.021
And you could argue,
do I need to keep these abstractions?

46
00:03:52.021 --> 00:03:55.689
We don't ever actually use a single task,
I'm gonna leave that one for a second.

47
00:03:55.689 --> 00:03:59.706
No, but then you have to watch me
go around a React code base and

48
00:03:59.706 --> 00:04:01.886
swap them out all over the place.

49
00:04:01.886 --> 00:04:05.472
So we'll just change
the implementations here.

50
00:04:05.472 --> 00:04:10.370
So here we'll have return client,

51
00:04:10.370 --> 00:04:15.437
and this was actually gonna be that,

52
00:04:19.127 --> 00:04:21.231
&gt;&gt; Steve Kinney: CreateTask type.

53
00:04:21.231 --> 00:04:24.335
And again, it knew that partial
task was not what I needed.

54
00:04:24.335 --> 00:04:26.882
That was that weird fake
type that I made earlier.

55
00:04:26.882 --> 00:04:30.756
It automatically knows that's not
the type that the server expects.

56
00:04:30.756 --> 00:04:37.417
Give me the type that the server expects,
please, which is super cool.

57
00:04:38.654 --> 00:04:41.829
&gt;&gt; Steve Kinney: Return client.updateTask.

58
00:04:41.829 --> 00:04:46.366
And again, these are all defined
on the server that says basically

59
00:04:46.366 --> 00:04:49.697
what it is looking for
and what it wants, right?

60
00:04:58.198 --> 00:05:01.109
&gt;&gt; Steve Kinney: And
automatically enforces the types.

61
00:05:01.109 --> 00:05:04.463
And then you will see
that it is fulfilling all

62
00:05:04.463 --> 00:05:08.441
these explicit return types
with no red squigglies.

63
00:05:08.441 --> 00:05:11.482
So out of the box,
it knows the types of server expects,

64
00:05:11.482 --> 00:05:13.633
enforce the types the server expects.

65
00:05:13.633 --> 00:05:16.275
It knows the types of server gives back,

66
00:05:16.275 --> 00:05:20.092
it enforces the types that
the server gives back, right?

67
00:05:20.092 --> 00:05:23.293
So there's no necessary need to go
into Zod schema the world, right?

68
00:05:23.293 --> 00:05:28.234
You basically, will get the type
safety as generated by the server, and

69
00:05:28.234 --> 00:05:33.746
all those long, long ones, right,
simply become calls to the client, right?

70
00:05:33.746 --> 00:05:38.928
Either mutates or gets and everything
is type safe across the entire board.

71
00:05:38.928 --> 00:05:43.232
Now, obviously, the moment of
truth here is going to the app and

72
00:05:43.232 --> 00:05:44.758
making sure it works.

73
00:05:44.758 --> 00:05:47.704
Which am I stalling a little
bit cuz I'm scared?

74
00:05:47.704 --> 00:05:51.281
Sure, well, let's do it.

75
00:05:51.281 --> 00:05:54.043
I feel good.

76
00:05:54.043 --> 00:06:02.484
Let's see, let's go local host, API, trpc.

77
00:06:02.484 --> 00:06:07.452
Hey, all right, there was a little moment

78
00:06:07.452 --> 00:06:12.561
of drama and suspense, but it wasn't bad.

79
00:06:12.561 --> 00:06:18.603
We can add it, we can move it to
completed, so on and so forth, right?

80
00:06:18.603 --> 00:06:23.261
And what's super cool is, I basically
guessed there was some boiler plate.

81
00:06:23.261 --> 00:06:24.504
Let's all acknowledge that.

82
00:06:24.504 --> 00:06:27.891
But I think the cool part is, once I
got that boiler plate out of the way,

83
00:06:27.891 --> 00:06:31.415
cuz a lot of times in a workshop,
the boiler plate takes up 50% of time.

84
00:06:31.415 --> 00:06:36.747
In life, the boiler plate takes
up like 0.001% of the time.

85
00:06:36.747 --> 00:06:41.016
But because the types are shared,
you do need to figure out a way to, again,

86
00:06:41.016 --> 00:06:43.040
you can put that in the shared repo.

87
00:06:43.040 --> 00:06:49.092
There is a little bit of type script
specific jumping you need to do here.

88
00:06:49.092 --> 00:06:52.900
But if that's not an option, then
the open API scheme is a great option.

89
00:06:52.900 --> 00:06:58.113
No matter what, it becomes a what
is the reality of your situation,

90
00:06:58.113 --> 00:07:00.403
not what is the best, right?

91
00:07:00.403 --> 00:07:04.076
Unfortunately, those days
ended a long time ago.

92
00:07:04.076 --> 00:07:08.977
But now, we get all the type safety,
and we're getting a lot more of it for

93
00:07:08.977 --> 00:07:10.415
free and automatic.

94
00:07:10.415 --> 00:07:12.846
If you can get away with this,
great, do it.

95
00:07:12.846 --> 00:07:16.918
If you can't, the stuff we did the very
beginning still valid and useful,

96
00:07:16.918 --> 00:07:20.098
depending on what area you can
go to make your life better.

97
00:07:20.098 --> 00:07:24.342
The only wrong choice is just hoping
that everything works all the time and

98
00:07:24.342 --> 00:07:25.441
praying, right?

99
00:07:25.441 --> 00:07:29.626
For no back end API to ever change or
something along those lines.

100
00:07:29.626 --> 00:07:32.994
In this case we know that
if even if they do change,

101
00:07:32.994 --> 00:07:35.660
I will get red squigglys immediately.

102
00:07:35.660 --> 00:07:40.391
I know even if the API does change, to
know how it happened versus the times that

103
00:07:40.391 --> 00:07:44.205
they have changed behind my back
has been deeply problematic.

104
00:07:44.205 --> 00:07:48.641
Cuz a lot of times it is after
an hour figuring out why,

105
00:07:48.641 --> 00:07:54.075
especially in the days of undefined,
is not a function, right?

106
00:07:54.075 --> 00:07:59.270
Or something like that, or undefined.map,
map is not available in undefined.

107
00:07:59.270 --> 00:08:00.867
And then you trace that down and

108
00:08:00.867 --> 00:08:03.816
that takes the better part of
a day while the site is down,

109
00:08:03.816 --> 00:08:07.516
I would rather have the types tell
me exactly what the issue is, right?

110
00:08:07.516 --> 00:08:10.703
So even if you're not
totally safe at all times,

111
00:08:10.703 --> 00:08:13.595
the way to solve everything
is a lot easier.

112
00:08:13.595 --> 00:08:16.860
And like I said, one more time, yeah.

113
00:08:16.860 --> 00:08:20.544
&gt;&gt; Speaker 2: I'm just gonna ask
a question about trpc versus rest, and

114
00:08:20.544 --> 00:08:24.011
if there's any speed
differences with request time.

115
00:08:24.011 --> 00:08:27.179
&gt;&gt; Steve Kinney: I mean,
trpc will do a bunch of stuff,

116
00:08:27.179 --> 00:08:30.749
we turn this on, there's batch updates.

117
00:08:30.749 --> 00:08:34.402
If we can kind of coalesce them,
it has the ability to update

118
00:08:34.402 --> 00:08:39.310
stuff over web sockets and then fall back,
and a whole bunch of stuff like that.

119
00:08:39.310 --> 00:08:42.504
You can even do stuff like,
kind of hand waving, we've mentioned.

120
00:08:42.504 --> 00:08:48.113
There's stuff in thein the course
notes about how to do subscriptions.

121
00:08:48.113 --> 00:08:52.846
So you can do stuff where it's like,
if the data changes on the server, to push

122
00:08:52.846 --> 00:08:57.893
the updates to the client without having
to refresh it, there's a bunch of stuff.

123
00:08:57.893 --> 00:08:59.418
What do you pay for that?

124
00:08:59.418 --> 00:09:04.252
You pay for complexity, right?

125
00:09:04.252 --> 00:09:08.450
Now you've got stuff coming over
web sockets, all that's great,

126
00:09:08.450 --> 00:09:11.258
a little harder to debug sometimes, right?

127
00:09:11.258 --> 00:09:14.397
Also a lot of the stuff
with the sockets and

128
00:09:14.397 --> 00:09:19.523
stuff like that does kind of involve
a persistent existing server.

129
00:09:19.523 --> 00:09:22.338
So you add some complexity,
if you're serverless, right?

130
00:09:22.338 --> 00:09:23.105
You get it?

131
00:09:23.105 --> 00:09:27.301
It is, in a lot of ways,
going to be faster and more performant.

132
00:09:27.301 --> 00:09:32.375
On the other hand, you pay for
that with complexity, right?

133
00:09:32.375 --> 00:09:36.703
And it all depends, but
the fact that you can call functions with

134
00:09:36.703 --> 00:09:40.311
different parameters and
all that kind of stuff, and

135
00:09:40.311 --> 00:09:44.019
almost in a lot of ways,
expose stuff at a lower level.

136
00:09:44.019 --> 00:09:47.782
Means, if you're still prototyping and
figuring stuff out, incredibly powerful.

137
00:09:47.782 --> 00:09:51.740
So extra complexity, more freedom,
probably for most cases,

138
00:09:51.740 --> 00:09:53.876
a little bit better performance.

139
00:09:53.876 --> 00:09:57.568
But nothing like an HTTP call
when you're trying to debug.

140
00:09:57.568 --> 00:10:01.439
So it's a set of trade-offs
in any direction.

141
00:10:01.439 --> 00:10:03.994
And it's like,
what poison do you wanna pick?

