WEBVTT

1
00:00:00.000 --> 00:00:04.872
&gt;&gt; Steve Kinney: And so we've go the
thematic piece in here where they are now

2
00:00:04.872 --> 00:00:05.656
shared.

3
00:00:05.656 --> 00:00:09.164
What I want you to do is take a break
from me talking for a moment.

4
00:00:09.164 --> 00:00:13.022
In exercises, there's a little user
API which is very similar to what we

5
00:00:13.022 --> 00:00:15.440
are doing just on the express level,
right?

6
00:00:15.440 --> 00:00:20.418
Play with the types, play with some
schemas, try to get it working.

7
00:00:20.418 --> 00:00:25.273
And then we will then do some there, flesh
out the rest of this, and to start to

8
00:00:25.273 --> 00:00:30.307
look at ways to make this more sustainable
and easier to do, and more scalable.

9
00:00:30.307 --> 00:00:36.097
Scalable not in the performance sense,
but scalable in the sense of,

10
00:00:36.097 --> 00:00:41.903
you can do this repeatedly and
consistently, right, across a team.

11
00:00:41.903 --> 00:00:47.283
So where you are going is
in the exercises folder.

12
00:00:47.283 --> 00:00:50.608
There is a little user API,
which is, there's no database.

13
00:00:50.608 --> 00:00:54.343
It's a very simplified version
of what we saw earlier.

14
00:00:54.343 --> 00:00:56.448
So in exercises, user API,

15
00:00:56.448 --> 00:01:01.822
the world's simplest little version
of what we were just working with.

16
00:01:01.822 --> 00:01:04.719
For you, just try it out in a clean space.

17
00:01:04.719 --> 00:01:07.344
There are some tests to test your
assumptions if you really want to,

18
00:01:07.344 --> 00:01:08.461
you don't have to run them.

19
00:01:08.461 --> 00:01:11.705
They're mostly to make sure I didn't
break stuff as I was preparing, but

20
00:01:11.705 --> 00:01:13.971
if you wanna run them,
they're there for you too.

21
00:01:13.971 --> 00:01:18.217
But just try to, again, these will start
out being all sorts of weird nies.

22
00:01:18.217 --> 00:01:22.872
Just take a pass without copy and pasting,

23
00:01:22.872 --> 00:01:27.408
just try to get some basic safety in this.

24
00:01:27.408 --> 00:01:30.955
And we'll look at it together, and
we'll apply it to the larger project.

25
00:01:36.869 --> 00:01:40.478
&gt;&gt; Steve Kinney: Okay, so we had
a version, not just similar to what we're

26
00:01:40.478 --> 00:01:45.194
working on before, but a nice little,
clean safe space with no databases or

27
00:01:45.194 --> 00:01:49.050
any fun things like that,
just like a little in memory store.

28
00:01:49.050 --> 00:01:54.127
And we wanna kinda take the same approach
that I just did in our larger app and

29
00:01:54.127 --> 00:01:56.959
just kick it around a little bit, right?

30
00:01:56.959 --> 00:02:00.611
Cuz we will talk about more sophisticated
things in terms of generation.

31
00:02:00.611 --> 00:02:06.046
But arguably, if you get this down,
you are on the 80/20 principle of,

32
00:02:06.046 --> 00:02:09.737
20% of working, 80% there, you're there.

33
00:02:09.737 --> 00:02:16.014
Watch the rest, it's good,
you'll love it, but spiritually.

34
00:02:16.014 --> 00:02:19.974
So we can do that trick that we saw
earlier where if I already have

35
00:02:19.974 --> 00:02:24.483
the type and I wanna go back the other
direction, we can do that as well.

36
00:02:24.483 --> 00:02:29.883
And so I could say something like

37
00:02:29.883 --> 00:02:34.687
a UserSchema is z.object.

38
00:02:34.687 --> 00:02:40.251
And we'll get there with the UUID,
don't steal my thunder.

39
00:02:40.251 --> 00:02:45.412
An I is a string, not yet,

40
00:02:45.412 --> 00:02:50.820
let's pull in dot as well.

41
00:02:50.820 --> 00:02:57.575
The name is a string problem
when you got that auto complete.

42
00:02:57.575 --> 00:03:00.815
What is stuff where you already
have the answers on another branch?

43
00:03:00.815 --> 00:03:06.684
And then we could do
satisfies the user type.

44
00:03:06.684 --> 00:03:10.552
So now I can be pretty
confident that this does,

45
00:03:10.552 --> 00:03:14.919
in fact,
do everything that this type does, right?

46
00:03:14.919 --> 00:03:20.050
Generally speaking, cuz this question came
up before, I do tend to start this way and

47
00:03:20.050 --> 00:03:24.413
go that way, unless the type pre-exists,
and I'm trying to match it.

48
00:03:24.413 --> 00:03:25.958
So we'll start there.

49
00:03:25.958 --> 00:03:29.989
And so now what we can do is say, for

50
00:03:29.989 --> 00:03:35.147
instance, for this request body, right?

51
00:03:35.147 --> 00:03:40.735
This is for a post one,
we might not have the Id just yet.

52
00:03:40.735 --> 00:03:43.544
So we could also make the versions.

53
00:03:43.544 --> 00:03:44.791
And again, you can do these in line.

54
00:03:44.791 --> 00:03:47.454
If you are only gonna use it once,
maybe that makes total sense.

55
00:03:47.454 --> 00:03:50.956
If you find that you're gonna use
a partial version all the time,

56
00:03:50.956 --> 00:03:52.682
make it a reusable one, right?

57
00:03:52.682 --> 00:03:53.988
It doesn't really matter.

58
00:03:53.988 --> 00:03:57.971
I will probably make types out of them,
like if this is a larger code base, so

59
00:03:57.971 --> 00:03:59.672
I'm going to keep it like this.

60
00:03:59.672 --> 00:04:04.038
So yeah, basically,
again, there's a do not

61
00:04:04.038 --> 00:04:08.744
repeat yourself part of keeping this dry,
right?

62
00:04:08.744 --> 00:04:11.979
If you did make these all bespoke,
then you have to keep them in sync.

63
00:04:11.979 --> 00:04:18.946
If you derive one from the other, then
you should be in a much better situation.

64
00:04:18.946 --> 00:04:22.279
Cool, and so that should do the trick,
the order there doesn't really matter,

65
00:04:22.279 --> 00:04:23.862
just like it doesn't in TypeScript.

66
00:04:23.862 --> 00:04:27.759
You can omit the key that you don't want,
to make the rest of them partial.

67
00:04:27.759 --> 00:04:30.856
You can make them all partial and
take out the key you don't want.

68
00:04:30.856 --> 00:04:35.973
That's how math works,
you get to the same result.

69
00:04:35.973 --> 00:04:40.459
Great, and so now we can just go through
here, and we can say, okay, this body for

70
00:04:40.459 --> 00:04:41.645
creating a new user.

71
00:04:41.645 --> 00:04:48.571
Well, that should be
the CreateUserSchema.parse, right?

72
00:04:48.571 --> 00:04:54.755
And now everything is what I
think it ought to be, right?

73
00:04:54.755 --> 00:05:00.504
Theoretically, we will never actually
hit this because this will throw.

74
00:05:00.504 --> 00:05:04.775
In the catch is when I could have
chosen to then look at the errors and

75
00:05:04.775 --> 00:05:07.075
figure out what they're missing.

76
00:05:07.075 --> 00:05:15.560
And we saw before, you can do stuff like,
&gt;&gt; Steve Kinney: It's a dot message,

77
00:05:15.560 --> 00:05:23.808
we can also, I think,
&gt;&gt; Steve Kinney: So on and so forth.

78
00:05:23.808 --> 00:05:27.147
You can begin to also
customize the messages,

79
00:05:27.147 --> 00:05:31.350
which are nice for
the response types and stuff like that.

80
00:05:31.350 --> 00:05:36.591
So now we know this is the thing that
it ought to be in both of these cases.

81
00:05:36.591 --> 00:05:41.030
A new user, again, we wanna say,

82
00:05:41.030 --> 00:05:46.397
this should be the full one at this point.

83
00:05:46.397 --> 00:05:49.425
And again, if this is a database, we might
choose as it came out of the database.

84
00:05:49.425 --> 00:05:53.317
This is like our overly simple example,
so we can focus on the core thing.

85
00:05:53.317 --> 00:05:57.266
And so now I could theoretically,
like one, if this didn't match,

86
00:05:57.266 --> 00:06:01.709
I would be getting yelled at, right,
cuz we now know the type of both things.

87
00:06:01.709 --> 00:06:06.692
But then also this is somewhat
unnecessary cuz we know

88
00:06:06.692 --> 00:06:09.801
that it's a user in the same way.

89
00:06:09.801 --> 00:06:14.763
Cool, the only advantage
you get from this one,

90
00:06:14.763 --> 00:06:20.813
by the way, to be clear,
is if you like that more than this,

91
00:06:20.813 --> 00:06:24.827
choose whichever one makes you happy.

92
00:06:24.827 --> 00:06:29.089
Honestly, for smaller ones,
this makes me happier cuz I don't remember

93
00:06:29.089 --> 00:06:32.816
what a user is, but we all know
how extreme this can get, right?

94
00:06:32.816 --> 00:06:34.931
If it's a giant one, maybe I just.

95
00:06:34.931 --> 00:06:38.337
If it's a primitive thing that I work with
all the time and it happens to be giant,

96
00:06:38.337 --> 00:06:41.009
I will go for the other approach,
would give me the shorthand.

97
00:06:41.009 --> 00:06:42.873
Because again, you can do stuff like.

98
00:06:45.474 --> 00:06:47.127
&gt;&gt; Steve Kinney: We click on newUser,
we end up here.

99
00:06:47.127 --> 00:06:51.111
I can go to that definition,
which is nice as well, right?

100
00:06:51.111 --> 00:06:54.717
Trade-offs, you choose which
one ever makes you happier.

101
00:06:54.717 --> 00:06:57.032
But now we know that this is newUser.

102
00:06:57.032 --> 00:06:59.792
It can very cleanly be pushed onto here,
it's not any,

103
00:06:59.792 --> 00:07:01.220
I get a lot more type safety.

104
00:07:01.220 --> 00:07:05.231
Everything worked beforehand
because it just happened to work.

105
00:07:05.231 --> 00:07:09.772
Now it works cuz I know that it works,
cuz all the types match up.

106
00:07:09.772 --> 00:07:12.503
Because before,
everything was just any, and

107
00:07:12.503 --> 00:07:16.335
my tests are the only thing keeping
everything together, right?

108
00:07:16.335 --> 00:07:20.532
Cuz now theoretically,
the testing story becomes a lot easier,

109
00:07:20.532 --> 00:07:24.816
even if you're only working on just
the client or just the server.

110
00:07:24.816 --> 00:07:28.391
Because beforehand, right,
I would have to have a bunch of tests,

111
00:07:28.391 --> 00:07:30.601
make sure I got back the 400 whatever.

112
00:07:30.601 --> 00:07:35.778
At this point, I could just send
in an object and should not throw,

113
00:07:35.778 --> 00:07:40.692
or should throw, or
response should be 200 or not a 200.

114
00:07:40.692 --> 00:07:45.142
And I will know that the rest
of the type safety was there.

115
00:07:45.142 --> 00:07:47.346
Again, so query is another one.

116
00:07:47.346 --> 00:07:50.157
So this is for filtering.

117
00:07:50.157 --> 00:07:54.639
So in this case,
any of these can be optional, right?

118
00:07:54.639 --> 00:07:55.514
So do I have?

119
00:08:01.453 --> 00:08:03.770
&gt;&gt; Steve Kinney: You can argue
that I could reuse this one.

120
00:08:03.770 --> 00:08:10.710
So we'll say,
&gt;&gt; Steve Kinney: And

121
00:08:10.710 --> 00:08:15.506
so this should be, everything's optional,
but there should not be an Id in there.

122
00:08:15.506 --> 00:08:18.451
So now I could say,

123
00:08:18.451 --> 00:08:24.722
PartialUser.parse, with the query.

124
00:08:24.722 --> 00:08:29.165
And again, now this is a string undefined,

125
00:08:29.165 --> 00:08:32.897
this is a string undefined, right?

126
00:08:32.897 --> 00:08:35.795
We've got the ability to filter them.

127
00:08:35.795 --> 00:08:40.088
We know whatever thing
ought to be at this point.

128
00:08:40.088 --> 00:08:43.756
Yeah, everything's basically typed,
say, there's not any to found in here.

129
00:08:43.756 --> 00:08:45.190
So we should be pretty good.

130
00:08:45.190 --> 00:08:46.535
We know that's a string, great.

131
00:08:53.855 --> 00:08:55.601
&gt;&gt; Steve Kinney: Right, we can get
rid of those little helpful things.

132
00:08:55.601 --> 00:09:00.301
Cuz again, this is gonna cast it as
a string, regardless if it is one, right?

133
00:09:00.301 --> 00:09:03.415
Cuz it was any, and
we wanted to call to lowercase on it.

134
00:09:03.415 --> 00:09:05.575
Get rid of all of that, we're still good,

135
00:09:05.575 --> 00:09:08.107
not a red line to be found
on that minimap, right?

136
00:09:08.107 --> 00:09:12.879
Everything is type safe, even if things
are coming in from the outside world.

137
00:09:12.879 --> 00:09:17.783
The params, that could just be,

138
00:09:17.783 --> 00:09:22.862
again, we could either make one,

139
00:09:22.862 --> 00:09:28.116
or we could say that it is just either

140
00:09:28.116 --> 00:09:33.034
in UserSchema.pick id is true.

141
00:09:38.372 --> 00:09:41.122
&gt;&gt; Steve Kinney: We don't get a lot from
that one cuz that was a string to begin

142
00:09:41.122 --> 00:09:43.817
with, but we'll see where it
becomes useful in a second.

143
00:09:43.817 --> 00:09:46.631
So then users,

144
00:09:46.631 --> 00:09:51.612
great, awesome, super.

145
00:09:51.612 --> 00:09:53.182
Again, this is where, again,

146
00:09:53.182 --> 00:09:59.909
I might choose to then
&gt;&gt; Steve Kinney: Make it its own thing.

147
00:10:07.443 --> 00:10:12.088
&gt;&gt; Steve Kinney: Ordering matters in
JavaScript when it doesn't in TypeScript.

148
00:10:12.088 --> 00:10:16.245
You could also go the other way
where I could make this NID and

149
00:10:16.245 --> 00:10:17.917
then I could extend it.

150
00:10:17.917 --> 00:10:20.813
Six of one, half dozen of the other.

151
00:10:20.813 --> 00:10:22.846
Great, and so where was I?

152
00:10:28.332 --> 00:10:31.704
&gt;&gt; Steve Kinney: We got the users.

153
00:10:31.704 --> 00:10:35.607
Req body is a problem, but
in this case, we got that.

154
00:10:42.891 --> 00:10:46.755
&gt;&gt; Steve Kinney: Boom,
everything's what it should be.

155
00:10:46.755 --> 00:10:51.680
And then delete is, let's see,
we've just got that id.

156
00:10:52.866 --> 00:10:56.182
&gt;&gt; Steve Kinney: And
you're like, hey, Steve,

157
00:10:56.182 --> 00:11:01.164
I am bored watching you
with four CRUD endpoints.

158
00:11:01.164 --> 00:11:08.207
Yes, we're getting somewhere, I'm building
towards something here, I promise.

159
00:11:08.207 --> 00:11:15.419
Great, index, should we find the index?

160
00:11:21.126 --> 00:11:22.958
&gt;&gt; Steve Kinney: See, look, type safety,

161
00:11:22.958 --> 00:11:26.710
helping me in ways that it
wasn't going to a second ago.

162
00:11:26.710 --> 00:11:28.288
Great, so on and so forth.

163
00:11:28.288 --> 00:11:30.977
Cool, everything is what
I think it should be.

164
00:11:30.977 --> 00:11:35.555
All right, this basically lets you run
the tests or run the actual server.

165
00:11:35.555 --> 00:11:41.391
So we've got that in place, and
now I've got this little tiny,

166
00:11:41.391 --> 00:11:47.351
little CRUD endpoint is now
completely type-safed up, right?

167
00:11:47.351 --> 00:11:52.620
We now know that everything is what we
think it is, or it will blow up, right?

168
00:11:52.620 --> 00:11:55.350
And that point, we would implement
some logic to catch the error,

169
00:11:55.350 --> 00:11:56.437
send the 400, right?

170
00:11:56.437 --> 00:12:02.033
So it is slightly too express-specific,
and just kind of next to the core themes

171
00:12:02.033 --> 00:12:08.069
that we should be talking about that we're
not gonna do it, but theoretically there.

172
00:12:08.069 --> 00:12:13.327
And I could begin to refine some
of these a little bit, right?

173
00:12:13.327 --> 00:12:15.455
This is gonna be more than
just the TypeScript part.

174
00:12:15.455 --> 00:12:18.369
I will now make sure the email
is actually an email, right?

175
00:12:18.369 --> 00:12:23.061
Could I have found an email RegX over
stack overflow like I have done for years?

176
00:12:23.061 --> 00:12:25.367
Sure, but will this also do the trick?

177
00:12:25.367 --> 00:12:31.843
If we wanna make sure this is a UUID,
right, we can get both of those as well.

178
00:12:31.843 --> 00:12:35.288
And now no red lines in my mini map,
right?

179
00:12:35.288 --> 00:12:39.455
So now we can also above and beyond,
cuz it still satisfies that type.

180
00:12:39.455 --> 00:12:43.543
And this is where I might flip some
of the logic, so if you wanna see.

181
00:12:50.433 --> 00:12:53.688
&gt;&gt; Steve Kinney: All right, so there are
six of one that have done the other, but

182
00:12:53.688 --> 00:12:56.884
I had the extra safety of knowing
this will actually be a UUID,

183
00:12:56.884 --> 00:12:59.547
this will actually be an email,
so on and so forth.

184
00:12:59.547 --> 00:13:04.318
And I basically get that for
free with a grand total of what,

185
00:13:04.318 --> 00:13:10.339
I don't know how to count parentheses,
6, 7, 12 extra characters.

186
00:13:10.339 --> 00:13:13.793
Count the dots, 14 characters,
not bad, right, I'll take it.

187
00:13:13.793 --> 00:13:16.318
That all of a sudden,
I look like a 10X engineer at work.

188
00:13:16.318 --> 00:13:24.172
All right, great, so now we have a totally
effectively type-safed API in place.

189
00:13:24.172 --> 00:13:28.625
Again, with more validation
than we would've had normally.

190
00:13:28.625 --> 00:13:32.025
Everything else that extends
from this works, right?

191
00:13:32.025 --> 00:13:35.272
So now the big question is,
how do we do this again at scale?

