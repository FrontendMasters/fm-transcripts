WEBVTT

1
00:00:00.338 --> 00:00:03.293
&gt;&gt; Steve Kinney: So all of a sudden,
as long as you have that contract, and

2
00:00:03.293 --> 00:00:07.313
if you do the work for that contract and
you can figure out a way to generate it.

3
00:00:07.313 --> 00:00:14.391
You can have at least parts of these
entire contracts handled for you, right?

4
00:00:14.391 --> 00:00:19.425
There are some ways to do
it on the server as well.

5
00:00:19.425 --> 00:00:24.423
So one really kind of easy way is
there is this tool called, again,

6
00:00:24.423 --> 00:00:27.117
the names are everything you need.

7
00:00:27.117 --> 00:00:33.493
There's one called Open API
express validator, right?

8
00:00:33.493 --> 00:00:35.741
It's like an SEO game at some point,
right?

9
00:00:35.741 --> 00:00:39.588
You just name it the most obvious
thing in the world, and well,

10
00:00:39.588 --> 00:00:43.450
you can install it as middleware
in your express application.

11
00:00:43.450 --> 00:00:44.872
I would just probably
do it in development.

12
00:00:44.872 --> 00:00:48.076
I guess you could do it, if you have
good error handling in production.

13
00:00:48.076 --> 00:00:53.543
And then should you
break your own contract?

14
00:00:53.543 --> 00:00:56.042
You can get alerted to it, right?

15
00:00:56.042 --> 00:01:00.156
And using it is incredibly easy as well.

16
00:01:00.156 --> 00:01:03.580
So on the front end,
generate a client automatically.

17
00:01:03.580 --> 00:01:06.853
You know it's type safe based
on the contract, right?

18
00:01:06.853 --> 00:01:08.767
You don't have to do all this odd stuff.

19
00:01:08.767 --> 00:01:10.219
Again, you need to have the contract,

20
00:01:10.219 --> 00:01:11.984
a lot of things you might
not be starting there.

21
00:01:11.984 --> 00:01:16.287
So we've got the tools on the low level,
we've got the tools on the high level.

22
00:01:16.287 --> 00:01:19.621
Jumping back over to the server.

23
00:01:19.621 --> 00:01:28.636
So we can grab this OpenAPIValidator,
&gt;&gt; Steve Kinney: And

24
00:01:28.636 --> 00:01:32.202
all that we really that seems
like too much to import.

25
00:01:35.160 --> 00:01:36.530
&gt;&gt; Steve Kinney: Cool all we can do,

26
00:01:36.530 --> 00:01:40.136
all we have to do here is
install it as middleware.

27
00:01:44.861 --> 00:01:49.431
&gt;&gt; Steve Kinney: And
we point it to what it should do.

28
00:01:49.431 --> 00:01:51.119
Validate the requests and responses.

29
00:01:51.119 --> 00:01:53.970
Here we would actually want the dot Json.

30
00:01:53.970 --> 00:01:58.231
And now you can set things to like
validate whether it should throw errors,

31
00:01:58.231 --> 00:02:00.200
where should log issues, right?

32
00:02:00.200 --> 00:02:03.920
If your express API is
violating the contract,

33
00:02:03.920 --> 00:02:08.296
your server will know and
you can fix the issue, right?

34
00:02:08.296 --> 00:02:13.187
Right, or, you can theoretically take
those same types that you generated and

35
00:02:13.187 --> 00:02:14.942
use it with the middleware.

36
00:02:14.942 --> 00:02:17.450
We'll talk about how to create
the Zod schemas based out of that.

37
00:02:17.450 --> 00:02:19.424
You have lots of options, right?

38
00:02:19.424 --> 00:02:22.002
Which one you choose to use will work for
you.

39
00:02:22.002 --> 00:02:26.642
This one will at least let you know
that bad things are happening, right?

40
00:02:26.642 --> 00:02:28.597
You can also, again, say,

41
00:02:28.597 --> 00:02:34.236
play the same game that we played with our
middleware and the Zod schemas, right?

42
00:02:34.236 --> 00:02:35.729
You can create all the types, and

43
00:02:35.729 --> 00:02:39.048
then you will get type notifications
if you are not doing the right thing.

44
00:02:39.048 --> 00:02:43.786
How you go about this depends, but
both sides can use the same contract and

45
00:02:43.786 --> 00:02:47.312
have the same safety guarantees and
know everything.

46
00:02:47.312 --> 00:02:50.584
It just becomes an infrastructure
game at this point.

47
00:02:50.584 --> 00:02:55.015
And just to show you how easy it
is to generate these Zod schemas,

48
00:02:55.015 --> 00:02:57.407
let's take a look at that as well.

49
00:02:57.407 --> 00:03:01.895
This is a really great library and
I'm gonna go to the page and

50
00:03:01.895 --> 00:03:05.604
visit it with you because
it's totally worth it.

51
00:03:05.604 --> 00:03:10.954
So this is a library, it does not have
a name that explains exactly what it does.

52
00:03:10.954 --> 00:03:17.756
But it will actually, let's try this.

53
00:03:17.756 --> 00:03:20.962
Yeah, the sidebar once again tells
you everything you need to know.

54
00:03:20.962 --> 00:03:25.047
We're gonna use it to generate
the Zod types because, as you can see,

55
00:03:25.047 --> 00:03:28.799
it can generate a react query client for
you, a used SWR client.

56
00:03:28.799 --> 00:03:33.195
It takes the OpenAPI schema and
can spit out lots of different things.

57
00:03:33.195 --> 00:03:37.636
You use Axios, great,
you can get an Axios client, right?

58
00:03:37.636 --> 00:03:41.066
You got the fetch one,
which we saw in that other library.

59
00:03:41.066 --> 00:03:43.673
You all know what mock service worker is?

60
00:03:43.673 --> 00:03:48.319
Yeah, so mock service worker is
effectively service workers can hijack

61
00:03:48.319 --> 00:03:50.996
the network, request coming in and out.

62
00:03:50.996 --> 00:03:54.628
And it's a way that, let's say,
you've agreed on the API contract, but

63
00:03:54.628 --> 00:03:56.658
the backend team is not done yet, right?

64
00:03:56.658 --> 00:04:02.260
It will stub out all of the stuff
according to the API contract,

65
00:04:02.260 --> 00:04:07.986
you can generate fake API responses,
do all the stuff, right?

66
00:04:07.986 --> 00:04:10.231
And then when the API is ready,
you remove that layer.

67
00:04:10.231 --> 00:04:12.048
Or again,
maybe you're just doing tests, right?

68
00:04:12.048 --> 00:04:14.978
You have all that in place as well.

69
00:04:14.978 --> 00:04:18.539
Angular, all of a sudden,
it has kinda built in support for

70
00:04:18.539 --> 00:04:20.115
pretty much everything.

71
00:04:20.115 --> 00:04:25.799
We're going to look at the ability

72
00:04:25.799 --> 00:04:30.503
to generate the Zod types and

73
00:04:30.503 --> 00:04:33.446
OpenAPI schema.

74
00:04:33.446 --> 00:04:36.752
But as you can see,
depending on what your flavor is,

75
00:04:36.752 --> 00:04:38.820
there are many things you can do.

76
00:04:38.820 --> 00:04:41.897
Does take a little bit of configuration,
but as you can see, not too much.

77
00:04:41.897 --> 00:04:44.414
Tell me, this is actually
already in the code base, so

78
00:04:44.414 --> 00:04:46.130
that's why we're looking in here.

79
00:04:46.130 --> 00:04:47.683
You can look in my editor too.

80
00:04:47.683 --> 00:04:50.701
Tell me where the input file is,
again, and you could clone this down.

81
00:04:50.701 --> 00:04:53.561
I think even for
that Typescript one that we did earlier,

82
00:04:53.561 --> 00:04:55.716
you can actually point it at a URL, right?

83
00:04:55.716 --> 00:04:58.490
So as long as it's hosted somewhere and

84
00:04:58.490 --> 00:05:03.628
there are a bunch of different services
for just like CDNs for Git repos.

85
00:05:03.628 --> 00:05:06.502
You can just pull it down from
whatever main is all the time.

86
00:05:06.502 --> 00:05:10.868
I literally have it as like
a post install for npm, right?

87
00:05:10.868 --> 00:05:14.123
Anytime you run npm install or something,
we pull down the latest specs so

88
00:05:14.123 --> 00:05:15.448
I can see if something broke.

89
00:05:15.448 --> 00:05:17.474
But we have a backwards compatible API, so

90
00:05:17.474 --> 00:05:19.511
I know that nothing
broke most of the time.

91
00:05:19.511 --> 00:05:22.194
So here we can just say,
OK, I wanna output Zod.

92
00:05:22.194 --> 00:05:26.003
You can either do split or one big file.

93
00:05:26.003 --> 00:05:30.542
Which one you choose is probably
dependent on how big your code base is.

94
00:05:30.542 --> 00:05:34.896
Obviously, if it's big, split it, so you
can do tree shaking and code splitting.

95
00:05:34.896 --> 00:05:37.756
If it's small, for our cases,
we'll keep it single.

96
00:05:37.756 --> 00:05:42.009
So then, what you're able to do,

97
00:05:42.009 --> 00:05:47.437
I'm gonna grab this just so
I can remember,

98
00:05:47.437 --> 00:05:52.583
is we can go in here, back into my client.

99
00:05:52.583 --> 00:05:56.708
And you can say,
I've got the same config right here.

100
00:05:56.708 --> 00:06:01.942
And then we can run that,
&gt;&gt; Steve Kinney: And

101
00:06:01.942 --> 00:06:06.891
you can see it did create
a new file called schemas.ts,

102
00:06:06.891 --> 00:06:11.840
where import Zod, and
based on that OpenAPI contract,

103
00:06:11.840 --> 00:06:16.066
generated all of my Zod schemas for
me, right?

104
00:06:16.066 --> 00:06:20.649
Again, great,
if you have an OpenAPI spec, obviously,

105
00:06:20.649 --> 00:06:26.177
a little bit harder to navigate if
you don't, but like super useful.

106
00:06:26.177 --> 00:06:29.358
And again,
you can start in either direction, right?

107
00:06:29.358 --> 00:06:30.282
Sometimes you might have it.

108
00:06:30.282 --> 00:06:31.731
You can also, again,

109
00:06:31.731 --> 00:06:36.475
create an open API schema through using
all the Zod Schemas that you made.

110
00:06:36.475 --> 00:06:39.191
But obviously,
there's a little bit more ceremony and

111
00:06:39.191 --> 00:06:43.117
work that's gonna take someone on your
team a few days, not weeks or months, but

112
00:06:43.117 --> 00:06:45.865
more time than anyone wants
to spend right now doing it.

113
00:06:45.865 --> 00:06:49.057
But yeah, you can begin to pull
those things together as well, and

114
00:06:49.057 --> 00:06:51.113
there's validators or so on and so forth.

115
00:06:51.113 --> 00:06:53.465
But yeah, you can create the schemas,
you can create clients.

116
00:06:53.465 --> 00:06:55.573
You can do all those things
once you have this and

117
00:06:55.573 --> 00:06:58.007
then you're no longer doing
that trust game, right?

118
00:06:58.007 --> 00:06:59.210
You know that there is a contract.

119
00:06:59.210 --> 00:07:03.826
And yes, I am on call for a reason,
because somebody will make a boo-boo,

120
00:07:03.826 --> 00:07:08.464
you'll find out ways in which your
CICD process didn't catch something.

121
00:07:08.464 --> 00:07:13.949
The goal is to get, yeah, I would love
to tell you we can get to 100%, right?

122
00:07:13.949 --> 00:07:17.097
We can probably get to 99 point,
some egregious number of 9s, and

123
00:07:17.097 --> 00:07:19.499
that is probably good enough for
us in a lot of cases.

124
00:07:19.499 --> 00:07:23.695
But there will always be ways to slip
through and mistakes are gonna be made.

125
00:07:23.695 --> 00:07:26.864
But again, the more tooling that you use,

126
00:07:26.864 --> 00:07:30.573
the less likely that's going to happen,
right?

127
00:07:30.573 --> 00:07:34.952
It is, we saw even when we're manually
putting the Zod types in there ourselves,

128
00:07:34.952 --> 00:07:38.773
or Zod schemas, if we missed one,
it was still any or unknown, right?

129
00:07:38.773 --> 00:07:40.293
Here we are, then at least.

130
00:07:40.293 --> 00:07:44.869
Again, we have a contract,
we can run it on both the server and

131
00:07:44.869 --> 00:07:47.423
we can run it on the client as well.

132
00:07:47.423 --> 00:07:52.313
Things will break, we were talking
about this during one of the breaks,

133
00:07:52.313 --> 00:07:58.101
there are still the problems become more
social than they become technical, right?

134
00:07:58.101 --> 00:08:02.907
Which is, okay, has every team invested
enough to make sure that there's

135
00:08:02.907 --> 00:08:06.056
one end-to-end suite
before anyone deploys.

136
00:08:06.056 --> 00:08:11.058
Well, then you've got to have maybe a test
environment that is stable at all times,

137
00:08:11.058 --> 00:08:14.591
the ability to spin up fresh users,
to get to a lot of cases.

138
00:08:14.591 --> 00:08:17.570
Maybe you can't do all those things for
just because,

139
00:08:17.570 --> 00:08:21.149
the amount of teams that would need
to figure it all out together.

140
00:08:21.149 --> 00:08:25.625
It's just you can figure that stuff
on a 30 person company, we did.

141
00:08:25.625 --> 00:08:27.878
I also worked at a 7,000 person company.

142
00:08:27.878 --> 00:08:30.773
Turns out, those things are harder.

143
00:08:30.773 --> 00:08:35.639
Getting 7,000 teams or not 7,000, but
100 teams to sign on to things is

144
00:08:35.639 --> 00:08:38.806
a lot harder than getting 3
teams to sign on to things.

145
00:08:38.806 --> 00:08:40.437
But depending on where you are,

146
00:08:40.437 --> 00:08:44.072
you can always use those lower level
ones to at least ensure your walls.

147
00:08:44.072 --> 00:08:46.850
Or if you can get everyone on
the same page with an API spec,

148
00:08:46.850 --> 00:08:48.457
you can begin to generate stuff.

149
00:08:48.457 --> 00:08:51.005
Which one of these approaches
that you take really

150
00:08:51.005 --> 00:08:53.806
depends on the situation
you're dealing with right?

151
00:08:53.806 --> 00:08:56.386
The smallest ones are probably
the easiest to start with, though, and

152
00:08:56.386 --> 00:08:57.639
you can get some safety tomorrow.

153
00:08:57.639 --> 00:09:01.247
These bigger ones are obviously going
to be the most stable and consistent.

154
00:09:01.247 --> 00:09:05.387
And also, who doesn't love getting all
these schemas generated for them or

155
00:09:05.387 --> 00:09:06.816
entire clients, right?

156
00:09:06.816 --> 00:09:10.502
With some of these, you can just
generate if you use react react hooks or

157
00:09:10.502 --> 00:09:14.947
svelte like runes or what have you, to be
able to do all these things, that's great.

158
00:09:14.947 --> 00:09:18.195
Do that because you're not getting
paid more for doing it by hand,

159
00:09:18.195 --> 00:09:22.024
like there's no such thing as an artisanal
Zod scheme being worth more than one

160
00:09:22.024 --> 00:09:23.026
that is generated.

161
00:09:23.026 --> 00:09:25.302
The generated one is
probably more accurate.

