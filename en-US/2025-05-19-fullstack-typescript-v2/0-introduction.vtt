WEBVTT

1
00:00:00.000 --> 00:00:01.089
&gt;&gt; Steve Kinney: Hello, my name is Steve.

2
00:00:01.089 --> 00:00:02.152
Let's talk about TypeScript.

3
00:00:02.152 --> 00:00:05.095
We're not gonna talk about
TypeScript in one code base,

4
00:00:05.095 --> 00:00:08.416
we're gonna talk about TypeScript
across code bases, right?

5
00:00:08.416 --> 00:00:14.333
Cuz I think there is a getting the value
prop of TypeScript I think at this point,

6
00:00:14.333 --> 00:00:19.736
I'm going to assume that you've
signed up for the newsletter, right?

7
00:00:19.736 --> 00:00:25.038
But there are some additional
problems that come along when

8
00:00:25.038 --> 00:00:30.550
we have to deal with this gnarly
little thing called reality,

9
00:00:30.550 --> 00:00:34.896
which is,
a lot of times we end up with maybe one or

10
00:00:34.896 --> 00:00:39.370
two different kinds of
forms that our code takes.

11
00:00:39.370 --> 00:00:43.668
And each and every one of those
individually, can be type safe and

12
00:00:43.668 --> 00:00:48.843
perfect and everything, not a single
any to be found, everything's great.

13
00:00:48.843 --> 00:00:52.595
The problem is in the middle, right?

14
00:00:52.595 --> 00:00:58.414
There's a lot of trust that happens
that the things you receive from

15
00:00:58.414 --> 00:01:05.067
the other side of the HTTP wall, in a lot
of cases, adheres to the same types.

16
00:01:05.067 --> 00:01:08.956
And particularly when it's in different
code bases, but even in general, right,

17
00:01:08.956 --> 00:01:12.461
there's not a lot of really great ways,
and there's a few we'll obviously

18
00:01:12.461 --> 00:01:15.613
talk about them, that's why we're
spending this time together.

19
00:01:15.613 --> 00:01:20.188
But not a lot of great built in ways
to just make sure that you are actually

20
00:01:20.188 --> 00:01:23.328
getting what you think you are getting,
right?

21
00:01:23.328 --> 00:01:27.727
So, all of that type safety that
you have in your application,

22
00:01:27.727 --> 00:01:30.716
is usually based on a lot of trust, right?

23
00:01:30.716 --> 00:01:34.284
That everything coming over the wire
actually adheres to that type, and

24
00:01:34.284 --> 00:01:38.390
then you work them to those assumptions,
and then you carry on with your merry way.

25
00:01:38.390 --> 00:01:43.257
One of the things we are talking about
today is how to actually take the very

26
00:01:43.257 --> 00:01:46.712
optimistic amount of trust
that you might have, and

27
00:01:46.712 --> 00:01:50.975
turn that into a little bit more
of a pessimistic trust, right?

28
00:01:50.975 --> 00:01:55.902
Where you are a lot more confident that
everything is the way that you think it is

29
00:01:55.902 --> 00:01:58.964
because you trust,
because you have verified,

30
00:01:58.964 --> 00:02:01.144
you trust cuz you have validated.

31
00:02:01.144 --> 00:02:05.436
And so, we're gonna look at some
strategies for keeping all of your

32
00:02:05.436 --> 00:02:10.278
types and all of your data the way that
you think it is across an application.

33
00:02:10.278 --> 00:02:14.584
Cuz it's actually a little bit more
complicated than this as well, right?

34
00:02:14.584 --> 00:02:18.762
It's not just, does the API give you back
what you think you're getting back, right?

35
00:02:18.762 --> 00:02:22.461
Is the client sending payloads
in the way that you think it is?

36
00:02:22.461 --> 00:02:25.008
There's other things involved normally,
right?

37
00:02:25.008 --> 00:02:29.362
Is stuff coming out of the database
the way that you think it is, right?

38
00:02:29.362 --> 00:02:32.764
Is stuff going in the way
that it ought to, right?

39
00:02:32.764 --> 00:02:36.280
And the strategies, luckily,
are roughly the same.

40
00:02:36.280 --> 00:02:39.552
So kind of thinking about all
the different ways that parts of our

41
00:02:39.552 --> 00:02:42.104
application interact with other parts,
right?

42
00:02:42.104 --> 00:02:46.176
And this, again, we're not gonna take this
to its national conclusion, this slide,

43
00:02:46.176 --> 00:02:48.831
but this, again,
is probably a little bit simplistic.

44
00:02:48.831 --> 00:02:53.335
If there are a bunch of microservices,
add another box every microservice, right?

45
00:02:53.335 --> 00:02:56.178
If you've broken other pieces out,
add another box for

46
00:02:56.178 --> 00:03:00.536
every kind of different piece that you've
broken everything into, a lot of that kind

47
00:03:00.536 --> 00:03:04.974
of breaking stuff apart, is really helpful
for us to build scalable large code bases.

48
00:03:04.974 --> 00:03:09.326
But for every problem that we solve,
we introduce a little bit more complexity,

49
00:03:09.326 --> 00:03:12.017
and with that complexity
come a few new problems.

50
00:03:12.017 --> 00:03:15.759
So, we're gonna talk a lot today
about how to solve those problems and

51
00:03:15.759 --> 00:03:19.884
how to basically make sure that your pager
does not go off at 2 in the morning,

52
00:03:19.884 --> 00:03:21.488
like mine has more than once.

53
00:03:21.488 --> 00:03:26.279
So let's kind of look at the core thesis
that we're going to try to solve today in

54
00:03:26.279 --> 00:03:30.783
a new a bunch of different ways,
which is, a lot of times we'll have some,

55
00:03:30.783 --> 00:03:33.955
this is obviously a very
simple like fetch request.

56
00:03:33.955 --> 00:03:37.121
We're just fetching some
data from the API, right?

57
00:03:37.121 --> 00:03:41.877
We've seen it before, call fetch,
make sure the response is okay,

58
00:03:41.877 --> 00:03:46.559
translate into JSON, hope it's JSON,
right, so on and so forth.

59
00:03:46.559 --> 00:03:51.375
And we can have a perfectly
typed client side app, but

60
00:03:51.375 --> 00:03:56.084
we have some problems here,
which is out of the box,

61
00:03:56.084 --> 00:03:59.629
that response to JSON, very quietly.

62
00:03:59.629 --> 00:04:03.565
It's of the type, any, and
any is kind of an interesting one,

63
00:04:03.565 --> 00:04:07.971
because if you have one, any,
it just bypasses everything, right?

64
00:04:07.971 --> 00:04:09.638
Nothing stops it, right?

65
00:04:09.638 --> 00:04:11.979
And so, a lot of times
you'll see in your own code,

66
00:04:11.979 --> 00:04:13.668
you can use something like unknown,

67
00:04:13.668 --> 00:04:17.225
which is assume nothing about this,
I will have to check everything myself.

68
00:04:17.225 --> 00:04:21.657
Any will just pass right through
any type check that you have.

69
00:04:21.657 --> 00:04:25.110
Even if, in this case,
you didn't even type that any,

70
00:04:25.110 --> 00:04:29.664
nobody in your team put that any there,
that was courtesy of the browser or

71
00:04:29.664 --> 00:04:33.791
of the Fetch API, and the types
that come along with that, right?

72
00:04:33.791 --> 00:04:40.013
And so, there are strategies for at least
getting some type annotations around it.

73
00:04:40.013 --> 00:04:41.899
But a lot of those things are flawed.

74
00:04:41.899 --> 00:04:46.858
I can just say, hey, this getTask
is actually gonna return a promise

75
00:04:46.858 --> 00:04:49.780
with a task in it, sounds good, right?

76
00:04:49.780 --> 00:04:54.235
And now, it is what I think it is.

77
00:04:54.235 --> 00:04:57.728
Emphasis on what I think it is, right?

78
00:04:57.728 --> 00:04:59.524
Because I'm just saying,

79
00:04:59.524 --> 00:05:03.356
I could have gotten back
literally anything from the API.

80
00:05:03.356 --> 00:05:07.367
I'm just going to tell TypeScript
that it's what I think it is,

81
00:05:07.367 --> 00:05:08.791
and hope for the best.

82
00:05:08.791 --> 00:05:10.231
And that's useful for

83
00:05:10.231 --> 00:05:15.012
stuff like IntelliSense, but is it
actually giving me any actual safety?

84
00:05:15.012 --> 00:05:20.617
Probably not, it's giving me safety
after I've let it into the house, right?

85
00:05:20.617 --> 00:05:23.631
But I don't actually
know what I let it in.

86
00:05:23.631 --> 00:05:26.677
Cuz again,
it is actually still that promise any, but

87
00:05:26.677 --> 00:05:30.387
we're just saying but pretend it's
a task that comes out of here,

88
00:05:30.387 --> 00:05:34.378
cuz any will pass through anything,
and so, it passes right through.

89
00:05:34.378 --> 00:05:36.677
There's nothing yelling at you saying,

90
00:05:36.677 --> 00:05:39.638
you didn't return a promise
that resolves to a task.

91
00:05:39.638 --> 00:05:44.223
Because the any slides right through it,
but at this point in your client side code

92
00:05:44.223 --> 00:05:48.754
base, you can just pretend and everything
else will adhere, as if it was a task.

93
00:05:48.754 --> 00:05:53.783
The problem being, maybe it isn't,
right, and it is one of

94
00:05:53.783 --> 00:05:59.321
those bugs that will definitely
get you just often enough, cool.

95
00:05:59.321 --> 00:06:02.910
So, obviously the problem
exists on the other side.

96
00:06:02.910 --> 00:06:07.585
So this is like an express route, right,
where we've got a request body and

97
00:06:07.585 --> 00:06:11.473
out of the box, as we can see,
guess what that request body is?

98
00:06:11.473 --> 00:06:12.454
Any, right?

99
00:06:12.454 --> 00:06:16.446
So, effectively, the browser,
the client side code,

100
00:06:16.446 --> 00:06:21.616
is doing a lot of trust that the API is
giving what we think it ought to give.

101
00:06:21.616 --> 00:06:23.398
But on the same side,

102
00:06:23.398 --> 00:06:28.549
the server also exhibiting
an equal amount of trust, right?

103
00:06:28.549 --> 00:06:29.805
That in this case,

104
00:06:29.805 --> 00:06:34.448
it is actually going to be the request
body that we think it is, right?

105
00:06:34.448 --> 00:06:38.350
Again, we have similar strategies
that we can try, right?

106
00:06:38.350 --> 00:06:43.095
We can do all sorts that we kind of do a
bunch of conditionals to see, so on and so

107
00:06:43.095 --> 00:06:43.607
forth.

108
00:06:43.607 --> 00:06:48.583
But again, at the end of the day, there
is a certain amount, anything coming from

109
00:06:48.583 --> 00:06:53.289
the outside world is an unknown, but
it's not even an unknown, isn't any.

110
00:06:53.289 --> 00:06:57.002
So, what we need to do is kind of
understand that kind of the type gap of

111
00:06:57.002 --> 00:06:58.232
where things happen.

112
00:06:58.232 --> 00:07:02.675
And so, here is some very,
very accurate, objective,

113
00:07:02.675 --> 00:07:08.048
data-driven science for you,
in which I sat there and thought about

114
00:07:08.048 --> 00:07:13.624
all the times I have had to go to
a blameless postmortem for an incident.

115
00:07:13.624 --> 00:07:18.270
And this is my very scientific
review of what the cause was.

116
00:07:18.270 --> 00:07:21.059
As you can see, 53% of the time

117
00:07:21.059 --> 00:07:25.847
was the backend team changed
the API without telling us.

118
00:07:25.847 --> 00:07:32.355
The other very scientific 29%,
was somebody upgraded something and

119
00:07:32.355 --> 00:07:36.523
that changed the API
without telling anyone.

120
00:07:36.523 --> 00:07:39.506
And then there's always the one
where someone deleted an S3 bucket.

121
00:07:39.506 --> 00:07:42.709
That's always a thing that can happen too,
we're not gonna cover that one today,

122
00:07:42.709 --> 00:07:44.234
that one you're still on your own for.

123
00:07:44.234 --> 00:07:49.187
But for the 72 percent, no, I don't know,

124
00:07:49.187 --> 00:07:53.889
can't do math, live math, live edition.

125
00:07:53.889 --> 00:07:58.307
We're gonna kind of cover ways and
infrastructure that you can build to make

126
00:07:58.307 --> 00:08:03.225
sure the lion's share of this pie graph of
made up numbers, doesn't happen to you.

127
00:08:03.225 --> 00:08:07.844
This is, again, just my feels across
three or four different jobs.

128
00:08:07.844 --> 00:08:11.172
But this is gonna be a problem that
we try to solve today, which is,

129
00:08:11.172 --> 00:08:14.633
how do we make sure that a change
to the API doesn't break something?

130
00:08:14.633 --> 00:08:17.987
And again,
I like to throw shade at the backend

131
00:08:17.987 --> 00:08:22.982
engineers cuz I'm a frontend engineer,
it goes both ways, right?

132
00:08:22.982 --> 00:08:27.113
And the idea is, we're gonna look at how
to solve for that in both directions.

133
00:08:27.113 --> 00:08:32.186
And also the database, cuz the database is
sometimes the worst offender, which is,

134
00:08:32.186 --> 00:08:36.926
is SQL gonna call that true or false, or
is it gonna call it one and zero, right?

135
00:08:36.926 --> 00:08:41.916
And JavaScript, most of the time, it
doesn't matter because zero is falsy and

136
00:08:41.916 --> 00:08:46.829
one is truthy, but you can imagine a world
where in some way, shape, or form,

137
00:08:46.829 --> 00:08:48.038
it might bite you.

138
00:08:48.038 --> 00:08:51.764
Great, so that's the problem
that we seek to solve and

139
00:08:51.764 --> 00:08:54.194
we're gonna try to close that gap.

140
00:08:54.194 --> 00:08:58.573
I didn't fully introduce the little out
course website where I put up all all my

141
00:08:58.573 --> 00:08:59.909
notes, but it is here.

142
00:08:59.909 --> 00:09:01.729
There is a repo to grab as well,

143
00:09:01.729 --> 00:09:05.161
that has the example out there
we're gonna work on today.

144
00:09:05.161 --> 00:09:10.007
And then the one of the things I wanna
call out is, also just literally all

145
00:09:10.007 --> 00:09:14.310
of my notes, more than we will
ever get to today as well, right?

146
00:09:14.310 --> 00:09:18.262
And so, if there are little kind of
more esoteric things as well, and

147
00:09:18.262 --> 00:09:22.554
you're kind of looking at how to do,
I might have just, they are my notes,

148
00:09:22.554 --> 00:09:24.142
they're up there though.

149
00:09:24.142 --> 00:09:29.362
And then as well as if you want to kind
of double back and look at something

150
00:09:29.362 --> 00:09:34.245
that you heard me say so on and so
forth, it might be in here as well.

