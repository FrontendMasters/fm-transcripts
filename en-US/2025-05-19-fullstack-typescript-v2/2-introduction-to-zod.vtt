WEBVTT

1
00:00:00.000 --> 00:00:02.386
&gt;&gt; Steve Kinney: Let's take
a look at Zod for a second.

2
00:00:02.386 --> 00:00:05.550
We can see that there's a few things
to kind of take note of when we look

3
00:00:05.550 --> 00:00:06.158
at the site.

4
00:00:06.158 --> 00:00:09.289
One is, we'll see,
I'll look at the sidebar in a moment.

5
00:00:09.289 --> 00:00:13.740
But two is scrolling past the sponsors.

6
00:00:13.740 --> 00:00:17.539
This is what I want to look
at the ecosystem, right?

7
00:00:17.539 --> 00:00:21.556
One of the things that I want
to kind of encourage you is,

8
00:00:21.556 --> 00:00:24.377
if there are other things that you use,

9
00:00:24.377 --> 00:00:28.761
there might be libraries for
kind of integrating with that.

10
00:00:28.761 --> 00:00:31.793
So you can kind of get a lot of things for
free.

11
00:00:31.793 --> 00:00:36.664
I think more importantly, yes, you can
use it with React, hook form that the we

12
00:00:36.664 --> 00:00:41.697
talked about, we joked earlier, that
stuff, users type might be problematic.

13
00:00:41.697 --> 00:00:46.642
And having the form validation, so
your same schema that you're using on

14
00:00:46.642 --> 00:00:51.602
the request body in Express or when
you're gonna get it back from the API.

15
00:00:51.602 --> 00:00:55.994
You can also use those same schemas for
the forms that your users are filling out.

16
00:00:55.994 --> 00:00:59.449
Again, if you use Formik,
there's other ones, so on and so forth.

17
00:00:59.449 --> 00:01:01.547
And there's for spell kit,

18
00:01:01.547 --> 00:01:06.271
there's the ability then also to
turn them into JSON schema, or

19
00:01:06.271 --> 00:01:11.349
take a bunch of schemas and
turn them into type script types, right?

20
00:01:11.349 --> 00:01:15.669
So for a lot of these things, what I
want to call out is, if there are things

21
00:01:15.669 --> 00:01:20.153
that you think you need to do very
tediously, it is worth at least checking.

22
00:01:20.153 --> 00:01:24.852
To see if somebody else did it tediously
first and seeing if you have it as well.

23
00:01:24.852 --> 00:01:28.868
There are some other interesting things
that you can do that you cannot do in

24
00:01:28.868 --> 00:01:29.642
TypeScript.

25
00:01:29.642 --> 00:01:33.632
And so, like I said before,
there is a coercion,

26
00:01:33.632 --> 00:01:38.668
which is kinda nice,
which is the ability to say like a string.

27
00:01:38.668 --> 00:01:41.714
You can also actually,
but like an email, right?

28
00:01:41.714 --> 00:01:43.272
And obviously Typescript's
not going to do that for you.

29
00:01:43.272 --> 00:01:46.674
There's some like template literals
that you can use, but the type will be

30
00:01:46.674 --> 00:01:50.346
a string, but then you can also actually
like make sure that it is truly an email,

31
00:01:50.346 --> 00:01:51.715
something so on and so forth.

32
00:01:51.715 --> 00:01:53.681
Which is also very useful, again, for

33
00:01:53.681 --> 00:01:57.922
when you're receiving it in the API level
before you put it in the database, right?

34
00:01:57.922 --> 00:02:00.590
You can probably take lines and
lines and lines of regex.

35
00:02:00.590 --> 00:02:04.821
And code and stuff to make sure that
the number's positive, so on and so forth,

36
00:02:04.821 --> 00:02:06.855
and probably eliminate that as well.

37
00:02:06.855 --> 00:02:11.757
But if it's something that can coerce
into a string, you can do that first,

38
00:02:11.757 --> 00:02:12.993
so on and so forth.

39
00:02:12.993 --> 00:02:17.816
And there's also the ability to do a lot
of the utility types that we're used to

40
00:02:17.816 --> 00:02:22.149
seeing from Typescript,
all of those are available as well, right?

41
00:02:22.149 --> 00:02:26.447
So you get a little bit more than you get
from TypeScript, and then you can always,

42
00:02:26.447 --> 00:02:29.265
like, create the TypeScript
types out of it as well.

43
00:02:29.265 --> 00:02:33.089
Installing Zod is relatively easy,
the simplest use case.

44
00:02:33.089 --> 00:02:35.748
And we're going to do some
examples together in a second.

45
00:02:35.748 --> 00:02:39.480
But we'll do the high level,
which is like, again, just a string.

46
00:02:39.480 --> 00:02:40.692
It will parse a string.

47
00:02:40.692 --> 00:02:43.053
Just a number, so on and so forth, right?

48
00:02:43.053 --> 00:02:47.429
You can also do things like making sure
that it's a date object or a big int.

49
00:02:47.429 --> 00:02:49.908
All of the things that
you want are in there.

50
00:02:49.908 --> 00:02:54.215
You can start to, then build up things
as well, and then generate those types,

51
00:02:54.215 --> 00:02:57.813
like we said, but there's some
nice things you can do, which is,

52
00:02:57.813 --> 00:03:00.794
you can also make sure that
it's got a minimum length.

53
00:03:00.794 --> 00:03:03.392
Things you can't do in TypeScript,
which is, again,

54
00:03:03.392 --> 00:03:07.097
because you have full access to the data
object itself, because a lot of times,

55
00:03:07.097 --> 00:03:09.941
like TypeScript couldn't help you,
if you if it wanted to.

56
00:03:09.941 --> 00:03:12.419
Again, if it's outside those walls,
you do literals.

57
00:03:12.419 --> 00:03:17.899
So instead of a string, no, no, no,
it should be the string, hello, right?

58
00:03:17.899 --> 00:03:22.365
Or if you want to use this is not
technically like the typescript version of

59
00:03:22.365 --> 00:03:26.615
an enum, but this is like effectively
a union of strengths to say hey,

60
00:03:26.615 --> 00:03:28.430
it should be read the string.

61
00:03:28.430 --> 00:03:31.085
Read the string green, or
the sring blue, right?

62
00:03:31.085 --> 00:03:34.079
If you have something that can
only be a few different strings,

63
00:03:34.079 --> 00:03:36.748
this one will throw in all of
those cases if that's not.

64
00:03:36.748 --> 00:03:40.987
And that's a lot easier than if you had
to try to figure out from the type.

65
00:03:40.987 --> 00:03:45.454
You'd either have to do that by hand or
again, put it into a data structure and

66
00:03:45.454 --> 00:03:48.576
then iterate over it,
this kinda get it all for free.

67
00:03:50.970 --> 00:03:54.461
&gt;&gt; Steve Kinney: Other fun things we
can do, a tuple or tuple, your choice.

68
00:03:54.461 --> 00:03:57.926
I'm not having that fight right now,
is to say like an array of two things,

69
00:03:57.926 --> 00:04:00.804
the first one being a string and
the second one being a number.

70
00:04:00.804 --> 00:04:05.620
The tuple that we probably or tuple,
I haven't decided which one I want to say

71
00:04:05.620 --> 00:04:08.731
because it's not a word I
say out loud that often,

72
00:04:08.731 --> 00:04:12.609
that we see a lot of times is
something like useState in React.

73
00:04:12.609 --> 00:04:17.089
Sure, it's an array, but that first one is
always the current state and the second

74
00:04:17.089 --> 00:04:21.379
thing out of that array from useState is
the ability to set At the state, right?

75
00:04:21.379 --> 00:04:24.648
And so
to know exactly what types those are.

76
00:04:24.648 --> 00:04:26.641
Is incredibly powerful as well.

77
00:04:26.641 --> 00:04:30.670
You can also do unions in this case,
and so

78
00:04:30.670 --> 00:04:35.287
this will be either a string or
a number as well.

79
00:04:35.287 --> 00:04:36.651
Intersections, again,

80
00:04:36.651 --> 00:04:40.743
all of the TypeScript stuff that you know
that you can use, you can use as well.

81
00:04:40.743 --> 00:04:45.050
But where this gets a little bit more
powerful is then you can begin to compose

82
00:04:45.050 --> 00:04:46.811
some of these things, right?

83
00:04:46.811 --> 00:04:48.388
And so if you have a schema,

84
00:04:48.388 --> 00:04:51.614
like we talked about those
nested JavaScript objects,

85
00:04:51.614 --> 00:04:56.573
right, you can just reference a different
schema for that value of that key, right?

86
00:04:56.573 --> 00:05:01.166
Or you can extend one in the same way
you might extend an interface face and

87
00:05:01.166 --> 00:05:02.605
TypeScript, right?

88
00:05:02.605 --> 00:05:07.136
And add more things to it, or grab we can
pick things out of it, so on and so forth.

89
00:05:07.136 --> 00:05:11.166
Do a lot of times, if you find yourself
like rewriting the same things over and

90
00:05:11.166 --> 00:05:12.226
over by hand again.

91
00:05:12.226 --> 00:05:15.001
Keep in mind that you have
a programming language and

92
00:05:15.001 --> 00:05:17.664
you can, like,
begin to compose things as well.

