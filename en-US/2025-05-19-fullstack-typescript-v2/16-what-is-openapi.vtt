WEBVTT

1
00:00:00.000 --> 00:00:02.153
&gt;&gt; Steve Kinney: Having Zod
is really great for

2
00:00:02.153 --> 00:00:06.979
confirming the stuff that comes in
through the gates is valid, but

3
00:00:06.979 --> 00:00:11.565
it's a JavaScript instead of
JavaScript functions, right?

4
00:00:11.565 --> 00:00:15.294
And so that has the problem
of being JavaScript, right?

5
00:00:15.294 --> 00:00:18.876
Which I like JavaScript, I think is great.

6
00:00:18.876 --> 00:00:23.706
However, JavaScript objects don't
work super well in go because they're

7
00:00:23.706 --> 00:00:25.223
different languages.

8
00:00:25.223 --> 00:00:29.264
So obviously this is a very common
problem, especially over the years,

9
00:00:29.264 --> 00:00:32.523
because it turns out there's
a lot of back end languages.

10
00:00:32.523 --> 00:00:37.119
There's one in the browser, and sometimes
back ends are in different languages.

11
00:00:37.119 --> 00:00:41.472
So an open API spec is effectively
more of a convention than any

12
00:00:41.472 --> 00:00:44.161
kind of piece of technology, right?

13
00:00:44.161 --> 00:00:48.090
There's nothing like there's no tech
technically, in an open API spec.

14
00:00:48.090 --> 00:00:52.548
It is simply a convention to follow and
you might see them in yaml,

15
00:00:52.548 --> 00:00:54.423
you might see them in JSON.

16
00:00:54.423 --> 00:00:57.076
They are the same thing, effectively,

17
00:00:57.076 --> 00:01:00.361
where you know it is to
some version of this specs.

18
00:01:00.361 --> 00:01:02.818
This is the Yaml1 in the repo.

19
00:01:02.818 --> 00:01:07.264
Actually in all three folders,
there is a openai.json,

20
00:01:07.264 --> 00:01:09.814
which is for our test schema API.

21
00:01:09.814 --> 00:01:11.738
That one, it's written in JSON as well.

22
00:01:11.738 --> 00:01:13.223
I did both so you could see them.

23
00:01:13.223 --> 00:01:14.645
We'll look at the YAML one right now,

24
00:01:14.645 --> 00:01:16.427
because it's just a little
bit easier to read.

25
00:01:16.427 --> 00:01:18.258
That's kind of the selling point of yaml.

26
00:01:18.258 --> 00:01:22.998
Which is you've got some metadata,
and then you've got for instance,

27
00:01:22.998 --> 00:01:26.429
all of the paths that an API
should support, right?

28
00:01:26.429 --> 00:01:30.043
So here, in this case,
we've got /users that has a get method,

29
00:01:30.043 --> 00:01:33.791
a little bit of information about
what that thing is supposed to do,

30
00:01:33.791 --> 00:01:38.039
a little bit of documentation,
if you will, the parameters that it takes.

31
00:01:38.039 --> 00:01:42.585
And the point that is going
to be somewhat useful for

32
00:01:42.585 --> 00:01:48.837
our purposes is whether you know it or
not that is JSON schema, right?

33
00:01:48.837 --> 00:01:50.730
This is the YAML file
you can go see in JSON.

34
00:01:50.730 --> 00:01:56.554
JSON schema, again, just a convention,
just an agreed upon structure for

35
00:01:56.554 --> 00:02:02.107
defining the parameters of either
the arguments or the return value of.

36
00:02:02.107 --> 00:02:06.607
In this case, an API, but
could literally just be functions, right,

37
00:02:06.607 --> 00:02:10.582
in a language-agnostic format
that everyone just agrees to.

38
00:02:10.582 --> 00:02:16.658
There's, again, no technology
behind this other than committees.

39
00:02:16.658 --> 00:02:20.758
And so
here we've got the path both the get okay,

40
00:02:20.758 --> 00:02:26.570
it takes this search query and then for
what do you want to search for?

41
00:02:26.570 --> 00:02:29.169
And then a page number, right?

42
00:02:29.169 --> 00:02:31.096
What are the responses
that it might give you?

43
00:02:31.096 --> 00:02:38.752
Well, if it's a 200 you're probably
getting back an array of users, right?

44
00:02:38.752 --> 00:02:42.048
And then we'll talk about what is a user,
we'll get there.

45
00:02:42.048 --> 00:02:43.627
Again, you have the same thing for
the post.

46
00:02:43.627 --> 00:02:46.631
What is required in the body and
what is optional in the body?

47
00:02:46.631 --> 00:02:51.472
This should be all mapping to
TypeScript stuff in your head, right?

48
00:02:51.472 --> 00:02:56.148
Cuz, again, that's why it's a standard,
it will map to something in most languages

49
00:02:56.148 --> 00:03:00.391
and there are nuances, right, for
languages that have both ints and floats.

50
00:03:00.391 --> 00:03:02.666
That will be meaningful
in those languages.

51
00:03:02.666 --> 00:03:05.340
In JavaScript,
they'll just both be a number, right?

52
00:03:05.340 --> 00:03:07.894
There are little nuances but

53
00:03:07.894 --> 00:03:13.541
you can basically talk about what
are the parameters in a path?

54
00:03:13.541 --> 00:03:14.922
What are the request body?

55
00:03:14.922 --> 00:03:18.810
What are the responses,
the status codes that you could get

56
00:03:18.810 --> 00:03:23.728
effectively a contract Test for
describing how an API is supposed to work.

57
00:03:23.728 --> 00:03:27.115
And this is useful because then
on the server, you can then say,

58
00:03:27.115 --> 00:03:29.386
okay, we're agreeing to this contract.

59
00:03:29.386 --> 00:03:34.708
Great, I can expect the request bodies
to come in to match these things, right?

60
00:03:34.708 --> 00:03:37.654
And the front end team is like,
yeah, yeah, you can right and

61
00:03:37.654 --> 00:03:39.194
then the front end team is like.

62
00:03:39.194 --> 00:03:44.238
But when I make that API request, like
a get request or the response I get back,

63
00:03:44.238 --> 00:03:47.994
you're going to hold up your
end of the contract, right?

64
00:03:47.994 --> 00:03:52.469
Now obviously you schema validate,
whether that's JSON schema or

65
00:03:52.469 --> 00:03:54.205
Zod schemas or whatever.

66
00:03:54.205 --> 00:03:59.005
You schema validate and again trust, but
verify is the name of the game here.

67
00:03:59.005 --> 00:04:03.712
But it is a standard document for creating
some kinda contract so that both sides,

68
00:04:03.712 --> 00:04:06.799
even if they are in completely
different languages.

69
00:04:06.799 --> 00:04:10.390
And can't share the types in
a mono repo or an NPM package,

70
00:04:10.390 --> 00:04:12.528
right, can theoretically do it.

71
00:04:12.528 --> 00:04:20.017
So at temporal,
we have got a open API doc for HTTP API.

72
00:04:20.017 --> 00:04:22.959
It is generated directly from
the go proto buffs, right,

73
00:04:22.959 --> 00:04:27.041
which is a different standard that I've
got some slides on if we want, but like,

74
00:04:27.041 --> 00:04:29.161
it's just a different way of doing this.

75
00:04:29.161 --> 00:04:33.293
And they automatically
generate that document, and

76
00:04:33.293 --> 00:04:37.344
because it's generated out of their code,
right?

77
00:04:37.344 --> 00:04:41.090
I can trust that it mostly works,
and I have the advantage of since we

78
00:04:41.090 --> 00:04:44.067
are an open source project
with a public exposed API.

79
00:04:44.067 --> 00:04:48.512
The chance of a breaking change
is a lot lower because we

80
00:04:48.512 --> 00:04:51.714
agreed not to do that to our customers.

81
00:04:51.714 --> 00:04:55.177
So means the back-end team is
less likely to do it to me.

82
00:04:55.177 --> 00:04:56.346
Bugs happen, right?

83
00:04:56.346 --> 00:04:59.106
Issues happen, but generally speaking,
it's generated from code,

84
00:04:59.106 --> 00:05:00.541
and we have it ready to rock and roll.

85
00:05:00.541 --> 00:05:06.405
So first you have that paths plural, and
literally, we will do this together and

86
00:05:06.405 --> 00:05:11.333
I do this at work is I just generate
a client to do all the fetch calls.

87
00:05:11.333 --> 00:05:13.278
I don't write a single fetch call myself.

88
00:05:13.278 --> 00:05:18.139
I have a client that I just generate from
their contract that where everything

89
00:05:18.139 --> 00:05:21.502
is perfectly typed, and
we will get there you have and

90
00:05:21.502 --> 00:05:26.319
then under components, it's like,
okay, so this one's only got a user.

91
00:05:26.319 --> 00:05:27.596
This is effectively,

92
00:05:27.596 --> 00:05:32.175
some of this should look somewhat familiar
to what we were doing by hand, right?

93
00:05:32.175 --> 00:05:34.755
This is what a user is, right?

94
00:05:34.755 --> 00:05:37.911
Id, this is kind of from
the examples that we saw earlier.

95
00:05:37.911 --> 00:05:43.219
I do generated one, a create user request,
so on and so forth, right?

96
00:05:43.219 --> 00:05:45.826
A slightly more involved
one is in the repo.

97
00:05:45.826 --> 00:05:49.915
This one I just did in JSON
just to show you both,

98
00:05:49.915 --> 00:05:54.822
where it is a description based
on the API that we have been

99
00:05:54.822 --> 00:05:59.752
working with the entire time
of what it should look like.

100
00:05:59.752 --> 00:06:04.653
Now, can you generate
one of these from code?

101
00:06:04.653 --> 00:06:09.467
Yes, if you also had all that
structure in your code, right?

102
00:06:09.467 --> 00:06:13.243
We started with a wild west API,
so it's a little bit trickier and

103
00:06:13.243 --> 00:06:15.865
I'll show you some techniques for
doing it.

104
00:06:15.865 --> 00:06:20.853
But even if you can just Figure
out what it ought to be.

105
00:06:20.853 --> 00:06:22.672
You can use odd schemas to generate this.

106
00:06:22.672 --> 00:06:26.643
You can use JSON schema and then you
can make them both work across the way.

107
00:06:26.643 --> 00:06:31.311
But this is effectively a representation
of everything that my API that we've been

108
00:06:31.311 --> 00:06:32.452
working with does.

109
00:06:32.452 --> 00:06:36.727
We're going to focus a little bit
more on the client side piece, but

110
00:06:36.727 --> 00:06:40.253
we'll look at like, because,
the reasoning is that,

111
00:06:40.253 --> 00:06:43.947
like generating one from
the code is a little bit tedious.

112
00:06:43.947 --> 00:06:47.153
There are lots of tools that you can use,
and

113
00:06:47.153 --> 00:06:51.148
you will see why we will not
be doing it live in a moment.

114
00:06:51.148 --> 00:06:58.630
For instance, if you one
annotated their API with JS Doc,

115
00:06:58.630 --> 00:07:03.681
you can generate one for free, right?

116
00:07:03.681 --> 00:07:08.436
The problem is,
we'd be doing a lot of writing, which for

117
00:07:08.436 --> 00:07:13.690
real production code base,
maybe someone ought to do, right?

118
00:07:13.690 --> 00:07:18.771
Cuz internally, you can make sure that
your API adheres to your own contract.

119
00:07:18.771 --> 00:07:23.486
We'll see how to do that in a second and
then also for the other side, for

120
00:07:23.486 --> 00:07:29.084
a throwaway app, writing this much by hand
for 800 lines is not worth it, right?

121
00:07:29.084 --> 00:07:32.173
But again, if the safety is worth
it to you, it is there you.

