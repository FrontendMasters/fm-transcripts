WEBVTT

1
00:00:00.000 --> 00:00:03.655
&gt;&gt; Steve Kinney: Because we've got
the server open just through sheer luck.

2
00:00:03.655 --> 00:00:06.705
We talked a lot about the problems
on the client side and

3
00:00:06.705 --> 00:00:10.230
the fact that you don't know what
the API was truly giving you.

4
00:00:10.230 --> 00:00:15.183
So let's be fair, and let's talk
about what we get out of the box,

5
00:00:15.183 --> 00:00:18.292
cuz we have the same problem here as well.

6
00:00:18.292 --> 00:00:24.158
And so for instance, in an Express app,
you've got a request and

7
00:00:24.158 --> 00:00:28.655
a response, a request has,
it could have a body.

8
00:00:33.027 --> 00:00:38.308
&gt;&gt; Steve Kinney: Say body equals rec.body,
a request could have params,

9
00:00:38.308 --> 00:00:43.155
which is if we look kind of
like at the get anything that

10
00:00:43.155 --> 00:00:47.815
can be put in the path,
that can be on there as well.

11
00:00:47.815 --> 00:00:52.935
And then a request can have a query which
is any kind of query string that is in

12
00:00:52.935 --> 00:00:58.542
there as well and then there is kind of,
which we'll see when we look at the types,

13
00:00:58.542 --> 00:01:01.874
a little bit,
something kind of called locals,

14
00:01:01.874 --> 00:01:05.971
which is just other stuff that
you jammed onto the request.

15
00:01:05.971 --> 00:01:12.376
What is other stuff grabbing, like an auth
token that was on the header right?

16
00:01:12.376 --> 00:01:16.391
That could be an example, lots of other
things that you could choose to as you

17
00:01:16.391 --> 00:01:20.219
kind of like as it goes through middleware
that you wanna pass on there and

18
00:01:20.219 --> 00:01:21.825
do stuff with can be on there.

19
00:01:21.825 --> 00:01:27.069
The important part here though,
is like it's kind of a wild west, right?

20
00:01:27.069 --> 00:01:31.846
You literally can just jam
stuff onto the request or

21
00:01:31.846 --> 00:01:38.067
response objects as we go through so,
it's really hard to tell and

22
00:01:38.067 --> 00:01:42.974
so you end up with a lot of
kind of interesting types.

23
00:01:42.974 --> 00:01:45.675
For instance, body, by default, is any,

24
00:01:45.675 --> 00:01:50.202
which is a version of the problem like,
it's effectively what the body is

25
00:01:50.202 --> 00:01:54.231
of a fetch request when we get
the response on the client, right?

26
00:01:54.231 --> 00:01:59.938
So the problems exist in both places,
params is allegedly

27
00:01:59.938 --> 00:02:06.233
like a key value store of strings
as both the keys and the values.

28
00:02:06.233 --> 00:02:09.938
Obviously, this one, it's not much of
anything, because there's no params on it.

29
00:02:09.938 --> 00:02:14.844
Query looks to be this very special type,
it's just another object where,

30
00:02:14.844 --> 00:02:19.521
if we grabbed so we said some like
even this, like completed, which is,

31
00:02:19.521 --> 00:02:22.741
if we wanted to filter just
the completed tasks and

32
00:02:22.741 --> 00:02:25.832
see those independent
of the incomplete ones.

33
00:02:25.832 --> 00:02:30.580
You can see added by default,
it is maybe a string,

34
00:02:30.580 --> 00:02:35.661
maybe this parsed queues,
maybe an array of strings,

35
00:02:35.661 --> 00:02:38.541
maybe undefined, so not any.

36
00:02:38.541 --> 00:02:42.951
Insofar as a string,
or an array of strings,

37
00:02:42.951 --> 00:02:46.904
or an object of strings, or undefined.

38
00:02:46.904 --> 00:02:52.814
So not any, but
close enough to any to be problematic,

39
00:02:52.814 --> 00:02:59.894
right, so we have a bunch of
versions of these as a thing, right?

40
00:02:59.894 --> 00:03:04.816
And if we look at the implied
types of request and

41
00:03:04.816 --> 00:03:09.617
response, you'll notice two things, one,

42
00:03:09.617 --> 00:03:12.583
they stress me out, right?

43
00:03:12.583 --> 00:03:19.569
There's four, five generics in there,
right, of things that it could be,

44
00:03:19.569 --> 00:03:24.416
I don't make the rules I get it,
it's frustrating.

45
00:03:24.416 --> 00:03:28.900
We will navigate it, and we'll see how the
tooling will help us but the first little

46
00:03:28.900 --> 00:03:32.569
part of, it becomes a fine art of
remembering what all of these are.

47
00:03:32.569 --> 00:03:36.759
So there's a few things that we can
do obviously, if your brain is going,

48
00:03:36.759 --> 00:03:41.373
I can validate them with Zod, 100%,
you're right, you can, and we will.

49
00:03:41.373 --> 00:03:46.207
But let's talk about some of the patterns
without Zod just to catch everyone up, and

50
00:03:46.207 --> 00:03:49.951
then we will go and do some schema
validation on both the server and

51
00:03:49.951 --> 00:03:51.130
the client as well.

52
00:03:51.130 --> 00:03:56.621
So out of the box, effectively,
what you're getting is and just to make

53
00:03:56.621 --> 00:04:01.751
matters worse, this is a type request
&gt;&gt; Steve Kinney: But

54
00:04:01.751 --> 00:04:06.974
the important part is,
it is not the type like that in the Dom

55
00:04:06.974 --> 00:04:11.581
cuz express predates,
a lot of these other things.

56
00:04:11.581 --> 00:04:17.570
There is a request and a type response
from express that are different

57
00:04:17.570 --> 00:04:22.331
than the built in, Dom request and
response web APIs.

58
00:04:22.331 --> 00:04:27.377
So we can say this is a request and
this is a response, right now, that

59
00:04:27.377 --> 00:04:33.046
is what you get for free by it being the
callback for a get or a post or whatever.

60
00:04:33.046 --> 00:04:37.862
So, you're not getting too much out of
there, but you can kind of see that

61
00:04:37.862 --> 00:04:42.622
this is the default type in this case,
which, yeah, it's stressful.

62
00:04:42.622 --> 00:04:49.599
So one of the things you can do, I'm gonna
kind of pull up an example real quick is,

63
00:04:49.599 --> 00:04:54.673
so that's the type in a nicer format,
which is nice to see.

64
00:04:54.673 --> 00:04:57.065
You can do something, for instance,

65
00:04:57.065 --> 00:05:01.101
with our task where you can define
what should be on the params and

66
00:05:01.101 --> 00:05:06.068
what type it should be, just like you
would do with the fetch request, right?

67
00:05:06.068 --> 00:05:09.727
You can then say that,
okay, cool, it's a request,

68
00:05:09.727 --> 00:05:14.995
the params user Id is gonna be a string,
and now you will get the auto complete.

69
00:05:14.995 --> 00:05:19.020
You will get the IntelliSense
knowing it's a string,

70
00:05:19.020 --> 00:05:22.092
what's the problem with this approach?

71
00:05:22.092 --> 00:05:26.893
You're in the same place you were
with a Fetch Request where TypeScript

72
00:05:26.893 --> 00:05:31.225
will believe you, and
you can hope that you're right, right?

73
00:05:31.225 --> 00:05:34.942
And when you are right,
life is good, right?

74
00:05:34.942 --> 00:05:36.932
But we're not talking
about when life is good,

75
00:05:36.932 --> 00:05:38.832
we're talking about the unhappy path here.

76
00:05:38.832 --> 00:05:42.525
So you can do stuff like that as well and
again,

77
00:05:42.525 --> 00:05:45.944
there's a lot of trust involved in there.

78
00:05:45.944 --> 00:05:50.171
So if we look at ID,
that one is maybe a string, right?

79
00:05:50.171 --> 00:05:53.045
I think pretty sure,
let's see if the typing goes.

80
00:05:57.561 --> 00:06:03.437
&gt;&gt; Steve Kinney: It does have it for
the type, but for anything like the prams,

81
00:06:03.437 --> 00:06:09.438
or like the body, we go down to this post,
this is any, right?

82
00:06:09.438 --> 00:06:14.854
And so we can begin to flush
it out a little bit, right?

83
00:06:14.854 --> 00:06:19.927
And so if we look at that type that I
had up here before, you can see cool,

84
00:06:19.927 --> 00:06:25.862
we start out the dictionary, then we get
to the response body, why that one first?

85
00:06:25.862 --> 00:06:28.084
I don't make the rules,
I have no idea, right?

86
00:06:28.084 --> 00:06:33.292
I think it's so you can validate that
you're responding with the right stuff.

87
00:06:33.292 --> 00:06:37.006
And then the request body,
then the query params, and

88
00:06:37.006 --> 00:06:40.733
then the other stuff that you
can jam on to the objects.

89
00:06:40.733 --> 00:06:46.475
So in this case if we wanted to kind
of make this type a little bit better,

90
00:06:46.475 --> 00:06:51.383
we could do something like, so
if I wanted the body to exist.

91
00:06:51.383 --> 00:06:54.894
Once again, I'm going to now have
to remember which order it was in,

92
00:06:54.894 --> 00:06:56.053
it was third, right?

93
00:06:56.053 --> 00:07:00.820
Pretty sure it was third,
we could say type,

94
00:07:00.820 --> 00:07:04.711
create, task, request, love it,

95
00:07:04.711 --> 00:07:08.988
naming things is the hardest part here.

96
00:07:08.988 --> 00:07:13.335
Where we could say that, sure,

97
00:07:13.335 --> 00:07:18.327
but actually that's just the body.

98
00:07:18.327 --> 00:07:21.477
So we can take that and

99
00:07:21.477 --> 00:07:26.552
we can say that a type create task,

100
00:07:26.552 --> 00:07:30.753
request, equals request.

101
00:07:30.753 --> 00:07:33.718
The first part, yeah,
just could be an empty object,

102
00:07:33.718 --> 00:07:37.849
cuz there are no path parameters, see,
I already am forgetting what it is.

103
00:07:37.849 --> 00:07:43.846
The response, in this case it should
actually be void I believe, and linting

104
00:07:43.846 --> 00:07:50.320
is very angry with me because it's like
you shouldn't be doing that, like I know.

105
00:07:50.320 --> 00:07:55.037
And so now we can say that a request
is this create task request,

106
00:07:55.037 --> 00:07:58.248
right, it does respond with a message.

107
00:07:58.248 --> 00:08:02.574
So then the response is message string,

108
00:08:02.574 --> 00:08:07.409
yeah, and so
you can see now the task is this,

109
00:08:07.409 --> 00:08:12.892
create task body, and
it's all typed correctly.

110
00:08:12.892 --> 00:08:16.943
The response was validated because, like
that one, at least we have control of, we

111
00:08:16.943 --> 00:08:21.239
might not know what we're receiving thing,
but we do know what we're responding with.

112
00:08:21.239 --> 00:08:24.499
If there were query params, though,
we'd still be out of luck, and

113
00:08:24.499 --> 00:08:25.748
we'd have to type those.

114
00:08:25.748 --> 00:08:30.623
And I'm not doing this because it doesn't
actually solve the core thesis of

115
00:08:30.623 --> 00:08:31.696
this workshop.

116
00:08:31.696 --> 00:08:36.795
Which is, I can type whatever I want here,
and IntelliSense will be happy but

117
00:08:36.795 --> 00:08:40.022
like if garbage comes in
who knows what happens.

118
00:08:40.022 --> 00:08:42.327
And so we need ways to better,

119
00:08:42.327 --> 00:08:48.161
actually figure out our things the way
that we think that they are, right?

120
00:08:48.161 --> 00:08:53.580
And so what we might choose to do is
try to start by looking at our app,

121
00:08:53.580 --> 00:08:57.588
figuring out where the like
implicit ennies are.

122
00:08:57.588 --> 00:09:02.644
And then start to come up with ways to
make sure that they are what we think they

123
00:09:02.644 --> 00:09:08.426
are, which is good again, we're gonna do
this with some schema validation, right?

124
00:09:08.426 --> 00:09:14.071
Say, hey, when this thing comes in, let's
make sure it is the thing we think it is,

125
00:09:14.071 --> 00:09:17.342
cuz if not,
we think about errors as a bad thing.

126
00:09:17.342 --> 00:09:22.974
If you throw the error on purpose, because
things are broken, that's not bad, right?

127
00:09:22.974 --> 00:09:27.027
That is the intended purpose in this case.

