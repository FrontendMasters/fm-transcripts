WEBVTT

1
00:00:00.439 --> 00:00:04.102
So let's talk about generating types,
right?

2
00:00:04.102 --> 00:00:07.953
Just like, hey, I don't wanna have
to come up with all this stuff.

3
00:00:07.953 --> 00:00:13.007
I want to just be able to
generate a bunch of types and

4
00:00:13.007 --> 00:00:16.077
have them good and ready to go.

5
00:00:16.077 --> 00:00:21.750
So what I'm gonna do is,
I'm gonna fire up the terminal.

6
00:00:21.750 --> 00:00:26.224
Gotta be in the actual app if
you want the shortcuts to work.

7
00:00:26.224 --> 00:00:30.764
Cool, and
there are a bunch of libraries to do this.

8
00:00:30.764 --> 00:00:33.187
Prepare to be amazed.

9
00:00:33.187 --> 00:00:37.528
Again, gotta be in the right window or
else typing doesn't work.

10
00:00:37.528 --> 00:00:42.247
So we can do npx openapi typeScript.

11
00:00:42.247 --> 00:00:43.800
So this is one that I use all the time.

12
00:00:43.800 --> 00:00:50.191
This is one that I use for
our OpenAPI spec at my day job.

13
00:00:50.191 --> 00:00:54.452
And I give it the path to the JSON file.

14
00:00:54.452 --> 00:00:57.323
And you would probably put this
in like an NPM script, right?

15
00:00:57.323 --> 00:01:02.105
In my code base,
it is NPM run generate types, right?

16
00:01:02.105 --> 00:01:06.890
Then you put the output file.

17
00:01:06.890 --> 00:01:11.249
In this case, we're gonna say src/,

18
00:01:11.249 --> 00:01:15.088
I don't know, api.types.ts.

19
00:01:15.088 --> 00:01:18.045
And then you go get a cup of coffee, and

20
00:01:18.045 --> 00:01:21.472
you got a little rocket ship and
some stars.

21
00:01:21.472 --> 00:01:26.479
You feel good, I feel like emoji is
the best thing to happen to everything.

22
00:01:26.479 --> 00:01:29.778
And we go into the client and

23
00:01:29.778 --> 00:01:34.656
open that folder up and go into source and

24
00:01:34.656 --> 00:01:39.542
prepare to be at least whelmed, right?

25
00:01:39.542 --> 00:01:44.544
On one hand, you didn't have
to do any of this yourself.

26
00:01:44.544 --> 00:01:47.400
On the other hand,
it still is a little bit to be desired.

27
00:01:47.400 --> 00:01:50.560
You get this giant,
it's actually three types.

28
00:01:50.560 --> 00:01:57.565
The paths, which are all the routes and
all the information about what they take.

29
00:01:57.565 --> 00:02:03.403
And then you get the schemas, which are,
in this case, user or tasks in our case.

30
00:02:03.403 --> 00:02:09.008
And all the types are just generated for
you from the spec, that said,

31
00:02:09.008 --> 00:02:14.329
I think if I wanted to do,
I'm editing the file says, Do not edit.

32
00:02:14.329 --> 00:02:16.560
It's fine, I'm a professional.

33
00:02:16.560 --> 00:02:21.349
Task is equal to schemas,

34
00:02:21.349 --> 00:02:25.145
no, you'll see why.

35
00:02:25.145 --> 00:02:29.106
This leaves something to be desired,
but again, you can do it, and

36
00:02:29.106 --> 00:02:30.300
it's pretty good.

37
00:02:30.300 --> 00:02:35.646
Component schema task,
which is a type generated

38
00:02:35.646 --> 00:02:40.876
from some JSON schema,
which is the right type.

39
00:02:40.876 --> 00:02:45.893
Now, you can imagine a large enough
code base this can get somewhat insane.

40
00:02:45.893 --> 00:02:48.764
But you also have information about
what are all the routes, right?

41
00:02:48.764 --> 00:02:51.660
So you're to have it
autocomplete the routes.

42
00:02:51.660 --> 00:02:53.869
You can say,
what are the parameters that it takes?

43
00:02:53.869 --> 00:02:58.715
Now, will you end up with paths,
tasks, parameters?

44
00:02:58.715 --> 00:03:02.934
Yes, and I can show you the one
I use at work, it gets gnarly.

45
00:03:02.934 --> 00:03:05.647
Don't worry, I have another cure coming.

46
00:03:05.647 --> 00:03:10.859
But from this standard contract between
both sides, you now can generate

47
00:03:10.859 --> 00:03:16.672
types based on that contract, and from
those types you can generate the schemas.

48
00:03:16.672 --> 00:03:19.426
Everything we're doing by
hand you can generate.

49
00:03:19.426 --> 00:03:22.871
Now, you're like,
then why did I do it by hand?

50
00:03:22.871 --> 00:03:26.501
Because remember how hard it was to make
one of these contracts to begin with that

51
00:03:26.501 --> 00:03:29.605
lighter weight thing might be your
first thing that you do, right?

52
00:03:29.605 --> 00:03:31.055
And you start with that, and

53
00:03:31.055 --> 00:03:34.146
then later you can kind of build
up to the more robust things.

54
00:03:34.146 --> 00:03:36.654
Because if you had to start
to have all those schemas,

55
00:03:36.654 --> 00:03:40.245
you might get to the point where defining
this becomes a lot easier, right?

56
00:03:40.245 --> 00:03:43.410
So if you are starting fresh,
maybe this makes a ton of sense.

57
00:03:43.410 --> 00:03:47.637
If you have tooling that already, or
a backend team, that made one of these and

58
00:03:47.637 --> 00:03:51.863
you just wanna generate all your types,
like yeah, we haven't open it,

59
00:03:51.863 --> 00:03:55.727
the backend team made that for me,
I just look at it by hand all the time.

60
00:03:55.727 --> 00:03:58.269
Well, you can generate
your client out of it.

61
00:03:58.269 --> 00:04:01.694
So it all depends on what you need to do,
but check this out.

62
00:04:01.694 --> 00:04:05.126
So that was cool,
everyone likes to see that.

63
00:04:05.126 --> 00:04:08.579
For my next trick, let's put it in here.

64
00:04:08.579 --> 00:04:11.831
API client,

65
00:04:11.831 --> 00:04:17.446
where we will grab this

66
00:04:17.446 --> 00:04:23.365
import create client.

67
00:04:23.365 --> 00:04:29.092
From openapi-fetch, great,
awesome, love to see it.

68
00:04:29.092 --> 00:04:32.473
And then we need to the import.

69
00:04:32.473 --> 00:04:35.717
We just need the type actually, type pass.

70
00:04:39.891 --> 00:04:42.546
From those types that we generated.

71
00:04:47.830 --> 00:04:54.062
Cool, and now we can do and say const GET,

72
00:04:54.062 --> 00:04:57.981
we'll do a batch of them,

73
00:04:57.981 --> 00:05:02.077
GET POST, PUT and DELETE,

74
00:05:02.077 --> 00:05:07.798
which is create a client at that path.

75
00:05:07.798 --> 00:05:12.909
And we're gonna say that the baseUrl,
I know it happens to be,

76
00:05:12.909 --> 00:05:19.380
obviously, you put this in environment
variable, but we're not doing that.

77
00:05:19.380 --> 00:05:23.641
4001, cool, and so all it did,

78
00:05:23.641 --> 00:05:29.557
we generate the types based
on the open API schema.

79
00:05:29.557 --> 00:05:31.954
Great, awesome, cool, right?

80
00:05:31.954 --> 00:05:36.172
We grabbed this library and
it's literally just taking the types,

81
00:05:36.172 --> 00:05:39.289
not even the actual schema or
anything like that.

82
00:05:39.289 --> 00:05:43.998
So very lightweight because
this part will get stripped

83
00:05:43.998 --> 00:05:48.313
from the build 'cause
types don't get included.

84
00:05:48.313 --> 00:05:53.933
And now you can try out
stuff where it's like,

85
00:05:53.933 --> 00:05:59.715
Get and look,
those are my two routes, right?

86
00:05:59.715 --> 00:06:05.273
And if I choose that one,
right, I can give it a query,

87
00:06:09.791 --> 00:06:11.896
And we can see that
completed ought to be true.

88
00:06:11.896 --> 00:06:15.742
It has basically generated
an entire client for

89
00:06:15.742 --> 00:06:19.877
making all my API requests
from the frontend code,

90
00:06:19.877 --> 00:06:24.798
all completely typed for
me based on that contract, right?

91
00:06:24.798 --> 00:06:28.176
I don't necessarily have to
do anything at this point.

92
00:06:28.176 --> 00:06:29.805
All the routes get auto completed.

93
00:06:29.805 --> 00:06:34.857
If I try to put in a query
frame that's not supported.

94
00:06:38.651 --> 00:06:41.739
I think those might be optional, so
they get ignored, but other pieces.

95
00:06:41.739 --> 00:06:43.414
Let's try it on the request body.

96
00:06:52.647 --> 00:06:54.018
Cool.

97
00:06:56.449 --> 00:07:00.109
Nope, one more curly cube.

98
00:07:00.109 --> 00:07:05.367
Here, I think if I put one that's not
supported or let's actually just make

99
00:07:05.367 --> 00:07:11.673
this- You can see I get the type support
to know that can't be null, all right?

100
00:07:11.673 --> 00:07:15.077
It's gotta be a stringer undefined.

101
00:07:15.077 --> 00:07:22.819
If I make this a number, you get the type
safety automatically, sometimes.

102
00:07:22.819 --> 00:07:28.636
The optional ones,
I think you can have like TypeScript

103
00:07:28.636 --> 00:07:34.840
will respect extra properties
I think is what the issue is.

104
00:07:34.840 --> 00:07:38.827
The ones that are not actually because
a body is only those two, TypeScript will

105
00:07:38.827 --> 00:07:41.818
ignore all extra properties in
any kind of type that you do.

106
00:07:41.818 --> 00:07:45.748
It's like one of the nice things about
Typescript is if you pass, if it says,

107
00:07:45.748 --> 00:07:48.948
I need a property A and B, and
you pass one with A, B, and C, and

108
00:07:48.948 --> 00:07:51.498
it knows it never uses C,
it doesn't yell at you.

109
00:07:51.498 --> 00:07:55.042
That way you don't have to strip
the properties out of everything,

110
00:07:55.042 --> 00:07:56.596
which is great in practice and

111
00:07:56.596 --> 00:08:00.532
somewhat annoying when you're trying
to make a point in front of friends.

