WEBVTT

1
00:00:00.000 --> 00:00:04.878
&gt;&gt; Steve Kinney: So I did the classic time
honored tradition that we've seen from

2
00:00:04.878 --> 00:00:09.211
cooking shows all of our life,
which is, I took a break,

3
00:00:09.211 --> 00:00:12.938
put it in the oven, and
pulled it out of the oven.

4
00:00:12.938 --> 00:00:17.557
So you did not have to watch me copy and
paste a bunch of SQL queries.

5
00:00:17.557 --> 00:00:22.437
And really, all we did was we created,
same way you would have maybe a client

6
00:00:22.437 --> 00:00:26.338
in the browser, we did the same
thing on the database level.

7
00:00:26.338 --> 00:00:31.292
Again, as you can see, we'll know,
because we did the schema

8
00:00:31.292 --> 00:00:35.798
validation on the server side
that these types are good.

9
00:00:35.798 --> 00:00:38.111
We don't have to worry about stuff
on the way into our application.

10
00:00:38.111 --> 00:00:41.039
Whenever we leave from
the client into the server,

11
00:00:41.039 --> 00:00:44.443
server into the database,
database back into the server,

12
00:00:44.443 --> 00:00:49.028
anytime we're crossing those boundaries
where the types aren't respected.

13
00:00:49.028 --> 00:00:52.110
Because we're leaving one code base and
entering another one,

14
00:00:52.110 --> 00:00:55.373
the database counts, right,
cuz that's just not our code at all.

15
00:00:55.373 --> 00:00:58.001
And we'll see some ways around that.

16
00:00:58.001 --> 00:01:01.021
And so, all this does,
now we've got getAllTasks,

17
00:01:01.021 --> 00:01:04.189
which will then take
the parameters that we care about.

18
00:01:04.189 --> 00:01:07.763
It will make sure that whatever we get
back from the database is correct.

19
00:01:07.763 --> 00:01:12.028
It's the very same queries that we
had before that were all up top,

20
00:01:12.028 --> 00:01:15.011
just in a nice little reusable thing,
right?

21
00:01:15.011 --> 00:01:19.377
And again, this takes the same manual
thing we did with the request and

22
00:01:19.377 --> 00:01:22.570
responses and
does it again on the database layer.

23
00:01:22.570 --> 00:01:27.819
So if kinda we go back to that
context now, I have the database,

24
00:01:27.819 --> 00:01:34.554
I create this client, and again, the
client, I'll just look at it real quick,

25
00:01:34.554 --> 00:01:38.737
task.getAllTask, deleteTask, createTask.

26
00:01:38.737 --> 00:01:41.827
And even like, if we look at
the deleteTask, well, that returns void.

27
00:01:41.827 --> 00:01:44.720
But it is properly typed, right?

28
00:01:44.720 --> 00:01:48.509
It'll know that needs some
ID which is a number.

29
00:01:48.509 --> 00:01:51.975
It does return a promise that is void,
so on and so forth.

30
00:01:51.975 --> 00:01:54.681
So it's the same database
queries I had before,

31
00:01:54.681 --> 00:01:59.038
both wrapped in both type-safety on the
way in, and then Zod parsing on the way

32
00:01:59.038 --> 00:02:02.089
out of the database to make
sure it is what I think it is.

33
00:02:02.089 --> 00:02:06.900
So every time we cross that boundary,
we validate, right?

34
00:02:06.900 --> 00:02:09.420
Trust but verify.

35
00:02:09.420 --> 00:02:14.124
So now we have access to this,
and we can begin to flesh out

36
00:02:14.124 --> 00:02:19.034
some more of the procedures that
we want the client to call.

37
00:02:19.034 --> 00:02:23.194
So now, effectively, through tRPC,
the client is going to call functions on

38
00:02:23.194 --> 00:02:26.293
the server as if they were kind
of available on the client.

39
00:02:26.293 --> 00:02:31.220
The server is gonna talk to the database,
passing everything along, validated.

40
00:02:31.220 --> 00:02:35.159
Cuz the inputs are gonna be validated
from the client to the server,

41
00:02:35.159 --> 00:02:37.520
we have that parsing from the database.

42
00:02:37.520 --> 00:02:38.355
We did it by hand.

43
00:02:38.355 --> 00:02:42.001
We'll look at a library for
doing it automatically in a second.

44
00:02:42.001 --> 00:02:46.694
And every step, every time we cross
that boundary, we enforce the types.

45
00:02:46.694 --> 00:02:48.280
And we'll get an error
if they're not true,

46
00:02:48.280 --> 00:02:49.878
which then we can figure
out how to navigate.

47
00:02:49.878 --> 00:02:54.489
But the meat that I wanna talk
about here is this is effectively

48
00:02:54.489 --> 00:02:57.248
the part that we care about, right?

49
00:02:57.248 --> 00:03:01.087
And so we have a method called getTasks,
createTasks, and all they're really doing

50
00:03:01.087 --> 00:03:04.791
is they're grabbing that client that we
wrote, that will do the database calls.

51
00:03:04.791 --> 00:03:09.215
That was the same one we could and do
actually now use in the Rest version, and

52
00:03:09.215 --> 00:03:13.594
we validated the input automatically,
like we did with that middleware.

53
00:03:13.594 --> 00:03:18.484
It's like, yeah, there was some setup, but
you watched me all do it manually before.

54
00:03:18.484 --> 00:03:22.491
So we've got getTasks,
createTasks, we have updateTasks.

55
00:03:22.491 --> 00:03:24.178
Shocker, what this is gonna look like.

56
00:03:31.352 --> 00:03:33.635
&gt;&gt; Steve Kinney: Maybe I could spell,
I don't know.

57
00:03:33.635 --> 00:03:41.070
PublicProcedure.input is gonna
be the updateTaskSchema.

58
00:03:41.070 --> 00:03:43.604
And that's going to be,
in this case, again, a mutation.

59
00:03:43.604 --> 00:03:46.391
A mutation is just some
change to the database.

60
00:03:46.391 --> 00:03:49.592
What's kind of cool about it is, again,

61
00:03:49.592 --> 00:03:55.456
those are also things that if you wanted
to, one could subscribe to as well.

62
00:03:55.456 --> 00:04:00.273
Okay, the other one doesn't have the ID,
so

63
00:04:00.273 --> 00:04:05.779
I guess we're gonna need,
the input is gonna have to be,

64
00:04:05.779 --> 00:04:10.056
we're gonna allow the ID
on this one again.

65
00:04:12.910 --> 00:04:15.475
&gt;&gt; Steve Kinney: I think, yeah.

66
00:04:15.475 --> 00:04:18.773
Can I think of this when I omit the ID,
cuz I made other decisions earlier.

67
00:04:18.773 --> 00:04:26.560
We're gonna
&gt;&gt; Steve Kinney: Actually, we'll do this.

68
00:04:39.882 --> 00:04:41.543
&gt;&gt; Steve Kinney: I'm gonna
make one on the fly.

69
00:04:41.543 --> 00:04:47.938
I just need the ability to get both the ID
and the other piece in there as well.

70
00:04:47.938 --> 00:04:52.656
It's always the game time decisions
that we end up regretting.

71
00:04:52.656 --> 00:04:56.899
So we'll just make one on the fly here.

72
00:04:56.899 --> 00:05:03.607
And we're gonna say,
&gt;&gt; Steve Kinney: Call it

73
00:05:15.442 --> 00:05:18.704
&gt;&gt; Steve Kinney: Task is gonna be this,

74
00:05:18.704 --> 00:05:25.412
and then something I can
coerce into a number.

75
00:05:25.412 --> 00:05:28.683
So this is just gonna be
an object where we get the ID and

76
00:05:28.683 --> 00:05:31.593
then everything about
a task other than the ID,

77
00:05:31.593 --> 00:05:35.549
which my REST implementation didn't need,
but this one does.

78
00:05:35.549 --> 00:05:39.565
I made decisions along the way
while live coding that I could

79
00:05:39.565 --> 00:05:43.578
have privately dealt with in
the comfort of my own home, but

80
00:05:43.578 --> 00:05:48.093
now have to expose you all to game
time decisions that I had to make.

81
00:05:48.093 --> 00:05:52.553
And I like this more, so that's the thing.

82
00:05:52.553 --> 00:05:56.239
Okay, so then, yep, we can go ahead,
we've got that updatTask.

83
00:05:56.239 --> 00:06:00.864
And like I said, the absence of red
squigglies is giving me a lot of faith

84
00:06:00.864 --> 00:06:03.188
that everything is kinda working.

85
00:06:03.188 --> 00:06:07.229
So I've got the ability to get
all the tasks, create a task,

86
00:06:07.229 --> 00:06:09.460
update the task, delete a task.

87
00:06:09.460 --> 00:06:14.380
These are just calling those same SQL
queries that I put into a little object

88
00:06:14.380 --> 00:06:18.376
that I don't ever have to think
about the SQL queries again.

89
00:06:18.376 --> 00:06:21.996
Every code base has some squarely code, if
you just hide it under some nice layers of

90
00:06:21.996 --> 00:06:24.851
abstraction and never have to
see it again, it's totally okay.

91
00:06:24.851 --> 00:06:32.443
But these are what the functions that I'm
going to expose to the client are, and

92
00:06:32.443 --> 00:06:37.898
I will be able to call these
with some of these functions.

93
00:06:37.898 --> 00:06:42.490
Again, you can get as granular and
as crazy as you want here.

94
00:06:42.490 --> 00:06:47.708
This feels good for now, I just need
to take this little router that

95
00:06:47.708 --> 00:06:53.496
I made exposing everything and put it
over where I was missing it earlier.

96
00:06:57.899 --> 00:07:00.811
&gt;&gt; Steve Kinney: Right, and
so we've got this adopter,

97
00:07:00.811 --> 00:07:03.559
what are the other things I need to do?

98
00:07:03.559 --> 00:07:08.496
We just need to hook up
the middleware at this point.

99
00:07:08.496 --> 00:07:09.401
So we've got this,

100
00:07:09.401 --> 00:07:12.767
and then we'll go ahead, if I didn't
do it already when I got distracted.

101
00:07:12.767 --> 00:07:19.141
Yep, so we can say, app.use,
this is the only real change,

102
00:07:19.141 --> 00:07:23.197
other than the slightly refactoring.

103
00:07:23.197 --> 00:07:27.221
App.use, and we're gonna say,

104
00:07:27.221 --> 00:07:32.771
under the API thing we're gonna say,
create,

105
00:07:32.771 --> 00:07:37.645
it's like, how did I spell it this time?

106
00:07:37.645 --> 00:07:39.407
Cool.

107
00:07:44.389 --> 00:07:46.769
&gt;&gt; Steve Kinney: There it is.

108
00:07:46.769 --> 00:07:49.847
We'll go ahead and
we'll just add that in there as well.

109
00:07:53.213 --> 00:07:56.808
&gt;&gt; Steve Kinney: So this is the only thing
I'm really adding to the Express app.

110
00:07:56.808 --> 00:08:02.228
Is a new piece of middleware saying,
expose a new endpoint at /api,

111
00:08:02.228 --> 00:08:05.967
and then if we go,
make sure I save everything,

112
00:08:05.967 --> 00:08:09.900
cuz that's gonna be the next
thing that bites me.

113
00:08:09.900 --> 00:08:14.305
We've got the actual procedures
that we're exposing,

114
00:08:14.305 --> 00:08:18.167
and the adapter is putting
an additional /trpc.

115
00:08:18.167 --> 00:08:22.386
So I put in the middleware,
/api, /trpc, right?

116
00:08:22.386 --> 00:08:26.241
But all we're doing is creating
Express middleware and hooking it on,

117
00:08:26.241 --> 00:08:28.757
this can literally,
like be its own library.

118
00:08:28.757 --> 00:08:32.202
You can move it to that shared directory,
whatever you want,

119
00:08:32.202 --> 00:08:35.515
as long as you expose this adapter and
then use as middleware

120
00:08:35.515 --> 00:08:39.574
your Express server, and again,
this does not have to just be Express.

121
00:08:39.574 --> 00:08:41.966
It works with tons of other
different web servers.

122
00:08:41.966 --> 00:08:44.835
That just happens to be
the one that we have.

123
00:08:44.835 --> 00:08:48.493
[INAUDIBLE] A little bit of boilerplate
of creating the middleware.

