WEBVTT

1
00:00:00.143 --> 00:00:03.286
&gt;&gt; Steve Kinney: And at this point, we're
now talking about the functions that we

2
00:00:03.286 --> 00:00:05.525
want to let the client be able to call,
right?

3
00:00:05.525 --> 00:00:07.874
And this is a very simple crud app.

4
00:00:07.874 --> 00:00:11.002
So l they won't be too compelling,
but the idea is, like,

5
00:00:11.002 --> 00:00:15.072
you're instead of thinking about routes
and the requests and the response,

6
00:00:15.072 --> 00:00:17.968
you're thinking more in
terms of functions, right?

7
00:00:17.968 --> 00:00:22.415
You're thinking in terms of parameters and
return values instead.

8
00:00:22.415 --> 00:00:28.163
So this becomes effectively
an object with methods, right?

9
00:00:28.163 --> 00:00:34.634
Where we might have get task,
which is a public procedure.

10
00:00:34.634 --> 00:00:35.807
I don't make the names.

11
00:00:35.807 --> 00:00:38.956
I would have called it something cooler.

12
00:00:38.956 --> 00:00:42.944
And we'll have,
either queries and mutations, but

13
00:00:42.944 --> 00:00:47.992
first we talk about what does this
function take and it shouldn't be

14
00:00:47.992 --> 00:00:53.589
too much of a surprise to us that it's
validated with a Zod schema, right?

15
00:00:53.589 --> 00:01:00.650
So we could say something
&gt;&gt; Steve Kinney: This case,

16
00:01:00.650 --> 00:01:07.253
the test lists Schema, so
what the test query schema?

17
00:01:07.253 --> 00:01:11.107
Did I make that a type before,

18
00:01:11.107 --> 00:01:16.202
when I was live coding, yelling a lot,

19
00:01:20.686 --> 00:01:23.195
&gt;&gt; Steve Kinney: I didn't make one for

20
00:01:23.195 --> 00:01:28.781
the query schema, but
we can do that right now.

21
00:01:29.819 --> 00:01:34.654
&gt;&gt; Steve Kinney: That was two
words put together, nope.

22
00:01:34.654 --> 00:01:41.277
Export test, list, query schema.

23
00:01:58.527 --> 00:02:00.225
&gt;&gt; Steve Kinney: Actually,
I just want this.

24
00:02:06.391 --> 00:02:09.465
&gt;&gt; Steve Kinney: That's that
query list that we had before.

25
00:02:09.465 --> 00:02:13.213
And so that's now exported.

26
00:02:13.213 --> 00:02:18.746
So we can go back in here
&gt;&gt; Steve Kinney: And pull in that schema.

27
00:02:18.746 --> 00:02:20.570
I could have also written
one by hand in here.

28
00:02:20.570 --> 00:02:23.660
But the idea is, this is being pulled
in from that shared repo, right?

29
00:02:23.660 --> 00:02:28.731
So this is a known shared thing that can
be validated all over the place, but

30
00:02:28.731 --> 00:02:33.822
we will get that validation for
free in a way that you'll see momentarily.

31
00:02:33.822 --> 00:02:36.069
And then what is
the process of doing this?

32
00:02:36.069 --> 00:02:40.734
Which is going to be very similar
to what I actually have in

33
00:02:40.734 --> 00:02:43.663
my existing rest endpoint pieces.

34
00:02:43.663 --> 00:02:46.574
Let me make sure all my
braces are in place.

35
00:02:50.565 --> 00:02:51.639
&gt;&gt; Steve Kinney: Cool.

36
00:02:51.639 --> 00:02:57.814
And so in this point,
I'm just gonna basically,

37
00:02:57.814 --> 00:03:04.167
so we can go ahead and say
&gt;&gt; Steve Kinney: So, this

38
00:03:04.167 --> 00:03:08.040
is access to the database you can see that
it is correctly typed as the database.

39
00:03:08.040 --> 00:03:11.058
We can go and
steal some code that we already have here.

40
00:03:11.058 --> 00:03:16.086
So for instance,
&gt;&gt; Steve Kinney: We

41
00:03:16.086 --> 00:03:18.595
can get all of our tasks,
so on and so forth.

42
00:03:28.192 --> 00:03:32.302
&gt;&gt; Steve Kinney: We'll have that

43
00:03:32.302 --> 00:03:37.003
completed tasks.

44
00:03:37.003 --> 00:03:39.468
And again,
you can pull this out into its own file.

45
00:03:39.468 --> 00:03:42.633
We're gonna use Prisma in a second
to generate even the types for

46
00:03:42.633 --> 00:03:44.106
everything in our database.

47
00:03:44.106 --> 00:03:49.501
But right now, we'll go ahead and
we'll grab all the tasks and return them.

48
00:03:49.501 --> 00:03:54.501
So this is, again, going to be very

49
00:03:54.501 --> 00:03:59.845
similar to what I have in here as well.

50
00:03:59.845 --> 00:04:02.567
This is Rose, we might get rid
of that any, so we're gonna say

51
00:04:18.959 --> 00:04:19.570
&gt;&gt; Steve Kinney: Cool.

52
00:04:19.570 --> 00:04:22.196
So now we've got a router where we've
said, what do you expect it and

53
00:04:22.196 --> 00:04:22.844
taken, right?

54
00:04:22.844 --> 00:04:26.290
Kind of not just somewhere from
our open API schema, right?

55
00:04:26.290 --> 00:04:29.201
And some of this boilerplate
goes away pretty quickly.

56
00:04:29.201 --> 00:04:32.981
&gt;&gt; Speaker 2: Would it be better to
call the server functions from the trpc

57
00:04:32.981 --> 00:04:36.834
TypeScript file,
just to be sure the same code is executed,

58
00:04:36.834 --> 00:04:41.081
instead of keeping two different
versions of the functionality.

59
00:04:41.081 --> 00:04:42.487
&gt;&gt; Steve Kinney: I think
I know what they mean,

60
00:04:42.487 --> 00:04:44.976
which is here we're calling
SQL statements twice.

61
00:04:44.976 --> 00:04:45.489
Yeah.

62
00:04:45.489 --> 00:04:50.066
We would probably pull out a get all tasks
into a method that called that we'd call

63
00:04:50.066 --> 00:04:52.506
them both the rest endpoints and the TRPC.

64
00:04:52.506 --> 00:04:56.141
For instance, let's actually,
let's take that feedback.

65
00:04:56.141 --> 00:04:57.814
Let's take it to heart, right?

66
00:04:57.814 --> 00:05:04.574
So, for instance, one thing we
probably should have done a little

67
00:05:04.574 --> 00:05:09.646
bit earlier is this didn't
matter in our server,

68
00:05:09.646 --> 00:05:14.736
because it's one set of crud end points,
right?

69
00:05:14.736 --> 00:05:17.116
And so we have all these database queries.

70
00:05:17.116 --> 00:05:22.121
And then we are, once again parsing
the responses all the time,

71
00:05:22.121 --> 00:05:25.466
some of the time,
right where we got to it.

72
00:05:25.466 --> 00:05:30.805
But theoretically, in a larger code base,
I don't in every route want to write

73
00:05:30.805 --> 00:05:35.601
a SQL query and then parse it to make
sure it is where I think it should be.

74
00:05:35.601 --> 00:05:38.811
And we're seeing that that
was the feedback right now,

75
00:05:38.811 --> 00:05:42.644
of like you're writing the same
thing twice, 100%, right?

76
00:05:42.644 --> 00:05:47.993
So what I meant to do or ldecided not to
do at the time and thought there would

77
00:05:47.993 --> 00:05:53.448
be no consequences for my actions was
create some kind of database client.

78
00:05:53.448 --> 00:05:58.695
So you could do something like class,
task client.

79
00:05:58.695 --> 00:06:04.167
And again, if this is a state of your code
base where you're doing these SQL queries,

80
00:06:04.167 --> 00:06:08.364
it's not dissimilar from an SDK or
something along those lines.

81
00:06:08.364 --> 00:06:11.385
Where we'll say something like,

82
00:06:11.385 --> 00:06:16.813
we'll have a private database
which is of the type database.

83
00:06:16.813 --> 00:06:18.497
I think that's the one I want.

84
00:06:18.497 --> 00:06:21.991
Constructor that takes the database.

85
00:06:26.776 --> 00:06:32.124
&gt;&gt; Steve Kinney: Cool, and then what you
should be able to do is do something like,

86
00:06:32.124 --> 00:06:33.403
get all tasks.

87
00:06:54.156 --> 00:06:58.365
&gt;&gt; Steve Kinney: This is similar to
what I have in that get right now.

88
00:06:58.365 --> 00:07:02.896
And so if you find yourself doing
zod parse all over the place,

89
00:07:02.896 --> 00:07:07.619
what you might consider doing is
you can make a method like this.

90
00:07:07.619 --> 00:07:11.683
And again, we can make one for create
task, update task, all the things that we

91
00:07:11.683 --> 00:07:14.853
ought to be able to do and
I will probably have to at some point.

92
00:07:14.853 --> 00:07:16.596
And then I will undo it later with Prisma.

93
00:07:16.596 --> 00:07:21.839
It will be great, but
we have this get all tasks, then what

94
00:07:21.839 --> 00:07:27.770
we could do theoretically is like,
&gt;&gt; Steve Kinney: In

95
00:07:27.770 --> 00:07:32.821
our server, like say,
hey, I want to have a

96
00:07:44.048 --> 00:07:45.200
&gt;&gt; Steve Kinney: And now,

97
00:07:45.200 --> 00:07:50.960
instead of calling all
the SQL queries by hand,

98
00:07:50.960 --> 00:07:53.989
I can do something like,

99
00:08:11.977 --> 00:08:15.445
&gt;&gt; Steve Kinney: And so now I can call
this and I will get, as you can see,

100
00:08:15.445 --> 00:08:19.240
it's correctly typed, so on and
so forth as we go through.

101
00:08:19.240 --> 00:08:23.379
And I can now use this on both
the trpc server and my Rest server.

102
00:08:23.379 --> 00:08:27.349
And again, it's the same thing we kinda
did with abstracting this stuff away.

103
00:08:27.349 --> 00:08:31.380
We could do it by hand and
add all the things and then use them.

104
00:08:31.380 --> 00:08:33.581
So now, anytime we call client,
dot get all tasks.

105
00:08:33.581 --> 00:08:38.773
We know they're pars by odd, we know
they'll be good, so on and so forth.

106
00:08:38.773 --> 00:08:43.795
Could have done it earlier,
chose not to regret choices.

107
00:08:43.795 --> 00:08:47.382
So now here we can also do in fact,

108
00:08:47.382 --> 00:08:52.637
I'm gonna pay down some
of my sins from earlier,

109
00:08:52.637 --> 00:08:55.982
which is we can also hear it go.

110
00:08:55.982 --> 00:09:03.000
Const, client
&gt;&gt; Steve Kinney: Is

111
00:09:03.000 --> 00:09:12.788
new TaskClient,
&gt;&gt; Steve Kinney: But

112
00:09:12.788 --> 00:09:16.799
anything you pass down in
here should work as well.

113
00:09:25.692 --> 00:09:26.856
&gt;&gt; Steve Kinney: I have
the wrong type in here.

114
00:09:26.856 --> 00:09:32.187
We could fix that real quick, which is,
that's probably the one I like.

115
00:09:32.187 --> 00:09:36.928
I think the one I like is SQL light, and
the one I don't like is SQLite three,

116
00:09:36.928 --> 00:09:41.242
which is the inverse of what anyone
would think would ever be, cool.

117
00:09:41.242 --> 00:09:46.291
So now everything's like
direct database access and

118
00:09:46.291 --> 00:09:49.442
my cool little Zod abstraction.

119
00:09:49.442 --> 00:09:52.303
Should I give them direct database access?

120
00:09:52.303 --> 00:09:54.004
No, the chat said no.

121
00:09:54.004 --> 00:09:58.261
Person that chat who is right said no, so

122
00:09:58.261 --> 00:10:05.084
now we'll grab the,
&gt;&gt; Steve Kinney: And now we can say,

123
00:10:22.814 --> 00:10:25.722
&gt;&gt; Steve Kinney: We are cool actually with

124
00:10:25.722 --> 00:10:29.463
these being under find as well.

125
00:10:29.463 --> 00:10:34.725
So now with all of that extra hoopla,
when we pull in this to the client,

126
00:10:34.725 --> 00:10:40.019
they'll get this client that will
currently have one method, right?

127
00:10:40.019 --> 00:10:47.407
One method will take arguments
that are matched by this schema.

128
00:10:47.407 --> 00:10:52.409
And effectively call this
function server side and

129
00:10:52.409 --> 00:10:57.174
then give me back all of
the data that almost as if I

130
00:10:57.174 --> 00:11:02.071
was calling server code from the client,
right?

131
00:11:02.071 --> 00:11:03.560
And it will be transmitted.

132
00:11:03.560 --> 00:11:07.104
And again, it will kind of take
multiple routes of getting there,

133
00:11:07.104 --> 00:11:08.956
a little bit you can have changes.

134
00:11:08.956 --> 00:11:13.869
You can say, hey, anytime something
happens, send a WebSocket request,

135
00:11:13.869 --> 00:11:17.959
and you kind of get that like Firebase,
auto updating as well.

136
00:11:17.959 --> 00:11:22.859
But effectively, what you do with
the TRPC router is you start to define

137
00:11:22.859 --> 00:11:26.465
these public procedures
are basically functions.

138
00:11:26.465 --> 00:11:31.722
Now the client will have a get
tasks method that you can call.

139
00:11:31.722 --> 00:11:35.382
You can also have a create task method,
yeah, and we'll add some more in a second.

140
00:11:35.382 --> 00:11:37.496
But you'll add more and
more of these, right?

141
00:11:37.496 --> 00:11:41.041
And then, effectively, calling the server

142
00:11:41.041 --> 00:11:45.716
code from the client is like
calling it as if you had one app.

143
00:11:45.716 --> 00:11:49.459
But you will get all the type
safety because again,

144
00:11:49.459 --> 00:11:54.522
if we look at this, it knows that
it's got access to the test client.

145
00:11:54.522 --> 00:11:57.227
It knows what the input ought to be,

146
00:11:57.227 --> 00:12:01.662
it knows what the output is going to be,
so on and so forth.

147
00:12:01.662 --> 00:12:04.313
So, everything is typed and

148
00:12:04.313 --> 00:12:09.620
the types themselves are then
available in both places.

