WEBVTT

1
00:00:00.000 --> 00:00:03.085
&gt;&gt; Steve Kinney: Again,
if you have a big, big legacy code base,

2
00:00:03.085 --> 00:00:05.431
start with the small stuff, right?

3
00:00:05.431 --> 00:00:09.316
If you are get a knitting or starting
with a relatively new project, right?

4
00:00:09.316 --> 00:00:12.712
Maybe you can choose to go down
some of these other paths, right?

5
00:00:12.712 --> 00:00:16.441
Some of them have extra complexity, or

6
00:00:16.441 --> 00:00:20.967
with any library from, honestly, anything.

7
00:00:20.967 --> 00:00:24.008
Even React has certain things
that it makes it harder,

8
00:00:24.008 --> 00:00:27.326
despite the 1000 things that
it makes easier, right?

9
00:00:27.326 --> 00:00:29.839
That is true for everything.

10
00:00:29.839 --> 00:00:32.373
And there is a set of
trade offs all the time.

11
00:00:32.373 --> 00:00:35.056
But again, you get to the point where,

12
00:00:35.056 --> 00:00:40.354
from that Prisma to generating Zod
schemas and TRPC clients, so and then it.

13
00:00:40.354 --> 00:00:44.450
Exposing all of those different methods
to the clients without having to

14
00:00:44.450 --> 00:00:48.965
make a whole bunch of different restful
API routes, that can save a ton of time.

15
00:00:48.965 --> 00:00:53.240
In addition to the best way to
get that type safety is to take

16
00:00:53.240 --> 00:00:55.871
the humans out of the loop, right?

17
00:00:55.871 --> 00:01:00.123
If you get to things where it's
a standardized schema, you can get to

18
00:01:00.123 --> 00:01:05.182
the point where, yeah, we can generate
the Zod schemas off the database tables,

19
00:01:05.182 --> 00:01:10.423
the routes off the Zod schemas, the client
off of the like route, so on and so forth.

20
00:01:10.423 --> 00:01:13.636
And then like the chance,
yes, software's bad.

21
00:01:13.636 --> 00:01:17.040
You're not gonna get to a hundred
percent type safety, but

22
00:01:17.040 --> 00:01:20.387
you can at least take the like
somebody was a little tired.

23
00:01:20.387 --> 00:01:25.071
Or decided to wing it all of a sudden at
the end of a several hour long workshop,

24
00:01:25.071 --> 00:01:30.137
and make choices, you can protect from
those things by having automated systems.

25
00:01:30.137 --> 00:01:33.310
It's the same world that if you think
you're gonna catch every coding

26
00:01:33.310 --> 00:01:35.367
pattern through code review, you're not.

27
00:01:35.367 --> 00:01:39.608
You better have CICD and prettier and
ES lint and all those things,

28
00:01:39.608 --> 00:01:41.966
at least backing you up a little bit.

29
00:01:41.966 --> 00:01:48.071
But I do think that the promise of type
safety across the stack is doable.

30
00:01:48.071 --> 00:01:50.999
At what level you can approach it,
it depends on your codebase.

31
00:01:50.999 --> 00:01:55.417
But I think there is a lot of really great
tooling, and some of the game is just

32
00:01:55.417 --> 00:01:59.974
knowing all of the options that do exist
and ways of thinking about it, and then

33
00:01:59.974 --> 00:02:04.631
figuring out how to apply that wide range
of tools to your particular code base.

34
00:02:04.631 --> 00:02:09.202
&gt;&gt; [APPLAUSE]

