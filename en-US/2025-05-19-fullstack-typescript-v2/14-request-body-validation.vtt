WEBVTT

1
00:00:00.000 --> 00:00:02.271
&gt;&gt; Steve Kinney: And so
you can create a few of these and

2
00:00:02.271 --> 00:00:07.033
we'll actually kinda make this a little
bit more generalizable in a second,

3
00:00:07.033 --> 00:00:10.272
a few of these and get lots and
lots of stuff for free.

4
00:00:10.272 --> 00:00:13.006
In the same way we were taking
the existing schemas and

5
00:00:13.006 --> 00:00:16.406
building on top of them, we can
create a few of these middleware and

6
00:00:16.406 --> 00:00:17.883
make it a little bit better.

7
00:00:17.883 --> 00:00:21.099
I can even make this one better, right?

8
00:00:21.099 --> 00:00:26.817
Which is right now this assumes
just this create task schema.

9
00:00:26.817 --> 00:00:28.187
What if I wanted to make it generalizable?

10
00:00:28.187 --> 00:00:32.859
What if I wanted to say, hey,
I want a middleware where I'll

11
00:00:32.859 --> 00:00:36.892
give you a schema and
you make sure that it works, and

12
00:00:36.892 --> 00:00:40.669
I just use that thing all over the place,
right?

13
00:00:40.669 --> 00:00:43.710
So we can do that as well, right?

14
00:00:43.710 --> 00:00:47.806
Who wants to get stressed out for
a moment, you do?

15
00:00:47.806 --> 00:00:51.091
Okay, we got multiple who
want to get stressed out.

16
00:00:51.091 --> 00:00:55.247
Remember when you were first
learning JavaScript and

17
00:00:55.247 --> 00:01:00.880
you saw currying functions and
some functional programming nerd said,

18
00:01:00.880 --> 00:01:04.571
this is the best thing ever,
and you're like,

19
00:01:04.571 --> 00:01:09.765
I don't understand what any of that is,
when am I going to need it?

20
00:01:09.765 --> 00:01:11.871
Right now.

21
00:01:11.871 --> 00:01:16.034
[LAUGH] All right,

22
00:01:16.034 --> 00:01:19.923
short version.

23
00:01:19.923 --> 00:01:24.290
Occurring function is just a function
that returns another function, right?

24
00:01:24.290 --> 00:01:28.034
And as a way, I'm gonna give you
some of the arguments now and

25
00:01:28.034 --> 00:01:30.024
the rest of them later, right?

26
00:01:30.024 --> 00:01:33.013
Which is a great way for,
again, making factories.

27
00:01:33.013 --> 00:01:36.741
I got one Rubeus in the room,
so I knew that word would work.

28
00:01:36.741 --> 00:01:38.793
You're nodding, I said factory.

29
00:01:38.793 --> 00:01:43.470
It's a way to create a function
that will make more functions with

30
00:01:43.470 --> 00:01:46.371
some of the arguments already applied.

31
00:01:46.371 --> 00:01:50.665
So instead of having one where
we validate the request body

32
00:01:50.665 --> 00:01:55.305
with a hard coded in-schema,
what I would like to do is first,

33
00:01:55.305 --> 00:02:00.674
I will give you the schema, and
then you fill in this spot for me, right?

34
00:02:00.674 --> 00:02:05.496
And for being very confusing,

35
00:02:05.496 --> 00:02:10.505
it is luckily, somewhat easy to

36
00:02:10.505 --> 00:02:15.520
implement with our functions.

37
00:02:15.520 --> 00:02:19.540
So I'm gonna get rid of the type stuff for
one second, just cuz it's in the way.

38
00:02:19.540 --> 00:02:21.258
I cut it though and we'll see.

39
00:02:21.258 --> 00:02:24.461
Which is to say, give me some.

40
00:02:27.876 --> 00:02:28.741
&gt;&gt; Steve Kinney: Kinda schema.

41
00:02:31.354 --> 00:02:36.021
&gt;&gt; Steve Kinney: And then I will return
a function to you that will then be

42
00:02:36.021 --> 00:02:38.259
the rest of this, right?

43
00:02:38.259 --> 00:02:40.965
So then we will be able
to say something like,

44
00:02:40.965 --> 00:02:43.969
we'll call this validateBody instead,
right?

45
00:02:43.969 --> 00:02:51.101
Where now we can say validateBody
with a CreateTaskSchema, right?

46
00:02:51.101 --> 00:02:53.830
And that will do one where this
part is filled in with the create

47
00:02:53.830 --> 00:02:54.838
task schema, right?

48
00:02:54.838 --> 00:02:59.398
Then later, I wanna make a validate
body with Create User schema,

49
00:02:59.398 --> 00:03:03.056
same code, you just pass in
a different schema, right?

50
00:03:03.056 --> 00:03:07.539
And I will show you the natural
conclusion of where you can take this,

51
00:03:07.539 --> 00:03:12.404
I will not make you watch me type it,
cuz I did it, and I was gonna do it live,

52
00:03:12.404 --> 00:03:15.442
and I realize that nobody
wants to watch that.

53
00:03:15.442 --> 00:03:18.437
It's not compelling entertainment,
so I'll show you,

54
00:03:18.437 --> 00:03:22.113
be like one of the natural conclusions
in which you can take in a second.

55
00:03:22.113 --> 00:03:25.581
But let's get the conceptual part down.

56
00:03:25.581 --> 00:03:31.869
So now we can have the ability to
validate bodies whenever we want.

57
00:03:31.869 --> 00:03:37.134
What we need to do is to
say we do need a generic,

58
00:03:37.134 --> 00:03:41.461
I'm sorry, and that's going to be.

59
00:03:45.367 --> 00:03:47.976
&gt;&gt; Steve Kinney: I think that
schema is what I needed,

60
00:03:47.976 --> 00:03:53.372
some Zod schema that is evaluating
something being of a given type, right?

61
00:03:53.372 --> 00:03:59.158
So if we look at,
I moved all my things out.

62
00:03:59.158 --> 00:04:06.447
Task schema is really a the type of it is
a Zod schema that matches a task, right?

63
00:04:06.447 --> 00:04:08.049
So we're saying don't worry about it.

64
00:04:08.049 --> 00:04:11.731
It'll become clear.

65
00:04:11.731 --> 00:04:15.475
So we're gonna pass that in and

66
00:04:15.475 --> 00:04:20.083
then what we are going to do is then have

67
00:04:20.083 --> 00:04:25.269
a function that should
give us that request

68
00:04:25.269 --> 00:04:29.606
handler that we had before, cool.

69
00:04:29.606 --> 00:04:35.052
So that is going to give me paste

70
00:04:35.052 --> 00:04:41.761
that code back in and of the same type.

71
00:04:41.761 --> 00:04:44.749
Okay, that stresses you out, I'm sorry.

72
00:04:44.749 --> 00:04:48.794
But watch what you can do cuz you write
that code once, you get it working,

73
00:04:48.794 --> 00:04:51.218
we'll deal with that squiggly in a second.

74
00:04:51.218 --> 00:04:53.420
But now I can do.

75
00:05:03.206 --> 00:05:07.134
&gt;&gt; Steve Kinney: Everything works, but
now I never have to write that middleware

76
00:05:07.134 --> 00:05:11.507
again, cuz it will validate the body
on any schema that I want, right?

77
00:05:11.507 --> 00:05:15.612
And so theoretically, again,
you build up these reusable tools.

78
00:05:15.612 --> 00:05:18.226
Yeah, it's gonna take your morning, right?

79
00:05:18.226 --> 00:05:20.874
But then theoretically,
now you can make large,

80
00:05:20.874 --> 00:05:23.216
sweeping changes to the types very easily.

81
00:05:23.216 --> 00:05:27.219
In your code base, you change the schema,
everything that uses this one will then

82
00:05:27.219 --> 00:05:30.191
validate the body, so
anything that uses this middleware.

83
00:05:30.191 --> 00:05:31.568
And like in Express,

84
00:05:31.568 --> 00:05:35.785
you can say all of these sub paths
should already do that, right?

85
00:05:35.785 --> 00:05:39.622
And have it cascade down, and
get a lot of this for free.

86
00:05:39.622 --> 00:05:43.608
If that stresses you out, you're like,
my app's not that big, I just wanna go

87
00:05:43.608 --> 00:05:47.199
manually do the parsing, you will
still get the same benefit, right?

88
00:05:47.199 --> 00:05:51.477
This is now we're getting to the point of,
how do we do this on larger, and larger,

89
00:05:51.477 --> 00:05:53.148
and larger code bases, right?

90
00:05:53.148 --> 00:05:57.929
But sometimes you can do this to just the
place in your code base that has the most

91
00:05:57.929 --> 00:06:00.616
pain, and that will get you there, right?

92
00:06:00.616 --> 00:06:06.616
And so you could theoretically make
one of these for validate body,

93
00:06:06.616 --> 00:06:11.575
validate query params, and
validate the path params.

94
00:06:11.575 --> 00:06:13.842
And you can make this,
they don't expose the types and

95
00:06:13.842 --> 00:06:15.230
it's really big pain in the ass.

96
00:06:15.230 --> 00:06:19.971
I have a bunch of tricks if you're
interested that I will show you.

97
00:06:19.971 --> 00:06:22.570
But for now, I'm just gonna do this,

98
00:06:22.570 --> 00:06:27.134
which is be an object that can't be null,
is all I'm saying here.

99
00:06:27.134 --> 00:06:28.796
I don't care what you are,
I don't know anything about it.

100
00:06:28.796 --> 00:06:30.215
Just be an object that's not null.

