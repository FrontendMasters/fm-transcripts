WEBVTT

1
00:00:00.000 --> 00:00:03.060
&gt;&gt; Steve Kinney: So now, what if we
wanted to refine something again,

2
00:00:03.060 --> 00:00:07.141
like in TypeScript, we don't get
a lot of programmability right, but

3
00:00:07.141 --> 00:00:09.530
in JavaScript, you can program things.

4
00:00:09.530 --> 00:00:12.504
That's the selling point of JavaScript.

5
00:00:12.504 --> 00:00:18.291
So I've got a stupid little function here,
which is, like, a way, like, is prime.

6
00:00:18.291 --> 00:00:22.264
So if we wanted to have an only allowed
to be prime numbers if the question is,

7
00:00:22.264 --> 00:00:25.698
why would you want this,
I don't have an answer for you, right.

8
00:00:25.698 --> 00:00:28.229
At some point when you get
onto challenge number five,

9
00:00:28.229 --> 00:00:31.600
you start the coffee starts hitting and
you get creative all of a sudden.

10
00:00:31.600 --> 00:00:35.661
So how do we go about doing that, we can
go ahead and kind of take one of these

11
00:00:35.661 --> 00:00:39.152
things we saw before, so
in this case, we want a prime number.

12
00:00:39.152 --> 00:00:44.688
So we can do that z.number, because they
don't all have to be objects that said,

13
00:00:44.688 --> 00:00:49.260
if it was talking and typing at
the same time, if it is just a number,

14
00:00:49.260 --> 00:00:54.157
you could argue, could I have just
done type of number you could have, or

15
00:00:54.157 --> 00:00:56.443
type of equals, equals string.

16
00:00:56.443 --> 00:01:00.536
Yes, but in this case, we can also do
a few more powerful things and like, with

17
00:01:00.536 --> 00:01:04.830
the kind of putting it all together and
nesting, it becomes interesting as well.

18
00:01:04.830 --> 00:01:09.681
So we'll say refine, the one good thing
about copilot sometimes is that, like,

19
00:01:09.681 --> 00:01:14.250
if you've done this enough times in
the same repo, because I you have a branch

20
00:01:14.250 --> 00:01:18.610
called main, I have a branch called
dry run and practice and rehearsal and

21
00:01:18.610 --> 00:01:23.084
people will think I'm live coding,
but I've done this a thousand times.

22
00:01:23.084 --> 00:01:27.867
And so it has been trained on those on
mine so if your suggestions are not nearly

23
00:01:27.867 --> 00:01:30.820
as good,
it's because I have put in the hours.

24
00:01:30.820 --> 00:01:34.176
Cool, so I don't like that
suggestion though actually.

25
00:01:34.176 --> 00:01:35.973
Okay, so we'll say is prime, so

26
00:01:35.973 --> 00:01:39.569
it'll first check to see if it's
a number and then it will, like,

27
00:01:39.569 --> 00:01:43.762
pass that number through this function
to make sure it is what you think it is.

28
00:01:43.762 --> 00:01:48.311
So again, probably like, also useful for
a string of a particular format,

29
00:01:48.311 --> 00:01:51.023
a string that matches a given regex,
right.

30
00:01:51.023 --> 00:01:54.383
If we wanted to, I don't know if there's
a built in helper for a zip code, but

31
00:01:54.383 --> 00:01:56.886
you could refine it to say,
yeah, it should be a string.

32
00:01:56.886 --> 00:01:59.546
It should have a length of five and

33
00:01:59.546 --> 00:02:05.443
also it should be your match this
regex where it's five numbers, right?

34
00:02:05.443 --> 00:02:10.794
Or it's a zip code and I'm totally cool
with it being five numbers or a hyphen,

35
00:02:10.794 --> 00:02:16.245
and then four more digits for a US, longer
zip code, so on and so forth, right?

36
00:02:16.245 --> 00:02:21.063
Like, the idea that you can, like,
add that little extra stuff and again,

37
00:02:21.063 --> 00:02:25.069
trying at that point to save you
a bunch of other things as well.

38
00:02:25.069 --> 00:02:31.148
The other thing that we'll do here
is you can see this error is like,

39
00:02:31.148 --> 00:02:33.505
that's unique, right?

40
00:02:33.505 --> 00:02:40.143
And so like, we are throwing,
if I just turn this into like,

41
00:02:40.143 --> 00:02:44.578
to throw, I think, can I take that out?

42
00:02:44.578 --> 00:02:45.976
Like it obviously throws, but

43
00:02:45.976 --> 00:02:49.815
you can actually define more helpful error
messages, why would you want to do this?

44
00:02:49.815 --> 00:02:53.421
Okay, it didn't validate
on the API level and

45
00:02:53.421 --> 00:02:58.612
I want to send back a 400 with
like actual helpful information.

46
00:02:58.612 --> 00:03:01.905
Formation that is not like me just
leaking Zod error messages all over

47
00:03:01.905 --> 00:03:02.882
the place, right?

48
00:03:02.882 --> 00:03:08.930
You could then include that error
message in the 400 response,

49
00:03:08.930 --> 00:03:14.014
or you using as Zod schema for
form validation, right?

50
00:03:14.014 --> 00:03:18.362
And you want to be able to say like,
hey, for this input field,

51
00:03:18.362 --> 00:03:22.650
feel this is, email address
must include whatever, right?

52
00:03:22.650 --> 00:03:27.790
That's not a valid URL, so on and so
forth, so you can always like for

53
00:03:27.790 --> 00:03:31.259
a lot of these,
also add in a message, right?

54
00:03:38.672 --> 00:03:41.280
&gt;&gt; Steve Kinney: Cool and
now they pass, all right?

55
00:03:41.280 --> 00:03:46.013
The transform we can kind
of take a look at as well,

56
00:03:46.013 --> 00:03:51.311
which is, there are lots of
things that we deal with that

57
00:03:51.311 --> 00:03:56.188
do not serialize into JSON super well,
all right.

58
00:03:56.188 --> 00:04:00.828
And a lot of times we can't send full
on JavaScript, objects over the wire,

59
00:04:00.828 --> 00:04:04.321
we can only send JSON that we
can rehydrate back in there.

60
00:04:04.321 --> 00:04:10.054
One of the things that usually comes up
is a date and stuff along those lines,

61
00:04:10.054 --> 00:04:14.458
we do wanna make sure that at
first it's a string, right?

62
00:04:14.458 --> 00:04:18.279
Because otherwise,
what am I transforming, right?

63
00:04:18.279 --> 00:04:21.945
We could say, like,
it's a string or a date already,

64
00:04:21.945 --> 00:04:25.212
I don't hate that idea but,
like, I know that,

65
00:04:25.212 --> 00:04:30.344
like in this very fictitious example,
it's coming back as from a JSON API.

66
00:04:30.344 --> 00:04:35.432
And the cool thing is, because you
already validated that it's a string,

67
00:04:35.432 --> 00:04:37.953
this value here is typed as a string.

68
00:04:37.953 --> 00:04:42.023
Right, you don't, it's not unknown
it's like you've already figured out

69
00:04:42.023 --> 00:04:45.365
part of what it is you know,
it's a string of some sort, right.

70
00:04:45.365 --> 00:04:50.020
So now typescript is already
inferred that it is a string, and

71
00:04:50.020 --> 00:04:55.029
you can, kind of, like,
move on with your life and so now you can,

72
00:04:55.029 --> 00:04:59.259
like, create a new date out of it,
in this case as well.

73
00:04:59.259 --> 00:05:04.201
And so because again, this is string,
we hope that when we have new date,

74
00:05:04.201 --> 00:05:07.549
if that ends up with,
like, something invalid,

75
00:05:07.549 --> 00:05:10.442
that we know that it was not a date,
right.

76
00:05:10.442 --> 00:05:13.957
Because, like, we check to see,
again, libraries like super

77
00:05:13.957 --> 00:05:18.530
JSON will also do something very similar
for you, in terms of doing that coercion.

78
00:05:18.530 --> 00:05:22.657
But it's pretty cool to be able to do
yourself in a pinch if you don't want to

79
00:05:22.657 --> 00:05:24.109
pull in another library.

80
00:05:24.109 --> 00:05:26.413
So let's make sure that
as I was talking and

81
00:05:26.413 --> 00:05:29.624
typing that I was not doing
things that were silly, right?

82
00:05:29.624 --> 00:05:33.863
And so like if you check it out, we parse
it and we know already, like if you look

83
00:05:33.863 --> 00:05:38.321
at the Typescript type, it has already
inferred this is actually a date, right?

84
00:05:38.321 --> 00:05:42.925
Just by the act of parsing it, and
then we I check it 1000 more times.

85
00:05:42.925 --> 00:05:47.640
We can turn it back into a string,
if we want to, great and like, if it's not

86
00:05:47.640 --> 00:05:52.687
a date, we throw with like, our like,
our own special error messages, right?

87
00:05:52.687 --> 00:05:58.320
If it throws, that's how you know it
didn't pass the validation, right.

88
00:05:58.320 --> 00:06:05.651
All that safe parse really does is it
puts your parsing in a try-catch block.

89
00:06:05.651 --> 00:06:11.196
That's it throwing is the act of failing,
okay.

90
00:06:11.196 --> 00:06:15.625
There is a concept in TypeScript
called a branded type, which is, and

91
00:06:15.625 --> 00:06:18.563
I'll kind of show you
what that is in a second.

92
00:06:18.563 --> 00:06:23.523
So kind of just put the answer in
the assignment on this one but

93
00:06:23.523 --> 00:06:27.812
I think it's because I wanted
to show it at the time.

94
00:06:27.812 --> 00:06:33.848
So we've got this user schema and
then if we look it's like string and

95
00:06:33.848 --> 00:06:38.845
brand is user ID, which is,
this is a TypeScript trick,

96
00:06:38.845 --> 00:06:44.256
which is, if you wanna say,
I went through a lot of work to make

97
00:06:44.256 --> 00:06:49.594
sure this string is an email address or
this string is a UUID.

98
00:06:49.594 --> 00:06:51.915
Type script is like cool as a string,
right?

99
00:06:51.915 --> 00:06:54.507
And so a lot of times,
you will see this move, and

100
00:06:54.507 --> 00:06:56.731
there's a bunch of different ways to do.

101
00:06:56.731 --> 00:07:00.181
It's a string, and, like, some and there's
a bunch of different ways to do it as

102
00:07:00.181 --> 00:07:03.633
a string and like, some weird metadata
that doesn't like really exist, right?

103
00:07:03.633 --> 00:07:10.434
And so now, if something says,
&gt;&gt; Steve Kinney: In this case,

104
00:07:10.434 --> 00:07:15.309
like,
&gt;&gt; Steve Kinney: X is a user ID, and

105
00:07:15.309 --> 00:07:20.954
I just give it a strength you'll see,
it's like,

106
00:07:20.954 --> 00:07:25.697
hey, no, I needed to be a user ID, right?

107
00:07:25.697 --> 00:07:30.525
So you do think, I'm gonna check to see
if that string was in fact a user ID and

108
00:07:30.525 --> 00:07:32.877
if it is then it'll match that type.

109
00:07:32.877 --> 00:07:35.318
It's like there's not
necessarily a sad thing,

110
00:07:35.318 --> 00:07:38.515
it's a little typescript trick
to make sure, because, again,

111
00:07:38.515 --> 00:07:42.483
typescript only has A string type and this
is a way to say, but my special string.

112
00:07:42.483 --> 00:07:45.986
But then you will always have to check
to make sure it is first, right?

113
00:07:45.986 --> 00:07:51.926
Even if it is a value from anywhere
else in your code base, you will have

114
00:07:51.926 --> 00:07:58.283
to do some logic to confirm that it is in
fact a UUID in this case but it works.

115
00:07:58.283 --> 00:08:02.842
Like we said before,
there's this idea of pick,

116
00:08:02.842 --> 00:08:07.416
partial omit,
why would you ever want to do this?

117
00:08:07.416 --> 00:08:12.132
Very good reasons you might have let's
yeah, we're gonna build a to do list,

118
00:08:12.132 --> 00:08:13.638
as I discussed, right?

119
00:08:13.638 --> 00:08:18.497
A task that's in the database has an ID,
right?

120
00:08:18.497 --> 00:08:23.503
One that you are just creating, that
you're sending to the API doesn't yet.

121
00:08:23.503 --> 00:08:26.859
So, like, you might only want parts of it,
but then, like,

122
00:08:26.859 --> 00:08:29.329
what happens if we want
to update the object?

123
00:08:29.329 --> 00:08:33.746
Do I wanna make them pass in the entire
full object again or do I say, like,

124
00:08:33.746 --> 00:08:37.542
give me a subset of the properties and
I will update the object?

125
00:08:37.542 --> 00:08:40.377
So a lot of times they
can all be optional,

126
00:08:40.377 --> 00:08:45.808
because if as long as I get an object,
if it's all empty, then we do no updates.

127
00:08:45.808 --> 00:08:48.667
If it's everything,
we update everything, or

128
00:08:48.667 --> 00:08:53.281
maybe I want partial of everything, but
like yo, the Id can't change right?

129
00:08:53.281 --> 00:08:58.977
Some of these tools make it a lot easier
to do that so with a full user schema.

130
00:08:58.977 --> 00:09:04.290
In this case,
what is this one expecting, so we've got

131
00:09:04.290 --> 00:09:11.317
the kind of earlier one that we wrote
with the addresses so on and so forth.

132
00:09:16.920 --> 00:09:21.921
&gt;&gt; Steve Kinney: Cool, use my address
schema from earlier, isn't that nice of

133
00:09:21.921 --> 00:09:27.009
it, great and so here we've got that
full schema and then a partial so

134
00:09:27.009 --> 00:09:32.403
say like, any like, give me a version
of that's all optional, right?

135
00:09:32.403 --> 00:09:36.944
Because if we look here, we say,

136
00:09:36.944 --> 00:09:40.037
type user, I got, I.

137
00:09:42.716 --> 00:09:45.279
&gt;&gt; Steve Kinney: You can see that,
yeah, in this case,

138
00:09:45.279 --> 00:09:48.855
every part of this, except for
the apartment number,

139
00:09:48.855 --> 00:09:53.970
is in this case,
&gt;&gt; Steve Kinney: Is in this case,

140
00:09:53.970 --> 00:09:58.685
like required, if I do the partial

141
00:09:58.685 --> 00:10:03.238
version of it, we can go ahead and

142
00:10:03.238 --> 00:10:09.922
say partial is just going
to be full user schema.

143
00:10:09.922 --> 00:10:11.704
You can see there's some methods on it,
full user schema.partial, right?

144
00:10:11.704 --> 00:10:15.664
And so this is obviously, if you look,

145
00:10:15.664 --> 00:10:21.784
it looks complicated but
if we look at the type that came out,

146
00:10:21.784 --> 00:10:26.224
if we say something
like type partial user,

147
00:10:26.224 --> 00:10:31.984
now you can see that all of
the properties are optional and

148
00:10:31.984 --> 00:10:35.956
they can be undefined, right, cool.

149
00:10:35.956 --> 00:10:41.181
And so like, let's say we only
wanted to show, like, the names and

150
00:10:41.181 --> 00:10:45.492
the addresses or
something like that, right which is,

151
00:10:45.492 --> 00:10:50.534
it's in the test my font is very
big right now, so we'll do like,

152
00:10:50.534 --> 00:10:55.973
full user schema.pick, and
we'll say the properties that we want.

153
00:10:55.973 --> 00:11:02.761
And the nice part is, like,
if you try to put a bogus one in there,

154
00:11:02.761 --> 00:11:07.591
it knows that that's not on the type,
right.

155
00:11:07.591 --> 00:11:11.881
Zod is doing under the hood, kind of
updating types as it goes along you can't

156
00:11:11.881 --> 00:11:16.501
put in fields that aren't there, because
it's already it knows that in that way,

157
00:11:16.501 --> 00:11:21.003
you're extending that full user schema
from earlier cool or one without email.

158
00:11:21.003 --> 00:11:24.473
So it's, you know, dot .omit and so

159
00:11:24.473 --> 00:11:29.360
this will be everything but
the email field, right?

160
00:11:29.360 --> 00:11:34.123
So you can start out with like, you don't
have to necessarily make a whole bunch of

161
00:11:34.123 --> 00:11:36.831
these by hand and
update them all one at a time.

162
00:11:36.831 --> 00:11:39.610
So on and so
forth you can kinda take a base and

163
00:11:39.610 --> 00:11:42.701
then derive and
refine the other ones from that.

164
00:11:44.829 --> 00:11:47.769
&gt;&gt; Steve Kinney: Cool, all right,
then we have a fun one,

165
00:11:47.769 --> 00:11:51.549
this one I use far too often for
this exact purpose, so

166
00:11:51.549 --> 00:11:55.932
I wasn't even particularly
feeling creative at this point.

167
00:11:55.932 --> 00:12:02.851
Which is sometimes you need, we said
there was that email, there was a UUID,

168
00:12:02.851 --> 00:12:07.973
but sometimes I want something
like a hex color, right.

169
00:12:07.973 --> 00:12:12.922
Or an RGB, or something along those lines,
and I need to make sure it's that kind of

170
00:12:12.922 --> 00:12:16.831
string again, TypeScript is not
helping me so much in that case.

171
00:12:16.831 --> 00:12:23.072
So I can do something like this as well,
so we'll say that this is a z.custom and

172
00:12:23.072 --> 00:12:27.730
you do have to give it some kind
of hint into what it can expect

173
00:12:27.730 --> 00:12:32.783
cause like you're now,
you're totally doing your own thing.

174
00:12:32.783 --> 00:12:37.086
You're like,
it should be based on a string, right.

175
00:12:37.086 --> 00:12:41.454
Make sure it's a string first,
or assume it's a string, and

176
00:12:41.454 --> 00:12:44.982
then you know some way to
say that it's a hex code.

177
00:12:44.982 --> 00:12:50.013
You could you know whether it's a regex,
whether you want to check it

178
00:12:50.013 --> 00:12:55.840
into what other ways I think this has got
to be three or six according to my tests.

179
00:12:55.840 --> 00:13:02.572
He says, I'm live regexing now
that's gonna go real well for me.

180
00:13:04.785 --> 00:13:11.076
&gt;&gt; Steve Kinney: No,
I didn't cool that's between three and

181
00:13:11.076 --> 00:13:17.045
six that's like live regexing reg got me.

182
00:13:17.045 --> 00:13:21.249
We'll say either 3 or 6 and so

183
00:13:21.249 --> 00:13:25.615
now this will verify that it is,

184
00:13:25.615 --> 00:13:31.780
it'll work on, three digit hex color.

185
00:13:31.780 --> 00:13:37.425
It will work on a six digit hexadecimal,
hex color,

186
00:13:37.425 --> 00:13:43.858
but it will fail if it doesn't
have all the various things.

187
00:13:43.858 --> 00:13:46.309
You could do this same thing for
like, RGB colors,

188
00:13:46.309 --> 00:13:49.045
anything in your code base
where it's like, it's got to

189
00:13:49.045 --> 00:13:52.481
match this exact thing I got a lot of
rules on what this thing ought to be.

190
00:13:52.481 --> 00:13:55.977
The nice part is I can make
this schema once and use it and

191
00:13:55.977 --> 00:14:00.312
reference it in all my other types and
never think about this again.

192
00:14:00.312 --> 00:14:04.667
I now have a way all throughout my app
to do this as well and like previously,

193
00:14:04.667 --> 00:14:08.610
if I was just, using a type guard
function, I would probably have to

194
00:14:08.610 --> 00:14:12.779
validate all the time all over the place,
is this actually a hex color?

195
00:14:12.779 --> 00:14:16.556
Right, now I can say that if the large
object passes because it will

196
00:14:16.556 --> 00:14:19.470
automatically be typed as
a hex color in this case.

197
00:14:19.470 --> 00:14:21.310
&gt;&gt; Audience 1: What does
that get inferred into?

198
00:14:21.310 --> 00:14:26.033
&gt;&gt; Steve Kinney: I'm pretty sure this
one will get inferred as a string,

199
00:14:26.033 --> 00:14:28.042
and I had to brand it, so

200
00:14:28.042 --> 00:14:34.093
that's a great question let's see
if I can do it live, let's test me.

201
00:14:34.093 --> 00:14:37.727
And so, it is a string, but

202
00:14:37.727 --> 00:14:41.840
I think I can do a brand, yeah.

203
00:14:41.840 --> 00:14:46.754
And give it the brand of a hex color, and
now it is accepted wherever hex colors

204
00:14:46.754 --> 00:14:50.851
are accepted it is like,
it obviously is also a string, right?

205
00:14:50.851 --> 00:14:53.651
And so anything that accepts a string
will accept this hex color and

206
00:14:53.651 --> 00:14:55.708
then anything that's like, no, no, no, no.

207
00:14:55.708 --> 00:14:57.115
It's got to be a hex color,

208
00:14:57.115 --> 00:15:00.435
this is now accepted wherever
hex colors are accepted, right?

209
00:15:00.435 --> 00:15:07.113
So you can do that branding very easily
as well, that's just a utility method.

210
00:15:07.113 --> 00:15:10.872
You saw the other way that I could
do in the comments as well but

211
00:15:10.872 --> 00:15:16.275
incredibly powerful pattern just for just
general typescript use cases, all right?

212
00:15:16.275 --> 00:15:22.116
And then finally, like this one, we will
probably just hand away over a little bit,

213
00:15:22.116 --> 00:15:26.888
because it is a culmination of
a bunch of things, but the ability to,

214
00:15:26.888 --> 00:15:29.849
kind of, like, pull them all together and

215
00:15:29.849 --> 00:15:35.569
have a bunch of different pieces that you
use that you can then make useful as well.

216
00:15:35.569 --> 00:15:40.956
Let's just look at that one, because I
think watching me type that is like,

217
00:15:40.956 --> 00:15:45.525
not that fun, so, yeah,
&gt;&gt; Steve Kinney: So

218
00:15:45.525 --> 00:15:49.744
in this case, like,
we can break it out to being like, okay,

219
00:15:49.744 --> 00:15:55.103
username with the arbitrary rules that
I made of like four to 16 characters,

220
00:15:55.103 --> 00:15:59.176
passwords gotta be a string
that is minimum eight, right?

221
00:15:59.176 --> 00:16:02.576
And then I can test to say it has to
have at least one digit in it obviously.

222
00:16:02.576 --> 00:16:06.075
You can take this to its
natural conclusion as well and

223
00:16:06.075 --> 00:16:11.363
then you can say what error message it
should throw if that didn't happen again,

224
00:16:11.363 --> 00:16:13.961
you do have some of these built in ones.

225
00:16:13.961 --> 00:16:17.328
We can take a look at
the sidebar in the docs,

226
00:16:17.328 --> 00:16:22.161
there's email there's definitely
IP address, UUID-URL.

227
00:16:22.161 --> 00:16:25.444
Those are the only ones I've ever used,
so there's probably more too, yeah,

228
00:16:25.444 --> 00:16:28.193
and a birth date is again,
we're gooing to make sure it's a date.

229
00:16:28.193 --> 00:16:32.388
I could have probably grabbed that date,
one from earlier as well and yeah,

230
00:16:32.388 --> 00:16:36.979
this is the same one we saw, and then this
registration form is just basically built

231
00:16:36.979 --> 00:16:39.033
out of these other schemas, right?

232
00:16:39.033 --> 00:16:41.145
So I don't have to do this all the time,

233
00:16:41.145 --> 00:16:44.736
I can get some of those primitives
in place and move on with my life.

