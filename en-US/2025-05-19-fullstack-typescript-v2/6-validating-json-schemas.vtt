WEBVTT

1
00:00:00.000 --> 00:00:01.067
&gt;&gt; Steve Kinney: What did we just do?

2
00:00:01.067 --> 00:00:03.984
We walked, again,
there are a lot more methods aside.

3
00:00:03.984 --> 00:00:06.746
I think that we're probably
at our capacity for

4
00:00:06.746 --> 00:00:08.823
walking through method by method.

5
00:00:08.823 --> 00:00:13.128
But the important part is now we have
at least one very important tool for

6
00:00:13.128 --> 00:00:15.856
enforcing that type
safety wherever we are,

7
00:00:15.856 --> 00:00:19.659
especially if you're in the case
where it's a node back end and

8
00:00:19.659 --> 00:00:24.003
your client-side app, you can share
these schemas in the same place.

9
00:00:24.003 --> 00:00:28.195
Now you can both parse the request
body with the same thing

10
00:00:28.195 --> 00:00:30.300
doing the form validation.

11
00:00:30.300 --> 00:00:33.633
For the response coming back from the API,
you can make sure when it came out of

12
00:00:33.633 --> 00:00:36.979
the database, that it is what it should
be before you send it as the response.

13
00:00:36.979 --> 00:00:41.515
And then when it gets the browser, use
the same schema to make sure that it is

14
00:00:41.515 --> 00:00:45.547
the thing you think it is, and
even if you didn't share the types,

15
00:00:45.547 --> 00:00:49.512
Zod is going to infer the types for
you, you can do that z.infer.

16
00:00:49.512 --> 00:00:52.817
But also they will be of that type,
you will get all the auto complete,

17
00:00:52.817 --> 00:00:54.508
you will get all the IntelliSense.

18
00:00:54.508 --> 00:00:56.774
You can use these same things
all over the place, so

19
00:00:56.774 --> 00:01:00.056
you can validate the things are what
you think they are on the server side.

20
00:01:00.056 --> 00:01:04.581
You can validate that things are what
you think they are on the client site.

21
00:01:04.581 --> 00:01:07.546
You can validate it before and after it
goes in and out of the database, right?

22
00:01:07.546 --> 00:01:10.972
Before you write it to the file system
if you're saving JSON files, or

23
00:01:10.972 --> 00:01:13.191
using Mongo or something like that, right?

24
00:01:13.191 --> 00:01:18.215
You can use the same schemas literally
everywhere, either if you didn't

25
00:01:18.215 --> 00:01:22.846
even share the types, you can go ahead and
infer the types out of it.

26
00:01:22.846 --> 00:01:29.760
And, like I said before, when we looked
at the Zod documentation before,

27
00:01:29.760 --> 00:01:35.248
right, obviously Zod itself
is a set of it's JavaScript,

28
00:01:35.248 --> 00:01:39.775
right, so
it's not easy to serialize, right?

29
00:01:39.775 --> 00:01:41.647
And just put into a JSON file.

30
00:01:41.647 --> 00:01:46.535
But you know what is, I don't know
why I'm live scrolling in front of

31
00:01:46.535 --> 00:01:50.094
y'all a JSON schema is
just a JavaScript object.

32
00:01:50.094 --> 00:01:53.995
So you could in either a shared repo,
or, honestly,

33
00:01:53.995 --> 00:01:58.158
you could host it somewhere or
in either the server repo or

34
00:01:58.158 --> 00:02:02.256
the client repo turn your Zod
schemas into JSON schema.

35
00:02:02.256 --> 00:02:07.151
And just have a file you can pull down and
get those types on both the client,

36
00:02:07.151 --> 00:02:10.115
and the server, and the data layer, right?

37
00:02:10.115 --> 00:02:13.276
You can just serialize them
into a JSON schema object.

38
00:02:13.276 --> 00:02:15.669
You can either turn back into Zod or
what have you.

39
00:02:15.669 --> 00:02:19.389
We'll also kind of do this with
swagger docs later as well.

40
00:02:19.389 --> 00:02:22.751
And so, now we have the first
piece of our toolkit for

41
00:02:22.751 --> 00:02:28.103
giving ourselves type safety across our
entire stack, which is the ability to kind

42
00:02:28.103 --> 00:02:33.317
of enforce the same schemas and same
types wherever JavaScript is sold, right?

43
00:02:33.317 --> 00:02:38.318
Obviously, if you're using other
languages, the Zod stuff won't work,

44
00:02:38.318 --> 00:02:43.080
but if you serialize it down to the JSON
schema, then you will go ahead and

45
00:02:43.080 --> 00:02:47.714
have the ability to turn that into Go,
Python, Ruby, what have you.

46
00:02:47.714 --> 00:02:51.189
The other thing that I promised to answer,

47
00:02:51.189 --> 00:02:55.447
which is what happens if you
start out with the type.

48
00:02:55.447 --> 00:03:00.416
And I opened that page earlier,
so let's say I had the type,

49
00:03:00.416 --> 00:03:05.398
and I'm trying to write a Zod
schema that matches that type.

50
00:03:05.398 --> 00:03:10.399
There might be a better way to do it, this
is my trick that I think that I invented,

51
00:03:10.399 --> 00:03:14.298
unclear if I actually invited it,
or if other people use it, or

52
00:03:14.298 --> 00:03:16.381
if there's a better way to do it.

53
00:03:16.381 --> 00:03:21.236
But this is what I do, which is,
you can write the schema and

54
00:03:21.236 --> 00:03:26.484
then you can say satisfies with
modern versions of Typescript,

55
00:03:26.484 --> 00:03:29.617
I think Typescript 5 and later, 4?

56
00:03:29.617 --> 00:03:31.147
I don't know, when satisfies came out.

57
00:03:31.147 --> 00:03:34.835
But in any version of Typescript
in the last four years or

58
00:03:34.835 --> 00:03:39.071
something like that,
you should be aware you can say, hey, and

59
00:03:39.071 --> 00:03:42.936
it satisfies and
you have to use this Zod type, that type.

60
00:03:42.936 --> 00:03:47.982
You'll get a red squiggly lines
of sadness if you don't match it,

61
00:03:47.982 --> 00:03:49.883
let me prove that to you.

62
00:03:52.986 --> 00:03:54.136
&gt;&gt; Steve Kinney: Did I not copy the test?

63
00:03:54.136 --> 00:03:55.857
I gotta copy all the things.

64
00:03:55.857 --> 00:03:59.304
You gotta copy and paste from your
own notes, you gotta do it all.

65
00:03:59.304 --> 00:04:03.985
All right, so right now it's good,
it works, if for some reason,

66
00:04:03.985 --> 00:04:08.113
I don't know, I added or
let's change this to be a string.

67
00:04:10.760 --> 00:04:13.336
&gt;&gt; Steve Kinney: Right now
the typescript won't compile.

68
00:04:13.336 --> 00:04:16.677
So you can be confident that
whatever schema you came up, again,

69
00:04:16.677 --> 00:04:19.530
cuz if we don't trust the types
that we wrote on a fetch,

70
00:04:19.530 --> 00:04:22.348
we shouldn't trust it for
making our schemas either.

71
00:04:22.348 --> 00:04:25.813
But at this point, Typescript and
Zod will work together to ensure that you

72
00:04:25.813 --> 00:04:27.961
did the good thing and
you did the right thing.

73
00:04:27.961 --> 00:04:30.249
And so, that's how I do it
when I have the types, but

74
00:04:30.249 --> 00:04:31.816
I don't have the schemas, right?

75
00:04:31.816 --> 00:04:35.364
Cuz the schemas are useful even if
you're never generating types on it,

76
00:04:35.364 --> 00:04:36.524
cuz I can now say, hey,

77
00:04:36.524 --> 00:04:40.443
did I get the thing back from the API that
I thought I was supposed to get, right?

78
00:04:40.443 --> 00:04:44.000
Did I, or if it's going to be one or
two different things,

79
00:04:44.000 --> 00:04:46.262
you can use that safe parse, right?

80
00:04:46.262 --> 00:04:48.658
And have a conditional, right?

81
00:04:48.658 --> 00:04:52.138
And then cast it that way as well and be
like, this could be one of three different

82
00:04:52.138 --> 00:04:55.389
things, I'll use schemas a lot of times,
I won't use the try catch version.

83
00:04:55.389 --> 00:04:59.527
I'll use the safe parse version to say,
if is this thing,

84
00:04:59.527 --> 00:05:02.409
if is that thing, and so on and so forth.

85
00:05:02.409 --> 00:05:03.905
So it's super useful for that as well.

86
00:05:03.905 --> 00:05:07.617
So a lot of times, I'll make schemas
reverse engineered from types I

87
00:05:07.617 --> 00:05:10.184
already have and
trust because I want to use it.

88
00:05:10.184 --> 00:05:15.868
Cuz I don't wanna write those like gnarly
type guards that you saw earlier, right?

89
00:05:15.868 --> 00:05:19.238
Cuz [LAUGH] my code base is open source,
you can find my sins.

90
00:05:19.238 --> 00:05:21.728
There are some egregious
ones that I have done.

91
00:05:21.728 --> 00:05:25.366
And yes, I did in the year 2021, and

92
00:05:25.366 --> 00:05:30.832
I have not refactored them yet,
I will do it, I promise you.

