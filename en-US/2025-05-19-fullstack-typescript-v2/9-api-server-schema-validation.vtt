WEBVTT

1
00:00:00.000 --> 00:00:01.988
&gt;&gt; Steve Kinney: Let's
start with request body,

2
00:00:01.988 --> 00:00:05.762
that seems like a good fun one to
arguably the most useful ones.

3
00:00:05.762 --> 00:00:12.045
That seems like a place where we know
that we shouldn't have an idea yet,

4
00:00:12.045 --> 00:00:16.062
really like,
what is technically coming in,

5
00:00:16.062 --> 00:00:21.624
we can stare at the UI and get a sense,
Which is a required title,

6
00:00:21.624 --> 00:00:27.396
which should definitely be there,
maybe a description, right?

7
00:00:27.396 --> 00:00:30.518
The Product Manager hasn't come to me yet,
saying they should be able to

8
00:00:30.518 --> 00:00:32.987
add a test that's completed yet,
why would you do that?

9
00:00:32.987 --> 00:00:34.599
Sometimes I do to make myself feel good.

10
00:00:34.599 --> 00:00:36.790
Where I'll put it to-do-list I'll
check off the first things that

11
00:00:36.790 --> 00:00:37.402
are already done.

12
00:00:37.402 --> 00:00:39.929
Or in sprint planning,
we do that sometimes.

13
00:00:39.929 --> 00:00:44.133
But we can basically, one,
start by in the absence of a contract,

14
00:00:44.133 --> 00:00:47.827
we need to start reverse
engineering a contract, right?

15
00:00:47.827 --> 00:00:52.785
And so, the contract here is gonna be what
can both the client expect from the API

16
00:00:52.785 --> 00:00:56.857
and what can the backend service
expect from the client, right?

17
00:00:56.857 --> 00:01:01.507
And so, we can start here with
the request body because in this case,

18
00:01:01.507 --> 00:01:06.413
we know that it is a required title and
an optional description, right?

19
00:01:06.413 --> 00:01:09.177
So we'll just start by
putting in this file,

20
00:01:09.177 --> 00:01:11.959
I'm gonna have to move
it out in a little bit.

21
00:01:11.959 --> 00:01:16.900
But we'll start by putting here,
where we might say that we have a we could

22
00:01:16.900 --> 00:01:21.057
say we have a task schema, so
we've got this object, right?

23
00:01:21.057 --> 00:01:27.794
And we're gonna say that
a task itself has got the ID,

24
00:01:27.794 --> 00:01:34.105
those numbers not optional,
tell you that much.

25
00:01:34.105 --> 00:01:38.817
We're gonna say the string, yeah,
cuz an empty string, I think,

26
00:01:38.817 --> 00:01:40.978
doesn't count, we'll see.

27
00:01:40.978 --> 00:01:43.972
I also don't know what my database
respects now that I think about it,

28
00:01:43.972 --> 00:01:45.713
can I store a title with an empty string?

29
00:01:45.713 --> 00:01:47.888
Does that, I don't know.

30
00:01:47.888 --> 00:01:49.772
Description is optional and

31
00:01:49.772 --> 00:01:54.880
completed is a bullying that will default
to false, that seems about right.

32
00:01:54.880 --> 00:01:59.734
So we have that task schema,
we have then the, like we said before,

33
00:01:59.734 --> 00:02:05.546
we derive our other types as we saw in
the previous exercises that we did, right?

34
00:02:05.546 --> 00:02:09.986
So we could say export,

35
00:02:09.986 --> 00:02:15.092
const CreateTaskSchema,

36
00:02:15.092 --> 00:02:21.530
which is going to be, we'll say,

37
00:02:21.530 --> 00:02:27.747
I don't need the ID in that case.

38
00:02:27.747 --> 00:02:30.843
Unclear if that's gonna bite me,
we'll find out together.

39
00:02:30.843 --> 00:02:35.607
And then, the update test schema
is gonna be a partial, and

40
00:02:35.607 --> 00:02:40.751
I don't wanna have an idea in there,
cuz I wanna be able to spread

41
00:02:40.751 --> 00:02:45.637
everything knowing that I'm not,
gonna over write the ID.

42
00:02:45.637 --> 00:02:52.123
Other things that I might need is,
this is a tricky one,

43
00:02:52.123 --> 00:02:57.099
but I don't feel strongly about this one.

44
00:02:57.099 --> 00:03:02.726
Like as a task list or task array, as
an array thereof, they're sometimes like,

45
00:03:02.726 --> 00:03:07.061
don't make a TypeScript type that
is just the array version of it.

46
00:03:07.061 --> 00:03:09.134
But then you've gotta
type array other places.

47
00:03:09.134 --> 00:03:12.056
So your mileage may vary,
I'm gonna do it right now.

48
00:03:12.056 --> 00:03:14.050
And so, now I've got these schemas,

49
00:03:14.050 --> 00:03:17.866
they don't do me any good cuz they're
not being used anywhere, right?

50
00:03:17.866 --> 00:03:19.397
But I can begin to go in.

51
00:03:19.397 --> 00:03:24.420
And this is the part where, towards
the end, we'll look at how to generate

52
00:03:24.420 --> 00:03:29.396
whole sets of schemas and types and
database queries all automagically.

53
00:03:29.396 --> 00:03:32.576
But if you're an existing code base,
that's probably not gonna work for

54
00:03:32.576 --> 00:03:33.201
you, right?

55
00:03:33.201 --> 00:03:38.767
You can't immediately sometimes just whole
hog generate everything, you have to

56
00:03:38.767 --> 00:03:43.868
start at the painful part, and begin
to move towards the better lifestyle.

57
00:03:43.868 --> 00:03:48.072
Cuz in some cases, you are gonna have
to look at the actual API contracts and

58
00:03:48.072 --> 00:03:48.685
find out.

59
00:03:48.685 --> 00:03:51.026
So we'll start with that approach.

60
00:03:51.026 --> 00:03:56.210
So in this case, if we went down,
there's lots of areas that we can do this,

61
00:03:56.210 --> 00:04:01.800
and I'll do some of them, and I'll make
you do some of them, and it'll be great.

62
00:04:01.800 --> 00:04:06.124
But let's start with this one,
cuz this one feels the most egregious,

63
00:04:06.124 --> 00:04:09.438
this is one I'm gonna try to
put into the database, and

64
00:04:09.438 --> 00:04:12.633
I should verify that it is
what I think it is, right?

65
00:04:12.633 --> 00:04:17.342
And this is where we get to see some of
the stuff we were doing those exercises in

66
00:04:17.342 --> 00:04:20.183
practice, where I can
take this CreateTask.

67
00:04:21.492 --> 00:04:25.761
&gt;&gt; Steve Kinney: Schema, and
just parse the body with

68
00:04:25.761 --> 00:04:29.727
it,
&gt;&gt; Steve Kinney: Right?

69
00:04:29.727 --> 00:04:35.332
And now my task is what I
think it ought to be, right?

70
00:04:35.332 --> 00:04:38.594
It is no longer any,
it has all the correct typing.

71
00:04:38.594 --> 00:04:43.746
And if for some reason,
something comes in and

72
00:04:43.746 --> 00:04:46.528
it's not that, right?

73
00:04:46.528 --> 00:04:51.344
Then in that case, we will get to
the point where it will blow up, and

74
00:04:51.344 --> 00:04:54.570
we can figure out how to handle that,
right?

75
00:04:54.570 --> 00:04:58.225
We can choose to look at the errors
object, if it's theoretically,

76
00:04:58.225 --> 00:05:02.963
the one that there's no title, right, we
could theoretically throw the 400 there.

77
00:05:02.963 --> 00:05:07.196
I'm not gonna go to that level right
now in the very beginning, but

78
00:05:07.196 --> 00:05:10.612
we can like deal with the fact
if it doesn't match up.

79
00:05:10.612 --> 00:05:14.874
In this case, this one will almost always
happen because it will have blown up

80
00:05:14.874 --> 00:05:19.858
beforehand, theoretically, this will also,
I would have to change the variables, but

81
00:05:19.858 --> 00:05:23.552
yeah, this will definitely confirm
that it is what we think it is.

82
00:05:23.552 --> 00:05:28.500
And now all the way through,
it's a task, look at that.

83
00:05:28.500 --> 00:05:32.784
The title is the string, everything works
the way we think it's supposed to work.

84
00:05:32.784 --> 00:05:36.074
Life is good, right?

85
00:05:36.074 --> 00:05:39.209
And this approach is solid, right?

86
00:05:39.209 --> 00:05:45.408
We can use this all over the place, we
can try it out in update as well, right?

87
00:05:45.408 --> 00:05:48.228
Cuz right now, okay,
that pram is a string.

88
00:05:48.228 --> 00:05:51.217
Previous is any, the updates are any, and

89
00:05:51.217 --> 00:05:56.126
then I merge them together and
I just write over stuff in the database.

90
00:05:56.126 --> 00:06:00.321
What could possibly go wrong?

91
00:06:00.321 --> 00:06:06.015
Anything, I regret that joke already,
and it just left my mouth.

92
00:06:06.015 --> 00:06:11.209
So we can do a very
similar idea here as well.

93
00:06:11.209 --> 00:06:15.606
And we're gonna have some purposeful
edge cases that I built in here,

94
00:06:15.606 --> 00:06:17.255
did ID need to be a number?

95
00:06:17.255 --> 00:06:22.115
No, did I choose to do that cuz it
made things are slightly harder for

96
00:06:22.115 --> 00:06:24.427
me, so I could show off, I did.

97
00:06:24.427 --> 00:06:29.687
So we'll deal with that in a little bit,
but we do need to figure out,

98
00:06:29.687 --> 00:06:33.524
for at least some of these,
how to validate them.

99
00:06:33.524 --> 00:06:37.036
And again, we'll start with
a somewhat tedious, noisy way, and

100
00:06:37.036 --> 00:06:40.940
then we'll get progressively better
about this over our time together.

101
00:06:40.940 --> 00:06:44.969
So, I can do something very
similar here where again,

102
00:06:44.969 --> 00:06:48.747
we could have the like
UpdateTaskSchema.parse.

103
00:06:52.041 --> 00:06:57.129
And now I know that it is an optional
set of things that should not

104
00:06:57.129 --> 00:07:02.025
include the ID, right,
cuz the ID should come from the URL,

105
00:07:02.025 --> 00:07:05.971
I can even pop this await in here as well,
right?

106
00:07:05.971 --> 00:07:09.538
And I can do something
like this should be a full

107
00:07:09.538 --> 00:07:14.488
task.schema.parse because it's
coming from the database.

108
00:07:14.488 --> 00:07:18.907
And now,
the previous task that we're updating, and

109
00:07:18.907 --> 00:07:21.799
the updates have the correct type.

110
00:07:21.799 --> 00:07:24.718
And because they have the correct type,
again,

111
00:07:24.718 --> 00:07:29.915
they answer question that came up earlier,
which is, once you have defended the walls

112
00:07:29.915 --> 00:07:34.066
of this part of your application,
normal type safety should apply.

113
00:07:34.066 --> 00:07:38.077
You do not need to go parsing
everything all the time.

114
00:07:38.077 --> 00:07:43.323
It is only when either you took a lucky
guess that it was what you thought it was,

115
00:07:43.323 --> 00:07:48.032
or if it ended up as any or unknown for
other reasons, yeah, parse it.

116
00:07:48.032 --> 00:07:53.824
But generally speaking, once you've done
that, you do not need to get egregious and

117
00:07:53.824 --> 00:07:59.536
go everywhere and do it all the time, cuz
I did this workshop on performance before,

118
00:07:59.536 --> 00:08:02.927
and I'll tell you my golden
rule of performance.

119
00:08:02.927 --> 00:08:06.179
Not doing stuff is faster
than doing stuff, right?

120
00:08:06.179 --> 00:08:09.365
And so, if you start parsing all
the time all over the place,

121
00:08:09.365 --> 00:08:13.259
you'll create a performance bottleneck
because you're doing things.

122
00:08:13.259 --> 00:08:15.596
Those things might not be that slow, but

123
00:08:15.596 --> 00:08:18.221
they are slower than not doing them,
right?

124
00:08:18.221 --> 00:08:23.001
And so, we'll do it at the gates
where it's appropriate, but then,

125
00:08:23.001 --> 00:08:25.118
we are well within our rights.

126
00:08:25.118 --> 00:08:29.327
We can see, this is the title,
this is potentially description,

127
00:08:29.327 --> 00:08:31.819
this is definitely a Boolean, right?

128
00:08:31.819 --> 00:08:36.893
This is a string, I have,
in case you ever, get nervous about stuff,

129
00:08:36.893 --> 00:08:40.335
this the API does have 100% test coverage.

130
00:08:40.335 --> 00:08:47.556
And you can see that there are some issues
here, and I know what they are already.

131
00:08:47.556 --> 00:08:52.810
Unfortunately I just send
a 400 no matter what.

132
00:08:52.810 --> 00:09:00.139
But one of the things that we
can do is part of it is Sqlite.

133
00:09:00.139 --> 00:09:05.596
Stores Booleans as ones and
zeros, so that is a place

134
00:09:05.596 --> 00:09:12.555
where we might choose to coerce it
into what we think it ought to be.

135
00:09:12.555 --> 00:09:15.444
Are those ints or strings?

136
00:09:15.444 --> 00:09:20.364
Ints, I think, I don't remember the rules,
JavaScript and the string zero.

137
00:09:20.364 --> 00:09:23.804
I'm not doing a JavaScript
pop quiz right now.

138
00:09:23.804 --> 00:09:26.466
Unclear, but yeah, so now theoretically,

139
00:09:26.466 --> 00:09:29.896
you can kind of do some of those
things and the nice part is,

140
00:09:29.896 --> 00:09:34.397
you'll get the bullying now no matter
what, through the act of parsing it.

141
00:09:34.397 --> 00:09:38.214
Again, we could choose to do
the same thing here as well, right?

142
00:09:38.214 --> 00:09:43.097
Because query params are gonna
treat an ID as a string.

143
00:09:43.097 --> 00:09:47.003
The path param will treat as a string,
I don't wanna deal with that.

144
00:09:47.003 --> 00:09:51.758
So if it is something that can go back
to its number format, go ahead and

145
00:09:51.758 --> 00:09:52.893
do that as well.

146
00:09:52.893 --> 00:09:57.556
So, yeah, and
we can keep doing this various places.

147
00:09:57.556 --> 00:10:01.909
We'll figure out how to make this,
a number or something.

148
00:10:01.909 --> 00:10:04.708
But even if we wanted to make
sure it was a number right now,

149
00:10:04.708 --> 00:10:06.204
Sqlite doesn't really care.

150
00:10:06.204 --> 00:10:11.743
We could do something

151
00:10:11.743 --> 00:10:16.557
even like,
&gt;&gt; Steve Kinney: You can

152
00:10:16.557 --> 00:10:19.135
do it in line if you need to.

153
00:10:29.664 --> 00:10:33.739
&gt;&gt; Steve Kinney: Right, and now, despite
the fact that all path params are numbers,

154
00:10:33.739 --> 00:10:38.307
we did coerce this one into a number, and
I would probably pull this one out and

155
00:10:38.307 --> 00:10:38.955
reuse it.

156
00:10:38.955 --> 00:10:44.315
But mostly to make
the point at this point.

157
00:10:44.315 --> 00:10:45.297
So now it is a number, it will pass,
and so on and so forth.

158
00:10:45.297 --> 00:10:47.353
Let's go play around with the UI for
a moment.

159
00:10:55.612 --> 00:10:58.940
&gt;&gt; Steve Kinney: Cool, we have it.

160
00:10:58.940 --> 00:11:03.440
&gt;&gt; Steve Kinney: It moves to completed
when I check it, there it is, great,

161
00:11:03.440 --> 00:11:04.976
everything works.

