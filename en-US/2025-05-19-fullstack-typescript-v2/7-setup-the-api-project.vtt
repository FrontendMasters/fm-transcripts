WEBVTT

1
00:00:00.000 --> 00:00:04.382
&gt;&gt; Steve Kinney: So now that we've
explored a bunch of Zod-related things and

2
00:00:04.382 --> 00:00:05.897
just like a heads up,

3
00:00:05.897 --> 00:00:10.205
there is some additional content for
you at various points.

4
00:00:10.205 --> 00:00:14.265
I feel like we've covered testing Zod
by accident insofar that by learning it

5
00:00:14.265 --> 00:00:15.519
we're writing tests.

6
00:00:15.519 --> 00:00:21.719
But some other things that you need to
pop in or anything interesting to you.

7
00:00:21.719 --> 00:00:27.104
But we wanna move into the main event,
as we spoke about before,

8
00:00:27.104 --> 00:00:30.713
which is taking a look at our application.

9
00:00:30.713 --> 00:00:34.916
Where, again, the part to look at
that's interesting is obviously

10
00:00:34.916 --> 00:00:39.274
our little UI here, but we'll take
a look at the Express piece as well.

11
00:00:39.274 --> 00:00:43.302
So let's talk about how to
get everything started up.

12
00:00:43.302 --> 00:00:48.450
If you are using VS code, there is a task
in there where you can hit Cmd + Shift +

13
00:00:48.450 --> 00:00:53.838
P, Run Task and Start, which will start
out both the server as well as the client.

14
00:00:53.838 --> 00:00:59.390
But also you can also just
navigate with two terminal tabs,

15
00:00:59.390 --> 00:01:03.053
one to the client repo, NPM, run dev,

16
00:01:03.053 --> 00:01:08.399
one to the server repo,
NPM run dev and spin them both up.

17
00:01:08.399 --> 00:01:10.703
If you're not in VS code,
whatever makes you happiest.

18
00:01:10.703 --> 00:01:14.725
But you do need both running
in order to have a thing.

19
00:01:14.725 --> 00:01:18.146
Otherwise you'll have a UI
that can't talk to a API or

20
00:01:18.146 --> 00:01:20.130
an API with nothing to look at.

21
00:01:20.130 --> 00:01:26.183
And they will be running, the UI will
be on 4000 and the API will be on 4001.

22
00:01:26.183 --> 00:01:31.711
If those don't work for you,
you are more than welcome to change them,

23
00:01:31.711 --> 00:01:35.040
but they work for me, so I'm not going to.

24
00:01:35.040 --> 00:01:36.007
All right, so

25
00:01:36.007 --> 00:01:40.774
there's a whole bunch of places
where we can make some improvements.

26
00:01:40.774 --> 00:01:44.269
Let's look at it at a high level,
and then we will kind of dig in and

27
00:01:44.269 --> 00:01:45.490
find a place to start.

28
00:01:45.490 --> 00:01:50.117
All right, so
if we look at the client folder,

29
00:01:50.117 --> 00:01:55.577
it is effectively a fairly
standard React jam with most

30
00:01:55.577 --> 00:02:01.767
of the actual important stuff
being in the source directory.

31
00:02:01.767 --> 00:02:04.399
We don't have to deal with a lot of this.

32
00:02:04.399 --> 00:02:09.892
I tried to take most of the API
related stuff that we care about and

33
00:02:09.892 --> 00:02:14.772
put it in this api.ts for
us to use, cuz that is, again,

34
00:02:14.772 --> 00:02:18.130
when we talk about those boundaries and

35
00:02:18.130 --> 00:02:22.021
where stuff from
the outside world comes in.

36
00:02:22.021 --> 00:02:27.935
Obviously, where you make those fetch
calls is one of the bigger places.

37
00:02:27.935 --> 00:02:30.670
There are some components,
there's a context, so

38
00:02:30.670 --> 00:02:32.793
I didn't have to put stuff everywhere.

39
00:02:32.793 --> 00:02:38.631
But large majority of what we talk about
is going to be in this api.ts in there,

40
00:02:38.631 --> 00:02:41.903
and then eventually I
will get rid of this and

41
00:02:41.903 --> 00:02:45.804
a few other things and
replace it in this types.ts.

42
00:02:45.804 --> 00:02:51.026
But we might at one point or another pop
into another file just to do a little

43
00:02:51.026 --> 00:02:56.858
quick refactor, but most of our life is
gonna be spent in these two little places.

44
00:02:56.858 --> 00:03:02.642
On the server side of the game we've got,
again,

45
00:03:02.642 --> 00:03:08.583
I chose to just make a simple
Express application.

46
00:03:08.583 --> 00:03:10.809
In here though,
we've got the source directory,

47
00:03:10.809 --> 00:03:12.527
which is the one we care about the most.

48
00:03:12.527 --> 00:03:17.578
And some of these other files
mostly exist to get out of the way.

49
00:03:17.578 --> 00:03:22.740
So we can look at server.ts,
which we've basically

50
00:03:22.740 --> 00:03:27.337
got the ability to crud on these tasks,
right?

51
00:03:27.337 --> 00:03:29.500
And so we've got those as well.

52
00:03:29.500 --> 00:03:32.090
And we'll, there's some
prepared SQL statements again.

53
00:03:32.090 --> 00:03:33.298
Do they need to go up here?

54
00:03:33.298 --> 00:03:35.580
No, was I just trying to
get stuff out of the way so

55
00:03:35.580 --> 00:03:37.385
that we could like focus on the parts?

56
00:03:37.385 --> 00:03:42.434
Absolutely, so most of our time
on the server side is gonna be

57
00:03:42.434 --> 00:03:47.487
in server.ts,
maybe popping into database at some point.

58
00:03:47.487 --> 00:03:51.564
And then again, some helper files
just to get them out of the way so

59
00:03:51.564 --> 00:03:54.172
that we can focus on
what we want to cover.

60
00:03:54.172 --> 00:03:59.428
And then lastly, when it feels
appropriate, there's a shared folder

61
00:03:59.428 --> 00:04:04.696
when we'll talk about the idea of
where is the source of truth, right?

62
00:04:04.696 --> 00:04:06.692
Is like,
does it belong in the server repo?

63
00:04:06.692 --> 00:04:09.007
Does it belong in the client repo?

64
00:04:09.007 --> 00:04:13.927
I can make cases for almost all of them,
but then there's also a case to be made

65
00:04:13.927 --> 00:04:17.656
of, should they be independent
of the two things as well?

