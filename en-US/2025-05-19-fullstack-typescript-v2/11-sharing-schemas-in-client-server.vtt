WEBVTT

1
00:00:00.000 --> 00:00:03.996
Now the tricky part is figuring
out how to share them, and

2
00:00:03.996 --> 00:00:07.584
it's not tricky, and so
far that it's hard to do.

3
00:00:07.584 --> 00:00:12.903
It's tricky because the answer is,
it depends.

4
00:00:12.903 --> 00:00:15.422
It depends on the code base
that you're in, right?

5
00:00:15.422 --> 00:00:22.011
If you are in one true, like monorepo
with folders, it's not that hard.

6
00:00:22.011 --> 00:00:23.836
Just put them in the folders, right?

7
00:00:23.836 --> 00:00:25.959
And share them.

8
00:00:25.959 --> 00:00:27.141
But that wasn't your question.

9
00:00:27.141 --> 00:00:32.190
If you have just a bunch of folders,
you already guessed that was the way.

10
00:00:32.190 --> 00:00:35.323
So then there are the various
ways that we can do this, right?

11
00:00:35.323 --> 00:00:41.185
We will talk about various different API,
schema, contract formats,

12
00:00:41.185 --> 00:00:47.541
open API, I will at one point mess up and
say open AI at some point, I'm sorry.

13
00:00:47.541 --> 00:00:51.862
We'll talk about that, we'll also just
talk about various different monorepo or

14
00:00:51.862 --> 00:00:53.476
package strategies, right?

15
00:00:53.476 --> 00:00:56.037
If everything is in TypeScript,
then life is pretty easy,

16
00:00:56.037 --> 00:00:57.891
cuz you can do a bunch
of different things.

17
00:00:57.891 --> 00:01:02.735
You could have some kind
of monorepo architecture,

18
00:01:02.735 --> 00:01:07.479
the way that we do it is
like an NPM package, right?

19
00:01:07.479 --> 00:01:11.037
The contracts, the Zod types,
and the schemas and

20
00:01:11.037 --> 00:01:13.613
the types are just in an NPM package.

21
00:01:13.613 --> 00:01:19.007
There's good parts and
bad parts to all of these things, right?

22
00:01:19.007 --> 00:01:25.137
Having it in an NPM package is great for
the same reason that it's terrible, right?

23
00:01:25.137 --> 00:01:29.959
Which is, you've gotta hope that
the server is using the same version of

24
00:01:29.959 --> 00:01:32.660
that API package as the client, right?

25
00:01:32.660 --> 00:01:35.646
But if you are a large enough company,

26
00:01:35.646 --> 00:01:39.941
sometimes if you can have
the right version control and

27
00:01:39.941 --> 00:01:44.982
breaking changes in the semantic
versioning, then not forcing

28
00:01:44.982 --> 00:01:50.518
everyone to upgrade in lockstep in
a 5000 person org is a feature.

29
00:01:50.518 --> 00:01:54.275
When there's two teams or three teams and
everyone's got to coordinate,

30
00:01:54.275 --> 00:01:58.044
because you don't have the infrastructure
for December stuff like that.

31
00:01:58.044 --> 00:02:00.155
It's a bug, you know what I mean?

32
00:02:00.155 --> 00:02:03.578
And so I'm not gonna tell you,
do it or don't do it in a given way.

33
00:02:03.578 --> 00:02:06.096
The answer is, it depends.

34
00:02:06.096 --> 00:02:08.198
It's kinda a schema migration.

35
00:02:08.198 --> 00:02:13.339
Yeah, a lot of things there are trade offs
and that's why we get paid the dollars

36
00:02:13.339 --> 00:02:18.582
to figure these things out, because a lot
of times there aren't a right answer.

37
00:02:18.582 --> 00:02:25.227
So if they were in, these are technically
in the same project, right?

38
00:02:25.227 --> 00:02:30.129
I could dot-dot-slash,
dot-dot-slash, whatever.

39
00:02:30.129 --> 00:02:33.718
And honestly,
you don't have to worry about versioning,

40
00:02:33.718 --> 00:02:38.309
you don't have to worry about keeping
stuff in sync, if you can get away with

41
00:02:38.309 --> 00:02:43.728
that 100% do the easiest possible thing
and then what happens if you can't, right?

42
00:02:43.728 --> 00:02:45.486
So then the other option is,

43
00:02:45.486 --> 00:02:50.121
and we're simulated a little bit,
is we have this shared directory here.

44
00:02:50.121 --> 00:02:58.681
And shared has,
it's exporting everything from schemas.

45
00:02:58.681 --> 00:03:00.356
Guess what's in schemas?

46
00:03:00.356 --> 00:03:02.386
Nothing, right?

47
00:03:02.386 --> 00:03:06.990
So this is the kind of approach closer
to what we do, but we get to cheat.

48
00:03:06.990 --> 00:03:10.986
I work in an open source
company with SDKs, and so

49
00:03:10.986 --> 00:03:14.696
our types are also in
our SDK package as well.

50
00:03:14.696 --> 00:03:17.817
So I get some of those handled for
me for free, but

51
00:03:17.817 --> 00:03:21.475
we could theoretically take
those things that we copy and

52
00:03:21.475 --> 00:03:25.916
pasted in the client and the server and
begin to dedupe them, right?

53
00:03:25.916 --> 00:03:27.757
So we can take these same ones.

54
00:03:27.757 --> 00:03:31.935
So now what we do is we take this before I
delete it, cuz I don't get the red squeeze

55
00:03:31.935 --> 00:03:34.712
lines of death,
I'm just gonna copy it for a second.

56
00:03:34.712 --> 00:03:38.095
And we can go into our shared library,

57
00:03:38.095 --> 00:03:43.816
the real name of the package
is the busy-bee-schema, right?

58
00:03:43.816 --> 00:03:49.019
The UI is busy-bee-UI, the servers,
busy-bee-API, whatever.

59
00:03:49.019 --> 00:03:50.616
Those felt hard to say.

60
00:03:50.616 --> 00:03:54.747
So the folder is named client server and
shared, but it has a package name.

61
00:03:54.747 --> 00:04:01.966
And so we can take this and
we go into schemas, pop them in here.

62
00:04:01.966 --> 00:04:05.121
So now they are part of this package,
right?

63
00:04:05.121 --> 00:04:09.390
And I will go ahead and
do the inferred types as well.

64
00:04:09.390 --> 00:04:14.124
And so we can say export type task is

65
00:04:14.124 --> 00:04:18.532
inferred from the TaskSchema,

66
00:04:18.532 --> 00:04:22.124
export type CreateTask,

67
00:04:22.124 --> 00:04:26.206
export type UpdateTask, and

68
00:04:26.206 --> 00:04:31.770
the TaskList, cool, we can save that.

69
00:04:31.770 --> 00:04:36.388
And theoretically, these are now all
exported from the package, right?

70
00:04:36.388 --> 00:04:39.537
So instead of having to copy and
paste them, and

71
00:04:39.537 --> 00:04:42.779
keep them in sync across two code bases,
right?

72
00:04:42.779 --> 00:04:46.290
What I can do is basically
just remove them from both.

73
00:04:46.290 --> 00:04:48.673
So now get rid of all this.

74
00:04:52.632 --> 00:04:59.511
And we'll do import.

75
00:05:06.742 --> 00:05:11.978
The UpdateTaskSchema, we CreateTaskSchema,

76
00:05:11.978 --> 00:05:16.710
the TaskSchema, and the TaskListSchema.

77
00:05:21.404 --> 00:05:24.896
Yeah, used, but never read, we'll deal
with that, we'll take it for now.

78
00:05:24.896 --> 00:05:30.000
And so we can take that from this library,
and we can go back over into the client.

79
00:05:30.000 --> 00:05:33.297
We can even just use the ones
we're using for now.

80
00:05:33.297 --> 00:05:40.335
I'm slightly suspicious though for
a second, because I'm pretty sure.

81
00:05:45.080 --> 00:05:47.817
I'm in the client.

82
00:05:47.817 --> 00:05:51.699
I was like, didn't I validate
some request bodies earlier?

83
00:05:51.699 --> 00:05:55.204
So I'm in the client, so
we did the client first.

84
00:05:55.204 --> 00:05:57.405
So there we only did the TaskList, so

85
00:05:57.405 --> 00:06:00.816
just to get the red squiggly
lines of death out of the way.

86
00:06:00.816 --> 00:06:02.979
So now these are coming
from that shared library.

87
00:06:02.979 --> 00:06:07.935
Again, if you have to do this, do it,
if you can get away without doing it,

88
00:06:07.935 --> 00:06:11.666
not doing stuff is way easier
than doing stuff, right?

89
00:06:11.666 --> 00:06:16.783
Larry Wall, the guy who created Pearl,
his famous quote

90
00:06:16.783 --> 00:06:22.539
is the virtues of a great programmer
are laziness, hubris, and

91
00:06:22.539 --> 00:06:27.561
impatience, I believe that wholeheartedly,
right?

92
00:06:27.561 --> 00:06:28.167
Cool, cool, cool.

93
00:06:28.167 --> 00:06:32.623
So now obviously,
I'm pulling this in from the shared repo.

94
00:06:32.623 --> 00:06:39.028
As you can see, it works, and even my
fetch all tasks is the right thing,

95
00:06:39.028 --> 00:06:42.815
cuz I'm using a schema, I'm parsing it.

96
00:06:42.815 --> 00:06:47.089
It's not even in the same, quote unquote,

97
00:06:47.089 --> 00:06:50.909
same repo, but it's a fake monorepo.

98
00:06:50.909 --> 00:06:55.706
And then we do the same thing in server,
we go to server.ts.

99
00:06:55.706 --> 00:07:02.765
We will then delete all of this,
pull this in.

100
00:07:02.765 --> 00:07:06.757
But what are the ones I need?

101
00:07:06.757 --> 00:07:12.129
We've got this CreateTaskSchema,
which we're gonna import

102
00:07:12.129 --> 00:07:17.208
from busy-bee-schema,
TaskSchema and UpdateSchema.

103
00:07:17.208 --> 00:07:23.375
Now my client and
my server are definitely validating

104
00:07:23.375 --> 00:07:28.317
everything from the same schema, right?

105
00:07:28.317 --> 00:07:32.394
I am cheating right now
with the versioning.

106
00:07:32.394 --> 00:07:34.931
It's not really cheating, cuz again,

107
00:07:34.931 --> 00:07:39.119
you should always do the simplest
thing until you can't, right?

108
00:07:39.119 --> 00:07:42.498
And so the one very smart,

109
00:07:42.498 --> 00:07:47.571
big brain cheat is in the package json.

110
00:07:47.571 --> 00:07:52.953
The version that we're pinning to is
literally whatever the latest version is,

111
00:07:52.953 --> 00:07:53.517
right?

112
00:07:53.517 --> 00:07:56.809
You can still run into problems where,

113
00:07:56.809 --> 00:08:01.608
obviously this is only checked
at like NPM install time.

114
00:08:01.608 --> 00:08:04.682
Is where you get the newest version,
which means, usually,

115
00:08:04.682 --> 00:08:08.357
if you're pointing to first seller,
what have you or building, right?

116
00:08:08.357 --> 00:08:13.313
Whoever built last, you could
theoretically have some drift between

117
00:08:13.313 --> 00:08:17.688
the two, ideally,
you can imagine handle it a bunch of ways.

118
00:08:17.688 --> 00:08:21.397
For right now,
there's always gonna be a version of this.

119
00:08:21.397 --> 00:08:26.343
But at this point,
if you are building them together,

120
00:08:26.343 --> 00:08:31.624
you will always get the same
scheme as shared across both.

