WEBVTT

1
00:00:00.163 --> 00:00:04.850
&gt;&gt; Steve Kinney: So the one last thing
we're gonna talk about is a cool little

2
00:00:04.850 --> 00:00:10.943
library called Prisma, not to be confused
with Prismo from Adventure Time,

3
00:00:10.943 --> 00:00:13.207
even though it ends in.io.

4
00:00:13.207 --> 00:00:19.087
And all Prisma really is,
is a nice abstraction for

5
00:00:19.087 --> 00:00:22.109
working with databases.

6
00:00:22.109 --> 00:00:25.769
If you have come from something
like Ruby on Rails and

7
00:00:25.769 --> 00:00:29.597
you're used to having
migrations kinda automated and

8
00:00:29.597 --> 00:00:35.254
just kinda defining a schema and letting
the database stuff take care of itself,

9
00:00:35.254 --> 00:00:38.937
and getting nice little
methods that are type safe.

10
00:00:38.937 --> 00:00:43.767
I mean, not that you Ruby,
because whatever, I love Ruby,

11
00:00:43.767 --> 00:00:49.451
that was not a Ruby dig, but Ruby is not
obsessing about type safety all the time.

12
00:00:49.451 --> 00:00:53.402
And gives you a nice abstraction for
that, and

13
00:00:53.402 --> 00:00:58.366
like, we'll also host a set databases for
you for money,

14
00:00:58.366 --> 00:01:02.234
but to just run it kind
of while prototyping.

15
00:01:02.234 --> 00:01:06.333
It's like kinda the company I work at,
which is like, we have a cloud offering so

16
00:01:06.333 --> 00:01:09.368
that I will pay my salaries, so
I can keep working on the UI.

17
00:01:09.368 --> 00:01:12.746
But you can use it completely for
free, same is true of Prisma.

18
00:01:12.746 --> 00:01:16.901
There's totally free options,
you can do all sorts of stuff for free.

19
00:01:16.901 --> 00:01:21.538
You can hook up to any Postgres database,
SQLite, what have you.

20
00:01:21.538 --> 00:01:23.025
You can also pay them.

21
00:01:23.025 --> 00:01:26.448
I personally don't like
managing databases, so

22
00:01:26.448 --> 00:01:30.447
I would probably do that, but
some people like to do that.

23
00:01:30.447 --> 00:01:33.827
But yeah, so getting set up with Prisma.

24
00:01:33.827 --> 00:01:35.785
The final piece of like again,

25
00:01:35.785 --> 00:01:40.240
we started doing stuff by hand on
either the client or the server side.

26
00:01:40.240 --> 00:01:44.085
Then we did some stuff by hand, a little
late in the game on the database side.

27
00:01:44.085 --> 00:01:47.767
But we also looked at, can you also
just generate the contracts and

28
00:01:47.767 --> 00:01:49.627
get all the type safety for free?

29
00:01:49.627 --> 00:01:53.799
I will again repeat the same thing I've
repeated like 78 times this workshop.

30
00:01:53.799 --> 00:01:54.822
What is the right answer?

31
00:01:54.822 --> 00:01:56.622
The right answer is it depends.

32
00:01:56.622 --> 00:02:00.447
If you already have a bunch of like,
bespoke database stuff,

33
00:02:00.447 --> 00:02:04.861
maybe it might be harder to retrofit
this on than it is to just kinda build

34
00:02:04.861 --> 00:02:07.087
the client that I built real quick.

35
00:02:07.087 --> 00:02:08.894
Or maybe this is the better choice.

36
00:02:08.894 --> 00:02:11.749
Or maybe it is new things and you migrate.

37
00:02:11.749 --> 00:02:16.163
There's probably a long course we
should do one day on the tough

38
00:02:16.163 --> 00:02:20.005
decisions you have to make
as an architect sometimes.

39
00:02:20.005 --> 00:02:22.641
Is where every option is
terrible in different ways.

40
00:02:22.641 --> 00:02:23.784
We're not doing that today.

41
00:02:23.784 --> 00:02:26.822
So we're gonna look at how
to get set up with Prisma,

42
00:02:26.822 --> 00:02:30.288
just to kind of see the wide
range of concepts at this point.

43
00:02:30.288 --> 00:02:35.452
So yeah, if you're using the example repos
from the course, I went ahead and NPM and

44
00:02:35.452 --> 00:02:40.688
I put everything we would possibly need in
the package.json, which is why we have not

45
00:02:40.688 --> 00:02:45.810
been NPM installing cuz that is one extra
demo roller coaster I didn't wanna ride.

46
00:02:45.810 --> 00:02:47.818
So here we are.

47
00:02:47.818 --> 00:02:52.313
So we do have Prisma in place, so

48
00:02:52.313 --> 00:02:58.146
we can do something like mpx prisma init.

49
00:02:58.146 --> 00:02:59.922
I am in the server repo, right, cool.

50
00:02:59.922 --> 00:03:08.103
Cool, you won't have that problem
cuz it's not checked in, but I do.

51
00:03:08.103 --> 00:03:12.063
And then we're just gonna
do npm prisma admit,

52
00:03:12.063 --> 00:03:17.315
the ones that catch you when you
also practice are the fun ones.

53
00:03:17.315 --> 00:03:22.165
Cool, cool, cool, sets up a basic

54
00:03:22.165 --> 00:03:27.186
schema in Prisma Schema, awesome.

55
00:03:27.186 --> 00:03:33.696
And here we've got a little
bit of a configuration file.

56
00:03:33.696 --> 00:03:37.936
Let's hide this for a hot minute or
just smallerize it.

57
00:03:37.936 --> 00:03:44.800
Not a lot set up here so far, we're gonna
have to change a few things anyway.

58
00:03:44.800 --> 00:03:49.649
If you do not have syntax highlighting,
you just need an extension,

59
00:03:49.649 --> 00:03:54.495
if you're in VS Code, if you're in
something else, I don't have to

60
00:03:54.495 --> 00:03:59.783
figure it out, which is there is
a Prisma plug-in, you go and install it.

61
00:03:59.783 --> 00:04:03.203
I think it probably hassled you as
a recommended extension when you open

62
00:04:03.203 --> 00:04:05.085
VS Code, or maybe you already have it.

63
00:04:05.085 --> 00:04:08.775
But then you will get
the syntax highlighting.

64
00:04:08.775 --> 00:04:13.374
If you see this without syntax
highlighting, it's the same file,

65
00:04:13.374 --> 00:04:16.690
everything's okay,
it's just not as pretty.

66
00:04:16.690 --> 00:04:20.544
So some things that we do need to change,
the client is the same.

67
00:04:20.544 --> 00:04:24.546
I'm personally not using
Postgres at this moment.

68
00:04:24.546 --> 00:04:29.790
We were using SQLite because playing with
containers in Postgres just felt like,

69
00:04:29.790 --> 00:04:34.362
again, one extra demo roller coaster
that I did not feel like writing.

70
00:04:34.362 --> 00:04:37.089
So we'll change this over to SQLite.

71
00:04:37.089 --> 00:04:41.762
I don't think I checked
the environment variables into

72
00:04:41.762 --> 00:04:46.246
version control,
because you're not supposed to.

73
00:04:46.246 --> 00:04:50.270
This whole time we've been using
a database called database.sqlite.

74
00:04:50.270 --> 00:04:54.529
I'm just gonna use a different one,
because,

75
00:04:54.529 --> 00:04:58.999
again, I don't want to find
out why when the weird

76
00:04:58.999 --> 00:05:03.592
things of switching
database drivers midstream.

77
00:05:03.592 --> 00:05:08.847
So I'm gonna call it,
I don't know, development.

78
00:05:08.847 --> 00:05:11.995
Sure, that feels good.

79
00:05:11.995 --> 00:05:13.838
You can call it whatever you want.

80
00:05:13.838 --> 00:05:18.740
And the only other thing that we need
to do here is talk about the stuff

81
00:05:18.740 --> 00:05:21.839
that's gonna be in our database, right?

82
00:05:21.839 --> 00:05:27.622
Very glamorously in
the kind of like hard-coded

83
00:05:27.622 --> 00:05:33.130
version that's kinda defined here, right?

84
00:05:33.130 --> 00:05:37.624
I don't wanna do that,
I didn't enjoy writing that.

85
00:05:37.624 --> 00:05:42.153
In Prisma, it looks like this, model task,

86
00:05:42.153 --> 00:05:46.578
in this case,
the ID is gonna be an integer.

87
00:05:46.578 --> 00:05:48.966
Sure, yeah,
that's exactly what's gonna type.

88
00:05:48.966 --> 00:05:52.732
This is gonna be, again, the identifier,
and we're gonna auto increment, right?

89
00:05:52.732 --> 00:05:55.082
So the first one will be one,
two, so on and so forth.

90
00:05:55.082 --> 00:06:00.848
The title, sure, is a string,
okay, description.

91
00:06:00.848 --> 00:06:03.841
We make this an optional string,
just like it was in the types earlier.

92
00:06:03.841 --> 00:06:06.302
And yeah, that seems great.

93
00:06:06.302 --> 00:06:09.570
There is stuff like created at those,
all seem good too, but

94
00:06:09.570 --> 00:06:13.497
that's gonna be roughly what we've
been working with the entire time.

95
00:06:13.497 --> 00:06:18.027
And you can, again, if you had users or
stuff like that, you can define all of

96
00:06:18.027 --> 00:06:22.700
these, you can relate them to each other,
kinda set up all the relationships,

97
00:06:22.700 --> 00:06:26.232
not necessarily worry about
the tables yourself, right?

98
00:06:26.232 --> 00:06:30.181
All of that will be handled for
you, as well as generating

99
00:06:30.181 --> 00:06:34.970
a database client that will be
strongly typed, and we love to see it.

100
00:06:34.970 --> 00:06:37.218
And then we can say something like MPX.

101
00:06:37.218 --> 00:06:41.133
And again, you'd make these NPM scripts or
something, or like VS Code tasks, or

102
00:06:41.133 --> 00:06:41.888
what have you.

103
00:06:41.888 --> 00:06:48.781
Prisma migrate the dev environment,
and this does a whole bunch of stuff.

104
00:06:48.781 --> 00:06:51.237
We can have test databases,
give the migration a name,

105
00:06:51.237 --> 00:06:53.863
if you've done Ruby on Rails,
this is probably familiar.

106
00:06:53.863 --> 00:06:56.410
There's probably other frameworks
that do the same basic idea.

107
00:06:56.410 --> 00:07:00.984
It created some databases,
it created a migration file.

108
00:07:00.984 --> 00:07:07.158
A migration is basically the how do you
get from the original version you had

109
00:07:07.158 --> 00:07:13.143
your database through all the different
steps to where you want it to be.

110
00:07:13.143 --> 00:07:16.641
Our first one is just an initial one,
and then we'll just run that migration.

111
00:07:22.317 --> 00:07:24.330
&gt;&gt; Steve Kinney: We ran
the migration we need to generate.

112
00:07:24.330 --> 00:07:27.704
Cool, so we generated a client.

113
00:07:27.704 --> 00:07:31.077
That client is informed by the schema,
right?

114
00:07:31.077 --> 00:07:35.347
The schema should theoretically match
with some of the other things we've

115
00:07:35.347 --> 00:07:36.233
seen, right?

116
00:07:36.233 --> 00:07:41.335
And so they will do the kind of
type validation that we were doing

117
00:07:41.335 --> 00:07:46.264
by hand with Zod earlier,
we will get out of the box for free.

