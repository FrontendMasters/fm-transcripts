WEBVTT

1
00:00:00.253 --> 00:00:03.784
&gt;&gt; Steve Kinney: We'll talk
a little bit about transformation.

2
00:00:03.784 --> 00:00:07.916
Transformation is breaking apart our
source code into, we've turned it into

3
00:00:07.916 --> 00:00:11.431
that internal representation but
we want to do something with it.

4
00:00:11.431 --> 00:00:14.963
Like right now we have an interpreter but
we don't have a compiler, right?

5
00:00:14.963 --> 00:00:17.690
We don't have a compile target.

6
00:00:17.690 --> 00:00:19.090
We want to be able to do that.

7
00:00:19.090 --> 00:00:23.846
And so really what that
turns into is being able to

8
00:00:23.846 --> 00:00:28.377
manipulate the AST and
turn it into that tree.

9
00:00:28.377 --> 00:00:31.519
Or if that's not your compile target,
that's fine too, right?

10
00:00:31.519 --> 00:00:35.103
There is like one point like to get like
a self hosted language the language is

11
00:00:35.103 --> 00:00:36.453
written in itself, right?

12
00:00:36.453 --> 00:00:38.826
But that's some next level stuff.

13
00:00:38.826 --> 00:00:40.901
Right now we want to get a language.

14
00:00:40.901 --> 00:00:43.907
[LAUGH] Then we'll worry about
hosting language in itself.

15
00:00:43.907 --> 00:00:49.203
And so there's a really a popular
pattern for manipulating these trees.

16
00:00:49.203 --> 00:00:53.864
You can just write functions where
the ability to traverse the tree and

17
00:00:53.864 --> 00:00:58.056
the ability to transform it
are deeply tied next to each other.

18
00:00:58.056 --> 00:01:01.630
Or you can begin to look at this
thing called the visitor pattern.

19
00:01:01.630 --> 00:01:05.651
And the visitor pattern is not
necessarily abstract syntax tree or

20
00:01:05.651 --> 00:01:07.746
programming language specific.

21
00:01:07.746 --> 00:01:11.866
That is where it is commonly used and
it is very popular,

22
00:01:11.866 --> 00:01:15.469
but it is not necessarily
directly tied to that.

23
00:01:15.469 --> 00:01:18.452
We don't necessarily have to use it there.

24
00:01:18.452 --> 00:01:23.051
It does come from the Design Patterns
book by the gang of four.

25
00:01:23.051 --> 00:01:28.113
And it's very cleanly
summarized in this diagram.

26
00:01:28.113 --> 00:01:28.804
Any questions?

27
00:01:28.804 --> 00:01:31.838
Moving on, sound good?

28
00:01:31.838 --> 00:01:36.387
[LAUGH] Yeah, it's,
it's not actually that bad.

29
00:01:36.387 --> 00:01:39.495
Basically the pattern is we do
a depth first search of the tree.

30
00:01:39.495 --> 00:01:44.679
The big thing is that the visitor pattern
tries to separate the mechanism for

31
00:01:44.679 --> 00:01:48.092
traversing that tree
with the transformations.

32
00:01:48.092 --> 00:01:52.071
So we can write, hey, here's how we go
up and down the tree and all of that, so

33
00:01:52.071 --> 00:01:53.373
we write that logic out.

34
00:01:53.373 --> 00:01:57.773
And there will be some tied to our
implementation, cuz we do need to know.

35
00:01:57.773 --> 00:02:01.417
We know that call expressions
have arguments, but

36
00:02:01.417 --> 00:02:04.138
the string literals don't, right?

37
00:02:04.138 --> 00:02:08.227
So it'll figure out roughly,
given the shape of this,

38
00:02:08.227 --> 00:02:12.849
the type of apps and
the type of language that we're building.

39
00:02:12.849 --> 00:02:14.889
Given the shape of that, yeah,

40
00:02:14.889 --> 00:02:19.726
we roughly need to like figure out how to
get up and down it, but there could be

41
00:02:19.726 --> 00:02:24.275
very many different ways that you
are trying to actually transpire it.

42
00:02:24.275 --> 00:02:27.108
We know that Babel has a tone of
features that you can turn on and

43
00:02:27.108 --> 00:02:29.030
off that do different transformations.

44
00:02:29.030 --> 00:02:35.073
Each one of those does not shift with it's
own bespokability to navigate that tree.

45
00:02:35.073 --> 00:02:37.088
That is written in and of by itself and

46
00:02:37.088 --> 00:02:41.509
the different transformations that you
wanna do and kind of be composed together

47
00:02:41.509 --> 00:02:44.641
and we go up and down the tree and
do those things, right?

48
00:02:44.641 --> 00:02:48.973
And so we might chose to
write some visitors that will

49
00:02:48.973 --> 00:02:52.526
transpile our code to JavaScript, cool.

50
00:02:52.526 --> 00:02:56.803
We might try to write some visitors
that transpose it to Ruby, fine,

51
00:02:56.803 --> 00:03:00.658
or Python or I don't know if
closure script would be worth it.

52
00:03:00.658 --> 00:03:02.740
But you can do it, right?

53
00:03:02.740 --> 00:03:05.594
But we might also choose to,
and we're gonna do both today.

54
00:03:05.594 --> 00:03:10.118
We're going to choose maybe as a step
to transform our own language to

55
00:03:10.118 --> 00:03:14.420
add additional syntax, right,
that we don't currently have.

56
00:03:14.420 --> 00:03:16.624
So we're gonna be able to
take a look at that as well.

57
00:03:16.624 --> 00:03:20.572
And so the visitor pattern allows us to
define different types of actions for

58
00:03:20.572 --> 00:03:22.620
each node visited as it walks the tree.

59
00:03:22.620 --> 00:03:25.427
And so basically you can define
methods on the visitor and

60
00:03:25.427 --> 00:03:29.347
it basically looks at the type of that
node, calls that method on the visitor and

61
00:03:29.347 --> 00:03:32.590
go like, hey, do you know anything
about what we should do here?

62
00:03:32.590 --> 00:03:35.983
And it either does or it doesn't.

63
00:03:35.983 --> 00:03:36.720
All right,

64
00:03:36.720 --> 00:03:41.754
there are some tools that you can use like
babel has one that is built in, as well.

65
00:03:41.754 --> 00:03:46.291
I'll just show it to you real quick, but
we're actually going to write our own,

66
00:03:46.291 --> 00:03:50.782
which is you can give it an AST and it has
this idea of entering and exiting a path.

67
00:03:50.782 --> 00:03:54.221
So entering is when it enters
that part of the tree and

68
00:03:54.221 --> 00:03:56.888
exiting is when it's leaving, right?

69
00:03:56.888 --> 00:03:58.263
So you can try to do stuff.

70
00:03:58.263 --> 00:04:01.387
And a lot of times, you can actually
access the parent and so on and so forth.

71
00:04:01.387 --> 00:04:08.027
So this one is, basically what it does
is it visits every node in the tree.

72
00:04:08.027 --> 00:04:11.782
And it says,
you're a VariableDeclaration, neat.

73
00:04:11.782 --> 00:04:15.293
In the babel tree for
a variable declarations,

74
00:04:15.293 --> 00:04:19.435
there are three kinds of var,
const, and let, right?

75
00:04:19.435 --> 00:04:22.177
And so
what this would do is it would break it,

76
00:04:22.177 --> 00:04:26.152
once you had broken apart your
entire code with the Babel parser,

77
00:04:26.152 --> 00:04:30.583
you could theoretically write this
to walk the tree, visit every node.

78
00:04:30.583 --> 00:04:34.692
And if you see that,
you are a VariableDeclaration, cool.

79
00:04:34.692 --> 00:04:38.310
And you have the kind of var,
well, I'm going to modify you and

80
00:04:38.310 --> 00:04:39.483
turn you into a let.

81
00:04:39.483 --> 00:04:43.582
And all of a sudden you look like a big
hero when you've refracted all the code

82
00:04:43.582 --> 00:04:47.040
base without being the hero that
tries to do a find and replace and

83
00:04:47.040 --> 00:04:51.549
then finds every instance of like V-A-R in
some other word and messes up the copy.

84
00:04:51.549 --> 00:04:52.687
Right, along the lines.

85
00:04:52.687 --> 00:04:56.846
This allows you to programmatically
visit everything and figure it out.

86
00:04:56.846 --> 00:04:59.719
Again, this is how we do it for
our product.

87
00:04:59.719 --> 00:05:02.442
We go ahead we take the HTML,
we break into an AST.

88
00:05:02.442 --> 00:05:03.817
We let the person use it.

89
00:05:03.817 --> 00:05:05.666
We change all the information, but

90
00:05:05.666 --> 00:05:08.446
we then we have to send an HTML
email out the other way.

91
00:05:08.446 --> 00:05:12.100
So we go ahead, we pull it out,
we do all the stuff, and

92
00:05:12.100 --> 00:05:14.569
then we string it all back together.

93
00:05:14.569 --> 00:05:16.828
And some of the reasons that we do that,

94
00:05:16.828 --> 00:05:19.367
would I prefer that just
have a JSON object?

95
00:05:19.367 --> 00:05:24.441
Absolutely, right, but
given the fact that we have to support

96
00:05:24.441 --> 00:05:29.720
every campaign that has ever been
sent with the product, right?

97
00:05:29.720 --> 00:05:30.481
The safest and

98
00:05:30.481 --> 00:05:34.483
most responsible thing to do was to
build this translation layer, right?

99
00:05:34.483 --> 00:05:38.819
It didn't make sense for us to necessarily
go and do all that kind of stuff.

