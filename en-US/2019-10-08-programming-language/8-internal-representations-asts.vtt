WEBVTT

1
00:00:00.000 --> 00:00:02.323
&gt;&gt; Steve Kinney: Now we have
our bag of tokens, right?

2
00:00:02.323 --> 00:00:07.206
What we wanna kind of do next is figure
out what does it all mean, right?

3
00:00:07.206 --> 00:00:11.193
And so, parsing is really the combination
of both lexical analysis and

4
00:00:11.193 --> 00:00:12.462
syntactic analysis.

5
00:00:12.462 --> 00:00:16.374
But normally, you'll hear either lexing or
tokenization for

6
00:00:16.374 --> 00:00:20.155
getting the tokens and
then parsing for figuring it all out.

7
00:00:20.155 --> 00:00:22.253
But together, they're all really parsing.

8
00:00:24.231 --> 00:00:25.415
&gt;&gt; Steve Kinney: So once we've broken out,

9
00:00:25.415 --> 00:00:27.741
we need to figure out what
does anything of this mean.

10
00:00:27.741 --> 00:00:31.549
So we turn to what is normally called
an intermediate representation, right?

11
00:00:31.549 --> 00:00:34.922
It's not the end product
that we're spinning out to,

12
00:00:34.922 --> 00:00:38.820
it is some data structure that
we can play with and manipulate.

13
00:00:38.820 --> 00:00:43.848
So one thing to check out is AST Explorer.

14
00:00:43.848 --> 00:00:45.076
AST Explorer is really cool.

15
00:00:45.076 --> 00:00:46.847
Actually, I'll open it up real fast.

16
00:00:49.761 --> 00:00:53.398
&gt;&gt; Steve Kinney: So here's a very
simple one with just an ad save, and

17
00:00:53.398 --> 00:00:55.140
this one is using Babel.

18
00:00:55.140 --> 00:00:59.764
And you can see, effectively what Babel
takes is relatively simple function and

19
00:00:59.764 --> 00:01:01.332
breaks it up into, right?

20
00:01:01.332 --> 00:01:03.852
So it's got a file,
it actually keeps the start and the end.

21
00:01:03.852 --> 00:01:04.401
And this is useful.

22
00:01:04.401 --> 00:01:06.928
I told you we do that side by
side thinking in the HTML.

23
00:01:06.928 --> 00:01:09.277
Well, it's not using Babel,
it's using HTML parser, too.

24
00:01:09.277 --> 00:01:14.065
That's how we kinda annotate the nodes and
figure out where I need to move stuff.

25
00:01:14.065 --> 00:01:18.738
But you see, it's a function declaration,
and there's an identifier, and

26
00:01:18.738 --> 00:01:20.965
that identifier, see if I can open it.

27
00:01:23.926 --> 00:01:25.195
&gt;&gt; Steve Kinney: Is the word add.

28
00:01:25.195 --> 00:01:26.646
So on and so forth, right?

29
00:01:26.646 --> 00:01:31.233
Like it kind of breaks that code into
a meaningful structure that says

30
00:01:31.233 --> 00:01:36.074
the intent of what we just kind of
tokenized and figures it all out for us.

31
00:01:37.830 --> 00:01:41.704
&gt;&gt; Steve Kinney: And most things that
we're doing have some form of an AST,

32
00:01:41.704 --> 00:01:42.267
right?

33
00:01:42.267 --> 00:01:45.351
There's also ways to visualize it.

34
00:01:45.351 --> 00:01:48.887
So here's the same thing for
just var x equals 2.

35
00:01:48.887 --> 00:01:50.158
console.log('hello').

36
00:01:50.158 --> 00:01:54.250
It's breaking it all into it's meaningful
pieces so that we can figure stuff out.

37
00:01:54.250 --> 00:01:56.085
And this is how Babel does its thing.

38
00:01:56.085 --> 00:01:59.974
So most things are doing a lot of
transpiling will go ahead and work.

39
00:01:59.974 --> 00:02:02.788
We'll actually take
the AST that we produce.

40
00:02:02.788 --> 00:02:07.359
We are going to cheat a little bit,
which is let's just say

41
00:02:07.359 --> 00:02:12.212
the AST that we are going to
choose produce is our intermediate

42
00:02:12.212 --> 00:02:17.185
representation was inspired by
what Babel spits out, right?

43
00:02:17.185 --> 00:02:19.303
So that we don't have to
do too much transformation.

44
00:02:19.303 --> 00:02:22.285
It is a different language, so we have to
do a little bit of transformation, but

45
00:02:22.285 --> 00:02:24.955
we're not gonna have to do too much
cuz it'll be pretty close to Babel to

46
00:02:24.955 --> 00:02:25.462
begin with.

47
00:02:25.462 --> 00:02:29.625
But theoretically, you could design an AST
that was bespoke for your language and

48
00:02:29.625 --> 00:02:31.204
all the stuff you need it to do.

49
00:02:31.204 --> 00:02:34.259
And if you can morph that tree,
cuz it's just a data structure,

50
00:02:34.259 --> 00:02:37.611
you can traverse up and down it,
mutate it and do everything you need.

51
00:02:37.611 --> 00:02:41.312
You can mutate it into what
the other language can accept.

52
00:02:41.312 --> 00:02:45.020
Or you can at least serialize into
that other language yourself.

53
00:02:45.020 --> 00:02:49.463
Cuz really, you can just go and say,
okay, like a white space or whatever.

54
00:02:49.463 --> 00:02:50.792
You can rearrange the stuff and

55
00:02:50.792 --> 00:02:53.720
be able to put it back into a string
effectively the reverse of that.

56
00:02:53.720 --> 00:02:58.139
Or if you can use that languages
generator, you can do that as well.

57
00:02:58.139 --> 00:03:02.582
You can translate your language into
any other language you want, right?

58
00:03:02.582 --> 00:03:04.517
So it's console log.

59
00:03:04.517 --> 00:03:07.462
You can kinda see,
it's not not super surprising.

60
00:03:07.462 --> 00:03:11.115
There's some kind of different
kind of meta layers in there,

61
00:03:11.115 --> 00:03:14.219
kind of tell you what l things
mean on a larger scale.

62
00:03:14.219 --> 00:03:16.397
We're gonna skip a lot of those.

63
00:03:16.397 --> 00:03:23.397
But for our purposes, there is kind
of a somewhat agreed upon spec for

64
00:03:23.397 --> 00:03:29.444
JavaScript ASTs that a lot of that,
Acorn, Babble, use.

65
00:03:29.444 --> 00:03:32.080
And pretty sure as well.

66
00:03:32.080 --> 00:03:36.347
Even stuff like Prettier and
use ASTs to figure out what

67
00:03:36.347 --> 00:03:40.146
the meaning of your code is to
tell you you made a boo boo.

68
00:03:40.146 --> 00:03:42.673
And so,
if you can get pretty close to that spec,

69
00:03:42.673 --> 00:03:46.559
which is what we are kind of purposely
doing with our very simple language,

70
00:03:46.559 --> 00:03:49.970
it will become incredibly easy
to transpile it into JavaScript.

