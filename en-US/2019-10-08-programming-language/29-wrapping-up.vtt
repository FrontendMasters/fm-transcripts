WEBVTT

1
00:00:00.042 --> 00:00:01.988
&gt;&gt; Steve Kinney: What kind of
language are you all going to make?

2
00:00:01.988 --> 00:00:03.659
&gt;&gt; Speaker 2: Something very lisp-like,
I think.

3
00:00:03.659 --> 00:00:05.450
&gt;&gt; Steve Kinney: Yeah,
you vary this one, yeah.

4
00:00:05.450 --> 00:00:09.166
I think the functional ones
are interesting because it is a different

5
00:00:09.166 --> 00:00:10.263
paradigm, right.

6
00:00:10.263 --> 00:00:11.859
I think there is a bunch of books,
there's,

7
00:00:11.859 --> 00:00:13.837
I think some of the scheme
stuff is really interesting.

8
00:00:13.837 --> 00:00:15.726
There is a little book
called the Little Typer.

9
00:00:15.726 --> 00:00:19.129
Which is about like type systems I think
it'd be like super interesting to like

10
00:00:19.129 --> 00:00:20.947
implemented a type system in a language.

11
00:00:20.947 --> 00:00:24.583
Right, I think like on a learning level
and like understanding the tools,

12
00:00:24.583 --> 00:00:28.577
it's also like really kind of great to
like okay, yeah, a type system, I use it.

13
00:00:28.577 --> 00:00:31.261
But then how does that type
system really work, right?

14
00:00:31.261 --> 00:00:33.285
Like there's gotta be like
a dependency graph and

15
00:00:33.285 --> 00:00:35.704
all of those kind of things like,
how is that implemented?

16
00:00:35.704 --> 00:00:40.304
And like, traditionally when I've had to
implement something myself, even if it's

17
00:00:40.304 --> 00:00:44.842
like on a very fundamental level, like the
depths of understanding that I've had for

18
00:00:44.842 --> 00:00:48.452
that thing is like fundamentally
like radically changed, right?

19
00:00:48.452 --> 00:00:53.191
Like before doing a lot of this
stuff at my job, I had a hand wavy

20
00:00:53.191 --> 00:00:58.766
understanding of what an AST was and
the fact that Bable traversed them.

21
00:00:58.766 --> 00:01:01.489
[LAUGH] Right?

22
00:01:01.489 --> 00:01:06.029
But, and especially like when you pull
the version of the library that's got all

23
00:01:06.029 --> 00:01:10.792
the batteries included, a very complicated
project like Babel, it's on 7.0.

24
00:01:10.792 --> 00:01:12.863
And I think I mean,
how old is Babel now, right?

25
00:01:12.863 --> 00:01:16.837
Like, five years old, least, right?

26
00:01:16.837 --> 00:01:20.302
There's a lot of like extra like
abstractions that that make it really hard

27
00:01:20.302 --> 00:01:24.207
to understand when you kind of even start
with a very like small language implement,

28
00:01:24.207 --> 00:01:27.565
like the ability to diverse a tree and
do the transformations yourself.

29
00:01:27.565 --> 00:01:29.883
With a very limited set of tools
you actually understand like

30
00:01:29.883 --> 00:01:30.982
the fundamental concepts.

31
00:01:30.982 --> 00:01:34.947
That when you see the bigger version,
okay, I can like draw the line from

32
00:01:34.947 --> 00:01:38.272
the like kind of smaller
fundamental version to the bigger.

33
00:01:38.272 --> 00:01:40.034
Like.
there's all these helpers but

34
00:01:40.034 --> 00:01:42.010
I get the core concept but
when you just see the,

35
00:01:42.010 --> 00:01:45.235
I mean it's like that anytime you like
open, crack open like an open social.

36
00:01:45.235 --> 00:01:46.938
I mean today's the day, right.

37
00:01:46.938 --> 00:01:50.212
You see that like getting it to
build is like most of the work.

38
00:01:50.212 --> 00:01:54.561
Right, [LAUGH] And like when you see all
this, I'd be like, this is like way too

39
00:01:54.561 --> 00:01:58.743
complicated, but the patterns are like
relatively, like straightforward.

40
00:01:58.743 --> 00:02:02.945
It's just that yeah, it's the same
reason like for a lot of cases,

41
00:02:02.945 --> 00:02:06.644
if I was like writing this like not for
the sake of teaching.

42
00:02:06.644 --> 00:02:10.681
Like, would I have used more abstractions
to generate the different literals and

43
00:02:10.681 --> 00:02:11.977
stuff along those lines?

44
00:02:11.977 --> 00:02:13.013
Like absolutely.

45
00:02:13.013 --> 00:02:15.200
But would that have hidden
away how everything works?

46
00:02:15.200 --> 00:02:16.613
Totally, right.

47
00:02:16.613 --> 00:02:19.186
And so when you kind of go and
try it for yourself and

48
00:02:19.186 --> 00:02:23.168
do it from a rudimentary level, then when
you see if we had a bunch of functions

49
00:02:23.168 --> 00:02:26.686
where it's like if is number token
create number literal, right?

50
00:02:26.686 --> 00:02:30.382
Like seeing that without having
written it out like by hand,

51
00:02:30.382 --> 00:02:34.015
you would have been like,
neat, some black magic, cool.

52
00:02:34.015 --> 00:02:36.929
But it seemed like yeah,
it's just like, if it's,

53
00:02:36.929 --> 00:02:40.734
if it's got these two properties on it
generate this other object you like,

54
00:02:40.734 --> 00:02:44.855
now have you saw those two functions now,
you'd be like, yeah, I got it like.

55
00:02:44.855 --> 00:02:47.057
Just making the object, I've done that.

56
00:02:47.057 --> 00:02:49.533
So I think a lot of times like
playing with some of these things,

57
00:02:49.533 --> 00:02:51.611
especially the things if
you're interested in it.

58
00:02:51.611 --> 00:02:55.970
Even if like, just trying your hand at it,
I think like adds

59
00:02:55.970 --> 00:03:00.775
a richness to your understanding
that I think is really helpful.

60
00:03:00.775 --> 00:03:05.991
[APPLAUSE]

