WEBVTT

1
00:00:00.138 --> 00:00:01.762
&gt;&gt; Speaker 1: You know what
our language doesn't have?

2
00:00:01.762 --> 00:00:03.778
I mean a lot of things [LAUGH] but

3
00:00:03.778 --> 00:00:08.066
you know what our language
really importantly doesn't have?

4
00:00:08.066 --> 00:00:09.185
The ability to find variables.

5
00:00:13.393 --> 00:00:17.043
&gt;&gt; Speaker 1: So there's a bunch
of ways that we could do this,

6
00:00:17.043 --> 00:00:20.256
we could do it at parse time, absolutely.

7
00:00:20.256 --> 00:00:22.842
And it sometimes might
make sense to do that.

8
00:00:22.842 --> 00:00:25.712
it depends on where you want
to keep that complexity.

9
00:00:25.712 --> 00:00:28.315
Right now I think that
the interesting part for

10
00:00:28.315 --> 00:00:32.461
us is to figure out how this visitor
pattern which I think is super useful.

11
00:00:32.461 --> 00:00:38.073
Because of one of my goals is talking
about the patterns of parsing and

12
00:00:38.073 --> 00:00:40.990
of ASTs and of the visitor pattern.

13
00:00:40.990 --> 00:00:44.268
I don't want to get too much
into like LISP specifics.

14
00:00:44.268 --> 00:00:49.639
We chose LISP because it wasn't going
to be figuring out how to parse a for

15
00:00:49.639 --> 00:00:51.232
loop for four hours.

16
00:00:51.232 --> 00:00:52.750
[LAUGH] But this is not a course on LISP.

17
00:00:52.750 --> 00:00:59.147
This is the course on the tools
that we use to navigate languages.

18
00:00:59.147 --> 00:01:02.711
So LISP has this idea of what
they are called special forms,

19
00:01:02.711 --> 00:01:06.292
cuz it's a very simple language,
that's why we chose it.

20
00:01:06.292 --> 00:01:08.459
And everything's a LISP, but

21
00:01:08.459 --> 00:01:12.969
right now we have the ability
pretty much to execute functions.

22
00:01:12.969 --> 00:01:16.871
Special forms don't really
follow the regular rules and

23
00:01:16.871 --> 00:01:19.318
there's tons of examples of this.

24
00:01:19.318 --> 00:01:24.716
We know that if this language hadn't if
while we thought really a function per se.

25
00:01:24.716 --> 00:01:28.421
It should only be calling one of
those branches, so on so forth.

26
00:01:28.421 --> 00:01:31.798
Defining a variable, it's not,
don't call that second thing,

27
00:01:31.798 --> 00:01:33.075
don't use it as a value.

28
00:01:33.075 --> 00:01:36.059
You're using what we're gonna set in
the environment as the first thing.

29
00:01:36.059 --> 00:01:40.433
And what we're gonna what set it to,
as the second thing.

30
00:01:40.433 --> 00:01:43.478
So the pattern we're gonna take, but

31
00:01:43.478 --> 00:01:48.345
the syntax wise is suspiciously
close to a call expression.

32
00:01:48.345 --> 00:01:50.825
Except we're gonna take
the first argument and

33
00:01:50.825 --> 00:01:52.754
have it be the thing that we set it to.

34
00:01:52.754 --> 00:01:56.998
Take the second argument be
the value that we're setting it.

35
00:01:56.998 --> 00:02:01.592
So we can kind of create a new type
of node using this pattern as well.

36
00:02:01.592 --> 00:02:06.530
So on top of doing large code shifts,
on top of, it can be compiled JavaScript.

37
00:02:06.530 --> 00:02:10.718
We can also add additional
syntax to our language.

38
00:02:10.718 --> 00:02:13.352
So we're gonna give that a shot.

39
00:02:13.352 --> 00:02:16.131
And so what I would imagine this
will look like when we use it,

40
00:02:16.131 --> 00:02:17.615
I'll just type it here for now.

41
00:02:17.615 --> 00:02:24.349
Is we'll have something like,
(define x 2).

42
00:02:24.349 --> 00:02:27.492
You're in charge of your language,
you want to make it an equal sign.

43
00:02:27.492 --> 00:02:31.120
You're gonna have to have
the tokenizer respect equal signs, but

44
00:02:31.120 --> 00:02:32.557
other that that's easy.

45
00:02:32.557 --> 00:02:35.489
Just go and
add an additional role in the tokenizer.

46
00:02:35.489 --> 00:02:40.091
I'm gonna go with (define x 2) where
x is the name of the variable, and

47
00:02:40.091 --> 00:02:41.455
2 will be the value.

48
00:02:41.455 --> 00:02:43.251
All right, so
what happens when that happens?

49
00:02:43.251 --> 00:02:45.921
I need to turn that into a different
kind of node because it's not

50
00:02:45.921 --> 00:02:48.203
a call expression, and
it should not behave like one.

51
00:02:48.203 --> 00:02:52.523
We can make a new variable
declaration kind of node.

52
00:02:52.523 --> 00:02:57.178
So we'll have to transform pretty
much define functions into these

53
00:02:57.178 --> 00:02:59.227
new variable declarations.

54
00:02:59.227 --> 00:03:03.835
And then we're gonna have to
add logic to our execution,

55
00:03:03.835 --> 00:03:08.637
because our evaluator doesn't
know how to deal with that.

56
00:03:08.637 --> 00:03:13.638
It knows about things the value, it knows
about things that are call expressions and

57
00:03:13.638 --> 00:03:15.409
it knows about identifiers.

58
00:03:15.409 --> 00:03:18.174
It doesn't know about what to
do about variable declarations.

59
00:03:18.174 --> 00:03:22.399
And then we're gonna have to play
in the [INAUDIBLE] and see it work,

60
00:03:22.399 --> 00:03:24.292
cuz it's really rewarding.

61
00:03:24.292 --> 00:03:28.954
So let's get into it, cool.

62
00:03:28.954 --> 00:03:36.456
So if we go up into this
idea of special-forms here,

63
00:03:36.456 --> 00:03:40.550
there's not a lot going on.

64
00:03:40.550 --> 00:03:46.072
What I might wanna do is
effectively use it as a visitor.

65
00:03:46.072 --> 00:03:50.344
And so it's gonna be the same
thing that I might do otherwise.

66
00:03:50.344 --> 00:03:53.332
Earlier we saw when we
were looking at parts

67
00:03:53.332 --> 00:03:56.156
evaluate that we had a transform layer.

68
00:03:56.156 --> 00:03:59.089
And this is useful as a place of
after we've created our initial tree,

69
00:03:59.089 --> 00:04:01.186
to do any transformations that
we need to do to the tree.

70
00:04:01.186 --> 00:04:04.189
So we will need to put that
back into parts-and-evaluate.

71
00:04:04.189 --> 00:04:07.133
Let's actually do that now and
then we'll go and do a transform.

72
00:04:07.133 --> 00:04:10.557
And se we put in there and
let's just say transform.

73
00:04:10.557 --> 00:04:12.178
And I like this pipe syntax,

74
00:04:12.178 --> 00:04:16.649
cuz it makes it very clear about the
processes that our language goes through.

75
00:04:16.649 --> 00:04:21.581
It gets tokenize, it gets parsed, it gets
transformed with additional features and

76
00:04:21.581 --> 00:04:23.025
then it gets evaluated.

77
00:04:23.025 --> 00:04:28.131
So we can go into transform, and
you can see we have this right

78
00:04:28.131 --> 00:04:33.257
now it takes the data structure add it,
returns it back out.

79
00:04:33.257 --> 00:04:38.205
Not bad, but this is a great place for
us to do some stuff.

80
00:04:38.205 --> 00:04:40.618
What kind of stuff can
you imagine we are doing?

81
00:04:40.618 --> 00:04:44.275
Well, obviously I kinda spoiled it by
saying we're going to define a variable.

82
00:04:44.275 --> 00:04:48.749
And we can see that we've got
traverse kind of ready to go.

83
00:04:48.749 --> 00:04:53.977
So what we can do in this case is,
we can go ahead and

84
00:04:53.977 --> 00:04:59.590
say, 4 go ahead and
traverse the tree as it comes in.

85
00:05:01.926 --> 00:05:04.014
&gt;&gt; Speaker 1: That's gonna be
that root node in this case.

86
00:05:06.885 --> 00:05:09.592
&gt;&gt; Speaker 1: And
we'll kinda give it a visitor in line.

87
00:05:09.592 --> 00:05:14.389
And we're gonna say when you
come across a call expression,

88
00:05:16.492 --> 00:05:17.297
&gt;&gt; Speaker 1: Enter it.

89
00:05:21.944 --> 00:05:23.145
&gt;&gt; Speaker 1: All right, and

90
00:05:23.145 --> 00:05:28.790
what we'll do is basically kind of
double up on the pattern a little bit.

91
00:05:28.790 --> 00:05:34.974
Which is we care about define you
can see us adding maybe if later or

92
00:05:34.974 --> 00:05:39.590
a lambda syntax or
something along those lines.

93
00:05:39.590 --> 00:05:43.157
You can see us adding additional kind
of special forms that don't follow

94
00:05:43.157 --> 00:05:44.160
the regular rules.

95
00:05:44.160 --> 00:05:49.411
So you're saying these will be, most
of the languages we use have keywords.

96
00:05:49.411 --> 00:05:53.489
Like reserves,
words that you can't name stuff, right?

97
00:05:53.489 --> 00:05:58.301
You can't have a variable called var,
right, in JavaScript.

98
00:05:58.301 --> 00:06:02.139
And so we can have our set of things of,
hey, if you see.

99
00:06:02.139 --> 00:06:07.049
Cuz LISP has a very consistent syntax,
if you see any of these, and

100
00:06:07.049 --> 00:06:08.989
we'll kind of keep them.

101
00:06:08.989 --> 00:06:14.104
It's very similar to how we did
the environment lookups earlier.

102
00:06:14.104 --> 00:06:19.189
We can say if you see anything in here,
intercept and do a thing.

103
00:06:19.189 --> 00:06:23.419
And so it's kind of a general
purpose transformation, so

104
00:06:23.419 --> 00:06:25.675
let's just get that in place.

105
00:06:25.675 --> 00:06:30.416
We can say hey,
I see that this node has a name.

106
00:06:30.416 --> 00:06:36.078
Well, if that name is
inside the specialForms

107
00:06:36.078 --> 00:06:41.015
of [node.name] go ahead and just call

108
00:06:41.015 --> 00:06:46.244
it,
&gt;&gt; Speaker 1: And pass it the node.

109
00:06:51.337 --> 00:06:54.326
&gt;&gt; Speaker 1: So now the transformation's
looking at every call expression.

110
00:06:54.326 --> 00:06:58.700
Now obviously you could add other types of
nodes as you add them to your language,

111
00:06:58.700 --> 00:06:59.742
so on and so forth.

112
00:06:59.742 --> 00:07:02.857
But say check this hash map down here, and

113
00:07:02.857 --> 00:07:08.661
if it is one of the keywords that we have
implemented some special syntax for.

114
00:07:08.661 --> 00:07:14.001
This is gonna be where we kind of
generally purpose do the transformation.

115
00:07:14.001 --> 00:07:18.456
So I decided that I was going
to use define as my syntax.

116
00:07:18.456 --> 00:07:22.339
If you want to use something else,
you can use set, anything you want.

117
00:07:22.339 --> 00:07:27.211
It's your language,
you do what you choose, I chose define.

118
00:07:27.211 --> 00:07:30.367
And so
now that this is a key on this object,

119
00:07:30.367 --> 00:07:35.558
it will hook in to this kind of
general purpose transformation layer.

120
00:07:35.558 --> 00:07:39.200
And what we can do is we can
manipulate a little bit.

121
00:07:39.200 --> 00:07:46.249
So my ideal syntax I'm thinking about is,
so we know that I.

122
00:07:46.249 --> 00:07:48.793
Let's pseudocode this a little bit.

123
00:07:48.793 --> 00:07:54.068
You know that a call

124
00:07:54.068 --> 00:08:00.993
expression has a name and

125
00:08:00.993 --> 00:08:04.629
arguments.

126
00:08:07.966 --> 00:08:11.307
&gt;&gt; Speaker 1: That doesn't
really make sense.

127
00:08:11.307 --> 00:08:14.976
Especially because the name is
gonna be define in this case, so

128
00:08:14.976 --> 00:08:16.927
we already have that spoken for.

129
00:08:16.927 --> 00:08:20.726
And the arguments are gonna be,

130
00:08:20.726 --> 00:08:25.932
the first one is going
to be the variable that

131
00:08:25.932 --> 00:08:31.014
I want to assign, so the assigning value.

132
00:08:31.014 --> 00:08:36.830
I'm gonna call that just
the identifier of the variable and

133
00:08:36.830 --> 00:08:40.683
of what value it should be assigned to.

134
00:08:40.683 --> 00:08:45.367
You get to decide especially if you
have opinions on what your call

135
00:08:45.367 --> 00:08:46.993
target is going to be.

136
00:08:46.993 --> 00:08:49.372
Then you might wanna change
it to something else.

137
00:08:49.372 --> 00:08:54.284
I don't so, I went with this.

138
00:08:54.284 --> 00:08:56.009
So if that word comes in,

139
00:08:56.009 --> 00:09:01.205
I'm gonna say that I wanna have this
thing called a variable declaration.

140
00:09:05.572 --> 00:09:09.123
&gt;&gt; Speaker 1: And that variable
declaration will have like we said before,

141
00:09:09.123 --> 00:09:11.319
an identifier and and an assignment.

142
00:09:11.319 --> 00:09:16.259
And then you can also delete
the properties we don't care about.

143
00:09:16.259 --> 00:09:18.337
When we did those babel
transformations before,

144
00:09:18.337 --> 00:09:19.977
I just left extra properties on there.

145
00:09:19.977 --> 00:09:22.564
Because I knew that babel didn't care.

146
00:09:22.564 --> 00:09:25.711
You've seen the implementation of
the pattern before, we're not checking for

147
00:09:25.711 --> 00:09:27.244
properties that we don't know about.

148
00:09:27.244 --> 00:09:29.781
We're only protecting the properties
that we do care about so

149
00:09:29.781 --> 00:09:31.645
I knew that it was safe
to leave them on there.

150
00:09:31.645 --> 00:09:34.537
But in my language,
I don't need extra crap around so

151
00:09:34.537 --> 00:09:36.863
I'll remove the ones I don't care about.

152
00:09:36.863 --> 00:09:42.159
So we will delete the name and arguments,
we'll add identifier and assignment.

153
00:09:42.159 --> 00:09:46.603
We'll effectively get this new
syntactic form in our language,

154
00:09:46.603 --> 00:09:50.253
that will just be available
all the time everywhere.

155
00:09:50.253 --> 00:09:52.975
So let's go ahead and
we'll say define, and

156
00:09:52.975 --> 00:09:56.996
we'll say we know that we're
getting these out of the arguments.

157
00:09:56.996 --> 00:09:59.583
So I can just kind of use array
to start training syntax.

158
00:09:59.583 --> 00:10:02.769
I can say identifier and

159
00:10:02.769 --> 00:10:08.030
assignment equals node.arguments.

160
00:10:11.515 --> 00:10:16.136
&gt;&gt; Speaker 1: And
then we'll say that the node type is no

161
00:10:16.136 --> 00:10:20.106
longer gonna be a call expression.

162
00:10:24.891 --> 00:10:29.763
&gt;&gt; Speaker 1: It's gonna be
variable declaration, and

163
00:10:29.763 --> 00:10:35.188
the node.identifier,
&gt;&gt; Speaker 1: Is

164
00:10:35.188 --> 00:10:40.639
going to be that identifier.

165
00:10:40.639 --> 00:10:46.221
And the node.assignment will be
that assignment that we pulled off.

166
00:10:46.221 --> 00:10:50.983
All right, cool, and then we will delete
node.name because that's not important

167
00:10:50.983 --> 00:10:53.275
anymore, it's just gonna be defined.

168
00:10:53.275 --> 00:10:55.390
You can keep it if you want.

169
00:10:55.390 --> 00:10:58.279
We'll delete the arguments now
that we're done with them.

170
00:11:00.305 --> 00:11:02.901
&gt;&gt; Speaker 1: So now,
since every single node runs through

171
00:11:02.901 --> 00:11:04.548
the transformation layer.

172
00:11:04.548 --> 00:11:09.722
And this visitors visiting
every single call expression,

173
00:11:09.722 --> 00:11:13.558
now you can just use
this new define syntax.

174
00:11:13.558 --> 00:11:14.836
It's got some problems.

175
00:11:14.836 --> 00:11:16.115
Does anyone know what the problem is?

176
00:11:18.771 --> 00:11:21.531
&gt;&gt; Speaker 1: We don't have any way
to evaluate this new kind of node,

177
00:11:21.531 --> 00:11:22.251
right [LAUGH]?

178
00:11:22.251 --> 00:11:24.830
So that's gonna be slightly problematic.

179
00:11:24.830 --> 00:11:26.780
But every node will come through and

180
00:11:26.780 --> 00:11:30.618
the AST will reflect that we can now
define variables in our language.

181
00:11:30.618 --> 00:11:32.873
We are in complete control
of how this language works.

182
00:11:32.873 --> 00:11:35.920
We can do any other special
syntax that we can conjure up.

183
00:11:35.920 --> 00:11:38.639
We might have to change,
do some transformations.

184
00:11:38.639 --> 00:11:43.099
Or perhaps depending on what you like,
if you wanna use arrow functions.

185
00:11:43.099 --> 00:11:47.011
We didn't include the ability
to collect an arrow.

186
00:11:47.011 --> 00:11:51.039
But you know that you could write the
tokenizer like, hey, if it's a fat arrow.

187
00:11:51.039 --> 00:11:55.720
I see an equal sign,
check if the next one is an angle bracket,

188
00:11:55.720 --> 00:11:58.161
boom, you have an arrow [LAUGH].

189
00:11:58.161 --> 00:12:00.713
And then when you get to
the syntactic parser,

190
00:12:00.713 --> 00:12:04.191
you're like, cool, I'm expecting,
x, y and z out of this.

191
00:12:04.191 --> 00:12:07.272
So you can basically add any features
that you want to this language.

