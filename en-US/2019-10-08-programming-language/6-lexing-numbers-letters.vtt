WEBVTT

1
00:00:00.517 --> 00:00:03.379
&gt;&gt; Steve Kinney: Someone unskipped these
tests, I have not done the work yet,

2
00:00:03.379 --> 00:00:05.646
I'm gonna unskip them and
watch the world burn.

3
00:00:09.334 --> 00:00:10.691
&gt;&gt; Steve Kinney: Just verify
that that in fact happens.

4
00:00:18.081 --> 00:00:20.143
&gt;&gt; Steve Kinney: Cool,
at a run but a crash.

5
00:00:24.237 --> 00:00:25.167
&gt;&gt; Steve Kinney: This
is never a good sign.

6
00:00:25.167 --> 00:00:30.406
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Steve Kinney: Yep,

7
00:00:30.406 --> 00:00:34.007
we have two things that we
might consider doing, right?

8
00:00:34.007 --> 00:00:38.122
Is we can go into that tokenize.

9
00:00:38.122 --> 00:00:41.550
You can add a cursor++ at
the bottom of the while loop.

10
00:00:41.550 --> 00:00:46.090
Also what we might want to happen is if we
come across something we don't know about,

11
00:00:46.090 --> 00:00:48.160
we might wanna just throw an error,
right, and

12
00:00:48.160 --> 00:00:50.160
bust ourself out of that loop that way,
right?

13
00:00:50.160 --> 00:00:51.339
So we do something like,

14
00:00:59.594 --> 00:01:00.581
&gt;&gt; Steve Kinney: You can say,

15
00:01:05.531 --> 00:01:06.584
&gt;&gt; Steve Kinney: Character is not valid,

16
00:01:06.584 --> 00:01:08.345
or something along those lines, right?

17
00:01:08.345 --> 00:01:12.960
Cuz it's probably, at that point,
if it has fallen through all the things we

18
00:01:12.960 --> 00:01:17.585
know to check for it is probably something
that we can't parse later as well.

19
00:01:17.585 --> 00:01:20.334
So we might as well kinda
throw there early on.

20
00:01:20.334 --> 00:01:22.194
There's lots of things that we can and
should do, right?

21
00:01:22.194 --> 00:01:24.732
When we get to syntactic analysis,

22
00:01:24.732 --> 00:01:29.637
I believe it was a pretty common coding
test which is check to make sure

23
00:01:29.637 --> 00:01:34.303
you have as many closing braces
as you have opening ones, right?

24
00:01:34.303 --> 00:01:36.169
Stuff like that we're gonna skip but

25
00:01:36.169 --> 00:01:39.250
that's also stuff that you
should totally consider doing.

26
00:01:41.110 --> 00:01:43.250
All right, so now it blew up.

27
00:01:44.670 --> 00:01:48.530
Which is fine cuz I unskipped the test but
they kinda fell through.

28
00:01:48.530 --> 00:01:50.310
So yeah,
you can either cursor plus plus and

29
00:01:50.310 --> 00:01:52.390
just deal with the fact
that the test will fail.

30
00:01:52.390 --> 00:01:54.400
Or we can throw it there and

31
00:01:54.400 --> 00:01:56.540
which is probably getting more
safer if we make mistakes later.

32
00:01:56.540 --> 00:01:59.780
So I'm gonna keep the throwing in there
cuz I think it's probably the right

33
00:01:59.780 --> 00:02:00.310
thing to do.

34
00:02:01.430 --> 00:02:07.960
But yeah, we got to see what it feels
like when you don't end that loop.

35
00:02:07.960 --> 00:02:09.770
All right, super cool.

36
00:02:09.770 --> 00:02:13.447
So this is gonna be
pretty straightforward.

37
00:02:13.447 --> 00:02:19.629
If we look at the test, there's a type
number and a type of name, right?

38
00:02:19.629 --> 00:02:23.322
Because strings will have quotes but
names are kinda like function names or

39
00:02:23.322 --> 00:02:25.510
variable names or stuff along those lines.

40
00:02:25.510 --> 00:02:31.669
We can go ahead and
say if number is a nice helper,

41
00:02:31.669 --> 00:02:35.740
we saw it before, it's great.

42
00:02:35.740 --> 00:02:37.350
If is number for the character, right?

43
00:02:37.350 --> 00:02:40.903
What we'll do is we'll take,
let me grab this.

44
00:02:44.475 --> 00:02:47.741
&gt;&gt; Steve Kinney: Type number and
then we do need to parse in the numbers or

45
00:02:47.741 --> 00:02:51.440
you can do the little plus sign,
whatever makes you happier.

46
00:02:51.440 --> 00:02:55.590
And you can put a ten if you want.

47
00:02:55.590 --> 00:03:00.454
And then for the,
&gt;&gt; Steve Kinney: If it's

48
00:03:00.454 --> 00:03:05.619
a letter,
&gt;&gt; Steve Kinney: What

49
00:03:05.619 --> 00:03:07.570
we'll do is we'll paste this in again.

50
00:03:07.570 --> 00:03:10.978
We'll say name, character,
cursor, continue.

51
00:03:10.978 --> 00:03:12.714
This should pass my test.

52
00:03:12.714 --> 00:03:17.411
Right, all right, we are half way there.

53
00:03:17.411 --> 00:03:21.917
So we've got that in place.

54
00:03:25.786 --> 00:03:26.968
&gt;&gt; Steve Kinney: Let me see,
we might do the skip,

55
00:03:26.968 --> 00:03:28.378
let me check up the texts really quick.

56
00:03:28.378 --> 00:03:33.548
So it's got the single number,
let me go ahead,

57
00:03:33.548 --> 00:03:40.344
I also did the letters as well,
so we can undo that one.

58
00:03:40.344 --> 00:03:46.080
We're gonna see a problem with this
next one, which is not surprising.

59
00:03:48.030 --> 00:03:50.389
All right, so let's look at our
multi-digit numbers, right?

60
00:03:51.910 --> 00:03:57.396
We wrote the code, we can we have a sense
of what's about to happen here, yeah.

61
00:03:57.396 --> 00:04:01.930
&gt;&gt; Speaker 2: A student online commented
that you could do MPX just dash dash watch

62
00:04:01.930 --> 00:04:03.640
and then tokenize.

63
00:04:03.640 --> 00:04:06.300
&gt;&gt; Steve Kinney: Yeah,
my problem is if I am hitting save and

64
00:04:06.300 --> 00:04:08.980
I forget to iterate the loop or
something like that,

65
00:04:08.980 --> 00:04:13.090
I'm going to basically lock
everything up in a very sad place.

66
00:04:13.090 --> 00:04:17.010
So I'm mostly doing it cuz if that
happens and my fan starts spinning and

67
00:04:17.010 --> 00:04:17.930
all that fun stuff.

68
00:04:19.890 --> 00:04:21.400
But yeah, I thought about that.

69
00:04:21.400 --> 00:04:25.120
I tried that, early on Ted Price [LAUGH].

70
00:04:25.120 --> 00:04:28.230
Right, if you don't make mistakes,
go for it.

71
00:04:28.230 --> 00:04:31.781
If you are both talking and
coding at the same time, not great.

72
00:04:31.781 --> 00:04:36.544
[LAUGH]
&gt;&gt; Speaker 2: Good to know.

73
00:04:36.544 --> 00:04:41.010
&gt;&gt; Steve Kinney: Yeah.
Cool, so this fails and for

74
00:04:41.010 --> 00:04:43.020
a reason it's not super surprising, right?

75
00:04:44.250 --> 00:04:50.900
Instead of getting 22 or 11 and 22 we're
getting one, one, two and two, all right?

76
00:04:50.900 --> 00:04:53.180
Because we don't have
the ability to look ahead and

77
00:04:53.180 --> 00:04:57.080
see, okay, is there more to this number or
not, right?

78
00:04:57.080 --> 00:04:58.830
So we're breaking up and
we're seeing each one of those.

79
00:04:58.830 --> 00:05:03.540
So what we need to do is saying, okay,
if we come across a number, keep looking.

80
00:05:03.540 --> 00:05:05.880
Look ahead, is the next one a number?

81
00:05:05.880 --> 00:05:08.450
Cool, it's part of the same number.

82
00:05:08.450 --> 00:05:09.720
It's not a number?

83
00:05:09.720 --> 00:05:12.220
Right, okay, neat, right?

84
00:05:12.220 --> 00:05:14.425
We can do something else with it, right?

85
00:05:14.425 --> 00:05:17.293
But we wanna make sure that we
kinda are looking ahead and

86
00:05:17.293 --> 00:05:19.530
seeing what's going on next.

87
00:05:19.530 --> 00:05:26.186
So we'll go ahead and
I will implement that.

88
00:05:26.186 --> 00:05:28.943
So we do it for numbers.

89
00:05:28.943 --> 00:05:34.986
And so what I need to do is I'll
start with the one that I got, right?

90
00:05:34.986 --> 00:05:37.255
So I'm gonna start with a new number.

91
00:05:37.255 --> 00:05:40.045
And right now it's still a string, so
this is great cuz I can effectively use

92
00:05:40.045 --> 00:05:41.890
the fact that I can add
the strings really easily.

93
00:05:41.890 --> 00:05:46.030
I can say number is the first character
I came across cuz we know it's a number,

94
00:05:46.030 --> 00:05:47.630
all right?

95
00:05:47.630 --> 00:05:54.992
And then we're gonna say while is number,
I'll look at the next one.

96
00:05:54.992 --> 00:05:57.299
So input, and this is where
we're gonna iterate that cursor.

97
00:06:02.477 --> 00:06:03.101
&gt;&gt; Steve Kinney: Right, look at, and

98
00:06:03.101 --> 00:06:04.632
we have white space breaking
stuff theoretically,

99
00:06:04.632 --> 00:06:05.708
there are a lot of little edge cases,

100
00:06:05.708 --> 00:06:07.792
to our syntax that if we wanted to
spend the entire day writing in lexer,

101
00:06:07.792 --> 00:06:09.452
we could totally cover every
last one of the edge cases.

102
00:06:09.452 --> 00:06:14.636
And you would be bored

103
00:06:14.636 --> 00:06:19.240
out of your mind.

104
00:06:19.240 --> 00:06:22.130
We're gonna assume that the number
is over cuz it has had whitespace.

105
00:06:22.130 --> 00:06:24.550
So that's when we iterated
the cursor anyway.

106
00:06:24.550 --> 00:06:30.130
The ++ as a prefix says,
bump the number and then use it, right?

107
00:06:30.130 --> 00:06:33.670
So this will get us
the next one in this case.

108
00:06:33.670 --> 00:06:37.638
So if the next one is also a number
we'll kinda pop it on there.

109
00:06:44.627 --> 00:06:47.475
&gt;&gt; Steve Kinney: Right, it's not
the characters that got set up there.

110
00:06:47.475 --> 00:06:51.351
And so we'll keep going until we come
across something that's not a number which

111
00:06:51.351 --> 00:06:54.040
we assume is gonna be some white space.

112
00:06:54.040 --> 00:06:56.100
And then we will go ahead and

113
00:06:56.100 --> 00:07:01.420
take this new number that we have,
and push that on instead.

114
00:07:01.420 --> 00:07:07.968
And cool, we shouldn't need to iterate
cursor at this point, famous last words.

115
00:07:13.611 --> 00:07:14.426
&gt;&gt; Steve Kinney: All right,
someone's passing.

116
00:07:14.426 --> 00:07:17.378
So I did numbers,
you're on the hook for doing strings,

117
00:07:17.378 --> 00:07:19.419
just to get the muscle memory in place.

118
00:07:19.419 --> 00:07:23.361
And then we're gonna skipping,
it should ignore white space,

119
00:07:23.361 --> 00:07:26.070
it's just gonna be with other characters.

120
00:07:26.070 --> 00:07:29.530
And then we ignored all white space, we
should be able to get that one for free.

121
00:07:29.530 --> 00:07:31.713
And then we'll just quickly do strings and

122
00:07:31.713 --> 00:07:34.085
we'll be done with our
lecture at that point.

