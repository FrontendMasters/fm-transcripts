WEBVTT

1
00:00:00.000 --> 00:00:03.211
&gt;&gt; Steve Kinney: Once you have
the ability to create your tree, and

2
00:00:03.211 --> 00:00:08.103
the ability to traverse it, and modify it,
you can now write a language that

3
00:00:08.103 --> 00:00:12.014
compiles to JavaScript, and
use it in the browser, right?

4
00:00:12.014 --> 00:00:13.535
There you are at that point.

5
00:00:13.535 --> 00:00:17.989
So if we look at we look at ad you
can see it is a CallExpression.

6
00:00:17.989 --> 00:00:20.446
Funny, right?

7
00:00:20.446 --> 00:00:22.975
So we cheated it a little bit
by sticking pretty close, but

8
00:00:22.975 --> 00:00:26.190
like maybe we call these functions or
that you couldn't like our lambda.

9
00:00:26.190 --> 00:00:28.971
You could call them anything you wanted,
right?

10
00:00:28.971 --> 00:00:33.249
Because you can just write a slightly
more sophisticated visitor that changes

11
00:00:33.249 --> 00:00:35.336
everything to what you need, right?

12
00:00:35.336 --> 00:00:38.010
I'm here [LAUGH] to teach you
the concepts out to bring you totally in

13
00:00:38.010 --> 00:00:38.785
the weeds with it.

14
00:00:38.785 --> 00:00:45.057
So they call it a CallExpression, but
we just have a name for ours, right?

15
00:00:45.057 --> 00:00:47.964
You can see that they do
it a little different.

16
00:00:47.964 --> 00:00:52.914
It's called a callee and it is It is in
fact an identifier with the name add,

17
00:00:52.914 --> 00:00:53.471
right?

18
00:00:53.471 --> 00:00:57.505
So these other ones are useful for source
maps and stuff along those lines but

19
00:00:57.505 --> 00:00:59.157
they're not required per se.

20
00:00:59.157 --> 00:01:02.646
So we need to go find the name and

21
00:01:02.646 --> 00:01:07.614
change it to be a callee
property a seven name

22
00:01:07.614 --> 00:01:12.335
property, with the type of identifier.

23
00:01:12.335 --> 00:01:15.437
And the name,
of whatever the name actually was, right?

24
00:01:15.437 --> 00:01:19.494
So if we do this, we can have
the ability to turn all of our regular,

25
00:01:19.494 --> 00:01:24.506
now drop their functions into good old
fashioned JavaScript functions, right?

26
00:01:24.506 --> 00:01:27.691
And this will now be
a compiler to JS language,

27
00:01:27.691 --> 00:01:30.793
that we can now add it to
our CLI to compile it,

28
00:01:30.793 --> 00:01:35.065
spit out some JavaScript and
shoot it over to the web, right?

29
00:01:35.065 --> 00:01:36.857
So let's try it out.

30
00:01:40.869 --> 00:01:43.680
&gt;&gt; Steve Kinney: We can see
there's a two JavaScript test.

31
00:01:43.680 --> 00:01:46.763
That's gonna take this nested function.

32
00:01:46.763 --> 00:01:51.141
And this is, again, it's the AST that
comes from that syntax that we saw,

33
00:01:51.141 --> 00:01:54.769
effectively, at the very
beginning of this course, right?

34
00:01:54.769 --> 00:01:59.351
A nested subtract inside of an add,
using that list-like syntax, right?

35
00:01:59.351 --> 00:02:01.790
This is the AST that we get.

36
00:02:01.790 --> 00:02:06.893
And then what we're expecting
to get is what looks

37
00:02:06.893 --> 00:02:12.618
a lot more like good old
fashion C style syntax, right?

38
00:02:12.618 --> 00:02:17.039
And I guess theoretically, this is simple
enough that it'll work in many languages

39
00:02:17.039 --> 00:02:19.165
cuz this is pretty agnostic right here.

40
00:02:19.165 --> 00:02:22.453
But we'll have the ability to have
effectively a compile to JavaScript

41
00:02:22.453 --> 00:02:23.010
language.

42
00:02:23.010 --> 00:02:25.694
We just need to actually
implement it ourselves.

43
00:02:25.694 --> 00:02:28.666
So we've got this toJavaScript function,
right?

44
00:02:28.666 --> 00:02:33.652
I've called it babelVisitor because
we're targeting the babel generator.

45
00:02:33.652 --> 00:02:36.999
That is not actually an important
implementation detail.

46
00:02:36.999 --> 00:02:41.781
It is only for our sake,
to differentiate it

47
00:02:41.781 --> 00:02:46.317
from the other kinds of visitors, cool.

48
00:02:46.317 --> 00:02:50.782
So let's go ahead and, what kind of
expressions do we need to change?

49
00:02:50.782 --> 00:02:54.188
I gave halfway the answer there.

50
00:02:54.188 --> 00:02:56.359
What kind of nodes do I need to change?

51
00:02:56.359 --> 00:02:57.051
&gt;&gt; Speaker 2: CallExpression.

52
00:02:57.051 --> 00:03:00.192
&gt;&gt; Steve Kinney: CallExpression, cool.

53
00:03:00.192 --> 00:03:05.137
So this will then take CallExpression and
I'm gonna repeat it so

54
00:03:05.137 --> 00:03:07.344
I think it bears repeating.

55
00:03:07.344 --> 00:03:10.853
I don't have to change any
of the rehearsal stuff,

56
00:03:10.853 --> 00:03:14.474
it's all just ready to go and
we'll say enter.

57
00:03:14.474 --> 00:03:18.376
&gt;&gt; Steve Kinney: I really only care
about the node in this case and

58
00:03:18.376 --> 00:03:21.409
remember had that callee property.

59
00:03:21.409 --> 00:03:28.370
And so okay, we'll say hey,
we're gonna add you a node.callee,

60
00:03:28.370 --> 00:03:32.663
and is gonna have the type of identifier.

61
00:03:35.645 --> 00:03:38.636
&gt;&gt; Steve Kinney: The name, node.name.

62
00:03:39.975 --> 00:03:41.279
&gt;&gt; Steve Kinney: Right?

63
00:03:41.279 --> 00:03:45.572
Again, there's likely in our language
other things that need to happen here,

64
00:03:45.572 --> 00:03:46.222
all right?

65
00:03:46.222 --> 00:03:49.412
We have not implemented
variable definitions yet.

66
00:03:49.412 --> 00:03:53.174
But clearly we know that syntax will
be different than the syntax for

67
00:03:53.174 --> 00:03:54.499
our language, right?

68
00:03:54.499 --> 00:03:59.187
So more than likely, this would,
in fact, have to grow, all right?

69
00:03:59.187 --> 00:04:02.420
There are other things
that gonna need to do.

70
00:04:02.420 --> 00:04:04.874
But for now we can start here and

71
00:04:04.874 --> 00:04:09.704
then to JavaScript it's gonna
take the entire ast program.

72
00:04:09.704 --> 00:04:15.170
And we're gonna try to traverse it,
and at the very end we are going to

73
00:04:15.170 --> 00:04:21.314
try to generate out some JavaScript
that it will make that test pass, right?

74
00:04:21.314 --> 00:04:22.979
All right, so what needs to happen?

75
00:04:22.979 --> 00:04:24.309
Shockingly little.

76
00:04:26.956 --> 00:04:29.558
&gt;&gt; Steve Kinney: So we have that
traverse function already, right?

77
00:04:29.558 --> 00:04:31.182
We've spent the time writing that.

78
00:04:33.354 --> 00:04:37.897
&gt;&gt; Steve Kinney: And it starts at
the top of whatever ast it's given.

79
00:04:37.897 --> 00:04:43.143
It takes the babelVisitor, right?

80
00:04:43.143 --> 00:04:47.505
&gt;&gt; Steve Kinney: Now, it is affiliates
slightly out of Vogue in JavaScript these

81
00:04:47.505 --> 00:04:50.506
days, but for a lots of important reasons.

82
00:04:50.506 --> 00:04:55.562
Cuz in the traversal and transformation
tree, as you work through it,

83
00:04:55.562 --> 00:04:59.030
wherever we have that ability to enter and
exit.

84
00:04:59.030 --> 00:05:05.433
It is okay to mutate the tree, yeah?

85
00:05:05.433 --> 00:05:08.813
&gt;&gt; Speaker 2: When would
you choose Enter or Exit?

86
00:05:08.813 --> 00:05:11.428
&gt;&gt; Steve Kinney: Yeah,
if you have to like, if you're waiting for

87
00:05:11.428 --> 00:05:12.309
after the fact.

88
00:05:12.309 --> 00:05:16.119
It's something that happened, maybe,
to a child, will affect the parent, or

89
00:05:16.119 --> 00:05:17.529
something along those ways.

90
00:05:17.529 --> 00:05:23.134
It's like predominantly, it is,
I would say 90% of the time, enter, right?

91
00:05:23.134 --> 00:05:25.575
It is enter unless you
know you need to exit for

92
00:05:25.575 --> 00:05:27.825
some reason because the change you need or

93
00:05:27.825 --> 00:05:32.274
you're relying on to compute something
on a higher up node hasn't happened yet.

94
00:05:32.274 --> 00:05:33.795
Yeah, it's great question.

95
00:05:33.795 --> 00:05:36.875
I would say like the OC
implementations that we saw before,

96
00:05:36.875 --> 00:05:40.770
where it's just the method name, and
those would only happen on an enter.

97
00:05:40.770 --> 00:05:42.623
In my experience, right?

98
00:05:42.623 --> 00:05:48.522
I'm sure and if code base is largest babel
there's probably instances of both but

99
00:05:48.522 --> 00:05:52.638
it is predominantly happened
on enter in my experience.

100
00:05:52.638 --> 00:05:56.768
Yeah, I would say you almost always
want enter unless you need exit

101
00:05:56.768 --> 00:06:01.070
because enter is not getting you
something at the time that you need.

102
00:06:02.368 --> 00:06:05.847
&gt;&gt; Steve Kinney: All right,
so this will mutate the tree.

103
00:06:05.847 --> 00:06:07.959
And I think as I was saying earlier,

104
00:06:07.959 --> 00:06:12.757
like we like affiliate modern JavaScript
think it's terrible to mutate trees.

105
00:06:12.757 --> 00:06:14.738
But because you are working kind of up and
down and

106
00:06:14.738 --> 00:06:17.019
you might be doing multiple
transformations, right?

107
00:06:17.019 --> 00:06:19.170
We just kinda mutate the tree in place.

108
00:06:19.170 --> 00:06:22.945
That's how it's done the large
majority of the time.

109
00:06:22.945 --> 00:06:27.098
So it's feels almost slightly
awkward even as I was typing it.

110
00:06:27.098 --> 00:06:29.813
Not to have to store
the result in a variable.

111
00:06:29.813 --> 00:06:32.667
But it turns out,
we've actually been doing that a lot.

112
00:06:32.667 --> 00:06:36.230
Not talking about it like when
we're popping tokens often array,

113
00:06:36.230 --> 00:06:40.552
the fact that, and this is like a definite
thing I actually want to like re-point

114
00:06:40.552 --> 00:06:43.309
out when like working through strings and
arrays.

115
00:06:43.309 --> 00:06:47.786
Is in JavaScript the arrays
are passed by reference.

116
00:06:47.786 --> 00:06:52.098
So you can pass that array around, and
you'll have the same copy of it and

117
00:06:52.098 --> 00:06:54.301
different functions can mutate it.

118
00:06:54.301 --> 00:06:58.629
Remember how we had parent size and parse.

119
00:06:58.629 --> 00:07:01.176
They could pass the same array around, but

120
00:07:01.176 --> 00:07:04.867
you couldn't do that a string
of strings are passed by value.

121
00:07:04.867 --> 00:07:07.913
So here we have this tree
that we can mutate and

122
00:07:07.913 --> 00:07:11.209
we don't actually have
to store it in anything.

123
00:07:11.209 --> 00:07:12.498
Once that happens, right?

124
00:07:12.498 --> 00:07:18.942
If we've made it effectively
a babel compliant tree.

125
00:07:18.942 --> 00:07:23.244
Then we can go ahead and just return,
&gt;&gt; Steve Kinney: Generate, and

126
00:07:23.244 --> 00:07:27.281
this generate, if you look up here
is coming from Babel generator.

127
00:07:27.281 --> 00:07:31.412
We just have to use the default
here because it's subtle to be

128
00:07:31.412 --> 00:07:34.746
an Essence module, and
we are in plain old node.

129
00:07:34.746 --> 00:07:37.062
So that's the only reason.

130
00:07:37.062 --> 00:07:39.540
If you're using ESSence syntax,

131
00:07:39.540 --> 00:07:43.903
it would just be import
generate from @babel/generator.

132
00:07:43.903 --> 00:07:46.740
Cool, so we'll do that.

133
00:07:46.740 --> 00:07:49.625
And we get on our AST because it's
the only one we really care about.

134
00:07:49.625 --> 00:07:53.672
And this will return an object
with a number of properties.

135
00:07:53.672 --> 00:07:59.435
The one that we care about is the actual
code that comes out the other side, right?

136
00:08:01.298 --> 00:08:02.758
&gt;&gt; Steve Kinney: All right, and again,

137
00:08:02.758 --> 00:08:07.869
the tricky part is as our language goes of
course, making it babel compliant tree.

138
00:08:07.869 --> 00:08:12.721
But should we be able to do that we get,
you'll see it for

139
00:08:12.721 --> 00:08:16.972
yourself, let's go to
the to JavaScript test.

140
00:08:18.822 --> 00:08:19.959
&gt;&gt; Steve Kinney: We will unskip it.

141
00:08:28.857 --> 00:08:30.594
&gt;&gt; Steve Kinney: It was actually
run the JavaScript runs.

142
00:08:37.696 --> 00:08:38.566
&gt;&gt; Steve Kinney: And it passes.

143
00:08:38.566 --> 00:08:42.004
We're now outputting real deal JavaScript,
all right?

144
00:08:42.004 --> 00:08:47.105
So now we have effectively three ways to
interact with our budding new language,

145
00:08:47.105 --> 00:08:47.637
right?

146
00:08:47.637 --> 00:08:50.676
We have a REPL,
where we can work with it in real time.

147
00:08:50.676 --> 00:08:55.138
We have the ability to read files in
the file system evaluate them and

148
00:08:55.138 --> 00:08:56.165
execute them.

149
00:08:56.165 --> 00:09:01.054
And we now have the ability to
transpile out to JavaScript, right?

150
00:09:01.054 --> 00:09:05.074
So we've got kind of an interpreter and
we've got a compiler at this point.

151
00:09:05.074 --> 00:09:06.925
We've kind of had our toes in both, right?

152
00:09:06.925 --> 00:09:08.320
And kind of gotten a feel for

153
00:09:08.320 --> 00:09:12.031
depending on what you're doing is
going to be like slightly different.

154
00:09:12.031 --> 00:09:16.075
And in a lot of cases there is a case for
both, right?

155
00:09:16.075 --> 00:09:20.316
Even if you are doing a templating
language there's some amount of look ups

156
00:09:20.316 --> 00:09:23.021
of okay,
do we have that value in the template?

157
00:09:23.021 --> 00:09:25.612
There might be conditionals or
wire loops or something like that.

158
00:09:25.612 --> 00:09:27.918
There's still stuff that
effectively happens in there,

159
00:09:27.918 --> 00:09:29.196
you might need to work through.

160
00:09:29.196 --> 00:09:32.092
But you might, in that case most
definitely have a compile target.

161
00:09:32.092 --> 00:09:34.597
On the other hand, if you are doing
something like we were talking about

162
00:09:34.597 --> 00:09:36.243
terraforming in the very beginning, right?

163
00:09:36.243 --> 00:09:40.649
The ability to spin up cloud
infrastructure, right?

164
00:09:40.649 --> 00:09:43.777
Well, that's gonna be primarily run time,
right?

165
00:09:43.777 --> 00:09:46.884
Or even RubyGems or something like that,

166
00:09:46.884 --> 00:09:51.866
that is primarily pulling stuff
down off of a repository, right?

167
00:09:51.866 --> 00:09:55.675
So the thing that your language does is
usually going to be slightly different.

168
00:09:55.675 --> 00:09:58.863
Most of us will probably make
a domain specific language or

169
00:09:58.863 --> 00:10:02.517
something along those lines that
solves a given problem, right?

170
00:10:02.517 --> 00:10:05.284
General purpose language
is also cool to do, right?

171
00:10:05.284 --> 00:10:08.257
It obviously has a wider range when you're
gonna need both in one of those cases.

172
00:10:08.257 --> 00:10:10.493
But depending on the problem
you're gonna solve,

173
00:10:10.493 --> 00:10:13.099
the answer of what you need is
gonna be slightly different.

