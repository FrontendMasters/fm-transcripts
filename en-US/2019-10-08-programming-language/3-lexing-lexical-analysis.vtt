WEBVTT

1
00:00:00.252 --> 00:00:03.596
&gt;&gt; Steve Kinney: So we're gonna start with
parsing, which is kind of the first part.

2
00:00:03.596 --> 00:00:05.905
We have to figure out what
we're working with, right?

3
00:00:05.905 --> 00:00:10.221
And parsing we can kind
of break into two pieces,

4
00:00:10.221 --> 00:00:14.127
lexical analysis and syntactic analysis.

5
00:00:14.127 --> 00:00:16.665
One is like,
we don't just want every character,

6
00:00:16.665 --> 00:00:18.919
we want the kind of like pieces of it,
right?

7
00:00:18.919 --> 00:00:20.717
We want the given keywords.

8
00:00:20.717 --> 00:00:23.775
We want an entire string
as a piece of our code and

9
00:00:23.775 --> 00:00:28.371
then giving an entire multi digit
number as a piece of our code, right?

10
00:00:28.371 --> 00:00:30.533
We need all of those things
kind of separated out first,

11
00:00:30.533 --> 00:00:32.148
like we might not care about white space.

12
00:00:32.148 --> 00:00:34.849
We might throw the semicolons
in the garbage can, right?

13
00:00:34.849 --> 00:00:37.688
Any other things are fair game, but
we need to figure out what are the pieces

14
00:00:37.688 --> 00:00:40.456
that are important and kind of break
them into those meaningful chunks.

15
00:00:40.456 --> 00:00:43.549
Once we have those meaningful chunks,
we can figure out, okay,

16
00:00:43.549 --> 00:00:47.104
now that I know the words, what does
this sentence actually mean, right?

17
00:00:47.104 --> 00:00:49.098
And I can begin to figure that stuff out.

18
00:00:49.098 --> 00:00:51.230
They're technically both parsing, right?

19
00:00:51.230 --> 00:00:51.828
But we're going

20
00:00:51.828 --> 00:00:54.355
to kind of split them out into two
because it makes a little more sense.

21
00:00:54.355 --> 00:00:59.316
So let's first talk about lexing, which
is how cool kids say lexical analysis.

22
00:00:59.316 --> 00:01:02.062
Basically, like I said,
it's taking the string and

23
00:01:02.062 --> 00:01:03.961
turning it into what we call tokens.

24
00:01:03.961 --> 00:01:05.232
So what are the tokens?

25
00:01:05.232 --> 00:01:07.730
The given parentheses are tokens.

26
00:01:07.730 --> 00:01:10.468
The keyword 'add' is a token.

27
00:01:10.468 --> 00:01:14.557
The numbers 1 and 2, and
6 and 3 are tokens, right?

28
00:01:14.557 --> 00:01:15.148
These are the pieces.

29
00:01:15.148 --> 00:01:19.971
I don't want every I
don't want a d d space 2.

30
00:01:19.971 --> 00:01:24.151
I want these pieces I can
start to think about.

31
00:01:24.151 --> 00:01:27.958
So how might this work, right?

32
00:01:27.958 --> 00:01:34.424
We would basically have a string of code.

33
00:01:34.424 --> 00:01:39.742
The way we're gonna do it is
we're gonna have a cursor, right?

34
00:01:39.742 --> 00:01:45.041
Which is just the position of where we
are in that giant string of code, right?

35
00:01:45.041 --> 00:01:49.050
And as we will kind of
iterate that cursor through,

36
00:01:49.050 --> 00:01:52.278
kind of looking for things, right?

37
00:01:52.278 --> 00:01:54.401
We came across a word, great.

38
00:01:54.401 --> 00:01:56.982
Let's start scanning that word until
we come to the end of the word.

39
00:01:56.982 --> 00:01:58.592
Cool, that's a token.

40
00:01:58.592 --> 00:02:00.966
Put it in the token bag, right?

41
00:02:00.966 --> 00:02:02.524
It came across a number.

42
00:02:02.524 --> 00:02:03.720
How many digits does it have?

43
00:02:03.720 --> 00:02:05.029
We need to collect them all.

44
00:02:05.029 --> 00:02:05.806
There's a quote?

45
00:02:05.806 --> 00:02:06.943
This must be a string.

46
00:02:06.943 --> 00:02:08.557
Go until you find the next quote.

47
00:02:08.557 --> 00:02:10.341
Put it in the token bag, right?

48
00:02:10.341 --> 00:02:11.045
It's a parentheses?

49
00:02:11.045 --> 00:02:11.606
I need that.

50
00:02:11.606 --> 00:02:12.221
Go to the list.

51
00:02:12.221 --> 00:02:13.354
I need all the parentheses.

52
00:02:13.354 --> 00:02:14.638
Give me each and every one of them.

53
00:02:14.638 --> 00:02:15.355
White space?

54
00:02:15.355 --> 00:02:17.549
I don't care about white space, right?

55
00:02:17.549 --> 00:02:20.937
Other than the fact that it
breaks up numbers and words,

56
00:02:20.937 --> 00:02:25.853
once I've used it as a boundary, it
doesn't matter to me what happens, right?

57
00:02:25.853 --> 00:02:28.225
And we just keep putting everything
into the array of tokens.

58
00:02:28.225 --> 00:02:31.330
And then we'll go back through that array
once we've gotten everything broken up

59
00:02:31.330 --> 00:02:31.874
into chunks.

60
00:02:31.874 --> 00:02:36.214
And that is when we'll be able to kind
of figure out what it all kind of comes

61
00:02:36.214 --> 00:02:37.477
together and means.

