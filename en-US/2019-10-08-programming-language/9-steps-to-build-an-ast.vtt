WEBVTT

1
00:00:00.000 --> 00:00:03.489
&gt;&gt; Steve Kinney: So
how might we build an AST?

2
00:00:03.489 --> 00:00:08.608
Well, we can iterate through the array
of tokens for each number or string.

3
00:00:08.608 --> 00:00:12.236
You add that to the same level
of the tree, right, their peers.

4
00:00:12.236 --> 00:00:13.478
For each parentheses though,

5
00:00:13.478 --> 00:00:16.066
that's like a function call in
a Lisp-like language, right?

6
00:00:16.066 --> 00:00:19.401
And so we know that, okay,
that's gonna be a CallExpression.

7
00:00:19.401 --> 00:00:21.882
The first thing is the function name,
right?

8
00:00:21.882 --> 00:00:24.664
And they use subsequent ones
are the arguments, right?

9
00:00:24.664 --> 00:00:27.803
So we can kind of go and
use the use data we collected.

10
00:00:27.803 --> 00:00:30.450
White spaces matter,
it was just to break apart our token.

11
00:00:30.450 --> 00:00:33.289
Quotes didn't matter, it was just to
identify string, so we threw those away,

12
00:00:33.289 --> 00:00:34.310
we didn't even keep those.

13
00:00:34.310 --> 00:00:37.171
But parentheses,
parentheses won't make it into our AST,

14
00:00:37.171 --> 00:00:40.312
cuz they're not important to
the actual meaning of the language,

15
00:00:40.312 --> 00:00:43.248
they just denote as we're trying
to figure out that meaning.

16
00:00:43.248 --> 00:00:45.865
Once we figured out what they were
there for, we can throw those out, too.

17
00:00:45.865 --> 00:00:50.074
We really just need the identifiers and
the values, right?

18
00:00:50.074 --> 00:00:57.135
So make CallExpressions based on those and
kind of start to nest those as well.

19
00:00:57.135 --> 00:01:00.347
So there's kind of a few ways to do it.

20
00:01:00.347 --> 00:01:04.105
What we're gonna kinda create,
is we're gonna use,

21
00:01:04.105 --> 00:01:08.200
the parentheses are gonna
inspire nested arrays, right?

22
00:01:08.200 --> 00:01:10.162
And we can use those
nested arrays cuz again,

23
00:01:10.162 --> 00:01:13.686
this is a kinda Lisp-like syntax where
everything is a list, arrays are lists.

24
00:01:13.686 --> 00:01:16.546
It all works out great for us.

25
00:01:16.546 --> 00:01:20.411
And so yeah, you can see that the first
one we have the name, 1 and 2.

26
00:01:20.411 --> 00:01:23.104
So this is for that subtract.

27
00:01:23.104 --> 00:01:27.995
Add 1 and 2, and subtract 4 and 2 kind
of nested structure that we saw before.

28
00:01:27.995 --> 00:01:31.355
You can see, here's an add,
so on and so forth.

29
00:01:31.355 --> 00:01:35.132
This is what we would get from
the parsing when we start to put it in,

30
00:01:35.132 --> 00:01:38.245
we start to use those
parentheses to figure stuff out.

31
00:01:38.245 --> 00:01:41.600
And this is the AST that we
get out the other end, right?

32
00:01:41.600 --> 00:01:43.303
And so
you can see a lot of metadata about this.

33
00:01:43.303 --> 00:01:47.209
Okay, we know that it's a function
that we're calling, right,

34
00:01:47.209 --> 00:01:49.180
versus a function declaration.

35
00:01:49.180 --> 00:01:52.338
Again, I've mostly took
inspiration from Babel for these,

36
00:01:52.338 --> 00:01:55.868
cuz that's the kind of target
language that we're gonna try to hit.

37
00:01:55.868 --> 00:01:58.260
And we can kind of dust them and
see along those lines and

38
00:01:58.260 --> 00:02:02.024
what happens when the Babel comes across,
this is, okay, it's a call expression.

39
00:02:02.024 --> 00:02:05.050
I know what those look like, it's actually
different than the way Lisp does it.

40
00:02:05.050 --> 00:02:07.532
It's the function name,
and then the parentheses.

41
00:02:07.532 --> 00:02:10.364
And so it'll be able to
rearrange all that stuff for us,

42
00:02:10.364 --> 00:02:14.661
cuz we've expressed the meaning of our
code in this intermediate representation.

43
00:02:14.661 --> 00:02:18.582
As I kinda said before, they're not
just for programming languages.

44
00:02:18.582 --> 00:02:21.954
You can you can use them again,
like a lot of our LinkedIn tools,

45
00:02:21.954 --> 00:02:23.967
a lot of our code formatting, right?

46
00:02:23.967 --> 00:02:29.373
There's a lot of use cases for
this stuff above and beyond this.

