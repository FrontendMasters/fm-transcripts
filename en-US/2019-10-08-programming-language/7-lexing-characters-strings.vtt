WEBVTT

1
00:00:00.000 --> 00:00:02.815
&gt;&gt; Steve Kinney: So
let's let's finish up this lecture.

2
00:00:02.815 --> 00:00:06.481
What we need to do is,
we need to get our quotes working,

3
00:00:06.481 --> 00:00:11.175
or I'm sorry, I was like getting
the multi characters names working.

4
00:00:11.175 --> 00:00:14.057
And then, we'll go ahead and
get strings as well,

5
00:00:14.057 --> 00:00:16.547
we should get that white space one for
free.

6
00:00:16.547 --> 00:00:20.387
So in this case,
it's pretty much the same.

7
00:00:20.387 --> 00:00:24.275
We can just say, we'll call it a symbol
in this case, it's not a number.

8
00:00:24.275 --> 00:00:28.486
Is that first one that we came across
since we know that that one's fair game.

9
00:00:28.486 --> 00:00:31.245
And then, we'll go ahead and
say, while and

10
00:00:31.245 --> 00:00:36.180
we're actually when we get to the strings,
I don't have a like a really great way

11
00:00:36.180 --> 00:00:40.409
of they have a great way of peeking but
not of pulling the next one off.

12
00:00:40.409 --> 00:00:44.027
So I'm just using the kind of like regular
syntax, but when we get to arrays,

13
00:00:44.027 --> 00:00:46.209
we'll actually use a helper for
this as well.

14
00:00:46.209 --> 00:00:52.999
So if letter, I will look at the input,
well, as well as cursor, right?

15
00:00:52.999 --> 00:01:00.643
And then we'll just say, symbol +=,
&gt;&gt; Steve Kinney: Where the cursor is now.

16
00:01:03.693 --> 00:01:06.898
&gt;&gt; Steve Kinney: Cool, all right,
and then once we have that done,

17
00:01:06.898 --> 00:01:10.343
we just push it on the symbol
instead of the character.

18
00:01:12.693 --> 00:01:15.830
&gt;&gt; Steve Kinney: And that last one where
the while broke should get us onto

19
00:01:15.830 --> 00:01:16.844
the white space.

20
00:01:19.484 --> 00:01:20.494
&gt;&gt; Steve Kinney: All right, sweet.

21
00:01:20.494 --> 00:01:25.437
And strings are just a little bit
different in a very subtle way which

22
00:01:25.437 --> 00:01:30.031
is that they start, well,
as soon as we hit a double quote, and

23
00:01:30.031 --> 00:01:35.258
they keep going indiscriminately
until we hit the other double quote.

24
00:01:35.258 --> 00:01:36.484
It's almost the opposite, all right?

25
00:01:36.484 --> 00:01:38.227
Are you a letter, right?

26
00:01:38.227 --> 00:01:39.427
For the previous one.

27
00:01:39.427 --> 00:01:43.577
Cool, join me or your number for
that multi digit number, join me.

28
00:01:43.577 --> 00:01:48.086
For string, it's actually, hey man,
anything can come onto this string until

29
00:01:48.086 --> 00:01:51.748
we get to the closing quote and
then we're done here, all right?

30
00:01:51.748 --> 00:01:53.978
So it's just basically the opposite.

31
00:01:53.978 --> 00:02:02.080
So we can do, I have a isQuote helper cuz
our language only supports double quotes,

32
00:02:02.080 --> 00:02:06.494
[LAUGH] that's problematic for you.

33
00:02:06.494 --> 00:02:09.049
So if it is a quote, cool,

34
00:02:09.049 --> 00:02:14.992
we know it's time to start a string,
I'll say lead string.

35
00:02:14.992 --> 00:02:18.323
Now, we don't want that first quote,
right?

36
00:02:18.323 --> 00:02:20.963
We do like, for the letters like hey,
you're the first letter,

37
00:02:20.963 --> 00:02:22.942
you're the first number,
I need you, join me.

38
00:02:22.942 --> 00:02:26.704
This one are like, we don't, like our
language doesn't care about quotes,

39
00:02:26.704 --> 00:02:28.477
it doesn't care about white space.

40
00:02:28.477 --> 00:02:31.457
It's throwing these things in the garbage
can as part of the tokenization.

41
00:02:31.457 --> 00:02:33.847
It needs them to figure out
where the token starts, right?

42
00:02:33.847 --> 00:02:36.977
But notice how we're
getting into the type.

43
00:02:36.977 --> 00:02:41.408
There's definitely trade offs that we're
gonna make throughout the day, right?

44
00:02:41.408 --> 00:02:44.128
Like if we wanted to purely
the interpreter route,

45
00:02:44.128 --> 00:02:47.039
like just keeping primitives
the whole way through and

46
00:02:47.039 --> 00:02:50.790
not making these objects that have
some metadata, it's super easy.

47
00:02:50.790 --> 00:02:53.355
Especially because of our list,
which is a set of lists.

48
00:02:53.355 --> 00:02:55.490
And like you just put
the values in an array,

49
00:02:55.490 --> 00:02:58.805
it's super easy if we're going to
get the interpreter only route.

50
00:02:58.805 --> 00:03:04.215
But we also wanna get comfortable with
ASTs, and compilers, and stuff like that.

51
00:03:04.215 --> 00:03:09.422
So we're kind of in a way,-because we
wanna have the best of both worlds,

52
00:03:09.422 --> 00:03:11.665
we have to make some trade offs.

53
00:03:11.665 --> 00:03:14.918
So yeah, we kinda get this metadata route.

54
00:03:14.918 --> 00:03:21.489
And so we'll say, while, now, this one's
slightly different, not isQuote, right?

55
00:03:21.489 --> 00:03:23.793
So while the next thing is not a quote,

56
00:03:23.793 --> 00:03:27.038
because our strings can
have effectively anything.

57
00:03:27.038 --> 00:03:31.538
And we're not good like, yeah,
like if we're doing this, if again,

58
00:03:31.538 --> 00:03:36.413
we were spending all week writing Alexa
all day even like we would like let back

59
00:03:36.413 --> 00:03:41.288
slashes, escape, another double quote,
or something along those lines,

60
00:03:41.288 --> 00:03:43.090
we're not going to do that.

61
00:03:43.090 --> 00:03:46.770
Cursor are like you should,
but we're not going to.

62
00:03:50.610 --> 00:03:58.410
&gt;&gt; Steve Kinney: +- input[cursor]
maybe I spell input, right?

63
00:03:58.410 --> 00:04:07.370
Cool, and then we go ahead and,
&gt;&gt; Steve Kinney: Push on,

64
00:04:07.370 --> 00:04:13.216
this one's gonna be a type of string,
&gt;&gt; Steve Kinney: Value,

65
00:04:13.216 --> 00:04:16.590
of the string that we just collected.

66
00:04:16.590 --> 00:04:20.100
Now, this one again,
slightly different, before,

67
00:04:20.100 --> 00:04:23.684
we knew that we were at the end
of the multi digit number or

68
00:04:23.684 --> 00:04:27.829
the end of the identifier slash
name because we hit white space.

69
00:04:27.829 --> 00:04:31.411
This point,
we actually hit the closing quote, right?

70
00:04:31.411 --> 00:04:33.973
Which we wanna throw in the garbage can,
right?

71
00:04:33.973 --> 00:04:37.803
So in this, case we'll go ahead and
just move onto one more character as well.

72
00:04:40.723 --> 00:04:42.353
&gt;&gt; Steve Kinney: And this is why
it's useful to have the cursor.

73
00:04:42.353 --> 00:04:44.762
I think that's to answer your
question earlier, Jason,

74
00:04:44.762 --> 00:04:47.426
like the fact that we have complete
control over the index of it.

75
00:04:47.426 --> 00:04:50.853
And like we don't have to play with like,
if we're doing this and a reduced,

76
00:04:50.853 --> 00:04:52.236
it would be a little trickier.

77
00:04:56.706 --> 00:04:59.237
&gt;&gt; Steve Kinney: And I say that as
somebody who started with like I wanna use

78
00:04:59.237 --> 00:04:59.776
a reduced.

79
00:04:59.776 --> 00:05:05.911
[LAUGH] I say that from from having
tried and failing miserably at it.

80
00:05:05.911 --> 00:05:07.690
All right, so that should be everything.

81
00:05:07.690 --> 00:05:11.311
Let's unskip those tests and see if I made
any terrible mistakes while I was talking.

82
00:05:15.490 --> 00:05:17.632
&gt;&gt; Steve Kinney: And we can pretty
much unskip them all at this point.

83
00:05:29.122 --> 00:05:30.892
&gt;&gt; Steve Kinney: All right, we have.

