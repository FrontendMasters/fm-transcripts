WEBVTT

1
00:00:00.000 --> 00:00:02.478
&gt;&gt; Steve Kinney: All right, so
they go over into this, well,

2
00:00:02.478 --> 00:00:04.582
named file called standard library.

3
00:00:04.582 --> 00:00:06.414
There's a few things happening,

4
00:00:06.414 --> 00:00:09.393
there are some basic functions
that I've put in place.

5
00:00:09.393 --> 00:00:15.304
And I'll talk a little bit about
this helper up here as well.

6
00:00:15.304 --> 00:00:19.679
But we've got the ability to add,
subtract, multiply,

7
00:00:19.679 --> 00:00:24.514
divide, modulo, and console log,
cuz that could be helpful.

8
00:00:24.514 --> 00:00:28.395
We're not gonna be able to use it just
yet, but we can put in constants that

9
00:00:28.395 --> 00:00:31.658
are available like pi or
anything else that you want, right?

10
00:00:31.658 --> 00:00:35.417
You can add as many things to
this object as you would like.

11
00:00:35.417 --> 00:00:39.401
And we will add a few things
over the course of the day.

12
00:00:39.401 --> 00:00:44.577
All these orders is it takes a list,
right?

13
00:00:44.577 --> 00:00:48.280
So remember we had that
first the function name, and

14
00:00:48.280 --> 00:00:51.490
then we had like a whole
series of arguments.

15
00:00:51.490 --> 00:00:56.171
It basically takes two of them at a time
and runs them through the function, right?

16
00:00:56.171 --> 00:01:00.792
And so this allows us to say add one, two,
three, four, five, six, seven, and they'll

17
00:01:00.792 --> 00:01:04.770
first take one and two and add them
together, then that three, the resulted.

18
00:01:04.770 --> 00:01:08.358
And the other three and add them together,
then the six, and the four, so on and so

19
00:01:08.358 --> 00:01:09.088
forth, right?

20
00:01:09.088 --> 00:01:10.109
And we'll go ahead and

21
00:01:10.109 --> 00:01:12.964
just like run through the entire
series of arguments, right?

22
00:01:12.964 --> 00:01:15.555
You could not do this if you
just want to have it take two,

23
00:01:15.555 --> 00:01:19.253
like where there's gonna be things where
we only care about two like when we want

24
00:01:19.253 --> 00:01:21.316
to be able to eventually define variables.

25
00:01:21.316 --> 00:01:25.866
Like I couldn't come up with like,
as the language designer in this case,

26
00:01:25.866 --> 00:01:29.407
I couldn't come up with a reason
why I would say define x and

27
00:01:29.407 --> 00:01:31.882
give a random series of things, right?

28
00:01:31.882 --> 00:01:32.777
But you could, right?

29
00:01:32.777 --> 00:01:35.409
You're in charge of your language,
I'm in charge of my language,

30
00:01:35.409 --> 00:01:37.687
you don't tell me what to do,
I don't tell you what to do.

31
00:01:37.687 --> 00:01:43.958
So this is our standard library and
then we've got our evaluate.

32
00:01:46.908 --> 00:01:47.876
&gt;&gt; Steve Kinney: Know up, okay,

33
00:01:47.876 --> 00:01:51.349
that we're eventually going
to need to implement as well.

34
00:01:51.349 --> 00:01:55.834
So we know that there's a really
effectively like two things that we

35
00:01:55.834 --> 00:02:00.333
need to worry about which is our
expressions and our actual values.

36
00:02:00.333 --> 00:02:02.876
We know when we get to an actual
value like we're done.

37
00:02:02.876 --> 00:02:04.949
And we know our expression,
we actually have to call it.

38
00:02:04.949 --> 00:02:08.594
So let's just start with the base case of,
I got a two,

39
00:02:08.594 --> 00:02:10.671
a two has a value to it, right?

40
00:02:10.671 --> 00:02:11.819
Like we're done there.

