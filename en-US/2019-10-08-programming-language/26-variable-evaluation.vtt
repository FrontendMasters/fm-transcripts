WEBVTT

1
00:00:00.000 --> 00:00:00.505
&gt;&gt; Steve Kinney: We added define.

2
00:00:00.505 --> 00:00:06.318
We do need to go and
make sure that we can evaluate it however.

3
00:00:06.318 --> 00:00:07.485
So let's get that in place.

4
00:00:12.597 --> 00:00:15.934
&gt;&gt; Steve Kinney: Cool,
we'll go into evaluate.

5
00:00:18.648 --> 00:00:20.132
&gt;&gt; Steve Kinney: Now we
have this new type of node.

6
00:00:20.132 --> 00:00:22.513
So let's go ahead and
make the helper function first.

7
00:00:22.513 --> 00:00:28.322
We'll say,
&gt;&gt; Steve Kinney: I

8
00:00:28.322 --> 00:00:29.686
think define is a great name for it.

9
00:00:29.686 --> 00:00:32.129
But if you named yours something else,

10
00:00:32.129 --> 00:00:35.022
then define might not be the best name for
you.

11
00:00:35.022 --> 00:00:36.820
It's just the best name for me.

12
00:00:36.820 --> 00:00:43.405
define, I will say node and all we have
to do is add it to the environment.

13
00:00:46.633 --> 00:00:48.522
&gt;&gt; Steve Kinney: And
it'll be node.identifier,

14
00:00:50.854 --> 00:00:51.906
&gt;&gt; Steve Kinney: .name

15
00:00:51.906 --> 00:00:56.641
= node.assignment.value.

16
00:00:59.236 --> 00:01:03.612
&gt;&gt; Steve Kinney: And then we'll say
&gt;&gt; Steve Kinney: If the node.type now

17
00:01:03.612 --> 00:01:07.891
equals this new kinda syntax and
yeah, could you come up with,

18
00:01:07.891 --> 00:01:09.927
is this gonna grow over time?

19
00:01:09.927 --> 00:01:12.504
Sure, right, could you come up
with some other abstractions?

20
00:01:12.504 --> 00:01:14.026
Absolutely.

21
00:01:18.757 --> 00:01:22.475
&gt;&gt; Steve Kinney: Declaration return.

22
00:01:30.386 --> 00:01:32.075
&gt;&gt; Steve Kinney: define(node).

23
00:01:32.075 --> 00:01:36.298
All right, I think I'm gonna take it for

24
00:01:36.298 --> 00:01:39.908
a spin in my REPL cuz I'm worth it.

25
00:01:42.987 --> 00:01:44.014
&gt;&gt; Steve Kinney: Let's
see if made any mistakes.

26
00:01:50.710 --> 00:01:55.422
&gt;&gt; Steve Kinney: (define x 10), whoop,
cannot read property type of undefined.

27
00:01:55.422 --> 00:01:57.648
All right, I'm gonna take a second and
take a look at that, and

28
00:01:57.648 --> 00:01:58.663
I'll get right back to you.

29
00:01:58.663 --> 00:02:01.964
So I'm gonna take out that
console.log unless it breaks again.

30
00:02:12.835 --> 00:02:16.799
&gt;&gt; Steve Kinney: Cool, same way about
definitions in JavaScript work like that.

31
00:02:16.799 --> 00:02:17.496
You could have it.

32
00:02:17.496 --> 00:02:19.961
If you want to have it
return the value as well,

33
00:02:19.961 --> 00:02:22.692
you could just simply have it returned and
do that.

34
00:02:22.692 --> 00:02:27.887
I'm gonna go with it not, and
then it'll say add x and 10 is 12.

35
00:02:27.887 --> 00:02:30.492
Right, I now have variable declarations.

36
00:02:30.492 --> 00:02:34.725
That was adding a, guess,
probably an important language feature.

37
00:02:34.725 --> 00:02:38.367
Not that bad, right?

38
00:02:38.367 --> 00:02:44.509
And again, we chose a simple language
with a very kind of easy syntax for that.

39
00:02:44.509 --> 00:02:48.316
But I still think it is super interesting
to be able to have that in place.

40
00:02:48.316 --> 00:02:49.599
All right sweet.

41
00:02:52.318 --> 00:02:53.136
&gt;&gt; Speaker 2: So what was the fix?

42
00:02:53.136 --> 00:02:54.504
&gt;&gt; Steve Kinney: What's up?

43
00:02:54.504 --> 00:02:55.699
&gt;&gt; Speaker 2: Where did you?

44
00:02:55.699 --> 00:02:58.667
&gt;&gt; Steve Kinney: The fix was when I
wrote that transformation, right,

45
00:02:58.667 --> 00:03:03.004
originally this was a function that took
the node and then returned it back out.

46
00:03:03.004 --> 00:03:08.005
Here, this is supposed to pass
everything along through the pipeline.

47
00:03:08.005 --> 00:03:13.230
And because I didn't return node,
it returned undefined to evaluate.

48
00:03:13.230 --> 00:03:16.038
Evaluate tried to find type on undefined.

49
00:03:16.038 --> 00:03:18.211
Everything went poorly.

