WEBVTT

1
00:00:00.167 --> 00:00:01.971
&gt;&gt; Speaker 1: Now we have
the ability to evaluate.

2
00:00:01.971 --> 00:00:06.026
Now, this is effectively gonna follow
the same rules as when we parsed our tree.

3
00:00:06.026 --> 00:00:10.499
Like when we took the tokens that were, we
took the tokens which were one flat array,

4
00:00:10.499 --> 00:00:13.726
we went through the tokens,
we looked for our parentheses.

5
00:00:13.726 --> 00:00:20.072
Our parentheses dictated where
our nesting was in our logic.

6
00:00:20.072 --> 00:00:23.976
Then we iterated through that
nested set of arrays and

7
00:00:23.976 --> 00:00:28.487
created either the edges of our tree,
which are the numbers,

8
00:00:28.487 --> 00:00:33.516
the literals, and the strings, or
we came across one of our arrays,

9
00:00:33.516 --> 00:00:37.531
which we had to then recurse down and
do the same thing.

10
00:00:37.531 --> 00:00:42.030
So with evaluation it's one
more turn at the same thing,

11
00:00:42.030 --> 00:00:45.028
which is start at the top of the tree and

12
00:00:45.028 --> 00:00:50.011
start walking down it until you
get to the actual ends, right?

13
00:00:50.011 --> 00:00:52.070
And start doing the things
that get us there.

14
00:00:52.070 --> 00:00:54.332
We saw we have some
functions built into add.

15
00:00:54.332 --> 00:00:56.672
We saw we had some functions
built into subtract.

16
00:00:56.672 --> 00:00:59.344
So on and so forth, right?

17
00:00:59.344 --> 00:01:02.950
We can add additional
things in there as well.

18
00:01:02.950 --> 00:01:07.413
But let's actually kind of look at the
tests to kinda see what the kind of first

19
00:01:07.413 --> 00:01:09.417
version of the iteration is here.

20
00:01:09.417 --> 00:01:14.621
And so it's not dissimilar from when
we created our abstract syntax tree,

21
00:01:14.621 --> 00:01:19.493
which is, hey, if this evaluate
function gets to the end of the tree,

22
00:01:19.493 --> 00:01:23.620
gets to that leaf node and
like there's nothing left to do,

23
00:01:23.620 --> 00:01:27.199
no more left to descend,
all right, we're done.

24
00:01:27.199 --> 00:01:35.141
If you get to a node that's a numeric
literal of 2, you're at 2, right?

25
00:01:35.141 --> 00:01:39.071
If you get to a string,
you're at a string, right.

26
00:01:39.071 --> 00:01:43.272
Theoretically it's not valid to get
to just a random floating identifier.

27
00:01:43.272 --> 00:01:47.389
So we don't have that case covered.

28
00:01:47.389 --> 00:01:51.716
But like eventually, when I get to the
point where it's like, I come to an add

29
00:01:51.716 --> 00:01:56.597
statement and I see that it's adding 2 and
3, well, that should give me 5, right.

30
00:01:56.597 --> 00:02:00.362
Otherwise this programming language
is junk, and that's not cool.

31
00:02:00.362 --> 00:02:05.257
So let's begin to start like,
at least these base cases of if this

32
00:02:05.257 --> 00:02:10.599
evaluate function just gets a lone
literal, we're done, all right?

33
00:02:10.599 --> 00:02:12.459
So I'm going to un-skip those two.

34
00:02:21.271 --> 00:02:24.253
&gt;&gt; Speaker 1: We'll go into evaluate and
we're gonna say all right,

35
00:02:24.253 --> 00:02:25.781
you're going to get a node.

36
00:02:25.781 --> 00:02:27.512
Now, that node could have child nodes.

37
00:02:27.512 --> 00:02:28.520
We know that.

38
00:02:28.520 --> 00:02:31.267
There's a lot of actual things
that can happen as language grows.

39
00:02:31.267 --> 00:02:35.639
It could be a lambda,
it could be variable declaration.

40
00:02:35.639 --> 00:02:37.499
It could be an if statement,
eventually, right?

41
00:02:37.499 --> 00:02:41.019
We won't get to all of those today, but
you can begin to kind of expand this to

42
00:02:41.019 --> 00:02:44.099
all the different cases that it
comes across and how it branches and

43
00:02:44.099 --> 00:02:45.268
does some of that logic.

44
00:02:45.268 --> 00:02:49.299
And we chose a relatively
simple style of language, but

45
00:02:49.299 --> 00:02:54.383
clearly there's like a generator
function with an async await in it.

46
00:02:54.383 --> 00:02:58.275
This can grow to the scale
of your ambition.

47
00:02:58.275 --> 00:03:05.059
So should we come across a given node,
well, this is gonna be pretty easy.

48
00:03:05.059 --> 00:03:07.925
In that case, we will say,
all right, if the,

49
00:03:07.925 --> 00:03:10.525
we'll do this kinda as our fallback case.

50
00:03:10.525 --> 00:03:12.754
If the node has a value, right?

51
00:03:12.754 --> 00:03:15.026
We know that identifiers
didn't have a value.

52
00:03:15.026 --> 00:03:17.002
We know that our call
expressions don't have a value.

53
00:03:17.002 --> 00:03:22.214
We know that things have values
are strings and numbers, right?

54
00:03:22.214 --> 00:03:28.294
So this will be our kind of like,
if all else goes wrong, we'll say return,

55
00:03:28.294 --> 00:03:34.100
not really goes wrong, but
if all falls through, return node.value.

56
00:03:34.100 --> 00:03:35.072
Let's take that for a spin.

57
00:03:45.949 --> 00:03:48.172
&gt;&gt; Speaker 1: Cool, they pass.

58
00:03:48.172 --> 00:03:52.150
I can tell you the next ones
aren't going to actually happen.

59
00:03:52.150 --> 00:03:55.012
But we'll have some cool ones,
we're gonna actually have to add some

60
00:03:55.012 --> 00:03:57.016
functionality to our
standard library as well.

61
00:03:57.016 --> 00:04:01.731
All right, so what happens if we come
across one of these call expressions?

62
00:04:01.731 --> 00:04:05.257
Well, call expression has
clearly got some branches to it.

63
00:04:05.257 --> 00:04:08.329
A call expression could have
more call expressions in it.

64
00:04:08.329 --> 00:04:11.406
We saw we can nest functions indefinitely,
right?

65
00:04:11.406 --> 00:04:15.343
So when we come across one of those,
we're like, all right,

66
00:04:15.343 --> 00:04:18.996
I need to figure out how to
actually apply this function.

67
00:04:18.996 --> 00:04:23.399
And we are going to rely on
JavaScript to help us out with that.

68
00:04:23.399 --> 00:04:28.842
And so what we'll do is, we'll say,
all right, if the node.type,

69
00:04:28.842 --> 00:04:33.014
and this is like why we
annotated all of them, right.

70
00:04:33.014 --> 00:04:38.183
If we want to get all, if we want to be
really strict, we would probably just say,

71
00:04:38.183 --> 00:04:42.073
if the node is a numeric literal or
a string literal, right?

72
00:04:42.073 --> 00:04:44.469
We're kind of using the fact that
our language is still very small and

73
00:04:44.469 --> 00:04:46.677
taking advantage of those
are the only two things with values.

74
00:04:46.677 --> 00:04:50.149
But we might have to get a little
bit more specific over time.

75
00:04:50.149 --> 00:04:54.572
So if the node type,
&gt;&gt; Speaker 1: And

76
00:04:54.572 --> 00:04:57.955
like I kinda mentioned before, this is one
of those things where I might very well

77
00:04:57.955 --> 00:05:01.388
make some helpers, like is call expression
begin to abstract some of this out, so

78
00:05:01.388 --> 00:05:02.909
I'm not typing all over the place.

79
00:05:02.909 --> 00:05:07.854
Because all of a sudden, my evaluator's
not gonna work if I make a typo,

80
00:05:07.854 --> 00:05:10.379
and I've already made a typo today.

81
00:05:10.379 --> 00:05:13.775
But when I keep it in there for
like the clarity.

82
00:05:13.775 --> 00:05:17.373
So if this is a node type
of call expression, well,

83
00:05:17.373 --> 00:05:19.474
then we need to do something.

84
00:05:19.474 --> 00:05:23.794
We're actually gonna go ahead and
we're gonna write a function called apply.

85
00:05:23.794 --> 00:05:27.292
And that's going to take it,
it's gonna look at, all right,

86
00:05:27.292 --> 00:05:31.266
we had that environment, which is
a hash table of a bunch of functions.

87
00:05:31.266 --> 00:05:32.278
We have the name of a function.

88
00:05:32.278 --> 00:05:38.625
Hey, go get me the JavaScript
function that we're gonna use here.

89
00:05:38.625 --> 00:05:43.064
Get me the arguments,
put the arguments into the function.

90
00:05:43.064 --> 00:05:46.861
[LAUGH] And
then replace it with the result.

91
00:05:46.861 --> 00:05:48.523
So we'll try this out.

92
00:05:48.523 --> 00:05:52.694
Let's go ahead and say,

93
00:05:52.694 --> 00:05:58.063
we'll say get our const apply.

94
00:05:58.063 --> 00:05:59.850
And that's gonna take the node.

95
00:05:59.850 --> 00:06:02.400
And we're also gonna do
some error checking here.

96
00:06:02.400 --> 00:06:07.417
Because one of the problems
in our language is that like,

97
00:06:07.417 --> 00:06:12.549
JavaScript errors aren't super helpful for
us, right?

98
00:06:12.549 --> 00:06:13.799
When in doubt, right?

99
00:06:13.799 --> 00:06:17.780
Like, if we had forgotten to throw
an error, like, when we were doing

100
00:06:17.780 --> 00:06:22.099
our tokenization, JavaScript would
have eventually thrown an error, but

101
00:06:22.099 --> 00:06:24.680
it would have been where
JavaScript blew up.

102
00:06:24.680 --> 00:06:28.565
Right, we wanna know where the drop
bear user made a boo boo, right?

103
00:06:28.565 --> 00:06:30.872
Our stack traces right now
will still be in JavaScript.

104
00:06:30.872 --> 00:06:33.868
You can do fun stuff with source maps and
stuff like that.

105
00:06:33.868 --> 00:06:37.385
But if we at least say
helpfully like what went wrong,

106
00:06:37.385 --> 00:06:39.975
that's like a really good first step.

107
00:06:39.975 --> 00:06:42.237
So we'll go ahead and we'll say node.

108
00:06:42.237 --> 00:06:45.246
And now we know that if we look
at the call expression AST,

109
00:06:45.246 --> 00:06:48.337
I think if I go back into the tests,
we can actually see it.

110
00:06:50.680 --> 00:06:54.542
&gt;&gt; Speaker 1: It's got a name and it's got
the arguments that have values, right?

111
00:06:54.542 --> 00:06:57.327
So I can kinda look it up in a hash table.

112
00:06:57.327 --> 00:07:00.396
I can give it the values and
I will get the result, right?

113
00:07:00.396 --> 00:07:01.289
I'll get the,

114
00:07:01.289 --> 00:07:05.769
like pure value that we were getting
before out of just the regular literals.

115
00:07:05.769 --> 00:07:07.588
So I can go in here, I can say.

116
00:07:10.291 --> 00:07:12.431
&gt;&gt; Speaker 1: We'll say that the function,

117
00:07:12.431 --> 00:07:16.144
I can't use function cuz I
am in JavaScript, right?

118
00:07:16.144 --> 00:07:19.745
Will be go look up at the environment
which had the add, the subtract,

119
00:07:19.745 --> 00:07:22.078
the multiply, the module, all that stuff.

120
00:07:22.078 --> 00:07:28.377
We'll say go look at that and we'll say
go get me the key of the node name.

121
00:07:28.377 --> 00:07:32.376
And then the args we're going to
have to do something with right?

122
00:07:32.376 --> 00:07:34.922
Because what can the arguments be?

123
00:07:34.922 --> 00:07:35.511
Does anyone remember?

124
00:07:35.511 --> 00:07:37.568
Are they always values?

125
00:07:37.568 --> 00:07:38.171
&gt;&gt; Speaker 2: No.

126
00:07:38.171 --> 00:07:38.860
&gt;&gt; Speaker 1: No.

127
00:07:38.860 --> 00:07:40.115
&gt;&gt; Speaker 2: Could be strings.

128
00:07:40.115 --> 00:07:40.882
&gt;&gt; Speaker 1: They could be strings.

129
00:07:40.882 --> 00:07:42.012
What else could they be?

130
00:07:42.012 --> 00:07:42.618
&gt;&gt; Speaker 2: Functions.

131
00:07:42.618 --> 00:07:44.110
&gt;&gt; Speaker 1: Other functions, right?

132
00:07:44.110 --> 00:07:46.817
So that's not gonna work.

133
00:07:46.817 --> 00:07:50.294
So we are going to have to check to see
like, all right, if the argument is

134
00:07:50.294 --> 00:07:54.178
a function, go down another level and
keep keep looking until you get me values.

135
00:07:54.178 --> 00:07:55.632
Keep going until you get a value.

136
00:07:55.632 --> 00:07:59.820
So we'll keep passing stuff to evaluate
until it falls down to this last one right

137
00:07:59.820 --> 00:08:00.632
here, right.

138
00:08:00.632 --> 00:08:04.216
Because like, hey, if you're an
expression, go down, keep going down until

139
00:08:04.216 --> 00:08:07.653
we're getting values the whole way up and
then we'll have that back for us.

140
00:08:07.653 --> 00:08:10.295
So what we'll say is that the const arg,

141
00:08:10.295 --> 00:08:15.291
just cuz I can't use arguments either,
is because JavaScript gets angry.

142
00:08:15.291 --> 00:08:17.950
It's a reserved word.

143
00:08:17.950 --> 00:08:20.435
You can't have a variable called args.

144
00:08:20.435 --> 00:08:23.355
So node.arguments.map.

145
00:08:23.355 --> 00:08:26.505
So go through each one of those
arguments and pass them into evaluate.

146
00:08:26.505 --> 00:08:29.445
This is very similar for
what we did for the AST, right?

147
00:08:29.445 --> 00:08:33.769
We said, all right, I want to go ahead and
parse, you know each array,

148
00:08:33.769 --> 00:08:38.456
but then as we go through everything
that wasn't the first, go parse those,

149
00:08:38.456 --> 00:08:43.143
go parse those until you get something
that falls through to just the value and

150
00:08:43.143 --> 00:08:44.753
comes all the way back up.

151
00:08:44.753 --> 00:08:45.833
All right, so we'll do that.

152
00:08:45.833 --> 00:08:48.050
Maybe I'll even spell evaluate right?

153
00:08:48.050 --> 00:08:49.033
Who knows.

154
00:08:49.033 --> 00:08:51.570
So we have that in place.

155
00:08:51.570 --> 00:08:55.541
And then there is a chance, like let's
say they gave us addd with 3 D's, or

156
00:08:55.541 --> 00:08:58.230
they gave us some function we don't have,
right.

157
00:08:58.230 --> 00:09:01.546
If we look that up in that object,
in that environment object,

158
00:09:01.546 --> 00:09:03.749
it's going to come back with undefined.

159
00:09:03.749 --> 00:09:09.085
And if you try to call it, you're going to
effectively, like modern day JavaScript,

160
00:09:09.085 --> 00:09:14.150
you won't get undefined is not an error,
it'll say fn is not a function, right?

161
00:09:14.150 --> 00:09:17.336
That's super great as our
programming language grows,

162
00:09:17.336 --> 00:09:19.669
like we don't even know what got called.

163
00:09:19.669 --> 00:09:23.850
So we want we have to step in and
throw a better error in our language.

164
00:09:23.850 --> 00:09:29.322
So what we'll say is if you got something,
like we could say like if it's undefined,

165
00:09:29.322 --> 00:09:32.060
but I'm gonna be a little bit more strict.

166
00:09:32.060 --> 00:09:38.590
If the type of fn is not function,

167
00:09:42.860 --> 00:09:45.080
&gt;&gt; Speaker 1: Throw a new TypeError.

168
00:09:45.080 --> 00:09:54.290
And we'll say that node.name,
&gt;&gt; Speaker 1: Is not a function.

169
00:09:54.290 --> 00:09:59.724
So at least we know what we misspelled,
we can go look for it, right?

170
00:09:59.724 --> 00:10:02.394
So we'll have that in place.

171
00:10:02.394 --> 00:10:04.694
But if it is in there, right?

172
00:10:04.694 --> 00:10:07.494
We can just say, and you have a few
choices that you can do this.

173
00:10:07.494 --> 00:10:15.084
You can do fn,
&gt;&gt; Speaker 1: And all the args.

174
00:10:15.084 --> 00:10:22.663
Or if you wanna use ES6,
you can do fn just spread out the args.

175
00:10:22.663 --> 00:10:28.489
Right, so if we found a function with that
identifier, like add, subtract, multiply,

176
00:10:28.489 --> 00:10:33.547
what have you, right, and it's in there,
[LAUGH] take all those arguments and

177
00:10:33.547 --> 00:10:38.302
pass them in and then eventually those
will become values that will have,

178
00:10:38.302 --> 00:10:40.549
we can actually use them, right?

179
00:10:40.549 --> 00:10:45.635
Because if it was another function
that was the first argument,

180
00:10:45.635 --> 00:10:47.810
then we have to keep going.

181
00:10:47.810 --> 00:10:48.327
Because like,

182
00:10:48.327 --> 00:10:50.963
eventually it'll keep getting those
until we actually get the raw value out.

183
00:10:50.963 --> 00:10:54.903
It'll traverse down that tree for us.

184
00:10:54.903 --> 00:10:59.249
All right, and the cool thing about
this is that it will effectively,

185
00:10:59.249 --> 00:11:03.669
it will keep going [INAUDIBLE] our
next two steps should pass unless I've

186
00:11:03.669 --> 00:11:07.444
made some terrible mistake,
but we'll find out together.

187
00:11:07.444 --> 00:11:11.571
So the ability to parse a single
expression and the ability to parse

188
00:11:11.571 --> 00:11:15.713
nested expressions, both of these
should totally work for free.

189
00:11:29.403 --> 00:11:31.054
&gt;&gt; Speaker 1: Great,
like we get now effectively,

190
00:11:31.054 --> 00:11:33.581
we don't have a way to actually
like us to get our hands on,

191
00:11:33.581 --> 00:11:36.952
we're still running this test suite,
which we're definitely gonna need.

192
00:11:36.952 --> 00:11:43.033
But we have a way to like now take some
code that we've written in drop bear and

193
00:11:43.033 --> 00:11:45.802
turn it into some values, right?

194
00:11:45.802 --> 00:11:50.206
You know, a thing that would make this
language more powerful now is beginning to

195
00:11:50.206 --> 00:11:51.842
add more and more functions.

196
00:11:51.842 --> 00:11:54.991
Like just having math functions,
not great, right?

197
00:11:54.991 --> 00:11:56.671
We don't have the ability
define variables yet.

198
00:11:56.671 --> 00:12:00.032
So it's pretty deterministic
at this point.

199
00:12:00.032 --> 00:12:03.202
So there are other things that
we can absolutely add to it.

200
00:12:03.202 --> 00:12:06.112
But if we were building a templating
language at this point,

201
00:12:06.112 --> 00:12:08.801
we'd be getting actually
dangerously close, right?

202
00:12:08.801 --> 00:12:12.376
Because we could, you know, theoretically
from our command line or whatever,

203
00:12:12.376 --> 00:12:16.161
we could pass in, like, all right, here's
the data here's the templating, go and

204
00:12:16.161 --> 00:12:17.863
do all of your magic and figure it out.

205
00:12:17.863 --> 00:12:20.224
We can like have like,
effectively the ability to iterate.

206
00:12:20.224 --> 00:12:25.854
We can implement more and more in that
standard library and get it for free.

207
00:12:25.854 --> 00:12:27.363
But we have the ability to call functions.

208
00:12:27.363 --> 00:12:28.474
You have a question?

209
00:12:28.474 --> 00:12:30.774
&gt;&gt; Speaker 2: Earlier you
mentioned the visitor pattern.

210
00:12:30.774 --> 00:12:31.433
&gt;&gt; Speaker 1: Mm-hm.

211
00:12:31.433 --> 00:12:36.727
&gt;&gt; Speaker 2: And it seems like we're
almost tied to that for this task,

212
00:12:36.727 --> 00:12:41.277
that we need some way of
doing a one to N recursion.

213
00:12:41.277 --> 00:12:46.058
And that is essentially and
in evaluating each y i.

214
00:12:46.058 --> 00:12:50.028
So we would essentially be implementing
some type of visitor observer pattern.

215
00:12:50.028 --> 00:12:53.617
&gt;&gt; Speaker 1: Yeah, with the visitor
pattern where like, we have the traversal

216
00:12:53.617 --> 00:12:58.550
separate from what we do right, here we
are kind of evaluating it along the way.

217
00:12:58.550 --> 00:13:02.781
But like yeah, like for our HTML
parsers and our like manipulations,

218
00:13:02.781 --> 00:13:07.000
we go from HTML into a set of props
that we use in our application.

219
00:13:07.000 --> 00:13:10.624
Like we effectively just have
the ability to traverse and

220
00:13:10.624 --> 00:13:13.805
then the things that should
happen along the way.

221
00:13:13.805 --> 00:13:16.984
With that one,
it's a little harder for us,

222
00:13:16.984 --> 00:13:21.348
because the DOM isn't the greatest
data structure for that.

223
00:13:21.348 --> 00:13:23.394
So we still, our traveral,

224
00:13:23.394 --> 00:13:29.296
like the functions that we wrote tend to
look maybe like jQuery inspired, right.

225
00:13:29.296 --> 00:13:33.822
Cuz we are looking for
effectively a thing with a given ID

226
00:13:33.822 --> 00:13:37.877
a given classname, right,
or a given data role.

227
00:13:37.877 --> 00:13:39.937
Because those are like how
we have to find things.

228
00:13:39.937 --> 00:13:45.380
So ours is a little copied more off of
the DOM in the parser that we're using.

229
00:13:45.380 --> 00:13:49.850
But like when we actually tried to go
to transform this into JavaScript,

230
00:13:49.850 --> 00:13:52.930
we'll actually use the full
visitor pattern, which is cool.

