WEBVTT

1
00:00:00.000 --> 00:00:03.668
&gt;&gt; Steve Kinney: I get that math
pi in there, it'd be cool if I

2
00:00:03.668 --> 00:00:08.641
could grab that out,
I would also make this next test pass.

3
00:00:08.641 --> 00:00:13.121
So we have the ability to call functions,
but what about identifiers?

4
00:00:13.121 --> 00:00:17.927
We just get an identifier, we can't do
anything with it, it doesn't have a value,

5
00:00:17.927 --> 00:00:20.922
right but
it can be associated with a value, right?

6
00:00:20.922 --> 00:00:23.395
And eventually we can define
new identifiers, right?

7
00:00:23.395 --> 00:00:26.252
So cool pi is in there right now, but

8
00:00:26.252 --> 00:00:30.837
we can say like,
define x is like 42,000, right?

9
00:00:30.837 --> 00:00:32.660
And we can add that to the environment,

10
00:00:32.660 --> 00:00:35.915
like be able to add more stuff to there
and be able to look it up later, so

11
00:00:35.915 --> 00:00:39.916
we have something in there, let's be able
to look at, let's learn how to look it up.

12
00:00:39.916 --> 00:00:44.514
And then later on, we'll be able to
add some stuff in there as well.

13
00:00:44.514 --> 00:00:48.200
But if there's any functions that you
wanna put, [LAUGH] we're gonna put

14
00:00:48.200 --> 00:00:51.415
the the ability at the max number
of an array just as an example.

15
00:00:51.415 --> 00:00:55.299
But you can add as many things
that object as you want and

16
00:00:55.299 --> 00:00:58.516
have it available it for
you in the language.

17
00:00:58.516 --> 00:01:02.804
So all right,
we kind of danced around it a little bit,

18
00:01:02.804 --> 00:01:08.308
it's pretty straightforward how
we're going to get something out,

19
00:01:08.308 --> 00:01:14.391
we're in the evaluate function,
we are looking at whatever node we're on.

20
00:01:14.391 --> 00:01:18.916
Hey, if you are a call
expression go ahead, look up,

21
00:01:18.916 --> 00:01:23.944
define us a call expression,
make sure it's a function and

22
00:01:23.944 --> 00:01:29.191
call it, what do you think looking for
an identifier is like?

23
00:01:32.295 --> 00:01:34.768
&gt;&gt; Steve Kinney: It's kinda like
a simple subset of that, right?

24
00:01:34.768 --> 00:01:39.553
We can see that the node is an identifier,
neat go ahead,

25
00:01:39.553 --> 00:01:43.740
look it up in that table and
get me back the result,

26
00:01:43.740 --> 00:01:49.153
it's almost like less of actually
calling a function, right?

27
00:01:49.153 --> 00:01:51.430
So let's kind of talk through it together.

28
00:01:51.430 --> 00:01:53.906
So we definitely know that
we're gonna a check here,

29
00:01:53.906 --> 00:01:55.843
what kind of node type
am I gonna look for?

30
00:01:55.843 --> 00:01:56.482
&gt;&gt; Speaker 2: Identifier.

31
00:01:56.482 --> 00:02:01.526
&gt;&gt; Steve Kinney: Identifier, yep,
so we'll say if the node.type

32
00:02:01.526 --> 00:02:05.044
is == 'identifier' and again,

33
00:02:05.044 --> 00:02:10.109
I might use a helper for
this, go ahead and return.

34
00:02:10.109 --> 00:02:13.685
Well actually,
I could write it in this function, but

35
00:02:13.685 --> 00:02:16.340
I don't want to cuz I care about myself.

36
00:02:16.340 --> 00:02:21.803
So what we'll say is, we'll say let's get
identifier, which we have not written yet.

37
00:02:23.324 --> 00:02:25.322
&gt;&gt; Steve Kinney: With the node, right?

38
00:02:25.322 --> 00:02:28.786
All right, so
what does getIdentifier need to do?

39
00:02:28.786 --> 00:02:32.827
It's not dissimilar from what's happening
here, it's actually just less, right,

40
00:02:32.827 --> 00:02:33.877
what needs to happen?

41
00:02:36.478 --> 00:02:38.194
&gt;&gt; Speaker 3: Just gonna take
the name from the node and

42
00:02:38.194 --> 00:02:39.466
get it from the environment.

43
00:02:39.466 --> 00:02:41.094
&gt;&gt; Steve Kinney: Yeah, yeah.

44
00:02:44.361 --> 00:02:45.901
&gt;&gt; Steve Kinney: So
let's get identifier given the node,

45
00:02:48.436 --> 00:02:51.838
&gt;&gt; Steve Kinney: If it's in there, right?

46
00:02:51.838 --> 00:02:59.307
Cuz we could just do it and then when they
get undefined and they're very worried or

47
00:02:59.307 --> 00:03:05.708
scared [LAUGH] cuz we can be better
than a certain programing language.

48
00:03:05.708 --> 00:03:09.636
Because also it's like if you trying and
reference a global that will also blow up

49
00:03:09.636 --> 00:03:11.961
in JavaScript,
that will be nice JavaScript.

50
00:03:11.961 --> 00:03:15.643
So if the environment
node name is in there,

51
00:03:15.643 --> 00:03:22.524
return
&gt;&gt; Steve Kinney: Environment [node.name].

52
00:03:22.524 --> 00:03:25.168
So before we made the identifier
you're why does it have a name?

53
00:03:25.168 --> 00:03:29.234
Cuz it's actually more
similar to our expressions,

54
00:03:29.234 --> 00:03:32.045
right than it is to a actual literal.

55
00:03:32.045 --> 00:03:34.769
But if it's not in there,
what should we do?

56
00:03:37.208 --> 00:03:37.722
&gt;&gt; Speaker 4: Throw an error.

57
00:03:37.722 --> 00:03:39.244
&gt;&gt; Steve Kinney: Throw an error,
all right,

58
00:03:39.244 --> 00:03:43.302
one of the fun things about doing all this
is we get the fun throw fun new errors

59
00:03:43.302 --> 00:03:45.350
that we don't normally get to throw.

60
00:03:45.350 --> 00:03:50.890
Let's throw a reference error
yeah [LAUGH] we'll throw

61
00:03:50.890 --> 00:03:57.043
the reference error and
we'll say no.name is not defined.

62
00:03:57.043 --> 00:04:00.949
I, again, have stolen my
nomenclature from JavaScript, but

63
00:04:00.949 --> 00:04:03.760
you could put whatever
you want that you can.

64
00:04:03.760 --> 00:04:07.480
If you wanna have your language
have some attitude, that's fine,

65
00:04:07.480 --> 00:04:10.547
if you only language be very polite,
that's fine too,

66
00:04:10.547 --> 00:04:14.352
you're in control, I'm just not
feeling particularly original.

67
00:04:14.352 --> 00:04:18.763
So now, if it's an identifier, or

68
00:04:18.763 --> 00:04:23.916
an indentifier, spelled it right.

69
00:04:23.916 --> 00:04:27.822
Sometimes when you look at words too much
you start to think they're spelled wrong,

70
00:04:27.822 --> 00:04:28.987
has anyone had that yet?

71
00:04:28.987 --> 00:04:33.562
Because we have a test suite, so
test suite can tell me if I spelled things

72
00:04:33.562 --> 00:04:38.069
wrong, I should unskip the test if
I wanna find out anything, though.

73
00:04:38.069 --> 00:04:41.444
That's the best part about skip test,
is they don't fail,

74
00:04:41.444 --> 00:04:44.563
the worst part about skip
test is that they don't fail.

75
00:04:44.563 --> 00:04:49.261
So we've got the pi in their, and so
I should say that hey, look up pi,

76
00:04:49.261 --> 00:04:55.021
cuz all we're doing is evaluating and our
evaluation function is handling the rest.

77
00:04:55.021 --> 00:05:00.255
This one, it's gonna be your mission
to do in a second, so I'll leave

78
00:05:00.255 --> 00:05:06.043
it there as a teaser, but let's make
sure the test suite passes, all right.

79
00:05:06.043 --> 00:05:09.956
Let's call it mind passes, all right,

80
00:05:09.956 --> 00:05:16.068
here's your mission,
it's trying to call the function max.

81
00:05:16.068 --> 00:05:21.674
Now I know you all were studying
the comprehensive standard library,

82
00:05:21.674 --> 00:05:24.246
but there's no maximum there.

83
00:05:24.246 --> 00:05:30.020
So, you need to add a max function in
there so that somebody can call Max and

84
00:05:30.020 --> 00:05:33.854
if you wanna be a hero,
you can also have min too.

85
00:05:33.854 --> 00:05:37.384
Honestly, you wanna change this test and
make it something else, that's cool too,

86
00:05:37.384 --> 00:05:40.914
but here's an example, we wanna be able to
add something to the standard library kind

87
00:05:40.914 --> 00:05:42.501
of like expand and grow our language.

88
00:05:42.501 --> 00:05:45.887
So your mission is to go
into a standard library,

89
00:05:45.887 --> 00:05:51.173
add a new method on that environment
object, right, that will effectively

90
00:05:51.173 --> 00:05:55.984
be able to be looked up, take all
the arguments and do all the things.

91
00:05:55.984 --> 00:05:59.899
Max is an interesting one cuz it already
has the ability to take a lot of arguments

92
00:05:59.899 --> 00:06:03.698
is actually a little bit easier, but
I'll leave that as an exercise to you and

93
00:06:03.698 --> 00:06:06.875
then we'll come back in a few minutes and
we'll do it together.

