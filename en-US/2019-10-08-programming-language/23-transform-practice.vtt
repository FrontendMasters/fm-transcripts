WEBVTT

1
00:00:00.000 --> 00:00:05.164
&gt;&gt; Steve Kinney: So my challenge to you is
with these we wrote the reversal together,

2
00:00:05.164 --> 00:00:11.068
great, but now we have to figure out
some of this transformation part right?

3
00:00:11.068 --> 00:00:15.493
And so my challenge for you is to
instead taking some of that written,

4
00:00:15.493 --> 00:00:17.109
to write your own right?

5
00:00:17.109 --> 00:00:24.430
You're gonna need to modify your language,
so I'm gonna take it for a spin.

6
00:00:24.430 --> 00:00:25.699
All right, so let's try it together.

7
00:00:28.787 --> 00:00:31.155
&gt;&gt; Steve Kinney: I'm not gonna give
this a particularly good test name.

8
00:00:39.146 --> 00:00:42.594
&gt;&gt; Steve Kinney: All right, anyone have
any strong opinions on what we should do?

9
00:00:42.594 --> 00:00:45.790
If not,
you're gonna leave me time [CROSSTALK].

10
00:00:45.790 --> 00:00:47.737
&gt;&gt; Speaker 2: I did an inverse function.

11
00:00:47.737 --> 00:00:48.787
&gt;&gt; Steve Kinney: Like
swapping the arguments?

12
00:00:48.787 --> 00:00:50.912
&gt;&gt; Speaker 2: Negative one exponent.

13
00:00:50.912 --> 00:00:51.926
You could swap.

14
00:00:51.926 --> 00:00:52.705
That's a good one.

15
00:00:52.705 --> 00:00:54.375
I like swapping.

16
00:00:54.375 --> 00:00:57.400
&gt;&gt; Steve Kinney: For
addition and multiplication,

17
00:00:57.400 --> 00:01:01.845
swapping the arguments
will do literally nothing.

18
00:01:01.845 --> 00:01:05.103
Yeah, we did the inverse.

19
00:01:05.103 --> 00:01:05.753
I'm trying to think.

20
00:01:05.753 --> 00:01:08.968
We could also change some strings.

21
00:01:08.968 --> 00:01:14.074
We could also even if we wanted to add
the ability to use a plus operator and

22
00:01:14.074 --> 00:01:16.096
swap that in for ad, right?

23
00:01:16.096 --> 00:01:16.974
Let's actually go with that.

24
00:01:16.974 --> 00:01:22.017
That one sounds fun, so
I'll grab this ast up here.

25
00:01:23.678 --> 00:01:26.092
&gt;&gt; Steve Kinney: And
now we wanna add the ability.

26
00:01:26.092 --> 00:01:30.635
Maybe it's in a new special syntax for
a language where they can use regular

27
00:01:30.635 --> 00:01:35.484
operators, which you can do in scheme and
closure and stuff along those lines.

28
00:01:35.484 --> 00:01:36.464
We can have that.

29
00:01:36.464 --> 00:01:41.503
We wanna actually transpile it to be
able to visit all the call express and

30
00:01:41.503 --> 00:01:44.159
see, okay if they're a name of plus.

31
00:01:44.159 --> 00:01:46.024
And we could extend this further, right?

32
00:01:46.024 --> 00:01:49.618
And so if you also wanna try
it out yourself as well and

33
00:01:49.618 --> 00:01:54.866
maybe swap out minus for subtract, so
on and so forth you can do that as well.

34
00:01:54.866 --> 00:02:00.119
Cool, so that means that we care
about every single call expression.

35
00:02:00.119 --> 00:02:01.656
We don't care about string laterals.

36
00:02:01.656 --> 00:02:05.301
I mean,
we could have one that upper cases.

37
00:02:05.301 --> 00:02:08.383
Again, it's more about practicing
the pattern than doing anything

38
00:02:08.383 --> 00:02:09.454
particularly useful.

39
00:02:09.454 --> 00:02:11.783
This point of our
languages is pretty small.

40
00:02:11.783 --> 00:02:15.816
[LAUGH] But we can take a look and
we can see that the visitor.

41
00:02:17.453 --> 00:02:19.430
&gt;&gt; Steve Kinney: Let's go ahead and
make one.

42
00:02:19.430 --> 00:02:22.641
We'll say,
&gt;&gt; Steve Kinney: Our

43
00:02:22.641 --> 00:02:25.916
visitor,
&gt;&gt; Steve Kinney: Cares about

44
00:02:25.916 --> 00:02:27.067
callExpressions.

45
00:02:29.420 --> 00:02:33.209
&gt;&gt; Steve Kinney: And
it's gonna do it on entering them.

46
00:02:37.008 --> 00:02:39.113
&gt;&gt; Steve Kinney: So
we care mostly about the node.

47
00:02:39.113 --> 00:02:43.565
We're not going up to the parents,
or anything along those lines, so

48
00:02:43.565 --> 00:02:45.538
we'll go ahead and go do that.

49
00:02:45.538 --> 00:02:53.257
And we'll say, if,
&gt;&gt; Steve Kinney: Node.name.

50
00:02:56.079 --> 00:02:57.123
&gt;&gt; Steve Kinney: Give
it a little plus sign.

51
00:03:01.283 --> 00:03:02.762
&gt;&gt; Steve Kinney: You know what?
It doesn't anymore.

52
00:03:05.862 --> 00:03:06.851
&gt;&gt; Steve Kinney: All right, and

53
00:03:06.851 --> 00:03:12.350
that's really effectively all we need to
do because we've put the pattern in place.

54
00:03:12.350 --> 00:03:16.162
You get to have this kind of declarative
way that you wanna go about doing it.

55
00:03:16.162 --> 00:03:19.730
And so we traverse the tree as
you can see up here, right?

56
00:03:19.730 --> 00:03:21.154
We've called it an ast.

57
00:03:21.154 --> 00:03:24.949
We can go in and visit it, and then it
should make all the changes for us,

58
00:03:24.949 --> 00:03:27.690
unless we've made some
kind of terrible mistake.

59
00:03:27.690 --> 00:03:28.604
So we'll traverse.

60
00:03:35.583 --> 00:03:40.389
&gt;&gt; Steve Kinney: Ast, with our visitor,
and I think you saw the very first test.

61
00:03:40.389 --> 00:03:42.467
You can have one that cares
about multiple nodes.

62
00:03:42.467 --> 00:03:50.033
It does a whole series of things,
absolutely, and then we'll expect.

63
00:03:50.033 --> 00:03:58.363
That ast.name,
&gt;&gt; Steve Kinney: To be add.

64
00:03:58.363 --> 00:03:59.984
All right, let's run that real quick.

65
00:03:59.984 --> 00:04:02.295
Make sure I don't mess
anything up because.

66
00:04:08.271 --> 00:04:10.260
&gt;&gt; Steve Kinney: That's not the right one.

67
00:04:10.260 --> 00:04:11.003
Why is everything?

68
00:04:11.003 --> 00:04:11.777
I don't want everything.

69
00:04:16.304 --> 00:04:18.020
&gt;&gt; Steve Kinney: Cool,
and so it works, right?

70
00:04:18.020 --> 00:04:19.216
We can now modify this.

71
00:04:19.216 --> 00:04:22.600
Now, we've danced around the fact
that one of the reasons you

72
00:04:22.600 --> 00:04:25.672
might wanna modify is to have
a compile target, right?

73
00:04:25.672 --> 00:04:30.168
These have been interesting and
fun cuz they made sense.

74
00:04:30.168 --> 00:04:33.261
But what if we wanted to go ahead and

75
00:04:33.261 --> 00:04:39.353
visit in a way that we could get it
ready to work with Babble, right?

76
00:04:39.353 --> 00:04:44.248
So one of the things that you can do
is look at what the Babble tree does.

77
00:04:44.248 --> 00:04:48.379
And if we get our ast to conform
to one of the Babble respects,

78
00:04:48.379 --> 00:04:52.105
then we're able to use Babble
as a generator, right?

79
00:04:52.105 --> 00:04:55.003
So let's go over to that ast explorer.

80
00:04:55.003 --> 00:04:59.332
And let's see what
an add 2 + 2 function or

81
00:04:59.332 --> 00:05:02.964
whatever looks like there, right?

82
00:05:04.837 --> 00:05:08.201
&gt;&gt; Steve Kinney: So let's say,
I'm gonna give myself some space here so

83
00:05:08.201 --> 00:05:11.653
I don't have that five-times
zoom in become a problem.

84
00:05:11.653 --> 00:05:17.068
Right, and so we know that our language
currently has concepts like this.

