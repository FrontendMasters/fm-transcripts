WEBVTT

1
00:00:00.000 --> 00:00:02.019
&gt;&gt; Steve Kinney: We'll talk
a little bit about generation.

2
00:00:02.019 --> 00:00:06.554
And generation is effectively
parsing in reverse, right?

3
00:00:06.554 --> 00:00:10.683
You have taken your syntax,
you've figured out all the tokens,

4
00:00:10.683 --> 00:00:15.263
you've figured out it's semantic
meaning and all of those things, and

5
00:00:15.263 --> 00:00:17.378
now you want to do a thing with it.

6
00:00:17.378 --> 00:00:21.939
We evaluated it, but if we wanted to turn
it into some other compile time target,

7
00:00:21.939 --> 00:00:23.831
this is where that would happen.

8
00:00:23.831 --> 00:00:26.442
And there's a lot of options,

9
00:00:26.442 --> 00:00:31.469
you can write your own low
level CPU instruction compiler.

10
00:00:31.469 --> 00:00:35.885
That's a great idea.

11
00:00:35.885 --> 00:00:38.626
You can use a compiler
framework like LLVM,

12
00:00:38.626 --> 00:00:43.606
which is even what like Rust target,
Swift, I think of Objective C these days.

13
00:00:43.606 --> 00:00:47.946
With LLVM you can actually target web
assembly with a target as well, right?

14
00:00:47.946 --> 00:00:52.688
And so you can create a web assembly
first language that you wanna use and

15
00:00:52.688 --> 00:00:55.622
target the JVM, the Java Virtual Machine.

16
00:00:55.622 --> 00:00:57.789
And you can transpile it, right?

17
00:00:57.789 --> 00:01:01.811
Which is gonna be the avenue that we
take cuz I think at this point is,

18
00:01:01.811 --> 00:01:05.916
I'm building this for the browser or
to do JavaScript stuff with it.

19
00:01:05.916 --> 00:01:10.468
It's heavily reliant on JavaScript as its
effective platform that it's running on.

20
00:01:10.468 --> 00:01:12.548
So that makes the most sense for us.

21
00:01:12.548 --> 00:01:17.101
Now, when you wanna target another
language, you have a few options, right?

22
00:01:17.101 --> 00:01:19.721
You can, our language is simple right now.

23
00:01:19.721 --> 00:01:24.319
If we wanted to, we could say, all right,
I got you an identifier, right?

24
00:01:24.319 --> 00:01:29.611
Read the identifier, then put a bracket,
then join all the arguments with

25
00:01:29.611 --> 00:01:34.744
a comma in between, then put the closing
brace and a semicolon, right?

26
00:01:34.744 --> 00:01:38.551
And as our language grows, we could
customize this and do more and more.

27
00:01:38.551 --> 00:01:41.482
And that's a fine option,
and maybe this language for

28
00:01:41.482 --> 00:01:43.850
you isn't targeting JavaScript, right?

29
00:01:43.850 --> 00:01:47.775
Maybe it's targeting, maybe you
are trying to output CPU or Bash, or

30
00:01:47.775 --> 00:01:49.332
something along those lines.

31
00:01:49.332 --> 00:01:52.473
Those are options and
things you can absolutely do.

32
00:01:52.473 --> 00:01:54.493
The other option that you have is,

33
00:01:54.493 --> 00:01:57.557
and we kinda talked about
this a little bit earlier,

34
00:01:57.557 --> 00:02:01.947
is that you can traverse that tree and
manipulate it, and get into the point

35
00:02:01.947 --> 00:02:06.215
where it becomes a tree that some other
generator that exists how to use.

36
00:02:06.215 --> 00:02:09.820
And so we saw that,
there is a specification,

37
00:02:09.820 --> 00:02:14.357
kind of that is an agreement
in the JavaScript community.

38
00:02:14.357 --> 00:02:16.541
If the tree meets these facts,

39
00:02:16.541 --> 00:02:22.268
most generators can then generate some
amount of the syntax based on it, right?

40
00:02:22.268 --> 00:02:26.390
And the Babel one is
actually pretty forgiving.

41
00:02:26.390 --> 00:02:32.701
We saw in the AST explorer,
a lot of the property,

42
00:02:32.701 --> 00:02:37.670
the Babel parses and makes available.

43
00:02:37.670 --> 00:02:42.267
And those are super useful for things like
source maps, and stuff along those lines.

44
00:02:42.267 --> 00:02:46.823
But, the actual amount that
you need to able to be truly

45
00:02:46.823 --> 00:02:49.607
generate stuff is a lot smaller.

46
00:02:49.607 --> 00:02:54.825
We also I mentioned earlier made
some like purposeful choices

47
00:02:54.825 --> 00:02:59.757
to kind of already be kind of
close here to the Babel specs.

48
00:02:59.757 --> 00:03:04.308
All we have to do is kind of
massage it the rest of the way, and

49
00:03:04.308 --> 00:03:06.413
kind of get a taste of that.

50
00:03:06.413 --> 00:03:13.332
So the Babel generator, right?

51
00:03:13.332 --> 00:03:16.395
And there's a lot of tools, Babel has not
only just Babel thing that we use, but

52
00:03:16.395 --> 00:03:18.590
it's got a lot of tools to it
through traversing trees and

53
00:03:18.590 --> 00:03:19.620
stuff along those lines.

54
00:03:19.620 --> 00:03:22.009
We're gonna write some
more about ourselves and

55
00:03:22.009 --> 00:03:23.591
rely too much on Babel for that.

56
00:03:23.591 --> 00:03:28.667
But the generator is super
useful because joining arrays

57
00:03:28.667 --> 00:03:33.541
of arguments with commas is fun,
but I'd rather not.

58
00:03:33.541 --> 00:03:35.890
It takes effectively three options.

59
00:03:35.890 --> 00:03:37.845
The code is kind of important for
the source maps.

60
00:03:37.845 --> 00:03:41.452
So really, as long as we give it
an abstract syntax tree, which guess what?

61
00:03:41.452 --> 00:03:43.549
We have, right?

62
00:03:43.549 --> 00:03:46.374
As long as we get an abstract syntax tree,

63
00:03:46.374 --> 00:03:49.946
then we should be able to
spit out that code, right?

64
00:03:49.946 --> 00:03:54.998
So, what we need to do, is we need
to figure out a way to transform

65
00:03:54.998 --> 00:04:01.280
our existing abstract syntax tree into
one that Babel can understand, right?

66
00:04:01.280 --> 00:04:03.119
We kind of a taste for that, right?

67
00:04:03.119 --> 00:04:07.571
And you can kind of like take it
to its natural conclusion as well.

