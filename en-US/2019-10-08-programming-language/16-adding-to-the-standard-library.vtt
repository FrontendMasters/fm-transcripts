WEBVTT

1
00:00:00.203 --> 00:00:04.496
&gt;&gt; Steve Kinney: It's our mission is to
get this test passing, and let's go and

2
00:00:04.496 --> 00:00:07.577
spoil the surprise for
ourselves right now.

3
00:00:19.682 --> 00:00:21.547
&gt;&gt; Steve Kinney: All right,
it doesn't, right?

4
00:00:21.547 --> 00:00:25.147
We can see our new error message though,
right?

5
00:00:25.147 --> 00:00:27.488
It gave us the right error message,
cuz we wrote it.

6
00:00:27.488 --> 00:00:29.574
If you wrote something either nicer or
meaner,

7
00:00:29.574 --> 00:00:31.771
you should see your custom
error message as well.

8
00:00:31.771 --> 00:00:33.118
You can put emoji in there.

9
00:00:33.118 --> 00:00:35.533
I think emoji should be an important
part of this programming language.

10
00:00:35.533 --> 00:00:38.834
I think that was a thing that
I definitely messed up on.

11
00:00:38.834 --> 00:00:41.422
Maybe a panda instead of add.

12
00:00:41.422 --> 00:00:44.669
But you can also alias things, so you
can just have things point other things.

13
00:00:44.669 --> 00:00:48.945
So let's go ahead and let's add it
in there, cuz it'll be real quick.

14
00:00:51.283 --> 00:00:53.619
&gt;&gt; Steve Kinney: We can go
into the standard library and

15
00:00:53.619 --> 00:00:56.035
we can basically add anything we want.

16
00:00:56.035 --> 00:00:58.229
We can say max.

17
00:00:58.229 --> 00:01:02.295
And max doesn't need to get wrapped in
that all because it takes a bunch of stuff

18
00:01:02.295 --> 00:01:03.106
as arguments.

19
00:01:03.106 --> 00:01:07.885
And so we'll have it take a bunch
of args and we'll go through it.

20
00:01:07.885 --> 00:01:12.537
We'll basically say,
&gt;&gt; Steve Kinney: That will return,

21
00:01:22.363 --> 00:01:22.948
&gt;&gt; Steve Kinney: That, and

22
00:01:22.948 --> 00:01:27.499
what's cool about this is because it's
your own language, you don't have to deal

23
00:01:27.499 --> 00:01:31.205
with the drama of the fact that
MooTools used flatten a decade ago and

24
00:01:31.205 --> 00:01:33.500
now JavaScript can't have it on arrays.

25
00:01:33.500 --> 00:01:35.949
You can put whatever methods
you want from any library.

26
00:01:35.949 --> 00:01:39.693
You can kinda compile your own
utility belt of methods and

27
00:01:39.693 --> 00:01:44.065
functions that you can start
whipping around code with real fast.

28
00:01:44.065 --> 00:01:45.790
So you see this test is passing.

29
00:01:45.790 --> 00:01:48.597
So let's review.

30
00:01:48.597 --> 00:01:53.672
We can now evaluate effectively anything
that we can type in this language,

31
00:01:53.672 --> 00:01:54.789
so far, right?

32
00:01:54.789 --> 00:01:57.149
I would love to stop
running tests all the time,

33
00:01:57.149 --> 00:01:59.046
to see my program language in action.

34
00:01:59.046 --> 00:02:01.947
So we have actually, now we can evaluate.

35
00:02:01.947 --> 00:02:05.532
We're able to read,
we're now able to evaluate.

36
00:02:05.532 --> 00:02:06.928
Printing's gonna be console log.

37
00:02:06.928 --> 00:02:09.322
Sorry to break that to you.

38
00:02:09.322 --> 00:02:11.419
And then we need the loop.

39
00:02:11.419 --> 00:02:14.403
And we have everything we need for
Repl and everything we need for

40
00:02:14.403 --> 00:02:18.105
a command line interface to actually just
take a given file in the file system and

41
00:02:18.105 --> 00:02:20.276
run it through drop air and
get the result out.

42
00:02:20.276 --> 00:02:22.616
So that's what we'll take on next.

