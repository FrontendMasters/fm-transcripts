WEBVTT

1
00:00:00.000 --> 00:00:05.168
&gt;&gt; Steve Kinney: So now that we
have a language that we can run,

2
00:00:05.168 --> 00:00:08.164
we should run it, right?

3
00:00:08.164 --> 00:00:11.712
It'd be cool to actually be
able to use our small but

4
00:00:11.712 --> 00:00:16.014
mighty language that we can kind
of grow and extend over time.

5
00:00:16.014 --> 00:00:19.622
So one things that we'll build is,
as we mentioned before,

6
00:00:19.622 --> 00:00:21.834
a repl, the read eval, print loop.

7
00:00:21.834 --> 00:00:26.900
And all it needs to do is
take a statement be able to

8
00:00:26.900 --> 00:00:32.091
basically tokenize it,
parse it, evaluate it,

9
00:00:32.091 --> 00:00:37.046
get to that final result and
then print it back.

10
00:00:37.046 --> 00:00:41.482
We can kind of use some node libraries
to make that easier for ourselves.

11
00:00:41.482 --> 00:00:46.356
We're gonna have this reple function here,
that we'll call.

12
00:00:46.356 --> 00:00:51.600
One of the things we are able to
do is we'll use this require.main,

13
00:00:51.600 --> 00:00:55.838
just like put a little welcome message and
kick it off.

14
00:00:55.838 --> 00:00:59.411
So this means we can require it and
it won't kick off the repl,

15
00:00:59.411 --> 00:01:03.554
which we'll use to add it to the command
line interface in a little bit.

16
00:01:03.554 --> 00:01:05.839
But we can also like so
we can both require it and

17
00:01:05.839 --> 00:01:08.841
call it from the command line
tool that we're going to make.

18
00:01:08.841 --> 00:01:11.387
We can also just call
it as it is right now.

19
00:01:11.387 --> 00:01:15.294
We're going to use some libraries for
this, but they're pretty simple.

20
00:01:15.294 --> 00:01:16.834
One of them is called chalk.

21
00:01:16.834 --> 00:01:22.163
All chalk does is it adds colors to your
terminal, which is incredibly important.

22
00:01:22.163 --> 00:01:27.291
And then we'll use prompt to be able to
get some feedback, so on and so forth.

23
00:01:27.291 --> 00:01:29.945
And we're gonna use very
little of these libraries.

24
00:01:29.945 --> 00:01:33.804
Prompt will let you have a series
of questions that you can ask.

25
00:01:33.804 --> 00:01:38.303
We really just want to show them a command
prompt, get whatever the last command was,

26
00:01:38.303 --> 00:01:39.811
run it through everything.

27
00:01:39.811 --> 00:01:44.818
I did make this parse and evaluate library
which has got a few just pipes here.

28
00:01:44.818 --> 00:01:47.703
So parse and evaluate, we'll go ahead and

29
00:01:47.703 --> 00:01:52.207
I'll run it through tokenize,
parse, transform and evaluate.

30
00:01:52.207 --> 00:01:55.852
Transform rather is
currently just a node app.

31
00:01:55.852 --> 00:01:57.211
Right, we should actually have it.

32
00:01:59.858 --> 00:02:02.354
&gt;&gt; Steve Kinney: Return node.

33
00:02:02.354 --> 00:02:06.058
Let's actually take that out for now.

34
00:02:10.756 --> 00:02:13.515
&gt;&gt; Steve Kinney: I don't need
to add entropy in there.

35
00:02:13.515 --> 00:02:16.746
All right, so we'll tokenize,
we'll parcel evaluate,

36
00:02:16.746 --> 00:02:19.730
we'll add transform back in
when we actually need it.

37
00:02:19.730 --> 00:02:23.240
And so this will kind of run
through is just to basically have,

38
00:02:23.240 --> 00:02:26.961
we could call those three functions
together, I don't want to.

39
00:02:26.961 --> 00:02:29.836
So we have that as a little helper for us.

40
00:02:29.836 --> 00:02:35.130
Great, so really what we need to do
is set up asking for the command

41
00:02:35.130 --> 00:02:41.220
which we can do with this inquire library
which will be our command prompt.

42
00:02:41.220 --> 00:02:44.093
And we'll say const ask questions.

43
00:02:49.736 --> 00:02:51.786
&gt;&gt; Steve Kinney: All right,
so once we have that,

44
00:02:51.786 --> 00:02:54.804
it takes an array of
questions that we pass to it.

45
00:02:54.804 --> 00:02:58.373
And it will return a promise that
will resolve when the questions

46
00:02:58.373 --> 00:02:59.706
are answered, right?

47
00:02:59.706 --> 00:03:03.734
And for us it'll be relatively quickly,
since we're gonna ask one question.

48
00:03:03.734 --> 00:03:06.308
Give us something to do.

49
00:03:06.308 --> 00:03:08.487
We're not going to collect all that many.

50
00:03:08.487 --> 00:03:15.605
So make our questions array and
the array check some objects.

51
00:03:15.605 --> 00:03:17.818
And one of the ones we'll add is,

52
00:03:17.818 --> 00:03:22.085
I'll take a name which is just some
key that we convert to it and so

53
00:03:22.085 --> 00:03:26.847
I'm going to just name it command in
all caps as kind of like a constant.

54
00:03:26.847 --> 00:03:27.752
What type is it?

55
00:03:27.752 --> 00:03:29.856
For us, it's an input.

56
00:03:29.856 --> 00:03:32.951
And then what is the message that it asks?

57
00:03:32.951 --> 00:03:35.627
We're just gonna have like
a little prompt in this case.

58
00:03:35.627 --> 00:03:38.315
So we'll say message and
we'll use chalk to make it,

59
00:03:38.315 --> 00:03:41.125
anyone have a favorite color,
otherwise it's gonna be

60
00:03:41.125 --> 00:03:48.217
blue
&gt;&gt; Steve Kinney: Background

61
00:03:48.217 --> 00:03:49.454
yellow leaves blue.

62
00:03:49.454 --> 00:03:54.898
We'll just say,
give us a little command prompt there.

63
00:03:54.898 --> 00:03:55.599
All right, great.

64
00:03:55.599 --> 00:03:57.439
So we have that in place, and

65
00:03:57.439 --> 00:04:03.984
then we'll just return,
&gt;&gt; Steve Kinney: The prompt

66
00:04:03.984 --> 00:04:05.479
with the questions.

67
00:04:05.479 --> 00:04:10.210
Now, I mentioned that we also
have to spell return correctly.

68
00:04:10.210 --> 00:04:12.562
We want everything to work.

69
00:04:12.562 --> 00:04:14.245
I mentioned that it returns a promise.

70
00:04:14.245 --> 00:04:15.801
And so you have two options here.

71
00:04:15.801 --> 00:04:19.772
You can go the promise chain route,
which a lot of cases I actually prefer but

72
00:04:19.772 --> 00:04:22.020
we'll make this an async await function.

73
00:04:22.020 --> 00:04:26.434
And we want to do is if we're not careful,
a JavaScript error here

74
00:04:26.434 --> 00:04:31.106
will like blow up the entire stack and
kick us out of the repl, right?

75
00:04:31.106 --> 00:04:34.544
And our syntax we know isn't perfect yet.

76
00:04:34.544 --> 00:04:36.721
We didn't check to make sure all
the braces were balanced and

77
00:04:36.721 --> 00:04:37.665
stuff along those lines.

78
00:04:37.665 --> 00:04:39.932
So, there are still things
that can go wrong so

79
00:04:39.932 --> 00:04:43.538
we'll make sure we do is are catching
any errors to make sure we don't blow

80
00:04:43.538 --> 00:04:47.284
everything up because it's kind of
annoying to get kicked out all the time.

81
00:04:47.284 --> 00:04:51.378
So we've got this async function, and

82
00:04:51.378 --> 00:04:54.983
we'll put it in a try catch block.

83
00:04:54.983 --> 00:04:59.780
And if some error does blow up,
we'll just console error.

84
00:04:59.780 --> 00:05:04.701
So we'll see it,
&gt;&gt; Steve Kinney: But

85
00:05:04.701 --> 00:05:08.667
we won't actually get kicked out with it,
awesome.

86
00:05:08.667 --> 00:05:13.381
So first of all, we need to go and get,
this is just a function we need to go and

87
00:05:13.381 --> 00:05:15.695
request whatever their command is.

88
00:05:25.620 --> 00:05:28.393
&gt;&gt; Steve Kinney: And
then we'll pull of that command.

89
00:05:28.393 --> 00:05:31.969
Basically we'll get back an object of
all the questions we asked just cuz we

90
00:05:31.969 --> 00:05:32.777
only asked one.

91
00:05:32.777 --> 00:05:33.736
So pull that off.

92
00:05:40.432 --> 00:05:44.408
&gt;&gt; Steve Kinney: We could
theoretically do it there as well.

93
00:05:44.408 --> 00:05:49.338
One thing we wanna do is make
sure that there is a command,

94
00:05:49.338 --> 00:05:52.329
right, or something to display.

95
00:05:56.488 --> 00:06:00.629
&gt;&gt; Steve Kinney: There's not
just a bunch of white space.

96
00:06:00.629 --> 00:06:01.643
We'll console, log it.

97
00:06:06.294 --> 00:06:08.436
&gt;&gt; Steve Kinney: Go with the yellow,
seems good.

98
00:06:08.436 --> 00:06:10.008
And so we've got that command.

99
00:06:10.008 --> 00:06:12.193
What we'll do is run with that parse and
evaluate function.

100
00:06:22.858 --> 00:06:26.359
&gt;&gt; Steve Kinney: And then remember we
said it's a read, eval, print, and

101
00:06:26.359 --> 00:06:27.795
then was the last part?

102
00:06:27.795 --> 00:06:29.174
It's a loop, right?

103
00:06:29.174 --> 00:06:31.047
So right now we're reading.

104
00:06:31.047 --> 00:06:34.678
We're parsing any [INAUDIBLE],
we're printing it, but

105
00:06:34.678 --> 00:06:36.651
then we need to just call it.

106
00:06:40.272 --> 00:06:42.829
&gt;&gt; Steve Kinney: And obviously,
you can make this more complicated.

107
00:06:42.829 --> 00:06:45.965
This is mostly just to kind of get
something quick and dirty up and running.

108
00:06:45.965 --> 00:06:49.640
We're just kind of doing the easiest
possible version of this for now.

109
00:06:49.640 --> 00:06:51.116
So we have that in place.

110
00:06:51.116 --> 00:06:55.248
Again, this part here, just to explain it,
if we're calling this file directly,

111
00:06:55.248 --> 00:06:58.286
it will show you this fun welcome
prompt and kick off the repl.

112
00:06:58.286 --> 00:07:00.838
If you require the file,
it wont immediately like,

113
00:07:00.838 --> 00:07:04.617
because this console will stop the world
and ask you for a thing to do, right?

114
00:07:04.617 --> 00:07:09.667
So if we want to use it anywhere else and
be able to call it programatically,

115
00:07:09.667 --> 00:07:14.176
that is going to be somewhat difficult
unless we wrap it like this.

116
00:07:14.176 --> 00:07:17.670
We effectively have everything in place.

117
00:07:17.670 --> 00:07:21.368
It is, if I'm not mistaken,
let's just double check.

118
00:07:21.368 --> 00:07:25.868
It's in our package JSON
as the kind of MPM start.

119
00:07:25.868 --> 00:07:27.145
So let's take it for a spin.

120
00:07:32.796 --> 00:07:33.739
&gt;&gt; Steve Kinney: Cool, and you can see

121
00:07:33.739 --> 00:07:36.269
Welcome to
the Dropbear Programming Language, right?

122
00:07:36.269 --> 00:07:39.633
You now have an interactive prompt that
you can use your programming language

123
00:07:39.633 --> 00:07:40.315
with, right?

124
00:07:40.315 --> 00:07:43.862
So we can try it out,
we can say, add 2 and 2.

125
00:07:43.862 --> 00:07:46.073
We get 4 back,
our programming language works.

126
00:07:46.073 --> 00:07:47.860
It does a thing, right?

127
00:07:47.860 --> 00:07:50.989
I know, it's like oddly satisfying, right?

128
00:07:50.989 --> 00:07:57.812
Yeah, sol lets say add 2 and 4 but
then we'll also like subtract.

129
00:08:01.687 --> 00:08:05.333
&gt;&gt; Steve Kinney: We don't have stuff like
auto complete and stuff along those lines.

130
00:08:05.333 --> 00:08:08.412
There's definitely ways to expand this.

131
00:08:08.412 --> 00:08:10.404
I will type out the 3 and 2.

132
00:08:11.750 --> 00:08:12.260
&gt;&gt; Steve Kinney: Cool.

133
00:08:14.530 --> 00:08:17.475
&gt;&gt; Steve Kinney: (add 2 4 and
then ((subtract 3 2)).

134
00:08:17.475 --> 00:08:18.247
Let me see that.

135
00:08:23.934 --> 00:08:25.128
&gt;&gt; Steve Kinney: All right, that works.

136
00:08:27.181 --> 00:08:29.498
&gt;&gt; Steve Kinney: Yes,
add two and four and one.

137
00:08:29.498 --> 00:08:32.790
My programming language works,
it's just my math that doesn't work.

138
00:08:32.790 --> 00:08:37.747
[LAUGH] That doesn't seem right.

139
00:08:37.747 --> 00:08:42.427
Great, that was really, I hope I inspired
confidence in all of you with that.

140
00:08:42.427 --> 00:08:46.865
Yeah, so
2 plus 4 plus 1 does in fact equal 7.

141
00:08:46.865 --> 00:08:50.076
Everything works, the world is okay.

142
00:08:50.076 --> 00:08:53.757
So yeah, now we have a repl for
our language

