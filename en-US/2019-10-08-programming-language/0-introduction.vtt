WEBVTT

1
00:00:00.000 --> 00:00:02.789
&gt;&gt; Steve Kinney: My name is Steve, we're
gonna talk a little bit about some of

2
00:00:02.789 --> 00:00:04.933
the tools around building
your own language.

3
00:00:04.933 --> 00:00:07.551
We'll talk about it from
a few different angles today.

4
00:00:07.551 --> 00:00:11.863
The repository we're gonna be
using today is right here,

5
00:00:11.863 --> 00:00:15.914
we're gonna make a little
language called dropbear.

6
00:00:15.914 --> 00:00:19.335
I'll explain what a dropbear is
when it's time, not beforehand.

7
00:00:19.335 --> 00:00:24.148
As I mentioned, my name is Steve,
and I work at Twilio SendGrid,

8
00:00:24.148 --> 00:00:29.401
Senior Principal Engineer which is
really hard to say multiple times,

9
00:00:29.401 --> 00:00:31.078
quickly but you know.

10
00:00:31.078 --> 00:00:36.121
Basically if you ever get a text that
was sent by a software program or

11
00:00:36.121 --> 00:00:41.799
an email, we probably sent it to you
through now our new combined business.

12
00:00:41.799 --> 00:00:45.094
I work on the marketing campaigns product,

13
00:00:45.094 --> 00:00:50.000
which is kind of like a in-browser,
HTML editor built in react.

14
00:00:50.000 --> 00:00:54.870
And as I'll mention
a few times during this,

15
00:00:54.870 --> 00:01:00.507
a lot, this came out of having
to do a lot of parsing,

16
00:01:00.507 --> 00:01:04.754
and compiling in my day to day, right?

17
00:01:04.754 --> 00:01:06.690
And so seeing how some of these things,

18
00:01:06.690 --> 00:01:09.801
we're gonna kinda look at it
through playing with a language,

19
00:01:09.801 --> 00:01:12.871
but these are things that I have
solved actual problems with.

20
00:01:12.871 --> 00:01:17.052
Not that building a language isn't solving
the problem of scratching your niche or

21
00:01:17.052 --> 00:01:20.771
anything like that, but you can also
do it at work, which is kind of cool.

22
00:01:20.771 --> 00:01:26.637
The good news is as long as you
rein in your ambitions, right?

23
00:01:26.637 --> 00:01:31.766
Many of the really popular languages
that we use are someone's full-time job.

24
00:01:31.766 --> 00:01:34.130
And usually not just
someone's full-time job,

25
00:01:34.130 --> 00:01:36.330
a team of someones' full-time job, right?

26
00:01:36.330 --> 00:01:38.622
Usually with doctorates, and
stuff along those lines.

27
00:01:38.622 --> 00:01:42.592
The good news is that you don't need a
doctorate to use a lot of these techniques

28
00:01:42.592 --> 00:01:46.441
and tools, you don't need it to build
your own little language as a hobby and

29
00:01:46.441 --> 00:01:50.015
you don't need it to solve very real
problems in your day to day lives.

30
00:01:50.015 --> 00:01:52.655
A language or any of these parsers or

31
00:01:52.655 --> 00:01:56.440
compilers are just programs in and
of themselves.

32
00:01:56.440 --> 00:02:00.264
They're no different than the software
that we write on a day to day basis.

33
00:02:00.264 --> 00:02:04.269
So why would we want to do any of this?

34
00:02:04.269 --> 00:02:07.644
You may not want to write your own
programming language, it's not like,

35
00:02:07.644 --> 00:02:08.741
I'm gonna quit my job.

36
00:02:08.741 --> 00:02:13.525
I'm gonna sit down and
I'm going to write the new language that's

37
00:02:13.525 --> 00:02:18.396
gonna change everything versus
the one that changed everything was

38
00:02:18.396 --> 00:02:22.860
written by some dude in ten days,
and two plus two equals two.

39
00:02:22.860 --> 00:02:24.880
So there's some very kinda
practical use cases.

40
00:02:24.880 --> 00:02:29.007
In fact, you probably use some of
these tools on a day to day basis,

41
00:02:29.007 --> 00:02:31.681
whether it's something like Terraform.

42
00:02:31.681 --> 00:02:36.448
We do all of our deployment with
this idea of code is infrastructure.

43
00:02:36.448 --> 00:02:41.770
So we can write basically what databases
we need, how many Amazon EC2 instances.

44
00:02:41.770 --> 00:02:45.102
So on and so forth, and
that gets parsed, and

45
00:02:45.102 --> 00:02:49.599
commands just have to configure
all of our infrastructure.

46
00:02:49.599 --> 00:02:53.868
Even figuring your dependencies,
in npm, it's a JSON file and

47
00:02:53.868 --> 00:02:57.280
it's pretty standard, but
a gemfile, or a TUML.

48
00:02:57.280 --> 00:03:00.969
Or anything along those lines need
parsers to figure out what's going on,

49
00:03:00.969 --> 00:03:03.143
they need to be evaluated
to do their thing.

50
00:03:03.143 --> 00:03:06.976
Templating languages are near and
dear to my heart.

51
00:03:06.976 --> 00:03:11.626
And a lot of the problems that I have
needed to solve and templating languages

52
00:03:11.626 --> 00:03:15.345
are really great because they
like to flex that muscle a lot.

53
00:03:15.345 --> 00:03:21.129
And also our very confined space
of what you know you need to do.

54
00:03:21.129 --> 00:03:22.464
They're a really great place to start.

55
00:03:22.464 --> 00:03:25.517
Also, it's kind of fun.

56
00:03:25.517 --> 00:03:27.779
I think it's fun.

57
00:03:27.779 --> 00:03:31.953
It's one of those kind of
fun that hurts sometimes.

58
00:03:31.953 --> 00:03:36.994
[LAUGH] It gives you a headache,
but it's a lot of fun.

59
00:03:36.994 --> 00:03:41.308
The kind of meta point is that there's
a bunch of different techniques that

60
00:03:41.308 --> 00:03:45.500
we're gonna kind of explore throughout
our brief time together today.

61
00:03:45.500 --> 00:03:48.914
Any one of those kinda
individual pieces can even

62
00:03:48.914 --> 00:03:53.419
be used in isolation to solve
practical problems for yourself.

63
00:03:53.419 --> 00:03:58.072
So what do we do with
some of these techniques?

64
00:03:58.072 --> 00:04:00.061
I didn't know that I'd be writing so

65
00:04:00.061 --> 00:04:03.021
many parsers when I started
to work on an email editor.

66
00:04:03.021 --> 00:04:09.211
Our original version of the editor,
years ago, was jQuery and CoffeeScript and

67
00:04:09.211 --> 00:04:14.673
when you made changes to the email,
we literally manipulated the DOM,

68
00:04:14.673 --> 00:04:19.151
and that's how we stored
everything as one big HTML file.

69
00:04:19.151 --> 00:04:22.401
And like most things,
you can't really change an API.

70
00:04:22.401 --> 00:04:26.175
So as we built newer and
newer versions of the product,

71
00:04:26.175 --> 00:04:29.876
basically the API was giving
us back a full HTML file.

72
00:04:29.876 --> 00:04:33.433
But the new versions didn't react,
in the Redux store,

73
00:04:33.433 --> 00:04:36.781
that's not a lot of DOM
manipulation going on there.

74
00:04:36.781 --> 00:04:39.211
We basically need to
take that HTML file and

75
00:04:39.211 --> 00:04:42.256
turn it into like a large
kind of tree like structure.

76
00:04:42.256 --> 00:04:43.748
Yeah, we can pass into React components.

77
00:04:43.748 --> 00:04:48.718
The first time around that we implemented
it, a few years ago, we're like, okay,

78
00:04:48.718 --> 00:04:53.268
what we will do is we'll use jQuery and
we'll just start navigating the DOM to

79
00:04:53.268 --> 00:04:57.958
find all the stuff that we need and then
we'll put it into the React components.

80
00:04:57.958 --> 00:04:58.619
And that sounded really great.

81
00:04:58.619 --> 00:05:02.196
Except for the fact that jQuery
makes real DOM nodes and

82
00:05:02.196 --> 00:05:05.634
the browser tries to be helpful and
fix HTML for you.

83
00:05:05.634 --> 00:05:09.402
Now, that seems great, good job jQuery.

84
00:05:09.402 --> 00:05:13.352
The problem with that is that
we are trying to make emails for

85
00:05:13.352 --> 00:05:18.013
Outlook 2013, which intentionally
needed broken DOM, [LAUGH] in

86
00:05:18.013 --> 00:05:22.679
order to actually render correctly or
do anything along those lines.

87
00:05:22.679 --> 00:05:24.454
So it was actually really problematic.

88
00:05:24.454 --> 00:05:28.739
So when we do the new version, we actually
used a parser, broke into a large AST,

89
00:05:28.739 --> 00:05:31.387
an abstract syntax tree,
started navigating and

90
00:05:31.387 --> 00:05:35.249
traversing this data structure to do
all the manipulation that we need.

91
00:05:35.249 --> 00:05:37.020
So we break into this data structure and

92
00:05:37.020 --> 00:05:40.347
as the user starts tweaking things
in the sidebar, moving stuff around,

93
00:05:40.347 --> 00:05:44.213
we're basically manipulating that tree and
moving stuff around with some of the same

94
00:05:44.213 --> 00:05:47.238
techniques that we're gonna play
around with a little bit today.

95
00:05:47.238 --> 00:05:51.709
We are also building a templating language
that started out kind of like Handlebars,

96
00:05:51.709 --> 00:05:54.147
but it's kind of morphing
into its own thing.

97
00:05:54.147 --> 00:05:57.712
And so we're able to even use
a lightweight version of some of these

98
00:05:57.712 --> 00:06:01.468
techniques to put a layer over
Handlebars to kind of pre-compile it,

99
00:06:01.468 --> 00:06:03.631
so that we could bring it to customers and

100
00:06:03.631 --> 00:06:07.091
do our initial research before
having to build an entire thing.

101
00:06:07.091 --> 00:06:11.496
And we just kind of used some very basic
parsing and moving stuff around in a tree

102
00:06:11.496 --> 00:06:14.391
like structure again to
ship that really quickly.

103
00:06:14.391 --> 00:06:17.899
We have a code editor where you can click
on the code and it brings you to that

104
00:06:17.899 --> 00:06:21.705
place in the preview, you click on the
preview and it highlights that DOM node.

105
00:06:21.705 --> 00:06:24.346
For that,
we basically have to pull apart the HTML,

106
00:06:24.346 --> 00:06:27.300
annotate every DOM node with
where it was in the text file.

107
00:06:27.300 --> 00:06:31.368
Again, very simple features that would
have been a lot more complicated if we

108
00:06:31.368 --> 00:06:34.012
didn't have some of these
tools at our disposal.

109
00:06:34.012 --> 00:06:38.474
On top of that, we have a custom query
language that looks like SQL for making

110
00:06:38.474 --> 00:06:43.235
segments of your customers to trigger
automated messages to along those lines.

111
00:06:43.235 --> 00:06:47.672
[LAUGH] First, just take an arbitrary
SQL off the Internet and

112
00:06:47.672 --> 00:06:49.591
executing it, not okay.

113
00:06:49.591 --> 00:06:53.554
But also, it is a custom language that we
have to actually parse in JavaScript and

114
00:06:53.554 --> 00:06:55.850
zeros in Java as well go
on the back end as well.

115
00:06:55.850 --> 00:07:01.158
And so there's tons of places in just day
to day features for us that we end up

116
00:07:01.158 --> 00:07:06.974
using these things, and so, yeah, whether
or not it's your own full language,

117
00:07:06.974 --> 00:07:11.391
there's still also a lot of just
practical day to day places.

118
00:07:11.391 --> 00:07:16.263
So my goal is to take the pieces of
this workshop as inspiration either

119
00:07:16.263 --> 00:07:20.379
to build an entire language or
to solve problems easily and

120
00:07:20.379 --> 00:07:22.986
probably in a more sustainable way.

121
00:07:22.986 --> 00:07:27.467
We haven't had to go back and change
a lot of that code like we used to when

122
00:07:27.467 --> 00:07:30.307
we're either trying to RegEx it to death,
or

123
00:07:30.307 --> 00:07:33.989
whatever other fun techniques
we were trying at the time.

124
00:07:33.989 --> 00:07:36.313
It ended up being some
of our more stable code.

125
00:07:36.313 --> 00:07:41.553
And there's also a lot of tools that we
all use, we use PostCSS or Babel JSX.

126
00:07:41.553 --> 00:07:44.634
That's all using the same
kind of techniques.

127
00:07:44.634 --> 00:07:46.314
So we're surrounded by it all the time.

128
00:07:46.314 --> 00:07:50.227
And it's good to know how the tools
that we're using every day work.

