WEBVTT

1
00:00:00.000 --> 00:00:02.638
&gt;&gt; Steve Kinney: We can figure out
the structure of our language now.

2
00:00:02.638 --> 00:00:04.854
We know what a number is.

3
00:00:04.854 --> 00:00:06.935
We know what an identifier is.

4
00:00:06.935 --> 00:00:10.987
We know what a expression is.

5
00:00:10.987 --> 00:00:14.756
We basically have the very simple
structure to our language.

6
00:00:14.756 --> 00:00:20.842
We do have some problems that we
kind of need to address however.

7
00:00:20.842 --> 00:00:23.394
We can say, yeah, cool, add two numbers.

8
00:00:23.394 --> 00:00:27.894
What does it mean to add two numbers,
right?

9
00:00:27.894 --> 00:00:31.913
And where are we adding these numbers,
right?

10
00:00:31.913 --> 00:00:33.279
We're gonna need a few things here.

11
00:00:33.279 --> 00:00:35.819
We're gonna need a way to
actually use this language.

12
00:00:35.819 --> 00:00:36.693
That'd be cool.

13
00:00:36.693 --> 00:00:40.465
And we're also gonna need some
amount of a standard library, right?

14
00:00:40.465 --> 00:00:43.679
Some amount of things that are available,
right?

15
00:00:43.679 --> 00:00:47.061
JavaScript language itself or
any language that we've used,

16
00:00:47.061 --> 00:00:51.524
even some languages more than JavaScript,
right, have a set of built in objects,

17
00:00:51.524 --> 00:00:55.311
and built in data structures, and
built in functions that we can use.

18
00:00:55.311 --> 00:00:57.994
Even if it's the plus symbol or
something along those lines,

19
00:00:57.994 --> 00:01:00.587
or Ruby's innumerable, or
the Python standard library.

20
00:01:00.587 --> 00:01:03.382
We can do a lot of stuff with just
the language even before the third-party

21
00:01:03.382 --> 00:01:03.887
libraries.

22
00:01:03.887 --> 00:01:06.157
It's basically the foundation for
all of that.

23
00:01:06.157 --> 00:01:11.607
So we're gonna do a few things,
we're going to build a REPL.

24
00:01:11.607 --> 00:01:12.926
I'll talk about what that is.

25
00:01:12.926 --> 00:01:14.870
We're gonna build a little CLI tool.

26
00:01:14.870 --> 00:01:17.851
We're also going to build
the kind of base built

27
00:01:17.851 --> 00:01:21.063
in functions that you can totally expand,
right?

28
00:01:21.063 --> 00:01:25.472
You could actually if you wanted this
language to have all the powers of

29
00:01:25.472 --> 00:01:29.745
low dash, you could have that as
built ins in the language, right?

30
00:01:29.745 --> 00:01:33.260
And but you have to put that into the
standard library using kind of JavaScript

31
00:01:33.260 --> 00:01:34.027
underneath it.

32
00:01:34.027 --> 00:01:37.710
So what is a REPL?

33
00:01:37.710 --> 00:01:41.964
A REPL is a read-evaluate-print loop.

34
00:01:41.964 --> 00:01:46.823
REPL, [LAUGH] it's an acronym,
and it does what it says.

35
00:01:46.823 --> 00:01:51.138
Basically, you give it some expression,
it reads it, it evaluates it, right,

36
00:01:51.138 --> 00:01:53.586
which is the part we
have not implemented yet.

37
00:01:53.586 --> 00:01:58.311
We can parse but we don't and
once we have the structure,

38
00:01:58.311 --> 00:02:02.060
we need to actually then execute it,
right?

39
00:02:02.060 --> 00:02:03.501
And then once you've executed it,

40
00:02:03.501 --> 00:02:06.825
it's effectively printing something to
the screen saying something happened.

41
00:02:06.825 --> 00:02:10.829
You can run a function but if you don't
tell anyone did it really happen?

42
00:02:10.829 --> 00:02:14.653
And then once we have read, evaluated and

43
00:02:14.653 --> 00:02:20.235
printed the result then we give
him another prompt, right?

44
00:02:20.235 --> 00:02:24.767
And we allow them to go ahead and
play the whole game over.

45
00:02:24.767 --> 00:02:28.069
You have used a REPL at some
point of your life likely.

46
00:02:28.069 --> 00:02:29.382
Node has a REPL built in.

47
00:02:29.382 --> 00:02:33.985
If you just type node, you'll get one
where you can start typing things.

48
00:02:33.985 --> 00:02:39.941
Python, Ruby, almost every
language I can think of has one.

49
00:02:39.941 --> 00:02:41.772
So we are gonna need
a few things in place.

50
00:02:41.772 --> 00:02:45.094
I kind of alluded to in
the ramp up to this.

51
00:02:45.094 --> 00:02:51.446
We've just been taking for granted that
there's a add function in the language,

52
00:02:51.446 --> 00:02:55.876
right, or a subtract function
in the language, right?

53
00:02:55.876 --> 00:02:57.938
There can be [LAUGH].

54
00:02:57.938 --> 00:02:59.610
We're the ones making this language and

55
00:02:59.610 --> 00:03:01.633
it means that we got to put them in there,
right?

56
00:03:01.633 --> 00:03:05.585
And we're going to stand on the shoulders
of our JavaScript giants so

57
00:03:05.585 --> 00:03:09.752
that we're not again shifting bets for
the next week and a half, right?

58
00:03:09.752 --> 00:03:13.207
But we need to actually add them in so
that when someone says add two and

59
00:03:13.207 --> 00:03:15.947
two or subtract or multiply or
modular and like I said,

60
00:03:15.947 --> 00:03:17.930
you can add anything you want in there.

61
00:03:17.930 --> 00:03:22.557
Right, we'll do obviously just a kind of
basic set because there's not much more

62
00:03:22.557 --> 00:03:25.389
learning that happens
from doing the 17th one.

63
00:03:25.389 --> 00:03:28.866
And so we'll kind of use some of those
basic things that are kind of built in

64
00:03:28.866 --> 00:03:29.607
there as well.

65
00:03:29.607 --> 00:03:32.785
And so we're going to use JavaScript for
this so

66
00:03:32.785 --> 00:03:35.809
effectively we'll create an add function.

67
00:03:35.809 --> 00:03:39.487
In we have a little bit differently cuz
we don't necessarily have operators

68
00:03:39.487 --> 00:03:40.276
in our language.

69
00:03:40.276 --> 00:03:43.516
Everything is a function
expression currently in a list.

70
00:03:43.516 --> 00:03:48.929
And we know that our add or subtract can
take an unlimited series of arguments.

71
00:03:48.929 --> 00:03:50.189
So we'll have to do a little bit of work.

72
00:03:50.189 --> 00:03:52.265
Now, some of that I've done for you.

73
00:03:52.265 --> 00:03:54.696
It's what I care more
about is the wiring up.

74
00:03:54.696 --> 00:03:55.730
I'll take you on a tour.

75
00:03:55.730 --> 00:03:58.569
And then once I've taken you on
a tour of some of the kind of

76
00:03:58.569 --> 00:04:02.001
structure that I've built,
we'll talk a little bit about, okay,

77
00:04:02.001 --> 00:04:04.973
now how do we actually go ahead and
evaluate this language.

78
00:04:04.973 --> 00:04:09.703
So let's actually look at some of the code
that we have in the quote-unquote standard

79
00:04:09.703 --> 00:04:10.301
library.

80
00:04:10.301 --> 00:04:13.376
And you'll be able to add stuff
to the standard library in.

