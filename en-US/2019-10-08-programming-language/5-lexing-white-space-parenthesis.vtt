WEBVTT

1
00:00:00.000 --> 00:00:03.073
&gt;&gt; Steve Kinney: So like we'll have
something along these lines here.

2
00:00:03.073 --> 00:00:08.709
It will be fun if you mess up because
what will happen is either your

3
00:00:08.709 --> 00:00:14.140
test suite will take longer than
you think it normally should or

4
00:00:14.140 --> 00:00:21.228
you can really make noce unhappy and get
some nice like dumps of the stack, right?

5
00:00:21.228 --> 00:00:22.582
It's not pretty, right?

6
00:00:22.582 --> 00:00:24.474
And so, that's a thing.

7
00:00:24.474 --> 00:00:26.053
Hence, we're gonna have some unit tests.

8
00:00:26.053 --> 00:00:29.689
So if things change under us,
we kind of know.

9
00:00:29.689 --> 00:00:32.565
And then some of this is for instance,
okay, if we see white space,

10
00:00:32.565 --> 00:00:34.032
we don't care about white space.

11
00:00:34.032 --> 00:00:36.008
Right, well, we will write this
code together in a second.

12
00:00:36.008 --> 00:00:38.095
It's kind of the preview.

13
00:00:38.095 --> 00:00:41.309
But if we see a number, well,
yeah, we do need that, right?

14
00:00:41.309 --> 00:00:41.809
We want the number.

15
00:00:41.809 --> 00:00:45.857
We put that into our token bag,
and we move along.

16
00:00:45.857 --> 00:00:49.491
So we're gonna switch over right,
I'm going to jump into the repo.

17
00:00:49.491 --> 00:00:51.432
I'm going to write a little bit.

18
00:00:51.432 --> 00:00:53.970
And then I'm going to pass it off
to you to write a little bit, and

19
00:00:53.970 --> 00:00:55.108
then we'll do it together.

20
00:00:55.108 --> 00:00:57.832
And it'll be a grand old time.

21
00:00:57.832 --> 00:01:04.018
So this is I'll give you a kind
of a tour of the repo as well.

22
00:01:04.018 --> 00:01:08.641
We've got most of the code is
in the source directory, right?

23
00:01:08.641 --> 00:01:13.433
It's there's I've done the like, require
statements, but it's a bunch of no op

24
00:01:13.433 --> 00:01:17.488
functions in here currently, and
a series of skipped tests, right?

25
00:01:17.488 --> 00:01:22.453
And so we'll start turning those on as we
go through the day starting to get a few

26
00:01:22.453 --> 00:01:23.590
things working.

27
00:01:23.590 --> 00:01:24.925
So right now I'm in this tokenize,

28
00:01:24.925 --> 00:01:27.337
which is what we're going to kind
of call our lexical analysis.

29
00:01:27.337 --> 00:01:30.914
We have some helpers here and let's just
like they're pretty straightforward I

30
00:01:30.914 --> 00:01:33.242
mean, they do effectively
what they say on the tin.

31
00:01:33.242 --> 00:01:35.253
But let's go ahead and take a look.

32
00:01:35.253 --> 00:01:40.198
And so I've got some basic tiny little
bit of regx to do some of the very simple

33
00:01:40.198 --> 00:01:44.373
stuff like figuring out if
something is a letter, white space,

34
00:01:44.373 --> 00:01:49.272
this will take care of tabs as well as
spaces and everything on those lines.

35
00:01:49.272 --> 00:01:52.211
Numbers, we are actually
gonna use the operators.

36
00:01:52.211 --> 00:01:55.803
This is just some helpers to make
our code a little more clear.

37
00:01:55.803 --> 00:01:59.718
Seeing this regx all over
place with the test on it,

38
00:01:59.718 --> 00:02:05.290
like makes an already complicated
piece of code look far worse, right?

39
00:02:05.290 --> 00:02:08.835
Giving yourself good
abstractions sometimes is a sign

40
00:02:08.835 --> 00:02:10.458
that you love yourself.

41
00:02:10.458 --> 00:02:13.509
The same thing of this will be easier for

42
00:02:13.509 --> 00:02:19.160
future me to read than the other side
of this, so on and so forth, right?

43
00:02:19.160 --> 00:02:22.380
So we're gonna have these are the helpers
that we're gonna use for the lesson,

44
00:02:22.380 --> 00:02:25.133
we're gonna have some other helpers
through the course of the day.

45
00:02:25.133 --> 00:02:30.760
But I greatly encourage you to make
helpers early and often, right?

46
00:02:30.760 --> 00:02:34.617
Sometimes we'll use a little
less than I would normally use,

47
00:02:34.617 --> 00:02:36.482
cuz I wanna make stuff clear.

48
00:02:36.482 --> 00:02:41.243
Righ, and it's like what is
this magical helper right?

49
00:02:41.243 --> 00:02:45.468
But i think about a lot of like even when
we create the like kind of objects that

50
00:02:45.468 --> 00:02:49.116
are the data structures for
the information about a given token.

51
00:02:49.116 --> 00:02:51.687
Or piece of, I'm sorry,
syntax tree, right?

52
00:02:51.687 --> 00:02:54.438
I might normally use a function
to actually create that so

53
00:02:54.438 --> 00:02:57.204
I know I'm consistently
getting the right properties.

54
00:02:57.204 --> 00:03:02.858
I don't actually worry about having
to mistype a given constant name or

55
00:03:02.858 --> 00:03:05.979
something along those lines, right?

56
00:03:05.979 --> 00:03:10.120
And so we'll do a little less of
that than I would normally do so

57
00:03:10.120 --> 00:03:13.784
it's not so abstract that it
seems like black magic but

58
00:03:13.784 --> 00:03:18.265
we will kind of use it where it
doesn't take away from the clarity.

59
00:03:18.265 --> 00:03:22.322
But I encourage you to probably go ever
farther than I will go cuz I scaled it

60
00:03:22.322 --> 00:03:24.951
back a little bit than
what I would normally do.

61
00:03:24.951 --> 00:03:26.140
So we have those.

62
00:03:26.140 --> 00:03:31.187
But tokenize is where we're going to kind
of get started and we saw a little bit

63
00:03:31.187 --> 00:03:36.468
before which is tokenize is going to take
that input string, and also just like,

64
00:03:36.468 --> 00:03:41.283
this is something that I would like,
I'm going to use JavaScript today,

65
00:03:41.283 --> 00:03:45.743
I would probably use something
like TypeScript normally, right?

66
00:03:45.743 --> 00:03:48.614
But didn't want to add the, hey,
we're gonna do a bunch of recursion.

67
00:03:48.614 --> 00:03:50.943
And nested while loops.

68
00:03:50.943 --> 00:03:53.875
Let's also as strong types in there,
right?

69
00:03:53.875 --> 00:03:57.059
But like just basically trying
to keep your sanity and

70
00:03:57.059 --> 00:04:00.110
stuff along those lines
is super helpful usually.

71
00:04:00.110 --> 00:04:07.289
So we know that we need to get this set
of tokens that we're gonna keep track of.

72
00:04:07.289 --> 00:04:11.428
And we know that we're going
to start a cursor, right?

73
00:04:11.428 --> 00:04:15.500
You could slice things off of the string
and do a whole bunch of stuff like that.

74
00:04:15.500 --> 00:04:16.695
I've done that as well.

75
00:04:16.695 --> 00:04:20.976
I have found that like, as I've done
some of the kind of real world ones,

76
00:04:20.976 --> 00:04:24.922
the least amount of headache by just
keeping an index of where I am.

77
00:04:24.922 --> 00:04:26.202
Cuz that's easy.

78
00:04:26.202 --> 00:04:30.142
There are cases where you might
wanna move back sometimes, right?

79
00:04:30.142 --> 00:04:32.970
Our scheme language is
pretty straightforward and

80
00:04:32.970 --> 00:04:35.080
you won't need to do too much of that.

81
00:04:35.080 --> 00:04:39.474
But there absolutely are cases where you
might want to look ahead, or look behind.

82
00:04:39.474 --> 00:04:43.112
We'll also have some utilities that like
just make it a little more clear, right?

83
00:04:43.112 --> 00:04:44.911
Some things instead of like,
because I don't know about you.

84
00:04:44.911 --> 00:04:48.279
But I can never remember what
array shift and array unshift do.

85
00:04:48.279 --> 00:04:51.257
They I just know they do the opposite
of what they think they do,

86
00:04:51.257 --> 00:04:52.616
but then I get all confused.

87
00:04:52.616 --> 00:04:55.682
So I made some helpers that will use for
that kind of stuff too.

88
00:04:55.682 --> 00:05:02.177
So then we'll do while cursor
is less than the input link.

89
00:05:02.177 --> 00:05:04.648
So like,
when we get to the end of the string,

90
00:05:04.648 --> 00:05:07.132
that's how we know we're done tokenizing.

91
00:05:07.132 --> 00:05:12.188
And this is obviously, you're in
charge of kind of making sure that you

92
00:05:12.188 --> 00:05:18.108
are iterating that cursor because if you
don't, it's gonna be an infinite loop.

93
00:05:18.108 --> 00:05:22.526
[LAUGH] So and there's some tricks like,
it wasn't appropriate for

94
00:05:22.526 --> 00:05:27.251
this language, but a trick that I'll
use a lot of times is for a for loop,

95
00:05:27.251 --> 00:05:30.061
you don't have to give it every argument.

96
00:05:30.061 --> 00:05:35.206
So you could do something for
cursor is less than input length.

97
00:05:37.250 --> 00:05:38.473
&gt;&gt; Steve Kinney: And then.

98
00:05:41.753 --> 00:05:46.308
&gt;&gt; Steve Kinney: Like that, and so you
don't have that initial setup in there.

99
00:05:46.308 --> 00:05:49.205
And you can control it like that as well.

100
00:05:49.205 --> 00:05:52.902
I use this in the handlebars syntax,
it just didn't work for

101
00:05:52.902 --> 00:05:54.506
what we're doing today.

102
00:05:54.506 --> 00:05:59.422
So I have this cursor, and at the end of
the day, when everything is said and done,

103
00:05:59.422 --> 00:06:01.938
we are gonna return that array of tokens.

104
00:06:01.938 --> 00:06:05.614
So now what we really
need to do is kind of all

105
00:06:05.614 --> 00:06:09.300
the happiness lives in here at this point.

106
00:06:09.300 --> 00:06:11.845
So I'm gonna start us with
the kinda simplest one.

107
00:06:11.845 --> 00:06:16.206
Let me take a look at the tests,
let's get some of those up and running.

108
00:06:16.206 --> 00:06:19.682
So, for instance,
this is kind of the like,

109
00:06:19.682 --> 00:06:23.167
does my test suite work kind of test,
right?

110
00:06:23.167 --> 00:06:27.015
Is it giving me array at all like these
are those tests like I am a guilty of

111
00:06:27.015 --> 00:06:31.271
the right expect true to be true to make
sure I've even configured just right.

112
00:06:31.271 --> 00:06:35.396
These are the tests that I would likely
like delete after I had more tests right?

113
00:06:35.396 --> 00:06:39.283
Cuz they're not adding a ton of value,
but they are pretty good for now.

114
00:06:39.283 --> 00:06:41.935
So let's get that going.

115
00:06:41.935 --> 00:06:44.650
And we'll start with our
let's make sure that works.

116
00:06:45.964 --> 00:06:48.509
&gt;&gt; Steve Kinney: And so
I'm going to do MPM test.

117
00:06:48.509 --> 00:06:51.822
And then one trick you can do with
just is if you just type in like any

118
00:06:51.822 --> 00:06:55.448
characters that are in the name of
the test will basically do a regx max.

119
00:06:55.448 --> 00:06:58.862
Because like i don't need to go evaluate
a bunch of files I've skipped testing them

120
00:06:58.862 --> 00:06:59.365
right now.

121
00:06:59.365 --> 00:07:04.866
Right, so we know that this is tokenized
test like it's a MPM test tokenize right.

122
00:07:04.866 --> 00:07:07.597
And it will kind of look and check it out.

123
00:07:07.597 --> 00:07:10.819
Cool, sweet.

124
00:07:10.819 --> 00:07:12.642
So I got a problem,
which is I don't know how to type.

125
00:07:12.642 --> 00:07:16.532
So we'll solve that
there's no brackets here.

126
00:07:20.550 --> 00:07:22.775
&gt;&gt; Steve Kinney: Sweet, and so
we've got our first passing test.

127
00:07:22.775 --> 00:07:27.358
Let's go get ourselves a failing test.

128
00:07:27.358 --> 00:07:32.115
So the first one is should be able to
tokenize a pair of parentheses, man,

129
00:07:32.115 --> 00:07:37.180
if we're writing a list, we should be
able to tokenize a pair of parentheses,

130
00:07:37.180 --> 00:07:40.786
which is if we give it the input
string of spoiler alert,

131
00:07:40.786 --> 00:07:45.202
a pair of parentheses, we ought to
be able to get those out, right?

132
00:07:45.202 --> 00:07:46.940
Pretty simple.

133
00:07:46.940 --> 00:07:49.015
Nothing particularly special.

134
00:07:49.015 --> 00:07:50.096
So how would that look?

135
00:07:50.096 --> 00:07:53.960
One of the things that I will
likely do is I'm going to,

136
00:07:53.960 --> 00:07:59.592
I could call this each time input and I
use the square brackets cursor like this.

137
00:07:59.592 --> 00:08:07.274
Like
&gt;&gt; Steve Kinney: But

138
00:08:07.274 --> 00:08:09.656
you can see how I'm already
messing up as it is, right?

139
00:08:09.656 --> 00:08:10.409
I don't want to do that.

140
00:08:10.409 --> 00:08:13.920
So what I'm gonna do is I'm just
a store that character constant.

141
00:08:13.920 --> 00:08:16.793
Because I'm going to be checking for
parentheses and be checking for numbers.

142
00:08:16.793 --> 00:08:18.452
I'm going to be checking the letters.

143
00:08:18.452 --> 00:08:20.927
I don't want to type this over again.

144
00:08:20.927 --> 00:08:21.745
So we'll do that.

145
00:08:21.745 --> 00:08:25.426
And then we've got that
if parentheses helper,

146
00:08:25.426 --> 00:08:30.814
which is basically able to check for
opening and closing parentheses,

147
00:08:30.814 --> 00:08:35.053
so we'll do that if is
parentheses is our parentheses.

148
00:08:35.053 --> 00:08:38.912
I went back and forth on whether
I was gonna pluralize or not.

149
00:08:38.912 --> 00:08:42.605
All right, if that's the case,
we go into our tokens.

150
00:08:42.605 --> 00:08:44.906
We push it on with some metadata, right?

151
00:08:44.906 --> 00:08:47.663
So the type is gonna be a parenthesis.

152
00:08:52.380 --> 00:08:53.330
&gt;&gt; Steve Kinney: All right, and then,

153
00:08:53.330 --> 00:08:55.592
the value will be whatever
character it was, right?

154
00:08:55.592 --> 00:08:58.303
Cuz we're gonna need to know later is
it an opening and closing parenthesis.

155
00:08:58.303 --> 00:09:00.094
That is data that we need.

156
00:09:00.094 --> 00:09:03.935
Other stuff, we might not necessarily
care, right but in this case,

157
00:09:03.935 --> 00:09:07.006
we do need to know which way
the smiley face is pointing.

158
00:09:07.006 --> 00:09:11.369
Once we've done this, we can go ahead and
just say cursor plus plus because if we do

159
00:09:11.369 --> 00:09:14.734
not iterate that cursor,
you will be waiting a very long time.

160
00:09:14.734 --> 00:09:17.228
And then what i'm going to do is continue.

161
00:09:17.228 --> 00:09:21.135
You end up like using like old school
javascript stuff that you forgot was in

162
00:09:21.135 --> 00:09:21.950
the language.

163
00:09:21.950 --> 00:09:24.249
Continue allows you to just
like break out a loop and

164
00:09:24.249 --> 00:09:27.311
go to the next turn of the loop,
we've iterated cursor ourselves.

165
00:09:27.311 --> 00:09:29.485
This will kick it off because like
what will happen is like we're

166
00:09:29.485 --> 00:09:30.340
basically gonna let it.

167
00:09:30.340 --> 00:09:34.906
If this isn't the case we're gonna have
another conditional checking for things so

168
00:09:34.906 --> 00:09:35.814
on and so forth.

169
00:09:35.814 --> 00:09:39.193
Awesome, and we'll go check it out.

170
00:09:43.226 --> 00:09:46.388
&gt;&gt; Steve Kinney: All right,
we have two passing tests.

171
00:09:46.388 --> 00:09:49.503
Another one I will show you,
just to show your the differences,

172
00:09:49.503 --> 00:09:51.185
we don't care about white space.

173
00:09:51.185 --> 00:09:55.412
White space is there to show us that
we can move on to a different token.

174
00:09:55.412 --> 00:09:59.496
So in that case we need
to iterate the cursor.

175
00:09:59.496 --> 00:10:02.126
But we don't need to store it anywhere.

176
00:10:02.126 --> 00:10:04.262
So we can say if iswhitespace and

177
00:10:04.262 --> 00:10:09.248
you can already see like how like this
will be a lot gnarlier if I didn't give

178
00:10:09.248 --> 00:10:14.492
myself the helpers iswhitespace character
really just iterate that cursor.

179
00:10:18.446 --> 00:10:24.698
&gt;&gt; Steve Kinney: And continue along right?

180
00:10:24.698 --> 00:10:28.895
So go ahead, turn that one on.

181
00:10:28.895 --> 00:10:29.968
We'll verify that it works.

182
00:10:29.968 --> 00:10:36.171
So this one is got a whitespace is kind
of hard to see because it's invisible.

183
00:10:36.171 --> 00:10:39.085
We should get back just the array of
tokens of all it has is whitespace.

184
00:10:39.085 --> 00:10:41.932
So all those tokens should
be completely ignored.

185
00:10:45.669 --> 00:10:48.920
&gt;&gt; Steve Kinney: All right, so
here we've got exercise one.

186
00:10:48.920 --> 00:10:51.914
We've got digits.

187
00:10:51.914 --> 00:10:56.549
Now in an implementation detail that
we decided upon, by we, I mean I,

188
00:10:56.549 --> 00:11:00.826
was that we are actually gonna
store them as JavaScript numbers.

189
00:11:00.826 --> 00:11:03.044
Right so they're in a string right now.

190
00:11:03.044 --> 00:11:05.932
So it will be the string two,
the string three.

191
00:11:05.932 --> 00:11:08.636
So you're on the hook for
numbers for parts, ending them, or

192
00:11:08.636 --> 00:11:10.664
putting a little plus if
you want to be fancy and

193
00:11:10.664 --> 00:11:13.685
just use the fact that JavaScript's
weird to make your life easier.

194
00:11:13.685 --> 00:11:15.782
Either one of those is fine with me.

195
00:11:15.782 --> 00:11:20.774
So want to go ahead, if we get input one,
two to go ahead and get some numbers.

196
00:11:20.774 --> 00:11:23.769
We also want to be able to like
collect some letters as well.

