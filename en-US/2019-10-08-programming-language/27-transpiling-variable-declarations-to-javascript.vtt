WEBVTT

1
00:00:00.000 --> 00:00:02.792
&gt;&gt; Steve Kinney: We added
a new feature to our language,

2
00:00:02.792 --> 00:00:05.846
which is the ability to define variables.

3
00:00:05.846 --> 00:00:08.011
You know what's missing from our language?

4
00:00:08.011 --> 00:00:13.339
The ability to take that new feature and
actually transpile it into JavaScript.

5
00:00:13.339 --> 00:00:14.825
So let's go ahead, and we'll add that.

6
00:00:14.825 --> 00:00:18.487
I'm actually in the toJavaScript.test.js.

7
00:00:18.487 --> 00:00:23.063
And what I'm gonna do is I'm just
going to start with the test, and

8
00:00:23.063 --> 00:00:25.031
then we'll get it passing.

9
00:00:25.031 --> 00:00:29.313
We'll just say it should
support variables.

10
00:00:29.313 --> 00:00:30.415
That seems like a thing.

11
00:00:33.177 --> 00:00:34.979
&gt;&gt; Steve Kinney: And, all right, so

12
00:00:34.979 --> 00:00:38.905
we just need to give it
a kind of default ast.

13
00:00:38.905 --> 00:00:42.705
That's what we expect to come out like the
one that effectively our transformation

14
00:00:42.705 --> 00:00:43.580
layer generates.

15
00:00:46.529 --> 00:00:52.636
&gt;&gt; Steve Kinney: So it'll have
the type of variableDeclaration.

16
00:00:57.276 --> 00:01:02.591
&gt;&gt; Steve Kinney: The identifier
&gt;&gt; Steve Kinney: is the type identifier.

17
00:01:05.995 --> 00:01:09.582
&gt;&gt; Steve Kinney: Let's get the name
of whatever we passed over.

18
00:01:09.582 --> 00:01:11.685
In this case it will be x.

19
00:01:11.685 --> 00:01:12.814
And then the assignment.

20
00:01:12.814 --> 00:01:14.137
This is the Dropbear syntax.

21
00:01:14.137 --> 00:01:18.270
This is one we just decided to create
in our own transformation layer.

22
00:01:18.270 --> 00:01:20.420
And then we've just
decided to evaluate an ad.

23
00:01:20.420 --> 00:01:23.288
We wanna be able to turn
this into JavaScript, right?

24
00:01:23.288 --> 00:01:28.852
Which is more than just moving the keyword
outside of the parentheses, right.

25
00:01:28.852 --> 00:01:35.497
This is turning it effectively into let
x equal two instead of define x too.

26
00:01:35.497 --> 00:01:41.314
But this is the ast that
we get out of Dropbear.

27
00:01:41.314 --> 00:01:43.562
&gt;&gt; Speaker 2: You've got
an indentifier in there.

28
00:01:43.562 --> 00:01:44.446
&gt;&gt; Steve Kinney: Thank you.

29
00:01:46.230 --> 00:01:49.497
&gt;&gt; Steve Kinney: It's
only a matter of time.

30
00:01:49.497 --> 00:01:53.888
This is why you live
code with your friends.

31
00:01:53.888 --> 00:01:55.684
We get a value of 2.

32
00:02:00.049 --> 00:02:05.376
&gt;&gt; Steve Kinney: All right, that's also
why using constants for these things,

33
00:02:05.376 --> 00:02:12.396
where it'll blow up if you spell it wrong
rather than fail silently is good, right?

34
00:02:12.396 --> 00:02:17.848
Cool, and
then we'll expect that toJavaScript.

35
00:02:17.848 --> 00:02:20.919
For this dropper ast, and
you can do more kind of end to

36
00:02:20.919 --> 00:02:24.956
end tests where you start with the syntax,
run it through the parser.

37
00:02:24.956 --> 00:02:26.890
And then take that and
just make sure it all works.

38
00:02:26.890 --> 00:02:29.215
But I feel like if you're
testing each step of the way,

39
00:02:29.215 --> 00:02:33.022
you're probably better off, and your tests
don't have know too much about each other.

40
00:02:33.022 --> 00:02:35.325
So we'll toJavaScript it.

41
00:02:35.325 --> 00:02:43.018
We'll expect that to be, let x = 2.

42
00:02:43.018 --> 00:02:45.341
And you might think that
this might be harder, but

43
00:02:45.341 --> 00:02:49.338
it's not cuz we're still letting the Babel
generator do the heavy lifting, right?

44
00:02:49.338 --> 00:02:53.682
All we need to do is take this
data structure and visit it and

45
00:02:53.682 --> 00:02:58.568
transform it into a data structure
that we can leverage, right?

46
00:02:58.568 --> 00:03:01.747
So it actually, not gonna be too bad.

47
00:03:01.747 --> 00:03:04.359
We can go back to this toJavaScript,
land over here.

48
00:03:04.359 --> 00:03:07.057
Let's just verify that
it does in fact fail,

49
00:03:07.057 --> 00:03:09.759
cuz it would be very
worrisome if it didn't.

50
00:03:18.848 --> 00:03:20.952
&gt;&gt; Steve Kinney: Cool,
the failure is good.

51
00:03:20.952 --> 00:03:23.932
Let's go ahead and take a look.

52
00:03:28.073 --> 00:03:30.862
&gt;&gt; Steve Kinney: Cuz right now it's
getting an ast node that Babel literally

53
00:03:30.862 --> 00:03:32.378
doesn't know anything about.

54
00:03:32.378 --> 00:03:36.038
So it blowing up is not unexpected.

55
00:03:36.038 --> 00:03:41.837
So we have this Babel visitor, and all
that we really need to do is add one for

56
00:03:41.837 --> 00:03:46.093
our fancy new Dropbear based
variable declarations.

57
00:03:50.614 --> 00:03:54.868
&gt;&gt; Steve Kinney: Right, and
that will take the enter in this case,

58
00:03:57.096 --> 00:03:58.286
&gt;&gt; Steve Kinney: With the node.

59
00:04:00.802 --> 00:04:04.524
&gt;&gt; Steve Kinney: And we'll say the node,
we're just gonna assume they're all let's.

60
00:04:04.524 --> 00:04:07.013
Cuz our language doesn't
enforce constants, so

61
00:04:07.013 --> 00:04:10.104
we should make the compilatory
language enforce constants.

62
00:04:15.514 --> 00:04:19.277
&gt;&gt; Steve Kinney: Node.kind is let.

63
00:04:19.277 --> 00:04:25.515
Again, this is just conforming
to what Babel expects.

64
00:04:25.515 --> 00:04:27.179
Declarations.

65
00:04:27.179 --> 00:04:29.029
Right.
So there's the idea of.

66
00:04:29.029 --> 00:04:32.387
In JavaScript,
it's not really used that often, but

67
00:04:32.387 --> 00:04:35.678
you can comma separate your
variable declarations.

68
00:04:35.678 --> 00:04:39.203
So you can define multiple in one.

69
00:04:39.203 --> 00:04:41.158
I don't see that that often.

70
00:04:41.158 --> 00:04:44.094
I remember back in the day, an early node,

71
00:04:44.094 --> 00:04:47.451
you'd see the comments
before it down the side.

72
00:04:47.451 --> 00:04:50.290
But that's why you have
a variable declaration, and

73
00:04:50.290 --> 00:04:52.509
then there's an array of declarations.

74
00:04:52.509 --> 00:04:54.190
JavaScript supports that.

75
00:04:54.190 --> 00:04:57.939
So we just need to kind
of get that in place.

76
00:04:57.939 --> 00:05:02.156
We will only have one declarator
in there of the type of.

77
00:05:06.876 --> 00:05:09.641
&gt;&gt; Steve Kinney: These are one of those
words that I'm convinced that I'll

78
00:05:09.641 --> 00:05:10.778
misspell at one point.

79
00:05:10.778 --> 00:05:16.871
And that will take our nodes identifier
as the id, which is what it uses and

80
00:05:16.871 --> 00:05:21.310
Init, which will be out node.assignment,
right?

81
00:05:21.310 --> 00:05:25.309
So, unlike some of the other ones,
we're not totally off from the JavaScript

82
00:05:25.309 --> 00:05:29.501
implementation, but we are a lot further
than we were with our call expressions.

83
00:05:29.501 --> 00:05:35.228
But it doesn't really matter, because
at compile time we visit the nodes,

84
00:05:35.228 --> 00:05:40.608
we transform them into what we need to be,
and we should see Babel work.

85
00:05:40.608 --> 00:05:41.409
That was a lot of typing.

86
00:05:41.409 --> 00:05:42.578
So we'll find out together.

87
00:05:44.666 --> 00:05:46.282
&gt;&gt; Steve Kinney: And it passes, right?

88
00:05:46.282 --> 00:05:52.425
We can now take all of our define x 2s,
and they will transpile into let x = 2;.

89
00:05:52.425 --> 00:05:53.129
Right.

90
00:05:53.129 --> 00:05:55.675
So that is a JavaScript statement in and
of itself.

91
00:05:55.675 --> 00:05:56.932
Now we can call functions, right.

92
00:05:56.932 --> 00:06:00.507
We can begin to add more and more language
with JavaScript as a compiled target.

93
00:06:00.507 --> 00:06:03.754
So we can ship our Dropbear
apps to the web, and

94
00:06:03.754 --> 00:06:07.682
be on the front of Hacker News
almost instantaneously.

95
00:06:07.682 --> 00:06:09.761
As you do, because it's a functional
programming language, and

96
00:06:09.761 --> 00:06:10.845
that's how these things happen.

