WEBVTT

1
00:00:00.066 --> 00:00:02.403
&gt;&gt; Steve Kinney: I do wanna talk
about one other thing, which is,

2
00:00:02.403 --> 00:00:05.317
there's a whole class of things
called parser generators.

3
00:00:05.317 --> 00:00:08.066
And these are effectively,
it's kind of meta.

4
00:00:08.066 --> 00:00:11.323
It's a domain specific language, or

5
00:00:11.323 --> 00:00:16.314
there's various ones of
domain-specific languages for

6
00:00:16.314 --> 00:00:20.812
generating domain-specific languages,
right?

7
00:00:20.812 --> 00:00:25.797
And I am of mixed feelings on them,
one, in learning them,

8
00:00:25.797 --> 00:00:30.008
you're kind of learning
that parser generator.

9
00:00:30.008 --> 00:00:33.638
Some of them are based on like Bison or
Yak, or something along those lines.

10
00:00:33.638 --> 00:00:37.264
But generally speaking, you're learning
that kind of parser generator, and

11
00:00:37.264 --> 00:00:39.225
not any of the stuff
that goes on behind it.

12
00:00:39.225 --> 00:00:43.292
But there's a trade-off and
so here's a little,

13
00:00:43.292 --> 00:00:46.137
the bold part is the important one.

14
00:00:46.137 --> 00:00:50.631
But this idea that they're compiler
compilers, but they only take a tiny

15
00:00:50.631 --> 00:00:54.773
percentage of the job cuz I'll show
you some syntax of some of them.

16
00:00:54.773 --> 00:00:59.741
Where they become interesting is when,
we suffer from the problem where our back

17
00:00:59.741 --> 00:01:02.603
end is in Go and
our front end is in JavaScript.

18
00:01:02.603 --> 00:01:06.955
And sometimes what we show in the preview
has to be run through the compiler as well

19
00:01:06.955 --> 00:01:09.139
as what happens on the back end, right?

20
00:01:09.139 --> 00:01:12.715
And so in the places where you can maybe
use a parser generator to generate

21
00:01:12.715 --> 00:01:15.769
a JavaScript parser and a Go parser,
that is kinda the dream.

22
00:01:15.769 --> 00:01:20.135
We don't, in fact, do that, but
that would be the hope in this case.

23
00:01:20.135 --> 00:01:23.638
But generally speaking,
I'll show you a few of them,

24
00:01:23.638 --> 00:01:28.218
if they're interesting to you,
I think they're worth taking a look.

25
00:01:28.218 --> 00:01:31.572
But they have never effectively
solved the problem for me.

26
00:01:31.572 --> 00:01:34.600
And it's not that I'm writing them off,
I see promise and merit in them.

27
00:01:34.600 --> 00:01:39.123
But I think it's always worth evaluating
the trade-offs of a thing that you have

28
00:01:39.123 --> 00:01:41.984
kinda the complete flexibility and
control over,

29
00:01:41.984 --> 00:01:46.127
versus something where you're kind of
bending to the way it does things.

30
00:01:46.127 --> 00:01:51.439
So you see, this is even, to kind of
do a very kind of simple syntax, you're

31
00:01:51.439 --> 00:01:57.343
basically writing a bunch of all the rules
for a language in a very linguistic sense.

32
00:01:57.343 --> 00:02:01.989
This is one called Jison, which is
based on Bison, which is based on Yak.

33
00:02:01.989 --> 00:02:08.510
Get it, it's a pun cuz it's JavaScript.

34
00:02:08.510 --> 00:02:14.775
And so it's not like reading,
I'll tell you that much, right?

35
00:02:14.775 --> 00:02:17.803
But it is kind of powerful that
you could theoretically generate,

36
00:02:17.803 --> 00:02:21.114
this is what Handlebars uses like
under the hood to generate the parser.

37
00:02:21.114 --> 00:02:23.708
But then also, there's some
additional stuff along the way.

38
00:02:23.708 --> 00:02:26.960
So it is another area,
if this is a thing you're really into,

39
00:02:26.960 --> 00:02:30.215
there are things like Antler,
which is kind of Java-based,

40
00:02:30.215 --> 00:02:33.047
that do some really kind of
impressive stuff as well.

41
00:02:33.047 --> 00:02:36.253
Worth looking into, but I think for me,

42
00:02:36.253 --> 00:02:40.590
I've a lot of times got a lot
of benefit of just a piece or

43
00:02:40.590 --> 00:02:45.044
two of some of these concepts and
being able to use them.

44
00:02:45.044 --> 00:02:49.100
So there's Jison and here's,
this one's I think Chevron,

45
00:02:49.100 --> 00:02:51.601
where you kind of define everything.

46
00:02:51.601 --> 00:02:54.293
You get these kind of cool graphs, but

47
00:02:54.293 --> 00:02:59.104
there's a learning curve that you
have to kinda make the choice on.

48
00:02:59.104 --> 00:03:03.970
Nearley is another one, you can kind
of see, their syntaxes [INAUDIBLE].

49
00:03:03.970 --> 00:03:11.066
This one will match a hexadecimal color
and CSS, or different colors, right?

50
00:03:11.066 --> 00:03:16.282
I would argue that we have the skill set
now to write a parser to do that too,

51
00:03:16.282 --> 00:03:16.882
right?

52
00:03:16.882 --> 00:03:19.067
And so you kinda have to make
the choice in those cases,

53
00:03:19.067 --> 00:03:20.932
or you don't have to make the choice,
right?

54
00:03:20.932 --> 00:03:24.717
And there's some other list-specific
things that we didn't get into.

55
00:03:24.717 --> 00:03:28.300
One of the things I said
during one of the breaks was,

56
00:03:28.300 --> 00:03:33.287
a lot of times, when implementing a list,
it'll be a series of arrays.

57
00:03:33.287 --> 00:03:37.762
Ours was that we also kind of
had one foot in the tree realm.

58
00:03:37.762 --> 00:03:42.589
And the reason for that was, I think
there's a lot of value in understanding

59
00:03:42.589 --> 00:03:46.297
the visitor pattern on the ASTs and
transpiling to Babel.

60
00:03:46.297 --> 00:03:50.339
And that kind of got a little hairy and
complicated with a bunch of arrays and

61
00:03:50.339 --> 00:03:51.763
casting a bunch of stuff.

62
00:03:51.763 --> 00:03:53.333
There's a bunch of really
cool stuff that you can do.

63
00:03:53.333 --> 00:03:57.261
So this is creating a lambda, which you
see we could add to the environment.

64
00:03:57.261 --> 00:04:00.263
I think what's kind of cool here is,
you basically are making a function.

65
00:04:00.263 --> 00:04:02.079
And you're using those parameters and

66
00:04:02.079 --> 00:04:04.562
you're kind of merging them
with the environments.

67
00:04:04.562 --> 00:04:09.506
You're creating like ideas of scope,
right, by having, okay, whatever's in

68
00:04:09.506 --> 00:04:14.396
this scope, if there's an x in our local
scope, it overrides the global scope.

69
00:04:14.396 --> 00:04:17.346
But then when we're back out of that one,
we're using the global scope again.

70
00:04:17.346 --> 00:04:22.409
And you can implement a lot of those
things, this is effectively it, right?

71
00:04:22.409 --> 00:04:24.478
For implementing it in JavaScript,

72
00:04:24.478 --> 00:04:28.414
we'd have to tweak our parser in a way
that would have made it a little,

73
00:04:28.414 --> 00:04:33.373
the value wasn't really there, right, for
the extra work that we'd have to do there.

74
00:04:33.373 --> 00:04:36.905
But I think that as you begin to think
about different concepts in languages,

75
00:04:36.905 --> 00:04:40.053
it does also help to help you understand
how they work when you start to

76
00:04:40.053 --> 00:04:41.216
implement them as well.

77
00:04:41.216 --> 00:04:42.800
So on top of the very practical things,

78
00:04:42.800 --> 00:04:44.864
I think there's also a lot
of rich language we use.

79
00:04:44.864 --> 00:04:49.431
We effectively are surrounded by these
things and we use them every day, right,

80
00:04:49.431 --> 00:04:50.990
[LAUGH] in all sorts of ways.

81
00:04:50.990 --> 00:04:54.828
Obviously, we use stuff that is compiled,
but especially in the JavaScript land,

82
00:04:54.828 --> 00:04:58.839
our JavaScript is run through a JavaScript
compiler, right, and all of those things.

83
00:04:58.839 --> 00:05:01.812
I think it's kind of interesting to see
how some of this stuff works in practice.

