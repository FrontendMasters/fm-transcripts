WEBVTT

1
00:00:00.050 --> 00:00:06.200
&gt;&gt; Steve Kinney: So we need two things,
we need the ability to traverse the array,

2
00:00:06.200 --> 00:00:07.650
or the tree, rather.

3
00:00:07.650 --> 00:00:10.930
And then we'll have to implement
the ability to actually go ahead

4
00:00:10.930 --> 00:00:12.140
and modify it.

5
00:00:12.140 --> 00:00:15.240
So let's take care of some
of the traversal first.

6
00:00:16.930 --> 00:00:20.000
There's not a lot here,
this is basically just traveling it.

7
00:00:20.000 --> 00:00:24.900
And this will go ahead, and
this one does in fact traverse it as well.

8
00:00:24.900 --> 00:00:26.800
I'm sorry, transform it, so
we'll get to that in a second.

9
00:00:26.800 --> 00:00:29.020
But let's write the ability to
actually go through the tree.

10
00:00:29.020 --> 00:00:30.646
Cuz it's hard to test something
that doesn't do anything.

11
00:00:30.646 --> 00:00:34.490
We could theoretically implement a counter
or mocks and something like that.

12
00:00:34.490 --> 00:00:38.167
But I think we can get to that when we
get to the point where we can actually

13
00:00:38.167 --> 00:00:38.730
write it.

14
00:00:38.730 --> 00:00:42.422
So we'll go into traverse
which is not giving us a lot.

15
00:00:42.422 --> 00:00:46.864
And we do need to diverse in
two different ways, right?

16
00:00:46.864 --> 00:00:49.641
Cuz we have effectively two
data structures in here.

17
00:00:49.641 --> 00:00:55.992
We have the tree, this idea like
expressions of child nodes, right?

18
00:00:55.992 --> 00:01:01.840
And we also have the set of arguments,
which is an array.

19
00:01:01.840 --> 00:01:05.147
So we need to both be
able to traverse up and

20
00:01:05.147 --> 00:01:09.504
down the tree as well as
across the arguments, right?

21
00:01:09.504 --> 00:01:11.227
So we're gonna need to
implement both of these.

22
00:01:11.227 --> 00:01:13.754
So let's try to implement this.

23
00:01:13.754 --> 00:01:18.221
Let's start out with a just general
traverse method that will call and

24
00:01:18.221 --> 00:01:20.654
then it will kind of figure stuff out.

25
00:01:20.654 --> 00:01:23.936
And again, ours will likely need to be
expanded as your language expands, but

26
00:01:23.936 --> 00:01:26.388
we still have a relatively
simple language at this point.

27
00:01:26.388 --> 00:01:30.267
As we add more constructs,
we might need to do more things.

28
00:01:30.267 --> 00:01:34.163
Cool, all right.

29
00:01:34.163 --> 00:01:37.955
So what we'll do is we'll start
with our traverse method.

30
00:01:37.955 --> 00:01:40.383
Now it's got the node and
the visitor, right?

31
00:01:40.383 --> 00:01:44.681
We know in our language that
our tree has a top, right?

32
00:01:44.681 --> 00:01:46.735
Our tree has a single place to start, and

33
00:01:46.735 --> 00:01:49.330
this is true of most
programming languages.

34
00:01:49.330 --> 00:01:51.052
Ours was purposely naive for

35
00:01:51.052 --> 00:01:54.931
the point of simplicity where it
starts with a call expression.

36
00:01:54.931 --> 00:01:59.165
If we go back over the AST explorer and
we look at the one from Babel,

37
00:02:04.026 --> 00:02:05.098
&gt;&gt; Steve Kinney: Bring that over and

38
00:02:05.098 --> 00:02:09.453
we scroll up, you can see they started
with a file, but a lot of us started this

39
00:02:09.453 --> 00:02:14.097
program which is the exact same concept,
exact single point on the tree, right?

40
00:02:14.097 --> 00:02:15.851
Cuz we can have a bunch of
things at that top level, right?

41
00:02:15.851 --> 00:02:20.781
There is a program that has
a body which is an array.

42
00:02:20.781 --> 00:02:24.781
So not dissimilar from ours, and
like eventually we can wrap like

43
00:02:24.781 --> 00:02:29.161
we'll have a function where we can
wrap it in the same kinda construct.

44
00:02:29.161 --> 00:02:31.392
But we just wanted to keep it
simple in the very beginning.

45
00:02:31.392 --> 00:02:36.153
But it's the same idea that you have
basically the ability to go across

46
00:02:36.153 --> 00:02:39.310
sibling nodes, or
down through child nodes.

47
00:02:41.720 --> 00:02:45.150
&gt;&gt; Steve Kinney: But in both cases we
know that there's a parent up at the top.

48
00:02:45.150 --> 00:02:50.390
So what we'll do is we'll write a,
we'll have two helper functions here.

49
00:02:50.390 --> 00:02:54.509
Well, really two that it goes out to,
which is traverseNode.

50
00:02:59.158 --> 00:03:01.696
&gt;&gt; Steve Kinney: And I'm gonna use object
destructuring cuz I don't need all

51
00:03:01.696 --> 00:03:04.543
the arguments all the time when
I'm actually writing my visitors.

52
00:03:04.543 --> 00:03:06.704
And I don't wanna have to
remember the order of them.

53
00:03:06.704 --> 00:03:12.111
So with this, as long as I give them the
right ones it doesn't necessarily matter.

54
00:03:12.111 --> 00:03:14.208
So we'll have traverseNode, and

55
00:03:14.208 --> 00:03:17.400
traverseNode will take
the node we want the parent.

56
00:03:17.400 --> 00:03:18.976
Why is the parent important?

57
00:03:18.976 --> 00:03:23.364
The parents important cuz it allows us
to traverse back up to the tree, right?

58
00:03:23.364 --> 00:03:26.804
We can effectively call node.parent,
parent, parent, parent, parent,

59
00:03:26.804 --> 00:03:28.064
parent, parent, parent.

60
00:03:28.064 --> 00:03:30.767
And get all the way up the tree
if we need to, like for instance,

61
00:03:30.767 --> 00:03:32.253
add something all the way the top.

62
00:03:32.253 --> 00:03:33.978
When would you wanna do this, right?

63
00:03:33.978 --> 00:03:39.162
Well, if we were transpiring to Babel, and
we have like this large standard library.

64
00:03:39.162 --> 00:03:42.529
When we're transferring right now we're
gonna make a function called add,

65
00:03:42.529 --> 00:03:45.445
it'll make these functions but
they don't exist in JavaScript.

66
00:03:45.445 --> 00:03:49.878
So we could do is like we came across
something in the standard library,

67
00:03:49.878 --> 00:03:51.281
we can go ahead and add.

68
00:03:51.281 --> 00:03:54.376
Maybe the function definitely
decoration to the like top scope or

69
00:03:54.376 --> 00:03:57.259
something along those lines,
and do it programmatically.

70
00:03:57.259 --> 00:03:59.436
So we're not adding
the entire standard library,

71
00:03:59.436 --> 00:04:01.211
we're only adding exactly what we need.

72
00:04:01.211 --> 00:04:05.183
And then we get some file size
limitations and stuff along those lines.

73
00:04:05.183 --> 00:04:10.253
So we can say node, parent,
and then the visitor, right?

74
00:04:10.253 --> 00:04:12.016
The visitor is what we talked about.

75
00:04:12.016 --> 00:04:16.045
The separation of the ability to traverse
this tree with the thing that is doing

76
00:04:16.045 --> 00:04:17.153
something, right?

77
00:04:17.153 --> 00:04:23.335
And so this will be the thing
that is moving across, right?

78
00:04:23.335 --> 00:04:25.764
And so we'll start with that.

79
00:04:25.764 --> 00:04:31.118
And traverseNode is going to look like,
do we have anything?

80
00:04:31.118 --> 00:04:34.248
That cares about this kinda
node that we're looking at.

81
00:04:34.248 --> 00:04:37.474
And so I'll kinda give you some
pseudo code for the visitor so

82
00:04:37.474 --> 00:04:39.255
it makes a little bit more sense.

83
00:04:39.255 --> 00:04:43.952
And so our visitor,
&gt;&gt; Steve Kinney: Might be,

84
00:04:43.952 --> 00:04:46.476
it could be a class and
it needs to hold onto a lot of state.

85
00:04:46.476 --> 00:04:48.255
It all depends what you need to do.

86
00:04:48.255 --> 00:04:52.579
A lot of times it will be a just
a plain of objects, right?

87
00:04:52.579 --> 00:04:56.334
And let's say you had a visitor that,

88
00:04:56.334 --> 00:05:01.059
changing variable decorations from, right?

89
00:05:01.059 --> 00:05:05.835
You might say like a very simple,

90
00:05:07.030 --> 00:05:15.572
it has a method on it called
VariableDeclaration, right?

91
00:05:15.572 --> 00:05:21.647
And then it might take the actual node and

92
00:05:21.647 --> 00:05:24.332
stuff like that.

93
00:05:32.538 --> 00:05:33.678
&gt;&gt; Steve Kinney: And
so this is pseudo code,

94
00:05:33.678 --> 00:05:35.270
we're gonna get rid of it in a second.

95
00:05:35.270 --> 00:05:37.738
But you might do something like,

96
00:05:37.738 --> 00:05:45.057
all right,
&gt;&gt; Steve Kinney: If visitor,

97
00:05:45.057 --> 00:05:48.019
and this node's type, right?

98
00:05:48.019 --> 00:05:52.526
And so if you are on a node that
was a VariableDeclaration, right?

99
00:05:52.526 --> 00:05:55.421
Yeah, that's a thing, we need to do stuff.

100
00:05:55.421 --> 00:05:58.910
But if you are on a, I don't know,
expression statement?

101
00:05:58.910 --> 00:06:02.241
That's not a thing, and it just moves
along, and it keeps going, right?

102
00:06:02.241 --> 00:06:06.146
And so the visitor can just say,
here are the things I care about,

103
00:06:06.146 --> 00:06:09.709
send me through the tree, and
I'll figure it out, right?

104
00:06:09.709 --> 00:06:13.777
And allows you to do lots of different
transformations with the same basic

105
00:06:13.777 --> 00:06:18.381
ability, cuz the ASD of your programming
language isn't necessarily changing.

106
00:06:18.381 --> 00:06:22.239
It's the things that you wanna
do depending on the test that

107
00:06:22.239 --> 00:06:26.810
you're trying to run,
that is the theoretically changing, right?

108
00:06:26.810 --> 00:06:29.438
So you'll see sometimes just the variable

109
00:06:29.438 --> 00:06:32.803
declaration have still like
it's a pattern, right?

110
00:06:32.803 --> 00:06:37.505
There's a variation on the theme, it can
still the pattern without necessarily

111
00:06:37.505 --> 00:06:39.590
being one way or the other, right?

112
00:06:39.590 --> 00:06:43.110
But the way that we're gonna write it
just gives us a little more flexibility

113
00:06:43.110 --> 00:06:46.838
is we're gonna give it another object
that will have an enter method, and

114
00:06:46.838 --> 00:06:52.170
potentially and/or an exit method, right?

115
00:06:52.170 --> 00:06:56.910
Again, our traversal functions
don't know anything about this.

116
00:06:56.910 --> 00:07:00.754
It's the visitor that will decide if
it needs to do anything on entrance or

117
00:07:00.754 --> 00:07:01.691
on exit, right?

118
00:07:01.691 --> 00:07:05.386
So we'll actually check the,
pay for this type of node.

119
00:07:05.386 --> 00:07:08.933
Does this visitor have any concerns
about what it does when it enters?

120
00:07:08.933 --> 00:07:11.684
And does it have any concerns about
what it does when it leaves, right?

121
00:07:11.684 --> 00:07:17.342
Cools, comment that out for
a second so I don't forget about it.

122
00:07:17.342 --> 00:07:22.397
So we'll say, let's just say like,

123
00:07:29.841 --> 00:07:31.425
&gt;&gt; Steve Kinney: These are node type,

124
00:07:31.425 --> 00:07:32.044
right?

125
00:07:32.044 --> 00:07:35.739
So go see, are there any methods
either enter or exit on this node?

126
00:07:35.739 --> 00:07:37.987
Those will decide whether or
not we do something.

127
00:07:37.987 --> 00:07:40.449
Regardless of whether or
not we decide to do something.

128
00:07:40.449 --> 00:07:42.591
We still need to traverse
down to the next node, right?

129
00:07:42.591 --> 00:07:44.797
It's not like, if do that, right?

130
00:07:44.797 --> 00:07:47.115
We're gonna like before we
do something on the end,

131
00:07:47.115 --> 00:07:49.076
we will try to see if we
have an entry method.

132
00:07:49.076 --> 00:07:53.844
If you have an entry method we will
do stuff, then we will traverse down,

133
00:07:53.844 --> 00:07:58.000
and then on the way back up we
will call the exit method, right?

134
00:07:58.000 --> 00:08:01.576
And so it's deep for search so
you go all the way down one branches tree,

135
00:08:01.576 --> 00:08:02.640
all the way back up.

136
00:08:02.640 --> 00:08:06.980
So we'll have an ability to kind of move,
to catch up on the way up and

137
00:08:06.980 --> 00:08:12.130
catch up on the way down in
the opposite order of course, right?

138
00:08:12.130 --> 00:08:17.400
And so we can say something if
there are methods at all, right?

139
00:08:17.400 --> 00:08:19.768
If there were no methods
we don't wanna have a,

140
00:08:19.768 --> 00:08:22.865
there is no enter on undefined,
I don't need that in my life.

141
00:08:22.865 --> 00:08:28.393
If methods &amp;&amp; methods.enter,
if you wanna add like the ability

142
00:08:28.393 --> 00:08:33.734
to have like optional changing
your language that'd be great.

143
00:08:33.734 --> 00:08:37.140
If there is a method object for

144
00:08:37.140 --> 00:08:41.499
that, and there is a method.enter,

145
00:08:41.499 --> 00:08:47.170
call it with the node and
the parent, right?

146
00:08:47.170 --> 00:08:52.210
So now there's visitor, upon visiting
something that I cared about would get

147
00:08:52.210 --> 00:08:56.150
access to the node and access to the
parent on every VariableDeclaration, and

148
00:08:56.150 --> 00:08:57.360
that's what it cared about.

149
00:08:57.360 --> 00:08:59.990
If it doesn't care about a certain
node type, it skips it, and

150
00:08:59.990 --> 00:09:01.450
it moves along, right?

151
00:09:01.450 --> 00:09:04.760
And if it does care about that node type,
then it's able to grab it, and

152
00:09:04.760 --> 00:09:06.780
keep humming along that way.

153
00:09:06.780 --> 00:09:07.380
So it's like, cool.

154
00:09:07.380 --> 00:09:11.164
On the way in,
if you care about this node at all, and

155
00:09:11.164 --> 00:09:16.946
you're concerned with entering, I will
hand you both the node and the parent.

156
00:09:16.946 --> 00:09:20.501
Cool, and

157
00:09:20.501 --> 00:09:24.847
then if there

158
00:09:24.847 --> 00:09:29.593
are methods.

159
00:09:39.497 --> 00:09:42.214
&gt;&gt; Steve Kinney: And methods of exit,
then we will go ahead and

160
00:09:42.214 --> 00:09:47.244
call the methods.exit,
&gt;&gt; Steve Kinney: On

161
00:09:47.244 --> 00:09:51.267
the node with the parent, right?

162
00:09:51.267 --> 00:09:54.806
In the middle is,
depending on your data structure,

163
00:09:54.806 --> 00:10:00.482
put an equal sign here before I forget,
is how you'll basically decide, all right?

164
00:10:00.482 --> 00:10:05.659
Does this kind of data structure have any

165
00:10:05.659 --> 00:10:10.843
way to go kind of across or down, right?

166
00:10:10.843 --> 00:10:16.095
Cool, so really we have our
data structures are pretty

167
00:10:16.095 --> 00:10:21.234
simple at this point which
is called expressions have

168
00:10:21.234 --> 00:10:26.734
the ability to have children
which is an across, right?

169
00:10:26.734 --> 00:10:31.355
And then those nodes you can go down with,
so we can kind of do, from any given

170
00:10:31.355 --> 00:10:35.489
singular node that is a call
expression will go across it siblings.

171
00:10:35.489 --> 00:10:40.042
And then those siblings we will be
effectively at the top of smaller trees.

172
00:10:40.042 --> 00:10:43.520
So It'll be relatively simple
implementation at this point.

173
00:10:43.520 --> 00:10:48.127
What we can do is just say,
there's two ways to do this,

174
00:10:48.127 --> 00:10:53.519
which is if we know that consistently
stuff like our arguments and

175
00:10:53.519 --> 00:10:55.788
our programs are all like.

176
00:10:55.788 --> 00:11:00.808
We've named everything in our obsession
victory syntax tree consistently.

177
00:11:00.808 --> 00:11:04.694
Then we're able to just like rely on hey,
I know if there's arguments,

178
00:11:04.694 --> 00:11:08.980
then I know it's an array, or I know if
there's params, I know it's an array.

179
00:11:08.980 --> 00:11:12.671
It seems like, hey,
does this node have arguments?

180
00:11:12.671 --> 00:11:13.317
Then I need to move across them.

181
00:11:13.317 --> 00:11:14.860
Params, I need to move across them.

182
00:11:14.860 --> 00:11:17.600
Children or a body,
then I need to move across them.

183
00:11:17.600 --> 00:11:20.553
And if you know that it's
always at the top of a tree,

184
00:11:20.553 --> 00:11:24.934
then you get to design your own AST,
based on the semantics of your language.

185
00:11:24.934 --> 00:11:28.782
So I'm gonna take
advantage of the fact that

186
00:11:28.782 --> 00:11:33.156
I know that node.arguments
is gonna be an array.

187
00:11:33.156 --> 00:11:36.472
So that's where we're gonna need
the second helper, which is traverseArray.

188
00:11:42.837 --> 00:11:48.877
&gt;&gt; Steve Kinney: Naming things is the
second hardest thing in computer science.

189
00:11:48.877 --> 00:11:56.029
We can give it an array which is
maybe the node.arguments, right?

190
00:11:56.029 --> 00:12:00.649
Cuz I don't want to reverse array to
like care what the array is called.

191
00:12:00.649 --> 00:12:04.057
So we're going to call an array
inside of traverse array, but

192
00:12:04.057 --> 00:12:07.345
like outside of that I don't
want to have to know anything.

193
00:12:07.345 --> 00:12:10.499
And the parent will be set
to be the current node, and

194
00:12:10.499 --> 00:12:13.308
then it will get a copy of the visitor,
right?

195
00:12:13.308 --> 00:12:18.174
So let's think about this again.

196
00:12:18.174 --> 00:12:19.702
Start at the top of the tree,

197
00:12:19.702 --> 00:12:23.285
check to see it says to know that
my visitor cares about I entering?

198
00:12:23.285 --> 00:12:24.190
No?

199
00:12:24.190 --> 00:12:28.299
Hey, do you have children
who are siblings?

200
00:12:28.299 --> 00:12:29.873
I wanna move across them, right?

201
00:12:29.873 --> 00:12:34.407
I'm going to effectively,
eventually iterate over them.

202
00:12:34.407 --> 00:12:37.181
I will say that the current
node is the parent, and

203
00:12:37.181 --> 00:12:40.170
I'll hand you the visitor
to see if it'll check you.

204
00:12:40.170 --> 00:12:43.159
And it'll keep going until it
gets to the very bottom, and

205
00:12:43.159 --> 00:12:45.063
then it'll begin to work its way up.

206
00:12:48.979 --> 00:12:52.336
&gt;&gt; Steve Kinney: All right, so cool.

207
00:12:52.336 --> 00:12:56.314
We're actually only really gonna really
worry about entering at this point.

208
00:12:56.314 --> 00:12:59.758
But we'll go through,
am I do an exit will say,

209
00:12:59.758 --> 00:13:02.869
let's add this traverse array function.

210
00:13:05.792 --> 00:13:08.126
&gt;&gt; Steve Kinney: This should not be
very surprising and how it works.

211
00:13:08.126 --> 00:13:12.760
Traverse array is gonna take, we already
know the arguments whose we saw him above.

212
00:13:12.760 --> 00:13:19.715
We implemented it before we had it,
which is gonna take some array,

213
00:13:19.715 --> 00:13:23.632
a parent node and the visitor, okay?

214
00:13:23.632 --> 00:13:29.652
And then it's going to do is iterate
over the array, you use either for

215
00:13:29.652 --> 00:13:34.156
loop or for each,
whichever one makes you happier.

216
00:13:34.156 --> 00:13:35.594
This one makes me happier.

217
00:13:37.461 --> 00:13:44.829
&gt;&gt; Steve Kinney: So
you move over that, right?

218
00:13:44.829 --> 00:13:48.550
And so move across the siblings and
start descending down on each one of them.

219
00:13:48.550 --> 00:13:51.045
So move them and go.

220
00:13:57.598 --> 00:14:02.840
&gt;&gt; Steve Kinney: And that's, we didn't
need to call this traverseNode here.

221
00:14:02.840 --> 00:14:07.570
But the ability to just send down a node
and across set of siblings, right?

222
00:14:07.570 --> 00:14:08.320
And we'll enter and

223
00:14:08.320 --> 00:14:13.692
we'll exit is effectively our entire
traversal functionality, right?

224
00:14:13.692 --> 00:14:18.312
Now obviously, this is assuming that
arguments is the only kind of siblings

225
00:14:18.312 --> 00:14:22.222
that we're gonna have to deal with,
so on and so forth, right?

226
00:14:22.222 --> 00:14:24.444
You will need more stuff as time goes on.

227
00:14:24.444 --> 00:14:26.185
And there's a lot of ways helpers and

228
00:14:26.185 --> 00:14:29.640
stuff along those lines to figure
out the common things that you do.

229
00:14:29.640 --> 00:14:31.990
But this will effectively work.

230
00:14:31.990 --> 00:14:35.673
So when we get a new node, new visitor.

231
00:14:35.673 --> 00:14:41.260
We'll say,
&gt;&gt; Steve Kinney: Start

232
00:14:41.260 --> 00:14:45.333
at the top,
&gt;&gt; Steve Kinney: And start going down.

