WEBVTT

1
00:00:00.831 --> 00:00:02.273
&gt;&gt; Steve Kinney: So let's handle the kind
of terminology part of the show.

2
00:00:02.273 --> 00:00:05.265
What even is a compiler, right?

3
00:00:05.265 --> 00:00:07.391
The kind of like simple answer,

4
00:00:07.391 --> 00:00:13.000
it is something that turns a higher-level
language into a lower-level language.

5
00:00:13.000 --> 00:00:15.642
I put an asterisk there cuz I don't know,

6
00:00:15.642 --> 00:00:20.791
we know that a lot of languages these
days compile to what, JavaScript, right?

7
00:00:20.791 --> 00:00:23.868
It'll be interesting to see how much
of that changes to WebAssembly and

8
00:00:23.868 --> 00:00:25.006
stuff along those lines.

9
00:00:25.006 --> 00:00:27.816
But right now, many, many, many languages,

10
00:00:27.816 --> 00:00:31.765
even JavaScript is effectively
compiled to JavaScript, right?

11
00:00:31.765 --> 00:00:36.251
As kind of the lingua franca of
the browser, and the only game in town.

12
00:00:36.251 --> 00:00:39.759
So yeah, it could be a higher-level
language to a lower-level language.

13
00:00:39.759 --> 00:00:44.527
But all things considered, JavaScript
is a fairly high-level language, right?

14
00:00:44.527 --> 00:00:49.427
But ReasonML, Elm, CoffeeScript,
right, those are all languages that

15
00:00:49.427 --> 00:00:53.652
kind of go from one kind of
browser-based language to another.

16
00:00:53.652 --> 00:00:59.973
And at some point, even JavaScript,
right, is effectively,

17
00:00:59.973 --> 00:01:05.371
that parser and
compiler is written in C++, right?

18
00:01:05.371 --> 00:01:10.244
And so it's just from one language to
another language in a lot of cases.

19
00:01:10.244 --> 00:01:13.989
Source code is meant to be human readable,
right?

20
00:01:13.989 --> 00:01:16.690
And so it's the compiler's job
to figure that out, right?

21
00:01:16.690 --> 00:01:18.702
And so there's a lot of languages,

22
00:01:18.702 --> 00:01:23.139
like this lovely one here whose name I
won't mention cuz it has a bad word in it.

23
00:01:23.139 --> 00:01:27.561
Mark told me I was allowed to use
the word, but I'm not going to [LAUGH].

24
00:01:27.561 --> 00:01:28.819
&gt;&gt; Speaker 2: Brain f.

25
00:01:28.819 --> 00:01:33.733
&gt;&gt; Steve Kinney: Brain f, so yeah, this
kind of breaks the rule of a high-level

26
00:01:33.733 --> 00:01:37.001
language into a lower-level language.

27
00:01:37.001 --> 00:01:39.272
It's basically shifting
bits around to do things.

28
00:01:39.272 --> 00:01:42.037
This console logs hello world,
in case you're wondering.

29
00:01:42.037 --> 00:01:44.851
And yes, I did spend the time
to pull it into a repl,

30
00:01:44.851 --> 00:01:48.273
transpile it into this to make this slide,
you're welcome.

31
00:01:48.273 --> 00:01:52.704
So yeah, this kinda breaks the role
of a higher-level language that gets

32
00:01:52.704 --> 00:01:57.563
transpiled into a lower-level language
because it's kinda the opposite, but

33
00:01:57.563 --> 00:01:59.576
I think it makes a general point.

34
00:01:59.576 --> 00:02:04.412
So really, a compiler is just a bunch
of smaller programs that are running.

35
00:02:04.412 --> 00:02:08.586
We're gonna actually play
with both a little bit.

36
00:02:08.586 --> 00:02:12.324
We're gonna stick one toe into
playing around with compilers.

37
00:02:12.324 --> 00:02:14.640
We'll stick one toe into playing
around with an interpreter, right,

38
00:02:14.640 --> 00:02:15.924
the thing that actually runs our code.

39
00:02:15.924 --> 00:02:19.559
We're gonna build a repl, we'll build
something that you can just run a command

40
00:02:19.559 --> 00:02:21.068
line tool and evaluate the code.

41
00:02:21.068 --> 00:02:24.906
We'll also talk a little bit about like
pulling apart an AST, rearranging it so

42
00:02:24.906 --> 00:02:27.785
we can just hand it off to Babel and
turn it into JavaScript.

43
00:02:27.785 --> 00:02:30.848
Right, so we're kind of gonna
have our cake and eat it too,

44
00:02:30.848 --> 00:02:32.827
and have one foot in both worlds here.

45
00:02:32.827 --> 00:02:37.589
But the parts of a compiler, effectively,
you've got parsing, transformation, and

46
00:02:37.589 --> 00:02:38.803
generation, right?

47
00:02:38.803 --> 00:02:42.209
Parsing is, your source code,
at the end of the day,

48
00:02:42.209 --> 00:02:47.055
is just a big old string of text, [LAUGH]
that you could read off the file system

49
00:02:47.055 --> 00:02:50.421
you can pull in from the network,
so on and so forth.

50
00:02:50.421 --> 00:02:54.055
And you've got to make some
kind of sense of that, right?

51
00:02:54.055 --> 00:02:58.024
And parsing, we'll see,
has effectively two parts, right?

52
00:02:58.024 --> 00:03:01.669
First of all, breaking it into
what we call tokens, right,

53
00:03:01.669 --> 00:03:05.457
the little tiny pieces,
what is a word, okay, that's a for,

54
00:03:05.457 --> 00:03:08.549
that's an if, right, so
on and so forth, right?

55
00:03:08.549 --> 00:03:12.097
And then once we have all those little
tokens, right, then we can go ahead and

56
00:03:12.097 --> 00:03:14.771
figure out, all right,
what dpes it all mean, right, so

57
00:03:14.771 --> 00:03:16.377
there's kinda two stages there.

58
00:03:16.377 --> 00:03:21.718
Once we've figured out what the code is
and what it means, to get it to that,

59
00:03:21.718 --> 00:03:27.810
whether it's a lower-level language or,
in Brain f's case, a higher-level one,

60
00:03:27.810 --> 00:03:32.331
right, we have to go and
transform it into that target, right?

61
00:03:32.331 --> 00:03:35.710
And that could be JavaScript,
you could also target LLVM and

62
00:03:35.710 --> 00:03:39.497
compile to machine code or
even web assembly through that, right?

63
00:03:39.497 --> 00:03:41.462
You can target the JVM if you want, right?

64
00:03:41.462 --> 00:03:44.701
There's a bunch of different options
that you can kind of look at.

65
00:03:44.701 --> 00:03:48.963
And then finally, generating that code,
once we've kind of taken the general,

66
00:03:48.963 --> 00:03:53.126
when we parse, we're trying to figure
out what the code means in our language.

67
00:03:53.126 --> 00:03:56.162
And when we're transforming it, we're
trying to figure out how to put that in

68
00:03:56.162 --> 00:03:58.186
the logic that the target
language can understand.

69
00:03:58.186 --> 00:04:00.113
And then we kind of generate
that language out, right?

70
00:04:00.113 --> 00:04:04.625
And what we're gonna do in this course
is effectively take one or two small,

71
00:04:04.625 --> 00:04:07.515
little examples, and
basically use it so that we

72
00:04:07.515 --> 00:04:12.472
can basically turn the tree into a tree
that Babel's generator just understands.

73
00:04:12.472 --> 00:04:14.848
And we see JavaScript
spit out the other side.

74
00:04:14.848 --> 00:04:19.221
Right, we'll just do it with
effectively our own syntax into just

75
00:04:19.221 --> 00:04:24.156
traditional function calls, but
I think it'll kind of show how it works.

76
00:04:24.156 --> 00:04:27.266
Also talk a little bit about
an interpreter, right,

77
00:04:27.266 --> 00:04:30.102
interpreter isn't
necessarily going ahead and

78
00:04:30.102 --> 00:04:34.606
turning it into different source code,
it's actually running it, right?

79
00:04:34.606 --> 00:04:37.558
And we will leverage JavaScript
to make that happen, right?

80
00:04:37.558 --> 00:04:40.782
We're not gonna have to implement
the idea of an array ourself or

81
00:04:40.782 --> 00:04:42.284
anything along those lines.

82
00:04:42.284 --> 00:04:45.117
But we'll have the ability
to kind of take code and

83
00:04:45.117 --> 00:04:48.159
execute it by leveraging another platform,
right?

