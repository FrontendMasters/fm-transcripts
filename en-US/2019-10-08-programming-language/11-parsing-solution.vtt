WEBVTT

1
00:00:00.201 --> 00:00:06.776
&gt;&gt; Steve: So I'm gonna un-skip them both,
&gt;&gt; Steve: We

2
00:00:06.776 --> 00:00:14.082
haven't implemented any recursion yet, so
we shouldn't have any headaches just yet.

3
00:00:17.753 --> 00:00:21.039
&gt;&gt; Steve: npm test, and
we'll say parse.test.

4
00:00:24.268 --> 00:00:25.267
&gt;&gt; Steve: I'll try it out and

5
00:00:25.267 --> 00:00:28.144
they fail which is what we
would expect which is nothing

6
00:00:28.144 --> 00:00:32.658
gets returned out that function because we
never find them return anything, right?

7
00:00:32.658 --> 00:00:37.745
[LAUGH] Sometimes it would be more
worrying if that test passed, right.

8
00:00:37.745 --> 00:00:40.591
So all I'm gonna do is
I'm gonna just grab this,

9
00:00:43.642 --> 00:00:45.171
&gt;&gt; Steve: And we'll say if it's string,

10
00:00:45.171 --> 00:00:46.822
give me that 'Stringliteral'.

11
00:00:46.822 --> 00:00:51.605
And if we look closely at the test for

12
00:00:51.605 --> 00:00:55.463
the,
&gt;&gt; Steve: Identifier,

13
00:00:55.463 --> 00:00:57.047
you can see there's actually a name.

14
00:00:57.047 --> 00:00:59.990
You're why did you make it different?

15
00:00:59.990 --> 00:01:04.171
When you design your own language,
you can make those decisions for yourself.

16
00:01:04.171 --> 00:01:09.101
When one of us is also going to try to fit
in using Babel to transpire to JavaScript

17
00:01:09.101 --> 00:01:13.604
again like I told you I tried to stay
relatively close to the golden path.

18
00:01:13.604 --> 00:01:19.618
So that we would get the hang of using
the visitor pattern to transform the AST,

19
00:01:19.618 --> 00:01:24.740
but not have to do so much work that
we spent bogged down in the ways.

20
00:01:24.740 --> 00:01:27.491
We've learned the concept and
be able to do it but

21
00:01:27.491 --> 00:01:29.853
not have to like drilled into the ground.

22
00:01:29.853 --> 00:01:33.245
So I'm gonna kinda follow the path and
that one,

23
00:01:33.245 --> 00:01:36.657
I'm gonna use the name there as well,
awesome.

24
00:01:36.657 --> 00:01:41.357
So I'll go ahead and I've got the string
and now we'll get the identifier.

25
00:01:41.357 --> 00:01:48.435
So it's a token type of name, we'll go
ahead and we'll do with the identifier.

26
00:01:50.711 --> 00:01:52.848
&gt;&gt; Steve: And
this will be the name property.

27
00:01:58.720 --> 00:02:01.814
&gt;&gt; Steve: Awesome, so
we've got those two in place,

28
00:02:01.814 --> 00:02:06.330
now we wanna a single call expression
where I just add 2 plus 2 or

29
00:02:06.330 --> 00:02:10.534
add 2 and 2, right,
it'll do the plus part eventually.

30
00:02:10.534 --> 00:02:14.241
And then the idea of having nested
function calls like what happens if you

31
00:02:14.241 --> 00:02:16.624
have a function inside of a function,
right?

32
00:02:16.624 --> 00:02:18.517
There's a great opportunity for

33
00:02:18.517 --> 00:02:22.718
an exhibit meme that did not put in
the slides, we can edit that at in post.

34
00:02:22.718 --> 00:02:27.554
So we need to go ahead and
start to figure out how to implement that.

35
00:02:27.554 --> 00:02:31.888
Which is like that's where the ecurssion
part, right now, we just have the ends.

36
00:02:31.888 --> 00:02:34.467
We have the places where
the recurssion will end, right?

37
00:02:34.467 --> 00:02:38.311
When you get to one of the single
values that can't have anything nested,

38
00:02:38.311 --> 00:02:41.039
we have those test passing,
so how might we do this?

39
00:02:41.039 --> 00:02:43.590
Well, there's two things
that we wanna think about,

40
00:02:43.590 --> 00:02:45.373
like we were gonna cheat a little bit.

41
00:02:45.373 --> 00:02:50.125
And we're gonna use the fact that we have
a race to be kind of a data structure for

42
00:02:50.125 --> 00:02:54.661
us that really makes sense and allows
you some pretty cool things later on.

43
00:02:54.661 --> 00:02:58.110
So we've got this ability to parenthesize,

44
00:02:58.110 --> 00:03:01.479
I'm not gonna say that
word again out loud.

45
00:03:01.479 --> 00:03:04.586
Which is the ability to
kind of go through, and

46
00:03:04.586 --> 00:03:09.539
this is using the parentheses to guide
the structure of our data, right.

47
00:03:09.539 --> 00:03:13.328
Which is you know, that if you see a
parentheses you've entered a function, but

48
00:03:13.328 --> 00:03:16.283
if you see another one before
you see the closing parenthesis,

49
00:03:16.283 --> 00:03:18.031
you've entered a nested function.

50
00:03:18.031 --> 00:03:20.649
Right, and so
we can kinda of create ourselves a data

51
00:03:20.649 --> 00:03:23.459
structure that we can use in
order to make sense of that.

52
00:03:23.459 --> 00:03:26.306
So I'm gonna write a version
that is not going to work.

53
00:03:26.306 --> 00:03:30.433
[LAUGH] I will tell you why it doesn't
work before I ran the test to see why it

54
00:03:30.433 --> 00:03:33.895
doesn't work, right but
see if you can spot it as I write it.

55
00:03:33.895 --> 00:03:38.725
So before we use that cursor, and
I think Jason asked me question of like

56
00:03:38.725 --> 00:03:42.842
can you use arrays, and
now I have an array of tokens so yeah.

57
00:03:42.842 --> 00:03:47.129
This is where we will
be able to use peak and

58
00:03:47.129 --> 00:03:52.642
pop again now, so
I'll say const token is go ahead and

59
00:03:52.642 --> 00:03:56.083
pop off the action of the tokens.

60
00:03:56.083 --> 00:03:59.346
Can someone be on the lookout for when I
forget to put an S so I put an extra S on

61
00:03:59.346 --> 00:04:02.901
token at one point or another it's going
to happen at one point, I promise you.

62
00:04:02.901 --> 00:04:05.626
It's not like a hidden thing and
we do on purpose.

63
00:04:05.626 --> 00:04:12.659
So if it's an opening parenthesis,
&gt;&gt; Steve: The token of value,

64
00:04:12.659 --> 00:04:16.531
now we know that we've entered one, right,
we've entered an expression in our case.

65
00:04:16.531 --> 00:04:20.385
So we're in there I'm gonna say okay,
I'm in an expression,

66
00:04:20.385 --> 00:04:23.383
I'm not a number, a string,
or an identifier.

67
00:04:23.383 --> 00:04:26.532
I need to go in and I need to find one so
I'm gonna start a new expression.

68
00:04:30.732 --> 00:04:34.817
&gt;&gt; Steve: And we're gonna say cool,
and now until we come across a closing

69
00:04:34.817 --> 00:04:40.983
parenthesis, we know that we're going
need to put things onto that expression.

70
00:04:40.983 --> 00:04:47.245
&gt;&gt; Steve: So we'll go ahead and we'll say,
&gt;&gt; Steve: While it's,

71
00:04:47.245 --> 00:04:53.664
get that on the right side there,
while it's not is closing parenthesis.

72
00:04:53.664 --> 00:04:56.692
We'll go ahead and
say for the token value.

73
00:05:00.086 --> 00:05:03.688
&gt;&gt; Steve: All right, in that case,
no, it's not anything I ever wanted.

74
00:05:03.688 --> 00:05:07.134
We'll go in and say, okay,
then you'd go in onto the expression.

75
00:05:15.109 --> 00:05:17.590
&gt;&gt; Steve: Cool, when you put the token on.

76
00:05:17.590 --> 00:05:22.923
This isn't gonna work that doesn't really
matter, and then we'll pop one off.

77
00:05:27.099 --> 00:05:31.801
&gt;&gt; Steve: Cuz when we get to the closing
parenthesis we need to, we don't need it.

78
00:05:31.801 --> 00:05:33.230
Basically when we when you see me pop, or

79
00:05:33.230 --> 00:05:34.913
iterate the cursor and
not do anything with it,

80
00:05:34.913 --> 00:05:37.795
it's because I've reached something that
I wish to throw into the garbage can.

81
00:05:37.795 --> 00:05:42.511
I don't need the closing, I didn't
do anything with the opening brace,

82
00:05:42.511 --> 00:05:47.238
I don't need anything with the closing
brace either, so we'll do that.

83
00:05:51.494 --> 00:05:52.964
&gt;&gt; Steve: And
then we'll return the expression and

84
00:05:52.964 --> 00:05:54.647
that'll be the process
of parenthesising it.

85
00:05:54.647 --> 00:05:59.467
So, what's gonna happen with that?

86
00:05:59.467 --> 00:06:03.688
Well, what's gonna happen with
my nested expressions, right, or

87
00:06:03.688 --> 00:06:05.508
anything along those lines,

88
00:06:05.508 --> 00:06:10.197
like we need to also continue to do this
until we hit anyone those edge nodes.

89
00:06:10.197 --> 00:06:14.097
So it means,
we need our good friend recursion, right?

90
00:06:14.097 --> 00:06:18.605
And recursion will say like,
okay, look at the next node,

91
00:06:18.605 --> 00:06:20.959
are you also a call statement?

92
00:06:20.959 --> 00:06:22.238
Well then I need to dig in and
do the same thing for you.

93
00:06:22.238 --> 00:06:29.341
So this will be where we,
&gt;&gt; Steve: Parentheses eyes,

94
00:06:29.341 --> 00:06:30.341
all the tokens again and

95
00:06:30.341 --> 00:06:32.954
keep iterating through them
until you get to the end, right.

96
00:06:32.954 --> 00:06:37.818
Like when you get to something where this
is not true at all like where's this

97
00:06:37.818 --> 00:06:40.858
token, and
then we will return all the tokens.

98
00:06:40.858 --> 00:06:45.911
This eventually becomes a no op, right,
when there's no more as either edge knows

99
00:06:45.911 --> 00:06:50.618
that there's nothing left in the array,
this condition will never happen.

100
00:06:50.618 --> 00:06:56.572
It will be like, okay, we've popped
the last closing brace off, here we go.

101
00:06:56.572 --> 00:06:59.532
And then we're ready to rock and roll, so

102
00:06:59.532 --> 00:07:03.606
we do need to like kinda pull
these together a little bit.

103
00:07:03.606 --> 00:07:06.630
So we've got this ability
to go through but

104
00:07:06.630 --> 00:07:12.103
now we have these data structures and
we need to actually work with them here.

105
00:07:12.103 --> 00:07:16.586
Like this, this parse function has no
concept of what we did up here, right?

106
00:07:16.586 --> 00:07:21.373
It's like, cool, I know about strings,
and I know about identifiers, and

107
00:07:21.373 --> 00:07:22.784
I know about numbers.

108
00:07:22.784 --> 00:07:26.127
I don't know about what you just did in
the thing you did in the function that

109
00:07:26.127 --> 00:07:27.094
leads up to this one.

110
00:07:27.094 --> 00:07:31.099
So, we can go ahead and we can implement
that, which is we know that if it's

111
00:07:31.099 --> 00:07:33.909
an expression,
what data structure did we make it?

112
00:07:37.548 --> 00:07:39.583
&gt;&gt; Steve: Right here,
it's an array, right?

113
00:07:39.583 --> 00:07:42.385
And so right in here,
we don't have any concept of that.

114
00:07:42.385 --> 00:07:45.956
So we need to say all right,
cool, what we'll say is,

115
00:07:45.956 --> 00:07:50.161
this is actually gonna handle
the pop into the tokens for us now.

116
00:07:50.161 --> 00:07:56.579
We'll say,
&gt;&gt; Steve: If,

117
00:07:58.693 --> 00:08:00.080
&gt;&gt; Steve: That'll love JavaScript,

118
00:08:04.524 --> 00:08:05.946
&gt;&gt; Steve: If Array.isArray,

119
00:08:05.946 --> 00:08:08.474
cuz we're gonna pop tokens here now.

120
00:08:11.083 --> 00:08:15.695
&gt;&gt; Steve: If Array.isArray for
the tokens, then get me the first one,

121
00:08:15.695 --> 00:08:19.877
cuz that's gonna be the function
that we're calling.

122
00:08:19.877 --> 00:08:24.289
And on a list, you can have as
many arguments as you want, right?

123
00:08:24.289 --> 00:08:26.444
They kinda basically reduce them all down,
right?

124
00:08:26.444 --> 00:08:29.401
So if you give add two arguments,
it will add those two numbers together.

125
00:08:29.401 --> 00:08:33.710
If you give add 17 arguments, it will
add those 17 numbers together, right?

126
00:08:33.710 --> 00:08:36.264
So, we'll say first and
we'll grab all of the rest of them.

127
00:08:38.838 --> 00:08:44.114
&gt;&gt; Steve: This is effectually also like
popping one off cuz you're grabbing

128
00:08:44.114 --> 00:08:49.686
the first one and then you're grabbing
all of the rest of them as well.

129
00:08:49.686 --> 00:08:53.878
And then in that case we're gonna return,
&gt;&gt; Steve: A type call expression.

130
00:08:58.104 --> 00:09:02.182
&gt;&gt; Steve: The name, cuz we know
the function name is that first one,

131
00:09:02.182 --> 00:09:05.104
is going to be that first token's value.

132
00:09:09.877 --> 00:09:12.205
&gt;&gt; Steve: Now, if we want to be
super compliant with Babble,

133
00:09:12.205 --> 00:09:14.657
it would actually use a full
identifier in this case.

134
00:09:14.657 --> 00:09:18.192
And we would parse it like that,
but that's really verbose.

135
00:09:18.192 --> 00:09:21.941
It all made the unit test more confusing,
so I opted not to do that.

136
00:09:21.941 --> 00:09:24.738
Luckily, we have a way
to rectify that later.

137
00:09:24.738 --> 00:09:28.994
So the arguments are all the rest of them,
but

138
00:09:28.994 --> 00:09:33.811
those arguments also could
be any of these as well.

139
00:09:33.811 --> 00:09:35.993
They could be tokens at this point, so

140
00:09:35.993 --> 00:09:38.596
they need to be handled
recursively as well.

141
00:09:44.964 --> 00:09:46.188
&gt;&gt; Steve: All right, so
here we're going through,

142
00:09:46.188 --> 00:09:47.280
and we're looking for parentheses.

143
00:09:47.280 --> 00:09:50.651
We're trying to build up all our arrays,
and it's finding all of the arrays for us,

144
00:09:50.651 --> 00:09:52.328
it's finding all of the function calls.

145
00:09:52.328 --> 00:09:56.675
But then when we go to parse it that's
when we have to get those leaf nodes and

146
00:09:56.675 --> 00:10:00.346
turn them into the identifier node,
the string node, right.

147
00:10:00.346 --> 00:10:02.836
So go ahead find me all of my
functions in this first one.

148
00:10:02.836 --> 00:10:06.225
Once we've found the kind of
boundaries of the functions,

149
00:10:06.225 --> 00:10:10.926
go ahead and turn the rest of those tokens
into the actual literal nodes on my tree.

150
00:10:13.643 --> 00:10:15.357
&gt;&gt; Steve: All right,
let's see if those tests passed.

151
00:10:15.357 --> 00:10:18.298
I wrote a lot of code
which always makes me

152
00:10:18.298 --> 00:10:21.853
nervous that I've made
some terrible mistake.

153
00:10:24.682 --> 00:10:27.977
&gt;&gt; Steve: What's great is it's
been a little sad right now that,

154
00:10:27.977 --> 00:10:31.622
cuz we're still figuring out
the semantics of the language,

155
00:10:31.622 --> 00:10:34.021
we can't use our language yet, right.

156
00:10:34.021 --> 00:10:36.236
But we got to the point where
we can identify all the tokens.

157
00:10:36.236 --> 00:10:37.776
And should these tests pass,

158
00:10:37.776 --> 00:10:41.603
we've got another point where we can
figure out their semantic meaning.

159
00:10:41.603 --> 00:10:44.145
So you can kinda guess
what the next phase is.

160
00:10:44.145 --> 00:10:48.217
We know what the intent of the program is,
now we gotta do something with it, so

161
00:10:48.217 --> 00:10:49.404
let's give it a shot.

162
00:10:49.404 --> 00:10:53.289
So I had like a few likes small
errors that I need to rectify,

163
00:10:53.289 --> 00:10:58.516
I made a joke before I said I was gonna
mess up pluralization at one point, I did.

164
00:10:58.516 --> 00:11:03.948
[LAUGH] Right, which is two things
that I made a mistake on was.

165
00:11:03.948 --> 00:11:07.129
Opening parenthesis, we're checking if
it's the only thing in parentheses.

166
00:11:07.129 --> 00:11:10.682
Then we were also checking
the same value again, right, and

167
00:11:10.682 --> 00:11:12.919
you can't actually be both, right?

168
00:11:12.919 --> 00:11:14.963
And so what we wanna do is
actually look at the next value.

169
00:11:14.963 --> 00:11:17.926
Is the next value the closing parenthesis?

170
00:11:17.926 --> 00:11:21.685
Then we're done, if not,
I need to actually do stuff, right?

171
00:11:21.685 --> 00:11:26.112
So, the two things I needed to fix
were to peek ahead at the next token,

172
00:11:26.112 --> 00:11:28.753
to see if it was the closing parentheses.

173
00:11:28.753 --> 00:11:32.756
And anything is not the closing
parentheses we wanna put in right to look

174
00:11:32.756 --> 00:11:34.635
again, there is not gonna work.

175
00:11:34.635 --> 00:11:39.510
Also, when I said it should be a no op,
because we want to get that token and

176
00:11:39.510 --> 00:11:40.859
return that token.

177
00:11:40.859 --> 00:11:43.062
I was returning the tokens plural,

178
00:11:43.062 --> 00:11:48.065
which means I was returning the argument
again, which was not working, right.

179
00:11:48.065 --> 00:11:51.937
And so, minor mishap on the on
the pluralization there, so

180
00:11:51.937 --> 00:11:54.344
let's kinda talk through it again.

181
00:11:54.344 --> 00:11:57.400
We'll get all the tokens,
get me the first one on there,

182
00:11:57.400 --> 00:12:00.980
right if it's an opening parenthesis,
okay, we're starting.

183
00:12:00.980 --> 00:12:06.363
Keep looking at the next one, if the next
one isn't there, is that the case?

184
00:12:06.363 --> 00:12:10.750
We're gonna recursively keep going
through, when you find that closing token,

185
00:12:10.750 --> 00:12:12.093
throw it in the garbage.

186
00:12:12.093 --> 00:12:16.612
We're done with our expression,
we give you that back.

187
00:12:16.612 --> 00:12:22.075
If what we were dealing with was
not an opening parentheses at all.

188
00:12:22.075 --> 00:12:28.152
Then, this was the kind of end of our
recursion, right do we hit the leaf node.

189
00:12:28.152 --> 00:12:32.980
So we kind of call this tokens floral,
but we know that a single token can

190
00:12:32.980 --> 00:12:36.610
come out of here,
if there was no opening practices.

191
00:12:36.610 --> 00:12:41.405
Either an array is coming out, cuz we
found opening parentheses, we started

192
00:12:41.405 --> 00:12:46.146
an array, we collected them all, or
we didn't find opening parenthesis.

193
00:12:46.146 --> 00:12:47.535
Which means it was a single node,

194
00:12:47.535 --> 00:12:50.377
right, so within which point we
just rename it token at that point.

195
00:12:50.377 --> 00:12:55.234
And we go through and figure out which
token it actually was, that make sense?

196
00:12:55.234 --> 00:12:58.389
As much as like recursion can?

197
00:13:00.852 --> 00:13:02.413
&gt;&gt; Steve: It's like
the joke I made earlier,

198
00:13:02.413 --> 00:13:04.911
which is recursion when it
works makes complete sense and

199
00:13:04.911 --> 00:13:08.258
recursion when your tests are failing
it's I don't understand anything.

200
00:13:08.258 --> 00:13:10.748
[LAUGH] What is gravity, what's up?

201
00:13:10.748 --> 00:13:13.988
&gt;&gt; Speaker 2: Minor points
in the expression variable,

202
00:13:13.988 --> 00:13:19.031
your JavaScript doesn't totally care,
but should that be a let?

203
00:13:19.031 --> 00:13:23.471
&gt;&gt; Steve: No further, you can push on
to it if it's you can mutate constant.

204
00:13:23.471 --> 00:13:27.574
You could not replace it
with a new expression.

205
00:13:27.574 --> 00:13:31.118
So if I wanted to use array.concat or
use the spread operator and

206
00:13:31.118 --> 00:13:34.081
places a brand new
preferentially different array.

207
00:13:34.081 --> 00:13:36.730
JavaScript would get very angry with
me and not allow me to do that.

208
00:13:36.730 --> 00:13:40.966
But it will allow me to push
additional things onto it, so

209
00:13:40.966 --> 00:13:44.425
yeah, constants are mutable in JavaScript.

210
00:13:44.425 --> 00:13:48.035
&gt;&gt; Speaker 2: Thank you for
&gt;&gt; Steve: Yeah, yeah.

