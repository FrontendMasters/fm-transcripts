WEBVTT

1
00:00:00.000 --> 00:00:02.156
&gt;&gt; Steve Kinney: We'll take a look at
some of the first few tests first.

2
00:00:02.156 --> 00:00:05.822
We'll look at parse.test.js.

3
00:00:05.822 --> 00:00:13.762
So it should return a token of the same
numerical level for tokens, right?

4
00:00:13.762 --> 00:00:18.525
So hey, if you come across
a number in our token bin,

5
00:00:18.525 --> 00:00:23.735
why don't you turn this into
a numeric literal, right?

6
00:00:23.735 --> 00:00:25.905
And so this is just for the number two.

7
00:00:25.905 --> 00:00:30.523
The number two would have just been turned
into one number token with a value of 2.

8
00:00:30.523 --> 00:00:33.212
And we turn it into the actual
literal syntax, right,

9
00:00:33.212 --> 00:00:35.910
and this is mostly because
that's what value this is.

10
00:00:35.910 --> 00:00:40.413
And so that will be the kind of the first
thing and then we can say okay strings,

11
00:00:40.413 --> 00:00:44.522
should become string literals,
names become identifiers, right?

12
00:00:44.522 --> 00:00:47.331
For a lot of our values,
they're pretty straightforward.

13
00:00:47.331 --> 00:00:50.735
And then we'll start to string some stuff
together with some call expressions and

14
00:00:50.735 --> 00:00:51.833
stuff along those lines.

15
00:00:51.833 --> 00:00:53.495
So we're gonna kinda
do this in two phases.

16
00:00:53.495 --> 00:00:57.434
We're gonna use those
parentheses to kind of inspire

17
00:00:57.434 --> 00:01:00.504
what the kind of hierarchical syntax is.

18
00:01:00.504 --> 00:01:03.787
And then we'll actually parse
the values to actually figure out

19
00:01:03.787 --> 00:01:04.889
the rest of the tree.

20
00:01:04.889 --> 00:01:08.688
So let's head into parse.js.

21
00:01:08.688 --> 00:01:12.431
And you can see that I've done
a teeny bit of work for you.

22
00:01:12.431 --> 00:01:15.800
So I've got these utilities here and
this opening parenthesis and

23
00:01:15.800 --> 00:01:18.697
this closing parenthesis
should need no introduction.

24
00:01:18.697 --> 00:01:21.128
You can imagine what they do.

25
00:01:21.128 --> 00:01:24.814
Peek and pop are kind of
functional programming things.

26
00:01:24.814 --> 00:01:27.869
Peek looks at the first thing in an array.

27
00:01:27.869 --> 00:01:30.589
So it's like what is the next token,
right?

28
00:01:30.589 --> 00:01:32.942
And pop gives you the first
thing off the array.

29
00:01:32.942 --> 00:01:37.296
So it's basically a way to look at
the stack of tokens that we picked up.

30
00:01:37.296 --> 00:01:42.230
All right, so let's go ahead and
kinda get the general kinda

31
00:01:42.230 --> 00:01:46.790
structure in place here which is,
we'll say, parse.

32
00:01:46.790 --> 00:01:48.923
Parse is gonna take our tokens.

33
00:01:50.835 --> 00:01:56.397
&gt;&gt; Steve Kinney: And
we'll start with our very first token.

34
00:02:03.381 --> 00:02:04.785
&gt;&gt; Steve Kinney: So pop it off the front.

35
00:02:08.479 --> 00:02:13.692
&gt;&gt; Steve Kinney: If the token.type,

36
00:02:15.941 --> 00:02:18.073
&gt;&gt; Steve Kinney: Is a number.

37
00:02:18.073 --> 00:02:21.571
And this is one of those things where
honestly when I was doing this for

38
00:02:21.571 --> 00:02:25.019
realsies I had a is number token
helper and I never thought about it.

39
00:02:25.019 --> 00:02:28.944
I never thought about the fact that
I would mistype number ever again.

40
00:02:28.944 --> 00:02:31.020
But I'm not doing that just for
the sake of clarity, right?

41
00:02:31.020 --> 00:02:33.417
If I do too many helpers
like this is cool,

42
00:02:33.417 --> 00:02:36.029
[LAUGH] I don't really
know what's going on.

43
00:02:36.029 --> 00:02:40.591
So then we'll return and I would again use
a function almost like an action creator

44
00:02:40.591 --> 00:02:44.238
on my Redux to make the actual object,
cuz I don't trust myself.

45
00:02:46.483 --> 00:02:49.656
&gt;&gt; Steve Kinney: NumericLiteral, but
I'm pair programming with a live chat and

46
00:02:49.656 --> 00:02:51.251
eight other people in the room.

47
00:02:51.251 --> 00:02:53.524
If I make any mistakes,
everyone will immediately tell me.

48
00:02:53.524 --> 00:02:55.631
So I don't have to worry
about any of that stuff.

49
00:02:59.161 --> 00:03:00.358
&gt;&gt; Steve Kinney: Token.value.

50
00:03:02.631 --> 00:03:05.127
&gt;&gt; Steve Kinney: Right, and
that should kind of pop that out.

51
00:03:05.127 --> 00:03:08.725
I need to just adjust this real quick, cuz
this is eventually what it'll look like.

52
00:03:08.725 --> 00:03:10.890
First, we're gonna parenthesize,

53
00:03:10.890 --> 00:03:14.418
which is use those parentheses
to create our data structure.

54
00:03:14.418 --> 00:03:17.791
We don't fully have that yet.

55
00:03:17.791 --> 00:03:21.012
I mean, I have this empty thing I
can just kinda immediately return.

56
00:03:21.012 --> 00:03:22.044
Let's actually do that.

57
00:03:25.980 --> 00:03:29.344
&gt;&gt; Steve Kinney: That should do the trick.

58
00:03:29.344 --> 00:03:31.846
We'll find out when I unskip the test,
though, right?

59
00:03:35.510 --> 00:03:36.680
&gt;&gt; Steve Kinney: Let's
unskip the first one and

60
00:03:36.680 --> 00:03:38.121
see if I've done anything terrible.

61
00:03:51.148 --> 00:03:55.029
&gt;&gt; Steve Kinney: All right,
first one passes, doing so far so good.

62
00:03:55.029 --> 00:03:58.990
I'd love for you to get the identifiers
in the strings working.

63
00:03:58.990 --> 00:04:01.011
Should be real quick,
it's the same basic pattern.

64
00:04:01.011 --> 00:04:05.357
They're still just single values,
if just a string comes in or

65
00:04:05.357 --> 00:04:07.408
just an identifier comes in.

66
00:04:07.408 --> 00:04:10.618
So it's the same basic
pattern that we have there.

67
00:04:10.618 --> 00:04:14.229
So I have set up the ability
to find a single number.

68
00:04:14.229 --> 00:04:16.857
We have a token with just a number in it,
right?

69
00:04:16.857 --> 00:04:21.311
We can go ahead and turn that into
the appropriate abstract syntax tree node.

70
00:04:21.311 --> 00:04:24.259
It's not really a tree
with only one node on it,

71
00:04:24.259 --> 00:04:26.933
it's just a leaf kinda hanging out there.

72
00:04:26.933 --> 00:04:32.249
But we have that in place and we're
gonna kinda use that cuz effectively,

73
00:04:32.249 --> 00:04:36.466
at the end of the day,
our call expressions are branches.

74
00:04:36.466 --> 00:04:41.250
And the tree ends when you get to
something that only has either

75
00:04:41.250 --> 00:04:45.024
an identifier, a string,
or a number, right?

76
00:04:45.024 --> 00:04:48.079
So we're gonna input the kinda
ends of our trees first.

77
00:04:48.079 --> 00:04:49.232
So here we have Number.

78
00:04:49.232 --> 00:04:52.681
The exercise that I want you to
do is we have two more tests.

79
00:04:52.681 --> 00:04:57.327
We have tests for implementing the exact
same pattern for our identifiers, right,

80
00:04:57.327 --> 00:05:00.280
those would be our function names,
and our strings.

81
00:05:00.280 --> 00:05:06.393
So those tests over in parse.test.js
always have Exercise 3 Begin.

82
00:05:06.393 --> 00:05:11.162
Your job is to get these two passing and
I'll see you back here.

