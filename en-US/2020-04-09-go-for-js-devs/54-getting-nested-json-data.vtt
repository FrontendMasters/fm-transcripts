WEBVTT

1
00:00:00.100 --> 00:00:03.321
You'll see we're getting kind of a gap
though because we have this URL.

2
00:00:03.321 --> 00:00:06.424
We have the name of Darth Vader here.

3
00:00:06.424 --> 00:00:09.290
We have our Homeworld URL as a string.

4
00:00:09.290 --> 00:00:14.184
But the actual planet is coming
back as an empty struct.

5
00:00:14.184 --> 00:00:17.208
This kind of makes sense because
we don't have that data at all.

6
00:00:17.208 --> 00:00:19.897
We have to make a separate
request to actually get

7
00:00:19.897 --> 00:00:21.876
access to the planet information.

8
00:00:21.876 --> 00:00:24.535
So we need to add a few more things
to our people function here.

9
00:00:29.446 --> 00:00:32.158
So for every person that we have,
every person in our array.

10
00:00:32.158 --> 00:00:35.511
We need to go dig into that URL and
make a separate get request.

11
00:00:35.511 --> 00:00:37.560
So the first thing we're
gonna do is start a for loop.

12
00:00:37.560 --> 00:00:38.644
We're not gonna use the index.

13
00:00:40.954 --> 00:00:45.123
I'm gonna use the abbreviation pers for
each individual person in our array.

14
00:00:45.123 --> 00:00:48.818
And then we're gonna go
back to our range keyword.

15
00:00:48.818 --> 00:00:53.301
And we're iterating over
our people variable.

16
00:00:53.301 --> 00:00:56.059
Which represents our
whole all people struct.

17
00:00:56.059 --> 00:01:00.266
And the part of that struct we care about
is the array of people which we called

18
00:01:00.266 --> 00:01:01.463
capital P, People.

19
00:01:08.038 --> 00:01:12.737
So for
each of the person struct within our all

20
00:01:12.737 --> 00:01:17.443
people struct,
we want to call that person.

21
00:01:17.443 --> 00:01:21.228
And then let's create a new function.

22
00:01:21.228 --> 00:01:23.126
We're gonna say, Get Homeworld.

23
00:01:23.126 --> 00:01:24.116
We're gonna make this a method.

24
00:01:24.116 --> 00:01:28.622
So on a person struct, we're going to
create a method called get Homeworld.

25
00:01:28.622 --> 00:01:32.702
That's going to handle fetching
this data for each person.

26
00:01:32.702 --> 00:01:35.455
And then just for visibility,
let's assume this all goes great.

27
00:01:35.455 --> 00:01:39.726
We're going to just print line
what that person now looks like.

28
00:01:39.726 --> 00:01:45.395
Cool, so
let's go up above our get people function.

29
00:01:45.395 --> 00:01:47.691
And we'll create a new one.

30
00:01:47.691 --> 00:01:51.640
And so we're using a method and
so the method needs a receiver.

31
00:01:51.640 --> 00:01:56.280
The thing we're gonna pass in and
modify permanently is a pointer.

32
00:01:56.280 --> 00:02:00.858
Oops, sorry, not the word pointer,

33
00:02:00.858 --> 00:02:05.304
a pointer type of our person struct.

34
00:02:05.304 --> 00:02:11.930
We named our method get Homeworld.

35
00:02:11.930 --> 00:02:16.169
So within here we need to do some similar
logic like we did with get people.

36
00:02:16.169 --> 00:02:22.951
The first thing we want to do is
grab the response from http.Get.

37
00:02:22.951 --> 00:02:26.048
And instead of hard coding in
that base url slash people.

38
00:02:26.048 --> 00:02:29.966
We need to know what is
the Homeurl of that person start.

39
00:02:29.966 --> 00:02:37.063
So we're going to pass it p.H Homeurl.

40
00:02:37.063 --> 00:02:41.816
So this guy is coming off of the struct
type that we have here in our person.

41
00:02:41.816 --> 00:02:49.503
And then again, if error does not equal
nil I'll just print that guy out.

42
00:02:49.503 --> 00:02:51.546
There fetching Homeworld.

43
00:02:54.569 --> 00:02:56.842
And print the error.

44
00:02:56.842 --> 00:03:02.599
And then because our response is going
to be that similar set of bytes,

45
00:03:02.599 --> 00:03:04.170
we'll grab that.

46
00:03:04.170 --> 00:03:06.400
And the error if we get one.

47
00:03:06.400 --> 00:03:12.322
And set that to our
ioutil.Read all that response

48
00:03:12.322 --> 00:03:18.952
of the response body Once

49
00:03:18.952 --> 00:03:22.695
again now we're working with our second
error within the same function block.

50
00:03:22.695 --> 00:03:25.492
So I'm gonna throw it in and if block.

51
00:03:25.492 --> 00:03:33.064
If define some variables, set them to the
result of a function if there's an error

52
00:03:37.483 --> 00:03:42.785
We want to,
sorry if error does not equal null.

53
00:03:42.785 --> 00:03:46.336
So over here error does not equal nil.

54
00:03:51.561 --> 00:03:55.416
We'll just keep using log here and
log dot print.

55
00:03:55.416 --> 00:04:00.641
Error reading,

56
00:04:00.641 --> 00:04:05.120
response body

57
00:04:05.120 --> 00:04:09.602
in the error.

58
00:04:09.602 --> 00:04:12.228
Then we're gonna want to
call Json dot Unmarshal.

59
00:04:13.842 --> 00:04:19.029
Are bytes and then sending

60
00:04:19.029 --> 00:04:24.221
them it to p.Homeworld.

61
00:04:24.221 --> 00:04:26.838
Person yeah p, sorry.

62
00:04:26.838 --> 00:04:28.884
Cool, sweet.

63
00:04:28.884 --> 00:04:33.727
So the beauty of using the F block to
hang on to that error variable is that

64
00:04:33.727 --> 00:04:36.173
we get it scoped within our F block.

65
00:04:36.173 --> 00:04:39.104
But on the flip side now we're trying
to access that bytes variable.

66
00:04:39.104 --> 00:04:44.780
Which is also, nested within our F block.

67
00:04:44.780 --> 00:04:50.611
So we can set up a VAR, bytes, okay?

68
00:04:54.635 --> 00:04:56.235
&gt;&gt; Perfect, cool.

69
00:05:03.383 --> 00:05:06.806
&gt;&gt; You'll just to have to
get the colon out I think.

70
00:05:06.806 --> 00:05:07.817
Yes.

71
00:05:10.928 --> 00:05:13.455
&gt;&gt; Cool, thank you.

72
00:05:13.455 --> 00:05:18.385
Okay so we're storing our We're going
to set an initial value here to

73
00:05:18.385 --> 00:05:20.261
a variable called bytes.

74
00:05:20.261 --> 00:05:24.932
Which type is going to be
an array of bytes coming back

75
00:05:24.932 --> 00:05:27.385
from my read all function.

76
00:05:27.385 --> 00:05:29.114
And then once we get it back and
there's no error.

77
00:05:29.114 --> 00:05:35.099
We're going to send it through
JSON data Marshall and

78
00:05:35.099 --> 00:05:38.430
then update our P for person.

79
00:05:38.430 --> 00:05:40.581
That we sent through here, of our method.

80
00:05:44.352 --> 00:05:46.793
So we'll save all of this.

81
00:05:46.793 --> 00:05:49.038
Let's restart our server one more time.

82
00:05:58.423 --> 00:06:03.612
We've refreshed the browser and now you're
seeing that printout of our person strux.

83
00:06:03.612 --> 00:06:07.581
We have Luke Skywalker, the URL to where
we can get that planet information.

84
00:06:07.581 --> 00:06:10.814
And then now our planet struck
is actually populated with data.

85
00:06:14.605 --> 00:06:15.305
Cool, so

86
00:06:15.305 --> 00:06:21.097
kind of a similar exercise to a previous
one in that we are defining some strux.

87
00:06:21.097 --> 00:06:25.311
But in this example, we got to write
a method and hit an external API and

88
00:06:25.311 --> 00:06:26.678
manage parsing JSON.

89
00:06:26.678 --> 00:06:31.119
Including using some of those JSON tags
that allow us to map the data that we have

90
00:06:31.119 --> 00:06:31.737
in our go.

91
00:06:31.737 --> 00:06:35.052
Using go conventional syntax
with capital letters.

92
00:06:35.052 --> 00:06:37.910
And what actually lives on our JSON object
and kind of navigate between the two.

