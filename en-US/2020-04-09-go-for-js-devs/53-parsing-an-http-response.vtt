WEBVTT

1
00:00:00.070 --> 00:00:01.752
Request went through, things are cool.

2
00:00:03.807 --> 00:00:07.270
But you also don't actually
see any of the request body,

3
00:00:07.270 --> 00:00:12.570
we don't see that giant JSON object of
people that we eventually want to parse.

4
00:00:12.570 --> 00:00:14.551
So you need to do a couple
additional things.

5
00:00:19.875 --> 00:00:22.147
So underneath our print line here,

6
00:00:22.147 --> 00:00:26.452
we're going to use another
library called ioutil.

7
00:00:26.452 --> 00:00:29.702
So ioutil, the method we want
off of this guy is read all

8
00:00:33.548 --> 00:00:37.456
And read all is going to take an argument
and the thing we want to actually be,

9
00:00:37.456 --> 00:00:40.310
the thing we want help
parsing is our response.body.

10
00:00:40.310 --> 00:00:43.401
So we can say response.Body.

11
00:00:49.128 --> 00:00:52.590
On the left-hand side here,
before we get too far,

12
00:00:52.590 --> 00:00:57.660
just make sure at the top of your file,
you are importing ioutil.

13
00:00:57.660 --> 00:01:02.273
And that is from the Oops,

14
00:01:02.273 --> 00:01:07.074
io/ioutil package.

15
00:01:11.207 --> 00:01:12.490
So kind of demonstrate here.

16
00:01:12.490 --> 00:01:15.060
Even though we're importing io/ioutil,

17
00:01:15.060 --> 00:01:18.260
the only part of this we need to access
is that part of the right hand side.

18
00:01:18.260 --> 00:01:21.860
So we've only been using HTTP and
now we only need to use ioutil.

19
00:01:21.860 --> 00:01:24.800
So that last part of the path
on the right-hand side is

20
00:01:24.800 --> 00:01:26.370
giving you access to the whole library.

21
00:01:28.500 --> 00:01:30.020
Let's go back down to this guy, and

22
00:01:30.020 --> 00:01:33.620
we want to call ioutil.ReadAll
on the response.Body.

23
00:01:33.620 --> 00:01:37.078
And so this function is going
to hand us back a couple things.

24
00:01:37.078 --> 00:01:41.080
Let me see this, okay,
it's gonna hand us back data.

25
00:01:42.420 --> 00:01:46.003
And potentially an error.

26
00:01:51.525 --> 00:01:54.693
And so once again, first thing we're
gonna do is check for that error.

27
00:01:54.693 --> 00:02:01.536
If error does not equal nil, We're

28
00:02:01.536 --> 00:02:08.553
gonna send it up to HTTP which
takes our three arguments.

29
00:02:12.073 --> 00:02:19.225
Print something for our human eyes to
read, failed to parse request body.

30
00:02:23.264 --> 00:02:24.320
And if everything goes well,

31
00:02:24.320 --> 00:02:26.990
let's print line again and
just see what we're working with.

32
00:02:26.990 --> 00:02:27.780
What is data?

33
00:02:35.450 --> 00:02:38.110
I'm gonna kill my server and restart it.

34
00:02:45.100 --> 00:02:45.828
Refresh.

35
00:02:49.323 --> 00:02:49.860
Cool.

36
00:02:51.570 --> 00:02:56.980
So assume you get a huge array of numbers
and if you recall from earlier examples,

37
00:02:56.980 --> 00:03:02.470
like when we were iterating
over letters in a sentence.

38
00:03:02.470 --> 00:03:05.730
We need to do an additional step
to kind of parse this information

39
00:03:05.730 --> 00:03:07.589
into the actual format
we want to use it in.

40
00:03:10.030 --> 00:03:12.320
So what we're looking at
here is a set of bytes.

41
00:03:12.320 --> 00:03:15.240
So I'm actually gonna modify this variable
here to be a little bit more accurate.

42
00:03:15.240 --> 00:03:16.593
So we're talking about bytes.

43
00:03:20.135 --> 00:03:23.960
So instead of just printing it,
we need to parse it.

44
00:03:23.960 --> 00:03:27.090
So here is where we're going to
start using the JSON library.

45
00:03:27.090 --> 00:03:30.667
And so at the top of the file,

46
00:03:30.667 --> 00:03:34.851
you can import Encoding/JSON,

47
00:03:39.148 --> 00:03:42.350
And back down to where
we get our bytes back.

48
00:03:42.350 --> 00:03:49.952
We're gonna say JSON.unmarshal, and
unmarshal takes a couple things.

49
00:03:49.952 --> 00:03:54.280
So JSON.unmarshal is going
to parse encoded data,

50
00:03:54.280 --> 00:03:59.760
and then store the result in
a variable that we tell it to.

51
00:03:59.760 --> 00:04:01.668
So similar to like JSON.stringify or

52
00:04:01.668 --> 00:04:04.890
JSON.parse, we are taking information
that isn't in a format we want.

53
00:04:04.890 --> 00:04:07.940
And then using the JSON library
to get it to a place and

54
00:04:07.940 --> 00:04:09.610
in a format that we can use.

55
00:04:09.610 --> 00:04:10.872
So the unmarshal takes two things.

56
00:04:10.872 --> 00:04:14.422
It's gonna take what we're trying to
parse, which is that big array of bytes.

57
00:04:16.063 --> 00:04:19.030
And then some variable
where we want to put it.

58
00:04:21.528 --> 00:04:24.549
And we haven't defined this variable yet,
but

59
00:04:24.549 --> 00:04:29.458
because we're gonna be modifying it
permanently, we're gonna use the at,

60
00:04:29.458 --> 00:04:34.536
sorry, ampersand and send it to our
variable people which we have not defined.

61
00:04:38.838 --> 00:04:41.625
So what are we trying to unmarshal and
give me the memory address,

62
00:04:41.625 --> 00:04:43.562
where you want me to
store this information.

63
00:04:48.319 --> 00:04:51.520
So we can just stick this variable here so
it's easy to see.

64
00:04:51.520 --> 00:04:54.991
We'll say we're gonna initialize a var,
people.

65
00:04:58.533 --> 00:05:02.385
And then we're gonna create a people
struct, which doesn't exist yet.

66
00:05:08.387 --> 00:05:11.748
So let's scroll up a bit and
get out of this function and

67
00:05:11.748 --> 00:05:13.437
define our people struct.

68
00:05:16.050 --> 00:05:20.082
So we have type people, which is a struct.

69
00:05:23.035 --> 00:05:31.720
And people is going to
have a People attribute.

70
00:05:34.642 --> 00:05:39.890
And it's going to be assigned
to a collection of person types.

71
00:05:47.010 --> 00:05:49.449
For clarity,
I'm gonna do a quick modification,

72
00:05:49.449 --> 00:05:53.477
instead of calling the struct type people,
I'm gonna change this to be all people,

73
00:05:53.477 --> 00:05:56.502
just so we're not talking about
the same word in various ways.

74
00:05:58.259 --> 00:06:01.543
Which means that I also need
to scroll back down and

75
00:06:01.543 --> 00:06:06.555
modify that my variable people is
actually assigned to a type of AllPeople.

76
00:06:07.880 --> 00:06:13.590
We're gonna be throwing this word a lot,
let's produce some confusion.

77
00:06:13.590 --> 00:06:14.970
Okay, so let's create our person struct.

78
00:06:16.700 --> 00:06:17.747
Type person.

79
00:06:21.259 --> 00:06:25.210
We're gonna have person defined
with a couple attributes.

80
00:06:25.210 --> 00:06:30.230
And if we flip back over to the API,
the attributes I want to pull off

81
00:06:30.230 --> 00:06:33.440
of this JSON object are the name and
the homeworld URL.

82
00:06:34.510 --> 00:06:37.410
We're gonna need to make a second request
to actually get that information.

83
00:06:37.410 --> 00:06:41.450
But for now, we know we want the name,
the homeworld URL and then eventually,

84
00:06:41.450 --> 00:06:44.420
we're going to want whatever
this homeworld URL and

85
00:06:44.420 --> 00:06:48.280
point returns which we'll
look at in just a second.

86
00:06:48.280 --> 00:06:49.370
So back in the code.

87
00:06:49.370 --> 00:06:52.364
Person will take a capital
N name which is a string,

88
00:06:52.364 --> 00:06:56.960
a Homeworld URL which is a string,

89
00:06:56.960 --> 00:07:01.250
and then eventually an actual Homeworld,

90
00:07:01.250 --> 00:07:05.260
which is going to be defined by
the planet struct we haven't defined yet.

91
00:07:13.490 --> 00:07:14.080
So next steps.

92
00:07:14.080 --> 00:07:15.279
Let's add one more struct here.

93
00:07:16.400 --> 00:07:18.110
We're just gonna be type planet.

94
00:07:26.048 --> 00:07:29.350
And you'll notice that so
we don't have any attributes in planet.

95
00:07:29.350 --> 00:07:32.990
Let's go check out the API and see what
we get back from a planet request.

96
00:07:32.990 --> 00:07:34.560
So let's grab this one.

97
00:07:34.560 --> 00:07:40.710
So we've got the base URL/planets/an ID.

98
00:07:40.710 --> 00:07:42.845
So up here in our little sandbox,

99
00:07:42.845 --> 00:07:47.600
we can do /planets/1 just to kinda
see what we're working with.

100
00:07:47.600 --> 00:07:51.760
So on a planet, we have additional
information name, rotation, period,

101
00:07:51.760 --> 00:07:52.670
climate, etc.

102
00:07:52.670 --> 00:07:55.330
And a bunch of residents
that live on that planet.

103
00:07:56.760 --> 00:07:58.060
So let's just grab a couple.

104
00:07:58.060 --> 00:08:02.970
Let's do like name, which is a string,
terrain, which is a string, and

105
00:08:02.970 --> 00:08:04.590
population which is also a string.

106
00:08:05.670 --> 00:08:07.070
So we'll hop back over to our code.

107
00:08:09.260 --> 00:08:15.315
And on planet, we want name
which is a string, population,

108
00:08:15.315 --> 00:08:20.084
which is a string and
terrain which is a string.

109
00:08:26.486 --> 00:08:31.310
And once again, all of these because they
are being potentially exported to use

110
00:08:31.310 --> 00:08:33.259
elsewhere, we need comments.

111
00:09:03.070 --> 00:09:03.635
Cool.
So

112
00:09:03.635 --> 00:09:06.565
now we have three different structs which
are kind of nested and related to each

113
00:09:06.565 --> 00:09:12.695
other in different ways which means we can
start adding some data to our variable.

114
00:09:12.695 --> 00:09:15.450
We'll scroll back down to our function.

115
00:09:15.450 --> 00:09:19.130
So now that we've defined all of
the different shapes of all people,

116
00:09:19.130 --> 00:09:24.170
we can tell our JSON.unmarshal function
that once it receives the bytes,

117
00:09:24.170 --> 00:09:29.130
parse them and throw them on to Allpeople.

118
00:09:29.130 --> 00:09:35.013
So for now, let's just print out People.

119
00:09:37.659 --> 00:09:38.450
All right, cool.

120
00:09:38.450 --> 00:09:42.720
So we have on line 57, we're calling
JSON.unmarshal and parsing it a series of

121
00:09:42.720 --> 00:09:48.430
bytes and then saving whatever gets
parsed to our people variable.

122
00:09:48.430 --> 00:09:51.140
Using the ampersand indicates an address.

123
00:09:51.140 --> 00:09:54.420
Let's throw a error handling,

124
00:09:55.740 --> 00:09:58.500
additional error handling right after
this guy in case anything goes wrong.

125
00:09:58.500 --> 00:10:02.665
So I'm going to set another err
equal to our JSON.umarshal.

126
00:10:03.690 --> 00:10:08.300
You'll notice if I hit save that
we've already established that this

127
00:10:08.300 --> 00:10:09.860
guy is called err.

128
00:10:09.860 --> 00:10:11.480
And then we have some error handling.

129
00:10:11.480 --> 00:10:15.527
And so we haven't been taking advantage
of the structure where we can

130
00:10:15.527 --> 00:10:19.014
wrap the functionality in the if
block to scope that err, so

131
00:10:19.014 --> 00:10:20.920
that we top getting error that.

132
00:10:20.920 --> 00:10:23.030
So I'm gonna do that real quick here.

133
00:10:23.030 --> 00:10:26.560
So instead of defining
the error immediately,

134
00:10:26.560 --> 00:10:31.290
I'm gonna say if and then we're going to

135
00:10:34.190 --> 00:10:38.470
set the variable err to our
JSON.unmarshal semi colon.

136
00:10:38.470 --> 00:10:40.949
And then if it does not equal nil,

137
00:10:43.906 --> 00:10:49.540
We are going to, oops, print error.

138
00:10:49.540 --> 00:10:53.569
We're going to print
line error parsing JSON.

139
00:10:54.610 --> 00:10:58.270
And then display the err.

140
00:11:00.340 --> 00:11:05.038
So by wrapping our err in our if block,
which we probably should have done from

141
00:11:05.038 --> 00:11:10.121
the first get go up here, we can avoid
that duplicate variable declaration error.

142
00:11:10.121 --> 00:11:13.336
Okay, so notice that if we actually run
the print line function here we were

143
00:11:13.336 --> 00:11:14.940
getting that empty object.

144
00:11:14.940 --> 00:11:24.190
So I'm gonna wrap The JSON in a string.

145
00:11:25.390 --> 00:11:28.750
Just getting up on line 55 we want to
print line not just the bytes, but

146
00:11:28.750 --> 00:11:31.340
like what is the string version of
all these bytes giving us back.

147
00:11:31.340 --> 00:11:34.280
Similar to when we were talking
about iterating over each letter.

148
00:11:35.690 --> 00:11:36.666
Start on the server.

149
00:11:39.538 --> 00:11:44.719
Refresh here and you'll see in our
response, we're getting some actual text

150
00:11:44.719 --> 00:11:49.910
back so this is helpful we can kinda see
what our API response is giving us back.

151
00:11:51.490 --> 00:11:58.441
If we scroll to the top, You'll notice
that our actual array of data is

152
00:11:58.441 --> 00:12:02.590
kinda nested deeply within here, but we're
seeing that we have a key of results.

153
00:12:02.590 --> 00:12:08.610
And then it's an array of JSON objects
that have our person information attached.

154
00:12:08.610 --> 00:12:11.782
So if we go up to where we're storing
our information on this Allpeople

155
00:12:11.782 --> 00:12:16.279
struct We're telling it to look for

156
00:12:16.279 --> 00:12:19.480
some sort of key called People,
which does not exist on our JSON object.

157
00:12:19.480 --> 00:12:23.480
And this is where we can use something
called a JSON Flag to kind of bridge that

158
00:12:23.480 --> 00:12:28.010
gap between what our JSON is giving us and
what we wanna call it in the Go syntax.

159
00:12:28.010 --> 00:12:31.650
So to do that, we're gonna use backticks
to the right hand side of the strut

160
00:12:31.650 --> 00:12:32.209
attribute.

161
00:12:33.720 --> 00:12:38.040
And in our JSON block, so
we're talking about JSON not XML.

162
00:12:38.040 --> 00:12:41.810
We are actually looking for the results.

163
00:12:41.810 --> 00:12:47.079
And the results is going to be
an array of person and objects.

164
00:12:50.393 --> 00:12:54.334
But similarly if we go up to person,
we're saying we want JSON to go find Name,

165
00:12:54.334 --> 00:12:58.600
Homeworld URL and Homeworld,
these things don't exist either.

166
00:12:58.600 --> 00:12:59.963
So let's go ahead and

167
00:12:59.963 --> 00:13:04.827
modify all of our struct attributes to
match what exists on our JSON object.

168
00:13:07.027 --> 00:13:12.240
So here we have JSON:"name", lowercase n.

169
00:13:12.240 --> 00:13:17.860
And our HomeworldURL is json:"homeworld".

170
00:13:21.490 --> 00:13:24.885
Our Homeworld that's set to a Planet
can stay the way it is because we're

171
00:13:24.885 --> 00:13:27.290
defining that on its own right above here.

172
00:13:27.290 --> 00:13:28.370
But we do need to hop into here and

173
00:13:28.370 --> 00:13:30.940
make sure that these are going
to be mapped correctly too.

174
00:13:32.160 --> 00:13:40.929
So these guys, we're going to
have JSON set to lowercase name,

175
00:13:40.929 --> 00:13:48.750
Lowercase population And
lowercase terrain.

176
00:13:48.750 --> 00:13:51.660
Now that we've mapped kind of what our
ghosts and texts look like to what our

177
00:13:51.660 --> 00:13:56.420
JSON object will give us back,
go ahead and save this guy.

178
00:13:58.650 --> 00:14:00.285
Restart our server.

179
00:14:05.281 --> 00:14:09.464
Refresh my browser and
you'll see we're getting

180
00:14:09.464 --> 00:14:14.054
a list of people with
the information we kinda expect.

