WEBVTT

1
00:00:00.000 --> 00:00:02.690
The next exercise we're gonna do is
kind of talking a little bit more about

2
00:00:02.690 --> 00:00:03.950
for loops.

3
00:00:03.950 --> 00:00:08.430
And it lives in the basic syntax
exercise 3A mark down file

4
00:00:09.510 --> 00:00:11.550
should take about five to seven minutes.

5
00:00:11.550 --> 00:00:14.368
So let's hop over to that file and
look at what we're gonna be working on.

6
00:00:25.432 --> 00:00:28.406
So the goals for this exercise,
we're gonna practice setting up that basic

7
00:00:28.406 --> 00:00:31.240
go file which we're gonna be using
throughout the rest of the workshop,

8
00:00:31.240 --> 00:00:32.390
declare some variables.

9
00:00:32.390 --> 00:00:35.560
And then we're gonna iterate over
a collection using both a classic for

10
00:00:35.560 --> 00:00:37.590
loop and the range keyword.

11
00:00:37.590 --> 00:00:39.060
We'll use some if statements and

12
00:00:39.060 --> 00:00:42.830
then you'll might have to
troubleshoot some errors that arise.

13
00:00:42.830 --> 00:00:46.370
And then the file actually
has a bottom here some hints.

14
00:00:46.370 --> 00:00:49.960
But before we get to that, the directions
for this particular exercise,

15
00:00:49.960 --> 00:00:52.258
you'll create another file
called exercise 3A.go.

16
00:00:52.258 --> 00:00:56.020
I'll go ahead and put it in the code
directory if you so choose.

17
00:00:56.020 --> 00:00:57.590
And in your main function,

18
00:00:57.590 --> 00:01:00.580
the first thing you'll do is declare a
variable that has the value of a sentence.

19
00:01:00.580 --> 00:01:02.440
So we're kinda through
the example we just did.

20
00:01:03.560 --> 00:01:08.230
Iterate over that sentence, and
then the kicker here is this number 4.

21
00:01:08.230 --> 00:01:11.950
If the index of that letter is an odd
number, print that letter to the console.

22
00:01:13.360 --> 00:01:14.650
So a couple of hints to get you started,

23
00:01:14.650 --> 00:01:17.420
you might need to convert
the type that we just ran into.

24
00:01:17.420 --> 00:01:19.820
And then just so
you know the module operator in go,

25
00:01:19.820 --> 00:01:22.660
that percent sign behaves the same
way as it does in JavaScript.

26
00:01:22.660 --> 00:01:24.020
So if you use the module operator,

27
00:01:24.020 --> 00:01:27.070
it'll give you back the remainder
of that mathematical operation.

