WEBVTT

1
00:00:00.420 --> 00:00:04.400
In exercise 6A, we wanted to modify
the describeGroup function to

2
00:00:04.400 --> 00:00:08.350
only accept new users represented by
the spaceAvailable field of the group,

3
00:00:08.350 --> 00:00:10.401
if there are fewer than 2 existing users.

4
00:00:12.620 --> 00:00:16.950
So let's hop over into our
describeGroup function.

5
00:00:16.950 --> 00:00:18.540
And on our group struct,

6
00:00:18.540 --> 00:00:22.000
you'll see our spaceAvailable
attribute is set to a Boolean.

7
00:00:23.180 --> 00:00:26.150
So before we spit out this description,
I wanna see like, hey,

8
00:00:26.150 --> 00:00:27.330
how many users are in this group?

9
00:00:27.330 --> 00:00:30.090
Do we need to modify that value,
update that struct and

10
00:00:30.090 --> 00:00:33.640
then print out the resulting
value to the console here?

11
00:00:33.640 --> 00:00:36.810
So at the top of our
describeGroup function,

12
00:00:36.810 --> 00:00:38.400
let's throw in a little if block.

13
00:00:38.400 --> 00:00:42.695
So we're gonna say if

14
00:00:42.695 --> 00:00:47.714
len(g.users) &gt; 2.

15
00:00:47.714 --> 00:00:52.223
We wanna change that
spaceAvailable value to false.

16
00:00:55.463 --> 00:00:57.886
And to modify an attribute,
you would dot notation and

17
00:00:57.886 --> 00:01:00.267
then set that new value on
the right-hand side here.

18
00:01:00.267 --> 00:01:06.289
So let's go ahead and print everything
to the console right now on line 51,

19
00:01:06.289 --> 00:01:08.526
we're describing group g.

20
00:01:08.526 --> 00:01:13.934
And group g only has, let's bring
it back down to 2 users at a time.

21
00:01:16.200 --> 00:01:20.276
So if our logic is asking that if
it's more than 2, set it to false,

22
00:01:20.276 --> 00:01:24.794
right now we only have 2, so we should
still see true in our terminal here.

23
00:01:24.794 --> 00:01:28.330
If we run it,
we see that accepting new users is true.

24
00:01:28.330 --> 00:01:32.237
If I make a new user here,
I'm just gonna copy this guy.

25
00:01:32.237 --> 00:01:37.038
I'm not gonna modify the values for
now just for demonstration purposes, but

26
00:01:37.038 --> 00:01:39.448
I will change the variable name to u3.

27
00:01:39.448 --> 00:01:43.707
And if I add a third user
to our users slice here,

28
00:01:43.707 --> 00:01:46.701
we now do have more users than 2.

29
00:01:46.701 --> 00:01:52.900
So the length of our
group.users is now above 2.

30
00:01:52.900 --> 00:01:53.730
So if I run it again,

31
00:01:54.990 --> 00:01:58.340
I see that our accepting new
users has been changed to false.

32
00:01:58.340 --> 00:02:01.647
So cool, everything seems like
it's working, everyone's happy.

33
00:02:01.647 --> 00:02:06.209
But if we actually just print out
what our group looks like, so

34
00:02:06.209 --> 00:02:10.010
g is our variable for
our instance of group.

35
00:02:10.010 --> 00:02:13.912
In that describeGroup function,
I wanted to permanently modify this value.

36
00:02:13.912 --> 00:02:18.475
I wanna say that, hey, if the user group
is higher than 2, don't accept new users,

37
00:02:18.475 --> 00:02:21.770
spaceAvailable should be false, and
that should be a permanent modification.

38
00:02:21.770 --> 00:02:25.930
So if I run this now, you'll see that
even though that string prints out false,

39
00:02:25.930 --> 00:02:28.980
because in the describeGroup function,
we've modified it locally,

40
00:02:28.980 --> 00:02:35.160
the actual group itself is still
printing true for that Boolean.

41
00:02:35.160 --> 00:02:36.540
So something's happening or

42
00:02:36.540 --> 00:02:38.950
we're not modifying that
variable in a permanent way.

43
00:02:40.030 --> 00:02:42.460
And so an interesting thing
about the go language,

44
00:02:42.460 --> 00:02:45.630
which is another really fascinating
part that differs pretty strongly from

45
00:02:45.630 --> 00:02:50.000
JavaScript is the concept of pointers and
references.

46
00:02:50.000 --> 00:02:53.600
We're gonna talk about
that in the next section,

47
00:02:53.600 --> 00:02:58.280
where modifying a variable
permanently requires a little bit

48
00:02:58.280 --> 00:03:01.500
more behavior than simply
modifying it in place.

