WEBVTT

1
00:00:00.100 --> 00:00:01.850
So let's talk about methods.

2
00:00:01.850 --> 00:00:03.540
So when we were talking about structs,

3
00:00:03.540 --> 00:00:08.780
we're defining each type of a manually
defined or manually defining a type.

4
00:00:08.780 --> 00:00:11.930
We've got our user type that has an ID,
first name, last name, email.

5
00:00:11.930 --> 00:00:15.180
We have a group type that has
a few attributes on that.

6
00:00:15.180 --> 00:00:17.840
And then we have a couple
functions that we wrote

7
00:00:19.790 --> 00:00:23.400
to describe each of those types,
the first one takes in a user type that

8
00:00:23.400 --> 00:00:25.520
we can print out a particular
sentence describing the user.

9
00:00:25.520 --> 00:00:29.370
And the second one was
describing the group type.

10
00:00:29.370 --> 00:00:33.150
And it had kind of a similar behavior but
different actual string printed out.

11
00:00:33.150 --> 00:00:35.730
So so far we've been using
these kind of basic functions

12
00:00:35.730 --> 00:00:39.670
that are expecting some type of argument
that is a manually defined type struct.

13
00:00:41.430 --> 00:00:43.850
And then our main function,
we kind of just called

14
00:00:43.850 --> 00:00:47.580
all of those described functions and
printed out those strings to the console.

15
00:00:47.580 --> 00:00:49.820
So that's kind of where we're starting
with and we're going to flip over and

16
00:00:49.820 --> 00:00:52.210
talk about methods and
how they differ from functions.

17
00:00:52.210 --> 00:00:54.890
These two boxes are going to show
the differences between both

18
00:00:54.890 --> 00:00:57.660
the implementation of a method
versus a function, and

19
00:00:57.660 --> 00:00:59.680
how those are called on
a particular struct.

20
00:01:00.700 --> 00:01:04.170
So the top left hand corner, that second
function describe user is going to look

21
00:01:04.170 --> 00:01:06.500
like the function that we talked about
yesterday, where it takes in that

22
00:01:07.950 --> 00:01:11.730
user struct argument and
then it's bringing back out a string.

23
00:01:11.730 --> 00:01:15.108
The difference between a method and
a function is that instead of accepting

24
00:01:15.108 --> 00:01:20.390
an argument as a struct, you're calling
a method on an instance of that struct.

25
00:01:20.390 --> 00:01:22.520
So in the top version,
we're talking about a method.

26
00:01:22.520 --> 00:01:26.300
In the parentheses that happened
right after the keyword funk,

27
00:01:26.300 --> 00:01:30.810
that indicates what the method
is going to be called on.

28
00:01:30.810 --> 00:01:33.470
So what is the receiving
struct of that method.

29
00:01:33.470 --> 00:01:36.860
That top left corner there, you're seeing
that the describe method is going to be

30
00:01:36.860 --> 00:01:39.120
called on an instance of a user.

31
00:01:39.120 --> 00:01:41.910
And when the describe
method sees that user type,

32
00:01:41.910 --> 00:01:44.340
it's going to fire off the code
that's in the curly braces.

33
00:01:44.340 --> 00:01:46.280
And so we're going to print that
same string to the console.

34
00:01:47.990 --> 00:01:51.940
So similar behavior, you take in a struct,
you print out some stuff, the difference

35
00:01:51.940 --> 00:01:55.530
being that a method is going to be
particularly concerned about state,

36
00:01:55.530 --> 00:02:00.089
and what kind of state or information that
that struct is getting passed in with.

37
00:02:01.810 --> 00:02:04.320
You kind of think like object
prototype methods in JavaScript

38
00:02:04.320 --> 00:02:06.880
like particular things that
you can call methods on

39
00:02:06.880 --> 00:02:08.850
have to be associated with
a particular type of struct.

40
00:02:08.850 --> 00:02:12.160
So if you were to pass
right now that describe

41
00:02:12.160 --> 00:02:14.770
method at the top left hand corner,
something that wasn't a user,

42
00:02:14.770 --> 00:02:17.040
you wouldn't be able to execute that code,
you'd get an error.

43
00:02:20.780 --> 00:02:24.810
And then in the bottom right hand corner
is the difference between how you would

44
00:02:24.810 --> 00:02:29.670
call either a function call on a user or
a method on a user.

45
00:02:29.670 --> 00:02:33.130
So that first describe, which is set
equal to our function describe user and

46
00:02:33.130 --> 00:02:34.990
we're passing our user instance.

47
00:02:34.990 --> 00:02:38.120
And the second is how you would call
a method where you were actually

48
00:02:38.120 --> 00:02:41.990
calling the describe method
on an instance of a user.

49
00:02:41.990 --> 00:02:45.425
So instead of passing it as an argument,
you're calling a method on an instance.

50
00:02:45.425 --> 00:02:49.286
We're gonna talk a little bit
about why this is important and

51
00:02:49.286 --> 00:02:51.550
kinda what that looks like in
the next couple of examples here.

52
00:02:53.010 --> 00:02:57.422
Cool, so let's hop over to methods.go and
make this change in a go base.

53
00:02:57.422 --> 00:03:03.180
Cool, so so far I'm working with describe
function describeUser function, excuse me.

54
00:03:03.180 --> 00:03:05.300
And we don't have any methods
in this file whatsoever.

55
00:03:05.300 --> 00:03:08.626
So we're gonna implement that code
we just saw on the slide, and

56
00:03:08.626 --> 00:03:11.406
transform our describeUser
function into a method.

57
00:03:17.457 --> 00:03:19.762
So we know that for
methods, we need a receiver,

58
00:03:19.762 --> 00:03:21.460
what are we calling this method on?

59
00:03:21.460 --> 00:03:24.992
And I'm gonna call it on a user.

60
00:03:28.521 --> 00:03:33.430
You've noticed that I've chosen
to use a pointer type here.

61
00:03:33.430 --> 00:03:38.240
Typically with methods,
you want to like modify

62
00:03:38.240 --> 00:03:40.710
the state that's on the instance
of the thing you just passed in.

63
00:03:40.710 --> 00:03:43.360
So for instance, hey,
call describe on a user and

64
00:03:43.360 --> 00:03:45.820
then you add additional information or

65
00:03:45.820 --> 00:03:49.130
modify some of the attributes on
whatever type you just passed in.

66
00:03:49.130 --> 00:03:51.520
We aren't actually doing any
modification in this particular method.

67
00:03:51.520 --> 00:03:52.700
We're just printing out a string.

68
00:03:54.570 --> 00:03:57.950
So that the pointer here isn't
entirely crucial, but believe it for

69
00:03:57.950 --> 00:03:58.960
demonstration purposes.

70
00:03:58.960 --> 00:04:02.410
So I'm going to call it describe.

71
00:04:03.750 --> 00:04:06.790
And now it no longer takes any arguments
because we are calling this method

72
00:04:06.790 --> 00:04:07.540
on an instance.

73
00:04:07.540 --> 00:04:09.240
We're no longer passing
anything directly to it.

74
00:04:09.240 --> 00:04:11.880
We're still getting back that string.

75
00:04:11.880 --> 00:04:18.576
And then I'm gonna copy lines 14 to 15 and
just pop that into our method.

76
00:04:22.734 --> 00:04:24.710
And then the main function.

77
00:04:24.710 --> 00:04:29.620
Instead of line 25, where we are passing
our describe user function a user

78
00:04:29.620 --> 00:04:37.800
instance, I'm going to set a new
variable desk to user.describe.

79
00:04:37.800 --> 00:04:38.780
The advantages of this

80
00:04:40.410 --> 00:04:42.929
will be much more apparent when
we kind of dive into interfaces.

81
00:04:45.290 --> 00:04:49.570
But the behavior of the describe function,
whether it's in the describe user or

82
00:04:49.570 --> 00:04:52.320
describe group is essentially
the same type of behavior.

83
00:04:52.320 --> 00:04:56.140
You're still like spitting out a string
that describes something you pass into it.

84
00:04:56.140 --> 00:04:58.050
So in terms of like code encapsulation,
and

85
00:04:58.050 --> 00:05:01.780
kind of demonstrating that
the thing you pass in doesn't

86
00:05:01.780 --> 00:05:06.160
super matter as long as it's doing
a particular job of describing that thing.

87
00:05:06.160 --> 00:05:06.910
Readability and

88
00:05:06.910 --> 00:05:11.490
kind of using idiomatic code to make what
you're trying to accomplish more apparent.

89
00:05:11.490 --> 00:05:13.560
And methods have a lot more
strength in that regard.

90
00:05:13.560 --> 00:05:16.321
And we'll talk about what that looks like
a little bit more with interfaces, too.

91
00:05:18.556 --> 00:05:22.352
Kind of the rule of thumb would be
if you are concerned about state and

92
00:05:22.352 --> 00:05:25.430
want to modify state,
you're using a method.

93
00:05:25.430 --> 00:05:27.960
Functions tend to have to
be much more repeatable.

94
00:05:29.100 --> 00:05:30.540
Duplicate a lot of code and

95
00:05:30.540 --> 00:05:32.800
you're not concerned with
modifying state quite as much.

