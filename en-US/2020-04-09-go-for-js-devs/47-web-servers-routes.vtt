WEBVTT

1
00:00:00.020 --> 00:00:03.210
And we're gonna look at spinning
up a real small web server, and

2
00:00:03.210 --> 00:00:06.980
look at what go looks like when
interacting with the browser a little bit,

3
00:00:06.980 --> 00:00:11.410
and a super brief look at working with
a template, an HTML template and go.

4
00:00:11.410 --> 00:00:14.730
So kinda this melding of front end
back end for just a few minutes.

5
00:00:16.220 --> 00:00:19.294
So we're talking about routes,
route handles,

6
00:00:19.294 --> 00:00:22.303
go handles routes using
the net/http library.

7
00:00:25.239 --> 00:00:29.690
And it's gonna look something like this,
where you define in your main function,

8
00:00:29.690 --> 00:00:32.370
an entry point for
where your route is going to go.

9
00:00:32.370 --> 00:00:33.610
So if you call http, and

10
00:00:33.610 --> 00:00:38.070
then the built in method HandleFunc,
it's gonna take two arguments.

11
00:00:38.070 --> 00:00:40.270
The path you want to intercept
from the browser, and

12
00:00:40.270 --> 00:00:43.200
then what you wanna do when
that path is recognized.

13
00:00:43.200 --> 00:00:47.148
So, for this example, we're saying that,
hey, when the user navigates to

14
00:00:47.148 --> 00:00:51.278
the homepage, go fire the function home,
which we don't have to find here, and

15
00:00:51.278 --> 00:00:54.238
then execute whatever code
lives in that route handler.

16
00:00:57.005 --> 00:00:58.415
So, right now in my file,

17
00:00:58.415 --> 00:01:02.404
the only thing I'm doing is printing
out the words building a web server.

18
00:01:02.404 --> 00:01:07.063
I'm gonna move up my terminal, and
then get my go run function ready to go.

19
00:01:07.063 --> 00:01:10.458
My intersection 11_server/code/server.go.

20
00:01:10.458 --> 00:01:13.595
If I run it now you see
the words building a web server.

21
00:01:13.595 --> 00:01:17.825
But let's implement a quick
example of a route handler.

22
00:01:17.825 --> 00:01:24.602
So on our input statements,
let's add a library to handle some routes.

23
00:01:24.602 --> 00:01:29.558
So net/http, so parentheses.

24
00:01:29.558 --> 00:01:34.270
And then in main I'm gonna
kill my print line for now.

25
00:01:35.290 --> 00:01:40.540
And have my first handle
function be http.HandleFunc.

26
00:01:40.540 --> 00:01:43.204
Let's just do the home path.

27
00:01:45.742 --> 00:01:48.919
And then it's gonna call a home
function which we'll write next.

28
00:01:52.770 --> 00:01:57.194
So up here I'm gonna say func home,
and then for now let's just print

29
00:01:57.194 --> 00:02:02.194
line, Home.

30
00:02:05.369 --> 00:02:07.720
So see I'm already getting an error,
which is intentional.

31
00:02:07.720 --> 00:02:12.400
If I run this, it's gonna say,
that this type, this home type,

32
00:02:12.400 --> 00:02:15.890
it's a function but it's expecting a bunch
of arguments we're not passing in.

33
00:02:15.890 --> 00:02:16.980
So, let's grab the docs real quick.

34
00:02:16.980 --> 00:02:21.243
I'm gonna say go doc http.HandleFunc.

35
00:02:23.647 --> 00:02:26.884
With this guy up so
you can see what's happening here.

36
00:02:26.884 --> 00:02:29.270
So here's some information
about the HandleFunc.

37
00:02:29.270 --> 00:02:32.246
So, it's gonna take a string,
as its first argument, and

38
00:02:32.246 --> 00:02:34.758
then a route handler,
the handle function home.

39
00:02:36.746 --> 00:02:40.723
And then that function is expecting
two different things, a writer and

40
00:02:40.723 --> 00:02:41.854
a request pointer.

41
00:02:43.676 --> 00:02:48.183
And so we need to modify our home
function to take these two arguments.

42
00:02:48.183 --> 00:02:51.821
And these are gonna be arguments that we
passed to any route handler that we build

43
00:02:51.821 --> 00:02:54.550
throughout this web server or
in the next exercise as well.

44
00:02:54.550 --> 00:02:56.400
So I might start copy
pasting this at some point.

45
00:02:56.400 --> 00:02:58.920
But for now,
let's talk about what's happening.

46
00:02:58.920 --> 00:03:00.210
So the first argument is the writer.

47
00:03:00.210 --> 00:03:03.280
Where are we writing
anything that happens too?

48
00:03:03.280 --> 00:03:06.948
So it's gonna be http.ResponseWriter.

49
00:03:06.948 --> 00:03:10.790
And this is a built-in type that
comes from the http library.

50
00:03:10.790 --> 00:03:14.000
And the second argument is the request.

51
00:03:14.000 --> 00:03:16.560
A variable that represents
the request that was passed through.

52
00:03:16.560 --> 00:03:19.472
So, we're gonna call this http.Request,
which is a pointer and

53
00:03:19.472 --> 00:03:21.230
that also comes from the http library.

54
00:03:21.230 --> 00:03:23.890
So these are built in go types and

55
00:03:23.890 --> 00:03:27.050
required arguments to this
route handle function home.

56
00:03:27.050 --> 00:03:33.500
So if we run this now,
the go doc1, this guy, cool.

57
00:03:33.500 --> 00:03:38.180
So, the next thing we wanna do is that,
instead of just handling this function,

58
00:03:38.180 --> 00:03:41.210
we also wanna spin up a server and
tell our application here

59
00:03:41.210 --> 00:03:45.200
where we want to serve up any assets
that are gonna show up in our browser.

60
00:03:45.200 --> 00:03:47.740
So we're gonna add a couple
lines to our main function.

61
00:03:47.740 --> 00:03:49.769
So after we have our route handlers,

62
00:03:49.769 --> 00:03:53.760
the next thing I wanna do is for
my own benefit, because I always forget,

63
00:03:53.760 --> 00:03:57.041
I'm just gonna say the port
like server is running on port.

64
00:03:57.041 --> 00:04:01.151
Let's work with 8080.

65
00:04:01.151 --> 00:04:02.561
And this is just a note to myself, so

66
00:04:02.561 --> 00:04:05.339
I know what port I'm gonna navigate
to in my browser using localhost.

67
00:04:06.820 --> 00:04:09.050
And then I'm gonna use log.Fatal.

68
00:04:09.050 --> 00:04:10.798
And we'll talk about what
this means in just a second.

69
00:04:10.798 --> 00:04:16.447
But within log.Fatal, I am passing it
http, and then the method listen and

70
00:04:16.447 --> 00:04:22.193
serve, which takes two things,
the port we're looking for in the browser.

71
00:04:22.193 --> 00:04:26.527
And then a second argument which
is optional, so we'll pass in nil.

72
00:04:26.527 --> 00:04:30.837
Print line has a T in it.

73
00:04:32.500 --> 00:04:33.144
Cool.

74
00:04:33.144 --> 00:04:37.948
So our http library is kinda waiting
to intercept our /home route

75
00:04:37.948 --> 00:04:39.530
landing page route.

76
00:04:40.670 --> 00:04:44.870
And at this point, our http.ListenAndServe
is what's actually spinning up our server.

77
00:04:44.870 --> 00:04:47.678
So our servers being spun up here,
we're looking for,

78
00:04:47.678 --> 00:04:51.501
if we ever hit this port in our browser
on localhost, and when that happens,

79
00:04:51.501 --> 00:04:53.977
is there a route handler for
the path we just hit?

80
00:04:53.977 --> 00:04:58.576
And then log.Fatal is going to expect
an error, and if there's an error,

81
00:04:58.576 --> 00:05:00.440
do something with it.

82
00:05:00.440 --> 00:05:03.190
So, assuming this goes great,
log.Fatal won't do anything.

83
00:05:03.190 --> 00:05:07.562
If something bad happens,
log.Fatal will log that error for us.

84
00:05:07.562 --> 00:05:08.700
And what's interesting and

85
00:05:08.700 --> 00:05:11.582
kind of something that took me a minute
to wrap my head around too is that,

86
00:05:11.582 --> 00:05:14.969
the stuff that's in this parenthesis here,
that will get executed, regardless.

87
00:05:14.969 --> 00:05:18.456
So even though we're wrapping this in the
log.Fatal, we're still actually executing

88
00:05:18.456 --> 00:05:21.740
the method ListenAndServe,
we are still spinning at that server.

89
00:05:21.740 --> 00:05:25.080
The log.Fatal is just kind of a back
up wrapper to be like if something goes

90
00:05:25.080 --> 00:05:27.240
wrong, go handle it this particular way.

91
00:05:29.180 --> 00:05:31.478
Cool, so now we run server.go,

92
00:05:31.478 --> 00:05:35.592
you'll see we have our server
is running on port 8080.

93
00:05:36.642 --> 00:05:37.785
I'm gonna navigate over to my browser.

94
00:05:37.785 --> 00:05:44.887
Wow, localhost, 8080.

95
00:05:47.026 --> 00:05:49.210
So see,
nothing's happening on the screen here.

96
00:05:49.210 --> 00:05:51.155
But if I circle back to my browser,

97
00:05:51.155 --> 00:05:54.854
you'll see that I've now print
line home in my actual terminal.

98
00:05:57.745 --> 00:06:00.957
So this home function doesn't
actually get triggered

99
00:06:00.957 --> 00:06:05.980
until our server intercepts this
particular route, the forward slash.

100
00:06:05.980 --> 00:06:08.550
Because we've spun up our server and
it's listening and ready for action.

101
00:06:10.160 --> 00:06:13.100
So if you think about the comparison
between reactor router versus doing

102
00:06:13.100 --> 00:06:15.970
something like this, it takes very little
code to actually spin up a server and

103
00:06:15.970 --> 00:06:18.390
get it rolling using go,
which I find interesting.

