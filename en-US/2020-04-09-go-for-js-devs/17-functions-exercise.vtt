WEBVTT

1
00:00:00.000 --> 00:00:02.511
Our next exercise is going to
look a little bit at functions.

2
00:00:02.511 --> 00:00:06.441
And have some practice around both
regular functions and variadic functions.

3
00:00:06.441 --> 00:00:11.420
So we're gonna tackle both Exercise
#4A and #4B at the same time.

4
00:00:11.420 --> 00:00:14.934
So if we hop over to the complex
structures directory and

5
00:00:14.934 --> 00:00:17.038
look at the exercise #4A file.

6
00:00:22.130 --> 00:00:25.150
The goal of this exercise is to
practice writing some functions.

7
00:00:25.150 --> 00:00:29.880
We'll create a file called exercise_4a.go,
you can throw that in the code directory.

8
00:00:29.880 --> 00:00:32.230
The first thing you're going to do
is create a function called average,

9
00:00:32.230 --> 00:00:33.850
which is going to take three arguments.

10
00:00:33.850 --> 00:00:36.580
And for this example,
let's try to do it the explicit way,

11
00:00:36.580 --> 00:00:39.040
where you're actually passing
three exact arguments.

12
00:00:39.040 --> 00:00:41.390
And all of those arguments
should be floats.

13
00:00:41.390 --> 00:00:42.000
At the end of the day,

14
00:00:42.000 --> 00:00:44.680
the function should return at
the average of those three arguments.

15
00:00:44.680 --> 00:00:48.160
Which is also gonna be a float, and then
make sure to call that function a main.

16
00:00:48.160 --> 00:00:50.022
And see something print to the console.

17
00:00:52.435 --> 00:00:55.295
In #4B,
we're gonna take that exact function and

18
00:00:55.295 --> 00:00:57.710
refactor it to use
a variadic version of it.

19
00:00:59.030 --> 00:01:02.270
So you can either refactor the code
that you write from exercise #4A or

20
00:01:02.270 --> 00:01:03.300
start from scratch.

21
00:01:03.300 --> 00:01:06.610
If you just really wanna practice
setting up a go template file.

22
00:01:06.610 --> 00:01:07.240
And then for

23
00:01:07.240 --> 00:01:11.450
the directions just refactor your code
using the spread operator type syntax.

24
00:01:13.792 --> 00:01:15.210
Well, we're still
calculating that average, so

25
00:01:15.210 --> 00:01:16.400
a couple hints to get you going.

26
00:01:16.400 --> 00:01:19.320
The first one is that to find
the length of a collection,

27
00:01:19.320 --> 00:01:22.196
you can use the built in function LEN.

28
00:01:22.196 --> 00:01:25.128
An LEN is gonna take whatever
collection you pass it, and

29
00:01:25.128 --> 00:01:27.154
give you back the length of that thing.

30
00:01:27.154 --> 00:01:27.896
And then,

31
00:01:27.896 --> 00:01:33.097
another hint is keep an eye on what
type LEN some collection gives you back.

