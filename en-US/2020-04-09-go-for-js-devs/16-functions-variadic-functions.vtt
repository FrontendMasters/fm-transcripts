WEBVTT

1
00:00:00.110 --> 00:00:03.720
So, basic syntax kind of out of the way,
variables, types, things like that,

2
00:00:03.720 --> 00:00:05.970
which kind of seems
familiar to JavaScript.

3
00:00:05.970 --> 00:00:10.419
The next section I'd like to talk
about are some of the more complex

4
00:00:10.419 --> 00:00:13.526
structures that go has and
JavaScript is not.

5
00:00:13.526 --> 00:00:16.967
So functions, although they start
out looking a little similar,

6
00:00:16.967 --> 00:00:19.840
they take arguments and
they return values.

7
00:00:19.840 --> 00:00:23.780
The function signatures and how they're
defined are a little bit unique to go.

8
00:00:23.780 --> 00:00:28.980
So, as you see on the slide here, our
function print age takes in one argument.

9
00:00:28.980 --> 00:00:33.040
It's called age, it's named age and
it is set to an integer type.

10
00:00:33.040 --> 00:00:35.240
And that word to the right
of the closing parentheses,

11
00:00:35.240 --> 00:00:38.870
that second int indicates what
type is function must return.

12
00:00:38.870 --> 00:00:39.800
It's not optional,

13
00:00:39.800 --> 00:00:42.959
every time this function gets called,
it must return an integer value.

14
00:00:42.959 --> 00:00:47.167
And then the code within the curly braces
will be the code that we execute within

15
00:00:47.167 --> 00:00:48.077
that function.

16
00:00:48.077 --> 00:00:50.095
But you will notice that last line return,

17
00:00:50.095 --> 00:00:53.930
we're returning out the value of
age which needs to be an integer.

18
00:00:53.930 --> 00:00:57.130
So you'll notice that so far in our
main function we haven't been passing at

19
00:00:57.130 --> 00:01:00.580
anything and we haven't been returning
anything and that's because as that main

20
00:01:00.580 --> 00:01:03.734
entry point of our application,
it's job is just run your whole program.

21
00:01:03.734 --> 00:01:05.824
You're not gonna be
passing at anything and

22
00:01:05.824 --> 00:01:08.996
it doesn't need to do anything with
the value at the end of the day.

23
00:01:08.996 --> 00:01:12.873
So the next function is we're gonna be
writing will be a little bit more complex,

24
00:01:12.873 --> 00:01:15.510
involving some of these arguments and
return values.

25
00:01:16.920 --> 00:01:18.923
So let's hop over to functions.go,

26
00:01:36.874 --> 00:01:42.450
Okay, so we're in functions.go and
the fourth section of complex structures.

27
00:01:42.450 --> 00:01:45.850
And if we go ahead and copy that
first function we saw in the slide,

28
00:01:45.850 --> 00:01:51.150
which is print age, it took that
age argument which was an integer.

29
00:01:51.150 --> 00:01:53.320
We wanted it to return an integer and

30
00:01:53.320 --> 00:01:57.470
then execute some code within
the curly braces here.

31
00:01:57.470 --> 00:02:02.880
The code we want, we're just gonna
go ahead and print out that age.

32
00:02:02.880 --> 00:02:06.890
But then because our function is
requiring us to return an integer,

33
00:02:06.890 --> 00:02:09.290
we need to return age
at the end of the day.

34
00:02:10.370 --> 00:02:13.870
In order to call that code,
we can go in our main function here and

35
00:02:13.870 --> 00:02:18.770
we'll call printAge and
hand it some sort of integer.

36
00:02:21.220 --> 00:02:26.485
If i run the program now, so go run or
in section four in the code directory and

37
00:02:26.485 --> 00:02:30.940
functions.go, you'll see that we
print out our age, everyone's happy.

38
00:02:34.710 --> 00:02:38.120
If necessary, go also allows us
to return more than one thing.

39
00:02:39.700 --> 00:02:44.197
So we can add multiple return values of
a function by putting them in parentheses,

40
00:02:44.197 --> 00:02:47.262
still between our first
argument parentheses block and

41
00:02:47.262 --> 00:02:48.975
then our opening curly brace.

42
00:02:48.975 --> 00:02:54.362
And so now if I were to save this and
run this file, it's actually working.

43
00:02:54.362 --> 00:02:57.114
I don't know if you caught that but
when I hit Save,

44
00:02:57.114 --> 00:03:00.820
my linter helped me out there and
it inserted a default value.

45
00:03:00.820 --> 00:03:02.720
So that go wouldn't get mad.

46
00:03:02.720 --> 00:03:07.967
So I can't actually save it and
make this go without that at the moment.

47
00:03:07.967 --> 00:03:11.820
But this will require our function to
now return two integers rather than one.

48
00:03:11.820 --> 00:03:15.540
And if we weren't to do that in
an actual runtime environment,

49
00:03:15.540 --> 00:03:16.350
we would get an error.

50
00:03:18.030 --> 00:03:20.350
Another interesting aspect
of go is if we wanted to,

51
00:03:20.350 --> 00:03:22.100
over here we just have
some blank integers.

52
00:03:22.100 --> 00:03:25.260
We could also actually
name our return values.

53
00:03:25.260 --> 00:03:28.230
And modify the code within our
print age function a little bit.

54
00:03:28.230 --> 00:03:33.231
So let's say our first one
is gonna be age of Sally.

55
00:03:33.231 --> 00:03:35.240
Our second one is the age of Bob.

56
00:03:37.680 --> 00:03:40.640
And then in our function here,
let's say we had

57
00:03:42.470 --> 00:03:46.420
a couple values that actually
pertained to both Sally and Bob.

58
00:03:46.420 --> 00:03:50.613
So you'll notice here that I don't
have to use the colon equal sign,

59
00:03:50.613 --> 00:03:54.733
the syntax of this where I have the name
of the variable on the left and

60
00:03:54.733 --> 00:03:58.277
then the value on the right
where there's no var keyword,

61
00:03:58.277 --> 00:04:01.852
there's no colon equal sign,
and there's no type name.

62
00:04:01.852 --> 00:04:05.102
Indicates that somewhere in this function
those variables have already been

63
00:04:05.102 --> 00:04:05.609
declared.

64
00:04:05.609 --> 00:04:08.927
And even though they're in the return
values, I'm still saying hey,

65
00:04:08.927 --> 00:04:12.415
go instantiate a couple placeholders
of two variables with these names and

66
00:04:12.415 --> 00:04:13.079
these types,

67
00:04:13.079 --> 00:04:16.700
which means I can reassign that value
in the function without go getting mad.

68
00:04:18.820 --> 00:04:24.637
So I've got a job Bob is 21,
age of Sally, we'll make her 16.

69
00:04:24.637 --> 00:04:32.040
And then if I want to, I can actually
just kill all of this, running the code.

70
00:04:32.040 --> 00:04:34.370
I'm missing a return at
the end of the function,

71
00:04:34.370 --> 00:04:35.780
because I do need the word return.

72
00:04:35.780 --> 00:04:41.842
But I don't have to explicitly now
say return age of Bob, age of Sally.

73
00:04:41.842 --> 00:04:46.917
I'm gonna modify this to show the actual

74
00:04:46.917 --> 00:04:52.296
return value that we get within print age.

75
00:04:56.682 --> 00:04:59.478
So with that print line
function added to our main,

76
00:04:59.478 --> 00:05:03.260
you see that we are now returning
two different values 16 and 21.

77
00:05:03.260 --> 00:05:05.686
Although our print age is still
expecting an age integer,

78
00:05:05.686 --> 00:05:08.470
we're not doing anything with it,
which is a contrived example.

79
00:05:08.470 --> 00:05:10.100
That doesn't make a lot of sense.

80
00:05:10.100 --> 00:05:14.860
But ultimately, what this function
allows us to do is redefine two

81
00:05:14.860 --> 00:05:19.968
variables that we expect this function
to return and then return them.

82
00:05:19.968 --> 00:05:23.242
Kind of implicitly without having to
specify that in our return statement on

83
00:05:23.242 --> 00:05:27.142
line eight
&gt;&gt; So

84
00:05:27.142 --> 00:05:31.918
the main function prints 8, is there
a way to make that print 21 and 16?

85
00:05:31.918 --> 00:05:34.959
&gt;&gt; So it actually is printing 21 and
16, the 8 is a little

86
00:05:34.959 --> 00:05:39.970
bit confusing here cuz we're no longer
doing anything with that in the function.

87
00:05:39.970 --> 00:05:44.685
If I were to kill eight right now,
I'm going to get an error because there

88
00:05:44.685 --> 00:05:47.713
are not enough arguments
in call to print age.

89
00:05:47.713 --> 00:05:51.610
And that's because right now we're still
expecting print age to exhort, like,

90
00:05:51.610 --> 00:05:53.280
except an age integer.

91
00:05:53.280 --> 00:05:57.780
If I go ahead and
kill this up here, resave and

92
00:05:57.780 --> 00:05:59.950
then rerun our function it
makes a little bit more sense.

93
00:05:59.950 --> 00:06:01.750
It's not expecting any age argument but

94
00:06:01.750 --> 00:06:04.640
we're still printing out
age of Sally age of Bob.

95
00:06:04.640 --> 00:06:08.188
So you'll notice that our function
is returning two different values,

96
00:06:08.188 --> 00:06:09.475
we've got 16 and 21.

97
00:06:09.475 --> 00:06:13.286
We're not really doing anything
with that on line 12 here, but

98
00:06:13.286 --> 00:06:18.000
let's re-factor this and we're going to
set up the syntax where you can save and

99
00:06:18.000 --> 00:06:20.780
declare two variables at the same time.

100
00:06:20.780 --> 00:06:24.250
So knowing that print age returns two
things based on our function signature

101
00:06:24.250 --> 00:06:26.650
here, we know it does return two integers.

102
00:06:26.650 --> 00:06:32.113
We can say hey, age one, age two,
I wanna assign you both,

103
00:06:32.113 --> 00:06:37.482
both of you values to the result
of the print age function.

104
00:06:40.832 --> 00:06:43.536
So because print age returns two things,

105
00:06:43.536 --> 00:06:48.262
we can immediately assign two variables,
those values respectively.

106
00:06:48.262 --> 00:06:55.414
And then if I wanted to print
them down here instead,

107
00:06:55.414 --> 00:07:02.415
I'm going to print line age one,
and then age two.

108
00:07:02.415 --> 00:07:05.154
The last example of functions I'd like

109
00:07:05.154 --> 00:07:09.650
to talk about real quick is
the concept of a varriatic function.

110
00:07:09.650 --> 00:07:14.132
And so right now we have print
age accepting no values.

111
00:07:14.132 --> 00:07:19.383
I'm gonna modify this to have it return,
just an integer or

112
00:07:19.383 --> 00:07:23.071
kind of got to back
things up a little bit.

113
00:07:23.071 --> 00:07:27.685
[SOUND] cool, and then let's

114
00:07:27.685 --> 00:07:32.299
say I wanna call print age and

115
00:07:32.299 --> 00:07:39.423
I'm passing it a few different arguments.

116
00:07:42.412 --> 00:07:44.031
All of which are numbers.

117
00:07:44.031 --> 00:07:49.109
Let's make these actually ages,
how about 16, 21 and 30.

118
00:07:49.109 --> 00:07:52.440
Age is accepting three different integers.

119
00:07:52.440 --> 00:07:57.581
I could either [SOUND] specify in
my function signature that print

120
00:07:57.581 --> 00:08:03.100
age should accept three different ages,
all of which are integers,

121
00:08:03.100 --> 00:08:07.693
and then return some sort of
integer at the end of the day.

122
00:08:07.693 --> 00:08:09.918
But if I'm not sure how
many integers I'm passing,

123
00:08:09.918 --> 00:08:12.340
I just know I wanna do
something with all of them.

124
00:08:12.340 --> 00:08:14.944
It also provides a similar
kind of spread operator

125
00:08:18.524 --> 00:08:22.585
Which would look something like this,
where the first argument represents

126
00:08:22.585 --> 00:08:27.026
the collection of things you're passing
and the syntax on the right indicates that

127
00:08:27.026 --> 00:08:31.165
it's gonna be some unknown quantity
of integers that you're dealing with.

128
00:08:31.165 --> 00:08:33.415
And you can behave
the same way inside here.

129
00:08:33.415 --> 00:08:35.863
And then at this point,
ages becomes a collection and so

130
00:08:35.863 --> 00:08:39.590
you'd iterate over it similar to the for
loop with the range key word.

131
00:08:39.590 --> 00:08:43.090
Okay, so since we've refactored
our function to accept

132
00:08:44.650 --> 00:08:48.900
a spread operator kind of thing,
a variadic function, a set of ages.

133
00:08:48.900 --> 00:08:52.460
We're gonna remove the int here since
that doesn't make sense anymore.

134
00:08:52.460 --> 00:08:55.420
And let's iterate over the ages and
print those out one by one.

135
00:08:55.420 --> 00:08:58.222
So for
that we're gonna go back to our for loop.

136
00:08:58.222 --> 00:08:59.415
We're not gonna need the index,

137
00:08:59.415 --> 00:09:01.920
I'm gonna automatically put
that underscore in there.

138
00:09:01.920 --> 00:09:04.206
A second argument is the value.

139
00:09:04.206 --> 00:09:07.414
And it's assigned it to a value
of the range keyword and

140
00:09:07.414 --> 00:09:10.705
then what we're iterating
over which here is the ages.

141
00:09:10.705 --> 00:09:14.926
The set of ages that this
function will accept.

142
00:09:14.926 --> 00:09:22.418
So within this function, I'm going
to just print out [SOUND] the value.

143
00:09:22.418 --> 00:09:25.473
But you'll notice that now because
I've modified what's happening in this

144
00:09:25.473 --> 00:09:27.840
function, it's no longer
returning an integer.

145
00:09:27.840 --> 00:09:29.978
So in order for
this function signature to be accurate,

146
00:09:29.978 --> 00:09:32.125
we'll also need to remove
what that function returns.

147
00:09:41.203 --> 00:09:42.580
So if I run that file once again,

148
00:09:42.580 --> 00:09:44.977
you'll now see each of those
print out individually but

149
00:09:44.977 --> 00:09:48.140
I no longer have to be super specific
about what I pass into this function.

150
00:09:48.140 --> 00:09:51.640
It gives me a little bit more freedom to
not know what's happening in the program.

