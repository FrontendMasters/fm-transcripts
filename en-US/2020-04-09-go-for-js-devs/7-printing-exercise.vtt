WEBVTT

1
00:00:00.000 --> 00:00:03.340
The point of this exercise is to practice
with a little bit of string interpolation

2
00:00:03.340 --> 00:00:06.640
and also Hello World and kind of
getting used to that file structure.

3
00:00:06.640 --> 00:00:09.718
One thing I want to introduce before
we get too far into that is back in

4
00:00:09.718 --> 00:00:16.558
the terminal And
I'm just going to change into.

5
00:00:19.110 --> 00:00:20.851
The directory here.

6
00:00:25.082 --> 00:00:27.040
Bump up the font for you.

7
00:00:27.040 --> 00:00:32.150
So Go also comes with, besides we've
run go run and then a filename, we

8
00:00:32.150 --> 00:00:36.370
can also access the local documentation,
which is essentially the exact same thing

9
00:00:36.370 --> 00:00:40.440
you saw when you're looking at that
packages documentation in golang.org.

10
00:00:40.440 --> 00:00:44.210
So if I run go doc and then whatever I'm
trying to learn about, it's gonna print

11
00:00:44.210 --> 00:00:47.790
out essentially the same thing you just
saw in your browser, which is super great,

12
00:00:47.790 --> 00:00:50.770
especially if you're on an airplane and
you don't know what's happening.

13
00:00:51.940 --> 00:00:54.490
But for instance, if we wanna know,
okay, I've been using this f print,

14
00:00:54.490 --> 00:00:55.690
I'm not quite sure what it returns.

15
00:00:55.690 --> 00:00:57.060
I don't know what this is.

16
00:00:57.060 --> 00:01:02.700
If you run go doc FMT and
then like print line for

17
00:01:02.700 --> 00:01:06.170
instance, it's gonna spit out
exactly what that function does.

18
00:01:06.170 --> 00:01:08.417
And what's great about
the documentation and

19
00:01:08.417 --> 00:01:11.765
we'll talk about why this function
signature looks the way it does.

20
00:01:11.765 --> 00:01:14.470
It'll tell you what the function is,
what are arguments it expects and

21
00:01:14.470 --> 00:01:15.565
what it's going to return.

22
00:01:15.565 --> 00:01:19.297
And one of the best things about Go is
that these are all things that need to be

23
00:01:19.297 --> 00:01:19.960
addressed.

24
00:01:19.960 --> 00:01:21.730
You can't just leave them blank,
you can't ignore them.

25
00:01:21.730 --> 00:01:24.640
And so understanding where to go to find
the information if you're missing it

26
00:01:24.640 --> 00:01:25.480
is incredibly helpful.

27
00:01:28.500 --> 00:01:34.580
Cool so let's go back to exercise 2a,
and that'll be in the 02

28
00:01:34.580 --> 00:01:40.420
introduction section here and
exercise 2a talks about the following.

29
00:01:41.540 --> 00:01:44.100
The goals like I said,
are to use the font to package and

30
00:01:44.100 --> 00:01:45.450
practice some string formatting.

31
00:01:46.732 --> 00:01:50.470
We're gonna create a file
called exercise 2a.go and

32
00:01:50.470 --> 00:01:52.500
you can put this in the code directory.

33
00:01:52.500 --> 00:01:55.033
Each of the sections has a folder
already made called code.

34
00:01:55.033 --> 00:01:58.004
If you just want to throw all your go code
in there, and it's also kind of helps

35
00:01:58.004 --> 00:02:00.793
alleviate that problem with having
too many main packages hanging out,

36
00:02:00.793 --> 00:02:03.950
just kind of keeping everything
a little bit more isolated.

37
00:02:03.950 --> 00:02:06.050
You're also welcome to
use the go playground.

38
00:02:06.050 --> 00:02:08.268
If you'd rather not create files for
a little while, that's fine too.

39
00:02:08.268 --> 00:02:13.840
And we're gonna start with the following
code which is just that base template for

40
00:02:13.840 --> 00:02:18.670
a Go file, with the package main,
import prompt, and the func main.

41
00:02:18.670 --> 00:02:21.620
And within that, we're gonna
practice the following exercises.

42
00:02:21.620 --> 00:02:27.750
First of all, just kind of re
experience the hello world example.

43
00:02:27.750 --> 00:02:30.290
So we'll just print hello
world to the console.

44
00:02:30.290 --> 00:02:32.130
And then after that,
we're gonna do some more printing.

45
00:02:32.130 --> 00:02:35.070
So the sentence I'd like you to
end up with is something like Hi,

46
00:02:35.070 --> 00:02:36.060
my name is Brenna.

47
00:02:36.060 --> 00:02:38.010
I've lived in Denver for four years.

48
00:02:38.010 --> 00:02:40.020
They say the weather is amazing,
which is true.

49
00:02:40.020 --> 00:02:43.120
So you'll notice that there are kind of
three different types that we're working

50
00:02:43.120 --> 00:02:43.630
with in there.

51
00:02:43.630 --> 00:02:47.200
We've got a couple strings for
name and hometown, a number for

52
00:02:47.200 --> 00:02:48.650
how long you've lived wherever you live.

53
00:02:48.650 --> 00:02:50.550
And then a true or false for whether or

54
00:02:50.550 --> 00:02:52.660
not the weather in that
location is amazing.

55
00:02:52.660 --> 00:02:56.770
And if you need help, definitely dig
into the documentation around string

56
00:02:56.770 --> 00:03:00.880
formatting, which you'll find at the top
of the thumped package information.

57
00:03:00.880 --> 00:03:03.350
And then in about three or
four minutes, we'll circle back and

58
00:03:03.350 --> 00:03:04.160
talk about the solution.

