WEBVTT

1
00:00:00.030 --> 00:00:03.890
So far we've seen the thumped print line
function kind of a lot as we're printing

2
00:00:03.890 --> 00:00:04.460
to the console.

3
00:00:04.460 --> 00:00:08.690
But that's not the only formatted string
function that we're going to use today,

4
00:00:08.690 --> 00:00:09.610
and kind of the patterns and

5
00:00:09.610 --> 00:00:12.680
similarities between them
are a common thread throughout go.

6
00:00:12.680 --> 00:00:16.302
So I wanna talk a little bit
about what those look like.

7
00:00:16.302 --> 00:00:19.170
We're gonna hop over to
the Golang playground,

8
00:00:19.170 --> 00:00:22.350
just to see what that looks like in case
any of you want to stay there for the day.

9
00:00:22.350 --> 00:00:26.770
And we're going to experiment with
some of the other printing patterns.

10
00:00:26.770 --> 00:00:31.361
So let's hop over to
PLAY.GOLANG.ORG in your browser.

11
00:00:36.122 --> 00:00:39.270
So when you open it up, you're gonna see
a yellow screen that looks like this.

12
00:00:39.270 --> 00:00:42.080
But, you'll notice that you
see a copy of the file we just

13
00:00:42.080 --> 00:00:44.980
created with that package main,
func main, and some stuff like that.

14
00:00:44.980 --> 00:00:47.780
And so within here,
we can hit Run at the top and

15
00:00:47.780 --> 00:00:51.140
it's gonna run all of your code
similar to how we just did locally.

16
00:00:51.140 --> 00:00:54.710
But what I wanna talk about is
this thumped print line function.

17
00:00:54.710 --> 00:00:58.460
So, right now you're seeing the console
log equivalent of getting stuff

18
00:00:58.460 --> 00:01:00.540
displaying in your console here.

19
00:01:02.210 --> 00:01:11.370
The other kind of ways to print include
Thumped.print without the line.

20
00:01:11.370 --> 00:01:16.040
And if I run this, you'll see I have
two lines that look pretty similar.

21
00:01:16.040 --> 00:01:25.169
If I were to copy that and
do that a second time And hit Run,

22
00:01:25.169 --> 00:01:30.730
you'll notice that there's no new line
attached to the end of that console log.

23
00:01:30.730 --> 00:01:32.030
So the difference between printline and

24
00:01:32.030 --> 00:01:36.090
print is that you have to manually
insert a new line if you so choose.

25
00:01:36.090 --> 00:01:39.454
And the reason why this is important is
because, as we're actually using some of

26
00:01:39.454 --> 00:01:42.919
this formatting to return an actual string
that we want to keep, this formatting is

27
00:01:42.919 --> 00:01:45.754
really helpful for what you actually
want that string to look like.

28
00:01:47.950 --> 00:01:51.877
So print line inserts a new line, print
itself does not, unless we actually escape

29
00:01:51.877 --> 00:01:55.690
a newline character at the end
of our string, which we can do.

30
00:01:55.690 --> 00:02:00.060
And then the third version that we're
going to be using a lot throughout the day

31
00:02:00.060 --> 00:02:00.650
is Printf.

32
00:02:01.740 --> 00:02:04.650
And Printf takes two or more arguments.

33
00:02:04.650 --> 00:02:09.330
The first is the string you want to print,
and

34
00:02:09.330 --> 00:02:12.200
the second is comma separated,
and it's going to be a list of

35
00:02:12.200 --> 00:02:14.952
arguments you're going to
replace within that string.

36
00:02:14.952 --> 00:02:19.710
So right now, there

37
00:02:19.710 --> 00:02:24.250
are no variables we're replacing, but how
this would work is in the actual string.

38
00:02:24.250 --> 00:02:26.870
Let's say this was the variable
that's coming in from somewhere else,

39
00:02:26.870 --> 00:02:29.720
I would replace it with a string verb.

40
00:02:29.720 --> 00:02:33.395
So here percent s indicates that what I'm
replacing it with is going to be a string,

41
00:02:33.395 --> 00:02:35.398
and this is a common
syntax that comes from C.

42
00:02:35.398 --> 00:02:39.649
And then on the right hand side of the
comma separated values, you're gonna have

43
00:02:39.649 --> 00:02:43.477
the same order of the actual values
you want to replace that string with.

44
00:02:43.477 --> 00:02:45.910
So here we've got, hello,
my name is percent S.

45
00:02:45.910 --> 00:02:49.740
And then that first argument it encounters
has to match the type, which is a string,

46
00:02:49.740 --> 00:02:53.480
and it'll interpolate that into
our string on the left hand side.

47
00:02:53.480 --> 00:02:57.384
So if I run this, you'll see that this
string appears down at the bottom.

48
00:03:00.470 --> 00:03:03.260
Similarly, there are a few
different types of verbs.

49
00:03:06.010 --> 00:03:07.620
Let's see.

50
00:03:07.620 --> 00:03:14.263
It is September 25th,
24th [LAUGH] Thank you.

51
00:03:14.263 --> 00:03:20.060
So September 24th, this year,
is technically an integer in my string.

52
00:03:20.060 --> 00:03:24.510
So, to indicate an integer, it's %d, and
so now I've got two different verbs.

53
00:03:24.510 --> 00:03:25.560
And on the right-hand side,

54
00:03:25.560 --> 00:03:29.270
the comma separated values are going
to go in order of the way they appear.

55
00:03:29.270 --> 00:03:32.995
So if I want that second argument
to be an integer, we would have 24.

56
00:03:34.667 --> 00:03:37.446
And you'll see all of those verbs
get interpolated into our string.

57
00:03:37.446 --> 00:03:40.420
And so this is gonna be a pattern that we
actually use pretty regularly throughout

58
00:03:40.420 --> 00:03:44.550
the day, but those are the three
different print versions and

59
00:03:44.550 --> 00:03:49.680
all of these are going to
display in your console, which

60
00:03:49.680 --> 00:03:52.370
is different from a couple of the other
functions we're gonna talk about next.

61
00:03:52.370 --> 00:03:57.060
So that top section are the three that
we just covered, print, print, line,

62
00:03:57.060 --> 00:03:58.250
and print f.

63
00:03:58.250 --> 00:04:00.950
And these all print output to
the actual standard output console,

64
00:04:00.950 --> 00:04:03.490
as you're seeing that display
kind of like console.log.

65
00:04:03.490 --> 00:04:06.710
The two others that will be
pretty common are Fprint.

66
00:04:06.710 --> 00:04:09.040
And this is going to print
the output to an external source.

67
00:04:09.040 --> 00:04:11.500
Let's say we want to render
text to a browser, or

68
00:04:11.500 --> 00:04:16.140
save it to a file instead of sending it
to the console, you'd use thumbed Fprint.

69
00:04:16.140 --> 00:04:18.680
But similarly, those three patterns,
the print, print line and

70
00:04:18.680 --> 00:04:20.740
print f, all work the same way.

71
00:04:20.740 --> 00:04:24.040
So that pattern of either new line, no
new line, or we're gonna interpolate some

72
00:04:24.040 --> 00:04:28.110
string verbs, will all behave
similarly for all of these patterns.

73
00:04:28.110 --> 00:04:31.960
And then the last, the sprint or
Sprint, is going to store the output on

74
00:04:31.960 --> 00:04:36.200
a character buffer, which means you
wanna save that string to a variable.

75
00:04:36.200 --> 00:04:40.260
So when we're talking about how
font.printline returns a series of bytes,

76
00:04:40.260 --> 00:04:42.890
Sprint returns the actual string
you're trying to talk about.

77
00:04:42.890 --> 00:04:45.889
So this is why it's kind of good to keep
an eye on what we're trying to do, what

78
00:04:45.889 --> 00:04:49.186
are you trying to do with that string, and
what happens next with that information.

