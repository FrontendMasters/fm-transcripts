WEBVTT

1
00:00:00.210 --> 00:00:03.928
So this is a slight example of what we
just talked about, that fruit array is at

2
00:00:03.928 --> 00:00:07.764
the top with our five elements of strings,
and then our sliced fruit which gives

3
00:00:07.764 --> 00:00:11.046
us back pear and apple is that
second variable called sliced fruit.

4
00:00:11.046 --> 00:00:15.531
On the left hand side, those red boxes,
those kinda represent how our

5
00:00:15.531 --> 00:00:19.504
spliced fruit variable is keeping
track of its information.

6
00:00:19.504 --> 00:00:24.206
And then the blue boxes at the bottom are
our representation of the actual array,

7
00:00:24.206 --> 00:00:25.809
the fruit array as a whole.

8
00:00:25.809 --> 00:00:29.152
So you'll notice that the indexes
on the bottom 0, 1, 2, 3,

9
00:00:29.152 --> 00:00:32.222
4 are talking about each index
of each element in the array.

10
00:00:32.222 --> 00:00:35.391
And we said we wanted elements 1 to 3.

11
00:00:35.391 --> 00:00:37.253
Something I like to do
to think about like,

12
00:00:37.253 --> 00:00:39.496
how those indexes actually
organize themselves.

13
00:00:39.496 --> 00:00:44.350
You just slide those numbers to the like
dividing area between the elements.

14
00:00:44.350 --> 00:00:47.960
So if you think like it starts at 1,
which is the left of pair here,

15
00:00:47.960 --> 00:00:52.084
go until we're 3 is which is to the left
of kumquat, you see pear and apple,

16
00:00:52.084 --> 00:00:55.254
which is the array that we're
printing to the the screen.

17
00:00:58.625 --> 00:01:01.675
Cool, but so our pointer here is like,
okay, I'm slice,

18
00:01:01.675 --> 00:01:04.560
I'm gonna carve myself
out of an existing array.

19
00:01:04.560 --> 00:01:08.270
And my starting point, is whatever
that first element of the array is.

20
00:01:08.270 --> 00:01:12.190
So my pointer where I'm storing my data
starts at element 1, which is pear.

21
00:01:12.190 --> 00:01:16.040
And then I know that I'm a length 2,
cuz you told me to cut out 2 elements,

22
00:01:16.040 --> 00:01:16.910
pair and apple.

23
00:01:16.910 --> 00:01:18.950
But because I'm associated
with this underlying array,

24
00:01:18.950 --> 00:01:20.470
there's a couple elements of extra space.

25
00:01:20.470 --> 00:01:21.760
So my capacity is four.

26
00:01:22.980 --> 00:01:24.790
But every time we're
talking about a slice,

27
00:01:24.790 --> 00:01:27.980
it knows about these three pieces of
data and knows where it's starting.

28
00:01:27.980 --> 00:01:29.470
Where does my data live?

29
00:01:29.470 --> 00:01:30.480
How long am I?

30
00:01:30.480 --> 00:01:31.560
How many elements do I have?

31
00:01:31.560 --> 00:01:33.234
And what's the capacity
I have to work with,

32
00:01:33.234 --> 00:01:34.699
before I need to allocate more memory.

33
00:01:41.375 --> 00:01:45.480
Hop back into the code and talk about
how we modify the length of a slice.

34
00:01:45.480 --> 00:01:50.060
So right now, if our capacity is 4, and we
wanna add stuff to it, how do we do that?

35
00:01:50.060 --> 00:01:51.810
If everything is like set up in memory,

36
00:01:51.810 --> 00:01:56.220
what are some methods we can use to
get around the restriction there.

37
00:01:56.220 --> 00:01:58.010
And the first one we're
gonna look at is append.

38
00:02:01.287 --> 00:02:05.050
We'll clean that up just a little bit.

39
00:02:05.050 --> 00:02:06.995
So let's say we have our fruit array.

40
00:02:06.995 --> 00:02:09.421
I'm gonna bring back a slice.

41
00:02:12.291 --> 00:02:14.330
Okay, we have a slice
called a splicedFruit.

42
00:02:15.560 --> 00:02:19.137
And let's say we want to add.

43
00:02:22.489 --> 00:02:23.130
Fruit to our array.

44
00:02:23.130 --> 00:02:25.700
We need to use the built
in function append, and

45
00:02:25.700 --> 00:02:27.380
append is going to take a few arguments.

46
00:02:27.380 --> 00:02:30.400
The first is, what is our starting slice.

47
00:02:30.400 --> 00:02:31.450
What slice are we starting with?

48
00:02:31.450 --> 00:02:33.745
And we're starting with splicedFruit.

49
00:02:33.745 --> 00:02:41.515
And then we can add on additional
fruits that we want to append or slice.

50
00:02:41.515 --> 00:02:43.820
Cantaloupe, with an e.

51
00:02:48.869 --> 00:02:55.645
Cherries, so if we were to add cantaloupe
and cherries to our splicedFruit array.

52
00:02:57.924 --> 00:03:02.299
And let's go ahead and
print out all of the information of.

53
00:03:04.345 --> 00:03:05.748
SplicedFruit.

54
00:03:08.399 --> 00:03:11.940
And I'm also gonna print out fruitToAdd.

55
00:03:11.940 --> 00:03:16.840
So we're gonna look at both of
these slices in the console.

56
00:03:18.130 --> 00:03:21.040
So you'll see our first one there
just has the 2, like we saw before.

57
00:03:21.040 --> 00:03:24.527
And our second one now has the 2
that we sliced out of the array, and

58
00:03:24.527 --> 00:03:26.839
the additional 2 that we just appended on.

59
00:03:31.737 --> 00:03:34.126
Just for kicks,
let's go ahead and print out.

60
00:03:36.886 --> 00:03:38.689
The length of our new array.

61
00:03:42.562 --> 00:03:45.224
And we'll also print out the capacity.

62
00:03:49.212 --> 00:03:51.126
Another interesting thing to note,

63
00:03:51.126 --> 00:03:55.210
is that FruitToAdd here isn't just giving
me back the two elements I added on.

64
00:03:56.350 --> 00:03:57.740
Slightly poorly named variable,

65
00:03:57.740 --> 00:04:03.250
there should probably be total fruit or
something along those lines.

66
00:04:03.250 --> 00:04:07.140
But it's gonna give me back the original
array and anything I've added to it, and

67
00:04:07.140 --> 00:04:09.380
give me just the whole slice back
of everything that I want in there.

68
00:04:10.740 --> 00:04:13.145
So I print out the length and
capacity of FruitToAdd.

69
00:04:14.380 --> 00:04:19.990
You'll see that they're 4, and then the
capacity is 4 which makes sense, right.

70
00:04:19.990 --> 00:04:22.550
Cuz we're working with that array that
had a capacity of 4 to begin with.

71
00:04:22.550 --> 00:04:24.340
We filled up all 4 slots.

72
00:04:24.340 --> 00:04:27.080
Goes like cool, I've allocated all the
memory, we're good to go, let's move on.

73
00:04:28.310 --> 00:04:30.336
What happens if I add
a third element here.

74
00:04:32.784 --> 00:04:33.908
Lemon.

75
00:04:35.323 --> 00:04:37.554
So now we're reaching five
elements in this array,

76
00:04:37.554 --> 00:04:39.694
even though our capacity
said four to begin with.

77
00:04:39.694 --> 00:04:41.001
So I'm gonna print this out again.

78
00:04:43.078 --> 00:04:46.471
So no we've got a length of 5 and

79
00:04:46.471 --> 00:04:51.220
a capacity of 8, which seems curious.

80
00:04:51.220 --> 00:04:52.300
So we started with.

81
00:04:57.186 --> 00:05:01.885
Let's go ahead and print out the same
information for both of our arrays.

82
00:05:06.898 --> 00:05:11.045
And then let's do

83
00:05:11.045 --> 00:05:16.023
splicedFruit here.

84
00:05:22.886 --> 00:05:26.430
Cool, so our first line of console
logs there is we have pear apple, and

85
00:05:26.430 --> 00:05:29.031
then pear, apple,
cantaloupe, cherries lemon,

86
00:05:29.031 --> 00:05:31.712
the two different slices
that we're talking about.

87
00:05:31.712 --> 00:05:36.775
The second output says 2 and 4, so
we're saying the length of our first

88
00:05:36.775 --> 00:05:42.502
splicedFruit array is 2,and the capacity
of our splicedFruit array here is 4.

89
00:05:44.173 --> 00:05:48.925
On the next line, we're saying that
the length of our total fruit array is 5,

90
00:05:48.925 --> 00:05:51.596
which makes sense, but the capacity is 8.

91
00:05:54.757 --> 00:05:56.869
So you'll notice that Go
hasn't just been like, okay,

92
00:05:56.869 --> 00:05:59.170
cool, I'm gonna add two additional
elements to your array.

93
00:05:59.170 --> 00:06:02.000
I'm actually gonna double
the capacity that I had,

94
00:06:02.000 --> 00:06:05.130
based on the slice that you
passed in the first place.

95
00:06:05.130 --> 00:06:10.210
So if our capacity of splicedFruit was
4 which we see here, when it's like,

96
00:06:10.210 --> 00:06:11.850
I don't know how much
more memory you want,

97
00:06:11.850 --> 00:06:15.370
it takes the capacity of that array
we're appending to and doubles it.

98
00:06:15.370 --> 00:06:17.980
And it's like okay,
now take up as much space as you want.

99
00:06:17.980 --> 00:06:19.290
I have now doubled your array length.

100
00:06:19.290 --> 00:06:23.328
And then if we continue to add more
elements here, it's gonna allocate as much

101
00:06:23.328 --> 00:06:27.071
memory as necessary, by using
the capacity of our original right here.

