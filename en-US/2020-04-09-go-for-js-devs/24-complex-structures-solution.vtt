WEBVTT

1
00:00:00.460 --> 00:00:05.823
So the first thing I'm going to do is
create a file in our code directory for

2
00:00:05.823 --> 00:00:07.044
exercise for C.

3
00:00:07.044 --> 00:00:11.798
And if we're talking about part one,
the first thing we wanted to do is switch

4
00:00:11.798 --> 00:00:15.693
back to the markdown file,
is instantiate an array of scores.

5
00:00:15.693 --> 00:00:18.201
The array should have at least five
elements of type float 64, and

6
00:00:18.201 --> 00:00:20.190
then write a function that
calculates that average.

7
00:00:21.990 --> 00:00:23.220
So in the solution here,

8
00:00:23.220 --> 00:00:27.560
my function of average is going
to take a series of scores.

9
00:00:27.560 --> 00:00:30.670
And that type signature indicates that
it's supposed to accept an array of five

10
00:00:30.670 --> 00:00:35.670
elements, all of which are float 64,
and return a float 64 at the end.

11
00:00:35.670 --> 00:00:36.780
In order to calculate the average,

12
00:00:36.780 --> 00:00:41.310
I'm instantiating a total initial value
of 0.0 since we're working with a float.

13
00:00:41.310 --> 00:00:46.584
And then we're using the range keyword to
iterate over all of the scores we get in,

14
00:00:46.584 --> 00:00:48.580
add them to that total number.

15
00:00:48.580 --> 00:00:53.220
And then at the end of the day,
we wanna return total divided by a float

16
00:00:53.220 --> 00:00:56.590
64 version of however
many scores we passed in.

17
00:00:57.660 --> 00:01:01.836
So using that len operator
on the scores argument.

18
00:01:07.382 --> 00:01:10.450
So on the main function here,
I'm just gonna print line scores.

19
00:01:13.130 --> 00:01:16.149
And then if we run our exercise so far.

20
00:01:29.211 --> 00:01:31.453
We get an array of five scores,

21
00:01:31.453 --> 00:01:36.386
which is because I am simply printing
out those scores on line 15.

22
00:01:36.386 --> 00:01:37.435
So instead of doing that,

23
00:01:37.435 --> 00:01:40.020
let's actually call the function
which is going to be average.

24
00:01:42.715 --> 00:01:46.510
And then pass in that array of scores.

25
00:01:48.680 --> 00:01:51.229
Run this one more time and
you get that result of 5.4.

26
00:02:00.506 --> 00:02:01.855
Cool, so let's look at part two.

27
00:02:06.453 --> 00:02:10.090
In part two, the first thing we wanted to
do was set up a map that contains a set of

28
00:02:10.090 --> 00:02:12.470
pet names and
their corresponding animal type.

29
00:02:12.470 --> 00:02:16.399
For instance, if we have a pet name
of Fido, it's set to a value of dog,

30
00:02:16.399 --> 00:02:17.920
both of which are strings.

31
00:02:22.824 --> 00:02:24.930
I'm gonna create a second
function underneath our average.

32
00:02:24.930 --> 00:02:27.991
And this can keep everything in
the same file for this example,

33
00:02:27.991 --> 00:02:29.159
and I'm gonna call it.

34
00:02:34.765 --> 00:02:36.210
We'll hold off on that.

35
00:02:36.210 --> 00:02:38.000
According to the actual exercise file,

36
00:02:38.000 --> 00:02:40.540
the first thing we're trying to
do is define an initial map.

37
00:02:40.540 --> 00:02:42.578
So let's do that first.

38
00:02:42.578 --> 00:02:47.421
So I'm gonna keep this
outside of my main function,

39
00:02:47.421 --> 00:02:51.836
and use the var keyword and
say, initial pets.

40
00:02:51.836 --> 00:02:55.910
So I'm gonna set this equal to,
it's gonna be a map type.

41
00:02:55.910 --> 00:02:57.710
The key is a string.

42
00:02:57.710 --> 00:02:58.994
The value is also a string.

43
00:03:01.641 --> 00:03:05.233
And that is going to be equal to
a map type with a key of string,

44
00:03:05.233 --> 00:03:10.690
value of string, and then the curly braces
to insert some initial values here.

45
00:03:10.690 --> 00:03:14.196
So let's throw in a few pets,
we've got Fido, that's a dog.

46
00:03:14.196 --> 00:03:19.617
We've got Penelope, can be a horse.

47
00:03:19.617 --> 00:03:25.935
And Nancy will be a cat.

48
00:03:25.935 --> 00:03:32.570
[LAUGH] Cool, so we have our
initial pets array, map, excuse me.

49
00:03:35.250 --> 00:03:40.380
Back in exercise 4C, we wanna write a
function that takes a string argument and

50
00:03:40.380 --> 00:03:45.550
returns a Boolean indicating whether or
not that key exists in our map of pets.

51
00:03:45.550 --> 00:03:49.241
So, all right, let's create a function.

52
00:03:49.241 --> 00:03:52.820
I'm gonna call it, doesPetExist.

53
00:03:52.820 --> 00:03:53.820
According to the instructions,

54
00:03:53.820 --> 00:03:56.510
it's gonna take some sort of pet name,
that's a string type.

55
00:03:56.510 --> 00:03:58.445
And it's gonna return a Boolean for

56
00:03:58.445 --> 00:04:00.969
whether or
not that pet exists within our map.

57
00:04:03.479 --> 00:04:06.667
So if you recall from
the lesson plan earlier,

58
00:04:06.667 --> 00:04:11.420
looking up a key value pair in a map
will return two different values.

59
00:04:11.420 --> 00:04:14.080
It will return the value if it exists.

60
00:04:14.080 --> 00:04:16.490
And then that okay Boolean for
whether or not, I'm sorry,

61
00:04:16.490 --> 00:04:18.410
the value of the actual
string if it exists.

62
00:04:18.410 --> 00:04:19.740
And then an okay Boolean for

63
00:04:19.740 --> 00:04:24.352
whether or not it's successfully
found that element within the map.

64
00:04:24.352 --> 00:04:28.630
So I'm gonna set those two values
on the left-hand side here.

65
00:04:28.630 --> 00:04:31.255
And then I'm gonna grab
my initial pets map, and

66
00:04:31.255 --> 00:04:35.687
check to see if whatever pet name we pass
into this function exists within our map.

67
00:04:40.847 --> 00:04:42.470
We'll return okay here.

68
00:04:42.470 --> 00:04:45.796
And then because I'm not using this
value here, so I don't get an error,

69
00:04:45.796 --> 00:04:47.630
I'll replace that with an underscore.

70
00:04:54.526 --> 00:04:58.895
I'm gonna comment out the two lines
within our main that were from

71
00:04:58.895 --> 00:05:00.890
the average array exercise.

72
00:05:00.890 --> 00:05:06.974
And then we're going to say, okay,
let's say our pet name here is Fido.

73
00:05:06.974 --> 00:05:09.896
And then let's check to see if pet exists.

74
00:05:09.896 --> 00:05:15.870
I'm gonna set that as a variable and
assign it to a value of does pet exist,

75
00:05:15.870 --> 00:05:18.890
and then pass it,
the pet name that we came up with for now.

76
00:05:19.940 --> 00:05:25.991
And then let's just PrintLinePetExists.

77
00:05:30.083 --> 00:05:30.777
Cool.

78
00:05:35.342 --> 00:05:37.662
So we're getting true back
because we passed in Fido.

79
00:05:37.662 --> 00:05:42.104
If I change this to Spot,

80
00:05:42.104 --> 00:05:45.495
we'll get false.

81
00:05:49.286 --> 00:05:50.778
And then last but not least here,

82
00:05:50.778 --> 00:05:53.540
we'll look at that third part
that's looking at slices.

83
00:05:53.540 --> 00:05:56.490
So part one of part three is
to instantiate a slice that

84
00:05:56.490 --> 00:05:58.929
has an initial value of
a collection of groceries.

85
00:06:00.420 --> 00:06:02.049
So back in our Go file.

86
00:06:05.361 --> 00:06:08.980
I'm going to establish a new
set of groceries up here.

87
00:06:08.980 --> 00:06:10.820
We're gonna call it initial groceries.

88
00:06:13.100 --> 00:06:15.431
And it's going to be a slice of strings.

89
00:06:19.571 --> 00:06:24.000
And we can do the inference bit here.

90
00:06:25.150 --> 00:06:29.420
Because we are passing
in a series of strings,

91
00:06:29.420 --> 00:06:33.540
Go is going to let us define the initial
values without having a specific number.

92
00:06:33.540 --> 00:06:35.904
Because even though we're
still talking about a slice,

93
00:06:35.904 --> 00:06:39.008
it can't instantiate an initial array
behind the scenes of the length that

94
00:06:39.008 --> 00:06:40.400
we're passing it to begin with.

95
00:06:43.580 --> 00:06:48.052
So here we have initial groceries which
is a slice set to a few groceries.

96
00:06:52.035 --> 00:06:54.699
And then the second part here is to
write a function that takes one or

97
00:06:54.699 --> 00:06:55.850
more groceries as strings.

98
00:06:55.850 --> 00:06:58.220
And then append them to the slice,

99
00:06:58.220 --> 00:07:00.230
printing out the resulting
list of groceries.

100
00:07:00.230 --> 00:07:03.148
So this guy gets a tiny
bit more complicated.

101
00:07:03.148 --> 00:07:05.998
We're not just passing in one thing,
we could potentially

102
00:07:05.998 --> 00:07:09.362
be passing in another list of groceries
like three or four groceries.

103
00:07:09.362 --> 00:07:12.864
So we're gonna have to do some iterating
to make sure that each of the groceries

104
00:07:12.864 --> 00:07:14.895
gets appended to our
final groceries array.

105
00:07:19.470 --> 00:07:23.525
So I'm gonna create a function
here called addGroceryToList.

106
00:07:24.990 --> 00:07:26.300
It's gonna need two things.

107
00:07:26.300 --> 00:07:31.729
Well, just gonna need one thing,
we're gonna need the new grocery

108
00:07:31.729 --> 00:07:37.648
that we wanna add to our list which is
a set of an unknown number of strings.

109
00:07:37.648 --> 00:07:40.611
So let's modify this variable to indicate
that it could be potentially more

110
00:07:40.611 --> 00:07:41.980
than one thing.

111
00:07:41.980 --> 00:07:45.810
So new groceries using the variadic
to indicate one or more strings.

112
00:07:45.810 --> 00:07:48.120
And then at the end of the day,

113
00:07:48.120 --> 00:07:52.841
we do want to return that slice
of strings as our final value.

114
00:07:57.753 --> 00:08:00.398
So within addGrocery,
we need to do a couple things.

115
00:08:00.398 --> 00:08:03.000
First I'm gonna establish that

116
00:08:03.000 --> 00:08:07.090
right now our starting food variable
is going to be our initial groceries.

117
00:08:10.696 --> 00:08:15.990
And then I'm gonna use the for loop, and

118
00:08:15.990 --> 00:08:19.490
iterate over all of
the groceries we just passed in.

119
00:08:21.700 --> 00:08:25.521
So for each new grocery,
we're missing the range keyword here.

120
00:08:31.605 --> 00:08:36.144
For each new grocery I wanna reassign what
foods is and establish a new array, so

121
00:08:36.144 --> 00:08:40.420
we're going to append whatever's
from that initial array of foods.

122
00:08:40.420 --> 00:08:45.350
And then add on each individual new
grocery that we just want to put in

123
00:08:45.350 --> 00:08:46.226
our slice.

124
00:08:48.842 --> 00:08:52.759
And then because my function signature
here indicates that I do want

125
00:08:52.759 --> 00:08:56.276
to return that whole slice of strings,
I will return foods.

126
00:09:00.240 --> 00:09:05.289
In our main function,
we can comment out the existing code,

127
00:09:05.289 --> 00:09:08.068
set a new variable to groceryList

128
00:09:13.231 --> 00:09:21.140
Which is gonna be equal to
addGroceryToList, and lets say beets.

129
00:09:23.010 --> 00:09:24.259
If I PrintLine.

130
00:09:31.034 --> 00:09:34.117
You'll see that that single element
beets has been added to our list,

131
00:09:34.117 --> 00:09:36.115
just to make sure it's behaving correctly.

132
00:09:36.115 --> 00:09:41.233
What if we want beets and then maybe
some chocolate, maybe some wine.

133
00:09:43.455 --> 00:09:46.517
You'll see that each of those things has
also been appended to our final array.

