WEBVTT

1
00:00:00.313 --> 00:00:02.606
Now we're going to be hanging out in
the structs.go file for quite a while.

2
00:00:02.606 --> 00:00:05.423
We're gonna be building on this and
adding a couple more examples.

3
00:00:05.423 --> 00:00:10.667
But the one thing I wanna do first is
create our second type of a struct.

4
00:00:10.667 --> 00:00:14.848
So let's create a struct type of Group.

5
00:00:14.848 --> 00:00:18.800
Imagine you have a couple different
types of users in your application,

6
00:00:18.800 --> 00:00:21.925
some of them are admins,
some of them are general users.

7
00:00:21.925 --> 00:00:25.087
So imagine that you can group
each type of user together, and

8
00:00:25.087 --> 00:00:27.637
that's what this struct
is kind of in charge of.

9
00:00:27.637 --> 00:00:32.208
So some of the attributes in my
live on Group would be a role, for

10
00:00:32.208 --> 00:00:36.537
instance, admin, general,
guest, whatever you want.

11
00:00:36.537 --> 00:00:39.302
And then it's gonna have
a collection of users.

12
00:00:39.302 --> 00:00:44.893
And so here, if a role is gonna be
a string, and we know we want our users to

13
00:00:44.893 --> 00:00:50.053
be, Users plural,

14
00:00:50.053 --> 00:00:55.704
to be a collection of our user
types that we just created,

15
00:00:55.704 --> 00:00:58.664
we can use User as a type name.

16
00:00:58.664 --> 00:01:02.378
So see here, we're saying, okay, we want
an unknown number, a slice collection,

17
00:01:02.378 --> 00:01:03.059
of User types.

18
00:01:08.212 --> 00:01:12.217
A couple other attributes we're gonna
add that we'll play with later is

19
00:01:12.217 --> 00:01:14.262
a newestUser, which is a User type.

20
00:01:16.451 --> 00:01:17.656
And spaceAvailable.

21
00:01:17.656 --> 00:01:22.123
So let's say, hypothetically, there's
only space available in the Group if

22
00:01:22.123 --> 00:01:24.468
there's a certain number of users in it.

23
00:01:24.468 --> 00:01:27.601
So if there's less than 10,
then spaceAvailable is gonna be true.

24
00:01:27.601 --> 00:01:29.502
If there's over 10,
maybe spaceAvailable is false.

25
00:01:29.502 --> 00:01:33.744
So we're gonna play with these in
a couple upcoming examples here.

26
00:01:33.744 --> 00:01:39.023
Once again, we're getting an error because
our capital G Group needs to be commented,

27
00:01:39.023 --> 00:01:40.533
since it is exportable.

28
00:01:40.533 --> 00:01:44.315
And I'm gonna say Group

29
00:01:44.315 --> 00:01:49.806
represents a set of users, cool.

30
00:01:49.806 --> 00:01:53.240
So now we have these two structs
that live in our application,

31
00:01:53.240 --> 00:01:54.504
one of which is a User.

32
00:01:54.504 --> 00:01:58.161
And then a Group which defines
a couple additional things,

33
00:01:58.161 --> 00:01:59.775
including a set of users.

34
00:01:59.775 --> 00:02:03.147
Let's create some functions that can
interact with some of these things.

35
00:02:03.147 --> 00:02:08.426
So I'm gonna create a first function for
describing a User.

36
00:02:08.426 --> 00:02:13.272
So let's say, hypothetically, we want to
introduce this User in our application,

37
00:02:13.272 --> 00:02:17.940
like welcome to the application, so and
so, tell us a little bit about yourself.

38
00:02:17.940 --> 00:02:20.196
So if I call the function describeUser.

39
00:02:24.454 --> 00:02:28.123
I gonna want it to say
some stuff about User.

40
00:02:28.123 --> 00:02:32.284
So similarly to how we can pass strings or
other types to functions,

41
00:02:32.284 --> 00:02:33.967
you can also pass structs.

42
00:02:33.967 --> 00:02:38.027
I'm going to assume that describeUser
takes an argument u of a User type.

43
00:02:42.809 --> 00:02:45.684
At the end of this function,
I'm gonna print back out a string.

44
00:02:50.690 --> 00:02:55.386
So within here, all I kinda wanna do
is return some type of description.

45
00:02:55.386 --> 00:03:01.623
So let's do, set a variable desc for
description.

46
00:03:01.623 --> 00:03:05.552
And then I'm gonna use the Sprintf
function, kinda just to practice.

47
00:03:05.552 --> 00:03:09.024
But if you'll recall from
the beginning of class,

48
00:03:09.024 --> 00:03:14.610
Sprintf is the type of formatting that
actually stores that string to a variable.

49
00:03:14.610 --> 00:03:18.435
So if you recall, print line simply
returns the number of bytes.

50
00:03:18.435 --> 00:03:21.335
And then if there's an error message,
Sprintf is going to return the actual

51
00:03:21.335 --> 00:03:24.434
string that's going to come into the
parentheses on the right-hand side here.

52
00:03:24.434 --> 00:03:25.266
And with that f,

53
00:03:25.266 --> 00:03:28.537
I'm going to want to interpolate
some of those verbs in there, so

54
00:03:28.537 --> 00:03:32.357
we can get really specific on what parts
of the User we want to describe here.

55
00:03:34.574 --> 00:03:40.737
So in our Sprintf function,
let's just kinda give it, let's see.

56
00:03:43.934 --> 00:03:46.038
Kinda list out the attributes
in a more readable way.

57
00:03:46.038 --> 00:03:50.718
So the Name is gonna be
the full name of the User.

58
00:03:50.718 --> 00:03:55.774
And let's say we want it
to say Marilyn Monroe.

59
00:03:58.144 --> 00:04:00.492
Email, particular email address,

60
00:04:07.534 --> 00:04:13.843
I think we'll just keep it like that,
so marilynmonroe@gmail.com.

61
00:04:13.843 --> 00:04:15.970
Obviously, we don't wanna just
hard code in these values,

62
00:04:15.970 --> 00:04:18.358
cuz all of our users are going to
have different information there.

63
00:04:18.358 --> 00:04:23.280
So we'll interpolate in those verbs at
the end, both of which are strings.

64
00:04:23.280 --> 00:04:27.052
So we're going to need three, we're gonna
need one for the first name, one for

65
00:04:27.052 --> 00:04:28.871
the last name, and one for the email.

66
00:04:31.559 --> 00:04:34.435
Which actually go into the sentence,
so we're gonna switch this up.

67
00:04:36.189 --> 00:04:39.633
Marilyn is going to be represented
by the first name, and

68
00:04:39.633 --> 00:04:42.591
that's its own string on our User here,
so %s.

69
00:04:42.591 --> 00:04:47.072
The last name is also its own attribute,
so we're gonna use a second verb for

70
00:04:47.072 --> 00:04:47.639
Monroe.

71
00:04:47.639 --> 00:04:54.326
And then the Email is a third string and
we'll pass that in with a third %s.

72
00:04:54.326 --> 00:04:58.296
On the right-hand side, the series
of arguments we actually wanna use

73
00:04:58.296 --> 00:05:01.886
are the dot notation attributes
from the User that we passed in.

74
00:05:01.886 --> 00:05:06.104
So the first one,
if we want the first name,

75
00:05:06.104 --> 00:05:11.464
it'd be u.FirstName,
u.LastName, and u.Email.

76
00:05:12.860 --> 00:05:17.756
Because I want to return
a string out of this

77
00:05:17.756 --> 00:05:22.788
function, I'll return the description.

