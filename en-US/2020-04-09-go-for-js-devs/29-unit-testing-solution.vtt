WEBVTT

1
00:00:00.295 --> 00:00:03.990
Okay, so let's talk about
the solution to our exercise_5a,

2
00:00:03.990 --> 00:00:05.700
which was discussing unit tests.

3
00:00:05.700 --> 00:00:10.533
And in Part 1,
we're writing a test that's gonna validate

4
00:00:10.533 --> 00:00:14.999
our Add method that we created
in the math.go package.

5
00:00:14.999 --> 00:00:18.987
So we look at the math.go package,
our function here, function Add,

6
00:00:18.987 --> 00:00:22.907
it takes a series of numbers,
adds them together, spits out a total,

7
00:00:22.907 --> 00:00:24.870
all of which are integers.

8
00:00:24.870 --> 00:00:28.275
So if we are following
the convention in our utils file,

9
00:00:28.275 --> 00:00:30.383
we're going to create a new file.

10
00:00:30.383 --> 00:00:32.513
And let's call that add_test.go.

11
00:00:37.992 --> 00:00:42.180
Cool, add test.go file will
want a couple different things.

12
00:00:42.180 --> 00:00:44.520
First of all, we needed to match
the package that we're working with.

13
00:00:44.520 --> 00:00:45.995
And so
right now we're in the utils package.

14
00:00:45.995 --> 00:00:51.175
And the imports that we want here
is just that testing library.

15
00:00:54.196 --> 00:00:59.012
For the func,
we're gonna call it TestAdd and

16
00:00:59.012 --> 00:01:04.210
that takes one argument
which is the lower case t.

17
00:01:04.210 --> 00:01:08.385
And the type is testing.t which is
coming from that testing library.

18
00:01:10.589 --> 00:01:17.390
And so within here we wanna set up a
couple of variables, expected and actual.

19
00:01:17.390 --> 00:01:23.117
And so you think about working
with this Add mathematical method,

20
00:01:23.117 --> 00:01:27.821
letâ€™s say, if I called utilits.add and
pass in 2 and

21
00:01:27.821 --> 00:01:31.720
2, my actual resulting value should be 4.

22
00:01:35.659 --> 00:01:39.519
So then to make it an assertion,
excuse me, I wanna say hey,

23
00:01:39.519 --> 00:01:43.028
if the actual value does not
equal the expected value,

24
00:01:49.134 --> 00:01:54.718
I wanna send an error
to our testing library.

25
00:01:58.911 --> 00:02:03.620
We're gonna write some sort of message,

26
00:02:03.620 --> 00:02:06.990
Add function does not add up.

27
00:02:06.990 --> 00:02:13.184
And I'll give it some
information like the,

28
00:02:13.184 --> 00:02:17.911
Expected was %d for an integer and

29
00:02:17.911 --> 00:02:21.336
the actual is also a %d.

30
00:02:21.336 --> 00:02:27.303
And then the two variables
we're going to pass through for

31
00:02:27.303 --> 00:02:31.576
those values are, expected and actual.

32
00:02:32.915 --> 00:02:38.011
Down on my terminal,
you'll notice that I ran go test and

33
00:02:38.011 --> 00:02:41.951
I get this error,
no Go files in it toolkit.

34
00:02:41.951 --> 00:02:45.255
So I need to navigate to the actual
directory where my test lives before

35
00:02:45.255 --> 00:02:46.095
I can run Go test.

36
00:02:51.567 --> 00:02:55.728
So I navigated to our code directory and
then the utils package,

37
00:02:55.728 --> 00:02:59.362
which is where our test file lives so
far and ran go test.

38
00:02:59.362 --> 00:03:05.299
We're still seeing those print lines that
actually live in our Add function but

39
00:03:05.299 --> 00:03:08.323
we're also seeing this PASS and the ok.

40
00:03:08.323 --> 00:03:10.230
Indicating that our test is passed.

41
00:03:11.890 --> 00:03:15.035
Let's say we change this to
6 just to see the test fail.

42
00:03:15.035 --> 00:03:19.122
If I run my test again,
you'll see Add function does not add up,

43
00:03:19.122 --> 00:03:21.660
we expected a 6, we actually got a 4.

44
00:03:21.660 --> 00:03:24.513
So it gives you a little bit of
information of what your test result it

45
00:03:24.513 --> 00:03:25.072
looks like.

46
00:03:28.219 --> 00:03:32.076
Let's move that back to a 4 and
work on Part 2.

47
00:03:35.072 --> 00:03:38.570
So we go back to exercise_5a,
Part 2 is to go the opposite direction.

48
00:03:38.570 --> 00:03:42.187
We're gonna create a file
called strings_test.go and

49
00:03:42.187 --> 00:03:45.573
paste in this kind of starter
code down at the bottom,

50
00:03:45.573 --> 00:03:49.733
which is a test that looks like
it's doing some stuff to a string.

51
00:03:49.733 --> 00:03:51.659
So we're gonna copy this.

52
00:03:52.922 --> 00:03:57.268
And in the same utils file,
create a New File

53
00:03:57.268 --> 00:04:02.095
called strings_test.go, paste in our test.

54
00:04:04.842 --> 00:04:08.055
[COUGH] So you'll notice already,
I'm getting some linter errors, but

55
00:04:08.055 --> 00:04:11.020
let's walk through what's
happening in our tests first.

56
00:04:11.020 --> 00:04:14.440
So looks like we have a test
called TestMakeExcited.

57
00:04:14.440 --> 00:04:18.220
It takes in that default t,
that's coming from our testing library.

58
00:04:18.220 --> 00:04:23.070
The expected is a all caps version of
a string with an exclamation point.

59
00:04:23.070 --> 00:04:27.700
And the actual is a function, capital M,
MakeExcited, that takes in some string

60
00:04:27.700 --> 00:04:30.560
that has all lowercase letters and
no exclamation point.

61
00:04:31.700 --> 00:04:36.425
Then we have our assertion block here at
the end, where if the actual doesn't match

62
00:04:36.425 --> 00:04:40.085
the expected, we wanna print out
kinda what those things were.

63
00:04:40.085 --> 00:04:43.830
If I run go test now,
we're going to see undefined: MakeExcited.

64
00:04:43.830 --> 00:04:45.861
This makes sense,
we haven't written that function yet, so

65
00:04:45.861 --> 00:04:47.080
that's what we'll need to do next.

66
00:04:49.661 --> 00:04:54.125
So, let's go ahead and
make a strings.go file,

67
00:04:56.955 --> 00:04:59.190
And this is still living
in our package utils.

68
00:05:03.064 --> 00:05:06.222
And according to our tests, we need
a function that's called MakeExcited.

69
00:05:09.043 --> 00:05:11.745
We circle back to
the test just to confirm,

70
00:05:11.745 --> 00:05:16.551
it looks like MakeExcited accepts our
single string, so we're gonna say,

71
00:05:16.551 --> 00:05:19.570
it accepts some sentence
that is a string type.

72
00:05:24.329 --> 00:05:28.350
Cool, and then it should give us back,
it's supposed to return an actual string.

73
00:05:28.350 --> 00:05:34.614
So we know that we need to add the return
type here and write some code inside this.

74
00:05:36.400 --> 00:05:37.068
So right now,

75
00:05:37.068 --> 00:05:40.856
it's kind of a trick question, there are a
couple of things we need to do in here to

76
00:05:40.856 --> 00:05:44.660
make a string go from all lower case
letters to all upper case letters.

77
00:05:44.660 --> 00:05:47.099
And if you were to dig into
kinda the documentation,

78
00:05:47.099 --> 00:05:49.822
you might have found that there
a package called strings.

79
00:05:49.822 --> 00:05:55.270
And so we can import the strings
package from Go, and then use it.

80
00:05:58.019 --> 00:06:02.305
And so in our function here,
we can say we want to take our,

81
00:06:02.305 --> 00:06:06.769
we're gonna return that formatted
version of this string,

82
00:06:06.769 --> 00:06:10.950
that's all capitals with
the exclamation point.

83
00:06:10.950 --> 00:06:14.660
So using our strings package,
there's a function called ToUpper

84
00:06:14.660 --> 00:06:18.820
that takes a string and it turns it into
an uppercase version of that string.

85
00:06:19.870 --> 00:06:22.789
The last thing that we wanted to do
was append on the exclamation point,

86
00:06:22.789 --> 00:06:24.308
which we can do with concatenation.

87
00:06:27.262 --> 00:06:29.560
And return it at the end of the day.

88
00:06:29.560 --> 00:06:32.467
S is short for sentence, so we'll make
sure that that matches right there.

89
00:06:35.604 --> 00:06:39.228
And then again, because we're exporting
this function we need to make sure we have

90
00:06:39.228 --> 00:06:45.107
a comment, Transforms a sentence

91
00:06:45.107 --> 00:06:49.771
to all caps with an exclamation point.

92
00:06:53.823 --> 00:06:55.344
Cool?

93
00:06:55.344 --> 00:07:00.830
If we run our tests, we'll see that
we now have a passing test and

94
00:07:00.830 --> 00:07:06.738
implementation to the code,
code implementation to the test file.

