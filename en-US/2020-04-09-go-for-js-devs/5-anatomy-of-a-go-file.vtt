WEBVTT

1
00:00:00.175 --> 00:00:02.299
So the next thing I wanna talk about
is the Anatomy of a Go File and

2
00:00:02.299 --> 00:00:03.998
what you're starting
within your application.

3
00:00:03.998 --> 00:00:07.846
So I'm going to flip over to my code
editor and build a file from scratch.

4
00:00:14.618 --> 00:00:19.723
In the Go repository that we're working
with I'm gonna create a New file,

5
00:00:19.723 --> 00:00:21.679
and I'm gonna call it test.

6
00:00:21.679 --> 00:00:27.350
Nope, not test,
I'm gonna call it practice.go.

7
00:00:31.401 --> 00:00:37.599
And so the first thing every
Go File needs is a package name.

8
00:00:37.599 --> 00:00:40.946
And the package name lives at
the top of the file here and for

9
00:00:40.946 --> 00:00:43.008
now we're gonna say package main.

10
00:00:43.008 --> 00:00:45.823
And every Go program needs
at least a package main.

11
00:00:45.823 --> 00:00:47.964
We're gonna look at creating
custom packages down the road.

12
00:00:47.964 --> 00:00:50.297
But for now we're gonna start here, and

13
00:00:50.297 --> 00:00:54.631
this package is going to encompass
whatever files live in the same folder.

14
00:00:54.631 --> 00:00:56.544
And allow us access to
some of the variables and

15
00:00:56.544 --> 00:00:59.058
functions that only are associated
with this main package.

16
00:00:59.058 --> 00:01:01.684
And we can kind of pass that around and

17
00:01:01.684 --> 00:01:05.171
encapsulate some of
the code in smaller pieces.

18
00:01:05.171 --> 00:01:07.062
The next line is gonna be
any import statements for

19
00:01:07.062 --> 00:01:08.689
any additional libraries you might need.

20
00:01:08.689 --> 00:01:11.766
So we've noticed that we've been using the
thumped package to print to the console.

21
00:01:11.766 --> 00:01:14.865
And I know I'm gonna be using that
later on in this particular file.

22
00:01:14.865 --> 00:01:16.644
So I'm gonna import that at the top.

23
00:01:16.644 --> 00:01:19.221
And the input statements
allow you to access

24
00:01:19.221 --> 00:01:22.153
additional libraries that
ship with the Go code.

25
00:01:22.153 --> 00:01:27.156
For instance, if you're handling day time
or strings or convention of types or

26
00:01:27.156 --> 00:01:31.200
input output, and we'll see a lot
of those throughout the day.

27
00:01:31.200 --> 00:01:33.682
And the third part here is
the actual main function.

28
00:01:33.682 --> 00:01:37.884
So to create a function and
go use the word funk F-U-N-K, and

29
00:01:37.884 --> 00:01:42.102
every Go program needs both
a package main and a main function.

30
00:01:42.102 --> 00:01:45.628
And the main function is gonna be
the entry point for your program where

31
00:01:45.628 --> 00:01:49.766
Go starts executing the code and fires off
whatever else happens in your program.

32
00:01:49.766 --> 00:01:53.549
So for now in main,

33
00:01:53.549 --> 00:01:58.989
I'm just gonna circle back

34
00:01:58.989 --> 00:02:04.674
to our print line function.

35
00:02:08.700 --> 00:02:12.032
An interesting aspect of Go as well
is that in any particular package, so

36
00:02:12.032 --> 00:02:14.283
right now,
we're looking at the main package.

37
00:02:14.283 --> 00:02:16.925
If we had additional
files in our directory,

38
00:02:16.925 --> 00:02:20.410
you can only have one funk main
function in that directory.

39
00:02:20.410 --> 00:02:21.909
So earlier in the code base,

40
00:02:21.909 --> 00:02:25.225
we ran this main.go file to get
the Hello Front-End Masters.

41
00:02:25.225 --> 00:02:28.779
And so right now, I'm working with two
different files in the same directory that

42
00:02:28.779 --> 00:02:29.716
both have funk main.

43
00:02:29.716 --> 00:02:31.469
So to fix this problem for now,

44
00:02:31.469 --> 00:02:35.582
I'm gonna comment out one of them
because we don't need two right now for

45
00:02:35.582 --> 00:02:40.252
this example, and then I'm gonna move
back to our practice.Go to run this code.

46
00:02:40.252 --> 00:02:44.043
I'll use the terminal that lives in
VS code to kind of run most of our

47
00:02:44.043 --> 00:02:45.069
examples today.

48
00:02:45.069 --> 00:02:49.076
And then to actually execute this program,
you're gonna use the command GoRun, which

49
00:02:49.076 --> 00:02:52.940
we'll talk about a little bit later, and
then the name of the file you're running.

50
00:02:52.940 --> 00:02:56.464
So I'm just in the repository
like the top level directory.

51
00:02:56.464 --> 00:02:59.541
And so I'm gonna run Go, run, practice.Go.

52
00:02:59.541 --> 00:03:01.603
And I should see Hello World
print to the console.

53
00:03:01.603 --> 00:03:03.750
So what's happening is Go
is going to find that file,

54
00:03:03.750 --> 00:03:05.278
it's gonna find the main function and

55
00:03:05.278 --> 00:03:08.401
it's gonna execute whatever's inside
it based on the file we just created.

56
00:03:11.553 --> 00:03:15.028
Another side note about the structure of
the repository here is that each of these

57
00:03:15.028 --> 00:03:17.546
directories do have their own
main function within them.

58
00:03:17.546 --> 00:03:20.977
And as we continue to work through some
examples, you might have to kinda comment

59
00:03:20.977 --> 00:03:23.560
out some of the main functions
depending on where we're at.

60
00:03:23.560 --> 00:03:25.504
Just as a side note.

61
00:03:25.504 --> 00:03:30.198
&gt;&gt; When you run the practice Go, it's
reading other files in the same module.

62
00:03:30.198 --> 00:03:33.532
&gt;&gt; It is, so in the directory I'm in in
the top level directory Go is looking for

63
00:03:33.532 --> 00:03:35.056
anything that says package main.

64
00:03:35.056 --> 00:03:39.221
And within package main you can
only have one main function.

65
00:03:39.221 --> 00:03:41.128
So once it sees two it's
conflicted with what to run and

66
00:03:41.128 --> 00:03:43.210
doesn't know where to start
executing that initial file.

