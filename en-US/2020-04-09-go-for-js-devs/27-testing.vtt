WEBVTT

1
00:00:00.000 --> 00:00:01.894
So for the next section before
we get in to an exercise.

2
00:00:01.894 --> 00:00:03.766
I wanna talk super briefly
about Unit Testing.

3
00:00:06.520 --> 00:00:09.186
So testing in Go,
Go does have a built in library for

4
00:00:09.186 --> 00:00:11.480
testing which I find it incredibly useful.

5
00:00:11.480 --> 00:00:14.621
If you're like me, the series
of small teams I have worked on,

6
00:00:14.621 --> 00:00:18.500
all have decided to use different
testing frameworks for different reason.

7
00:00:18.500 --> 00:00:22.530
Some people want Cyprus,
Mocha Chai, when in the mood for

8
00:00:22.530 --> 00:00:27.464
that day with Go, it's a built in
testing framework that makes testing

9
00:00:27.464 --> 00:00:29.950
kind of a little bit more painless.

10
00:00:29.950 --> 00:00:32.706
So to write a unit test, you're gonna
have a couple different things.

11
00:00:32.706 --> 00:00:35.381
First of all, you're gonna be
working with some sort of goFile.

12
00:00:35.381 --> 00:00:37.477
So we just created that map goFile.

13
00:00:37.477 --> 00:00:40.198
In the example on the screen,
you're looking at an average.go file.

14
00:00:40.198 --> 00:00:43.494
Let's say this file has a couple utility
functions that calculate the average like

15
00:00:43.494 --> 00:00:45.202
we've been doing in some of the examples.

16
00:00:45.202 --> 00:00:49.397
In order to test that file you'll need
to call the file name average_test.

17
00:00:49.397 --> 00:00:53.452
So you typically do whatever that
file is your testing_test.go.

18
00:00:53.452 --> 00:00:58.213
The test file does need to live in
the same directory as the go code

19
00:00:58.213 --> 00:00:59.983
that you're testing.

20
00:00:59.983 --> 00:01:02.804
And then you'll write a test that looks
similar to the example on the board which

21
00:01:02.804 --> 00:01:03.954
we'll work through together.

22
00:01:03.954 --> 00:01:07.977
And then to actually run that code at
the end of the day you'd use Go test.

23
00:01:10.255 --> 00:01:13.098
So a couple things that are happening
in the test file itself,

24
00:01:13.098 --> 00:01:16.666
the package name should match the actual
package that you're working with.

25
00:01:16.666 --> 00:01:20.142
So for in that utils file testing
the math.go, it'd be package utils.

26
00:01:20.142 --> 00:01:24.253
And you can import the testing
library directly from

27
00:01:24.253 --> 00:01:27.065
the built-in source code from Go.

28
00:01:27.065 --> 00:01:30.452
The only func we need in this
file is a test function itself.

29
00:01:30.452 --> 00:01:33.210
And the convention here,
is to use capital T test and

30
00:01:33.210 --> 00:01:36.862
then the capital name of whatever
function or file you're testing.

31
00:01:36.862 --> 00:01:41.385
So here we're gonna do test average,
and it takes one argument.

32
00:01:41.385 --> 00:01:46.075
The argument is represented here by T,
and then a pointer value to testing.T.

33
00:01:46.075 --> 00:01:50.100
And the pointer values,
we're gonna cover in the next lesson, but

34
00:01:50.100 --> 00:01:53.710
it indicates that this variable
is something we can modify.

35
00:01:53.710 --> 00:01:59.888
So the next couple of lines, 10 and 11,
we're settings these values ourselves.

36
00:01:59.888 --> 00:02:00.611
So in Mocha Chai,

37
00:02:00.611 --> 00:02:03.221
you have kind of an assertion
library where this is the structure

38
00:02:03.221 --> 00:02:06.238
you need your assertion to match,
to then get the results from your test.

39
00:02:06.238 --> 00:02:08.554
And in Go we get to kind of have
a little bit more control over what

40
00:02:08.554 --> 00:02:09.225
that looks like.

41
00:02:09.225 --> 00:02:10.509
So I'm setting two different variables.

42
00:02:10.509 --> 00:02:13.329
The first is what I expect to
have happen out of the function.

43
00:02:13.329 --> 00:02:17.854
And the second is what's actually
happening when I call utils.average and

44
00:02:17.854 --> 00:02:19.416
pass some values into it.

45
00:02:19.416 --> 00:02:23.657
From 13 to 15, I'm saying hey, if the
actual value doesn't match the expected

46
00:02:23.657 --> 00:02:25.807
throw an error modify that T variable, and

47
00:02:25.807 --> 00:02:28.990
I want you to send the error,
hey, the average was incorrect.

48
00:02:28.990 --> 00:02:32.397
I expected this one thing,
I got this actual thing, and

49
00:02:32.397 --> 00:02:37.490
then passing in those verbs like we did
with this string formatting earlier today.

