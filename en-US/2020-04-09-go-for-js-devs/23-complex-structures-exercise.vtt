WEBVTT

1
00:00:00.370 --> 00:00:03.190
Okay, so for exercise foresee and,
we're gonna practice some of the stuff we

2
00:00:03.190 --> 00:00:07.100
talked about around functions,
arrays, slices and maps.

3
00:00:07.100 --> 00:00:10.769
And so in the foresee exercise file in
section four for complex structures,

4
00:00:10.769 --> 00:00:14.607
the goals are going to be kind of to work
with some of these structures we've just

5
00:00:14.607 --> 00:00:15.256
discussed.

6
00:00:15.256 --> 00:00:18.860
And will use range a little bit as well.

7
00:00:18.860 --> 00:00:22.552
So I'm going to create an exercise
foresee.go file, and in part one,

8
00:00:22.552 --> 00:00:25.998
we're gonna kinda of review
a function that we just saw recently,

9
00:00:25.998 --> 00:00:28.270
which is iterating over an array.

10
00:00:28.270 --> 00:00:32.450
The practice element here is to kinda of
pass an array specifically to a function.

11
00:00:32.450 --> 00:00:35.900
So, on part one, number one, we're going
to instantiate an array of scores,

12
00:00:35.900 --> 00:00:40.620
and the array of scores should have at
least five elements of type float 64 and

13
00:00:40.620 --> 00:00:43.230
then write a function that calculates and
returns that average score.

14
00:00:43.230 --> 00:00:47.470
The kicker here is that you should have a
separate function that accepts an array as

15
00:00:47.470 --> 00:00:52.325
a type and then iterates over it and
returns that average score.

16
00:00:52.325 --> 00:00:54.770
In part part two,
we're gonna look at maps.

17
00:00:54.770 --> 00:01:00.490
So for part one of part two, let's define
a map that contains a set of pet names and

18
00:01:00.490 --> 00:01:01.960
their corresponding animal type.

19
00:01:01.960 --> 00:01:04.880
For example,
if you were looking at the name Fido,

20
00:01:04.880 --> 00:01:06.550
it would correspond it to a pet of dog.

21
00:01:06.550 --> 00:01:10.970
So you can have a few of these like four
or five different pets within a map.

22
00:01:10.970 --> 00:01:14.190
And then the second part of this is
to write a function that's going to

23
00:01:14.190 --> 00:01:17.920
take a string argument and
return a Boolean indicating whether or

24
00:01:17.920 --> 00:01:20.850
not that key exists in your map of pets.

25
00:01:20.850 --> 00:01:25.160
So the structure here would be whatever
is in your main function should call

26
00:01:25.160 --> 00:01:27.410
a second function that's like,
hey, do you exist in this map,

27
00:01:27.410 --> 00:01:30.190
and then that string that
you pass a second function,

28
00:01:30.190 --> 00:01:34.803
we'll go check out that map and
return true or false if that key exists.

29
00:01:34.803 --> 00:01:38.820
And then for part three, we're gonna
instantiate a slice that has an initial

30
00:01:38.820 --> 00:01:43.320
value of a collection of groceries,
and then write a second function that

31
00:01:43.320 --> 00:01:45.730
takes one or
more groceries as a string argument and

32
00:01:45.730 --> 00:01:49.700
appends them to the slice, printing
out the resulting list of groceries.

