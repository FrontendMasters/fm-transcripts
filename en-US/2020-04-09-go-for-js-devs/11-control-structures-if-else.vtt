WEBVTT

1
00:00:00.110 --> 00:00:03.204
And the next thing I'd like to talk
about is control structures in Go.

2
00:00:03.204 --> 00:00:05.910
And we're talking about if statements,
four loops, and switch statements.

3
00:00:05.910 --> 00:00:09.870
Some of the kind of more common ways to

4
00:00:09.870 --> 00:00:11.980
navigate through logic
in our applications.

5
00:00:13.350 --> 00:00:17.618
So I'm gonna be living in the ifs.go
file which is in the third section

6
00:00:17.618 --> 00:00:21.790
here in basic_syntax/code/ifs.go.

7
00:00:22.820 --> 00:00:24.770
So I'll hop back over to
our code editor here.

8
00:00:30.936 --> 00:00:34.756
So I'd like to start with a comment about
some of the code snippets you'll find as

9
00:00:34.756 --> 00:00:37.060
we work through the rest of the workshop.

10
00:00:37.060 --> 00:00:39.352
You'll notice that when I
first walked into this file,

11
00:00:39.352 --> 00:00:41.171
there was a lot of
commented out green text.

12
00:00:41.171 --> 00:00:42.224
At the top of the file,

13
00:00:42.224 --> 00:00:45.390
there's a little instruction here
to uncomment this entire file,

14
00:00:45.390 --> 00:00:49.240
and this will kind of let us walk through
some of the code blocks in smaller chunks.

15
00:00:51.560 --> 00:00:53.350
So for the first if block,
I wanna talk about,

16
00:00:53.350 --> 00:00:57.370
we have a variable declared as some
bar and it's set to an integer of 9.

17
00:00:57.370 --> 00:01:01.510
In my if block, you'll notice that
the first statement is a conditional, but

18
00:01:01.510 --> 00:01:04.640
it doesn't have parentheses
which are not required in Go.

19
00:01:04.640 --> 00:01:06.210
Then you have our opening curly brace, and

20
00:01:06.210 --> 00:01:10.220
then whatever logic we'd like to
execute lives within the curly braces.

21
00:01:10.220 --> 00:01:12.891
So the curly braces are required,
parentheses are not.

22
00:01:21.504 --> 00:01:24.873
If you wanna get a little bit more
specific, Go does come with else if and

23
00:01:24.873 --> 00:01:28.460
else block, so
which behave is similar to JavaScript.

24
00:01:28.460 --> 00:01:35.050
Whatever is executed within the first
if block that returns true,

25
00:01:35.050 --> 00:01:37.930
so if some bar is greater than 100,
we'll get that first block, and

26
00:01:37.930 --> 00:01:41.230
it will not execute the following
else if or else blocks.

27
00:01:42.540 --> 00:01:47.384
So the next thing I'd like to talk about
a little bit is this assignment operator

28
00:01:47.384 --> 00:01:51.670
with the shorthand syntax, so
we have err assigned to some function.

29
00:01:51.670 --> 00:01:56.177
And this will be a pattern that we see
pretty frequently throughout the day, and

30
00:01:56.177 --> 00:01:58.340
err is gonna represent an error here.

31
00:01:58.340 --> 00:02:01.564
We're gonna talk about error handling
pretty in depth down the road.

32
00:02:01.564 --> 00:02:06.060
But right now, we're assigning a variable
which is gonna an error to some function.

33
00:02:06.060 --> 00:02:09.209
So if this function returns an error, save
it to this variable so we can use it and

34
00:02:09.209 --> 00:02:10.626
figure out what we wanna do with it.

35
00:02:11.877 --> 00:02:16.694
In our if block here, We're

36
00:02:16.694 --> 00:02:21.716
asking if that error is not nil, meaning
if something was stored in this variable,

37
00:02:21.716 --> 00:02:25.670
we want to execute some code
to handle that said path.

38
00:02:25.670 --> 00:02:26.240
And so for error,

39
00:02:26.240 --> 00:02:31.160
we're simply using the err.Error
function which we'll talk about later.

40
00:02:31.160 --> 00:02:35.680
But assuming error is not mil,
something horrible happened,

41
00:02:35.680 --> 00:02:37.050
what we wanna do about it?

42
00:02:37.050 --> 00:02:41.395
This is a very common use of an if
block in Go to handle errors, and

43
00:02:41.395 --> 00:02:43.973
we'll see this a 100 times today.

44
00:02:43.973 --> 00:02:49.095
And the last pattern, I'd like to discuss
it will start using pretty shortly,

45
00:02:49.095 --> 00:02:52.010
is one of my favorite patterns and go.

46
00:02:52.010 --> 00:02:54.800
And it allows you to both define
a variable and then check about

47
00:02:54.800 --> 00:02:58.514
that variable in a conditional sense
before executing code within curly braces.

48
00:02:58.514 --> 00:03:03.986
So what's happening on line 37 here, is
we're saying, hey, set err to the result

49
00:03:03.986 --> 00:03:09.080
of someFunction once it executes, and
then check to see if that thing is nil.

50
00:03:09.080 --> 00:03:12.730
So we're both defining the variable,
we're checking the conditional, and

51
00:03:12.730 --> 00:03:16.009
then we're firing off whatever code lives
within the curly braces within one line.

52
00:03:17.910 --> 00:03:20.880
The other interesting thing about this
pattern is that anything that's scoped

53
00:03:20.880 --> 00:03:24.520
within an if block is kind of
contained within that if block.

54
00:03:24.520 --> 00:03:28.850
So now, this err variable,
it's not accessible elsewhere.

55
00:03:28.850 --> 00:03:30.220
If we wanted to redefine it, we could.

56
00:03:30.220 --> 00:03:32.890
It's kind of like scoped within
this little chunk of code.

57
00:03:32.890 --> 00:03:35.760
So we can reuse it as much as we want
throughout our program which is gonna be

58
00:03:35.760 --> 00:03:37.410
something we do in a little while.

