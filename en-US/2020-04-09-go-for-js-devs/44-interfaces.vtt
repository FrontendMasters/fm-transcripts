WEBVTT

1
00:00:00.070 --> 00:00:01.300
So now let's talk about interfaces.

2
00:00:01.300 --> 00:00:05.400
And interfaces are a complex aspect
of code but they're super powerful,

3
00:00:05.400 --> 00:00:08.160
especially on larger code bases and kind
of as you're trying to wrangle code and

4
00:00:08.160 --> 00:00:10.320
make sure everything makes sense and
is readable.

5
00:00:10.320 --> 00:00:13.960
And so if structs define a set
of attributes on a type,

6
00:00:13.960 --> 00:00:17.778
like a user has a first name and
a last name, it is of type user.

7
00:00:17.778 --> 00:00:22.370
Interfaces are gonna describe a set
of behaviors that also define a type.

8
00:00:22.370 --> 00:00:26.750
So if you're a user and you can log in or

9
00:00:26.750 --> 00:00:31.160
change your first name,
stuff like that, any type that can

10
00:00:31.160 --> 00:00:34.130
accomplish any of those behaviors is
also of a type of that interface.

11
00:00:34.130 --> 00:00:37.690
And we'll talk a lot about what that
means in the next couple slides.

12
00:00:37.690 --> 00:00:40.370
Okay, there's a lot going on on the slide,
but bear with me, we'll walk through it.

13
00:00:40.370 --> 00:00:43.360
So on the top left corner,
I've defined two different types.

14
00:00:43.360 --> 00:00:45.020
There's a mom struct and a dad struct.

15
00:00:46.526 --> 00:00:50.430
And each of these has a set of attributes
first name, last name, an array of kids.

16
00:00:50.430 --> 00:00:53.860
And then in the mom struct we
have a book club friends and

17
00:00:53.860 --> 00:00:55.780
the dads directory of girl friends.

18
00:00:55.780 --> 00:01:00.720
I don't mean to categorize in any
negative way, but we'll go with it.

19
00:01:00.720 --> 00:01:05.030
So let's say that both of these types
have a couple of things that they do.

20
00:01:05.030 --> 00:01:07.991
So you'll notice that on the right hand
side, we have a couple of functions.

21
00:01:07.991 --> 00:01:13.940
If you look in the middle, methods that
are called on both of these structs.

22
00:01:13.940 --> 00:01:15.770
They both can call frequently.

23
00:01:15.770 --> 00:01:19.800
And it takes an array of kids and
both of them can check if the oven is off.

24
00:01:19.800 --> 00:01:22.800
So these are all methods
that these types can do.

25
00:01:23.810 --> 00:01:25.340
So at the top, we have a type Worrier,

26
00:01:25.340 --> 00:01:27.350
which instead of a struct,
it's an interface.

27
00:01:27.350 --> 00:01:31.170
And an interface is a list of methods
that are going to describe behavior

28
00:01:31.170 --> 00:01:32.160
of particular types.

29
00:01:33.350 --> 00:01:36.820
So if a struct can CallFrequently and
check if the oven is off,

30
00:01:36.820 --> 00:01:38.305
it is also a type Worrier.

31
00:01:40.441 --> 00:01:42.162
So on the bottom of the file here,

32
00:01:42.162 --> 00:01:45.840
you'll see I've instantiated
two different variables.

33
00:01:45.840 --> 00:01:49.500
Susan is of type mom and
Bob is of type dad.

34
00:01:49.500 --> 00:01:53.969
And so because Susan is of type mom and
a mom struct can call frequently and

35
00:01:53.969 --> 00:01:58.362
check if the oven is off, Susan is
automatically also of type Worrier,

36
00:01:58.362 --> 00:01:59.840
which is an interface.

37
00:02:02.725 --> 00:02:05.830
We'll take a second to
let that slide step.

38
00:02:05.830 --> 00:02:07.460
There's a lot going on.

39
00:02:07.460 --> 00:02:09.330
And then the quote at the bottom,

40
00:02:09.330 --> 00:02:13.330
I found while just digging
through the documentation,

41
00:02:13.330 --> 00:02:17.880
but it seems to kinda encapsulate
the concept of an interface quite well.

42
00:02:17.880 --> 00:02:20.540
If it walks like a duck,
talks like a duck, swims like a duck,

43
00:02:20.540 --> 00:02:22.000
it's probably a duck.

44
00:02:22.000 --> 00:02:24.278
So if a struct has all of these behaviors,

45
00:02:24.278 --> 00:02:27.282
it is also of type interface
of all of those behaviors.

46
00:02:30.342 --> 00:02:31.803
Cool.

47
00:02:34.273 --> 00:02:38.260
So let's kind of focus back on our
existing types that live in our code

48
00:02:38.260 --> 00:02:39.510
base so far.

49
00:02:39.510 --> 00:02:40.500
So we have two types.

50
00:02:40.500 --> 00:02:43.980
We've got the user and the group,
both of which can describe something.

51
00:02:43.980 --> 00:02:45.999
You can call describe
on both of these types.

52
00:02:47.340 --> 00:02:53.100
And since interfaces describe the kind of
behavior our types can execute, we can

53
00:02:53.100 --> 00:02:57.610
create a type interface called describer,
which takes the method describe.

54
00:02:57.610 --> 00:03:02.035
And so any type that calls describe
is also going to be of type

55
00:03:02.035 --> 00:03:03.812
describer interface.

56
00:03:03.812 --> 00:03:08.660
And so the beauty of this is that instead
of having to explicitly list mom.do

57
00:03:08.660 --> 00:03:12.310
something, dad.do something,
user.do something.

58
00:03:13.530 --> 00:03:16.740
We can create a describe
humans function that takes

59
00:03:16.740 --> 00:03:19.260
any type that is also of
the describer interface.

60
00:03:19.260 --> 00:03:23.590
So now we can be a lot more generic and
reduce a lot of duplication in code

61
00:03:23.590 --> 00:03:27.970
by saying that, hey if you are a type
that is also a type describer interface.

62
00:03:27.970 --> 00:03:30.930
I know you have a describe
method therefore I can call

63
00:03:30.930 --> 00:03:33.580
this method on you without
having to ask like are you user.

64
00:03:33.580 --> 00:03:34.100
Are you group,

65
00:03:34.100 --> 00:03:38.380
are you some other struct that we haven't
created yet that we'll use down the road.

66
00:03:38.380 --> 00:03:42.130
This function knows anything that gets
passed in will be of type describe or

67
00:03:42.130 --> 00:03:44.510
interface that must have
the describe method on it.

