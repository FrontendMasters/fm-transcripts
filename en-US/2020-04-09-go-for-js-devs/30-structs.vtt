WEBVTT

1
00:00:00.050 --> 00:00:02.899
So now we're gonna get into some of
the more fun complex pieces of go that

2
00:00:02.899 --> 00:00:04.244
are particularly interesting.

3
00:00:04.244 --> 00:00:05.640
The first one of being a struct,

4
00:00:05.640 --> 00:00:09.640
which we'll be using a lot in some
of our code examples down the road.

5
00:00:09.640 --> 00:00:10.920
So we're talking about a struct.

6
00:00:10.920 --> 00:00:14.521
A struct is going to define the attributes
that live on a particular type that we

7
00:00:14.521 --> 00:00:15.459
define ourselves.

8
00:00:15.459 --> 00:00:18.941
So so far, we've been working with
types that are like strings, booleans,

9
00:00:18.941 --> 00:00:22.103
integers but you'll notice when
we're talking about a struct type,

10
00:00:22.103 --> 00:00:23.995
we get to name it whatever
we want it to be.

11
00:00:23.995 --> 00:00:26.121
And then define the attributes
that make it what it is.

12
00:00:26.121 --> 00:00:31.000
So in this example case, we're calling
the type struct a name of user.

13
00:00:31.000 --> 00:00:34.364
And the user struct has four
attributes on it right now.

14
00:00:34.364 --> 00:00:37.286
It has an ID, which is an integer,
a first name, last name, and

15
00:00:37.286 --> 00:00:38.867
an email all of which are strings.

16
00:00:41.926 --> 00:00:45.536
Similarly to passing in arguments and
kind of consolidating code,

17
00:00:45.536 --> 00:00:49.585
Go allows us to list all attributes that
have the same type on the same line and

18
00:00:49.585 --> 00:00:50.936
add that type to the end.

19
00:00:50.936 --> 00:00:52.657
So we've got now two lines with the ID and

20
00:00:52.657 --> 00:00:54.536
then all the strings
are on the second line.

21
00:00:58.151 --> 00:01:03.644
And then to actually instantiate
an instance of that struct type,

22
00:01:03.644 --> 00:01:09.541
we would use the type name at
the beginning of the variable definition.

23
00:01:09.541 --> 00:01:12.892
And then the opening curly braces to
actually assign values to each of

24
00:01:12.892 --> 00:01:13.653
those fields.

25
00:01:13.653 --> 00:01:18.429
So we're setting the variable name you
to a value of a struct user type with

26
00:01:18.429 --> 00:01:22.140
values for the ID of one first
name Marilyn Monroe, etc.

27
00:01:26.785 --> 00:01:28.661
Cool, let's hop over to structs.go and
play around a little bit.

28
00:01:31.982 --> 00:01:38.687
So now we are moving on into section six,
And structs.go.

29
00:01:38.687 --> 00:01:43.120
One thing you'll notice that's slightly
different from the slide is that

30
00:01:43.120 --> 00:01:47.270
the attributes in the user
struct here are all capitalized.

31
00:01:47.270 --> 00:01:50.523
And something that is gonna stay
consistent throughout Go at the moment is

32
00:01:50.523 --> 00:01:54.044
any attribute that is capitalized will
be accessible outside of this package.

33
00:01:54.044 --> 00:01:55.801
So even if it's on a struct,

34
00:01:55.801 --> 00:02:00.583
if you import this capital U user struct
into another file under the package.

35
00:02:00.583 --> 00:02:04.420
The only attributes that will
be visible are capital letters.

36
00:02:04.420 --> 00:02:06.418
So I'm gonna switch everything to be
capital for the rest of the exercise.

37
00:02:11.161 --> 00:02:14.601
So general theme is kinda capital letter
means exportable and visible elsewhere.

38
00:02:18.014 --> 00:02:21.868
Cool.
If I comment out some of this code,

39
00:02:21.868 --> 00:02:27.900
let's print this to the console and
see what it looks like.

40
00:02:33.210 --> 00:02:35.156
We still need the struct definition,
my apologies.

41
00:02:38.747 --> 00:02:41.999
So so far in this file, we've defined our
struct using the consolidated syntax for

42
00:02:41.999 --> 00:02:43.869
all of our string types
around the second line.

43
00:02:43.869 --> 00:02:47.543
And then in main, all I'm doing is
instantiating an instance of our struct,

44
00:02:47.543 --> 00:02:50.102
which is a user and
then printing that to the console.

45
00:02:53.056 --> 00:02:56.565
So if we call go run in section six.

46
00:03:00.507 --> 00:03:02.833
Let me back out of our utils file here.

47
00:03:15.278 --> 00:03:17.682
Instead of changing into it,
I am trying to run it.

48
00:03:17.682 --> 00:03:20.228
So I'm gonna modify that to be, go run.

49
00:03:20.228 --> 00:03:24.402
You'll see that we have something that
looks very similar to an object that

50
00:03:24.402 --> 00:03:28.046
prints out all of the values of
our struct attributes, ID of one,

51
00:03:28.046 --> 00:03:29.387
Marilyn Monroe, etc.

52
00:03:29.387 --> 00:03:33.629
So similar to accessing attributes on an
object in JavaScript, if I just wanted to

53
00:03:33.629 --> 00:03:37.751
access let's say that user's first name or
last name, we can use .notation.

54
00:03:40.270 --> 00:03:46.585
So I'm gonna print out u, which represent
our user and then capital F, FirstName.

55
00:03:46.585 --> 00:03:49.372
Save this and run it here.

56
00:03:49.372 --> 00:03:52.326
You'll see the first thing I see is
that string printed out as Marilyn.

57
00:03:52.326 --> 00:03:56.294
And my second output here is that
entire user as a struct value.

