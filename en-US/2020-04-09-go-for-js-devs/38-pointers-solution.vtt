WEBVTT

1
00:00:00.090 --> 00:00:02.050
Okay, so circling back to exercise 7a.

2
00:00:03.190 --> 00:00:05.590
I'm going to grab this code here.

3
00:00:08.352 --> 00:00:15.197
And in my code directory, I'm just gonna
create a new file called exercise7a.go.

4
00:00:15.197 --> 00:00:20.169
And I'll paste in the boilerplate
code from the test itself.

5
00:00:21.550 --> 00:00:25.704
Let's go ahead and add a comment here,
so our linter is appeased.

6
00:00:30.621 --> 00:00:33.870
It's real descriptive, cool.

7
00:00:33.870 --> 00:00:38.059
So the first thing we wanted to do, if we
circle back to our exercise, is define

8
00:00:38.059 --> 00:00:42.757
an instance of a user struct, which you'll
notice we have our struct definition here,

9
00:00:42.757 --> 00:00:45.062
but we haven't created an instance of it.

10
00:00:45.062 --> 00:00:49.700
So we'll go into,
we'll stick it outside of main.

11
00:00:49.700 --> 00:00:54.570
For now we're going to say
var u is equal to a user.

12
00:00:54.570 --> 00:00:56.620
We'll give it some fields.

13
00:00:56.620 --> 00:01:00.172
ID will magically be one,
let's set a first name to,

14
00:01:00.172 --> 00:01:04.010
I'm gonna be a little boring, we'll
stick with Marilyn Monroe for right now.

15
00:01:05.250 --> 00:01:12.268
Last name set to Monroe, email,
she's into Gmail these days.

16
00:01:15.927 --> 00:01:16.527
Cool.
So

17
00:01:16.527 --> 00:01:18.453
we have our instance of our user struct.

18
00:01:20.682 --> 00:01:25.106
And the next thing we want to do is create
a function called update email that takes

19
00:01:25.106 --> 00:01:26.808
in that pointer of a user type.

20
00:01:31.497 --> 00:01:33.546
So right above main.

21
00:01:39.213 --> 00:01:41.310
Trying to update the email.

22
00:01:41.310 --> 00:01:47.058
And it's going to take a u, and
that's going to be a user pointer.

23
00:01:51.889 --> 00:01:56.479
Within our function here,
we're going to set u.Email.

24
00:01:58.919 --> 00:02:03.492
= to "newEmail@gmail.com.

25
00:02:04.900 --> 00:02:09.087
I'm going to print a line while
we're in here that just says,

26
00:02:09.087 --> 00:02:14.240
we are in update email to know that we're
kind of local to this function, and

27
00:02:14.240 --> 00:02:22.083
what is our u.Email now
Finally back in Main.

28
00:02:23.830 --> 00:02:26.862
Let's call our function, so

29
00:02:26.862 --> 00:02:32.452
we're going to call updateEmail and
send in our user,

30
00:02:35.749 --> 00:02:40.268
And then fmt.Printline

31
00:02:40.268 --> 00:02:45.006
our Updated User, and u.

32
00:02:45.006 --> 00:02:49.221
Right off the bat, you'll notice
that I am expecting this function to

33
00:02:49.221 --> 00:02:54.510
accept a user pointer, which means I
can't just give it a regular struct.

34
00:02:54.510 --> 00:02:55.290
We need to hand it,

35
00:02:56.640 --> 00:03:01.230
the ampersand to give it that address
since that's what it's expecting.

36
00:03:01.230 --> 00:03:06.010
A reminder that the asterisk next to the
type name indicates the address itself.

37
00:03:06.010 --> 00:03:10.615
An asterisk next to the variable name,
here, would indicate that actual value.

38
00:03:10.615 --> 00:03:14.464
And then kind of recapping from the end
of the last lesson we talked about,

39
00:03:14.464 --> 00:03:18.126
I don't have to do star u here,
because we are working with a struct and

40
00:03:18.126 --> 00:03:22.440
that's that loophole that lets us kind of
just like skip that step, a little bit.

41
00:03:24.600 --> 00:03:26.685
And that is from our
chapter seven example.

42
00:03:26.685 --> 00:03:33.660
So let's hop into seven pointers code and
then exercise7a.go.

43
00:03:33.660 --> 00:03:36.918
So you'll notice that in updateEmail,
we've modified it and

44
00:03:36.918 --> 00:03:39.806
then we print out that user
one more time after the fact,

45
00:03:39.806 --> 00:03:42.827
you'll see that the email has
been permanently updated.

