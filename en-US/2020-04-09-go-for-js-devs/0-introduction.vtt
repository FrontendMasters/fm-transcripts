WEBVTT

1
00:00:00.560 --> 00:00:02.050
Hi everyone, let's get started.

2
00:00:02.050 --> 00:00:04.840
Welcome to Introduction to go for
front end developers.

3
00:00:04.840 --> 00:00:07.440
A major question that might
already be popping up in your

4
00:00:07.440 --> 00:00:10.950
minds are why are we talking about
go which is a back end language for

5
00:00:10.950 --> 00:00:13.950
a front end specific series of workshops.

6
00:00:13.950 --> 00:00:17.400
And a little background,
I work on a really small team.

7
00:00:17.400 --> 00:00:21.480
I work on a team of four developers,
two of which are on the back end team and

8
00:00:21.480 --> 00:00:23.340
two of us are on the front end team.

9
00:00:23.340 --> 00:00:26.960
And we are building a complex
full stack product.

10
00:00:26.960 --> 00:00:30.535
My skill set and interests do
lie primarily in the front end.

11
00:00:30.535 --> 00:00:33.781
But it's not uncommon for me to want
to make a PI of the back end code base,

12
00:00:33.781 --> 00:00:36.125
explore a little bit about
how that is structured and

13
00:00:36.125 --> 00:00:39.325
why my front end code is
interacting with it the way it is.

14
00:00:39.325 --> 00:00:42.645
And building a familiarity with the back
end has been incredibly helpful for

15
00:00:42.645 --> 00:00:45.415
me to understand why my code is
structured the way it is and

16
00:00:45.415 --> 00:00:47.955
how to optimize that to interact
with the back end in a better way.

17
00:00:49.225 --> 00:00:52.625
So for this talk, I want to talk a little
bit about the go back end language but

18
00:00:52.625 --> 00:00:56.370
from a more front end perspective and kind
of talk about the nuances of what makes it

19
00:00:56.370 --> 00:00:59.430
particularly interesting coming from
a dynamic language like JavaScript.

20
00:00:59.430 --> 00:01:01.280
So a little bit about me.

21
00:01:01.280 --> 00:01:02.570
My name is Brenda Martinson.

22
00:01:02.570 --> 00:01:04.260
I live in Denver, Colorado.

23
00:01:04.260 --> 00:01:10.610
I'm currently working for
a small company called hiring.io.

24
00:01:10.610 --> 00:01:14.540
We are in the throes of building
a really complex product that is,

25
00:01:14.540 --> 00:01:17.670
creating an open data platform for
commercial insurance.

26
00:01:17.670 --> 00:01:21.700
And to do so we've had to change
between whether we're using node,

27
00:01:21.700 --> 00:01:23.720
go, what our front end stack looks like.

28
00:01:23.720 --> 00:01:26.370
And as we've been interacting with that,
being able to help contribute to some of

29
00:01:26.370 --> 00:01:28.260
those refactoring sessions
has been really helpful.

30
00:01:29.300 --> 00:01:32.520
Before that, I was working at Sendgrid,
where I was on a front end engineering

31
00:01:32.520 --> 00:01:37.300
team, building a pretty complex UI
around drag and drop user interfaces.

32
00:01:37.300 --> 00:01:40.740
And then our back end at that time
was a rails kind of monolith with

33
00:01:40.740 --> 00:01:41.970
a go back end as well.

34
00:01:41.970 --> 00:01:45.400
And then before that I was working as
an instructor at the Turing School of

35
00:01:45.400 --> 00:01:48.790
Software and Design, writing primarily
the front end curriculum and

36
00:01:48.790 --> 00:01:51.170
teaching some front end
instructional classes there.

37
00:01:51.170 --> 00:01:54.140
But it also was a back end
heavy program at first.

38
00:01:54.140 --> 00:01:57.800
So the kind of theme is that like even
though I do primarily work in front end at

39
00:01:57.800 --> 00:02:00.590
no point in my career have I been
100% in that front end world.

40
00:02:00.590 --> 00:02:03.818
And so having that understanding of how
the back end also comes into play has been

41
00:02:03.818 --> 00:02:05.809
super helpful and
shapes a lot of what I do today.

42
00:02:09.504 --> 00:02:13.450
If you haven't already, the repo will be
up in the right hand corner there for you.

43
00:02:13.450 --> 00:02:20.543
It is on
github.com/MartinsonBJ/FCM-intro-to-go.

44
00:02:20.543 --> 00:02:24.870
We're gonna talk a little bit
about installation first but

45
00:02:24.870 --> 00:02:28.890
then down the road we will be doing
some exercises in the actual repo.

46
00:02:28.890 --> 00:02:29.650
So if you clone it down,

47
00:02:29.650 --> 00:02:32.320
you can kind of have some hands
on experience to the repo itself.

48
00:02:33.930 --> 00:02:36.170
Brief introduction of what
today is gonna look like.

49
00:02:36.170 --> 00:02:40.340
Let's talk about what go is, where it
came from, kind of why it's a thing.

50
00:02:40.340 --> 00:02:43.630
We'll do installation setup, make sure
everyone's go on their machine up and

51
00:02:43.630 --> 00:02:44.980
running successfully.

52
00:02:44.980 --> 00:02:47.980
We'll talk about the basic syntax and
structure of the go language.

53
00:02:47.980 --> 00:02:51.760
And then throughout the workshop today
we're gonna be building some really small

54
00:02:51.760 --> 00:02:53.220
exercises and then towards the end,

55
00:02:53.220 --> 00:02:57.700
we'll do a little bit more bigger picture
web server structures and stuff like that.

56
00:02:57.700 --> 00:03:01.122
At the very end, we'll look at
concurrency, some multi threading and

57
00:03:01.122 --> 00:03:04.500
then what go 2.0 and the recent
release of go 1.13 has to offer.

58
00:03:07.824 --> 00:03:09.158
Also kind of as we're going through,

59
00:03:09.158 --> 00:03:11.970
there's a lot of information
that's available on the slides.

60
00:03:11.970 --> 00:03:14.770
And so here's kind of the layout of what
you're working with in the upper left hand

61
00:03:14.770 --> 00:03:18.970
corner, it's kind of a breadcrumb series
of where we're at in the workshop,

62
00:03:18.970 --> 00:03:20.890
what our category is,
what we're talking about.

63
00:03:20.890 --> 00:03:23.550
In the upper right hand corner is
gonna be any files I'm referencing,

64
00:03:23.550 --> 00:03:26.450
whether that's something for reference,
like a markdown file with notes or

65
00:03:26.450 --> 00:03:28.170
some of the lecture notes.

66
00:03:28.170 --> 00:03:31.340
And then anything in green
will be an actionable file.

67
00:03:31.340 --> 00:03:34.230
Either file you can use
as an exercise file or

68
00:03:34.230 --> 00:03:37.350
a website we'd like to visit to kind of
play around with something in the browser.

69
00:03:40.810 --> 00:03:41.990
So brief history of go.

70
00:03:41.990 --> 00:03:45.780
So go was developed in 2007 by a team
of developers working at Google

71
00:03:45.780 --> 00:03:49.870
that were primarily
working in c plus plus.

72
00:03:49.870 --> 00:03:54.450
Performance and scalability at that time
and go are hot topics as they are today.

73
00:03:54.450 --> 00:04:00.450
And go or Google was in the throes of
kind of like scaling to be the giant

74
00:04:00.450 --> 00:04:04.520
company it is today and the scalability
at the time was becoming a real struggle.

75
00:04:04.520 --> 00:04:06.940
And it was difficult to
maintain the codebase.

76
00:04:06.940 --> 00:04:11.590
And the developers were kind of like,
concerned about three primary factors

77
00:04:11.590 --> 00:04:14.350
about what made their lives as
developers particularly pleasant.

78
00:04:14.350 --> 00:04:17.540
So a few things that are really
important as you're developing code is,

79
00:04:17.540 --> 00:04:19.300
do you have fast compile times?

80
00:04:19.300 --> 00:04:22.470
How long does it take your code to reflect
something that you have just done?

81
00:04:22.470 --> 00:04:24.560
How easy is it to develop
on a daily basis?

82
00:04:24.560 --> 00:04:26.250
Are you happy working in
the language you are?

83
00:04:26.250 --> 00:04:28.320
Are you kinda going crazy with
some of the nuances of it?

84
00:04:28.320 --> 00:04:29.600
How does it feel?

85
00:04:29.600 --> 00:04:34.080
And facts execution of build times
when you do finally wanna build and

86
00:04:34.080 --> 00:04:35.830
compile your code and test it and run it,

87
00:04:35.830 --> 00:04:39.590
how long is that feedback loop before
you know what you wanna do differently?

88
00:04:39.590 --> 00:04:43.350
At the time, all three of those things
were hard to find in the same language.

89
00:04:43.350 --> 00:04:44.980
You could get one, maybe two.

90
00:04:44.980 --> 00:04:48.010
But all three was kind of like this
magical unicorn that didn't exist yet.

91
00:04:48.010 --> 00:04:51.030
And so the developers were kind of like,
all right, we can do better,

92
00:04:51.030 --> 00:04:55.100
whether we build our own language
that has all of these things in it.

93
00:04:55.100 --> 00:04:56.720
So that's where go comes into play.

94
00:04:56.720 --> 00:04:59.870
And what makes go a particularly
great language to work in

95
00:04:59.870 --> 00:05:01.490
is it kind of fixes all those problems.

96
00:05:01.490 --> 00:05:02.820
It has a really fast compile time.

97
00:05:02.820 --> 00:05:05.350
And although it still has
a lot in common with C,

98
00:05:05.350 --> 00:05:06.630
there's some of those similarities.

99
00:05:06.630 --> 00:05:10.210
You'll see patterns and
behaviors of C throughout the go syntax.

100
00:05:10.210 --> 00:05:11.730
It reduces a lot of the complexity and

101
00:05:11.730 --> 00:05:15.630
boilerplate that makes C
particularly difficult to write in.

102
00:05:15.630 --> 00:05:17.230
And then it does have
a really fast build time.

103
00:05:17.230 --> 00:05:20.980
So that feedback loop of figuring out what
your application needs to do differently,

104
00:05:20.980 --> 00:05:22.360
happens pretty quickly, which is great.

105
00:05:23.890 --> 00:05:26.350
And the way it does this is few different

106
00:05:26.350 --> 00:05:28.330
ways that we'll talk
about throughout today.

107
00:05:28.330 --> 00:05:32.970
One of which is it maintains
a lightweight type system similar to Cs.

108
00:05:32.970 --> 00:05:34.630
It manages multi threading and

109
00:05:34.630 --> 00:05:38.790
asynchronous behavior through concurrency
using tools like go routines and

110
00:05:38.790 --> 00:05:41.880
sync packages and
stuff we'll talk about later today.

111
00:05:41.880 --> 00:05:45.470
It is an automatically,
the garbage collection is automatic.

112
00:05:45.470 --> 00:05:48.170
So you as a developer don't
have to worry about opening any

113
00:05:48.170 --> 00:05:51.050
allocated memory as you're coding.

114
00:05:51.050 --> 00:05:54.880
The dependency library and convention are
on syntax and kinda what the right way to

115
00:05:54.880 --> 00:05:58.630
write go is is pretty consistent and
well maintained by the community.

116
00:05:58.630 --> 00:06:01.480
So it takes a lot of the mental
effort out of how do you feel today?

117
00:06:01.480 --> 00:06:03.450
Do you wanna write semicolons or
no semicolons?

118
00:06:03.450 --> 00:06:06.530
There's a much more strict rules
around that type of behavior.

