WEBVTT

1
00:00:00.000 --> 00:00:03.164
The next thing I want to talk about is
some of the more peculiar aspects of

2
00:00:03.164 --> 00:00:03.868
the language.

3
00:00:03.868 --> 00:00:08.836
As we work through examples,
there are few obvious differences between

4
00:00:08.836 --> 00:00:13.234
JavaScript that I want to cover off
the bat so as we run into them,

5
00:00:13.234 --> 00:00:15.447
we're a little more prepared.

6
00:00:15.447 --> 00:00:19.014
The first we'll notice is typing, and
some of the big words are string,

7
00:00:19.014 --> 00:00:19.960
integer, float.

8
00:00:19.960 --> 00:00:23.865
And so when you're defining variables,
whatever variable that type is or whatever

9
00:00:23.865 --> 00:00:27.390
type that variable is, it needs to stay
that way for the rest of the program.

10
00:00:27.390 --> 00:00:29.990
So you can't define a number and
then be like, just kidding,

11
00:00:29.990 --> 00:00:31.640
I want that to be a string down the road,

12
00:00:31.640 --> 00:00:34.507
once it's a number It is always
a number for the life of the program.

13
00:00:34.507 --> 00:00:37.910
In JavaScript because it's dynamically
typed that's not the case,

14
00:00:37.910 --> 00:00:41.832
you can redefine a variable called name to
be set of numbers if that's how you feel

15
00:00:41.832 --> 00:00:42.945
like living that day.

16
00:00:42.945 --> 00:00:47.463
You will find that there are a lot of
similarities to how Typescript looks and

17
00:00:47.463 --> 00:00:50.568
feels, so
if you're working in Typescript at all,

18
00:00:50.568 --> 00:00:53.617
there are some familiar
patterns between the two.

19
00:00:53.617 --> 00:00:58.081
In terms of structures in other languages,
if you're trying to turn JavaScript into

20
00:00:58.081 --> 00:01:02.421
more of an object oriented language, a lot
of times you'll think of ES6 classes or

21
00:01:02.421 --> 00:01:06.699
React components that encompass both
behavior, functionality, properties,

22
00:01:06.699 --> 00:01:08.250
types, and stuff like that.

23
00:01:08.250 --> 00:01:12.235
And in Go, those structures we're
gonna be talking about are structs,

24
00:01:12.235 --> 00:01:14.341
pointers, methods and interfaces.

25
00:01:14.341 --> 00:01:16.961
Both of which on both sides have
to do with encompassing and

26
00:01:16.961 --> 00:01:19.422
encapsulating some of the code
around what an object or

27
00:01:19.422 --> 00:01:22.055
what something is trying to do,
and how it's described.

28
00:01:22.055 --> 00:01:26.643
Error handling is a particularly
interesting part of the Go language,

29
00:01:26.643 --> 00:01:32.148
in JavaScript it's built in, exceptions
are gonna be thrown as you're writing your

30
00:01:32.148 --> 00:01:37.436
code, and you don't have to do a lot for
those to appear it'll be pretty obvious.

31
00:01:37.436 --> 00:01:40.350
In the go language,
you have to be extremely explicit, so

32
00:01:40.350 --> 00:01:43.680
errors are treated like values
rather than exceptions, and so for

33
00:01:43.680 --> 00:01:46.712
you to actually manage that you
need to capture that error and

34
00:01:46.712 --> 00:01:49.875
then decide what you wanna do with
it in a very intentional way.

35
00:01:49.875 --> 00:01:53.521
Another way to think about writing Go is
starting with all of the sad paths, so

36
00:01:53.521 --> 00:01:57.167
if you're writing a function, you handle
all of the sad paths with your error

37
00:01:57.167 --> 00:01:59.156
handling as you go through the function.

38
00:01:59.156 --> 00:02:01.951
And then that last line of code should be,
if everything goes great,

39
00:02:01.951 --> 00:02:04.409
you've already handled all
the things that could go wrong,

40
00:02:04.409 --> 00:02:06.645
what do you want the function
to actually accomplish?

41
00:02:06.645 --> 00:02:13.237
But it's a little bit of a different way
to structure, what you expect to happen.

42
00:02:13.237 --> 00:02:17.113
In terms of multitasking, JavaScript is
single threaded, and it is notoriously

43
00:02:17.113 --> 00:02:21.159
difficult for asynchronous behaviors,
you're talking like callbacks, promises

44
00:02:21.159 --> 00:02:24.550
async await, a variety of approaches
to try to make this less painful.

45
00:02:24.550 --> 00:02:27.986
And in Go we have a couple of tools
around Go routines, sync packaging,

46
00:02:27.986 --> 00:02:31.830
multi threaded, pneus with concurrency
that's actually really seamless and

47
00:02:31.830 --> 00:02:33.917
is a really powerful part of the language.

48
00:02:33.917 --> 00:02:38.114
And then lastly,
we've got some opinionated-ness,

49
00:02:38.114 --> 00:02:43.204
the Go language does have strong
opinions around syntax and style as

50
00:02:43.204 --> 00:02:49.380
you're writing your code, there are built
in linters that are one size fits all.

51
00:02:49.380 --> 00:02:52.830
In JavaScript we do have a little bit more
control over which linter do we want?

52
00:02:52.830 --> 00:02:54.143
How strong do you want it to be?

53
00:02:54.143 --> 00:02:55.806
What are the ESLint rules
you wanna turn off?

54
00:02:55.806 --> 00:02:57.458
And that's not the case with Go,

55
00:02:57.458 --> 00:03:01.654
it's kinda just like everyone does it the
same way, which does make it super great.

56
00:03:01.654 --> 00:03:03.994
Because when you're looking at a new
code base that you didn't write,

57
00:03:03.994 --> 00:03:06.700
it looks like your Go code, which can be
a really positive aspect of the language.

