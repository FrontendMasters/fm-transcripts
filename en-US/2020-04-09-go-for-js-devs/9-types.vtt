WEBVTT

1
00:00:00.000 --> 00:00:01.590
So let's get into some
of the basic syntax.

2
00:00:01.590 --> 00:00:04.520
So we've kinda gotten used to interacting
with Go a little bit, our Go files.

3
00:00:04.520 --> 00:00:06.980
And let's talk a little bit more about
some of the other patterns we're gonna see

4
00:00:06.980 --> 00:00:08.550
throughout the day.

5
00:00:08.550 --> 00:00:11.232
The first thing I'd like to
talk about are the types.

6
00:00:11.232 --> 00:00:17.800
[BLANK AUDIO] And the way this kind of is
organized is the type name is on the left.

7
00:00:17.800 --> 00:00:19.270
How we're gonna use it in Go,

8
00:00:19.270 --> 00:00:22.150
what that name actually looks like
in Go code is in that middle column.

9
00:00:22.150 --> 00:00:22.900
And then on the right,

10
00:00:22.900 --> 00:00:28.170
we've got examples, and an example of
defining a variable using that type.

11
00:00:28.170 --> 00:00:30.360
We haven't actually talked about
defining variables just yet,

12
00:00:30.360 --> 00:00:32.980
but we'll work through that shortly.

13
00:00:32.980 --> 00:00:35.450
So the first type we'll
talk about is an integer.

14
00:00:35.450 --> 00:00:38.237
And the type name to use that
indoor code is typically int.

15
00:00:38.237 --> 00:00:43.979
You'll notice that there are quite a few
variations of that including int8,

16
00:00:43.979 --> 00:00:45.029
int16 etc.

17
00:00:45.029 --> 00:00:49.098
And so Go allows you to kind of optimize
how much memory you wanna allocate when

18
00:00:49.098 --> 00:00:50.900
you're saving variables.

19
00:00:50.900 --> 00:00:53.200
In JavaScript, we don't have to worry
about that, it'll take care of it.

20
00:00:53.200 --> 00:00:57.028
But it also allows, if you're saving
a very small variable to a large amount of

21
00:00:57.028 --> 00:01:00.798
memory, you have a lot more control over
how much actually gets allocated for

22
00:01:00.798 --> 00:01:01.846
that variable in Go.

23
00:01:01.846 --> 00:01:05.578
Today we're gonna be only
using just normal int.

24
00:01:05.578 --> 00:01:08.981
We're not doing anything with huge
amounts of data at the moment, so

25
00:01:08.981 --> 00:01:11.320
we won't worry about it too much.

26
00:01:11.320 --> 00:01:15.688
And then that uint indicates an unsigned
integer which is gonna be a value that's

27
00:01:15.688 --> 00:01:16.983
above 0, 0 or above.

28
00:01:16.983 --> 00:01:20.440
An integer could be a negative value.

29
00:01:20.440 --> 00:01:23.890
But examples are integers like 1 and
2, 44.

30
00:01:23.890 --> 00:01:25.200
And then to declare a variable,

31
00:01:25.200 --> 00:01:29.480
it would be a keyword var to say we're
indicating that we're creating a variable.

32
00:01:29.480 --> 00:01:30.893
The name of the variable,
which in this case is age.

33
00:01:30.893 --> 00:01:35.264
And then to the right, we have to specify
what type that variable will be now and

34
00:01:35.264 --> 00:01:36.465
forever and always.

35
00:01:36.465 --> 00:01:39.551
So here we're creating a variable
called age which is an integer,

36
00:01:39.551 --> 00:01:41.324
and it's assigned to a value of 21.

37
00:01:43.317 --> 00:01:45.980
The next type we'll talk about is a float.

38
00:01:45.980 --> 00:01:48.997
And so the float has two different sizes,
float32 or 64.

39
00:01:48.997 --> 00:01:51.574
And because we're working
with decimal points,

40
00:01:51.574 --> 00:01:55.220
these kinda helps you manage how
precise you want that decimal to be.

41
00:01:55.220 --> 00:01:59.739
Sometimes it matters, sometimes it
doesn't, based on what you are doing and

42
00:01:59.739 --> 00:02:03.710
how much it matters that your
mathematical accuracy comes to play for

43
00:02:03.710 --> 00:02:04.887
your application.

44
00:02:04.887 --> 00:02:08.890
Today we'll probably just use float64 for
most of the day.

45
00:02:08.890 --> 00:02:13.019
And you'll see that on the right-hand
side the examples include 1.5, 3.14 and

46
00:02:13.019 --> 00:02:17.064
2100 although the decimal point isn't
there it is point zero behind the scenes.

47
00:02:17.064 --> 00:02:21.648
And so our variable example is
var name gpa which is assigned to

48
00:02:21.648 --> 00:02:26.035
a type of float64, and
then assigned a value of 4.0.

49
00:02:26.035 --> 00:02:31.820
Next up is the string, there is one
type name which is just string.

50
00:02:31.820 --> 00:02:34.582
You'll notice on the right hand
side the example is "Pancakes" and

51
00:02:34.582 --> 00:02:37.060
in Go you do need to use
double quotes all the time.

52
00:02:37.060 --> 00:02:39.337
You cannot choose your favorite
that day double quotes forever.

53
00:02:39.337 --> 00:02:44.180
And then the example variable is
a signing of our plant which is a type of

54
00:02:44.180 --> 00:02:46.080
string to the value ficus.

55
00:02:48.060 --> 00:02:51.439
And lastly our boolean value which is
indicated with the bool for Boolean.

56
00:02:51.439 --> 00:02:54.357
And this includes all of
the conditional operators that

57
00:02:54.357 --> 00:02:56.350
look really similar to JavaScript.

58
00:02:56.350 --> 00:03:00.570
The double end for logical end and
or with the straight pipes.

59
00:03:00.570 --> 00:03:03.300
The bang operator with
the exclamation point less and

60
00:03:03.300 --> 00:03:06.230
less than equal, greater than or equal to.

61
00:03:06.230 --> 00:03:09.060
The only equality operator
with is two equal signs, so

62
00:03:09.060 --> 00:03:11.680
youÂ´re not working with the three or
two like JavaScript.

63
00:03:11.680 --> 00:03:14.681
And then not equal,
which is the bang operator and equal sign.

64
00:03:14.681 --> 00:03:18.377
On the right hand side the words
that represent that as examples

65
00:03:18.377 --> 00:03:20.010
are true and false.

66
00:03:20.010 --> 00:03:22.050
And the variable example here is var,

67
00:03:22.050 --> 00:03:25.660
the name of the variable is can drink
which is set to a type of Boolean.

68
00:03:25.660 --> 00:03:29.115
And it's assigned a value of a conditional
where some variable that we've defined

69
00:03:29.115 --> 00:03:32.585
elsewhere age is greater than 21, which
would return true or false in this case.

70
00:03:36.717 --> 00:03:39.460
So we're gonna hop back over
to the Golang Playground.

71
00:03:39.460 --> 00:03:42.630
And additionally,
what we wanna talk about here around types

72
00:03:42.630 --> 00:03:45.130
is what happens if you
don't know what a type is.

73
00:03:45.130 --> 00:03:47.265
So as previously mentioned,
Go is really particular about,

74
00:03:47.265 --> 00:03:49.616
if you're working with a string,
you want it to always be a string.

75
00:03:49.616 --> 00:03:53.780
And when you're working with equality,
you can only equate two different,

76
00:03:53.780 --> 00:03:56.860
like types of the same kind,
like does four equals six.

77
00:03:56.860 --> 00:04:00.420
If they're both integers, Go will let you
if they're not, you're gonna have trouble.

78
00:04:00.420 --> 00:04:03.630
So something that's helpful to know is
if you don't know what a variable is,

79
00:04:03.630 --> 00:04:05.120
how do you identify the type?

80
00:04:05.120 --> 00:04:07.110
And if you're working with an int,
you want it to be a float or

81
00:04:07.110 --> 00:04:09.810
vice versa,
how do you convert those types?

82
00:04:09.810 --> 00:04:13.040
So we're gonna hop over to
the playground to work on that.

83
00:04:13.040 --> 00:04:16.170
So besides our front package,
which is the only one we've worked with so

84
00:04:16.170 --> 00:04:19.130
far, Go also ships with
a package called reflect.

85
00:04:19.130 --> 00:04:22.120
And reflect allows you to dig
into the syntax a little bit and

86
00:04:22.120 --> 00:04:23.628
ask some questions about
what you're typing.

87
00:04:23.628 --> 00:04:28.050
So one of our main function here,

88
00:04:29.450 --> 00:04:34.770
I'm gonna start with fmt.Println cuz I
do wanna see some stuff in the console.

89
00:04:34.770 --> 00:04:39.925
But in here, I'm going to use the reflect
package to ask for the type of.

90
00:04:46.045 --> 00:04:47.679
Whatever I wanna pass in the middle here.

91
00:04:48.880 --> 00:04:51.502
Obviously we are physically looking at
this code we can see that it's a string.

92
00:04:51.502 --> 00:04:55.015
But if you couldn't, and
you run this code as is,

93
00:04:55.015 --> 00:04:59.460
you'll see it prints out the type name,
which here is string.

94
00:05:03.860 --> 00:05:05.968
Let's say I have a variable
defined up here.

95
00:05:07.718 --> 00:05:12.190
And pretend this is coming from
some other file in your code base.

96
00:05:12.190 --> 00:05:15.049
I have var x assigned to a value of 4.

97
00:05:15.049 --> 00:05:19.354
And if I wasn't sure what that variable
was, and I replaced the string here with

98
00:05:19.354 --> 00:05:23.790
my variable x, run the program,
you'll see it's printing out int.

99
00:05:23.790 --> 00:05:26.855
Side note about the Go Playground, you'll
notice that when I typed this var x,

100
00:05:26.855 --> 00:05:29.625
it kinda just shifted over to the left,
everything looks really ugly.

101
00:05:29.625 --> 00:05:33.510
This Format button on the top here
will actually format that for you.

102
00:05:33.510 --> 00:05:36.170
So as we kinda work through
the playground, if that's irritating,

103
00:05:36.170 --> 00:05:37.380
you hit the Format button.

104
00:05:40.010 --> 00:05:41.578
So okay,
we're working with an integer here.

105
00:05:41.578 --> 00:05:46.846
But if I wanted to do x times 5.5,

106
00:05:46.846 --> 00:05:51.247
and hit Run, we get an error.

107
00:05:51.247 --> 00:05:54.289
And it's saying that 5.5 has
been truncated to an integer but

108
00:05:54.289 --> 00:05:55.820
Go is like not happy about that.

109
00:05:55.820 --> 00:05:58.160
And that's because now we're trying
to work with two different types.

110
00:05:58.160 --> 00:05:58.950
We've got an int,

111
00:05:58.950 --> 00:06:02.700
we're trying to multiply it by a float,
Go doesn't wanna do that at all.

112
00:06:02.700 --> 00:06:07.260
So our options are to convert our float
to an integer or integer to a float.

113
00:06:07.260 --> 00:06:10.490
And in this contrived example,
we kinda want that decimal point,

114
00:06:10.490 --> 00:06:12.170
we want that precision.

115
00:06:12.170 --> 00:06:16.010
So instead we're gonna convert our x
variable which is an integer 4 to a float.

116
00:06:16.010 --> 00:06:19.970
And the cool thing about Go is you
can simply use the type name itself

117
00:06:19.970 --> 00:06:21.060
as a function.

118
00:06:21.060 --> 00:06:24.203
So here we've got float64, and
I'm wrapping my x variable in that type.

119
00:06:24.203 --> 00:06:28.994
And then when I run it, you should
see that our TypeOf is now printing

120
00:06:28.994 --> 00:06:32.870
accurately because we were
able to multiply the two.

121
00:06:32.870 --> 00:06:35.770
Similarly, you can convert
from float 64 to int.

122
00:06:35.770 --> 00:06:38.530
If you're converting things
like strings to integers,

123
00:06:38.530 --> 00:06:40.970
there isn't a magical parse int built in.

124
00:06:40.970 --> 00:06:44.860
But there are additional string
libraries that will help you convert

125
00:06:44.860 --> 00:06:46.080
additional types back and forth.

126
00:06:46.080 --> 00:06:48.220
And that's kind of an interesting
part about Go as well.

