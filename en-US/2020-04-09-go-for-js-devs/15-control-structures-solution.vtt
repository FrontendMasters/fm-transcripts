WEBVTT

1
00:00:00.040 --> 00:00:02.030
So let's work through
exercise 3a together.

2
00:00:02.030 --> 00:00:08.404
First part of the directions is to
create another exercise 3a.go file.

3
00:00:17.147 --> 00:00:18.540
And then in the main function,

4
00:00:18.540 --> 00:00:21.280
we wanna declare a variable that
has the value of a sentence.

5
00:00:21.280 --> 00:00:24.341
So I'm going to go ahead and set up

6
00:00:28.020 --> 00:00:32.192
Our go file template which
starts with our package main.

7
00:00:34.801 --> 00:00:36.610
And now we're gonna be printing
some stuff to the console.

8
00:00:36.610 --> 00:00:39.520
So we'll go ahead and
import our fmt package.

9
00:00:39.520 --> 00:00:41.380
And then in func main,

10
00:00:41.380 --> 00:00:45.070
the first thing we wanted to do was
instantiate a variable of a sentence.

11
00:00:45.070 --> 00:00:48.410
So I'm gonna call it my
sentence you shorthand syntax.

12
00:00:49.987 --> 00:00:53.710
And use an incredibly enthralling
sentence of, Hello, this is a sentence.

13
00:00:54.800 --> 00:00:59.250
Next steps in our instructions are to
iterate over that sentence using a range.

14
00:01:01.520 --> 00:01:03.599
So to do that,
we're going to start with our fore loop.

15
00:01:05.370 --> 00:01:08.830
And so the two arguments that we have
using range is we have that index, and

16
00:01:08.830 --> 00:01:11.230
then we have a value of each
thing we're iterating over.

17
00:01:11.230 --> 00:01:14.910
And that is assigned to a value
of our keyword range, and

18
00:01:14.910 --> 00:01:18.580
then the collection we're iterating over,
which in this case is mySentence.

19
00:01:18.580 --> 00:01:23.106
And then our opening and closing curly
braces to scope that fore loop and

20
00:01:23.106 --> 00:01:24.395
the code within it.

21
00:01:29.401 --> 00:01:32.505
So step four here, if the index
of that letter is an odd number,

22
00:01:32.505 --> 00:01:34.340
print that letter.

23
00:01:34.340 --> 00:01:36.420
So the first step is,
I'm gonna add an if block here.

24
00:01:36.420 --> 00:01:41.590
And so I wanna check to see
if index module two equals 0,

25
00:01:41.590 --> 00:01:46.107
using the two equal signs
to indicate equality.

26
00:01:46.107 --> 00:01:51.122
And if that returns true,
I want to print the value.

27
00:01:54.690 --> 00:01:56.083
I'll bring my terminal backup.

28
00:01:59.001 --> 00:02:04.449
And if I go run section 3 basic syntax,
code, and then exercise 3a.go,

29
00:02:04.449 --> 00:02:11.680
you'll see that I'm not getting letters
once again, I'm getting that byte value.

30
00:02:11.680 --> 00:02:17.560
So I'm going to put back in my string
function to convert our type to a letter,

31
00:02:17.560 --> 00:02:19.030
save the file.

32
00:02:19.030 --> 00:02:20.803
So when I run that file,

33
00:02:20.803 --> 00:02:25.691
I'm only seeing the letters if
that index value is an odd number.

34
00:02:30.717 --> 00:02:35.500
So in this case, I am using
the index variable here on line 9.

35
00:02:35.500 --> 00:02:37.301
So I'm setting index modulo 2 equal 0.

36
00:02:37.301 --> 00:02:43.479
But if we were to kill this chunk of
code and just go back to kind of our,

37
00:02:45.326 --> 00:02:50.220
Print line of the string value.

38
00:02:50.220 --> 00:02:54.530
If I save this and I run my code again,
I'm gonna see an error message and

39
00:02:54.530 --> 00:02:58.310
this error message is saying
the index is declared and not used.

40
00:02:58.310 --> 00:03:00.570
And because we have two values
on the left hand side and

41
00:03:00.570 --> 00:03:05.550
go is following it's rules and saying,
once you declare it you have to use it.

42
00:03:05.550 --> 00:03:07.350
But in this case I don't wanna use index.

43
00:03:07.350 --> 00:03:10.320
I'm not using it in any
productive capacity and so

44
00:03:10.320 --> 00:03:13.880
go allows you to put an underscore into
any variable that you're not gonna use

45
00:03:13.880 --> 00:03:14.840
within the code itself.

46
00:03:14.840 --> 00:03:18.410
And it's gonna ignore it and
allow you to still compile your code.

47
00:03:18.410 --> 00:03:22.510
If I run it again without underscore
instead of index, it doesn't yell at me,

48
00:03:22.510 --> 00:03:23.580
I can print out that value.

49
00:03:24.830 --> 00:03:28.039
And that's something we'll see pretty
frequently as we continue as well.

