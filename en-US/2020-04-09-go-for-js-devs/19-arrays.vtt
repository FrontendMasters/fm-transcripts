WEBVTT

1
00:00:00.260 --> 00:00:02.865
Okay, let's dive back in and
talk about arrays in Go.

2
00:00:04.408 --> 00:00:07.840
So first let's do a little comparison
between Go and JavaScript.

3
00:00:07.840 --> 00:00:11.700
If you're defining an array in JavaScript,
and on line two or

4
00:00:11.700 --> 00:00:14.900
establishing there's a const called
grabbag, which is currently empty.

5
00:00:14.900 --> 00:00:16.820
If we did add elements into this array,

6
00:00:16.820 --> 00:00:21.150
they could be strings, integers, booleans,
any combination or length of elements.

7
00:00:21.150 --> 00:00:26.310
And if we're talking about Go, that line
9 in the Go box, is initializing an empty

8
00:00:26.310 --> 00:00:32.850
array, and our var scores is set to a type
of float64 with five elements in it.

9
00:00:32.850 --> 00:00:36.790
So the hard bracket five float64
is actually a type definition,

10
00:00:36.790 --> 00:00:39.400
similar to string, boolean, etc.

11
00:00:39.400 --> 00:00:42.770
But that type definition has to include
how many things are in the array,

12
00:00:42.770 --> 00:00:44.470
how many elements it contains, and

13
00:00:44.470 --> 00:00:48.400
exactly what type those are,
all of which have to be the same type.

14
00:00:49.690 --> 00:00:52.987
So eventually, the array in Go
could only contain floats and

15
00:00:52.987 --> 00:00:55.790
it could only have five elements.

16
00:00:55.790 --> 00:00:58.430
So it's a pretty significant difference
when working with these two structures

17
00:00:58.430 --> 00:00:59.377
between the two languages.

18
00:01:01.500 --> 00:01:06.163
A really important thing to note as well
is similar to, if we were to compare

19
00:01:06.163 --> 00:01:11.230
a string to an integer, Go would tell
us that those are not the same things.

20
00:01:11.230 --> 00:01:16.760
If we were to compare two arrays of types
1 has five elements with a float64,

21
00:01:16.760 --> 00:01:19.133
the other has six elements of a float64.

22
00:01:19.133 --> 00:01:20.947
Those will come back as
two very different types,

23
00:01:20.947 --> 00:01:23.808
completely different type signatures and
different allocations in memory.

24
00:01:26.996 --> 00:01:31.658
So we are gonna hop over to either the Go
playground or a Go file and talk about how

25
00:01:31.658 --> 00:01:35.750
these arrays get initialized,
and why they're important in Go.

26
00:01:35.750 --> 00:01:39.850
So we're gonna look at line 9 and
copy this guy over into a Go file, and

27
00:01:39.850 --> 00:01:41.440
just print it out as is.

28
00:01:41.440 --> 00:01:43.680
So I'm gonna move over to our code editor.

29
00:01:43.680 --> 00:01:50.394
I'm gonna create a new file,
Called arrays.go.

30
00:01:56.847 --> 00:02:01.581
Set up my initial Go template.

31
00:02:06.947 --> 00:02:10.475
And then here, I'm going to
copy over our scores array, so

32
00:02:10.475 --> 00:02:13.760
it is five elements,
all of which are type float64.

33
00:02:13.760 --> 00:02:17.465
If I print line scores

34
00:02:21.890 --> 00:02:25.674
And run our program,
go run section 4 code arrays,

35
00:02:25.674 --> 00:02:30.146
you'll see I have allocated
five elements within our array,

36
00:02:30.146 --> 00:02:33.620
all of which already
have default values of 0.

37
00:02:33.620 --> 00:02:38.350
And a reminder back to the beginning, when
we have a default value that's a float,

38
00:02:38.350 --> 00:02:42.300
it's going to pop in a zero for
that value behind the scenes.

39
00:02:42.300 --> 00:02:46.406
And so, Go is kind of setting aside enough
memory for us to eventually add values

40
00:02:46.406 --> 00:02:49.431
into our array, but for
now it's putting a zero in there.

41
00:02:52.154 --> 00:02:55.476
Okay, so if we wanted to find values and
populate our array,

42
00:02:55.476 --> 00:02:59.319
one of the methods we could use is to
individually target each index and

43
00:02:59.319 --> 00:03:03.770
then populate that value manually, which
is not an ideal way to define an array.

44
00:03:05.000 --> 00:03:09.330
Instead we can use a more concise syntax
where we are establishing that we

45
00:03:09.330 --> 00:03:13.300
are setting up a variable called
scores which has a type signature of

46
00:03:13.300 --> 00:03:14.690
five elements of float64.

47
00:03:14.690 --> 00:03:18.770
And then on the right hand side,
we can use that type signature and

48
00:03:18.770 --> 00:03:21.820
then instantiate each of the new
values within curly braces.

49
00:03:21.820 --> 00:03:25.569
The comma separated values within those
curly braces will be allocated to each

50
00:03:25.569 --> 00:03:27.116
respective index in our array.

51
00:03:30.220 --> 00:03:33.475
As we've seen with using
shorthand syntax and variables,

52
00:03:33.475 --> 00:03:36.599
because we were being so
specific on the right hand side,

53
00:03:36.599 --> 00:03:40.244
Go will infer that if we start with
a variable called scores and then

54
00:03:40.244 --> 00:03:44.695
use a colon equal sign, it will assume we
want five floats on the right hand side.

55
00:03:47.817 --> 00:03:51.737
And then a little similarly here, if we
have explicit initial values on the right,

56
00:03:51.737 --> 00:03:54.817
Go can also infer that you know you
want five things in this array,

57
00:03:54.817 --> 00:03:57.060
there are five things
within the curly braces.

58
00:03:57.060 --> 00:04:01.520
So the dot dot dot within the higher
brackets can replace that explicit number.

59
00:04:06.324 --> 00:04:06.824
Cool.

60
00:04:08.760 --> 00:04:12.040
So I'm gonna hop back into the code editor
just to demonstrate that by using range,

61
00:04:12.040 --> 00:04:17.900
we can iterate over this array similarly
to how we did the string example earlier.

62
00:04:17.900 --> 00:04:21.374
Okay, so when we're back in our
arrays.go file, we're gonna create a for

63
00:04:21.374 --> 00:04:23.395
loop to iterate over
an example of an array.

64
00:04:25.649 --> 00:04:29.485
So we have our var scores,
which is set to five elements of float64.

65
00:04:32.489 --> 00:04:37.554
Which we can refactor to just have scores,

66
00:04:37.554 --> 00:04:43.700
and then set that equal
to An array of values.

67
00:04:44.982 --> 00:04:47.800
I'm gonna use an arbitrary array of
values for this particular example.

68
00:04:47.800 --> 00:04:51.258
So I'm just going to do 1, 2, 3, 4, 5.

69
00:04:52.636 --> 00:04:56.450
And then our for loop we can say for
each index, which I'm not gonna use, and

70
00:04:56.450 --> 00:04:57.710
the value of that array.

71
00:04:59.070 --> 00:05:01.912
We can use the range keyword
to iterate over our scores.

72
00:05:05.288 --> 00:05:06.639
And then print line value.

73
00:05:12.461 --> 00:05:15.590
If we run our code here,
we'll see 1,2,3,4,5.

74
00:05:15.590 --> 00:05:18.221
Had we included our index here

75
00:05:20.677 --> 00:05:25.808
Without using that index, we would see,
I declared a not used error.

76
00:05:25.808 --> 00:05:31.190
So to fix that, we'll make sure
to implement the underscore.

