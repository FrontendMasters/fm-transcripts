WEBVTT

1
00:00:00.120 --> 00:00:01.390
So let's talk about packages.

2
00:00:01.390 --> 00:00:03.760
So far we've really only
looked at package main.

3
00:00:03.760 --> 00:00:04.580
We've imported a few.

4
00:00:04.580 --> 00:00:07.040
We've imported fmt, math, and reflect.

5
00:00:07.040 --> 00:00:08.620
We haven't looked at math yet

6
00:00:08.620 --> 00:00:13.220
but it would open up a lot of functions
around mathematical operations.

7
00:00:13.220 --> 00:00:15.280
And then reflect was the one we used for

8
00:00:16.440 --> 00:00:18.820
asking what kind of type
a particular variable was.

9
00:00:20.600 --> 00:00:22.515
We're gonna hop over to PACKAGES.GO.

10
00:00:22.515 --> 00:00:25.720
We talk a little bit
about package visibility.

11
00:00:25.720 --> 00:00:27.450
And then we're gonna create
our own custom package.

12
00:00:27.450 --> 00:00:30.680
So we can watch that interaction between
the main package, which has all of our

13
00:00:30.680 --> 00:00:34.080
code so far and then writing a smaller
package and pulling that code into it.

14
00:00:34.080 --> 00:00:36.920
Cool.
So right now the only thing in this file

15
00:00:36.920 --> 00:00:40.580
simply has a print line for packages.

16
00:00:40.580 --> 00:00:45.417
But let's say we wanted to create
a package that has kind of like

17
00:00:45.417 --> 00:00:47.435
utilitarian functions.

18
00:00:47.435 --> 00:00:53.540
If you wanted to capitalize strings or
do kind of smaller unit testable tasks.

19
00:00:55.400 --> 00:00:58.790
So in our code directory here,
I'm going to create a new folder.

20
00:00:58.790 --> 00:01:01.660
And I'm gonna call this folder utils.

21
00:01:01.660 --> 00:01:05.160
And I know that all go files that live in
this folder are now gonna be in package

22
00:01:05.160 --> 00:01:05.960
utils.

23
00:01:05.960 --> 00:01:07.240
We're getting out of package main,

24
00:01:07.240 --> 00:01:09.480
we're gonna do a subset of code
that lives in package utils.

25
00:01:11.910 --> 00:01:18.036
So in utils,
I'm gonna create a new file called mah.go

26
00:01:21.675 --> 00:01:24.230
And essentially this file will
be where all of our math lives.

27
00:01:25.230 --> 00:01:28.785
So here at the top instead of package
main, we're now gonna say package utils.

28
00:01:28.785 --> 00:01:35.738
[SOUND] I'm still going
to import the package.

29
00:01:35.738 --> 00:01:38.819
And then in this file,
I'm going to create a couple math

30
00:01:38.819 --> 00:01:41.390
functions that just do some basic math for
us.

31
00:01:42.800 --> 00:01:45.150
First I'm going to
create is just func Add.

32
00:01:46.680 --> 00:01:49.750
It's gonna take some amount of numbers.

33
00:01:51.810 --> 00:01:55.520
That must be int, and then at
the end of the day, I wanna int, so.

34
00:01:55.520 --> 00:01:57.920
Theoretically we'll add them all together,
return a final int.

35
00:02:00.290 --> 00:02:02.374
I'll set my initial value to 0.

36
00:02:05.945 --> 00:02:09.854
And then using that underscore since
we're not using the index and v for

37
00:02:09.854 --> 00:02:12.620
every individual value of number.

38
00:02:12.620 --> 00:02:15.372
User range keyword to iterate
over all of our numbers.

39
00:02:18.395 --> 00:02:25.680
And then, for kicks, I'm gonna create
a new function called printNum.

40
00:02:25.680 --> 00:02:28.030
Just so we can kinda visualize like,
what number are we looking at?

41
00:02:28.030 --> 00:02:29.600
What are we doing with this thing?

42
00:02:29.600 --> 00:02:31.003
We'll write that function
in just a second.

43
00:02:34.009 --> 00:02:39.454
Let's add it to our total and
then at the end of this function,

44
00:02:39.454 --> 00:02:45.654
I just wanna return the total of all
the things we've added together.

45
00:02:45.654 --> 00:02:48.726
So you'll notice that right now I'm
getting some errors we need to go write

46
00:02:48.726 --> 00:02:51.770
that printNum function, so I'll put
that right above our add function.

47
00:02:54.532 --> 00:02:58.070
And printNum is going to take a single
number that's also an integer.

48
00:02:58.070 --> 00:03:02.040
And all I really want this guy to do
just we can kinda watch what's happening

49
00:03:02.040 --> 00:03:05.330
behind the scenes is print out.

50
00:03:05.330 --> 00:03:07.170
The current number you're talking about.

51
00:03:11.060 --> 00:03:11.610
Is this thing.

52
00:03:12.800 --> 00:03:17.854
&gt;&gt; You also need on 13 plus or equals.

53
00:03:17.854 --> 00:03:19.870
&gt;&gt; Thank you.

54
00:03:19.870 --> 00:03:24.972
So on line 13 just modifying that typo
where it used to be called an equal sign

55
00:03:24.972 --> 00:03:30.400
and changing that to actually add each
individual number to our total value here.

56
00:03:32.935 --> 00:03:35.055
So one of the areas that we're still
seeing that I'm kind of leaving up here

57
00:03:35.055 --> 00:03:38.605
intentionally, this green squiggly line
here is telling me that something's wrong

58
00:03:38.605 --> 00:03:40.135
with this function and my inter.

59
00:03:40.135 --> 00:03:43.635
If I have override it's telling me that
the add function should have a comment or

60
00:03:43.635 --> 00:03:45.215
be unexported.

61
00:03:45.215 --> 00:03:49.845
And so with packages if you're
talking about JavaScript and

62
00:03:49.845 --> 00:03:53.695
we want to make any variables or
functions accessible to other files.

63
00:03:53.695 --> 00:03:57.970
We have to export them, export const
etcetera to get those values or

64
00:03:57.970 --> 00:04:00.620
functions or
variables to be accessible elsewhere.

65
00:04:00.620 --> 00:04:04.980
In go, anything that has a capital
letter is automatically exported.

66
00:04:04.980 --> 00:04:07.600
So right now because this thing is
actually going to be visible elsewhere

67
00:04:07.600 --> 00:04:09.990
once we import the utils package.

68
00:04:09.990 --> 00:04:13.570
Go has a convention that anything
exploitable needs to be commented so

69
00:04:13.570 --> 00:04:17.110
that users know what's happening and
what it does in other packages.

70
00:04:17.110 --> 00:04:22.044
So here I'm just going to say,
Add adds together two numbers.

71
00:04:23.695 --> 00:04:25.297
Multiple numbers.

72
00:04:28.697 --> 00:04:30.566
And you'll see that error ran away.

73
00:04:35.555 --> 00:04:37.940
So to quick summarize kinda
what's happening here,

74
00:04:37.940 --> 00:04:40.240
we created a different
package called utils.

75
00:04:40.240 --> 00:04:41.970
And nowhere in this package is func main.

76
00:04:41.970 --> 00:04:45.750
And that's because this is not the first
starting point of our program anymore.

77
00:04:45.750 --> 00:04:49.090
We're not trying to dive in here and do
this every single time our program loads.

78
00:04:49.090 --> 00:04:52.750
We just might need this add utility
function elsewhere in our application.

79
00:04:52.750 --> 00:04:55.595
And so we want to define it in a place
where we can reuse it in other places.

80
00:05:01.487 --> 00:05:03.490
Cool, so let's put this package to use.

81
00:05:03.490 --> 00:05:07.078
I'm gonna go back to our packages.go file.

82
00:05:09.561 --> 00:05:13.085
And then underneath import here,
we're still in package main, but

83
00:05:13.085 --> 00:05:16.590
I want access to that utils
file that we just created.

84
00:05:16.590 --> 00:05:20.040
So underneath thumped,
I'm going to import a local package.

85
00:05:20.040 --> 00:05:22.520
And go is going to start from
that top level directory.

86
00:05:22.520 --> 00:05:24.280
So that go workspace.

87
00:05:24.280 --> 00:05:27.880
And so remember that go has like
the folder directory structure where like

88
00:05:27.880 --> 00:05:29.790
after go you see source and source.

89
00:05:29.790 --> 00:05:32.610
You have all of your GitHub files or
local files or the repo or

90
00:05:32.610 --> 00:05:35.070
whatever you're trying to do.

91
00:05:35.070 --> 00:05:37.420
So this import statement here needs to be

92
00:05:39.270 --> 00:05:43.160
the entire file path to
the file we just created.

93
00:05:43.160 --> 00:05:49.116
So starting from the go
workspace in source, you have,

94
00:05:49.116 --> 00:05:55.327
let's see intro-to-go as
the name of the repository and

95
00:05:55.327 --> 00:05:59.908
then within that we have the 05 toolkit.

96
00:05:59.908 --> 00:06:02.090
And then within that we
need to go into code.

97
00:06:02.090 --> 00:06:04.560
And then within that we
need to go to utils.

98
00:06:08.540 --> 00:06:10.780
On save it is deleting it
since I'm not using it.

99
00:06:10.780 --> 00:06:12.562
So let me just run that one more time.

100
00:06:26.541 --> 00:06:30.890
And so on line four we've been using
the font package just by writing fnt.

101
00:06:30.890 --> 00:06:35.180
When you have a long nested list of
packages here the name you're gonna use is

102
00:06:35.180 --> 00:06:39.410
either the last on the right hand side,
so we'll use utils here.

103
00:06:39.410 --> 00:06:42.550
If we wanted to, we could add kind
of an alias on the left hand side.

104
00:06:42.550 --> 00:06:45.955
So maybe this is like math.

105
00:06:45.955 --> 00:06:49.611
And now we can use math instead of
this package name here that can be

106
00:06:49.611 --> 00:06:53.070
helpful if like that last package
name is particularly long or

107
00:06:53.070 --> 00:06:55.630
has a lot of difficult to spell words.

108
00:06:55.630 --> 00:06:58.330
You can kind of choose either
abbreviation or a single letter or

109
00:06:58.330 --> 00:07:01.270
a shorter word to use here to
make your life a little easier.

110
00:07:01.270 --> 00:07:06.780
For now, I'm going to stick with
the basic utils on the end.

111
00:07:06.780 --> 00:07:15.190
So underneath our print line
packages let's add a function here.

112
00:07:15.190 --> 00:07:19.460
So I'm gonna say okay, I know at some
point I need a total variable in my main

113
00:07:19.460 --> 00:07:22.160
function and
then I'm not quite sure what's happening.

114
00:07:22.160 --> 00:07:24.462
But I'm going to create a file a function.

115
00:07:27.277 --> 00:07:28.180
Calculate.

116
00:07:29.490 --> 00:07:30.360
Calculate important data.

117
00:07:32.660 --> 00:07:36.120
So my main function all it knows is that
this calculate important data is going to

118
00:07:36.120 --> 00:07:38.220
go handle all of the calculations.

119
00:07:38.220 --> 00:07:40.250
Do some other stuff,
make some magic happen.

120
00:07:40.250 --> 00:07:44.700
But that's what my entry point of my
application is going to kick off by doing.

121
00:07:45.700 --> 00:07:49.392
And then underneath that, let's go and
print out what we get from that function.

122
00:07:55.502 --> 00:07:57.907
And so to make that function above main,

123
00:07:57.907 --> 00:08:00.895
I'm gonna create a func
calculateImportantData

124
00:08:08.438 --> 00:08:10.990
Let me just reimport this one last time.

125
00:08:13.408 --> 00:08:17.136
[SOUND]
So

126
00:08:17.136 --> 00:08:23.527
now I can use my

127
00:08:23.527 --> 00:08:30.989
utils package.

128
00:08:30.989 --> 00:08:35.007
So, let's say maybe there's some crazy
stuff happening in this folder or

129
00:08:35.007 --> 00:08:36.300
this file, excuse me.

130
00:08:36.300 --> 00:08:37.594
And at the end of the day,

131
00:08:37.594 --> 00:08:41.840
we want the total value to go grab that
add function from our utils package.

132
00:08:41.840 --> 00:08:43.690
So, because we have access to it,
online file,

133
00:08:43.690 --> 00:08:47.840
I can now call utils dot add of
the capital A, because it's exported.

134
00:08:49.380 --> 00:08:52.501
And then pass it a series of numbers.

135
00:08:55.389 --> 00:08:59.822
I do want this function to return the
total value, which means that to the right

136
00:08:59.822 --> 00:09:04.388
of the parentheses here in our function
signature, we also need to say that hey,

137
00:09:04.388 --> 00:09:06.152
you do need to return an integer

138
00:09:20.898 --> 00:09:23.068
Cool, so you'll see when I run the code,

139
00:09:23.068 --> 00:09:26.920
we get that current number that's all
happening in the utils directory.

140
00:09:26.920 --> 00:09:30.436
And then we're also getting 15 which
is what we're printing from line 15 of

141
00:09:30.436 --> 00:09:32.230
our main function.

142
00:09:32.230 --> 00:09:36.010
&gt;&gt; So,
I'm just curious about the utils that add.

143
00:09:36.010 --> 00:09:39.210
Is that utils coming from the file name,
or

144
00:09:39.210 --> 00:09:44.330
that you imported utils or is it
because it's the package name is utils?

145
00:09:44.330 --> 00:09:45.710
&gt;&gt; It is the package utils.

146
00:09:45.710 --> 00:09:49.965
So behind the scenes, if we had multiple
files in our utils directory, if we had

147
00:09:49.965 --> 00:09:55.340
strings.go and do some other stuff
that go all within the package utils.

148
00:09:55.340 --> 00:09:58.430
All of the exploitable capitalized
functions within that package would be

149
00:09:58.430 --> 00:10:02.820
visible by calling any of
those methods on utils.

150
00:10:02.820 --> 00:10:03.680
On the other hand, though,

151
00:10:03.680 --> 00:10:06.960
you'll notice that in our math.go,
we do have two different functions.

152
00:10:06.960 --> 00:10:10.035
We have the capital A add and
we have this printNum.

153
00:10:11.330 --> 00:10:14.690
And just to demonstrate a little bit
about that export madness, I can't.

154
00:10:14.690 --> 00:10:16.120
Let's see.
So printNum.

155
00:10:16.120 --> 00:10:16.950
What do we need here?

156
00:10:16.950 --> 00:10:19.300
It takes a single integer and
print some stuff.

157
00:10:20.550 --> 00:10:28.463
So if I were to change this a little
bit to say I just wanna print line and

158
00:10:28.463 --> 00:10:33.102
say utils dot lowercase, printNum 4,

159
00:10:33.102 --> 00:10:39.936
let's actually do a bigger number,
10, run this file.

160
00:10:39.936 --> 00:10:42.252
We're gonna say,
undefined: utils.printNum,

161
00:10:42.252 --> 00:10:44.130
cannot refer to an unexported name.

162
00:10:44.130 --> 00:10:47.445
So the only functions that are gonna
be visible, even if we can see all of

163
00:10:47.445 --> 00:10:50.281
the utils package,
are anything that has a capital letter.

