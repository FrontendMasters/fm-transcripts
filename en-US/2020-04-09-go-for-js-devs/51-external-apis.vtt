WEBVTT

1
00:00:00.200 --> 00:00:02.600
So the next thing we're going to do is
going to be kind of a similar exercise.

2
00:00:02.600 --> 00:00:04.560
But instead of creating
to do's through a forum,

3
00:00:04.560 --> 00:00:07.950
we're going to hit an external API and
then parse that request using a couple of

4
00:00:07.950 --> 00:00:10.190
the JSON related functions
that come with go.

5
00:00:10.190 --> 00:00:16.020
So we're going to hop
over to exercise 12a.

6
00:00:16.020 --> 00:00:19.870
But the first thing I'd like to do is talk
about the API we're actually going to use.

7
00:00:19.870 --> 00:00:25.980
So I'm going to be working
with the HTTPSswapi.co file,

8
00:00:25.980 --> 00:00:29.780
which is the Star Wars API,
which allows you to hit an endpoint and

9
00:00:29.780 --> 00:00:31.550
get a bunch of Star Wars data back.

10
00:00:31.550 --> 00:00:34.920
And the interesting thing about this
particular API which we will look at

11
00:00:34.920 --> 00:00:35.480
right now.

12
00:00:37.590 --> 00:00:41.821
Is it has some cool nested structures to
it that make it interesting to work with,

13
00:00:41.821 --> 00:00:44.572
especially when talking
about HTTP requests, so.

14
00:00:49.408 --> 00:00:51.930
The Star Wars API homepage, so

15
00:00:51.930 --> 00:00:58.380
it's all of the data you've ever wanted
around Star Wars related things.

16
00:00:58.380 --> 00:01:03.220
So the input we're gonna hit is going to
be this base URL, which is swapi.co/api.

17
00:01:03.220 --> 00:01:08.970
And we're going to start with
just getting all of the people.

18
00:01:08.970 --> 00:01:13.400
So one of the endpoints that exists is
/people and you'll see some examples here.

19
00:01:13.400 --> 00:01:15.600
And when you hit request,

20
00:01:17.170 --> 00:01:21.700
you'll see the results come back with
an array of objects in JSON here.

21
00:01:21.700 --> 00:01:24.420
That each have name,
height, hair color, etc.

22
00:01:24.420 --> 00:01:28.885
And then their films actually is
an array of additional endpoints.

23
00:01:33.660 --> 00:01:36.410
They have a list of starships,
a list of vehicles, a list of species.

24
00:01:38.150 --> 00:01:40.710
What's important to note before we get
into the code is that the endpoint is

25
00:01:40.710 --> 00:01:41.490
going to be /people.

26
00:01:41.490 --> 00:01:42.789
That's where we're going to start.

27
00:01:43.800 --> 00:01:48.041
Cool, so let's navigate over to
our code and we're in section 12.

28
00:01:50.271 --> 00:01:54.020
API and API.go.

29
00:01:54.020 --> 00:02:00.050
So what currently exist in this file is
simply the beginning of that base URL, and

30
00:02:00.050 --> 00:02:01.630
if I kill my server.

31
00:02:02.670 --> 00:02:08.771
And let's go ahead and run section
12 server Earth 12_api/code/api.go.

32
00:02:08.771 --> 00:02:12.340
You'll see it simply just
printing out that base server.

33
00:02:12.340 --> 00:02:14.150
It's kind of our starting point.

34
00:02:14.150 --> 00:02:16.545
Cool.
So let's start by adding a route to

35
00:02:16.545 --> 00:02:17.440
/people.

36
00:02:17.440 --> 00:02:20.120
I'm going to give you about five
minutes to build this on your own.

37
00:02:20.120 --> 00:02:22.570
So once that route exists,
we're going to navigate or

38
00:02:22.570 --> 00:02:26.010
fire off the function to
display people on the screen.

39
00:02:26.010 --> 00:02:29.250
And I'd like you to use the F print
function to have something actually

40
00:02:29.250 --> 00:02:33.040
render to the browser when
you see that /people.

41
00:02:33.040 --> 00:02:37.310
So create a route for people and

42
00:02:41.580 --> 00:02:49.850
then write a function that uses fnt.Fprint
that indicates the request was successful.

43
00:02:51.740 --> 00:02:53.940
Just take one to two minutes
to fire off those routes and

44
00:02:53.940 --> 00:02:56.280
you can use the last
exercise as an example.

