WEBVTT

1
00:00:00.030 --> 00:00:05.282
So the next thing we wanna implement
is actual functionality for

2
00:00:05.282 --> 00:00:09.670
adding a Todo, so
let's start in our main function.

3
00:00:09.670 --> 00:00:10.486
And so right now,

4
00:00:10.486 --> 00:00:13.790
we have something that handles when
the browser navigates to /todos.

5
00:00:13.790 --> 00:00:18.411
Let's add another route, HandleFunc for

6
00:00:18.411 --> 00:00:23.939
when the browser makes
a request to /add-todos.

7
00:00:23.939 --> 00:00:30.269
So when that happens I'm gonna
fire the addTodo route handler.

8
00:00:32.322 --> 00:00:36.267
And we can define that right above main,
so

9
00:00:36.267 --> 00:00:40.877
Func addTodo,
it still needs our two arguments.

10
00:00:40.877 --> 00:00:44.400
So http.ResponseWriter, and

11
00:00:44.400 --> 00:00:50.274
r which will represent our
http.Request argument.

12
00:00:54.833 --> 00:00:58.550
Cool, so the first that we wanna do,
if you think about the way your browser

13
00:00:58.550 --> 00:01:01.800
is interacting you add a Todo,
you add a title, you add content.

14
00:01:01.800 --> 00:01:04.830
You hit Submit or Send or
whatever, save, and

15
00:01:04.830 --> 00:01:09.330
then it sends that information with
the request to the addTodo list.

16
00:01:09.330 --> 00:01:14.060
So it's sending that additional
data to our http request.

17
00:01:14.060 --> 00:01:21.513
So the first thing I wanna do is
grab that request, so r.ParseForm.

18
00:01:24.771 --> 00:01:26.661
So ParseForm is gonna do
all the dirty work for us,

19
00:01:26.661 --> 00:01:29.050
of actually grabbing whatever's
coming off of that request.

20
00:01:29.050 --> 00:01:33.160
So we can actually dig into what
was just sent over the wire and

21
00:01:33.160 --> 00:01:35.390
so this guy is gonna return one thing.

22
00:01:35.390 --> 00:01:38.850
It's just gonna return an error if it
returns anything at all, and once again,

23
00:01:38.850 --> 00:01:40.450
just as a review, if you're not sure.

24
00:01:40.450 --> 00:01:44.523
I have no idea what ParseForm returns,
you can look it up, of course, but

25
00:01:44.523 --> 00:01:47.038
you could also go to
go doc http.ParseForm.

26
00:01:52.016 --> 00:01:55.420
And you'll see a lot of information
about what you can do and

27
00:01:55.420 --> 00:01:58.920
you'll see that the function signature,
it's a method.

28
00:01:58.920 --> 00:02:02.036
So we're calling it on an instance
of the request, so our r, and

29
00:02:02.036 --> 00:02:04.076
then the name of the method is ParseForm.

30
00:02:04.076 --> 00:02:06.628
And the only thing it returns,
if it returns anything, is an error.

31
00:02:09.740 --> 00:02:12.763
Cool, it parses the request
body as a form,

32
00:02:12.763 --> 00:02:16.381
puts the result into both r.PostForm and
r.Form.

33
00:02:16.381 --> 00:02:19.040
So you get a lot of information from
the documentation, which is helpful.

34
00:02:20.650 --> 00:02:24.310
Okay, so we parsed our form,
and underneath here,

35
00:02:24.310 --> 00:02:25.560
we are going to handle our errors.

36
00:02:25.560 --> 00:02:29.190
So if we did get an error back, it means
that our form wasn't parsed correctly.

37
00:02:29.190 --> 00:02:33.266
So if error does not equal nil,

38
00:02:35.805 --> 00:02:43.199
We want to send the error along,
it should be that error requires r writer.

39
00:02:43.199 --> 00:02:47.300
The error itself, the message and

40
00:02:47.300 --> 00:02:51.976
we'll stick with StatusBadRequest.

41
00:02:53.819 --> 00:02:58.825
Log.Print, Request

42
00:02:58.825 --> 00:03:04.234
parsing error and
then whatever that error was, just for

43
00:03:04.234 --> 00:03:10.224
our own edification, Cool, and
so now we wanna actually create

44
00:03:10.224 --> 00:03:14.580
a Todo based on whatever was in that
form and add it to our slice of Todos.

45
00:03:14.580 --> 00:03:19.404
So I'm gonna create a variable called todo
and set it to a new instance of our Todo

46
00:03:19.404 --> 00:03:24.741
struct And
our Todo struct has two attributes,

47
00:03:24.741 --> 00:03:30.180
it has a capital T Title and so you can
use that request and call FormValue.

48
00:03:32.770 --> 00:03:37.207
And then whatever the name of that
input element is in our HTML is

49
00:03:37.207 --> 00:03:40.234
what's gonna be in the parentheses here.

50
00:03:42.176 --> 00:03:45.400
So if we don't know, we've defined
this in our HTML, but we're not sure.

51
00:03:45.400 --> 00:03:49.618
So let's hop back over to the HTML and
double check, so in todos.html.

52
00:03:49.618 --> 00:03:54.700
You'll notice that this input type for
title has a name of lowercase t title.

53
00:03:54.700 --> 00:03:56.280
So that's what our form
is actually looking for,

54
00:03:56.280 --> 00:04:01.000
where we're gonna pull this input value
from, so we need lowercase t title.

55
00:04:01.000 --> 00:04:05.287
So back in server.go, the form value we're
looking for is lowercase t title and

56
00:04:05.287 --> 00:04:05.863
a string.

57
00:04:09.276 --> 00:04:16.845
And then the content is r.FormValue, And
just because I know that this exists,

58
00:04:16.845 --> 00:04:20.720
it is lowercase c content, so
now that we have a instance of our Todo.

59
00:04:20.720 --> 00:04:23.788
That we've created from
the form submission,

60
00:04:23.788 --> 00:04:26.016
we can modify our Todos variable.

61
00:04:26.016 --> 00:04:30.442
So we're gonna redefine Todos with that
method append that we talked about

62
00:04:30.442 --> 00:04:31.080
earlier.

63
00:04:32.980 --> 00:04:36.050
The slice we're starting with is our
initial todos which has nothing in it

64
00:04:36.050 --> 00:04:36.870
right now.

65
00:04:36.870 --> 00:04:39.166
And what we wanna append is
that todo we just created.

66
00:04:42.570 --> 00:04:46.351
Just for kicks, let's go ahead and print
out what we have for our todos, just so

67
00:04:46.351 --> 00:04:47.829
we can see what's happening.

68
00:04:51.326 --> 00:04:54.608
And then because we're not really
worrying too much about best practices,

69
00:04:54.608 --> 00:04:56.050
we're going to call a redirect.

70
00:04:57.690 --> 00:05:02.398
And redirect takes a writer,
the response and where we wanna go, so

71
00:05:02.398 --> 00:05:04.473
I wanna go back to this todos.

72
00:05:11.017 --> 00:05:14.775
We're gonna do a StatusSeeOther for now,
so basically what I'm trying to do,

73
00:05:14.775 --> 00:05:16.750
is we're appending this to our browser.

74
00:05:16.750 --> 00:05:18.016
And I just want the page refreshed, so

75
00:05:18.016 --> 00:05:20.762
we can see it right away without having to
add too much boilerplate code right now.

76
00:05:24.931 --> 00:05:29.529
So make sure your file is saved and

77
00:05:29.529 --> 00:05:32.707
restart your server.

78
00:05:32.707 --> 00:05:38.445
If we navigate over to /todos,
we have our blank form.

79
00:05:43.450 --> 00:05:47.570
Okay, so when we fired off our forum
to add a todo, we got a blank page.

80
00:05:47.570 --> 00:05:48.770
And you'll notice that at the top here,

81
00:05:48.770 --> 00:05:52.940
we're sending our form to the /add-todo,
singular.

82
00:05:52.940 --> 00:05:55.710
So circling back to the code over here,
on line 65,

83
00:05:55.710 --> 00:05:58.310
I'm trying to send it to add-todos,
plural.

84
00:05:58.310 --> 00:06:02.694
So I'm gonna fix that here and
restart my server.

85
00:06:06.003 --> 00:06:10.362
Then let's navigate back to /todos
to get our form, whoops, not home.

86
00:06:15.941 --> 00:06:19.902
Create a todo, and now we'll see that
our form redirects to /todos and

87
00:06:19.902 --> 00:06:21.429
we see the todo on the form.

88
00:06:23.370 --> 00:06:27.300
So kind of a recap,
in a pretty short amount of time,

89
00:06:27.300 --> 00:06:29.700
we've wired up a couple route
handlers we've handled.

90
00:06:31.340 --> 00:06:33.410
Defining both routes and the functions for

91
00:06:33.410 --> 00:06:37.880
what needs to be rendered onto our
page in very few lines of code.

92
00:06:37.880 --> 00:06:40.870
So this example was kind of to demonstrate
how quickly you could spin up a tiny web

93
00:06:40.870 --> 00:06:43.680
server and
kind of what you can do within it.

94
00:06:43.680 --> 00:06:46.970
A lot of it is a little contrived,
we're kind of creating our own todos,

95
00:06:46.970 --> 00:06:49.420
handling them locally,
which won't persist.

96
00:06:49.420 --> 00:06:54.000
But in terms of demonstrating how to
start interacting with a browser.

97
00:06:54.000 --> 00:06:57.140
And parsing in HTML template, that was
kind of the goal of this small code-along.

