WEBVTT

1
00:00:00.740 --> 00:00:04.000
Okay, let's work through
these solutions to 4a and 4b.

2
00:00:05.560 --> 00:00:09.722
So for 4a,
I'm going to create an exercise 4a file

3
00:00:09.722 --> 00:00:12.851
in the code directory of Section four.

4
00:00:16.632 --> 00:00:21.352
I will go ahead and set up the template.

5
00:00:34.885 --> 00:00:38.911
The first task is to create a function
called average that takes three explicit

6
00:00:38.911 --> 00:00:40.929
arguments, each of which are floats.

7
00:00:42.669 --> 00:00:51.412
So above main,
I will create, Func average.

8
00:00:51.412 --> 00:00:56.056
It's gonna take three numbers,
so I'm gonna call them num1,

9
00:00:56.056 --> 00:00:59.502
num2, and num3, all of which are integers.

10
00:00:59.502 --> 00:01:02.715
And you'll notice that the pattern
I've been using is that

11
00:01:02.715 --> 00:01:05.349
if all three of the arguments
have the same type,

12
00:01:05.349 --> 00:01:09.024
I can add that type to the end of
the internal argument parentheses.

13
00:01:09.024 --> 00:01:12.677
I don't have to explicitly say
that each of these are ints.

14
00:01:14.834 --> 00:01:20.417
So I'm gonna take those out and just
leave that int at the end of the file.

15
00:01:20.417 --> 00:01:24.838
And as I'm saying that out loud, I realize
that they are all supposed to be floats.

16
00:01:24.838 --> 00:01:28.415
So we're gonna go ahead and
change that to float64 type instead.

17
00:01:30.676 --> 00:01:34.631
And it also said that the function should
return the average of the three arguments,

18
00:01:34.631 --> 00:01:35.700
which is also a float.

19
00:01:35.700 --> 00:01:39.176
Which means that our function
signature needs to indicate that we

20
00:01:39.176 --> 00:01:42.729
are returning a float64 before
we execute any code internally.

21
00:01:44.589 --> 00:01:49.788
So for this guy,
the approach I'm gonna take is I'm

22
00:01:49.788 --> 00:01:54.869
gonna set a variable called total and
set that equal

23
00:01:54.869 --> 00:02:01.400
to the three arguments that I have here,
num1 + num2 + num3.

24
00:02:01.400 --> 00:02:10.630
And then I wanna return that total divided
by 3 to get the average, Of our numbers.

25
00:02:10.630 --> 00:02:14.190
And then in main we just need to
remember to call that function and

26
00:02:14.190 --> 00:02:15.720
pass it a few numbers.

27
00:02:15.720 --> 00:02:20.655
So let's do like, 10, 5, 7.

28
00:02:23.034 --> 00:02:24.770
And then I will wrap this in a Println,
just so

29
00:02:24.770 --> 00:02:26.199
we can see what we're getting back.

30
00:02:30.082 --> 00:02:35.100
Save the file and then in my terminal,
I'll go run a section 4

31
00:02:35.100 --> 00:02:40.133
code exercise_4a.go,
and I've got 7.333333.

32
00:02:46.790 --> 00:02:49.742
So that completes 4a,
let's switch over to 4b.

33
00:02:52.140 --> 00:02:55.480
So in 4b, we're gonna re-factor
the code to use a variadic,

34
00:02:55.480 --> 00:02:57.821
that takes an unknown number of arguments.

35
00:02:58.842 --> 00:03:02.744
So I'm just gonna stay in
my exercise 4a.go file.

36
00:03:05.750 --> 00:03:08.450
I'm going to copy this and
then comment it out.

37
00:03:08.450 --> 00:03:14.901
So when the solution gets pushed up later,
you have both examples if you want them.

38
00:03:14.901 --> 00:03:17.837
But instead of explicitly
passing in three numbers,

39
00:03:17.837 --> 00:03:20.186
I'm going to change
this to say numbers and

40
00:03:20.186 --> 00:03:25.730
then indicate that there is an unknown set
of float64 is coming into this function.

41
00:03:25.730 --> 00:03:29.170
I still wanna return that same average,
which is gonna be a float64.

42
00:03:29.170 --> 00:03:32.402
But instead of being able to explicitly
add together the three numbers,

43
00:03:34.312 --> 00:03:38.619
We are going to have to do
some stuff differently.

44
00:03:40.218 --> 00:03:45.960
So for this guy, we're gonna circle back
to our for loop with the range keyword.

45
00:03:45.960 --> 00:03:48.771
So far I know I'm not
gonna be using the index,

46
00:03:48.771 --> 00:03:52.172
I'll give it that underscore
each individual number.

47
00:03:52.172 --> 00:03:55.775
Assign that to a value of our
range keyword and the collection

48
00:03:55.775 --> 00:04:00.451
we're iterating over which is numbers,
or whatever we wanna do inside that.

49
00:04:00.451 --> 00:04:04.108
And then in here, I know I wanna
take each of those numbers and

50
00:04:04.108 --> 00:04:05.844
add it to some sort of total.

51
00:04:05.844 --> 00:04:11.562
And so up here, I'm going to set
a initial value of my total to 0.

52
00:04:14.003 --> 00:04:21.270
And then within my function here, I want
to add each number to that total variable.

53
00:04:22.670 --> 00:04:28.079
Once my collection has been iterated over,
I'm going to return total

54
00:04:28.079 --> 00:04:33.961
divided by the length of the numbers
collection that we're starting with.

55
00:04:35.233 --> 00:04:40.877
If we run the code as is,
we're gonna run into a few errors.

56
00:04:40.877 --> 00:04:45.802
And the first one we see says,
invalid operation total + equal number,

57
00:04:45.802 --> 00:04:47.912
mismatch types int and float.

58
00:04:47.912 --> 00:04:51.110
So we're looking at line
15 of our code here.

59
00:04:51.110 --> 00:04:54.595
On line 15,
we're trying to add the variable total,

60
00:04:54.595 --> 00:04:57.201
which is an int with the variable number.

61
00:04:57.201 --> 00:04:59.741
And if number,
we have a variadic function here,

62
00:04:59.741 --> 00:05:03.770
it's telling me that every number that
I'm working with here is a float64.

63
00:05:03.770 --> 00:05:05.716
But total is defined on line 13.

64
00:05:05.716 --> 00:05:07.445
And total is defined as an integer.

65
00:05:07.445 --> 00:05:10.730
Because we're doing the mathematics and
we're in go, we need to make sure that

66
00:05:10.730 --> 00:05:14.270
both of the size of the mathematical
equation are of the same type.

67
00:05:14.270 --> 00:05:16.260
So to fix that,
I can simply change this to a float.

68
00:05:16.260 --> 00:05:19.900
So go has an equal type on both sides.

69
00:05:19.900 --> 00:05:23.547
So I'll save that and
I'll rerun the program.

70
00:05:24.910 --> 00:05:26.450
It's now we're seeing a second error.

71
00:05:26.450 --> 00:05:32.306
Invalid operation total divided by len
numbers mismatch types float64 and

72
00:05:32.306 --> 00:05:36.367
int, and
now we're looking at our go code line 17.

73
00:05:36.367 --> 00:05:39.912
So on line 17 of our code,
you see that I'm dividing the total,

74
00:05:39.912 --> 00:05:43.810
which is a float with whatever
is returned from len of numbers.

75
00:05:43.810 --> 00:05:47.090
And so the len function in go
is gonna return an integer.

76
00:05:47.090 --> 00:05:51.690
So now we're once again trying to divide
a float because we modified this to be

77
00:05:51.690 --> 00:05:55.500
a float on line 13 with len numbers,
which is an integer.

78
00:05:55.500 --> 00:06:00.447
So to fix this,
we can simply use our type conversion and

79
00:06:00.447 --> 00:06:03.826
change len numbers to be a float64.

80
00:06:03.826 --> 00:06:09.862
So if I run this code, we now get back
to our 7.33333 result, which is the same

81
00:06:09.862 --> 00:06:15.396
result we had when we had implicitly
passed in our num1, num2, and num3.

