WEBVTT

1
00:00:00.000 --> 00:00:03.997
The next subject I'd like to talk a little
bit about is switch statements which will

2
00:00:03.997 --> 00:00:07.210
look really similar to what you're
used to seeing in JavaScript.

3
00:00:07.210 --> 00:00:13.954
I'm gonna hop back over to my code
editor and find the switch.go file.

4
00:00:18.500 --> 00:00:24.910
Once again, I'm going to uncomment the
whole file for now, and start at the top.

5
00:00:24.910 --> 00:00:29.610
So in our main function, there are a few
different styles of switch statements that

6
00:00:29.610 --> 00:00:33.290
mainly depend on what we're starting
with in terms of a variable.

7
00:00:33.290 --> 00:00:35.110
So our first example here,

8
00:00:35.110 --> 00:00:38.830
we have a switch expression
with the variable called city.

9
00:00:38.830 --> 00:00:41.112
And so that's looking at
a variable defined on line 9,

10
00:00:41.112 --> 00:00:43.736
we're resetting this to a string,
doesn't have a value yet but

11
00:00:43.736 --> 00:00:46.282
imagine down the road it was
assigned to something specific.

12
00:00:46.282 --> 00:00:49.768
And then our case statements
are going to check and

13
00:00:49.768 --> 00:00:54.590
see if the variable city equals one
of the case strings as an example.

14
00:00:54.590 --> 00:00:57.451
So if city equals Des Moines,
print the line you live in Iowa.

15
00:00:57.451 --> 00:01:00.125
An interesting thing about
switch statements and

16
00:01:00.125 --> 00:01:02.542
go is it does allow you
to have kind of an or, so

17
00:01:02.542 --> 00:01:06.510
if the city equals either Minneapolis or
St Paul, you live in Minnesota.

18
00:01:06.510 --> 00:01:10.090
And if the string equals Madison,
you live in Wisconsin.

19
00:01:10.090 --> 00:01:13.364
And there's a default case statement of a
if none of these match, what do you wanna

20
00:01:13.364 --> 00:01:16.607
do about it, and in this case, we print
the line, you're not from around here.

21
00:01:18.970 --> 00:01:21.769
And so the main difference that I
would like to point out just, again,

22
00:01:21.769 --> 00:01:24.000
is that ability to have kind
of like an order structure,

23
00:01:24.000 --> 00:01:26.958
like if either of these things are equal,
go ahead and execute this code.

24
00:01:34.143 --> 00:01:39.940
The second structure is missing
that original variable here.

25
00:01:39.940 --> 00:01:43.340
So you'll notice that switch doesn't
have a variable to the right of it.

26
00:01:43.340 --> 00:01:45.850
But it does have a variable that's
been defined elsewhere at the top.

27
00:01:45.850 --> 00:01:49.573
So here we're working with var
i which is set to some integer.

28
00:01:49.573 --> 00:01:52.820
And then within the case statements,
we're now looking at a conditional.

29
00:01:52.820 --> 00:01:53.830
Because we're not checking for

30
00:01:53.830 --> 00:01:57.450
strict equality between like the variable
city and the string Des Moines.

31
00:01:57.450 --> 00:02:00.881
We're now looking to see if integer
the variable i is greater than 10,

32
00:02:00.881 --> 00:02:01.678
less than 10.

33
00:02:01.678 --> 00:02:05.312
And there's that default statement in
case none of those match once again.

34
00:02:09.210 --> 00:02:13.750
And the last thing I wanna
bring up around switch

35
00:02:13.750 --> 00:02:17.960
statements has to do
with the fall through.

36
00:02:17.960 --> 00:02:22.600
And so, go will not automatically
continue through the case statements.

37
00:02:22.600 --> 00:02:25.930
Once it matches 1,
it will stop executing code.

38
00:02:25.930 --> 00:02:28.951
Unless you include this fall through line,
which is on line 40.

39
00:02:28.951 --> 00:02:32.990
So in this case,
we have our i set to a value of 9.

40
00:02:32.990 --> 00:02:36.530
And so, if we're looking at our switch
statement here, that first line on 38,

41
00:02:36.530 --> 00:02:39.600
the case i does not equal
10 would return true.

42
00:02:39.600 --> 00:02:43.403
So we'd execute the code that's on line
39, we'd print the line does not equal 10.

43
00:02:43.403 --> 00:02:46.340
But because that fall through line
is there go is gonna keep going.

44
00:02:46.340 --> 00:02:48.110
It's gonna execute that
next case statement and

45
00:02:48.110 --> 00:02:52.480
check to see if i is also less than 10,
greater than 10, and then the default.

46
00:02:52.480 --> 00:02:55.863
So it's a way to control whether or not
you want your case statement to continue

47
00:02:55.863 --> 00:02:58.544
executing code once it reaches
something that returns true.

