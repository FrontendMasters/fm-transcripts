WEBVTT

1
00:00:00.200 --> 00:00:04.936
Okay, so let's work through
the solution to exercise 9A.

2
00:00:04.936 --> 00:00:07.701
So if you're starting with the code
that exists in methods.go,

3
00:00:07.701 --> 00:00:10.330
you'll see that we have our User
struct and our Group struct.

4
00:00:11.410 --> 00:00:13.850
And then our describeUser function here.

5
00:00:13.850 --> 00:00:17.176
So to quick pop that into a method,

6
00:00:17.176 --> 00:00:22.354
I'm going to insert our User
struct as our receiver.

7
00:00:24.992 --> 00:00:26.326
Cool.

8
00:00:28.406 --> 00:00:31.675
And then I'm gonna copy
the same code from lines 20 and

9
00:00:31.675 --> 00:00:34.820
21 in our describeUser function.

10
00:00:34.820 --> 00:00:40.614
Pop it into our describe method,
which needs the method name describe.

11
00:00:43.402 --> 00:00:44.604
And then for describeGroup.

12
00:00:47.792 --> 00:00:52.330
We're going to change describeGroup to
be a method that takes a Group struct.

13
00:00:53.800 --> 00:00:55.158
And here I'm gonna use a pointer.

14
00:00:55.158 --> 00:00:56.166
And the difference here, and

15
00:00:56.166 --> 00:00:58.230
this is kind of one of the examples
I was mentioning earlier.

16
00:00:58.230 --> 00:01:01.110
Here we are wanting to modify
the actual state of that struct.

17
00:01:01.110 --> 00:01:04.630
We wanna update whether or
not the space available is true or false.

18
00:01:04.630 --> 00:01:08.380
So as a general rule, if you're gonna
be modifying that in a permanent way.

19
00:01:08.380 --> 00:01:11.190
Using a pointer value allows
you to get at that memory and

20
00:01:11.190 --> 00:01:12.490
actually change the values there.

21
00:01:12.490 --> 00:01:17.650
So I'll use a pointer for group,
and it's returning a string.

22
00:01:17.650 --> 00:01:19.384
I still want it to be called describe.

23
00:01:22.430 --> 00:01:26.281
And then I'm gonna copy the code that
lives in our describeGroup function.

24
00:01:31.252 --> 00:01:35.155
Place that into our describe method,
make sure it returns a string.

25
00:01:39.810 --> 00:01:42.487
And then I'll go ahead and comment out.

26
00:01:42.487 --> 00:01:46.946
I'm actually just gonna delete them,
delete the old functions for some,

27
00:01:46.946 --> 00:01:48.303
clean up a little bit.

28
00:01:52.141 --> 00:01:55.326
[COUGH] I was gonna delete describeUser.

29
00:01:57.361 --> 00:02:01.060
Cool, so now we have two methods that
both take their respective structs.

30
00:02:01.060 --> 00:02:02.720
One is a user, one is a group.

31
00:02:02.720 --> 00:02:05.690
And then they still just print
out that string that describes

32
00:02:05.690 --> 00:02:07.540
either of those things.

33
00:02:07.540 --> 00:02:09.500
So we'll pop down here
to our main function,

34
00:02:09.500 --> 00:02:12.350
we need to modify these two
functions which no longer work.

35
00:02:13.370 --> 00:02:19.448
So we'll say, we can PrintLine

36
00:02:19.448 --> 00:02:23.732
on group.describe.

37
00:02:23.732 --> 00:02:28.142
And user, we'll say user1.describe,
I'll spell describe correctly.

38
00:02:37.337 --> 00:02:39.002
Cool, save.

39
00:02:41.712 --> 00:02:45.370
I don't have a user1 apparently,
just a U, so never mind.

40
00:02:45.370 --> 00:02:46.866
We'll say u.subscribe.

41
00:02:46.866 --> 00:02:51.279
Then if we go run section nine in
our code directory with methods,

42
00:02:51.279 --> 00:02:56.578
you'll see that we're kinda back to
square one with just different syntax for

43
00:02:56.578 --> 00:02:58.677
making those methods happen.

44
00:03:04.488 --> 00:03:07.410
Those will also become a little bit more
apparent as we talk about interfaces.

45
00:03:07.410 --> 00:03:11.650
But you'll notice that both of these
can have the same method name describe.

46
00:03:11.650 --> 00:03:15.810
If I were to have made two functions
that were called described,

47
00:03:15.810 --> 00:03:18.360
we would have gotten an error because Go
does name space where you can only have

48
00:03:18.360 --> 00:03:21.750
one function name of
the same kind in a file.

49
00:03:21.750 --> 00:03:23.920
So describe that takes a user,

50
00:03:23.920 --> 00:03:25.980
and describe that takes
a group would have blown up.

51
00:03:25.980 --> 00:03:28.210
So methods do allow you to
have the same function name.

52
00:03:28.210 --> 00:03:31.520
And since this function or method is kind
of accomplishing the same goal of printing

53
00:03:31.520 --> 00:03:33.810
out a description of whatever you pass in.

54
00:03:33.810 --> 00:03:36.260
It's helpful and makes a lot more
sense to have the same function name.

55
00:03:36.260 --> 00:03:38.865
It does the same thing,
just depends on what's being passed in.

