WEBVTT

1
00:00:00.025 --> 00:00:03.360
We're also talking about some of the go
tooling around go commands, some of

2
00:00:03.360 --> 00:00:07.880
the toolkit that we've seen, and tools
that are either built into the language or

3
00:00:07.880 --> 00:00:10.870
that we can go get from
third party libraries.

4
00:00:10.870 --> 00:00:13.900
So the first thing I'd like to talk
about is some of the Go tools.

5
00:00:13.900 --> 00:00:17.210
This template we've seen quite
a few times, this is go run.

6
00:00:17.210 --> 00:00:19.790
And go run is the command
that's actually building and

7
00:00:19.790 --> 00:00:23.620
compiling the code behind the scenes and
letting us run it in the terminal.

8
00:00:23.620 --> 00:00:27.924
If you're to break up those commands
independently, you could use go build as

9
00:00:27.924 --> 00:00:32.165
well, which will actually just kind of
compile that into a binary that you can

10
00:00:32.165 --> 00:00:36.210
then test or deploy or do whatever you
want to, you have a little localized

11
00:00:36.210 --> 00:00:40.516
version of that and it's much easier to
get a feedback loop of what you just kind

12
00:00:40.516 --> 00:00:44.731
of put together without having to send
it to any more complex process there.

13
00:00:47.870 --> 00:00:50.180
Go install,
if you do have any third party libraries,

14
00:00:50.180 --> 00:00:52.550
will make sure that Go has
access to all of that code.

15
00:00:52.550 --> 00:00:55.214
We haven't needed to use that for
anything specific at the moment.

16
00:00:55.214 --> 00:00:58.897
But if you're inheriting a code base or
working with libraries that you haven't,

17
00:00:58.897 --> 00:01:02.528
that aren't actually shipped with the Go
source code, you would use fo install,

18
00:01:02.528 --> 00:01:05.339
kinda like NPM Install,
to make sure all those are available.

19
00:01:06.540 --> 00:01:10.636
The go fmt command we've been using
quite a bit, using the fmt library, but

20
00:01:10.636 --> 00:01:14.390
go fmt is actually a command you
can run in your terminal as well.

21
00:01:14.390 --> 00:01:16.840
So if I hop over to the code here,

22
00:01:16.840 --> 00:01:19.780
I have a built in linter that's
doing a lot of the work for me.

23
00:01:19.780 --> 00:01:26.090
But if I didn't, and I were to run, go fmt
and then a file, a particular Go file, so

24
00:01:26.090 --> 00:01:31.990
if we did exercise_4c.go, and hit enter,
it would actually print out the same kind

25
00:01:31.990 --> 00:01:35.540
of errors that we see in the linter as
they're kind of happening on the screen.

26
00:01:35.540 --> 00:01:38.610
So if we want to try a Go
format in the browser,

27
00:01:38.610 --> 00:01:40.310
my linter is kind of
doing a lot of this for

28
00:01:40.310 --> 00:01:44.920
me but go fmt is actually going to kind
of like clean up a lot of the spacing.

29
00:01:44.920 --> 00:01:47.870
So when we were in the Go playground and
you saw that tabbing was kind of out of

30
00:01:47.870 --> 00:01:50.610
line and you hit that Format button,
that's essentially what it's doing,

31
00:01:50.610 --> 00:01:52.800
it's kind of cleaning up your spacing and
tabbing.

32
00:01:52.800 --> 00:01:56.150
And similarly,
there's a command called go vet.

33
00:01:56.150 --> 00:01:59.890
And go vet, you'll notice that in this
function average, I've removed the return

34
00:01:59.890 --> 00:02:04.050
statement that gives me back that
total that our function is expecting.

35
00:02:04.050 --> 00:02:07.850
So if I run go vet, you'll see that that
error message shows up in my console here.

36
00:02:07.850 --> 00:02:10.750
So I'm seeing that just scores
are declared but not used.

37
00:02:10.750 --> 00:02:14.480
And this is helpful to have some of these
commands run like either on Save or

38
00:02:14.480 --> 00:02:17.120
on Commit and having kind of like
Commit hooks with your GitHub repose.

39
00:02:18.890 --> 00:02:21.380
Just to automate a lot of the stuff
that you don't have to think about,

40
00:02:21.380 --> 00:02:24.240
at the end of the day before you deploy,
what are the things you want to make sure

41
00:02:24.240 --> 00:02:27.780
are lined up in your Go code, and these
tools give you a lot of power around that.

42
00:02:28.820 --> 00:02:31.770
So another command we can use to kind
of list out any packages that we've

43
00:02:31.770 --> 00:02:35.370
established in our code base
is the command go list.

44
00:02:35.370 --> 00:02:38.540
And right now I am in the top
level of the directory.

45
00:02:38.540 --> 00:02:42.190
And because we're working in a code base,
that's a little bit strangely structured,

46
00:02:42.190 --> 00:02:45.680
we have a lot of packages called main and
a couple of tested files.

47
00:02:45.680 --> 00:02:48.350
I'm going to use the recursive
syntax here, go list./...,

48
00:02:48.350 --> 00:02:52.310
to just kind of iterate
through the directory and

49
00:02:52.310 --> 00:02:56.560
print out all of the packages that
might exist within this directory.

50
00:02:56.560 --> 00:02:57.660
And so you'll notice when I do that,

51
00:02:57.660 --> 00:03:02.720
I'm actually just kind of seeing a series
of file names where we have our Go files.

52
00:03:02.720 --> 00:03:05.210
And that's because
a package essentially is

53
00:03:05.210 --> 00:03:08.010
a Go file that lives
within a bigger folder.

54
00:03:08.010 --> 00:03:10.250
And so,
as we structure the next package example,

55
00:03:10.250 --> 00:03:15.260
you'll kind of have a better example for
how packages are written and organized.

56
00:03:15.260 --> 00:03:16.474
But for now, this command,

57
00:03:16.474 --> 00:03:18.901
go list is simply just like
listing kind of NPM Packages,

58
00:03:18.901 --> 00:03:22.070
like what are all the packages that
I have access to in this application?

59
00:03:22.070 --> 00:03:25.520
And then the last few that we've kind
of talked about a little bit, go doc.

60
00:03:25.520 --> 00:03:31.160
And then something like go doc fmt.Println
will spit out that local documentation and

61
00:03:31.160 --> 00:03:36.040
let you kind of dig into examples of
what a function signature looks like and

62
00:03:36.040 --> 00:03:41.610
additional details, go get is going
to be similar to an NPM install,

63
00:03:41.610 --> 00:03:43.410
it's going to go fetch
a third party package and

64
00:03:43.410 --> 00:03:46.479
then install it locally with
the rest of your Go directories.

65
00:03:48.000 --> 00:03:53.956
So the example here on the screen is it'd
be fetching a package called golint,

66
00:03:53.956 --> 00:03:58.558
which is an additional set of
linting rules that you can use,

67
00:03:58.558 --> 00:04:03.070
similar to go vet and go format,
that you can run on Commit or

68
00:04:03.070 --> 00:04:07.249
on Save, etc to make sure that
your Gk code is up to par.

69
00:04:07.249 --> 00:04:10.777
And then to actually run that,
that last command there is golint,

70
00:04:10.777 --> 00:04:13.801
because this is a third party
you don't use just the go and

71
00:04:13.801 --> 00:04:17.783
then the next command you would use go
lint and then run it in the directory.

