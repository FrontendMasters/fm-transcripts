WEBVTT

1
00:00:00.110 --> 00:00:02.702
So the first exercise that isn't
involved with installing Go,

2
00:00:02.702 --> 00:00:04.725
is going to be kind of
explore the documentation.

3
00:00:04.725 --> 00:00:09.731
So I'm gonna navigate over to Exercise
#1A, that markdown which is in the one

4
00:00:09.731 --> 00:00:15.053
setup directory, and talk to you how the
exercise files are going to be structured.

5
00:00:16.781 --> 00:00:20.589
When you're looking at the repository, all
of the directories on the left hand side

6
00:00:20.589 --> 00:00:23.323
there are going to be structured
the same as the slide deck and

7
00:00:23.323 --> 00:00:25.810
kind of what we're talking
about throughout the day.

8
00:00:25.810 --> 00:00:28.320
So the way the exercise files
are structured at the top,

9
00:00:28.320 --> 00:00:31.370
it'll be the title of what we're
trying to do for this exercise.

10
00:00:31.370 --> 00:00:34.080
The goals of what the exercise
should accomplish.

11
00:00:34.080 --> 00:00:36.060
Any setup information you
may need to know, and

12
00:00:36.060 --> 00:00:38.720
then the actual directions
to the exercise itself.

13
00:00:38.720 --> 00:00:41.410
So for this one, we're just gonna kind of
explore the documentation a little bit

14
00:00:41.410 --> 00:00:44.850
further, and
find answers to the following questions.

15
00:00:44.850 --> 00:00:47.090
The first one is about reading some for

16
00:00:47.090 --> 00:00:49.410
loop documentation in
the Effective Go document.

17
00:00:49.410 --> 00:00:52.570
And answering the question,
what kind of for loop doesn't exist in Go?

18
00:00:53.960 --> 00:00:58.060
The next is to read about the font package
and what does font print line return?

19
00:00:58.060 --> 00:01:01.593
And then third is to find a blog post
about the recent release of Go 1.13, and

20
00:01:01.593 --> 00:01:04.778
list some of the new features that
are involved with the new Go release.

21
00:01:09.741 --> 00:01:13.990
All right, so coming back together to talk
about what we found in the documentation.

22
00:01:13.990 --> 00:01:16.060
When you read about for
loops in the Effective Go document,

23
00:01:16.060 --> 00:01:17.330
what loop doesn't exist in go?

24
00:01:17.330 --> 00:01:21.273
&gt;&gt; [INAUDIBLE]
&gt;&gt; Do while.

25
00:01:21.273 --> 00:01:23.265
Yeah.
And then in a thumped package,

26
00:01:23.265 --> 00:01:25.591
what does thumped up print line return?

27
00:01:27.582 --> 00:01:30.870
&gt;&gt; It returns an integer and an error.

28
00:01:31.960 --> 00:01:33.930
&gt;&gt; An integer of what?

29
00:01:33.930 --> 00:01:37.870
&gt;&gt; Number of bytes written and
any write error encountered.

30
00:01:37.870 --> 00:01:39.120
&gt;&gt; Any write error encountered.

31
00:01:39.120 --> 00:01:41.800
And as we talk about errors and kind
of what some of these functions return,

32
00:01:41.800 --> 00:01:42.930
that's something to keep in mind.

33
00:01:42.930 --> 00:01:45.020
So for me,
if I'm thinking like console.log,

34
00:01:45.020 --> 00:01:48.370
if that were to return something,
I would expect it to return a string.

35
00:01:48.370 --> 00:01:51.120
And in this case, even though we're
printing to like standard output,

36
00:01:51.120 --> 00:01:54.110
we're not returning a string we're
returning a number of bytes and an error.

37
00:01:54.110 --> 00:01:56.599
So kinda keep that in mind as we
keep going through the workshop.

38
00:01:56.599 --> 00:01:59.561
And then when you're
looking at the blog post,

39
00:01:59.561 --> 00:02:04.716
does anyone have any comments on
exciting stuff coming out in 1.13/2.0?

40
00:02:04.716 --> 00:02:07.100
[LAUGH]
&gt;&gt; Checksum database.

41
00:02:07.100 --> 00:02:08.840
&gt;&gt; Checksum database, yeah.

42
00:02:08.840 --> 00:02:09.910
Some cool stuff around errors.

