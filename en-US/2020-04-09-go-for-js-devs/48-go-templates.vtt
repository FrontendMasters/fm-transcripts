WEBVTT

1
00:00:00.030 --> 00:00:02.148
Let's create a second route handler.

2
00:00:02.148 --> 00:00:05.463
Let's call it /todos.

3
00:00:05.463 --> 00:00:07.817
We're going to do kind of the same thing,

4
00:00:07.817 --> 00:00:11.020
build a route handler that
intercepts the route todos.

5
00:00:11.020 --> 00:00:14.110
And then in that route handler function,
just print something to console for

6
00:00:14.110 --> 00:00:16.430
now and we'll flesh that out
in just a couple of minutes.

7
00:00:16.430 --> 00:00:19.073
Okay, so
let's implement our todos endpoint,

8
00:00:19.073 --> 00:00:21.397
we're going to set up a new route handler.

9
00:00:21.397 --> 00:00:24.978
HandleFunc, sending it to our /todos/.

10
00:00:24.978 --> 00:00:30.540
And we're gonna send it to todos function.

11
00:00:30.540 --> 00:00:34.620
So up here we'll create a func todos and

12
00:00:34.620 --> 00:00:40.440
pass it our two arguments,
our writer and our request.

13
00:00:41.780 --> 00:00:43.450
But instead of printing to the console,

14
00:00:43.450 --> 00:00:46.570
we're going to use a different version
of the func print functionality.

15
00:00:46.570 --> 00:00:50.438
So we're gonna say func.fprint, and
we're gonna pass it two things.

16
00:00:50.438 --> 00:00:53.031
So this is going to print
to an external writer.

17
00:00:53.031 --> 00:00:56.778
So the first thing we need to tell it is
where we wanna print to the text to and

18
00:00:56.778 --> 00:00:58.114
then what we wanna print.

19
00:01:00.301 --> 00:01:05.975
So we'll save that make sure to
kill your server and restart it.

20
00:01:05.975 --> 00:01:08.087
And we navigate to our browser and
refresh,

21
00:01:08.087 --> 00:01:11.757
you'll see that now we're seeing that
text actually print to our browser.

22
00:01:11.757 --> 00:01:15.997
Okay, we're gonna add some
functionality in our todo function to

23
00:01:15.997 --> 00:01:20.250
actually start being able to
request get todos, add todos, etc.

24
00:01:20.250 --> 00:01:24.720
So your repository is actually set up with
a little bit of code to get us started.

25
00:01:24.720 --> 00:01:31.278
So if you hop over to the repository at
the bottom, we have a todos.html file.

26
00:01:31.278 --> 00:01:35.700
So within this file, we'll just walk
through kind of what exists so far.

27
00:01:35.700 --> 00:01:37.630
Everything lives here,
all the CSS lives here.

28
00:01:37.630 --> 00:01:39.630
We're just gonna use this for
now even though in real life,

29
00:01:39.630 --> 00:01:41.480
you'd probably have
a different structure going on.

30
00:01:41.480 --> 00:01:44.406
At the top of the HTML
file is a series of CSS so

31
00:01:44.406 --> 00:01:47.031
that things look a little more styled.

32
00:01:47.031 --> 00:01:50.451
But then the part that's interesting
is in the body of the HTML.

33
00:01:50.451 --> 00:01:54.948
So you'll notice that we have an h1,
we have a form, and

34
00:01:54.948 --> 00:02:01.062
then we have some divs that are happening
with some information within them.

35
00:02:01.062 --> 00:02:02.600
And so we're gonna ignore this for
just a second.

36
00:02:02.600 --> 00:02:06.039
We're gonna see it render in the browser
and then let's circle back and

37
00:02:06.039 --> 00:02:09.209
talk about why these variables
are here and what they're doing.

38
00:02:09.209 --> 00:02:11.761
So in our server.go file,
we're gonna modify our todos function.

39
00:02:15.962 --> 00:02:17.475
I'll kill the print line.

40
00:02:17.475 --> 00:02:23.809
And then here we're going to use
the template.parse files function.

41
00:02:23.809 --> 00:02:31.872
And we're gonna pass the file
todos.html into template.parse files.

42
00:02:31.872 --> 00:02:35.320
So notice that we're calling a method
on a library we haven't imported yet.

43
00:02:35.320 --> 00:02:38.033
So we need to scroll
up to the top here and

44
00:02:38.033 --> 00:02:41.994
make sure we're adding template
to our list of imports.

45
00:02:41.994 --> 00:02:45.587
And is html/template, not just template.

46
00:02:49.524 --> 00:02:53.272
And then template.parse files is
going to return two different things.

47
00:02:53.272 --> 00:02:57.211
It's gonna return whatever was just
parsed and an error if there is one.

48
00:02:57.211 --> 00:02:59.996
So you can define those two
variables on the left hand side and

49
00:02:59.996 --> 00:03:03.717
assign the value to whatever we get back
from our template.parse files method.

50
00:03:03.717 --> 00:03:07.971
And we're getting an error,
we're not using either the t or the err,

51
00:03:07.971 --> 00:03:09.930
so we need to add some code here.

52
00:03:09.930 --> 00:03:11.509
So underneath our parse files, and

53
00:03:11.509 --> 00:03:15.000
we're passing it that todos.html
that we just looked at.

54
00:03:15.000 --> 00:03:16.465
The first thing I wanna check
is if there's an error.

55
00:03:16.465 --> 00:03:22.410
So we'll handle our error using
the syntax we learned earlier today.

56
00:03:22.410 --> 00:03:29.672
Which is, if error does not equal nil,
let's send the error to our HTTP package.

57
00:03:29.672 --> 00:03:33.593
Where do we want to write it to?

58
00:03:33.593 --> 00:03:38.914
err.error will give us back that
error message, and then the status.

59
00:03:38.914 --> 00:03:42.685
And you'll notice that my code editor here
is giving me like a preemptive list of

60
00:03:42.685 --> 00:03:45.180
kind of different HTTP
statuses we could send back.

61
00:03:45.180 --> 00:03:49.240
For today, we're just going to kind of
hang out in the status of that request.

62
00:03:49.240 --> 00:03:53.346
But if you wanted to get really specific
about what error code you want to send

63
00:03:53.346 --> 00:03:56.309
back for this error,
you can get more specific there.

64
00:03:56.309 --> 00:03:58.763
So if there's an error,
this is what we wanna do about it.

65
00:04:02.155 --> 00:04:08.948
I'm also just going to print out template
parsing error and the error itself just so

66
00:04:08.948 --> 00:04:13.816
we can kind of see what's
happening using the log library.

67
00:04:17.199 --> 00:04:20.905
So if you go up to the top, make sure that
the log library is also in your imports.

68
00:04:20.905 --> 00:04:25.618
And then underneath our if error block,

69
00:04:25.618 --> 00:04:32.001
we're going to say reassign
the error to t.execute.

70
00:04:32.001 --> 00:04:35.871
So on line 15, we've established that
if we parse the file successfully,

71
00:04:35.871 --> 00:04:38.504
what we get back will be
assigned to that variable t.

72
00:04:38.504 --> 00:04:45.856
And so if there's no error, we wanna
execute on that variable t to the writer.

73
00:04:45.856 --> 00:04:47.306
And the second argument can be no,

74
00:04:47.306 --> 00:04:49.760
which is if we need additional
data being passed through.

75
00:04:52.691 --> 00:04:54.575
So now our todos function
is doing a few things.

76
00:04:54.575 --> 00:04:56.520
It's parsing the HTML file.

77
00:04:56.520 --> 00:04:57.249
It's handling an error.

78
00:04:57.249 --> 00:05:01.299
And assuming everything goes well,
it's writing what it gets from that HTML

79
00:05:01.299 --> 00:05:05.123
file back to our writer argument,
which is here, our response writer.

80
00:05:05.123 --> 00:05:09.501
So let's save, and
we can restart our server.

81
00:05:14.556 --> 00:05:15.846
Navigate over to our browser.

82
00:05:15.846 --> 00:05:16.969
And when I refresh,

83
00:05:16.969 --> 00:05:21.475
you'll see all of the HTML that we parsed
from that file rendered to the browser.

