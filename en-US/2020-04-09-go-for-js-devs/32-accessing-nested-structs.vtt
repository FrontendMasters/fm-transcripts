WEBVTT

1
00:00:00.050 --> 00:00:03.626
So let's take about three or four
minutes and add another function here.

2
00:00:03.626 --> 00:00:05.736
So the function is going
to be describeGroup.

3
00:00:08.984 --> 00:00:12.698
And in the describeGroup function,

4
00:00:12.698 --> 00:00:17.369
I'd like the sentence
to say something like,

5
00:00:17.369 --> 00:00:23.617
this user group has 19 users,
the newest user is Joe Smith.

6
00:00:27.621 --> 00:00:34.860
Accepting New users is true or false.

7
00:00:34.860 --> 00:00:39.280
So based on this sentence and the shape of
our group struct, create a function that's

8
00:00:39.280 --> 00:00:41.910
similar to our described user that
prints out the appropriate string.

9
00:00:41.910 --> 00:00:45.432
So to start with, let's create
a function called describeGroup,

10
00:00:45.432 --> 00:00:48.662
that takes a group struct as
an argument and returns a string.

11
00:00:52.804 --> 00:00:57.575
Within this function, we're going to
create a describe variable to return at

12
00:00:57.575 --> 00:01:02.141
the end of our function and set that
to a similar Sprintf formatted string.

13
00:01:03.350 --> 00:01:08.292
And within here, if we're building
the string that's on line 25,

14
00:01:08.292 --> 00:01:12.997
we want that to say, this user
group has x amount of users, so %d.

15
00:01:15.976 --> 00:01:21.830
The newest user is a first name, and
a last name, both of which are strings.

16
00:01:23.210 --> 00:01:27.289
And accepting new users will
be set to a boolean with %d.

17
00:01:28.800 --> 00:01:34.824
Then the three arguments that
are going to provide values for

18
00:01:34.824 --> 00:01:38.496
each of those string verbs will be g.

19
00:01:38.496 --> 00:01:42.680
The first one we're trying to calculate
here is the number of users in the group.

20
00:01:42.680 --> 00:01:44.570
And to do that,
we need to get all of the users,

21
00:01:44.570 --> 00:01:49.040
so g.users and
then find the length since it's a slice.

22
00:01:49.040 --> 00:01:51.103
So we'll call len on g.users.

23
00:01:53.388 --> 00:01:57.890
The second verb is going to be the first
and last name of the newest user.

24
00:01:57.890 --> 00:02:01.410
And so to access that,
if we look at our group struct,

25
00:02:01.410 --> 00:02:03.830
our newest user is a user type.

26
00:02:03.830 --> 00:02:07.510
And on our user type, we have a First and
Last name with capital F and L.

27
00:02:09.470 --> 00:02:13.242
So down here we're going to say,

28
00:02:13.242 --> 00:02:17.557
our g.newestUser.FirstName, and

29
00:02:17.557 --> 00:02:21.478
then g.newestUser.LastName.

30
00:02:21.478 --> 00:02:24.574
And then our last verb here
is going to be whether or

31
00:02:24.574 --> 00:02:28.707
not there's space available, so
we can say g.spaceAvailable,

32
00:02:28.707 --> 00:02:33.168
which will return true or false based
on our struct definition up here.

33
00:02:36.366 --> 00:02:39.633
So now that we have both our describeUser
and describeGroup functions ready to go,

34
00:02:39.633 --> 00:02:41.826
let's go and
print those out down in our main function,

35
00:02:41.826 --> 00:02:43.380
make sure everything looks all right.

36
00:02:45.970 --> 00:02:49.363
Additionally, because we're returning
a string and our describeGroup function,

37
00:02:49.363 --> 00:02:52.012
I forgot to make sure we return that
at the end of our function here.

38
00:02:52.012 --> 00:02:57.050
So I'm going to add return desc for
description.

39
00:03:02.351 --> 00:03:05.964
And this guy at the end
here should be person t,

40
00:03:05.964 --> 00:03:08.939
my apologies, person t for boolean.

41
00:03:11.401 --> 00:03:13.550
Cool, so
hopping back to our main function.

42
00:03:15.560 --> 00:03:17.760
Let's create an instance of our group.

43
00:03:17.760 --> 00:03:20.450
So I'm going to set the variable
g to a group struct.

44
00:03:22.961 --> 00:03:24.730
And within here we have
a few different attributes.

45
00:03:24.730 --> 00:03:27.522
The first is a role,
let's call this guy admin.

46
00:03:29.639 --> 00:03:32.926
Users is going to be a slice
of user structs, and

47
00:03:32.926 --> 00:03:38.070
then within the curly braces we can
throw in a couple initial values.

48
00:03:38.070 --> 00:03:43.810
Right now we just have one user on
line 33, let's copy this guy and

49
00:03:43.810 --> 00:03:47.350
make a second one to add to our array,
I'm gonna call it u2.

50
00:03:48.370 --> 00:03:52.961
Let's update the user ID to be 2,
and then modify some of

51
00:03:52.961 --> 00:03:58.928
the values For some mock data.

52
00:04:06.846 --> 00:04:11.886
Cool, and so within our user slice here,
I'm going to pass in u and

53
00:04:11.886 --> 00:04:15.670
u2 to instantiate our user
slice with two users.

54
00:04:16.890 --> 00:04:21.806
For our newest user attribute,
I'm just going to use the u2 variable.

55
00:04:21.806 --> 00:04:25.019
And then spaceAvailable, for
now let's set that to true.

56
00:04:29.343 --> 00:04:34.090
Cool, underneath this, I just want to
print some of these things to the console.

57
00:04:34.090 --> 00:04:35.874
So I'm going to Println.

58
00:04:37.912 --> 00:04:43.336
DescribeUser and pass it our first user,
so just that u variable.

59
00:04:43.336 --> 00:04:47.625
And then for a second one,
let's call the describeGroup function and

60
00:04:47.625 --> 00:04:48.870
pass it g for group.

61
00:04:51.486 --> 00:04:55.822
For clarity, I'm going to kill
these last two Printlns and

62
00:04:55.822 --> 00:05:00.329
then in the terminal,
let's execute the go run command, and

63
00:05:00.329 --> 00:05:04.100
navigate into section six,
code/structs.go.

64
00:05:04.100 --> 00:05:07.129
So you'll see that both of these
descriptions are now printing to

65
00:05:07.129 --> 00:05:10.833
the console, having interpolated all of
the variables the way they should be.

