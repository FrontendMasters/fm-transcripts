WEBVTT

1
00:00:00.020 --> 00:00:03.260
The next topic I'd like to
discuss is Error Handling.

2
00:00:03.260 --> 00:00:03.898
As we kind of mentioned,

3
00:00:03.898 --> 00:00:08.020
at the very beginning error handling is
one of those particularly unique functions

4
00:00:08.020 --> 00:00:11.170
within GO because GO is going
to treat every error as a value

5
00:00:11.170 --> 00:00:12.130
rather than an exception.

6
00:00:12.130 --> 00:00:15.304
And there are two kinds of errors
that we've kind of looked at so far,

7
00:00:15.304 --> 00:00:18.772
that we've seen happening in our
console and haven't talked a lot about.

8
00:00:18.772 --> 00:00:21.350
And that's an error and
something called a panic.

9
00:00:21.350 --> 00:00:24.320
An error indicates that something
bad happened to your application,

10
00:00:24.320 --> 00:00:25.700
something went wrong.

11
00:00:25.700 --> 00:00:28.420
But it might be possible to
continue running the program.

12
00:00:28.420 --> 00:00:29.090
We need to handle it.

13
00:00:29.090 --> 00:00:31.510
We need to figure out what we wanna
do about the thing that went wrong.

14
00:00:31.510 --> 00:00:35.110
For instance, a function that
intentionally returns an error that you're

15
00:00:35.110 --> 00:00:39.520
kind of waiting for like hey,
Go make this string uppercase.

16
00:00:39.520 --> 00:00:42.610
And if you happen to do something
that's not uppercase, let me know so

17
00:00:42.610 --> 00:00:45.320
I can modify that in a different way.

18
00:00:45.320 --> 00:00:48.400
Panic, on the other hand happens at
runtime and it's going to be something

19
00:00:48.400 --> 00:00:51.670
that was fatal to your program and
your program has to stop execution.

20
00:00:51.670 --> 00:00:55.700
For instance, or your user tries to open
a file that doesn't exist or you're trying

21
00:00:55.700 --> 00:00:59.080
to hit an endpoint that doesn't exist,
something that you kind of can't control

22
00:00:59.080 --> 00:01:02.600
from the code side, but that your
application needs to handle regardless.

23
00:01:04.290 --> 00:01:06.230
So let's start with the error type here.

24
00:01:06.230 --> 00:01:11.700
And the error behind the scenes
is coming from the error

25
00:01:11.700 --> 00:01:15.370
type which is an interface in Go,
which we'll talk about in a little bit.

26
00:01:15.370 --> 00:01:19.550
But you'll see at the top right hand
side here, it starts with the word type.

27
00:01:19.550 --> 00:01:23.630
It is an error type and then it's an
interface similar to like type struct or

28
00:01:23.630 --> 00:01:24.370
type string.

29
00:01:25.960 --> 00:01:28.860
And an interface, which we'll discuss
more in depth in just a little while,

30
00:01:29.910 --> 00:01:32.570
has a series of methods that
you can call on that type.

31
00:01:33.910 --> 00:01:38.570
So if we have an error type you'll
see that last line that is front

32
00:01:38.570 --> 00:01:41.060
print line and
then err which represents our error.

33
00:01:41.060 --> 00:01:43.980
And we can call .Error on

34
00:01:43.980 --> 00:01:46.340
that variable which we're gonna
look at here in the next slide.

35
00:01:47.710 --> 00:01:51.070
And in the middle we have our
err variable being defined as

36
00:01:51.070 --> 00:01:53.690
the result of whatever function that
may or may not return an error.

37
00:01:56.930 --> 00:01:59.428
So let's hop over to our
errors.go file and do some coding.

38
00:02:08.090 --> 00:02:10.110
Cool so
let's talk about this first example here.

39
00:02:10.110 --> 00:02:12.540
Our first function is greater than 10.

40
00:02:12.540 --> 00:02:16.015
And it takes a number and
it may or may not return an error.

41
00:02:16.015 --> 00:02:21.330
9 to 11 is checking to see if
that number is less than 10,

42
00:02:21.330 --> 00:02:23.210
return, let's create a new error.

43
00:02:23.210 --> 00:02:26.440
So we can use our errors
package from Go and

44
00:02:26.440 --> 00:02:28.440
instantiate a new error that
something bad happened.

45
00:02:30.040 --> 00:02:33.080
If the number is not less than 10,
we can return nil.

46
00:02:33.080 --> 00:02:37.110
So error is one of those kind of unique
types where we can return an error but

47
00:02:37.110 --> 00:02:41.320
we can also return nil which is why a lot
of our error checking begins with if error

48
00:02:41.320 --> 00:02:41.940
is not nil.

49
00:02:44.490 --> 00:02:48.000
Let's scroll down to
our main function here.

50
00:02:48.000 --> 00:02:49.890
And I just looked this up.

51
00:02:49.890 --> 00:02:52.500
We're instantiating a variable
nom which is set to 9.

52
00:02:52.500 --> 00:02:56.790
And then because r is greater than
10 potentially returns an error.

53
00:02:56.790 --> 00:03:01.021
Our variable in the left hand side is err.

54
00:03:01.021 --> 00:03:06.015
And then we're calling is greater than
10 and passing in our num, which is 9.

55
00:03:06.015 --> 00:03:08.150
The next thing we're doing
is handling that error.

56
00:03:08.150 --> 00:03:11.010
So if our error is not nil,
meaning our error or

57
00:03:11.010 --> 00:03:15.190
our function actually returns some sort of
error type we want to handle that error.

58
00:03:15.190 --> 00:03:17.896
So here I'm just going
to print to the console,

59
00:03:17.896 --> 00:03:20.062
a formatted error message that says,

60
00:03:20.062 --> 00:03:24.817
hey, the thing you did is not greater than
10 and let me know what number that was.

61
00:03:31.187 --> 00:03:36.171
So in our terminal here, we're going
to run the code that is just so

62
00:03:36.171 --> 00:03:40.982
far which is in section 8 in
the code directory and errors.go.

63
00:03:40.982 --> 00:03:43.887
So you'll notice that when
I pass in the number 9, and

64
00:03:43.887 --> 00:03:46.680
we look back up at our is
greater than 10 function.

65
00:03:46.680 --> 00:03:51.901
The number 9 is less than 10,
which means we hop into our if block and

66
00:03:51.901 --> 00:03:54.568
we return an error, errors.New.

67
00:03:58.672 --> 00:04:01.382
To demonstrate that the err
simply is just a value,

68
00:04:01.382 --> 00:04:04.850
I'm also going to print to the console,
just what is err?

69
00:04:04.850 --> 00:04:05.558
Let's just look at that.

70
00:04:09.954 --> 00:04:12.230
And so
our error is something bad happened.

71
00:04:12.230 --> 00:04:15.260
And once again, if we scroll back up
to our function here, we're saying,

72
00:04:15.260 --> 00:04:17.570
hey error's package,
create a new error, and

73
00:04:17.570 --> 00:04:19.730
the context of that error
is something bad happened.

74
00:04:19.730 --> 00:04:23.740
If we wanna get a little more extreme,

75
00:04:23.740 --> 00:04:30.280
instead of just printing out
that error we can cause a panic.

76
00:04:30.280 --> 00:04:32.320
So we can use the built
in Go function panic and

77
00:04:32.320 --> 00:04:36.600
pass panic our error, run this again.

78
00:04:36.600 --> 00:04:39.290
You'll see that now we have this
panic err something bad happen and

79
00:04:39.290 --> 00:04:41.550
it stops execution of the whole program.

80
00:04:43.040 --> 00:04:50.730
If I wanted to say like okay go ahead and
panic then also do something else.

81
00:04:52.740 --> 00:04:55.320
You're noticing that I'm already
getting that little console error and

82
00:04:55.320 --> 00:04:56.670
saying unreachable code.

83
00:04:56.670 --> 00:04:59.690
That's because like after this
function panics, you're done.

84
00:04:59.690 --> 00:05:02.210
You can't accomplish
anything else at this time.

85
00:05:02.210 --> 00:05:06.190
And so here it's a little bit contrived,
we have an error.

86
00:05:06.190 --> 00:05:10.180
But a more concrete example might be like,
hey, if you just tried to do something,

87
00:05:10.180 --> 00:05:11.605
and the user doesn't exist.

88
00:05:11.605 --> 00:05:12.853
Alert the user or

89
00:05:12.853 --> 00:05:19.310
update a different part of the database
to reflect that the user doesn't exist.

90
00:05:19.310 --> 00:05:22.440
Here we're just simply creating
a formatted error message.

91
00:05:22.440 --> 00:05:24.400
But that allows us to actually

92
00:05:26.140 --> 00:05:30.580
modify what the behavior program is
doing based on what error just occurred.

93
00:05:32.420 --> 00:05:34.024
Panic, on the other hand,
kills the program.

94
00:05:41.057 --> 00:05:45.330
And then the last thing I'd like to talk
about real quick is this log library.

95
00:05:45.330 --> 00:05:47.760
And so when we call log.fatalline,

96
00:05:47.760 --> 00:05:51.379
we're going to actually log to
wherever we're keeping track of.

97
00:05:52.610 --> 00:05:54.980
Our error logs,
what just happened in our programs.

98
00:05:54.980 --> 00:05:57.590
A lot of times you'll be sending this
somewhere else where you have your,

99
00:05:57.590 --> 00:06:01.090
logging functionality to keep track
of any user errors that as your

100
00:06:01.090 --> 00:06:02.850
application is running.

101
00:06:02.850 --> 00:06:07.910
In which case you kind of get
a different formatted version.

102
00:06:07.910 --> 00:06:09.280
It gives you the timestamp.

103
00:06:09.280 --> 00:06:12.200
A lot of times you can specify
kind of what exactly happened when

104
00:06:12.200 --> 00:06:15.300
that error happened in terms of user
interaction and stuff like that.

105
00:06:18.910 --> 00:06:22.210
Cool, so let's say we have this
is greater than 10 function and

106
00:06:22.210 --> 00:06:24.940
then the next thing we want to do
in our application is open a file.

107
00:06:27.070 --> 00:06:30.740
But our open file function, which is right
here, it's gonna to look a little similar

108
00:06:30.740 --> 00:06:33.850
to r is greater than 10 where
the only thing is going to return,

109
00:06:33.850 --> 00:06:35.839
if it returns anything, is an error type.

110
00:06:37.920 --> 00:06:41.240
And so here I'm introducing the OS
package and OS is for operating system.

111
00:06:41.240 --> 00:06:44.437
It handles things like opening files,
saving files, etc.

112
00:06:44.437 --> 00:06:49.720
And so here are OS.open is gonna
return two different things.

113
00:06:49.720 --> 00:06:51.770
And if we wanna review
kind of what that means,

114
00:06:51.770 --> 00:06:57.090
if you've never looked at the OS.open
function before we can use Go doc

115
00:06:58.120 --> 00:07:02.710
and check hey, what does OS.open do?

116
00:07:02.710 --> 00:07:05.340
So in open here It takes
a name which is a string,

117
00:07:05.340 --> 00:07:10.960
it's going to return two things either
a pointer to a file and an error.

118
00:07:13.490 --> 00:07:16.880
If it's successful methods on the return
file can be used for reading.

119
00:07:16.880 --> 00:07:18.229
If not, there will be an error.

120
00:07:20.510 --> 00:07:23.210
Which means we need to create two
variables on the left hand side

121
00:07:23.210 --> 00:07:26.720
to handle the two different return values
we could get from our .open method.

122
00:07:26.720 --> 00:07:32.580
And then we wanna say, hey,
if the error is nil, return the error.

123
00:07:32.580 --> 00:07:33.650
Otherwise we return nil.

124
00:07:33.650 --> 00:07:37.730
The other thing you'll notice
is this differ function

125
00:07:37.730 --> 00:07:42.300
that we're gonna talk about shortly and
you'll see that we're calling F.Close.

126
00:07:42.300 --> 00:07:46.940
So we have our open, and now we have our
F.Close, assuming F returns something

127
00:07:46.940 --> 00:07:50.250
valuable, we could then close that file,
do something else with it.

128
00:07:50.250 --> 00:07:52.410
And this defer function will come
into play in just a little bit.

129
00:07:55.220 --> 00:07:58.220
But for right now, keep an eye on the fact
that this function returns an error if

130
00:07:58.220 --> 00:08:00.030
it's going to return anything at all.

131
00:08:00.030 --> 00:08:02.152
From our open files,
let's hop back down to main.

132
00:08:05.810 --> 00:08:06.768
And uncomment this guy.

133
00:08:11.128 --> 00:08:13.030
Cool so we're saying okay, cool.

134
00:08:13.030 --> 00:08:16.530
So we've got this error up here for
if is greater than 10 returns an error.

135
00:08:16.530 --> 00:08:19.330
We have an error down here for
if open file returns an error.

136
00:08:19.330 --> 00:08:21.200
But we're getting a linting error.

137
00:08:21.200 --> 00:08:25.240
Also, if we hover over this, we're seeing
that there are no new variables on

138
00:08:25.240 --> 00:08:28.260
the left side of colon equal sign.

139
00:08:28.260 --> 00:08:32.020
So here's one of those situations where
like, we do want to handle two very

140
00:08:32.020 --> 00:08:36.090
specific errors in two different ways
that both happen in this main function.

141
00:08:36.090 --> 00:08:38.840
But we can't have the same
variable err on both sides.

142
00:08:40.420 --> 00:08:41.750
A couple different things we could do.

143
00:08:41.750 --> 00:08:47.915
We could change the variable name,
we could call this,

144
00:08:47.915 --> 00:08:52.646
some other error and then check that here.

145
00:08:57.932 --> 00:09:02.010
But conventionally, recall that the if
block kinda contains its own scope.

146
00:09:02.010 --> 00:09:03.010
So we can refactor this and

147
00:09:03.010 --> 00:09:06.230
clean it up a little bit to continue
to use the conventional err

148
00:09:06.230 --> 00:09:09.600
without having to refactor, or
sorry, rename the variable down here.

149
00:09:11.540 --> 00:09:13.030
So let's do that on this guy.

150
00:09:13.030 --> 00:09:17.620
I'm gonna bring us back to our
just print line error here.

151
00:09:17.620 --> 00:09:22.710
And so,

152
00:09:22.710 --> 00:09:26.236
recall that with the if block
the first thing we can do is set

153
00:09:26.236 --> 00:09:31.190
an actual variable semicolon.

154
00:09:31.190 --> 00:09:37.090
And then what does that function or
variable actually result in.

155
00:09:37.090 --> 00:09:39.260
And we did this earlier when we were
talking about maps where if you're

156
00:09:39.260 --> 00:09:41.450
going to look up a key in a map and
it returns nothing,

157
00:09:41.450 --> 00:09:44.190
you can check to see if that okay
variable returns true or false.

158
00:09:44.190 --> 00:09:45.600
So it's going to be
a similar structure to that.

159
00:09:46.630 --> 00:09:49.760
So I'm going to comment out this guy and
pop it into our if block.

160
00:09:49.760 --> 00:09:52.290
So I'm going to say if error,

161
00:09:52.290 --> 00:09:55.280
which we're assigning to
a value of is greater than 10.

162
00:09:55.280 --> 00:10:04.380
And passing it number semicolon,
grab that variable, check the conditional.

163
00:10:04.380 --> 00:10:07.095
If it returns true,
fire off what's in this if block.

164
00:10:13.691 --> 00:10:16.964
So at this point, we now no longer
have access to our error outside

165
00:10:16.964 --> 00:10:19.120
of our if block,
which is the beauty of it.

166
00:10:19.120 --> 00:10:23.390
So now it's kind of scoped to within this
specific case of us handling the error

167
00:10:23.390 --> 00:10:25.890
based on what comes back from
our is greater than 10 function.

168
00:10:27.220 --> 00:10:28.468
So because we're handling it here,

169
00:10:28.468 --> 00:10:30.937
I don't really need to just print it
out to the console, I can kill that.

170
00:10:33.233 --> 00:10:34.930
And then we can do
the same thing down here.

171
00:10:34.930 --> 00:10:36.600
So we can say, if err.

172
00:10:36.600 --> 00:10:41.940
And set that equal to our
openFile function, semicolon,

173
00:10:41.940 --> 00:10:43.150
change this back to err.

174
00:10:43.150 --> 00:10:46.114
And I can kill this line as well.

175
00:10:48.222 --> 00:10:50.020
We'll change this back to err.

176
00:10:55.566 --> 00:10:56.650
And clean up the comments.

177
00:10:58.680 --> 00:11:02.421
So from what became probably
twice as many lines of code.

178
00:11:02.421 --> 00:11:04.998
Essentially what we're doing
is we're wrapping each of

179
00:11:04.998 --> 00:11:08.863
these pieces of functionality that have to
do with our application into two different

180
00:11:08.863 --> 00:11:11.130
blocks that are scoped
within our if statements.

181
00:11:11.130 --> 00:11:14.930
And this allows us to both execute
code and if it goes great cool if not,

182
00:11:14.930 --> 00:11:17.900
we have two different cases where
we're handling that error in a more

183
00:11:17.900 --> 00:11:20.730
encapsulated way to use more
conventional idiomatic GO.

