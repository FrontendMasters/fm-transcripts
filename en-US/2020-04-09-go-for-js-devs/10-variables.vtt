WEBVTT

1
00:00:00.240 --> 00:00:03.360
Variables in Go can be
defined a few different ways.

2
00:00:03.360 --> 00:00:07.900
I'm gonna start working most of
the code examples in a actual Go file.

3
00:00:07.900 --> 00:00:10.270
I think the syntax highlighting
is a little bit more helpful.

4
00:00:10.270 --> 00:00:13.308
Feel free to stay in the playground
if that's where you find happiness.

5
00:00:15.169 --> 00:00:18.610
So let's talk about how
variables are defined.

6
00:00:18.610 --> 00:00:21.350
I'm in the third directory
called basic syntax.

7
00:00:21.350 --> 00:00:23.650
And we're looking at
the variables.go file.

8
00:00:23.650 --> 00:00:26.860
And so for right now, the only thing in
here is my fem to print line variables

9
00:00:26.860 --> 00:00:31.870
line to get going.

10
00:00:31.870 --> 00:00:33.070
But the first thing I wanna do is,

11
00:00:33.070 --> 00:00:38.020
I wanted to find a variable that kind of
the same way we saw it in the types slide.

12
00:00:38.020 --> 00:00:40.450
And so to do that,
we're using the keyword var,

13
00:00:40.450 --> 00:00:44.790
whatever we want the name of our variable
to be the type we know it will be forever,

14
00:00:44.790 --> 00:00:47.660
and then whatever we want
to assign that value to.

15
00:00:49.660 --> 00:00:56.124
And then if I go ahead and
Println(name), I'll hop

16
00:00:56.124 --> 00:01:01.604
down to my terminal here and then I go
run, we're in package 03_basic_syntax,

17
00:01:04.613 --> 00:01:07.274
Code, and then variables.go.

18
00:01:07.274 --> 00:01:08.820
Make sure you save your file.

19
00:01:08.820 --> 00:01:11.835
And then you'll see that
Beyonce prints to the console.

20
00:01:13.209 --> 00:01:15.930
Go does have inference though.

21
00:01:15.930 --> 00:01:16.960
And so right now,

22
00:01:16.960 --> 00:01:20.290
you can see that the value on
the right-hand side is actually a string.

23
00:01:20.290 --> 00:01:23.470
So I can kill this here and Go will
know to look to the right-hand side and

24
00:01:23.470 --> 00:01:25.470
be like,
is this an easily identifiable type?

25
00:01:25.470 --> 00:01:28.140
If so, you can leave out
the actual type definition.

26
00:01:28.140 --> 00:01:31.030
So if I save this and rerun the program,
you'll still see Beyonce.

27
00:01:31.030 --> 00:01:31.920
There are no errors.

28
00:01:31.920 --> 00:01:32.420
Everyone is happy.

29
00:01:36.748 --> 00:01:41.247
A third kinda type of variable declaration
I'd like to discuss is without

30
00:01:41.247 --> 00:01:42.341
an actual value.

31
00:01:44.780 --> 00:01:48.160
So in this case, this is kind of
similar to using that in JavaScript.

32
00:01:48.160 --> 00:01:50.480
So I'm saying that, hey,
I want to carve out space for a variable.

33
00:01:50.480 --> 00:01:52.530
I know my variable is going
to be a string down the road.

34
00:01:52.530 --> 00:01:55.460
Not sure what that is yet, but just kind
of hang on to it so I can use it later.

35
00:01:57.170 --> 00:02:00.765
In this case, because there is nothing on
the right-hand side of that assignment

36
00:02:00.765 --> 00:02:04.098
operator, the equal sign, we do have
to specify the type names that Go knows

37
00:02:04.098 --> 00:02:07.200
what kind of type it's going to
allocate that space for down the road.

38
00:02:09.402 --> 00:02:14.241
Cool, so if I save this and now ask
what name is, you're gonna see nothing.

39
00:02:14.241 --> 00:02:16.750
You're gonna see this
like blank space here.

40
00:02:16.750 --> 00:02:21.590
And behind the scenes, Go actually assigns
default values to any variable that's been

41
00:02:21.590 --> 00:02:22.900
instantiated without a value.

42
00:02:22.900 --> 00:02:28.725
So if I say, someNumber is going to be
an int, and I print some number here,

43
00:02:37.643 --> 00:02:39.800
We get a really helpful error.

44
00:02:39.800 --> 00:02:41.190
Name is declared and not used.

45
00:02:41.190 --> 00:02:43.730
So this is part of why Go
is both super helpful and

46
00:02:43.730 --> 00:02:47.300
also can be a little bit more
type A compared to JavaScript.

47
00:02:47.300 --> 00:02:49.710
So right now, we have this
variable that we haven't used yet.

48
00:02:49.710 --> 00:02:50.910
I might want to use down the road but

49
00:02:50.910 --> 00:02:54.510
Go won't let me keep that code in there
if I'm not going to use it immediately.

50
00:02:54.510 --> 00:02:55.460
So options are to delete it.

51
00:02:55.460 --> 00:02:56.690
I'm gonna comment it out for now.

52
00:02:58.510 --> 00:03:00.280
And then when I run this code again,

53
00:03:00.280 --> 00:03:03.550
my some number variable which
is assigned to an integer but

54
00:03:03.550 --> 00:03:06.940
has no value is automatically
assigned a default value of zero.

55
00:03:06.940 --> 00:03:09.466
And this is also goes way of
kind of allocating memory.

56
00:03:09.466 --> 00:03:10.810
If you know it's going to be an integer,

57
00:03:10.810 --> 00:03:12.930
I'm going to put a placeholder
in there for you.

58
00:03:12.930 --> 00:03:15.724
Integer values get zero,
strings get an empty string,

59
00:03:15.724 --> 00:03:18.407
Boolean is get false, and
floats get kind of 0.0.

60
00:03:18.407 --> 00:03:21.296
So as we kinda work through stuff,
if you're just holding a placeholder with

61
00:03:21.296 --> 00:03:23.975
a variable, it'll always have that
default value behind the scenes.

62
00:03:29.301 --> 00:03:31.908
Additionally with this var syntax,

63
00:03:31.908 --> 00:03:37.750
this type of variable declaration can
also happen outside of a function.

64
00:03:37.750 --> 00:03:41.479
So here if I want my var
name to go back to Beyonce,

65
00:03:45.774 --> 00:03:50.604
I can still access that within my program.

66
00:03:55.668 --> 00:03:59.878
Similarly to JavaScript, if I want to
assign multiple variables at the same

67
00:03:59.878 --> 00:04:04.614
time, I can have two variable names on the
left-hand side of the assignment operator

68
00:04:04.614 --> 00:04:07.874
here, and a comma separated
list of whoever on the right.

69
00:04:10.919 --> 00:04:12.559
And if I wanted to print both.

70
00:04:18.270 --> 00:04:22.230
You'll see that both of those names
are saved as variables and printed out.

71
00:04:22.230 --> 00:04:25.150
And then the fifth type here is
gonna be the most common, and

72
00:04:25.150 --> 00:04:26.810
it is a short hand syntax.

73
00:04:26.810 --> 00:04:29.969
And to do that, we're going to be back
in our function main, this can't happen

74
00:04:29.969 --> 00:04:32.910
outside of functions, so it has to be
within some sort of function block.

75
00:04:36.836 --> 00:04:38.220
[COUGH] And
it's gonna look something like this.

76
00:04:38.220 --> 00:04:41.180
So we can drop that variable keyword,
the var, and

77
00:04:41.180 --> 00:04:45.200
we can drop the type name assuming that
it has a value on the right-hand side.

78
00:04:45.200 --> 00:04:48.930
And a colon,
equal sign both assigns the variable,

79
00:04:48.930 --> 00:04:53.050
associates it with a type without
needing a lot of the extra boilerplate.

80
00:04:53.050 --> 00:04:56.838
So you'll see this most of
the time throughout the day.

