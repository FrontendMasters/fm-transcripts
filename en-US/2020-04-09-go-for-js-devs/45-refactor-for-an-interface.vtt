WEBVTT

1
00:00:02.341 --> 00:00:04.262
Cool, so let's hop over to INTERFACES.GO,

2
00:00:04.262 --> 00:00:06.570
we'll kinda implement some
of this in real time.

3
00:00:06.570 --> 00:00:10.612
So right now, we're kinda starting from
a copy of the code that should look pretty

4
00:00:10.612 --> 00:00:12.673
similar to what you finished in methods.

5
00:00:12.673 --> 00:00:15.489
You're welcome to also start from that
file since you're familiar with it,

6
00:00:15.489 --> 00:00:16.456
whatever you'd prefer.

7
00:00:16.456 --> 00:00:18.600
I'm gonna be working in interfaces.go for
right now.

8
00:00:19.730 --> 00:00:23.582
And what we're trying to do here is we
want to add that describer interface, and

9
00:00:23.582 --> 00:00:26.971
then create a method where we can pass
in any of the structs that satisfy

10
00:00:26.971 --> 00:00:30.800
the describer interface, and
then call describe on them.

11
00:00:30.800 --> 00:00:34.910
So we have our two structs here,
both of which you can call describe on.

12
00:00:36.460 --> 00:00:38.210
And then in our main function,

13
00:00:38.210 --> 00:00:40.210
we are simply calling
the describe methods in them.

14
00:00:40.210 --> 00:00:42.310
So similar code that we've been
working with for a little while here.

15
00:00:43.800 --> 00:00:47.671
Cool, so let's start at the top and
let's add our describer interface.

16
00:00:49.830 --> 00:00:52.478
Additional to side note,
the convention for

17
00:00:52.478 --> 00:00:57.020
interfaces is to name them with
whatever job that the interface does.

18
00:00:57.020 --> 00:01:03.130
So right now,
just type describer interface.

19
00:01:03.130 --> 00:01:07.898
It describes, so it is a describer that
can get a little funky if your methods

20
00:01:07.898 --> 00:01:11.250
don't make an Ending to
a word sound very good, but

21
00:01:11.250 --> 00:01:14.254
it is kind of the accepted
pattern if possible.

22
00:01:16.582 --> 00:01:17.184
Describe.

23
00:01:21.059 --> 00:01:22.602
So we've now established that.

24
00:01:25.530 --> 00:01:29.824
Any struct that has a method called
describe is also of type describer.

25
00:01:43.760 --> 00:01:45.758
Add a comment or go into his happy.

26
00:01:49.492 --> 00:01:50.763
We can kinda scroll down.

27
00:01:53.359 --> 00:01:55.888
And kinda lump these two guys together.

28
00:01:55.888 --> 00:01:58.838
So let's create a function that
doesn't care what type is passed in,

29
00:01:58.838 --> 00:02:00.794
as long as that type
satisfies our interface.

30
00:02:00.794 --> 00:02:02.158
So we can say func.

31
00:02:06.093 --> 00:02:08.200
I think I call it do the describing.

32
00:02:10.210 --> 00:02:14.663
It's gonna take some type, we're not quite
sure what, we haven't specified user or

33
00:02:14.663 --> 00:02:17.896
group, but we do know it has to
be of interface type describer.

34
00:02:23.375 --> 00:02:26.181
And because all of our describe
methods do return a string,

35
00:02:26.181 --> 00:02:29.620
we'll make sure that our function to
describing also returns a string.

36
00:02:31.440 --> 00:02:34.470
I'm making a capital cuz I'd assume
that if I am using this elsewhere,

37
00:02:34.470 --> 00:02:35.420
I'm describing lots of stuff.

38
00:02:35.420 --> 00:02:36.580
I want this to be exportable.

39
00:02:36.580 --> 00:02:39.091
I want it to be visible in other packages.

40
00:02:39.091 --> 00:02:42.372
So let's do the describing,

41
00:02:42.372 --> 00:02:46.973
describes whatever struct is passed in.

42
00:02:50.073 --> 00:02:54.437
And then within our function here,
I'm going to say, hey, let's return

43
00:02:54.437 --> 00:02:59.370
d.describe since whatever struct is passed
in is part of our interface describer.

44
00:02:59.370 --> 00:03:01.041
I know it must have this method, and

45
00:03:01.041 --> 00:03:04.340
that's what I'm trying to accomplish
within this function, cool.

46
00:03:06.264 --> 00:03:08.907
And then data in our main function.

47
00:03:08.907 --> 00:03:13.402
We can say our naming right now,
because we have so

48
00:03:13.402 --> 00:03:18.443
many examples is getting a little fun but
that's okay.

49
00:03:18.443 --> 00:03:24.894
So user description, with interface, I
know it's very long but just for clarity.

50
00:03:24.894 --> 00:03:28.902
It's going to be do the describing,

51
00:03:28.902 --> 00:03:32.930
that's going to take a user, cool.

52
00:03:32.930 --> 00:03:36.430
And then we're gonna do
the same thing with our group.

53
00:03:36.430 --> 00:03:42.128
Group description with interface is going
to be you do the describing function,

54
00:03:42.128 --> 00:03:44.407
and it's going to take a group.

55
00:03:48.628 --> 00:03:51.630
So you'll see we're getting some
errors around what we're passing in.

56
00:03:51.630 --> 00:03:54.391
And the error that I'm seeing
is that we have describe,

57
00:03:54.391 --> 00:03:58.506
we have some sort of describe function in
an interface that's returning a string,

58
00:03:58.506 --> 00:04:02.069
but we're not returning a string in
our actual interface definition.

59
00:04:02.069 --> 00:04:03.550
So we just go up to the top here.

60
00:04:03.550 --> 00:04:06.480
We're saying that hey, this describe
method exists on our interface,

61
00:04:06.480 --> 00:04:10.380
but we still have to say that at
the end of the day it returns a string.

62
00:04:10.380 --> 00:04:14.504
Just add that additional piece of
information into our interface definition.

63
00:04:21.827 --> 00:04:26.081
Cool, the next error we're getting is,
I've kind of been flipping between using

64
00:04:26.081 --> 00:04:29.645
either a pointer or non-pointer
as a struct type or passing in.

65
00:04:29.645 --> 00:04:33.825
So you'll notice that if we go up to both
of our methods in this particular file,

66
00:04:33.825 --> 00:04:36.919
I am passing in a pointer type for
our user and our group.

67
00:04:38.440 --> 00:04:42.430
So that's what's gonna happen in this
file, you know that we need to pass in

68
00:04:42.430 --> 00:04:48.870
the actual address, the ampersand A4
address version of our variables here.

69
00:04:48.870 --> 00:04:50.508
So if we add our at here.

70
00:04:53.657 --> 00:04:54.383
We.

71
00:04:57.757 --> 00:04:59.940
Have a bunch of variables that
we're not actually referencing.

72
00:04:59.940 --> 00:05:01.177
So we're going to just print line.

73
00:05:10.868 --> 00:05:12.109
Save it and then run it.

74
00:05:15.194 --> 00:05:16.535
Kill these guys.

75
00:05:19.247 --> 00:05:23.721
And we're also gonna kill these guys since
we are now accomplishing the same job just

76
00:05:23.721 --> 00:05:26.936
with our do the describing
method that takes the interface,

77
00:05:26.936 --> 00:05:29.350
rather than to individual
calls to methods.

78
00:05:31.110 --> 00:05:34.150
So again, kind of contrived based
on the examples we have here.

79
00:05:34.150 --> 00:05:39.140
But if you can imagine large services
that set up as three buckets or

80
00:05:39.140 --> 00:05:43.230
other more complex interactions
with large code bases,

81
00:05:43.230 --> 00:05:47.180
having a single function,
be less specific about what it takes in,

82
00:05:47.180 --> 00:05:52.480
as long as all of these other rules that
live in some other file are established.

83
00:05:52.480 --> 00:05:54.940
It reduces a lot of
duplication within your code.

84
00:05:54.940 --> 00:05:59.500
It also encapsulates kind of all of his
behavior, and all of the attributes, and

85
00:05:59.500 --> 00:06:04.209
in a more object oriented way, which makes
everything a little bit more readable.

