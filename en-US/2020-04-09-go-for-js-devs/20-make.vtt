WEBVTT

1
00:00:00.120 --> 00:00:02.050
So needing to know the exact
length of an array and

2
00:00:02.050 --> 00:00:04.930
everything that's in it every time
that you instantiate one that seems

3
00:00:04.930 --> 00:00:08.970
problematic, which is what brings us to
the slice, and the slice is gonna feel

4
00:00:08.970 --> 00:00:11.980
a little bit more familiar to JavaScript
in terms of how we implement it.

5
00:00:11.980 --> 00:00:14.640
But there are some really interesting
things happening behind the scenes.

6
00:00:15.690 --> 00:00:19.516
So a slice essentially is
a segment of an underlying array.

7
00:00:19.516 --> 00:00:22.400
So what's happening is go is actually
allocating some memory for us, and

8
00:00:22.400 --> 00:00:26.198
then it's telling us okay, I've carved out
this much space for you behind the scenes.

9
00:00:26.198 --> 00:00:28.132
I know you're only using this section, but

10
00:00:28.132 --> 00:00:30.338
I still need to put it
somewhere in your computer.

11
00:00:30.338 --> 00:00:33.650
And so it stores it as if it's in array,
it just doesn't tell you about that part.

12
00:00:33.650 --> 00:00:35.540
So we're gonna look at
what that looks like.

13
00:00:35.540 --> 00:00:39.682
And then there's a built-in function
called make that's crucial to actually

14
00:00:39.682 --> 00:00:43.740
instantiating a slice so that it knows
two carve up memory in the first place.

15
00:00:43.740 --> 00:00:49.290
So the make function that we'll talk about
first according to the docs that actually

16
00:00:49.290 --> 00:00:53.560
says it initializes and allocates space
and memory for a slice, map, or channel.

17
00:00:53.560 --> 00:00:56.100
And this is important [be]cause
it doesn't include an array and

18
00:00:56.100 --> 00:00:58.990
it's because it needs to know how
much space it needs to allocate, and

19
00:00:58.990 --> 00:01:02.760
since we're not specifying a length
it doesn't know what to do here.

20
00:01:02.760 --> 00:01:06.417
So let's hop over to slices.go and talk a
little bit more about what makes does and

21
00:01:06.417 --> 00:01:07.796
how to instantiate the slice.

22
00:01:19.771 --> 00:01:22.806
Okay, so in our first example here
we have our main function and

23
00:01:22.806 --> 00:01:26.260
at the top I have two different
variables that have been instantiated.

24
00:01:26.260 --> 00:01:31.690
One is called myArray and a set two and
a five element array of integers.

25
00:01:31.690 --> 00:01:33.590
And on line eight,
we've got a mySlice, and

26
00:01:33.590 --> 00:01:36.410
the only difference between the two and
we're instantiating them is that

27
00:01:36.410 --> 00:01:38.710
the second which is a slice
doesn't have that length in there.

28
00:01:40.600 --> 00:01:42.070
Cool.
So if I run this code as is,

29
00:01:42.070 --> 00:01:45.490
you'll notice on 10 and 11,
I'm trying to establish that the zero with

30
00:01:45.490 --> 00:01:49.470
element of each of those things has
a value of one, and then line 13 and 14.

31
00:01:49.470 --> 00:01:51.580
I'm just printing out
what those values are.

32
00:01:51.580 --> 00:01:59.930
So if I run the code as is we are in
section four code, and then slices.

33
00:01:59.930 --> 00:02:00.710
You'll see I get an error.

34
00:02:00.710 --> 00:02:05.525
And the error says that there's
an index out of range zero

35
00:02:05.525 --> 00:02:10.156
with length zero and
this is happening on go line 11.

36
00:02:10.156 --> 00:02:11.830
And so here's where make comes in.

37
00:02:11.830 --> 00:02:15.390
So my array knows that hey,
go carve out five

38
00:02:15.390 --> 00:02:20.070
sections of memory to store integers in,
and so if we were to run.

39
00:02:21.410 --> 00:02:23.030
My array everything would work fine.

40
00:02:23.030 --> 00:02:26.650
But because we don't have a length here go
doesn't know how much space to allocate.

41
00:02:26.650 --> 00:02:27.430
So in order to fix that,

42
00:02:27.430 --> 00:02:30.820
we have to use the built in
method make an Intel go, okay,

43
00:02:30.820 --> 00:02:35.500
you might change this later, but how much
memory do you want to allocate right away?

44
00:02:35.500 --> 00:02:37.690
So to do that.

45
00:02:37.690 --> 00:02:41.800
I'm just gonna modify this
first example here two on

46
00:02:41.800 --> 00:02:44.840
the left hand side assign
it to an initial value.

47
00:02:44.840 --> 00:02:47.910
An initial value is gonna start
with a make built in function.

48
00:02:47.910 --> 00:02:51.060
We know we want it to be
an array of integers and

49
00:02:51.060 --> 00:02:52.570
we want an initial length to be five.

50
00:02:55.990 --> 00:02:57.100
We run our program again.

51
00:02:58.670 --> 00:03:00.300
You'll see that the two
print out just fine,

52
00:03:00.300 --> 00:03:03.440
that both of them have now allocated that
first element to have a value of one.

53
00:03:04.930 --> 00:03:07.450
The arguments on the right hand side,
it can go up to three.

54
00:03:07.450 --> 00:03:10.880
So, our first set here is that
we're instantiating a slice and

55
00:03:10.880 --> 00:03:13.660
it has an integer as its set of types.

56
00:03:13.660 --> 00:03:16.830
The second argument is
the initial length of that array.

57
00:03:16.830 --> 00:03:18.670
And it does take
an optional third argument.

58
00:03:18.670 --> 00:03:21.280
That's the maximum capacity
that that array can hold.

59
00:03:23.370 --> 00:03:27.687
So if I just print the program as is.

60
00:03:31.322 --> 00:03:32.970
Let's see.

61
00:03:32.970 --> 00:03:34.430
You'll see that right now our slice,

62
00:03:34.430 --> 00:03:40.800
that second output printed there
still has only five elements.

63
00:03:40.800 --> 00:03:46.860
But similarly to how we used len to
find out the length of something.

64
00:03:46.860 --> 00:03:50.458
So if I say len of my slice,

65
00:03:50.458 --> 00:03:54.718
you'll see that number five.

66
00:03:57.930 --> 00:04:03.223
But I can also use a built in verb,
cap for capacity, to ask my slice,

67
00:04:03.223 --> 00:04:09.174
okay, you're five elements long now,
but how long can you be in the future?

68
00:04:16.221 --> 00:04:17.460
You'll see that prints out 10.

69
00:04:17.460 --> 00:04:20.420
&gt;&gt; Why is an array is not 10?

70
00:04:20.420 --> 00:04:23.180
Is that-
&gt;&gt; On line 8?

71
00:04:23.180 --> 00:04:28.250
&gt;&gt; Yeah, in terms of capacity,
why is it 10?

72
00:04:28.250 --> 00:04:29.960
&gt;&gt; The initial amount,

73
00:04:29.960 --> 00:04:35.750
let's say you know you're going to be
modifying the array in the near future.

74
00:04:35.750 --> 00:04:39.583
I believe my understanding is that it
optimizes how much space is available for

75
00:04:39.583 --> 00:04:41.500
immediate modification of the array,

76
00:04:41.500 --> 00:04:44.810
we'll see a little bit later that
we can use functions like append,

77
00:04:44.810 --> 00:04:48.525
which will tack on extra memory, so
let's say you have a capacity of 10 and

78
00:04:48.525 --> 00:04:52.182
you have 12 elements, it will allocate
more memory when it needs to, but

79
00:04:52.182 --> 00:04:55.721
I think it's just a way to be like,
hey, this is carved out ready to go for

80
00:04:55.721 --> 00:04:58.673
you without having to re
establish that behind the scenes.

81
00:04:58.673 --> 00:05:01.718
&gt;&gt; You mean my slice right?

82
00:05:01.718 --> 00:05:04.262
&gt;&gt; I mean slice?

83
00:05:04.262 --> 00:05:06.780
So all slices are arrays
behind the scenes.

84
00:05:06.780 --> 00:05:07.280
&gt;&gt; Yeah.

85
00:05:11.820 --> 00:05:16.523
&gt;&gt; But right now,
this particular slice is only

86
00:05:16.523 --> 00:05:21.980
pointing to a subset of
a longer a behind the scenes.

87
00:05:21.980 --> 00:05:24.578
I've really great slide for
this in just a moment [LAUGH].

88
00:05:24.578 --> 00:05:28.785
&gt;&gt; So if you did the cap on
the my array with just get five.

89
00:05:28.785 --> 00:05:29.954
&gt;&gt; Let's check it out.

90
00:05:29.954 --> 00:05:37.677
[SOUND]

91
00:05:42.863 --> 00:05:43.950
Cool.

92
00:05:43.950 --> 00:05:49.872
So let's look at establishing arrays and
slices a little bit differently.

93
00:05:49.872 --> 00:05:53.608
I'm gonna wipe out kind
of the code we have here.

94
00:05:53.608 --> 00:05:57.830
And let's start with a variable
I'm gonna call a fruit array.

95
00:05:57.830 --> 00:06:01.540
And I want that to be an actual array
a carved out slice of memory that has five

96
00:06:01.540 --> 00:06:05.070
elements of strings.

97
00:06:05.070 --> 00:06:07.710
Using the curly braces to
set some initial values.

98
00:06:08.990 --> 00:06:11.190
So let's throw in a bunch of fruit here.

99
00:06:11.190 --> 00:06:15.447
[SOUND]

100
00:06:15.447 --> 00:06:20.557
Cool.

101
00:06:20.557 --> 00:06:22.790
So we're working with a fruit
array of five strings.

102
00:06:25.920 --> 00:06:30.562
If I wanted to establish a slice off
of this array, I could set it to

103
00:06:37.001 --> 00:06:41.783
Something like this, where I'm saying
I'm going to grab a section of

104
00:06:41.783 --> 00:06:45.120
the original array which
is called fruitArray.

105
00:06:46.550 --> 00:06:50.630
And from that fruitArray, I wanna
grab just a subset of the elements.

106
00:06:50.630 --> 00:06:55.577
And so this 1:3 is saying, start before
element 1 and end before element 3,

107
00:06:55.577 --> 00:06:57.557
which is gonna be a length of 2.

108
00:07:00.707 --> 00:07:02.680
So I can go ahead and print line here.

109
00:07:07.630 --> 00:07:11.400
And now we see a subset of that
array which is just pear and apple.

110
00:07:13.070 --> 00:07:18.473
What's interesting is if I asked
my spliced fruit slice for

111
00:07:18.473 --> 00:07:20.859
its length and capacity,

112
00:07:32.080 --> 00:07:33.650
And I print those two values here.

113
00:07:35.050 --> 00:07:36.910
We get different values.

114
00:07:36.910 --> 00:07:40.280
So the length is two which makes sense
we see two elements in the array, but

115
00:07:40.280 --> 00:07:42.170
the capacity is four.

116
00:07:42.170 --> 00:07:45.737
And so because each slice is associated
with its underlying array it has to be

117
00:07:45.737 --> 00:07:47.310
allocated somewhere in memory.

118
00:07:47.310 --> 00:07:49.450
It knows it's attached to this fruit or

119
00:07:49.450 --> 00:07:52.710
a guy because we're telling it to
pull the slice off of that variable.

120
00:07:52.710 --> 00:07:55.470
And if we start here and
count to the end of our array,

121
00:07:55.470 --> 00:07:59.840
we have four available elements to work
with, even if we're only using two.

122
00:07:59.840 --> 00:08:04.789
The link might be two, but our capacity of
memory for this particular array is four,

123
00:08:04.789 --> 00:08:09.755
which is a super interesting aspect of go
when it's talking about slices in arrays.

