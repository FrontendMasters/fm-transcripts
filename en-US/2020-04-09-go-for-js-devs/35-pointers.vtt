WEBVTT

1
00:00:00.400 --> 00:00:01.610
So let's talk about pointers.

2
00:00:03.850 --> 00:00:08.610
Pointers in Go, are a variable that holds
onto the memory location of that variable

3
00:00:08.610 --> 00:00:10.381
instead of a copy of its value.

4
00:00:10.381 --> 00:00:12.045
And so kind of what we just saw,

5
00:00:12.045 --> 00:00:16.213
demonstrated by trying to modify that
describe group function is that we're

6
00:00:16.213 --> 00:00:20.450
just modifying a surface level
copy of that variable's value.

7
00:00:20.450 --> 00:00:23.400
So it might be changed temporarily,
but it's actually not going into that

8
00:00:23.400 --> 00:00:26.600
memory location and modifying
that variable in a permanent way.

9
00:00:26.600 --> 00:00:28.730
To do that,
we need to add a little bit more syntax,

10
00:00:28.730 --> 00:00:32.000
and we need to use something
called a pointer type.

11
00:00:32.000 --> 00:00:36.169
So notice on line 6 and 7, we're creating
placeholders for two different variables.

12
00:00:37.200 --> 00:00:39.430
The first is a variable called
name which is set to a string.

13
00:00:39.430 --> 00:00:43.090
And the second is a variable called name
pointer, which is also set to a string,

14
00:00:43.090 --> 00:00:45.680
but it has a little asterisk
before the word string.

15
00:00:47.450 --> 00:00:51.704
And so this is telling Go that instead of
just giving me a place to store a string

16
00:00:51.704 --> 00:00:55.051
as a variable, I need to provide
a little more information.

17
00:00:55.051 --> 00:00:58.601
I need to actually store a memory
location into this name pointer variable,

18
00:00:58.601 --> 00:00:59.994
not just the name of a string.

19
00:01:03.625 --> 00:01:08.060
Cool, so I'm gonna take this exact code
and move over to our pointers.go file.

20
00:01:08.060 --> 00:01:11.324
And we'll see what prints out
in the console when we have both

21
00:01:11.324 --> 00:01:13.510
pointer types and normal string types.

22
00:01:26.270 --> 00:01:26.855
Cool, so

23
00:01:26.855 --> 00:01:32.320
the top here, here's a copy of the code
we were just looking at in the slide.

24
00:01:32.320 --> 00:01:36.760
I'm going to change my target
directory here to run our

25
00:01:36.760 --> 00:01:40.740
Section seven pointers,
code pointers.go file.

26
00:01:40.740 --> 00:01:43.400
So what we're printing right now
is these placeholder values.

27
00:01:43.400 --> 00:01:45.910
We haven't assigned any value
to these actual variables.

28
00:01:45.910 --> 00:01:49.664
We just have placeholders for name and
a name pointer which has the asterisk.

29
00:01:49.664 --> 00:01:52.109
And we're asking our console
to print out both of these.

30
00:01:55.470 --> 00:01:58.577
So see that our name variable is
giving us back that empty string,

31
00:01:58.577 --> 00:02:01.584
which based on how Go defines
default values that makes sense.

32
00:02:01.584 --> 00:02:04.650
And then for the pointer value,
we're seeing this nil.

33
00:02:04.650 --> 00:02:07.580
And the nil indicates that this
pointer value is expecting

34
00:02:07.580 --> 00:02:10.388
an actual address in memory,
not just an empty string,

35
00:02:10.388 --> 00:02:14.420
this is a special kind of variable that
we need to provide more information for.

36
00:02:16.753 --> 00:02:18.777
So let's dig a little deeper here.

37
00:02:18.777 --> 00:02:24.579
[COUGH] If

38
00:02:24.579 --> 00:02:28.383
we were to actually assign
some variables here,

39
00:02:28.383 --> 00:02:34.150
our first one is Beyonce, and
our name pointer, let's go back to Lizzo.

40
00:02:35.710 --> 00:02:37.980
You'll notice I'm already
getting an error.

41
00:02:37.980 --> 00:02:39.150
But if I want to then go ahead and

42
00:02:39.150 --> 00:02:43.670
print these out again, you'll see
that we're gonna get a type error.

43
00:02:43.670 --> 00:02:44.600
We cannot use Lizzo,

44
00:02:44.600 --> 00:02:48.140
which is a type string as the same
thing as the type pointer string.

45
00:02:49.240 --> 00:02:51.816
So fundamentally these
are two very different types,

46
00:02:51.816 --> 00:02:53.496
either a memory address location or

47
00:02:53.496 --> 00:02:57.083
a string value that's a copy of what
lives in that memory address location.

48
00:03:00.930 --> 00:03:04.042
So in order to indicate that
instead of just a string,

49
00:03:04.042 --> 00:03:07.857
we actually want it to be a memory
address, we use the ampersand.

50
00:03:11.200 --> 00:03:16.187
And so on the right-hand side here, I'm
going to say, instead of just a string,

51
00:03:16.187 --> 00:03:18.013
I'm going to use ampersand.

52
00:03:18.013 --> 00:03:21.488
And I'm gonna steal the variable name here
since we have it conveniently defined

53
00:03:21.488 --> 00:03:22.212
right above it.

54
00:03:25.633 --> 00:03:29.138
So I'm saying okay, the name is
gonna be set to the string Beyonce,

55
00:03:29.138 --> 00:03:33.074
but the name pointer, go get the address,
read through this pointer to find

56
00:03:33.074 --> 00:03:35.674
the address and
give me back what that looks like.

57
00:03:40.268 --> 00:03:43.893
And so now you'll see the two variables
have been modified a little bit,

58
00:03:43.893 --> 00:03:46.330
that first one is still
typical name string, but

59
00:03:46.330 --> 00:03:49.120
that second one is actually
giving me an address now.

60
00:03:49.120 --> 00:03:51.760
So it's not the value, it's
the address of where that value lives.

61
00:03:56.540 --> 00:03:59.270
So now that we know that we have
the address of that particular variable,

62
00:03:59.270 --> 00:04:02.826
if we actually wanna read through and
find the value that lives in the address.

63
00:04:02.826 --> 00:04:07.902
We're gonna kinda deference the variable

64
00:04:07.902 --> 00:04:13.966
we just defined using that
asterisk one more time.

65
00:04:32.466 --> 00:04:37.090
Cool, so let's kinda talk through all
the stuff that has happened one more time.

66
00:04:38.800 --> 00:04:41.580
At the top of our main function,
we're establishing two different

67
00:04:41.580 --> 00:04:45.260
placeholders for variables, one of which
is going to be your typical string.

68
00:04:45.260 --> 00:04:50.050
And one is going to be a pointer
to where a string variable lives.

69
00:04:50.050 --> 00:04:54.610
So we just want to access the value of the
variable, we can assign it to a string.

70
00:04:54.610 --> 00:04:57.890
But this ampersand here actually
indicates we wanna read through and

71
00:04:57.890 --> 00:04:58.680
find the address.

72
00:04:58.680 --> 00:05:02.000
So I like to think of
the ampersand as a forward address,

73
00:05:02.000 --> 00:05:03.290
get the address of that variable.

74
00:05:04.670 --> 00:05:07.950
And then lastly,
let's say when we print this variable,

75
00:05:07.950 --> 00:05:11.610
we see that big convoluted address and
we actually want that value back.

76
00:05:11.610 --> 00:05:14.720
We need to use the star once again and
say okay, so

77
00:05:14.720 --> 00:05:17.918
I know you're an address, go read through
that address and give me back the value.

78
00:05:17.918 --> 00:05:21.920
So it's kinda this relationship between do
we have the address and what do we want?

79
00:05:21.920 --> 00:05:25.460
Or do we need the address and
how do we get it?

80
00:05:25.460 --> 00:05:29.978
So ampersand for get the address star for
I have the address, give me the value.

81
00:05:32.988 --> 00:05:37.694
One of the main differences to
keep in mind is that the star

82
00:05:37.694 --> 00:05:42.320
either lives next to the type name or
the variable name.

83
00:05:43.620 --> 00:05:49.080
If the star lives next to the type name,
that indicates that it is a pointer type.

84
00:05:49.080 --> 00:05:51.850
So the only thing that this variable
is going to accept as it's value

85
00:05:51.850 --> 00:05:52.700
is an address.

86
00:05:54.310 --> 00:05:56.870
If the star is next to the variable name,

87
00:05:56.870 --> 00:05:59.370
that means that it is
a pointer variable value.

88
00:05:59.370 --> 00:06:03.050
So it started as an address, and
now you want that value back.

89
00:06:03.050 --> 00:06:06.030
And then to read through the variable
to see the address, ampersand for

90
00:06:06.030 --> 00:06:07.630
A, go find the address.

91
00:06:07.630 --> 00:06:10.370
And that ampersand lives next
to the pointer variable, name.

