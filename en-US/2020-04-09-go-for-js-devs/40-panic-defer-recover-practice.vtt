WEBVTT

1
00:00:00.006 --> 00:00:04.182
And lastly for our error handling section
here I wanna talk about the two panic and

2
00:00:04.182 --> 00:00:07.209
defer functions you saw a little
bit in that last example.

3
00:00:07.209 --> 00:00:11.037
When we were talking about opening and
closing a file, you saw that if

4
00:00:11.037 --> 00:00:15.138
the file is successfully opened,
we can call defer, and then f.Close.

5
00:00:15.138 --> 00:00:17.634
So a couple of reasons why this
is a really cool function.

6
00:00:17.634 --> 00:00:19.234
A lot of times like once we open a file,

7
00:00:19.234 --> 00:00:21.447
there's gonna be a lot of
stuff we want to do with it.

8
00:00:21.447 --> 00:00:26.119
Let's say you're parsing it, logging it,
whatever you're trying to do with the file

9
00:00:26.119 --> 00:00:30.049
you just opened and a lot of that stuff
happens before you wannaa close it.

10
00:00:30.049 --> 00:00:30.717
But sometimes,

11
00:00:30.717 --> 00:00:34.258
especially with readability, it's nice to
see some of these things closer together.

12
00:00:34.258 --> 00:00:37.401
So you see that on the first line, you're
opening a file, and then at some point,

13
00:00:37.401 --> 00:00:38.872
you're gonna defer this till later.

14
00:00:38.872 --> 00:00:40.535
You wanna close that file in the middle.

15
00:00:40.535 --> 00:00:41.461
You can do whatever you want.

16
00:00:41.461 --> 00:00:44.512
So the defer line is gonna happen last.

17
00:00:44.512 --> 00:00:48.057
And then panic at the bottom there is
just a review of, if you wanted to throw

18
00:00:48.057 --> 00:00:51.494
a panic error that's gonna completely
halt execution of your program,

19
00:00:51.494 --> 00:00:54.954
you can use the method panic and
then call whatever you want within that.

20
00:00:54.954 --> 00:00:59.049
In this case we're just telling it to go
find that error that was just thrown.

21
00:01:02.978 --> 00:01:05.662
So let's hop back into errors ago and
talk about defer.

22
00:01:14.380 --> 00:01:17.762
Okay, so let's talk about what's
happening in this code snippet,

23
00:01:17.762 --> 00:01:21.044
where we have a set of different
functions in our do things method.

24
00:01:21.044 --> 00:01:24.363
But the first thing that
happens is in function main,

25
00:01:24.363 --> 00:01:26.737
where we call our do things function.

26
00:01:26.737 --> 00:01:28.473
And if you hop up to do things,

27
00:01:28.473 --> 00:01:32.437
you'll see that the first two lines
have the the defer method here.

28
00:01:32.437 --> 00:01:36.810
And then stuff happens to the right hand
side where we're just printing some lines.

29
00:01:36.810 --> 00:01:38.954
So I run this right now.

30
00:01:38.954 --> 00:01:42.232
We are going to be up in errors.go.

31
00:01:42.232 --> 00:01:46.000
You'll notice that the order of operations
are kind of the opposite of what you

32
00:01:46.000 --> 00:01:49.727
would see if you were looking at just
like line by line execution of this code.

33
00:01:49.727 --> 00:01:51.704
So the first thing that
happens is things and

34
00:01:51.704 --> 00:01:54.382
stuff should happen first
switch is executed on line 54.

35
00:01:54.382 --> 00:01:58.876
The second is do this second to
last which happens on line 53, and

36
00:01:58.876 --> 00:02:03.067
then first line but do this last,
which happens at line 52.

37
00:02:03.067 --> 00:02:05.793
And so what's cool about defer,
is that it's gonna keep going

38
00:02:05.793 --> 00:02:08.376
through the defers in a last in
first out type of structure.

39
00:02:08.376 --> 00:02:10.694
So the first thing it's gonna
do it's gonna be like cool,

40
00:02:10.694 --> 00:02:13.343
I see a bunch of defers,
let's skip through those, find the first

41
00:02:13.343 --> 00:02:16.160
line of execution that I can do first,
which is this last line on 54.

42
00:02:16.160 --> 00:02:19.480
And then it's gonna kinda
work its way up and

43
00:02:19.480 --> 00:02:25.057
execute each of the defers kind of as
it reverses its way through the code.

44
00:02:25.057 --> 00:02:28.315
So, so far we've kinda talked
about panic and defer and

45
00:02:28.315 --> 00:02:32.350
the third member of the party here
is another method called recover.

46
00:02:32.350 --> 00:02:36.402
And so panic is gonna be called if
the application kinda stops execution and

47
00:02:36.402 --> 00:02:40.452
you need to actually like fataly do
something different within your code,

48
00:02:40.452 --> 00:02:44.849
defer is going to tell your code to kind
of hang out and do something differently.

49
00:02:44.849 --> 00:02:48.893
And if you pair all these
together with the recover verb,

50
00:02:48.893 --> 00:02:53.367
you're gonna tell go what to do,
if your application panics.

51
00:02:53.367 --> 00:02:57.233
So recovering differ kind of like buddies,
where if recover is paired with defer,

52
00:02:57.233 --> 00:02:59.772
it's gonna be like okay,
once you panic, go check for

53
00:02:59.772 --> 00:03:03.142
any statements closing a file,
even if the file itself doesn't exist or

54
00:03:03.142 --> 00:03:05.043
you do something with it and it blows up.

55
00:03:05.043 --> 00:03:08.492
You still wanna close that file before
the end of the function, so panic and

56
00:03:08.492 --> 00:03:10.151
differ work really well together.

57
00:03:10.151 --> 00:03:13.571
But if there's more you wanna do
besides just close that file like hey,

58
00:03:13.571 --> 00:03:15.227
update a log or do something else.

59
00:03:15.227 --> 00:03:19.161
You can call recover, to be,
okay, something panicked,

60
00:03:19.161 --> 00:03:22.004
divert some stuff and
also do this as well.

61
00:03:22.004 --> 00:03:26.417
And so we're gonna look at
kind of what that looks like.

62
00:03:26.417 --> 00:03:28.916
Back in Pericycle.

63
00:03:52.184 --> 00:03:52.704
Cool.

64
00:03:52.704 --> 00:03:55.558
So you'll notice that in main,
we still have our do things function.

65
00:03:55.558 --> 00:03:59.019
But this time we've modified the do things
to have a little bit more going on.

66
00:03:59.019 --> 00:04:03.274
So first of all,
we're calling a for loop or

67
00:04:03.274 --> 00:04:09.842
iterating over a set of indexes and
then we're printing the index.

68
00:04:09.842 --> 00:04:12.206
And if I was to, we're just gonna panic.

69
00:04:12.206 --> 00:04:13.647
And so
we're gonna call this panic function.

70
00:04:13.647 --> 00:04:17.230
We're gonna throw the string a panic.

71
00:04:17.230 --> 00:04:19.882
And see what happens if we run,
do things as is.

72
00:04:24.733 --> 00:04:27.766
You'll see we get zero,
one and two and then we panic.

73
00:04:27.766 --> 00:04:31.464
So even though our for
loop should iterate over to five.

74
00:04:31.464 --> 00:04:35.492
Once I set to two, we panic.

75
00:04:35.492 --> 00:04:39.243
But let's say once we panic, we want to
alert the user that something happened be

76
00:04:39.243 --> 00:04:41.404
more specific,
add a little bit more detail.

77
00:04:41.404 --> 00:04:43.018
Let's add the defer and recover,

78
00:04:43.018 --> 00:04:45.640
to add a little bit more
functionality to our code here.

79
00:04:51.391 --> 00:04:52.832
Cool.

80
00:04:52.832 --> 00:04:57.294
So within our do things function,
we're going to first set up a defer.

81
00:04:57.294 --> 00:04:59.368
So the last thing that should fire here,

82
00:04:59.368 --> 00:05:03.224
is a function that we're gonna make
an a second call to recover from panic.

83
00:05:06.475 --> 00:05:11.729
So even if the function panics, go find a
defer if one exists and execute that code

84
00:05:16.783 --> 00:05:21.926
So let's write a function
called recover from panic.

85
00:05:21.926 --> 00:05:26.966
Okay, so we're gonna modify our do things
function just a little bit we have our for

86
00:05:26.966 --> 00:05:32.078
loop that iterates over our index up until
five and then if index hits two, we panic.

87
00:05:32.078 --> 00:05:36.721
And so when we call panic, we know that
the first thing is gonna do is look for

88
00:05:36.721 --> 00:05:38.140
any defer functions.

89
00:05:38.140 --> 00:05:41.108
And if there is a defer function,
that kind of fire,

90
00:05:41.108 --> 00:05:43.137
whatever those instructions are.

91
00:05:43.137 --> 00:05:46.778
So I'm gonna create a function called
recoverFromPanic which is instructions for

92
00:05:46.778 --> 00:05:49.021
what this program should
do if the program panics.

93
00:05:49.021 --> 00:05:50.848
And then recoverFromPanic here,

94
00:05:50.848 --> 00:05:53.875
we're gonna start implementing
the recover function.

95
00:05:53.875 --> 00:05:58.502
So to use the recover function, we're
gonna first instantiate a variable called

96
00:05:58.502 --> 00:06:01.051
R and
set that to whatever recover returns and

97
00:06:01.051 --> 00:06:05.223
recover is only going to return a value
if there has actually been a panic.

98
00:06:08.708 --> 00:06:13.535
So similar to how we had our error
handling, both define the variable and

99
00:06:13.535 --> 00:06:14.892
a check for a value.

100
00:06:14.892 --> 00:06:19.552
We can say, Hey,

101
00:06:19.552 --> 00:06:24.294
if you called recover, and
the recover value is not nil.

102
00:06:24.294 --> 00:06:29.085
So recover actually got a value back,
do something with that information.

103
00:06:29.085 --> 00:06:34.593
So here I'm just going to print line and
say something like,

104
00:06:34.593 --> 00:06:38.595
hey, we panicked, but everyone's fine.

105
00:06:38.595 --> 00:06:43.517
And then after that,
let's also print line.

106
00:06:43.517 --> 00:06:47.910
And I wanna kind of demonstrate like what
instructions have to be just to see what

107
00:06:47.910 --> 00:06:51.073
did our recover function get
if it's not nill what is it.

108
00:06:51.073 --> 00:06:53.685
So in here, let's just print R.

109
00:06:58.711 --> 00:07:00.829
Cool.

110
00:07:00.829 --> 00:07:04.143
So now that we have a recover
from panic function written,

111
00:07:07.887 --> 00:07:10.630
Cool.

112
00:07:10.630 --> 00:07:12.501
We can do one last thing.

113
00:07:12.501 --> 00:07:15.873
So right now when we panic,
we're simply passing it a string.

114
00:07:15.873 --> 00:07:18.053
If I were to run the code as is,

115
00:07:24.208 --> 00:07:26.521
We are in section eight for errors.

116
00:07:29.933 --> 00:07:32.169
We're gonna see we panicked but
everyone's fine.

117
00:07:32.169 --> 00:07:35.651
And then we see that the instructions
that were sent to a recover function is

118
00:07:35.651 --> 00:07:37.821
the string that we
actually handed our panic.

119
00:07:37.821 --> 00:07:41.059
And this is kind of a cool way to pass
some information around your program.

120
00:07:41.059 --> 00:07:43.487
Even if something goes wrong,
what do you wanna do about it?

121
00:07:43.487 --> 00:07:46.049
So instead of just halting
execution completely,

122
00:07:46.049 --> 00:07:50.170
let's add a few more layers of instruction
to handle it a little more gracefully.

