WEBVTT

1
00:00:00.102 --> 00:00:03.921
We're gonna go back to our pointers.go
file and talk a little bit more about how

2
00:00:03.921 --> 00:00:06.714
to fix the behavior we saw in
our describe group function,

3
00:00:06.714 --> 00:00:09.909
where we weren't able to modify
that variable in a permanent way.

4
00:00:14.204 --> 00:00:20.078
And I comment out our current logic
real quick, all of the function main

5
00:00:30.966 --> 00:00:33.237
Move down to a couple
different examples down here.

6
00:00:33.237 --> 00:00:37.891
So in our main function line 40, We're

7
00:00:37.891 --> 00:00:43.310
establishing that a variable name
is set to the value of Elvis.

8
00:00:43.310 --> 00:00:46.370
We're calling changeName,
which accepts a name as a string,

9
00:00:46.370 --> 00:00:48.440
and then we're printing
that to the console.

10
00:00:49.550 --> 00:00:53.520
In our changeName function, we are passing
in one argument, which is a string, and

11
00:00:53.520 --> 00:00:56.490
simply modifying that variable.

12
00:00:56.490 --> 00:00:58.935
So if it starts out lowercase,
we want it to end up uppercase.

13
00:01:03.411 --> 00:01:08.862
If we run this now, you'll see that even
though we're calling strings.ToUpper

14
00:01:08.862 --> 00:01:13.766
on line 37, that variable is still
coming back with just the capital E.

15
00:01:13.766 --> 00:01:14.759
Nothing else has been modified.

16
00:01:14.759 --> 00:01:18.164
And so this is the demonstration
once again of how in Go,

17
00:01:18.164 --> 00:01:22.954
we are passing a variable by its value,
not necessarily its memory location.

18
00:01:26.996 --> 00:01:27.699
Cool.

19
00:01:27.699 --> 00:01:32.441
So as we just recently talked about,
if we know we wanna modify the address

20
00:01:32.441 --> 00:01:36.910
location itself,
I'm gonna start with my change name here.

21
00:01:36.910 --> 00:01:41.050
I don't just want the copy of the value,
I want the actual address.

22
00:01:41.050 --> 00:01:42.916
And so the symbol for
that was a for address.

23
00:01:46.716 --> 00:01:49.940
So I'm gonna change name
instead of just Elvis.

24
00:01:49.940 --> 00:01:52.750
Go find me that address and
pass that to our function instead.

25
00:01:54.500 --> 00:01:59.180
If I were to save and run it just as is,
we're gonna get an error.

26
00:01:59.180 --> 00:02:04.490
We're saying like, hey, you can't pass
a function it's expecting a normal string.

27
00:02:04.490 --> 00:02:08.364
What turns out to be the address of
that variable where it lives in memory.

28
00:02:08.364 --> 00:02:11.752
And so you recall if we're
talking about a type name, and

29
00:02:11.752 --> 00:02:16.552
we put the asterisk before the type name,
we are telling Go that we expect the type

30
00:02:16.552 --> 00:02:19.600
of this variable to be a pointer,
to be an address.

31
00:02:20.930 --> 00:02:22.696
So you change that to be a star.

32
00:02:25.229 --> 00:02:30.363
Cool, and now you'll see that our
error has changed to line 21, sorry,

33
00:02:30.363 --> 00:02:36.087
line 37, which is here we're saying
strings.to upper, and we've got this n.

34
00:02:36.087 --> 00:02:40.260
But now we're trying to call to upper
on an address on that like weird,

35
00:02:40.260 --> 00:02:42.580
convoluted series of data.

36
00:02:42.580 --> 00:02:46.480
So in order to change that, we need to
dereference it and be like, okay, cool.

37
00:02:46.480 --> 00:02:47.610
I know you gave me an address, but

38
00:02:47.610 --> 00:02:52.790
the thing I really wanna modify is
the actual value that lives here.

39
00:02:52.790 --> 00:02:55.363
So I'm going to refer to that
variable using the asterisks so

40
00:02:55.363 --> 00:02:56.986
I could actually get that value back.

41
00:02:56.986 --> 00:02:59.706
Now, you notice when we run this again,

42
00:02:59.706 --> 00:03:03.637
our value has been permanently
changed to capital Elvis.

43
00:03:03.637 --> 00:03:06.643
And so
this is a super interesting aspect of go.

44
00:03:06.643 --> 00:03:10.285
And if you think about how you pass
variables around in an application, right

45
00:03:10.285 --> 00:03:14.110
now we're talking about a single string,
which doesn't take up a lot of space.

46
00:03:14.110 --> 00:03:14.893
It's not a big deal.

47
00:03:14.893 --> 00:03:18.209
But there are times when the actual data
you're passing around is a huge amount of

48
00:03:18.209 --> 00:03:18.856
information.

49
00:03:18.856 --> 00:03:21.022
It's like a whole section from a database.

50
00:03:21.022 --> 00:03:23.530
You made a query and you're passing
along an entire JSON response or

51
00:03:23.530 --> 00:03:24.372
something like that.

52
00:03:24.372 --> 00:03:28.169
And so whether or
not you're passing a copy of the value or

53
00:03:28.169 --> 00:03:32.680
the actual memory location,
it can be very different in terms of how

54
00:03:32.680 --> 00:03:36.024
expensive it is to pass
that information around.

55
00:03:36.024 --> 00:03:39.809
For instance, if you have a huge amount of
data stored in location A in your memory,

56
00:03:39.809 --> 00:03:43.163
giving around that address versus
passing around that whole chunk of data

57
00:03:43.163 --> 00:03:45.450
is a little bit cheaper to
do in your application.

58
00:03:45.450 --> 00:03:50.078
Let's look at one more example of how to
modify various pieces of information using

59
00:03:50.078 --> 00:03:50.749
pointers.

60
00:03:56.268 --> 00:03:58.776
I'm gonna create a new main
function down here to work from.

61
00:03:58.776 --> 00:04:02.054
And we're gonna talk about pointers and
structs.

62
00:04:05.333 --> 00:04:09.452
So let's say we have a struct,
that I wanna call Coordinates.

63
00:04:09.452 --> 00:04:14.457
In my struct, I just have two coordinates.

64
00:04:14.457 --> 00:04:16.223
I have an X and a Y.

65
00:04:16.223 --> 00:04:17.939
Let's make them capitals.

66
00:04:17.939 --> 00:04:21.618
And both of these are set to float64
types, like coordinates on the map.

67
00:04:21.618 --> 00:04:26.651
Capital C, let's add a comment
to make sure Go linter is

68
00:04:26.651 --> 00:04:33.753
happy, Longitude.

69
00:04:33.753 --> 00:04:37.769
So first thing we wanna do here
is establish an actual instance

70
00:04:37.769 --> 00:04:39.510
of our coordinates.

71
00:04:39.510 --> 00:04:40.140
Set it up here.

72
00:04:40.140 --> 00:04:45.183
Let's say var c = Coordinates.

73
00:04:45.183 --> 00:04:49.386
Our X value is 10,
which is not a real latitude,

74
00:04:49.386 --> 00:04:53.500
but let's go with it, and
Y which is set to 20.

75
00:04:56.746 --> 00:04:59.767
When you are creating
an instance of a struct,

76
00:04:59.767 --> 00:05:03.103
you need to wrap your
initial data in curly braces.

77
00:05:06.357 --> 00:05:11.250
And make sure that your casing matches
because our attributes are both capitals.

78
00:05:13.360 --> 00:05:15.170
We need those to be capital X and
capital Y.

79
00:05:15.170 --> 00:05:19.266
So now we have an insistency of our
coordinates where we have an X value of 10

80
00:05:19.266 --> 00:05:20.421
and a Y value of 20.

81
00:05:25.597 --> 00:05:29.872
If we wanted to update what's
happening in our main function here,

82
00:05:29.872 --> 00:05:32.876
let's set a variable
to pointerCoordinates.

83
00:05:32.876 --> 00:05:35.839
Let's change that.

84
00:05:35.839 --> 00:05:41.803
Let's say, coordinatesMemoryAddress

85
00:05:41.803 --> 00:05:45.434
which is a verbose variable to demonstrate
what we're talking about here.

86
00:05:45.434 --> 00:05:47.841
But the coordinatesMemoryAddress
is going to be set to,

87
00:05:51.576 --> 00:05:52.626
The actual address
location of a variable c.

88
00:05:52.626 --> 00:05:57.354
We haven't used it yet, so we're getting
yelled at, but that's just fine.

89
00:05:57.354 --> 00:06:00.399
And then here we can say.

90
00:06:06.102 --> 00:06:07.394
CoordinatesMemoryAddress.X.

91
00:06:07.394 --> 00:06:12.387
If we wanted to modify the X value and
change it to 200.

92
00:06:19.683 --> 00:06:20.594
If we print that to the console.

93
00:06:27.406 --> 00:06:30.636
You'll see now we get this &amp;220.

94
00:06:36.076 --> 00:06:39.024
If I take out that ampersand on
the c line, there in line 53,

95
00:06:39.024 --> 00:06:42.625
you'll notice that everything is
still actually modified permanently.

96
00:06:44.626 --> 00:06:49.469
And that's because if we were to actually
try to get a little more verbose and

97
00:06:49.469 --> 00:06:53.716
add the ampersand and the star sign and
while we're doing a strux.

98
00:06:53.716 --> 00:06:57.301
Go give's us a little bit of
a loophole just with strux

99
00:06:57.301 --> 00:07:02.178
where Go is going to assume you mean
the actual struct behind the scenes.

100
00:07:06.092 --> 00:07:08.665
So without having to dereference it or
add that ampersand,

101
00:07:08.665 --> 00:07:10.315
we are actually getting the address.

102
00:07:10.315 --> 00:07:13.951
And the actual value in memory that we can
modify permanently without having to be

103
00:07:13.951 --> 00:07:14.707
more explicit.

