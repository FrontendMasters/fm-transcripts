WEBVTT

1
00:00:00.050 --> 00:00:03.649
The next thing I want to talk about,
to kind of close out some of these code

2
00:00:03.649 --> 00:00:06.954
along examples is the idea of
concurrency and multitasking in Go.

3
00:00:08.891 --> 00:00:11.472
So Go has a tool called a Goroutine.

4
00:00:11.472 --> 00:00:15.801
And a Goroutine is a super lightweight
thread managed by the Go runtime that

5
00:00:15.801 --> 00:00:19.306
allows Go to asynchronously fire
off a lot of different tasks

6
00:00:19.306 --> 00:00:21.800
at the same time in
a more streamlined way.

7
00:00:23.033 --> 00:00:26.650
So to implement a Goroutine,
you simply put the keyword, go,

8
00:00:26.650 --> 00:00:29.258
before the function you'd like to execute.

9
00:00:29.258 --> 00:00:32.826
And go behind the scenes knows it's
going to spin up a separate thread

10
00:00:32.826 --> 00:00:35.050
to make something happen.

11
00:00:35.050 --> 00:00:37.890
So in the example on the screen here we
have a function that is apparently going

12
00:00:37.890 --> 00:00:39.870
to do something incredibly slowly.

13
00:00:39.870 --> 00:00:42.707
And then in our main function,
we're setting that to a Goroutine.

14
00:00:42.707 --> 00:00:47.665
So go can continue execution with the rest
of the program while the slow thing

15
00:00:47.665 --> 00:00:48.371
happens.

16
00:00:50.856 --> 00:00:55.235
So we're gonna code along a real quick
example of what this looks like.

17
00:00:55.235 --> 00:00:57.645
Concurrency in Go is
an incredibly powerful tool, and

18
00:00:57.645 --> 00:00:59.025
I think there's a ton to it.

19
00:00:59.025 --> 00:01:02.425
So the goal for this exercise is to
kind of just demonstrate how painless

20
00:01:02.425 --> 00:01:05.595
it is to kind of start spinning up
some asynchronous functionality.

21
00:01:05.595 --> 00:01:07.955
We won't go too far into what's
actually happening behind the scenes.

22
00:01:07.955 --> 00:01:11.485
That would be a really great
next step to kind of talk about.

23
00:01:12.610 --> 00:01:15.850
So let's hop over to Concurrency.Go
in our Chapter 13, and

24
00:01:15.850 --> 00:01:18.100
then take a look at Goroutines.

25
00:01:18.100 --> 00:01:20.275
So in the concurrency dot Go file,

26
00:01:20.275 --> 00:01:23.575
I have some functionality
that already lives here.

27
00:01:23.575 --> 00:01:27.680
In our main function we are calling
the save function twice.

28
00:01:27.680 --> 00:01:30.410
The first time we're saying hello
the second time, we're saying there and

29
00:01:30.410 --> 00:01:33.720
if you take a look at what's happening in
the save function it's expecting a string

30
00:01:37.030 --> 00:01:41.800
and then for
an iteration of three iterations.

31
00:01:41.800 --> 00:01:46.060
We're going to print that string and
then sleep for 300 milliseconds.

32
00:01:46.060 --> 00:01:48.269
So if I fire this off right now

33
00:01:59.313 --> 00:02:02.920
We are in chapter 13 and
go and concurrency.

34
00:02:03.970 --> 00:02:06.581
You'll see that each of
those things prints but

35
00:02:06.581 --> 00:02:08.609
it takes a minute before it happens.

36
00:02:14.690 --> 00:02:18.023
So let's start with some Goroutines, and
look at what happens when we tell Go

37
00:02:18.023 --> 00:02:20.400
to start handling this in
a more multi-threaded way.

38
00:02:22.110 --> 00:02:26.540
So in our main function, the first thing
that's gonna happen, slowly, is this guy.

39
00:02:26.540 --> 00:02:28.130
So we can throw the word go before say.

40
00:02:32.009 --> 00:02:33.060
Let's fire it off again.

41
00:02:35.130 --> 00:02:37.890
And notice that already we're seeing
some a little bit quicker where

42
00:02:37.890 --> 00:02:40.650
as something's taken a minute it's
firing off the next iteration.

43
00:02:40.650 --> 00:02:44.147
It's firing off that next
execution of line 17 of say there.

44
00:02:49.689 --> 00:02:56.570
We can also put a thread before say there,
and watch it happen a little faster.

45
00:02:56.570 --> 00:02:57.321
Or not at all.

46
00:03:02.801 --> 00:03:07.500
So what's interesting about Goroutines is
they allow the code to be non-blocking.

47
00:03:07.500 --> 00:03:10.000
If every single function
is set to a Goroutine,

48
00:03:10.000 --> 00:03:15.360
nothing is going to execute before
the Goroutine has finished execution.

49
00:03:15.360 --> 00:03:16.270
So right now we're saying like,

50
00:03:16.270 --> 00:03:18.940
hey, spin up another thread,
let something else finish first.

51
00:03:18.940 --> 00:03:19.990
But we are doing that twice.

52
00:03:19.990 --> 00:03:21.550
So spin up another thread.

53
00:03:21.550 --> 00:03:22.620
Let the next thing finish first.

54
00:03:22.620 --> 00:03:24.560
The next thing is like cool,
spin up another thread.

55
00:03:24.560 --> 00:03:26.310
Let whatever happens next finish first.

56
00:03:26.310 --> 00:03:28.394
And because there's
nothing else happening,

57
00:03:28.394 --> 00:03:31.114
nothing actually finishes
execution the way we expect it to.

58
00:03:34.515 --> 00:03:40.670
So we'll remove that second go, and
we're back to seeing all of our execution.

59
00:03:40.670 --> 00:03:43.840
So if we do wanna actually
manage this more specifically,

60
00:03:43.840 --> 00:03:46.555
we can use a package that
exists called a sync.

61
00:03:48.960 --> 00:03:51.960
And sync is gonna be a way that we
can kind of synchronize all of our

62
00:03:51.960 --> 00:03:55.090
asynchronous functionality.

63
00:03:55.090 --> 00:03:57.640
So the package is sync.

64
00:03:57.640 --> 00:03:58.235
Up here at the top.

65
00:04:01.570 --> 00:04:04.849
So what sync is gonna do
is it's going to ask for

66
00:04:04.849 --> 00:04:07.380
what order do we wanna do things in?

67
00:04:07.380 --> 00:04:12.330
And kinda it needs more instruction to
help us manage all the functionality,

68
00:04:12.330 --> 00:04:14.240
what we wanna happen, when, and how.

69
00:04:14.240 --> 00:04:17.270
So the first thing we need to do to
actually use the sync library is

70
00:04:17.270 --> 00:04:19.440
establish something called a WaitGroup.

71
00:04:19.440 --> 00:04:21.925
So I'm gonna set a variable
called w g to indicate WaitGroup.

72
00:04:23.390 --> 00:04:27.182
And then use this thing package
to instantiate a WaitGroup,

73
00:04:27.182 --> 00:04:29.720
which will be the type of this variable.

74
00:04:31.980 --> 00:04:32.480
Cool.

75
00:04:34.120 --> 00:04:35.540
We're gonna add some new functionality.

76
00:04:35.540 --> 00:04:37.029
I'm gonna kill the Save function for

77
00:04:37.029 --> 00:04:39.393
now we're gonna do something
a little bit more involved.

78
00:04:41.895 --> 00:04:46.841
So within our main function here,
Let's say we

79
00:04:46.841 --> 00:04:52.075
have a function called printStuff,
which means that above our main function,

80
00:04:52.075 --> 00:04:55.369
I'm also going to create
a printStuff function.

81
00:05:00.007 --> 00:05:04.733
Within printStuff, we're gonna have kind
of a similar four loop from our previous

82
00:05:04.733 --> 00:05:06.970
example set the initial value to zero.

83
00:05:08.250 --> 00:05:13.790
Increment up to about three and
then add one each time.

84
00:05:13.790 --> 00:05:16.270
We're gonna go ahead and
put in just function.

85
00:05:16.270 --> 00:05:19.250
Let's print out whatever index we're on.

86
00:05:19.250 --> 00:05:21.574
And then let's add a sleep timer.

87
00:05:26.433 --> 00:05:30.380
Time.Millisecond times however
long you'd like to wait.

88
00:05:30.380 --> 00:05:35.264
If you haven't imported your time library,
my code editor is automatically adding

89
00:05:35.264 --> 00:05:38.492
these for me, so
make sure you have both time, fmt, and

90
00:05:38.492 --> 00:05:40.987
sync imported at the top
of your file here.

91
00:05:48.265 --> 00:05:49.261
Cool.

92
00:05:50.746 --> 00:05:53.612
And if I run my code now,
I just see 0, 1, 2 print real slow.

93
00:06:01.520 --> 00:06:04.309
If we make this a Goroutine,
and we run it,

94
00:06:04.309 --> 00:06:09.130
we get back to that situation where
we're not seeing anything print out.

95
00:06:09.130 --> 00:06:12.840
Our Goroutines, spinning up a thread and
then it's cool, nothing's blocking and

96
00:06:12.840 --> 00:06:14.720
Go kind of shuts down.

97
00:06:14.720 --> 00:06:21.474
So what we can do here is we can use
our WaitGroup, And save waitgroup.add.

98
00:06:24.151 --> 00:06:27.893
And so WaitGroup is gonna
take the add function, and

99
00:06:27.893 --> 00:06:30.570
we're gonna hand it an integer.

100
00:06:30.570 --> 00:06:33.250
It's gonna add it kind of behind
the scenes to a queue and be like, okay,

101
00:06:33.250 --> 00:06:35.130
what are the things that
we want to accomplish?

102
00:06:35.130 --> 00:06:38.330
And how do I know when these things are
done so I can actually execute the code?

103
00:06:39.670 --> 00:06:41.115
So we can instantiate our WaitGroup.

104
00:06:42.390 --> 00:06:45.860
And then after we're done running whatever
code we want and however many threads we

105
00:06:45.860 --> 00:06:49.670
have, we can tell WaitGroup that
this is what we're waiting for.

106
00:06:49.670 --> 00:06:54.008
We need to actually put a blocker so
that Go will continue execution.

107
00:06:54.008 --> 00:06:57.190
And so if everything is good once all
of the counters have been released.

108
00:06:57.190 --> 00:06:58.230
Our WaitGroup is complete.

109
00:06:59.240 --> 00:07:01.700
And so besides just having our
counters being incremented,

110
00:07:01.700 --> 00:07:04.820
behind the scenes in our WaitGroup,
and something saying like, hey,

111
00:07:04.820 --> 00:07:08.530
wait until this is done, we need to add
an additional line within our printStuff

112
00:07:08.530 --> 00:07:11.460
function that tells our WaitGroup,
okay, you're cool things are done.

113
00:07:12.670 --> 00:07:13.480
Everything's good to go.

114
00:07:14.680 --> 00:07:18.164
So we're gonna use defer our fancy method
defer here we're going to say, hey,

115
00:07:18.164 --> 00:07:21.810
WaitGroup You can be done.

116
00:07:23.110 --> 00:07:25.240
Okay, so we have defined our WaitGroup.

117
00:07:25.240 --> 00:07:29.110
We've got some functionality to make sure
our asynchronous code is behaving the way

118
00:07:29.110 --> 00:07:29.851
we want it to.

119
00:07:29.851 --> 00:07:34.890
So our waitgroup.wait is
gonna wait until all of our

120
00:07:34.890 --> 00:07:37.130
counters have been kind
of popped off the stack.

121
00:07:38.786 --> 00:07:41.500
And so waitgroup that done here
is a way for us to be like okay,

122
00:07:41.500 --> 00:07:44.060
pull one off the stack, but
if something goes wrong,

123
00:07:44.060 --> 00:07:48.510
our waitgroup.wait is going to kind
of hang out here for quite a while.

124
00:07:48.510 --> 00:07:52.670
So let's add one last kind
of error handling check.

125
00:07:52.670 --> 00:07:54.415
We're gonna use defer again and

126
00:07:54.415 --> 00:07:58.080
we're gonna create a function
called handle panic.

127
00:07:58.080 --> 00:08:01.930
Similar to when we were talking about
r defer and recover functionality.

128
00:08:03.290 --> 00:08:06.160
And so up here let's create
a func called handle panic.

129
00:08:08.220 --> 00:08:10.883
And so we will use our recover function.

130
00:08:16.053 --> 00:08:16.553
Cool.

131
00:08:18.190 --> 00:08:21.690
And so we're saying that, okay, if recover
has been called because there's been

132
00:08:21.690 --> 00:08:26.840
a panic and defer helped us get here,
we need to do something about it.

133
00:08:26.840 --> 00:08:28.446
We're just gonna let the user know,

134
00:08:36.173 --> 00:08:37.321
That there's panic.

135
00:08:40.586 --> 00:08:43.382
This won't modify any of the actual
functionality because everything's

136
00:08:43.382 --> 00:08:44.430
working great.

137
00:08:44.430 --> 00:08:47.470
But the important part to note is that
because our WaitGroup is waiting for

138
00:08:47.470 --> 00:08:51.190
all of those counters to be popped off
the stack here if something goes wrong and

139
00:08:51.190 --> 00:08:54.350
we don't handle it the asynchronous
will just like kinda keep hang out and

140
00:08:54.350 --> 00:08:56.160
we won't see the execution we expect.

141
00:08:59.010 --> 00:09:00.870
So next steps if we were
to keep building this,

142
00:09:00.870 --> 00:09:04.030
we would start talking about
the concept of a channel.

143
00:09:04.030 --> 00:09:06.030
So right now our
functionality in printStuff,

144
00:09:06.030 --> 00:09:07.310
all we're doing is printing to the screen.

145
00:09:07.310 --> 00:09:08.422
We're not returning anything and

146
00:09:08.422 --> 00:09:10.267
we're not trying to do anything
with that information.

147
00:09:10.267 --> 00:09:13.428
But in the event we actually wanted our
Goroutines to be able to communicate to

148
00:09:13.428 --> 00:09:16.685
each other we would do something kind of
channel and channel allows you to open up

149
00:09:16.685 --> 00:09:19.313
a channel of communication
between two different Goroutines,

150
00:09:19.313 --> 00:09:22.254
pass information back and forth and
do a little bit more complex logic.

