WEBVTT

1
00:00:00.780 --> 00:00:05.250
So mapping Go is gonna be similar to what
we think of is kind of like an object

2
00:00:05.250 --> 00:00:09.812
in JavaScript,
an object shape with key value pairs.

3
00:00:09.812 --> 00:00:11.460
In this example here on line seven,

4
00:00:11.460 --> 00:00:14.430
we're establishing that we're creating
a variable called userEmails.

5
00:00:14.430 --> 00:00:18.009
And the type is gonna be a map
instead of a slicer in array.

6
00:00:18.009 --> 00:00:21.390
And the type signature now
has two different values.

7
00:00:21.390 --> 00:00:25.370
The value in the hard brackets
indicates what type is the key, and

8
00:00:25.370 --> 00:00:27.390
the value on the right is
what type is the value.

9
00:00:28.440 --> 00:00:32.460
So here we're looking at an object type
structure that has keys that are ints and

10
00:00:32.460 --> 00:00:34.440
values that are strings.

11
00:00:34.440 --> 00:00:37.150
And on lines nine and ten,
we're setting those values.

12
00:00:37.150 --> 00:00:42.968
So on our userEmails map, a key of one
will have a value of user1@gmail.com.

13
00:00:42.968 --> 00:00:47.110
And a key of two will have
a value of user2@gmail.com.

14
00:00:47.110 --> 00:00:48.230
Cool.

15
00:00:48.230 --> 00:00:51.801
So let's add this into code here and
we'll see what happens.

16
00:00:55.252 --> 00:00:59.748
And hop over to my maps.go file.

17
00:00:59.748 --> 00:01:00.893
And grab.

18
00:01:14.244 --> 00:01:15.067
Code here.

19
00:01:33.392 --> 00:01:35.461
Cool.

20
00:01:35.461 --> 00:01:36.720
So similar to the slide.

21
00:01:38.070 --> 00:01:41.154
We're setting up ideally
an empty space for a map.

22
00:01:41.154 --> 00:01:45.548
And then we're assigning a couple
variables to it, values to it,

23
00:01:45.548 --> 00:01:47.281
excuse me, run the code.

24
00:01:53.856 --> 00:01:56.040
And you'll notice that we're
getting a panic error,

25
00:01:56.040 --> 00:01:57.330
assignment to entry in mil map.

26
00:01:59.090 --> 00:02:00.660
An error we're seeing here is for

27
00:02:00.660 --> 00:02:04.710
the exact same reason we saw
the error in our slice example.

28
00:02:04.710 --> 00:02:09.220
So because we have a map, Go knows that at
some point I'm gonna have a bunch of key

29
00:02:09.220 --> 00:02:12.900
value pairs but I have no idea how
many you're gonna start this out with.

30
00:02:12.900 --> 00:02:18.163
So in order to get us going with an actual
value, we need to use the make so

31
00:02:18.163 --> 00:02:23.520
that Go knows to actually allocate some
sort of memory to put values in later.

32
00:02:23.520 --> 00:02:25.180
So we can use make.

33
00:02:25.180 --> 00:02:26.630
And then what are we making?

34
00:02:26.630 --> 00:02:32.212
We're making a map with integers
as keys and strings as values.

35
00:02:35.319 --> 00:02:39.014
Unlike slices, we don't have to tell
make how much space to allocate here.

36
00:02:42.449 --> 00:02:48.860
And you'll see that it prints out
a map type with two key value pairs.

37
00:02:48.860 --> 00:02:52.547
An obvious difference you'll notice right
off the bat compared to JavaScript is that

38
00:02:52.547 --> 00:02:53.519
when this prints out,

39
00:02:53.519 --> 00:02:56.658
you're looking at two hard brackets and
they're not comma separated.

40
00:02:56.658 --> 00:03:00.010
But the pattern of having the key
value pair is very similar.

41
00:03:00.010 --> 00:03:02.290
Similarly to when we were
talking about slices,

42
00:03:02.290 --> 00:03:05.850
we can do this with a shorthand syntax.

43
00:03:07.460 --> 00:03:12.005
We'll start with the shorthand syntax for
defining a variable,

44
00:03:12.005 --> 00:03:17.980
userEmails, the type is a map in string.

45
00:03:17.980 --> 00:03:22.080
And then we'll open it up with curly
braces to add our initial values.

46
00:03:23.290 --> 00:03:24.766
So in here we have a key of one.

47
00:03:30.362 --> 00:03:35.211
The value is set to user1@gmail.com,

48
00:03:35.211 --> 00:03:38.680
and then user2@gmail.com

49
00:03:45.671 --> 00:03:48.853
And because I'm not printing it,
we'll go ahead and copy line 12.

50
00:03:57.061 --> 00:04:01.164
And you'll see that same output with
the two elements within our map.

51
00:04:05.952 --> 00:04:08.904
Similar to JavaScript,
if we wanted to mutate or

52
00:04:08.904 --> 00:04:14.020
modify these elements in any way,
we can simply say userEmails of key one.

53
00:04:14.020 --> 00:04:19.990
And I want you to be user3@gmail.com.

54
00:04:19.990 --> 00:04:23.870
So if we wanna modify our
userEmails in some capacity,

55
00:04:23.870 --> 00:04:29.080
we can modify the element with a key of
one and change that to be user3@gmail.com.

56
00:04:29.080 --> 00:04:34.086
Then when we print userEmails,
you will now see the updated value where

57
00:04:34.086 --> 00:04:39.522
user1 is now, sorry, the element with
a key of one is user3@gmail.com.

58
00:04:45.336 --> 00:04:48.721
Cool, so a super interesting
part about maps in Go is that Go

59
00:04:48.721 --> 00:04:53.140
has a pretty unique way of verifying
whether or not an element exists in a map.

60
00:04:54.730 --> 00:05:01.442
So to do that, we are going to set
our map lookup to a couple variables.

61
00:05:01.442 --> 00:05:06.689
So what that looks like is let's
say we want to check out some sort

62
00:05:06.689 --> 00:05:12.723
of first email, we're gonna set that
to a variable of userEmails of one.

63
00:05:12.723 --> 00:05:13.907
If I print this guy.

64
00:05:23.113 --> 00:05:25.300
You'll see we have user3@gmail.com.

65
00:05:25.300 --> 00:05:29.710
So it's returning the value that I'm
getting when I look up key one of

66
00:05:29.710 --> 00:05:30.630
userEmails.

67
00:05:31.660 --> 00:05:33.330
What happens if I lookup
a key that doesn't exist?

68
00:05:33.330 --> 00:05:34.915
Let's say we look up like four.

69
00:05:36.010 --> 00:05:40.271
So there's no key four in our
userEmails map at the moment.

70
00:05:40.271 --> 00:05:42.711
So notice I get nothing back.

71
00:05:42.711 --> 00:05:44.840
So that's helpful in its own, right?

72
00:05:44.840 --> 00:05:45.890
But it doesn't blow up.

73
00:05:45.890 --> 00:05:48.696
We can still be like, okay,
that's a mil so do something about that.

74
00:05:48.696 --> 00:05:51.858
But Go also provides a second argument
here, which is a Boolean that

75
00:05:51.858 --> 00:05:54.922
indicates whether or not something
was there in the first place.

76
00:05:54.922 --> 00:05:56.550
Cuz now we have two different variables.

77
00:05:58.700 --> 00:06:02.110
And if I print out what is first email and
what is the okay variable,

78
00:06:02.110 --> 00:06:05.930
we're gonna see that first
email is an empty string.

79
00:06:05.930 --> 00:06:07.580
It's on the left of this
false that you can't see.

80
00:06:07.580 --> 00:06:11.190
But on the right-hand side you
see this actual explicit false,

81
00:06:11.190 --> 00:06:14.900
which is a kind of cool pattern of like,
just tell me if something's not there so

82
00:06:14.900 --> 00:06:15.730
I can do something about it.

83
00:06:15.730 --> 00:06:18.399
And really have a readable way to
figure out what's going on here.

84
00:06:23.742 --> 00:06:24.768
Cool.

85
00:06:27.663 --> 00:06:30.909
So let's kind of combine this syntax where
we were checking to see if something

86
00:06:30.909 --> 00:06:34.170
exists in a map with the if blocks that
we talked about kind of earlier on today.

87
00:06:35.340 --> 00:06:39.470
So if we're saying, okay, I'm looking
up some email in a user database.

88
00:06:39.470 --> 00:06:42.790
And I wanna do something
with that if it exists,

89
00:06:42.790 --> 00:06:46.310
we're gonna use the pattern that we also
see in for loops using the range keyword.

90
00:06:46.310 --> 00:06:49.160
So on the left-hand side we have two
variables, the email and whether or

91
00:06:49.160 --> 00:06:49.960
not that's present.

92
00:06:49.960 --> 00:06:55.125
And we're setting that to a value
of user emails of index for

93
00:06:55.125 --> 00:06:57.770
index one,
whatever index we're looking at.

94
00:06:57.770 --> 00:07:02.870
And by index,
I mean a key amount, key value.

95
00:07:02.870 --> 00:07:08.080
We're looking up userEmails
with a key of four,

96
00:07:08.080 --> 00:07:12.026
semi colon, and then the word okay.

97
00:07:12.026 --> 00:07:16.895
And so here what's happening is that
these two variables on the left-hand side

98
00:07:16.895 --> 00:07:20.892
of the if are going to be assigned
to whatever gets reported back by

99
00:07:20.892 --> 00:07:23.523
this map lookup of userEmails key of four.

100
00:07:26.439 --> 00:07:28.322
Then it's like, all right, so if the okay,

101
00:07:28.322 --> 00:07:30.715
this is actually the conditional
we're talking about.

102
00:07:30.715 --> 00:07:34.460
If okay is true,
execute what's in these curly braces.

103
00:07:34.460 --> 00:07:37.197
If okay is false, don't,
do something else.

104
00:07:40.549 --> 00:07:42.646
So here we can say something like.

105
00:07:45.824 --> 00:07:46.937
Email exists.

106
00:07:51.078 --> 00:07:52.038
Else.

107
00:07:57.937 --> 00:07:59.020
Email doesn't exist.

108
00:08:04.302 --> 00:08:07.440
And we're back to an error that
says email is declared or not used.

109
00:08:07.440 --> 00:08:10.972
And similarly to when we're
working with the for loop,

110
00:08:10.972 --> 00:08:16.096
if we don't wanna use the actual email,
we can replace that with an underscore.

111
00:08:16.096 --> 00:08:19.887
And we're seeing that hey, when you tried
to get a key a four from userEmails, okay,

112
00:08:19.887 --> 00:08:20.600
return false.

113
00:08:20.600 --> 00:08:25.190
So we hop back down to our else block,
which prints email does not exist.

114
00:08:26.380 --> 00:08:30.498
The last topic about maps I'd like to
cover real quick is the method, delete.

115
00:08:32.971 --> 00:08:36.210
And delete is gonna take two things, it's
gonna take what map are we talking about?

116
00:08:36.210 --> 00:08:37.770
And what's the key we're looking for?

117
00:08:37.770 --> 00:08:39.640
What do we wanna delete?

118
00:08:39.640 --> 00:08:43.294
So here I'm saying, hey, in userEmails
find a key of two, and if it exists,

119
00:08:43.294 --> 00:08:43.866
delete it.

120
00:08:48.183 --> 00:08:52.131
And we'll finally print out our
last version of userEmails.

121
00:08:57.728 --> 00:09:00.897
And you'll see that at the end of the day
here we've deleted that element with

122
00:09:00.897 --> 00:09:02.010
a key of two.

123
00:09:02.010 --> 00:09:04.262
And now we're down to just
one element in our map.

