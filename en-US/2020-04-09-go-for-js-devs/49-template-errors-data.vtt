WEBVTT

1
00:00:00.220 --> 00:00:03.582
So based on what we're looking at, we have
a section that has No Todos at the bottom

2
00:00:03.582 --> 00:00:05.461
and then we have a form
at the top with a title.

3
00:00:07.890 --> 00:00:10.083
Let's pop back over to our HTML file and

4
00:00:10.083 --> 00:00:12.678
kind of talk about what
is happening in there.

5
00:00:18.953 --> 00:00:23.093
Cool, so if you hang out down here in the
body of our HTML, you'll see our first h1

6
00:00:23.093 --> 00:00:26.693
which makes sense, we have a form
we'll talk about in a little bit, and

7
00:00:26.693 --> 00:00:29.035
then we have what Go was using for
templating.

8
00:00:29.035 --> 00:00:32.324
And so it looks like Go is expecting
a few different variables,

9
00:00:32.324 --> 00:00:36.046
we're not going to talk too much
about the templating language today,

10
00:00:36.046 --> 00:00:39.912
but what I do want to call attention
to are the variables it's expecting.

11
00:00:39.912 --> 00:00:43.943
So it looks like based on this index here,
we need a couple different things,

12
00:00:43.943 --> 00:00:47.418
we have an if block, not meaning
if something doesn't exist, and

13
00:00:47.418 --> 00:00:50.791
the variable we're expecting
is something called PageTodos.

14
00:00:50.791 --> 00:00:55.831
So if there are no todos show this h2,
otherwise, we're using that range keyword

15
00:00:55.831 --> 00:01:00.369
again and iterating over a collection,
which is our variable PageTodos.

16
00:01:00.369 --> 00:01:04.702
This dot is telling the template that
we're talking about a variable, and

17
00:01:04.702 --> 00:01:09.305
then as we iterate over, we want to create
a div where each of the todos has a title

18
00:01:09.305 --> 00:01:14.015
and a content, so these attributes
are important to our PageTodos collection.

19
00:01:14.015 --> 00:01:18.535
And then we have a couple of end blocks
that indicate that we're done iterating

20
00:01:18.535 --> 00:01:19.915
over all of the things.

21
00:01:19.915 --> 00:01:23.257
So the reason why I'm calling this out is
we're going to start building some structs

22
00:01:23.257 --> 00:01:25.577
and these structs are going
to require these exact names.

23
00:01:25.577 --> 00:01:29.668
If you're getting type errors,
keep an eye on the fact that we want

24
00:01:29.668 --> 00:01:34.419
variables that say PageTodos title and
content, they need to match actually

25
00:01:34.419 --> 00:01:38.241
what's happening in our HTML,
so something to keep in mind.

26
00:01:38.241 --> 00:01:41.668
The other thing I'd like to
call out is that our form,

27
00:01:41.668 --> 00:01:45.490
the action is being sent to
/add-todo with a POST method.

28
00:01:45.490 --> 00:01:48.541
So as we're building out our next routes,
we need to keep an eye on what is

29
00:01:48.541 --> 00:01:50.958
our form looking for, and
it's looking for add-todo.

30
00:01:54.165 --> 00:01:58.733
Cool, now let's pop back over to
our server and just as an initial

31
00:01:58.733 --> 00:02:04.466
demonstration, I'm gonna hop into HTML and
just remove one of the curly braces,

32
00:02:04.466 --> 00:02:09.892
which is going to be an error, and if I
go back to my server and restart it here,

33
00:02:13.504 --> 00:02:15.922
Things seem fine,
if I go back to my browser and

34
00:02:15.922 --> 00:02:21.464
refresh, Scroll up to the error,

35
00:02:26.870 --> 00:02:29.886
You're gonna see that error
that we're trying to handle, so

36
00:02:29.886 --> 00:02:33.084
template parsing error template
todos unexpected curly brace.

37
00:02:33.084 --> 00:02:34.687
So by handling our error in our code,

38
00:02:34.687 --> 00:02:38.156
we are now allowing us to have some
information, it's being logged to wherever

39
00:02:38.156 --> 00:02:41.499
we're trying to log it right now we're
just printing it out in our console.

40
00:02:41.499 --> 00:02:45.016
But it allows us to have a little bit
more information about what's happening

41
00:02:45.016 --> 00:02:48.167
behind the scenes by kinda specifying
the exact error we want to see.

42
00:02:48.167 --> 00:02:51.338
So making sure that error
handling is working great,

43
00:02:51.338 --> 00:02:55.011
I'll put that curly brace back and
go back to our server.go.

44
00:02:59.389 --> 00:03:04.004
Cool, so that's the functionality to our
form, so when we call todos, we actually

45
00:03:04.004 --> 00:03:07.978
want to iterate over those todos if
they exist and put them on the screen.

46
00:03:07.978 --> 00:03:10.314
We don't have a database,
we're not going to create a database or

47
00:03:10.314 --> 00:03:13.126
work with that right now, so we're going
to kind of fake it with some mock data.

48
00:03:13.126 --> 00:03:17.478
So first of all, let's create an empty
array of todos that we want to iterate

49
00:03:17.478 --> 00:03:21.082
over at some point, and
we know it's going to be a collection,

50
00:03:21.082 --> 00:03:24.215
a slice of let's call the type todos or
todo singular.

51
00:03:27.861 --> 00:03:30.589
And so this is going to need to be
a struct that we haven't defined yet,

52
00:03:30.589 --> 00:03:31.713
let's define one of those.

53
00:03:36.185 --> 00:03:38.875
For visibility, I'm going to put
the struct and the todos and

54
00:03:38.875 --> 00:03:40.996
the functions all close together,
typically,

55
00:03:40.996 --> 00:03:43.891
you would keep all your structs up
at the top of the file, but just so

56
00:03:43.891 --> 00:03:47.286
everyone can see the code in the same
place, I'm gonna write it here for now.

57
00:03:47.286 --> 00:03:50.690
So we're gonna say type Todo struct.

58
00:03:54.458 --> 00:03:58.558
And if we go look back at our
HTML each to do needs two things,

59
00:03:58.558 --> 00:04:03.478
it needs a title and it needs a content,
so in server.go in our struct,

60
00:04:03.478 --> 00:04:08.485
we can say Title, which is a string and
Content, which is also a string.

61
00:04:18.415 --> 00:04:24.116
Add a comment, With a title and

62
00:04:24.116 --> 00:04:28.148
content, so unless we're seeing
a different error our function todos has

63
00:04:28.148 --> 00:04:30.138
the same name as our variable todos.

64
00:04:30.138 --> 00:04:34.912
So I'm gonna do a quick modification,
where instead of just saying todos for

65
00:04:34.912 --> 00:04:39.834
this function, I'm going to rename to be
getTodos, you could say todo index or

66
00:04:39.834 --> 00:04:43.226
whatever you're gonna do,
I'm gonna say getTodos.

67
00:04:43.226 --> 00:04:48.772
And then in our route here on line 36,
the route can still say todos,

68
00:04:48.772 --> 00:04:52.067
the function itself should be getTodos.

69
00:04:54.329 --> 00:04:57.775
So we're simply renaming this so
it doesn't conflict with our variable

70
00:04:57.775 --> 00:05:00.782
declaration here, so
now that gets rid of that error message.

71
00:05:00.782 --> 00:05:05.496
So this t.Execute line here, we passed it
nil as a second argument because we didn't

72
00:05:05.496 --> 00:05:07.722
have anything to give it right away, but

73
00:05:07.722 --> 00:05:10.937
we know that our template is
gonna need some information.

74
00:05:10.937 --> 00:05:15.421
So here we're going to pass it a variable
that we haven't defined yet, but

75
00:05:15.421 --> 00:05:18.767
preemptively we're going to say,
pageVariables, so

76
00:05:18.767 --> 00:05:23.677
these are all the variables that our page
is going to need to render that we haven't

77
00:05:23.677 --> 00:05:24.700
quite defined.

78
00:05:24.700 --> 00:05:29.211
So let's save that guy, and
then at the top of our getTodos function,

79
00:05:29.211 --> 00:05:33.421
let's define what that variable is,
so we have pageVariables.

80
00:05:33.421 --> 00:05:38.667
We're going to use a shorthand syntax,
and set that to another struct we haven't

81
00:05:38.667 --> 00:05:43.090
created I'll call it PageVariables,
and open up the curly braces.

82
00:05:47.818 --> 00:05:53.053
And so our page variables are going
to be what our pages iterating over,

83
00:05:53.053 --> 00:05:56.804
so we'll hop back over to
the HTML just to confirm,

84
00:05:56.804 --> 00:06:01.535
we're seeing that our page is
expecting a variable PageTodos.

85
00:06:01.535 --> 00:06:03.701
And then up here,
we kinda glossed over this, but

86
00:06:03.701 --> 00:06:07.159
it's also expecting something for the
title for that tab on the top of our page,

87
00:06:07.159 --> 00:06:09.913
so those are the two things we
need to pass to our HTML template.

88
00:06:09.913 --> 00:06:14.886
So back in server.go,
[COUGH] in our page variables

89
00:06:14.886 --> 00:06:19.513
instance here we're creating a new one,
and so

90
00:06:19.513 --> 00:06:25.642
the first one will be PageTitle,
and here I'll say Get Todos,

91
00:06:25.642 --> 00:06:30.499
which is a string and
then our PageTodos will be our

92
00:06:30.499 --> 00:06:35.264
array of todos that we've
defined on line 20.

93
00:06:41.889 --> 00:06:44.703
So notice, we're getting yelled at here
because we haven't actually defined what

94
00:06:44.703 --> 00:06:45.505
the struct looks like.

95
00:06:47.887 --> 00:06:52.119
So right below our Todo struct, I'm gonna
create a struct called type PageTodos,

96
00:06:52.119 --> 00:06:53.090
which is a struct.

97
00:06:56.787 --> 00:06:58.005
Sorry PageVariables.

98
00:07:02.684 --> 00:07:08.411
And within here,
The two things we want are PageTitle and

99
00:07:08.411 --> 00:07:10.735
the type of that will be a string,

100
00:07:10.735 --> 00:07:15.634
whatever text we want to see in our
browser tab, and then our PageTodos

101
00:07:15.634 --> 00:07:20.553
which will be a slice of our Todo struct,
which we have defined above.

102
00:07:20.553 --> 00:07:23.382
And as always,
we need our PageVariables comment,

103
00:07:30.829 --> 00:07:33.232
So if I save this and
then we restart our server,

104
00:07:39.121 --> 00:07:42.406
Flip back over to the browser and
restart, you'll still see No Todos,

105
00:07:42.406 --> 00:07:45.659
our array is empty, it's iterating
over an empty array of elements.

106
00:07:45.659 --> 00:07:49.360
But you will see that the title at top
of the page here does say Get Todos, so

107
00:07:49.360 --> 00:07:52.424
our variables are being
successfully passed to a template.

108
00:07:52.424 --> 00:07:56.675
Just for kicks, if I put in some quick
title, some content and hit Submit, you'll

109
00:07:56.675 --> 00:08:00.807
notice that at the top of the page here
we're seeing that add-todo route because

110
00:08:00.807 --> 00:08:05.205
our form is submitting this information,
it's making the request to /add-todo.

111
00:08:05.205 --> 00:08:08.876
We don't have anything handling that,
so let's add some implementation for

112
00:08:08.876 --> 00:08:09.876
both adding a todo and

113
00:08:09.876 --> 00:08:13.400
then seeing that render on the page to
add an actual todo to our empty array.

