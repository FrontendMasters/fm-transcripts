WEBVTT

1
00:00:00.100 --> 00:00:05.036
The final TypeScript language
feature that I think is of

2
00:00:05.036 --> 00:00:10.602
the most important ones to people
writing everyday TypeScript

3
00:00:10.602 --> 00:00:15.430
code is another great one,
checked index access.

4
00:00:15.430 --> 00:00:18.874
So if you've taken my
TypeScript Fundamentals course,

5
00:00:18.874 --> 00:00:23.034
you may have heard me go on rant
about dictionaries, and arrays, and

6
00:00:23.034 --> 00:00:27.740
how if we typed dictionaries like this,
we're being way too optimistic.

7
00:00:27.740 --> 00:00:30.583
So you can see here, we're saying,

8
00:00:30.583 --> 00:00:35.530
I have a collection where I
store string arrays under keys.

9
00:00:35.530 --> 00:00:39.080
Great, so
let's create an empty dictionary.

10
00:00:39.080 --> 00:00:43.675
And then what the type system seems to
think is completely okay is I'm just gonna

11
00:00:43.675 --> 00:00:47.880
pass in a key that I know doesn't
exist in this data structure.

12
00:00:47.880 --> 00:00:53.320
And it's letting me go ahead and act as if
there's a string array that I get back.

13
00:00:53.320 --> 00:00:57.871
There's no sense of the dictionary
might not have a value for me, right?

14
00:00:57.871 --> 00:01:01.304
There's no sense of is
there something present?

15
00:01:01.304 --> 00:01:04.250
Let's make sure we check first.

16
00:01:04.250 --> 00:01:09.726
So what you may have seen me suggest that
you do is something like this down here,

17
00:01:09.726 --> 00:01:13.290
where you always add this undefined.

18
00:01:13.290 --> 00:01:16.828
In your types, you be honest, and

19
00:01:16.828 --> 00:01:21.464
you describe that
the possibility exists for

20
00:01:21.464 --> 00:01:26.280
there to be nothing under
some subset of keys.

21
00:01:26.280 --> 00:01:29.627
In fact,
the vast majority of keys hold nothing,

22
00:01:29.627 --> 00:01:33.940
the vast majority of possible
strings in the universe, right?

23
00:01:35.630 --> 00:01:39.058
And so here we get an appropriate
type error, right?

24
00:01:39.058 --> 00:01:43.217
There is no rhubarb in this
empty dictionary here.

25
00:01:43.217 --> 00:01:47.990
So we're told, look,
you should probably check this out first.

26
00:01:47.990 --> 00:01:50.858
Just give me a truthy, falsy check.

27
00:01:50.858 --> 00:01:52.614
We could do this.

28
00:01:52.614 --> 00:01:54.570
We could handle it very gracefully here.

29
00:01:54.570 --> 00:01:59.204
We'd just have to do const
{ rhubarb } = d, and

30
00:01:59.204 --> 00:02:04.403
then if (rhubarb),
we just need to use a type guard,

31
00:02:04.403 --> 00:02:07.583
and then we can narrow that down.

32
00:02:10.598 --> 00:02:13.504
So we'd just have to do something like
this, which is absolutely the right thing

33
00:02:13.504 --> 00:02:15.840
to do when we're not sure
whether something's there.

34
00:02:15.840 --> 00:02:20.852
So here you can see the possibility for
something to be undefined exists.

35
00:02:20.852 --> 00:02:25.786
And down here, it does not,
because of the type guard.

36
00:02:25.786 --> 00:02:30.885
So what we get here, and unfortunately,
I cannot show it to you in

37
00:02:30.885 --> 00:02:36.359
these little code snippets,
because we do not have the technology yet

38
00:02:36.359 --> 00:02:42.630
to turn this compiler flag on for
some examples, and not for others.

39
00:02:42.630 --> 00:02:46.950
You get a compiler flag that
says noUncheckedIndexAccess.

40
00:02:46.950 --> 00:02:48.770
And here's what that means.

41
00:02:48.770 --> 00:02:56.290
If I click this link down here, So here,
I do have this compiler flag turned on.

42
00:02:56.290 --> 00:03:02.076
Let me make sure I'm not lying, no.

43
00:03:03.656 --> 00:03:06.740
There it is,
noUncheckedIndexAccess, great.

44
00:03:06.740 --> 00:03:11.213
So now we can see that when I get rhubarb
back, there is the possibility that

45
00:03:11.213 --> 00:03:15.610
it's undefined, even though I have
not explicitly said so up here.

46
00:03:15.610 --> 00:03:22.196
So this will be the case for arrays,
and for dictionaries, or objects.

47
00:03:22.196 --> 00:03:25.189
Anywhere you have an index signature,

48
00:03:25.189 --> 00:03:29.630
there is an assumption that
there might be nothing here.

49
00:03:29.630 --> 00:03:32.771
If we look at an example
of how this is applied,

50
00:03:32.771 --> 00:03:35.600
we have a compiler option turned on here.

51
00:03:35.600 --> 00:03:37.610
It's called noUcheckedIndexAccess.

52
00:03:37.610 --> 00:03:38.400
There it is.

53
00:03:38.400 --> 00:03:39.153
It's checked off.

54
00:03:39.153 --> 00:03:41.250
That means it's enabled.

55
00:03:41.250 --> 00:03:45.512
And even though we have not
up here explicitly said T or

56
00:03:45.512 --> 00:03:49.975
undefined, we are getting
an equivalent result here.

57
00:03:49.975 --> 00:03:54.422
We can see that when we grab the value
stored under a particular key,

58
00:03:54.422 --> 00:03:56.900
object is possibly undefined.

59
00:03:56.900 --> 00:04:01.948
And this encourages us to use some
sort of guard, or optional chaining,

60
00:04:01.948 --> 00:04:07.081
depending on what you're doing,
in order to address that possibility,

61
00:04:07.081 --> 00:04:12.959
rather than running smack into the error
of cannot call function join on undefined,

62
00:04:12.959 --> 00:04:15.310
which will happen at runtime.

63
00:04:15.310 --> 00:04:17.500
The whole point is to
avoid that kind of thing.

64
00:04:17.500 --> 00:04:20.180
That's why we use TypeScript, right?

65
00:04:20.180 --> 00:04:24.668
Now, there is a little bit
of a downside to this, and

66
00:04:24.668 --> 00:04:28.000
that would be dealing with arrays.

67
00:04:28.000 --> 00:04:32.533
So when we're using higher order functions
on arrays or dictionaries, if you use

68
00:04:32.533 --> 00:04:36.556
something like Lodash, you might be
used to doing something like this.

69
00:04:44.543 --> 00:04:45.528
Oops, sorry.

70
00:04:51.232 --> 00:05:01.226
So we could do that, and then, We get
a value out, see string or undefined.

71
00:05:10.282 --> 00:05:12.240
Great, this has been fixed.

72
00:05:12.240 --> 00:05:16.900
So now, because in this situation, right,
when we're looping over this array,

73
00:05:16.900 --> 00:05:20.508
there is some checking that
happens behind the scenes, right?

74
00:05:20.508 --> 00:05:24.814
We're not trying to access a value at
a particular key, we're saying for

75
00:05:24.814 --> 00:05:27.810
every value that is found,
invoke this callback.

76
00:05:27.810 --> 00:05:29.417
That's what I'm gonna
use to transform things.

77
00:05:29.417 --> 00:05:32.740
So actually,
I see no downside here anymore.

78
00:05:32.740 --> 00:05:36.085
But it used to be that this value
was string or undefined, and

79
00:05:36.085 --> 00:05:39.824
this would require that you either
filter the array beforehand, or

80
00:05:39.824 --> 00:05:42.760
do some checking within
this little callback.

81
00:05:42.760 --> 00:05:47.697
But now, all of the higher order functions
that you would expect to be invoked on

82
00:05:47.697 --> 00:05:51.825
a per member basis, you will already
have that undefinedness kind

83
00:05:51.825 --> 00:05:56.220
of worked out of the type, and
this should behave as usual.

84
00:05:56.220 --> 00:06:00.383
Great, I love finding
surprise lack of downsides.

