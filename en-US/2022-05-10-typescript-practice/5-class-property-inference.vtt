WEBVTT

1
00:00:00.240 --> 00:00:03.648
The next new language feature
that we'll talk about is,

2
00:00:03.648 --> 00:00:07.670
this one's easy to understand and
a welcome improvement.

3
00:00:07.670 --> 00:00:12.530
That is class property
inference from constructors.

4
00:00:12.530 --> 00:00:19.246
And what this means is you no longer have
to do something that used to be mandatory.

5
00:00:19.246 --> 00:00:22.964
And that something,
that you used to have to do,

6
00:00:22.964 --> 00:00:26.329
was add types to every class field, right?

7
00:00:26.329 --> 00:00:30.763
So this, what you see here,
is possible today.

8
00:00:30.763 --> 00:00:34.669
But previously you would have had to say,
red is a number,

9
00:00:34.669 --> 00:00:37.162
green is a number, blue is a number.

10
00:00:37.162 --> 00:00:40.193
And it sort of added to the verbosity of

11
00:00:40.193 --> 00:00:44.000
any kind of class that you would set up,
right?

12
00:00:44.000 --> 00:00:48.364
You need types for the arguments, you need
the assignments inside your constructor.

13
00:00:48.364 --> 00:00:51.180
You needed the class fields
with their respective types.

14
00:00:51.180 --> 00:00:57.017
So what's happening now is, based on
what happens in your constructor logic,

15
00:00:57.017 --> 00:01:00.940
the types for
those fields will be inferred.

16
00:01:00.940 --> 00:01:04.538
So if you upgrade to a sufficiently
advanced TypeScript version,

17
00:01:04.538 --> 00:01:06.923
you can start going
through your code base.

18
00:01:06.923 --> 00:01:10.950
And, where appropriate,
delete some of those class field types.

19
00:01:12.010 --> 00:01:14.100
That'll be figured out for
you automatically.

20
00:01:14.100 --> 00:01:18.429
Now, what I advise doing here is,
a simple situation like this,

21
00:01:18.429 --> 00:01:21.277
absolutely, delete those class fields.

22
00:01:21.277 --> 00:01:25.690
I mean, delete the explicit type
annotations for the class fields.

23
00:01:25.690 --> 00:01:30.948
However, if you have something here
like a complicated ternary operator

24
00:01:30.948 --> 00:01:36.750
based initialization, I might still
leave the class field type here.

25
00:01:36.750 --> 00:01:42.180
For the same reason that I like to keep
explicit return types on my functions.

26
00:01:42.180 --> 00:01:46.315
It's kind of like you state
that you have intent for

27
00:01:46.315 --> 00:01:49.789
this field to end up
as a particular thing.

28
00:01:49.789 --> 00:01:55.250
And the compiler will help ensure that
you follow through on your intent, right?

29
00:01:55.250 --> 00:01:57.164
So if you've ever written a function,

30
00:01:57.164 --> 00:02:01.109
and you start adding a couple little
branches in there, a couple conditionals,

31
00:02:01.109 --> 00:02:04.898
then there's one way you can go through
this function where you return null.

32
00:02:04.898 --> 00:02:08.526
But you stated you would end up
with a number, no matter what.

33
00:02:08.526 --> 00:02:14.120
It's nice to have TypeScript right
in that local area bust you on that.

34
00:02:14.120 --> 00:02:18.844
So for simple assignments, I don't think
you need an explicit type annotation.

35
00:02:18.844 --> 00:02:23.767
But for anything that gets a little hard
to immediately look at and understand,

36
00:02:23.767 --> 00:02:24.803
leave it there.

37
00:02:24.803 --> 00:02:32.581
And the end result is, the type error will
happen in this location of your code.

38
00:02:32.581 --> 00:02:37.367
As opposed to, somebody is using
type green, color.green, and

39
00:02:37.367 --> 00:02:42.671
over there, way, far away,
that's where the type error is happening.

40
00:02:42.671 --> 00:02:48.790
That's the effect you get, right,
through that explicit type.

41
00:02:48.790 --> 00:02:51.205
You want the error to happen
where the fix needs to be, yes?

42
00:02:51.205 --> 00:02:57.540
&gt;&gt; If you have conflicting types in your
constructor versus your declaration?

43
00:02:57.540 --> 00:03:02.260
&gt;&gt; Yep, so in case I did this too fast,
I just hit this Try button.

44
00:03:02.260 --> 00:03:05.927
You can do this on almost all of
the code examples on this website,

45
00:03:05.927 --> 00:03:09.003
where you can pop out into
the TypeScript playground.

46
00:03:09.003 --> 00:03:13.460
So I can answer your question by doing
exactly what you asked me to do.

47
00:03:13.460 --> 00:03:15.678
So here, let's say that this is a string.

48
00:03:17.807 --> 00:03:21.605
And we'll get a nice little type
error here saying that, hey,

49
00:03:21.605 --> 00:03:25.848
c is a tuple of three numbers, and
something weird is happening here.

50
00:03:25.848 --> 00:03:29.329
So that, I feel like this is a good error,

51
00:03:29.329 --> 00:03:34.211
it's close to the location of
where we need to apply a fix.

52
00:03:34.211 --> 00:03:40.078
The strange situation that I was talking
about earlier, let's say we did this.

53
00:03:42.477 --> 00:03:46.550
Sorry, let me be a little more
sane in terms of how I write that.

54
00:03:46.550 --> 00:03:47.906
And we did something like this.

55
00:03:55.536 --> 00:04:00.345
So here, there's something
more complicated happening.

56
00:04:00.345 --> 00:04:05.065
Where the type of green might
not end up being a number,

57
00:04:05.065 --> 00:04:08.760
it could be a tuple of three numbers.

58
00:04:08.760 --> 00:04:13.384
And let's say that we left this out, and
we said, I just want inference to handle

59
00:04:13.384 --> 00:04:16.390
all of this for me,
we get no error messages here.

60
00:04:16.390 --> 00:04:22.398
The only place you'd get an error message,
Is something like this.

61
00:04:31.096 --> 00:04:33.395
And you wouldn't even get
an error message here,

62
00:04:33.395 --> 00:04:35.432
you'd have to have something like number.

63
00:04:35.432 --> 00:04:40.393
And now, hey, something's a little
off here, green could be a number,

64
00:04:40.393 --> 00:04:43.900
but it could also be this other thing.

65
00:04:43.900 --> 00:04:48.415
And I don't like it when my errors happen
far away from the location of where

66
00:04:48.415 --> 00:04:49.931
the fix needs to happen.

67
00:04:49.931 --> 00:04:52.097
So this is the basis for my advice.

68
00:04:52.097 --> 00:04:56.256
If there's anything more complicated
than just a simple assignment,

69
00:04:56.256 --> 00:05:00.290
especially if you have some sort
of control flow happening, right?

70
00:05:00.290 --> 00:05:02.778
Some two different branches
that you could take.

71
00:05:02.778 --> 00:05:04.409
Just go ahead and leave this on.

72
00:05:04.409 --> 00:05:11.334
Leave that there, and now you can see
the error will go away down here.

73
00:05:11.334 --> 00:05:15.253
Because our intent is that green is
a number, we're stating that upfront.

74
00:05:15.253 --> 00:05:20.626
But this is where the incongruity happens,
and that's where you need to make the fix.

75
00:05:20.626 --> 00:05:24.840
Errors where the fix needs to happen,
that's the best thing, right?

76
00:05:24.840 --> 00:05:28.395
That's where, if you use VS code,
you'll have that nice list of problems,

77
00:05:28.395 --> 00:05:30.290
you'll be able to click on that.

78
00:05:30.290 --> 00:05:33.950
That's where you need to go and
do something, the world is better.

79
00:05:33.950 --> 00:05:36.715
So that's all there is here,
it's very simple.

80
00:05:36.715 --> 00:05:41.150
I think it's a straight up win in terms of
having to write a little bit less code.

