WEBVTT

1
00:00:00.115 --> 00:00:04.716
This last one is an attempt
to implement index of.

2
00:00:04.716 --> 00:00:10.788
So you can see here, we've got a tupple
with three numbers in it, 1, 2, 3.

3
00:00:10.788 --> 00:00:17.171
We wanna find out the position of 2 and
it's starting counting it at 0.

4
00:00:17.171 --> 00:00:22.067
It is at the second or
the first position, right?

5
00:00:22.067 --> 00:00:25.839
So here, index of 3,
that's gonna give us 2.

6
00:00:25.839 --> 00:00:28.244
So it's 0,1, 2.

7
00:00:28.244 --> 00:00:32.019
And then just like index of with arrays,

8
00:00:32.019 --> 00:00:36.137
if it is never found, we should see at -1.

9
00:00:36.137 --> 00:00:43.071
So let's see if we can do that,
just using type scripts, type information.

10
00:00:43.071 --> 00:00:48.082
This to me feels again like
a recursive thing where we should

11
00:00:48.082 --> 00:00:53.712
effectively need to loop over this array,
loop over this tupple.

12
00:00:53.712 --> 00:00:57.724
And the way to do that
when you don't have a for

13
00:00:57.724 --> 00:01:02.276
loop is effectively to recurse or
to use a map type.

14
00:01:02.276 --> 00:01:06.557
But in this case, we kinda wanna find the
location of something and do something.

15
00:01:06.557 --> 00:01:12.159
So really, what we need is that looping
mechanism, we can use recursion for that.

16
00:01:12.159 --> 00:01:18.418
And we need a condition where once met,
we can evaluate out,

17
00:01:18.418 --> 00:01:23.595
right, we can start to count and
then figure out.

18
00:01:25.943 --> 00:01:30.994
We can loop over and we can count, and
then when we find we've met our condition,

19
00:01:30.994 --> 00:01:35.993
we can sort of return and then roll all
the way back up, and evaluate out to that.

20
00:01:35.993 --> 00:01:40.329
And then all the way at the end
if we reached the very end,

21
00:01:40.329 --> 00:01:45.138
we can sort of spit out -1 and
say, hey, we never got there.

22
00:01:45.138 --> 00:01:50.032
So in order to do this, I'm gonna
actually add a third type parameter,

23
00:01:50.032 --> 00:01:53.713
and this,
who here is familiar with array.reduce.

24
00:01:53.713 --> 00:01:58.105
So we're gonna create something
that's a lot like this accumulator,

25
00:01:58.105 --> 00:02:00.458
and we can use a type program for that.

26
00:02:00.458 --> 00:02:06.134
We're gonna call it Acc and
we'll start it out as an empty array.

27
00:02:06.134 --> 00:02:10.014
So here we're gonna begin
sort of our recursive loop.

28
00:02:10.014 --> 00:02:14.747
We can say, if, here let's say,

29
00:02:14.747 --> 00:02:18.021
T extends any, great.

30
00:02:18.021 --> 00:02:23.213
So we'll say, T extends F for

31
00:02:23.213 --> 00:02:26.121
first Rest, and

32
00:02:26.121 --> 00:02:31.536
we need to infer that and this.

33
00:02:33.632 --> 00:02:38.900
And so if we can match to that pattern
where we can get a first thing and

34
00:02:38.900 --> 00:02:43.909
then everything else that's in the tupple,
we're gonna say,

35
00:02:47.580 --> 00:02:50.978
How do I do that, we do it like this.

36
00:02:54.842 --> 00:02:59.419
IndexOf and then we're gonna pass in Rest.

37
00:02:59.419 --> 00:03:07.936
So that'll be,
That'll be the remainder of the array.

38
00:03:07.936 --> 00:03:09.521
We're still looking for the same thing.

39
00:03:13.005 --> 00:03:16.548
Okay, so this is kind of our
iteration pattern here and

40
00:03:16.548 --> 00:03:19.098
we'll terminate out to never for now.

41
00:03:19.098 --> 00:03:23.339
So let's just imagine this situation,
we've got 1, 2, and 3, right,

42
00:03:23.339 --> 00:03:24.398
let's grab this.

43
00:03:28.634 --> 00:03:35.973
So when we do this infer, we're gonna
have F = 1, and then Rest = [2, 3].

44
00:03:35.973 --> 00:03:40.605
And then we're gonna call in to IndexOf.

45
00:03:44.083 --> 00:03:47.547
And we're searching for a 2 and

46
00:03:47.547 --> 00:03:52.172
then this is gonna be something like this.

47
00:03:52.172 --> 00:03:54.609
So here's why I'm doing this.

48
00:03:54.609 --> 00:04:00.192
If we keep effectively pushing elements
just cuz we're changing this parameter

49
00:04:00.192 --> 00:04:05.211
here at the end, sorry, we don't
wanna do this, something like that.

50
00:04:09.172 --> 00:04:12.048
Last element must be in the right time.

51
00:04:13.284 --> 00:04:14.277
Yeah, there we go.

52
00:04:14.277 --> 00:04:17.877
So let me make this
a little more organized.

53
00:04:17.877 --> 00:04:20.938
So there's a thing to search through,

54
00:04:20.938 --> 00:04:25.401
a thing to search for,
this is a kind of our accumulator.

55
00:04:25.401 --> 00:04:30.571
And we're gonna pluck off the first thing,
we're gonna store the rest here,

56
00:04:30.571 --> 00:04:33.485
and then we're gonna effectively do this.

57
00:04:33.485 --> 00:04:38.084
This starts at empty, we're spreading it
out, so that's adding nothing to this.

58
00:04:38.084 --> 00:04:42.575
And then here is the first thing
that's this one that we plucked off.

59
00:04:42.575 --> 00:04:46.297
So this effectively, if we keep doing
this, it'll kinda look like this.

60
00:04:50.794 --> 00:04:54.787
And at the point where we discover
our condition is matched,

61
00:04:54.787 --> 00:04:59.405
we can look at the length of this tupple,
this accumulator thing, and

62
00:04:59.405 --> 00:05:04.438
that will tell us effectively how many
times we've gone through this loop.

63
00:05:04.438 --> 00:05:10.288
And if at some point, this shrinks
down to nothing, the length is 0,

64
00:05:10.288 --> 00:05:16.356
now we know we've reached the end of
the list, and we can spit out a -1.

65
00:05:16.356 --> 00:05:21.108
So now I'm feeling like we
kinda have the tools in our

66
00:05:21.108 --> 00:05:25.434
toolbox that we need in
order to make this work.

67
00:05:25.434 --> 00:05:30.357
So I'm actually gonna put this down
here a little bit cuz I think the first

68
00:05:30.357 --> 00:05:34.325
thing we need to do after we
pluck this off, is compare it.

69
00:05:34.325 --> 00:05:41.491
And, Just trying to think,

70
00:05:41.491 --> 00:05:47.898
we don't have a way of saying,
look at the current index of this array.

71
00:05:47.898 --> 00:05:54.809
So let's do it this way, let's say, if T,

72
00:06:00.187 --> 00:06:05.900
Sub 0 extends U, then it met the length

73
00:06:05.900 --> 00:06:12.666
of this thing that we're summing up,
right?

74
00:06:12.666 --> 00:06:19.332
So this would be, if this thing in the
first position is exactly what we found,

75
00:06:19.332 --> 00:06:23.377
give me a 0,
the zeroth position of the array.

76
00:06:23.377 --> 00:06:26.982
And then that's the end of it, otherwise,

77
00:06:26.982 --> 00:06:32.252
this is where we begin a search,
this is where we begin the loop.

78
00:06:32.252 --> 00:06:34.349
Here's why it's important
that I did this first.

79
00:06:34.349 --> 00:06:41.196
As soon as I pop off this first thing in
the array, now my length has grown by one.

80
00:06:41.196 --> 00:06:44.160
And if this were regular JavaScript code,
we'd say, no big deal,

81
00:06:44.160 --> 00:06:45.467
just return the length -1.

82
00:06:45.467 --> 00:06:51.551
What's the problem, -1 is a little bit
hard in this environment here, right?

83
00:06:51.551 --> 00:06:56.137
Subtracting 1, it's actually, I'm not
sure how we would go about doing that.

84
00:06:56.137 --> 00:07:01.588
So I'm making sure that we do this at the
right point in time where that length is,

85
00:07:01.588 --> 00:07:03.522
what I want it to be already.

86
00:07:03.522 --> 00:07:08.723
So then if that fails,
then we check to see if it matches

87
00:07:08.723 --> 00:07:14.379
this pattern effectively,
we pluck off that first thing,

88
00:07:14.379 --> 00:07:18.243
and if that's true, then we omit that.

89
00:07:21.348 --> 00:07:22.807
Let me bring down another never.

90
00:07:25.856 --> 00:07:29.106
Actually this is just gonna evaluate,
I'm gonna need something better than

91
00:07:29.106 --> 00:07:31.716
never to even just understand
whether this is working or not.

92
00:07:34.840 --> 00:07:38.995
I see, we need a code in here.

93
00:07:42.477 --> 00:07:44.523
All right, awesome.

94
00:07:44.523 --> 00:07:48.692
Two test cases already passing,
so this one works,

95
00:07:48.692 --> 00:07:53.996
it's only the case where we kind of
like reach the end of the list and

96
00:07:53.996 --> 00:07:59.131
there's nothing left,
that's where things kind of explode.

97
00:07:59.131 --> 00:08:02.465
&gt;&gt; It could never just be -1?

98
00:08:02.465 --> 00:08:06.928
&gt;&gt; Yeah, what about, we can just emit -1.

99
00:08:06.928 --> 00:08:11.012
Yeah, there you go, thanks.

100
00:08:11.012 --> 00:08:16.040
&gt;&gt; [LAUGH]
&gt;&gt; All right, so I know this is why

101
00:08:16.040 --> 00:08:21.046
I wanna stop here, because this is
super gnarly complicated stuff.

102
00:08:21.046 --> 00:08:24.707
Hopefully there is some value in
listening to me think through this and

103
00:08:24.707 --> 00:08:26.703
break it down into smaller problems.

104
00:08:26.703 --> 00:08:29.120
And I think what you see me doing here,
and

105
00:08:29.120 --> 00:08:32.712
this is something that you can
do in your own TypeScript code,

106
00:08:32.712 --> 00:08:37.297
is peeling out sub parts of this type and
building it up piece by piece by piece.

107
00:08:37.297 --> 00:08:41.782
I'm grabbing stuff here, I'm creating
a variable like looking at the tooltip and

108
00:08:41.782 --> 00:08:45.899
you can see how I debug this kind of
thing, that's the major struggle here.

109
00:08:45.899 --> 00:08:51.335
Because when things are messed up and
you just see red squiggles everywhere.

110
00:08:51.335 --> 00:08:55.859
You do not have debugger, or
a break point, or a console log,

111
00:08:55.859 --> 00:09:00.218
where you can sort of see what's
going on with your system.

112
00:09:00.218 --> 00:09:03.654
All the more reason to practice with
this kind of thing if you are using

113
00:09:03.654 --> 00:09:04.730
TypeScript at work.

114
00:09:04.730 --> 00:09:08.858
Because then your brain, and
your knowledge of how things work,

115
00:09:08.858 --> 00:09:13.451
and the tools in your toolbox,
that's how you can and rescue yourself.

116
00:09:13.451 --> 00:09:17.059
So again, type challenges,
I strongly advise you,

117
00:09:17.059 --> 00:09:19.154
do one of these once in a while.

118
00:09:19.154 --> 00:09:25.054
A lot of the easy ones appear, quite easy,
probably too easy for a lot of you.

119
00:09:25.054 --> 00:09:28.488
Spend some time in the medium area, right?

120
00:09:28.488 --> 00:09:33.150
Get used to it, they are hard,
this is where the learning happens.

