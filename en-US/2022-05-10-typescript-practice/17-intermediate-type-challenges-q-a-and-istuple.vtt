WEBVTT

1
00:00:00.080 --> 00:00:03.680
I see that there are some
questions from the class in chat.

2
00:00:03.680 --> 00:00:08.590
So Oscar asks,
how practical are these typed challenges?

3
00:00:08.590 --> 00:00:12.590
He says, I can understand you will learn
the ins and outs of the language better.

4
00:00:12.590 --> 00:00:18.106
But how often do you need to write these
kinds of typed operations in your code or

5
00:00:18.106 --> 00:00:23.720
is the biggest benefit that this is about
understanding how TypeScript works.

6
00:00:23.720 --> 00:00:25.380
And that's exactly the point here.

7
00:00:25.380 --> 00:00:29.379
This I'm not suggesting
that we do like CSV parsing

8
00:00:29.379 --> 00:00:32.360
in the TypeScript types themselves.

9
00:00:33.480 --> 00:00:38.266
What I'm suggesting is these kinda
acrobatics give you the practice to

10
00:00:38.266 --> 00:00:43.132
where when you do encounter the occasional
challenging thing you have to

11
00:00:43.132 --> 00:00:47.940
do in your real world code,
by comparison, it will seem easy, right?

12
00:00:47.940 --> 00:00:56.270
So if you need to run a marathon you
have to do a lot of training beforehand.

13
00:00:56.270 --> 00:01:00.100
It's probably flood example because
the marathon is more complicated.

14
00:01:00.100 --> 00:01:05.528
The bigger feet in that case but
the idea is I want your everyday work and

15
00:01:05.528 --> 00:01:09.402
your everyday use of
TypeScript to feel routine.

16
00:01:09.402 --> 00:01:13.946
And part of that is sort of
raising the ceiling on what you

17
00:01:13.946 --> 00:01:18.594
consider to be challenging or
your ability to do things.

18
00:01:18.594 --> 00:01:22.630
So that's why we kind of get into
these moral contrived things.

19
00:01:22.630 --> 00:01:25.548
It's about getting, turning back to
that book that I talked about in

20
00:01:25.548 --> 00:01:27.727
the introduction of the course,
making it stick.

21
00:01:27.727 --> 00:01:32.549
It's about that desirable difficulty
where you actually retain more,

22
00:01:32.549 --> 00:01:38.082
maybe thanks to this, you understand more
about how template literal types work or

23
00:01:38.082 --> 00:01:43.085
how tuples work or rest and spread and
how those work when it comes to types.

24
00:01:43.085 --> 00:01:47.400
And then when you do something
a little bit more reasonable unless

25
00:01:47.400 --> 00:01:49.290
contrived in your own code.

26
00:01:53.172 --> 00:01:54.983
Shouldn't seem pretty easy by comparison.

27
00:01:54.983 --> 00:02:00.154
All right Michael S in chat asks
whether to ernary expressions

28
00:02:00.154 --> 00:02:05.534
with the extends keyword or
the only way to do conditional type.

29
00:02:05.534 --> 00:02:10.395
So just refresh,
that is something like this right?

30
00:02:10.395 --> 00:02:16.355
So yes,
a conditional type is always like this.

31
00:02:16.355 --> 00:02:23.450
A extends, B question mark, if true
colon if false, something like that.

32
00:02:23.450 --> 00:02:26.870
Like there's no alternate syntax I'm
aware of for doing this kind of thing.

33
00:02:26.870 --> 00:02:28.810
So it's, the only thing available.

34
00:02:31.000 --> 00:02:34.400
Okay, fantastic.

35
00:02:35.600 --> 00:02:42.300
So let's dig into this last of the medium
difficulty challenges is tuple.

36
00:02:42.300 --> 00:02:48.213
So the idea here is we should be
able to take a type puram T and

37
00:02:48.213 --> 00:02:52.438
evaluate out to true if
thing is a tuple and

38
00:02:52.438 --> 00:02:56.807
evaluate out to false if it's not a tuple.

39
00:02:58.714 --> 00:03:04.355
So, here use cases to
look at Read Only arrays.

40
00:03:04.355 --> 00:03:09.100
Sorry read only tuples
are regarded as tuples.

41
00:03:09.100 --> 00:03:11.459
Something that has a length property,

42
00:03:11.459 --> 00:03:15.970
which is one way we might try to determine
whether something is array like.

43
00:03:17.200 --> 00:03:21.450
This is not a tuple and most importantly,

44
00:03:21.450 --> 00:03:25.490
an array is not necessarily a tuple.

45
00:03:25.490 --> 00:03:26.628
So that should be false.

46
00:03:29.080 --> 00:03:36.396
Okay, does anyone have any ideas about
how we could take a first pass of this?

47
00:03:36.396 --> 00:03:39.330
Maybe tackle one one
piece of this problem?

48
00:03:39.330 --> 00:03:42.738
That's one of the things engineering is
all about taking a bigger problem and

49
00:03:42.738 --> 00:03:46.630
then, breaking it down into smaller,
more approachable chunks.

50
00:03:46.630 --> 00:03:48.230
&gt;&gt; Extends, read only?

51
00:03:48.230 --> 00:03:50.150
&gt;&gt; That's interesting.

52
00:03:50.150 --> 00:03:52.920
We've had to write, read only in
these conditional types before.

53
00:03:52.920 --> 00:03:53.960
Maybe we need to do that.

54
00:03:55.480 --> 00:03:59.600
I'm not sure I have enough to write
something on the screen though.

55
00:03:59.600 --> 00:04:01.920
I could write extends, read only.

56
00:04:04.461 --> 00:04:05.476
&gt;&gt; T extends.

57
00:04:05.476 --> 00:04:06.630
&gt;&gt; You're right.

58
00:04:06.630 --> 00:04:11.502
&gt;&gt; Okay?
&gt;&gt; And then any array

59
00:04:15.669 --> 00:04:23.106
Okay, almost, so close well, I actually am
not sure how close we are at this point.

60
00:04:23.106 --> 00:04:28.290
So, what we've identified here
is array like things, right,

61
00:04:28.290 --> 00:04:32.994
now this would be great if we
were implementing is array and

62
00:04:32.994 --> 00:04:36.740
this would have been true and
we would be done.

63
00:04:38.260 --> 00:04:39.780
&gt;&gt; Josefa extend extends array and.

64
00:04:39.780 --> 00:04:42.540
So [INAUDIBLE].

65
00:04:42.540 --> 00:04:45.898
&gt;&gt; If it extends array, so
it's in this branch here, right?

66
00:04:48.145 --> 00:04:51.698
Cuz if it's another tuple at all, sorry,
if it's not an array like at all,

67
00:04:51.698 --> 00:04:52.871
we still wanna be false.

68
00:04:52.871 --> 00:04:59.842
So here, Like this.

69
00:04:59.842 --> 00:05:01.726
&gt;&gt; What we're getting at?

70
00:05:04.301 --> 00:05:08.235
&gt;&gt; It's really close, but
we have different tests that light up now.

71
00:05:08.235 --> 00:05:13.343
So now it appears that all writable

72
00:05:13.343 --> 00:05:17.930
arrays are identified right?

73
00:05:17.930 --> 00:05:22.916
That's I'm just basing that
based on this the fact that this

74
00:05:22.916 --> 00:05:25.179
tuple here fails our test.

75
00:05:25.179 --> 00:05:26.963
But this one here passes.

76
00:05:29.592 --> 00:05:34.990
Sorry, read readable arrays
are what we're seeing.

77
00:05:34.990 --> 00:05:35.970
Like this one's fine.

78
00:05:38.540 --> 00:05:40.000
I want to try something wacky here.

79
00:05:41.640 --> 00:05:43.780
Again, I do not have
the solution in front of me.

80
00:05:43.780 --> 00:05:46.640
I know where to get it
if I decided to give up.

81
00:05:46.640 --> 00:05:47.558
What about this?

82
00:05:50.537 --> 00:05:51.757
Nope.

83
00:05:54.645 --> 00:05:57.260
I need a question right here.

84
00:05:57.260 --> 00:06:01.030
Okay, so
that's same as this cheat doesn't work.

85
00:06:01.030 --> 00:06:02.500
That's the same as an array here.

86
00:06:03.930 --> 00:06:08.974
Okay, so we need to know if this

87
00:06:08.974 --> 00:06:15.700
is a array like, I have an idea here.

88
00:06:15.700 --> 00:06:18.753
So something that kind of makes,

89
00:06:18.753 --> 00:06:23.768
at least by the definition of
our test cases here kind of

90
00:06:23.768 --> 00:06:30.118
makes the difference between an array and
a tupple is finite length.

91
00:06:30.118 --> 00:06:33.960
Right, finite like.

92
00:06:33.960 --> 00:06:39.162
So if we could measure the length
of something like one of

93
00:06:39.162 --> 00:06:44.932
the cool things about infinity
is what's infinity minus 1?

94
00:06:44.932 --> 00:06:48.182
&gt;&gt; Infinity
&gt;&gt; Infinity and what 7 minus 1?

95
00:06:48.182 --> 00:06:51.438
&gt;&gt; 6
&gt;&gt; So it stands to reason then if we pop

96
00:06:51.438 --> 00:06:54.389
one element out of this thing and

97
00:06:54.389 --> 00:06:59.090
compare its length links
to the original length and

98
00:06:59.090 --> 00:07:05.232
they are equal we're dealing with
an infinity what if we try that?

99
00:07:05.232 --> 00:07:09.944
We infer the length earlier
that's interesting yeah T

100
00:07:09.944 --> 00:07:12.820
square bracket length for sure.

101
00:07:14.680 --> 00:07:16.180
Yep that could work.

102
00:07:16.180 --> 00:07:17.600
Okay, so let's try this.

103
00:07:17.600 --> 00:07:21.770
I don't wanna leave a array of anys here,
because that seemed to work for us.

104
00:07:21.770 --> 00:07:26.100
So we're gonna leave this false path here,
it's false branch.

105
00:07:26.100 --> 00:07:33.440
This is not even an array thing,
and this is like array, or tuple.

106
00:07:34.970 --> 00:07:36.320
That's the path we're gonna go down.

107
00:07:37.930 --> 00:07:40.280
Okay, so we got to pop one element off.

108
00:07:40.280 --> 00:07:48.097
So we'll say, first Infer first and

109
00:07:48.097 --> 00:07:53.301
the rest again these
are just type rounders.

110
00:07:56.273 --> 00:08:00.425
Sorry They're

111
00:08:00.425 --> 00:08:04.805
just angry because I haven't used them yet
and we don't care about this first one.

112
00:08:08.409 --> 00:08:11.184
Actually, we could do that.

113
00:08:11.184 --> 00:08:18.192
So, and then we could say does, I'm just
gonna try it both ways cuz my brain hurts

114
00:08:18.192 --> 00:08:23.266
when I try to remember which
direction the extends works.

115
00:08:23.266 --> 00:08:28.401
So rest length extends.

116
00:08:31.774 --> 00:08:35.204
So okay, let's make sure
we do this in the same way.

117
00:08:35.204 --> 00:08:40.968
So T extends, so this is another
conditional type here that we need for

118
00:08:40.968 --> 00:08:43.580
plucking out that rest.

119
00:08:43.580 --> 00:08:51.786
And then we're gonna say it does
the length of rest extend T Length.

120
00:08:54.210 --> 00:09:00.935
So this is, And if it does,

121
00:09:00.935 --> 00:09:06.690
then it'll say true, otherwise false.

122
00:09:09.846 --> 00:09:15.820
Let me do my indenting here just to get
us back to where we can stay organized.

123
00:09:15.820 --> 00:09:20.531
So that's this this goes in here,
this goes in here,

124
00:09:20.531 --> 00:09:26.459
I think we need one more false Okay I want

125
00:09:26.459 --> 00:09:33.807
to switch these just in case my comparison
is the root of the problem here.

126
00:09:33.807 --> 00:09:39.460
Interesting all right so
here's what I like about this.

127
00:09:39.460 --> 00:09:41.356
These two cases down here.

128
00:09:43.825 --> 00:09:45.179
Are important.

129
00:09:45.179 --> 00:09:50.813
We have successfully evaluated
a one length tuples to true,

130
00:09:50.813 --> 00:09:56.840
and we've successfully
rejected an array of numbers.

131
00:09:56.840 --> 00:10:01.760
So I think our comparison thing
is kind of working out here.

132
00:10:01.760 --> 00:10:02.430
Read only.

133
00:10:03.520 --> 00:10:07.165
So this makes me think we should
add a read only somewhere.

134
00:10:10.305 --> 00:10:13.066
Like what about here?

135
00:10:13.066 --> 00:10:14.530
Sorry

136
00:10:24.153 --> 00:10:28.259
Just try to feel out whether there's
a constraint here, turns out there was.

137
00:10:28.259 --> 00:10:31.942
so I just made sure that anywhere I was
using this extends thing cuz that's,

138
00:10:31.942 --> 00:10:35.810
again, it's like are greater than or
equal to check but in a type world.

139
00:10:35.810 --> 00:10:40.675
We just had to make sure we had
a read-only in both of these positions so

140
00:10:40.675 --> 00:10:44.963
that this test case here could
appropriately fall through and

141
00:10:44.963 --> 00:10:46.740
hit the right path.

142
00:10:46.740 --> 00:10:51.642
The way I would have identified this,
by the way, this is the situation we

143
00:10:51.642 --> 00:10:56.069
were just in, I would have had this
equivalent test case and said,

144
00:10:56.069 --> 00:11:01.170
hey, it's not about the tuple length or
the member within it at all.

145
00:11:01.170 --> 00:11:04.730
It's the read only thing like I
have a nearly identical case.

146
00:11:04.730 --> 00:11:08.003
So that's where I would say, okay,

147
00:11:08.003 --> 00:11:12.783
something is a read only is
falling down a path based on that.

148
00:11:12.783 --> 00:11:15.093
So I'd want to make sure
that we have that there.

149
00:11:15.093 --> 00:11:16.890
That's how I sniff that out.

150
00:11:16.890 --> 00:11:19.260
All right, now, we're getting close here.

151
00:11:20.740 --> 00:11:28.045
Empty tuple, so this is a case where
our strategy is not gonna work so

152
00:11:28.045 --> 00:11:35.352
well, because our whole basis for
determining what's an array and

153
00:11:35.352 --> 00:11:40.118
what's a tuple is, measuring the length.

154
00:11:40.118 --> 00:11:43.240
So I've got two ideas
that popped into my head

155
00:11:43.240 --> 00:11:47.359
one is the cheap cop out which
is another condition in here.

156
00:11:47.359 --> 00:11:52.493
Another which I think would be even worse,
is instead of pulling something

157
00:11:52.493 --> 00:11:57.720
out of an array and comparing length,
I could push something into an array.

158
00:11:59.686 --> 00:12:02.223
That actually doesn't sound so bad.

159
00:12:02.223 --> 00:12:04.082
In fact, that makes this a lot simpler.

160
00:12:06.364 --> 00:12:08.610
That would be like this.

161
00:12:11.601 --> 00:12:16.857
And I don't have to infer anything
I can use this dot spread thing.

162
00:12:16.857 --> 00:12:19.730
I can just push one more
thing into the array.

163
00:12:19.730 --> 00:12:27.881
I'm gonna see if I can get us back there.

164
00:12:33.257 --> 00:12:35.635
And it works, wow,
that was actually easier.

165
00:12:35.635 --> 00:12:37.320
We got rid of a branch.

166
00:12:37.320 --> 00:12:41.325
So that's the approach
here instead of saying,

167
00:12:41.325 --> 00:12:44.780
let's chop one item off of the array.

168
00:12:44.780 --> 00:12:46.310
I'm saying let's put something new in.

169
00:12:46.310 --> 00:12:51.180
So array of 6 become 7,
7 and 6 are not equal.

170
00:12:51.180 --> 00:12:53.200
Therefore we're dealing with a tupple.

171
00:12:53.200 --> 00:12:56.670
If it was infinity equals
infinity in either direction,

172
00:12:56.670 --> 00:12:59.430
now we know we're dealing with an array.

173
00:12:59.430 --> 00:13:00.310
And here we go.

174
00:13:00.310 --> 00:13:03.650
So this is the key insight here.

175
00:13:03.650 --> 00:13:07.230
I see that Oscar also looks like at
the same time that I was thinking you

176
00:13:07.230 --> 00:13:07.940
about it.

177
00:13:07.940 --> 00:13:10.450
He suggested that we push into a tpple.

178
00:13:11.640 --> 00:13:16.490
So we effectively did that through
the creation of a new tuple type

179
00:13:16.490 --> 00:13:21.531
that spread the existing one and
then added one more thing, right?

180
00:13:21.531 --> 00:13:22.320
So great.

181
00:13:22.320 --> 00:13:24.640
This is how you could tell
tupple from an array.

182
00:13:24.640 --> 00:13:28.118
Now I want to add one more test
case that may totally wreck thing.

183
00:13:30.772 --> 00:13:38.995
I'm just curious as to what
will work at this point.

184
00:13:40.341 --> 00:13:43.247
This test case would have failed us.

185
00:13:43.247 --> 00:13:47.139
And I would argue this is
kind of still a tuple.

186
00:13:47.139 --> 00:13:51.899
It's a tupple of infinite length but
we still sort of have opinions

187
00:13:51.899 --> 00:13:56.390
about the types of certain
members at certain positions.

188
00:13:56.390 --> 00:14:00.139
It's not quite the same
thing as like this here.

189
00:14:13.262 --> 00:14:16.048
I'm not going to go on this rant again.

190
00:14:16.048 --> 00:14:19.470
These are not the same thing T1 and T2.

191
00:14:19.470 --> 00:14:23.947
T2 is an array T1 I have
a different constraint on

192
00:14:23.947 --> 00:14:28.969
the first member of the thing
compared to the rest of it.

193
00:14:28.969 --> 00:14:34.526
But for these test cases it worked
&gt;&gt; Does the concept of tuple

194
00:14:34.526 --> 00:14:40.230
exist outside of TypeScript or
is it specifically a typed concept?

195
00:14:40.230 --> 00:14:41.390
Does that make sense?

196
00:14:41.390 --> 00:14:48.656
&gt;&gt; The concept of tuples definitely
exists outside of Typescript and in fact,

197
00:14:48.656 --> 00:14:55.128
TypeScript just in terms of when
TypeScript was building this out,

198
00:14:55.128 --> 00:15:01.100
it had already been In Python and
Erlang for ages, right?

199
00:15:01.100 --> 00:15:07.430
So and it exists in Duck typed
languages as well, right?

200
00:15:07.430 --> 00:15:11.898
So you could create, I believe you can
create a tuple in something like Ruby,

201
00:15:11.898 --> 00:15:15.611
where just like JavaScript,
right, you just create an array,

202
00:15:15.611 --> 00:15:17.289
put whatever you want in it.

203
00:15:18.670 --> 00:15:22.740
So there are different rules in
different programming languages.

204
00:15:22.740 --> 00:15:26.740
So a lot of programming languages
consider tuples to be immutable.

205
00:15:26.740 --> 00:15:30.946
So you create them you can use
the equivalent of destruction

206
00:15:30.946 --> 00:15:35.827
assignment to pull things out of them but
you're generally not I kind

207
00:15:35.827 --> 00:15:40.558
of be like putting something in
the middle and changing its value.

208
00:15:40.558 --> 00:15:46.510
They're kind of these sort of like cheap
concise small collections of things, yeah.

209
00:15:46.510 --> 00:15:48.588
Scala uses them a lot as well.

210
00:15:50.148 --> 00:15:52.725
Good question.

211
00:15:52.725 --> 00:15:53.961
They're actually far less.

212
00:15:55.681 --> 00:15:59.300
We call them tuples in TypeScript, and
they are but they're under the hood,

213
00:15:59.300 --> 00:16:00.364
they're just a race.

214
00:16:00.364 --> 00:16:05.166
So these are more similar to arrays
than just about anywhere else that you

215
00:16:05.166 --> 00:16:07.320
would deal with a top.

216
00:16:07.320 --> 00:16:13.860
But I'm gonna skip tuple to nested object
just because of time constraints here.

217
00:16:13.860 --> 00:16:17.354
Feel free trying to
solve this on your own.

218
00:16:19.146 --> 00:16:24.022
I'll show you in general type
challenges where you can find answers.

219
00:16:24.022 --> 00:16:28.113
So there is tuple about the nested
object see this one here.

220
00:16:28.113 --> 00:16:33.887
So if you click that you'll be able to
jump to either take the challenge or

221
00:16:33.887 --> 00:16:35.599
checkout solution.

222
00:16:35.599 --> 00:16:39.380
So In terms of your answer key
this is where you could go.

