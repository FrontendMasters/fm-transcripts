WEBVTT

1
00:00:00.290 --> 00:00:04.985
All right so the next thing we're gonna
do is we're gonna talk about recent

2
00:00:04.985 --> 00:00:07.528
things that have landed in TypeScript.

3
00:00:07.528 --> 00:00:12.698
So I begin a lot of the TypeScript
courses that we have on the Frontend

4
00:00:12.698 --> 00:00:17.978
masters platform with a quick update
to what's new to the language.

5
00:00:17.978 --> 00:00:21.520
Aside from TypeScript fundamentals and
intermediate TypeScript,

6
00:00:21.520 --> 00:00:24.154
those courses kind of start
at the very beginning.

7
00:00:24.154 --> 00:00:27.961
It's good to be able to stay up
to date and I want you to know,

8
00:00:27.961 --> 00:00:31.220
kind of what are the things
you should care about?

9
00:00:31.220 --> 00:00:36.600
What are the things that impact you as
a programmer that have landed recently.

10
00:00:36.600 --> 00:00:41.520
So, this represents stuff that
has landed since the 4.0 release.

11
00:00:41.520 --> 00:00:45.291
And why have I chosen that
is sort of where we begin,

12
00:00:45.291 --> 00:00:51.373
It's really where the expressiveness of
types, has become a lot more powerful.

13
00:00:51.373 --> 00:00:57.013
It's worlds different using TypeScript
today, than even a year ago,

14
00:00:57.013 --> 00:01:02.282
there are things that couldn't be done,
which are now possible.

15
00:01:02.282 --> 00:01:07.770
And we're going to talk about
these topics here in this list.

16
00:01:07.770 --> 00:01:13.538
These are six things of the 30 or so
things that have landed in the language,

17
00:01:13.538 --> 00:01:19.770
six select things that I think will make a
difference to the way you write your code.

18
00:01:19.770 --> 00:01:22.493
A lot of the stuff in
the release notes you might not.

19
00:01:22.493 --> 00:01:26.250
Don't care about you little fixes to
the compiler performance improvements

20
00:01:26.250 --> 00:01:30.062
everybody likes those I don't need to
tell you that performance is better that

21
00:01:30.062 --> 00:01:32.275
doesn't change the way
you write your code.

22
00:01:32.275 --> 00:01:37.325
So the first thing we'll talk about
here is variadic tupple types so

23
00:01:37.325 --> 00:01:38.751
it's a huge deal.

24
00:01:43.560 --> 00:01:46.589
So first, as is sometimes the case,
in the TypeScript world,

25
00:01:46.589 --> 00:01:48.547
we have this complicated terminology.

26
00:01:48.547 --> 00:01:49.870
It's a little bit scary.

27
00:01:49.870 --> 00:01:52.852
What does variadic tupple type even mean?

28
00:01:52.852 --> 00:01:54.700
Why should you care about it?

29
00:01:54.700 --> 00:01:59.050
And I promise we'll answer that question
by the end of this little section here.

30
00:01:59.050 --> 00:02:02.617
So, I want to work our way up to
understanding what's the type,

31
00:02:02.617 --> 00:02:03.880
what's the tableau?

32
00:02:03.880 --> 00:02:05.000
What were the limitations?

33
00:02:05.000 --> 00:02:08.640
What can we do now that's different and
why does that matter to you?

34
00:02:08.640 --> 00:02:11.040
That's kind of our order
of operations here.

35
00:02:11.040 --> 00:02:17.700
So, first, if you've never worked with
tableau types before, they're great.

36
00:02:17.700 --> 00:02:22.465
They're kind of think of them almost
like a fixed length array where we

37
00:02:22.465 --> 00:02:24.980
know the type at any given position.

38
00:02:24.980 --> 00:02:28.896
So instead of having
an arbitrary array of numbers,

39
00:02:28.896 --> 00:02:33.613
we could have a tupple of length
three that represents a color,

40
00:02:33.613 --> 00:02:39.670
each being an eight bit number, so
like 00255, that could be red, right?

41
00:02:39.670 --> 00:02:44.312
And we can pass around this array and
there's sort of a special meaning that

42
00:02:44.312 --> 00:02:49.480
the first position second and third that's
the R, G and B channels respectively.

43
00:02:49.480 --> 00:02:52.585
So we could use an object for
this as well but

44
00:02:52.585 --> 00:02:56.826
sometimes there are advantages
to using tuples instead.

45
00:02:56.826 --> 00:02:58.031
And for a while,

46
00:02:58.031 --> 00:03:03.750
we've been able to use a spread operator
as the last element of the tuple.

47
00:03:03.750 --> 00:03:09.523
So I'm going to set the stage with a more
interesting example here than color,

48
00:03:09.523 --> 00:03:12.422
where a tuple to me makes a lot of sense.

49
00:03:12.422 --> 00:03:14.730
So let's imagine we're running a deli and

50
00:03:14.730 --> 00:03:17.430
we sell a bunch of different
types of sandwiches.

51
00:03:17.430 --> 00:03:20.220
So here's an inn umm for sandwiches.

52
00:03:20.220 --> 00:03:24.640
So these will each be
a number effectively.

53
00:03:24.640 --> 00:03:28.968
Like you can see hamburger equals zero.

54
00:03:28.968 --> 00:03:31.260
Veggie burger equals 1, right?

55
00:03:31.260 --> 00:03:35.720
And then we have a couple type
that represents a sandwich order.

56
00:03:35.720 --> 00:03:39.845
And you can see here in the first
position we have the order total,

57
00:03:39.845 --> 00:03:44.045
in the second position,
we have the sandwich and let's pretend.

58
00:03:44.045 --> 00:03:47.365
And at this deli,
you can only order one sandwich at a time.

59
00:03:47.365 --> 00:03:50.805
Just to make my contrived example work.

60
00:03:50.805 --> 00:03:55.468
[LAUGH] So you can have one
sandwich followed by an arbitrary

61
00:03:55.468 --> 00:04:00.055
number of toppings, and
that's a string array.

62
00:04:00.055 --> 00:04:03.655
So this tuples going to look like,
number, and

63
00:04:03.655 --> 00:04:08.250
then a sandwich and
then any number of strings could follow.

64
00:04:09.920 --> 00:04:13.054
So if we were to create
a couple orders here,

65
00:04:13.054 --> 00:04:17.645
we've got one that's a hamburger
with lettuce and a 1299.

66
00:04:17.645 --> 00:04:21.168
And then we've got a second one and
you can see like the price is a little

67
00:04:21.168 --> 00:04:25.231
different maybe we're like up charging
because we're using avocado here, but

68
00:04:25.231 --> 00:04:27.340
you can see we can have multiple strings.

69
00:04:27.340 --> 00:04:30.885
And if we look at this you can
see in the tooltip This is

70
00:04:30.885 --> 00:04:34.592
a tuple it does not necessarily
have fixed length, but

71
00:04:34.592 --> 00:04:40.170
there is some understanding we have about
the types at each position in the tuple.

72
00:04:40.170 --> 00:04:43.730
And you can see, like type checking
works the way we would hope it does.

73
00:04:43.730 --> 00:04:47.114
If we forget the sandwich as
we have in this last example,

74
00:04:47.114 --> 00:04:51.990
we can see that type checking tells us
hey, I didn't expect to find lettuce here.

75
00:04:51.990 --> 00:04:56.110
So this is,
this is an example we'll be using,

76
00:04:56.110 --> 00:05:00.544
as we understand more about
variadic tupple type.

77
00:05:00.544 --> 00:05:05.919
And the key here, the thing you
probably have not done before is this

78
00:05:05.919 --> 00:05:11.032
having a rest or a spread element
as that last thing in the tuple.

79
00:05:13.090 --> 00:05:17.190
It has been possible but
an unusual to use it.

80
00:05:17.190 --> 00:05:19.970
So it's even possible to
use this in a generic way.

81
00:05:19.970 --> 00:05:24.781
And if we look at this,
you can see I've got this type T and

82
00:05:24.781 --> 00:05:31.750
I can have a number followed by any number
of T's that I care to put in there.

83
00:05:31.750 --> 00:05:36.197
And so here you can see like we've got
the string case and the Boolean case.

84
00:05:36.197 --> 00:05:40.165
The important thing is you have to
use at least before TypeScript for

85
00:05:40.165 --> 00:05:42.730
before these variadic tupple types.

86
00:05:42.730 --> 00:05:46.858
You absolutely had to use T
as the member of the array.

87
00:05:46.858 --> 00:05:52.510
And then you had to say, we've got dot,
dot, dot and an array of T's.

88
00:05:52.510 --> 00:05:54.380
This is where we encounter a problem.

89
00:05:56.470 --> 00:05:58.096
So let me show you what you
would have gotten if you

90
00:05:58.096 --> 00:05:59.255
tried to do something different.

91
00:05:59.255 --> 00:06:04.028
Let's say we wanted to do this
a different way, instead of saying,

92
00:06:04.028 --> 00:06:08.990
I have a member, membertype, and
here's an array of those members.

93
00:06:08.990 --> 00:06:12.630
What if we wanted to say
T is an arrayish thing.

94
00:06:13.930 --> 00:06:18.546
And I want to do ...T instead,
in TypeScript three,

95
00:06:18.546 --> 00:06:21.407
you would have gotten this error.

96
00:06:21.407 --> 00:06:25.967
It would have said and by the way this is
a terrible error message a rest element

97
00:06:25.967 --> 00:06:30.610
type must be an array type and over here
like this looks like an array type to me.

98
00:06:31.650 --> 00:06:35.840
This is in fact any array, right?

99
00:06:35.840 --> 00:06:37.718
So this has been fixed but

100
00:06:37.718 --> 00:06:41.926
Let's talk about why this
matters why should you care.

101
00:06:41.926 --> 00:06:46.652
It seems like we've drilled way down we
found this little like exotic specific

102
00:06:46.652 --> 00:06:50.821
failing case why should you care so
returning to our sandwich order.

103
00:06:52.380 --> 00:06:55.861
We've created an order here
hamburger with lettuce and

104
00:06:55.861 --> 00:07:00.389
let's say that we have a function we
use to pass our order to the kitchen.

105
00:07:00.389 --> 00:07:05.029
And the kitchen does not care about how
much this costs they just care about what

106
00:07:05.029 --> 00:07:09.480
is the sandwich, what are the toppings
I need to put on the sandwich?

107
00:07:09.480 --> 00:07:14.166
So let's say we have a function that is
meant to get the tail of the array and

108
00:07:14.166 --> 00:07:17.578
if you've done any functional
programming before.

109
00:07:17.578 --> 00:07:21.566
Tail is probably something
that you're familiar with,

110
00:07:21.566 --> 00:07:25.384
it just all we're doing is
we're taking an array in and

111
00:07:25.384 --> 00:07:29.220
this allows us to do this with
read only arrays as well.

112
00:07:29.220 --> 00:07:33.255
So, if you're using immutable
data structures of some kinda,

113
00:07:33.255 --> 00:07:38.150
this would also work and you can see here,
the first thing's a number.

114
00:07:38.150 --> 00:07:40.187
We have an array of Ts following that.

115
00:07:40.187 --> 00:07:44.606
We can kind of chop off this
first thing and ignore it.

116
00:07:44.606 --> 00:07:49.070
Get everything else in the array and
return that everything else.

117
00:07:49.070 --> 00:07:54.127
So effectively we're like chopping off the
first thing giving you everything else and

118
00:07:54.127 --> 00:07:55.310
look at what we get.

119
00:07:56.770 --> 00:08:01.300
I would argue that in this situation,
we have lost information.

120
00:08:01.300 --> 00:08:06.342
We get instead of a nice tupple type,
we get an array type that says.

121
00:08:06.342 --> 00:08:11.310
This is a shuffled mix of maybe some
sandwiches maybe some toppings.

122
00:08:12.840 --> 00:08:15.160
My argument here is,
we have lost information, right.

123
00:08:15.160 --> 00:08:19.700
So if I give you a deck of cards and
I say there are four aces on top.

124
00:08:19.700 --> 00:08:24.916
Here you go compared to like just mixing
them up down here and handing them to you,

125
00:08:24.916 --> 00:08:28.920
you know less about that second
deck of cards that I shuffled.

126
00:08:28.920 --> 00:08:33.350
So this is less information,
it's less specific.

127
00:08:33.350 --> 00:08:40.540
Where this trouble happens is it has
to do with this thing here, right?

128
00:08:40.540 --> 00:08:42.780
This is where we're saying.

129
00:08:42.780 --> 00:08:47.630
I need I have this type t,
an array of ts, right?

130
00:08:47.630 --> 00:08:50.000
And I need to match that with this.

131
00:08:50.000 --> 00:08:53.891
And when this inference happens this could
be a mixed array of any length, right?

132
00:08:53.891 --> 00:08:58.093
So when we say like, we compare these two
things and the left and the right and

133
00:08:58.093 --> 00:08:59.152
we say, what is T?

134
00:08:59.152 --> 00:09:01.600
Well, it could be either of these things.

135
00:09:01.600 --> 00:09:04.743
This is where things break down and
where yeah,

136
00:09:04.743 --> 00:09:10.260
this isn't a valid answer to the question,
but we lost information in doing this.

137
00:09:10.260 --> 00:09:16.063
So like, here's another example
it simplifies things even

138
00:09:16.063 --> 00:09:22.788
further this function here all it
does is return the array you give it.

139
00:09:22.788 --> 00:09:27.944
But in doing the same kind of
inference Is where we pass

140
00:09:27.944 --> 00:09:32.764
in this array or this topple,
so it comes in here.

141
00:09:32.764 --> 00:09:37.884
And we return the same thing
you can see in the tooltip,

142
00:09:37.884 --> 00:09:43.020
that T is being regarded as sandwich or
topic, right?

143
00:09:43.020 --> 00:09:44.650
Hamburger or lettuce.

144
00:09:44.650 --> 00:09:46.585
So that's where the problem is happening.

145
00:09:46.585 --> 00:09:49.210
That's where we're making
that type equivalence check.

146
00:09:52.530 --> 00:09:55.624
What we want instead is
something like this.

147
00:09:55.624 --> 00:10:01.241
So here, we're going to our different
scenario where we're saying,

148
00:10:01.241 --> 00:10:06.105
I have an arrayish thing Type T
is some type of tupple or array,

149
00:10:06.105 --> 00:10:09.210
some ordered collection of some sort.

150
00:10:09.210 --> 00:10:15.997
And I want to infer T,
not an array of Ts, T.

151
00:10:15.997 --> 00:10:18.930
Things work out much better for us here.

152
00:10:18.930 --> 00:10:21.649
You can see it's a very similar function.

153
00:10:21.649 --> 00:10:23.740
It's literally the same
implementation here, right?

154
00:10:23.740 --> 00:10:26.480
We've got just return arg.

155
00:10:26.480 --> 00:10:31.430
But just the way we've expressed, is the
type the array or is the type the member.

156
00:10:31.430 --> 00:10:34.764
That makes a huge difference for
us here, we don't lose information now.

157
00:10:40.132 --> 00:10:43.530
And this is the small change that
we can make to this tail function.

158
00:10:43.530 --> 00:10:47.162
So, we have been able to
do this the whole time.

159
00:10:47.162 --> 00:10:52.150
This was possible in TypeScript three
on a function, but not on tuples.

160
00:10:52.150 --> 00:10:59.039
So now, we can do this,
where we go from this is T,

161
00:10:59.039 --> 00:11:06.930
I'm taking an array of them
to this is an arrayish thing.

162
00:11:06.930 --> 00:11:11.580
Infer what that thing is,
that's happening over here.

163
00:11:11.580 --> 00:11:15.363
And now, we get the same nice result out.

164
00:11:15.363 --> 00:11:20.003
So this means that when the kitchen gets
the order, when we chop off that 1299,

165
00:11:20.003 --> 00:11:24.800
now we've got, here's the sandwich, here
are all the toppings that come off of it.

166
00:11:24.800 --> 00:11:30.370
So why does this matter?

167
00:11:30.370 --> 00:11:36.420
I've given you one example and we can see
in the tooltips we get a different result.

168
00:11:36.420 --> 00:11:40.855
If using everyday TypeScript
code where might you see this?

169
00:11:40.855 --> 00:11:45.425
Arguments, function arguments
types are often going

170
00:11:45.425 --> 00:11:48.410
through the type system as tuples.

171
00:11:48.410 --> 00:11:52.404
So, if you're trying to get like the
arguments of a particular constructor or

172
00:11:52.404 --> 00:11:55.974
something like that this is where you
would have gotten kind of a jumble

173
00:11:55.974 --> 00:11:56.591
of things.

174
00:11:56.591 --> 00:12:00.897
Whereas now you've kind of preserved
the order if there's a rest element at

175
00:12:00.897 --> 00:12:03.669
the end,
you'll get the correct type for that.

176
00:12:03.669 --> 00:12:07.065
And you may not be creating types
like this in your own code but

177
00:12:07.065 --> 00:12:10.560
libraries you use might be
sort of feeding them to you.

178
00:12:10.560 --> 00:12:14.655
And this will have an impact on what
works in your code and what doesn't and

179
00:12:14.655 --> 00:12:17.777
your ability to catch bugs
before they hit production.

180
00:12:17.777 --> 00:12:23.262
So this is one of those lower level
things seems like a subtle fix,

181
00:12:23.262 --> 00:12:26.870
but it has pretty massive ramifications.

182
00:12:26.870 --> 00:12:30.520
Another thing that you can do
is multiple spreads in tuples.

183
00:12:30.520 --> 00:12:32.710
So that's part of this feature set.

184
00:12:32.710 --> 00:12:36.780
And we have greater flexibility
around Rest elements.

185
00:12:36.780 --> 00:12:40.296
So this is something that
you don't often see but

186
00:12:40.296 --> 00:12:45.360
it's possible, you could say I
have a tuple that's a Boolean.

187
00:12:45.360 --> 00:12:49.780
And then any amount of numbers you like
but it must be followed by a string.

188
00:12:51.870 --> 00:12:55.110
So hopefully, this kind of explains
why you think about this type.

189
00:12:55.110 --> 00:12:58.371
We think about these as fixed length
things where it's just number,

190
00:12:58.371 --> 00:13:00.820
number string,
something very simple like that.

191
00:13:00.820 --> 00:13:05.600
But there's a lot of flexibility here and
this opens some major

192
00:13:05.600 --> 00:13:10.300
new doors in terms of how we can
express things in type script.

193
00:13:10.300 --> 00:13:16.425
So, as a practical example,
to connect this further back to reality,

194
00:13:16.425 --> 00:13:19.805
who has used RX JS before or heard of it?

195
00:13:19.805 --> 00:13:21.635
Okay, a couple people.

196
00:13:21.635 --> 00:13:25.385
So the idea behind RX js is there
are these things called observables.

197
00:13:25.385 --> 00:13:28.353
You can think of these as like
little beacons that emit events,

198
00:13:28.353 --> 00:13:31.050
almost like a promise that
could resolve more than once.

199
00:13:31.050 --> 00:13:34.937
Where every time you move your mouse or
every time you click a button,

200
00:13:34.937 --> 00:13:39.380
this thing fires and you create a chain
of things that attach to an observable.

201
00:13:39.380 --> 00:13:42.660
And that's usually where you'll
respond to these kinds of events.

202
00:13:42.660 --> 00:13:47.290
So I told you that function
arguments are where you can see this

203
00:13:47.290 --> 00:13:49.080
tupple type in action.

204
00:13:49.080 --> 00:13:53.820
Here is a pull request
showing the back flips that,

205
00:13:53.820 --> 00:13:58.227
that the RX JS folks had
to do in order to deal with

206
00:13:58.227 --> 00:14:04.050
the limitation of not having
these variadic tupple types.

207
00:14:04.050 --> 00:14:07.434
You can see they basically had
a separate type signature for

208
00:14:07.434 --> 00:14:11.912
the one argument, the two argument,
the three arguments for argument five.

209
00:14:11.912 --> 00:14:15.862
All the way to the sixth argument
flavor of this function and

210
00:14:15.862 --> 00:14:19.744
they're able to replace that
with a couple things right.

211
00:14:19.744 --> 00:14:24.065
We no longer have like T one through
six we can just say look now that

212
00:14:24.065 --> 00:14:26.894
the tupple works the way
I would hope it does

213
00:14:26.894 --> 00:14:30.210
If we can shrink all this
way down we can simplify.

214
00:14:30.210 --> 00:14:32.773
So even if you aren't writing this code,

215
00:14:32.773 --> 00:14:36.804
this is gonna be much faster much
less confusing when you see those

216
00:14:36.804 --> 00:14:40.413
little tool tips pop up like
you don't have to now look at.

217
00:14:40.413 --> 00:14:43.466
That this tooltip says there
are 17 different options for

218
00:14:43.466 --> 00:14:46.092
calling merge like You're
looking at 3 of 17 and

219
00:14:46.092 --> 00:14:49.830
you're sort of clicking through to
figure out which one you should use.

220
00:14:49.830 --> 00:14:54.498
Now, everything can be more
concisely represented into a fewer

221
00:14:54.498 --> 00:14:57.792
number of signatures
that kind of just work.

222
00:14:57.792 --> 00:15:01.297
So your documentation is gonna be
better t things will be simpler and

223
00:15:01.297 --> 00:15:02.966
easier to read and understand.

224
00:15:02.966 --> 00:15:07.153
And you can see like they're still
working on cleaning these up but

225
00:15:07.153 --> 00:15:12.186
you can see elsewhere, all of these
places where they've got T T2 T 3 T4 T5.

226
00:15:12.186 --> 00:15:15.223
That's the code being removed and
what's added is,

227
00:15:15.223 --> 00:15:18.598
these tupple types with this
spread operators because they

228
00:15:18.598 --> 00:15:22.460
that now we'll grab the information
the way it should have worked.

