WEBVTT

1
00:00:00.110 --> 00:00:04.653
All right, next up,
we're going to get out our editors or

2
00:00:04.653 --> 00:00:09.386
IDEs and we're gonna tackle
another typing challenge, and

3
00:00:09.386 --> 00:00:12.330
we're going to invent jQuery.

4
00:00:12.330 --> 00:00:17.314
So for those of you who don't have context
about what jQuery is, because it's

5
00:00:17.314 --> 00:00:22.690
sort of not a main focus of buzz in
the web development community anymore.

6
00:00:22.690 --> 00:00:27.175
This was a very important library that was
built at a time where the DOM APIs and

7
00:00:27.175 --> 00:00:31.177
even things you could expect in
the JavaScript runtime in a browser,

8
00:00:31.177 --> 00:00:33.109
they were fairly inconsistent.

9
00:00:33.109 --> 00:00:37.482
Even just the way that you would add
an event listener to see if a button was

10
00:00:37.482 --> 00:00:42.360
clickediIn early versions of Internet
Explorer, you would do that differently

11
00:00:42.360 --> 00:00:46.823
than in Chrome, or at least there would
be certain paths that were buggy.

12
00:00:46.823 --> 00:00:51.869
And jQuery, that was one of the first
things that gave us a consistent

13
00:00:51.869 --> 00:00:56.828
thing to code against,
consistent abstraction to build on top of,

14
00:00:56.828 --> 00:01:00.569
to build more interesting
code that ran in the web,

15
00:01:00.569 --> 00:01:05.110
written in one way that works
across a wide range of browsers.

16
00:01:05.110 --> 00:01:10.178
So we are going to write something
that looks like the jQuery API,

17
00:01:10.178 --> 00:01:13.310
but uses the DOM API
that we now have under

18
00:01:13.310 --> 00:01:18.036
the hood to do all of the stuff
that things are intended to do.

19
00:01:18.036 --> 00:01:23.490
So, what I've done here and
slightly altered is the code snippets,

20
00:01:23.490 --> 00:01:27.449
I've taken the code
snippets from jquery.com.

21
00:01:27.449 --> 00:01:32.200
This is sort of their very quick and
dirty getting started thing, right?

22
00:01:32.200 --> 00:01:36.985
Where we grab a button and
we set its label to next step,

23
00:01:36.985 --> 00:01:41.680
dot, dot, dot, and
we can handle an event, right?

24
00:01:41.680 --> 00:01:45.316
Like when a button is clicked,
show a hidden box.

25
00:01:45.316 --> 00:01:46.820
And down here we have Ajax.

26
00:01:46.820 --> 00:01:50.456
This was super important at the time.

27
00:01:50.456 --> 00:01:56.252
Before that you had to do, what I would
say are some unreasonable backflips

28
00:01:56.252 --> 00:02:02.884
to send asynchronous to make API calls,
right, without fully reloading your page.

29
00:02:02.884 --> 00:02:05.382
So three really Important use cases,

30
00:02:05.382 --> 00:02:11.610
we have slightly altered equivalents down
here, I've just simplified them slightly.

31
00:02:11.610 --> 00:02:17.270
And your job is to make some code that
allows a snippet like this to run.

32
00:02:18.560 --> 00:02:21.849
So it's in the same workshop
project you have checked out.

33
00:02:21.849 --> 00:02:25.925
It's in that challenges folder,
we're calling this jquery-clone.

34
00:02:25.925 --> 00:02:30.125
And the entry point is within that folder,
there's a source folder and

35
00:02:30.125 --> 00:02:33.210
index.ts, all of your work
should be in that file.

36
00:02:34.410 --> 00:02:35.580
So, some hints.

37
00:02:36.660 --> 00:02:42.674
First, you're gonna want to use fetch,
and please feel free to ping me or

38
00:02:42.674 --> 00:02:47.136
raise your hand if you don't
know how to use fetch, but

39
00:02:47.136 --> 00:02:54.310
this is gonna be important in terms of
making that Ajax thing work, $.ajax.

40
00:02:54.310 --> 00:02:58.380
And then second,
remember how declaration merging works.

41
00:02:58.380 --> 00:03:04.720
So, in this case, you may notice that
jQuery is sometimes a function, right?

42
00:03:04.720 --> 00:03:08.740
This is a function invocation here,
the function is just called $.

43
00:03:08.740 --> 00:03:13.300
And sometimes jQuery has
these things hanging off it,

44
00:03:13.300 --> 00:03:16.480
like Ajax, and those are functions.

45
00:03:16.480 --> 00:03:21.282
So in order to get sort of like a function
with extra things dangling off of it, in

46
00:03:21.282 --> 00:03:26.249
order to define the types for that, we can
create a namespace and a function type.

47
00:03:26.249 --> 00:03:30.108
And they sort of ride on top of each
other through declaration merging, and

48
00:03:30.108 --> 00:03:31.652
we can export that one thing.

49
00:03:31.652 --> 00:03:35.740
So if you've ever wondered,
why does this namespace thing exist?

50
00:03:35.740 --> 00:03:37.890
Why is declaration merging so important?

51
00:03:37.890 --> 00:03:42.151
A key thing about TypeScript is, we have
to be able to write types that describe

52
00:03:42.151 --> 00:03:46.170
a whole variety of different kinds
of JavaScript code like this, right?

53
00:03:46.170 --> 00:03:49.920
There's still jQuery being written
out in the world with types,

54
00:03:49.920 --> 00:03:52.045
we need an ability to describe that.

55
00:03:52.045 --> 00:03:54.021
So that's why if you've ever wondered,

56
00:03:54.021 --> 00:03:56.623
why would I stack things on
top of each other like this?

57
00:03:56.623 --> 00:04:02.482
This is a perfectly valid use case a very,
very popular library, even now.

58
00:04:02.482 --> 00:04:08.110
So there are tests, you can run Yarn
tests within that jquery-clone folder and

59
00:04:08.110 --> 00:04:10.298
you should see some feedback.

