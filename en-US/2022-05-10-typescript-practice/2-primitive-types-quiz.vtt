WEBVTT

1
00:00:00.320 --> 00:00:01.751
Okay, now, this,

2
00:00:01.751 --> 00:00:07.574
we're gonna get much more interesting here
in the world of TypeScript and types.

3
00:00:07.574 --> 00:00:12.160
And I expect this'll be
a larger discussion of sorts.

4
00:00:12.160 --> 00:00:16.788
So in this example, we're being asked
to look at the types of first and

5
00:00:16.788 --> 00:00:20.550
second below, and
the compile error messages.

6
00:00:20.550 --> 00:00:25.140
And we're being asked what does
this tell us about how string

7
00:00:25.140 --> 00:00:30.130
with a lowercase s and
String with a capital S are different?

8
00:00:30.130 --> 00:00:33.010
So let's look at this
code example carefully.

9
00:00:33.010 --> 00:00:36.911
So we have a variable
declaration called first, and

10
00:00:36.911 --> 00:00:41.619
we have the lowercase string,
and then and, and then number.

11
00:00:41.619 --> 00:00:45.233
And then below that, we have second,
and then we have a similar type,

12
00:00:45.233 --> 00:00:48.650
except we're using the capital
letter versions of these.

13
00:00:48.650 --> 00:00:52.817
So you may have heard before you always
want to use this lowercase version of

14
00:00:52.817 --> 00:00:55.873
string and number, and
these these primitive types.

15
00:00:55.873 --> 00:00:58.722
And by the end of this discussion,

16
00:00:58.722 --> 00:01:04.616
I think you will believe even more that
that is the best way to do things,

17
00:01:04.616 --> 00:01:08.756
because stuff gets weird
if you use this variant.

18
00:01:08.756 --> 00:01:11.574
So let's look at what happens here.

19
00:01:11.574 --> 00:01:14.583
And by the way,
in these code examples, this is,

20
00:01:14.583 --> 00:01:17.500
to some extent, VS Code in your browser.

21
00:01:17.500 --> 00:01:22.881
So if you're following along on the
website, you can hover over these symbols,

22
00:01:22.881 --> 00:01:27.807
and you can see the types right on
tooltips, just as if it's your editor.

23
00:01:27.807 --> 00:01:33.360
So the type of first is never.

24
00:01:33.360 --> 00:01:36.835
So who can tell me what never
means in the world of TypeScript?

25
00:01:37.974 --> 00:01:42.406
What kinds of values will
make this variable happy?

26
00:01:42.406 --> 00:01:42.972
&gt;&gt; No values.

27
00:01:42.972 --> 00:01:43.972
&gt;&gt; No values, right?

28
00:01:43.972 --> 00:01:49.711
So in terms of the set of things I
could pass to first to make it happy,

29
00:01:49.711 --> 00:01:51.980
it is the empty set.

30
00:01:51.980 --> 00:01:57.386
So we can see that the type of
first is never, meaning there is no

31
00:01:57.386 --> 00:02:04.210
value that we could give to first that
would make it type check properly.

32
00:02:04.210 --> 00:02:06.444
The only thing we could
give it is a never.

33
00:02:06.444 --> 00:02:08.870
It's effectively, it's an impossibility.

34
00:02:08.870 --> 00:02:13.424
For example, you could end up with a never
if you took a number, and you could say,

35
00:02:13.424 --> 00:02:17.310
well, if it's greater than or
equal to zero, do this one thing.

36
00:02:17.310 --> 00:02:20.259
And if it's less than zero,
do this other thing.

37
00:02:20.259 --> 00:02:25.198
And then you follow it with one more else
block, a number that's neither zero,

38
00:02:25.198 --> 00:02:28.300
nor greater than zero, nor less than zero.

39
00:02:28.300 --> 00:02:29.300
What is that number?

40
00:02:29.300 --> 00:02:30.054
What could that be?

41
00:02:30.054 --> 00:02:33.276
And the answer is there is no number,
right?

42
00:02:33.276 --> 00:02:34.377
That's a never.

43
00:02:34.377 --> 00:02:36.014
That's what we mean by an empty set.

44
00:02:36.014 --> 00:02:41.800
It's sort of we've crossed everything
off of the list of what this could be.

45
00:02:41.800 --> 00:02:43.130
That's what that means.

46
00:02:43.130 --> 00:02:45.234
So that's the type of first.

47
00:02:45.234 --> 00:02:48.992
And you might expect, well,
the way we've defined second,

48
00:02:48.992 --> 00:02:50.880
that type looks very similar.

49
00:02:50.880 --> 00:02:52.765
I mean, it's just a capital letter.

50
00:02:52.765 --> 00:02:58.464
Maybe String with a capital letter is just
sort of an alias for the lowercase string.

51
00:02:58.464 --> 00:03:02.199
But if we look at that,
it turns out it's different.

52
00:03:02.199 --> 00:03:06.515
And by the way,
if we think about why first is never,

53
00:03:06.515 --> 00:03:12.710
somebody give me an example of something
that is both a string and a number.

54
00:03:13.870 --> 00:03:18.811
It's hard to think about that, right?

55
00:03:18.811 --> 00:03:20.210
Somebody write that in the chat.

56
00:03:20.210 --> 00:03:22.742
Give me an example of something
that's both a string and a number.

57
00:03:22.742 --> 00:03:26.200
It's really we're kind of at a loss.

58
00:03:26.200 --> 00:03:27.573
That's why we end up with never.

59
00:03:27.573 --> 00:03:32.057
But here, second seems to be looking for
exactly that, something that's both.

60
00:03:32.057 --> 00:03:40.000
It's some hybrid string and number thing,
but at the same time, not never.

61
00:03:40.000 --> 00:03:43.326
And we can see that our error message
is a little bit different here.

62
00:03:43.326 --> 00:03:47.697
You can see we're attempting
to assign it to a string.

63
00:03:47.697 --> 00:03:51.240
And we're getting an error
that's telling us wait a minute,

64
00:03:51.240 --> 00:03:53.780
it has to be both a string and a number.

65
00:03:53.780 --> 00:03:57.095
And yeah,
I'm okay with the string part, but

66
00:03:57.095 --> 00:04:00.421
what you gave me is not
assignable to a number.

67
00:04:00.421 --> 00:04:05.196
You're missing the number aspect
of what I need to be given.

68
00:04:05.196 --> 00:04:10.260
And finally, here's another thing
that adds to the confusion.

69
00:04:10.260 --> 00:04:14.527
This line down here,
if we use the string constructor, which,

70
00:04:14.527 --> 00:04:17.221
this should look kind of strange to you.

71
00:04:17.221 --> 00:04:19.734
We don't typically create
strings this way in JavaScript.

72
00:04:19.734 --> 00:04:23.700
We get yet
another different error message.

73
00:04:23.700 --> 00:04:26.187
And here we're saying all right,

74
00:04:26.187 --> 00:04:30.661
String with a capital S is not
assignable to String &amp; Number.

75
00:04:30.661 --> 00:04:33.390
And up here,
you can see we had a lowercase s.

76
00:04:33.390 --> 00:04:37.050
So it seems like it's being regarded
as a different type of sorts.

77
00:04:37.050 --> 00:04:41.839
And then this final line down here,
now we get deeper information about how,

78
00:04:41.839 --> 00:04:47.350
look, it's not just that this lowercase
string is not assignable to type number.

79
00:04:47.350 --> 00:04:51.735
Now, we're being told we're missing
some properties, and we might

80
00:04:51.735 --> 00:04:56.940
recognize that these are properties
that one might find on numbers, right?

81
00:04:56.940 --> 00:05:01.238
toFixed, toFixed is what you would
use to get the correct number of

82
00:05:01.238 --> 00:05:04.093
significant digits after a decimal point.

83
00:05:04.093 --> 00:05:10.870
If you're printing out dollars and
cents, you might use toFixed.

84
00:05:10.870 --> 00:05:15.541
So seems like these are different.

85
00:05:15.541 --> 00:05:20.509
So in terms of what this might tell
you about how you should build

86
00:05:20.509 --> 00:05:25.759
your mental model, we can see that
when we use lowercase string and

87
00:05:25.759 --> 00:05:29.910
lowercase number,
we end up with this never thing.

88
00:05:31.300 --> 00:05:35.142
But when we use these uppercase
versions of these types,

89
00:05:35.142 --> 00:05:37.393
we see that we don't get a never.

90
00:05:37.393 --> 00:05:42.131
We get what appears to be
the combination of the two interfaces

91
00:05:42.131 --> 00:05:46.794
that contain the methods on string,
the methods on number.

92
00:05:46.794 --> 00:05:49.181
So something is different here.

93
00:05:49.181 --> 00:05:53.988
And it has to kind of do with
what is different about these

94
00:05:53.988 --> 00:05:59.010
two types about string
versus interface string?

95
00:05:59.010 --> 00:06:04.630
So building on this example, again,
we have first and we have second.

96
00:06:04.630 --> 00:06:08.340
What we're gonna do is try to
create this impossible thing,

97
00:06:08.340 --> 00:06:11.916
this impossible thing that's
both a string and a number.

98
00:06:11.916 --> 00:06:16.912
So here you can see if we just try to
create a new type called Foo that is

99
00:06:16.912 --> 00:06:21.820
both a string and a number,
it's extending to other interfaces,

100
00:06:21.820 --> 00:06:27.367
we get error messages telling us that
there is some kind of collision here.

101
00:06:27.367 --> 00:06:32.123
toString, valueOf, there's something
different about these in string and

102
00:06:32.123 --> 00:06:32.777
a number.

103
00:06:32.777 --> 00:06:36.867
And when we try to merge them together,
something goes wrong.

104
00:06:36.867 --> 00:06:41.276
But we can kinda collaborate together by

105
00:06:41.276 --> 00:06:45.952
explicitly specifying these in this way.

106
00:06:45.952 --> 00:06:49.173
So we can create this thing called bar,

107
00:06:49.173 --> 00:06:53.769
that it extends both the string and
number interfaces.

108
00:06:53.769 --> 00:06:56.640
And we can even create
a value of that type.

109
00:06:58.876 --> 00:07:03.345
So [LAUGH] I'm using the spread operator
to get both everything that's on number,

110
00:07:03.345 --> 00:07:05.300
and everything that's on string.

111
00:07:06.580 --> 00:07:11.038
And then I have to explicitly
do one little dirty cast here,

112
00:07:11.038 --> 00:07:14.884
so that I get a never type
as the return of the value.

113
00:07:14.884 --> 00:07:20.270
And here we go,
we can actually complete an assignment.

114
00:07:22.170 --> 00:07:24.643
And this is our string and
number hybrid, but

115
00:07:24.643 --> 00:07:28.320
you see it still doesn't make
this first variable happy.

116
00:07:28.320 --> 00:07:33.326
So what this should tell you about
the mental model you should form here is,

117
00:07:33.326 --> 00:07:37.069
number one,
use the lowercase flavors of these types.

118
00:07:37.069 --> 00:07:40.986
They are the sort of atomic
lowest level things.

119
00:07:40.986 --> 00:07:44.870
You see, if we try to hover over string
here, we don't really get a tooltip.

120
00:07:44.870 --> 00:07:49.210
It's one of the most fundamental
building blocks of the type system here.

121
00:07:50.250 --> 00:07:55.014
Use these, they are fundamentally
different than these,

122
00:07:55.014 --> 00:07:57.595
because these are the methods.

123
00:07:57.595 --> 00:08:01.860
This is the interface that describes
what can be done with the string.

124
00:08:01.860 --> 00:08:05.696
But their richness will also
introduce some complexity,

125
00:08:05.696 --> 00:08:10.640
and you don't end up with the types
that you might think that you would get.

126
00:08:11.900 --> 00:08:15.651
So it may seem like a benign little,
like a best practice.

127
00:08:15.651 --> 00:08:20.310
We don't really understand why we do it
one way versus the other, but this can

128
00:08:20.310 --> 00:08:25.131
result in some serious ramifications to
your codebase if you use the wrong one.

129
00:08:25.131 --> 00:08:28.471
So we can create this thing that's
both a string and a number, but

130
00:08:28.471 --> 00:08:30.372
we have to do it in sort of a hacky way.

131
00:08:30.372 --> 00:08:35.286
And this is a good reason to stay
away from the interfaces and

132
00:08:35.286 --> 00:08:38.350
stick to these, string and number.

