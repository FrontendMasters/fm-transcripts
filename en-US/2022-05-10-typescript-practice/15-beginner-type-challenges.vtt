WEBVTT

1
00:00:00.260 --> 00:00:06.620
This is one of my favorite ways to stay
sharp and practice my use of TypeScript.

2
00:00:06.620 --> 00:00:12.230
There's a project fairly popular
one called type challenges.

3
00:00:12.230 --> 00:00:17.340
So on GitHub, its type challenges
is the org and the repo name.

4
00:00:17.340 --> 00:00:20.259
And you can see it's pretty popular,
almost 15,000 stars.

5
00:00:21.440 --> 00:00:25.639
Effectively this is a place
where you can try to solve

6
00:00:25.639 --> 00:00:30.040
interesting problems using
only TypeScripts types.

7
00:00:31.300 --> 00:00:36.071
For example,
we could all probably take a string and

8
00:00:36.071 --> 00:00:42.361
parse CSV values so that we get
an array of things between the commas,

9
00:00:42.361 --> 00:00:46.481
but could you take a string literal type,
and

10
00:00:46.481 --> 00:00:52.569
then DCSV it using no runnable JavaScript,
only the type itself?

11
00:00:53.750 --> 00:00:56.629
That's the kind of thing
that you would do here,

12
00:00:56.629 --> 00:01:00.270
they have them sorted roughly easy,
medium and hard.

13
00:01:00.270 --> 00:01:04.170
But I do these regularly especially as
new language features are introduced.

14
00:01:04.170 --> 00:01:09.260
Sometimes these get a lot easier as you
get more tools that you can make use of.

15
00:01:09.260 --> 00:01:16.447
I will warn you,
the difficulty level here is subjective.

16
00:01:16.447 --> 00:01:21.965
I find some of the medium ones to be
quit hard and some of them were trivial,

17
00:01:21.965 --> 00:01:27.040
so don't get too frustrated if you
feel like you are struggling with

18
00:01:27.040 --> 00:01:31.779
the medium it may be more
appropriately categorized as a hard.

19
00:01:31.779 --> 00:01:35.470
So I picked a couple that
are good places for us to start.

20
00:01:35.470 --> 00:01:39.970
We're gonna solve these collectively
as a class, but I'll keep us moving.

21
00:01:39.970 --> 00:01:43.400
And we can do this right in
the TypeScript playground.

22
00:01:43.400 --> 00:01:45.502
So I've got round 1, 2, and 3.

23
00:01:45.502 --> 00:01:49.052
They roughly correspond to some of
the most approachable things and

24
00:01:49.052 --> 00:01:52.170
then some things that get
a little more interesting.

25
00:01:52.170 --> 00:01:57.789
And then round 3 is quite challenging.

26
00:01:57.789 --> 00:02:01.678
And this represents only up into
the medium level of what this

27
00:02:01.678 --> 00:02:04.890
type challenges repo allows
us to practice with.

28
00:02:06.580 --> 00:02:10.154
So if you want more of this,
if you enjoy what we're about to do,

29
00:02:10.154 --> 00:02:13.599
go to the GitHub repo,
you can actually open pull requests and

30
00:02:13.599 --> 00:02:17.991
I think a bot will come by and try to mark
whether you've gotten it right or not.

31
00:02:17.991 --> 00:02:22.899
So you can see all these
thing merge pull requests or

32
00:02:22.899 --> 00:02:27.823
maybe their issues, yeah,
that's probably it.

33
00:02:27.823 --> 00:02:31.056
All these 5,000 open issues,

34
00:02:31.056 --> 00:02:36.993
these represent people who've
submitted a possible solution.

35
00:02:36.993 --> 00:02:39.310
All right, so with that round 1.

36
00:02:39.310 --> 00:02:42.369
And I'm gonna walk us
through this first one so

37
00:02:42.369 --> 00:02:47.560
that we can see kind of how this works,
how we should think about it.

38
00:02:47.560 --> 00:02:54.317
So our task is to implement a type
where if it evaluates to T,

39
00:02:54.317 --> 00:02:59.587
to a type parameter T,
if the type C, like C for

40
00:02:59.587 --> 00:03:06.240
condition is true, or
F if the condition is false.

41
00:03:06.240 --> 00:03:10.850
So what we could do, I just click
the try button and we ended up here.

42
00:03:10.850 --> 00:03:15.040
So you can think of this up here,
everything above this cut line.

43
00:03:15.040 --> 00:03:18.544
This is setup code,
you don't need to worry about that,

44
00:03:18.544 --> 00:03:20.150
just scroll away from it.

45
00:03:20.150 --> 00:03:22.234
Down here are the test cases and

46
00:03:22.234 --> 00:03:26.490
these are assertions written
purely using type information.

47
00:03:28.170 --> 00:03:33.134
So, We see here, we have the type and

48
00:03:33.134 --> 00:03:36.870
our job is to replace this never
with something more meaningful.

49
00:03:36.870 --> 00:03:42.428
So here we could say, all right,

50
00:03:42.428 --> 00:03:46.001
so if C extends true,

51
00:03:46.001 --> 00:03:50.375
true, otherwise false.

52
00:03:50.375 --> 00:03:54.300
And all the red squiggles are gone,
and it passes.

53
00:03:54.300 --> 00:03:58.620
So all these little challenges you can
do right in the TypeScript playground.

54
00:03:58.620 --> 00:04:00.898
This is true for
the type challenges repo as well,

55
00:04:00.898 --> 00:04:04.000
this is something purely
can do in your browser.

56
00:04:04.000 --> 00:04:07.390
And, these assertions work
as you would hope, right?

57
00:04:07.390 --> 00:04:13.520
So here's, this is the type and then this
is the value you expect to get out of it.

58
00:04:14.670 --> 00:04:19.950
So in this case, because of false,
we hope we're getting 42.

59
00:04:19.950 --> 00:04:23.130
And here cuz of true,
we hope we're getting Apple.

60
00:04:23.130 --> 00:04:25.766
Does that make sense how
this works to everyone?

61
00:04:25.766 --> 00:04:28.388
Okay, so that's a freebie cuz
we have a language feature,

62
00:04:28.388 --> 00:04:31.260
conditional type that kind
of makes that one trivial.

63
00:04:31.260 --> 00:04:35.020
The key here is extend, we're
starting to see that's almost like a,

64
00:04:35.020 --> 00:04:38.860
in the type world it's like a triple
equal sign or something like that.

65
00:04:38.860 --> 00:04:41.490
It's almost like a comparator, right?

66
00:04:41.490 --> 00:04:48.558
If C is, if it is a true,
a thing that is true.

67
00:04:48.558 --> 00:04:50.627
All right, what's the next one?

68
00:04:50.627 --> 00:04:52.530
LengthOfTuple.

69
00:04:52.530 --> 00:04:55.572
So what we want here is to
implement a type starting out as

70
00:04:55.572 --> 00:04:58.900
a never cuz that's sort
of our blank to fill in.

71
00:04:58.900 --> 00:05:05.760
We have a tuple called Fruits and
it contains two things.

72
00:05:05.760 --> 00:05:11.239
The string literal type cherry and
string literal type banana.

73
00:05:11.239 --> 00:05:13.686
In this case it also has the value there,
but

74
00:05:13.686 --> 00:05:17.075
you can see here the type expects
exactly those two strings.

75
00:05:17.075 --> 00:05:21.731
So the question is,
how can we get to a point where we could

76
00:05:21.731 --> 00:05:26.494
say the length of tuple for
this tuple of length 3, is 3?

77
00:05:26.494 --> 00:05:30.935
And for this one,
I'm using not equal, right,

78
00:05:30.935 --> 00:05:33.510
to make sure I have a negative test case.

79
00:05:33.510 --> 00:05:38.417
So the length of a tuple that's

80
00:05:38.417 --> 00:05:42.955
3 long should not equal 2.

81
00:05:42.955 --> 00:05:45.344
Right here I'm testing fruits,

82
00:05:45.344 --> 00:05:49.452
which is this up here that has length 2,
I hope it's 2.

83
00:05:49.452 --> 00:05:56.120
So, Here's what we would do here.

84
00:05:56.120 --> 00:06:00.981
So we have this T and T is a tuple,
we hope it's a tuple.

85
00:06:07.219 --> 00:06:10.760
What we could do here is
an indexed access type.

86
00:06:12.090 --> 00:06:13.586
So we could do something like this.

87
00:06:15.818 --> 00:06:21.330
You could say, all right, T,
it had better be an array, all right?

88
00:06:21.330 --> 00:06:22.833
In fact, we don't even have to do it here.

89
00:06:22.833 --> 00:06:28.100
We could say if T is an array ish thing,
using the same concept

90
00:06:28.100 --> 00:06:33.796
that we use before where we were saying,
is this condition true?

91
00:06:33.796 --> 00:06:38.659
Extends is conceptually like,
equal equal, right?

92
00:06:38.659 --> 00:06:45.360
Then, Look at that.

93
00:06:45.360 --> 00:06:49.806
As soon as I open up
the square brackets here,

94
00:06:49.806 --> 00:06:55.430
I've got prototype things
coming off of array, right?

95
00:06:55.430 --> 00:07:00.501
These are things that you find on an array
that begin with L or have an L in them.

96
00:07:00.501 --> 00:07:04.995
So there's some sense that in this
branch of the type expression I'm

97
00:07:04.995 --> 00:07:07.174
dealing with an array ish thing.

98
00:07:07.174 --> 00:07:12.767
Otherwise we're not an array at all,
so this is sort of where we just wanna

99
00:07:12.767 --> 00:07:18.560
basically give up and say you're misusing
this and we can emit a never hear.

100
00:07:19.910 --> 00:07:20.616
What's happening here?

101
00:07:22.851 --> 00:07:27.842
LengthOfTuple says false does
not satisfy the constraint true.

102
00:07:27.842 --> 00:07:31.526
So this is where [LAUGH]
debugging TypeScript code,

103
00:07:31.526 --> 00:07:36.324
at least this kind of TypeScript
code is a lot more challenging than

104
00:07:36.324 --> 00:07:39.510
JavaScript because all
we see is a failure.

105
00:07:39.510 --> 00:07:43.332
It's sort of instead of thinking of it
like lines of code where you're executing

106
00:07:43.332 --> 00:07:47.037
them one by one and you can see this
statement worked, this statement worked,

107
00:07:47.037 --> 00:07:49.480
this statement worked,
this one failed, right?

108
00:07:50.560 --> 00:07:54.314
Messing with types like this to me feels
like I'm dealing with a balloon and

109
00:07:54.314 --> 00:07:56.758
I squeeze one side and
the other side inflates and

110
00:07:56.758 --> 00:08:00.809
all you get is sort of a snapshot at time
that like, something's not happy in some

111
00:08:00.809 --> 00:08:03.900
place there's no sort of
order of execution here.

112
00:08:03.900 --> 00:08:08.141
So I do know though I should look at the
type of fruits carefully because that's

113
00:08:08.141 --> 00:08:11.300
the only test case here that's failing.

114
00:08:11.300 --> 00:08:14.759
And if I look here,
anyone notice something interesting,

115
00:08:14.759 --> 00:08:17.676
something that's present
in no other test case?

116
00:08:17.676 --> 00:08:19.385
&gt;&gt; As const?

117
00:08:19.385 --> 00:08:23.944
&gt;&gt; As const, okay, that for
sure but what about the tooltip?

118
00:08:23.944 --> 00:08:26.405
And it has to do with as constant.

119
00:08:26.405 --> 00:08:27.134
&gt;&gt; Read only.

120
00:08:27.134 --> 00:08:29.740
&gt;&gt; Read only,
I heard Read only, that is it.

121
00:08:29.740 --> 00:08:36.650
So we can do this and
that'll make the test case happy.

122
00:08:36.650 --> 00:08:42.229
We accept arrays even read only arrays,
a special type of array, great.

123
00:08:42.229 --> 00:08:46.680
So that's how we can create a type that
will give us the length of a tuple.

124
00:08:46.680 --> 00:08:50.206
So if we did, like,

125
00:08:53.323 --> 00:08:58.927
LengthOfTuple, number, number,

126
00:08:58.927 --> 00:09:07.590
boolean Look at that type, it's three.

127
00:09:07.590 --> 00:09:11.681
So we're solving these problems
just using type information,

128
00:09:11.681 --> 00:09:14.189
there's no running JavaScript here.

129
00:09:14.189 --> 00:09:17.378
This is, I know it's a little bit
uncomfortable to think this way.

130
00:09:17.378 --> 00:09:21.568
But this is where you're picking
up those heavier weights and

131
00:09:21.568 --> 00:09:26.646
where you're starting to do things
that are deliberately more abstract,

132
00:09:26.646 --> 00:09:32.820
more challenging than what's in your
day to day TypeScript programming work.

133
00:09:32.820 --> 00:09:34.790
We want that to be easy for you and for

134
00:09:34.790 --> 00:09:38.360
you to be able to think about
what you're trying to accomplish.

135
00:09:38.360 --> 00:09:43.126
&gt;&gt; With a read only array, an array be
treated differently when we're calling

136
00:09:43.126 --> 00:09:45.742
building [INAUDIBLE] method and the type?

137
00:09:45.742 --> 00:09:50.707
&gt;&gt; That's a very good question.

138
00:09:50.707 --> 00:09:57.570
Effectively, why do we need to specialize,
to state that read only is necessary here?

139
00:09:57.570 --> 00:10:01.110
Why wasn't this working before and
why is this working now?

140
00:10:01.110 --> 00:10:06.003
I would argue that question
comes down to which is more

141
00:10:06.003 --> 00:10:08.946
specific versus more general?

142
00:10:08.946 --> 00:10:14.101
Is a writable array a subset
of read only arrays or

143
00:10:14.101 --> 00:10:19.750
is a read only array
a subset of writable arrays?

144
00:10:19.750 --> 00:10:24.580
And in this case a read only
array is the more basic class.

145
00:10:25.610 --> 00:10:31.300
And I can't really tell you why because
the API surface is the same for

146
00:10:31.300 --> 00:10:37.360
both, because read only is not
a concept that exists in JavaScript.

147
00:10:37.360 --> 00:10:40.300
That read only word is
something that compiles away.

148
00:10:40.300 --> 00:10:47.393
All I can tell you is that all regular
arrays can be treated as read only arrays,

149
00:10:47.393 --> 00:10:53.540
but read only arrays can't always
be treated as writeable arrays.

150
00:10:54.810 --> 00:10:58.940
So read only is the more conservative
thing to be passing around, right?

151
00:10:58.940 --> 00:11:00.048
You can pass it to something and

152
00:11:00.048 --> 00:11:02.912
effectively that's something is promising
they will not write to this thing.

153
00:11:05.624 --> 00:11:07.819
Good question.

154
00:11:10.345 --> 00:11:11.803
Okay, let's look at another one.

155
00:11:15.777 --> 00:11:18.099
I find these fun, but maybe I'm weird.

156
00:11:18.099 --> 00:11:19.450
All right, EndsWith.

157
00:11:19.450 --> 00:11:21.502
So, okay, this is a good one for

158
00:11:21.502 --> 00:11:25.759
for the class cuz I think we've
actually seen this one here today.

159
00:11:27.290 --> 00:11:30.290
You may have written it today in your IDE.

160
00:11:31.510 --> 00:11:36.718
So we want a type that evaluates to

161
00:11:36.718 --> 00:11:41.558
true if type A ends with type B.

162
00:11:41.558 --> 00:11:45.038
So if type A end with type B, ends with or

163
00:11:45.038 --> 00:11:49.490
will be like true,
otherwise it'll be false.

164
00:11:49.490 --> 00:11:55.340
So ice cream ends with cream,
ice cream does not end with chocolate.

165
00:11:56.780 --> 00:11:59.909
So these are our test cases
that we hope to make pass.

166
00:12:01.580 --> 00:12:03.820
So somebody help me out.

167
00:12:03.820 --> 00:12:08.961
What can I replace this with such that
we get our test cases to start passing?

168
00:12:08.961 --> 00:12:15.771
&gt;&gt; B extends and
then some sort of string literal with A.

169
00:12:15.771 --> 00:12:17.254
&gt;&gt; Be a little more specific.

170
00:12:17.254 --> 00:12:19.378
&gt;&gt; Well, that's,
I'll leave someone else [INAUDIBLE].

171
00:12:21.823 --> 00:12:23.079
&gt;&gt; I'm just gonna do this.

172
00:12:28.436 --> 00:12:30.232
I think that's what you told me, right?

173
00:12:30.232 --> 00:12:31.120
&gt;&gt; Yeah.

174
00:12:31.120 --> 00:12:39.280
&gt;&gt; Okay, now extends, that's always
used in that conditional type.

175
00:12:39.280 --> 00:12:44.427
That's the only place that word shows up
aside from a heritage clauses, right?

176
00:12:44.427 --> 00:12:49.407
Interfaces extend from other interface,
but this extends, surely we're

177
00:12:49.407 --> 00:12:54.010
gonna have this coming after it and
we can just say true and false here.

178
00:12:54.010 --> 00:12:56.141
We'll shuffle these around as need be.

179
00:13:00.688 --> 00:13:02.158
Let's see.

180
00:13:02.158 --> 00:13:09.004
Michael S and Oscar,
have something that we should try.

181
00:13:09.004 --> 00:13:12.352
Oscar, the syntax is not quite correct.

182
00:13:12.352 --> 00:13:17.664
I don't see any backticks, but that might
be a limitation of the chat as well or

183
00:13:17.664 --> 00:13:20.360
we can't have backtick strings.

184
00:13:20.360 --> 00:13:25.619
So I'm gonna try what I see in
the chat over what I take it to mean.

185
00:13:28.602 --> 00:13:29.900
So we could do this.

186
00:13:31.827 --> 00:13:34.250
Yet chat chat is erasing
the backticks that's fine.

187
00:13:34.250 --> 00:13:37.375
Okay, so interestingly our
second test case is passing but

188
00:13:37.375 --> 00:13:41.197
that could mean that this evaluates
to false for just about everything.

189
00:13:41.197 --> 00:13:43.857
So I'm gonna try to address this problem.

190
00:13:43.857 --> 00:13:48.990
A is not assignable to and then it
gives me a list of primitive types.

191
00:13:48.990 --> 00:13:52.605
And does anyone have a hypothesis for

192
00:13:52.605 --> 00:13:56.812
why are we seeing this error message here?

193
00:13:56.812 --> 00:14:01.599
Of course A is not assignable to these
things it's an any, could be anything.

194
00:14:01.599 --> 00:14:06.318
This is wide open, right,
could be absolutely anything.

195
00:14:06.318 --> 00:14:11.344
But like, It seems that because
we're using A in this place,

196
00:14:15.460 --> 00:14:16.940
Something weird is going on.

197
00:14:18.880 --> 00:14:23.910
So it turns out in this
situation these primitive types

198
00:14:23.910 --> 00:14:28.732
are the things that you can
coerce easily to string.

199
00:14:28.732 --> 00:14:35.674
So we can add a little constraint here,
Like that.

200
00:14:35.674 --> 00:14:38.476
Maybe that'll work.

201
00:14:38.476 --> 00:14:40.140
Let's see, what's going on here?

202
00:14:41.450 --> 00:14:43.861
False does not satisfy
the constraint true.

203
00:14:48.749 --> 00:14:50.839
Let me make sure I read this correctly.

204
00:14:50.839 --> 00:14:57.623
So I think we just have something reversed
here, I think we were supposed to solve A,

205
00:14:57.623 --> 00:15:01.651
right, this is the first
thing A has a B at the end.

206
00:15:01.651 --> 00:15:07.033
Let me reverse these type params
real quick, that could be the thing.

207
00:15:07.033 --> 00:15:10.356
And then we're gonna need to raise,
we'll make these both extend string.

208
00:15:13.929 --> 00:15:16.703
Oops, cannot do my normal hotkeys there.

209
00:15:16.703 --> 00:15:17.935
And there we go.

210
00:15:17.935 --> 00:15:22.745
So now we have an ends with thing,
and again, there's no,

211
00:15:22.745 --> 00:15:27.269
this compiles to this over
here compiles to us tricked,

212
00:15:27.269 --> 00:15:30.563
there's no runnable JavaScript here.

213
00:15:30.563 --> 00:15:33.140
We're solving these
problems using only types.

214
00:15:33.140 --> 00:15:37.250
And in doing so we kind of learn a little
bit about, hey, how does this template

215
00:15:37.250 --> 00:15:41.111
literal type work and the fact that we
can use it any already could have used

216
00:15:41.111 --> 00:15:44.750
a string here, right, the set of
all possible strings, also fine.

217
00:15:44.750 --> 00:15:49.743
All right, so
the idea here is we have A and

218
00:15:49.743 --> 00:15:52.608
B both are tuple types.

219
00:15:52.608 --> 00:15:53.365
As before,

220
00:15:53.365 --> 00:15:58.299
we can always add a constraint to these
to make sure that our tests cases pass.

221
00:15:58.299 --> 00:16:03.595
But we want something that effectively
zips these things together or

222
00:16:03.595 --> 00:16:05.980
concatenates them together.

223
00:16:05.980 --> 00:16:09.796
Shouldn't use zip because
that means interweaving.

224
00:16:09.796 --> 00:16:12.467
Here's a great test case to look at.

225
00:16:12.467 --> 00:16:16.952
We've got 18, 19, 20 and 21,
initially as two separate tuples and

226
00:16:16.952 --> 00:16:20.480
we ended up with one big tuple
type of them smushed together.

227
00:16:20.480 --> 00:16:25.119
So, Let's see if we can solve that.

228
00:16:29.611 --> 00:16:35.863
And I'll help us out first,
Make sure these are arrayish.

229
00:16:37.523 --> 00:16:41.014
Right, cuz that's the only
reasonable input that's,

230
00:16:41.014 --> 00:16:44.139
I would, as long as it does
a type error I don't care

231
00:16:44.139 --> 00:16:49.034
if it's violating the generic constraints
or evaluating to a failing result.

232
00:16:55.202 --> 00:16:59.254
&gt;&gt; Can you just destructure both of them?

233
00:16:59.254 --> 00:17:00.690
&gt;&gt; I like where your head's at.

234
00:17:00.690 --> 00:17:03.552
Talk to me about how I
would write that out.

235
00:17:03.552 --> 00:17:07.763
&gt;&gt; Dot, dot dot A comma, dot, dot, dot B.

236
00:17:07.763 --> 00:17:09.922
&gt;&gt; Thanks, that's it.

237
00:17:09.922 --> 00:17:11.221
That's all we have to do.

238
00:17:13.570 --> 00:17:16.083
So, I'm glad,
have you ever done this before?

239
00:17:16.083 --> 00:17:17.376
&gt;&gt; No.
&gt;&gt; In types,

240
00:17:17.376 --> 00:17:22.117
but your intuition is leading
you in the right place.

241
00:17:22.117 --> 00:17:27.024
Because I think the effort was made
here to try to make it feel like it's

242
00:17:27.024 --> 00:17:30.030
just what you would do for values, right?

243
00:17:30.030 --> 00:17:34.090
Spread operator kind of works.

244
00:17:34.090 --> 00:17:36.840
Cool, well that's the last easy one.

