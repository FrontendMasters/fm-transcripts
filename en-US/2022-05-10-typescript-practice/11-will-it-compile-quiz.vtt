WEBVTT

1
00:00:00.230 --> 00:00:03.739
The next activity we're going
to go through is kind of a quiz.

2
00:00:03.739 --> 00:00:08.653
You can think of it like a game and
it's all about letting your brain operate

3
00:00:08.653 --> 00:00:11.619
as if it is the TypeScript compiler,
right?

4
00:00:11.619 --> 00:00:16.258
So we're gonna try to spot whether these
small code examples will compile, and

5
00:00:16.258 --> 00:00:19.180
if they won't,
what kind of error we can expect.

6
00:00:20.240 --> 00:00:24.950
So take a look at this one, for
example, and we say that, let Age = 38.

7
00:00:24.950 --> 00:00:27.655
So, age we can expect
to be of type number.

8
00:00:27.655 --> 00:00:30.488
And then we're gonna say Age = Number.NAN,

9
00:00:30.488 --> 00:00:35.740
which of course if you know JavaScript,
that of course means it's a number.

10
00:00:35.740 --> 00:00:37.271
So, yes, this will compile.

11
00:00:38.620 --> 00:00:40.168
Hopefully this makes sense to everybody.

12
00:00:41.602 --> 00:00:44.489
All right, example 2, dealing with tuples.

13
00:00:44.489 --> 00:00:48.257
So we have a vector3,
like xyz component, maybe.

14
00:00:48.257 --> 00:00:52.290
So we've got number, number,
number, vector.push(6).

15
00:00:52.290 --> 00:00:55.804
Let's have show hands in the room,
thumbs up or thumbs down,

16
00:00:55.804 --> 00:00:57.679
thumbs up means compile.

17
00:00:57.679 --> 00:00:59.766
So optimistic you folks.

18
00:01:01.303 --> 00:01:03.685
I see a thumbs up here and
that is the correct answer.

19
00:01:04.835 --> 00:01:10.525
TypeScript will let us push
into a tuple like this.

20
00:01:10.525 --> 00:01:14.055
And the reason is that this
is a subtype of an array.

21
00:01:14.055 --> 00:01:18.605
So all the things that are available on
an array are still going to work here.

22
00:01:18.605 --> 00:01:24.060
You can see here, it's sort of array.push,
that's what we get.

23
00:01:24.060 --> 00:01:28.987
So tuples will kind of help us in
terms of accessing things in terms

24
00:01:28.987 --> 00:01:31.430
of assignment, right?

25
00:01:31.430 --> 00:01:35.076
But, unfortunately, we can still push and
pop and do these things that really,

26
00:01:35.076 --> 00:01:36.751
you wouldn't wanna do with tuples.

27
00:01:38.233 --> 00:01:40.758
Don't worry if you get these wrong,
the point is,

28
00:01:40.758 --> 00:01:43.470
this is one more step towards
starting to get it right.

29
00:01:44.720 --> 00:01:45.810
All right, how about this?

30
00:01:45.810 --> 00:01:50.380
We have a Color type with red,
green, and blue properties.

31
00:01:50.380 --> 00:01:54.615
And then we have an interface called
Color that introduces an alpha property.

32
00:01:54.615 --> 00:01:57.002
Thumbs up or thumbs down, will it compile?

33
00:02:00.396 --> 00:02:06.346
A mix of answers, the answer is, no.

34
00:02:06.346 --> 00:02:09.530
So interfaces are open.

35
00:02:09.530 --> 00:02:13.107
If we were to take this code example and
open it up, and

36
00:02:13.107 --> 00:02:19.200
if I were to just change this to interface
Color, everything would be copacetic.

37
00:02:19.200 --> 00:02:21.348
But once a type alias is defined,

38
00:02:21.348 --> 00:02:24.740
you can't have another type
alias of the same name.

39
00:02:24.740 --> 00:02:31.060
They don't sort of smush together the way
they would in the interface case.

40
00:02:31.060 --> 00:02:34.620
So c dot and you can see we get our red,
green, blue and alpha.

41
00:02:34.620 --> 00:02:38.158
This is sort of the merging of interfaces.

42
00:02:38.158 --> 00:02:40.888
They kind of, this is declaration merging.

43
00:02:42.694 --> 00:02:45.337
Doesn't work when you
combine a type alias,

44
00:02:45.337 --> 00:02:49.801
or if a type alias is involved at all,
you'd have to have a different thing.

45
00:02:51.416 --> 00:02:55.347
All right, example 4, we have class
with a class field called name,

46
00:02:55.347 --> 00:02:59.250
which is a string and friends,
which is array of Persons.

47
00:02:59.250 --> 00:03:03.216
And in the constructor we say,
this.name = name.

48
00:03:03.216 --> 00:03:04.092
Will this compile?

49
00:03:09.447 --> 00:03:11.360
No, why won't it compile?

50
00:03:12.620 --> 00:03:17.577
&gt;&gt; Because the constructor doesn't include
everything that TypeScript is expecting.

51
00:03:17.577 --> 00:03:20.827
&gt;&gt; There you go, perfectly said,
the constructor does not include,

52
00:03:20.827 --> 00:03:23.650
does not initialize all
of the class fields here.

53
00:03:23.650 --> 00:03:29.224
So it has no initializer and it is not
definitely assigned in the constructor.

54
00:03:29.224 --> 00:03:30.866
Definitely assigned,

55
00:03:30.866 --> 00:03:35.632
meaning it has to be able to see
something in a synchronous code path.

56
00:03:37.669 --> 00:03:43.038
Very good, Example 5,
if you have an abstract

57
00:03:43.038 --> 00:03:48.392
class called Person with
an abstract class field name and

58
00:03:48.392 --> 00:03:54.412
we try to create a concrete class and
the type of name is a string or

59
00:03:54.412 --> 00:03:57.892
a string array, will this compile?

60
00:03:59.598 --> 00:04:04.511
Just kind of comes down to,
are we allowed to change this type or not?

61
00:04:06.093 --> 00:04:08.629
And if so,
is the way we're changing it allowed?

62
00:04:10.168 --> 00:04:13.262
So first instinct,
thumbs up or thumbs down?

63
00:04:13.262 --> 00:04:17.365
All right, see mostly thumbs down,
the answer is, thumbs down,

64
00:04:17.365 --> 00:04:18.700
it will not compile.

65
00:04:19.710 --> 00:04:23.058
So the name field has to be compatible.

66
00:04:23.058 --> 00:04:30.180
In particular, we could have picked
something that is assignable to a string.

67
00:04:30.180 --> 00:04:35.769
So if we instead, if we had a more
specific type, like what if we did this?

68
00:04:38.578 --> 00:04:46.831
If we could do this with our new
knowledge of, Tag template types.

69
00:04:46.831 --> 00:04:51.550
We could say, if I could figure
out how to use my keyboard here.

70
00:04:53.170 --> 00:04:56.170
We could say,
I'll take not just any string but

71
00:04:56.170 --> 00:04:59.255
any string that begins
specifically with Mike.

72
00:04:59.255 --> 00:05:03.756
This will work when we subclass
something like this or when we, I mean,

73
00:05:03.756 --> 00:05:07.206
we have subclass, right,
this is an abstract class,

74
00:05:07.206 --> 00:05:11.800
we're free to use a more specific type
tip, but not a more general type.

75
00:05:11.800 --> 00:05:16.000
So you can impose additional constraints,
you can't relax constraints,

76
00:05:16.000 --> 00:05:20.160
cuz ultimately we have to be able to
regard these as Persons, all right?

77
00:05:20.160 --> 00:05:24.853
&gt;&gt; Would you be willing to just very
briefly talk about what abstract

78
00:05:24.853 --> 00:05:25.800
means here?

79
00:05:25.800 --> 00:05:28.220
&gt;&gt; Absolutely happy to talk
about what abstract means.

80
00:05:28.220 --> 00:05:33.935
So an abstract class, the way I think of
it, it's sort of falls halfway between

81
00:05:33.935 --> 00:05:39.670
a concrete class which would be just
a conventional class and an interface.

82
00:05:39.670 --> 00:05:44.520
So an interface has no implementation,
only types.

83
00:05:44.520 --> 00:05:47.608
A class is obligated to
implement everything.

84
00:05:47.608 --> 00:05:53.159
You say I have a method and you not
only have the type information there but

85
00:05:53.159 --> 00:05:56.680
you have the logic of the method itself.

86
00:05:56.680 --> 00:05:59.740
An abstract class lets us
have a mix of the two.

87
00:05:59.740 --> 00:06:04.336
So in this case,
I could have a function here like greet.

88
00:06:09.191 --> 00:06:12.730
Hello, this.name, right?

89
00:06:12.730 --> 00:06:17.310
I can have some pieces of this that
are concrete, that have logic.

90
00:06:17.310 --> 00:06:23.140
But in this case, I could say, look,
it's your job to bring me this field.

91
00:06:23.140 --> 00:06:25.310
I'm saying that something has to exist.

92
00:06:25.310 --> 00:06:28.500
Anyone who extends me has
to fill in this blank.

93
00:06:29.945 --> 00:06:32.900
And I'm not gonna fill it in but
I'm gonna tell you what I need.

94
00:06:32.900 --> 00:06:37.271
Makes less sense here but look at this,

95
00:06:39.756 --> 00:06:42.930
Abstract formatName.

96
00:06:45.833 --> 00:06:54.418
So I can have a function here,
Like that and

97
00:06:54.418 --> 00:06:59.672
now it's almost like, okay,
now student has to go ahead and

98
00:06:59.672 --> 00:07:03.498
implement formatName in some way, right?

99
00:07:03.498 --> 00:07:06.134
So sort of we get to have half and half.

100
00:07:07.532 --> 00:07:12.043
The reason that you don't see this that
often is because you could also use

101
00:07:12.043 --> 00:07:15.041
an interface to state
this type of information.

102
00:07:15.041 --> 00:07:19.652
But sometimes you kinda want
an interface and a base class, and

103
00:07:19.652 --> 00:07:22.004
this would serve that purpose.

104
00:07:23.215 --> 00:07:26.869
Especially if you want a base class
that cannot be directly instantiated,

105
00:07:26.869 --> 00:07:28.860
that's what this gets you, right?

106
00:07:28.860 --> 00:07:33.547
We could have created
a situation where we had

107
00:07:33.547 --> 00:07:38.986
something like this,
Person and then we have like,

108
00:07:42.171 --> 00:07:45.671
You bring this formatName up
into the interface like that,

109
00:07:50.092 --> 00:07:53.962
And maybe like this, And

110
00:07:53.962 --> 00:07:58.890
string and
here we could have had our base class.

111
00:07:58.890 --> 00:08:01.108
Now here, this is where it gets tricky,

112
00:08:01.108 --> 00:08:05.726
in order to have an implementation here
that kind of assumes that this Exists,

113
00:08:05.726 --> 00:08:10.958
you'd have to say all right
person implements I person.

114
00:08:10.958 --> 00:08:15.782
But now we're obligated to sort
of fill in all of these blanks in

115
00:08:15.782 --> 00:08:20.892
some way on the space class cuz we
have to make person complete now.

116
00:08:20.892 --> 00:08:26.916
So, there are use cases where this is
like strictly a better tool for the job.

117
00:08:26.916 --> 00:08:31.395
So in this next example we have an
interface called color with red green and

118
00:08:31.395 --> 00:08:33.069
blue numeric properties.

119
00:08:33.069 --> 00:08:36.189
Then we have a function
called print color and

120
00:08:36.189 --> 00:08:39.975
we're passing this object
literal into print color.

121
00:08:39.975 --> 00:08:41.916
So will this compile or not?

122
00:08:44.790 --> 00:08:49.443
I see, exclusively thumbs down as if
people have seen the answer before.

123
00:08:49.443 --> 00:08:50.712
No, this will not compile.

124
00:08:50.712 --> 00:08:55.448
So, the kind of problem
we're running into here

125
00:08:55.448 --> 00:08:59.617
is access properties on object literals.

126
00:08:59.617 --> 00:09:04.996
And here's, what's going what we're being
told by the compiler and why it matters.

127
00:09:04.996 --> 00:09:09.548
So what we're being told
is specifically that

128
00:09:09.548 --> 00:09:14.458
we're passing in something
that has this alpha.

129
00:09:14.458 --> 00:09:17.764
At the end like a transparency channel.

130
00:09:17.764 --> 00:09:23.263
And that's not assignable to a parameter
of type color and you might think.

131
00:09:23.263 --> 00:09:26.266
Well, wait a minute it should be red,
color just

132
00:09:26.266 --> 00:09:30.901
simply asks of us that we have a red green
and blue and we have more than that.

133
00:09:30.901 --> 00:09:32.038
What's the problem?

134
00:09:32.038 --> 00:09:36.811
Well, the problem is that, because
we're using an object literal here,

135
00:09:36.811 --> 00:09:39.765
there is nothing else in
this code that would be

136
00:09:39.765 --> 00:09:44.268
able to get a reference to the object
being passed as an argument here.

137
00:09:44.268 --> 00:09:48.202
There's absolutely no, it's not like we're
holding it in a variable or something.

138
00:09:48.202 --> 00:09:50.334
I can pop this out here so
we can talk about it.

139
00:09:50.334 --> 00:09:54.058
So, let's see if we get the same error.

140
00:09:56.904 --> 00:09:58.881
Like this.

141
00:09:58.881 --> 00:10:00.986
And we're not going to, right?

142
00:10:00.986 --> 00:10:04.037
So in this situation we're holding
on to this in a variable and

143
00:10:04.037 --> 00:10:05.571
we're not getting the error.

144
00:10:05.571 --> 00:10:07.551
So here's how I want you
to think about this.

145
00:10:07.551 --> 00:10:11.332
Here's how I advise building
it into your mental model.

146
00:10:11.332 --> 00:10:16.946
In this scenario on our screen,
I can get at this alpha channel.

147
00:10:16.946 --> 00:10:21.629
So there is a point to it existing,
there's a point to it being defined.

148
00:10:21.629 --> 00:10:23.011
We may use it somewhere else.

149
00:10:23.011 --> 00:10:25.304
It is possible for
us to use it somewhere else.

150
00:10:25.304 --> 00:10:30.286
If we go back to the problem as
originally stated there is no way for

151
00:10:30.286 --> 00:10:32.832
me to access this alpha channel.

152
00:10:32.832 --> 00:10:37.072
It is known if the types
are telling the truth and

153
00:10:37.072 --> 00:10:42.377
if we use them as we should
it's kind of pointless, right?

154
00:10:42.377 --> 00:10:44.028
There's no alpha here.

155
00:10:44.028 --> 00:10:48.778
And there's no other way to access this
object that's passed into the function.

156
00:10:48.778 --> 00:10:52.081
So it's just sort of
It's a vestigial thing.

157
00:10:52.081 --> 00:10:53.714
It's access.

158
00:10:53.714 --> 00:10:55.972
And that's why we get this error message.

159
00:10:55.972 --> 00:10:57.825
And that's why this rule is here.

160
00:10:57.825 --> 00:11:01.256
Because it's quite literally pointless for

161
00:11:01.256 --> 00:11:04.871
us to have this is less proper free,
all right?

162
00:11:04.871 --> 00:11:09.316
In this next example,
we have a type called color.

163
00:11:09.316 --> 00:11:14.874
And then we have a color value
class that implements that type.

164
00:11:14.874 --> 00:11:17.183
Will this compile or not?

165
00:11:17.183 --> 00:11:19.732
thumbs up thumbs down.

166
00:11:19.732 --> 00:11:23.160
So red, green and blue.

167
00:11:23.160 --> 00:11:25.099
I see a couple sideways thumbs.

168
00:11:25.099 --> 00:11:26.942
I can see a yes them.

169
00:11:26.942 --> 00:11:28.101
Emma is that your name.

170
00:11:28.101 --> 00:11:28.820
&gt;&gt; Yeah.

171
00:11:28.820 --> 00:11:30.661
&gt;&gt; What do you think this will compile.

172
00:11:30.661 --> 00:11:34.962
&gt;&gt; Because the constructor includes all of

173
00:11:34.962 --> 00:11:39.649
the properties that the type is expecting.

174
00:11:39.649 --> 00:11:43.322
&gt;&gt; It does, what if I got rid
of this public key word here?

175
00:11:43.322 --> 00:11:45.247
Would that change the way
you think about this?

176
00:11:45.247 --> 00:11:48.140
&gt;&gt; No.

177
00:11:48.140 --> 00:11:50.132
&gt;&gt; Okay, so your answers right, but

178
00:11:50.132 --> 00:11:53.097
there's there's a little
extra curveball here.

179
00:11:53.097 --> 00:11:56.234
What we're seeing here
are called puram properties.

180
00:11:56.234 --> 00:11:58.870
And the fact that we have
this public key word here.

181
00:11:58.870 --> 00:12:03.687
It kind of automatically sets
up this class field for us.

182
00:12:03.687 --> 00:12:09.113
So, this compiles and
if we had equals new color value,

183
00:12:09.113 --> 00:12:12.577
something like this, and 000,

184
00:12:12.577 --> 00:12:16.859
we could see that CV.red, green and blue.

185
00:12:16.859 --> 00:12:17.600
These are here.

186
00:12:17.600 --> 00:12:21.251
So, when we have public red and
public green, public blue,

187
00:12:21.251 --> 00:12:23.338
it's kind of shorthand for this.

188
00:12:44.022 --> 00:12:49.029
And we have a duplicate identifier because
we'll need to get rid of this now.

189
00:12:49.029 --> 00:12:53.161
So when you have those access modifier
keywords that public in the constructor

190
00:12:53.161 --> 00:12:56.667
signature, you're getting for
free these class fields setup and

191
00:12:56.667 --> 00:12:59.312
this assignment happening
in your constructor.

192
00:12:59.312 --> 00:13:01.802
It's a nice abbreviated way to do this.

193
00:13:01.802 --> 00:13:06.527
So, It'll work just fine.

194
00:13:06.527 --> 00:13:12.954
And you can see that, well, the tool tips
aren't telling us the whole story here.

195
00:13:12.954 --> 00:13:18.987
But, this in the example you
can see it how this is working.

196
00:13:18.987 --> 00:13:21.377
The fact that they're equivalent,
all right?

197
00:13:21.377 --> 00:13:22.582
Moving on.

198
00:13:22.582 --> 00:13:23.958
Example 8.

199
00:13:23.958 --> 00:13:30.444
So we have a class and
we have an interface of the same name.

200
00:13:30.444 --> 00:13:34.023
It looks a lot like our
type alias example, right?

201
00:13:34.023 --> 00:13:39.720
Where we were kind of like trying
to piggyback on the same word.

202
00:13:39.720 --> 00:13:42.125
Will this work the same way for class?

203
00:13:42.125 --> 00:13:43.255
What will happen?

204
00:13:45.023 --> 00:13:46.429
What's your gut reaction?

205
00:13:49.717 --> 00:13:53.762
I see get some thumbs up and thumbs down.

206
00:13:53.762 --> 00:13:59.034
So it turns out a class has
the interface of the instance

207
00:13:59.034 --> 00:14:03.051
of the class, kind of riding on top of it.

208
00:14:03.051 --> 00:14:07.664
So really this boils down to interface and
interface.

209
00:14:07.664 --> 00:14:11.548
So, first off,
I missed this export keyword and

210
00:14:11.548 --> 00:14:14.503
without that, everything is fine.

211
00:14:14.503 --> 00:14:19.435
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] This is my past self

212
00:14:19.435 --> 00:14:23.879
throwing my future self curveballs.

213
00:14:23.879 --> 00:14:27.170
So, it also would have been
fine if we did this, right?

214
00:14:27.170 --> 00:14:31.098
So if you have these merge
declarations that are all sort of

215
00:14:31.098 --> 00:14:33.913
piggybacking on the same word, person.

216
00:14:33.913 --> 00:14:37.221
You either export them all or
you export none of them.

217
00:14:39.103 --> 00:14:43.815
So this one didn't really have to
do with the collision on person

218
00:14:43.815 --> 00:14:45.483
because that worked.

219
00:14:48.369 --> 00:14:53.550
I will read the next one very carefully,
okay?

220
00:14:53.550 --> 00:14:54.728
Example 9.

221
00:14:54.728 --> 00:14:59.526
So we have a class with
a field called name.

222
00:14:59.526 --> 00:15:01.755
And then a constructor.

223
00:15:01.755 --> 00:15:07.224
And then, we have some API call
that's being made in the constructor.

224
00:15:07.224 --> 00:15:10.285
And then, so we get an API response back,

225
00:15:10.285 --> 00:15:14.663
convert it into JSON, and
then set up the name on the class.

226
00:15:14.663 --> 00:15:18.423
Well the TypeScript compiler like this,
thumbs up or thumbs down.

227
00:15:23.984 --> 00:15:26.667
I only see thumbs down in the room.

228
00:15:26.667 --> 00:15:31.528
And you might one clue is I
have thrown a curveball here

229
00:15:31.528 --> 00:15:36.184
I'd like given something
a sync in a constructor.

230
00:15:36.184 --> 00:15:40.521
So it stands to reason that there's
a reason I'm doing that unless I'm just

231
00:15:40.521 --> 00:15:41.485
being devious.

232
00:15:41.485 --> 00:15:42.833
So this won't compile.

233
00:15:42.833 --> 00:15:47.616
And it's because, it is not definitely
assigned in the constructor.

234
00:15:47.616 --> 00:15:51.411
And this is not a great error message
because I would argue I can see

235
00:15:51.411 --> 00:15:54.934
an assignment in the code that's
in my constructor method.

236
00:15:54.934 --> 00:15:59.694
The problem is, that code will not be
invoked before we reach the end of

237
00:15:59.694 --> 00:16:02.207
the constructor function, right?

238
00:16:02.207 --> 00:16:06.480
It's this async thing API call comes back
and all the while like what if the API

239
00:16:06.480 --> 00:16:10.560
call takes ten minutes to come back and
here I have this instance of person.

240
00:16:10.560 --> 00:16:14.254
Send a name has not been set up on it yet,
so

241
00:16:14.254 --> 00:16:19.637
this is why when we have a callback
like this often things that

242
00:16:19.637 --> 00:16:24.708
happen inside that callback
don't really count towards

243
00:16:24.708 --> 00:16:29.707
making sure class fields on
the class are initialized.

244
00:16:29.707 --> 00:16:32.738
Now, you remember one of those
first questions we started talking

245
00:16:32.738 --> 00:16:35.230
about where we had that
promise constructor.

246
00:16:35.230 --> 00:16:36.317
We had the animal names and

247
00:16:36.317 --> 00:16:38.550
we were talking about the order
they were logged out.

248
00:16:38.550 --> 00:16:42.478
And we talked a little bit about
how when we create that promise,

249
00:16:42.478 --> 00:16:47.810
the callback given to the promise
constructor is invoked synchronously.

250
00:16:47.810 --> 00:16:52.355
Unfortunately, there's no way
to tell the compiler that, so

251
00:16:52.355 --> 00:16:57.585
if you ever create new promises in
a class constructor like this, you may

252
00:16:57.585 --> 00:17:04.250
have to use the definite assignment
operator, which is the bang equals sign.

253
00:17:04.250 --> 00:17:07.005
Because, as far as it's concerned,

254
00:17:07.005 --> 00:17:12.685
any callback has the potential to be
a sync, and therefore, we can't say,

255
00:17:12.685 --> 00:17:17.698
yeah, name will have value by
the time instantiation is completed.

256
00:17:20.127 --> 00:17:23.808
So we don't yet
have a tool a way to express that like,

257
00:17:23.808 --> 00:17:26.900
this is a synchronous callback,
maybe one day.

258
00:17:28.620 --> 00:17:30.100
All right, getting close to the end here.

259
00:17:31.800 --> 00:17:36.664
So this one I won't ask for a show of
hands here I just wanted to kinda show

260
00:17:36.664 --> 00:17:40.720
you something interesting here
it's very nuanced, but so

261
00:17:40.720 --> 00:17:45.829
we have three enums, and if you're used
to using these you'll know that by

262
00:17:45.829 --> 00:17:50.857
default if we don't have initializers
here you'll end up with numbers,

263
00:17:50.857 --> 00:17:55.280
if we look at Sublime Text,
that's probably going to be a zero.

264
00:17:55.280 --> 00:18:00.302
So there's a weird thing that I ran
into not while setting up this workshop

265
00:18:00.302 --> 00:18:05.000
project, but in another app where
I learned something about innum.

266
00:18:05.000 --> 00:18:09.836
So this will not compile,
and you may think okay,

267
00:18:09.836 --> 00:18:15.660
I'm using string values
here that's a bit weird.

268
00:18:15.660 --> 00:18:19.703
The thing that's weird here is,
where we run into the problem and

269
00:18:19.703 --> 00:18:22.320
where we escaped from the problem.

270
00:18:22.320 --> 00:18:25.620
So, here we're setting typescript.

271
00:18:25.620 --> 00:18:29.320
The first thing in the innum
equal to this string Ts, and

272
00:18:29.320 --> 00:18:31.454
then we get this error message.

273
00:18:31.454 --> 00:18:34.780
Just it says,
each member must have an initializer.

274
00:18:36.040 --> 00:18:42.205
And yet down here we get a zero cuz that's
kinda the default behavior of an enum,

275
00:18:42.205 --> 00:18:45.990
and then vs code, and
apparently that's fine.

276
00:18:47.530 --> 00:18:52.880
Now down, here we have things
happening before and after.

277
00:18:52.880 --> 00:18:59.050
Our weird like stringing II knew
what we wanna call this thing.

278
00:18:59.050 --> 00:19:03.671
But the fact that we kinda
go back to numbers here, and

279
00:19:03.671 --> 00:19:09.833
we're explicit about it, that means
that JSN is gonna be number four,

280
00:19:09.833 --> 00:19:14.864
I love bunkers,
I have no other insight to offer you here,

281
00:19:14.864 --> 00:19:18.790
but it's kinda a weird
a weird little thing.

282
00:19:20.540 --> 00:19:23.230
Keep an eye out for
it if you're ever doing this.

283
00:19:23.230 --> 00:19:28.130
Another way to deal with this is
just rest on the numeric values.

284
00:19:28.130 --> 00:19:31.647
To steer clear of this
entirely use constants like

285
00:19:31.647 --> 00:19:36.820
immutable non assignable strings
if you need string values.

286
00:19:36.820 --> 00:19:41.747
All right, what about this, we have
a function called handle click maybe we're

287
00:19:41.747 --> 00:19:44.070
using this in like a React component.

288
00:19:44.070 --> 00:19:46.720
And we're saying on click
equals handle click.

289
00:19:48.340 --> 00:19:53.670
We get the events target, and
we cast it to an HTML input element.

290
00:19:53.670 --> 00:19:56.449
Maybe this is safe because maybe we know

291
00:19:56.449 --> 00:19:59.830
we're only using this
on HTML input elements.

292
00:19:59.830 --> 00:20:02.018
That's the only way this
function will ever get invoked.

293
00:20:02.018 --> 00:20:07.804
And then we say,
if the value is not blank,

294
00:20:07.804 --> 00:20:14.330
set the value to the uppercase
version of the string.

295
00:20:14.330 --> 00:20:21.732
So this might force an input to be
uppercased, will this compile or not?

296
00:20:24.679 --> 00:20:29.120
This we're out of weird trick
question territory now.

297
00:20:29.120 --> 00:20:33.230
So the answer here is it will not compile.

298
00:20:33.230 --> 00:20:37.736
And the key to look at is it's
a freestanding function in which we

299
00:20:37.736 --> 00:20:42.752
are making kinda an assumption about this,
for this type, all right?

300
00:20:42.752 --> 00:20:47.246
So often when you have a DOM event
handler this will end up being

301
00:20:47.246 --> 00:20:50.271
the target of the event
that was clicked or

302
00:20:50.271 --> 00:20:54.524
where a keystroke happened or
something like that right.

303
00:20:54.524 --> 00:20:59.629
Anyone here familiar with react and
have you used the class components of

304
00:20:59.629 --> 00:21:05.370
react where you remember having to
bind those functions and pull them up?

305
00:21:05.370 --> 00:21:09.070
That's exactly why because you want
the this in those react event hands.

306
00:21:09.070 --> 00:21:11.060
Learn to be the instance of the component.

307
00:21:11.060 --> 00:21:13.540
So you can set state, for example.

308
00:21:14.970 --> 00:21:16.570
You don't want the default behavior.

309
00:21:16.570 --> 00:21:20.350
But when you have
freestanding functions and

310
00:21:20.350 --> 00:21:25.730
you need to rely on this,
I'll show you how we can fix this code.

311
00:21:27.310 --> 00:21:30.591
This input And

312
00:21:30.591 --> 00:21:36.170
now everything should be copacetic.

313
00:21:36.170 --> 00:21:41.270
It's sort of the first,
it's a pseudo argument of sorts,

314
00:21:41.270 --> 00:21:46.280
but you can say,
make sure that something is of that kind.

315
00:21:46.280 --> 00:21:52.295
So if for example, we had HTML development

316
00:22:02.153 --> 00:22:02.835
Well that work?

317
00:22:06.275 --> 00:22:07.883
Maybe this won't type check
as well as I thought.

318
00:22:10.109 --> 00:22:10.863
There's no.

319
00:22:14.275 --> 00:22:15.810
What about this, can I do.

320
00:22:20.136 --> 00:22:20.909
There we go.

321
00:22:30.989 --> 00:22:34.870
For this types of each
signature are incompatible.

322
00:22:34.870 --> 00:22:39.513
So here like I'm saying I have
a handle click that assumes

323
00:22:39.513 --> 00:22:43.490
it's only designed to work with an input,
why?

324
00:22:43.490 --> 00:22:46.970
Because I need this dot value and
that's part of HTML input element,

325
00:22:46.970 --> 00:22:48.150
that's the context.

326
00:22:48.150 --> 00:22:53.408
To the contents of the input ,so no it's
not gonna work with the diff because at

327
00:22:53.408 --> 00:22:58.827
runtime this is gonna break or this will
break here actually this will be fine this

328
00:22:58.827 --> 00:23:03.870
will be undefined and then to uppercase
is probably what's gonna blow up.

329
00:23:05.510 --> 00:23:07.640
All right, last two questions.

330
00:23:07.640 --> 00:23:11.850
All right, here we have, again,
a sub-classing situation.

331
00:23:11.850 --> 00:23:16.765
We have a private field called name,
so I'm just gonna steer you into

332
00:23:16.765 --> 00:23:22.040
the important thing is to look at his
name, subclass as a different type.

333
00:23:23.490 --> 00:23:26.074
And then we also have super, all right,

334
00:23:26.074 --> 00:23:29.423
which is calling the constructor
of the base class.

335
00:23:31.967 --> 00:23:36.030
And then finally, Take a look at that.

336
00:23:37.450 --> 00:23:41.252
So are there is any of this
gonna make things go wrong?

337
00:23:44.740 --> 00:23:49.420
Thumbs up or thumbs down,
thumbs I see more

338
00:23:49.420 --> 00:23:54.634
thumbs down thumbs up,
this will not compile.

339
00:23:54.634 --> 00:23:59.904
So, first off age they have separate

340
00:23:59.904 --> 00:24:06.680
declarations of this
private property age So,

341
00:24:06.680 --> 00:24:11.785
this is interesting, right,
there's no objection to having different

342
00:24:11.785 --> 00:24:16.892
private class fields like the JavaScript
hashtag private class fields,

343
00:24:16.892 --> 00:24:20.538
those are always contained within a class,
right?

344
00:24:20.538 --> 00:24:23.204
You could have a parent class, and
a sub class, they each have their own,

345
00:24:23.204 --> 00:24:26.430
they're not related,
they're not even visible to each other.

346
00:24:26.430 --> 00:24:29.758
So those are fine,
there's no collision there,

347
00:24:29.758 --> 00:24:34.910
this will actually collide, private age
like the fact that they both exist,

348
00:24:34.910 --> 00:24:37.861
is in and
of itself a little bit of a problem.

349
00:24:37.861 --> 00:24:42.451
Because, this should really be protected,
protected as the keyword

350
00:24:42.451 --> 00:24:47.130
that lets us share the property
between base class and subclass.

351
00:24:47.130 --> 00:24:51.593
So here at runtime, this is gonna be the
same property, but you're sort of giving

352
00:24:51.593 --> 00:24:55.684
two different things in an inheritance
chain, the ability to write to it.

353
00:24:55.684 --> 00:25:01.555
So this is why you're sort of forbidden
from writing over these fields,

354
00:25:01.555 --> 00:25:05.116
also the types of age are not comparable,
so

355
00:25:05.116 --> 00:25:10.140
this piece is visible from
within this class itself, right?

356
00:25:10.140 --> 00:25:15.981
So we have a nullable age here, and
then we're expecting it to be a number,

357
00:25:15.981 --> 00:25:19.530
now, why didn't that give us trouble here?

358
00:25:19.530 --> 00:25:24.121
It's because we're defaulting to a value
of zero in the event that it comes null or

359
00:25:24.121 --> 00:25:24.860
undefined.

360
00:25:26.600 --> 00:25:30.683
All right, last example,
so looking at this again,

361
00:25:30.683 --> 00:25:36.059
we've got a name on a person,
we've got a function called make name.

362
00:25:36.059 --> 00:25:38.609
Which takes either an array of strings,
or a string and

363
00:25:38.609 --> 00:25:41.945
kind of concatenate them together or
just passes it straight through.

364
00:25:43.605 --> 00:25:47.720
All right,
now we have a student which is a person,

365
00:25:47.720 --> 00:25:51.835
we have this name is a string or
an array of strings,

366
00:25:51.835 --> 00:25:57.219
we already determined that this and
this up here will not collide.

367
00:25:57.219 --> 00:26:01.549
So the question is,
is this gonna be okay, and

368
00:26:01.549 --> 00:26:06.114
is this gonna be okay,
thumbs up, thumbs down.

369
00:26:12.595 --> 00:26:16.312
Thumbs up, thumbs up,
I don't see any thumbs down,

370
00:26:16.312 --> 00:26:21.843
I believe this will compile, and we kind
of went through all of the reasons why,

371
00:26:21.843 --> 00:26:26.322
so this type here lines up with this type,
so we're good there.

372
00:26:26.322 --> 00:26:28.178
But this is a good example of like,

373
00:26:28.178 --> 00:26:32.402
it's fine to break out a little function
here and to use it in the constructor Or

374
00:26:32.402 --> 00:26:35.801
even the super call which generally
should be the first thing.

375
00:26:35.801 --> 00:26:39.353
When you're inheriting, call super,

376
00:26:39.353 --> 00:26:44.889
its fine to put that there and
this serves to normalize things so

377
00:26:44.889 --> 00:26:49.589
that we can hold one type of
value in our subclass, but

378
00:26:49.589 --> 00:26:53.880
the base class has sort of
a more constrained type

