WEBVTT

1
00:00:00.130 --> 00:00:04.100
The last thing we're gonna do in
this class is a final challenge.

2
00:00:05.240 --> 00:00:06.940
And this is actually,

3
00:00:06.940 --> 00:00:13.700
it's a typing problem that I had to solve
in my journey to mastering TypeScript.

4
00:00:13.700 --> 00:00:18.417
So a couple years ago, I was involved
in a lot of work around web workers and

5
00:00:18.417 --> 00:00:22.983
if you've never used these before,
you can think of it as kind of a fully

6
00:00:22.983 --> 00:00:28.263
independent program that runs and you can
talk to it through the post message API.

7
00:00:28.263 --> 00:00:32.562
Similar to how you can have something
I framed in a larger application and

8
00:00:32.562 --> 00:00:36.100
use post message to go back and
forth between these things.

9
00:00:37.690 --> 00:00:43.521
So, the post message API is excellent it's
one manifestation of the actor concurrency

10
00:00:43.521 --> 00:00:48.798
model, which is a effective way to make
sure that things are never deadlocked,

11
00:00:48.798 --> 00:00:51.671
where A is waiting on B and
B is waiting on A.

12
00:00:51.671 --> 00:00:55.819
Effectively like these two programs,
they each have mailboxes,

13
00:00:55.819 --> 00:01:00.113
they can send messages to each other,
but they have no opinion on when

14
00:01:00.113 --> 00:01:03.540
those messages are read,
can think of it that way.

15
00:01:03.540 --> 00:01:06.460
So it's a very good concurrency model.

16
00:01:06.460 --> 00:01:07.870
It's been around for a very long time.

17
00:01:07.870 --> 00:01:11.103
However, the way asynchronous stuff works

18
00:01:11.103 --> 00:01:15.916
in JavaScript now it's it's more
common to use promises right?

19
00:01:15.916 --> 00:01:20.546
Same reason like no Jas they used to
have all this everything written in

20
00:01:20.546 --> 00:01:24.635
callback API's and
now everything's promise based right?

21
00:01:24.635 --> 00:01:28.210
Like reading a file you get a promise
back with the contents of the file.

22
00:01:28.210 --> 00:01:32.323
So I found this great
library called PenPal,

23
00:01:32.323 --> 00:01:36.654
which lets you define
methods in your worker and

24
00:01:36.654 --> 00:01:41.633
what you end up with is a very
similar method on an object

25
00:01:41.633 --> 00:01:46.614
in your main application that
has a similar type except

26
00:01:46.614 --> 00:01:51.560
the return value is kind
of wrapped in a promise.

27
00:01:51.560 --> 00:01:54.654
So you can see here this is
what might be in the worker and

28
00:01:54.654 --> 00:01:58.600
I have this object with methods on it or
functions on it.

29
00:01:58.600 --> 00:02:04.250
And add returns a number and then if I
wanted my web worker to do this thing,

30
00:02:04.250 --> 00:02:10.740
I would create a connection with the web
worker and get this child thing back.

31
00:02:10.740 --> 00:02:13.628
And I could simply invoke
add on this thing and

32
00:02:13.628 --> 00:02:16.820
I'd get back a promise
that resolves to a number.

33
00:02:16.820 --> 00:02:23.294
So I can kinda of have a higher level
way to talk with this thing that

34
00:02:23.294 --> 00:02:29.550
effectively is running in
a separate thread very convenient.

35
00:02:29.550 --> 00:02:31.990
So let me show you the read me for
this library and

36
00:02:31.990 --> 00:02:34.979
we're gonna implement
a simplified version of this, but

37
00:02:34.979 --> 00:02:38.400
I just want you to kind of get the idea
of how this is meant to be used.

38
00:02:40.380 --> 00:02:43.630
So this is code that might
exist in the parent window.

39
00:02:45.100 --> 00:02:51.090
And you can see here we've got
this connect to child function.

40
00:02:51.090 --> 00:02:52.250
And here are your methods.

41
00:02:52.250 --> 00:02:53.916
Then we've got add, right?

42
00:02:55.236 --> 00:03:01.319
Just sums up numbers 1 and 2, and
then it connects to this child and

43
00:03:01.319 --> 00:03:05.040
then child has a multiply and a divide.

44
00:03:05.040 --> 00:03:08.690
Here they are, multiply and
divide to their synchronous here,

45
00:03:08.690 --> 00:03:13.650
up here it's kind of feels like you're
just calling this thing directly.

46
00:03:13.650 --> 00:03:18.411
The promise Is where the data is sent over
there, it's run through the function,

47
00:03:18.411 --> 00:03:22.207
the results collected comes back
through the posts channel, and

48
00:03:22.207 --> 00:03:25.050
then you get it back in your parent frame.

49
00:03:25.050 --> 00:03:28.700
So we're not gonna worry about any
of this connection aspect of things.

50
00:03:28.700 --> 00:03:32.999
I just want us to focus on how
might we solve the interesting

51
00:03:32.999 --> 00:03:35.470
type information problem here.

52
00:03:35.470 --> 00:03:39.882
How do you take an object
with some functions on it and

53
00:03:39.882 --> 00:03:44.497
create the type for
a new object where anything that was

54
00:03:44.497 --> 00:03:48.832
not a promise is effectively
wrapped in a promise.

55
00:03:48.832 --> 00:03:51.358
That's what you're setting out to do here.

56
00:03:51.358 --> 00:03:56.506
So that's your task you're gonna
create a type called rap for

57
00:03:56.506 --> 00:04:01.060
PenPal you're gonna pass in
type of methods which will

58
00:04:01.060 --> 00:04:06.020
give you the interface like
corresponding to this object.

59
00:04:07.580 --> 00:04:12.868
And we should see that
asyncmethods.add should return

60
00:04:12.868 --> 00:04:17.490
a promise that resolves to a number,
etc, etc.

61
00:04:18.720 --> 00:04:20.440
Hopefully this makes sense.

62
00:04:20.440 --> 00:04:24.730
In this case, do not worry about
making sure the code runs.

63
00:04:24.730 --> 00:04:29.570
We just want the type information
to be what you're dealing with.

64
00:04:29.570 --> 00:04:31.425
So in the workshop project.

65
00:04:34.218 --> 00:04:37.010
You can see this async
communicator folder.

66
00:04:37.010 --> 00:04:41.455
It's the final the three folders
in this challenges area and

67
00:04:41.455 --> 00:04:46.040
there's a source folder in there and
an index.ts.

68
00:04:46.040 --> 00:04:47.640
So, let me get rid of
this other stuff here.

69
00:04:50.110 --> 00:04:53.080
In this case,
there is no test suite to run.

70
00:04:53.080 --> 00:04:57.160
Your tests are just for type information
and there at the bottom here.

71
00:04:58.640 --> 00:05:01.880
So here you can see that like
we've got a sink methods.add.

72
00:05:03.230 --> 00:05:06.980
And, right now this ends up being an any.

73
00:05:06.980 --> 00:05:09.440
That's why we see two places
where we see red squiggles.

74
00:05:09.440 --> 00:05:12.190
So by the time you're done,
these things should go away.

75
00:05:12.190 --> 00:05:16.800
These are things that should error,
and currently they are not erroring.

76
00:05:16.800 --> 00:05:19.490
That's why type scripts objecting here.

77
00:05:19.490 --> 00:05:22.130
So these are negative test cases.

78
00:05:22.130 --> 00:05:28.579
So your job is, make this work,
right replace this anything with something

79
00:05:28.579 --> 00:05:34.950
that gives us equivalent function
types with equivalent argument lists.

80
00:05:36.280 --> 00:05:40.228
And then anything that's not a promise
should be kind of wrapped in a promise.

81
00:05:40.228 --> 00:05:45.353
And, I believe as an extra
challenge consider that

82
00:05:45.353 --> 00:05:51.680
you might already have something
here that's asynchronous.

83
00:05:53.410 --> 00:05:57.167
So if you want to a stretch goal here,

84
00:05:57.167 --> 00:06:02.590
don't wrap promises in double promises,
right?

85
00:06:02.590 --> 00:06:03.735
So if we have like.

86
00:06:05.998 --> 00:06:11.334
Do a sync thing that
returned a promise that

87
00:06:11.334 --> 00:06:17.417
resolves to a number
something like this right?

88
00:06:17.417 --> 00:06:21.905
There's no need to make this a promise
that resolves to a promise that resolves

89
00:06:21.905 --> 00:06:25.581
to a number you can just make it
like leave it alone effectively.

90
00:06:25.581 --> 00:06:29.426
A stretch goal here because this will
require a little bit extra work to

91
00:06:29.426 --> 00:06:33.662
handle this case you'll have to detect
whether you're in that situation and

92
00:06:33.662 --> 00:06:35.959
either do something or not do something.

93
00:06:35.959 --> 00:06:41.386
So you should end up really working on
line four up here only do this if you can

94
00:06:41.386 --> 00:06:46.660
make the rest of it work and you want to
get fancy and then wrap up the course

