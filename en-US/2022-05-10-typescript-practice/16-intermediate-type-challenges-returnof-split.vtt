WEBVTT

1
00:00:00.600 --> 00:00:04.232
Now let's go to round two.

2
00:00:04.232 --> 00:00:09.398
Okay, so this type actually exists in
TypeScript, it's called a return type.

3
00:00:09.398 --> 00:00:14.051
But I have had to rename it so
we don't collide with that utility type.

4
00:00:14.051 --> 00:00:15.987
We're gonna try to make this ourselves.

5
00:00:15.987 --> 00:00:21.985
So just to look at this before I flip over
the playground, here's a good example.

6
00:00:21.985 --> 00:00:26.499
I have a game of rock-paper-scissors
that takes in a number and

7
00:00:26.499 --> 00:00:31.195
translate that to literally
the string rock or paper or scissors.

8
00:00:31.195 --> 00:00:33.224
And I want my return type to be.

9
00:00:37.569 --> 00:00:41.252
Rock or paper or scissors I want
these two types to be equal.

10
00:00:43.834 --> 00:00:45.641
So let's try it out.

11
00:00:52.287 --> 00:00:54.536
Does everyone understand
what the ask is here?

12
00:00:54.536 --> 00:00:58.275
So for example,

13
00:01:12.626 --> 00:01:18.633
So I would hope that P would
be a promise void right,

14
00:01:18.633 --> 00:01:23.122
cause promise resolve is a function.

15
00:01:23.122 --> 00:01:25.779
So return types first of all,

16
00:01:25.779 --> 00:01:31.534
it's assumed that functions
are the things that have a return.

17
00:01:31.534 --> 00:01:38.210
Therefore, we're only dealing
with function types of some sort.

18
00:01:38.210 --> 00:01:42.096
So I would hope that this when
we're done turns into a promise, so

19
00:01:42.096 --> 00:01:43.588
that resolves to a void.

20
00:01:46.848 --> 00:01:51.085
So first how can I build in this
constraint of making sure that we're only

21
00:01:51.085 --> 00:01:52.758
using function types here?

22
00:01:52.758 --> 00:01:53.994
Does anyone have any ideas?

23
00:02:03.195 --> 00:02:04.549
I'll give you two choices.

24
00:02:04.549 --> 00:02:06.300
You tell me which one you would prefer.

25
00:02:06.300 --> 00:02:09.383
We can either use a conditional type.

26
00:02:09.383 --> 00:02:14.551
Remember, we've done things like this,
condition if true,

27
00:02:14.551 --> 00:02:20.500
if false, right, and that seems like
we've done something that kind of

28
00:02:20.500 --> 00:02:26.955
looks like this as a way to check whether
something's an array, or array ish.

29
00:02:26.955 --> 00:02:32.764
We've also done this something like that.

30
00:02:32.764 --> 00:02:35.526
So I'm actually going to
lead us down this path.

31
00:02:35.526 --> 00:02:40.832
So I wanna see like is f, does it extend?

32
00:02:40.832 --> 00:02:47.111
And then I want like I want to type
that represents any callable thing.

33
00:02:47.111 --> 00:02:50.640
What's any callable thing conceptually,
what's,

34
00:02:50.640 --> 00:02:53.870
what are the things we need
to be flexible around?

35
00:02:53.870 --> 00:02:54.823
Like, I'll give you this.

36
00:02:59.965 --> 00:03:04.245
That's an example of a callable zero
argument function that returns a number.

37
00:03:08.196 --> 00:03:14.330
So what if we wanted to accept
functions with any number of arguments?

38
00:03:14.330 --> 00:03:19.318
That's probably something we need to do,
return type has to work for

39
00:03:19.318 --> 00:03:22.424
functions with lots of arguments or none.

40
00:03:22.424 --> 00:03:25.844
How would we make this generic enough?

41
00:03:25.844 --> 00:03:27.369
&gt;&gt; Like, spread the arguments?

42
00:03:27.369 --> 00:03:33.165
&gt;&gt; Yeah, spread but when what type of
the arguing to be maximally flexible.

43
00:03:33.165 --> 00:03:34.663
&gt;&gt; Any.

44
00:03:34.663 --> 00:03:41.070
&gt;&gt; Yep an array of entities that's
give me zero or give me a million,

45
00:03:41.070 --> 00:03:47.954
and they can all be whatever you want and
then here's the return type.

46
00:03:47.954 --> 00:03:51.343
So our next bit of magic is
gonna be dealing with this.

47
00:03:51.343 --> 00:03:53.955
This is in fact what we want, right?

48
00:03:53.955 --> 00:03:55.727
This is the thing we want.

49
00:03:55.727 --> 00:04:01.966
Has anyone ever captured something
like this and sort of plucked it out?

50
00:04:01.966 --> 00:04:05.112
Anyone used the infer keyword before?

51
00:04:05.112 --> 00:04:07.732
All right,
in a conditional type you can do this.

52
00:04:13.435 --> 00:04:17.610
RT for return type,
notice I'm getting no error here yet.

53
00:04:18.700 --> 00:04:23.802
And what we're saying is yet
there's something here there

54
00:04:23.802 --> 00:04:28.699
is something here that I want
to almost as if is a type arm,

55
00:04:28.699 --> 00:04:34.738
grab whatever that is, get that and
then I wanna use it and spit it out.

56
00:04:39.213 --> 00:04:43.277
And there we go all our
test cases started to pass.

57
00:04:43.277 --> 00:04:48.804
And here's our P promise, sorry it's
a promise unknown under promise void.

58
00:04:48.804 --> 00:04:55.068
So in summary, we're able to peel
away the return type of function by

59
00:04:55.068 --> 00:05:01.992
saying first of all we said okay we need
to make sure we match the right thing.

60
00:05:01.992 --> 00:05:07.568
And we made the most flexible function
type we possibly could which would have

61
00:05:07.568 --> 00:05:13.501
been this right function that takes any
number of anything and returns anything.

62
00:05:13.501 --> 00:05:20.446
It's like any callable
thing will match that type.

63
00:05:20.446 --> 00:05:24.011
And then we replace
this any with infer RT,

64
00:05:24.011 --> 00:05:28.875
which lets us define a new,
almost like a type parameter.

65
00:05:28.875 --> 00:05:32.341
We can use it just like a type
parameter over here actually look at

66
00:05:32.341 --> 00:05:34.406
the tooltip type parameter, right.

67
00:05:34.406 --> 00:05:39.163
So and then from that point forward
in any of these branches of

68
00:05:39.163 --> 00:05:42.252
this conditional type we can use that.

69
00:05:42.252 --> 00:05:46.712
We could use that as flexibly as
if it were over here all, right?

70
00:05:46.712 --> 00:05:50.705
So you could pass it through
like an indexed access type,

71
00:05:50.705 --> 00:05:53.627
you can do whatever you
want to do with it.

72
00:05:53.627 --> 00:05:55.951
So there we go, return up.

73
00:05:55.951 --> 00:06:00.601
And I wonder,

74
00:06:06.201 --> 00:06:12.390
If in here I can see the core thing.

75
00:06:12.390 --> 00:06:16.762
No I can't but
I can go over to my editor real quick,

76
00:06:16.762 --> 00:06:20.039
let's see how this was implemented.

77
00:06:20.039 --> 00:06:27.508
Okay, so this is the equivalent in core
and the TypeScript declaration files.

78
00:06:27.508 --> 00:06:32.212
So they have a constraint here, which
will give people early feedback when they

79
00:06:32.212 --> 00:06:35.170
tried passing something
that's not a function.

80
00:06:35.170 --> 00:06:40.512
And remember how we said like,
we can, we don't have to have.

81
00:06:40.512 --> 00:06:42.151
This is when we're talking
about variadic tuples.

82
00:06:42.151 --> 00:06:47.698
We're talking about like spreading
an array is T versus whatever.

83
00:06:47.698 --> 00:06:52.345
So I guess we don't even need
to do an array of anys cuz

84
00:06:52.345 --> 00:06:57.312
it's sort of spreading anything,
and then here we go,

85
00:06:57.312 --> 00:07:00.709
T extends this, here's our infer R.

86
00:07:00.709 --> 00:07:05.943
And they're kind of,
instead of falling out with a never,

87
00:07:05.943 --> 00:07:08.989
they chose to fall out with an any.

88
00:07:08.989 --> 00:07:14.169
This is more compatible this will but
it'll fail in ways

89
00:07:14.169 --> 00:07:20.794
that may not be obvious to you like
if I pass in actually it won't right.

90
00:07:20.794 --> 00:07:22.792
Cuz you'll get an error here for

91
00:07:22.792 --> 00:07:27.166
any non function cuz you won't match
that constraint on the generic.

92
00:07:27.166 --> 00:07:31.469
And then over here like I don't really see
any situation where you'd end up going

93
00:07:31.469 --> 00:07:34.836
down this path so it doesn't
really matter what they put here.

94
00:07:34.836 --> 00:07:39.009
But cool we just made one of
TypeScript's types core utility types.

95
00:07:43.895 --> 00:07:48.008
All right, Split, so

96
00:07:48.008 --> 00:07:55.295
I've been suggesting that we go here for
a little while now.

97
00:07:55.295 --> 00:08:03.552
How do we do effectively the type version
of string.split using only types?

98
00:08:03.552 --> 00:08:09.835
So in this case if I
want to split by space,

99
00:08:09.835 --> 00:08:16.130
I should get up this list of broken words.

100
00:08:16.130 --> 00:08:17.170
How are we going to do that?

101
00:08:17.170 --> 00:08:20.341
I literally see jaws agape in the room.

102
00:08:20.341 --> 00:08:24.274
[LAUGH] Is it even possible?

103
00:08:24.274 --> 00:08:28.636
I'm gonna tell you straight up I don't
quite I have this one memorized.

104
00:08:28.636 --> 00:08:32.182
So we're gonna work through it together
and you'll see how I kinda approach this.

105
00:08:32.182 --> 00:08:37.218
So it is likely recursion
will be necessary here.

106
00:08:37.218 --> 00:08:42.843
Because what we can do with
a template literal type is,

107
00:08:42.843 --> 00:08:49.835
we can certainly figure out how to
extract something to the left of.

108
00:08:49.835 --> 00:08:54.783
Or something to the right of some thing
in the same sense that we were able

109
00:08:54.783 --> 00:08:58.835
to do ends with remember,
like ice cream ends with cream.

110
00:08:58.835 --> 00:09:04.064
And we can actually use that infer keyword
to pluck something out of a larger string,

111
00:09:04.064 --> 00:09:06.432
and to keep moving forward with that.

112
00:09:06.432 --> 00:09:12.536
So let's see if we can handle
some basic cases first.

113
00:09:12.536 --> 00:09:18.085
So we can say, all right, we've got s for
the string and set for the separator.

114
00:09:18.085 --> 00:09:23.490
So if s extends, string and

115
00:09:23.490 --> 00:09:29.366
separator sorry s extends and

116
00:09:29.366 --> 00:09:35.013
then we got to do infer rest.

117
00:09:35.013 --> 00:09:38.379
So that's like the remaining
piece of the string or

118
00:09:38.379 --> 00:09:42.384
that's the piece of the string
to the left of the separator.

119
00:09:48.139 --> 00:09:50.871
Okay, so
let me experiment with what we have here.

120
00:09:55.752 --> 00:09:59.549
So split and then we'll say hello world.

121
00:10:01.597 --> 00:10:03.752
Split by space.

122
00:10:03.752 --> 00:10:06.035
And what is the type of X?

123
00:10:06.035 --> 00:10:10.274
It's just hello world that didn't
seem to do much of anything.

124
00:10:10.274 --> 00:10:12.752
Let's try the other way.

125
00:10:19.943 --> 00:10:22.131
What's going on here?

126
00:10:22.131 --> 00:10:25.084
Are there, nope, just one space.

127
00:10:25.084 --> 00:10:29.187
Okay, let's see if s extends.

128
00:10:29.187 --> 00:10:35.808
The separator,
what I probably need is, I need this.

129
00:10:43.741 --> 00:10:47.049
I can flick out two things.

130
00:10:47.049 --> 00:10:49.883
Yep, there's hello coming out.

131
00:10:49.883 --> 00:10:53.296
And then what happens when I use t here?

132
00:10:53.296 --> 00:10:56.383
There's world code coming out.

133
00:10:56.383 --> 00:11:00.836
&gt;&gt; And his rest here is that
like a keyword in TypeScript?

134
00:11:00.836 --> 00:11:03.323
&gt;&gt; Nope, it's just another type parameter.

135
00:11:03.323 --> 00:11:08.177
So you can use more than one
infer in a situation like this.

136
00:11:08.177 --> 00:11:13.284
So I'm getting kind of the left and
the right part

137
00:11:13.284 --> 00:11:18.144
of the first occurrence of this separator,
so

138
00:11:18.144 --> 00:11:24.264
just to be clear,
see how I'm getting worldspace again.

139
00:11:24.264 --> 00:11:27.855
So it sort of it matches almost like
a regular expression caching right it'll

140
00:11:27.855 --> 00:11:29.356
match on the first occurrence.

141
00:11:29.356 --> 00:11:32.576
And then we can get everything that
happens before leading right up to

142
00:11:32.576 --> 00:11:34.476
the first occurrence and then the rest.

143
00:11:34.476 --> 00:11:40.204
So what I want is to kinda
grab this first thing and

144
00:11:40.204 --> 00:11:43.574
I want to put it into a tuple.

145
00:11:45.832 --> 00:11:52.012
Like this, And so
that'll give me the first thing.

146
00:11:54.421 --> 00:11:55.900
And then I want this.

147
00:12:00.674 --> 00:12:04.642
Recurse in, so
what's our new string, it's T,

148
00:12:04.642 --> 00:12:08.904
it's the tail, T for tail,
and the same separator.

149
00:12:08.904 --> 00:12:12.153
And what are we gonna get?

150
00:12:12.153 --> 00:12:19.432
Hello world again, we're getting real
close, you had an answer for us.

151
00:12:19.432 --> 00:12:22.930
When we were doing our
concatenating two arrays,

152
00:12:22.930 --> 00:12:26.937
do you remember how we got
that concatenation to happen?

153
00:12:26.937 --> 00:12:30.263
&gt;&gt; Spread or destruction?

154
00:12:30.263 --> 00:12:33.085
&gt;&gt; What's going on here?

155
00:12:33.085 --> 00:12:35.324
A rest element type must be an array type.

156
00:12:35.324 --> 00:12:36.338
What if we do this?

157
00:12:40.526 --> 00:12:45.806
So close, There we go,

158
00:12:45.806 --> 00:12:49.611
okay, we have some of
the things passing here.

159
00:12:49.611 --> 00:12:51.964
I'm not sure if I'm going to get
through through all of them.

160
00:12:51.964 --> 00:12:56.105
But so let me talk you
through what we have so far.

161
00:12:56.105 --> 00:12:58.847
We have effectively this is our condition,
right?

162
00:12:58.847 --> 00:13:01.541
It's everything to the left
of this question mark.

163
00:13:01.541 --> 00:13:08.006
And we're saying does s match
this pattern of some word?

164
00:13:08.006 --> 00:13:12.592
Some texts that does not match
the separator followed by the separator,

165
00:13:12.592 --> 00:13:15.673
followed by the any kind
of text that may follow,

166
00:13:15.673 --> 00:13:18.620
might be a mix of separators and
other things.

167
00:13:18.620 --> 00:13:25.085
If that's true, place the word to the left
of the separator, the space in this case.

168
00:13:25.085 --> 00:13:29.852
That's the first thing in the tuple,
and then do this whole process again.

169
00:13:31.753 --> 00:13:37.701
Passing the right side of
the separator in as the new string so

170
00:13:37.701 --> 00:13:41.910
it's like we're breaking this down now.

171
00:13:41.910 --> 00:13:46.358
And then if nothing matches, if for
example we just said we did this.

172
00:13:48.443 --> 00:13:54.301
I would expect just one tuple to come back
just like string.split it'll just say,

173
00:13:54.301 --> 00:13:55.900
all right here you go.

174
00:13:55.900 --> 00:13:59.450
It's like the whole thing, right?

175
00:13:59.450 --> 00:14:06.311
Okay, so I think we're on the path
let's see what tests are failing.

176
00:14:06.311 --> 00:14:08.923
Interesting, okay, so here's an edge case.

177
00:14:08.923 --> 00:14:10.174
We have an empty string.

178
00:14:10.174 --> 00:14:14.507
Splitting by an empty string
seems to be causing us problems.

179
00:14:14.507 --> 00:14:17.578
Splitting an empty string by
an empty string seems to be

180
00:14:17.578 --> 00:14:19.257
causing us problems, okay?

181
00:14:19.257 --> 00:14:21.455
Little edge case-y there.

182
00:14:21.455 --> 00:14:25.412
Splitting an empty string by Z seems fine.

183
00:14:25.412 --> 00:14:28.477
And that does not surprise me
because that's this case right here.

184
00:14:28.477 --> 00:14:30.884
We're sort of falling straight through.

185
00:14:30.884 --> 00:14:37.169
And then splitting the set of all
possible strings, an arbitrary string.

186
00:14:37.169 --> 00:14:39.376
Remember we're dealing with types here,

187
00:14:39.376 --> 00:14:42.266
like effectively when we
don't have string literals.

188
00:14:42.266 --> 00:14:45.440
The string type just sort of falls
through it, it turns into a string array.

189
00:14:45.440 --> 00:14:48.040
So looking at the pattern here,

190
00:14:48.040 --> 00:14:54.120
what I can see is splitting by empty
string seems to be causing us problems.

191
00:14:54.120 --> 00:14:55.795
What I'm going to do is
grab this test case.

192
00:14:58.964 --> 00:15:02.696
And I want to bring it up so that we
can see what it actually evaluates to.

193
00:15:02.696 --> 00:15:11.150
And I suspect we're gonna have,
An extra string of some sort,

194
00:15:11.150 --> 00:15:15.804
maybe an empty string at the end.

195
00:15:15.804 --> 00:15:17.819
Look at that.

196
00:15:17.819 --> 00:15:21.975
That little empty string at the end,
that little jerk.

197
00:15:21.975 --> 00:15:23.680
So something's falling through.

198
00:15:23.680 --> 00:15:26.817
It's almost like it's tough
to imagine how this works.

199
00:15:26.817 --> 00:15:29.653
But yes, there's nothing leftover, but

200
00:15:29.653 --> 00:15:33.293
that nothing is it's not
necessarily an empty array.

201
00:15:33.293 --> 00:15:35.857
It's It's just kind of falling out.

202
00:15:35.857 --> 00:15:37.115
So here's what I can do.

203
00:15:37.115 --> 00:15:42.026
I know this empty string is likely to
be the very last tread that's left

204
00:15:42.026 --> 00:15:44.537
as everything's been peeled off.

205
00:15:44.537 --> 00:15:47.968
That means we're gonna be in
this part of the code right?

206
00:15:47.968 --> 00:15:50.894
So I want to add one
more conditional here.

207
00:15:53.895 --> 00:16:01.256
And I'll say if s extends empty string,
then return an empty topple otherwise,

208
00:16:01.256 --> 00:16:06.021
the remaining nonzero length
piece of the string and

209
00:16:06.021 --> 00:16:11.342
look at that a little empty
string at the end disappeared.

210
00:16:11.342 --> 00:16:15.699
We're so close,
let's grab this little piece here.

211
00:16:15.699 --> 00:16:17.429
I could solve this a couple ways.

212
00:16:17.429 --> 00:16:20.256
So what I'd hoped to get out of this,

213
00:16:20.256 --> 00:16:25.560
what the test case says I should get
out of this is an array of strings.

214
00:16:25.560 --> 00:16:30.698
And what I'm getting out instead is
a tuple of length one containing a string.

215
00:16:30.698 --> 00:16:33.830
So a quick way I can
solve this is down here,

216
00:16:33.830 --> 00:16:38.536
I could just say well I could do
one more conditional if I want to.

217
00:16:42.659 --> 00:16:46.469
Now, this one's tricky because I need to
know that I am not a specific string,

218
00:16:46.469 --> 00:16:48.449
I need to know that I'm the string type.

219
00:16:48.449 --> 00:16:55.249
Here's how we can do that,
string extends s.

220
00:16:55.249 --> 00:17:00.731
So remember, It's

221
00:17:00.731 --> 00:17:05.570
like small object fitting into big door,
right?

222
00:17:05.570 --> 00:17:10.975
So if I have a very specific thing,
do you match?

223
00:17:10.975 --> 00:17:13.935
Are you any of the strings
that are available?

224
00:17:13.935 --> 00:17:17.450
Of course that will pass, but
I want to flip these around.

225
00:17:17.450 --> 00:17:23.633
And I wanna say, look, does this general
thing, is that equal to the small thing?

226
00:17:23.633 --> 00:17:26.942
I wanna flip that around, that's why
changing the positions here is important.

227
00:17:33.017 --> 00:17:35.377
Do we get it?

228
00:17:35.377 --> 00:17:36.747
Then we got that last test.

229
00:17:36.747 --> 00:17:38.481
And finally we're down to this one.

230
00:17:38.481 --> 00:17:39.276
Does this make sense?

231
00:17:39.276 --> 00:17:41.912
Does string extend type s?

232
00:17:41.912 --> 00:17:47.218
So if s is just the color,
the string red like this will fail.

233
00:17:47.218 --> 00:17:50.914
The set of all strings, not all
the strings are exactly this one thing.

234
00:17:50.914 --> 00:17:55.497
So sort of it's less about an equal thing.

235
00:17:55.497 --> 00:18:00.925
It's more like a greater than or
equal to this extends operator.

236
00:18:00.925 --> 00:18:02.701
All right z, what are we getting?

237
00:18:02.701 --> 00:18:06.273
This is evaluating to, an empty tuple.

238
00:18:08.715 --> 00:18:12.868
You know what,
I'm gonna leave this as an exercise for

239
00:18:12.868 --> 00:18:15.319
you all to continue if you wish.

240
00:18:15.319 --> 00:18:18.488
One way to solve it I'll
just tell you is you could,

241
00:18:18.488 --> 00:18:23.500
I mean there probably is a more elegant
way to do this, you could peel this thing,

242
00:18:23.500 --> 00:18:28.024
this piece here all the way up to
the very top and sort of early terminate.

243
00:18:28.024 --> 00:18:30.631
If ever you're given an empty string,

244
00:18:30.631 --> 00:18:35.215
no matter what you're splitting it by,
just return an empty tuple.

245
00:18:35.215 --> 00:18:36.529
It's the same thing.

246
00:18:36.529 --> 00:18:40.726
I think we would just end up rearranging.

247
00:18:40.726 --> 00:18:42.931
But I'll leave you all to
poke around with that.

