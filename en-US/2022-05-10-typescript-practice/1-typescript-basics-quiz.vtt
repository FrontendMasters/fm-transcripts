WEBVTT

1
00:00:00.220 --> 00:00:04.169
We're gonna begin the day by going
through a quick warm up quiz.

2
00:00:04.169 --> 00:00:07.735
We're gonna talk about a couple questions,
some of them are easy, some

3
00:00:07.735 --> 00:00:11.661
of them are hard, and this will sort of
just get the blood moving, get us going.

4
00:00:11.661 --> 00:00:16.260
So with that, if you're on the course
website here we're gonna start with

5
00:00:16.260 --> 00:00:18.890
the second unit the JS/TS warm-up quiz.

6
00:00:20.170 --> 00:00:24.961
So I'm gonna ask these questions and
I want you to just sort of in your mind or

7
00:00:24.961 --> 00:00:29.830
in chat if you're watching live, figure
out what you think the answer is and

8
00:00:29.830 --> 00:00:33.230
then we'll open up the solution and
discuss.

9
00:00:33.230 --> 00:00:37.860
So, the first question, so
we have this class called Person.

10
00:00:37.860 --> 00:00:40.030
And then we have two things here.

11
00:00:40.030 --> 00:00:43.371
Within the class we have something
that appears to be called name,

12
00:00:43.371 --> 00:00:45.280
something that's called age.

13
00:00:45.280 --> 00:00:48.590
So compare and
contrast name and age fields.

14
00:00:48.590 --> 00:00:51.021
There's something similar about them,
something different about them

15
00:00:54.461 --> 00:00:57.530
Actually this is one that you
probably either know or don't know.

16
00:00:59.070 --> 00:01:05.140
So hash tag name, this is what is
called a JavaScript private field.

17
00:01:05.140 --> 00:01:07.600
It's a relatively new language feature.

18
00:01:07.600 --> 00:01:10.390
And this is actually a private field,
right?

19
00:01:10.390 --> 00:01:14.956
If I create an instant of person
from outside that instance,

20
00:01:14.956 --> 00:01:17.810
I cannot access the name property.

21
00:01:17.810 --> 00:01:20.090
It's actually private at runtime.

22
00:01:21.100 --> 00:01:24.920
This age field is
a typeScript private field.

23
00:01:24.920 --> 00:01:29.274
So there's this word private,
it's called an Access Modifier Keyword,

24
00:01:29.274 --> 00:01:31.840
there's private, public and protected.

25
00:01:31.840 --> 00:01:36.981
And you get the benefits of type
checking that sort of kinda yell at

26
00:01:36.981 --> 00:01:43.400
you if you try to use this from places
where you shouldn't have access to it.

27
00:01:43.400 --> 00:01:47.420
But at runtime, this field still exists.

28
00:01:47.420 --> 00:01:51.856
So if for example, you get yourself in
a situation where you throw out all of

29
00:01:51.856 --> 00:01:56.084
the tape information, you say TypeScript
ignore all the errors here or

30
00:01:56.084 --> 00:01:59.290
cast this object and
force it to be another type.

31
00:01:59.290 --> 00:02:02.450
You can actually write code
that would access age.

32
00:02:02.450 --> 00:02:07.760
And at runtime, you'll see that you
have a value there and that's 1.

33
00:02:07.760 --> 00:02:12.816
So they both are similar in that they
express this concept of private,

34
00:02:12.816 --> 00:02:16.672
1 is just enforced both at build time and
at runtime,

35
00:02:16.672 --> 00:02:21.370
whereas this kind of field
here is only at build time.

36
00:02:21.370 --> 00:02:26.134
So generally, if you're using a
sufficiently modern version of JavaScript,

37
00:02:26.134 --> 00:02:30.681
which you should be able to do thanks
to projects like Babel, which take care

38
00:02:30.681 --> 00:02:36.010
of the compiling for you, this is
probably the one you want to start using.

39
00:02:36.010 --> 00:02:43.022
Question 2, we have a bunch of
variables here a, b, c, d, and e.

40
00:02:43.022 --> 00:02:48.584
And the question is,
of these five variables,

41
00:02:48.584 --> 00:02:53.318
which of them holds an immutable value?

42
00:02:53.318 --> 00:02:58.221
Immutable, of course,
meaning we cannot change that value,

43
00:02:58.221 --> 00:03:00.818
the value of the variable holds.

44
00:03:03.407 --> 00:03:09.607
If we think about this, a and b,
right, they both hold the string.

45
00:03:09.607 --> 00:03:13.866
So in JavaScript strings
are immutable value types.

46
00:03:13.866 --> 00:03:18.693
And the trap that one can fall into here
is sort of this this idea of const versus

47
00:03:18.693 --> 00:03:23.225
let, const and let they're both
are ways we can declare variables, but

48
00:03:23.225 --> 00:03:26.720
that has more to do with reassignability,
right?

49
00:03:26.720 --> 00:03:32.124
We could take this variable b and we could
point it at a different string, we could,

50
00:03:32.124 --> 00:03:36.525
and that would allow us effectively
later in our code to refer to b and

51
00:03:36.525 --> 00:03:39.360
get something that looks different.

52
00:03:39.360 --> 00:03:43.767
The thing that b points to,
this string here we cannot change,

53
00:03:43.767 --> 00:03:46.520
strings are immutable in JavaScript.

54
00:03:47.670 --> 00:03:50.255
That's why when we split
a string into little parts,

55
00:03:50.255 --> 00:03:53.644
maybe you have like comma separated
values and you split that string,

56
00:03:53.644 --> 00:03:57.100
you basically get an array of totally
new strings that come back to you.

57
00:03:57.100 --> 00:04:00.800
You're not altering that string in place.

58
00:04:00.800 --> 00:04:06.690
All right, so it turns out a and
b both holds immutable values.

59
00:04:06.690 --> 00:04:12.110
These two for similar reasons to what we
just described, these are both mutable.

60
00:04:12.110 --> 00:04:14.150
These are object types.

61
00:04:14.150 --> 00:04:19.126
So for example we could pass
this c into a function, and

62
00:04:19.126 --> 00:04:24.104
despite not reassigning c to anything,
that function

63
00:04:24.104 --> 00:04:29.530
could place a new key and
value inside this object, right?

64
00:04:29.530 --> 00:04:32.030
We can mutate this thing in place.

65
00:04:32.030 --> 00:04:35.790
And you do this all the time with
arrays and with objects, right?

66
00:04:35.790 --> 00:04:37.590
These are our collection types.

67
00:04:37.590 --> 00:04:38.820
So these are both immutable.

68
00:04:38.820 --> 00:04:41.040
And then finally we have
this thing at the bottom.

69
00:04:41.040 --> 00:04:46.800
It's similar to what we see in c and
d, but we're using object.freeze.

70
00:04:46.800 --> 00:04:54.370
And this, it turns out is or
it acts as an immutable value.

71
00:04:54.370 --> 00:04:59.811
So object.freeze prevents new properties
from being added to an object, and it

72
00:04:59.811 --> 00:05:05.820
prevents the existing properties on that
object from being assigned to new values.

73
00:05:05.820 --> 00:05:08.901
And I say that very carefully
because what I just

74
00:05:08.901 --> 00:05:13.080
described will give you kind
of one level of immutability.

75
00:05:13.080 --> 00:05:16.715
So if you have deeply nested objects,

76
00:05:16.715 --> 00:05:22.590
you can still change the values
held in that objects keys.

77
00:05:22.590 --> 00:05:24.585
So if this were an object,

78
00:05:24.585 --> 00:05:29.577
I would be prevented from pointing
learn at to something new, but

79
00:05:29.577 --> 00:05:36.550
nothing's stopping me from changing this,
except the fact that this is a string.

80
00:05:36.550 --> 00:05:39.030
So what I'm showing you here is immutable,
but

81
00:05:39.030 --> 00:05:42.326
object.freeze does not recursively
make things immutable.

82
00:05:42.326 --> 00:05:45.697
So it's a, b, and e.

83
00:05:45.697 --> 00:05:49.672
And the trick here is to make sure
you understand the difference

84
00:05:49.672 --> 00:05:52.598
between reassignability and immutability.

85
00:05:52.598 --> 00:05:58.030
Okay, so we have a fill in
the blank challenge here.

86
00:05:58.030 --> 00:06:00.310
So we create a string.

87
00:06:00.310 --> 00:06:04.940
We create a new variable called val,
and do something with it.

88
00:06:06.450 --> 00:06:10.537
And there's a very obvious answer here,
like,

89
00:06:10.537 --> 00:06:18.070
we do not set it equal to the answer, but
it does something that has to do with STR.

90
00:06:18.070 --> 00:06:21.392
And we can see the result
of the console lock.

91
00:06:24.871 --> 00:06:27.870
So it's str.split.

92
00:06:27.870 --> 00:06:34.620
I see one answer in chat that
has an array and then ...str.

93
00:06:34.620 --> 00:06:41.988
I'm not sure whether that works because
that only works with iterable types, and

94
00:06:41.988 --> 00:06:49.070
I am not sure that strings can be spread
that way to get their character list.

95
00:06:49.070 --> 00:06:51.110
That's the kind of thing that
I'd have to actually check.

96
00:06:51.110 --> 00:06:53.730
But this for sure will work.

97
00:06:53.730 --> 00:06:55.150
All right, next question.

98
00:06:55.150 --> 00:06:57.511
So building on the last question, right?

99
00:06:57.511 --> 00:06:59.483
Where we have the string and

100
00:06:59.483 --> 00:07:05.592
we turn it into something else that sort
of expanded representation of this string.

101
00:07:05.592 --> 00:07:09.350
So we have val equals and
then fill in the blank.

102
00:07:09.350 --> 00:07:11.070
What is the blank in this case?

103
00:07:11.070 --> 00:07:15.629
And you can see what we end up with is,
I would call this, I mean,

104
00:07:15.629 --> 00:07:19.092
some people would call
it an associative array,

105
00:07:19.092 --> 00:07:24.230
where it's kind of like using
numbers to access the properties.

106
00:07:24.230 --> 00:07:28.900
But it's not really an ordered collection,
right?

107
00:07:28.900 --> 00:07:33.655
So there's no sense of like, I mean,
happens to be printed out this way, but

108
00:07:33.655 --> 00:07:37.915
you could have the key for 0 be like
way down here after the number 4.

109
00:07:40.754 --> 00:07:47.259
In this case, you kind of have to
do what we did in the last example

110
00:07:47.259 --> 00:07:52.326
combined with spreading
this out into an object.

111
00:07:52.326 --> 00:07:58.187
So you need something that has effectively
key value pairs in some sense and

112
00:07:58.187 --> 00:08:00.521
arrays do have that, right?

113
00:08:00.521 --> 00:08:03.404
Your keys are 0,1 and
2, those are positions.

114
00:08:03.404 --> 00:08:05.724
So if you spread this out into an object,

115
00:08:05.724 --> 00:08:09.349
you're going to be able to get
an associative array like this.

116
00:08:10.442 --> 00:08:13.000
By the way,
I'm asking these questions for a reason.

117
00:08:13.000 --> 00:08:16.680
It may seem like JavaScript
trivia a little bit here.

118
00:08:16.680 --> 00:08:21.452
We're going to be dealing with spread and
rest all day when it comes to types

119
00:08:21.452 --> 00:08:26.320
because of recent advancements in
TypeScript that let us do that.

120
00:08:26.320 --> 00:08:32.856
Much more flexibly in the 4.x series of
TypeScript releases compared to before.

121
00:08:32.856 --> 00:08:36.047
Looks like some people were
able to do dot, dot, dot, and

122
00:08:36.047 --> 00:08:39.950
then the string spread out into
an object directly in their console.

123
00:08:39.950 --> 00:08:41.090
That's interesting.

124
00:08:41.090 --> 00:08:42.340
This will also work.

125
00:08:42.340 --> 00:08:44.750
So any of these I would
consider to be right answers

