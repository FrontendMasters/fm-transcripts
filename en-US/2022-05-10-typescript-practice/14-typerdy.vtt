WEBVTT

1
00:00:00.240 --> 00:00:06.837
This game is a TypeScript version
of the popular game show Jeopardy.

2
00:00:06.837 --> 00:00:12.063
And it's a PowerPoint deck that is,
it is in the Making TypeScript Stick repo,

3
00:00:12.063 --> 00:00:15.262
the same repo you're using for
your exercises.

4
00:00:15.262 --> 00:00:21.035
So if you look in the Games folder,
there's Jeopardy-1.PPT.

5
00:00:21.035 --> 00:00:24.982
So we're gonna play a couple of these,
but this is a good thing, maybe,

6
00:00:24.982 --> 00:00:28.607
to play with your team at the beginning
of the week in your standup,

7
00:00:28.607 --> 00:00:30.510
go through a couple of questions.

8
00:00:30.510 --> 00:00:32.630
And I used a free template for this, so

9
00:00:32.630 --> 00:00:36.690
you should feel free to kind of share
it around and tweak it as you see fit.

10
00:00:38.520 --> 00:00:44.725
So I am not going to ask people to play
against each other in class here, but

11
00:00:44.725 --> 00:00:52.630
I will ask you to request that we take on,
as a class, numbers in certain categories.

12
00:00:52.630 --> 00:00:58.879
So what we have in terms of categories
are TypeScript language features,

13
00:00:58.879 --> 00:01:02.810
compiler options, utility types, tools and

14
00:01:02.810 --> 00:01:07.772
ecosystem, best practices,
and JS and TS conversions.

15
00:01:07.772 --> 00:01:12.642
And we'll leave the rest for
you to play at home, or with your team.

16
00:01:12.642 --> 00:01:15.434
So Emma, you look very excited.

17
00:01:15.434 --> 00:01:17.104
&gt;&gt; [LAUGH]
&gt;&gt; Why don't you pick our first

18
00:01:17.104 --> 00:01:18.080
question to answer?

19
00:01:19.900 --> 00:01:23.230
&gt;&gt; I'll take JS/TS conversion for
600, Mike.

20
00:01:23.230 --> 00:01:24.515
&gt;&gt; Okay [LAUGH].

21
00:01:24.515 --> 00:01:27.346
&gt;&gt; [LAUGH]
&gt;&gt; So

22
00:01:27.346 --> 00:01:32.303
the answer is you may need to
install one or more of these in

23
00:01:32.303 --> 00:01:37.903
situations where dependencies
do not provide their own types.

24
00:01:40.437 --> 00:01:41.126
I see a hand up.

25
00:01:41.126 --> 00:01:43.471
&gt;&gt; Polyfills?

26
00:01:43.471 --> 00:01:45.376
&gt;&gt; I'm afraid that's incorrect.

27
00:01:45.376 --> 00:01:48.810
Polyfills have some runtime component,
usually.

28
00:01:48.810 --> 00:01:50.736
It's not purely type information.

29
00:01:54.456 --> 00:01:57.233
Someone requested potables for a thousand.

30
00:01:57.233 --> 00:01:59.244
I'm afraid that's not actually a category.

31
00:01:59.244 --> 00:02:03.710
&gt;&gt; [LAUGH]
&gt;&gt; All right, time's up.

32
00:02:03.710 --> 00:02:07.981
The answer is @types/* packages.

33
00:02:07.981 --> 00:02:11.062
We also would have
accepted definitely type,

34
00:02:11.062 --> 00:02:14.149
which is the project
where all this is hosted.

35
00:02:14.149 --> 00:02:17.410
So this is where you get your react types,
and things like that.

36
00:02:17.410 --> 00:02:20.199
All right, so next question.

37
00:02:20.199 --> 00:02:22.610
Would somebody else to request one?

38
00:02:22.610 --> 00:02:26.460
&gt;&gt; Can I get tools and
ecosystems for 400, please?

39
00:02:26.460 --> 00:02:28.291
&gt;&gt; Tools and ecosystems for 400.

40
00:02:32.699 --> 00:02:34.854
All right, the answer is,

41
00:02:34.854 --> 00:02:40.020
this is the official linter
recommended by the TypeScript team.

42
00:02:41.090 --> 00:02:41.740
&gt;&gt; ESLint?

43
00:02:42.760 --> 00:02:46.333
&gt;&gt; Correct, ESLint is the answer.

44
00:02:46.333 --> 00:02:47.409
&gt;&gt; Of course.

45
00:02:47.409 --> 00:02:50.800
&gt;&gt; Used to be TSLint,
but let's keep going.

46
00:02:50.800 --> 00:02:57.068
Okay, so we just did tools and ecosystem
for, I think 400 should clear in a second.

47
00:02:57.068 --> 00:02:59.940
Another category here,
how about someone who's watching online?

48
00:02:59.940 --> 00:03:02.415
Best practices for 800,
thank you very much.

49
00:03:06.010 --> 00:03:10.586
When using this language feature,
it's the author's responsibility to ensure

50
00:03:10.586 --> 00:03:13.317
they're initializing
class fields properly.

51
00:03:18.162 --> 00:03:21.990
I'm sorry, Oscar,
abstract is not the correct answer.

52
00:03:21.990 --> 00:03:25.268
The answer is,
if I click on the right button,

53
00:03:25.268 --> 00:03:28.050
is the definite assignment operator.

54
00:03:28.050 --> 00:03:32.445
You may have seen this where
you do exclamation mark colon.

55
00:03:32.445 --> 00:03:37.296
And at that point,
even if you didn't initialize something in

56
00:03:37.296 --> 00:03:41.880
the constructor,
TypeScript will quiet down and submit.

57
00:03:43.350 --> 00:03:45.959
All right, and the way I'm getting back
to the home screen is I'm clicking on

58
00:03:45.959 --> 00:03:47.577
the word Solution,
which takes us back there.

59
00:03:51.285 --> 00:03:54.244
All right, other requests?

60
00:03:54.244 --> 00:03:55.994
&gt;&gt; Can we do utility types for 600?

61
00:03:55.994 --> 00:03:58.100
&gt;&gt; Utility types for 600.

62
00:03:58.100 --> 00:04:00.823
All right, so in this category,

63
00:04:00.823 --> 00:04:04.920
I have stripped out
an important part of the code.

64
00:04:04.920 --> 00:04:08.733
We're using utility type here, and

65
00:04:08.733 --> 00:04:12.915
you tell me what utility type am I using?

66
00:04:12.915 --> 00:04:14.541
&gt;&gt; Record?

67
00:04:14.541 --> 00:04:19.020
&gt;&gt; I believe that's correct, let's see.

68
00:04:19.020 --> 00:04:20.840
Record, congrats.

69
00:04:22.670 --> 00:04:25.920
So the subtle thing to notice here,
there's a comma there, right?

70
00:04:25.920 --> 00:04:29.660
So it's a lot of or or or, and
then there's no pipe here.

71
00:04:29.660 --> 00:04:33.027
So it's red, green, or blue,
those are the property names,

72
00:04:33.027 --> 00:04:35.940
and then the value type is number or
string.

73
00:04:35.940 --> 00:04:38.350
But, certainly a challenging one to read.

74
00:04:38.350 --> 00:04:39.994
Okay, any other requests?

75
00:04:39.994 --> 00:04:42.020
&gt;&gt; Those language features for 400.

76
00:04:42.020 --> 00:04:43.874
&gt;&gt; Language features for
400, thank you, Mark.

77
00:04:47.226 --> 00:04:49.340
Name this language feature.

78
00:04:50.590 --> 00:04:55.752
And the more specific, the better.

79
00:04:55.752 --> 00:05:01.029
So saying a type is probably too general.

80
00:05:01.029 --> 00:05:02.970
It is a type.

81
00:05:02.970 --> 00:05:08.876
&gt;&gt; Is it the implicit type,
or inferred type?

82
00:05:08.876 --> 00:05:10.847
&gt;&gt; There is no inference going on here.

83
00:05:10.847 --> 00:05:15.600
TypeScript doesn't have to guess anything.

84
00:05:15.600 --> 00:05:17.672
&gt;&gt; Online, they're saying string literal.

85
00:05:17.672 --> 00:05:19.930
&gt;&gt; String literal type, that is correct.

86
00:05:19.930 --> 00:05:21.438
It's a string literal type, right?

87
00:05:21.438 --> 00:05:25.260
It's only the special string red.

88
00:05:25.260 --> 00:05:27.690
All right, we can make this the last one.

89
00:05:28.810 --> 00:05:32.696
&gt;&gt; Judith wants to go big here with-
&gt;&gt; Tools for 1000.

90
00:05:32.696 --> 00:05:34.271
&gt;&gt; Tools for 1000.

91
00:05:34.271 --> 00:05:35.900
&gt;&gt; Swinging big.

92
00:05:35.900 --> 00:05:38.143
A runtime written in Rust,

93
00:05:38.143 --> 00:05:43.320
that can run TypeScript code
directly with no compile needed.

94
00:05:44.330 --> 00:05:48.890
I see the answer,
Michael S in chat says Deno.

95
00:05:48.890 --> 00:05:53.770
Deno is a Node.js alternative written
in Rust that can run your TypeScript

96
00:05:53.770 --> 00:05:55.040
code directly.

97
00:05:55.040 --> 00:05:59.953
It's pretty fast, I don't know anyone
who's using it in production, but

98
00:05:59.953 --> 00:06:01.910
a cool project to look at.

99
00:06:01.910 --> 00:06:02.994
Thank you for playing.

100
00:06:02.994 --> 00:06:05.130
Feel free to play with your team also.

101
00:06:05.130 --> 00:06:06.049
It's fairly easy.

102
00:06:06.049 --> 00:06:08.905
If you grab this deck, you can
replace it with your own questions.

103
00:06:08.905 --> 00:06:13.938
Nice thing to do if you have an all hands,
or something like that,

104
00:06:13.938 --> 00:06:17.702
and it's kind of fun way
to test your knowledge.

