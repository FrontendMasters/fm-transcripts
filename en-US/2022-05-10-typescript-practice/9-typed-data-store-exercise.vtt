WEBVTT

1
00:00:00.000 --> 00:00:04.818
So it's time for us to get hands on and
to tackle our first challenge.

2
00:00:04.818 --> 00:00:12.130
And this is gonna involve some of the new
language features that we just discussed.

3
00:00:12.130 --> 00:00:15.967
In particular,
we're gonna see template literal types,

4
00:00:15.967 --> 00:00:18.047
we'll see some key remapping.

5
00:00:18.047 --> 00:00:21.937
And, should be a good opportunity for
us to sort of kick the tires on

6
00:00:21.937 --> 00:00:26.189
these things if you haven't had a chance
to use them in your project yet.

7
00:00:26.189 --> 00:00:28.626
So, here is the challenge.

8
00:00:28.626 --> 00:00:33.059
I want us to build a data store.

9
00:00:33.059 --> 00:00:41.079
So what I mean by this is just a class
that holds records of particular types.

10
00:00:41.079 --> 00:00:45.031
And so let's say this is for
a media library of some kind, so

11
00:00:45.031 --> 00:00:47.254
we have a movie and we have a song.

12
00:00:47.254 --> 00:00:51.780
And you can see like there's this
base interface with an ID and

13
00:00:51.780 --> 00:00:56.046
then movies in addition to
the ID they have a director, and

14
00:00:56.046 --> 00:01:00.596
songs in addition to an ID they
have a property called singer.

15
00:01:00.596 --> 00:01:02.237
So they're a little bit different.

16
00:01:02.237 --> 00:01:07.981
But we want something that allows
us to get a list of all the songs,

17
00:01:07.981 --> 00:01:09.450
all the movies.

18
00:01:09.450 --> 00:01:13.729
It allows us to clear those lists out,
it allows us to get something by ID.

19
00:01:13.729 --> 00:01:17.314
So that's what data store
is going to turn into.

20
00:01:17.314 --> 00:01:22.256
Now, to normally that would be a fairly
straightforward ask maybe a little

21
00:01:22.256 --> 00:01:23.989
bit too easy of a problem.

22
00:01:23.989 --> 00:01:29.492
What I want us to do is solve
this problem in a way where

23
00:01:29.492 --> 00:01:36.259
this type is kind of the source of
truth for what we are managing.

24
00:01:36.259 --> 00:01:40.411
Meaning, if I were to add, let's say,

25
00:01:40.411 --> 00:01:46.289
painting to this list and
add a new painting type up here.

26
00:01:46.289 --> 00:01:49.343
I would expect some type
errors to show us, look,

27
00:01:49.343 --> 00:01:54.074
you're supposed to have this convention
where you have these methods on a per

28
00:01:54.074 --> 00:01:57.674
resource basis and
they should be named a particular way.

29
00:01:57.674 --> 00:02:01.596
I would want some sort of enforcement
through the use of interfaces, right?

30
00:02:01.596 --> 00:02:06.437
That there is this contract and each
type of entity this data store managers,

31
00:02:06.437 --> 00:02:08.829
it has to have the get the list of them.

32
00:02:08.829 --> 00:02:14.016
It has to have the clear the list thing,
and it has to have get by ID, okay?

33
00:02:14.016 --> 00:02:16.809
So, here's an example of usage.

34
00:02:16.809 --> 00:02:21.209
We create our new data store, we can see
we're able to add songs, add movies.

35
00:02:21.209 --> 00:02:25.024
We can get a song or get a movie by ID.

36
00:02:25.024 --> 00:02:31.994
We can get the list, get all and
then we can clear the list.

37
00:02:31.994 --> 00:02:37.659
And you'll end up implementing these
directly in your data store class.

38
00:02:37.659 --> 00:02:40.914
It is a trap to try to
get too clever with this,

39
00:02:40.914 --> 00:02:46.146
try to make everything generic,
maybe try some object defined property

40
00:02:46.146 --> 00:02:51.055
backflips to sort of programmatically
build this kind of thing up.

41
00:02:51.055 --> 00:02:58.367
Don't go there, we're not looking for
programmatic assembly of this data store.

42
00:02:58.367 --> 00:03:01.197
We're looking to have great type checking.

43
00:03:01.197 --> 00:03:05.564
That's the point here,
great enforcement of this contract.

44
00:03:05.564 --> 00:03:09.076
So, here are some requirements.

45
00:03:09.076 --> 00:03:14.671
If you miss name a method on the class,
meaning you deviate from this convention,

46
00:03:14.671 --> 00:03:18.418
you see here we've got get all songs,
get all movies.

47
00:03:18.418 --> 00:03:23.076
But let's say instead of that method name,
you said get songs,

48
00:03:23.076 --> 00:03:27.648
we should see a type error and
it should be somewhere reasonably

49
00:03:27.648 --> 00:03:31.369
close to where that problem
needs to be addressed.

50
00:03:31.369 --> 00:03:35.695
If we add a new type of media
to our data entity map,

51
00:03:35.695 --> 00:03:41.268
in this case I think I said painting
before a comic would also do.

52
00:03:41.268 --> 00:03:46.047
And make no other changes to your
solution, you should see type errors

53
00:03:46.047 --> 00:03:50.834
that tell you hey, data store is
supposed to have these methods on it.

54
00:03:53.534 --> 00:03:58.259
So this kind of change should light
some things up and you should see, hey,

55
00:03:58.259 --> 00:04:03.434
we're supposed to have this convention,
we need to implement some things here.

56
00:04:05.954 --> 00:04:10.553
Pro tip, just make sure there are no other
externally visible properties on the data

57
00:04:10.553 --> 00:04:14.849
store because one of the test in the test
suite checks for a set of method names.

58
00:04:14.849 --> 00:04:20.549
And that test will fail if you
have extra stuff in there.

59
00:04:20.549 --> 00:04:23.403
Your coach it obviously passed
the test suite and type-check.

60
00:04:23.403 --> 00:04:26.395
And I think that's it.

61
00:04:26.395 --> 00:04:31.593
So, in terms of how to set this up,
here's some instructions.

62
00:04:31.593 --> 00:04:33.353
Clone the repo, enter it.

63
00:04:33.353 --> 00:04:36.987
Install Volta, if you haven't already,
it's not mandatory,

64
00:04:36.987 --> 00:04:40.565
but it will rule out some potential
problems you could run into.

65
00:04:40.565 --> 00:04:43.126
This is the complete instruction for

66
00:04:43.126 --> 00:04:48.419
setting up Volta on a POSIX compliant
operating system like Mac OS or Linux.

67
00:04:48.419 --> 00:04:53.650
And the job of Volta is to make
sure that you're using the same

68
00:04:53.650 --> 00:04:59.199
package manager and
node versions that everyone else is using.

69
00:04:59.199 --> 00:05:04.949
So if you've used like nvm,
this is a modern version of that.

70
00:05:04.949 --> 00:05:08.502
So then you're gonna
install your dependencies,

71
00:05:08.502 --> 00:05:12.313
move to the directory in
which this challenge exists.

72
00:05:12.313 --> 00:05:15.546
You should be able to run Yarn test.

73
00:05:15.546 --> 00:05:18.899
And then here is the file that
you're going to be working with.

74
00:05:18.899 --> 00:05:21.899
So I'm gonna go through the steps
right now in front of you so

75
00:05:21.899 --> 00:05:23.579
you can see what that looks like.

76
00:05:23.579 --> 00:05:25.909
If you run into trouble, here are hints.

77
00:05:25.909 --> 00:05:31.569
There links to concepts that
are involved in this solution.

78
00:05:31.569 --> 00:05:36.897
I'm not trying to lead you
directly toward the key idea here,

79
00:05:36.897 --> 00:05:40.384
but my solution involves these things.

80
00:05:40.384 --> 00:05:44.053
So if you're stuck, take a look at those.

81
00:05:44.053 --> 00:05:49.058
So with that, I'll show you where
to go to start your problem.

82
00:05:53.282 --> 00:05:55.879
So I've just checked out the project,

83
00:05:55.879 --> 00:06:00.773
now I'm gonna run Yarn to make sure
I've installed all my dependencies.

84
00:06:00.773 --> 00:06:06.914
And then the location of this
challenge is in challenges data layer.

85
00:06:09.036 --> 00:06:10.229
So let's go there.

86
00:06:15.499 --> 00:06:18.840
And then in here you should
be able to run Yarn test,

87
00:06:18.840 --> 00:06:21.266
you should see a bunch of tests fail.

88
00:06:21.266 --> 00:06:23.367
And in fact we do.

89
00:06:26.545 --> 00:06:31.342
Here's the code that you should be
modifying, it's in source, index TS.

90
00:06:31.342 --> 00:06:35.831
And you shouldn't need to change
any of this stuff up here.

91
00:06:35.831 --> 00:06:38.638
This is sort of just
the court date entities.

92
00:06:38.638 --> 00:06:43.520
In fact, you shouldn't really need to
change this much except to experiment

93
00:06:43.520 --> 00:06:47.214
with whether adding that comic
media type works, right?

94
00:06:47.214 --> 00:06:51.084
Everything else you can
just do within data store.

95
00:06:51.084 --> 00:06:55.865
Again, don't try to get too
clever with making data store,

96
00:06:55.865 --> 00:06:58.695
generate over the data entity map.

97
00:06:58.695 --> 00:07:01.986
It's okay for
us to hard code that aspect of things.

98
00:07:01.986 --> 00:07:04.400
That's not the point of what
we're trying to do here.

