WEBVTT

1
00:00:00.200 --> 00:00:04.441
Just a reminder a task is
to produce a type that's

2
00:00:04.441 --> 00:00:09.314
similar to this here,
the type of this methods object.

3
00:00:09.314 --> 00:00:13.991
But we want to see every non
promise value that is returned

4
00:00:13.991 --> 00:00:17.116
from a function wrapped in a promise.

5
00:00:17.116 --> 00:00:22.219
So first what we can do is check
to see if this object has a lot of

6
00:00:22.219 --> 00:00:27.726
functions on it because effectively
we need to kinda like extract

7
00:00:27.726 --> 00:00:32.854
out that return value and
maybe wrap it in a promise somehow.

8
00:00:32.854 --> 00:00:35.392
So we'll probably need a map type, right?

9
00:00:35.392 --> 00:00:40.072
Anytime you iterate over the keys of
something, and you're producing new

10
00:00:40.072 --> 00:00:44.321
values or new value types,
map type is probably what you want to do.

11
00:00:44.321 --> 00:00:52.548
So here we're gonna say K in key of T,
good.

12
00:00:52.548 --> 00:00:53.609
Great and that compiles.

13
00:00:53.609 --> 00:00:58.229
So here, then we're gonna say,
all right, so

14
00:00:58.229 --> 00:01:01.927
if the value found that's associated

15
00:01:01.927 --> 00:01:06.794
with a different key is
an instance of a function.

16
00:01:06.794 --> 00:01:11.793
Sorry instance of it's not the word
we use here extends function.

17
00:01:11.793 --> 00:01:13.810
So this is gonna be our call signature.

18
00:01:25.584 --> 00:01:28.729
And we're gonna use infer to kind
of pluck out that return type.

19
00:01:28.729 --> 00:01:32.893
So we're beginning a conditional
type here and we're saying look,

20
00:01:32.893 --> 00:01:34.974
if it extend this callable thing,

21
00:01:34.974 --> 00:01:39.596
by the way while we're performing this
check go pluck off that return type.

22
00:01:39.596 --> 00:01:47.354
And then we could say promise
are otherwise never and

23
00:01:47.354 --> 00:01:51.944
let's see what we have so far.

24
00:01:54.527 --> 00:01:56.374
So what does async methods look like?

25
00:01:59.854 --> 00:02:05.134
We've got add and subtract, sorry,
those are now promises that

26
00:02:05.134 --> 00:02:10.997
resolve to numbers we need them to be
methods that return these promise.

27
00:02:10.997 --> 00:02:18.124
So we can go up here so
effectively we can just alter this branch.

28
00:02:18.124 --> 00:02:23.018
So we'll say, Infer args,

29
00:02:23.018 --> 00:02:26.324
we'll use our variadic tupple type there.

30
00:02:33.217 --> 00:02:36.916
That's easy we kind of capture
the args capture the return value.

31
00:02:41.014 --> 00:02:46.102
And turns out that this looks like the
solution here at least a basic solution,

32
00:02:46.102 --> 00:02:46.651
right?

33
00:02:46.651 --> 00:02:50.742
So, important things to look at here
we're using a conditional type,

34
00:02:50.742 --> 00:02:52.527
here's the extends keyword.

35
00:02:52.527 --> 00:02:56.681
The branch if that pans out is true,
this is the false branch.

36
00:02:56.681 --> 00:03:00.014
And then we can use this infer
keyword to sort of, as we're

37
00:03:00.014 --> 00:03:04.927
matching against this pattern much like a
regular expression right where we can say.

38
00:03:04.927 --> 00:03:06.220
Do you match this pattern?

39
00:03:06.220 --> 00:03:08.780
And by the way,
while you're making the match,

40
00:03:08.780 --> 00:03:13.105
pluck out this part of the email address,
give me the domain, give me the user ID.

41
00:03:13.105 --> 00:03:18.335
And that gives us an opportunity to
sort of refer to the arguments and

42
00:03:18.335 --> 00:03:21.200
the return value in a different way.

43
00:03:21.200 --> 00:03:26.853
So let me add an async thing here and
see how it works.

44
00:03:28.785 --> 00:03:33.614
Right, a function that
already returns to promise.

45
00:03:33.614 --> 00:03:41.000
That resolves to a number, And
let's see what happens here.

46
00:03:41.000 --> 00:03:42.944
So I would hope,

47
00:03:53.819 --> 00:03:58.338
Yeah, so this is not desirable see how
we're returning a promise that resolves to

48
00:03:58.338 --> 00:04:01.240
a promise so that resolves to a number.

49
00:04:01.240 --> 00:04:03.756
There is no need to direct
promises like this.

50
00:04:03.756 --> 00:04:06.566
We chain them,
we don't nest them like this.

51
00:04:06.566 --> 00:04:08.333
So how might we address this?

52
00:04:08.333 --> 00:04:13.281
Well, an easy way to do that is to say,

53
00:04:13.281 --> 00:04:20.728
in this branch if our extends promise,
any then do that.

54
00:04:20.728 --> 00:04:25.894
Otherwise, our return

55
00:04:25.894 --> 00:04:31.323
value is just, R right.

56
00:04:31.323 --> 00:04:36.863
Sorry I might have my condition reversed
here if R is already a promise.

57
00:04:36.863 --> 00:04:41.018
That's where we want to
just send it right through.

58
00:04:41.018 --> 00:04:43.969
And then this is if it's not a promise,

59
00:04:43.969 --> 00:04:47.912
then we we wrap it in that promise,
and we need this.

60
00:04:47.912 --> 00:04:49.033
So,

61
00:04:58.833 --> 00:05:00.833
All right, and let's see what we've got.

62
00:05:00.833 --> 00:05:02.531
Do a sync thing perfect.

63
00:05:02.531 --> 00:05:04.703
It's a promise that resolves to a number.

64
00:05:04.703 --> 00:05:06.913
Add is a promise that
resolves to a number.

65
00:05:06.913 --> 00:05:11.473
So we're just taking the things
that kind of match we're

66
00:05:11.473 --> 00:05:14.050
iterating over all of the keys.

67
00:05:14.050 --> 00:05:18.334
And if the value is a method,
anything callable,

68
00:05:18.334 --> 00:05:24.153
then we're doing this promise wrapping and
only where necessary.

69
00:05:24.153 --> 00:05:29.621
So if we have as an added
benefit something like this,

70
00:05:34.993 --> 00:05:39.411
That's never why we end up with an error
because it's down here we can make we

71
00:05:39.411 --> 00:05:43.567
could let that pass straight through
just for fun as a little extra thing

72
00:05:50.971 --> 00:05:55.594
So here you can see foo could either pass
through as number we could have it passed

73
00:05:55.594 --> 00:05:59.872
through as a promise that resolves to
a number this is kind of where we would

74
00:05:59.872 --> 00:06:02.026
handle none method things, right.

75
00:06:02.026 --> 00:06:04.649
There are no tests in either
case that deal with this.

76
00:06:04.649 --> 00:06:08.986
So it ends up being quite a complicated
type, but the key here is to break it down

77
00:06:08.986 --> 00:06:13.227
into small pieces, sort of sanity,
check yourself as you go along the way.

78
00:06:13.227 --> 00:06:17.268
By the way, all the tests that we've
written we've coded against for

79
00:06:17.268 --> 00:06:21.050
type information today are using
this great library called TSD.

80
00:06:21.050 --> 00:06:25.294
That's where this expect type thing from.

81
00:06:25.294 --> 00:06:29.470
This is really great writing tests for
type information vision is important.

82
00:06:29.470 --> 00:06:33.050
And it helps especially as new compiler
versions come along things may

83
00:06:33.050 --> 00:06:37.116
occasionally break, this helps you kind
of make sure that you can tune things up

84
00:06:37.116 --> 00:06:38.830
without breaking other things.

