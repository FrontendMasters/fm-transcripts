WEBVTT

1
00:00:00.000 --> 00:00:00.851
Welcome back.

2
00:00:00.851 --> 00:00:06.225
So we're going to go through this
challenge and we're gonna build a data

3
00:00:06.225 --> 00:00:11.171
store that has a strong opinion
about how a method should be named.

4
00:00:11.171 --> 00:00:15.953
And we will see how we can sort of
establish that convention with types.

5
00:00:15.953 --> 00:00:19.425
And get great feedback in
our editor as this evolves,

6
00:00:19.425 --> 00:00:22.972
as we do things like what we
see on the screen right now,

7
00:00:22.972 --> 00:00:27.007
adding new types of media that
this data store aims to manage.

8
00:00:27.007 --> 00:00:32.561
So, first, I gotta go to my editor here.

9
00:00:32.561 --> 00:00:36.708
All right, so
first thing we need to do is we

10
00:00:36.708 --> 00:00:41.102
have a contract that we
wish to enforce here.

11
00:00:41.102 --> 00:00:45.807
And the way that's typically
done with a class like

12
00:00:45.807 --> 00:00:49.538
this is through the use of an interface.

13
00:00:49.538 --> 00:00:51.080
I can actually get rid of that.

14
00:00:51.080 --> 00:00:58.919
So let's say,
implements DataStoreMethods, right?

15
00:00:58.919 --> 00:01:04.048
So this interface is gonna do the job
of having all of those methods on it.

16
00:01:04.048 --> 00:01:07.846
This is what's gonna give me this type
checking that makes sure I have the right

17
00:01:07.846 --> 00:01:08.552
things here.

18
00:01:08.552 --> 00:01:14.664
So now, our challenges, we need this
thing here to sort of be dynamic.

19
00:01:14.664 --> 00:01:17.861
One way we could do this,
we could be like, so

20
00:01:17.861 --> 00:01:23.099
this interface is the way we're gonna
establish this contract, right?

21
00:01:23.099 --> 00:01:26.883
This set of things that
datastore must have.

22
00:01:26.883 --> 00:01:31.417
So one way we could do that is explicitly
enumerating all of the different methods.

23
00:01:31.417 --> 00:01:35.944
But this doesn't seem to meet
this requirement that we have

24
00:01:35.944 --> 00:01:39.309
around making this one simple change here.

25
00:01:39.309 --> 00:01:44.588
And then automatically seeing some
feedbacks that says, hey, we should have

26
00:01:44.588 --> 00:01:50.272
clearComics, getAllComics, sort of that
says getComics or something like that.

27
00:01:50.272 --> 00:01:53.219
We should have this methods for comics.

28
00:01:53.219 --> 00:01:59.229
So we can't do that, but what we can do is
attempt to programmatically build them up.

29
00:01:59.229 --> 00:02:03.801
And I'm going to need a mapped
type in order to make that work

30
00:02:03.801 --> 00:02:07.652
because once I do that,
I sort of have my for loop.

31
00:02:07.652 --> 00:02:14.164
And one way we can do this is,
we can say I have a type,

32
00:02:14.164 --> 00:02:19.195
and I can say we have a key,
and that key is

33
00:02:19.195 --> 00:02:24.098
the property names of data entity map.

34
00:02:24.098 --> 00:02:27.961
Does anyone have a suggestion
as how I could do that?

35
00:02:27.961 --> 00:02:34.160
How do I get the properties on
an interface in a string literal type?

36
00:02:34.160 --> 00:02:35.858
&gt;&gt; Object.keys.

37
00:02:35.858 --> 00:02:41.775
&gt;&gt; Object.keys,
there's a type equivalent to that,

38
00:02:41.775 --> 00:02:44.410
keyof DataEntityMap.

39
00:02:44.410 --> 00:02:47.067
So if I just did this,

40
00:02:47.067 --> 00:02:52.399
let's just take a look
at what it gives us.

41
00:02:52.399 --> 00:02:58.056
So, ds = new DataStore,

42
00:02:58.056 --> 00:03:00.894
just giving us something to look at here.

43
00:03:00.894 --> 00:03:05.260
ds dot, we're not gonna have
it until we implement these.

44
00:03:05.260 --> 00:03:06.675
But you could say, hey,

45
00:03:06.675 --> 00:03:11.472
we're missing the following properties
from DataStore methods, movie and song.

46
00:03:11.472 --> 00:03:17.754
We should have properties called movie and
song and we don't have them.

47
00:03:17.754 --> 00:03:20.101
So this is the kind of
feedback we're looking for,

48
00:03:20.101 --> 00:03:22.838
but it's not exactly these
words that were interested in.

49
00:03:22.838 --> 00:03:26.867
Then this is where a template
literal type could be useful.

50
00:03:26.867 --> 00:03:30.734
So what we can do here is use
this key remapping feature.

51
00:03:30.734 --> 00:03:34.386
So it's not these specific
words here that we want, but

52
00:03:34.386 --> 00:03:37.817
it's something that's
derived from those words.

53
00:03:37.817 --> 00:03:44.869
So we could say as and
then backtick getAll,

54
00:03:44.869 --> 00:03:50.975
and then here's our dynamic piece K.

55
00:03:50.975 --> 00:03:57.208
And let's see what we get now, hey,
look at that ,getAllmovie, getAllsong.

56
00:03:57.208 --> 00:04:01.996
The case is wrong, we needed sort of
an S at the end to make it plural,

57
00:04:01.996 --> 00:04:06.783
but we can see that that the last
slide of this error message suggests

58
00:04:06.783 --> 00:04:11.751
that our key remapping is happening
the way we would want it to happen.

59
00:04:11.751 --> 00:04:15.677
So let's add that s to make it plural and

60
00:04:15.677 --> 00:04:20.318
let's capitalize this
with those nice little

61
00:04:20.318 --> 00:04:25.079
helper utilities that
allow us to transform K.

62
00:04:25.079 --> 00:04:29.877
So look at that, we've got getAllmovies,
getAllsongs, great.

63
00:04:29.877 --> 00:04:34.182
Now these are not properties,
these should be methods, right?

64
00:04:34.182 --> 00:04:39.365
So this is a case where the value,
the type of the value

65
00:04:39.365 --> 00:04:43.989
in our map type should be
some sort of function.

66
00:04:43.989 --> 00:04:49.460
And in this case, when we're
getting the entire list of things,

67
00:04:49.460 --> 00:04:53.835
I think it's probably a zero
argument function that

68
00:04:53.835 --> 00:04:58.623
returns something,
it returns an array of some things.

69
00:04:58.623 --> 00:05:04.193
Now what that array is, it should probably
depend on what you're asking for, right?

70
00:05:04.193 --> 00:05:09.818
This is if you say getAllmovies,
you should get an array of movies.

71
00:05:09.818 --> 00:05:12.794
If you say getAllsongs,
you should get an array of songs.

72
00:05:12.794 --> 00:05:14.966
And so how might we do that?

73
00:05:18.513 --> 00:05:22.417
I'll take an answer also if you wanna
think of this in terms of values instead

74
00:05:22.417 --> 00:05:22.975
of types.

75
00:05:26.642 --> 00:05:31.111
Do we have enough information here
is I guess the first question

76
00:05:31.111 --> 00:05:33.822
remembering that this is like a loop.

77
00:05:33.822 --> 00:05:37.747
Or this is first,
it's movie and then it's song.

78
00:05:37.747 --> 00:05:40.172
&gt;&gt; Indexed access types.

79
00:05:40.172 --> 00:05:45.813
&gt;&gt; Index access types, and that's sort
of like square bracket notation for

80
00:05:45.813 --> 00:05:52.280
going through an interface, given a key,
get the value type stored under that key.

81
00:05:52.280 --> 00:05:57.837
And so in this case, we've got K, and
so that's not quite what we want.

82
00:05:57.837 --> 00:06:02.425
I mean, if we look, well, there's not
an easy place to see it right now.

83
00:06:02.425 --> 00:06:07.927
Actually, we could do it this way,
ds DataStoreMethods.

84
00:06:09.891 --> 00:06:11.631
Just to fake it.

85
00:06:11.631 --> 00:06:14.769
So we have something a nice
autocomplete thing to look at.

86
00:06:14.769 --> 00:06:21.374
So, okay, what we get here is an array
of literally the string movie.

87
00:06:21.374 --> 00:06:22.587
That's not what we want.

88
00:06:22.587 --> 00:06:23.853
We want movies.

89
00:06:23.853 --> 00:06:26.490
So what we're gonna do
is say DataEntityMap.

90
00:06:29.685 --> 00:06:34.733
And then pass in the key and
then we can get that back.

91
00:06:34.733 --> 00:06:38.743
So we're gonna pass in movie,
we're gonna get the interface movie.

92
00:06:38.743 --> 00:06:42.057
And then we want an array of those things.

93
00:06:42.057 --> 00:06:44.670
And where does that leave us?

94
00:06:44.670 --> 00:06:48.872
getAllMovies, getAllSongs.

95
00:06:48.872 --> 00:06:55.615
So this brings a lot of different
things together as one.

96
00:06:55.615 --> 00:06:58.687
We have a mapped type.

97
00:06:58.687 --> 00:07:05.082
We have key remapping which makes
use of this template literal type.

98
00:07:05.082 --> 00:07:10.040
And then we have an index access type
which lets us use this interface

99
00:07:10.040 --> 00:07:12.129
here as the source of truth.

100
00:07:12.129 --> 00:07:17.196
And it makes it so
that we're not writing every single

101
00:07:17.196 --> 00:07:21.823
getAllMovies, getAllSongs, getAllComics.

102
00:07:21.823 --> 00:07:26.806
We're establishing a convention that
is based on this thing up here.

103
00:07:26.806 --> 00:07:32.459
And to prove that this works
let's have this comic thing.

104
00:07:32.459 --> 00:07:37.225
So I believe I had issue
number which is a number.

105
00:07:40.876 --> 00:07:42.891
And we'll add comic down here.

106
00:07:47.562 --> 00:07:51.533
And we should see, hey, getAllComics.

107
00:07:51.533 --> 00:07:56.208
We're being told, look, there's this
convention, I see in your DataEntityMap.

108
00:07:56.208 --> 00:08:02.900
You've got this concept of a comic and
your interface here Or this type.

109
00:08:02.900 --> 00:08:07.349
It tells me that I should
have a method here that when

110
00:08:07.349 --> 00:08:10.950
called returns an array of comics.

111
00:08:10.950 --> 00:08:12.190
So here we go.

112
00:08:12.190 --> 00:08:15.270
There it is, comics, movies, songs.

113
00:08:16.310 --> 00:08:19.990
So this is really at the core of
what this exercise is all about.

114
00:08:19.990 --> 00:08:22.470
Now, how do we make this work for
the other methods?

115
00:08:23.590 --> 00:08:24.610
Just smash them together.

116
00:08:25.730 --> 00:08:30.518
So here we would say,
get song and this will return

117
00:08:30.518 --> 00:08:35.648
one thing instead of an array
of songs it will return,

118
00:08:35.648 --> 00:08:39.764
just a song and
we'll take in an id as well.

119
00:08:42.195 --> 00:08:43.784
Where does that leave us?

120
00:08:43.784 --> 00:08:51.119
Get comic takes in an id,
returns a comic, get all comics.

121
00:08:52.920 --> 00:08:54.710
See how that's all nice there.

122
00:08:54.710 --> 00:08:56.500
Now we're going to have to implement this.

123
00:08:56.500 --> 00:09:00.610
But this is sort of the most
interesting part of this challenge.

124
00:09:00.610 --> 00:09:03.760
Let me add a new line here.

125
00:09:03.760 --> 00:09:08.780
Just so we're not having to read,
scrolling things from left to right.

126
00:09:09.840 --> 00:09:13.691
So in both cases its sort
of a loop over these keys,

127
00:09:13.691 --> 00:09:18.187
a remapping which is where we
establish a method name, and

128
00:09:18.187 --> 00:09:22.460
then this is just simply
the type of the method.

129
00:09:22.460 --> 00:09:27.413
And the way we can in the abstract refer
to the kind of thing we're returning

130
00:09:27.413 --> 00:09:32.362
be it an array of them or a single one,
it's using this index x access type,

131
00:09:32.362 --> 00:09:34.820
passing k into that data entity map.

132
00:09:38.932 --> 00:09:40.017
So I'm going to add two more.

133
00:09:44.339 --> 00:09:45.703
I think one more, clear.

134
00:09:47.941 --> 00:09:50.810
Clear and then plural again.

135
00:09:50.810 --> 00:09:53.640
This is going to be,
I believe a void function.

136
00:09:53.640 --> 00:09:55.468
The test suite will tell us.

137
00:09:55.468 --> 00:09:59.540
And just, to take the pressure
off absorbing all of this.

138
00:09:59.540 --> 00:10:04.440
This is three uses of
largely the same pattern.

139
00:10:04.440 --> 00:10:08.692
Really the only thing that's
changing is the type of the value

140
00:10:08.692 --> 00:10:13.539
that the method returns and
this template literal type, that's it.

141
00:10:13.539 --> 00:10:17.715
We're not even changing the way
this is capitalized here, so

142
00:10:17.715 --> 00:10:19.576
it's sort of three loops.

143
00:10:19.576 --> 00:10:24.885
And you may know of interfaces
as being this thing when you're

144
00:10:24.885 --> 00:10:30.140
using a class and
you're saying this implements a type.

145
00:10:30.140 --> 00:10:33.930
You may think, this type,
it's like, should be an interface.

146
00:10:33.930 --> 00:10:38.905
Well, it doesn't have to be this
has to just be something that

147
00:10:38.905 --> 00:10:41.975
is possible for a class to implement.

148
00:10:41.975 --> 00:10:46.805
So, if we said it could be no,
now we'll be like,

149
00:10:46.805 --> 00:10:50.945
we'll be told hey, if you can't do that,

150
00:10:50.945 --> 00:10:55.330
there's no way for
class to end up being now.

151
00:10:57.370 --> 00:11:02.277
So as long as it plays by the rules
that a class must play by,

152
00:11:02.277 --> 00:11:05.250
you can use a type alias like this.

153
00:11:05.250 --> 00:11:08.703
And we need to, in fact, in this case,

154
00:11:08.703 --> 00:11:13.523
because you can only have one
index signature like this

155
00:11:13.523 --> 00:11:18.190
in any given interface or
any given type like this.

156
00:11:18.190 --> 00:11:23.190
And that's why we have to sort of end them
together to create one cohesive thing.

157
00:11:23.190 --> 00:11:28.160
So how might we make this work in reality?

158
00:11:28.160 --> 00:11:32.216
I think we have all the methods we
need now, we've got the clears,

159
00:11:32.216 --> 00:11:37.141
we've got the movies and songs, we've
get comic I think that's all I'm seeing

160
00:11:37.141 --> 00:11:39.838
just based on the limitations
of this list.

161
00:11:39.838 --> 00:11:44.025
I'm also going to remove this so
that we pass the test suite.

162
00:11:44.025 --> 00:11:46.295
But that was a good sanity check for us.

163
00:11:46.295 --> 00:11:47.935
I'm just going to comment that out for
now.

164
00:11:49.565 --> 00:11:51.735
And let's go ahead and implement this.

165
00:11:53.035 --> 00:11:56.845
So the first thing we need
is a place to store data.

166
00:11:56.845 --> 00:11:59.107
And anytime that I see
some pattern like this,

167
00:11:59.107 --> 00:12:02.993
right where we're retrieving something by
id, I kind of want to store it in a way

168
00:12:02.993 --> 00:12:05.430
where that access this is
going to be really fast.

169
00:12:05.430 --> 00:12:10.413
So, I can say we're going to have,
an object called data and

170
00:12:10.413 --> 00:12:14.420
I'm going to make it a real
private class field so

171
00:12:14.420 --> 00:12:21.100
that no one from the outside can get at
this except through the methods I provide.

172
00:12:22.480 --> 00:12:25.030
And this is going to be
of a particular type.

173
00:12:25.030 --> 00:12:30.405
So we could say, key, In

174
00:12:30.405 --> 00:12:35.675
key of data entity map,
and then the value is

175
00:12:35.675 --> 00:12:41.950
going to be a dictionary
that holds data entity map.

176
00:12:41.950 --> 00:12:43.580
So, we could do that another way.

177
00:12:44.730 --> 00:12:48.850
Record, can anyone tell me
what a record type does?

178
00:12:48.850 --> 00:12:50.030
Like what this little helper does?

179
00:12:51.580 --> 00:12:58.200
So if I were to do like string,
data entity map of type k.

180
00:13:01.692 --> 00:13:02.452
Let me make this more simple.

181
00:13:22.448 --> 00:13:27.460
So, what record does, it effectively
it's a shortcut to a dictionary.

182
00:13:27.460 --> 00:13:30.658
Now that we get that nice
unchecked indexed access thing,

183
00:13:30.658 --> 00:13:34.630
where there's the possibility
of something being undefined.

184
00:13:34.630 --> 00:13:38.140
I don't need to define my
own dict type anymore.

185
00:13:39.690 --> 00:13:40.760
I can just use record.

186
00:13:42.040 --> 00:13:47.186
So it's just saying they'll give me
an object with key of string and

187
00:13:47.186 --> 00:13:49.454
value types of string array.

188
00:13:49.454 --> 00:13:54.314
So effectively what we're doing
down here is we're saying loop

189
00:13:54.314 --> 00:13:59.534
through all of the keys in data entity
map that's these here movie and

190
00:13:59.534 --> 00:14:05.015
song and then so let's create
an object with keys, movie and song.

191
00:14:05.015 --> 00:14:07.817
And each of those should
have a dictionary,

192
00:14:07.817 --> 00:14:11.725
right an object where you
can have any key you want.

193
00:14:11.725 --> 00:14:16.695
And the value type is going to be
the interface movie, the interface song.

194
00:14:18.655 --> 00:14:24.698
And we'll start at empty,
We're being yelled

195
00:14:24.698 --> 00:14:30.112
at because,
We can't start out totally empty.

196
00:14:33.340 --> 00:14:34.937
You got to start out this kind of empty,

197
00:14:43.356 --> 00:14:45.190
And a comma would help.

198
00:14:45.190 --> 00:14:49.249
So if I wanted to make this
more complicated which I don't,

199
00:14:49.249 --> 00:14:51.197
you could call this movies,

200
00:14:51.197 --> 00:14:56.147
songs you just do more Q rap remapping
here but no need to overdo it right,

201
00:14:56.147 --> 00:15:01.800
especially while we're just trying
to wrap our heads around this thing.

202
00:15:01.800 --> 00:15:05.313
So now, time for
me to implement all of these methods.

203
00:15:05.313 --> 00:15:09.307
And unfortunately because it's
a little bit abstract here,

204
00:15:09.307 --> 00:15:14.550
vs code is not going to help us and just
say, implement all of these things for me.

205
00:15:14.550 --> 00:15:18.385
It would do that, if it were a simpler
interface, but it may be having trouble

206
00:15:18.385 --> 00:15:22.150
figuring out exactly what we're
supposed to be doing here.

207
00:15:22.150 --> 00:15:24.990
Thankfully, it's a pretty
repetitive pattern.

208
00:15:24.990 --> 00:15:26.510
So, we'll just do this manually.

209
00:15:28.310 --> 00:15:30.135
Get all songs return to song.

210
00:15:35.374 --> 00:15:36.638
Sorry an array of songs.

211
00:15:39.762 --> 00:15:45.790
Get song,
we'll just do them like this one triplet.

212
00:15:47.180 --> 00:15:53.352
And then clearSongs, this returns nothing.

213
00:15:53.352 --> 00:15:57.624
Great so that's for song and

214
00:15:57.624 --> 00:16:03.321
then I'm going to implement these and

215
00:16:03.321 --> 00:16:06.940
then I'm just gonna copy and
then replace it with movie.

216
00:16:09.210 --> 00:16:16.860
So here, we're gonna need something
like to return the list of songs.

217
00:16:16.860 --> 00:16:20.611
So we'll get all the keys for the song,

218
00:16:20.611 --> 00:16:24.820
Object.keys(this.#data.song) and

219
00:16:24.820 --> 00:16:29.604
map over those and
get the corresponding values.

220
00:16:49.780 --> 00:16:54.666
And we're being yelled at because
there's the possibility of something

221
00:16:54.666 --> 00:16:56.740
being undefined here.

222
00:16:56.740 --> 00:16:58.300
So why is that?

223
00:17:00.254 --> 00:17:03.270
It's because of our
unchecked indexed access.

224
00:17:03.270 --> 00:17:08.916
So this here, effectively what
we're saying is, this whole thing,

225
00:17:08.916 --> 00:17:15.630
if I were to remove this explicit type
annotation, getAllSongs returned to this.

226
00:17:17.940 --> 00:17:23.141
It's not the mapping over the keys
that's the problem, it's the fact that

227
00:17:23.141 --> 00:17:29.280
I'm using this index access here without
making sure that everything's present.

228
00:17:29.280 --> 00:17:33.623
So I'm gonna use my all time
favorite type card here,

229
00:17:33.623 --> 00:17:37.108
isDefined, which is generic over type T.

230
00:17:50.530 --> 00:17:52.084
I'm gonna explain what
this does in a moment.

231
00:17:55.455 --> 00:18:00.819
All right, so in terms of the code
that actually runs at runtime,

232
00:18:00.819 --> 00:18:06.380
very simple, is the type of x undefined,
or is it not, right?

233
00:18:06.380 --> 00:18:12.860
Anything other than undefined
will cause this to return true.

234
00:18:12.860 --> 00:18:17.551
It'll only return false
if it is undefined.

235
00:18:17.551 --> 00:18:21.310
But that's the least interesting
part of what's going on here.

236
00:18:21.310 --> 00:18:23.203
This here is the interesting part.

237
00:18:23.203 --> 00:18:26.140
So we're saying this is a type guard,
right?

238
00:18:26.140 --> 00:18:30.324
We know because of the return type,
it's not simply saying I return a Boolean.

239
00:18:30.324 --> 00:18:35.422
It's saying I return a Boolean
with a specific meaning,

240
00:18:35.422 --> 00:18:41.060
a Boolean that should tell
the type system something special.

241
00:18:42.350 --> 00:18:47.110
In this case, it means if I return true,
that means x is of type T.

242
00:18:48.480 --> 00:18:53.414
If I return false,
that means x is not of type T.

243
00:18:53.414 --> 00:18:58.010
That's what a user defined
type guard does for us.

244
00:18:58.010 --> 00:19:03.483
And the fact that I've got T or
undefined here, that means that when

245
00:19:03.483 --> 00:19:09.356
we have something here, like in this case,
song or undefined, right?

246
00:19:09.356 --> 00:19:14.903
And we pass that into this function,
T is gonna be matched with song, right?

247
00:19:14.903 --> 00:19:17.070
That undefined piece sort of breaks out.

248
00:19:18.100 --> 00:19:19.765
It's not part of the T.

249
00:19:19.765 --> 00:19:22.790
It's part of what the argument accepts,
but it's not part of T.

250
00:19:23.840 --> 00:19:28.590
And that let's me, say,
strip away this undefined piece.

251
00:19:28.590 --> 00:19:31.269
Now, I could just do filter,

252
00:19:33.980 --> 00:19:38.790
isDefined, and we should be good now.

253
00:19:38.790 --> 00:19:40.460
We return an array of songs.

254
00:19:42.000 --> 00:19:47.232
So in summary, get all the keys
in this little map of songs,

255
00:19:47.232 --> 00:19:53.210
and then iterate over those keys and
retrieve the respective song.

256
00:19:54.690 --> 00:19:56.375
And then filter out anything
that might have been missing.

257
00:19:58.920 --> 00:20:03.986
Another way of doing this, which I would
consider to be perfectly valid here,

258
00:20:03.986 --> 00:20:07.437
this is a rare case where I
would say you could do that,

259
00:20:07.437 --> 00:20:10.390
which is the non-null assertion operator.

260
00:20:10.390 --> 00:20:13.600
Usually, I would advise against this, but

261
00:20:13.600 --> 00:20:17.866
we are iterating over all
the keys in this data structure.

262
00:20:17.866 --> 00:20:22.212
It's short of deliberately storing a null,
or

263
00:20:22.212 --> 00:20:25.590
an undefined in your map under a key.

264
00:20:27.290 --> 00:20:29.560
I wouldn't expect this to
cause any trouble for you.

265
00:20:29.560 --> 00:20:33.199
Normally, you don't wanna do this,
because TypeScript's saying hey,

266
00:20:33.199 --> 00:20:36.330
there might not be anything in
there under this particular key.

267
00:20:36.330 --> 00:20:38.367
But where's the key coming from, this.

268
00:20:38.367 --> 00:20:40.930
I can rely on that working pretty well.

269
00:20:40.930 --> 00:20:43.096
It's not arbitrary strings here,

270
00:20:43.096 --> 00:20:47.944
it's giving me the strings that supposedly
have something stored under them.

271
00:20:52.692 --> 00:20:53.890
So either way would work.

272
00:20:53.890 --> 00:20:57.693
In fact, I can strip this out,
and we can see same return type.

273
00:21:00.536 --> 00:21:04.694
Does that makes sense to everyone why
this is generally not a good idea, but

274
00:21:04.694 --> 00:21:07.250
here specifically, it seems okay?

275
00:21:07.250 --> 00:21:12.867
Yep, okay, so now getSong,
this should be easy.

276
00:21:12.867 --> 00:21:17.035
But we will need an undefined check here,
because the ID now,

277
00:21:17.035 --> 00:21:19.610
that's a user generated value.

278
00:21:19.610 --> 00:21:21.700
They could pass me whatever, right?

279
00:21:21.700 --> 00:21:27.230
I wouldn't wanna just sort
of press right through that.

280
00:21:27.230 --> 00:21:28.190
But similar, right?

281
00:21:35.024 --> 00:21:39.761
And this will take an ID, Or

282
00:21:39.761 --> 00:21:43.127
a songKey, whatever we wanna call it.

283
00:21:43.127 --> 00:21:51.523
And let's say we just throw
if someone gave me a bad key.

284
00:22:02.484 --> 00:22:06.400
Something like that, and great.

285
00:22:07.880 --> 00:22:10.814
So go grab it, attempt to find it.

286
00:22:10.814 --> 00:22:13.590
If it's garbage in, garbage out, we throw.

287
00:22:16.840 --> 00:22:18.566
clearSongs, it's pretty easy.

288
00:22:24.036 --> 00:22:25.969
That's it.

289
00:22:25.969 --> 00:22:29.240
All right, so we took care of songs,
let's do movies.

290
00:22:30.870 --> 00:22:32.500
I'm gonna be kinda lazy here.

291
00:22:32.500 --> 00:22:36.550
Let's copy this,
just do a little copy paste,

292
00:22:36.550 --> 00:22:42.370
and, Gonna find all
occurrences of song and call.

293
00:22:43.770 --> 00:22:51.230
Just make that movie, and
then I'll #data.Movie.

294
00:22:52.710 --> 00:22:53.872
Let's fix that little case.

295
00:22:57.697 --> 00:22:59.950
And fix these, MovieKey.

296
00:23:02.200 --> 00:23:03.820
Just make that lowercase m.

297
00:23:05.630 --> 00:23:06.688
And wow, that worked.

298
00:23:10.494 --> 00:23:14.180
Just some renaming,
it's why I only gave you two,

299
00:23:14.180 --> 00:23:17.283
just cuz it starts to
get a bit repetitive.

300
00:23:17.283 --> 00:23:19.735
And let me run the test suite real quick.

301
00:23:24.170 --> 00:23:25.815
Still failing a test, why?

302
00:23:30.171 --> 00:23:31.797
AddSong is not a function.

303
00:23:35.592 --> 00:23:37.020
Looks like I need an add.

304
00:23:38.530 --> 00:23:41.860
Okay, no problem,
we can add that in real quick.

305
00:23:41.860 --> 00:23:47.810
It's just gonna be one more
pattern of this map type here.

306
00:23:47.810 --> 00:23:50.540
So we'll say add, and
then the entity name.

307
00:23:50.540 --> 00:23:56.420
And this we'll take in as an argument,
a DataEntityMap key.

308
00:23:58.670 --> 00:24:01.891
And I believe that we just return
exactly what we just added.

309
00:24:04.904 --> 00:24:07.098
So let me get rid of the file tree here,

310
00:24:07.098 --> 00:24:12.750
so we can see real clearly what We
have just added, so there we go.

311
00:24:12.750 --> 00:24:17.325
One more map type iterating over the same
keys, add and then capital S for

312
00:24:17.325 --> 00:24:19.130
song or capital M for movie.

313
00:24:19.130 --> 00:24:23.100
And then this is just
the type of the method.

314
00:24:23.100 --> 00:24:29.220
So we take in a new thing to be added,
we return what was just added.

315
00:24:29.220 --> 00:24:35.210
And if we go down to the data store here,
we can see, hey, we're missing.

316
00:24:35.210 --> 00:24:37.030
Add Song and add movie.

317
00:24:37.030 --> 00:24:42.090
So already we can see, hey, we updated
our pattern, we added something new.

318
00:24:42.090 --> 00:24:45.344
We're being told right at the location
where that change needs to happen.

319
00:24:45.344 --> 00:24:47.481
Go ahead.

320
00:24:47.481 --> 00:24:51.343
So let's say add movie.

321
00:24:56.565 --> 00:24:57.422
And we'll just say,

322
00:25:03.098 --> 00:25:09.854
We'll just say this data movie,

323
00:25:09.854 --> 00:25:16.618
and that ID = m and then return m.

324
00:25:16.618 --> 00:25:19.071
And we can do add Song very similarly.

325
00:25:26.645 --> 00:25:31.050
We'll change this to S for
so There you go.

326
00:25:31.050 --> 00:25:33.074
So we're just pushing this
thing into the array.

327
00:25:35.740 --> 00:25:36.978
Let's run our test real quick.

328
00:25:40.011 --> 00:25:41.420
All right, still failing.

329
00:25:41.420 --> 00:25:42.100
What's going on here?

330
00:25:43.830 --> 00:25:44.940
At song is not a function.

331
00:25:44.940 --> 00:25:52.166
Turn up saving the file and help,
There we go, all tests pass.

332
00:25:54.923 --> 00:26:01.106
So in summary,
what we have here is a convention

333
00:26:01.106 --> 00:26:07.909
that we can establish across
multiple data types and

334
00:26:07.909 --> 00:26:12.099
we programmatically build up.

335
00:26:12.099 --> 00:26:16.187
Think of it like an interface literally,
it's a type alias but

336
00:26:16.187 --> 00:26:18.665
we're implementing it with a class.

337
00:26:18.665 --> 00:26:23.854
And let's give this last requirement
a test what happens when

338
00:26:23.854 --> 00:26:29.040
we add comic back to this data
entity map well this lights up and

339
00:26:29.040 --> 00:26:33.261
it says look you need like
you need get all comics.

340
00:26:33.261 --> 00:26:37.350
And then if you add this method,
it would say, you need clear all comics.

341
00:26:37.350 --> 00:26:43.213
And even here, it's saying, hey, shouldn't
you create a little dictionary of comics,

342
00:26:43.213 --> 00:26:46.040
where are we going to store this?

343
00:26:46.040 --> 00:26:50.940
So you could define this
in a very hard coded way.

344
00:26:50.940 --> 00:26:52.495
But what you can see here,

345
00:26:52.495 --> 00:26:57.248
this is the way a lot of libraries that
manage the data layer like handle things.

346
00:26:57.248 --> 00:27:02.058
They want you to sort of describe
what your entities look like,

347
00:27:02.058 --> 00:27:05.688
and then have something
that is more abstract,

348
00:27:05.688 --> 00:27:11.050
building up something that will
they'll directly interact with.

349
00:27:11.050 --> 00:27:15.444
To make things even a little more
interesting remember that if we did

350
00:27:15.444 --> 00:27:20.263
something like this,
Open interfaces give us

351
00:27:20.263 --> 00:27:24.570
another opportunity here, so I could have
defined it this way in the first place.

352
00:27:24.570 --> 00:27:25.533
But let's imagine.

353
00:27:31.641 --> 00:27:32.437
We had like.

354
00:27:36.771 --> 00:27:37.860
I have to export both.

355
00:27:39.060 --> 00:27:40.840
For export one, I have to export both.

356
00:27:40.840 --> 00:27:44.823
So interfaces are open meaning you could
have multiple files that are sort of just

357
00:27:44.823 --> 00:27:48.700
adding some stuff to this interface and
it gets all squashed together.

358
00:27:48.700 --> 00:27:54.220
So let's say that you
have your movie interface

359
00:27:54.220 --> 00:27:58.912
in one file like this
stuff in one file and

360
00:27:58.912 --> 00:28:05.200
then maybe these to song and
comic in another file.

361
00:28:05.200 --> 00:28:10.225
You can kinda have all of this co-located
in different parts of your project and

362
00:28:10.225 --> 00:28:14.800
it's all gonna sort of pile into
the single interface which then the rest

363
00:28:14.800 --> 00:28:16.740
of the stuff refers to.

364
00:28:16.740 --> 00:28:20.750
So you'd get the right separation of
concerns in terms of how your project is

365
00:28:20.750 --> 00:28:21.890
organized.

366
00:28:21.890 --> 00:28:26.860
And then TypeScript is causing errors to
light up right where you need to make

367
00:28:26.860 --> 00:28:29.123
changes as you refactor, right?

368
00:28:29.123 --> 00:28:33.200
As you rename things,
as you add a new type of data entity.

369
00:28:34.360 --> 00:28:35.100
So there we go.

370
00:28:35.100 --> 00:28:38.240
That's our data layer.

371
00:28:38.240 --> 00:28:44.580
And before checking this in, just comment
this out, so that we're passing in.

372
00:28:44.580 --> 00:28:49.335
But hopefully this helps you understand
template literal types, map types,

373
00:28:49.335 --> 00:28:53.130
index access types and
how you can use them, too.

374
00:28:53.130 --> 00:28:57.974
Define a more abstract convention than
simply saying method name should be this,

375
00:28:57.974 --> 00:28:59.670
method name should be this.

376
00:29:00.800 --> 00:29:02.460
You can do something
more powerful than that.

