WEBVTT

1
00:00:00.130 --> 00:00:04.765
Let's look at how to invent
a jQuery on top of the thing that

2
00:00:04.765 --> 00:00:08.160
replaced jQuery, the DOM API.

3
00:00:08.160 --> 00:00:12.300
So, the first thing we're gonna do is
navigate to the Project folder, which is,

4
00:00:12.300 --> 00:00:15.050
it's in the Challengers
folder &gt; jquery-clone.

5
00:00:15.050 --> 00:00:17.250
And most of our code is gonna be,

6
00:00:17.250 --> 00:00:21.427
actually all of our code should
be in this index.ts folder.

7
00:00:21.427 --> 00:00:26.237
So, now the first thing that we're
gonna see is kind of a harness starting

8
00:00:26.237 --> 00:00:30.736
point to make sure that at least we
can export this dollar sign thing,

9
00:00:30.736 --> 00:00:35.370
that's a namespace piggybacking
on top of a function.

10
00:00:35.370 --> 00:00:39.704
Cool thing to notice is it's actually
important to have them ordered the way

11
00:00:39.704 --> 00:00:41.135
that they were ordered.

12
00:00:41.135 --> 00:00:46.529
Whenever the namespace is used to
piggyback on top of a value of some sort,

13
00:00:46.529 --> 00:00:52.372
a function being a value, namespace has
to come second, it can't come first.

14
00:00:52.372 --> 00:00:53.500
So this is fine.

15
00:00:55.040 --> 00:00:59.443
Okay, so the first thing I
want to tackle is, in order,

16
00:00:59.443 --> 00:01:04.715
let's do the first snippet from
the jQuery Getting Started page.

17
00:01:04.715 --> 00:01:09.159
So I'm just gonna copy this into my editor
just so I can see it real easy, and

18
00:01:09.159 --> 00:01:12.560
we need to make,
actually it better to have it done here.

19
00:01:12.560 --> 00:01:14.110
So I see type errors.

20
00:01:14.110 --> 00:01:17.407
We need to make sure
that this somehow works.

21
00:01:17.407 --> 00:01:24.640
So the dollar sign, this is equivalent
to document.querySelectorAll, right?

22
00:01:24.640 --> 00:01:27.780
So querySelector would
have worked as well there.

23
00:01:27.780 --> 00:01:32.965
I don't think there are any examples
here where the tests would fail for

24
00:01:32.965 --> 00:01:37.474
one element versus many, but
let's use querySelectorAll.

25
00:01:37.474 --> 00:01:42.500
So, what we want is somehow
to retain the result

26
00:01:42.500 --> 00:01:48.040
of a querySelector, so
let's call this elements.

27
00:01:51.432 --> 00:01:56.080
Actually, yeah, let's make a class.

28
00:01:58.768 --> 00:02:04.250
SelectorResult, and
we're gonna return a new SelectorResult.

29
00:02:04.250 --> 00:02:11.265
And this is gonna take in as an argument,
querySelectorAll,

30
00:02:11.265 --> 00:02:16.700
and we'll pass in that selector string
which would be like button.continue.

31
00:02:16.700 --> 00:02:18.593
And right now we're getting an error.

32
00:02:18.593 --> 00:02:23.099
Let's see, does our editor help us at all,
give us a little balloon?

33
00:02:23.099 --> 00:02:24.650
Nope, it's not gonna do that for us.

34
00:02:24.650 --> 00:02:25.440
That's fine.

35
00:02:25.440 --> 00:02:31.352
So what we want is the return value here,
NodeListOf, and then type is element.

36
00:02:34.924 --> 00:02:38.663
So we'll create a private
field that's of this type.

37
00:02:38.663 --> 00:02:43.809
In fact, I wonder if this will work.

38
00:02:54.660 --> 00:02:58.215
Nope, I'd rather use the private field,
I was debating

39
00:02:58.215 --> 00:03:02.968
whether I wanna use sort of the the terse
code or the actually private thing.

40
00:03:02.968 --> 00:03:05.440
So we'll use the actual private thing.

41
00:03:08.030 --> 00:03:11.696
And we're gonna take advantage of
the fact that the type of this

42
00:03:11.696 --> 00:03:16.412
field can be inferred now, thanks to us
doing an assignment in our constructor.

43
00:03:16.412 --> 00:03:18.622
This is one of our new language features.

44
00:03:18.622 --> 00:03:22.555
So, what we get now is this function.

45
00:03:25.800 --> 00:03:31.164
Dollar sign should return,
A SelectorResult,

46
00:03:31.164 --> 00:03:33.053
but why is it not doing that?

47
00:03:33.053 --> 00:03:36.830
Cuz I haven't explicitly typed as any,
that would do it.

48
00:03:36.830 --> 00:03:39.270
So there we go,
dollar sign returns a SelectorResult.

49
00:03:39.270 --> 00:03:44.610
Now, SelectorResult needs
a method on it called html.

50
00:03:44.610 --> 00:03:46.590
And what should this do?

51
00:03:46.590 --> 00:03:50.217
This should set the contents,
like inner HTML equals,

52
00:03:50.217 --> 00:03:52.310
that's what this is all about.

53
00:03:54.200 --> 00:03:59.036
So through using the little
VS Code helper tooltip thing here,

54
00:03:59.036 --> 00:04:02.056
I just said, declare a method, html.

55
00:04:02.056 --> 00:04:03.995
And then up here, I get this thing,

56
00:04:03.995 --> 00:04:06.785
this method stub that throws
whenever you call it.

57
00:04:08.611 --> 00:04:10.273
We'll say that's the content.

58
00:04:10.273 --> 00:04:15.634
And what we wanna do is iterate over the
list of elements and anything that might

59
00:04:15.634 --> 00:04:20.604
be in the SelectorRresult,
something that our DOM query brought back.

60
00:04:20.604 --> 00:04:26.170
All of those, we should apply our
inner HTML equals and then contents.

61
00:04:26.170 --> 00:04:32.651
So this.#elements.forEach,
there's a nice little for each on here.

62
00:04:34.209 --> 00:04:36.830
Something you may have noticed,
this is not an array.

63
00:04:36.830 --> 00:04:39.170
NodeList is not necessarily an array.

64
00:04:39.170 --> 00:04:45.081
So, I don't think you can simply do that,
no, I guess you can.

65
00:04:48.590 --> 00:04:54.510
I do remember that there are some things
like, is there a map or a filter?

66
00:04:56.200 --> 00:04:58.300
Yeah, there's no higher
order functions on it.

67
00:04:58.300 --> 00:05:01.060
So it's arrayish, but not quite an array.

68
00:05:02.160 --> 00:05:04.929
So forEach, and
we'll call this an element.

69
00:05:04.929 --> 00:05:14.430
And it's possible to have elements
that are not HTML elements.

70
00:05:14.430 --> 00:05:17.980
By that I mean this type here.

71
00:05:17.980 --> 00:05:23.774
So, Thankfully we don't
need to worry about that,

72
00:05:23.774 --> 00:05:25.990
so we can just simply say, contents.

73
00:05:27.100 --> 00:05:31.539
Cool, so in essence what we're doing is

74
00:05:31.539 --> 00:05:36.642
iterate over everything we found,
and then,

75
00:05:42.428 --> 00:05:44.770
Set the contents equal to
the string we were given.

76
00:05:46.490 --> 00:05:50.470
Pretty simple, and now this may work.

77
00:05:50.470 --> 00:05:51.708
Let's run our test and see.

78
00:05:58.073 --> 00:06:00.270
I expect plenty of these to still fail.

79
00:06:00.270 --> 00:06:02.300
At least six passed, which is great.

80
00:06:02.300 --> 00:06:06.442
Okay, and this is the Ajax
test that currently fails.

81
00:06:08.446 --> 00:06:10.980
Here's our event listener.

82
00:06:10.980 --> 00:06:14.440
Visibility hidden, great.

83
00:06:14.440 --> 00:06:16.490
So these have to do with .hide.

84
00:06:16.490 --> 00:06:22.020
But I see, sorry, for duplicate tests
here, the duplicate test names.

85
00:06:22.020 --> 00:06:24.300
The purpose of these tests is different.

86
00:06:26.210 --> 00:06:29.590
But nothing that has to
do with this .html thing.

87
00:06:29.590 --> 00:06:33.019
So, it returns something truthy and

88
00:06:33.019 --> 00:06:37.559
effectively sets that text
to what it should be.

89
00:06:37.559 --> 00:06:38.545
That's great.

90
00:06:38.545 --> 00:06:41.424
So let's deal with hide.

91
00:06:41.424 --> 00:06:46.317
So this is going to be
the second little example here,

92
00:06:46.317 --> 00:06:50.243
let's just copy that down here and paste.

93
00:06:50.243 --> 00:06:55.010
And of course, so
this is our event listener thing

94
00:06:55.010 --> 00:06:58.651
that we need to fill out and then show.

95
00:06:58.651 --> 00:07:02.580
So hiddenBox,
this is like a selector result.

96
00:07:02.580 --> 00:07:05.428
So that should have a show method, and

97
00:07:05.428 --> 00:07:08.993
this is also something
on the SelectorResult.

98
00:07:08.993 --> 00:07:12.885
So I can go here and
say Add all missing members,

99
00:07:12.885 --> 00:07:16.876
this will create those
little step functions for

100
00:07:16.876 --> 00:07:23.615
us with kind of some semblance of argument
types but nothing really too specific.

101
00:07:23.615 --> 00:07:25.350
I'm just gonna move those down here.

102
00:07:26.830 --> 00:07:29.740
Okay, so this is gonna be our event name.

103
00:07:29.740 --> 00:07:31.420
Now we could use this as a string.

104
00:07:31.420 --> 00:07:34.984
All the examples suggested that
you do was a click, right?

105
00:07:34.984 --> 00:07:39.407
There's something a little bit more
clever that you could do here,

106
00:07:39.407 --> 00:07:43.533
because there are only certain
strings that map to DOM events.

107
00:07:43.533 --> 00:07:47.140
Can anyone guess where we
might find these strings?

108
00:07:47.140 --> 00:07:51.231
Like if I were to say,
there might be another, a DOM API or

109
00:07:51.231 --> 00:07:55.540
a type of something where you
might find an event name.

110
00:07:55.540 --> 00:07:59.432
What's a good place we might look?

111
00:07:59.432 --> 00:08:02.511
Something modern that you might use today.

112
00:08:02.511 --> 00:08:11.068
Well, if I wanna, say I have a,
Button element like this.

113
00:08:13.145 --> 00:08:16.183
How would I register a click
listener with this button?

114
00:08:18.874 --> 00:08:19.868
&gt;&gt; Add event listener.

115
00:08:19.868 --> 00:08:23.020
&gt;&gt; Add event listener, so
that's one thing we could do.

116
00:08:25.298 --> 00:08:29.279
So if we look at this, addEventListener,

117
00:08:29.279 --> 00:08:34.254
the first argument it takes is,
it's like type K, so

118
00:08:34.254 --> 00:08:40.030
it's generic over this thing here,
HTMLEventMap.

119
00:08:40.030 --> 00:08:45.968
And if we look at this, so
it's got a couple different maps here but

120
00:08:45.968 --> 00:08:49.268
let's look at what those look like.

121
00:08:49.268 --> 00:08:54.254
Hey, look, we've got event names and
then interfaces that represent the thing

122
00:08:54.254 --> 00:08:58.080
that our callback passed to
addEventListener will receive.

123
00:08:58.080 --> 00:09:02.276
So here we've got like full screen change,
things like that,

124
00:09:02.276 --> 00:09:06.800
GlobalEventHandlers, I mean,
a whole bunch of good stuff there.

125
00:09:06.800 --> 00:09:11.165
But these are the strings that we're
interested in, so it's HTMLEventMap.

126
00:09:11.165 --> 00:09:12.790
So, we could say, all right,

127
00:09:12.790 --> 00:09:16.051
I'm gonna leave that there cuz
I think we'll end up using it.

128
00:09:18.377 --> 00:09:26.650
So, we'll make this,
We're gonna make this a generic method.

129
00:09:28.630 --> 00:09:30.510
K is declared but never read.

130
00:09:30.510 --> 00:09:31.503
Yeah, that's fine.

131
00:09:33.995 --> 00:09:35.440
Sorry, K extends.

132
00:09:36.610 --> 00:09:37.750
There we go.

133
00:09:37.750 --> 00:09:42.473
So this first argument, eventName is
gonna be, let me get rid of this,

134
00:09:42.473 --> 00:09:45.290
since we don't need it too much.

135
00:09:45.290 --> 00:09:46.560
It's gonna be a K.

136
00:09:46.560 --> 00:09:49.090
So this would be the string click.

137
00:09:49.090 --> 00:09:52.299
And then this event over here,
let's bring it down to the second line.

138
00:09:54.030 --> 00:09:58.000
We're gonna use our map type, like that.

139
00:09:58.000 --> 00:09:59.110
So what does this mean?

140
00:10:00.770 --> 00:10:05.356
When we pass in click, look,
we get a MouseEvent back.

141
00:10:05.356 --> 00:10:07.010
If we did key up,

142
00:10:14.546 --> 00:10:18.863
Look at that nice little autocomplete
there, it's like everything's on the menu.

143
00:10:18.863 --> 00:10:23.645
Key down, we get a KeyboardEvent, so
we get nice typing coming through,

144
00:10:23.645 --> 00:10:27.119
depending on what type of
event we're registering,

145
00:10:27.119 --> 00:10:30.610
we get this well typed thing back,
so that's great.

146
00:10:30.610 --> 00:10:32.387
A string would have been fine, but

147
00:10:32.387 --> 00:10:36.136
you would have had to pick your lowest
common denominator of event type.

148
00:10:36.136 --> 00:10:38.717
And then it's sort of up
to whoever's using this,

149
00:10:38.717 --> 00:10:42.455
they're gonna have to sort of sniff out,
is this what I hoped it would be?

150
00:10:42.455 --> 00:10:47.120
And it gets a little more complicated.

151
00:10:47.120 --> 00:10:52.523
Great, so that's the eventName,
here's the callback, call this just CB.

152
00:10:52.523 --> 00:10:58.154
And here's the callback argument,
it's gonna pass along this actual event.

153
00:10:58.154 --> 00:10:59.660
Fantastic.

154
00:10:59.660 --> 00:11:06.860
So now, what we can do is, again,
iterate over everything we found.

155
00:11:06.860 --> 00:11:08.231
This is like the result set.

156
00:11:11.018 --> 00:11:17.885
And, Add an event listener to each.

157
00:11:24.204 --> 00:11:25.835
EventName and callback.

158
00:11:28.194 --> 00:11:31.600
I feel like I'm missing a paren.

159
00:11:32.980 --> 00:11:35.000
Great, now what's the type error here?

160
00:11:36.160 --> 00:11:38.663
Clipboard data is declared here.

161
00:11:41.717 --> 00:11:45.712
AddEventListener, let's
pass in this K explicitly.

162
00:11:45.712 --> 00:11:46.870
You know what?

163
00:11:46.870 --> 00:11:49.740
This is the problem we're running into.

164
00:11:49.740 --> 00:11:56.820
This base class here, addEventListener,
we've got ElementEventMap here.

165
00:11:56.820 --> 00:12:00.447
Now if you recall,
let me go back to our button case.

166
00:12:13.777 --> 00:12:14.549
Look at this.

167
00:12:14.549 --> 00:12:18.312
When I click on the type declaration for

168
00:12:18.312 --> 00:12:23.100
the button, we have HTMLElementEventMap.

169
00:12:23.100 --> 00:12:28.250
And then when I go back here,
I've just got ElementEventMap.

170
00:12:28.250 --> 00:12:32.976
So there are these non-HTML
elements that sort of have

171
00:12:32.976 --> 00:12:36.680
different events that they can deal with.

172
00:12:36.680 --> 00:12:39.060
And that's where I'm running
into this incompatibility.

173
00:12:39.060 --> 00:12:40.100
So I have two options here.

174
00:12:40.100 --> 00:12:46.200
One is I could just say, all right,
let's just go back to the ElementEventMap.

175
00:12:46.200 --> 00:12:48.880
Let's not make this
the HTMLElementEventMap.

176
00:12:48.880 --> 00:12:52.052
Or I could filter as I'm
looping over things and

177
00:12:52.052 --> 00:12:56.710
sort of sniff out whether
they're matching that interface.

178
00:12:56.710 --> 00:13:02.501
And if they are, we proceed,
if they're not, it's a no op.

179
00:13:02.501 --> 00:13:06.005
So I'm actually just gonna
generalize this a little bit so

180
00:13:06.005 --> 00:13:10.296
we can get back to ElementEventMap,
at which point this quiets down and

181
00:13:10.296 --> 00:13:12.167
everything looks to be happy.

182
00:13:12.167 --> 00:13:14.952
But does everyone understand
kind of what we ran into there?

183
00:13:14.952 --> 00:13:19.467
addEventListener is more constrained
when working with HTML elements

184
00:13:19.467 --> 00:13:22.550
because only a subset of
events work with those,

185
00:13:22.550 --> 00:13:25.420
compared to the more
general element class.

186
00:13:27.620 --> 00:13:30.030
Great, so that should work.

187
00:13:30.030 --> 00:13:33.582
Let's run the test see if any are passing.

188
00:13:33.582 --> 00:13:34.290
You know what?

189
00:13:34.290 --> 00:13:37.034
I also have some Rando code down here.

190
00:13:37.034 --> 00:13:38.661
I should probably comment that out.

191
00:13:42.738 --> 00:13:47.934
All right, so three tests failing, it was
four before, so now we're down to three.

192
00:13:47.934 --> 00:13:51.915
And let's see, so there's our Ajax test.

193
00:13:51.915 --> 00:13:54.165
I didn't expect that to pass yet.

194
00:13:54.165 --> 00:13:57.645
Hide and visibility hidden, I didn't
expect either of those to pass either.

195
00:13:57.645 --> 00:14:01.875
So I think that we might be done with
the addEventListener portion of this.

196
00:14:01.875 --> 00:14:06.355
So now we need the sort of hide and,
I mean, we could implement a show but

197
00:14:06.355 --> 00:14:09.145
let's just keep it simple.

198
00:14:09.145 --> 00:14:11.089
Click is not in the ElementEventMap.

199
00:14:12.310 --> 00:14:13.670
I'm gonna improvise the solution.

200
00:14:19.099 --> 00:14:21.638
So here, we would have to,

201
00:14:25.773 --> 00:14:29.851
I'm gonna do something quick and
dirty here, but

202
00:14:29.851 --> 00:14:35.202
this is where we'd want a type
guard to check whether something,

203
00:14:38.097 --> 00:14:43.839
Is an HTML element versus a element.

204
00:14:53.085 --> 00:14:56.893
In this case I'm gonna say it's probably
not harmful to register extra event

205
00:14:56.893 --> 00:14:58.360
listeners to these things.

206
00:14:58.360 --> 00:15:02.959
I would hope they would not fire, but
if this were real code I was shipping,

207
00:15:02.959 --> 00:15:08.400
I would do something a little bit more
rigorous than that, than just a cast.

208
00:15:08.400 --> 00:15:09.790
So now nothing should be happy.

209
00:15:11.020 --> 00:15:15.418
So the thing that we fixed was click was
not on that list of things that the base

210
00:15:15.418 --> 00:15:17.690
layer element supports.

211
00:15:17.690 --> 00:15:19.720
All right,
show is what we're implementing.

212
00:15:19.720 --> 00:15:20.870
That's right up here.

213
00:15:20.870 --> 00:15:24.451
So again,
looping over everything that we found.

214
00:15:26.909 --> 00:15:29.341
And we might need the same cast,

215
00:15:40.561 --> 00:15:46.121
style.visibility = visible,

216
00:15:46.121 --> 00:15:51.089
I believe is the thing we use.

217
00:15:51.089 --> 00:16:00.743
Yep, Three failed still.

218
00:16:08.750 --> 00:16:11.370
Looks like the test wants us
to implement a hide as well.

219
00:16:11.370 --> 00:16:13.079
That's no problem, we can just copy this.

220
00:16:16.498 --> 00:16:21.555
Hide, and this'll be hidden or, yeah,

221
00:16:21.555 --> 00:16:30.010
hidden, perfect, should see fewer
than three test failures now.

222
00:16:30.010 --> 00:16:34.040
One test failure left, and
that's gonna be the Ajax situation.

223
00:16:34.040 --> 00:16:36.340
So we've got hide, and show,
we can collapse those,

224
00:16:36.340 --> 00:16:38.550
kinda get those out of the way.

225
00:16:38.550 --> 00:16:40.488
There's our event listener thing,
our HTML,

226
00:16:40.488 --> 00:16:42.500
like setting the contents of something.

227
00:16:42.500 --> 00:16:47.120
Finally, time for
us to implement this thing here, right?

228
00:16:47.120 --> 00:16:48.820
So what do we want?

229
00:16:48.820 --> 00:16:53.091
We wanna take in, well, we can just
grab our little code snippet here.

230
00:16:55.408 --> 00:17:01.430
We want something that allows us to
pass in a URL and a success callback.

231
00:17:01.430 --> 00:17:05.927
And then this result
appears to have a title and

232
00:17:05.927 --> 00:17:09.628
a body, maybe it's some JSON thing.

233
00:17:12.206 --> 00:17:15.500
Yeah, should be fairly straightforward.

234
00:17:15.500 --> 00:17:18.930
So, we've got fetch already
imported up here, node-fetch,

235
00:17:18.930 --> 00:17:21.914
this is just cuz the test
suite's running this in node,

236
00:17:21.914 --> 00:17:25.150
normally this would be
in your browser API.

237
00:17:25.150 --> 00:17:31.170
So we'll return the promise
that fetch resolves to,

238
00:17:31.170 --> 00:17:36.388
not a strict requirement
of this challenge but

239
00:17:36.388 --> 00:17:40.421
it is the way Ajax worked, in fact.

240
00:17:40.421 --> 00:17:47.726
And we're gonna take as an argument a URL,
A success callback.

241
00:17:56.629 --> 00:18:04.056
So fetch(url).then and
then we get a response back,

242
00:18:04.056 --> 00:18:09.277
which we then have to decode into JSON.

243
00:18:14.051 --> 00:18:20.760
And then we can actually just pass
our success callback in there.

244
00:18:20.760 --> 00:18:22.117
This has to be a string.

245
00:18:24.623 --> 00:18:26.570
It's just formatting
that a little bit better.

246
00:18:28.710 --> 00:18:30.861
Let's see if the tests pass.

247
00:18:30.861 --> 00:18:32.390
Oop, still missing something.

248
00:18:32.390 --> 00:18:34.835
I misread this.

249
00:18:34.835 --> 00:18:38.068
I should be taking an object,
a single configuration object,

250
00:18:38.068 --> 00:18:39.353
rather than arguments.

251
00:18:50.840 --> 00:18:54.373
So here's the type of our argument.

252
00:18:54.373 --> 00:18:59.361
Here's the actual destructured assignment
that we're using in order to obtain

253
00:18:59.361 --> 00:19:02.590
into the values, and our tests pass.

254
00:19:02.590 --> 00:19:09.123
So we're just making the fetch,
we're grabbing the response.

255
00:19:09.123 --> 00:19:12.870
So this gets called when the first
byte lands in the browser.

256
00:19:12.870 --> 00:19:16.460
And then this promise resolves when
the last byte lands in the browser.

257
00:19:17.460 --> 00:19:19.526
And then finally,
we call this success callback.

258
00:19:19.526 --> 00:19:21.146
That should be success.

259
00:19:28.203 --> 00:19:29.755
Now these should all type check.

260
00:19:31.781 --> 00:19:35.861
And you can see now we have the jQuery
Getting Started instructions,

261
00:19:35.861 --> 00:19:37.408
the code snippets there,

262
00:19:37.408 --> 00:19:42.422
all written on top of effectively the APIs
that replace them written in TypeScript.

263
00:19:42.422 --> 00:19:47.153
It's good to practice with this kind
of thing because it's really older

264
00:19:47.153 --> 00:19:50.887
style of writing JavaScript code,
no classes, right?

265
00:19:50.887 --> 00:19:55.410
But you can apply types that
describe this type of code.

