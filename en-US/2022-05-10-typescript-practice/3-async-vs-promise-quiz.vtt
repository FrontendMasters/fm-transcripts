WEBVTT

1
00:00:00.150 --> 00:00:04.551
Next, I'm gonna give you a moment to read
through this code cuz it's a little bit

2
00:00:04.551 --> 00:00:06.350
more than what we had before.

3
00:00:06.350 --> 00:00:09.870
It's a bunch of console log statements
that log out an animal name.

4
00:00:09.870 --> 00:00:11.455
And my question to you is,

5
00:00:11.455 --> 00:00:16.200
what is the order that we will see
these things written to the console?

6
00:00:16.200 --> 00:00:18.069
And just to clue you in,

7
00:00:18.069 --> 00:00:23.750
this is kind of the first line of
code that's actually executed.

8
00:00:23.750 --> 00:00:27.700
So, I'll give you the first one it's dog,
right?

9
00:00:27.700 --> 00:00:29.770
And then we're going to proceed forward.

10
00:00:29.770 --> 00:00:33.138
So just take a look at that,
kind of follow it through and

11
00:00:33.138 --> 00:00:35.584
tell me what order you think we'll get.

12
00:00:39.208 --> 00:00:41.600
Okay, so let's walk through this.

13
00:00:41.600 --> 00:00:45.770
We begin with dog and
then we execute main, right?

14
00:00:47.030 --> 00:00:49.910
Well, first, let's look at the answer.

15
00:00:49.910 --> 00:00:57.159
So it's dog, cat, elephant, giraffe,
zebra, koala, lion, and moose.

16
00:00:58.988 --> 00:01:03.371
And I see that there are some
different answers in chat,

17
00:01:03.371 --> 00:01:07.487
which means this is a good
question to walk through.

18
00:01:07.487 --> 00:01:09.484
So, why this order?

19
00:01:09.484 --> 00:01:13.218
So first dog, right, that's pretty clear.

20
00:01:13.218 --> 00:01:15.000
That's the first line that we execute.

21
00:01:15.000 --> 00:01:18.030
And then we enter main.

22
00:01:18.030 --> 00:01:21.797
We go up here, and
it's an async function, but

23
00:01:21.797 --> 00:01:25.390
we begin executing it immediately, right?

24
00:01:25.390 --> 00:01:30.950
So until we have something that is async,
which is like this await down here,

25
00:01:30.950 --> 00:01:34.980
we're gonna go ahead and
print cat console right away.

26
00:01:36.010 --> 00:01:40.990
And then we're gonna go here and
we're gonna invoke get data.

27
00:01:42.130 --> 00:01:43.670
That'll take us up here.

28
00:01:43.670 --> 00:01:46.960
Now this is what will cause
elephant to get logged.

29
00:01:46.960 --> 00:01:52.204
So although this is an async function,
we don't really create that promise and

30
00:01:52.204 --> 00:01:55.790
sort of put a pin in that code and
come back to it later.

31
00:01:55.790 --> 00:01:59.410
We don't do that until something
a sync actually happens.

32
00:01:59.410 --> 00:02:02.535
So this is gonna be what's
logged next elephant.

33
00:02:02.535 --> 00:02:05.689
And then we're going to
invoke this promise, and

34
00:02:05.689 --> 00:02:09.746
this is a little bit of a tricky
situation because we're passing

35
00:02:09.746 --> 00:02:13.180
this callback into our
promise constructor.

36
00:02:13.180 --> 00:02:16.080
And there are two things
that could happen.

37
00:02:16.080 --> 00:02:18.705
And it depends on what
promise does with this thing.

38
00:02:18.705 --> 00:02:23.104
If promise uses this function,
we give it asynchronously,

39
00:02:23.104 --> 00:02:27.347
if it's a set timeout zero and
then it calls the function.

40
00:02:27.347 --> 00:02:32.040
Well then, we could assume koala is what
comes next but that's not what happens.

41
00:02:32.040 --> 00:02:36.150
The promise constructor invokes
this function right away.

42
00:02:36.150 --> 00:02:42.094
And this probably feels intuitive to you,
we've all created a promise before.

43
00:02:42.094 --> 00:02:45.922
And you can kind of think of it as,
this code is running and then inside

44
00:02:45.922 --> 00:02:50.486
the promise as we're setting it up this
other stuff starts running, right away.

45
00:02:50.486 --> 00:02:55.450
So again nothing async happens yet,
so that's why giraffe comes next.

46
00:02:55.450 --> 00:03:01.150
Now here's something interesting we call
resolve and what does that do that says.

47
00:03:01.150 --> 00:03:05.810
You can think of it like,
this promise now becomes resolved.

48
00:03:05.810 --> 00:03:09.160
So we set resolved equals true somewhere.

49
00:03:09.160 --> 00:03:15.140
And we say, when someone attaches a .then,
we will give them the value.

50
00:03:16.350 --> 00:03:21.283
So you can create an already resolved
promise like promise.resolve6.

51
00:03:21.283 --> 00:03:24.361
That'll give you a promise that as
soon as you get a reference to it,

52
00:03:24.361 --> 00:03:25.552
it's already resolved.

53
00:03:25.552 --> 00:03:30.831
And if ten minutes later,
you attach a .then at ten minutes and

54
00:03:30.831 --> 00:03:34.126
one second, you will get six, right?

55
00:03:34.126 --> 00:03:39.190
So you don't have to be listening to it at
the moment it resolves to get that value.

56
00:03:39.190 --> 00:03:43.140
It's sort of just holding that value and
it's ready for anyone to ask.

57
00:03:43.140 --> 00:03:46.630
So all that happens here is
we kind of queue this up.

58
00:03:46.630 --> 00:03:51.059
We say look, if anyone asks,
lion is what we resolve to.

59
00:03:51.059 --> 00:03:54.512
So we go from giraffe we
kind of queue this up but

60
00:03:54.512 --> 00:03:59.130
we don't do anything with it yet
and then we proceed to zebra.

61
00:04:00.380 --> 00:04:05.211
And finally this promise constructor
it invokes this thing synchronously.

62
00:04:05.211 --> 00:04:06.842
And then we hit koala, so

63
00:04:06.842 --> 00:04:11.358
we get our reference to the promise
p which at this point is resolved.

64
00:04:11.358 --> 00:04:13.004
But nobody even has access to it yet,

65
00:04:13.004 --> 00:04:15.728
right, we haven't returned it
from the getData function.

66
00:04:15.728 --> 00:04:18.799
Surely no one's attached
a .then to it yet.

67
00:04:18.799 --> 00:04:24.530
So koala is logged next,
we return the promise.

68
00:04:24.530 --> 00:04:29.965
That means that this getData
function it has now returned,

69
00:04:29.965 --> 00:04:36.950
at which point we wait for
it to resolve and it resolves immediately.

70
00:04:36.950 --> 00:04:38.617
Then we get the result and log it out.

71
00:04:38.617 --> 00:04:43.178
So that's where we get
lion following koala.

72
00:04:45.326 --> 00:04:46.920
So why is this important?

73
00:04:46.920 --> 00:04:48.072
This is a TypeScript class,

74
00:04:48.072 --> 00:04:50.430
why are we talking about
promises there are no types here.

75
00:04:51.740 --> 00:04:55.989
Control Flow is important because
that's how we narrow types.

76
00:04:55.989 --> 00:05:00.391
That's why when we have something that
could be a couple of different values and

77
00:05:00.391 --> 00:05:04.328
we say, hey, if we go down this branch,
if it's a number, we do this,

78
00:05:04.328 --> 00:05:06.057
if it's a string, we do that.

79
00:05:06.057 --> 00:05:11.197
Well, it's important to know
what's synchronous, what's async.

80
00:05:11.197 --> 00:05:16.047
What branch of code do we follow now
versus what happens potentially much

81
00:05:16.047 --> 00:05:18.283
later after things are changed?

82
00:05:18.283 --> 00:05:22.739
That has ramifications on what
the types of things will end up being.

83
00:05:22.739 --> 00:05:25.743
Whether something is defined or not.

84
00:05:28.236 --> 00:05:30.964
So we log out lion.

85
00:05:30.964 --> 00:05:37.580
And then finally all of this wraps up,
we finish invoking this main function.

86
00:05:39.140 --> 00:05:42.900
And then the stop then is called and
the last thing we log is moose.

87
00:05:44.650 --> 00:05:48.864
And I see a lot of people
missed koala in chat and

88
00:05:48.864 --> 00:05:54.158
that has to do with the synchronous
invocation of the thing

89
00:05:54.158 --> 00:05:59.470
you pass to set up a new promise,
important thing to know.

