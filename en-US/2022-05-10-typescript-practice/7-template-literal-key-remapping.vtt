WEBVTT

1
00:00:00.163 --> 00:00:04.215
The next very exciting language
feature that has landed

2
00:00:04.215 --> 00:00:07.931
in TypeScript recently is
much more than it seems.

3
00:00:07.931 --> 00:00:10.051
Template literal types.

4
00:00:10.051 --> 00:00:14.706
So you can think of these as sort of
the type equivalent to those backticks

5
00:00:14.706 --> 00:00:19.822
strings that let us interpolate values
into string templates really easily and

6
00:00:19.822 --> 00:00:21.829
the syntax is in fact the same.

7
00:00:21.829 --> 00:00:23.096
So good news there.

8
00:00:23.096 --> 00:00:28.465
Just remember when you're working
in value space versus type space,

9
00:00:28.465 --> 00:00:32.293
are you on the left hand or
the right hand of the =?

10
00:00:34.286 --> 00:00:41.768
So on it's surface it seems that we
can use this to create strengths.

11
00:00:41.768 --> 00:00:46.768
So for example you can see here,
this here could be either median or

12
00:00:46.768 --> 00:00:49.552
mean, and it's followed by value.

13
00:00:49.552 --> 00:00:54.911
And we can in a nice,
concise way get both of these,

14
00:00:54.911 --> 00:00:58.161
optional number properties.

15
00:00:58.161 --> 00:01:02.990
We can get both of these on
this stats object instead

16
00:01:02.990 --> 00:01:06.369
of having to type them one at a time.

17
00:01:06.369 --> 00:01:11.271
So one advantage here is less
code to worry about another is

18
00:01:11.271 --> 00:01:16.388
you could have a source of truth
that has this list of things.

19
00:01:16.388 --> 00:01:21.653
And you can enforce with the type system,
a convention that

20
00:01:21.653 --> 00:01:26.718
we have these value types like median,
mean, and mode.

21
00:01:26.718 --> 00:01:29.592
Standard deviation,
you can have all of these and

22
00:01:29.592 --> 00:01:32.202
then it always is followed
by the word value.

23
00:01:32.202 --> 00:01:39.383
So you get this nice consistency because,
in this case, we're using this.

24
00:01:39.383 --> 00:01:41.520
Anyone remember what this is called,
by the way?

25
00:01:41.520 --> 00:01:45.614
The second line, there's a name for
this called a map type,

26
00:01:45.614 --> 00:01:48.925
it's kind of like the type
version of a for loop.

27
00:01:48.925 --> 00:01:53.181
Where we're iterating
over a list of keys and

28
00:01:53.181 --> 00:01:57.778
defining the value that
can be found on each key.

29
00:01:57.778 --> 00:02:02.709
So we're kind of almost like we're
looping over an array of these things,

30
00:02:02.709 --> 00:02:05.933
and then we're transforming
them a little bit.

31
00:02:05.933 --> 00:02:07.433
And then that's the value.

32
00:02:07.433 --> 00:02:11.592
So it allows us to sort of build
things up in a very consistent way.

33
00:02:13.534 --> 00:02:18.274
So, this is the most superficial
use of a template literal type,

34
00:02:18.274 --> 00:02:20.354
but they can do so much more.

35
00:02:20.354 --> 00:02:24.196
So here we're using this extract type,

36
00:02:24.196 --> 00:02:28.377
which lets us take
a portion of a type right.

37
00:02:28.377 --> 00:02:31.286
We would say, key of window.

38
00:02:31.286 --> 00:02:33.640
So this would be a whole lot of strings.

39
00:02:33.640 --> 00:02:39.509
Any function name, any property name,
like document will be in this list.

40
00:02:39.509 --> 00:02:41.618
Window.document, right?

41
00:02:41.618 --> 00:02:46.017
And then what we wanna
do is get the sub part

42
00:02:46.017 --> 00:02:50.302
of that list that matches another type.

43
00:02:50.302 --> 00:02:56.162
So in this case what we're saying
is give me a subset of the names

44
00:02:56.162 --> 00:03:01.152
of everything on window that
begin with the word set.

45
00:03:01.152 --> 00:03:05.404
And the key thing that we're able to
do here is we can put in any they're so

46
00:03:05.404 --> 00:03:07.024
set followed by anything.

47
00:03:07.024 --> 00:03:11.479
It's almost like a wildcard,
right, like set star.

48
00:03:11.479 --> 00:03:16.467
So it's not just about assembling
a specific string using using a list of

49
00:03:16.467 --> 00:03:18.116
prefixes or suffixes.

50
00:03:18.116 --> 00:03:21.097
You can actually put a lot of
different things in here and

51
00:03:21.097 --> 00:03:24.403
use these template literal types
in some very creative ways.

52
00:03:24.403 --> 00:03:29.376
In fact you could, you could get
the first letter of a string literal

53
00:03:29.376 --> 00:03:32.530
literal type by saying you know it's any.

54
00:03:32.530 --> 00:03:35.623
Followed by another any or something.

55
00:03:35.623 --> 00:03:40.023
And infer like extract out
the back half of the string.

56
00:03:40.023 --> 00:03:43.958
You could split a CSV by
saying there's something,

57
00:03:43.958 --> 00:03:48.618
something and give me that piece and
then followed by a comma.

58
00:03:48.618 --> 00:03:53.476
Another way to think about this, if
you've ever written a regular expression,

59
00:03:53.476 --> 00:03:57.333
you know how you can have these
capital groups where you'd say,

60
00:03:57.333 --> 00:04:00.995
there's an email address give
me everything before the @.

61
00:04:00.995 --> 00:04:03.692
So that is kind of what's happening here.

62
00:04:03.692 --> 00:04:06.528
It's one possible use of this type.

63
00:04:06.528 --> 00:04:07.105
So again,

64
00:04:07.105 --> 00:04:11.544
more than it seems this is more than just
like a convenient way to build up strings.

65
00:04:14.232 --> 00:04:18.985
With template literal types
we get three utilities that

66
00:04:18.985 --> 00:04:23.432
frankly are only useful in
this kind of context, and

67
00:04:23.432 --> 00:04:26.987
they're used to transform string case.

68
00:04:26.987 --> 00:04:30.313
So we have a capitalized,
we have an uppercase, we have a lowercase.

69
00:04:30.313 --> 00:04:35.172
It's a good thing that TypeScript
gave us these because there

70
00:04:35.172 --> 00:04:39.575
is no way to express these
types using TypeScript code.

71
00:04:39.575 --> 00:04:45.755
So if you go all the way down and to see
how do they internally define these types.

72
00:04:45.755 --> 00:04:48.824
You'll see the word intrinsic there,

73
00:04:48.824 --> 00:04:54.319
which just means it's like at
the compilers keyword for hand waving.

74
00:04:54.319 --> 00:04:55.729
It's like don't worry about it.

75
00:04:55.729 --> 00:04:58.220
We got this handled in
the compiler somewhere,

76
00:04:58.220 --> 00:05:01.409
like we do something special
every time we see capitalized.

77
00:05:01.409 --> 00:05:04.848
This is unlike some of the other
utility types where if you drill in and

78
00:05:04.848 --> 00:05:06.935
you're like, how does this thing work?

79
00:05:06.935 --> 00:05:10.619
You can see it's built using TypeScript,
these.

80
00:05:10.619 --> 00:05:12.729
It's there's just no way to do it.

81
00:05:12.729 --> 00:05:14.609
So it's good that they gave it to us.

82
00:05:14.609 --> 00:05:23.027
But you can see here, we could build
a nice little event API, where we can try.

83
00:05:23.027 --> 00:05:25.113
We can have these keyboard and
mouse events.

84
00:05:25.113 --> 00:05:28.125
And we can either capitalize,
which of course,

85
00:05:28.125 --> 00:05:32.098
makes the first letter capitalized,
or this is all uppercase.

86
00:05:32.098 --> 00:05:34.130
And this is all lowercase.

87
00:05:34.130 --> 00:05:38.592
And you can see here I've added some
things to lowercase in that last example.

88
00:05:38.592 --> 00:05:43.990
So we're about to dig into a challenge and
get hands on with this.

89
00:05:43.990 --> 00:05:48.728
You will need to use these
three types in order to create

90
00:05:48.728 --> 00:05:53.165
a nice semantic API based
on some names and things.

91
00:05:57.243 --> 00:06:04.285
A complimentary feature two template
literal types is key remapping.

92
00:06:04.285 --> 00:06:09.542
So again, remember that a mapped type
which is anytime you see sort of K in or

93
00:06:09.542 --> 00:06:12.555
you can use whatever letter you want here.

94
00:06:12.555 --> 00:06:17.209
But it's sort of like a four of loop.

95
00:06:17.209 --> 00:06:18.269
Think of it that way.

96
00:06:18.269 --> 00:06:24.694
So it's like for each key in
a list of keys that's our loop.

97
00:06:24.694 --> 00:06:27.973
Well, this syntax here is the new piece.

98
00:06:27.973 --> 00:06:32.356
This is the new thing that
landed in TypeScript 4.2 and

99
00:06:32.356 --> 00:06:34.650
that is allowing us to remap.

100
00:06:34.650 --> 00:06:37.971
So you can see here we have red,
green and blue.

101
00:06:37.971 --> 00:06:41.194
Those are our colors that effectively
is what we're iterating over.

102
00:06:41.194 --> 00:06:44.838
So K is gonna be first red,
and then green, and then blue.

103
00:06:44.838 --> 00:06:48.247
And what we can do is transform that key.

104
00:06:48.247 --> 00:06:53.646
And we could say, I want this to be select
and then capitalize the r in red and

105
00:06:53.646 --> 00:06:57.270
that's how we ended up
with select red down here.

106
00:06:57.270 --> 00:07:01.672
This was in theory, possible in some way.

107
00:07:01.672 --> 00:07:06.239
In older versions of TypeScript but you
would have needed to have some explicit

108
00:07:06.239 --> 00:07:10.527
let's say listing of a mapping between
like red and select red and blue and

109
00:07:10.527 --> 00:07:11.374
select blue.

110
00:07:11.374 --> 00:07:13.911
You would have had to write
that in your code and

111
00:07:13.911 --> 00:07:16.982
you would have gotten some
help from the type checking.

112
00:07:16.982 --> 00:07:21.515
That would have enforced that you have
an entry where you must have an entry.

113
00:07:21.515 --> 00:07:25.892
But this is a lot cleaner and it saves you
from having to have all these intermediate

114
00:07:25.892 --> 00:07:29.200
types where it's sort of extra
backflips that you have to do.

