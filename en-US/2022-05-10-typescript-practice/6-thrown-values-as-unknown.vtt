WEBVTT

1
00:00:00.000 --> 00:00:02.999
Another straight up win,

2
00:00:02.999 --> 00:00:08.460
thrown values can now be
regarded as unknowns.

3
00:00:08.460 --> 00:00:13.935
So before TypeScript 4.0,
anything you would encounter

4
00:00:13.935 --> 00:00:18.671
in a catch block cart value,
it would be of type any.

5
00:00:18.671 --> 00:00:24.620
And this has always made giving
me a little eye twitch, right?

6
00:00:24.620 --> 00:00:30.278
Dealing with thrown values in a consistent
way is important because errors

7
00:00:30.278 --> 00:00:36.667
are nice and throwing things that are not
errors can leave you missing information.

8
00:00:36.667 --> 00:00:38.097
So here's an example.

9
00:00:38.097 --> 00:00:45.145
If you just in your terminal run node -e,
which is, I believe, evaluate or execute.

10
00:00:45.145 --> 00:00:48.005
It'll run whatever string
you pass it as if it's code.

11
00:00:48.005 --> 00:00:49.828
So here's an example of throwing an error.

12
00:00:49.828 --> 00:00:52.189
And you can see we get this
nice little stack trace.

13
00:00:54.877 --> 00:00:59.275
Here is an example of us doing
the same thing and throwing a string.

14
00:00:59.275 --> 00:01:02.628
Note the lack of a stack trace.

15
00:01:02.628 --> 00:01:05.976
And you may say, well,
I always throw errors,

16
00:01:05.976 --> 00:01:09.342
what monster would throw
string in their code?

17
00:01:09.342 --> 00:01:10.834
Surely not me.

18
00:01:10.834 --> 00:01:16.330
And you may be perfectly consistent
about that in your own code.

19
00:01:16.330 --> 00:01:19.228
But even a smallish JavaScript or

20
00:01:19.228 --> 00:01:24.923
TypeScript project these days has
thousands of dependencies and

21
00:01:24.923 --> 00:01:30.214
you cannot be sure what exactly
is thrown behind the scenes.

22
00:01:30.214 --> 00:01:36.930
And it only takes a couple of these errors
without stack traces to start making,

23
00:01:36.930 --> 00:01:42.344
it's basically robbing you of
the clues you need to fix bugs that

24
00:01:42.344 --> 00:01:48.881
occur when users are actually hitting
code paths that we'll throw, right?

25
00:01:48.881 --> 00:01:52.052
So how does this relate
to the type of the error?

26
00:01:52.052 --> 00:01:55.836
Well, it encourages us to
check these values out and

27
00:01:55.836 --> 00:01:59.110
to see is this really
an instance of an error?

28
00:01:59.110 --> 00:02:00.894
Or is it something else, right?

29
00:02:00.894 --> 00:02:05.378
So, for example, in this case where we're
throwing a string, the proper thing to do

30
00:02:05.378 --> 00:02:09.761
here would be to say, this isn't an error,
something weird is going on here.

31
00:02:09.761 --> 00:02:14.781
Let's pass the string into a new error and
throw that.

32
00:02:14.781 --> 00:02:18.647
So at least we get a stack
trace to where this was caught.

33
00:02:18.647 --> 00:02:20.866
And that's better than nothing,

34
00:02:20.866 --> 00:02:25.612
that's better than complete mystery here,
which is just sort of an error

35
00:02:25.612 --> 00:02:29.148
occurred somewhere in your
application at some time.

36
00:02:29.148 --> 00:02:30.244
Good luck, have fun.

37
00:02:30.244 --> 00:02:33.299
That's what this situation tells you.

38
00:02:33.299 --> 00:02:41.253
So here's what the first aspect
of this feature set looks like.

39
00:02:41.253 --> 00:02:43.378
You can now do this.

40
00:02:43.378 --> 00:02:47.643
You can say,
I'm catching a thrown value here.

41
00:02:47.643 --> 00:02:50.975
Please type it as unknown.

42
00:02:50.975 --> 00:02:53.742
You could not do this in
earlier versions of TypeScript.

43
00:02:53.742 --> 00:02:57.354
And you can see here we
rethrow where appropriate.

44
00:02:57.354 --> 00:03:01.660
We take anything else, and we kind of just

45
00:03:01.660 --> 00:03:06.469
coerce it to string, and
throw it as an error.

46
00:03:06.469 --> 00:03:09.678
So everything above
this point in our code,

47
00:03:09.678 --> 00:03:14.897
we'll get something with a message
property, a stack trace, right?

48
00:03:14.897 --> 00:03:20.556
All of the things that they are important
clues to help us track down the problem.

49
00:03:20.556 --> 00:03:21.455
So this is great.

50
00:03:21.455 --> 00:03:25.443
This helps us do the right thing.

51
00:03:25.443 --> 00:03:31.029
In addition to that, so this I think
landed in TypeScript 4.1 maybe.

52
00:03:31.029 --> 00:03:34.695
Shortly after we got a compiler
option that allowed us to

53
00:03:34.695 --> 00:03:39.074
say throughout our entire code base,
don't even make me do this.

54
00:03:39.074 --> 00:03:45.812
I want you to just say anything I find
in a catch block is an unknown always.

55
00:03:45.812 --> 00:03:53.436
And that will encourage you to use type
guards and to handle it as appropriate.

56
00:03:53.436 --> 00:03:59.377
And this will help make sure that at
least in the code that you write,

57
00:03:59.377 --> 00:04:05.645
you're gonna end up with the clues
you need to play detective later on.

58
00:04:05.645 --> 00:04:10.346
I am unaware of any downside here
other than its you will uncover

59
00:04:10.346 --> 00:04:14.349
things in your code and
you will need to patch them up.

60
00:04:14.349 --> 00:04:19.289
But this is a straight improvement
with no negative consequence as far

61
00:04:19.289 --> 00:04:20.720
as I'm concerned.

