WEBVTT

1
00:00:00.000 --> 00:00:00.900
&gt;&gt; Spencer Schneidenbach: So,
for the next section,

2
00:00:00.900 --> 00:00:02.713
we're gonna talk about adding
validation to the API.

3
00:00:02.713 --> 00:00:07.060
Which again, I mentioned earlier that 400
bad request is my favorite response code.

4
00:00:07.060 --> 00:00:11.182
And that's because it's the response code
that tells you when something is wrong,

5
00:00:11.182 --> 00:00:12.647
and how you can fix it, okay?

6
00:00:12.647 --> 00:00:15.165
It's kind of the guardian between that and
our real system.

7
00:00:15.165 --> 00:00:19.583
We don't want invalid requests to
come in and mutate real data, and

8
00:00:19.583 --> 00:00:21.455
then cause other problems.

9
00:00:21.455 --> 00:00:25.824
So, in the previous course,
we touched on attributes, and

10
00:00:25.824 --> 00:00:30.538
we used the required attribute to
ensure that a property doesn't

11
00:00:30.538 --> 00:00:33.214
come across our API as null or empty.

12
00:00:33.214 --> 00:00:36.249
So, there's a lot of these different kinds
of attributes, there's a bunch actually.

13
00:00:36.249 --> 00:00:41.016
S, it's in the namespace
System.ComponentModel.DataAnnotations, and

14
00:00:41.016 --> 00:00:43.264
you can see a bunch of examples here.

15
00:00:43.264 --> 00:00:46.454
So, required is probably
the most common one,

16
00:00:46.454 --> 00:00:51.583
the one that I would if I use attributes
for validation, I use that the most.

17
00:00:51.583 --> 00:00:55.969
It does have a few couple of
properties to modify its behavior,

18
00:00:55.969 --> 00:00:59.216
including one that says
allow empty strings.

19
00:00:59.216 --> 00:01:03.708
So, you can say that allow empty strings,
false to say that this first name

20
00:01:03.708 --> 00:01:06.562
shouldn't have any empty
string whatsoever,

21
00:01:06.562 --> 00:01:09.939
because that's an empty
string is a non-null string.

22
00:01:09.939 --> 00:01:15.504
You can constrain the string
length to a certain degree.

23
00:01:15.504 --> 00:01:18.949
So, you could say that a first name could
not be any more than ten characters,

24
00:01:18.949 --> 00:01:21.657
and it must be at least three or
something along those lines.

25
00:01:21.657 --> 00:01:26.108
You could also say that a value can have,
must fall within a certain range,

26
00:01:26.108 --> 00:01:29.444
in this case,
this range is from 18 to 65 years old.

27
00:01:29.444 --> 00:01:34.691
So, in order to create a person in this
system they can only be between 18 and

28
00:01:34.691 --> 00:01:38.582
65, or at least that's
the valid part of the request.

29
00:01:38.582 --> 00:01:41.534
You can even validate email
addresses which in and

30
00:01:41.534 --> 00:01:45.538
of itself is a whole different rabbit
hole that I won't go down, but

31
00:01:45.538 --> 00:01:49.070
the default ASP.NET Core
implementation does have that.

32
00:01:49.070 --> 00:01:52.953
And then we have a phone number and
URL, you could say,

33
00:01:52.953 --> 00:01:56.254
is this a valid URL, and
is this a valid phone.

34
00:01:56.254 --> 00:02:00.080
So, how does this fit really into our API?

35
00:02:00.080 --> 00:02:04.533
So, let's take a crack at refactoring
our post endpoint to use some of these

36
00:02:04.533 --> 00:02:05.376
attributes.

37
00:02:05.376 --> 00:02:12.531
So, you notice that let's go first to
close our folder, open up our next.

38
00:02:15.207 --> 00:02:17.636
&gt;&gt; Spencer Schneidenbach: Adding
validation to our API, and we notice,

39
00:02:17.636 --> 00:02:19.205
let's go ahead and run them.

40
00:02:21.974 --> 00:02:25.224
&gt;&gt; Spencer Schneidenbach: Around here,
click this, get into a file, and

41
00:02:25.224 --> 00:02:29.451
get our little play button,
perfect, that's what we want,

42
00:02:29.451 --> 00:02:32.484
we can close some of these, shouldn't we?

43
00:02:32.484 --> 00:02:36.991
There we go, all right, so we're gonna
look at our post request, and you'll

44
00:02:36.991 --> 00:02:42.133
probably remember earlier that I said
that, let's see, what's the port number?

45
00:02:42.133 --> 00:02:48.237
5129, that yes, we like this,
it's sending back 400 bad requests,

46
00:02:48.237 --> 00:02:54.076
but we don't like this because it's
sending back this nasty stack trace.

47
00:02:54.076 --> 00:02:58.503
It's sending back the entire stack trace
for our application for this particular

48
00:02:58.503 --> 00:03:03.073
exception, which may include some details
that we don't wanna leak to the client.

49
00:03:03.073 --> 00:03:05.936
In a non-production environment,
we're gonna see this,

50
00:03:05.936 --> 00:03:08.247
but the caller's not gonna
see anything at all.

51
00:03:08.247 --> 00:03:10.140
'Cause thankfully, stack traces,

52
00:03:10.140 --> 00:03:13.817
ASP.NET Core does not like leaking
stack traces in production systems.

53
00:03:13.817 --> 00:03:18.252
So, you can see that this isn't super,
super useful, especially considered that

54
00:03:18.252 --> 00:03:21.572
if you're in a React app and
you're filling out these fields.

55
00:03:21.572 --> 00:03:25.757
And you've added backend validation
because you should always add backend

56
00:03:25.757 --> 00:03:26.549
validation.

57
00:03:26.549 --> 00:03:31.070
And you've skipped front end
validation for now for whatever reason.

58
00:03:31.070 --> 00:03:33.768
And you say, well, I've got this
response back from the system, but

59
00:03:33.768 --> 00:03:36.878
I don't know what to do with it because it
doesn't have a structured way to tell me

60
00:03:36.878 --> 00:03:37.911
what went wrong, right?

61
00:03:37.911 --> 00:03:40.568
It's just a huge block of text, okay?

62
00:03:40.568 --> 00:03:45.600
So, we don't get anything useful back,
but we can, and we should.

63
00:03:45.600 --> 00:03:47.608
So, wouldn't it be nice if we
could return structured data?

64
00:03:47.608 --> 00:03:51.323
And that's where we have this
thing called problem details.

65
00:03:51.323 --> 00:03:55.669
This is actually a standard,
an RFC standard for

66
00:03:55.669 --> 00:03:59.913
returning problem details
back to our client.

67
00:03:59.913 --> 00:04:04.199
And I point this out to say that ASP.NET
Core likes to implement standards where it

68
00:04:04.199 --> 00:04:06.945
makes sense, and in this case,
it does make sense.

69
00:04:06.945 --> 00:04:10.389
So, first things we're
gonna do is we are going to

70
00:04:10.389 --> 00:04:13.509
builder.Services.AddProblemDetails.

71
00:04:13.509 --> 00:04:18.877
So, we're going to stop this,
go here, run this,

72
00:04:18.877 --> 00:04:25.720
close this, and go,
builder.Services.AddProblemDetails.

73
00:04:25.720 --> 00:04:28.670
And so, what that's going
to do is add some services

74
00:04:28.670 --> 00:04:33.377
that ASP.NET Core can use to actually make
our error messages look a little nicer.

75
00:04:33.377 --> 00:04:36.947
So, we're gonna go here and we're gonna
hit play and we're gonna see, hey,

76
00:04:36.947 --> 00:04:38.840
we got something, we got structured data.

77
00:04:38.840 --> 00:04:42.218
We actually got something that
a front end could parse, right?

78
00:04:42.218 --> 00:04:45.204
Or a client can parse,
a machine can read this and say, okay,

79
00:04:45.204 --> 00:04:47.571
I know what I can kind of
know what to do with this.

80
00:04:47.571 --> 00:04:51.836
Well, kind of not really,
because I mean, yes, it is JSON and

81
00:04:51.836 --> 00:04:56.343
it does give us a well, I know it's
a bad HTTP request exception and

82
00:04:56.343 --> 00:05:00.557
I know the status code is 400,
but we got some detail.

83
00:05:00.557 --> 00:05:04.501
Failed to read the, okay, well, we're
gonna step in the right direction, but

84
00:05:04.501 --> 00:05:06.068
we're not all the way home yet.

85
00:05:06.068 --> 00:05:09.646
Plus, I mean, frankly, it just has a bunch
of extra stuff that you don't need.

86
00:05:09.646 --> 00:05:11.791
We don't need to know
the headers of the request,

87
00:05:11.791 --> 00:05:13.796
that should be in
the response of the request.

88
00:05:13.796 --> 00:05:17.928
I don't know why it's adding it to
the problem details, forget all that,

89
00:05:17.928 --> 00:05:20.037
let's go ahead and make it prettier.

90
00:05:20.037 --> 00:05:22.784
We get something better, but it's not
quite, we're gonna go ahead and go and

91
00:05:22.784 --> 00:05:24.081
modify or create employee request.

92
00:05:24.081 --> 00:05:30.316
We are going to make a couple of
changes to it, create employee request.

93
00:05:30.316 --> 00:05:35.651
And we're gonna go down here,
and we are actually going to add

94
00:05:35.651 --> 00:05:40.688
the required attribute here,
required attribute here.

95
00:05:40.688 --> 00:05:45.080
And then we're gonna do something
a little bit funky, bear with me.

96
00:05:45.080 --> 00:05:48.630
We are also gonna not allow empty strings,
because we don't want that.

97
00:05:51.721 --> 00:05:54.284
&gt;&gt; Spencer Schneidenbach: Boom,
boom, we don't want empty strings for

98
00:05:54.284 --> 00:05:55.342
our names either.

99
00:05:55.342 --> 00:05:58.005
We're gonna make a slight change,

100
00:05:58.005 --> 00:06:01.924
we're gonna actually make
this a nullable string.

101
00:06:01.924 --> 00:06:05.975
Now, why on earth do we wanna
make it annullable string?

102
00:06:05.975 --> 00:06:10.880
Well, the reason is we want our
caller to pass in an empty string and

103
00:06:10.880 --> 00:06:13.784
have our validator handle it, right?

104
00:06:13.784 --> 00:06:17.785
We don't want ASP.NET CORE to try to
deserialize this object and then panic and

105
00:06:17.785 --> 00:06:20.066
throw a big exception, we don't want that.

106
00:06:20.066 --> 00:06:23.940
So instead, because we wanna short,
we wannna get past that and

107
00:06:23.940 --> 00:06:27.027
actually have it go through
our validation logic,

108
00:06:27.027 --> 00:06:30.504
which would not happen if we
did not make these nullable.

109
00:06:30.504 --> 00:06:33.746
We're going to instead make them nullable,
at least for

110
00:06:33.746 --> 00:06:35.713
the case of the incoming request.

111
00:06:35.713 --> 00:06:39.993
This kind of represents better
the looser nature of JSON.

112
00:06:39.993 --> 00:06:44.123
And because we live in a fully integrated
world, it's important that sometimes we

113
00:06:44.123 --> 00:06:46.660
have to make a couple of
compromises along the way,

114
00:06:46.660 --> 00:06:48.432
this is a minor one, in my opinion.

115
00:06:48.432 --> 00:06:53.782
So, now we can refactor our post endpoint
to handle the validation results,

116
00:06:53.782 --> 00:06:55.361
which we will do here.

117
00:06:55.361 --> 00:07:00.730
We're just gonna add in a little bit
of code at the beginning of our thing,

118
00:07:00.730 --> 00:07:05.937
we're also gonna com fix these errors,
which we'll do here shortly.

119
00:07:05.937 --> 00:07:09.171
Boom, boom, it's gonna complain,
give us some squiggly,

120
00:07:09.171 --> 00:07:12.853
it's gotta import some things, so
we're gonna hit command period.

121
00:07:12.853 --> 00:07:15.806
And using system component
model data annotations,

122
00:07:15.806 --> 00:07:19.553
which is exactly what we want,
make that a little bit smaller here.

123
00:07:19.553 --> 00:07:23.597
And so, what we're gonna do is
create a list of validation results,

124
00:07:23.597 --> 00:07:26.399
this is where our validation
problems will go.

125
00:07:26.399 --> 00:07:30.401
And then we're gonna call this validate,
we're gonna call the static method try

126
00:07:30.401 --> 00:07:32.780
validate object,
break this down a little bit.

127
00:07:35.109 --> 00:07:36.133
&gt;&gt; Spencer Schneidenbach: Now,
what does all this do?

128
00:07:36.133 --> 00:07:40.157
Let's take a look at these arguments, the
arguments are the instance of the object

129
00:07:40.157 --> 00:07:43.565
that we actually want to validate,
in this case, employee request.

130
00:07:43.565 --> 00:07:47.373
We wanna give it a validation context, for
some reason we need to create that with

131
00:07:47.373 --> 00:07:50.072
the employee request,
we'll touch on that in a second.

132
00:07:50.072 --> 00:07:54.492
We'll give it the validation results so
that way, try validate object can say,

133
00:07:54.492 --> 00:07:57.614
okay, well now since I'm only
returning true or false.

134
00:07:57.614 --> 00:08:01.642
I'll go ahead and just dump anything that
I find that's wrong into this list or

135
00:08:01.642 --> 00:08:03.717
enter this collection if it exists, and

136
00:08:03.717 --> 00:08:06.174
then do we wanna validate
all properties true?

137
00:08:06.174 --> 00:08:12.076
And then if not valid, we wanna return
results bad request back to the caller.

138
00:08:12.076 --> 00:08:20.468
A note on this, you see that those fields
that we made nullable are now complaining.

139
00:08:20.468 --> 00:08:24.418
But the Three nullable, and
we can't set a nullable object

140
00:08:24.418 --> 00:08:28.062
to the a non-nullable object,
in this case a string.

141
00:08:28.062 --> 00:08:30.900
So, the way that we get around
that is with the bang operator,

142
00:08:30.900 --> 00:08:32.003
an exclamation point.

143
00:08:32.003 --> 00:08:35.588
That pretty much just asserts
to the compiler yes, I know for

144
00:08:35.588 --> 00:08:38.766
a fact that this thing is not null,
and we do, right?

145
00:08:38.766 --> 00:08:42.031
We can know that because we
validated that incoming request,

146
00:08:42.031 --> 00:08:43.679
so we're gonna hit that bang.

147
00:08:43.679 --> 00:08:47.429
And we're gonna say, yes, we know this
thing is not null because at this point in

148
00:08:47.429 --> 00:08:51.255
the code, me as the developer, I'm telling
you I know better than the compiler.

149
00:08:51.255 --> 00:08:54.990
So, we're gonna override
the compiler behavior and

150
00:08:54.990 --> 00:08:58.402
let this thing set this,
so that looks all good.

151
00:08:58.402 --> 00:09:02.034
So, we're gonna run our solution.

152
00:09:05.613 --> 00:09:08.051
&gt;&gt; Spencer Schneidenbach: And
we're gonna try to do our request, and

153
00:09:08.051 --> 00:09:12.539
we're gonna see something that's
already leaps and bounds better, right?

154
00:09:12.539 --> 00:09:17.268
We're gonna see the exact name of the
member that threw the error in this case,

155
00:09:17.268 --> 00:09:20.436
because our JSON body
doesn't include a last name.

156
00:09:20.436 --> 00:09:23.065
We're gonna give it,
it's gonna tell us that, hey,

157
00:09:23.065 --> 00:09:25.022
we got hung up on the last name property.

158
00:09:25.022 --> 00:09:27.081
And by the way, here's the error message,

159
00:09:27.081 --> 00:09:29.870
we're already light years
ahead of where we were, right?

160
00:09:29.870 --> 00:09:33.776
Because we're at least giving
something useful to the client,

161
00:09:33.776 --> 00:09:36.537
a react app could take this and
interpret it.

162
00:09:36.537 --> 00:09:40.233
And then show an error message
on the screen to say, hey,

163
00:09:40.233 --> 00:09:45.786
this thing is not valid, but it's still
not technically in problem details format.

164
00:09:45.786 --> 00:09:49.016
You'll notice that if we go here,
if I look,

165
00:09:49.016 --> 00:09:53.447
Results.BadRequest is just
taking in a validation result.

166
00:09:53.447 --> 00:09:58.131
And it doesn't say, hey, return a problem
detail, we want that nice spec,

167
00:09:58.131 --> 00:10:01.679
we are making an API that we
want developers to love to use.

168
00:10:01.679 --> 00:10:06.677
So thus, we wanna make sure that we're
returning validation problems in a way

169
00:10:06.677 --> 00:10:11.691
that's kind of standard, and we're
gonna standardize that across our API.

170
00:10:11.691 --> 00:10:16.391
So, the way that we do that is by
a handy little extension method.

171
00:10:16.391 --> 00:10:20.311
And we're going to use that to basically
take in a list of validation results and

172
00:10:20.311 --> 00:10:22.195
return validation problem details.

173
00:10:22.195 --> 00:10:26.730
So, we're gonna make an extension method
to do that, I'm gonna stop my application.

174
00:10:26.730 --> 00:10:30.370
I'm going to go here, I'm going to
hit the plus sign, that's on that,

175
00:10:30.370 --> 00:10:31.603
that's on the solution.

176
00:10:31.603 --> 00:10:37.212
I'm gonna say, I'm gonna add a class and
I'm gonna call it extensions.

177
00:10:37.212 --> 00:10:40.787
And when I'm making projects and
I'm adding cost of behavior and

178
00:10:40.787 --> 00:10:44.102
want to be able to just quickly
convert one thing to another,

179
00:10:44.102 --> 00:10:46.512
I'm using extension methods constantly.

180
00:10:46.512 --> 00:10:49.595
It's like my it's one of my favorite,
extension methods or

181
00:10:49.595 --> 00:10:51.597
one of my favorite language features.

182
00:10:51.597 --> 00:10:55.021
And it's not super important that you
know what this is because spoiler alert,

183
00:10:55.021 --> 00:10:56.413
it's not gonna exist forever.

184
00:10:56.413 --> 00:10:59.391
But I'm gonna go ahead and
import this, and

185
00:10:59.391 --> 00:11:03.819
you're gonna see that,
we're gonna import this as well, and

186
00:11:03.819 --> 00:11:08.181
you're gonna see that we create
a validation problem details.

187
00:11:08.181 --> 00:11:12.620
We spin through our validation results,
and then we basically just go through and

188
00:11:12.620 --> 00:11:16.044
add it in the format that
validation problem details expects.

189
00:11:16.044 --> 00:11:19.136
I do wanna touch on this because,
earlier I said problem details,

190
00:11:19.136 --> 00:11:21.408
but why am I saying
validation problem details?

191
00:11:21.408 --> 00:11:27.319
Validation problem details is
a derived type of problem details,

192
00:11:27.319 --> 00:11:32.083
it's a derived type,
do you see I'm just clicking?

193
00:11:32.083 --> 00:11:37.549
Let me do that again, just to show you so
as I mentioned, I do this a lot.

194
00:11:37.549 --> 00:11:41.306
I navigate source code, so I'm holding
command and I'm clicking on it,

195
00:11:41.306 --> 00:11:44.292
you see that it gives that
nice little underlying syntax.

196
00:11:44.292 --> 00:11:48.714
And I'm getting the source code for
the thing that's built into ASP NET Core,

197
00:11:48.714 --> 00:11:51.401
telling you I do it all the time,
I promise you.

198
00:11:51.401 --> 00:11:55.289
And you're gonna see that validation
problem details inherits from HTTP

199
00:11:55.289 --> 00:11:58.484
validation problem details,
which in and of itself valid,

200
00:11:58.484 --> 00:12:00.252
inherits from problem details.

201
00:12:00.252 --> 00:12:03.468
So, why validation problem details,
well, it's an object purpose built for

202
00:12:03.468 --> 00:12:05.340
exactly the use case
that we're looking for.

203
00:12:05.340 --> 00:12:07.703
Sending bad request back to the client so

204
00:12:07.703 --> 00:12:11.327
that way they know how to fix
the error that they're getting.

205
00:12:11.327 --> 00:12:14.452
Now, we can refactor our
post end point to use that,

206
00:12:14.452 --> 00:12:18.515
we're gonna just call that method
to validation problem details.

207
00:12:18.515 --> 00:12:23.657
Boom, boom, to validation problem details,
you see that we get it in our editor,

208
00:12:23.657 --> 00:12:27.117
you hover over,
you see that it is indeed an extension.

209
00:12:27.117 --> 00:12:31.672
We're not calling the method, and we need
to, otherwise it's just going to return

210
00:12:31.672 --> 00:12:34.640
back a reference to the method,
which we don't want.

211
00:12:34.640 --> 00:12:38.694
So, we're gonna get open,
close parentheses, call that method, and

212
00:12:38.694 --> 00:12:41.822
then we're gonna go back here,
we're gonna hit play.

213
00:12:41.822 --> 00:12:45.176
And we're gonna get back our
validation problem detail.

214
00:12:45.176 --> 00:12:51.474
Notice that the error message is now
exactly bound to the member that failed.

215
00:12:51.474 --> 00:12:54.291
So, React app could now take this and
say, well,

216
00:12:54.291 --> 00:12:56.880
I know what field the last name came from,
right?

217
00:12:56.880 --> 00:13:01.817
So, I'll just put this error message
under that last name field, right?

218
00:13:01.817 --> 00:13:08.901
So, this is giving us pretty much anything
that we need to really have a strong,

219
00:13:08.901 --> 00:13:14.321
validation story for,
an API that might be an external API.

220
00:13:14.321 --> 00:13:18.008
Somebody might be calling it from another
external system, or we might be building

221
00:13:18.008 --> 00:13:21.601
this API for a front end, so you get a lot
of power here, which is really awesome.

222
00:13:21.601 --> 00:13:26.517
Now, we can also refactor our
test to read from this validation

223
00:13:26.517 --> 00:13:29.040
problem detail if we so choose.

224
00:13:29.040 --> 00:13:34.179
So, up to this point,
we've really only asserted in

225
00:13:34.179 --> 00:13:39.331
our tests that our code is
one status code or another.

226
00:13:39.331 --> 00:13:43.918
And I would say that that's a good
assertion, but it's a little bit anemic.

227
00:13:43.918 --> 00:13:47.698
In other words, we can test other parts of
the behavior of our validation endpoints

228
00:13:47.698 --> 00:13:51.594
by literally saying, well, I just don't
want to just know that it's a bad request.

229
00:13:51.594 --> 00:13:55.583
I want to deserialize the object that I
expect and see that you actually have

230
00:13:55.583 --> 00:13:59.531
the first name and last name in there
as part of those validation details.

231
00:13:59.531 --> 00:14:02.631
So, I'm going to do that right quick,
I'm gonna go here,

232
00:14:02.631 --> 00:14:04.692
I'm gonna go to my Visual Studio code.

233
00:14:04.692 --> 00:14:09.818
I'm gonna open up my test project,
I'm gonna go to my unit tests,

234
00:14:09.818 --> 00:14:15.963
stop our running of our application, and
I'm gonna go to our create endpoint.

235
00:14:15.963 --> 00:14:20.320
I'm gonna paste this test in,
format it nicely, nice white space there.

236
00:14:20.320 --> 00:14:23.537
And you're gonna see
that we need to import,

237
00:14:23.537 --> 00:14:27.612
it's the way it goes,
command period, and then enter.

238
00:14:27.612 --> 00:14:29.454
Let the IDE do all the hard work, and

239
00:14:29.454 --> 00:14:32.534
then you're gonna see that we
are taking this bad request.

240
00:14:32.534 --> 00:14:37.179
We're not just asserting that the status
code is equal to bad request, we're now

241
00:14:37.179 --> 00:14:41.780
digging into the problem details object
itself by reading that as a JSON object.

242
00:14:41.780 --> 00:14:46.554
And we're making sure that all of
the values that we expect in this case,

243
00:14:46.554 --> 00:14:51.738
we expect that first and last name because
they're required are part of this.

244
00:14:51.738 --> 00:14:55.658
So, we're gonna go and
that is gonna be what we do.

245
00:14:55.658 --> 00:14:59.962
So, let's run our test,
make sure it all works, boom,

246
00:14:59.962 --> 00:15:03.741
you can see that that
the test passed as expected.

