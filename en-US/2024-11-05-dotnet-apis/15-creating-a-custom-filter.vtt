WEBVTT

1
00:00:00.380 --> 00:00:05.539
Let's write our own filter, because as
much as I don't mind too much boilerplate,

2
00:00:05.539 --> 00:00:08.517
if I can reduce it in a way
that Developers like and

3
00:00:08.517 --> 00:00:12.024
are really useful to developers
then I'm gonna do that.

4
00:00:12.024 --> 00:00:14.750
Let's take this piece of code here.

5
00:00:14.750 --> 00:00:17.849
First things first, I'm gonna go ahead and

6
00:00:17.849 --> 00:00:23.040
I am going to close this folder and
I'm gonna open up the next folder here,

7
00:00:23.040 --> 00:00:28.090
which is middleware-and-filters-3-D,
perfect.

8
00:00:28.090 --> 00:00:34.340
And I'm gonna look specifically at
this validate async method, right?

9
00:00:34.340 --> 00:00:38.840
And we're gonna look at it where it's used
inside of our employee controller here.

10
00:00:38.840 --> 00:00:43.017
I'm gonna scroll down to my post request,
my create employee, and

11
00:00:43.017 --> 00:00:47.257
I'm gonna see that,
I'm gonna repeat this code quite a bit.

12
00:00:47.257 --> 00:00:52.157
You'll remember that if you're using
the built in stuff for ASP.NET Core, and

13
00:00:52.157 --> 00:00:56.697
you're using their built-in validators,
if you have the API controller

14
00:00:56.697 --> 00:01:00.033
attribute on top of your controller,
like we do here.

15
00:01:00.033 --> 00:01:05.503
Right there in our base class, that it
will automatically do validation for you.

16
00:01:05.503 --> 00:01:08.493
Well, we don't have that option
because we're using async validation.

17
00:01:08.493 --> 00:01:11.863
So there's no way that we're using
fluent validation and async validation.

18
00:01:11.863 --> 00:01:15.553
So there's no way for ASP.NET Core to know
that we have something to validate, so

19
00:01:15.553 --> 00:01:16.736
we have to do it manually.

20
00:01:16.736 --> 00:01:20.203
Cuz it's better than not doing it at all,
that's for sure.

21
00:01:20.203 --> 00:01:22.638
But we can get around
that by adding a filter,

22
00:01:22.638 --> 00:01:26.000
we can actually take it after
that model has been bound.

23
00:01:26.000 --> 00:01:30.487
We can actually figure out what the model
is, what the type of it is at runtime, and

24
00:01:30.487 --> 00:01:33.340
then see if we can validate that object.

25
00:01:33.340 --> 00:01:37.102
We want to add in this
fluent validation filter.

26
00:01:37.102 --> 00:01:40.599
Let's see, I'm actually going to,
&gt;&gt; Spencer Schneidenbach: Yeah,

27
00:01:40.599 --> 00:01:45.104
we'll add it, and we'll go ahead and
copy this in like so, and

28
00:01:45.104 --> 00:01:49.117
then we're gonna go
through this line by line.

29
00:01:49.117 --> 00:01:51.811
This is actually a fairly complex file,

30
00:01:51.811 --> 00:01:55.117
I really wanna demonstrate
the functionality.

31
00:01:55.117 --> 00:01:59.634
It's not so important that we know
everything that this thing is doing, but

32
00:01:59.634 --> 00:02:01.671
only that it's available to us.

33
00:02:01.671 --> 00:02:05.281
cs, so I'm gonna paste that in here.

34
00:02:06.461 --> 00:02:09.471
I'm gonna start importing
things like that.

35
00:02:09.471 --> 00:02:16.311
I'm gonna import that,
I'm gonna import FluentValidation.Results.

36
00:02:16.311 --> 00:02:19.395
And I am going to import FluentValidation.

37
00:02:19.395 --> 00:02:25.019
And a thing called ProblemDetailsFactory,
which we will touch on.

38
00:02:25.019 --> 00:02:29.983
And so what this is actually doing, this
filter is actually spinning through all

39
00:02:29.983 --> 00:02:34.159
of the parameters that we've
specified on our controller method.

40
00:02:35.159 --> 00:02:39.699
And it's determining, do any of these
parameters match an existing validator?

41
00:02:39.699 --> 00:02:42.421
It's using reflection to determine to say,

42
00:02:42.421 --> 00:02:47.075
this is the shape of that IValidator type,
and do we have one in our dependency

43
00:02:47.075 --> 00:02:51.895
injection pipeline that we can use to
actually validate this incoming object?

44
00:02:53.695 --> 00:02:58.097
Again, it's not super important that,
I don't expect anybody here to say, wow,

45
00:02:58.097 --> 00:02:59.715
okay, that's a lot of stuff.

46
00:02:59.715 --> 00:03:03.162
Cuz this is a lot,
this is rather advanced programming.

47
00:03:03.162 --> 00:03:05.834
But this is where reflection and
the power of reflection,

48
00:03:05.834 --> 00:03:08.202
as I explained in my
previous course comes in.

49
00:03:08.202 --> 00:03:09.983
We can do things at runtime and

50
00:03:09.983 --> 00:03:14.406
create repeatable patterns such that
we can add additional behaviors and

51
00:03:14.406 --> 00:03:18.485
do different things, even if we
don't know the type ahead of time.

52
00:03:22.238 --> 00:03:24.907
&gt;&gt; Spencer Schneidenbach: Let me see
validationResults.AddToModelState, yes,

53
00:03:24.907 --> 00:03:28.208
I know why that's not showing up,
we'll go there in a second.

54
00:03:28.208 --> 00:03:31.998
Okay, so I don't wanna necessarily,
we'll step through this here in a second.

55
00:03:31.998 --> 00:03:35.032
I do wanna point out that
this thing is missing, and

56
00:03:35.032 --> 00:03:39.933
that is because we need one new get
package, which is, do Ctrl + P.

57
00:03:39.933 --> 00:03:45.170
And open up Nuget, and then we are going

58
00:03:45.170 --> 00:03:50.250
to FluentValidation.AspNetCore,

59
00:03:50.250 --> 00:03:53.443
go ahead and add that.

60
00:03:53.443 --> 00:03:55.323
&gt;&gt; Spencer Schneidenbach: And then we'll
use that and then we'll import it.

61
00:03:55.323 --> 00:03:59.147
That's just an extension method that
takes our validation result and

62
00:03:59.147 --> 00:04:03.915
adds it to our existing model state which
is available inside of this context.

63
00:04:03.915 --> 00:04:07.996
One last thing to actually use the filter
is that in our AddController method call,

64
00:04:07.996 --> 00:04:09.510
we actually have to say, hey,

65
00:04:09.510 --> 00:04:12.705
make sure that this filter is
part of all of our controllers.

66
00:04:12.705 --> 00:04:18.115
So without this, ASP.Net Core just
won't use it, they just see a class.

67
00:04:18.115 --> 00:04:20.653
It just sees a class as
part of the solution, and

68
00:04:20.653 --> 00:04:25.584
it doesn't do anything with it, so we do
need to instruct ASP.Net Core to use it.

69
00:04:25.584 --> 00:04:28.824
So we're gonna go to our program file,
we're gonna go down here.

70
00:04:28.824 --> 00:04:31.957
We're gonna replace our AddControllers
method here with this one,

71
00:04:31.957 --> 00:04:34.234
that's gonna add our
FluentValidationFilter.

72
00:04:34.234 --> 00:04:37.434
And now we're saying, again,
it's like micro middleware, right?

73
00:04:37.434 --> 00:04:40.446
So we're taking it and we're saying,
hey, we've gotten to the controller but

74
00:04:40.446 --> 00:04:44.355
before that controller executes,
we're gonna send it through this filter.

75
00:04:44.355 --> 00:04:48.431
So you can do it actually one of two ways,
you can send it before the controller

76
00:04:48.431 --> 00:04:52.405
actually gets the request to actually
handle it, or you could do it after.

77
00:04:52.405 --> 00:04:56.356
You can modify the aspects of that
response after the controller's done

78
00:04:56.356 --> 00:04:58.125
executing it.

79
00:04:58.125 --> 00:05:04.023
And you can see that here because
we have OnActionExecution and

80
00:05:04.023 --> 00:05:07.478
OnActionExecuted, so there we go.

81
00:05:07.478 --> 00:05:10.900
So we're gonna play this, debug, boom.

82
00:05:14.900 --> 00:05:17.165
&gt;&gt; Spencer Schneidenbach: So
I'm gonna go ahead and hit that, and

83
00:05:17.165 --> 00:05:21.159
you're gonna see that now that
we've established that our filter.

84
00:05:21.159 --> 00:05:25.316
I'm gonna move this out of the way,
that our filter is actually part of

85
00:05:25.316 --> 00:05:29.578
our controller,
we can actually see that it is executing.

86
00:05:29.578 --> 00:05:34.085
So we're gonna take a little bit and just
take a look at some of these objects and

87
00:05:34.085 --> 00:05:34.848
go through.

88
00:05:34.848 --> 00:05:35.958
Again, I don't expect you to memorize it.

89
00:05:35.958 --> 00:05:40.438
The point is, just know that this
is available, because this may

90
00:05:40.438 --> 00:05:45.244
be useful in a probably will be further
down the line as in your .Net and

91
00:05:45.244 --> 00:05:47.299
your ASP.Net Core journey.

92
00:05:47.299 --> 00:05:51.075
So I wanna call out this
parameters thing specifically,

93
00:05:51.075 --> 00:05:53.599
which is this parameter descriptor.

94
00:05:53.599 --> 00:05:56.543
And you see this name is employeeRequest,

95
00:05:56.543 --> 00:06:00.640
which is exactly the name
of our variable here.

96
00:06:00.640 --> 00:06:06.386
So, because it's already gotten to
ASP.Net Core's web API handlers,

97
00:06:06.386 --> 00:06:11.960
it knows that this is something that
should be in the incoming request.

98
00:06:11.960 --> 00:06:15.830
It's actually already gone through
the trouble of binding it for us too.

99
00:06:15.830 --> 00:06:20.362
So if we go here and spin through, we
can see that if we try to get the value,

100
00:06:20.362 --> 00:06:25.483
we can actually see that we get
our CreateEmployeeRequest object.

101
00:06:25.483 --> 00:06:28.991
We can then read the type of
that object at runtime and

102
00:06:28.991 --> 00:06:33.793
then use reflection to make
a reference to that generic type.

103
00:06:33.793 --> 00:06:35.707
So you go here validatorType, and

104
00:06:35.707 --> 00:06:39.800
you can see our validatorType is
IValidator of CreateEmployeeRequest.

105
00:06:39.800 --> 00:06:44.232
And then you can go through and
then ask the dependency injection system,

106
00:06:44.232 --> 00:06:47.450
does this thing exist,
does this validator exist?

107
00:06:47.450 --> 00:06:50.090
And if so, I would like to use it.

108
00:06:50.090 --> 00:06:54.687
And that's when you would go through and
do the logic that you would expect, which

109
00:06:54.687 --> 00:06:59.218
is that if validation result is valid,
you use the AddToModelState to just add it

110
00:06:59.218 --> 00:07:04.038
to the modelState context again using
the FluentValidation ASP.Net Core package.

111
00:07:04.038 --> 00:07:06.517
And then I think
the strangest part of this,

112
00:07:06.517 --> 00:07:11.351
all of it feels pretty straightforward
except for this ProblemDetailsFactory.

113
00:07:11.351 --> 00:07:15.390
This is actually an abstraction
that ASP.Net Core uses for

114
00:07:15.390 --> 00:07:20.320
some reason to actually create
the validation problem details object,

115
00:07:20.320 --> 00:07:24.377
this is just basically a factory class for
creating those.

116
00:07:24.377 --> 00:07:26.368
So we have to use those,

117
00:07:26.368 --> 00:07:32.767
because it's defined in some other
part of ASP.Net Core for us.

118
00:07:32.767 --> 00:07:35.931
And that's when we can set
the result of our request,

119
00:07:35.931 --> 00:07:41.227
which is normally if we don't have this
set, then it would just be handled.

120
00:07:41.227 --> 00:07:45.639
But at that point, we can set
it to BadObjecRequestResult, and

121
00:07:45.639 --> 00:07:49.827
you can see that we get
our 400 bad request.

122
00:07:49.827 --> 00:07:55.030
Now I don't believe I removed
this validation logic here,

123
00:07:55.030 --> 00:07:59.097
let's see, what are you complaining about?

124
00:08:01.412 --> 00:08:03.195
We'll go ahead and kill that by,

125
00:08:03.195 --> 00:08:06.582
it's saying that we don't have
anything async await in here.

126
00:08:06.582 --> 00:08:10.471
We can await on a already CompletedTask
in order to kill that, or

127
00:08:10.471 --> 00:08:14.032
we could simply convert
this to a non-async method.

128
00:08:14.032 --> 00:08:17.822
I'm just gonna take the little bit of
a Kluge code here and just let it do that.

129
00:08:19.042 --> 00:08:22.709
But to just show you that,
we don't call validate async anymore, but

130
00:08:22.709 --> 00:08:25.464
we still get our validation
problem details.

131
00:08:25.464 --> 00:08:29.364
You can see that we send it and we still
get our validation problem details.

132
00:08:29.364 --> 00:08:32.279
And because we were smart,
we thought ahead of time, and

133
00:08:32.279 --> 00:08:35.944
we wanted to write some tests,
we're gonna go ahead and run our tests.

134
00:08:35.944 --> 00:08:41.052
We're gonna see that
everything works just fine.

135
00:08:41.052 --> 00:08:43.337
Now, we're gonna go ahead and
do something else,

136
00:08:43.337 --> 00:08:46.062
which is we're gonna add our
validator to our PUT endpoint.

137
00:08:46.062 --> 00:08:48.212
At this point ignored our PUT endpoint.

138
00:08:48.212 --> 00:08:51.665
But our PUT endpoint is
doing a mutation of its own,

139
00:08:51.665 --> 00:08:54.812
which is it is changing
aspects of our system.

140
00:08:54.812 --> 00:08:58.872
And we do wanna validate that
those things are happening.

141
00:08:59.892 --> 00:09:05.488
We wanna validate that object is valid
before we alter a part of our system.

142
00:09:05.488 --> 00:09:09.338
So we're gonna create a slightly
more complex validator.

143
00:09:09.338 --> 00:09:14.124
I'm gonna copy it here, open this up,
and I'm just gonna put it under my

144
00:09:14.124 --> 00:09:19.303
updateEmployeeRequest class, just reduce
the number of files that we have,

145
00:09:19.303 --> 00:09:22.764
and then I'm gonna close this so
we can look at this.

146
00:09:22.764 --> 00:09:27.825
I'm gonna do an import,
import FluidValidation, command.

147
00:09:29.000 --> 00:09:32.716
&gt;&gt; Spencer Schneidenbach: And import that
and let's talk about what this is doing.

148
00:09:32.716 --> 00:09:33.569
First of all,

149
00:09:33.569 --> 00:09:38.193
we've defined our AbstractValidator
here of an updateEmployeeRequest and

150
00:09:38.193 --> 00:09:43.157
we've given it a little bit of context,
a little bit of things that it needs.

151
00:09:43.157 --> 00:09:48.797
We wanna be able to get the Http context,
we'll show you why in here a second.

152
00:09:48.797 --> 00:09:53.637
So this HttpContextAccessor object
is an object that you can use.

153
00:09:53.637 --> 00:09:57.654
It's part of the dependency injection
system to downstream in another service,

154
00:09:57.654 --> 00:10:00.579
get access to the Http context,
which is really critical.

155
00:10:00.579 --> 00:10:03.321
Multiple because we need to read
values from that Http context,

156
00:10:03.321 --> 00:10:06.469
I'll show you what that
looks like here in a second.

157
00:10:06.469 --> 00:10:09.769
And then, of course, we have our
repository object that we need to get.

158
00:10:11.839 --> 00:10:15.996
And we have some very custom,
very interesting logic right here.

159
00:10:15.996 --> 00:10:17.782
Which is that for address,

160
00:10:17.782 --> 00:10:22.685
we wanna say that this must not be empty
if it's already set on an employee.

161
00:10:22.685 --> 00:10:25.564
In other words, if the employee
object already has an address,

162
00:10:25.564 --> 00:10:28.301
then we wanna make sure that
nobody can remove that address.

163
00:10:31.665 --> 00:10:33.825
&gt;&gt; Spencer Schneidenbach: Why did we
need the Http context to do this?

164
00:10:33.825 --> 00:10:35.598
Well, we actually needed it so

165
00:10:35.598 --> 00:10:39.185
we could read the Routevalue
of the Id from the request.

166
00:10:39.185 --> 00:10:43.930
The validator doesn't have direct access
to say, we're updating employee one, two,

167
00:10:43.930 --> 00:10:44.740
three, four.

168
00:10:44.740 --> 00:10:47.584
Thus, we give it
the httpContext in order to say,

169
00:10:47.584 --> 00:10:52.278
in order to get access to the request, and
then get that Id out of that Routevalue.

170
00:10:52.278 --> 00:10:55.741
So we know what the employee Id is,
and that's relevant,

171
00:10:55.741 --> 00:10:59.688
because we need to reach into
our employee repository.

172
00:10:59.688 --> 00:11:03.651
We need to GetById,
we need to get that employee and then say,

173
00:11:03.651 --> 00:11:09.067
if the employee address does not equal
null and the string IsNotNullOrWhiteSpace,

174
00:11:09.067 --> 00:11:13.607
then we need to return false,
otherwise, return true.

175
00:11:13.607 --> 00:11:15.577
And this is a little bit
of a different syntax.

176
00:11:15.577 --> 00:11:18.428
I think we saw it a little bit earlier,
but

177
00:11:18.428 --> 00:11:23.005
this is establishing a validation rule for
our address one field.

178
00:11:23.005 --> 00:11:24.079
Where we say, must

179
00:11:24.079 --> 00:11:27.380
(NotBeEmptyIfItIsSetOnAnEmployeeAlreadyAs-
ync).

180
00:11:27.380 --> 00:11:31.852
Which in a fluent API,
you typically try to write it as close to

181
00:11:31.852 --> 00:11:35.812
English as you possibly can and
then say with message.

182
00:11:35.812 --> 00:11:41.529
Address1 must not be empty and you
could even be more specific, an address

183
00:11:41.529 --> 00:11:47.301
was already set on the employee,
you make it whatever message you want.

184
00:11:47.301 --> 00:11:49.471
So this is a very custom
piece of behavior.

185
00:11:49.471 --> 00:11:53.341
And believe me when I say this,
example might look maybe a bit strange.

186
00:11:53.341 --> 00:11:55.882
I mean, Ken you should be able
to zero out an address or

187
00:11:55.882 --> 00:11:57.981
null out an address if it already exists.

188
00:11:57.981 --> 00:12:02.516
Maybe, but you will use things like
this a ton as you're building APIs and

189
00:12:02.516 --> 00:12:04.608
you're validating them.

190
00:12:04.608 --> 00:12:07.028
If we try to run our tests,
they will break.

191
00:12:07.028 --> 00:12:11.805
And the reason that they will break
is that, well, I'll show you.

192
00:12:11.805 --> 00:12:17.483
If we did everything correctly we should
see that, yep we have a problem, which

193
00:12:17.483 --> 00:12:23.680
is that the dependency injection system
cannot find our HttpContextAccessor.

194
00:12:23.680 --> 00:12:26.990
That's because we need to register
it manually, which is fine.

195
00:12:26.990 --> 00:12:29.678
I actually think that you used to
have to register it manually, and

196
00:12:29.678 --> 00:12:32.035
then Microsoft made it so
you didn't have to register it.

197
00:12:32.035 --> 00:12:34.737
And then they made it so you had to
register it again, not sure why,

198
00:12:34.737 --> 00:12:35.910
I think that's how it went.

199
00:12:37.430 --> 00:12:40.052
AddHttpContextAccessor.

200
00:12:41.534 --> 00:12:46.219
&gt;&gt; Spencer Schneidenbach:
pContextAccessor, hit Tab, ().

201
00:12:46.219 --> 00:12:51.999
And that goes through, and it actually
adds in our IHttpContextAccessor.

202
00:12:51.999 --> 00:12:54.269
So we can get access to our HTTP context.

203
00:12:54.269 --> 00:12:56.305
So we can get the Id from
the incoming request, so

204
00:12:56.305 --> 00:12:58.595
we can know what employee
they're trying to modify.

205
00:12:58.595 --> 00:13:01.297
So that we can validate
our incoming object.

206
00:13:04.295 --> 00:13:07.293
&gt;&gt; Spencer Schneidenbach: So boom,
boom, now we rerun our tests.

207
00:13:07.293 --> 00:13:12.706
Ctrl + Shift +tilde dotnet test,
we get everything passing,

208
00:13:12.706 --> 00:13:16.355
which is exactly what we want, okay.

209
00:13:16.355 --> 00:13:19.266
Lastly, we can update our
tests to say that yes,

210
00:13:19.266 --> 00:13:22.816
when address is set,
we can have a test out there that says,

211
00:13:22.816 --> 00:13:27.303
if the address on that employee is set,
if we wanted to test that behavior.

212
00:13:27.303 --> 00:13:32.063
Because it's really mission critical,
cuz again, limited time and resources,

213
00:13:32.063 --> 00:13:34.968
we can't test every single thing.

214
00:13:34.968 --> 00:13:39.625
We do wanna test this, so
we say, for this employee,

215
00:13:39.625 --> 00:13:44.138
we'll say employeeId, what does this say?

216
00:13:44.138 --> 00:13:47.732
Doesn't exist, all right,
we'll just say 1, invalidEmployee.

217
00:13:47.732 --> 00:13:52.656
And we'll say, if this employee already
has an address that we want to make sure

218
00:13:52.656 --> 00:13:55.608
that we're getting a bad request back.

219
00:13:55.608 --> 00:13:59.617
Let me just make sure,
because of the way we've set up our repo,

220
00:13:59.617 --> 00:14:02.001
we should see that our test will fail.

221
00:14:04.361 --> 00:14:05.822
&gt;&gt; Spencer Schneidenbach: And
then once we add in our address,

222
00:14:05.822 --> 00:14:07.481
we've already defined an address, and

223
00:14:07.481 --> 00:14:10.481
we don't wanna be able to zero it out,
still failing, let's see.

224
00:14:10.481 --> 00:14:14.008
And the reason is, is we already
have some employees in our repo.

225
00:14:14.008 --> 00:14:18.131
So we actually need to capture this
employee's employeeId, which we will do.

226
00:14:19.230 --> 00:14:23.950
Go create a new variable
employee capture it here.

227
00:14:25.020 --> 00:14:31.292
&gt;&gt; Spencer Schneidenbach: And
then we will say employeeIdForAddressTest,

228
00:14:31.292 --> 00:14:37.273
will get repo.GetAll().First().Id.

229
00:14:37.273 --> 00:14:44.346
And then we will create
this private field here,

230
00:14:44.346 --> 00:14:51.255
and then we will copy it down here,
add it here.

231
00:14:52.635 --> 00:14:58.582
And now we should see because we already
have an address on our employee.

232
00:14:58.582 --> 00:15:01.560
[LAUGH] That's the way it goes sometimes.

233
00:15:01.560 --> 00:15:05.385
I didn't copy this other request,
which actually does have a valid.

234
00:15:05.385 --> 00:15:06.680
Okay, cut all that.

235
00:15:06.680 --> 00:15:11.140
It's because this test was failing, not
this test, okay, that makes total sense.

236
00:15:11.140 --> 00:15:15.700
So we'll copy these here,
we'll hit Tab + Over.

237
00:15:15.700 --> 00:15:20.845
We'll see that we make our valid PUT
request valid by making sure that we add

238
00:15:20.845 --> 00:15:27.691
our address1 here, 123 Main St. to make
sure that this becomes a valid request.

239
00:15:27.691 --> 00:15:33.841
We will run all of our tests again,
and now we see that they pass.

