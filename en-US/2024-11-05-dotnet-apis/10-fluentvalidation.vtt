WEBVTT

1
00:00:00.200 --> 00:00:02.867
&gt;&gt; Spencer Schneidenbach: That's all
pretty good and I'm gonna say that if you

2
00:00:02.867 --> 00:00:06.818
stop there and you're validating your API,
I think that's totally valid.

3
00:00:09.880 --> 00:00:12.422
&gt;&gt; Spencer Schneidenbach: There is
a better way to validate that is not built

4
00:00:12.422 --> 00:00:16.750
into ASP.Net core, a library that I
use a lot called Fluent Validation.

5
00:00:16.750 --> 00:00:23.190
I don't like the attributes as I don't
like the validation attributes in general.

6
00:00:23.190 --> 00:00:25.914
First of all,
they lack a little bit of flexibility.

7
00:00:25.914 --> 00:00:28.689
If you need to add any kind
of custom behavior to them,

8
00:00:28.689 --> 00:00:32.574
then you're forced to create a custom
validator, which in and of itself,

9
00:00:32.574 --> 00:00:36.483
is fine, but the custom Validation Logic
is a little cumbersome to write.

10
00:00:36.483 --> 00:00:39.719
It involves implementing something
called ivalidatable object.

11
00:00:39.719 --> 00:00:42.097
And on that target object.

12
00:00:42.097 --> 00:00:44.817
And I have to say, it's not pretty.

13
00:00:44.817 --> 00:00:47.038
I can't say that I love the syntax for

14
00:00:47.038 --> 00:00:50.757
actually trying to
validate an object either.

15
00:00:50.757 --> 00:00:55.191
You can see that the arguments
to try validate object

16
00:00:55.191 --> 00:00:58.427
are a little fairly convoluted.

17
00:00:58.427 --> 00:01:02.280
You can see that we get our employee
request, we have to create a validation

18
00:01:02.280 --> 00:01:06.099
context for, as I mentioned,
God knows what reason.

19
00:01:06.099 --> 00:01:09.941
I do also believe that our request object
because I believe in you to taskers, and

20
00:01:09.941 --> 00:01:12.999
I believe in one thing doing
something really well.

21
00:01:12.999 --> 00:01:16.519
I wanna separate my request
object from my validation object.

22
00:01:16.519 --> 00:01:20.927
And maybe the big killer of all of this
is the fact that async validation.

23
00:01:20.927 --> 00:01:27.688
So async where you're able to call async
methods, is not built into asp.net core,

24
00:01:27.688 --> 00:01:34.653
which I believe is fairly large oversight
in terms of the validation story.

25
00:01:34.653 --> 00:01:38.370
But luckily, we have an excellent library
called fluent validation that we can use

26
00:01:38.370 --> 00:01:39.629
to handle all of this.

27
00:01:39.629 --> 00:01:41.315
First of all,
we can create our separate validators.

28
00:01:41.315 --> 00:01:42.783
We can separate those objects.

29
00:01:42.783 --> 00:01:44.799
We don't have to have required attributes.

30
00:01:44.799 --> 00:01:48.293
We can simply explicitly define
them inside of a validator,

31
00:01:48.293 --> 00:01:49.739
which is what I often do.

32
00:01:51.179 --> 00:01:53.435
It supports both synchronous and
async validation,

33
00:01:53.435 --> 00:01:56.349
which we'll see a few examples
of later in the course.

34
00:01:56.349 --> 00:01:59.396
And it does provide a really
clean validation API.

35
00:01:59.396 --> 00:02:01.779
And it's truly fluent in
that sense of the word.

36
00:02:01.779 --> 00:02:03.346
It almost reads like English.

37
00:02:03.346 --> 00:02:05.496
Let me show you first things first.

38
00:02:05.496 --> 00:02:10.148
We're gonna go to our project here,
and we are going to go command P,

39
00:02:10.148 --> 00:02:14.179
and we are gonna focus on our NuGet view,
boom.

40
00:02:14.179 --> 00:02:16.316
And I am going to.

41
00:02:18.560 --> 00:02:19.480
&gt;&gt; Spencer Schneidenbach: Yes, ignore all.

42
00:02:19.480 --> 00:02:21.760
I'll stop with the pop ups VS code.

43
00:02:21.760 --> 00:02:24.704
We're gonna type in fluent validation, and

44
00:02:24.704 --> 00:02:27.730
we are going to install
this into our project.

45
00:02:29.150 --> 00:02:31.530
&gt;&gt; Spencer Schneidenbach: Awesome,
looking good so far.

46
00:02:31.530 --> 00:02:39.176
And then we're gonna start by
create employee request validator.

47
00:02:39.176 --> 00:02:43.426
We'll also install this other NuGet, so
I'll hit the plus sign on that one, boom.

48
00:02:43.426 --> 00:02:47.375
So it's fluent validation.dependency
injection extensions,

49
00:02:47.375 --> 00:02:50.236
which we'll see a use of that in a bit.

50
00:02:50.236 --> 00:02:52.878
And so I'm gonna go ahead and
copy and paste this, and

51
00:02:52.878 --> 00:02:55.606
we're gonna change up
a little bit of the code.

52
00:02:55.606 --> 00:02:59.944
First of all, we are going to get
rid of our required attributes.

53
00:02:59.944 --> 00:03:01.795
We're not gonna need
them here very shortly.

54
00:03:02.995 --> 00:03:06.335
And then I'm gonna scroll down,
I'm gonna paste this in, and

55
00:03:06.335 --> 00:03:09.313
I'm gonna create a validator
that first things first.

56
00:03:09.313 --> 00:03:11.548
It inherits from abstract validator.

57
00:03:11.548 --> 00:03:14.392
So I'm gonna hit command,
I import fluent validation, and

58
00:03:14.392 --> 00:03:17.651
I'm gonna give it the generic
argument of create employee request.

59
00:03:17.651 --> 00:03:21.657
That's the object that we are validating.

60
00:03:21.657 --> 00:03:25.125
And I'm gonna say the rule for
first name is that it should not be empty.

61
00:03:26.715 --> 00:03:28.379
That's pretty much the exact same thing.

62
00:03:28.379 --> 00:03:32.035
Empty in this case is defined as
an empty string or a null string.

63
00:03:33.085 --> 00:03:34.415
So that's exactly what we want.

64
00:03:36.505 --> 00:03:40.185
Lastly, we need to register
builder.services.add validators from

65
00:03:40.185 --> 00:03:41.418
assembly containing.

66
00:03:41.418 --> 00:03:49.040
And that is when we installed
the dependency injection extensions.

67
00:03:49.040 --> 00:03:53.999
We added a few tools that we can use to
add these validators to our dependency

68
00:03:53.999 --> 00:03:57.474
injection pipeline,
which we'll go ahead and do.

69
00:03:57.474 --> 00:04:01.842
So we're gonna go down here,
builder.services.

70
00:04:01.842 --> 00:04:06.853
We're going to using fluent validation,
boom,

71
00:04:06.853 --> 00:04:11.277
add validators from assembly containing.

72
00:04:11.277 --> 00:04:15.437
And it's basically, you just give it
a type of the thing that you want to have

73
00:04:15.437 --> 00:04:17.323
this method scan the assembly of.

74
00:04:17.323 --> 00:04:20.309
So we're just gonna say program,
which is pretty typical.

75
00:04:20.309 --> 00:04:24.143
And now it's going to go through
every type inside of program and

76
00:04:24.143 --> 00:04:28.332
figure out if it inherits from abstract
validator, then it will add it

77
00:04:28.332 --> 00:04:32.099
to the dependency injection pipeline for
use by our services.

78
00:04:33.719 --> 00:04:38.025
So we can go down here and
we can in our post

79
00:04:38.025 --> 00:04:43.795
endpoint actually get
a copy of Ivalidator.

80
00:04:43.795 --> 00:04:46.316
So I'm gonna put this on this function.

81
00:04:46.316 --> 00:04:49.751
I'm gonna put these arguments on
a separate line just to make it a little

82
00:04:49.751 --> 00:04:50.275
clearer.

83
00:04:51.395 --> 00:04:55.405
So we're gonna add in another argument
to this lambda that we've created here.

84
00:04:55.405 --> 00:04:59.866
And we are going to say Ivalidator,
which if you look at the signature for

85
00:04:59.866 --> 00:05:01.268
Ivalidator.

86
00:05:01.268 --> 00:05:05.778
That is what the type is registered
as inside of dependency injection.

87
00:05:05.778 --> 00:05:12.598
So we've got Ivalidator and we're going
to say of create employee request.

88
00:05:12.598 --> 00:05:16.583
We're gonna say validate,
pretty good so far.

89
00:05:16.583 --> 00:05:23.978
And then we can refactor our method to
instead of doing all of this crazy stuff,

90
00:05:23.978 --> 00:05:30.043
we're going to just copy and
paste a little bit of simpler code.

91
00:05:31.373 --> 00:05:33.042
We have a.

92
00:05:36.576 --> 00:05:38.845
&gt;&gt; Spencer Schneidenbach:
Validator.validateasync, and we say,

93
00:05:38.845 --> 00:05:43.192
if validation results is valid, then we
would just return the validation problem

94
00:05:43.192 --> 00:05:47.104
and we give it the validation results
that we got back from our validator.

95
00:05:47.104 --> 00:05:51.230
One thing I wanna mention, you obviously
see the squiggly lines here, and

96
00:05:51.230 --> 00:05:55.074
that's because we don't have
this marked as an async method.

97
00:05:55.074 --> 00:05:59.735
So we can mark it as an async task
returning method by simply typing async.

98
00:05:59.735 --> 00:06:03.295
Right up here, that function
modifier before our arguments list.

99
00:06:03.295 --> 00:06:07.019
And then you can see the compiler is very
happy with that because now we have our

100
00:06:07.019 --> 00:06:09.265
async method,
which is exactly what we want.

101
00:06:10.295 --> 00:06:13.729
So let's test, let's run our tests and

102
00:06:13.729 --> 00:06:18.886
make sure that our validator
method is working as we expect.

103
00:06:21.920 --> 00:06:25.803
&gt;&gt; Spencer Schneidenbach: Okay, and
we've got a little bit of a problem here,

104
00:06:25.803 --> 00:06:31.191
which is that our validation format
coming back from validate our fluent

105
00:06:31.191 --> 00:06:37.367
validation endpoint doesn't have the exact
same message as we would expect.

106
00:06:37.367 --> 00:06:42.156
So we can fix our tests
to ensure that that is.

107
00:06:42.156 --> 00:06:43.638
It's failing right here.

108
00:06:43.638 --> 00:06:45.757
So we will just go ahead and
copy these lines.

109
00:06:46.867 --> 00:06:50.982
So the default error messages that you get
back from fluent validation are of course

110
00:06:50.982 --> 00:06:54.557
going to have a slightly different
language than what's in ASP.NET.

111
00:06:54.557 --> 00:06:57.678
There's no worries there cuz we
can simply update our validator.

112
00:06:57.678 --> 00:07:00.076
Our API is still young,
we don't have to worry about that.

113
00:07:01.886 --> 00:07:06.004
So we'll go here, we will paste that in,

114
00:07:06.004 --> 00:07:10.250
go here, rerun our tests,
&gt;&gt; Spencer Schneidenbach: And

115
00:07:10.250 --> 00:07:11.406
you can see that they pass.

116
00:07:12.496 --> 00:07:14.523
So we've added dependency injection,

117
00:07:14.523 --> 00:07:17.987
we've added our validators to our
dependency injection pipeline.

118
00:07:17.987 --> 00:07:21.715
We've injected that into our method so
that our method can use it, so

119
00:07:21.715 --> 00:07:23.533
that it can validate the object.

120
00:07:24.873 --> 00:07:28.808
And we've refactored the tests to make
sure that these messages are what we

121
00:07:28.808 --> 00:07:29.903
expect.

122
00:07:29.903 --> 00:07:30.853
A couple other notes.

123
00:07:30.853 --> 00:07:34.723
I wanna go back to our create
employee request validator here.

124
00:07:34.723 --> 00:07:40.139
So, we say the rule for, and we give it
an expression to select that property,

125
00:07:40.139 --> 00:07:44.786
and then we say, for
that property we want it to not be empty.

126
00:07:44.786 --> 00:07:47.536
We can specify a couple
of other things here.

127
00:07:47.536 --> 00:07:52.603
We can start by saying with message, and

128
00:07:52.603 --> 00:07:58.275
we can give it our own
first name is required.

129
00:07:58.275 --> 00:08:00.976
The error message that is
being sent back to our client.

130
00:08:02.176 --> 00:08:05.882
The fluent part of fluent validation
is kind of this chain method that,

131
00:08:05.882 --> 00:08:08.244
as I mentioned,
kind of reads like English.

132
00:08:08.244 --> 00:08:12.537
These are typically referred to as fluent
APIs, and they're just nice to use

133
00:08:12.537 --> 00:08:16.246
because they feel very natural,
and they chain upon one another.

134
00:08:17.256 --> 00:08:18.443
So first name is required.

135
00:08:18.443 --> 00:08:19.484
We would go back and

136
00:08:19.484 --> 00:08:24.414
we would see that our test would fail
because we changed our error message.

137
00:08:24.414 --> 00:08:27.684
So we'll run our tests and
you can see our test now fails.

138
00:08:27.684 --> 00:08:29.507
But if we go back here.

139
00:08:32.502 --> 00:08:34.654
&gt;&gt; Spencer Schneidenbach: Say
first name is required.

140
00:08:34.654 --> 00:08:37.280
If we wanted to specify
a custom error message and

141
00:08:37.280 --> 00:08:39.850
you can see that now our
endpoint happily says.

142
00:08:39.850 --> 00:08:44.241
And happily sends back the correct message
and that our test verifies that that's

143
00:08:44.241 --> 00:08:48.325
the error message that we're getting back,
which is exactly what we want.

144
00:08:50.305 --> 00:08:53.337
So, you'll notice that in the method

145
00:08:53.337 --> 00:08:57.044
inside of the validator
that we defined here.

146
00:08:57.044 --> 00:09:02.593
We defined a validator and
you don't see really any async stuff.

147
00:09:02.593 --> 00:09:06.488
And so why do we call async or
validate async?

148
00:09:06.488 --> 00:09:10.634
Well, it's because of the nature of real
world business programs often require that

149
00:09:10.634 --> 00:09:14.550
you might have to make some asynchronous
call in order to validate that the object

150
00:09:14.550 --> 00:09:15.668
is as you expect.

151
00:09:15.668 --> 00:09:19.281
For instance, you might call out to
a database to make sure that the object is

152
00:09:19.281 --> 00:09:22.627
in a specific state before you're
able to allow allowed to update it.

153
00:09:24.547 --> 00:09:27.686
So say, for example,
that we wanted to verify

154
00:09:27.686 --> 00:09:32.528
that when we create an employee with
a certain social security number.

155
00:09:32.528 --> 00:09:36.513
We wanna make sure that not only can the
social security number not be empty, but

156
00:09:36.513 --> 00:09:39.443
it must be created and
it must be unique within the system.

157
00:09:40.593 --> 00:09:45.111
We can actually refactor assuming that we
had some kind of method on our repository

158
00:09:45.111 --> 00:09:47.546
to get employee by social security number.

159
00:09:47.546 --> 00:09:52.141
We could actually create extend
our validator to actually look

160
00:09:52.141 --> 00:09:56.734
inside of our repository if it's
an asynchronous method which

161
00:09:56.734 --> 00:10:00.217
most repositories
are gonna be asynchronous.

162
00:10:00.217 --> 00:10:03.135
I did the synchronous versions just for
simplicity sake.

163
00:10:04.625 --> 00:10:09.297
And call this async task in order to make
sure that the employee that we're creating

164
00:10:09.297 --> 00:10:12.765
is really unique by
social security number.

165
00:10:12.765 --> 00:10:16.048
And this is really important because this
happens all the time in the real world.

166
00:10:16.048 --> 00:10:18.689
And this is, again,
not something that you can do,

167
00:10:18.689 --> 00:10:22.004
at least in the built-in validation
stuff at the ASP.NET Core.

168
00:10:23.004 --> 00:10:25.131
So anyways, this won't compile.

169
00:10:25.131 --> 00:10:28.866
I'm just providing it as a sample.

170
00:10:28.866 --> 00:10:30.207
So if you copy and paste it in,

171
00:10:30.207 --> 00:10:34.024
it's not gonna find the Git
employee by social security number.

172
00:10:34.024 --> 00:10:38.834
I do wanna call out one other thing, which
is that you can use fluent validation to

173
00:10:38.834 --> 00:10:43.008
create some pretty complex validators,
but in a kind of a very neat and

174
00:10:43.008 --> 00:10:44.030
organized way.

175
00:10:44.030 --> 00:10:48.192
You'll notice that right after I define
my rule for social security number,

176
00:10:48.192 --> 00:10:50.382
I have this thing called a cascade rule.

177
00:10:50.382 --> 00:10:54.609
And it basically says, if one validator
fails, because for this property,

178
00:10:54.609 --> 00:10:58.783
we're actually validating that it's
not empty and that it must be unique.

179
00:10:58.783 --> 00:11:03.293
We actually say that we want to
stop execution of this if the first

180
00:11:03.293 --> 00:11:04.909
validator fails.

181
00:11:04.909 --> 00:11:09.559
The fluent validation's built-in
behavior is to validate everything.

182
00:11:09.559 --> 00:11:11.643
So this will allow it to short circuit and

183
00:11:11.643 --> 00:11:15.564
stop if the social security number is
empty, then of course we don't need to

184
00:11:15.564 --> 00:11:19.704
check our database to see if it's unique
because we don't have one specified.

185
00:11:19.704 --> 00:11:22.852
A couple of other cool
features that it has.

186
00:11:22.852 --> 00:11:28.732
Is that because it's purpose built for
validation and it is incredibly powerful,

187
00:11:28.732 --> 00:11:33.278
fluent validator does allow you
to do some fairly unique stuff.

188
00:11:33.278 --> 00:11:36.984
So we demonstrated that
this social security

189
00:11:36.984 --> 00:11:41.826
number will stop after it
determines that it's empty.

190
00:11:41.826 --> 00:11:46.515
But what if you wanna validate based
on some kind of value that's coming in?

191
00:11:46.515 --> 00:11:51.097
Maybe you don't need to validate
address to city, state zip,

192
00:11:51.097 --> 00:11:54.286
unless address one is not null.

193
00:11:54.286 --> 00:11:59.214
Well, you can say that for your rule
that you can specify that if address

194
00:11:59.214 --> 00:12:03.336
one is not null, then we wanna
go ahead and run these rules.

195
00:12:03.336 --> 00:12:05.723
But if they haven't created
the employee with an address,

196
00:12:05.723 --> 00:12:07.618
then we don't really care.

197
00:12:07.618 --> 00:12:10.855
So you can create all kinds of unique
behaviors with fluent validation that make

198
00:12:10.855 --> 00:12:11.977
it really powerful to use.

199
00:12:11.977 --> 00:12:16.751
And it is my validator,
this is the framework that I use for

200
00:12:16.751 --> 00:12:21.633
validation period in all of
my ASP.NET Core API projects.

