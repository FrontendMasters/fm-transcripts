WEBVTT

1
00:00:00.080 --> 00:00:01.853
&gt;&gt; Spencer Schneidenbach: Now
that we've talked about HTTP,

2
00:00:01.853 --> 00:00:04.520
let's get into how that
bridges into ASP.NET Core.

3
00:00:04.520 --> 00:00:10.569
So ASP.NET Core is a framework built to
respond to those HTTP requests, right?

4
00:00:10.569 --> 00:00:14.514
And it has a lot of tooling to kind of
make your life as a developer easier,

5
00:00:14.514 --> 00:00:18.285
especially if you're programming
against a database of some kind.

6
00:00:18.285 --> 00:00:23.274
So as I mentioned, you're one
command from creating a new ASP.NET

7
00:00:23.274 --> 00:00:26.962
web Core project,
which we'll do here shortly.

8
00:00:26.962 --> 00:00:29.008
This is what the program file looks like.

9
00:00:29.008 --> 00:00:31.694
Let's actually do that real quick and
talk about what we see.

10
00:00:31.694 --> 00:00:36.167
So I'm gonna actually run this,
say ls, see where we are.

11
00:00:36.167 --> 00:00:39.487
I will go to Repos, keep it all contained.

12
00:00:39.487 --> 00:00:43.601
And I will create My .NET new webapi,
MyWebApp.

13
00:00:43.601 --> 00:00:46.185
Let's go ahead and go through
the project structure real quick.

14
00:00:46.185 --> 00:00:49.542
So I'm gonna open this up
in Visual Studio Code.

15
00:00:49.542 --> 00:00:54.599
I'm gonna go to Open Folder,
Repos, and what is this one?

16
00:00:54.599 --> 00:00:56.157
MyWebApp, perfect.

17
00:00:56.157 --> 00:01:00.033
Boom, there it is, okay?

18
00:01:00.033 --> 00:01:02.333
Wanna talk through a couple of
things that we're seeing here.

19
00:01:02.333 --> 00:01:09.480
First of all, you get the typical
folder view of Visual Studio Code.

20
00:01:09.480 --> 00:01:13.724
The C# dev kit extension also adds
this little solution explorer,

21
00:01:13.724 --> 00:01:16.114
which is something that I use as well.

22
00:01:16.114 --> 00:01:19.725
And that will tell you basically,
here's the project structure,

23
00:01:19.725 --> 00:01:23.541
here's the solution, and
here's all the projects in that solution.

24
00:01:23.541 --> 00:01:28.488
So you can see up here that
when you create the application

25
00:01:28.488 --> 00:01:30.871
that you get a csproj file.

26
00:01:30.871 --> 00:01:35.631
And the csproj file is basically kind
of the group of all of the files

27
00:01:35.631 --> 00:01:38.104
that are relevant to this web app.

28
00:01:38.104 --> 00:01:42.280
It comes with a few installed like
Swashbuckle, which we will talk about.

29
00:01:42.280 --> 00:01:45.430
That defines the target framework,
which is .NET 8,

30
00:01:45.430 --> 00:01:48.388
which is the latest
long-term support framework.

31
00:01:48.388 --> 00:01:52.793
It has nullable&gt;enabled,
which we'll get to here shortly,

32
00:01:52.793 --> 00:01:57.374
and it has ImplicitUsings,
which we won't necessarily cover.

33
00:01:57.374 --> 00:02:03.003
These are the NuGet Packages, so
NuGet being the package manager for

34
00:02:03.003 --> 00:02:08.159
.NET, these are the ones that
are installed in the template.

35
00:02:08.159 --> 00:02:10.668
Let's take a look at the Program.cs file.

36
00:02:10.668 --> 00:02:17.983
So there's a little bit of just general
stuff that they think is useful.

37
00:02:17.983 --> 00:02:21.689
When you run this application,
it'll actually open a browser window and

38
00:02:21.689 --> 00:02:24.856
it'll actually show you swagger,
and will allow you to see and

39
00:02:24.856 --> 00:02:26.845
browse the APIs that you have defined.

40
00:02:26.845 --> 00:02:29.210
Down here we see this MapGet right here,

41
00:02:29.210 --> 00:02:32.488
which is the give request that
they give you by default.

42
00:02:32.488 --> 00:02:36.264
So they're telling you here's what
a giver request would look like,

43
00:02:36.264 --> 00:02:37.549
it's a very basic API.

44
00:02:37.549 --> 00:02:40.803
And then this is the part
where actually runs the API.

45
00:02:40.803 --> 00:02:44.300
Let's go ahead and run it real quick,
kind of see what we get.

46
00:02:49.236 --> 00:02:52.119
&gt;&gt; Spencer Schneidenbach: Okay, so you
can see that a nice little UI comes up,

47
00:02:52.119 --> 00:02:56.159
nice little Swagger UI to tell you,
here's all your API definitions.

48
00:02:56.159 --> 00:03:00.607
In this case, we only have one,
which is the weatherforecast, and

49
00:03:00.607 --> 00:03:03.428
we can if we wanted to, execute this here.

50
00:03:03.428 --> 00:03:07.166
We could also execute it in Postman,
which is what I'm gonna do.

51
00:03:07.166 --> 00:03:08.931
So I'm gonna copy this host.

52
00:03:08.931 --> 00:03:12.736
I'm gonna switch over to Postman,
continue without an account.

53
00:03:12.736 --> 00:03:14.800
Nice try Postman, not doing it.

54
00:03:14.800 --> 00:03:17.939
Weatherforecast.

55
00:03:17.939 --> 00:03:22.316
And you can see down here that our API
has responded with a little bit of data.

56
00:03:25.147 --> 00:03:26.254
&gt;&gt; Spencer Schneidenbach: It's all JSON.

57
00:03:26.254 --> 00:03:28.688
It's all JSON data just of random weather.

58
00:03:28.688 --> 00:03:33.701
And if you keep sending it, it just
basically sends you back random data.

59
00:03:33.701 --> 00:03:38.838
So I do wanna show a little
bit of something else.

60
00:03:38.838 --> 00:03:44.100
There's kind of two major
sections to the program file.

61
00:03:44.100 --> 00:03:47.426
There's the builder part where
the app is being actually kind of

62
00:03:47.426 --> 00:03:48.664
configured and built.

63
00:03:48.664 --> 00:03:50.525
So this is where you register
all your services and

64
00:03:50.525 --> 00:03:52.045
your dependency injection container.

65
00:03:52.045 --> 00:03:55.583
These are all the things that
are available for the application to use.

66
00:03:55.583 --> 00:03:59.826
And we'll get into that a little
more detail as we go forward.

67
00:03:59.826 --> 00:04:03.291
And then from there,
after your app is actually built,

68
00:04:03.291 --> 00:04:06.104
you'll see that you have
these calls to Use.

69
00:04:06.104 --> 00:04:07.942
What is Use?

70
00:04:07.942 --> 00:04:11.800
So Use is basically telling
something inside of ASP.NET to

71
00:04:11.800 --> 00:04:14.123
say there's middleware, right?

72
00:04:14.123 --> 00:04:16.504
And so those middleware
are basically just building blocks.

73
00:04:16.504 --> 00:04:21.659
So, think of it like a pipeline,
water flows through a pipe.

74
00:04:21.659 --> 00:04:24.956
Our HTTP request is actually
flowing through a pipe as well.

75
00:04:24.956 --> 00:04:27.975
And you can think of middleware
as sections of that pipe.

76
00:04:27.975 --> 00:04:30.968
So for instance, it says if this
environment is development,

77
00:04:30.968 --> 00:04:32.718
which we're running it locally, so

78
00:04:32.718 --> 00:04:36.115
it's properly saying that this is
indeed a development environment.

79
00:04:36.115 --> 00:04:41.701
So it says, hey, I want you to add Swagger
and I want you to add the Swagger UI

80
00:04:41.701 --> 00:04:46.251
to the middleware pipeline so
that way it can be accessible.

81
00:04:46.251 --> 00:04:50.258
Order really matters in middleware,
which we will demonstrate here shortly.

82
00:04:50.258 --> 00:04:56.090
This is a middleware that says redirect
to HTTPS if you should so choose.

83
00:04:56.090 --> 00:05:00.476
And then this is where we actually add our
get endpoint to our middleware call or

84
00:05:00.476 --> 00:05:02.537
middleware pipeline to say, okay,

85
00:05:02.537 --> 00:05:05.873
I want you to be able to handle
requests that look like this.

86
00:05:05.873 --> 00:05:09.491
In this case, we wanna be able to handle
get requests where the resource that

87
00:05:09.491 --> 00:05:11.596
they're requesting is weatherforecast.

88
00:05:11.596 --> 00:05:14.637
And then this is actually where we
actually go in and run the app.

89
00:05:14.637 --> 00:05:16.601
To kind of introduce a problem and

90
00:05:16.601 --> 00:05:21.090
to show you that middleware is always
in control, we're gonna go here, and

91
00:05:21.090 --> 00:05:26.971
we are gonna scroll down to our,
&gt;&gt; Spencer Schneidenbach: Code there,

92
00:05:26.971 --> 00:05:29.063
and we're gonna paste this in.

93
00:05:29.063 --> 00:05:32.618
So middleware has a property
where it doesn't have to

94
00:05:32.618 --> 00:05:34.679
execute the next middleware.

95
00:05:34.679 --> 00:05:38.368
If it thinks that it can handle a request,
it's gonna handle that request and

96
00:05:38.368 --> 00:05:39.178
simply return.

97
00:05:39.178 --> 00:05:43.326
So we're actually gonna put at
the top of our middleware pipeline,

98
00:05:43.326 --> 00:05:48.594
we're actually gonna write something to
the client, which we'll do here quickly.

99
00:05:48.594 --> 00:05:52.372
And you'll see that now
everything else is skipped.

100
00:05:52.372 --> 00:05:53.054
And what's that doing?

101
00:05:53.054 --> 00:05:54.246
What does that mean?

102
00:05:54.246 --> 00:05:57.174
Well, first of all,
we're actually adding in some headers.

103
00:05:57.174 --> 00:06:00.269
We're appending some
headers to our request.

104
00:06:00.269 --> 00:06:03.802
And then we are writing this Response,
Welcome to Ahoy,

105
00:06:03.802 --> 00:06:07.936
and we're not going to the next
phase of the middleware pipeline.

106
00:06:07.936 --> 00:06:12.076
And the reason that we're not doing
that is we've now been instructed our

107
00:06:12.076 --> 00:06:13.495
middleware to execute.

108
00:06:13.495 --> 00:06:14.709
So look at this thing right here.

109
00:06:14.709 --> 00:06:18.359
So this app.Use has a specific signature.

110
00:06:18.359 --> 00:06:22.842
It has an HTTP context, so this is where
you could get your request, your response.

111
00:06:22.842 --> 00:06:26.406
You can write directly to the response,
you can read request headers, you can

112
00:06:26.406 --> 00:06:30.249
understand the user context for the person
who's actually asking for the request.

113
00:06:30.249 --> 00:06:32.926
And then you see this thing
called a RequestDelegate.

114
00:06:32.926 --> 00:06:36.766
So this request delegate is actually
a pointer to the next phase

115
00:06:36.766 --> 00:06:38.296
in the middleware pipe.

116
00:06:38.296 --> 00:06:45.596
So if we shortcut all of this to say,
await next.

117
00:06:45.596 --> 00:06:49.877
See, pass it the context.

118
00:06:49.877 --> 00:06:52.822
Cool thing about middleware, you don't
even have to pass it the HttpContext.

119
00:06:52.822 --> 00:06:54.183
You can fool the next middleware.

120
00:06:54.183 --> 00:06:57.935
Give it a completely different
HttpContext if you want,

121
00:06:57.935 --> 00:07:00.601
not something I do, but it is possible.

122
00:07:00.601 --> 00:07:05.446
Now we've instructed this middleware
instead of actually handling this request,

123
00:07:05.446 --> 00:07:08.390
actually just go to the next
phase in the pipeline.

124
00:07:08.390 --> 00:07:10.625
And now we get what we expect.

125
00:07:10.625 --> 00:07:15.255
This is telling this next call is now
telling let's go down to this next

126
00:07:15.255 --> 00:07:19.423
middleware, in this case,
we've defined it as UseSwagger.

127
00:07:19.423 --> 00:07:21.595
A little bit about HttpContext.

128
00:07:21.595 --> 00:07:26.187
HttpContext has quite a few
helpful properties that are really

129
00:07:26.187 --> 00:07:28.186
important to understand.

130
00:07:28.186 --> 00:07:30.028
Request is, of course,
the incoming request.

131
00:07:30.028 --> 00:07:33.946
It'll tell you, like I said,
the request headers,

132
00:07:33.946 --> 00:07:37.438
the content of the request,
you can read them.

133
00:07:37.438 --> 00:07:40.832
A lot of times we're kind of
handling it in a raw sense, but

134
00:07:40.832 --> 00:07:45.545
once we get further down into ASP.NET
Core, we'll see how it can automatically

135
00:07:45.545 --> 00:07:49.729
handle some of parts of this request and
make it very convenient for us.

136
00:07:49.729 --> 00:07:54.907
We have the response object here where we
can write to the response if we so choose.

137
00:07:54.907 --> 00:07:57.474
We have an items dictionary
where we can say

138
00:07:57.474 --> 00:08:02.396
middleware might interpret a part of the
request and say, hey, I think that other

139
00:08:02.396 --> 00:08:06.626
middleware down the pipe might need
this item to continue executing.

140
00:08:06.626 --> 00:08:09.620
So you can add items and
remove items as necessary,

141
00:08:09.620 --> 00:08:12.205
which we'll show a brief example of later.

142
00:08:12.205 --> 00:08:13.817
We can see the user that's coming in.

143
00:08:13.817 --> 00:08:19.292
So if we go down here,
you can see context.User.Identity

144
00:08:19.292 --> 00:08:26.746
to actually get the username of the person
that's actually making the request.

145
00:08:26.746 --> 00:08:31.827
And then there's features of
request which you can think of them

146
00:08:31.827 --> 00:08:36.626
as tiny little middleware,
but they're really more like,

147
00:08:36.626 --> 00:08:41.708
I wanna handle a request in
a particular way, or I wanna have this

148
00:08:41.708 --> 00:08:47.570
particular behavior that executes as
part of responding to the request.

149
00:08:47.570 --> 00:08:51.752
So now that we've talked about middleware,
and

150
00:08:51.752 --> 00:08:56.240
kind of talked about
the importance of middleware in

151
00:08:56.240 --> 00:09:01.238
the ASP.NET Core execution pipeline,
continue down and

152
00:09:01.238 --> 00:09:06.542
see that as long as we have given
the okay back to the middleware

153
00:09:06.542 --> 00:09:11.957
to actually execute the next thing
that it will actually do so.

154
00:09:11.957 --> 00:09:14.635
And it'll continue down this pipe until
it finds something that it can execute.

155
00:09:14.635 --> 00:09:18.657
So, if we go here and put a breakpoint,
I'm gonna go ahead and do that.

156
00:09:21.700 --> 00:09:24.088
&gt;&gt; Spencer Schneidenbach: And you'll
see that this middleware only gets hit,

157
00:09:24.088 --> 00:09:24.956
I'm refreshing,

158
00:09:24.956 --> 00:09:28.764
this middleware will only get hit if it's
a request that it can think it can handle.

159
00:09:28.764 --> 00:09:32.951
So if we have weatherforecasts,
we're not gonna actually get anything.

160
00:09:32.951 --> 00:09:34.726
We're actually gonna get a 404.

161
00:09:34.726 --> 00:09:38.727
The server's gonna say no middleware was
actually able to handle this request.

162
00:09:38.727 --> 00:09:42.100
But if we go to weatherforecasts,
you'll see that once we hit it,

163
00:09:42.100 --> 00:09:46.201
we'll actually hit that break point,
and actually you'll see that this says,

164
00:09:46.201 --> 00:09:47.910
yes, I can handle this request.

