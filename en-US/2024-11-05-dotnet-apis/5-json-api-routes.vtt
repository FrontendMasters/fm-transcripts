WEBVTT

1
00:00:00.150 --> 00:00:01.565
&gt;&gt; Spencer Schneidenbach: We need
to keep going, build out this API.

2
00:00:01.565 --> 00:00:06.640
So we're gonna start with the most
basic possible in-memory database.

3
00:00:06.640 --> 00:00:09.356
We're gonna go back and
reach back to our list.

4
00:00:09.356 --> 00:00:12.875
So this is definitely, we will be
taking this application as we go and

5
00:00:12.875 --> 00:00:15.090
refactoring it to use something real.

6
00:00:15.090 --> 00:00:18.462
This is not something that I would
write for a production app, but

7
00:00:18.462 --> 00:00:20.154
we wanna take this one step.

8
00:00:20.154 --> 00:00:24.419
We're gonna take this and just show you
the API as it should be built for now, and

9
00:00:24.419 --> 00:00:27.404
just kind of forget
about the data storage.

10
00:00:27.404 --> 00:00:30.374
So I'm gonna say, new list of employee.

11
00:00:30.374 --> 00:00:31.994
Boom, okay.

12
00:00:31.994 --> 00:00:35.249
So this is gonna be our data store for
all of our employees.

13
00:00:35.249 --> 00:00:38.324
We'll go ahead and
hard code in a couple of employees.

14
00:00:38.324 --> 00:00:42.683
Let me go down here, just copy paste
these in, use array initializer syntax,

15
00:00:42.683 --> 00:00:47.639
just go there with little squigglies, or
actually, we'll just call employees.add,

16
00:00:47.639 --> 00:00:49.046
which is what this does.

17
00:00:49.046 --> 00:00:52.535
It will tell you, collection
initialization can be simplified and

18
00:00:52.535 --> 00:00:54.504
give you that nice little light bulb.

19
00:00:54.504 --> 00:00:57.563
So we'll go ahead and do that and
make it look all pretty.

20
00:00:57.563 --> 00:01:01.408
All right, now let's finally write
our first employee end point.

21
00:01:01.408 --> 00:01:06.614
So I'm gonna say app,
&gt;&gt; Spencer Schneidenbach: Dot MapGet,

22
00:01:06.614 --> 00:01:09.986
and we're gonna say /employees.

23
00:01:09.986 --> 00:01:13.082
Now, I mentioned that, we could use
request delegate or we could use delegate.

24
00:01:13.082 --> 00:01:14.618
In this case,
we're just gonna use delegate.

25
00:01:14.618 --> 00:01:16.579
And like I said,
we're gonna use delegate pretty much for

26
00:01:16.579 --> 00:01:17.628
the remainder of this course.

27
00:01:17.628 --> 00:01:19.828
So, it can be any old function.

28
00:01:19.828 --> 00:01:24.573
It could even be a function that doesn't
return anything if you so choose.

29
00:01:24.573 --> 00:01:26.257
But in this case,
we are gonna return something,

30
00:01:26.257 --> 00:01:27.953
which is we're gonna
return our employees list.

31
00:01:29.773 --> 00:01:32.138
Now, this is something that we can do, and

32
00:01:32.138 --> 00:01:37.152
if we play this application,
&gt;&gt; Spencer Schneidenbach: And run it,

33
00:01:37.152 --> 00:01:42.809
go back here, 5230, and
then we're gonna say employees,

34
00:01:42.809 --> 00:01:47.865
and you're gonna see that,
yeah, we get back our data.

35
00:01:49.075 --> 00:01:54.139
But this is one of those spicy
tech moments, which is that,

36
00:01:54.139 --> 00:01:59.515
you can choose to return just
the employee list as it is.

37
00:01:59.515 --> 00:02:01.417
But in pretty much every case,

38
00:02:01.417 --> 00:02:06.329
I'm gonna choose to just return it as the
status code that it was intended to be.

39
00:02:06.329 --> 00:02:09.404
I never return anything that isn't
tied directly to an HTTP status code.

40
00:02:09.404 --> 00:02:13.789
And the way that you get those status
codes is you can go and cut that, and

41
00:02:13.789 --> 00:02:15.264
say, results.okay.

42
00:02:17.614 --> 00:02:22.351
I do this for explicitness, I do this
because I build a lot of APIs, and I want

43
00:02:22.351 --> 00:02:27.178
to be very explicit about the status
codes that I'm returning to the client.

44
00:02:29.718 --> 00:02:31.620
We'll also get a single employee endpoint.

45
00:02:31.620 --> 00:02:35.329
So, if we go down here, paste that in, and

46
00:02:35.329 --> 00:02:39.671
you can see that we are calling single or
default.

47
00:02:39.671 --> 00:02:42.468
So, let me break this down a little bit,
calling single or

48
00:02:42.468 --> 00:02:44.190
default to get that single person.

49
00:02:44.190 --> 00:02:46.889
But wait, how does it know what ID it is?

50
00:02:46.889 --> 00:02:49.129
I mean,
we're just passing it a function, right?

51
00:02:49.129 --> 00:02:52.139
Well, we can define what's
called a route parameter.

52
00:02:52.139 --> 00:02:55.219
And inside of our route here,
we can say, hey,

53
00:02:55.219 --> 00:02:59.224
you can expect that you will get
an ID as part of this endpoint.

54
00:02:59.224 --> 00:03:03.310
And after you execute that,
which we'll show you in a second,

55
00:03:03.310 --> 00:03:07.873
we just run our code to say var employee,
employee single or default.

56
00:03:07.873 --> 00:03:10.134
We're looking for an employee with that.

57
00:03:10.134 --> 00:03:12.868
And we're expecting that
there's either gonna be 1 or

58
00:03:12.868 --> 00:03:15.534
0 of this employee with that unique ID.

59
00:03:15.534 --> 00:03:18.974
If that employee is null,
we're gonna say return results not found.

60
00:03:18.974 --> 00:03:22.915
Otherwise, we're gonna say
return results employee, and

61
00:03:22.915 --> 00:03:27.472
you can see why, if you just tried
to return the employee straight up,

62
00:03:27.472 --> 00:03:32.202
you can do that except for that
the compiler is not gonna complain at you.

63
00:03:32.202 --> 00:03:36.853
Because it actually thinks that there's
a separate function signature that should

64
00:03:36.853 --> 00:03:37.451
be there.

65
00:03:37.451 --> 00:03:39.200
It really wants you to
have one return type.

66
00:03:39.200 --> 00:03:42.456
But you can see how just trying to
return like an employee's object,

67
00:03:42.456 --> 00:03:44.944
that constrains you to only
having one status code.

68
00:03:44.944 --> 00:03:49.465
So, use the results class for sure.

69
00:03:49.465 --> 00:03:52.138
Okay, now that we've got that,

70
00:03:52.138 --> 00:03:57.394
we can also constrain this to say
that this should only be an inch.

71
00:03:57.394 --> 00:04:02.382
So, we can basically say that
the route constraint that we've said

72
00:04:02.382 --> 00:04:06.148
is that anything that
happens after employees/,

73
00:04:06.148 --> 00:04:10.805
it must match as an integer in order for
this endpoint to be hit.

74
00:04:12.995 --> 00:04:16.075
All right, let's take a look.

75
00:04:16.075 --> 00:04:17.485
Let's run these.

76
00:04:17.485 --> 00:04:19.922
We're gonna run, let's see, 5230, perfect.

77
00:04:19.922 --> 00:04:22.142
And then I'm gonna use my employees get,
so

78
00:04:22.142 --> 00:04:25.042
you can see that we're
returning the results.okay.

79
00:04:25.042 --> 00:04:28.325
But we get the exact thing that we expect.

80
00:04:28.325 --> 00:04:34.442
And then I am going to duplicate this and
we're gonna say employee/1.

81
00:04:34.442 --> 00:04:37.916
And you're gonna see that we get back
our John Doe object because that's our

82
00:04:37.916 --> 00:04:38.902
employee with ID1.

83
00:04:40.384 --> 00:04:43.874
We give it something that doesn't exist,
it's gonna give us a 404, not found.

84
00:04:43.874 --> 00:04:46.464
So far, so good,
we got exactly the behavior that we want.

85
00:04:46.464 --> 00:04:50.308
Now, we're gonna add something
to create the employee.

86
00:04:50.308 --> 00:04:53.495
So, we're gonna do a little
bit of cheat code.

87
00:04:53.495 --> 00:04:58.165
Normally in our database system, it would
automatically pick the ID for us, but

88
00:04:58.165 --> 00:05:00.224
we're gonna go ahead and just say,

89
00:05:00.224 --> 00:05:04.845
we're just gonna take the next employee
ID from the list, and just add 1 to it.

90
00:05:04.845 --> 00:05:08.871
We're gonna take the max and add 1, so
this will be 3, and then it'll be 4,

91
00:05:08.871 --> 00:05:09.421
and so on.

92
00:05:09.421 --> 00:05:12.825
And you notice that we did a map post,
we're gonna do some mutation here.

93
00:05:12.825 --> 00:05:15.915
We're gonna actually go in and
post our employee, so

94
00:05:15.915 --> 00:05:20.309
we're gonna use a post request, and
we're gonna give something in the body

95
00:05:20.309 --> 00:05:24.652
of the request to actually get a to
execute, so let's go ahead and do that.

96
00:05:28.095 --> 00:05:30.893
&gt;&gt; Spencer Schneidenbach: Give it that,
and we're gonna go to Postman.

97
00:05:30.893 --> 00:05:36.227
We're gonna duplicate this, kill that, and
we're gonna match our endpoint precisely,

98
00:05:36.227 --> 00:05:38.943
and we're gonna send it and
see what happens.

99
00:05:38.943 --> 00:05:41.170
And then it's gonna come Complain.

100
00:05:41.170 --> 00:05:44.156
It's gonna complain because it says,
implicit body inferred for

101
00:05:44.156 --> 00:05:46.770
parameter employee, but
no body was provided.

102
00:05:46.770 --> 00:05:49.100
Okay, well, give it a body of a request.

103
00:05:49.100 --> 00:05:53.100
So in Postman, we know that we're
Marshall and JSON back and forth.

104
00:05:53.100 --> 00:05:55.494
So we're going to give it a raw body,

105
00:05:55.494 --> 00:06:00.382
and we're gonna select JSON from this
list, so that it knows to send JSON.

106
00:06:00.382 --> 00:06:04.122
And we're just gonna send an empty JSON
object, and again, we'll see what happens.

107
00:06:05.712 --> 00:06:09.254
And then it says, again, failed to
read employee from this, it says,

108
00:06:09.254 --> 00:06:13.036
JSON deserialization for type employee
was missing required properties,

109
00:06:13.036 --> 00:06:15.192
first name and last name.

110
00:06:15.192 --> 00:06:19.908
Well, okay, we can provide those,
absolutely, so let's do that.

111
00:06:19.908 --> 00:06:26.777
We'll say, Mary and
last name, Sue, hit Send.

112
00:06:26.777 --> 00:06:28.335
Okay, and it doesn't complain at us.

113
00:06:28.335 --> 00:06:31.175
Now, it's returning our full object, and

114
00:06:31.175 --> 00:06:36.485
you can see that indeed increment the ID
and go back to our Get Request here.

115
00:06:36.485 --> 00:06:38.835
And you can see, same thing here.

116
00:06:38.835 --> 00:06:39.554
So that's pretty good.

117
00:06:39.554 --> 00:06:44.482
One thing that I will say that I don't
like is the fact that the messaging that

118
00:06:44.482 --> 00:06:47.725
we get back is literally
just a giant stack trace.

119
00:06:47.725 --> 00:06:50.932
So it's literally an exception
that's being thrown in the pipeline.

120
00:06:50.932 --> 00:06:52.917
It is correctly returning bad request, but

121
00:06:52.917 --> 00:06:55.882
it's not really returning
it in a very pretty format.

122
00:06:55.882 --> 00:06:58.342
We'll address that a little bit
later as we go down the course.

123
00:07:00.513 --> 00:07:03.903
So I am gonna do one last
refactor of our application.

124
00:07:03.903 --> 00:07:05.612
I am gonna hit Stop on here.

125
00:07:05.612 --> 00:07:09.630
We don't have to map
everything to this employees.

126
00:07:09.630 --> 00:07:13.143
We don't have to continue to specify
employees every single time.

127
00:07:13.143 --> 00:07:14.423
We can use what's called a route group.

128
00:07:15.423 --> 00:07:17.383
And a route group, essentially,

129
00:07:17.383 --> 00:07:20.704
just allows us to group together
a related series of APIs.

130
00:07:20.704 --> 00:07:22.430
So let me show you what that looks like.

131
00:07:22.430 --> 00:07:25.349
So we're gonna go employee route.

132
00:07:25.349 --> 00:07:32.551
We're gonna say,
app.MapGroup("employees").

133
00:07:32.551 --> 00:07:36.170
And now down here,
as opposed to calling app.MapGet,

134
00:07:36.170 --> 00:07:39.050
we're gonna say employeeRoute.MapGet.

135
00:07:39.050 --> 00:07:45.498
And we are actually going to take this
out entirely, and have empty string,

136
00:07:45.498 --> 00:07:50.550
I prefer string.Empty, and
we can do the same thing here.

137
00:07:50.550 --> 00:07:52.685
Delete that, give it employeeRoute,

138
00:07:52.685 --> 00:07:56.252
and that'll basically group all
these APIs into the same route.

139
00:07:56.252 --> 00:07:59.767
Functionally, equivalent to
what we've done already, but

140
00:07:59.767 --> 00:08:04.375
gives you a little bit more, it's a little
bit neater in terms of organization.

141
00:08:06.045 --> 00:08:07.255
We'll give it string.empty there.

142
00:08:08.365 --> 00:08:16.895
And you can see that, if we go here, all
of our endpoints still work as expected.

143
00:08:16.895 --> 00:08:17.585
Yes, Mark.

144
00:08:17.585 --> 00:08:20.720
&gt;&gt; Mark: Do you have to restart
the server every time you change stuff?

145
00:08:20.720 --> 00:08:22.365
&gt;&gt; Spencer Schneidenbach: Do you
have to restart that? Yes, you do.

146
00:08:22.365 --> 00:08:24.646
And in this case, well,
you can actually turn on hot reload.

147
00:08:24.646 --> 00:08:27.318
I don't find hot reload
works very consistently, and

148
00:08:27.318 --> 00:08:29.359
I'm just used to stopping and starting.

149
00:08:29.359 --> 00:08:34.488
Hot reload has some limitations to it
that don't make it very easy to use.

150
00:08:34.488 --> 00:08:38.152
So, when you're making the code change,
yeah, you stop and restart, but

151
00:08:38.152 --> 00:08:40.911
it's pretty quick,
the feedback loop is pretty quick.

152
00:08:40.911 --> 00:08:45.472
And we're gonna make it quicker here
in the next couple of sections.

153
00:08:45.472 --> 00:08:49.702
So now we have our blueprint for our app.

154
00:08:49.702 --> 00:08:53.762
We've got it nicely organized, so we've
got everything under the employee route.

155
00:08:53.762 --> 00:08:57.802
No duplication of that employee string,
that looks pretty good.

156
00:08:59.182 --> 00:09:03.843
I do wanna call back to this thing here,
as I mentioned, you can in your MapPost or

157
00:09:03.843 --> 00:09:08.882
your MapGet, you can pass it any old
delegate, any old function that you want.

158
00:09:08.882 --> 00:09:12.457
The way that ASP NET Core is going
to interpret these parameters is

159
00:09:12.457 --> 00:09:15.258
going to depend on what
the parameter actually is.

160
00:09:15.258 --> 00:09:18.058
So I do wanna talk a little
bit about parameter binding,

161
00:09:18.058 --> 00:09:20.781
cuz I do think it's really
important to understand.

162
00:09:20.781 --> 00:09:23.944
Because this feels like magic right now,
but

163
00:09:23.944 --> 00:09:28.541
there actually is a kind of a reason for
why this works.

164
00:09:28.541 --> 00:09:34.478
And the reason is, is these parameters
are looked at by the ASP.NET Core,

165
00:09:34.478 --> 00:09:38.719
and then, it will assign what
it thinks is the correct

166
00:09:38.719 --> 00:09:43.165
parameter type based on
the function that you provide.

167
00:09:43.165 --> 00:09:46.015
So, this is the order
in which it does that.

168
00:09:46.015 --> 00:09:48.765
So this is the order in which it
interprets the arguments of that function.

169
00:09:48.765 --> 00:09:51.742
First, it looks at parameters
using bind or from attributes,

170
00:09:51.742 --> 00:09:54.275
which we'll go into in a second.

171
00:09:54.275 --> 00:09:58.355
It has special types like HTP context and
cancellation token that are available.

172
00:09:58.355 --> 00:09:59.171
So you can,

173
00:09:59.171 --> 00:10:04.004
if you wanted to and I have done this
sometimes pass in an HTTP context.

174
00:10:04.004 --> 00:10:09.271
And ASP.NET Core will interpret that and
say, okay, well, we already know

175
00:10:09.271 --> 00:10:14.956
what the HTTP context is, so we're gonna
bind it specifically that special type.

176
00:10:14.956 --> 00:10:17.580
We're gonna bind it
specifically to that thing.

177
00:10:17.580 --> 00:10:20.157
Then it's gonna do route parameters or
query string,

178
00:10:20.157 --> 00:10:24.357
followed by any services that are required
from the dependency injection container.

179
00:10:24.357 --> 00:10:25.517
We'll get into that a little bit later.

180
00:10:25.517 --> 00:10:30.697
And then finally, it will try to
map from the body of the request.

181
00:10:32.817 --> 00:10:36.130
The Bind/From attributes are really
useful, in my opinion, I use them a lot.

182
00:10:36.130 --> 00:10:40.424
And the reason that I use them is because
I like to be very explicit about what my

183
00:10:40.424 --> 00:10:41.279
API is doing.

184
00:10:41.279 --> 00:10:43.625
I don't like magic,
as I mentioned earlier, so

185
00:10:43.625 --> 00:10:47.115
I like to take some of the magic away
by instructing ASP.NET Core, hey,

186
00:10:47.115 --> 00:10:51.149
this is what you should expect
this parameter will be used for.

187
00:10:51.149 --> 00:10:54.518
For instance,
I can tell it explicitly from body and

188
00:10:54.518 --> 00:10:59.955
it will bypass every other little check
that it does and just say, he intends for

189
00:10:59.955 --> 00:11:05.104
this to be from the body of the request,
so I'm going to interpret that as such.

190
00:11:06.534 --> 00:11:09.152
I like to do that because,
again, I like to be explicit,

191
00:11:09.152 --> 00:11:12.934
I like to not rely necessarily
on the magic of the framework.

192
00:11:12.934 --> 00:11:16.068
I don't necessarily do them very often,

193
00:11:16.068 --> 00:11:20.184
I do them as as much as I can
on body type of requests, but

194
00:11:20.184 --> 00:11:25.638
I don't do them as much on routes,
but you absolutely can.

195
00:11:25.638 --> 00:11:28.088
So if you wanted to do from route,
you could do that here.

196
00:11:28.088 --> 00:11:31.472
And then you could say, and then it
explicitly instructs ASP.NET Core, like,

197
00:11:31.472 --> 00:11:34.278
hey, you should expect
this from the route.

198
00:11:34.278 --> 00:11:35.778
There's other ones like FromQuery.

199
00:11:36.818 --> 00:11:41.797
So this would be a value that you could
get out of the query string, okay,

200
00:11:41.797 --> 00:11:44.015
so another binding attribute.

201
00:11:45.385 --> 00:11:47.755
You can specify from services to say, hey,

202
00:11:47.755 --> 00:11:51.805
I expect this thing should come from
the dependency injection container.

203
00:11:52.995 --> 00:11:55.955
So, they're not recommended, strictly
speaking, but they are very useful.

