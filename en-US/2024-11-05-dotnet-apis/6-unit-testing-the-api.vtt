WEBVTT

1
00:00:00.310 --> 00:00:02.860
Let's get into what I consider
to be a very exciting topic.

2
00:00:02.860 --> 00:00:05.675
And I know that a lot of developers
don't get excited about tests, but

3
00:00:05.675 --> 00:00:07.870
I feel like they're really important.

4
00:00:07.870 --> 00:00:11.460
So you notice that already we did
a little bit of refactoring as we went.

5
00:00:11.460 --> 00:00:13.906
The first bit of refactoring
that we did was, okay,

6
00:00:13.906 --> 00:00:17.240
let's group all these APIs together,
put them under route groups.

7
00:00:17.240 --> 00:00:20.184
So we demonstrated route groups and
then I tested them, right,

8
00:00:20.184 --> 00:00:23.073
I fired up the application and
I started hitting the postman and

9
00:00:23.073 --> 00:00:26.656
I started hitting the endpoints to
make sure that they still worked.

10
00:00:26.656 --> 00:00:30.910
But that feedback loop kinda sucks,
especially when you get into API projects

11
00:00:30.910 --> 00:00:35.186
where they get dozens and dozens and
sometimes hundreds of APIs.

12
00:00:35.186 --> 00:00:38.966
So I think tests are the best tool
that we have in our tool belt,

13
00:00:38.966 --> 00:00:40.952
to kind of mitigate that right?

14
00:00:40.952 --> 00:00:43.496
To provide a really
tight feedback loop and

15
00:00:43.496 --> 00:00:46.402
also protect our code
bases from bad refactors.

16
00:00:47.672 --> 00:00:50.522
So we're gonna talk about tests.

17
00:00:50.522 --> 00:00:52.702
The first thing we gotta
do is have a test project.

18
00:00:52.702 --> 00:00:55.502
So all tests have what's
called a test project.

19
00:00:57.042 --> 00:01:01.859
So we're gonna go here and
we're going to go to Solution Explorer,

20
00:01:01.859 --> 00:01:06.856
we're gonna right click and
we're gonna hit, here, right here.

21
00:01:06.856 --> 00:01:11.766
We're gonna hit plus, and you're gonna see
that we can create a new .NET project.

22
00:01:11.766 --> 00:01:15.446
We can also right click and
see new project either is works.

23
00:01:15.446 --> 00:01:16.166
So I'm gonna say that.

24
00:01:16.166 --> 00:01:17.306
So this is our solution file.

25
00:01:17.306 --> 00:01:18.476
This is our SLN file.

26
00:01:18.476 --> 00:01:22.502
This one is our project file,
we're gonna go to our solution.

27
00:01:22.502 --> 00:01:25.542
We're gonna scroll all the way
down to X unit test project.

28
00:01:25.542 --> 00:01:27.402
So we're going to use X unit for this.

29
00:01:27.402 --> 00:01:32.179
There is an MS test, there is an NUnit,
but even Microsoft mostly uses X unit, so

30
00:01:32.179 --> 00:01:34.042
it's the one that I recommend.

31
00:01:35.392 --> 00:01:37.488
But to be honest with you,
if you're writing tests,

32
00:01:37.488 --> 00:01:39.102
that's really all I care about.

33
00:01:39.102 --> 00:01:42.434
So we're gonna call it
TheEmployeeAPI.Tests,

34
00:01:42.434 --> 00:01:45.457
hit, enter, put in the default directory.

35
00:01:45.457 --> 00:01:48.307
That's just fine, and
then create the project.

36
00:01:48.307 --> 00:01:49.627
Yep, go, let's do it.

37
00:01:49.627 --> 00:01:53.917
You can also choose to do this through
the command line interface, but

38
00:01:53.917 --> 00:01:56.037
I'm unapologetically a UI guys.

39
00:01:56.037 --> 00:01:59.885
I'm going to do it through the UI and
the first thing that you're going

40
00:01:59.885 --> 00:02:03.313
to see is that we have
a file that looks like this.

41
00:02:03.313 --> 00:02:07.686
It's a unit test, and it's a very,
very, very tiny blueprint for

42
00:02:07.686 --> 00:02:10.533
a unit test for this project.

43
00:02:10.533 --> 00:02:12.643
Let's break down what we're seeing here.

44
00:02:12.643 --> 00:02:15.455
We see a pretty boring class
with a pretty boring method, but

45
00:02:15.455 --> 00:02:17.473
it has this attribute at the top of it.

46
00:02:17.473 --> 00:02:20.896
It's Fact, and we're basically
establishing this is ground truth.

47
00:02:20.896 --> 00:02:26.176
And this is the thing that X unit will
use to say, okay, this is a test.

48
00:02:26.176 --> 00:02:28.776
This is basically our way
of denoting this as a test.

49
00:02:31.116 --> 00:02:36.437
We go to test here and we do, let's do
open our terminal with Ctrl+Shift+tilde,

50
00:02:36.437 --> 00:02:39.106
make sure we're in the right directory.

51
00:02:39.106 --> 00:02:44.516
I'm going to call dotnet build
&gt;&gt; Spencer Schneidenbach: And

52
00:02:44.516 --> 00:02:50.077
you should see the tests come up
here in this little beaker icon.

53
00:02:50.077 --> 00:02:53.010
You'll see that once we built,
it found our test and

54
00:02:53.010 --> 00:02:54.950
we can run it even inside of the UI.

55
00:02:56.840 --> 00:02:58.582
&gt;&gt; Spencer Schneidenbach: I
also do dotnet test a lot.

56
00:02:58.582 --> 00:03:02.391
You'll see that me do that several times
and you can see that our test passed.

57
00:03:02.391 --> 00:03:04.211
Well, it's 'cause it's not
really doing anything.

58
00:03:04.211 --> 00:03:05.201
It's not throwing an exception.

59
00:03:05.201 --> 00:03:08.701
It's not saying, hey, this test failed,
which is what we expect, which is good.

60
00:03:10.141 --> 00:03:14.797
Next thing we need to do is add
a reference to our project,

61
00:03:14.797 --> 00:03:17.811
our main API from this test project.

62
00:03:17.811 --> 00:03:22.173
So, we're gonna go to add project, we're
gonna right click on the project file for

63
00:03:22.173 --> 00:03:23.165
the test project.

64
00:03:23.165 --> 00:03:25.670
We're gonna click Add Project Reference
and it's gonna say,

65
00:03:25.670 --> 00:03:27.145
what do you wanna add a reference to?

66
00:03:27.145 --> 00:03:28.455
And we're gonna say the employee API.

67
00:03:28.455 --> 00:03:32.029
And now that's gonna give us
access to all the goodies here so

68
00:03:32.029 --> 00:03:34.775
that we can actually write tests for
this API.

69
00:03:37.305 --> 00:03:41.298
Next thing we're going to do is we're
gonna install a NuGet package to this test

70
00:03:41.298 --> 00:03:41.845
project.

71
00:03:41.845 --> 00:03:45.037
And this is going to be probably my
favorite testing NuGet package for

72
00:03:45.037 --> 00:03:46.515
ASP.NET Core.

73
00:03:46.515 --> 00:03:50.831
There are essentially two major
types of tests, unit tests,

74
00:03:50.831 --> 00:03:55.645
which can test individual behaviors,
and then integration tests,

75
00:03:55.645 --> 00:03:59.629
which do their best in a perfect
world to execute tests for

76
00:03:59.629 --> 00:04:03.531
as real as possible
throughout an entire system.

77
00:04:03.531 --> 00:04:07.074
This testing package is really cool
because it's gonna allow us to hit

78
00:04:07.074 --> 00:04:07.621
our APIs.

79
00:04:07.621 --> 00:04:11.541
It's gonna allow us to test our APIs
exactly as our user is gonna use them.

80
00:04:11.541 --> 00:04:16.113
So this actually, under the hood will spin
up a separate web server that the tests

81
00:04:16.113 --> 00:04:20.232
will execute against, which is really
cool, and it happens very fast.

82
00:04:20.232 --> 00:04:24.077
So, we're gonna go here, we're gonna say,

83
00:04:24.077 --> 00:04:28.119
we're gonna open up our
command thing here, and

84
00:04:28.119 --> 00:04:33.512
we're gonna say a little bracket
to give it a little command.

85
00:04:33.512 --> 00:04:35.642
I'd hit command+P for that, by the way.

86
00:04:35.642 --> 00:04:39.342
And we're gonna say focus on
NuGet view cause I recently used it.

87
00:04:40.434 --> 00:04:42.902
And I'm gonna go ahead and
paste the name of this package in here and

88
00:04:42.902 --> 00:04:45.857
you're gonna see that it's the first thing
that comes up right here at the top,

89
00:04:45.857 --> 00:04:48.239
which is what we'd hoped for,
and then we're gonna go ahead and

90
00:04:48.239 --> 00:04:50.274
install that to our test project.

91
00:04:50.274 --> 00:04:53.392
Boom,
&gt;&gt; Spencer Schneidenbach: It's great,

92
00:04:53.392 --> 00:04:54.019
perfect.

93
00:04:56.250 --> 00:04:56.958
&gt;&gt; Spencer Schneidenbach: So now,

94
00:04:56.958 --> 00:05:02.642
we have almost all the pieces that
we need to run this application.

95
00:05:02.642 --> 00:05:06.905
But we do need to make a slight change to
our employee API project because we're

96
00:05:06.905 --> 00:05:10.787
using top level statements and
we don't have a defined program file.

97
00:05:10.787 --> 00:05:13.333
We could, in fact, just go ahead and

98
00:05:13.333 --> 00:05:18.037
convert to a program main style program,
which we can do here.

99
00:05:18.037 --> 00:05:22.708
I don't do that for this course but
if you're using top level statements,

100
00:05:22.708 --> 00:05:27.445
you just have to put in a program
declaration here at the bottom.

101
00:05:27.445 --> 00:05:34.951
So we're just gonna go ahead and
put a public partial class program.

102
00:05:34.951 --> 00:05:38.938
And that's gonna mark our
program class as public.

103
00:05:38.938 --> 00:05:42.735
So that way it can be
accessed do the test project.

104
00:05:42.735 --> 00:05:44.309
Now we can add our test class.

105
00:05:44.309 --> 00:05:46.419
I'm just going to copy paste this in.

106
00:05:46.419 --> 00:05:47.859
Boom, go to our test.

107
00:05:49.239 --> 00:05:53.959
Boom, take out this
whole class definition.

108
00:05:53.959 --> 00:05:55.329
I'm gonna see some squiggly lines.

109
00:05:55.329 --> 00:05:57.119
It's because we need
to import some things.

110
00:05:57.119 --> 00:05:58.699
I don't do anything that I don't.

111
00:05:58.699 --> 00:06:00.173
I just let the tooling do the work for me.

112
00:06:00.173 --> 00:06:04.363
So you can click on that and hit this
little hourglass or the little light bulb.

113
00:06:04.363 --> 00:06:10.973
And then you could say, using
Microsoft.AspNet.Core.Mvc.Testing, pretty easy so far.

114
00:06:10.973 --> 00:06:12.363
So a couple of things about this.

115
00:06:14.073 --> 00:06:17.547
I class fixture is basically
an instruction to X unit to say, hey,

116
00:06:17.547 --> 00:06:19.393
I need you to create a copy of this.

117
00:06:19.393 --> 00:06:23.194
And then I need you to if it's disposable,
which in this case,

118
00:06:23.194 --> 00:06:27.168
web application factory of program
is then destroy it at the end.

119
00:06:27.168 --> 00:06:30.253
So it's just basically a way for
us to tell X unit, hey,

120
00:06:30.253 --> 00:06:32.168
you need to construct this thing.

121
00:06:32.168 --> 00:06:37.318
And then web application factory
itself is the testing abstraction

122
00:06:37.318 --> 00:06:42.196
provided by Microsoft's Testing
framework to basically say,

123
00:06:42.196 --> 00:06:47.627
hey, I wanna be able to run and
start a copy of this program.

124
00:06:47.627 --> 00:06:49.267
So it's very useful.

125
00:06:49.267 --> 00:06:52.707
So let's write our first test.

126
00:06:52.707 --> 00:06:54.187
So we're gonna call it a Fact.

127
00:06:54.187 --> 00:06:58.812
We're gonna say public async, because,
as we covered in the previous course,

128
00:06:58.812 --> 00:07:03.249
we make HTTP requests with a HTTP client,
and we do it in an asynchronous way.

129
00:07:03.249 --> 00:07:09.569
So we're going to say public async task,
get all employees, returns OK result.

130
00:07:11.389 --> 00:07:12.299
Do that.

131
00:07:12.299 --> 00:07:14.629
And then we're going to
create a copy of our client.

132
00:07:14.629 --> 00:07:16.859
So we're going to say var client.

133
00:07:16.859 --> 00:07:21.870
I'll be more explicit just for
illustrative purposes.

134
00:07:21.870 --> 00:07:22.960
So HTTP client.

135
00:07:24.120 --> 00:07:28.590
Client=_factory, and you'll see that we
have a bunch of stuff on this factory.

136
00:07:28.590 --> 00:07:31.940
We have a reference to the server,
which we won't have to use too often.

137
00:07:33.150 --> 00:07:34.720
We have a reference to the services so

138
00:07:34.720 --> 00:07:36.760
we can actually get
services out of this thing.

139
00:07:36.760 --> 00:07:39.140
We can access our dependency
injection pipeline here.

140
00:07:41.131 --> 00:07:45.451
And we have this method here
CreateClient which is exactly what we want.

141
00:07:45.451 --> 00:07:48.671
And you can see that it is indeed
an instance of HTTP client.

142
00:07:48.671 --> 00:07:52.133
So now we have something that can
interact with the server right

143
00:07:52.133 --> 00:07:54.354
in the exact same way that our clients for

144
00:07:54.354 --> 00:07:58.561
this published API would access what
same way we access it through postman.

145
00:08:00.031 --> 00:08:06.694
So we're going to say var
response =await client.GetAsync.

146
00:08:07.694 --> 00:08:10.904
We need to provide it a route.

147
00:08:10.904 --> 00:08:13.340
So we'll say slash employees and

148
00:08:13.340 --> 00:08:18.024
then we want to say response
dot ensure success status code.

149
00:08:18.024 --> 00:08:23.039
This will basically throw an exception
if the status code is anything

150
00:08:23.039 --> 00:08:28.312
outside of a 200 to 299, you could
also use some of the of the assert

151
00:08:28.312 --> 00:08:32.981
class that's provided by X unit
Assert.Fail, for instance or

152
00:08:32.981 --> 00:08:38.330
Assert.True, you can say
response.IsSuccessStatusCode.

153
00:08:38.330 --> 00:08:42.830
Because that's a, it will tell you
if it's a 200 status code or not.

154
00:08:42.830 --> 00:08:43.660
Either is fine.

155
00:08:43.660 --> 00:08:48.812
I try not to use ensure success status
code in other code outside of tests,

156
00:08:48.812 --> 00:08:53.730
simply because I like to handle my
HTTP client responses explicitly.

157
00:08:55.160 --> 00:08:56.600
Now we're gonna actually run our test.

158
00:08:56.600 --> 00:09:00.437
So I'm gonna go Control+Shift+tilde,
and I'm gonna say dotnet test.

159
00:09:02.974 --> 00:09:06.478
&gt;&gt; Spencer Schneidenbach: And you're gonna
see that it actually did pass the test,

160
00:09:06.478 --> 00:09:08.887
which is exactly what we wanted to see.

161
00:09:10.527 --> 00:09:12.947
And just to show you,
this is what it's executing.

162
00:09:12.947 --> 00:09:17.462
We can actually go to our test thing here
and we can actually debug our tests, which

163
00:09:17.462 --> 00:09:22.174
is occasionally important when you wanna
see exactly the behavior that's going on,

164
00:09:22.174 --> 00:09:26.624
and you can see that it executed
it against a real endpoint,

165
00:09:26.624 --> 00:09:30.598
and the status code was indeed
200 which is what we want.

166
00:09:30.598 --> 00:09:31.648
It's perfect.

167
00:09:31.648 --> 00:09:32.748
It's exactly what we wanted.

168
00:09:34.348 --> 00:09:34.998
So that's great.

169
00:09:34.998 --> 00:09:36.798
That's our first test.

170
00:09:36.798 --> 00:09:38.618
So now what do we get from that?

171
00:09:38.618 --> 00:09:43.242
Well, we get a way to test this thing
in a repeatable, really fast way,

172
00:09:43.242 --> 00:09:47.301
without having to go and
do it ourselves every single time.

173
00:09:47.301 --> 00:09:48.881
Gives us some protection
as we're refactoring.

174
00:09:48.881 --> 00:09:50.551
We gonna do a lot of refactoring.

175
00:09:50.551 --> 00:09:54.591
All right, so we've written a test for our
first endpoint, which is really exciting.

176
00:09:54.591 --> 00:09:59.310
So now, let's scroll down and
let's get the fact classes for

177
00:09:59.310 --> 00:10:04.027
the rest of our endpoints
are the fact methods, I should say,

178
00:10:04.027 --> 00:10:09.944
go to our test class and paste them in,
and then we'll talk about them.

179
00:10:09.944 --> 00:10:12.394
First things first,
you're going to see some squiggly lines.

180
00:10:12.394 --> 00:10:13.784
The import statements are right here.

181
00:10:13.784 --> 00:10:17.268
We just need a couple
of additional things,

182
00:10:17.268 --> 00:10:22.918
mainly ones around using methods that
are of available on HTTP client,

183
00:10:22.918 --> 00:10:26.440
the read from JSON method, actually.

184
00:10:26.440 --> 00:10:27.190
So let's talk about this.

185
00:10:27.190 --> 00:10:32.530
So first things first,
I think we overrode our other test.

186
00:10:33.900 --> 00:10:34.650
Let's put that back.

187
00:10:35.880 --> 00:10:37.365
So let's take a look
at the other behaviors

188
00:10:37.365 --> 00:10:39.250
that we're actually testing here.

189
00:10:39.250 --> 00:10:42.744
So you can see that we
are Testing our Get Async, and

190
00:10:42.744 --> 00:10:48.026
we should expect a success status code,
because in our API definition here,

191
00:10:48.026 --> 00:10:52.258
we've started our list of
employees with an ID of one.

192
00:10:52.258 --> 00:10:55.901
So because we have set it up that way,
we set our part as they say,

193
00:10:55.901 --> 00:11:00.424
the system under test and the system
under test comes with two ID employees

194
00:11:00.424 --> 00:11:05.113
with that ID by default, you can see that
we indeed get a success status code back.

195
00:11:08.483 --> 00:11:11.903
Here's a slightly different one for
our post request.

196
00:11:11.903 --> 00:11:16.766
So I'm going to put this on a next line so
that it can kind of all be together, and

197
00:11:16.766 --> 00:11:20.159
you're gonna see that our
client Is created here, but

198
00:11:20.159 --> 00:11:24.733
now we're doing a post request and
we're actually saying to HTTP client,

199
00:11:24.733 --> 00:11:29.600
post this as JSON, this is actually an
extension method to say take this body of

200
00:11:29.600 --> 00:11:34.392
this thing that I've put, convert it to
JSON for me, serialize it to JSON for

201
00:11:34.392 --> 00:11:38.091
me, and
then send it out to the post endpoint.

202
00:11:38.091 --> 00:11:41.563
And you can see that success status
code back, and then down here,

203
00:11:41.563 --> 00:11:45.811
we have our CreateEmployee, but
we're just passing it in a blank object.

204
00:11:45.811 --> 00:11:48.532
And we don't want, as we mentioned,
as we demonstrated earlier,

205
00:11:48.532 --> 00:11:51.781
if we don't have a first and
last name, it's gonna complain at us.

206
00:11:51.781 --> 00:11:56.611
So we do expect that the bad request
status code will be sent back.

207
00:11:56.611 --> 00:11:59.647
And you can see,
we do that with Assert.Equal to say,

208
00:11:59.647 --> 00:12:03.018
we expect the status code on
this response to be bad request.

209
00:12:04.458 --> 00:12:10.284
And you can see, if I build my solution,
actually, I'm just gonna call dotnet test.

210
00:12:14.375 --> 00:12:16.800
&gt;&gt; Spencer Schneidenbach: You're gonna
see that all four of our tests pass,

211
00:12:16.800 --> 00:12:18.373
because that's the behavior.

