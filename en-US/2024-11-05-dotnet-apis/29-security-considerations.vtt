WEBVTT

1
00:00:00.113 --> 00:00:02.754
&gt;&gt; Spencer Schneidenbach: It would be a
mistake not to at least touch on security

2
00:00:02.754 --> 00:00:04.322
and talk about it a little bit.

3
00:00:04.322 --> 00:00:08.954
So I refactored my 4-Z-final project
to add in some security concerns, and

4
00:00:08.954 --> 00:00:12.856
we'll go through and we'll tweak and
we'll test with them.

5
00:00:12.856 --> 00:00:15.831
But I want to first talk
about security at a base.

6
00:00:15.831 --> 00:00:19.778
So you have two major types that
ASP.NET Core is concerned with.

7
00:00:19.778 --> 00:00:24.289
Which is, authentication, making sure
that you have a valid username and

8
00:00:24.289 --> 00:00:28.459
password, and you are who you say you are,
and then authorization.

9
00:00:28.459 --> 00:00:31.786
Just because I can walk into a Walmart
doesn't mean that I can go to

10
00:00:31.786 --> 00:00:33.856
the employees-only section, right?

11
00:00:33.856 --> 00:00:34.573
I'm not authorized.

12
00:00:34.573 --> 00:00:36.442
I'm not an employee at Walmart.

13
00:00:36.442 --> 00:00:38.131
So we're going to talk
through just a few things.

14
00:00:38.131 --> 00:00:41.894
We're going to talk through what
are JSON web tokens or JWTs.

15
00:00:41.894 --> 00:00:46.135
We're gonna talk about the stuff built
into ASP.NET Core that allow you to add

16
00:00:46.135 --> 00:00:46.788
security.

17
00:00:46.788 --> 00:00:50.621
And really you can do it
in a very fine-grained way,

18
00:00:50.621 --> 00:00:54.207
in a very powerful way,
and very simply as well.

19
00:00:54.207 --> 00:00:59.181
We'll talk about common authorization
patterns for ASP.NET Core APIs and

20
00:00:59.181 --> 00:01:01.052
a not good Implementation.

21
00:01:01.052 --> 00:01:03.050
Not good because it is not production.

22
00:01:03.050 --> 00:01:05.716
It's not code that you would
run in production, but for

23
00:01:05.716 --> 00:01:08.736
the purposes of demonstration,
it will get the point across.

24
00:01:08.736 --> 00:01:12.070
JSON web token is a URL
safe means of representing

25
00:01:12.070 --> 00:01:15.333
claims to be transferred
between two parties.

26
00:01:15.333 --> 00:01:20.565
That's a lot of fancy words for saying,
I have a token that has information in it.

27
00:01:20.565 --> 00:01:24.705
And I want to present that to the server
in a way that the server can verify and

28
00:01:24.705 --> 00:01:27.334
not only make sure that
I'm not scamming them,

29
00:01:27.334 --> 00:01:30.445
it includes what's called
a signature verification.

30
00:01:30.445 --> 00:01:32.505
To make sure that I just
didn't make this up.

31
00:01:32.505 --> 00:01:37.135
The server will verify that independently
to make sure that that token is valid.

32
00:01:37.135 --> 00:01:40.398
It also has a payload,
which contains the claim.

33
00:01:40.398 --> 00:01:43.341
So you'll see it in this format.

34
00:01:43.341 --> 00:01:44.673
These are what they look like.

35
00:01:44.673 --> 00:01:49.027
You'll see that the header
is one base 64 string.

36
00:01:49.027 --> 00:01:50.706
You see that there's a dot between it.

37
00:01:50.706 --> 00:01:53.873
It's got the body, and
then it's got the signature as well.

38
00:01:53.873 --> 00:01:57.009
And the fun thing about these
things is that they can be decoded.

39
00:01:57.009 --> 00:02:01.884
So you can use a tool like JWT.IO,
which we are going to go to.

40
00:02:01.884 --> 00:02:06.743
You're gonna see when I paste this code
in, I've got nothing, I paste it in,

41
00:02:06.743 --> 00:02:11.624
and now you can see that we can decode
that data and see what's going on in here.

42
00:02:11.624 --> 00:02:17.084
In this case,
our claims that we're including our sub,

43
00:02:17.084 --> 00:02:22.047
our name, and our IAT
&gt;&gt; Spencer Schneidenbach: Which is

44
00:02:22.047 --> 00:02:24.935
the sub is who the token refers to.

45
00:02:24.935 --> 00:02:30.498
It's typically like a user ID and the name
would be the real name of that person or

46
00:02:30.498 --> 00:02:35.165
whatever name that they have stored
inside of that target system.

47
00:02:35.165 --> 00:02:35.950
And typically,

48
00:02:35.950 --> 00:02:39.100
this is sent in the authorization
header with a bearer prefix.

49
00:02:39.100 --> 00:02:42.790
So if you've ever sent a bearer token
to an API bearer and then the token,

50
00:02:42.790 --> 00:02:45.045
that's how you would authorize yourself.

51
00:02:45.045 --> 00:02:49.041
The system on the back end would verify
it, and then you'd be off to the races.

52
00:02:49.041 --> 00:02:51.635
You'd be able to access whatever
resources they gave you.

53
00:02:51.635 --> 00:02:54.173
This is different than what's
called an opaque token,

54
00:02:54.173 --> 00:02:56.063
which is literally just like a password.

55
00:02:56.063 --> 00:02:59.119
And in that it is just a random string.

56
00:02:59.119 --> 00:03:01.666
And doesn't necessarily give
you access to anything.

57
00:03:01.666 --> 00:03:04.517
It doesn't have any claims
associated with it.

58
00:03:04.517 --> 00:03:08.865
The powerful thing about JWTs and claims
specifically is that you can issue a token

59
00:03:08.865 --> 00:03:12.025
that says, here's all the things
that you have access to.

60
00:03:12.025 --> 00:03:16.524
And now you don't have to do database
calls down the line to actually make

61
00:03:16.524 --> 00:03:20.680
sure that you have access to
the resources that you have access to.

62
00:03:20.680 --> 00:03:21.910
Here's an example of a claim.

63
00:03:21.910 --> 00:03:25.772
A claim is pretty much any key value
pair that starts with the string.

64
00:03:25.772 --> 00:03:28.616
So you can say that I am part
of the engineering department.

65
00:03:28.616 --> 00:03:31.103
I am an administrator.

66
00:03:31.103 --> 00:03:35.530
Typically, a claim will include your
name as as I mentioned, or the subject,

67
00:03:35.530 --> 00:03:37.623
which is, again, usually just ID.

68
00:03:37.623 --> 00:03:41.143
So this is important,
because the sample project uses JWT,

69
00:03:41.143 --> 00:03:43.558
which I will show you here in a second,
but

70
00:03:43.558 --> 00:03:47.439
I do want to point out a few of
the features inside of ASP.NET Core.

71
00:03:47.439 --> 00:03:52.060
So there is an attribute called
authorize that you can use to protect

72
00:03:52.060 --> 00:03:53.610
access to resources.

73
00:03:53.610 --> 00:03:57.883
A naked authorized attribute will simply
say that you must be authenticated before

74
00:03:57.883 --> 00:03:59.601
you can access these resources.

75
00:03:59.601 --> 00:04:03.061
It doesn't have anything to do
with authorization at this point.

76
00:04:03.061 --> 00:04:07.468
However, you can change your authorized
attribute to include things to say,

77
00:04:07.468 --> 00:04:11.005
in order for this person to be
authorized to use this resource,

78
00:04:11.005 --> 00:04:14.768
we want to make sure that they're
part of the administrator role.

79
00:04:14.768 --> 00:04:19.664
A policy allows you to define a really
nuanced way of saying you must have

80
00:04:19.664 --> 00:04:24.490
all of these different permissions
in order to access this resource.

81
00:04:24.490 --> 00:04:27.849
So you can say that
this policy is defined.

82
00:04:27.849 --> 00:04:31.560
We call it
SeniorEngineersFromEngineeringDepartmentOnly.

83
00:04:31.560 --> 00:04:36.415
And this policy requires that this
person have the senior engineer role,

84
00:04:36.415 --> 00:04:40.424
and they must be part of
the engineering department, okay?

85
00:04:40.424 --> 00:04:45.146
You can also require them to be part of
another role, or have another claim, or

86
00:04:45.146 --> 00:04:46.948
have any other set of claims.

87
00:04:46.948 --> 00:04:50.511
You could even authorize it
down to a specific person or

88
00:04:50.511 --> 00:04:52.454
person with a specific name.

89
00:04:52.454 --> 00:04:55.310
I have to say that while I'm
showing these to you and

90
00:04:55.310 --> 00:04:58.170
that they're really important and
interesting,

91
00:04:58.170 --> 00:05:02.506
and authorization is a really cool
subject, it is a really nuanced subject.

92
00:05:02.506 --> 00:05:04.908
There is a lot to authentication.

93
00:05:04.908 --> 00:05:09.653
The rabbit hole goes very deep, and
authorization is almost certainly

94
00:05:09.653 --> 00:05:14.557
going to be dictated by the terms of
tthe person that you're working for,

95
00:05:14.557 --> 00:05:17.580
or whoever you're building the system for.

96
00:05:17.580 --> 00:05:20.714
Permissions is such a complex,
nuanced issue,

97
00:05:20.714 --> 00:05:24.851
especially when you get into big
enterprises like healthcare.

98
00:05:24.851 --> 00:05:27.795
And it really does become
specific to that business and

99
00:05:27.795 --> 00:05:31.066
specific to that industry to
see how they're implemented.

100
00:05:31.066 --> 00:05:34.883
But these are some of the tools that you
can use kind of out of the box in order to

101
00:05:34.883 --> 00:05:37.823
kind of get what you need from
your authorization system.

102
00:05:37.823 --> 00:05:39.900
So I just wanna kinda point out.

103
00:05:39.900 --> 00:05:45.623
A few of the things that I would consider
if I were making an authorization system.

104
00:05:45.623 --> 00:05:49.383
Or if I was adding an authorization
system to an ASP.NET Core API,

105
00:05:49.383 --> 00:05:51.813
these are decisions
that I do have to make.

106
00:05:51.813 --> 00:05:54.315
First things first,
if I'm using a React app, or

107
00:05:54.315 --> 00:05:57.591
if I'm creating a React app and
I want to have my own login scheme,

108
00:05:57.591 --> 00:06:01.307
I'm probably gonna reach for
something called ASP.NET Core Identity.

109
00:06:01.307 --> 00:06:04.303
Again, security could be a course in and
of itself.

110
00:06:04.303 --> 00:06:07.100
You could do an entire
course simply on security.

111
00:06:07.100 --> 00:06:10.172
But there is a product called
ASP.NET Core Identity.

112
00:06:10.172 --> 00:06:12.926
It buttons really well with EF Core, and

113
00:06:12.926 --> 00:06:16.500
it buttons obviously very
well with ASP.NET Core.

114
00:06:16.500 --> 00:06:19.958
And it basically gives you a lot of
the base structures that you would need.

115
00:06:19.958 --> 00:06:21.158
Like a user table or

116
00:06:21.158 --> 00:06:25.584
a role table that you would need to
actually build an identity system.

117
00:06:25.584 --> 00:06:28.374
And you can use that as your
login scheme for your React app.

118
00:06:28.374 --> 00:06:33.732
If you do that, it used to be back in
the day that you would get a bearer

119
00:06:33.732 --> 00:06:38.719
token from the API, and
then you would set it in local storage.

120
00:06:38.719 --> 00:06:43.380
But nowadays it's best practice to say,
just use cookies, just create a cookie,

121
00:06:43.380 --> 00:06:46.443
give an authorization cookie
back to the browser, and

122
00:06:46.443 --> 00:06:49.122
then just use that to
authenticate to your API.

123
00:06:49.122 --> 00:06:52.456
You could also just use if you
have an integration level API, and

124
00:06:52.456 --> 00:06:55.999
you just wanna give somebody an API
key that's very common as well.

125
00:06:55.999 --> 00:07:00.348
If you use OpenAPI at all or using
Twilio or a number of other services,

126
00:07:00.348 --> 00:07:04.938
typically you're just given one key
that gives you access to the system.

127
00:07:04.938 --> 00:07:10.079
And then you just use that key in order
to perform tasks or make API calls.

128
00:07:10.079 --> 00:07:11.373
That's very common as well.

129
00:07:11.373 --> 00:07:15.324
By making an integration level API,
I'm usually going to reach for

130
00:07:15.324 --> 00:07:17.137
some kind of API key solution.

131
00:07:17.137 --> 00:07:19.795
And it could be something if I'm
building on top of an existing system.

132
00:07:19.795 --> 00:07:24.466
It's something that I might just build
on to it and treat my API key as like

133
00:07:24.466 --> 00:07:28.459
a username and password pair or
something along those lines.

134
00:07:28.459 --> 00:07:33.833
So let me walk through just a little
bit in the final app what I have added.

135
00:07:33.833 --> 00:07:41.250
I actually did go through and
add security to this API.

136
00:07:41.250 --> 00:07:44.690
So if we go to the employee controller,

137
00:07:44.690 --> 00:07:50.236
you'll see that I have added
an authorized attribute up here.

138
00:07:50.236 --> 00:07:57.658
And that's because I did some very
rudimentary JWT token creation.

139
00:07:57.658 --> 00:08:02.787
What I mean by rudimentary is that I went
here and I have a security controller.

140
00:08:02.787 --> 00:08:07.178
And you cannot say that I didn't warn
you that you should not use this code.

141
00:08:07.178 --> 00:08:08.822
This code is for demo purposes only.

142
00:08:08.822 --> 00:08:13.202
I needed a quick way to generate a JWT and
that's what I got right here.

143
00:08:13.202 --> 00:08:19.296
Which is to say that I just pass in
a role inside of my GetTokenRequestBody,

144
00:08:19.296 --> 00:08:24.157
and I generate a Java Web token or
JSON web token from there.

145
00:08:24.157 --> 00:08:29.749
And if you dig into the method, you can
see that I just give it a random ID,

146
00:08:29.749 --> 00:08:33.170
I give it the role that
I've been assigned.

147
00:08:33.170 --> 00:08:36.090
And now I can use this along
with my authorized attribute to

148
00:08:36.090 --> 00:08:38.600
actually restrict access
to certain resources.

149
00:08:38.600 --> 00:08:43.064
You might go back and think about
the use case where we only want certain

150
00:08:43.064 --> 00:08:47.543
people to be able to access the social
security number on an employee.

151
00:08:47.543 --> 00:08:49.236
This is a perfect use case for that.

152
00:08:49.236 --> 00:08:51.678
Is to say that only
a person with this claim or

153
00:08:51.678 --> 00:08:54.585
this level of authorization
can actually get that.

154
00:08:54.585 --> 00:08:57.338
And we'll probably protect that
under a separate endpoint.

155
00:08:57.338 --> 00:09:01.345
I also want to note that
inside of my unit tests,

156
00:09:01.345 --> 00:09:04.852
every time I do _factory.CreateClient,

157
00:09:04.852 --> 00:09:10.478
I now do a separate call to get that
JSON token back from the server.

158
00:09:10.478 --> 00:09:12.272
I make a call to do that here, and

159
00:09:12.272 --> 00:09:15.208
then I add it as part of
the DefaultRequestHeaders.

160
00:09:15.208 --> 00:09:18.563
And what will happen is,
you saw the unit tests pass earlier.

161
00:09:18.563 --> 00:09:22.132
If I don't have that,
if I I comment this out,

162
00:09:22.132 --> 00:09:25.428
you'll see that when I run this endpoint,

163
00:09:25.428 --> 00:09:30.299
when I run this thing,
that I will no longer get back anything.

164
00:09:30.299 --> 00:09:32.523
I will get 401 Unauthorized, and

165
00:09:32.523 --> 00:09:37.843
that's because I haven't identified myself
to the server with a valid JSON web token.

166
00:09:37.843 --> 00:09:38.581
So that's security.

167
00:09:38.581 --> 00:09:42.558
Just a very high-level teaser of some
of the features that are inside of

168
00:09:42.558 --> 00:09:43.495
ASP.NET Core.

169
00:09:43.495 --> 00:09:45.866
I will tell you that I use policies a ton.

170
00:09:45.866 --> 00:09:47.217
I do use claims.

171
00:09:47.217 --> 00:09:52.852
I do use roles, although roles are one
of those particular things that will

172
00:09:52.852 --> 00:09:59.038
differ between really depending on the
company or the system that I'm building.

173
00:09:59.038 --> 00:10:00.856
And I certainly use JSON Web Token.

174
00:10:00.856 --> 00:10:03.648
And I also use a lot
of the identity stuff.

175
00:10:03.648 --> 00:10:08.769
I use ASP.NET Core Identity
quite a bit for projects.

176
00:10:08.769 --> 00:10:13.328
So I recommend you check those out and
that's security.

177
00:10:13.328 --> 00:10:14.009
It's a little demo.

178
00:10:14.009 --> 00:10:16.676
So I would highly recommend
you download this project.

179
00:10:16.676 --> 00:10:19.587
If you haven't downloaded the code
samples yet, download them and

180
00:10:19.587 --> 00:10:20.616
then open up 4-Z-final.

181
00:10:20.616 --> 00:10:24.526
And just start playing
with the JSON Web Token,

182
00:10:24.526 --> 00:10:30.508
start playing with the endpoints and
see if you can add custom policies.

183
00:10:30.508 --> 00:10:34.051
And change your bearer token to actually
allow you to get into those endpoints.

