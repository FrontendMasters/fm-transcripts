WEBVTT

1
00:00:00.470 --> 00:00:03.805
&gt;&gt; Spencer Schneidenbach: I wanna talk
about our docs, the docs that we get out

2
00:00:03.805 --> 00:00:09.330
of this, because I am a believer that an
API lives and dies by its documentation.

3
00:00:09.330 --> 00:00:13.950
So that's my way of saying I think
documentation is super important.

4
00:00:13.950 --> 00:00:18.020
So I wanna enhance this because right now,
these docs are fairly anemic.

5
00:00:18.020 --> 00:00:20.002
You can look at our GET Employees,
our POST Employees.

6
00:00:20.002 --> 00:00:24.250
It does have our request body, but
it doesn't have a nice little descriptor.

7
00:00:24.250 --> 00:00:26.035
We can spruce these up a little bit.

8
00:00:26.035 --> 00:00:29.749
It doesn't even tell us what are all
the different success codes.

9
00:00:29.749 --> 00:00:33.877
For example, in our PUT request, in our
POST request, we should be able to say,

10
00:00:33.877 --> 00:00:37.848
you could expect a 400 bad request
back if you give a 400 bad request.

11
00:00:37.848 --> 00:00:40.566
And then describe the shape of
the object that we would expect.

12
00:00:40.566 --> 00:00:45.425
So minimal APIs have
their way of doing it.

13
00:00:45.425 --> 00:00:48.812
What you do is you just
chain off of the map get and

14
00:00:48.812 --> 00:00:53.484
then you start calling more methods
to add more OpenAPI metadata.

15
00:00:53.484 --> 00:00:58.188
We are going to add in some
attributes to basically better

16
00:00:58.188 --> 00:01:01.428
describe to OpenAPI what's going on.

17
00:01:01.428 --> 00:01:04.874
So let's update our endpoints to have
some descriptions and have some tags.

18
00:01:04.874 --> 00:01:09.854
We're gonna start with
the ProducesResponseType attribute.

19
00:01:12.014 --> 00:01:12.834
So let's take a look at that.

20
00:01:14.824 --> 00:01:17.624
Okay, GetAllEmployees.

21
00:01:17.624 --> 00:01:19.261
So we pasted that in.

22
00:01:19.261 --> 00:01:23.586
And you can see that of this,
we should expect to see a 200 okay.

23
00:01:23.586 --> 00:01:27.460
Here's the shape of the object that
you can expect to get back, or

24
00:01:27.460 --> 00:01:30.851
a 500 internal server error
if something went wrong.

25
00:01:30.851 --> 00:01:35.573
On our GetEmployeeById, we could
expect the same, except we should also

26
00:01:35.573 --> 00:01:40.447
expect that we will be able to get back
a 404 if we request an employee ID for

27
00:01:40.447 --> 00:01:42.602
an employee that does not exist.

28
00:01:43.852 --> 00:01:50.536
And in our POST and PUT,
&gt;&gt; Spencer Schneidenbach: We

29
00:01:50.536 --> 00:01:52.357
can do much of the same.

30
00:01:52.357 --> 00:01:55.825
We know that if our POST
request is successful,

31
00:01:55.825 --> 00:02:01.039
that we'll send back a 201 we
created with a GetEmployeeResponse.

32
00:02:01.039 --> 00:02:04.785
And we could also send
back a 400 bad request.

33
00:02:04.785 --> 00:02:09.591
And our PUT request can also have
all of those things plus a 404 not

34
00:02:09.591 --> 00:02:14.461
found in case we don't have
that employee in our system.

35
00:02:14.461 --> 00:02:17.707
So let's take a look at what that does for
our API.

36
00:02:17.707 --> 00:02:21.984
We're gonna hit play, and
we're gonna see now when we scroll down,

37
00:02:21.984 --> 00:02:24.287
we actually get what we expect back.

38
00:02:24.287 --> 00:02:26.860
We get this 201 created.

39
00:02:26.860 --> 00:02:31.493
The media type, okay, text/plain,
I don't exactly expect that.

40
00:02:31.493 --> 00:02:33.665
We'll address that in one second.

41
00:02:33.665 --> 00:02:35.937
This is the good stuff, 400 bad request.

42
00:02:35.937 --> 00:02:39.611
And here's exactly what you can expect
the shape of that object to be.

43
00:02:39.611 --> 00:02:43.079
This is really useful, especially for
developers on the frontend or

44
00:02:43.079 --> 00:02:45.668
developers that are consuming
your API in any way.

45
00:02:45.668 --> 00:02:49.899
It will create the document for you as
long as you give it enough metadata in

46
00:02:49.899 --> 00:02:52.641
order to be able to create
that documentation.

47
00:02:52.641 --> 00:02:54.477
So it'll send back, you know what,

48
00:02:54.477 --> 00:02:57.769
you will give back a possible
validation problem details.

49
00:02:57.769 --> 00:03:00.840
Here's what that looks like, or
a server error, as we expect.

50
00:03:02.350 --> 00:03:04.870
Let's address this media
type thing real quick.

51
00:03:04.870 --> 00:03:06.640
We know that this is a JSON API.

52
00:03:06.640 --> 00:03:09.290
We know that we just wanna
send JSON back and forth.

53
00:03:09.290 --> 00:03:13.344
We can do that by going up
to our base controller, and

54
00:03:13.344 --> 00:03:18.706
we can add a produces, if I could
spell produces right, there we go.

55
00:03:18.706 --> 00:03:20.201
And we can give it a content type.

56
00:03:20.201 --> 00:03:22.776
You can see that content type
is one of the arguments.

57
00:03:22.776 --> 00:03:25.936
And typically,
I just write produces application JSON.

58
00:03:25.936 --> 00:03:27.386
I don't use any of the other arguments.

59
00:03:28.386 --> 00:03:33.347
And when you play that and refresh,
you'll see now that the content type is

60
00:03:33.347 --> 00:03:37.406
indeed application JSON,
which is what you would expect.

61
00:03:37.406 --> 00:03:38.876
So that's already really great.

62
00:03:38.876 --> 00:03:41.326
We've already done actually
quite a bit of it.

63
00:03:41.326 --> 00:03:44.866
With very little work, we've actually
provided a huge amount of rich

64
00:03:44.866 --> 00:03:47.026
documentation, which is really useful.

65
00:03:47.026 --> 00:03:50.857
But we can do even better, and
that's where XML comments come in.

66
00:03:50.857 --> 00:03:55.648
So XML comments are a really neat
language feature that I highly recommend

67
00:03:55.648 --> 00:03:59.442
that if you're defining APIs
that other people will use.

68
00:03:59.442 --> 00:04:04.542
APIs being JSON APIs, or
even just methods and functions,

69
00:04:04.542 --> 00:04:08.526
I highly recommend that
you use XML comments.

70
00:04:08.526 --> 00:04:11.560
So it's a good way to add
documentation to your code.

71
00:04:11.560 --> 00:04:13.139
So here's how you do it.

72
00:04:13.139 --> 00:04:14.643
I'm gonna hit stop.

73
00:04:14.643 --> 00:04:18.617
I'm gonna go to my EmployeesController,
and I'm gonna go to the blank line above

74
00:04:18.617 --> 00:04:21.396
and hit Enter, and
I'm gonna go slash, slash, slash.

75
00:04:21.396 --> 00:04:24.661
And what it's gonna do
is create XML comments.

76
00:04:24.661 --> 00:04:29.801
So you see up here,
there's a little XML bracket where

77
00:04:29.801 --> 00:04:34.493
we can say gets all of
the employees in the system,

78
00:04:34.493 --> 00:04:38.091
returns the employee in a JSON array.

79
00:04:39.921 --> 00:04:43.907
So what you could do is
actually teach OpenAPI how to

80
00:04:43.907 --> 00:04:48.372
interpret these XML comments,
which is really neat.

81
00:04:48.372 --> 00:04:50.332
So let me show you how that works.

82
00:04:50.332 --> 00:04:55.254
First things first, in your csproj file,
we'll go ahead and open that up real

83
00:04:55.254 --> 00:05:00.345
quick, right here, and we're gonna add
in this GenerateDocumentationFile.

84
00:05:00.345 --> 00:05:05.347
And what that's going to instruct
the build system to do is it's going to

85
00:05:05.347 --> 00:05:10.267
instruct it to generate a .xml file
that contains all of the methods and

86
00:05:10.267 --> 00:05:14.290
all of the properties that
we've added XML comments for.

87
00:05:14.290 --> 00:05:17.407
And it's going to put them
inside of that XML file.

88
00:05:17.407 --> 00:05:21.235
And then we can pick that XML file up and
read it.

89
00:05:21.235 --> 00:05:24.070
You are going to start
getting a lot of warnings,

90
00:05:24.070 --> 00:05:27.807
things like this, where you're
saying missing XML comment for

91
00:05:27.807 --> 00:05:31.143
publicly visible or
type member EmployeesController.

92
00:05:31.143 --> 00:05:33.484
And this will prevent build, right?

93
00:05:33.484 --> 00:05:37.526
This will prevent build because
we said treat warnings as errors,

94
00:05:37.526 --> 00:05:40.494
which is mostly a good
thing if you get a warning.

95
00:05:40.494 --> 00:05:42.521
Most of the warnings
actually mean something.

96
00:05:42.521 --> 00:05:45.019
But we can turn those off, and
that's what we're going to do,

97
00:05:45.019 --> 00:05:47.584
because we don't necessarily
need to XML comment everything.

98
00:05:47.584 --> 00:05:50.449
I don't know that it's super valuable
that we add an XML comment to

99
00:05:50.449 --> 00:05:52.927
EmployeesController or
even the constructor.

100
00:05:52.927 --> 00:05:57.504
So we're just going to bypass and ignore
that by adding in this NoWarn directive.

101
00:05:57.504 --> 00:06:01.244
And basically, it's gonna say,
hey, turn off the warnings for

102
00:06:01.244 --> 00:06:02.946
this particular error code.

103
00:06:02.946 --> 00:06:05.914
And you can see that our
problem space in our IDE,

104
00:06:05.914 --> 00:06:10.116
our squiggly lines are gone and
our problems are like, okay, well,

105
00:06:10.116 --> 00:06:13.749
all right, we'll just trust
you know what you're doing.

106
00:06:13.749 --> 00:06:17.658
And then lastly, in our builder.Services
call, we're gonna add this

107
00:06:17.658 --> 00:06:21.324
IncludeXmlComments, so
we're just gonna copy and paste this in.

108
00:06:21.324 --> 00:06:24.769
And we're gonna read
from the base directory.

109
00:06:24.769 --> 00:06:29.111
And then we're gonna say,
read this TheEmployeeAPI.xml file.

110
00:06:29.111 --> 00:06:31.118
So we can do that here.

111
00:06:31.118 --> 00:06:35.538
When we go to our Program.cs,
we can go to our AddSwaggerGen.

112
00:06:39.403 --> 00:06:41.935
&gt;&gt; Spencer Schneidenbach: And then we're
gonna say options.IncludeXmlComments.

113
00:06:41.935 --> 00:06:45.684
And it's gonna read through
all of those XML comments and

114
00:06:45.684 --> 00:06:48.817
then apply them to our
Swagger documentation.

115
00:06:48.817 --> 00:06:51.979
So I only did it on one endpoint,
which is our GET endpoint right here.

116
00:06:51.979 --> 00:06:57.553
But you can see that we can add it and
say gets all the employees in our system.

117
00:06:57.553 --> 00:07:00.887
So let's go ahead and
apply them to the rest of the endpoints.

118
00:07:00.887 --> 00:07:06.071
Because XML comments can also
include data on the parameters

119
00:07:06.071 --> 00:07:10.854
to that method,
which is actually really valuable.

120
00:07:10.854 --> 00:07:14.884
So we're gonna go ahead and
do that on our update employees call.

121
00:07:14.884 --> 00:07:16.223
We're gonna go here.

122
00:07:16.223 --> 00:07:20.376
We're gonna go down to UpdateEmployee,
paste that in.

123
00:07:20.376 --> 00:07:25.576
We're gonna go down to our,
&gt;&gt; Spencer Schneidenbach: Create and

124
00:07:25.576 --> 00:07:27.085
paste that in.

125
00:07:29.144 --> 00:07:32.186
&gt;&gt; Spencer Schneidenbach: And
we're gonna go to this, GetEmployeeById.

126
00:07:34.060 --> 00:07:35.520
&gt;&gt; Spencer Schneidenbach: Paste that in.

127
00:07:35.520 --> 00:07:40.211
And then you see when we rerun
the project that our nice XML

128
00:07:40.211 --> 00:07:44.806
comments get copied over,
as well as a nice description

129
00:07:44.806 --> 00:07:48.938
of each of the parameters,
which is really cool.

130
00:07:48.938 --> 00:07:52.241
The reason I like this a lot is
that it's developer friendly, so

131
00:07:52.241 --> 00:07:54.330
it's integrated in with the language.

132
00:07:54.330 --> 00:07:59.259
It gives the developer a natural way
to create comments in a way that

133
00:07:59.259 --> 00:08:00.851
makes sense to them.

134
00:08:00.851 --> 00:08:05.926
But it also gives enough
metadata back to Swagger

135
00:08:05.926 --> 00:08:12.255
such that our OpenAPI UI can
actually use this information.

136
00:08:12.255 --> 00:08:13.736
And you can't do this with minimal APIs.

137
00:08:13.736 --> 00:08:15.067
You have to go through and define it.

138
00:08:15.067 --> 00:08:18.041
It's a little bit messier, but
it is possible to do this.

139
00:08:18.041 --> 00:08:21.173
But XML comments, I like it
because it's language integrated.

140
00:08:21.173 --> 00:08:21.964
It's very natural.

141
00:08:23.703 --> 00:08:26.590
&gt;&gt; Spencer Schneidenbach: So
we made our documentation much better, and

142
00:08:26.590 --> 00:08:28.446
I think that's a good thing.

