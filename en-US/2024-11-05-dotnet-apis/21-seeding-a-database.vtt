WEBVTT

1
00:00:00.290 --> 00:00:01.924
&gt;&gt; Spencer Schneidenbach: We
have done a lot already.

2
00:00:01.924 --> 00:00:05.410
We have connected EF Core to our API,
which is awesome, but

3
00:00:05.410 --> 00:00:07.309
now we get to seed our database.

4
00:00:07.309 --> 00:00:09.360
We get to put stuff in it, okay?

5
00:00:09.360 --> 00:00:11.050
We have a fully functional database now.

6
00:00:11.050 --> 00:00:15.013
Our database file exists,
and we can see it, and

7
00:00:15.013 --> 00:00:21.213
we can connect to it inside of EF Core,
inside of our ASP.NET Core project.

8
00:00:21.213 --> 00:00:25.163
But we wanna put some data in there,
right?

9
00:00:25.163 --> 00:00:28.573
So let's put in some test data so
that we have something to play with.

10
00:00:28.573 --> 00:00:31.978
So in EF Core,
there is a way to seed your database, but

11
00:00:31.978 --> 00:00:35.604
I have not done it, and
I don't know anybody else who has,

12
00:00:35.604 --> 00:00:40.360
which is you can say that Entity.HasData,
and then give it some test data.

13
00:00:40.360 --> 00:00:44.879
And the reason that people don't
typically do this is that people in

14
00:00:44.879 --> 00:00:48.527
a production system,
depending on the environment,

15
00:00:48.527 --> 00:00:53.785
typically don't want data to go just
wantonly inside of a database like this.

16
00:00:53.785 --> 00:00:57.683
I should mention as well the
OnModelCreating, what the heck is that,

17
00:00:57.683 --> 00:01:00.921
it allows you to add some
configuration to your entities or

18
00:01:00.921 --> 00:01:03.193
even properties on those entities.

19
00:01:03.193 --> 00:01:05.113
And we will talk about
that a little bit later.

20
00:01:05.113 --> 00:01:08.970
But just know for now that it allows
you to modify some of the behaviors of

21
00:01:08.970 --> 00:01:12.203
the entities that come through
Entity Framework Core.

22
00:01:12.203 --> 00:01:16.243
It allows you to explicitly modify them,
which is really quite useful.

23
00:01:17.733 --> 00:01:19.909
Talk more about it later, yes, we will.

24
00:01:19.909 --> 00:01:21.726
Okay, I'm not gonna do this, and

25
00:01:21.726 --> 00:01:24.789
it's just not something that's
done a lot in the wild.

26
00:01:24.789 --> 00:01:27.619
I never see anybody use HasData.

27
00:01:27.619 --> 00:01:32.019
Typically, what I do see is that
they'll just define a class, and

28
00:01:32.019 --> 00:01:36.829
then they'll just define a separate
class and just do this separately.

29
00:01:36.829 --> 00:01:40.193
And they'll do this because they can
put it in to their test project and

30
00:01:40.193 --> 00:01:42.714
then uncomment it as they
need to spin up a database.

31
00:01:42.714 --> 00:01:47.606
Or maybe you're moving around a Docker
image that has some pre-baked data in it.

32
00:01:47.606 --> 00:01:51.136
But we'll go ahead and do this.

33
00:01:51.136 --> 00:01:54.453
We're gonna go here, and
we're gonna go to our program.

34
00:01:54.453 --> 00:01:57.687
I'm gonna go to the Solution Explorer,
it's a little bit cleaner looking.

35
00:01:57.687 --> 00:01:59.647
We're getting a lot of files up in here.

36
00:01:59.647 --> 00:02:02.896
Okay, I'm actually gonna close all these.

37
00:02:02.896 --> 00:02:08.375
We did all this, but I do want to
open up the project folder for

38
00:02:08.375 --> 00:02:13.975
the part that we are on,
which is seeding-your-database.

39
00:02:13.975 --> 00:02:17.425
Perfect, that's what we need.

40
00:02:17.425 --> 00:02:21.575
We'll open up Solution Explorer,
and we'll go ahead and

41
00:02:21.575 --> 00:02:23.871
add in a class called SeedData.

42
00:02:25.391 --> 00:02:26.491
We don't need that definition.

43
00:02:26.491 --> 00:02:27.725
We'll just paste ours in.

44
00:02:27.725 --> 00:02:30.663
And we're basically just
going to go through.

45
00:02:30.663 --> 00:02:34.320
From our service provider, we're
gonna get a copy of our AppDbContext.

46
00:02:34.320 --> 00:02:37.335
And if no employees exist in that context,
then we're just gonna add some, and

47
00:02:37.335 --> 00:02:39.318
we're gonna add some with
some employee benefits.

48
00:02:39.318 --> 00:02:43.003
We're gonna add some with some
more data than we had previously.

49
00:02:43.003 --> 00:02:46.048
So we got John Doe and
Jane Smith, pretty good.

50
00:02:46.048 --> 00:02:49.799
Okay, so we like to see,
we'll create our static class.

51
00:02:49.799 --> 00:02:53.978
And then we'll need to
call this from Program.cs.

52
00:02:53.978 --> 00:02:55.778
So we'll go here.

53
00:02:55.778 --> 00:02:58.172
We'll go to Program.cs.

54
00:02:58.172 --> 00:03:02.822
And once the app is built, we do have
access to the dependency injection

55
00:03:02.822 --> 00:03:05.471
pipeline so we can get services from it.

56
00:03:05.471 --> 00:03:10.289
So we're gonna call SeedData.Seed.

57
00:03:10.289 --> 00:03:16.670
And we're gonna say
app.Services.GetRequiredService.

58
00:03:19.392 --> 00:03:24.124
&gt;&gt; Spencer Schneidenbach: AppDbContext,
open close, and go.

59
00:03:24.124 --> 00:03:25.935
No, actually,
it just wants the service provider.

60
00:03:25.935 --> 00:03:27.205
We don't even need to do that.

61
00:03:27.205 --> 00:03:30.751
So we'll just give it the service
provider here, app.Services, and

62
00:03:30.751 --> 00:03:32.295
we're gonna run it.

63
00:03:32.295 --> 00:03:36.865
And what the heck happened?

64
00:03:36.865 --> 00:03:40.737
What's this cannot resolve
scoped service AppDbContext?

65
00:03:40.737 --> 00:03:43.550
What does that mean
from the root provider?

66
00:03:43.550 --> 00:03:45.273
We'll break this down a little bit for
you.

67
00:03:45.273 --> 00:03:47.961
This is a common error, and
it's common to encounter and

68
00:03:47.961 --> 00:03:52.771
not necessarily fully understand as
you're getting into dependency injection.

69
00:03:52.771 --> 00:03:57.734
What this is is essentially,
there is what's called a root provider.

70
00:03:57.734 --> 00:04:02.325
These services that we're adding, we're
adding all of those to the root provider.

71
00:04:02.325 --> 00:04:03.903
And what it's trying to say,

72
00:04:03.903 --> 00:04:07.629
what this method is trying to say in
this exception is that DbContext,

73
00:04:07.629 --> 00:04:11.863
specifically our AppDbContext,
is what's called a scoped service.

74
00:04:11.863 --> 00:04:16.109
Now, scope kind of is
similar to block scope, but

75
00:04:16.109 --> 00:04:19.354
it's not a programmatic construct.

76
00:04:19.354 --> 00:04:20.314
This is block scope.

77
00:04:20.314 --> 00:04:24.445
So we know variables declared here
aren't accessible outside of the scope.

78
00:04:24.445 --> 00:04:29.236
It's conceptually the same thing,
but a scope is typically created

79
00:04:29.236 --> 00:04:34.355
in an ASP.NET Core application for
the lifetime of an HTTP request.

80
00:04:34.355 --> 00:04:40.386
So as a request is executing,
the service provider news up

81
00:04:40.386 --> 00:04:46.332
what's called a scope or
CreateScope right there.

82
00:04:46.332 --> 00:04:52.892
So you would say using
var scope = CreateScope.

83
00:04:52.892 --> 00:04:56.912
I like my using statements with curly
braces, so I'm gonna stay with that.

84
00:04:56.912 --> 00:05:00.052
And then the HTTP request executes and
does stuff.

85
00:05:00.052 --> 00:05:02.251
It goes through the middleware
pipeline and does things.

86
00:05:02.251 --> 00:05:07.298
So in the context of an ASP.NET Core
application, that is a scope.

87
00:05:07.298 --> 00:05:11.938
And so a context, a single context,
once it's requested, is created for

88
00:05:11.938 --> 00:05:14.208
the scope of that HTTP request.

89
00:05:14.208 --> 00:05:18.168
And after that request is fulfilled and
gone, then it gets disposed of.

90
00:05:19.198 --> 00:05:25.470
So in this case, our way around this
is to simply just create our own scope.

91
00:05:25.470 --> 00:05:30.523
And you could do that here if you wanted
to, but I'm gonna just do it here instead.

92
00:05:35.453 --> 00:05:39.059
&gt;&gt; Spencer Schneidenbach: builder.Build,
SeedData.Seed, and we're gonna do that.

93
00:05:42.149 --> 00:05:44.992
&gt;&gt; Spencer Schneidenbach: And
now you see that it runs successfully.

94
00:05:44.992 --> 00:05:48.913
So at this point now,
we've set up our seed database, or

95
00:05:48.913 --> 00:05:54.407
we've set up our seed method, and
we've gotten that data into that database.

96
00:05:54.407 --> 00:05:58.526
The next thing we'll do is actually
connect our DbContext into our API and

97
00:05:58.526 --> 00:06:00.661
make it so that we can actually query.

