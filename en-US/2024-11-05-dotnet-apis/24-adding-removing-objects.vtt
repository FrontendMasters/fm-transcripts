WEBVTT

1
00:00:00.000 --> 00:00:02.160
&gt;&gt; Spencer Schneidenbach: So
we went over querying in EF Core,

2
00:00:02.160 --> 00:00:06.336
which I would say that between that and
adding and removing objects,

3
00:00:06.336 --> 00:00:08.941
querying is by far the more nuanced thing.

4
00:00:08.941 --> 00:00:13.039
So definitely worth paying attention to
and kind of learning the ins and outs and

5
00:00:13.039 --> 00:00:13.786
quirks of it.

6
00:00:13.786 --> 00:00:17.614
So let's go back to our post and
put endpoints and actually add and remove

7
00:00:17.614 --> 00:00:22.028
objects from our database, let's refactor,
let's go back and refactor those.

8
00:00:22.028 --> 00:00:27.604
So I'm gonna go to
the next solution folder,

9
00:00:27.604 --> 00:00:32.734
so we were on 4-E, so
we need to go to 4,

10
00:00:32.734 --> 00:00:38.627
let's see 4-F, perfect, okay, all right.

11
00:00:38.627 --> 00:00:41.339
So first things, first, we're going
to go to our employee controller,

12
00:00:41.339 --> 00:00:44.509
we're going to scroll down and we're going
to see that our comments are still there.

13
00:00:44.509 --> 00:00:49.890
We're going to go ahead and delete that
one and put this, put the comment back for

14
00:00:49.890 --> 00:00:55.374
the rest of them for now, and we have two
lines that we need to write, pretty cool.

15
00:00:55.374 --> 00:01:00.853
They are _dbContext.Employees.Add,
and then _dbContext.SaveChanges,

16
00:01:00.853 --> 00:01:05.319
I mentioned earlier that DbContext
was a unit of work pattern,

17
00:01:05.319 --> 00:01:08.449
in addition to being a repository pattern.

18
00:01:08.449 --> 00:01:13.449
So if you had made multiple changes to the
database, the SaveChangesAsync represents

19
00:01:13.449 --> 00:01:16.748
that one unit of work to actually
take care of all of that.

20
00:01:16.748 --> 00:01:21.936
So very straightforward, not a lot to do,
and then we can actually kill this

21
00:01:21.936 --> 00:01:26.883
await Task.CompletedTask,
because we now have a method that actually

22
00:01:26.883 --> 00:01:31.451
has an await call, which is to dbContext,
which is pretty great.

23
00:01:31.451 --> 00:01:34.713
So next we are going to go here, and

24
00:01:34.713 --> 00:01:39.664
we're going to go to our
UpdateEmployee endpoint,

25
00:01:39.664 --> 00:01:44.163
do that, and
we'll just comment that out, and

26
00:01:44.163 --> 00:01:48.343
we will do pretty much
the exact same thing.

27
00:01:48.343 --> 00:01:53.830
Except this time we've already
pulled this thing from memory,

28
00:01:53.830 --> 00:01:57.791
or we will here in a second,
we'll go ahead and

29
00:01:57.791 --> 00:02:02.464
async Task of IActionResult,
and then we will await,

30
00:02:02.464 --> 00:02:06.755
_dbContext dot and
we'll just use FindAsync now.

31
00:02:06.755 --> 00:02:09.864
Use little FindAsync, that's good,

32
00:02:09.864 --> 00:02:13.594
okay, we do need to say
Employees.FindAsync, and

33
00:02:13.594 --> 00:02:17.500
then, because this is already
part of the change tracker.

34
00:02:17.500 --> 00:02:23.136
I mentioned earlier that dbContext
will track our changes for

35
00:02:23.136 --> 00:02:28.444
us, we will say,
await _dbContext.SaveChangesAsync,

36
00:02:28.444 --> 00:02:32.035
and we will that should be pretty good.

37
00:02:32.035 --> 00:02:35.487
Now, according to this flow,
we were like, we'll run the tests and

38
00:02:35.487 --> 00:02:38.550
wait a failure because we forgot
to uncomment out our validator,

39
00:02:38.550 --> 00:02:41.247
we're just gonna go ahead and
validate that real quick.

40
00:02:41.247 --> 00:02:45.278
We're gonna go ahead and refactor our
validator here real quick as well,

41
00:02:45.278 --> 00:02:48.075
so we're gonna go to our
UpdateEmployeeRequest,

42
00:02:48.075 --> 00:02:50.363
we're gonna uncomment that out as well.

43
00:02:50.363 --> 00:02:55.229
And we are going to destroy
all the references to

44
00:02:55.229 --> 00:02:59.974
IRepository, AppDbContext appDbContext,

45
00:02:59.974 --> 00:03:04.471
boom, and
then we will say hover over that,

46
00:03:04.471 --> 00:03:09.458
click there, control dot or
sorry command dot,

47
00:03:09.458 --> 00:03:13.616
command period, and assign the field.

48
00:03:13.616 --> 00:03:18.980
We'll rename it per Spenser's style
guidelines, self inflicted ones,

49
00:03:18.980 --> 00:03:23.673
and then we'll move that there,
so, it's nice and organized.

50
00:03:23.673 --> 00:03:28.480
And then, of course, we earlier declared
this async method knowing that we would

51
00:03:28.480 --> 00:03:33.288
have to refactor it to talk to a specific
database, so we'll take out this call and

52
00:03:33.288 --> 00:03:34.345
we kept it async.

53
00:03:34.345 --> 00:03:40.493
So we will go ahead and
say await _appDbContext.FindAsync,

54
00:03:40.493 --> 00:03:46.035
we'll go ahead and just call that,
and we will say id,

55
00:03:46.035 --> 00:03:52.563
again, missing the .Employees,
and there we go, we got it.

56
00:03:52.563 --> 00:03:57.058
So, pretty straightforward refactor so
far, let's go ahead and

57
00:03:57.058 --> 00:04:00.750
uncomment and run our tests and
see what happens, so,

58
00:04:00.750 --> 00:04:04.459
we got our CreateEmployees and
our UpdateEmployees.

59
00:04:06.699 --> 00:04:09.128
&gt;&gt; Spencer Schneidenbach: So,
we'll leave everything off, but

60
00:04:09.128 --> 00:04:13.250
the benefits Control + Shift + Tilde,
and I'll say dotnet test, and

61
00:04:13.250 --> 00:04:16.561
you're gonna see that all
the tests that we created,

62
00:04:16.561 --> 00:04:21.436
all pass, which is exactly what we want
to see, so, that's really awesome.

63
00:04:21.436 --> 00:04:24.334
So we did all of that, but
I do want to discuss one thing,

64
00:04:24.334 --> 00:04:27.601
a little bit of magic in EF Core,
if you will, and I do want, and

65
00:04:27.601 --> 00:04:31.218
I think it's important, to bring up,
which is the Change Tracker.

66
00:04:31.218 --> 00:04:34.723
So the change tracker is
notoriously a little slow,

67
00:04:34.723 --> 00:04:39.758
it's really only slow when you're
dealing with lots and lots of objects.

68
00:04:39.758 --> 00:04:42.346
But as objects are loaded
into memory in EF Core,

69
00:04:42.346 --> 00:04:46.261
you will find that the Change Tracker
will track all of those objects, and

70
00:04:46.261 --> 00:04:49.945
even if they don't need an update,
they will attempt to be updated.

71
00:04:49.945 --> 00:04:55.005
So you can instruct EF Core
to track changes manually,

72
00:04:55.005 --> 00:04:59.845
you can turn off that change tracking,
and make it so

73
00:04:59.845 --> 00:05:06.780
that you have to explicitly tell Entity
Framework what objects to update.

74
00:05:06.780 --> 00:05:11.499
In my opinion, in new projects,
I prefer to turn change tracking off,

75
00:05:11.499 --> 00:05:15.353
I do it simply because I prefer
explicit code, that said,

76
00:05:15.353 --> 00:05:19.934
if you leave it on and it works for
you, I think that's totally fine.

77
00:05:19.934 --> 00:05:27.153
But me, personal preferences,
I tend to turn it off where I can,

78
00:05:27.153 --> 00:05:32.142
so I'm gonna update our
call to AddDbContext

79
00:05:32.142 --> 00:05:37.016
to say program, AddDbContext and do that.

80
00:05:37.016 --> 00:05:39.590
And we're gonna say
query tracking behavior,

81
00:05:39.590 --> 00:05:43.651
no Tracking, which is going to affect
the update endpoint specifically.

82
00:05:43.651 --> 00:05:45.309
And it's gonna update and

83
00:05:45.309 --> 00:05:50.204
it's gonna affect it because we have
not instructed it to track that object,

84
00:05:50.204 --> 00:05:55.569
it's actually coming, it's being queried,
but EF Core is no longer tracking it.

85
00:05:55.569 --> 00:06:00.982
So if we run our tests, we'll see it pass,
okay, nothing broke well,

86
00:06:00.982 --> 00:06:04.888
there you go does this mean
it didn't change nothing?

87
00:06:04.888 --> 00:06:09.914
It means our tests aren't sufficient,
that's right, if you take a look at our

88
00:06:09.914 --> 00:06:14.955
UnitTest for UpdateEmployee, all it
says is, is there a success status code?

89
00:06:14.955 --> 00:06:19.407
So in this case, while we have tests and
the tests are really good at protecting

90
00:06:19.407 --> 00:06:23.536
ourselves from weird behavior,
they're not sufficient in this case.

91
00:06:23.536 --> 00:06:25.071
So let's go ahead and

92
00:06:25.071 --> 00:06:30.614
update them to ensure that it actually
did update what we expected to update,

93
00:06:30.614 --> 00:06:35.302
so I'm gonna copy this stuff in,
and then I will paste it in here,

94
00:06:35.302 --> 00:06:40.121
it's gonna need an import, so
I will command dot and import that.

95
00:06:40.121 --> 00:06:45.361
And now what we're doing is we're changing
John Doe's street to 123 Main Smoot,

96
00:06:45.361 --> 00:06:49.889
and a Smoot, by the way, is a unit of
measurement look it up, it's true.

97
00:06:49.889 --> 00:06:54.695
And we are going to load it
from the database and then see,

98
00:06:54.695 --> 00:06:59.502
in addition to this,
we are also going to change our query

99
00:06:59.502 --> 00:07:03.431
tracking behavior inside
of our method here.

100
00:07:03.431 --> 00:07:08.458
So options.UseQueryTrackingBehavior
is no tracking, so

101
00:07:08.458 --> 00:07:14.662
it'll turn off change tracking there,
and then we will run our tests, and

102
00:07:14.662 --> 00:07:22.562
you'll see that now our 123 Main Smoot is
not 123 Main Smoot, it's 123 Main Street.

103
00:07:22.562 --> 00:07:26.477
That's because we turned off
automatic change tracking, so

104
00:07:26.477 --> 00:07:29.411
we can fix this very easily,
one line of code,

105
00:07:29.411 --> 00:07:33.570
if we go here to our put endpoint,
our UpdateEmployee endpoint.

106
00:07:33.570 --> 00:07:38.258
All we have to do is notate to
the dbContext that this thing needs to be

107
00:07:38.258 --> 00:07:42.537
updated and the way you do that is,
you go dbContext.Entry,

108
00:07:42.537 --> 00:07:46.924
you give it the object that is
the entry that you want to update.

109
00:07:46.924 --> 00:07:51.931
So in this case,
it's the existingEmployee,

110
00:07:51.931 --> 00:07:57.197
and then you say,
State equals Modified, okay?

111
00:07:57.197 --> 00:08:01.698
So, now we've marked this thing as
this entity is now being tracked,

112
00:08:01.698 --> 00:08:05.744
we are explicitly turning off
automatic change tracking, and

113
00:08:05.744 --> 00:08:07.975
we've explicitly turned it off.

114
00:08:07.975 --> 00:08:11.991
And now we're explicitly telling
this instance of the dbContext,

115
00:08:11.991 --> 00:08:16.429
track this object, so now we're gonna
rerun our tests, dotnet test, and

116
00:08:16.429 --> 00:08:18.837
we're gonna see that they all pass now.

117
00:08:18.837 --> 00:08:24.015
Now it's updating as it should,
which is exactly what we want, so

118
00:08:24.015 --> 00:08:29.469
one other thing that you can do is
you can actually turn on AsTracking,

119
00:08:29.469 --> 00:08:34.756
and if you have and if you have
an application that you're running.

120
00:08:34.756 --> 00:08:39.431
You can actually inside of a single query,
you can turn it off as,

121
00:08:39.431 --> 00:08:44.276
as no tracking in case you're doing
a read only search, so you can do

122
00:08:44.276 --> 00:08:49.132
that by await dbContext.Employees,
and you can say AsTracking.

123
00:08:49.132 --> 00:08:54.640
And then you FindAsync method, because
FindAsync operates on DbSet doesn't

124
00:08:54.640 --> 00:08:59.824
exist anymore, so we'll just simply
turn it to SingleOrDefaultAsync.

125
00:08:59.824 --> 00:09:04.774
And then we'll say, (e => e.Id == id)
and then we'll go down here,

126
00:09:04.774 --> 00:09:08.899
remove this, and you'll see that
because we've explicitly for

127
00:09:08.899 --> 00:09:13.558
this query turned on change tracking
that our object still gets updated.

128
00:09:13.558 --> 00:09:16.649
So that's basically
instructing EF Core to say yes,

129
00:09:16.649 --> 00:09:21.399
track these objects that I'm getting from
this query, and the opposite is true.

130
00:09:21.399 --> 00:09:26.489
If you have change tracking automatic
change tracking turned on, you can say

131
00:09:26.489 --> 00:09:31.905
AsNoTracking, so you can not have to track
objects that you don't need to track.

132
00:09:31.905 --> 00:09:36.894
So last thing we're gonna go over is
removing an object from the database, so

133
00:09:36.894 --> 00:09:42.062
I'm going to go down here and I'm just
gonna paste this below my update method.

134
00:09:42.062 --> 00:09:44.885
And we're gonna go through it super quick,

135
00:09:44.885 --> 00:09:49.766
because there's really not a lot of
complication with it, so in this case,

136
00:09:49.766 --> 00:09:53.831
we're basically taking and
we're creating a delete method.

137
00:09:53.831 --> 00:09:57.740
So we're gonna send a delete command
to this API with that id, and

138
00:09:57.740 --> 00:10:02.576
it's going to call this DeleteEmployee
method with the id taken from the route,

139
00:10:02.576 --> 00:10:03.801
as we would expect.

140
00:10:03.801 --> 00:10:08.709
We'll return NotFound if that thing
is not found, but otherwise we will

141
00:10:08.709 --> 00:10:13.538
go _dbContext.Employees.Remove,
and then our SaveChangesAsync,

142
00:10:13.538 --> 00:10:18.050
will then delete that from the database,
very straightforward.

143
00:10:18.050 --> 00:10:22.964
And you can see here that we can add
in a couple of tests to check for

144
00:10:22.964 --> 00:10:28.060
the NotFound, and then we can also
create our new employee here and

145
00:10:28.060 --> 00:10:31.519
then delete them after we've created them.

146
00:10:31.519 --> 00:10:35.497
So boom, we'll go here to our tests,
make our project even more beefy,

147
00:10:35.497 --> 00:10:39.607
make it me even more awesome by making
sure that all of our tests are there and

148
00:10:39.607 --> 00:10:42.172
we are covering all
the behaviors of our code.

149
00:10:42.172 --> 00:10:46.532
So we'll go Control + Shift + Tilda,
and we'll go dotnet test, and

150
00:10:46.532 --> 00:10:52.242
we'll see that everything worked, we added
a new employee object to our context here

151
00:10:52.242 --> 00:10:57.261
in our test, and then we're immediately
turning around and deleting it.

152
00:10:57.261 --> 00:10:59.837
And what's this employee's name?

153
00:10:59.837 --> 00:11:04.547
Meow Garida, it's one of my clients
refers to me as Meow Gerita, it's a long

154
00:11:04.547 --> 00:11:09.399
story all right, we got our test passing,
so now we've created our queries and

155
00:11:09.399 --> 00:11:12.819
we've also added and
removed objects in the database.

