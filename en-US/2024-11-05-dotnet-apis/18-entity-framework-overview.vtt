WEBVTT

1
00:00:00.000 --> 00:00:02.573
&gt;&gt; Spencer Schneidenbach: Let's
talk about Entity Framework Core.

2
00:00:02.573 --> 00:00:06.260
And I'm all smiles because
Entity Framework Core is one of my

3
00:00:06.260 --> 00:00:08.730
favorite parts of the .NET ecosystem.

4
00:00:08.730 --> 00:00:10.177
So what is Entity Framework Core?

5
00:00:10.177 --> 00:00:15.589
If you're familiar with ORMs in
JavaScript, Prisma is an example of one.

6
00:00:15.589 --> 00:00:21.464
EF Core is that inside
of the .NET ecosystem.

7
00:00:21.464 --> 00:00:24.936
So it allows you to work with
the database using .NET objects, and

8
00:00:24.936 --> 00:00:29.091
provide a way to interact with databases
in an object-oriented way rather than

9
00:00:29.091 --> 00:00:30.216
using directly SQL.

10
00:00:30.216 --> 00:00:34.044
So developers and
SQL famously do not always get along.

11
00:00:34.044 --> 00:00:37.749
So EF Core kind of exists to bridge
that gap, but it does so much more.

12
00:00:37.749 --> 00:00:40.372
It really is awesome.

13
00:00:40.372 --> 00:00:43.986
So why would you choose to use EF Core
over something like even raw SQL,

14
00:00:43.986 --> 00:00:46.806
there's actually some other
ORM products out there,

15
00:00:46.806 --> 00:00:49.210
but I don't think they're
as good as EF Core.

16
00:00:49.210 --> 00:00:52.700
So first of all, you can do something
called code Ffrst development,

17
00:00:52.700 --> 00:00:56.369
which allows you to define your
database schema using .NET classes, and

18
00:00:56.369 --> 00:00:58.698
then generate
the corresponding data table.

19
00:00:58.698 --> 00:01:00.143
So that's called code first.

20
00:01:00.143 --> 00:01:01.919
You could also reverse-engineer.

21
00:01:01.919 --> 00:01:04.762
There is actually a way to do that, we're
not gonna go through that in this course.

22
00:01:04.762 --> 00:01:09.016
It's called database first, and
it is supported, and it is possible.

23
00:01:09.016 --> 00:01:11.538
So you can do it both ways if you like.

24
00:01:11.538 --> 00:01:15.468
So the thing that it does really well is
it maps those .NET objects to database

25
00:01:15.468 --> 00:01:19.217
tables, making it easier to work with
those databases, as I mentioned,

26
00:01:19.217 --> 00:01:20.920
in an object-oriented manner.

27
00:01:20.920 --> 00:01:23.487
So Entity Framework Core does a lot
of the plumbing under the hood.

28
00:01:23.487 --> 00:01:28.526
It'll write the SQL for you, and
that goes for querying your database,

29
00:01:28.526 --> 00:01:32.584
as well as adding or
removing records from your database.

30
00:01:32.584 --> 00:01:35.854
One of the cool things is that
you're able to write link and

31
00:01:35.854 --> 00:01:40.485
have it talk to the database, as opposed
to just writing raw SQL, as I mentioned.

32
00:01:40.485 --> 00:01:44.404
So we'll go through that
because that's really cool and

33
00:01:44.404 --> 00:01:48.739
one of the most powerful parts
of using Entity Framework Core.

34
00:01:48.739 --> 00:01:50.540
It also includes change tracking.

35
00:01:50.540 --> 00:01:54.266
So it will automatically keep track of
the entities inside of your project and

36
00:01:54.266 --> 00:01:57.989
whether or not they need to be updated or
whether or not they need to be inserted

37
00:01:57.989 --> 00:02:01.174
into the database, or whether or
not properties need to change.

38
00:02:01.174 --> 00:02:04.529
So it will take care of all of that for
you.

39
00:02:04.529 --> 00:02:08.339
And then finally, another one of its
great features is that out of the box,

40
00:02:08.339 --> 00:02:10.166
it supports database migrations.

41
00:02:10.166 --> 00:02:14.934
So as your model changes, and
your model and requirements will change,

42
00:02:14.934 --> 00:02:19.702
the EF Core will allow you to generate
those migration files and make it so

43
00:02:19.702 --> 00:02:22.531
that you can keep your
database up to date.

44
00:02:22.531 --> 00:02:24.851
So how does EF Core work in code?

45
00:02:24.851 --> 00:02:27.498
So there's a couple of
really important constructs.

46
00:02:27.498 --> 00:02:30.181
It's actually quite simple.

47
00:02:30.181 --> 00:02:31.500
DBContext is the first one.

48
00:02:31.500 --> 00:02:35.437
So dbContext is kind of the owner
of the database tables, or

49
00:02:35.437 --> 00:02:40.661
it kind of represents an abstraction
of the database that you're targeting.

50
00:02:40.661 --> 00:02:44.516
And in the dbContext,
you have a series of dbSets.

51
00:02:44.516 --> 00:02:48.903
DbSets would be the individual
object inside of your database.

52
00:02:48.903 --> 00:02:51.798
So considering our application,
for example,

53
00:02:51.798 --> 00:02:54.560
our employee object is
the object that we use.

54
00:02:54.560 --> 00:02:57.272
So you would have a dbSet for employee.

55
00:02:57.272 --> 00:02:59.352
You would have a dbSet for
an employee benefit.

56
00:02:59.352 --> 00:03:05.293
If you had a customer record, you'd have
a dbSet for customers, so on and so forth.

57
00:03:05.293 --> 00:03:08.395
Here's what a sample of
that code looks like.

58
00:03:08.395 --> 00:03:14.196
So a dbContext class that you
define inherits from dbContext,

59
00:03:14.196 --> 00:03:21.428
and then you define properties that set
the dbSet for each of those employees.

60
00:03:21.428 --> 00:03:24.103
This is what it would look like.

61
00:03:24.103 --> 00:03:28.063
If you've instantiated
a copy of your dbSet and

62
00:03:28.063 --> 00:03:34.601
you're querying your employees table,
you can do link, just normal links.

63
00:03:34.601 --> 00:03:37.788
So you can say where and
provided a predicate to say that for

64
00:03:37.788 --> 00:03:40.008
the employees who department is sales.

65
00:03:40.008 --> 00:03:42.161
And I wanna bring those into list.

66
00:03:42.161 --> 00:03:46.913
And then roughly, it will return something
that will roughly under the hood,

67
00:03:46.913 --> 00:03:51.161
go to the database and execute a query
that looks very similar to this,

68
00:03:51.161 --> 00:03:55.851
where it does a select star from
employees, where department equals sales.

69
00:03:55.851 --> 00:03:59.716
So it does a lot of translation of SQL for

70
00:03:59.716 --> 00:04:03.592
you using LINQ, which is really cool.

71
00:04:03.592 --> 00:04:07.752
The way that you install EF Core is
through the NuGet Package Manager.

72
00:04:07.752 --> 00:04:12.055
And you can do that by installing
Microsoft.EntityFrameworkCore.

73
00:04:12.055 --> 00:04:15.436
And that's the package
that includes pretty much

74
00:04:15.436 --> 00:04:19.951
all the core stuff that you need,
which is the dbContext, dbSet.

75
00:04:19.951 --> 00:04:26.753
But individual database providers
are provided in separate NuGet packages.

76
00:04:26.753 --> 00:04:29.947
So for instance, if you're
targeting SQL Server or Postgres,

77
00:04:29.947 --> 00:04:34.266
those are separate packages, and you would
install those separately as you would need

78
00:04:34.266 --> 00:04:36.236
each of those in different databases.

79
00:04:36.236 --> 00:04:40.296
So we're gonna go with the SQLite database
provider because it's super easy to get

80
00:04:40.296 --> 00:04:42.447
started with, and it's super easy to use.

