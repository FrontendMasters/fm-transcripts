WEBVTT

1
00:00:00.170 --> 00:00:03.341
&gt;&gt; Spencer Schneidenbach: We converted
all of our APIs to controllers.

2
00:00:03.341 --> 00:00:06.048
So now let's talk about
the logging system.

3
00:00:06.048 --> 00:00:09.354
I'm gonna go and open,
I'm gonna go to my next exercise,

4
00:00:09.354 --> 00:00:11.927
which is adding logging
to our controllers.

5
00:00:11.927 --> 00:00:16.249
First, I wanna talk about what
logging is and why it's important, and

6
00:00:16.249 --> 00:00:20.440
what abstractions exist in ASP.NET Core
to allow you to log things.

7
00:00:20.440 --> 00:00:24.126
So, logging is important because in a,
when you've deployed something

8
00:00:24.126 --> 00:00:28.416
to production and something goes wrong,
something happens, things will go wrong.

9
00:00:28.416 --> 00:00:33.056
Even if you have tests for things that you
should have tests for, things will break.

10
00:00:33.056 --> 00:00:37.039
So logging is a construct
that we can use to make it so

11
00:00:37.039 --> 00:00:41.672
that we can, in a way that's
really convenient and easy for

12
00:00:41.672 --> 00:00:45.672
developers, to send messages
to a target system.

13
00:00:45.672 --> 00:00:50.130
It could be a file, or it could be
something like Azure application insights,

14
00:00:50.130 --> 00:00:54.734
or something like Datadog, whatever
the case may be, whatever system you use.

15
00:00:54.734 --> 00:00:57.758
We can hook our logger into those
systems such that we can get

16
00:00:57.758 --> 00:01:00.190
data that we need in case
something goes wrong.

17
00:01:00.190 --> 00:01:04.916
Or in case we need to have a little extra
metadata when we're trying to debug

18
00:01:04.916 --> 00:01:05.675
a problem.

19
00:01:05.675 --> 00:01:09.220
So the way that logging is
handled is through what's

20
00:01:09.220 --> 00:01:11.647
called the ILogger of T interface.

21
00:01:11.647 --> 00:01:15.863
So the ILogger of T is,
the T part of that is the basically,

22
00:01:15.863 --> 00:01:20.350
identifying where the service
is that you're logging from.

23
00:01:20.350 --> 00:01:23.866
So in this case,
if you had a class called MyService and

24
00:01:23.866 --> 00:01:26.470
that MyService class did stuff, okay?

25
00:01:26.470 --> 00:01:30.331
You would inject in an ILogger of
MyService, and that basically gives

26
00:01:30.331 --> 00:01:34.855
the logger enough informations to say,
this is where this logger is coming from.

27
00:01:34.855 --> 00:01:39.143
So that way when it's actually flushing
that log message to either the console or

28
00:01:39.143 --> 00:01:42.750
Datadog, it can say, hey,
this happened in the MyService class.

29
00:01:42.750 --> 00:01:46.247
It gives developers
a little extra information.

30
00:01:46.247 --> 00:01:49.095
So this is injected via what's
called constructor injection,

31
00:01:49.095 --> 00:01:50.951
which is what we do with our controllers.

32
00:01:50.951 --> 00:01:54.769
We define our services in our
constructor and then inject them in.

33
00:01:54.769 --> 00:02:00.246
And then, those will get set by
the dependency injection system.

34
00:02:00.246 --> 00:02:06.900
And then, our do work method very
simply logs a informational message.

35
00:02:06.900 --> 00:02:09.284
So, what is log information?

36
00:02:09.284 --> 00:02:11.762
And, can we log things other
than just information?

37
00:02:11.762 --> 00:02:12.930
What does that mean?

38
00:02:12.930 --> 00:02:16.333
Well, that's a concept called log levels.

39
00:02:16.333 --> 00:02:21.145
So, .NET supports several log levels,
more than you probably could ever need,

40
00:02:21.145 --> 00:02:22.691
which are the following.

41
00:02:22.691 --> 00:02:26.772
Trace, which you would only do if you're
doing some real debugging, like you just

42
00:02:26.772 --> 00:02:30.755
want to log out this thing but you really
don't want that log to go anywhere else.

43
00:02:30.755 --> 00:02:34.003
Because logging systems,
you log to them, it will cost money.

44
00:02:34.003 --> 00:02:35.718
So you don't wanna send every log.

45
00:02:35.718 --> 00:02:39.025
Trace log is one of those logs that
you're probably not gonna send, right?

46
00:02:39.025 --> 00:02:43.486
It's for low-level,
really intense debugging.

47
00:02:43.486 --> 00:02:47.374
Most of the time I just skip that and
I just use the debug log level,

48
00:02:47.374 --> 00:02:51.349
which is useful, as it says, for
debugging during development.

49
00:02:51.349 --> 00:02:53.440
Information is generally just speaking,
hey,

50
00:02:53.440 --> 00:02:55.534
I just want you to know
that this thing happened.

51
00:02:55.534 --> 00:03:00.841
You can choose to log this to
a logging provider or not.

52
00:03:00.841 --> 00:03:06.600
Using a filter, which, I think we'll
touch on briefly here in a bit.

53
00:03:06.600 --> 00:03:09.829
And this is where really the logging
really becomes important,

54
00:03:09.829 --> 00:03:13.296
when you're talking about failures
that you may need to figure out or

55
00:03:13.296 --> 00:03:17.087
recover from when you're talking about
a failure in a production system.

56
00:03:17.087 --> 00:03:18.985
Maybe an API is failing.

57
00:03:18.985 --> 00:03:22.026
Maybe it's giving back 500 and
you're not sure why.

58
00:03:22.026 --> 00:03:26.691
Well, our logger here, our warning
error and critical, respectively,

59
00:03:26.691 --> 00:03:30.703
based on intensity as you can imagine,
are there to serve that.

60
00:03:30.703 --> 00:03:34.274
So warning is typically,
something unexpected has happened, but

61
00:03:34.274 --> 00:03:36.851
the application can still
function correctly.

62
00:03:36.851 --> 00:03:39.753
Maybe the system was in
a slightly invalid state and

63
00:03:39.753 --> 00:03:44.154
this method was able to kinda bypass that,
or ignore it, or even correct it.

64
00:03:44.154 --> 00:03:49.765
But it wanted to log warning because
it wanted to let the developer and

65
00:03:49.765 --> 00:03:54.034
the the system engineers
know what happened there.

66
00:03:54.034 --> 00:03:56.525
We have error, for
when you've thrown an exception,

67
00:03:56.525 --> 00:04:00.003
we couldn't get a hold of the database,
and we've caught that exception.

68
00:04:00.003 --> 00:04:04.998
And now we've logged that error to
our logging system to say, hey,

69
00:04:04.998 --> 00:04:11.410
we caught this exception, here's some data
about what was going on around that time.

70
00:04:11.410 --> 00:04:13.618
Whatever would make your log more useful.

71
00:04:13.618 --> 00:04:16.042
And then critical is
like all hands on deck,

72
00:04:16.042 --> 00:04:20.564
the type of log message where it's like,
if you're logging a critical message,

73
00:04:20.564 --> 00:04:23.003
then you really need to
pay attention to it.

74
00:04:23.003 --> 00:04:24.309
These are the logging levels.

75
00:04:24.309 --> 00:04:30.198
The ones that I use are debug up,
I typically just skip trace, personally.

76
00:04:30.198 --> 00:04:33.292
And then,
as I demonstrated in the previous course,

77
00:04:33.292 --> 00:04:36.470
there's one logging method
on the interface itself.

78
00:04:36.470 --> 00:04:40.931
But there are several extension methods
that are provided to just say, hey,

79
00:04:40.931 --> 00:04:44.994
I just want to log a trace, or
wanna log a debug log, so on and so forth.

80
00:04:44.994 --> 00:04:49.617
So if we're looking at our employees
controller class, we're gonna look here,

81
00:04:49.617 --> 00:04:54.374
and we're gonna go down to Employees, and
we're gonna go to Employee Controller.

82
00:04:54.374 --> 00:04:58.206
And the first thing we're going to do,
I'm gonna put this,

83
00:04:58.206 --> 00:05:02.565
knock that onto a second line, and
then I'm gonna hit the comma, and

84
00:05:02.565 --> 00:05:07.624
I'm gonna go, ILogger of employee
controller, and I'm going to say logger.

85
00:05:07.624 --> 00:05:13.196
And I'm gonna do command dot, I'm gonna
say, create an assign field, Logger.

86
00:05:13.196 --> 00:05:16.647
I am going to rename
this with an underscore.

87
00:05:16.647 --> 00:05:19.454
That's a personal preference thing.

88
00:05:19.454 --> 00:05:21.994
And then,
we now have our logger injected in.

89
00:05:21.994 --> 00:05:26.282
Couple of notes, if you do put in
a type that doesn't belong here,

90
00:05:26.282 --> 00:05:29.191
it will tell you, and
it will complain that,

91
00:05:29.191 --> 00:05:33.652
I don't think that this is the type
that you want, or it will do that.

92
00:05:33.652 --> 00:05:37.772
I think it actually does that
inside of JetBrains writer.

93
00:05:37.772 --> 00:05:43.507
But you don't wanna do this,
you just wanna inject in the logger for

94
00:05:43.507 --> 00:05:47.742
the thing,
the item that you're constructing.

95
00:05:47.742 --> 00:05:49.386
So you wanna do it like that.

96
00:05:49.386 --> 00:05:50.452
So that's good.

97
00:05:50.452 --> 00:05:56.117
And now we've got a way to log messages
as changes are being made to our system.

98
00:05:56.117 --> 00:06:01.218
And we're gonna focus mostly on our PUT
method here, just for the sake of example.

99
00:06:01.218 --> 00:06:06.001
To actually add in some general
information to log when somebody calls

100
00:06:06.001 --> 00:06:06.981
this method.

101
00:06:06.981 --> 00:06:11.726
So we are going to call our logger and
say, Logger.LogInformation.

102
00:06:11.726 --> 00:06:16.408
Boom, we're gonna say,
updating employee with ID, blah, okay?

103
00:06:16.408 --> 00:06:19.742
Let's go ahead and
run it and see what happens.

104
00:06:22.814 --> 00:06:27.340
&gt;&gt; Spencer Schneidenbach: 5129, we'll go
ahead and change this to a put request,

105
00:06:27.340 --> 00:06:30.108
and we'll just make up an employee.

106
00:06:30.108 --> 00:06:30.766
Let's see.

107
00:06:30.766 --> 00:06:31.923
Go ahead and send it.

108
00:06:31.923 --> 00:06:37.494
Boom, of course we get our not found,
because there's no employee with 333.

109
00:06:37.494 --> 00:06:39.496
But we've run our solution and

110
00:06:39.496 --> 00:06:44.973
we can see that it does indeed log an info
message for the employee controller class.

111
00:06:44.973 --> 00:06:48.513
And it does say that we updated
employee with ID 333, or

112
00:06:48.513 --> 00:06:50.186
at least we were trying to.

113
00:06:50.186 --> 00:06:53.072
And that's because we put our log
information method at the top,

114
00:06:53.072 --> 00:06:54.763
this executed before anything else.

115
00:06:54.763 --> 00:07:00.287
So naturally,
it will then afterwards return not

116
00:07:00.287 --> 00:07:05.687
found because it will
continue down the method.

117
00:07:05.687 --> 00:07:06.631
So, boom.

118
00:07:09.879 --> 00:07:14.177
&gt;&gt; Spencer Schneidenbach: We can add
additional messages as is needed.

119
00:07:14.177 --> 00:07:17.105
I wouldn't say that there's
a standard thing that I do,

120
00:07:17.105 --> 00:07:19.668
it really just depends on
the needs of the system.

121
00:07:19.668 --> 00:07:21.469
I mean, I'll just say that.

122
00:07:21.469 --> 00:07:23.079
So we'll stop there.

123
00:07:23.079 --> 00:07:24.126
We'll restart.

124
00:07:24.126 --> 00:07:29.212
We can add our warning message here to say
that if we do execute a put request and

125
00:07:29.212 --> 00:07:33.926
we get not found, we can go down here and
say that, okay, our warning.

126
00:07:33.926 --> 00:07:37.100
Warning, somebody tried
to call this endpoint,

127
00:07:37.100 --> 00:07:39.678
an employee with this ID wasn't found.

128
00:07:39.678 --> 00:07:41.880
Just thought you should know.

129
00:07:41.880 --> 00:07:46.536
And we can add additional information
like, if we called our repository method,

130
00:07:46.536 --> 00:07:50.314
and maybe our repository is actually
connected to a database, and

131
00:07:50.314 --> 00:07:52.220
we wanted to update that method.

132
00:07:52.220 --> 00:07:55.494
We wanted to update it, and
maybe that database had an outage, okay?

133
00:07:55.494 --> 00:07:58.792
We might wanna catch
that exception here and

134
00:07:58.792 --> 00:08:03.524
then log that error occurred
while updating employee ID here.

135
00:08:03.524 --> 00:08:07.629
And then we could, of course,
also return a status code of 500, or

136
00:08:07.629 --> 00:08:11.331
even re-throw the exception,
which would do the same thing.

137
00:08:11.331 --> 00:08:13.127
I do wanna mention a couple of things,

138
00:08:13.127 --> 00:08:16.113
you'll notice the use of what's
called structured logging.

139
00:08:16.113 --> 00:08:19.545
Let's take a close look
at this error message.

140
00:08:19.545 --> 00:08:23.136
And if you're familiar
with the string feature,

141
00:08:23.136 --> 00:08:27.324
that allows you to put a little
dollar sign here in front and

142
00:08:27.324 --> 00:08:31.873
actually inject in a variable
to actually print on the string.

143
00:08:31.873 --> 00:08:33.741
You can see that you can do that, but

144
00:08:33.741 --> 00:08:36.368
that's actually is not
what's happening here.

145
00:08:36.368 --> 00:08:38.163
There's no dollar signs in front of this.

146
00:08:38.163 --> 00:08:42.940
And that's because we are saying that this
property name is called Employee ID, and

147
00:08:42.940 --> 00:08:46.440
as the second argument of this
function for log information,

148
00:08:46.440 --> 00:08:47.940
we're passing in the ID.

149
00:08:47.940 --> 00:08:51.755
And what this will do is it will
positionally, and what i mean by that is,

150
00:08:51.755 --> 00:08:55.398
this one is the first one,
with the curly braces, that comes first.

151
00:08:55.398 --> 00:08:58.273
So this is the first argument
that would go into there.

152
00:08:58.273 --> 00:09:00.418
It will assign this to this variable and

153
00:09:00.418 --> 00:09:03.937
then capture it in your logging
system as additional metadata.

154
00:09:03.937 --> 00:09:07.081
And you could use that
metadata to then filter down,

155
00:09:07.081 --> 00:09:10.592
depending on what the logging
system is capable of doing.

156
00:09:10.592 --> 00:09:13.662
I do wanna mention that you can
have as many of these as you want.

157
00:09:13.662 --> 00:09:18.009
So if you wanted to say,
update employee with ID and in department,

158
00:09:18.009 --> 00:09:21.233
if you were capturing
department in the request.

159
00:09:22.963 --> 00:09:24.726
&gt;&gt; Spencer Schneidenbach: You'll see
that it actually complains at you.

160
00:09:24.726 --> 00:09:28.865
This is actually a thing that
Microsoft provides to say, hey,

161
00:09:28.865 --> 00:09:31.690
you're not using this logger correctly.

162
00:09:31.690 --> 00:09:34.532
Number of parameters supplied in
the logging message template do not

163
00:09:34.532 --> 00:09:36.153
match the number of named parameters.

164
00:09:36.153 --> 00:09:37.877
So it's trying to help you here.

165
00:09:37.877 --> 00:09:41.395
That's when you would say, okay,
the department is Engineering, and

166
00:09:41.395 --> 00:09:42.963
then it'll stop complaining.

167
00:09:42.963 --> 00:09:46.382
And that's because it sees these
placeholders here and it says,

168
00:09:46.382 --> 00:09:48.815
you need to make sure
that you're using them.

169
00:09:48.815 --> 00:09:53.044
And you can see if you add more,
you get more error, which is pretty cool.

170
00:09:55.022 --> 00:09:56.883
&gt;&gt; Spencer Schneidenbach: Microsoft
trying to help you.

171
00:09:56.883 --> 00:09:58.066
Throw in your bone.

172
00:09:58.066 --> 00:09:59.871
Question, yes.

173
00:09:59.871 --> 00:10:01.780
&gt;&gt; Speaker 1: So, with the logger,

174
00:10:01.780 --> 00:10:07.317
is that just basically logging
messages within the stack trace?

175
00:10:07.317 --> 00:10:11.552
&gt;&gt; Spencer Schneidenbach: Yes,
well, in this case, it's logging

176
00:10:11.552 --> 00:10:16.276
messages within the console
that is running.

177
00:10:16.276 --> 00:10:20.906
So this isn't the stack trace per se,
a stack trace is an exception.

178
00:10:20.906 --> 00:10:24.976
Like, if you have an exception
that'll tell you all of the methods

179
00:10:24.976 --> 00:10:28.318
that were called up to and
to the top of that exception,

180
00:10:28.318 --> 00:10:31.966
to show you where the position
of your error message was at.

181
00:10:31.966 --> 00:10:34.923
Or your exception was being thrown.

182
00:10:34.923 --> 00:10:38.128
In this case,
it's actually logging into the console,

183
00:10:38.128 --> 00:10:40.474
which is what the logger does by default.

184
00:10:40.474 --> 00:10:41.880
So, that's where it's putting it.

185
00:10:41.880 --> 00:10:44.944
So that's why it has that
logging capability by default.

186
00:10:44.944 --> 00:10:48.416
If you wanted to add it to,
let's say, Datadog, or another log,

187
00:10:48.416 --> 00:10:50.524
some kind of log file or something else,

188
00:10:50.524 --> 00:10:54.010
you would add what was called
a logging provider to do that for you.

189
00:10:54.010 --> 00:10:57.217
And then you'd say, hey,
this is my Datadog location and API key,

190
00:10:57.217 --> 00:11:01.175
I wanna log into there, or I wanna log
into this application insights, instance.

191
00:11:01.175 --> 00:11:02.529
Just showing a brief example of this.

192
00:11:02.529 --> 00:11:04.068
This is not in the code.

193
00:11:04.068 --> 00:11:09.003
If you so wanted to, you could
expand your testing out to ensure

194
00:11:09.003 --> 00:11:13.676
that you're logging is happening
inside of your control.

195
00:11:13.676 --> 00:11:15.188
You can actually test for that.

196
00:11:15.188 --> 00:11:20.280
This is using a library called Mock
to actually create what's called

197
00:11:20.280 --> 00:11:25.110
a MockLogger, and
then another library called ILogger.Mock,

198
00:11:25.110 --> 00:11:28.736
to verify that we are updating
employee with ID.

199
00:11:28.736 --> 00:11:32.859
And this ID,
employee with ID successfully updated.

200
00:11:32.859 --> 00:11:36.906
So this is if you wanted to test to make
sure that something was actually happening

201
00:11:36.906 --> 00:11:37.572
to your log.

202
00:11:37.572 --> 00:11:41.271
Testing the ILogger interface directly
is actually rather difficult.

203
00:11:41.271 --> 00:11:44.224
You could write your own
to actually capture that,

204
00:11:44.224 --> 00:11:46.979
but I think that would be
a bit of a waste of time.

205
00:11:46.979 --> 00:11:50.111
The typical pattern that
I've seen in the wild for

206
00:11:50.111 --> 00:11:54.747
actually handling this is creating
a mock object using the Mock library.

207
00:11:54.747 --> 00:11:56.773
And that basically says, hey,

208
00:11:56.773 --> 00:12:01.500
I'm gonna you do a bunch of magic under
the hood to create this interface for

209
00:12:01.500 --> 00:12:05.122
you without having you to
define a concrete class for it.

210
00:12:05.122 --> 00:12:09.070
So, I just wanted to throw that out
there as something that you can do.

211
00:12:09.070 --> 00:12:13.815
I don't usually do this in practice,
and the reason I don't do this is that,

212
00:12:13.815 --> 00:12:16.226
typically, I just don't go that far.

213
00:12:16.226 --> 00:12:21.289
I don't test every possible permutation of
code, or possible thing that could happen.

214
00:12:21.289 --> 00:12:22.948
Simply because the time and

215
00:12:22.948 --> 00:12:27.722
the effort involved in doing something
like that usually isn't worthwhile.

216
00:12:27.722 --> 00:12:31.847
But in case you wanted to do that, you
can, and as I mentioned, I would do it in

217
00:12:31.847 --> 00:12:35.736
a business critical process,
where logging is absolutely necessary.

218
00:12:35.736 --> 00:12:38.557
And if this log doesn't happen,
Spencer loses his job, well,

219
00:12:38.557 --> 00:12:40.659
then I'm probably going
to write a test for it.

220
00:12:40.659 --> 00:12:42.668
But in practice,
I don't do this most of the time.

221
00:12:42.668 --> 00:12:43.921
It's there if you want it, though.

