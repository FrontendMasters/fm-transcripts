WEBVTT

1
00:00:00.330 --> 00:00:03.237
&gt;&gt; Spencer Schneidenbach: The next section
is about add a PUT request in this section

2
00:00:03.237 --> 00:00:05.065
to actually update our employees.

3
00:00:05.065 --> 00:00:08.785
And then we'll do some refactoring to
actually take away using our entity

4
00:00:08.785 --> 00:00:10.945
directly, which is our employee object.

5
00:00:10.945 --> 00:00:13.820
And we're gonna add a little layer
of abstraction between the two.

6
00:00:13.820 --> 00:00:16.995
So, first things first,
I'm gonna go ahead and

7
00:00:16.995 --> 00:00:21.726
close this solution file and
open up the next one, solution directory.

8
00:00:21.726 --> 00:00:24.389
There we go, TheEmployeeAPI.

9
00:00:24.389 --> 00:00:28.090
We're gonna go here and
we're going to open this project.

10
00:00:28.090 --> 00:00:33.147
So this is gonna be our starting point,
&gt;&gt; Spencer Schneidenbach: Right here,

11
00:00:33.147 --> 00:00:33.750
good.

12
00:00:33.750 --> 00:00:38.005
And when you open up the refactoring to
request classes part of the exercise,

13
00:00:38.005 --> 00:00:42.011
you can see that we have all of our
test project, everything that we add.

14
00:00:42.011 --> 00:00:43.599
All of these projects are additive.

15
00:00:43.599 --> 00:00:45.574
So everything that we do in one section,

16
00:00:45.574 --> 00:00:48.664
the code in the next section will
have all that completed code.

17
00:00:48.664 --> 00:00:52.503
So you can peek ahead or
run it, if you like.

18
00:00:52.503 --> 00:00:56.808
So first things first we're gonna do is
we're gonna expand our employee object

19
00:00:56.808 --> 00:00:57.586
a little bit.

20
00:00:57.586 --> 00:01:00.842
So I'm gonna copy and
paste these properties in.

21
00:01:00.842 --> 00:01:02.482
Let's talk through why I'm doing that.

22
00:01:02.482 --> 00:01:05.793
First of all, this is a very common thing,
where we have to go in and

23
00:01:05.793 --> 00:01:08.590
add something to another thing,
to an existing thing.

24
00:01:08.590 --> 00:01:14.187
We've got a new feature request, and
we need to add some new behavior.

25
00:01:14.187 --> 00:01:17.992
So, note that I added
a Social Security number seems to fall

26
00:01:17.992 --> 00:01:21.580
that an employee should have
a Social Security number.

27
00:01:21.580 --> 00:01:27.252
And then we have a huge amount of optional
fields, including phone number and email.

28
00:01:27.252 --> 00:01:34.917
And then we have all of these
address fields as well.

29
00:01:34.917 --> 00:01:39.751
If we go back to our program file, you're
gonna notice that our employee is unhappy.

30
00:01:39.751 --> 00:01:40.687
The compiler says,

31
00:01:40.687 --> 00:01:44.000
hey, the required member or
Social Security number needs to be there.

32
00:01:44.000 --> 00:01:48.078
And that's because we put Social Security
number in as a required parameter,

33
00:01:48.078 --> 00:01:49.390
as a required property.

34
00:01:49.390 --> 00:01:51.116
So I'm gonna go ahead and do that.

35
00:01:51.116 --> 00:01:58.462
So SocialSecurityNumber = 123-456-3445.

36
00:01:58.462 --> 00:02:00.604
I hope that's not somebody's
real Social Security number.

37
00:02:00.604 --> 00:02:03.918
[LAUGH] And hey, what do you know?

38
00:02:03.918 --> 00:02:07.423
3446, maybe they're twins.

39
00:02:07.423 --> 00:02:14.968
Okay, so, the following requirements get
handed down from boss or whatever, right?

40
00:02:14.968 --> 00:02:18.233
Because we are constantly changing
our system, we're constantly growing,

41
00:02:18.233 --> 00:02:19.523
we're constantly evolving.

42
00:02:19.523 --> 00:02:23.252
We need to be able to always
request a first and last name.

43
00:02:23.252 --> 00:02:27.013
First and last name needs to be on every
single employee object for updating, and

44
00:02:27.013 --> 00:02:30.881
we need to be able to update their first
name, last name, address, phone number,

45
00:02:30.881 --> 00:02:32.296
and email at any single time.

46
00:02:32.296 --> 00:02:33.579
So let's talk about PUT requests.

47
00:02:33.579 --> 00:02:38.151
So as I mentioned earlier,
in RESTful API design, and I put that in

48
00:02:38.151 --> 00:02:43.071
quotes because REST is a whole
different topic I don't wanna get into.

49
00:02:43.071 --> 00:02:48.815
But the colloquial kind of way that people
talk about RESTful APIs often talks about,

50
00:02:48.815 --> 00:02:51.066
how do you design your JSON APIs?

51
00:02:51.066 --> 00:02:55.424
And it's very common to have your GETs,
just simply do GETs, and

52
00:02:55.424 --> 00:02:59.621
your posts, do some kind of creation or
some kind of update, or

53
00:02:59.621 --> 00:03:02.649
some kind of action
associated to an object.

54
00:03:02.649 --> 00:03:06.208
And that PUTs are used for
kinda updating objects in place.

55
00:03:06.208 --> 00:03:06.911
So that's what we're gonna do.

56
00:03:06.911 --> 00:03:09.422
We're gonna have this PUT request come in.

57
00:03:09.422 --> 00:03:13.350
So we're gonna say, put requests, we can
typically use them to update a resource.

58
00:03:13.350 --> 00:03:15.777
So we've got all this code here,

59
00:03:15.777 --> 00:03:20.030
and I'm just gonna walk through
a little bit of it for you.

60
00:03:20.030 --> 00:03:24.874
Paste it in, and
you're gonna see that very similar to

61
00:03:24.874 --> 00:03:29.928
our MapGet where we get the ID
of an individual employee,

62
00:03:29.928 --> 00:03:36.801
we have a put request that allows us to
also update stuff about that employee.

63
00:03:36.801 --> 00:03:40.065
We have the employee object coming in,
if you wanted to,

64
00:03:40.065 --> 00:03:41.833
you can prefix with FromBody.

65
00:03:45.105 --> 00:03:47.973
&gt;&gt; Spencer Schneidenbach: Import this,
there we go.

66
00:03:47.973 --> 00:03:50.138
You could say this is from the route.

67
00:03:50.138 --> 00:03:54.130
Usually I don't bother with the from
route attributes, and then I say, okay,

68
00:03:54.130 --> 00:03:57.302
I'm gonna look up the existing
employees in my employee repo.

69
00:03:57.302 --> 00:04:00.715
I'm gonna say, if it doesn't exist,
then I'm gonna return a NotFound,

70
00:04:00.715 --> 00:04:02.245
very similar to how we do our GET.

71
00:04:02.245 --> 00:04:06.355
And then we're gonna do some very boring
property assignment all the way across.

72
00:04:06.355 --> 00:04:10.327
We wanna take our employee here and
update our existing employee, and

73
00:04:10.327 --> 00:04:13.910
then return that to say, hey,
yes, we updated this request.

74
00:04:13.910 --> 00:04:17.428
So pretty good so far.

75
00:04:17.428 --> 00:04:19.488
We, of course, wanna write a test for
this behavior.

76
00:04:19.488 --> 00:04:21.550
Let's test it manually first.

77
00:04:21.550 --> 00:04:25.919
Go here,
&gt;&gt; Spencer Schneidenbach: And

78
00:04:25.919 --> 00:04:31.160
we're gonna say, we see now that our
documentation includes a PUT request here.

79
00:04:31.160 --> 00:04:33.067
And we're gonna go try it out.

80
00:04:33.067 --> 00:04:35.802
We are going to say id of 1.

81
00:04:35.802 --> 00:04:38.619
This is just doing it
in Swagger real fast.

82
00:04:38.619 --> 00:04:41.732
And then we're going to say, well,
this is the body of the request,

83
00:04:41.732 --> 00:04:43.947
it's just giving us kind
of a little blueprint.

84
00:04:43.947 --> 00:04:45.220
We're gonna go ahead and go with it.

85
00:04:45.220 --> 00:04:51.965
Take out the id, I'm gonna say, Execute,
and I should get back a 200 response.

86
00:04:51.965 --> 00:04:56.608
And you'll see that if we
go back to Postman and

87
00:04:56.608 --> 00:05:02.093
look at our employee request,
oop, it's 5129.

88
00:05:02.093 --> 00:05:07.124
And by the way, somebody asked me if
your port number differs from mine,

89
00:05:07.124 --> 00:05:08.452
is that a problem?

90
00:05:08.452 --> 00:05:09.445
And the answer is no.

91
00:05:09.445 --> 00:05:10.733
They are gonna differ, but

92
00:05:10.733 --> 00:05:14.097
if you put them in, they're just
randomly assigned by ASP.NET Core.

93
00:05:14.097 --> 00:05:18.831
So just make sure that it's this
number here and you're good to go.

94
00:05:18.831 --> 00:05:21.608
And you can see that our
PUT request did succeed,

95
00:05:21.608 --> 00:05:26.350
because we got all that stuff that Swagger
gives out of the box, firstName string,

96
00:05:26.350 --> 00:05:28.877
lastName string, and all that good stuff.

97
00:05:28.877 --> 00:05:32.679
Pretty simple, pretty straightforward.

98
00:05:32.679 --> 00:05:36.018
Next, we're gonna actually test
our endpoint with a test, or

99
00:05:36.018 --> 00:05:40.239
at least we're gonna write something that
actually tests it to make sure that if

100
00:05:40.239 --> 00:05:44.338
as we change the behavior of this thing,
that the behavior doesn't change.

101
00:05:44.338 --> 00:05:48.499
So we're gonna go down here,
we're gonna go paste in our test, and

102
00:05:48.499 --> 00:05:52.093
you're gonna see it looks very
similar to the other ones.

103
00:05:52.093 --> 00:05:58.732
And we're just gonna assert that our
status code came back as successful.

104
00:05:58.732 --> 00:06:01.246
You could also write a test to say,

105
00:06:04.427 --> 00:06:10.925
&gt;&gt; Spencer Schneidenbach:
UpdateEmployee_ReturnsNotFoundForNonExist-

106
00:06:10.925 --> 00:06:12.828
entEmployee.

107
00:06:16.164 --> 00:06:21.267
&gt;&gt; Spencer Schneidenbach: Give it 9999,
something that we know doesn't exist,

108
00:06:21.267 --> 00:06:24.915
and we'll run our tests, dotnet test.

109
00:06:24.915 --> 00:06:26.306
It's complaining about something.

110
00:06:26.306 --> 00:06:29.259
Let's go here, let's go to
the problems and see what we've got.

111
00:06:29.259 --> 00:06:30.160
What do you have?

112
00:06:30.160 --> 00:06:33.230
What do you got for us?

113
00:06:33.230 --> 00:06:36.605
Output, here we go.

114
00:06:36.605 --> 00:06:39.608
Must be set in the object, okay, perfect.

115
00:06:39.608 --> 00:06:45.046
We'll go ahead and do that,
Social Security number 123-456,

116
00:06:45.046 --> 00:06:48.045
and then we'll just copy this across.

117
00:06:48.045 --> 00:06:54.833
Just to be nice and fast, boom,
boom, boom, boom, boom, there we go.

118
00:06:54.833 --> 00:07:02.367
Okay, now we'll go back to our tests, run
our tests, and they should all be passing.

119
00:07:02.367 --> 00:07:06.402
Right, we didn't update this to

120
00:07:06.402 --> 00:07:12.745
say, Assert.Equal(HttpStatusCode.NotFound,

121
00:07:12.745 --> 00:07:17.221
response.StatusCode), perfect.

122
00:07:17.221 --> 00:07:21.597
It's the only test that we have failing,
so we'll rerun the tests, and

123
00:07:21.597 --> 00:07:23.698
we'll see that they all pass now.

124
00:07:23.698 --> 00:07:27.865
And then the new requirements
are handed down.

125
00:07:27.865 --> 00:07:30.757
Boss calls and
says that we have a change request.

126
00:07:30.757 --> 00:07:34.007
Apparently people are abusing the fact
that you can update the first name and

127
00:07:34.007 --> 00:07:35.186
last name in the employee.

128
00:07:35.186 --> 00:07:38.038
And they also wanna hide the Social
Security number from the original GET

129
00:07:38.038 --> 00:07:41.122
request, and they wanna require getting
that information through a separate

130
00:07:41.122 --> 00:07:42.072
workflow of some kind.

131
00:07:42.072 --> 00:07:44.572
We'll worry about everything,
but except the last part,

132
00:07:44.572 --> 00:07:46.375
we won't get the Social Security number.

133
00:07:46.375 --> 00:07:50.004
Our GET inputs are officially
obsolete now and

134
00:07:50.004 --> 00:07:53.175
boss really wants us to do this quickly.

135
00:07:53.175 --> 00:07:55.351
So we're gonna go ahead and do it.

136
00:07:55.351 --> 00:07:58.549
The first thing that we're gonna do is
we're gonna just comment out some of

137
00:07:58.549 --> 00:08:01.202
the behavior that allows us to
change the first and last name.

138
00:08:01.202 --> 00:08:03.487
Okay, well,
that seems pretty straightforward.

139
00:08:03.487 --> 00:08:07.481
We're gonna go down here and get a little
room and say, well, boss said we can't

140
00:08:07.481 --> 00:08:10.776
update first and last name,
we'll just comment things out, right?

141
00:08:10.776 --> 00:08:12.261
It's pretty simple.

142
00:08:12.261 --> 00:08:16.060
And then from our GET request, we can just
go ahead and spin through each of those

143
00:08:16.060 --> 00:08:19.310
employees that we get and
just null out the Social Security number.

144
00:08:19.310 --> 00:08:20.780
That should do it, right?

145
00:08:20.780 --> 00:08:25.671
We'll go ahead and
copy that, put that here.

146
00:08:25.671 --> 00:08:27.666
We don't wanna return
the Social Security number.

147
00:08:27.666 --> 00:08:32.653
We're actually gonna not make it
a required field now, because now,

148
00:08:32.653 --> 00:08:36.552
let's see,
we don't want the compiler to complain.

149
00:08:39.126 --> 00:08:42.580
&gt;&gt; Spencer Schneidenbach: Perfect,
kinda perfect, right?

150
00:08:42.580 --> 00:08:44.506
We're gonna do the same thing down here.

151
00:08:44.506 --> 00:08:47.632
We get an individual employee,
we wanna say,

152
00:08:47.632 --> 00:08:51.815
employee.SocialSecurityNumber, and
just null that out.

153
00:08:51.815 --> 00:08:54.607
A job well done, you deploy that, right?

154
00:08:54.607 --> 00:08:58.203
Well, now we have a problem,
which is that we have an inherent

155
00:08:58.203 --> 00:09:02.988
mismatch between our storage, which is
our employee, and our request objects.

156
00:09:02.988 --> 00:09:06.831
And this doesn't seem like a big deal
when you're first starting out, but

157
00:09:06.831 --> 00:09:08.539
as your API grows in complexity,

158
00:09:08.539 --> 00:09:12.453
you're gonna find there's countless
examples of where this will happen.

159
00:09:12.453 --> 00:09:18.345
Where you need to return data that's in a
very different shape than how it's stored.

160
00:09:18.345 --> 00:09:22.229
And to be fair, the real world isn't
made up of GET, PUT, and POST, and

161
00:09:22.229 --> 00:09:25.373
DELETE, at least not completely,
of just dumb objects.

162
00:09:25.373 --> 00:09:28.586
Usually, you have some
additional actions or behaviors.

163
00:09:28.586 --> 00:09:31.779
The real world has a lot
of different workflows.

164
00:09:31.779 --> 00:09:35.806
Then APIs can be modeled to do
them in lots of different ways.

165
00:09:35.806 --> 00:09:40.546
So having your storage object be also the
object that you do requests in is kind of

166
00:09:40.546 --> 00:09:41.482
impractical.

167
00:09:41.482 --> 00:09:45.061
We may not like unit taskers in
the kitchen, as Alton Brown would say, but

168
00:09:45.061 --> 00:09:49.048
in programming and in ASP.NET Core, I find
them to be extremely valuable because

169
00:09:49.048 --> 00:09:51.095
I want this thing to
be good at this thing.

170
00:09:51.095 --> 00:09:54.595
I want my employee object to be really
good at being an employee object.

171
00:09:54.595 --> 00:09:59.338
I want my employee request objects
to be really good at being employee

172
00:09:59.338 --> 00:10:01.974
request objects and just let them be.

173
00:10:01.974 --> 00:10:04.393
So we're gonna do a little
bit of refactoring here.

174
00:10:04.393 --> 00:10:07.800
We're gonna get rid of returning
our employees directly.

175
00:10:07.800 --> 00:10:13.131
We wanna separate our storage medium
from the responses that we get.

176
00:10:13.131 --> 00:10:17.500
So we're gonna go to the Employee API and
we're gonna add a new folder and

177
00:10:17.500 --> 00:10:19.513
we're gonna call it Employees.

178
00:10:19.513 --> 00:10:22.393
Then I'm gonna go ahead and
add a new file,

179
00:10:22.393 --> 00:10:26.241
I'm gonna call it Class and
get employee response.cs.

180
00:10:26.241 --> 00:10:31.399
And then we're gonna see that I have
a lot of things here that I could use,

181
00:10:31.399 --> 00:10:33.952
that I could just copy and paste in.

182
00:10:33.952 --> 00:10:39.675
So let me kinda walk
through what these are and

183
00:10:39.675 --> 00:10:42.393
why they are useful.

184
00:10:42.393 --> 00:10:45.075
First of all, we have
a specifically separate request for

185
00:10:45.075 --> 00:10:46.288
creating our employees.

186
00:10:46.288 --> 00:10:48.281
We already know that our first and

187
00:10:48.281 --> 00:10:51.352
last name are required when
we create an employee.

188
00:10:51.352 --> 00:10:53.890
I've kinda changed the game
a little bit and just said,

189
00:10:53.890 --> 00:10:57.081
our Social Security number is no
longer required when we create them.

190
00:10:57.081 --> 00:10:59.410
And then we have our
get employee response.

191
00:10:59.410 --> 00:11:03.398
This Instead of returning the employee
back for the employee object back,

192
00:11:03.398 --> 00:11:05.689
we return back the get employee response.

193
00:11:05.689 --> 00:11:08.090
And you notice that we are missing
our Social Security number,

194
00:11:08.090 --> 00:11:09.277
which is exactly what we want.

195
00:11:09.277 --> 00:11:11.306
That's exactly
the requirement that we want.

196
00:11:11.306 --> 00:11:15.187
And then our update employee request
does not allow us to update the first,

197
00:11:15.187 --> 00:11:19.205
last name, or Social Security number,
exactly as our requirements state.

198
00:11:19.205 --> 00:11:22.072
So let's do a little bit of refactoring.

199
00:11:22.072 --> 00:11:25.153
I am going to copy this code in to

200
00:11:25.153 --> 00:11:30.075
alter our routes,
&gt;&gt; Spencer Schneidenbach: And

201
00:11:30.075 --> 00:11:34.201
we'll walk through each
of these examples and

202
00:11:34.201 --> 00:11:37.805
see all of the changes that we have made.

203
00:11:37.805 --> 00:11:43.101
I'm gonna delete these, paste these in.

204
00:11:43.101 --> 00:11:44.325
So a couple of things, first of all,

205
00:11:44.325 --> 00:11:46.190
it's gonna complain that we
need to import some stuff.

206
00:11:46.190 --> 00:11:50.492
That works, so we'll import that namespace
because we put it in a separate folder,

207
00:11:50.492 --> 00:11:53.897
put the classes in a separate namespace,
which is what we expect.

208
00:11:53.897 --> 00:11:57.537
First thing that we're doing is we
are now using a little bit of LINQ (Language Integrated Query).

209
00:11:57.537 --> 00:12:00.749
We're actually saying, hey, I want you to
project, I want you to select this thing,

210
00:12:00.749 --> 00:12:02.601
I want you to create
something different from it.

211
00:12:02.601 --> 00:12:06.995
So we're giving it our original employee
object, and then we're newing up a get

212
00:12:06.995 --> 00:12:10.167
employee response, and
we're putting it in this shape.

213
00:12:10.167 --> 00:12:12.322
And we're sending all of
those relevant properties.

214
00:12:12.322 --> 00:12:14.162
And you'll notice the get
employee response,

215
00:12:14.162 --> 00:12:16.554
as we said, does not have
a Social Security number anywhere.

216
00:12:16.554 --> 00:12:20.734
IntelliSense isn't finding one,
which is exactly what we wanted.

217
00:12:20.734 --> 00:12:25.459
And then from our single MapGet,
we are doing the same

218
00:12:25.459 --> 00:12:29.984
thing where we get employee response here,
okay?

219
00:12:29.984 --> 00:12:32.176
And our create employee request
is used in the same way.

220
00:12:32.176 --> 00:12:36.476
Instead of having the employee
be the body, the FromBody,

221
00:12:36.476 --> 00:12:39.574
put that there for make it super explicit.

222
00:12:39.574 --> 00:12:42.052
Instead of our post request
taking in that employee object,

223
00:12:42.052 --> 00:12:44.003
we're taking in the create
employee request.

224
00:12:44.003 --> 00:12:48.915
And then we're creating a new employee
object and then adding it to our repo.

225
00:12:48.915 --> 00:12:52.589
And then we have our update employee
request, which again, is different from

226
00:12:52.589 --> 00:12:55.818
our create in that we do not want them,
in this particular endpoint,

227
00:12:55.818 --> 00:12:59.510
to be able to update their first name and
last name and Social Security number.

228
00:12:59.510 --> 00:13:03.954
So we have all of that,
which is exactly what we want.

229
00:13:03.954 --> 00:13:05.921
And we can run our tests and

230
00:13:05.921 --> 00:13:10.140
see to make sure that we did
not break anything, right?

231
00:13:10.140 --> 00:13:13.643
We could go through and
test this ourselves, or

232
00:13:13.643 --> 00:13:18.908
we can just get a pass just a few
seconds later just by running our tests.

