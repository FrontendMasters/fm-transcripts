WEBVTT

1
00:00:00.090 --> 00:00:02.772
&gt;&gt; Spencer Schneidenbach: Minimal APIs,
that is the paradigm that we started with

2
00:00:02.772 --> 00:00:05.454
and I think that this is the one
that Microsoft really has

3
00:00:05.454 --> 00:00:09.920
at the beginning of projects, because it's
very similar to frameworks like Express.

4
00:00:09.920 --> 00:00:13.412
It's no secret that Microsoft wants
to attract more .NET developers,

5
00:00:13.412 --> 00:00:14.912
and frankly, I'm with them.

6
00:00:14.912 --> 00:00:19.909
I wanna see the ecosystem grow and
be prosperous for developers all over

7
00:00:19.909 --> 00:00:25.408
to see how awesome it is and
feel how awesome it is the same way I do.

8
00:00:25.408 --> 00:00:28.721
So a lot of the examples that they have
are using their minimal APIs, which

9
00:00:28.721 --> 00:00:32.463
is just like, define a weather forecast,
right, show you an example of that, and

10
00:00:32.463 --> 00:00:36.928
then let you edit that, let you mess
around with that, and then get started.

11
00:00:36.928 --> 00:00:40.469
However, for most of the production
code that I see out in the wild,

12
00:00:40.469 --> 00:00:42.097
they don't use minimal APIs.

13
00:00:42.097 --> 00:00:43.962
They use something called controllers.

14
00:00:43.962 --> 00:00:47.334
So I wanna talk about those, and
then what we're gonna do is we are gonna

15
00:00:47.334 --> 00:00:51.022
refactor our application to convert
it from minimal APIs to controllers.

16
00:00:51.022 --> 00:00:53.225
We're gonna walk through
every aspect of that.

17
00:00:53.225 --> 00:00:56.972
We're gonna see the good stuff,
the bad stuff, and everything in-between.

18
00:00:56.972 --> 00:00:58.988
So let's talk about it.

19
00:00:58.988 --> 00:01:01.098
First let's talk about
kinda the minimal API.

20
00:01:01.098 --> 00:01:04.668
So it's kind of there in the name, but

21
00:01:04.668 --> 00:01:10.033
they do have some limitations
compared to controllers.

22
00:01:10.033 --> 00:01:13.288
For 90% of use cases,
I think they're fine.

23
00:01:13.288 --> 00:01:17.304
But they do tend to be less flexible
than their controller counterparts.

24
00:01:17.304 --> 00:01:19.888
Controllers just have more support
because they've been around a lot longer.

25
00:01:19.888 --> 00:01:23.606
They've been around since
the .NET Framework days.

26
00:01:23.606 --> 00:01:28.347
As the project grows in size, minimal APIs
tend to feel a lot more boilerplatey and

27
00:01:28.347 --> 00:01:29.756
harder to organize.

28
00:01:29.756 --> 00:01:32.594
Controllers are a natural
organization unit for

29
00:01:32.594 --> 00:01:35.022
APIs, which we'll see as we get to them.

30
00:01:35.022 --> 00:01:39.702
And maybe most importantly, in the wild,
minimal APIs are simply less ubiquitous,

31
00:01:39.702 --> 00:01:44.196
they're less common than controllers,
which have been around for a lot longer.

32
00:01:45.416 --> 00:01:50.229
And finally, in my opinion, dependency
management for services that you use,

33
00:01:50.229 --> 00:01:55.006
that your API might use,
is simply just cleaner on controllers.

34
00:01:55.006 --> 00:01:59.785
And here's kind of a really exaggerated
example of a minimal API that has just way

35
00:01:59.785 --> 00:02:01.041
too many services.

36
00:02:01.041 --> 00:02:04.367
And yes,
I do define APIs that are fairly complex.

37
00:02:04.367 --> 00:02:08.491
Again, APIs can and
do model real business workflows.

38
00:02:08.491 --> 00:02:12.124
And real business workflows aren't
necessarily super straightforward,

39
00:02:12.124 --> 00:02:14.091
sometimes they're a little messy.

40
00:02:14.091 --> 00:02:18.369
If you define a minimal API that
requires that you use a lot of services,

41
00:02:18.369 --> 00:02:23.074
perhaps this is your incoming request,
this is your body of your request, but

42
00:02:23.074 --> 00:02:26.075
then you need to have
access to the database.

43
00:02:26.075 --> 00:02:30.592
We also need the HttpContext, because we
need to read certain headers from that,

44
00:02:30.592 --> 00:02:35.045
and, IEmailService, we need to be able
to send emails and text messages and

45
00:02:35.045 --> 00:02:37.348
then process payments on this endpoint.

46
00:02:37.348 --> 00:02:40.871
Then we've got our IWhateverService,
or IsThisEnoughServicesService?

47
00:02:40.871 --> 00:02:45.234
So minimal APIs can get
a little long in the tooth

48
00:02:45.234 --> 00:02:50.157
when you're talking about
dependency management.

49
00:02:50.157 --> 00:02:54.215
I think that minimal APIs are a great
way to get started in ASP.NET.

50
00:02:54.215 --> 00:02:56.397
But I vastly prefer controllers.

51
00:02:56.397 --> 00:03:00.871
My rule of thumb is around ten, and
if I think that the project has even

52
00:03:00.871 --> 00:03:05.348
a chance of being remotely complex or
growing beyond ten endpoints,

53
00:03:05.348 --> 00:03:10.953
I'm gonna just throw away minimal APIs and
start with controllers in general.

54
00:03:10.953 --> 00:03:15.937
And I got to emphasize that 99% of ASP.NET
Core development that I've been exposed to

55
00:03:15.937 --> 00:03:17.653
has all used controllers.

56
00:03:17.653 --> 00:03:21.900
So minimal APIs have their place for
really small services, microservices, or

57
00:03:21.900 --> 00:03:26.073
maybe you're adding them to an existing
project that doesn't have HTTP.

58
00:03:26.073 --> 00:03:30.473
Maybe it's some kind of service that you
wanna be able to add a health endpoint to.

59
00:03:30.473 --> 00:03:32.317
Minimal APIs would be a great use case for

60
00:03:32.317 --> 00:03:34.494
that if you're just
defining a couple of APIs.

61
00:03:34.494 --> 00:03:36.879
But beyond that,
it's all controllers for me.

62
00:03:36.879 --> 00:03:40.603
So a controller starts off as a class and
it inherits from Controller,

63
00:03:40.603 --> 00:03:41.685
as you can imagine.

64
00:03:41.685 --> 00:03:44.040
You could also inherit from
something called ControllerBase,

65
00:03:44.040 --> 00:03:45.965
which we can look at the source code for
both.

66
00:03:45.965 --> 00:03:48.034
But Controller gives you
lots of extra goodies, so

67
00:03:48.034 --> 00:03:50.315
I always inherit from Controller.

68
00:03:50.315 --> 00:03:51.900
And here's what it looks like.

69
00:03:51.900 --> 00:03:54.705
So let's break this
down just a little bit.

70
00:03:54.705 --> 00:03:56.574
First of all, we have our ApiController.

71
00:03:56.574 --> 00:04:02.007
Because we're, of course, focused on
building ASP.NET Core API specifically,

72
00:04:02.007 --> 00:04:06.293
the ApiController attribute just
gives it a few extra behaviors,

73
00:04:06.293 --> 00:04:08.707
which you can see here.

74
00:04:08.707 --> 00:04:13.057
So first things first, all endpoints
must use attribute-based routing.

75
00:04:13.057 --> 00:04:16.990
So it says that HttpGet, HttpPost,
all of those are required, which are good.

76
00:04:16.990 --> 00:04:19.857
That's how you define routes, and
that's how we wanna define routes.

77
00:04:21.418 --> 00:04:27.085
Returns a ProblemDetails object for
all 400 or 500 responses, which is good.

78
00:04:27.085 --> 00:04:30.185
It automatically returns
ValidationProblemDetails for

79
00:04:30.185 --> 00:04:32.278
400 bad request responses.

80
00:04:32.278 --> 00:04:36.562
It also automatically validates incoming
objects, but it doesn't apply in our case

81
00:04:36.562 --> 00:04:39.726
because we're using fluid validation,
which we will get to.

82
00:04:39.726 --> 00:04:42.223
We'll get to that a little later.

83
00:04:42.223 --> 00:04:45.623
And then it does some basic inference on
parameters to your controller methods,

84
00:04:45.623 --> 00:04:48.380
which means that you don't have
to use these attributes as much.

85
00:04:48.380 --> 00:04:52.118
I choose to in most of my production
projects, use them anyways.

86
00:04:52.118 --> 00:04:55.711
And to be honest with you, I'm not exactly
sure how this inference magic works under

87
00:04:55.711 --> 00:04:57.291
the hood, so I just bypass all that.

88
00:04:57.291 --> 00:05:01.169
I get rid of the magic, and then in
production APIs, I typically just use

89
00:05:01.169 --> 00:05:05.762
FromQuery, FromRoute, FromBody to be real
explicit about the method parameters.

90
00:05:07.702 --> 00:05:09.264
So you'll notice this kind of funny thing.

91
00:05:09.264 --> 00:05:13.813
You can think of this as kind of
a route group, kind of, a little bit,

92
00:05:13.813 --> 00:05:19.372
in that you can define a base route for
all of the methods on your controller.

93
00:05:19.372 --> 00:05:22.702
In this case, you see that there's
a [controller], and that's basically

94
00:05:22.702 --> 00:05:26.234
an ASP.NET built-in placeholder to say,
hey, we're just gonna take the name of

95
00:05:26.234 --> 00:05:29.161
the class that you've defined your
controller in, so in this case,

96
00:05:29.161 --> 00:05:32.707
it's Customers, and that's what we're
gonna put at the beginning of our route.

97
00:05:32.707 --> 00:05:40.017
So this CustomersController would
be /customers, pretty easy.

98
00:05:40.017 --> 00:05:41.771
We then have our HttpGet.

99
00:05:41.771 --> 00:05:46.543
So this would be akin to our
MapGet method on a minimal API.

100
00:05:46.543 --> 00:05:52.193
So we simply say that we define a method,
and like our minimal API method,

101
00:05:52.193 --> 00:05:56.206
it can have parameters to
take in route parameters or

102
00:05:56.206 --> 00:06:00.242
the body of the request or
even services if you like.

103
00:06:00.242 --> 00:06:01.292
And you can say HttpGet.

104
00:06:01.292 --> 00:06:03.296
That's how you mark it as a get request.

105
00:06:03.296 --> 00:06:06.297
That's equivalent to the MapGet, but
instead you're using an attribute.

106
00:06:07.627 --> 00:06:10.928
We return IActionResult,
which we'll get to a little later.

107
00:06:10.928 --> 00:06:13.397
That's basically kind
of our results class.

108
00:06:13.397 --> 00:06:17.291
And then we just name our method, and
typically, the name of the method isn't

109
00:06:17.291 --> 00:06:20.431
really used by ASP.NET Core
unless you explicitly tell it to.

110
00:06:20.431 --> 00:06:23.625
You can tell it, hey,
use the name of the method for this, but

111
00:06:23.625 --> 00:06:25.044
I typically choose not to.

112
00:06:26.825 --> 00:06:29.511
&gt;&gt; Spencer Schneidenbach: Our HttpGet
endpoint to get a single customer is

113
00:06:29.511 --> 00:06:35.008
very similar to the MapGet single employee
endpoint that we had previously defined.

114
00:06:35.008 --> 00:06:38.178
And you notice that
HttpGet has an argument.

115
00:06:38.178 --> 00:06:39.504
We can define the route in this argument.

116
00:06:39.504 --> 00:06:45.831
So it could be, we could say
customers/single/id if we choose.

117
00:06:45.831 --> 00:06:51.250
Most RESTful API design would just
simply say use the plural word,

118
00:06:51.250 --> 00:06:54.558
followed by slash, followed by the id.

119
00:06:54.558 --> 00:06:55.860
That's pretty typical.

120
00:06:55.860 --> 00:06:58.737
So that's defining this route
to the GetCustomerId, and

121
00:06:58.737 --> 00:07:02.097
it builds upon the route that's
defined up here in our controller.

122
00:07:03.307 --> 00:07:09.367
So this would be /customers/ and
then the id of your customer.

123
00:07:09.367 --> 00:07:13.856
So syntactically, and kind of in terms of
what it looks like when the rubber meets

124
00:07:13.856 --> 00:07:18.354
the road, they're very similar to minimal
APIs, but again, way more common.

125
00:07:20.381 --> 00:07:24.052
&gt;&gt; Spencer Schneidenbach: You could
read all about breakdown in this part.

126
00:07:24.052 --> 00:07:27.914
Just a couple of callouts is that
all of my APIs, without exception,

127
00:07:27.914 --> 00:07:30.303
return IActionResult.

128
00:07:30.303 --> 00:07:31.212
That is always the case.

129
00:07:31.212 --> 00:07:36.453
As I mentioned, same with minimal APIs,
I don't return the objects directly.

130
00:07:36.453 --> 00:07:38.483
I prefer to treat them as HTTP APIs and

131
00:07:38.483 --> 00:07:40.916
return it in explicit
status code every time

