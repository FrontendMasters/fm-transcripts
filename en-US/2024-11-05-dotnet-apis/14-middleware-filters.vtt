WEBVTT

1
00:00:00.000 --> 00:00:02.389
&gt;&gt; Spencer Schneidenbach: So
I wanna talk about middleware and

2
00:00:02.389 --> 00:00:05.105
filters as they relate to controllers.

3
00:00:05.105 --> 00:00:08.465
So I wanna give a brief
review on middleware.

4
00:00:08.465 --> 00:00:12.753
This image is from the ASP.NET Core docs,
and pretty well describes what I said

5
00:00:12.753 --> 00:00:16.465
earlier, which is that middleware
kinda flows like a pipeline, and

6
00:00:16.465 --> 00:00:19.731
middleware is simply different
sections of that pipeline.

7
00:00:19.731 --> 00:00:22.981
And as water, or in this case,
our request flows through that pipe,

8
00:00:22.981 --> 00:00:24.953
our middleware is able to do things to it.

9
00:00:24.953 --> 00:00:29.113
It can actually change the nature of
the request, but it can also just decide

10
00:00:29.113 --> 00:00:33.351
whether or not it can handle it, or move
it on to the next piece of middleware.

11
00:00:33.351 --> 00:00:35.340
That's what this illustrates, right?

12
00:00:35.340 --> 00:00:38.217
We have our piece of middleware,
it has some logic, and

13
00:00:38.217 --> 00:00:41.400
it's gonna call the next piece
of middleware if it realizes or

14
00:00:41.400 --> 00:00:44.482
if it figures out that it can't
itself handle the request.

15
00:00:44.482 --> 00:00:49.074
Or it's going to modify parts of
that request to add things to it for

16
00:00:49.074 --> 00:00:51.217
other middleware in the pipe.

17
00:00:51.217 --> 00:00:55.926
And then you'll remember that during
the intro to this, as we were talking

18
00:00:55.926 --> 00:01:00.785
about middleware inside of ASP.NET Core,
we were talking about how we could

19
00:01:00.785 --> 00:01:05.592
block pretty much all requests for
being handled by simply adding this "Use".

20
00:01:05.592 --> 00:01:07.817
Which is just a way of saying,

21
00:01:07.817 --> 00:01:13.167
add this middleware that's executed
from this delegate or function.

22
00:01:13.167 --> 00:01:17.495
We can use app.Use, and
as long as we don't call the next piece of

23
00:01:17.495 --> 00:01:22.393
middleware in the pipeline,
we're gonna go ahead and stop processing.

24
00:01:22.393 --> 00:01:26.679
So one of the things that you
can do as an experiment just for

25
00:01:26.679 --> 00:01:31.841
fun is open this solution up and
try copying and pasting this around and

26
00:01:31.841 --> 00:01:36.768
see how it modifies or
changes different aspects of your program.

27
00:01:36.768 --> 00:01:41.790
Middleware order is extremely important,
and especially when

28
00:01:41.790 --> 00:01:46.822
we're talking about authorization and
things of that nature.

29
00:01:46.822 --> 00:01:50.697
The order of middleware
becomes supremely important,

30
00:01:50.697 --> 00:01:54.495
especially as your application
grows in complexity.

31
00:01:56.141 --> 00:01:59.775
&gt;&gt; Spencer Schneidenbach: So this is the
typical middleware used in ASP.NET Core

32
00:01:59.775 --> 00:02:04.840
web app that might serve more than just
an API, it might serve static files.

33
00:02:04.840 --> 00:02:06.575
It actually would serve static files,

34
00:02:06.575 --> 00:02:08.947
because it would serve your JavaScript and
your CSS.

35
00:02:08.947 --> 00:02:11.201
So it has a middleware for that to say,

36
00:02:11.201 --> 00:02:15.364
if there's a static file that exists
at that path, then return that.

37
00:02:15.364 --> 00:02:18.425
Otherwise, move down to use routing,

38
00:02:18.425 --> 00:02:23.913
which is a way of establishing
routing rules inside of ASP.NET Core.

39
00:02:23.913 --> 00:02:27.340
Then, of course, use authentication and
then authorization.

40
00:02:27.340 --> 00:02:28.876
One must come before the other.

41
00:02:28.876 --> 00:02:31.645
You've got to authenticate.

42
00:02:31.645 --> 00:02:35.676
We have to know who you are before we can
determine that you can do the thing that

43
00:02:35.676 --> 00:02:36.863
you're asking to do.

44
00:02:36.863 --> 00:02:38.823
And then MapRazorPages,

45
00:02:38.823 --> 00:02:43.991
which is just a flavor of web
framework that ASP.NET Core provides,

46
00:02:43.991 --> 00:02:48.643
and then go down to controllers
if we can't go to a razor page.

47
00:02:48.643 --> 00:02:51.660
I wanna touch on, do I actually
ever write my own middleware?

48
00:02:51.660 --> 00:02:54.734
And the answer is that I do.

49
00:02:54.734 --> 00:02:58.716
It's not super often, because at
that point, I'm pretty well aware.

50
00:02:58.716 --> 00:03:00.459
It's not like I'm writing
middleware every week.

51
00:03:00.459 --> 00:03:02.634
It's like, I gotta handle this
different kind of request.

52
00:03:02.634 --> 00:03:05.331
Most of the time, if I'm adding endpoints,
I'm adding them to controllers or

53
00:03:05.331 --> 00:03:06.392
something along those lines.

54
00:03:06.392 --> 00:03:07.865
I'm adding them to controllers,

55
00:03:07.865 --> 00:03:10.670
because ASP.NET Core already
knows how to handle those things.

56
00:03:10.670 --> 00:03:11.877
But I have done it and

57
00:03:11.877 --> 00:03:15.430
here's a really brief example
of when I might have to do it.

58
00:03:15.430 --> 00:03:20.206
For example,
if I have a multi-tenant SaaS app and

59
00:03:20.206 --> 00:03:25.315
I need to establish what
tenant that we are working on,

60
00:03:25.315 --> 00:03:30.756
then I might read, if we say,
type in, if our application

61
00:03:30.756 --> 00:03:35.890
was something like the Microsoft
example of Contoso.

62
00:03:35.890 --> 00:03:41.237
And we decided that we would
discriminate on whether or

63
00:03:41.237 --> 00:03:46.827
not this was, say,
the subdomain of Frontend Masters.

64
00:03:46.827 --> 00:03:51.744
That that was the tenant that
frontendmasters.contoso.com was

65
00:03:51.744 --> 00:03:56.670
a specific tenant and pointed to
a specific piece of our software.

66
00:03:56.670 --> 00:03:59.496
So that way, we contained all
their data to that one place.

67
00:03:59.496 --> 00:04:02.096
We might read that Frontend Masters and

68
00:04:02.096 --> 00:04:06.440
then look up that tenants ID based
on the value of that subdomain.

69
00:04:06.440 --> 00:04:09.264
So stuff like this where
you're kind of building in or

70
00:04:09.264 --> 00:04:13.801
enhancing your application and adding in
specific behaviors that are custom to you.

71
00:04:13.801 --> 00:04:15.666
How do I identify this tenant so

72
00:04:15.666 --> 00:04:19.200
that downstream other middleware
can use that tenant ID?

73
00:04:19.200 --> 00:04:21.593
This is where you might do that.

74
00:04:21.593 --> 00:04:24.810
The purposes of this course, and for
the purposes of this discussion,

75
00:04:24.810 --> 00:04:27.877
it's important to know what
middleware is and what it's used for.

76
00:04:27.877 --> 00:04:31.483
But day-to-day, you don't really
have to think about it that much,

77
00:04:31.483 --> 00:04:33.900
because most of the time
you're setting it up.

78
00:04:33.900 --> 00:04:37.538
Once you're modifying it so often as
your business requirements change, and

79
00:04:37.538 --> 00:04:40.087
then you're just letting
ASP.NET Core do its thing.

80
00:04:40.087 --> 00:04:42.805
But I do want to talk about filters.

81
00:04:42.805 --> 00:04:47.957
And filters are a way to modify behavior
requests, but only after the request

82
00:04:47.957 --> 00:04:52.485
has actually been routed to something
that ASP.NET Core MVC does.

83
00:04:52.485 --> 00:04:54.897
So, for example, a controller method.

84
00:04:54.897 --> 00:04:58.041
At the point that it's actually going
through and executing that controller

85
00:04:58.041 --> 00:05:00.908
method, it's actually already done
a bunch of stuff under the hood.

86
00:05:00.908 --> 00:05:05.196
It's done some model binding, so it knows
that the body of the request goes into

87
00:05:05.196 --> 00:05:07.825
this particular object
that we've specified.

88
00:05:07.825 --> 00:05:11.690
So at that point, we can use filters
to even change that behavior further.

89
00:05:11.690 --> 00:05:14.460
You can think of them as micro middleware,
but

90
00:05:14.460 --> 00:05:19.021
they're very specialized to just
handle functions within ASP.NET Core.

91
00:05:19.021 --> 00:05:22.119
And there's a bunch of different
built-in types of middleware,

92
00:05:22.119 --> 00:05:25.051
there's authorization filters,
for example, to say that,

93
00:05:25.051 --> 00:05:27.557
are you authorized to use
this particular resource?

94
00:05:27.557 --> 00:05:32.586
Is this user have this permission,
or is this user part of this role?

95
00:05:32.586 --> 00:05:35.730
You could enable CORS (Cross-origin resource sharing)
for a specific action or controller.

96
00:05:35.730 --> 00:05:42.390
And that is to determine whether or not to
establish cross-domain boundary rules so

97
00:05:42.390 --> 00:05:47.828
that a browser can figure out,
can I actually access this resource,

98
00:05:47.828 --> 00:05:52.548
cuz it's outside of the webpage
that we're executing in?

99
00:05:52.548 --> 00:05:55.927
Should we cache this response?

100
00:05:55.927 --> 00:05:59.493
And for how long should we require HTTPS?

101
00:05:59.493 --> 00:06:02.116
Or maybe we have an AntiForgeryToken,

102
00:06:02.116 --> 00:06:05.219
because we wanna prevent
some kind of attack.

103
00:06:05.219 --> 00:06:10.179
So do we wanna validate
our ForgeryToken before we

104
00:06:10.179 --> 00:06:14.200
get to actually executing this method?

105
00:06:14.200 --> 00:06:16.555
So there's several different kinds.

106
00:06:16.555 --> 00:06:20.081
The one that we will touch on is the
authorize filter, which is very important.

