WEBVTT

1
00:00:00.210 --> 00:00:01.655
&gt;&gt; Spencer Schneidenbach: Talked
about EF core.

2
00:00:01.655 --> 00:00:05.756
Now let's talk about actually
adding it into our application.

3
00:00:05.756 --> 00:00:08.997
But before we do that,
we need to talk about a couple of things.

4
00:00:08.997 --> 00:00:12.427
So if you took my last course,
I talked about IEnumerable and

5
00:00:12.427 --> 00:00:13.713
LINQ (Language Integrated Query) in great detail.

6
00:00:13.713 --> 00:00:19.219
But there is a construct inside of
.NET that is equally as important and

7
00:00:19.219 --> 00:00:26.119
certainly much more important to libraries
like EF Core, and it's called IQueryable.

8
00:00:26.119 --> 00:00:29.650
So you'll remember that an IEnumerable
is a collection of things.

9
00:00:29.650 --> 00:00:32.029
It's an abstraction that
represents a collection of things.

10
00:00:32.029 --> 00:00:33.776
It could be a list of strings.

11
00:00:33.776 --> 00:00:36.536
It could be an array of strings,
whatever the case may be.

12
00:00:36.536 --> 00:00:40.548
And it has a couple of properties
that are important to note for

13
00:00:40.548 --> 00:00:42.179
this particular thing.

14
00:00:42.179 --> 00:00:46.956
Remember that you can do a foreach
loop through each of those items, right?

15
00:00:46.956 --> 00:00:48.319
So foreach can work on that.

16
00:00:48.319 --> 00:00:52.379
You'll recall as well that LINQ
can operate on IEnumerable.

17
00:00:52.379 --> 00:00:56.723
So all of those methods,
Select and Where and ToList,

18
00:00:56.723 --> 00:01:02.119
those are all extension methods
that are hooked onto IEnumerable.

19
00:01:02.119 --> 00:01:06.715
So copied straight from the last
course is lazy evaluation.

20
00:01:06.715 --> 00:01:08.785
Was I lazy when I was copying as well?

21
00:01:08.785 --> 00:01:13.490
Maybe so... But lazy evaluations is
a concept that basically states

22
00:01:13.490 --> 00:01:17.322
that when you create a certain
type of IEnumerable,

23
00:01:17.322 --> 00:01:22.654
like if you're using Where or Select,
those methods are not actually.

24
00:01:22.654 --> 00:01:24.981
Those methods are not actually called,

25
00:01:24.981 --> 00:01:27.993
those collections are not
actually materialized,

26
00:01:27.993 --> 00:01:32.519
until you start actually trying to access
objects, either by a foreach loop.

27
00:01:32.519 --> 00:01:36.891
Or something that brings them into memory,
ToList or ToArray.

28
00:01:36.891 --> 00:01:40.497
So this example,
numbers.Where defines the query, but

29
00:01:40.497 --> 00:01:43.374
it doesn't actually execute it immediately.

30
00:01:43.374 --> 00:01:47.947
And this is a really important property
like I said in my previous course,

31
00:01:47.947 --> 00:01:49.810
it has a lot of implications.

32
00:01:49.810 --> 00:01:52.541
There is one keyword that
you should look up and

33
00:01:52.541 --> 00:01:56.475
understand as you get into your
.NET journey It's called "yield".

34
00:01:56.475 --> 00:02:00.155
And it is something that,
as I mentioned in my previous course,

35
00:02:00.155 --> 00:02:02.214
a lot of complexity under the hood.

36
00:02:02.214 --> 00:02:06.385
But it essentially creates something
called a state machine that keeps track of

37
00:02:06.385 --> 00:02:08.885
what elements you've
returned at that point.

38
00:02:08.885 --> 00:02:11.005
Wouldn't worry too much about it now,

39
00:02:11.005 --> 00:02:13.972
except to understand
the implications of that thing.

40
00:02:13.972 --> 00:02:18.794
In addition to IEnumerable,
there's a construct called IQueryable, and

41
00:02:18.794 --> 00:02:21.355
that's where we're going to put a lot of

42
00:02:21.355 --> 00:02:24.536
our focus because it is
very important to EF Core.

43
00:02:24.536 --> 00:02:28.601
So it's an interface that represents a
collection of objects that can be queried.

44
00:02:28.601 --> 00:02:32.887
It is .NET Standard, so
it's in the core .NET libraries.

45
00:02:32.887 --> 00:02:39.628
And everything inside of EF Core that you
use to query databases is an IQueryable.

46
00:02:39.628 --> 00:02:44.454
It is similar, but different
from IEnumerable in one core way.

47
00:02:44.454 --> 00:02:49.158
It is used for querying data from
a non in memory data source.

48
00:02:49.158 --> 00:02:51.510
Remember that we're talking to a database,
right?

49
00:02:51.510 --> 00:02:54.346
We're not talking to a collection
of objects in memory.

50
00:02:54.346 --> 00:02:58.153
If we have a billion rows in a database,
it doesn't really make any sense for .NET

51
00:02:58.153 --> 00:03:01.753
to load all those billion rows just so
it can provide LINQ operations on them.

52
00:03:01.753 --> 00:03:04.891
And that's where IQueryable comes in.

53
00:03:04.891 --> 00:03:07.081
Before we can dive
further into IQueryable,

54
00:03:07.081 --> 00:03:09.798
we have to talk about these
things called Expressions.

55
00:03:09.798 --> 00:03:14.144
Now, I could do at least a half a day
course on the expression API and

56
00:03:14.144 --> 00:03:18.665
the implications of Expressions and
what they mean and what they do.

57
00:03:18.665 --> 00:03:23.079
But suffice it to say that
an Expression is similar

58
00:03:23.079 --> 00:03:27.820
to a function definition,
but not exactly the same.

59
00:03:27.820 --> 00:03:31.839
So these are both very
valid lines of C sharp.

60
00:03:31.839 --> 00:03:36.812
You have your ToLower method where you
defined a func or a function that takes

61
00:03:36.812 --> 00:03:41.882
in a string, a single parameter called
of string, and then returns a string.

62
00:03:41.882 --> 00:03:49.833
So, you can see that here in what
they call the expression body.

63
00:03:49.833 --> 00:03:53.472
You can see that here's our parameters,
and this is our expression body,

64
00:03:53.472 --> 00:03:54.586
which is s.ToLower.

65
00:03:54.586 --> 00:03:58.395
So, s goes into s.ToLower,
so it's a string, and

66
00:03:58.395 --> 00:04:02.564
then you call the ToLower method,
and this method will.

67
00:04:02.564 --> 00:04:07.784
You can invoke, just like any other
method, this is valid C sharp as well.

68
00:04:07.784 --> 00:04:09.271
But what does it do?

69
00:04:09.271 --> 00:04:14.205
Well, the difference is, is that the first
is a function that takes a string and

70
00:04:14.205 --> 00:04:15.604
returns a string, but

71
00:04:15.604 --> 00:04:19.746
the second is an expression which
represents the data structure.

72
00:04:19.746 --> 00:04:22.936
It's basically a data structure
that represents that function.

73
00:04:22.936 --> 00:04:30.249
And if you tried to,
let's go ahead and attempt to do that.

74
00:04:30.249 --> 00:04:36.762
In our code here,
we'll just write a random test,

75
00:04:36.762 --> 00:04:40.704
void ExpressionTest, go here.

76
00:04:40.704 --> 00:04:43.327
Let's copy and
paste these lines of code in, again,

77
00:04:43.327 --> 00:04:44.909
both of these are valid C sharp.

78
00:04:44.909 --> 00:04:49.943
I do believe this needs to be imported and
it does, okay, perfect.

79
00:04:52.668 --> 00:04:54.492
&gt;&gt; Spencer Schneidenbach: We'll
call it toLowerExpression.

80
00:04:54.492 --> 00:05:01.141
The difference is that if we wrote
a string, like, if we had a string like.

81
00:05:01.141 --> 00:05:05.880
Spencer, so var name="SPENCER".

82
00:05:05.880 --> 00:05:08.666
We call ToLower is a function.

83
00:05:08.666 --> 00:05:11.280
It's just a function
declared as a variable.

84
00:05:11.280 --> 00:05:15.443
So we can do that and you can see
that it takes in a single argument.

85
00:05:15.443 --> 00:05:21.714
We can pass in that name and
it's going to return spencer like that.

86
00:05:21.714 --> 00:05:26.112
The expression, however,
is not a function, at least not yet.

87
00:05:26.112 --> 00:05:27.508
It's actually a data structure.

88
00:05:27.508 --> 00:05:32.580
So if you try to call toLowerExpression,
and you try to call name,

89
00:05:32.580 --> 00:05:37.394
compiler is gonna complain at you and
say, what are you doing?

90
00:05:37.394 --> 00:05:41.333
This is not a thing ToLower method,
name, expression,

91
00:05:41.333 --> 00:05:43.969
expected 'cause it's not a method.

92
00:05:43.969 --> 00:05:48.469
So expressions have a lot of cool
properties and I could talk about them for

93
00:05:48.469 --> 00:05:50.440
another hour at the very least.

94
00:05:50.440 --> 00:05:55.441
But it's important to know that it's data
that an IQueryable can use, interpret,

95
00:05:55.441 --> 00:06:00.175
and then break it down into, translate it
into SQL so that a database can use it.

96
00:06:00.175 --> 00:06:05.166
Another fun fact about expressions is you
can create them real time at runtime,

97
00:06:05.166 --> 00:06:09.349
and then you can compile them, and
then call them like a function.

98
00:06:09.349 --> 00:06:13.945
So these actually can be compiled in
memory, kind of a really cool thing.

99
00:06:13.945 --> 00:06:17.953
So it is a representation of
code that is what it is, but

100
00:06:17.953 --> 00:06:20.576
it is not the code itself, not yet.

101
00:06:20.576 --> 00:06:22.526
And I could dive more into it.

102
00:06:22.526 --> 00:06:25.889
But if you did want to learn more,
and I'm not gonna do that now, but

103
00:06:25.889 --> 00:06:28.860
if you did wanna learn about it,
I have a talk at this point.

104
00:06:28.860 --> 00:06:30.657
It's been five years since
I've given that talk.

105
00:06:30.657 --> 00:06:32.909
I've been giving this talk for
ten years, and

106
00:06:32.909 --> 00:06:36.793
it still gets picked up by conferences,
because it's still a relevant topic.

107
00:06:36.793 --> 00:06:40.277
And even this five year old talk
has plenty of stuff in it, so

108
00:06:40.277 --> 00:06:41.750
I would recommend that.

109
00:06:41.750 --> 00:06:44.714
You go and
watch that if you wanna learn more, but

110
00:06:44.714 --> 00:06:49.125
I just wanted to explain IQueryable is
a construct that allows us to query

111
00:06:49.125 --> 00:06:51.827
a collection that does
not exist in memory.

112
00:06:51.827 --> 00:06:56.754
And that expression trees are kinda
the conduit with which we express to

113
00:06:56.754 --> 00:07:00.215
the IQueryable what it is we want and
how we get it.

