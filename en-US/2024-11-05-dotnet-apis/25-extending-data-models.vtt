WEBVTT

1
00:00:00.000 --> 00:00:03.303
&gt;&gt; Spencer Schneidenbach: So one of the
things that you can depend on in life is

2
00:00:03.303 --> 00:00:03.940
change.

3
00:00:03.940 --> 00:00:08.065
Change will happen everywhere and it will
certainly happen in your applications.

4
00:00:08.065 --> 00:00:11.460
So I wanted to take this opportunity
to change one of the classes,

5
00:00:11.460 --> 00:00:13.077
the EmployeeBenefits class.

6
00:00:13.077 --> 00:00:15.939
Because this is one of those things,
I promised you,

7
00:00:15.939 --> 00:00:20.199
if I saw something that I would not, what
I would use to demonstrate a thing, but

8
00:00:20.199 --> 00:00:22.766
I would not do in real life,
I would call it out.

9
00:00:22.766 --> 00:00:25.030
And I would say, EmployeeBenefits,

10
00:00:25.030 --> 00:00:29.489
besides the fact that I've never worked
in a payroll system very closely,

11
00:00:29.489 --> 00:00:33.188
as a programmer,
I probably wouldn't model this like this.

12
00:00:33.188 --> 00:00:36.856
I could think about a dozen different
ways as an employer to change this,

13
00:00:36.856 --> 00:00:38.911
benefits are incredibly complicated.

14
00:00:38.911 --> 00:00:42.411
So I have a mental model, but
I can tell you right now that for

15
00:00:42.411 --> 00:00:46.262
the purposes of this section of
the course about modification and

16
00:00:46.262 --> 00:00:49.354
about change,
I can say that this thing needs to go.

17
00:00:49.354 --> 00:00:52.121
So we're gonna rip it out entirely.

18
00:00:52.121 --> 00:00:56.057
So, sheesh, is that really necessary?

19
00:00:56.057 --> 00:00:59.509
Well, this is something we discussed
earlier that sometimes abstractions fit

20
00:00:59.509 --> 00:01:01.833
your current needs, and
then one day, they don't.

21
00:01:01.833 --> 00:01:04.812
And we're asked about migrations,
and how do you migrate data?

22
00:01:04.812 --> 00:01:08.783
You migrate data very carefully, and
with lots of people watching, ideally,

23
00:01:08.783 --> 00:01:11.465
to make sure that that data
migration is successful.

24
00:01:11.465 --> 00:01:14.200
So we're gonna go ahead and
create a couple of different classes.

25
00:01:14.200 --> 00:01:18.201
We're going to create a benefit class, and
then we're gonna create an EmployeeBenefit

26
00:01:18.201 --> 00:01:20.565
class to represent the joining
of those two things.

27
00:01:20.565 --> 00:01:25.830
We are going to remove our benefit type
and just have a benefit class entirely.

28
00:01:25.830 --> 00:01:27.959
So I'm gonna close this folder.

29
00:01:27.959 --> 00:01:32.620
I'm gonna open up my next version.

30
00:01:32.620 --> 00:01:37.474
Extending your data model and
model configuration, perfect.

31
00:01:37.474 --> 00:01:40.123
Make sure that my tests are in order,
good, this one does have.

32
00:01:40.123 --> 00:01:44.099
Okay, make sure our tests are good,
make sure our employee API is good.

33
00:01:44.099 --> 00:01:46.807
Okay, so I'm gonna go down
to this EmployeeBenefits.

34
00:01:46.807 --> 00:01:51.773
I'm going to wholesale remove this,
and I am going to go here,

35
00:01:51.773 --> 00:01:55.253
and I am going to destroy
all of that as well.

36
00:01:55.253 --> 00:01:59.584
And I'm gonna paste in our new classes.

37
00:01:59.584 --> 00:02:02.408
It's worth noting that
everything has an Int Id, and

38
00:02:02.408 --> 00:02:06.513
that's because we need a place to track
a unique record inside of a database.

39
00:02:06.513 --> 00:02:11.144
And an integer ID is frequently,
or a long, or a GUID,

40
00:02:11.144 --> 00:02:13.576
is frequently used to do so.

41
00:02:13.576 --> 00:02:17.925
So now we have the idea of a benefit,
could be dental, vision, health.

42
00:02:17.925 --> 00:02:21.323
And then we have an EmployeeBenefit,
which joins those two things together.

43
00:02:21.323 --> 00:02:27.312
It's basically a record that says, this
employee has this benefit, pretty awesome.

44
00:02:27.312 --> 00:02:33.676
So let's see,
let's dotnet build our way out of,

45
00:02:33.676 --> 00:02:39.458
let's get all of our
things figured out here.

46
00:02:39.458 --> 00:02:43.040
We don't have a benefit anymore,
this does not fit anymore.

47
00:02:43.040 --> 00:02:47.826
So actually, I'm just gonna delete it,
and I am going to take that out as well.

48
00:02:47.826 --> 00:02:51.991
And then rebuild the project, like I said,
let the compiler do all the work for me.

49
00:02:51.991 --> 00:02:55.501
I don't need to know where all of it is,
if the compiler is willing to tell me,

50
00:02:55.501 --> 00:02:56.203
I will take it.

51
00:02:56.203 --> 00:03:00.568
So we will take this out because it
is not, well, we'll go ahead and

52
00:03:00.568 --> 00:03:04.028
delete this now in case we
need this class in a second.

53
00:03:04.028 --> 00:03:06.750
Should be good to dotnet build everything.

54
00:03:06.750 --> 00:03:13.804
We got lots of other errors in our SeedData
class, we need to take those out as well.

55
00:03:13.804 --> 00:03:18.332
Boom, boom, boom, all right,
I'm gonna keep asking the compiler,

56
00:03:18.332 --> 00:03:20.074
what is all the good stuff?

57
00:03:20.074 --> 00:03:23.088
We don't have a benefits,
we take that out as well.

58
00:03:23.088 --> 00:03:26.068
We don't have a, let's see,
you get employee response.

59
00:03:26.068 --> 00:03:30.872
Get employee response has benefits,
axe'em, okay.

60
00:03:33.700 --> 00:03:37.475
&gt;&gt; Spencer Schneidenbach: Dotnet test,
let our compiler guide the way, or

61
00:03:37.475 --> 00:03:38.679
dotnet build.

62
00:03:38.679 --> 00:03:41.838
And, no,
we've just wanna dotnet build for now.

63
00:03:41.838 --> 00:03:43.975
We don't need to run our tests yet,
perfect.

64
00:03:43.975 --> 00:03:47.180
Okay, we've gotten all of our
old benefits out of there.

65
00:03:47.180 --> 00:03:51.102
In practicality, you're probably not gonna
do it like that where you just wholesale,

66
00:03:51.102 --> 00:03:52.965
drop a table, and remove all that stuff.

67
00:03:52.965 --> 00:03:54.597
You're probably gonna refactor in place.

68
00:03:54.597 --> 00:03:59.259
But for the purposes of this
demonstration, that'll be good enough.

69
00:03:59.259 --> 00:04:04.534
So now we're gonna add a migration to
actually remove our old benefits table.

70
00:04:04.534 --> 00:04:13.222
So let's go ls, cd TheEmployeeAPI,
&gt;&gt; Spencer Schneidenbach: Paste that in.

71
00:04:13.222 --> 00:04:15.375
And one rule about migrations,

72
00:04:15.375 --> 00:04:20.086
you never run them until you look at
them and make sure they make sense.

73
00:04:20.086 --> 00:04:20.800
In this case,

74
00:04:20.800 --> 00:04:24.798
I haven't made any other data changes
that I know of that would cause problems.

75
00:04:24.798 --> 00:04:27.280
This is exactly what I want,
I wanna drop that table.

76
00:04:27.280 --> 00:04:33.180
So I'm gonna say,
dotnet ef database update.

77
00:04:36.040 --> 00:04:41.395
&gt;&gt; Spencer Schneidenbach: And we're gonna
see that the EmployeeBenefits table

78
00:04:41.395 --> 00:04:47.465
did get indeed dropped,
which is what we expect, awesome.

79
00:04:47.465 --> 00:04:51.174
Okay, now we can add our new
entities to our context,

80
00:04:51.174 --> 00:04:54.065
which is Benefit and EmployeeBenefits.

81
00:04:54.065 --> 00:04:56.744
We're gonna go ahead and do that.

82
00:04:56.744 --> 00:05:00.554
And that looks pretty good, but
we're not quite ready for a migration.

83
00:05:00.554 --> 00:05:03.684
There's one other change that
I want to make, which is,

84
00:05:03.684 --> 00:05:06.110
I wanna focus in on this EmployeeBenefits.

85
00:05:06.110 --> 00:05:09.526
I'm going to pretend for
a second that this EmployeeBenefits

86
00:05:09.526 --> 00:05:13.413
wants to represent one unique record,
for an employee and a benefit.

87
00:05:13.413 --> 00:05:18.102
So an employee with record id 1
should have no more than zero or

88
00:05:18.102 --> 00:05:20.543
one records with benefit id 1.

89
00:05:20.543 --> 00:05:22.721
So I wanna do what's
called add a unique index.

90
00:05:22.721 --> 00:05:26.749
So what I can do is use the Entity
Framework Core configuration tools in

91
00:05:26.749 --> 00:05:29.833
the DbContext to actually
model that relationship.

92
00:05:29.833 --> 00:05:34.854
And that's where the OnModelCreated 
method comes in.

93
00:05:34.854 --> 00:05:38.559
So if we go here, and you see OnModelCreating
, we'll just blank that out.

94
00:05:38.559 --> 00:05:42.972
And we will say that we want to
add a specific property to this

95
00:05:42.972 --> 00:05:45.012
EmployeeBenefits class.

96
00:05:45.012 --> 00:05:47.882
So we'll say modelBuilder.Entity.

97
00:05:47.882 --> 00:05:52.158
We'll give it the generic type,
EmployeeBenefit, and

98
00:05:52.158 --> 00:05:54.571
then we will say, .HasIndex.

99
00:05:54.571 --> 00:05:58.557
So the way that you typically create
uniqueness across lots of fields is they

100
00:05:58.557 --> 00:06:01.809
would either be your key, or
you will create an index on them.

101
00:06:01.809 --> 00:06:06.440
And we will create the index like so
where we got our benefit.

102
00:06:06.440 --> 00:06:11.248
So we will say, new, and this is
just object initialization syntax to

103
00:06:11.248 --> 00:06:16.396
instruct EF Core that these are the two
fields we wanna create our index on.

104
00:06:16.396 --> 00:06:21.270
So we've got BenefitId and b.EmployeeId.

105
00:06:21.270 --> 00:06:25.844
And then we say, IsUnique.

106
00:06:25.844 --> 00:06:31.888
Now we should be ready
to run our migration.

107
00:06:31.888 --> 00:06:36.952
Let's see, a little bit more about
model creating, first though,

108
00:06:36.952 --> 00:06:42.114
you can use it to configure indexes,
foreign keys, relationships.

109
00:06:42.114 --> 00:06:45.550
You can use it to alter
the property types of columns.

110
00:06:45.550 --> 00:06:47.783
So for example, in SQL Server,

111
00:06:47.783 --> 00:06:52.179
you can have columns with a maximum
width or even a fixed width.

112
00:06:52.179 --> 00:06:56.502
And you can define those properties,
you can either do it using attributes,

113
00:06:56.502 --> 00:06:57.576
which I have done.

114
00:06:57.576 --> 00:07:01.232
I prefer to use the fluent
OnModelCreating API.

115
00:07:01.232 --> 00:07:03.779
So if you needed to change
the data type for something.

116
00:07:03.779 --> 00:07:04.872
And I'll do this often.

117
00:07:04.872 --> 00:07:09.165
If I have something I wanna store in a
database but I don't want a table for it,

118
00:07:09.165 --> 00:07:12.135
what I'll do is,
I'll just store it as a JSON blob and

119
00:07:12.135 --> 00:07:14.467
then store it as text in a database field.

120
00:07:14.467 --> 00:07:18.349
That's something that I do sometimes.

121
00:07:18.349 --> 00:07:25.255
So let's add our things here,
we'll go ahead and paste that in.

122
00:07:25.255 --> 00:07:27.331
And then we're gonna take
a look at our migrations,

123
00:07:27.331 --> 00:07:28.662
cuz we never look at migrations.

124
00:07:28.662 --> 00:07:30.343
We never run them before we look at them.

125
00:07:30.343 --> 00:07:34.648
We got our new benefits table,
which is exactly what we would expect, and

126
00:07:34.648 --> 00:07:37.713
we've got our new
EmployeeBenefits table as well.

127
00:07:37.713 --> 00:07:42.783
And you'll notice here that there is,
indeed,

128
00:07:42.783 --> 00:07:48.102
EF Core has instructed
the migration that we will,

129
00:07:48.102 --> 00:07:53.681
indeed, create a unique
index on these two columns.

130
00:07:53.681 --> 00:07:57.521
So that way,
there can only be exactly zero or

131
00:07:57.521 --> 00:08:02.182
one record with those employee and
BenefitId fields.

132
00:08:02.182 --> 00:08:06.678
So that's good, it's what we want.

133
00:08:06.678 --> 00:08:10.812
We do need to update our migrate and
seed to add in benefits, so

134
00:08:10.812 --> 00:08:12.730
we will go ahead and do that.

135
00:08:12.730 --> 00:08:18.997
I'm gonna just copy and paste that here,
Cmd+T for find things really fast.

136
00:08:18.997 --> 00:08:23.400
I think I copied this wholesale, perfect.

137
00:08:25.351 --> 00:08:28.133
&gt;&gt; Spencer Schneidenbach: And then,
we don't have a Benefits class, so

138
00:08:28.133 --> 00:08:30.679
we're gonna go ahead and
go back and add that.

139
00:08:30.679 --> 00:08:35.046
We're gonna go back and
add that to our employee property.

140
00:08:35.046 --> 00:08:40.111
We're gonna see, so I'm gonna say,
Cmd+dot, nope, that's not gonna do it.

141
00:08:40.111 --> 00:08:45.060
I'm gonna go to employee,

142
00:08:45.060 --> 00:08:49.149
and I'm going to say,

143
00:08:49.149 --> 00:08:56.694
public List<Benefit> Benefits { get;  set; }.

144
00:08:56.694 --> 00:09:01.593
And we will set it to a new instance
of a list, which will be good.

145
00:09:01.593 --> 00:09:08.127
And let's see, these are EmployeeBenefits,
so we need to put that there, perfect.

146
00:09:08.127 --> 00:09:11.918
Okay, compiler no longer complaining,
that's what we like.

147
00:09:11.918 --> 00:09:15.026
The last thing that we
will do is uncomment out,

148
00:09:15.026 --> 00:09:18.457
you remember our
{employeeId}/benefits endpoint.

149
00:09:18.457 --> 00:09:20.542
We'll go ahead and uncomment that out.

150
00:09:20.542 --> 00:09:25.623
And I'm gonna do that by simply
copying and pasting over here.

151
00:09:25.623 --> 00:09:32.036
Go to my EmployeesController and

152
00:09:32.036 --> 00:09:35.015
paste that in.

153
00:09:35.015 --> 00:09:39.609
And then we did change this record, we
did delete something from it in order for

154
00:09:39.609 --> 00:09:40.523
it to compile.

155
00:09:40.523 --> 00:09:44.439
But we now have a name and a description,
which we're getting from our benefit

156
00:09:44.439 --> 00:09:46.889
record, so
we're gonna go ahead and add that.

157
00:09:46.889 --> 00:09:54.506
We take our EmployeeId, prop string Name,
prop string Description.

158
00:09:57.483 --> 00:10:01.032
&gt;&gt; Spencer Schneidenbach: We'll set
these fields as required to be set so

159
00:10:01.032 --> 00:10:03.217
that it doesn't complain.

160
00:10:03.217 --> 00:10:07.273
And we'll switch back here, and
we will see that this works,

161
00:10:07.273 --> 00:10:09.782
which is good, which is what we want.

162
00:10:09.782 --> 00:10:15.612
And then we're gonna uncomment out our
tests and run them and see what happens.

163
00:10:18.100 --> 00:10:21.282
&gt;&gt; Spencer Schneidenbach: We
want to see an OK result, and

164
00:10:21.282 --> 00:10:26.290
we are expecting to see two
benefits from this test.

165
00:10:26.290 --> 00:10:30.427
We're expecting to see two
benefits from this API.

166
00:10:30.427 --> 00:10:35.788
And why didn't it run, I need to run
it in the root directory, don't I?

167
00:10:35.788 --> 00:10:37.455
Dotnet test, there we go.

168
00:10:39.901 --> 00:10:43.466
&gt;&gt; Spencer Schneidenbach: Modifier public,
what is it complaining about?

169
00:10:43.466 --> 00:10:48.952
Wholesale erased the class,
and I didn't mean to,

170
00:10:48.952 --> 00:10:54.240
public class SeedData
&gt;&gt; Spencer Schneidenbach: Redefine

171
00:10:54.240 --> 00:10:58.166
that and so
that our compiler is happy with us.

172
00:11:00.680 --> 00:11:03.913
&gt;&gt; Spencer Schneidenbach: Run dotnet test.

173
00:11:03.913 --> 00:11:08.264
We see that we have one failure,
the collection contained two items,

174
00:11:08.264 --> 00:11:10.120
this is again, what is this?

175
00:11:10.120 --> 00:11:13.185
Is this the same thing
that was happening before?

176
00:11:13.185 --> 00:11:20.679
Custom application factory,
employees returns one result.

177
00:11:20.679 --> 00:11:25.719
Yes, I think we need to change this to Yann and

178
00:11:25.719 --> 00:11:30.893
then rerun our tests to see
that everything passed.

179
00:11:30.893 --> 00:11:33.016
That's what we wanted, perfect.

180
00:11:33.016 --> 00:11:36.911
We don't want two Johns,
we want one, we were creating one.

181
00:11:36.911 --> 00:11:40.247
Okay, good to go.

182
00:11:40.247 --> 00:11:44.405
One a couple of other
notes that I wanna make.

183
00:11:44.405 --> 00:11:46.906
We stopped returning benefits
in the employee mainly for

184
00:11:46.906 --> 00:11:50.616
convenience in this refactor, because it
is already a pretty extensive refactor.

185
00:11:50.616 --> 00:11:52.767
Sometimes you'll keep things like that,
sometimes you won't.

186
00:11:52.767 --> 00:11:55.915
It really is just going to depend
on the case that you're doing.

187
00:11:55.915 --> 00:12:01.127
I do wanna note as well that our call
to get our benefits has a call to,

188
00:12:01.127 --> 00:12:04.419
first, we're getting the employee, and

189
00:12:04.419 --> 00:12:08.822
we are including the benefits
object from the employee.

190
00:12:08.822 --> 00:12:12.802
And then we have this
call called ThenInclude,

191
00:12:12.802 --> 00:12:19.479
which points to the Benefit on our
EmployeeBenefits, which we see right here.

192
00:12:19.479 --> 00:12:24.726
Let's go, Ctrl+T, EmployeesController,

193
00:12:24.726 --> 00:12:28.537
scroll to the bottom, look here.

194
00:12:28.537 --> 00:12:32.406
And we see that this ThenInclude,
is actually operating off of this Include

195
00:12:32.406 --> 00:12:34.895
statement, which is for
our EmployeeBenefit.

196
00:12:34.895 --> 00:12:37.974
And if we navigate it to this property,
you will see that it is, indeed,

197
00:12:37.974 --> 00:12:38.994
our EmployeeBenefit.

198
00:12:38.994 --> 00:12:43.261
So you can use ThenInclude to say,
not only do I want to include employees,

199
00:12:43.261 --> 00:12:47.145
I wanna have my employees record,
and then I wanna get my benefits.

200
00:12:47.145 --> 00:12:51.261
But I also, on top of that,
wanna get the benefit record,

201
00:12:51.261 --> 00:12:55.378
the original benefit record
from that EmployeeBenefit.

202
00:12:55.378 --> 00:12:58.183
And we did this to prevent
null reference exception.

203
00:12:58.183 --> 00:13:02.506
If we run this, if we don't have this in
here, it's not gonna return the benefit

204
00:13:02.506 --> 00:13:06.387
object, and Entity Framework won't
automatically bring it to us, and

205
00:13:06.387 --> 00:13:09.838
we'll get a null reference exception,
and thus a failed test.

206
00:13:09.838 --> 00:13:11.748
Yeah, 500 internal server error.

207
00:13:11.748 --> 00:13:16.081
And it'll be because this
Benefit property wasn't set and

208
00:13:16.081 --> 00:13:18.774
get null reference, it's what happens.

209
00:13:18.774 --> 00:13:23.137
So that is updating the data model.

210
00:13:23.137 --> 00:13:27.217
There is a ton of stuff under the hood
in terms of databases that we simply

211
00:13:27.217 --> 00:13:28.109
cannot cover.

212
00:13:28.109 --> 00:13:32.303
We talked about unique indexes, we talked
about migrations, creating tables,

213
00:13:32.303 --> 00:13:33.285
dropping tables.

214
00:13:33.285 --> 00:13:38.619
I highly recommend you learn about SQL and
take a SQL course of some kind if

215
00:13:38.619 --> 00:13:44.306
you don't know it already because a lot
of this stuff will eventually require

216
00:13:44.306 --> 00:13:49.928
some SQL knowledge in order to be as most
effective with EF Core as you can be.

