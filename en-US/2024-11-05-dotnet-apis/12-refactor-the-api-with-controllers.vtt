WEBVTT

1
00:00:00.190 --> 00:00:01.624
&gt;&gt; Spencer Schneidenbach: How
do you make ASP.NET Core?

2
00:00:01.624 --> 00:00:05.006
Use your APIs, it's very simple,
first things first,

3
00:00:05.006 --> 00:00:08.251
we're gonna go here, and
we're gonna go to Program.

4
00:00:08.251 --> 00:00:12.570
I'm gonna go, close this,
and you're gonna say,

5
00:00:12.570 --> 00:00:17.010
inside your builder.Services,
AddControllers.

6
00:00:17.010 --> 00:00:20.199
So, this is the thing that actually
will add controllers to the dependency

7
00:00:20.199 --> 00:00:23.164
injection pipeline,
without it controllers won't work.

8
00:00:23.164 --> 00:00:26.791
But that's good, because it means you're
being explicit about it, and you may

9
00:00:26.791 --> 00:00:30.434
not want to include stuff that you're
not using, so we add controllers, boom.

10
00:00:31.684 --> 00:00:38.964
And then down here,
at the bottom of our thing,

11
00:00:38.964 --> 00:00:43.697
we would say MapControllers,

12
00:00:43.697 --> 00:00:46.800
there we go, boom.

13
00:00:46.800 --> 00:00:50.241
And that will put your
controller in the middleware,

14
00:00:50.241 --> 00:00:55.288
such that it will actually look for
a controller that has that matching Route,

15
00:00:55.288 --> 00:00:58.365
and then it will attempt
to handle that method.

16
00:00:58.365 --> 00:01:03.368
So, brief overview of controllers,
in the next section,

17
00:01:03.368 --> 00:01:07.280
we will actually add
them to our employee API.

18
00:01:07.280 --> 00:01:11.134
All right, so we are going to go ahead and
rip out all of the minimal APIs, and

19
00:01:11.134 --> 00:01:13.556
we're gonna convert them
all to controllers.

20
00:01:13.556 --> 00:01:18.306
And the cool thing is that a lot of this
behavior, we've got them backed by tests.

21
00:01:18.306 --> 00:01:21.827
So, in a real life scenario, if you had
to do this, you could just run the tests.

22
00:01:21.827 --> 00:01:25.351
And assuming your tests were complete
enough and were really substantial enough,

23
00:01:25.351 --> 00:01:28.067
then you can have a lot of confidence
that your refactor worked,

24
00:01:28.067 --> 00:01:29.348
which is what we've gained.

25
00:01:29.348 --> 00:01:32.285
We've gained a fair amount of
confidence because our tests are pretty

26
00:01:32.285 --> 00:01:33.038
comprehensive.

27
00:01:34.898 --> 00:01:40.043
So, first things first, I always typically
create a BaseController, so if you took my

28
00:01:40.043 --> 00:01:45.088
last course, you'll have heard me say that
I'm not a big believer in inheritance.

29
00:01:45.088 --> 00:01:50.304
I usually go no more than one or two
levels deep, controllers are one of those

30
00:01:50.304 --> 00:01:55.568
things that I almost exclusively will
create a base method for right away.

31
00:01:55.568 --> 00:02:00.448
Then typically, I do that because,
depending on the nature of the project,

32
00:02:00.448 --> 00:02:03.225
I will often have additional behaviors, or

33
00:02:03.225 --> 00:02:07.079
even custom IActionResults
that I might wanna return.

34
00:02:07.079 --> 00:02:11.459
And I`ll typically use a BaseController
to do that, so I always define my own.

35
00:02:11.459 --> 00:02:15.282
Creating your own base controller
class has one other advantage,

36
00:02:15.282 --> 00:02:19.390
which is that we can go ahead and
slap on all of these things that we need.

37
00:02:19.390 --> 00:02:24.846
And don't have to reapply them to
subsequent controllers that we create,

38
00:02:24.846 --> 00:02:27.800
so I'm gonna go ahead and put this here.

39
00:02:27.800 --> 00:02:30.809
I'm gonna create a new file,
I'm gonna call it a Class file, and

40
00:02:30.809 --> 00:02:34.223
it's gonna ask me the name, and
I'm just gonna call it BaseController.

41
00:02:39.939 --> 00:02:41.612
&gt;&gt; Spencer Schneidenbach: Put that
using statement at the top, so

42
00:02:41.612 --> 00:02:43.540
that we're nice and organized, one thing,

43
00:02:43.540 --> 00:02:47.259
there's a small typo, I'm gonna go ahead
and delete this API, cuz we don't need it.

44
00:02:47.259 --> 00:02:51.862
A lot of times when you're building
an API project, sometimes, depending on

45
00:02:51.862 --> 00:02:56.833
the nature of the project, you might put
your APIs behind a particular Route piece.

46
00:02:56.833 --> 00:03:02.042
You might say /API/customers, or
/API/employees, in this case, we're

47
00:03:02.042 --> 00:03:07.187
just keeping it all in the base to just
keep it simple, so take that out, boom.

48
00:03:08.717 --> 00:03:12.083
The cool thing is that any controller
that inherits from BaseController, so

49
00:03:12.083 --> 00:03:15.311
if we add ten or 100, as long as they
all inherit from BaseController.

50
00:03:15.311 --> 00:03:20.044
We'll get all of the goodies that come
with this APIController marker being on

51
00:03:20.044 --> 00:03:21.607
our controller.

52
00:03:21.607 --> 00:03:25.908
And then, of course,
we've defined a Route for each of them,

53
00:03:25.908 --> 00:03:28.357
where we just say (controller).

54
00:03:28.357 --> 00:03:31.906
So, we say that any EmployeeController
that we create will be Employee,

55
00:03:31.906 --> 00:03:33.232
or Employees in this case.

56
00:03:33.232 --> 00:03:36.086
Employees will have a Route of /Employees,
and

57
00:03:36.086 --> 00:03:39.705
then Customers would have a Route
of /Customers, and so on,

58
00:03:39.705 --> 00:03:43.205
anybody that inherits from this
base class will have that.

59
00:03:44.945 --> 00:03:48.472
We'll go ahead and then create our
EmployeesController inside of our

60
00:03:48.472 --> 00:03:51.708
Employees directory, now,
I deviate from Microsoft on this.

61
00:03:51.708 --> 00:03:56.626
If you look at most codebases, including
most codebases in the wild, you'll

62
00:03:56.626 --> 00:04:01.618
see that lots of times the organization
unit seems to be by the thing itself, but

63
00:04:01.618 --> 00:04:04.617
not by the business thing that it solves.

64
00:04:04.617 --> 00:04:06.424
So, a controller is often created,

65
00:04:06.424 --> 00:04:09.927
all the controllers are created
in a Controllers directory.

66
00:04:09.927 --> 00:04:13.409
I prefer to have what is referred
to as a screaming architecture, or

67
00:04:13.409 --> 00:04:17.127
basically, I like an architecture
that screams what it is, right?

68
00:04:17.127 --> 00:04:22.081
So, I like to put my controllers in
with the business thing that they're

69
00:04:22.081 --> 00:04:23.473
actually solving.

70
00:04:23.473 --> 00:04:24.439
In this case,

71
00:04:24.439 --> 00:04:29.123
I'm gonna add my EmployeesController
to the Employees directory.

72
00:04:30.703 --> 00:04:35.526
It makes no difference as long as
they're inside of the project,

73
00:04:35.526 --> 00:04:39.047
as they'll be discoverable
by ASP.NET Core.

74
00:04:39.047 --> 00:04:42.413
It really doesn't matter what directory
you have them in, the directory and

75
00:04:42.413 --> 00:04:44.197
namespace itself does not matter.

76
00:04:44.197 --> 00:04:47.841
The only thing that matters is that
you inherit from BaseController, and

77
00:04:47.841 --> 00:04:51.437
that it's part of your assembly,
and that it's publicly accessible.

78
00:04:51.437 --> 00:04:56.058
I believe private classes or
controllers are not read by ASP.NET Core.

79
00:04:59.499 --> 00:05:01.039
&gt;&gt; Spencer Schneidenbach: I'm
gonna say what I always say,

80
00:05:01.039 --> 00:05:03.856
which is that,
just do what you feel comfortable with.

81
00:05:03.856 --> 00:05:07.626
It's one of those opinionated things
that really doesn't make a difference.

82
00:05:07.626 --> 00:05:11.056
I just encourage you to have consistency
with yourself and your team.

83
00:05:12.306 --> 00:05:15.021
So, we're gonna go ahead,
and I'm gonna copy and

84
00:05:15.021 --> 00:05:19.186
paste these things in one at a time,
to kinda talk through each of them.

85
00:05:19.186 --> 00:05:22.422
First of all, of course,
we've gotta import our stuff, so

86
00:05:22.422 --> 00:05:26.306
we're gonna import our abstractions,
our IRepository abstraction.

87
00:05:26.306 --> 00:05:29.122
And then, of course,
we've got our Validator, so

88
00:05:29.122 --> 00:05:31.111
we're going to import that as well.

89
00:05:31.111 --> 00:05:36.431
You're gonna see, first things first,
that as opposed to just having them inside

90
00:05:36.431 --> 00:05:41.227
of the controller methods themselves
that actually handle the requests.

91
00:05:41.227 --> 00:05:42.529
We're gonna go ahead and

92
00:05:42.529 --> 00:05:46.005
drop these into the constructor
of the EmployeesController.

93
00:05:46.005 --> 00:05:49.219
We're gonna drop them in, and then we're
just gonna set them to values behind

94
00:05:49.219 --> 00:05:52.885
the scenes, we're just gonna set them to
fields that are private and readonly.

95
00:05:52.885 --> 00:05:56.875
So, these will be instantiated and sent
in by our dependency injection pipeline.

96
00:05:58.625 --> 00:06:01.738
And then, we've got the blueprint for
each of our methods, so

97
00:06:01.738 --> 00:06:03.705
I'm just gonna copy these in.

98
00:06:03.705 --> 00:06:08.147
Of course, we're gonna get compiler errors
because these things, first of all,

99
00:06:08.147 --> 00:06:11.215
we need a few imports, so we'll do that.

100
00:06:11.215 --> 00:06:14.839
These are under the MVC namespace,
and then you can see that the compiler

101
00:06:14.839 --> 00:06:18.361
is rightfully complaining to say,
not all code paths return a value.

102
00:06:18.361 --> 00:06:22.662
They want these functions to be filled in,
which we'll do here in a moment.

103
00:06:22.662 --> 00:06:27.805
So, you'll see here that this is meant to,
if I put this side by side

104
00:06:27.805 --> 00:06:33.697
with our Program, I'm gonna go ahead and
split right, and then close this.

105
00:06:33.697 --> 00:06:37.486
And you're gonna see,
if we put these side by side,

106
00:06:37.486 --> 00:06:40.168
we are in the EmployeesController.

107
00:06:40.168 --> 00:06:43.631
And because we inherited
from BaseController,

108
00:06:43.631 --> 00:06:48.952
we know that the Employees part of this
word will be converted to our Route,

109
00:06:48.952 --> 00:06:51.919
that's due to the Route attribute here.

110
00:06:51.919 --> 00:06:57.144
You'll see as well that we have
our Get request mapped here,

111
00:06:57.144 --> 00:07:01.754
that matches this one,
which is our GetAll request,

112
00:07:01.754 --> 00:07:06.578
this request, our GetById,
matches this right here.

113
00:07:06.578 --> 00:07:10.358
And I`ll create an Update down here,
mapped to our Post,

114
00:07:10.358 --> 00:07:15.298
because we marked it as an HttpPost,
with our CreateEmployeeRequest, and

115
00:07:15.298 --> 00:07:18.483
then our Update right here,
as we would expect.

116
00:07:18.483 --> 00:07:20.995
Now that we have the rough
structure of our controllers,

117
00:07:20.995 --> 00:07:24.659
we can copy/paste the logic of our
endpoints, pretty much almost one-to-one,

118
00:07:24.659 --> 00:07:26.721
so I'm gonna go ahead and
do that one at a time.

119
00:07:26.721 --> 00:07:31.568
I'll copy this or close that,
and I will start with

120
00:07:31.568 --> 00:07:36.320
simply the regular GetAll,
I'll paste that in.

121
00:07:39.289 --> 00:07:42.659
&gt;&gt; Spencer Schneidenbach: So,
I'm gonna call this repository.GetAll,

122
00:07:42.659 --> 00:07:47.012
we say that our IResult,
which is from our Results class here,

123
00:07:47.012 --> 00:07:50.975
does not match our return
type of IActionResult.

124
00:07:50.975 --> 00:07:54.134
So, what we are going to do is
take off the Results entirely, and

125
00:07:54.134 --> 00:07:58.175
we're just gonna say Ok, now,
where does this Ok method come from?

126
00:07:58.175 --> 00:08:02.131
The Ok method comes from actually the
ControllerBase object, which we'll go and

127
00:08:02.131 --> 00:08:04.352
navigate to, close that real quick.

128
00:08:04.352 --> 00:08:08.272
And you can see that this
is the ControllerBase,

129
00:08:08.272 --> 00:08:11.530
has a lot of additional functionality.

130
00:08:11.530 --> 00:08:15.717
Well, it is the base class
that you must inherit from in

131
00:08:15.717 --> 00:08:17.913
order to have a controller.

132
00:08:17.913 --> 00:08:21.149
And you can see that our Ok method
simply returns an OkObjectResult.

133
00:08:21.149 --> 00:08:24.675
So it's exactly the same
functionally as calling Results.Ok,

134
00:08:24.675 --> 00:08:27.697
it's just the controller
way of doing things.

135
00:08:27.697 --> 00:08:32.057
Similarly, for our GetEmployee single,
we have our repository right here,

136
00:08:32.057 --> 00:08:34.380
our call to the repository, we GetById.

137
00:08:34.380 --> 00:08:39.893
And similar to Result.NotFound,
we just say NotFound,

138
00:08:39.893 --> 00:08:44.290
which is also a method
on our ControllerBase.

139
00:08:46.050 --> 00:08:49.534
And then GetEmployeeResponse goes
back into the Ok method, and

140
00:08:49.534 --> 00:08:53.290
that gets returned and sent back to
the client, as one would expect.

141
00:08:55.280 --> 00:08:59.506
And lastly, a couple of other things,
our Post and

142
00:08:59.506 --> 00:09:03.350
our Put, we'll go ahead and
clear these out.

143
00:09:03.350 --> 00:09:11.023
And you can see that they are functionally
equivalent to our Post and

144
00:09:11.023 --> 00:09:17.634
our Put before,
we've got a squiggly line here.

145
00:09:17.634 --> 00:09:20.344
Go ahead and
name this GetEmployeeById, and

146
00:09:20.344 --> 00:09:24.351
what we've returned here is
something called CreatedAtAction.

147
00:09:24.351 --> 00:09:27.568
Which will send back a location header
in our response headers to say,

148
00:09:27.568 --> 00:09:30.797
here's how you can access that
resource now that you've created it.

149
00:09:31.817 --> 00:09:35.565
We have our call to repository.Create,
we're still taking in our

150
00:09:35.565 --> 00:09:40.168
CreateEmployeeRequest here, and we are
still using our createValidate method or

151
00:09:40.168 --> 00:09:42.617
createValidator.Validate method here.

152
00:09:44.427 --> 00:09:49.231
And then finally, of course,
our UpdateEmployee is much of the same,

153
00:09:49.231 --> 00:09:53.315
return NotFound here,
taking the Body of the Request here,

154
00:09:53.315 --> 00:09:57.177
return Ok here, and, yeah,
the Route parameter here.

155
00:09:58.597 --> 00:10:05.750
So, very similar to minimal APIs, and way
more common to see, any questions so far?

156
00:10:05.750 --> 00:10:09.535
&gt;&gt; Student: I think the answer,
this person's asking about the Employee

157
00:10:09.535 --> 00:10:13.842
controller, yes, you'd need to
create the Employees controller.

158
00:10:13.842 --> 00:10:17.082
&gt;&gt; Spencer Schneidenbach: Yes, and you
do that by, in the Employees folder, or

159
00:10:17.082 --> 00:10:21.331
even in the Route of the API if you
prefer, or in a Controllers folder,

160
00:10:21.331 --> 00:10:23.640
I just put mine in Employee.

161
00:10:23.640 --> 00:10:26.396
Right click, new file, like that, or

162
00:10:26.396 --> 00:10:31.500
you can click this new file icon right
here inside of Visual Studio Code.

163
00:10:31.500 --> 00:10:34.076
You can create an API Controller,
it's just a class,

164
00:10:34.076 --> 00:10:37.050
it'll just define a class for
you that has some default stuff.

165
00:10:38.080 --> 00:10:42.599
It might differ slightly from the Syntax
that we're using, but that's how you

166
00:10:42.599 --> 00:10:47.591
create that controller, and then you can
copy and paste in from the documentation.

167
00:10:47.591 --> 00:10:51.762
So, now that we've created our controller,
we have now two sets of Routes that handle

168
00:10:51.762 --> 00:10:55.991
the exact same Route, and ASP.NET Core
won't like that, it will throw an error.

169
00:10:55.991 --> 00:11:01.073
So, we will go ahead and delete our
endpoints from our Program.cs, and

170
00:11:01.073 --> 00:11:06.842
all of the development that we do from now
on will be in controllers, so, go here.

171
00:11:12.017 --> 00:11:17.048
&gt;&gt; Spencer Schneidenbach: Kill those,
and then we can run our tests, but

172
00:11:17.048 --> 00:11:22.665
of course we need to have
our app.MapControllers here,

173
00:11:22.665 --> 00:11:27.471
make sure that those
controllers get picked up.

174
00:11:31.165 --> 00:11:33.918
&gt;&gt; Spencer Schneidenbach: Okay,
this is looking pretty good,

175
00:11:33.918 --> 00:11:37.865
we need our call to
builder.Services.AddControllers.

176
00:11:37.865 --> 00:11:41.790
And if you don't have that,
this is the error that you'll get,

177
00:11:41.790 --> 00:11:43.910
we'll just show that real quick.

178
00:11:43.910 --> 00:11:49.400
Which is that our endpoint builder
here will say, unable to find,

179
00:11:49.400 --> 00:11:53.529
it throws on this line of code,
MapControllers.

180
00:11:53.529 --> 00:11:57.271
It says, unable to find the required
services, please add all the required

181
00:11:57.271 --> 00:12:01.017
services by calling AddControllers, so
it tells you how to solve for that.

182
00:12:02.017 --> 00:12:05.765
Then you can see inside of
the MapControllers method,

183
00:12:05.765 --> 00:12:10.572
that it does check for the presence
of those ControllerServices, and

184
00:12:10.572 --> 00:12:14.037
that's where it throws that exception.

185
00:12:14.037 --> 00:12:18.059
Little bit of behind the scenes for
you, the MapControllers, so

186
00:12:18.059 --> 00:12:21.516
we will go ahead and
uncomment this, and add it like so.

187
00:12:21.516 --> 00:12:24.854
We will run our tests and
everything is gonna work just fine,

188
00:12:24.854 --> 00:12:27.673
everything's gonna be hunky dory, right?

189
00:12:27.673 --> 00:12:30.533
Nope, we got a failed test,
what the heck is going on?

190
00:12:30.533 --> 00:12:34.024
Item not found in collection,
it's failing on our Create,

191
00:12:34.024 --> 00:12:37.994
that's because problem details,
the way that we're returning our

192
00:12:37.994 --> 00:12:40.954
bad requests to our caller
is slightly different.

193
00:12:42.004 --> 00:12:44.541
And because we've converted
from minimal APIs, and we wanna

194
00:12:44.541 --> 00:12:47.834
preserve the behavior for controllers,
we'll go ahead and fix that problem.

195
00:12:47.834 --> 00:12:53.890
Now, what we can do is go here
to our EmployeeController,

196
00:12:53.890 --> 00:13:00.998
and I wanna point out a little bit
of the signature on BadRequest.

197
00:13:00.998 --> 00:13:09.178
So if you say return BadRequest, it will
happily take in nothing, just blank.

198
00:13:09.178 --> 00:13:13.923
It will happily take in something
called ModelStateDictionary,

199
00:13:13.923 --> 00:13:18.728
which I'll go over in a sec, or
it can just take in any object.

200
00:13:18.728 --> 00:13:22.942
So, in this case, because the BadRequest
method differs slightly from

201
00:13:22.942 --> 00:13:27.444
results.BadRequest, it expects
a different object of a different shape.

202
00:13:27.444 --> 00:13:32.848
We have to change our validationResults
extension method to go ahead and handle

203
00:13:32.848 --> 00:13:38.185
that case, and the way that I do that
is just to return ModelStateDictionary.

204
00:13:38.185 --> 00:13:40.535
So, I'm gonna go ahead and copy this here,

205
00:13:40.535 --> 00:13:43.146
I'm gonna put this into
our extension methods.

206
00:13:44.446 --> 00:13:47.946
I will keep this one here, even though I
think the instruction stated, delete it,

207
00:13:47.946 --> 00:13:49.496
which is what I would do cuz I always,

208
00:13:49.496 --> 00:13:53.516
one of my favorite things is deleting
code that's not being used anymore.

209
00:13:53.516 --> 00:13:56.776
And then I'm going to import
our ModelStateDictionary,

210
00:13:56.776 --> 00:13:58.246
this ValidationResult.

211
00:13:59.522 --> 00:14:05.464
Yes, I believe that
ValidationResults needs to be,

212
00:14:05.464 --> 00:14:09.564
yeah, capital, that's our type.

213
00:14:11.034 --> 00:14:14.100
And so in, let's see, ValidationResult,

214
00:14:14.100 --> 00:14:19.429
this is not the correct ValidationResult,
that is the one given by data annotations.

215
00:14:19.429 --> 00:14:22.032
You know what,
we are gonna throw this one away,

216
00:14:22.032 --> 00:14:24.266
keep our imports from getting messed up.

217
00:14:24.266 --> 00:14:29.492
So, this validationResult that we want is
going to be in FluentValidation.Results,

218
00:14:29.492 --> 00:14:32.723
we want that namespace, and
then we get our errors.

219
00:14:32.723 --> 00:14:37.123
Then we get the validationResult in the
shape that we expect to convert it to this

220
00:14:37.123 --> 00:14:40.223
ModelStateDictionary, which
we will go ahead and do.

221
00:14:40.223 --> 00:14:46.809
I will delete this line, and I will say
validationResults.ToModelStateDictionary.

222
00:14:46.809 --> 00:14:53.448
And that is just basically an object
that contains what's called model state.

223
00:14:53.448 --> 00:14:57.921
You'll see it a lot more, especially,
you'll see it in a lot of APIs out in

224
00:14:57.921 --> 00:15:02.539
the wild, including MVC with views,
which we will not cover in this course.

225
00:15:02.539 --> 00:15:06.477
But model state is simply an object
that kinda wraps up to say,

226
00:15:06.477 --> 00:15:10.544
this field is valid,
this field is invalid, and so on.

227
00:15:10.544 --> 00:15:16.106
A couple of other refactors that I could,
and I will do, first things first,

228
00:15:16.106 --> 00:15:20.814
I am not a fan of putting our
Validator inside of our constructor,

229
00:15:20.814 --> 00:15:23.781
of our EmployeeController.

230
00:15:23.781 --> 00:15:28.848
Imagine then, if we had a Validator for,
going to stop this,

231
00:15:28.848 --> 00:15:36.921
IValidator&lt;UpdateEmployeeRequest&gt;, which
we will create one in a future lesson.

232
00:15:36.921 --> 00:15:41.446
Imagine if we had like 20 endpoints,
do we really want to inject 20 Validators?

233
00:15:41.446 --> 00:15:44.178
No, it's a lot of boilerplate that I
don't want to have to maintain, and

234
00:15:44.178 --> 00:15:47.786
I certainly don't want to have to write,
and I certainly don't wanna look at it.

235
00:15:47.786 --> 00:15:53.441
So, on our BaseController, we can
implement a method that we could commonly

236
00:15:53.441 --> 00:15:59.360
use across all of our other controllers,
which is exactly what we're gonna do.

237
00:15:59.360 --> 00:16:03.646
We're gonna define a generic method called
ValidateAsync, and we're gonna give it

238
00:16:03.646 --> 00:16:07.710
the instance of an object, and then we're
gonna capture that type T right here.

239
00:16:07.710 --> 00:16:10.714
And the reason that we're
gonna capture that type T,

240
00:16:10.714 --> 00:16:14.980
is that we wanna be able to specify it
down here inside of our IValidator.

241
00:16:14.980 --> 00:16:19.375
We wanna get that IValidator here from
our dependency injection pipeline.

242
00:16:19.375 --> 00:16:20.641
And then if we don't find one,

243
00:16:20.641 --> 00:16:24.203
because we're validating an object that
doesn't have one, we're gonna go ahead and

244
00:16:24.203 --> 00:16:27.165
throw an exception simply because
we don't wanna just fail silently.

245
00:16:27.165 --> 00:16:30.515
We may accidentally try to validate
an object we don't need to validate.

246
00:16:31.905 --> 00:16:37.596
We can create a new ValidationContext,
which is built into IValidator,

247
00:16:37.596 --> 00:16:41.652
and then we can pass it to
our ValidateAsync method.

248
00:16:43.272 --> 00:16:47.421
I believe you can also skip
the ValidationContext directly and just

249
00:16:47.421 --> 00:16:52.752
validate the instance, and I believe under
the hood it creates a ValidationContext.

250
00:16:55.602 --> 00:16:59.690
So, let's go ahead and make sure that we
got our imports here, ValidationResult.

251
00:16:59.690 --> 00:17:02.406
Make sure that you're importing
the right ValidationResult,

252
00:17:02.406 --> 00:17:04.930
if you import the wrong one,
you will get a compiler error.

253
00:17:06.050 --> 00:17:09.385
So we will, because we have
ValidationResult as a class in multiple

254
00:17:09.385 --> 00:17:12.910
namespaces, we wanna make sure
that we do import the correct one.

255
00:17:12.910 --> 00:17:17.702
So, we'll put that there, which is good,
and now we can go and delete some code,

256
00:17:17.702 --> 00:17:20.700
which is, again,
one of my favorite things to do.

257
00:17:20.700 --> 00:17:25.410
So, we're gonna delete createValidator
here, we're gonna delete it from here.

258
00:17:25.410 --> 00:17:28.350
And we're gonna scroll down,
and instead of doing that,

259
00:17:28.350 --> 00:17:31.710
we're just gonna call our
base method ValidateAsync.

260
00:17:31.710 --> 00:17:35.838
So now, we've taken a little
bit of reusable logic and

261
00:17:35.838 --> 00:17:40.953
put it in our base controller,
because we may want to use this across

262
00:17:40.953 --> 00:17:46.365
multiple controllers, so,
what about this property copying stuff?

263
00:17:46.365 --> 00:17:49.628
I think a lot of people are going
to look at this and say, well, gee,

264
00:17:49.628 --> 00:17:53.950
Spencer, this is a lot of boilerplate, all
you're doing is taking the Request object.

265
00:17:53.950 --> 00:17:58.647
That seems to be like, where's our
Object.assign, like we have in JavaScript?

266
00:17:58.647 --> 00:18:04.637
There are libraries that you can use to
automatically copy these properties over.

267
00:18:04.637 --> 00:18:08.358
I chose not to do this in this course,
just to make sure that the course stays

268
00:18:08.358 --> 00:18:11.210
simple, but I do name one of them,
which is AutoMapper.

269
00:18:11.210 --> 00:18:13.203
AutoMapper is probably
the most famous one and

270
00:18:13.203 --> 00:18:15.410
the most ubiquitous one
in the .NET Core library.

271
00:18:15.410 --> 00:18:19.050
It's actually a project made by
a guy named Jimmy Bogard, and

272
00:18:19.050 --> 00:18:21.920
Automapper has been around for
years and years.

273
00:18:21.920 --> 00:18:27.744
So, you can do that in order to shorten
some of these property assignments,

274
00:18:27.744 --> 00:18:32.112
it would give you your
Object.assign essentially, but

275
00:18:32.112 --> 00:18:36.150
like I said, I'm not doing it for
this course.

276
00:18:36.150 --> 00:18:41.318
But I could, if I wanted to make
a common method, or a factory method,

277
00:18:41.318 --> 00:18:45.789
to create a newEmployee object
from an incoming Request, or

278
00:18:45.789 --> 00:18:48.880
something similar if I wanted to do that.

279
00:18:48.880 --> 00:18:51.477
So, I just wanted to let you know
that that boilerplate reducing stuff

280
00:18:51.477 --> 00:18:52.277
definitely exists.

