WEBVTT

1
00:00:00.000 --> 00:00:02.940
&gt;&gt; Spencer Schneidenbach: That is
querying, but we can do a little better,

2
00:00:02.940 --> 00:00:07.463
imagine that you're in a payroll system
with this endpoint brings back all

3
00:00:07.463 --> 00:00:09.355
inactive employees, right?

4
00:00:09.355 --> 00:00:13.447
And you're working in a company
of 10,000 active employees, and

5
00:00:13.447 --> 00:00:15.667
they've had 100,000 people.

6
00:00:15.667 --> 00:00:19.460
You probably don't want to
send back all of that data, so

7
00:00:19.460 --> 00:00:24.202
I do wanna show you, how I would
refactor this, and how I would refactor

8
00:00:24.202 --> 00:00:28.886
this in the real world to be able to
add some filtering and pagination.

9
00:00:28.886 --> 00:00:30.836
So let's go ahead and do that,

10
00:00:30.836 --> 00:00:35.938
we are actually going to introduce a thing
called GetAllEmployeesRequest, and

11
00:00:35.938 --> 00:00:41.056
we're going to put it inside of our we're
just going to put it right here for now.

12
00:00:41.056 --> 00:00:45.948
And then we will command dot and
move type to,

13
00:00:45.948 --> 00:00:49.591
its own thing, that's perfect.

14
00:00:49.591 --> 00:00:55.515
GetAllEmployeesRequest, but you might
be saying, Spencer, we can't use GETs and

15
00:00:55.515 --> 00:01:00.056
we can't put bodies, we can't put
a body of data inside of a GET.

16
00:01:00.056 --> 00:01:05.879
That kind of, breaks what a GET is
intended to be, well, not to worry,

17
00:01:05.879 --> 00:01:12.110
because we can actually add it to
the employee controller, check this out.

18
00:01:12.110 --> 00:01:17.027
So we're going to do, we're going to stop
this, GetAllEmployeesRequest, we're

19
00:01:17.027 --> 00:01:21.903
going to call it request, and then we're
going to prefix it with this, FromQuery.

20
00:01:23.263 --> 00:01:26.062
&gt;&gt; Spencer Schneidenbach: Okay,
we're going to prefix it with FromQuery,

21
00:01:26.062 --> 00:01:30.663
and what that's going to instruct ASP.NET
Core to do is read all those values from

22
00:01:30.663 --> 00:01:34.882
the query string, bring them into
this request, so that's pretty cool.

23
00:01:34.882 --> 00:01:39.922
Because we actually created our
validation filter earlier in the course,

24
00:01:39.922 --> 00:01:42.162
we also can create a validator for

25
00:01:42.162 --> 00:01:46.976
this thing because we don't want this
page number to be less than zero.

26
00:01:46.976 --> 00:01:51.535
That doesn't make any sense, and we don't
want the number of records to be zero or

27
00:01:51.535 --> 00:01:52.407
less than one.

28
00:01:52.407 --> 00:01:57.298
We need to be able to pull back at least
one record, so we're gonna go ahead and

29
00:01:57.298 --> 00:01:57.912
do that.

30
00:01:57.912 --> 00:02:01.636
We're gonna copy in this validator and,
import this, and

31
00:02:01.636 --> 00:02:06.628
because we've already wired fluent
validation up to our dependency injection

32
00:02:06.628 --> 00:02:11.484
pipeline, we've already defined a filter
to actually execute this for us.

33
00:02:11.484 --> 00:02:14.187
We don't have to do anything else,
we can just put it here and

34
00:02:14.187 --> 00:02:16.891
then write our tests and
make sure everything's good to go.

35
00:02:16.891 --> 00:02:21.807
Now we can change our get employees
implementation to add paging and filters,

36
00:02:21.807 --> 00:02:24.352
and let me show you what that looks like.

37
00:02:24.352 --> 00:02:29.118
So first things first, we are actually
going to make sure that in our request,

38
00:02:29.118 --> 00:02:34.248
that if we're getting a page, we're going
to get int page number, and we're going

39
00:02:34.248 --> 00:02:39.090
to say request, because we don't know
that the get all employees are request,

40
00:02:39.090 --> 00:02:43.744
it could possibly be null if there's
no query string parameters provided.

41
00:02:43.744 --> 00:02:48.606
Can't recall if ASP.NET Core
automatically instantiates one for

42
00:02:48.606 --> 00:02:51.939
you anyways,
even with no query parameters.

43
00:02:51.939 --> 00:02:55.777
But we're gonna program defensively and
assume that it could be null.

44
00:02:55.777 --> 00:03:00.354
So, we're gonna say request?.Page,
and then we're gonna say one.

45
00:03:00.354 --> 00:03:06.470
If this thing is null, then we're just
going to say, we just want to go for

46
00:03:06.470 --> 00:03:11.601
the first page, and
then we want to say int numberOfRecords,

47
00:03:11.601 --> 00:03:18.623
and we're going to say request number of
records, records per page, I should say.

48
00:03:18.623 --> 00:03:22.863
And if that's not set,
we'll just say 100, records per page, and

49
00:03:22.863 --> 00:03:25.487
then we're gonna change this a little bit.

50
00:03:25.487 --> 00:03:29.956
We are going to actually declare
this as an IQueryable and

51
00:03:29.956 --> 00:03:32.759
I'll show you why here in a second.

52
00:03:32.759 --> 00:03:36.632
So, we are going to go for the broader
type, normally this would go and

53
00:03:36.632 --> 00:03:40.571
get the DbSet, but we're gonna
actually declare it as an IQueryable,

54
00:03:40.571 --> 00:03:45.193
I'm gonna take out the call to this, and
I'm gonna actually rename this to "query".

55
00:03:45.193 --> 00:03:48.884
I'm specifically marking it as a query
because I wanna make it clear that that's

56
00:03:48.884 --> 00:03:49.545
what this is.

57
00:03:49.545 --> 00:03:51.725
I'm building a query here.

58
00:03:51.725 --> 00:03:55.840
So I'm going to say, this is a LINQ (Language Integrated Query)
method called Skip, which is to say,

59
00:03:55.840 --> 00:03:57.603
skip these number of records.

60
00:03:57.603 --> 00:04:03.004
And I'm just gonna do a little bit of math
to say, if we're anything beyond page one,

61
00:04:03.004 --> 00:04:07.445
we wanna skip that number of records and
provide them on a second page.

62
00:04:07.445 --> 00:04:12.349
And then we're gonna use another
method called Take, which is to say,

63
00:04:12.349 --> 00:04:14.974
give me only these number of records.

64
00:04:14.974 --> 00:04:20.877
So we're saying here that we only want
&gt;&gt; Spencer Schneidenbach: This number

65
00:04:20.877 --> 00:04:24.621
of records, we only want to skip this
many, so if they request page one, one

66
00:04:24.621 --> 00:04:28.731
minus one is zero, so it won't skip any
records, and we want to include benefits.

67
00:04:31.151 --> 00:04:34.687
&gt;&gt; Spencer Schneidenbach: Now we can
add in this part and basically say,

68
00:04:34.687 --> 00:04:36.827
if our request is not null,

69
00:04:36.827 --> 00:04:42.154
then if we can build upon our query
based on the value of the request.

70
00:04:42.154 --> 00:04:46.963
So we wanna add in a first name
contains and a last name contains.

71
00:04:46.963 --> 00:04:50.979
And then we wanna say if first
name contains is not null or

72
00:04:50.979 --> 00:04:55.081
whitespace, then we want to
change our query and set it so

73
00:04:55.081 --> 00:04:59.800
that we also check to see that
the first name contains this value.

74
00:04:59.800 --> 00:05:03.454
Then down here of course,
we don't have our employees declared, so

75
00:05:03.454 --> 00:05:04.970
we will go ahead and do that.

76
00:05:04.970 --> 00:05:11.385
So we will say var employees = await
query, so we're done building our query,

77
00:05:11.385 --> 00:05:16.676
ToArrayAsync, and then we will
send back our employee records.

78
00:05:16.676 --> 00:05:20.956
When I do pagination, or if I'm doing
filtering, nine times out of ten, 99 times

79
00:05:20.956 --> 00:05:25.688
out of 100, it's gonna look something like
this, if I'm using Entity Framework Core.

80
00:05:25.688 --> 00:05:29.972
So this is exactly how I would do it,
one thing that you should note is if your

81
00:05:29.972 --> 00:05:33.712
search gets complicated enough,
a get putting those requests,

82
00:05:33.712 --> 00:05:36.842
those variables in the query
string may not be enough.

83
00:05:36.842 --> 00:05:41.102
You may have to convert it to a post,
I have had to do that before that is,

84
00:05:41.102 --> 00:05:42.388
OK with me?

85
00:05:42.388 --> 00:05:47.587
And I wanna point out that it's not ideal
necessarily to bring your whole object

86
00:05:47.587 --> 00:05:52.409
graph into memory here, I'm doing that for
the purposes of simplicity.

87
00:05:52.409 --> 00:05:56.843
In most cases, this probably isn't
going to matter for your system, but

88
00:05:56.843 --> 00:06:00.363
the problem is that if you gave
EF Core this method before.

89
00:06:00.363 --> 00:06:03.417
For these things are in memory to say,
hey, convert all these

90
00:06:03.417 --> 00:06:07.179
to Employee Get Response Entity Framework
Core is going to respond and say,

91
00:06:07.179 --> 00:06:09.766
I don't know what this is
because you're expecting

92
00:06:09.766 --> 00:06:12.631
me as an IQueryable to know
what to do with this function.

93
00:06:12.631 --> 00:06:17.533
And that's one of the subtleties
of IQueryable that does not behave

94
00:06:17.533 --> 00:06:20.120
the same as IEnumerable, period.

95
00:06:20.120 --> 00:06:25.077
So we're just gonna put them directly
into memory, but in reality,

96
00:06:25.077 --> 00:06:30.034
you could select them back directly
by just inlining the employee and

97
00:06:30.034 --> 00:06:35.429
then just creating the Get Response here,
but we're not going to do that.

98
00:06:35.429 --> 00:06:39.958
We're just going to put them into memory,
it's a minor point, but worth bringing up.

99
00:06:41.805 --> 00:06:44.086
&gt;&gt; Spencer Schneidenbach: So
of course we have some failing tests, but

100
00:06:44.086 --> 00:06:47.672
it doesn't mean we can't change our
get to use our new query string.

101
00:06:47.672 --> 00:06:51.950
But we have some cleanup to do,
and the cleanup is that first,

102
00:06:51.950 --> 00:06:56.657
we need to stop using the
IRepository and actually go into memory.

103
00:06:56.657 --> 00:06:59.230
Go into using the in-memory database, so

104
00:06:59.230 --> 00:07:03.736
yes SQLite does have an in memory
implementation, which is super useful.

105
00:07:03.736 --> 00:07:07.582
There is an in-memory database
provider that's not SQLite,

106
00:07:07.582 --> 00:07:11.220
that's provided by Microsoft,
do not use this provider.

107
00:07:11.220 --> 00:07:13.878
Microsoft tells you
don't use this provider,

108
00:07:13.878 --> 00:07:16.607
do not use it,
it does not model a real database.

109
00:07:16.607 --> 00:07:21.200
A SQLite database in memory is still way
better, then even a target database,

110
00:07:21.200 --> 00:07:25.930
then even using an in-memory database,
as opposed to, like using a Postgres or

111
00:07:25.930 --> 00:07:28.384
another quote unquote, real database.

112
00:07:28.384 --> 00:07:33.130
And I will demonstrate that, near the end
of the course using something like

113
00:07:33.130 --> 00:07:36.701
Postgres, but
Microsoft does not recommend you use it.

114
00:07:36.701 --> 00:07:41.397
We will talk about a better option, but
anyways, just wanted to make sure that you

115
00:07:41.397 --> 00:07:45.770
knew that SQLite in-memory database
is the better option between the two.

116
00:07:45.770 --> 00:07:49.819
So we don't want our API
server to use Employees.db,

117
00:07:49.819 --> 00:07:52.732
we just want to have it run in-memory.

118
00:07:52.732 --> 00:07:56.857
So we do have to do a little bit of
convoluted code in order to get it to

119
00:07:56.857 --> 00:08:00.323
respect and just use our SQLite
connection in memory and

120
00:08:00.323 --> 00:08:03.071
we can do this because
it's just test code.

121
00:08:03.071 --> 00:08:07.632
So, it's not that big a deal,
it's just test code so,

122
00:08:07.632 --> 00:08:13.068
we're gonna go down to our tests,
and we are going to say new file,

123
00:08:13.068 --> 00:08:17.751
we'll say new class,
CustomWebApplicationFactory.

124
00:08:17.751 --> 00:08:21.389
And I'm not gonna go through
all of the finer points here,

125
00:08:21.389 --> 00:08:23.616
other than to say that previously,

126
00:08:23.616 --> 00:08:28.742
we just used our web application factory
directly inside of our tests, you can see

127
00:08:28.742 --> 00:08:33.743
that if we switch back here our web
application factory, that's what we used.

128
00:08:33.743 --> 00:08:37.282
But we're actually going to inherit
from it and create another object, so

129
00:08:37.282 --> 00:08:40.762
that way we can configure the behavior
a little bit and the bottom line is,

130
00:08:40.762 --> 00:08:42.864
is we want to remove
that SQLite reference.

131
00:08:42.864 --> 00:08:46.669
We want to remove that connection string
that says Employees.db we want to just

132
00:08:46.669 --> 00:08:50.301
take that out and replace it with our and
essentially, what this is going and

133
00:08:50.301 --> 00:08:53.169
doing is replacing in
the dependency injection pipeline.

134
00:08:53.169 --> 00:08:57.980
It's replacing it with our
own custom DB connection

135
00:08:57.980 --> 00:09:02.484
that just runs SQLite in
memory pretty awesome.

136
00:09:02.484 --> 00:09:07.706
I'm gonna go ahead and
command dot to import all the goodies,

137
00:09:07.706 --> 00:09:13.131
command dot import,
command dot import, SQLite connection,

138
00:09:13.131 --> 00:09:17.160
need that, and good,
that looks pretty good.

139
00:09:20.075 --> 00:09:23.565
So then we replace our web application
factory with our new custom web

140
00:09:23.565 --> 00:09:26.105
application factory inside
of our actual tests.

141
00:09:26.105 --> 00:09:30.639
So that way we instruct X unit to
instantiate that directly instead, so

142
00:09:30.639 --> 00:09:34.796
we can delete that and we can delete
that and replace it with this,

143
00:09:34.796 --> 00:09:37.295
which looks pretty good.

144
00:09:37.295 --> 00:09:42.270
And then we run our tests and
of course, once we replace them all,

145
00:09:42.270 --> 00:09:45.990
once we replace all these
calls to IRepository.

146
00:09:45.990 --> 00:09:48.012
So we're gonna go ahead and
kill this right here.

147
00:09:50.196 --> 00:09:53.600
&gt;&gt; Spencer Schneidenbach: And we're
gonna do this we don't have a repository

148
00:09:53.600 --> 00:09:57.004
anymore, we're gonna
delete that looking good,

149
00:09:57.004 --> 00:10:00.817
we are going to comment out
like we did at the other tests.

150
00:10:00.817 --> 00:10:04.407
We're just gonna comment these out because
we're just ignoring them from now,

151
00:10:04.407 --> 00:10:06.117
and we've got our tests back.

152
00:10:06.117 --> 00:10:11.969
And so we're gonna run our tests and,
&gt;&gt; Spencer Schneidenbach: What happens?

153
00:10:15.266 --> 00:10:17.487
&gt;&gt; Spencer Schneidenbach: Wait,
they failed, what the heck's going on?

154
00:10:18.667 --> 00:10:22.131
It's cuz we don't actually have data
in here, you see that we don't,

155
00:10:22.131 --> 00:10:25.563
our in-memory SQLite table still
needs to have migrations run on it.

156
00:10:25.563 --> 00:10:27.597
So it says no such table employees, so

157
00:10:27.597 --> 00:10:32.000
the way that we're gonna do that is we're
simply gonna refactor our seed method.

158
00:10:32.000 --> 00:10:36.072
So I'm gonna go command + T, and that's gonna
take me up to this little search box.

159
00:10:36.072 --> 00:10:39.970
So I can go to seed data, and
I'm just, its going to say,

160
00:10:39.970 --> 00:10:44.442
in addition to AppDbContext,
I'm gonna rename this function,

161
00:10:44.442 --> 00:10:49.672
I'm hitting F2, MigrateAndSeed, and
I'll just do the migration here.

162
00:10:49.672 --> 00:10:54.139
So context.Database.Migrate, and

163
00:10:54.139 --> 00:11:01.725
that will migrate our database for
us, and allow our tests to run.

164
00:11:01.725 --> 00:11:04.990
So we'll see that, and
we'll see now that they pass because

165
00:11:04.990 --> 00:11:08.512
we've run migrations on them and
we've also preceded them, and

166
00:11:08.512 --> 00:11:12.953
in the in-memory database, once this
stops running, it's dead, it's gone.

167
00:11:12.953 --> 00:11:17.860
Okay, we can then add a new
test to actually get only John,

168
00:11:17.860 --> 00:11:21.180
to see if we get back a single employee.

169
00:11:21.180 --> 00:11:26.139
So now we can test our behavior for
our single employee get

170
00:11:26.139 --> 00:11:30.390
which we will do here,
and we'll run that test.

171
00:11:33.160 --> 00:11:36.477
And we will see that it passes as well,
so you can see that we are passing in,

172
00:11:36.477 --> 00:11:38.640
the employee first name contains John.

173
00:11:38.640 --> 00:11:43.537
So if we had something in here, that of
a name of a person that does not exist.

174
00:11:43.537 --> 00:11:48.184
We'll go in dotnet test, and
we'll see that it fails because we

175
00:11:48.184 --> 00:11:51.791
are expecting back a single
employee from this.

176
00:11:51.791 --> 00:11:55.493
But if we restore our test
to its former great glory,

177
00:11:55.493 --> 00:11:59.799
then it will find John, and
all will be right with the world.

