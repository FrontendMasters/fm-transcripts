WEBVTT

1
00:00:00.000 --> 00:00:01.628
&gt;&gt; Spencer Schneidenbach: Okay,
let's talk about sub-resources.

2
00:00:01.628 --> 00:00:05.762
So up to this point, we've been working
with a very one single resource,

3
00:00:05.762 --> 00:00:08.310
which is our employee
resource up until now.

4
00:00:08.310 --> 00:00:11.486
In the real world,
we have to work with other resources,

5
00:00:11.486 --> 00:00:13.681
that's just a thing that we have to do.

6
00:00:13.681 --> 00:00:18.299
So let's talk through some
design considerations for that.

7
00:00:18.299 --> 00:00:22.193
So one of the most common ways to query
sub-resources is to use nested routes,

8
00:00:22.193 --> 00:00:24.262
let me show you what that might look like.

9
00:00:24.262 --> 00:00:26.609
So let's say we had our employee benefits,
and

10
00:00:26.609 --> 00:00:28.906
we wanted to be able to
get employee benefits.

11
00:00:28.906 --> 00:00:33.071
There's a couple of things we can
do when we do our GET request,

12
00:00:33.071 --> 00:00:36.619
we can simply return it in
the response body, right?

13
00:00:36.619 --> 00:00:38.112
On each of our employees.

14
00:00:38.112 --> 00:00:43.913
Or we could say for employee 1, 2,
3, I wanna get all the benefits and

15
00:00:43.913 --> 00:00:49.930
make that a separate API, a couple of
different things you can do, right?

16
00:00:49.930 --> 00:00:53.907
And it's really gonna depend which of
those techniques you implement is really

17
00:00:53.907 --> 00:00:55.996
gonna depend on the needs of your system.

18
00:00:55.996 --> 00:00:59.298
So that would be an example of
using a nested route, right?

19
00:00:59.298 --> 00:01:02.653
Employees/ Id/ benefits.

20
00:01:02.653 --> 00:01:06.106
It's well supported by ASPNetCore,
OpenAPI, and

21
00:01:06.106 --> 00:01:09.410
most people expect it,
it's very common to see.

22
00:01:09.410 --> 00:01:13.613
So let's go ahead and go through the
trouble of adding our employee benefits

23
00:01:13.613 --> 00:01:15.789
and sort of walk through this problem.

24
00:01:15.789 --> 00:01:18.439
So I'm gonna go ahead and stop this.

25
00:01:18.439 --> 00:01:23.809
I am going to Open Folder, and
I am going to go to we are on querying

26
00:01:23.809 --> 00:01:28.498
sub-resources 3-F, so
we're gonna go to this lab.

27
00:01:28.498 --> 00:01:31.435
And I'm gonna deploy all those, and

28
00:01:31.435 --> 00:01:35.904
then I'm just gonna go to my
employee file right there.

29
00:01:35.904 --> 00:01:39.685
And it's kind of lonely,
kind of like a Bob Ross of programming.

30
00:01:39.685 --> 00:01:41.618
Let's add ourselves a nice
little employee benefits.

31
00:01:41.618 --> 00:01:44.975
I mean, I know this looks great, everybody
says, when Bob Ross is adding a tree,

32
00:01:44.975 --> 00:01:46.253
why has he gotta add that tree?

33
00:01:46.253 --> 00:01:48.096
Until he adds it, and
then it looks awesome.

34
00:01:48.096 --> 00:01:52.439
Let's add ourselves some little
employee benefits down there,

35
00:01:52.439 --> 00:01:54.657
that looks good, yes, we like it.

36
00:01:54.657 --> 00:01:58.131
That's thing one, but
employees have benefits.

37
00:01:58.131 --> 00:01:58.971
Is that not the case?

38
00:01:58.971 --> 00:02:00.407
I certainly hope they do.

39
00:02:00.407 --> 00:02:04.800
So I'm gonna go down to my employees
class and I'm gonna paste that in, and

40
00:02:04.800 --> 00:02:08.875
I'm just gonna basically say,
here's my list of benefits, boom.

41
00:02:08.875 --> 00:02:11.892
So now, we've created kind of
an object hierarchy, right?

42
00:02:11.892 --> 00:02:14.992
We have an employee object,
and then we have the benefits.

43
00:02:14.992 --> 00:02:18.917
There's one employee object and what we
defined is basically a very rudimentary,

44
00:02:18.917 --> 00:02:21.224
what's called a one-to-many relationship.

45
00:02:21.224 --> 00:02:26.476
One employee can have many benefits,
zero to n.

46
00:02:26.476 --> 00:02:28.674
So we have a couple of different
ways we can handle querying these.

47
00:02:28.674 --> 00:02:33.299
As I mentioned, we can include them with
the original object which is good if you

48
00:02:33.299 --> 00:02:38.006
have a small, limited number of objects
and you don't expect that list to grow.

49
00:02:38.006 --> 00:02:41.100
I don't know,
I've not worked on a payroll system, but

50
00:02:41.100 --> 00:02:43.806
I would say the benefits
are probably going to be,

51
00:02:43.806 --> 00:02:48.209
probably no more than 10 to 20 records,
depending on how detailed they get.

52
00:02:48.209 --> 00:02:53.885
But something like if you are on Amazon,
and you're wanting to get all orders for

53
00:02:53.885 --> 00:02:57.576
a given account,
that list is gonna be a lot bigger.

54
00:02:57.576 --> 00:03:03.202
And you're probably not gonna wanna send
that list back in a single customer GET.

55
00:03:03.202 --> 00:03:04.807
You're not gonna say,
here's all the orders.

56
00:03:04.807 --> 00:03:07.621
I don't even know how many
times I've ordered from Amazon,

57
00:03:07.621 --> 00:03:09.891
it's way too many times,
more than I can count.

58
00:03:09.891 --> 00:03:13.896
That would be a good use case for
putting it under a sub-resource or

59
00:03:13.896 --> 00:03:18.632
putting it under a different route so
that you get those invoices another way.

60
00:03:18.632 --> 00:03:21.900
So we're gonna go with
the simpler approach for now,

61
00:03:21.900 --> 00:03:26.124
which is that we are going to include
it in our GetEmployeeResponse.

62
00:03:26.124 --> 00:03:28.666
And of course,
because we have an entity object and

63
00:03:28.666 --> 00:03:32.747
we don't wanna return that entity object
to the client, we're gonna go ahead and

64
00:03:32.747 --> 00:03:35.727
create a GetEmployeeResponse,
EmployeeBenefit class.

65
00:03:35.727 --> 00:03:41.644
So we're gonna put that here in our
GetEmployeeResponse right there,

66
00:03:41.644 --> 00:03:44.315
and we're gonna paste that in.

67
00:03:44.315 --> 00:03:48.732
And then we're gonna say,
we're gonna create a required property and

68
00:03:48.732 --> 00:03:53.377
require that our callers set it,
which will create a nice compiler error.

69
00:03:53.377 --> 00:03:58.038
Which we'll use to again, go and find it
and fix it before we run our project.

70
00:03:58.038 --> 00:04:02.185
So we'll go to our GET method right here,

71
00:04:02.185 --> 00:04:06.699
you can see if our IDE
is working as expected.

72
00:04:06.699 --> 00:04:11.627
Let's see, we certainly can
go to our employee object,

73
00:04:11.627 --> 00:04:15.635
our EmployeeController.cs right here, and

74
00:04:15.635 --> 00:04:20.888
you can see yes, now the problems
are popping in down there.

75
00:04:20.888 --> 00:04:24.104
It says required member must be
set in the object initializer, so

76
00:04:24.104 --> 00:04:25.512
we're not setting it here.

77
00:04:25.512 --> 00:04:27.498
So we'll go ahead and do that.

78
00:04:27.498 --> 00:04:31.892
So we'll go benefits and =,
and then what do we have here?

79
00:04:31.892 --> 00:04:35.250
So we're gonna go ahead and

80
00:04:35.250 --> 00:04:41.535
Select the benefit from
the core employee object.

81
00:04:41.535 --> 00:04:45.315
So we're gonna go and
copy that in, paste that here,

82
00:04:45.315 --> 00:04:47.592
tab over to make it look pretty.

83
00:04:47.592 --> 00:04:51.228
And you're gonna see that we are now
getting our employee benefits from our

84
00:04:51.228 --> 00:04:54.186
employee record, and
we need to do the same thing down here.

85
00:04:58.030 --> 00:05:00.727
&gt;&gt; Spencer Schneidenbach: Cool,
got rid of our compiler errors,

86
00:05:00.727 --> 00:05:02.617
our compiler is happy now.

87
00:05:02.617 --> 00:05:05.425
But let's clean up a little bit
of that boilerplate, I mean,

88
00:05:05.425 --> 00:05:07.214
that's a lot of duplication, right?

89
00:05:07.214 --> 00:05:11.096
So let's just add us a nice
little factory method right here.

90
00:05:11.096 --> 00:05:17.344
Copy that in and put that right
at the bottom of our controller.

91
00:05:17.344 --> 00:05:21.832
And now we're just gonna have one common
way of creating our GetEmployeeResponses.

92
00:05:21.832 --> 00:05:25.172
Do a little bit of cleanup,
I like to clean as I go, and

93
00:05:25.172 --> 00:05:26.896
this is one of those cases.

94
00:05:26.896 --> 00:05:31.419
So now we've removed a little
bit of duplication, and

95
00:05:31.419 --> 00:05:36.745
we've also had the benefit of
actually saving us lines of code.

96
00:05:36.745 --> 00:05:41.709
And while I'm not strictly speaking a less
lines of code is always better in this

97
00:05:41.709 --> 00:05:44.095
case, I'd say it looks a lot better.

98
00:05:44.095 --> 00:05:49.701
Go here, create EmployeeResponse,
our EmployeeResponse.

99
00:05:52.219 --> 00:05:55.560
&gt;&gt; Spencer Schneidenbach: And then we
will open that parent, call that method,

100
00:05:55.560 --> 00:05:58.923
employee, and
then delete that extra parenthesis.

101
00:05:58.923 --> 00:06:01.167
Okay, it's a lot cleaner,
that looks a lot nicer.

102
00:06:01.167 --> 00:06:05.277
Nice little cleanup there,
I like to keep things neat and tidy.

103
00:06:05.277 --> 00:06:07.863
All right, so
it's okay to get the objects, but

104
00:06:07.863 --> 00:06:12.486
it gets more complex when we think about
adding and removing sub-resources, right?

105
00:06:12.486 --> 00:06:15.743
Now, we wanna be able to mutate those,
we wanna add benefits,

106
00:06:15.743 --> 00:06:17.162
we wanna remove benefits.

107
00:06:17.162 --> 00:06:19.984
Well, do we wanna do that
through the parent object?

108
00:06:19.984 --> 00:06:21.477
Probably not.

109
00:06:21.477 --> 00:06:24.539
There's a lot of reasons why
you wouldn't wanna do that,

110
00:06:24.539 --> 00:06:28.852
but that essentially means that you could
design an API where you have to send every

111
00:06:28.852 --> 00:06:30.369
employee field to your API.

112
00:06:30.369 --> 00:06:34.926
And then send all of the benefits and then
write a bunch of custom nasty logic to add

113
00:06:34.926 --> 00:06:39.500
them or remove them, depending on whether
or not they're present in that list.

114
00:06:39.500 --> 00:06:42.640
Do we create new endpoints that
handle the sub-resource data?

115
00:06:42.640 --> 00:06:46.599
Probably, it's a little bit of a cleaner
way, requires less nasty code.

116
00:06:46.599 --> 00:06:52.132
So you have a benefit, a post request
that's specifically for created benefits.

117
00:06:52.132 --> 00:06:53.692
And then how do we handle updating?

118
00:06:53.692 --> 00:06:57.577
Assuming that we're able to just straight
update benefits, a benefit is probably

119
00:06:57.577 --> 00:07:00.694
an object that in the real world,
is gonna require some workflow.

120
00:07:00.694 --> 00:07:05.228
But keeping it simple for now, maybe we
just have a single update endpoint for

121
00:07:05.228 --> 00:07:09.919
benefits as opposed to trying to update
a batch of them for a specific employee.

122
00:07:09.919 --> 00:07:13.900
I say that let's get to this question
a little more once we have a real data

123
00:07:13.900 --> 00:07:14.438
source.

124
00:07:14.438 --> 00:07:17.645
Without that, without a real data source,
cuz our repository,

125
00:07:17.645 --> 00:07:20.632
got a little spoiler for you,
is not gonna live much longer.

126
00:07:20.632 --> 00:07:24.034
Outside of that, we're gonna just
throw all that code away anyway, so

127
00:07:24.034 --> 00:07:25.917
we'll talk about it when we get there.

128
00:07:25.917 --> 00:07:28.252
So we'll talk about instead
querying them separately.

129
00:07:28.252 --> 00:07:31.207
This is the other common way of
dealing with sub-resources, and

130
00:07:31.207 --> 00:07:33.097
this is the one that we're gonna go with.

131
00:07:33.097 --> 00:07:37.082
And so I'm gonna copy this in to here,

132
00:07:37.082 --> 00:07:41.949
I'm gonna copy that into
my controller here.

133
00:07:41.949 --> 00:07:47.683
Put that in there like this, and
we've now created a new GET endpoint for

134
00:07:47.683 --> 00:07:52.579
on an employeeId,
now we can get that Employee'sBenefits.

135
00:07:52.579 --> 00:07:56.768
And it's gonna behave very similar
to our single GetEmployeeId,

136
00:07:56.768 --> 00:08:01.552
which is to say that we now have an
endpoint that we're gonna get the employee

137
00:08:01.552 --> 00:08:03.373
by Id out of our repository.

138
00:08:03.373 --> 00:08:07.711
And if that employee is null, aka can't
be found, we're gonna return not found.

139
00:08:07.711 --> 00:08:12.472
Otherwise, we're just going to
return a list of the benefits.

140
00:08:12.472 --> 00:08:15.591
Pretty straightforward, but of course,

141
00:08:15.591 --> 00:08:19.579
we don't wanna return our
benefits object directly.

142
00:08:19.579 --> 00:08:24.059
So we're gonna do just a little
bit more cleanup and just say,

143
00:08:24.059 --> 00:08:29.059
create our little factory method
to convert our EmployeeBenefits to

144
00:08:29.059 --> 00:08:32.873
an GetEmployeeResponseEmployeeBenefit
object.

145
00:08:32.873 --> 00:08:35.293
So I'm gonna use Select,
I'm gonna use a little link.

146
00:08:35.293 --> 00:08:38.076
I'm gonna pass this
reference to this method,

147
00:08:38.076 --> 00:08:40.102
you could do these one of two ways.

148
00:08:40.102 --> 00:08:44.364
You could say, b goes into and
then GetEmployee or

149
00:08:44.364 --> 00:08:49.745
BenefitToBenefitResponse, that's
the name of our method,

150
00:08:49.745 --> 00:08:53.617
BenefitToBenefitResponse, and give it b.

151
00:08:53.617 --> 00:08:57.570
Or we can just skip all of that,
you can see that it says,

152
00:08:57.570 --> 00:09:01.526
you can just remove this
lambda expression directly and

153
00:09:01.526 --> 00:09:07.440
just pass it the function directly, which
we can do here, which is what we'll do.

154
00:09:07.440 --> 00:09:11.788
It's a little bit of link magic,
perfect, it's looking good.

155
00:09:11.788 --> 00:09:14.341
Okay, now we can use that method.

156
00:09:14.341 --> 00:09:19.421
And we're not only, we've created
a sub-resource for our benefits,

157
00:09:19.421 --> 00:09:25.176
and we've created an object that will
represent our response back to the client.

158
00:09:25.176 --> 00:09:28.903
We're not using entity objects,
so we're looking really good.

159
00:09:28.903 --> 00:09:30.812
We can also add a test for it.

160
00:09:30.812 --> 00:09:33.826
Now, recall that we just
extended our employee object, so

161
00:09:33.826 --> 00:09:37.863
we have to do just a little bit of work to
make sure that that employee has benefits

162
00:09:37.863 --> 00:09:39.205
that we can actually get.

163
00:09:39.205 --> 00:09:44.644
So we'll just continue to use
John Doe here as our test subject.

164
00:09:44.644 --> 00:09:50.261
We'll go to our tests, go to our
UnitTest.cs, and we'll go ahead and

165
00:09:50.261 --> 00:09:57.670
add John's benefits, which in this case
it's BenefitType.Health and it costs $100.

166
00:09:57.670 --> 00:10:02.592
Okay, then we can go ahead and
write our test as well.

167
00:10:05.601 --> 00:10:07.765
&gt;&gt; Spencer Schneidenbach: Boom,
go through that test in a second, but

168
00:10:07.765 --> 00:10:09.412
let's do a little manual check.

169
00:10:09.412 --> 00:10:12.054
Let's get the satisfaction
of seeing our benefits.

170
00:10:12.054 --> 00:10:14.559
All right, let's see.

171
00:10:14.559 --> 00:10:21.364
So if we get our employees, I don't think,
do we, yes, what's our code right now?

172
00:10:21.364 --> 00:10:25.245
5129, or did something did not compile?

173
00:10:25.245 --> 00:10:27.079
That's right,
tried to run the test project.

174
00:10:30.008 --> 00:10:32.968
&gt;&gt; Spencer Schneidenbach: Okay,
we're gonna get all of our employees.

175
00:10:32.968 --> 00:10:35.504
Yeah, I was gonna say,
I think that array is empty.

176
00:10:35.504 --> 00:10:38.934
We'll go ahead and
add 1 to our project real quick.

177
00:10:41.529 --> 00:10:44.338
&gt;&gt; Spencer Schneidenbach: Up here,
we'll go to our UnitTest.cs.

178
00:10:48.271 --> 00:10:52.675
&gt;&gt; Spencer Schneidenbach: Copy our repo,
do a little bit of magic.

179
00:10:52.675 --> 00:10:54.678
Where's our employees going?

180
00:10:54.678 --> 00:10:56.064
These employees aren't used at all.

181
00:10:56.064 --> 00:10:59.551
All right, so
we can go to our EmployeeRepository.

182
00:10:59.551 --> 00:11:03.670
We'll just new it up, EmployeeRepository,

183
00:11:03.670 --> 00:11:07.371
new EmployeeRepository, boom, boom.

184
00:11:07.371 --> 00:11:11.804
And then foreach var e in employees,

185
00:11:11.804 --> 00:11:17.102
we'll do EmployeeRepository.create e.

186
00:11:17.102 --> 00:11:19.086
And then we will go here, and

187
00:11:19.086 --> 00:11:24.383
instead of just having it instantiate
the type we'll provide it directly,

188
00:11:24.383 --> 00:11:29.864
EmployeeRepository, and let's just give
John Doe a little bit of benefits.

189
00:11:33.291 --> 00:11:35.917
&gt;&gt; Spencer Schneidenbach: Perfect,
there we go.

190
00:11:35.917 --> 00:11:37.358
Give John Doe a little benefits.

191
00:11:37.358 --> 00:11:40.570
And now we've got some data
inside of our repo that we

192
00:11:40.570 --> 00:11:42.988
can use to get in our GetEmployee call.

193
00:11:42.988 --> 00:11:47.680
Now we see that we have data, and
you can see that we get our benefits back.

194
00:11:47.680 --> 00:11:50.596
What is John Doe's Id?

195
00:11:50.596 --> 00:11:54.429
John Doe's ID is probably,
I'm gonna guess it's 1,

196
00:11:54.429 --> 00:11:56.963
so I'm going to say 1 and benefits.

197
00:11:56.963 --> 00:12:01.637
And you're gonna see that we get John's
benefits back the BenefitType and

198
00:12:01.637 --> 00:12:04.913
the EmployeeId,
EmployeeId should be set though.

199
00:12:04.913 --> 00:12:06.179
But at any rate,

200
00:12:06.179 --> 00:12:11.525
we'll get to that when we get to our
entity framework part of the talk.

201
00:12:11.525 --> 00:12:16.324
And then, of course, we can go back
to our test, we can build our tests,

202
00:12:16.324 --> 00:12:20.438
and we can see that we have our
benefits for employee's test.

203
00:12:20.438 --> 00:12:25.543
We can run it, we specify that
John has two benefits up here.

204
00:12:25.543 --> 00:12:30.072
So in our test, we assert that that's
how many benefits that we get back, and

205
00:12:30.072 --> 00:12:31.124
that is the case.

206
00:12:31.124 --> 00:12:34.349
That's how many benefits we get back,
we get some passing tests and for

207
00:12:34.349 --> 00:12:36.517
good measure,
let's run the rest of them too.

208
00:12:36.517 --> 00:12:40.081
All green, we like it.

209
00:12:40.081 --> 00:12:44.542
So that's some considerations that
you might make when you're adding

210
00:12:44.542 --> 00:12:46.631
sub-resources in for your API.

211
00:12:46.631 --> 00:12:48.072
Do you return it in the parent object?

212
00:12:48.072 --> 00:12:50.380
Do you return it in a sub-object?

213
00:12:50.380 --> 00:12:52.267
Do you create them in the parent object?

214
00:12:52.267 --> 00:12:56.014
Probably not, it's best to do
it inside of its own resource.

215
00:12:56.014 --> 00:13:00.093
So in this case, create a benefit API,
and then create and

216
00:13:00.093 --> 00:13:02.604
update those benefits from there.

