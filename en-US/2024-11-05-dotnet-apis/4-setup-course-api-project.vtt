WEBVTT

1
00:00:00.140 --> 00:00:01.944
&gt;&gt; Spencer Schneidenbach: So let me
talk about what we're gonna be actually

2
00:00:01.944 --> 00:00:02.720
building here.

3
00:00:02.720 --> 00:00:06.261
So we're gonna go down and we're gonna
talk about all the different components of

4
00:00:06.261 --> 00:00:10.400
ASP.NET Core, at least the ones that I
use 99% of the time when I'm developing.

5
00:00:10.400 --> 00:00:13.675
We're gonna start by building a simple
web API that allows us to manage

6
00:00:13.675 --> 00:00:15.810
a list of employees in memory.

7
00:00:15.810 --> 00:00:20.654
And by the end, you'll be able to take
that and we'll actually have a database,

8
00:00:20.654 --> 00:00:25.358
and we'll have a serious set of APIs and
tests that you can use as a blueprint for

9
00:00:25.358 --> 00:00:26.727
creating other apps.

10
00:00:26.727 --> 00:00:30.603
If you're so inclined, you can go
clone this repo and follow along.

11
00:00:30.603 --> 00:00:34.858
Everything that you see is
additive to the previous lesson.

12
00:00:34.858 --> 00:00:36.235
So let me give you an example.

13
00:00:36.235 --> 00:00:39.897
As we're going through two,
writing our first tests, for

14
00:00:39.897 --> 00:00:44.968
example we'll be taking a base solution
and we'll be adding to it as time goes on.

15
00:00:44.968 --> 00:00:50.293
And then at the end, the end product for
that will be the next exercise.

16
00:00:50.293 --> 00:00:54.258
So you can see a completed
solution here by peeking ahead and

17
00:00:54.258 --> 00:00:57.099
looking at 2D for instance.

18
00:00:57.099 --> 00:00:59.289
So all of the tests will be in this one.

19
00:00:59.289 --> 00:01:02.842
So you'll be able to follow along,
type along as I go, and

20
00:01:02.842 --> 00:01:05.174
you'll see exactly what I'm doing.

21
00:01:05.174 --> 00:01:08.182
The documentation that you have
kind of takes you step by step, and

22
00:01:08.182 --> 00:01:10.720
I'll explain some of my
thought process along the way.

23
00:01:10.720 --> 00:01:16.385
The final solution here is the 4Z and it
has kind of everything that I completed,

24
00:01:16.385 --> 00:01:20.902
plus a couple of extra things,
which we'll touch on at the end.

25
00:01:20.902 --> 00:01:24.816
And then the link in this repo does
link back to the documentation if you so

26
00:01:24.816 --> 00:01:25.979
choose.

27
00:01:25.979 --> 00:01:30.562
Let's start by building TheEmployeeAPI.

28
00:01:30.562 --> 00:01:35.300
That is gonna be the API that
we are going to build on, so

29
00:01:35.300 --> 00:01:40.156
I'm going to say dotnet new webapi,
TheEmployeeAPI.

30
00:01:40.156 --> 00:01:42.481
All right, in the Employee API,

31
00:01:42.481 --> 00:01:46.974
you're gonna see pretty much
exactly the same as we had before.

32
00:01:46.974 --> 00:01:50.969
It gives you that general blueprint,
that weather forecast, but

33
00:01:50.969 --> 00:01:54.392
we're gonna start by
deleting some of this stuff.

34
00:01:54.392 --> 00:01:56.782
We don't need the weather forecast.

35
00:01:56.782 --> 00:01:58.618
We do need the app.Run,
so we'll keep that.

36
00:01:58.618 --> 00:02:01.200
We don't need this record type.

37
00:02:01.200 --> 00:02:04.330
We don't need the summaries.

38
00:02:04.330 --> 00:02:06.887
So this is what you'll be left with.

39
00:02:06.887 --> 00:02:08.965
So let me talk about minimal APIs.

40
00:02:08.965 --> 00:02:14.210
So the weather forecast example
is what's known as a minimal API.

41
00:02:14.210 --> 00:02:18.014
It's a relatively new feature in
.NET that allows you to define

42
00:02:18.014 --> 00:02:21.616
API endpoints right here where
you define your middleware.

43
00:02:21.616 --> 00:02:25.543
So I wanna talk about what
the actual API looks like.

44
00:02:25.543 --> 00:02:29.028
So we saw MapGet,
you'll see that if we go here,

45
00:02:29.028 --> 00:02:34.474
we'll see that there are actually two
types of arguments to this function.

46
00:02:34.474 --> 00:02:36.722
So what we have is we've got our pattern.

47
00:02:36.722 --> 00:02:43.012
So we'll say employees for now, and then
you'll see that we can give it a delegate,

48
00:02:43.012 --> 00:02:47.456
AKA any old function, or
we can give it a request delegate.

49
00:02:48.786 --> 00:02:52.309
So a request delegate is pretty
much give me the raw context and

50
00:02:52.309 --> 00:02:54.366
just handle it as you see fit.

51
00:02:54.366 --> 00:02:57.465
So it looks a little bit like this.

52
00:02:57.465 --> 00:03:02.395
So there's the argument goes into
get that lambda and you can see that

53
00:03:02.395 --> 00:03:07.169
if you want to, you can just handle
the request in a very raw sense.

54
00:03:07.169 --> 00:03:10.036
So you can read the items,
you can read the headers directly.

55
00:03:10.036 --> 00:03:11.186
We won't be using this one.

56
00:03:11.186 --> 00:03:16.492
We won't be writing raw, we're gonna be
using ASP net core framework as intended,

57
00:03:16.492 --> 00:03:18.224
as a high level framework.

58
00:03:18.224 --> 00:03:19.985
So we're not gonna be
using that very much.

59
00:03:21.895 --> 00:03:24.195
What we will be using, however,

60
00:03:24.195 --> 00:03:28.724
is the delegate one where we pass
in pretty much any old function.

61
00:03:28.724 --> 00:03:32.191
Before we get into that, though,
we do need to create our employee class.

62
00:03:32.191 --> 00:03:35.988
So I'm gonna go ahead and go here,
and I'm gonna go to employee.cs and

63
00:03:35.988 --> 00:03:37.520
this is gonna be the holder.

64
00:03:37.520 --> 00:03:40.939
So this is the employee API, and
we wanna return some employees.

65
00:03:40.939 --> 00:03:44.847
So we're gonna say public class employee,
and we're gonna say prop.

66
00:03:44.847 --> 00:03:48.470
So I put prop and then I hit tab,
which is just basically a shortcut for

67
00:03:48.470 --> 00:03:49.544
give me a property.

68
00:03:49.544 --> 00:03:52.757
I'm gonna keep it as an int, and
I'm gonna give it an Id, and

69
00:03:52.757 --> 00:03:55.120
then I'm going to tab away.

70
00:03:55.120 --> 00:03:59.975
An integer Id is a pretty typical thing
used in database systems to indicate that

71
00:03:59.975 --> 00:04:01.500
this is a unique record.

72
00:04:01.500 --> 00:04:03.682
So we're gonna be talking
to a database directly, so

73
00:04:03.682 --> 00:04:05.580
we know that we're gonna
need an employee Id.

74
00:04:05.580 --> 00:04:10.121
And then I'm gonna give it a FirstName,

75
00:04:10.121 --> 00:04:14.805
tab out, and then prop string LastName.

76
00:04:14.805 --> 00:04:17.349
So you'll notice right away that the
compiler is complaining about something.

77
00:04:17.349 --> 00:04:20.260
You'll see these squiggly lines, and
it says non-nullable property for

78
00:04:20.260 --> 00:04:22.908
FirstName must contain a non null
value when exiting constructor.

79
00:04:22.908 --> 00:04:25.269
That's because we have nullability on.

80
00:04:25.269 --> 00:04:30.144
So what we can do is we could handle
this by adding a question mark to

81
00:04:30.144 --> 00:04:32.726
say that this could be a null type.

82
00:04:34.146 --> 00:04:37.866
But in reality, we're trying to model
how employees are in the real world,

83
00:04:37.866 --> 00:04:41.046
we want this to be a real model
at least as much as we can.

84
00:04:41.046 --> 00:04:44.596
And we know that employees,
at the very least, have to have a name.

85
00:04:44.596 --> 00:04:49.507
So we're gonna go ahead and
use the required keyword here for now,

86
00:04:49.507 --> 00:04:52.366
and that will make that go away.

87
00:04:52.366 --> 00:04:55.128
By the way, I do wanna talk
a little bit about nullability, so

88
00:04:55.128 --> 00:04:57.826
we're gonna use nullability
in this project.

89
00:04:57.826 --> 00:05:01.501
Lots of real world projects that
already exist can't really go back and

90
00:05:01.501 --> 00:05:02.489
add nullability.

91
00:05:02.489 --> 00:05:06.499
At least not without spending a huge
amount of time and money, and we're paid

92
00:05:06.499 --> 00:05:10.526
to ship features, so usually those win
out over making refactors like that.

93
00:05:10.526 --> 00:05:13.284
But if you're starting
with a greenfield project,

94
00:05:13.284 --> 00:05:16.731
I highly recommend that you use
nullability, which is to say that

95
00:05:16.731 --> 00:05:20.321
our reference types are marked as
either nullable or not nullable.

96
00:05:20.321 --> 00:05:24.303
In this case, these are required so
our reference type, our string,

97
00:05:24.303 --> 00:05:26.895
we wanna mark that as required.

98
00:05:26.895 --> 00:05:31.913
And the compiler will help us along
the way to say, the editor will give

99
00:05:31.913 --> 00:05:37.655
us squiggly lines and it will tell
us that, hey, you can't do this.

100
00:05:37.655 --> 00:05:39.690
I'm gonna do one thing here real quick.

101
00:05:39.690 --> 00:05:41.904
I'm gonna take this a step further.

102
00:05:41.904 --> 00:05:44.263
I think if you enable nullability,

103
00:05:44.263 --> 00:05:48.442
it's my belief that you should
also treat warnings as errors.

104
00:05:48.442 --> 00:05:50.658
Because right now the way it sits,

105
00:05:50.658 --> 00:05:53.797
the squiggly line is just
gonna complain at you.

106
00:05:53.797 --> 00:05:57.033
It's just a warning, but
your solution will still run.

107
00:05:57.033 --> 00:05:59.889
But we're gonna get some extra safety
here because this is a new project.

108
00:05:59.889 --> 00:06:04.792
So I'm gonna say true, and
I'm gonna say TreatWarningsAsErrors,

109
00:06:04.792 --> 00:06:06.830
close that up, close that.

110
00:06:06.830 --> 00:06:11.710
And now you see down here that our
warning, what would previously

111
00:06:11.710 --> 00:06:16.426
run is now showing a nice red X to say,
hey, you can't do this.

112
00:06:16.426 --> 00:06:19.362
Now, it's a red squiggly,
it's angry, angry squiggly.

113
00:06:19.362 --> 00:06:22.264
So we're gonna give it that required
property, get it to stop complaining.

