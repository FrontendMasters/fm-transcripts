WEBVTT

1
00:00:00.065 --> 00:00:02.812
&gt;&gt; Spencer Schneidenbach: And querying
with EF Core Basics, so up to this point,

2
00:00:02.812 --> 00:00:07.537
we've created our DbContext, we've created
our DbSets, we've created our migrations,

3
00:00:07.537 --> 00:00:09.055
we've seeded our database.

4
00:00:09.055 --> 00:00:12.947
We've done everything we needed to
do except the thing to do where

5
00:00:12.947 --> 00:00:17.075
the rubber meets the road,
which is connect our database to our API.

6
00:00:17.075 --> 00:00:21.965
So first things first, let's go over
a few querying basics with LINQ.

7
00:00:21.965 --> 00:00:27.275
So you'll recall that LINQ
methods on a given collection

8
00:00:27.275 --> 00:00:32.363
can be chained together such
that you can very fluently

9
00:00:32.363 --> 00:00:37.136
express operations to look
over that collection.

10
00:00:37.136 --> 00:00:41.662
So in this case, right here,
we're filtering down, we're using Where.

11
00:00:41.662 --> 00:00:43.728
In JavaScript, we would say filter.

12
00:00:43.728 --> 00:00:49.190
We'd say Where e.Salary is greater
than 10,000, or sorry, 100,000.

13
00:00:49.190 --> 00:00:53.702
Then we're ordering by the name
of those employees, and

14
00:00:53.702 --> 00:00:57.842
then we're simply selecting or
map in JavaScript.

15
00:00:57.842 --> 00:00:59.350
We're just taking the name
of those employees.

16
00:00:59.350 --> 00:01:03.013
We don't need every property on there,
we just need the employee's name.

17
00:01:03.013 --> 00:01:07.878
So we wrote a query here to
talk to this employee set.

18
00:01:07.878 --> 00:01:12.802
We can do the same thing when we're
talking to our employees table in SQLite,

19
00:01:12.802 --> 00:01:15.316
so let me show you what that looks like.

20
00:01:15.316 --> 00:01:20.025
So I wanna first kind of bring
up this IRepository interface,

21
00:01:20.025 --> 00:01:25.468
which is our reflection of the repository
pattern in our code, right?

22
00:01:25.468 --> 00:01:28.280
It seems that it's useful,
pretty complete.

23
00:01:28.280 --> 00:01:31.781
It seems like that we need to
be able to get them objects,

24
00:01:31.781 --> 00:01:34.844
you need to be able to create,
update, delete.

25
00:01:34.844 --> 00:01:38.493
But how does this actually look
as applications get more complex?

26
00:01:38.493 --> 00:01:42.513
So consider that this repository
abstraction kind of breaks when you

27
00:01:42.513 --> 00:01:46.341
wanna be able to do something like
get an object by a different ID.

28
00:01:46.341 --> 00:01:49.183
So for employee, for
example, we can get them and

29
00:01:49.183 --> 00:01:53.049
uniquely identify them probably
by their social security number.

30
00:01:53.049 --> 00:01:57.410
So if we wanted to do that, so
we'd have to do something special, right?

31
00:01:57.410 --> 00:02:01.405
It already breaks our iRepository
interface, so what would we have to do?

32
00:02:01.405 --> 00:02:06.187
Well, one way that you could model that
is by creating an IEmployeeRepository

33
00:02:06.187 --> 00:02:09.092
which implements
the IRepository interface.

34
00:02:09.092 --> 00:02:12.501
And then defines its own
GetBySocialSecurityNumber method that you

35
00:02:12.501 --> 00:02:15.624
could use to get that employee
by that social security number.

36
00:02:15.624 --> 00:02:19.226
And then we could create an
EmployeeRepository which we already have.

37
00:02:19.226 --> 00:02:24.600
Or we could switch our EmployeeRepository
to implement IEmployeeRepository instead,

38
00:02:24.600 --> 00:02:27.617
but let's consider what
that looks like in code.

39
00:02:27.617 --> 00:02:32.272
We now have at least three separate files,
two abstraction files, right,

40
00:02:32.272 --> 00:02:36.868
two of our interfaces for representing
a single repository for employee.

41
00:02:36.868 --> 00:02:39.474
The rabbit hole goes way deeper.

42
00:02:39.474 --> 00:02:44.245
And there's a lot of problems with
this interface such that querying

43
00:02:44.245 --> 00:02:47.049
it is rather difficult in a way, right?

44
00:02:47.049 --> 00:02:49.992
This is actually a very
simplified IRepository.

45
00:02:49.992 --> 00:02:54.914
You could instead do a GetAll where
you expose IQueryable, but now you're

46
00:02:54.914 --> 00:02:59.604
introducing a layer of abstraction
in your repository between that and

47
00:02:59.604 --> 00:03:00.792
your DbContext.

48
00:03:00.792 --> 00:03:06.026
So let me just skip to Spencer's opinion
on this, and this is a spicy one.

49
00:03:06.026 --> 00:03:09.306
DbContext by its very nature
is a combination of two

50
00:03:09.306 --> 00:03:11.376
different software patterns.

51
00:03:11.376 --> 00:03:15.711
It is the repository pattern because
we can get and put objects in there.

52
00:03:15.711 --> 00:03:20.863
And it's also the unit of work pattern
because DbContext is smart enough to say,

53
00:03:20.863 --> 00:03:25.408
if you wanna add two employees and
a benefit and then call save changes,

54
00:03:25.408 --> 00:03:28.233
it will do that all in
one go as a unit of work.

55
00:03:28.233 --> 00:03:32.778
Because it inherently supports database
transactions, which will prevent,

56
00:03:32.778 --> 00:03:37.251
if there's an error from inserting or
updating an object, it will prevent all

57
00:03:37.251 --> 00:03:41.724
of those data, those data mutations,
from being committed to the database,

58
00:03:41.724 --> 00:03:44.816
which is a really, really,
really critical thing.

59
00:03:44.816 --> 00:03:48.286
Database transactions are a really
important part of a developer's

60
00:03:48.286 --> 00:03:48.893
day to day.

61
00:03:48.893 --> 00:03:53.868
So it's my spicy, and I say it's spicy
because I think that the community is very

62
00:03:53.868 --> 00:03:59.158
divided about this, about 50/50 based on
a poll on Twitter I did a few years ago.

63
00:03:59.158 --> 00:04:03.292
That we should skip the IRepository
interface altogether and

64
00:04:03.292 --> 00:04:05.047
use DbContext directly.

65
00:04:05.047 --> 00:04:09.951
What ends up happening is typically, is
if they do use a repository pattern with

66
00:04:09.951 --> 00:04:14.416
Entity Framework Core is that they've
introduced a lot of extra code and

67
00:04:14.416 --> 00:04:17.583
a lot of layers of abstraction
on top of DbContext.

68
00:04:17.583 --> 00:04:21.471
And repository ends just being
a wrapper around DbContext, but

69
00:04:21.471 --> 00:04:23.272
not a particularly good one.

70
00:04:23.272 --> 00:04:26.973
Because one thing that
abstractions do is that they leak,

71
00:04:26.973 --> 00:04:31.578
and what that means is an abstraction
that can fail to meet all use cases,

72
00:04:31.578 --> 00:04:34.163
is what's called a leaky abstraction.

73
00:04:34.163 --> 00:04:37.463
So your abstraction might be good today,
but a couple of days from now,

74
00:04:37.463 --> 00:04:39.947
a couple of weeks from now,
it may not be sufficient.

75
00:04:39.947 --> 00:04:45.480
So there are reasons that we should
wrap DbContext up occasionally, right?

76
00:04:45.480 --> 00:04:47.400
And I do that on a case-by-case basis.

77
00:04:47.400 --> 00:04:49.130
Caching is a really good example of that.

78
00:04:49.130 --> 00:04:53.330
If I need to cache this object in
some fast memory store like Redis,

79
00:04:53.330 --> 00:04:55.730
then I can do that, but at that point,

80
00:04:55.730 --> 00:04:59.185
I'm gonna introduce
an abstraction to do that for me.

81
00:04:59.185 --> 00:05:02.387
I'm not gonna do that ahead of time,
whether or not I know to do that.

82
00:05:02.387 --> 00:05:06.406
So we're just gonna skip IRepository, and
we're gonna rip it out completely, and

83
00:05:06.406 --> 00:05:08.283
we're gonna use DbContext directly.

84
00:05:08.283 --> 00:05:10.508
All right,
I'm gonna get off my soapbox now.

85
00:05:10.508 --> 00:05:14.207
Now that we're off my soapbox,
we have a ton of refactoring to do, and

86
00:05:14.207 --> 00:05:15.918
this is gonna take a little bit.

87
00:05:15.918 --> 00:05:20.127
So I like to straight up remove old code
and interfaces that I don't need anymore,

88
00:05:20.127 --> 00:05:22.633
and let the compiler tell
me where to fix things.

89
00:05:22.633 --> 00:05:25.906
I could do dotnet build, and
just let the errors guide my way.

90
00:05:25.906 --> 00:05:28.317
So that's exactly what we're gonna do.

91
00:05:28.317 --> 00:05:34.487
So we're gonna skip over to,
we are on querying basics.

92
00:05:34.487 --> 00:05:38.837
So we are gonna close this folder, and
we're gonna open up that next lesson.

93
00:05:39.930 --> 00:05:47.000
We're on querying basics, boom, and we're
gonna see that we have our DbContext.

94
00:05:47.000 --> 00:05:48.924
We have an on model
creating if we need it, but

95
00:05:48.924 --> 00:05:51.010
we don't,
it's actually not doing anything.

96
00:05:51.010 --> 00:05:54.112
It's actually calling the base,
which by the way,

97
00:05:54.112 --> 00:05:58.354
if you dig into that code,
this method doesn't actually do anything.

98
00:05:58.354 --> 00:06:03.600
You don't need to call it the base
method for this, but it's there.

99
00:06:03.600 --> 00:06:08.672
We still have our, let's see,
we still have our IRepository abstraction,

100
00:06:08.672 --> 00:06:11.649
and of course, we've got our IRepository.

101
00:06:11.649 --> 00:06:16.797
So we're gonna do this,
we're gonna go nuclear on this thing.

102
00:06:16.797 --> 00:06:20.219
First thing we're gonna do is hit
the delete key, my favorite key to delete.

103
00:06:20.219 --> 00:06:21.713
Are you sure to wanna
move this to the trash?

104
00:06:21.713 --> 00:06:24.274
Yes, because I don't like
the IRepository interface.

105
00:06:24.274 --> 00:06:28.031
I wanna remind you that I brought it up
earlier on because I still do see it in

106
00:06:28.031 --> 00:06:28.586
the wild.

107
00:06:28.586 --> 00:06:31.363
I still think it's important to know, but

108
00:06:31.363 --> 00:06:34.984
I want you to know that if I
were starting a new project and

109
00:06:34.984 --> 00:06:40.170
I never use the IRepository interface at
its face, I always start with EF Core.

110
00:06:40.170 --> 00:06:43.182
So now that we've gotten that all the way,

111
00:06:43.182 --> 00:06:48.385
we can open up our terminal dotnet build,
and we got a lot of things to fix.

112
00:06:48.385 --> 00:06:51.485
We got, well, nine errors,
that's not so bad.

113
00:06:51.485 --> 00:06:53.623
We'll start by going to Program.cs.

114
00:06:53.623 --> 00:06:57.119
You'll see that this USING
statement no longer is needed.

115
00:06:57.119 --> 00:06:59.809
Actually, these three are not needed,
so we'll go ahead and delete them.

116
00:06:59.809 --> 00:07:02.545
And I can tell they're
not needed by the way,

117
00:07:02.545 --> 00:07:07.591
because they're kind of in a faded font,
so we'll just go ahead and delete those.

118
00:07:07.591 --> 00:07:10.886
This list of employees hasn't been needed
for a while, so we'll go ahead and

119
00:07:10.886 --> 00:07:11.504
delete that.

120
00:07:11.504 --> 00:07:14.083
And then we've got our EmployeeRepository.

121
00:07:14.083 --> 00:07:16.073
Where the heck does that live?

122
00:07:16.073 --> 00:07:17.431
We need to blow that up, too.

123
00:07:17.431 --> 00:07:21.729
All right, employee repository, it
doesn't have anything to inherit from, so

124
00:07:21.729 --> 00:07:24.547
we're just gonna do the delete key,
boom, love it.

125
00:07:24.547 --> 00:07:28.788
And then, of course, our compiler's gonna
complain that these things no longer

126
00:07:28.788 --> 00:07:32.120
exist, so
we're gonna put those down there.

127
00:07:32.120 --> 00:07:35.117
And that's good, so
we're gonna continue to build and

128
00:07:35.117 --> 00:07:39.389
see where the rest of our errors are,
which they should almost exclusively be,

129
00:07:39.389 --> 00:07:42.098
inside of our tests and
inside of our controller.

130
00:07:42.098 --> 00:07:44.038
So let's go ahead and go there, and

131
00:07:44.038 --> 00:07:47.801
we're gonna see that we no longer
need the abstractions namespace.

132
00:07:47.801 --> 00:07:50.930
It no longer exists because
we deleted the folder and

133
00:07:50.930 --> 00:07:53.212
we don't have a repository anymore.

134
00:07:53.212 --> 00:07:56.610
So we're gonna delete that, and
then we are going to delete this, because,

135
00:07:56.610 --> 00:07:59.831
of course, we don't have that,
and we don't need that.

136
00:07:59.831 --> 00:08:01.967
So that's looking pretty good so far.

137
00:08:01.967 --> 00:08:06.258
First thing we need to do is we could
keep deleting, but I'm gonna go ahead and

138
00:08:06.258 --> 00:08:09.709
set us up correctly since we're
already on this line of code.

139
00:08:09.709 --> 00:08:14.300
So I'm gonna say AppDbContext,
just go ahead and

140
00:08:14.300 --> 00:08:19.451
have our dependency injection
system wire it up for me.

141
00:08:19.451 --> 00:08:24.294
So when this controller's instantiated,
the ASP.NET Core is going to see that we

142
00:08:24.294 --> 00:08:27.280
already have an ASP or
an AppDbContext available.

143
00:08:27.280 --> 00:08:30.563
So it's going to construct that for
us, connect it to SQLite, and

144
00:08:30.563 --> 00:08:32.040
give it into our controller.

145
00:08:32.040 --> 00:08:36.554
And out of force of habit and
also stylistically, I'm going to add

146
00:08:36.554 --> 00:08:41.810
the underscore in front of that, and
then we're gonna see a bunch of things.

147
00:08:41.810 --> 00:08:48.159
So we're gonna see that our
repository.GetAll doesn't exist anymore.

148
00:08:48.159 --> 00:08:56.724
So I'm gonna change this to be await
_dbContext.Employees.ToArrayAsync.

149
00:08:56.724 --> 00:09:02.814
I'm gonna go ahead and
just put them all into memory.

150
00:09:02.814 --> 00:09:08.158
I am also going to put this down as task,
boom, boom, we like it.

151
00:09:08.158 --> 00:09:12.834
Okay, and then we're gonna return
employees, but we are going to say

152
00:09:12.834 --> 00:09:18.711
employees.Select and then pass it our,
method EmployeeToGetEmployeeResponse.

153
00:09:18.711 --> 00:09:24.437
So far so good, we're gonna go down
to here, to our single endpoint.

154
00:09:24.437 --> 00:09:26.341
And we're gonna do a similar thing.

155
00:09:26.341 --> 00:09:29.101
So there's a couple of different
things that you can do here.

156
00:09:29.101 --> 00:09:31.991
I'm going to go ahead and kill that.

157
00:09:31.991 --> 00:09:36.092
You heard me when we were talking
yesterday about single methods, or

158
00:09:36.092 --> 00:09:39.570
methods that you can use in
LINQ to get single objects out.

159
00:09:39.570 --> 00:09:42.110
So there's a couple of different
ones that we can talk about.

160
00:09:42.110 --> 00:09:46.993
I'm gonna use
SingleOrDefaultAsync because

161
00:09:46.993 --> 00:09:50.757
that's the one that I use the most.

162
00:09:50.757 --> 00:09:54.000
The reason that I wanna use at
least something that I know

163
00:09:54.000 --> 00:09:58.623
will return null is because I wanna check
this to see if it's null, and if it is,

164
00:09:58.623 --> 00:10:00.486
then I want to return not found.

165
00:10:00.486 --> 00:10:04.070
Otherwise, if you call Single and that
object doesn't exist, you're not gonna get

166
00:10:04.070 --> 00:10:07.769
a not found, you're gonna get a 500
because it's gonna throw an exception.

167
00:10:07.769 --> 00:10:10.149
So we're gonna say SingleOrDefaultAsync.

168
00:10:10.149 --> 00:10:16.629
We're gonna go ahead and out of habit,
async all the way down if we can help it.

169
00:10:16.629 --> 00:10:19.588
So we're gonna convert this
to an async task method,

170
00:10:19.588 --> 00:10:22.802
which is ASP.NET Core will happily use.

171
00:10:22.802 --> 00:10:26.940
We will await this method, and

172
00:10:26.940 --> 00:10:32.519
then we will say our (e => Id == id).

173
00:10:32.519 --> 00:10:36.551
So we're saying we're passing
it a lambda that says,

174
00:10:36.551 --> 00:10:39.181
give me the employee, the single or

175
00:10:39.181 --> 00:10:44.456
non-existent employee where their ID
is equal to the ID I pass in here.

176
00:10:44.456 --> 00:10:49.673
I do wanna hover over and notice that we
are not using the IEnumerable LINQ (Language Integrated Query) method,

177
00:10:49.673 --> 00:10:52.433
we are using the IQueryable one.

178
00:10:52.433 --> 00:10:56.534
Because if both are available right now,
but extension methods will always

179
00:10:56.534 --> 00:11:00.006
target when there's a narrower,
what we call a narrower type.

180
00:11:00.006 --> 00:11:04.177
We know that IQuery that this thing has
an IQueryable extension method, and

181
00:11:04.177 --> 00:11:08.088
IQueryable actually does
inherit from IEnumerable.

182
00:11:08.088 --> 00:11:11.368
So we are going to use this LINQ method,
which is exactly what we want.

183
00:11:11.368 --> 00:11:16.707
And you see here that we are passing
an expression of func in,

184
00:11:16.707 --> 00:11:21.324
but it looks exactly the same
as a regular function.

185
00:11:21.324 --> 00:11:27.368
It's a property of C#,
it is called homoiconicity.

186
00:11:27.368 --> 00:11:31.766
And it basically says that the syntax that
you use to define your data structure for

187
00:11:31.766 --> 00:11:34.395
your functions also can
define your functions.

188
00:11:34.395 --> 00:11:38.679
There are some languages that are purely
homoiconistic, I guess is how you would

189
00:11:38.679 --> 00:11:43.263
say that, but C# isn't purely, but
it is in its side of its functions.

190
00:11:43.263 --> 00:11:46.780
That's why LINQ is so powerful, one of
the things that makes LINQ so powerful,

191
00:11:46.780 --> 00:11:48.963
it's very natural to use for developers.

192
00:11:48.963 --> 00:11:53.503
There's also a FindAsync
method which is common to see.

193
00:11:53.503 --> 00:11:57.610
I don't have a strong opinion about
it other than I just prefer single or

194
00:11:57.610 --> 00:11:58.575
default async.

195
00:11:58.575 --> 00:12:01.450
But this one works just as well,
and in this case,

196
00:12:01.450 --> 00:12:05.433
you're just passing in the key value
of that entity, which is good.

197
00:12:08.474 --> 00:12:10.652
&gt;&gt; Spencer Schneidenbach: Go ahead and
keep it a single or default.

198
00:12:10.652 --> 00:12:15.140
Now we're gonna go ahead and run this.

199
00:12:15.140 --> 00:12:19.303
And it'll say, we can't run this yet.

200
00:12:19.303 --> 00:12:22.094
By the way, this error message,
would you like to continue and

201
00:12:22.094 --> 00:12:23.526
run the last successful build?

202
00:12:23.526 --> 00:12:26.345
I don't know anybody who's
ever hit yes for any reason.

203
00:12:26.345 --> 00:12:30.520
We're gonna hit no, we're gonna say that,
we didn't do these ones.

204
00:12:30.520 --> 00:12:32.954
We're gonna go reach for
our commenting out syntax.

205
00:12:32.954 --> 00:12:34.378
We are going to ignore these.

206
00:12:34.378 --> 00:12:36.505
These do not exist right now.

207
00:12:36.505 --> 00:12:41.029
We are actually going to comment
out all of these things and

208
00:12:41.029 --> 00:12:45.656
we are actually going to comment
out as well our validator.

209
00:12:45.656 --> 00:12:48.363
We're gonna take care of adding
an updating objects in the next

210
00:12:48.363 --> 00:12:49.137
section of this.

211
00:12:49.137 --> 00:12:50.907
So we're just gonna ignore
these things for now.

212
00:12:50.907 --> 00:12:52.978
We're gonna ignore our test for
now as well.

213
00:12:52.978 --> 00:12:58.357
We're gonna hit play,
we're going to see that we do get our API.

214
00:12:58.357 --> 00:13:03.519
We are 5129, so I will do a get,
and yay, we got back employees,

215
00:13:03.519 --> 00:13:08.236
but we're missing something,
we're missing the benefits.

216
00:13:08.236 --> 00:13:10.549
And I know we seeded
this thing with benefits.

217
00:13:10.549 --> 00:13:14.378
We seeded our employee database with
benefits, so where the heck are those?

218
00:13:14.378 --> 00:13:15.601
Let me show you.

219
00:13:15.601 --> 00:13:16.856
So by default,

220
00:13:16.856 --> 00:13:22.756
Entity Framework is going to pull back
only what you tell it to pull back.

221
00:13:22.756 --> 00:13:24.794
I'm gonna go ahead and stop this.

222
00:13:24.794 --> 00:13:32.474
So even though this Employee object
does indeed include the benefits here,

223
00:13:32.474 --> 00:13:37.274
it's not gonna pull them
back automatically.

224
00:13:37.274 --> 00:13:39.086
And the reason is in order to do that,

225
00:13:39.086 --> 00:13:42.711
Entity Framework has to expand out
the query and make it more complex, and

226
00:13:42.711 --> 00:13:45.943
it doesn't wanna do that for
you unless it feels like you need it.

227
00:13:45.943 --> 00:13:49.597
So what we're gonna do instead
is we are gonna go here, and

228
00:13:49.597 --> 00:13:52.443
we're gonna do this method called Include.

229
00:13:52.443 --> 00:13:58.280
And Include pretty much says make sure
that as part of this Employee object,

230
00:13:58.280 --> 00:14:00.754
you bring me back the benefits.

231
00:14:00.754 --> 00:14:04.144
I'm gonna run it again
without this Include, and

232
00:14:04.144 --> 00:14:07.866
I'm gonna show you the SQL
that's run as part of this.

233
00:14:07.866 --> 00:14:11.489
So I'm gonna do this, I'm gonna hit Send,
I'm gonna go back here,

234
00:14:11.489 --> 00:14:15.934
and you're gonna see the exact SQL that
gets executed against our SQLite database.

235
00:14:15.934 --> 00:14:20.673
Let me show it here,
you're gonna see that,

236
00:14:20.673 --> 00:14:24.051
what it looks like right there.

237
00:14:24.051 --> 00:14:30.950
So select pretty much all the columns
from employees as e, pretty standard.

238
00:14:30.950 --> 00:14:34.369
But as soon as you do that includes,
Entity Framework has more work to do,

239
00:14:34.369 --> 00:14:35.591
it has more lifting to do.

240
00:14:35.591 --> 00:14:40.131
So we're gonna rerun it, uncomment
out the Include, rerun this thing,

241
00:14:40.131 --> 00:14:42.912
and we are going to hit it again,
like so, and

242
00:14:42.912 --> 00:14:46.889
you're gonna see now that you're
getting your benefits back.

243
00:14:46.889 --> 00:14:50.048
We're getting the benefits,
got our benefits.

244
00:14:50.048 --> 00:14:51.873
We were missing them and
now they're back again.

