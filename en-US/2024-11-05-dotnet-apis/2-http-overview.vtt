WEBVTT

1
00:00:00.000 --> 00:00:03.189
I want to talk a little
bit about HTTP in depth.

2
00:00:03.189 --> 00:00:07.833
I think it's important to understand kind
of the low level players, so to speak,

3
00:00:07.833 --> 00:00:10.809
before we get to the frameworks
like ASP.NET Core.

4
00:00:10.809 --> 00:00:15.311
It'll help us kind of understand what
ASP.NET Core does under the hood.

5
00:00:15.311 --> 00:00:19.580
So HTTP is the protocol that
pretty much the web uses.

6
00:00:19.580 --> 00:00:21.920
It allows clients to communicate
with servers and back.

7
00:00:21.920 --> 00:00:24.113
It's the protocol that powers the web.

8
00:00:24.113 --> 00:00:24.768
It's pretty standard.

9
00:00:24.768 --> 00:00:29.609
I think that if you open up a web browser
and you go to a website using HTTP.

10
00:00:29.609 --> 00:00:33.567
I wanna take a brief look at
a typical request and response.

11
00:00:33.567 --> 00:00:36.755
This is what it actually looks like
when you're actually making a request.

12
00:00:36.755 --> 00:00:42.083
Under the hood when the bytes are moving
from the client to the server,

13
00:00:42.083 --> 00:00:44.174
this is what it looks like.

14
00:00:44.174 --> 00:00:47.247
If we take it line by line,
we have GET /index.

15
00:00:47.247 --> 00:00:50.180
So GET is what's called the HTTP verb.

16
00:00:50.180 --> 00:00:51.143
And so we'll see a lot of those.

17
00:00:51.143 --> 00:00:54.710
We'll use a few of them
during this course.

18
00:00:54.710 --> 00:00:57.748
This will be the resource that
you're actually wanting to request.

19
00:00:57.748 --> 00:01:00.506
In this case, it's index.html.

20
00:01:00.506 --> 00:01:04.577
And the version of HTTP that you're
using to execute the request,

21
00:01:04.577 --> 00:01:06.551
most of them are HTTP/1.1.

22
00:01:06.551 --> 00:01:10.458
Still not a hugely amount of wide
support for HTTP/2, but it's happening.

23
00:01:10.458 --> 00:01:12.783
Slowly, but surely.

24
00:01:12.783 --> 00:01:16.189
We have the host, so
this is where we should actually go for

25
00:01:16.189 --> 00:01:18.355
www.example.com is the web host.

26
00:01:18.355 --> 00:01:19.989
And then the resource,

27
00:01:19.989 --> 00:01:25.149
the fully qualified resource name
would be example.com/index.html.

28
00:01:25.149 --> 00:01:28.054
And then these are what's
referred to as request headers.

29
00:01:28.054 --> 00:01:32.770
And so these are data about the request
that is being sent by the client

30
00:01:32.770 --> 00:01:36.524
to say hey, I want expect and
I accept back a text HTML.

31
00:01:36.524 --> 00:01:38.904
That gives the server
the opportunity to say,

32
00:01:38.904 --> 00:01:41.841
well I can't serve that if
you request something funky.

33
00:01:41.841 --> 00:01:45.097
And then you can use accept
language as well to say,

34
00:01:45.097 --> 00:01:50.047
I want this in English, and I want it in
the United States version of English.

35
00:01:50.047 --> 00:01:53.250
You can have as many headers
as you want in your request.

36
00:01:53.250 --> 00:01:55.871
It's really dependent on
what the server needs.

37
00:01:55.871 --> 00:02:00.629
And usually these requests are a lot
bigger in that there's usually lots

38
00:02:00.629 --> 00:02:03.516
more headers that
are sent by your browser.

39
00:02:03.516 --> 00:02:07.824
But I think this is fine for
now in terms of understanding kind of

40
00:02:07.824 --> 00:02:11.499
the pieces of HTTP that are relevant for
this course.

41
00:02:11.499 --> 00:02:14.065
So the response looks very similar.

42
00:02:14.065 --> 00:02:18.650
Requests and responses, they have
pretty much the same similarities

43
00:02:18.650 --> 00:02:21.996
in that there's always
a header that's defined.

44
00:02:21.996 --> 00:02:23.907
Yep, this is HTTP/1.

45
00:02:23.907 --> 00:02:27.919
This is the status code that's
returned from the server to say, yes,

46
00:02:27.919 --> 00:02:29.219
your request is good.

47
00:02:29.219 --> 00:02:32.055
200, okay,
is everybody's favorite response.

48
00:02:32.055 --> 00:02:35.068
Because that means, hey,
everything worked, everything was good.

49
00:02:35.068 --> 00:02:36.661
So it says 200, okay?

50
00:02:36.661 --> 00:02:40.943
Gives the client the opportunity to
parse that and say, request happened.

51
00:02:40.943 --> 00:02:42.722
And then the response headers.

52
00:02:42.722 --> 00:02:47.128
So, the server can respond with a huge
amount of headers that define, here's

53
00:02:47.128 --> 00:02:52.023
the content type, here's the language,
here's whether or not you should cache it.

54
00:02:52.023 --> 00:02:56.060
And if you can cache it or should cache
it, here's how long you can cache it,

55
00:02:56.060 --> 00:02:57.081
things like that.

56
00:02:57.081 --> 00:02:59.768
And then of course,
the body of the response.

57
00:02:59.768 --> 00:03:02.656
You've requested data from the server, so

58
00:03:02.656 --> 00:03:06.880
the server has responded in kind
with some type of information.

59
00:03:06.880 --> 00:03:10.259
Not always, sometimes the body is blank,
but in this case,

60
00:03:10.259 --> 00:03:14.052
we expected an HTML page and
sure enough, that's what we got back.

61
00:03:16.876 --> 00:03:19.635
&gt;&gt; Spencer Schneidenbach: I want to
touch on HTTP methods a little bit.

62
00:03:19.635 --> 00:03:22.210
They're also known as HTTP verbs.

63
00:03:22.210 --> 00:03:25.607
GETs are used to get resources.

64
00:03:25.607 --> 00:03:30.532
GETs have one interesting quality in
that they are not supposed to be sent

65
00:03:30.532 --> 00:03:32.400
with a body in the request.

66
00:03:32.400 --> 00:03:35.926
You can, and some servers can respond and

67
00:03:35.926 --> 00:03:40.273
read that body, but
recommended that you don't.

68
00:03:40.273 --> 00:03:41.800
POST, PUT, and DELETE.

69
00:03:41.800 --> 00:03:44.671
So post and puts are usually
to do some kind of mutation.

70
00:03:44.671 --> 00:03:47.950
In the API world,
posts are usually akin to,

71
00:03:47.950 --> 00:03:52.108
I want to take some action or
I want to create some object.

72
00:03:52.108 --> 00:03:55.162
We'll be using it more for
the create an object.

73
00:03:55.162 --> 00:03:59.213
And then puts in the API world is
another way to mutate a resource.

74
00:03:59.213 --> 00:04:03.149
But it's often used to re-mutate,
like change an existing resource like

75
00:04:03.149 --> 00:04:06.029
an employee,
which we'll see plenty of examples of.

76
00:04:06.029 --> 00:04:10.904
And then the delete verb also does
not get sent with the body, and

77
00:04:10.904 --> 00:04:14.341
it just does delete
the specified resource.

78
00:04:14.341 --> 00:04:18.106
These are a few of additional
ones that you'll see.

79
00:04:18.106 --> 00:04:22.762
Patch, we won't be using
this one in this course, but

80
00:04:22.762 --> 00:04:28.038
patch is sometimes used in place
of puts to mutate a resource.

81
00:04:28.038 --> 00:04:33.481
And there's actually a whole patch spec
that nobody seems to have adopted for

82
00:04:33.481 --> 00:04:38.602
actually changing just little bits
of a resource, not widely adopted.

83
00:04:38.602 --> 00:04:42.013
A head request is just basically saying,
hey, can you respond to this?

84
00:04:42.013 --> 00:04:45.429
Give me the information from a get
request, but don't return the body.

85
00:04:45.429 --> 00:04:48.112
I just wanna see if we're all good.

86
00:04:48.112 --> 00:04:51.278
And then options describing
the communication option for

87
00:04:51.278 --> 00:04:55.799
the target resource, often used by CORS (Cross-origin resource sharing),
which we will not cover in this course,

88
00:04:55.799 --> 00:04:58.785
to determine whether or
not a resource is accessible.

89
00:04:58.785 --> 00:05:02.571
So most of the time for APIs, we're gonna
be using GET, POST, PUT, and DELETE.

90
00:05:02.571 --> 00:05:05.855
Those are the common ones, and we'll
see examples of that as we go through.

91
00:05:08.001 --> 00:05:09.458
&gt;&gt; Spencer Schneidenbach: So
HTTP status codes,

92
00:05:09.458 --> 00:05:13.761
the status codes define the result
of the request as we mentioned.

93
00:05:13.761 --> 00:05:18.949
We've all seen 200, we've all seen
404 errors where we say this page or

94
00:05:18.949 --> 00:05:20.847
this resource is not found.

95
00:05:20.847 --> 00:05:22.094
So I wanted to go through,

96
00:05:22.094 --> 00:05:25.514
they're generally grouped into
the first digit of the response code.

97
00:05:25.514 --> 00:05:30.209
So we have informational,
I don't see this used hardly ever.

98
00:05:30.209 --> 00:05:34.772
Success, probably the most common
one is to say, yes, my request,

99
00:05:34.772 --> 00:05:40.379
was successful, and I accepted it, and
I maybe responded with some relevant data.

100
00:05:40.379 --> 00:05:44.601
300 level response codes indicate that
there's some kind of redirection or

101
00:05:44.601 --> 00:05:48.899
some type of further action that needs to
be handled in order to take the request.

102
00:05:48.899 --> 00:05:53.164
Usually, it's a redirect response
code that's returned for a 300.

103
00:05:53.164 --> 00:05:54.674
We have 400 client errors.

104
00:05:54.674 --> 00:05:57.506
So this is going to be my
favorite response code because

105
00:05:57.506 --> 00:06:01.091
I think it's the most important one,
which is 400 bad requests.

106
00:06:01.091 --> 00:06:05.004
And of course, there's 404 to
say the resource doesn't exist.

107
00:06:05.004 --> 00:06:08.417
And then 500 errors
are typically reserved for it.

108
00:06:08.417 --> 00:06:10.428
Hey, the server couldn't
handle this request.

109
00:06:10.428 --> 00:06:13.142
Something catastrophic happened that
couldn't connect to the database.

110
00:06:13.142 --> 00:06:17.262
I'm just gonna respond with 500, throw my
hands in the air, I can't do anything.

111
00:06:17.262 --> 00:06:21.727
These are the ones that we
are going to use the most of.

112
00:06:21.727 --> 00:06:24.119
We're gonna say okay, 200 okay,

113
00:06:24.119 --> 00:06:27.350
201 created to say
a resource has been created.

114
00:06:27.350 --> 00:06:32.152
We'll also use 204 no content for
seeing a resource has been deleted,

115
00:06:32.152 --> 00:06:34.170
which some people implement.

116
00:06:34.170 --> 00:06:37.743
Usually I just return a 200.

117
00:06:37.743 --> 00:06:38.986
We'll see 400 bad requests.

118
00:06:38.986 --> 00:06:41.850
We'll see lots of those, absolutely.

119
00:06:41.850 --> 00:06:43.364
We'll touch on 401 and 403.

120
00:06:43.364 --> 00:06:48.054
I do intend to talk through
some of the identity and

121
00:06:48.054 --> 00:06:52.187
authorization aspects of the ASP.NET Core framework, but

122
00:06:52.187 --> 00:06:56.112
we're not going to get too in depth in it.

123
00:06:56.112 --> 00:06:59.142
So these are the kinds of requests
that we're going to see a lot.

124
00:06:59.142 --> 00:07:00.673
Let's take a look at
a typical POST request.

125
00:07:00.673 --> 00:07:02.495
This is gonna be the kind of thing.

126
00:07:02.495 --> 00:07:05.915
We're building APIs, so
we're marshaling JSON back and

127
00:07:05.915 --> 00:07:08.087
forth from the client to the server.

128
00:07:08.087 --> 00:07:11.303
So this is gonna be an example
of what we're gonna send a lot.

129
00:07:11.303 --> 00:07:13.710
Which is to say we're
gonna have a post request.

130
00:07:13.710 --> 00:07:17.240
We're gonna hit the employees,
create endpoint of some kind.

131
00:07:17.240 --> 00:07:19.415
Here's the host that we're gonna go to,
and

132
00:07:19.415 --> 00:07:21.483
here's the content type of this request.

133
00:07:21.483 --> 00:07:24.755
That tells the server, hey, this is JSON,
and you should interpret it as such.

134
00:07:24.755 --> 00:07:29.921
This is the data transfer format that
is the ubiquitous format of the web for

135
00:07:29.921 --> 00:07:33.120
transferring data back and
forth from an API.

136
00:07:33.120 --> 00:07:35.299
We're gonna be using JSON,
it's the most common one.

