WEBVTT

1
00:00:00.000 --> 00:00:03.346
In our project,
let's set up our DBContext and DBSets.

2
00:00:03.346 --> 00:00:05.073
So as we mentioned,
we're gonna use SQLite.

3
00:00:05.073 --> 00:00:09.416
So I'm not gonna talk a lot
about databases necessarily, but

4
00:00:09.416 --> 00:00:12.100
SQLite is basically a single file DB.

5
00:00:12.100 --> 00:00:13.852
It is super cool.

6
00:00:13.852 --> 00:00:18.474
It is actually extremely mature, but
not something that you would use in

7
00:00:18.474 --> 00:00:22.436
a production system for
a SaaS product or anything like that.

8
00:00:22.436 --> 00:00:26.873
But for a single purpose,
like an application needs to run,

9
00:00:26.873 --> 00:00:31.832
it needs to track some data, and
you wanna do it in a structured way,

10
00:00:31.832 --> 00:00:36.183
SQLite's a good tool to kinda reach for
in order to do that.

11
00:00:36.183 --> 00:00:38.377
So let's go here.

12
00:00:38.377 --> 00:00:40.930
We're going to close this folder.

13
00:00:40.930 --> 00:00:46.680
And we are going to open
the next part of our exercises,

14
00:00:46.680 --> 00:00:51.055
which is, let's see, we are on 4, 3.

15
00:00:51.055 --> 00:00:52.585
So setting up.

16
00:00:52.585 --> 00:00:54.514
Let's see, querying-sub-resources.

17
00:00:54.514 --> 00:00:57.521
So we're gonna sing,
setting up your first.

18
00:00:57.521 --> 00:00:59.367
Okay, perfect.

19
00:00:59.367 --> 00:01:02.605
You can see that this is our
current project as it sits.

20
00:01:02.605 --> 00:01:05.564
We don't have any DBSet in here yet, but

21
00:01:05.564 --> 00:01:10.364
we do have all of our benefits,
and we still have our repository.

22
00:01:10.364 --> 00:01:12.096
So let's go ahead and change that.

23
00:01:12.096 --> 00:01:14.963
So first thing we need
to do is install SQLite.

24
00:01:14.963 --> 00:01:18.486
This will also install the SQLite
package for Entity Framework Core.

25
00:01:18.486 --> 00:01:20.345
We'll also install the base library.

26
00:01:20.345 --> 00:01:22.141
So you just have to install the one.

27
00:01:22.141 --> 00:01:23.216
So we'll go ahead and do that.

28
00:01:23.216 --> 00:01:27.927
Hit Cmd+P, angle bracket,
and then focus on NuGet.

29
00:01:27.927 --> 00:01:29.828
And, there we go.

30
00:01:29.828 --> 00:01:32.255
Put that there, paste that in.

31
00:01:32.255 --> 00:01:34.277
You can see that this is
the one you wanna install.

32
00:01:34.277 --> 00:01:35.783
There's the core one, but

33
00:01:35.783 --> 00:01:39.856
the one that you wanna install that has
all the real goodies is the top one.

34
00:01:39.856 --> 00:01:40.827
We'll hit plus sign.

35
00:01:44.835 --> 00:01:48.110
&gt;&gt; Spencer Schneidenbach: And
we will see inside of our project file.

36
00:01:48.110 --> 00:01:51.992
We will see that our
EntityFrameworkCore.SQLite project or

37
00:01:51.992 --> 00:01:55.507
package got installed,
which is exactly what we want.

38
00:01:55.507 --> 00:02:02.933
Okay, so let's create our DBContext and
establish our DBSet.

39
00:02:02.933 --> 00:02:06.628
Now, lots of .NETers like to put these
in separate folders like data for

40
00:02:06.628 --> 00:02:07.605
infrastructure.

41
00:02:07.605 --> 00:02:09.519
I'm gonna go ahead and
just put it in the root of the project.

42
00:02:09.519 --> 00:02:12.412
But as I like to say, you do you friend.

43
00:02:12.412 --> 00:02:13.521
I'm gonna do this.

44
00:02:13.521 --> 00:02:14.535
I'm gonna hit these.

45
00:02:14.535 --> 00:02:16.243
I'm just gonna go to
the solution explorer.

46
00:02:16.243 --> 00:02:18.120
I'm gonna click the new file icon.

47
00:02:18.120 --> 00:02:19.414
I'm gonna say I want a new class.

48
00:02:19.414 --> 00:02:26.066
I'm gonna call it AppDBContext,
hit Enter, and we got ourselves a class.

49
00:02:26.066 --> 00:02:29.067
So first things first,
we've got MD framework installed, so

50
00:02:29.067 --> 00:02:30.660
now we just have to reference it.

51
00:02:30.660 --> 00:02:34.416
And the way that we reference that
is to inherit from DBContext.

52
00:02:34.416 --> 00:02:37.406
This is kinda the base requirement
that you need in order to get all of

53
00:02:37.406 --> 00:02:39.672
the goodies that you need
out of entity framework.

54
00:02:39.672 --> 00:02:41.669
So I'm going to do command dot.

55
00:02:41.669 --> 00:02:46.049
I'm gonna use my using statement,
and then I am going to prop, and

56
00:02:46.049 --> 00:02:49.351
then hit Tab to automatically
create a property.

57
00:02:49.351 --> 00:02:50.826
For me, write it all out.

58
00:02:50.826 --> 00:02:56.932
I'm gonna say, DBSet of employee, and
I'm gonna call it the employee's property.

59
00:02:56.932 --> 00:02:59.446
Hit Enter, Tab away.

60
00:02:59.446 --> 00:03:04.795
And if we switch back here,
you see that we've almost got it all.

61
00:03:04.795 --> 00:03:07.910
Last thing that we're gonna
need is just a constructor.

62
00:03:07.910 --> 00:03:13.254
So I'm gonna copy and paste that in, and
we'll talk about this here in a second.

63
00:03:13.254 --> 00:03:18.276
But essentially, this is
the options class that we send into

64
00:03:18.276 --> 00:03:23.701
the base method for DBContext in
order to actually configure it.

65
00:03:23.701 --> 00:03:26.778
This is where we set it up
to actually use SQLite.

66
00:03:26.778 --> 00:03:29.703
We'll get to that in a second.

67
00:03:29.703 --> 00:03:32.803
So, inherits from DBContext,
as we already mentioned.

68
00:03:32.803 --> 00:03:35.585
It has the constructor that
takes in a DBContext options,

69
00:03:35.585 --> 00:03:39.413
which we'll use to configure it to use
SQLite, but we were not gonna do it here.

70
00:03:39.413 --> 00:03:41.729
We'll do it in another
part of the application.

71
00:03:41.729 --> 00:03:44.180
And it has a DBSet employee property.

72
00:03:44.180 --> 00:03:48.314
That is, the collection of employee
entities that are mapped to the employee's

73
00:03:48.314 --> 00:03:50.883
table in the database that
we are going to create.

74
00:03:50.883 --> 00:03:53.189
So pretty good so far.

75
00:03:53.189 --> 00:03:57.386
So let's set up our DBContext in
our dependency ejection pipeline.

76
00:03:57.386 --> 00:04:05.567
So we're gonna go to our
builder.services.AddDBContext.

77
00:04:05.567 --> 00:04:08.801
We're gonna give it a generic type because
it is a method that takes in a generic

78
00:04:08.801 --> 00:04:11.408
type, and it wants the type of
the context that we're adding.

79
00:04:11.408 --> 00:04:15.328
So we're gonna say, AppDBContext.

80
00:04:15.328 --> 00:04:18.385
We're gonna sit here, and then we're
gonna see that this is a method.

81
00:04:18.385 --> 00:04:22.851
We could just do that, but we're not
really giving it enough useful information

82
00:04:22.851 --> 00:04:26.151
in order to know that you're
targeting a SQLite database.

83
00:04:26.151 --> 00:04:28.165
So let's go ahead and configure that.

84
00:04:28.165 --> 00:04:29.855
So we're gonna give it a lambda.

85
00:04:29.855 --> 00:04:34.255
Somebody yesterday asked about callbacks,
like they have in JavaScript, or

86
00:04:34.255 --> 00:04:37.599
passing functions to other
functions in order to use them.

87
00:04:37.599 --> 00:04:41.077
Happens all the time, and
this is another example of it.

88
00:04:41.077 --> 00:04:46.007
So options goes into, and
then we will say, because we've

89
00:04:46.007 --> 00:04:51.541
installed our SQLite package,
we'll say options.UseSqlite.

90
00:04:51.541 --> 00:04:55.145
And then we're just gonna give it the
connection string, which, in this case,

91
00:04:55.145 --> 00:04:56.903
is just gonna be the name of a database.

92
00:04:56.903 --> 00:05:00.613
And we're just gonna use employees.db.

93
00:05:00.613 --> 00:05:05.930
And that's gonna create a file for
us here in a second with our database.

94
00:05:05.930 --> 00:05:08.884
Okay, so good so far.

95
00:05:08.884 --> 00:05:15.189
All right, so next part of the project is
that now we've defined our data context,

96
00:05:15.189 --> 00:05:19.333
our DBContext,
we've defined where we want it to go,

97
00:05:19.333 --> 00:05:23.678
which we want it to go to SQLite,
and use employees.db.

98
00:05:23.678 --> 00:05:27.781
But now we actually have to instruct and
create the tables for

99
00:05:27.781 --> 00:05:31.573
us cuz the Entity Framework
isn't gonna do that for us.

100
00:05:31.573 --> 00:05:35.846
So we have to create what's called
a migration, and here's how you do it.

101
00:05:35.846 --> 00:05:40.153
First, we're gonna add
the Microsoft Entity Framework Core tools,

102
00:05:40.153 --> 00:05:44.388
which will give us some additional
add-ins inside of our .NET CLI.

103
00:05:44.388 --> 00:05:47.148
We'll go ahead and
get the .NET EF CLI tools, and

104
00:05:47.148 --> 00:05:49.269
we're gonna install them globally.

105
00:05:49.269 --> 00:05:51.224
So I'm gonna go back to my command line.

106
00:05:51.224 --> 00:05:57.770
I'm going to clear it up and
then add them here.

107
00:05:57.770 --> 00:06:01.156
All right, so
now we should be able to say, dotnet ef,

108
00:06:01.156 --> 00:06:03.449
and see the unicorn of awesomeness.

109
00:06:03.449 --> 00:06:09.121
And now we're gonna say,
when we go ls and we see TheEmployeeAPI,

110
00:06:09.121 --> 00:06:13.799
we're gonna be able to say
dotnet ef database update.

111
00:06:13.799 --> 00:06:15.815
You're gonna see that it's
actually gonna build the project.

112
00:06:15.815 --> 00:06:19.747
So it's gonna gather that metadata from
the dependency injection pipeline that

113
00:06:19.747 --> 00:06:21.320
we've created in ASP NET Core.

114
00:06:21.320 --> 00:06:25.267
Check this out,
look at all the goodies it did.

115
00:06:25.267 --> 00:06:29.063
It went through, and
it actually created our database.

116
00:06:29.063 --> 00:06:35.624
And you'll see here that we actually have
a database file now called employees.db.

117
00:06:35.624 --> 00:06:36.921
It wasn't there before.

118
00:06:36.921 --> 00:06:41.162
Let's delete it and do it again,
just for fun, if you missed it.

119
00:06:41.162 --> 00:06:44.828
So watch, at the end of this command,
you'll see it appear.

120
00:06:44.828 --> 00:06:46.729
And there it is.

121
00:06:46.729 --> 00:06:50.696
So we've created
a database file in SQLite.

122
00:06:50.696 --> 00:06:53.767
I will point out one thing,
which is that the only thing that

123
00:06:53.767 --> 00:06:57.031
it will create at this point is
an EF migrations history table.

124
00:06:57.031 --> 00:07:00.558
This is where it keeps track
of what migrations have run.

125
00:07:00.558 --> 00:07:02.075
What the heck's a migration?

126
00:07:02.075 --> 00:07:04.771
Let's talk about migrations.

127
00:07:04.771 --> 00:07:09.141
A migration is a file that is used
to alter the database based on

128
00:07:09.141 --> 00:07:13.357
the structure of the DBContext,
as you haven't defined.

129
00:07:13.357 --> 00:07:15.921
So let's go through
a few examples of that.

130
00:07:15.921 --> 00:07:20.932
So let's say,
dotnet ef migrations add init.

131
00:07:20.932 --> 00:07:22.996
We'll go ahead and
add a migration called init.

132
00:07:22.996 --> 00:07:26.569
You will see a folder pop up
over here called migrations.

133
00:07:26.569 --> 00:07:31.447
And you're gonna see that your
initial migration, our init migration,

134
00:07:31.447 --> 00:07:32.634
is created here.

135
00:07:32.634 --> 00:07:38.819
And you're gonna see that because we've
defined our DBSet as employee right here,

136
00:07:38.819 --> 00:07:43.540
that first thing it's gonna do
is create an employee's table.

137
00:07:43.540 --> 00:07:48.612
However, it's also done something else for
us, which is,

138
00:07:48.612 --> 00:07:53.485
it's automatically looked and
saw that on our employee,

139
00:07:53.485 --> 00:07:57.463
right on our employee file here,
right there,

140
00:07:57.463 --> 00:08:02.251
you'll see that it also
detected this list of benefits.

141
00:08:02.251 --> 00:08:04.580
So it automatically knew that, okay,

142
00:08:04.580 --> 00:08:07.755
this is an employee with
a list of employee benefits,

143
00:08:07.755 --> 00:08:12.932
that one-to-many relationship, which is
important and meaningful to databases.

144
00:08:12.932 --> 00:08:16.785
So Entity Framework automatically
went in and detected that and

145
00:08:16.785 --> 00:08:20.991
said, yes, not only are we going
to create employee benefits table,

146
00:08:20.991 --> 00:08:24.514
but we're also going to add
what's called a foreign key.

147
00:08:24.514 --> 00:08:28.802
And it basically says that the employee
ID that's in this employee benefits

148
00:08:28.802 --> 00:08:31.960
table needs to match the employee
ID in the other table.

149
00:08:31.960 --> 00:08:36.248
And it won't allow that record to be
created without a valid employee ID.

150
00:08:36.248 --> 00:08:40.268
So this really gets deep into SQL,
which I can't cover in this course,

151
00:08:40.268 --> 00:08:43.417
that could be an entire,
it's five courses on its own.

152
00:08:43.417 --> 00:08:48.086
But just know that under the hood, what
Entity Framework is doing is it's looking

153
00:08:48.086 --> 00:08:50.862
through your entities and
deciding from there,

154
00:08:50.862 --> 00:08:55.413
what tables need to be created based on
the structure of the entity as it exists?

155
00:08:55.413 --> 00:08:57.295
So, very neat.

156
00:08:57.295 --> 00:09:02.016
One thing I will say about migrations,
I treat them with a lot of respect.

157
00:09:02.016 --> 00:09:06.049
And what I mean by that is that I
will make changes to a data model,

158
00:09:06.049 --> 00:09:10.113
I will look at a migration, and
I will scan that file like a hawk.

159
00:09:10.113 --> 00:09:13.268
And that's because you will occasionally,
and I do,

160
00:09:13.268 --> 00:09:18.136
make a mistake where you've altered a data
structure in a way that you didn't intend

161
00:09:18.136 --> 00:09:20.826
to make some kind of
Entity Framework change.

162
00:09:20.826 --> 00:09:24.175
But Entity Framework has happily said,
well, I think you meant this, and

163
00:09:24.175 --> 00:09:25.675
that gives you the opportunity.

164
00:09:25.675 --> 00:09:30.197
Reviewing the migration really gives you
the opportunity to review for mistakes.

165
00:09:30.197 --> 00:09:34.483
So I highly recommend you always look at
your migration files before you run them.

166
00:09:34.483 --> 00:09:38.985
This one looks pretty standard, and this
is not a production system, of course.

167
00:09:38.985 --> 00:09:43.528
So a couple of other parts of the system.

168
00:09:43.528 --> 00:09:47.460
We have two, a migration that
is created by our tooling.

169
00:09:47.460 --> 00:09:51.658
Automatically, I didn't write a line
of code, all I did was run a command.

170
00:09:51.658 --> 00:09:53.883
It inherits from migration and
it has two methods.

171
00:09:53.883 --> 00:09:56.209
It has an up method and a down method.

172
00:09:56.209 --> 00:09:59.786
Up means upgrade, and
down means downgrade,

173
00:09:59.786 --> 00:10:03.649
in case you need to back out or
undo those changes.

174
00:10:03.649 --> 00:10:08.171
And you can see our down method here
simply drops the tables that are being

175
00:10:08.171 --> 00:10:08.848
created.

176
00:10:08.848 --> 00:10:12.331
So we talked about navigation properties,
which is this, but

177
00:10:12.331 --> 00:10:13.783
I don't think I named it.

178
00:10:13.783 --> 00:10:18.494
So this benefit here is what's
called a navigation property.

179
00:10:18.494 --> 00:10:20.730
And what that means is is that this,

180
00:10:20.730 --> 00:10:25.653
in EF Core parlance, a navigation property
simply means that they can use this

181
00:10:25.653 --> 00:10:28.807
to navigate down to
the employee benefits table.

182
00:10:28.807 --> 00:10:32.095
Correspondingly, you don't have to have
a navigation property be a collection.

183
00:10:32.095 --> 00:10:36.762
A navigation property could also be
the entity of which it's pointing to.

184
00:10:36.762 --> 00:10:41.544
So for instance,
if I add an employee property here,

185
00:10:41.544 --> 00:10:46.877
this nav property can be used
to refer back to the employee.

186
00:10:46.877 --> 00:10:51.862
And we know, based on our data structure,
that an employee

187
00:10:51.862 --> 00:10:56.863
benefit in the database cannot
exist without an employee.

188
00:10:56.863 --> 00:10:58.110
Now, can it in C Sharp?

189
00:10:58.110 --> 00:11:02.357
Of course it can, but
we're modeling our DBContext.

190
00:11:02.357 --> 00:11:06.409
We're modeling the entities in our
DBContext as if they're real database

191
00:11:06.409 --> 00:11:06.928
tables.

192
00:11:06.928 --> 00:11:08.322
But you notice the squiggly lines.

193
00:11:08.322 --> 00:11:10.166
You can't help but see them, right?

194
00:11:10.166 --> 00:11:11.064
Check that out.

195
00:11:11.064 --> 00:11:14.489
So it says, non-nullable property
must contain a non-null value.

196
00:11:14.489 --> 00:11:17.878
Well, you could fix that by
giving a question mark here.

197
00:11:17.878 --> 00:11:20.724
But that doesn't really fix the problem
because that's gonna instruct

198
00:11:20.724 --> 00:11:23.066
Entity Framework Core to say,
this must be nullable.

199
00:11:23.066 --> 00:11:23.998
Is this nullable?

200
00:11:23.998 --> 00:11:27.133
And actually,
you have the ID property is not nullable.

201
00:11:27.133 --> 00:11:28.914
So why is this nullable?

202
00:11:28.914 --> 00:11:31.274
My guess is that I'm not exactly
sure what the behavior would be.

203
00:11:31.274 --> 00:11:33.410
It might actually confuse
it to be framework.

204
00:11:33.410 --> 00:11:39.663
Well, then you could call required here,
and get rid of your compiler error.

205
00:11:39.663 --> 00:11:44.400
It's kind of a little bit weird as well,
because when you're actually constructing

206
00:11:44.400 --> 00:11:48.958
this employee benefits object, you may
not have the full employee object there.

207
00:11:48.958 --> 00:11:50.144
You may just have the employee ID.

208
00:11:50.144 --> 00:11:54.149
So you wanna be able to instantiate
it with just the employee ID,

209
00:11:54.149 --> 00:11:59.359
which DBContext and Entity Framework will
happily try to insert that object as is.

210
00:11:59.359 --> 00:12:04.327
So the best way,
I guess the lesser of all the evils is to

211
00:12:04.327 --> 00:12:08.872
set this equal to null
with an exclamation point.

212
00:12:08.872 --> 00:12:09.890
Now this is really odd.

213
00:12:09.890 --> 00:12:10.968
It's a quirk.

214
00:12:10.968 --> 00:12:13.316
It is an odd quirk and
I can't say that I love it.

215
00:12:13.316 --> 00:12:17.460
But I think of all of
the things that I have to do,

216
00:12:17.460 --> 00:12:20.892
it's the one that I dislike the least.

217
00:12:20.892 --> 00:12:24.695
It's basically saying that I am setting
it to a value, and I am asserting, I,

218
00:12:24.695 --> 00:12:27.652
the developer,
I'm asserting that this thing is not null.

219
00:12:27.652 --> 00:12:31.813
Well, you can see that that is obviously
inherently ridiculous because we

220
00:12:31.813 --> 00:12:35.985
are saying that null is not null, but
it does get rid of the compiler error.

221
00:12:35.985 --> 00:12:39.721
And if you didn't have warnings as errors
is on, it wouldn't even show up at all.

222
00:12:39.721 --> 00:12:43.610
They would just show a squiggly and to
say, hey, this doesn't look right to me.

223
00:12:43.610 --> 00:12:48.210
I prefer warnings as errors when I can,
so I'll just do this to get rid of it.

224
00:12:48.210 --> 00:12:50.595
All right, soapbox over.

225
00:12:50.595 --> 00:12:56.272
Okay, so we added our employee navigation
property to our employee benefits.

226
00:12:56.272 --> 00:12:59.613
So if we're querying this table,
we could then join and

227
00:12:59.613 --> 00:13:02.896
get some properties from this table,
if we wanted to.

228
00:13:02.896 --> 00:13:07.592
And I wanna point out that I didn't make
any technical changes, I didn't make any

229
00:13:07.592 --> 00:13:11.966
technical changes per se in a way
that's significant to Entity Framework.

230
00:13:11.966 --> 00:13:15.827
So I should be able to add a migration
file that just has blankness.

231
00:13:15.827 --> 00:13:17.174
So I'm gonna do that real quick.

232
00:13:17.174 --> 00:13:21.330
I do this a lot in practice because I
do want to assert that I have not made

233
00:13:21.330 --> 00:13:26.190
a change to Entity Framework in a way that
I, as a developer, didn't notice, but

234
00:13:26.190 --> 00:13:28.951
Entity Framework will happily notice for
me.

235
00:13:28.951 --> 00:13:30.860
So I'll do Ctrl+Shift this.

236
00:13:30.860 --> 00:13:37.836
I will create a new migration, so
dotnet ef migrations add meow.

237
00:13:37.836 --> 00:13:41.462
I don't expect this thing to live for
long.

238
00:13:41.462 --> 00:13:47.542
We'll see into the employee API,
and we add our meowgration.

239
00:13:47.542 --> 00:13:51.175
Got it added, we see it here.

240
00:13:51.175 --> 00:13:53.640
We see that it's blank,
which is exactly what we want.

241
00:13:53.640 --> 00:13:56.010
And actually,
Microsoft doesn't even like it.

242
00:13:56.010 --> 00:13:58.896
It says, hey, this violates naming rules.

243
00:13:58.896 --> 00:14:00.693
Well, that's okay,
we're just gonna remove it anyways.

244
00:14:00.693 --> 00:14:04.825
You see this little command,
it says, to undo this action,

245
00:14:04.825 --> 00:14:08.992
use ef migrations remove,
ef migrations remove.

246
00:14:08.992 --> 00:14:13.359
Dotnet ef migrations remove.

247
00:14:13.359 --> 00:14:14.657
Dotnet build to see the error.

248
00:14:14.657 --> 00:14:16.436
It's probably complaining about this.

249
00:14:16.436 --> 00:14:17.966
It's complaining about this.

250
00:14:17.966 --> 00:14:20.704
So this thing that I've
created doesn't even compile.

251
00:14:20.704 --> 00:14:24.242
So I can just capitalize that and
then rerun this.

252
00:14:24.242 --> 00:14:28.550
Or I could straight up, well, it's not
even letting me do that, which is okay.

253
00:14:28.550 --> 00:14:31.865
We're gonna go ahead and just delete this
migration, which is perfectly valid.

254
00:14:31.865 --> 00:14:36.751
I will say that if there are things
in here that this snapshot file

255
00:14:36.751 --> 00:14:38.117
may get updated.

256
00:14:38.117 --> 00:14:42.657
And so you may not want to
just delete it directly.

257
00:14:42.657 --> 00:14:47.401
But if you don't have warnings as errors
on, it probably won't matter anyways.

258
00:14:47.401 --> 00:14:48.984
So we've removed the migration file.

259
00:14:48.984 --> 00:14:50.781
It's all good, it's gone.

260
00:14:50.781 --> 00:14:51.559
And.

261
00:14:53.891 --> 00:14:55.799
&gt;&gt; Spencer Schneidenbach: Everything
should build as expected,

262
00:14:55.799 --> 00:14:56.905
which is what we want.

263
00:14:56.905 --> 00:14:59.273
Very good, okay.

264
00:14:59.273 --> 00:15:01.540
So, what have we done?

265
00:15:01.540 --> 00:15:04.187
We connected, we created a DBContext.

266
00:15:04.187 --> 00:15:08.617
We connected it to SQLite, we connected
it to our ASP.Net Core project.

267
00:15:08.617 --> 00:15:17.154
And we created a migration file to
actually create our database and

268
00:15:17.154 --> 00:15:23.262
add the tables that we
would expect to be there.

269
00:15:23.262 --> 00:15:25.788
We're gonna do one more thing,
two more things.

270
00:15:25.788 --> 00:15:29.486
We're gonna say dotnet ef database update.

271
00:15:29.486 --> 00:15:33.077
And what that's going to do is it's
gonna read our connection string, and

272
00:15:33.077 --> 00:15:35.987
it's going to go ahead and
run all of our active migrations.

273
00:15:35.987 --> 00:15:39.292
So you can see that we have
our Create Table Employee,

274
00:15:39.292 --> 00:15:43.338
Create Table Employee Benefits,
and we have everything there.

275
00:15:43.338 --> 00:15:46.923
So I mentioned early on at the beginning
of the course that you can install this

276
00:15:46.923 --> 00:15:48.094
thing called SQL tools.

277
00:15:48.094 --> 00:15:51.675
And that was the most convenient thing
that I could find that worked with

278
00:15:51.675 --> 00:15:52.755
Visual Studio Code.

279
00:15:52.755 --> 00:15:54.754
So we are going to install it.

280
00:15:54.754 --> 00:15:56.850
I installed the SQLite provider.

281
00:15:56.850 --> 00:16:00.446
So what I'm gonna do is I'm just
gonna call it TheEmployeeAPI.

282
00:16:00.446 --> 00:16:02.175
What I'm gonna do is add a connection.

283
00:16:02.175 --> 00:16:06.999
I really just wanna show you that
those tables there are there inside of

284
00:16:06.999 --> 00:16:07.825
this file.

285
00:16:07.825 --> 00:16:10.292
So I'm gonna hit SELECT FILE.

286
00:16:10.292 --> 00:16:11.291
I'm gonna go here.

287
00:16:11.291 --> 00:16:15.852
I'm gonna double-click and
go on to my employees.db, boom, boom.

288
00:16:15.852 --> 00:16:17.640
I'm gonna say TEST CONNECTION.

289
00:16:17.640 --> 00:16:18.431
Let's see.

290
00:16:18.431 --> 00:16:22.985
I got a, VS Code engine is not supported,
you should enable.

291
00:16:22.985 --> 00:16:27.938
Use node runtime, and then you must
reload VS Code to take effect.

292
00:16:27.938 --> 00:16:30.115
So we'll go ahead and do that.

293
00:16:30.115 --> 00:16:34.689
What's the general rule of thumb when it

294
00:16:34.689 --> 00:16:38.866
comes to deleting migration files?

295
00:16:38.866 --> 00:16:44.288
I know sometimes when you're seeding
data and doing migrations, or might

296
00:16:44.288 --> 00:16:50.326
be a dependency with primary, so I'm just
kinda curious what you might have seen.

297
00:16:50.326 --> 00:16:53.365
I will cover that a little bit more,
that's an excellent question.

298
00:16:53.365 --> 00:16:57.070
And the reason that question is relevant
is because if you're moving from one

299
00:16:57.070 --> 00:17:00.547
database table to another, for
instance, maybe you've expanded it,

300
00:17:00.547 --> 00:17:02.617
or maybe you've changed it all together.

301
00:17:02.617 --> 00:17:06.518
I think you're talking about a migration
where you're literally having to move data

302
00:17:06.518 --> 00:17:08.857
over and
make sure that the system doesn't break.

303
00:17:08.857 --> 00:17:09.835
Am I correct?

304
00:17:09.835 --> 00:17:13.733
Yeah, that has to be handled
on a case by case basis.

305
00:17:13.733 --> 00:17:18.222
We're actually gonna kinda talk about that
a little bit later because our employee

306
00:17:18.222 --> 00:17:21.120
benefits table,
it's gonna get a little upheaval.

307
00:17:21.120 --> 00:17:23.933
But that is an amazing question.

308
00:17:23.933 --> 00:17:28.548
The best answer is, is that it has to
be done on a case by case basis, yeah.

309
00:17:28.548 --> 00:17:31.964
But typically, and
it's gonna require meetings with people,

310
00:17:31.964 --> 00:17:35.199
lots of eyes to make sure that
everybody's on the same page.

311
00:17:35.199 --> 00:17:40.190
Because when you make a database change
in production, it's sometimes difficult,

312
00:17:40.190 --> 00:17:42.907
or sometimes straight
impossible to go back.

313
00:17:42.907 --> 00:17:46.519
And if you cause problems,
then you have to stop and fix them.

314
00:17:46.519 --> 00:17:50.092
Then your Friday nights are ruined,
unless you don't deploy on Friday,

315
00:17:50.092 --> 00:17:51.425
which might be a good rule.

