WEBVTT

1
00:00:00.250 --> 00:00:01.449
&gt;&gt; Spencer Schneidenbach: Test
containers and real databases.

2
00:00:01.449 --> 00:00:05.150
So you may recall that I mentioned that
the EF Core in memory database is not

3
00:00:05.150 --> 00:00:08.501
recommended to be used by anybody,
it doesn't be recommended.

4
00:00:08.501 --> 00:00:09.972
Nobody at Microsoft would recommend it.

5
00:00:09.972 --> 00:00:13.140
No developer who knows
better would recommend it.

6
00:00:13.140 --> 00:00:16.100
It's not useful and
it shouldn't be used at all.

7
00:00:16.100 --> 00:00:18.798
But if you had me in a corner,
I would tell you that I

8
00:00:18.798 --> 00:00:22.884
would prefer you write tests with
that than not write tests at all.

9
00:00:22.884 --> 00:00:27.149
So I think we've demonstrated that
the SQLite in memory database is a perfect

10
00:00:27.149 --> 00:00:31.424
substitute because it actually
is a real database in many ways.

11
00:00:31.424 --> 00:00:34.174
But you're not using SQLite in production.

12
00:00:34.174 --> 00:00:35.843
You're probably not using
it in production at all.

13
00:00:35.843 --> 00:00:40.401
You might be using it for a small app that
might run on a remote server somewhere

14
00:00:40.401 --> 00:00:42.375
that needs to track its own data.

15
00:00:42.375 --> 00:00:47.447
But for a SaaS product or an ASP.NET Core
web app, you're not gonna be using SQLite.

16
00:00:47.447 --> 00:00:51.605
You're probably gonna use something
like SQL Server or MySQL or Postgres.

17
00:00:51.605 --> 00:00:55.389
So wouldn't it be easy if you could have a
test that spins up a real production like

18
00:00:55.389 --> 00:00:58.035
database and tears it down cleanly?

19
00:00:58.035 --> 00:01:01.203
Well, I wanted to introduce you to
something called Testcontainer,

20
00:01:01.203 --> 00:01:04.691
this is something I use a lot, which is
a library that allows you to spin up real

21
00:01:04.691 --> 00:01:07.059
databases in containers for your tests.

22
00:01:07.059 --> 00:01:09.643
So I do want to just
walk through this code.

23
00:01:09.643 --> 00:01:11.929
I'm not gonna walk
through a refactor of it.

24
00:01:11.929 --> 00:01:14.925
This is where we are going to go to file,
and

25
00:01:14.925 --> 00:01:19.423
we're gonna go to open folder,
and we're gonna 4-Z-final, and

26
00:01:19.423 --> 00:01:24.535
we're gonna look at the kind of
the final product of this entire course.

27
00:01:24.535 --> 00:01:26.481
I'm gonna go to solutions explore, and

28
00:01:26.481 --> 00:01:29.076
I just wanna walk you
through a couple of things.

29
00:01:29.076 --> 00:01:31.937
I wanna show you that in our Program.cs,

30
00:01:31.937 --> 00:01:36.125
we are actually creating
a PostgreSql container instance.

31
00:01:36.125 --> 00:01:41.148
So this is using a NuGet package
Testcontainers.PostgreSql.

32
00:01:41.148 --> 00:01:44.422
Should also mention at this point
that because we're using containers,

33
00:01:44.422 --> 00:01:46.976
this does require Docker, and
I have it running up here.

34
00:01:46.976 --> 00:01:49.243
You can see that my Docker
desktop is running.

35
00:01:49.243 --> 00:01:51.473
If I open my dashboard,
I don't see any containers.

36
00:01:52.853 --> 00:01:55.732
You don't have to have a ton of experience
with Docker to use this library.

37
00:01:55.732 --> 00:01:58.827
But Docker is definitely something
that I recommend that you look into,

38
00:01:58.827 --> 00:02:02.278
especially considering you will probably
Probably host some of your ASP.NET Core

39
00:02:02.278 --> 00:02:03.002
apps on Docker.

40
00:02:03.002 --> 00:02:06.901
At some point you're going to see that
I've removed all references to SQLite.

41
00:02:06.901 --> 00:02:12.141
Instead I'm using NPG,
which stands for n, .NET, PostgreSQL.

42
00:02:12.141 --> 00:02:15.158
I've got my query tracking behavior
turned off, which is fine.

43
00:02:16.178 --> 00:02:18.348
I'm going to go to here and

44
00:02:18.348 --> 00:02:25.198
show you the project file to see that
SQLite is truly and entirely gone.

45
00:02:25.198 --> 00:02:29.358
What I basically done is basically
when you start up this app,

46
00:02:29.358 --> 00:02:31.202
it will actually start up.

47
00:02:31.202 --> 00:02:35.020
And just with these two lines of code,
will actually create and

48
00:02:35.020 --> 00:02:37.418
run a Postgres database for you.

49
00:02:37.418 --> 00:02:42.401
And we can see that because down here you
can see that, if we caught it real quick.

50
00:02:44.808 --> 00:02:47.743
&gt;&gt; Spencer Schneidenbach: We
actually are starting a container.

51
00:02:47.743 --> 00:02:49.853
And if we switch back over
to our Docker instance,

52
00:02:49.853 --> 00:02:52.075
we can see that we've got
some containers running.

53
00:02:53.905 --> 00:02:55.169
And it's actually done the migrations.

54
00:02:55.169 --> 00:03:00.869
It's seeded the database and it's actually
running against a real Postgres database.

55
00:03:00.869 --> 00:03:04.693
So if you're using Postgres or using
SQL Server, whichever database you use,

56
00:03:04.693 --> 00:03:09.409
it doesn't really matter, something other
than SQLite for most production apps.

57
00:03:09.409 --> 00:03:13.981
This is a really useful thing and
it's really useful because without it,

58
00:03:13.981 --> 00:03:17.962
you'd have to do a couple of weird
things to deal with some kind of

59
00:03:17.962 --> 00:03:21.592
idiosyncrasies between
different database providers.

60
00:03:21.592 --> 00:03:25.650
Take for instance, these migrations and
migrations are probably the biggest reason

61
00:03:25.650 --> 00:03:28.988
to just use test containers as opposed
to a SQLite in memory database.

62
00:03:30.348 --> 00:03:31.958
So we can create this table here.

63
00:03:31.958 --> 00:03:36.874
You see, you notice that this call to
CreateTable here actually looks a little

64
00:03:36.874 --> 00:03:37.927
bit different.

65
00:03:37.927 --> 00:03:41.197
The fields are a little bit different
if you go back and compare them.

66
00:03:41.197 --> 00:03:43.814
The data types are different.

67
00:03:43.814 --> 00:03:48.733
That's because data types are not
ubiquitous across database systems, right?

68
00:03:48.733 --> 00:03:52.185
You have SQL server that has varchar
nvarchar.

69
00:03:52.185 --> 00:03:55.113
You have Postgres that simply has text.

70
00:03:55.113 --> 00:03:57.444
They are all different, and

71
00:03:57.444 --> 00:04:03.861
you can't apply a set of SQLite
migrations to Postgres or vice versa.

72
00:04:03.861 --> 00:04:08.463
So what I've done is simply just
removed a SQLite entirely and

73
00:04:08.463 --> 00:04:11.393
just added in the Postgres migration.

74
00:04:11.393 --> 00:04:12.880
So I took out all those migrations.

75
00:04:12.880 --> 00:04:17.176
There's a couple of techniques you can use
to do them apart, to tear them apart, but

76
00:04:17.176 --> 00:04:19.067
I don't recommend that you do that.

77
00:04:19.067 --> 00:04:22.534
Simply because it's just when you
have something as easy to use as test

78
00:04:22.534 --> 00:04:26.226
containers, it's usually
just not worth the effort.

79
00:04:26.226 --> 00:04:29.954
You'll also note that our
CustomWebApplicationFactory is a heck

80
00:04:29.954 --> 00:04:32.550
of a lot simpler,
that's really because I'm

81
00:04:32.550 --> 00:04:36.686
spinning up the PostgreSQL
container in our Program.cs file.

82
00:04:36.686 --> 00:04:40.233
In practice, you would probably connect
to a real Postgres database there.

83
00:04:40.233 --> 00:04:41.747
And then inside of your tests,

84
00:04:41.747 --> 00:04:45.078
you would actually use test containers
to actually run your tests.

85
00:04:45.078 --> 00:04:49.218
So I am kinda cheating a little bit and
putting my test container inside

86
00:04:49.218 --> 00:04:53.165
of my Program.cs, but
inevitably it's not going to live there.

87
00:04:53.165 --> 00:04:57.166
It's really only going to live
inside of your test project.

88
00:04:57.166 --> 00:05:00.669
That's where you're gonna have
test containers installed.

89
00:05:00.669 --> 00:05:04.571
So if I run all these tests,
you'll see dotnet test.

90
00:05:09.897 --> 00:05:12.098
&gt;&gt; Spencer Schneidenbach: It takes
a little bit because it takes time to spin

91
00:05:12.098 --> 00:05:15.062
up that docker container,
a few second penalty, not a big deal.

92
00:05:15.062 --> 00:05:17.886
Then you see that all of our tests pass.

93
00:05:17.886 --> 00:05:22.541
We did have to make a couple of tweaks to
the tests in order to get them to pass.

94
00:05:22.541 --> 00:05:24.989
I did find that there was
a couple of subtle bugs,

95
00:05:24.989 --> 00:05:28.875
and I documented there, because I was
using a different database provider,

96
00:05:28.875 --> 00:05:32.196
there was a couple of subtle
different things between the tests.

97
00:05:32.196 --> 00:05:36.490
I actually found a bug in my original
code, I went back and checked it all,

98
00:05:36.490 --> 00:05:40.935
where I was only returning one
record per page, as opposed to 100.

99
00:05:40.935 --> 00:05:42.715
So I went back and fixed that.

100
00:05:42.715 --> 00:05:44.925
Changing to Postgres actually
helped me discover that.

101
00:05:46.395 --> 00:05:48.615
So just a little bit more of
kind of the behind the scenes,

102
00:05:48.615 --> 00:05:50.375
a little bit of the journey.

103
00:05:50.375 --> 00:05:53.112
The point of this that I would say,
use test containers.

104
00:05:53.112 --> 00:05:55.636
It's an awesome abstraction,
great for running tests.

