WEBVTT

1
00:00:00.160 --> 00:00:03.920
In my last course, I touched
a little bit on software patterns.

2
00:00:03.920 --> 00:00:08.479
I tend not to speak in software patterns
very much, because I really want to do but

3
00:00:08.479 --> 00:00:13.170
there are some software patterns that
actually have a fair amount of use.

4
00:00:13.170 --> 00:00:16.430
These are the ones that I use the most,
which is the repository pattern.

5
00:00:16.430 --> 00:00:19.771
Firstly, the factory pattern,
which allows pretty much,

6
00:00:19.771 --> 00:00:24.863
say, one object is used to create other
objects very useful in certain situations.

7
00:00:24.863 --> 00:00:28.763
And then unit of work,
which basically says is the pattern for

8
00:00:28.763 --> 00:00:33.323
taking a bunch of related operations and
executing them in one go.

9
00:00:33.323 --> 00:00:38.253
You can think of a database transaction
in multiple SQL statements,

10
00:00:38.253 --> 00:00:42.368
if you're a SQL user,
as one unit of work, right?

11
00:00:42.368 --> 00:00:46.153
You want to make sure that all of those
requests succeed and you wrap them in

12
00:00:46.153 --> 00:00:50.448
a transaction to say, yes, commit at the
end, I want all those changes to be done.

13
00:00:51.658 --> 00:00:56.672
We're going to take this one, one that we
commonly see in the .NET Core world and

14
00:00:56.672 --> 00:01:01.189
ASP.NET Core, and we're going to
talk about the repository pattern.

15
00:01:01.189 --> 00:01:03.099
That's gonna be the focus of this section.

16
00:01:04.459 --> 00:01:08.019
I don't want you to take away that I don't
think design patterns are important.

17
00:01:08.019 --> 00:01:11.196
They are, in fact, important, and they are
integrated in many of the languages and

18
00:01:11.196 --> 00:01:12.289
frameworks.

19
00:01:12.289 --> 00:01:15.313
But I like to focus on doing,
as I said, and let the complexity of,

20
00:01:15.313 --> 00:01:18.175
I am a firm believer that
the complexity of the architecture and

21
00:01:18.175 --> 00:01:21.901
the complexity of the program will reveal
itself such that you don't have to start

22
00:01:21.901 --> 00:01:23.522
by implementing all these things.

23
00:01:23.522 --> 00:01:25.782
You can start very simple, like we have.

24
00:01:25.782 --> 00:01:28.642
We created a very basic API,
and we're building upon that.

25
00:01:28.642 --> 00:01:33.064
We're building upon that to show off
different parts of ASP.NET Core and

26
00:01:33.064 --> 00:01:35.933
how these apps would be
built in the real world.

27
00:01:35.933 --> 00:01:40.338
In the real world, we see
the repository pattern quite a bit, so

28
00:01:40.338 --> 00:01:42.549
it's important to talk about.

29
00:01:42.549 --> 00:01:46.191
Basically, the repository pattern
is a design pattern to say,

30
00:01:46.191 --> 00:01:48.957
I want to separate
the concerns of data storage,

31
00:01:48.957 --> 00:01:52.569
like database from the access
of that inside of our code.

32
00:01:52.569 --> 00:01:57.166
So it's kind of like you can think of it
as something that an object that sits in

33
00:01:57.166 --> 00:02:01.371
between a real database and
our ASP.NET Core endpoints.

34
00:02:01.371 --> 00:02:05.308
So repository is how we communicate,
how we get to the database and

35
00:02:05.308 --> 00:02:07.461
remove and add objects from it.

36
00:02:07.461 --> 00:02:11.311
So up to this point,
our list has been our repo.

37
00:02:11.311 --> 00:02:13.361
It's been our repository.

38
00:02:13.361 --> 00:02:16.401
And this is not how things
are done in the real world.

39
00:02:17.421 --> 00:02:20.980
First of all, this list of, I mean,
it's very obvious to say, but

40
00:02:20.980 --> 00:02:25.391
when you start it up and
then shut it down, that list is destroyed.

41
00:02:25.391 --> 00:02:26.401
That doesn't stay in memory.

42
00:02:26.401 --> 00:02:29.771
We're going to stay with an in
memory repository for now.

43
00:02:29.771 --> 00:02:33.647
But when we refactor the database,
which we will get to, you'll see,

44
00:02:33.647 --> 00:02:37.021
we'll talk about how that's
done in Entity Framework Core.

45
00:02:37.021 --> 00:02:39.980
We'll show off the repository
pattern in memory for now.

46
00:02:41.200 --> 00:02:45.842
But further, the methods of list don't
really model well the operations that we

47
00:02:45.842 --> 00:02:47.420
actually want to perform.

48
00:02:48.950 --> 00:02:51.590
It's really is just a dumb collection,
right?

49
00:02:51.590 --> 00:02:56.467
We can add, remove, and it has no safety
and no protection against just adding or

50
00:02:56.467 --> 00:02:58.273
removing objects wantonly.

51
00:02:58.273 --> 00:03:01.876
But we also may wanna test to
use a separate data source,

52
00:03:01.876 --> 00:03:06.246
so we can test the behavior of our
API without relying on a database or

53
00:03:06.246 --> 00:03:10.931
a common way to access data from
different parts of the application.

54
00:03:10.931 --> 00:03:12.571
Because we're not gonna
just have employees.

55
00:03:12.571 --> 00:03:14.321
We're probably gonna have other companies.

56
00:03:14.321 --> 00:03:17.105
The employees are gonna belong
to a specific company, or

57
00:03:17.105 --> 00:03:19.764
that employee is gonna have benefits,
right?

58
00:03:19.764 --> 00:03:23.914
So we wanna create a common pattern for
accessing all of those objects.

59
00:03:23.914 --> 00:03:28.833
So we're gonna introduce this interface,
it's called the IRepository.

60
00:03:28.833 --> 00:03:34.659
And I'm gonna go ahead and add it to,
I'm gonna actually close this folder.

61
00:03:34.659 --> 00:03:39.371
I'm gonna open up the next folder,
which contains

62
00:03:39.371 --> 00:03:44.202
our previous work done and
we're gonna add to this.

63
00:03:44.202 --> 00:03:45.954
So we're going to go here.

64
00:03:45.954 --> 00:03:47.302
We're going go here.

65
00:03:47.302 --> 00:03:52.004
And the first thing I'm gonna do is I
am going to add it to a folder called

66
00:03:52.004 --> 00:03:55.114
abstractions, which is
just a common name for

67
00:03:55.114 --> 00:04:00.407
just something where you would store
some of your of your interfaces, right?

68
00:04:01.477 --> 00:04:03.674
And this is indeed an abstraction, so

69
00:04:03.674 --> 00:04:06.567
we're gonna call it
the IRepository interface.

70
00:04:06.567 --> 00:04:10.287
We're gonna put it there, and
we're just gonna overwrite that.

71
00:04:10.287 --> 00:04:12.167
So let's go through these
methods one at a time.

72
00:04:12.167 --> 00:04:17.157
So they kind of model pretty well how we
would actually get data out of a system.

73
00:04:17.157 --> 00:04:20.857
So we have a GetAll which
returns an IEnumerable of T,

74
00:04:20.857 --> 00:04:24.633
we have a create update and
we also have a delete.

75
00:04:24.633 --> 00:04:29.089
And then we have something that says
GetById, which will return that object as

76
00:04:29.089 --> 00:04:33.493
unknowable because we may not be able
to get that object if it doesn't exist.

77
00:04:33.493 --> 00:04:35.809
If it doesn't exist by that id,
we won't be able to get it.

78
00:04:35.809 --> 00:04:40.677
So we gonna take away our list.

79
00:04:40.677 --> 00:04:44.398
We're gonna go ahead and
delete, deleted, boom.

80
00:04:44.398 --> 00:04:47.227
And we're gonna create
our employee repository.

81
00:04:47.227 --> 00:04:48.960
I'm gonna get all this code in here and

82
00:04:48.960 --> 00:04:51.947
then I'm gonna walk you through
all of the different parts of it.

83
00:04:51.947 --> 00:04:54.277
So we're gonna call this
an employee repository.

84
00:04:57.149 --> 00:04:58.377
&gt;&gt; Spencer Schneidenbach: And
I'm going to paste that in.

85
00:04:59.423 --> 00:05:03.753
Scroll up, the only squiggle is that
we need to import our repository.

86
00:05:03.753 --> 00:05:06.993
So we're gonna hit command period,
and we're gonna see using the employee

87
00:05:06.993 --> 00:05:10.333
API.abstractions, we're
gonna see that we've got it.

88
00:05:10.333 --> 00:05:13.313
Okay now, so
now we've defined our employee repository.

89
00:05:13.313 --> 00:05:16.973
And you'll notice that we've
implemented the interface IRepository.

90
00:05:16.973 --> 00:05:20.302
Gave it the type employee,
because we're operating on employees.

91
00:05:20.302 --> 00:05:25.237
So all of these methods now replace
this T type with the type of the object

92
00:05:25.237 --> 00:05:30.182
that we wanna operate on,
in which case this is employee.

93
00:05:30.182 --> 00:05:32.292
So that's exactly what we want.

94
00:05:32.292 --> 00:05:32.942
Perfect.

95
00:05:34.962 --> 00:05:37.020
&gt;&gt; Spencer Schneidenbach: So we need
to update our endpoints to use this new

96
00:05:37.020 --> 00:05:38.012
repository.

97
00:05:38.012 --> 00:05:40.806
We can do that by, there's a couple
of different ways we could.

98
00:05:40.806 --> 00:05:44.786
Well, the main way that we're going to
do that is by adding in you see that

99
00:05:44.786 --> 00:05:46.316
our employees are gone.

100
00:05:46.316 --> 00:05:50.956
So in this argument, we're going to go
ahead and add our EmployeeRepository.

101
00:05:52.016 --> 00:05:55.626
Boom.
We'll call it repo for now.

102
00:05:55.626 --> 00:06:02.475
And now we can access that
repository from our GET request.

103
00:06:02.475 --> 00:06:08.335
This, the dependency injection system will
attempt to match this up to a service,

104
00:06:08.335 --> 00:06:13.275
and we will go in and we will save
our employees equals repo.GetAll and

105
00:06:13.275 --> 00:06:14.865
then you can see that,

106
00:06:14.865 --> 00:06:20.835
because we're getting our employee objects
that our endpoint stops complaining.

107
00:06:22.265 --> 00:06:25.004
So let's copy all of these.

108
00:06:28.228 --> 00:06:28.728
&gt;&gt; Spencer Schneidenbach: Boom.

109
00:06:32.685 --> 00:06:37.155
Put them in and you can see that we
now have our EmployeeRepository.

110
00:06:37.155 --> 00:06:39.790
And just to make it super clear
where these are coming from.

111
00:06:39.790 --> 00:06:42.349
This is from body.

112
00:06:42.349 --> 00:06:48.320
Put that over there, and then there we go.

113
00:06:48.320 --> 00:06:50.240
And this is from services.

114
00:06:50.240 --> 00:06:54.570
So this is intended to be injected in
from our dependency injection system.

115
00:06:54.570 --> 00:06:57.873
That's the services
that we define up here.

116
00:06:57.873 --> 00:07:00.102
We're going to run our tests.

117
00:07:00.102 --> 00:07:00.992
We're gonna see what happens.

118
00:07:00.992 --> 00:07:03.612
We're gonna see that everything's working,
everybody's happy, right?

119
00:07:05.252 --> 00:07:06.642
Wait a second, what the heck happened?

120
00:07:06.642 --> 00:07:08.672
Why did all our tests fail?

121
00:07:08.672 --> 00:07:10.822
Well, it's part of
the dependency injection system.

122
00:07:10.822 --> 00:07:11.802
It doesn't make assumptions.

123
00:07:11.802 --> 00:07:14.772
It doesn't want to just pull
an object that doesn't exist.

124
00:07:14.772 --> 00:07:18.342
So we actually have to register with
our dependency injection system first.

125
00:07:19.702 --> 00:07:23.934
So, the way that we do that
Is builder.Services.Add.

126
00:07:23.934 --> 00:07:26.491
We will add it as a singleton
in the real world,

127
00:07:26.491 --> 00:07:31.374
when we're working with real databases,
we will not add this as a singleton.

128
00:07:31.374 --> 00:07:33.724
And you'll see why in a bit.

129
00:07:33.724 --> 00:07:36.680
But because this is an in memory list,
we're gonna go ahead and go with it.

130
00:07:39.914 --> 00:07:43.832
&gt;&gt; Spencer Schneidenbach: So, now you're
gonna see that because we've added this

131
00:07:43.832 --> 00:07:48.160
service in EmployeeRepository,
now we can rerun our tests and

132
00:07:48.160 --> 00:07:52.829
we should see that our tests pass and
our behavior hasn't changed.

133
00:07:53.929 --> 00:07:57.344
So just because we told employee that we
need an employee repository doesn't mean

134
00:07:57.344 --> 00:08:00.168
that ASP.NET Core just wants to
make an assumption and give us one.

135
00:08:00.168 --> 00:08:03.487
We need to register it in with
the dependency injection system first.

136
00:08:06.047 --> 00:08:10.804
Another point to make sure that
I point out is that most of

137
00:08:10.804 --> 00:08:15.968
the time when you're using
a repository pattern like this,

138
00:08:15.968 --> 00:08:21.315
you're not just going to use
the concrete type directly.

139
00:08:21.315 --> 00:08:24.525
Oftentimes you're gonna be
using the interface type.

140
00:08:24.525 --> 00:08:25.895
In this case, it's IRepository.

141
00:08:25.895 --> 00:08:28.925
So I'm gonna go ahead and
show you what that looks like here.

142
00:08:28.925 --> 00:08:31.025
So it's very common to,
we're gonna go ahead and

143
00:08:31.025 --> 00:08:33.725
pretty sure it's complaining
about lack of import, perfect.

144
00:08:35.535 --> 00:08:38.976
So because we may want to test
this component separately, or

145
00:08:38.976 --> 00:08:43.023
we may want to provide a different
Implementation inside of our tests,

146
00:08:43.023 --> 00:08:47.693
we typically do not use the concrete type,
which is the EmployeeRepository.

147
00:08:47.693 --> 00:08:50.433
We typically use the interface type.

148
00:08:50.433 --> 00:08:56.194
So we're gonna go ahead and copy that down
here, and we're gonna replace all of our

149
00:08:56.194 --> 00:09:02.056
employee repository to use what we call
the interface type, not the concrete type.

150
00:09:02.056 --> 00:09:04.892
Go ahead and control here .NET test.

151
00:09:06.472 --> 00:09:07.252
Everything's looking good.

152
00:09:07.252 --> 00:09:08.642
It's what we wanted.

153
00:09:10.672 --> 00:09:14.512
You can see that I'm not actually running
this API and actually doing things that

154
00:09:14.512 --> 00:09:19.482
much, and it's because, as long as my
tests are passing, I don't really have to.

155
00:09:19.482 --> 00:09:24.364
But you can see, wait a second,
what the heck's going on?

156
00:09:24.364 --> 00:09:27.004
Where are all my employees?

157
00:09:27.004 --> 00:09:28.974
Well, we did take them out of the repo,
after all.

158
00:09:28.974 --> 00:09:30.994
So we need to add those back in,
which we'll do here shortly.

159
00:09:30.994 --> 00:09:34.774
So that's why we're not
getting back any data.

160
00:09:34.774 --> 00:09:37.144
All of our endpoints have been
updated to user repository.

161
00:09:37.144 --> 00:09:39.601
We took away that stupid list in memory.

162
00:09:39.601 --> 00:09:42.825
And we've abstracted it away into
something that we could actually use to

163
00:09:42.825 --> 00:09:44.441
talk to a real database if we wanted.

164
00:09:44.441 --> 00:09:48.849
And then we added that repository to
the dependency injection system so

165
00:09:48.849 --> 00:09:53.696
that way ASP.NET Core knows where it is
and how to construct it and update it and

166
00:09:53.696 --> 00:09:56.661
see that all of our tests are passing.

167
00:09:56.661 --> 00:09:58.201
So looking pretty good.

168
00:09:59.231 --> 00:10:00.841
Can I answer any questions?

169
00:10:00.841 --> 00:10:06.195
&gt;&gt; Student: Yeah, so,
earlier you were talking about creating

170
00:10:06.195 --> 00:10:11.426
different requests based
on the shape of the data,

171
00:10:11.426 --> 00:10:16.656
so, I'm just curious,
in an instance of a patch,

172
00:10:16.656 --> 00:10:23.548
when would one want to consider
updating requests to use a patch?

173
00:10:23.548 --> 00:10:26.658
&gt;&gt; Spencer Schneidenbach: That's
a great question.

174
00:10:26.658 --> 00:10:31.058
So typically my endpoint's
gonna look a little different.

175
00:10:31.058 --> 00:10:36.176
When I do implement patch requests,
which isn't super often, I'll usually use

176
00:10:36.176 --> 00:10:41.073
something that models a dictionary that
is a string followed by Something like

177
00:10:41.073 --> 00:10:46.209
an object, depending on the complexity
of the entity that I'm trying to update.

178
00:10:46.209 --> 00:10:49.931
So what I could do then is receive that
dictionary and say, this person just wants

179
00:10:49.931 --> 00:10:53.393
to update the first name or just the last
name, or in this case, or address two or

180
00:10:53.393 --> 00:10:56.969
something along those lines and
then update those individual properties.

181
00:10:56.969 --> 00:11:00.520
I don't do that a lot and
I don't see it a lot in practice either.

182
00:11:00.520 --> 00:11:03.976
But it can be done outside
the scope of this course, but

183
00:11:03.976 --> 00:11:08.563
requires a little bit of reflection but
it's definitely possible, and

184
00:11:08.563 --> 00:11:11.744
I have done it before in the past for
certain APIs.

