WEBVTT

1
00:00:00.310 --> 00:00:03.744
&gt;&gt; Spencer Schneidenbach: There are times
when you want to save or set an entity's

2
00:00:03.744 --> 00:00:08.010
properties during save because you
wanna do some kind of auditing.

3
00:00:08.010 --> 00:00:12.560
Maybe you wanna update a field to say,
hey, this record was updated last

4
00:00:12.560 --> 00:00:17.660
at this time or maybe you wanna know
the last person who touched a record.

5
00:00:17.660 --> 00:00:21.574
So Entity Framework Core has a few
things that can help with this.

6
00:00:21.574 --> 00:00:25.735
Let me first kinda demonstrate, and
I do use this pattern quite a bit.

7
00:00:25.735 --> 00:00:29.894
Where I will have a base class, an entity
base class, that's an abstract class,

8
00:00:29.894 --> 00:00:34.374
which means I can instantiate it directly,
it's not stored in the database directly.

9
00:00:34.374 --> 00:00:39.484
And what I can do with it is I can say,
here's all the common properties.

10
00:00:39.484 --> 00:00:43.759
So I'll put a ID on there oftentimes,
or I will have created by or

11
00:00:43.759 --> 00:00:48.683
last modified by, as well as a created
on date and a last modified on date.

12
00:00:48.683 --> 00:00:51.815
And those things, believe it or not,
as you get into programming and

13
00:00:51.815 --> 00:00:55.603
into serious programming, those things
can mean quite a bit to your application.

14
00:00:55.603 --> 00:00:59.444
It can mean something, especially when
you're trying to track problems down.

15
00:00:59.444 --> 00:01:02.413
We're declaring the props as nullable to
make migrating just a little bit easier.

16
00:01:02.413 --> 00:01:06.843
But in practice, if you didn't do this
first, which I highly recommend you do,

17
00:01:06.843 --> 00:01:08.993
it's something that you would, one,

18
00:01:08.993 --> 00:01:12.341
have to set them to as you
wouldn't want them to be nullable.

19
00:01:12.341 --> 00:01:13.971
You'd want them to be
hydrated with a value.

20
00:01:13.971 --> 00:01:18.340
So we're gonna go ahead and
close this solution,

21
00:01:18.340 --> 00:01:23.574
open up the next one
&gt;&gt; Spencer Schneidenbach: Repos are up

22
00:01:23.574 --> 00:01:29.153
over here, and
we're gonna go to auditing properties,

23
00:01:29.153 --> 00:01:32.068
and we are gonna go down here.

24
00:01:33.168 --> 00:01:36.718
We're gonna go to our solution explorer,
a little bit cleaner view,

25
00:01:36.718 --> 00:01:39.198
and we are going to copy
in our auditable entity.

26
00:01:41.048 --> 00:01:44.481
And we are going to just do just for
the sake of demonstration,

27
00:01:44.481 --> 00:01:47.458
we're just gonna apply this
to our Employee object.

28
00:01:48.748 --> 00:01:52.188
We're gonna call it abstract
class AuditableEntity, and

29
00:01:52.188 --> 00:01:54.818
then we are going to
inherit from that class.

30
00:01:56.138 --> 00:01:59.528
We will go ahead and
add a migration.

31
00:01:59.528 --> 00:02:05.898
Dotnet ef migrations add
AddNewAuditPropsToEmployee.

32
00:02:08.388 --> 00:02:11.678
Cd TheEmployeeAPI and
then try to rerun it.

33
00:02:11.678 --> 00:02:12.178
Perfect.

34
00:02:14.648 --> 00:02:16.518
We're gonna take a look at our migration.

35
00:02:16.518 --> 00:02:19.358
We never take migrations for granted.

36
00:02:19.358 --> 00:02:23.008
And we're gonna see CreatedBy,
CreatedOn, last modified, last on.

37
00:02:23.008 --> 00:02:26.273
Those are things that we wanna
have in those in this field.

38
00:02:26.273 --> 00:02:29.990
And then we can do this cool thing
where we override the SaveChanges and

39
00:02:29.990 --> 00:02:31.697
the SaveChangesAsync method.

40
00:02:31.697 --> 00:02:35.281
Worth mentioning, there is a regular
SaveChanges method if, for

41
00:02:35.281 --> 00:02:37.529
some reason you can't use sync, async.

42
00:02:37.529 --> 00:02:39.461
But so that's there for you.

43
00:02:39.461 --> 00:02:43.623
And what we can do is modify our
DbContext such that when we call

44
00:02:43.623 --> 00:02:48.428
SaveChanges, we can actually spin
through our change tracker here and

45
00:02:48.428 --> 00:02:54.251
then update those entities before
they're actually saved to the database.

46
00:02:54.251 --> 00:02:56.361
So this is referred to as interception.

47
00:02:56.361 --> 00:03:01.121
It gives you a huge amount of power
to control how entities are set.

48
00:03:01.121 --> 00:03:04.612
I don't expect that, and
I don't want you to abuse this power, but

49
00:03:04.612 --> 00:03:07.911
in this case, it's actually quite helpful.

50
00:03:07.911 --> 00:03:10.660
So what you can do is you can go through
each of the entities in the change

51
00:03:10.660 --> 00:03:12.471
tracker, you can foreach through them.

52
00:03:12.471 --> 00:03:17.007
And then if entity state is added, you can
set your created by or created on and

53
00:03:17.007 --> 00:03:19.817
created on properties to UTC now.

54
00:03:19.817 --> 00:03:23.826
And then if it's modified instead,
you could say last modified by

55
00:03:23.826 --> 00:03:27.561
the update user and
then last modified on DateTime.UtcNow.

56
00:03:27.561 --> 00:03:32.633
And then to make sure that that
is called every time when you're

57
00:03:32.633 --> 00:03:39.690
calling SaveChangesAsync, you'll
simply override SaveChangesAsync here.

58
00:03:39.690 --> 00:03:42.310
Because it's a virtual method,
which is awesome.

59
00:03:43.760 --> 00:03:47.080
And then you can just update
your auditable fields here.

60
00:03:48.600 --> 00:03:50.850
So that that'll do is every
time that change is made,

61
00:03:50.850 --> 00:03:52.490
now these dates will be applied.

62
00:03:52.490 --> 00:03:56.270
Now this string will be
applied to those fields.

63
00:03:56.270 --> 00:03:58.200
So you can kinda use them to
change things on the fly.

64
00:03:58.200 --> 00:04:00.999
Again, a power that you should use narrowly,

65
00:04:00.999 --> 00:04:05.059
but very useful at times,
especially for situations like this.

66
00:04:07.569 --> 00:04:10.729
So I wanna make sure that
those values are being set.

67
00:04:10.729 --> 00:04:12.706
So I'm gonna look at my tests to do that.

68
00:04:12.706 --> 00:04:17.223
So first thing I'm gonna do is I am going
to refactor to use something that's gonna

69
00:04:17.223 --> 00:04:19.788
look a little strange,
but it is very useful.

70
00:04:19.788 --> 00:04:24.142
And it is used by Microsoft to test
things, and it's called ISystemClock.

71
00:04:24.142 --> 00:04:29.051
And what ISystemClock does is simply
expose out the DateTime.UtcNow field.

72
00:04:29.051 --> 00:04:33.908
This abstraction is useful because then
you can create a fixed moment in time,

73
00:04:33.908 --> 00:04:37.660
as opposed to trying to guess
what the value of that field is,

74
00:04:37.660 --> 00:04:41.501
you can just say these tests
always run in 1/1/2022.

75
00:04:41.501 --> 00:04:45.963
So that way we can guarantee that's what
the the database field is always gonna be.

76
00:04:45.963 --> 00:04:48.796
So we're gonna say
builder.Services.AddSingleton.

77
00:04:48.796 --> 00:04:52.889
And we're gonna say ISystemClock.

78
00:04:52.889 --> 00:04:58.050
We're gonna take the one from
Extensions.Internal.

79
00:04:58.050 --> 00:05:02.517
And then we are going to say SystemClock.

80
00:05:04.440 --> 00:05:07.119
&gt;&gt; Spencer Schneidenbach: That's good.

81
00:05:07.119 --> 00:05:07.919
That's stuff.

82
00:05:07.919 --> 00:05:11.543
And if you look at the definition for
SystemClock, you see it literally only

83
00:05:11.543 --> 00:05:15.839
returns UTC now, off of a type called
DateTimeOffset, which we haven't covered.

84
00:05:15.839 --> 00:05:20.537
It's a datetime that also tracks
the current offset of the time zone that

85
00:05:20.537 --> 00:05:21.633
you're in.

86
00:05:21.633 --> 00:05:23.393
That's really all you need to know.

87
00:05:23.393 --> 00:05:25.213
But we can get the UTC
time from that as well.

88
00:05:26.433 --> 00:05:27.163
So we're gonna do that.

89
00:05:27.163 --> 00:05:31.975
We're gonna actually modify our DbContext

90
00:05:31.975 --> 00:05:36.873
to actually use this ISystemClock.

91
00:05:36.873 --> 00:05:40.375
We're gonna do that here,
make one more change.

92
00:05:40.375 --> 00:05:42.935
We're gonna actually inject
it here into our constructor.

93
00:05:42.935 --> 00:05:47.930
You're gonna see now we have our
ISystemClock, we will go ahead and

94
00:05:47.930 --> 00:05:51.605
import it, which is what we need to do.

95
00:05:51.605 --> 00:05:55.645
And now when we save changes, we're
actually reaching for that system clock.

96
00:05:55.645 --> 00:05:59.126
And again, this is really valuable
only if you're testing this field,

97
00:05:59.126 --> 00:06:01.019
if you feel like this is worth testing.

98
00:06:01.019 --> 00:06:03.269
And we're gonna put it right here.

99
00:06:03.269 --> 00:06:06.179
We're gonna get back in our
CustomWebApplicationFactory.

100
00:06:06.179 --> 00:06:12.579
That's our test runner that will
change all the systems for our tests.

101
00:06:12.579 --> 00:06:15.252
We will scroll down and we will add.

102
00:06:15.252 --> 00:06:21.764
And you can see that we are setting it to
our time to 01-01-2022, at zero o'clock.

103
00:06:21.764 --> 00:06:24.234
We're gonna go to our
CustomWebApplicationFactory.

104
00:06:26.064 --> 00:06:28.524
We're going to paste it down here.

105
00:06:28.524 --> 00:06:31.594
We're gonna command + dot to import things.

106
00:06:31.594 --> 00:06:33.301
That's looking pretty good.

107
00:06:33.301 --> 00:06:36.922
And then lastly, we wanna just
make sure that in our update,

108
00:06:36.922 --> 00:06:39.572
employee returns okay result test.

109
00:06:39.572 --> 00:06:42.352
That we set that that system clock

110
00:06:42.352 --> 00:06:46.632
time is exactly what we set
it to in our test system.

111
00:06:48.232 --> 00:06:49.233
So I'm gonna go down here.

112
00:06:49.233 --> 00:06:54.080
I am going to copy that line in.

113
00:06:59.131 --> 00:07:03.369
&gt;&gt; Spencer Schneidenbach: And then I am
going to actually debug this test kinda

114
00:07:03.369 --> 00:07:05.252
just to show.

115
00:07:05.252 --> 00:07:09.289
We're gonna build, so dotnet build.

116
00:07:13.986 --> 00:07:15.436
&gt;&gt; Spencer Schneidenbach: Now
our tests show up.

117
00:07:15.436 --> 00:07:18.206
I'm gonna hit the little bug so
that it debugs.

118
00:07:20.408 --> 00:07:23.655
&gt;&gt; Spencer Schneidenbach: And we're gonna
see that when we hit this break point,

119
00:07:23.655 --> 00:07:26.692
our last modified on should be 1/1/2022,

120
00:07:26.692 --> 00:07:31.298
which it is because we've taken that
time from the ISystemClock interface.

121
00:07:32.358 --> 00:07:36.903
And then we have, of course,
our test system clock where

122
00:07:36.903 --> 00:07:41.175
we've fixed our date and time to 1/1/2022.

123
00:07:41.175 --> 00:07:45.110
So the main point I wanted you to
take from that is really about

124
00:07:45.110 --> 00:07:48.983
the auditable entries and
how you can kinda change things.

125
00:07:48.983 --> 00:07:52.847
But a little bit of a test technique
if you're dealing with time and

126
00:07:52.847 --> 00:07:55.331
you need to go back to
a fixed point in time,

127
00:07:55.331 --> 00:07:58.377
the system clock interface
is very useful for that.

