WEBVTT

1
00:00:00.480 --> 00:00:02.595
&gt;&gt; Burke Holland: The first
time I heard about Docker,

2
00:00:02.595 --> 00:00:06.908
I saw the presentation from I think it
was the one of the founders of Docker.

3
00:00:06.908 --> 00:00:10.964
I think it is the most famous presentation
it talks about the problem of shipping

4
00:00:10.964 --> 00:00:12.064
apps in containers.

5
00:00:12.064 --> 00:00:16.904
And I watched 30 minutes of it, and
thought none of that made any sense to me.

6
00:00:16.904 --> 00:00:21.348
It was not until I actually used
Docker that I understood what it was.

7
00:00:21.348 --> 00:00:26.530
So I wanna give you what's going to
be a rough and possibly bad analogy.

8
00:00:26.530 --> 00:00:29.442
But hopefully,
will help you understand what Docker does.

9
00:00:29.442 --> 00:00:31.650
When you build an application for Windows,

10
00:00:31.650 --> 00:00:35.540
most people are probably are probably
familiar with Windows applications.

11
00:00:35.540 --> 00:00:36.690
They have a file extension.

12
00:00:36.690 --> 00:00:37.623
What is it?

13
00:00:37.623 --> 00:00:38.897
&gt;&gt; Speaker 2: EXE.

14
00:00:38.897 --> 00:00:43.538
&gt;&gt; Burke Holland: EXE, when you build
an EXE, you take your application, and

15
00:00:43.538 --> 00:00:48.005
all the dependencies that your
application needs to run.

16
00:00:48.005 --> 00:00:53.100
And you put them inside of a container,
and that container is called an EXE.

17
00:00:53.100 --> 00:00:57.707
And then I can take that container,
and I can give it to you.

18
00:00:57.707 --> 00:00:59.759
And you can double-click on it,
and it will run on your machine.

19
00:00:59.759 --> 00:01:02.630
Or you can double-click on it,
and it would run on your machine.

20
00:01:04.680 --> 00:01:10.380
But that's not always worked, because
sometimes you need the .NET Framework,

21
00:01:10.380 --> 00:01:12.258
or you need some runtime that's not there.

22
00:01:12.258 --> 00:01:17.072
So what Docker is essentially
is it's an EXE where you can

23
00:01:17.072 --> 00:01:19.390
put runtimes in it as well.

24
00:01:19.390 --> 00:01:23.503
So imagine if I can take any framework
that you need Java, .Net or whatever,

25
00:01:23.503 --> 00:01:24.909
and just put it in the EXE.

26
00:01:24.909 --> 00:01:27.701
And then when you double-clicke on
it whether you had it installed or

27
00:01:27.701 --> 00:01:28.578
not it will just run.

28
00:01:28.578 --> 00:01:31.267
You don't have to worry
about your environment,

29
00:01:31.267 --> 00:01:33.261
everything is contained in the EXE.

30
00:01:33.261 --> 00:01:37.099
You also get access to file systems so
that if you are in the container,

31
00:01:37.099 --> 00:01:39.716
it looks like you are on
server all by yourself.

32
00:01:39.716 --> 00:01:44.496
You're not, but you're in a container,
which thinks that it is.

33
00:01:44.496 --> 00:01:48.790
So if you can imagine that you're writing
applications, putting them in a container,

34
00:01:48.790 --> 00:01:51.762
and it's almost like you're
on a pre-configured server.

35
00:01:51.762 --> 00:01:58.059
And then you're shipping that whole thing
up to wherever it's going to run, okay?

36
00:01:58.059 --> 00:01:59.400
Everybody still with me?

37
00:01:59.400 --> 00:02:02.370
All right, so we want to take
a look at how that works today.

38
00:02:02.370 --> 00:02:05.460
You're gonna need the Docker extension
installed in order to do this.

39
00:02:05.460 --> 00:02:09.458
If I haven't mentioned that yet,
when you install it,

40
00:02:09.458 --> 00:02:14.915
you're going to get this little panel
explorer view over here to the right.

41
00:02:14.915 --> 00:02:18.090
And let me go ahead and
remove some of these containers.

42
00:02:18.090 --> 00:02:19.144
Actually, I'll leave these running.

43
00:02:19.144 --> 00:02:20.060
We're gonna need these later, and

44
00:02:20.060 --> 00:02:22.580
I want to remove them it'll
just take us longer to build.

45
00:02:23.760 --> 00:02:28.210
So we have an application here, I'm
gonna open this up and our start folder.

46
00:02:28.210 --> 00:02:33.510
And the application runs,
it's the one we've been running.

47
00:02:33.510 --> 00:02:36.500
It's a express application here.

48
00:02:36.500 --> 00:02:37.800
It's the one we've been running all along.

49
00:02:37.800 --> 00:02:43.100
And what we wanna do is we wanna Dockerize
this application to ship it somewhere so

50
00:02:43.100 --> 00:02:44.250
it run somewhere else.

51
00:02:44.250 --> 00:02:50.060
Now in other for this application to run,
we have a couple of dependencies.

52
00:02:50.060 --> 00:02:52.900
One of them is Node.

53
00:02:52.900 --> 00:02:56.640
Wherever we shipped it,
Node has to be installed, okay?

54
00:02:56.640 --> 00:02:59.150
It's not gonna run very well without Node.

55
00:02:59.150 --> 00:03:01.600
And so to Dockerize this application,

56
00:03:01.600 --> 00:03:05.350
we need to add configuration
files into it first.

57
00:03:05.350 --> 00:03:08.030
We don't know what those
configuration files are.

58
00:03:08.030 --> 00:03:11.990
Fortunately for you,
Visual Studio Code does.

59
00:03:11.990 --> 00:03:14.930
So what I'm gonna do is open
the command palette, and

60
00:03:14.930 --> 00:03:19.410
I see Docker,
Add Docker Files to Workspace, okay?

61
00:03:20.430 --> 00:03:22.982
When I do that, it's gonna ask me,
which workspace?

62
00:03:22.982 --> 00:03:26.850
And then it wants to know,
what's your application platform?

63
00:03:26.850 --> 00:03:30.000
In other words,
what dependencies do you need?

64
00:03:30.000 --> 00:03:34.330
We're using Node, if we're using Go or
Java, it would pull in a base image for

65
00:03:34.330 --> 00:03:34.950
those.

66
00:03:34.950 --> 00:03:38.839
But since we're using Node,
it's gonna pull in a base image for Node.

67
00:03:38.839 --> 00:03:40.375
I'm gonna select Enter.

68
00:03:40.375 --> 00:03:42.733
What port does your app listen on?

69
00:03:42.733 --> 00:03:45.045
3,000 it's taken a good educated guess.

70
00:03:45.045 --> 00:03:48.890
And now it's created a couple of files for
us.

71
00:03:48.890 --> 00:03:52.524
Specifically, we have a Dockerfile,
a docker-compose,

72
00:03:52.524 --> 00:03:56.080
a docker-compose.debug,
and a dockerignore.

73
00:03:56.080 --> 00:03:59.320
Let's just walk through and
start with the files that we have, and

74
00:03:59.320 --> 00:04:00.610
look at the way that they're built.

75
00:04:02.390 --> 00:04:05.860
If we look at the Dockerfile here,
here's what's happening.

76
00:04:05.860 --> 00:04:08.500
It's pulling in a base image.

77
00:04:08.500 --> 00:04:11.336
In other words, what it's gonna do
is it's gonna go to Docker Hub.

78
00:04:11.336 --> 00:04:16.100
And it's gonna say,
give me an image that contains Node, and

79
00:04:16.100 --> 00:04:18.610
it's gonna download that and
pull that down.

80
00:04:18.610 --> 00:04:21.000
Then it's setting some
environment variables here.

81
00:04:23.340 --> 00:04:25.300
Then it's gonna set a work directory.

82
00:04:25.300 --> 00:04:29.390
This is just the directory in the
container where our apps gonna be located.

83
00:04:29.390 --> 00:04:33.983
Then it copies in our package.json,
runs npm install,

84
00:04:33.983 --> 00:04:39.260
copies in the rest of the whole
project exposes port 3,000.

85
00:04:39.260 --> 00:04:41.359
So we can actually access the application.

86
00:04:41.359 --> 00:04:44.560
And then it runs in npm start,
and actually starts the app.

87
00:04:45.670 --> 00:04:49.500
So this Dockerfile contains everything
we need to containerize this up.

88
00:04:49.500 --> 00:04:51.810
So let's containerize it.

89
00:04:51.810 --> 00:04:59.300
I'm gonna go ahead and
Cmd+Shift+P of command palette, Docker.

90
00:04:59.300 --> 00:05:03.360
And we're gonna do Docker Build, okay?

91
00:05:03.360 --> 00:05:08.300
I'm gonna hit Enter, it's gonna ask us,
which project we wanna build?

92
00:05:08.300 --> 00:05:10.509
Again, we working a workspace
with multiple projects.

93
00:05:11.800 --> 00:05:13.940
And then it wants to know,
what do you wanna call it?

94
00:05:13.940 --> 00:05:21.740
Well, let's give it a name, let's give it
a specific name of frontendmasters-lamp.

95
00:05:21.740 --> 00:05:25.010
And see this latest out here on the end,
this is the tag.

96
00:05:25.010 --> 00:05:28.430
So you can add a version to your image,
and then when you use it or

97
00:05:28.430 --> 00:05:31.970
pull it from somewhere else you can
say give me that version of the image.

98
00:05:31.970 --> 00:05:33.840
A lot of times you'll see a latest tag.

99
00:05:33.840 --> 00:05:38.380
And what that means is,
this is the latest version of the image.

100
00:05:38.380 --> 00:05:41.640
And so if you were deploying it somewhere,
and you had automatic or

101
00:05:41.640 --> 00:05:45.350
continuous integration setup, and
you deployed a new latest image,

102
00:05:45.350 --> 00:05:47.180
that's the one that
would always be running.

103
00:05:48.370 --> 00:05:51.530
So I'm gonna hit Enter, and
now is gonna go ahead, and

104
00:05:51.530 --> 00:05:55.350
it's going to build this
container which you just did.

105
00:05:55.350 --> 00:05:58.160
Now mine went faster
than yours is gonna go,

106
00:05:58.160 --> 00:06:03.120
because I've already pulled down the bass
note image, and it's cached on my machine.

107
00:06:03.120 --> 00:06:05.360
But you can see it walking
through the steps here.

108
00:06:05.360 --> 00:06:08.615
It's pulling from nodes,
setting the environment variables,

109
00:06:08.615 --> 00:06:09.975
and we're good to go.

110
00:06:09.975 --> 00:06:11.785
And actually, I think in this one, no,

111
00:06:11.785 --> 00:06:14.485
we don't have any more environment
variables than we need.

112
00:06:14.485 --> 00:06:17.525
So now where is our container?

113
00:06:17.525 --> 00:06:19.895
Well, we have an image
rather we built an image.

114
00:06:19.895 --> 00:06:21.465
We have an image at the moment.

115
00:06:21.465 --> 00:06:22.835
Where is it?

116
00:06:22.835 --> 00:06:24.855
But come over to our
Docker extension here.

117
00:06:26.035 --> 00:06:30.060
We have it, here, right there, you see?

118
00:06:31.110 --> 00:06:34.450
And I can expand it and it's right inside.

119
00:06:35.620 --> 00:06:40.350
Now if I was to create a different one,
so let's do this sorry, let's build.

120
00:06:41.560 --> 00:06:44.370
And let's do this, and
let's say instead of latest,

121
00:06:44.370 --> 00:06:47.200
let's say it's 1.1.1,
go ahead and do that.

122
00:06:47.200 --> 00:06:50.830
It's gonna build it again, and now look,
both versions are there, right?

123
00:06:50.830 --> 00:06:53.490
So you see how tags work, okay?

124
00:06:53.490 --> 00:06:56.800
Now, we wanna run this
image as a container.

125
00:06:58.110 --> 00:07:00.308
Make sure I don't have
anything running on this port.

126
00:07:00.308 --> 00:07:04.552
We look good, we run latest.

127
00:07:07.890 --> 00:07:11.140
&gt;&gt; Burke Holland: All right, and come
back over and hopefully, all right, so

128
00:07:11.140 --> 00:07:13.960
now we're running inside of our container,
okay?

129
00:07:16.120 --> 00:07:18.650
But we can't really see what's
going on inside of the container,

130
00:07:18.650 --> 00:07:20.520
it's a bit of a black box.

131
00:07:20.520 --> 00:07:23.789
So what we can do here
is we can say View Logs.

132
00:07:24.890 --> 00:07:27.880
And we can see all the logs that are
coming out of our container, this is our

133
00:07:27.880 --> 00:07:33.090
little server this running, and
if I do refresh you can see all the logs.

134
00:07:33.090 --> 00:07:36.420
Now remember I told you that
containers think that they are the only

135
00:07:36.420 --> 00:07:37.410
things on the operating.

136
00:07:37.410 --> 00:07:39.960
They think that they
are the operating system essentially.

137
00:07:39.960 --> 00:07:44.020
So if we wanted to look inside of
this container we can do that,

138
00:07:44.020 --> 00:07:47.430
we can right-click and
say, Attach a Shell.

139
00:07:47.430 --> 00:07:50.460
And now we have a command
prompt inside of the container.

140
00:07:51.880 --> 00:07:54.510
See how that says user/src/app.

141
00:07:54.510 --> 00:07:59.370
Do you remember in our Dockerfile,
that right there?

142
00:07:59.370 --> 00:08:02.790
Okay, so that's the directory that
we've created where our app is running.

143
00:08:02.790 --> 00:08:08.820
If I do ls, I can see all of the files
that are inside of this Docker container.

144
00:08:08.820 --> 00:08:12.620
It's my project files,
they were copied over, there they are.

145
00:08:12.620 --> 00:08:14.450
Now check this out, watch this.

146
00:08:14.450 --> 00:08:21.000
If I change directories, and I go to
the root, look, what does that look like?

147
00:08:21.000 --> 00:08:22.620
The root of a Linux file system,

148
00:08:22.620 --> 00:08:27.790
it thinks that it's on a server all by
itself and it has the whole server.

149
00:08:27.790 --> 00:08:29.160
How does this work?

150
00:08:29.160 --> 00:08:33.250
I have no idea, this should not work.

151
00:08:33.250 --> 00:08:36.886
This should not be possible, but
it is and it changes everything.

152
00:08:36.886 --> 00:08:40.288
And this is why I'm so excited about
Docker, and why it's so important for

153
00:08:40.288 --> 00:08:41.320
us to go over it today.

