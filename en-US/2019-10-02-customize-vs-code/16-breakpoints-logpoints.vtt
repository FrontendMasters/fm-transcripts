WEBVTT

1
00:00:00.035 --> 00:00:00.880
&gt;&gt; Burke Holland: Let's
talk about debugging.

2
00:00:00.880 --> 00:00:04.988
This is where we really start to
crank this knob on VS code from

3
00:00:04.988 --> 00:00:08.410
text editor towards IDE pretty hard.

4
00:00:08.410 --> 00:00:12.620
And this section is gonna be a little bit

5
00:00:12.620 --> 00:00:17.780
dense in terms of the terminology and
the concepts that we go over.

6
00:00:17.780 --> 00:00:21.836
The hardest part of debugging
any application is just getting

7
00:00:21.836 --> 00:00:25.351
the configuration right for
the application to run.

8
00:00:25.351 --> 00:00:29.364
When we're talking about
JavaScript in VS Code,

9
00:00:29.364 --> 00:00:34.529
there is no configuration required
to debug a JavaScript file.

10
00:00:36.386 --> 00:00:39.400
&gt;&gt; Burke Holland: So
you can add a breakpoint to JavaScript

11
00:00:39.400 --> 00:00:40.910
file like this one.

12
00:00:40.910 --> 00:00:42.709
So let's just put it here.

13
00:00:44.788 --> 00:00:46.852
&gt;&gt; Burke Holland: Actually,
let's put it up here.

14
00:00:46.852 --> 00:00:53.213
And then you can just run this file
directly from VS code by pressing f5,

15
00:00:53.213 --> 00:00:57.195
f5 is what launches
the debugger in VS code.

16
00:00:57.195 --> 00:01:01.535
The other way to launch the debugger is
to click this green button right here.

17
00:01:01.535 --> 00:01:04.160
It's the equivalent of f5 start debugging.

18
00:01:05.370 --> 00:01:07.710
So I'm gonna collapse the sidebar and
press f5.

19
00:01:09.080 --> 00:01:15.580
And by default VS code comes with
the node debugger installed.

20
00:01:15.580 --> 00:01:18.360
You just get that out of the box.

21
00:01:18.360 --> 00:01:21.320
I have included the Chrome debugger for
you,

22
00:01:21.320 --> 00:01:24.520
and when we get to browser debugging,
you're gonna use that.

23
00:01:24.520 --> 00:01:28.060
That's an extension,
it's not part of VS code,

24
00:01:28.060 --> 00:01:29.880
it should be part of
the extension pack though.

25
00:01:31.040 --> 00:01:35.260
There are other debuggers that
come with other extensions.

26
00:01:35.260 --> 00:01:38.810
For instance,
there is a product called NativeScript

27
00:01:38.810 --> 00:01:42.320
that allows you to build mobile apps and
it has a debugger.

28
00:01:42.320 --> 00:01:45.339
And if you install the NativeScript
extension in VS code,

29
00:01:45.339 --> 00:01:47.311
you can write any in the script apps and

30
00:01:47.311 --> 00:01:51.635
you can debug them on your devices because
they've written a debugger for VS code.

31
00:01:51.635 --> 00:01:55.648
So provided what you're working with has a
debugger, you can debug it in VS code, and

32
00:01:55.648 --> 00:01:56.653
that's virtually,

33
00:01:56.653 --> 00:01:59.865
I say everything, but it's most
things you can probably think of.

34
00:01:59.865 --> 00:02:01.763
I don't know if there's a Cobalt debugger.

35
00:02:01.763 --> 00:02:02.489
Maybe there is.

36
00:02:02.489 --> 00:02:04.742
I don't know, anybody here doing Cobalt?

37
00:02:04.742 --> 00:02:05.638
Okay, shocking.

38
00:02:05.638 --> 00:02:10.695
All right, let's go ahead and
choose Node js here and we're going

39
00:02:10.695 --> 00:02:16.306
to let this run and the application is
gonna run, it turned my light blue.

40
00:02:16.306 --> 00:02:20.890
We've returned from the API and I've set
a breakpoint here just by clicking in

41
00:02:20.890 --> 00:02:23.821
the left hand side here,
so standard debugging.

42
00:02:23.821 --> 00:02:27.201
And when we do this,
the debug panel automatically pops up, and

43
00:02:27.201 --> 00:02:28.650
we can see variables here.

44
00:02:28.650 --> 00:02:31.870
We can add watches so
we can watch certain things.

45
00:02:31.870 --> 00:02:36.880
We can inspect the response here and
look at the insights.

46
00:02:36.880 --> 00:02:40.350
We can see the data,
the results and drill on down and

47
00:02:40.350 --> 00:02:46.330
see what's actually coming back from
the API that we've got going here.

48
00:02:47.980 --> 00:02:49.950
We can also see the call stack.

49
00:02:49.950 --> 00:02:53.730
So we come up here,
we can move through the call stack.

50
00:02:53.730 --> 00:02:57.585
Here's all of our watches and
then all of our breakpoints down here, so

51
00:02:57.585 --> 00:03:00.228
we can disable them just
by selecting them here.

52
00:03:00.228 --> 00:03:03.663
And then lastly you can see
what scripts are actually

53
00:03:03.663 --> 00:03:06.331
loaded into the debugger at the moment.

54
00:03:06.331 --> 00:03:10.890
So I'm gonna go ahead and continue
on here, so let's move through this.

55
00:03:10.890 --> 00:03:14.580
So that's just your standard debugging
scenario with a simple JavaScript

56
00:03:14.580 --> 00:03:16.060
application.

57
00:03:16.060 --> 00:03:18.040
Now you can do conditional
breakpoints as well,

58
00:03:18.040 --> 00:03:21.130
just like you can in every other editor.

59
00:03:21.130 --> 00:03:25.719
But VS code also has
something in addition to

60
00:03:25.719 --> 00:03:30.315
breakpoints, that's called logpoints.

61
00:03:30.315 --> 00:03:35.286
In the case of this application,
I've got a loop here and

62
00:03:35.286 --> 00:03:39.338
we might want to know what this item is,
okay?

63
00:03:39.338 --> 00:03:45.989
So the way that we would normally handle
this is we would remove this line,

64
00:03:45.989 --> 00:03:50.624
and we would say, console.log(item), okay?

65
00:03:50.624 --> 00:03:52.290
Now, you can do this.

66
00:03:52.290 --> 00:03:56.310
But it's actually easier once
you get the debugger working.

67
00:03:56.310 --> 00:03:57.570
We can put our comment back here.

68
00:03:59.050 --> 00:04:02.740
It's easier to use logpoints
to do the same thing.

69
00:04:02.740 --> 00:04:04.820
So what I'm gonna do is I'm
gonna right-click here, and

70
00:04:04.820 --> 00:04:06.413
I'm gonna say add a logpoint.

71
00:04:07.748 --> 00:04:14.117
And then logpoints are basically console
log statements that the editor just runs

72
00:04:14.117 --> 00:04:20.309
for you without you having to stop your
project, add a line in and then restart.

73
00:04:20.309 --> 00:04:26.094
And so you can say here, item,
like this and hit Enter.

74
00:04:26.094 --> 00:04:27.360
And you'll have the logpoint.

75
00:04:27.360 --> 00:04:31.250
And if we run this here,
I'm gonna run it, actually,

76
00:04:31.250 --> 00:04:33.799
let's run it in the debugger here.

77
00:04:40.083 --> 00:04:41.559
&gt;&gt; Burke Holland: And
get to our debug console, and

78
00:04:41.559 --> 00:04:44.680
you can see that it's logged
out the item that we put there.

79
00:04:44.680 --> 00:04:49.977
Now you notice that I put
this thing in braces.

80
00:04:49.977 --> 00:04:53.880
That's because if you put text in here,
like if I was to just put item,

81
00:04:53.880 --> 00:04:55.814
what do you think it would log out?

82
00:04:55.814 --> 00:04:57.257
&gt;&gt; Speaker 2: Item.
&gt;&gt; Burke Holland: Item, right.

83
00:04:57.257 --> 00:05:00.000
So it's string interpolation
is what it is.

84
00:05:00.000 --> 00:05:06.506
So we can say,
current item is, like this and

85
00:05:06.506 --> 00:05:11.651
let's go ahead and run this again.

86
00:05:11.651 --> 00:05:14.990
This time from here,
current item is, and it puts it out.

87
00:05:14.990 --> 00:05:17.580
And you can also run
execute methods in here.

88
00:05:17.580 --> 00:05:18.391
So you can do this.

89
00:05:25.924 --> 00:05:26.766
&gt;&gt; Burke Holland: Let's run that.

90
00:05:32.179 --> 00:05:34.370
&gt;&gt; Burke Holland: And
it's stringifying the result.

91
00:05:34.370 --> 00:05:41.590
Now, an interesting thing about logpoints
is that if they fail, it doesn't tell you.

92
00:05:41.590 --> 00:05:46.230
So for instance, in axios,
which is the library

93
00:05:46.230 --> 00:05:49.750
that I'm using to make this HTTP call,
I'm gonna remove this logpoint.

94
00:05:51.580 --> 00:05:53.850
Actually, we can leave it on this line.

95
00:05:53.850 --> 00:05:54.513
In axios,

96
00:05:54.513 --> 00:05:59.620
you cannot stringify the response object
because it has cyclical dependencies.

97
00:05:59.620 --> 00:06:01.980
In other words, it is dependent on itself,

98
00:06:01.980 --> 00:06:05.130
dependent on itself, dependent and
that thing is dependent upon the parent.

99
00:06:05.130 --> 00:06:07.701
And when that happens,
you can't serialize it.

100
00:06:07.701 --> 00:06:12.430
And so if we try to do that,
if we came in here and said,

101
00:06:12.430 --> 00:06:17.794
JSON.stringify and
then we try to stringify the response,

102
00:06:17.794 --> 00:06:24.654
that would throw an error but here's what
happens when we do it in a logpoint.

103
00:06:25.971 --> 00:06:28.640
&gt;&gt; Burke Holland: You see what happened,
nothing.

104
00:06:28.640 --> 00:06:31.840
So if you are ever using a logpoint and
nothing's happening,

105
00:06:31.840 --> 00:06:35.950
it's because whatever you're trying
to do is not a valid statement.

106
00:06:35.950 --> 00:06:37.630
So you need to go back and
try to figure it out.

107
00:06:37.630 --> 00:06:40.580
It took me a long time, I spent a lot
of time working with logpoints and

108
00:06:40.580 --> 00:06:43.290
they wouldn't work and like what is
going on, logpoints aren't working.

109
00:06:43.290 --> 00:06:46.260
No, it's because I'm doing
something that is wrong.

110
00:06:46.260 --> 00:06:49.043
It would be nice if logpoints told you,
hey, there's an error but

111
00:06:49.043 --> 00:06:50.447
apparently it doesn't do that.

112
00:06:50.447 --> 00:06:52.920
So if your logpoint isn't working,
that's why.

113
00:06:52.920 --> 00:06:57.786
You can do other things on your logpoints,
you can evaluate an expression.

114
00:06:57.786 --> 00:07:03.435
So you could say like item,
select item dot or

115
00:07:03.435 --> 00:07:11.475
let's just say results.length
is greater than zero, right?

116
00:07:11.475 --> 00:07:14.500
So this will log whether or
not that's true or false.

117
00:07:14.500 --> 00:07:16.310
And you can also do a hit count, so

118
00:07:16.310 --> 00:07:20.850
what you can say on the hit count is,
break when the hit count condition is met.

119
00:07:20.850 --> 00:07:25.525
So we could say,
I want to know if the response length,

120
00:07:25.525 --> 00:07:28.676
sorry, it's results.length, so

121
00:07:28.676 --> 00:07:33.570
response.data.results.length is
greater than 2.

122
00:07:33.570 --> 00:07:36.060
In other words, if there are more
than two items in the response,

123
00:07:36.060 --> 00:07:38.850
I wanna know about it,
go ahead and log it out.

124
00:07:38.850 --> 00:07:44.120
So you can use expressions and
hit counts along with your logpoints.

125
00:07:44.120 --> 00:07:45.810
So go ahead and remove this logpoint here.

126
00:07:45.810 --> 00:07:50.290
All right, that is the most simple example
of debugging that we possibly have.

