WEBVTT

1
00:00:00.330 --> 00:00:03.427
&gt;&gt; Brian Holt: Everyone at a good
starting point, we're ready go?

2
00:00:03.427 --> 00:00:04.751
Stoked?

3
00:00:04.751 --> 00:00:06.933
[SOUND] All right.

4
00:00:06.933 --> 00:00:11.578
[LAUGH] So here's what I wanna do.

5
00:00:11.578 --> 00:00:13.870
I wanna have some sort of running total,
right?

6
00:00:13.870 --> 00:00:17.065
I wanna actually keep track of
a number of what's been added,

7
00:00:17.065 --> 00:00:18.668
what's subtracted, right?

8
00:00:18.668 --> 00:00:22.178
Because if we come back
over to our calculator.

9
00:00:22.178 --> 00:00:24.284
It's this one, okay?

10
00:00:24.284 --> 00:00:27.076
So if I do like 5 + 5, right?

11
00:00:27.076 --> 00:00:29.522
You have to know what was
in there previously, right?

12
00:00:29.522 --> 00:00:31.470
You have to keep track of
what was in there, right?

13
00:00:31.470 --> 00:00:33.678
Because if I do 5 + 5 that's gonna be 10,
right?

14
00:00:33.678 --> 00:00:36.109
Where's that other 5 being held?

15
00:00:36.109 --> 00:00:39.660
You need to hold it somewhere, right?

16
00:00:39.660 --> 00:00:43.537
And now if I say + 36,
you're gonna do 10 + 36, but

17
00:00:43.537 --> 00:00:46.730
I have to hold that 10 somewhere, right?

18
00:00:46.730 --> 00:00:48.033
So I'm gonna call that my running total.

19
00:00:51.894 --> 00:00:57.291
&gt;&gt; Brian Holt: So
let runningTotal = 0, right?

20
00:00:57.291 --> 00:00:58.820
Cuz you're gonna start off at 0,

21
00:00:58.820 --> 00:01:01.230
you're gonna assume that
the thing starts off at 0.

22
00:01:01.230 --> 00:01:04.840
Now I need to keep track of what
I'm gonna call the buffer, right?

23
00:01:04.840 --> 00:01:09.512
So if I say like 25 or clear 25, right?

24
00:01:09.512 --> 00:01:14.428
The buffer is gonna represent what's
actually on the screen at any given time.

25
00:01:14.428 --> 00:01:20.306
Now, I'm gonna give you a bit of advice
that you're welcome to not follow.

26
00:01:20.306 --> 00:01:23.771
You could query the DOM every single
time that you wanted to know what was

27
00:01:23.771 --> 00:01:25.440
on screen, right?

28
00:01:25.440 --> 00:01:28.150
I find it preferable to keep that
information in JavaScript and

29
00:01:28.150 --> 00:01:31.150
constantly write it to the screen.

30
00:01:31.150 --> 00:01:34.256
So you have to decide what
your source of truth is.

31
00:01:34.256 --> 00:01:37.490
And you'll hear that frequently with
JavaScript developers is where's your

32
00:01:37.490 --> 00:01:38.840
source of truth?

33
00:01:38.840 --> 00:01:41.580
Is the source of truth
what's on the screen?

34
00:01:41.580 --> 00:01:46.950
Or is the screen simply displaying where
the source of truth is coming from, right?

35
00:01:46.950 --> 00:01:50.350
So I'm gonna tell you that I think
you should keep your source of truth

36
00:01:50.350 --> 00:01:52.470
out of the DOM and in JavaScript land.

37
00:01:53.720 --> 00:01:57.280
Because there's a bunch of reasons for
that, but in general,

38
00:01:57.280 --> 00:01:59.910
it's just easier if everything
lives in JavaScript.

39
00:01:59.910 --> 00:02:03.660
And your interface is just
a reflection of your source of truth.

40
00:02:03.660 --> 00:02:06.480
Does that make sense what I'm telling you,
right?

41
00:02:06.480 --> 00:02:11.369
So I could just say, what's here on
the screen and query that out of the DOM.

42
00:02:11.369 --> 00:02:13.150
I could pull it out of the DOM.

43
00:02:13.150 --> 00:02:17.903
To me, it's better to keep
that in JavaScript, okay?

44
00:02:17.903 --> 00:02:22.276
So let buffer, the initial thing that's
going to be on there is 0, right?

45
00:02:22.276 --> 00:02:25.370
It's gonna be string 0.

46
00:02:25.370 --> 00:02:28.420
Because what's actually gonna be on
screen is always going to be a string.

47
00:02:28.420 --> 00:02:28.920
So it's good for

48
00:02:28.920 --> 00:02:34.580
us to keep in mind what is that and
keep that as a string the whole time.

49
00:02:34.580 --> 00:02:36.962
Then we wanna have previous operator.

50
00:02:40.815 --> 00:02:48.010
&gt;&gt; Brian Holt: So
if I click 25 + 35 and click =.

51
00:02:48.010 --> 00:02:49.375
What was I doing before?

52
00:02:49.375 --> 00:02:51.086
What did I click before?

53
00:02:51.086 --> 00:02:52.290
I clicked +, right?

54
00:02:52.290 --> 00:02:56.025
So I have to keep that + somewhere, right?

55
00:02:56.025 --> 00:02:59.660
So you have to hold on to
that bit of state, right?

56
00:02:59.660 --> 00:03:01.120
This is a stateful interface.

57
00:03:01.120 --> 00:03:04.877
When I say stateful interface that means
that it's keeping track of previous

58
00:03:04.877 --> 00:03:08.485
actions despite the fact that it's
not showing me those actions, okay?

59
00:03:08.485 --> 00:03:12.880
And then if I hit equal then I have to
commit or flush out that operation.

60
00:03:15.060 --> 00:03:16.302
Good so far?

61
00:03:16.302 --> 00:03:19.880
Okay, so that's a previous
operator is gonna represent.

62
00:03:19.880 --> 00:03:23.221
It's gonna represent like if
they clicked plus or minus or

63
00:03:23.221 --> 00:03:26.092
divide or multiplication or
anything like that.

64
00:03:28.973 --> 00:03:33.672
&gt;&gt; Brian Holt: Okay, and
then here I'm just gonna grab the screen

65
00:03:33.672 --> 00:03:37.950
const screen = document.getElement by ID.

66
00:03:40.196 --> 00:03:43.263
&gt;&gt; Brian Holt: Or querySelector rather.

67
00:03:43.263 --> 00:03:46.781
querySelector.screen.

68
00:03:49.448 --> 00:03:52.862
&gt;&gt; Brian Holt: And this is where
we are actually be writing out to.

69
00:03:52.862 --> 00:03:56.151
Programming in general is about taking
large problems and breaking them into

70
00:03:56.151 --> 00:03:59.895
smaller problems, and smaller problems and
breaking them into smaller problems until

71
00:03:59.895 --> 00:04:02.746
eventually you get to a point where
it's like okay, I can do that.

72
00:04:02.746 --> 00:04:07.404
[LAUGH] Right, so,

73
00:04:09.512 --> 00:04:12.738
&gt;&gt; Brian Holt: Let's just pick a button or

74
00:04:12.738 --> 00:04:18.080
pick a problem and
start solving it, right?

75
00:04:18.080 --> 00:04:23.803
So let's start with what happens if
a user clicks one of the buttons.

76
00:04:23.803 --> 00:04:25.066
So function,

77
00:04:25.066 --> 00:04:31.803
button click,
&gt;&gt; Brian Holt: I

78
00:04:31.803 --> 00:04:33.680
wanna start with the init.

79
00:04:33.680 --> 00:04:35.230
So I'm gonna write a function called init.

80
00:04:36.360 --> 00:04:39.280
So if I'm writing just raw JavaScript
like we're doing right now,

81
00:04:39.280 --> 00:04:43.010
I tend to have init function where I
know this function gets called once and

82
00:04:43.010 --> 00:04:44.750
it kinda just sets everything up, right?

83
00:04:45.870 --> 00:04:47.878
And then down here I will call init.

84
00:04:50.940 --> 00:04:53.862
&gt;&gt; Brian Holt: There's no reason that
you couldn't just do this all in

85
00:04:53.862 --> 00:04:54.862
the global scope.

86
00:04:54.862 --> 00:04:57.360
You don't have to put it
inside of an init function.

87
00:04:57.360 --> 00:05:00.820
For me, I just like it because I can
scroll down through a bunch of stuff and

88
00:05:00.820 --> 00:05:04.240
say okay, here's my init function,
this is where everything gets set up.

89
00:05:04.240 --> 00:05:06.340
For me, it's just kind of like
future documentation of like,

90
00:05:06.340 --> 00:05:08.150
here's a function that gets run once.

91
00:05:08.150 --> 00:05:10.580
If you need to set event listeners or

92
00:05:10.580 --> 00:05:13.800
do anything like that,
this is the place to do it.

93
00:05:13.800 --> 00:05:16.430
Personal convention, I'm gonna even say
it's common in the JavaScript community.

94
00:05:16.430 --> 00:05:19.059
It's just something that I choose to do.

95
00:05:19.059 --> 00:05:21.860
The other thing I really need to set
up here is I need to set up my event

96
00:05:21.860 --> 00:05:22.370
listener.

97
00:05:22.370 --> 00:05:32.300
So I'm gonna say
document.querySelector.calc buttons.

98
00:05:34.530 --> 00:05:39.116
So this is the data that wraps
all of the calculator buttons.

99
00:05:42.223 --> 00:05:46.471
&gt;&gt; Brian Holt: And then here I'm going
to add an event listener of click,

100
00:05:50.174 --> 00:05:51.591
&gt;&gt; Brian Holt: Function event.

101
00:05:53.871 --> 00:05:56.459
&gt;&gt; Brian Holt: And then here I'm gonna
create some function up here called

102
00:05:56.459 --> 00:05:58.796
buttonClick that's actually
going to handle that.

103
00:05:58.796 --> 00:06:01.190
I'm not gonna write it in here cuz I
think this is gonna be a little bit

104
00:06:01.190 --> 00:06:02.250
easier to do.

105
00:06:02.250 --> 00:06:06.352
So what I'm gonna do for
that is I'm gonna say buttonClick.

106
00:06:06.352 --> 00:06:12.531
And I'm gonna put event.target.innerText,

107
00:06:15.879 --> 00:06:18.556
&gt;&gt; Brian Holt: So let's do this.

108
00:06:23.423 --> 00:06:28.198
&gt;&gt; Brian Holt: So you can see any
one of these buttons here has a 7,

109
00:06:28.198 --> 00:06:33.210
8, 9, multiplication 4, 5, right?

110
00:06:33.210 --> 00:06:37.475
So by passing in that inner text, this
button click is going to receive whatever

111
00:06:37.475 --> 00:06:42.078
that particular button click had on it, so
it's gonna be some sort of value, right?

112
00:06:42.078 --> 00:06:45.862
It's either gonna be backspace or
7 or 8 or 9 or something like that.

113
00:06:48.103 --> 00:06:50.064
&gt;&gt; Brian Holt: I could just pass
the event in there directly.

114
00:06:50.064 --> 00:06:53.308
But this just keeps the logic a little,
it's gonna be a little bit cleaner

115
00:06:53.308 --> 00:06:56.205
here in buttonClick because I've
already pulled the value out.

116
00:07:00.316 --> 00:07:04.100
&gt;&gt; Speaker 2: Instead of add event
listener, what does event mean?

117
00:07:04.100 --> 00:07:08.420
So on click you're calling a function
that takes in something called event.

118
00:07:08.420 --> 00:07:13.803
And then you call the buttonClick
function with that event, what is that?

119
00:07:13.803 --> 00:07:14.760
What does that mean?

120
00:07:14.760 --> 00:07:17.530
&gt;&gt; Brian Holt: So this event is gonna
be the actual DOM event, right?

121
00:07:17.530 --> 00:07:20.563
Remember we're looking at before
whenever you typed in it,

122
00:07:20.563 --> 00:07:22.531
it will give you back an event, right?

123
00:07:22.531 --> 00:07:24.478
So this is coming directly
from the browser,

124
00:07:24.478 --> 00:07:27.152
the browser hand is like here
is the event that just happened.

125
00:07:27.152 --> 00:07:29.310
&gt;&gt; Speaker 2: And
I thought the event was the click.

126
00:07:30.770 --> 00:07:32.140
&gt;&gt; Brian Holt: That's the event type.

127
00:07:32.140 --> 00:07:34.520
So that's the type of event
that it's listening for, right?

128
00:07:34.520 --> 00:07:38.190
So this is listening for click events.

129
00:07:38.190 --> 00:07:41.060
And then this is the event that
comes back from the browser.

130
00:07:41.060 --> 00:07:43.375
&gt;&gt; Speaker 2: I clicked on this thing?

131
00:07:43.375 --> 00:07:45.532
&gt;&gt; Brian Holt: So
that's what the event.target is, right?

132
00:07:45.532 --> 00:07:46.062
&gt;&gt; Speaker 2: Okay.

133
00:07:46.062 --> 00:07:49.001
&gt;&gt; Brian Holt: So
this event has a bunch of stuff on it.

134
00:07:49.001 --> 00:07:49.914
For the most part usual,

135
00:07:49.914 --> 00:07:52.690
you don't really care about most of
the other stuff that's happening.

136
00:07:52.690 --> 00:07:55.521
But yeah, this comes from the browser.

137
00:07:55.521 --> 00:07:56.212
And there's a ton of stuff on it.

138
00:07:56.212 --> 00:07:59.205
In fact, we can take a look at it here in
just a second what it actually looks like.

139
00:08:01.138 --> 00:08:02.348
&gt;&gt; Speaker 2: I just don't know,

140
00:08:02.348 --> 00:08:06.981
I don't understand what it is if it's
not the click event that we're doing.

141
00:08:10.233 --> 00:08:13.980
&gt;&gt; Brian Holt: So let's just start
from beginning and see if this helps.

142
00:08:13.980 --> 00:08:16.240
So here I'm grabbing the calc buttons,
right?

143
00:08:16.240 --> 00:08:18.010
This is gonna be a div, right?

144
00:08:18.010 --> 00:08:23.530
On the page, if we go over to our
index.html, it's this div, right?

145
00:08:23.530 --> 00:08:24.253
&gt;&gt; Speaker 2: You mean section?

146
00:08:24.253 --> 00:08:26.791
&gt;&gt; Brian Holt: Section, yeah,
relatively the same thing.

147
00:08:26.791 --> 00:08:28.077
Yes, section.

148
00:08:28.077 --> 00:08:31.953
So it grabs the handle on this section,
okay?

149
00:08:31.953 --> 00:08:34.596
And then it adds an event listener and

150
00:08:34.596 --> 00:08:39.637
just says whenever a click event happens,
run this function, okay?

151
00:08:39.637 --> 00:08:42.629
The browser,
whenever it called URL even listener,

152
00:08:42.629 --> 00:08:45.429
here's everything that I
know about this event.

153
00:08:45.429 --> 00:08:48.026
That object is the event object.

154
00:08:48.026 --> 00:08:51.672
&gt;&gt; Speaker 2: Okay, so that might have
things about the position of your cursor

155
00:08:51.672 --> 00:08:54.675
on the screen,
the time that it happened, the date?

156
00:08:54.675 --> 00:08:55.683
&gt;&gt; Brian Holt: A bunch of stuff like that.

157
00:08:55.683 --> 00:08:56.999
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: Yep.

158
00:08:56.999 --> 00:08:57.541
Make sense?

159
00:08:57.541 --> 00:08:58.510
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Brian Holt: Cool.

