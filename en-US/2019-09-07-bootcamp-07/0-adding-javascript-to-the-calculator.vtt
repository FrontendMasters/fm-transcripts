WEBVTT

1
00:00:02.508 --> 00:00:06.159
&gt;&gt; Brian Holt: So this probably looks
familiar to a bunch of you, right?

2
00:00:06.159 --> 00:00:09.209
I think you've built this with Jen,
is that correct?

3
00:00:09.209 --> 00:00:12.919
Okay, now we're gonna make it work.

4
00:00:12.919 --> 00:00:16.438
So if you click on this,
mine actually works here.

5
00:00:16.438 --> 00:00:21.376
So if you click 25 + 30 = 55, right?

6
00:00:21.376 --> 00:00:27.753
Or you can clear it and say, 89,
delete that, divide by 2, = 4.

7
00:00:31.241 --> 00:00:36.390
&gt;&gt; Brian Holt: So there is a bunch of
ways that you can accomplish this, right?

8
00:00:36.390 --> 00:00:40.621
I showed you, we can go bind individual
event listeners on each one of these,

9
00:00:40.621 --> 00:00:43.433
we can go and
do one event listener at the top level.

10
00:00:43.433 --> 00:00:46.124
Many ways to build these kind of things,
and

11
00:00:46.124 --> 00:00:48.977
not one of them is more
correct than the other.

12
00:00:52.050 --> 00:00:56.685
&gt;&gt; Brian Holt: So if you're watching
this and have not done the HTML and CSS,

13
00:00:56.685 --> 00:01:00.174
there's some tips on here
on how to do the CSS.

14
00:01:00.174 --> 00:01:03.324
But if you're using what
you've built previously,

15
00:01:03.324 --> 00:01:05.990
feel free to just use
what you built with Jen.

16
00:01:07.477 --> 00:01:12.399
&gt;&gt; Brian Holt: So here are kind of
some guidelines of how it should work.

17
00:01:12.399 --> 00:01:15.178
It should look mostly like this.

18
00:01:15.178 --> 00:01:17.752
It should function like
a normal calculator.

19
00:01:17.752 --> 00:01:20.611
We're not gonna do anything with decimals.

20
00:01:20.611 --> 00:01:22.415
We're just gonna assume
everything's an integer today.

21
00:01:22.415 --> 00:01:25.455
Don't bother with percentages.

22
00:01:25.455 --> 00:01:28.738
C means clear, so if someone clicks clear,

23
00:01:28.738 --> 00:01:32.037
then they should go back
to a neutral state.

24
00:01:32.037 --> 00:01:35.855
Deleting is kind of an extra credit thing,
so 895 and then you delete one.

25
00:01:39.402 --> 00:01:43.290
&gt;&gt; Brian Holt: And calculators tend
to have some weird logic around what

26
00:01:43.290 --> 00:01:47.668
happens if you hit = multiple times,
I don't care about that.

27
00:01:47.668 --> 00:01:49.478
You can just ignore that part as well.

28
00:01:52.289 --> 00:01:55.896
&gt;&gt; Brian Holt: Okay, there's a bunch
of HTML and CSS tips up there, but

29
00:01:55.896 --> 00:01:58.993
it took me about 80 lines
of code to write this.

30
00:01:58.993 --> 00:02:01.411
We are gonna write this together, and then
I'm gonna give you a different project for

31
00:02:01.411 --> 00:02:01.958
the end of the day.

32
00:02:01.958 --> 00:02:07.403
But if you're writing over 200 or
250 lines for this,

33
00:02:07.403 --> 00:02:13.178
you're probably overthinking it
a little bit, which is fine.

34
00:02:13.178 --> 00:02:16.247
I use console.log everywhere
when I'm writing code.

35
00:02:16.247 --> 00:02:17.845
That's just a persona tick of mine, but

36
00:02:17.845 --> 00:02:19.969
you're welcome to debug in
whatever way you want to.

37
00:02:23.112 --> 00:02:25.391
&gt;&gt; Brian Holt: This is kind of
an important concept in general with

38
00:02:25.391 --> 00:02:28.950
programming, many small functions is
very preferable to one large function.

39
00:02:28.950 --> 00:02:33.220
So with functions, in general, you want
them to do one thing and one thing well.

40
00:02:33.220 --> 00:02:38.073
And if they start doing five or
ten things, you just end up with a mess,

41
00:02:38.073 --> 00:02:38.662
right?

42
00:02:38.662 --> 00:02:42.222
So in general, you should prefer
having many small functions.

43
00:02:42.222 --> 00:02:45.375
I used eight functions
to solve the calculator.

44
00:02:47.486 --> 00:02:49.377
&gt;&gt; Brian Holt: You'll have to
keep track of several variables.

45
00:02:52.279 --> 00:02:54.415
&gt;&gt; Brian Holt: And how you choose
to do event listeners is up to you.

46
00:02:54.415 --> 00:02:56.708
I did one event listener
on the whole thing.

47
00:02:58.395 --> 00:03:00.531
&gt;&gt; Brian Holt: We ran into this
previously with types, but

48
00:03:00.531 --> 00:03:02.099
just to go over it one more time.

49
00:03:02.099 --> 00:03:06.446
If you querying numbers out of the DOM,
they come back as strings, right?

50
00:03:06.446 --> 00:03:10.906
So just to kind of drive that home,
so I have 10 here, right?

51
00:03:10.906 --> 00:03:18.581
And if I say,
console.log(num), right here.

52
00:03:20.679 --> 00:03:23.990
&gt;&gt; Brian Holt: So console.log(num,
type of num), you get 10, a number, right?

53
00:03:23.990 --> 00:03:26.439
Because this number
right here is a number.

54
00:03:26.439 --> 00:03:29.481
And that's what the type of operator
does there, it lets you know what it is.

55
00:03:31.905 --> 00:03:34.739
&gt;&gt; Brian Holt: And then if I say,
div.innerText = num, so

56
00:03:34.739 --> 00:03:38.095
now this is the same num and
I've just assigned it to be

57
00:03:38.095 --> 00:03:41.912
the innerText of this div up here,
which is this div, okay?

58
00:03:41.912 --> 00:03:45.390
And if I just ask for
that number back that I just gave it,

59
00:03:45.390 --> 00:03:47.987
it gives it back to me as a string, right?

60
00:03:47.987 --> 00:03:52.558
So now if I say, div.interText,
type of div.InnerText,

61
00:03:52.558 --> 00:03:58.663
notice this comes back in quotes, because
it's a string and its type is string.

62
00:03:58.663 --> 00:04:00.390
So that's something to be careful of.

63
00:04:00.390 --> 00:04:04.404
If you're trying to add numbers together,
if you add 5 and 5 and get 55,

64
00:04:04.404 --> 00:04:06.682
it's cuz they're both strings, right?

65
00:04:06.682 --> 00:04:08.839
It's 10, right?

66
00:04:08.839 --> 00:04:09.844
We all know that, right?

67
00:04:09.844 --> 00:04:11.044
We math okay?

68
00:04:11.044 --> 00:04:12.531
[LAUGH]
&gt;&gt; Group: [LAUGH]

69
00:04:12.531 --> 00:04:13.220
&gt;&gt; Brian Holt: Okay, we math okay.

70
00:04:15.638 --> 00:04:17.531
&gt;&gt; Brian Holt: You can also use parseInt,

71
00:04:17.531 --> 00:04:21.159
that's another easy way to
get that coerced into a.

