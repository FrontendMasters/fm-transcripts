WEBVTT

1
00:00:00.290 --> 00:00:03.170
&gt;&gt; Brian Holt: Now we have here this
button click and what I want to do,

2
00:00:03.170 --> 00:00:05.710
like I had this thought process that I
want to have a separate function for

3
00:00:05.710 --> 00:00:06.910
handling numbers, right?

4
00:00:06.910 --> 00:00:10.860
Because the way you handle numbers is
the same, right, whether it's five or

5
00:00:10.860 --> 00:00:13.770
seven, the code looks the same for
that, so

6
00:00:13.770 --> 00:00:16.100
I want to separate that
into its own function.

7
00:00:16.100 --> 00:00:19.500
And then each one of these multiplied,
divide, clear, equals,

8
00:00:19.500 --> 00:00:22.100
they're gonna be treated differently
depending on which one we click, right?

9
00:00:22.100 --> 00:00:25.140
Because if I click add I
wanna use the add operator.

10
00:00:25.140 --> 00:00:27.070
So I need to kind of
separate that logic out.

11
00:00:28.900 --> 00:00:33.319
So I wanna have some sort of function

12
00:00:33.319 --> 00:00:38.930
handleSymbol and

13
00:00:38.930 --> 00:00:42.450
then I wanna have a function handleNumber,
right?

14
00:00:43.960 --> 00:00:46.710
That's the way I'm kind of choosing to
break this down into a smaller problem

15
00:00:46.710 --> 00:00:48.570
that's easier to solve.

16
00:00:48.570 --> 00:00:51.976
So here, from button click, I either
want to go to the handleSymbol if it's

17
00:00:51.976 --> 00:00:56.650
a symbol, or I can go, want to go to the
handleNumber, if value is a number, right?

18
00:00:57.710 --> 00:00:59.260
Feeling good?
Do you feel okay about that?

19
00:01:00.950 --> 00:01:02.760
So let me show you an easy way to do that.

20
00:01:02.760 --> 00:01:03.930
There’s a couple ways.

21
00:01:03.930 --> 00:01:10.840
One of them that I’ve already shown
you is you could say if parseInt,

22
00:01:10.840 --> 00:01:12.450
actually this is probably
the easiest way to do it.

23
00:01:16.780 --> 00:01:22.931
So if I try and parseInt a value,
&gt;&gt; Brian Holt: And

24
00:01:22.931 --> 00:01:32.518
then I ask typeof,
&gt;&gt; Brian Holt: So

25
00:01:32.518 --> 00:01:37.270
parseInt is gonna try its hardest to turn
whatever you gave it into a number, right?

26
00:01:37.270 --> 00:01:41.290
So if I give this 5,
it's gonna say cool, this is 5.

27
00:01:41.290 --> 00:01:44.360
And then you're gonna ask
what type of thing is 5?

28
00:01:46.350 --> 00:01:48.630
Well, 5 is a number if you
parse the Int out of it.

29
00:01:48.630 --> 00:01:53.750
So this is going to,
this is a number, right?

30
00:01:55.990 --> 00:01:58.630
If I say, in fact, let's just take
a look at what that looks like.

31
00:02:00.772 --> 00:02:07.710
&gt;&gt; Brian Holt: Trash, and
I say, parseInt of green.

32
00:02:07.710 --> 00:02:09.740
So, something that's
obviously not a number,

33
00:02:09.740 --> 00:02:12.510
it's gonna say, that's not a number.

34
00:02:12.510 --> 00:02:14.010
So that's what this NaN is.

35
00:02:14.010 --> 00:02:15.010
That means, not a number.

36
00:02:16.260 --> 00:02:22.120
But if I say parseInt of 5 like that,
it's gonna come back a 5, right?

37
00:02:22.120 --> 00:02:29.000
If I say type of parseInt,
a 5, I get number.

38
00:02:29.000 --> 00:02:35.200
And if I say type of parseInt of green,
I get, well, that's a number.

39
00:02:35.200 --> 00:02:36.310
That's not what I wanted.

40
00:02:36.310 --> 00:02:41.135
What does that give you back,

41
00:02:41.135 --> 00:02:45.607
parseInt green
&gt;&gt; Brian Holt: That's right.

42
00:02:45.607 --> 00:02:51.023
Okay, new thought is NAN.

43
00:02:52.723 --> 00:02:59.335
&gt;&gt; Brian Holt: Is 5 NAN,
no, is green, NAN, true.

44
00:03:03.442 --> 00:03:07.516
&gt;&gt; Brian Holt: So, is NaN, it's just
a function that's built in the JavaScript

45
00:03:07.516 --> 00:03:10.521
that can tell you if
something is a number or not.

46
00:03:10.521 --> 00:03:12.998
So not this, this is not actually we want.

47
00:03:15.614 --> 00:03:17.213
&gt;&gt; Brian Holt: isNAN.

48
00:03:26.753 --> 00:03:29.815
&gt;&gt; Brian Holt: Okay, and
then this is a number.

49
00:03:29.815 --> 00:03:33.940
So now I can separate these things,

50
00:03:33.940 --> 00:03:37.660
as this is definitely a number.

51
00:03:37.660 --> 00:03:38.780
This is definitely not a number.

52
00:03:38.780 --> 00:03:44.283
So now I can say here,
this is not a number, so I can just say

53
00:03:44.283 --> 00:03:49.270
handleSymbol with value

54
00:03:49.270 --> 00:03:54.870
like that, this is gonna be a symbol and
then here,

55
00:03:54.870 --> 00:03:59.590
I can say handleNumber and
I wanna pass it as a number, right?

56
00:03:59.590 --> 00:04:02.160
Because I wanna operate
on it like it's a number.

57
00:04:05.270 --> 00:04:07.450
Yeah, we'll just handle
the number like that.

58
00:04:07.450 --> 00:04:10.110
So, value.

59
00:04:15.140 --> 00:04:17.600
Okay?
And this is going to be a numberString, so

60
00:04:17.600 --> 00:04:21.805
I'm going to call that a numberString,
just to remind myself in the future like

61
00:04:21.805 --> 00:04:24.281
this is a number but
I still have it as a string.

62
00:04:26.566 --> 00:04:30.810
&gt;&gt; Brian Holt: If the buffer is === 0.

63
00:04:33.305 --> 00:04:35.229
&gt;&gt; Brian Holt: String 0, make sure.

64
00:04:37.811 --> 00:04:40.790
&gt;&gt; Brian Holt: So let's actually
just go take a look what happens.

65
00:04:40.790 --> 00:04:41.340
Refresh here.

66
00:04:43.420 --> 00:04:48.613
If I press 5, what would you expect the
number to become right now, on the screen?

67
00:04:52.165 --> 00:04:53.540
&gt;&gt; Brian Holt: It should become 5, right?

68
00:04:53.540 --> 00:04:56.110
That would make sense,
right, as a calculator.

69
00:04:56.110 --> 00:05:00.409
So if it's === 0,
then we're just going to replace 0 with 5.

70
00:05:01.470 --> 00:05:02.780
Right?

71
00:05:02.780 --> 00:05:03.980
Good.
Does that make sense to you?

72
00:05:05.180 --> 00:05:08.250
If the numbers is, let's just go back
to the one that actually works here.

73
00:05:09.590 --> 00:05:12.620
So if I click 5,
you expect that to become 5.

74
00:05:12.620 --> 00:05:15.320
If I click 5 again,
what do you expect to go there?

75
00:05:15.320 --> 00:05:17.660
55, right?

76
00:05:19.750 --> 00:05:24.640
So I'm not doing real math here,
I'm doing string math, right?

77
00:05:24.640 --> 00:05:26.130
I'm concatenating strings together.

78
00:05:26.130 --> 00:05:29.230
If I click 7,
I expect 7 to go on there, right?

79
00:05:29.230 --> 00:05:31.190
So this is,
we're mushing strings together,

80
00:05:31.190 --> 00:05:32.913
despite the fact that they're numbers.

81
00:05:35.445 --> 00:05:39.873
&gt;&gt; Brian Holt: So here,
I'm gonna say buffer = numberString.

82
00:05:42.258 --> 00:05:47.438
&gt;&gt; Brian Holt: Else buffer = buffer +

83
00:05:47.438 --> 00:05:52.960
numberString, right?

84
00:05:52.960 --> 00:05:55.050
Or you can do the plus equals
like I showed you before.

85
00:05:56.950 --> 00:06:01.529
So buffer = buffer + numberString or
you can say buffer += numberString.

86
00:06:04.675 --> 00:06:09.777
&gt;&gt; Speaker 2: That wouldn't work if I
wanted to write 032 on my calculator,

87
00:06:09.777 --> 00:06:11.924
it would just give me 32.

88
00:06:11.924 --> 00:06:15.801
&gt;&gt; Brian Holt: Correct, that's it for
numbers, that's all you have to do to get

89
00:06:15.801 --> 00:06:19.210
numbers working correctly
which is pretty cool, right?

