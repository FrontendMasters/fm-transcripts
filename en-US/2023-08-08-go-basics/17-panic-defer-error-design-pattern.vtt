WEBVTT

1
00:00:00.310 --> 00:00:01.630
We have the init function.

2
00:00:01.630 --> 00:00:04.680
We already mentioned that,
you can have more than one per package.

3
00:00:04.680 --> 00:00:07.370
It will be executed as soon as possible.

4
00:00:07.370 --> 00:00:10.800
Then we have panic and defer.

5
00:00:10.800 --> 00:00:12.050
Let's see what that is.

6
00:00:12.050 --> 00:00:15.000
Panic sounds interesting, right?

7
00:00:15.000 --> 00:00:19.515
For example, you can panic when you
feel like your age is getting into,

8
00:00:19.515 --> 00:00:22.007
I don't, know, 50, 40, 30.

9
00:00:22.007 --> 00:00:26.557
It depends on where you are, you'll
always have a panic age close to you.

10
00:00:26.557 --> 00:00:31.093
Well, actually, we can say if it's
greater than 140, maybe, yeah,

11
00:00:31.093 --> 00:00:33.831
something's happening, so you can panic.

12
00:00:33.831 --> 00:00:34.892
And what's panic?

13
00:00:34.892 --> 00:00:40.369
Panic, it's actually like an interruption,
you're aborting.

14
00:00:40.369 --> 00:00:42.859
In this case, you are saying,
hey, I cannot continue.

15
00:00:42.859 --> 00:00:45.830
It's like throwing an exception,
if you want.

16
00:00:45.830 --> 00:00:49.930
The only problem is that on the other
side, we don't have try-catch, okay?

17
00:00:49.930 --> 00:00:55.030
So actually panic will,
you can send a message.

18
00:00:55.030 --> 00:00:57.110
You can say, why are you panicked?

19
00:00:57.110 --> 00:00:58.368
Too old to be true.

20
00:00:58.368 --> 00:00:59.386
I don't know.

21
00:00:59.386 --> 00:01:02.576
&gt;&gt; [LAUGH]
&gt;&gt; Your panic,

22
00:01:02.576 --> 00:01:07.184
the panic goes up in the call stack and
it depends,

23
00:01:07.184 --> 00:01:12.231
if no one is doing anything with that,
there are ways to

24
00:01:12.231 --> 00:01:17.317
trap that panic, right,
but it's not a try-catch.

25
00:01:17.317 --> 00:01:22.177
Basically, what will happen is
that it will close your app

26
00:01:22.177 --> 00:01:25.870
with a message saying panic, okay?

27
00:01:25.870 --> 00:01:28.040
And that's how you do panic.

28
00:01:28.040 --> 00:01:31.780
This is how you do error management?

29
00:01:31.780 --> 00:01:37.708
No, no,
this is not how you do error management.

30
00:01:37.708 --> 00:01:40.923
Panic is, I have an invalid state,

31
00:01:40.923 --> 00:01:46.935
I cannot do what you are asking,
but I wasn't expecting an error.

32
00:01:46.935 --> 00:01:48.260
If you're expecting an error,

33
00:01:48.260 --> 00:01:51.752
because it's common you have an error on
that situation, you don't panic, okay?

34
00:01:51.752 --> 00:01:53.864
We will see what do you do?

35
00:01:53.864 --> 00:01:55.735
And then we mentioned defer.

36
00:01:56.835 --> 00:01:58.795
That's another thing that you have here.

37
00:01:58.795 --> 00:01:59.845
What's defer?

38
00:01:59.845 --> 00:02:03.525
Well, in this case we don't have yet
a nice code to use it.

39
00:02:03.525 --> 00:02:05.355
We will use one in a second.

40
00:02:05.355 --> 00:02:10.822
But actually when you call defer,
it's defer on something else.

41
00:02:10.822 --> 00:02:14.017
So you can defer something.

42
00:02:14.017 --> 00:02:16.840
I don't know, you can defer,

43
00:02:16.840 --> 00:02:21.953
call Println("Bye!!"),
something like that.

44
00:02:21.953 --> 00:02:26.513
So if I execute this,
you can see that Bye!!,

45
00:02:26.513 --> 00:02:30.959
it's actually being executed at the end,
and

46
00:02:30.959 --> 00:02:34.493
even if it's the first line of main.

47
00:02:34.493 --> 00:02:39.785
So in this case,
it's going to defer the execution of that

48
00:02:39.785 --> 00:02:44.864
sentence until the end of
the function call is reached.

49
00:02:44.864 --> 00:02:45.886
That's all.

50
00:02:45.886 --> 00:02:47.840
And you can have more than one defer.

51
00:02:47.840 --> 00:02:51.406
They're going to be stacked.

52
00:02:51.406 --> 00:02:55.074
So I'm gonna say, "Good" "Bye".

53
00:02:58.430 --> 00:03:00.333
But it's not what you were expecting,
right?

54
00:03:00.333 --> 00:03:04.305
&gt;&gt; [LAUGH]
&gt;&gt; No way.

55
00:03:04.305 --> 00:03:06.302
It says "Bye", and then "Good".

56
00:03:09.750 --> 00:03:11.236
First thing [SOUND],

57
00:03:11.236 --> 00:03:16.403
you look like that meme that is kind
of making all weird calculations.

58
00:03:21.389 --> 00:03:23.104
Now it's "Bye" "Good".

59
00:03:23.104 --> 00:03:26.805
So actually, it's last in first out,

60
00:03:26.805 --> 00:03:31.220
if you want, first in last out, anyway.

61
00:03:31.220 --> 00:03:32.719
Typically you use this for

62
00:03:32.719 --> 00:03:36.350
a lot of situations where you
will forget to do something.

63
00:03:36.350 --> 00:03:37.980
Example, you open a database.

64
00:03:37.980 --> 00:03:40.510
Typically you need to close the database,
right?

65
00:03:40.510 --> 00:03:44.360
Well, typically you forget
to close the database.

66
00:03:44.360 --> 00:03:47.440
So when you open the database,
immediately, you close it.

67
00:03:47.440 --> 00:03:52.000
But you defer that, so
then you won't forget.

68
00:03:52.000 --> 00:03:56.107
You open, you close in the same line,
but you say, hey, when this ends,

69
00:03:56.107 --> 00:03:57.120
please close it.

70
00:03:57.120 --> 00:03:58.920
And also it works with panics.

71
00:03:59.950 --> 00:04:05.472
If there is a panic, it will execute
your defers before closing the app.

72
00:04:07.995 --> 00:04:12.571
Okay, so if within the function call
there was a panic call that you know that

73
00:04:12.571 --> 00:04:15.946
we won't continue,
it will honor your defers anyway.

74
00:04:15.946 --> 00:04:21.978
It's like a finally in the try-catch,
well, kind of, okay?

75
00:04:21.978 --> 00:04:26.010
So these are curiosities of
function execution, okay,

76
00:04:26.010 --> 00:04:31.136
that might change the standard
function execution that we're used to.

77
00:04:31.136 --> 00:04:33.753
Again, this is not yet
error management, okay?

78
00:04:33.753 --> 00:04:36.010
In fact, now it's time to talk about that.

79
00:04:37.150 --> 00:04:42.070
So let's say we need to read a user from
a database, from a file, doesn't matter.

80
00:04:42.070 --> 00:04:45.284
We receive an ID, and
we need to return a user.

81
00:04:45.284 --> 00:04:50.018
This is the design pattern,
we're not going to return the user,

82
00:04:50.018 --> 00:04:51.835
we are returning a pair.

83
00:04:51.835 --> 00:04:57.757
We're returning two values,
a possible user and

84
00:04:57.757 --> 00:05:01.712
a possible error option, okay?

85
00:05:01.712 --> 00:05:02.907
And what's the idea?

86
00:05:02.907 --> 00:05:04.824
You are going to return the user or nil.

87
00:05:04.824 --> 00:05:07.510
This is kind of pseudo
code as it is right now.

88
00:05:07.510 --> 00:05:12.198
We will see that we will have to
make some small changes on this, but

89
00:05:12.198 --> 00:05:14.980
you understand the idea first, okay?

90
00:05:14.980 --> 00:05:16.600
Again, this is the design pattern.

91
00:05:16.600 --> 00:05:19.460
It's not really part of the language.

92
00:05:19.460 --> 00:05:24.250
But the libraries, the standard libraries
are using these design patterns and

93
00:05:24.250 --> 00:05:27.051
we should follow also
these design patterns.

94
00:05:27.051 --> 00:05:31.406
So if we could get what
we were supposed to get,

95
00:05:31.406 --> 00:05:36.336
we return with the object and
and a nil for the error.

96
00:05:36.336 --> 00:05:40.972
If there was an error, we don't return
the object, so we have a nil, and

97
00:05:40.972 --> 00:05:42.880
then the error description.

98
00:05:45.390 --> 00:05:48.803
For those of you with
experience with Node.js,

99
00:05:48.803 --> 00:05:54.660
we have a similar situation there,
a similar error management on Node.js.

100
00:05:54.660 --> 00:05:56.510
This case, typically, there is a callback.

101
00:05:56.510 --> 00:05:59.280
I'm talking about Node.js
without promises.

102
00:05:59.280 --> 00:06:03.980
There is a callback and that callback
also has two arguments, the error and

103
00:06:03.980 --> 00:06:07.690
the object,
it's similar in some ways, okay?

104
00:06:07.690 --> 00:06:10.810
We will write this right now, okay?

105
00:06:10.810 --> 00:06:12.070
But that's the idea.

106
00:06:12.070 --> 00:06:19.369
That's one use case for returning more
than one value, error management, okay?

107
00:06:19.369 --> 00:06:20.652
Make sense?

108
00:06:20.652 --> 00:06:24.820
Right here, I have an example
of named automatic returns.

109
00:06:24.820 --> 00:06:28.900
We have already seen that in action
with probably the same sample, actually.

110
00:06:28.900 --> 00:06:31.149
So we can move on.

