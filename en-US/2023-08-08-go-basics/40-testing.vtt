WEBVTT

1
00:00:00.530 --> 00:00:03.589
Let's talk a little bit
about testing in Go and

2
00:00:03.589 --> 00:00:07.330
let's make a quick unit
test to see how that works.

3
00:00:07.330 --> 00:00:11.880
So testing, it's in Vanilla Go.

4
00:00:11.880 --> 00:00:14.183
So actually,
it's included in Go by default,

5
00:00:14.183 --> 00:00:16.570
I don't need to use an external framework.

6
00:00:16.570 --> 00:00:20.734
That doesn't mean that they're not
libraries or frameworks if you don't

7
00:00:20.734 --> 00:00:24.250
like the one that comes with Go,
okay, but we do have one in Go.

8
00:00:25.330 --> 00:00:28.647
If you are used to do testing and
unit testing,

9
00:00:28.647 --> 00:00:31.720
you might not like some ideas here, okay?

10
00:00:32.990 --> 00:00:34.150
Just a warning.

11
00:00:36.000 --> 00:00:37.170
What is a test?

12
00:00:37.170 --> 00:00:43.100
A test or a test suite is
a file with the suffix_test.

13
00:00:43.100 --> 00:00:49.680
So any file, _test will be
a test suite that you can run.

14
00:00:50.710 --> 00:00:52.450
Where do you put those files?

15
00:00:52.450 --> 00:00:56.901
Typically, and this is the part
where some people say I like this,

16
00:00:56.901 --> 00:01:00.410
within your code in the same
folder in your package.

17
00:01:02.300 --> 00:01:07.060
You just know that they are tests
because they have the _test.

18
00:01:08.510 --> 00:01:13.778
You define functions in that
file with the prefix Test,

19
00:01:13.778 --> 00:01:20.727
capital T and they have a special
signature, we will see that in a second,

20
00:01:20.727 --> 00:01:27.478
that receives a pointer to a T structure,
a T type, let's say for now.

21
00:01:27.478 --> 00:01:32.535
It's an argument of type T,
okay, the package testing.

22
00:01:32.535 --> 00:01:36.273
Inside the function you call methods of T,
okay,

23
00:01:36.273 --> 00:01:42.156
of that T argument that you receive and
you can create sub tests as goroutines.

24
00:01:42.156 --> 00:01:48.504
So one test can open a lot of sub
tests in different goroutines, okay?

25
00:01:48.504 --> 00:01:50.888
It sounds weird but anyway.

26
00:01:50.888 --> 00:01:54.114
You can use the CLI and type go test and
you will run all your tests.

27
00:01:54.114 --> 00:01:57.769
You don't need to specify
which one from which package,

28
00:01:57.769 --> 00:02:00.130
it will just go over all your files and

29
00:02:00.130 --> 00:02:05.310
find the ones that are following
the rule that I mentioned before.

30
00:02:05.310 --> 00:02:08.675
Also there is a design pattern that
you can check later if you want,

31
00:02:08.675 --> 00:02:10.460
it's called TableDrivenTest.

32
00:02:10.460 --> 00:02:12.617
It's not actually from the Go team, but

33
00:02:12.617 --> 00:02:15.102
it's one that is being
used a couple of times.

34
00:02:15.102 --> 00:02:19.692
So actually with idea,
it's a design same pattern not an API.

35
00:02:19.692 --> 00:02:25.009
The idea is that, we realize that
sometimes most of our unit tests

36
00:02:25.009 --> 00:02:32.175
are just receiving different arguments and
testing the API over different arguments.

37
00:02:32.175 --> 00:02:36.723
So, why don't we create a table
of different arguments?

38
00:02:36.723 --> 00:02:40.872
Let's say pass zero and zero, zero and
minus one, zero and two, zero and three,

39
00:02:40.872 --> 00:02:44.640
and what's the expected result in a table,
in a format.

40
00:02:44.640 --> 00:02:48.640
And then we create a test that
goes over the table, make sense?

41
00:02:48.640 --> 00:02:53.750
Something like that, that's the design
pattern but it's used in the Go ecosystem.

42
00:02:53.750 --> 00:02:57.799
From Go 1.19, we do have super fuzzing,

43
00:02:57.799 --> 00:03:02.606
not sure if that is important fuzzing,
what is that?

44
00:03:02.606 --> 00:03:04.487
Okay, we'll show you what is that.

45
00:03:04.487 --> 00:03:09.399
It's an automatic testing that
manipulates input to find bugs.

46
00:03:10.500 --> 00:03:14.688
So for detecting security exploits and
vulnerabilities,

47
00:03:14.688 --> 00:03:19.790
it can detect for example,
SQL injections, script injections.

48
00:03:19.790 --> 00:03:24.482
So you pass a function or a method and it
will execute that function with different

49
00:03:24.482 --> 00:03:26.970
arguments with values for the arguments.

50
00:03:26.970 --> 00:03:29.560
So it will like random and non-random.

51
00:03:29.560 --> 00:03:34.510
So it will stress your functions
to see if they can find problems,

52
00:03:34.510 --> 00:03:36.850
security problems, or bugs.

53
00:03:38.020 --> 00:03:40.240
Okay, that's pretty simple.

54
00:03:40.240 --> 00:03:45.490
So let's go back to our code and
let's create a test.

55
00:03:45.490 --> 00:03:48.800
It will be a simple test, but
just to understand how that works.

56
00:03:48.800 --> 00:03:50.970
For example, let's test the API.

57
00:03:52.160 --> 00:03:54.516
So I'm going to create
a unit test test one test,

58
00:03:54.516 --> 00:03:56.680
you will get the idea very simple.

59
00:03:56.680 --> 00:04:01.240
So it's a new file going to
create a new folder, no new file.

60
00:04:01.240 --> 00:04:05.715
I can call this CEX,

61
00:04:05.715 --> 00:04:10.750
C-E-X_test.go.

62
00:04:10.750 --> 00:04:12.560
What's the package?

63
00:04:12.560 --> 00:04:15.370
Look at this,
probably you have seen this before.

64
00:04:15.370 --> 00:04:20.242
When you are in a package,
you always receive the hibitation to use

65
00:04:20.242 --> 00:04:25.810
the name of the package or
the name of the package under core test.

66
00:04:25.810 --> 00:04:30.650
And that's the one we are going
to use now, okay, makes sense?

67
00:04:30.650 --> 00:04:35.730
By the way of course,
if you go to the Go.the website,

68
00:04:35.730 --> 00:04:41.150
you can find, lemme see what
that is in the learn section.

69
00:04:41.150 --> 00:04:43.913
I think they have a section for testing,

70
00:04:43.913 --> 00:04:47.826
when you have examples they
used to have one for testing.

71
00:04:49.176 --> 00:04:55.770
So you can see, let's see, this is
the one I'm looking for, see this is one.

72
00:04:55.770 --> 00:04:58.272
So you can see examples in
case you wanna check for

73
00:04:58.272 --> 00:05:02.685
example here they have an example of this,
of a function testing something, right?

74
00:05:02.685 --> 00:05:08.076
So what was the idea we create
functions in this package?

75
00:05:08.076 --> 00:05:13.855
Starting with Test,
you can see here it's suggesting me this,

76
00:05:13.855 --> 00:05:18.894
TestXxx and we are in the x
package with Xxx yeah anyway.

77
00:05:18.894 --> 00:05:25.961
But that's Visual Studio saying that
you should put something there so

78
00:05:25.961 --> 00:05:31.390
if I press enter it will
change the Xxx with something.

79
00:05:31.390 --> 00:05:36.850
So for example we can check calling
the API the API call you just

80
00:05:36.850 --> 00:05:41.995
put the name here and
we receive A pointer to testing.T and

81
00:05:41.995 --> 00:05:47.450
we typically call it lowercase t,
that argument.

82
00:05:47.450 --> 00:05:51.630
And I need to import
the testing framework.

83
00:05:51.630 --> 00:05:55.760
And look at this,
when I have the right signature,

84
00:05:55.760 --> 00:05:59.230
VS code will show me
a nice red play button.

85
00:06:00.800 --> 00:06:05.350
Okay, that one,
that appears in the margin.

86
00:06:05.350 --> 00:06:10.279
So you can actually, and
also you have some actions, debug text,

87
00:06:10.279 --> 00:06:12.830
run test, available here.

88
00:06:12.830 --> 00:06:16.170
So you can run the test, okay,
and it will give you an answer.

89
00:06:16.170 --> 00:06:17.720
Right now, the test is empty, so.

90
00:06:19.030 --> 00:06:22.640
And for example,
maybe I wanna do just one test.

91
00:06:22.640 --> 00:06:27.230
What happens if I call get
rate with an empty currency?

92
00:06:27.230 --> 00:06:29.870
I wanna receive an error,
okay, make sense?

93
00:06:29.870 --> 00:06:32.330
So let's try that.

94
00:06:32.330 --> 00:06:34.930
So first, how do I call my API?

95
00:06:34.930 --> 00:06:40.410
Even if I'm in the same package,
I'm actually not, I'm in the test package.

96
00:06:40.410 --> 00:06:46.730
So by the way, everything that has
_test won't be compiled in the build.

97
00:06:46.730 --> 00:06:50.686
Even if it's in the same folder,
it's still Go code,

98
00:06:50.686 --> 00:06:55.710
the build process will know that,
yeah, it's now for building.

99
00:06:55.710 --> 00:06:59.421
So actually I need to talk
to my API package and

100
00:06:59.421 --> 00:07:04.750
we need to import the API as if
we are in a different package.

101
00:07:04.750 --> 00:07:07.790
So I can call get rate and
pass an empty string and

102
00:07:07.790 --> 00:07:10.820
then I'm gonna receive
the result an error.

103
00:07:10.820 --> 00:07:14.532
I don't care about the result,
I care about the error, and

104
00:07:14.532 --> 00:07:17.510
I actually need to check
if the error is not nil.

105
00:07:18.990 --> 00:07:26.731
Because if it's not nil actually we can
check if it's male let's go with nil,

106
00:07:26.731 --> 00:07:33.784
if it's nil is that the test should fail,
it shouldn't be nil, okay?

107
00:07:33.784 --> 00:07:35.406
Do we have a third here?

108
00:07:35.406 --> 00:07:39.211
Actually no we have a simple way to
define things, we don't assert so

109
00:07:39.211 --> 00:07:42.044
the assertion is something
that you do on your own.

110
00:07:42.044 --> 00:07:47.839
And if you wanna fail, you just call
t.error and there are two T error and

111
00:07:47.839 --> 00:07:53.539
error F and at this point you should
like recognize what that F stands for

112
00:07:53.539 --> 00:07:57.630
is for format in case you
wanna format the message.

113
00:07:59.270 --> 00:08:03.358
For example,
I can say that error was not found,

114
00:08:03.358 --> 00:08:07.990
well, in this case, I don't have a format.

115
00:08:07.990 --> 00:08:11.360
I can just say error, okay, we like that.

116
00:08:11.360 --> 00:08:18.655
So if I run this, it's an error,
so we are not passing the test.

117
00:08:18.655 --> 00:08:22.884
Because we didn't check this and I don't
know what's going on, but maybe I know

118
00:08:22.884 --> 00:08:27.319
what happens with the API when you don't
pass, maybe it's responding something.

119
00:08:27.319 --> 00:08:30.647
Well, it's not working,

120
00:08:30.647 --> 00:08:35.283
so I need to go and change this, okay?

121
00:08:35.283 --> 00:08:38.979
So in this case,
I should add here at the top

122
00:08:38.979 --> 00:08:43.397
something like if the length
of the currency is 0,

123
00:08:43.397 --> 00:08:49.020
actually it should be if it's not 3,
I should just return.

124
00:08:49.020 --> 00:08:54.567
Well nil,
an error that they can create on the fly,

125
00:08:54.567 --> 00:08:59.350
something like three characters minimum.

126
00:09:00.890 --> 00:09:07.816
And you can say it's gonna require and
you can say %-d receive.

127
00:09:07.816 --> 00:09:14.230
You can pass the length of the currency,
oops, as an argument.

128
00:09:14.230 --> 00:09:17.740
So then we say, we are expecting three and
we receive one or

129
00:09:17.740 --> 00:09:20.259
zero characters or something like that.

130
00:09:24.950 --> 00:09:28.730
Okay, do we have a third SQL as now?

131
00:09:30.250 --> 00:09:34.350
Of course, there are frameworks and
libraries for

132
00:09:34.350 --> 00:09:39.890
Go that will help you to make things
faster, but you have the basics.

133
00:09:41.840 --> 00:09:45.126
You throw an error over the T option,

134
00:09:45.126 --> 00:09:49.160
remember we are doing
this over the T object.

135
00:09:49.160 --> 00:09:50.640
What's the T object?

136
00:09:50.640 --> 00:09:53.800
The argument that we receive in that call.

137
00:09:55.280 --> 00:09:59.251
So if I run again, now we are green,
we are passing the test.

138
00:10:02.690 --> 00:10:06.140
Okay, also if you are in
VS Code in this section for

139
00:10:06.140 --> 00:10:08.780
the test, you can run all your tests.

140
00:10:08.780 --> 00:10:12.610
You can see all the tests, tree, run them.

141
00:10:12.610 --> 00:10:15.980
That's kind of new in VS Code,
and it works with Go.

