WEBVTT

1
00:00:00.000 --> 00:00:03.861
So Go was created by Google in 2011, okay?

2
00:00:03.861 --> 00:00:06.550
It's a language created
completely from scratch.

3
00:00:06.550 --> 00:00:13.340
So it's not based on C or Java or
C Sharp, it was created from scratch.

4
00:00:13.340 --> 00:00:18.640
It's open source, and
it's not a Google's product.

5
00:00:18.640 --> 00:00:22.020
So it was created by Google, for Google.

6
00:00:22.020 --> 00:00:25.014
The idea was to create a new language and

7
00:00:25.014 --> 00:00:30.291
to fill a gap that Google was feeling
that the market had at that time.

8
00:00:30.291 --> 00:00:32.145
And it's not that Google's product,

9
00:00:32.145 --> 00:00:35.755
meaning that they don't have like
a marketing team or something like that.

10
00:00:35.755 --> 00:00:40.839
For example, there are other open
source powered by Google languages or

11
00:00:40.839 --> 00:00:45.522
frameworks that are products of Google,
for example, Angular.

12
00:00:45.522 --> 00:00:47.640
Angular is actually a Google's product.

13
00:00:47.640 --> 00:00:51.848
For example, on Google IO, you will
typically get updates on Angular, but

14
00:00:51.848 --> 00:00:53.444
that's not the case for Go.

15
00:00:53.444 --> 00:00:57.095
So Go, It's an open source
project separated from Google.

16
00:00:57.095 --> 00:01:01.038
But of course Google is investing
money in developers and

17
00:01:01.038 --> 00:01:05.160
the open source community to
keep that language evolving.

18
00:01:05.160 --> 00:01:09.158
As well as other companies that
are also doing the same thing, okay?

19
00:01:09.158 --> 00:01:13.626
So it's multipurpose, so
when we were introducing the course,

20
00:01:13.626 --> 00:01:16.722
we were saying, okay, what's Google for?

21
00:01:16.722 --> 00:01:18.100
It's for the back-end.

22
00:01:18.100 --> 00:01:22.520
Well, actually,
it doesn't have any specific purpose.

23
00:01:22.520 --> 00:01:24.770
We can actually use it for many things.

24
00:01:24.770 --> 00:01:28.000
In these sort of things,
it's kind of similar to Python.

25
00:01:28.000 --> 00:01:31.834
When you say, okay,
Python is multi-purpose as well.

26
00:01:31.834 --> 00:01:33.970
JavaScript is more focused, okay?

27
00:01:33.970 --> 00:01:36.516
Originally was front-end,
yeah, you can do back-end.

28
00:01:36.516 --> 00:01:41.956
But you can do other stuff, but it's not
actually prepare for some other stuff.

29
00:01:41.956 --> 00:01:45.560
For example, if you wanna do windows
applications, which I'll skip, can you?

30
00:01:45.560 --> 00:01:46.250
Yes, you can.

31
00:01:46.250 --> 00:01:48.790
There are some notch IS libraries
that will let you do that.

32
00:01:48.790 --> 00:01:52.410
The same for PHP, but
it's like not the idea, okay?

33
00:01:52.410 --> 00:01:55.723
The language was not created for that.

34
00:01:55.723 --> 00:02:01.555
It's multi platform, so the code that we
compile, I'm adding that word right now so

35
00:02:01.555 --> 00:02:06.912
we are compiling the code the code that
we compile is actually multi platform.

36
00:02:06.912 --> 00:02:11.154
So it works on Windows, on Linux, on Unix,

37
00:02:11.154 --> 00:02:15.524
On Mac OS, and
it can include other targets.

38
00:02:15.524 --> 00:02:18.250
I will show you the full list in a second.

39
00:02:19.880 --> 00:02:23.190
It used to have naming issues.

40
00:02:23.190 --> 00:02:28.860
Actually, it's kind of the fourth
language in history with the name Go.

41
00:02:30.130 --> 00:02:33.102
So it's not the first
one with the name Go.

42
00:02:33.102 --> 00:02:34.750
So when Go appeared,

43
00:02:34.750 --> 00:02:39.890
we're talking about more than ten
years ago, we had the problem.

44
00:02:39.890 --> 00:02:44.727
Because, yeah, to be honest, for the three
Go languages that were at the time,

45
00:02:44.727 --> 00:02:46.517
two were kind of deprecated.

46
00:02:46.517 --> 00:02:51.725
One is from the 60s, so
it's kind of the origin of programming,

47
00:02:51.725 --> 00:02:53.680
so it wasn't a big deal.

48
00:02:53.680 --> 00:02:58.080
But there was another one that was
called Go with an exclamation mark.

49
00:02:58.080 --> 00:03:03.030
It was a niche anyway, but
it wasn't still there, okay?

50
00:03:03.030 --> 00:03:06.367
But yeah, it's Google anyway and
they say, well, yeah, we're Google,

51
00:03:06.367 --> 00:03:08.230
we are going to name that Google.

52
00:03:08.230 --> 00:03:11.400
We're going to name this Go,
and they did that.

53
00:03:11.400 --> 00:03:16.564
Yeah, the creator of the other
Go complained about the name but

54
00:03:16.564 --> 00:03:18.421
anyway, we are here.

55
00:03:18.421 --> 00:03:24.529
Gut there is something important in
the Go community or the Go ecosystem,

56
00:03:24.529 --> 00:03:29.680
and that's that last thing you
have there it says Golang.

57
00:03:29.680 --> 00:03:33.760
Not sure if you have heard about Golang,
so what's Golang?

58
00:03:33.760 --> 00:03:38.813
Actually because there was another
language with the name Go,

59
00:03:38.813 --> 00:03:42.624
when Go started to get
into the devs community,

60
00:03:42.624 --> 00:03:47.981
we had a problem when, for example,
we were searching on the web.

61
00:03:47.981 --> 00:03:52.682
So if you were searching how to debug Go,

62
00:03:52.682 --> 00:03:56.427
how to parse JSON or XML with Go.

63
00:03:56.427 --> 00:04:02.427
Most of the references available at Google
were actually from the other Go languages,

64
00:04:02.427 --> 00:04:04.823
the previous one not for this one.

65
00:04:04.823 --> 00:04:08.780
And the website, the website for go,

66
00:04:08.780 --> 00:04:13.990
originally was Golang,
Golang.org, I think.

67
00:04:13.990 --> 00:04:15.540
Because at the time,

68
00:04:15.540 --> 00:04:21.100
a lot of languages were actually
using that pattern for their domains.

69
00:04:21.100 --> 00:04:27.380
So that's another google
powered language was .lang.

70
00:04:27.380 --> 00:04:30.410
So, their websites were
the name of the language, Lang.

71
00:04:30.410 --> 00:04:33.690
So, that's why for a while,
I may say for five,

72
00:04:33.690 --> 00:04:37.780
six years, we were using Golang
as the name of the language.

73
00:04:38.790 --> 00:04:42.806
So, when you were searching for
something on the web,

74
00:04:42.806 --> 00:04:47.363
how to parse XML in Golang,
that was the way to do that, okay?

75
00:04:47.363 --> 00:04:53.555
So you may still hear that today,
but it's not yet a pattern.

76
00:04:53.555 --> 00:04:55.203
But just in case, okay?

77
00:04:55.203 --> 00:04:58.584
You hear about Golang,
it's just the same language.

78
00:04:58.584 --> 00:05:02.993
So the creators of Go are these guys Ken,
Rob and Robert.

79
00:05:02.993 --> 00:05:07.704
That the only important part that I wanna
mention here is that they have a lot of

80
00:05:07.704 --> 00:05:11.630
experience working with languages and
with low-level stuff.

81
00:05:11.630 --> 00:05:15.090
So Ken has been working in the B and
C languages.

82
00:05:15.090 --> 00:05:19.280
B was another language before C, actually.

83
00:05:19.280 --> 00:05:22.018
He also worked on Unix and UTF-8,

84
00:05:22.018 --> 00:05:27.960
that's a character in coding system
that we are this is standard today.

85
00:05:27.960 --> 00:05:30.479
The same for Rob,
that also works at Google, and

86
00:05:30.479 --> 00:05:34.250
Robert has been working with Java
on the Java built on machine.

87
00:05:34.250 --> 00:05:39.570
So that's why the committee was so
excited when the language appeared, okay?

88
00:05:39.570 --> 00:05:44.160
Because it was coming from lot of
people with experience doing languages.

89
00:05:44.160 --> 00:05:49.426
Go appeared in the development space in,
let's say,

90
00:05:49.426 --> 00:05:53.980
in an era where a lot
of languages appeared.

91
00:05:53.980 --> 00:05:59.990
So after the 90s, we have have in
a slow process of adding new languages.

92
00:05:59.990 --> 00:06:03.080
So actually we thought that we
were done with languages, okay?

93
00:06:03.080 --> 00:06:07.544
We had Java, C Sharp, JavaScript, PHP,

94
00:06:07.544 --> 00:06:12.430
we have C, C++, and we didn't need more.

95
00:06:12.430 --> 00:06:15.050
We didn't want more languages for
a while, like for a decade.

96
00:06:17.740 --> 00:06:22.081
Between 2008, 2012, 2013,

97
00:06:22.081 --> 00:06:29.372
we saw a lot of new languages appearing
in the market and Go is one of those.

98
00:06:29.372 --> 00:06:34.508
But also we have Dart,
we have Kotlin, maybe that's younger.

99
00:06:34.508 --> 00:06:39.023
But Kotlin, Swift, Hack,
that that's a language where,

100
00:06:39.023 --> 00:06:44.613
actually Facebook is running on Hack,
that is kind of an evolution of PHP.

101
00:06:44.613 --> 00:06:45.446
But anyway,

102
00:06:45.446 --> 00:06:50.305
it's part of a moment in history where
a lot of new languages have appeared.

103
00:06:50.305 --> 00:06:55.345
When we realized that the kind of apps
that we are doing these days are not

104
00:06:55.345 --> 00:07:00.473
the same that the kinds of ads that
we were doing in the 90s or the 80s.

105
00:07:00.473 --> 00:07:03.520
So the needs are different.

106
00:07:03.520 --> 00:07:08.222
So now we have, for example,
the web, internet, that in the 90s,

107
00:07:08.222 --> 00:07:12.949
it was just starting and it wasn't
actually the most important part.

108
00:07:12.949 --> 00:07:18.639
So when Java appeared, the web wasn't
actually a big thing, it was there.

109
00:07:18.639 --> 00:07:24.196
But yeah, we weren't we weren't actually
creating apps for the internet.

110
00:07:24.196 --> 00:07:27.621
So then that means that
the original idea of Java,

111
00:07:27.621 --> 00:07:31.537
I'm thinking Java but
it can be other languages as well,

112
00:07:31.537 --> 00:07:35.715
wasn't actually for
covering the needs that we have today.

113
00:07:35.715 --> 00:07:37.890
So now we are starting from scratch.

114
00:07:37.890 --> 00:07:38.540
So why Go?

115
00:07:39.540 --> 00:07:45.578
The idea is to create a language
that is easy to code,

116
00:07:45.578 --> 00:07:50.951
and it's easy to code
means also easy to read.

117
00:07:50.951 --> 00:07:57.973
That when we look at the Go code,
it depends on the developer always.

118
00:07:57.973 --> 00:08:01.508
But at least the language has no obscure

119
00:08:01.508 --> 00:08:06.124
things that makes your
code harder to read, okay?

120
00:08:06.124 --> 00:08:08.873
That some languages have.

121
00:08:08.873 --> 00:08:13.286
When you read the code, it's like,
it's difficult to follow,

122
00:08:13.286 --> 00:08:16.912
you need to debug that,
because it's complicated.

123
00:08:16.912 --> 00:08:22.179
Also, easy to code includes
the idea that developers

124
00:08:22.179 --> 00:08:29.335
shouldn't be making a lot of decisions
about how they write their code.

125
00:08:29.335 --> 00:08:35.759
And that that part will give
us a lot of restrictions.

126
00:08:35.759 --> 00:08:38.453
And mostly if you're coming
in from other languages.

127
00:08:38.453 --> 00:08:42.170
You will feel yourself in jail sometimes,
okay?

128
00:08:42.170 --> 00:08:47.831
But that's because the idea is
we don't want freedom here,

129
00:08:47.831 --> 00:08:53.278
we want everyone in the team
writing the same code, okay?

130
00:08:53.278 --> 00:08:59.235
Yeah, and sometimes the language made
some decisions that you may not like.

131
00:08:59.235 --> 00:09:01.475
And you need to get some
time to get used to, okay?

132
00:09:01.475 --> 00:09:06.340
I'm not saying that you will never like
that, but with time, you get used to

133
00:09:06.340 --> 00:09:11.030
that and you get to understand
the advantage of that lack of freedom.

134
00:09:11.030 --> 00:09:12.430
Anyway, so that's one part.

135
00:09:12.430 --> 00:09:17.440
So an easy to learn, easy to use,
easy to read language.

136
00:09:17.440 --> 00:09:20.396
The other part is efficient compilation.

137
00:09:20.396 --> 00:09:25.469
One of the problems today that we have is
that four languages that are compiled,

138
00:09:25.469 --> 00:09:30.312
and by the way, that's Java, C Sharp,
of course we have different kinds of

139
00:09:30.312 --> 00:09:33.512
languages, and
we'll get into that in a minute.

140
00:09:33.512 --> 00:09:37.449
But some of you here
are no JS developers or

141
00:09:37.449 --> 00:09:42.973
JavaScript developers,
is JavaScript being compiled?

142
00:09:46.282 --> 00:09:49.166
I have a face saying something like this,
so I guess that's a no.

143
00:09:49.166 --> 00:09:53.770
Actually it is being compiled these days.

144
00:09:53.770 --> 00:09:57.398
We are not compiling the code, so
developers are not compiling the code.

145
00:09:57.398 --> 00:09:59.708
But browsers or engines or
the known JS engine,

146
00:09:59.708 --> 00:10:02.920
it's actually compiling the code
before executing the code.

147
00:10:02.920 --> 00:10:05.601
So there is a still there
in compilation process.

148
00:10:05.601 --> 00:10:09.601
And actually, in web performance,
when we're talking about front-end web

149
00:10:09.601 --> 00:10:13.790
performance, that's one of the most
important problems we have today.

150
00:10:13.790 --> 00:10:16.901
The time that it takes to compile,
parse and

151
00:10:16.901 --> 00:10:21.870
compile JavaScript that you
have from React or Angular.

152
00:10:21.870 --> 00:10:24.951
It's a huge JavaScript library, okay?.

153
00:10:24.951 --> 00:10:30.225
The problem that we have, not maybe on
front-end, but on large systems that

154
00:10:30.225 --> 00:10:35.596
you are doing back-end or you're creating
systems for a financial company.

155
00:10:35.596 --> 00:10:40.768
Is that with Java, with .net,
with any other language or

156
00:10:40.768 --> 00:10:44.473
a lot of languages that we have out there.

157
00:10:44.473 --> 00:10:49.015
When you have a large application with, I
don't know, 200 developers working on it,

158
00:10:49.015 --> 00:10:51.243
different modules, different packages.

159
00:10:51.243 --> 00:10:58.860
Every time you need to compile your
app it takes minutes, if not hours.

160
00:10:58.860 --> 00:11:03.470
Which is a problem for large companies,
they cannot wait ten minutes, 15 minutes,

161
00:11:03.470 --> 00:11:05.030
four minutes.

162
00:11:05.030 --> 00:11:10.190
Every time a developer is making
a change to make to compile, okay?

163
00:11:10.190 --> 00:11:14.750
So because we are getting bad
at compilation performance,

164
00:11:14.750 --> 00:11:20.000
we are adding a lot of dependencies,
that was a problem.

165
00:11:20.000 --> 00:11:27.090
So to make better apps, we need to be
faster in compiling and deploying.

166
00:11:27.090 --> 00:11:29.831
And also we need efficient execution.

167
00:11:29.831 --> 00:11:33.365
So we actually need to
scale easily our app so

168
00:11:33.365 --> 00:11:39.383
it doesn't matter if we are creating
an app that will be serving ten users or

169
00:11:39.383 --> 00:11:43.317
10 million users,
we should scale properly.

170
00:11:43.317 --> 00:11:46.460
And for
that we need efficient execution, okay?

171
00:11:46.460 --> 00:11:51.031
So when Google started the project,
the Go Project,

172
00:11:51.031 --> 00:11:55.804
they realized that they didn't
find a language that was

173
00:11:55.804 --> 00:12:00.660
actually having the three characteristics,
okay?

174
00:12:00.660 --> 00:12:02.892
So they say, for example,
Python and JavaScript,

175
00:12:02.892 --> 00:12:05.930
they organize that between
yeah they're easy to code.

176
00:12:05.930 --> 00:12:10.886
They might be pretty good at compilation
because you don't compile it, or

177
00:12:10.886 --> 00:12:12.231
it's pretty fast.

178
00:12:12.231 --> 00:12:15.800
But they don't have efficient execution.

179
00:12:15.800 --> 00:12:20.202
The dynamic nature of,
useless typing, for example,

180
00:12:20.202 --> 00:12:26.009
in those languages and other things
that built on machine that they have,

181
00:12:26.009 --> 00:12:33.120
make things not as fast as they should,
at least for high scalable solutions.

182
00:12:33.120 --> 00:12:37.449
Java, on the other side,
it was efficient, it was okay for

183
00:12:37.449 --> 00:12:41.700
compilation but
they thought that it's not easy to code.

184
00:12:42.800 --> 00:12:46.710
So setters, getters, listeners.

185
00:12:46.710 --> 00:12:52.270
So everything is a lot of code,
they mention the idea of bureaucracy.

186
00:12:52.270 --> 00:12:57.583
There is a lot of bureaucracy
around writing code, okay?

187
00:12:57.583 --> 00:13:02.243
And C++ is efficient, but
yeah, efficient in execution,

188
00:13:02.243 --> 00:13:07.541
that's why a lot of games and
operating systems are written in C++.

189
00:13:07.541 --> 00:13:10.828
But it's not easy to code, pointers and

190
00:13:10.828 --> 00:13:15.284
all that stuff,
it's not efficient in compilation.

191
00:13:15.284 --> 00:13:20.805
So, of course, what they say is,
yeah, we have a Go and

192
00:13:20.805 --> 00:13:27.043
Go it's there in the middle trying
to fulfill the three goals.

193
00:13:27.043 --> 00:13:33.480
And have these three goals in mind for
the rest of the day.

194
00:13:33.480 --> 00:13:38.759
Because sometimes you will ask yourself
why they did this in this way?

195
00:13:39.880 --> 00:13:44.290
If you will feel like there
are some weird things going on.

196
00:13:44.290 --> 00:13:47.244
And the answer is always these goals,

197
00:13:47.244 --> 00:13:51.961
because that was the only way
to comply with the three goals.

198
00:13:51.961 --> 00:13:55.277
Is yes, of reading and
coding that thing and

199
00:13:55.277 --> 00:13:59.330
efficiency in terms of
compiling execution.

200
00:13:59.330 --> 00:14:03.730
So maybe you were asking
why we don't have X.

201
00:14:03.730 --> 00:14:05.630
Let me tell you one bit.

202
00:14:06.990 --> 00:14:11.820
Initially, it's like a big bad news,
we don't have classes here.

203
00:14:11.820 --> 00:14:15.390
We don't have objects in Go, so why?

204
00:14:15.390 --> 00:14:18.802
Well, they found that yeah,

205
00:14:18.802 --> 00:14:23.720
it's not complying with the three goals.

206
00:14:25.110 --> 00:14:28.840
So we have an alternative,
we have another way, another paradigm.

207
00:14:28.840 --> 00:14:31.767
Can we emulate objects?

208
00:14:31.767 --> 00:14:34.625
We can do some some things and
we will see how.

209
00:14:34.625 --> 00:14:39.105
But we need an efficient way,
an efficient way compare with

210
00:14:39.105 --> 00:14:43.234
directly using objects as in Java or
as in JavaScript.

