WEBVTT

1
00:00:00.080 --> 00:00:02.740
Its time to see how to
work with web services.

2
00:00:02.740 --> 00:00:10.780
If we want to create a little API that
can serve our exhibitions as an API.

3
00:00:10.780 --> 00:00:14.660
They are still staying with vanilla Go,
so no libraries, okay?

4
00:00:14.660 --> 00:00:18.913
Then I will show you some libraries
that are available to do this faster if

5
00:00:18.913 --> 00:00:20.458
you want, I don't know.

6
00:00:20.458 --> 00:00:23.035
But anyway,
we go is pretty straightforward.

7
00:00:23.035 --> 00:00:26.590
So we are going to create for
that a package.

8
00:00:26.590 --> 00:00:28.180
So I'm going to create a new folder.

9
00:00:29.230 --> 00:00:32.234
Let's call that folder API.

10
00:00:32.234 --> 00:00:37.547
In the API, we are going to
make two RESTful operations,

11
00:00:37.547 --> 00:00:42.210
I get and a post of course
then you can add the rest.

12
00:00:42.210 --> 00:00:44.161
It's pretty straightforward.

13
00:00:44.161 --> 00:00:48.120
So I can separate this
by verb if you want to,

14
00:00:48.120 --> 00:00:52.400
like all the gate operations
in the gate.go and

15
00:00:52.400 --> 00:00:55.940
all the post operations in the post go.

16
00:00:55.940 --> 00:01:01.540
So we will make code up so we can add
a new exhibition for example, okay?

17
00:01:01.540 --> 00:01:05.145
Remember you can connect
these to a database or

18
00:01:05.145 --> 00:01:09.212
to any data source if you
want just using a library and

19
00:01:09.212 --> 00:01:14.307
understanding how to use SQLite or
SQL Server or MongoDB or so on.

20
00:01:14.307 --> 00:01:16.860
So, what are we going to see here?

21
00:01:16.860 --> 00:01:20.691
We're going to create here is,
for example,

22
00:01:20.691 --> 00:01:24.630
a function to get one,
or more, exhibitions.

23
00:01:25.730 --> 00:01:29.498
In fact, we can read the query string,
and if we receive an ID,

24
00:01:29.498 --> 00:01:32.540
or an index, we are going to return 1.

25
00:01:32.540 --> 00:01:37.377
And if we don't receive that argument,
we will return all the exhibitions.

26
00:01:37.377 --> 00:01:41.434
The exhibitions that we have here, okay?

27
00:01:41.434 --> 00:01:46.420
Yeah, it's a very simple, static,
hard coded database, okay?

28
00:01:46.420 --> 00:01:48.730
That's not a good idea,
don't do that at home.

29
00:01:48.730 --> 00:01:54.400
But so we are going to then create
a gate that we have the writer.

30
00:01:54.400 --> 00:01:55.561
It's always the same thing.

31
00:01:55.561 --> 00:02:03.044
Responsewriter and then http.Request,
that's the signature of every handler.

32
00:02:05.803 --> 00:02:08.834
Let's start first serving all of them.

33
00:02:08.834 --> 00:02:15.397
So what I need is to send
to the output JSON, okay?

34
00:02:15.397 --> 00:02:20.277
And remember that we've seen Marshall and
Marshal so we could convert the JSON, just

35
00:02:20.277 --> 00:02:24.770
ring, blah, blah, blah but fortunately,
we have something much simpler.

36
00:02:25.790 --> 00:02:32.970
There is a way in the JSON
package to create a new encoder.

37
00:02:32.970 --> 00:02:36.570
And the encoder receives
as an argument a writer.

38
00:02:37.780 --> 00:02:39.118
Who is the writer?

39
00:02:39.118 --> 00:02:43.160
The argument that we
are receiving the handler.

40
00:02:43.160 --> 00:02:48.307
So in this case, instead of receiving a
string and using our Marshall and Marshal

41
00:02:48.307 --> 00:02:54.380
to work with the strings, we can just send
directly the stream of JSON to the output.

42
00:02:54.380 --> 00:02:56.140
This is even faster.

43
00:02:56.140 --> 00:02:58.660
I don't even need to create
a temporary string in memory.

44
00:02:59.700 --> 00:03:01.632
So basically in this case,

45
00:03:01.632 --> 00:03:06.420
while the encoder is taking out my
object and creating the string for

46
00:03:06.420 --> 00:03:10.800
the JSON, we are sending the device
to the network directly.

47
00:03:12.230 --> 00:03:13.850
We go to a string.

48
00:03:13.850 --> 00:03:20.350
And we asked that encoder to encode
one particular object, which object?

49
00:03:20.350 --> 00:03:24.590
The one that we have in data,
GetAll, very simple.

50
00:03:24.590 --> 00:03:26.265
Do we need something else?

51
00:03:26.265 --> 00:03:26.944
No.

52
00:03:29.187 --> 00:03:33.826
The only thing that if you want to be
a good citizen for API's, the only thing

53
00:03:33.826 --> 00:03:38.049
that you need to add is a header to
specify that you're sending JSON.

54
00:03:38.049 --> 00:03:42.360
Because by default,
HTTP understands that you're sending text.

55
00:03:43.700 --> 00:03:46.109
Some APIs will never care
about that header, but

56
00:03:46.109 --> 00:03:48.590
maybe it's a good idea to add a header.

57
00:03:48.590 --> 00:03:50.900
And to add a header,
we also talk to the writer.

58
00:03:50.900 --> 00:03:56.763
And we say, header, it's a function
that returns an object value.

59
00:03:56.763 --> 00:04:01.209
So with some functions for
example set we can set a header.

60
00:04:01.209 --> 00:04:05.851
I'm not sure if you are experienced
with HTTP headers but

61
00:04:05.851 --> 00:04:10.781
the header is content type and
the value that we need to send is

62
00:04:10.781 --> 00:04:15.239
the type that for
JSON is typically application JSON.

63
00:04:22.945 --> 00:04:26.542
That's a handler, and to test the handler,

64
00:04:26.542 --> 00:04:30.056
I need to register
the handler in my server.

65
00:04:30.056 --> 00:04:35.610
So we need to go to the main and
register this handler.

66
00:04:35.610 --> 00:04:40.378
So I will go to main.go.

67
00:04:40.378 --> 00:04:45.479
I will put it here so you can still
see my get there for a while.

68
00:04:45.479 --> 00:04:50.888
So I will add server HandleFunc, and

69
00:04:50.888 --> 00:04:56.298
I can say /api/exhibitions will go

70
00:04:56.298 --> 00:05:02.594
to api because a different package .Get.

71
00:05:02.594 --> 00:05:09.850
So when that API is hit, we're executing
the get function from the API package.

72
00:05:09.850 --> 00:05:13.900
I need to restart my server
because I have changed Go code.

73
00:05:15.960 --> 00:05:17.640
Let's try this.

74
00:05:17.640 --> 00:05:22.341
I will go to api/exhibitions, and

75
00:05:22.341 --> 00:05:27.209
now I got a nice JSON back as a result.

76
00:05:30.847 --> 00:05:33.846
So pretty simple, right?

77
00:05:33.846 --> 00:05:38.746
Then I said that I wanna also to
maybe pass an ID or an index so

78
00:05:38.746 --> 00:05:41.250
I can say I want the third one.

79
00:05:42.530 --> 00:05:44.870
I'm still getting all of them.

80
00:05:44.870 --> 00:05:49.580
So let's add some more behavior here.

81
00:05:49.580 --> 00:05:54.900
And let's say that if the ID is not nil,
and what's ID?

82
00:05:54.900 --> 00:05:56.140
Where I can get that ID?

83
00:05:57.530 --> 00:06:02.590
Well, we have something known as r.

84
00:06:02.590 --> 00:06:04.999
The r is the request, the second argument,

85
00:06:04.999 --> 00:06:08.230
the request is what's
coming from the browser.

86
00:06:08.230 --> 00:06:12.757
The r has a URL value, and
that value has a query,

87
00:06:14.184 --> 00:06:22.822
Function that returns a map with
everything that was set in the URL bar.

88
00:06:22.822 --> 00:06:26.050
So it can actually access ID,

89
00:06:26.050 --> 00:06:30.707
something like that, does it make sense?

90
00:06:32.340 --> 00:06:36.880
In this case we are going to talk to

91
00:06:36.880 --> 00:06:41.914
api/exhibitions and ID?=34.

92
00:06:41.914 --> 00:06:45.276
Well, we are going to read 34 here.

93
00:06:48.471 --> 00:06:49.243
Makes sense?

94
00:06:49.243 --> 00:06:56.424
In our data structure we don't have ID so
we can treat that as a just you by order.

95
00:06:56.424 --> 00:07:01.459
Well if I have it then what I need
first is to convert that into

96
00:07:01.459 --> 00:07:07.270
an integer because this is
something the user can change.

97
00:07:07.270 --> 00:07:09.160
So I cannot just treat it as a number.

98
00:07:09.160 --> 00:07:13.330
I need to convert that into a number,
and see if it's a real number.

99
00:07:13.330 --> 00:07:14.750
Because maybe it says hello.

100
00:07:16.090 --> 00:07:19.470
Okay, so also for security reasons.

101
00:07:19.470 --> 00:07:25.422
So there is a, remember I mentioned before
that there is a package strconv for

102
00:07:25.422 --> 00:07:27.170
string conversions.

103
00:07:28.750 --> 00:07:34.774
Here we have a lot of functions actually
to convert from and to strings.

104
00:07:34.774 --> 00:07:39.222
And there is one with the name Atoi.

105
00:07:39.222 --> 00:07:40.421
Atoi.

106
00:07:42.451 --> 00:07:47.995
It's actually similar to
Parseint that is prepared.

107
00:07:47.995 --> 00:07:51.803
So it's parsing this as an integer using

108
00:07:51.803 --> 00:07:56.400
automatically the decimal base,
so base 10.

109
00:07:56.400 --> 00:08:03.892
So in this case I can parse that ID and
every converter tool will return me the,

110
00:08:03.892 --> 00:08:10.122
let's say the finalid and
also possible error because maybe and

111
00:08:10.122 --> 00:08:14.062
you know what maybe this is not working.

112
00:08:14.062 --> 00:08:19.658
Because maybe you are parsing something
that it doesn't look right and

113
00:08:19.658 --> 00:08:24.322
by the way always all these
objects that you receive when you

114
00:08:24.322 --> 00:08:29.095
look at the value is not actually
one string it's in a slice.

115
00:08:29.095 --> 00:08:31.344
It's always in a slice, why,

116
00:08:31.344 --> 00:08:36.026
because technically you can parse
more than one ID with a comma.

117
00:08:36.026 --> 00:08:38.327
So that's part of the protocol, okay?

118
00:08:38.327 --> 00:08:43.843
Even if you parse only one, you receive
a slice of an array collection.

119
00:08:43.843 --> 00:08:45.300
So we get the first one.

120
00:08:46.830 --> 00:08:47.590
Make sense?

121
00:08:47.590 --> 00:08:53.945
Well, if there is error here, so if error,
let's start with if there is no error.

122
00:08:53.945 --> 00:09:00.107
So, if error is nil, and
also I should verify,

123
00:09:00.107 --> 00:09:07.512
that the final ID is not
bypassing the length of the data.

124
00:09:08.950 --> 00:09:09.827
Make sense?

125
00:09:09.827 --> 00:09:15.473
Because if that happens, I'm trying to
get an exhibition that doesn't exist.

126
00:09:15.473 --> 00:09:19.773
So in those cases I'm
going to return an error.

127
00:09:19.773 --> 00:09:23.767
And we already return a 500,
setting the header,

128
00:09:23.767 --> 00:09:28.573
but I will show you another way
to return an error, a faster way.

129
00:09:28.573 --> 00:09:33.400
You can talk to http and say http.Error.

130
00:09:33.400 --> 00:09:36.787
It's a function receiving the writer,

131
00:09:38.957 --> 00:09:43.360
A message like Invalid Exhibition, and

132
00:09:43.360 --> 00:09:50.232
then the status that you wanna send back,
status bad request.

133
00:09:50.232 --> 00:09:55.170
This is just a utility
function to reduce the steps.

134
00:09:55.170 --> 00:09:59.670
And if not, well, we actually have one,
the element that we want to send.

135
00:09:59.670 --> 00:10:04.274
So we are going to also,
similar to the encoder that we have here,

136
00:10:04.274 --> 00:10:09.920
we are going to create a new encoder
based on our writer, the output.

137
00:10:09.920 --> 00:10:15.016
To the browser, and we are going
to code not all the objects but

138
00:10:15.016 --> 00:10:18.360
the final ID, the one in that position.

139
00:10:18.360 --> 00:10:22.682
We can call this index as
well instead of final id.

140
00:10:26.595 --> 00:10:27.641
Does it make sense?

141
00:10:27.641 --> 00:10:32.868
So in this case we read
the URL if we have that

142
00:10:32.868 --> 00:10:37.533
argument, we just return one element

143
00:10:40.025 --> 00:10:44.252
So I'm going to stop the server run again.

144
00:10:45.841 --> 00:10:50.989
I'm going to try this, again, let's see

145
00:10:50.989 --> 00:10:57.139
exhibitions give me all
of them exhibitionsid1.

146
00:10:57.139 --> 00:11:02.888
It's giving me 1, but also the rest
that's because I have this here and

147
00:11:02.888 --> 00:11:06.667
that shouldn't go here but
in an else, right?

148
00:11:09.255 --> 00:11:14.537
If not I'm returning both,
one element and also the array.

149
00:11:14.537 --> 00:11:16.800
So in this case, we want all.

150
00:11:18.910 --> 00:11:25.077
And here, we will try to serve only one,
that's the idea.

151
00:11:27.225 --> 00:11:31.368
So now, try again and
now I have the first one.

152
00:11:31.368 --> 00:11:37.729
Id0, next one, and if I'm not
parsing the id, I have everything.

153
00:11:37.729 --> 00:11:42.741
What happens if I parse,
Hello or maybe Panic,

154
00:11:42.741 --> 00:11:47.266
as an id I'm getting invalid exhibition.

155
00:11:47.266 --> 00:11:51.879
By the way here I said get but
am I verifying that

156
00:11:51.879 --> 00:11:56.744
that request was actually
made with a Get or not?

157
00:11:56.744 --> 00:12:01.080
Actually, no, I can actually make a POST
to that URL, or a DELETE to that URL.

158
00:12:01.080 --> 00:12:03.009
I'm also returning a GET.

159
00:12:03.009 --> 00:12:06.483
In this case, it's harmless,
because nothing happens.

160
00:12:06.483 --> 00:12:10.385
But with a POST or a DELETE, you need
to be sure that the verb that you're

161
00:12:10.385 --> 00:12:12.936
receiving is the one
that you're expecting.

