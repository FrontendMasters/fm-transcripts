WEBVTT

1
00:00:00.077 --> 00:00:03.197
That's how you make
a restful API manually.

2
00:00:03.197 --> 00:00:06.847
Yeah, some of you might be thinking, well,
that's a lot of work because we need to

3
00:00:06.847 --> 00:00:08.896
fill out, check the post,
check the method.

4
00:00:08.896 --> 00:00:11.564
Well, if you wanna move further,

5
00:00:11.564 --> 00:00:16.994
remember I mentioned a Gin tool before,
but that's not the same one.

6
00:00:16.994 --> 00:00:18.124
This is a different one.

7
00:00:18.124 --> 00:00:22.579
It's called Gin Web Framework.

8
00:00:22.579 --> 00:00:27.071
And now, you will see why it's called a,
I'm sorry, Gin Web Framework,

9
00:00:27.071 --> 00:00:28.656
not Go Gin Web Framework.

10
00:00:28.656 --> 00:00:31.820
That it's kind of its expressed, so

11
00:00:31.820 --> 00:00:36.935
you have expressed framework,
you have Gin for Go, okay?

12
00:00:36.935 --> 00:00:41.870
So it will make your life easier for
working with API for

13
00:00:41.870 --> 00:00:47.252
example what else we are we
are not validating a lot of JSON.

14
00:00:47.252 --> 00:00:51.320
We cannot make like
complex routing manually.

15
00:00:51.320 --> 00:00:55.478
Also we are not using course right now,
I know if you know what courses, but

16
00:00:55.478 --> 00:00:58.065
we should add manually the header for
course.

17
00:00:58.065 --> 00:01:03.025
So the cross origin resource sharing
that's a JavaScript security

18
00:01:03.025 --> 00:01:07.909
restriction that we need to add
manually those headers in our API.

19
00:01:07.909 --> 00:01:12.040
But in this case,
using these frameworks is easy, okay?

20
00:01:12.040 --> 00:01:17.352
You have here all the documentation,
how to install it, and After you use it,

21
00:01:17.352 --> 00:01:22.364
you will see here you have all
the installation, they have the same idea.

22
00:01:22.364 --> 00:01:24.511
So here is how Gin looks like.

23
00:01:24.511 --> 00:01:28.294
So you create a new Gin with this and
then you say,

24
00:01:28.294 --> 00:01:33.291
okay, I wanna receive a GET on that URL,
and this is my handler.

25
00:01:33.291 --> 00:01:36.182
It seems clear because you don't
receive the writer and the request.

26
00:01:36.182 --> 00:01:39.515
You have received something known
as a context that inside you have

27
00:01:39.515 --> 00:01:41.074
the request and the response.

28
00:01:41.074 --> 00:01:45.192
I have some quick functions.

29
00:01:45.192 --> 00:01:48.435
In this case,
c.JSON is responding with JSON.

30
00:01:48.435 --> 00:01:53.884
You have c.TXT, you have a lot of utility
functions, and then you run a server.

31
00:01:53.884 --> 00:01:56.106
So at the end, it's the same, but

32
00:01:56.106 --> 00:01:59.489
you write less code if you
use the Gin Web Framework.

33
00:01:59.489 --> 00:02:05.708
And you are filtering the method
directly when you hook your handler.

34
00:02:08.008 --> 00:02:10.030
Okay, does that make sense?

35
00:02:10.030 --> 00:02:12.899
Cool, yeah.

36
00:02:15.265 --> 00:02:20.910
&gt;&gt; Could you explain how or
demo using an external library in Go?

37
00:02:20.910 --> 00:02:22.012
&gt;&gt; How to use an external library?

38
00:02:22.012 --> 00:02:23.866
Yeah, sure.

39
00:02:23.866 --> 00:02:26.034
Lets say you gonna use Gin.

40
00:02:26.034 --> 00:02:29.709
Well, following the steps
will help you with that.

41
00:02:29.709 --> 00:02:33.796
So, in this case,
the first step is to get,

42
00:02:33.796 --> 00:02:39.106
this is similar to MPM install for
those of you using MPM.

43
00:02:39.106 --> 00:02:43.350
So typically, you follow the steps
that you have in the library.

44
00:02:43.350 --> 00:02:44.930
So in this case, we copy.

45
00:02:44.930 --> 00:02:48.768
Go get into the terminal.

46
00:02:48.768 --> 00:02:56.012
So for example here,
I'm going to stop my server and go get.

47
00:02:56.012 --> 00:02:58.644
It will download everything.

48
00:02:58.644 --> 00:03:04.231
Typically it's not like NodeModules,
I mean there are chain dependencies.

49
00:03:04.231 --> 00:03:06.926
But not so
much as NodeModule most of the time.

50
00:03:10.556 --> 00:03:11.354
It's done.

51
00:03:11.354 --> 00:03:16.852
So after it's done, first, do we have
a NodeModules or something like that here?

52
00:03:16.852 --> 00:03:19.160
No, we don't have a folder for this.

53
00:03:19.160 --> 00:03:22.843
Everything goes to a Go temporary
folder in your computer.

54
00:03:22.843 --> 00:03:26.619
So, it's not like a folder
within your computer.

55
00:03:26.619 --> 00:03:31.837
But what we do have is
a change in our Mod file.

56
00:03:31.837 --> 00:03:37.251
We have a require with the list of all
the dependencies that we have right now,

57
00:03:37.251 --> 00:03:39.096
because we installed it.

58
00:03:39.096 --> 00:03:43.628
So, it's changing go.mod actually, okay?

59
00:03:43.628 --> 00:03:46.329
And here you have all the versions and

60
00:03:46.329 --> 00:03:49.828
also you have some actions check for
upgrades.

61
00:03:49.828 --> 00:03:55.969
That is just vs code is helping me
executing some CLI commands to do that and

62
00:03:55.969 --> 00:03:59.748
the next step is to import it and
that's all.

63
00:03:59.748 --> 00:04:01.147
And you use it.

64
00:04:01.147 --> 00:04:05.672
So we go to main.go,
we import the library,

65
00:04:05.672 --> 00:04:11.398
without import because I have
an import block like this.

66
00:04:11.398 --> 00:04:14.252
Now it's complaining
because I'm not using it.

67
00:04:14.252 --> 00:04:15.734
And then you use it.

68
00:04:15.734 --> 00:04:17.505
That's all, so, in this case, gin.

69
00:04:17.505 --> 00:04:20.750
So, you say gin., and you have gin.

70
00:04:20.750 --> 00:04:23.331
So, you set mod and we can even copy and

71
00:04:23.331 --> 00:04:26.329
paste the simple example
that we have here.

72
00:04:33.794 --> 00:04:36.730
Okay, now that, and you're done.

73
00:04:36.730 --> 00:04:37.906
So it's actually pretty simple.

74
00:04:37.906 --> 00:04:42.627
The only step is to run
the CLI command to get, so

75
00:04:42.627 --> 00:04:49.256
go get on the URL typically from
GitHub because it's open source.

76
00:04:49.256 --> 00:04:55.672
If it's an open source package, and
then you import that and you're done.

77
00:04:55.672 --> 00:05:03.529
So this case what will
happen if I run this?

78
00:05:03.529 --> 00:05:06.530
Okay, now it's listening on 8080.

79
00:05:06.530 --> 00:05:08.475
What happened with my server?

80
00:05:08.475 --> 00:05:14.951
3333, are both running?

81
00:05:14.951 --> 00:05:15.820
&gt;&gt; Yes.

82
00:05:15.820 --> 00:05:20.169
&gt;&gt; Yes, no, let's see well let's
try it will look at whole 3333.

83
00:05:20.169 --> 00:05:23.023
Nope it's not there.

84
00:05:23.023 --> 00:05:25.548
8080?

85
00:05:25.548 --> 00:05:31.224
No phone because it's
only registering /ping.

86
00:05:31.224 --> 00:05:32.158
Ping pong.

87
00:05:32.158 --> 00:05:34.313
[LAUGH] That's a ping pong.

88
00:05:34.313 --> 00:05:38.317
So why my server is down?

89
00:05:38.317 --> 00:05:45.450
By the way, it has a nice output in
the console about the request, that Gin.

90
00:05:45.450 --> 00:05:46.150
Why?

91
00:05:46.150 --> 00:05:50.865
Because that line, line 34 run is

92
00:05:50.865 --> 00:05:56.215
staying there with the thread forever.

93
00:05:56.215 --> 00:06:01.401
When you start the server,
the thread on that server stops there.

94
00:06:01.401 --> 00:06:06.026
So then, line 36 is never being executed

95
00:06:06.026 --> 00:06:10.911
unless there is an abort
process within Gin.

96
00:06:10.911 --> 00:06:12.601
&gt;&gt; Can we use a Go routine?

97
00:06:12.601 --> 00:06:16.293
&gt;&gt; We can use Go routines and
then launch two different servers or

98
00:06:16.293 --> 00:06:21.194
one in a Go routine, and yeah, in that
case, if they're using different ports.

99
00:06:21.194 --> 00:06:24.463
Then you will be serving on
both ports at the same time.

100
00:06:24.463 --> 00:06:28.154
One with Gin, the other one, or
you can create a new function,

101
00:06:28.154 --> 00:06:30.452
or if you wanna try something quickly,

102
00:06:30.452 --> 00:06:34.090
you can create a function on the fly,
as we saw before, okay?

103
00:06:34.090 --> 00:06:38.648
You put this in a function, you execute
the function at the same time, so

104
00:06:38.648 --> 00:06:43.313
you define the function and execute that,
and you do that in a Go routine.

105
00:06:43.313 --> 00:06:47.010
It's a pretty fast way to execute
a piece of code in a Go routine.

