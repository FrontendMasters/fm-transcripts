WEBVTT

1
00:00:00.210 --> 00:00:04.170
So what if we create a lambda function?

2
00:00:04.170 --> 00:00:05.630
What's a lambda function?

3
00:00:05.630 --> 00:00:08.489
A function that we create
on the fly without a name.

4
00:00:10.090 --> 00:00:11.932
So we create a function, okay?

5
00:00:11.932 --> 00:00:15.997
Let's see like this, and then we have,

6
00:00:19.270 --> 00:00:22.827
Before that function, and we call go,

7
00:00:25.787 --> 00:00:29.489
Like this here, okay?

8
00:00:29.489 --> 00:00:35.375
And, Then we wanna execute

9
00:00:35.375 --> 00:00:41.839
Done here, wg.

10
00:00:41.839 --> 00:00:44.240
Did they change anything in particular?

11
00:00:44.240 --> 00:00:47.598
Well, not yet, not yet,
that's why I'm going to refactor this.

12
00:00:47.598 --> 00:00:52.310
So I'm creating a function that,
am I calling the function?

13
00:00:52.310 --> 00:00:53.771
No, in fact, it's complaining that.

14
00:00:53.771 --> 00:00:58.620
If I look at the code, it's complaining
that I have a function that is not used.

15
00:00:58.620 --> 00:01:01.635
So I have a literal function that
is not used, no one is using this.

16
00:01:01.635 --> 00:01:03.490
How can I use a literal function?

17
00:01:03.490 --> 00:01:06.169
I can execute it immediately right now.

18
00:01:06.169 --> 00:01:09.750
This is an immediate
execution literal function.

19
00:01:09.750 --> 00:01:13.825
This was a pattern pretty common in
JavaScript a few years ago, okay?

20
00:01:13.825 --> 00:01:18.950
That right now is not so common,
but you're gonna feel fine.

21
00:01:18.950 --> 00:01:22.162
So we create a function, and
then we execute the function.

22
00:01:22.162 --> 00:01:23.707
What's the difference at this point?

23
00:01:23.707 --> 00:01:25.409
No difference, no difference.

24
00:01:26.640 --> 00:01:31.472
But, Now, what if we

25
00:01:31.472 --> 00:01:36.946
change the go, that go call.

26
00:01:36.946 --> 00:01:39.188
Did you hear that?

27
00:01:39.188 --> 00:01:40.287
She said go.

28
00:01:40.287 --> 00:01:42.668
So he got the answer.

29
00:01:42.668 --> 00:01:46.175
So we moved the go there.

30
00:01:47.878 --> 00:01:56.158
So now we create a new goroutine with this
function that will synchronously execute,

31
00:01:56.158 --> 00:02:02.440
get currency data, and
when you finish it will call Done.

32
00:02:02.440 --> 00:02:05.567
And because this function,
it's within the other function.

33
00:02:05.567 --> 00:02:11.994
So this literal function is inside
the other one, go supports closures.

34
00:02:11.994 --> 00:02:17.230
So it can access local variables
that are part of the outer function.

35
00:02:18.720 --> 00:02:20.357
So I can access wg.

36
00:02:22.650 --> 00:02:24.365
Okay, makes sense.

37
00:02:24.365 --> 00:02:28.198
Yeah, I mentioned that this
will be a little hacky.

38
00:02:28.198 --> 00:02:29.880
It's not yet done, though.

39
00:02:31.120 --> 00:02:35.195
So, if I execute this,

40
00:02:37.542 --> 00:02:42.440
I got something, but
not exactly what I was expecting.

41
00:02:43.450 --> 00:02:49.848
I got three responses, but
the three for Bitcoin Cash.

42
00:02:49.848 --> 00:02:52.429
So if then go fan of Bitcoin Cash,

43
00:02:52.429 --> 00:02:58.070
that's not the thing because I might
change the order here in the array.

44
00:02:59.670 --> 00:03:03.008
If I run this again, I'm getting ETH.

45
00:03:03.008 --> 00:03:09.520
So it seems like for some reason,
now I'm getting only the last.

46
00:03:09.520 --> 00:03:10.905
Does anyone know why?

47
00:03:15.928 --> 00:03:20.390
&gt;&gt; Changing the value of currency
each time you go through that loop.

48
00:03:20.390 --> 00:03:23.381
&gt;&gt; Something like that, in fact,
can you see that we have a warning there,

49
00:03:23.381 --> 00:03:24.570
we have a yellow underline.

50
00:03:26.420 --> 00:03:29.664
It's already saying, hey, be careful,
maybe you have a problem.

51
00:03:29.664 --> 00:03:31.050
So what's going on here?

52
00:03:31.050 --> 00:03:36.291
This is a for, okay, and
closures in go works in this way.

53
00:03:36.291 --> 00:03:39.031
When you have a closure and
what's a closure,

54
00:03:39.031 --> 00:03:43.326
the access of a local variable that
is actually from the outer function.

55
00:03:43.326 --> 00:03:45.487
So in this case currency,

56
00:03:45.487 --> 00:03:50.710
it's a local variable that was
defined in the outer function.

57
00:03:50.710 --> 00:03:54.161
So I mean this function and
this is main is the outer function, okay?

58
00:03:54.161 --> 00:03:56.020
So we have two functions.

59
00:03:56.020 --> 00:04:00.921
We're getting kind of
not a copy of the value,

60
00:04:00.921 --> 00:04:04.323
but the reference of the value.

61
00:04:04.323 --> 00:04:10.335
So, getCurrencyData has a reference
to the currency variable, okay?

62
00:04:10.335 --> 00:04:13.255
So, we have a for, a loop.

63
00:04:13.255 --> 00:04:18.023
We are immediately creating and
launching all the goroutines,

64
00:04:18.023 --> 00:04:20.590
immediately, okay, one by one.

65
00:04:21.620 --> 00:04:26.366
So when each goroutine it starts
the process and goes to a network,

66
00:04:26.366 --> 00:04:31.368
when they go and read the currency
property, the currency property is

67
00:04:31.368 --> 00:04:36.315
actually the last one, because the for
already completed the loop.

68
00:04:38.860 --> 00:04:40.480
Does it make sense?

69
00:04:40.480 --> 00:04:43.705
It takes time to understand
what's going on.

70
00:04:43.705 --> 00:04:46.067
And always, when you work with threats,

71
00:04:46.067 --> 00:04:51.630
it's difficult to think about what's going
on, it takes time to get used to that.

72
00:04:51.630 --> 00:04:57.167
But the idea here is that,
the problem is that we are actually

73
00:04:57.167 --> 00:05:01.727
looking at the currency,
and it's not a copy, so

74
00:05:01.727 --> 00:05:07.049
each goroutine has access to
the same currency variable,

75
00:05:07.049 --> 00:05:12.915
because we don't have different
memory spaces per goroutine,

76
00:05:12.915 --> 00:05:15.655
it's the same memory space.

77
00:05:15.655 --> 00:05:19.163
So, they all access to the same currency
variable that when the for ends,

78
00:05:19.163 --> 00:05:20.250
it's in the last one.

79
00:05:22.240 --> 00:05:22.974
Makes sense?

80
00:05:22.974 --> 00:05:26.508
I'm probably thinking, but
why is it still alive, the variable,

81
00:05:26.508 --> 00:05:28.590
because actually, the for ends.

82
00:05:28.590 --> 00:05:35.296
If the for ends, well,
the currency is only the for.

83
00:05:35.296 --> 00:05:39.330
Well, when you have a closure,
the closure is doing that.

84
00:05:39.330 --> 00:05:44.712
If you have a function that has a closure,
it's actually like grabbing

85
00:05:44.712 --> 00:05:49.390
that variable and
keeping that variable alive for more time.

86
00:05:49.390 --> 00:05:51.270
Anyway, to come to solve the problem.

87
00:05:52.330 --> 00:05:57.029
&gt;&gt; Cast or make a clone of the string.

88
00:05:57.029 --> 00:05:58.350
&gt;&gt; Make a clone of the string.

89
00:05:58.350 --> 00:06:04.213
So what, talking about cloning or copy
values, do you remember any ability in go

90
00:06:04.213 --> 00:06:09.578
that is doing that by default,
cloning variables, copying variables?

91
00:06:11.753 --> 00:06:16.409
&gt;&gt; If it's defined outside-
&gt;&gt; It is defined outside because currency

92
00:06:16.409 --> 00:06:17.401
is defined outside.

93
00:06:17.401 --> 00:06:19.650
&gt;&gt; [INAUDIBLE] pointer.

94
00:06:19.650 --> 00:06:22.913
&gt;&gt; Pointer, but we have a pointer problem.

95
00:06:22.913 --> 00:06:23.837
Yeah.

96
00:06:23.837 --> 00:06:26.350
&gt;&gt; Function params are copy.

97
00:06:26.350 --> 00:06:29.212
&gt;&gt; Params, function arguments.

98
00:06:29.212 --> 00:06:33.125
When you call a function,
remember, when you call a function,

99
00:06:33.125 --> 00:06:37.411
the value that you pass as an argument
will be copied, will be cloned.

100
00:06:37.411 --> 00:06:40.630
What if when you say, okay,
where do I have an argument here?

101
00:06:40.630 --> 00:06:46.278
Maybe, I can receive one
in my literal function.

102
00:06:46.278 --> 00:06:50.602
So I can receive, let's call that
currencyCode just to change the name,

103
00:06:50.602 --> 00:06:52.430
there's going to be a string.

104
00:06:52.430 --> 00:06:57.290
And then I'm going to use that
currencyCode that it should be a copy.

105
00:06:57.290 --> 00:07:00.829
But now I have an error because it says,
hey, that function,

106
00:07:00.829 --> 00:07:05.478
the literal function receives an argument,
so I'm going to pass the currency.

107
00:07:07.480 --> 00:07:11.910
Again, if I show you this code without
explaining it, it takes a while.

108
00:07:11.910 --> 00:07:13.404
What's going on, okay?

109
00:07:13.404 --> 00:07:17.152
So I'm pretty sure that some of
you are still thinking what's

110
00:07:17.152 --> 00:07:20.100
going on even with all
the steps one by one.

111
00:07:20.100 --> 00:07:21.874
But actually,
let's try to review what's going on.

112
00:07:21.874 --> 00:07:23.620
First, let's run this.

113
00:07:23.620 --> 00:07:25.570
So let me run this.

114
00:07:25.570 --> 00:07:27.220
Now, it's back.

115
00:07:27.220 --> 00:07:31.411
So it's working back and
now it's not waiting like three seconds,

116
00:07:31.411 --> 00:07:34.288
four seconds,
the waiting group is working.

117
00:07:34.288 --> 00:07:38.368
So that wait,
that w waited that we have there,

118
00:07:38.368 --> 00:07:43.340
will stay there until
the working group is done.

119
00:07:43.340 --> 00:07:46.377
Remember, the working
group is just a counter.

120
00:07:46.377 --> 00:07:50.546
The problem is that we need to understand
how to add one and how to call Done.

121
00:07:50.546 --> 00:07:52.460
Done is when that one is done.

122
00:07:53.840 --> 00:07:58.531
And it's a little tricky to understand how
to do that when you have just one code

123
00:07:58.531 --> 00:08:01.605
that is kind of executed
in different goroutines.

124
00:08:03.000 --> 00:08:04.263
That makes sense?

125
00:08:06.150 --> 00:08:08.576
Yeah, within the chat.

126
00:08:08.576 --> 00:08:11.606
&gt;&gt; Can we refactor it to a new function
since we are sending via params.

127
00:08:11.606 --> 00:08:19.620
&gt;&gt; We can, yeah, in that case
we won't have the wg variable.

128
00:08:19.620 --> 00:08:23.626
So you need to find a way to
pass that wg as an argument or

129
00:08:23.626 --> 00:08:28.003
define that as a package variable,
as a global variable.

130
00:08:28.003 --> 00:08:32.939
Because here we are taking advantage
of we can call wg done because

131
00:08:32.939 --> 00:08:35.103
we are also using a closure.

132
00:08:37.039 --> 00:08:39.908
But yeah, you can refactor this.

133
00:08:39.908 --> 00:08:43.730
You just need to understand
what's going on with goroutines.

134
00:08:43.730 --> 00:08:48.892
And in this case, we mix also the idea
of a closure and how closures work.

135
00:08:48.892 --> 00:08:52.519
And if you're in a loop,
inside the closure,

136
00:08:52.519 --> 00:08:56.611
you will always get the last value,
the last index,

137
00:08:56.611 --> 00:09:02.020
unless you make a copy of the value
when you are looping that element.

138
00:09:04.020 --> 00:09:06.444
That was a little hacky, I know.

139
00:09:08.269 --> 00:09:08.970
Do you have any questions?

140
00:09:10.360 --> 00:09:10.930
Yeah.

141
00:09:10.930 --> 00:09:15.819
&gt;&gt; It looks hacky, but is this a common
pattern, a common way to solve this.

142
00:09:15.819 --> 00:09:20.742
&gt;&gt; If it is the code is,
I will say simple enough, yes.

143
00:09:20.742 --> 00:09:23.186
Maybe you think it's not simple,
but this is kind of simple, but

144
00:09:23.186 --> 00:09:24.440
it's it gets more complicated.

145
00:09:24.440 --> 00:09:28.160
Yeah, it's virtual,
like move this to a different pattern.

146
00:09:28.160 --> 00:09:32.850
But anyway, it's important to first start
with something simple to get the idea,

147
00:09:32.850 --> 00:09:36.474
because if not, it gets complicated
understanding routines.

148
00:09:36.474 --> 00:09:41.591
And that every goroutine is actually in
the same share space, because it's like,

149
00:09:41.591 --> 00:09:46.268
initially we think that every goroutine
we have its own set of variable, and

150
00:09:46.268 --> 00:09:47.455
that's not true.

