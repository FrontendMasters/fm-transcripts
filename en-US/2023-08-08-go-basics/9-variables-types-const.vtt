WEBVTT

1
00:00:00.230 --> 00:00:01.610
So variables.

2
00:00:01.610 --> 00:00:03.820
Let's get into the fancy part.

3
00:00:03.820 --> 00:00:06.600
So you create variables with bar.

4
00:00:06.600 --> 00:00:10.650
It's bar, space,
the identifier of the variable.

5
00:00:10.650 --> 00:00:17.850
So in this case it's x, so bar x,
a space and the data type.

6
00:00:17.850 --> 00:00:23.380
No colon, it's a space, and
it goes after, not before the identifier.

7
00:00:24.900 --> 00:00:27.220
You need to get used to that,
but yeah, it's cool.

8
00:00:27.220 --> 00:00:29.300
You say why is not, there is no colon?

9
00:00:29.300 --> 00:00:37.460
Simplicity, let's avoid
the shift tab in a key.

10
00:00:37.460 --> 00:00:39.731
Simplicity, let's make it simpler, okay?

11
00:00:39.731 --> 00:00:41.070
So it's a space.

12
00:00:41.070 --> 00:00:44.766
So here I have x as an integer,
I have a name as a string, and

13
00:00:44.766 --> 00:00:46.280
we use the bar keyword.

14
00:00:47.370 --> 00:00:50.030
That's the only keyword we
are going to use for variables.

15
00:00:50.030 --> 00:00:57.410
Then we have constants that is similar,
const, the identifier, and we need a type.

16
00:00:57.410 --> 00:01:00.320
And we always need a value, why?

17
00:01:01.360 --> 00:01:06.240
Because in go, we have only constants.

18
00:01:06.240 --> 00:01:08.100
And I will explain what
that is in a minute.

19
00:01:08.100 --> 00:01:12.722
Also, if a variable has no value,
for example, in this case x and

20
00:01:12.722 --> 00:01:17.360
name and not saying equals something,
they have nil by default.

21
00:01:18.400 --> 00:01:22.800
Nil, it was,
you know as null on other languages.

22
00:01:22.800 --> 00:01:24.240
Here it's called nil.

23
00:01:24.240 --> 00:01:26.291
Okay, for now, let's say that.

24
00:01:26.291 --> 00:01:29.560
Constants can only be bool,
strings or numbers.

25
00:01:29.560 --> 00:01:34.010
Nothing else because here
they are real constants.

26
00:01:34.010 --> 00:01:39.400
For example, in JavaScript when you use
a const keyword, you don't get constants.

27
00:01:39.400 --> 00:01:41.910
You get immutable variables.

28
00:01:41.910 --> 00:01:45.250
Does anyone know the difference between
a constant and an immutable variable?

29
00:01:47.660 --> 00:01:50.447
Have you ever heard
about those difference?

30
00:01:54.048 --> 00:01:57.160
So let's start with an immutable variable.

31
00:01:57.160 --> 00:02:00.840
An immutable variable is a variable,
which means it's an a space in memory.

32
00:02:00.840 --> 00:02:04.250
So it's a memory that
needs to be allocated.

33
00:02:04.250 --> 00:02:07.150
Immutable means that there is an engine
that is checking that no one is

34
00:02:07.150 --> 00:02:08.090
changing the value.

35
00:02:08.090 --> 00:02:11.220
So once it was set,
no one can change the value.

36
00:02:11.220 --> 00:02:12.550
That's an immutable variable.

37
00:02:12.550 --> 00:02:14.433
In JavaScript that's the case.

38
00:02:14.433 --> 00:02:15.606
So it's an immutable variable.

39
00:02:15.606 --> 00:02:19.817
So it's in spacing memory and you can
assign, because it's a spacing memory.

40
00:02:19.817 --> 00:02:23.222
You can assign values
from the user's input,

41
00:02:23.222 --> 00:02:28.020
values that it's coming from
a JSON from the server.

42
00:02:28.020 --> 00:02:28.720
It's a memory.

43
00:02:28.720 --> 00:02:33.570
We allocate the memory, we put the value,
and we check that no one is changing that.

44
00:02:33.570 --> 00:02:37.020
That check system uses runtime execution.

45
00:02:37.020 --> 00:02:39.150
So that's against our go's.

46
00:02:39.150 --> 00:02:41.880
So we don't have immutable variables here.

47
00:02:41.880 --> 00:02:42.842
We do have constants.

48
00:02:42.842 --> 00:02:43.850
And what's a constant?

49
00:02:44.870 --> 00:02:48.600
Quick and dirty,
the compiler will kind of copy and paste.

50
00:02:50.080 --> 00:02:53.496
So when the compiler finds
a constant reference,

51
00:02:53.496 --> 00:02:57.659
it goes to the definition copy
the value and paste the value.

52
00:02:57.659 --> 00:03:01.390
So it's kind of a shortcut to copy and
paste.

53
00:03:01.390 --> 00:03:03.090
I'm simplifying the definition.

54
00:03:03.090 --> 00:03:07.200
But in this case, it's not that
it's not in memory, the constant.

55
00:03:07.200 --> 00:03:09.570
It's just a value, a fixed value.

56
00:03:09.570 --> 00:03:10.630
That's the difference.

57
00:03:10.630 --> 00:03:12.830
With a string,
there is an exception to that.

58
00:03:12.830 --> 00:03:14.620
But that's the idea, right?

59
00:03:14.620 --> 00:03:19.325
It's actually a fixed value and
on most of the cases

60
00:03:19.325 --> 00:03:22.854
it's not even in memory, yeah
&gt;&gt; So for

61
00:03:22.854 --> 00:03:28.080
a constant you don't
have to define the type?

62
00:03:29.190 --> 00:03:32.520
&gt;&gt; You can, but
if you always need a value.

63
00:03:32.520 --> 00:03:35.990
Something that we can do and
we are going to see that also with bar.

64
00:03:35.990 --> 00:03:40.544
Is that if you're assigning a value,
on some cases,

65
00:03:40.544 --> 00:03:44.480
you can get an implicit type declaration.

66
00:03:44.480 --> 00:03:45.240
&gt;&gt; Yeah, that makes sense.

67
00:03:46.820 --> 00:03:50.575
&gt;&gt; But for constants, in fact,
if you're used to JavaScript, and

68
00:03:50.575 --> 00:03:54.720
in JavaScript today,
we use constants for everything.

69
00:03:54.720 --> 00:03:59.918
So constant is default and
if on some cases we use sled in

70
00:03:59.918 --> 00:04:05.794
JavaScript here constant are for
various specific things but

71
00:04:05.794 --> 00:04:11.673
you're not going to use const a lot and
go just for constants.

72
00:04:11.673 --> 00:04:15.659
Values, URLs can be domains,
things that you know,

73
00:04:15.659 --> 00:04:18.672
they won't change after compilation,

74
00:04:18.672 --> 00:04:23.200
because the constant value must
be set at compilation time.

75
00:04:24.770 --> 00:04:27.212
And when it's an immutable variable,

76
00:04:27.212 --> 00:04:31.300
you can set the value later
after compilation or runtime.

77
00:04:31.300 --> 00:04:34.060
A constant cannot set
its value in runtime.

78
00:04:34.060 --> 00:04:34.680
That's the difference.

79
00:04:36.540 --> 00:04:40.738
So, we can create variables initializing
the value at the same time with equals.

80
00:04:40.738 --> 00:04:43.470
So the equals is the assignment.

81
00:04:45.410 --> 00:04:51.820
Strings will use double quotes, okay,
which is, so you don't have single quotes.

82
00:04:52.880 --> 00:04:58.558
We do have a backtick as well as
an alternative but it's just the same.

83
00:04:58.558 --> 00:05:07.084
So it's not like the backtick we have
like templates as in JavaScript.

84
00:05:07.084 --> 00:05:12.436
Also there is something known
as variable initialization

85
00:05:12.436 --> 00:05:16.266
shortcut that it's using colon equals.

86
00:05:16.266 --> 00:05:20.050
Colon equals will create the variable for
you.

87
00:05:21.370 --> 00:05:24.040
So we will use this a lot today.

88
00:05:24.040 --> 00:05:25.940
So you will see this in action.

89
00:05:25.940 --> 00:05:29.080
And so we don't need to add
the bar keyword in that case.

90
00:05:29.080 --> 00:05:30.910
And we don't need to set the type.

91
00:05:30.910 --> 00:05:35.630
It's when you wanna create the variable
and at the same time set the value.

92
00:05:35.630 --> 00:05:40.170
For example,
you wanna make these two lines shorter.

93
00:05:40.170 --> 00:05:43.708
So instead of creating a string variable,
and then setting a value,

94
00:05:43.708 --> 00:05:46.190
you can use directly these syntax.

95
00:05:46.190 --> 00:05:48.280
This syntax works only within functions.

96
00:05:49.700 --> 00:05:52.560
You cannot use it as a global variable.

97
00:05:52.560 --> 00:05:54.024
Okay, we will see that.

98
00:05:54.024 --> 00:05:57.894
That syntax that is colon equals for

99
00:05:57.894 --> 00:06:03.702
me it's a trip in time
actually to my first language.

100
00:06:03.702 --> 00:06:09.963
So I have a start in doing development
coding with Pascal, Aturo Pascal.

101
00:06:09.963 --> 00:06:13.936
And Pascal that was the way to
assign values to a variable.

102
00:06:13.936 --> 00:06:18.752
So for me is like coming back
to when I was a teenager,

103
00:06:18.752 --> 00:06:21.603
and I was coding as a teenager.

104
00:06:21.603 --> 00:06:25.720
Okay, so that's how you define barbers.

105
00:06:25.720 --> 00:06:27.550
Do we have anything else to cover?

106
00:06:27.550 --> 00:06:28.540
No, that's all.

107
00:06:28.540 --> 00:06:31.680
Remember, this is actually simple.

108
00:06:31.680 --> 00:06:36.380
Now let's go back to our module
to play with this a little bit.

109
00:06:36.380 --> 00:06:39.619
So for example, if I want to
create a variable for this text.

110
00:06:40.740 --> 00:06:47.120
We use bar the message,
the identifier and the type.

111
00:06:47.120 --> 00:06:49.688
In this case it's a string, s.

112
00:06:49.688 --> 00:06:52.971
You will see that the ghost compiler so

113
00:06:52.971 --> 00:06:57.310
the mix between the compiler and
the linter.

114
00:06:57.310 --> 00:07:01.880
So both are working together here,
they have anxiety.

115
00:07:01.880 --> 00:07:03.190
They suffer from anxiety.

116
00:07:03.190 --> 00:07:06.920
So you will see a lot of error messages
immediately after creating a variable.

117
00:07:06.920 --> 00:07:09.411
And that's because you haven't
used the variable, okay?

118
00:07:09.411 --> 00:07:14.484
And at one point, it will stop your flow
of thoughts at first because they come on,

119
00:07:14.484 --> 00:07:15.730
what's going on?

120
00:07:15.730 --> 00:07:16.570
I have an error.

121
00:07:16.570 --> 00:07:18.730
Well, you didn't use the variable.

122
00:07:18.730 --> 00:07:20.510
Yes, I have just typed it.

123
00:07:20.510 --> 00:07:22.465
It's like gimme a break, okay?

124
00:07:22.465 --> 00:07:24.320
But you will see that a lot.

125
00:07:24.320 --> 00:07:28.452
Okay, it's really a common pattern when
you start working with Go that you feel

126
00:07:28.452 --> 00:07:31.350
that kind of weird,
it's like, gimme a break.

127
00:07:31.350 --> 00:07:32.740
I have just created the variable.

128
00:07:32.740 --> 00:07:34.550
I know I didn't use the variable.

129
00:07:34.550 --> 00:07:38.378
So that's why when you're still
thinking what you're going to do,

130
00:07:38.378 --> 00:07:41.224
if you wanna get rid quickly
of that error message.

131
00:07:41.224 --> 00:07:44.173
Most of the time you have
at the end of the function,

132
00:07:44.173 --> 00:07:49.560
a print that you will delete later,
where you just print all your variables.

133
00:07:49.560 --> 00:07:53.130
So because you're using the variable now,
the linter is not complaining anymore.

134
00:07:53.130 --> 00:07:56.500
Of course, you can disable the linter
as well, but that's not a good idea.

135
00:07:56.500 --> 00:08:00.110
Okay, because we wanna keep it.

136
00:08:00.110 --> 00:08:05.029
So in this case,
I can create a number, a price.

137
00:08:05.029 --> 00:08:06.335
Okay, the same, it's complaining.

138
00:08:06.335 --> 00:08:07.180
Why is it complaining?

139
00:08:07.180 --> 00:08:09.830
Because I'm not using it.

140
00:08:09.830 --> 00:08:14.133
And by the way, print accepts
a dynamic amount of variables so

141
00:08:14.133 --> 00:08:19.201
I can actually use comma and send more
than one variable at the same time.

142
00:08:19.201 --> 00:08:22.470
I can reuse the same print and
print many things.

143
00:08:22.470 --> 00:08:24.580
So what is the value for the message?

144
00:08:24.580 --> 00:08:27.050
In this case it will be an empty string.

145
00:08:27.050 --> 00:08:27.920
It's going to be nil.

146
00:08:27.920 --> 00:08:31.050
So it's an empty string, actually.

147
00:08:31.050 --> 00:08:36.163
Of course, I can set the value
by default like Hello from Go,

148
00:08:36.163 --> 00:08:43.540
and if you run this, you'll see Hello
from Go and blah, blah, blah, blah, blah.

149
00:08:43.540 --> 00:08:45.310
That's actually a float.

150
00:08:45.310 --> 00:08:48.040
We will see how to format that later.

151
00:08:48.040 --> 00:08:50.844
We'll talk about data types
in a minute as well, but

152
00:08:50.844 --> 00:08:54.110
you can see that on price
I didn't set the type.

153
00:08:54.110 --> 00:08:54.800
Can I?

154
00:08:54.800 --> 00:08:56.357
Yes, I can.

155
00:08:56.357 --> 00:09:02.160
Just spoiler it's float32,
for example or 64.

156
00:09:02.160 --> 00:09:04.750
But I don't need to set the type.

157
00:09:04.750 --> 00:09:08.338
If I have an equals in the same line,
the same here as a string,

158
00:09:08.338 --> 00:09:11.581
because he will implicitly
get the type from the value,

159
00:09:11.581 --> 00:09:14.209
from the literal value
that I'm using here.

160
00:09:15.900 --> 00:09:20.581
Okay, so for those of you that were
kind of afraid of data types, well,

161
00:09:20.581 --> 00:09:24.890
you don't actually need to explicitly
set the type all the time.

162
00:09:26.350 --> 00:09:29.530
Sometimes CI will be necessary,
but sometimes it won't.

163
00:09:29.530 --> 00:09:32.390
In this case, I might not need the bar.

164
00:09:32.390 --> 00:09:35.666
I can use directly.

165
00:09:35.666 --> 00:09:40.660
Colon equals the shortcut.

166
00:09:40.660 --> 00:09:41.870
But what's the difference?

167
00:09:41.870 --> 00:09:43.320
It's just creating the variable for you.

168
00:09:45.590 --> 00:09:46.830
That's all.

169
00:09:46.830 --> 00:09:48.120
And you use that a lot.

170
00:09:48.120 --> 00:09:49.850
In Go we use that a lot.

171
00:09:49.850 --> 00:09:53.343
So you don't need to set the variable
because when you set the variable,

172
00:09:53.343 --> 00:09:56.390
it first creates a variable with zero,
with nil.

173
00:09:56.390 --> 00:09:58.110
And then later you set the value.

174
00:09:58.110 --> 00:10:00.674
In this case, you create the variable and

175
00:10:00.674 --> 00:10:05.150
set its initial content in the same
line and for that we use the shortcut.

176
00:10:06.950 --> 00:10:08.340
Okay, that's all.

177
00:10:08.340 --> 00:10:12.860
And for constants you cannot use
the shortcut, so you must use the const.

178
00:10:12.860 --> 00:10:19.202
So then you say pi, something like that.

179
00:10:19.202 --> 00:10:22.180
If you want,
you can set the datatype or not.

180
00:10:23.620 --> 00:10:28.642
Why typically you set the type
when the precision that you get,

181
00:10:28.642 --> 00:10:36.100
the implicit definition, the implicit
query of the type is not the one you want.

182
00:10:36.100 --> 00:10:40.480
For example,
I can set a number here, 34, okay?

183
00:10:40.480 --> 00:10:42.810
And what's the type of pi?

184
00:10:42.810 --> 00:10:45.700
I can try to look at it here.

185
00:10:45.700 --> 00:10:48.592
It says it's an integer and

186
00:10:48.592 --> 00:10:54.644
well maybe let's say instead
of pi let's say maxSpeed.

187
00:10:54.644 --> 00:10:59.444
We will talk about the styling guidelines
for naming variables in a second.

188
00:10:59.444 --> 00:11:04.220
But let's say maxSpeed,
60, 60 miles per second.

189
00:11:04.220 --> 00:11:08.610
And it's a constant, of course,
and it's an integer,

190
00:11:08.610 --> 00:11:13.181
which it might be what you want,
but maybe you can get less,

191
00:11:13.181 --> 00:11:17.560
because an integer has
a lot of bits available.

192
00:11:17.560 --> 00:11:21.280
It can go up to 16 billions,
something like that.

193
00:11:21.280 --> 00:11:23.680
And maybe you said, you know what,
maybe I want just a byte.

194
00:11:25.180 --> 00:11:27.730
So then you can express
here a different type.

195
00:11:27.730 --> 00:11:29.930
We don't know what the byte is,
yes, but you can get an idea.

196
00:11:29.930 --> 00:11:34.822
And then yeah, because we know
that the maximum speed at least

197
00:11:34.822 --> 00:11:39.824
we are talking about cars and
highways and not SpaceX rockets.

198
00:11:39.824 --> 00:11:42.040
Yeah, a byte is good enough.

199
00:11:42.040 --> 00:11:47.860
So then you explicitly put a type,
because if not, it will get integer, okay?

200
00:11:47.860 --> 00:11:52.297
Only on those special cases where
you want to add more metadata,

201
00:11:52.297 --> 00:11:54.360
you express the type, yeah.

202
00:11:54.360 --> 00:11:58.965
&gt;&gt; If you wanted to use another shortcut,
could you not put a type but

203
00:11:58.965 --> 00:12:02.920
then put 60.00 or whatever and
then it would know?

204
00:12:02.920 --> 00:12:04.550
&gt;&gt; Yeah, so what happens if I put .0?

205
00:12:04.550 --> 00:12:06.670
What happens with the type?

206
00:12:06.670 --> 00:12:07.420
Now it's a float.

207
00:12:09.280 --> 00:12:10.300
Now it's float.

208
00:12:10.300 --> 00:12:12.940
So yeah, I did a .0.

209
00:12:12.940 --> 00:12:13.969
We'll add that.

210
00:12:13.969 --> 00:12:16.740
In fact you might not need the 0.

211
00:12:16.740 --> 00:12:19.080
The problem is that we have a yellow.

212
00:12:19.080 --> 00:12:20.213
The yellow is a warning, so

213
00:12:20.213 --> 00:12:23.510
it will compile, but it says,
here it says you're not using max speed.

214
00:12:23.510 --> 00:12:24.670
I say, okay, I know.

215
00:12:26.300 --> 00:12:27.090
Okay, so now I'm using.

216
00:12:27.090 --> 00:12:28.840
You don't even need the 0.

217
00:12:28.840 --> 00:12:33.911
You can say 60., and the last dot
will tell the compiler that it's

218
00:12:33.911 --> 00:12:40.245
actually a floating value, so it's a real
number, another integer number, okay?

219
00:12:40.245 --> 00:12:43.102
But yeah, that's true.

220
00:12:43.102 --> 00:12:48.462
So also we mentioned that we have, so I'm
not sure if you remember, but we mentioned

221
00:12:48.462 --> 00:12:53.980
that the go file can include variables,
functions and type declarations.

222
00:12:53.980 --> 00:12:57.050
This is a function, and then within
the function we have variables.

223
00:12:57.050 --> 00:13:00.170
Also we can create some
kind of global variables.

224
00:13:00.170 --> 00:13:02.410
So in this case we create
the variable here.

225
00:13:03.690 --> 00:13:08.849
And our URL equals to frontendmasters.com.

226
00:13:08.849 --> 00:13:12.650
This is kind of a global variable,
global to whom?

227
00:13:12.650 --> 00:13:13.726
Well we'll see.

228
00:13:13.726 --> 00:13:16.673
It's a package that's the spoiler, but

229
00:13:16.673 --> 00:13:20.472
we don't yet
understand what the package is, okay?

230
00:13:20.472 --> 00:13:21.984
Why it's complaining?

231
00:13:21.984 --> 00:13:24.386
Because I'm not using it.

232
00:13:24.386 --> 00:13:29.260
And probably you're thinking,
why is so annoying with that thing?

233
00:13:29.260 --> 00:13:32.290
Well, the idea of simple code.

234
00:13:32.290 --> 00:13:38.575
So we shouldn't keep orphaned variables,
variables that we said few days back and

235
00:13:38.575 --> 00:13:44.697
we're not using anymore that the Go will
tell you, no, it shouldn't be there.

236
00:13:44.697 --> 00:13:50.260
So remove that because that's
making our code dirtier.

237
00:13:50.260 --> 00:13:51.626
So we don't want that, okay?

238
00:13:51.626 --> 00:13:54.740
So that's why it's so annoying at first.

239
00:13:55.970 --> 00:13:57.177
Okay, makes sense?

240
00:13:57.177 --> 00:14:02.510
Actually, that's all for
variables that we can try it right now.

241
00:14:02.510 --> 00:14:04.510
It's actually pretty simple.

242
00:14:04.510 --> 00:14:06.698
We don't have a lot of other situations.

243
00:14:06.698 --> 00:14:09.520
Have in mind in terms of variable scopes.

244
00:14:09.520 --> 00:14:12.130
The scope of a variable can be global.

245
00:14:12.130 --> 00:14:13.160
So this is a global variable.

246
00:14:15.580 --> 00:14:17.080
It can be function.

247
00:14:17.080 --> 00:14:19.693
So this is a function-scoped variables.

248
00:14:19.693 --> 00:14:21.437
It can also be block based variable.

249
00:14:21.437 --> 00:14:23.480
We haven't seen any block yet.

250
00:14:23.480 --> 00:14:29.490
It can be an if, a for, maybe, a while.

251
00:14:29.490 --> 00:14:30.470
We'll see.

252
00:14:30.470 --> 00:14:32.268
But so when you open a code block and

253
00:14:32.268 --> 00:14:35.190
you create the variable
within that code block, okay?

254
00:14:35.190 --> 00:14:37.280
It's block scope by default.

