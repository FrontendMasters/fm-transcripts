WEBVTT

1
00:00:00.260 --> 00:00:04.799
If your returns,
you will see it's adding me the package,

2
00:00:04.799 --> 00:00:09.109
it's important net http,
that's from the standard library.

3
00:00:09.109 --> 00:00:15.560
And then I can start executing some codes,
some libraries, some functions from it.

4
00:00:15.560 --> 00:00:18.890
For example,
we can start working with Get.

5
00:00:18.890 --> 00:00:19.840
What is Get?

6
00:00:19.840 --> 00:00:23.914
It's actually making an http
request with the Get verb.

7
00:00:23.914 --> 00:00:27.987
You know that http includes different
verbs, Get, Post, Put, Delete.

8
00:00:27.987 --> 00:00:33.113
Well, all of them are actually
available as methods here.

9
00:00:33.113 --> 00:00:35.982
Actually is that a method?

10
00:00:35.982 --> 00:00:39.476
Was it correct when I said it's a method?

11
00:00:39.476 --> 00:00:40.433
What do you think?

12
00:00:42.703 --> 00:00:48.257
So if I wanna make a post HTTP request,
is that a method of HTTP?

13
00:00:48.257 --> 00:00:51.029
Mm-hm, interesting, right?

14
00:00:51.029 --> 00:00:53.400
The answer is no, it's not a method.

15
00:00:53.400 --> 00:00:53.964
Why?

16
00:00:53.964 --> 00:00:58.672
Because HTTP is not a structure,
HTTP is the package.

17
00:00:58.672 --> 00:01:03.517
And post it's actually a function,
an exported function in that package.

18
00:01:03.517 --> 00:01:07.323
I can actually Control-click or
Command-click on the Mac and

19
00:01:07.323 --> 00:01:08.698
get into that, okay?

20
00:01:08.698 --> 00:01:11.359
And you will see how it looks like.

21
00:01:11.359 --> 00:01:16.745
And you will see it has no,
a thing like this after the func.

22
00:01:16.745 --> 00:01:19.484
So it's not a method, it's a function.

23
00:01:19.484 --> 00:01:21.918
Does it make sense?

24
00:01:21.918 --> 00:01:23.597
I mean it looks like a method,

25
00:01:23.597 --> 00:01:27.961
it looks up because when you are importing
a package it looks like an object and

26
00:01:27.961 --> 00:01:32.544
then you are executing methods of that
object, but not the reality in go, okay?

27
00:01:32.544 --> 00:01:35.153
It's just a function in that package.

28
00:01:35.153 --> 00:01:41.370
So we have Post, Get, Delete, and also we
have a more generic one called Request.

29
00:01:41.370 --> 00:01:45.568
In that case, you can specify
the verb as an argument, so

30
00:01:45.568 --> 00:01:49.250
basically Get and
Post are shotcalling request.

31
00:01:49.250 --> 00:01:53.463
This is in case you need to go deeper and
maybe create your own verb or

32
00:01:53.463 --> 00:01:56.940
something like that,
that is technically possible.

33
00:01:56.940 --> 00:02:00.728
But anyway, typically in this case
we're going to get something, okay?

34
00:02:00.728 --> 00:02:04.600
So we're going to get something from
the network, so we will call Get.

35
00:02:04.600 --> 00:02:09.557
So if we analyze the signature of that
function it receives a URL as a string,

36
00:02:09.557 --> 00:02:12.520
so pretty simple, straightforward.

37
00:02:12.520 --> 00:02:16.390
We don't need to create the URL object or
parse it or

38
00:02:16.390 --> 00:02:21.529
just the string and then we receive
a response, it has a star there.

39
00:02:21.529 --> 00:02:23.070
Remember what's, what's that?

40
00:02:23.070 --> 00:02:24.440
It's a pointer.

41
00:02:24.440 --> 00:02:27.040
We'll see a pointer,
we'll see why is that, and then an error.

42
00:02:27.040 --> 00:02:31.828
So we had that design pattern of object or
error, so we know how that works.

43
00:02:31.828 --> 00:02:37.225
So I will pass the string first, I will
see how to get the string in a second.

44
00:02:37.225 --> 00:02:41.946
And I know that I will need
to receive two things.

45
00:02:41.946 --> 00:02:45.520
So, for example, there is the response and
an error object.

46
00:02:45.520 --> 00:02:51.351
I create two variables with this,
column equals is creating a variable,

47
00:02:51.351 --> 00:02:54.462
in this case two variables from there.

48
00:02:54.462 --> 00:02:57.166
So, we need to know the URL, so

49
00:02:57.166 --> 00:03:02.373
I will show you how the URL looks like,
it's not a big deal.

50
00:03:02.373 --> 00:03:06.296
So I'm going to create a constant for
that,

51
00:03:06.296 --> 00:03:11.078
let's say apiurl,
do I need to use capital letters?

52
00:03:11.078 --> 00:03:15.278
It depends if you don't want to
expose that URL to other packages,

53
00:03:15.278 --> 00:03:16.554
you don't need to.

54
00:03:16.554 --> 00:03:20.456
It's going to be then
private to my package only.

55
00:03:20.456 --> 00:03:25.413
This is https,
colon forward slash forward slash cx.io,

56
00:03:25.413 --> 00:03:29.287
forward slash api, forward slash, ticker.

57
00:03:29.287 --> 00:03:33.411
And then the idea is, this how this work.

58
00:03:33.411 --> 00:03:37.417
The idea is we need to
pass the two currencies

59
00:03:37.417 --> 00:03:41.546
uppercased with the three
letters ISO code.

60
00:03:41.546 --> 00:03:46.282
For example, if I want bitcoin,
it's BTC to USD.

61
00:03:46.282 --> 00:03:50.908
If you want bitcoin to Euro, use EUR, GBP,

62
00:03:50.908 --> 00:03:54.421
Pound, British Pound and so on.

63
00:03:54.421 --> 00:03:59.370
So the problem is that I want my app to
support different currencies, at least.

64
00:03:59.370 --> 00:04:02.509
Let's say that we compare
that everything to USD,

65
00:04:02.509 --> 00:04:06.166
you can change that to Euros,
Pounds or gents or whatever.

66
00:04:06.166 --> 00:04:08.521
But that one is going to be dynamic,
right?

67
00:04:08.521 --> 00:04:10.385
How can I make it constant?

68
00:04:10.385 --> 00:04:13.431
That then my change, kind of weird, right?

69
00:04:13.431 --> 00:04:16.616
Because if it's a constant that
cannot change that you can say, well,

70
00:04:16.616 --> 00:04:17.954
let's create the variable.

71
00:04:17.954 --> 00:04:23.356
But anyway,
the pattern typically is to use

72
00:04:23.356 --> 00:04:30.077
a placeholder here that we
can use later with Sprintf.

73
00:04:30.077 --> 00:04:35.204
So we can say, you know what,
here I will add a string.

74
00:04:35.204 --> 00:04:41.820
So we use that constant as actually
a pattern for a formatter, okay?

75
00:04:41.820 --> 00:04:42.954
Yeah, pretty simple.

76
00:04:42.954 --> 00:04:48.205
So then we can here call format or

77
00:04:48.205 --> 00:04:50.932
fmt, Sprintf.

78
00:04:50.932 --> 00:04:56.664
Remember the s prefixed version returns
a string is not printing to the console or

79
00:04:56.664 --> 00:04:58.443
to the standard output.

80
00:04:58.443 --> 00:05:03.330
And then it will use that format, the
apiurl, and the only variable that I have

81
00:05:03.330 --> 00:05:07.419
to change is actually the currency
that I receive as an argument.

82
00:05:11.347 --> 00:05:12.420
Okay, makes sense?

83
00:05:12.420 --> 00:05:18.201
The only thing that I have to be sure
is that the currency is uppercased.

84
00:05:18.201 --> 00:05:22.454
So yeah, we can request that
to the consumer of the API or

85
00:05:22.454 --> 00:05:27.356
we can start thinking about,
do we have any string management?

86
00:05:27.356 --> 00:05:32.533
So can we convert that
into like an opera string?

87
00:05:32.533 --> 00:05:37.299
So first, should I try with dot and
see what do we have here?

88
00:05:37.299 --> 00:05:38.819
No, why?

89
00:05:38.819 --> 00:05:41.837
Because strings are not objects.

90
00:05:41.837 --> 00:05:45.972
Actually, nothing is an object here,
remember, but it's not a structure either.

91
00:05:45.972 --> 00:05:52.516
I could add a method, or I could
create a structure that has a type.

92
00:05:52.516 --> 00:05:58.012
I can create a URL type or something
like that and then add a method to it.

93
00:05:58.012 --> 00:06:02.769
So to play with strings we actually
always need to use global,

94
00:06:02.769 --> 00:06:05.151
let's say global functions.

95
00:06:05.151 --> 00:06:11.954
So within the standard go system,
we have len for the length of the string.

96
00:06:11.954 --> 00:06:17.066
And if we want to go up to uppercase,
we actually have one particular

97
00:06:17.066 --> 00:06:21.475
package in the standard library
that will help us, okay?

98
00:06:21.475 --> 00:06:24.230
And it's called strings.

99
00:06:24.230 --> 00:06:28.073
So strings is a package
with a lot of functions,

100
00:06:28.073 --> 00:06:31.731
useful functions for working with strings.

101
00:06:31.731 --> 00:06:36.493
We can compare, we can check if
a string contains another string.

102
00:06:36.493 --> 00:06:40.211
We have a count, you say,
well, what's the difference?

103
00:06:40.211 --> 00:06:48.403
Also we have other methods that are better
than len because I can count len, okay?

104
00:06:48.403 --> 00:06:53.764
But we can get, I'm not going to get too
deep here, but just to give you an idea,

105
00:06:53.764 --> 00:06:58.829
len is going to actually give you
the length of that string in bytes, okay?

106
00:06:58.829 --> 00:07:03.784
Which he will just say, okay,
it's using UTF eight by default,

107
00:07:03.784 --> 00:07:07.942
so, for most characters is one character,
one byte.

108
00:07:07.942 --> 00:07:11.972
However, there are a lot of characters,
for example,

109
00:07:11.972 --> 00:07:16.971
flags on Unicode emojis,
that they're actually using more bytes.

110
00:07:16.971 --> 00:07:21.602
So when you get the length, maybe you have
one emoji, but the length will say four.

111
00:07:21.602 --> 00:07:26.159
So, that's why you have functions
to actually get how many

112
00:07:26.159 --> 00:07:30.821
characters do I have for
the UTF standard not how many bytes.

113
00:07:30.821 --> 00:07:35.092
Okay, I'm not sure if you know this but
if I use a flag, okay,

114
00:07:35.092 --> 00:07:37.897
that flag actually is a couple of bytes.

115
00:07:37.897 --> 00:07:42.633
In fact VS code, I'm not sure if you try
that, VS Code has, I think it's a bug, but

116
00:07:42.633 --> 00:07:43.188
anyway.

117
00:07:43.188 --> 00:07:46.667
When you're using emojis in VS Code,
for example, that flag.

118
00:07:46.667 --> 00:07:50.889
Now, if I press the back key,
look what happens.

119
00:07:50.889 --> 00:07:53.973
I see now a U, I don't know, what's that?

120
00:07:53.973 --> 00:07:58.138
Actually, the flag has,
first, I'm simplifying, but

121
00:07:58.138 --> 00:08:01.543
the first byte says that
it's a special emoji.

122
00:08:01.543 --> 00:08:04.205
The second byte says it's a flag and

123
00:08:04.205 --> 00:08:08.306
the other two bytes is
actually the country code, US.

124
00:08:08.306 --> 00:08:12.587
So when you are pressing the back key,
it's just deleting partially that

125
00:08:12.587 --> 00:08:16.813
character and then you see like
another emoji, another UTF character.

126
00:08:16.813 --> 00:08:19.847
You can see that with,
for example, families,

127
00:08:19.847 --> 00:08:21.996
this is going to be a little weird.

128
00:08:21.996 --> 00:08:25.243
So for example, there is an emoji for
a family, okay?

129
00:08:25.243 --> 00:08:28.959
Not sure if you, let me increase
the font size a lot, like that.

130
00:08:28.959 --> 00:08:32.671
And then if you start deleting,
you press the backspace,

131
00:08:32.671 --> 00:08:35.682
you're starting deleting,
&gt;&gt; [LAUGH]

132
00:08:35.682 --> 00:08:38.263
&gt;&gt; Members of the family, okay?

133
00:08:38.263 --> 00:08:40.190
I already said it's weird, okay?

134
00:08:40.190 --> 00:08:44.155
So you have a family and then you has
start pressing the backspace, okay?

135
00:08:44.155 --> 00:08:48.271
And now we are removing,
&gt;&gt; [LAUGH]

136
00:08:48.271 --> 00:08:51.028
&gt;&gt; And I don't want to say why this

137
00:08:51.028 --> 00:08:55.070
happens but
the last one there is dad, okay?

138
00:08:55.070 --> 00:08:58.940
The man is the last one
standing there in the emoji.

139
00:08:58.940 --> 00:09:04.260
Anyway, so, but that's actually
just proved that emojis, okay?

140
00:09:04.260 --> 00:09:09.123
They are using more bytes, and
when you get the length, you get,

141
00:09:09.123 --> 00:09:13.722
in this case, four or
five because now you can get families and

142
00:09:13.722 --> 00:09:17.809
then attach to the family skin color or
hair or gender.

143
00:09:17.809 --> 00:09:19.277
It can be non-binary.

144
00:09:19.277 --> 00:09:25.302
Well, each characteristic that you're
adding to the emoji is another byte, okay?

145
00:09:25.302 --> 00:09:28.734
So have in mind when you are using len for
the string,

146
00:09:28.734 --> 00:09:31.083
you will get bytes not characters.

147
00:09:31.083 --> 00:09:35.751
But you do if you need, so actually, I
mean, if you're making a Twitter clone now

148
00:09:35.751 --> 00:09:39.968
that you don't like the new Elon Musk
Twitter, you are creating a clone.

149
00:09:39.968 --> 00:09:44.853
And you are measuring characters, maybe
you should use the strings manipulation

150
00:09:44.853 --> 00:09:48.832
functions to get the amount of
real characters used there, okay?

151
00:09:48.832 --> 00:09:55.884
Well, in the strings,
we have ToUpper, ToLower.

152
00:09:55.884 --> 00:10:01.073
We can split, we can join, so most of
the string-based functions available,

153
00:10:01.073 --> 00:10:03.325
are available here in the string.

154
00:10:03.325 --> 00:10:06.628
So I can actually say ToUpper,
but look at this.

155
00:10:06.628 --> 00:10:13.092
It's not a method of my string,
ToUpper will actually receive one string,

156
00:10:13.092 --> 00:10:16.737
and it will return another string, okay?

157
00:10:16.737 --> 00:10:21.664
So I actually need to pass one string and
then save it in another variable,

158
00:10:21.664 --> 00:10:24.052
or directly pass it as an argument.

159
00:10:24.052 --> 00:10:28.521
That is going to be in this
case the upper currency and

160
00:10:28.521 --> 00:10:33.715
then I can use upCurrency now,
something like that, okay?

161
00:10:35.675 --> 00:10:39.789
So that's how you use
strings functions in Go.

162
00:10:39.789 --> 00:10:44.681
You use the strings package and
then you call the function.

163
00:10:44.681 --> 00:10:48.115
But have in mind it's not
modifying the original string,

164
00:10:48.115 --> 00:10:50.790
it's returning you another one, a new one.

