WEBVTT

1
00:00:00.360 --> 00:00:01.380
Yeah, I'm sorry.

2
00:00:01.380 --> 00:00:04.050
&gt;&gt; Can you go back to the types
we were just looking at?

3
00:00:05.220 --> 00:00:05.860
&gt;&gt; To there?

4
00:00:05.860 --> 00:00:10.633
&gt;&gt; Yeah, I'm a little bit confused between
the thing between the word function and

5
00:00:10.633 --> 00:00:12.187
the name of the function.

6
00:00:12.187 --> 00:00:13.320
&gt;&gt; What is this?

7
00:00:13.320 --> 00:00:15.270
&gt;&gt; Yeah, what is that?

8
00:00:15.270 --> 00:00:15.786
&gt;&gt; What is that?

9
00:00:15.786 --> 00:00:17.070
&gt;&gt; Yeah, what's it called?

10
00:00:17.070 --> 00:00:17.870
What's the word for it?

11
00:00:17.870 --> 00:00:24.532
&gt;&gt; It's not a code, that's actually-
&gt;&gt; It's like a special argument?

12
00:00:24.532 --> 00:00:26.370
&gt;&gt; It's the attribute argument.

13
00:00:26.370 --> 00:00:27.586
&gt;&gt; Yeah.
&gt;&gt; So actually,

14
00:00:27.586 --> 00:00:30.690
it's an argument because
it's an input variable.

15
00:00:30.690 --> 00:00:37.530
Actually, let me create another type
that will answer your question.

16
00:00:37.530 --> 00:00:41.110
I'm going to create a location.

17
00:00:42.360 --> 00:00:48.655
And let's say your location is, it can be
a string that has latitude and longitude,

18
00:00:48.655 --> 00:00:53.880
comma separated, something like that,
right, doesn't matter.

19
00:00:53.880 --> 00:00:56.880
And then I can create a function
that receives a location and

20
00:00:56.880 --> 00:00:59.330
calculates the distance
to another location.

21
00:00:59.330 --> 00:01:00.650
That was my point.

22
00:01:00.650 --> 00:01:03.936
So I would create a function,
okay, let's put it here so

23
00:01:03.936 --> 00:01:06.600
we can clean this up a little bit.

24
00:01:06.600 --> 00:01:11.274
So I have that new type, location,
and I'm going to create a function

25
00:01:11.274 --> 00:01:16.187
distanceTo that receives another location,
okay, like destination,

26
00:01:16.187 --> 00:01:20.800
let's call it destination that
is of type location as well.

27
00:01:20.800 --> 00:01:24.604
And then we have to do some
calculations here, okay?

28
00:01:24.604 --> 00:01:27.070
And you'll return a distance.

29
00:01:27.070 --> 00:01:29.609
So, so far we're going to return 10, okay?

30
00:01:29.609 --> 00:01:31.110
That's not the point.

31
00:01:31.110 --> 00:01:35.562
So this is an argument, this is a function
that I can make it global as well,

32
00:01:35.562 --> 00:01:39.960
exported, sorry, not global,
exported, with capital D.

33
00:01:39.960 --> 00:01:46.386
Now, if I have a locationTest
function where I create a location,

34
00:01:46.386 --> 00:01:50.419
for example, I say I'm in New York City.

35
00:01:50.419 --> 00:01:55.125
So then I create a variable nyc and
say it's a location and

36
00:01:55.125 --> 00:02:00.850
it receives a string, right,
because it's based on a string.

37
00:02:00.850 --> 00:02:05.650
So here I will add the coordinates of,
something like this, whatever.

38
00:02:06.860 --> 00:02:11.220
So I have New Your City,
and then can I calculate

39
00:02:11.220 --> 00:02:15.801
the distance to other
location that I might have?

40
00:02:15.801 --> 00:02:18.483
Well, no, why?

41
00:02:18.483 --> 00:02:23.400
Because DistanceTo is not a method,
it's just a global function at this point.

42
00:02:25.330 --> 00:02:29.640
So I should call it without nyc,
like this.

43
00:02:29.640 --> 00:02:32.920
Now it's complaining
because I'm not using nyc.

44
00:02:34.560 --> 00:02:35.800
Yeah, it's a global function.

45
00:02:35.800 --> 00:02:40.811
So I still miss one part because actually,

46
00:02:40.811 --> 00:02:48.740
what I need to do here,
we have an origin and a destination.

47
00:02:48.740 --> 00:02:49.950
And where is the origin?

48
00:02:49.950 --> 00:02:53.370
I have the destination, but
where is the origin in this call?

49
00:02:53.370 --> 00:02:54.720
It's not there.

50
00:02:54.720 --> 00:02:56.450
Yeah, I might receive it as an argument.

51
00:02:56.450 --> 00:02:58.153
So you say, yeah,
you receive it as an argument.

52
00:03:00.302 --> 00:03:03.184
Okay, like that.

53
00:03:03.184 --> 00:03:04.750
No, sorry, location.

54
00:03:04.750 --> 00:03:08.040
And then say origin,
destination, which is okay.

55
00:03:08.040 --> 00:03:08.750
It works.

56
00:03:08.750 --> 00:03:11.760
So now I need to pass nyc
as the first argument.

57
00:03:11.760 --> 00:03:12.910
Is this a method?

58
00:03:12.910 --> 00:03:15.260
No, it's not a method.

59
00:03:15.260 --> 00:03:18.577
This is a function, okay,
receiving arguments.

60
00:03:18.577 --> 00:03:22.170
If you want to convert it into a method,
and why do you wanna do that?

61
00:03:22.170 --> 00:03:25.597
Because it's more object oriental, okay?

62
00:03:25.597 --> 00:03:29.239
It's nyc.DistanceTo, in fact,
I should change the name.

63
00:03:29.239 --> 00:03:35.932
If it's a function,
it should be distance between, not to.

64
00:03:35.932 --> 00:03:41.143
If I wanna use this syntax,
a more OOP syntax,

65
00:03:41.143 --> 00:03:45.770
then I need to move this into a method.

66
00:03:45.770 --> 00:03:47.260
How to do that?

67
00:03:47.260 --> 00:03:52.895
One of the arguments,
the one that is going to be the subject

68
00:03:52.895 --> 00:03:57.967
of the method,
will get out of the argument's list,

69
00:03:57.967 --> 00:04:02.392
and it will go to this
special argument place.

70
00:04:02.392 --> 00:04:06.002
And now, you can use it.

71
00:04:06.002 --> 00:04:10.810
It's still an input argument, because
origin and destination are both inputs.

72
00:04:10.810 --> 00:04:17.140
But now, this is the origin,
and this is the destination.

73
00:04:17.140 --> 00:04:17.760
That's how we work.

74
00:04:17.760 --> 00:04:23.140
So it's like picking one argument and
move the argument to that special place.

75
00:04:23.140 --> 00:04:27.410
And when you do that, you're upgrading
that function into a method.

76
00:04:28.970 --> 00:04:29.700
&gt;&gt; That makes sense.

77
00:04:29.700 --> 00:04:32.758
I was kind of trying to wrap
my head around like, well,

78
00:04:32.758 --> 00:04:35.487
what if you need to pass
a bunch of stuff in there?

79
00:04:35.487 --> 00:04:38.050
&gt;&gt; In this case,
there are only one argument,

80
00:04:38.050 --> 00:04:42.850
because it's the argument where you're
going to hook that method into the type.

81
00:04:44.050 --> 00:04:47.476
And we're hooking this into a location.

82
00:04:47.476 --> 00:04:49.498
&gt;&gt; Right, but
it could have other arguments-

83
00:04:49.498 --> 00:04:51.000
&gt;&gt; Here you can add more arguments.

84
00:04:51.000 --> 00:04:52.510
Yeah, that's why I did these examples.

85
00:04:52.510 --> 00:04:55.420
So you can see that you can
have more arguments as well.

86
00:04:55.420 --> 00:04:58.780
All the arguments are input arguments for
the function.

87
00:04:58.780 --> 00:05:03.070
So from a function, from the code
point of view, it's an input argument.

88
00:05:03.070 --> 00:05:09.680
But I was saying that some developers are
actually tempted to use this here, why?

89
00:05:09.680 --> 00:05:16.350
Because then you treat this as really
being Java or JavaScripty, right?

90
00:05:16.350 --> 00:05:17.370
Because it's your option.

91
00:05:17.370 --> 00:05:18.740
You're creating a method.

92
00:05:18.740 --> 00:05:19.738
You have the D subject.

93
00:05:19.738 --> 00:05:20.730
Can you?

94
00:05:20.730 --> 00:05:23.760
Yes, because this is not a keyword in Go.

95
00:05:23.760 --> 00:05:28.760
So you can use it as an identifier for
your variable.

96
00:05:28.760 --> 00:05:32.330
But yeah, it looks like you don't
like Go or something like that.

97
00:05:32.330 --> 00:05:35.358
So if you use this,
you are not a Go developer,

98
00:05:35.358 --> 00:05:39.200
you are a developer using Go and
someone is forcing you.

99
00:05:39.200 --> 00:05:39.936
So yeah,

100
00:05:39.936 --> 00:05:46.400
we typically use a noun that refers to
the type that we are adding the method to.

101
00:05:46.400 --> 00:05:49.300
So in this case it can be origin or
it can be location.

102
00:05:49.300 --> 00:05:52.050
By the way, can it be location?

103
00:05:52.050 --> 00:05:56.006
It can also, location,
location, which is, well,

104
00:05:56.006 --> 00:06:01.080
if the type is going to be exported,
maybe it's going to have capital L

105
00:06:01.080 --> 00:06:06.820
that will maybe change a little bit this,
at least on some positions.

106
00:06:06.820 --> 00:06:08.447
And now you don't have that problem.

107
00:06:08.447 --> 00:06:10.649
No, this is location with lowercase.

108
00:06:10.649 --> 00:06:15.054
[LAUGH] Okay, so then you have
the identifier and the type, right, but

109
00:06:15.054 --> 00:06:16.631
that's also possible.

