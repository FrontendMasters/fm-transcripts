WEBVTT

1
00:00:00.580 --> 00:00:03.500
You may have already mentioned this,
can you scroll up really quick?

2
00:00:03.500 --> 00:00:04.030
&gt;&gt; Where?

3
00:00:04.030 --> 00:00:05.250
&gt;&gt; For your imports.

4
00:00:05.250 --> 00:00:05.860
&gt;&gt; Imports, yeah.

5
00:00:06.860 --> 00:00:13.050
&gt;&gt; So I have this too, text/template,
and then there's also html/template.

6
00:00:13.050 --> 00:00:18.908
Did we want html/template for
this since we're passing in the html?

7
00:00:18.908 --> 00:00:21.824
&gt;&gt; No, for these is same,
but it's interesting.

8
00:00:21.824 --> 00:00:24.568
Yeah, it's the same, should work anyway.

9
00:00:24.568 --> 00:00:25.676
Yeah.

10
00:00:25.676 --> 00:00:30.258
&gt;&gt; Is dot in template a kind of type?

11
00:00:30.258 --> 00:00:33.825
&gt;&gt; Is dot kind of type?

12
00:00:33.825 --> 00:00:36.205
So no, dot is a reference to the object,

13
00:00:36.205 --> 00:00:40.550
to the value that you're sending as
the second argument of your execute.

14
00:00:40.550 --> 00:00:43.243
So it's not the type,
it's actually the value.

15
00:00:43.243 --> 00:00:46.420
In this case, it's a string,
so it looks weird.

16
00:00:46.420 --> 00:00:50.928
Most of the time you won't be passing
a value, a number or a string,

17
00:00:50.928 --> 00:00:56.730
you will be passing an object or a slice,
so then the dot makes more sense.

18
00:00:56.730 --> 00:01:01.130
I will do it right now,
actually that's the next step.

19
00:01:01.130 --> 00:01:03.180
So the next step is to create.

20
00:01:03.180 --> 00:01:06.410
We're going to create
the data structure for

21
00:01:06.410 --> 00:01:10.510
serving all these exhibitions
from this museum.

22
00:01:10.510 --> 00:01:13.260
Right now, they are actually in JSON.

23
00:01:13.260 --> 00:01:17.607
So if you go in the public folder,
in gallery we have data.json,

24
00:01:17.607 --> 00:01:19.240
that's the JSON.

25
00:01:19.240 --> 00:01:24.126
We could read the JSON and
use our marshal solutions

26
00:01:24.126 --> 00:01:27.770
to have it back, that's one option.

27
00:01:27.770 --> 00:01:31.145
We can do that because we have
already been playing with JSON.

28
00:01:31.145 --> 00:01:38.230
We can just create like static for now,
structure in Go with that information.

29
00:01:38.230 --> 00:01:43.247
Remember it can come from a database,
of course there are libraries

30
00:01:43.247 --> 00:01:48.264
not within Go but external libraries
to connect to MySQL, SQLite,

31
00:01:48.264 --> 00:01:53.123
SQL Server, Oracle,
other no SQL databases as well, MongoDB.

32
00:01:53.123 --> 00:01:58.888
So you can connect with most of
the stuff by using libraries.

33
00:01:58.888 --> 00:02:00.995
So I will create though
another package now.

34
00:02:00.995 --> 00:02:04.044
In fact, how many package do
I have right now in my app?

35
00:02:07.318 --> 00:02:10.415
Only one, main.

36
00:02:10.415 --> 00:02:13.545
Okay, so be careful,
not every folder is a package,

37
00:02:13.545 --> 00:02:15.989
that was the tricky part of the question.

38
00:02:15.989 --> 00:02:19.971
So let's create a data folder, and

39
00:02:19.971 --> 00:02:27.958
within here I can create an exhibitions.go
file for the package data.

40
00:02:27.958 --> 00:02:31.682
What happens if you copy and
paste the JSON and

41
00:02:31.682 --> 00:02:35.905
try to convert it into
a normal Go based structure?

42
00:02:35.905 --> 00:02:39.698
It works, it's not actually a big deal,
we can do that.

43
00:02:39.698 --> 00:02:41.873
Remember, we can read
the JSON it's not a big deal.

44
00:02:41.873 --> 00:02:47.049
Or just because this is
kind of boring we can go

45
00:02:47.049 --> 00:02:52.105
to GitHub, and
I already have that for you.

46
00:02:52.105 --> 00:02:55.574
github.com Frontend Go Fundamentals.

47
00:02:55.574 --> 00:03:01.800
In femmuseum we already
have on data exhibitions.go

48
00:03:01.800 --> 00:03:06.791
the list, we can just take that part only.

49
00:03:06.791 --> 00:03:15.186
It's just the JSON but,
With, Let's say, Go format.

50
00:03:15.186 --> 00:03:16.250
And what's exhibition?

51
00:03:16.250 --> 00:03:21.180
Exhibition is the type that we need to
create, I don't have that type yet.

52
00:03:21.180 --> 00:03:25.154
So I can also copy and paste it,
but let's write it, that's useful.

53
00:03:25.154 --> 00:03:29.713
So I'm going to create the new type,
exhibition,

54
00:03:29.713 --> 00:03:34.272
that is going to be a structure
with a title string,

55
00:03:34.272 --> 00:03:38.635
description string, and
image string, okay.

56
00:03:38.635 --> 00:03:43.633
It looks like JSON, the only problem

57
00:03:43.633 --> 00:03:48.316
is that we don't use here quotes.

58
00:03:48.316 --> 00:03:51.584
That if you paste the JSON,
the JSON has quotes for the key names or

59
00:03:51.584 --> 00:03:55.300
the property names, so you need to go and
remove them one by one.

60
00:03:55.300 --> 00:03:59.955
And also some weird thing that
I'm not sure you will like is

61
00:03:59.955 --> 00:04:03.090
that the trailing comma is mandatory.

62
00:04:04.380 --> 00:04:06.174
So if you try to remove
the trailing commas,

63
00:04:06.174 --> 00:04:09.990
you can see that image has a trailing
comma even if there is no other property.

64
00:04:09.990 --> 00:04:15.035
And also there is a trailing comma at
the end of the collection, it's mandatory.

65
00:04:15.035 --> 00:04:19.521
So you always need to
have a trailing comma,

66
00:04:19.521 --> 00:04:25.475
does anyone think on a reason
of why they did that this way?

67
00:04:27.934 --> 00:04:32.007
&gt;&gt; At least the reason we
did it at my last job was so

68
00:04:32.007 --> 00:04:37.125
that if someone added other
things afterward it wouldn't

69
00:04:37.125 --> 00:04:41.417
count that line as a line
with a change in GitHub.

70
00:04:41.417 --> 00:04:42.962
&gt;&gt; Yeah, that's one reason.

71
00:04:42.962 --> 00:04:46.881
Also because just to avoid the problem
of forgetting the comma and

72
00:04:46.881 --> 00:04:49.690
giving you an error, so simplicity.

73
00:04:49.690 --> 00:04:53.610
Remember the three goals of Go,
make things simple, to execute fast, and

74
00:04:53.610 --> 00:04:55.620
combine fast, this is simplicity.

75
00:04:55.620 --> 00:04:58.397
It looks weird the first time because
yeah, I don't have any property so

76
00:04:58.397 --> 00:04:59.690
why I need a trailing comma?

77
00:04:59.690 --> 00:05:02.220
Well, yeah, you need a trailing comma,
just in case in the future.

78
00:05:02.220 --> 00:05:05.652
Because we know even if you don't
think that you will add a property,

79
00:05:05.652 --> 00:05:09.083
in the future there is a good chance
that you will add a property to that

80
00:05:09.083 --> 00:05:10.110
structure, okay.

81
00:05:11.280 --> 00:05:15.640
Cool, so it's complaining because we
are not using the list yet, which is okay.

82
00:05:15.640 --> 00:05:18.909
And this is list with lowercase l,

83
00:05:18.909 --> 00:05:24.110
I did this on purpose,
that means it's not exported.

84
00:05:25.160 --> 00:05:29.096
Just to show you that we can implement
the pattern of, for example,

85
00:05:29.096 --> 00:05:31.120
creating a getter.

86
00:05:31.120 --> 00:05:36.160
So I can create a function
GetAll that returns a slice of

87
00:05:36.160 --> 00:05:41.100
exhibition values and
I'm going to return the list.

88
00:05:42.850 --> 00:05:47.337
Similar to what you do in Java or
C# when you have a private property and

89
00:05:47.337 --> 00:05:49.779
then you create a getter and a setter.

90
00:05:49.779 --> 00:05:51.004
Does it make sense?

91
00:05:55.980 --> 00:06:00.550
Remember this is the constructor
of a slice of exhibition.

92
00:06:00.550 --> 00:06:04.882
The constructor angle is
always curly braces, so

93
00:06:04.882 --> 00:06:10.979
it's not actually a square brackets
as an array in JSON, a reminder.

94
00:06:10.979 --> 00:06:15.491
We have the type first and
then we open curly braces, and

95
00:06:15.491 --> 00:06:18.756
that's the constructor of types in Go.

96
00:06:18.756 --> 00:06:20.540
Okay, so now we have the data.

97
00:06:20.540 --> 00:06:24.220
Actually what I want,
going back to main.go,

98
00:06:24.220 --> 00:06:28.912
is instead of sending test I
wanna send something from data.

99
00:06:28.912 --> 00:06:33.238
We're going to start simple, and what
we're going to do is to talk with data.

100
00:06:33.238 --> 00:06:37.827
That's our package that we need to import,
so when I select return, I press return,

101
00:06:37.827 --> 00:06:39.720
it's adding me the import.

102
00:06:39.720 --> 00:06:43.340
We are going to Get All, and
I'm going to say sub-zero.

103
00:06:43.340 --> 00:06:46.880
So I'm going to start passing
only the first element, or

104
00:06:46.880 --> 00:06:51.690
it doesn't need to be the first,
we can sub one if you want, so any one.

105
00:06:51.690 --> 00:06:53.780
Just one element,
let's try first with one element.

106
00:06:55.530 --> 00:07:00.992
So now the template is
receiving as data source

107
00:07:00.992 --> 00:07:06.181
one of these exhibition options, values.

108
00:07:06.181 --> 00:07:12.860
So now if you go to the template file dot,
it's not going to work,

109
00:07:12.860 --> 00:07:17.845
it will show me the full
contents of that object.

110
00:07:17.845 --> 00:07:20.791
What I need to use here,
well first let me remove that.

111
00:07:20.791 --> 00:07:23.476
And now I need to replace h2,

112
00:07:23.476 --> 00:07:28.741
instead of that Life in
Ancient Greek reference I'm going

113
00:07:28.741 --> 00:07:34.229
to use double curly braces and
use dot and the property name.

114
00:07:34.229 --> 00:07:38.768
Being the property name,
title, okay, dot title.

115
00:07:38.768 --> 00:07:43.707
And now the dot makes more sense
because that standalone dot

116
00:07:43.707 --> 00:07:46.884
wasn't kind of interesting, okay.

117
00:07:46.884 --> 00:07:51.056
Because most of the time you are passing
a value that is a struct, so and

118
00:07:51.056 --> 00:07:54.490
then you use dot and
the name of the property.

119
00:07:54.490 --> 00:07:57.650
Of course, we are going to do
the same on the paragraph.

120
00:07:57.650 --> 00:08:02.262
So I'm going to remove all
the contents from that p element and

121
00:08:02.262 --> 00:08:04.843
I'm going to say .Description.

122
00:08:04.843 --> 00:08:08.885
And for the image,
I think that in the data we don't have

123
00:08:08.885 --> 00:08:12.673
the image forward slash,
it's just the file name.

124
00:08:12.673 --> 00:08:17.209
So I can just go and
replace only after the forward slash,

125
00:08:17.209 --> 00:08:21.270
can I do that within an attribute in HTML?

126
00:08:21.270 --> 00:08:23.759
Yes, because the template is
not actually reading HTML.

127
00:08:25.010 --> 00:08:27.300
This is different from
the Angular template.

128
00:08:27.300 --> 00:08:32.144
In the Angular template,
Angular knows if you are in a text node or

129
00:08:32.144 --> 00:08:34.850
if you are in an attribute, okay.

130
00:08:34.850 --> 00:08:36.286
Now everything is a string.

131
00:08:39.126 --> 00:08:43.691
We are just working with the strings here,
so

132
00:08:43.691 --> 00:08:48.025
you can just replace things at any moment.

133
00:08:51.434 --> 00:08:56.079
If this works, let's see,
I need to stop my server,

134
00:08:56.079 --> 00:08:59.822
run the server again and try it.

135
00:08:59.822 --> 00:09:08.440
To refresh template, I'm going to
see Aristotle with the right image.

136
00:09:08.440 --> 00:09:11.380
And that's actually embedded in the HTML,
it's not JavaScript.

137
00:09:11.380 --> 00:09:15.787
We've removed the JavaScript,
it's actually embedded in the HTML.

138
00:09:15.787 --> 00:09:17.445
This is server-side render.

