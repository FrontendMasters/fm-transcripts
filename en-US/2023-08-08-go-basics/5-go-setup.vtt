WEBVTT

1
00:00:00.490 --> 00:00:03.454
Going back here,
I'm in Visual Studio Code, copy the empty.

2
00:00:03.454 --> 00:00:08.521
First, the plugin area is this one and
you search for go.

3
00:00:08.521 --> 00:00:11.433
Typically the first one that you
will find is the official one, and

4
00:00:11.433 --> 00:00:15.076
you will see it's the official one because
it's coming from the Go team at Google.

5
00:00:15.076 --> 00:00:16.609
That's the official one.

6
00:00:16.609 --> 00:00:18.954
You just install that.

7
00:00:18.954 --> 00:00:22.573
The first time you create a Go file,
you that by the way,

8
00:00:22.573 --> 00:00:25.197
it's a file with the extension go.go.

9
00:00:25.197 --> 00:00:27.399
So the first time you open one,

10
00:00:27.399 --> 00:00:32.584
it will ask you to download those
additional tools, such as the linter.

11
00:00:32.584 --> 00:00:34.801
Typically it works, it's straightforward.

12
00:00:34.801 --> 00:00:39.416
It's fast also, it's not like a lot
of things that has to be downloaded.

13
00:00:39.416 --> 00:00:41.532
Also you can download,
if you want, Go Nightly.

14
00:00:41.532 --> 00:00:43.983
This is like experimental.

15
00:00:43.983 --> 00:00:48.807
So in case you wanna try like
the non-stable version of the plugin

16
00:00:48.807 --> 00:00:51.185
that comes with more features.

17
00:00:51.185 --> 00:00:54.950
We are not going to do that for
the course, but

18
00:00:54.950 --> 00:00:58.830
if you are brave enough,
you can try that one.

19
00:00:58.830 --> 00:01:03.443
And there are more plugins from
the community for specific things.

20
00:01:03.443 --> 00:01:08.943
But I think that with the standard one,
we're good, okay, we're ready.

21
00:01:08.943 --> 00:01:12.230
How do we know if Go is installed and
working properly in our computer?

22
00:01:12.230 --> 00:01:17.507
You can open a terminal, new terminal,
or use a shortcut in case you

23
00:01:17.507 --> 00:01:22.613
are used to VS Code, and you type go and
you should see something.

24
00:01:22.613 --> 00:01:27.543
An output from the library that will
explain everything that you can

25
00:01:27.543 --> 00:01:28.761
do with the CLI.

26
00:01:28.761 --> 00:01:31.616
So Go is a tool for
managing Go source code.

27
00:01:31.616 --> 00:01:36.276
If you try go space version, it will
give you the version that you have.

28
00:01:36.276 --> 00:01:39.404
I mean, 120, okay.

29
00:01:39.404 --> 00:01:43.514
So which version are we going to use in
case you have an older version of your

30
00:01:43.514 --> 00:01:44.189
computer?

31
00:01:44.189 --> 00:01:48.800
At least I think you should have 118.

32
00:01:48.800 --> 00:01:52.630
Most of the code will work
with probably 110, okay.

33
00:01:52.630 --> 00:01:54.827
Anyway, you can download
the latest version.

34
00:01:54.827 --> 00:01:57.767
It's not going to harm your computer.

35
00:01:57.767 --> 00:02:01.100
Okay so that means that you have that and

36
00:02:01.100 --> 00:02:06.767
we are ready to write the new file
just to play with this initially.

37
00:02:06.767 --> 00:02:11.897
So I'm going to create a new file
save it somewhere my desktop for

38
00:02:11.897 --> 00:02:13.898
example first dot.go.

39
00:02:13.898 --> 00:02:19.881
And when you use a .go now you will
see the logo there in VS code.

40
00:02:19.881 --> 00:02:21.883
That means that the plugin is working.

41
00:02:21.883 --> 00:02:26.743
If you see the logo there also
at the bottom of VS code,

42
00:02:26.743 --> 00:02:30.308
look at the bottom left of your screen.

43
00:02:30.308 --> 00:02:34.364
You will see the version of code
that VS code is recognizing.

44
00:02:34.364 --> 00:02:36.141
In my case, it says 1.20.

45
00:02:36.141 --> 00:02:40.904
Okay, so that's recognizing the go

46
00:02:40.904 --> 00:02:45.212
runtime running your computer.

47
00:02:45.212 --> 00:02:47.457
By the way, I didn't open a folder or
create a folder yet.

48
00:02:47.457 --> 00:02:49.545
We'll get into that in a minute.

49
00:02:49.545 --> 00:02:52.341
I want to first show you how, like,

50
00:02:52.341 --> 00:02:57.563
stand alone scripts work like if
you had a dog.go file somewhere,

51
00:02:57.563 --> 00:03:01.866
if you can run in before
grading actually oppression.

52
00:03:01.866 --> 00:03:06.810
So 99.9% of the time you will
create a project that by

53
00:03:06.810 --> 00:03:09.592
the way is not named as project.

54
00:03:09.592 --> 00:03:11.653
It's called a module or workspace.

55
00:03:11.653 --> 00:03:16.688
We'll get into that but
go at least the runtime let us just run

56
00:03:16.688 --> 00:03:22.022
standalone scripts to see how
a script that is doing something,

57
00:03:22.022 --> 00:03:25.081
but you can run it as a Python script,

58
00:03:25.081 --> 00:03:29.075
as a Perl script that you
have in your computer.

59
00:03:29.075 --> 00:03:31.773
But maybe you're thinking, hey, but

60
00:03:31.773 --> 00:03:36.837
you said that we have to compile it,
yeah, we can compile it and run it, or

61
00:03:36.837 --> 00:03:42.426
we can run it directly that is actually
making a compilation on the fly in memory.

62
00:03:42.426 --> 00:03:43.758
No worries give me a second.

63
00:03:43.758 --> 00:03:47.740
First, I have an empty file,
and it's giving me an error.

64
00:03:47.740 --> 00:03:48.407
How do I know?

65
00:03:48.407 --> 00:03:49.739
Because it's red.

66
00:03:49.739 --> 00:03:56.413
When you see red in the file name,
it's because it's not following Go rules.

67
00:03:56.413 --> 00:03:57.700
Where are the rules?

68
00:03:57.700 --> 00:04:01.790
Well, every file must be within a package.

69
00:04:01.790 --> 00:04:03.546
What's a package?

70
00:04:03.546 --> 00:04:07.248
For now, let's say that
the package is a folder, okay?

71
00:04:07.248 --> 00:04:13.246
And there is one package that doesn't
need to be a folder, only one.

72
00:04:13.246 --> 00:04:20.787
And you must have at least that package
in your Go file and that's package main.

73
00:04:20.787 --> 00:04:24.874
Now, you can see that after I wrote
package main, I don't see red anymore.

74
00:04:24.874 --> 00:04:30.400
So now, I'm still on an empty Go file,
but now it's valid.

75
00:04:30.400 --> 00:04:36.117
In fact,
what we have on Go is an entry point.

76
00:04:36.117 --> 00:04:41.221
For those of you that are used to creating
no js applications or even front end

77
00:04:41.221 --> 00:04:46.996
applications, it's difficult to understand
what that end what the entry point is.

78
00:04:46.996 --> 00:04:48.136
I mean, no Jas, yeah.

79
00:04:48.136 --> 00:04:52.361
Maybe you have like a server.js file like,
it's like the entry point.

80
00:04:52.361 --> 00:04:57.277
When you deploy that somehow
you need to tell the cloud.

81
00:04:57.277 --> 00:05:02.148
Where you are deploying that,
which is your file, your entry point.

82
00:05:02.148 --> 00:05:05.702
If you are doing front-end,
you don't have an entry point.

83
00:05:05.702 --> 00:05:09.051
I mean, you have a JavaScript file and
you have code.

84
00:05:09.051 --> 00:05:10.429
And what's the entry point?

85
00:05:10.429 --> 00:05:13.898
Just executing the code,
the first line of that code.

86
00:05:13.898 --> 00:05:19.665
But because here we are doing apps,
we actually need to have an entry point.

87
00:05:19.665 --> 00:05:25.581
The entry point for now is to create
a function with the name main.

88
00:05:25.581 --> 00:05:30.485
So for every Go solution that we
are creating, we will have a file that

89
00:05:30.485 --> 00:05:35.742
starts with package main at the top,
and it has a function that they mean.

90
00:05:35.742 --> 00:05:37.716
Give you a spoiler on how
to create a function.

91
00:05:37.716 --> 00:05:40.852
We haven't seen that yet, but it's func.

92
00:05:40.852 --> 00:05:45.675
The keyword is func, space,
increase that a little bit main.

93
00:05:45.675 --> 00:05:49.490
We use parentheses, and
then we use a code block.

94
00:05:49.490 --> 00:05:52.699
Code block calibrates, that's all.

95
00:05:52.699 --> 00:05:56.023
That's a valid Go file now.

96
00:05:56.023 --> 00:05:58.473
It has an entry point.

97
00:05:58.473 --> 00:06:00.946
So the file is first let go.

98
00:06:00.946 --> 00:06:02.291
The package is main.

99
00:06:02.291 --> 00:06:04.607
The function is also called me.

100
00:06:04.607 --> 00:06:08.136
So main and
main are mandatory the name of the file.

101
00:06:08.136 --> 00:06:10.293
It's up to you.

102
00:06:10.293 --> 00:06:14.280
And for now just to see if this is
working, we are going to print a message

103
00:06:14.280 --> 00:06:18.536
so I'm going to call the function with
an imprint will explain functions and

104
00:06:18.536 --> 00:06:22.346
everything in a second, I will use
double quotes to send a message.

105
00:06:22.346 --> 00:06:25.959
Maybe some of you are thinking,
do we have semicolons?

106
00:06:25.959 --> 00:06:27.426
Do I need to add a semicolon?

107
00:06:27.426 --> 00:06:29.252
Give me a minute, we will get there.

108
00:06:29.252 --> 00:06:31.904
But for now, I can save the file and
you don't see a semicolon,

109
00:06:31.904 --> 00:06:34.471
you don't see an error, so
it seems like we don't need one.

110
00:06:34.471 --> 00:06:38.003
That's the file.

111
00:06:38.003 --> 00:06:39.777
How do I run the file?

112
00:06:39.777 --> 00:06:42.246
How do I execute the file first?

113
00:06:42.246 --> 00:06:45.026
This is not for
those of you that are well developers.

114
00:06:45.026 --> 00:06:49.890
We don't put this into an HTTM L,
or we don't need a container.

115
00:06:49.890 --> 00:06:56.067
We need to run it as a console
software that we have in our computer.

116
00:06:56.067 --> 00:06:58.944
So I need to open the terminal.

117
00:06:58.944 --> 00:07:03.538
The problem is that on the terminal I need
to get into the right folder because I

118
00:07:03.538 --> 00:07:04.962
didn't open a folder.

119
00:07:04.962 --> 00:07:07.209
That's the next step actually.

120
00:07:07.209 --> 00:07:11.466
My terminal is actually in any place.

121
00:07:11.466 --> 00:07:12.102
So I need to get in.

122
00:07:12.102 --> 00:07:14.715
I think I saved that into my desktop.

123
00:07:14.715 --> 00:07:19.700
So if I'm, I'm seeing the file is
because I'm in the right folder.

124
00:07:19.700 --> 00:07:25.266
If you just go space, run space,
the name of the file,

125
00:07:25.266 --> 00:07:30.476
and I'm sorry,
we need to also use the extension.

126
00:07:30.476 --> 00:07:34.394
So first.go, so
first alone is not going to work.

127
00:07:34.394 --> 00:07:39.411
It will say no, I can't find that app.

128
00:07:39.411 --> 00:07:44.409
But if you say first.go it
will say hello from go they

129
00:07:44.409 --> 00:07:49.407
said we our character there
that we'll see what that

130
00:07:49.407 --> 00:07:54.294
is later but
that's our first go script running did

131
00:07:54.294 --> 00:07:58.633
they compile it no not
really I just running.

132
00:07:58.633 --> 00:08:03.166
In this case, this is a special
condition that is not common.

133
00:08:03.166 --> 00:08:07.359
The compiler will compile that on
the fly in the temporary directory, and

134
00:08:07.359 --> 00:08:10.820
it will execute it and
then delete the temporary directory.

135
00:08:10.820 --> 00:08:13.691
So it's actually compiling
it before executing it.

136
00:08:13.691 --> 00:08:17.888
Okay, this is just for
development purposes.

137
00:08:17.888 --> 00:08:22.862
When you deploy go application,
you don't deploy the source code,

138
00:08:22.862 --> 00:08:26.818
you deploy the binary that
you need to compile, okay?

139
00:08:26.818 --> 00:08:30.345
And we will see that later,
but well, you can ask help.

140
00:08:30.345 --> 00:08:34.434
Just write in, go, and you will find here
all the possibilities that you have,

141
00:08:34.434 --> 00:08:37.565
all the burps that you can use,
and there is a build command.

142
00:08:37.565 --> 00:08:40.772
So then you can use go build.

143
00:08:40.772 --> 00:08:44.757
And if you say like that it says,
I need to know what your bill.

144
00:08:44.757 --> 00:08:47.298
Okay, and then you pass more data.

145
00:08:47.298 --> 00:08:50.882
So we have files.go that we can run.

146
00:08:50.882 --> 00:08:56.022
And we need at least a package main and
a function with the name main.

147
00:08:56.022 --> 00:08:57.130
That's the first step.

