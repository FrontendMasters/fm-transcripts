WEBVTT

1
00:00:00.100 --> 00:00:05.459
So Netflix, Google, PayPal,
American Express, Twitch,

2
00:00:05.459 --> 00:00:10.416
Twitter, a lot of companies are using or
moving into Go.

3
00:00:10.416 --> 00:00:11.919
For which parts?

4
00:00:11.919 --> 00:00:13.286
For the backend?

5
00:00:13.286 --> 00:00:18.920
It depends, typically for services,
microservices, web services.

6
00:00:18.920 --> 00:00:23.737
Sometimes the web services are still
Node.js, but there is still another

7
00:00:23.737 --> 00:00:28.479
part of the process that is Go,
they're are moving parts individually or

8
00:00:28.479 --> 00:00:32.475
they start a new project and
they start that project using Go.

9
00:00:32.475 --> 00:00:35.968
So it depends, because it's multipurpose,

10
00:00:35.968 --> 00:00:39.467
you can even do frontend
with Go if you want to.

11
00:00:39.467 --> 00:00:42.617
I'm not saying that it's a good idea, or

12
00:00:42.617 --> 00:00:48.118
that we have a lot of websites created
in Go, but it's possible, okay?

13
00:00:48.118 --> 00:00:54.635
So, before actually coding, value and
philosophy around the language.

14
00:00:54.635 --> 00:00:56.771
Simplicity, we already mentioned that.

15
00:00:56.771 --> 00:01:00.859
It's a language that knows
the existence of network requests and

16
00:01:00.859 --> 00:01:02.500
concurrency execution.

17
00:01:02.500 --> 00:01:05.420
So, from scratch we know
that we will use a network.

18
00:01:06.960 --> 00:01:13.750
So, it's part of the core that we can
make a HTTP request or we can parse JSON.

19
00:01:13.750 --> 00:01:15.378
We don't need an additional library.

20
00:01:15.378 --> 00:01:18.999
It's not like a hack or
something that they have added, no,

21
00:01:18.999 --> 00:01:20.920
it's part of the deal.

22
00:01:20.920 --> 00:01:23.679
The same with concurrent
execution because we are going to

23
00:01:23.679 --> 00:01:26.040
download things that takes time.

24
00:01:26.040 --> 00:01:28.320
We can do several things in parallel.

25
00:01:28.320 --> 00:01:33.140
So from scratch, they thought about
how we can solve the problem.

26
00:01:33.140 --> 00:01:37.799
So when you were asking about if we are
going to cover concurrency, we are going

27
00:01:37.799 --> 00:01:42.830
to do that and we're going to see how
different it is from other languages.

28
00:01:42.830 --> 00:01:47.334
So doing threading, so executing several
tasks at the same time is completely

29
00:01:47.334 --> 00:01:52.440
different from Java, or from other
languages, or even from JavaScript.

30
00:01:52.440 --> 00:01:58.737
And it's much simpler, it's actually
pretty simple to make it work.

31
00:01:58.737 --> 00:02:02.746
So, we are going to be library free,
so Bonilla Go if you want for

32
00:02:02.746 --> 00:02:06.091
string manipulation,
network, compression, and

33
00:02:06.091 --> 00:02:09.810
file management testing,
that's also pretty cool.

34
00:02:09.810 --> 00:02:14.551
We don't need to use
an external testing library,

35
00:02:14.551 --> 00:02:17.650
the basics of testing are there.

36
00:02:17.650 --> 00:02:23.160
Again, disclaimer,
everything is under the three goals, okay?

37
00:02:23.160 --> 00:02:27.930
Simplicity, efficiency and execution,
efficiency and compilation.

38
00:02:27.930 --> 00:02:33.234
So I'm saying this because maybe
you will see how testing is done,

39
00:02:33.234 --> 00:02:35.328
at first you won't like.

40
00:02:35.328 --> 00:02:41.090
The reason is always because we
wanna keep those three goals.

41
00:02:41.090 --> 00:02:43.660
If you are new to programming,
maybe you will like it.

42
00:02:43.660 --> 00:02:48.142
But if you are used to a different
paradigm, you are expecting to continue

43
00:02:48.142 --> 00:02:52.250
that paradigm in Go, and
that won't be possible.

44
00:02:52.250 --> 00:02:54.752
You need to adapt to Go paradigm.

45
00:02:54.752 --> 00:03:01.894
That's why also there is a lot of
hate on Go, it's not just love.

46
00:03:01.894 --> 00:03:06.011
That are typically developer
from other languages and

47
00:03:06.011 --> 00:03:09.590
they didn't actually shaped a lot of Go so
far,

48
00:03:09.590 --> 00:03:13.898
they hate the language,
they hate that lack of freedom.

49
00:03:13.898 --> 00:03:16.128
We don't have enough
freedom in the language.

50
00:03:16.128 --> 00:03:18.338
You understand what I mean in a second.

51
00:03:18.338 --> 00:03:20.864
Well, it's called cross-platform
backwards compatibility,

52
00:03:20.864 --> 00:03:22.132
we have already mentioned that.

53
00:03:22.132 --> 00:03:26.156
And it has a powerful command line
interface to actually do everything

54
00:03:26.156 --> 00:03:27.170
we need.

55
00:03:27.170 --> 00:03:32.450
That compared with other languages also,
we don't need to do a lot of stuff.

56
00:03:32.450 --> 00:03:36.189
You will see it's simple as the language,
okay?

57
00:03:36.189 --> 00:03:40.025
So that's the Go CLI, we are not
going to go one by one right now.

58
00:03:40.025 --> 00:03:44.004
We're going to do directly this with code,
but you can initialize the project.

59
00:03:44.004 --> 00:03:46.401
You can build from that, you can test.

60
00:03:46.401 --> 00:03:51.290
Again, you don't need the test runner, you
can just use the Go CLI to run your test.

61
00:03:51.290 --> 00:03:56.320
Of course, that visual studio code or
all the IDs are integrated with the CLI.

62
00:03:56.320 --> 00:04:01.487
So, you will get your standard
experience in your IDE.

63
00:04:01.487 --> 00:04:04.714
Documentation, so
you can generate the documentation and

64
00:04:04.714 --> 00:04:07.174
you can read the documentation
from the CLI.

65
00:04:07.174 --> 00:04:08.715
Well, sometimes it's pretty cool.

66
00:04:08.715 --> 00:04:13.958
So if you have a question instead of using
Google, you can open the terminal and

67
00:04:13.958 --> 00:04:18.017
you can ask the CLI about
a function within a package, okay?

68
00:04:18.017 --> 00:04:20.832
Again, if you're using an ID,

69
00:04:20.832 --> 00:04:26.583
it's going to be integrated that there,
but it's cool to have.

70
00:04:26.583 --> 00:04:30.540
So for the tools that we need today,
as I mentioned before,

71
00:04:30.540 --> 00:04:33.245
we need to download Go, the Go runtime.

72
00:04:33.245 --> 00:04:39.196
It's including the CLI, so we don't
need to download the Go CLI apart.

73
00:04:39.196 --> 00:04:44.534
I'm going to use Visual Studio Code
because it has the better Plugins

74
00:04:44.534 --> 00:04:49.332
that we are going to use, but
if you like other IDE, go ahead.

75
00:04:49.332 --> 00:04:55.303
There is an official Plugin for Go in
theVisual Studio Code Plugin Library,

76
00:04:55.303 --> 00:04:57.741
I will show you which one it is.

77
00:04:57.741 --> 00:05:01.451
And that plugin,
the first time you open a .go file,

78
00:05:01.451 --> 00:05:06.077
will ask you to download additional
tools that includes a linter.

79
00:05:06.077 --> 00:05:08.726
Do you know what a linter is?

80
00:05:08.726 --> 00:05:13.641
No, you wanna-
&gt;&gt; Something that cleans up common code

81
00:05:13.641 --> 00:05:16.362
syntax and small errors.

82
00:05:16.362 --> 00:05:19.152
&gt;&gt; Well, actually the lidar,
is not cleaning up anything

83
00:05:19.152 --> 00:05:19.728
&gt;&gt; Point out.

84
00:05:19.728 --> 00:05:22.860
&gt;&gt; It's pointing out that, yeah,
you might have a problem there.

85
00:05:22.860 --> 00:05:27.120
So some people has a confusion
between the compiler and the linter.

86
00:05:27.120 --> 00:05:30.341
The linter is not a compiler,
it's at the static analysis.

87
00:05:30.341 --> 00:05:36.356
That is analyzing your code and
is finding bad practices if you want, or

88
00:05:36.356 --> 00:05:42.871
problems that you might have, or
it's going to highlight design patterns or

89
00:05:42.871 --> 00:05:46.898
start guidelines that
you're not following.

90
00:05:46.898 --> 00:05:51.570
For example, if something needs to
start with a capital letter and

91
00:05:51.570 --> 00:05:56.640
you're not doing that, it will give
you a warning, that's a linter.

92
00:05:56.640 --> 00:05:58.158
Maybe it compiles anyway,

93
00:05:58.158 --> 00:06:02.598
but you're not following the rules
that the linter will complain.

94
00:06:02.598 --> 00:06:05.538
So we will see the linter in action, okay?

95
00:06:05.538 --> 00:06:10.290
But in this case, the VS Code plugin
will download everything from us.

