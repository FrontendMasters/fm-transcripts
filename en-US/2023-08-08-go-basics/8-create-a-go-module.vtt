WEBVTT

1
00:00:00.195 --> 00:00:01.231
How do you create the module?

2
00:00:01.231 --> 00:00:03.632
Well, let me get out of here for a second.

3
00:00:03.632 --> 00:00:06.540
And you create the module.

4
00:00:06.540 --> 00:00:07.988
I don't need to save this.

5
00:00:07.988 --> 00:00:10.004
Now, I'm going to open a folder.

6
00:00:10.004 --> 00:00:13.386
So we're going to create a folder for
our project, okay?

7
00:00:13.386 --> 00:00:17.450
So just open a folder,
create the folder somewhere.

8
00:00:17.450 --> 00:00:19.273
Just remember what it is.

9
00:00:19.273 --> 00:00:22.969
In case you're in Windows,
try not to use desktop,

10
00:00:22.969 --> 00:00:27.675
because sometimes you may have
permissions, Go cannot execute,

11
00:00:27.675 --> 00:00:31.555
blah, blah, blah,
you need to change permissions.

12
00:00:31.555 --> 00:00:36.555
So just use something outside of
the users directory, just that.

13
00:00:36.555 --> 00:00:41.746
But I'm going to just create,
I have a trainings Frontend Masters here.

14
00:00:41.746 --> 00:00:46.992
Going to create a folder here for
Go workshop.

15
00:00:46.992 --> 00:00:50.050
And within this folder, I'm going to
create another one for this project.

16
00:00:50.050 --> 00:00:52.948
So we're going to start
working with a basic project.

17
00:00:52.948 --> 00:00:58.156
So let's work with InputOutput,
we're gonna call it InputOutput, okay?

18
00:00:58.156 --> 00:01:01.337
Just pick any name, it's just a folder.

19
00:01:01.337 --> 00:01:04.312
Now, I'm going to open
a terminal on that folder.

20
00:01:04.312 --> 00:01:08.942
And if you're using VS Code, the advantage
of opening a folder is that now

21
00:01:08.942 --> 00:01:12.992
the terminal is pointing to that folder,
which is pretty good.

22
00:01:12.992 --> 00:01:16.660
And now we're going to use
the Go CLI to create the module.

23
00:01:16.660 --> 00:01:18.006
Again, what's the module?

24
00:01:18.006 --> 00:01:19.628
Your project.

25
00:01:19.628 --> 00:01:26.188
So it's go module,
go with space module, a space.

26
00:01:26.188 --> 00:01:28.033
I need to just press Enter.

27
00:01:28.033 --> 00:01:33.107
It says, no, I don't know what module is,
because they say,

28
00:01:33.107 --> 00:01:36.959
it's better to just use mod
instead of module, okay?

29
00:01:36.959 --> 00:01:42.065
So we are going to use mod and
not module, for mod, just remember that.

30
00:01:42.065 --> 00:01:47.021
And later, there is something known
as workspace, and they use work,

31
00:01:47.021 --> 00:01:49.177
not workspace as the CLI tool.

32
00:01:49.177 --> 00:01:55.778
So it's go mod, and
then a command over the module, so go mod.

33
00:01:55.778 --> 00:02:01.056
And we have init to initialize one module.

34
00:02:01.056 --> 00:02:05.765
If you try that, it's also going to
give you an error, because it says,

35
00:02:05.765 --> 00:02:10.264
you also need to give me the name of
your module, the name of your project.

36
00:02:10.264 --> 00:02:16.201
And it's suggesting, and
it's not mandatory, to use a URL system.

37
00:02:16.201 --> 00:02:20.650
Again, the URL doesn't need to
really exist on the network.

38
00:02:20.650 --> 00:02:26.435
So that means I can say go mod init,
and then, I don't know,

39
00:02:26.435 --> 00:02:31.324
frontendmasters.com/go/io, InputOutput.

40
00:02:33.428 --> 00:02:35.571
What happens if you
wanna change that later?

41
00:02:35.571 --> 00:02:38.390
You will see, it's pretty simple.

42
00:02:39.740 --> 00:02:44.623
Because if I press Return now,
the only change that it did is that now

43
00:02:44.623 --> 00:02:48.579
we have a file in our folder
that wasn't there before.

44
00:02:48.579 --> 00:02:52.172
It's a go.mod, a module.

45
00:02:52.172 --> 00:02:55.010
And if you click on that file and
you open that file,

46
00:02:55.010 --> 00:02:58.650
you will see all the metadata for
our project, that is just this.

47
00:02:59.950 --> 00:03:01.467
So how do you create the module?

48
00:03:01.467 --> 00:03:07.878
You just need one text file with the name
go.mod in the root folder of your project,

49
00:03:07.878 --> 00:03:11.926
that will say module,
space, the string you want.

50
00:03:11.926 --> 00:03:14.291
If you wanna change it, you change it.

51
00:03:14.291 --> 00:03:19.117
And then the version of
Go that you wanna use.

52
00:03:19.117 --> 00:03:22.852
I mean, you can also say,
I wanna use 15, and that's all.

53
00:03:22.852 --> 00:03:25.339
So it's actually completely simple.

54
00:03:25.339 --> 00:03:29.096
Remember, we are in a simple language.

55
00:03:29.096 --> 00:03:32.567
And sometimes we will see we are going
to be following a lot of rules.

56
00:03:32.567 --> 00:03:36.983
For example, the name of this
file is part of the rule, so

57
00:03:36.983 --> 00:03:39.932
it must be go.mod with that content.

58
00:03:39.932 --> 00:03:44.000
You don't like the name we set,
you change it from here.

59
00:03:44.000 --> 00:03:46.071
That's all, okay?

60
00:03:46.071 --> 00:03:47.903
So now we have a module, okay?

61
00:03:47.903 --> 00:03:50.221
Because we have a module,
what's the difference?

62
00:03:50.221 --> 00:03:54.738
That now when we are running an app,
to run an app, it was go run,

63
00:03:54.738 --> 00:03:59.782
remember, and then the name of the Go
file, that I don't have any yet.

64
00:03:59.782 --> 00:04:03.851
But the idea is that because
we have a module now,

65
00:04:03.851 --> 00:04:10.302
instead of specifying the file that I
need, I can say I wanna run this folder,

66
00:04:10.302 --> 00:04:15.782
this module, go run ., that will say,
I wanna run this module.

67
00:04:15.782 --> 00:04:20.494
And in this case, it's going to look
through all the files in the module,

68
00:04:20.494 --> 00:04:23.612
looking for
a package main with a function main.

69
00:04:23.612 --> 00:04:24.172
Does it makes sense?

70
00:04:24.172 --> 00:04:26.454
That I don't have right now,
so nothing will happen.

71
00:04:26.454 --> 00:04:30.705
So that's when it says, you don't have
any Go files, okay, which is fine.

72
00:04:30.705 --> 00:04:36.214
But now, I don't need to say the name
of the Go file that I wanna run.

73
00:04:36.214 --> 00:04:40.385
So I just need one anywhere
in that folder with any

74
00:04:40.385 --> 00:04:45.182
name that inside has package
main with a function main.

75
00:04:45.182 --> 00:04:51.070
Typically, we call it main.go,
but you don't need to.

76
00:04:51.070 --> 00:04:57.364
You wanna call it home.go,
I don't know, index.go, it's up to you.

77
00:04:57.364 --> 00:05:02.553
The only important part is not the name,
but it should start with package main,

78
00:05:02.553 --> 00:05:06.430
and it should contain
a function with the name main.

79
00:05:06.430 --> 00:05:08.312
That's the only thing we need.

80
00:05:08.312 --> 00:05:12.493
So now if I print again,
Hello from a module,

81
00:05:12.493 --> 00:05:16.134
semicolon, no, we don't need that.

82
00:05:16.134 --> 00:05:20.943
If I save it and
then I execute again, go run .,

83
00:05:20.943 --> 00:05:26.616
it will say, Hello from a module,
okay, very simple.

84
00:05:26.616 --> 00:05:29.330
First, a couple of things
that I didn't mention.

85
00:05:29.330 --> 00:05:36.269
Can I change where I put, for example,
the opening curly brace like that?

86
00:05:36.269 --> 00:05:40.215
Well, you can see immediately
that the answer is no,

87
00:05:40.215 --> 00:05:45.052
because I have a problem now,
unexpected semicolon or newline.

88
00:05:45.052 --> 00:05:48.063
So you cannot start with a code block, so

89
00:05:48.063 --> 00:05:52.502
that when you open a code block,
it'll be on the same line.

90
00:05:52.502 --> 00:05:54.904
Remember we don't have freedom here.

91
00:05:54.904 --> 00:05:57.968
So, I mean, if you're coming from
Javascript, it's okay, it's okay.

92
00:05:57.968 --> 00:06:02.717
If you're coming from C++ or
other languages, or even C#,

93
00:06:02.717 --> 00:06:07.645
yeah, maybe you don't like that
opening curly brace there, but

94
00:06:07.645 --> 00:06:11.879
that's how it will look like in Go,
so get used to that.

95
00:06:11.879 --> 00:06:15.153
Okay, cool, so now we have a module.

96
00:06:15.153 --> 00:06:17.199
Typically, you start
a project with a module.

97
00:06:17.199 --> 00:06:18.365
Again, what's a module?

98
00:06:18.365 --> 00:06:24.614
For now it's a folder, okay,
with a go.mod and main.go.

99
00:06:24.614 --> 00:06:28.508
If you want, for
those of you coming from Node.js,

100
00:06:28.508 --> 00:06:32.237
the go.mod is kind of a package.json,
kind of.

101
00:06:32.237 --> 00:06:36.072
In fact, if later you will
use external dependencies,

102
00:06:36.072 --> 00:06:40.244
those dependencies will be listed
here in this file as well.

103
00:06:40.244 --> 00:06:44.082
Cool, well, let's go back to the slides.

104
00:06:44.082 --> 00:06:49.918
And let me just mention that lately in
Go 1.19, so the previous last version,

105
00:06:49.918 --> 00:06:53.725
so in the past six months
from recording this course,

106
00:06:53.725 --> 00:06:56.615
they added an idea known as workspaces.

107
00:06:56.615 --> 00:06:59.878
Actually, I need to also
give you a warning.

108
00:06:59.878 --> 00:07:05.584
In the first version of Go, we used to
have something known as a workspace,

109
00:07:05.584 --> 00:07:11.109
okay, that then they deprecated that,
I think it was around 1.10,

110
00:07:11.109 --> 00:07:15.479
and they move into the modules
concept that we saw so far.

111
00:07:15.479 --> 00:07:20.079
But now, they said,
there are a lot of developers saying,

112
00:07:20.079 --> 00:07:23.207
we need another layer in the structure,

113
00:07:23.207 --> 00:07:28.819
because sometimes we wanna separate
our project in different modules.

114
00:07:28.819 --> 00:07:30.829
And then they created, again,

115
00:07:30.829 --> 00:07:35.752
the idea of a workspace that isn't kind
of a super module that is on top of that.

116
00:07:35.752 --> 00:07:41.214
So that's new, okay, 1.18, not 19.

117
00:07:41.214 --> 00:07:44.790
And instead of having a go.mod,
you have a go.work,

118
00:07:44.790 --> 00:07:49.590
which's also metadata, okay,
and then you use go.work in it.

119
00:07:49.590 --> 00:07:54.415
There is no need to use that now,
and most of the Go apps out there

120
00:07:54.415 --> 00:07:59.443
are not multi-modules so far,
so they don't have a workspace.

121
00:07:59.443 --> 00:08:02.594
But anyway, it's also pretty simple,
it's another folder structure.

122
00:08:02.594 --> 00:08:05.399
So you have a workspace,
and within the workspace,

123
00:08:05.399 --> 00:08:09.161
you can have several folders,
each folder will contain a module, and

124
00:08:09.161 --> 00:08:13.274
each module will contain a package
that we haven't created one yet, okay?

125
00:08:13.274 --> 00:08:17.541
So that's the structure,
workspace, modules, and packages.

126
00:08:17.541 --> 00:08:22.973
And workspace is optional these days, and
I think it's going to be optional forever.

127
00:08:22.973 --> 00:08:25.102
So you're gonna stay with module and
packages.

