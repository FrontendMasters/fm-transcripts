WEBVTT

1
00:00:00.360 --> 00:00:05.150
For that, we are going to use
something known as Go Templates.

2
00:00:05.150 --> 00:00:09.991
Go includes a template framework,
a template is a format that we

3
00:00:09.991 --> 00:00:14.475
use our strings with some kind
of a little language inside,

4
00:00:14.475 --> 00:00:19.765
if you're using Angular, for example,
you know what a template is,

5
00:00:19.765 --> 00:00:25.080
when you define the template,
your HTML file is actually a template.

6
00:00:25.080 --> 00:00:30.494
You can insert a special tags that
are not the HTML within that template,

7
00:00:30.494 --> 00:00:34.900
if you're using React,
JSX is kind of a template.

8
00:00:34.900 --> 00:00:38.738
It's not really formally a template but
kind of, and in Go,

9
00:00:38.738 --> 00:00:44.280
it's not specifically targeting web pages,
you can use it for any string.

10
00:00:44.280 --> 00:00:49.320
But most of the time we use templates for
creating server-side rendering.

11
00:00:49.320 --> 00:00:53.460
This is similar, in case you have
ever played with PHP, for example.

12
00:00:53.460 --> 00:00:57.989
You mix, and I'm talking about playing
vanilla PHP without the framework,

13
00:00:57.989 --> 00:00:59.949
without the templating system.

14
00:00:59.949 --> 00:01:02.102
You write the dot PHP file and

15
00:01:02.102 --> 00:01:06.061
you mix with HTML with PHP
code in the middle, okay?

16
00:01:06.061 --> 00:01:09.470
It's kind of the grandfather
of templating.

17
00:01:10.650 --> 00:01:12.194
Anyway, so in this case,

18
00:01:12.194 --> 00:01:16.139
we're going to create an HTML file
with some Go code in the middle.

19
00:01:17.840 --> 00:01:23.970
Some, it's a template actually, so it's
limited, it's restricted to some ideas.

20
00:01:23.970 --> 00:01:27.067
It's actually in the HTML package, and

21
00:01:27.067 --> 00:01:33.040
the template can include expressions
using double curly braces.

22
00:01:33.040 --> 00:01:34.677
So if you are coming from Angular,

23
00:01:34.677 --> 00:01:38.240
you will feel at home because that's
how interpolation works in Angular.

24
00:01:39.320 --> 00:01:40.870
So you will see this
in action in a second.

25
00:01:43.070 --> 00:01:45.482
Also, there are some options
where you can trim spaces,

26
00:01:45.482 --> 00:01:49.260
I will show you what that means
because it's not completely clear.

27
00:01:49.260 --> 00:01:54.318
We can mix actions and
pipelines as well, this is more complex,

28
00:01:54.318 --> 00:01:59.564
we will just cover the basics,
the fundamentals, but you can call

29
00:01:59.564 --> 00:02:06.080
functions and you can use pipes to define
how the output will look like, okay?

30
00:02:06.080 --> 00:02:10.080
On Angular you also have pipes on
templates that are kind of similar.

31
00:02:10.080 --> 00:02:15.462
So for example, you wanna render a price,
well, you can parse that through A pipe

32
00:02:15.462 --> 00:02:21.500
that will add the currency, the character,
like the dollar sign or the euro sign.

33
00:02:21.500 --> 00:02:25.302
And then you can parse for another pipe
that can format the number with two

34
00:02:25.302 --> 00:02:30.220
digits, and then you can go for another
pipe that can convert into Bitcoin.

35
00:02:30.220 --> 00:02:34.237
So you have a pipeline and
you are parsing that data,

36
00:02:34.237 --> 00:02:37.530
the input for different processes.

37
00:02:37.530 --> 00:02:42.513
So you have that,
you can do if-else not in the Go file,

38
00:02:42.513 --> 00:02:46.770
but in a template and
you can do range for loops.

39
00:02:49.280 --> 00:02:56.140
Okay, so it's like an ng4 for Angular or
when you're doing a map on JSX.

40
00:02:56.140 --> 00:03:02.545
And you can also call functions
that you have on your Go file.

41
00:03:02.545 --> 00:03:05.095
So, let's make one.

42
00:03:05.095 --> 00:03:08.898
So for that,
we're going to create another folder,

43
00:03:08.898 --> 00:03:12.700
I could create the template
in the public folder, but

44
00:03:12.700 --> 00:03:17.710
if I do that, it's going to be
served if someone knows the URL.

45
00:03:17.710 --> 00:03:21.950
So yeah, I don't wanna make that public,
so I can create a new folder.

46
00:03:21.950 --> 00:03:27.090
Maybe we can call that templates and
I can create a template for an index file.

47
00:03:27.090 --> 00:03:28.830
What's the extension for templates?

48
00:03:28.830 --> 00:03:30.698
We don't have one.

49
00:03:30.698 --> 00:03:36.390
Some people are just saying HTML,
some people say dot template,

50
00:03:36.390 --> 00:03:40.450
dot Tmpl, wherever, yeah, it's up to you.

51
00:03:40.450 --> 00:03:45.379
And for example, I will take my index HML
and I will copy and paste my index HML and

52
00:03:45.379 --> 00:03:47.670
I will convert that into a template.

53
00:03:49.150 --> 00:03:52.280
Because it doesn't,
BS code doesn't know what that is.

54
00:03:52.280 --> 00:03:57.215
At least you can, if you save it actually,
if you look at the bottom BS code,

55
00:03:57.215 --> 00:04:02.234
actually saying that this is a gold
template file, so it's recognizing that

56
00:04:02.234 --> 00:04:07.016
we are in Go and that extension is one
of the tension that we typically use,

57
00:04:07.016 --> 00:04:11.303
but you can change that to HTML in
case you wanna see colors again.

58
00:04:11.303 --> 00:04:14.470
That's actually, your change has your IDE.

59
00:04:14.470 --> 00:04:18.246
So it recognizes that file as HTML, or

60
00:04:18.246 --> 00:04:22.550
you can just keep it at as a Go template.

61
00:04:22.550 --> 00:04:24.517
So then it will support,

62
00:04:24.517 --> 00:04:30.610
basically when you open that thing it
can recognize the tags and and so on.

63
00:04:30.610 --> 00:04:32.902
Anyway, I didn't want that.

64
00:04:37.815 --> 00:04:42.115
So, let me just put HTML so
we can see, this.

65
00:04:42.115 --> 00:04:45.645
So as I mentioned,
I'm going to get rid of the script yes, so

66
00:04:45.645 --> 00:04:49.330
we won't have JavaScript,
I don't want JavaScript in this.

67
00:04:49.330 --> 00:04:55.737
I have here an article that I will
use it as some kind of Templates,

68
00:04:55.737 --> 00:04:59.720
okay, so we can kind of feel that thing.

69
00:04:59.720 --> 00:05:02.766
So once idea at any time in this template,

70
00:05:02.766 --> 00:05:06.690
I can open double curly braces and
add an expression.

71
00:05:09.560 --> 00:05:14.410
Typically, what you're going
to do is you're going to

72
00:05:14.410 --> 00:05:18.227
receive an object that
you use here as your,

73
00:05:18.227 --> 00:05:23.300
let's say it's kind of your
source of information, so.

74
00:05:24.790 --> 00:05:27.790
But that's a template, so
it's still empty, right?

75
00:05:27.790 --> 00:05:29.000
How do you use a template?

76
00:05:29.000 --> 00:05:31.400
Well, here we have an example
of how the code looks like,

77
00:05:31.400 --> 00:05:33.650
we're going to write a code anyway.

78
00:05:33.650 --> 00:05:37.500
So, we're training you to create
a new template using Factory.

79
00:05:37.500 --> 00:05:40.895
So template.new from the template package.

80
00:05:40.895 --> 00:05:46.190
Template.new, we set the name,
and then we can parse a template.

81
00:05:46.190 --> 00:05:47.060
What's a template?

82
00:05:47.060 --> 00:05:50.160
A string,
that we can read from the file as well.

83
00:05:50.160 --> 00:05:54.866
So it can be a string that we set
statically or we can read it from a file.

84
00:05:54.866 --> 00:06:01.760
And then at some points,
we will have expressions.

85
00:06:01.760 --> 00:06:06.227
And actually when we execute,
we can execute the template,

86
00:06:06.227 --> 00:06:10.081
we're going to parse an object,
actually a value,

87
00:06:10.081 --> 00:06:15.770
that is going to be used within
the template as the source of data.

88
00:06:15.770 --> 00:06:17.580
And you access that value with the dot.

89
00:06:18.720 --> 00:06:22.500
So if it's a structure, you use dot and
then the name of the property.

90
00:06:22.500 --> 00:06:24.580
In this case,
it's going to take the name of the person.

91
00:06:24.580 --> 00:06:27.620
Does that make sense?

92
00:06:27.620 --> 00:06:31.000
You can execute a template to a string.

93
00:06:31.000 --> 00:06:33.180
So you can receive a string in return.

94
00:06:33.180 --> 00:06:37.310
And you can also write the template
directly to the output of a writer or

95
00:06:37.310 --> 00:06:38.080
for server.

96
00:06:39.770 --> 00:06:42.330
So there are several methods available.

97
00:06:42.330 --> 00:06:45.330
Do you wanna get the string,
that mean the result of a string?

98
00:06:45.330 --> 00:06:48.449
You can use that for
example for sending emails,

99
00:06:48.449 --> 00:06:53.390
you have a template, and
then you can send bulk emails, emailing.

100
00:06:53.390 --> 00:06:58.039
And then you have the template, and the
template can include some kind of logic

101
00:06:58.039 --> 00:07:03.290
inside, such as if conditions and
loops, that's kind of the idea, okay?

102
00:07:03.290 --> 00:07:07.063
So just to play with this,
we are going to back to our goal and

103
00:07:07.063 --> 00:07:09.484
we're going to add another handler.

104
00:07:09.484 --> 00:07:13.489
Let's create the function first,
let's call this handle template.

105
00:07:15.100 --> 00:07:20.140
It's the same as before, we're going to
receive a brighter, so response writer.

106
00:07:20.140 --> 00:07:25.018
And we have also the request,
the http request, handle template,

107
00:07:25.018 --> 00:07:29.383
and we are going to call that
handle template, for example,

108
00:07:29.383 --> 00:07:34.518
we are going to handle that and
we can just for now, for playing with this

109
00:07:34.518 --> 00:07:39.760
as a playground, we can say forward
slash template, handle template.

110
00:07:43.209 --> 00:07:47.779
Okay, so yeah, later we'll replace
that directly with the index HTML.

111
00:07:47.779 --> 00:07:54.340
So you will remove, we will delete
the index HTML from the Public folder and

112
00:07:54.340 --> 00:07:58.000
we will just serve the template version.

113
00:08:00.110 --> 00:08:03.021
So, the first thing that
we're going to do, first,

114
00:08:03.021 --> 00:08:06.180
I can create a template from a string,
okay?

115
00:08:06.180 --> 00:08:09.913
But in this case I'm not going to
create the template as a string.

116
00:08:09.913 --> 00:08:13.799
I'm saying this, I guess you can say,
okay, my template is HTML and

117
00:08:13.799 --> 00:08:18.087
then I'm going to write the name of
the user, but I'm not going to do that for

118
00:08:18.087 --> 00:08:20.645
that I have a file,
an external file, okay?

119
00:08:20.645 --> 00:08:27.398
So instead of doing that,
I'm going to call template.ParseFiles

120
00:08:27.398 --> 00:08:32.609
that is going to do all the file
system thing for me and

121
00:08:32.609 --> 00:08:37.348
I'm going to parse templates/index.tmpl,

122
00:08:37.348 --> 00:08:42.086
and it's going to return
me the HTML template,

123
00:08:42.086 --> 00:08:46.486
let's call it HMTL, and a possible error.

124
00:08:46.486 --> 00:08:51.366
In case the file is not there, we don't
have permissions to read the file or

125
00:08:51.366 --> 00:08:52.842
something like that.

126
00:08:52.842 --> 00:08:55.967
We can validate the template
before trying to use it.

127
00:08:55.967 --> 00:09:01.311
There is a, just to know,
there is a template Must,

128
00:09:01.311 --> 00:09:06.545
where you parse a template,
and it will actually.

129
00:09:06.545 --> 00:09:11.715
It's like a wrapper, so
it's kind of a high order function that

130
00:09:11.715 --> 00:09:16.984
actually verifies if the template
is valid before executing it,

131
00:09:16.984 --> 00:09:19.953
because if you execute a template and

132
00:09:19.953 --> 00:09:25.729
then template is invalid it will
crash your app, it will panic, okay?

133
00:09:25.729 --> 00:09:31.399
So to avoid that we can first go through
Must but I wanna make it simple first.

134
00:09:31.399 --> 00:09:35.498
So if we can actually do something, so if.

135
00:09:37.623 --> 00:09:41.270
Error is not nil is because
we have a problem, okay?

136
00:09:43.580 --> 00:09:49.672
We do have an error, so something that
we can do at this point is we can write.

137
00:09:49.672 --> 00:09:51.662
We do have a Write Header,

138
00:09:51.662 --> 00:09:56.366
in the Write Header we can actually
send an HTTP status quo, so

139
00:09:56.366 --> 00:10:01.629
we can say, for example,
Internal Server Error, that's 500.

140
00:10:01.629 --> 00:10:04.930
Something has happened in our server,
it cannot serve you the file.

141
00:10:04.930 --> 00:10:11.690
And you can also write some text to
the output as well, as slice of byte.

142
00:10:11.690 --> 00:10:18.460
So you can say something like
Internal Server Error, like that?

143
00:10:18.460 --> 00:10:23.315
If not, it's because we do have
the template, okay, so we can use cells or

144
00:10:23.315 --> 00:10:26.750
we can just continue and
maybe call return.

145
00:10:26.750 --> 00:10:31.074
Or, if everything is correct
then I can try to execute,

146
00:10:31.074 --> 00:10:35.122
the template, and
the first argument for execute,

147
00:10:35.122 --> 00:10:39.633
we have execute to a string or
we can execute to the writer.

148
00:10:39.633 --> 00:10:42.382
And what's the writer?

149
00:10:42.382 --> 00:10:49.640
The argument that we will receive here,
the output of the server, and.

150
00:10:50.940 --> 00:10:55.042
We have parsed w there.

151
00:10:55.042 --> 00:11:01.530
And then the object, that we wanna parse,
for example, for now I can just say Test.

152
00:11:01.530 --> 00:11:08.888
I can parse a string, the value that
they want the template to parse, okay?

153
00:11:08.888 --> 00:11:14.550
So, our our index the template has,
this is going to be invalid.

154
00:11:14.550 --> 00:11:17.520
Actually, let's see what
happens if I execute this.

155
00:11:17.520 --> 00:11:23.524
So if I stop my server and run again,
and now I'm going to localhost forward

156
00:11:23.524 --> 00:11:28.978
slash template, I'm receiving
an internal server error, okay?

157
00:11:28.978 --> 00:11:29.478
Why?

158
00:11:31.420 --> 00:11:35.022
Because, the template is invalid.

159
00:11:36.969 --> 00:11:39.600
Why?
Because we have that empty expression,

160
00:11:39.600 --> 00:11:41.930
that's why it's not working.

161
00:11:41.930 --> 00:11:47.514
By the way, if you look at the cursor
here, I have a Write Header error,

162
00:11:47.514 --> 00:11:52.370
it's saying me that,
I'm saying the 500 is not working.

163
00:11:52.370 --> 00:11:53.270
Why?

164
00:11:53.270 --> 00:11:57.000
Because I'm sending the Header
after writing content.

165
00:11:58.290 --> 00:12:04.370
And on HTTP, it is a buffer,
the code goes first.

166
00:12:04.370 --> 00:12:08.369
So if you have already sent
somebody to the client,

167
00:12:08.369 --> 00:12:10.981
you cannot change the HTTP code.

168
00:12:10.981 --> 00:12:12.250
Does it make sense?

169
00:12:12.250 --> 00:12:14.714
So if you wanna send that status code,

170
00:12:14.714 --> 00:12:19.710
you need to do it first before
sending any content to the browser.

171
00:12:19.710 --> 00:12:22.489
That's how the HTTP protocol works.

172
00:12:28.163 --> 00:12:33.990
So what if we wanna render that
Test string within the template?

173
00:12:33.990 --> 00:12:36.006
It's kind of weird, it dot.

174
00:12:38.029 --> 00:12:42.510
Dot is actually the value that
you have received as input.

175
00:12:44.020 --> 00:12:48.669
You can see well dot is just that,
what if I wanna parse something else,

176
00:12:48.669 --> 00:12:50.810
like a second, value?

177
00:12:50.810 --> 00:12:54.010
You cannot, it's only one value,
that's the idea.

178
00:12:54.010 --> 00:12:58.030
Well, you can create a structure with
everything you need to parse, or

179
00:12:58.030 --> 00:12:59.440
you can parse in a slice.

180
00:13:00.780 --> 00:13:02.447
Make sense?

181
00:13:02.447 --> 00:13:04.835
Typically, you create an object and

182
00:13:04.835 --> 00:13:09.623
a structure that you parse to the template
and you render for everything.

183
00:13:09.623 --> 00:13:10.430
That makes sense?

184
00:13:12.633 --> 00:13:19.620
In some way shouldn't see that,
WriteHeader error anymore.

185
00:13:19.620 --> 00:13:25.970
So if I refresh, you can see I have my
Test string embedded into the HTML.

186
00:13:25.970 --> 00:13:31.840
So it's actually in the source code
of the HTML, we have that Test string

187
00:13:31.840 --> 00:13:38.000
that is coming from a Go value,
a Go variable, okay, makes sense?

188
00:13:38.000 --> 00:13:40.844
So that's the basics of a template.

189
00:13:40.844 --> 00:13:46.079
It's not a big deal, that dot looks weird,
but at the end you get used to.

