WEBVTT

1
00:00:00.092 --> 00:00:05.012
Okay, so
let's go back a little bit to slides and

2
00:00:05.012 --> 00:00:10.783
let's move into the next hot topic,
type definitions.

3
00:00:10.783 --> 00:00:14.648
Because so far I mentioned that
a package can include constants,

4
00:00:14.648 --> 00:00:18.034
a package can include variables,
it can use functions.

5
00:00:18.034 --> 00:00:22.759
We have already seen those three,
and also getting to types.

6
00:00:22.759 --> 00:00:25.921
And now it's time to talk
about type declarations.

7
00:00:25.921 --> 00:00:31.317
So first, we're going to start with
the simplest types that you can make.

8
00:00:31.317 --> 00:00:37.161
You can create new types based on other
types, or aliases to those types.

9
00:00:37.161 --> 00:00:38.518
Let's see how that works.

10
00:00:38.518 --> 00:00:45.313
To create a type alias,
you type the name you want equals,

11
00:00:45.313 --> 00:00:50.305
and the object, the target of that alias,

12
00:00:50.305 --> 00:00:54.621
or you can create a new type based on.

13
00:00:54.621 --> 00:01:00.350
And the only difference here is if you
have equals or not, so be careful.

14
00:01:00.350 --> 00:01:02.202
It changes everything, okay?

15
00:01:02.202 --> 00:01:04.501
So we're going to see this in action.

16
00:01:04.501 --> 00:01:09.615
For now, I will keep playing in this code,
but just for playing a little bit,

17
00:01:09.615 --> 00:01:14.198
and then we'll create another
project to understand types better.

18
00:01:14.198 --> 00:01:18.096
So we have a data folder here,
so I can use that data.

19
00:01:18.096 --> 00:01:20.644
I'm put now some go files here.

20
00:01:20.644 --> 00:01:23.226
So I'm going to create types.go.

21
00:01:23.226 --> 00:01:26.205
That's the file name
needs to have that name.

22
00:01:26.205 --> 00:01:31.258
No, file names are custom names,
so any name.

23
00:01:31.258 --> 00:01:34.765
The only problem is that it
has to have package data.

24
00:01:34.765 --> 00:01:36.592
And then, I'm going to define a type.

25
00:01:36.592 --> 00:01:38.020
Let's start with an alias.

26
00:01:38.020 --> 00:01:43.313
I would say integer equals to int.

27
00:01:43.313 --> 00:01:48.213
So now, you can create
the variable x of type integer.

28
00:01:48.213 --> 00:01:52.344
Is just an alias, it's just that.

29
00:01:52.344 --> 00:01:53.736
Why do you want that?

30
00:01:53.736 --> 00:01:57.307
It doesn't feel like interesting,
but sometimes you have some.

31
00:01:57.307 --> 00:02:01.594
For example, when you have slices,

32
00:02:01.594 --> 00:02:07.831
you can say array of strings and
or a slice of strings.

33
00:02:07.831 --> 00:02:09.131
And say okay it's this.

34
00:02:12.139 --> 00:02:18.454
And I know it still doesn't feel so
complicated, but then you can say Jason,

35
00:02:18.454 --> 00:02:24.592
and Jason you say it's a map with strings
as key because they have strings.

36
00:02:24.592 --> 00:02:27.996
And as a value, let's say for
now it's the json of a strings only.

37
00:02:27.996 --> 00:02:33.566
So and then use json as a type,
it's an alias.

38
00:02:33.566 --> 00:02:36.697
You are not changing
the nature of that type.

39
00:02:36.697 --> 00:02:39.229
It's just an alias, okay?

40
00:02:39.229 --> 00:02:45.753
But if you remove the equals,
it seems the same, but it's not the same.

41
00:02:45.753 --> 00:02:50.832
It's creating a new type,
and why is that useful?

42
00:02:50.832 --> 00:02:52.831
Typically is to create semantics.

43
00:02:52.831 --> 00:02:58.155
For example, one typical example
is we create a distance type.

44
00:02:58.155 --> 00:03:04.549
I say, okay, the distance is a float 32 or
64, it doesn't matter.

45
00:03:04.549 --> 00:03:06.204
You can even express a semantic on that.

46
00:03:06.204 --> 00:03:11.349
For example, it's a distance in miles or
kilometers, or meters and yards.

47
00:03:11.349 --> 00:03:12.978
You define the union, right?

48
00:03:12.978 --> 00:03:18.325
So now every time you use distance
as a type, you know what it is.

49
00:03:18.325 --> 00:03:23.008
It's not just a float that you're
on doesn't have semantics, okay?

50
00:03:23.008 --> 00:03:27.521
It has more information,
more semantic information is still afloat.

51
00:03:27.521 --> 00:03:28.642
Yeah, it is.

52
00:03:28.642 --> 00:03:31.436
So the nature is still afloat.

53
00:03:31.436 --> 00:03:35.336
But now, you are adding more
semantics to that type.

54
00:03:35.336 --> 00:03:40.347
And what is important now is that,
now when you are creating a variable,

55
00:03:40.347 --> 00:03:43.315
let me create a function
here to test this.

56
00:03:43.315 --> 00:03:48.889
I can create the variable d and if I say
something like this, so what's the type

57
00:03:48.889 --> 00:03:53.977
of d it's complaining because I'm
not using d, but what's the type?

58
00:03:53.977 --> 00:03:55.915
Is it distance?

59
00:03:55.915 --> 00:03:58.095
No, it's going to be float.

60
00:03:59.461 --> 00:04:04.836
But what if, I say something like this?

61
00:04:04.836 --> 00:04:08.377
And because it's a type,
it has its own converter.

62
00:04:11.082 --> 00:04:15.611
So now,
it's creating a distance with that value.

63
00:04:15.611 --> 00:04:18.705
Okay, what's the distance and number?

64
00:04:18.705 --> 00:04:21.960
And you understand better what's this,

65
00:04:21.960 --> 00:04:26.145
what's the advantage of this
in two minutes, but for

66
00:04:26.145 --> 00:04:31.261
now do you have any question on
creating your own types like this?

67
00:04:33.226 --> 00:04:36.252
You create a new type based on other type.

68
00:04:36.252 --> 00:04:38.696
No, okay.

69
00:04:38.696 --> 00:04:41.645
You're waiting for
those two minutes, right?

70
00:04:41.645 --> 00:04:42.394
Those are methods.

71
00:04:42.394 --> 00:04:46.723
In fact, let's get rid of the slide and
do this directly.

72
00:04:46.723 --> 00:04:48.306
So what's the point on this?

73
00:04:48.306 --> 00:04:52.391
I can add methods to my type.

74
00:04:52.391 --> 00:04:56.880
So for example, let's say it's in miles,
I could do this.

75
00:04:56.880 --> 00:05:01.685
I can say, okay, let's create the function
with the name two kilometers.

76
00:05:04.420 --> 00:05:05.746
Okay, but that's a function.

77
00:05:05.746 --> 00:05:08.855
Yeah, I can receive a distance.

78
00:05:08.855 --> 00:05:11.006
I will refactor this.

79
00:05:11.006 --> 00:05:14.442
Disclaimer, I receive a distance in miles.

80
00:05:14.442 --> 00:05:19.122
So let's call these miles and
then I need to return.

81
00:05:19.122 --> 00:05:22.415
Do you know how to make the calculation?

82
00:05:22.415 --> 00:05:24.168
No, no one, come on.

83
00:05:24.168 --> 00:05:25.473
&gt;&gt; 6, 2.

84
00:05:25.473 --> 00:05:28.378
&gt;&gt; 1 mile kilometers.

85
00:05:28.378 --> 00:05:31.406
We can ask, of course,
ChatGPT to do this for us, right?

86
00:05:31.406 --> 00:05:33.551
But yeah, we just need to.

87
00:05:33.551 --> 00:05:35.150
&gt;&gt; Maybe it'll be right.

88
00:05:35.150 --> 00:05:38.404
&gt;&gt; Maybe, yeah, you're right,
because it's our numbers.

89
00:05:38.404 --> 00:05:40.443
So first of all,
I need to return something.

90
00:05:40.443 --> 00:05:42.655
So I need to say what I'm going to return.

91
00:05:42.655 --> 00:05:44.795
What will it be another distance?

92
00:05:44.795 --> 00:05:48.377
What if I'm setting that this is in miles?

93
00:05:48.377 --> 00:05:50.322
No, but I can add another.

94
00:05:50.322 --> 00:05:55.626
I can create another type that
is distance in kilometers,

95
00:05:55.626 --> 00:06:02.131
but it's also flow 64, and
then to return one of those I can convert,

96
00:06:06.167 --> 00:06:10.540
This multiplied by distance like so.

97
00:06:10.540 --> 00:06:11.268
We do have a problem.

98
00:06:11.268 --> 00:06:12.009
What's the problem?

99
00:06:12.009 --> 00:06:13.802
We have a type problem.

100
00:06:13.802 --> 00:06:15.283
&gt;&gt; It should be miles.

101
00:06:15.283 --> 00:06:17.521
&gt;&gt; It says it's miles.

102
00:06:17.521 --> 00:06:20.554
Yeah, you're right.

103
00:06:20.554 --> 00:06:28.005
It's miles, not distant because
that's the identifier goes first.

104
00:06:28.005 --> 00:06:29.474
It seems like it's working.

105
00:06:29.474 --> 00:06:30.412
Yeah, it's working.

106
00:06:30.412 --> 00:06:32.101
Is that the method?

107
00:06:32.101 --> 00:06:33.502
No, it's a function, okay?

108
00:06:33.502 --> 00:06:34.451
It's a normal function.

109
00:06:34.451 --> 00:06:36.809
It's a global function,
in fact, it cannot export this.

110
00:06:36.809 --> 00:06:39.974
I need to use capital T,
if I wanna export it.

111
00:06:39.974 --> 00:06:42.792
We know that, but it's a normal function.

112
00:06:42.792 --> 00:06:44.637
Nothing fancy here.

113
00:06:44.637 --> 00:06:45.518
What's going on?

114
00:06:45.518 --> 00:06:48.459
Well, actually, I can change this.

115
00:06:48.459 --> 00:06:51.323
Can you see this miles,
distance declaration?

116
00:06:51.323 --> 00:06:56.131
I can take it from the arguments and
convert that into

117
00:06:56.131 --> 00:07:01.484
a special argument that,
brace yourself for the syntax,

118
00:07:01.484 --> 00:07:07.068
g oes between the func keyword and
the function name, okay?

119
00:07:07.068 --> 00:07:10.131
It's not a return type.

120
00:07:10.131 --> 00:07:14.909
We open parentheses here and
we add that there.

121
00:07:14.909 --> 00:07:16.873
So what is this?

122
00:07:16.873 --> 00:07:17.859
Is this a return type?

123
00:07:17.859 --> 00:07:20.555
No, the return type is still this one.

124
00:07:20.555 --> 00:07:21.408
Is this an argument?

125
00:07:21.408 --> 00:07:22.845
No, the arguments are here.

126
00:07:22.845 --> 00:07:28.301
It's a special argument, and
this is actually a method.

127
00:07:28.301 --> 00:07:31.880
What is a method that now,
I can take my distance and

128
00:07:31.880 --> 00:07:35.554
use the dot syntax to
convert that into kilometers?

129
00:07:38.832 --> 00:07:40.760
Okay, well, what?

130
00:07:40.760 --> 00:07:46.191
So this is my variable
distance of type distance.

131
00:07:46.191 --> 00:07:50.271
Well, I added a method,
think about if it's a class,

132
00:07:50.271 --> 00:07:55.446
like adding a method to the distance
class, but it's not the class.

133
00:07:55.446 --> 00:08:00.345
So I'm creating a method and
this is how here you select In

134
00:08:00.345 --> 00:08:04.134
which type you're injecting that method.

135
00:08:04.134 --> 00:08:06.684
This is similar in
JavaScript to prototype,

136
00:08:06.684 --> 00:08:09.982
when you're adding functions
to the prototype of a type.

137
00:08:09.982 --> 00:08:16.618
In C-sharp, we do have something similar
as well, when you can inject methods.

138
00:08:16.618 --> 00:08:18.716
Extension method, I think that's a name.

139
00:08:18.716 --> 00:08:21.673
You can also do this on Swift,
on Objective-C.

140
00:08:21.673 --> 00:08:25.285
So there are many languages
where you can do this,

141
00:08:25.285 --> 00:08:27.872
you can add methods to other types.

142
00:08:27.872 --> 00:08:32.142
So then, do we have two kilometers?

143
00:08:32.142 --> 00:08:36.334
So now this is distance,
this is kilometers, so that's my variable.

144
00:08:36.334 --> 00:08:37.955
Do I have two kilometres?

145
00:08:37.955 --> 00:08:39.829
No, because that's a different type.

146
00:08:39.829 --> 00:08:43.436
I could add two miles to go back.

147
00:08:43.436 --> 00:08:49.937
So in that case, I integrate another
method two miles, that will parallely so

148
00:08:49.937 --> 00:08:55.254
this right, so I need to put it
here because it's the division,

149
00:08:55.254 --> 00:08:59.901
or the order is important here and
it's not kilometer.

150
00:08:59.901 --> 00:09:03.290
I need to return distance, right?

151
00:09:03.290 --> 00:09:08.028
And I don't wanna apply
this to the distance type.

152
00:09:08.028 --> 00:09:13.529
I need to apply this to the other type,
and let's call that kilometers, not miles.

153
00:09:16.441 --> 00:09:17.243
Does it make sense?

154
00:09:17.243 --> 00:09:25.264
So here, you define to which type
you're going to inject something.

155
00:09:25.264 --> 00:09:28.986
So you can create methods for
the type that you have just created.

