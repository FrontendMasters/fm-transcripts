WEBVTT

1
00:00:00.074 --> 00:00:04.563
So, it's complaining because we are not
using the response or the error object.

2
00:00:04.563 --> 00:00:06.453
We know how that works.

3
00:00:06.453 --> 00:00:09.109
Well, first let's start
with if there is any error.

4
00:00:09.109 --> 00:00:13.397
So if we do have an error,
it means that the error is not nil.

5
00:00:13.397 --> 00:00:15.367
What should we do?

6
00:00:15.367 --> 00:00:21.614
Actually, what we need to do is
to follow the same pattern back.

7
00:00:21.614 --> 00:00:27.980
So because we are a function,
it's responsibility is to get the rate.

8
00:00:27.980 --> 00:00:32.491
It shouldn't decide what to do in
the UI in case there is an error.

9
00:00:32.491 --> 00:00:34.110
So we are splitting responsibility.

10
00:00:34.110 --> 00:00:38.960
My responsibility ends on getting
the rate from a JSON and that's all.

11
00:00:38.960 --> 00:00:43.376
So if I cannot do that,
I should pass that back to the caller.

12
00:00:43.376 --> 00:00:44.333
I cannot do that.

13
00:00:44.333 --> 00:00:49.229
So maybe you can just return no rate and

14
00:00:49.229 --> 00:00:54.126
the same error that we have received.

15
00:00:54.126 --> 00:00:59.180
The problem that we have,
remember I mentioned I will

16
00:00:59.180 --> 00:01:05.019
make a small change here is that
I cannot return nil because if I

17
00:01:05.019 --> 00:01:10.521
say that I need a rate it's
expecting me to return a rate and

18
00:01:10.521 --> 00:01:15.721
you can say well,
how can I respond with an empty rate?

19
00:01:15.721 --> 00:01:19.629
That that's like crazy new empty right,
I can do that but

20
00:01:19.629 --> 00:01:24.435
if you actually like to send nil you
actually need to change the rate how

21
00:01:24.435 --> 00:01:26.730
you just send a pointer to a rate.

22
00:01:28.954 --> 00:01:30.359
And a pointer can be nil.

23
00:01:30.359 --> 00:01:35.876
So in this case, the pointer,
remember, is just a memory address

24
00:01:35.876 --> 00:01:40.914
of another variable,
another object, another instance.

25
00:01:40.914 --> 00:01:45.287
So that's why typically, you will see
that's why when you get into the Get

26
00:01:45.287 --> 00:01:48.841
specification, they also have
the after there, the star.

27
00:01:48.841 --> 00:01:54.656
So every time you are following this
pattern and you are returning structures,

28
00:01:54.656 --> 00:01:58.748
typically you use the star so
you can return nil, okay?

29
00:01:58.748 --> 00:02:01.805
That's just that not the big deal anyway.

30
00:02:01.805 --> 00:02:07.206
Okay, so if not, well, I don't need
the else because we are returning anyway.

31
00:02:07.206 --> 00:02:10.605
This is just how you
like to see if else is,

32
00:02:10.605 --> 00:02:15.281
anyway, it seems like we
are ready to continue, right?

33
00:02:15.281 --> 00:02:17.549
So, we have a response.

34
00:02:17.549 --> 00:02:18.763
Okay, makes sense?

35
00:02:18.763 --> 00:02:24.223
So, first, if we have a response,
it means that the server has just answer

36
00:02:24.223 --> 00:02:29.269
with something, but maybe it's
not the answer we're looking for.

37
00:02:29.269 --> 00:02:33.831
When we are using htpp, for
example, maybe it's an 404,

38
00:02:33.831 --> 00:02:38.920
it means that it doesn't,
what you're looking for is not there, or

39
00:02:38.920 --> 00:02:44.392
maybe the service is not working
properly and it's giving error 500.

40
00:02:44.392 --> 00:02:49.637
So in those cases,
I should check first if the status

41
00:02:49.637 --> 00:02:53.942
code of the response is
the one that I like.

42
00:02:53.942 --> 00:02:58.483
Do you know which is the number for
everything is okay?

43
00:02:58.483 --> 00:02:59.505
It's 200.

44
00:02:59.505 --> 00:03:04.133
You can use the number or
we do have constants within

45
00:03:04.133 --> 00:03:08.977
the HTTP package representing
all the possible, but

46
00:03:08.977 --> 00:03:14.465
not all the possible most of
the possible http status codes,

47
00:03:14.465 --> 00:03:16.740
so I can say http status.

48
00:03:16.740 --> 00:03:20.660
Okay, do we have all of them?

49
00:03:20.660 --> 00:03:25.493
We have most of them but
HTTP codes are changing with time.

50
00:03:25.493 --> 00:03:28.344
So for example,
now we have a new one called 103.

51
00:03:28.344 --> 00:03:33.562
It's called early hints that I think
it's not there, and then the list of

52
00:03:33.562 --> 00:03:39.306
constants that is for performance and
also we have another one, that is 451.

53
00:03:39.306 --> 00:03:43.740
That I think it's not there, so 451.

54
00:03:45.188 --> 00:03:46.258
Let's go.

55
00:03:48.490 --> 00:03:52.856
This one is unavailable for legal reasons.

56
00:03:52.856 --> 00:03:58.818
Does anyone know why they're
using this number 451?

57
00:03:58.818 --> 00:04:01.783
Fahrenheit 451, what is that?

58
00:04:01.783 --> 00:04:05.753
It's too hot I know.

59
00:04:05.753 --> 00:04:10.451
It's a book from Ray Bradbury
where they were,

60
00:04:10.451 --> 00:04:16.097
actually, I think it's
the point on where paper burns.

61
00:04:16.097 --> 00:04:18.596
Because they were burning books there.

62
00:04:18.596 --> 00:04:21.556
So the idea is that
the government is burning

63
00:04:21.556 --> 00:04:22.655
websites
&gt;&gt; [LAUGH]

64
00:04:22.655 --> 00:04:24.024
&gt;&gt; And that's kind of the idea.

65
00:04:24.024 --> 00:04:29.348
Okay, so, well,
that status code is not in the constant,

66
00:04:29.348 --> 00:04:33.396
but you can still use a number anyway,
okay?

67
00:04:33.396 --> 00:04:39.630
418 HTTP status code.

68
00:04:39.630 --> 00:04:42.564
I'm a teapot.

69
00:04:42.564 --> 00:04:45.668
No one gets, okay, what's that?

70
00:04:45.668 --> 00:04:48.791
Yeah, because it's permanently a teapot.

71
00:04:48.791 --> 00:04:52.028
Yeah, someone thought that was funny.

72
00:04:52.028 --> 00:04:54.102
Anyway, do we have, maybe we can check.

73
00:04:54.102 --> 00:04:55.264
Do we have a status teapot?

74
00:04:55.264 --> 00:04:55.943
I'm a teapot?

75
00:04:55.943 --> 00:04:57.227
I don't think so.

76
00:04:57.227 --> 00:05:00.874
No teapot, StatusTeapot.

77
00:05:00.874 --> 00:05:05.259
Yeah, we have it, yeah we have it,
we have a concept for teapot.

78
00:05:05.259 --> 00:05:06.153
Cool.

79
00:05:06.153 --> 00:05:08.615
Well, okay, it's fine for us.

80
00:05:08.615 --> 00:05:14.946
So that means that yeah,
we should have the result here.

81
00:05:14.946 --> 00:05:15.874
Where is the result?

82
00:05:15.874 --> 00:05:18.169
We do have a body.

83
00:05:18.169 --> 00:05:22.396
The first problem that we have is
the body is not what we are expecting.

84
00:05:22.396 --> 00:05:26.277
It's not a string, and
we are talking the type.

85
00:05:26.277 --> 00:05:30.838
It's not even bytes, it's a read closer.

86
00:05:30.838 --> 00:05:35.234
I don't know what that is, but
it has to do with working with strings.

87
00:05:35.234 --> 00:05:37.733
I'm not sure if you have
experience working with strings.

88
00:05:37.733 --> 00:05:42.921
In this case, it's because
actually http works over TCP or

89
00:05:42.921 --> 00:05:45.618
UDP, it doesn't matter, but

90
00:05:45.618 --> 00:05:50.619
actually you are getting not
the whole response at once.

91
00:05:50.619 --> 00:05:53.932
The TCP stack is giving
you the response in

92
00:05:53.932 --> 00:05:58.294
chunks as soon as they
are available from the network.

93
00:05:58.294 --> 00:06:01.300
That's why it's a progressive download.

94
00:06:01.300 --> 00:06:04.611
So you can actually
stream that here as well.

95
00:06:04.611 --> 00:06:07.922
So you can receive chunks
of the JSON response and

96
00:06:07.922 --> 00:06:11.657
maybe partially analyze them or
something like that.

97
00:06:11.657 --> 00:06:13.331
It's a lot of work.

98
00:06:13.331 --> 00:06:15.313
You need to have a real use case for that.

99
00:06:15.313 --> 00:06:18.937
Most of the time,
we wanna have the whole thing.

100
00:06:18.937 --> 00:06:21.150
So we wanna wait for the whole thing.

101
00:06:21.150 --> 00:06:23.685
So to do that, we can do it manually.

102
00:06:23.685 --> 00:06:27.178
So we can read byte by byte
until it gets to the end.

103
00:06:27.178 --> 00:06:28.741
So there is an end of file.

104
00:06:28.741 --> 00:06:32.158
There is a signal saying,
okay, we are done,

105
00:06:32.158 --> 00:06:35.849
we don't have any more
bytes here in this buffer.

106
00:06:35.849 --> 00:06:40.644
But we do have an IO package.

107
00:06:40.644 --> 00:06:44.336
Where we have input output
tools such as read all.

108
00:06:44.336 --> 00:06:48.821
Read all will receive
a reader with a stream and

109
00:06:48.821 --> 00:06:55.960
it will read everything until the end,
synchronously in one execution.

110
00:06:55.960 --> 00:07:00.417
So that means that the thread will
be there Helder until the sun.

111
00:07:00.417 --> 00:07:04.457
But we know that if you wanna get
over that we have Go routines, and

112
00:07:04.457 --> 00:07:06.009
we will get there later.

113
00:07:06.009 --> 00:07:07.659
But I mean that the thread
will wait there.

114
00:07:07.659 --> 00:07:11.419
So this is like in
JavaScript having an await.

115
00:07:11.419 --> 00:07:16.231
It will be there waiting for
the response and

116
00:07:16.231 --> 00:07:21.180
read all returns on a slice of bytes or
error.

117
00:07:21.180 --> 00:07:25.130
So we are still using
the same technique here.

118
00:07:25.130 --> 00:07:29.445
So we have,
let's say we can call these data or

119
00:07:29.445 --> 00:07:33.658
bodyBytes and
we have another error like so.

120
00:07:33.658 --> 00:07:38.757
Can I reuse err as a bio name?

121
00:07:38.757 --> 00:07:40.145
How do you think?

122
00:07:40.145 --> 00:07:41.939
&gt;&gt; It's in a new blocks.

123
00:07:41.939 --> 00:07:42.975
&gt;&gt; It's in a new block.

124
00:07:42.975 --> 00:07:46.409
So actually, I can do this,
so I can create a new one but

125
00:07:46.409 --> 00:07:51.342
having mine now I won't have access to
the other one to the outer one within that

126
00:07:51.342 --> 00:07:52.870
if maybe that's okay.

127
00:07:52.870 --> 00:07:56.030
In this case it's okay because
I already past that moment.

128
00:07:56.030 --> 00:08:01.045
So I'm not going back to that error,
okay but have that in mind.

129
00:08:01.045 --> 00:08:04.395
So in this case we have device, okay, so

130
00:08:04.395 --> 00:08:09.818
we can try to where we can say if
another if we don't have an error,

131
00:08:09.818 --> 00:08:15.758
if we do have an error, we're actually
going to again return or error.

132
00:08:15.758 --> 00:08:18.776
Maybe, what's a possible error here?

133
00:08:18.776 --> 00:08:22.438
Well, maybe the connection was closed,
so the server was responding, but for

134
00:08:22.438 --> 00:08:24.145
some reason the connection closed.

135
00:08:24.145 --> 00:08:29.267
I mean, your connection, your Wi-Fi is
off, just in the middle of the connection

136
00:08:29.267 --> 00:08:33.678
or the server is down, or something
happened, or you have a firewall.

137
00:08:33.678 --> 00:08:39.622
Something happened that actually stopped
the flow of bytes before ending.

138
00:08:39.622 --> 00:08:41.983
And that's kind of the possibility.

139
00:08:41.983 --> 00:08:44.696
And then we have the bodyBytes in and

140
00:08:44.696 --> 00:08:48.863
a slice of bytes,
we can get it as a string if we want to.

141
00:08:48.863 --> 00:08:54.827
As a JSON string just by
calling the string converter.

142
00:08:54.827 --> 00:09:01.598
It receives the bytes and it will convert
that into a string using UTF eight.

143
00:09:01.598 --> 00:09:07.803
So just to see if this is working, we can
just print this for debugging purposes.

144
00:09:07.803 --> 00:09:10.180
So we can print that JSON.

145
00:09:12.897 --> 00:09:13.915
Okay.

146
00:09:13.915 --> 00:09:18.516
Well, before even trying to test this,
there is an error here at

147
00:09:18.516 --> 00:09:23.222
the end of the function because
I'm not returning a rate, okay?

148
00:09:23.222 --> 00:09:25.205
Because I should return a rate.

149
00:09:25.205 --> 00:09:30.407
So I, before continuing this,
by the way, I need to also put

150
00:09:30.407 --> 00:09:35.822
analysis here in case the status
code is not okay, make sense?

151
00:09:35.822 --> 00:09:40.325
So, let's finish at least this part so,
we can see if something is working.

152
00:09:40.325 --> 00:09:41.602
What we can do here?

153
00:09:41.602 --> 00:09:44.690
I need to return another error, okay?

154
00:09:44.690 --> 00:09:47.629
Like this.
So, this is a network error, or

155
00:09:47.629 --> 00:09:54.566
the domain doesn't work, the URL is down,
the URL is wrong, this is okay, was okay.

156
00:09:54.566 --> 00:09:59.032
The headers were okay but when we tried
to get the body, something happened.

157
00:09:59.032 --> 00:10:03.781
And now we have the server
respond with a non 200 response.

158
00:10:03.781 --> 00:10:07.902
So in this case,
we need to do something similar.

159
00:10:07.902 --> 00:10:12.595
But the problem is that I'm not
sure if you spot the problem.

160
00:10:12.595 --> 00:10:16.540
If we just return nil, so
no response and error,

161
00:10:16.540 --> 00:10:21.174
the problem is that this error
will actually be this one.

162
00:10:21.174 --> 00:10:25.147
That is actually nil,
because we actually had a response,

163
00:10:25.147 --> 00:10:29.129
not the one that we were expecting but
we do have a response.

164
00:10:29.129 --> 00:10:32.683
So in this case,
we are returning nil, nil.

165
00:10:32.683 --> 00:10:36.281
So the color will never
know what happened here,

166
00:10:36.281 --> 00:10:39.370
which of the two options do you wanna use?

167
00:10:39.370 --> 00:10:45.412
So because we don't have actually
an error option, an error instance,

168
00:10:45.412 --> 00:10:50.774
when the server responded with a 404,
we need to create one.

169
00:10:50.774 --> 00:10:53.628
So we need to create a response, an error.

170
00:10:53.628 --> 00:10:55.433
How to create an error.

171
00:10:55.433 --> 00:10:59.497
Well, to create an error,

172
00:10:59.497 --> 00:11:03.746
there is an errors package.

173
00:11:03.746 --> 00:11:07.065
And the errors package,
you can create a new error.

174
00:11:07.065 --> 00:11:13.018
However, most of the time,
we use the format

175
00:11:13.018 --> 00:11:18.041
package that has an error f function.

176
00:11:18.041 --> 00:11:23.397
So every time you see an F suffix,
it has to do with format.

177
00:11:23.397 --> 00:11:25.009
The format string.

178
00:11:25.009 --> 00:11:29.854
Okay, so typically you can create
a new error with this string saying,

179
00:11:29.854 --> 00:11:32.453
for example, status code received.

180
00:11:32.453 --> 00:11:36.931
And then you say, I wanna put here
a value, it can be also a digit, and

181
00:11:36.931 --> 00:11:38.953
then you pass the status code.

182
00:11:38.953 --> 00:11:43.594
So it's like you're creating
your own error messages.

183
00:11:43.594 --> 00:11:48.965
Okay, so now finally,
after the last else, we can return what?

184
00:11:48.965 --> 00:11:51.764
Our object, so we actually need to return.

185
00:11:51.764 --> 00:11:52.619
All right, so

186
00:11:52.619 --> 00:11:56.908
we need to agree to rate remember our
idea was to create the rate option.

187
00:11:56.908 --> 00:11:59.819
So, we create the rate, we say, rate,

188
00:11:59.819 --> 00:12:04.959
how to create an object from
an A structure an instance that's actually

189
00:12:04.959 --> 00:12:09.946
the right name is instance,
I'm creating an instance of an object.

190
00:12:09.946 --> 00:12:13.610
Data types the rate and
then we can use the constructor.

191
00:12:13.610 --> 00:12:17.315
Remember, structures have constructors, so

192
00:12:17.315 --> 00:12:22.328
I can set the currency is coming
from the string that I have here.

193
00:12:22.328 --> 00:12:25.097
So I have the currency.

194
00:12:25.097 --> 00:12:28.179
That's the first argument
from the argument and

195
00:12:28.179 --> 00:12:32.850
the second value is the price, and
I should get the price from somewhere.

196
00:12:32.850 --> 00:12:36.187
I didn't pass the JSON yet,
so for now let's say 20,

197
00:12:36.187 --> 00:12:38.469
just to see if something's working.

198
00:12:38.469 --> 00:12:40.102
And I will try to return the rate.

199
00:12:44.911 --> 00:12:49.213
But if I try to return the rate,
it doesn't work.

200
00:12:49.213 --> 00:12:51.544
Do you know why?

201
00:12:51.544 --> 00:12:55.201
By the way first I should return rate and
nil, nil forever okay.

202
00:12:55.201 --> 00:13:00.020
So because I always need
to return to elements,

203
00:13:00.020 --> 00:13:03.998
okay, but still the rate complaints.

204
00:13:03.998 --> 00:13:04.665
What's the problem?

205
00:13:04.665 --> 00:13:07.203
What's the type of my return?

206
00:13:07.203 --> 00:13:07.780
&gt;&gt; Pointer?

207
00:13:07.780 --> 00:13:09.065
&gt;&gt; A pointer.

208
00:13:09.065 --> 00:13:13.103
And the rate is not the pointer,
it's the actual rate.

209
00:13:13.103 --> 00:13:18.389
How do I get a pointer of
an instance of a variable?

210
00:13:18.389 --> 00:13:21.859
The ampersand.

211
00:13:21.859 --> 00:13:26.867
And also, I need to use here colon equals,
because it's not actually a variable.

212
00:13:26.867 --> 00:13:28.763
Or you add bar.

213
00:13:28.763 --> 00:13:29.284
That's a prefix.

214
00:13:29.284 --> 00:13:30.880
It is the same, but
you need one or the other.

215
00:13:30.880 --> 00:13:33.546
O bar or colon equals.

216
00:13:35.531 --> 00:13:36.512
Okay?

217
00:13:36.512 --> 00:13:41.474
We are still not parsing the trace and
getting the value from it, okay?

218
00:13:41.474 --> 00:13:47.126
But also, I have a warning here.

219
00:13:47.126 --> 00:13:49.558
So if you look what the warning says,

220
00:13:49.558 --> 00:13:53.970
look at that error a string
shouldn't be capitalized.

221
00:13:53.970 --> 00:13:56.428
Why?
I don't know.

222
00:13:56.428 --> 00:13:58.245
If you ask me that's a weird reason.

223
00:13:58.245 --> 00:14:03.137
But they asked me not to capitalize the,
I'm talking about the error message.

224
00:14:03.137 --> 00:14:09.119
He says, can you just use lowercase s for
the error message.

225
00:14:09.119 --> 00:14:10.020
I don't know the reason.

226
00:14:10.020 --> 00:14:12.837
Maybe there is a reason why, but it works.

227
00:14:12.837 --> 00:14:18.370
But they like, I mean,
Go likes all error messages in lowercase.

228
00:14:18.370 --> 00:14:19.953
It's a string at the end, right?

229
00:14:19.953 --> 00:14:20.913
But anyway.

