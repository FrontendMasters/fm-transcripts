WEBVTT

1
00:00:00.000 --> 00:00:02.360
So I just need to create a folder.

2
00:00:02.360 --> 00:00:05.462
So let me get into the right folder.

3
00:00:05.462 --> 00:00:11.150
We are going to call this project,
let's call it crypto masters.

4
00:00:11.150 --> 00:00:14.407
We're going to get the current price or

5
00:00:14.407 --> 00:00:18.660
rate from cryptocurrencies,
from a web service.

6
00:00:18.660 --> 00:00:23.991
So we are going to do crypto masters,
by the way, this is going to be also still

7
00:00:23.991 --> 00:00:29.257
a console application, and then we
are going to get into creating a server.

8
00:00:29.257 --> 00:00:32.857
So this is going to be how to
consume data from the web, and

9
00:00:32.857 --> 00:00:36.395
then we are going to see how
to serve that data to the web.

10
00:00:36.395 --> 00:00:40.770
So we create the folder the next
step is always to create the module.

11
00:00:40.770 --> 00:00:45.115
So we open the terminal, go mod init and

12
00:00:45.115 --> 00:00:50.513
the name of the project that
we can make a URL based

13
00:00:50.513 --> 00:00:56.320
name such as
frontendmasters.com/go/crypto.

14
00:00:56.320 --> 00:01:00.433
Remember, this is just creating
a go.mod file in the root, and

15
00:01:00.433 --> 00:01:03.872
typically the next step is
to create a main.go file.

16
00:01:03.872 --> 00:01:08.300
Remember, the name of the file
doesn't matter, it can be any name.

17
00:01:08.300 --> 00:01:13.980
The important part is to have the package
main and a function with the name main.

18
00:01:13.980 --> 00:01:17.900
That's the only required step here.

19
00:01:17.900 --> 00:01:21.500
So we will use a simple web service.

20
00:01:21.500 --> 00:01:26.373
There are a lot of web services to get
data on cryptocurrencies, but we're going

21
00:01:26.373 --> 00:01:31.330
to use one from cex, c-e-x, that has
the advantage that doesn't need any key.

22
00:01:31.330 --> 00:01:34.018
So we can just point to the URL and
we get the JSON.

23
00:01:34.018 --> 00:01:35.565
So it's pretty simple.

24
00:01:35.565 --> 00:01:40.213
But if not, there are a lot of APIs out
there, but you need to probably sign up to

25
00:01:40.213 --> 00:01:43.330
get a key and
then use the key as part of your request.

26
00:01:43.330 --> 00:01:46.190
So to keep things simple,
we are going to use that one.

27
00:01:46.190 --> 00:01:51.570
But first we will start thinking about
the structure that we are going to use.

28
00:01:51.570 --> 00:01:53.679
So we're going to create
the data structure.

29
00:01:53.679 --> 00:01:55.872
But actually,
you're going to start pretty simple, so

30
00:01:55.872 --> 00:01:57.114
it's not going to be a big deal.

31
00:01:57.114 --> 00:02:00.765
So I'm going to create a new structure
that we can call this currency, or rate,

32
00:02:00.765 --> 00:02:01.920
or something like that.

33
00:02:01.920 --> 00:02:05.142
I can do that in the main package but
we know that typically,

34
00:02:05.142 --> 00:02:09.718
it's not a good idea to work with the main
package unless it's a very simple script,

35
00:02:09.718 --> 00:02:11.538
and you know what you're doing.

36
00:02:11.538 --> 00:02:13.330
But most of the time we want to package.

37
00:02:13.330 --> 00:02:16.580
The package, remember,
it's just a folder with a name.

38
00:02:16.580 --> 00:02:23.250
We can call these currency, or
rate, or data, data types, model.

39
00:02:23.250 --> 00:02:24.650
In this case, it's up to you.

40
00:02:24.650 --> 00:02:29.247
We don't have one way of naming things
here, so it's wherever you like,

41
00:02:29.247 --> 00:02:30.742
let's say data types.

42
00:02:30.742 --> 00:02:33.172
And within that package,
I will create a file.

43
00:02:33.172 --> 00:02:37.200
Remember that file names
don't matter here.

44
00:02:37.200 --> 00:02:41.666
So I can just say that
here I'm going to write

45
00:02:41.666 --> 00:02:46.150
the cryptocurrency or maybe say data.go.

46
00:02:46.150 --> 00:02:47.520
The name doesn't matter.

47
00:02:47.520 --> 00:02:50.340
The only important part is
the package declaration.

48
00:02:50.340 --> 00:02:52.364
That's the only important part here.

49
00:02:52.364 --> 00:02:54.670
And then I can create here my structure.

50
00:02:54.670 --> 00:02:56.457
I'm going to create a new type.

51
00:02:56.457 --> 00:03:02.004
I can call it rate, I can call it crypto
rate, currency rate, it's your name, but

52
00:03:02.004 --> 00:03:07.420
we know now, we are confident that we need
to start with a capital letter, okay?

53
00:03:07.420 --> 00:03:09.940
So we know that, that's clear.

54
00:03:09.940 --> 00:03:14.873
So, let's call that rate, and it's going
to be instruct that we'll have for

55
00:03:14.873 --> 00:03:19.881
now just the Currency, capital C, because
we know that properties, if we want

56
00:03:19.881 --> 00:03:25.073
those properties to be accessed from the
outside, we will need a capital letter.

57
00:03:25.073 --> 00:03:32.282
That's gonna be just a string,
the code of the currency, and the price.

58
00:03:32.282 --> 00:03:36.587
Remember that when we're
working with prices,

59
00:03:36.587 --> 00:03:42.260
we can use float 32 or
64 based on the precision that we want.

60
00:03:42.260 --> 00:03:45.873
We're talking about cryptocurrency,
we have a lot of decimals.

61
00:03:45.873 --> 00:03:50.064
It depends on the currency, but
maybe it's a good idea to use float64.

62
00:03:50.064 --> 00:03:55.447
But anyway, even if you're working
with prices in US dollars or euros,

63
00:03:55.447 --> 00:04:00.319
that you have only two decimals,
float32 will be good enough.

64
00:04:00.319 --> 00:04:05.366
However, I mentioned that when you
are using the JSON encoder and

65
00:04:05.366 --> 00:04:10.800
decoding tool from Go, it will take
numbers as float 64 by default.

66
00:04:10.800 --> 00:04:13.729
So if you set your data float 32,

67
00:04:13.729 --> 00:04:18.583
it will be more efficient in
terms of memory management.

68
00:04:18.583 --> 00:04:23.383
But then you will need a conversion
step every time you are reading from or

69
00:04:23.383 --> 00:04:27.632
creating JSON, if you're reading
from JSON or create in JSON,

70
00:04:27.632 --> 00:04:31.420
you will need to convert
those float 64 to 32, okay?

71
00:04:31.420 --> 00:04:34.237
That is not a big deal but
you have in mind that.

72
00:04:34.237 --> 00:04:38.517
So that's why most of the time we shall
say unless you have a very specific

73
00:04:38.517 --> 00:04:41.747
requirements on performance and
memory management,

74
00:04:41.747 --> 00:04:43.798
we use float 64 most of the time.

75
00:04:43.798 --> 00:04:44.991
Okay, that's all.

76
00:04:44.991 --> 00:04:46.138
So we don't need anything else here.

77
00:04:46.138 --> 00:04:48.561
So actually it's pretty simple.

78
00:04:48.561 --> 00:04:52.780
So now I'm going to create a new package.

79
00:04:52.780 --> 00:04:56.611
So this is for data types,
we can leave it like that.

80
00:04:56.611 --> 00:05:00.229
I'm going to create a new
package to another folder and

81
00:05:00.229 --> 00:05:01.890
we can call this the API.

82
00:05:01.890 --> 00:05:05.083
So the folder should be in the root.

83
00:05:05.083 --> 00:05:13.526
So we're going to here store the API
related functions, types, and variables.

84
00:05:13.526 --> 00:05:18.475
New file there and we can call this
cex.go because that's the name of

85
00:05:18.475 --> 00:05:20.962
the provider we're going to use.

86
00:05:20.962 --> 00:05:26.962
And here we are going to get then
some information from the API.

87
00:05:26.962 --> 00:05:31.863
So the first package, API and
then I'm going to create an export that

88
00:05:31.863 --> 00:05:35.170
function because it's
going to be exported.

89
00:05:35.170 --> 00:05:37.050
It will start with capital letter.

90
00:05:37.050 --> 00:05:43.240
So it can be get rate, for example, that
we will receive a currency as a string.

91
00:05:43.240 --> 00:05:48.579
And it will return something, we will
see then what we are going to return.

92
00:05:48.579 --> 00:05:52.180
We should return a right option.

93
00:05:52.180 --> 00:05:54.050
So the one that we have just created.

94
00:05:54.050 --> 00:05:56.902
So an instance of the structure
that we have just created.

95
00:05:56.902 --> 00:06:01.726
So I'm going to refactor this in
a couple of minutes, so it's okay if you

96
00:06:01.726 --> 00:06:06.550
wanna follow me, but I have in mind
that I will mix a little change later,

97
00:06:06.550 --> 00:06:08.783
that of course you can do it also.

98
00:06:08.783 --> 00:06:10.970
First, if I say Rate, it doesn't work.

99
00:06:10.970 --> 00:06:12.061
Does anyone know why?

100
00:06:15.152 --> 00:06:16.745
Yep.
&gt;&gt; Not in the same package.

101
00:06:16.745 --> 00:06:18.253
&gt;&gt; It's not in the same package.

102
00:06:18.253 --> 00:06:21.489
So Rate it's in a different folder,
different package, so

103
00:06:21.489 --> 00:06:22.700
I have to import that.

104
00:06:22.700 --> 00:06:25.781
And I mean,
I don't need to import it manually,

105
00:06:25.781 --> 00:06:29.475
at least what I need is to start
writing the prefix of that.

106
00:06:29.475 --> 00:06:32.886
So it could be data type, data types.

107
00:06:32.886 --> 00:06:39.020
If you press Return and Save,
it will add the import for you.

108
00:06:39.020 --> 00:06:41.376
But have in mind that we
need to import the package.

109
00:06:41.376 --> 00:06:45.773
Remember that we are importing
the package, not individual elements or

110
00:06:45.773 --> 00:06:47.007
individual names.

111
00:06:47.007 --> 00:06:48.820
I'm not importing rate.

112
00:06:48.820 --> 00:06:51.216
I'm importing everything from the package.

113
00:06:51.216 --> 00:06:54.015
Everything that was exported on
that package is available here.

114
00:06:54.015 --> 00:06:59.849
So if you like to have control,
more control on what you are importing,

115
00:06:59.849 --> 00:07:02.392
maybe you need more packages.

116
00:07:02.392 --> 00:07:05.186
So you need to change how
you're thinking about packages.

117
00:07:05.186 --> 00:07:10.426
Maybe you can create really small packages
just for niche features of your app.

118
00:07:10.426 --> 00:07:15.242
So don't use packages as you're used
to on other languages because there

119
00:07:15.242 --> 00:07:18.517
you have other abilities
to control visibility.

120
00:07:18.517 --> 00:07:22.894
But here, the only thing we have is
package and sport that are non sport and

121
00:07:22.894 --> 00:07:23.750
that's all.

122
00:07:23.750 --> 00:07:29.015
Okay, so here what we need to
them is that we need to use

123
00:07:29.015 --> 00:07:34.175
the http system, so
we need to make an http request.

124
00:07:34.175 --> 00:07:38.738
Fortunately for us, Go has http
directly built in in the language,

125
00:07:38.738 --> 00:07:44.437
in the standard library, so we don't need
an additional library, it is part of Go.

126
00:07:44.437 --> 00:07:50.492
We cannot build a Go application
that has no http library access.

127
00:07:50.492 --> 00:07:52.510
It's there, by default.

128
00:07:52.510 --> 00:07:55.761
And for that we have an http package.

129
00:07:55.761 --> 00:08:01.174
By the way, it's http, but
that also means http with SSL.

130
00:08:01.174 --> 00:08:03.181
So HTTPS as well.

131
00:08:03.181 --> 00:08:07.166
We don't have a different one for
https, it's the same, okay, http.

