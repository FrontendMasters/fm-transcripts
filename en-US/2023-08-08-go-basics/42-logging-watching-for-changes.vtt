WEBVTT

1
00:00:00.320 --> 00:00:02.258
Now, something important,

2
00:00:02.258 --> 00:00:07.061
that is going to be something you need
to get used to in case this is the first

3
00:00:07.061 --> 00:00:10.947
time you're creating a web
server with a system like this.

4
00:00:10.947 --> 00:00:15.536
What happens if I, for example,
add a clinician mark, so

5
00:00:15.536 --> 00:00:19.579
a couple of exclamation mark,
I save, I refresh?

6
00:00:19.579 --> 00:00:23.569
And I'm not getting those
exclamation mark, why?

7
00:00:23.569 --> 00:00:24.130
&gt;&gt; Restart.

8
00:00:24.130 --> 00:00:27.363
I need to restart the server
because the server was compiled and

9
00:00:27.363 --> 00:00:29.010
is in memories being executed.

10
00:00:29.010 --> 00:00:34.480
So I need to stop the server, CTRL C and
run it again, and then refresh the page.

11
00:00:34.480 --> 00:00:37.493
We have a question in the chat.

12
00:00:37.493 --> 00:00:42.228
&gt;&gt; How do we enable debugging
in Go HTTP to write requests,

13
00:00:42.228 --> 00:00:45.470
response, or counsel, or logging?

14
00:00:45.470 --> 00:00:49.264
&gt;&gt; Okay, so to enable debugging,
actually, it works the same.

15
00:00:49.264 --> 00:00:51.430
It doesn't matter if it's HTTP or not.

16
00:00:51.430 --> 00:00:54.970
If you're using VS Code,
you can enable debugging, for

17
00:00:54.970 --> 00:00:58.680
example by setting
a breakpoint that's one way.

18
00:00:58.680 --> 00:01:05.150
And then you can go to the debug menu that
you have here and you can run and debug.

19
00:01:05.150 --> 00:01:10.220
If you click run and debug, it will start
your app but now in debugging mode and

20
00:01:10.220 --> 00:01:15.700
you have all the tools that you used
to have when you are working with Go.

21
00:01:15.700 --> 00:01:19.300
Have in mind you have to
do more with VS code.

22
00:01:19.300 --> 00:01:24.541
So, if you need to be in the main.go file,
if you're in a different file,

23
00:01:24.541 --> 00:01:30.134
the debugger will try to run that file,
and that file has no entry point, okay.

24
00:01:30.134 --> 00:01:35.561
So, if you have that situation,
you need to create a launch.json file.

25
00:01:35.561 --> 00:01:38.726
That's something not from Go but
from VS code.

26
00:01:38.726 --> 00:01:43.355
It's a configuration file where
you can say to VS Code, hey,

27
00:01:43.355 --> 00:01:46.480
VS Code, I want to always run the main.

28
00:01:46.480 --> 00:01:47.730
So start with the main.

29
00:01:47.730 --> 00:01:50.700
It doesn't matter where I am,
where I'm putting the breakpoints.

30
00:01:50.700 --> 00:01:52.750
I need you to start from the main.

31
00:01:52.750 --> 00:01:56.692
And if then you go to the browser,
you refresh.

32
00:01:56.692 --> 00:02:00.581
If it gets a breakpoint, you will stop and
you will be able to debug.

33
00:02:04.952 --> 00:02:11.685
Okay, so you can see it's pretty
simple how you create a server.

34
00:02:11.685 --> 00:02:16.193
I mean you can create little functions
like this but most of the time,

35
00:02:16.193 --> 00:02:20.174
we create functions outside or
even in a different package.

36
00:02:20.174 --> 00:02:23.384
So I'm going to move
that function outside,

37
00:02:23.384 --> 00:02:28.872
when I move the function to the outside
in I need to set a name for the function,

38
00:02:28.872 --> 00:02:34.699
so let's call that HandleHello, and then
I need to remove the parenthesis now and

39
00:02:34.699 --> 00:02:38.955
I will pass,
HandleHello as the second argument.

40
00:02:38.955 --> 00:02:41.045
Be very careful here.

41
00:02:41.045 --> 00:02:43.125
Handlehello, has no codes.

42
00:02:43.125 --> 00:02:45.409
I'm not executing the function.

43
00:02:45.409 --> 00:02:48.361
I'm passing the function as an argument.

44
00:02:48.361 --> 00:02:51.022
That's possible in Go.

45
00:02:51.022 --> 00:02:55.332
So if you have a function,
you can pass a function as an argument.

46
00:02:55.332 --> 00:02:59.293
In this case, you are passing
the function to the HTTP default handler.

47
00:03:01.282 --> 00:03:02.278
Okay, makes sense?

48
00:03:04.716 --> 00:03:11.008
In this case, you can see we are handling
directly over the HTTP package.

49
00:03:11.008 --> 00:03:13.460
It's kind of a global server, right?

50
00:03:13.460 --> 00:03:18.954
So it's me, it's weird the first time you
see that I know creating a server I'm

51
00:03:18.954 --> 00:03:24.858
just like, defining handlers for the whole
package, which forms a lot of pressure,

52
00:03:24.858 --> 00:03:29.206
is okay, but technically,
because you can open go routines.

53
00:03:29.206 --> 00:03:34.081
You could have more than one web server
running at the same time in different go

54
00:03:34.081 --> 00:03:39.181
routines, not in the same one because
it's complicated when you're listen for

55
00:03:39.181 --> 00:03:41.513
one, you cannot execute more code.

56
00:03:41.513 --> 00:03:44.221
So after this line you are there waiting.

57
00:03:44.221 --> 00:03:49.921
So I cannot open another one in the next
line because it will never be executed.

58
00:03:49.921 --> 00:03:50.759
Does that make sense?

59
00:03:50.759 --> 00:03:53.033
But I know I can use go routines.

60
00:03:53.033 --> 00:03:55.442
Well, in that case right now,

61
00:03:55.442 --> 00:04:00.269
I'm actually adding handlers to
some kind of a global scope.

62
00:04:00.269 --> 00:04:01.634
I can change that, and for

63
00:04:01.634 --> 00:04:05.182
that is the second needle that I
didn't even explain what that was.

64
00:04:05.182 --> 00:04:06.595
It was called the handler.

65
00:04:06.595 --> 00:04:09.068
So instead of working globally,

66
00:04:09.068 --> 00:04:13.581
I can actually create something
that makes things simpler.

67
00:04:13.581 --> 00:04:17.816
So I can create an object,
so I can call this a server.

68
00:04:17.816 --> 00:04:21.680
And the object, it's known as a ServMux.

69
00:04:21.680 --> 00:04:25.440
It's a multiplexer.

70
00:04:25.440 --> 00:04:27.370
So for that, we use a factory.

71
00:04:27.370 --> 00:04:29.410
Do you remember what a factory is?

72
00:04:29.410 --> 00:04:32.490
It's just a function
starting with the name new.

73
00:04:32.490 --> 00:04:33.760
So it's a new.

74
00:04:33.760 --> 00:04:37.198
We have a NewServMux, like that.

75
00:04:37.198 --> 00:04:41.662
And now we are going to instead
of add the hunter to the http,

76
00:04:41.662 --> 00:04:44.893
we're going to add the handler to server.

77
00:04:44.893 --> 00:04:48.333
And then instead of nil,
add the second argument,

78
00:04:48.333 --> 00:04:51.138
we're going to pass that server option.

79
00:04:51.138 --> 00:04:52.680
It's working in the same way.

80
00:04:52.680 --> 00:04:55.800
We haven't changed anything more than now.

81
00:04:55.800 --> 00:04:58.160
It's better coding.

82
00:04:58.160 --> 00:05:00.605
So we are adding the handlers
to one special server, and

83
00:05:00.605 --> 00:05:02.990
then we can have another
one with other handlers.

84
00:05:02.990 --> 00:05:04.090
Does it make sense?

85
00:05:04.090 --> 00:05:06.870
It's the same, it will work the same.

86
00:05:06.870 --> 00:05:10.670
If I stop and run again,
it's still working.

87
00:05:10.670 --> 00:05:14.910
By the way, this thing of stopping and
running seems like a lot of work, okay.

88
00:05:15.930 --> 00:05:19.560
Is Go giving me any other solution,
actually, no.

89
00:05:20.910 --> 00:05:24.260
We don't have any other solution from go,
okay?

90
00:05:24.260 --> 00:05:26.310
So you need to stop because why?

91
00:05:26.310 --> 00:05:28.350
Because go is building.

92
00:05:28.350 --> 00:05:31.490
So if you make a change,
we need to make a new bill.

93
00:05:31.490 --> 00:05:35.722
So all the tools that are available
are not from go, are from the community or

94
00:05:35.722 --> 00:05:40.570
even from other solutions, you can use
things like nodemon that is from node.js.

95
00:05:40.570 --> 00:05:42.665
So if you search nodemon for Go,

96
00:05:42.665 --> 00:05:48.030
you will find here you have five waves to
live reload your Go applications, okay.

97
00:05:49.230 --> 00:05:50.760
But this is not from Go.

98
00:05:50.760 --> 00:05:53.770
So these tools are actually
detecting your file system.

99
00:05:53.770 --> 00:05:59.980
And when there is a new.go file or
something you have changed, it's stopping.

100
00:05:59.980 --> 00:06:02.240
The server and
running the server again, okay?

101
00:06:02.240 --> 00:06:04.590
But it's a manual thing, but with a tool.

102
00:06:05.850 --> 00:06:08.253
There is one, for
example, it's pretty old.

103
00:06:08.253 --> 00:06:12.606
It's one of the first
one that is called gene.

104
00:06:12.606 --> 00:06:15.149
And if you are thinking
on a gene framework,

105
00:06:15.149 --> 00:06:19.615
that's not the one you will see what,
we'll, see what that is in a minute and

106
00:06:19.615 --> 00:06:22.185
why it's called, but this is not that one.

107
00:06:22.185 --> 00:06:26.424
It's this one library,
low utility for a Go, okay.

108
00:06:26.424 --> 00:06:31.790
It's a simple command-line utility for
live reloading Go web applications.

109
00:06:31.790 --> 00:06:36.545
You install it and then instead of using
run, you use gin run, and gin is like

110
00:06:36.545 --> 00:06:41.301
a listener instead of server that is
observing the file system and every time

111
00:06:41.301 --> 00:06:46.970
you change it, it will stop the execution,
and build it and run it again, okay?

112
00:06:46.970 --> 00:06:49.230
We don't need to use them for today.

113
00:06:49.230 --> 00:06:53.570
But have in mind that you need to
find a solution to that on your own.

114
00:06:56.920 --> 00:06:59.914
Okay, something similar
happens on node.js.

115
00:07:02.470 --> 00:07:04.720
Cool, well, what's next?

116
00:07:04.720 --> 00:07:08.905
Typically, the next step is to
serve a folder, like for example,

117
00:07:08.905 --> 00:07:11.090
I could have a public folder here.

118
00:07:12.650 --> 00:07:14.810
Isn't that that every folder is a package?

119
00:07:14.810 --> 00:07:15.530
No, actually no.

120
00:07:15.530 --> 00:07:18.180
If you don't have Go files inside,
it's not a package.

121
00:07:19.860 --> 00:07:22.510
How do you know,
you don't know it's your organization.

122
00:07:22.510 --> 00:07:27.430
So if you have folders,
without go files, it's not the package.

123
00:07:27.430 --> 00:07:31.300
In fact, the compiler will
just ignore that completely.

124
00:07:32.630 --> 00:07:36.190
So it's not like every folder
will must be a go bucket, no.

125
00:07:37.290 --> 00:07:40.260
And here we can actually add files.

126
00:07:40.260 --> 00:07:46.760
Yeah, and I can create an index HTML,
images and we can try to serve that.

127
00:07:46.760 --> 00:07:51.313
I already have, we are not going
to waste time writing HTML code.

128
00:07:51.313 --> 00:07:57.223
So I already have a website ready
to serve that is actually here.

129
00:07:57.223 --> 00:08:02.999
If you go to github.com/ for
my first man my last name/go fundamentals,

130
00:08:02.999 --> 00:08:08.498
you have the front and master museum
there is also a there's a zip file,

131
00:08:08.498 --> 00:08:12.733
so if you want very quickly
you can download the zip file

132
00:08:15.318 --> 00:08:21.393
It's just HTML, CSS ready to serve.

133
00:08:21.393 --> 00:08:24.705
Okay, so you go there,
you can download the file.

134
00:08:24.705 --> 00:08:29.938
I have them here already available.

135
00:08:29.938 --> 00:08:34.689
Go to Go, femmuseum, public.

136
00:08:34.689 --> 00:08:41.194
They will just get those
files into my public folder.

137
00:08:41.194 --> 00:08:43.566
I will replace my index.html.

138
00:08:46.467 --> 00:08:48.213
And for
that it doesn't matter what it does, but

139
00:08:48.213 --> 00:08:49.730
you will see it in action in a minute.

140
00:08:49.730 --> 00:08:50.870
It's a website.

141
00:08:50.870 --> 00:08:52.768
If you're doing a back end,
you don't care about the front end.

142
00:08:52.768 --> 00:08:56.699
So you just do I know,
someone is giving me a public folder,

143
00:08:56.699 --> 00:09:01.201
I just need to serve that folder,
that's our own responsibility.

