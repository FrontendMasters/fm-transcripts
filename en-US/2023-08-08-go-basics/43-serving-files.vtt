WEBVTT

1
00:00:00.000 --> 00:00:02.717
Now, we need to see how to solve that.

2
00:00:02.717 --> 00:00:08.221
Well, to do that,
what we need to do is to access a utility

3
00:00:08.221 --> 00:00:14.894
function from the HTTP package that
will let us create a file server.

4
00:00:14.894 --> 00:00:21.003
A file server will automatically serve to
the user all the files in the file system.

5
00:00:21.003 --> 00:00:23.500
Be careful the folder you pick for that.

6
00:00:23.500 --> 00:00:27.571
We don't want user to get access
to our whole file system.

7
00:00:27.571 --> 00:00:31.869
So for that, we create that object,

8
00:00:31.869 --> 00:00:38.810
it's http.FileServer, and
we need to specify the root.

9
00:00:38.810 --> 00:00:44.700
And for that, we're going to just
talk to our http package and

10
00:00:44.700 --> 00:00:47.430
we'll ask for a directory.

11
00:00:47.430 --> 00:00:53.870
And the directory will be the public
folder that we have here, okay?

12
00:00:53.870 --> 00:00:58.575
So that's a kind of a handle that
will automatically look into the file

13
00:00:58.575 --> 00:01:02.498
system for every request to see
if the file is there or not.

14
00:01:02.498 --> 00:01:07.382
So we don't need to handle this manually
like reading the URL, go into the file

15
00:01:07.382 --> 00:01:12.573
system, see if it's there or not, because
it's a pretty common pattern, okay?

16
00:01:12.573 --> 00:01:15.058
You do that directly from the framework.

17
00:01:15.058 --> 00:01:17.900
In Node.js, you don't have this
automatic thing, for example.

18
00:01:17.900 --> 00:01:25.346
You have it in Express.js, in a static
thing, but that's the framework, okay?

19
00:01:25.346 --> 00:01:28.852
So then we are going
to add another handle.

20
00:01:28.852 --> 00:01:34.919
And we're going to say that, for the root
folder, I will use fs as my handle.

21
00:01:34.919 --> 00:01:39.959
But in this case,
it's not a function, it's a type.

22
00:01:39.959 --> 00:01:44.610
So instead of using HandleFunc,
we're going to use just Handle.

23
00:01:44.610 --> 00:01:48.970
So there are two ways to handle routes.

24
00:01:48.970 --> 00:01:54.171
Here, with sub nukes that we have in Go,
we can parse 100 as a function or

25
00:01:54.171 --> 00:01:59.721
we can parse a Type that should conform
to an interface, remember interfaces?

26
00:01:59.721 --> 00:02:04.740
That means that that Type should have
a method that at the end is a function.

27
00:02:04.740 --> 00:02:09.000
So, okay, and in this case,
we're using that version.

28
00:02:09.000 --> 00:02:12.664
By the way, can we call more than
one time handler, HandlerFunc?

29
00:02:12.664 --> 00:02:14.732
Yes, as many as you want.

30
00:02:14.732 --> 00:02:19.668
And actually,
the system will look to the pattern and

31
00:02:19.668 --> 00:02:26.371
we'll pick the first one that matches
like most of the routing systems.

32
00:02:26.371 --> 00:02:30.099
So now, I run my app again.

33
00:02:30.099 --> 00:02:35.143
I go back to Chrome,
well, let's open it here.

34
00:02:35.143 --> 00:02:39.504
3333, close the other tabs as well.

35
00:02:39.504 --> 00:02:44.351
And if I try Hello,
I'm still seeing my handle function.

36
00:02:44.351 --> 00:02:50.313
And if I go to the route,
I'm getting the Front Team Museum

37
00:02:50.313 --> 00:02:56.044
website with the mushy,
HTML, CSS, and everything.

38
00:02:56.044 --> 00:02:58.072
So pretty simple, right?

39
00:02:58.072 --> 00:03:02.896
You just pick the folder and that's all.

40
00:03:02.896 --> 00:03:03.665
Do you have any question?

41
00:03:03.665 --> 00:03:09.101
Is this server-side rendering?

42
00:03:09.101 --> 00:03:13.443
No, this is statically serving a folder.

43
00:03:13.443 --> 00:03:15.960
But we can do one more step.

44
00:03:15.960 --> 00:03:20.455
If you look at this website,
how the website is built,

45
00:03:20.455 --> 00:03:26.829
when you look at the HTML, it has a main
section and then a couple of articles.

46
00:03:26.829 --> 00:03:30.868
So each thing you see on the screen,
it's an article, okay?

47
00:03:30.868 --> 00:03:34.927
So it's an exhibition in this fake museum.

48
00:03:34.927 --> 00:03:38.433
So it's an article, and when you open
the article, it's just a couple of HTML.

49
00:03:38.433 --> 00:03:43.041
H2, a paragraph, and an image,
nothing fancy, okay?

50
00:03:43.041 --> 00:03:43.570
Is that in the HTML?

51
00:03:43.570 --> 00:03:47.221
So if you look at the page
source in the HTML,

52
00:03:47.221 --> 00:03:50.390
you only have one article in the HTML.

53
00:03:50.390 --> 00:03:55.344
The rest of the articles
are actually coming from JavaScript.

54
00:03:55.344 --> 00:03:58.133
So it's a client-side render solution.

55
00:03:58.133 --> 00:04:01.255
JavaScript is downloading a JSON, and

56
00:04:01.255 --> 00:04:05.710
it's parsing the JSON and
is injecting HTML on the fly.

57
00:04:05.710 --> 00:04:11.685
But that's not so performant,
because we need the user has to wait for

58
00:04:11.685 --> 00:04:15.548
JavaScript to load to then go and
grab a JSON.

59
00:04:15.548 --> 00:04:21.660
And then when we have the JSON, it needs
to generate that HTML dynamically.

60
00:04:21.660 --> 00:04:25.729
So that's bad for performance.

61
00:04:25.729 --> 00:04:30.205
And if you're interested in why that's bad
for performance, you can check the other

62
00:04:30.205 --> 00:04:34.080
course that I have here at Frontend
Masters, Advanced Web Performance.

63
00:04:34.080 --> 00:04:37.356
But now, we are setting that
this is bad for performance, so

64
00:04:37.356 --> 00:04:39.293
we can do server-side rendering.

65
00:04:39.293 --> 00:04:44.661
That is, maybe we can actually
inject in the HTML all the articles

66
00:04:44.661 --> 00:04:50.039
directly from an aesthetic
collection that you have somewhere.

67
00:04:50.039 --> 00:04:53.708
It can be a database, a JSON, whatever.

68
00:04:53.708 --> 00:04:54.784
Makes sense?

69
00:04:54.784 --> 00:04:59.644
So I want to create all
these articles server-side,

70
00:04:59.644 --> 00:05:03.211
so the browser will receive just HTML.

71
00:05:03.211 --> 00:05:05.764
We can even get rid of JavaScript at all.

72
00:05:05.764 --> 00:05:10.355
So we can get rid of the script.js and
see the same thing on the screen.

