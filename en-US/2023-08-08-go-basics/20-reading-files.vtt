WEBVTT

1
00:00:00.000 --> 00:00:04.305
So so far we've been working with format,

2
00:00:04.305 --> 00:00:09.696
with pointers,
with a little bit about back caches.

3
00:00:09.696 --> 00:00:14.723
Let's add one more topic to it and
let's talk about file management.

4
00:00:14.723 --> 00:00:18.843
How can we, for example, read and
write files that we can use for

5
00:00:18.843 --> 00:00:21.376
text based files, for JSON, for XML?

6
00:00:21.376 --> 00:00:25.399
And of course you can then extend
that to binary files as well.

7
00:00:25.399 --> 00:00:27.445
And for that,
we are going to create another project.

8
00:00:27.445 --> 00:00:28.866
Can we reuse the same one?

9
00:00:28.866 --> 00:00:36.334
I mean we can, the problem is that you
cannot have more than one main function.

10
00:00:36.334 --> 00:00:39.912
So to actually play with a lot
of project in one project,

11
00:00:39.912 --> 00:00:42.959
you need to start doing
weird things like this,

12
00:00:42.959 --> 00:00:47.700
so then because it's not a dot go anymore,
the compiler will not find it.

13
00:00:47.700 --> 00:00:52.236
The problem is that if the compiler finds
another Go file that has a main, so

14
00:00:52.236 --> 00:00:57.348
I'm talking about just changing or using
any weird extension, so then the compiler

15
00:00:57.348 --> 00:01:02.474
will say, no, no, that's not a Go file,
I'm not going to look into that one.

16
00:01:02.474 --> 00:01:03.018
Okay, so

17
00:01:03.018 --> 00:01:07.371
what I mean is that most of the time it's
better to just create a new project.

18
00:01:07.371 --> 00:01:11.662
We know it's not a big deal,
we can do it faster every time.

19
00:01:11.662 --> 00:01:16.703
Okay, so I open a new folder,
we are going to work with files.

20
00:01:16.703 --> 00:01:19.506
We can call this files.

21
00:01:19.506 --> 00:01:23.276
And we know that the next
step is to open the terminal.

22
00:01:23.276 --> 00:01:28.053
And say go, mode init and a name such

23
00:01:28.053 --> 00:01:32.994
as frontendmasters.com/go/ and

24
00:01:32.994 --> 00:01:36.190
we can call this files.

25
00:01:36.190 --> 00:01:43.808
And when it's done we create a new file
main.go with package main, func main.

26
00:01:43.808 --> 00:01:48.680
It always the same, and
now you're ready to create a new package.

27
00:01:48.680 --> 00:01:51.249
So in this case,
we are going to create a package.

28
00:01:51.249 --> 00:01:53.631
So let's remember how to create a package.

29
00:01:53.631 --> 00:01:57.225
I will wait also a couple of seconds so
you can get there.

30
00:01:57.225 --> 00:02:02.630
But remember,
a package is just a folder with one name.

31
00:02:02.630 --> 00:02:09.832
It doesn't matter the name of the folder,
and then a name inside it.

32
00:02:09.832 --> 00:02:14.788
If we create the folder here,
let's say for example,

33
00:02:14.788 --> 00:02:20.189
we call the folder filemanagement,
something like that.

34
00:02:20.189 --> 00:02:23.309
Is that the name of the package?

35
00:02:23.309 --> 00:02:27.867
Actually no,
the name of the package is when we have

36
00:02:27.867 --> 00:02:32.534
let's create the file reader and
your file writer.

37
00:02:32.534 --> 00:02:35.704
The name of the package will
be whatever you put here.

38
00:02:35.704 --> 00:02:38.262
So you can put x, this is package x.

39
00:02:38.262 --> 00:02:41.178
Well now that's the name of the package,
and

40
00:02:41.178 --> 00:02:44.949
all the files in the folder
must have the same name,okay.

41
00:02:44.949 --> 00:02:50.626
But the file system name doesn't
need to match the package name.

42
00:02:50.626 --> 00:02:56.363
Typically we try to match them, okay,
but actually there is no need, right?

43
00:02:56.363 --> 00:03:01.163
And also that means that I can change
the name of the folder at any time and

44
00:03:01.163 --> 00:03:04.846
it's not going to change
anything in our code, okay?

45
00:03:04.846 --> 00:03:09.245
I'm not going to call it package x,
we can call it file management,

46
00:03:09.245 --> 00:03:12.887
file utils,
however you wanna call this, it's fine.

47
00:03:12.887 --> 00:03:16.006
This is a reader, so
we're going to read the file.

48
00:03:16.006 --> 00:03:19.250
So we will have a function read file.

49
00:03:19.250 --> 00:03:24.657
And we will get the file name as a string,
and we are going to return the context of

50
00:03:24.657 --> 00:03:30.255
that string so we can call that read text
file because it's going to be a text file.

51
00:03:30.255 --> 00:03:36.090
Remember, these are input arguments and
these are output arguments.

52
00:03:36.090 --> 00:03:41.085
That sometimes is one, but
we know it can be more than one, okay, and

53
00:03:41.085 --> 00:03:45.667
we will see if maybe we wannahave
another argument in a second.

54
00:03:45.667 --> 00:03:47.582
So how to work with files.

55
00:03:47.582 --> 00:03:54.999
First, to work with files, we need to
use a package from the standard library.

56
00:03:54.999 --> 00:04:01.419
So if we go to Go Docs,
Standard Library, we can go and

57
00:04:01.419 --> 00:04:06.865
find which is the package
that we need to use.

58
00:04:06.865 --> 00:04:12.199
We can search for file here and
see if we can find something

59
00:04:12.199 --> 00:04:16.979
that explained to us that
is reading file premise if

60
00:04:16.979 --> 00:04:21.885
file is to global the general,
actually is IO util.

61
00:04:21.885 --> 00:04:22.775
That's how you get there.

62
00:04:22.775 --> 00:04:25.365
Also we have FS for file system.

63
00:04:25.365 --> 00:04:26.796
So FS is to actually,

64
00:04:26.796 --> 00:04:31.255
for example, read the contents
of a folder, create a directory.

65
00:04:31.255 --> 00:04:36.780
But if you wanna work with the contents
of a file, it's an IO util.

66
00:04:36.780 --> 00:04:43.079
So you get into IO utils, and here you
have, for example, how to read the file,

67
00:04:43.079 --> 00:04:48.458
how to write the file, and
if you get there, you see the signature.

68
00:04:48.458 --> 00:04:54.199
And before writing the code,
how many arguments do we have here?

69
00:04:54.199 --> 00:04:56.897
Question for you, how many
arguments do we have in read file?

70
00:05:00.256 --> 00:05:01.120
One.

71
00:05:01.120 --> 00:05:03.950
How many return values do we have?

72
00:05:03.950 --> 00:05:04.710
Two.

73
00:05:04.710 --> 00:05:08.483
Remember, this is return, and
it's returning two values.

74
00:05:08.483 --> 00:05:14.229
The first one is a slice of byte,
and then we have error.

75
00:05:14.229 --> 00:05:18.813
That's the design pattern for
error management.

76
00:05:18.813 --> 00:05:22.647
So then to use that, by the way,
it says deprecated because there

77
00:05:22.647 --> 00:05:27.197
is a newer version cuz we can call OS read
file, we can use that one if you want.

78
00:05:27.197 --> 00:05:31.770
So instead of doing that we say okay by
the way, typically we have examples so

79
00:05:31.770 --> 00:05:35.413
we can use the IO util version of the OS,
it's just the same,

80
00:05:35.413 --> 00:05:37.851
it's not going to make any difference.

81
00:05:37.851 --> 00:05:39.603
We can use the OS one if you want.

82
00:05:39.603 --> 00:05:45.360
Read file, it's just the same, you can
see the signature is the same signature,

83
00:05:45.360 --> 00:05:48.209
they change where they store that file.

84
00:05:48.209 --> 00:05:53.039
Well, the name of the file,
we receive that as an argument,

85
00:05:53.039 --> 00:05:57.776
and then we just start this
into two variables, remember,

86
00:05:57.776 --> 00:06:02.156
and we can create them with bar or
we can use a shortcut.

87
00:06:02.156 --> 00:06:04.895
And say, well, we have the content and

88
00:06:04.895 --> 00:06:09.460
a possible error that typically
would call that error, err, but

89
00:06:09.460 --> 00:06:15.271
it's just a variable name, so any name
will work, that's kind of the way to work.

90
00:06:15.271 --> 00:06:19.377
And then we check if it's nil or
if it's not nil.

91
00:06:19.377 --> 00:06:25.437
So if we do have an error,
then we need to do something.

92
00:06:25.437 --> 00:06:28.196
If not, we do something else.

93
00:06:28.196 --> 00:06:35.571
So in this case if we are here is
because we couldn't read the file.

94
00:06:35.571 --> 00:06:41.405
This is read operation successful.

95
00:06:41.405 --> 00:06:43.182
Okay, makes sense?

96
00:06:43.182 --> 00:06:49.774
So the question is let's talk about
what happens if we have the value,

97
00:06:49.774 --> 00:06:53.907
what if we have the value
we need to return and

98
00:06:53.907 --> 00:06:58.508
we're going to return what,
content, right?

99
00:06:58.508 --> 00:07:02.927
That's the variable with information.

100
00:07:02.927 --> 00:07:08.362
But what do we want to do if
the operating system says, you know what,

101
00:07:08.362 --> 00:07:13.237
I couldn't read the file, or
you don't have permission, or

102
00:07:13.237 --> 00:07:17.108
the path doesn't exist or
something happened.

103
00:07:17.108 --> 00:07:22.003
You were reading a USB drive and
someone disconnected the drive,

104
00:07:22.003 --> 00:07:25.033
something happened so it didn't work.

105
00:07:25.033 --> 00:07:29.032
So from a Go point of view, it's up to us.

106
00:07:29.032 --> 00:07:33.437
So Go says, it's your problem,
we have three ways to solve the problem.

107
00:07:33.437 --> 00:07:38.269
You pick the one you prefer, let's say

108
00:07:38.269 --> 00:07:43.696
the lazy version is to
return empty string.

109
00:07:43.696 --> 00:07:47.386
The premise is that the color
will never know why it's empty.

110
00:07:47.386 --> 00:07:49.916
Is it because the file is empty?

111
00:07:49.916 --> 00:07:51.739
Actually we don't know, right?

112
00:07:51.739 --> 00:07:53.532
So that's kind of a problem.

113
00:07:53.532 --> 00:07:58.335
Also, we have an error here,
it's saying, hey,

114
00:07:58.335 --> 00:08:01.798
you cannot use the variable of type,

115
00:08:01.798 --> 00:08:06.281
slice of byte as a string,
which maybe is true.

116
00:08:06.281 --> 00:08:09.691
It's not the same, right, type.

117
00:08:09.691 --> 00:08:14.840
Well, we can actually create
a string from an array

118
00:08:14.840 --> 00:08:19.530
of bytes using UTF8 by
using this converter.

119
00:08:22.133 --> 00:08:23.757
Does it make sense?

120
00:08:23.757 --> 00:08:26.686
It's pretty simple, that part was simple.

121
00:08:26.686 --> 00:08:32.283
Again, this is the lazy version,
I'm not sure I like it.

122
00:08:32.283 --> 00:08:37.804
One of the things you can do, well,
you can also panic, remember panic?

123
00:08:37.804 --> 00:08:39.773
You like that one, you like to panic.

124
00:08:39.773 --> 00:08:42.562
So you can panic like that.

125
00:08:42.562 --> 00:08:46.144
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] Yeah, I cannot do anything, so

126
00:08:46.144 --> 00:08:48.275
I'm panicking, okay?

127
00:08:48.275 --> 00:08:55.856
Or we can continue the same design
pattern up in the code stack.

128
00:08:55.856 --> 00:09:03.279
So instead of returning the string,
we can return the string or an error.

129
00:09:03.279 --> 00:09:04.736
Does that make sense?

130
00:09:04.736 --> 00:09:09.467
So in this case, now it's giving
me an error here because I need to

131
00:09:09.467 --> 00:09:13.523
return an error that can be
nil because it was okay here.

132
00:09:13.523 --> 00:09:19.065
So we add the comma nil, and
if we couldn't read the file,

133
00:09:19.065 --> 00:09:23.041
then we return nil as the first argument.

134
00:09:23.041 --> 00:09:27.420
And we can bypass the same error here,
like so.

135
00:09:31.987 --> 00:09:33.960
By the way, the type have a problem here.

136
00:09:33.960 --> 00:09:37.478
That's not the type that was the name
of my variable, actually is error,

137
00:09:37.478 --> 00:09:38.571
that's a type error.

138
00:09:42.341 --> 00:09:48.055
Now it's giving me an error here over
the nil, saying the string cannot be nil,

139
00:09:48.055 --> 00:09:51.653
because a nil string is
actually an empty string.

140
00:09:51.653 --> 00:09:52.785
Here we have two options.

141
00:09:52.785 --> 00:09:57.663
I will use the lazy option here,
give me that for a second,

142
00:09:57.663 --> 00:10:02.356
because we will use the other
option on the next sample.

143
00:10:02.356 --> 00:10:07.512
So for strings, we don't have nils,
there is a way to solve that,

144
00:10:07.512 --> 00:10:11.578
and that is to actually
return a pointer to a string.

145
00:10:11.578 --> 00:10:15.841
But for now, let's say because
we're not going to use that, okay?

146
00:10:15.841 --> 00:10:18.612
For now, believe me that that will work.

147
00:10:18.612 --> 00:10:21.315
So it's complaining that it's on use.

148
00:10:21.315 --> 00:10:24.651
This isn't a package reader, right?

149
00:10:24.651 --> 00:10:27.699
What if I wanna use this from main.go,
what are the steps?

150
00:10:29.789 --> 00:10:30.873
First, will it work?

151
00:10:32.732 --> 00:10:34.374
I haven't seen it, why?

152
00:10:34.374 --> 00:10:35.912
Why no, why this?

153
00:10:35.912 --> 00:10:37.570
&gt;&gt; You need to import it.

154
00:10:37.570 --> 00:10:41.538
&gt;&gt; I need to import it,
okay, in main.go, right?

155
00:10:41.538 --> 00:10:44.894
&gt;&gt; Yes, or you would've to capitalize it.

156
00:10:44.894 --> 00:10:50.041
&gt;&gt; Exactly, I need to capitalize it
because if I look at that function,

157
00:10:50.041 --> 00:10:55.217
I know it's private to my package,
so I need to use capital R, okay?

158
00:10:55.217 --> 00:10:56.662
That's the first step.

159
00:10:56.662 --> 00:11:00.356
Now, after I've done that you can see that
it's not complaining anymore that no one

160
00:11:00.356 --> 00:11:00.939
is using it.

161
00:11:00.939 --> 00:11:05.010
Because it says okay, no one is using
it right now in this package, but

162
00:11:05.010 --> 00:11:08.253
maybe because we are exporting
that I won't complain,

163
00:11:08.253 --> 00:11:12.121
because maybe someone else from
the outside will use that, okay?

164
00:11:12.121 --> 00:11:16.847
If it's here, there is something wrong,
it says, hey, you're not using it locally,

165
00:11:16.847 --> 00:11:21.146
and from the outside no one can actually
access that, so maybe we have a problem.

166
00:11:21.146 --> 00:11:22.800
So that's the warning.

167
00:11:22.800 --> 00:11:26.973
So now from here,
can I try to use it directly like read?

168
00:11:26.973 --> 00:11:32.901
Well, we should actually start trying
to get the package is fileutils.

169
00:11:32.901 --> 00:11:36.005
Can I try fileutils and press return?

170
00:11:36.005 --> 00:11:38.892
So I start typing the name of my folder,

171
00:11:38.892 --> 00:11:43.016
actually the name of my package,
not [LAUGH] the folder.

172
00:11:43.016 --> 00:11:44.556
And it's fileutils, and

173
00:11:44.556 --> 00:11:48.478
you can see at the bottom that's
actually what is going to import.

174
00:11:48.478 --> 00:11:54.753
It has the prefix of my module's name and
then the package.

175
00:11:54.753 --> 00:12:00.081
And then read text file, and
then let's say when I read a file so

176
00:12:00.081 --> 00:12:06.721
I can create the folder here, maybe
create another folder there called data,

177
00:12:06.721 --> 00:12:12.572
and I'm going to create a file which
shall have some text, text txt.

178
00:12:12.572 --> 00:12:20.163
I'm a content of a text file, just
a text file,and I will try to read that.

179
00:12:20.163 --> 00:12:23.417
By the way, I will refactor this,
just a warning.

180
00:12:23.417 --> 00:12:27.930
So I would say data/text.txt.

181
00:12:27.930 --> 00:12:32.280
A couple of questions that
may arise at this point,

182
00:12:32.280 --> 00:12:37.145
will the compiler think that
data is now a package or not?

183
00:12:37.145 --> 00:12:40.988
Can I create folders without Go files?

184
00:12:40.988 --> 00:12:45.683
So because we mentioned that the package
is a folder, so can I make this?

185
00:12:45.683 --> 00:12:50.611
Well actually,
the compiler will only check for go files.

186
00:12:50.611 --> 00:12:54.220
The compiler will ignore everything else.

187
00:12:54.220 --> 00:12:57.572
The compiler doesn't know about
other files, doesn't care.

188
00:12:57.572 --> 00:13:01.765
So if you have folders,
empty folders, it will ignore them.

189
00:13:01.765 --> 00:13:09.699
If you have folders with content that
is not go files, doesn't matter, okay?

190
00:13:09.699 --> 00:13:14.245
Typically, you don't mix source
code with data with assets,

191
00:13:14.245 --> 00:13:17.361
we have them separated on a real project,
okay?

192
00:13:17.361 --> 00:13:21.886
But for now, we are just playing,
I can try to read that.

193
00:13:21.886 --> 00:13:25.559
And by the way,
what are we getting from here?

194
00:13:25.559 --> 00:13:27.120
Two values, right?

195
00:13:27.120 --> 00:13:28.802
Remember, always two values.

196
00:13:28.802 --> 00:13:32.883
So we can call this,
this is the contents, and error.

197
00:13:35.957 --> 00:13:40.807
And we can try if error is not nil,

198
00:13:40.807 --> 00:13:47.397
we can call format,
fmt, and say Println c.

199
00:13:47.397 --> 00:13:52.059
And if not,
we can use a Printf with format and

200
00:13:52.059 --> 00:13:57.827
say ERROR PANIC and
then we can put the value,

201
00:13:57.827 --> 00:14:01.999
and the value can be the error object, so

202
00:14:01.999 --> 00:14:06.203
we can see the details of what happened.

203
00:14:06.203 --> 00:14:10.390
So this is the pattern that
you will typically see when

204
00:14:10.390 --> 00:14:15.056
you're executing functions
that might not end properly.

205
00:14:15.056 --> 00:14:19.280
Your wizard receive two values, so
you will see this pattern a lot.

206
00:14:19.280 --> 00:14:20.700
What if you don't care?

207
00:14:20.700 --> 00:14:25.083
Like you know what, if it doesn't matter,
I will just don't care about the error.

208
00:14:25.083 --> 00:14:29.475
I will just move on with an empty
string because you want to.

209
00:14:29.475 --> 00:14:34.708
Remember you can also
use the underscore here.

210
00:14:34.708 --> 00:14:38.674
Of course, in that case,
I can actually now read for the error...

211
00:14:38.674 --> 00:14:44.051
But if you do that, then if you
don't care, you can just ignore

212
00:14:44.051 --> 00:14:50.160
the second argument and just continue
with whatever C you have, okay?

213
00:14:50.160 --> 00:14:55.186
So if I try this, I already
mentioned that I will refactor this.

214
00:14:55.186 --> 00:15:00.802
Because if I try this,
it says ERROR PANIC, nil, okay?

215
00:15:00.802 --> 00:15:02.496
So what's going on here?

216
00:15:02.496 --> 00:15:05.460
That we were guessing that,

217
00:15:05.460 --> 00:15:11.141
this go file is being executed
in the current folder and

218
00:15:11.141 --> 00:15:16.217
then the path is relative
to the current folder.

219
00:15:16.217 --> 00:15:19.604
So actually doesn't help this work,
I need to parse an absolute path.

220
00:15:21.465 --> 00:15:27.509
So from my computer where that text
file is actually right now, okay?

221
00:15:27.509 --> 00:15:29.289
Do you understand the problem?

222
00:15:29.289 --> 00:15:32.965
So what we need is to ask the OS
about the current folder.

223
00:15:32.965 --> 00:15:36.940
So it's not a big deal, and
for that we have an OS,

224
00:15:36.940 --> 00:15:41.419
the same OS that we were using
before operating system.

225
00:15:41.419 --> 00:15:46.947
You can see that all the functions
are capitalized, why?

226
00:15:46.947 --> 00:15:48.186
Because they're exported.

227
00:15:48.186 --> 00:15:51.399
If I see them, [LAUGH] It's
because they must be capitalized.

228
00:15:51.399 --> 00:15:53.956
And we do have a getWD.

229
00:15:53.956 --> 00:15:57.082
The name doesn't say
a lot actually by itself,

230
00:15:57.082 --> 00:16:02.335
that it's currently the working directory,
the current working directory.

231
00:16:02.335 --> 00:16:06.701
So this is giving me the current
working directory and

232
00:16:06.701 --> 00:16:10.388
current working directory
if I try to see it,

233
00:16:10.388 --> 00:16:13.989
it returns the directory and error, okay?

234
00:16:13.989 --> 00:16:15.564
So actually it's the same thing.

235
00:16:15.564 --> 00:16:20.946
So I can get this is the,
let's say the root path and the error.

236
00:16:20.946 --> 00:16:23.363
If I don't care about the error,
I can just say this.

237
00:16:25.900 --> 00:16:29.230
Why?
Because I feel at this point that having

238
00:16:29.230 --> 00:16:34.303
an error to get the current working
directory is not really common.

239
00:16:34.303 --> 00:16:38.564
Again, we are situations you're
running your Go file from

240
00:16:38.564 --> 00:16:42.311
an external hard drive and
then it's in memory, and

241
00:16:42.311 --> 00:16:47.269
then you remove the hard drive while
the software is still in memory.

242
00:16:47.269 --> 00:16:51.528
So then when it tries to read, the working
directory is not there anymore,

243
00:16:51.528 --> 00:16:52.754
it's kind of weird.

244
00:16:52.754 --> 00:16:57.251
Okay, so it's not gonna happen, so
I will just say, I don't care about there.

245
00:16:57.251 --> 00:17:03.020
And then you can take that root path.

246
00:17:03.020 --> 00:17:10.664
And we also need to add a forward slash to
separate the root path from the text file.

247
00:17:10.664 --> 00:17:14.439
So the other problem that we have
is that we need to swap conditions.

248
00:17:14.439 --> 00:17:19.555
Because right now if the error is not nil,
is because we do

249
00:17:19.555 --> 00:17:24.563
have an error, so
I need to swap these two expressions or

250
00:17:24.563 --> 00:17:30.119
verify if it's nil is because
we don't have an error, okay?

251
00:17:30.119 --> 00:17:36.541
And then if I try this now I can
see the contents of the file here.

252
00:17:36.541 --> 00:17:41.441
After this, instead of sending
that to the console, you can, for

253
00:17:41.441 --> 00:17:45.394
example, parse the JSON,
we will see how to do that.

254
00:17:45.394 --> 00:17:50.288
You can parse,
it can be a CSV to parse a comma

255
00:17:50.288 --> 00:17:55.722
separated value file or
do something with that.

256
00:17:55.722 --> 00:18:00.304
But that, for example,
how to work and read a file.

