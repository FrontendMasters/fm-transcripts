WEBVTT

1
00:00:00.097 --> 00:00:04.189
You already mentioned packages, okay?That
the package is a group of files in

2
00:00:04.189 --> 00:00:08.157
the same folder, we define the name of
the package at the top of the file, and

3
00:00:08.157 --> 00:00:09.776
we can import other packages.

4
00:00:09.776 --> 00:00:12.870
We haven't seen that yet, but
we can import other packages.

5
00:00:12.870 --> 00:00:15.951
So for that we use the import keyword, and

6
00:00:15.951 --> 00:00:20.881
within quotes, we the name of
the package that we're importing,

7
00:00:20.881 --> 00:00:25.829
the package can be a built-in
package from the standard library.

8
00:00:25.829 --> 00:00:31.527
It can be our own package that we will do
in a minute, or it can be a dependency

9
00:00:31.527 --> 00:00:36.694
that we are downloading from the web,
another dependency, okay?

10
00:00:36.694 --> 00:00:40.889
It's just the same, it's just a package.

11
00:00:40.889 --> 00:00:46.269
And just remember that having at
least one go file with package

12
00:00:46.269 --> 00:00:51.659
main is mandatory, and
that one should have a function main.

13
00:00:51.659 --> 00:00:55.976
Before creating another package
to understand how packages work,

14
00:00:55.976 --> 00:00:58.627
I'm going to create another file here and

15
00:00:58.627 --> 00:01:03.186
let's call that functions.go any name,
that's just a random name.

16
00:01:03.186 --> 00:01:07.453
In fact, you will see that unless
we're talking about the go.mod that's

17
00:01:07.453 --> 00:01:11.853
the metadata for the module, the rest
of the go files, they can use any name,

18
00:01:11.853 --> 00:01:13.973
we don't have a convention on that.

19
00:01:13.973 --> 00:01:16.302
And I'm going to use the same package,

20
00:01:16.302 --> 00:01:19.345
can I use the same package
name on different files?

21
00:01:19.345 --> 00:01:24.144
Yes, the only condition is that
they must be on the same folder.

22
00:01:26.288 --> 00:01:33.188
But yeah, I can create another function
here, I type JavaScript, no, it's func.

23
00:01:33.188 --> 00:01:37.886
And I can say, for example, here,
I wanna print some data, and

24
00:01:37.886 --> 00:01:41.373
then I'm going to print some data,
whatever.

25
00:01:41.373 --> 00:01:45.103
Hello, and we will see in
a minute how we're going to,

26
00:01:45.103 --> 00:01:50.143
we will stop using print in just a few
minutes and you will understand why.

27
00:01:50.143 --> 00:01:52.931
So if I save this,
of course it's complaining, why?

28
00:01:52.931 --> 00:01:56.387
Because I'm not using the function,
but that's okay,

29
00:01:56.387 --> 00:01:58.551
get in your mind that that's okay.

30
00:01:58.551 --> 00:02:03.133
Now, I can go to main.go and
what if I want to use

31
00:02:03.133 --> 00:02:07.957
that print data function,
how can I import that?

32
00:02:07.957 --> 00:02:12.094
So, I need to import another package
using, as I mentioned before, import.

33
00:02:12.094 --> 00:02:17.665
Well, actually, it's the same package,
because it's the same package,

34
00:02:17.665 --> 00:02:23.163
I don't need to import anything,
it will just be there, I just execute it.

35
00:02:23.163 --> 00:02:25.188
How does it know that it's there?

36
00:02:25.188 --> 00:02:30.386
Because in the same package actually, the
go compiler will make different phases.

37
00:02:30.386 --> 00:02:36.121
When the compiler is compiling the app,
it will first go over all the go files and

38
00:02:36.121 --> 00:02:40.400
at the end, all the files that
are part of the same package,

39
00:02:40.400 --> 00:02:45.214
it's like they are merged into one
big file, into one large file.

40
00:02:45.214 --> 00:02:51.275
So a package is the only thing that
the compiler sees the code sees packages,

41
00:02:51.275 --> 00:02:52.230
not files.

42
00:02:52.230 --> 00:02:56.297
We separate content in files just for
our organization, not for

43
00:02:56.297 --> 00:02:58.716
the compiler, not for the language.

44
00:03:00.355 --> 00:03:05.717
This is like on C#, for example,
you can create partial classes

45
00:03:05.717 --> 00:03:10.991
where one class is split into
several files this is kind of that.

46
00:03:10.991 --> 00:03:15.455
A package in this case is like
the concept that we see, and

47
00:03:15.455 --> 00:03:21.048
then we can split the content of that
package in as many files as we want.

48
00:03:21.048 --> 00:03:24.595
The only restriction is they must of
course contain the same declaration on

49
00:03:24.595 --> 00:03:26.861
the top, and
they should be in the same folder.

50
00:03:28.295 --> 00:03:33.115
In this case, we're using a main package,
that's not the package that we

51
00:03:33.115 --> 00:03:37.872
are defining, it's a package that
already exists on every go software.

52
00:03:37.872 --> 00:03:42.444
On every go script, on every go module,
we always have a main package,

53
00:03:42.444 --> 00:03:45.647
we are just adding functions
to that package, and

54
00:03:45.647 --> 00:03:49.322
it's not just functions,
I can also create variables.

55
00:03:49.322 --> 00:03:52.977
So I can create a name here,
or I can, look at this,

56
00:03:52.977 --> 00:03:57.993
I'm not saying you will like this,
but I can create the name of my app.

57
00:03:57.993 --> 00:04:03.725
Here is the frontend masters, it's
a variable, it's a global variable because

58
00:04:03.725 --> 00:04:09.219
it's an in go we don't say global
variable, we say it's a package variable.

59
00:04:09.219 --> 00:04:12.775
And it's a package variable,

60
00:04:12.775 --> 00:04:18.528
that means that I can also
use it from here, can I?

61
00:04:18.528 --> 00:04:21.366
Yes, because it's the same package, so

62
00:04:21.366 --> 00:04:25.423
every function in the package
can access other functions or

63
00:04:25.423 --> 00:04:30.063
other variables, constants, or
data types for the same package.

64
00:04:30.063 --> 00:04:33.401
Yeah, maybe you don't like that, okay?

65
00:04:33.401 --> 00:04:35.233
But that works.

66
00:04:35.233 --> 00:04:40.917
If I execute this, by the way,
close this let me do this there we are,

67
00:04:40.917 --> 00:04:46.406
if I execute this,
it says HelloWorldFrontend Masters, first,

68
00:04:46.406 --> 00:04:51.613
can you see that everything is
in the same line without spaces?

69
00:04:51.613 --> 00:04:56.423
So, if we execute this, so go run.

70
00:04:58.082 --> 00:05:02.658
You can see it's working, but
we do have a problem, hello world,

71
00:05:02.658 --> 00:05:05.539
we don't see separations, okay, why?

72
00:05:05.539 --> 00:05:10.209
Because print is sending that to
the console without creating patroness

73
00:05:10.209 --> 00:05:11.593
faces are new lines.

74
00:05:11.593 --> 00:05:15.118
We have another version
it's called println,

75
00:05:15.118 --> 00:05:19.708
that will add a new line at the end
typically we say print line.

76
00:05:19.708 --> 00:05:24.251
This is coming from see if you have ever
seen see, so we have print and print line.

77
00:05:24.251 --> 00:05:29.334
Print line, well maybe for
example we can use print here,

78
00:05:29.334 --> 00:05:33.276
then, line after world and
also after name,

79
00:05:33.276 --> 00:05:38.663
maybe we can add a space here,
something like that.

80
00:05:38.663 --> 00:05:41.885
Now, it looks better,
it says, hello world and

81
00:05:41.885 --> 00:05:44.726
a different line from the master, right?

82
00:05:44.726 --> 00:05:51.594
But here you can see that we can split our
package content to insert several files.

83
00:05:51.594 --> 00:05:56.546
And it will work I don't need to import
anything everything is visible, so

84
00:05:56.546 --> 00:06:01.672
everything that was defined in the package
is visible for the whole package.

85
00:06:01.672 --> 00:06:05.254
We'll start creating new packages
in a second, what's that?

86
00:06:05.254 --> 00:06:09.742
That's a comment I brought the comment
no one asked, what is that?

87
00:06:09.742 --> 00:06:13.823
That's a comment, and for comments
we use the same fee-based comments.

88
00:06:13.823 --> 00:06:17.136
That's a line comment,

89
00:06:17.136 --> 00:06:22.351
that's just double mean though this.

90
00:06:22.351 --> 00:06:27.166
And also you can select like
a lot of code like that and

91
00:06:27.166 --> 00:06:33.427
you can use the shortcut you in your
IDE for that will forward slash.

92
00:06:33.427 --> 00:06:37.629
And also you can use these kinds of
comments as well as with JavaScript

93
00:06:37.629 --> 00:06:41.404
as we'd see with PHP,
we are using the same kind of comments.

94
00:06:41.404 --> 00:06:43.131
Yeah, you had a question?

95
00:06:43.131 --> 00:06:49.639
&gt;&gt; I just wondered if it could get
confusing, if you're sharing functions and

96
00:06:49.639 --> 00:06:54.126
variables across multiple
files in one big folder.

97
00:06:54.126 --> 00:06:59.725
It seems like it could get kind of messy,
but I saw that in my visual studio code,

98
00:06:59.725 --> 00:07:04.754
I can just use those tools in there to
go to the definition of a function.

99
00:07:04.754 --> 00:07:09.219
&gt;&gt; Yeah, you can always,
first if you use control click or

100
00:07:09.219 --> 00:07:15.109
command click over function, you can
go directly to that file on VS code,

101
00:07:15.109 --> 00:07:19.491
so it depends on what you are doing,
you can get there.

102
00:07:19.491 --> 00:07:24.232
If you add enough information in
your comments for your functions,

103
00:07:24.232 --> 00:07:25.480
your variables,

104
00:07:25.480 --> 00:07:30.900
you can use the tools that you're used
to in your IDE to see messages and help.

105
00:07:30.900 --> 00:07:36.080
So but as you mentioned,
it's kind of messy, okay?

106
00:07:36.080 --> 00:07:40.208
Creating variables like around,
that's why defining

107
00:07:40.208 --> 00:07:45.209
everything in the package main might
not be the best of the ideas, so

108
00:07:45.209 --> 00:07:50.506
that's why we can create our own packages,
we'll do that in a second.

109
00:07:50.506 --> 00:07:55.038
So we can create our own packages for
small pieces and

110
00:07:55.038 --> 00:07:59.673
then group in that package variables,
functions and

111
00:07:59.673 --> 00:08:03.392
types that we know what type is yet, okay?

112
00:08:03.392 --> 00:08:05.077
Makes sense?

113
00:08:05.077 --> 00:08:10.092
Also that we've seen print and
print line, however,

114
00:08:10.092 --> 00:08:14.888
we will stop using them soon,
this is only useful for

115
00:08:14.888 --> 00:08:20.360
development purposes,
we shouldn't deploy this, why?

116
00:08:20.360 --> 00:08:24.860
Not because deploying to the console
is bad because it's not bad,

117
00:08:24.860 --> 00:08:26.627
that's not the case, but

118
00:08:26.627 --> 00:08:32.348
print as a function is not guaranteed that
it's going to work and In every platform.

119
00:08:32.348 --> 00:08:37.448
It's not guarantee that it's going
to work in every operating system,

120
00:08:37.448 --> 00:08:43.145
so that's why it's not safe, it's just
a quick way to debug something, okay?

121
00:08:43.145 --> 00:08:47.600
But we do have a safe way to print and
that way,

122
00:08:47.600 --> 00:08:52.772
instead of VM print,
it's in a different package.

123
00:08:52.772 --> 00:08:57.454
So I'm going to do that first manually
to show you how that works, but

124
00:08:57.454 --> 00:09:02.478
then we will see that when we get used
to that, we don't do this manually.

125
00:09:02.478 --> 00:09:07.850
We are going to import another package,

126
00:09:07.850 --> 00:09:12.432
and the name of the package is fmt,

127
00:09:12.432 --> 00:09:17.178
it's format that they call it fmt.

128
00:09:17.178 --> 00:09:21.275
Some people say thumped we import thumped,
okay?

129
00:09:21.275 --> 00:09:24.585
Anyway and you say it's complaining,
why it's complaining?

130
00:09:24.585 --> 00:09:29.946
Because I imported the package and
I'm not using it, so anxiety.

131
00:09:29.946 --> 00:09:33.912
So you can see here, it's imported and
not used, that's why it's complaining, so

132
00:09:33.912 --> 00:09:35.138
it's okay, it's fine.

133
00:09:35.138 --> 00:09:40.849
So now instead of using print,
we're going to use, this is how it works,

134
00:09:40.849 --> 00:09:46.471
when you import a package,
everything that that package is exporting,

135
00:09:46.471 --> 00:09:51.007
it's going to be available
under the name of the package.

136
00:09:51.007 --> 00:09:55.102
I'm going to say this wrong from a go
point of view, but it's kind of an object

137
00:09:55.102 --> 00:09:58.504
that has all the things that were
exported from the package, but

138
00:09:58.504 --> 00:10:01.605
it's not really an object,
we don't have objects here.

139
00:10:01.605 --> 00:10:05.553
So, you say fmt, and we use .syntax,

140
00:10:05.553 --> 00:10:10.460
to access all the variables,
or the constants,

141
00:10:10.460 --> 00:10:16.207
all the functions and
all the data types that were defined

142
00:10:16.207 --> 00:10:21.257
as package that were
exported from that package.

143
00:10:21.257 --> 00:10:27.089
And we do have one that says print,
and also we have a print line, so

144
00:10:27.089 --> 00:10:32.940
we just change print the print
line with fmt.print, print line.

145
00:10:32.940 --> 00:10:38.796
And if you pay attention that print
Hudson's more like different,

146
00:10:38.796 --> 00:10:44.140
small but very important
difference it's using title case,

147
00:10:44.140 --> 00:10:51.347
title case is when you start with capital
letters, and that's kind of mandatory.

148
00:10:51.347 --> 00:10:58.937
That's one of the, probably the first
thing that you may not like initially,

149
00:10:58.937 --> 00:11:04.695
so how do we know if a function
is going to be exported or not?

150
00:11:04.695 --> 00:11:10.453
The way to define if a variable or
a function is public, so anyone

151
00:11:10.453 --> 00:11:17.194
from the outside can use that is based
on the initial character of the name.

152
00:11:17.194 --> 00:11:24.143
If it's uppercase, it's public, if it's
lowercase, it's private to the package.

153
00:11:24.143 --> 00:11:29.733
So for example, in our print data,
if we look at this function,

154
00:11:29.733 --> 00:11:34.702
if we wanna export that, so
other packages can use that,

155
00:11:34.702 --> 00:11:40.104
I must move it to capital P,
if I don't do that it's private.

156
00:11:40.104 --> 00:11:45.313
For those of you using OOP in Java,
or C# or PHP,

157
00:11:45.313 --> 00:11:49.888
this is kind of using
the private keyword or

158
00:11:49.888 --> 00:11:52.954
the public keyword kind of.

159
00:11:52.954 --> 00:11:57.259
We don't have those keywords here,
we have a convention.

160
00:11:57.259 --> 00:12:02.931
If the global function starts with
capital letters, it's public,

161
00:12:02.931 --> 00:12:07.427
it's export, if not,
it's private to the package,

162
00:12:07.427 --> 00:12:11.257
we will use this in our code in a minute,
okay?

163
00:12:11.257 --> 00:12:11.982
You will see this in action.

164
00:12:11.982 --> 00:12:15.943
Of course, now I have an hour
because I need to use capital B.

165
00:12:15.943 --> 00:12:18.552
So we are changing completely, how,

166
00:12:18.552 --> 00:12:23.364
naming guidelines work because
probably you're used to, we start,

167
00:12:23.364 --> 00:12:29.004
property names and function names with
our case and class names with, well, no.

168
00:12:29.004 --> 00:12:35.859
Here you can mix because the name, how
you start, the name defines visibility.

169
00:12:38.141 --> 00:12:39.638
Okay, make sense?

170
00:12:39.638 --> 00:12:45.304
&gt;&gt; Would you say the purpose of
that is for ease of programming?

171
00:12:45.304 --> 00:12:48.647
&gt;&gt; Yeah, that's easy of code,
yeah, even if you don't feel that,

172
00:12:48.647 --> 00:12:51.887
that's easier said first,
that from the from the three goals.

173
00:12:51.887 --> 00:12:55.859
That's not changing compilation
speed that's not changing

174
00:12:55.859 --> 00:12:58.232
execution speed that's changing.

175
00:12:58.232 --> 00:13:00.562
Let's stop using a lot of keywords,

176
00:13:00.562 --> 00:13:05.899
adding modifiers to the functions that we
keep it simple and also when you're real,

177
00:13:05.899 --> 00:13:10.799
When you read the code and you see if you
read lowercase, you need to get used.

178
00:13:10.799 --> 00:13:15.390
You need to train your brain into that
when you read something that is lowercase,

179
00:13:15.390 --> 00:13:17.562
you know it's private immediately.

