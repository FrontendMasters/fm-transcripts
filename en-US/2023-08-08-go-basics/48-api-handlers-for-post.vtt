WEBVTT

1
00:00:00.380 --> 00:00:05.084
So the next example is a post so
I'm going to create another

2
00:00:05.084 --> 00:00:09.318
file is going to be our
last.go file of this course.

3
00:00:09.318 --> 00:00:16.030
Post.go and in post.go, of course,
we are in the same package API.

4
00:00:16.030 --> 00:00:20.187
I'm going to create another function
post with the same signature for

5
00:00:20.187 --> 00:00:21.860
an HTTP handler.

6
00:00:21.860 --> 00:00:25.570
So it's going to be W of
HTTP response writer.

7
00:00:27.330 --> 00:00:33.280
And the request as HTTP request pointer,
it's a pointer to it.

8
00:00:34.740 --> 00:00:38.480
In this case, I want to make
sure that it's really a post.

9
00:00:39.620 --> 00:00:43.243
So for that their request has a method.

10
00:00:43.243 --> 00:00:49.620
So it's simple and we can check if it's
post, get, delete or the one that we want.

11
00:00:49.620 --> 00:00:54.776
For the methods, we can use a string or
we can check within

12
00:00:54.776 --> 00:00:59.510
the constants in http.MethodPost,
for example.

13
00:01:00.680 --> 00:01:07.177
If it's not a post, we can just
right now throw an error over HTTP.

14
00:01:07.177 --> 00:01:13.150
We are passing the writer
The message like Unsupported Method.

15
00:01:14.650 --> 00:01:18.982
The HTP status code that I
want is probably one that is

16
00:01:18.982 --> 00:01:21.910
known as MethodNotAllowed.

17
00:01:21.910 --> 00:01:25.800
So in this URL,
we are not allowing that method.

18
00:01:25.800 --> 00:01:28.307
For example, you want to delete?

19
00:01:28.307 --> 00:01:35.616
No, it's not allowed So what's my point?

20
00:01:35.616 --> 00:01:39.306
What I want is to receive
a new activity vision and

21
00:01:39.306 --> 00:01:43.806
they want to save that exhibition
in my collection that in my

22
00:01:43.806 --> 00:01:47.588
case it's going to be
an in-memory collection.

23
00:01:49.055 --> 00:01:54.075
Later You can move this into a real
database or something like that.

24
00:01:54.075 --> 00:01:59.548
So for that we need to remember that
our collection is currently private,

25
00:01:59.548 --> 00:02:02.650
so I won't be able to add something to it.

26
00:02:02.650 --> 00:02:07.401
So I need to add a new function for
adding a collection,

27
00:02:07.401 --> 00:02:13.200
exhibition.go within data and
I'm going to add one exhibition.

28
00:02:14.900 --> 00:02:16.800
So I receive an exhibition.

29
00:02:19.500 --> 00:02:23.070
Okay, and I'm going to add it,
how to add something to a slice.

30
00:02:23.070 --> 00:02:25.832
Does anyone remember how to add
an element to a collection?

31
00:02:31.291 --> 00:02:39.470
&gt;&gt; Did you have to like call the variable
then equal and then use the pass function.

32
00:02:39.470 --> 00:02:41.750
Not pass, very close a pen.

33
00:02:41.750 --> 00:02:42.960
Yeah, that's correct.

34
00:02:42.960 --> 00:02:44.177
So we need to call append, but

35
00:02:44.177 --> 00:02:46.780
append is not actually adding
something to the collection.

36
00:02:46.780 --> 00:02:49.092
It's returning me a new collection, so

37
00:02:49.092 --> 00:02:51.750
I need to say that now my
list will be a new list.

38
00:02:52.970 --> 00:02:57.987
That will be the list after appending
to that list the new exhibition.

39
00:03:05.335 --> 00:03:06.140
Okay, makes sense?

40
00:03:08.180 --> 00:03:09.495
Okay, so we have that.

41
00:03:09.495 --> 00:03:13.756
Now we can go back to post and the next
question is how to read the exhibition

42
00:03:13.756 --> 00:03:16.730
that is coming from the browser or
from the client.

43
00:03:18.480 --> 00:03:22.911
Well there are many ways to
get data from the client but

44
00:03:22.911 --> 00:03:26.357
if the data is coming
in the body as JSON and

45
00:03:26.357 --> 00:03:32.890
that's the most common scenario then
we can Then try to decode the body.

46
00:03:32.890 --> 00:03:38.930
So we've seen how to create
a new encoder for the output.

47
00:03:38.930 --> 00:03:42.690
We also have a way to create
a new decoder for the input.

48
00:03:42.690 --> 00:03:48.900
So we can receive the body as JSON and
recreate an object from our side.

49
00:03:48.900 --> 00:03:49.890
Okay, makes sense.

50
00:03:49.890 --> 00:03:54.985
So for that, I'm going to call
Jason new in this case decoder.

51
00:03:54.985 --> 00:03:59.355
And for the input we are going to

52
00:03:59.355 --> 00:04:04.396
take from the request the body, and

53
00:04:04.396 --> 00:04:10.460
we are going to ask to
decode it into an any.

54
00:04:12.667 --> 00:04:14.660
Remember when we used the unmarshal.

55
00:04:14.660 --> 00:04:18.888
So I actually need to create
the variable and send that variable to,

56
00:04:18.888 --> 00:04:24.520
in this case, the decoder and say hey,
decode me that JSON into this variable.

57
00:04:24.520 --> 00:04:27.050
So I need to create
here my new exhibition.

58
00:04:28.560 --> 00:04:30.730
Let's call it item or exhibition.

59
00:04:32.100 --> 00:04:34.080
So let's call it exhibition.

60
00:04:36.470 --> 00:04:42.210
It's going to be basically
data.exhibition, that's the type.

61
00:04:42.210 --> 00:04:45.840
Then I'm going to decode
into that exhibition.

62
00:04:45.840 --> 00:04:50.009
But we know that every time
we are passing a value,

63
00:04:50.009 --> 00:04:54.494
that I want the function to
change what do I need to do?

64
00:04:54.494 --> 00:04:55.919
&gt;&gt; Ampersand.

65
00:04:55.919 --> 00:05:00.760
&gt;&gt; Ampersand, I need to pass
the address of that variable.

66
00:05:02.570 --> 00:05:03.690
Make sense?

67
00:05:03.690 --> 00:05:07.779
And this gives me an error
because maybe it's not json,

68
00:05:07.779 --> 00:05:11.870
maybe it's wrong,
there are a lot of maybes.

69
00:05:11.870 --> 00:05:14.430
Moving when you are dealing
with user input.

70
00:05:16.240 --> 00:05:19.580
So if it's not nil, so if there was
an error, well, we can throw an error.

71
00:05:21.860 --> 00:05:26.839
The error that we're going to throw to
the writer, we can take the message

72
00:05:26.839 --> 00:05:30.950
from the error if if you want to
take the message of the error.

73
00:05:32.490 --> 00:05:37.360
It's .error, that's the name of
the function not to a string, it's .error.

74
00:05:37.360 --> 00:05:38.660
That will give you the string.

75
00:05:39.930 --> 00:05:44.690
In this case, we can use the code
that is known as bad request.

76
00:05:46.950 --> 00:05:49.974
So you're saying to the client,
hey, your request is bad.

77
00:05:49.974 --> 00:05:54.814
In this case, the JSON is not what
I was expecting or it's not value.

78
00:05:54.814 --> 00:05:59.056
And I can also return so
I can get out of here and

79
00:05:59.056 --> 00:06:03.200
then else or without else doesn't matter.

80
00:06:04.420 --> 00:06:09.971
I can go and
ask to add that new exhibition and

81
00:06:09.971 --> 00:06:17.030
then we can write something to the user,
to the output.

82
00:06:17.030 --> 00:06:21.009
It can be a true, a false,
a message saying, okay, no,

83
00:06:21.009 --> 00:06:24.250
just your return something to the client.

84
00:06:24.250 --> 00:06:26.700
It can be adjacent with a true status.

85
00:06:26.700 --> 00:06:29.007
Okay, or maybe it can be nothing,

86
00:06:29.007 --> 00:06:34.110
because you can also say an empty body
just with a status code is good enough.

87
00:06:35.290 --> 00:06:39.310
In fact, there is a status code,
a special status code for this situation.

88
00:06:40.520 --> 00:06:41.970
Let me see if I can find it here.

89
00:06:43.410 --> 00:06:47.560
It's a StatusCreated.

90
00:06:48.690 --> 00:06:52.851
I think it's 203 or 401, I don't remember.

91
00:06:52.851 --> 00:06:57.848
I can check here, 201.

92
00:06:57.848 --> 00:07:01.282
What you're saying, yeah,
what you ask me is what's created.

93
00:07:04.128 --> 00:07:06.144
So we are following the RESTful protocol.

94
00:07:10.737 --> 00:07:14.417
So testing a post is not so
simple because yeah,

95
00:07:14.417 --> 00:07:19.760
we need to write JavaScript to do that but
we are not doing that today.

96
00:07:19.760 --> 00:07:21.430
We are just doing back end.

97
00:07:21.430 --> 00:07:28.676
So to try the post, let's hope for
it to work, I have here both men,

98
00:07:28.676 --> 00:07:33.810
I'm not sure if you have used postman,
okay.

99
00:07:33.810 --> 00:07:37.320
It's a free tool, but
the free part is getting is going away.

100
00:07:37.320 --> 00:07:42.030
But it's still free for
now where you can quickly test on API.

101
00:07:42.030 --> 00:07:44.145
But before doing that,

102
00:07:44.145 --> 00:07:50.690
I need to hook my handler to
the server because I didn't do that.

103
00:07:50.690 --> 00:07:55.519
So I have the handler, but on my main.go,

104
00:07:55.519 --> 00:07:59.410
I didn't add the handler here, so

105
00:07:59.410 --> 00:08:08.148
I'm going to add I will call these
exhibitions/new pointing to api.both.

106
00:08:08.148 --> 00:08:10.570
Maybe the new is the necessary
it doesn't matter.

107
00:08:15.388 --> 00:08:17.010
Just to change the URL.

108
00:08:18.160 --> 00:08:19.440
Okay, does it make sense?

109
00:08:19.440 --> 00:08:22.020
If you look here,
when we are registering the function,

110
00:08:22.020 --> 00:08:24.350
we don't say that we want this only for
one method.

111
00:08:25.400 --> 00:08:26.400
It's for all the methods.

112
00:08:27.580 --> 00:08:32.232
There are some libraries out
there that can let you or

113
00:08:32.232 --> 00:08:39.540
there are ways that you can hook also the
method here, but for now it's like this.

114
00:08:39.540 --> 00:08:44.422
I'm going to restart my server
I'm going back to postman.

115
00:08:44.422 --> 00:08:49.325
So you can see that on postman I
am making a POST to local host

116
00:08:49.325 --> 00:08:57.240
http.3333apiexhibitionsnew with a body
of type JSON with something like this.

117
00:08:57.240 --> 00:09:01.941
Frontend Masters rocks, the best
courses on frontend, but also backend,

118
00:09:01.941 --> 00:09:03.490
mobile, data and more.

119
00:09:03.490 --> 00:09:06.000
That's the description, the image.

120
00:09:06.000 --> 00:09:10.010
In our case,
we have also added some things here.

121
00:09:10.010 --> 00:09:13.990
So we have a color,
a number, let's say red.

122
00:09:13.990 --> 00:09:17.429
And we have this is the exhibition,
remember?

123
00:09:18.800 --> 00:09:25.002
We've changed the original data
that I created currently open,

124
00:09:25.002 --> 00:09:30.650
so I can say currently open true,
and I can try to send this.

125
00:09:32.600 --> 00:09:40.225
And if I send this,
then the answer for was 201 Created.

126
00:09:40.225 --> 00:09:42.634
Can you see a status 201 Created, okay.

127
00:09:42.634 --> 00:09:47.610
Now, what happened?

128
00:09:47.610 --> 00:09:50.255
Of course it's not changing by my goal,
but

129
00:09:50.255 --> 00:09:53.984
it should be changing if it's working,
cross your fingers.

130
00:09:53.984 --> 00:09:58.450
If it's working,
it will change my memory collection.

131
00:09:58.450 --> 00:10:02.760
While the server is running,
it should be there.

132
00:10:02.760 --> 00:10:09.082
So now if I go back here and
I go to localhost/template,

133
00:10:09.082 --> 00:10:13.460
I go to my server side version.

134
00:10:13.460 --> 00:10:19.351
Now, if I scroll I have
front-end master rocks and

135
00:10:19.351 --> 00:10:23.600
you are there in the picture, okay?

136
00:10:24.730 --> 00:10:25.844
So it worked.

137
00:10:25.844 --> 00:10:28.952
So I send a post, okay and you are there.

