WEBVTT

1
00:00:00.000 --> 00:00:02.577
Before talking about type definitions

2
00:00:02.577 --> 00:00:06.645
we need to make some quick
examples working with the console.

3
00:00:06.645 --> 00:00:11.285
So I'm gonna create a new project, so
then we remember again, how that works.

4
00:00:11.285 --> 00:00:15.821
So what is that creating new for
folder first, I'm going to open a folder,

5
00:00:15.821 --> 00:00:17.480
and that was input output.

6
00:00:17.480 --> 00:00:22.275
We can start now, for example,
let's create a simple calculator.

7
00:00:22.275 --> 00:00:25.684
So I'm going to create a new folder for
calculator, okay?

8
00:00:25.684 --> 00:00:28.042
So we're going to create the calculator.

9
00:00:28.042 --> 00:00:29.565
There we are.

10
00:00:29.565 --> 00:00:32.652
You wanna save functions.go, okay, save.

11
00:00:32.652 --> 00:00:37.439
So, first step is to open a terminal and
we integrate the module.

12
00:00:37.439 --> 00:00:39.365
Does anyone remember how
to create the module?

13
00:00:41.721 --> 00:00:49.329
Go mod, init, and then the name
typically starting with the URL.

14
00:00:49.329 --> 00:00:56.374
I can say frontendmasters.com/go/calc,
any name we work, okay?

15
00:00:56.374 --> 00:01:01.183
And these, remember, the only thing that
we are doing here is creating a new file,

16
00:01:01.183 --> 00:01:04.912
in the folder, in the root of our
project with the name go.mod.

17
00:01:04.912 --> 00:01:06.586
That's the only thing we have here.

18
00:01:09.633 --> 00:01:16.399
And typically, we need also at least
one file that we can call it main.go.

19
00:01:16.399 --> 00:01:21.152
That we have package main, function, main.

20
00:01:21.152 --> 00:01:27.797
That's the boilerplate for
every go project, okay?

21
00:01:27.797 --> 00:01:36.286
So far we've been dealing with using the
format package that is a built-in package.

22
00:01:36.286 --> 00:01:39.248
It's a system library, standard library.

23
00:01:39.248 --> 00:01:44.541
It's a standard library for
sending outputs to the console,

24
00:01:44.541 --> 00:01:48.426
but also we can read
values from the console.

25
00:01:48.426 --> 00:01:52.808
That is something similar on CLIs,
Common Line Interfaces.

26
00:01:52.808 --> 00:01:57.770
And you can do common line interfaces
because we are doing a scripting for

27
00:01:57.770 --> 00:01:59.405
the operating system.

28
00:01:59.405 --> 00:02:03.919
So for example, we can,
create the variable for an operation.

29
00:02:03.919 --> 00:02:07.532
We are going to create this really small
kind, just to play with the console,

30
00:02:07.532 --> 00:02:08.936
it has nothing really fancy.

31
00:02:08.936 --> 00:02:13.271
And we're going to create two variables,
number 1 or N1,

32
00:02:13.271 --> 00:02:15.910
whatever number 1, and number 2.

33
00:02:15.910 --> 00:02:22.459
If both variables are of the same type,
you can use the type declaration 1s.

34
00:02:22.459 --> 00:02:26.669
So you don't need to say int,
int, like so.

35
00:02:26.669 --> 00:02:28.700
I mean, it's exactly the same.

36
00:02:28.700 --> 00:02:30.158
Here are two lines.

37
00:02:30.158 --> 00:02:32.136
You can use one line with a comma.

38
00:02:32.136 --> 00:02:36.828
And because they both have
the same end on the same int,

39
00:02:36.828 --> 00:02:41.839
we can just use int add the last
one only shortcuts, okay?

40
00:02:41.839 --> 00:02:43.089
Why it's complaining?

41
00:02:43.089 --> 00:02:46.591
I'm not using the variables yet,
which is okay.

42
00:02:46.591 --> 00:02:48.959
So this is our calculator.

43
00:02:48.959 --> 00:02:51.924
So we're going to start
talking to our format library.

44
00:02:51.924 --> 00:02:56.418
So I will start typing fmt,
fmt, return, and

45
00:02:56.418 --> 00:03:00.460
it should add the import for
us at the top.

46
00:03:00.460 --> 00:03:06.231
I'm going to start print the line,
something like calculator 1.0.

47
00:03:10.276 --> 00:03:14.206
Like a title, and
then we do some ASCII art, right?

48
00:03:14.206 --> 00:03:20.321
And some things like this.

49
00:03:20.321 --> 00:03:23.163
It would probably be horrible, but anyway.

50
00:03:23.163 --> 00:03:27.798
And the idea is that maybe we're gonna
start asking we have another print line

51
00:03:27.798 --> 00:03:29.020
for the operation.

52
00:03:29.020 --> 00:03:32.631
But which operation do
you want to perform?

53
00:03:32.631 --> 00:03:38.505
And we can say, you can say add,
subtract, multiply, or divide.

54
00:03:40.450 --> 00:03:43.956
Let me do this so it fits in the screen.

55
00:03:43.956 --> 00:03:48.590
So when the user to type in the console,
add, subtract, it can also be 1,

56
00:03:48.590 --> 00:03:50.514
2 or 3, it doesn't matter.

57
00:03:50.514 --> 00:03:57.335
So how to read a value from the console,
we're also going to use font or format.

58
00:03:57.335 --> 00:04:02.093
And we're going to call scanf.

59
00:04:02.093 --> 00:04:05.663
Scanf, we'll read text
from the standard input.

60
00:04:05.663 --> 00:04:09.765
The standard input here is the console,
the keyboard.

61
00:04:09.765 --> 00:04:13.646
But you can change that because you
can actually run a Go application and

62
00:04:13.646 --> 00:04:16.633
select the input and
the output at different buffers.

63
00:04:16.633 --> 00:04:21.692
It can be the network,
in this case, it's the console.

64
00:04:21.692 --> 00:04:23.174
So I'm going to just scanf.

65
00:04:23.174 --> 00:04:30.484
And scanf receives first a format,
and the format is similar to printf.

66
00:04:30.484 --> 00:04:34.460
So if we're expecting an integer,
we use %i.

67
00:04:34.460 --> 00:04:36.840
If we're expecting a float, f.

68
00:04:36.840 --> 00:04:39.431
If we're expecting a string, s.

69
00:04:39.431 --> 00:04:43.966
There is a table in the documentation
on all the possible elements

70
00:04:43.966 --> 00:04:45.210
that you can use.

71
00:04:45.210 --> 00:04:48.310
In fact, let me go to the website and
show you where that is.

72
00:04:48.310 --> 00:04:51.320
So we go to go.dev.

73
00:04:52.619 --> 00:04:56.326
Docs, we should find
it in standard library

74
00:04:56.326 --> 00:04:59.539
because this is an external library.

75
00:04:59.539 --> 00:05:03.549
We look here for format, fmt.

76
00:05:03.549 --> 00:05:06.930
And in the overview,
directly in the overview,

77
00:05:06.930 --> 00:05:11.231
when you get into the documentation,
you have all the verbs.

78
00:05:11.231 --> 00:05:15.330
So v is a value, so we try to find the
value, and here you have all the options.

79
00:05:15.330 --> 00:05:19.703
Booleans for integers,
for floating points,

80
00:05:19.703 --> 00:05:25.617
based on what do you want to output or
what do you want as an input.

81
00:05:25.617 --> 00:05:30.179
In fact, later we will use some of
these more complicated formatting,

82
00:05:30.179 --> 00:05:34.145
such as what if you want to float
with only two decimal values.

83
00:05:34.145 --> 00:05:39.192
Well, playing with the percentage
variable, we can change that.

84
00:05:39.192 --> 00:05:43.788
We can specify how we want
to format a value, okay?

85
00:05:43.788 --> 00:05:47.218
So going back here, so we want scanf, and

86
00:05:47.218 --> 00:05:51.532
the next thing is where do
you want to save the value.

87
00:05:51.532 --> 00:05:54.120
So we have a variable for
that, it's called operation.

88
00:05:56.757 --> 00:06:04.176
Now, in theory, this should read
the operation., in theory, why?

89
00:06:04.176 --> 00:06:06.571
Scan is a function, right?

90
00:06:06.571 --> 00:06:10.331
It's a function, how do I know
because I have parentheses executing,

91
00:06:10.331 --> 00:06:11.343
it's a function.

92
00:06:11.343 --> 00:06:15.058
And passing a variable as an argument,
what happens with that argument?

93
00:06:17.674 --> 00:06:19.559
It's been copied.

94
00:06:19.559 --> 00:06:21.909
It's been passed by value.

95
00:06:21.909 --> 00:06:28.209
So if I want the scanf to change
the contents of my variable,

96
00:06:28.209 --> 00:06:33.130
I must send the address of my variable,
&amp;%.

97
00:06:33.130 --> 00:06:34.255
Does it make sense?

98
00:06:34.255 --> 00:06:36.533
Because if not, it's not gonna work.

99
00:06:36.533 --> 00:06:41.317
If you're expecting a function to change,
to modify your variables,

100
00:06:41.317 --> 00:06:45.158
you always need to send the phone
number of the variable.

101
00:06:45.158 --> 00:06:49.589
So then that function
can call the variable.

102
00:06:49.589 --> 00:06:52.709
Don't create a copy of it.

103
00:06:52.709 --> 00:06:56.244
So then I can do a switch and
then ask, okay,

104
00:06:56.244 --> 00:07:00.172
let's see what do we have for
operation, okay?

105
00:07:00.172 --> 00:07:02.586
And based on that,
we do one thing or the other.

106
00:07:02.586 --> 00:07:06.513
But before doing that,
I can also ask for the two numbers.

107
00:07:06.513 --> 00:07:09.980
So it's pretty simple just to play
with this and see if that works.

108
00:07:09.980 --> 00:07:13.237
So enter first number, and

109
00:07:13.237 --> 00:07:18.623
we are going to do another scanf for
a number.

110
00:07:18.623 --> 00:07:23.876
And in where we are doing the charts,
I can do floats as well,

111
00:07:23.876 --> 00:07:27.081
and save this as &amp;%1, remember?

112
00:07:27.081 --> 00:07:31.793
&amp;% because I want that function to

113
00:07:31.793 --> 00:07:36.826
modify this number 2, there we are.

114
00:07:36.826 --> 00:07:39.289
And then it's just a couple of case.

115
00:07:39.289 --> 00:07:45.410
So if it's ad,
we're going to print line or return.

116
00:07:45.410 --> 00:07:50.003
In this case,
we are going to print line number 1 plus

117
00:07:50.003 --> 00:07:53.997
number 2 because I'm adding those numbers.

118
00:07:53.997 --> 00:07:57.303
When I need to break now,

119
00:07:57.303 --> 00:08:03.293
I will quickly do this subtract, multiply.

120
00:08:03.293 --> 00:08:09.161
I got great constants for these strings,
that's probably a good idea.

121
00:08:09.161 --> 00:08:12.687
Minus, multiply, division.

122
00:08:14.293 --> 00:08:15.120
That should work.

123
00:08:17.804 --> 00:08:21.813
And doing everything in the main function,
that's typically not the best

124
00:08:21.813 --> 00:08:25.325
of the ideas, but we are playing
with something different here.

125
00:08:25.325 --> 00:08:31.756
With the format, package and also with
now that we know what the pointer is,

126
00:08:31.756 --> 00:08:36.395
we understand why we need to pass &amp;%,
the variable.

127
00:08:36.395 --> 00:08:40.415
So it's like passing the empty box and
said hey, fill me the box, okay?

128
00:08:40.415 --> 00:08:45.673
Put me the number in the box or put me the
string in the box, this is the empty box.

129
00:08:48.320 --> 00:08:52.825
That's why I'm not defining an initial
value for operations, I don't need to.

130
00:08:52.825 --> 00:08:54.492
I don't need to set a value.

131
00:08:54.492 --> 00:09:01.459
So we have %s for strings,
and we have an i here.

132
00:09:01.459 --> 00:09:06.373
If we go to the documentation
that we have here for the format,

133
00:09:06.373 --> 00:09:08.557
and we search for numbers.

134
00:09:08.557 --> 00:09:12.215
Yeah, you can also send pointers
if you wanna see a pointer in

135
00:09:12.215 --> 00:09:14.532
a different place how to send slides.

136
00:09:14.532 --> 00:09:20.495
And if I wanna receive integers,
it depends on which base do you want.

137
00:09:20.495 --> 00:09:24.971
I doesn't contain a base,
typically we write numbers in base 10,

138
00:09:24.971 --> 00:09:28.143
that's the normal numbers,
decimal numbers.

139
00:09:28.143 --> 00:09:34.722
So we can use D instead of I,
so %D, like so.

140
00:09:34.722 --> 00:09:37.912
And then we can run this and

141
00:09:37.912 --> 00:09:44.014
say when a multiply 4 by 3 and
the answer is 12.

142
00:09:44.014 --> 00:09:47.945
So it seems like it's working, right?

143
00:09:47.945 --> 00:09:51.374
It's just that, not the big deal,
not the big app.

144
00:09:51.374 --> 00:09:54.524
But we have been dealing
with pointers here.

145
00:09:54.524 --> 00:09:59.221
And now we understand how that works and
how to receive values from the scanner.

146
00:09:59.221 --> 00:10:01.185
The scanner scans the input.

147
00:10:01.185 --> 00:10:03.835
Again, the input can be something
different than the keyboard.

148
00:10:03.835 --> 00:10:08.673
By default, the keyboard, but for example
you can pipe this in some operating

149
00:10:08.673 --> 00:10:13.235
systems, so instead of the keyword it
can be the output from another app.

150
00:10:13.235 --> 00:10:18.948
So you can pipe the output of one app
as an input of the next application.

