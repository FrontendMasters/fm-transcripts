WEBVTT

1
00:00:00.182 --> 00:00:02.872
Let's talk a little bit
about multi-platform.

2
00:00:02.872 --> 00:00:06.930
So we mentioned that we are going for
deployment,

3
00:00:06.930 --> 00:00:11.189
we're going to build an app,
a binary file, okay?

4
00:00:11.189 --> 00:00:14.912
And for that, we can select different
platforms and different operating systems.

5
00:00:14.912 --> 00:00:16.961
What's the difference between an OS and
a platform?

6
00:00:16.961 --> 00:00:20.079
The platform typically is an architecture,
can be the CPU.

7
00:00:20.079 --> 00:00:23.070
For example, now we have on the Mac
two different architectures.

8
00:00:23.070 --> 00:00:27.787
We have Intel based Max and
we have ARM, like the M1 chip,

9
00:00:27.787 --> 00:00:33.084
the Apple Silicon chips,
that it's a different architecture,

10
00:00:33.084 --> 00:00:36.471
the same OS but different architecture.

11
00:00:36.471 --> 00:00:43.103
And because we are not creating apps for
a virtual machine, we are creating app for

12
00:00:43.103 --> 00:00:47.925
a platform, we need to pick both DOS and
the architecture.

13
00:00:47.925 --> 00:00:54.604
Also Go can compile to WebAssembly.

14
00:00:54.604 --> 00:00:56.988
Does anyone know what WebAssembly is?

15
00:00:56.988 --> 00:00:59.521
Have you ever heard about WebAssembly?

16
00:00:59.521 --> 00:01:04.615
No, WebAssembly is an ability
of the web platform, so

17
00:01:04.615 --> 00:01:10.044
on browsers, talking about browsers,
to execute native

18
00:01:10.044 --> 00:01:15.716
code that you can write from
different languages such as Go.

19
00:01:15.716 --> 00:01:19.783
So today it's being used for,
typically for

20
00:01:19.783 --> 00:01:23.207
games when you have games on the web for

21
00:01:23.207 --> 00:01:27.722
compression, decompression, cryptography.

22
00:01:27.722 --> 00:01:32.750
It can also be used for cryptocurrencies
if you wanna connect to a blockchain.

23
00:01:32.750 --> 00:01:36.258
All that stuff,
it's better to write that in native code.

24
00:01:36.258 --> 00:01:39.381
Now, it's being used also for
machine learning, deep learning.

25
00:01:39.381 --> 00:01:43.318
So artificial intelligence,
if you want to run AI models,

26
00:01:43.318 --> 00:01:47.035
client-side, you can also
do that with WebAssembly.

27
00:01:47.035 --> 00:01:52.353
Meaning that, for example, if you want to
do AI on the web today, most of the time

28
00:01:52.353 --> 00:01:57.127
you don't wanna do that directly with
JavaScript you want to do that with

29
00:01:57.127 --> 00:02:02.400
a low-level language and then create
a WebAssembly module also known as WASM.

30
00:02:02.400 --> 00:02:07.248
And Go can compile those modules
that then you can execute

31
00:02:07.248 --> 00:02:09.781
in a web app from JavaScript.

32
00:02:09.781 --> 00:02:17.305
I will update this because it's
not transpire, it's transpile.

33
00:02:17.305 --> 00:02:22.018
So, it can even transpile
to frontend JavaScript.

34
00:02:22.018 --> 00:02:25.057
Remember I mentioned that
you can do frontend with Go?

35
00:02:25.057 --> 00:02:27.901
I don't know who will do that, actually.

36
00:02:27.901 --> 00:02:31.698
But, first, what's a transpilation?

37
00:02:31.698 --> 00:02:33.621
Actually, it takes one source code.

38
00:02:33.621 --> 00:02:37.829
And it converts that source
code into another source code.

39
00:02:37.829 --> 00:02:41.147
So for example,
TypeScript takes TypeScript and

40
00:02:41.147 --> 00:02:43.916
the output of TypeScript is JavaScript.

41
00:02:43.916 --> 00:02:50.046
Well with Go, you can also write,
Go and get JavaScript in as the output.

42
00:02:50.046 --> 00:02:51.813
It's not being used, okay?

43
00:02:51.813 --> 00:02:55.747
It was an experiment or
something like that.

44
00:02:55.747 --> 00:02:59.718
There is a list and
you have the link here.

45
00:02:59.718 --> 00:03:02.430
You don't need to follow the link,
but I just wanna show you.

46
00:03:02.430 --> 00:03:05.008
All the operating systems and

47
00:03:05.008 --> 00:03:09.037
architectures compatible
with Go right now.

48
00:03:09.037 --> 00:03:13.762
So you will find a lot of
operating systems freebsd, iOS,

49
00:03:13.762 --> 00:03:17.145
can you create iOS applications with Go?

50
00:03:17.145 --> 00:03:19.474
Well, yes and no.

51
00:03:19.474 --> 00:03:21.059
Let me explain what that means.

52
00:03:21.059 --> 00:03:28.922
You can create a library of code that can
be executed on that OS on that platform.

53
00:03:28.922 --> 00:03:33.908
But for creating the user interface
to connect to the iOS SDK and

54
00:03:33.908 --> 00:03:40.607
actually talk to the, to the touch screen,
it's not going to be available from Go.

55
00:03:40.607 --> 00:03:43.903
So it's more for creating a library or

56
00:03:43.903 --> 00:03:49.568
creating low level code that then
can be linked from Swift on iOS.

57
00:03:49.568 --> 00:03:51.565
Similar that to WebAssembly,

58
00:03:51.565 --> 00:03:55.952
when you create a module that then
you need to link from JavaScript.

59
00:03:55.952 --> 00:03:57.983
Also Android is here.

60
00:03:57.983 --> 00:04:03.438
But it doesn't mean that you can create
fully an application for Android in Go.

61
00:04:03.438 --> 00:04:07.230
It's more for
libraries like it can be logic libraries,

62
00:04:07.230 --> 00:04:11.022
it can be something again,
you're the new Netflix, and

63
00:04:11.022 --> 00:04:15.762
then you have your own video encoder and
decoder while all the parts that

64
00:04:15.762 --> 00:04:20.753
encodes the video receives the bytes and
the fan compress can be done in Go.

65
00:04:20.753 --> 00:04:24.650
And then you can compile the iOS version,
the Android version,

66
00:04:24.650 --> 00:04:28.056
the WebAssembly version for
the web, and so on, okay?

67
00:04:28.056 --> 00:04:34.234
So here you have all the operating
systems, and here all the architectures.

68
00:04:34.234 --> 00:04:36.935
So this has to do with the CPU.

69
00:04:36.935 --> 00:04:41.815
So amd, arm, mips,
there are some mobile Android

70
00:04:41.815 --> 00:04:46.364
devices using mips,
risks, and here is wasm.

71
00:04:46.364 --> 00:04:50.192
So wasm, that's WebAssembly,
is one architecture.

72
00:04:50.192 --> 00:04:56.757
So actually, from any computer,
you can create binaries for

73
00:04:56.757 --> 00:05:00.807
each combination of OS and platform.

74
00:05:00.807 --> 00:05:05.498
So when you make a compilation,
you need to pick your architecture and

75
00:05:05.498 --> 00:05:07.178
your operating system.

76
00:05:07.178 --> 00:05:11.959
By default, when you're building an app,
it's using My Architecture and MyOS.

77
00:05:11.959 --> 00:05:15.145
So I'm on a Mac with
an Apple Silicon chip,

78
00:05:15.145 --> 00:05:18.693
it's going to create an executable for
my Mac.

79
00:05:18.693 --> 00:05:26.077
But also for my Mac, I can create
a .executable.exe for Windows.

80
00:05:26.077 --> 00:05:27.851
I won't be able to run it.

81
00:05:27.851 --> 00:05:30.945
But I will be able to create it,
to build it.

82
00:05:30.945 --> 00:05:33.229
So I can build iOS, Android.

83
00:05:33.229 --> 00:05:36.943
You can build Mac binary
from Windows just by using

84
00:05:36.943 --> 00:05:40.844
the Go [INAUDIBLE] just by
picking the architecture.

85
00:05:40.844 --> 00:05:45.811
So common use cases for Go, we want cover
in this course, all the UC cases, but

86
00:05:45.811 --> 00:05:48.386
the language is just the same language.

87
00:05:48.386 --> 00:05:53.628
Web services, so
you can create restful services or

88
00:05:53.628 --> 00:05:58.644
microservices to provide
services to frontend.

89
00:05:58.644 --> 00:06:02.780
The frontend can be a website,
can be a mobile app, whatever.

90
00:06:02.780 --> 00:06:06.057
Web applications, so
you can actually serve web application.

91
00:06:06.057 --> 00:06:10.406
You can actually create
a web server directly Go.

92
00:06:10.406 --> 00:06:15.342
It's not common for everything for
every website but for some situations,

93
00:06:15.342 --> 00:06:20.290
it's been used for some micro websites
micro solutions is used for DevOps.

94
00:06:20.290 --> 00:06:24.455
For creating dekstop apps, you can create
desktop application like Windows or

95
00:06:24.455 --> 00:06:27.078
Mac applications that you
open you have a window.

96
00:06:27.078 --> 00:06:30.102
It's not like the most common
use case these days, but

97
00:06:30.102 --> 00:06:31.884
you can still use that for that.

98
00:06:31.884 --> 00:06:36.195
Machine learning, so
Go is really fast for machine learning.

99
00:06:36.195 --> 00:06:40.476
Probably if you have get into AI and
how to execute models and

100
00:06:40.476 --> 00:06:44.940
train models most of the time,
we're talking about Python.

101
00:06:44.940 --> 00:06:48.660
But Python is really slow, okay?

102
00:06:48.660 --> 00:06:51.640
So that's okay for
learning and for initial part.

103
00:06:51.640 --> 00:06:57.380
But when you have really big models that
you need to train or you need to execute,

104
00:06:57.380 --> 00:07:01.935
it's better to use Go or
other languages, not Python, okay?

105
00:07:01.935 --> 00:07:05.446
And much more, because it's multipurpose.

106
00:07:05.446 --> 00:07:10.252
We will focus here on learning
the fundamentals that then you can apply

107
00:07:10.252 --> 00:07:14.338
everywhere and then on web services and
web applications.

108
00:07:14.338 --> 00:07:15.456
So we'll focus on that.

109
00:07:15.456 --> 00:07:19.890
That is one of the most
used use cases today.

