WEBVTT

1
00:00:00.290 --> 00:00:03.923
So before seeing interfaces that is
the last part that it's actually pretty

2
00:00:03.923 --> 00:00:07.240
simple, let's create
a new display with this.

3
00:00:07.240 --> 00:00:12.160
So I'm going to create another version,
so, again, we know the deal open folder.

4
00:00:13.270 --> 00:00:18.463
This is going to read let's say front
end masters, FEM, or front end math FEM.

5
00:00:21.942 --> 00:00:25.380
And we know the deal,

6
00:00:25.380 --> 00:00:29.584
it's first go mod init and

7
00:00:29.584 --> 00:00:38.587
a name frontendmasters.com/go/server
whatever.

8
00:00:38.587 --> 00:00:44.778
And may not go with package main,
package main, and function main,

9
00:00:44.778 --> 00:00:50.451
it's always the same,
we always start in the same way, okay?

10
00:00:50.451 --> 00:00:53.980
And we are going to start working
with creating our data structure.

11
00:00:53.980 --> 00:00:58.695
So let's say we wanna create the database
later or something like that or

12
00:00:58.695 --> 00:01:00.406
the JSON base structure.

13
00:01:00.406 --> 00:01:04.106
And so we are going to create
the classes of our project,

14
00:01:04.106 --> 00:01:08.830
it's going to be simple but just to
play with a couple of features that we

15
00:01:08.830 --> 00:01:11.780
have to understand how this work, okay?

16
00:01:11.780 --> 00:01:13.894
So for that I will create a new package,

17
00:01:13.894 --> 00:01:17.190
remember how to create
the package a folder?

18
00:01:17.190 --> 00:01:22.904
So we're going to folder we can
call it data, or model if you want,

19
00:01:22.904 --> 00:01:26.998
we don't have one unique
design pattern here.

20
00:01:26.998 --> 00:01:30.480
And do we need any special
file within the package?

21
00:01:30.480 --> 00:01:35.890
No, just go files with any name,
remember, names are not important.

22
00:01:35.890 --> 00:01:40.345
We're just going to call this, for
example, we can start creating

23
00:01:40.345 --> 00:01:45.510
the data structure for instructor,
so I'm the instructor of the course.

24
00:01:45.510 --> 00:01:49.606
So we're going to create the course with
instructor, not a big deal, nothing fancy,

25
00:01:49.606 --> 00:01:52.590
it's a big package data,
that's the first part, okay?

26
00:01:52.590 --> 00:01:58.200
So, we're going to create the instructor,
so we wanna do something like this.

27
00:01:58.200 --> 00:02:01.647
Okay, class instructor but
no, this is not go,

28
00:02:01.647 --> 00:02:06.370
we don't create classes, so
what we are going to create is a type.

29
00:02:07.560 --> 00:02:12.821
The type is going to be
called Instructor like so,

30
00:02:12.821 --> 00:02:17.970
capital I will be better,
we wanna export this.

31
00:02:19.390 --> 00:02:22.220
Are there use cases to make it private?

32
00:02:22.220 --> 00:02:27.048
Yes, just if you have some data types
that are only internal to the backlash,

33
00:02:27.048 --> 00:02:28.400
it's fine, right?

34
00:02:28.400 --> 00:02:35.730
But it's not common,
then the struct keyword and calibrates.

35
00:02:35.730 --> 00:02:41.146
And here we'll say something like,
okay, has an integer, has an id,

36
00:02:41.146 --> 00:02:47.670
it's a name, first name can be first name,
last name, okay, something like that.

37
00:02:48.850 --> 00:02:54.169
No score can be an integer and
we can say that for now we're good.

38
00:02:59.192 --> 00:03:02.170
It will complain, okay,
by the way, why is it complaining?

39
00:03:02.170 --> 00:03:06.580
Because, yeah, we are not using it, but
it says, every time we create a structure,

40
00:03:06.580 --> 00:03:07.520
it will complain.

41
00:03:09.260 --> 00:03:14.819
Well, there is an explanation of why
it's complaining, that I will re-factor

42
00:03:14.819 --> 00:03:19.990
this in a minute, so I will wait to see
if we can find why it's complaining.

43
00:03:21.060 --> 00:03:23.638
So let's say I wanna go to main.go now and

44
00:03:23.638 --> 00:03:29.170
use that class, it's not a class,
it's a structure, remember, struct.

45
00:03:29.170 --> 00:03:36.130
So first, to use that, I need to use data,
okay, data, return, it adds my import,

46
00:03:36.130 --> 00:03:42.156
remember the import has a prefix of
my modules name, and then the folder.

47
00:03:42.156 --> 00:03:47.090
Data and you can change that
with an alias if you wanna

48
00:03:47.090 --> 00:03:51.688
change that,
if not data the last part of the that

49
00:03:51.688 --> 00:03:56.418
URLs kind of package name
will be the object name.

50
00:03:56.418 --> 00:03:59.160
And so
then how to create one of those objects?

51
00:03:59.160 --> 00:04:04.127
So I gave it a variable, I wanna create
an instructor, Max, that's me, so

52
00:04:04.127 --> 00:04:05.940
what's the type?

53
00:04:05.940 --> 00:04:09.199
Well, the type it should
be data.instructor,

54
00:04:09.199 --> 00:04:11.770
do I need the data prefix?

55
00:04:11.770 --> 00:04:16.219
Yes because if I don't have it,
it doesn't know where

56
00:04:16.219 --> 00:04:20.900
that thing is coming from,
so I need data.Instructor.

57
00:04:20.900 --> 00:04:24.013
For every type if it's
from another package, yep.

58
00:04:26.434 --> 00:04:30.237
You could create an alias of that
type locally in your package,

59
00:04:30.237 --> 00:04:34.130
that weighs to work with that,
but typically there's no need.

60
00:04:35.330 --> 00:04:39.160
So, and how do you create one, okay?

61
00:04:39.160 --> 00:04:43.780
In fact, instead of using var,
what if I wanna use this?

62
00:04:45.610 --> 00:04:50.094
I need to construct 1, okay,
so how do you construct 1?

63
00:04:50.094 --> 00:04:54.921
To construct one, we call the constructor,

64
00:04:54.921 --> 00:04:57.720
how's the constructor?

65
00:04:57.720 --> 00:04:59.593
Just curly braces and

66
00:04:59.593 --> 00:05:05.109
of course it's complaining
because I'm not using the value,

67
00:05:05.109 --> 00:05:10.740
for now, let's just print
this just to avoid errors.

68
00:05:10.740 --> 00:05:16.053
Because sometimes you don't know if,
mostly when you're learning Go,

69
00:05:16.053 --> 00:05:20.851
you don't know if it's a real syntax
issue until you go and see it or

70
00:05:20.851 --> 00:05:23.038
the anxiety issue from Go.

71
00:05:23.038 --> 00:05:30.200
So that's actually equivalent to what you
are typically used to the new instructor.

72
00:05:31.880 --> 00:05:33.000
Is it the only way to that?

73
00:05:33.000 --> 00:05:38.812
No, there is also a new keyword available,
also I make that we will see later.

74
00:05:38.812 --> 00:05:42.966
But we don't typically use them for
standard situation, which has used this,

75
00:05:42.966 --> 00:05:46.321
but it's not like new like that,
it's more a function, okay.

76
00:05:46.321 --> 00:05:51.740
It's actually a function, something
like this, but we don't use it, okay?

77
00:05:51.740 --> 00:05:55.650
It's there, you can also use it,
but it's not what we typically use.

78
00:05:55.650 --> 00:05:58.513
So we use this other constructor,
and in the constructor,

79
00:05:58.513 --> 00:06:01.830
I can also work with the properties,
give me a second for that.

80
00:06:01.830 --> 00:06:04.542
Let's say when I set my name, so

81
00:06:04.542 --> 00:06:09.881
it says my name is Maximiliano,
try to type that fast, right?

82
00:06:09.881 --> 00:06:13.122
It's not working, why?

83
00:06:13.122 --> 00:06:15.080
&gt;&gt; Cuz its first name?

84
00:06:15.080 --> 00:06:20.026
It was first name, that's why,
but isn't working either, why?

85
00:06:20.026 --> 00:06:22.722
Any you guess what's going on?

86
00:06:22.722 --> 00:06:25.992
I got read the problem,
it says first name and

87
00:06:25.992 --> 00:06:30.070
define, I said, no, but
we do have a first name.

88
00:06:30.070 --> 00:06:32.210
&gt;&gt; Cuz you didn't create a constructor?

89
00:06:32.210 --> 00:06:35.182
&gt;&gt; No, in fact,
you don't create constructors,

90
00:06:35.182 --> 00:06:37.576
constructors are created by default.

91
00:06:37.576 --> 00:06:41.798
We can create factories, that is a design
pattern, I will show you in a minute,

92
00:06:41.798 --> 00:06:45.087
that's not the problem,
it's just that it doesn't exist.

93
00:06:48.646 --> 00:06:54.030
Hint, you know the answer,
I'm adding more pressure on you.

94
00:06:56.350 --> 00:06:57.620
You know the answer.

95
00:06:57.620 --> 00:06:59.530
&gt;&gt; We need to make a method.

96
00:06:59.530 --> 00:07:02.195
&gt;&gt; No, you don't need to make, I mean,
you can create getter or a setter,

97
00:07:02.195 --> 00:07:03.130
can you create a setter?

98
00:07:03.130 --> 00:07:04.114
Yeah, is it necessary?

99
00:07:04.114 --> 00:07:06.149
No.

100
00:07:06.149 --> 00:07:07.882
&gt;&gt; Lowercase letter.

101
00:07:07.882 --> 00:07:09.445
&gt;&gt; Lowercase letter?

102
00:07:09.445 --> 00:07:14.734
It's private, that's a private property,

103
00:07:14.734 --> 00:07:20.146
yeah, that's how it work,
I need these properties

104
00:07:20.146 --> 00:07:25.441
capitalized if I want to
use them from the outside.

105
00:07:25.441 --> 00:07:30.364
I'm sorry to disappoint you like this, so

106
00:07:30.364 --> 00:07:37.494
now I can use the property and
now also I can use a constructor.

107
00:07:37.494 --> 00:07:38.658
When I was doing this,

108
00:07:38.658 --> 00:07:43.000
it wasn't suggesting me anything because
we didn't have that public property.

109
00:07:43.000 --> 00:07:47.820
But now I can I can define the properties
here, like in JSON, remember?

110
00:07:47.820 --> 00:07:52.319
So I can set my last name,
here, also, in the constructor,

111
00:07:52.319 --> 00:07:57.720
I can set one or all the properties
in the constructor or non properties.

112
00:08:00.550 --> 00:08:03.652
The constructor is created automatically,

113
00:08:03.652 --> 00:08:07.658
I cannot change it,
I cannot replace it, it is what it is.

114
00:08:19.395 --> 00:08:20.859
Okay, make sense?

115
00:08:24.059 --> 00:08:28.340
So now you know,
is it possible to have private properties?

116
00:08:28.340 --> 00:08:32.710
Yes, like on ROP, sometimes you want
private property, maybe the ID is private

117
00:08:32.710 --> 00:08:36.580
and you can only get it from a function,
from a method, okay?

118
00:08:36.580 --> 00:08:38.080
So how to add a method to it?

119
00:08:38.080 --> 00:08:40.478
For example,
if I wanna print the instructor details,

120
00:08:40.478 --> 00:08:44.220
I'm gonna create the pretty print
like a nice print of the instructor.

121
00:08:44.220 --> 00:08:46.749
Well, I create the method, how?

122
00:08:46.749 --> 00:08:47.690
Within the type?

123
00:08:47.690 --> 00:08:51.626
No, outside of the type,
like a global thing, in fact,

124
00:08:51.626 --> 00:08:53.680
it can be on a different file.

125
00:08:55.340 --> 00:08:58.736
The only important part is that it
should be in the same package I mean,

126
00:08:58.736 --> 00:08:59.897
don't do this at home.

127
00:08:59.897 --> 00:09:05.501
But I can create methods go on the same
package, and I can add method on

128
00:09:05.501 --> 00:09:11.840
a different file because the important
part is to be in the same package.

129
00:09:11.840 --> 00:09:17.400
I will change it, but just to prove that
that works, how do you create the method?

130
00:09:17.400 --> 00:09:23.810
It's a function with this special input
argument first, of type instructor.

131
00:09:23.810 --> 00:09:28.536
I will call this I and
print, that responds

132
00:09:28.536 --> 00:09:33.700
with a string, a strong, no, a string.

133
00:09:33.700 --> 00:09:39.442
Well, maybe the instructor is strong but
when I'm here,

134
00:09:39.442 --> 00:09:45.970
I'm gonna call fmt fprintf,
I'm going to return that.

135
00:09:45.970 --> 00:09:50.321
And I will say the format string
is going to be a value for

136
00:09:50.321 --> 00:09:54.764
the first name, or
a value with the last name, a comma,

137
00:09:54.764 --> 00:09:59.650
the first name, in parentheses,
the score, whatever.

138
00:09:59.650 --> 00:10:04.111
The score was a number, so
let's use d for decimal digit, so

139
00:10:04.111 --> 00:10:10.040
then we take the instructor dot last name,
the instructor dot first name.

140
00:10:10.040 --> 00:10:14.430
Be careful because here the order is
important, can you change the order?

141
00:10:14.430 --> 00:10:17.560
You can, don't try, don't do that, right?

142
00:10:17.560 --> 00:10:23.672
But here you can say that here
you wanna use the first argument,

143
00:10:23.672 --> 00:10:28.052
things like that but now,
there is no need for

144
00:10:28.052 --> 00:10:31.419
that, you just set this in order.

145
00:10:34.772 --> 00:10:39.590
Because they are in the same package,

146
00:10:39.590 --> 00:10:45.161
I can do that, so
now I can print Max print but

147
00:10:45.161 --> 00:10:48.484
it's not working, why?

148
00:10:49.616 --> 00:10:51.032
Why?

149
00:10:51.032 --> 00:10:55.697
Capital P, Capital P,

150
00:10:55.697 --> 00:10:59.810
if not it's not available,
get used to that.

151
00:11:01.470 --> 00:11:07.107
And now if I run this, go run dot,
I say Ferroviaria and NEMA zero,

152
00:11:07.107 --> 00:11:12.160
okay, as an instructor that's
my score right now, yeah.

153
00:11:13.960 --> 00:11:16.890
We should add an emotion Ukraine
emotion when they give you a zero.

154
00:11:18.610 --> 00:11:20.955
Okay, it doesn't make sense, kind of?

155
00:11:20.955 --> 00:11:25.852
You can see that working with capital
letters is one of the things that you

156
00:11:25.852 --> 00:11:30.526
will need to train your brain, so
it takes time to get used to that.

157
00:11:30.526 --> 00:11:36.037
That's a problem, you will see that a lot
initially until you get used to that,

158
00:11:36.037 --> 00:11:37.448
okay, make sense?

159
00:11:37.448 --> 00:11:37.990
Any question?

160
00:11:39.160 --> 00:11:46.130
&gt;&gt; Can I see the instructor guide again
&gt;&gt; Yeah sure And

161
00:11:46.130 --> 00:11:51.990
by the way, was it me that created all
this space that is nicely tabulated?

162
00:11:51.990 --> 00:11:56.035
No, when you save, in fact you can
change this a little bit, like so,

163
00:11:56.035 --> 00:11:59.000
when you save it's
reformatting the file for you.

164
00:11:59.000 --> 00:12:02.650
You can disable that if you want,
it's part of the plugin settings.

165
00:12:02.650 --> 00:12:07.897
Again, I know that typically you
set the methods on the same file,

166
00:12:07.897 --> 00:12:14.715
and by the way, the import should
go at the top, Like so, so yeah,

167
00:12:14.715 --> 00:12:18.970
this probably makes more sense, but it's
not mandatory, I mean, it's up to you.

168
00:12:20.240 --> 00:12:23.837
Remember, everything in the same
package goes to the same bag,

169
00:12:23.837 --> 00:12:25.913
it doesn't matter which file it is.

170
00:12:25.913 --> 00:12:30.450
So that's how you set structures
with properties and methods.

