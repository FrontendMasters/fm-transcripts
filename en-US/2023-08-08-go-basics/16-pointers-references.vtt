WEBVTT

1
00:00:00.260 --> 00:00:04.045
Let's work with pointer for
the first time.

2
00:00:04.045 --> 00:00:06.804
I know it sounds scary, okay?

3
00:00:06.804 --> 00:00:08.621
But let's think about this.

4
00:00:08.621 --> 00:00:16.805
So I have a variable, I'm going to create
a variable that says I know my age.

5
00:00:16.805 --> 00:00:18.220
I will say that I am 22.

6
00:00:18.220 --> 00:00:22.981
Yeah, I'm 22 you can see that, it's
complaining because I'm not using the age.

7
00:00:22.981 --> 00:00:28.910
And let's say that I'm going
to format Println that age,

8
00:00:28.910 --> 00:00:33.510
but then I have a function
with a name birthday

9
00:00:33.510 --> 00:00:37.275
that receives the age as an integer.

10
00:00:37.275 --> 00:00:43.725
And it's saying ++,
++ is the same the same as + = 1,

11
00:00:43.725 --> 00:00:49.541
and is the same as age = age + 1,
shortcuts, okay.

12
00:00:49.541 --> 00:00:53.405
If you're coming from other language,
probably you have seen that before.

13
00:00:53.405 --> 00:00:55.147
So let's run this.

14
00:00:57.496 --> 00:00:59.152
And it says 22.

15
00:00:59.152 --> 00:01:01.280
Let me remove all the a, and b, and

16
00:01:01.280 --> 00:01:04.453
other stuff that we have
there that we don't need.

17
00:01:04.453 --> 00:01:06.801
Also, yeah.

18
00:01:06.801 --> 00:01:08.735
Okay, yeah.

19
00:01:10.843 --> 00:01:15.694
So it says 22, cuz we have a 2,
I don't know where that's coming from,

20
00:01:15.694 --> 00:01:16.780
but it's 22.

21
00:01:16.780 --> 00:01:19.747
Why?

22
00:01:19.747 --> 00:01:22.949
2 move the age, right?

23
00:01:22.949 --> 00:01:28.066
So because I'm saying age + 1.

24
00:01:28.066 --> 00:01:30.052
Well, maybe you're saying,
hey, you didn't call birthday.

25
00:01:30.052 --> 00:01:34.167
Okay, you're right, so
someone is still awake.

26
00:01:34.167 --> 00:01:35.427
Okay, cool.

27
00:01:35.427 --> 00:01:36.400
Let's see.

28
00:01:36.400 --> 00:01:40.162
Go run, 22.

29
00:01:40.162 --> 00:01:46.869
But let's say maybe it didn't execute,
so let's call it a couple of times.

30
00:01:46.869 --> 00:01:50.025
It's still 22.

31
00:01:50.025 --> 00:01:51.349
Why?

32
00:01:51.349 --> 00:01:54.074
&gt;&gt; Because it cloned it when it
passed it into the function.

33
00:01:54.074 --> 00:01:59.793
&gt;&gt; Exactly, because it's cloning the
value, it's passing the value as a copy.

34
00:01:59.793 --> 00:02:03.094
So when I'm calling birthday, actually,

35
00:02:03.094 --> 00:02:07.832
it's creating the variable of the 22 and
passing that copy.

36
00:02:07.832 --> 00:02:12.035
And we are incrementing the copy,
not the original variable.

37
00:02:15.223 --> 00:02:17.883
A lot of people would like to see
something like that in the real

38
00:02:17.883 --> 00:02:18.608
world, right?

39
00:02:18.608 --> 00:02:21.681
But when it's your birthday,

40
00:02:21.681 --> 00:02:27.597
it's someone else that is
counting years and not your age.

41
00:02:27.597 --> 00:02:33.267
So that's why it doesn't
work by default because

42
00:02:33.267 --> 00:02:39.613
every argument is passed
automatically here as a copy.

43
00:02:39.613 --> 00:02:44.469
So to deal with that,
we can receive instead of

44
00:02:44.469 --> 00:02:48.454
an integer, a pointer to an integer,

45
00:02:48.454 --> 00:02:53.442
it's like a reference to that integer,
okay?

46
00:02:53.442 --> 00:02:59.415
And that's a star, it's a star before
the type, it's a pointer to an integer.

47
00:02:59.415 --> 00:03:05.607
It's not the age, it's like the phone
number of someone that has the age inside,

48
00:03:05.607 --> 00:03:11.010
so then you don't have the object,
you have a reference to the object.

49
00:03:11.010 --> 00:03:13.873
So now we are talking about the same age.

50
00:03:13.873 --> 00:03:19.101
And by the way, now it's giving me
an error because, hey, I cannot pass

51
00:03:19.101 --> 00:03:24.874
you the value, I cannot copy the value,
I need to pass the reference to the age.

52
00:03:24.874 --> 00:03:29.942
And for that,
we use a prefix of an ampersand.

53
00:03:29.942 --> 00:03:33.347
That is like the counterpart of the star,
okay?

54
00:03:33.347 --> 00:03:34.840
I know it feels we weird,

55
00:03:34.840 --> 00:03:38.476
we will see a couple of examples
where this makes more sense.

56
00:03:38.476 --> 00:03:44.196
Now it's giving me an error here,
because saying,

57
00:03:44.196 --> 00:03:49.266
hey, you cannot do a plus between and
*int and

58
00:03:49.266 --> 00:03:54.091
an int because now age isn't *int, okay?

59
00:03:54.091 --> 00:03:58.030
It doesn't make sense, so then we start
thinking, okay, maybe this, maybe that.

60
00:03:58.030 --> 00:04:00.426
What should we be doing here?

61
00:04:00.426 --> 00:04:01.818
&gt;&gt; To reference the value.

62
00:04:01.818 --> 00:04:03.407
&gt;&gt; To reference to the value.

63
00:04:03.407 --> 00:04:06.721
Yeah, so what about ++?

64
00:04:06.721 --> 00:04:10.109
Is it still giving me an error?

65
00:04:10.109 --> 00:04:11.275
So why?

66
00:04:11.275 --> 00:04:15.209
Because now we have a point, and

67
00:04:15.209 --> 00:04:21.056
this is trying to make
it + 1 over the pointer.

68
00:04:21.056 --> 00:04:25.495
And that's not what I want, I wanna get
to the object, I'm saying object, but

69
00:04:25.495 --> 00:04:27.495
we know it's not really an object.

70
00:04:27.495 --> 00:04:31.813
We are going back to the integer,
and we want to apply something,

71
00:04:31.813 --> 00:04:33.626
some change there, okay?

72
00:04:33.626 --> 00:04:37.046
So is it the address of that?

73
00:04:37.046 --> 00:04:43.757
No, it's not the address of that,
it's actually star, we use a star here.

74
00:04:43.757 --> 00:04:50.517
It's like let's call the h,
I don't have the h, let's call the h,

75
00:04:50.517 --> 00:04:55.659
and the h will do the ++
under real numbers, okay?

76
00:04:55.659 --> 00:04:57.569
Does it make sense?

77
00:04:57.569 --> 00:05:00.452
Here it's complaining that I have
a function that I'm not using.

78
00:05:00.452 --> 00:05:04.157
But anyway, if I run this,

79
00:05:04.157 --> 00:05:08.678
I'm 23, so birthday worked.

80
00:05:08.678 --> 00:05:15.976
It's a little obscure at first mostly if
you haven't heard about pointers before,

81
00:05:15.976 --> 00:05:20.312
but this is the most
difficult thing you will see.

82
00:05:20.312 --> 00:05:25.604
And we will use it a couple of times,
and you need to use this

83
00:05:25.604 --> 00:05:31.874
every time you have a function that
is going to modify the arguments.

84
00:05:31.874 --> 00:05:36.739
So if the function will modify
the arguments, the incoming arguments,

85
00:05:36.739 --> 00:05:39.143
those arguments must be pointers.

86
00:05:39.143 --> 00:05:43.551
Because if not, you will get a copy and
you will be modifying the copy,

87
00:05:43.551 --> 00:05:44.988
not the original one.

88
00:05:44.988 --> 00:05:46.601
That typically makes no sense.

89
00:05:51.020 --> 00:05:53.442
Okay, yeah.

90
00:05:53.442 --> 00:06:00.392
It's not getting more difficult than this,
pointers with Go.

91
00:06:00.392 --> 00:06:02.617
&gt;&gt; I can't remember if I'm
remembering this correctly, but

92
00:06:02.617 --> 00:06:05.204
doesn't JavaScript sometimes
point something that's a pointer?

93
00:06:05.204 --> 00:06:08.969
If you pass it an object, then you have
to prevent it from mutating that object.

94
00:06:08.969 --> 00:06:10.929
But if you pass it a string -,
&gt;&gt; In JavaScript,

95
00:06:10.929 --> 00:06:12.888
when you are passing objects,

96
00:06:12.888 --> 00:06:17.722
you are passing the object by reference,
so you're doing this by default.

97
00:06:17.722 --> 00:06:18.519
&gt;&gt; Yeah.

98
00:06:18.519 --> 00:06:23.480
&gt;&gt; And not with numbers,
with objects, with object.

99
00:06:23.480 --> 00:06:28.228
So if you try this with numbers,
you will also have a similar problem.

100
00:06:28.228 --> 00:06:32.737
But yeah, and that on JavaScript, then
you have a way to phrase the object or

101
00:06:32.737 --> 00:06:35.563
to clone the object in
case you need to clone it.

102
00:06:35.563 --> 00:06:41.101
So in every language, you need to first
look into the details to see if arguments

103
00:06:41.101 --> 00:06:46.901
are being passed by value or by reference,
it depends on the language, actually.

104
00:06:46.901 --> 00:06:50.091
&gt;&gt; I kind of like that you have to be so
intentional about it, and

105
00:06:50.091 --> 00:06:53.483
all of a sudden have no idea why
your object just changed a bunch.

106
00:06:53.483 --> 00:06:56.280
&gt;&gt; Well, so here the the rule is simple.

107
00:06:56.280 --> 00:07:00.531
It's by default, it will be by value,
it could be a copy.

108
00:07:00.531 --> 00:07:06.800
So if the function needs to change the
arguments, you need to receive a pointer.

109
00:07:06.800 --> 00:07:11.646
I know you say, but I have to use this
ampersand and the star, it's just that,

110
00:07:11.646 --> 00:07:13.530
it's not really so difficult.

111
00:07:13.530 --> 00:07:15.806
I think the birthday example
is pretty straightforward

112
00:07:18.242 --> 00:07:19.690
&gt;&gt; Why do you not have to use

113
00:07:19.690 --> 00:07:22.958
the ampersand in front of
the age when it's here too?

114
00:07:22.958 --> 00:07:28.710
&gt;&gt; Because age is not an integer,
it's a pointer of an integer.

115
00:07:28.710 --> 00:07:31.699
And here age,
we're using the same name, so

116
00:07:31.699 --> 00:07:34.854
it feels it's the same variable but
it's not.

117
00:07:34.854 --> 00:07:39.807
So, in fact, we can change that,
we can say this is the point,

118
00:07:39.807 --> 00:07:42.429
we call that pointerAge, okay?

119
00:07:42.429 --> 00:07:43.933
Let's do this.

120
00:07:43.933 --> 00:07:46.372
So in this case, this is the pointerAge.

121
00:07:46.372 --> 00:07:52.540
When we use a star, we go to the age,
to the age that we have.

122
00:07:52.540 --> 00:07:58.533
And then when we have the age, so it's
like wrapping and unwrapping this, right?

123
00:07:58.533 --> 00:08:04.619
If I use ampersand here and not star,
I'm getting the address of the pointer.

124
00:08:04.619 --> 00:08:09.561
That is, if you wanna get a pointer of
a pointer, this is one goes forward and

125
00:08:09.561 --> 00:08:11.503
the other one goes backward.

126
00:08:11.503 --> 00:08:16.062
So if you use ampersand here, you're going
backward twice, something like that, okay?

127
00:08:16.062 --> 00:08:20.960
So it's like wrapping and
unwrapping, boxing and unboxing, so

128
00:08:20.960 --> 00:08:25.065
you have one that is boxing,
another one is unboxing.

129
00:08:25.065 --> 00:08:30.874
&gt;&gt; I was actually,
the printIn when you mapped out printIn.

130
00:08:30.874 --> 00:08:31.389
&gt;&gt; Here?

131
00:08:31.389 --> 00:08:33.638
&gt;&gt; Yeah, and you're just referencing age,
you're not referencing -.

132
00:08:33.638 --> 00:08:37.953
&gt;&gt; Because age is a number and
I wanna print a number.

133
00:08:37.953 --> 00:08:41.117
If I do this, I can do that, and
we can see what what happens.

134
00:08:41.117 --> 00:08:41.650
Can I print that?

135
00:08:41.650 --> 00:08:43.293
Yes, I can.

136
00:08:43.293 --> 00:08:45.958
And what I'm getting is that thing,
that weird thing.

137
00:08:45.958 --> 00:08:47.315
What's that?

138
00:08:47.315 --> 00:08:49.952
That's a memory address.

139
00:08:49.952 --> 00:08:51.235
&gt;&gt; Got you.

140
00:08:51.235 --> 00:08:59.617
&gt;&gt; That's a memory address of the edge is
where that variable say it's in memory,

141
00:08:59.617 --> 00:09:03.507
it's the address of memory, okay?

142
00:09:03.507 --> 00:09:07.667
But I don't wanna print that,
I wanna print the age.

143
00:09:07.667 --> 00:09:11.186
And when I'm here, what if I print,

144
00:09:11.186 --> 00:09:15.626
let's print pointerAge and
see what we have.

145
00:09:15.626 --> 00:09:18.628
Infact, let me also take my main.

146
00:09:18.628 --> 00:09:22.743
Let me remove that cityTax part.

147
00:09:22.743 --> 00:09:25.891
So we see only what we want and also this.

148
00:09:25.891 --> 00:09:29.176
So we keep only this part.

149
00:09:29.176 --> 00:09:31.382
So this is what I'm getting.

150
00:09:31.382 --> 00:09:37.951
So if I print pointerAge,
I'm getting also the address.

151
00:09:37.951 --> 00:09:42.888
If I'm printing *pointerAge and
printing the age

152
00:09:42.888 --> 00:09:47.724
when I have to,
because I'm also printing here.

153
00:09:47.724 --> 00:09:52.328
So there is a printIn, so
you can see we are talking

154
00:09:52.328 --> 00:09:56.611
about two different outputs, 22 and 23.

155
00:09:56.611 --> 00:10:01.439
And in fact, can you see that when we
are sending output to the console,

156
00:10:01.439 --> 00:10:06.530
sometimes it's difficult to actually
find which output is for each part.

157
00:10:06.530 --> 00:10:12.238
So, so far, I mentioned that
we should be using format and

158
00:10:12.238 --> 00:10:19.474
there we have .Print or printIn, but
also there is a third one, Printf.

159
00:10:19.474 --> 00:10:25.428
If you have ever played with C-based
language or even with C actually,

160
00:10:25.428 --> 00:10:30.204
probably you know what F is for,
but F stands for format.

161
00:10:30.204 --> 00:10:32.042
And you probably will like this.

162
00:10:32.042 --> 00:10:33.912
This is a template string.

163
00:10:33.912 --> 00:10:38.156
This is like a string format on Java.

164
00:10:38.156 --> 00:10:42.667
This is like a template string
with a back tick in JavaScript.

165
00:10:42.667 --> 00:10:47.602
So we pass a format, and
then look at the arguments.

166
00:10:47.602 --> 00:10:53.827
We pass a format as a string,
and then Ellipsis any,

167
00:10:53.827 --> 00:10:58.922
ellipsis means any amount of arguments and

168
00:10:58.922 --> 00:11:03.892
any seems to be anything, so we'll see.

169
00:11:03.892 --> 00:11:06.303
So that means that first,
we need a string.

170
00:11:06.303 --> 00:11:12.008
We can say, for example,
the pointer is and the value is.

171
00:11:12.008 --> 00:11:17.672
And I wanna put the pointer here and
the value here, I wanna set placeholders.

172
00:11:17.672 --> 00:11:25.015
Printf works with percentage and
a character.

173
00:11:25.015 --> 00:11:32.140
For example, if I'm expecting an integer,
I can use i, if I'm expecting a string, s.

174
00:11:32.140 --> 00:11:36.508
If I don't know what I'm expecting or
I don't care,

175
00:11:36.508 --> 00:11:41.457
in Go only, this is Go only,
I can use v and that's value, so

176
00:11:41.457 --> 00:11:44.776
any value, just take the value from it.

177
00:11:44.776 --> 00:11:46.098
I don't know what that is.

178
00:11:46.098 --> 00:11:49.234
And I can say then value and value, and

179
00:11:49.234 --> 00:11:53.948
then I need to pass two arguments,
one per placeholder.

180
00:11:53.948 --> 00:11:58.131
So I can pass the pointerAge and
*pointerAge.

181
00:12:01.922 --> 00:12:08.659
So I'm creating an output that
will look better in the console.

182
00:12:08.659 --> 00:12:16.692
So if I execute this, it says the pointer
is an address and the value is the value.

183
00:12:16.692 --> 00:12:24.736
The problem is that it doesn't create
a new line after, there is no printInf.

184
00:12:24.736 --> 00:12:28.858
So if you want a new line,
you can use this character.

185
00:12:28.858 --> 00:12:35.135
You escape and new line,
that's an new line character.

186
00:12:35.135 --> 00:12:37.423
That's for
playing with the console actually, right?

187
00:12:40.033 --> 00:12:47.456
So printf will actually let us create
the more complex output into the console.

188
00:12:47.456 --> 00:12:48.645
Does that make sense?

189
00:12:48.645 --> 00:12:52.452
So in this case, we can see
the pointerAge as we are receiving it,

190
00:12:52.452 --> 00:12:54.471
we see it's actually an address.

191
00:12:54.471 --> 00:12:56.590
It's a memory address,
not really the value.

192
00:12:56.590 --> 00:13:02.496
And if we use a star as a prefix,
we actually get it into the value.

193
00:13:02.496 --> 00:13:04.014
&gt;&gt; Are there double pointers in the end?

194
00:13:04.014 --> 00:13:08.150
&gt;&gt; Yeah, you can do double pointers,
so you can get really crazy with that,

195
00:13:08.150 --> 00:13:09.762
so you can do two stars here.

196
00:13:09.762 --> 00:13:14.861
So in that case, you have a pointer
that has a pointer to the value.

197
00:13:14.861 --> 00:13:19.527
So it's like you are proxying
your data around the world.

198
00:13:19.527 --> 00:13:24.579
You have a memory address that is
pointing to another memory address,

199
00:13:24.579 --> 00:13:27.327
and that one is pointing to the value.

200
00:13:27.327 --> 00:13:27.994
Yeah, you can do that.

201
00:13:27.994 --> 00:13:31.338
There are some niche situation
where that makes sense,

202
00:13:31.338 --> 00:13:33.408
if not, you don't get into that.

203
00:13:36.319 --> 00:13:38.182
But do you understand why do we need this?

204
00:13:38.182 --> 00:13:42.022
Because if not,
we cannot modify the argument,

205
00:13:42.022 --> 00:13:45.870
we're modifying a copy,
not the original one.

206
00:13:45.870 --> 00:13:49.340
Okay, it's just that.

207
00:13:49.340 --> 00:13:53.368
That's all.
We don't have any metrics over pointers as

208
00:13:53.368 --> 00:13:56.275
in C are things more complicated.

209
00:13:56.275 --> 00:13:57.116
So it's just that.

210
00:13:57.116 --> 00:13:59.209
If you got that, that's all.

