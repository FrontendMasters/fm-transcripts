WEBVTT

1
00:00:00.330 --> 00:00:04.811
Functions are similar to other languages,
they can receive arguments or

2
00:00:04.811 --> 00:00:06.840
humans can have default values.

3
00:00:08.640 --> 00:00:13.629
The last argument can be of variable
length that means that you can

4
00:00:13.629 --> 00:00:18.560
receive n things,
we will see some examples of that.

5
00:00:18.560 --> 00:00:24.359
The tricky part,
functions can return more than one value,

6
00:00:24.359 --> 00:00:29.900
again, functions can return
more than one value.

7
00:00:29.900 --> 00:00:34.531
That's typically new, I mean,
most of the functions out there,

8
00:00:34.531 --> 00:00:38.050
they return a value, a type one value.

9
00:00:38.050 --> 00:00:41.820
Well, here they can return more than one.

10
00:00:41.820 --> 00:00:42.610
How, why?

11
00:00:42.610 --> 00:00:43.110
We'll see.

12
00:00:44.180 --> 00:00:46.130
And why is that useful, okay?.

13
00:00:47.310 --> 00:00:52.071
Function can also return labeled variables
that's kind of up to they it's seen as

14
00:00:52.071 --> 00:00:55.730
a bad practice, I will show you
in a second how that looks like.

15
00:00:57.030 --> 00:01:00.786
And this is important, function to receive

16
00:01:00.786 --> 00:01:05.462
arguments always by value,
you know what that means?

17
00:01:05.462 --> 00:01:10.868
&gt;&gt; But it's not receiving
a pointer to a different object or

18
00:01:10.868 --> 00:01:14.255
a reference to a different object.

19
00:01:14.255 --> 00:01:17.370
It's receiving just
the value of that object.

20
00:01:17.370 --> 00:01:18.130
&gt;&gt; Just the value.

21
00:01:18.130 --> 00:01:19.790
&gt;&gt; Or it's not an object.

22
00:01:19.790 --> 00:01:21.620
&gt;&gt; It's not an object,
we don't have objects here.

23
00:01:21.620 --> 00:01:24.921
So the thing is that when you
are passing a value as an argument,

24
00:01:24.921 --> 00:01:28.750
you are not passing the reference
to the variable that has the value.

25
00:01:28.750 --> 00:01:35.080
You are cloning the value,
you're creating a copy of the value, okay?

26
00:01:35.080 --> 00:01:38.190
Have that in mind because
we will use that later.

27
00:01:38.190 --> 00:01:42.370
So functions, this is how it looks
like when you define arguments.

28
00:01:42.370 --> 00:01:45.504
We don't have one with arguments yet,
but you receive,

29
00:01:45.504 --> 00:01:48.390
this is the name of the argument and
this is the type.

30
00:01:48.390 --> 00:01:53.170
Remember, here we first use identifier and
then the type.

31
00:01:53.170 --> 00:01:58.554
If the function will return something,
we express that with a space

32
00:01:58.554 --> 00:02:03.640
after the arguments parenthesis and
before the code block.

33
00:02:03.640 --> 00:02:05.500
In this case, it returns an integer.

34
00:02:05.500 --> 00:02:08.610
And then you use the return keyword,
as you are used to.

35
00:02:08.610 --> 00:02:12.200
But also, we can return more than one.

36
00:02:12.200 --> 00:02:13.070
In this case,

37
00:02:13.070 --> 00:02:18.770
we use parentheses to group with the comma
all the types that you want to return.

38
00:02:18.770 --> 00:02:23.251
So in this case, it's going to add and
subtract at the same time and

39
00:02:23.251 --> 00:02:24.860
then your return both.

40
00:02:24.860 --> 00:02:28.426
I know that at first it's like,
why do I need that?

41
00:02:28.426 --> 00:02:29.150
Okay, but

42
00:02:29.150 --> 00:02:34.716
you will see that there are a couple of
design patterns where that becomes useful.

43
00:02:34.716 --> 00:02:37.006
So we will see that in action, yeah?

44
00:02:37.006 --> 00:02:41.327
&gt;&gt; So the second parenthesis there are the
types of values that you wanna return?

45
00:02:41.327 --> 00:02:44.291
&gt;&gt; Yeah,
those are the types of the return key, so

46
00:02:44.291 --> 00:02:47.715
when you're returning you
must return two integers.

47
00:02:49.915 --> 00:02:53.605
And it says that I need to
return them at the same time so

48
00:02:53.605 --> 00:02:58.210
I cannot return first,
the first integer and then the second one.

49
00:02:58.210 --> 00:03:03.480
No, no, I need to call return and
at the same time I'm returning both.

50
00:03:04.970 --> 00:03:07.772
Okay, that's how that works.

51
00:03:10.882 --> 00:03:16.748
Pointers, I say, ooh, pointers gets weird.

52
00:03:16.748 --> 00:03:23.540
You can receive, remember I mentioned
we pass always arguments by copy.

53
00:03:24.580 --> 00:03:26.890
What if I don't want a copy?

54
00:03:26.890 --> 00:03:29.980
I want a reference too and
we will see some examples.

55
00:03:29.980 --> 00:03:31.220
Why do you want a reference?

56
00:03:31.220 --> 00:03:32.650
Because maybe you wanna change it.

57
00:03:34.050 --> 00:03:37.950
So let's try this in our code.

58
00:03:37.950 --> 00:03:41.000
So, let me comment this
because I'm not using it.

59
00:03:42.350 --> 00:03:47.196
So let's say that here in my main,
first, can I have more than one main?

60
00:03:49.797 --> 00:03:51.953
No, that's just for in it.

61
00:03:51.953 --> 00:03:53.980
What if I have a main in another file?

62
00:03:55.760 --> 00:04:00.469
If it's in the same package, also,
it's not gonna work because remember,

63
00:04:00.469 --> 00:04:04.970
all the package goes to the same
structure, so no, it's not gonna work.

64
00:04:04.970 --> 00:04:08.180
So I need to have only one main one,
one entry point.

65
00:04:08.180 --> 00:04:13.345
There are ways to have modules
with more than one entry points,

66
00:04:13.345 --> 00:04:17.838
but yeah, that's for
very specific niche use cases.

67
00:04:17.838 --> 00:04:24.107
But I was trying to see
how the functions work.

68
00:04:24.107 --> 00:04:29.099
So let's say,
I have a function here that I'm going to,

69
00:04:29.099 --> 00:04:34.517
let's try, going to calculate the tax,
okay, for a price.

70
00:04:34.517 --> 00:04:39.478
So I receive a price as an integer or
a float32.

71
00:04:39.478 --> 00:04:46.106
And then I need to return something,
let's say I have stateTax and cityTax.

72
00:04:46.106 --> 00:04:48.340
So I can return both at the same time.

73
00:04:49.700 --> 00:04:52.430
So I can say here, both are float32.

74
00:04:55.644 --> 00:04:56.943
Does it make sense?

75
00:04:56.943 --> 00:05:02.100
So then when I return in,
I need to return two values always.

76
00:05:02.100 --> 00:05:08.787
So in this case it can be,
let's take any tax percentage,

77
00:05:08.787 --> 00:05:13.295
0.09 on the other one, 0.02.

78
00:05:17.499 --> 00:05:19.965
It's weird, right, it's weird, it's odd.

79
00:05:19.965 --> 00:05:22.150
When you see that, it's like, what?

80
00:05:22.150 --> 00:05:27.588
So then, I can go and say,
Print, go to Println,

81
00:05:27.588 --> 00:05:32.911
calculateTax of and
they have a price, 100.

82
00:05:32.911 --> 00:05:35.468
And what's their return of that?

83
00:05:35.468 --> 00:05:39.970
Cuz I don't have one value,
I have two values.

84
00:05:41.080 --> 00:05:43.610
So, which one is going to go to print?

85
00:05:43.610 --> 00:05:46.510
We understand that there's something
weird that's going on here.

86
00:05:46.510 --> 00:05:48.290
So something's happening.

87
00:05:48.290 --> 00:05:51.934
Let's first create the variable for
this, so let's call the variable,

88
00:05:51.934 --> 00:05:53.320
let's say result.

89
00:05:53.320 --> 00:05:59.400
I'm going to use a shortcut, so
:= and then calling calculateTax.

90
00:05:59.400 --> 00:06:02.690
And now you'll see that
we do have an error.

91
00:06:02.690 --> 00:06:06.620
The error says, assignment mismatch.

92
00:06:06.620 --> 00:06:12.749
1 variable, but actually it says
there is that we have expecting 2.

93
00:06:12.749 --> 00:06:17.080
So, I don't need one variable, I need two.

94
00:06:17.080 --> 00:06:24.820
So I need the stateTax and cityTax and
that's how you set two variables.

95
00:06:24.820 --> 00:06:26.534
Why is giving me an error?

96
00:06:26.534 --> 00:06:29.286
Anxiety [LAUGH], right,
because I'm not using them.

97
00:06:29.286 --> 00:06:33.680
So if you print this it
will stop complaining.

98
00:06:34.940 --> 00:06:39.354
So that's how you create
two variables on the fly,

99
00:06:39.354 --> 00:06:42.953
receiving two values from one function.

100
00:06:42.953 --> 00:06:44.927
What if you don't need one?

101
00:06:44.927 --> 00:06:48.069
Let's say I just need a state,
not cityTax?

102
00:06:48.069 --> 00:06:51.994
Because, yeah, you can say,
well, just ignore cityTax.

103
00:06:51.994 --> 00:06:56.400
At one point, the garbage collector
will just delete it from memory.

104
00:06:57.430 --> 00:07:01.876
But it can be even more efficient because
if I don't need it, I can just use

105
00:07:01.876 --> 00:07:07.000
a special variable name, but it's not
really a variable name, it's underscore.

106
00:07:08.630 --> 00:07:10.853
An underscore means, hey,

107
00:07:10.853 --> 00:07:15.680
I know that we received a value there but
I'm not gonna use it.

108
00:07:15.680 --> 00:07:21.420
So yeah, I'm not even gonna waste an
identifier to create the variable for it.

109
00:07:21.420 --> 00:07:24.920
But it's mandatory to set something
because if not, it will complain.

110
00:07:25.930 --> 00:07:32.795
So I have to use comma underscore or
it can be underscore first as well.

111
00:07:32.795 --> 00:07:38.973
And if you do both it says,
come on, you don't need variables.

112
00:07:38.973 --> 00:07:42.928
So then but
you can say this is a cityTax and

113
00:07:42.928 --> 00:07:48.350
then print the cityTax if you
just need that one, okay?

114
00:07:48.350 --> 00:07:52.350
&gt;&gt; Why would you need something
that you wouldn't want to?

115
00:07:52.350 --> 00:07:53.132
&gt;&gt; Well, first,

116
00:07:53.132 --> 00:07:57.140
because maybe you are executing
a function that it wasn't your creation.

117
00:07:57.140 --> 00:07:59.244
It's part of a library, and

118
00:07:59.244 --> 00:08:03.725
that library is giving you two numbers and
you need only one.

119
00:08:03.725 --> 00:08:06.918
Well, but you're forced to declare both,

120
00:08:06.918 --> 00:08:12.120
you need to express to the compiler
what to do with each value.

121
00:08:12.120 --> 00:08:17.390
Well, you can say ignore that one,
and that's underscore, okay?

122
00:08:19.640 --> 00:08:23.425
By the way that's available, the same
technique of underscore is available on

123
00:08:23.425 --> 00:08:25.692
some modern languages as well,
so not just Go.

124
00:08:28.759 --> 00:08:33.849
I know that you are still not
finding a good use case for this.

125
00:08:33.849 --> 00:08:37.970
But give me a sec because you
will see a use case for this,

126
00:08:37.970 --> 00:08:42.552
that we use a lot when we
are building Go applications, okay?

127
00:08:42.552 --> 00:08:45.719
Do you have any question, this one?

128
00:08:45.719 --> 00:08:51.709
&gt;&gt; Can you not return a collection
then from a function?

129
00:08:51.709 --> 00:08:55.860
&gt;&gt; Let me see if I understand, so
can you not return a collection?

130
00:08:55.860 --> 00:08:58.790
This is not a collection, actually.

131
00:08:58.790 --> 00:09:02.582
This is more like a tuple, so
this is not a collection, so

132
00:09:02.582 --> 00:09:05.040
I cannot treat it as a collection.

133
00:09:05.040 --> 00:09:08.584
You can if you want to return
the collection, I mean, you could say,

134
00:09:08.584 --> 00:09:09.379
you know what,

135
00:09:09.379 --> 00:09:13.820
I'm going to return just one value of
type slice of float, which is okay.

136
00:09:13.820 --> 00:09:15.260
But it's not the same.

137
00:09:15.260 --> 00:09:23.374
In this case, we are returning one value
of type slice or type array of two.

138
00:09:23.374 --> 00:09:27.214
&gt;&gt; I'm just wondering what the functional
difference is between that and

139
00:09:27.214 --> 00:09:29.710
what you just did where
you have two separate.

140
00:09:29.710 --> 00:09:34.590
&gt;&gt; Well, for example that maybe,
I can have a third one that is a string.

141
00:09:35.970 --> 00:09:39.420
Maybe the type is not the same
when we have collections?

142
00:09:39.420 --> 00:09:44.250
While there are ways to mix types within
the collection that we may see later.

143
00:09:44.250 --> 00:09:49.580
Then it becomes more complicated to
put everything in a collection, okay?

144
00:09:49.580 --> 00:09:50.810
It can be anything actually.

145
00:09:52.070 --> 00:09:54.667
So now it complaining because I'm
not returning the last value, but

146
00:09:54.667 --> 00:09:56.110
I can just return a string.

147
00:09:56.110 --> 00:09:57.850
I know it says, well,
do you have a string also?

148
00:09:57.850 --> 00:10:02.180
Okay, I don't want it so, let's ignore it.

149
00:10:02.180 --> 00:10:06.589
It's not just two and
they don't need to be of the same type.

150
00:10:11.535 --> 00:10:15.337
Again, I know that you still say,
okay, why do I need that?

151
00:10:15.337 --> 00:10:17.180
But now that you know that it exists and

152
00:10:17.180 --> 00:10:20.012
now that you will see some
examples of that being applied.

153
00:10:20.012 --> 00:10:25.171
You will start thinking differently and
says, maybe that thing that I'm

154
00:10:25.171 --> 00:10:30.176
typically doing that in this way,
maybe I can do this in this other way.

155
00:10:33.113 --> 00:10:34.833
Okay, makes sense.

156
00:10:34.833 --> 00:10:40.033
So now you can return more than one value,
it's just that,

157
00:10:40.033 --> 00:10:44.517
makes a simple concept powerful,
but also weird.

158
00:10:44.517 --> 00:10:47.971
And you always need to return all of them.

159
00:10:47.971 --> 00:10:52.389
Maybe on some cases, you might return
nil because that's a valid value but

160
00:10:52.389 --> 00:10:57.610
at least, you need to explicitly say,
okay, for that argument, nil.

161
00:10:57.610 --> 00:10:58.860
Okay, make sense, it's just that.

162
00:11:00.140 --> 00:11:04.260
So also I mentioned
that you can name them.

163
00:11:05.440 --> 00:11:10.280
Let me create another version of that so
you can see how that looks like,

164
00:11:10.280 --> 00:11:11.984
so let's say WithName.

165
00:11:11.984 --> 00:11:17.730
In this case,
lemme remove the third argument.

166
00:11:17.730 --> 00:11:21.740
So you can see that arguments are named,
they have a name.

167
00:11:21.740 --> 00:11:25.252
Well, I can also add
a name to return types.

168
00:11:25.252 --> 00:11:30.899
In this case, they can be stateTax and

169
00:11:30.899 --> 00:11:37.613
cityTax, cityTax space and you say, what?

170
00:11:37.613 --> 00:11:41.630
When you do that, you're actually
creating local variables, okay?

171
00:11:41.630 --> 00:11:46.953
So first, I'm creating local variables,
so I can actually say now,

172
00:11:46.953 --> 00:11:52.744
that the stateTax is actually this one and
the cityTax is actually that one.

173
00:11:52.744 --> 00:11:57.406
And when I am finishing
setting all my variables,

174
00:11:57.406 --> 00:12:01.850
I can just return with
no additional metadata.

175
00:12:01.850 --> 00:12:06.809
&gt;&gt; Then in the place in the main on line
28 would you be able to eliminate those

176
00:12:06.809 --> 00:12:08.640
underscores then.

177
00:12:08.640 --> 00:12:11.890
&gt;&gt; No, that's the same because
I'm still getting two.

178
00:12:11.890 --> 00:12:14.608
So if I change that with
calculateTaxWithName,

179
00:12:14.608 --> 00:12:16.740
I'm still receiving two arguments.

180
00:12:17.850 --> 00:12:20.420
The name is internal to the function.

181
00:12:20.420 --> 00:12:21.040
&gt;&gt; I see.

182
00:12:21.040 --> 00:12:23.990
&gt;&gt; So I'm not changing how you
are consuming the function,

183
00:12:23.990 --> 00:12:27.620
I'm changing how we are defining
the returned values.

184
00:12:27.620 --> 00:12:31.660
Instead of adding the values
in the return declaration,

185
00:12:31.660 --> 00:12:34.990
I just save values in those variables.

186
00:12:34.990 --> 00:12:39.889
And then I say, hey, return and
the dinner is ready, and

187
00:12:39.889 --> 00:12:44.906
then you need to go and
grab the dinner from the same place.

188
00:12:44.906 --> 00:12:49.475
It's just that, actually,
it's not being used a lot to be honest.

189
00:12:49.475 --> 00:12:54.855
And as the function gets larger,
the more difficult

190
00:12:54.855 --> 00:13:01.570
is to use this in a nice way
because it becomes really obscure.

191
00:13:01.570 --> 00:13:04.310
Where are your return declarations?

192
00:13:04.310 --> 00:13:09.968
Because it's actually on the value that
you're saving on those variables that

193
00:13:09.968 --> 00:13:15.130
they can be anywhere in the function,
but you still need to call return.

194
00:13:16.410 --> 00:13:20.593
But in this case, you don't need to set
the value because the values are going to

195
00:13:20.593 --> 00:13:23.478
be returned automatically
from these two variables.

196
00:13:23.478 --> 00:13:25.710
There is another way of defining function.

197
00:13:26.840 --> 00:13:30.646
Just as I mentioned before,
we don't have function overloads, so

198
00:13:30.646 --> 00:13:35.187
I cannot create another function with the
same name even though it has a different

199
00:13:35.187 --> 00:13:36.420
signature, no way.

200
00:13:38.470 --> 00:13:40.780
CalculateTax is already defined there.

201
00:13:40.780 --> 00:13:45.930
Now, this is for clinco, so no way.

202
00:13:45.930 --> 00:13:49.362
The only exception is Init, remember
that you can have more than one Init,

203
00:13:49.362 --> 00:13:50.735
that's the only exception.

204
00:13:55.030 --> 00:14:00.245
&gt;&gt; Can a functions return type set
to different values, for example,

205
00:14:00.245 --> 00:14:05.836
return string or nil and how would you
deal with it if it could return nil?

206
00:14:05.836 --> 00:14:06.561
&gt;&gt; That's a good question.

207
00:14:06.561 --> 00:14:10.918
So, the quick answer is no.

208
00:14:10.918 --> 00:14:15.355
You must return a type and
two types are not one type.

209
00:14:16.890 --> 00:14:21.320
However, you can create your own types,
we haven't seen that yet.

210
00:14:21.320 --> 00:14:26.541
So, that might lead to an answer
because if you create your own type,

211
00:14:26.541 --> 00:14:32.769
then you can return your own type and on
that situation you can solve that problem.

212
00:14:32.769 --> 00:14:39.146
But it's more a design pattern than a
feature from the from the Go syntax, okay?

