WEBVTT

1
00:00:00.830 --> 00:00:06.950
So, back in the cx.go,
when you're doing the http.get,

2
00:00:06.950 --> 00:00:12.710
I guess I'm used to structures
where you have to then do,

3
00:00:12.710 --> 00:00:17.160
like, a .then or
do an await kind of thing.

4
00:00:17.160 --> 00:00:21.292
So is that already built in, that it's
waiting until it gets something back?

5
00:00:21.292 --> 00:00:25.197
&gt;&gt; So
you're used to async operations using

6
00:00:25.197 --> 00:00:29.444
solutions such as promises, or callbacks.

7
00:00:29.444 --> 00:00:31.374
Well, you don't have that here.

8
00:00:31.374 --> 00:00:35.812
So here this is a synchronous operation,
not an asynchronous operation.

9
00:00:35.812 --> 00:00:40.104
So actually what happens here is
that when you call get, within get,

10
00:00:40.104 --> 00:00:43.953
we can even drill down within
the structure and find the code,

11
00:00:43.953 --> 00:00:49.228
there will be a while, a for, actually,
a for, waiting for the network to finish.

12
00:00:49.228 --> 00:00:51.562
And then it's giving
you back the execution.

13
00:00:51.562 --> 00:00:56.631
So, this is not an async operation,
actually it's a sync operation, okay?

14
00:00:56.631 --> 00:00:58.397
So it's not async it's sync.

15
00:00:58.397 --> 00:01:00.875
So this is a synchronous operation.

16
00:01:00.875 --> 00:01:04.529
Do we have asynchronous operations in Go?

17
00:01:04.529 --> 00:01:10.390
Typically no, you use Goroutines for
doing that to avoid blocking the thread.

18
00:01:10.390 --> 00:01:16.603
Because, yeah, what happens now for
example if I, let's say to avoid copy and

19
00:01:16.603 --> 00:01:21.706
pasting, let's move this into
another function that is going to

20
00:01:21.706 --> 00:01:27.860
be getCurrencyData that will receive
the currency code, and it will do this.

21
00:01:27.860 --> 00:01:30.906
And instead of ("BTC"),
I'm going to say currency.

22
00:01:30.906 --> 00:01:34.533
So I just refactor this
into the other order,

23
00:01:34.533 --> 00:01:37.879
currency string, not string currency.

24
00:01:37.879 --> 00:01:41.899
No, this is not Java or C-sharp.

25
00:01:41.899 --> 00:01:46.257
And from here, then I'm going to call
getCurrencyData of ("BTC"), okay?

26
00:01:46.257 --> 00:01:48.207
It's the same code, just with a function.

27
00:01:48.207 --> 00:01:53.566
But I did this because now I can
call another one for Ethereum or

28
00:01:53.566 --> 00:01:57.909
Ether, that's the actual
name of the currency.

29
00:01:57.909 --> 00:02:01.154
Or I can get another one for
Bitcoin Cash or

30
00:02:01.154 --> 00:02:05.342
I can add Bitcoin Cash that
it should be BCH, I think.

31
00:02:05.342 --> 00:02:08.516
That's the name of Bitcoin Cash,
it's another version of Bitcoin.

32
00:02:08.516 --> 00:02:10.824
So okay.

33
00:02:10.824 --> 00:02:13.777
So if I run this, let me clear first.

34
00:02:18.940 --> 00:02:21.718
It goes one by one, okay?

35
00:02:21.718 --> 00:02:24.368
And in the same order.

36
00:02:24.368 --> 00:02:26.006
It was pretty fast, okay?

37
00:02:26.006 --> 00:02:27.196
But that depends on the case.

38
00:02:27.196 --> 00:02:32.816
It depends on the network,
on the traffic at that moment, okay?

39
00:02:32.816 --> 00:02:33.904
They are synchronous.

40
00:02:33.904 --> 00:02:36.422
So one needs to wait for the other one.

41
00:02:36.422 --> 00:02:37.833
So how to do something different?

42
00:02:37.833 --> 00:02:43.894
Well, do you remember how to convert
these function calls into Goroutines?

43
00:02:46.599 --> 00:02:52.496
Go prefix, just add go, go, go.

44
00:02:52.496 --> 00:02:57.590
Now, each call will be
executed in its own Goroutine,

45
00:02:57.590 --> 00:03:03.704
let's say its own thread, so
they're not blocking the thread.

46
00:03:03.704 --> 00:03:07.672
But if I execute this now,
what will happen?

47
00:03:07.672 --> 00:03:11.508
Nothing, actually, there are other things
happening, but I'm not seeing the results.

48
00:03:11.508 --> 00:03:13.618
Do you remember why?

49
00:03:13.618 --> 00:03:16.634
&gt;&gt; Because main shut down before
those other ones got done.

50
00:03:16.634 --> 00:03:19.860
&gt;&gt; Exactly,
the main function ends immediately and

51
00:03:19.860 --> 00:03:24.006
when the main function ends
actually the whole process ends, so

52
00:03:24.006 --> 00:03:28.560
the main Goroutine ends and
the process with all the Goroutines ends.

53
00:03:28.560 --> 00:03:34.229
So actually these are actually firing like
new threads, I need to wait for them.

54
00:03:34.229 --> 00:03:36.450
So the simplest and easiest and

55
00:03:36.450 --> 00:03:41.319
laziest way to solve the problem
right now is to call time sleep, and

56
00:03:41.319 --> 00:03:46.546
let's sleep for a lot of nanosecond,
remember, this is nanoseconds.

57
00:03:46.546 --> 00:03:50.293
Instead of doing that,
we can just say, let's wait for

58
00:03:50.293 --> 00:03:52.860
a minute or maybe a couple of seconds.

59
00:03:52.860 --> 00:03:55.833
We multiply that by 5,
so we wait 5 seconds.

60
00:03:55.833 --> 00:04:01.520
So at least for 5 seconds,
now each call will go and

61
00:04:01.520 --> 00:04:06.546
wait and
that that a hey I guess is because

62
00:04:06.546 --> 00:04:11.994
now you realize that it's
in a different order.

63
00:04:11.994 --> 00:04:15.343
So I've got the results for
Ethereum that Bitcoin cash and

64
00:04:15.343 --> 00:04:18.088
that because say, it's a reverse order.

65
00:04:18.088 --> 00:04:19.936
No, that was just luck probably.

66
00:04:19.936 --> 00:04:22.393
If I try again,
you can see it's not the same.

67
00:04:22.393 --> 00:04:26.992
Every time I will get a different
order because in the order,

68
00:04:26.992 --> 00:04:29.437
the responses are coming back.

69
00:04:29.437 --> 00:04:33.330
And there is a little bit of traffic,
random things going on there.

70
00:04:33.330 --> 00:04:37.190
But now we can see that we are opening
throwing, opening different threads, and

71
00:04:37.190 --> 00:04:38.914
each thread will work separately.

72
00:04:38.914 --> 00:04:44.106
We have now Goroutines going and
grabbing different currency rates,

73
00:04:44.106 --> 00:04:49.221
but we have this hacky sleep here
that doesn't seem like a good idea.

74
00:04:49.221 --> 00:04:54.110
So we need to find a way
to actually wait for

75
00:04:54.110 --> 00:04:57.617
these Goroutines to finish.

76
00:04:57.617 --> 00:05:02.749
And that's that will solve the problems
that we have sometimes with channels,

77
00:05:02.749 --> 00:05:05.289
the channels will get into a deadlock.

78
00:05:05.289 --> 00:05:09.362
So we actually need to be sure
that this is working properly.

79
00:05:09.362 --> 00:05:14.144
So warning, the code that I'm going to
write is not going to be difficult, but

80
00:05:14.144 --> 00:05:16.836
it's also will look a little hacky, okay?

81
00:05:16.836 --> 00:05:20.891
So it will take some time to
get used to how that works.

82
00:05:20.891 --> 00:05:27.739
So first for that we are going to
create something known as a sync group.

83
00:05:27.739 --> 00:05:30.258
So we are going to create a variable.

84
00:05:30.258 --> 00:05:35.438
And typically we're going to create,
we call that wg, waiting group.

85
00:05:35.438 --> 00:05:42.065
So it's kind of a value that will wait for
Goroutines to finish.

86
00:05:42.065 --> 00:05:44.464
That's kind of the idea.

87
00:05:44.464 --> 00:05:50.246
Instead of doing this,
like calling getCurrencyData

88
00:05:50.246 --> 00:05:54.400
like this, I will move this to a slice.

89
00:05:54.400 --> 00:05:56.639
Or an array, this is just the same.

90
00:05:56.639 --> 00:05:59.654
So I'm going to say that,

91
00:05:59.654 --> 00:06:04.461
let's say currencies is a new variable.

92
00:06:04.461 --> 00:06:09.945
And I can say something like this,
it's on a of a string,

93
00:06:09.945 --> 00:06:16.153
that we have "BTC", "ETH" and "BCH",
you can add more if you want.

94
00:06:16.153 --> 00:06:22.276
Of course, they need to be supported by,
That provider,

95
00:06:22.276 --> 00:06:24.336
and then I'm going to make a for.

96
00:06:24.336 --> 00:06:32.832
So I will say for each currency
on the range of the currencies.

97
00:06:32.832 --> 00:06:34.588
That's how you do it for each.

98
00:06:34.588 --> 00:06:39.708
If you don't need
the index use underscore,

99
00:06:39.708 --> 00:06:42.805
and here we are going to go,

100
00:06:42.805 --> 00:06:47.807
go getCurrency of currencies, like that.

101
00:06:47.807 --> 00:06:51.030
Currency, there we go.

102
00:06:51.030 --> 00:06:54.648
So, we're still not using that waitGroup,
or

103
00:06:54.648 --> 00:06:59.356
we don't understand yet
how it works, but we will get there.

104
00:06:59.356 --> 00:07:07.948
So the idea is that the waitGroup,
It's a value.

105
00:07:07.948 --> 00:07:10.125
It's kind of a counter actually.

106
00:07:10.125 --> 00:07:13.124
So we're going to count, it's a counter,

107
00:07:13.124 --> 00:07:17.920
we are adding to that counter, and
we are subtracting to the counter.

108
00:07:17.920 --> 00:07:23.784
And at any time we can ask
that waiting group to wait.

109
00:07:23.784 --> 00:07:28.574
Wait for
the counter to get back to 0, okay?

110
00:07:28.574 --> 00:07:33.253
And it will synchronously
wait until it gets to 0.

111
00:07:33.253 --> 00:07:38.120
So it is like asleep, but
not with a fixed time.

112
00:07:38.120 --> 00:07:43.366
It will be fixed to that particular
moment, okay, when the counter goes to 0.

113
00:07:43.366 --> 00:07:44.689
So what's the point?

114
00:07:44.689 --> 00:07:49.679
I should talk to my working group and
I will add 1 to that

115
00:07:49.679 --> 00:07:54.357
counter every time we
are opening a new Goroutine.

116
00:07:54.357 --> 00:07:57.951
So we are opening new routine and
we say, 1, okay?

117
00:07:57.951 --> 00:07:58.843
Make sense?

118
00:07:58.843 --> 00:08:02.323
And what I need to do at
one point is to subtract,

119
00:08:02.323 --> 00:08:07.204
careful, I'm going to refactor
the code while I'm explaining.

120
00:08:07.204 --> 00:08:09.373
So just have that in mind.

121
00:08:09.373 --> 00:08:14.360
So I should do some feel like done,
done will actually subtract 1,

122
00:08:14.360 --> 00:08:17.423
it's saying, okay, I'm done with 1?

123
00:08:17.423 --> 00:08:20.569
Do you need to know which one is done, no.

124
00:08:20.569 --> 00:08:24.824
So this is counting 1, and
done is subtracting 1, and

125
00:08:24.824 --> 00:08:28.365
then the wait we wait for
getting to 0, okay?

126
00:08:28.365 --> 00:08:29.539
Make sense?

127
00:08:29.539 --> 00:08:31.122
Do you understand the idea?

128
00:08:31.122 --> 00:08:36.657
So every time we open a Goroutine,
we say 1, add 1,

129
00:08:36.657 --> 00:08:42.687
and every time that Goroutine ends,
we should call done.

130
00:08:42.687 --> 00:08:43.788
Make sense?

131
00:08:43.788 --> 00:08:50.304
However, that's not what's actually
happening there in my code, why?

132
00:08:50.304 --> 00:08:53.417
Because line 17, in fact,

133
00:08:53.417 --> 00:08:59.025
let me add a print here just for
us to think about this.

134
00:08:59.025 --> 00:09:04.265
So I'm going to print here.

135
00:09:04.265 --> 00:09:10.190
Let's say, and I'm going to print here.

136
00:09:10.190 --> 00:09:11.439
Let's say.

137
00:09:14.507 --> 00:09:22.334
T, so if you execute main,
Which letter will be executed first?

138
00:09:22.334 --> 00:09:23.728
T or O?

139
00:09:26.161 --> 00:09:27.694
&gt;&gt; T.

140
00:09:27.694 --> 00:09:29.157
&gt;&gt; T or O?

141
00:09:29.157 --> 00:09:31.354
T, we have a T.

142
00:09:31.354 --> 00:09:32.539
&gt;&gt; O.

143
00:09:32.539 --> 00:09:33.532
&gt;&gt; Okay, we have a O.

144
00:09:33.532 --> 00:09:38.737
&gt;&gt; [LAUGH]
&gt;&gt; I see many of you are thinking so

145
00:09:38.737 --> 00:09:39.510
what's going on?

146
00:09:39.510 --> 00:09:40.834
&gt;&gt; Online somebody said T.

147
00:09:40.834 --> 00:09:41.991
&gt;&gt; I think it'd be T.

148
00:09:41.991 --> 00:09:42.929
&gt;&gt; I think it-
&gt;&gt; Why T?

149
00:09:42.929 --> 00:09:45.356
&gt;&gt; Cuz Go will take a certain
amount of time to happen.

150
00:09:45.356 --> 00:09:48.029
&gt;&gt; Yeah, so
the thing is that maybe I mean,

151
00:09:48.029 --> 00:09:50.790
the right answer is that we're not sure.

152
00:09:50.790 --> 00:09:55.872
But it's definitely not O for
sure or not T for sure.

153
00:09:55.872 --> 00:09:57.275
Definitely not O for sure.

154
00:09:57.275 --> 00:10:03.803
So what's going on here is when we have a
Go call, we are creating a new Goroutine.

155
00:10:03.803 --> 00:10:09.119
So basically,
the O will be executed in a new Goroutine.

156
00:10:09.119 --> 00:10:13.034
And immediately,
the main Goroutine will go to line 17 and

157
00:10:13.034 --> 00:10:17.733
it will print immediately T, which means,
forget about the T and the O.

158
00:10:17.733 --> 00:10:23.042
But wg.done will be executed immediately

159
00:10:23.042 --> 00:10:27.173
after launching the Goroutine.

160
00:10:27.173 --> 00:10:30.910
It's not waiting for the Goroutine to end,

161
00:10:30.910 --> 00:10:35.559
because line17 is executing
in the main Goroutine.

162
00:10:35.559 --> 00:10:39.460
So everything that you see here
it's the main Goroutine, and

163
00:10:39.460 --> 00:10:42.911
because I'm calling getCurrency
data only with a Go,

164
00:10:42.911 --> 00:10:46.073
everything that is here
it's in a new Goroutine.

165
00:10:47.978 --> 00:10:52.452
So we don't see that in the source code
you're suddenly choosing to think about

166
00:10:52.452 --> 00:10:53.799
this visually, okay?

167
00:10:53.799 --> 00:10:58.903
That because we are executing
getCurrencyData with a Go prefix,

168
00:10:58.903 --> 00:11:02.725
that means that we are always
using a Goroutine.

169
00:11:02.725 --> 00:11:07.629
So line 18,
it's actually going to be executed

170
00:11:07.629 --> 00:11:12.199
immediately after 17 without waiting for.

171
00:11:12.199 --> 00:11:16.172
So that done should be here somehow.

172
00:11:18.745 --> 00:11:21.213
I'm refactoring this, so don't do it yet.

173
00:11:21.213 --> 00:11:24.069
But the idea is that, okay?

174
00:11:24.069 --> 00:11:26.001
The problem is that, yeah,

175
00:11:26.001 --> 00:11:29.873
wg does not exist in the context
of the getCurrency data.

176
00:11:29.873 --> 00:11:35.338
I could create the package variable and
then use that, it's okay.

177
00:11:35.338 --> 00:11:38.923
But still, it's kind of not well written.

178
00:11:38.923 --> 00:11:43.743
I mean, it will work, but
it's not well written because, I mean,

179
00:11:43.743 --> 00:11:47.906
getCurrencyData shouldn't
care about a waiting group.

180
00:11:47.906 --> 00:11:50.073
So what's a waiting group for
getCurrency data?

181
00:11:50.073 --> 00:11:55.020
It's not its responsibility
to something around waiting.

182
00:11:55.020 --> 00:11:59.512
I don't care, my responsibility is
to get a string and get the data and

183
00:11:59.512 --> 00:12:00.894
print the response.

184
00:12:00.894 --> 00:12:02.826
That's all I need to do.

185
00:12:02.826 --> 00:12:05.729
So that's why this is
not completely right.

186
00:12:05.729 --> 00:12:08.736
So we need to find a solution
on how we can do this.

187
00:12:08.736 --> 00:12:12.783
So I'm going to refactor, and
this is going to look a little hacky.

188
00:12:12.783 --> 00:12:15.312
But let's see if we can
understand what going on.

