WEBVTT

1
00:00:00.000 --> 00:00:04.921
Goroutines, we're going to
make an intro on this, and

2
00:00:04.921 --> 00:00:09.119
later, we will do the large
exercises on that.

3
00:00:09.119 --> 00:00:10.709
So, what's a goroutine?

4
00:00:10.709 --> 00:00:13.312
A goroutine is the Go
way of using threads.

5
00:00:13.312 --> 00:00:18.589
You know that every time we get
into threading, it's kind of a,

6
00:00:18.589 --> 00:00:22.520
[SOUND] I am not sure I
wanna get into that, okay?

7
00:00:22.520 --> 00:00:26.436
But because Go was
created from scratch and

8
00:00:26.436 --> 00:00:32.091
was created in the modern way to
solve the current problems and

9
00:00:32.091 --> 00:00:36.548
other problems that we
used to have in the 80s or

10
00:00:36.548 --> 00:00:39.830
in the 90s, it's much simpler.

11
00:00:39.830 --> 00:00:42.564
How creating a thread works fact.

12
00:00:42.564 --> 00:00:44.734
Let me get out of this for a second.

13
00:00:44.734 --> 00:00:48.338
Because we have here the information and
some samples, but

14
00:00:48.338 --> 00:00:50.581
let's see this in action directly.

15
00:00:50.581 --> 00:00:54.569
For that, I'm going to create,
let me clean this up first so

16
00:00:54.569 --> 00:00:56.539
it doesn't have any errors.

17
00:00:56.539 --> 00:00:58.157
I'm going to create another version.

18
00:00:58.157 --> 00:01:00.703
It's going to be a simple one,
not a complicated one.

19
00:01:00.703 --> 00:01:04.510
So, but just to play with core routines
before actually using them for

20
00:01:04.510 --> 00:01:05.874
accessing the network.

21
00:01:05.874 --> 00:01:07.310
That's the next step.

22
00:01:07.310 --> 00:01:10.289
To use the HTTP package.

23
00:01:10.289 --> 00:01:16.819
So, in your project, open folder.

24
00:01:16.819 --> 00:01:21.230
We're going to play with Goroutines.

25
00:01:21.230 --> 00:01:26.226
I mean the name sounds scary,
but no worries.

26
00:01:26.226 --> 00:01:27.575
It's actually pretty simple.

27
00:01:27.575 --> 00:01:32.979
So I'm going to say here
again as usual you know

28
00:01:32.979 --> 00:01:41.171
the deal out go mode init
frontendmasters.comm/go/goroutines.

29
00:01:41.171 --> 00:01:46.429
Now may not go with a package main and

30
00:01:46.429 --> 00:01:49.065
a function main.

31
00:01:49.065 --> 00:01:51.616
You know the deal, simple.

32
00:01:54.784 --> 00:01:59.171
Now, let's say that we create

33
00:01:59.171 --> 00:02:03.557
a function here that will say,

34
00:02:03.557 --> 00:02:07.447
let's say print message.

35
00:02:07.447 --> 00:02:12.502
That receives a message as text, And

36
00:02:12.502 --> 00:02:19.596
it just call format,
print line, that text.

37
00:02:19.596 --> 00:02:24.918
But I'm going to create a for, okay?

38
00:02:24.918 --> 00:02:27.573
And we are going to use the for
as kind of a while.

39
00:02:27.573 --> 00:02:31.598
Remember, also,
I can use an infinite loop.

40
00:02:31.598 --> 00:02:32.994
Remember the infinite loop?

41
00:02:32.994 --> 00:02:35.109
Like so but we will see that later.

42
00:02:35.109 --> 00:02:38.564
Because if it's an infinite loop,
yeah, we have a problem.

43
00:02:38.564 --> 00:02:43.041
We know we have a problem, but
we can say, okay, let's start with zero

44
00:02:45.012 --> 00:02:49.850
0, let's do this 10 times, okay?

45
00:02:49.850 --> 00:02:52.107
And then let's call printMessage

46
00:02:55.660 --> 00:02:59.685
That says Go is great.

47
00:02:59.685 --> 00:03:01.896
Okay, so nothing really fancy.

48
00:03:01.896 --> 00:03:07.551
I'm going to execute this and
I should see go is great 10 times.

49
00:03:07.551 --> 00:03:11.055
Yeah, you were expecting that,
nothing to worry about.

50
00:03:11.055 --> 00:03:12.302
So principle.

51
00:03:12.302 --> 00:03:13.682
So what's the deal here?

52
00:03:13.682 --> 00:03:19.472
What if we start waiting sometime
because this is going really fast.

53
00:03:19.472 --> 00:03:24.850
So what if we start waiting some
moments before doing something,

54
00:03:24.850 --> 00:03:29.849
for example, waiting a second,
how to wait for something.

55
00:03:29.849 --> 00:03:33.713
So we need to work which we'll look for
asleep.

56
00:03:33.713 --> 00:03:36.949
And where do we get that?

57
00:03:36.949 --> 00:03:40.454
Where do we get to sleep is threading.

58
00:03:40.454 --> 00:03:43.266
So how can we get into
something like that?

59
00:03:43.266 --> 00:03:46.242
So if we look in the documentation, so

60
00:03:46.242 --> 00:03:52.289
I'm not sure if you have experience
working with synchronous apps locally.

61
00:03:52.289 --> 00:03:57.101
Typically, you have a way to
slip the thread in any language.

62
00:03:57.101 --> 00:03:59.616
So you ask the thread to wait.

63
00:03:59.616 --> 00:04:02.234
Let's wait one second, and the thread.

64
00:04:02.234 --> 00:04:04.836
It is blocked there for one second.

65
00:04:04.836 --> 00:04:06.711
It doesn't make sense, that's kind of it.

66
00:04:06.711 --> 00:04:15.157
So on Go, it's a time package
from the standard library.sleep.

67
00:04:15.157 --> 00:04:21.570
The problem is that the sleep receives
duration, okay, which is okay, okay.

68
00:04:21.570 --> 00:04:25.289
Duration in which unit?

69
00:04:25.289 --> 00:04:27.012
I don't know, I can see the documentation.

70
00:04:27.012 --> 00:04:31.000
I can get into the sleep function
to see if I get any information.

71
00:04:31.000 --> 00:04:34.781
First is a type, it's called duration.

72
00:04:34.781 --> 00:04:37.841
Okay, what is the type?

73
00:04:37.841 --> 00:04:41.271
Let's get in, init64, okay, so

74
00:04:41.271 --> 00:04:46.261
it's not an alias,
it doesn't have equals, okay?

75
00:04:46.261 --> 00:04:51.840
But it's expressing nanoseconds.

76
00:04:51.840 --> 00:04:56.600
Don't ask me why it's nanoseconds,
but that's really precise,

77
00:04:56.600 --> 00:04:58.279
really high accuracy.

78
00:04:58.279 --> 00:05:03.410
So yeah, how many nanoseconds in a second?

79
00:05:03.410 --> 00:05:04.278
It's complicated, right?

80
00:05:04.278 --> 00:05:10.343
Anyway, so, fortunately, the time,
the same time package has

81
00:05:10.343 --> 00:05:15.765
some constants express
different units in nanoseconds.

82
00:05:15.765 --> 00:05:20.832
For example, hour, a microsecond,
a millisecond, okay?

83
00:05:20.832 --> 00:05:22.886
So, also there is a second somewhere.

84
00:05:22.886 --> 00:05:31.043
So, I can say, okay, 400 multiplied by
that will give me 400 milliseconds.

85
00:05:31.043 --> 00:05:32.911
Okay, does it make sense?

86
00:05:32.911 --> 00:05:36.461
And if you wanna read the number,
you can get in.

87
00:05:36.461 --> 00:05:41.882
And that's how you get you can
get the minute the nanosecond.

88
00:05:41.882 --> 00:05:45.707
Anyway, so
now we can let the thread asleep for

89
00:05:45.707 --> 00:05:50.427
400 milliseconds,
let's say a little more 800.

90
00:05:50.427 --> 00:05:55.607
So now if I execute this, you can see

91
00:05:55.607 --> 00:06:00.454
the slowness of the code, okay?

92
00:06:00.454 --> 00:06:06.281
The problem is that, yeah,
we're waiting 800 milliseconds but

93
00:06:06.281 --> 00:06:09.504
in the meantime we are doing nothing.

94
00:06:09.504 --> 00:06:15.466
We are not taking advantage of that time
within each print us or something else.

95
00:06:15.466 --> 00:06:19.616
What if we wanna print another

96
00:06:19.616 --> 00:06:24.603
message like no, we miss classes.

97
00:06:26.475 --> 00:06:31.764
Okay, well, you know what will happen,
let's reduce this to 5 for now.

98
00:06:31.764 --> 00:06:34.115
You understand what's going on, I guess.

99
00:06:34.115 --> 00:06:40.412
That we need to wait for the first
output to end to then see the rest.

100
00:06:40.412 --> 00:06:44.852
So we need to wait and
then do another stuff.

101
00:06:44.852 --> 00:06:45.953
This is sequential.

102
00:06:45.953 --> 00:06:48.447
It's not really optimized.

103
00:06:48.447 --> 00:06:51.747
But we can use Goroutine.

104
00:06:51.747 --> 00:06:53.564
So what's a Goroutine?

105
00:06:53.564 --> 00:06:55.384
A light-wave thread.

106
00:06:55.384 --> 00:06:56.450
It's a thread.

107
00:06:56.450 --> 00:06:57.315
What's a thread?

108
00:06:57.315 --> 00:06:58.091
Do you know what a thread?

109
00:06:58.091 --> 00:06:59.809
Does anyone know what a thread is?

110
00:06:59.809 --> 00:07:02.681
How can you define a thread?

111
00:07:02.681 --> 00:07:04.120
Execution thread at least.

112
00:07:07.640 --> 00:07:08.473
&gt;&gt; Not really.

113
00:07:08.473 --> 00:07:09.964
&gt;&gt; Not really.

114
00:07:09.964 --> 00:07:11.550
That's a good definition, not really.

115
00:07:11.550 --> 00:07:16.438
&gt;&gt; [LAUGH] A process that's running.

116
00:07:16.438 --> 00:07:17.406
&gt;&gt; A process?

117
00:07:17.406 --> 00:07:20.772
Yeah, well,
threads are running within processes.

118
00:07:20.772 --> 00:07:25.557
So a thread, it's the execution line and
in modern operating systems,

119
00:07:25.557 --> 00:07:28.311
you can run more than
one at the same time.

120
00:07:28.311 --> 00:07:33.388
Sometimes it's, they're being
executed at the same time but

121
00:07:33.388 --> 00:07:36.659
that's kind of a flexible definition.

122
00:07:36.659 --> 00:07:41.693
It depends on the west, it depends
on if you're multicore, if they're

123
00:07:41.693 --> 00:07:47.312
actually really running at the same time
or it's speaking from one or the other.

124
00:07:47.312 --> 00:07:52.161
Anyway, it feels like we have different
lines of execution running at

125
00:07:52.161 --> 00:07:53.237
the same time.

126
00:07:53.237 --> 00:07:58.438
Well Goroutines are the way
to do that here,

127
00:07:58.438 --> 00:08:03.498
but how that works,
we just need to add Go,

128
00:08:03.498 --> 00:08:08.009
the Go prefix before a function call.

129
00:08:08.009 --> 00:08:14.833
If you say Go and you call a function,
it's going to create a new Goroutine.

130
00:08:14.833 --> 00:08:16.216
What's a new Goroutine?

131
00:08:16.216 --> 00:08:18.181
Kind of a thread.

132
00:08:18.181 --> 00:08:23.396
It's how go,
is the Go response to threading.

133
00:08:23.396 --> 00:08:30.606
Okay, so if I say this one, not the second
one, for example, look what will happen.

134
00:08:30.606 --> 00:08:34.890
Just that, I don't need to
create the structure a type,

135
00:08:34.890 --> 00:08:40.351
I just need to add Go as a prefix to
any function code, any function code.

136
00:08:40.351 --> 00:08:44.009
So now if I run this, let's see if
we can understand what's going on.

137
00:08:49.524 --> 00:08:54.957
So, it seems like it's doing both
things at the same time, right?

138
00:08:54.957 --> 00:09:01.069
Or kind of, because, I mean it's not
completely clear what's going on, but

139
00:09:01.069 --> 00:09:06.640
at least we see that it's merging
responses from different messages.

140
00:09:06.640 --> 00:09:07.456
Why is that?

141
00:09:07.456 --> 00:09:14.838
First, the main function is being
executed in the main Goroutine.

142
00:09:14.838 --> 00:09:18.294
There is always a Go routine,
it's called the main Goroutine.

143
00:09:18.294 --> 00:09:19.826
It's the main function.

144
00:09:19.826 --> 00:09:26.552
Then from there, you can open more
Goroutines just by adding Go, okay?

145
00:09:26.552 --> 00:09:27.372
Makes sense?

146
00:09:27.372 --> 00:09:32.241
So what happens if I want I can have more

147
00:09:32.241 --> 00:09:36.964
messages that say from the Masters.

148
00:09:40.127 --> 00:09:40.945
Rocks.

149
00:09:47.281 --> 00:09:50.850
And now we can see that everything
is being executed at the same time.

150
00:09:52.441 --> 00:09:53.786
Okay, makes sense?

151
00:09:53.786 --> 00:09:58.906
So in this case, it's opening three
apps at the same time, and from now on,

152
00:09:58.906 --> 00:10:04.277
one execution goes in one Goroutine,
the other one goes in another Goroutine.

153
00:10:04.277 --> 00:10:06.494
They're using the same shared space,

154
00:10:06.494 --> 00:10:09.729
which may lead to some problems
with memory management.

155
00:10:09.729 --> 00:10:14.456
What happens if one of those Goroutines
is saving a value on a variable that

156
00:10:14.456 --> 00:10:18.743
other Goroutines at the same time
trying to read the value, okay?

157
00:10:18.743 --> 00:10:22.453
You can lock and unlock and
do things but there is a better way.

158
00:10:22.453 --> 00:10:24.261
There is a Go way to that.

159
00:10:24.261 --> 00:10:26.938
But before getting into that, go away,

160
00:10:26.938 --> 00:10:31.992
what happens if I add a Go to the last
one because I didn't do that on purpose?

161
00:10:31.992 --> 00:10:32.999
You did that.

162
00:10:32.999 --> 00:10:34.007
What happens?

163
00:10:34.007 --> 00:10:34.775
&gt;&gt; Nothing.

164
00:10:34.775 --> 00:10:37.240
&gt;&gt; Nothing, and what nothing means?

165
00:10:37.240 --> 00:10:38.532
&gt;&gt; Nothing printed.

166
00:10:38.532 --> 00:10:42.023
&gt;&gt; Nothing printed, exactly,
so let's try and see why.

167
00:10:42.023 --> 00:10:46.424
So if I add go there, let's see what
happens, so I will clear the screen.

168
00:10:46.424 --> 00:10:49.380
I will run this and nothing happens.

169
00:10:51.370 --> 00:10:52.291
What's going on?

170
00:10:55.270 --> 00:10:57.239
And that leads to another question.

171
00:10:57.239 --> 00:10:59.448
And what's the lifecycle of my app?

172
00:10:59.448 --> 00:11:01.328
When my app ends?

173
00:11:01.328 --> 00:11:05.041
When my Go app ends?

174
00:11:05.041 --> 00:11:09.188
My app ends when the main Goroutine ends.

175
00:11:09.188 --> 00:11:15.362
When the main Go in, the routine ends when
it reaches the end of the main function.

176
00:11:15.362 --> 00:11:19.322
Now I'm opening three more Goroutines.

177
00:11:19.322 --> 00:11:20.804
So I have the main goroutine and

178
00:11:20.804 --> 00:11:23.371
three more goroutines that
they are doing their job.

179
00:11:23.371 --> 00:11:27.103
But the main one has nothing
else to do after that.

180
00:11:27.103 --> 00:11:32.165
So the whole process end, okay?

181
00:11:32.165 --> 00:11:33.311
Does it make sense?

182
00:11:33.311 --> 00:11:36.375
So to prove that, let's do this.

183
00:11:39.543 --> 00:11:41.031
What is that?

184
00:11:41.031 --> 00:11:42.113
An infinite loop.

185
00:11:42.113 --> 00:11:48.053
We keep that main thread
busy doing nothing?

186
00:11:48.053 --> 00:11:51.596
Let's see if that works.

187
00:11:51.596 --> 00:11:55.828
At least I can still see seeing
the rest of the outputs and

188
00:11:55.828 --> 00:11:58.090
now we will be there forever.

189
00:11:58.090 --> 00:12:00.312
How to end up this control C,

190
00:12:00.312 --> 00:12:05.416
on every operating system you can
interrupt Go so far with Ctrl C.

191
00:12:05.416 --> 00:12:07.884
But at least we understood the problem,

192
00:12:07.884 --> 00:12:12.817
okay, the problem is that we need to keep
the main go routine busy, at least until

193
00:12:12.817 --> 00:12:17.626
the rest are ready because when we open
a Goroutine is not a different process.

194
00:12:17.626 --> 00:12:20.871
It's working under my process
by a different thread,

195
00:12:20.871 --> 00:12:24.408
if the main process ends that
everything is killed, okay?

196
00:12:24.408 --> 00:12:29.310
We will see different solutions to
this problem to avoid using these

197
00:12:29.310 --> 00:12:33.191
also you can sleep on the main thread,
so time sleep.

198
00:12:33.191 --> 00:12:35.046
You can sleep but how much time?

199
00:12:35.046 --> 00:12:39.802
Yeah, you don't know mean so
it's not like the best of the solutions,

200
00:12:39.802 --> 00:12:41.478
but you can say a minute.

201
00:12:41.478 --> 00:12:45.324
So now it will wait a minute and
something like that it will work.

202
00:12:45.324 --> 00:12:50.264
Also but yeah, it's kind of
a still not the best of the ideas.

203
00:12:50.264 --> 00:12:54.620
So later we will talk about if there is
any way that we can create some kind of

204
00:12:54.620 --> 00:12:59.400
signup, we know that we know when they
Goroutine, it's ending something, and

205
00:12:59.400 --> 00:13:01.185
doing something, and so on.

206
00:13:01.185 --> 00:13:04.697
But before getting into that,
and by the way,

207
00:13:04.697 --> 00:13:10.462
if a function is calling other functions,
for example, if this function,

208
00:13:10.462 --> 00:13:15.604
if this one is calling a So

209
00:13:15.604 --> 00:13:18.463
when you open a Goroutine, everything that

210
00:13:18.463 --> 00:13:22.954
is being executed from that line
will be executed in that Goroutine.

211
00:13:22.954 --> 00:13:26.589
So when you call a,
you don't need to add Go again.

212
00:13:26.589 --> 00:13:33.400
If you do that, you are opening another
Goroutine, okay, so no need for that.

213
00:13:33.400 --> 00:13:37.576
Just to call the function,
we actually continue on that Goroutine,

214
00:13:37.576 --> 00:13:40.168
and each Goroutine will have its own code.

215
00:13:40.168 --> 00:13:44.838
But have in mind that if you're accessing
global variables, package variables,

216
00:13:44.838 --> 00:13:46.114
they are all the same.

217
00:13:46.114 --> 00:13:48.880
It's not creating copies
of the app in memory.

218
00:13:48.880 --> 00:13:53.042
It just has to do with
execution not with memories.

