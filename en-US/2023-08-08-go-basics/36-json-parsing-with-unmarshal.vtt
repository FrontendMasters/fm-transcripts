WEBVTT

1
00:00:00.000 --> 00:00:02.764
So we need to parse JSON, okay?

2
00:00:02.764 --> 00:00:09.881
So fortunately Go includes JSON parsing
and unparsing, because it includes HTTP,

3
00:00:09.881 --> 00:00:14.805
and also Go includes all
the JSON management that we need.

4
00:00:14.805 --> 00:00:19.341
So for that we can go here, and
now instead of printing the JSON,

5
00:00:19.341 --> 00:00:22.374
I need to do something else with it, okay?

6
00:00:22.374 --> 00:00:27.722
So for working with JSON, I could create
a new a new function if you want,

7
00:00:27.722 --> 00:00:32.284
the function is getting large,
but let's start with here and

8
00:00:32.284 --> 00:00:34.144
then we can refactor it.

9
00:00:34.144 --> 00:00:37.355
So I need to talk with a JSON package.

10
00:00:37.355 --> 00:00:42.925
So you type json, lowercase,
packages are typically lowercase,

11
00:00:42.925 --> 00:00:48.993
so lowercase json., and by the way,
we have a problem using json, why?

12
00:00:48.993 --> 00:00:52.369
Because that's the name
of my variable as well.

13
00:00:52.369 --> 00:00:58.096
And in this case,
my variable is overriding package names.

14
00:00:58.096 --> 00:01:00.480
So that's a tip.

15
00:01:00.480 --> 00:01:04.797
You shouldn't use variable names
that are packages here, but

16
00:01:04.797 --> 00:01:10.024
there are solutions also to that,
because you can add an alias to a package.

17
00:01:10.024 --> 00:01:13.884
But yeah, it's probably better to
just change your variable, okay?

18
00:01:13.884 --> 00:01:17.948
In fact, you will see that I won't
actually even need this, okay?

19
00:01:17.948 --> 00:01:20.380
So, I'm going to delete the string,

20
00:01:20.380 --> 00:01:23.806
you will see that I don't
need the string of the JSON.

21
00:01:23.806 --> 00:01:25.936
I will put that to the console.

22
00:01:25.936 --> 00:01:32.643
So, now I will try again json, and
json, they have a couple of methods.

23
00:01:32.643 --> 00:01:37.691
We have encoders and decoders,
in case you wanna get deep

24
00:01:37.691 --> 00:01:42.844
into the process of encoding or
decoding the JSON, but for

25
00:01:42.844 --> 00:01:48.753
simple things, you don't need to
create a decoder or an encoder.

26
00:01:48.753 --> 00:01:50.431
Remember, is this a constructor?

27
00:01:50.431 --> 00:01:53.395
Here's a question for you,
parentheses, question.

28
00:01:53.395 --> 00:01:56.354
NewDecoder, NewEncoder, what is that?

29
00:01:56.354 --> 00:01:57.736
Is that a constructor?

30
00:02:00.010 --> 00:02:01.819
That's a factory.

31
00:02:01.819 --> 00:02:02.483
That's a factory.

32
00:02:02.483 --> 00:02:04.682
Remember, a factory is a design pattern.

33
00:02:04.682 --> 00:02:07.434
So the constructor is not a method or
a function,

34
00:02:07.434 --> 00:02:12.216
a constructor is always when you use the
type, and then you use curly braces, okay?

35
00:02:12.216 --> 00:02:14.352
So that's actually a factory.

36
00:02:14.352 --> 00:02:20.873
But what we have is the functions
marshal and unmarshal.

37
00:02:20.873 --> 00:02:26.716
Unmarshal will parse a JSON and
will store that into an instance,

38
00:02:26.716 --> 00:02:30.551
into a value that you
parse as an argument.

39
00:02:30.551 --> 00:02:33.697
So this is like the decoding.

40
00:02:33.697 --> 00:02:38.714
This is the one that is parsing,
and it receives a slice of bytes.

41
00:02:38.714 --> 00:02:41.927
That's why I said that, I don't actually
need to convert it into a string.

42
00:02:41.927 --> 00:02:48.039
I can just take the bodyBytes
that I have and unmarshal them.

43
00:02:48.039 --> 00:02:51.107
Marshall because had to do
with the shaping, okay?

44
00:02:51.107 --> 00:02:56.844
It's using that definition of marshalling
to marshal, it has to do with shape.

45
00:02:56.844 --> 00:03:02.051
So we are shaping the data that we
have in JSON into another structure.

46
00:03:02.051 --> 00:03:06.914
And then I need to parse any,
just any, it's a value.

47
00:03:06.914 --> 00:03:11.827
Value is typically in Go what we
used to say object or variable,

48
00:03:11.827 --> 00:03:15.272
or typically object in Java or JavaScript.

49
00:03:15.272 --> 00:03:17.825
When you say, that's an object,
parse any object.

50
00:03:17.825 --> 00:03:21.480
We don't have the object name here,
typically we say parse any value.

51
00:03:21.480 --> 00:03:24.804
Value is kind of anything in Go, okay?

52
00:03:24.804 --> 00:03:27.277
So that's the term that we use in Go,
value.

53
00:03:27.277 --> 00:03:30.094
So we think you'll parse a value, okay?

54
00:03:30.094 --> 00:03:34.949
So the idea is that it's not going
to return me an object, in fact,

55
00:03:34.949 --> 00:03:36.944
if you look the Unmarshal,

56
00:03:36.944 --> 00:03:42.174
it returns only a possible error in
case it couldn't decode that file.

57
00:03:42.174 --> 00:03:45.989
And by the way, look at these, just
completely off, but not off topic, but

58
00:03:45.989 --> 00:03:47.252
not related to this one.

59
00:03:47.252 --> 00:03:50.865
When I'm getting into the Unmarshal,
remember this is Ctrl+click or

60
00:03:50.865 --> 00:03:54.733
Cmd+click if you're on a Mac,
you're getting into the source code of Go.

61
00:03:54.733 --> 00:03:58.621
And this is the Unmarshal function
within the JSON package, but

62
00:03:58.621 --> 00:04:01.074
the name of the file is actually decode.

63
00:04:01.074 --> 00:04:03.825
Do we use the naming of the file anywhere?

64
00:04:03.825 --> 00:04:08.716
No, it's just how they
organized the package.

65
00:04:08.716 --> 00:04:12.916
But the decode name we don't use it,
it's not the function name,

66
00:04:12.916 --> 00:04:14.717
it's not the package name.

67
00:04:14.717 --> 00:04:18.255
We don't care about it, okay?

68
00:04:18.255 --> 00:04:19.207
Closing parenthesis.

69
00:04:19.207 --> 00:04:22.757
So I'm going to Unmarshal this, and, yeah,

70
00:04:22.757 --> 00:04:27.323
I received a possible error here,
but not the data itself.

71
00:04:27.323 --> 00:04:30.046
In this case,
we need to parse the data as an argument.

72
00:04:30.046 --> 00:04:36.402
So, for example,
I need to create first a variable that,

73
00:04:36.402 --> 00:04:40.569
I can call this my cryptoRate of type,

74
00:04:43.745 --> 00:04:50.130
Remember the package name,
datatypes.Rate, okay?

75
00:04:50.130 --> 00:04:53.668
And then I need to kind of
parse the variable like this.

76
00:04:57.689 --> 00:05:02.438
However, this is not gonna work as it is,
why?

77
00:05:02.438 --> 00:05:06.426
Because what happens when I
parse a variable to a function?

78
00:05:06.426 --> 00:05:07.393
&gt;&gt; It clones it.

79
00:05:07.393 --> 00:05:08.362
&gt;&gt; It clones it.

80
00:05:08.362 --> 00:05:09.909
It creates a copy.

81
00:05:09.909 --> 00:05:15.521
So if I want to parse a variable and
I want the function to change the contents

82
00:05:15.521 --> 00:05:20.350
of that variable, I need to parse
the address of that variable.

83
00:05:25.163 --> 00:05:26.695
Okay, makes sense?

84
00:05:30.725 --> 00:05:34.967
Then I should check if there is an error,
it means that it's not a JSON,

85
00:05:34.967 --> 00:05:37.655
the JSON is not valid, something happened,

86
00:05:37.655 --> 00:05:41.429
the structure is not matching the JSON,
something like that.

87
00:05:41.429 --> 00:05:46.047
So I should return nil and an error.

88
00:05:49.792 --> 00:05:54.230
Also, look at this, it's complaining
that I shouldn't create new

89
00:05:54.230 --> 00:05:57.224
variables on left side of blah,
blah, blah.

90
00:05:57.224 --> 00:05:58.852
So what's going on here?

91
00:05:58.852 --> 00:06:03.077
That at the same code block,
I already have another err variable.

92
00:06:03.077 --> 00:06:06.513
So I shouldn't use colon equals.

93
00:06:06.513 --> 00:06:11.013
If I want, I can reuse the same one,
the same variable, but

94
00:06:11.013 --> 00:06:13.362
I shouldn't create a new one.

95
00:06:13.362 --> 00:06:17.917
It didn't happen before because we
were in a different code block.

96
00:06:17.917 --> 00:06:20.419
Remember block scope?

97
00:06:20.419 --> 00:06:25.246
If you're a JavaScript developer,
this is similar to how let and

98
00:06:25.246 --> 00:06:30.097
const work with a block scope and
not bar, bar is function scope.

99
00:06:30.097 --> 00:06:32.098
That's JavaScript, not Go, JavaScript.

100
00:06:37.085 --> 00:06:43.152
So if that works, it means that now
we have our cryptoRate available.

101
00:06:43.152 --> 00:06:49.056
And that's a value that has
the currency and the price.

102
00:06:49.056 --> 00:06:56.155
But the problem is that,
is the API matching my structure?

103
00:06:56.155 --> 00:06:58.660
So let's see this in action.

104
00:06:58.660 --> 00:07:04.027
So if I open Google Chrome and
I use BTC here,

105
00:07:04.027 --> 00:07:07.952
this is the current structure.

106
00:07:10.286 --> 00:07:12.055
&gt;&gt; There's nothing called price.

107
00:07:12.055 --> 00:07:13.467
&gt;&gt; Yeah, there's nothing called price.

108
00:07:13.467 --> 00:07:17.952
I can open this here in the new file and

109
00:07:17.952 --> 00:07:23.456
format it as JSON, so
we can see this better.

110
00:07:23.456 --> 00:07:28.239
So let's compare that with my data type.

111
00:07:30.170 --> 00:07:36.235
I don't want that, I wanna send
that to the right, there we are.

112
00:07:36.235 --> 00:07:42.355
So yeah, we don't have a currency, we
don't have a price, so we have a problem,

113
00:07:42.355 --> 00:07:47.149
because I'm trying to convert
that JSON into that structure and

114
00:07:47.149 --> 00:07:49.211
it's not working, okay?

115
00:07:49.211 --> 00:07:54.546
So, and that's typically something normal.

116
00:07:54.546 --> 00:07:59.229
I typically receive data
from a web service that is

117
00:07:59.229 --> 00:08:02.914
not mapping directly to my data model.

118
00:08:02.914 --> 00:08:05.266
So I need to make some kind
of conversion here, okay?

119
00:08:05.266 --> 00:08:06.362
Makes sense?

120
00:08:06.362 --> 00:08:09.374
So I typically need to
create another data type.

121
00:08:09.374 --> 00:08:12.794
Typically, it's part of the API,
so not from part of my model.

122
00:08:12.794 --> 00:08:15.341
So I need to create another file here for

123
00:08:15.341 --> 00:08:18.128
the data types of the API or
the responses.

124
00:08:20.962 --> 00:08:24.432
Okay, so we can call these responses.go.

125
00:08:24.432 --> 00:08:25.630
Does that make sense?

126
00:08:25.630 --> 00:08:27.263
So package, what's the package?

127
00:08:27.263 --> 00:08:29.046
package api.

128
00:08:29.046 --> 00:08:33.349
And I need to somehow match this.

129
00:08:33.349 --> 00:08:33.852
Where is it?

130
00:08:33.852 --> 00:08:34.352
Here.

131
00:08:38.106 --> 00:08:42.853
But don't worry, you shouldn't be typing a
lot because we will see another solution.

132
00:08:42.853 --> 00:08:46.497
But anyway,
let me start working with this.

