WEBVTT

1
00:00:00.280 --> 00:00:04.960
So now on main.go,
I can also create one course.

2
00:00:06.200 --> 00:00:08.117
Let me remove those prints for now.

3
00:00:08.117 --> 00:00:09.995
Let's keep the Kyle's print.

4
00:00:09.995 --> 00:00:13.940
So I'm going to create the course and

5
00:00:13.940 --> 00:00:18.904
say that the goCourse := data.Course, and

6
00:00:18.904 --> 00:00:24.003
I can pass from here,
I can request the values.

7
00:00:24.003 --> 00:00:29.153
I see how I never hear why, because I'm
not using goCourse, which is expectable.

8
00:00:29.153 --> 00:00:34.027
But now also I can add the ID,
I can add the name, okay?

9
00:00:34.027 --> 00:00:39.412
This is the Go Fundamentals,
and I can add the instructor.

10
00:00:39.412 --> 00:00:41.584
And I can say the instructor is Max.

11
00:00:41.584 --> 00:00:49.010
What if I print the goCourse,
or I call format print, okay?

12
00:00:50.200 --> 00:00:52.296
What I'm going to see from my structure?

13
00:00:54.232 --> 00:00:54.856
I don't know, right?

14
00:00:54.856 --> 00:00:56.870
So what's the output of this?

15
00:00:59.198 --> 00:01:01.311
I'm getting an error, illegal types.

16
00:01:01.311 --> 00:01:05.766
So print is not actually
accepting my goCourse.

17
00:01:05.766 --> 00:01:09.697
You can say, well,
let's change to printf, or println, or

18
00:01:09.697 --> 00:01:12.340
printf from the format library.

19
00:01:12.340 --> 00:01:16.720
And then you say, why don't you
show me the value of a goCourse?

20
00:01:16.720 --> 00:01:20.798
Remember, %v is to represent the value,
okay?

21
00:01:20.798 --> 00:01:25.290
So if I run this,
this is how it looks like.

22
00:01:25.290 --> 00:01:29.118
So it looks like something,
we are like a JSON without properties and

23
00:01:29.118 --> 00:01:30.906
commas, something like that.

24
00:01:30.906 --> 00:01:34.961
And then you say, yeah, can I change that?

25
00:01:34.961 --> 00:01:39.540
Can I change the default
output of my own type?

26
00:01:40.970 --> 00:01:43.510
We do, we can do that.

27
00:01:43.510 --> 00:01:46.370
Remember that on other languages,
you typically have the toString.

28
00:01:47.930 --> 00:01:53.570
Well, here, instead of toString,
it's called, remember that name, string.

29
00:01:55.120 --> 00:02:00.580
So we need on the course, that's the one
that we want to change, a method.

30
00:02:00.580 --> 00:02:06.391
So it's a method,
function that will apply to the course

31
00:02:06.391 --> 00:02:11.365
with a name String that returns a string,
okay?

32
00:02:11.365 --> 00:02:13.700
And this is a function name.

33
00:02:13.700 --> 00:02:17.191
So this is the name of the function.

34
00:02:17.191 --> 00:02:21.174
So the format print
function is looking for

35
00:02:21.174 --> 00:02:25.053
a String function that returns a string.

36
00:02:25.053 --> 00:02:29.253
It sounds like a bustle, okay?

37
00:02:29.253 --> 00:02:37.473
But now you can return how do you want
to render a course in the console.

38
00:02:37.473 --> 00:02:42.499
So you can return an Sprintf
with a format, saying that,

39
00:02:42.499 --> 00:02:46.279
I don't know, some dashes with the name.

40
00:02:47.380 --> 00:02:51.410
And then in parentheses,
the name of the instructor, whatever.

41
00:02:51.410 --> 00:02:57.682
So then if I have two values, two
placeholders, I will say the course.Name,

42
00:02:57.682 --> 00:03:02.258
and the second one,
course.Instructor.FirstName.

43
00:03:07.321 --> 00:03:09.323
So what I'm trying to do,

44
00:03:09.323 --> 00:03:14.158
I'm trying to customize how do
you see the output of elements.

45
00:03:14.158 --> 00:03:18.912
And by the way,
I should add a new line also at the end,

46
00:03:18.912 --> 00:03:21.364
and \n will add a new line.

47
00:03:21.364 --> 00:03:24.138
So now Kyle Simpson is
on a different line.

48
00:03:26.490 --> 00:03:28.163
Does it make sense?

49
00:03:28.163 --> 00:03:32.527
So with this, you can, Change,

50
00:03:32.527 --> 00:03:37.578
it's like kind of a string representation
of your structure, that's kind of idea.

