WEBVTT

1
00:00:00.000 --> 00:00:00.750
Data types.

2
00:00:00.750 --> 00:00:06.799
We have strings,
then we have that like string, that's all?

3
00:00:06.799 --> 00:00:10.955
Lowercase is that we
have different type for

4
00:00:10.955 --> 00:00:18.382
integers we have the standard int,
just int, okay, that is actually point.

5
00:00:18.382 --> 00:00:23.473
It's an alias to int32,
then we have int8, 16, 32, and 64.

6
00:00:23.473 --> 00:00:25.579
What's this?

7
00:00:25.579 --> 00:00:29.052
The amount of bits that is
going to use in memory.

8
00:00:29.052 --> 00:00:33.879
That will express actually the minimum and

9
00:00:33.879 --> 00:00:37.504
the maximum that you can store.

10
00:00:37.504 --> 00:00:41.515
There's of course,
this is 2 power 8 power 16,

11
00:00:41.515 --> 00:00:47.270
that will give you the amount of different
numbers that you can save there.

12
00:00:47.270 --> 00:00:53.555
So it will increase precision,
they will have versions with the u prefix.

13
00:00:53.555 --> 00:00:55.332
You know what that means, don't you?

14
00:00:55.332 --> 00:00:57.471
Have ever seen that on any other language?

15
00:00:57.471 --> 00:00:59.536
uint.

16
00:00:59.536 --> 00:01:01.376
It's unsigned.

17
00:01:01.376 --> 00:01:03.747
So it's an unsigned integer.

18
00:01:03.747 --> 00:01:06.969
In this case, only positive numbers.

19
00:01:06.969 --> 00:01:08.061
Does it make sense?

20
00:01:08.061 --> 00:01:11.988
So that means if you set an int8,

21
00:01:11.988 --> 00:01:15.917
does the simpler to understand,

22
00:01:15.917 --> 00:01:20.843
int8 can go from minus 127 to 128.

23
00:01:20.843 --> 00:01:29.093
That's all, and
if you use uint8 you're like moving that.

24
00:01:29.093 --> 00:01:31.216
I started in zero, from zero 155.

25
00:01:31.216 --> 00:01:37.633
So you make a shift, is the same amount of
possible numbers that you can store, but

26
00:01:37.633 --> 00:01:43.414
you're shifting and starting only
with zeros of positive numbers only.

27
00:01:43.414 --> 00:01:47.010
So it's natural numbers with zero,

28
00:01:47.010 --> 00:01:51.772
including the zero,
that's the uint version.

29
00:01:51.772 --> 00:01:55.644
If you don't know which one to use,
typically use int, and that's all.

30
00:01:55.644 --> 00:01:58.883
For floating pole point values,

31
00:01:58.883 --> 00:02:03.748
we have two versions,
float 32 and float 64.

32
00:02:03.748 --> 00:02:08.255
For if you're going to work with GO and
the web, like JSON,

33
00:02:08.255 --> 00:02:13.142
work with JSON typically you we,
we serve JSON, we parse JSON.

34
00:02:13.142 --> 00:02:17.535
Every number in a JSON will
be converted into float 64.

35
00:02:17.535 --> 00:02:21.380
That's why most of the time,
you wanna play with that one.

36
00:02:21.380 --> 00:02:24.507
Because if not,
we will need to make versions, and

37
00:02:24.507 --> 00:02:26.778
we might want to make things simple.

38
00:02:26.778 --> 00:02:30.852
Then we have bool that is
more like boolean is bool.

39
00:02:30.852 --> 00:02:35.170
It accepts true or false,
lowercase, everything lowercase.

40
00:02:35.170 --> 00:02:39.782
And the Boolean operators are the ones
that we are used to on any

41
00:02:39.782 --> 00:02:41.474
feed based language.

42
00:02:41.474 --> 00:02:46.097
So if you're coming from JavaScript,
they are the same from C.

43
00:02:46.097 --> 00:02:53.672
We have equals, not equals, minor than,
greater than, minor equals.

44
00:02:53.672 --> 00:02:58.340
This is and, this is or,
and this is not, okay?

45
00:02:58.340 --> 00:03:00.760
I think that's pretty simple.

46
00:03:00.760 --> 00:03:02.565
Also, we have pointers.

47
00:03:02.565 --> 00:03:07.768
I know that that will probably give
me a big warning in your head first,

48
00:03:07.768 --> 00:03:11.040
maybe you know what that is,
and lucky you.

49
00:03:11.040 --> 00:03:15.405
But if you don't know what that is,
if mostly if you're coming from C++, and

50
00:03:15.405 --> 00:03:18.942
he's saying with the face, no,
no, I don't wanna get there.

51
00:03:18.942 --> 00:03:23.720
Well, don't worry because it's not so
complicated and

52
00:03:23.720 --> 00:03:28.594
go, and you understand the use case for
for pointers, and

53
00:03:28.594 --> 00:03:34.287
it's not getting too deep or
too low level as with C or C++, okay?

54
00:03:34.287 --> 00:03:38.289
But actually for now let's say
the pointer is we have a variable, and

55
00:03:38.289 --> 00:03:42.227
then we have another variable that
is pointing to the original one.

56
00:03:42.227 --> 00:03:45.804
So you can have the original variable or
a variable that is pointing to.

57
00:03:45.804 --> 00:03:48.262
It's a link, that is.

58
00:03:48.262 --> 00:03:51.490
That is, if you understand that,
that's a pointer.

59
00:03:51.490 --> 00:03:54.373
&gt;&gt; Earlier you said I think.

60
00:03:54.373 --> 00:03:59.039
Did you say that a constant can only
be defined within a function and

61
00:03:59.039 --> 00:04:00.300
not, or global.

62
00:04:00.300 --> 00:04:02.092
&gt;&gt; No,
you can define it constant globally.

63
00:04:02.092 --> 00:04:02.852
It's possible.

64
00:04:02.852 --> 00:04:04.026
&gt;&gt; Or a variable possible.

65
00:04:04.026 --> 00:04:05.636
&gt;&gt; I can create a constant.

66
00:04:05.636 --> 00:04:09.007
What I cannot use is the shortcut.

67
00:04:09.007 --> 00:04:09.705
&gt;&gt; Okay.

68
00:04:09.705 --> 00:04:13.791
&gt;&gt; I cannot use the shortcut
in the global scope.

69
00:04:13.791 --> 00:04:15.391
I need to use bar for that.

70
00:04:15.391 --> 00:04:18.319
And when we use bar,
we don't have the column.

71
00:04:18.319 --> 00:04:22.049
That's the only thing that you
can not do at the global scope.

72
00:04:22.049 --> 00:04:23.390
Just the shortcut.

73
00:04:23.390 --> 00:04:26.965
&gt;&gt; Can go automatically
identify the data type.

74
00:04:26.965 --> 00:04:29.071
&gt;&gt; The data type
&gt;&gt; Data type.

75
00:04:29.071 --> 00:04:30.159
&gt;&gt; Yeah.

76
00:04:30.159 --> 00:04:34.028
So if you are setting the value at
the same time in the same line.

77
00:04:34.028 --> 00:04:37.018
So if I'm creating a new variable here,
and I say is ready.

78
00:04:37.018 --> 00:04:41.588
And I'm applying it through, it's
identifying or automatically the type,

79
00:04:41.588 --> 00:04:45.200
it's giving me an error because
I'm not using it so anxiety.

80
00:04:45.200 --> 00:04:47.211
But if I'm doing that, it is okay.

81
00:04:47.211 --> 00:04:50.812
So it's actually detecting
that if you have equals, but

82
00:04:50.812 --> 00:04:54.948
if I'm going to set a value later,
it doesn't know what that is.

83
00:04:54.948 --> 00:04:57.927
So I have to express that
it's going to be a bool.

84
00:04:57.927 --> 00:05:02.789
And then you can set that safely later,
but if you have the value at the time

85
00:05:02.789 --> 00:05:07.120
of declaring the variable,
it will implicitly reveal the time.

