WEBVTT

1
00:00:00.230 --> 00:00:02.369
One of the problems of GoRoutine and

2
00:00:02.369 --> 00:00:07.350
threading in general is how to
communicate data between threads.

3
00:00:07.350 --> 00:00:11.401
So I have one goroutine that wanna send a
message to the other goroutine that can be

4
00:00:11.401 --> 00:00:13.440
the main goroutine or other goroutine.

5
00:00:13.440 --> 00:00:18.282
It doesn't matter, how we communicate
data, using like local variables,

6
00:00:18.282 --> 00:00:22.900
in this case known as package
variables is not a good idea.

7
00:00:22.900 --> 00:00:27.500
Because you need to lock and lock you
can do that, but it's not a good idea.

8
00:00:27.500 --> 00:00:29.910
So we have something known as channels.

9
00:00:31.280 --> 00:00:36.100
That sounds scary, sounds powerful,
but it's actually pretty simple.

10
00:00:36.100 --> 00:00:39.400
So a channel is kind of
a special type of variable.

11
00:00:39.400 --> 00:00:45.750
So we have a slices we have structures,
we have channels, okay.

12
00:00:45.750 --> 00:00:48.575
The channel is a wrapper
over another value.

13
00:00:48.575 --> 00:00:53.333
It can be a string, it can be a text,
it can be a workshop, anything.

14
00:00:53.333 --> 00:00:57.300
And a routine can define a value for
that channel, and

15
00:00:57.300 --> 00:01:02.340
other routine can wait for a value,
so it's a listener for a value.

16
00:01:02.340 --> 00:01:07.060
And waiting for the value means that
you are going to sleep the thread until

17
00:01:07.060 --> 00:01:08.670
the value is available.

18
00:01:10.320 --> 00:01:14.568
So it's kind of a listener and it will
keep the other routine waiting until

19
00:01:14.568 --> 00:01:16.770
the value is set through the channel.

20
00:01:18.500 --> 00:01:19.000
Make sense?

21
00:01:20.080 --> 00:01:23.946
Channels can be buffer or not, we will see
what that means, but let's see a channel,

22
00:01:23.946 --> 00:01:25.550
pretty simple.

23
00:01:25.550 --> 00:01:28.290
So how do you set up a channel?

24
00:01:28.290 --> 00:01:30.970
Well, it's a variable with the name m1.

25
00:01:30.970 --> 00:01:36.190
You say chan space and
the value inside the channel, that's all.

26
00:01:37.950 --> 00:01:43.230
And then you construct the channel
with make in the constructor.

27
00:01:43.230 --> 00:01:45.560
You make a new channel of a string.

28
00:01:45.560 --> 00:01:50.596
And how do you write in the channel,
with an arrow, by the way, the arrow is,

29
00:01:50.596 --> 00:01:55.400
you don't need to look for
the unique code character for the arrow.

30
00:01:55.400 --> 00:01:57.858
Okay, that's because that's a new font,

31
00:01:57.858 --> 00:02:00.970
modern code font sizes
are using ligatures.

32
00:02:00.970 --> 00:02:05.130
So actually,
it's the less than character and hyphen.

33
00:02:06.220 --> 00:02:11.215
So you use that and
you are saving the message.

34
00:02:11.215 --> 00:02:18.610
And someone else can wait for the message
using this syntax, it feels weird.

35
00:02:18.610 --> 00:02:21.310
So let's see this here.

36
00:02:21.310 --> 00:02:27.520
For example, I could instead of sleeping
here, I could create a channel.

37
00:02:28.990 --> 00:02:34.200
Let's create a channel only for
that one just to keep this simple for now.

38
00:02:34.200 --> 00:02:35.270
So I can create the channel.

39
00:02:35.270 --> 00:02:37.160
How to create the channel is a variable?

40
00:02:37.160 --> 00:02:38.820
Let's call it channel.

41
00:02:38.820 --> 00:02:45.310
It's a channel that will send a bool or
a string or something like that, okay?

42
00:02:45.310 --> 00:02:48.780
So I'm creating a channel, it's
complaining because I'm not using it yet.

43
00:02:48.780 --> 00:02:51.570
But let's say that we
can receive the channel.

44
00:02:51.570 --> 00:02:57.560
So we receive the channel,
it's a channel of string, okay.

45
00:02:57.560 --> 00:03:02.550
So now I can pass the channel and it's not
going to complete it, I'm not using it.

46
00:03:02.550 --> 00:03:07.410
So we create the channel and
it's like a pipe, okay?

47
00:03:07.410 --> 00:03:13.060
So I'm sending you, we are going
to talk about this pipeline, okay?

48
00:03:13.060 --> 00:03:16.430
This is a pipeline and we're going to
communicate through this pipeline.

49
00:03:16.430 --> 00:03:20.270
So then, from here, for
example, when the four ends,

50
00:03:20.270 --> 00:03:23.830
you can send a message to the channel,
how?

51
00:03:23.830 --> 00:03:27.890
You don't say channel equals and
you pass a message like done.

52
00:03:29.030 --> 00:03:30.150
No, it's not equals.

53
00:03:30.150 --> 00:03:39.550
You use this operator, the arrow you are
sending data through the channel, okay?

54
00:03:39.550 --> 00:03:41.530
On the other hand, so on the main thread.

55
00:03:43.440 --> 00:03:48.770
So if I leave the things like this,
we know that the app ends immediately.

56
00:03:48.770 --> 00:03:52.330
So we need to wait for
something, does it make sense?

57
00:03:52.330 --> 00:03:57.846
So we are going to wait for, The channel.

58
00:03:59.782 --> 00:04:00.855
Now what?

59
00:04:00.855 --> 00:04:04.680
In this case,
you can see that the channel.

60
00:04:04.680 --> 00:04:07.950
So here the channel is at
the left of the arrow.

61
00:04:07.950 --> 00:04:09.950
We are sending data to the panel.

62
00:04:09.950 --> 00:04:12.990
Now the channel is at
the right of the arrow.

63
00:04:12.990 --> 00:04:16.383
In this case we are waiting for
data from the channel, and

64
00:04:16.383 --> 00:04:19.720
the thread will wait there
until the channel finishes.

65
00:04:20.780 --> 00:04:23.878
In this case, with this code,
I'm not actually receiving the value, but

66
00:04:23.878 --> 00:04:26.110
you can see it's working now.

67
00:04:26.110 --> 00:04:30.964
So the main thread, it's waiting for then
it's complaining probably because I'm not

68
00:04:30.964 --> 00:04:33.794
yeah it received the channel but
I'm not using it.

69
00:04:33.794 --> 00:04:40.265
So I can save the value, I can print
the value I can even print line the value.

70
00:04:40.265 --> 00:04:44.728
It feels weird to see that there but
it's okay,

71
00:04:44.728 --> 00:04:48.746
I can also create like
another response and

72
00:04:48.746 --> 00:04:53.321
say that the response is going to wait for
that and

73
00:04:53.321 --> 00:04:57.474
then I'm going to put
in line the response.

74
00:04:57.474 --> 00:04:59.508
And what's the response, the string.

75
00:05:02.117 --> 00:05:06.831
So you can use channels, for
two goals, you can send and

76
00:05:06.831 --> 00:05:09.852
receive data between GoRoutines.

77
00:05:09.852 --> 00:05:13.963
And you can use it also for
one routine to wait for another routine to

78
00:05:13.963 --> 00:05:18.160
do something as some kind of an event
listener between GoRoutines.

79
00:05:20.230 --> 00:05:21.670
That make sense?

80
00:05:21.670 --> 00:05:23.366
So it's not difficult, I mean,

81
00:05:23.366 --> 00:05:26.650
it's a really powerful concept
is premise index point of view.

82
00:05:26.650 --> 00:05:29.237
You need to try it and test it and
do a lot of exercises but

83
00:05:29.237 --> 00:05:31.720
it's actually pretty simple and
pretty powerful.

84
00:05:31.720 --> 00:05:37.435
I mean, I'm not sure if any of you have
ever experienced coding with threadings

85
00:05:37.435 --> 00:05:42.982
that it's typically a problem blocking,
the maphrose it's here, there,

86
00:05:42.982 --> 00:05:48.471
it's really complicated to send data,
to know when the other thread ends.

87
00:05:48.471 --> 00:05:53.417
So this is starting from scratch,

88
00:05:53.417 --> 00:05:58.369
fresh, and it's pretty simple.

89
00:05:58.369 --> 00:06:01.283
&gt;&gt; Do the channels work just
within the same package, or

90
00:06:01.283 --> 00:06:03.758
can they be passed
between the two packages?

91
00:06:03.758 --> 00:06:06.128
&gt;&gt; It's just a variable.

92
00:06:06.128 --> 00:06:07.640
So it's a kind of variable.

93
00:06:07.640 --> 00:06:09.628
So if you can pass a variable,
you can pass a channel.

94
00:06:09.628 --> 00:06:15.022
&gt;&gt; And I'm not sure if there's any
reason you would wanna lock it down so

95
00:06:15.022 --> 00:06:17.905
that it's like read only, or yeah,

96
00:06:17.905 --> 00:06:23.900
I guess then it wouldn't be a channel,
it would just be a variable.

97
00:06:23.900 --> 00:06:28.485
&gt;&gt; Yeah, you don't have like, yeah, if you
want like security, actually, if anyone

98
00:06:28.485 --> 00:06:32.850
has the channel, it can read for the
channel or write content to the channel.

99
00:06:32.850 --> 00:06:36.706
You can wrap a channel in your
own type if you want and yeah,

100
00:06:36.706 --> 00:06:38.690
I don't think you need that.

101
00:06:40.010 --> 00:06:43.819
But the last thing that I
have is on channels for

102
00:06:43.819 --> 00:06:48.020
now before creating a very
project that uses this,

103
00:06:48.020 --> 00:06:52.820
is that you can create a buffer,
a buffer channel.

104
00:06:52.820 --> 00:06:57.462
So in this case, the buffer
channel has a second argument but

105
00:06:57.462 --> 00:07:03.574
you can express how many of those values
you wanna send over the channel, okay.

106
00:07:03.574 --> 00:07:06.217
And then you can even in this case,

107
00:07:06.217 --> 00:07:12.570
I'm sending two messages at the same time,
even if no one is listening.

108
00:07:12.570 --> 00:07:15.460
When he said buffer channel,
it's Casa buffer.

109
00:07:16.530 --> 00:07:20.790
Then when any when someone
gets something from there, so

110
00:07:20.790 --> 00:07:26.646
it's like when you have some places in the
city where you can like give a book for

111
00:07:26.646 --> 00:07:31.550
free and when you end you can return
the books and stuff like that.

112
00:07:31.550 --> 00:07:35.420
So you go there you can see there
is a book you get one and if not,

113
00:07:35.420 --> 00:07:39.530
you will wait there until someone
gets a book into the table.

114
00:07:39.530 --> 00:07:41.200
So actually, it's a buffer.

115
00:07:41.200 --> 00:07:44.842
So in this case, if one Go routine
is putting messages there and

116
00:07:44.842 --> 00:07:49.020
no one is listening, they're okay,
they will be buffered.

117
00:07:49.020 --> 00:07:53.392
And at some point, the other GoRoutine
will start reading the messages, and

118
00:07:53.392 --> 00:07:56.029
they will start pulling
them from the buffer.

119
00:07:57.360 --> 00:08:01.813
And if you pull one from the buffer,
and there is no value, it will wait,

120
00:08:01.813 --> 00:08:04.840
they're sitting waiting for the value.

121
00:08:04.840 --> 00:08:07.900
So we've been working with
channels remember and Go routines.

122
00:08:08.930 --> 00:08:14.465
Remember just a GoRoutine is the simple
way that go has to create threads,

123
00:08:14.465 --> 00:08:19.285
and open threads and the channel is
one way that we have to send and

124
00:08:19.285 --> 00:08:21.980
receive data between GoRoutines.

125
00:08:23.330 --> 00:08:26.784
So one of the problems of channels is and

126
00:08:26.784 --> 00:08:31.601
GoRoutines in general is
we've seen that When we, for

127
00:08:31.601 --> 00:08:37.300
some reason, stop the main Goroutine,
everything stops.

128
00:08:37.300 --> 00:08:40.310
And we can get into some deadlocks.

129
00:08:40.310 --> 00:08:46.990
So to avoid that, we have to close all
the channels before ending the program.

130
00:08:46.990 --> 00:08:52.076
There is a close global function,
so we can pass a channel and

131
00:08:52.076 --> 00:08:57.894
it will close the channel, so
we are kind of good citizens with that.

132
00:08:57.894 --> 00:09:02.935
However, sometimes it's not easy
to know when to close the channel,

133
00:09:02.935 --> 00:09:05.570
so when everything is finishing.

134
00:09:05.570 --> 00:09:10.052
So, to solve that problem,
we are going to create a new project, and

135
00:09:10.052 --> 00:09:14.380
in that project we will start
working also with HTTP.

136
00:09:14.380 --> 00:09:18.670
So we're gonna start first reading web
services or reading data from the web.

137
00:09:18.670 --> 00:09:23.642
And we're going to use that example also
to see another way to work with routines,

138
00:09:23.642 --> 00:09:27.730
or to control routines,
that is called weight group.

139
00:09:27.730 --> 00:09:30.782
That is going to help us with that
problem with a deadlock problem.

