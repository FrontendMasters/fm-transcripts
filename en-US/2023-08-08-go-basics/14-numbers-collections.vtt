WEBVTT

1
00:00:00.000 --> 00:00:04.401
Numbers, so if we have, for
example, an integer, and

2
00:00:04.401 --> 00:00:09.368
we wanna make any operation with
that number and use a float, so

3
00:00:09.368 --> 00:00:13.513
we have an integer and
float, it's not gonna work.

4
00:00:13.513 --> 00:00:17.373
Compared with other languages such as C or
JavaScript,

5
00:00:17.373 --> 00:00:21.407
we don't have here automatic
conversion between Types.

6
00:00:21.407 --> 00:00:26.718
So if you need to make a math
operation over an integer and a float,

7
00:00:26.718 --> 00:00:32.339
we must send them to the same type before,
floats or ints, up to you.

8
00:00:32.339 --> 00:00:37.303
For doing that, we have global
functions with the same name

9
00:00:37.303 --> 00:00:41.388
of every type, for example, int, float 32.

10
00:00:41.388 --> 00:00:48.167
We parse something inside and
it will give us the converted value.

11
00:00:48.167 --> 00:00:52.993
That's not magic,
not every conversion is possible.

12
00:00:52.993 --> 00:00:58.275
We cannot convert on a string
with an with a name into a bool,

13
00:00:58.275 --> 00:01:01.878
so it's not gonna work with every type.

14
00:01:01.878 --> 00:01:06.932
Okay, we will see later in which
conditions these will work.

15
00:01:06.932 --> 00:01:11.681
For strings, multi-line strings
are available by default, but

16
00:01:11.681 --> 00:01:16.870
I'm not sure if you remember that we
got an error when we tried to do that.

17
00:01:16.870 --> 00:01:20.078
But it's kind of a linter
that you can change,

18
00:01:20.078 --> 00:01:24.857
because now it's better to use
the backtick for multiline strings.

19
00:01:24.857 --> 00:01:26.623
We will get there later anyway.

20
00:01:26.623 --> 00:01:32.180
Collections, we haven't mentioned
collections yet, arrays.

21
00:01:32.180 --> 00:01:38.932
I'm not sure if you will like how
the Type is being defined, but you use.

22
00:01:38.932 --> 00:01:43.068
For arrays, we have arrays,
slices, and maps,

23
00:01:43.068 --> 00:01:46.722
those are the kinds of
collections we have.

24
00:01:46.722 --> 00:01:49.980
An array, if you're here,
you probably know what it is.

25
00:01:49.980 --> 00:01:55.471
It's a collection of elements, it's a
sequence of elements, a list of elements.

26
00:01:55.471 --> 00:01:59.940
But in Go, arrays have a fixed length.

27
00:01:59.940 --> 00:02:03.087
So if I create an array of five elements,

28
00:02:03.087 --> 00:02:08.098
that array will have five elements
forever, I cannot add more.

29
00:02:08.098 --> 00:02:12.395
I can create a new array,
taking those five elements and

30
00:02:12.395 --> 00:02:17.160
adding one more but
I cannot increase capacity of that array.

31
00:02:17.160 --> 00:02:21.597
And to use that,
we use square brackets, the length,

32
00:02:21.597 --> 00:02:26.040
the capacity within the square
brackets and the type.

33
00:02:26.040 --> 00:02:32.906
So in this case, here, we have an array
of five integers, that's the type.

34
00:02:32.906 --> 00:02:36.240
So when you declare the type,
that's how it looks like.

35
00:02:36.240 --> 00:02:44.510
Then we have slices, that it looks like
it's an array but with a dynamic length.

36
00:02:44.510 --> 00:02:49.007
So you can see we use the same
square brackets without a number and

37
00:02:49.007 --> 00:02:51.430
then the type that we want inside.

38
00:02:51.430 --> 00:02:57.162
However, behind the slides,
we have real arrays.

39
00:02:57.162 --> 00:03:00.612
Actually, it's a slice of an array, okay?

40
00:03:00.612 --> 00:03:06.059
I know it's kind of weird for now, but
let's say that when you create a slice and

41
00:03:06.059 --> 00:03:11.505
you add more elements to the slides
dynamically, behind the scenes, we do have

42
00:03:11.505 --> 00:03:16.980
fixed length arrays, that's the idea and
we are just seeing it's like a view.

43
00:03:16.980 --> 00:03:21.331
We are seeing a partial view of that other
array, okay, have that in mind for now.

44
00:03:21.331 --> 00:03:26.209
A map is a key value dictionary
that typically we have on a lot

45
00:03:26.209 --> 00:03:28.559
of programming languages.

46
00:03:28.559 --> 00:03:31.504
The Type definition is kind of weird.

47
00:03:31.504 --> 00:03:36.775
I have to say that I don't
like how you define the Type.

48
00:03:36.775 --> 00:03:40.162
Let me show you this directly in the code.

49
00:03:40.162 --> 00:03:45.530
So remember, we don't have here
a data package that is just a folder.

50
00:03:45.530 --> 00:03:49.191
I'm going to create another
file collections.go.

51
00:03:49.191 --> 00:03:55.875
And because it's in the data folder,
it must start with package data.

52
00:03:55.875 --> 00:03:58.044
And what if I wanna create the collection?

53
00:03:58.044 --> 00:03:59.668
I wanna export that collection.

54
00:03:59.668 --> 00:04:05.215
If I wanna export that collection,
they must contain the export keyword.

55
00:04:05.215 --> 00:04:09.635
Now, we just need to use title case.

56
00:04:09.635 --> 00:04:14.237
So for example, if I'm gonna
create a variable, we use var, and

57
00:04:14.237 --> 00:04:18.523
then the name of the variable
such as countries, capital C.

58
00:04:18.523 --> 00:04:23.395
And the type is going to be, for example,

59
00:04:23.395 --> 00:04:28.280
10 countries and something like that.

60
00:04:28.280 --> 00:04:32.205
What's the value of those countries?

61
00:04:32.205 --> 00:04:38.220
Nil, empty, so we have 10 countries
with no content right now.

62
00:04:38.220 --> 00:04:45.343
Well, let me tell you something,
we can create init functions.

63
00:04:45.343 --> 00:04:48.273
If you create init functions like this,

64
00:04:48.273 --> 00:04:52.158
you could create or
you could execute code like that.

65
00:04:52.158 --> 00:04:57.229
We can also say sub 0 = 2.

66
00:04:57.229 --> 00:05:03.499
So you will use indexes like that,
Countries.

67
00:05:06.096 --> 00:05:09.793
Let's say,
I don't even need to be in order.

68
00:05:09.793 --> 00:05:19.422
I can say that's sub 8,
When init is going to be executed?

69
00:05:19.422 --> 00:05:24.058
Init is executed typically
when you start your app.

70
00:05:24.058 --> 00:05:27.637
It doesn't matter in which
package do you have them.

71
00:05:27.637 --> 00:05:31.180
In fact, I can have another init here.

72
00:05:31.180 --> 00:05:35.224
Be careful, init is not main,
different thing, okay?

73
00:05:35.224 --> 00:05:42.505
Init is just a function where you can
initialize things when the app starts,

74
00:05:42.505 --> 00:05:46.962
and this is going to be really,
really weird.

75
00:05:46.962 --> 00:05:48.133
Look at that.

76
00:05:48.133 --> 00:05:53.154
I can have more than one init
functions with the same name,

77
00:05:53.154 --> 00:05:57.572
in the same package,
in the same file and it works.

78
00:05:57.572 --> 00:06:02.439
It's the only exception for
repeating the same name, init.

79
00:06:02.439 --> 00:06:06.213
So that means that you
can separate different

80
00:06:06.213 --> 00:06:11.090
blocks of things you wanna
initialize by group, by type.

81
00:06:11.090 --> 00:06:14.874
So you open one init,
another init, another init,

82
00:06:14.874 --> 00:06:19.175
they're going to be executed
in definition order, okay?

83
00:06:19.175 --> 00:06:28.830
So I can just do fmt.Print(A and B) here.

84
00:06:28.830 --> 00:06:32.627
And then if I execute my app,

85
00:06:32.627 --> 00:06:38.647
you will see AB60, that's the max speed.

86
00:06:38.647 --> 00:06:40.624
They should remove, and then Hello World.

87
00:06:40.624 --> 00:06:42.296
So you can see that A and B,

88
00:06:42.296 --> 00:06:46.338
I can use print line if you want
to separate these from the rest.

89
00:06:48.965 --> 00:06:54.690
AB and Hello World,
init goes first before main.

90
00:06:54.690 --> 00:06:59.527
And I can add another init here that says,
for

91
00:06:59.527 --> 00:07:02.327
example, fmt, format,

92
00:07:02.327 --> 00:07:08.714
Printlin("Counties saved") or
something like that.

93
00:07:08.714 --> 00:07:15.168
And then you can see that,
oops, what happened?

94
00:07:17.256 --> 00:07:20.320
What happened with this?

95
00:07:20.320 --> 00:07:26.108
I'm not seeing countries saved,
I'm seeing A and B but not the rest.

96
00:07:26.108 --> 00:07:27.697
So what's going on here?

97
00:07:27.697 --> 00:07:32.925
Well, the thing is that I'm using
the data, but not yet this file.

98
00:07:32.925 --> 00:07:34.776
I'm not using this file yet.

99
00:07:34.776 --> 00:07:38.869
So I have set the countries, but
I'm not using something from that file.

100
00:07:38.869 --> 00:07:40.910
So we will get there.

101
00:07:40.910 --> 00:07:47.232
So init is the only exception for,
let's say, function overloading.

102
00:07:47.232 --> 00:07:51.548
It's not really an overloading because
I'm not changing arguments, but

103
00:07:51.548 --> 00:07:54.780
it's weird that you can have
more than one init, okay?

104
00:07:54.780 --> 00:07:58.715
But that's one collection,
that's the array.

105
00:07:58.715 --> 00:08:02.175
The slice works in a similar way.

106
00:08:02.175 --> 00:08:07.136
So you say, I have a slice,
and you do this.

107
00:08:07.136 --> 00:08:08.824
The light of what?

108
00:08:08.824 --> 00:08:12.399
So integers, and then you can add.

109
00:08:12.399 --> 00:08:18.566
I will show you how to add
more in a minute, okay?

110
00:08:18.566 --> 00:08:19.776
And then we have a map.

111
00:08:19.776 --> 00:08:23.952
The map is key value, okay, key value.

112
00:08:23.952 --> 00:08:29.294
For example, I can say that I have,
I don't know,

113
00:08:29.294 --> 00:08:33.531
codes and this is how you set up the type.

114
00:08:33.531 --> 00:08:37.301
You say map, you open a square brackets,

115
00:08:37.301 --> 00:08:43.012
the type of the key within brackets,
for example, integer and

116
00:08:43.012 --> 00:08:49.181
the type of the value that you will
get for each key, I know a string.

117
00:08:51.492 --> 00:08:55.559
And is kind of weird because
we use a type within brackets,

118
00:08:55.559 --> 00:08:59.545
which is kind of weird, so
the map keyword is mandatory.

119
00:08:59.545 --> 00:09:00.851
And then you say, types.

120
00:09:00.851 --> 00:09:02.791
It can be in the bool.

121
00:09:02.791 --> 00:09:07.032
For every number, you get the bool.

122
00:09:07.032 --> 00:09:12.360
We will use these collections
later in some examples, okay?

123
00:09:12.360 --> 00:09:14.332
What else do we have in
terms of collections?

124
00:09:14.332 --> 00:09:15.241
That's all.

125
00:09:17.490 --> 00:09:24.158
That's all, what about, for example, if
you wanna get the length of the countries?

126
00:09:24.158 --> 00:09:28.954
If you're coming from other languages,
maybe you're expecting something

127
00:09:28.954 --> 00:09:32.729
like Countries.length, but
we don't have objects here.

128
00:09:32.729 --> 00:09:37.951
This is not OOP, so
that's not how things work.

129
00:09:37.951 --> 00:09:43.234
If you want to get the length of,
in this case,

130
00:09:43.234 --> 00:09:50.280
the array, we have a global
function called len from length,

131
00:09:50.280 --> 00:09:56.940
so then you can create a variable
like quantity like that.

132
00:09:56.940 --> 00:10:00.637
It's complaining because
I'm not using quantity, but

133
00:10:00.637 --> 00:10:05.884
that's how you get the length of an array,
len parenthesis and the collection.

134
00:10:05.884 --> 00:10:10.820
The same len function also works for
strings and also other types.

135
00:10:10.820 --> 00:10:18.033
So based on the type that you seen as an
argument, we'll actually act differently.

136
00:10:18.033 --> 00:10:21.850
Is that polymorphism?

137
00:10:21.850 --> 00:10:24.325
It's a similar idea, at least, okay?

138
00:10:24.325 --> 00:10:26.704
So using the same function and

139
00:10:26.704 --> 00:10:31.950
based on the type is going to act
differently, but it's not OOP.

140
00:10:31.950 --> 00:10:36.241
So it's more like an if somewhere
asking for the type and

141
00:10:36.241 --> 00:10:40.182
making things differently,
okay, sounds good.

142
00:10:40.182 --> 00:10:44.579
Okay, let's go back here for a second.

143
00:10:44.579 --> 00:10:48.446
It's collections, as I mentioned,
collections are not objects,

144
00:10:48.446 --> 00:10:50.390
nothing is an object, actually.

145
00:10:50.390 --> 00:10:55.630
So we use global functions to work with
them, len, cap will give you capacity.

146
00:10:55.630 --> 00:10:59.727
That's useful for example for slices,

147
00:10:59.727 --> 00:11:06.367
because maybe you have two elements,
but the capacity is large.

148
00:11:06.367 --> 00:11:11.430
Some examples here, and
here you can see how can I use.

149
00:11:11.430 --> 00:11:14.603
They look like code blocks,
but it's just a constructor.

150
00:11:14.603 --> 00:11:20.251
You will see in a minute that we
do have constructors to construct

151
00:11:20.251 --> 00:11:25.657
data types, and
the constructor is also curly braces.

152
00:11:25.657 --> 00:11:30.835
Okay, so here,
I'm creating a slice with Mary and John,

153
00:11:30.835 --> 00:11:35.707
and append will actually add
one element to the array.

154
00:11:35.707 --> 00:11:41.733
But actually, if you look at the code,
it's not appending to names,

155
00:11:41.733 --> 00:11:48.088
it's actually reassigning names, so
you are reassigning all the time.

156
00:11:48.088 --> 00:11:50.727
We will do some tests here.

157
00:11:50.727 --> 00:11:52.730
But actually, I don't have a slice.

158
00:11:52.730 --> 00:11:56.657
If I have a slice of two elements and
I wanna add a new one,

159
00:11:56.657 --> 00:12:00.015
I'm actually creating
a new slice with three.

160
00:12:00.015 --> 00:12:04.276
And if I want to add another one,
I'm creating a another slice.

161
00:12:04.276 --> 00:12:09.545
I'm not changing the same slice, right,
I'm creating a new one all the time.

162
00:12:09.545 --> 00:12:11.980
And maps, they look like B.

163
00:12:11.980 --> 00:12:17.542
For example, well-known ports,
it's a map, the key is a string.

164
00:12:17.542 --> 00:12:21.047
For example, in this case,
the protocol and

165
00:12:21.047 --> 00:12:26.222
the value is an integer in this case,
the port number, key value.

166
00:12:26.222 --> 00:12:28.978
That looks like JSON, okay, kind of.

167
00:12:28.978 --> 00:12:31.308
It's actually JSON compatible.

