WEBVTT

1
00:00:00.029 --> 00:00:02.204
Now it's going to get more complicated.

2
00:00:02.204 --> 00:00:07.870
So far to go, right, because types
are not just creating new types or

3
00:00:07.870 --> 00:00:13.246
aliases we can create structures and
we can create interfaces and

4
00:00:13.246 --> 00:00:16.488
here comes the most interesting part.

5
00:00:16.488 --> 00:00:21.399
Structures are kind of
the replacement of a class.

6
00:00:21.399 --> 00:00:25.968
It's just a data type with
properties strongly typed.

7
00:00:25.968 --> 00:00:29.679
A structure, and in fact,
in C we have structures as well.

8
00:00:29.679 --> 00:00:35.500
It's like you merge a couple
of properties under one name.

9
00:00:35.500 --> 00:00:40.187
You have the postal address,
you have a street, you have street number,

10
00:00:40.187 --> 00:00:44.509
apartment number, city, zip code,
that's a structure, okay?

11
00:00:44.509 --> 00:00:47.453
So it's just a series of properties.

12
00:00:47.453 --> 00:00:51.229
They do have a constructor that
sounds like classes, okay?

13
00:00:51.229 --> 00:00:58.096
We'll see how we can add methods to
structures because it's a type, okay?

14
00:00:58.096 --> 00:01:01.637
And they will have interfaces
that we will see in a minute so

15
00:01:01.637 --> 00:01:04.470
I don't wanna throw you
both at the same time.

16
00:01:04.470 --> 00:01:11.643
But with interfaces we can simulate or
emulate polymorphism from our P, okay?

17
00:01:11.643 --> 00:01:15.985
So let's go first with
a very simple example.

18
00:01:15.985 --> 00:01:17.977
This is how you create a structure.

19
00:01:17.977 --> 00:01:25.229
You define a type, then the name of your
type, and you use the structure keyword.

20
00:01:25.229 --> 00:01:28.381
After that, curly braces, and

21
00:01:28.381 --> 00:01:33.535
then a list of properties
with identifier and type.

22
00:01:33.535 --> 00:01:36.402
As a class, it looks like a class, right?

23
00:01:36.402 --> 00:01:39.643
And then how do we use that?

24
00:01:39.643 --> 00:01:42.086
Well, first you get
the variable of type user.

25
00:01:42.086 --> 00:01:45.146
And to construct a user,
we don't use a new keyword,

26
00:01:45.146 --> 00:01:48.891
there is a new keyword going on here,
it's a function actually.

27
00:01:48.891 --> 00:01:51.407
But we are not going to use it typically.

28
00:01:51.407 --> 00:01:55.566
And we can call user that's
the name of the type.

29
00:01:55.566 --> 00:02:00.181
And here comes the maybe the weird part,
the odd part, we use curly braces and

30
00:02:00.181 --> 00:02:02.820
there are two ways to
call the constructor.

31
00:02:02.820 --> 00:02:07.463
We can call it property by property or
with named properties,

32
00:02:07.463 --> 00:02:11.408
where you set each property like a JSON,
actually.

33
00:02:11.408 --> 00:02:14.437
It looks like a JSON,
it's actually JSON-value.

34
00:02:14.437 --> 00:02:19.237
It doesn't have quotes on the names, but
it's JavaScript-y JSON, if you want.

35
00:02:19.237 --> 00:02:24.795
And in fact, you don't need
to parse all the properties.

36
00:02:24.795 --> 00:02:30.919
By default when you construct a user,
every property will have nil,

37
00:02:30.919 --> 00:02:34.312
zero, empty string, or nil, okay?

38
00:02:34.312 --> 00:02:39.763
That's a structure I mean it feels okay
it's not like something complicated,

39
00:02:39.763 --> 00:02:42.215
however, it can get complicated.

40
00:02:42.215 --> 00:02:43.763
We will make an example or

41
00:02:43.763 --> 00:02:47.761
we will make a front-end
master's back-end small solution.

42
00:02:47.761 --> 00:02:50.186
It's not going to be back-end yet,

43
00:02:50.186 --> 00:02:53.793
just a structure to understand
how that works, okay?

44
00:02:53.793 --> 00:02:55.326
What about methods?

45
00:02:55.326 --> 00:02:59.603
Because I mentioned, I promised you
that I can add methods to this.

46
00:02:59.603 --> 00:03:06.276
It's gonna be like a class,
can we inherit from another structure?

47
00:03:06.276 --> 00:03:09.278
No, we don't have inheritance.

48
00:03:09.278 --> 00:03:13.677
We have something known as embedding
that we will see that might

49
00:03:13.677 --> 00:03:16.088
simulate some behaviors of that.

50
00:03:16.088 --> 00:03:19.973
So you won't like how to
define the methods, I guess.

51
00:03:19.973 --> 00:03:24.378
Because we are expecting the methods to be
defined here within the structure as in

52
00:03:24.378 --> 00:03:24.977
classes.

53
00:03:24.977 --> 00:03:31.419
And now we define the method the same as
the method we did before for distance.

54
00:03:31.419 --> 00:03:36.354
It's a function outside of
the structure of declaration

55
00:03:36.354 --> 00:03:39.242
that has that special argument.

56
00:03:39.242 --> 00:03:43.629
That's all,
we inject a method to the user.

57
00:03:43.629 --> 00:03:45.961
And typically we wanna use this here.

58
00:03:45.961 --> 00:03:47.851
So there is this ID, this name.

