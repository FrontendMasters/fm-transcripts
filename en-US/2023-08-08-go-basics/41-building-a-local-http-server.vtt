WEBVTT

1
00:00:00.093 --> 00:00:05.313
So it's time now to go back to the idea
of using Go for web development.

2
00:00:05.313 --> 00:00:10.278
So we've covered the fundamentals,
and we have been using the web only to

3
00:00:10.278 --> 00:00:13.819
bring data and
just render that data in the console.

4
00:00:13.819 --> 00:00:18.213
So just as a reminder,
if you're a web developer, with Go,

5
00:00:18.213 --> 00:00:20.378
you can target web assembly.

6
00:00:20.378 --> 00:00:23.787
So in this case,
everything that we have seen so

7
00:00:23.787 --> 00:00:26.954
far can be actually exposed to JavaScript.

8
00:00:26.954 --> 00:00:28.923
So then you compile the module, and

9
00:00:28.923 --> 00:00:32.869
then JavaScript can actually execute
the function from your package.

10
00:00:32.869 --> 00:00:38.237
And there is a type conversion that
needs to be done between types in Go and

11
00:00:38.237 --> 00:00:42.115
types in JavaScript, but
that's kind of the idea.

12
00:00:42.115 --> 00:00:46.112
You can transfer it to JavaScript,
I'm not sure why you wanna do that, but

13
00:00:46.112 --> 00:00:47.643
anyway, it's one option.

14
00:00:47.643 --> 00:00:51.773
In that case, you can actually access
the DOM directly with the document

15
00:00:51.773 --> 00:00:53.948
query selector, but directly in Go.

16
00:00:53.948 --> 00:00:57.371
I don't know any companies
actually using that thing.

17
00:00:57.371 --> 00:01:04.032
You can create a web server so you can
serve your files as if it's Node.js,

18
00:01:04.032 --> 00:01:09.556
or Express.js, or even Apache,
IIS, Engine X, and so on.

19
00:01:09.556 --> 00:01:13.936
In this case, you can use it for
static serving your files, or

20
00:01:13.936 --> 00:01:17.654
you can also create RESTful APIs or
microservices.

21
00:01:17.654 --> 00:01:20.704
We will be focusing right
now in the last two, so

22
00:01:20.704 --> 00:01:24.612
we are going to create a new
project that we have a mix of both.

23
00:01:24.612 --> 00:01:28.339
So we are going to serve a website,
we are going to see first how to

24
00:01:28.339 --> 00:01:32.703
serve it statically, then how we can
do some kind of server-side render.

25
00:01:32.703 --> 00:01:36.200
And mix data with HTML,
see how we can do that,

26
00:01:36.200 --> 00:01:41.151
and then we will create a very
simple web service with Vanilla Go.

27
00:01:41.151 --> 00:01:43.521
Because there are also frameworks and

28
00:01:43.521 --> 00:01:48.705
libraries that you can sit on top of Go to
help you creating a more complex solution,

29
00:01:48.705 --> 00:01:51.610
but we will stay with
the standard libraries.

30
00:01:54.310 --> 00:01:57.531
So I'm going to go back to VS Code, and

31
00:01:57.531 --> 00:02:02.184
we are going to create the last
project of this course.

32
00:02:02.184 --> 00:02:06.138
So now you're experts in doing this thing.

33
00:02:06.138 --> 00:02:09.683
You go create a folder.

34
00:02:09.683 --> 00:02:15.623
We are going to call this
folder Frontend Masters Museum.

35
00:02:15.623 --> 00:02:17.682
We're going to create a museum, okay?

36
00:02:17.682 --> 00:02:23.935
So I can call it Frontend Master Museum,
like FEMM, double M or any name will work.

37
00:02:23.935 --> 00:02:28.122
So we'll serve the website of a museum
that has the name Frontend Masters.

38
00:02:32.775 --> 00:02:40.166
We know the steps, so we do go mod init.

39
00:02:40.166 --> 00:02:49.338
We call it frontendmasters.com/go/museum,
for example.

40
00:02:49.338 --> 00:02:54.306
And then we start with
always the same thing,

41
00:02:54.306 --> 00:02:59.664
main.go, package main,
and a function main,

42
00:02:59.664 --> 00:03:03.730
our entry point, the same as usual.

43
00:03:03.730 --> 00:03:09.361
So now the only difference is that we
are not going to work with the console.

44
00:03:09.361 --> 00:03:12.386
I mean,
the console will always be there, but

45
00:03:12.386 --> 00:03:17.754
we will be focusing into delivering files
and content to a web client, a browser.

46
00:03:17.754 --> 00:03:21.308
So for that,
we're also going to use the HTTP package.

47
00:03:21.308 --> 00:03:25.196
And the HTTP package has a couple

48
00:03:25.196 --> 00:03:30.093
of functions like exported functions.

49
00:03:30.093 --> 00:03:35.045
And the one I'm going to use is called
ListenAndserve, ListenAndserve.

50
00:03:35.045 --> 00:03:39.956
It receives first an address,
so the address that you want,

51
00:03:39.956 --> 00:03:44.385
this is going to open a port
in your operating system for

52
00:03:44.385 --> 00:03:47.106
incoming connections over TCP.

53
00:03:47.106 --> 00:03:51.958
Typically, you use your IP address or
your domain colon and

54
00:03:51.958 --> 00:03:57.390
the port, or you can just use colon and
a port, any port will work,

55
00:03:57.390 --> 00:04:01.194
any number, a valid port number,
by the way.

56
00:04:01.194 --> 00:04:05.602
In this case, if you use that,
you don't need to specify your host or

57
00:04:05.602 --> 00:04:09.858
your IP address because it's going
to open that port on any network

58
00:04:09.858 --> 00:04:12.672
connection that you have in your computer.

59
00:04:12.672 --> 00:04:14.787
And the second argument,

60
00:04:14.787 --> 00:04:19.993
it's called a handler that we're
going to start by saying nil.

61
00:04:19.993 --> 00:04:25.316
ListenAndServe will actually
return a possible error option,

62
00:04:25.316 --> 00:04:28.576
error value, that's the right word.

63
00:04:28.576 --> 00:04:33.204
So if for some reason, I don't know, for
example, the port is already open, or

64
00:04:33.204 --> 00:04:37.966
in use, or it's not the port that you can
actually open because there are some ports

65
00:04:37.966 --> 00:04:39.215
reserved for the OS.

66
00:04:39.215 --> 00:04:46.137
In that case, you will go here and
we can just print line,

67
00:04:46.137 --> 00:04:51.043
or fmt.Println The server couldn't,

68
00:04:51.043 --> 00:04:55.370
or we couldn't open the server, or

69
00:04:55.370 --> 00:04:59.424
Error while opening the server.

70
00:04:59.424 --> 00:05:05.314
So now if I run this, that looks pretty
empty, but anyway, if I run this,

71
00:05:05.314 --> 00:05:10.840
go run., nothing happens, or
it seems that nothing is happening.

72
00:05:10.840 --> 00:05:14.735
So it's not returning
control to the console.

73
00:05:14.735 --> 00:05:16.465
So what's going on here?

74
00:05:16.465 --> 00:05:18.415
We have a server, okay?

75
00:05:18.415 --> 00:05:20.473
Thank you for coming, see you next time.

76
00:05:20.473 --> 00:05:26.654
So the server is there,
it's listening in port 3333.

77
00:05:26.654 --> 00:05:27.685
Do we have something?

78
00:05:27.685 --> 00:05:28.672
No, are we serving something?

79
00:05:28.672 --> 00:05:29.980
No, but the server is there.

80
00:05:29.980 --> 00:05:36.651
And actually, the thread is there
waiting until the server ends.

81
00:05:36.651 --> 00:05:39.288
When is the server ending?

82
00:05:39.288 --> 00:05:41.497
Never.

83
00:05:41.497 --> 00:05:44.614
So actually, if you wanna close it,

84
00:05:44.614 --> 00:05:49.449
you need to manually go to the console and
press Ctrl+C.

85
00:05:49.449 --> 00:05:50.856
You need to interrupt the server.

86
00:05:50.856 --> 00:05:55.060
By default, servers are there up and
running always.

87
00:05:55.060 --> 00:05:57.064
That's because that's a server, right?

88
00:05:57.064 --> 00:06:00.866
So actually what we need to do
is do something else with that,

89
00:06:00.866 --> 00:06:03.411
but just with that, we do have a server.

90
00:06:03.411 --> 00:06:05.675
So you can see,
it's actually pretty simple.

91
00:06:05.675 --> 00:06:07.944
So what else we can do?

92
00:06:07.944 --> 00:06:10.546
Actually, we can start
talking to the http.

93
00:06:10.546 --> 00:06:14.785
And I'm going to refactor
this a little bit.

94
00:06:14.785 --> 00:06:19.215
There are a couple of functions
that start with Handle.

95
00:06:19.215 --> 00:06:25.626
So we can handle with a type or
with a function.

96
00:06:25.626 --> 00:06:26.257
What is that?

97
00:06:26.257 --> 00:06:27.471
Give me a sec.

98
00:06:27.471 --> 00:06:29.793
Let's start with HandleFunc.

99
00:06:29.793 --> 00:06:32.596
We define a pattern, what's the pattern?

100
00:06:32.596 --> 00:06:37.594
A pattern is actually, for
now, let's say the URL.

101
00:06:37.594 --> 00:06:39.964
But this is a routing system.

102
00:06:39.964 --> 00:06:44.286
It's using a multiplexer that
is making routes automatically.

103
00:06:44.286 --> 00:06:45.931
We have that without a library.

104
00:06:45.931 --> 00:06:51.057
So in this case,
we can say that for the URL/,

105
00:06:51.057 --> 00:06:55.790
or for the URL /hello, doesn't matter,

106
00:06:55.790 --> 00:06:59.220
I'm going to pass a function.

107
00:06:59.220 --> 00:07:02.308
In Go,
you can pass functions as arguments.

108
00:07:02.308 --> 00:07:05.110
We haven't done that so far.

109
00:07:05.110 --> 00:07:06.832
And also,
you can create literal functions.

110
00:07:06.832 --> 00:07:09.241
We did that in the previous example.

111
00:07:09.241 --> 00:07:12.136
So I can create a handle if I want to.

112
00:07:12.136 --> 00:07:13.689
Do you see the signature there?

113
00:07:13.689 --> 00:07:15.284
So it's always the same.

114
00:07:15.284 --> 00:07:18.742
It's not extremely complicated.

115
00:07:18.742 --> 00:07:23.742
But anyway, you have first
something known as a response

116
00:07:23.742 --> 00:07:26.876
writer that we typically call it w.

117
00:07:26.876 --> 00:07:31.494
It's an http ResponseWriter.

118
00:07:31.494 --> 00:07:34.184
By the way, I need to add func here.

119
00:07:34.184 --> 00:07:37.647
Let me get some space.

120
00:07:37.647 --> 00:07:43.830
And also, we also have the response,
sorry, the request.

121
00:07:43.830 --> 00:07:45.365
We also have the request.

122
00:07:45.365 --> 00:07:47.946
That is a pointer to http.Request.

123
00:07:47.946 --> 00:07:54.831
That's the signature from an http handler,
so I'm not defining that.

124
00:07:54.831 --> 00:07:56.655
You can do this if you want.

125
00:07:56.655 --> 00:07:59.459
If you like it, let's take that.

126
00:07:59.459 --> 00:08:02.119
It should go the same line.

127
00:08:02.119 --> 00:08:04.327
Okay, like that.

128
00:08:04.327 --> 00:08:11.444
And actually, the idea is that when you
are going to that URL, so localhost,

129
00:08:11.444 --> 00:08:16.716
your port /hello,
it will be handled by this function.

130
00:08:16.716 --> 00:08:17.866
That's the idea.

131
00:08:17.866 --> 00:08:18.809
So how?

132
00:08:18.809 --> 00:08:23.968
Well, we have that request and
this is kind of writer to the response.

133
00:08:23.968 --> 00:08:28.374
If the order seems reversed,
right, it's not a natural order

134
00:08:28.374 --> 00:08:33.453
typically within think request first and
response after, but anyway.

135
00:08:33.453 --> 00:08:38.042
So, for example, on the writer,
we can actually write.

136
00:08:38.042 --> 00:08:43.798
We need to write not strings,
but array that slice of bytes.

137
00:08:43.798 --> 00:08:46.985
That point you say,
that's complicated, but

138
00:08:46.985 --> 00:08:50.325
just remember that we can
quickly call the converter.

139
00:08:50.325 --> 00:08:56.262
There is a function with the name of
the type even with the square brackets,

140
00:08:56.262 --> 00:08:59.666
where we can say, Hello from a Go program.

141
00:09:07.874 --> 00:09:13.672
So if I try this, of going to
the console now where nothing happens,

142
00:09:13.672 --> 00:09:19.191
I will open a Chrome window,
a new window, and make it smaller.

143
00:09:21.447 --> 00:09:24.525
So we can actually do something like this.

144
00:09:24.525 --> 00:09:28.314
I can try localhost 3333.

145
00:09:28.314 --> 00:09:33.394
By default, if I'm going to the root,
we get a 404.

146
00:09:33.394 --> 00:09:37.989
So this default multiplexer that we have,
that server,

147
00:09:37.989 --> 00:09:41.819
it's smart enough that if
there is no handle for

148
00:09:41.819 --> 00:09:47.100
a URL that I'm trying,
it will return a 404, page not found.

149
00:09:47.100 --> 00:09:49.161
We have that for free.

150
00:09:49.161 --> 00:09:52.341
And if I try /hello,

151
00:09:52.341 --> 00:09:56.944
we see Hello from a Go program.

152
00:09:56.944 --> 00:10:00.743
Pretty simple, simple and
fast as you can see.

