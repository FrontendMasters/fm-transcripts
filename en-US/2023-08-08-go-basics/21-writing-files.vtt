WEBVTT

1
00:00:00.000 --> 00:00:02.171
So what if we wanna write the file?

2
00:00:02.171 --> 00:00:06.614
For example, when I write
the second file with some content,

3
00:00:06.614 --> 00:00:09.529
actually, it's relatively similar.

4
00:00:09.529 --> 00:00:12.528
So for that, I'm going to create
another file the same package.

5
00:00:12.528 --> 00:00:14.838
Can I have more than one
file in your package?

6
00:00:14.838 --> 00:00:18.145
Yeah, you can have as
many files as you want.

7
00:00:18.145 --> 00:00:19.595
In fact, look at this.

8
00:00:19.595 --> 00:00:22.718
Have I used the name reader anywhere?

9
00:00:22.718 --> 00:00:28.186
No, this can be go, like that,
and it works anyway.

10
00:00:28.186 --> 00:00:33.987
File names are not important for
the compiler.

11
00:00:33.987 --> 00:00:35.927
We don't use file names.

12
00:00:35.927 --> 00:00:39.202
The name of the go file doesn't matter.

13
00:00:39.202 --> 00:00:43.269
What matters is the name of the package.

14
00:00:43.269 --> 00:00:46.195
We teach you a couple of questions,
but no one asks yet.

15
00:00:46.195 --> 00:00:49.129
But can we have packages in subfolders?

16
00:00:49.129 --> 00:00:52.507
Can I create a hierarchy of packages?

17
00:00:52.507 --> 00:00:56.196
The first quick answer is no.

18
00:00:56.196 --> 00:01:00.235
The idea is to keep only
one level of packages.

19
00:01:00.235 --> 00:01:04.246
Then you can organize your
packages by the name.

20
00:01:04.246 --> 00:01:08.546
Because they are part of this project or
the other project, okay.

21
00:01:08.546 --> 00:01:12.894
But the idea is not to have fileutils,
reader, fileutils,

22
00:01:12.894 --> 00:01:14.946
in the file system at least.

23
00:01:14.946 --> 00:01:19.021
Internally, you can work with the string,
so

24
00:01:19.021 --> 00:01:22.898
it feels like it's a sub-package, okay?

25
00:01:22.898 --> 00:01:24.259
But actually, it doesn't work.

26
00:01:24.259 --> 00:01:29.231
There is something known as internal, not
when you get there because it's an advance

27
00:01:29.231 --> 00:01:32.200
and not really something
that we use a lot in Go, but

28
00:01:32.200 --> 00:01:34.914
a package can have
an internal sub-package.

29
00:01:34.914 --> 00:01:39.432
There's another package that works only
for that package, something like that,

30
00:01:39.432 --> 00:01:40.798
like a private package.

31
00:01:40.798 --> 00:01:42.974
It's only one, it's called internal.

32
00:01:42.974 --> 00:01:47.875
And it's for a more advanced situation,
so we won't cover that.

33
00:01:47.875 --> 00:01:50.186
Okay, so
within the same fileutils package,

34
00:01:50.186 --> 00:01:52.326
I'm not going to create another package.

35
00:01:52.326 --> 00:01:55.909
I could, but let's use fileutils for both.

36
00:01:55.909 --> 00:02:00.243
I'm going to create a new file for
the writer.

37
00:02:00.243 --> 00:02:01.604
is given an error why?

38
00:02:01.604 --> 00:02:05.363
Because that file must
contain the same pack

39
00:02:05.363 --> 00:02:09.131
cache name as the other
files in the folder.

40
00:02:09.131 --> 00:02:14.765
Okay, and in this case,
we're going to create another function.

41
00:02:14.765 --> 00:02:20.251
So we create a function export
the function right to fire but

42
00:02:20.251 --> 00:02:24.872
we received filename and
the content as a string.

43
00:02:24.872 --> 00:02:28.371
And maybe in this case,
we can return an error or nil.

44
00:02:28.371 --> 00:02:33.303
So we don't need the pair
because we are not returning

45
00:02:33.303 --> 00:02:37.257
any value but
we may we may return an error.

46
00:02:37.257 --> 00:02:42.394
In this case we are going
to call OLS right file.

47
00:02:42.394 --> 00:02:47.610
When I press Enter,
you will see it will add import OS for me.

48
00:02:47.610 --> 00:02:50.090
And we already have the file name.

49
00:02:50.090 --> 00:02:51.922
And we just need to pass the content.

50
00:02:51.922 --> 00:03:00.289
The problem is the content that right file
is expecting is actually in slice of byte.

51
00:03:00.289 --> 00:03:04.645
Okay, so yeah, and we have the string.

52
00:03:04.645 --> 00:03:10.716
Fortunately for us because we can convert
a slice of a string into Slice of VITs,

53
00:03:10.716 --> 00:03:13.810
we can do the reverse operation as well.

54
00:03:13.810 --> 00:03:21.326
So we use the name of the type is slice
of white, and we use that as a function.

55
00:03:21.326 --> 00:03:26.476
Because it's a function name
starting with with a symbol,

56
00:03:26.476 --> 00:03:29.780
which is weird, but it works, okay.

57
00:03:29.780 --> 00:03:34.327
Remember I mentioned that
the documentation is actually

58
00:03:34.327 --> 00:03:36.131
available in the CLI.

59
00:03:36.131 --> 00:03:41.241
So you can say go doc,
nothing appear because say go when

60
00:03:41.241 --> 00:03:45.939
you say doc,
it show documentation for a package.

61
00:03:45.939 --> 00:03:48.181
So the next step is to add the package.

62
00:03:48.181 --> 00:03:51.825
So go doc, the package is OS.

63
00:03:51.825 --> 00:03:56.600
Then go doc, OS, write file, and

64
00:03:56.600 --> 00:04:00.566
it give me the information.

65
00:04:00.566 --> 00:04:05.563
So sometimes it's faster to go and
type that, in case you don't have the IDE,

66
00:04:05.563 --> 00:04:07.076
the IDE is not working,

67
00:04:07.076 --> 00:04:12.169
you can use the CLI to actually get the
documentation of one specific function.

68
00:04:12.169 --> 00:04:15.396
But in this case,
I think I would prefer to go and

69
00:04:15.396 --> 00:04:18.483
try to read this directly
from the document.

70
00:04:18.483 --> 00:04:23.417
I want to show you the example
that they are mentioning here,

71
00:04:23.417 --> 00:04:27.596
so we go to learn, sorry,
dogs standard library.

72
00:04:27.596 --> 00:04:32.664
We get into OS, the OS and within the OS,

73
00:04:32.664 --> 00:04:40.732
we look for me decrease the font
size a little bit to get the menu.

74
00:04:40.732 --> 00:04:44.642
So I can get all the functions here.

75
00:04:44.642 --> 00:04:53.196
Let's search for right file because
I typically have an example.

76
00:04:53.196 --> 00:04:57.399
So you can see we have
the devils in the details.

77
00:04:57.399 --> 00:05:03.605
Well in this case, the devil is in
the sample because we have 0666

78
00:05:03.605 --> 00:05:09.603
as the permission number that you
see because this is using flags.

79
00:05:09.603 --> 00:05:12.205
So we need to apply several flags at once.

80
00:05:12.205 --> 00:05:17.105
We need to match the flags
binary intersection.

81
00:05:17.105 --> 00:05:17.886
It doesn't matter.

82
00:05:17.886 --> 00:05:24.861
We can try this to see if that works
that value should work on every OS,

83
00:05:24.861 --> 00:05:29.809
is one of the standard
permissions that you use.

84
00:05:29.809 --> 00:05:34.085
Okay, so this is returning me, an error.

85
00:05:34.085 --> 00:05:36.129
So then I can check.

86
00:05:36.129 --> 00:05:39.052
I can just,
even I don't need to greet the buyer.

87
00:05:39.052 --> 00:05:41.970
Well, I can just return this,

88
00:05:41.970 --> 00:05:47.591
because it's exactly the type
that we are returning here.

89
00:05:47.591 --> 00:05:54.851
Nothing fancy actually, but
at least you can now call write file.

90
00:05:54.851 --> 00:05:55.981
For example,

91
00:05:55.981 --> 00:06:01.830
you can take the same file called
fileutils write to file to the same file.

92
00:06:01.830 --> 00:06:05.970
So I could create a variable with that so

93
00:06:05.970 --> 00:06:12.243
let's say this is the file path
:= to create a variable and

94
00:06:12.243 --> 00:06:16.132
then we will write to the same file but

95
00:06:16.132 --> 00:06:19.895
I'm going to add a .output.txt so

96
00:06:19.895 --> 00:06:23.921
it's another file not the same file.

97
00:06:23.921 --> 00:06:29.808
For the content I can use I'm
going to create a new content,

98
00:06:34.279 --> 00:06:37.561
And I'm going to do something
like this like the original.

99
00:06:37.561 --> 00:06:42.677
Is C and then I wanna double

100
00:06:42.677 --> 00:06:48.962
the original is C and another C.

101
00:06:48.962 --> 00:06:55.591
But you can see that doing this,
it's okay, we can concatenate the strings.

102
00:06:55.591 --> 00:06:57.446
It looks weird.

103
00:06:57.446 --> 00:07:00.230
We are used to templating, okay?

104
00:07:00.230 --> 00:07:03.332
So remember that we have,

105
00:07:03.332 --> 00:07:08.556
from the font library, we have the Printf.

106
00:07:08.556 --> 00:07:11.015
But Printf is printing to the console.

107
00:07:11.015 --> 00:07:14.946
And I want to say something
similar to the string.

108
00:07:14.946 --> 00:07:19.741
Well, for that, the format
library actually has a solution.

109
00:07:19.741 --> 00:07:24.410
It's called Sprintf.

110
00:07:24.410 --> 00:07:27.342
S of have a string.

111
00:07:27.342 --> 00:07:33.054
So it's going to return a string with
a format with the same format as printf.

112
00:07:33.054 --> 00:07:38.393
And be careful because now we have
the S and then print is lowercase.

113
00:07:38.393 --> 00:07:44.512
So if you don't if that what
I'm doing give me a second and

114
00:07:44.512 --> 00:07:50.248
you will get it, so
I'm going to go format s printf and

115
00:07:50.248 --> 00:07:53.201
the format will be a value.

116
00:07:53.201 --> 00:07:57.273
Then it can be in a new line,
or it can say original, colon,

117
00:07:57.273 --> 00:08:00.705
the value, and
then you can say double original.

118
00:08:00.705 --> 00:08:05.838
I'm just duplicating the same thing,
percentage v percentage v, so

119
00:08:05.838 --> 00:08:11.417
I need to pass 3 arguments, and
the three arguments are actually the same.

120
00:08:11.417 --> 00:08:16.237
C, C and C, that is actually the original
string remember that they are reading.

121
00:08:16.237 --> 00:08:21.002
So the output is going to be original,
colon, the original text,

122
00:08:21.002 --> 00:08:24.843
a new line that will original and
twice the same text.

123
00:08:24.843 --> 00:08:31.991
But I'm using, The printf format.

124
00:08:31.991 --> 00:08:37.155
To generate a string that is pretty
useful every time you are creating

125
00:08:37.155 --> 00:08:43.402
complex messages or something like that,
we use sprintf from the format library.

126
00:08:43.402 --> 00:08:49.141
Actually, this is the library
that we use the most for.

127
00:08:49.141 --> 00:08:51.347
Does it make sense?

128
00:08:51.347 --> 00:08:53.470
We will use this two format.

129
00:08:53.470 --> 00:08:58.802
Outputs for example I mean it's not the
case I will delete this in a minute but

130
00:08:58.802 --> 00:09:02.967
if you need to print you have
a variable with a price again and

131
00:09:02.967 --> 00:09:05.326
the price is it's a real number.

132
00:09:05.326 --> 00:09:07.895
And you need to print this okay or

133
00:09:07.895 --> 00:09:11.996
you wanna save a string
version of it string price.

134
00:09:11.996 --> 00:09:16.820
If you say a string of 34 or
3 is not going to work,

135
00:09:16.820 --> 00:09:20.086
it's not doing that conversion.

136
00:09:20.086 --> 00:09:24.327
Even if you print that,
it will print things like this.

137
00:09:24.327 --> 00:09:26.879
Yeah, I don't want that for a price.

138
00:09:26.879 --> 00:09:31.884
So a simple way to make a conversion
is to talk to format Sprintf,

139
00:09:31.884 --> 00:09:38.578
and because it's s printf will receive any
kind of value, it can receive also float.

140
00:09:38.578 --> 00:09:42.196
So I can say f with the price.

141
00:09:42.196 --> 00:09:47.731
And also I can say you know what,
I want only two decimals and

142
00:09:47.731 --> 00:09:55.060
you use for that dot 2% dash the 2 F
that's a float, only with two decimals.

143
00:09:55.060 --> 00:09:56.909
And then you have a string.

144
00:09:56.909 --> 00:10:01.356
Again, not for this particular sample in
particular, but it's another usage for

145
00:10:01.356 --> 00:10:01.935
Sprintf.

146
00:10:01.935 --> 00:10:05.220
It's a quick way to make
conversions to a string, and

147
00:10:05.220 --> 00:10:07.849
to format different values into strings.

148
00:10:10.474 --> 00:10:11.694
&gt;&gt; Okay, make sense?

149
00:10:14.335 --> 00:10:14.853
Any question?

150
00:10:14.853 --> 00:10:21.124
This was to play with the OS a little bit,
to see the error management in action,

151
00:10:21.124 --> 00:10:25.150
how that works,
how to receive two arguments, and

152
00:10:25.150 --> 00:10:28.819
also to use just because
we're here Sprintf.

153
00:10:28.819 --> 00:10:32.149
That we used the same print with format,
but

154
00:10:32.149 --> 00:10:36.743
instead for output to the console
to receive a string that's

155
00:10:36.743 --> 00:10:41.714
the idea
&gt;&gt; A couple of questions on or

156
00:10:41.714 --> 00:10:45.183
clarifications on packages
should package names and

157
00:10:45.183 --> 00:10:48.973
directories always have the same
&gt;&gt; Nope, in fact,

158
00:10:48.973 --> 00:10:52.457
you can see here it says fileutils.

159
00:10:52.457 --> 00:10:59.270
Let me change that now to FileIO,
and everything works.

160
00:10:59.270 --> 00:11:04.099
The only thing I need to change is the,
what I need to change here.

161
00:11:04.099 --> 00:11:05.128
No, I need to change anything.

162
00:11:05.128 --> 00:11:05.965
I think it's.

163
00:11:05.965 --> 00:11:11.889
Okay, so because here the important part
is the package name the way to change

164
00:11:11.889 --> 00:11:18.105
that I can of course if you do the change
both package names you have the same name.

165
00:11:18.105 --> 00:11:24.050
And now I need to change also the main
because yeah it's a different by the way,

166
00:11:24.050 --> 00:11:27.400
can I change the name here but
not the alias?

167
00:11:27.400 --> 00:11:31.844
I can, and for that,
I keep the alias like so.

168
00:11:31.844 --> 00:11:36.158
So we use a space, and this is
an alias because if not, by default,

169
00:11:36.158 --> 00:11:39.022
it's going to use the last
part of the path.

170
00:11:39.022 --> 00:11:42.328
FileIo, okay, that makes sense?

171
00:11:42.328 --> 00:11:43.808
So if you want to you can do this.

172
00:11:43.808 --> 00:11:47.647
And for that if you don't like
format you can call it f but yeah,

173
00:11:47.647 --> 00:11:48.956
no we don't do that.

174
00:11:48.956 --> 00:11:54.038
But we can do that with our own
package name in case you want to.

175
00:11:54.038 --> 00:11:59.971
So if I change to file IO,
I should also change the reference here.

176
00:11:59.971 --> 00:12:01.299
And now we are good.

177
00:12:03.591 --> 00:12:05.904
You said a couple of questions.

178
00:12:05.904 --> 00:12:08.697
Do have alias description just
answered the second question [LAUGH].

179
00:12:08.697 --> 00:12:12.060
Okay, by the way, now that we
have more than one import here,

180
00:12:12.060 --> 00:12:14.915
we have something new that
we haven't seen before.

181
00:12:14.915 --> 00:12:15.704
We have a parenthesis here.

182
00:12:15.704 --> 00:12:16.719
You see that?

183
00:12:16.719 --> 00:12:18.752
I mean, you can guess what's going on.

184
00:12:18.752 --> 00:12:21.905
But this is called a block.

185
00:12:21.905 --> 00:12:23.594
So in this case an import block.

186
00:12:23.594 --> 00:12:28.329
So you can import two things in two
different lines, or you can create

187
00:12:28.329 --> 00:12:33.723
an import block where you use parentheses,
not curly braces, parentheses.

188
00:12:33.723 --> 00:12:36.152
And then inside you put all the values.

189
00:12:36.152 --> 00:12:40.795
And we can also call blocks for variables.

190
00:12:40.795 --> 00:12:42.600
Well, yeah, it can be constant as well.

191
00:12:42.600 --> 00:12:43.987
So not for functions.

192
00:12:43.987 --> 00:12:48.542
We can say bar, and
then we create a as an integer, and

193
00:12:48.542 --> 00:12:52.403
n as a string, and
then you just use bar ones.

194
00:12:52.403 --> 00:12:58.847
It's not a big deal, [LAUGH] but
you can create these blocks as well.

195
00:12:58.847 --> 00:13:02.616
At package level only,
not within the function at package level.

