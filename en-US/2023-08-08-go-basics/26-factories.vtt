WEBVTT

1
00:00:00.046 --> 00:00:04.139
Again, can you set a constructor?

2
00:00:04.139 --> 00:00:09.392
No, not really, not really,
we don't have constructors,

3
00:00:09.392 --> 00:00:14.349
but what we do have is a design
pattern to create a factory.

4
00:00:14.349 --> 00:00:15.525
How's that?

5
00:00:15.525 --> 00:00:16.330
What's a factory?

6
00:00:16.330 --> 00:00:21.551
A function, and
we use a prefix of New, capital n,

7
00:00:21.551 --> 00:00:28.000
because we wanna make this
public exporter, NewInstructor.

8
00:00:28.000 --> 00:00:32.047
And we receive, I don't know,
whatever we wanna receive, like,

9
00:00:32.047 --> 00:00:37.018
I don't know, the name and the lastname,
name as a string, lastname as a string.

10
00:00:37.018 --> 00:00:38.223
And we return what?

11
00:00:38.223 --> 00:00:40.258
An instructor.

12
00:00:40.258 --> 00:00:42.212
It's a factory that you can do on Java.

13
00:00:42.212 --> 00:00:47.009
It's like a static method on
other languages, C# or Java.

14
00:00:47.009 --> 00:00:49.083
We don't have a static methods here.

15
00:00:49.083 --> 00:00:52.706
We don't have the concept of a class
to apply in a static method.

16
00:00:52.706 --> 00:00:57.846
In this case, it's not a method,
it is just a function.

17
00:00:57.846 --> 00:01:02.002
And we basically return here a new

18
00:01:02.002 --> 00:01:07.050
instructor with the FirstName: name,

19
00:01:07.050 --> 00:01:10.914
and the LastName: lastname.

20
00:01:10.914 --> 00:01:14.457
Not a big deal, but
you will see this a couple of times.

21
00:01:14.457 --> 00:01:20.731
Instead of creating constructors,
you create a factoring function.

22
00:01:20.731 --> 00:01:25.562
And the design pattern is to
start with the word New, so

23
00:01:25.562 --> 00:01:30.932
you know it's a way to create
a new something, makes sense?

24
00:01:30.932 --> 00:01:35.229
So then from main, instead of
creating the instructor like this,

25
00:01:35.229 --> 00:01:39.465
I can create another instructor,
I can use Kyle Simpson, Kyle.

26
00:01:39.465 --> 00:01:42.663
So Kyle is data.NewInstructor,
"Kyle", "Simpson".

27
00:01:47.404 --> 00:01:48.478
So then I can print max and
I can print Kyle.

28
00:01:48.478 --> 00:01:52.896
That's how you use the factor.

29
00:01:52.896 --> 00:01:57.827
It's just a function, it's an exported
function from the package.

30
00:02:00.926 --> 00:02:05.650
Some people, some developers
are creating a data package in general.

31
00:02:05.650 --> 00:02:09.340
Some developers are creating
one package for per model.

32
00:02:09.340 --> 00:02:12.906
So then the package can
be called instructor.

33
00:02:12.906 --> 00:02:17.906
If that's the case, then you can use
directly something like instructor.New.

34
00:02:17.906 --> 00:02:21.567
So you don't need to specify the type of
element, the structure you want, okay?

35
00:02:21.567 --> 00:02:23.745
So you can say structure.New.

36
00:02:23.745 --> 00:02:27.471
By that case,
you need a different package per model,

37
00:02:27.471 --> 00:02:31.359
per piece of information that
you are saving in your app.

38
00:02:31.359 --> 00:02:33.686
Does it make sense?

39
00:02:33.686 --> 00:02:40.584
It's not complicated, right, but
this is the base of your data structure.

40
00:02:40.584 --> 00:02:45.277
So I'm going to create one more
structure now for a course, so

41
00:02:45.277 --> 00:02:47.905
one which will be pretty similar.

42
00:02:47.905 --> 00:02:51.044
So it's a course.go package data.

43
00:02:51.044 --> 00:02:54.971
And we're going to create a type,
Course, of type structure,

44
00:02:54.971 --> 00:02:56.726
that's going to have an Id.

45
00:02:56.726 --> 00:03:03.673
Now, we know that we must use capital I,
in case you want to make that public.

46
00:03:03.673 --> 00:03:10.370
Maybe that one can be private,
a name, slug, that's the URL key.

47
00:03:10.370 --> 00:03:12.767
If it's legacy, bool.

48
00:03:12.767 --> 00:03:13.463
What else?

49
00:03:13.463 --> 00:03:19.057
Duration of type, something,
we can create our own time for

50
00:03:19.057 --> 00:03:24.882
duration, and they create a type here,
Duration float32.

51
00:03:24.882 --> 00:03:29.559
By the way, should I create
another Go file for that type?

52
00:03:29.559 --> 00:03:30.488
I don't know.

53
00:03:30.488 --> 00:03:33.888
Again, when I'm doing this,
I'm doing semantics.

54
00:03:33.888 --> 00:03:40.297
We can say every time we say Duration,
it's expressed in hours or in minutes.

55
00:03:40.297 --> 00:03:41.738
Duration Duration.

56
00:03:41.738 --> 00:03:46.405
And then it can into an instructor,
Instructor Instructor.

57
00:03:46.405 --> 00:03:48.665
This is the type,
this is the property name.

