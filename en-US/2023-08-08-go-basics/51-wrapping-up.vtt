WEBVTT

1
00:00:00.000 --> 00:00:04.353
We've seen what's Go,
why Go is important, why it was created.

2
00:00:04.353 --> 00:00:06.293
We've seen the fundamentals.

3
00:00:06.293 --> 00:00:10.745
I mean, there are three rules, that
everything is like it is because we want

4
00:00:10.745 --> 00:00:15.479
something simple to code that can run
really fast, efficient, execution, and

5
00:00:15.479 --> 00:00:17.446
efficient compilation, okay?

6
00:00:17.446 --> 00:00:19.994
We've seen all the fundamentals
of the syntax.

7
00:00:19.994 --> 00:00:27.630
Now you are more confident than before
in seeing Go code, executing Go code.

8
00:00:27.630 --> 00:00:31.909
We cover from the syntax,
100% of the syntax, that's all on Go.

9
00:00:31.909 --> 00:00:34.234
Maybe there are more to read
about different libraries,

10
00:00:34.234 --> 00:00:35.305
the standard libraries.

11
00:00:35.305 --> 00:00:37.235
Yeah, there are more
standard libraries and

12
00:00:37.235 --> 00:00:39.893
more functions on the standard
libraries that we mentioned.

13
00:00:39.893 --> 00:00:42.644
But we covered the most common use cases.

14
00:00:42.644 --> 00:00:45.391
And now that you understand where to look,

15
00:00:45.391 --> 00:00:48.978
the design patterns such as
the error design patterns,

16
00:00:48.978 --> 00:00:53.656
you can confidently use any other
function that we haven't used today.

17
00:00:53.656 --> 00:00:58.693
From the standard libraries, we've cover
some basics like the format package,

18
00:00:58.693 --> 00:01:03.663
the HTTP package, we've seen something
on the strings, string conversions.

19
00:01:03.663 --> 00:01:05.591
We mentioned Goroutines and channels.

20
00:01:05.591 --> 00:01:08.370
Remember this threading thing?

21
00:01:08.370 --> 00:01:10.856
It has its own problem.

22
00:01:10.856 --> 00:01:14.126
Every time you are working with threads,
you are adding some challenges.

23
00:01:14.126 --> 00:01:16.437
So, something like that.

24
00:01:16.437 --> 00:01:21.197
Then we've covered templating, so
how templating works, the fundamentals,

25
00:01:21.197 --> 00:01:22.602
just the initial part.

26
00:01:22.602 --> 00:01:25.372
So we have an if,
we have a for, we have a loop.

27
00:01:25.372 --> 00:01:27.175
We've seen how to make
server-side rendering.

28
00:01:27.175 --> 00:01:33.267
Remember that templates are not just for
HTML and the server.

29
00:01:33.267 --> 00:01:36.853
You can also use it for
any kind of string manipulation,

30
00:01:36.853 --> 00:01:40.072
like when you have larger
string manipulations.

31
00:01:40.072 --> 00:01:44.781
And we ended up creating a very small,

32
00:01:44.781 --> 00:01:49.931
first, web server that can serve files,

33
00:01:49.931 --> 00:01:53.769
can serve APIs, simple APIs.

34
00:01:53.769 --> 00:01:57.001
But if there are no more questions,
okay, that's all I have for you.

35
00:01:57.001 --> 00:02:00.380
And I hope that now you're
ready to start building on Go.

36
00:02:00.380 --> 00:02:01.225
Thank you.

37
00:02:01.225 --> 00:02:05.197
&gt;&gt; [APPLAUSE]

