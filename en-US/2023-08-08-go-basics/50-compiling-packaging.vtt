WEBVTT

1
00:00:00.000 --> 00:00:00.962
Final steps here.

2
00:00:00.962 --> 00:00:04.064
So let's say that we are done
with our Go project.

3
00:00:04.064 --> 00:00:06.081
Our Go project is ready.

4
00:00:06.081 --> 00:00:07.094
What are the final steps?

5
00:00:07.094 --> 00:00:11.143
Well, compiling the project,
we haven't done that, okay?

6
00:00:11.143 --> 00:00:13.267
So so far,
we haven't compiled the project.

7
00:00:13.267 --> 00:00:17.875
So to compile the project, it's go
build ., and it will build the project.

8
00:00:17.875 --> 00:00:21.428
You can also specify an output folder,
because by default,

9
00:00:21.428 --> 00:00:25.063
it will just generate the executable
in your current folder.

10
00:00:25.063 --> 00:00:30.306
And also you can set environmental
variables to change the OS and

11
00:00:30.306 --> 00:00:31.966
the architecture.

12
00:00:31.966 --> 00:00:35.521
Because by default, it's going to use
your OS and your architecture for

13
00:00:35.521 --> 00:00:36.464
the compilation.

14
00:00:36.464 --> 00:00:40.134
But if you're on a Mac,
you can also compile for Windows.

15
00:00:40.134 --> 00:00:42.482
So if I'm going to do that,

16
00:00:45.421 --> 00:00:50.129
Let's do it, if I can, there we are.

17
00:00:50.129 --> 00:00:55.585
So go build .,
I'm going to build the current project.

18
00:00:55.585 --> 00:00:58.735
Great feedback, nothing.

19
00:00:58.735 --> 00:01:04.566
But I'm not sure if you realize
there is a new file in town,

20
00:01:04.566 --> 00:01:08.379
museum, no extension, no nothing.

21
00:01:08.379 --> 00:01:09.120
What's that?

22
00:01:09.120 --> 00:01:15.385
An executable, if you're on Windows,
you will see museum.exe.

23
00:01:15.385 --> 00:01:18.349
On Linux or Mac, it's just the file.

24
00:01:18.349 --> 00:01:25.586
So if you wanna run it, you use ./ and
the name of the executable, okay?

25
00:01:25.586 --> 00:01:26.885
And now it's running.

26
00:01:29.819 --> 00:01:33.217
Now my app is running, okay?

27
00:01:33.217 --> 00:01:34.362
So that's how you build your app.

28
00:01:36.840 --> 00:01:37.462
It's very simple.

29
00:01:37.462 --> 00:01:38.564
What about the installation?

30
00:01:38.564 --> 00:01:39.880
It says here, go install.

31
00:01:39.880 --> 00:01:42.093
What's install?

32
00:01:42.093 --> 00:01:48.669
Go has a folder in your
computer that is in the path.

33
00:01:48.669 --> 00:01:51.659
So if you're doing a CLI,
this is only for CLIs.

34
00:01:51.659 --> 00:01:57.530
So if you want now your app to be
available in the terminal everywhere,

35
00:01:57.530 --> 00:01:58.933
you install it.

36
00:01:58.933 --> 00:02:03.711
And then you can run museum from anywhere,
okay?

37
00:02:03.711 --> 00:02:05.106
What about packaging?

38
00:02:05.106 --> 00:02:07.233
Because that's the file there.

39
00:02:07.233 --> 00:02:11.138
I mean, if you're on a Mac, you know that
to install an app, you typically download

40
00:02:11.138 --> 00:02:14.655
something, and then you need to
put that into application folder.

41
00:02:14.655 --> 00:02:17.845
So do I need to just take that
file as it is and put it there?

42
00:02:17.845 --> 00:02:22.136
No, that's packaging, and
Go ends with a binary.

43
00:02:24.545 --> 00:02:26.677
That's all, the binary.

44
00:02:26.677 --> 00:02:33.419
It's your work to add a package for
your operating system in case you need to.

45
00:02:33.419 --> 00:02:38.212
Because maybe you're going to deploy this
in the cloud, and each provider will

46
00:02:38.212 --> 00:02:42.302
tell you the instructions on where
to put the binary and how to do it.

47
00:02:42.302 --> 00:02:45.213
So you don't need to create the package.

48
00:02:45.213 --> 00:02:48.920
So, for example, the package is useful for
embedding assets,

49
00:02:48.920 --> 00:02:51.539
because here, we have only the executable.

50
00:02:51.539 --> 00:02:53.781
But if we change the executable,

51
00:02:53.781 --> 00:02:57.232
our public folder will not
go with the executable.

52
00:02:57.232 --> 00:03:02.244
So when we are building,
we are just compiling the Go code.

53
00:03:02.244 --> 00:03:09.089
Our public folder is not going
to be in that executable file.

54
00:03:09.089 --> 00:03:12.173
So we are not embedding any assets.

55
00:03:12.173 --> 00:03:13.450
Does it make sense?

56
00:03:13.450 --> 00:03:15.907
Images, logo, PDF, whatever you need or

57
00:03:15.907 --> 00:03:19.955
you are pointing in your code is
completely separate from the binary.

58
00:03:19.955 --> 00:03:23.990
So for that, you need to create
the package and add your embeddings.

59
00:03:23.990 --> 00:03:25.690
You can create the installer for Windows.

60
00:03:25.690 --> 00:03:28.410
There are a lot of tools out
there that will let you do that.

61
00:03:28.410 --> 00:03:33.858
On the Mac, you need to learn
how to create a DMG package.

62
00:03:33.858 --> 00:03:39.360
They can be actually just a package,
or you can also create an installer.

63
00:03:39.360 --> 00:03:42.855
And something similar or
different kind of packages for

64
00:03:42.855 --> 00:03:47.330
Linux based on the distribution,
but the responsibility ends there.

