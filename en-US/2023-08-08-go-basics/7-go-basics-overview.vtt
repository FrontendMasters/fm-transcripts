WEBVTT

1
00:00:00.281 --> 00:00:03.836
Let's talk a little bit about language
types to understand where Go is right now.

2
00:00:03.836 --> 00:00:06.003
So we have different kind of languages.

3
00:00:06.003 --> 00:00:09.418
We have languages where
developers are writing code.

4
00:00:09.418 --> 00:00:12.751
And then we are shipping source code,

5
00:00:12.751 --> 00:00:18.034
such as JavaScript,
Python, okay, Ruby maybe.

6
00:00:18.034 --> 00:00:24.329
We have some languages where we
actually go into compile code,

7
00:00:24.329 --> 00:00:29.317
but not into the binary final code for
one specific

8
00:00:29.317 --> 00:00:34.453
architecture, but
in an intermediate language.

9
00:00:34.453 --> 00:00:36.541
And typically, we ship bytecode.

10
00:00:36.541 --> 00:00:42.357
So we deploy bytecode, and
that's, for example, Java or C#.

11
00:00:42.357 --> 00:00:43.717
So we compile.

12
00:00:43.717 --> 00:00:46.155
We don't deploy .java files,

13
00:00:46.155 --> 00:00:50.680
we deploy .class files typically
grouped in a container.

14
00:00:52.030 --> 00:00:56.455
And then we have compiled languages
that are actually creating

15
00:00:56.455 --> 00:00:58.300
directly machine codes.

16
00:00:58.300 --> 00:01:02.448
So a code that executes
directly in one CPU within

17
00:01:02.448 --> 00:01:05.696
the context of one operating system.

18
00:01:05.696 --> 00:01:08.164
And here we have Go.

19
00:01:08.164 --> 00:01:11.678
By the way, that's the mascot,
okay, of Go.

20
00:01:11.678 --> 00:01:15.354
So Go is here, it's a compiled language.

21
00:01:15.354 --> 00:01:20.007
However, we already mentioned
that also Go can ship

22
00:01:20.007 --> 00:01:24.353
source code as in
transpiling into JavaScript.

23
00:01:24.353 --> 00:01:29.295
They can also ship bytecode, for example,
into WebAssembly, that is, WebAssembly

24
00:01:29.295 --> 00:01:34.470
the format, the WebAssembly container is
kind of a bytecode and also machine code.

25
00:01:34.470 --> 00:01:38.531
That is what we will do here today, okay?

26
00:01:38.531 --> 00:01:43.291
But we are there, so
we don't compare go with Python in

27
00:01:43.291 --> 00:01:46.507
terms of the nature of the language.

28
00:01:46.507 --> 00:01:50.683
We compare that more with C, okay?

29
00:01:50.683 --> 00:01:55.318
So fundamentals of the Go syntax.

30
00:01:55.318 --> 00:01:58.219
Basic rules, we use .go files.

31
00:01:58.219 --> 00:01:59.878
We saw that in action.

32
00:01:59.878 --> 00:02:02.362
We use code blocks, curly braces.

33
00:02:02.362 --> 00:02:07.287
So we don't care as in Python
about spaces or tabs that we have.

34
00:02:07.287 --> 00:02:12.020
We don't care about indentation,
it's just about curly braces.

35
00:02:13.160 --> 00:02:17.102
We don't have a styling freedom,
and you didn't see that yet,

36
00:02:17.102 --> 00:02:18.930
but you will in 15 minutes.

37
00:02:19.980 --> 00:02:24.518
We do have semi-colons to separate
sentences, but it's optional.

38
00:02:24.518 --> 00:02:30.403
And the best practice is not to
use them unless, for some reason,

39
00:02:30.403 --> 00:02:35.329
we are defining two sentences
in the same line, okay?

40
00:02:35.329 --> 00:02:40.279
So if you have two prints in the same
line, well, you must separate those print

41
00:02:40.279 --> 00:02:45.384
calls with a semi-colon, but we are not
going to see semi-colons a lot, yeah.

42
00:02:45.384 --> 00:02:50.822
&gt;&gt; Does that mean it reads
new line as a delimiter?

43
00:02:50.822 --> 00:02:56.445
&gt;&gt; Yeah, so a new line is a delimiter,
but it's not always true because,

44
00:02:56.445 --> 00:03:00.496
let me show you something,
and that's a spoiler.

45
00:03:00.496 --> 00:03:02.460
I can do this.

46
00:03:02.460 --> 00:03:09.217
And you can see it's giving me an error,
okay, say, let me open from here.

47
00:03:09.217 --> 00:03:10.769
What's going on here?

48
00:03:10.769 --> 00:03:12.980
What is that?

49
00:03:12.980 --> 00:03:14.140
Have a lot of errors.

50
00:03:14.140 --> 00:03:15.953
That's first one to go, this one.

51
00:03:15.953 --> 00:03:20.447
A string literal not terminated, but

52
00:03:20.447 --> 00:03:25.644
I can make it work pretty easily,
and also,

53
00:03:25.644 --> 00:03:30.570
I can print more stuff and
go to a new line.

54
00:03:30.570 --> 00:03:35.210
And on some situations, well,
we didn't create variables yet, so

55
00:03:35.210 --> 00:03:37.217
I don't wanna show you that.

56
00:03:37.217 --> 00:03:40.521
So I mean, what I wanna say here is
that it's not like every time you

57
00:03:40.521 --> 00:03:42.470
have a new line, it's a new sentence.

58
00:03:42.470 --> 00:03:47.083
So the compiler will have its own rules,
and most of the time,

59
00:03:47.083 --> 00:03:49.420
it works as expected, okay?

60
00:03:49.420 --> 00:03:51.620
And by the way,
the same happens in JavaScript.

61
00:03:52.690 --> 00:03:57.508
In JavaScript, semicolons are optional,
but typically,

62
00:03:57.508 --> 00:04:04.408
this is changing right now, but typically,
the design guideline is to use it, okay?

63
00:04:04.408 --> 00:04:08.410
But maybe that's changing, well, not here.

64
00:04:08.410 --> 00:04:13.041
So in Go, and that's also
applicable to Swift and Kotlin,

65
00:04:13.041 --> 00:04:16.569
we don't use semicolon
unless we need that.

66
00:04:16.569 --> 00:04:21.644
For example, if I have two
print declarations like this,

67
00:04:21.644 --> 00:04:25.475
this is not gonna work because it says,
no,

68
00:04:25.475 --> 00:04:30.256
you need to go to a new line or
you use semicolon, okay?

69
00:04:30.256 --> 00:04:33.187
But it's for some special cases.

70
00:04:33.187 --> 00:04:34.575
We are not going to use them.

71
00:04:34.575 --> 00:04:38.390
If you are used to that, yeah,
you need to train your brain, okay?

72
00:04:38.390 --> 00:04:43.214
Use the machine learning capability that
you have in your brain to train it to not

73
00:04:43.214 --> 00:04:44.300
use semicolons.

74
00:04:45.990 --> 00:04:50.728
Okay, so
we already said that it's optional.

75
00:04:50.728 --> 00:04:52.400
So we do have them, but it's optional.

76
00:04:52.400 --> 00:04:56.014
It's a case-sensitive language.

77
00:04:56.014 --> 00:04:58.812
So a name variable with capital N or

78
00:04:58.812 --> 00:05:02.872
with lowercase n is not the same variable,
okay?

79
00:05:02.872 --> 00:05:04.280
It's case-sensitive.

80
00:05:04.280 --> 00:05:09.153
It's strongly typed, so which means
if you're coming from Python or

81
00:05:09.153 --> 00:05:13.680
JavaScript, you need to get
used to work with types.

82
00:05:13.680 --> 00:05:20.110
So every variable will have a type and
we can't change that type dynamically.

83
00:05:20.110 --> 00:05:23.867
We will see later how we can
do some dynamic things because

84
00:05:23.867 --> 00:05:26.148
sometimes we have some use cases.

85
00:05:26.148 --> 00:05:32.061
But first, let's start,
this is a strongly typed language.

86
00:05:32.061 --> 00:05:35.835
And it's not an object-oriented language.

87
00:05:35.835 --> 00:05:37.244
We don't create classes.

88
00:05:37.244 --> 00:05:41.015
We don't create objects.

89
00:05:41.015 --> 00:05:44.552
So no classes,
also we don't have exceptions.

90
00:05:44.552 --> 00:05:48.595
Try-catch, no, they don't exist here.

91
00:05:48.595 --> 00:05:51.525
We don't have something
known as an exception.

92
00:05:51.525 --> 00:05:57.634
We do have a way to throw a fatal error.

93
00:05:57.634 --> 00:05:59.111
We will see how to do that.

94
00:05:59.111 --> 00:06:03.055
And also we have a design
pattern to work with errors, and

95
00:06:03.055 --> 00:06:05.850
we will see how that works as well.

96
00:06:05.850 --> 00:06:07.947
But that's not what you
know as exceptions.

97
00:06:07.947 --> 00:06:10.512
We don't have try-catch.

98
00:06:10.512 --> 00:06:12.216
It's going to be something different.

99
00:06:12.216 --> 00:06:14.254
Again, if you're asking, why, why?

100
00:06:14.254 --> 00:06:18.324
Remember there are three goals,
that's why.

101
00:06:18.324 --> 00:06:21.259
Adding that will probably,

102
00:06:21.259 --> 00:06:26.894
in this case,
affect execution performance.

103
00:06:26.894 --> 00:06:30.502
So we have typically one file
acting as the entry point.

104
00:06:30.502 --> 00:06:33.021
That's the one that we need so far.

105
00:06:33.021 --> 00:06:35.140
It has a main function.

106
00:06:36.460 --> 00:06:40.670
Then we're going to start adding more
stuff, for example, what's a package?

107
00:06:40.670 --> 00:06:42.471
A package is a folder, okay?

108
00:06:42.471 --> 00:06:44.190
We will start working
with that in a minute.

109
00:06:45.220 --> 00:06:49.146
Packages can have simple names such as,

110
00:06:49.146 --> 00:06:53.200
services, utilities, data, or URLs.

111
00:06:53.200 --> 00:06:57.592
So you can actually use
a URL as a package name, but

112
00:06:57.592 --> 00:07:01.470
doesn't need to actually match a real URL.

113
00:07:03.480 --> 00:07:08.456
And within one Go file, so
in .go file we can have variables,

114
00:07:08.456 --> 00:07:13.817
functions, so far we did only
one function, type declarations,

115
00:07:13.817 --> 00:07:19.100
we haven't seen one yet,
and methods declaration.

116
00:07:19.100 --> 00:07:20.770
We will cover all of this, okay?

117
00:07:20.770 --> 00:07:25.070
But we will have Go files with variable
functions, type declarations, and

118
00:07:25.070 --> 00:07:26.419
methods declaration.

119
00:07:28.050 --> 00:07:33.456
There is a constant, well, that typically
goes under the variables umbrella.

120
00:07:33.456 --> 00:07:35.668
And then we have modules.

121
00:07:35.668 --> 00:07:37.470
What's a module?

122
00:07:37.470 --> 00:07:40.540
Roughly and quickly, a quick and
dirty definition, a project.

123
00:07:42.470 --> 00:07:47.567
So far, we have just created
only one file without a module.

124
00:07:47.567 --> 00:07:53.034
So it wasn't actually a Go application,
it was a standalone script.

125
00:07:53.034 --> 00:07:55.114
That is not common, okay?

126
00:07:55.114 --> 00:07:57.073
So typically, you don't do that.

127
00:07:57.073 --> 00:07:58.471
So you create a module.

