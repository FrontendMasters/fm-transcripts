WEBVTT

1
00:00:00.211 --> 00:00:04.563
But, not everything is good news,

2
00:00:04.563 --> 00:00:11.540
because what if we wanna create
here an array of courses.

3
00:00:11.540 --> 00:00:16.536
So I create courses, and
I say it's going to be a variable, and

4
00:00:16.536 --> 00:00:19.565
it's an array of, let's say, two.

5
00:00:19.565 --> 00:00:20.191
Two what?

6
00:00:20.191 --> 00:00:25.601
2 courses and then we say okay,
the first one,

7
00:00:25.601 --> 00:00:30.888
let's do that at the end
after defining them.

8
00:00:30.888 --> 00:00:34.945
I'm sorry Kyle,
I will delete you for a while,

9
00:00:34.945 --> 00:00:39.013
nothing personal, but
we don't need you now.

10
00:00:39.013 --> 00:00:42.300
So let's do this, so it's getting better.

11
00:00:42.300 --> 00:00:46.446
So zero is going to be
the core Go course and

12
00:00:46.446 --> 00:00:52.732
then the other one it's going
to be the Swift workshop, okay?

13
00:00:52.732 --> 00:00:56.171
The problem is that in fact
it's suggesting me something,

14
00:00:56.171 --> 00:00:57.490
what's the problem?

15
00:00:57.490 --> 00:01:01.617
That Swift workshop is not a course.

16
00:01:01.617 --> 00:01:04.326
It's not real inheritance.

17
00:01:04.326 --> 00:01:07.634
It's a workshop, it's a different type.

18
00:01:07.634 --> 00:01:13.948
So, and I want this because
instead of printing one by one,

19
00:01:13.948 --> 00:01:18.240
maybe what I want is to
make a loop here and

20
00:01:18.240 --> 00:01:22.659
use a for and we can use this,
we can say for

21
00:01:22.659 --> 00:01:28.343
each index that cast a course
that our range you use for

22
00:01:28.343 --> 00:01:34.069
range, we use the keyword range and
the collection.

23
00:01:34.069 --> 00:01:42.343
So for each course What he wants to
do is to print or format print F.

24
00:01:42.343 --> 00:01:46.862
Anyway, I don't need to use print f
with this I can just use print line.

25
00:01:46.862 --> 00:01:51.132
It will take the same string method,

26
00:01:51.132 --> 00:01:55.136
print line and print line course.

27
00:01:55.136 --> 00:02:00.076
You can see that this for range, receives
the index, the numbers of 0, 1, 2,

28
00:02:00.076 --> 00:02:02.452
blah, blah, blah, and the element.

29
00:02:02.452 --> 00:02:05.846
If you don't need the number,
you can use underscore.

30
00:02:05.846 --> 00:02:07.473
If you don't need the index.

31
00:02:10.127 --> 00:02:12.305
Okay, but we have this problem.

32
00:02:12.305 --> 00:02:13.638
It's a big problem.

33
00:02:13.638 --> 00:02:20.246
We cannot make an array that
includes both worships and courses.

34
00:02:20.246 --> 00:02:23.239
Do you all understand the problem?

35
00:02:23.239 --> 00:02:25.917
Okay, let's see how to solve the problem.

36
00:02:25.917 --> 00:02:31.093
To solve the problem,
we go back to the idea of interfaces,

37
00:02:31.093 --> 00:02:36.177
that was defined here as
the final type that we can create.

38
00:02:36.177 --> 00:02:41.362
An interface is a definition of methods,
it's a list of methods.

39
00:02:41.362 --> 00:02:46.244
And we can use polymorphism, or
at least emulate polymorphism with this.

40
00:02:48.497 --> 00:02:52.782
Let's see them in action,
how it can help here.

41
00:02:52.782 --> 00:02:58.736
So for example, we can say that

42
00:03:03.523 --> 00:03:09.113
I mean, it's not necessary to add this
method for you to get the better idea,

43
00:03:09.113 --> 00:03:13.757
I'm going to add a method on
the course that, so it's a method,

44
00:03:13.757 --> 00:03:18.583
so we have this special thing,
that will, for example, sign up.

45
00:03:18.583 --> 00:03:20.560
It will you can ask for a sign-up.

46
00:03:20.560 --> 00:03:23.061
They will return an eyeball wherever.

47
00:03:23.061 --> 00:03:26.203
You're a dental, yeah, you're in.

48
00:03:26.203 --> 00:03:28.911
Okay, so sign up to the course.

49
00:03:28.911 --> 00:03:31.906
So and of course the workshop
can have the same as well.

50
00:03:31.906 --> 00:03:33.633
And also it can have its own signup.

51
00:03:33.633 --> 00:03:36.550
But if I try to do that, it says, hey,

52
00:03:36.550 --> 00:03:40.291
well this is course, so
you shouldn't change,

53
00:03:40.291 --> 00:03:45.510
it doesn't matter the file where
it's in the same package, okay?

54
00:03:45.510 --> 00:03:47.312
So I can change the implementation here.

55
00:03:47.312 --> 00:03:52.342
So both cores and
workshops they have signed up, okay?

56
00:03:52.342 --> 00:03:54.068
Make sense?

57
00:03:54.068 --> 00:03:57.896
So now I can go to the same package.

58
00:03:57.896 --> 00:04:00.644
Typically, we create a new file for this.

59
00:04:00.644 --> 00:04:04.180
I'm going to create an interface.

60
00:04:04.180 --> 00:04:06.197
First, it's a new file.

61
00:04:06.197 --> 00:04:09.501
We start always with package and
the name of the package.

62
00:04:09.501 --> 00:04:15.886
And then we create a new type that
we can call it as Signable or

63
00:04:15.886 --> 00:04:21.656
kind of course, kind of sign up,
any name will work.

64
00:04:21.656 --> 00:04:26.026
You will understand the name,
I mean, it's like signable,

65
00:04:26.026 --> 00:04:30.074
something that you can sign to,
and it's an interface.

66
00:04:30.074 --> 00:04:33.001
And what you put here in the interface,

67
00:04:33.001 --> 00:04:38.425
at least of methods without any code,
just the signature of the method.

68
00:04:38.425 --> 00:04:43.339
In our case,
it's going to be sign up boot.

69
00:04:43.339 --> 00:04:50.775
So I can say I wanted to have
a function with a name, signup bowl.

70
00:04:50.775 --> 00:04:53.635
Okay, something like this.

71
00:04:53.635 --> 00:04:55.940
I still need to work with this, okay?

72
00:04:55.940 --> 00:04:59.299
So let me show you the idea here,
how it looks like,

73
00:04:59.299 --> 00:05:03.911
because you can see that it's
complaining because I have one more step

74
00:05:03.911 --> 00:05:06.821
that the fun keyword
is not necessary here.

75
00:05:06.821 --> 00:05:09.861
So an interface is just a list of methods.

76
00:05:09.861 --> 00:05:13.399
And then we can use that as a type.

77
00:05:13.399 --> 00:05:18.627
You say, okay,
if you have ever played with Java, Czar,

78
00:05:18.627 --> 00:05:24.085
PHP, Swift, Kotlin,
they have interfaces or protocols.

79
00:05:24.085 --> 00:05:25.113
It's kind of something similar.

80
00:05:25.113 --> 00:05:26.387
I really like the name protocol.

81
00:05:26.387 --> 00:05:27.438
It's not the Go name.

82
00:05:27.438 --> 00:05:29.997
But I like the name too, and
understand what's going on.

83
00:05:29.997 --> 00:05:31.691
So we are defining a protocol.

84
00:05:31.691 --> 00:05:35.924
And then we can see which
structures are following

85
00:05:35.924 --> 00:05:39.967
the protocol are implementing
the interface.

86
00:05:39.967 --> 00:05:42.159
So in this case,
I don't need the fun keyword.

87
00:05:42.159 --> 00:05:43.724
That was the thing.

88
00:05:43.724 --> 00:05:48.404
So it's just the same function declaration
without the fun keyword, Just that.

89
00:05:48.404 --> 00:05:53.382
So now I can go to my array and
say, you know what,

90
00:05:53.382 --> 00:05:59.210
it's not going to be a ray of course,
because if I say so,

91
00:05:59.210 --> 00:06:03.837
it will be only instances
of that structure.

92
00:06:03.837 --> 00:06:11.461
I'm gonna say, they're gonna be signables.

93
00:06:11.461 --> 00:06:16.846
Now it works, I don't have any errors.

94
00:06:16.846 --> 00:06:21.650
And I am seeing your faces even
I'm imagining the faces over

95
00:06:21.650 --> 00:06:24.639
the camera like, but wait a minute.

96
00:06:24.639 --> 00:06:29.091
Where did I set that course I worship

97
00:06:29.091 --> 00:06:33.553
are implementing that interface.

98
00:06:33.553 --> 00:06:35.234
I'm not saying it anywhere.

99
00:06:35.234 --> 00:06:40.636
In Go, it's implicit by the name or

100
00:06:40.636 --> 00:06:45.867
the signature of your interface.

101
00:06:45.867 --> 00:06:49.553
So, if you have any type
of with that method,

102
00:06:49.553 --> 00:06:55.771
with that signature you're in,
you're in the interface automatically.

103
00:06:55.771 --> 00:06:57.596
You don't need to say so.

104
00:06:57.596 --> 00:07:02.361
You don't need to say implement signable.

105
00:07:02.361 --> 00:07:05.677
No, it just works.

106
00:07:05.677 --> 00:07:09.519
Any type with a method, sign up,

107
00:07:09.519 --> 00:07:14.605
return your bull will be in automatically.

108
00:07:14.605 --> 00:07:19.077
That's what is known as, do I say here,

109
00:07:19.077 --> 00:07:22.243
implicit implementation.

110
00:07:22.243 --> 00:07:26.897
So let's run this because
I didn't run this yet, and

111
00:07:26.897 --> 00:07:30.632
now it works, both are working properly.

112
00:07:30.632 --> 00:07:37.926
Because both are having that method so I
can create an array, a collection of them.

113
00:07:37.926 --> 00:07:43.153
That's an interface, and
that's polymorphism.

114
00:07:43.153 --> 00:07:48.633
Looping through a lot of objects without
actually knowing the kind of objects,

115
00:07:48.633 --> 00:07:53.317
I just need to know that it has
the function or the action that I need.

