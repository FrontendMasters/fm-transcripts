WEBVTT

1
00:00:00.012 --> 00:00:02.640
So Three.js, there's some links here.

2
00:00:02.640 --> 00:00:06.353
You're probably gonna wanna keep
the docks open for a lot of the day.

3
00:00:06.353 --> 00:00:08.026
You can also go through
some of the examples.

4
00:00:08.026 --> 00:00:11.372
They have got tons of examples, and
you can browse the source code for

5
00:00:11.372 --> 00:00:13.050
the examples.

6
00:00:13.050 --> 00:00:17.150
But the first thing that I like
to introduce with Three.js is

7
00:00:17.150 --> 00:00:21.070
this coordinate,
this Vector3 sorta coordinate.

8
00:00:21.070 --> 00:00:25.539
So, we've already got this like
little coordinate system here.

9
00:00:25.539 --> 00:00:26.960
And we have a little coordinate.

10
00:00:26.960 --> 00:00:29.440
But how do we define
that coordinate in code?

11
00:00:29.440 --> 00:00:33.440
And so we define it in code with
this sort of Vector3 data type.

12
00:00:34.580 --> 00:00:38.785
So there's like a vector class which
can be 2 for 2D coordinates, or 3 for

13
00:00:38.785 --> 00:00:41.363
3D coordinates, or 4 for 4D coordinates.

14
00:00:41.363 --> 00:00:44.190
We're probably gonna be working
with Vector3 most often.

15
00:00:44.190 --> 00:00:47.431
And we just define it
like this new Vector3.

16
00:00:47.431 --> 00:00:49.536
We pass in the x, y, and z.

17
00:00:49.536 --> 00:00:52.780
And you can actually edit this code and
see how it changes the little graphic.

18
00:00:54.410 --> 00:00:57.250
So the x, the y, and z and so forth.

19
00:00:57.250 --> 00:01:01.260
We can set individual components on
the vector just by doing position.x

20
00:01:01.260 --> 00:01:04.830
is equal to something or
position.y is equal to something.

21
00:01:04.830 --> 00:01:08.576
And that will change the components the x,
y, z.

22
00:01:08.576 --> 00:01:11.894
And then we can also use
this set scalar function,

23
00:01:11.894 --> 00:01:17.113
which is gonna place all three components,
the x, y, and z to the same value.

24
00:01:17.113 --> 00:01:22.692
So they're gonna say x, y, and
z are now gonna be equal to 0.5.

25
00:01:22.692 --> 00:01:26.150
Or anything in the past there's 0,
just make them all go to the center.

26
00:01:27.410 --> 00:01:30.400
And then another function we use
a lot is this copy function.

27
00:01:30.400 --> 00:01:36.180
So copying the x, y,
z components from a different Vector3.

28
00:01:37.250 --> 00:01:39.515
So that's pretty common.

29
00:01:39.515 --> 00:01:42.060
And then also going from into arrays.

30
00:01:42.060 --> 00:01:44.604
So sometimes we'll have APIs
that will be array based.

31
00:01:44.604 --> 00:01:49.000
So the x, y, z coordinates will
be in just a simple array.

32
00:01:49.000 --> 00:01:52.990
And so we can use this method from
array to take the x, y, z and

33
00:01:52.990 --> 00:01:54.830
put that into the Vector3.

34
00:01:54.830 --> 00:01:59.535
Or alternatively, the other way around,
we can use the method

35
00:01:59.535 --> 00:02:04.212
toArray which is gonna return a new array
that has this sort of structure x, y, z.

36
00:02:05.320 --> 00:02:08.806
So that's the basics of vectors.

37
00:02:08.806 --> 00:02:12.238
And another concept that's
really commonly used is colors.

38
00:02:12.238 --> 00:02:16.718
So instead of just using strings like
we would in CSS or something like that,

39
00:02:16.718 --> 00:02:20.430
in Three.js,
we have to use this color interface.

40
00:02:20.430 --> 00:02:22.076
And so we create a new color.

41
00:02:22.076 --> 00:02:26.536
We pass in the string, maybe a Hex code or
maybe an RGB or HSL string or

42
00:02:26.536 --> 00:02:32.020
something like that or just a color
like tomato, or green, or blue.

43
00:02:32.020 --> 00:02:35.540
And then we can change
the RGB values of this color.

44
00:02:35.540 --> 00:02:38.420
So you could say color.r is equal 0 or 1,

45
00:02:38.420 --> 00:02:43.320
color.g is equal to something,
color.b is equal to something.

46
00:02:43.320 --> 00:02:48.091
These values are between 0 and 1,
instead of being between 0 to 255.

47
00:02:48.091 --> 00:02:50.063
They're all normalized.

48
00:02:50.063 --> 00:02:51.130
Same with HSL.

49
00:02:51.130 --> 00:02:57.360
When we use things like color.setHSL,
it's all normalized between 0 and 1.

50
00:02:57.360 --> 00:03:01.806
So the hue is degrees between 0 and
1, where 0 would be 0 and

51
00:03:01.806 --> 00:03:04.470
1 would be 360 degrees.

52
00:03:04.470 --> 00:03:09.730
And then the saturation would be
a percentage between 0 and 100%.

53
00:03:09.730 --> 00:03:12.293
The same with the lightness.

54
00:03:12.293 --> 00:03:15.100
And so that's how we start to use colors.

55
00:03:15.100 --> 00:03:18.650
Now, you can also just pass in
the RGB values in the constructor

56
00:03:18.650 --> 00:03:19.900
instead of passing in a stream.

57
00:03:21.120 --> 00:03:22.260
So it'll all be between 0 and 1.

58
00:03:23.720 --> 00:03:26.674
Another concept that we're gonna be
talking a lot about is geometries.

59
00:03:26.674 --> 00:03:30.350
And so geometries are sort of the volume,
the make up of a mesh.

60
00:03:30.350 --> 00:03:32.471
How it looks in 3D.

61
00:03:32.471 --> 00:03:34.155
So here we've got a plane.

62
00:03:34.155 --> 00:03:39.290
A plane is basically just these two
triangles that when we put them together,

63
00:03:39.290 --> 00:03:42.450
they make up a square or
rectangle of some kind.

64
00:03:42.450 --> 00:03:47.380
And it's called either a plane or
a quad sometimes cuz it has four vertices.

65
00:03:47.380 --> 00:03:49.260
And this idea,

66
00:03:49.260 --> 00:03:52.700
this idea of using triangles you're
gonna see it everywhere in WebGL.

67
00:03:52.700 --> 00:03:55.770
And that's because triangles are the
building blocks of everything we make

68
00:03:55.770 --> 00:03:57.060
in WebGL.

69
00:03:57.060 --> 00:04:00.600
And so if we wanted to draw a square,
we can't just say draw a square,

70
00:04:00.600 --> 00:04:02.740
we have to say draw two triangles.

71
00:04:02.740 --> 00:04:07.580
That's the most primitive type
of rendering that we can do.

72
00:04:07.580 --> 00:04:10.109
So everything is built on
top of these triangles.

73
00:04:12.180 --> 00:04:15.410
And another geometry to be familiar with
here, which we're gonna be using a lot

74
00:04:15.410 --> 00:04:20.250
today is icosahedron geometries, which
creates icospheres and shapes like this.

75
00:04:21.550 --> 00:04:22.670
But there's tons of geometries.

76
00:04:22.670 --> 00:04:25.150
You can go through the the docs and see.

77
00:04:25.150 --> 00:04:31.360
They also have lots of examples of how
to manipulate the parameters here.

78
00:04:31.360 --> 00:04:34.440
So we can create a cube
with lots of subdivisions.

79
00:04:35.950 --> 00:04:40.640
And so quite often if you're creating,
let's say, like a terrain or

80
00:04:40.640 --> 00:04:43.230
some sort of interesting
like parametric object.

81
00:04:43.230 --> 00:04:46.717
Instead of manually defining the layout,
the vertices and

82
00:04:46.717 --> 00:04:49.854
the indices, and
all the structure of the geometry,

83
00:04:49.854 --> 00:04:54.340
it's usually easier just to take a box
geometry or to take a plain geometry.

84
00:04:54.340 --> 00:04:58.090
Subdivide it by giving it lots of width or
height segments.

85
00:04:58.090 --> 00:05:01.468
And then once the geometry's created,
we can manipulate the vertices.

86
00:05:01.468 --> 00:05:04.354
We can change them and create
something like a procedural terrain or

87
00:05:04.354 --> 00:05:05.680
something like that out of it.

88
00:05:09.312 --> 00:05:12.218
And then,
couple more concepts would be material, so

89
00:05:12.218 --> 00:05:14.510
far we've talked about geometry.

90
00:05:14.510 --> 00:05:18.350
Material is more like
the surface quality of a mesh.

91
00:05:18.350 --> 00:05:21.740
So we have basic material, which is
the one we're gonna be using the most.

92
00:05:21.740 --> 00:05:24.006
It just gives you the same
color that you give in.

93
00:05:24.006 --> 00:05:29.210
So if you say I want a pure red or
pure blue or something,

94
00:05:29.210 --> 00:05:35.620
or whatever the color is,
it'll give you that color back.

95
00:05:35.620 --> 00:05:38.020
Almost pixel perfect, or
it should be pixel perfect in theory.

96
00:05:39.210 --> 00:05:43.500
It's unlit, which means it doesn't
respond to lights in the scene.

97
00:05:43.500 --> 00:05:46.649
So if there's a light in the scene,
it's not gonna respond to it.

98
00:05:46.649 --> 00:05:50.437
And if there's no lights,
it's still gonna be perfectly lit.

99
00:05:50.437 --> 00:05:52.170
You can change the wireframe on off.

100
00:05:53.500 --> 00:05:56.826
And then when we get into some other
materials, some of the lit materials like

101
00:05:56.826 --> 00:06:03.390
Phong, Toon, and Standard,
these only respond to lights in the scene.

102
00:06:03.390 --> 00:06:05.690
So if we don't have any lights in
the scene, it's gonna look like this.

103
00:06:05.690 --> 00:06:07.379
It's gonna be this black mesh.

104
00:06:07.379 --> 00:06:11.568
And that's just like if we turn the lights
off in the room, the the meshes around us,

105
00:06:11.568 --> 00:06:15.110
the objects around us are not gonna
have any light reflecting off them.

106
00:06:17.210 --> 00:06:20.230
One more thing to notice would
be this flat shading option,

107
00:06:20.230 --> 00:06:23.530
which is another option you
can pass into the mesh.

108
00:06:23.530 --> 00:06:27.740
And this makes it go from
a smooth shade to a faceted look.

109
00:06:27.740 --> 00:06:31.551
So for low poly stuff,
you're gonna wanna turn on flat shading.

110
00:06:31.551 --> 00:06:34.435
But for sort of smoother objects,
you're gonna want to turn that off.

111
00:06:37.601 --> 00:06:38.650
Cool.

112
00:06:38.650 --> 00:06:41.466
So now we have the idea of geometry.

113
00:06:41.466 --> 00:06:45.580
We had the idea of material and we can
combine those two things to create a mesh.

114
00:06:45.580 --> 00:06:48.508
And so this is how it looks in code.

115
00:06:48.508 --> 00:06:52.458
You just create a SphereGeometry,
you're passing some properties.

116
00:06:52.458 --> 00:06:57.696
Typically SphereGeometries
you'll do twice the amount of,

117
00:06:57.696 --> 00:07:01.523
I guess it would be
the horizontal segments,

118
00:07:01.523 --> 00:07:05.363
as you'd have the vertical segments there.

119
00:07:05.363 --> 00:07:09.566
And yeah, you can go really low and
you can start to create some more like low

120
00:07:09.566 --> 00:07:13.852
poly shapes, are really hard to create
really smooth circles and spheres.

121
00:07:13.852 --> 00:07:16.883
And then you have a material,
this could be MeshPhongmaterial or

122
00:07:16.883 --> 00:07:18.437
it could be MeshBasicMaterial.

123
00:07:18.437 --> 00:07:24.520
If you just want a simple color,
you can pass in wireframe on, off, etc.

124
00:07:25.865 --> 00:07:28.925
And then you build a mesh using
these two interfaces here,

125
00:07:28.925 --> 00:07:32.305
you just specify the geometry,
you specify the material.

126
00:07:32.305 --> 00:07:37.445
Something really important is that we like
to reuse geometries whenever possible.

127
00:07:37.445 --> 00:07:40.620
So it's a good idea to create
a single geometry, and

128
00:07:40.620 --> 00:07:43.659
then reuse that across
lots of different meshes.

129
00:07:43.659 --> 00:07:45.995
And so we're gonna do that
in our work today as well.

