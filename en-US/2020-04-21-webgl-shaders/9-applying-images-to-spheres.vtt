WEBVTT

1
00:00:00.120 --> 00:00:02.510
So let's try to make
this more of an Earth.

2
00:00:02.510 --> 00:00:08.444
So if you open up the repo,
you're gonna see an asset inside the repo,

3
00:00:08.444 --> 00:00:15.703
inside the src/demos folder, and it's
gonna be a JPG of the Earth, so earth.jpg.

4
00:00:15.703 --> 00:00:22.738
And let's just drag and drop this into
our project folder that we created here,

5
00:00:22.738 --> 00:00:28.050
this webgl folder that we
created on our desktop.

6
00:00:28.050 --> 00:00:30.282
Just drag and drop it there,
or save it there somehow.

7
00:00:33.082 --> 00:00:37.390
And now let's load this into our three.js
scene and apply that to the sphere.

8
00:00:38.760 --> 00:00:41.540
So if we go here,
we've dragged and dropped it in,

9
00:00:41.540 --> 00:00:45.640
make sure it's in the same folder as
our sketch.js and as our project.

10
00:00:47.030 --> 00:00:50.638
And then I'm gonna go up,
and what I'm gonna do is,

11
00:00:50.638 --> 00:00:55.411
I'm gonna load a new texture somewhere
just above my material here.

12
00:00:55.411 --> 00:00:58.848
So remember, material has to do
with the surface quality, and so

13
00:00:58.848 --> 00:01:01.870
texturing has to do
also with the material.

14
00:01:01.870 --> 00:01:05.620
So we're gonna do this, we're gonna say,
const texture = new, and

15
00:01:05.620 --> 00:01:11.010
then we're gonna use an interface
called TextureLoader.

16
00:01:11.010 --> 00:01:15.922
So it's gonna be new
THREE.TextureLoader().load, and

17
00:01:15.922 --> 00:01:21.408
then we're gonna just say earth.jpg,
that's the URL to the file.

18
00:01:21.408 --> 00:01:25.213
So that's the line that we can use
to load a texture from a file.

19
00:01:25.213 --> 00:01:27.955
It returns a THREE.TextureInterface,

20
00:01:27.955 --> 00:01:31.430
which is gonna be used for,
it's kinda like an image.

21
00:01:31.430 --> 00:01:35.255
But it's actually an image that exists on
the GPU as opposed to just an image that

22
00:01:35.255 --> 00:01:36.180
exists in memory.

23
00:01:40.167 --> 00:01:42.883
And then whenever we
create these materials, so

24
00:01:42.883 --> 00:01:45.222
we have to use a certain type of material.

25
00:01:45.222 --> 00:01:48.298
So MeshNormalMaterial is really good for
debugging and for

26
00:01:48.298 --> 00:01:51.261
seeing the visualization of the sphere or
of the object.

27
00:01:51.261 --> 00:01:54.070
But what we really want is,
we want to texture this.

28
00:01:54.070 --> 00:01:58.229
So we're gonna use MeshBasicMaterial,
and then we're gonna pass in, so

29
00:01:58.229 --> 00:02:02.994
instead of these options, we're gonna pass
in a map, and we're gonna say texture.

30
00:02:02.994 --> 00:02:08.045
So map is just the the name of the
attribute that has to do with textures.

31
00:02:11.365 --> 00:02:16.540
And so now all of a sudden, if you
get this, you should have a 3D Earth.

32
00:02:16.540 --> 00:02:18.530
And then maybe the next thing we'll do,

33
00:02:18.530 --> 00:02:21.300
cuz we're trying to create this
little tiny solar system here.

34
00:02:21.300 --> 00:02:24.313
Trying to create something animated,
something that's running on its own,

35
00:02:24.313 --> 00:02:25.600
maybe an animation of some kind.

36
00:02:25.600 --> 00:02:28.040
The next thing we'll do is,
we'll find a Moon image.

37
00:02:28.040 --> 00:02:31.440
I've already got one in the repo here, but

38
00:02:31.440 --> 00:02:33.100
you could have just as
well found this online.

39
00:02:34.140 --> 00:02:38.676
So here in the repo, in the src/demos,
I've got moon.jpg, and I'll just drag and

40
00:02:38.676 --> 00:02:39.818
drop this in as well.

41
00:02:39.818 --> 00:02:42.945
So I'm just gonna drag and
drop the JPG into our folder.

42
00:02:50.337 --> 00:02:51.464
And then I'm gonna do the same thing.

43
00:02:51.464 --> 00:02:57.035
Except, instead of copy-pasting this line,
we could certainly do this line again and

44
00:02:57.035 --> 00:03:00.610
just create a new TextureLoader and
load it.

45
00:03:00.610 --> 00:03:03.887
But what I'm actually gonna do is just
reference the texture loader once,

46
00:03:08.610 --> 00:03:12.106
And I'm gonna use it twice, so
I'm gonna reuse this texture loader.

47
00:03:12.106 --> 00:03:14.570
And the benefit of that is that three.js,

48
00:03:14.570 --> 00:03:19.644
the TextureLoader here will be able to run
these in parallel, at least theoretically.

49
00:03:19.644 --> 00:03:22.120
This is how it should be
loading things under the hood.

50
00:03:22.120 --> 00:03:24.380
And it should be able to cache things
a bit better and stuff like that.

51
00:03:24.380 --> 00:03:26.830
So it should just be a bit
more optimized this way.

52
00:03:26.830 --> 00:03:30.243
So now we're gonna say, moonTexture,

53
00:03:30.243 --> 00:03:35.490
then loader.load('moon.jpg').

54
00:03:35.490 --> 00:03:40.780
So now we've loaded two textures, so we've
loaded the Earth and the Moon texture.

55
00:03:40.780 --> 00:03:50.210
And now we're gonna create a new
mesh that would be our Moon.

56
00:03:50.210 --> 00:03:55.300
So just like before, we have our mesh,
but now we're gonna create another mesh.

57
00:03:55.300 --> 00:04:03.034
We're gonna say,
let's say const moonMesh = new THREE.mesh.

58
00:04:03.034 --> 00:04:06.410
And for now, let's just use the same
parameters just to keep it simple.

59
00:04:06.410 --> 00:04:08.022
We'll we'll update this in a second.

60
00:04:08.022 --> 00:04:11.500
But for now, let's just use the same
stuff, geometry and material.

61
00:04:12.760 --> 00:04:18.670
And we do scene.add(moonMesh), and so now,
you're not gonna see anything different.

62
00:04:18.670 --> 00:04:23.290
And that's because the Moon is,
first of all, it's the same material,

63
00:04:23.290 --> 00:04:25.720
so it's actually also
showing an Earth texture.

64
00:04:25.720 --> 00:04:29.610
And second of all, it's in the exact
same position as the Earth.

65
00:04:29.610 --> 00:04:34.569
And so what we wanna do is, we wanna
place this Moon further off into orbit,

66
00:04:34.569 --> 00:04:36.087
I guess you could say.

67
00:04:36.087 --> 00:04:40.531
So we're gonna say moonMesh.position.set,

68
00:04:40.531 --> 00:04:44.105
maybe make it 1 along the x-axis, and

69
00:04:44.105 --> 00:04:49.540
then maybe 0.5 on the y, and
maybe 0 along the z-axis.

70
00:04:50.780 --> 00:04:51.460
And now all of a sudden,

71
00:04:51.460 --> 00:04:55.240
we sort of see something emerging,
it's like a tumorous growth.

72
00:04:56.430 --> 00:05:00.880
And then what we wanna do is make it a lot
smaller because it's a Moon, not an Earth.

73
00:05:00.880 --> 00:05:06.290
So we're gonna say
moonMesh.scale.setScalar, maybe 0.25.

74
00:05:06.290 --> 00:05:10.459
None of this is very accurate to real
measurements, but it's just for fun.

75
00:05:12.275 --> 00:05:16.038
Maybe we'll make it a bit further
away from the Earth by saying,

76
00:05:16.038 --> 00:05:18.350
make the position a little bit larger.

77
00:05:18.350 --> 00:05:22.819
So the larger these position values, the
further away it'll appear from the Earth.

78
00:05:25.300 --> 00:05:28.750
And then maybe also here,
if you're starting to edit your work,

79
00:05:28.750 --> 00:05:29.740
you might think, okay,

80
00:05:29.740 --> 00:05:33.806
the camera's a little too close, I wanna
pull this camera out so we can scroll up.

81
00:05:33.806 --> 00:05:37.616
Go to our camera.position, maybe
increase these values as well, just so

82
00:05:37.616 --> 00:05:41.011
that we're a little bit further
away from the center of the world.

83
00:05:44.226 --> 00:05:48.034
Okay, so now we've got two Earths,
but that's not what we want,

84
00:05:48.034 --> 00:05:49.605
we want a Moon and an Earth.

85
00:05:49.605 --> 00:05:54.439
So we're gonna create a new
material called moonMaterial.

86
00:05:54.439 --> 00:05:59.071
And we're gonna say,
new THREE.MeshBasicMaterial.

87
00:05:59.071 --> 00:06:04.080
We're gonna pass in map and we're gonna
say moonTexture instead of mapTexture.

88
00:06:04.080 --> 00:06:07.354
And then we're gonna update the mesh so
that it's using the moonMaterial.

89
00:06:15.416 --> 00:06:19.868
So now just with these few lines of code,
we have this 3D Moon and

90
00:06:19.868 --> 00:06:21.950
Earth, which is kinda cool.

91
00:06:21.950 --> 00:06:25.320
But maybe what we'd really like is for
it to rotate, for

92
00:06:25.320 --> 00:06:29.570
this moon to rotate, or
even for the Earth to rotate.

93
00:06:29.570 --> 00:06:33.103
So we're just gonna scroll
down into our render function.

94
00:06:33.103 --> 00:06:38.110
We're gonna say mesh,
because that's how we called our Earth,

95
00:06:38.110 --> 00:06:40.577
so mesh.rotation.y = time.

96
00:06:40.577 --> 00:06:44.638
And what that's gonna do is, it's gonna
make the the rotation, which is in

97
00:06:44.638 --> 00:06:48.651
radians, this y-axis, it's gonna make
it equal to the time in seconds.

98
00:06:48.651 --> 00:06:52.977
And time comes from canvas sketch, it's
a property that we can use to create these

99
00:06:52.977 --> 00:06:57.507
animations that are very much locked to
the framerate of whatever we're rendering.

100
00:06:57.507 --> 00:07:00.792
Whether it's in the browser at 60 frames,
or whether it's a GIF or

101
00:07:00.792 --> 00:07:04.010
MP4 at maybe 24 or 30 frames or something.

102
00:07:04.010 --> 00:07:08.922
So every second, it's increasing
the rotation here in radians.

103
00:07:08.922 --> 00:07:12.580
I mean, we can slow it down by just
multiplying that by a lower number,

104
00:07:12.580 --> 00:07:15.375
just so it's a nice,
gradual rotation of the Earth.

105
00:07:17.930 --> 00:07:20.303
And then maybe we'll do the same thing for
the Moon mesh,

106
00:07:20.303 --> 00:07:22.833
cuz I guess technically the moon
is rotating slowly as well.

107
00:07:24.992 --> 00:07:27.215
And so we'll use a slightly
different value just so

108
00:07:27.215 --> 00:07:29.293
that they're not rotating
perfectly in sync.

109
00:07:33.797 --> 00:07:34.606
Whatever you'd like there.

