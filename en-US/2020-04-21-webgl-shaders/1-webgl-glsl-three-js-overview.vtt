WEBVTT

1
00:00:00.230 --> 00:00:01.230
What is WebGL?

2
00:00:01.230 --> 00:00:06.580
I keep saying WebGL, so Web GL stands for
Web Graphics Library sort of,

3
00:00:06.580 --> 00:00:13.050
it's a browser implementation of OpenGL,
which is Open Graphics Library.

4
00:00:13.050 --> 00:00:19.782
And OpenGL is this decade's old software
that's been around since the early 90s.

5
00:00:19.782 --> 00:00:24.645
And it's just been iterating and
incrementing its versions ever since.

6
00:00:24.645 --> 00:00:29.182
It's this really old school tech, and so
WebGL is basically just a port of this,

7
00:00:29.182 --> 00:00:32.290
and so WebGL itself is also
kind of feels old-school.

8
00:00:32.290 --> 00:00:34.970
If you actually use
the raw WebGL commands,

9
00:00:34.970 --> 00:00:38.200
it's just the commands
that exists from OpenGL.

10
00:00:38.200 --> 00:00:43.020
And OpenGL is what drives games and
graphics engines, and any type

11
00:00:43.020 --> 00:00:47.750
of rendering that you'd see in like
a software, especially if it's on a Mac or

12
00:00:47.750 --> 00:00:51.100
Linux, there's a very good
chance that it's using OpenGL.

13
00:00:51.100 --> 00:00:55.170
On Windows, you might more often be
seeing something that's using DirectX.

14
00:00:55.170 --> 00:01:01.480
And this example, Doom (2016), this was
using OpenGL to render a lot of these

15
00:01:02.500 --> 00:01:07.400
effects, explosions triangles,
lighting, such and such.

16
00:01:07.400 --> 00:01:10.060
And so when we think of WebGL,
we often think of 3D,

17
00:01:10.060 --> 00:01:14.190
we think of these kind
of like virtual worlds.

18
00:01:14.190 --> 00:01:17.670
But really, WebGL just allows
us to take advantage of our GPU.

19
00:01:17.670 --> 00:01:20.290
That's really all WebGL
is allowing us to do.

20
00:01:20.290 --> 00:01:22.580
And so we can render things that are 2D.

21
00:01:22.580 --> 00:01:27.340
We can also use WebGL to produce
very complex computation.

22
00:01:27.340 --> 00:01:31.490
So it might just be like a really complex
algorithm that runs on the GPU and

23
00:01:31.490 --> 00:01:32.830
doesn't even have anything visual.

24
00:01:32.830 --> 00:01:36.960
It's not like a game or a data
visualization, or anything like that.

25
00:01:36.960 --> 00:01:42.090
It's just using the GPU for its parallel
nature, that's all WebGL really is.

26
00:01:43.678 --> 00:01:49.770
And so GLSL, GLSL is a language,
it's a programming language or

27
00:01:49.770 --> 00:01:53.920
a shader language,
specifically designed for OpenGL.

28
00:01:53.920 --> 00:01:59.630
And so because GLSL works with OpenGL,
it also works with WebGL.

29
00:01:59.630 --> 00:02:02.680
And it looks like this, so this is GLSL.

30
00:02:04.310 --> 00:02:07.590
And it's just a programming
language like I'm saying, and

31
00:02:07.590 --> 00:02:12.950
it's these little tiny programs that we
write that then get compiled onto the GPU.

32
00:02:12.950 --> 00:02:16.640
And they run really, really fast on
the GPU, they run in parallel, and so

33
00:02:16.640 --> 00:02:21.150
you can have this sort of program and
it might run 10,000 times or

34
00:02:21.150 --> 00:02:24.060
1 million times in a single frame.

35
00:02:24.060 --> 00:02:26.568
It's really, really, really fast and

36
00:02:26.568 --> 00:02:31.458
it's mind blowing how fast it is when
you actually compile these onto the GPU.

37
00:02:31.458 --> 00:02:35.974
And so it's not JavaScript,
it doesn't really look like JavaScript.

38
00:02:35.974 --> 00:02:41.620
It has some, there's functions, there's
variables, but it's all different syntax.

39
00:02:41.620 --> 00:02:46.090
And so you actually have to type like
include types for the variables.

40
00:02:46.090 --> 00:02:49.933
So whether it's float, or
whether it's an integer, or

41
00:02:49.933 --> 00:02:53.947
whether it's one of these
things called a vec2 or a vec3.

42
00:02:53.947 --> 00:02:58.141
So GLSL, because it's designed around
triangles and around graphics, it includes

43
00:02:58.141 --> 00:03:02.000
some data types that are really useful for
3D programming like vector types.

44
00:03:03.880 --> 00:03:07.400
In JavaScript,
it actually looks like this, so

45
00:03:07.400 --> 00:03:12.190
when we include GLSL in our JavaScript
programs, we end up just using a string.

46
00:03:12.190 --> 00:03:15.915
In this case,
I'm using a multi-line template string,

47
00:03:15.915 --> 00:03:19.572
that just makes it really easy
to write out a full shader.

48
00:03:19.572 --> 00:03:22.837
But when we're gonna be going today,
we're gonna either do it but

49
00:03:22.837 --> 00:03:25.461
this way with template strings,
or alternatively,

50
00:03:25.461 --> 00:03:28.220
you can include your entire
shader in a different file.

51
00:03:28.220 --> 00:03:31.800
And I'm going to show you how we can
require that file into a program,

52
00:03:31.800 --> 00:03:34.477
rather than having to write
it all just as a string.

53
00:03:36.664 --> 00:03:40.401
And then Three.js,
that sits atop both of these things,

54
00:03:40.401 --> 00:03:43.620
so Three.js sits atop the WebGL and GLSL.

55
00:03:43.620 --> 00:03:46.740
And it sort of combines these two
things into a very simple and

56
00:03:46.740 --> 00:03:48.380
easy to use interface.

57
00:03:48.380 --> 00:03:53.660
And so you can do things like load 3D
models and select different materials,

58
00:03:53.660 --> 00:03:55.770
different built-in geometries.

59
00:03:55.770 --> 00:03:59.410
It's a very user friendly framework, and

60
00:03:59.410 --> 00:04:01.910
it's really allowing you to
do all sorts of 3D things.

61
00:04:02.980 --> 00:04:06.900
It can also be used for 2D but
typically we use it for 3D.

62
00:04:06.900 --> 00:04:11.252
But it certainly has the capabilities
because it is ultimately just

63
00:04:11.252 --> 00:04:15.599
allowing us to do things with the GPU,
we could use it for 2D games or

64
00:04:15.599 --> 00:04:20.667
even like a 2.5D game that might not
be fully 3D, it might not be fully 2D.

