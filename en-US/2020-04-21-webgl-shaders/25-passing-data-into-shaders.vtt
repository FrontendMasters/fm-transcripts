WEBVTT

1
00:00:00.360 --> 00:00:04.960
One last little thing is trying to
understand how do we pass data into

2
00:00:04.960 --> 00:00:06.099
these shaders.

3
00:00:06.099 --> 00:00:11.526
Because right now we have data that's
being passed from a vertex to a fragment,

4
00:00:11.526 --> 00:00:15.414
but how do we pass data from
our code here in JavaScript and

5
00:00:15.414 --> 00:00:17.854
pass it into both of these shaders.

6
00:00:17.854 --> 00:00:24.115
So we're going to use uniforms, we specify
that in the shader material, and uniforms

7
00:00:24.115 --> 00:00:29.631
is an object where you pass in the name
to uniform, so let's name it colors.

8
00:00:29.631 --> 00:00:33.144
So the name here is really important,
because the name that we use in this

9
00:00:33.144 --> 00:00:36.442
object is going to be the same name
that we have to use in our shaders.

10
00:00:36.442 --> 00:00:40.788
And so we always do it like this
syntax color, is an object and

11
00:00:40.788 --> 00:00:45.916
the object has a property called value and
then we can pass in 3js type.

12
00:00:45.916 --> 00:00:49.716
So a 3js color or 3js vector 3, or

13
00:00:49.716 --> 00:00:54.150
even just a regular number like a 0 or
5 or

14
00:00:54.150 --> 00:00:58.857
6 as a float and
that will create a uniform.

15
00:00:58.857 --> 00:01:03.726
Once we declare it in our material we have
to declare it in our fragment shaders,

16
00:01:03.726 --> 00:01:07.868
we have to write this line uniform
vec3 color, that declares it and

17
00:01:07.868 --> 00:01:10.284
it's just saying let's access this.

18
00:01:10.284 --> 00:01:14.329
So I could say multiply
the result by that color and

19
00:01:14.329 --> 00:01:19.723
now all of a sudden I've got a color
that's coming from JavaScript

20
00:01:19.723 --> 00:01:24.263
that I can define in like a hex code or
a CSS color string.

21
00:01:24.263 --> 00:01:27.888
And you can imagine changing this
value based on maybe user input or

22
00:01:27.888 --> 00:01:30.995
something like that, and
it would change in the shader,

23
00:01:30.995 --> 00:01:34.183
uniforms get sent to both the fragment and
vertex shader.

24
00:01:34.183 --> 00:01:38.502
So this is pretty heavy stuff, but
after this because this is like

25
00:01:38.502 --> 00:01:43.446
the heaviest part, we're going to try and
just dissect and like digest all

26
00:01:43.446 --> 00:01:47.860
of the stuff around shaders just
by doing some more fun exercises.

