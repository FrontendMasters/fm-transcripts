WEBVTT

1
00:00:00.000 --> 00:00:05.607
We're gonna switch gears a little bit and
we're gonna dive into shaders and

2
00:00:05.607 --> 00:00:11.562
diving into GLSL and working with some
more complex effects and taking a geometry

3
00:00:11.562 --> 00:00:16.924
like a sphere but actually manipulating
the surface of it using shader.

4
00:00:16.924 --> 00:00:19.700
And trying to understand how
does this all come together?

5
00:00:19.700 --> 00:00:21.520
So it'll be a little bit more technical,

6
00:00:21.520 --> 00:00:23.711
there's probably gonna
be some more questions.

7
00:00:23.711 --> 00:00:24.790
We'll work through it, though.

8
00:00:24.790 --> 00:00:29.450
A shader is basically a tiny little
program that we run on the GPU.

9
00:00:29.450 --> 00:00:33.209
And the program is really tiny sometimes,
it might just be this.

10
00:00:33.209 --> 00:00:36.850
This is a program for
a fragment shader, a pixel shader.

11
00:00:36.850 --> 00:00:39.811
And this would be compiled,It
would be run on the GPU.

12
00:00:39.811 --> 00:00:44.409
And then it would run really fast on the
GPU and parallel using all the cores and

13
00:00:44.409 --> 00:00:48.111
all the stuff within our computer
to run it very efficiently.

14
00:00:50.164 --> 00:00:54.844
One way that you might have already seen
shaders, this is a pretty well-known site,

15
00:00:54.844 --> 00:00:58.679
shadertoy.com and it collects a lot
of different fragment shaders.

16
00:00:59.790 --> 00:01:02.490
In this way that you can
browse the different shaders,

17
00:01:02.490 --> 00:01:06.186
it's gonna totally crunch your computer
because a lot of them are really,

18
00:01:06.186 --> 00:01:09.078
really heavy, and they're really,
really expensive.

19
00:01:09.078 --> 00:01:15.369
But it's all fragment shaders and
it's all crazy math that's going on.

20
00:01:15.369 --> 00:01:18.171
We're not gonna be writing
this kind of stuff, and

21
00:01:18.171 --> 00:01:22.029
I wouldn't be able to look at this and
understand what it's going on.

22
00:01:22.029 --> 00:01:24.775
It's really mostly lots of messy code,

23
00:01:24.775 --> 00:01:28.800
lots of like little one
single letter variable names.

24
00:01:28.800 --> 00:01:33.009
And it's usually pretty hard to understand
what the authors are trying to do

25
00:01:33.009 --> 00:01:33.676
with this.

26
00:01:33.676 --> 00:01:38.634
But it's because the way that these demos
are done is that they're creating 3D

27
00:01:38.634 --> 00:01:43.518
geometries and 3D sort of visualizations
using entirely a fragment shader,

28
00:01:43.518 --> 00:01:46.890
using this concept we'll be talking about.

29
00:01:46.890 --> 00:01:51.770
Which isn't designed for
3D geometries, it's designed more for

30
00:01:51.770 --> 00:01:57.599
surface qualities like the color or the
gradiation of color across the surface.

31
00:01:57.599 --> 00:02:01.559
So this website is a big hack,
in a way, people are taking shaders and

32
00:02:01.559 --> 00:02:03.677
really pushing them to the limits and

33
00:02:03.677 --> 00:02:08.180
pushing them into ways that you
wouldn't really expect them to use.

34
00:02:08.180 --> 00:02:12.091
But as a result, it runs pretty
slowly sometimes on your computer.

35
00:02:12.091 --> 00:02:16.718
But yeah, sometimes you'll find some much
simpler shaders that are maybe 2D and

36
00:02:16.718 --> 00:02:18.473
you can go in and edit the code.

37
00:02:18.473 --> 00:02:20.075
You can also create a new one and

38
00:02:20.075 --> 00:02:24.000
just start working with
the basic shader here yourself.

39
00:02:24.000 --> 00:02:27.453
And again, this is a fragment shader,
which we're gonna be explaining

40
00:02:27.453 --> 00:02:30.866
the difference between fragment and
vertex and what those things are.

41
00:02:30.866 --> 00:02:33.208
So this is a very good site
to reference occasionally.

