WEBVTT

1
00:00:00.330 --> 00:00:02.130
The other demo here is buffer geometry.

2
00:00:02.130 --> 00:00:05.590
I'm not gonna try and
code this from scratch,

3
00:00:05.590 --> 00:00:10.860
because it's a little bit more
complex even than what I just did.

4
00:00:10.860 --> 00:00:13.300
But it's also good to be aware of this.

5
00:00:13.300 --> 00:00:17.855
Basically we have geometries,
which is sort of the simple

6
00:00:17.855 --> 00:00:23.580
version, which is what we
were looking at before,

7
00:00:23.580 --> 00:00:28.250
and geometry allows us to specify
vertices as vector threes.

8
00:00:28.250 --> 00:00:33.032
And it also allows us to specify
the indexes into those, this vertex array.

9
00:00:33.032 --> 00:00:35.004
So it allows us to specify the face and

10
00:00:35.004 --> 00:00:38.958
also specify other things to do with
the face, like the color of the face.

11
00:00:38.958 --> 00:00:42.188
Or maybe the normals of the face or
some other attribute of the face.

12
00:00:42.188 --> 00:00:45.659
But when we deal with
more custom geometries,

13
00:00:45.659 --> 00:00:50.109
let's say we wanted to start to
load a model from a file, and

14
00:00:50.109 --> 00:00:55.430
we wanted to maybe load a model that's
not an OBJ file and not a gltf.

15
00:00:55.430 --> 00:00:58.370
Or it's not some file that we're
getting from cinema 4d, but

16
00:00:58.370 --> 00:01:02.650
maybe it's like a data set
of millions of points or

17
00:01:02.650 --> 00:01:07.120
millions of stars and the positions of the
stars, or something like that in the sky.

18
00:01:07.120 --> 00:01:11.876
And so that might be just given to us in
a CSV or in a JSON file that has to do

19
00:01:11.876 --> 00:01:15.924
with the positions of all these
different points in space.

20
00:01:15.924 --> 00:01:21.987
And so we could use buffer geometries
to just take that data and

21
00:01:21.987 --> 00:01:26.779
turn it into a flat array
of float 32 vertices.

22
00:01:26.779 --> 00:01:31.778
And so the structure is a little bit
different, because we're still able

23
00:01:31.778 --> 00:01:36.628
to use server vector 3, this vector
3 array just like we were before.

24
00:01:36.628 --> 00:01:41.288
But the difference is, before we
pass this to the buffer geometry,

25
00:01:41.288 --> 00:01:46.765
which is this more advanced class, we
have to flatten it into a flat structure,

26
00:01:46.765 --> 00:01:52.324
that's gonna just look like this, where
the first vertex is gonna be like this,

27
00:01:52.324 --> 00:01:58.008
the second vertex is gonna be like this,
the third vertex, and so on and so forth.

28
00:01:58.008 --> 00:02:00.958
So x2, y2, z2.

29
00:02:00.958 --> 00:02:05.782
And this is just a float 32 array, which
is a typed array, which just is a way of

30
00:02:05.782 --> 00:02:10.462
saying it's an array, but it's a fancy
array, and it has numbers in it, and

31
00:02:10.462 --> 00:02:14.226
each of those numbers is going
to correspond with the vertex.

32
00:02:14.226 --> 00:02:17.108
And so it's a little bit
more complicated to set up.

33
00:02:17.108 --> 00:02:22.221
It's definitely not something that is
super easy to do off the top of your head.

34
00:02:22.221 --> 00:02:26.598
But, if you wanted to look into this,
we can start to dive into this more and

35
00:02:26.598 --> 00:02:30.232
more in the afternoon with some
of the more complex examples.

36
00:02:30.232 --> 00:02:32.420
Cuz this will tie in really
well with shaders as well.

37
00:02:32.420 --> 00:02:36.879
When we start to work with shaders,
we're gonna sometimes want to pass in very

38
00:02:36.879 --> 00:02:40.477
specific information into the vertices and
into the objects.

39
00:02:40.477 --> 00:02:42.730
And we can do that with buffer geometries.

40
00:02:42.730 --> 00:02:47.492
Because if we wanted to pass custom
attributes and custom properties with

41
00:02:47.492 --> 00:02:51.815
just a regular geometry class,
it wouldn't really be possible.

42
00:02:51.815 --> 00:02:55.005
And so that's where we have
to use this buffer geometry.

43
00:02:55.005 --> 00:02:58.794
So yeah, that's kind of the idea
of buffer geometry here.

44
00:02:58.794 --> 00:03:04.312
A really good example of it is this,
this more advanced example, because it

45
00:03:04.312 --> 00:03:09.677
shows how we can create hundreds or
potentially thousands of particles.

46
00:03:09.677 --> 00:03:15.137
And they're all sort of squashed into
the same batch, the same geometry.

47
00:03:15.137 --> 00:03:19.677
And so when we actually go to
render this shape on the GPU,

48
00:03:19.677 --> 00:03:24.132
the shape will say okay,
we've got a buffer geometry.

49
00:03:24.132 --> 00:03:29.565
And the buffer geometry might have,
here it has 250 particles,

50
00:03:29.565 --> 00:03:34.156
but we can make this really big,
2500, or smaller.

51
00:03:34.156 --> 00:03:39.115
And all of these are squashed into
the same float 32 array that I was

52
00:03:39.115 --> 00:03:40.687
just talking about.

53
00:03:40.687 --> 00:03:45.222
And that's what gonna give us the ability
to draw thousands of things in a single

54
00:03:45.222 --> 00:03:46.100
draw call.

55
00:03:46.100 --> 00:03:49.524
And so it'll be really,
really fast, really efficient,

56
00:03:49.524 --> 00:03:54.042
and really great for things like particle
systems or for data visualization,

57
00:03:54.042 --> 00:03:57.065
and so on and so forth,
where we have a lot of points.

58
00:03:57.065 --> 00:03:58.947
And we wanna render them efficiently.

59
00:03:58.947 --> 00:04:02.682
We're gonna talk about how do we have
these points but then manipulate them,

60
00:04:02.682 --> 00:04:06.022
because it's just static right now,
it's just a static geometry.

61
00:04:06.022 --> 00:04:08.587
But we might want to move these vertices,

62
00:04:08.587 --> 00:04:12.852
we might want to shade them in
different ways, and so on and so forth.

63
00:04:12.852 --> 00:04:13.764
So yeah, this one,

64
00:04:13.764 --> 00:04:16.732
this sort of buffer geometry stuff
is a little bit more nebulous.

65
00:04:16.732 --> 00:04:21.316
It's definitely something that takes
a little bit more time to wrap your head

66
00:04:21.316 --> 00:04:25.051
around, even just,
as you saw when I was coding the vertices,

67
00:04:25.051 --> 00:04:28.295
I was sort of struggling
through the coordinates, and

68
00:04:28.295 --> 00:04:31.358
trying to wrap my head around
how how those line up.

69
00:04:31.358 --> 00:04:34.057
And that's because there's just a lot

70
00:04:34.057 --> 00:04:38.156
of complexity in trying to
define manual sort of geometry.

71
00:04:38.156 --> 00:04:42.426
But quite often, what I end up doing
is I just take an existing geometry,

72
00:04:42.426 --> 00:04:47.046
like a plane or a cube or a sphere, and
I manipulate the vertices, by just going

73
00:04:47.046 --> 00:04:51.456
through the vertices and maybe randomizing
some of the XYZ components, or

74
00:04:51.456 --> 00:04:54.256
maybe using noise on
some of those components.

75
00:04:54.256 --> 00:04:59.549
So it's not always manually typing out
each triangle or anything like that.

76
00:04:59.549 --> 00:05:03.405
&gt;&gt; Which of your examples were
using the buffer geometry?

77
00:05:03.405 --> 00:05:06.867
&gt;&gt; So if we look in the three dash demos,

78
00:05:06.867 --> 00:05:12.140
there's two of them that
are using buffer geometries.

79
00:05:12.140 --> 00:05:14.104
One of them is the one that
just says buffer geometry and

80
00:05:14.104 --> 00:05:16.680
the other ones that says
buffer geometry advanced.

81
00:05:16.680 --> 00:05:18.603
Those two are using buffer geometries.

82
00:05:18.603 --> 00:05:23.394
This one is actually also using a buffer
geometry, but it's again like I was saying

83
00:05:23.394 --> 00:05:28.257
I like to manipulate spheres and existing
meshes rather than have to manually define

84
00:05:28.257 --> 00:05:32.320
all the triangle positions for
the sphere, which would just be hell.

