WEBVTT

1
00:00:00.000 --> 00:00:04.910
I mean,
there's a couple of things we could do.

2
00:00:04.910 --> 00:00:09.080
One of them is we could try to fix
the poles, fix those issues, but

3
00:00:09.080 --> 00:00:10.320
it's gonna be a bit more work.

4
00:00:11.920 --> 00:00:16.540
But another more interesting thing
potentially, would be to try and

5
00:00:16.540 --> 00:00:17.189
use noise.

6
00:00:18.270 --> 00:00:24.420
Maybe what we'll do is we'll start by just
typing it out and just working with it.

7
00:00:24.420 --> 00:00:26.180
And then once we get it running,

8
00:00:26.180 --> 00:00:30.440
maybe I'll walk through what's happening
a little bit more in more detail.

9
00:00:30.440 --> 00:00:33.370
So, the purpose of noise
in this particular shader,

10
00:00:33.370 --> 00:00:37.310
the purpose of what we're gonna be
using this concept of noise flow,

11
00:00:37.310 --> 00:00:40.790
is to make it so
all these circles have different sizes.

12
00:00:40.790 --> 00:00:44.830
Cuz right now they're all kinda
consistently, either small or

13
00:00:44.830 --> 00:00:46.220
consistently big.

14
00:00:46.220 --> 00:00:49.414
But we wanna introduce some randomness to
make it look a little bit more like yeah,

15
00:00:49.414 --> 00:00:50.172
good sounds work.

16
00:00:51.815 --> 00:00:58.241
So I'm gonna go back to having a sphere,
And

17
00:00:58.241 --> 00:01:04.450
what I'm gonna do is I'm gonna install
a dependency that's a glsl dependency.

18
00:01:04.450 --> 00:01:11.500
And if we look on NPM and we searched
glsl noise, let's call it glsl noise.

19
00:01:12.700 --> 00:01:18.040
It's a module on NPM, but it's not
a JavaScript module, it's a glsl module.

20
00:01:18.040 --> 00:01:22.570
And so we're gonna install this
just like we would any NPM module.

21
00:01:22.570 --> 00:01:28.172
So npm install glsl-noise,
and then it has some examples

22
00:01:28.172 --> 00:01:33.340
of how to use it in a fragment shader or
vertex shader.

23
00:01:33.340 --> 00:01:36.830
So one of the things is that this
is using a concept called glslify,

24
00:01:38.720 --> 00:01:41.310
which is very hard to pronounce.

25
00:01:41.310 --> 00:01:45.810
And this tool is a way of introducing

26
00:01:45.810 --> 00:01:49.650
modules from NPM into
your fragment shaders.

27
00:01:49.650 --> 00:01:52.850
So instead of just writing your
fragment shader as a string,

28
00:01:52.850 --> 00:01:56.901
you're writing it as a string and
then wrapping it in this glsl function.

29
00:01:56.901 --> 00:02:00.617
And then you're also
able to now put in these

30
00:02:00.617 --> 00:02:05.439
special lines these pragma glslify blah,
blah, blah,

31
00:02:05.439 --> 00:02:10.677
you're able to basically require
an import things from NPM.

32
00:02:10.677 --> 00:02:14.800
And so let's do the same thing that's
here but in our own code here.

33
00:02:16.010 --> 00:02:17.580
So I'm gonna go to my code.

34
00:02:19.742 --> 00:02:24.878
I'm gonna first at the top, I'm gonna

35
00:02:24.878 --> 00:02:30.802
say const glsl is equal
to required glslify.

36
00:02:33.597 --> 00:02:35.136
This is a real tongue twister.

37
00:02:37.392 --> 00:02:40.370
But this is how is gonna look,

38
00:02:40.370 --> 00:02:46.461
we gonna call the variable glsl and
require the tool itself.

39
00:02:46.461 --> 00:02:50.582
And then we gonna scroll down instead
of using a template string for

40
00:02:50.582 --> 00:02:53.903
the fragment shader we gonna
wrap this in a function.

41
00:02:59.074 --> 00:03:03.736
And I'm gonna move this comment over,
just so that it gets highlighted again.

42
00:03:08.981 --> 00:03:10.820
And now it's working.

43
00:03:10.820 --> 00:03:12.920
I mean nothing's really changed.

44
00:03:12.920 --> 00:03:15.485
But now we can import this noise function.

45
00:03:15.485 --> 00:03:21.190
And if you want, you can go to the NPM
page, copy and paste one of them.

46
00:03:21.190 --> 00:03:26.299
Let's say we're gonna
take the simplex noise.

47
00:03:26.299 --> 00:03:30.192
So the one that says 3D simplex or
you can just type it out with me.

48
00:03:30.192 --> 00:03:35.258
I'll show you how it looks,

49
00:03:35.258 --> 00:03:41.593
it's the #pragma glslify: noise

50
00:03:41.593 --> 00:03:50.893
= require( 'glsl-noise/simplex/3d' ).

51
00:03:50.893 --> 00:03:52.610
So it's a bit of a mouthful.

52
00:03:55.550 --> 00:04:00.160
And if you've typed it in correctly,
let's say I type it in correctly,

53
00:04:00.160 --> 00:04:03.510
you're gonna get an error
that says cannot find module.

54
00:04:03.510 --> 00:04:05.510
Or if you haven't installed it,
you're gonna get this as well.

55
00:04:07.980 --> 00:04:10.380
Okay, so how do we actually use noise?

56
00:04:10.380 --> 00:04:12.390
Well, first I'm gonna
just use it in our code,

57
00:04:12.390 --> 00:04:14.730
and then I'll explain a little
bit about how it's all working.

58
00:04:16.140 --> 00:04:20.210
So the goal here is to make
a default value here for the size,

59
00:04:20.210 --> 00:04:23.100
the threshold that we're
making these circles.

60
00:04:23.100 --> 00:04:27.860
So for now, let's just say we'll leave
it at 0.25 or you might want to copy and

61
00:04:27.860 --> 00:04:31.460
paste this line to leave it in case
you want to come back to it later.

62
00:04:31.460 --> 00:04:35.791
So you might want to just comment that out
and leave it there for reference later on.

63
00:04:39.152 --> 00:04:42.093
But instead of just doing
all that signed stuff,

64
00:04:42.093 --> 00:04:45.380
we're gonna do 0.25 plus
let's call it offset.

65
00:04:45.380 --> 00:04:46.501
We're gonna create a new float.

66
00:04:50.835 --> 00:04:53.823
And for now the float,
let's leave it at 0.

67
00:04:53.823 --> 00:04:55.810
We save, we make sure it still works.

68
00:04:55.810 --> 00:04:57.743
The code is still working, no errors.

69
00:05:02.575 --> 00:05:06.480
And now what we're gonna do is
we're gonna use the noise function,

70
00:05:06.480 --> 00:05:10.745
which accepts a 3D coordinate because
we've required the 3D version.

71
00:05:10.745 --> 00:05:17.416
And we're gonna pass in vUv.xy,
time as the third coordinate.

72
00:05:21.698 --> 00:05:26.403
And if it works you should see this kind
of crazy pattern stuff that is going on

73
00:05:26.403 --> 00:05:28.110
in this demo here.

74
00:05:28.110 --> 00:05:31.510
So, I'll just do one more little tweak and
I'll explain what's going on.

75
00:05:31.510 --> 00:05:34.310
Let's say we multiply this
x y value by some number.

76
00:05:35.960 --> 00:05:39.110
We're gonna get some crazy patterns which
we really don't want right now, but

77
00:05:39.110 --> 00:05:40.390
that's actually kind of cool.

78
00:05:41.940 --> 00:05:50.290
So we have our q, and we're gonna use
that instead of using the vUv here.

79
00:05:50.290 --> 00:05:55.506
So we're gonna create another
vector called noise input,

80
00:05:55.506 --> 00:05:58.740
and it's gonna be q times 10 we're

81
00:05:58.740 --> 00:06:03.343
gonna use the same number
that we used in our module.

82
00:06:03.343 --> 00:06:07.686
And we're gonna pass this
noise input in instead of Uv.

83
00:06:07.686 --> 00:06:10.269
And that's gonna create this crazy
like camouflage pattern, but

84
00:06:10.269 --> 00:06:12.030
that's not what we want.

85
00:06:12.030 --> 00:06:15.540
We want it to be circles and
we're gonna get that by flooring

86
00:06:17.200 --> 00:06:20.760
the value which actually
looks kind of cool too.

87
00:06:20.760 --> 00:06:22.980
All of a sudden we have this like,
some of them are squares,

88
00:06:22.980 --> 00:06:24.490
some of them are circles.

89
00:06:24.490 --> 00:06:29.130
But it's because the offset is so
drastic that sometimes it's getting so

90
00:06:29.130 --> 00:06:30.820
large that they're clipping.

91
00:06:30.820 --> 00:06:32.910
And they're basically
clipping into each other and

92
00:06:32.910 --> 00:06:34.950
creating this sort of filled look.

93
00:06:34.950 --> 00:06:38.132
So the last thing I'm just doing
here is I'm just scaling down

94
00:06:38.132 --> 00:06:41.739
the noise by adding a multiplication
at the end of the noise function,

95
00:06:41.739 --> 00:06:46.984
by some small number, And
now when I look at this,

96
00:06:46.984 --> 00:06:49.918
it should be a little bit closer
to what I was looking for.

