WEBVTT

1
00:00:00.080 --> 00:00:04.307
I'll start by just showing some of the
examples of what you can do with WebGL.

2
00:00:04.307 --> 00:00:07.655
First, I'll start with my own work,
just some of the things I've done.

3
00:00:07.655 --> 00:00:11.400
And then I'm gonna explore more
some of the work in the wild and

4
00:00:11.400 --> 00:00:13.572
sort of what we could do with WebGL.

5
00:00:13.572 --> 00:00:17.229
And this is kind of just
to start with my own stuff.

6
00:00:17.229 --> 00:00:20.813
This is where I sort of got
into it is this project.

7
00:00:20.813 --> 00:00:22.080
It's called Audiograph.

8
00:00:22.080 --> 00:00:26.723
It's like a music visualizer
project that I did in

9
00:00:26.723 --> 00:00:32.153
2016 around a single album,
a album by Pilot Priest.

10
00:00:36.182 --> 00:00:40.836
And it's a fairly straightforward
visualizer is just a looping

11
00:00:40.836 --> 00:00:45.500
graphic that's constantly evolving,
constantly changing.

12
00:00:45.500 --> 00:00:49.718
And it's constantly changing colors
in response to the beat of the song.

13
00:00:49.718 --> 00:00:50.820
You can hit space, and

14
00:00:50.820 --> 00:00:54.850
you can see the next track, and
you can cycle through the whole album.

15
00:00:54.850 --> 00:00:58.128
But this is all using WebGL to
draw these shapes, these polygons,

16
00:00:58.128 --> 00:00:59.247
and these triangles.

17
00:00:59.247 --> 00:01:03.655
And because it's using WebGL, it actually
runs pretty quickly, even on a browser,

18
00:01:03.655 --> 00:01:04.891
even on a mobile phone.

19
00:01:04.891 --> 00:01:09.350
That's kind of the goal for today is
to create these real time applications.

20
00:01:09.350 --> 00:01:12.455
They could respond to audio or
they could respond to user input, or

21
00:01:12.455 --> 00:01:13.458
whatever, really.

22
00:01:17.321 --> 00:01:21.465
And then when I was working at Jam3,
which is a agency in Toronto,

23
00:01:21.465 --> 00:01:25.100
I started to build these more
complex systems with WebGL.

24
00:01:25.100 --> 00:01:29.656
So this is one little
tech demo that we did for

25
00:01:29.656 --> 00:01:33.363
Mozilla for their GDC in 2016.

26
00:01:33.363 --> 00:01:37.887
This was shown as a tech demo for the
browser showing WebGL 2 actually, which

27
00:01:37.887 --> 00:01:42.779
is a more recent version of WebGL, which
is still being included in many browsers.

28
00:01:42.779 --> 00:01:47.342
And still doesn't have the full support
that we'd really like to use it

29
00:01:47.342 --> 00:01:50.398
everywhere, but it's getting pretty close.

30
00:01:50.398 --> 00:01:55.580
But, yeah, this is just another tech demo
that I worked on, and it's much more rich.

31
00:01:55.580 --> 00:01:59.470
It had to involve a team of developers,
a team of 3D artists and

32
00:01:59.470 --> 00:02:02.900
us working closely together to
sort of produce this full thing.

33
00:02:02.900 --> 00:02:05.715
It's all real time interactive, etc.

34
00:02:05.715 --> 00:02:09.422
Riffing on that,
here's another demo that I worked on.

35
00:02:09.422 --> 00:02:14.062
This was a simple sort of
minimal web toy that would

36
00:02:14.062 --> 00:02:19.266
appear when you visited tendril.com or
tendril.ca.

37
00:02:19.266 --> 00:02:25.278
They're a studio for design and
illustration animation in Toronto.

38
00:02:25.278 --> 00:02:28.790
And they wanted this little toy
that you could interact with it.

39
00:02:28.790 --> 00:02:32.066
And this could have been
done maybe with some SVG but

40
00:02:32.066 --> 00:02:34.895
it wouldn't render in this efficient way.

41
00:02:34.895 --> 00:02:37.005
You wouldn't be able to get
this kind of fluid motion.

42
00:02:37.005 --> 00:02:40.720
You wouldn't be able to get these
sort of interactive gradients and

43
00:02:40.720 --> 00:02:43.660
some of the texture that appears leaf.

44
00:02:43.660 --> 00:02:46.510
And some of these little details
would be really hard to achieve with

45
00:02:46.510 --> 00:02:50.820
technology like HTML, or
CSS or even plain Canvas 2D.

46
00:02:50.820 --> 00:02:54.724
So this is where WebGL would be really
useful is just to bring in this extra

47
00:02:54.724 --> 00:02:55.236
detail.

48
00:02:57.741 --> 00:03:01.457
And then another thing is bringing
this out of just the scope of the web

49
00:03:01.457 --> 00:03:04.357
browser but
also into more physical installations.

50
00:03:04.357 --> 00:03:11.050
Because we're just accessing the GPU, we
could create an AR experience using WebGL.

51
00:03:12.210 --> 00:03:16.320
And this was in KIKK festival in Belgium.

52
00:03:16.320 --> 00:03:20.300
There was several different artists and we
all got a chance to build a Three.js and

53
00:03:20.300 --> 00:03:23.970
WebGL augmented reality sort of piece

54
00:03:23.970 --> 00:03:27.580
that would then be placed in
a specific spot in the city.

55
00:03:27.580 --> 00:03:31.980
And visitors that are at this conference,
this KIKK Festival they can go around,

56
00:03:31.980 --> 00:03:35.690
download an app and see the actual ARPs.

57
00:03:35.690 --> 00:03:37.300
So mine is in this video here, somewhere.

58
00:03:37.300 --> 00:03:41.440
But there were several different
artists and we all had a chance to

59
00:03:41.440 --> 00:03:46.420
do a different output, and it's all
using Three.js, WebGL under the hood.

60
00:03:46.420 --> 00:03:50.600
[MUSIC]

61
00:03:50.600 --> 00:03:54.935
And the nice thing is once you start to
learn these concepts of WebGL and 3D,

62
00:03:54.935 --> 00:03:58.070
you can actually apply them
with different software.

63
00:03:58.070 --> 00:04:02.265
So sometimes you might find
a situation where a different program,

64
00:04:02.265 --> 00:04:06.324
like Unity, is gonna be better
than working straight on the web.

65
00:04:06.324 --> 00:04:10.088
But you can quite often just transfer the
knowledge that you've learned with WebGL

66
00:04:10.088 --> 00:04:13.530
right into that other software because
it all sort of works the same way.

67
00:04:13.530 --> 00:04:16.184
Ultimately, it's all just
using the GPU in the same way.

68
00:04:21.000 --> 00:04:23.739
And then continue to move
away from browsers and

69
00:04:23.739 --> 00:04:25.591
more into this physical space.

70
00:04:25.591 --> 00:04:31.279
This was an installation that I put on in
Toronto just for one night at the AGO.

71
00:04:31.279 --> 00:04:35.703
It was this connect based installation
which means that there was like a skeletal

72
00:04:35.703 --> 00:04:37.145
motion tracking device.

73
00:04:37.145 --> 00:04:40.653
And you'd be able to wave your arms and
stuff inside of this installation.

74
00:04:40.653 --> 00:04:45.104
It would sort of project your virtual
form within this fourth dimension or

75
00:04:45.104 --> 00:04:47.430
within this nth dimension.

76
00:04:47.430 --> 00:04:50.160
And so that's just showing
how you can use WebGL in

77
00:04:50.160 --> 00:04:53.221
more of a interactive physical
installation setting.

78
00:04:53.221 --> 00:04:56.131
It's totally doable there as well.

79
00:04:56.131 --> 00:05:00.660
And then moving completely away from
these digital outputs, but into prints.

80
00:05:00.660 --> 00:05:03.860
So you can use WebGL to create high
resolution print artwork that you

81
00:05:03.860 --> 00:05:05.330
might just want to get framed.

82
00:05:05.330 --> 00:05:09.565
This is a data artwork which is
visualizing ten different cities and

83
00:05:09.565 --> 00:05:11.208
the skyscraper heights.

84
00:05:11.208 --> 00:05:15.200
Those different cities mapped to these
sort of generative crystal structures.

85
00:05:15.200 --> 00:05:18.860
The work was done in
JavaScript with WebGL.

86
00:05:18.860 --> 00:05:22.400
And that would allow me to really quickly
visualize these generative geometries.

87
00:05:22.400 --> 00:05:24.470
And then I would export from WebGL,

88
00:05:24.470 --> 00:05:29.340
I would export these geometries as OBJ
files, and then bring those into blender.

89
00:05:29.340 --> 00:05:32.250
And that allowed me to actually
render this high resolution print

90
00:05:32.250 --> 00:05:33.760
with some materials and

91
00:05:33.760 --> 00:05:37.950
some qualities that are really hard
to achieve with just real time.

92
00:05:37.950 --> 00:05:40.860
But this is sort of showing
how WebGL isn't always just

93
00:05:40.860 --> 00:05:42.380
making something that's real time.

94
00:05:42.380 --> 00:05:45.896
It's just more using the GPU for
various tasks,

95
00:05:45.896 --> 00:05:50.881
maybe creating complex geometries and
then exporting those as OBJ.

96
00:05:50.881 --> 00:05:52.550
And there's just an example to print.

97
00:05:54.150 --> 00:05:57.160
Okay, so that's kind of my stuff and

98
00:05:57.160 --> 00:06:00.080
then just a couple examples
of cool projects in the wild.

99
00:06:01.120 --> 00:06:03.100
So this one is really fun.

100
00:06:03.100 --> 00:06:04.598
It's OUIGO, Let's Play.

101
00:06:04.598 --> 00:06:07.800
You can test all these in the browser.

102
00:06:07.800 --> 00:06:12.990
It's just a pinball game as part
of a campaign for a train company,

103
00:06:12.990 --> 00:06:17.330
I think in France, and
it's like super performant.

104
00:06:17.330 --> 00:06:19.350
It runs on a mobile phone.

105
00:06:19.350 --> 00:06:20.830
It's just like super detailed.

106
00:06:20.830 --> 00:06:22.119
The animations are really crisp.

107
00:06:24.020 --> 00:06:28.480
And then this one, you guys should try
this on your computers, it's really fun.

108
00:06:28.480 --> 00:06:33.977
So this is Bruno Simon, he just put
out this portfolio pretty recently.

109
00:06:33.977 --> 00:06:36.548
You can just search bruno-simon.com.

110
00:06:41.121 --> 00:06:44.883
And it basically just
gives you this little car,

111
00:06:44.883 --> 00:06:48.571
that you can hit,
explore his portfolio here.

112
00:06:52.799 --> 00:06:56.520
And you can actually go down and
see some of his projects.

113
00:06:58.586 --> 00:07:03.399
And open those up, and see some of
the work he's done just by driving

114
00:07:03.399 --> 00:07:06.614
around this little town, this little city.

115
00:07:08.665 --> 00:07:13.228
So yeah, this is another great example
of WebGL, just super interactive,

116
00:07:13.228 --> 00:07:14.308
super real time.

117
00:07:14.308 --> 00:07:19.589
And when he put this out there's a sort
of splash that happened on Twitter.

118
00:07:19.589 --> 00:07:24.519
It's pretty addicting and it's it's fun to
just drive around this little portfolio.

119
00:07:26.493 --> 00:07:27.326
Yeah.

120
00:07:30.575 --> 00:07:35.660
This artist, Richard Vijgenn, I don't know
how to say his last name, unfortunately.

121
00:07:35.660 --> 00:07:39.020
But he's doing a lot of work as
well with WebGL and with Three.js.

122
00:07:39.020 --> 00:07:43.400
And so
this is a data artwork that's showing

123
00:07:43.400 --> 00:07:48.680
the spectrum of radio waves
that are in the air, I guess.

124
00:07:48.680 --> 00:07:53.445
And he's got a radio sensor of some kind,
some sort of hardware sensor.

125
00:07:53.445 --> 00:07:57.985
And it's using WebSockets to
communicate with a Three.js app and

126
00:07:57.985 --> 00:08:02.133
sending the data from the hardware
sensor into this visual.

127
00:08:02.133 --> 00:08:06.613
So you can actually go in and explore
this in real time and see how it's sort

128
00:08:06.613 --> 00:08:11.870
of visualizing and mapping this data
into this large installation piece.

129
00:08:11.870 --> 00:08:14.215
&gt;&gt; When you're projecting
on a wall like that,

130
00:08:14.215 --> 00:08:16.446
is it just like a browser
full of screen or?

131
00:08:16.446 --> 00:08:22.974
&gt;&gt; So this, I would probably do
it as a browser full screen.

132
00:08:22.974 --> 00:08:28.940
You'd have to set up your output
resolution to a pretty wide resolution.

133
00:08:28.940 --> 00:08:33.097
And depending on the setup,
it could just be like a big LED screen,

134
00:08:33.097 --> 00:08:37.791
it could be just a projector,
just like the projector we're seeing here.

135
00:08:37.791 --> 00:08:40.860
Or it could be sometimes
multiple projectors.

136
00:08:40.860 --> 00:08:45.197
And you're still ultimately just
using a computer with an HDMI but

137
00:08:45.197 --> 00:08:49.390
then sort of there's a more of
an AV setup that would be used.

138
00:08:49.390 --> 00:08:53.340
And it often isn't even part
of the role of the developer,

139
00:08:53.340 --> 00:08:56.330
you would probably work
with an AV specialist.

140
00:08:56.330 --> 00:09:00.204
And they would do some of the mapping
with multiple projectors so

141
00:09:00.204 --> 00:09:02.798
that it all stitches
up into a large peace.

142
00:09:02.798 --> 00:09:05.879
And then Active Theory, if you aren't
familiar with active theory you should

143
00:09:05.879 --> 00:09:07.690
definitely start following them.

144
00:09:07.690 --> 00:09:10.870
They're doing tons of work with WebGL and
they're really pushing the limits.

145
00:09:10.870 --> 00:09:12.300
Definitely check out their work.

146
00:09:12.300 --> 00:09:17.560
This one is using hardware sensors like
heartbeat monitors and things like

147
00:09:17.560 --> 00:09:21.570
that that react to the user as they're
interacting with this installation.

148
00:09:21.570 --> 00:09:24.696
But they also have this web component,
this web version which, obviously,

149
00:09:24.696 --> 00:09:27.696
doesn't have hardware sensors, but
it's still pretty cool to look at.

150
00:09:29.996 --> 00:09:34.220
Okay, and then lastly, I just wanted to
show a couple of examples of not WebGL.

151
00:09:34.220 --> 00:09:39.205
But the important thing is to sort of show
that these could've been made with WebGL

152
00:09:39.205 --> 00:09:39.793
as well.

153
00:09:39.793 --> 00:09:43.053
A lot of times,
I'll show somebody a project and

154
00:09:43.053 --> 00:09:46.483
they'll be blown away that
it was made with WebGL.

155
00:09:46.483 --> 00:09:49.674
They won't realise that some of the stuff
that they're seeing could actually be done

156
00:09:49.674 --> 00:09:50.840
as well with WebGL.

157
00:09:50.840 --> 00:09:54.605
So this is one that was shown
at Barbican fairly recently.

158
00:09:54.605 --> 00:09:57.900
It's called Future You and
it was by Universal Everything.

159
00:09:57.900 --> 00:10:02.702
And it's another Connect based Microsoft
Connect based installation where you step

160
00:10:02.702 --> 00:10:05.849
in front of the installation and
it tracks your motion.

161
00:10:05.849 --> 00:10:09.877
And it creates this sort of
3D sculpture that reacts and

162
00:10:09.877 --> 00:10:12.040
responds to your movements.

163
00:10:12.040 --> 00:10:16.600
And so something like this could have
definitely been done with WebGL as well.

164
00:10:16.600 --> 00:10:21.415
And yeah, this one in particular
down with Unity, but that's quite

165
00:10:21.415 --> 00:10:26.760
often a decision that's made based on
the team or based on their skills.

166
00:10:26.760 --> 00:10:29.990
So just because you see something that's
done with Unity doesn't mean you can't

167
00:10:29.990 --> 00:10:31.560
also do the same thing in WebGL.

168
00:10:33.900 --> 00:10:37.280
And then this is Joanie Lemercier.

169
00:10:37.280 --> 00:10:41.403
So Joanie Lemercier is an artist that's
quite often working with light and

170
00:10:41.403 --> 00:10:42.194
projection.

171
00:10:42.194 --> 00:10:45.472
Sometimes working with pen plotters and
more prints as well.

172
00:10:45.472 --> 00:10:49.795
But one of the nice things here is that
this is ultimately a screen based work.

173
00:10:49.795 --> 00:10:55.020
So at the end of it all, it's just some
software that's running on his computer.

174
00:10:55.020 --> 00:10:57.887
And it's just a screen based visual.

175
00:10:57.887 --> 00:11:01.740
It could've been done with WebGL or
maybe it was done with something else.

176
00:11:01.740 --> 00:11:02.345
But the,

177
00:11:02.345 --> 00:11:07.039
the point is this rendering is simply
just running as a screen based work.

178
00:11:07.039 --> 00:11:12.402
And then he's projecting
the rendering onto a curtain

179
00:11:12.402 --> 00:11:17.539
of water particles,
like a mist of water droplets.

180
00:11:17.539 --> 00:11:20.049
And that's what creates this sort
of holographic look when you stand

181
00:11:20.049 --> 00:11:21.210
in front of it.

182
00:11:21.210 --> 00:11:24.890
And so this is like this beautiful project
that really shows that even though

183
00:11:24.890 --> 00:11:29.200
something is screen based, it doesn't need
to be projected just as a flat screen.

184
00:11:29.200 --> 00:11:32.797
You can get really interesting
with projection and

185
00:11:32.797 --> 00:11:35.980
projection mapping from screen based work.

186
00:11:35.980 --> 00:11:38.317
And just sort of riffing on that,
this is NONOTAK.

187
00:11:38.317 --> 00:11:41.545
They are a music and sort of visual duo.

188
00:11:41.545 --> 00:11:45.485
They do these really crazy
audio visual performances.

189
00:11:49.148 --> 00:11:52.944
And so a lot of their work is
them making music live but

190
00:11:52.944 --> 00:11:58.138
then a lot of their work is also
presenting it in this really unique way.

191
00:11:58.138 --> 00:12:02.979
So it's not just a screen behind them
that's showing some cool VJ visuals, but

192
00:12:02.979 --> 00:12:05.299
they actually set up the projectors.

193
00:12:05.299 --> 00:12:10.149
They set up the screens in such a way that
it creates this really unique output,

194
00:12:10.149 --> 00:12:11.780
this really unique look.

195
00:12:13.860 --> 00:12:17.065
So here they'd have multiple
screens next to each other.

196
00:12:17.065 --> 00:12:24.721
Each of these is a semi-transparent
surface that can be projected through.

197
00:12:24.721 --> 00:12:28.009
And because of the placement, because of
the way they're using this projection

198
00:12:28.009 --> 00:12:31.217
mapping techniques, it creates this
really nice repeating sort of pattern.

199
00:12:31.217 --> 00:12:34.208
[MUSIC]

200
00:12:34.208 --> 00:12:40.110
I'm just skipping forward to this light
speculation performance that they did.

201
00:12:40.110 --> 00:12:44.340
They created a sort of triangular prism or
it could also be maybe a cube.

202
00:12:44.340 --> 00:12:48.000
But in this case, it looks like
a triangular prism of screens around them.

203
00:12:48.000 --> 00:12:50.060
And so then they would project
onto those screens, and

204
00:12:50.060 --> 00:12:54.230
they'd be sort of contained within
this box of light and visuals.

205
00:12:54.230 --> 00:12:57.330
But ultimately, this is again,
a screen based work.

206
00:12:57.330 --> 00:13:01.818
So they're taking a software
that's outputting triangles or

207
00:13:01.818 --> 00:13:06.062
outputting lines, or shapes,
or some sort of rendering.

208
00:13:06.062 --> 00:13:10.423
It could be WebGL, but this is more
likely some other software, but

209
00:13:10.423 --> 00:13:13.570
it could just as I've been
WebGL to output this.

