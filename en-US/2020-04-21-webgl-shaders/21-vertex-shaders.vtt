WEBVTT

1
00:00:00.940 --> 00:00:04.590
So I've talked a little bit about Fragment
Shaders, which is a specific type of

2
00:00:04.590 --> 00:00:11.010
shader used for rendering pixels and for
coming up with the color of a pixel.

3
00:00:11.010 --> 00:00:14.979
That's really what a Fragment Shader is,
just to decide on the color of a single

4
00:00:14.979 --> 00:00:17.883
pixel and then apply that
throughout the entire surface,

5
00:00:17.883 --> 00:00:20.563
whether it's a rectangle or
whether it's a sphere.

6
00:00:20.563 --> 00:00:23.960
While a Vertex Shader
is a similar concept.

7
00:00:23.960 --> 00:00:27.560
But instead of doing it on pixels,
we're doing it on vertices.

8
00:00:27.560 --> 00:00:32.060
So in this mesh, we have lots of little
vertices where these lines are meeting.

9
00:00:32.060 --> 00:00:35.715
Just like remember with a triangle,
we have three vertices with a quad,

10
00:00:35.715 --> 00:00:40.950
we might have four vertices, while here
we have maybe hundreds of vertices.

11
00:00:40.950 --> 00:00:43.340
So here’s one at the very top
where all these lines meet.

12
00:00:44.900 --> 00:00:47.370
And this shader here is a Vertex Shader

13
00:00:47.370 --> 00:00:50.670
that gets applied to every
single one of these vertices.

14
00:00:50.670 --> 00:00:52.650
And also it’s parallel.

15
00:00:52.650 --> 00:00:55.690
And so, instead of going from top
to bottom or something like that,

16
00:00:55.690 --> 00:00:58.560
instead of saying okay,
let’s start at this vertex,

17
00:00:58.560 --> 00:01:02.500
compute the vertex, then go to the next
vertex compute that,it's not doing that.

18
00:01:02.500 --> 00:01:05.390
It's just saying, here's the shader code,

19
00:01:05.390 --> 00:01:09.300
run it on all of the vertices all
at the same time, all in parallel.

20
00:01:09.300 --> 00:01:11.970
So it's just the same problem as before.

21
00:01:11.970 --> 00:01:16.051
We can't say well, I want this top
vertex to be bigger up here or

22
00:01:16.051 --> 00:01:20.749
something like that, depending on
the position of this bottom vertex.

23
00:01:20.749 --> 00:01:23.927
We can't do that kind of
conditional statements in a shader,

24
00:01:23.927 --> 00:01:27.790
because each vertex doesn't know
anything about the vertices around it.

25
00:01:29.180 --> 00:01:32.623
And so, the point of
a Fragment Shader was to do a pixel,

26
00:01:32.623 --> 00:01:36.449
the point of Vertex Shaders is
to take the vertex attributes.

27
00:01:36.449 --> 00:01:40.389
So things like position,
the position in this world space and

28
00:01:40.389 --> 00:01:45.230
turn that into a position that can
actually be shown in a 2D screen.

29
00:01:45.230 --> 00:01:51.020
So it's called projecting a world
space position into screen space.

30
00:01:51.020 --> 00:01:54.370
And so,
remember I was talking about the units and

31
00:01:54.370 --> 00:01:57.050
how I was saying we
could in our earth demo.

32
00:01:57.050 --> 00:02:02.100
We could use miles instead of using just a
random arbitrary unit like positioning at

33
00:02:02.100 --> 00:02:03.620
x3 or something.

34
00:02:03.620 --> 00:02:08.220
We could say the radius of
the sphere is 3,000 miles and

35
00:02:08.220 --> 00:02:12.250
the moon is several 1000
miles on the x axis.

36
00:02:12.250 --> 00:02:17.210
Well, how do we convert those miles into
something that we can actually see on

37
00:02:17.210 --> 00:02:21.490
a 2D screen that has pixels and its 0,
0 in the top left, and the width and

38
00:02:21.490 --> 00:02:23.200
height of the screen in the bottom right.

39
00:02:23.200 --> 00:02:27.841
Well, this is what a Vertex Shader is
doing is it's saying, give me those units,

40
00:02:27.841 --> 00:02:31.492
whichever those units are,
whether it's a miles or whatever.

41
00:02:31.492 --> 00:02:36.577
And transform them in such
a way that they end up being

42
00:02:36.577 --> 00:02:42.020
2D coordinates that I can
then draw inside of a screen.

43
00:02:43.140 --> 00:02:48.300
And some part of this is
taking the vertices in

44
00:02:48.300 --> 00:02:52.590
an object like a sphere, and transforming
those based on the rotation and

45
00:02:52.590 --> 00:02:56.990
the placement, and the position,
and the scale of the object.

46
00:02:56.990 --> 00:03:00.200
But it's also transforming it based
on where the camera is looking at

47
00:03:00.200 --> 00:03:00.770
this object.

48
00:03:01.900 --> 00:03:05.510
And then it's also transforming it based
on the type of camera, because right now

49
00:03:05.510 --> 00:03:09.920
we're just dealing with perspective
cameras, which is what this looks like.

50
00:03:09.920 --> 00:03:14.204
But let's say you wanted to draw something
more like a good example would be

51
00:03:14.204 --> 00:03:15.292
Monument Valley.

52
00:03:18.463 --> 00:03:25.652
So Monument Valley is a game that is
what's called isometric or orthographic.

53
00:03:25.652 --> 00:03:28.794
And so, the camera that would
be used to render this scene

54
00:03:28.794 --> 00:03:31.560
would be an orthographic camera.

55
00:03:31.560 --> 00:03:35.430
And the reason you can tell is
because there's no sense of depth.

56
00:03:35.430 --> 00:03:39.210
It's all flat, all the lines
are perfectly sort of symmetrical

57
00:03:39.210 --> 00:03:44.040
with each other no matter how far
away a cube is in this virtual world.

58
00:03:44.040 --> 00:03:46.890
So here we search isometric
versus prospective,

59
00:03:46.890 --> 00:03:50.550
you will definitely see
some examples of that.

60
00:03:52.380 --> 00:03:56.638
And so,
let's just say the Vertex Shader also

61
00:03:56.638 --> 00:04:00.920
decides on this sort of thing, how do
we go from perspective to isometric?

62
00:04:00.920 --> 00:04:04.170
And that depends on this final line here.

63
00:04:04.170 --> 00:04:08.391
So here we have an example
where the Vertex Shader is

64
00:04:08.391 --> 00:04:12.822
accepting this stretch variable,
which is a float.

65
00:04:12.822 --> 00:04:16.031
And so far we've been defining
things with these uniform things,

66
00:04:16.031 --> 00:04:20.490
which I'll have to explain, but just for
now, let's just focus on this float.

67
00:04:20.490 --> 00:04:23.660
It's a float coming in from
this slider somehow and

68
00:04:23.660 --> 00:04:25.940
we're using this stretch
variable in our code.

69
00:04:26.990 --> 00:04:32.011
And the way we're doing it is by taking
the original position of the geometry,

70
00:04:32.011 --> 00:04:34.609
and then transforming it by something.

71
00:04:34.609 --> 00:04:37.840
So like messing up those
positions somehow.

72
00:04:37.840 --> 00:04:40.144
And then we have this third line here,

73
00:04:40.144 --> 00:04:43.038
which does all the standard
transformations.

74
00:04:43.038 --> 00:04:45.850
And we can't even see it, because it's
a very long line, but there we go.

75
00:04:47.060 --> 00:04:51.660
So just to show an example, and
I'll show these examples but then

76
00:04:51.660 --> 00:04:56.100
we'll walk through it interactively and
start to build up these things ourselves.

77
00:04:56.100 --> 00:04:59.860
But just to show an example,
here I've commented this out.

78
00:04:59.860 --> 00:05:03.470
And all of a sudden we just have
a regular cylinder geometry, so

79
00:05:03.470 --> 00:05:06.130
this could be a sphere,
a box, or whatever.

80
00:05:06.130 --> 00:05:08.550
But by transforming these positions

81
00:05:10.190 --> 00:05:13.980
in between state where we have the
position, we decide to transform it and

82
00:05:13.980 --> 00:05:18.030
then finally we projected onto
the screen space coordinates.

83
00:05:18.030 --> 00:05:21.670
Here we can mess up this geometry and
start to create animations.

84
00:05:21.670 --> 00:05:24.130
Maybe start to do some interesting
things with the triangles,

85
00:05:24.130 --> 00:05:27.780
with the vertices,
just by modifying the position.

86
00:05:28.960 --> 00:05:30.400
So this is a Vertex Shader

