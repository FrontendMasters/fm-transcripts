WEBVTT

1
00:00:00.510 --> 00:00:03.155
So I have multiple of these spheres.

2
00:00:03.155 --> 00:00:07.231
And so all I'm doing is I'm wrapping
the code that we've written so

3
00:00:07.231 --> 00:00:08.456
far into a for loop.

4
00:00:08.456 --> 00:00:14.880
I'm just repeating it and placing
these spheres in different positions.

5
00:00:14.880 --> 00:00:16.621
I mean everything goes within the for

6
00:00:16.621 --> 00:00:20.160
loop except we don't put the geometry
stuff inside the for loop.

7
00:00:20.160 --> 00:00:22.570
Because it's good to just
have a single geometry and

8
00:00:22.570 --> 00:00:25.150
reuse that across many meshes.

9
00:00:25.150 --> 00:00:30.650
But you can reuse a material, but
you don't need to reuse a material because

10
00:00:30.650 --> 00:00:35.881
if you specify 100 materials, and
they're all using the same shader, three

11
00:00:35.881 --> 00:00:41.730
js is gonna know to combine those under
the hood into the same sort of GPU thing.

12
00:00:41.730 --> 00:00:45.960
But if you specify 100 geometries, it's
not going to be able to combine those and

13
00:00:45.960 --> 00:00:47.140
so it's going to end up running slowly.

14
00:00:49.750 --> 00:00:54.450
And so yeah, this is just getting
multiple spheres and using reso colors,

15
00:00:54.450 --> 00:00:59.110
changing the colors of the sphere
based on some randomness, so

16
00:00:59.110 --> 00:01:03.750
sometimes I'm going to say a uniform color
for the the fill color of the sphere.

17
00:01:03.750 --> 00:01:07.674
But then also there's another
uniform color for the point color.

18
00:01:07.674 --> 00:01:10.768
And so instead of always mixing it and
going from color to white,

19
00:01:10.768 --> 00:01:12.500
it's going from color A to color B.

20
00:01:14.450 --> 00:01:17.533
And here, it's introducing rim lighting.

21
00:01:17.533 --> 00:01:22.872
And so
if you want to introduce rim lighting,

22
00:01:22.872 --> 00:01:28.493
there's actually a snippet
in the repo that you

23
00:01:28.493 --> 00:01:34.971
can pretty much just copy
paste into your frag shader.

24
00:01:42.322 --> 00:01:47.234
So here's just a little reminder
about GLSL in three js.

25
00:01:47.234 --> 00:01:51.460
And then we finally get
into the rim light shader.

26
00:01:51.460 --> 00:01:55.670
So rim lighting is like a backlighting
almost, so we can copy and

27
00:01:55.670 --> 00:01:56.410
paste this chunk.

28
00:01:57.920 --> 00:02:01.950
We can paste it into our fragment
shader above the void main because all

29
00:02:01.950 --> 00:02:06.180
the functions go outside non one of
the functions go within functions.

30
00:02:06.180 --> 00:02:09.840
And then we can use it just
like in this example here.

31
00:02:12.100 --> 00:02:15.300
And we can use this to create
some sort of fake lighting.

32
00:02:15.300 --> 00:02:21.201
where maybe we'll use the frag color and
we'll increase the frag

33
00:02:21.201 --> 00:02:26.520
color based on some rim amount, but maybe
not so drastically, we'll scale it down.

34
00:02:28.560 --> 00:02:33.280
So that's how I'm creating
this rim light effect.

35
00:02:33.280 --> 00:02:36.130
You can see this function
here how it works,

36
00:02:36.130 --> 00:02:38.720
it's not the most efficient
way of doing this.

37
00:02:38.720 --> 00:02:41.359
One of the things that
you'll start to find is

38
00:02:41.359 --> 00:02:44.137
this might start to slow
down if you have tons and

39
00:02:44.137 --> 00:02:48.388
tons of geometries or tons and
tons of meshes going with the same shader.

40
00:02:48.388 --> 00:02:50.510
And there's a couple reasons for that.

41
00:02:50.510 --> 00:02:55.620
One is this chunk here is
actually not very efficient.

42
00:02:55.620 --> 00:02:58.640
We've done this because it allows
us to understand things like,

43
00:02:58.640 --> 00:03:02.480
how to get an array into a shader and
how to use defines.

44
00:03:02.480 --> 00:03:05.790
But it's not a very efficient way of doing
this because every single pixel in this

45
00:03:05.790 --> 00:03:09.470
sphere has to loop over
every single point.

46
00:03:09.470 --> 00:03:12.780
And so a more efficient approach,
which we're not gonna try and

47
00:03:12.780 --> 00:03:14.600
get into now because
it's quite advanced but

48
00:03:14.600 --> 00:03:20.200
just to tell you a more efficient approach
and you can see it in the source.

49
00:03:20.200 --> 00:03:21.670
For those that are really curious.

50
00:03:23.190 --> 00:03:27.740
Inside source, inside demos,
there's this kusama-sphere-advanced.

51
00:03:29.450 --> 00:03:34.488
And what this is gonna do, instead of
always looking across every single

52
00:03:34.488 --> 00:03:40.022
point to find the nearest point it's going
to store the nearest three points for

53
00:03:40.022 --> 00:03:41.851
each face in this sphere.

54
00:03:41.851 --> 00:03:44.119
And so
then in the shader it just needs to say,

55
00:03:44.119 --> 00:03:47.520
I'm going to go through
the nearest three points.

56
00:03:47.520 --> 00:03:49.490
Because this point here, for

57
00:03:49.490 --> 00:03:54.170
example, never needs to compare
itself with this point way over here.

58
00:03:54.170 --> 00:03:57.490
Because it's always gonna just be
within the points nearest to it,

59
00:03:57.490 --> 00:04:00.350
within the three or
maybe four points nearest to it.

60
00:04:00.350 --> 00:04:03.220
So that's how this advanced
approach is working.

61
00:04:03.220 --> 00:04:06.280
It runs much faster,
you can get hundreds or

62
00:04:06.280 --> 00:04:09.230
potentially thousands of
spheres with this approach.

63
00:04:09.230 --> 00:04:12.230
They can all be spinning and
moving in real-time, but if you try and

64
00:04:12.230 --> 00:04:14.480
do that with this code, it's gonna
start to slow down a little bit.

65
00:04:16.180 --> 00:04:18.870
Another thing that might be
slowing down your code here

66
00:04:18.870 --> 00:04:22.380
is that generally when we do things
like lighting and rim lighting,

67
00:04:22.380 --> 00:04:28.650
a lot of this computation can be
moved upwards to the vertex shader.

68
00:04:28.650 --> 00:04:31.140
And so there's this concept
in graphics programming is,

69
00:04:31.140 --> 00:04:33.930
if you're running things
in your fragment shader,

70
00:04:33.930 --> 00:04:37.880
a lot of times you can just move this
data up into your vertex shader.

71
00:04:37.880 --> 00:04:42.290
Do the same math same computation
in your vertex shader and

72
00:04:42.290 --> 00:04:46.050
then pass the information
down to your fragment shader.

73
00:04:46.050 --> 00:04:49.280
And because of the way that
OpenGL works it will interpolate

74
00:04:49.280 --> 00:04:52.800
all the information across
the triangles and across the vertices.

75
00:04:52.800 --> 00:04:55.680
And so you can sometimes lift that up and
move the,

76
00:04:55.680 --> 00:05:00.250
the complex math into the vertex shader,
and then just pass the value down.

77
00:05:00.250 --> 00:05:06.160
That's a very common way of
optimizing your fragment shaders.

78
00:05:06.160 --> 00:05:12.152
And so here we have finally,
pretty much kind of the end result.

79
00:05:12.152 --> 00:05:14.964
There's a few other things
that I could mention.

80
00:05:16.849 --> 00:05:20.623
I'll mention a few other things,
[LAUGH] but does anyone have questions?

81
00:05:23.237 --> 00:05:24.385
Yeah.

82
00:05:24.385 --> 00:05:27.950
&gt;&gt; So you mentioned the pipelines,
is that how the pipelines always work,

83
00:05:27.950 --> 00:05:30.840
they go from vertex shader
to fragment shader?

84
00:05:30.840 --> 00:05:35.955
&gt;&gt; Yeah, so this pipeline this idea of
the pipeline it exists like this on pretty

85
00:05:35.955 --> 00:05:41.230
much every GPU and graphics processing
library, like whether it's in unity or

86
00:05:41.230 --> 00:05:46.840
whether it's in unreal engine or something
else, but it's always under the hood.

87
00:05:46.840 --> 00:05:50.921
It's always working the same
way where some vertex data, so

88
00:05:50.921 --> 00:05:54.640
that might be buffed like,
for example, in three js.

89
00:05:54.640 --> 00:05:56.337
It's called a buffer geometry.

90
00:05:56.337 --> 00:06:01.325
But really a buffer geometry is just
a set of arrays that have X, Y,

91
00:06:01.325 --> 00:06:05.080
Z values for each vertex and
it stores other data.

92
00:06:05.080 --> 00:06:07.250
It stores things like position.

93
00:06:07.250 --> 00:06:11.730
Stores things like UV coordinates,
or normals, or maybe the colors for

94
00:06:11.730 --> 00:06:13.050
each vertex.

95
00:06:13.050 --> 00:06:15.950
And that information that's
stored inside of the geometry

96
00:06:15.950 --> 00:06:17.636
gets passed into a vertex shader.

97
00:06:17.636 --> 00:06:20.681
And then the vertex shader
takes those attributes and

98
00:06:20.681 --> 00:06:25.540
it turns those attributes into a screen
space position here, which is this line.

99
00:06:25.540 --> 00:06:26.800
But it also can do other things.

100
00:06:26.800 --> 00:06:29.740
It can pass down the information
down this waterfall, and

101
00:06:29.740 --> 00:06:31.630
this is what we've been doing here.

102
00:06:31.630 --> 00:06:36.184
We're taking the attributes and we're
taking the information that we have in our

103
00:06:36.184 --> 00:06:39.754
vertex shader and passing it
downwards to our fragment shader.

104
00:06:39.754 --> 00:06:43.602
And then the fragment shaders
receiving those as varyings and

105
00:06:43.602 --> 00:06:46.490
it's using those in
the the fragment shader.

106
00:06:46.490 --> 00:06:50.710
And one of the things that isn't
immediately obvious, but if you have,

107
00:06:51.890 --> 00:06:58.180
let's say, an OpenGL triangle,
this is like the Hello World of OpenGL.

108
00:06:59.600 --> 00:07:04.430
So here,
this triangle is made up of three vertices

109
00:07:05.530 --> 00:07:08.830
and each vertex has a different
colour associated with it.

110
00:07:08.830 --> 00:07:14.570
So this vertex here it
has a defined position,

111
00:07:14.570 --> 00:07:16.920
but it also has a defined
color which is green.

112
00:07:16.920 --> 00:07:20.420
This vertex is red, and
this vertex is blue.

113
00:07:20.420 --> 00:07:25.890
And when we render this, maybe the vertex
shader is gonna look like this.

114
00:07:25.890 --> 00:07:27.346
So I'm just gonna write this real quick.

115
00:07:33.361 --> 00:07:34.200
Just to show you.

116
00:07:35.920 --> 00:07:41.312
So maybe the vertex shader is going
to have attribute vec3 color,

117
00:07:41.312 --> 00:07:44.750
attribute vec3 position.

118
00:07:44.750 --> 00:07:49.374
And now in three js we don't need to
write these things manually because

119
00:07:49.374 --> 00:07:53.856
three js comes built in with color
position UV and some other things.

120
00:07:53.856 --> 00:07:58.152
But if we were doing manual stuff or if
we were including our own attributes that

121
00:07:58.152 --> 00:08:02.670
are not built into three js, we'd have
to actually write attribute vec3 color.

122
00:08:02.670 --> 00:08:06.498
So we extract the vertex data and
then we're going to pass it down,

123
00:08:06.498 --> 00:08:10.280
varying vec3 vColor.

124
00:08:10.280 --> 00:08:17.450
So v is just like a Common way of saying
this is a varying, so vColor = color.

125
00:08:17.450 --> 00:08:20.800
And now what we're doing is we're passing
it down to the fragment shader, and

126
00:08:20.800 --> 00:08:24.720
the fragment shader is gonna
interpolate automatically between

127
00:08:24.720 --> 00:08:27.140
the values we get from these vertices.

128
00:08:27.140 --> 00:08:29.590
So although we've only passed down red and

129
00:08:29.590 --> 00:08:32.900
we've only passed down green and
we've only passed down blue.

130
00:08:32.900 --> 00:08:35.270
The fragment shader is going to
say okay for this pixel here,

131
00:08:35.270 --> 00:08:39.530
I'm going to figure out
the value of the color.

132
00:08:39.530 --> 00:08:44.350
I'm going to figure that value out
based on how far I am in the triangle

133
00:08:46.830 --> 00:08:49.400
towards this vertex or towards this
vertex or towards this vertex.

134
00:08:49.400 --> 00:08:54.000
So the pixels that are here, they're
almost entirely the same as this vertex.

135
00:08:54.000 --> 00:08:56.730
So these pixels are going to be very,
very red.

136
00:08:56.730 --> 00:09:01.146
The pixels here are going to be very blue,
but as we go into the center it’s going to

137
00:09:01.146 --> 00:09:04.930
sort of mix these three colors together
into some sort of other color.

138
00:09:04.930 --> 00:09:08.880
And so that’s another thing that’s
kind of happening within the pipeline.

139
00:09:08.880 --> 00:09:11.740
And all of this is pretty much
happening in every graphics library,

140
00:09:11.740 --> 00:09:13.970
every graphics rendering engine.

141
00:09:13.970 --> 00:09:17.950
There's some differences here and there,
but ultimately it's the same concept.

142
00:09:17.950 --> 00:09:20.270
And once it goes through
the fragment shader,

143
00:09:20.270 --> 00:09:25.700
then it goes through a final step which
basically takes these rastri triangles and

144
00:09:25.700 --> 00:09:30.370
puts it onto our screen and applies some
other stuff like clipping depending on

145
00:09:30.370 --> 00:09:32.600
things like where it
appears in the screen.

146
00:09:32.600 --> 00:09:35.360
And things like that, but it's ultimately,
it's almost the final step.

