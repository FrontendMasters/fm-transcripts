WEBVTT

1
00:00:00.550 --> 00:00:04.214
Can you use camera mapping and Three.js?

2
00:00:04.214 --> 00:00:08.840
&gt;&gt; I guess the answer would be,
there's probably a way to do that,

3
00:00:08.840 --> 00:00:11.680
it might not be built in as far as I know.

4
00:00:11.680 --> 00:00:16.878
But something like instead
of mapping using a sphere,

5
00:00:16.878 --> 00:00:20.833
but mapping using the current viewport,

6
00:00:20.833 --> 00:00:24.687
you might have to write that in a shader.

7
00:00:24.687 --> 00:00:28.530
Anyways, the answer I would say would
be yes if she can figure it out.m in

8
00:00:28.530 --> 00:00:29.100
a shader.

9
00:00:29.100 --> 00:00:34.824
But that’s not very helpful, but
I think you’d have to think about it cuz

10
00:00:34.824 --> 00:00:40.841
I would have to think about it to and I
would have to come up with some solution.

11
00:00:40.841 --> 00:00:45.820
And also I guess it
depends because there’s

12
00:00:45.820 --> 00:00:50.530
different ways of mapping to a camera like

13
00:00:50.530 --> 00:00:56.059
the simplest would be to
use this gl_Position.

14
00:00:56.059 --> 00:01:01.058
But yeah, anyways, that's not a very
good answer because I don't have a good

15
00:01:01.058 --> 00:01:06.484
answer for it, sorry, yeah,
&gt;&gt; I tried to apply point lighting

16
00:01:06.484 --> 00:01:11.121
to a shader material and it didn't work.

17
00:01:11.121 --> 00:01:16.167
&gt;&gt; So that's gonna be tricky as well, so
the way that point lighting works is that

18
00:01:16.167 --> 00:01:21.213
Three.js has these materials like phong
material or standard material, and

19
00:01:21.213 --> 00:01:26.566
when they say phong material or standard
retail, it's just that they've already

20
00:01:26.566 --> 00:01:31.483
written huge shader that has to do with
all the lighting and stuff like that.

21
00:01:31.483 --> 00:01:35.785
And so
that that early shader that we wrote,

22
00:01:35.785 --> 00:01:43.593
it was just like void main({
gl_FragColor = vec4color, opacity;)}.

23
00:01:43.593 --> 00:01:48.671
This is actually a mesh basic
material that we're writing here.

24
00:01:48.671 --> 00:01:52.587
So we've just written our
own mesh basic material, but

25
00:01:52.587 --> 00:01:56.254
imagine as the materials get more and
more complex,

26
00:01:56.254 --> 00:02:01.337
the shaders get more and more complex and
trying to insert one little line

27
00:02:01.337 --> 00:02:06.539
of difference into a Three.js shader
is quite complex and not very easy.

28
00:02:06.539 --> 00:02:12.034
So it's definitely possible, many people
working with Three.js are trying to

29
00:02:12.034 --> 00:02:17.283
figure out different ways of doing that,
where we take a built in material and

30
00:02:17.283 --> 00:02:22.076
we wanna just modify it with one line,
we wanna just add our own thing.

31
00:02:22.076 --> 00:02:26.989
But you're gonna have to sort
of dig around the Internet and

32
00:02:26.989 --> 00:02:29.838
see how other people are using, so

33
00:02:29.838 --> 00:02:34.471
threejs shader custom Phong,
or something like that.

34
00:02:34.471 --> 00:02:36.991
And you're gonna have
to sort of dig in and

35
00:02:36.991 --> 00:02:39.945
see how people are doing
this in different ways.

36
00:02:39.945 --> 00:02:43.380
And so there's some people that
are writing blog posts about how

37
00:02:43.380 --> 00:02:46.382
they're taking this approach,
and so on and so forth.

38
00:02:46.382 --> 00:02:50.403
&gt;&gt; So a material is just
a fancy pre-built shader.

39
00:02:50.403 --> 00:02:54.019
&gt;&gt; Exactly, 100% just a shader, and so,

40
00:02:54.019 --> 00:02:58.631
yeah it's just what we've
been writing today, yeah.

41
00:02:58.631 --> 00:03:02.504
&gt;&gt; What's the best way to hide
a certain portion of an object?

42
00:03:02.504 --> 00:03:05.462
&gt;&gt; To hide is that the question?

43
00:03:05.462 --> 00:03:06.605
&gt;&gt; That's the question.

44
00:03:06.605 --> 00:03:12.083
&gt;&gt; So the best way to hide
certain portions of an object,

45
00:03:12.083 --> 00:03:16.850
it depends on what you're
trying to achieve.

46
00:03:16.850 --> 00:03:18.066
&gt;&gt; Something about clipping?

47
00:03:18.066 --> 00:03:22.400
&gt;&gt; Yeah so, I mean when we talk
about like WebGL there's so

48
00:03:22.400 --> 00:03:24.889
many ways of doing one thing, so

49
00:03:24.889 --> 00:03:31.000
that's kind of what I was trying to get
at with this exercise with the circles.

50
00:03:31.000 --> 00:03:35.435
We were just trying to do this kind of
circles thing, but we approached it in so

51
00:03:35.435 --> 00:03:39.807
many different ways, and they all had
different benefits and fallbacks and

52
00:03:39.807 --> 00:03:40.851
stuff like that.

53
00:03:40.851 --> 00:03:45.275
So let's say I was trying to
mask out part of this image,

54
00:03:45.275 --> 00:03:51.301
what you actually could do maybe is in
a fragment shader, you could edit it so

55
00:03:51.301 --> 00:03:57.820
that we have that mask variable like we
were doing earlier which goes from 0 to 1.

56
00:03:57.820 --> 00:04:02.821
And maybe it's like part of this
here is gonna be if the mask

57
00:04:02.821 --> 00:04:08.534
variable here is 0 and then the rest
of it is 1, then you can use for

58
00:04:08.534 --> 00:04:13.128
your frag color,
you could say mix from a transparent

59
00:04:13.128 --> 00:04:17.852
value like RGBA with the alpha 0,
to an opaque value.

60
00:04:17.852 --> 00:04:22.768
And then you'll be able to
see through that part, so

61
00:04:22.768 --> 00:04:29.264
actually a good example here within
our circle, within our sphere.

62
00:04:29.264 --> 00:04:34.166
Let's say we wanted to be able to see
through these points, these polka dots,

63
00:04:34.166 --> 00:04:37.896
so that it was more like wiffle ball or
something like that.

64
00:04:37.896 --> 00:04:43.946
So in our fragment shader,
we can do this little line here,

65
00:04:43.946 --> 00:04:49.512
if mask is less than 0.5,
we're gonna do discard,

66
00:04:49.512 --> 00:04:57.867
and actually I should have done the other
way around if it's greater than 0.5.

67
00:05:00.818 --> 00:05:05.634
And what that's gonna do is it's gonna
say, if we're inside the circle,

68
00:05:05.634 --> 00:05:09.926
discard the fragment,
discard means don't draw this fragment.

69
00:05:09.926 --> 00:05:13.885
And if all of a sudden I mean right
now we're not seeing anything inside

70
00:05:13.885 --> 00:05:17.187
the sphere, but
if we change this to a two sided material,

71
00:05:20.491 --> 00:05:26.136
We're gonna see the inside of the sphere
as well, which is kind of cool actually.

72
00:05:26.136 --> 00:05:30.413
And that's because we're just no longer
rendering these fragments, and so

73
00:05:30.413 --> 00:05:34.906
because we are no longer rendering them,
we're seeing straight through them.

74
00:05:34.906 --> 00:05:39.880
And so you can imagine a mask, that's not
just something as simple as circles, but

75
00:05:39.880 --> 00:05:43.005
maybe it's using noise or
something like that, and

76
00:05:43.005 --> 00:05:46.719
it's undulating, and
it's occluding parts of the sphere.

77
00:05:46.719 --> 00:05:52.022
And so this is a fragment shader approach
to creating some occlusions, it has

78
00:05:52.022 --> 00:05:57.254
some problems like one of the problems
has to do again with this jaggedness.

79
00:05:57.254 --> 00:06:01.308
The lack of anti-aliasing
which is just a fancy word for

80
00:06:01.308 --> 00:06:04.845
smoothing things, but
here if I save the file and

81
00:06:04.845 --> 00:06:09.172
I take a look up close,
you'll see that it's very jagged.

82
00:06:09.172 --> 00:06:13.885
And that's because we're using
this boolean if it's over

83
00:06:13.885 --> 00:06:18.606
a certain value discard,
if it's under a certain accept.

84
00:06:18.606 --> 00:06:24.745
And what we really want instead of
a Boolean is we want some sort of a,

85
00:06:24.745 --> 00:06:30.242
a step function to smoothly go
from opaque to transparent but

86
00:06:30.242 --> 00:06:32.855
doing that is not very easy.

87
00:06:32.855 --> 00:06:34.449
So that has some downsides.

88
00:06:34.449 --> 00:06:37.822
So if you didn't wanna take
a fragment based approach,

89
00:06:37.822 --> 00:06:42.505
you could also do what's called CSG which
is a sort of construct of geometry.

90
00:06:45.595 --> 00:06:50.169
And this is like actual Boolean
operations on geometry, so

91
00:06:50.169 --> 00:06:55.666
you have one mesh, you take another
mesh and create a Boolean operation

92
00:06:58.365 --> 00:07:02.850
And so that could actually be another
way to create this kind of wiffle ball,

93
00:07:02.850 --> 00:07:05.654
by just putting cylinders
that are poking out,

94
00:07:05.654 --> 00:07:09.113
so this actually would have
been a great exercise as well.

95
00:07:09.113 --> 00:07:13.913
We have the exact exercise that we
have here, and we could use spheres or

96
00:07:13.913 --> 00:07:18.801
we could use cylinders for each of
these spheres would work just as well.

97
00:07:18.801 --> 00:07:23.595
But with CSG you can take these spheres,
and each of this spheres you could

98
00:07:23.595 --> 00:07:28.542
sort of intersect it with the red sphere,
so each of these white spheres will

99
00:07:28.542 --> 00:07:33.520
be intersected, so that you are basically
cutting holes in the red sphere.

100
00:07:33.520 --> 00:07:36.101
And the benefit of that approach,

101
00:07:36.101 --> 00:07:40.818
is that the circles you are gonna
get are gonna be anti aliased.

102
00:07:40.818 --> 00:07:44.822
That's really the only benefit
which is a small benefit, but

103
00:07:44.822 --> 00:07:47.440
depending on your creative direction,

104
00:07:47.440 --> 00:07:52.831
depending on what kind of thing you're
building, you might want one or the other.

105
00:07:52.831 --> 00:07:58.011
It's gonna lead to a lot more
triangles because when you have CSG,

106
00:07:58.011 --> 00:08:04.115
you end up with lots of triangles in the
actual final output, which you can sort

107
00:08:04.115 --> 00:08:09.784
of see it the mesh starts to get messy
with like the wire frame of the mesh.

108
00:08:09.784 --> 00:08:14.793
But yeah, that's that's another way of
doing occlusion and stuff like that.

109
00:08:14.793 --> 00:08:17.638
There's probably like a dozen
other ways to do occlusions,

110
00:08:17.638 --> 00:08:20.220
and a dozen other ways to do
this kind of shader as well.

