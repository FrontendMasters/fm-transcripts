WEBVTT

1
00:00:00.030 --> 00:00:06.160
So one other thing I wanted to
mention is if we use a step function,

2
00:00:06.160 --> 00:00:12.082
so in our code, we have this step
function, we have this here.

3
00:00:12.082 --> 00:00:14.252
And a step function is saying,

4
00:00:14.252 --> 00:00:19.020
if it's less than something,
give me 1, or otherwise give me 0.

5
00:00:19.020 --> 00:00:21.960
That's basically what the step function is
doing, it's like this ternary operation we

6
00:00:21.960 --> 00:00:25.748
did before, just like this,
same kind of concept.

7
00:00:25.748 --> 00:00:29.860
But it's probably flipped instead
of less than it's greater than.

8
00:00:30.990 --> 00:00:32.190
That's what a step function does.

9
00:00:32.190 --> 00:00:37.170
But if we look close enough to some of
these circles and it's kind of hard

10
00:00:37.170 --> 00:00:41.986
to see sometimes, but the easiest
way to see it is to export this PNG.

11
00:00:44.263 --> 00:00:45.730
And then look at it really close.

12
00:00:46.750 --> 00:00:49.893
And you'll see these super jagged
edges on all these circles.

13
00:00:51.650 --> 00:00:53.060
And that's pretty ugly.

14
00:00:53.060 --> 00:00:58.808
And in order to fix that, we're going
to use a different step function,

15
00:00:58.808 --> 00:01:02.214
that's called aastep or anti alias step.

16
00:01:02.214 --> 00:01:06.970
And it's on NPM as GLSL aastep.

17
00:01:06.970 --> 00:01:09.630
You can see it on NPM or GitHub.

18
00:01:09.630 --> 00:01:11.900
And so we're gonna install this and

19
00:01:11.900 --> 00:01:17.154
require it just the same way we're
gonna go into a terminal, NPM install

20
00:01:17.154 --> 00:01:22.300
glsl-aastep for anti alias step.

21
00:01:22.300 --> 00:01:25.465
And there's an example
of how to use this here.

22
00:01:25.465 --> 00:01:27.799
That'll just show you here in our code.

23
00:01:30.233 --> 00:01:32.650
So we should already probably
have it wrapped in glsl.

24
00:01:34.860 --> 00:01:38.180
If not,
you'll need to require the utility,

25
00:01:38.180 --> 00:01:40.980
the glslify utility and
then wrap that as a function.

26
00:01:42.240 --> 00:01:47.875
But now we can say pragma
glslify-aastep = require

27
00:01:47.875 --> 00:01:54.320
glsl-aastep, but
this is gonna give us an error.

28
00:01:54.320 --> 00:01:59.570
And this is because this particular line,
this particular module

29
00:01:59.570 --> 00:02:04.280
needs an extension in web gl,
which is something you don't always

30
00:02:04.280 --> 00:02:09.000
see in a lot of the documentation because
extensions are a little bit more advanced.

31
00:02:09.000 --> 00:02:10.910
But all of a sudden,
this is requiring an extension.

32
00:02:10.910 --> 00:02:15.630
The way we actually know is
if we look at our error here,

33
00:02:15.630 --> 00:02:20.190
it's gonna say some sort of error
like something extension is disabled.

34
00:02:20.190 --> 00:02:24.464
So we could Google this
in regards to threejs.

35
00:02:26.450 --> 00:02:29.150
And you might start to find some docs and
stuff on it.

36
00:02:29.150 --> 00:02:33.500
Unfortunately, because this is a bit more
advanced, it's not super well documented,

37
00:02:33.500 --> 00:02:36.790
but you will see some references and
sort of GitHub issues and

38
00:02:36.790 --> 00:02:41.060
things that we have to say derivatives,
we have to say something with derivatives.

39
00:02:41.060 --> 00:02:42.159
I'll just show you how it looks.

40
00:02:44.310 --> 00:02:49.590
And we basically have to go to our
ShaderMaterial, say extensions and

41
00:02:49.590 --> 00:02:54.690
then derivatives, true.

42
00:02:54.690 --> 00:02:59.140
So what we've just done, is we've said for
this material turn on derivatives,

43
00:02:59.140 --> 00:03:00.890
which is an extension.

44
00:03:00.890 --> 00:03:03.576
So this is like a bit more
of an advanced topic here.

45
00:03:07.721 --> 00:03:12.220
And now if we've done that, we should
be able to replace our step function.

46
00:03:13.220 --> 00:03:15.381
So let's say we have
a step function like this.

47
00:03:19.035 --> 00:03:21.290
So we have a step function like this.

48
00:03:21.290 --> 00:03:26.730
Now we're just going to replace it with
aastep which we've acquired up here.

49
00:03:28.280 --> 00:03:31.093
And now just to compare,
I'm going to save the file.

50
00:03:31.093 --> 00:03:37.480
I'm gonna go check it out, and the circles
are smooth, which is what we want.

51
00:03:38.970 --> 00:03:40.630
So that's something to keep in mind,

52
00:03:40.630 --> 00:03:43.390
if you're using step it's
going to be very jagged.

53
00:03:43.390 --> 00:03:46.304
And a way to fix that is to use aastep.

54
00:03:49.450 --> 00:03:54.513
And basically what this function is
doing under the hood is just saying,

55
00:03:54.513 --> 00:03:59.078
instead of making it either A or
B instead of being purely binary,

56
00:03:59.078 --> 00:04:03.643
I'm going to look at the difference
based on the pixel difference

57
00:04:03.643 --> 00:04:07.634
within the rendering of this
distance field basically.

58
00:04:07.634 --> 00:04:09.399
And I'm gonna just make
it a bit smoother and

59
00:04:09.399 --> 00:04:11.220
it's doing some crazy
stuff under the hood.

