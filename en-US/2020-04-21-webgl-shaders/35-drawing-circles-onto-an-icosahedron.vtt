WEBVTT

1
00:00:00.390 --> 00:00:02.690
We have these geometries here.

2
00:00:03.970 --> 00:00:05.870
And we're pretty close to this.

3
00:00:05.870 --> 00:00:08.740
Actually, all we need to
do differently is increase

4
00:00:08.740 --> 00:00:10.810
the detail of our icosahedron geometry.

5
00:00:12.280 --> 00:00:14.600
That's all we need to do differently
in order to get this output.

6
00:00:16.500 --> 00:00:21.850
But what we really want is we don't wanna
draw spheres on each of these points,

7
00:00:21.850 --> 00:00:24.304
we want to draw discs or circles.

8
00:00:24.304 --> 00:00:27.450
So we're gonna create a new
geometry before our for loop.

9
00:00:27.450 --> 00:00:31.409
We're gonna call it circle geom.

10
00:00:31.409 --> 00:00:35.717
And we're gonna say new
THREE.CircleGeometry and the radius is

11
00:00:35.717 --> 00:00:41.130
gonna be one and the segments we can leave
it at 32 or 64 or something like that.

12
00:00:43.120 --> 00:00:46.924
And then we're just gonna use
that instead of the geometry for

13
00:00:46.924 --> 00:00:49.273
each of the points around our sphere.

14
00:00:53.723 --> 00:00:57.127
And then one last little thing
we need to do is make it so

15
00:00:57.127 --> 00:01:03.260
that we align each of these circles and we
snap them onto the surface of the sphere.

16
00:01:03.260 --> 00:01:06.480
And to do that,
we're gonna use a utility called lookAt.

17
00:01:06.480 --> 00:01:10.110
So we can say mesh.lookAt.

18
00:01:10.110 --> 00:01:15.551
And then we'll look at the center,
Which is 000, and that's gonna

19
00:01:15.551 --> 00:01:19.783
turn each of these meshes towards the
center, which is the center of the sphere.

20
00:01:23.129 --> 00:01:25.963
And then the last thing maybe
is to turn wireframe off and

21
00:01:25.963 --> 00:01:29.050
make the points whatever color
you'd like the points to be.

22
00:01:31.320 --> 00:01:34.750
Now here I'm no longer
able to see the points.

23
00:01:34.750 --> 00:01:38.430
And so
here's where I would start to debug this.

24
00:01:38.430 --> 00:01:42.020
Because I would have imagined
this would appear the points but

25
00:01:42.020 --> 00:01:45.540
maybe it's because they're
being blocked by the sphere.

26
00:01:45.540 --> 00:01:49.310
So maybe just to test, you don't need
to copy this part, maybe just to test.

27
00:01:49.310 --> 00:01:53.020
I'm gonna push these out
by increasing the position.

28
00:01:55.160 --> 00:01:57.030
But what I'm actually starting to see

29
00:01:58.100 --> 00:02:03.000
is that it's almost like I'm looking
only at the inside of these circles.

30
00:02:03.000 --> 00:02:06.280
And maybe what's actually happening
is that I'm only rendering

31
00:02:06.280 --> 00:02:08.470
one side of the circles.

32
00:02:08.470 --> 00:02:14.870
So if I do in my material
side is THREE.DoubleSide.

33
00:02:14.870 --> 00:02:18.600
Now I should see both
sides of these circles.

34
00:02:18.600 --> 00:02:20.910
And I can do instead of that
I can say front side or

35
00:02:20.910 --> 00:02:23.150
back side and
you'll see how that would change.

36
00:02:23.150 --> 00:02:26.140
So this is the default is front side and

37
00:02:26.140 --> 00:02:30.670
it's almost like I'm looking
inside of these meshes.

38
00:02:30.670 --> 00:02:35.190
If I say backside, now,
I'm only gonna see the outside edge,

39
00:02:35.190 --> 00:02:39.070
the outside face So I can move

40
00:02:39.070 --> 00:02:43.700
my position back down to what it was
before, just on the surface of the mesh.

41
00:02:43.700 --> 00:02:49.110
And so that's all that I needed to do was
just change the side of the material,

42
00:02:49.110 --> 00:02:53.850
because I was only seeing the back-facing
side, or the front-facing side.

43
00:02:53.850 --> 00:02:56.737
So I'm gonna flip that.

44
00:02:56.737 --> 00:03:00.950
And so now we actually have kind
of a Yayoi Kusama type of a ball.

45
00:03:00.950 --> 00:03:05.340
And we can change the detail with
the icosahedron back to zero, or one, or

46
00:03:05.340 --> 00:03:06.299
two whatever you'd like.

47
00:03:08.430 --> 00:03:11.220
You could even randomly set the scale.

48
00:03:11.220 --> 00:03:15.394
So you could do scale times Math.random().

49
00:03:21.023 --> 00:03:26.075
Just for those who have not used it yet
I have some utilities,

50
00:03:26.075 --> 00:03:31.270
part of Canvas sketch,
called Canvas dash sketch dash util.

51
00:03:31.270 --> 00:03:34.900
It's got a lot of utilities
around randomness and color and

52
00:03:34.900 --> 00:03:39.920
math, this might be a good opportunity to
start to use some of the random utility.

53
00:03:40.990 --> 00:03:43.570
If you're interested,
you don't need to copy this, but

54
00:03:43.570 --> 00:03:47.430
if you're interested,
you could require this and NPM install it.

55
00:03:47.430 --> 00:03:51.318
So for example, I would go into
my project that I'm working on,

56
00:03:51.318 --> 00:03:55.780
NPM install Canvas/sketch/util.

57
00:03:55.780 --> 00:04:00.435
And then I could copy and
paste this require

58
00:04:00.435 --> 00:04:04.968
statement and bring this into my sketch.

59
00:04:04.968 --> 00:04:09.637
And this might be review from
those who've already used this,

60
00:04:09.637 --> 00:04:12.732
but if not, you could always just try to.

61
00:04:12.732 --> 00:04:16.952
You copy this in, you'd require it in your
sketch and then you can actually use this

62
00:04:16.952 --> 00:04:20.290
random utility to produce some
more interesting random values.

63
00:04:20.290 --> 00:04:24.894
So instead of always a uniform
randomness between zero and one,

64
00:04:24.894 --> 00:04:30.621
you could use this, for example, for
within a range between 0.25 and one.

65
00:04:30.621 --> 00:04:31.670
So that the circles don't get too small.

66
00:04:31.670 --> 00:04:32.660
And maybe we'll

67
00:04:33.930 --> 00:04:37.910
have to scale that by some small number
just to make sure it's not huge.

68
00:04:41.850 --> 00:04:45.136
You could also use gaussian randomness.

69
00:04:45.136 --> 00:04:51.150
So gaussian randomness is gonna
produce values that are sometimes

70
00:04:51.150 --> 00:04:55.390
larger than one, sometimes they're gonna
be smaller than minus one as well.

71
00:04:55.390 --> 00:04:59.440
They could go up to three or four,
depending on the values but you'll see

72
00:04:59.440 --> 00:05:03.432
it's gonna produce these very drastically
different modulations of randomness.

73
00:05:03.432 --> 00:05:07.434
So gaussian randomness is sometimes
very nice for more organic changes

74
00:05:07.434 --> 00:05:11.712
in randomness rather than always making
it uniformly between zero and one.

75
00:05:13.780 --> 00:05:18.198
But you'll definitely start to see, as we
start to get larger and larger circles,

76
00:05:18.198 --> 00:05:22.249
we start to see that this sort of
approach, it doesn't really work so well.

77
00:05:24.976 --> 00:05:29.300
And so this is where we have to
take consideration of how do we

78
00:05:29.300 --> 00:05:33.622
approach this in a better way
where the circles are actually

79
00:05:33.622 --> 00:05:37.167
mapped directly onto
the surface of the sphere,

80
00:05:37.167 --> 00:05:42.840
as opposed to just sitting there as
disks on top of the sphere itself.

81
00:05:42.840 --> 00:05:45.340
We almost want to change
the the fragment shader so

82
00:05:45.340 --> 00:05:48.280
that these circles are kind
of drawn onto the surface.

83
00:05:49.390 --> 00:05:51.730
So that we don't get this kind of
ugly effect here that we're getting.

84
00:05:54.000 --> 00:05:57.680
So what I'm gonna do is I'm just
gonna make it so that this is very,

85
00:05:58.740 --> 00:06:04.480
maybe uniform, I'm just gonna do, I'm just
gonna leave it as a simple value like 0.1.

86
00:06:04.480 --> 00:06:09.050
Maybe multiply that by Math.random()
again, just to keep it simple.

87
00:06:11.350 --> 00:06:12.340
0.25 or something.

88
00:06:14.060 --> 00:06:15.250
And then I'm gonna copy and

89
00:06:15.250 --> 00:06:19.865
paste this file and I'm gonna show
you an alternative approach again.

90
00:06:19.865 --> 00:06:20.870
[LAUGH] So

91
00:06:20.870 --> 00:06:23.020
you might be thinking we're just doing
the same thing over and over again.

92
00:06:23.020 --> 00:06:27.840
But this is really what happens when you
start to work with graphics programming.

93
00:06:27.840 --> 00:06:29.490
Somebody give you a task.

94
00:06:29.490 --> 00:06:31.770
You start to approach that task.

95
00:06:31.770 --> 00:06:35.510
And then you realize your approach,
although it works,

96
00:06:35.510 --> 00:06:36.920
it may not work perfectly.

97
00:06:36.920 --> 00:06:39.010
And so
you have to slightly shift the approach.

98
00:06:39.010 --> 00:06:42.630
And that's kind of what we're working
through here is just a realistic exercise,

99
00:06:42.630 --> 00:06:46.810
of how we go through these different
approaches and how each step,

100
00:06:46.810 --> 00:06:50.360
it looks good until we find a bug with
it until we find an issue with it and

101
00:06:50.360 --> 00:06:54.530
then we have to reevaluate and
try to figure out what do we do next.

102
00:06:56.120 --> 00:06:57.480
And so I'm just gonna go in copy and

103
00:06:57.480 --> 00:07:02.150
paste this file, just to have it on
hand in case I want to come back to it.

104
00:07:02.150 --> 00:07:05.570
You might want to start renaming
these just to be more descriptive.

105
00:07:05.570 --> 00:07:09.290
I'm gonna rename this to
be circles-on-sphere.

