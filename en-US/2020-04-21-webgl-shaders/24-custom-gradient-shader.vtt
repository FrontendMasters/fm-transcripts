WEBVTT

1
00:00:00.500 --> 00:00:04.432
We've got a red cube or
some sorta colored cube.

2
00:00:04.432 --> 00:00:09.261
And then what we're gonna do is we're
gonna write a vertex shader that takes

3
00:00:09.261 --> 00:00:12.520
some vertex information
that Three.js gives us.

4
00:00:12.520 --> 00:00:16.270
We're gonna pass that down
to the fragment shader.

5
00:00:16.270 --> 00:00:19.370
And then we're gonna use that
information in the fragment shader.

6
00:00:19.370 --> 00:00:22.560
And so this is sort of another
thing to understand is that

7
00:00:22.560 --> 00:00:25.980
the way the pipeline works is
that it's like a waterfall.

8
00:00:25.980 --> 00:00:29.898
It starts with geometry and it's actually
right like what I've written here,

9
00:00:29.898 --> 00:00:33.816
it starts with the geometrym and the data
from the geometry gets passed down this

10
00:00:33.816 --> 00:00:35.589
waterfall into the vertex shader.

11
00:00:35.589 --> 00:00:38.128
And then it gets passed down
again through the vertex

12
00:00:38.128 --> 00:00:39.809
shader into the fragment shader.

13
00:00:39.809 --> 00:00:42.710
And then, finally into the rendering,
that's how this will work.

14
00:00:42.710 --> 00:00:45.070
And you'll start to see
this as we write it.

15
00:00:45.070 --> 00:00:47.513
So we're gonna write void main.

16
00:00:47.513 --> 00:00:53.022
And instead of trying to memorize this
next line, which is sometimes very hard

17
00:00:53.022 --> 00:00:58.790
to memorize, I'm gonna just suggest you
go into the Repo, you go into Snippets.

18
00:01:00.070 --> 00:01:03.730
So it's in guides/snippets.

19
00:01:06.811 --> 00:01:11.390
And if we scroll just to the first
one here, Basic Vertex Shader.

20
00:01:11.390 --> 00:01:16.310
You go here and you basically
just take this line, and you copy

21
00:01:16.310 --> 00:01:21.930
exactly this line here, and

22
00:01:21.930 --> 00:01:25.410
go into our shader code,
we paste that into our vertex shader.

23
00:01:27.130 --> 00:01:30.758
And if it's copied correctly,
and there's no typos or anything,

24
00:01:30.758 --> 00:01:33.280
it should just continue to work.

25
00:01:33.280 --> 00:01:35.080
Everything should just look
just as it did before.

26
00:01:35.080 --> 00:01:38.210
And that's because we've just
rewritten the default vertex shader.

27
00:01:38.210 --> 00:01:43.059
So this vertex shader is the same
as what Three.js gives us,

28
00:01:43.059 --> 00:01:46.969
but we also have to specify
in our material here.

29
00:01:46.969 --> 00:01:51.781
So we have to make sure that the material
has both the vertex and fragment shader.

30
00:01:56.989 --> 00:02:01.508
Okay, so the next thing we're gonna do is
we're gonna take the attribute data coming

31
00:02:01.508 --> 00:02:04.145
from Three.js,
coming from this box geometry,

32
00:02:04.145 --> 00:02:06.930
we're gonna pass it down
into the fragment shader.

33
00:02:08.010 --> 00:02:11.240
And to do that,
we're gonna use something called varying.

34
00:02:11.240 --> 00:02:14.400
So a varying is another type,
we've talked about uniforms,

35
00:02:14.400 --> 00:02:16.230
which is coming from JavaScript.

36
00:02:16.230 --> 00:02:17.550
We've talked about attributes,

37
00:02:17.550 --> 00:02:21.290
which is coming from three.geometry,
or three.boxgeometry.

38
00:02:21.290 --> 00:02:27.170
Well, a varying is actually something
that we define here in the code.

39
00:02:27.170 --> 00:02:32.098
But then it's something that can get
pass down into the fragment shader,

40
00:02:32.098 --> 00:02:34.175
so we say, varying vec2 vUv.

41
00:02:34.175 --> 00:02:39.246
And we say vuv = uv, and
uv is a built in thing of Three.js,

42
00:02:39.246 --> 00:02:46.220
Three.js gives us this vec2 which is uv,
which is a texture coordinate.

43
00:02:46.220 --> 00:02:49.820
So this is gonna be just like we were
talking about the sphere mapping and

44
00:02:49.820 --> 00:02:53.170
the Taurus mapping, those are using
different texture coordinates that

45
00:02:53.170 --> 00:02:56.220
are built into the geometries
that Three.js gives us.

46
00:02:56.220 --> 00:02:58.930
And here, we're gonna access those
texture coordinates to be able to

47
00:02:58.930 --> 00:03:00.779
use those to create
some interesting looks.

48
00:03:02.150 --> 00:03:06.080
And so when we create a varying in our
vertex shader, we just copy that line and

49
00:03:06.080 --> 00:03:09.220
we paste it into our fragment shader,
it has to match exactly.

50
00:03:09.220 --> 00:03:12.621
So if we say vec2 in the vertex,
we have to say vec2 to in the fragment,

51
00:03:12.621 --> 00:03:14.910
the names have to match,
and so on and so forth.

52
00:03:17.133 --> 00:03:19.960
And then, now that we've done that,
we can just use it.

53
00:03:19.960 --> 00:03:24.980
And so instead of vec3 as a red,
we're gonna do vec3 as vUv.x.

54
00:03:27.030 --> 00:03:30.909
And so this is all lots of code
just to create a gradient.

55
00:03:30.909 --> 00:03:35.084
But the purpose here is to just try and
wrap our heads around what's happening,

56
00:03:35.084 --> 00:03:38.839
and try to understand how we can start
to build out more complex things.

57
00:03:41.250 --> 00:03:45.270
So varying, you know how I was saying
uniform, the reason it's called uniform

58
00:03:45.270 --> 00:03:50.050
is because it's uniformly the same across
every single pixel in the surface.

59
00:03:50.050 --> 00:03:54.940
And so the uniform for, let's say if we
were to find the color, maybe it's a vec3,

60
00:03:54.940 --> 00:03:56.780
something like this,

61
00:03:56.780 --> 00:04:00.720
this would be uniformly the same
if it was coming from JavaScript.

62
00:04:00.720 --> 00:04:05.405
It would be uniformly the same across the
whole surface, whereas varying, the reason

63
00:04:05.405 --> 00:04:09.898
we call it varying is because the values
change across the surface of this texture,

64
00:04:09.898 --> 00:04:12.938
and across the surface of this material.

65
00:04:12.938 --> 00:04:17.540
So vUv here is changing from one
side of the cube to the other, and

66
00:04:17.540 --> 00:04:19.700
it's varying in its nature.

67
00:04:19.700 --> 00:04:20.740
That's why they call them variance.

