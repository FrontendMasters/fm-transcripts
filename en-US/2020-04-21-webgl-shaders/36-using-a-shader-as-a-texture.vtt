WEBVTT

1
00:00:00.280 --> 00:00:05.340
Let's do this next approach which is gonna
be probably the more complex approach,

2
00:00:05.340 --> 00:00:12.020
but it'll show some really nice ways of

3
00:00:12.020 --> 00:00:17.070
working with shaders, and it'll get
us a little bit more comfortable with

4
00:00:17.070 --> 00:00:21.700
putting data into shaders, and
thinking in this sort of shader way.

5
00:00:23.220 --> 00:00:28.830
So what we're gonna do, instead of doing
this with geometry is on the edge of

6
00:00:28.830 --> 00:00:34.892
each of these circles on the edge of the
sphere, we're gonna do it all in a shader.

7
00:00:34.892 --> 00:00:38.348
We're gonna say we still wanna use
the points that we've defined here,

8
00:00:38.348 --> 00:00:41.692
we want to use the icosahedron points
because we like the way that those

9
00:00:41.692 --> 00:00:43.940
are placed around the sphere.

10
00:00:43.940 --> 00:00:48.490
But we want to put that data
into the shader somehow.

11
00:00:48.490 --> 00:00:52.045
So what we're gonna do, I'm just gonna
delete this stuff, make sure you backup

12
00:00:52.045 --> 00:00:55.820
your file so that you have it on hand
in case you wanna come back to it.

13
00:00:55.820 --> 00:01:00.120
Once you've backed it up,
you can delete the the circle stuff, but

14
00:01:00.120 --> 00:01:02.922
we're gonna leave the icosahedron stuff.

15
00:01:05.447 --> 00:01:07.690
Because we're gonna wanna
keep using these vertices.

16
00:01:09.530 --> 00:01:13.270
And so the goal here is to say,
let's take these points and

17
00:01:13.270 --> 00:01:16.190
let's put them in the fragment shader.

18
00:01:16.190 --> 00:01:19.750
And then what we'll do in the fragment
shader is we'll say for each pixel

19
00:01:19.750 --> 00:01:25.210
how far away is the current
pixel to the nearest point?

20
00:01:25.210 --> 00:01:26.850
So what's the point nearest to it?

21
00:01:26.850 --> 00:01:29.290
The nearest icosahedron point.

22
00:01:29.290 --> 00:01:32.564
And then based on how far
away it is from that point,

23
00:01:32.564 --> 00:01:37.057
we wanna create a step function just
like we did in our earlier shader,

24
00:01:37.057 --> 00:01:39.817
with the noise and
with that kind of stuff.

25
00:01:39.817 --> 00:01:44.910
So we're gonna start by just passing
this points array into our shader.

26
00:01:46.530 --> 00:01:51.500
So we're gonna go into uniforms, we're
gonna give it a uniform called points,

27
00:01:51.500 --> 00:01:55.898
and the value is called points,
because that's the name of the array.

28
00:02:04.371 --> 00:02:08.945
And so when you work with an array,
so this is an array of vector threes,

29
00:02:08.945 --> 00:02:12.379
so I can just double check
by console logging points,

30
00:02:12.379 --> 00:02:14.919
it should be an array of vector threes.

31
00:02:16.000 --> 00:02:18.420
So when you work with
an array in a shader,

32
00:02:18.420 --> 00:02:20.900
we can pass in an array of vector threes.

33
00:02:20.900 --> 00:02:26.160
And then in our fragment shader we
can say uniform vec3 points and

34
00:02:26.160 --> 00:02:28.760
then square brackets like this.

35
00:02:28.760 --> 00:02:31.600
Now the problem is with GSL,

36
00:02:31.600 --> 00:02:37.130
you actually have to specify exactly
the number of elements within this array.

37
00:02:37.130 --> 00:02:40.520
So I have to say something like 25 or
24 or whatever.

38
00:02:42.040 --> 00:02:45.153
But this number that I'm putting in here,

39
00:02:45.153 --> 00:02:50.435
it might not match the number of
the actual array that we're putting in.

40
00:02:50.435 --> 00:02:53.551
We can't just put in another uniform and
then access that other uniform,

41
00:02:53.551 --> 00:02:56.190
we have to do something
a little bit different.

42
00:02:56.190 --> 00:03:00.310
So just to test let me
just console.log points.

43
00:03:01.490 --> 00:03:03.140
So we actually have 42 points.

44
00:03:04.150 --> 00:03:06.860
But sometimes depending on the detail
we might not have that many,

45
00:03:06.860 --> 00:03:09.180
we might have less or may have more.

46
00:03:09.180 --> 00:03:14.360
So what I'm gonna do is I'm
gonna add a define, and a define

47
00:03:14.360 --> 00:03:19.580
is something that we can access
in a different way than uniforms.

48
00:03:19.580 --> 00:03:22.320
And so I'll show you how this works and
I'll explain it a bit.

49
00:03:22.320 --> 00:03:27.209
So we're gonna say defines, this is,
sorry, it's plural with an s, defines.

50
00:03:27.209 --> 00:03:32.013
We're gonna say POINT_COUNT in capitals
because kind of like a constant, and

51
00:03:32.013 --> 00:03:34.463
then we're gonna say points.length.

52
00:03:38.672 --> 00:03:44.144
So what we're doing now is we're adding in
what's called a pre-processor define or

53
00:03:44.144 --> 00:03:46.740
a macro or something like that.

54
00:03:46.740 --> 00:03:51.654
And it's a feature of some of these C
based languages where in these languages

55
00:03:51.654 --> 00:03:55.602
you can have defines, so
you could have something like this.

56
00:03:58.313 --> 00:04:01.400
A common one would be define PI 3.14, and

57
00:04:01.400 --> 00:04:06.274
it's basically like a constant,
you can think of it like a constant but

58
00:04:06.274 --> 00:04:10.760
it's not just defining a number
it's defining any expression.

59
00:04:11.970 --> 00:04:17.241
So I could define something like this,
I could say clamp or

60
00:04:17.241 --> 00:04:21.544
maybe I could say something
like I don't know,

61
00:04:21.544 --> 00:04:26.387
define saturate is equal to max 0.1 or
something,

62
00:04:26.387 --> 00:04:30.825
you could basically put
in any expression here.

63
00:04:30.825 --> 00:04:33.481
And you'll have to be careful
if you put it in a semi colon,

64
00:04:33.481 --> 00:04:36.480
it might actually break but
you can put in any expression of code.

65
00:04:36.480 --> 00:04:42.350
So I could say,
define foobar is 5.0 + 2.0,

66
00:04:42.350 --> 00:04:48.090
and now whenever I use foobar in my code,
this is just going to get replaced

67
00:04:48.090 --> 00:04:51.140
automatically before it
even runs the shader.

68
00:04:51.140 --> 00:04:54.920
So during compilation it's
gonna get replaced with

69
00:04:54.920 --> 00:04:56.530
whatever code I have in my define here.

70
00:04:58.120 --> 00:05:02.160
And so commonly we're using it for
things like Pi, and

71
00:05:02.160 --> 00:05:06.440
occasionally we'll use it for
functions that we want.

72
00:05:06.440 --> 00:05:09.732
But in this case we're gonna use
it to define the point count.

73
00:05:09.732 --> 00:05:14.378
So we're gonna say points, in the bracket
we're gonna say POINT_COUNT Which we

74
00:05:14.378 --> 00:05:19.464
didn't define manually in our shader code,
but we did define in the three.js defines.

75
00:05:19.464 --> 00:05:22.574
So three.js is going to
inject into the defines,

76
00:05:22.574 --> 00:05:26.360
it's gonna inject something
that equals points.length.

77
00:05:31.387 --> 00:05:36.760
And so if you run your code you should
have everything running and compiling.

78
00:05:37.960 --> 00:05:42.605
So just to reiterate,
this approach is very simple,

79
00:05:42.605 --> 00:05:49.430
we've just defined lots of meshes and
we've placed them around this sphere.

80
00:05:49.430 --> 00:05:53.720
And we've turned them instead of being
spheres, we've turned them into circles.

81
00:05:53.720 --> 00:05:59.490
And that looks pretty good until we
start to get shapes that are very large.

82
00:05:59.490 --> 00:06:04.605
So in our previous approach,
the circles on sphere example,

83
00:06:07.586 --> 00:06:10.532
We can see that at most angles
it looks okay actually,

84
00:06:10.532 --> 00:06:13.140
it looks exactly like what we want.

85
00:06:13.140 --> 00:06:15.130
But the larger these circles get,

86
00:06:15.130 --> 00:06:20.010
the more we start to realize that they're
actually not really part of the sphere.

87
00:06:20.010 --> 00:06:23.060
It's just as if somebody's
taken CD-ROM discs or

88
00:06:23.060 --> 00:06:26.160
something and
placed it around this sphere.

89
00:06:26.160 --> 00:06:31.476
And so it actually doesn't look at
all like Yayoi Kusama's spheres,

90
00:06:31.476 --> 00:06:37.910
where hers are very clearly spheres
that have these circles on the surface.

91
00:06:37.910 --> 00:06:42.738
It's very clearly on the surface of the
mesh and it's wrapping around as if it's

92
00:06:42.738 --> 00:06:47.566
a sticker or something like that, and
that's what we're going for as opposed to

93
00:06:47.566 --> 00:06:51.755
this sort of CD-ROM that just is
a flat disc that sticks out like that.

94
00:06:51.755 --> 00:06:56.532
And so what we're gonna do is we're gonna
use a shader to actually draw these

95
00:06:56.532 --> 00:07:01.480
circles on the surface of the mesh as
opposed to draw them as geometries.

96
00:07:01.480 --> 00:07:06.207
So it's just gonna be like
we've taken this instead

97
00:07:06.207 --> 00:07:11.290
of having a thing like this is
as if we've taken a sphere, and

98
00:07:11.290 --> 00:07:14.800
we're just drawing the circles
with a marker right on the sphere.

99
00:07:14.800 --> 00:07:18.210
So that it's actually these circles
are exactly on the surface and

100
00:07:18.210 --> 00:07:19.820
they're wrapping around.

101
00:07:19.820 --> 00:07:22.220
And that's basically what we're
gonna achieve with this shader.

102
00:07:23.470 --> 00:07:25.400
So wee're getting there.

103
00:07:25.400 --> 00:07:28.130
We've got an array called points.

104
00:07:28.130 --> 00:07:29.503
We've got POINT_COUNT,

105
00:07:29.503 --> 00:07:34.140
now we're finally we've defined
the POINT_COUNT in the shader here.

106
00:07:34.140 --> 00:07:38.324
And now what we're gonna do is we're
going to define a distance, and

107
00:07:38.324 --> 00:07:43.086
we're gonna make it really big just to
start off, it doesn't really matter,

108
00:07:43.086 --> 00:07:45.565
just make it a really big number for now.

109
00:07:45.565 --> 00:07:48.829
And what we're gonna do is we're
gonna go through all of the points.

110
00:07:48.829 --> 00:07:53.991
And we're gonna say if the current
distance from the current point to

111
00:07:53.991 --> 00:07:59.956
this point is smaller than this big
number, we're gonna use that small value.

112
00:07:59.956 --> 00:08:04.148
So we're basically we're just trying
to say we have all of these points that

113
00:08:04.148 --> 00:08:06.250
are the icosahedron points.

114
00:08:06.250 --> 00:08:10.967
And now we wanna say what's
the distance from this pixels point to

115
00:08:10.967 --> 00:08:13.386
the nearest icosahedron point.

116
00:08:13.386 --> 00:08:16.200
And actually the way we're
gonna have to do that,

117
00:08:16.200 --> 00:08:19.349
before we get into this is one
more little thing is we're

118
00:08:19.349 --> 00:08:22.975
gonna have to pass down another
varying from the vertex shader.

119
00:08:22.975 --> 00:08:28.068
So we're going to say varying vec3
vPosition, and then we're gonna

120
00:08:28.068 --> 00:08:34.472
pass that down by just saying vPosition =
position, which is built in from three.js.

121
00:08:36.747 --> 00:08:40.203
And then whenever we have
a varying in the vertex shader,

122
00:08:40.203 --> 00:08:45.460
we have to copy the declaration
exactly into the fragment shader here.

123
00:08:45.460 --> 00:08:49.299
So just make sure you copy it exactly so
that exists in both places.

124
00:08:51.150 --> 00:08:54.870
And so now in our fragment
shader we have these two values.

125
00:08:54.870 --> 00:08:58.038
We have the uV coordinates
which is really useful for

126
00:08:58.038 --> 00:09:02.070
doing two dimensional stuff like
texturing and things like that,

127
00:09:02.070 --> 00:09:06.822
but what we wanna do, is we wanna actually
get three dimensional coordinate,

128
00:09:06.822 --> 00:09:11.809
the three dimensional position, the xyz
position of the pixel within this view.

129
00:09:11.809 --> 00:09:16.427
And then compare it to all the other three
dimensional coordinates of the icosahedron

130
00:09:16.427 --> 00:09:17.920
points.

131
00:09:17.920 --> 00:09:22.308
And so we're gonna say using this
vPosition we're gonna create a for loop.

132
00:09:22.308 --> 00:09:29.882
We're gonna say, for
(int i = 0); i &lt; POINT_COUNT; i++.

133
00:09:31.020 --> 00:09:34.083
And so this is how we're gonna start
to iterate through the points.

134
00:09:37.706 --> 00:09:42.499
Then we're gonna say vec3, let's say
p= points and then access it just

135
00:09:42.499 --> 00:09:46.608
like we would JavaScript with
the square bracket annotation.

136
00:09:49.400 --> 00:09:52.788
And now we have the point, and
these are all the icosahedron points, so

137
00:09:52.788 --> 00:09:55.440
we're just going through each of these.

138
00:09:55.440 --> 00:09:59.511
And we're saying what's
the distance from vPosition,

139
00:09:59.511 --> 00:10:03.844
which is the current position for
this current pixel, to p.

140
00:10:06.680 --> 00:10:13.290
And then we're gonna say,
make distance the minimum of d and dist.

141
00:10:13.290 --> 00:10:16.467
So what this line is saying,
it's saying well,

142
00:10:16.467 --> 00:10:21.040
we might already have dist but
make dist the minimum of dist and d here.

143
00:10:21.040 --> 00:10:26.295
So we just wanna do this whole
thing to basically get the minimum

144
00:10:26.295 --> 00:10:31.947
distance from the current position
to the closest polka dot point or

145
00:10:31.947 --> 00:10:34.739
the closest icosahedron point.

146
00:10:34.739 --> 00:10:37.425
And if you've done that correctly, and

147
00:10:37.425 --> 00:10:41.224
you output dist you should get
this kind of cool graphic.

148
00:10:41.224 --> 00:10:45.869
And now we're finally there, finally we
have achieved what we want to achieve.

149
00:10:47.240 --> 00:10:51.335
And just like in the earlier demo,
we can use a mask and

150
00:10:51.335 --> 00:10:54.525
we can say step with some threshold dist.

151
00:10:56.631 --> 00:10:59.341
And then I would put that
mask to the final color.

152
00:11:04.008 --> 00:11:08.473
And again just like in the earlier demo,
so

153
00:11:08.473 --> 00:11:17.172
again like in the earlier demo we can say
mask = 1- mask to invert that if you want.

154
00:11:20.028 --> 00:11:26.750
And now we have these circles which
are exactly mapped onto the sphere.

155
00:11:26.750 --> 00:11:30.011
So no matter if these
circles are rather large,

156
00:11:30.011 --> 00:11:34.995
it's not gonna look like dics just
sitting on the surface of the sphere.

157
00:11:34.995 --> 00:11:39.080
It's actually gonna look like it's
been drawn onto the material itself.

158
00:11:40.600 --> 00:11:45.609
And so just as before,
let's say we just do what we were doing

159
00:11:45.609 --> 00:11:50.128
earlier with fragColor = mix,
lets say color to white

160
00:11:50.128 --> 00:11:55.061
depending on the mask, and
then we output with fragColor.

161
00:11:59.578 --> 00:12:06.360
So we finally achieved this like
Yayoi Kusama type of sphere.

162
00:12:06.360 --> 00:12:08.870
And if you wanted to
take this a step further

163
00:12:10.660 --> 00:12:14.320
maybe what you'd start to do is start
to introduce some random colors.

164
00:12:14.320 --> 00:12:19.606
So I'd like to use a module
called riso colors,

165
00:12:19.606 --> 00:12:23.450
I made this module, it's on NPM.

166
00:12:23.450 --> 00:12:28.670
I use a lot of my own modules, and
this one here you can NPM install it,

167
00:12:28.670 --> 00:12:34.610
you can require it, you can bring it into
your code, and you can start to access

168
00:12:34.610 --> 00:12:40.662
random riso colors which are sourced from
this Wiki here, lots of nice colors.

169
00:12:40.662 --> 00:12:44.440
And this is going to work really well with
Kusama's work because her work is really

170
00:12:44.440 --> 00:12:45.930
bright, and vivid, and bold.

171
00:12:48.923 --> 00:12:56.010
You can also start to introduce
randomness in these circles.

172
00:12:56.010 --> 00:13:00.447
Maybe using some noise, passing in
a vPosition some kind of to noise, and

173
00:13:00.447 --> 00:13:03.897
then offsetting the size of
these circles based on that.

