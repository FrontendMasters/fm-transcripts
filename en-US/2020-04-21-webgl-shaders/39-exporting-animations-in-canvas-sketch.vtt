WEBVTT

1
00:00:00.430 --> 00:00:06.021
And this is more of a review for those
who've never done it in canvas-sketch,

2
00:00:06.021 --> 00:00:08.660
but just a way to export animations.

3
00:00:10.660 --> 00:00:15.140
So let's say we had this,
we're able to export PNGs.

4
00:00:15.140 --> 00:00:18.620
But let's say we wanted a very
simple animation of this spinning.

5
00:00:18.620 --> 00:00:22.969
And then we wanted to export it as
a 5 second GIF, or a 5 second MP4.

6
00:00:22.969 --> 00:00:26.546
So what we're gonna do is we're going
to set a duration in the settings.

7
00:00:28.257 --> 00:00:32.287
And the duration is going to make it so
that time goes from 0,

8
00:00:32.287 --> 00:00:36.910
all the way to the duration in seconds,
and then it resets back at 0.

9
00:00:36.910 --> 00:00:40.887
So now I'm gonna scroll down
into my render function.

10
00:00:43.392 --> 00:00:47.160
I'm gonna say mesh.rotation.y = time.

11
00:00:49.173 --> 00:00:53.926
And you'll see what will happen is
after 5 seconds, this is gonna snap and

12
00:00:53.926 --> 00:00:55.440
start again at 0.

13
00:00:55.440 --> 00:00:57.790
So this is what this duration just did,
is it makes it so

14
00:00:57.790 --> 00:01:00.835
that the loop is gonna restart
at 0 every time it hits 5.

15
00:01:04.330 --> 00:01:08.163
But instead of using time,
which we could use for animations,

16
00:01:08.163 --> 00:01:11.724
let's say we wanted this to
be a perfectly seamless loop.

17
00:01:11.724 --> 00:01:13.809
We're gonna use a value called playhead.

18
00:01:14.980 --> 00:01:19.179
Playhead is a value that goes from 0 to 1,

19
00:01:19.179 --> 00:01:23.620
depending on how far
along we are in the loop.

20
00:01:23.620 --> 00:01:25.846
And so I just made an error.

21
00:01:25.846 --> 00:01:28.913
But you have to still probably include
time if you're using it somewhere else in

22
00:01:28.913 --> 00:01:31.380
your function, like for the uniform.

23
00:01:31.380 --> 00:01:33.430
So I've just extracted both.

24
00:01:33.430 --> 00:01:37.030
So yeah, playhead goes from 0 to 1.

25
00:01:37.030 --> 00:01:44.020
And by multiplying this playhead by, let's
say math.PI times 2, all of a sudden,

26
00:01:44.020 --> 00:01:47.970
what we're gonna do is we're gonna
create a perfectly seamless rotation.

27
00:01:47.970 --> 00:01:51.720
Because by the time it hits a full circle,

28
00:01:51.720 --> 00:01:54.410
the end of the loop is
going to have been hit.

29
00:01:54.410 --> 00:01:56.633
And the start of the loop
will begin again.

30
00:01:56.633 --> 00:02:00.645
And so now we have this seamless rotation,
and we can slow it down by slowing

31
00:02:00.645 --> 00:02:04.040
down the duration, or
by increasing the duration of the loop.

32
00:02:05.500 --> 00:02:08.870
So a 10 second loop, or
a 2 second, or 3 second.

33
00:02:08.870 --> 00:02:11.260
So how do I finally export this as an MP4?

34
00:02:12.960 --> 00:02:17.772
So let's say we wanna
export this as a MP4,

35
00:02:17.772 --> 00:02:23.764
that would be maybe
a 1080 by 1080 pixel MP4.

36
00:02:23.764 --> 00:02:26.508
I'm gonna set the dimensions to 1080.

37
00:02:26.508 --> 00:02:33.614
And then what I need to do is first,
I need to install a little utility.

38
00:02:33.614 --> 00:02:41.205
And it's outlined in the docs in the repo,
in the workshop repo.

39
00:02:41.205 --> 00:02:47.277
If we scroll down to Intro
to canvas-sketch, And

40
00:02:47.277 --> 00:02:49.615
we look at the Exporting MP4 and GIF.

41
00:02:51.392 --> 00:02:56.653
So the default wave of exporting
frames is to export each frame

42
00:02:56.653 --> 00:03:02.060
as it renders as a different
PNG into a Download folder.

43
00:03:02.060 --> 00:03:04.171
Now, you're not gonna wanna copy and
paste what I'm doing here.

44
00:03:04.171 --> 00:03:06.650
You're not gonna wanna do this, but
I'll just show you how it looks.

45
00:03:07.780 --> 00:03:10.230
If I hit Cmd+S,
that exports a single image.

46
00:03:11.350 --> 00:03:16.640
If I hit Cmd+Shift+S, or
Ctrl+Shift+S, that begins

47
00:03:16.640 --> 00:03:22.370
exporting each frame of this
animation into my Downloads folder.

48
00:03:23.560 --> 00:03:24.983
And so you don't wanna do that,

49
00:03:24.983 --> 00:03:27.634
because it's just gonna
populate your Downloads folder.

50
00:03:27.634 --> 00:03:29.220
So I'm gonna delete all these for now.

51
00:03:31.750 --> 00:03:35.240
But you could use this Cmd when
you're creating the server.

52
00:03:35.240 --> 00:03:39.871
So you could kill the server and
recreate it, specify an output folder.

53
00:03:39.871 --> 00:03:43.864
And then that will save all of these
frames into the Output folder, and

54
00:03:43.864 --> 00:03:48.270
then you can compile that into
an MP4 with maybe some software.

55
00:03:48.270 --> 00:03:49.270
But we're gonna make it easier.

56
00:03:49.270 --> 00:03:54.290
And this is a new feature of canvas-sketch
that's been included more recently.

57
00:03:54.290 --> 00:03:56.500
So we're just going to copy and
paste this line.

58
00:03:56.500 --> 00:03:59.050
And this is going to
install FFMPEG globally for

59
00:03:59.050 --> 00:04:02.950
us, a version that's gonna work
nicely with canvas-sketch.

60
00:04:02.950 --> 00:04:06.295
So you pretty much just copy this line in.

61
00:04:07.927 --> 00:04:09.110
And once it installs,

62
00:04:09.110 --> 00:04:13.030
then we're going to go to our
server that's running our sketch.

63
00:04:13.030 --> 00:04:17.738
So find whichever one is running
the same server here, the same thing.

64
00:04:17.738 --> 00:04:20.240
We're gonna kill it, and
we're gonna start again.

65
00:04:20.240 --> 00:04:23.616
But this time,
we're gonna pass this argument stream.

66
00:04:23.616 --> 00:04:28.474
You're gonna say canvas-sketch
shader.js --stream.

67
00:04:28.474 --> 00:04:32.460
What this is going to do is it's
going to use FFMPEG to stream

68
00:04:32.460 --> 00:04:35.900
all these these frames
directly into an MP4 file.

69
00:04:35.900 --> 00:04:39.630
So now I'm gonna reload the page and
hit Cmd+Shift+S.

70
00:04:39.630 --> 00:04:42.020
You'll notice it's saying
streaming into MP4.

71
00:04:44.277 --> 00:04:46.039
And it might take a little while.

72
00:04:46.039 --> 00:04:49.720
It's a 10 second loop, so
it has to render each of these frames.

73
00:04:49.720 --> 00:04:52.500
But eventually, in our Downloads,

74
00:04:52.500 --> 00:04:55.760
now we have an MP4 file,
which loops perfectly seamlessly.

75
00:04:57.540 --> 00:05:02.540
We can specify things like frame
rate by going into our settings,

76
00:05:02.540 --> 00:05:05.460
and saying maybe the frame
rate is gonna be 60.

77
00:05:05.460 --> 00:05:10.589
Because before, it was using,
let's say the default might be 30.

78
00:05:10.589 --> 00:05:11.958
I can't remember if it's 25 or 30.

79
00:05:14.452 --> 00:05:18.000
And so now the frame rate's 60,
so there's gonna be more frames.

80
00:05:18.000 --> 00:05:20.670
That's just something to keep in mind.

81
00:05:20.670 --> 00:05:23.750
If you hit Cmd+Shift+S, well,
it's running while it's recording.

82
00:05:23.750 --> 00:05:24.920
It's just gonna stop recording.

83
00:05:26.440 --> 00:05:27.997
So I'll just do a quick 4 second loop.

84
00:05:33.108 --> 00:05:36.972
So for MP4,
if you wanna create a high resolution MP4,

85
00:05:36.972 --> 00:05:42.830
you would do something like this,
FPS is 60, maybe 1080 P dimensions.

86
00:05:42.830 --> 00:05:49.450
So now I've created this
very fluid 60 FPS animation.

87
00:05:49.450 --> 00:05:51.170
Compare that to this,
which is not as fluid,

88
00:05:51.170 --> 00:05:53.590
because this is using probably 25 or
30 frames per second.

89
00:05:56.460 --> 00:05:58.208
And then one little thing would be GIFs.

90
00:05:58.208 --> 00:06:02.151
So if you're doing a GIF instead of doing
1080, you might wanna use lower numbers.

91
00:06:02.151 --> 00:06:06.892
Otherwise, this is gonna be a huge 20
megabyte GIF, so you might wanna use 24,

92
00:06:06.892 --> 00:06:08.930
25, or 30 for FPS.

93
00:06:08.930 --> 00:06:12.660
And then dimensions might be 512 by 512,
or smaller, bigger,

94
00:06:12.660 --> 00:06:14.410
depending on what you wanna do.

95
00:06:14.410 --> 00:06:17.292
And if you wanna make GIFs
with this stream approach,

96
00:06:17.292 --> 00:06:19.994
you'll just kill the server,
do the same thing.

97
00:06:19.994 --> 00:06:22.061
But pass in stream = GIF, and

98
00:06:22.061 --> 00:06:26.300
that's gonna stream it as a GIF
file instead of an MP4 file.

99
00:06:27.560 --> 00:06:32.460
So now when I hit Cmd+Shift+S,
I'll be given a GIF file.

100
00:06:32.460 --> 00:06:37.460
And so on Twitter,
I often use GIF for exporting and

101
00:06:37.460 --> 00:06:42.190
for sharing these kinda things,
cuz on Twitter, it loops very nicely.

102
00:06:42.190 --> 00:06:44.520
You get true colors, and that kinda thing.

103
00:06:44.520 --> 00:06:47.120
But on Instagram,
you can't really easily share GIFs.

104
00:06:47.120 --> 00:06:50.360
I don't think it's possible to just
drag and drop a GIF into Instagram, so

105
00:06:50.360 --> 00:06:52.440
you're gonna have to use MP4.

106
00:06:52.440 --> 00:06:57.250
And before it has some color loss, because
it's not a totally lossless color format,

107
00:06:57.250 --> 00:06:58.600
but that's okay,
it still looks pretty good.

108
00:06:59.608 --> 00:07:02.520
And that's kinda the last little thing,
which is, again, just a bit of a review

109
00:07:02.520 --> 00:07:05.170
around canvas-sketch, but
it's a nice, helpful thing.

