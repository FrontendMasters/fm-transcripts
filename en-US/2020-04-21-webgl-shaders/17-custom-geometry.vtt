WEBVTT

1
00:00:00.000 --> 00:00:03.360
What we're gonna be now chatting a bit
about, and I'll chat about it sort of

2
00:00:03.360 --> 00:00:06.550
through the context of glitch for
these couple examples,

3
00:00:06.550 --> 00:00:10.710
is understanding a bit more about geometry
and how these scenes are made up.

4
00:00:10.710 --> 00:00:14.160
Cuz eventually, we're gonna wanna get into
to vertex shaders and fragment shaders.

5
00:00:14.160 --> 00:00:18.000
But before we can understand a vertex
shader, we have to understand a little bit

6
00:00:18.000 --> 00:00:21.700
more about how the pipeline works and
how vertices are declared.

7
00:00:21.700 --> 00:00:25.095
And so if we go into this 3 demo geometry,

8
00:00:28.073 --> 00:00:32.276
And we can just click show and
show the output next to our code.

9
00:00:34.598 --> 00:00:37.669
And so the sort of framework of
this sketch is very much just

10
00:00:37.669 --> 00:00:39.179
the same as our other demos.

11
00:00:41.630 --> 00:00:43.420
We've got perspective camera,

12
00:00:43.420 --> 00:00:46.650
orbit controls,
we have grid helper here as well.

13
00:00:47.660 --> 00:00:50.276
And now we're getting into
creating a custom geometry.

14
00:00:50.276 --> 00:00:53.252
And so this is a very simple,
this is like the building block for

15
00:00:53.252 --> 00:00:55.570
everything we're gonna
do today is a triangle.

16
00:00:55.570 --> 00:00:57.690
And so how would we do this?

17
00:00:57.690 --> 00:01:01.120
Maybe I'll edit this in a remix version so
that I won't destroy or

18
00:01:01.120 --> 00:01:04.748
I won't mess up the original so
I'm gonna just remix this project.

19
00:01:04.748 --> 00:01:08.900
So I'm gonna start by removing
some of this stuff so

20
00:01:08.900 --> 00:01:11.090
that we can start from
a sort of clean slate and

21
00:01:11.090 --> 00:01:15.170
sort of build this up again from
scratch and walk it through.

22
00:01:15.170 --> 00:01:18.432
So let's say I wanted to draw something
more interesting than just a sphere

23
00:01:18.432 --> 00:01:21.457
because right now we're just
working with the built-in geometry.

24
00:01:21.457 --> 00:01:24.737
And so,
we can't get very far with some of that,

25
00:01:24.737 --> 00:01:28.160
cuz we're just working with spheres or
boxes.

26
00:01:28.160 --> 00:01:31.564
And we wanna start to understand, how do
we actually manipulate these shapes and

27
00:01:31.564 --> 00:01:34.240
how do we eventually
produce our own geometries?

28
00:01:34.240 --> 00:01:37.820
So the first thing we're gonna do is
we're gonna say const geometry = new

29
00:01:37.820 --> 00:01:43.830
THREE.Geometry, and the geometry interface
allows us to specify vertices, and

30
00:01:43.830 --> 00:01:49.800
faces an end up actually creating these
shapes that are made up of triangles.

31
00:01:49.800 --> 00:01:52.605
And so remember,
a quad is made up of two triangles.

32
00:01:52.605 --> 00:01:54.600
A sphere is made up of many,
many triangles.

33
00:01:55.700 --> 00:01:58.340
And so in order to create,
let's say a triangle,

34
00:01:58.340 --> 00:02:03.690
we're gonna have to first define
a list of vertices which is an array.

35
00:02:03.690 --> 00:02:08.779
And each of these vertices
is gonna be a vector THREE.

36
00:02:08.779 --> 00:02:13.841
And so we're gonna say maybe the triangle

37
00:02:13.841 --> 00:02:17.889
is going from -0.5 on the x and

38
00:02:17.889 --> 00:02:22.660
0.5 on the y, and 0 and the z axis.

39
00:02:22.660 --> 00:02:28.380
And so quite often in WebGL,
the y axis when we go up,

40
00:02:28.380 --> 00:02:30.930
it's actually positive, and
when we go down it's negative.

41
00:02:30.930 --> 00:02:35.440
So, it's sort of inverted to what we are
familiar with, with maybe 2D rendering or

42
00:02:35.440 --> 00:02:39.140
the screen itself,
going up is actually positive quite often,

43
00:02:39.140 --> 00:02:41.230
going down is negative.

44
00:02:42.390 --> 00:02:44.240
And then, so
that will be the first vertex.

45
00:02:44.240 --> 00:02:51.220
Another vertex will be, let's say if
we think about this as the top left,

46
00:02:51.220 --> 00:02:57.625
maybe we can then place the bottom
right so it'd be 0.5 along the x,

47
00:02:57.625 --> 00:03:03.920
-0.5 on the y and 0.

48
00:03:03.920 --> 00:03:07.770
And by the way,
I usually don't memorize this stuff, and

49
00:03:07.770 --> 00:03:10.390
you probably will never
really have to write this.

50
00:03:10.390 --> 00:03:11.800
I mean,
you might have to write it occasionally,

51
00:03:11.800 --> 00:03:15.370
but this is not something that you
need to really write very often.

52
00:03:15.370 --> 00:03:19.080
And so it's something that I always forget
and I'm probably gonna make a mistake

53
00:03:19.080 --> 00:03:22.550
here, but this is more to show
how it works under the hood.

54
00:03:22.550 --> 00:03:25.530
So that you understand a little bit
more about how it all comes together,

55
00:03:25.530 --> 00:03:28.610
rather than something that you're actually
gonna be using in your day to day.

56
00:03:28.610 --> 00:03:31.510
You're rarely gonna need to
write triangles out manually.

57
00:03:31.510 --> 00:03:33.510
But it's good to know.

58
00:03:33.510 --> 00:03:35.420
So this third vertex of the triangle,

59
00:03:37.620 --> 00:03:41.160
let's say would be the bottom
left triangle vertex.

60
00:03:41.160 --> 00:03:46.257
So that would be -0.5 on the x,and

61
00:03:46.257 --> 00:03:52.959
it would be -0.5 on the y,
I think and then 0.

62
00:03:52.959 --> 00:03:54.920
And so we're not gonna see anything yet.

63
00:03:54.920 --> 00:03:59.590
And that's because we haven't
defined the order of these verses.

64
00:03:59.590 --> 00:04:04.620
And so right now we have a set of vector
threes, but geometry this geometry

65
00:04:04.620 --> 00:04:09.700
class also needs to know how do
we connect the dots basically.

66
00:04:09.700 --> 00:04:13.790
So if we imagine these
vertices on a piece of paper,

67
00:04:13.790 --> 00:04:17.530
just like we're doing a connected
dots kind of game for kids.

68
00:04:17.530 --> 00:04:21.040
Now we want to start with one
of the points, draw a line

69
00:04:21.040 --> 00:04:24.530
connected to the other one, and then
draw a line connected to the other one,

70
00:04:24.530 --> 00:04:28.030
and eventually close that
path to create a triangle.

71
00:04:28.030 --> 00:04:32.470
And so in order to do that
we're gonna say geometry.faces.

72
00:04:32.470 --> 00:04:38.140
We're gonna specify a new face and
so a face is a face three object.

73
00:04:39.740 --> 00:04:43.390
And face three is just
a face that has three

74
00:04:43.390 --> 00:04:46.180
vertices that's kind of what
it's saying or three indices.

75
00:04:46.180 --> 00:04:50.081
And we specify here the index
into the vertex array,

76
00:04:50.081 --> 00:04:52.482
which is a bit of a complex idea.

77
00:04:55.135 --> 00:04:57.713
And already I seem to have made a mistake,

78
00:04:57.713 --> 00:05:01.113
which is classic with doing
this kind of vertex stuff.

79
00:05:12.474 --> 00:05:16.907
It might be in the way I have
placed these xyz coordinates, and

80
00:05:16.907 --> 00:05:21.440
this is just to show how little
I actually write this manually.

81
00:05:23.040 --> 00:05:27.240
But I haven't created a mesh obviously.

82
00:05:27.240 --> 00:05:31.470
Well, this is probably correct so far,
but I just haven't created a mesh.

83
00:05:31.470 --> 00:05:34.110
So I've got a geometry but
I'm not wrapping it in a mesh,

84
00:05:34.110 --> 00:05:37.960
I'm not wrapping it with a material and
I haven't added it to the scene.

85
00:05:37.960 --> 00:05:39.690
So I have to do those things.

86
00:05:39.690 --> 00:05:43.840
So now we've just created a geometry
as a replacement maybe towards here

87
00:05:43.840 --> 00:05:48.680
I'm just gonna create a very simple mesh,
THREE.Mesh geometry and

88
00:05:48.680 --> 00:05:52.130
I'll pass in here,
maybe a mesh basic material.

89
00:05:53.680 --> 00:05:56.280
And maybe this will just be the color
red or something like that.

90
00:05:59.740 --> 00:06:02.140
Almost there,
haven't added to the scene yet.

91
00:06:02.140 --> 00:06:03.140
So, I'm gonna add that now.

92
00:06:05.560 --> 00:06:07.380
And now we have a red triangle.

93
00:06:08.740 --> 00:06:12.010
One of the things you might
notice is as we spin around,

94
00:06:12.010 --> 00:06:13.930
we're gonna sort of lose the triangle.

95
00:06:13.930 --> 00:06:18.500
And this is an important thing
with three JS and with webGL and

96
00:06:18.500 --> 00:06:22.230
just graphics programming in
general is that generally speaking,

97
00:06:22.230 --> 00:06:24.600
only one side of a triangle is rendered.

98
00:06:24.600 --> 00:06:26.430
And that's for performance reasons.

99
00:06:26.430 --> 00:06:27.040
Because usually,

100
00:06:27.040 --> 00:06:31.050
when we have a sphere, we're only
seeing the outside of the sphere.

101
00:06:31.050 --> 00:06:35.460
So we're only seeing one side of those
triangles that defines the sphere, but

102
00:06:35.460 --> 00:06:39.010
in this case, we actually are seeing both
sides, we wanna see both sides at least.

103
00:06:39.010 --> 00:06:43.670
And so in the material,
we can say side is THREE.DoubleSides, so

104
00:06:43.670 --> 00:06:48.300
now it's a double-sided material,
it will render both of these sides.

105
00:06:48.300 --> 00:06:51.120
The performance implications
are very subtle.

106
00:06:51.120 --> 00:06:55.540
It's really only a big deal if you have
hundreds of thousands of triangles.

107
00:06:55.540 --> 00:06:59.810
But this is why it's generally
something that's default only on

108
00:06:59.810 --> 00:07:03.790
the outside because typically speaking,
we're not rendering the inside faces.

109
00:07:04.970 --> 00:07:06.100
And so now we have this,

110
00:07:06.100 --> 00:07:09.790
we could also try different materials
we could try mesh normal material.

111
00:07:11.790 --> 00:07:14.840
And all of a sudden, it's gonna be black.

112
00:07:14.840 --> 00:07:17.930
And you're gonna wonder,
well, that's weird.

113
00:07:17.930 --> 00:07:21.980
It works for spheres,
why does it not work for custom geometry?

114
00:07:21.980 --> 00:07:25.760
There's one other little thing we
have to do, and that's we have to

115
00:07:25.760 --> 00:07:29.980
automatically compute all the normals,
quote unquote for the mesh.

116
00:07:29.980 --> 00:07:38.210
So normals is this information that's held
within each vertex that tells the system

117
00:07:38.210 --> 00:07:42.910
where the face, or the vertex itself,
is pointing at, where it's in the world.

118
00:07:42.910 --> 00:07:46.090
That's kind of a simplified
explanation of normals.

119
00:07:46.090 --> 00:07:46.860
We don't need to get too,

120
00:07:46.860 --> 00:07:49.860
too far into trying to wrap our
heads around normals right now.

121
00:07:49.860 --> 00:07:54.320
But you will need to have this line
that is compute vertex normals.

122
00:07:55.660 --> 00:07:57.150
And there's other types
of normals as well.

123
00:07:57.150 --> 00:08:00.710
There's face normals and
geometries interface.

124
00:08:00.710 --> 00:08:04.750
The class here allows us
to compute face normals,

125
00:08:04.750 --> 00:08:07.040
but we don't need to worry too
much about that right now.

126
00:08:07.040 --> 00:08:09.560
We just do compute for text normals.

127
00:08:09.560 --> 00:08:14.386
And now we've built a geometry
that's just a single triangle.

128
00:08:14.386 --> 00:08:18.449
And if we wanted to turn this into
a quad well we could take this and

129
00:08:18.449 --> 00:08:21.762
do the same thing to build
up the opposite triangle,

130
00:08:21.762 --> 00:08:25.820
that would be placed right
next to our acute triangle.

131
00:08:25.820 --> 00:08:31.840
We could have three more vertices so like,
bottom left, top right, and then top left.

132
00:08:31.840 --> 00:08:35.550
And then together those things
together would make up a quad.

133
00:08:35.550 --> 00:08:40.280
But instead of doing another three
vertices, the whole point of doing faces

134
00:08:40.280 --> 00:08:45.930
is that we can reuse vertices
to create a more complex shape.

135
00:08:45.930 --> 00:08:48.390
So I'm just gonna add
one more vertex here and

136
00:08:48.390 --> 00:08:51.180
that's the remaining
one to create our quad.

137
00:08:51.180 --> 00:08:52.560
So it should be 0.5, 0.5,

138
00:08:52.560 --> 00:08:56.540
which is the only other coordinate
that I haven't really touched on.

139
00:08:57.870 --> 00:09:02.440
And then here, I'm gonna just try and
figure out, okay, based on this,

140
00:09:02.440 --> 00:09:05.110
what are the indices into this array?

141
00:09:05.110 --> 00:09:11.060
So right now we're saying 0, 1, 2, so
this is index 0, index 1, and index 2.

142
00:09:11.060 --> 00:09:13.020
That makes up the first triangle.

143
00:09:13.020 --> 00:09:16.090
The second triangle might be 0, 2, 3 or

144
00:09:18.010 --> 00:09:22.570
something like that and this is sort
of where it gets a bit complicated.

145
00:09:23.670 --> 00:09:25.050
It's because you have to sorta think,
okay,

146
00:09:25.050 --> 00:09:28.290
based on the coordinates,
how do I draw these lines?

147
00:09:28.290 --> 00:09:30.112
So you might say 0, 2, 3.

148
00:09:30.112 --> 00:09:33.679
But this is, again, not something that
you're gonna be doing on a regular basis.

149
00:09:35.500 --> 00:09:40.840
Or no it might be let's see,
so we have the top left is 0.

150
00:09:40.840 --> 00:09:45.521
The one is the top, the bottom right, so

151
00:09:45.521 --> 00:09:50.361
we're gonna say from 0 to the top right.

152
00:09:50.361 --> 00:09:55.790
So it'd be 0, 3, 2, not even.

153
00:09:55.790 --> 00:09:58.290
So this is where it gets, [LAUGH] messy.

154
00:09:58.290 --> 00:10:04.200
Honestly, sometimes when I'm doing this, I
will just choose randomly until it works.

155
00:10:04.200 --> 00:10:05.400
And it's worked for me so far.

156
00:10:05.400 --> 00:10:08.675
So, like that technique
is sometimes acceptable,

157
00:10:08.675 --> 00:10:11.449
[LAUGH] and that works perfect.

158
00:10:13.270 --> 00:10:17.180
There's actually, once you put it down and
think about this and

159
00:10:17.180 --> 00:10:20.560
you actually were to maybe sketch
these vertices out on paper.

160
00:10:20.560 --> 00:10:22.780
You could actually get
the correct numbers but,

161
00:10:22.780 --> 00:10:26.760
sometimes when I'm just hacking things
together, I'll just hack it together.

162
00:10:26.760 --> 00:10:29.410
Because ultimately we are just
trying to show something.

163
00:10:29.410 --> 00:10:32.720
But again, like I am saying we
are not really doing this typically.

164
00:10:32.720 --> 00:10:37.300
More often we're just gonna
use the 3 plane geometry,

165
00:10:37.300 --> 00:10:40.540
rather than actually
defining things manually.

166
00:10:40.540 --> 00:10:44.590
And the nice thing is if we create
a plane geometry and we subdivide it,

167
00:10:44.590 --> 00:10:49.284
then we can do plane geometry dot
vertices, or plane geometry dot faces.

168
00:10:49.284 --> 00:10:52.660
And for example, if we had,
let's say we had a grid,

169
00:10:52.660 --> 00:10:55.470
and we wanted to randomly
take some of the faces out.

170
00:10:55.470 --> 00:10:59.510
We could just do geometry dot faces and
then maybe

171
00:10:59.510 --> 00:11:04.350
faces is equal to some filter function,
filter out some of those faces randomly.

172
00:11:04.350 --> 00:11:08.791
And all of a sudden we have a grid that
has some randomly faces taken out of it.

