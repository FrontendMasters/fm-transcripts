WEBVTT

1
00:00:00.140 --> 00:00:02.902
In order to sort of walk through shaders,
I'm gonna go through the guide book again.

2
00:00:02.902 --> 00:00:07.678
There'll be some interactive demos and
we'll try and break it down there.

3
00:00:07.678 --> 00:00:10.980
So if you want,
you can open up the repo and follow along.

4
00:00:12.090 --> 00:00:15.572
It'll just be in the guide book
in the section on shaders.

5
00:00:15.572 --> 00:00:19.400
You can click the menu item and
just go straight to shaders.

6
00:00:19.400 --> 00:00:23.490
So this here is a shader.

7
00:00:23.490 --> 00:00:25.230
This is an example of a fragment shader.

8
00:00:26.590 --> 00:00:29.310
It's an example of a full
screen fragment shader which

9
00:00:29.310 --> 00:00:32.380
covers the entire canvas that we're
drawing this little box here.

10
00:00:33.540 --> 00:00:37.480
And so this is the way that
many people understand shaders.

11
00:00:37.480 --> 00:00:41.243
But we're gonna see how we can apply
shaders not just to a square like this or

12
00:00:41.243 --> 00:00:41.977
a rectangle.

13
00:00:41.977 --> 00:00:44.842
But we can actually
apply them to 3D meshes.

14
00:00:44.842 --> 00:00:46.219
We can manipulate a sphere and

15
00:00:46.219 --> 00:00:49.090
manipulate the surface of
the sphere with a fragment shader.

16
00:00:50.180 --> 00:00:50.880
Fragment shaders,

17
00:00:50.880 --> 00:00:55.080
they typically always start with
this syntax precision highp float.

18
00:00:55.080 --> 00:00:58.629
This syntax here is saying, for
all my floating point numbers,

19
00:00:58.629 --> 00:01:00.742
I want them to be very high precision.

20
00:01:00.742 --> 00:01:03.225
I want them to be highly
precise floating point numbers.

21
00:01:03.225 --> 00:01:05.170
It's just a standard
thing that you copy and

22
00:01:05.170 --> 00:01:07.070
paste into every single fragment shader.

23
00:01:07.070 --> 00:01:12.290
And then we have some
definition of uniforms.

24
00:01:12.290 --> 00:01:15.928
And so I'll talk about
uniforms in a second, but for

25
00:01:15.928 --> 00:01:19.660
now you can just look at these types,
vec2, float.

26
00:01:19.660 --> 00:01:23.314
There's other things like there
would be something like int.

27
00:01:23.314 --> 00:01:27.738
int would be an integer like 1, 2, 3, 4.

28
00:01:27.738 --> 00:01:32.790
And so you're starting to see that
the syntax of GLSL is very highly tight.

29
00:01:32.790 --> 00:01:36.790
And so we have to whenever we're declaring
a variable, we have to declare the type

30
00:01:36.790 --> 00:01:42.830
that variable is, whether it's a floar, or
an int, or a bool, or vec2, vec3, vec4.

31
00:01:42.830 --> 00:01:46.130
Vec2, vec3,
vec4 is a bit like vector 2, vector 3,

32
00:01:46.130 --> 00:01:49.270
vector 4 which we've been doing
this morning with Three.js.

33
00:01:49.270 --> 00:01:52.950
It's a little similar, it's something
that holds x, y, z components.

34
00:01:54.490 --> 00:01:57.840
And so
then every shader also has a void main.

35
00:01:57.840 --> 00:02:02.180
So it has this function called main and
the function doesn't return anything.

36
00:02:02.180 --> 00:02:06.710
And in GLSL, when you have a function that
doesn't return anything, you say void.

37
00:02:06.710 --> 00:02:08.383
If the function returned to float,

38
00:02:08.383 --> 00:02:10.735
you have to say that
the function returns a float.

39
00:02:10.735 --> 00:02:14.755
And you'll actually notice if you
write this, it's gonna give you

40
00:02:14.755 --> 00:02:19.143
an error because it's now saying
the main function can't return value.

41
00:02:19.143 --> 00:02:21.996
So it's gonna give you
errors pretty quickly.

42
00:02:21.996 --> 00:02:23.568
It's not as forgiving as JavaScript.

43
00:02:23.568 --> 00:02:26.410
It has to be very exact.

44
00:02:26.410 --> 00:02:29.390
If you forget a semicolon,
it's gonna give you an error.

45
00:02:29.390 --> 00:02:37.909
Another annoying thing is if you don't put
a decimal inside of the number sometimes.

46
00:02:37.909 --> 00:02:41.277
Right here it's working but
sometimes you'll be working locally and

47
00:02:41.277 --> 00:02:43.452
you'll be working in a different computer.

48
00:02:43.452 --> 00:02:45.478
And sometimes just
forgetting a decimal and

49
00:02:45.478 --> 00:02:49.270
a floating point value will give you an
error and that's kind of annoying as well.

50
00:02:49.270 --> 00:02:55.250
Because if I took the decimal place
out of, let's say, this 2.0 here.

51
00:02:55.250 --> 00:02:59.780
Instead of writing 2.0 I wrote 2, in some
compilers, depending on the computer,

52
00:02:59.780 --> 00:03:01.380
depending on the GPU and

53
00:03:01.380 --> 00:03:06.970
other things, this might get considered
as an integer instead of as a float.

54
00:03:06.970 --> 00:03:09.890
So that's just something to be mindful
of is that we're always gonna do

55
00:03:09.890 --> 00:03:11.068
decimal values for floats.

56
00:03:11.068 --> 00:03:15.852
And so inside of our main function,
we have some other lines.

57
00:03:15.852 --> 00:03:18.655
We have this thing vec2 uv.

58
00:03:18.655 --> 00:03:23.209
So that's like declaring, it's like we
said like there var uv is equal to, or

59
00:03:23.209 --> 00:03:24.460
const uv is equal to.

60
00:03:24.460 --> 00:03:28.792
We've just declared the actual type
that's associated with this variable uv.

61
00:03:28.792 --> 00:03:33.143
And then another thing you might
notice is that we're able to do

62
00:03:33.143 --> 00:03:37.261
operations like multiplication,
division, addition.

63
00:03:37.261 --> 00:03:40.460
We're able to do that across x,
y, z all together.

64
00:03:40.460 --> 00:03:45.020
So here we're saying take this variable,
which is

65
00:03:45.020 --> 00:03:49.000
some thing called gl_FragCoord, which
I'll explain a little bit later, maybe.

66
00:03:49.000 --> 00:03:52.450
But we're taking this
variable which has xy, and

67
00:03:52.450 --> 00:03:56.450
we're dividing it by a resolution, which
is a vec2 defined up here at the top.

68
00:03:57.480 --> 00:03:59.232
And the resolution also has an xy.

69
00:03:59.232 --> 00:04:03.150
And so something you'll notice is
that it's not just saying okay,

70
00:04:03.150 --> 00:04:07.563
I'm gonna do x divided by x, and then y
divided by y, and then z divided by y.

71
00:04:07.563 --> 00:04:11.770
But you can actually
just do the components.

72
00:04:11.770 --> 00:04:14.850
So xy divided by the other thing xy.

73
00:04:14.850 --> 00:04:16.791
So it's basically just a syntax thing.

74
00:04:16.791 --> 00:04:21.547
You can start to do multiplication, and
division, and operations on all components

75
00:04:21.547 --> 00:04:24.660
within a vector,
as opposed to doing them one at a time.

76
00:04:26.270 --> 00:04:29.220
So yeah, this is just like I was saying,

77
00:04:29.220 --> 00:04:31.910
it's just like an example
of a fragment shader.

78
00:04:31.910 --> 00:04:34.340
It's sometimes called a pixel shader.

79
00:04:34.340 --> 00:04:37.360
So fragment shader and pixel shader
are kind of interchangeable for

80
00:04:37.360 --> 00:04:38.310
most of our purposes.

81
00:04:38.310 --> 00:04:40.450
Let's just consider them the same thing.

82
00:04:40.450 --> 00:04:44.759
And the reason it's called a pixel shader
is because this type of shader deals with

83
00:04:44.759 --> 00:04:45.265
pixels.

84
00:04:45.265 --> 00:04:50.457
And so here the whole purpose of this
piece of code, the entire purpose

85
00:04:50.457 --> 00:04:56.178
is just to say, what is the color of each
of the pixels within this rectangle?

86
00:04:56.178 --> 00:04:58.771
And so here I've got a rectangle or
a quad,

87
00:04:58.771 --> 00:05:02.200
you might call it an OpenGL or WebGL land.

88
00:05:02.200 --> 00:05:08.283
And I'm just measuring this,
it's 530 pixels by around 500 pixels.

89
00:05:08.283 --> 00:05:11.893
So it's 530 pixels wide by
around 500 pixels high.

90
00:05:11.893 --> 00:05:15.652
And so that means we have 530 * 500.

91
00:05:15.652 --> 00:05:20.542
That means this square is drawing 265,000,
well,

92
00:05:20.542 --> 00:05:27.505
265k pixels in this square and remember,
this is being done 60 times a second.

93
00:05:27.505 --> 00:05:33.020
So it's doing 265,000
pixels 60 times a second.

94
00:05:33.020 --> 00:05:37.100
And not only that, but because I'm
on a retina display, I'm on a Mac,

95
00:05:37.100 --> 00:05:39.289
it's actually a pixel density of 2.

96
00:05:39.289 --> 00:05:40.927
And so it's multiplied that by 2.

97
00:05:40.927 --> 00:05:46.460
That's how many pixels it's drawing
every single frame in the computer.

98
00:05:46.460 --> 00:05:47.369
And it's a lot of pixels.

99
00:05:47.369 --> 00:05:48.727
It's like really, really fast.

100
00:05:48.727 --> 00:05:53.659
It's crazy how fast these programs
are running because it's drawing

101
00:05:53.659 --> 00:05:57.010
these every second,
31 million times or so.

102
00:05:58.360 --> 00:06:01.180
And so the reason it's so fast and
this is sort of something.

103
00:06:02.470 --> 00:06:06.870
This is the the big thing that makes
writing shaders different than writing

104
00:06:06.870 --> 00:06:08.410
any other type of code.

105
00:06:08.410 --> 00:06:11.500
But the reason it's so
fast is that it's parallel.

106
00:06:11.500 --> 00:06:16.264
And so the way it works is we say,
here's the shader code,

107
00:06:16.264 --> 00:06:19.968
apply it to every single
pixel on the square.

108
00:06:19.968 --> 00:06:25.736
And apply it to every single pixel in
this square exactly in parallel time.

109
00:06:25.736 --> 00:06:30.400
So each of these pixels is being drawn
at the exact same moment, every frame.

110
00:06:31.470 --> 00:06:34.360
And so it's not going by one by one pixel.

111
00:06:34.360 --> 00:06:38.930
It's not going from the top left and
drawing each individual pixel one by one.

112
00:06:38.930 --> 00:06:42.705
But instead, the GPU is saying,
okay, I have this code.

113
00:06:42.705 --> 00:06:46.963
I'm gonna run this code across every
single pixel all at once on this square,

114
00:06:46.963 --> 00:06:49.270
and immediately the image will be drawn.

115
00:06:50.510 --> 00:06:55.800
And so because it's parallel, it means
we can't access neighbouring pixels.

116
00:06:55.800 --> 00:06:59.916
So this pixel down here,
somewhere in here, we can't say,

117
00:06:59.916 --> 00:07:04.454
well, I wanna make this pixel blue
if this pixel up here is yellow.

118
00:07:04.454 --> 00:07:08.457
I can't make those kind of conditional
statements like I can with JavaScript,

119
00:07:08.457 --> 00:07:12.950
because this pixel here is being drawn at
the exact same time as this pixel here.

120
00:07:12.950 --> 00:07:20.088
And so they don't know which one is,
they don't know where their neighbors are.

121
00:07:20.088 --> 00:07:23.745
They don't know anything about what the
pixels around them are gonna look like,

122
00:07:23.745 --> 00:07:26.620
or what the pixels up in the top
left corner are gonna look like.

123
00:07:26.620 --> 00:07:29.530
So this is just to say
because it's parallel,

124
00:07:29.530 --> 00:07:31.260
we have to sort of shift our mindset.

125
00:07:31.260 --> 00:07:32.982
And it's a huge paradigm shift.

126
00:07:32.982 --> 00:07:37.896
We're switching from typical JavaScript
rendering to thinking just in terms of

127
00:07:37.896 --> 00:07:41.304
single individual pixels,
or in the case of vertices.

128
00:07:41.304 --> 00:07:43.156
We're gonna talk about single vertices.

129
00:07:43.156 --> 00:07:48.710
Okay, so that's me trying to explain
the basics of the fragment shader.

130
00:07:50.230 --> 00:07:52.300
And again, here's some of the syntax.

131
00:07:52.300 --> 00:07:58.357
This little cheat sheet of syntax also
exists in the repo, in the guides folder.

132
00:07:58.357 --> 00:08:01.661
So if you're wanting a bit of a refresher,
you can just pop that open.

133
00:08:01.661 --> 00:08:06.490
Like I was saying, there's float,
there's vec, there's int, there's bool.

134
00:08:06.490 --> 00:08:10.400
There's things that are called sampler2D,
which hold the texture.

135
00:08:10.400 --> 00:08:13.380
So when we go to do texturing,
we would use this.

136
00:08:13.380 --> 00:08:17.655
And then there's matrix data types, which
has which has to do with transformations.

137
00:08:17.655 --> 00:08:22.989
If we're transforming a vector by
some rotation or something like that,

138
00:08:22.989 --> 00:08:27.559
we might use this data type called mat4 or
four by four matrix.

139
00:08:27.559 --> 00:08:31.938
We don't need to get too far
into matrices today, though.

140
00:08:31.938 --> 00:08:35.529
Here is just some example and
here are some more examples.

141
00:08:37.390 --> 00:08:41.530
And, yeah, the thing to sort of get
our heads around is that we can create

142
00:08:42.630 --> 00:08:46.960
an rgb vec just like we
were doing with Three.js.

143
00:08:46.960 --> 00:08:51.492
But if we just pass a single component,
it's gonna use that for x, y, z.

144
00:08:51.492 --> 00:08:55.790
And we can also sort of compose,
let's say, a vec 4,

145
00:08:55.790 --> 00:09:01.080
we can compose that by giving
it a vec3 and a single float.

146
00:09:01.080 --> 00:09:05.897
And so the rgb would be a vec3 with rgb,
and then the float would be alpha,

147
00:09:05.897 --> 00:09:07.631
which is just playing 5.

148
00:09:07.631 --> 00:09:11.480
So we can compose like a vec4 by
using a vec3 and a float here.

149
00:09:11.480 --> 00:09:16.943
And to access the values, in Three.js
we were just having to do one by one,

150
00:09:16.943 --> 00:09:20.790
without having to say position.x,
position.y.

151
00:09:20.790 --> 00:09:22.773
But we can access them
all at the same time.

152
00:09:22.773 --> 00:09:26.275
We can access .xy which is
gonna give us back a vec2.

153
00:09:26.275 --> 00:09:31.263
We can access them using the rgba syntax
instead, which is useful for colors, and

154
00:09:31.263 --> 00:09:33.660
we can just access one thing like that.

