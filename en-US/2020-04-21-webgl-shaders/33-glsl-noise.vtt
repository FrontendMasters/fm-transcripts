WEBVTT

1
00:00:00.240 --> 00:00:05.140
So I'll just take a bit of a breather
to explain what I just did there.

2
00:00:05.140 --> 00:00:07.520
Because a lot of stuff just happened.

3
00:00:07.520 --> 00:00:10.620
We just introduced noise and
you're probably like, what is going on?

4
00:00:10.620 --> 00:00:11.500
What is noise?

5
00:00:12.630 --> 00:00:15.522
This might be a refresher
if you've already,

6
00:00:15.522 --> 00:00:19.239
learned about noise maybe in
another course or something.

7
00:00:19.239 --> 00:00:23.770
But I'll just quickly go over what
noise is and the basics of it.

8
00:00:23.770 --> 00:00:28.522
So inside of the course
repo in the primer,

9
00:00:28.522 --> 00:00:32.089
the digital interactive book.

10
00:00:32.089 --> 00:00:36.750
There's bit of a section on noise,
and how this kinda works.

11
00:00:36.750 --> 00:00:41.390
And so if we think of a wave,
like a sine wave.

12
00:00:41.390 --> 00:00:45.548
This is a function that we, we call
the function pass in some coordinate,

13
00:00:45.548 --> 00:00:47.910
some value, in this case x.

14
00:00:47.910 --> 00:00:52.440
And then we get back a value
that's generally between -1 and 1.

15
00:00:52.440 --> 00:00:54.420
That's what the sine function gives us.

16
00:00:54.420 --> 00:00:56.650
It's always a value between -1 and 1.

17
00:00:56.650 --> 00:00:59.860
And so
if we pass in different values here,

18
00:00:59.860 --> 00:01:02.180
we're gonna get different outputs for
the y axis.

19
00:01:02.180 --> 00:01:02.890
That's what's happening.

20
00:01:04.460 --> 00:01:06.370
And so if we pass in just the coordinate.

21
00:01:08.630 --> 00:01:12.563
Let's just say we'll make it
really simple, y=Math.sine.

22
00:01:12.563 --> 00:01:16.890
And that's gonna create this
value that slowly undulates

23
00:01:16.890 --> 00:01:20.792
from down here -y all the way up to +y.

24
00:01:20.792 --> 00:01:25.021
If we were to multiply this by Math.pi.

25
00:01:25.021 --> 00:01:29.684
We'll see this like kind of perfect
wave that starts here, goes down, up and

26
00:01:29.684 --> 00:01:32.480
then back to the center line.

27
00:01:32.480 --> 00:01:35.069
Can multiply it by some higher number, 2.

28
00:01:35.069 --> 00:01:37.460
And now we're beginning
to compress the wave.

29
00:01:37.460 --> 00:01:40.350
The higher this number goes, the more
we're going to be compressing this wave

30
00:01:40.350 --> 00:01:44.180
and creating a big sort of
change in frequency here.

31
00:01:45.670 --> 00:01:48.730
This concept is called frequency.

32
00:01:48.730 --> 00:01:52.190
So I just hooked up this slider here
just by saying x times frequency.

33
00:01:52.190 --> 00:01:59.810
And you'll see how multiplying the input
coordinate into the wave is gonna stretch.

34
00:01:59.810 --> 00:02:04.320
Either make it so
that this sine wave is stretched outwards.

35
00:02:04.320 --> 00:02:08.870
Or compressed into many,
sort of, up and down waves.

36
00:02:10.460 --> 00:02:12.330
The other concept is amplitude.

37
00:02:12.330 --> 00:02:16.934
So this is the thing that we scale
after we get back the value that is

38
00:02:16.934 --> 00:02:18.449
between -1 and 1.

39
00:02:18.449 --> 00:02:24.020
So if we multiply the output of
sine by this amplitude value.

40
00:02:24.020 --> 00:02:28.440
We can stretch the wave to be larger or
less dramatic.

41
00:02:28.440 --> 00:02:32.280
So closer to a flatline, that's amplitude.

42
00:02:32.280 --> 00:02:38.240
This other concept of phase is
just offsetting the coordinate.

43
00:02:38.240 --> 00:02:40.010
So translating or adding the coordinate.

44
00:02:40.010 --> 00:02:43.880
And you'll see how just adding
that is just gonna move or

45
00:02:43.880 --> 00:02:46.420
translate the wave left to right.

46
00:02:46.420 --> 00:02:48.250
So this is a sign wave.

47
00:02:48.250 --> 00:02:52.030
And a wave function is a good
way of understanding noise.

48
00:02:52.030 --> 00:02:56.899
Because noise, in this next page here,
is basically a wave function.

49
00:02:56.899 --> 00:03:00.679
It's something that we have a function,
we pass in a coordinate.

50
00:03:00.679 --> 00:03:02.179
And it gives us back a value.

51
00:03:02.179 --> 00:03:06.341
Except instead of it being always
perfectly undulating from 0 and

52
00:03:06.341 --> 00:03:10.450
then up to 1 and then down to -1 and
then back up to 0 and past 0.

53
00:03:10.450 --> 00:03:13.430
It's not this smooth back and
forth thing, it's much more random.

54
00:03:13.430 --> 00:03:15.670
And so each time we click this graph,

55
00:03:15.670 --> 00:03:19.010
you're gonna see it's producing
a different random function.

56
00:03:20.960 --> 00:03:23.790
This is the output of this input here.

57
00:03:25.430 --> 00:03:28.090
And so you can see how changing
the frequency does the same thing.

58
00:03:28.090 --> 00:03:29.786
It just compresses the wave.

59
00:03:29.786 --> 00:03:33.249
This random noise wave.

60
00:03:33.249 --> 00:03:37.677
Changing the amplitude, changes
the sort of drasticness of this wave,

61
00:03:37.677 --> 00:03:39.789
how high it goes or how low it goes.

62
00:03:41.570 --> 00:03:45.910
And then changing the phase just again,
just translates the wave left or right.

63
00:03:45.910 --> 00:03:46.820
So this is noise.

64
00:03:46.820 --> 00:03:51.640
This is one dimensional noise in the sense
that we just have one coordinate.

65
00:03:51.640 --> 00:03:54.300
1D, as in, one coordinate going into it.

66
00:03:54.300 --> 00:03:57.800
Two dimensional noise has two
coordinates going into it.

67
00:03:57.800 --> 00:04:00.270
So here for example is an x and
z coordinate.

68
00:04:01.420 --> 00:04:03.380
So we can rotate around this scene here.

69
00:04:04.530 --> 00:04:09.465
We can see that by changing the frequency,
just like in this 1D,

70
00:04:09.465 --> 00:04:13.250
changing the frequency
we compress everything.

71
00:04:13.250 --> 00:04:16.464
Like a good way to imagine
it is you have a Slinky, and

72
00:04:16.464 --> 00:04:21.150
you pull the Slinky outwards and
it starts to get more and more flat.

73
00:04:21.150 --> 00:04:24.730
But if you push the Slinky back
together it starts to get more and

74
00:04:24.730 --> 00:04:26.030
more rapidly changing.

75
00:04:26.030 --> 00:04:27.920
That's what we're doing
here by compressing this.

76
00:04:29.440 --> 00:04:31.445
And it's the same thing
with the frequency in 2D.

77
00:04:31.445 --> 00:04:35.530
We're just compressing this down or
scaling it, stretching it up.

78
00:04:35.530 --> 00:04:41.430
And then we have amplitude which is
how high these waves go basically.

79
00:04:41.430 --> 00:04:44.850
And so, you can really think of it
like waves in an ocean, almost.

80
00:04:46.000 --> 00:04:47.890
And the coordinates that go in.

81
00:04:47.890 --> 00:04:49.960
So here we have x, where we also have z,

82
00:04:49.960 --> 00:04:54.810
which is the other horizontal coordinate
in this 3D coordinate system.

83
00:04:54.810 --> 00:04:56.580
So y would be up and down.

84
00:04:56.580 --> 00:04:59.660
That's defining how high
to make these vertices, or

85
00:04:59.660 --> 00:05:01.590
how low to make these vertices.

86
00:05:01.590 --> 00:05:05.313
And then x and z is defining where
in this sort of floor plane,

87
00:05:05.313 --> 00:05:07.288
where the coordinate would be.

88
00:05:10.778 --> 00:05:15.477
And so if we introduce a third
coordinate into this noise function.

89
00:05:15.477 --> 00:05:17.348
I mean, maybe we only have x,y,z.

90
00:05:17.348 --> 00:05:22.468
So we already have y here which is
gonna be the how high this point is.

91
00:05:22.468 --> 00:05:27.288
We have x and z, which is where the
coordinate lies within this floor plane.

92
00:05:27.288 --> 00:05:30.528
But let's say we wanna introduce
a third parameter, which is time.

93
00:05:30.528 --> 00:05:34.698
Now, when we modulate time, it's not gonna
just change the frequency or amplitude, or

94
00:05:34.698 --> 00:05:35.710
anything like that.

95
00:05:35.710 --> 00:05:37.929
It's gonna change the way it undulates.

96
00:05:37.929 --> 00:05:42.234
And it's as if, this how I sort of imagine
it, it's as if you have a big rug, or

97
00:05:42.234 --> 00:05:43.100
like a fabric.

98
00:05:43.100 --> 00:05:46.420
And you're just pulling it on one end and
just shaking it up and down.

99
00:05:46.420 --> 00:05:49.968
You're creating, like,
undulations throughout.

100
00:05:49.968 --> 00:05:54.360
You're introducing this third dimension
of time and making it pass through.

101
00:05:56.180 --> 00:05:59.239
And so that's kind of why we like
to use these noise functions.

102
00:05:59.239 --> 00:06:04.199
Because, all of a sudden we have this
value y which is going from -1 to 1.

103
00:06:04.199 --> 00:06:06.502
But it's undulating,
depending on the coordinates,

104
00:06:06.502 --> 00:06:07.879
in this really interesting way.

105
00:06:11.940 --> 00:06:15.560
And so
here's just another little bonus demo.

106
00:06:15.560 --> 00:06:19.460
This would be creating a noisy sphere.

107
00:06:19.460 --> 00:06:25.130
So, this is using 3D noise
in a slightly different way.

108
00:06:25.130 --> 00:06:27.956
Which is inputting
the coordinates of a sphere and

109
00:06:27.956 --> 00:06:30.723
then multiplying that by
the normal of a sphere.

110
00:06:30.723 --> 00:06:32.220
Which is a bit more of an advanced demo.

111
00:06:32.220 --> 00:06:34.299
Maybe we'll come back to this
at some point, but maybe not.

112
00:06:36.590 --> 00:06:38.290
Anyways, that's noise.

113
00:06:38.290 --> 00:06:44.870
And so what we're doing in our shader
here, is we're saying let's create

114
00:06:44.870 --> 00:06:49.900
an input value that's gonna be
the coordinate of each of these circles.

115
00:06:49.900 --> 00:06:55.293
And the reason we floor it is because we
just wanna get the sort of center point,

116
00:06:55.293 --> 00:06:58.329
or the the corner point, of these circles.

117
00:06:58.329 --> 00:07:04.169
We want the noise just to act on
each of these circles independently.

118
00:07:04.169 --> 00:07:08.718
And so without this floor you're gonna
end up with this kind of wavy input.

119
00:07:08.718 --> 00:07:13.468
And that's because this noise
is being applied to every

120
00:07:13.468 --> 00:07:17.519
single pixel within this
region of the circle.

121
00:07:17.519 --> 00:07:18.865
But if we floor it,

122
00:07:18.865 --> 00:07:24.270
it’ll just give us the sort of size of
scale of each individual circle here.

123
00:07:26.130 --> 00:07:31.730
And so you also have to make sure that
this value here, this q * 10 matches.

124
00:07:31.730 --> 00:07:35.920
You could even pull this out,
outside of the functions.

125
00:07:35.920 --> 00:07:39.400
And just make it q*10 up here.

126
00:07:39.400 --> 00:07:40.160
That should work as well.

