WEBVTT

1
00:00:00.110 --> 00:00:03.980
So, so
far we have this kind of noisy sphere,

2
00:00:03.980 --> 00:00:08.260
which is looking kinda cool, but
it still has this issue here.

3
00:00:09.750 --> 00:00:13.150
And so the next thing I wanna try and
introduce is another way of

4
00:00:13.150 --> 00:00:18.040
dealing with this kind of
approach that we're working with.

5
00:00:18.040 --> 00:00:20.980
And everything is within this same
exercise of trying to create polka

6
00:00:20.980 --> 00:00:21.660
dots on a sphere.

7
00:00:21.660 --> 00:00:26.070
Which is seemingly something that you
would think is easy, but of course in

8
00:00:26.070 --> 00:00:30.310
shaders and with WebGL, it gets kind
of advanced and kind of complicated.

9
00:00:30.310 --> 00:00:33.400
But it's also that there's many,
many different ways to achieve this.

10
00:00:35.280 --> 00:00:36.530
So the next thing we can do

11
00:00:38.800 --> 00:00:41.600
is to think about how do we
create this sort of even spacing.

12
00:00:43.220 --> 00:00:47.012
And so this is using an icosahedron.

13
00:00:47.012 --> 00:00:53.546
And then we're placing spheres on each
of these vertices of the triangles and

14
00:00:53.546 --> 00:00:57.880
we're using that to render
some of these objects.

15
00:00:59.510 --> 00:01:03.122
So maybe what we'll try and
do is we'll try and

16
00:01:03.122 --> 00:01:07.295
remix some of this to work
with this kind of look here.

17
00:01:07.295 --> 00:01:11.670
So that all the meshes are or
the polka dots are evenly spaced.

18
00:01:13.040 --> 00:01:16.620
And then, once we do that,
we'll just take the same code, and

19
00:01:16.620 --> 00:01:18.720
we'll convert that code into a shader.

20
00:01:18.720 --> 00:01:21.030
Which will be a little
bit more interesting for

21
00:01:21.030 --> 00:01:24.580
our purposes because then we can
start to manipulate the sizes,

22
00:01:24.580 --> 00:01:27.070
manipulate some of the colors
in interesting ways.

23
00:01:29.390 --> 00:01:32.910
So what I'll do is I'm just gonna
take my code and copy paste it again,

24
00:01:32.910 --> 00:01:37.310
just so you have a backup,
cuz already this demo here

25
00:01:37.310 --> 00:01:40.190
could be kinda cool to use for
something else.

26
00:01:41.370 --> 00:01:46.127
So remember,
I'm gonna start with an icosahedron here.

27
00:01:46.127 --> 00:01:51.120
And I'm gonna use the vertexes of that
ico sphere to create new geometries.

28
00:01:51.120 --> 00:01:54.490
And so for my fragment shader,
let's just clean this up.

29
00:01:54.490 --> 00:01:57.970
And for
now let's just make it really simple,

30
00:01:57.970 --> 00:02:01.630
let's just make it the color that we
put in as the uniform, that's all.

31
00:02:03.570 --> 00:02:06.310
The rest of it, let's leave for now.

32
00:02:06.310 --> 00:02:08.594
Okay, we're gonna create a new geometry.

33
00:02:08.594 --> 00:02:13.474
And this new geometry is gonna
be a icosahedron geometry and

34
00:02:13.474 --> 00:02:16.118
we're gonna call it baseGeom.

35
00:02:16.118 --> 00:02:22.263
And we're gonna say new
THREE.IcosahedronGeometry.

36
00:02:22.263 --> 00:02:24.280
And the first parameter is the radius.

37
00:02:25.290 --> 00:02:28.470
And the second parameter is
the detail of this geometry.

38
00:02:28.470 --> 00:02:33.620
So how high poly we want it or
how low poly we want it.

39
00:02:33.620 --> 00:02:35.970
And so we're gonna leave that detail zero.

40
00:02:35.970 --> 00:02:39.510
When you put this number in,
just be careful not to put big numbers.

41
00:02:39.510 --> 00:02:43.550
If you put an icosahedron
with 10 as the detail or

42
00:02:43.550 --> 00:02:47.620
100, your browser might just freeze or
crash, or something like that.

43
00:02:49.510 --> 00:02:52.350
So, I've created this.

44
00:02:52.350 --> 00:02:55.820
And now the reason we're using this
icosahedron is just to get the points.

45
00:02:55.820 --> 00:02:58.300
We're not trying to
render this icosahedron,

46
00:02:58.300 --> 00:03:01.300
we're just trying to get
the points of the icosahedron.

47
00:03:03.430 --> 00:03:06.616
So I'm gonna get those points,

48
00:03:06.616 --> 00:03:11.600
I'm gonna say, points = baseGeom.vertices.

49
00:03:11.600 --> 00:03:15.425
And now we have a list of
the vector three points,

50
00:03:15.425 --> 00:03:18.080
so I could console log that just to see,
just to confirm.

51
00:03:20.880 --> 00:03:23.732
And it's indeed these vector threes.

52
00:03:29.027 --> 00:03:30.752
And so we don't need to make a mesh for

53
00:03:30.752 --> 00:03:33.790
this icosahedron cuz we're
not gonna render it.

54
00:03:33.790 --> 00:03:37.689
But instead we're going to render little
tiny circles at each of these points.

55
00:03:38.930 --> 00:03:46.270
So we're gonna say, points.forEach,
so we have the point.

56
00:03:48.310 --> 00:03:51.210
And for each of these points,
we're gonna create a new mesh.

57
00:03:52.430 --> 00:03:53.530
So we're gonna create a mesh.

58
00:03:54.870 --> 00:04:02.620
Gonna say const mesh = new THREE.mesh.

59
00:04:02.620 --> 00:04:04.790
And this we can use for now,

60
00:04:04.790 --> 00:04:09.320
we can use the same sphere geometry,
just to test it out.

61
00:04:09.320 --> 00:04:15.280
And we can use a mesh basic material
that might be a different color,

62
00:04:15.280 --> 00:04:19.860
a bright red or something, a different
color than our circles colored.

63
00:04:19.860 --> 00:04:22.418
And maybe use wireframe:
true just to debug it.

64
00:04:27.260 --> 00:04:29.884
And this last thing here is just
to add this mesh to the scene.

65
00:04:36.094 --> 00:04:38.462
And so what our goal is, is to have it so

66
00:04:38.462 --> 00:04:42.210
that each of these points
in our icosahedron.

67
00:04:42.210 --> 00:04:45.750
At each of those points we
wanna draw another little mesh,

68
00:04:45.750 --> 00:04:48.990
a little tiny object of some kind.

69
00:04:50.950 --> 00:04:54.850
And to do that we are gonna write this out
like this, but then also we are going to

70
00:04:54.850 --> 00:05:00.120
position each of these measures at the
same position as the icosahedron's point.

71
00:05:00.120 --> 00:05:04.165
So we are gonna say
mesh.position.copy(point).

72
00:05:04.165 --> 00:05:06.680
And what we are doing
now is we are saying for

73
00:05:06.680 --> 00:05:11.990
each of the points in the icosahedron,
place a new mesh at that position.

74
00:05:13.880 --> 00:05:15.870
Which actually looks kind of cool.

75
00:05:15.870 --> 00:05:16.970
Not exactly where we want.

76
00:05:18.070 --> 00:05:21.420
But if we scale down these meshes, so

77
00:05:21.420 --> 00:05:26.250
we say mesh.scale.setScalar
down to some very small number.

78
00:05:28.180 --> 00:05:33.170
All of a sudden we're gonna see these
meshes on the surface of the sphere.

