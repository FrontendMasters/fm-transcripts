WEBVTT

1
00:00:00.230 --> 00:00:05.805
The vertex and fragment shader demos
on Glitch are pretty straightforward,

2
00:00:05.805 --> 00:00:07.699
and you can look at those.

3
00:00:07.699 --> 00:00:11.311
But I think what we'll do is we'll
just do a really simple exercise,

4
00:00:11.311 --> 00:00:14.567
just with a gradient and a cube and
start to explore that a bit.

5
00:00:14.567 --> 00:00:19.359
And then what we're gonna start to learn
is, how do we start to create patterns and

6
00:00:19.359 --> 00:00:24.299
create more interesting graphics rather
than just gradients and very basic stuff?

7
00:00:24.299 --> 00:00:29.020
So if we open up our desktop again in our
terminal, go onto our webgl folder, and

8
00:00:29.020 --> 00:00:31.075
we're gonna create a new sketch.

9
00:00:32.954 --> 00:00:36.805
And maybe what we'll do is
we'll just copy and paste, or

10
00:00:36.805 --> 00:00:40.027
you know what,
we'll start with a new sketch.

11
00:00:40.027 --> 00:00:41.962
Yeah, we'll start with
an entirely new sketch.

12
00:00:41.962 --> 00:00:46.455
So you might need to go into your
terminal window that has the server and

13
00:00:46.455 --> 00:00:48.448
kill that by hitting Ctrl+C.

14
00:00:51.384 --> 00:00:55.568
And then we're gonna open up a new server,
we're gonna say, canvas-sketch.

15
00:00:57.393 --> 00:01:05.648
Let's call it shader.js
--new --template=3.

16
00:01:13.441 --> 00:01:16.649
And now we can open that up in localhost.

17
00:01:16.649 --> 00:01:20.679
And for now we'll just create a very
simple sort of gradient cube using

18
00:01:20.679 --> 00:01:21.853
a fragment shader.

19
00:01:25.142 --> 00:01:29.953
And you'll open up that file in your
Visual Studio Code, or any code editor.

20
00:01:35.638 --> 00:01:38.322
So we'll change the SphereGeometry
to a BoxGeometry.

21
00:01:45.518 --> 00:01:49.098
And now we have this wireframe red cube.

22
00:01:49.098 --> 00:01:53.498
And so now we're gonna start to
change this into a ShaderMaterial.

23
00:01:53.498 --> 00:01:58.392
So right now we have MeshBasic,
let's say, turn that into ShaderMaterial.

24
00:02:06.936 --> 00:02:12.599
And it just so happens that the default
color of ShaderMaterial is red.

25
00:02:12.599 --> 00:02:17.118
So, actually, it looks like we're coloring
it red, but let's delete red and save, and

26
00:02:17.118 --> 00:02:18.313
it should still be red.

27
00:02:21.108 --> 00:02:25.289
And so what's actually happening here is
we've just created a Shader Material,

28
00:02:25.289 --> 00:02:27.238
we've specified wireframe, true.

29
00:02:27.238 --> 00:02:32.392
Let's turn off wireframe as well, so that
the ShaderMaterial is completely empty.

30
00:02:32.392 --> 00:02:36.570
And what's happening here is that
three.js, if you don't give it a shader,

31
00:02:36.570 --> 00:02:39.944
if you don't give it the GLSL code,
it's gonna use a default.

32
00:02:39.944 --> 00:02:43.401
And the default is just a plain
red material, with nothing else.

33
00:02:43.401 --> 00:02:45.185
It's just always red.

34
00:02:45.185 --> 00:02:49.025
So let's start to build up
a more interesting look.

35
00:02:49.025 --> 00:02:53.435
So, first, we're gonna say,
define a fragmentShader.

36
00:02:53.435 --> 00:02:56.256
And let's declare it above.

37
00:02:56.256 --> 00:02:58.896
So I'm gonna say, const fragmentShader.

38
00:02:58.896 --> 00:03:01.525
I'm gonna use these template strings.

39
00:03:01.525 --> 00:03:07.025
And here's a little tip, is when we're
writing shader code, so now I'm writing

40
00:03:07.025 --> 00:03:12.128
some shader code in a string, and
especially on this screen, it's gonna be

41
00:03:12.128 --> 00:03:17.176
better if I could get syntax highlighting
inside of this template string.

42
00:03:17.176 --> 00:03:20.203
And so if you are using VS Code,

43
00:03:20.203 --> 00:03:25.570
you can open up the sidebar and
check out an extension.

44
00:03:25.570 --> 00:03:29.737
So, here, if I go to my extensions and
I search for

45
00:03:29.737 --> 00:03:37.089
one called comment tagged templates,
If you want, you can install this, and

46
00:03:37.089 --> 00:03:41.737
we can start to get syntax highlighting
directly inside of template strings.

47
00:03:41.737 --> 00:03:44.225
You would install this one, and

48
00:03:44.225 --> 00:03:49.862
then you'd also install another one
called shader languages support.

49
00:03:49.862 --> 00:03:54.390
So these two extensions, this one will
give us actual syntax highlighting.

50
00:03:54.390 --> 00:03:58.150
And the other extension is just
gonna allow us to do syntax

51
00:03:58.150 --> 00:04:00.500
highlighting within a template string.

52
00:04:01.680 --> 00:04:08.508
So here, once we've installed those,
we can use this comment syntax.

53
00:04:08.508 --> 00:04:14.365
So we can say comment, glsl, end comment,
and then start the template string.

54
00:04:14.365 --> 00:04:15.281
All of a sudden,

55
00:04:15.281 --> 00:04:19.088
the code within the template string
is gonna be syntax highlighted.

56
00:04:19.088 --> 00:04:21.690
Okay, so
we're writing this fragmentShader.

57
00:04:21.690 --> 00:04:26.390
Right now, it's just going to be
a black sphere on a black background.

58
00:04:26.390 --> 00:04:30.572
We can confirm this just really quickly,
just see what happens.

59
00:04:30.572 --> 00:04:32.800
It's maybe not even rendering anything.

60
00:04:32.800 --> 00:04:36.929
Sometimes that's because when we look at
the console, it's gonna give us an error.

61
00:04:36.929 --> 00:04:38.996
So if I just look at my console,

62
00:04:38.996 --> 00:04:43.376
it's gonna give us an error that's
actually saying some stuff.

63
00:04:43.376 --> 00:04:48.103
It's saying some buffer format, fragment,
open variable, incompatible, blah,

64
00:04:48.103 --> 00:04:48.890
blah, blah.

65
00:04:48.890 --> 00:04:52.829
So maybe what we really need to do is
start to put some code into our shader

66
00:04:52.829 --> 00:04:55.338
here, because we just
have an empty shader.

67
00:04:55.338 --> 00:04:59.621
So I'm gonna start by saying gl_FragColor.

68
00:04:59.621 --> 00:05:02.111
Let's say we'll make it 0.5 again.

69
00:05:09.868 --> 00:05:13.997
And maybe instead of 0.5, it's actually
gonna be better to do the color red or

70
00:05:13.997 --> 00:05:14.675
something.

71
00:05:17.377 --> 00:05:21.226
And make it pure 1.0 on opacity.

72
00:05:21.226 --> 00:05:25.816
And we can make that blue or green, here.

73
00:05:29.254 --> 00:05:33.322
But we wanna do something more
interesting, we wanna create a gradient.

74
00:05:33.322 --> 00:05:36.626
And so the way we're gonna do that is,

75
00:05:36.626 --> 00:05:41.496
we're going to start by
getting a vertexShader going.

76
00:05:48.543 --> 00:05:51.160
So here's an example of
how to debug a shader.

77
00:05:51.160 --> 00:05:57.570
If you make an error,
you're gonna get this massive error log.

78
00:05:57.570 --> 00:06:02.390
At the bottom, it might say program
not valid or no valid shader program,

79
00:06:02.390 --> 00:06:04.422
you'll get all this red code.

80
00:06:04.422 --> 00:06:07.768
And if you scroll up to the top,
where this red code,

81
00:06:07.768 --> 00:06:12.578
where the error starts, usually,
it'll say error with the line number.

82
00:06:12.578 --> 00:06:14.980
So this is 107.

83
00:06:14.980 --> 00:06:18.395
And it says syntax error,
sometimes there's a little hint.

84
00:06:18.395 --> 00:06:23.546
So if I go to line 107,
I have to actually go into this red code,

85
00:06:23.546 --> 00:06:29.284
scroll down, line 107, and
you might actually see the error there.

86
00:06:29.284 --> 00:06:31.420
And then you might be
able to fix it that way.

87
00:06:31.420 --> 00:06:36.010
Missing semicolons, or sometimes extra
semicolons, can create some problems.

88
00:06:37.380 --> 00:06:40.710
But that's how you start
to track down errors.

89
00:06:40.710 --> 00:06:44.710
The other thing with debugging shaders
is that there's no way to console

90
00:06:44.710 --> 00:06:45.280
log in a shader.

91
00:06:45.280 --> 00:06:48.020
There's no way to set a breakpoint or
anything like that.

92
00:06:48.020 --> 00:06:53.100
And so let's say you have some number,
it's a float.

93
00:06:53.100 --> 00:06:56.650
I mean, here we know it's 0.5 because
we're looking at the number and

94
00:06:56.650 --> 00:06:59.124
we're saying, okay, this is obviously 0.5.

95
00:06:59.124 --> 00:07:02.909
But let's say this a is coming from
some sort of math, some sort of input,

96
00:07:02.909 --> 00:07:06.821
maybe it's like interactive or
something or it's changing over time, and

97
00:07:06.821 --> 00:07:08.930
you wanted just to console log what a is.

98
00:07:08.930 --> 00:07:11.824
Well, you don't know if a is negative or
positive or whatever.

99
00:07:11.824 --> 00:07:16.496
Well, what you actually have to do is
somehow get a into the range of 0.0 to

100
00:07:16.496 --> 00:07:19.133
1.0, and then place that in the color.

101
00:07:19.133 --> 00:07:23.016
And then you have to look at the color and
say, okay, well,

102
00:07:23.016 --> 00:07:27.442
the output of this cube is kind of dark,
or maybe it's even easier,

103
00:07:27.442 --> 00:07:30.719
instead of doing red,
you use a gray scale value.

104
00:07:30.719 --> 00:07:34.550
So now I'm looking at,
I'm seeing this kind of grayish cube.

105
00:07:34.550 --> 00:07:38.488
And so I have an idea that
the value is somewhere between,

106
00:07:38.488 --> 00:07:41.943
in the middle range, between 0.0 and 1.0.

107
00:07:41.943 --> 00:07:46.554
Whereas if I was to look at it like this,
I'd be like, this looks like pure black,

108
00:07:46.554 --> 00:07:48.350
so this value must be a.

109
00:07:48.350 --> 00:07:50.699
Or, sorry, it must be 0.0.

110
00:07:50.699 --> 00:07:53.766
This a value must be 0.0,
or it might be a negative.

111
00:07:53.766 --> 00:07:58.450
If it's a -10,
it's also gonna appear pure black.

112
00:07:58.450 --> 00:08:03.268
So it's very tricky to sometimes debug
shaders because we don't have console.log.

113
00:08:03.268 --> 00:08:06.853
We just have to look at the colors and
try and understand how that works.

