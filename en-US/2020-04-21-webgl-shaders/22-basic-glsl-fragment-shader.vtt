WEBVTT

1
00:00:00.380 --> 00:00:05.097
Here's again another fragment shader and
this one is just

2
00:00:05.097 --> 00:00:10.005
taking in the these two sliders
here one of them is the color,

3
00:00:10.005 --> 00:00:14.335
which is a defined here as a hex code but
in the shader,

4
00:00:14.335 --> 00:00:17.531
it has to be somehow turned into vec3.

5
00:00:17.531 --> 00:00:22.580
So when we use three js and we use color,
we're using RGB which is between 0 and 1.

6
00:00:22.580 --> 00:00:28.073
Well, it's the same thing here with color,
so this is a 3D vector,

7
00:00:28.073 --> 00:00:33.679
which is between 0 and 1 for
orange GNB and then we have opacity here.

8
00:00:33.679 --> 00:00:40.510
And so let's say we wanted to try and make
the pixels of this quad a different color.

9
00:00:40.510 --> 00:00:42.760
So let's just try and edit it here.

10
00:00:42.760 --> 00:00:46.280
The first thing we need to do is
we need to use this gl_FragColor.

11
00:00:46.280 --> 00:00:50.220
This is the output of a fragment shader.

12
00:00:51.250 --> 00:00:57.108
The output is a vec4, so
it's RGBA red, green, blue, alpha.

13
00:00:57.108 --> 00:01:01.033
And so we could just do vec4
is equal to some number.

14
00:01:04.210 --> 00:01:07.777
So now we have a FragColor that is 0.5 for

15
00:01:07.777 --> 00:01:12.645
all the components, for red,
green, blue, and alpha.

16
00:01:12.645 --> 00:01:16.269
So it's a bit semi-transparent
because our alpha's 0.5,

17
00:01:16.269 --> 00:01:19.620
it's a bit gray because we're using 0.5.

18
00:01:19.620 --> 00:01:20.860
So maybe we wanna make it red.

19
00:01:20.860 --> 00:01:26.000
So we're gonna say inside, were gonna
do 1.0, 0.0, 0.0 for the RGB and

20
00:01:26.000 --> 00:01:30.950
then pure opacity of one for the opacity.

21
00:01:32.680 --> 00:01:38.430
So now we've just made it red and
if we were using properties

22
00:01:38.430 --> 00:01:43.240
from our JavaScript programs we would
be using this thing called uniforms.

23
00:01:43.240 --> 00:01:44.920
So uniform,

24
00:01:44.920 --> 00:01:48.960
this is a special type of property
that we can't assign it a value here.

25
00:01:48.960 --> 00:01:52.389
So I can't just say,
I want it to be right up here.

26
00:01:52.389 --> 00:01:54.130
You're gonna get an error.

27
00:01:54.130 --> 00:01:57.160
It's gonna say cannot initialize
this type of qualifier.

28
00:01:57.160 --> 00:01:59.250
It's gonna say uniform
can't be initialized,

29
00:01:59.250 --> 00:02:03.980
we can't initialize
a uniform from the shader.

30
00:02:03.980 --> 00:02:06.620
Instead, the uniforms are read only.

31
00:02:06.620 --> 00:02:10.000
They're coming in from
the JavaScript somewhere.

32
00:02:10.000 --> 00:02:13.480
So the JavaScript is passing those
down into the fragment shader and

33
00:02:13.480 --> 00:02:15.720
saying here's the value of color.

34
00:02:15.720 --> 00:02:18.380
But the the shader can't
change this value.

35
00:02:18.380 --> 00:02:22.905
If you wanted to have a constant,
you could say like const vec3.

36
00:02:24.700 --> 00:02:29.070
MyColor = vec3, some values.

37
00:02:29.070 --> 00:02:34.296
So this is how you could do a constant but
this value is not gonna change, right?

38
00:02:34.296 --> 00:02:38.295
And so we can't hook up like a slider
to it, we can't hook up animations and

39
00:02:38.295 --> 00:02:40.839
stuff to it,
it's always going to just be one.

40
00:02:40.839 --> 00:02:46.170
And so the purpose of uniforms is to
get access of stuff from JavaScript.

41
00:02:46.170 --> 00:02:49.897
So let's say from the dom, whether
we're doing a slider, or maybe from

42
00:02:49.897 --> 00:02:53.823
something else, and to pass that
information down to the fragment shader.

43
00:02:53.823 --> 00:02:56.350
And the reason it's
called uniform is because

44
00:02:56.350 --> 00:02:59.265
because the value that
we're getting is uniformly,

45
00:02:59.265 --> 00:03:03.530
the same across every single
pixel in this fragment shader.

46
00:03:03.530 --> 00:03:04.570
That's why it's called uniform.

47
00:03:04.570 --> 00:03:06.650
So it's not changing across
the different pixels.

48
00:03:06.650 --> 00:03:13.570
So color let's say right now we have the
color is set to this this red value here,

49
00:03:13.570 --> 00:03:19.270
which is 255420 or some similar value
if we were to normalize that to 0 to 1.

50
00:03:19.270 --> 00:03:22.640
Well that color's not changing across
the entire surface of this quad.

51
00:03:22.640 --> 00:03:23.710
That's why it's called uniform.

52
00:03:25.120 --> 00:03:28.680
So uniform is one thing and
then in vertex shaders,

53
00:03:28.680 --> 00:03:31.580
I'm just going back to
mention this other thing.

54
00:03:31.580 --> 00:03:35.750
So we again see uniforms which means
whenever you see uniforms just imagine is

55
00:03:35.750 --> 00:03:37.580
coming from JavaScript.

56
00:03:37.580 --> 00:03:40.160
So that stretch value is
coming from JavaScript, and

57
00:03:40.160 --> 00:03:44.210
these sort of matrix transformations
are coming from JavaScript as well.

58
00:03:44.210 --> 00:03:49.440
And this is what's defining the camera and
the way

59
00:03:49.440 --> 00:03:54.320
that the object is positioned as
defining the way that the camera's

60
00:03:54.320 --> 00:03:58.240
actually projecting whether it's
isometric or orthographic or perspective.

61
00:03:59.870 --> 00:04:02.000
So those things we don't
really need to worry so

62
00:04:02.000 --> 00:04:05.790
much about what they mean other than
the fact that they contain the data and

63
00:04:05.790 --> 00:04:09.510
they contain the information
about how to transform this mesh.

64
00:04:09.510 --> 00:04:13.100
But then there's this other thing that I
haven't mentioned yet which is attribute.

65
00:04:13.100 --> 00:04:16.190
So attribute is different than uniform.

66
00:04:16.190 --> 00:04:21.260
It's not coming from like a slider or
something like that, but it's actually

67
00:04:21.260 --> 00:04:25.410
coming from the vertex data that's
contained in each of these vertices.

68
00:04:26.440 --> 00:04:31.016
So remember when I was talking
before lunch about vertices and

69
00:04:31.016 --> 00:04:34.450
I'll just real quickly
show you in this demo.

70
00:04:40.787 --> 00:04:43.907
So let's say in the geometry demo or

71
00:04:43.907 --> 00:04:48.795
the buffer geometry demo we
have these vector threes and

72
00:04:48.795 --> 00:04:52.539
each of these it's a position attribute so

73
00:04:52.539 --> 00:04:59.440
here we have a position attribute
that's defining the Vertex positions.

74
00:04:59.440 --> 00:05:03.670
We could add other attributes like the
colour, we could add texture coordinates,

75
00:05:03.670 --> 00:05:07.450
we could add random numbers if we wanted
to create some random displacement in

76
00:05:07.450 --> 00:05:09.800
the geometry, and that's the attribute.

77
00:05:09.800 --> 00:05:14.180
So it's coming from the actual geometry
of the mesh that we're working with.

78
00:05:14.180 --> 00:05:17.534
And if we're doing buffer geometry,
we can add in custom attributes.

79
00:05:17.534 --> 00:05:21.417
So you could have a new attribute
that would say, myCord and

80
00:05:21.417 --> 00:05:25.780
it could be some vec3 or it could
be a float or something like that.

81
00:05:25.780 --> 00:05:28.560
You just have to declare it just
in the way we've been declaring

82
00:05:28.560 --> 00:05:31.087
the position attribute in
the buffer geometry example.

83
00:05:33.679 --> 00:05:38.347
Okay, one last little thing
is to understand how shaders

84
00:05:38.347 --> 00:05:45.030
are different in three js, as opposed
to in pure WebGL or pure OpenGL.

85
00:05:45.030 --> 00:05:49.265
So so far, these shader examples have been
including a few things like precision

86
00:05:49.265 --> 00:05:54.600
highp float, and I've included a couple of
uniform things like the transformations.

87
00:05:54.600 --> 00:05:58.890
Well, when we write shaders in three js,
we can simplify them a little bit.

88
00:05:58.890 --> 00:06:03.690
We don't specify precision highp float,
we just go straight to the main function.

89
00:06:04.720 --> 00:06:07.990
And then we don't need to specify
the transformation uniforms,

90
00:06:07.990 --> 00:06:09.810
we can just write our code.

91
00:06:09.810 --> 00:06:13.280
So this is a vertex shader now and
it's a little bit simpler.

92
00:06:13.280 --> 00:06:15.674
And this is the fragment shader.

93
00:06:15.674 --> 00:06:18.030
Once again no precision specifiers.

94
00:06:18.030 --> 00:06:22.000
So this is three js giving us some
utility here, some convenience.

95
00:06:22.000 --> 00:06:25.095
Making it just a bit easier to
right away start writing shaders,

96
00:06:25.095 --> 00:06:26.656
not having to worry about them.

97
00:06:26.656 --> 00:06:31.659
And so this code actually that you're
seeing, you could copy and paste this into

98
00:06:31.659 --> 00:06:37.250
your scene that you have with the earth,
and it would just create the same setup.

99
00:06:37.250 --> 00:06:40.640
Because all of a sudden,
we've created a shader material just

100
00:06:40.640 --> 00:06:43.690
by doing this these several
lines of code here.

101
00:06:43.690 --> 00:06:46.920
We have the vertex shader as a string,
we have the fragment shader as a string,

102
00:06:46.920 --> 00:06:51.950
and then we have the material which
combines these two shaders, which says

103
00:06:51.950 --> 00:06:55.040
here's the vertex shader and here's the
fragment shader, it's a shader material.

104
00:06:56.090 --> 00:06:59.180
And then the third thing here
is this idea of uniforms.

105
00:06:59.180 --> 00:07:00.810
I kept saying it's coming from JavaScript,

106
00:07:00.810 --> 00:07:02.640
and that's because this
is where we define it.

107
00:07:02.640 --> 00:07:05.540
We define it in JavaScript as an object.

108
00:07:05.540 --> 00:07:10.503
And so
if we wanted to say the opacity is 0.5

109
00:07:10.503 --> 00:07:15.070
we can define this object
here with the value,

110
00:07:15.070 --> 00:07:18.610
this is just this kind of weird
syntax that three js enforces.

111
00:07:18.610 --> 00:07:19.780
It's an object with value.

112
00:07:20.940 --> 00:07:23.250
And then now that we've
defined it as a uniform,

113
00:07:23.250 --> 00:07:27.250
we can use that uniform
in our fragment shader.

114
00:07:28.790 --> 00:07:33.099
And so I can start to use that maybe
multiplying the color by opacity or

115
00:07:33.099 --> 00:07:34.520
something like that.

116
00:07:37.302 --> 00:07:41.878
And you'll see how changing
the value in JavaScript in this JS

117
00:07:41.878 --> 00:07:44.522
object is gonna change the output.

118
00:07:52.420 --> 00:07:57.327
And so really, you would actually want to
use this opacity in the alpha component of

119
00:07:57.327 --> 00:07:58.180
a FragColor.

120
00:07:59.650 --> 00:08:05.810
But one thing you might
notice is that if I use this.

121
00:08:05.810 --> 00:08:07.610
It looks pretty good actually.

122
00:08:07.610 --> 00:08:12.270
But sometimes what you'll need to do is,
you'll need to also specify that

123
00:08:12.270 --> 00:08:16.030
your material is transparent by
just saying transparent true.

124
00:08:16.030 --> 00:08:20.494
It's just something to notice a bit
of a gotcha is that in three js by

125
00:08:20.494 --> 00:08:22.502
default objects are opaque.

126
00:08:22.502 --> 00:08:26.460
And that's because it's a little bit
more efficient to render opaque objects.

127
00:08:26.460 --> 00:08:28.510
But if you have an object
that has some transparency,

128
00:08:28.510 --> 00:08:30.720
you're going to want to
put in transparent true.

129
00:08:32.530 --> 00:08:37.797
And there's one other thing I want
to mention was this snippets,

130
00:08:37.797 --> 00:08:43.567
which is in the webgl glsl repo in
the guides, or also in the links here.

131
00:08:43.567 --> 00:08:46.310
If you scroll down snippet
using the workshop.

132
00:08:46.310 --> 00:08:51.220
So this kind of basic fragment and
basic vertex shader, you can copy and

133
00:08:51.220 --> 00:08:57.420
paste this if you're forgetting what to
write and you can use this as a base.

134
00:08:57.420 --> 00:08:59.460
It includes the few things that
I haven't talked about yet

135
00:08:59.460 --> 00:09:03.370
which we'll talk about later in
the afternoon called varyings.

136
00:09:03.370 --> 00:09:06.334
But for now, you can just copy and
paste it or you can copy and

137
00:09:06.334 --> 00:09:09.139
paste the ones from the guidebook
that would also work.

