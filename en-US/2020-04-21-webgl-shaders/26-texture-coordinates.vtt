WEBVTT

1
00:00:00.120 --> 00:00:03.682
So we're somewhere around
here we have this purplish or

2
00:00:03.682 --> 00:00:06.654
some sort of colored
cube with the gradients.

3
00:00:06.654 --> 00:00:10.051
One of the things I want to start to
explain a little bit more is texture

4
00:00:10.051 --> 00:00:11.190
coordinates.

5
00:00:11.190 --> 00:00:15.380
And also how do we use this UV thing or
this UV thing and

6
00:00:15.380 --> 00:00:17.560
what what is this UV thing?

7
00:00:17.560 --> 00:00:21.010
So the first thing before I explain it,
I just wanna change this color so

8
00:00:21.010 --> 00:00:22.230
that it's white.

9
00:00:22.230 --> 00:00:25.770
This will just help me explain a bit
rather than thinking in terms of color,

10
00:00:25.770 --> 00:00:27.440
let's just think in terms of grayscale.

11
00:00:28.590 --> 00:00:34.790
And so, here what I've got is a pure
gradient that goes from black,

12
00:00:34.790 --> 00:00:36.310
which would be zero.

13
00:00:36.310 --> 00:00:40.480
So zero, zero, zero the color RGB zero,
zero, zero would be black.

14
00:00:40.480 --> 00:00:42.416
To white, which is 111.

15
00:00:42.416 --> 00:00:47.168
So one red, green and
blue is gonna produce white.

16
00:00:47.168 --> 00:00:52.660
And so vv.x is a value that
goes from zero to one,

17
00:00:52.660 --> 00:00:55.690
and in this particular geometry and
that cube or

18
00:00:55.690 --> 00:01:00.820
a plane, this kind of square type
geometry, one of the sides usually

19
00:01:00.820 --> 00:01:05.910
you can imagine the left side is gonna
be 0 and the right side is gonna be 1.

20
00:01:05.910 --> 00:01:09.710
And I put that in quotes because it really
depends on how we're looking at this cube.

21
00:01:09.710 --> 00:01:13.264
But imagine we're looking at it like this,
the left side is gonna be 0,

22
00:01:13.264 --> 00:01:15.450
the right side is gonna be 1.

23
00:01:15.450 --> 00:01:22.920
So the X is the horizontal text recorded
value, and the y would be the vertical.

24
00:01:24.340 --> 00:01:30.020
And notice instead of going from
0 on the top to 1 on the bottom,

25
00:01:30.020 --> 00:01:31.660
it's actually inverted.

26
00:01:31.660 --> 00:01:35.480
And sometimes in WebGL the y axis
is gonna be a little bit inverted.

27
00:01:35.480 --> 00:01:40.710
And so you just need to think sort of
upside down in terms of the y axis.

28
00:01:40.710 --> 00:01:43.620
And so now we're getting
the vertical texture coordinate.

29
00:01:43.620 --> 00:01:46.760
And so this is going from
1 all the way down to 0.

30
00:01:46.760 --> 00:01:51.470
And this is just some value that you get
inside of all the built in geometries that

31
00:01:51.470 --> 00:01:53.170
you can use in your shaders.

32
00:01:53.170 --> 00:01:57.093
And it gives you this value that
goes smoothly across the surface of

33
00:01:57.093 --> 00:02:01.290
the geometry and it's actually used for
texture mapping.

34
00:02:01.290 --> 00:02:06.250
So, if you could imagine maybe
this is kind of a good example,

35
00:02:06.250 --> 00:02:09.990
but this is one of the ways in
which we use texture mapping.

36
00:02:09.990 --> 00:02:14.110
Texture mapping is when I say mapping
it's almost like wrapping things.

37
00:02:14.110 --> 00:02:17.900
It's figuring out the coordinates and the
numbers that we need to use in order to

38
00:02:17.900 --> 00:02:22.818
take an image, kind of like the earth
image that we've been working with.

39
00:02:22.818 --> 00:02:27.060
So this earth.jpg,
how do we map this onto a sphere?

40
00:02:27.060 --> 00:02:29.590
How do we map this onto a geometry?

41
00:02:29.590 --> 00:02:31.950
That's the process of texture mapping and

42
00:02:31.950 --> 00:02:35.250
we use these UV coordinates
in order to do that.

43
00:02:35.250 --> 00:02:41.150
So that's kind of why Three.js includes
this UV stuff is because it's used for

44
00:02:41.150 --> 00:02:44.250
sampling from a texture and
producing textured results.

45
00:02:46.680 --> 00:02:51.040
So one of the cool things actually that we
can do with just this simple line of code

46
00:02:51.040 --> 00:02:55.450
is just start to add in different values
for each of the different components.

47
00:02:56.970 --> 00:03:00.200
And all of a sudden, we're gonna
have this sort of multicolored cube.

48
00:03:01.550 --> 00:03:06.350
And what's happening here is we're
saying each of these components

49
00:03:06.350 --> 00:03:10.470
is gonna end up with either the x or
the y value.

50
00:03:10.470 --> 00:03:15.070
And you could even go further than that,
you can multiply 1 by some smaller,

51
00:03:15.070 --> 00:03:15.799
larger number.

52
00:03:17.590 --> 00:03:19.870
I don't know you can just play
around with it if you want.

53
00:03:19.870 --> 00:03:22.650
But you can see how you can create
these different gradients and

54
00:03:22.650 --> 00:03:27.530
it's because we're introducing more or
less of one of the three colors.

55
00:03:27.530 --> 00:03:33.399
Okay, so that's kind of little
primer on texture coordinates.

56
00:03:34.640 --> 00:03:39.595
One of the other things that you might
wanna start to do is introduce maybe

57
00:03:39.595 --> 00:03:41.960
some animation or some movement.

58
00:03:41.960 --> 00:03:45.830
A very common thing to do is to
introduce a uniform called time.

59
00:03:45.830 --> 00:03:49.680
So here we have time, and we say time,
the value starts at zero.

60
00:03:50.730 --> 00:03:53.850
And then maybe,
we want to manipulate these colors or

61
00:03:53.850 --> 00:03:57.410
even manipulate the positions by time.

62
00:03:59.070 --> 00:04:02.600
So we can add in a uniform float time.

63
00:04:02.600 --> 00:04:06.170
So this is a float because it's
not a vector, it's just a number.

64
00:04:09.900 --> 00:04:14.632
And then maybe we'll add in for
the red component,

65
00:04:14.632 --> 00:04:18.060
let's say vv.x is+ sin(time).

66
00:04:18.060 --> 00:04:23.770
Sine is like the cosine when
we're talking about sine,

67
00:04:23.770 --> 00:04:29.247
it's that mathematical signal for
a circle sort of.

68
00:04:29.247 --> 00:04:32.920
And this isn't gonna do anything yet
because time is always 0.

69
00:04:32.920 --> 00:04:36.350
It's never changing because we've just
defined it here in our material, but

70
00:04:36.350 --> 00:04:38.850
we haven't updated each frame.

71
00:04:38.850 --> 00:04:43.520
So in order to update then,
we're going to go down to our render loop.

72
00:04:43.520 --> 00:04:46.182
We already have time here.

73
00:04:46.182 --> 00:04:48.762
And so we're gonna update it by saying,
material,

74
00:04:48.762 --> 00:04:52.048
which is the name of the material
we've defined just to make sure,

75
00:04:52.048 --> 00:04:55.707
you might need to scroll up and
just make sure you're using the same name.

76
00:04:55.707 --> 00:05:01.639
But it would be
material.uniforms.time.value = time,

77
00:05:01.639 --> 00:05:04.230
so you have to do .value.

78
00:05:04.230 --> 00:05:09.103
So now you should have some
gradient that would be sort

79
00:05:09.103 --> 00:05:12.799
of shifting with more or less red color.

80
00:05:12.799 --> 00:05:14.510
And what we're doing
now is pretty abstract.

81
00:05:14.510 --> 00:05:16.430
It's just sort of experimenting and
playing around,

82
00:05:16.430 --> 00:05:18.630
we don't have any goal in mind.

83
00:05:18.630 --> 00:05:21.920
Maybe you're just gonna be tinkering and
exploring.

84
00:05:21.920 --> 00:05:25.340
Maybe changing some of these colors
is gonna start to look pretty cool.

85
00:05:25.340 --> 00:05:28.810
Maybe you could even do cos, instead
of just doing sine you could do cos

86
00:05:28.810 --> 00:05:31.450
in one component and sine in the other.

87
00:05:31.450 --> 00:05:35.771
And then all of a sudden you have this
kind of like circular rotation that's

88
00:05:35.771 --> 00:05:37.291
cycling through colors.

89
00:05:39.346 --> 00:05:41.440
But still, we don't really know
what we're doing necessarily.

90
00:05:41.440 --> 00:05:44.960
We're just sort of
absent-mindedly changing values,

91
00:05:44.960 --> 00:05:48.230
which is a totally legitimate
way to work with shaders.

92
00:05:48.230 --> 00:05:51.581
It's actually a lot of the time
when I'm working with shaders,

93
00:05:51.581 --> 00:05:55.182
I'm just sort of experimenting with
numbers, putting in things and

94
00:05:55.182 --> 00:05:57.120
seeing how that changes the result.

95
00:05:57.120 --> 00:06:00.760
And sometimes coming up with these happy
little accidents that look pretty cool.

96
00:06:00.760 --> 00:06:03.510
And then that actually
ends up being the work.

97
00:06:03.510 --> 00:06:05.690
And that's okay if that's
what you end up doing.

98
00:06:09.260 --> 00:06:15.290
So you could even also go into the primer,
the WebGL primer if you wanted to.

99
00:06:15.290 --> 00:06:19.310
You could try and copy just an exercise,
but we don't need to do it.

100
00:06:19.310 --> 00:06:24.990
But just as an exercise, you could go into
the vertex shader, and try to copy this,

101
00:06:24.990 --> 00:06:30.130
or some of this,
into in your Three.js vertex shader.

102
00:06:30.130 --> 00:06:32.060
The bulk of it will be here.

103
00:06:32.060 --> 00:06:36.270
And then maybe you could
manipulate this time,

104
00:06:36.270 --> 00:06:40.210
you could manipulate the stretching
by time in your own program.

105
00:06:40.210 --> 00:06:46.320
Just remember there's a few differences
between this raw pure GLSL and

106
00:06:46.320 --> 00:06:48.810
the way that we write it in Three.js.

107
00:06:48.810 --> 00:06:51.693
The main difference is that
we no longer need to write

108
00:06:51.693 --> 00:06:53.863
precision hypee float in our shaders.

109
00:06:53.863 --> 00:06:57.608
And we don't need to specify
these two uniforms here.

110
00:06:57.608 --> 00:07:02.316
And we don't need to specify this built in
position because it's coming from Three.js

111
00:07:02.316 --> 00:07:02.912
already.

112
00:07:02.912 --> 00:07:05.862
That's just something as an exercise
you could try and do yourself.

