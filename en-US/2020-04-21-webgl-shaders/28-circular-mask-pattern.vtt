WEBVTT

1
00:00:00.140 --> 00:00:03.250
The first thing you wanna try and do,
and you might wanna actually copy and

2
00:00:03.250 --> 00:00:05.200
paste your whole file.

3
00:00:05.200 --> 00:00:08.730
You might want to just go into
your folder on the desktop.

4
00:00:08.730 --> 00:00:10.090
You have a shader.js.

5
00:00:10.090 --> 00:00:13.462
You might wanna duplicate that, and
leave this as a backup, because maybe what

6
00:00:13.462 --> 00:00:17.720
you're creating, you're gonna wanna
come back to this cube at some point.

7
00:00:17.720 --> 00:00:22.490
We're gonna change it, and we're gonna
start to produce something more like this.

8
00:00:22.490 --> 00:00:26.952
What we're gonna do is we're gonna
go back to our fragment shader.

9
00:00:29.823 --> 00:00:33.030
And the first thing we need to do
is we need to define just 1 circle.

10
00:00:33.030 --> 00:00:36.020
Before we start to get
a pattern of many circles,

11
00:00:36.020 --> 00:00:39.640
let's figure out how do we just
draw 1 circle within this cube.

12
00:00:42.990 --> 00:00:45.630
So remember, coordinates here.

13
00:00:45.630 --> 00:00:51.980
So I'm gonna clear this a little bit,
just clean it up, make it a vec4.

14
00:00:51.980 --> 00:00:55.872
That's just taking in the texture
coordinates, the x, and

15
00:00:55.872 --> 00:00:57.943
it's just taking this x value.

16
00:00:59.925 --> 00:01:05.321
And what we actually wanna do is we
want to create a image that is gonna be,

17
00:01:05.321 --> 00:01:11.520
let's say, white for a circle, and then
black outside of the edges of the circle.

18
00:01:12.580 --> 00:01:17.941
And so in order to do that, we're gonna
say, okay, for each pixel in this surface,

19
00:01:17.941 --> 00:01:22.850
what is the distance of that pixel to
the center of this coordinate system that

20
00:01:22.850 --> 00:01:26.422
we have here,
this little two-dimensional radiant?

21
00:01:26.422 --> 00:01:30.891
What is this current pixels value,
the distance to the center?

22
00:01:30.891 --> 00:01:34.919
And then based on that distance, if it's
over a certain limit, let's make it black,

23
00:01:34.919 --> 00:01:35.760
or make it white.

24
00:01:36.770 --> 00:01:40.910
So we're gonna say we have
a vec2 called center.

25
00:01:43.480 --> 00:01:48.207
And center is gonna be 0.5 0.5,
because remember,

26
00:01:48.207 --> 00:01:52.170
our texture coordinates
are going from 0 to 1.

27
00:01:52.170 --> 00:01:55.490
And so if we were to consider 0.5 0.5,

28
00:01:55.490 --> 00:02:01.440
that's gonna be the center of that
two-dimensional space between 0 and 1.

29
00:02:01.440 --> 00:02:05.895
And then we're gonna say what is

30
00:02:05.895 --> 00:02:11.674
the distance between the vUv and center?

31
00:02:11.674 --> 00:02:16.006
So distance is a built-in function,
part of GLSL, and

32
00:02:16.006 --> 00:02:21.070
it gives us the distance
between these two coordinates.

33
00:02:21.070 --> 00:02:22.706
So it's a Euclidean distance,

34
00:02:24.360 --> 00:02:28.410
That basically just gives us how far
away 1 coordinate is from the other.

35
00:02:31.140 --> 00:02:31.990
Now we have this float.

36
00:02:31.990 --> 00:02:35.341
We have float d.

37
00:02:35.341 --> 00:02:40.135
And so we can pass d in as our vec3 color,
instead of using vUv.x.

38
00:02:41.930 --> 00:02:43.780
And we've kinda created
something interesting, actually.

39
00:02:45.170 --> 00:02:46.230
We've created a gradient,

40
00:02:46.230 --> 00:02:48.470
a radial gradient that goes
from the center outwards.

41
00:02:49.970 --> 00:02:54.270
And what's happening is we're saying what
is the the current pixels coordinates?

42
00:02:54.270 --> 00:02:58.400
So remember, this is getting run on
every single pixel of this surface.

43
00:02:58.400 --> 00:03:02.110
And every pixel has a slightly
different coordinate here as vUv.

44
00:03:02.110 --> 00:03:05.276
So it's saying, let's say for
this current pixel here,

45
00:03:05.276 --> 00:03:07.999
what's the distance of
this pixel to the center?

46
00:03:07.999 --> 00:03:09.517
And it's gonna say well,

47
00:03:09.517 --> 00:03:13.808
the distance is maybe somewhere between
0 1 is somewhere in the middle.

48
00:03:13.808 --> 00:03:16.580
It's like a greyish 0.5 type of thing.

49
00:03:16.580 --> 00:03:21.050
The closer we get to the center, the more
likely this value's gonna get down to 0.

50
00:03:21.050 --> 00:03:25.224
So at the very center point, if we say
the distance from the very center point to

51
00:03:25.224 --> 00:03:29.227
the center the distance is gonna be 0,
because it's right on the center.

52
00:03:29.227 --> 00:03:31.262
And the further away we
get from the center,

53
00:03:31.262 --> 00:03:33.410
the higher that value's
gonna go towards 1.

54
00:03:35.618 --> 00:03:42.050
So now we just say let's make
another thing called mask.

55
00:03:42.050 --> 00:03:44.365
It's gonna be masking
whether it's inside or out.

56
00:03:44.365 --> 00:03:50.120
We're gonna say if d &gt; 0.25, make it 1.

57
00:03:50.120 --> 00:03:51.220
Otherwise, make it 0.

58
00:03:51.220 --> 00:03:52.168
It's just the ternary.

59
00:03:52.168 --> 00:03:58.085
And then we're gonna output mask by
putting that into our FragColor.

60
00:03:58.085 --> 00:04:02.873
So it's pretty hard to conceptualize
the whole current coordinate,

61
00:04:02.873 --> 00:04:07.983
current pixel thing, because this is
probably not a paradigm you've ever

62
00:04:07.983 --> 00:04:13.116
had to think about, until you start
start to work with shaders, but yeah.

63
00:04:16.640 --> 00:04:20.361
Okay, so now we have this mask value,
and all of the sudden, now we have,

64
00:04:20.361 --> 00:04:23.940
something that's giving
us a circle on each side.

65
00:04:23.940 --> 00:04:25.266
Maybe we want it the other way around.

66
00:04:25.266 --> 00:04:28.358
So instead of it being a black circle and
a white outside,

67
00:04:28.358 --> 00:04:32.260
we want it to be white on the inside,
and black on the outside.

68
00:04:32.260 --> 00:04:33.730
So we'll just do this.

69
00:04:33.730 --> 00:04:34.950
We'll just invert the mass.

70
00:04:34.950 --> 00:04:37.692
So we'll say mass = 1- mass.

71
00:04:40.064 --> 00:04:43.183
That will just invert the color,
or invert the value.

72
00:04:47.581 --> 00:04:51.739
Okay, so we're pretty close
to getting towards this,

73
00:04:51.739 --> 00:04:55.900
at least this simple version here,
just some circles.

74
00:04:55.900 --> 00:04:57.588
We're not quite there yet.

75
00:04:57.588 --> 00:05:02.511
But what we're gonna do is
we're gonna use a modulo

76
00:05:02.511 --> 00:05:08.020
operator to multiply this
coordinate to make it repeat.

77
00:05:08.020 --> 00:05:13.433
And so instead of using vUv,
we're gonna create

78
00:05:13.433 --> 00:05:19.120
another vec2, call it pos,
short for position.

79
00:05:20.310 --> 00:05:22.460
And we'll put pos inside of distance.

80
00:05:22.460 --> 00:05:26.260
So it's now the same thing, but
now we're using pos, instead of vUv.

81
00:05:28.830 --> 00:05:33.830
And here we're gonna use some sort of
wraparound, some sort of modulo to

82
00:05:33.830 --> 00:05:39.890
make it so that we can repeat
this by some sort of multiple.

83
00:05:39.890 --> 00:05:45.470
So we're gonna say mod vUv times,
let's say 8, and then 1.

84
00:05:45.470 --> 00:05:52.976
So in JavaScript, we have,
let's say a mod b.

85
00:05:52.976 --> 00:05:57.675
So this is how it looks in JavaScript,
is you just have 1 number, modulo,

86
00:05:57.675 --> 00:05:58.810
another number.

87
00:05:58.810 --> 00:06:02.280
Well, in GLSL, it's actually mod function,

88
00:06:02.280 --> 00:06:06.570
which is a built-in a and b, so
that's why we have it like this.

89
00:06:06.570 --> 00:06:10.500
We have the first parameter, which is the
a, the second parameter, which is the b.

90
00:06:10.500 --> 00:06:13.090
We're saying modulo around 1.

91
00:06:13.090 --> 00:06:16.710
So what this is doing is
saying multiply the vUv by 8.

92
00:06:16.710 --> 00:06:21.590
And so it goes from 0 to 1, and then we
multiply it by 8, so it goes from 0 to 8.

93
00:06:21.590 --> 00:06:26.270
But then we wanna wrap it around, so
that it's always actually within 0 to 1.

94
00:06:26.270 --> 00:06:28.410
And that's what this module is doing.

95
00:06:28.410 --> 00:06:32.040
And what ends up happening is
that we have many circles,

96
00:06:32.040 --> 00:06:34.460
depending on how many times we repeat it.

97
00:06:34.460 --> 00:06:38.180
So if we repeat it by twice,
we have 2 and 2.

98
00:06:45.314 --> 00:06:49.400
And now the next thing we're gonna
do is we're gonna do two things.

99
00:06:49.400 --> 00:06:53.130
One, if we're gonna use a built in
function instead of this thing.

100
00:06:53.130 --> 00:06:54.675
So this thing is a ternary,

101
00:06:54.675 --> 00:06:58.521
where we're saying if it's greater
than some threshold, use 1.

102
00:06:58.521 --> 00:07:02.510
If it's less than or
equal some threshold, use 0.

103
00:07:02.510 --> 00:07:05.540
But we can replace this with
a built-in function called step.

104
00:07:06.735 --> 00:07:09.240
In step, it takes in a threshold.

105
00:07:09.240 --> 00:07:11.860
So let's say this is
the size of the circle,

106
00:07:11.860 --> 00:07:14.640
and then it takes in a distance value.

107
00:07:14.640 --> 00:07:18.765
And it will do the same thing
as well we just wrotel.

108
00:07:20.210 --> 00:07:22.875
And we'll do it in a little
bit more of an optimized way,

109
00:07:22.875 --> 00:07:26.471
because it's generally better to use
these built-in functions in GLSL.

110
00:07:26.471 --> 00:07:30.700
Because then it can take advantage of some
of the hardware inside of our GPU for

111
00:07:30.700 --> 00:07:32.340
these specific operations.

112
00:07:34.760 --> 00:07:39.166
And so just by changing this 0.25, we're
gonna change the size of the circles.

113
00:07:44.193 --> 00:07:46.180
So how about we try doing this?

114
00:07:46.180 --> 00:07:52.691
We're gonna try making it so that instead
of all the circles being the same size,

115
00:07:52.691 --> 00:07:57.026
we're going to make them
increase based on the vUv.x

116
00:08:00.911 --> 00:08:05.680
And so what I'm doing now is I'm saying
the circles are gonna start at some value.

117
00:08:05.680 --> 00:08:08.990
Let's say they start at 0.25, so
this is this first number here.

118
00:08:10.260 --> 00:08:12.996
And then I'm gonna increase
the circle size, or

119
00:08:12.996 --> 00:08:15.206
the threshold here that we're doing.

120
00:08:15.206 --> 00:08:19.353
I'm gonna increase that
by vUv.x times 0.25.

121
00:08:19.353 --> 00:08:21.724
So if I didn't have this times 0.25,

122
00:08:21.724 --> 00:08:25.350
the circles would get
really large very quickly.

123
00:08:25.350 --> 00:08:31.841
So I'm just gonna scale that down, so
that we're only increasing them gradually.

124
00:08:31.841 --> 00:08:36.074
But maybe instead of just increasing it
like this, let's introduce some time.

125
00:08:36.074 --> 00:08:38.057
Let's introduce some animation.

126
00:08:38.057 --> 00:08:40.897
So I'm gonna say sine of time,

127
00:08:42.781 --> 00:08:46.710
+ vUv.x times some value.

128
00:08:47.780 --> 00:08:54.030
This is now using time to modulate
the size of these little circles.

129
00:08:55.280 --> 00:08:58.030
Let's try increasing the the number here,

130
00:08:58.030 --> 00:09:00.260
just playing around with
some of these values, maybe.

131
00:09:02.522 --> 00:09:08.740
That looks pretty cool,
it's like a lava lamp.

132
00:09:12.540 --> 00:09:16.535
But just by changing these values,
we can start to get some different and

133
00:09:16.535 --> 00:09:17.855
interesting results.

