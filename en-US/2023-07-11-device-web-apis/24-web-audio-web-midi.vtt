WEBVTT

1
00:00:00.240 --> 00:00:01.300
Well, what else?

2
00:00:01.300 --> 00:00:02.450
We have Web Audio.

3
00:00:03.480 --> 00:00:08.452
Web Audio is a low level API
that it's been for a while,

4
00:00:08.452 --> 00:00:15.370
that will let you generate dynamic
audio on the standard output.

5
00:00:15.370 --> 00:00:20.119
So you need to be some kind of an audio
engineer to understand actually what's

6
00:00:20.119 --> 00:00:22.090
going on inside this audio, but

7
00:00:22.090 --> 00:00:26.563
you can use this to generate dynamic
audio to create a spatial 3D audio.

8
00:00:26.563 --> 00:00:30.540
And it's even useful for,
this is an idea, right?

9
00:00:30.540 --> 00:00:32.770
For ultrasound communication with devices.

10
00:00:32.770 --> 00:00:35.770
This is just a fun idea.

11
00:00:35.770 --> 00:00:39.620
Not really for something that you
will do on your next website, but

12
00:00:39.620 --> 00:00:41.490
I have a demo of that.

13
00:00:41.490 --> 00:00:46.583
So, the idea of Web Audio is a low
level API in JavaScript where you

14
00:00:46.583 --> 00:00:52.231
can work with the audio wave, both for
receiving audio from the output,

15
00:00:52.231 --> 00:00:55.771
and to generate audio to the speaker,
okay?

16
00:00:55.771 --> 00:00:56.860
So very low level.

17
00:00:59.420 --> 00:01:03.872
There is a library known as Sonic socket,
which I think is pretty cool,

18
00:01:03.872 --> 00:01:09.580
where you can define your alphabet, so
which characters are you going to use?

19
00:01:09.580 --> 00:01:14.483
And then you can send and
receive data between two separate

20
00:01:14.483 --> 00:01:19.796
devices that are reachable by
audio using ultrasound, okay?

21
00:01:19.796 --> 00:01:25.493
So you can actually like send private
data, hidden data, without connection,

22
00:01:25.493 --> 00:01:32.220
without 3G, 4G, without Wi-Fi, without SIM
cards, just by using audio and ultrasound.

23
00:01:32.220 --> 00:01:35.190
Be careful if you have animals around you,
right?

24
00:01:35.190 --> 00:01:38.980
Anyway, pets and so on,
because you will work with ultrasound.

25
00:01:38.980 --> 00:01:40.790
But anyway, this is how it works.

26
00:01:40.790 --> 00:01:46.760
So for example, this is an example,
we turn off the Wi-Fi.

27
00:01:46.760 --> 00:01:48.785
That's not the ultrasound,
that's normal sound.

28
00:01:48.785 --> 00:01:55.337
[SOUND] Now, when you go ultrasound.

29
00:02:07.609 --> 00:02:09.160
You can log in.

30
00:02:09.160 --> 00:02:13.139
By the way, there are some devices at
your home currently using this technique,

31
00:02:13.139 --> 00:02:15.600
I'm not sure if you know that.

32
00:02:15.600 --> 00:02:20.588
So, similar techniques, not websites,
but similar techniques are being used,

33
00:02:20.588 --> 00:02:22.454
for example, to Chromecast.

34
00:02:22.454 --> 00:02:27.796
Or when you're setting up your Apple TV
for the first time, Chromecast, they're

35
00:02:27.796 --> 00:02:33.730
sending ultrasound messages to your
devices to know that it's near, its close.

36
00:02:33.730 --> 00:02:36.840
So, in this case,
you can use that on your websites.

37
00:02:36.840 --> 00:02:39.516
Again, do you understand
why what's going on?

38
00:02:39.516 --> 00:02:43.656
We have one device, let's say,
a phone that is generating a sound over

39
00:02:43.656 --> 00:02:47.390
the speaker, but
in a frequency that we don't hear.

40
00:02:47.390 --> 00:02:50.623
But another computer opens the microphone,

41
00:02:50.623 --> 00:02:55.650
receives that frequency, and
then convert that back into a message.

42
00:02:56.980 --> 00:02:58.460
It's just for fun.

43
00:02:58.460 --> 00:03:04.700
But it's interesting that you can do
that just with the Web Audio API, okay?

44
00:03:04.700 --> 00:03:09.159
So, have in mind you have that and there
is a new version of the Web Audio API,

45
00:03:09.159 --> 00:03:12.714
that's by the way it's green,
so it works on every device,

46
00:03:12.714 --> 00:03:14.970
even old devices it works.

47
00:03:14.970 --> 00:03:20.189
And now there is a new version that will
let you create audiolets, it's a thread.

48
00:03:20.189 --> 00:03:24.660
So you can create a worker, a thread,
specifically targeting audio.

49
00:03:24.660 --> 00:03:28.698
So there is a whole world around audio,
I'm not an audio engineer, but

50
00:03:28.698 --> 00:03:31.530
there are much more to
learn about Web Audio.

51
00:03:31.530 --> 00:03:32.568
I think it's pretty cool.

52
00:03:35.772 --> 00:03:36.965
Web MIDI.

53
00:03:36.965 --> 00:03:40.368
So, we mentioned Web HID, right,?

54
00:03:40.368 --> 00:03:43.520
Human Interface Device.

55
00:03:43.520 --> 00:03:46.306
MIDI is something similar,

56
00:03:46.306 --> 00:03:51.870
the difference is that
it's much older than HID.

57
00:03:51.870 --> 00:03:57.688
So I have a piano at home,
it's been with me for

58
00:03:57.688 --> 00:04:04.720
40, no 35 years, and
it's a MIDI interface.

59
00:04:04.720 --> 00:04:09.685
So actually, I can connect that
musical instrument to my computer and

60
00:04:09.685 --> 00:04:11.460
use it from JavaScript.

61
00:04:12.680 --> 00:04:16.500
The thing is that it's also an interface
that you need to understand.

62
00:04:16.500 --> 00:04:22.230
It's not a simple interface only because
it's not actually modern, right?

63
00:04:22.230 --> 00:04:25.130
But anyway, it's a low-level API.

64
00:04:25.130 --> 00:04:29.515
And typically, you use this to connect
to music devices, synthesizers,

65
00:04:29.515 --> 00:04:34.360
keyboards, guitars, drum machines,
and also a lot of lighting systems.

66
00:04:34.360 --> 00:04:39.820
Systems that organize lights in
a showroom are sometimes MIDI.

67
00:04:39.820 --> 00:04:46.020
It's an old spec, so today most of these
systems are moving to a new protocol.

68
00:04:46.020 --> 00:04:47.920
But anyway, it's still there.

69
00:04:47.920 --> 00:04:51.290
And Web MIDI is available on Chrome and
Firefox.

70
00:04:51.290 --> 00:04:54.248
Firefox already implemented that,
but not Safari.

71
00:04:54.248 --> 00:04:56.891
Safari started implementation but
then stopped.

72
00:04:56.891 --> 00:05:00.872
So in the source code of WebKit,
you can find references to Web MIDI, but

73
00:05:00.872 --> 00:05:02.240
then it's not there.

74
00:05:02.240 --> 00:05:04.661
And then you can receive and
send MIDI messages, and

75
00:05:04.661 --> 00:05:06.816
you need to understand
what that protocol is.

76
00:05:06.816 --> 00:05:09.670
This is how it looks like.

77
00:05:09.670 --> 00:05:14.530
Navigator, request media access,
and then you pass two callbacks.

78
00:05:14.530 --> 00:05:17.450
You can see that even
the API is kind of weird.

79
00:05:17.450 --> 00:05:22.217
It's not exactly promise base,
it's promise base but

80
00:05:22.217 --> 00:05:27.050
most of the time it's kind of old,
so it's weird.

81
00:05:27.050 --> 00:05:30.490
But anyway, all the APIs look
the same once you get into that.

