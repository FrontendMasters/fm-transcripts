WEBVTT

1
00:00:00.230 --> 00:00:03.820
So also changing that same manifest file.

2
00:00:03.820 --> 00:00:07.519
You can express to the OS
that you are a CSV reader or

3
00:00:07.519 --> 00:00:10.650
you are a PDF reader or a recipe reader.

4
00:00:10.650 --> 00:00:16.024
Let's say that we invented our own recipe
format for our app, .recipe and

5
00:00:16.024 --> 00:00:20.653
you can say, hey OS, when there is
a file in the operating system,

6
00:00:20.653 --> 00:00:22.990
.recipe I can open that file.

7
00:00:24.000 --> 00:00:27.720
So you express that as
a metadata in the manifest, and

8
00:00:27.720 --> 00:00:33.660
then from JavaScript, when you start
your app, there is a launch queue.

9
00:00:33.660 --> 00:00:36.576
In that queue,
you can consume that queue and

10
00:00:36.576 --> 00:00:41.123
you will receive possible files that
the operating system sends you.

11
00:00:41.123 --> 00:00:42.040
It make sense.

12
00:00:42.040 --> 00:00:46.429
So then, when the user is in the Finder,
or in Windows Explorer, or

13
00:00:46.429 --> 00:00:50.908
he's double clicking on our 
.recipe file, your PWA will open it.

14
00:00:52.649 --> 00:00:53.797
That's it make sense?

15
00:00:53.797 --> 00:00:57.160
So then you're like any other native app,
yeah.

16
00:00:57.160 --> 00:01:00.850
&gt;&gt; What are like the pros and cons
between using a PWA versus like Electron.

17
00:01:02.240 --> 00:01:06.370
&gt;&gt; So if you're using Electron
on desktop or PhoneGap or

18
00:01:06.370 --> 00:01:11.720
Apache Cordova on mobile,
you have pros and cons, okay.

19
00:01:11.720 --> 00:01:15.050
So the PWA doesn't execute native code.

20
00:01:16.340 --> 00:01:19.940
So you are under
the umbrella of the browser,

21
00:01:19.940 --> 00:01:24.120
of the capabilities that
we have been seeing today.

22
00:01:25.130 --> 00:01:27.490
So that's the pro and
con at the same time.

23
00:01:28.510 --> 00:01:32.746
When you're using Electron,
well first, Electron in particular,

24
00:01:32.746 --> 00:01:37.701
you're shipping your own Chromium browser
with an executable, which means that

25
00:01:37.701 --> 00:01:42.740
your app even if it's a Hello World,
will take 50 megabytes, all right?

26
00:01:42.740 --> 00:01:45.340
So that's a disadvantage.

27
00:01:45.340 --> 00:01:50.270
And also it won't get the browser updates.

28
00:01:50.270 --> 00:01:53.160
So if you don't recompile your app and

29
00:01:53.160 --> 00:01:59.209
the user is not really updating your app,
it will still be using an old engine,

30
00:01:59.209 --> 00:02:04.203
the ancient that you use when you
compile that for the first time.

31
00:02:04.203 --> 00:02:08.230
With the PWA,
also you get automatic updates.

32
00:02:08.230 --> 00:02:10.915
If you change the files on your server, so

33
00:02:10.915 --> 00:02:15.466
if you deploy a new version of your app,
users will get that silently.

34
00:02:15.466 --> 00:02:19.240
You don't need the user to update that or

35
00:02:19.240 --> 00:02:24.240
wait at night when the App Store
is upgrading things.

36
00:02:25.280 --> 00:02:27.985
The con is that if you need a feature or

37
00:02:27.985 --> 00:02:33.942
a capability that we didn't mention today,
you can't do that with a PWA alone.

38
00:02:33.942 --> 00:02:39.470
You need to go to the store, or
you need to create an Electron wrapper.

39
00:02:39.470 --> 00:02:44.002
So, in this case,
we were expressing the ability or

40
00:02:44.002 --> 00:02:47.870
the need to handle a new kind of file.

41
00:02:47.870 --> 00:02:49.980
Also, we can do that with URL protocols.

42
00:02:51.470 --> 00:02:55.630
So this is useful, for example,
you send an e-mail to the user.

43
00:02:55.630 --> 00:03:01.306
Let's say we are doing a front-end master
of PWA, and then I'm sending you an e-mail

44
00:03:01.306 --> 00:03:06.910
with a coupon or a hidden video that only
you can see if you click on that link.

45
00:03:06.910 --> 00:03:09.470
Well, how can we open the PWA?

46
00:03:09.470 --> 00:03:12.693
Because if we click to
frontendmasters.com,

47
00:03:12.693 --> 00:03:16.240
we will open the website,
not the actual PWA.

48
00:03:16.240 --> 00:03:19.900
Well, we can handle our own protocol.

49
00:03:19.900 --> 00:03:25.430
So instead of HTTP, the link can be
something like frontendmasters://, okay?

50
00:03:27.320 --> 00:03:32.583
So in this case, the protocol
handler lets you subscribe to one

51
00:03:32.583 --> 00:03:38.160
of the standard protocols such as mailto,
tel, for a phone call.

52
00:03:38.160 --> 00:03:42.208
If you have ever seen a link
to a phone call, it's tel:.

53
00:03:42.208 --> 00:03:46.575
So you can subscribe to those,
the standard ones, or

54
00:03:46.575 --> 00:03:50.748
if you wanna create your
own customized protocol,

55
00:03:50.748 --> 00:03:53.867
it must have a prefix of web+, okay?

56
00:03:53.867 --> 00:03:56.110
That is just how they set up this.

57
00:03:56.110 --> 00:04:00.220
So in this case,
it must be web+frontendmasters.

58
00:04:00.220 --> 00:04:04.950
And you define the URL pattern that
you wanna load in the engine.

59
00:04:04.950 --> 00:04:09.379
So you can say that,
when there is a URL like that,

60
00:04:09.379 --> 00:04:14.864
you wanna go to a /watch on your
web app for with an argument and

61
00:04:14.864 --> 00:04:22.172
that %s will be replaced by whatever
comes after forward slash, forward slash.

62
00:04:22.172 --> 00:04:27.101
Example, this is how we will look like,
if I wanna link to my Swift course,

63
00:04:27.101 --> 00:04:30.175
I do have a Swift course on iOS on
Frontend Masters.

64
00:04:30.175 --> 00:04:37.530
You can be web+frontendmasters:swift and
that swift argument

65
00:04:37.530 --> 00:04:42.788
will be received by
JavaScript in the path name.

66
00:04:42.788 --> 00:04:45.011
Actually, in the query in the path.

67
00:04:45.011 --> 00:04:49.930
The path will be watch and
the query will be argument=swift.

68
00:04:49.930 --> 00:04:52.320
Does it make sense?

69
00:04:54.020 --> 00:04:58.904
So no matter where in the OS you
have a link to web+frontendmasters,

70
00:04:58.904 --> 00:05:00.483
your PWA will react.

71
00:05:02.241 --> 00:05:03.871
That's protocol handler.

72
00:05:03.871 --> 00:05:06.980
So you can see here
the integration with the OS.

73
00:05:06.980 --> 00:05:11.386
Because now, I'm not talking
just about a website, an app,

74
00:05:11.386 --> 00:05:16.400
a native app, can actually trigger
that link and it can open your PWA.

