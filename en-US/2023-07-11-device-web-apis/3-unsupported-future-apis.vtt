WEBVTT

1
00:00:00.000 --> 00:00:02.169
And finally, we have red.

2
00:00:02.169 --> 00:00:04.376
But we won't cover red here,

3
00:00:04.376 --> 00:00:10.126
unless you have questions in terms of
can I do something with the JavaScript?

4
00:00:10.126 --> 00:00:15.010
And if the answer is no, it's because
that capability is not yet there.

5
00:00:15.010 --> 00:00:21.210
And it's not even yellow, so there
are still not trials or experimental APIs.

6
00:00:21.210 --> 00:00:26.210
So we're looking at long term maybe,
or maybe never.

7
00:00:26.210 --> 00:00:30.492
Because sometimes it's about security,
because websites, yeah, we're good people

8
00:00:30.492 --> 00:00:34.444
all here in the room and you there, but we
know that there are bad actors out there.

9
00:00:34.444 --> 00:00:38.265
So we don't want user to
get into a website and

10
00:00:38.265 --> 00:00:43.104
get tricked or get their data stolen or
things like that.

11
00:00:43.104 --> 00:00:48.488
So that's why there are some
capabilities that will probably never

12
00:00:48.488 --> 00:00:53.695
be available directly for the web,
okay, for the web platform.

13
00:00:53.695 --> 00:00:56.840
And what happens if you really
need that for some reason?

14
00:00:56.840 --> 00:01:00.764
I mean,
your business model relies on that.

15
00:01:00.764 --> 00:01:05.789
So the only option that you have is
to create a progressive web app,

16
00:01:05.789 --> 00:01:10.030
a PWA, so a web app,
ship that web app to the app stores.

17
00:01:11.340 --> 00:01:16.540
Or for desktop, you can embed that
web app in a native container.

18
00:01:17.650 --> 00:01:20.615
So when you do that, you can connect,

19
00:01:20.615 --> 00:01:25.077
you can bridge your JavaScript
with native code, okay?

20
00:01:25.077 --> 00:01:28.190
But that's not gonna work
in a URL in the browser.

21
00:01:29.610 --> 00:01:37.038
You will need to ship that as
a PWA built in native app, okay?

22
00:01:37.038 --> 00:01:40.364
So you still have that option, okay?

23
00:01:40.364 --> 00:01:43.330
So on desktop,
it can be things like Electron.

24
00:01:44.550 --> 00:01:49.510
On mobile, we used to use PhoneGap,
in case you have heard about that, or

25
00:01:49.510 --> 00:01:50.718
Apache Cordova.

26
00:01:50.718 --> 00:01:53.690
Now, you also have Capacitor
from the Ionic team.

27
00:01:53.690 --> 00:01:56.120
Different tools, different frameworks
that will let you do that.

28
00:01:56.120 --> 00:01:58.420
We won't focus on that here today.

29
00:01:58.420 --> 00:02:03.031
But have in mind that the only way that
you have to extend that is through

30
00:02:03.031 --> 00:02:04.134
those options.

31
00:02:04.134 --> 00:02:08.785
And of course, you also have
the ability to create browser blinds,

32
00:02:08.785 --> 00:02:14.600
extensions for the browser, but
that's not typically targeting one app.

33
00:02:14.600 --> 00:02:17.510
You could create an extension for
your own app.

34
00:02:17.510 --> 00:02:22.409
But it's kind of weird,
typically the extension is

35
00:02:22.409 --> 00:02:26.094
multi-origin, so multi-website.

36
00:02:26.094 --> 00:02:29.052
So yeah, question.

37
00:02:29.052 --> 00:02:32.466
&gt;&gt; I have a quick question
on judging by the maturity.

38
00:02:32.466 --> 00:02:33.265
&gt;&gt; Yeah.

39
00:02:33.265 --> 00:02:39.073
&gt;&gt; Is that based on making that API and
then sending it over to Google or

40
00:02:39.073 --> 00:02:45.622
different browsers and having them kind
of release it in the next release.

41
00:02:45.622 --> 00:02:49.730
Is that how that would work for
it to be available?

42
00:02:49.730 --> 00:02:52.652
&gt;&gt; In case you have an idea for
an API, you say, or-

43
00:02:52.652 --> 00:02:54.209
&gt;&gt; Yeah, or just judging the API and

44
00:02:54.209 --> 00:02:57.669
just how it's available in one place and
it's not available on the next.

45
00:02:57.669 --> 00:03:01.304
&gt;&gt; Okay, so
they have to understand how this works.

46
00:03:01.304 --> 00:03:05.984
So actually, if we say we wanna
create a new API, I don't know,

47
00:03:05.984 --> 00:03:09.712
to move the table,
because now the table has a way,

48
00:03:09.712 --> 00:03:14.074
it has Bluetooth or wherever,
so we have a table movement.

49
00:03:14.074 --> 00:03:16.999
I'm talking about physical table,
not the table HTML element.

50
00:03:16.999 --> 00:03:21.916
So, well, the way that works is
typically someone creates a proposal,

51
00:03:21.916 --> 00:03:24.093
today typically on GitHub, and

52
00:03:24.093 --> 00:03:29.350
you start touching people from the web
standards that are looking into that.

53
00:03:30.780 --> 00:03:34.580
Typically you need a browser to say,
hey, that's a good idea.

54
00:03:34.580 --> 00:03:39.842
Let's see if we can implement that,
typically first as a yellow API.

55
00:03:39.842 --> 00:03:44.447
And then we experiment with that a couple
of months or sometimes even years.

56
00:03:44.447 --> 00:03:48.272
And after that, someone says,
okay, I think I like it, so

57
00:03:48.272 --> 00:03:49.889
I will ship it in stable.

58
00:03:49.889 --> 00:03:51.335
And what about the others?

59
00:03:51.335 --> 00:03:54.819
I don't know, sometimes the others
will say, that's a good idea,

60
00:03:54.819 --> 00:03:56.331
let's do that again, also.

61
00:03:56.331 --> 00:03:59.362
And sometimes the discussion says,
no, we don't want that, because

62
00:03:59.362 --> 00:04:03.170
different companies, different policies,
different ideas of what the web should be.

63
00:04:05.380 --> 00:04:08.812
Sometimes you have, for example, Safari,

64
00:04:08.812 --> 00:04:12.706
Apple implementing APIs
many years after Chrome.

65
00:04:12.706 --> 00:04:17.046
For example,
they have just implemented web push

66
00:04:17.046 --> 00:04:22.213
notifications after seven years
of not wanting to do that,

67
00:04:22.213 --> 00:04:25.849
and Chrome and Firefox already had that.

68
00:04:25.849 --> 00:04:30.408
And there are other APIs that we will
see later today, that Safari said,

69
00:04:30.408 --> 00:04:32.440
we are not going to do that ever.

70
00:04:33.630 --> 00:04:36.866
So that how the process works.

71
00:04:36.866 --> 00:04:43.169
So you can create your own API if you
want, but if you don't have a browser,

72
00:04:43.169 --> 00:04:47.887
doing something with it,
it will never reach a stable.

73
00:04:47.887 --> 00:04:51.515
And by the way, after a while on the W3C,

74
00:04:51.515 --> 00:04:56.912
that's the organization that
sets the standard for the web,

75
00:04:56.912 --> 00:05:02.307
if only Chrome or Chromium
implements the API and no one else,

76
00:05:02.307 --> 00:05:07.637
typically, they never get that
spec into recommendation.

77
00:05:07.637 --> 00:05:11.503
And there are a lot of APIs that are not
a recommendation yet, they are draft, or

78
00:05:11.503 --> 00:05:15.050
they say, you know what, no,
we are not going to recommend this.

79
00:05:15.050 --> 00:05:20.977
But even Chrome is still supporting that
and Chrome says, okay, we have it anyway.

80
00:05:20.977 --> 00:05:24.268
So we can say that that's
not a standard API now,

81
00:05:24.268 --> 00:05:27.900
because the standard
process rejected the API.

82
00:05:27.900 --> 00:05:31.835
And there are a couple that were
rejected by the standard process, but

83
00:05:31.835 --> 00:05:33.847
they're still working on Chrome.

84
00:05:33.847 --> 00:05:36.120
You can still use them,
but only on Chrome.

85
00:05:36.120 --> 00:05:40.828
And there are others that are still
being discussed in the standard process.

86
00:05:40.828 --> 00:05:46.119
So we will see in the future if they
will get into your recommendation or

87
00:05:46.119 --> 00:05:48.188
reject them, make sense?

88
00:05:48.188 --> 00:05:52.796
&gt;&gt; So with that being said,
what are some best practices for

89
00:05:52.796 --> 00:05:58.180
utilizing these API effectively
in the web application and PWAs?

90
00:05:58.180 --> 00:05:58.946
What are the best practices?
&gt;&gt; Well,

91
00:05:58.946 --> 00:06:02.489
I think it depends of where
your capability stands.

92
00:06:02.489 --> 00:06:04.040
If it's a green, go ahead.

93
00:06:04.040 --> 00:06:05.583
If it's a light green,

94
00:06:05.583 --> 00:06:09.690
you need to be sure to first check
if the API is available or not.

95
00:06:09.690 --> 00:06:13.967
Later with code, we'll see how you can
check if an API is available or not.

96
00:06:13.967 --> 00:06:18.225
Unfortunately, we don't have
an API to check APIs, okay?

97
00:06:18.225 --> 00:06:22.736
So we don't have a way to say
navigator.supports, and I pass an API,

98
00:06:22.736 --> 00:06:25.728
it give me true or false,
we don't have that.

99
00:06:25.728 --> 00:06:28.419
So typically what we do in JavaScript,

100
00:06:28.419 --> 00:06:33.840
because JavaScript is a dynamic language,
so there are ways to do that.

101
00:06:33.840 --> 00:06:38.566
Most of these APIs are typically
injecting into the window

102
00:06:38.566 --> 00:06:43.300
global context a constructor,
a function, or an event.

103
00:06:43.300 --> 00:06:46.314
So the way to know if an API is available,

104
00:06:46.314 --> 00:06:51.192
that we don't know if it works,
but at least if it's available,

105
00:06:51.192 --> 00:06:56.160
the API, is to check if one particular
constructor is available in

106
00:06:56.160 --> 00:07:00.976
the window object, or
if a property is available in one object.

107
00:07:00.976 --> 00:07:04.740
For example,
let me give you a quick idea so far.

108
00:07:04.740 --> 00:07:10.569
The Bluetooth API that we will cover
later, that will let you connect

109
00:07:10.569 --> 00:07:16.020
to bluetooth devices,
it lives under navigator.bluetooth.

110
00:07:16.020 --> 00:07:18.420
If a browser is not supporting the API,

111
00:07:18.420 --> 00:07:22.436
you won't have the bluetooth
property in the navigator object.

112
00:07:22.436 --> 00:07:26.175
So it's just a quick if,
check in for that property.

113
00:07:26.175 --> 00:07:30.264
And that's how you know on
the fly with your real users,

114
00:07:30.264 --> 00:07:33.318
real devices, if the API is there or not.

