WEBVTT

1
00:00:00.000 --> 00:00:02.216
Gamepad API.

2
00:00:02.216 --> 00:00:04.530
I have a Gamepad API here with me.

3
00:00:04.530 --> 00:00:07.914
And this is the time where we're going
to start working with our project,

4
00:00:07.914 --> 00:00:09.350
with the Gamepad API.

5
00:00:09.350 --> 00:00:13.800
So this is a green light API, green.

6
00:00:13.800 --> 00:00:15.990
It works everywhere, which is cool.

7
00:00:17.710 --> 00:00:23.150
So, the Gamepad API will let
you connect and use a gamepad.

8
00:00:23.150 --> 00:00:30.130
Any gamepad will work, if it's using
the gamepad interface with the OS.

9
00:00:30.130 --> 00:00:33.090
It can be USB or
it can be connected through Bluetooth.

10
00:00:34.250 --> 00:00:35.220
It works.

11
00:00:35.220 --> 00:00:37.590
And it's a high-level API.

12
00:00:37.590 --> 00:00:42.326
Which means that I don't need
to know the specifics of

13
00:00:42.326 --> 00:00:45.920
this gamepad to actually work with it.

14
00:00:45.920 --> 00:00:50.990
It's a gamepad, so I know it will have
buttons, and it will have access.

15
00:00:50.990 --> 00:00:52.760
That's all I need to know.

16
00:00:52.760 --> 00:00:55.110
And then I can use the gamepad.

17
00:00:55.110 --> 00:00:57.210
So this is of course cool for games.

18
00:00:57.210 --> 00:00:59.290
It's low latency.

19
00:00:59.290 --> 00:01:03.123
It depends on the frequency that you want,
but for

20
00:01:03.123 --> 00:01:06.940
standard situations is low latency.

21
00:01:06.940 --> 00:01:11.420
Actually, how to use that,
it's not what you're expecting.

22
00:01:12.620 --> 00:01:14.830
It happened to me the first
time I used the API.

23
00:01:14.830 --> 00:01:17.510
So I have a gamepad,
the gamepad has buttons, right?

24
00:01:17.510 --> 00:01:23.750
So you say, okay, I wanna take
the click of one button, like mouse.

25
00:01:23.750 --> 00:01:25.830
That's not how that works.

26
00:01:25.830 --> 00:01:30.736
So actually what you need to do is you
create a game loop with request animation

27
00:01:30.736 --> 00:01:31.780
frame.

28
00:01:31.780 --> 00:01:35.802
That's a way to execute
a timer on every frame on

29
00:01:35.802 --> 00:01:39.400
the animation that you have on a game.

30
00:01:39.400 --> 00:01:40.769
Even if you don't have a game,
it doesn't matter.

31
00:01:42.160 --> 00:01:48.420
And you need to check the status
of the gamepad all the time.

32
00:01:48.420 --> 00:01:51.920
And you will get a boolean
if one key is pressed.

33
00:01:53.230 --> 00:01:54.090
So I will get the boolean.

34
00:01:54.090 --> 00:01:57.380
The problem is that I need
to save that somewhere.

35
00:01:57.380 --> 00:01:59.990
And if I keep my finger pressed.

36
00:01:59.990 --> 00:02:04.970
Of course, I'm keeping true for
several seconds.

37
00:02:04.970 --> 00:02:09.328
So if you fire the click handler,
when you see a true you will have

38
00:02:09.328 --> 00:02:13.750
a problem because you
will fire that 100 times.

39
00:02:13.750 --> 00:02:18.628
So requestAnimationFrame can be 60
frames per second, 30 frames per second,

40
00:02:18.628 --> 00:02:20.030
depends on the device.

41
00:02:20.030 --> 00:02:26.020
So you might be triggering that
event handler 30 or 60 times.

42
00:02:26.020 --> 00:02:28.310
So we need to trick it a little bit.

43
00:02:28.310 --> 00:02:32.203
I will show you how I did that
with our project in a second.

44
00:02:32.203 --> 00:02:36.912
And the same happens with the axis.

45
00:02:36.912 --> 00:02:39.664
You will get actually four axes,

46
00:02:39.664 --> 00:02:44.496
because you have in this case two,
and then X and Y on each.

47
00:02:44.496 --> 00:02:49.126
And you get a value from -1 to 1,

48
00:02:49.126 --> 00:02:53.080
depends on where you are.

49
00:02:53.080 --> 00:02:53.930
It's a float value.

