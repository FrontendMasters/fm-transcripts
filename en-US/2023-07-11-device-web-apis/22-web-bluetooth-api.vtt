WEBVTT

1
00:00:00.057 --> 00:00:02.281
Now we're going to talk about
external hardware and devices.

2
00:00:02.281 --> 00:00:07.434
I know what you're thinking, well,
we have been already dealing with external

3
00:00:07.434 --> 00:00:12.585
hardware and devices, and yeah, that's
true, but we have been dealing with,

4
00:00:12.585 --> 00:00:16.402
let's say, standard interfaces,
standard protocols.

5
00:00:16.402 --> 00:00:23.257
But also,
we have a way to be even more low level,

6
00:00:23.257 --> 00:00:28.118
such as connecting to Bluetooth.

7
00:00:28.118 --> 00:00:32.819
Web Bluetooth is one of the APIs that,
the first API actually that

8
00:00:32.819 --> 00:00:36.935
will let us communicate with
a lot of hardware out there.

9
00:00:36.935 --> 00:00:42.012
Safari and
Firefox are not implementing the API.

10
00:00:42.012 --> 00:00:44.682
It feels like they will never do that.

11
00:00:44.682 --> 00:00:48.020
I mean, no one knows, but
there was a big discussion.

12
00:00:48.020 --> 00:00:52.569
And I was part of the discussion,
by the way, on social media with

13
00:00:52.569 --> 00:00:57.474
the Apple teams and the Chrome teams,
I was in the middle, actually.

14
00:00:57.474 --> 00:01:01.974
And Apple said that they're not
going to implement this because they

15
00:01:01.974 --> 00:01:06.177
feel it's a big security risk,
and blah, blah, blah, blah.

16
00:01:06.177 --> 00:01:10.703
The Chrome's team says that that's not
the case, that is just imagination,

17
00:01:10.703 --> 00:01:11.946
blah, blah, blah.

18
00:01:11.946 --> 00:01:17.409
Anyway, we have Web Bluetooth
only on Chromium-based browsers.

19
00:01:17.409 --> 00:01:23.455
And not even on all of them, Brave, for
example, took that part off of Chromium.

20
00:01:23.455 --> 00:01:26.723
So if you're using Brave,
you won't have Web Bluetooth.

21
00:01:26.723 --> 00:01:30.600
Well, Web Bluetooth will, of course, let
you communicate with Bluetooth devices.

22
00:01:30.600 --> 00:01:36.583
But not every Bluetooth devices,
only BLE, that's Bluetooth Low Energy.

23
00:01:36.583 --> 00:01:40.280
It's kind of the modern Bluetooth world.

24
00:01:40.280 --> 00:01:46.166
I'm not sure if you remember Bluetooth
devices 10 years ago, 15 years ago.

25
00:01:46.166 --> 00:01:50.354
I'm not sure if you remember
that you have a handshaking,

26
00:01:50.354 --> 00:01:55.234
where you have to handshake one
device with the other one with code.

27
00:01:55.234 --> 00:01:58.451
Well, that was not Bluetooth Low Energy.

28
00:01:58.451 --> 00:02:03.135
And that Bluetooth can have more distance,

29
00:02:03.135 --> 00:02:06.432
low energy is only ten meters.

30
00:02:06.432 --> 00:02:10.850
But anyway, most of the modern small
devices are Bluetooth Low Energy.

31
00:02:10.850 --> 00:02:13.692
I mean, my Apple Watch is low energy.

32
00:02:13.692 --> 00:02:16.743
So you can scan for devices.

33
00:02:16.743 --> 00:02:20.212
You can scan the services
available on those devices.

34
00:02:20.212 --> 00:02:23.988
And here comes the part where
it will get really tricky.

35
00:02:23.988 --> 00:02:28.674
Web Bluetooth, Bluetooth in general,
not just Web Bluetooth, Bluetooth,

36
00:02:28.674 --> 00:02:32.088
its complicated,
the protocol is really complicated.

37
00:02:32.088 --> 00:02:35.870
So each device can expose services.

38
00:02:35.870 --> 00:02:38.831
The service has an ID.

39
00:02:38.831 --> 00:02:43.638
There are some IDs that
are kind of standard, such as,

40
00:02:43.638 --> 00:02:47.340
I have a service of battery level.

41
00:02:47.340 --> 00:02:51.104
So you can ask me about my battery,
how is my battery?

42
00:02:51.104 --> 00:02:52.536
So that's a standard.

43
00:02:52.536 --> 00:02:57.206
Another standard service can be,
for example, headphones.

44
00:02:57.206 --> 00:03:03.264
Another one, heart measurements for

45
00:03:03.264 --> 00:03:05.919
a heart sensor.

46
00:03:05.919 --> 00:03:07.307
So there are a couple.

47
00:03:07.307 --> 00:03:15.000
But for the rest, it's like any hardware
manufacturer can create its own ID.

48
00:03:15.000 --> 00:03:19.620
So what's the ID that you need to use
to communicate with one particular

49
00:03:19.620 --> 00:03:20.930
Bluetooth device?

50
00:03:20.930 --> 00:03:23.065
You need to find a manual,

51
00:03:23.065 --> 00:03:27.916
you need to find a tool that will
let you scan that device, or

52
00:03:27.916 --> 00:03:34.030
there are tools that will help you
inspect a communication, like a proxy,

53
00:03:34.030 --> 00:03:39.689
sniffing into the Bluetooth
communication to see what's going on.

54
00:03:39.689 --> 00:03:43.483
And there are a lot of people in
the community that are already doing

55
00:03:43.483 --> 00:03:45.806
that with a lot of well-known devices.

56
00:03:45.806 --> 00:03:52.077
For example, let me show you,
there is a BB-8 drone,

57
00:03:52.077 --> 00:03:56.088
have you seen that one, by Sphero?

58
00:03:56.088 --> 00:03:59.888
And if you say BB-8 drone,
for example, Web Bluetooth,

59
00:03:59.888 --> 00:04:03.081
Web Bluetooth, or
even not Web Bluetooth, NPM.

60
00:04:03.081 --> 00:04:08.115
You will find projects
that already did the dirty

61
00:04:08.115 --> 00:04:15.986
job of analyzing the messages that you
have to send to one particular thing.

62
00:04:15.986 --> 00:04:18.700
And then you can take it from there, okay?

63
00:04:18.700 --> 00:04:22.393
Yeah, of course,
you need the hardware, but

64
00:04:22.393 --> 00:04:27.129
it's difficult to understand,
and you will see an example

65
00:04:27.129 --> 00:04:31.789
now that I have here with me
how complicated it can become.

66
00:04:31.789 --> 00:04:34.916
Okay, so
I'm not saying don't use Web Bluetooth,

67
00:04:34.916 --> 00:04:37.484
I'm saying that it's hard world, okay?

68
00:04:37.484 --> 00:04:40.880
It's not so simple as other web APIs,

69
00:04:40.880 --> 00:04:46.834
because Bluetooth is complicated,
and it's not just services.

70
00:04:46.834 --> 00:04:50.645
So we have devices,
each device is exposing services,

71
00:04:50.645 --> 00:04:53.168
it can expose more than one service.

72
00:04:53.168 --> 00:04:56.022
Then you can connect to those services, so

73
00:04:56.022 --> 00:04:59.044
there is a connection
process known as GATT.

74
00:04:59.044 --> 00:05:04.059
So you connect to the services, and
the complexity doesn't end there.

75
00:05:04.059 --> 00:05:05.860
Each service can send and

76
00:05:05.860 --> 00:05:10.245
receive data through something
known as a characteristic.

77
00:05:10.245 --> 00:05:13.586
So each service has
different characteristics.

78
00:05:13.586 --> 00:05:16.854
Each characteristic,
we have also a different ID.

79
00:05:16.854 --> 00:05:20.823
So then you connect to
a service on a device, and

80
00:05:20.823 --> 00:05:24.197
then you can write data or
read data to and

81
00:05:24.197 --> 00:05:29.873
from a characteristic that you also
need to know the ID beforehand.

82
00:05:29.873 --> 00:05:35.125
Some devices can expose the list of
services, so I have this, this, and that.

83
00:05:35.125 --> 00:05:37.489
Some devices will have hidden services.

84
00:05:37.489 --> 00:05:41.530
So if you don't know the ID,
you can't connect to it.

85
00:05:41.530 --> 00:05:42.672
It gets complicated.

86
00:05:42.672 --> 00:05:44.429
It's interesting but complicated.

87
00:05:44.429 --> 00:05:46.707
It's a very low-level API.

88
00:05:46.707 --> 00:05:51.695
So if you wanna connect to this little
guy here through Web Bluetooth, you can.

89
00:05:51.695 --> 00:05:58.613
But it's much better to use the gamepad
API, even the WebHID API, okay?

90
00:05:58.613 --> 00:06:02.590
By the way,
you cannot connect to some services.

91
00:06:02.590 --> 00:06:07.905
There are some services on the web
that are restricted, for example,

92
00:06:07.905 --> 00:06:13.040
FTP, or for example, there is FTP
over Bluetooth exists to send and

93
00:06:13.040 --> 00:06:15.222
receive files, and audio.

94
00:06:15.222 --> 00:06:19.659
So you cannot connect
to a Bluetooth speaker,

95
00:06:19.659 --> 00:06:23.771
microphone, or headphone, you cannot.

96
00:06:23.771 --> 00:06:28.808
I mean, the user can connect that to
the OS, and then the website can use that

97
00:06:28.808 --> 00:06:34.501
as an external speaker or microphone, but
you cannot talk low level to that service.

98
00:06:34.501 --> 00:06:37.666
So we need to also manipulate
in JavaScript binary data.

99
00:06:37.666 --> 00:06:42.906
So we need to understand how to
create Uint arrays in JavaScript,

100
00:06:42.906 --> 00:06:48.549
how to manipulate bits and create
that kind of data, if you like that.

101
00:06:48.549 --> 00:06:51.042
And we need to understand
the devices communication protocol,

102
00:06:51.042 --> 00:06:51.972
as I mentioned before.

103
00:06:51.972 --> 00:06:53.737
This is how it looks like.

104
00:06:53.737 --> 00:07:01.106
So first, we request access to a device,
so this is this part.

105
00:07:01.106 --> 00:07:04.649
For example,
I can request devices without no filter.

106
00:07:04.649 --> 00:07:09.505
If I do that, I will see a list of
all the Bluetooth devices around me.

107
00:07:09.505 --> 00:07:15.183
Okay, or you can say, well,
I really wanted a device with that name,

108
00:07:15.183 --> 00:07:19.145
or I want a device that
is exposing this service.

109
00:07:19.145 --> 00:07:23.583
Instead of showing me all
the Bluetooth devices out there,

110
00:07:23.583 --> 00:07:28.655
I can just see all the ones with
the heart rate service, only those.

111
00:07:28.655 --> 00:07:33.760
By the way, you cannot get the list as
a developer, you don't get the list.

112
00:07:35.160 --> 00:07:39.814
So I'm saying request device with
a filter, the user will see a UI,

113
00:07:39.814 --> 00:07:42.681
a dialog, the user will pick the device.

114
00:07:42.681 --> 00:07:46.335
For security reasons or
for privacy reasons,

115
00:07:46.335 --> 00:07:50.371
your web app cannot scan
the Bluetooth around you.

116
00:07:50.371 --> 00:07:50.946
Makes sense?

117
00:07:50.946 --> 00:07:55.909
So we cannot receive the list by default,
by default, atleast.

118
00:07:55.909 --> 00:07:59.907
We request the device and
then the user will pick one.

119
00:07:59.907 --> 00:08:04.835
When we have this device,
we create a server that is a connection to

120
00:08:04.835 --> 00:08:08.449
that device, and
we get the service with the ID.

121
00:08:08.449 --> 00:08:15.158
The ID can be a string or
it can be a big number, a large number.

122
00:08:15.158 --> 00:08:22.077
Then when we get the service, we get
the characteristic of that service, and

123
00:08:22.077 --> 00:08:28.252
then we can receive data with
a characteristicvaluechanged event,

124
00:08:28.252 --> 00:08:32.841
or we can write data to
the characteristic, okay?

125
00:08:32.841 --> 00:08:33.950
It gets complicated.

