WEBVTT

1
00:00:00.270 --> 00:00:00.790
Web Share.

2
00:00:02.060 --> 00:00:05.001
The previous ones were more special, but

3
00:00:05.001 --> 00:00:09.130
WebShare I think is interesting for
all of you.

4
00:00:09.130 --> 00:00:13.772
With Web Share,
we can call navigator.jr, pass a JSON,

5
00:00:13.772 --> 00:00:18.529
an object, with title, text,
URL, and optional files.

6
00:00:19.650 --> 00:00:23.880
And it can trigger the native share
dialog of the operating system.

7
00:00:25.730 --> 00:00:31.770
So then you can share content
from your website to other apps,

8
00:00:31.770 --> 00:00:35.721
social networks, mail applications,

9
00:00:35.721 --> 00:00:41.380
WhatsApp, message, PDF, reader, whatever.

10
00:00:41.380 --> 00:00:42.150
Makes sense?

11
00:00:42.150 --> 00:00:46.308
So then you can have in your own website,
in cooking, masters,

12
00:00:46.308 --> 00:00:51.236
on every recipe we can have a share button
that can share this recipe with your

13
00:00:51.236 --> 00:00:54.010
friend and you can open the native dialog.

14
00:00:54.010 --> 00:00:55.461
So then you as web developer,

15
00:00:55.461 --> 00:00:58.250
you don't know where the user
is going to share that.

16
00:00:58.250 --> 00:01:01.609
So you are sharing data and
it's out of your scope now.

17
00:01:02.900 --> 00:01:04.881
So this is the web share API on Android.

18
00:01:06.476 --> 00:01:13.026
You click share,
it appears the complete native dialog.

19
00:01:13.026 --> 00:01:15.058
So you can share it outside iOS,
not Android.

20
00:01:16.988 --> 00:01:21.397
You can share that with
all the possible apps.

21
00:01:21.397 --> 00:01:25.720
And then the app will receive
that share operation, okay?

22
00:01:25.720 --> 00:01:27.470
Simple to understand, it's a simple API.

23
00:01:28.480 --> 00:01:31.580
Something that is even more
powerful is Web Share Target.

24
00:01:32.670 --> 00:01:36.910
This one is light green,
it's Chromium only.

25
00:01:36.910 --> 00:01:40.080
Web Share, it works also On iOS.

26
00:01:41.090 --> 00:01:44.320
In this case,
you don't wanna share to the rest.

27
00:01:44.320 --> 00:01:47.770
You wanna receive shares
from other apps or websites.

28
00:01:48.830 --> 00:01:51.060
So you wanna be target
of a share operation.

29
00:01:52.220 --> 00:01:53.810
So you wanna be on the list.

30
00:01:53.810 --> 00:01:57.960
You want your PWA to be on the list of
possible apps that can receive data.

31
00:01:59.950 --> 00:02:04.400
In this case,
we add that intention in the web manifest.

32
00:02:04.400 --> 00:02:08.028
It's another entry in the web manifest,
where you will express, okay,

33
00:02:08.028 --> 00:02:10.027
you want to share and when that happens.

34
00:02:10.027 --> 00:02:14.327
You want your PWA to execute that URL and

35
00:02:14.327 --> 00:02:19.158
receive using GET or POST these arguments.

36
00:02:19.158 --> 00:02:25.233
But then we JavaScript you can read and
share that in your system in your app.

37
00:02:25.233 --> 00:02:26.590
Yep.

38
00:02:26.590 --> 00:02:27.530
&gt;&gt; Can you share a file?

39
00:02:28.710 --> 00:02:29.660
&gt;&gt; You can share a file.

40
00:02:29.660 --> 00:02:33.510
So the Web Share API has an option
of files array available.

41
00:02:33.510 --> 00:02:40.350
In fact that optional files array is
the second version of the Web Share spec.

42
00:02:40.350 --> 00:02:42.210
That is currently available
in every browser anyway.

43
00:02:42.210 --> 00:02:43.300
So you can share files.

44
00:02:43.300 --> 00:02:48.060
Yeah, and also you can receive files
if you're implementing WebShare target.

45
00:02:48.060 --> 00:02:54.870
So you can receive text only, or images,
or PDF, or recipes, wherever you define.

