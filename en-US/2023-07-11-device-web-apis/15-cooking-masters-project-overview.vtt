WEBVTT

1
00:00:00.000 --> 00:00:04.335
Yeah, you can use this for gaming,
but also, we're going to use it for

2
00:00:04.335 --> 00:00:05.791
something different.

3
00:00:05.791 --> 00:00:11.816
So let's get out of here for
a second and let's load our project.

4
00:00:11.816 --> 00:00:17.101
Remember, our project is
available in the repository,

5
00:00:17.101 --> 00:00:23.277
that is, github.com, my last name,
Firtman/capabilities.

6
00:00:23.277 --> 00:00:26.666
So if you clone this,
there is a CookingMasters folder.

7
00:00:26.666 --> 00:00:31.251
So what I'm going to do is to open
a local server on that folder,

8
00:00:31.251 --> 00:00:36.613
we can also try it online, but I wanna
show you a local because maybe I wanna

9
00:00:36.613 --> 00:00:42.349
make some changes on the fly while we
are discussing this, maybe we change it.

10
00:00:42.349 --> 00:00:46.950
So I'm going to open Visual Studio Code
now on CookingMasters folder,

11
00:00:46.950 --> 00:00:48.723
I will take that as my root.

12
00:00:50.902 --> 00:00:56.425
CookingMasters, there we are,
it's a Vanilla JS app,

13
00:00:56.425 --> 00:01:03.109
so no library, no framework,
no npm, no build process, nothing.

14
00:01:03.109 --> 00:01:07.717
So we have an index.html,
it's pretty simple, header,

15
00:01:07.717 --> 00:01:13.062
we have a main with a couple of sections,
there are a couple of pages,

16
00:01:13.062 --> 00:01:19.537
you will see it in action in a minute, but
nothing really complicated, just HTML.

17
00:01:19.537 --> 00:01:24.009
Then we have CSS, you know CSS,
so nothing so important there.

18
00:01:24.009 --> 00:01:25.271
I have data.

19
00:01:25.271 --> 00:01:29.581
On data, I have recipes
because this is a cooking app.

20
00:01:29.581 --> 00:01:34.961
The idea is an app that will help
us while we are cooking, okay?

21
00:01:34.961 --> 00:01:40.186
So we are cooking food at night,
at home, and I want an app to help me.

22
00:01:40.186 --> 00:01:45.008
The idea is that because when
we cook we are using our hands,

23
00:01:45.008 --> 00:01:49.733
our hands will get dirty,
I don't wanna use my keyboard or

24
00:01:49.733 --> 00:01:53.023
my mouth or my trackpad at the same time.

25
00:01:53.023 --> 00:02:00.006
So we are going to use capability APIs
to manage that app while we are cooking.

26
00:02:00.006 --> 00:02:05.406
So we can use an iPad,
an Android tablet, or a computer,

27
00:02:05.406 --> 00:02:12.621
put it aside and interact with our app
touchless, that's one of the goals.

28
00:02:12.621 --> 00:02:16.857
Yeah, maybe if I'm using a gamepad,
I'm going to attach the gamepad, yeah, but

29
00:02:16.857 --> 00:02:18.807
we will use other techniques as well.

30
00:02:18.807 --> 00:02:22.462
So let's run it first so
you will understand what this is.

31
00:02:22.462 --> 00:02:24.258
So I'm going to open a web server.

32
00:02:24.258 --> 00:02:25.662
This is how it looks like.

33
00:02:25.662 --> 00:02:29.385
So this is the homepage, Cooking Masters.

34
00:02:29.385 --> 00:02:30.848
We have a couple of suggestions.

35
00:02:30.848 --> 00:02:34.479
We have Argentinian asado as well,
that's a barbecue, okay?

36
00:02:34.479 --> 00:02:38.721
This is the Argentinian meat thing, but

37
00:02:38.721 --> 00:02:42.224
anyway, we can take fish tacos.

38
00:02:42.224 --> 00:02:45.192
So if I click there,
I get into the details.

39
00:02:45.192 --> 00:02:49.290
This is a client-side routing system,
pretty simple, with Vanilla JS.

40
00:02:49.290 --> 00:02:53.627
I have a list of ingredients, and here
comes the tricky part, not tricky, but

41
00:02:53.627 --> 00:02:56.072
the important part, we can start cooking.

42
00:02:56.072 --> 00:02:59.095
And that enters a new mode.

43
00:02:59.095 --> 00:03:01.617
Here I'm using different capabilities,

44
00:03:01.617 --> 00:03:04.847
even some that I haven't mentioned yet,
but we will.

45
00:03:04.847 --> 00:03:08.150
If I click there, and
you can try this on your computer,

46
00:03:08.150 --> 00:03:11.170
you can open this on Chrome,
Safari, or Firefox,

47
00:03:11.170 --> 00:03:15.128
it will work, if I hit Start cooking,
it goes full screen, okay?

48
00:03:15.128 --> 00:03:17.631
So it went full screen.

49
00:03:17.631 --> 00:03:21.392
And now I have, in this case, the steps.

50
00:03:21.392 --> 00:03:25.521
This is step one,
I need to pickle my onions, okay?

51
00:03:25.521 --> 00:03:29.601
And of course, I can go to the next step.

52
00:03:29.601 --> 00:03:36.838
There are some steps where
they have some timers.

53
00:03:36.838 --> 00:03:40.550
For example, in this case, it says that,
yeah, I need to let sit for

54
00:03:40.550 --> 00:03:44.198
at least 30 minutes, and
there is a button there that says, hey,

55
00:03:44.198 --> 00:03:46.445
do you wanna add a timer for 30 minutes?

56
00:03:46.445 --> 00:03:49.233
If I do that, I can click here and
it adds a timer.

57
00:03:49.233 --> 00:03:53.725
Right now it's only for
five seconds, always, just for

58
00:03:53.725 --> 00:03:57.476
us to test this, but
we can change that, okay?

59
00:03:57.476 --> 00:04:01.806
This is hard-coded just because we are
going to use that timer for something, and

60
00:04:01.806 --> 00:04:05.822
I can add more than one timer and for
different parts of the cooking process,

61
00:04:05.822 --> 00:04:08.482
and then on the screen,
I will have those timers.

62
00:04:08.482 --> 00:04:11.656
If we click the timer,
they've been removed, okay?

63
00:04:11.656 --> 00:04:14.605
So that's the app, okay?

64
00:04:14.605 --> 00:04:19.911
So of course, then I finish, and
that's all, that's kind of the app.

65
00:04:19.911 --> 00:04:24.410
So I have a little button there,
top right,

66
00:04:24.410 --> 00:04:30.616
that's a permissions section
where you will see the current

67
00:04:30.616 --> 00:04:35.739
state of the permissions that we will use,
okay?

68
00:04:35.739 --> 00:04:36.918
Make sense?

69
00:04:36.918 --> 00:04:40.772
I will show you the code we made,
this is using the permissions API for

70
00:04:40.772 --> 00:04:45.360
when it's possible, because remember that
permissions API is not available for

71
00:04:45.360 --> 00:04:46.507
every capability.

72
00:04:46.507 --> 00:04:50.350
And for example, for the gamepad API,

73
00:04:50.350 --> 00:04:55.834
the gamepad API is not actually
in the permissions API.

74
00:04:55.834 --> 00:04:59.073
But my gamepad right now is off.

75
00:04:59.073 --> 00:05:05.664
I can turn it on through Bluetooth or
through USB, I have both options.

76
00:05:05.664 --> 00:05:08.069
Both will work, in our case.

77
00:05:08.069 --> 00:05:11.371
It's not the problem, but
I can show you that it works.

78
00:05:11.371 --> 00:05:15.803
Sorry, it works with USB
as well as with Bluetooth.

79
00:05:15.803 --> 00:05:19.127
So if I connect this like so,

80
00:05:21.440 --> 00:05:24.804
At one point it's going to be connected.

81
00:05:24.804 --> 00:05:27.999
So let me put it there.

82
00:05:27.999 --> 00:05:31.245
It's connected because it has a light.

83
00:05:31.245 --> 00:05:33.126
So what's the idea?

84
00:05:33.126 --> 00:05:37.421
The idea, for example,
is that when I am cooking, also,

85
00:05:37.421 --> 00:05:42.519
I have a section here that is really
grayed out with a couple of icons.

86
00:05:42.519 --> 00:05:47.329
One of the icons is actually an emoji,
it's a gamepad.

87
00:05:47.329 --> 00:05:53.746
So the idea is that I can click there,
and now it says it's connected.

88
00:05:53.746 --> 00:05:57.767
So when it becomes alive,
it means connected.

89
00:05:57.767 --> 00:06:02.714
Which means I can now use
this to move things, okay?

90
00:06:02.714 --> 00:06:07.328
So I'm moving now my steps.

91
00:06:07.328 --> 00:06:12.279
And also with the button,
I can get out, okay?

92
00:06:12.279 --> 00:06:15.259
Just one thing, connector that I have.

93
00:06:15.259 --> 00:06:21.356
So now, if I go here, you can see that
it says gamepad is connected, okay?

94
00:06:21.356 --> 00:06:24.556
So just for you to know when
you use a gamepad, the gamepad,

95
00:06:24.556 --> 00:06:27.506
after a while,
goes through some kind of a sleep mode.

96
00:06:27.506 --> 00:06:32.247
So even if it's still the light sensor
this connector, so what you need to do, so

97
00:06:32.247 --> 00:06:34.993
if I restart, now maybe it's disconnected.

98
00:06:34.993 --> 00:06:38.843
The way to connect that is to move
something, to touch something, and

99
00:06:38.843 --> 00:06:40.358
it connects again, okay?

100
00:06:40.358 --> 00:06:41.796
So you just connect it again.

101
00:06:41.796 --> 00:06:47.088
By the way, in JavaScript,
do I need to pick the gamepad as a user?

102
00:06:47.088 --> 00:06:50.474
Do you see any permission dialog?

103
00:06:50.474 --> 00:06:52.419
We didn't see any permission dialog.

104
00:06:52.419 --> 00:06:56.465
The gamepad is one of
the harmless capabilities,

105
00:06:56.465 --> 00:06:59.557
we won't see any permission dialog.

106
00:06:59.557 --> 00:07:04.877
If the gamepad is connected to
the computer through Bluetooth or

107
00:07:04.877 --> 00:07:09.802
through USB, by the way,
it works also on mobile devices,

108
00:07:09.802 --> 00:07:12.967
that's okay, you can use it, okay?

109
00:07:12.967 --> 00:07:16.185
It's like a keyboard, you don't get
permission to use the keyboard, okay,

110
00:07:16.185 --> 00:07:16.783
on a website.

111
00:07:16.783 --> 00:07:19.214
So the same happens with gamepad.

112
00:07:19.214 --> 00:07:23.927
But now let's try to look at
the code because the gamepad API,

113
00:07:23.927 --> 00:07:27.197
it's not so simple as I was saying before.

114
00:07:27.197 --> 00:07:31.071
The gamepad API requires
some little tricks, so

115
00:07:31.071 --> 00:07:36.658
if you go to your scripts,
let's go first to understand this web app.

116
00:07:36.658 --> 00:07:43.876
On app.js, we have a DOM content
loader where everything starts.

117
00:07:43.876 --> 00:07:47.881
We are starting the router, the router is
the one that is managing different routes,

118
00:07:47.881 --> 00:07:49.220
navigation between pages.

119
00:07:49.220 --> 00:07:54.181
Then we have the cooking section
that is available in Cooking.js,

120
00:07:54.181 --> 00:07:58.706
that's the one that is managing
the steps going, next step,

121
00:07:58.706 --> 00:08:03.510
back step, the timers,
everything is there in cooking, okay?

122
00:08:03.510 --> 00:08:06.654
It's just coding, okay?

123
00:08:06.654 --> 00:08:11.401
You will see the code, this is Vanilla JS,
nothing really complicated.

124
00:08:11.401 --> 00:08:15.120
And then we have
a Capabilities JavaScript file.

125
00:08:15.120 --> 00:08:20.546
On the Capabilities JavaScript file,
what we have here is the connection to

126
00:08:20.546 --> 00:08:25.825
every device or hardware that we will
use during the rest of the workshop.

127
00:08:25.825 --> 00:08:30.911
There is a full section here on,
let me look for it,

128
00:08:32.787 --> 00:08:37.008
Gamepad, this is the gamepad section.

129
00:08:37.008 --> 00:08:41.640
So when we are adding an event
listener for gamepad connected and

130
00:08:41.640 --> 00:08:46.957
gamepad disconnected, what we are doing
is just sent him to the console,

131
00:08:46.957 --> 00:08:52.732
the gamepad is connected or disconnected,
and calling Capabilities.load.

132
00:08:52.732 --> 00:08:57.439
Capabilities.load, what
he's doing is marking on

133
00:08:57.439 --> 00:09:02.574
the screen if it's connected or
disconnected every API.

134
00:09:02.574 --> 00:09:05.851
This is kind of a manual work,
because as I mentioned before,

135
00:09:05.851 --> 00:09:08.886
the permissions API is not available for
every feature.

136
00:09:08.886 --> 00:09:13.536
So for every feature, we have
a different code, and here we have,

137
00:09:13.536 --> 00:09:15.791
they go for the gamepad, okay?

138
00:09:15.791 --> 00:09:19.078
Let's try to understand because
it looks scary but it's not so

139
00:09:19.078 --> 00:09:20.388
complicated at the end.

140
00:09:20.388 --> 00:09:26.805
First, we get all the gamepads
with navigator.getGamepads.

141
00:09:26.805 --> 00:09:30.788
In fact,
let me do that in action directly here.

142
00:09:30.788 --> 00:09:37.443
Let's open, I was using Canary.

143
00:09:37.443 --> 00:09:39.614
Here I have Cooking Masters.

144
00:09:39.614 --> 00:09:41.110
Let's open the console.

145
00:09:41.110 --> 00:09:46.514
And let's say,
I'm going to copy that line,

146
00:09:46.514 --> 00:09:51.926
gamepads = await navigator.getGamepads.

147
00:09:51.926 --> 00:09:57.306
If I look at gamepads variable now,
it says, it's an array of four nulls.

148
00:09:57.306 --> 00:10:00.121
And this is the first weird part.

149
00:10:00.121 --> 00:10:04.224
But the weird part is that
even if you don't have

150
00:10:04.224 --> 00:10:09.056
any gamepad connector,
you don't get an empty array.

151
00:10:09.056 --> 00:10:13.912
You get an array of all the possible
gamepads that this OS is supporting with

152
00:10:13.912 --> 00:10:14.926
nulls inside.

153
00:10:14.926 --> 00:10:18.948
In fact, if you have one gamepad,
it will be the first one.

154
00:10:18.948 --> 00:10:22.851
So always,
if you check the first item in the array,

155
00:10:22.851 --> 00:10:27.121
it will tell you if you do have
at least one gamepad or not.

156
00:10:27.121 --> 00:10:31.389
And now it says it's disconnected
because every time you refresh the page,

157
00:10:31.389 --> 00:10:35.934
the gamepad, even if it's connected to
the OS, is disconnected to the web app.

158
00:10:35.934 --> 00:10:40.614
So I just need to press a button or
something, and now we see gamepad

159
00:10:40.614 --> 00:10:45.808
connected, and that means that we can
run this again and see what we have.

160
00:10:45.808 --> 00:10:49.962
Gamepads, and
now the array is not everything null,

161
00:10:49.962 --> 00:10:52.371
we have actually one gamepad.

162
00:10:52.371 --> 00:10:56.340
And if you open the gamepad,
we see that the gamepad

163
00:10:56.340 --> 00:11:00.786
option has an array of buttons,
a vibration, and axes.

164
00:11:00.786 --> 00:11:04.074
If I open buttons, I have in this case,

165
00:11:04.074 --> 00:11:08.961
this particular gamepad has
18 different buttons, and

166
00:11:08.961 --> 00:11:15.357
each button is telling you if it's
pressed, touched, or a current value.

167
00:11:16.887 --> 00:11:21.139
The problem, as I mentioned, is that we
don't have an event listener like click,

168
00:11:21.139 --> 00:11:22.736
tell me when it's click, no.

169
00:11:22.736 --> 00:11:27.842
We have to query this
array on every frame and

170
00:11:27.842 --> 00:11:31.436
then check when that happens.

171
00:11:31.436 --> 00:11:33.462
And this is what I'm doing here.

172
00:11:33.462 --> 00:11:35.495
So let's look at that.

173
00:11:35.495 --> 00:11:39.859
I have a function with the name gameLoop,

174
00:11:39.859 --> 00:11:44.108
okay, that I'm immediately calling.

175
00:11:44.108 --> 00:11:48.207
This function is actually
getting the gamepads and

176
00:11:48.207 --> 00:11:52.401
checking if one particular button,
the first one,

177
00:11:52.401 --> 00:11:56.498
that is the X in the PlayStation
format system, and

178
00:11:56.498 --> 00:12:01.356
then the axes, if they are greater
than 50% to the right or

179
00:12:01.356 --> 00:12:07.581
greater than 50% to the left, and
then setting some booleans in an array.

180
00:12:07.581 --> 00:12:08.805
Why?

181
00:12:08.805 --> 00:12:14.713
Because again, you can say, well, if it's
true, let's call next step, for example.

182
00:12:14.713 --> 00:12:18.322
If I'm going like this,
I wanna go to the next step in the recipe.

183
00:12:18.322 --> 00:12:23.224
But if you do this,
even if it's really fast,

184
00:12:23.224 --> 00:12:28.140
you will get five
executions of the callback.

185
00:12:28.140 --> 00:12:30.375
So you don't wanna move five times.

186
00:12:30.375 --> 00:12:35.256
So that's why I'm waiting
60 frames to check if I

187
00:12:35.256 --> 00:12:38.328
do have a button or not pressed.

188
00:12:38.328 --> 00:12:44.274
So if within the last second we had that
button pressed, we go to a next step.

189
00:12:44.274 --> 00:12:48.904
And of course, you can play with these
values until you're happy with the result,

190
00:12:48.904 --> 00:12:50.503
you need to do some testing.

191
00:12:50.503 --> 00:12:55.139
And you say, I'm talking to the cooking
app and say finish the process,

192
00:12:55.139 --> 00:12:58.032
go to the next step, or
to the previous step.

193
00:12:58.032 --> 00:13:02.844
And at the end,
we request another animation frame and

194
00:13:02.844 --> 00:13:05.675
we keep that game loop working.

195
00:13:05.675 --> 00:13:07.140
Make sense?

196
00:13:07.140 --> 00:13:08.836
So that's how that works.

197
00:13:08.836 --> 00:13:14.230
It's a little tricky to get used with, but
here you have an example that is working.

198
00:13:14.230 --> 00:13:20.630
So again, the idea is that, let me inspect
this, I think the zoom is a little weird.

199
00:13:20.630 --> 00:13:23.311
Okay, like that.

200
00:13:23.311 --> 00:13:27.153
Let's open the Argentinian asado.

201
00:13:27.153 --> 00:13:32.678
First, it's not connected now but,
all right, it is connected, yeah.

202
00:13:32.678 --> 00:13:35.930
See, it's connected or not?

203
00:13:35.930 --> 00:13:37.663
Not sure.

204
00:13:37.663 --> 00:13:45.031
We'll refresh, Cuz I was inspecting this.

205
00:13:45.031 --> 00:13:48.854
Okay, so now you can see it's connected.

206
00:13:48.854 --> 00:13:56.932
And now I'm moving between steps
just touching the gamepad.

207
00:13:56.932 --> 00:14:00.946
Yeah, it's still a physical
device that I'm touching, but

208
00:14:00.946 --> 00:14:06.208
I think it's even more prepared on the
keyboard to receive sauce, for example.

209
00:14:06.208 --> 00:14:08.874
But anyway,
we will improve that a little bit.

210
00:14:08.874 --> 00:14:11.066
But that's how you use a gamepad.

211
00:14:11.066 --> 00:14:16.576
Remember, it can be Bluetooth, and
it can be an iPad, and that also works.

212
00:14:16.576 --> 00:14:20.874
By the way, this is a PS4 device,
I'm not sure

213
00:14:20.874 --> 00:14:25.833
if you have experience with those,
but it has a light.

214
00:14:25.833 --> 00:14:27.536
This is not the official one, I think.

215
00:14:27.536 --> 00:14:29.507
No, it's not from Sony.

216
00:14:29.507 --> 00:14:34.581
But it has a light that it's an LED RGB,
so I can change the color.

217
00:14:34.581 --> 00:14:36.485
This part is touch.

218
00:14:36.485 --> 00:14:39.560
It can also play audio.

219
00:14:39.560 --> 00:14:43.343
Yeah, it can play audio, it has a speaker.

220
00:14:43.343 --> 00:14:46.677
The question is,
do we have that in the gamepad API?

221
00:14:46.677 --> 00:14:51.446
No, the gamepad API is
a high-level API that has

222
00:14:51.446 --> 00:14:55.528
only what is available on every gamepad.

223
00:14:55.528 --> 00:14:58.382
But can we do the rest?

224
00:14:58.382 --> 00:15:00.368
Can we access vibration?

225
00:15:00.368 --> 00:15:05.553
For example, this has an engine also,
a vibration engine.

226
00:15:05.553 --> 00:15:11.370
Well, for that, the answer is yes and
no, or the answer is light green.

