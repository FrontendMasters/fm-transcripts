WEBVTT

1
00:00:00.160 --> 00:00:04.910
Web Serial,
this one is even more low-level.

2
00:00:04.910 --> 00:00:09.019
It's a very low-level API that will let
you communicate with any serial device

3
00:00:09.019 --> 00:00:11.250
connected to your computer.

4
00:00:11.250 --> 00:00:15.488
This is for computer,
desktop computer, not phones, okay?

5
00:00:15.488 --> 00:00:21.080
USB, Bluetooth, or whatever serial you
have, whatever connection you have, okay?

6
00:00:21.080 --> 00:00:23.745
This is a very, very low-level.

7
00:00:23.745 --> 00:00:27.358
It's built on top of the existing
serial protocol, okay?

8
00:00:27.358 --> 00:00:30.290
So every operating system supports that.

9
00:00:30.290 --> 00:00:35.820
It requires user's permission,
of course, to receive and send data.

10
00:00:35.820 --> 00:00:38.510
Who is using web serial directly?

11
00:00:38.510 --> 00:00:40.200
Not a lot of devices.

12
00:00:40.200 --> 00:00:44.532
And this is the one that Apple says,
I don't know why we are doing this, okay?

13
00:00:44.532 --> 00:00:51.420
So there are a couple of scenarios,
mostly for drivers, to update devices.

14
00:00:51.420 --> 00:00:55.367
But for that, instead of Web Serial,
we also have Web USB.

15
00:00:55.367 --> 00:01:00.068
Web USB, it's another low
level API that is targeted to

16
00:01:00.068 --> 00:01:04.680
device vendors,
not to normal web developers, why?

17
00:01:05.710 --> 00:01:11.150
Because in this case, the device shouldn't
be registered by the OS with the driver.

18
00:01:11.150 --> 00:01:15.986
So you connect a new device and
the OS doesn't know what that is, okay?

19
00:01:15.986 --> 00:01:18.467
Well, you can go to a website, and

20
00:01:18.467 --> 00:01:24.180
that website can connect to that
USB device based on the firmware.

21
00:01:24.180 --> 00:01:28.782
So communication with your USB
devices with the computer.

22
00:01:28.782 --> 00:01:32.657
And then you can read and
write data directly without the need for

23
00:01:32.657 --> 00:01:36.120
custom drivers or
software installed in your computer.

24
00:01:37.130 --> 00:01:41.710
So you can use this to update
the firmware of a device, or

25
00:01:41.710 --> 00:01:45.230
use the device without any kind of driver.

26
00:01:45.230 --> 00:01:49.586
So you probably won't be using
this API unless you work at

27
00:01:49.586 --> 00:01:53.510
the hardware company, and
this is Chromium only.

28
00:01:54.580 --> 00:01:58.926
So if you're thinking why Web Serial and
Web USB were created,

29
00:01:58.926 --> 00:02:01.110
this is just my opinion.

30
00:02:01.110 --> 00:02:06.117
But we need to remember that Google Chrome
has also an operating system,

31
00:02:06.117 --> 00:02:10.812
Chrome OS, that is the operating
system empowering Chromebooks.

32
00:02:10.812 --> 00:02:13.209
And on Chromebooks, sometimes,

33
00:02:13.209 --> 00:02:17.530
you don't have a full Linux
operating system for the user.

34
00:02:17.530 --> 00:02:21.200
There is a Linux behind the scenes,
or at least part of it.

35
00:02:21.200 --> 00:02:26.751
But the idea was to add APIs to
the web that can solve some problems,

36
00:02:26.751 --> 00:02:33.197
such as connecting to a special 3D printer
that yeah has no software driver for

37
00:02:33.197 --> 00:02:37.683
Chromebooks, but
still you can use it from a web app.

38
00:02:37.683 --> 00:02:42.105
Okay, that's kind of idea,
it's a very low-level API.

39
00:02:42.105 --> 00:02:46.470
It will, of course, require user's
permission to access these devices.

40
00:02:47.660 --> 00:02:52.028
You communicate device settings,
you can update the firmware and

41
00:02:52.028 --> 00:02:56.560
access all the device data with
a very low-level API, binary data.

