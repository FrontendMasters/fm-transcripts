WEBVTT

1
00:00:00.000 --> 00:00:04.638
So the API,
because it's one of the oldest APIs,

2
00:00:04.638 --> 00:00:07.737
it's an old way of writing code.

3
00:00:07.737 --> 00:00:12.780
I'm going to write that code directly,
so we are going to try this manually.

4
00:00:12.780 --> 00:00:16.096
It's not supporting,
for example, promises.

5
00:00:16.096 --> 00:00:19.408
It's the old-fashioned callback way.

6
00:00:19.408 --> 00:00:22.828
Forget about the slides,
let's do some writing.

7
00:00:22.828 --> 00:00:26.475
So I'm going to open an IDE now.

8
00:00:26.475 --> 00:00:29.496
I'm going to write this code,
because this code is pretty simple.

9
00:00:29.496 --> 00:00:31.754
It's up for
you to understand how that works.

10
00:00:31.754 --> 00:00:37.091
So I'm going to open the folder.

11
00:00:37.091 --> 00:00:39.930
I'm not going to use
cooking masters right now.

12
00:00:42.832 --> 00:00:44.368
Here we are.

13
00:00:44.368 --> 00:00:47.136
You're going to use that in the afternoon.

14
00:00:47.136 --> 00:00:50.622
So, so far,
I'm going to create a new folder.

15
00:00:50.622 --> 00:00:54.986
I mean, you don't need to follow my code,
or you don't need to download the code for

16
00:00:54.986 --> 00:00:56.403
this particular example.

17
00:00:56.403 --> 00:00:59.587
It will be just a new, from scratch HTML.

18
00:00:59.587 --> 00:01:02.265
So I'm going to create a demo folder.

19
00:01:02.265 --> 00:01:07.889
In that demo folder, I'm going to create
index, or let's say, Geo.js and Geo.html.

20
00:01:07.889 --> 00:01:14.808
So just plain HTML, we're going
to play with geolocation like so.

21
00:01:14.808 --> 00:01:19.899
And I'm going to create,
put a button here that will say start,

22
00:01:19.899 --> 00:01:23.494
and I'm going to use
an output HTML element.

23
00:01:23.494 --> 00:01:27.141
Yeah, that element exists,
the output element.

24
00:01:27.141 --> 00:01:30.638
We use that for
sending outputs to the user.

25
00:01:30.638 --> 00:01:37.345
Anyway, it's HTML compatible, no problem
HTML5, and I'm gonna add the script.

26
00:01:37.345 --> 00:01:44.118
Geo.js differ, and nothing so fancy.

27
00:01:44.118 --> 00:01:49.035
We can make this old-fashioned way,
like onclick, call it start.

28
00:01:49.035 --> 00:01:52.366
It's a micro app,
simple to understand, okay?

29
00:01:52.366 --> 00:01:54.561
Through out a page, a button, and

30
00:01:54.561 --> 00:01:57.984
I'll put the element where
we are going to send data.

31
00:01:57.984 --> 00:02:01.256
So we can use the console if you want,
it doesn't matter.

32
00:02:01.256 --> 00:02:07.421
So now,
I need to write the function, start.

33
00:02:07.421 --> 00:02:13.830
So what we're going to do here is
then to use the Geolocation API.

34
00:02:13.830 --> 00:02:18.052
The geolocation is navigator.geolocation.

35
00:02:18.052 --> 00:02:20.922
So first,
how do we know if the API is there?

36
00:02:20.922 --> 00:02:25.706
First, this API is dark green,
so it's available everywhere.

37
00:02:25.706 --> 00:02:28.381
We won't have any problem
on this particular API.

38
00:02:28.381 --> 00:02:33.304
But let's say that we wanna be
safe in case we have a user with

39
00:02:33.304 --> 00:02:35.873
Internet Explorer 6, okay?

40
00:02:35.873 --> 00:02:40.609
By the way, IE,
Internet Explorer, that API,

41
00:02:40.609 --> 00:02:44.432
I think appeared in IE 9 and so by IE 7.

42
00:02:44.432 --> 00:02:50.268
So one way to check if for example,
is to use the IN operator.

43
00:02:50.268 --> 00:02:53.740
I'm not sure if you have used that
operator in JavaScript before,

44
00:02:53.740 --> 00:02:56.782
where it can check if a property
is available in an object.

45
00:02:56.782 --> 00:03:01.583
So I can check if geolocation, and
we pass the property as a string is

46
00:03:01.583 --> 00:03:06.484
available in the Navigator option,
that's a simple way to do that.

47
00:03:06.484 --> 00:03:11.899
There are many ways to ask for something
similar if it's not undefined and so on.

48
00:03:11.899 --> 00:03:17.517
But this is one of the techniques
that is mostly used.

49
00:03:17.517 --> 00:03:24.973
So now, we are safe to call the API,
because if not, we will get null exception.

50
00:03:24.973 --> 00:03:29.911
There are actually two ways to listen for
user's location,

51
00:03:29.911 --> 00:03:33.456
getCurrentPosition or watchPosition.

52
00:03:33.456 --> 00:03:36.774
Let me write one, and
exact is exactly the same.

53
00:03:36.774 --> 00:03:39.021
It receives two callbacks.

54
00:03:39.021 --> 00:03:41.118
Callbacks are functions.

55
00:03:41.118 --> 00:03:46.779
The first one will be for
when the location was acquired.

56
00:03:46.779 --> 00:03:49.826
So we've got the location from the user.

57
00:03:49.826 --> 00:03:53.432
And the second one, we can write
this in this way if you like, or

58
00:03:53.432 --> 00:03:57.127
we can create handlers functions
outside of the function call.

59
00:03:57.127 --> 00:03:59.418
And then we have another one for
when there is an error.

60
00:03:59.418 --> 00:04:03.557
The location couldn't be acquired for
whatever reason,

61
00:04:03.557 --> 00:04:05.928
the user has denied permission.

62
00:04:05.928 --> 00:04:10.528
We don't have connection,
we don't have GPS, we are on Mars, okay?

63
00:04:10.528 --> 00:04:13.203
So yeah, we can't locate the user.

64
00:04:13.203 --> 00:04:15.692
Yeah, you will get an error,
and the error has a type.

65
00:04:15.692 --> 00:04:18.813
But you can actually check
which kind of error it is.

66
00:04:18.813 --> 00:04:25.716
And the position, we can do a console log
of the object to see what's going on.

67
00:04:25.716 --> 00:04:30.692
And because we do have an output,
we can do querySelector,

68
00:04:30.692 --> 00:04:33.986
output, and change the text content.

69
00:04:33.986 --> 00:04:39.330
And typically, the most important part
that we need from here is the latitude and

70
00:04:39.330 --> 00:04:40.438
the longitude.

71
00:04:40.438 --> 00:04:47.054
And we will get that from
the object position.coords,

72
00:04:47.054 --> 00:04:52.273
coordinate.latitude and dot longitude.

73
00:04:52.273 --> 00:04:54.964
Position.coords longitude.

74
00:04:54.964 --> 00:04:59.952
You can see what else do we have, but
we will see that directly in action.

75
00:04:59.952 --> 00:05:03.507
We have altitude that is
not always available.

76
00:05:03.507 --> 00:05:07.911
For example, when it's Wi-Fi,
the altitude is complicated.

77
00:05:07.911 --> 00:05:13.563
Sometimes, it can get the altitude,
but sometimes it's wrong.

78
00:05:13.563 --> 00:05:14.535
In that case,

79
00:05:14.535 --> 00:05:19.165
it triangulates the information
with the Wi-Fi surrounding you.

80
00:05:19.165 --> 00:05:25.511
I mentioned that there are two ways to
read this, let's also add the error.

81
00:05:25.511 --> 00:05:29.284
getCurrentPosition or watchPosition,

82
00:05:29.284 --> 00:05:34.355
both have the same API,
just two different call names.

83
00:05:34.355 --> 00:05:37.733
getCurrentPosition or watchPosition,
what's the difference?

84
00:05:37.733 --> 00:05:42.461
getCurrentPosition will give
me the location once, and

85
00:05:42.461 --> 00:05:49.464
watchPosition will continue listening for
the location until we clear that watch.

86
00:05:49.464 --> 00:05:54.879
So if we are walking, we will get
new locations every once in a while.

87
00:05:54.879 --> 00:05:59.222
&gt;&gt; How would you set the time
that it will check that in here?

88
00:05:59.222 --> 00:06:00.864
&gt;&gt; There is no timer, but

89
00:06:00.864 --> 00:06:05.627
there is a third argument that we
can pass here with some options.

90
00:06:05.627 --> 00:06:08.010
One of the options is timeout.

91
00:06:08.010 --> 00:06:10.272
That is not what I think what you were thinking as timer.

92
00:06:10.272 --> 00:06:12.529
Timeout by default is infinite.

93
00:06:12.529 --> 00:06:15.935
But here, we can express in milliseconds.

94
00:06:15.935 --> 00:06:19.499
For example, we can wait a minute,
and it says, you know what,

95
00:06:19.499 --> 00:06:23.595
if after a minute you couldn't
acquire location, I don't care, okay?

96
00:06:23.595 --> 00:06:25.969
So don't don't bother.

97
00:06:25.969 --> 00:06:32.226
Or maybe one second, right, that's too
fast actually, okay, so that's timeout.

98
00:06:32.226 --> 00:06:36.331
Another thing is maximumAge.

99
00:06:36.331 --> 00:06:37.960
What is maximumAge?

100
00:06:37.960 --> 00:06:39.880
By default, it's 0.

101
00:06:39.880 --> 00:06:44.446
If you said 0, you said,
I want the location, a new location.

102
00:06:44.446 --> 00:06:48.010
So I want the phone to acquire
a new location right now.

103
00:06:48.010 --> 00:06:53.346
But maybe I'm okay if it's the location
from the last five minutes or

104
00:06:53.346 --> 00:06:55.100
from the last minute.

105
00:06:55.100 --> 00:06:58.337
And because your phone,
because of Google Maps, so

106
00:06:58.337 --> 00:07:00.701
it's always reading your location.

107
00:07:00.701 --> 00:07:05.627
Maybe you have the opportunity to get
the location from a couple of seconds

108
00:07:05.627 --> 00:07:09.612
ago that is good enough for
you and it's going to be faster.

109
00:07:09.612 --> 00:07:10.284
Make sense?

110
00:07:10.284 --> 00:07:15.886
So you can say, I'm okay if
the location has an age of a minute.

111
00:07:15.886 --> 00:07:16.529
I'm okay with that.

112
00:07:19.529 --> 00:07:24.355
And the last possible option
is enable high accuracy.

113
00:07:24.355 --> 00:07:25.240
It's a boolean.

114
00:07:25.240 --> 00:07:30.124
If you say true,
it will in the case that the device has

115
00:07:30.124 --> 00:07:33.236
several ways to locate the user.

116
00:07:33.236 --> 00:07:39.066
It will use the more accurate,
the GPS one, not the Wi Fi.

117
00:07:39.066 --> 00:07:40.616
That's the only thing you can set.

118
00:07:44.381 --> 00:07:47.628
&gt;&gt; Is the GPS more
accurate than the Wi Fi?

119
00:07:47.628 --> 00:07:49.766
&gt;&gt; Typically, yes.

120
00:07:49.766 --> 00:07:54.088
If you wait for
the GPS to get the information.

121
00:07:54.088 --> 00:07:59.724
Because at the beginning, mostly when
it's a A GPS, the GPS actually is the one

122
00:07:59.724 --> 00:08:05.632
that is being used by the military to get
the rocket from the window, by the window.

123
00:08:05.632 --> 00:08:08.322
However, we as civilians,

124
00:08:08.322 --> 00:08:13.820
we get a different version of
the GPS that has random data.

125
00:08:13.820 --> 00:08:19.599
And so typically, the GPS accuracy,
it's around 10 meters.

126
00:08:19.599 --> 00:08:21.105
I'm sorry, it's in meters.

127
00:08:21.105 --> 00:08:24.945
You made the conversion to yards.

128
00:08:24.945 --> 00:08:26.383
Okay, make sense?

129
00:08:26.383 --> 00:08:29.375
And that's all the API actually.

130
00:08:29.375 --> 00:08:33.851
That's all you have to know,
there's no more.

131
00:08:33.851 --> 00:08:38.675
So if I try these, first, to try these,
we have to use a web server.

132
00:08:38.675 --> 00:08:41.615
You cannot open this in the file protocol.

133
00:08:41.615 --> 00:08:42.886
It depends on the browser actually.

134
00:08:42.886 --> 00:08:46.128
There are some browsers that
might let you do that, but

135
00:08:46.128 --> 00:08:50.865
if you wanna be safe on every browser, you
need to open this in with a web server.

136
00:08:50.865 --> 00:08:55.328
So I have here a plugin
that opens a web server.

137
00:08:55.328 --> 00:09:00.916
That's safari, let's use Chrome just
because I was using Chrome before.

138
00:09:03.519 --> 00:09:06.911
And by the way,
this API works only on HTTPS.

139
00:09:06.911 --> 00:09:09.828
The only exception is localhost.

140
00:09:09.828 --> 00:09:14.602
And be careful,
because this website are pointing me to

141
00:09:14.602 --> 00:09:18.775
175.0.0.1, that's not localhost.

142
00:09:18.775 --> 00:09:23.280
So my capability API will not work,
because it's not HTTPS.

143
00:09:23.280 --> 00:09:25.346
IP addresses will not work.

144
00:09:25.346 --> 00:09:27.633
I need to exactly say localhost.

145
00:09:29.746 --> 00:09:36.195
So for those capability APIs that needs
HTTPS, localhost is an exception.

146
00:09:36.195 --> 00:09:42.715
But it has to be localhost, not the name
of your computer, no, localhost, okay?

147
00:09:42.715 --> 00:09:44.796
Okay, and let me do this.

148
00:09:44.796 --> 00:09:50.978
So we have the console here, and
I'm going to load /geo, right?

149
00:09:50.978 --> 00:09:51.733
What's the name?

150
00:09:51.733 --> 00:09:53.333
No, it wasn't geo.

151
00:09:53.333 --> 00:09:59.454
It was demo/geo, demo/geo.html.

152
00:09:59.454 --> 00:10:04.063
Okay, so if I hit the start,
I get the permission dialog.

153
00:10:04.063 --> 00:10:07.794
If I say Allow, again,

154
00:10:07.794 --> 00:10:13.585
now it says an error timeout expire.

155
00:10:13.585 --> 00:10:17.790
That's wierd, I got the cordinates.

156
00:10:17.790 --> 00:10:19.834
I think this is Canary.

157
00:10:19.834 --> 00:10:21.379
By the way, Chrome Canary.

158
00:10:21.379 --> 00:10:24.127
It's Alpha, I think this is a bug.

159
00:10:24.127 --> 00:10:30.163
Because it says that my MacOS is not
the granting access by already granted.

160
00:10:30.163 --> 00:10:30.916
So it's kind of weird.

161
00:10:30.916 --> 00:10:33.415
Anyway, we got the object.

162
00:10:33.415 --> 00:10:35.364
The object has a timestamp.

163
00:10:35.364 --> 00:10:40.533
So you know how old the data is,
and the coords object.

164
00:10:40.533 --> 00:10:44.286
I have accuracy, altitude I don't have.

165
00:10:44.286 --> 00:10:49.469
That's a hint that this is WiFi
information, not GPS, right?

166
00:10:49.469 --> 00:10:51.698
I don't have altitude or
altitude accuracy.

167
00:10:51.698 --> 00:10:54.693
Heading is magnetometer,
but this is a Mac.

168
00:10:54.693 --> 00:10:58.408
It doesn't have that information
heading to the north, okay?

169
00:10:58.408 --> 00:11:01.033
It's an angle, latitude and longitude.

170
00:11:01.033 --> 00:11:05.358
I don't have a speed, because you get
the speed with GPS as well, okay?

171
00:11:05.358 --> 00:11:06.555
What about accuracy?

172
00:11:06.555 --> 00:11:11.714
That's expressed in meters,
sorry for you, US people.

173
00:11:11.714 --> 00:11:12.841
It's expressed in meters.

174
00:11:12.841 --> 00:11:17.437
So that's 16 meters, and that's all.

175
00:11:17.437 --> 00:11:19.466
That's all the API.

176
00:11:19.466 --> 00:11:23.000
&gt;&gt; So
you can't even ask what the provider is?

177
00:11:23.000 --> 00:11:26.215
&gt;&gt; No, it's for other diagnostics,
so you cannot ask.

178
00:11:26.215 --> 00:11:29.634
If you're using Chrome, and
that's why I use Chrome,

179
00:11:29.634 --> 00:11:34.754
I'm not sure if you know that Chrome has
a separate DevTools window little hidden.

180
00:11:34.754 --> 00:11:36.998
It's called the console drawer.

181
00:11:36.998 --> 00:11:41.811
To console drawer that you can enable that
from the three dots from the dev tools,

182
00:11:41.811 --> 00:11:43.714
not the three dots from Chrome.

183
00:11:43.714 --> 00:11:47.957
The console drawer is like
a separate panel here.

184
00:11:47.957 --> 00:11:50.156
And in this panel, you, sorry.

185
00:11:51.869 --> 00:11:55.052
Open console drawer, it's here.

186
00:11:55.052 --> 00:11:57.957
We can enable with the three dots.

187
00:11:57.957 --> 00:12:04.857
More things, and there is one for sensors.

188
00:12:04.857 --> 00:12:11.995
In the Sensors tab of the console drawer,
you can override location.

189
00:12:11.995 --> 00:12:16.032
So you can say,
you know what, I'm in Berlin.

190
00:12:16.032 --> 00:12:21.804
So now, because I were using
watchPosition, is it still reading?

191
00:12:21.804 --> 00:12:25.942
So I'm jumping, okay?

192
00:12:25.942 --> 00:12:28.185
I have a teletransporter, and

193
00:12:28.185 --> 00:12:32.160
I'm teletransporter myself
over different cities.

194
00:12:32.160 --> 00:12:37.550
And also, I can click Manage,
and add my own locations.

195
00:12:37.550 --> 00:12:41.811
So if you are trying, if you are testing
your web app on different cities,

196
00:12:41.811 --> 00:12:45.069
on different places in the city,
you can add them here.

197
00:12:45.069 --> 00:12:46.954
It's pretty cool.

198
00:12:46.954 --> 00:12:49.971
Even there are some plugins
in case you need even more.

199
00:12:49.971 --> 00:12:55.186
There's a plugins to Chrome that will
let you load a GPX file for example.

200
00:12:55.186 --> 00:12:59.563
There is an XML that you can export
from GPS or from your phone.

201
00:12:59.563 --> 00:13:04.857
So you can go and take a walk,
record a GPX file, and

202
00:13:04.857 --> 00:13:10.757
then replay your real walk on
your web app on Chrome, okay?

203
00:13:10.757 --> 00:13:12.180
That's pretty cool.

204
00:13:12.180 --> 00:13:17.713
And by the way, here, you can also
create a custom orientation like that.

205
00:13:17.713 --> 00:13:23.036
And this is to emulate or
simulate the Sensors API, okay?

206
00:13:23.036 --> 00:13:26.016
So while you are debugging and
testing your app with Chrome,

207
00:13:26.016 --> 00:13:29.067
you don't have this on Safari,
or Firefox, just on Chrome.

208
00:13:29.067 --> 00:13:34.857
You can try how everything looks
like on every orientation.

209
00:13:36.813 --> 00:13:42.041
I think it's pretty cool when you're
trying to test your apps like this.

