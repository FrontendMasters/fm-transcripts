WEBVTT

1
00:00:00.000 --> 00:00:02.426
Another API, screen orientation.

2
00:00:02.426 --> 00:00:05.946
Not every API will be
large as with geolocation.

3
00:00:05.946 --> 00:00:07.378
Some APIs are pretty simple.

4
00:00:07.378 --> 00:00:09.564
Screen orientation is one of those.

5
00:00:09.564 --> 00:00:13.651
With screen orientation,
you can know the current orientation and

6
00:00:13.651 --> 00:00:15.165
lock it to one specific.

7
00:00:15.165 --> 00:00:17.467
And I separated that in green and
light green.

8
00:00:17.467 --> 00:00:20.553
Remember those categories.

9
00:00:20.553 --> 00:00:25.849
Actually, knowing the current orientation
is knowing if you are in portrait or

10
00:00:25.849 --> 00:00:26.725
landscape.

11
00:00:26.725 --> 00:00:31.125
And that's green, which means
it works everywhere, on iPhones,

12
00:00:31.125 --> 00:00:33.220
on Androids, even on desktop.

13
00:00:33.220 --> 00:00:38.095
And there is a second part of the API
that is not available everywhere.

14
00:00:38.095 --> 00:00:42.600
For example, in Safari today, for
iOS and iPad, it's experimental, so

15
00:00:42.600 --> 00:00:45.332
you have to enable
an experimental feature.

16
00:00:45.332 --> 00:00:49.251
That means that at least it will
become stable at one point.

17
00:00:49.251 --> 00:00:52.304
That will let you lock the orientation.

18
00:00:52.304 --> 00:00:58.653
So lock the orientation is this idea
of calling screen.orientation.lock.

19
00:00:58.653 --> 00:01:04.882
In that case, your web app can be in
portrait forever, or in landscape forever,

20
00:01:04.882 --> 00:01:10.121
this is useful for games, for
example, that today you cannot log.

21
00:01:10.121 --> 00:01:13.451
The only thing that you can
do is using media queries,

22
00:01:13.451 --> 00:01:18.261
is like render like a model image saying,
hey, please, turn your phone on.

23
00:01:18.261 --> 00:01:22.405
Right or left okay, but with this
API you will be able to log that.

24
00:01:22.405 --> 00:01:27.665
So when you the user is browsing your
web you can lock the orientation.

25
00:01:27.665 --> 00:01:32.721
And you can specify which orientation,
do you want portrait landscape and then we

26
00:01:32.721 --> 00:01:38.010
have portrait secondary, that is actually
that's not a good one It's upside down.

27
00:01:38.010 --> 00:01:42.258
That's not a good one because the user
will never know where the home screen

28
00:01:42.258 --> 00:01:43.753
button or the gesture is.

29
00:01:43.753 --> 00:01:45.813
So, no, don't do that.

30
00:01:45.813 --> 00:01:47.854
Anyway, that was quick.

31
00:01:47.854 --> 00:01:48.989
Touch events.

32
00:01:48.989 --> 00:01:54.020
So we know that on mobile devices
typically we are using our fingers,

33
00:01:54.020 --> 00:01:58.705
and I'm saying typically because
also we have pens or pencils,

34
00:01:58.705 --> 00:02:03.062
we have stylus that we can use,
but we do have touch events.

35
00:02:03.062 --> 00:02:05.178
Why mouse events?

36
00:02:05.178 --> 00:02:09.282
The standard classic mouse
events are not good enough.

37
00:02:09.282 --> 00:02:13.795
First, mouse event the bands
like such as click, or

38
00:02:13.795 --> 00:02:17.088
mouse leave, or mouse down or hover.

39
00:02:17.088 --> 00:02:21.693
So mouse over, mouse out, the classic
mouse events are not good enough

40
00:02:21.693 --> 00:02:24.630
because here we can use
more than one finger.

41
00:02:24.630 --> 00:02:29.290
At the same time we have
more than one pointer, okay?

42
00:02:29.290 --> 00:02:33.656
And mouse events are not
actually supporting that.

43
00:02:33.656 --> 00:02:35.414
Okay, that's one thing.

44
00:02:35.414 --> 00:02:36.424
That's the question, yeah.

45
00:02:36.424 --> 00:02:39.745
&gt;&gt; The other thing that
the mouse always exists,

46
00:02:39.745 --> 00:02:42.906
while screen's not always being touched.

47
00:02:42.906 --> 00:02:44.422
&gt;&gt; Again.

48
00:02:44.422 --> 00:02:47.342
&gt;&gt; The mouse icon never goes away
even if we stopped moving it.

49
00:02:47.342 --> 00:02:51.122
&gt;&gt; Okay, so the mouse pointer on
the screen never goes away even if you

50
00:02:51.122 --> 00:02:53.499
don't have a mouse connected actually.

51
00:02:53.499 --> 00:02:59.400
Yeah and but here, actually or
with fingers, also on some screens,

52
00:02:59.400 --> 00:03:03.493
we also have pressure,
we can apply pressure.

53
00:03:03.493 --> 00:03:06.618
Or an angle, okay,
I'm not saying on every screen.

54
00:03:06.618 --> 00:03:09.751
In fact, on iOS,
we don't have pressure anymore.

55
00:03:09.751 --> 00:03:11.690
We used to have pressure, but

56
00:03:11.690 --> 00:03:16.201
Apple decided to change that because
no one was actually using that.

57
00:03:16.201 --> 00:03:21.056
But on the MacBook, for those of you in
the MacBook, the trackpad has pressure.

58
00:03:21.056 --> 00:03:24.707
And actually, you can detect that
pressure, but not on most events.

59
00:03:24.707 --> 00:03:26.922
Well, we do have touch events then.

60
00:03:26.922 --> 00:03:30.332
They work only of course
with touch screens.

61
00:03:30.332 --> 00:03:34.953
They have some basic events that
you combine into the document or

62
00:03:34.953 --> 00:03:39.157
to any element, touchstart,
touchend, touchcancel.

63
00:03:39.157 --> 00:03:41.760
By the way, what's touchcancel?

64
00:03:41.760 --> 00:03:45.021
So let's say that you have
your finger on the screen,

65
00:03:45.021 --> 00:03:49.964
you're moving the finger, that's
touchmove, you do this, it's touchend.

66
00:03:49.964 --> 00:03:51.117
But why cancel?

67
00:03:51.117 --> 00:03:57.379
Well, maybe you have your hand your finger
is there, but then someone's calling you.

68
00:03:57.379 --> 00:03:59.211
You have an incoming call.

69
00:03:59.211 --> 00:04:02.234
So if you have your finger
over the green button,

70
00:04:02.234 --> 00:04:06.227
the accept the call button,
it's not going to accept the call.

71
00:04:06.227 --> 00:04:10.421
Because you had your finger there,
your touch was there before the call.

72
00:04:10.421 --> 00:04:12.798
And in that case, it's a cancel.

73
00:04:12.798 --> 00:04:15.751
Your finger is still there, but
it's going to be canceled, okay?

74
00:04:15.751 --> 00:04:17.660
So we have touchmove when you drag.

75
00:04:19.110 --> 00:04:24.249
And this event is fired with
multiple coordinates for

76
00:04:24.249 --> 00:04:29.855
multi-touch, including
the force if it's available.

77
00:04:29.855 --> 00:04:32.789
So how many fingers can you detect?

78
00:04:32.789 --> 00:04:37.026
It depends on the device actually,
on iPhones and Android,

79
00:04:37.026 --> 00:04:41.762
on iPhones is typically five,
on Android depends on the hardware,

80
00:04:41.762 --> 00:04:44.431
typically is between four and eight.

81
00:04:44.431 --> 00:04:47.946
On iPad it's 11.

82
00:04:47.946 --> 00:04:52.361
Don't ask me why 11,
you will see an array of coordinates.

83
00:04:52.361 --> 00:04:57.285
Okay, if you wanna play with this,
just to see how this work,

84
00:04:57.285 --> 00:05:00.331
so I have a multi-touch tester here.

85
00:05:00.331 --> 00:05:05.583
They have the code there if you want,
let me turn on, turn off the code.

86
00:05:05.583 --> 00:05:11.026
So if you touch with one finger over
these cells, you will get yellow.

87
00:05:11.026 --> 00:05:14.903
With two fingers, you get pink,

88
00:05:14.903 --> 00:05:20.730
with three fingers,
light blue, four fingers.

89
00:05:20.730 --> 00:05:22.083
You say what?

90
00:05:22.083 --> 00:05:24.477
Look at this nothing, why?

91
00:05:24.477 --> 00:05:28.927
Because this phone detects up to three.

92
00:05:28.927 --> 00:05:31.900
An iPhone will take four.

93
00:05:31.900 --> 00:05:33.129
Okay, it's just that.

94
00:05:33.129 --> 00:05:40.748
Is it for fun, for games, or for
some special gesture like two fingers?

95
00:05:40.748 --> 00:05:43.405
Tapping with two fingers
will do something.

96
00:05:43.405 --> 00:05:46.269
We'll go to the home, things like that.

97
00:05:46.269 --> 00:05:47.577
It's actually pretty simple.

98
00:05:47.577 --> 00:05:53.070
It's not really complicated, okay, but
it's kind of a capability that we have.

99
00:05:53.070 --> 00:05:56.913
Touch events were actually
an Apple's invention.

100
00:05:56.913 --> 00:05:59.624
They were created by Apple for the iPhone.

101
00:05:59.624 --> 00:06:03.672
Because the iPhone was the first
multi-touch device on the market,

102
00:06:03.672 --> 00:06:05.569
at least on the end user market.

103
00:06:06.900 --> 00:06:11.370
And also, they had a patent on that.

104
00:06:11.370 --> 00:06:16.565
So that's why other vendors were not
implementing the touch events API,

105
00:06:16.565 --> 00:06:20.942
because they have the risk of
having a legal issue with Apple.

106
00:06:20.942 --> 00:06:25.689
So that's why the web
community created another

107
00:06:25.689 --> 00:06:30.328
spec that then at the end
Apple also implement.

108
00:06:30.328 --> 00:06:33.358
It's called Pointer Events.

109
00:06:33.358 --> 00:06:38.180
And today, we typically have
both on every mobile device, so

110
00:06:38.180 --> 00:06:40.693
it's up to you which one to use.

111
00:06:40.693 --> 00:06:43.732
Touch events the original Apple spec,
or pointer events,

112
00:06:43.732 --> 00:06:45.937
I will explain the difference in a second.

113
00:06:45.937 --> 00:06:49.909
Pointer events are based on mouse events.

114
00:06:49.909 --> 00:06:55.109
So they're pretty similar to how mouse
events work, and it's multi pointer.

115
00:06:55.109 --> 00:06:59.061
They can work with mouse,
with trackpads, with touch, with pens.

116
00:06:59.061 --> 00:07:03.255
And anything that you can
connect to your device.

117
00:07:03.255 --> 00:07:05.899
And you will receive one call,

118
00:07:05.899 --> 00:07:10.581
one execution to your event
handler per interaction.

119
00:07:10.581 --> 00:07:17.320
For example, if I have three fingers,
I receive three event handler calls.

120
00:07:17.320 --> 00:07:21.685
On touch events you receive one
with an array, okay, makes sense?

121
00:07:21.685 --> 00:07:26.600
In this case you will receive three
different execution calls and

122
00:07:26.600 --> 00:07:30.006
you will get the idea of the finger,
kind of.

123
00:07:32.040 --> 00:07:33.943
Tell you.

124
00:07:33.943 --> 00:07:37.710
The events aren't the same as mouse,
instead of mouse down,

125
00:07:37.710 --> 00:07:39.237
now it's pointer down.

126
00:07:39.237 --> 00:07:41.372
Pointerdown, pointerup, pointercancel.

127
00:07:41.372 --> 00:07:45.555
So it's like based on mouse events,
pointerover,

128
00:07:45.555 --> 00:07:48.702
pointerout, move, enter and leave.

129
00:07:48.702 --> 00:07:53.616
And the event receives coordinates, one
coordinate because it's for one pointer.

130
00:07:53.616 --> 00:07:59.205
A pointer ID that you can use
that to track that over time.

131
00:07:59.205 --> 00:08:05.535
The pointer type, so you will know
if it's a mouse, if it's a finger,

132
00:08:05.535 --> 00:08:10.720
if it's a pen,
an optional pressure tilt and twist data.

133
00:08:10.720 --> 00:08:13.779
That is not available on every hardware.

134
00:08:13.779 --> 00:08:14.844
It depends on the hardware.

135
00:08:14.844 --> 00:08:19.408
It can be a Samsung pen,
an Apple pencil, for example, and

136
00:08:19.408 --> 00:08:22.892
you can receive that metadata, make sense?

137
00:08:22.892 --> 00:08:28.490
And this capability is currently available
on every device, desktop and mobile.

138
00:08:31.190 --> 00:08:34.399
Virtual keyboard, this is interesting, and

139
00:08:34.399 --> 00:08:37.701
I think that more people
should start using it.

140
00:08:37.701 --> 00:08:39.481
And we are waiting for Apple.

141
00:08:39.481 --> 00:08:42.408
Apple is not implementing this API yet.

142
00:08:42.408 --> 00:08:43.432
What's this?

143
00:08:43.432 --> 00:08:45.556
This is for the built like keyboard,

144
00:08:45.556 --> 00:08:49.609
you know that the mobile devices we
have a built in keyboard on screen.

145
00:08:49.609 --> 00:08:55.864
Well, can we show that virtual keyboard or
hide the virtual keyboard from JavaScript?

146
00:08:55.864 --> 00:08:58.680
No, not really.

147
00:08:58.680 --> 00:09:03.399
Can we detect that the virtual
keyboard is on the screen and

148
00:09:03.399 --> 00:09:05.819
how much space it's taking?

149
00:09:05.819 --> 00:09:10.930
No, well, that API will let us do that.

150
00:09:10.930 --> 00:09:14.542
So it's navigator.virtualkeyboard, but

151
00:09:14.542 --> 00:09:20.251
it's already today working on Chrome,
on desktop on mobile devices.

152
00:09:20.251 --> 00:09:22.886
You say, desktop,
well on Windows for example,

153
00:09:22.886 --> 00:09:25.605
you can have some devices
on Windows 10 and 11.

154
00:09:25.605 --> 00:09:30.170
That you can detach the physical
keyboard and in that case,

155
00:09:30.170 --> 00:09:33.282
you will get a virtual keyboard, okay?

156
00:09:33.282 --> 00:09:35.410
So you can show it, hide it.

157
00:09:35.410 --> 00:09:42.732
And there is an event, geometryChanged,
where you receive coordinates of the x,

158
00:09:42.732 --> 00:09:46.928
y width and
height of the keyword on the screen.

159
00:09:46.928 --> 00:09:51.495
So then you can adjust your design or
your UI accordingly.

160
00:09:51.495 --> 00:09:53.917
Does it make sense?

161
00:09:53.917 --> 00:09:59.669
So also we have new CSS environmental
variables that you can use for

162
00:09:59.669 --> 00:10:06.972
marginings, for paddings, that will tell
you where the keyboard starts and ends.

163
00:10:06.972 --> 00:10:09.612
So you can work with CSS.

164
00:10:09.612 --> 00:10:14.174
I have a video to show you what
that looked like with a sample.

165
00:10:14.174 --> 00:10:17.148
So actually,
when you when you open the keyboard,

166
00:10:17.148 --> 00:10:20.135
you can see that everything
moves automatically.

167
00:10:20.135 --> 00:10:25.663
Well, you do that with CSS, just by
applying the right margins and paddings.

168
00:10:27.217 --> 00:10:31.610
And actually they created this API for
that particular sample.

169
00:10:31.610 --> 00:10:33.196
When you have a chat.

170
00:10:33.196 --> 00:10:36.819
There was actually complicated,
sometimes everything moves out.

171
00:10:36.819 --> 00:10:41.753
When in this case, we are actually making
the whole scrollable area smaller because

172
00:10:41.753 --> 00:10:43.290
of the virtual keyboard.

