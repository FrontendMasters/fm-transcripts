WEBVTT

1
00:00:00.220 --> 00:00:02.220
Contact Picker, that sounds pretty cool.

2
00:00:03.270 --> 00:00:06.417
I'm not sure if it's too useful,
unless you have a social network, but

3
00:00:06.417 --> 00:00:07.940
it sounds interesting.

4
00:00:07.940 --> 00:00:13.220
So with this API, we can read
contacts from the user's database.

5
00:00:13.220 --> 00:00:17.957
This is mainly targeting mobile devices,
because on desktop,

6
00:00:17.957 --> 00:00:23.235
you don't have a contact default app,
but on iOS and Android it works.

7
00:00:23.235 --> 00:00:27.454
On iOS it's an experimental API,
so you need to enable it manually,

8
00:00:27.454 --> 00:00:29.330
on Android it works.

9
00:00:29.330 --> 00:00:32.641
You define the properties that you wanna
get, like I want the name, the email, and

10
00:00:32.641 --> 00:00:33.900
the phone number.

11
00:00:33.900 --> 00:00:37.282
If you want one,
the user should pick one or multiple, so

12
00:00:37.282 --> 00:00:39.920
you won't get the database.

13
00:00:39.920 --> 00:00:45.370
The user will see a dialog, and
he will pick one or more contacts.

14
00:00:45.370 --> 00:00:51.472
And based on user selection,
you will get back into the contacts

15
00:00:51.472 --> 00:00:57.660
variable the array of contacts
that the user picked, okay?

16
00:00:57.660 --> 00:00:59.760
What are you going to do
with that is your problem.

17
00:00:59.760 --> 00:01:01.100
So it's not about the API.

18
00:01:01.100 --> 00:01:04.536
So you get the email, you send that
to your server, it's up to you.

19
00:01:08.244 --> 00:01:12.327
Fullscreen API, this is the one that
we have been using in Cookie Masters.

20
00:01:12.327 --> 00:01:16.361
Because we were starting the cookie,
then it was going full screen.

21
00:01:16.361 --> 00:01:21.076
It's actually simple,
you just take a domElement,

22
00:01:21.076 --> 00:01:25.808
a div, a section, and
you call requestFullscreen.

23
00:01:25.808 --> 00:01:31.204
There is only one bad part here,
Safari uses prefix.

24
00:01:31.204 --> 00:01:34.986
Remember I mentioned that we were
about to see two API's with a prefix,

25
00:01:34.986 --> 00:01:36.128
this is a second one.

26
00:01:36.128 --> 00:01:44.380
So it's
domElement.webKitrequestFullscreen, okay?

27
00:01:44.380 --> 00:01:49.143
You can get the current fullscreen element
with document.fullscreenElement, and

28
00:01:49.143 --> 00:01:51.668
you can exitFullscreen
element at any time.

29
00:01:51.668 --> 00:01:53.617
In this case we are exiting from.

30
00:01:53.617 --> 00:01:58.272
Remember we were using the gamepad, and
it was pushing a button that was exiting

31
00:01:58.272 --> 00:02:01.202
the fullscreen, well,
I'm just calling that.

32
00:02:01.202 --> 00:02:04.595
And also,
you can check the event fullscreenchange,

33
00:02:04.595 --> 00:02:09.185
because the user can typically get out
of full screen with the Escape key.

34
00:02:09.185 --> 00:02:14.516
Or on the phone dragging from the top, or
maybe doing some gesture or something.

35
00:02:14.516 --> 00:02:18.350
And in that case, based on the user,
you will get that event fire.

36
00:02:20.278 --> 00:02:20.836
Make sense?

37
00:02:20.836 --> 00:02:25.495
So going back to our code in,

38
00:02:31.333 --> 00:02:35.442
This is actually in Cooking.js.

39
00:02:35.442 --> 00:02:40.668
We have here the event handlers for
fullscreenchange,

40
00:02:40.668 --> 00:02:45.455
and also for
webkitfullscreenchange for Safari.

41
00:02:45.455 --> 00:02:51.040
And then if we search here,
this is where I'm requesting full screen.

42
00:02:51.040 --> 00:02:56.404
First, I'm verifying if
requestFullscreen exists

43
00:02:56.404 --> 00:03:02.250
in Cooking.root,
it's actually an element in the DOM.

44
00:03:03.450 --> 00:03:06.798
If it's there,
I'm executing that function, if not,

45
00:03:06.798 --> 00:03:10.588
I'm verifying if the prefix
version exists, and then call it.

46
00:03:10.588 --> 00:03:13.255
And something similar when you
disconnect the full screen.

47
00:03:13.255 --> 00:03:15.710
That's the only part that is tricky.

48
00:03:15.710 --> 00:03:20.208
But fortunately for all of you that
are doing this workshop today,

49
00:03:20.208 --> 00:03:24.410
these are just the two
API's with that problem.

50
00:03:24.410 --> 00:03:31.090
Ten years ago, most of the APIs were
prefixed, and also CSS were prefixed.

51
00:03:31.090 --> 00:03:39.327
So every call to a capability API
was actually really complicated.

52
00:03:39.327 --> 00:03:42.990
Lot of version,
we had the ms prefix for IE,

53
00:03:42.990 --> 00:03:47.847
we had the moz prefix for
Mozilla, and the webkit prefix.

54
00:03:47.847 --> 00:03:50.662
Payment Request API.

55
00:03:50.662 --> 00:03:55.906
So this is an API that
will let the browser be

56
00:03:55.906 --> 00:04:01.733
in the middle between you,
actually the user,

57
00:04:01.733 --> 00:04:06.406
your user, and a payment processor.

58
00:04:06.406 --> 00:04:10.090
So we have the merchant,
that's you, that's us, the user,

59
00:04:10.090 --> 00:04:12.360
and a payment processor.

60
00:04:12.360 --> 00:04:17.400
Can be PayPal, Stripe, companies
that are working with credit cards,

61
00:04:17.400 --> 00:04:21.060
debit cards, and are doing this stuff.

62
00:04:21.060 --> 00:04:22.069
The API is in the middle.

63
00:04:23.500 --> 00:04:30.696
So also, on iOS,
you can use this API to use Apple Pay.

64
00:04:30.696 --> 00:04:33.063
But also Apple has its
own JavaScript library,

65
00:04:33.063 --> 00:04:35.264
in case you wanna use
Apple Pay separately.

66
00:04:35.264 --> 00:04:37.500
So you can use Apple Pay.

67
00:04:37.500 --> 00:04:41.875
Apple Pay is the ability
that some countries, or

68
00:04:41.875 --> 00:04:47.744
Apple has in some countries,
only to actually pay with Touch ID or

69
00:04:47.744 --> 00:04:52.790
Face ID on your phone or
your laptop on Safari.

70
00:04:52.790 --> 00:04:55.236
So we are not going to
see the code directly,

71
00:04:55.236 --> 00:04:58.030
I'm just going to give you the idea, why?

72
00:04:58.030 --> 00:05:01.656
Because unless you are working
at the payment processor,

73
00:05:01.656 --> 00:05:05.370
typically you don't use
this code directly.

74
00:05:05.370 --> 00:05:09.786
You use an SDK, a library,
from Stripe or Paypal or

75
00:05:09.786 --> 00:05:14.970
other payment processors,
and you just use it.

76
00:05:14.970 --> 00:05:18.370
They are using the Payment Request API,
not you directly.

77
00:05:20.020 --> 00:05:24.866
But actually the idea
is that the site will

78
00:05:24.866 --> 00:05:29.992
call the API directly or
through a library.

79
00:05:29.992 --> 00:05:35.049
We are here, then the browser UI and
native dialog, such as the one you

80
00:05:35.049 --> 00:05:40.559
see here, will collect the payment
details, credit card, all the stuff.

81
00:05:40.559 --> 00:05:46.373
And then it goes directly,
the browser passes that response,

82
00:05:46.373 --> 00:05:49.233
to the processor site, okay?

83
00:05:49.233 --> 00:05:54.124
Actually, you as a web developer, you
will never see the credit card details,

84
00:05:54.124 --> 00:05:55.293
that's the idea.

85
00:05:55.293 --> 00:06:02.109
So we as web developer, we won't get
the credit card numbers or anything.

86
00:06:02.109 --> 00:06:04.300
The idea is to avoid that.

87
00:06:04.300 --> 00:06:08.700
And also because it's
targeting native dialogs.

88
00:06:08.700 --> 00:06:09.946
For example, on Android,

89
00:06:09.946 --> 00:06:13.060
you can have your Google Wallet
set up with your credit card.

90
00:06:13.060 --> 00:06:18.668
So it's just a one tap to buy, you don't
need to type any credit card or anything.

91
00:06:18.668 --> 00:06:22.194
And on Apple Pay,
it's just putting your finger or

92
00:06:22.194 --> 00:06:27.127
putting your face and accept the payment,
and typically that's all.

93
00:06:27.127 --> 00:06:32.200
Okay, so that's the capability today
on every browser, payment request.

