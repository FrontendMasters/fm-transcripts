WEBVTT

1
00:00:00.160 --> 00:00:05.197
So let's go over permissions and security
and how that works before actually

2
00:00:05.197 --> 00:00:10.740
starting seeing those APIs,
those capabilities that I'm promising.

3
00:00:10.740 --> 00:00:12.250
So permissions and security.

4
00:00:14.040 --> 00:00:18.370
So some permissions, so
some APIs are harmless.

5
00:00:18.370 --> 00:00:25.580
So they have no cost,
no costing money, no coasting privacy.

6
00:00:25.580 --> 00:00:32.920
I know it's just some information,
some ability or no playing a sound.

7
00:00:32.920 --> 00:00:37.901
Playing a sound over the speakers
barely can harm your ears.

8
00:00:37.901 --> 00:00:41.310
Yeah, but it has no cost.

9
00:00:41.310 --> 00:00:45.670
Some other APIs and permissions,
they open a privacy risk.

10
00:00:45.670 --> 00:00:49.584
For example, opening the camera,
opening the microphone,

11
00:00:49.584 --> 00:00:54.490
getting the user's location, the
geolocation, so where you are on Earth.

12
00:00:55.940 --> 00:00:58.910
And yeah, there is a privacy risk there.

13
00:00:58.910 --> 00:01:05.100
And sometimes it can involve a cost,
such as making a call, sending an SMS.

14
00:01:05.100 --> 00:01:07.320
Okay, so there is a real cost there.

15
00:01:08.450 --> 00:01:11.405
So when there are costs or risks,

16
00:01:11.405 --> 00:01:17.427
some browsers decide to put a limit
on the usage of that capability.

17
00:01:17.427 --> 00:01:19.864
The W3C specs of the standard for

18
00:01:19.864 --> 00:01:24.314
the web platform,
typically that's not to say what you do.

19
00:01:24.314 --> 00:01:28.723
So sometimes there are recommendations
that the standard recommends the use

20
00:01:28.723 --> 00:01:29.342
eration.

21
00:01:29.342 --> 00:01:33.331
So the browser to limit this API, but

22
00:01:33.331 --> 00:01:38.230
each browser decides
how to implement that.

23
00:01:38.230 --> 00:01:41.780
Okay, let's say that most of
the browser's are kind of the same but

24
00:01:41.780 --> 00:01:44.038
there are some API's that are different.

25
00:01:44.038 --> 00:01:48.984
So for example, on Firefox,
you might see a permission dialog for

26
00:01:48.984 --> 00:01:52.174
using that API and in Chrome, you don't.

27
00:01:52.174 --> 00:01:58.363
Okay, so it's not the same experience
on every browser for some API's.

28
00:01:58.363 --> 00:02:04.471
Sometimes they just need user engagement
and requirements, for example, Chrome.

29
00:02:04.471 --> 00:02:07.719
Remember I mentioned one API
that we won't cover today,

30
00:02:07.719 --> 00:02:09.758
that was known as Background Sync.

31
00:02:09.758 --> 00:02:15.511
Background Sync lets you sync your data
in the background a few minutes later or

32
00:02:15.511 --> 00:02:16.913
a few hours later.

33
00:02:16.913 --> 00:02:22.098
Let's say you're on an app,
I know it's a calendar app, webapp.

34
00:02:22.098 --> 00:02:28.062
You're storing your new kind of entry but
for some reason the server is down or

35
00:02:28.062 --> 00:02:31.735
you don't have connection
you're offline for

36
00:02:31.735 --> 00:02:36.435
whatever reason you are on a plane and
that plane has no Wi Fi.

37
00:02:36.435 --> 00:02:39.931
So what to do with that?

38
00:02:39.931 --> 00:02:43.787
Yeah, you can save it on
IndexedDB locally, but yeah,

39
00:02:43.787 --> 00:02:48.972
if you don't open that up again,
that new entry will never hit the server.

40
00:02:48.972 --> 00:02:53.161
Well, with Background Sync,
you can ask the browser, hey browser,

41
00:02:53.161 --> 00:02:56.001
I know we don't have connection right now,
but

42
00:02:56.001 --> 00:02:59.276
can we try later,
even if the user forgets about this?

43
00:02:59.276 --> 00:03:02.553
Well, background sync will do that.

44
00:03:02.553 --> 00:03:06.523
When you get out of the plane and
you turn off airplane mode, the browser,

45
00:03:06.523 --> 00:03:08.905
even if the user is not
opening the browser.

46
00:03:08.905 --> 00:03:11.459
The browser is running
in the background and

47
00:03:11.459 --> 00:03:14.019
it will know that now
we do have connection.

48
00:03:14.019 --> 00:03:15.737
Okay, I have a pending thing.

49
00:03:15.737 --> 00:03:20.246
Let's try to do that Chrome
will not give the permission to

50
00:03:20.246 --> 00:03:23.016
the user permission dialog at all.

51
00:03:23.016 --> 00:03:29.513
So if you're the developer, you're asking
for that sync operation the requirement to

52
00:03:29.513 --> 00:03:35.331
use that capability is a user engagement
requirement, which roughly means.

53
00:03:35.331 --> 00:03:40.556
That Chrome will check if the user
is currently using your app or not.

54
00:03:40.556 --> 00:03:45.452
If it's using your app frequently,
and that algorithm is,

55
00:03:45.452 --> 00:03:50.156
I don't want to say secret
because it's open source, but

56
00:03:50.156 --> 00:03:53.522
it's not something that you can manage.

57
00:03:53.522 --> 00:03:58.094
So if there is enough user engagement,
when you try to use the API,

58
00:03:58.094 --> 00:03:59.899
it will grant you access.

59
00:03:59.899 --> 00:04:03.447
If not, it will deny you access.

60
00:04:03.447 --> 00:04:07.520
But the most common scenario, and
probably you know that as a user,

61
00:04:07.520 --> 00:04:09.385
is to see a permission dialog.

62
00:04:09.385 --> 00:04:13.989
You enter a Zoom call from the website,
or a Google Meet call, or

63
00:04:13.989 --> 00:04:19.024
a Microsoft Teams call, from the browser,
and the first thing you see

64
00:04:19.024 --> 00:04:23.916
is a dialogue asking you for
a camera and microphone access, okay?

65
00:04:23.916 --> 00:04:26.621
Or Google Maps asking you for
geolocation access.

66
00:04:26.621 --> 00:04:30.192
Well, that's a permission dialogue, okay?

67
00:04:30.192 --> 00:04:35.246
cool, most capabilities these days,
require HTTPS.

68
00:04:35.246 --> 00:04:39.198
Mostly on Chromium-based browsers.

69
00:04:39.198 --> 00:04:44.731
Safari is still supporting HTTP for that,
so if you want to get users location,

70
00:04:44.731 --> 00:04:49.368
if you want to connect to a bluetooth
device, you must be in HTTPS.

71
00:04:49.368 --> 00:04:55.137
And you know that that's a restriction for
having a website today.

72
00:04:55.137 --> 00:05:00.151
So also some capabilities will need
the user interaction to be enabled.

73
00:05:00.151 --> 00:05:06.978
For example, microphone and camera,
or what that depends on the browser,

74
00:05:06.978 --> 00:05:12.098
but geolocation, bluetooth,
Web Push, sometimes for

75
00:05:12.098 --> 00:05:16.805
the user to see a dialog
with the permission dialog.

76
00:05:16.805 --> 00:05:22.190
The user has to first click on
a button you can not request that

77
00:05:22.190 --> 00:05:29.168
permission when the page loads,
because that's a user experience problem.

78
00:05:29.168 --> 00:05:33.575
Before this we were getting into websites
that were asking for permissions all

79
00:05:33.575 --> 00:05:37.661
the time you don't know why you're
there yet, so you typically say no.

80
00:05:37.661 --> 00:05:42.707
So now you require a user interaction
before actually asking for permission.

81
00:05:42.707 --> 00:05:45.797
Permissions are granted on an origin base,
so

82
00:05:45.797 --> 00:05:49.601
if the user is granting you permission for
a capability,

83
00:05:49.601 --> 00:05:54.449
you will get that permission for
the whole origin, so the whole domain.

84
00:05:54.449 --> 00:05:55.400
Different HTMLs,

85
00:05:55.400 --> 00:05:59.269
different folders in the same domain
will also get granted that permission.

86
00:05:59.269 --> 00:06:04.714
You cannot narrow that permission
per folder, or per file,

87
00:06:04.714 --> 00:06:11.671
or per PWA, or per manifest, or
per service worker, no, it's per origin.

88
00:06:11.671 --> 00:06:16.025
Okay, which is good and
bad, it's just what it is.

89
00:06:16.025 --> 00:06:20.586
If the user denies a permission,
the API won't be able to ask again.

90
00:06:20.586 --> 00:06:24.488
You can ask, but
it will be automatically denied.

91
00:06:24.488 --> 00:06:28.640
So if the user said no,
you as a JavaScript developer,

92
00:06:28.640 --> 00:06:32.721
you don't have a way to
request that dialogue again.

93
00:06:32.721 --> 00:06:35.875
The only way you have,
if it's denied immediately,

94
00:06:35.875 --> 00:06:37.917
you can show a message to the user.

95
00:06:37.917 --> 00:06:41.377
The user needs to go manually
to the browser settings.

96
00:06:41.377 --> 00:06:47.543
I will show you where they are on each
browser and re-enable that permission.

97
00:06:47.543 --> 00:06:51.160
Okay, If the user grants the permission,

98
00:06:51.160 --> 00:06:55.990
depending on the capability,
it may have no time limit.

99
00:06:55.990 --> 00:07:00.369
So it will be like forever,
you are granted forever, for

100
00:07:00.369 --> 00:07:05.295
a couple of days,
sometimes it's 15 days, 13 days a week,

101
00:07:05.295 --> 00:07:09.328
sometimes for a session or
sometimes per one usage.

102
00:07:09.328 --> 00:07:12.020
It depends on the capability and
it depends on the browser.

103
00:07:12.020 --> 00:07:18.791
For example, camera and microphone,
it's typically per session.

104
00:07:18.791 --> 00:07:24.729
Geolocation is typically per usage,
so it depends.

105
00:07:24.729 --> 00:07:26.746
It depends on the capability.

106
00:07:26.746 --> 00:07:28.784
You cannot manage that, okay?

107
00:07:28.784 --> 00:07:32.978
Just keep in mind and
that's the user experience.

108
00:07:32.978 --> 00:07:36.129
It's the best scenario world.

