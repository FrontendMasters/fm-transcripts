WEBVTT

1
00:00:00.510 --> 00:00:02.120
So, capabilities.

2
00:00:02.120 --> 00:00:04.360
So we are going to cover capabilities.

3
00:00:04.360 --> 00:00:09.299
So we need to start understanding,
okay, what's a Web capability?

4
00:00:09.299 --> 00:00:12.517
Because we know what a Web app is,
I'm not going to define a Web app,

5
00:00:12.517 --> 00:00:14.510
I'm expecting you to be Web developers.

6
00:00:14.510 --> 00:00:16.930
So we know what a website is,
what a Web app is.

7
00:00:16.930 --> 00:00:18.662
But what's actually a capability?

8
00:00:18.662 --> 00:00:23.440
Because actually,
rendering HTML is a capability, right?

9
00:00:23.440 --> 00:00:26.381
So using CSS might be a capability, but

10
00:00:26.381 --> 00:00:32.720
it seems like we are not going to focus
on that, on basic HTML things to do.

11
00:00:32.720 --> 00:00:37.956
So it's actually the ability of
a Web browser, or Web application

12
00:00:37.956 --> 00:00:44.010
to perform a specific task or function,
using typically a built-in API?

13
00:00:44.010 --> 00:00:45.589
I'm saying typically,

14
00:00:45.589 --> 00:00:50.840
because there are a couple of
capabilities that are not API's actually.

15
00:00:50.840 --> 00:00:56.245
They are sometimes DOM events,
they are offered through

16
00:00:56.245 --> 00:01:01.322
an HTML element,
not really an API from the browser.

17
00:01:01.322 --> 00:01:07.270
But let's say that 98% of the capabilities
are API-based, and mostly the new ones.

18
00:01:07.270 --> 00:01:13.420
Maybe we are still getting some features
from the past that is still HTML.

19
00:01:13.420 --> 00:01:15.030
Just to give you an example.

20
00:01:15.030 --> 00:01:19.926
If you wanna get open the camera so
the user can take a selfie,

21
00:01:19.926 --> 00:01:24.246
there is an API, but
also you can use input type file,

22
00:01:24.246 --> 00:01:30.023
with some attributes that you can add
to express that you want a selfie.

23
00:01:30.023 --> 00:01:32.974
And then it will open the camera and
take a selfie, and

24
00:01:32.974 --> 00:01:37.710
there is no JavaScript involved there,
and we can take that as a capability.

25
00:01:37.710 --> 00:01:42.020
But we will focus here mostly
on the JavaScript APIs.

26
00:01:43.250 --> 00:01:46.440
So, have in mind that it's
still a Web platform.

27
00:01:46.440 --> 00:01:50.160
So if you are a Web developer,
you know how these work.

28
00:01:50.160 --> 00:01:52.890
Yeah, maybe if you are new to the Web,
I mean,

29
00:01:52.890 --> 00:01:56.671
if you have started doing Web
development in the past year or so,

30
00:01:56.671 --> 00:02:00.259
maybe you haven't deal with
a lot of compatibility issues.

31
00:02:01.330 --> 00:02:05.460
But the Web platform is vendor agnostic.

32
00:02:05.460 --> 00:02:10.252
So it's not like a platform created
by one company, it's actually

33
00:02:10.252 --> 00:02:15.296
created by everyone, of course,
that we have different companies and

34
00:02:15.296 --> 00:02:20.525
browsers with enough power to push
the Web forward in one way or the other.

35
00:02:20.525 --> 00:02:25.091
I'm talking about Google with Chrome,
Apple with Safari,

36
00:02:25.091 --> 00:02:30.104
Let's say still Mozilla with Firefox,
has a little power there,

37
00:02:30.104 --> 00:02:34.222
also we have Samsung, Intel,
Opera, and Brave, and

38
00:02:34.222 --> 00:02:38.727
many others that are pushing
the wave in one way or another.

39
00:02:38.727 --> 00:02:42.853
But because it's multi-vendor, and
we have standards and specs, and

40
00:02:42.853 --> 00:02:46.210
we have different ideas on
how to implement things.

41
00:02:46.210 --> 00:02:50.100
Sometimes we need to deal
with compatibility issues.

42
00:02:50.100 --> 00:02:51.058
So for example,

43
00:02:51.058 --> 00:02:55.760
some capabilities that we will see later
won't be available on every browser.

44
00:02:55.760 --> 00:02:59.619
I will give you enough warnings
on which API's are everywhere,

45
00:02:59.619 --> 00:03:01.920
which other API's are not.

46
00:03:01.920 --> 00:03:02.924
But for that,

47
00:03:02.924 --> 00:03:07.950
we need to remember a design pattern
that has been in the Web for a while.

48
00:03:07.950 --> 00:03:14.090
I remember talking about progressive
enhancement since probably early 2000s.

49
00:03:14.090 --> 00:03:18.705
That the idea is to make an app
that works everywhere, and

50
00:03:18.705 --> 00:03:22.466
start adding layers
based on compatibility.

51
00:03:22.466 --> 00:03:29.070
So if that device supports Bluetooth,
okay, we will add Bluetooth to our app.

52
00:03:29.070 --> 00:03:33.459
If you're opening that up in another
device without Bluetooth compatibility,

53
00:03:33.459 --> 00:03:36.830
the rest should work instead
of giving us an error.

54
00:03:36.830 --> 00:03:40.590
So we are adding layers
based on compatibility.

55
00:03:40.590 --> 00:03:43.350
So here you have,
we are not going to read this.

56
00:03:43.350 --> 00:03:47.910
But here you have a list
of maybe all the API's or

57
00:03:47.910 --> 00:03:54.408
most of the API's available today
on the Web with a link to the spec,

58
00:03:54.408 --> 00:03:59.317
or with a link to an article
that explains that API.

59
00:03:59.317 --> 00:04:02.945
Example, so you have a lot as you can see.

60
00:04:02.945 --> 00:04:08.060
But these API are not just
a list organized alphabetically.

61
00:04:08.060 --> 00:04:13.750
They are organized by some
kind of an idea color.

62
00:04:13.750 --> 00:04:18.087
We have green API's, and those are API's
that are currently available in every

63
00:04:18.087 --> 00:04:20.190
browser on every platform.

64
00:04:20.190 --> 00:04:26.083
So that's iOS, Android,
Chrome on dekstop, Safari on the Mac,

65
00:04:26.083 --> 00:04:31.840
Firefox, Samsung Internet browser,
and it's a mature API.

66
00:04:31.840 --> 00:04:34.752
So it has been for a while typically and

67
00:04:34.752 --> 00:04:39.150
it's safe to use that API,
it typically works.

68
00:04:39.150 --> 00:04:43.818
There is always an asterisk here saying,
hey, be careful,

69
00:04:43.818 --> 00:04:49.861
because that's when technically possible,
because maybe the API is there,

70
00:04:49.861 --> 00:04:54.435
but the user has disabled the feature,
or for some reason,

71
00:04:54.435 --> 00:04:58.580
that API is there, but
the capability is not, okay?

72
00:04:58.580 --> 00:05:02.370
So, I mean, the API might work, but
maybe the feature is not there.

73
00:05:03.970 --> 00:05:09.230
We have some light-green API's
that it's fairly mature.

74
00:05:09.230 --> 00:05:10.383
You can use them.

75
00:05:10.383 --> 00:05:13.570
The problem is that,
not every browser is on it.

76
00:05:14.660 --> 00:05:21.510
Sometimes it's about,
let's say how big is the browser.

77
00:05:21.510 --> 00:05:26.900
Sometimes it's about some commercial
discussions behind scenes.

78
00:05:28.130 --> 00:05:32.574
So I'm saying that just to
say this really quickly,

79
00:05:32.574 --> 00:05:39.748
light-green API's are 99% working on
Chrome, on Chromium-based browsers,

80
00:05:39.748 --> 00:05:46.060
that's Google Chrome,
Microsoft Edge, Samsung Internet.

81
00:05:46.060 --> 00:05:49.739
And then we have other browsers,
such as Firefox and Safari,

82
00:05:49.739 --> 00:05:52.302
that are not typically implemented them.

83
00:05:52.302 --> 00:05:57.238
And also there are some, Chromium-based
browsers that are disabling that feature,

84
00:05:57.238 --> 00:05:58.126
such as Brave.

85
00:05:58.126 --> 00:06:02.994
Today, Brave, Firefox, and
Safari are kind of a group, and

86
00:06:02.994 --> 00:06:06.837
they will have Microsoft and
Google with Edge and

87
00:06:06.837 --> 00:06:11.725
Chrome that they have probably today,
80% of the market.

88
00:06:11.725 --> 00:06:16.560
Anyway, that they are saying we wanna push
these API's, and the other group says no,

89
00:06:16.560 --> 00:06:18.930
we don't wanna to push those API's.

90
00:06:18.930 --> 00:06:21.910
I don't wanna get into that
discussion of why what's going on?

91
00:06:21.910 --> 00:06:23.208
What's the problem, okay?

92
00:06:23.208 --> 00:06:26.893
But just have in mind that we have
a lot of API's that we will see today,

93
00:06:26.893 --> 00:06:30.589
that are working pretty good, but
only on Chromium-based browser.

94
00:06:31.910 --> 00:06:35.170
And that means not for
example, on iPhone or iPad.

95
00:06:37.530 --> 00:06:40.880
So, do we have iPhone users here?

96
00:06:40.880 --> 00:06:42.010
Right, iPad users?

97
00:06:42.010 --> 00:06:44.870
Yeah, are you using Chrome or
Safari on your iPhone?

98
00:06:47.710 --> 00:06:48.415
&gt;&gt; Mostly Safari.

99
00:06:48.415 --> 00:06:49.260
&gt;&gt; Mostly Safari.

100
00:06:49.260 --> 00:06:50.820
Do we have Chrome installed?

101
00:06:50.820 --> 00:06:51.623
Do you use it?

102
00:06:51.623 --> 00:06:52.171
&gt;&gt; Sometimes.

103
00:06:52.171 --> 00:06:53.117
&gt;&gt; Sometimes.

104
00:06:53.117 --> 00:06:55.473
Do you know that Chrome on
iOS is not really Chrome?

105
00:06:55.473 --> 00:06:59.333
What?

106
00:06:59.333 --> 00:07:03.256
So it has the icon, yeah,
it looks like Chrome,

107
00:07:03.256 --> 00:07:07.948
it's connected to your Google account,
but as of today,

108
00:07:07.948 --> 00:07:12.862
2023, actually it's Safari
with a different scheme.

109
00:07:12.862 --> 00:07:16.810
And the same happens on Firefox, and
the same happens on any other browser.

110
00:07:16.810 --> 00:07:21.930
It's not actually a Google's
responsibility, it's an Apple restriction.

111
00:07:21.930 --> 00:07:25.930
So on iOS on the App Store,
that's iOS and iPad OS,

112
00:07:25.930 --> 00:07:31.780
you cannot publish an app with
a different Web rendering engine.

113
00:07:31.780 --> 00:07:34.846
So if you wanna publish a browser,

114
00:07:34.846 --> 00:07:39.520
that browser must use
the built-in WebKit engine.

115
00:07:39.520 --> 00:07:43.160
It's called the WKWebView internally,

116
00:07:43.160 --> 00:07:48.960
which means that the API's
are just the same as in Safari.

117
00:07:48.960 --> 00:07:52.759
In fact, sometimes not even the same,
sometimes are less,

118
00:07:52.759 --> 00:07:56.670
because that Web view is
more limited than Safari.

119
00:07:56.670 --> 00:08:01.460
So meaning that Google Chrome on iOS,
it's not really Google Chrome.

120
00:08:02.890 --> 00:08:05.898
So just have that in mind when
we're talking about compatibility,

121
00:08:05.898 --> 00:08:09.190
because maybe we're saying, hey,
this works in Google Chrome.

122
00:08:09.190 --> 00:08:12.870
And you're thinking well, on my iPhone,
I have Chrome I will try that.

123
00:08:12.870 --> 00:08:15.260
Well, no, that's not how that works.

124
00:08:15.260 --> 00:08:18.230
Yes.
&gt;&gt; Does that also apply to MacBooks.

125
00:08:18.230 --> 00:08:20.320
&gt;&gt; No, it doesn't apply to the to the Mac.

126
00:08:20.320 --> 00:08:23.074
So on Mac OS,
Google Chrome is Google Chrome,

127
00:08:23.074 --> 00:08:27.070
Firefox in Firefox and
there is no restriction for that.

128
00:08:27.070 --> 00:08:31.230
So that restriction applies
only on iOS and iPad OS.

129
00:08:31.230 --> 00:08:34.553
That might change in the future,
I don't know.

130
00:08:34.553 --> 00:08:39.367
I mean, that has been like that
since the beginning of iOS, and now,

131
00:08:39.367 --> 00:08:44.347
there are a lot of legal requirements
in Europe, in Australia, in UK,

132
00:08:44.347 --> 00:08:50.630
that they're pushing Apple into openness
because it doesn't make too much sense.

133
00:08:50.630 --> 00:08:53.300
So it might change in the future.

134
00:08:53.300 --> 00:09:00.576
In fact, both Firefox and Chrome, they're
preparing themselves for that moment.

135
00:09:00.576 --> 00:09:05.780
Already today,
a project in the open source repository,

136
00:09:05.780 --> 00:09:09.390
they're testing the engine in iOS.

137
00:09:09.390 --> 00:09:13.782
So it's like they're preparing the work,
because that might happen,

138
00:09:13.782 --> 00:09:16.010
okay, in the near future.

139
00:09:16.010 --> 00:09:19.470
I don't know, but it might happen, okay?

140
00:09:19.470 --> 00:09:20.290
There was a question there?

141
00:09:22.240 --> 00:09:27.091
&gt;&gt; Yeah, so with iOS Chrome, then with
an update, would that just be the Safaris

142
00:09:27.091 --> 00:09:30.110
update then for that specific?-
&gt;&gt; That's a good question.

143
00:09:30.110 --> 00:09:33.900
Actually, today,
you cannot update Safari in the App Store.

144
00:09:33.900 --> 00:09:35.726
So Safari goes with the OS.

145
00:09:35.726 --> 00:09:39.850
So to update Safari,
Safari is not actually in the App Store.

146
00:09:39.850 --> 00:09:44.750
So if you search for Safari in
the App Store on iOS, you won't find it.

147
00:09:44.750 --> 00:09:48.810
So you cannot update Safari individually,
you update the OS.

148
00:09:48.810 --> 00:09:54.538
So the whole iOS, so
iOS 16.4 comes with a new Safari version.

149
00:09:54.538 --> 00:09:59.708
And when you update the OS,
you're also updating the engine that

150
00:09:59.708 --> 00:10:04.880
empowers other browsers,
because it's called the WKWebView.

151
00:10:05.890 --> 00:10:06.851
&gt;&gt; So the dot did for

152
00:10:06.851 --> 00:10:11.530
that, like that Chrome that Chrome would
be different from like the Mac's Chrome.

153
00:10:11.530 --> 00:10:13.280
That'd be-
&gt;&gt; Yeah, it's completely different.

154
00:10:13.280 --> 00:10:16.359
&gt;&gt; Okay,
&gt;&gt; So it's actually 99% Safari.

155
00:10:16.359 --> 00:10:19.980
So there is still a 1% difference,
but it's 99% Safari.

156
00:10:19.980 --> 00:10:24.715
So in terms of how CSS is being rendered,
in terms of your HTML compatibility,

157
00:10:24.715 --> 00:10:28.040
in terms of performance,
it's Safari, not Chrome.

158
00:10:29.290 --> 00:10:32.566
So in fact,
when Chrome took that decision,

159
00:10:32.566 --> 00:10:37.406
I think it was 12 years ago,
I was at Google I/O in Montain View.

160
00:10:37.406 --> 00:10:41.085
At that event,
when they presented Chrome for iOS, and

161
00:10:41.085 --> 00:10:46.096
it was a big surprise, because at that
moment I remember I wrote an article,

162
00:10:46.096 --> 00:10:48.970
I titled that article pseudo browsers.

163
00:10:48.970 --> 00:10:53.169
So this is the new era of pseudo browsers,
because it's not really a browser.

164
00:10:53.169 --> 00:10:55.526
I mean, from a user's point of view,
it's a browser,

165
00:10:55.526 --> 00:10:56.990
it's an app that browses the Web.

166
00:10:56.990 --> 00:11:02.337
But from a developer's point of view,
it's not a different browser,

167
00:11:02.337 --> 00:11:05.378
it's just a skin over Safari, kind of.

168
00:11:05.378 --> 00:11:07.138
In fact, letme prove that.

169
00:11:07.138 --> 00:11:12.870
If we search for Chrome for iOS user-agent,
do you know what the user-agent is?

170
00:11:12.870 --> 00:11:19.276
It's how the browser identifies itself to
the server, when you make an HTTP request,

171
00:11:19.276 --> 00:11:25.480
that's how on your server and Node.js,
you know which browser is accessing.

172
00:11:25.480 --> 00:11:30.040
So this is a user-agent in Chrome for
iOS, okay, this one.

173
00:11:30.040 --> 00:11:36.536
So when you look at the string you
won't see the Chrome keyword, okay?

174
00:11:36.536 --> 00:11:40.960
It says, well,
there is a history of why there is Gecko.

175
00:11:40.960 --> 00:11:45.650
There are several things here, but
you won't find that the term Chrome.

176
00:11:47.200 --> 00:11:47.890
Why?

177
00:11:47.890 --> 00:11:50.926
Because Chrome on iOS didn't want us, or

178
00:11:50.926 --> 00:11:55.960
backend developers to get
the wrong idea that that's Chrome.

179
00:11:55.960 --> 00:12:00.840
In fact, it says CriOS, that seems
to be crying or something like that.

180
00:12:00.840 --> 00:12:04.053
It's CriOS, that is, Chromium for
iOS or something like that, but

181
00:12:04.053 --> 00:12:05.560
it doesn't say Chrome.

182
00:12:05.560 --> 00:12:12.565
On Android or on desktop, the user-agent
actually uses the string Chrome, okay?

183
00:12:12.565 --> 00:12:16.983
The same happens on Firefox,
the same happens on Edge,

184
00:12:16.983 --> 00:12:20.464
because it happens on
every browser on iOS.

185
00:12:20.464 --> 00:12:24.399
The only exception to that
is proxy-based browsers,

186
00:12:24.399 --> 00:12:30.980
also known as cloud-based browsers, that
are not pretty common in the US or Europe.

187
00:12:30.980 --> 00:12:35.754
There are more common, there are more
users in Africa, in Southeast Asia,

188
00:12:35.754 --> 00:12:37.853
some Latin American countries.

189
00:12:37.853 --> 00:12:44.330
For example, Opera Mini, that still
has like 1% of the market share.

190
00:12:44.330 --> 00:12:48.890
So basically Opera Mini, when you
browse the Web, you're not actually

191
00:12:48.890 --> 00:12:53.896
downloading the files, the HTML, the CSS,
and the Javascript on your phone,

192
00:12:53.896 --> 00:12:58.380
there is a cloud server that is
rendering that website in the cloud, and

193
00:12:58.380 --> 00:13:04.050
when you are receiving on your phone, it's
a compressed version already pre-render.

194
00:13:04.050 --> 00:13:07.110
And because of that,
Opera Mini is not using Safari.

195
00:13:07.110 --> 00:13:11.373
It's using a browser that runs on a
server, and because it runs on the server,

196
00:13:11.373 --> 00:13:16.390
Apple says, okay, it's fine to me
because it's not running on the device.

197
00:13:16.390 --> 00:13:18.060
Okay, that's the only exception.

198
00:13:18.060 --> 00:13:23.395
But this is just a warning to have in mind
that when we are saying this works on

199
00:13:23.395 --> 00:13:28.406
Chrome, that's not the case on Chrome and
iOS at least today, okay?

200
00:13:28.406 --> 00:13:33.238
It's safari, actually.

