WEBVTT

1
00:00:00.550 --> 00:00:05.127
Regarding PWAs,
this is one of the last, I think,

2
00:00:05.127 --> 00:00:10.131
APIs of our list of 36 APIs
that we are covering today,

3
00:00:10.131 --> 00:00:12.800
Get Installed Related Apps.

4
00:00:13.920 --> 00:00:19.096
So with this API,
you can know if an app is installed or

5
00:00:19.096 --> 00:00:24.520
not a native app, for
that you will need the package ID.

6
00:00:25.650 --> 00:00:29.599
A native app typically has
an app package ID that

7
00:00:29.599 --> 00:00:35.250
defines the primary key of
that app within the app store.

8
00:00:35.250 --> 00:00:39.987
So if you have the primary key and you do
something, I will explain in a minute what

9
00:00:39.987 --> 00:00:43.070
that is, you can know if
the app is installed or not.

10
00:00:44.420 --> 00:00:47.480
And that also works with PWAs.

11
00:00:47.480 --> 00:00:50.995
So for example, on the Google Play Store,

12
00:00:50.995 --> 00:00:55.498
you can say that you want that app,
com.myapp.pwa.

13
00:00:55.498 --> 00:00:59.272
If that's the ID, you're expressing that.

14
00:00:59.272 --> 00:01:04.710
How does Google know that
you're the owner of that app?

15
00:01:04.710 --> 00:01:07.290
Because that API is targeting
the owner of the app.

16
00:01:08.940 --> 00:01:13.990
You need to make a handshake between
the native app and your website.

17
00:01:13.990 --> 00:01:19.020
I'm not sure if you have ever played with
a .well known folder in your website.

18
00:01:19.020 --> 00:01:24.950
It's currently a standard, .well-known.

19
00:01:24.950 --> 00:01:31.030
In that folder, you can put JSON files and
for different situations.

20
00:01:31.030 --> 00:01:35.854
And in this case if you follow
all the manual that you have to

21
00:01:35.854 --> 00:01:40.678
actually use this API,
you will get how to take some kind of

22
00:01:40.678 --> 00:01:44.321
assign file from the app
into your website,

23
00:01:44.321 --> 00:01:49.950
because the browser needs to know
that you are the owner of that app.

24
00:01:51.630 --> 00:01:52.690
Forget about that.

25
00:01:52.690 --> 00:01:56.841
The idea is that if you do that,
then from JavaScript,

26
00:01:56.841 --> 00:02:00.284
you can detect if the app is installed or
not.

27
00:02:00.284 --> 00:02:02.965
And probably you're thinking,
why do I wanna know that?

28
00:02:02.965 --> 00:02:06.286
Well, maybe because you wanna
offer a button saying, hey,

29
00:02:06.286 --> 00:02:09.710
do you wanna continue in the app or
in the PWA?

30
00:02:09.710 --> 00:02:15.350
And if not, you may wanna provide
an installation invitation.

31
00:02:15.350 --> 00:02:16.790
But if you start writing stuff,

32
00:02:16.790 --> 00:02:20.640
you don't wanna invite the user to install
the app because it's already installed.

33
00:02:22.170 --> 00:02:23.110
Okay, makes sense?

34
00:02:23.110 --> 00:02:28.294
It's a very niche situation, but
when you have a native app or

35
00:02:28.294 --> 00:02:33.776
a PWA, and you wanna prefer that
over the website in the browser,

36
00:02:33.776 --> 00:02:38.980
then you need to use this API,
getInstalledRelatedApps.

37
00:02:38.980 --> 00:02:41.300
This API is not available in iOS.

38
00:02:41.300 --> 00:02:45.400
On iOS, we have something
known as a Smart App Banner.

39
00:02:45.400 --> 00:02:50.566
It's a meta tag that you can add also
with your package ID that probably,

40
00:02:50.566 --> 00:02:55.646
for those of you that are iPhone users,
you have seen this little banner

41
00:02:55.646 --> 00:03:00.662
at the top of Safari that says that
the current website has also an app.

42
00:03:00.662 --> 00:03:06.055
And you can open the app or you can even
install the app if you don't have it.

43
00:03:06.055 --> 00:03:12.210
You can also use the second version
of that one that has an argument.

44
00:03:12.210 --> 00:03:13.950
And this is for deep linking.

45
00:03:13.950 --> 00:03:16.738
So instead of opening
the app in the homescreen,

46
00:03:16.738 --> 00:03:19.870
I can open the app directly
in one particular element.

47
00:03:19.870 --> 00:03:24.993
For example,
if I'm on an Instagram Real, on Safari,

48
00:03:24.993 --> 00:03:30.334
in the browser,
then I can open the Instagram native app,

49
00:03:30.334 --> 00:03:34.705
and it should open the same
reel in a native app.

50
00:03:34.705 --> 00:03:41.010
And for that instant wrap in the HTML
has to have that app argument.

51
00:03:42.080 --> 00:03:45.930
And lately, you can also use these for
an app clip.

52
00:03:45.930 --> 00:03:49.440
There, I'm not sure if it was a success,
actually.

53
00:03:49.440 --> 00:03:54.982
An app clip is that kind of small
app that you don't need to install,

54
00:03:54.982 --> 00:03:59.970
you can use it directly
without installation on iOS.

55
00:03:59.970 --> 00:04:05.453
I don't think the idea worked, but anyway,

56
00:04:05.453 --> 00:04:10.659
you can connect your app clip with Safari.

57
00:04:10.659 --> 00:04:12.150
Badging, app badging.

58
00:04:12.150 --> 00:04:14.960
This is really cool, and really simple.

59
00:04:16.000 --> 00:04:17.610
What is badging?

60
00:04:17.610 --> 00:04:22.150
It will let us alert the user that there
is new content or pending task in our app.

61
00:04:22.150 --> 00:04:24.790
This is for installed PWAs only.

62
00:04:27.190 --> 00:04:31.414
On Android, worked with Chrome and
Edge, on Windows, also Chrome and Edge,

63
00:04:31.414 --> 00:04:33.160
the same on macOS.

64
00:04:33.160 --> 00:04:37.630
And now it also works
recently from iOS 16.4.

65
00:04:37.630 --> 00:04:41.447
On iOS and iPadOS,
only when installed PWAs.

66
00:04:41.447 --> 00:04:47.961
With one asterisk, you can change
the badge only after a push notification.

67
00:04:47.961 --> 00:04:51.900
And then, well, at this point,
you might be thinking, what's a badge?

68
00:04:51.900 --> 00:04:55.720
Well, it's a number that
you see in the icon.

69
00:04:55.720 --> 00:04:57.000
These are the badge.

70
00:04:57.000 --> 00:05:01.700
For example, the badges on iOS is
this 15 number that you have there.

71
00:05:01.700 --> 00:05:04.445
This is on Windows, on MacOS.

72
00:05:04.445 --> 00:05:06.692
On Android, there are some versions,

73
00:05:06.692 --> 00:05:11.140
some launchers that also have the number
such as the Samsung launcher.

74
00:05:11.140 --> 00:05:15.958
But by default, Android only
includes a dot, not a real number,

75
00:05:15.958 --> 00:05:19.020
to express that is something new.

76
00:05:19.020 --> 00:05:23.250
So with this API then,
you can do this with your PWA as well.

77
00:05:23.250 --> 00:05:27.287
So you can put a number on the icon, so

78
00:05:27.287 --> 00:05:31.859
it actually really act like a native app.

79
00:05:31.859 --> 00:05:39.195
The API is pretty simple, you just say
navigator.setAppBadge with a number or

80
00:05:39.195 --> 00:05:43.260
clearAppBadge to remove it, that's all.

81
00:05:43.260 --> 00:05:46.697
And showing the number is not guaranteed,
for example,

82
00:05:46.697 --> 00:05:48.780
in Android maybe it's just a dot.

83
00:05:50.420 --> 00:05:53.076
Typically, if you set that at zero,
it's clear it.

84
00:05:53.076 --> 00:05:56.778
And that platforms are typically
using the best effort scenario.

85
00:05:56.778 --> 00:05:59.770
So you don't know if it would work or
not, you try.

86
00:06:02.730 --> 00:06:07.330
We already said that an Android
is a notification dot in cell.

87
00:06:07.330 --> 00:06:09.336
And also if you have a very large number,

88
00:06:09.336 --> 00:06:12.180
typically you will see
something like 99 plus, okay?

89
00:06:15.780 --> 00:06:18.520
So that's app badging.

90
00:06:18.520 --> 00:06:24.230
Something around that, because it came
in the same moment, it's App Shortcuts.

91
00:06:25.580 --> 00:06:29.680
App Shortcuts is only for installed
PWAs as well, and it's desktop and

92
00:06:29.680 --> 00:06:30.580
Android only.

93
00:06:31.690 --> 00:06:38.860
The idea is to create menu items that will
appear on icons launcher contextual menu.

94
00:06:38.860 --> 00:06:42.414
When you right-click, or
when you long press on Android, an icon,

95
00:06:42.414 --> 00:06:43.470
you'll see a menu.

96
00:06:45.050 --> 00:06:49.740
Each menu item will open a new navigation
in the PWA but to a different URL.

97
00:06:51.130 --> 00:06:55.588
And menu items are statically per app,
so you can define three, four, five, and

98
00:06:55.588 --> 00:06:57.669
you cannot change them dynamically.

99
00:06:59.810 --> 00:07:03.578
So you need to change the PWA actually,
to change them.

100
00:07:03.578 --> 00:07:04.537
What they are?

101
00:07:04.537 --> 00:07:05.037
This.

102
00:07:06.040 --> 00:07:08.230
On the left you see Android.

103
00:07:08.230 --> 00:07:09.890
On the right you see MacOS.

104
00:07:09.890 --> 00:07:14.290
So you right-click on the icon, and
then you can have option A, B and C.

105
00:07:14.290 --> 00:07:18.858
And each option can trigger your PWA but
loading in a different URL and

106
00:07:18.858 --> 00:07:21.478
then using routing or different HTML.

107
00:07:21.478 --> 00:07:26.527
So if it's a multi page application,
you will render different content.

108
00:07:27.821 --> 00:07:29.637
Make sense, does it make sense?

109
00:07:31.538 --> 00:07:33.122
This is how it looks like,

110
00:07:33.122 --> 00:07:37.456
it's another entry in that web app
manifest that we mentioned before.

111
00:07:37.456 --> 00:07:40.704
It's another thing that we have to
integrate with the operating system.

