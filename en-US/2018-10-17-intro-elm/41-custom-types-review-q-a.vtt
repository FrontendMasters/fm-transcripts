WEBVTT

1
00:00:00.000 --> 00:00:03.331
&gt;&gt; Richard Feldman: So to recap,
we started by looking at case-expressions.

2
00:00:03.331 --> 00:00:06.879
So we've got case msg of, and
then we've got the different branches,

3
00:00:06.879 --> 00:00:09.081
each of which is matching
against that msg.

4
00:00:09.081 --> 00:00:12.630
We've got one use of custom type
is numerations, such as Bool.

5
00:00:12.630 --> 00:00:15.420
So we just have two variants there,
true and false.

6
00:00:15.420 --> 00:00:19.390
Another use case for custom types
is containers where we have not

7
00:00:19.390 --> 00:00:24.243
just an enumeration but rather we've got
variance that in some cases hold on to

8
00:00:24.243 --> 00:00:28.972
additional data in addition to just
specifying what the variant itself is.

9
00:00:28.972 --> 00:00:31.100
So start to clickedPage by message.

10
00:00:31.100 --> 00:00:35.530
Click to tab and
any combination of those that we wanna do.

11
00:00:35.530 --> 00:00:37.447
And finally we saw variant functions,

12
00:00:37.447 --> 00:00:40.593
which is to say how we actually
instantiate one of these things.

13
00:00:40.593 --> 00:00:44.908
So case expressions are how we unwrap
them, functions are how we create them.

14
00:00:44.908 --> 00:00:46.257
So you say, clicked page,

15
00:00:46.257 --> 00:00:49.308
you call that even though its got
a capital letter as a function

16
00:00:49.308 --> 00:00:53.373
passing the argument that it's going to
end up being held inside the custom type.

17
00:00:53.373 --> 00:00:58.004
&gt;&gt; Speaker 2: Returning the list in the
context of custom types, can you mix list

18
00:00:58.004 --> 00:01:02.470
item types if you annotate them
with a custom type that has int and

19
00:01:02.470 --> 00:01:03.806
string variance?

20
00:01:03.806 --> 00:01:05.813
So like-
&gt;&gt; Richard Feldman: Yes.

21
00:01:05.813 --> 00:01:06.851
&gt;&gt; Speaker 2: Okay.

22
00:01:06.851 --> 00:01:08.353
&gt;&gt; Richard Feldman: This
is a fantastic insight.

23
00:01:08.353 --> 00:01:10.245
Yes, absolutely, you can.

24
00:01:10.245 --> 00:01:14.819
So the question was, can you get
a list that actually holds onto

25
00:01:14.819 --> 00:01:18.116
mixed types if you wrap
them in a custom type.

26
00:01:18.116 --> 00:01:21.399
Absolutely, that is how you do it,
in fact.

27
00:01:21.399 --> 00:01:23.712
So let's say I wanted to have a list,

28
00:01:23.712 --> 00:01:26.935
which contains possibly
a mix of strings and ints.

29
00:01:26.935 --> 00:01:30.773
I can make a custom type called string or
int, which has two variants.

30
00:01:30.773 --> 00:01:35.583
One called it's a string, which holds onto
a string, and other called, it's an int,

31
00:01:35.583 --> 00:01:36.948
which holds onto an int.

32
00:01:36.948 --> 00:01:38.733
If I have a list of those,

33
00:01:38.733 --> 00:01:44.358
none of the problems that we saw earlier
with iteration happened in that case.

34
00:01:44.358 --> 00:01:47.291
Because if I'm writing a function,
let's say I call list.map on that.

35
00:01:47.291 --> 00:01:50.695
I'm saying, yeah,
I need to handle each of these elements.

36
00:01:50.695 --> 00:01:53.360
Well, it's no problem if they're
wrapped in a custom type,

37
00:01:53.360 --> 00:01:56.504
because the custom type is going to
force me to handle each possibility.

38
00:01:56.504 --> 00:02:00.493
It's going to say, yeah, you've enumerated
exactly which possibilities happen here.

39
00:02:00.493 --> 00:02:03.868
Either it's a string or it's int, and
the case expression is gonna say, okay,

40
00:02:03.868 --> 00:02:05.818
well now handle both of
those possibilities.

41
00:02:05.818 --> 00:02:07.741
You have to handle
the caseload as a string and

42
00:02:07.741 --> 00:02:09.672
also we have handle
the case where was an int.

43
00:02:09.672 --> 00:02:13.448
So probably saw a JavaScript was that,
that's step is not there.

44
00:02:13.448 --> 00:02:16.612
There's no guarantee that you'll
handling all the possibilities.

45
00:02:16.612 --> 00:02:19.614
We saw the case where you pass it
to the pseudo name was a string but

46
00:02:19.614 --> 00:02:22.743
on one case is was an int that cause
a problem or runtime exception.

47
00:02:22.743 --> 00:02:26.790
But an can't happen if you wrap it in
a custom type because you have to write

48
00:02:26.790 --> 00:02:30.723
the case expression that has to handle
all of the different possible variants,

49
00:02:30.723 --> 00:02:34.852
which means you will definitely have logic
that says, if it's a string, do this.

50
00:02:34.852 --> 00:02:36.183
If it's an int, do this.

51
00:02:36.183 --> 00:02:38.953
So none of those downsides exist
if you do it that way, and

52
00:02:38.953 --> 00:02:41.454
that's exactly what you'd
do if you wanted that.

53
00:02:41.454 --> 00:02:43.702
Great question, yeah.

54
00:02:43.702 --> 00:02:48.273
&gt;&gt; Speaker 2: Going back to your exercise,
why doesn't the type

55
00:02:48.273 --> 00:02:52.927
alias article collide
with the import article?

56
00:02:52.927 --> 00:02:55.343
&gt;&gt; Richard Feldman: Why doesn't
the type alias article, so

57
00:02:55.343 --> 00:02:57.269
this is the part four exercise?

58
00:02:57.269 --> 00:02:58.097
&gt;&gt; Speaker 2: Yeah.

59
00:02:58.097 --> 00:03:02.180
&gt;&gt; Richard Feldman: Why doesn't the type
alias article conflict with the import

60
00:03:02.180 --> 00:03:02.906
article?

61
00:03:02.906 --> 00:03:07.188
Short answer there is that
article is the name of a module.

62
00:03:07.188 --> 00:03:12.252
Inside that module, there are various
values and potentially, various types.

63
00:03:12.252 --> 00:03:17.285
I guess I could just jump back to it
real quick and trust that our excellent

64
00:03:17.285 --> 00:03:22.000
video editors will figure out how
to make this look coherent [LAUGH].

65
00:03:22.000 --> 00:03:24.153
So, we imported article.

66
00:03:24.153 --> 00:03:28.183
When I see this, that means I now
have this article module in scope

67
00:03:28.183 --> 00:03:31.190
which means I can now say
article dot whatever and

68
00:03:31.190 --> 00:03:35.897
that's going to refer to something
that exists inside the article module.

69
00:03:35.897 --> 00:03:37.722
If I open up article.elem,

70
00:03:37.722 --> 00:03:41.986
we can see that they're actually
is no type in here named article.

71
00:03:41.986 --> 00:03:45.445
Maybe if I wanted to I could
say type alias article equals.

72
00:03:45.445 --> 00:03:51.030
And like to find that in here and I could
expose that as something that is exposes.

73
00:03:51.030 --> 00:03:54.694
And then I could say import article,
exposing article and

74
00:03:54.694 --> 00:03:57.322
then I could potentially get a conflict.

75
00:03:57.322 --> 00:04:01.194
But, just from importing the module,
that's no problem.

76
00:04:01.194 --> 00:04:04.152
Importing the module just basically
gives me a new name space to work with.

77
00:04:04.152 --> 00:04:07.048
It doesn't actually change
what's in scope yet.

78
00:04:07.048 --> 00:04:08.446
Exposing does that.

79
00:04:08.446 --> 00:04:10.143
Exposing brings more stuff into scope.

80
00:04:10.143 --> 00:04:13.608
But just importing the article
itself doesn't do that.

