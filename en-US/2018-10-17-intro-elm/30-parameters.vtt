WEBVTT

1
00:00:00.000 --> 00:00:01.328
&gt;&gt; Richard Feldman: We
can also have a list.

2
00:00:01.328 --> 00:00:04.301
Notice, by the way,
that this does not say names is a list,

3
00:00:04.301 --> 00:00:05.922
it's more specific than that.

4
00:00:05.922 --> 00:00:07.975
It says that names is a list of strings,

5
00:00:07.975 --> 00:00:10.479
that's how you can read
this type annotation.

6
00:00:10.479 --> 00:00:14.862
There is the list, then there is a space,
or some white space,

7
00:00:14.862 --> 00:00:20.415
followed by the thing that is the type of
its element, the elements in the list.

8
00:00:20.415 --> 00:00:23.850
So as we talked about earlier, lists
in Elm have to have a consistent type,

9
00:00:23.850 --> 00:00:25.606
every element has to be the same type.

10
00:00:25.606 --> 00:00:27.123
And that's captured in
the type annotation.

11
00:00:27.123 --> 00:00:30.678
We say, this is not just a list,
this is a list of strings.

12
00:00:30.678 --> 00:00:35.372
That's not optional, you have to say
here is what kind of list it is.

13
00:00:35.372 --> 00:00:39.594
That makes List what's known
as a parameterized type.

14
00:00:39.594 --> 00:00:42.713
So it's a parameterized type because
saying List by itself is not enough.

15
00:00:42.713 --> 00:00:45.627
You have to give it some
extra piece of information,

16
00:00:45.627 --> 00:00:47.757
which is known as the type parameter.

17
00:00:47.757 --> 00:00:50.489
So in this case,
String is the type parameter that

18
00:00:50.489 --> 00:00:53.167
corresponds to
the parameterized type of List.

19
00:00:55.383 --> 00:00:59.800
&gt;&gt; Richard Feldman: And the way that we
would read this out loud is this is a list

20
00:00:59.800 --> 00:01:00.824
of strings.

21
00:01:00.824 --> 00:01:03.918
You can also have a list of bools,
that's totally valid.

22
00:01:03.918 --> 00:01:06.702
Or a list of floats, also totally valid.

23
00:01:06.702 --> 00:01:10.351
But just like when I have to add
an accurate annotation to any of my

24
00:01:10.351 --> 00:01:13.057
primitives that are not
parameterized types,

25
00:01:13.057 --> 00:01:17.518
I also have to be accurate with not just
the parameterized type in general, but

26
00:01:17.518 --> 00:01:20.048
also its type parameter
has to be accurate.

27
00:01:20.048 --> 00:01:22.487
So if I change this from
List Float to List Int.

28
00:01:22.487 --> 00:01:25.338
But it's still actually
holding onto floats,

29
00:01:25.338 --> 00:01:29.912
that is to say numbers that have a decimal
point in them and are not integers.

30
00:01:29.912 --> 00:01:31.804
I will get a compile error,
this will not compile.

31
00:01:31.804 --> 00:01:33.812
It'll say, nope,
that's an inaccurate annotation.

32
00:01:33.812 --> 00:01:37.834
I know that these is a list of floats,
you cannot call that a list of ints.

33
00:01:37.834 --> 00:01:40.834
It won't accept that.

