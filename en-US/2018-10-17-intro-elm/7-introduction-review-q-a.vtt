WEBVTT

1
00:00:00.000 --> 00:00:02.760
&gt;&gt; Richard Feldman: Any questions
before we get to the exercise?

2
00:00:02.760 --> 00:00:08.473
&gt;&gt; Student 1: Elm.Main.embed
versus Elm.Main.init?

3
00:00:08.473 --> 00:00:13.928
&gt;&gt; Richard Feldman: So back in Elm 0.18,
there was an Elm.Main.embed.

4
00:00:13.928 --> 00:00:16.836
In 0.19, that changed too.

5
00:00:16.836 --> 00:00:22.142
We always say .init and
init can take different arguments.

6
00:00:22.142 --> 00:00:27.371
So I guess the answer is
that it's always in it now,

7
00:00:27.371 --> 00:00:33.831
but previously there used to be
different variations on that.

8
00:00:33.831 --> 00:00:35.805
&gt;&gt; Student 1: Regarding Elm packages,

9
00:00:35.805 --> 00:00:40.570
I've seen some reference to
star.dat files on Evan's disk.

10
00:00:40.570 --> 00:00:46.084
Is there any relationship with IPVFS or
the DAT protocol?

11
00:00:46.084 --> 00:00:49.715
&gt;&gt; Richard Feldman: No,
.dat is essentially just a file extension

12
00:00:49.715 --> 00:00:52.541
indicating that it's binary data.

13
00:00:52.541 --> 00:00:55.650
So those are all just
cached files that live in,

14
00:00:55.650 --> 00:00:58.769
you never actually
interact with .dat files.

15
00:00:58.769 --> 00:01:00.571
It's just like when the compiler runs,

16
00:01:00.571 --> 00:01:03.009
it caches some information
in a temporary directory so

17
00:01:03.009 --> 00:01:06.348
that the next time it runs it doesn't
have to recompute that from scratch.

18
00:01:06.348 --> 00:01:11.161
And because it's more compact to store it
as binary data than like JSON, it stores

19
00:01:11.161 --> 00:01:15.296
them as binary data and it chooses
to use the extension .dat for that.

20
00:01:15.296 --> 00:01:15.964
That's all.

21
00:01:17.927 --> 00:01:20.766
&gt;&gt; Richard Feldman: So you won't
actually ever necessarily interact with

22
00:01:20.766 --> 00:01:24.169
dot dot files unless you're writing
some tooling for Elm maybe.

23
00:01:24.169 --> 00:01:27.498
What is the learning curve for
Elm when your training new employees?

24
00:01:27.498 --> 00:01:29.203
So I would say.

25
00:01:29.203 --> 00:01:30.636
[CROSSTALK]
&gt;&gt; Student 1: Or just said learning curve

26
00:01:30.636 --> 00:01:31.647
in general for Elm.

27
00:01:31.647 --> 00:01:33.337
&gt;&gt; Richard Feldman: Yeah,
well hopefully we'll get an idea of that

28
00:01:33.337 --> 00:01:34.272
over the course of today.

29
00:01:34.272 --> 00:01:39.382
[LAUGH] But so what I would say is that
usually people can get productive to

30
00:01:39.382 --> 00:01:44.594
the point of just through pair
programming and sort of picking stuff up.

31
00:01:44.594 --> 00:01:49.247
They can get to the point of being able to
write Elm code unsupervised in their first

32
00:01:49.247 --> 00:01:52.282
week if you're pairing it and
sort of investing and,

33
00:01:52.282 --> 00:01:54.790
like, actually teaching them some stuff.

34
00:01:54.790 --> 00:01:57.909
And not just saying,
okay, go read the docs.

35
00:01:57.909 --> 00:01:59.321
You're on your own.

36
00:01:59.321 --> 00:02:02.109
I found pair programming
is really effective for

37
00:02:02.109 --> 00:02:03.949
helping people get up to speed.

38
00:02:03.949 --> 00:02:07.792
But I would say that they're going to have
a lot of questions at first, of course.

39
00:02:07.792 --> 00:02:11.624
So if they're modifying existing code,
like doing a bug fix,

40
00:02:11.624 --> 00:02:15.837
that can be potentially pretty easy
depending on what the bug fix is.

41
00:02:15.837 --> 00:02:18.305
If it's just some business logic.

42
00:02:18.305 --> 00:02:22.450
But I would say that it takes longer
to of course achieve mastery.

43
00:02:22.450 --> 00:02:24.991
And to sort of build your
own things from scratch,

44
00:02:24.991 --> 00:02:28.269
build new features from scratch
to understand how to do things.

45
00:02:28.269 --> 00:02:29.802
The compiler helps a lot.

46
00:02:29.802 --> 00:02:34.654
That's a recurring theme is that it's
a lot harder to do the wrong thing and

47
00:02:34.654 --> 00:02:37.426
end up with the wrong
output because most of

48
00:02:37.426 --> 00:02:41.836
the beginner mistakes you can make
will get caught by the compiler.

49
00:02:41.836 --> 00:02:46.171
So I don't know if I can put a number on
and say the learning curve of Elm is this,

50
00:02:46.171 --> 00:02:49.742
but hopefully that gives an idea
of sort of the considerations.

51
00:02:49.742 --> 00:02:55.459
&gt;&gt; Student 1: [INAUDIBLE]
&gt;&gt; Richard Feldman: All right, yeah.

52
00:02:55.459 --> 00:03:00.035
&gt;&gt; Student 2: I don't think I've seen
anything, but is there anything for

53
00:03:00.035 --> 00:03:05.228
source maps or any kind of like
community thought around source maps?

54
00:03:05.228 --> 00:03:05.760
&gt;&gt; Richard Feldman: Yeah, so

55
00:03:05.760 --> 00:03:09.756
I always forget about source maps
because like we don't get real text.

56
00:03:09.756 --> 00:03:15.500
[LAUGH] So the two things that
source maps would be useful for.

57
00:03:15.500 --> 00:03:19.042
One is like browser profiling,
like flame graphs and stuff.

58
00:03:19.042 --> 00:03:24.030
Like having those actually mapped to
the the original Elm functions rather

59
00:03:24.030 --> 00:03:25.782
than the generated ones.

60
00:03:25.782 --> 00:03:26.754
It's kind of nice to have.

61
00:03:26.754 --> 00:03:28.435
It doesn't really exist yet

62
00:03:28.435 --> 00:03:32.086
because it just hasn't really
been a high priority project.

63
00:03:32.086 --> 00:03:35.646
And the other is, what is it?

64
00:03:35.646 --> 00:03:38.683
If you want to do step
debugging in the browser, like,

65
00:03:38.683 --> 00:03:41.927
if you want to say pause execution and
then step step step.

66
00:03:41.927 --> 00:03:45.538
Right now you do that on the generator
JavaScript, but if you had source maps,

67
00:03:45.538 --> 00:03:48.507
you could theoretically do it
using the actual source out code.

68
00:03:48.507 --> 00:03:51.707
So both of those are kind
of narrow use cases.

69
00:03:51.707 --> 00:03:56.384
So they haven't really been a priority,
but in principle there's no reason they

70
00:03:56.384 --> 00:04:00.537
couldn't exist except just that
other stuff's been higher priority.

71
00:04:00.537 --> 00:04:03.523
Yeah?
&gt;&gt; Student 1: So what is the process for

72
00:04:03.523 --> 00:04:07.088
changing the language itself.

73
00:04:07.088 --> 00:04:10.644
And is it like community driven or
is it like this Evan guy in

74
00:04:10.644 --> 00:04:13.465
a cave somewhere meditating-
&gt;&gt; Richard Feldman: [LAUGH]

75
00:04:13.465 --> 00:04:15.281
&gt;&gt; Student 1: And comes up with the next

76
00:04:15.281 --> 00:04:16.063
feature.

77
00:04:16.063 --> 00:04:19.001
&gt;&gt; Richard Feldman: Yeah, so
Elm definitely has the BDFL,

78
00:04:19.001 --> 00:04:22.127
the Benevolent Dictator for Life model.

79
00:04:22.127 --> 00:04:25.291
I think,
that was Python's term originally.

80
00:04:25.291 --> 00:04:28.559
Although I guess now Guido retired,
[LAUGH] so

81
00:04:28.559 --> 00:04:30.968
they now have a different model.

82
00:04:30.968 --> 00:04:33.938
But, yeah, so Elm actually works.

83
00:04:33.938 --> 00:04:37.638
Sorry, Evan works on Elm at No Red Ink.

84
00:04:37.638 --> 00:04:39.800
We hired him in 2016.

85
00:04:39.800 --> 00:04:43.080
So it's not in the cave,
it's in an office in Boston.

86
00:04:43.080 --> 00:04:48.072
[LAUGH] But basically we just
pay him to build the language.

87
00:04:48.072 --> 00:04:52.326
And so we've made a very direct
financial investment in Open-source.

88
00:04:52.326 --> 00:04:56.691
Cuz we wanted to give back and for
variety of reasons, but basically, yeah,

89
00:04:56.691 --> 00:04:59.461
he's sort of like
the ultimate decision maker.

90
00:04:59.461 --> 00:05:01.702
There is a core team of people
who work on different things.

91
00:05:01.702 --> 00:05:04.219
Obviously there is lots of
community input into the decisions,

92
00:05:04.219 --> 00:05:07.026
but at the end of the day, it's not like,
there's no voting process.

93
00:05:07.026 --> 00:05:11.954
So there's no committee for
change requests and stuff like that.

94
00:05:11.954 --> 00:05:15.181
It's very like, Evan makes the decisions
like at the end of the day.

