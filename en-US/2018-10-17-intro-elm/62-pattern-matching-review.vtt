WEBVTT

1
00:00:00.000 --> 00:00:03.447
&gt;&gt; Richard Feldman: One last thing
to note is that when we have this

2
00:00:03.447 --> 00:00:08.181
CompletedLoadFeed variant and
it's holding onto results.

3
00:00:08.181 --> 00:00:13.619
Since result is also custom type,
we can actually write what is known

4
00:00:13.619 --> 00:00:18.700
as pattern match that will handle
both of these at the same time.

5
00:00:18.700 --> 00:00:21.717
What I mean by that is instead
of saying CompletedLoadFeed and

6
00:00:21.717 --> 00:00:25.255
then saying results right over here and
then doing a case on that result,

7
00:00:25.255 --> 00:00:27.939
we can actually specify both
of these at the same time.

8
00:00:27.939 --> 00:00:29.553
And this is typically how it's done.

9
00:00:29.553 --> 00:00:33.836
So this is a if I got
a CompletedLoadFeed message, and

10
00:00:33.836 --> 00:00:38.131
the result inside was an Ok,
here's what I wanna do.

11
00:00:38.131 --> 00:00:41.323
And then, also,
if I got a CompletedLoadFeed message,

12
00:00:41.323 --> 00:00:45.061
or I got an error for this result,
then I wanna do this other thing.

13
00:00:45.061 --> 00:00:49.112
So this is a short hand for
writing out CompletedLoadFeed result, and

14
00:00:49.112 --> 00:00:52.486
then case result of, and
doing a nested case expression.

15
00:00:52.486 --> 00:00:56.826
This let's us, instead of nesting it,
just enumerate the two different possible

16
00:00:56.826 --> 00:00:59.680
paths that could go with
that nested case expression.

17
00:00:59.680 --> 00:01:02.724
And just say, okay, I wanna handle this
one, and I wanna handle this one, and

18
00:01:02.724 --> 00:01:04.074
doing those both at the top level.

19
00:01:04.074 --> 00:01:06.634
Typically, this is how people
do it with HTTP requests.

20
00:01:06.634 --> 00:01:10.236
So they are all handled right
in the same case expression.

21
00:01:10.236 --> 00:01:12.639
That's known as pattern matching.

22
00:01:12.639 --> 00:01:14.980
That brings us to
the conclusion of part 8.

23
00:01:14.980 --> 00:01:18.980
So first we learned about Tuples
which are essentially short hands for

24
00:01:18.980 --> 00:01:22.725
records where fields are access
by position rather than by name.

25
00:01:22.725 --> 00:01:25.864
We saw how did you randomness in Elm,
with Random.generate and

26
00:01:25.864 --> 00:01:27.678
how that works through our command.

27
00:01:27.678 --> 00:01:30.638
Because Elm has this
function guarantees of all

28
00:01:30.638 --> 00:01:35.310
functions that are given the same
arguments must return to the same value.

29
00:01:35.310 --> 00:01:40.291
We saw that commands are a description of
some effect to be run by the Elm run time.

30
00:01:40.291 --> 00:01:42.708
They don't actually run anything
when you instantiate them,

31
00:01:42.708 --> 00:01:45.317
you can make a thousand of them and
that will do absolutely nothing.

32
00:01:45.317 --> 00:01:49.527
It's only when update returns one of them
that the run time will take that value and

33
00:01:49.527 --> 00:01:50.698
actually execute it.

34
00:01:50.698 --> 00:01:54.382
And finally,
we learned how to do HTTP using tuples and

35
00:01:54.382 --> 00:01:59.908
commands by converting some description of
what we want the HTTP request to be into

36
00:01:59.908 --> 00:02:05.194
a command by using Http.send and passing
it what to do in the case of success and

37
00:02:05.194 --> 00:02:07.466
what to do in the case of failure.

38
00:02:07.466 --> 00:02:10.638
Which generally means,
wrapping up that result that

39
00:02:10.638 --> 00:02:14.807
specifies either it succeeded or
it failed inside a message variant.

