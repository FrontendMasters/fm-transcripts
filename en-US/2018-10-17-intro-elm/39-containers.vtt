WEBVTT

1
00:00:00.000 --> 00:00:03.103
&gt;&gt; Richard Feldman: Now let's look
at this TagFeed, and think about,

2
00:00:03.103 --> 00:00:07.952
how are we gonna actually represent
the particular tag that you have selected?

3
00:00:07.952 --> 00:00:12.799
Well, right now the way that we're doing
that is we have a tab which is going to

4
00:00:12.799 --> 00:00:14.002
now be of type Tab.

5
00:00:14.002 --> 00:00:17.238
And then we have, you may recall
from our previous exercises,

6
00:00:17.238 --> 00:00:19.020
this string called selectedTag.

7
00:00:19.020 --> 00:00:22.819
And when you click on one of the tags, we
made it so that selectedTag gets updated

8
00:00:22.819 --> 00:00:26.237
to be whatever that particular string
is of the tag that you clicked on.

9
00:00:26.237 --> 00:00:28.459
But if you think about it,

10
00:00:28.459 --> 00:00:34.115
selectedTag only makes sense if
you've actually selected a tag.

11
00:00:34.115 --> 00:00:37.865
If I click on one of these,
the new behavior's going to be,

12
00:00:37.865 --> 00:00:41.091
we want to switch to a tag feed and
set selected tag.

13
00:00:41.091 --> 00:00:44.694
But if I switch to global feed or
your feed, we wanna deselect the tag.

14
00:00:44.694 --> 00:00:47.596
We no longer want to
have any selected tag.

15
00:00:47.596 --> 00:00:50.106
So what are we gonna do with this value?

16
00:00:50.106 --> 00:00:53.599
Well it's still there on the model,
so we could clear it out,

17
00:00:53.599 --> 00:00:57.991
we could make it be empty string if you
don't have a particular tag selected.

18
00:00:57.991 --> 00:01:01.865
Or we could just have it be there and
just stale and just try to ignore it.

19
00:01:01.865 --> 00:01:05.374
But it'd be nice if it were
sort of only there in context.

20
00:01:05.374 --> 00:01:10.050
In other words, it were only possible to
have a selected tag when we're actually

21
00:01:10.050 --> 00:01:11.371
showing the tag feed.

22
00:01:11.371 --> 00:01:15.166
Because those two are linked, it would
be nice to link them in our data model.

23
00:01:16.492 --> 00:01:18.221
&gt;&gt; Richard Feldman: So
how can we link them?

24
00:01:18.221 --> 00:01:19.672
Well, like this.

25
00:01:19.672 --> 00:01:24.055
We can actually add a parameter
to TagFeed that says TagFeed not

26
00:01:24.055 --> 00:01:28.283
only specifies that we're on
that particular type of feed.

27
00:01:28.283 --> 00:01:31.293
But also, there's some
additional information in there.

28
00:01:31.293 --> 00:01:34.194
There's a string that
goes along with that.

29
00:01:34.194 --> 00:01:35.906
So if we do it this way,

30
00:01:35.906 --> 00:01:41.965
then TagFeed goes from being a value of
type tab to a function that returns a tag.

31
00:01:41.965 --> 00:01:45.458
So if we were in Elm REPL,
we would call that function like this.

32
00:01:45.458 --> 00:01:49.243
We would call TagFeed, this is now
a function with a capital letter at

33
00:01:49.243 --> 00:01:51.804
the beginning, first time we've seen that.

34
00:01:51.804 --> 00:01:54.968
Call TagFeed,
passing the string "happiness", and

35
00:01:54.968 --> 00:01:58.804
now it will give us back one of these
TagFeeds that's got that string

36
00:01:58.804 --> 00:02:01.996
of "happiness" inside of it,
and that is of type Tab.

37
00:02:01.996 --> 00:02:06.658
If we were to just pass TagFeed
directly into Elm REPL, it would say,

38
00:02:06.658 --> 00:02:11.415
what you've got there is a function
which takes a String and returns a Tab.

39
00:02:11.415 --> 00:02:16.250
In contrast, if we put your feed in there,
it's gonna say that's a Tab global feed,

40
00:02:16.250 --> 00:02:19.534
that's a tTab, TagFeed that's a function.

41
00:02:19.534 --> 00:02:21.910
&gt;&gt; Richard Feldman: Okay, so
here's how those sort of relate.

42
00:02:21.910 --> 00:02:25.158
If I say yours, that is of type Tab,
that's YourFeed.

43
00:02:25.158 --> 00:02:27.813
Happiness is a Tab, to get one of those,

44
00:02:27.813 --> 00:02:32.514
if I want to get a Tab value I have to
get call TagFeed passing happiness.

45
00:02:32.514 --> 00:02:37.280
Okay, so once I've done that I've obtained
this TagFeed that has this string

46
00:02:37.280 --> 00:02:40.467
stored inside of it,
here's how we get it back out.

47
00:02:40.467 --> 00:02:45.876
Same case expression as before, but now
we've added something to the TagFeed case.

48
00:02:45.876 --> 00:02:48.428
We're saying TagFeed space and

49
00:02:48.428 --> 00:02:52.691
then a lower case letter
variable name selectedTag.

50
00:02:52.691 --> 00:02:57.565
I happened to decide to name
it selectedTag right now.

51
00:02:57.565 --> 00:03:00.020
This works a lot like function arguments.

52
00:03:00.020 --> 00:03:04.772
Except sort of in reverse, where we're
saying, I have a value that holds onto

53
00:03:04.772 --> 00:03:08.302
this thing, I wanna extract that value and
give it a name.

54
00:03:08.302 --> 00:03:10.946
Pull out that string and say, from now on,

55
00:03:10.946 --> 00:03:15.503
inside the scope of this branch of
the case expression, we now have a thing

56
00:03:15.503 --> 00:03:19.793
called selectedTag and it is that string,
we can now work with that.

57
00:03:19.793 --> 00:03:23.206
So based on this,
we can say in the case of YourFeed,

58
00:03:23.206 --> 00:03:27.255
we don't have that selectedTag string,
it doesn't exist.

59
00:03:27.255 --> 00:03:31.280
GlobalFeed, same thing, does not exist,
can't possibly access it.

60
00:03:31.280 --> 00:03:35.749
We only have that selectedTag
accessible if we're on the TagFeed.

61
00:03:35.749 --> 00:03:39.250
In which case, we have it and we name it.

62
00:03:39.250 --> 00:03:42.460
This is why there's a distinction
between capitalized and

63
00:03:42.460 --> 00:03:44.135
uncapitalized things in Elm.

64
00:03:44.135 --> 00:03:49.306
IF we had TagTeed and then a capital
S SelectedTag, what we'd be saying

65
00:03:49.306 --> 00:03:55.183
is I have a tag feed which contains some
custom type variant called SelectedTag.

66
00:03:55.183 --> 00:03:57.123
Lower case means it's a variable.

67
00:03:57.123 --> 00:04:00.731
I am giving this a new name, and
just like all other variables, function,

68
00:04:00.731 --> 00:04:03.208
arguments, etc,
that all have lowercase names.

69
00:04:03.208 --> 00:04:06.800
I am saying, yeah, I am not saying
that this is a particular value,

70
00:04:06.800 --> 00:04:10.202
I am saying I do not know what that
value is but give it this name and

71
00:04:10.202 --> 00:04:11.917
I am gonna do something with it.

72
00:04:11.917 --> 00:04:15.130
So we have essentially gone from
having Tab be an enumeration,

73
00:04:15.130 --> 00:04:17.810
which is what it was before,
now it's a container.

74
00:04:17.810 --> 00:04:22.014
It's a container that situationally
holds additional information,

75
00:04:22.014 --> 00:04:24.471
only in the case that we're on a TagFeed.

76
00:04:24.471 --> 00:04:28.545
But as you can imagine, we can do a lot
more custom stuff than even this.

77
00:04:28.545 --> 00:04:32.188
We could give TagFeed multiple
values that it's storing.

78
00:04:32.188 --> 00:04:34.264
We could have TagFeed store a record.

79
00:04:34.264 --> 00:04:38.002
We could have GlobalFeed store a record or
a list of records.

80
00:04:38.002 --> 00:04:42.991
Any combination of things that we want,
any of these can specify as much or

81
00:04:42.991 --> 00:04:45.816
as a little data as they
want to hold on to.

82
00:04:45.816 --> 00:04:51.116
We can sort of make custom shapes for
our data to fit our use case perfectly,

83
00:04:51.116 --> 00:04:56.587
and to do things like linking up this
relationship between the selectedTag,

84
00:04:56.587 --> 00:04:59.975
and which tab we're on
at the data model level.

85
00:04:59.975 --> 00:05:04.958
Cool, so Evan the creator of Elm wrote
that he considers custom types to

86
00:05:04.958 --> 00:05:07.628
be the most important feature in Elm.

87
00:05:07.628 --> 00:05:10.192
And as we'll see in the advanced workshop,

88
00:05:10.192 --> 00:05:13.657
there's a pretty deep rabbit
hole of like implications and

89
00:05:13.657 --> 00:05:17.693
really cool stuff you can do with
just the stuff that we just learned.

90
00:05:17.693 --> 00:05:21.869
We're not gonna dive into that rabbit hole
today, because this is the intro course.

91
00:05:21.869 --> 00:05:23.661
But it's worth knowing I think,

92
00:05:23.661 --> 00:05:27.437
that there's quite a lot of cool stuff
that you can do with this that's

93
00:05:27.437 --> 00:05:30.897
not necessarily obvious given
how simply we're using it here.

