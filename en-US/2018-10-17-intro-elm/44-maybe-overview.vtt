WEBVTT

1
00:00:00.002 --> 00:00:04.844
&gt;&gt; Richard Feldman: Talk about list.head,
maybe.

2
00:00:04.844 --> 00:00:09.365
Type Variables and Pipelines.

3
00:00:09.365 --> 00:00:11.913
Okay, so let's start with
a little bit of JavaScript code.

4
00:00:11.913 --> 00:00:14.770
Let's say I got a function
here called first, and

5
00:00:14.770 --> 00:00:18.554
it's going to take a list of users and
return the first user.

6
00:00:18.554 --> 00:00:20.880
So users[0],
that's how this is done in JavaScript.

7
00:00:22.350 --> 00:00:25.130
So if I call first on
an array that has Sam and

8
00:00:25.130 --> 00:00:27.970
Jess in it, it's going to return Sam.

9
00:00:27.970 --> 00:00:34.030
If I call first passing an empty array,
it's going to return undefined.

10
00:00:34.030 --> 00:00:40.776
That's what happens in JavaScript when
you do [0] on an array that is empty.

11
00:00:40.776 --> 00:00:42.157
So what about in Elm?

12
00:00:42.157 --> 00:00:43.604
Elm doesn't have a concept of undefined,
so

13
00:00:43.604 --> 00:00:45.660
clearly it's going to have
to do something else.

14
00:00:45.660 --> 00:00:47.540
So here I'm defining the same function.

15
00:00:47.540 --> 00:00:50.660
First users =, and
I'm saying List.head users.

16
00:00:50.660 --> 00:00:54.140
So in Elm, List.head means gives
me the first element in the list.

17
00:00:55.650 --> 00:00:58.310
I can call first passing Sam and Jess.

18
00:00:58.310 --> 00:01:00.651
Now this is gonna give me back
something slightly different.

19
00:01:00.651 --> 00:01:02.620
It's not giving me back Sam
like it did with JavaScript.

20
00:01:02.620 --> 00:01:06.161
It's giving me back just Sam.

21
00:01:06.161 --> 00:01:10.730
And if I call first on empty list,
it's giving me back nothing.

22
00:01:10.730 --> 00:01:11.880
So what's going on here?

23
00:01:11.880 --> 00:01:13.610
What's the deal with this just and
nothing?

24
00:01:15.220 --> 00:01:20.047
Well, those are basically
part of a unit type call,

25
00:01:20.047 --> 00:01:23.016
sorry a custom type call maybe.

26
00:01:23.016 --> 00:01:26.771
So it's kind of like compare the
implications of using these two different

27
00:01:26.771 --> 00:01:27.491
approaches.

28
00:01:27.491 --> 00:01:30.327
So here we saw two different outcomes.

29
00:01:30.327 --> 00:01:32.869
Calling it with an array
that was not empty,

30
00:01:32.869 --> 00:01:35.834
that had Sam as the first element,
got us back Sam.

31
00:01:35.834 --> 00:01:38.060
Calling it with empty array
got us back undefined.

32
00:01:38.060 --> 00:01:42.771
On the Elm side,
we got back just and nothing.

33
00:01:42.771 --> 00:01:45.551
So if I were to call first our new users,

34
00:01:45.551 --> 00:01:48.935
it's new users being either Sam or
undefined.

35
00:01:48.935 --> 00:01:51.143
And I call .length on that,

36
00:01:51.143 --> 00:01:56.830
It'll give me back two if I
successfully got back something valid.

37
00:01:56.830 --> 00:02:00.410
Or I might give back, hey cannot
read property length of undefined.

38
00:02:00.410 --> 00:02:04.545
Like I said, that should be a three,
Sam has three letters in it.

39
00:02:04.545 --> 00:02:07.650
In contrast, the Elm version I
have just "Sam" and Nothing.

40
00:02:08.650 --> 00:02:12.210
Because this is not a string, this is
actually a wrapper around a string,

41
00:02:12.210 --> 00:02:16.510
this is a custom type
wrapper around a string.

42
00:02:17.610 --> 00:02:21.270
I have to do a case expression on it
before I can actually do anything

43
00:02:21.270 --> 00:02:22.840
with that string.

44
00:02:22.840 --> 00:02:27.230
So I can say case first newUsers of and
if I got a Just,

45
00:02:27.230 --> 00:02:30.730
then I unwrap the string in there and
give it a name, I'll call it user.

46
00:02:30.730 --> 00:02:34.630
And now I can call String.length on that,
that'll work.

47
00:02:34.630 --> 00:02:36.990
If I got Nothing,
I have to do something else,

48
00:02:36.990 --> 00:02:39.660
I don't have the user in scope
to attempt to do anything on.

49
00:02:39.660 --> 00:02:41.049
So, maybe I'll just
default to returning 0.

50
00:02:41.049 --> 00:02:47.768
So the difference here is that if I want
to operate on the results of List.head,

51
00:02:47.768 --> 00:02:52.080
I first have to run this
case expression to deal with

52
00:02:52.080 --> 00:02:56.826
the two variants inside this
custom type know as maybe.

53
00:02:56.826 --> 00:02:59.890
If I got adjust,
then I can actually work on it.

54
00:02:59.890 --> 00:03:01.183
If I got Nothing, I can't work on it.

55
00:03:01.183 --> 00:03:06.146
And so this is the difference,
List.head will give you back just wrapped

56
00:03:06.146 --> 00:03:11.201
around the particular value inside
the list that was there if it found one.

57
00:03:11.201 --> 00:03:13.610
And if the list was empty,
it will give you back nothing.

58
00:03:13.610 --> 00:03:16.370
Which doesn't wrap anything,
because in that circumstance,

59
00:03:16.370 --> 00:03:17.708
there is nothing to give back.

60
00:03:19.679 --> 00:03:22.299
&gt;&gt; Richard Feldman: So
if we call List.head passing Sam and Jess,

61
00:03:22.299 --> 00:03:23.381
we get back to Sam.

62
00:03:23.381 --> 00:03:28.786
List.head of Sam and Jess is being
called on a list of strings and

63
00:03:28.786 --> 00:03:32.550
we get back what's known
as a Maybe String.

64
00:03:32.550 --> 00:03:34.870
So Maybe is a parameterize type and

65
00:03:34.870 --> 00:03:38.450
its type parameter matches
the list that it got.

66
00:03:38.450 --> 00:03:43.460
So if I call List.head on two floats,
that would give me back a Maybe Float.

67
00:03:45.350 --> 00:03:47.960
And of course,
if I call List.head on two Booleans,

68
00:03:47.960 --> 00:03:49.642
it would give me back a Maybe Bool.

