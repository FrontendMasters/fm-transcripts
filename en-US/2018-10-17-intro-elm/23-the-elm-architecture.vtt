WEBVTT

1
00:00:00.560 --> 00:00:03.290
&gt;&gt; Richard Feldman: So going back to
our example app here, our conduit app.

2
00:00:04.350 --> 00:00:09.490
We've got these popular tags on the right
and let's say that we want to build

3
00:00:09.490 --> 00:00:14.760
out something on the left that
actually resembles a real feed.

4
00:00:14.760 --> 00:00:16.810
So let's say that we have some feed data,

5
00:00:16.810 --> 00:00:20.920
maybe some records,
representing these different articles.

6
00:00:20.920 --> 00:00:24.420
Now ultimately, when we get to the real
application we're gonna have more

7
00:00:24.420 --> 00:00:27.760
fancy stuff going on over there
with these articles in the feed.

8
00:00:27.760 --> 00:00:29.100
They're gonna have pictures,

9
00:00:29.100 --> 00:00:32.130
they're gonna have tags listed on there,
they're gonna have links.

10
00:00:32.130 --> 00:00:36.900
But for now we're gonna render this in
a sort of plain static way that just lists

11
00:00:36.900 --> 00:00:40.820
the title of the article, a little bit
about what's going on with it, and

12
00:00:40.820 --> 00:00:43.470
then a read more thing that's not
even a link, it's just some text.

13
00:00:45.000 --> 00:00:46.520
And what we wanna do is
we want to make it so

14
00:00:46.520 --> 00:00:49.890
that when you click on one of these
tags such as Elm, Fun, Programming,

15
00:00:49.890 --> 00:00:54.360
or Dragons cuz, I mean, who doesn't want,
obviously that's gonna be a popular tag.

16
00:00:54.360 --> 00:01:01.200
We wanna filter the feed such that it
only shows articles that have those tags.

17
00:01:01.200 --> 00:01:03.649
And we can do that using all
the concepts that we just learned.

18
00:01:04.950 --> 00:01:10.690
So for example, if this is all of
the things related to the Elm tag,

19
00:01:10.690 --> 00:01:13.240
and then I click on the Programming tag,

20
00:01:13.240 --> 00:01:16.890
then maybe it's gonna come back with just
this one element in the feed because

21
00:01:16.890 --> 00:01:19.530
that's the only that happens
to have that particular tag.

22
00:01:20.770 --> 00:01:23.240
Okay, to do this,
to make this interactive,

23
00:01:23.240 --> 00:01:26.830
we're gonna need to introduce one more
concept which is the Elm architecture.

24
00:01:26.830 --> 00:01:30.150
Because this is how Elm applications
respond to user input and

25
00:01:30.150 --> 00:01:33.270
actually change what's going
on based on that user input.

26
00:01:33.270 --> 00:01:38.750
So there are three fundamental
ideas here update, model, and view.

27
00:01:38.750 --> 00:01:41.380
Wanna go through what each of those do and
how they relate to one another.

28
00:01:42.570 --> 00:01:45.270
Ultimately what we're gonna
build up to is this diagram.

29
00:01:45.270 --> 00:01:48.760
This is a diagram of how the Elm
architecture sort of fits together.

30
00:01:48.760 --> 00:01:53.260
We have model, view, and update sending
some HTML from view to the Elm run time,

31
00:01:53.260 --> 00:01:56.010
and then Elm run time is
sending messages to update.

32
00:01:56.010 --> 00:01:57.440
So let's learn about these.

33
00:01:57.440 --> 00:01:59.620
We're gonna start with view.

34
00:01:59.620 --> 00:02:03.600
So view is a function that
takes a model as an argument.

35
00:02:03.600 --> 00:02:07.320
So the model refers in this case to
the entire application state, like really

36
00:02:07.320 --> 00:02:12.390
the entire state of the whole application
is this one argument that comes into view.

37
00:02:12.390 --> 00:02:15.880
And view uses that to
return some HTML that says

38
00:02:15.880 --> 00:02:20.070
this is how I want the page to
look given this application state.

39
00:02:20.070 --> 00:02:23.540
So literally, when you call this function
saying here's the whole application state,

40
00:02:23.540 --> 00:02:26.950
that's all the stuff you have to
work with in the entire universe,

41
00:02:26.950 --> 00:02:28.520
tell me how the page ought to look.

42
00:02:28.520 --> 00:02:32.517
And it's gonna return these virtual DOM
values which then Elm is gonna take care

43
00:02:32.517 --> 00:02:33.840
of putting on the screen.

44
00:02:35.200 --> 00:02:38.035
So model is the application state really,

45
00:02:38.035 --> 00:02:43.155
really the entire application state and
that's going to get passed to view,

46
00:02:43.155 --> 00:02:47.661
which then returns some HTML
describing how the page ought to look.

47
00:02:47.661 --> 00:02:49.410
Where does view return this to?

48
00:02:49.410 --> 00:02:53.040
Well, this is going to get called
by the Elm Runtime itself.

49
00:02:53.040 --> 00:02:56.490
So every time you compile your
Elm application using Elm mic,

50
00:02:56.490 --> 00:03:00.930
part of what gets compiled into
the Elm.js file is the runtime.

51
00:03:00.930 --> 00:03:03.170
And the runtime takes
care of stuff like this,

52
00:03:03.170 --> 00:03:05.810
like interaction,
like wiring behind the scenes.

53
00:03:05.810 --> 00:03:10.380
And translating these concepts into actual
JavaScript code that's going to execute

54
00:03:10.380 --> 00:03:10.960
them in the browser.

55
00:03:12.210 --> 00:03:16.410
So we're gonna define our view function,
but we're not actually going to run it and

56
00:03:16.410 --> 00:03:19.730
cause it to mutate the screen,
the runtime is gonna take care of it.

57
00:03:19.730 --> 00:03:23.064
All we do is we say,
hey Elm runtime this is my view function.

58
00:03:23.064 --> 00:03:27.222
We're gonna sort of configure it to say,
here's what I mean by a view function.

59
00:03:27.222 --> 00:03:30.610
And the runtime is going to actually
pass the model in to that, and then,

60
00:03:30.610 --> 00:03:33.330
take the result and
it's also going to take care of

61
00:03:33.330 --> 00:03:36.360
making the page look as
requested by the view function.

62
00:03:36.360 --> 00:03:39.820
Whatever you put in this virtual DOM,
the runtime is gonna take care of making

63
00:03:39.820 --> 00:03:43.010
the real DOM on the actual
page look that way.

64
00:03:43.010 --> 00:03:44.670
Which is to say, like this.

