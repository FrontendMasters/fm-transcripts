WEBVTT

1
00:00:00.000 --> 00:00:00.961
&gt;&gt; Richard Feldman: So we want to list.

2
00:00:00.961 --> 00:00:02.788
So we've seen this a little bit,

3
00:00:02.788 --> 00:00:06.325
these lists literals when we were
doing our virtual dome stuff.

4
00:00:06.325 --> 00:00:07.423
This is a list in Elm.

5
00:00:07.423 --> 00:00:09.416
So, a list is different from an array.

6
00:00:09.416 --> 00:00:12.228
It has a similar syntax
to JavaScript arrays.

7
00:00:12.228 --> 00:00:15.195
But under the hood it's actually
an immutable linked list.

8
00:00:15.195 --> 00:00:17.603
It's not literally a JavaScript array.

9
00:00:17.603 --> 00:00:18.690
So that means it is.

10
00:00:18.690 --> 00:00:21.475
Different performance characteristics.

11
00:00:21.475 --> 00:00:25.327
So that's a list, this is a list of lists,
we can nest the lists of we want,

12
00:00:25.327 --> 00:00:26.564
that's totally fine.

13
00:00:26.564 --> 00:00:31.177
This is not a valid Elm list though,
although syntactically it works.

14
00:00:31.177 --> 00:00:35.868
It will not compile, and the reason is
that, it has inconsistent contents.

15
00:00:35.868 --> 00:00:39.073
So this right here is a list of numbers.

16
00:00:39.073 --> 00:00:42.538
This right here is a list
of list of strings.

17
00:00:42.538 --> 00:00:44.823
Its first element is a list of strings.

18
00:00:44.823 --> 00:00:46.164
And the second one is a list of strings.

19
00:00:46.164 --> 00:00:48.641
And both of those go into
a list of a list of strings.

20
00:00:48.641 --> 00:00:50.874
This one has mixed contents.

21
00:00:50.874 --> 00:00:54.641
It has a string and a number,
coexisting in the same list, and

22
00:00:54.641 --> 00:00:56.386
that's not allowed in Elm.

23
00:00:56.386 --> 00:00:57.397
So this is what I compile.

24
00:00:57.397 --> 00:01:01.821
If we try to write that code, put it into
a put it anywhere, it will not compile.

25
00:01:01.821 --> 00:01:07.105
So to see why Elm enforces that,
let's consider some JavaScript code.

26
00:01:07.105 --> 00:01:10.210
So JavaScript, of course,
allows you to mix contents and arrays,

27
00:01:10.210 --> 00:01:12.124
you can put anything you want in an array.

28
00:01:12.124 --> 00:01:15.496
Let's say we had an array of
the strings pow, zap and blam.

29
00:01:15.496 --> 00:01:20.052
And we were mapping over them, so if you
were not familiar with JavaScript map,

30
00:01:20.052 --> 00:01:24.070
basically the way that it works,
is you call it as a method on an array.

31
00:01:24.070 --> 00:01:25.435
You pass it a function,

32
00:01:25.435 --> 00:01:29.068
and it's gonna run that function
on each element of the array.

33
00:01:29.068 --> 00:01:33.959
When it's done doing that, it's gonna take
all of the return values of each of those,

34
00:01:33.959 --> 00:01:36.175
and its gonna give you back a new array.

35
00:01:36.175 --> 00:01:41.861
That has all of those return values,
as the contents of the new array.

36
00:01:41.861 --> 00:01:44.713
So, this where it essentially
transform pow, zap and

37
00:01:44.713 --> 00:01:46.450
blam into an uppercase version.

38
00:01:46.450 --> 00:01:49.234
That's also had an exclamation
point added to the end.

39
00:01:49.234 --> 00:01:50.408
So it's gonna make them more exciting.

40
00:01:50.408 --> 00:01:53.004
So we have lowercase pow,
zap, blam turning into,

41
00:01:53.004 --> 00:01:56.200
this is the array that they will return,
POW!, ZAP!, BLAM!

42
00:01:56.200 --> 00:01:58.745
Much more energetic.

43
00:01:58.745 --> 00:02:01.950
Okay, so it works.

44
00:02:01.950 --> 00:02:03.941
What happens if we put a number in there?

45
00:02:03.941 --> 00:02:06.050
This is totally valid Java script.

46
00:02:06.050 --> 00:02:10.351
We're allowed to put a number in
a list of strings in Java script.

47
00:02:10.351 --> 00:02:12.058
What's gonna happen?

48
00:02:12.058 --> 00:02:14.343
Well for the first three, it's gonna
work exactly the same as before.

49
00:02:14.343 --> 00:02:17.490
But when it gets to the last one,
it's gonna call str.toUpperCase and

50
00:02:17.490 --> 00:02:19.226
we're gonna get a runtime exception.

51
00:02:19.226 --> 00:02:22.773
str.toUpperCase is not a function.

52
00:02:22.773 --> 00:02:25.364
So, fundamentally,
the problem here is that,

53
00:02:25.364 --> 00:02:28.852
toUpperCase is a method that exists for
these, but not for this.

54
00:02:28.852 --> 00:02:30.502
And this is a general problem.

55
00:02:30.502 --> 00:02:32.719
Anytime you have mixed contents
in an array, in lists,

56
00:02:32.719 --> 00:02:35.137
in any kind of collection that
you're able to iterate over.

57
00:02:35.137 --> 00:02:39.817
Potentially, you have the problem that the
code that you wrote, to operate on each of

58
00:02:39.817 --> 00:02:44.306
those elements, is gonna work for some
of the elements, but not other elements.

59
00:02:45.769 --> 00:02:48.495
&gt;&gt; Richard Feldman: So the purpose of
enforcing this guarantee that these all

60
00:02:48.495 --> 00:02:52.144
have to have the same contents, is so
that whenever you iterate over a list.

61
00:02:52.144 --> 00:02:53.916
It's not possible to run
into this situation.

62
00:02:53.916 --> 00:02:55.220
You know ahead of time,

63
00:02:55.220 --> 00:02:59.720
that every operation you're going to do on
each of those elements is gonna work for

64
00:02:59.720 --> 00:03:03.390
every single operation in there,
because they're all the same.

65
00:03:03.390 --> 00:03:08.267
Okay, so this is the fundamental
problem,and the Elm solution to

66
00:03:08.267 --> 00:03:11.935
this is to require consistent entries and
lists.

