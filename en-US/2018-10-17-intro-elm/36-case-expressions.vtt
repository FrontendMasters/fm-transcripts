WEBVTT

1
00:00:00.671 --> 00:00:03.600
&gt;&gt; Richard Feldman: Custom types,
all right.

2
00:00:03.600 --> 00:00:06.681
So we're gonna talk about a few
things here, case expressions,

3
00:00:06.681 --> 00:00:09.034
enumerations, which is
one use of custom types,

4
00:00:09.034 --> 00:00:12.188
containers, which is another more
exciting use of custom types.

5
00:00:12.188 --> 00:00:15.022
And finally we're gonna talk
about variant functions.

6
00:00:15.022 --> 00:00:18.387
Okay, so, we're gonna start
adding some features to our feed.

7
00:00:18.387 --> 00:00:21.498
We've been sort of building up this
feed as we've been going along.

8
00:00:21.498 --> 00:00:24.633
We've added some interactivity.

9
00:00:24.633 --> 00:00:27.293
We've added the banner and the tags.

10
00:00:27.293 --> 00:00:31.373
And now, we're gonna actually add some new
stuff on top of what we've already built.

11
00:00:31.373 --> 00:00:34.001
So specifically, we're gonna add
pagination to the end of the feed.

12
00:00:34.001 --> 00:00:38.704
So at the bottom of the feed,
we're gonna have this big long list of all

13
00:00:38.704 --> 00:00:44.047
the different pages of results in the feed
and make it so you can click a different

14
00:00:44.047 --> 00:00:49.187
page in order to go to that page of
articles and we're going to add some Tabs.

15
00:00:49.187 --> 00:00:51.000
So previously we had this popular tags.

16
00:00:51.000 --> 00:00:53.459
When you clicked it,
the tag itself turned green.

17
00:00:53.459 --> 00:00:56.733
But now we're gonna have
multiple different Tabs.

18
00:00:56.733 --> 00:01:00.471
So one is Your Feed which is to say all
the articles that you've favorited.

19
00:01:00.471 --> 00:01:03.281
Another is Global Feed,
which is all the articles.

20
00:01:03.281 --> 00:01:06.122
Completely unfiltered,
just every article out there.

21
00:01:06.122 --> 00:01:11.269
And then, the third tab is optional and
it's only when you've clicked on a tag.

22
00:01:11.269 --> 00:01:14.528
When you click on one of the tags,
it sort of shows this third tab,

23
00:01:14.528 --> 00:01:17.332
which is based on the particular
tag that you selected.

24
00:01:17.332 --> 00:01:21.826
And then, that's gonna work the same way
as what we did in the last two exercises.

25
00:01:21.826 --> 00:01:24.938
Okay, so we're gonna run in to
some challenges along the way as

26
00:01:24.938 --> 00:01:27.475
we implement these and
we're going to solve them.

27
00:01:27.475 --> 00:01:34.499
So, first thing that we're gonna run into
is, how should we represent this tab bar?

28
00:01:34.499 --> 00:01:36.592
So one way we could do
this is we could say okay,

29
00:01:36.592 --> 00:01:39.882
well I'm gonna have a new field and
model called tab, which is a string.

30
00:01:39.882 --> 00:01:44.648
And it just says yeah, this is
the particular tab that I'm on right now.

31
00:01:44.648 --> 00:01:48.845
Maybe it's on YourFeed, maybe it's on
GlobalFeed, maybe it's on a TagFeed.

32
00:01:48.845 --> 00:01:50.595
Okay, that's the way we could do that and

33
00:01:50.595 --> 00:01:53.255
then inside the view we could say
I'm gonna have a three way if.

34
00:01:53.255 --> 00:01:59.398
So I'm gonna have if model.tab == your
feed then I'm going to have your feed.

35
00:01:59.398 --> 00:02:01.408
Else if it's GlobalFeed then
I'm going to have GlobalFeed.

36
00:02:01.408 --> 00:02:05.164
Otherwise, through process of
elimination it must be the Tag feed.

37
00:02:05.164 --> 00:02:07.590
So when can just show that there.

38
00:02:07.590 --> 00:02:11.462
By the way, you might notice
that we're using else if here.

39
00:02:11.462 --> 00:02:16.141
There is no actual separate
syntactic thing for else if in elm.

40
00:02:16.141 --> 00:02:20.213
This just works by virtue of how if and
else already work.

41
00:02:20.213 --> 00:02:22.825
Basically, if this is true,
we're gonna run this,

42
00:02:22.825 --> 00:02:26.307
else if this is true we're gonna run this,
else we're gonna run this,

43
00:02:26.307 --> 00:02:29.581
this is basically just two if
expressions just stapled together.

44
00:02:29.581 --> 00:02:34.615
There's no separate syntactic construct
for else if, it's not special.

45
00:02:34.615 --> 00:02:39.134
Okay, another way we could do this,
is we could refactor it to be like this.

46
00:02:39.134 --> 00:02:46.120
case model.tab of, then we say
YourFeed -&gt;, GlobalFeed -&gt; and _ -&gt;.

47
00:02:46.120 --> 00:02:47.702
These are equivalent.

48
00:02:47.702 --> 00:02:49.755
So this is a case expression in elm and

49
00:02:49.755 --> 00:02:52.281
the way that it works is
you give it a subject.

50
00:02:52.281 --> 00:02:56.094
And then it's gonna compare that
subject in a couple of different ways.

51
00:02:56.094 --> 00:02:57.727
And if the subject matches.

52
00:02:57.727 --> 00:03:02.437
So in this case, if this string is exactly
equal to this, it's run the first branch.

53
00:03:02.437 --> 00:03:06.163
Otherwise, if it matches this second one
then it's gonna run the second brand and

54
00:03:06.163 --> 00:03:08.441
otherwise the underscore
is the default branch.

55
00:03:08.441 --> 00:03:11.596
And then it's gonna say okay,
we didn't run any of the others so

56
00:03:11.596 --> 00:03:12.948
we're gonna run this one.

57
00:03:12.948 --> 00:03:16.692
Just like with the if expressions you
have to be exhaustive here, you have to

58
00:03:16.692 --> 00:03:21.037
enumerate all the possibilities and if you
can't enumerate all of them exhaustively.

59
00:03:21.037 --> 00:03:25.378
Which is to say there are still other
strings out there in the world then you

60
00:03:25.378 --> 00:03:28.391
need some sort of underscore for
a default branch,

61
00:03:28.391 --> 00:03:30.861
just like you need else
at the end of an if.

62
00:03:30.861 --> 00:03:32.591
So these two though are basically
doing the same thing.

63
00:03:32.591 --> 00:03:35.790
It's just two different ways
to write the same thing.

64
00:03:35.790 --> 00:03:38.411
Questions about case expressions.

65
00:03:38.411 --> 00:03:40.431
Yeah.
&gt;&gt; Speaker 2: Are there restrictions on

66
00:03:40.431 --> 00:03:46.255
what types you can have that match as far
as what you're looking for on of case.

67
00:03:46.255 --> 00:03:48.657
&gt;&gt; Richard Feldman: Got you.
Are there restrictions on what types you

68
00:03:48.657 --> 00:03:49.702
can be looking for?

69
00:03:49.702 --> 00:03:54.306
Yeah, there are.
So you can do this with basically strings,

70
00:03:54.306 --> 00:03:56.717
some of the primitives.

71
00:03:56.717 --> 00:04:01.476
Strings, numbers, booleans,
custom types which

72
00:04:01.476 --> 00:04:06.244
we'll get into shortly,
and records a little bit.

73
00:04:06.244 --> 00:04:08.276
And you can't do a function.

74
00:04:08.276 --> 00:04:12.899
So there's no way to say like case, I
don't know, list dot filter of and then I

75
00:04:12.899 --> 00:04:17.688
don't even know what that will look like,
but you can't do [LAUGH] walking file.

76
00:04:17.688 --> 00:04:20.435
Serious, there are a few that you can do.

77
00:04:20.435 --> 00:04:25.037
One other quick note on this is, that this
is the other case of Elm where indentation

78
00:04:25.037 --> 00:04:27.554
matters, so the first was let expressions.

79
00:04:27.554 --> 00:04:31.615
Every declaration in a let expression
had to be the same indentation level.

80
00:04:31.615 --> 00:04:32.297
Same deal here.

81
00:04:32.297 --> 00:04:33.642
Every one of these cases,

82
00:04:33.642 --> 00:04:37.135
every one of these patterns has to
have the same indentation level.

83
00:04:37.135 --> 00:04:41.381
Those are the only two places in
Elm where indentation matters.

