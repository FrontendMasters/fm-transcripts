WEBVTT

1
00:00:00.000 --> 00:00:04.104
&gt;&gt; Richard Feldman: Now, another function
guarantee that we have in Elm besides same

2
00:00:04.104 --> 00:00:07.175
arguments, same results,
is no side effects.

3
00:00:07.175 --> 00:00:11.150
Which is to say,
whenever you run an Elm function,

4
00:00:11.150 --> 00:00:14.952
it's not allowed to modify
any external state.

5
00:00:14.952 --> 00:00:18.991
It can't, all it can do is return a value,
that's it.

6
00:00:18.991 --> 00:00:20.470
And that's all it can do.

7
00:00:20.470 --> 00:00:23.781
So an example that would
sort of violate this rule

8
00:00:23.781 --> 00:00:28.396
while satisfying the first rule
is a fire-and-forget HTTP POST.

9
00:00:28.396 --> 00:00:33.378
So let's say I run a function in
JavaScript that says, you know what?

10
00:00:33.378 --> 00:00:36.935
If you give me the same arguments,
I'm always going to do the same HTTP post.

11
00:00:36.935 --> 00:00:38.568
But I'm still gonna fire it off.

12
00:00:38.568 --> 00:00:40.040
I'm gonna send it off to the server and

13
00:00:40.040 --> 00:00:43.317
that's gonna modify the external state
that's on the server, like the database.

14
00:00:43.317 --> 00:00:47.275
Something's gonna change, but hey,
the function, same argument, same result.

15
00:00:47.275 --> 00:00:50.142
It just sort of sneakily did this
other thing at the same time.

16
00:00:50.142 --> 00:00:51.369
So in Elm, that's not allowed.

17
00:00:51.369 --> 00:00:56.094
You cannot do side effects
inside Elm functions.

18
00:00:56.094 --> 00:01:00.386
So even though this satisfies the first
function guarantee of same arguments,

19
00:01:00.386 --> 00:01:03.086
same result,
it does not satisfy the second one.

20
00:01:03.086 --> 00:01:06.260
And all Elm functions
have to satisfy both.

21
00:01:06.260 --> 00:01:11.324
Okay, so instead of doing side effects,
Elm does what's known as managed effects.

22
00:01:11.324 --> 00:01:15.080
Which is to say that any side effects
have to be done through commands.

23
00:01:15.080 --> 00:01:18.825
All you can do in any Elm function
that you write, is you can say, yeah,

24
00:01:18.825 --> 00:01:22.448
I want to give you back a description
of commands that I want to run, or

25
00:01:22.448 --> 00:01:24.595
side effects that I want to have happen.

26
00:01:24.595 --> 00:01:27.413
But the run time is going to perform them.

27
00:01:27.413 --> 00:01:31.395
Which means that any Elm function you
call, is going to be a pure function,

28
00:01:31.395 --> 00:01:32.163
guaranteed.

29
00:01:32.163 --> 00:01:33.223
The entire language,

30
00:01:33.223 --> 00:01:36.694
everything we've been doing the entire
day has been all pure functions.

31
00:01:36.694 --> 00:01:39.776
And that's going to continue throughout
the rest of the workshop and the entire

32
00:01:39.776 --> 00:01:43.042
advanced workshop, because that's the only
type of functions that Elm supports.

33
00:01:43.042 --> 00:01:47.876
All of these side affecting stuff, all
the stuff where you get different values

34
00:01:47.876 --> 00:01:51.627
depending on context all of that
is isolated to the runtime and

35
00:01:51.627 --> 00:01:55.181
completely separate from stuff
we do as Elm programmers.

