WEBVTT

1
00:00:00.000 --> 00:00:02.087
&gt;&gt; Richard Feldman: So
let's talk about pipelines.

2
00:00:02.087 --> 00:00:04.914
So let's say I have a list of numbers, 2,

3
00:00:04.914 --> 00:00:08.068
4, 6, and
I want to call List.filter on it.

4
00:00:08.068 --> 00:00:12.037
I say List.filter where I'm gonna
give it an anonymous function.

5
00:00:12.037 --> 00:00:13.941
It takes an x, an x is less than 5.

6
00:00:13.941 --> 00:00:18.726
In other words, I only want to keep
these elements if x is less than 5.

7
00:00:18.726 --> 00:00:19.745
I also say, you know what?

8
00:00:19.745 --> 00:00:22.738
Not only do I wanna do
that filtering operation,

9
00:00:22.738 --> 00:00:25.149
I also wanna reverse it when I'm done.

10
00:00:25.149 --> 00:00:29.943
So call List.reverse on the result of
List.filter passing that function and

11
00:00:29.943 --> 00:00:30.677
that list.

12
00:00:30.677 --> 00:00:32.389
So this is one way I can write this.

13
00:00:32.389 --> 00:00:34.950
It's kind of a lot of
parentheses going on there.

14
00:00:34.950 --> 00:00:37.444
This is another way I could write this.

15
00:00:37.444 --> 00:00:40.782
These two expressions
are completely equivalent.

16
00:00:40.782 --> 00:00:44.771
The difference is that this
second one has been written

17
00:00:44.771 --> 00:00:47.380
in what is known as pipeline style.

18
00:00:47.380 --> 00:00:51.964
So the way that pipeline style works
is you can think of it as similar to

19
00:00:51.964 --> 00:00:52.763
Unix pipe.

20
00:00:52.763 --> 00:00:56.050
So what it's saying is,
start with 2, 4, 6.

21
00:00:56.050 --> 00:00:59.880
And pipe that to List.filter x,
where x is less than 5.

22
00:00:59.880 --> 00:01:03.163
In other words,
take this thing right here and

23
00:01:03.163 --> 00:01:06.538
make it be the last argument
to this next thing.

24
00:01:06.538 --> 00:01:08.063
So List.filter this, and

25
00:01:08.063 --> 00:01:12.056
then this becomes the final argument
that gets added on to the end here.

26
00:01:12.056 --> 00:01:15.210
And then do it again,
take the result of that expression.

27
00:01:15.210 --> 00:01:17.835
And pipe it to List.reverse.

28
00:01:17.835 --> 00:01:21.626
So the output of the previous step
gets used as an additional argument to

29
00:01:21.626 --> 00:01:22.457
the next step.

30
00:01:22.457 --> 00:01:27.014
We could do that again, List.map negate.

31
00:01:27.014 --> 00:01:27.714
In other words,

32
00:01:27.714 --> 00:01:30.922
negate all of the numbers in this list
that we've been building up to so far.

33
00:01:30.922 --> 00:01:31.800
So first do this.

34
00:01:31.800 --> 00:01:35.029
Then filter it,
take that list, reverse it.

35
00:01:35.029 --> 00:01:38.893
Take that list and
map negate over each of its elements.

36
00:01:38.893 --> 00:01:40.983
We can keep going with
this as far as we want.

37
00:01:40.983 --> 00:01:43.003
And take List.head of the results of that.

38
00:01:43.003 --> 00:01:46.793
So grab the first one and
give us back a maybe.

39
00:01:46.793 --> 00:01:49.560
We can do this as many times as we want.

40
00:01:49.560 --> 00:01:53.254
The pipe is actually not
a special language keyword,

41
00:01:53.254 --> 00:01:59.262
it's an operator that works as a function
that works because of partial application.

42
00:01:59.262 --> 00:02:03.668
So essentially it relies on the fact
that List.filter passing this anonymous

43
00:02:03.668 --> 00:02:04.342
function.

44
00:02:04.342 --> 00:02:09.314
This expression right here to the right
of the pipe gives us back a function

45
00:02:09.314 --> 00:02:13.740
that takes a list of numbers, and
then returns a list of numbers.

46
00:02:13.740 --> 00:02:17.755
And then this next and then so
it gives it this listed number so cool.

47
00:02:17.755 --> 00:02:19.544
Now we return a list of numbers,

48
00:02:19.544 --> 00:02:23.192
pass that to List.reverse which
expects a list of whatever is and

49
00:02:23.192 --> 00:02:27.661
returns a list of whatever's, and so
on and so forth throughout the pipeline.

50
00:02:27.661 --> 00:02:31.664
So especially as you get more steps in
a sequence, this can be a nicer way

51
00:02:31.664 --> 00:02:36.027
of writing out something like this,
than doing it with all the parenthesis.

52
00:02:36.027 --> 00:02:38.909
Worth noting though that
also a lot of the time,

53
00:02:38.909 --> 00:02:43.894
an even better solution to this is just
good old fashioned, giving things names.

54
00:02:43.894 --> 00:02:46.118
Like saying, reversed equals and

55
00:02:46.118 --> 00:02:49.645
then maybe taking the first
half of this pipeline, and

56
00:02:49.645 --> 00:02:54.860
then breaking it up into two different
operations where the second one is calling

57
00:02:54.860 --> 00:02:59.787
some functions on reversed which sort
of got us to that stage in the process.

58
00:02:59.787 --> 00:03:04.765
This is something that comes up in
particular with what we're gonna learn in

59
00:03:04.765 --> 00:03:06.800
maybe the section after next.

60
00:03:06.800 --> 00:03:11.333
But for now it's enough to know that this
is just a technique we can use to express

61
00:03:11.333 --> 00:03:12.289
the same thing.

62
00:03:12.289 --> 00:03:17.011
By the way, when I said that this right
here was exactly equivalent to the above,

63
00:03:17.011 --> 00:03:21.666
I really mean that it really is equivalent
as in, the Elm compiler will actually

64
00:03:21.666 --> 00:03:25.779
rewrite this into the equivalent
of calling the functions directly.

65
00:03:25.779 --> 00:03:27.674
So there's no overhead to doing this.

66
00:03:27.674 --> 00:03:32.192
These two expressions will compile to the
exact same JavaScript no matter which way

67
00:03:32.192 --> 00:03:32.975
you write it.

68
00:03:32.975 --> 00:03:36.703
So basically you can safely use whichever
one you think is going to make the code

69
00:03:36.703 --> 00:03:37.391
read better.

70
00:03:37.391 --> 00:03:41.048
Sometimes you want to use a pipeline,
sometimes you don't, but

71
00:03:41.048 --> 00:03:45.238
either way you're not gonna have any
performance pros or cons either way,

72
00:03:45.238 --> 00:03:46.990
it's gonna be the same stuff.

73
00:03:46.990 --> 00:03:48.584
Questions about pipelines.

74
00:03:48.584 --> 00:03:50.355
All right, so to review.

75
00:03:50.355 --> 00:03:54.889
We first talked about List.head, and
how we can call that on a series of,

76
00:03:54.889 --> 00:03:56.217
let's say numbers.

77
00:03:56.217 --> 00:04:00.384
And that'll give us back a maybe that
represents either the first elements in

78
00:04:00.384 --> 00:04:00.970
the list.

79
00:04:00.970 --> 00:04:02.850
Or if there was none, nothing.

80
00:04:02.850 --> 00:04:06.284
We talked about maybe, and
how it has a type variable.

81
00:04:06.284 --> 00:04:08.810
So, type Maybe v = Just v or Nothing.

82
00:04:08.810 --> 00:04:11.568
Talked about how that v could be anything,
could be Val, Ellen,

83
00:04:11.568 --> 00:04:12.732
whatever we wanna call it.

84
00:04:12.732 --> 00:04:15.745
The important part is that it's lower case
indicating that it's a type variable,

85
00:04:15.745 --> 00:04:18.300
and not a concrete type like we've
been dealing with up to this point.

86
00:04:18.300 --> 00:04:20.982
We talked about the general
concept of type variables, and

87
00:04:20.982 --> 00:04:22.599
how they can relate to one another.

88
00:04:22.599 --> 00:04:25.625
So when we say head takes
a list of elements, and

89
00:04:25.625 --> 00:04:27.599
then returns a Maybe element.

90
00:04:27.599 --> 00:04:29.784
That means that whatever
type of list it is,

91
00:04:29.784 --> 00:04:32.219
that's the type of Maybe
we're gonna get back.

92
00:04:32.219 --> 00:04:33.834
And finally, we talked about pipelines and

93
00:04:33.834 --> 00:04:35.982
how you can pipe things to
various different operations.

94
00:04:35.982 --> 00:04:39.478
And it will take the result
of the previous step, and

95
00:04:39.478 --> 00:04:42.904
pass it as an additional
argument to the next step.

