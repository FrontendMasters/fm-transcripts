WEBVTT

1
00:00:00.060 --> 00:00:03.050
&gt;&gt; Richard Feldman: That brings
us to the exercise for part 8.

2
00:00:03.050 --> 00:00:05.260
So same build command as before.

3
00:00:05.260 --> 00:00:08.390
In this case, we have a login not working.

4
00:00:08.390 --> 00:00:09.570
So we need to make login work.

5
00:00:09.570 --> 00:00:13.566
Currently it doesn't actually send
an HTTP request to the server.

6
00:00:13.566 --> 00:00:16.410
Sorry, not login, sign up.

7
00:00:16.410 --> 00:00:21.238
So we're gonna go do page, register and

8
00:00:21.238 --> 00:00:25.360
resolve the to dos in here, okay.

9
00:00:27.030 --> 00:00:32.650
So here we can see a number of ingredients
that we just talked about in the slides.

10
00:00:32.650 --> 00:00:36.480
So one is requests body, sorry,
that's actually new one.

11
00:00:36.480 --> 00:00:41.140
We can see response decoder
which is a Decoder Viewer.

12
00:00:41.140 --> 00:00:44.280
Viewer is the term for the currently
logged in user in this application.

13
00:00:44.280 --> 00:00:45.760
So, things like the current user.

14
00:00:45.760 --> 00:00:50.190
This could have also been CurrentUser, but
the name I chose to go with was Viewer.

15
00:00:50.190 --> 00:00:56.920
So, this is a decoder, the Http.Body
is something that Http.Post requires.

16
00:00:56.920 --> 00:00:59.210
We don't need to learn about
how that's put together.

17
00:00:59.210 --> 00:01:03.310
It's essentially the same thing as GET
except that it requires that HTTP body,

18
00:01:03.310 --> 00:01:05.620
which we've already put
together in this example.

19
00:01:06.770 --> 00:01:11.493
So our job here is to create an HTTP
request value that represents

20
00:01:11.493 --> 00:01:13.158
a POST to API/users.

21
00:01:13.158 --> 00:01:15.454
Here's the documentation for HTTP POST,

22
00:01:15.454 --> 00:01:19.088
at this point we've learned enough
about Elm that we can just go read

23
00:01:19.088 --> 00:01:22.860
this documentation and
actually learn how this function works.

24
00:01:22.860 --> 00:01:24.410
What we need to pass it, and

25
00:01:24.410 --> 00:01:28.600
how to get it working without actually
having been taught it explicitly.

26
00:01:28.600 --> 00:01:31.990
This is going to become an increasingly
important skill to use as you're

27
00:01:31.990 --> 00:01:36.670
working through Elm, because quite
often the solution to the problem

28
00:01:36.670 --> 00:01:40.330
is to visit the package website for
whatever it is you're working with.

29
00:01:40.330 --> 00:01:44.510
And learn how these things work by just
reading the documentation about them.

30
00:01:44.510 --> 00:01:47.140
And the types are quite often
the most important thing in that

31
00:01:47.140 --> 00:01:48.780
because they tell you essentially,

32
00:01:48.780 --> 00:01:53.883
what is going to be necessary to pass
this thing to get it to work properly.

33
00:01:53.883 --> 00:01:57.700
Quite often in Elm, if you successfully
get the types to work out, in other words

34
00:01:57.700 --> 00:02:01.348
you get the compilers satisfied, it just
works the first time you try it, and

35
00:02:01.348 --> 00:02:03.402
I think that's likely to be the case here.

36
00:02:05.189 --> 00:02:05.733
&gt;&gt; Richard Feldman: Okay,

37
00:02:05.733 --> 00:02:11.480
there's also thing here that we have
not seen before called Debug.todo.

38
00:02:11.480 --> 00:02:12.850
So what does that thing do?

39
00:02:12.850 --> 00:02:17.021
So Debug.todo is a function that
has a very unusual type, in fact,

40
00:02:17.021 --> 00:02:22.157
it's the only place in Elm with this type
appears in any of the standard libraries.

41
00:02:22.157 --> 00:02:25.596
And basically Debug.todo will
type check with anything,

42
00:02:25.596 --> 00:02:28.218
and if you ever execute this,
it will crash.

43
00:02:28.218 --> 00:02:31.904
So you might be wondering,
how can we have a function an Elm

44
00:02:31.904 --> 00:02:35.990
that crashes when Elm's whole
thing is no run time exceptions.

45
00:02:35.990 --> 00:02:37.430
What's the deal with that?

46
00:02:37.430 --> 00:02:41.034
And the name gives you a clue,
this is intended for debugging and

47
00:02:41.034 --> 00:02:42.520
it's sort of like a todo.

48
00:02:42.520 --> 00:02:46.340
When you get to a point where you're like,
I want to come back to this later.

49
00:02:46.340 --> 00:02:50.980
Just work compile for now,
I will fix this later,

50
00:02:50.980 --> 00:02:53.279
don't worry about it, and
I'll circle back to it later.

51
00:02:54.380 --> 00:02:58.280
Important feature of this is that when
you're building for production mode and

52
00:02:58.280 --> 00:03:02.790
you give Elm-make the --optimize flag,
which is to say actually compact your

53
00:03:02.790 --> 00:03:06.450
assets and give me those small assets
that I wanna deploy in production.

54
00:03:06.450 --> 00:03:09.920
It will refuse to compile if you
left any of these in your code.

55
00:03:09.920 --> 00:03:12.690
That's why I say no production
run time exceptions.

56
00:03:12.690 --> 00:03:17.290
Also, that feature didn't always
exist in Elm back in the day,

57
00:03:17.290 --> 00:03:20.400
it was the case that you
could leave these in and

58
00:03:20.400 --> 00:03:24.410
the compiler would not yell at you
when you were building for production.

59
00:03:24.410 --> 00:03:26.760
That's the source of the only
run time exceptions we ever got.

60
00:03:26.760 --> 00:03:31.180
We left some of these in our code and
accidentally hit them in production.

61
00:03:31.180 --> 00:03:34.705
But portionally now if I try
to build with optimized,

62
00:03:34.705 --> 00:03:38.110
while I still have this todo in there,
it's not going to work.

63
00:03:38.110 --> 00:03:41.800
So as an example of that,
if I compile these,

64
00:03:43.980 --> 00:03:48.350
that will work just fine and we can be
unblocked and continue working on this.

65
00:03:48.350 --> 00:03:54.190
Since I add --optimize, oops,
did I not spell that right?

66
00:03:55.910 --> 00:03:57.310
I put it on after a new line.

67
00:03:57.310 --> 00:04:00.310
[LAUGH] Okay, DEBUG REMNANTS,

68
00:04:00.310 --> 00:04:03.310
they're used as a debug module
in the following modules.

69
00:04:03.310 --> 00:04:06.920
The optimize flag only works
if all of them are removed.

70
00:04:06.920 --> 00:04:09.950
So this is something
that is safe to use for

71
00:04:09.950 --> 00:04:12.910
development when we want to sort of say,
yo know what?

72
00:04:12.910 --> 00:04:14.390
I want to circle back to this later.

73
00:04:14.390 --> 00:04:18.685
I don't want to resolve these compiler
errors yet, but it's not something that's

74
00:04:18.685 --> 00:04:22.280
gonna bite you in production as long as
using the optimized flag in production.

75
00:04:22.280 --> 00:04:24.350
Which of course is always what
you wanna be using anyway,

76
00:04:24.350 --> 00:04:25.986
because who wouldn't want smaller assets.

77
00:04:25.986 --> 00:04:32.820
All right, so that's our request and
then finally, we have this command.

78
00:04:32.820 --> 00:04:36.690
So the command is what's going to
actually get returned from update

79
00:04:36.690 --> 00:04:37.960
in addition to our model.

80
00:04:39.080 --> 00:04:41.970
And to build this command
using the request,

81
00:04:41.970 --> 00:04:44.920
the ingredients that we're
going to use are this thing.

82
00:04:44.920 --> 00:04:50.570
As well as, we're going to need to
specify the message variant that's

83
00:04:50.570 --> 00:04:54.380
going to handle those two possibilities
of either it succeeded or it failed.

