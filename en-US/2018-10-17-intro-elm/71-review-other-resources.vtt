WEBVTT

1
00:00:00.000 --> 00:00:01.825
&gt;&gt; Richard Feldman: So
to summarize, Elm, as we've seen,

2
00:00:01.825 --> 00:00:03.876
is a language that
complies the JavaScript.

3
00:00:03.876 --> 00:00:06.325
As we've seen, it's got a lot
of differences to JavaScript.

4
00:00:06.325 --> 00:00:10.016
It's not sort of Java Script with some
tweaks, it really is its own separate

5
00:00:10.016 --> 00:00:13.651
programming language that just uses
JavaScript as a compilation target so

6
00:00:13.651 --> 00:00:15.165
that browsers understand it.

7
00:00:15.165 --> 00:00:18.804
We talked about how companies of all
different sizes are using Elm for

8
00:00:18.804 --> 00:00:20.633
all sorts of different purposes.

9
00:00:20.633 --> 00:00:23.299
Yours could potentially be the next one.

10
00:00:23.299 --> 00:00:27.501
We've seen some of the technical benefits
that are leading companies to choose

11
00:00:27.501 --> 00:00:28.512
things like that.

12
00:00:28.512 --> 00:00:30.107
Something I'm always curious about,

13
00:00:30.107 --> 00:00:33.113
did anyone encounter any runtime
exceptions while doing this workshop?

14
00:00:34.359 --> 00:00:35.451
&gt;&gt; Richard Feldman: Not surprised.

15
00:00:35.451 --> 00:00:35.988
[LAUGH] So

16
00:00:35.988 --> 00:00:40.906
hopefully, you've gotten some sort of
a sense of how Elm is able to do this.

17
00:00:40.906 --> 00:00:43.129
It's because the design of the compiler,
and

18
00:00:43.129 --> 00:00:46.948
the design of the libraries in conjunction
with the compiler, really do make it

19
00:00:46.948 --> 00:00:50.827
extraordinarily difficult to accidentally
crash your Elm code in production.

20
00:00:50.827 --> 00:00:53.045
This is not a fluke, this is the norm.

21
00:00:53.045 --> 00:00:57.408
We've also seen how to sort of embed
Elm in an existing piece of HTML with

22
00:00:57.408 --> 00:01:01.044
Elm.Main.init, sometimes
passing it a node like this,

23
00:01:01.044 --> 00:01:04.315
which is what we did at
the beginning of the workshop,

24
00:01:04.315 --> 00:01:09.145
before we switched to the single page app
that was taking over the entire page.

25
00:01:09.145 --> 00:01:11.750
This is really the key
to incremental adoption.

26
00:01:11.750 --> 00:01:15.767
This sort of embedding it into one piece
of one page Along with the JavaScript

27
00:01:15.767 --> 00:01:18.781
interop techniques that we
learned in the last section,

28
00:01:18.781 --> 00:01:22.517
are the most common story for
how people get started using Elm at work.

29
00:01:22.517 --> 00:01:24.100
It's almost never a green field,

30
00:01:24.100 --> 00:01:26.839
like we're gonna build this
new thing in Elm from scratch.

31
00:01:26.839 --> 00:01:30.634
It's almost always we've got an existing
application, we wanna try Elm out.

32
00:01:30.634 --> 00:01:34.474
Let's just get a little bit of Elm going
on one page, get it into production,

33
00:01:34.474 --> 00:01:35.432
see how we like it.

34
00:01:35.432 --> 00:01:37.716
Something very small and low risk.

35
00:01:37.716 --> 00:01:39.709
Low risk is the key to
incremental adoption, and

36
00:01:39.709 --> 00:01:42.832
that's been the most successful success
story we hear over and over again.

37
00:01:44.332 --> 00:01:46.281
&gt;&gt; Richard Feldman: We talked
about the Elm architecture.

38
00:01:46.281 --> 00:01:49.245
This is sort of the final form of
it with model view and update,

39
00:01:49.245 --> 00:01:52.168
like we started out with, and
then we added commands later.

40
00:01:52.168 --> 00:01:56.836
And then finally, we added subscriptions
to sort of fit the entire puzzle together.

41
00:01:56.836 --> 00:01:58.942
Update is sort of the brains
of the operation,

42
00:01:58.942 --> 00:02:01.644
it receives messages from
a variety of different sources.

43
00:02:01.644 --> 00:02:05.094
And once it does receive those messages,
it can potentially update the model.

44
00:02:05.094 --> 00:02:09.573
Which, in turn,
transitions view to render some new HTML.

45
00:02:09.573 --> 00:02:10.528
And potentially,

46
00:02:10.528 --> 00:02:13.878
we trigger some subscriptions that
we might wanna turn on and off.

47
00:02:13.878 --> 00:02:18.195
The runtime orchestrates the whole thing,
ties everything together and makes it so

48
00:02:18.195 --> 00:02:21.902
that every single Elm function that we
write in the entire language can be

49
00:02:21.902 --> 00:02:25.973
completely pure while still being able to
do all of the useful things that we need

50
00:02:25.973 --> 00:02:28.568
to be able to do to make
a working web application.

51
00:02:28.568 --> 00:02:32.760
If you wanna see the final version of
this, like the actual for real, for

52
00:02:32.760 --> 00:02:36.544
real version, without any induced bugs for
exercise purposes,

53
00:02:36.544 --> 00:02:40.005
it's at
github.com/rtfeldman/elm-spa-example.

54
00:02:40.005 --> 00:02:43.490
Also in that repository are links
to the real world examples for

55
00:02:43.490 --> 00:02:45.804
all the other different architectures.

56
00:02:45.804 --> 00:02:50.645
So they've got React, Angular, View,
all sorts of different things that you can

57
00:02:50.645 --> 00:02:54.188
compare to see what would this
application look like in Elm?

58
00:02:54.188 --> 00:02:57.450
What's the analog in React and
Angular and View, etc.?

59
00:02:57.450 --> 00:03:00.362
So you can pick a technology that
you are more familiar with and

60
00:03:00.362 --> 00:03:03.330
just kind of bounce back and
forth and see how things are done and

61
00:03:03.330 --> 00:03:05.694
how things are sort of
different between the two.

62
00:03:05.694 --> 00:03:09.662
Also, big thanks to the Thinkster for
putting that together because I think

63
00:03:09.662 --> 00:03:13.948
that's been an incredibly helpful tool for
people to learn these technologies.

64
00:03:16.215 --> 00:03:18.550
&gt;&gt; Richard Feldman: Shout out
to the official Elm guide.

65
00:03:18.550 --> 00:03:21.062
This is really kind of the the source for

66
00:03:21.062 --> 00:03:23.968
what is the right way
to do Elm applications.

67
00:03:23.968 --> 00:03:26.209
This is written by Evan,
the creator of Elm.

68
00:03:26.209 --> 00:03:29.949
It's on the Elm website, and
it goes through a lot of the same types of

69
00:03:29.949 --> 00:03:33.386
material that we just went through
in it in a different format.

70
00:03:33.386 --> 00:03:37.223
Also, Elm in Action is a book I'm
writing for Manning Publications.

71
00:03:37.223 --> 00:03:40.463
It's mostly done, but
not completely done, so

72
00:03:40.463 --> 00:03:44.900
you can get that early access right
now through their MIF program.

73
00:03:44.900 --> 00:03:48.847
Also, definitely very strong
shout out to Elm Slack.

74
00:03:48.847 --> 00:03:52.481
This is not like Slack in other
communities, I'm told, because,

75
00:03:52.481 --> 00:03:56.630
especially the beginner's channel is
just full of unbelievably friendly,

76
00:03:56.630 --> 00:04:00.039
helpful people who spend a lot
of time just helping people out.

77
00:04:00.039 --> 00:04:03.473
I hear over and over again that is
the best resource is just hop on Slack,

78
00:04:03.473 --> 00:04:07.040
get in the beginners channel,
whatever question you have, just ask it.

79
00:04:07.040 --> 00:04:09.917
Chances are someone's gonna
answer it pretty quickly and

80
00:04:09.917 --> 00:04:13.216
help you get unstuck with anything
that you run into along the way.

81
00:04:13.216 --> 00:04:14.238
So highly, highly recommend Slack.

82
00:04:14.238 --> 00:04:15.835
It's the number one resource for

83
00:04:15.835 --> 00:04:18.924
getting Elm questions answered
when you're getting started.

84
00:04:20.389 --> 00:04:23.072
&gt;&gt; Richard Feldman: There's also an Elm
discourse, discourse.elm-lang.org.

85
00:04:23.072 --> 00:04:27.158
This is more of a sort of long forum
discussions and stuff like that.

86
00:04:27.158 --> 00:04:32.990
Not as helpful as Slack, based on my
anecdotal evidence that I've heard from

87
00:04:32.990 --> 00:04:38.027
people, but still a useful source
of knowledge and discussions.

88
00:04:38.027 --> 00:04:41.008
There's an FAQ,
which includes quite a bit of things.

89
00:04:41.008 --> 00:04:44.537
This is sort of a community curated thing
of just common questions that people have,

90
00:04:44.537 --> 00:04:47.732
like somebody asked earlier about,
hey, what's about Elm on the server?

91
00:04:47.732 --> 00:04:50.302
There's just a lot of stuff like that
that people just sort of run into.

92
00:04:50.302 --> 00:04:53.363
So when in doubt,
that's a good place to go.

93
00:04:53.363 --> 00:04:56.387
The Elm Town Podcast has lots of cool,
entertaining topics.

94
00:04:56.387 --> 00:04:58.001
They've got, I don't know,

95
00:04:58.001 --> 00:05:02.606
some 40-some-odd episodes over the past
couple years, it's at elmtown.audio.

96
00:05:02.606 --> 00:05:06.677
And finally, there's some success stories
that I think are worth reading to just

97
00:05:06.677 --> 00:05:10.394
sorta understand the different
perspectives that people have under their

98
00:05:10.394 --> 00:05:12.000
experiences using Elm of work.

99
00:05:12.000 --> 00:05:13.653
So obviously, I've had a lot of success.

100
00:05:13.653 --> 00:05:15.436
I've been Elm about four years at work,

101
00:05:15.436 --> 00:05:17.959
we have about a quarter million
lines of Elm code at work.

102
00:05:17.959 --> 00:05:20.409
And we've been extremely happy with it,
but it's not just us.

103
00:05:20.409 --> 00:05:24.146
I think if you're interested in
using Elm work, I think it's helpful

104
00:05:24.146 --> 00:05:28.025
to read some of these stories from
other people how Elm will work better.

105
00:05:28.025 --> 00:05:29.825
Elm in Production 25,000 lines later.

106
00:05:29.825 --> 00:05:31.387
One year of Elm Production.

107
00:05:31.387 --> 00:05:37.672
And hopefully, at some point, your
success story can go here on this slide.

108
00:05:37.672 --> 00:05:39.563
So that's it, that's the workshop.

109
00:05:39.563 --> 00:05:43.635
Thank you all so much for attending,
and hopefully you learned something.

110
00:05:43.635 --> 00:05:48.183
&gt;&gt; Group: [APPLAUSE]

