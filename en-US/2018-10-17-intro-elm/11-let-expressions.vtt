WEBVTT

1
00:00:00.130 --> 00:00:02.540
&gt;&gt; Richard Feldman: Now we have introduced
a little bit of code duplication here.

2
00:00:02.540 --> 00:00:03.630
Which is a little bit annoying.

3
00:00:03.630 --> 00:00:07.598
We're using String.fromInt quantity
++ space, and then plus plus,

4
00:00:07.598 --> 00:00:09.070
the interesting part.

5
00:00:09.070 --> 00:00:12.031
So let us resolve that code duplication.

6
00:00:12.031 --> 00:00:14.875
There is a bunch of different ways we
could do it, but I'm going to choose to

7
00:00:14.875 --> 00:00:17.518
resolve it in a particular way that
demonstrates some new concepts.

8
00:00:17.518 --> 00:00:19.480
Specifically, a let-expression.

9
00:00:21.230 --> 00:00:24.520
So here's how we could, one way we
could do this using a let expression.

10
00:00:24.520 --> 00:00:26.910
Probably I wouldn't quite do
it like this in reality, but

11
00:00:26.910 --> 00:00:29.980
this demonstrates some useful concepts,
so we'll choose to do it this way for

12
00:00:29.980 --> 00:00:32.110
the purposes of demonstration.

13
00:00:32.110 --> 00:00:34.190
Okay, this right here is a let expression.

14
00:00:35.650 --> 00:00:39.060
It's got let, it's got in, and
it's got some stuff in between, and

15
00:00:39.060 --> 00:00:40.080
it's got some stuff after.

16
00:00:41.080 --> 00:00:44.390
Let's kinda walk through the different
things that are going on here.

17
00:00:44.390 --> 00:00:48.610
So we're defining two new values here,
quantityStr and prefix.

18
00:00:48.610 --> 00:00:52.980
And these are two new values that are only
accessible inside the let expression.

19
00:00:54.670 --> 00:00:56.340
You can see that they're
based on one another, so

20
00:00:56.340 --> 00:01:01.150
quantityStr is immediately used
by prefix and then down below,

21
00:01:01.150 --> 00:01:07.340
we end up using prefix in the ultimate
expression that we are using.

22
00:01:08.910 --> 00:01:12.430
So, those are only available
inside the let expression.

23
00:01:12.430 --> 00:01:15.590
They are completely inaccessible
to the outside scope.

24
00:01:15.590 --> 00:01:20.000
So, any other function outside pluralize
that wants to access them cannot.

25
00:01:20.000 --> 00:01:23.288
These are scoped to inside
the let expression itself.

26
00:01:25.196 --> 00:01:29.030
&gt;&gt; Richard Feldman: The entire
let expression evaluates to this.

27
00:01:29.030 --> 00:01:32.760
So between let and in, we can define
various different values if we want,

28
00:01:32.760 --> 00:01:34.040
as many as we want or as few as we want.

29
00:01:34.040 --> 00:01:35.950
We can only have just one if we wanted.

30
00:01:35.950 --> 00:01:37.380
And then at the end of the day,

31
00:01:37.380 --> 00:01:41.100
all of that is gonna get substituted for
what we defined down at the end here so

32
00:01:41.100 --> 00:01:46.010
this is sort of the meat of what
the let and in is evaluating to.

33
00:01:46.010 --> 00:01:48.840
Everything above is just in support
of the thing that comes after in.

34
00:01:50.070 --> 00:01:51.330
And just like if,

35
00:01:51.330 --> 00:01:55.875
let is an expression we can say X
equals let blah blah blah in etc.

36
00:01:55.875 --> 00:01:59.090
And the entire let expression's
going to evaluate to a single value.

37
00:02:00.580 --> 00:02:01.910
One quick note on syntax,

38
00:02:01.910 --> 00:02:06.040
there are two places in Elm where
indentation matters, this is one of them.

39
00:02:06.040 --> 00:02:09.420
The way that Elm knows
where one value begins and

40
00:02:09.420 --> 00:02:11.830
the next one ends is by
looking at the indentation.

41
00:02:11.830 --> 00:02:14.340
You can choose whatever
indentation level you want here,

42
00:02:14.340 --> 00:02:16.310
of course Elm format will pick one for
you.

43
00:02:16.310 --> 00:02:19.150
But these do have to have the same,
however many of

44
00:02:19.150 --> 00:02:21.820
these you put inside the let, they all
have to be indented to the same level.

45
00:02:23.880 --> 00:02:26.200
&gt;&gt; Speaker 2: So could you,
it's kinda weird, but

46
00:02:26.200 --> 00:02:31.410
could you refer to prefix
in quantity string?

47
00:02:31.410 --> 00:02:33.750
Do they have to be,
are they evaluated in order?

48
00:02:35.420 --> 00:02:36.030
&gt;&gt; Richard Feldman: Great question, yeah.

49
00:02:36.030 --> 00:02:38.360
So are they evaluated in order?

50
00:02:40.630 --> 00:02:42.800
So, the short answer is that,

51
00:02:42.800 --> 00:02:48.236
how do I explain this without getting
into stuff we haven't gotten into yet?

52
00:02:48.236 --> 00:02:50.582
[LAUGH] Generally speaking,

53
00:02:50.582 --> 00:02:56.350
order does not matter with
the things inside a let expression.

54
00:02:56.350 --> 00:03:00.720
However, if you have them refer to one
another, that's gonna be a problem because

55
00:03:00.720 --> 00:03:05.310
they need to be able to,
one needs to be resolved but

56
00:03:05.310 --> 00:03:08.830
without the other, or else we have mutual
recursion and that wouldn't compile.

57
00:03:10.460 --> 00:03:15.000
However, if we were to, for example, take
the definition of prefix and move it above

58
00:03:15.000 --> 00:03:18.820
the definition of quantityStr,
that actually would work out okay.

59
00:03:18.820 --> 00:03:23.240
The reason that it's safe to do that and
that'snot going to cause any problems,

60
00:03:23.240 --> 00:03:25.950
has to do with some characteristics of Elm
that we're not gonna get to for another

61
00:03:25.950 --> 00:03:29.530
couple of parts, but short answer is, you
can't reorder them as much as you want.

62
00:03:29.530 --> 00:03:33.000
&gt;&gt; Speaker 2: Is that bad practice and,
okay.

63
00:03:33.000 --> 00:03:35.575
&gt;&gt; Richard Feldman: Not at all.
I don't even think about order, honestly.

64
00:03:35.575 --> 00:03:36.570
[LAUGH] Yeah.

65
00:03:36.570 --> 00:03:38.787
&gt;&gt; Speaker 2: It couldn't cause a bug or
something?

66
00:03:38.787 --> 00:03:44.107
&gt;&gt; Richard Feldman: No,
&gt;&gt; Richard Feldman: I'm

67
00:03:44.107 --> 00:03:47.786
trying to think if there's any possible
way you could cause a bug with ordering,

68
00:03:47.786 --> 00:03:49.312
and I really can't think of any.

69
00:03:51.315 --> 00:03:53.430
&gt;&gt; Richard Feldman: Yeah,
no I'm comfortable making the claim that

70
00:03:53.430 --> 00:03:56.750
you can't cause a bug by doing that,
at least not in production.

71
00:03:56.750 --> 00:04:00.350
It can only affects debugging tools,
that's the only

72
00:04:00.350 --> 00:04:03.960
case I can think about where there
would be any difference at all.

73
00:04:03.960 --> 00:04:09.290
Like as far as the production bug,
I don't think so yeah.

74
00:04:09.290 --> 00:04:11.800
&gt;&gt; Speaker 3: Can you
nest let-in expression?

75
00:04:11.800 --> 00:04:12.770
&gt;&gt; Richard Feldman: Absolutely, yeah.

76
00:04:12.770 --> 00:04:13.470
Great question.

77
00:04:13.470 --> 00:04:16.920
So any time you want, you can just,
anywhere you have any expression in Elm,

78
00:04:16.920 --> 00:04:18.830
you can be like, you know what,
I'm gonna take this sucker out and

79
00:04:18.830 --> 00:04:20.350
I'm gonna replace it with a let.

80
00:04:20.350 --> 00:04:21.370
Absolutely fine.

81
00:04:21.370 --> 00:04:24.800
You can nest lets inside other lets.

82
00:04:24.800 --> 00:04:30.680
Let is sort of this all-purpose, like,
I need to name some stuff in a new scope.

83
00:04:30.680 --> 00:04:34.950
There’s a lot of places where Elm doesn’t
bother creating implicit new scope for

84
00:04:34.950 --> 00:04:36.870
you, because it’s just got, let,

85
00:04:36.870 --> 00:04:39.520
that you can put anywhere in
there to solve that problem.

86
00:04:39.520 --> 00:04:40.490
So yeah, definitely.

