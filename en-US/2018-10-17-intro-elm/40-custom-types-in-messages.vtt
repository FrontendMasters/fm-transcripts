WEBVTT

1
00:00:00.000 --> 00:00:01.786
&gt;&gt; Richard Feldman: Let's
move on to Pagination.

2
00:00:01.786 --> 00:00:05.557
Guess some people call it Pagination,
I don't know, I always call it Pagination,

3
00:00:05.557 --> 00:00:08.067
that's nothing to do for
the purpose of this workshop.

4
00:00:08.067 --> 00:00:10.032
So basically we gonna
have a list of numbers,

5
00:00:10.032 --> 00:00:13.565
each of them representing a different page
at the bottom of our feet of articles.

6
00:00:13.565 --> 00:00:18.662
And when you use clicks on one, we want to
load a new page of articles, all right.

7
00:00:18.662 --> 00:00:22.000
So, just a recap,
currently we have tags influencing, and

8
00:00:22.000 --> 00:00:26.002
when you click on one of the tags,
that's our only form of interaction.

9
00:00:26.002 --> 00:00:32.007
Clicking on a tab sends a message from
view to update, through the Elm runtime.

10
00:00:32.007 --> 00:00:36.228
Update receives this message and says I
see you have a description and clickedTag,

11
00:00:36.228 --> 00:00:39.509
and you have is let's say I clicked
on the cars tag this is great I'm

12
00:00:39.509 --> 00:00:41.580
gonna update that to be our selected tag.

13
00:00:41.580 --> 00:00:45.398
Which now we can do using
our fancy custom type and

14
00:00:45.398 --> 00:00:49.324
have it render the appropriate
tab accordingly.

15
00:00:49.324 --> 00:00:53.466
We also have a type alias for that called
type alias message which says description

16
00:00:53.466 --> 00:00:57.084
is a string and data is a string,
which we did in the previous exercise.

17
00:00:57.084 --> 00:01:02.685
And now we're gonna want to introduce
a new message for pagination.

18
00:01:02.685 --> 00:01:05.433
So when the user clicks on one
of these inside of our view,

19
00:01:05.433 --> 00:01:09.523
we're gonna want to specify another one
of these records that's going to say, hi.

20
00:01:09.523 --> 00:01:11.412
Here was the page that
the user clicked on,

21
00:01:11.412 --> 00:01:13.995
here's the description that
says they clicked on a page.

22
00:01:13.995 --> 00:01:18.466
So we would have
description = ClickedPage,

23
00:01:18.466 --> 00:01:21.797
Data = 2,and we have a problem.

24
00:01:21.797 --> 00:01:26.318
So if I click on page two, that's kind of
what I want to happen in that situation

25
00:01:26.318 --> 00:01:29.074
but we said in our message
that data is a string.

26
00:01:29.074 --> 00:01:32.610
And I'm sure enough data is a string here,
it needs to be a string in order for

27
00:01:32.610 --> 00:01:35.344
the functionality we already
built to continue working.

28
00:01:35.344 --> 00:01:38.058
But here we've said that data is an int.

29
00:01:38.058 --> 00:01:40.623
It can't be both,
[LAUGH] It's gonna be one or the other.

30
00:01:40.623 --> 00:01:44.438
As previously noted its really important
that message have a consistent

31
00:01:44.438 --> 00:01:48.377
type between view and update, and
certainly means that different parts of

32
00:01:48.377 --> 00:01:51.276
view need to agree on a common format for
this message.

33
00:01:51.276 --> 00:01:54.492
So one way we could fix this is we
could say we're gonna add some more

34
00:01:54.492 --> 00:01:55.419
fields messages.

35
00:01:55.419 --> 00:01:59.092
We shall have string data which is
the string and int data which is int, and

36
00:01:59.092 --> 00:02:00.987
then we're gonna be like, okay, for

37
00:02:00.987 --> 00:02:04.202
ClickedTag we're gonna have
a stringData is cars like before.

38
00:02:04.202 --> 00:02:07.501
IntData is, I don't know,
it's not useful here so maybe it's -1?

39
00:02:07.501 --> 00:02:10.988
Or, and then for ClickedPage we'll have,
stringData is not useful, so

40
00:02:10.988 --> 00:02:12.517
I guess it will be empty string.

41
00:02:12.517 --> 00:02:16.577
Then intData is 2, but you don't have
to think very far into the future

42
00:02:16.577 --> 00:02:19.157
to realize this is not
gonna scale very well.

43
00:02:19.157 --> 00:02:21.837
Like, every time I add a new
type of message to my program,

44
00:02:21.837 --> 00:02:25.395
I need to go through and add an additional
field to the message, and then every

45
00:02:25.395 --> 00:02:29.215
single other message everywhere in my
whole program, add another field to that.

46
00:02:29.215 --> 00:02:31.651
And most of the time,
it's gonna be nonsense, so

47
00:02:31.651 --> 00:02:33.512
I have to pick a nonsense value to use.

48
00:02:33.512 --> 00:02:35.544
This is where we're gonna get out of hand.

49
00:02:35.544 --> 00:02:40.389
This is really where we sort of
bombed up against the boundary of why

50
00:02:40.389 --> 00:02:44.555
using records for
message is not really the best choice.

51
00:02:44.555 --> 00:02:47.921
So in practice people don't
actually use records for message.

52
00:02:47.921 --> 00:02:51.566
I just did that as a way to
sort of get us up and running.

53
00:02:51.566 --> 00:02:55.546
In contrast, let's think about what
happens if we use a custom type for this.

54
00:02:55.546 --> 00:03:00.320
Now we can say, we have two
variants of message, ClickedTag,

55
00:03:00.320 --> 00:03:05.744
which holds on to a string, and
ClickedPage, which holds on to an int.

56
00:03:05.744 --> 00:03:10.975
This precisely describes every single
possibility that we could have for

57
00:03:10.975 --> 00:03:13.092
interaction on our program.

58
00:03:13.092 --> 00:03:14.489
Either the user clicked a tag.

59
00:03:14.489 --> 00:03:18.210
In which case, not only do we know they
clicked it, we also know which tag they

60
00:03:18.210 --> 00:03:21.323
clicked, cuz we have that string
held on to inside the message.

61
00:03:21.323 --> 00:03:23.235
Or, they clicked a page, in which case,

62
00:03:23.235 --> 00:03:25.597
we have an int representing
the page they clicked.

63
00:03:25.597 --> 00:03:28.109
If we add more types of interactions,
that's fine.

64
00:03:28.109 --> 00:03:32.918
We can just keep adding variants, each
of which holds exactly the additional,

65
00:03:32.918 --> 00:03:36.745
contextual information necessary,
for update to do its job.

66
00:03:36.745 --> 00:03:40.980
Great, now this whole record gets
replaced by ClickedTag cars, and

67
00:03:40.980 --> 00:03:44.202
this whole record gets
replaced by ClickedPage 2.

68
00:03:44.202 --> 00:03:45.955
That's it.

69
00:03:45.955 --> 00:03:49.518
So now, if this is our new message type,
we've gotten ride of the old type

70
00:03:49.518 --> 00:03:52.231
alias message and
now we're using a custom type for it.

71
00:03:52.231 --> 00:03:56.462
Update can say case msg of ClickedTag, in
which case we've got the selectedTag and

72
00:03:56.462 --> 00:03:58.759
we're going to destructure
that in there and

73
00:03:58.759 --> 00:04:01.427
give it a name just as if it
were a function argument.

74
00:04:01.427 --> 00:04:05.675
And now we can inside the body of
this branch, use the selectedTag.

75
00:04:05.675 --> 00:04:10.408
Or ClickedPage which has
the page number which is an int,

76
00:04:10.408 --> 00:04:13.078
and then we can use that in here.

77
00:04:13.078 --> 00:04:15.399
Now what's especially cool about this,

78
00:04:15.399 --> 00:04:18.976
is that we don't have to put a default
branch like before we had to

79
00:04:18.976 --> 00:04:22.773
have that else return the bottle on
change that is even come up here.

80
00:04:22.773 --> 00:04:26.919
The best part of this is that if
we keep adding message types and

81
00:04:26.919 --> 00:04:31.007
we ever forget to handle one and
update, it won't compile.

82
00:04:31.007 --> 00:04:33.049
Elm will say, hey,
you introduced a new message type.

83
00:04:33.049 --> 00:04:36.087
You're using that, but you didn't
actually write the logic to handle it.

84
00:04:36.087 --> 00:04:38.640
You need to add a branch
to that case expression,

85
00:04:38.640 --> 00:04:42.024
to handle the possibility that
the user does that interaction.

86
00:04:42.024 --> 00:04:45.815
Also, if we ever delete one,
it will once again give us an error.

87
00:04:45.815 --> 00:04:49.118
Also, if we add one that's
redundant with a previous one,

88
00:04:49.118 --> 00:04:52.896
we already handled that somewhere else,
it'll gives us an error.

89
00:04:52.896 --> 00:04:56.752
So, for many reasons, not just the number
of fields that we have to put in a record

90
00:04:56.752 --> 00:04:58.015
to try and scale that out.

91
00:04:58.015 --> 00:05:02.464
Custom types are just a, they fit
the use case of messages like a glove.

92
00:05:02.464 --> 00:05:05.573
They're just the absolute best thing
we could use to represent this.

93
00:05:05.573 --> 00:05:10.134
And it's sort of a wonderful
language feature that Elm has that

94
00:05:10.134 --> 00:05:11.690
allows this to work.

95
00:05:11.690 --> 00:05:16.334
Little known fact about Redux, if you're
familiar with Redux, you may have,

96
00:05:16.334 --> 00:05:18.220
this may seem kind of familiar.

97
00:05:18.220 --> 00:05:21.874
That's because Redux is actually
based on the architecture.

98
00:05:21.874 --> 00:05:25.361
The history of Redux is that Dan Alvarov
was giving a talk at a conference,

99
00:05:25.361 --> 00:05:28.345
wanted to implement time travel
debugging and hot reloading,

100
00:05:28.345 --> 00:05:30.836
which is something that Elm
already had at the time.

101
00:05:30.836 --> 00:05:34.717
And so he looked at Elm and tried to
figure out how Elm was able to do that,

102
00:05:34.717 --> 00:05:36.876
and the answer was this architecture.

103
00:05:36.876 --> 00:05:40.234
But of course,
JavaScript does not have custom types.

104
00:05:40.234 --> 00:05:45.154
So he came up with an alternative that's
based on using JavaScript objects instead.

105
00:05:45.154 --> 00:05:48.407
But some of the complaints
that people have about Redux,

106
00:05:48.407 --> 00:05:51.390
don't actually apply to
the original Elm because,

107
00:05:51.390 --> 00:05:55.208
when you have custom types a lot
of those things just don't exist.

108
00:05:55.208 --> 00:06:00.742
Okay, so to use this to implement our
pagination bar down here, we can write

109
00:06:00.742 --> 00:06:06.376
a page button on the view side that says
I'm gonna take an int for the current.

110
00:06:06.376 --> 00:06:10.998
Page number that I'm going to display,
it's going to return HTML message.

111
00:06:10.998 --> 00:06:14.798
It'll take that pageNumber as an argument,
and we'll say instead of onClick, and

112
00:06:14.798 --> 00:06:17.381
then passing the description
record like we did before.

113
00:06:17.381 --> 00:06:21.007
Now we will just say
ClickedPage pageNumber, and

114
00:06:21.007 --> 00:06:24.127
that will return the message that we want.

115
00:06:24.127 --> 00:06:25.919
Then that's what we'll get sent to update.

116
00:06:25.919 --> 00:06:29.728
And then the text is just
String.fromInt pageNumber.

117
00:06:29.728 --> 00:06:32.781
And now you've successfully
connected view and update,

118
00:06:32.781 --> 00:06:35.838
using our nice custom types
to link everything together.

