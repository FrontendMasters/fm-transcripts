WEBVTT

1
00:00:00.016 --> 00:00:01.480
&gt;&gt; Richard Feldman: So
let me get the question of,

2
00:00:01.480 --> 00:00:04.380
we have this goal of transitioning
between these two states.

3
00:00:04.380 --> 00:00:08.060
Like over here, I've clicked
the popular tag of elm, and over here,

4
00:00:08.060 --> 00:00:10.160
I've clicked the popular
tag of programming, and

5
00:00:10.160 --> 00:00:13.250
we want the page to look
different in those two scenarios.

6
00:00:13.250 --> 00:00:18.520
So how can we get it to look different
using this one view function?

7
00:00:18.520 --> 00:00:23.530
Well, basically, this question boils
down to, how can we transition

8
00:00:23.530 --> 00:00:28.650
from the initial model to a different
model that has a different tag selected.

9
00:00:28.650 --> 00:00:31.270
How do we get from the one to the other?

10
00:00:31.270 --> 00:00:32.640
Because if we can do that,

11
00:00:32.640 --> 00:00:37.400
as long as view is capable of rendering
a different thing based on which model it

12
00:00:37.400 --> 00:00:40.600
gets, as long as we can transition
from one models to the other, and

13
00:00:40.600 --> 00:00:44.400
have you get called again with the updated
model, then we should be good.

14
00:00:44.400 --> 00:00:48.010
It should successfully render
the new page as we want it.

15
00:00:49.010 --> 00:00:52.270
So the link between these two,
that causes that transition to happen,

16
00:00:52.270 --> 00:00:53.000
is called update.

17
00:00:54.020 --> 00:00:58.810
So update is another function, much
like view, and it takes two arguments.

18
00:00:58.810 --> 00:01:00.450
So one of the arguments is the model.

19
00:01:00.450 --> 00:01:01.240
Same thing as view.

20
00:01:01.240 --> 00:01:03.010
Model represents the entire
application state.

21
00:01:03.010 --> 00:01:05.110
The other argument is called message.

22
00:01:06.280 --> 00:01:11.250
So essentially, what the message does,
is message is something that comes from

23
00:01:11.250 --> 00:01:15.450
the outside world that tells update
sort of what happened recently, and

24
00:01:15.450 --> 00:01:16.820
let's update figure out what to do.

25
00:01:18.000 --> 00:01:21.660
Ultimately, what we want update to do
here, is to do something like this,

26
00:01:21.660 --> 00:01:25.340
this record update that says,
I wanna take my model, and

27
00:01:25.340 --> 00:01:29.260
keep everything about the same, except
I wanna change the selectedTag to elm,

28
00:01:29.260 --> 00:01:32.610
because the user clicked
on the elm selectedTag.

29
00:01:32.610 --> 00:01:37.060
So this is going to return a new model,
and that's sort of what updates job is,

30
00:01:37.060 --> 00:01:41.310
is to return a new model that
describes the new application state.

31
00:01:41.310 --> 00:01:45.050
So whereas Views job, was to return
a description of how the page should look.

32
00:01:45.050 --> 00:01:47.960
Updates job is to transition
between application states.

33
00:01:47.960 --> 00:01:50.550
It's to say,
we started off at this state, but

34
00:01:50.550 --> 00:01:53.630
based on what most recently happened
in terms of user interaction or

35
00:01:53.630 --> 00:01:56.480
something else, now,
we want to transition to this new state.

36
00:01:56.480 --> 00:01:57.570
And the way that it does that,

37
00:01:57.570 --> 00:02:00.170
is it just returns what the new
application state ought to be.

38
00:02:01.900 --> 00:02:06.050
Message, is sort of the way that
it knows what to transition to.

39
00:02:06.050 --> 00:02:10.380
This is a value that comes in from
the outside world that describes what

40
00:02:10.380 --> 00:02:11.950
just happened.

41
00:02:11.950 --> 00:02:13.810
So this could be a user interaction,
like for example,

42
00:02:13.810 --> 00:02:18.040
the user clicked on one of these tags,
it could be the user typing something in.

43
00:02:18.040 --> 00:02:18.820
Or it could even be,

44
00:02:18.820 --> 00:02:22.130
as we will later see, something like
a message coming in from the server.

45
00:02:23.150 --> 00:02:27.400
Point is, a message describes
something that just happened.

46
00:02:27.400 --> 00:02:29.570
Using these two ingredients
of the message and

47
00:02:29.570 --> 00:02:33.080
the model,
we can decide what new model to return.

48
00:02:34.130 --> 00:02:37.050
Here's an example of something
we could use for message.

49
00:02:37.050 --> 00:02:41.310
We get to decide the format of message,
I've chosen this particular format.

50
00:02:41.310 --> 00:02:43.450
But we're actually gonna evolve this
over the course of the workshop

51
00:02:43.450 --> 00:02:44.250
to a different format.

52
00:02:44.250 --> 00:02:46.650
But for now,
this is a good starting point.

53
00:02:47.980 --> 00:02:51.490
We're just using a record,
we're saying update gets a record for

54
00:02:51.490 --> 00:02:54.870
its message that has
a description of clicks tag.

55
00:02:54.870 --> 00:02:57.840
Which is sort of a pretty straightforward
description of what happened.

56
00:02:57.840 --> 00:02:59.810
And then,
it's got a little piece of extra data,

57
00:02:59.810 --> 00:03:02.690
which describes which
tag the user clicked.

58
00:03:02.690 --> 00:03:04.630
So by looking at these two
pieces of information,

59
00:03:04.630 --> 00:03:06.310
update can say, I see what happened.

60
00:03:06.310 --> 00:03:08.080
The user clicked a particular tag.

61
00:03:08.080 --> 00:03:10.370
I'm going to change the application
state to reflect that.

62
00:03:13.130 --> 00:03:16.380
The way that this is
going to get into update,

63
00:03:16.380 --> 00:03:18.930
is by specifying it as
an onClick handler in the view.

64
00:03:20.070 --> 00:03:24.270
So when the view is rendering or
describing this button,

65
00:03:24.270 --> 00:03:28.280
that the user's going to click to send the
message to update, here's how it does it.

66
00:03:28.280 --> 00:03:32.750
There's a function called onClick which
takes as an argument the exact message

67
00:03:32.750 --> 00:03:36.280
that's going to be sent to
update when the click happens.

68
00:03:36.280 --> 00:03:39.360
And then, that's actually just
a plain old attribute that we can put

69
00:03:39.360 --> 00:03:41.550
inside of our button.

70
00:03:41.550 --> 00:03:45.110
So just like we had class as one of
the attributes that can go into button,

71
00:03:45.110 --> 00:03:46.440
onClick is another one.

72
00:03:46.440 --> 00:03:49.370
Event handlers go in that
same first list of attributes

73
00:03:49.370 --> 00:03:51.480
that get passed to every element.

74
00:03:51.480 --> 00:03:54.060
So button, onClick, and then a record.

75
00:03:55.580 --> 00:04:00.200
What this code does, is it means that
not only are we rendering a tag button

76
00:04:00.200 --> 00:04:03.880
that has the text of elm, but also, we're
specifying, whenever the user clicks this

77
00:04:03.880 --> 00:04:09.460
button, this message should get sent
to update along with the current model,

78
00:04:09.460 --> 00:04:13.710
and then, based on that, update's going to
potentially transition us to a new model.

79
00:04:13.710 --> 00:04:18.050
It's gonna say, I am going to change our
application state from what it was before,

80
00:04:18.050 --> 00:04:20.350
to this new application state,
based on the message, and

81
00:04:20.350 --> 00:04:21.740
based on the existing model.

82
00:04:23.010 --> 00:04:26.520
So to see this in diagram form,
we have our current application state,

83
00:04:26.520 --> 00:04:28.990
that gets passed into view,
View render some HTML,

84
00:04:28.990 --> 00:04:31.700
which now includes some
buttons with onClick handlers.

85
00:04:31.700 --> 00:04:33.490
The runtime takes care
of wiring all that up,

86
00:04:33.490 --> 00:04:35.630
all the event listeners,
does all of that for us.

87
00:04:36.680 --> 00:04:39.810
When the user clicks that button,
that says Elm.

88
00:04:41.130 --> 00:04:45.460
The runtime is going to send that message
that we specified in our HTML that

89
00:04:45.460 --> 00:04:49.940
the view returned, as an argument to
update along with the current model.

90
00:04:49.940 --> 00:04:51.400
And then update says, okay.

91
00:04:51.400 --> 00:04:52.060
Based on that,

92
00:04:52.060 --> 00:04:56.790
I'm now going to probably do a record
update to set the currently selected tag.

93
00:04:56.790 --> 00:04:57.420
And then,

94
00:04:57.420 --> 00:05:02.160
based on that, the runtime's gonna say, I
see that update is giving me a new model.

95
00:05:02.160 --> 00:05:05.760
I will pass that new model to view,
which in turn will give me some new HTML.

96
00:05:05.760 --> 00:05:07.260
And the cycle begins all over again.

97
00:05:08.640 --> 00:05:11.260
Fundamentally, this is how
every Elm application works.

98
00:05:11.260 --> 00:05:16.030
This is a complete way to describe user
interaction and updating the screen,

99
00:05:16.030 --> 00:05:16.970
based on what happened.

100
00:05:18.090 --> 00:05:21.570
Elm's able to do this very quickly,
fortunately, because one

101
00:05:21.570 --> 00:05:25.440
of the great parts about the Virtual DOM,
is it's able to diff the before and

102
00:05:25.440 --> 00:05:31.000
after the description we used, rather than
actually mutating the dom every time.

103
00:05:31.000 --> 00:05:35.600
So when it gets this HTML from view,
it's gonna say, I see that we have

104
00:05:35.600 --> 00:05:38.860
had this as our previous example
of how the page should look.

105
00:05:38.860 --> 00:05:42.120
And then I see that based on
the new model we have a new one,

106
00:05:42.120 --> 00:05:44.170
a new description of how
the page should look.

107
00:05:44.170 --> 00:05:48.000
It can very quickly run through those and
just diff them and figure out, I see that.

108
00:05:48.000 --> 00:05:50.850
The only things that have
changed between these two are,

109
00:05:50.850 --> 00:05:54.380
one of these tags is selected whereas
previously a different one is selected,

110
00:05:54.380 --> 00:05:57.280
and also, some of the articles
in the feed have changed.

111
00:05:57.280 --> 00:06:01.340
And so, it will only make that minimal
set of actual updates the real DOM,

112
00:06:01.340 --> 00:06:04.540
necessary to make the screen
look the way that you want.

113
00:06:04.540 --> 00:06:06.040
So even though every time it goes through,

114
00:06:06.040 --> 00:06:09.380
it is building up a new description from
scratch, it's not actually having to do

115
00:06:09.380 --> 00:06:12.470
all that work every single
time the interaction happens.

116
00:06:12.470 --> 00:06:15.520
So that's why Elm is
able to be competitive in

117
00:06:15.520 --> 00:06:18.860
speed benchmarks to other libraries
that are not using virtual DOMs.

