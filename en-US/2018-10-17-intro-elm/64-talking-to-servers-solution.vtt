WEBVTT

1
00:00:00.000 --> 00:00:02.658
&gt;&gt; Speaker 1: Okay,
let's go through these solutions.

2
00:00:02.658 --> 00:00:08.405
So [COUGH] we have two
things to deal with here.

3
00:00:08.405 --> 00:00:13.258
The first is creating an HTTP
request value that represents

4
00:00:13.258 --> 00:00:15.305
a post to /api/users.

5
00:00:15.305 --> 00:00:20.871
When this succeeds, by the way,
let's go take a quick look,

6
00:00:20.871 --> 00:00:26.239
take off the optimize flag,
at what we're building up to.

7
00:00:26.239 --> 00:00:30.360
So we have once again broken
the register function.

8
00:00:30.360 --> 00:00:36.082
And now there's just a lot of breaking
stuff that used to work in this workshop.

9
00:00:36.082 --> 00:00:37.418
When I hit Sign up, nothing happens.

10
00:00:37.418 --> 00:00:39.738
I hammer on it all day and
there's no HTTP request.

11
00:00:39.738 --> 00:00:41.274
It's really annoying.

12
00:00:41.274 --> 00:00:45.757
And that's because fundamentally, this
command right here is not doing anything.

13
00:00:45.757 --> 00:00:49.967
So once we replace these things with
something that works, then actually,

14
00:00:49.967 --> 00:00:54.240
I can go back there and hammer on that
button and it'll hopefully sign me up and

15
00:00:54.240 --> 00:00:55.127
create a user.

16
00:00:57.368 --> 00:01:00.623
&gt;&gt; Speaker 1: Okay, so here's our request.

17
00:01:00.623 --> 00:01:03.707
So if we want to send
a POST request to this,

18
00:01:03.707 --> 00:01:08.012
we're going to need to use
this documentation right here.

19
00:01:08.012 --> 00:01:12.318
So POST takes a string for the URL,
so we can see that right there.

20
00:01:12.318 --> 00:01:14.591
Then it takes a JSON body.

21
00:01:14.591 --> 00:01:19.028
So we know the string that we want is

22
00:01:19.028 --> 00:01:24.082
gonna be /api/users, not /login.

23
00:01:24.082 --> 00:01:28.525
And we don't want debug.todo cuz that's
just gonna crash, so that's no good.

24
00:01:28.525 --> 00:01:33.903
What we want instead is Http.send.

25
00:01:33.903 --> 00:01:39.397
And the second argument is the JSON body.

26
00:01:39.397 --> 00:01:43.148
And we got one of those right up here,
that's requestBody.

27
00:01:45.803 --> 00:01:48.808
&gt;&gt; Speaker 1: Okay, and
what else does this thing expect?

28
00:01:48.808 --> 00:01:51.977
Then the final argument is
what's the decoder of a, and

29
00:01:51.977 --> 00:01:54.075
that'll give us back a request of a.

30
00:01:54.075 --> 00:01:57.224
So since we want a request that's
going to produce a viewer,

31
00:01:57.224 --> 00:02:00.126
we want to find a decoder viewer,
which conveniently,

32
00:02:00.126 --> 00:02:02.860
we've already got right
here in responseDecoder.

33
00:02:02.860 --> 00:02:07.856
So responseDecoder, okay.

34
00:02:07.856 --> 00:02:11.155
So at this point, I can pause and
just see if that compiles.

35
00:02:11.155 --> 00:02:15.527
It does not because I did something wrong.

36
00:02:15.527 --> 00:02:20.111
Yes, because I wrote Http.send
instead of Http.post.

37
00:02:20.111 --> 00:02:21.735
Very different functions those.

38
00:02:21.735 --> 00:02:25.282
Okay, much better,
compiled 2 modules, successful.

39
00:02:25.282 --> 00:02:27.943
Okay, so now we've got our request, and

40
00:02:27.943 --> 00:02:33.266
now we're gonna use Http.send to create
this command based on using the request,

41
00:02:33.266 --> 00:02:37.998
and also a message that can accept
results of both the two possibilities.

42
00:02:37.998 --> 00:02:43.350
Either the HTTP request failed or
that the HTTP request succeeded.

43
00:02:43.350 --> 00:02:48.418
So if I look at the docs for
send, we can see that it's first

44
00:02:48.418 --> 00:02:55.262
expecting a function that takes a result
error a, and then returns a message.

45
00:02:55.262 --> 00:02:58.816
Then it wants a request of a, and
it's gonna give back a command of message.

46
00:02:58.816 --> 00:03:01.209
Notice by the way the lowercase m here.

47
00:03:01.209 --> 00:03:02.540
This is a type variable.

48
00:03:02.540 --> 00:03:07.461
It's just we're choosing the type variable
name Msg to represent the fact that this

49
00:03:07.461 --> 00:03:08.578
is a message type.

50
00:03:08.578 --> 00:03:10.647
So what we want is a variant function.

51
00:03:10.647 --> 00:03:15.343
Basically, that's going to say,
given a result, I will give you back

52
00:03:15.343 --> 00:03:19.507
a message that encapsulates that result or
wraps that result.

53
00:03:19.507 --> 00:03:23.030
Okay, there's a hint as to
which message we should use.

54
00:03:23.030 --> 00:03:23.556
Look at that one.

55
00:03:23.556 --> 00:03:27.330
I wonder which one has to do with HTTP.

56
00:03:27.330 --> 00:03:30.289
It's called CompletedRegister, and
it's got exactly what we want.

57
00:03:30.289 --> 00:03:35.021
It's either an Http.Error or
it's a viewer value.

58
00:03:35.021 --> 00:03:40.507
All right, so based on that,
we're gonna say Http.send.

59
00:03:40.507 --> 00:03:44.060
And that was the first argument
to Http.send was that,

60
00:03:44.060 --> 00:03:47.016
that function from
Result Error a to message.

61
00:03:47.016 --> 00:03:53.082
And a in this case is based on the type
parameter of the request, which is Viewer.

62
00:03:53.082 --> 00:03:57.357
So since CompletedRegister takes Result
Error Viewer, that's exactly what we want.

63
00:03:57.357 --> 00:04:00.567
So we'll just pass that right in,
CompletedRegister.

64
00:04:00.567 --> 00:04:05.512
And finally, it wanted the request itself.

65
00:04:05.512 --> 00:04:09.163
So we can give it that, which is request.

66
00:04:09.163 --> 00:04:12.411
And we're done.

67
00:04:12.411 --> 00:04:15.409
Let's confirm that that compiles,
which it does.

68
00:04:15.409 --> 00:04:21.317
Also, if we wanted to,
we could do this in the pipeline style,

69
00:04:21.317 --> 00:04:25.784
like we showed on the slides and
do it like this.

70
00:04:28.319 --> 00:04:29.279
&gt;&gt; Speaker 1: So this would also work.

71
00:04:29.279 --> 00:04:33.959
Do an Http.post to /api/users
with this body and this decoder.

72
00:04:33.959 --> 00:04:36.866
And then send the result
using that message.

73
00:04:36.866 --> 00:04:38.400
Now we'll also compile.

74
00:04:38.400 --> 00:04:40.757
Okay, it compiled, but
did it actually work?

75
00:04:40.757 --> 00:04:41.909
Let's find out.

76
00:04:41.909 --> 00:04:48.173
Now when I hammer on this,
&gt;&gt; Speaker 1: Hey,

77
00:04:48.173 --> 00:04:52.237
success, we now are able to sign
up successfully, fantastic.

78
00:04:52.237 --> 00:04:54.345
&gt;&gt; Speaker 2: Do you
have a set guideline for

79
00:04:54.345 --> 00:04:59.069
where you're putting decoders
versus your API requests versus,

80
00:04:59.069 --> 00:05:04.567
is it common to see it in an update, an
all in one and a decoder somewhere else?

81
00:05:04.567 --> 00:05:05.528
&gt;&gt; Speaker 1: Great question.

82
00:05:05.528 --> 00:05:07.974
The question is organizationally speaking,

83
00:05:07.974 --> 00:05:11.052
is it common to put your decoder
right there in the update?

84
00:05:11.052 --> 00:05:14.180
No, I would say it's more common
to put it with the data structure.

85
00:05:14.180 --> 00:05:19.531
So it's a lot more common to have, for
example, if we look in, so Viewer, there

86
00:05:19.531 --> 00:05:25.237
actually is a module called Viewer, which
holds all of the information for viewers.

87
00:05:25.237 --> 00:05:29.227
As it happens, there actually is a Viewer
decoder in here, which we didn't use for

88
00:05:29.227 --> 00:05:33.046
this exercise directly, because I didn't
want you to have to go hopping around

89
00:05:33.046 --> 00:05:34.944
through different modules to find it.

90
00:05:34.944 --> 00:05:37.081
But fundamentally,
that's a more typical pattern.

91
00:05:37.081 --> 00:05:40.630
So usually, you'll see something
like this, like Viewer.decoder,

92
00:05:40.630 --> 00:05:44.132
which means go to the Viewer module,
get the decoder value out of that.

93
00:05:44.132 --> 00:05:47.447
And that's usually where
you'll store these things.

