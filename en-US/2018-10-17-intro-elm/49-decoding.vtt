WEBVTT

1
00:00:00.000 --> 00:00:01.475
&gt;&gt; Richard Feldman: So
we're gonna talk about a few things here.

2
00:00:01.475 --> 00:00:08.267
Decoding, result, pipeline decoding and
optional and nullable.

3
00:00:08.267 --> 00:00:12.178
So each of these is going to build on the
stuff we learned in the previous section.

4
00:00:12.178 --> 00:00:13.719
Let's start with decoding.

5
00:00:13.719 --> 00:00:17.449
So in JavaScript there's
a function called parseInt.

6
00:00:17.449 --> 00:00:20.293
I can say parseInt "42",
that's a string, and

7
00:00:20.293 --> 00:00:23.346
JavaScript's gonna turn
that into an integer, 42.

8
00:00:23.346 --> 00:00:24.657
That is, if it can.

9
00:00:24.657 --> 00:00:27.345
Not all strings happen to be integers.

10
00:00:27.345 --> 00:00:32.140
So, for example, if I parseInt "hi",
JavaScript gives us back Not-a-Number.

11
00:00:32.140 --> 00:00:34.921
Now, if you've ever dealt
with Not-a-Number, and

12
00:00:34.921 --> 00:00:39.524
dealing with the bugs that can result from
Not-a-Number, it's really not a good time.

13
00:00:39.524 --> 00:00:42.884
This thing propagates throughout
all of your operations.

14
00:00:42.884 --> 00:00:46.441
Anytime you do arithmetic on Not-a-Number
it gives you back another Not-a-Number.

15
00:00:46.441 --> 00:00:47.108
So ultimately,

16
00:00:47.108 --> 00:00:50.439
it can sort of snake its way through your
program until figuring out the root cause,

17
00:00:50.439 --> 00:00:53.501
the ultimate culprit of why this
thing's Not-a-Number can be a big pain.

18
00:00:53.501 --> 00:00:56.307
So Elm doesn't do it like this.

19
00:00:56.307 --> 00:00:59.501
Elm does not say,
I'm gonna parseInt a string and

20
00:00:59.501 --> 00:01:04.079
then it'll give me back an integer,
possibly, which is not a number.

21
00:01:04.079 --> 00:01:07.746
Elm does it like this,
case String.toInt str of, and

22
00:01:07.746 --> 00:01:11.908
then it gives us back a maybe,
like we saw in the last section.

23
00:01:11.908 --> 00:01:16.124
So it'll say either, I got back just
a number, in which case it was successful,

24
00:01:16.124 --> 00:01:20.104
it was able to parse that string as
an integer, it found an integer in there.

25
00:01:20.104 --> 00:01:22.058
And it's going to give it to me.

26
00:01:22.058 --> 00:01:26.958
Or it's gonna say nothing and say,
you know what, I couldn't actually

27
00:01:26.958 --> 00:01:31.232
find an integer in that string,
so handle that some other way.

28
00:01:31.232 --> 00:01:34.410
Okay, String.toInt "42" is
the exact syntax we would use.

29
00:01:34.410 --> 00:01:36.385
It's not called parsint.

30
00:01:36.385 --> 00:01:38.616
It's called String.toInt "42".

31
00:01:38.616 --> 00:01:40.845
That will give us back just 42.

32
00:01:40.845 --> 00:01:43.549
Strong.toInt "hi" will
give us back nothing.

33
00:01:45.647 --> 00:01:49.018
&gt;&gt; Richard Feldman: So the same way
that we saw earlier, maybe has this type

34
00:01:49.018 --> 00:01:53.871
variable, indicating that it can be
used with a variety of different things.

35
00:01:53.871 --> 00:01:56.506
In the previous section,
we saw it being used for

36
00:01:56.506 --> 00:01:58.509
string with the avatar URL example.

37
00:01:58.509 --> 00:02:00.565
Here we see it being used with numbers.

38
00:02:00.565 --> 00:02:04.213
There's another possibility here,

39
00:02:04.213 --> 00:02:09.120
which is [COUGH] using JSON
decoders to decode this.

40
00:02:09.120 --> 00:02:11.134
This will essentially do the same thing.

41
00:02:11.134 --> 00:02:14.989
So JSON decoders are a more
general purpose,

42
00:02:14.989 --> 00:02:18.650
more flexible version of String.toInt.

43
00:02:18.650 --> 00:02:22.913
It's basically saying, I've got some
string, and inside that string,

44
00:02:22.913 --> 00:02:24.819
I expect to see some JSON values.

45
00:02:24.819 --> 00:02:27.821
One possible JSON value is an int,
another is a bool,

46
00:02:27.821 --> 00:02:30.304
another is an object, another is an array.

47
00:02:30.304 --> 00:02:34.678
There's a whole bunch of different
types of things that could be

48
00:02:34.678 --> 00:02:36.218
inside a JSON string.

49
00:02:36.218 --> 00:02:39.674
And when we ask Elm to decode that,
we're saying, hey,

50
00:02:39.674 --> 00:02:42.197
I want you to turn this
into some Elm type.

51
00:02:42.197 --> 00:02:44.834
That's always an operation
that can't fail.

52
00:02:44.834 --> 00:02:49.325
Anything we give it we say, hey,
I want you to decode this string, and

53
00:02:49.325 --> 00:02:51.394
I want it to decode it has an int.

54
00:02:51.394 --> 00:02:55.865
That's effectively the same thing
as what we did with String.toInt.

55
00:02:55.865 --> 00:03:01.247
We're effectively saying, I think that
there is an int inside this JSON string.

56
00:03:01.247 --> 00:03:07.144
If there is, then give me that int,
otherwise tell me that it didn't work out.

57
00:03:07.144 --> 00:03:11.384
Now the way that decodeString works
is it doesn't quite return a maybe.

58
00:03:11.384 --> 00:03:14.548
It returned something called a result.

59
00:03:14.548 --> 00:03:18.900
And result has two variants,
just like maybe, one is called Ok,

60
00:03:18.900 --> 00:03:21.844
which sort of corresponds
to just in maybe.

61
00:03:21.844 --> 00:03:23.040
They essentially have the same purpose.

62
00:03:23.040 --> 00:03:27.091
So if this works, then it's like,
okay, I said decodeString,

63
00:03:27.091 --> 00:03:31.008
I think that there is an int inside there,
here's the string.

64
00:03:31.008 --> 00:03:34.959
If that succeeded, give me that int,
in which case is great.

65
00:03:34.959 --> 00:03:37.274
Here you are, you now have that.

66
00:03:37.274 --> 00:03:39.066
The other branch is called Err.

67
00:03:39.066 --> 00:03:42.454
So instead of just and
nothing, we have Ok and Err.

68
00:03:42.454 --> 00:03:45.521
And the only difference between maybe and

69
00:03:45.521 --> 00:03:51.312
result is that in the Err branch we get
some additional info on what went wrong.

70
00:03:51.312 --> 00:03:52.967
So nothing essentially says hey,
I got nothing.

71
00:03:52.967 --> 00:03:54.958
I don't have anything for you.

72
00:03:54.958 --> 00:03:58.240
It's up to you to figure out
how to handle this case.

73
00:03:58.240 --> 00:03:58.939
Err says,

74
00:03:58.939 --> 00:04:03.928
it didn't work, but I do have some
information that might be useful to you.

75
00:04:03.928 --> 00:04:07.845
So in this case, it's going to give us
an error that says something like, hey,

76
00:04:07.845 --> 00:04:12.119
I was looking for an integer, and I didn't
find one, instead I found the string 42.

77
00:04:12.119 --> 00:04:15.228
Now in a particular case
of decoding a JSON integer,

78
00:04:15.228 --> 00:04:18.774
this is not going to be terribly
useful error information.

79
00:04:18.774 --> 00:04:22.480
You can imagine if you have a pretty
substantial amount of JSON with some

80
00:04:22.480 --> 00:04:24.519
nested objects, some nested arrays,

81
00:04:24.519 --> 00:04:27.265
you might want some
additional error information.

82
00:04:27.265 --> 00:04:30.720
Saying, hey, when I was trying to parse
this JSON into the shape that you said it

83
00:04:30.720 --> 00:04:32.695
was going to be in,
here's what went wrong.

84
00:04:32.695 --> 00:04:35.714
Sort of like a compiler error, except for

85
00:04:35.714 --> 00:04:40.125
runtime, and decoding JSON
instead of compiling Elm code.

