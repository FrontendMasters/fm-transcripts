WEBVTT

1
00:00:00.000 --> 00:00:01.753
&gt;&gt; Richard Feldman: Let's move
on to talking about functions.

2
00:00:01.753 --> 00:00:04.603
To talk about functions, we're gonna
start with a user interface example.

3
00:00:04.603 --> 00:00:08.131
We're gonna have this hypothetical user
interface, and we're gonna solve a very,

4
00:00:08.131 --> 00:00:10.436
very small problem in that
interface using a function.

5
00:00:10.436 --> 00:00:12.441
Okay, this is going to be a leaf search.

6
00:00:12.441 --> 00:00:15.471
We have somehow made an application
where the user wants to search for

7
00:00:15.471 --> 00:00:16.733
different types of leaves.

8
00:00:16.733 --> 00:00:19.815
So here's an example of
how that UI might look.

9
00:00:19.815 --> 00:00:22.978
It would say, your search returned
3 leaves: Elm leaf, Maple leaf,

10
00:00:22.978 --> 00:00:23.620
and Oak leaf.

11
00:00:23.620 --> 00:00:26.897
And then let's say maybe your
search only returned two leaves,

12
00:00:26.897 --> 00:00:28.664
that says Elm leaf and Maple leaf.

13
00:00:28.664 --> 00:00:30.773
And then it only returned one leaf but

14
00:00:30.773 --> 00:00:35.205
we have a little bit of a bug here where
it says your search returned 1 leaves.

15
00:00:35.205 --> 00:00:38.201
That looks kind of amateurish, that's
not right, it should say 1 leaf, right?

16
00:00:38.201 --> 00:00:43.306
It should be 2 leaves, 3 leaves but
1 leaf so how can we fix this bug?

17
00:00:43.306 --> 00:00:46.036
Let's just write a little
function that will fix that.

18
00:00:46.036 --> 00:00:48.555
So I'm gonna start off by writing
this function in JavaScript, and

19
00:00:48.555 --> 00:00:50.600
then I'm gonna translate it
to to the elm equivalent.

20
00:00:50.600 --> 00:00:54.974
So in JavaScript in ES6 syntax I might say
let pluralize equals singular, plural,

21
00:00:54.974 --> 00:00:58.186
quantity, these are the three
arguments that it would take.

22
00:00:58.186 --> 00:01:01.292
So that is the singular form which
is to say leaf, the plural form,

23
00:01:01.292 --> 00:01:04.896
which is leaves, then the quantity
which might be one, two, three, five,

24
00:01:04.896 --> 00:01:06.406
however many leaves there are.

25
00:01:06.406 --> 00:01:11.348
Then I write a little conditional here,
if (quantity === 1), return singular,

26
00:01:11.348 --> 00:01:12.562
else return plural.

27
00:01:12.562 --> 00:01:14.662
This is our whole function,
that's all that it's going to do.

28
00:01:14.662 --> 00:01:17.411
That's it's entire job
is to fix this one bug,

29
00:01:17.411 --> 00:01:20.936
to handle the edge case of what
if there's exactly one leaf.

30
00:01:20.936 --> 00:01:25.036
So we could write
console.log(pluralize("leaf", "leaves",

31
00:01:25.036 --> 00:01:29.269
1)); and that would return leaf,
because it sees that quantity is 1,

32
00:01:29.269 --> 00:01:31.103
the quantity we passed in is 1.

33
00:01:31.103 --> 00:01:33.497
So it's going to return the singular form,
which is leaf.

34
00:01:33.497 --> 00:01:36.341
If we pass in 3 instead and
everything else is the same,

35
00:01:36.341 --> 00:01:38.471
then it's gonna return leaves instead.

36
00:01:38.471 --> 00:01:41.910
Okay so if we're using Babel,
then Babel is going to say,

37
00:01:41.910 --> 00:01:45.012
okay this is a perfectly
fine JavaScript function.

38
00:01:45.012 --> 00:01:47.412
However older browsers don't
know about all these stuff,

39
00:01:47.412 --> 00:01:50.251
they don't know about let,
they don't know about error functions.

40
00:01:50.251 --> 00:01:54.836
So we're going to actually take this
code and compile it into dissimilar,

41
00:01:54.836 --> 00:01:58.420
those perhaps less ergonomically
nice JavaScript code.

42
00:01:58.420 --> 00:02:00.017
And so it's gonna use var instead of let,

43
00:02:00.017 --> 00:02:02.954
it's gonna write out the word function
instead of using an arrow function.

44
00:02:02.954 --> 00:02:05.891
And, essentially,
this is all the browser ever sees.

45
00:02:05.891 --> 00:02:08.800
So the browser has no idea that the other
version of the code ever existed.

46
00:02:08.800 --> 00:02:11.100
From its perspective,
you use var and function,

47
00:02:11.100 --> 00:02:12.703
that's all it knows that you did.

48
00:02:12.703 --> 00:02:15.696
So the browser understands this,
and is able to execute it,

49
00:02:15.696 --> 00:02:18.588
even though this is not literally
the code that you wrote.

50
00:02:18.588 --> 00:02:20.432
And so we're gonna do essentially
the same thing with Elm.

51
00:02:20.432 --> 00:02:23.400
So here is the pluralized function in Elm.

52
00:02:23.400 --> 00:02:26.334
There's some differences syntactically
between the Elm version and

53
00:02:26.334 --> 00:02:27.432
the JavaScript version.

54
00:02:27.432 --> 00:02:31.204
But fundamentally, the Elm compiler is
going to do the same thing that Bable did,

55
00:02:31.204 --> 00:02:33.240
it's going to compile this to JavaScript.

56
00:02:33.240 --> 00:02:36.096
And all the browser's ever gonna
see is the compile JavaScript.

57
00:02:36.096 --> 00:02:38.580
The browser has no idea that
this code ever existed.

58
00:02:38.580 --> 00:02:42.508
So some of the syntactic differences
you can see the arrangements are real

59
00:02:42.508 --> 00:02:45.754
separated by whitespace there
is no commas in between them.

60
00:02:45.754 --> 00:02:50.733
They also go the left of the equal sign
worth knowing as opposed on the right

61
00:02:50.733 --> 00:02:51.951
that is going to.

62
00:02:51.951 --> 00:02:56.176
There are no parentheses
around the conditionals.

63
00:02:56.176 --> 00:03:00.585
So it says if quantity == 1 then,
and we move on from there.

64
00:03:00.585 --> 00:03:03.904
Parentheses, if you want you can put
them there, but they're optional, so

65
00:03:03.904 --> 00:03:05.192
they typically are not used.

66
00:03:05.192 --> 00:03:10.743
Also note that, we have the then
keyword instead of curly braces.

67
00:03:10.743 --> 00:03:15.706
So this is sort of just a different
delimiter for saying where the if ends,

68
00:03:15.706 --> 00:03:20.525
sorry, the if conditional ends and
the resulting expression begins.

69
00:03:20.525 --> 00:03:23.863
You also notice that in Elm, we use
double equals instead of triple equals.

70
00:03:23.863 --> 00:03:24.569
So in JavaScript,

71
00:03:24.569 --> 00:03:27.272
it's generally considered best
practice to always use triple equals.

72
00:03:27.272 --> 00:03:29.771
And unless you really really
know what you're doing and

73
00:03:29.771 --> 00:03:32.867
are doing something extremely specific,
not to use double equals.

74
00:03:32.867 --> 00:03:34.273
But in Elm, there is no triple equals.

75
00:03:34.273 --> 00:03:36.439
There's only one thing called,
and it's double equals, and

76
00:03:36.439 --> 00:03:37.651
it just works the way that you want.

77
00:03:37.651 --> 00:03:41.822
So you're free to use only double equals
in Elm, there is no triple equals.

78
00:03:41.822 --> 00:03:44.670
Double equals is just
the thing to reach for.

79
00:03:44.670 --> 00:03:48.536
Also worth noting that in Elm,
else is required.

80
00:03:48.536 --> 00:03:51.159
If you have an if,
there has to be an else that goes with it.

81
00:03:51.159 --> 00:03:56.347
And the reason for this is that in Elm,
if is actually an expression.

82
00:03:56.347 --> 00:03:59.234
So I can write this,
this is perfectly valid Elm code.

83
00:03:59.234 --> 00:04:04.594
I can actually assign a value to
the result of an if expression in Elm.

84
00:04:04.594 --> 00:04:09.299
So it actually, Elm if expressions
are more similar to JavaScript ternary

85
00:04:09.299 --> 00:04:12.818
expressions, it's just they
have different syntax.

86
00:04:12.818 --> 00:04:15.219
So in JavaScript you have
the question mark and the colon,

87
00:04:15.219 --> 00:04:16.349
in Elm you have if and then.

88
00:04:16.349 --> 00:04:18.782
But much like in JavaScript,

89
00:04:18.782 --> 00:04:22.666
you do have the notion of being
able to assign them to values.

90
00:04:22.666 --> 00:04:27.271
And you also have the notion of needing
to have both the if it's true and

91
00:04:27.271 --> 00:04:31.037
also the if it's false
branches explicitly specified.

92
00:04:31.037 --> 00:04:33.588
So in a in JavaScript,
you have to specify both.

93
00:04:33.588 --> 00:04:36.840
In an Elm if expression,
you also have to specify both.

94
00:04:36.840 --> 00:04:41.286
This is an important distinction because
there is no if statement in Elm.

95
00:04:41.286 --> 00:04:44.143
There's no way to avoid
specifying both of those.

96
00:04:44.143 --> 00:04:46.612
And that's because it gets ultimately
assigned to an expression.

97
00:04:46.612 --> 00:04:50.796
So if it didn't force you to specify both,
you'd be like, okay,

98
00:04:50.796 --> 00:04:55.610
what actually is x if there's no else and
quantity doesn't happen to be 1.

99
00:04:55.610 --> 00:04:59.044
So essentially both of
these are expressions.

