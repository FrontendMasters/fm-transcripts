WEBVTT

1
00:00:00.325 --> 00:00:04.773
&gt;&gt; Richard Feldman: Now, what we really
want though is not so much this string

2
00:00:04.773 --> 00:00:09.975
because our feed is not a feed of string,
it's a feed of articles.

3
00:00:09.975 --> 00:00:14.410
So what we actually want is we
want something that will end up

4
00:00:14.410 --> 00:00:17.166
with satisfying this variant type.

5
00:00:17.166 --> 00:00:20.269
We want completed load feed to be,
yeah we want to be a result,

6
00:00:20.269 --> 00:00:21.955
cuz loading the feed could fail.

7
00:00:21.955 --> 00:00:25.532
It's gonna have an HTTP error as it's
error type, that still the same.

8
00:00:25.532 --> 00:00:28.623
But instead of a string here,
what we want is a list of articles.

9
00:00:28.623 --> 00:00:31.523
So if it's succeeds,
we want it to immediately gives us back,

10
00:00:31.523 --> 00:00:34.827
here's our list of articles, so
you can go and render them right away.

11
00:00:34.827 --> 00:00:39.747
So Http.getString takes url, but
on success only gives us raw string,

12
00:00:39.747 --> 00:00:41.610
which is not quite we want.

13
00:00:41.610 --> 00:00:44.997
Http.get is the more flexible version.

14
00:00:44.997 --> 00:00:49.210
It takes an extra argument which
is a decoder, a JSON decoder.

15
00:00:49.210 --> 00:00:54.614
And we do that, success gives us back
whatever that decoder's type parameter is.

16
00:00:54.614 --> 00:00:59.615
So in this case we have articlesDecoder,
which is a decoder of lists or articles.

17
00:00:59.615 --> 00:01:02.477
And so on success,
that's exactly what we're gonna get back.

18
00:01:02.477 --> 00:01:04.705
A list of articles.

19
00:01:04.705 --> 00:01:06.876
Everything else about it is the same.

20
00:01:06.876 --> 00:01:10.252
One of the things that can
happen in this error case,

21
00:01:10.252 --> 00:01:14.315
is we get what's known as a bad
payload error, which is to say,

22
00:01:14.315 --> 00:01:17.556
Http.get gave it a decoder and
decoding failed.

23
00:01:17.556 --> 00:01:21.237
So that's one of the possible errors that
we will have to handle when we're dealing

24
00:01:21.237 --> 00:01:21.771
with this.

25
00:01:21.771 --> 00:01:25.016
GetString never actually produces that
error because that's always like, wow,

26
00:01:25.016 --> 00:01:26.880
the payload is the string,
I think it's fine.

27
00:01:26.880 --> 00:01:29.360
Looks good.

28
00:01:29.360 --> 00:01:33.064
Worth noting by the way, that you can
implement get in terms of GetString.

29
00:01:33.064 --> 00:01:35.884
Because essentially GetString's
purpose is to go get a string and

30
00:01:35.884 --> 00:01:38.566
then take that string and
then run the given JSON decoder on it.

31
00:01:38.566 --> 00:01:41.514
And then translate that into
one of these error types.

32
00:01:41.514 --> 00:01:44.700
So, even though this is a little
bit more convenient to use,

33
00:01:44.700 --> 00:01:48.080
it really is just ultimately
a convenience on top of GetString.

