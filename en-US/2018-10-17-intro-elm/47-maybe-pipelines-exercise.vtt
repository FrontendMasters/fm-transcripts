WEBVTT

1
00:00:00.000 --> 00:00:02.551
&gt;&gt; Richard Feldman: That's bring
us to the Exercise for Part 6,

2
00:00:02.551 --> 00:00:05.045
this is going to be
about editing articles.

3
00:00:05.045 --> 00:00:08.979
So we've got our whole big
application once again like before.

4
00:00:08.979 --> 00:00:13.397
We're gonna be building it the same
way as before, same command.

5
00:00:13.397 --> 00:00:18.032
The only difference is that this time
we're going to be working on to-dos

6
00:00:18.032 --> 00:00:19.910
across two different files.

7
00:00:19.910 --> 00:00:23.409
So one is source/avatar.elm,
the other is page article editor.

8
00:00:23.409 --> 00:00:28.188
We're recommended to start
with the avatar one,

9
00:00:28.188 --> 00:00:31.042
so let's take a look at that.

10
00:00:31.042 --> 00:00:35.905
So to see the symptoms
of what's going on here,

11
00:00:35.905 --> 00:00:39.561
we're going to build this, okay.

12
00:00:41.751 --> 00:00:45.579
&gt;&gt; Richard Feldman: And when I refresh
the page we're gonna see the results of

13
00:00:45.579 --> 00:00:49.183
having built this with
Part Six instead of Part Five.

14
00:00:49.183 --> 00:00:52.016
So in Part five everything
looks all nice on this field,

15
00:00:52.016 --> 00:00:55.106
we've got this little thumbs
up Emoji person going on here.

16
00:00:55.106 --> 00:00:59.676
In Part six though these
are broken image links, uh-oh, so

17
00:00:59.676 --> 00:01:04.432
the reason for that is that we have
a bug that we are going to fix.

18
00:01:04.432 --> 00:01:07.045
So resolveavatarUrl.

19
00:01:07.045 --> 00:01:12.971
This is a function that takes a may be
String and then converts into a String.

20
00:01:12.971 --> 00:01:18.278
So essentially, some users have specified
a custom avatar image for their profile.

21
00:01:18.278 --> 00:01:21.764
They've uploaded a photo, or
they have links to a photo, but

22
00:01:21.764 --> 00:01:26.069
quite a lot of users haven't,
they're just working on the default photo.

23
00:01:26.069 --> 00:01:29.559
So the purpose of this function
is to resolve that, it's to say,

24
00:01:29.559 --> 00:01:32.414
either we want to use the photo
that you specified, or

25
00:01:32.414 --> 00:01:36.298
if you didn't specify a photo,
we're gonna fall back on a default one.

26
00:01:36.298 --> 00:01:40.721
Which the real world example app calls
smiley-cyrus which looks like this.

27
00:01:40.721 --> 00:01:46.245
So this is our default avatar which
we're gonna use as our fallback and

28
00:01:46.245 --> 00:01:49.343
that link is right here in the comment.

29
00:01:49.343 --> 00:01:52.170
And we're only going to use that if
they didn't provide one in the maybe.

30
00:01:52.170 --> 00:01:54.798
So this maybe is going
to have either just,

31
00:01:54.798 --> 00:01:59.991
in which case it's going to give us here's
the photo to use, gonna return that URL.

32
00:01:59.991 --> 00:02:05.170
Or if it was nothing, we're gonna fall
back on our good friend smiley-cyrus here.

33
00:02:05.170 --> 00:02:07.939
Okay, so
that's the first issue we need to resolve.

34
00:02:07.939 --> 00:02:12.304
The second one, if we go back to
readme said, src/Page/Article/ Editor.

35
00:02:14.028 --> 00:02:18.238
&gt;&gt; Richard Feldman: Now inside of here,
we're going to have a to do,

36
00:02:18.238 --> 00:02:20.921
which talks about pipelines.

37
00:02:20.921 --> 00:02:26.349
So essentially this is a bug where
when we are editing an article.

38
00:02:26.349 --> 00:02:28.537
It's a pretty wierd edge case,

39
00:02:28.537 --> 00:02:32.600
which is that when we are putting
the tags into the article.

40
00:02:32.600 --> 00:02:37.935
Sometimes they don't work if they
have multiple spaces between them.

41
00:02:37.935 --> 00:02:40.599
So if I put in tag1 tag2 tag3,
that'll work.

42
00:02:40.599 --> 00:02:45.424
But if I put too many spaces in
between them, it doesn't work,

43
00:02:45.424 --> 00:02:49.624
it no longer edits the tags properly,
we get an error.

44
00:02:49.624 --> 00:02:52.900
So, we are gonna fix this bug by
essentially normalizing these tags and

45
00:02:52.900 --> 00:02:54.713
stripping out this extra white space.

46
00:02:54.713 --> 00:02:56.430
Because really that shouldn't be an error,

47
00:02:56.430 --> 00:02:58.155
that's just somebody
put in an extra space.

48
00:02:58.155 --> 00:03:01.916
It's pretty clear what they meant,
we're just going to fix that for them.

49
00:03:01.916 --> 00:03:05.857
So, to do this, we need to use list dot
filter and add that on top of this very

50
00:03:05.857 --> 00:03:08.560
small pipeline that we
already have going on here.

51
00:03:08.560 --> 00:03:10.220
So, we're gonna add
an extra thing down here.

52
00:03:10.220 --> 00:03:13.544
That's going to do some filtering on top
of the trimming that we've already done.

53
00:03:13.544 --> 00:03:16.947
So the first thing we do is we
split the string around spaces,

54
00:03:16.947 --> 00:03:19.565
then we trim each of
the elements inside that.

55
00:03:19.565 --> 00:03:23.661
And now finally we're going to use
the filter to strip out the empty ones and

56
00:03:23.661 --> 00:03:25.234
drop them from the tag list.

57
00:03:25.234 --> 00:03:26.494
And now we fix the bug.

