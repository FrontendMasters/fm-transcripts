WEBVTT

1
00:00:00.035 --> 00:00:01.800
&gt;&gt; Richard Feldman: All right,
so first thing we're gonna do,

2
00:00:01.800 --> 00:00:04.385
is we're gonna use list.map and
view tag, to render the tags.

3
00:00:04.385 --> 00:00:06.204
So we've got tags coming
in here as an argument.

4
00:00:06.204 --> 00:00:08.627
That's gonna be a list of string, and

5
00:00:08.627 --> 00:00:12.503
we're wanna replace this thing
with actual rendered tags.

6
00:00:12.503 --> 00:00:13.191
So I'm gonna do that.

7
00:00:13.191 --> 00:00:16.953
I'm gonna call this .map and
then list.map, the first argument that it

8
00:00:16.953 --> 00:00:19.814
accepts is a function to run
on each element of the list.

9
00:00:19.814 --> 00:00:22.391
So we're gonna call a viewTag, here.

10
00:00:22.391 --> 00:00:24.996
That's gonna be the function
that we pass into the stock map.

11
00:00:24.996 --> 00:00:27.843
And the other argument,
is going to be the actual list itself,

12
00:00:27.843 --> 00:00:29.572
which in our case is just called tags.

13
00:00:29.572 --> 00:00:32.904
So this is going to run through
those tags, and then on each one,

14
00:00:32.904 --> 00:00:34.461
it's going to call view tag.

15
00:00:34.461 --> 00:00:38.387
And it's going to transform that list,
such that the new list, has the result of

16
00:00:38.387 --> 00:00:41.757
calling view tag on each of those tags,
as the actual rendered ones.

17
00:00:41.757 --> 00:00:45.370
Which means that,
it's really important that rendered tags.

18
00:00:45.370 --> 00:00:49.496
Because, It's being used here
as a list of virtual dom nodes.

19
00:00:49.496 --> 00:00:55.268
That it actually, returned a virtual
dom node in the view tag function.

20
00:00:55.268 --> 00:00:57.711
So this should return a single
one which it currently does.

21
00:00:57.711 --> 00:01:00.521
It just returns an empty button,
which is pretty boring.

22
00:01:00.521 --> 00:01:03.703
But we wanted to render a more
interesting button like this.

23
00:01:03.703 --> 00:01:09.207
So, let's call button,
passing again a class and

24
00:01:09.207 --> 00:01:14.719
that's gonna be just the one
attributed in there.

25
00:01:14.719 --> 00:01:17.392
And then here,
we wanna put the actual tag name.

26
00:01:17.392 --> 00:01:21.035
Which like we did before,
is gonna be text tagName.

27
00:01:21.035 --> 00:01:23.210
So, tagName is coming in as a string.

28
00:01:23.210 --> 00:01:25.520
Now we wanna turn that into a dome node,
a text node, so

29
00:01:25.520 --> 00:01:26.893
we're gonna call it text on it.

30
00:01:26.893 --> 00:01:30.651
Okay, So now we have viewTag done,
we have viewTags done.

31
00:01:30.651 --> 00:01:34.791
The last step, is that in order to
actually make them get used, we need

32
00:01:34.791 --> 00:01:39.653
to call viewTags, passing the actual tags
instead of this empty list right here.

33
00:01:39.653 --> 00:01:43.909
So we have tags defined up here in
this let expression inside main,

34
00:01:43.909 --> 00:01:45.963
so all we have to do is save tags.

35
00:01:45.963 --> 00:01:47.146
There we go.

36
00:01:47.146 --> 00:01:49.978
By the way, you saw that that code
jumped up there a little bit,

37
00:01:49.978 --> 00:01:53.464
that's elm-format at work, I have
elm-format configured to run on save.

38
00:01:53.464 --> 00:01:56.861
So, if I mess all these things up and
add a bunch of extra white space, and

39
00:01:56.861 --> 00:02:00.509
nonsense like that, every time I save it,
it all just snaps back into place.

40
00:02:00.509 --> 00:02:05.182
So highly recommend using elm-format and
setting it to format on save,

41
00:02:05.182 --> 00:02:06.796
makes life really nice.

42
00:02:06.796 --> 00:02:10.781
All right, let's recompile this,
and see what it looks like.

43
00:02:10.781 --> 00:02:13.042
Bam, now we have some tags.

44
00:02:13.042 --> 00:02:15.757
Excellent.

