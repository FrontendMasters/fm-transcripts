WEBVTT

1
00:00:00.000 --> 00:00:03.305
&gt;&gt; Richard Feldman: Okay, so here's
our complete pluralized function and

2
00:00:03.305 --> 00:00:06.960
the way that we would actually
use this in an Elm application,

3
00:00:06.960 --> 00:00:10.914
instead of console.log,
we would probably render it like this.

4
00:00:10.914 --> 00:00:12.750
We'd say main = text.

5
00:00:12.750 --> 00:00:15.811
(pluralize "leaf" "leaves" 1).

6
00:00:15.811 --> 00:00:19.516
And so here you can see, another
difference between Elm and JavaScript, and

7
00:00:19.516 --> 00:00:22.601
the way that pluralize is being
called a syntactic difference.

8
00:00:22.601 --> 00:00:27.022
So this is a function call to
pluralize passing three arguments.

9
00:00:27.022 --> 00:00:28.340
Leaf, leaves, and 1.

10
00:00:28.340 --> 00:00:32.569
Notice that there's again, no commas,
and where the parentheses are.

11
00:00:32.569 --> 00:00:35.457
This is a common thing to mess up
when you're just getting into Elm,

12
00:00:35.457 --> 00:00:38.967
because the parentheses go in a different
place in Elm than they do in JavaScript.

13
00:00:38.967 --> 00:00:42.376
So in Elm,
functions are called by using whitespace.

14
00:00:42.376 --> 00:00:45.631
So just the fact that I have pluralize
followed by some whitespace followed by

15
00:00:45.631 --> 00:00:47.600
the arguments means I'm calling pluralize.

16
00:00:47.600 --> 00:00:52.241
The purpose of this parenthesis
here is to ambiguate between

17
00:00:52.241 --> 00:00:57.067
this nested function call and
the outer function call of test.

18
00:00:57.067 --> 00:00:59.756
So this right here,
is a function call to text,

19
00:00:59.756 --> 00:01:02.651
a function needs test,
passing one argument, and

20
00:01:02.651 --> 00:01:07.320
that one argument is a result of calling
pluralize passing leaf, leaves and one.

21
00:01:07.320 --> 00:01:09.530
If we did not have the parenthesis there,

22
00:01:09.530 --> 00:01:12.889
this would be a function called
to text passing for arguments.

23
00:01:12.889 --> 00:01:17.186
The first argument being the pluralized
function itself, then leaf, leaves and 1.

24
00:01:17.186 --> 00:01:18.280
So that's the difference.

25
00:01:18.280 --> 00:01:21.018
The parentheses here essentially work
the same way that they do in math.

26
00:01:21.018 --> 00:01:24.343
So sort of disambiguate
between nested expressions.

27
00:01:24.343 --> 00:01:28.336
So we don't have parentheses sort of
touching the function like we do in

28
00:01:28.336 --> 00:01:29.142
JavaScript.

29
00:01:29.142 --> 00:01:30.910
All we need is whitespace
to call a function.

30
00:01:30.910 --> 00:01:35.658
Okay, one more note, comments.

31
00:01:35.658 --> 00:01:39.879
So inline comments work very similarly
to how they do in JavaScript,

32
00:01:39.879 --> 00:01:42.149
except you use -- instead of //.

33
00:01:42.149 --> 00:01:46.769
And multi-line comments you use
curly brace- and then- curly brace,

34
00:01:46.769 --> 00:01:48.518
rather than /* and */.

35
00:01:48.518 --> 00:01:52.245
Otherwise, they essentially work exactly
the same way as they do in JavaScript.

