WEBVTT

1
00:00:00.350 --> 00:00:02.630
&gt;&gt; Richard Feldman: So
this kind of begs the question,

2
00:00:02.630 --> 00:00:03.920
what is the type of List.head?

3
00:00:05.140 --> 00:00:07.640
I mean,
it can't be just one of these, right?

4
00:00:07.640 --> 00:00:11.750
It can't be List.head takes a list of
strings and returns a navy string, or

5
00:00:11.750 --> 00:00:15.160
a List.float and returns a navy float, or
even list.bool and returns a navy bool,

6
00:00:15.160 --> 00:00:16.610
because it's all of those.

7
00:00:16.610 --> 00:00:19.730
Depending on how it's used, it ends
up with a different type parameter.

8
00:00:21.460 --> 00:00:22.090
How does that work?

9
00:00:23.290 --> 00:00:26.230
So the answer is that it has
what's known as a type variable.

10
00:00:27.400 --> 00:00:29.570
So, this the type of a List.head.

11
00:00:29.570 --> 00:00:35.820
It's list, elem, with a lower case E to
maybe elem, which also has a lower case E.

12
00:00:37.000 --> 00:00:38.810
So, here elem is a type variable.

13
00:00:38.810 --> 00:00:42.240
It's a name that I choose, I could've
chosen any name that I want, I could've

14
00:00:42.240 --> 00:00:45.980
also annotated it this way, list of elem
maybe even just list of v or maybe v.

15
00:00:47.060 --> 00:00:49.750
All of this type annotations
do exactly the same thing.

16
00:00:51.050 --> 00:00:54.130
The critical piece is that A,
it's lower case.

17
00:00:54.130 --> 00:00:57.400
So the lowercase part means it's
a variable, not a concrete type like

18
00:00:57.400 --> 00:01:00.530
the uppercase types that we've normally
seen in type annotations up to this point.

19
00:01:01.530 --> 00:01:03.290
And B, that they agree.

20
00:01:03.290 --> 00:01:05.910
So this is saying,
I have a list of somethings and

21
00:01:05.910 --> 00:01:09.020
I gives back maybe of
the same sort of thing.

22
00:01:09.020 --> 00:01:13.750
Same thing with val, if I've chosen
the name val here that's all well and

23
00:01:13.750 --> 00:01:15.890
good, but
this one needs to agree with that.

24
00:01:15.890 --> 00:01:18.170
It's saying that whatever
that type turns out to be,

25
00:01:18.170 --> 00:01:19.770
when I actually call this function,

26
00:01:19.770 --> 00:01:23.340
that's the maybe I'm gonna get back and
that's how we can have this flexibility.

27
00:01:23.340 --> 00:01:25.730
Where if I give it a list of strings,
it gives me back a maybe string.

28
00:01:25.730 --> 00:01:29.370
If I give it a list of floats it gives
me back a maybe float and so forth.

29
00:01:29.370 --> 00:01:32.270
But I can pick any number of
different names here that I want.

30
00:01:33.410 --> 00:01:37.200
These are called type variables these
things in blue here the lowercase one is

31
00:01:37.200 --> 00:01:37.790
a type variable.

32
00:01:39.140 --> 00:01:43.470
Okay, so these come up in a number
of different circumstances.

33
00:01:43.470 --> 00:01:47.673
So list dot reverse is another one this
takes a list of, again here I chose,

34
00:01:47.673 --> 00:01:51.765
I happen to choose the name item,
could've also chosen val or v or elem.

35
00:01:51.765 --> 00:01:55.390
So takes a list of items and
returns a list of the same type of items.

36
00:01:55.390 --> 00:01:57.220
So if I give list out
reversal with some strings,

37
00:01:57.220 --> 00:02:00.970
it will give me back also a list
of strings, just in reverse order.

38
00:02:00.970 --> 00:02:04.740
I can also use that on numbers if I want,
that's totally fine.

39
00:02:06.590 --> 00:02:10.610
I can also use List.singleton,

40
00:02:10.610 --> 00:02:13.860
which takes a single value and then,
returns a list of those values.

41
00:02:13.860 --> 00:02:14.900
It basically just wraps it up.

42
00:02:14.900 --> 00:02:17.540
It's the same thing as putting
square brackets around it.

43
00:02:17.540 --> 00:02:19.890
Except, in the form of a function.

44
00:02:19.890 --> 00:02:21.890
Yeah, and
here's an example of List.singleton.

45
00:02:23.880 --> 00:02:27.300
Cool, okay, so this is List.head.

46
00:02:27.300 --> 00:02:28.930
So what is the type of Maybe?

47
00:02:28.930 --> 00:02:32.430
How is that actually
defined as a custom type?

48
00:02:33.940 --> 00:02:36.580
So we could say type Maybe = Just and
Nothing, but

49
00:02:36.580 --> 00:02:38.460
we know that it's not just an enumeration.

50
00:02:38.460 --> 00:02:42.400
There actually is some data
being held onto there.

51
00:02:42.400 --> 00:02:44.750
And that data is represented
as a type variable.

52
00:02:45.760 --> 00:02:49.194
So it says type Maybe val
= Just val / Nothing.

53
00:02:49.194 --> 00:02:53.540
In other words, what's storied in
the Just is not fixed, it's not a string,

54
00:02:53.540 --> 00:02:57.740
it's not an int, it's not a float,
it depends entirely on the Maybe,

55
00:02:57.740 --> 00:02:59.040
it's a little bit more flexible than that.

56
00:03:00.800 --> 00:03:05.060
So this allows us to have Maybes of
different types, of different shapes.

57
00:03:05.060 --> 00:03:07.190
Maybe can be used on strings,
on hints on faults,

58
00:03:07.190 --> 00:03:10.400
on whatever you want,
depending on the circumstance.

59
00:03:10.400 --> 00:03:14.710
And because we a type variable up here
as well, it says when I call List.head

60
00:03:14.710 --> 00:03:21.050
the type of this variant is going to end
up depending on the elements in this list.

61
00:03:21.050 --> 00:03:23.330
If I call this .head
with a list of strings,

62
00:03:23.330 --> 00:03:26.820
this maybe is going to hold on
to just a string or nothing.

63
00:03:26.820 --> 00:03:29.219
Call floats to floats,
just a float or nothing.

