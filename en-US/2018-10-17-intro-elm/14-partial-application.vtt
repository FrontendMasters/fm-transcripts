WEBVTT

1
00:00:00.000 --> 00:00:03.314
&gt;&gt; Richard Feldman: We can also use
List.map with a different function that's

2
00:00:03.314 --> 00:00:06.238
going to call our pluralized
function from before.

3
00:00:06.238 --> 00:00:07.559
Here's how that might look.

4
00:00:07.559 --> 00:00:09.623
Same thing as before,
except now we're taking a number.

5
00:00:09.623 --> 00:00:13.068
We're calling pluralize leaf,
leaves, and num.

6
00:00:13.068 --> 00:00:16.764
And that's going to give us back 0 leaves,
1 leaf, and 2 leaves.

7
00:00:16.764 --> 00:00:18.981
Now we've modified pluralize so

8
00:00:18.981 --> 00:00:24.058
that it concatenates the actual number
on there, using string.fromint.

9
00:00:24.058 --> 00:00:30.899
What if I told you, you could also write
the exact same logic this way instead,

10
00:00:30.899 --> 00:00:35.993
list.map pluralize leaf leaves,
and then 0, 1, 2.

11
00:00:35.993 --> 00:00:39.963
So this is the same code that we had
before except I didn't use an anonymous

12
00:00:39.963 --> 00:00:42.857
function, I just left off
an argument to pluralize.

13
00:00:42.857 --> 00:00:45.386
And somehow, I'm getting the same result.

14
00:00:45.386 --> 00:00:50.209
So the reason this works is
because this code actually

15
00:00:50.209 --> 00:00:53.430
defines the same structure in Elm.

16
00:00:53.430 --> 00:00:57.792
When I say pluralize leaf and leaves,
I leave off that last argument.

17
00:00:57.792 --> 00:01:01.757
Elm says, I see that you've only
partially called this function,

18
00:01:01.757 --> 00:01:03.780
you've only partially applied it.

19
00:01:03.780 --> 00:01:08.050
You didn't give it all three arguments
that it needs you left one off.

20
00:01:08.050 --> 00:01:09.668
&gt;&gt; Richard Feldman: So
in some languages when you do this,

21
00:01:09.668 --> 00:01:12.401
you have things like default arguments,
you have things like,

22
00:01:12.401 --> 00:01:15.387
in JavaScript it will assume that
that third argument is undefined and

23
00:01:15.387 --> 00:01:17.133
it'll execute the function as normal.

24
00:01:17.133 --> 00:01:20.924
What Elm does is it says, okay, you didn't
give me all the arguments I wanted,

25
00:01:20.924 --> 00:01:23.600
what I'm gonna do is I'm not
gonna run pluralized yet.

26
00:01:23.600 --> 00:01:27.312
What we are doing is I'm gonna give you
back an anonymous function that takes

27
00:01:27.312 --> 00:01:30.799
whatever arguments are remaining,
and then sort of finishes the job.

28
00:01:30.799 --> 00:01:34.635
So actually,
anytime you see pluralize leaf and leaves,

29
00:01:34.635 --> 00:01:37.226
that is a partially applied function.

30
00:01:37.226 --> 00:01:41.036
And is going to evaluate not to actually
running the function but it is going to

31
00:01:41.036 --> 00:01:44.671
evaluate to an anonymous function that
takes the remaining arguments and

32
00:01:44.671 --> 00:01:47.854
then returns the result
of finishing the job.

33
00:01:47.854 --> 00:01:51.228
&gt;&gt; Richard Feldman: So that's why this
code does the same thing as the completely

34
00:01:51.228 --> 00:01:53.154
fully written out version above.

35
00:01:53.154 --> 00:01:57.651
Anytime you call a function without this,
that's just what you're going to get,

36
00:01:57.651 --> 00:02:00.620
those two are actually
completely equivalent in Elm.

