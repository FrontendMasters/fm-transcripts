WEBVTT

1
00:00:00.000 --> 00:00:00.767
&gt;&gt; Richard Feldman: So for our exercise,

2
00:00:00.767 --> 00:00:03.580
we're going to actually implement
the thing that we've been talking about in

3
00:00:03.580 --> 00:00:04.145
this section.

4
00:00:04.145 --> 00:00:07.595
We're going to change our homepage,
and make it so

5
00:00:07.595 --> 00:00:11.928
that instead of displaying
the complete list of feed articles,

6
00:00:11.928 --> 00:00:16.276
it's going to filter them based
on which tag you have selected.

7
00:00:16.276 --> 00:00:19.648
So when you click a tag, it's going
to say, this is a new selected tag.

8
00:00:19.648 --> 00:00:21.239
And based on that new selected tag,

9
00:00:21.239 --> 00:00:23.740
we're gonna show a different
set of things in the feed.

10
00:00:23.740 --> 00:00:28.740
So let's hop on over to part3,
so we'll cd into part3.

11
00:00:28.740 --> 00:00:34.201
And once again, we will open
it up in our editor of choice.

12
00:00:34.201 --> 00:00:41.174
Okay, we will see here that the directory
structure is very similar to before.

13
00:00:41.174 --> 00:00:44.368
One difference is now we have
one extra thing inside source,

14
00:00:44.368 --> 00:00:45.817
which is we have a new file.

15
00:00:45.817 --> 00:00:48.174
So previously we just
had Main.elm in source.

16
00:00:48.174 --> 00:00:51.107
Now we have Main.elm,
we also have Article.elm.

17
00:00:51.107 --> 00:00:53.313
This is our second module ever.

18
00:00:53.313 --> 00:00:56.659
So let's take a look at
what that actually does.

19
00:00:56.659 --> 00:01:01.841
So inside of our Main, you may notice
that we have a new import in here.

20
00:01:01.841 --> 00:01:06.352
So previously we just had a couple
of imports, Html, Html.attributes.

21
00:01:06.352 --> 00:01:08.769
We now have three new imports.

22
00:01:08.769 --> 00:01:13.743
One is Browser, which is going to give
us Browser.sandbox, which is essentially

23
00:01:13.743 --> 00:01:18.717
a way to tell the Elm runtime, hey, here's
what my view function is, here's what

24
00:01:18.717 --> 00:01:23.360
my update function is, and here is what
I want you to initialize the model to.

25
00:01:23.360 --> 00:01:26.888
Previously, we just had it rendering HTML,
so we didn't need to tell it any of that.

26
00:01:26.888 --> 00:01:30.073
But now that we're making things
interactive, we actually have to specify

27
00:01:30.073 --> 00:01:32.723
what are view function is,
what our update function is, etc.

28
00:01:32.723 --> 00:01:35.002
So we could name these whatever we wanted.

29
00:01:35.002 --> 00:01:37.743
By convention, usually, you name it
view and you usually name it update.

30
00:01:37.743 --> 00:01:42.627
But if we wanted to, we could give
them different names if we so desired.

31
00:01:42.627 --> 00:01:46.608
So that's what that browser import is for,
it's just for that one thing.

32
00:01:46.608 --> 00:01:50.313
We also have Html.Events, and
you can see that it's exposing onClick,

33
00:01:50.313 --> 00:01:53.435
whereas these two are exposing
all the values that they have.

34
00:01:53.435 --> 00:01:57.320
So onClick, we're gonna use
a little bit later for making it so

35
00:01:57.320 --> 00:01:59.225
that when you click on the tag,

36
00:01:59.225 --> 00:02:03.428
it actually does the interactive
stuff we've been talking about.

37
00:02:03.428 --> 00:02:08.644
And these modules up here all come from
a package of some sort or another.

38
00:02:08.644 --> 00:02:12.881
Whereas this one, this import Article,
this actually comes from our code.

39
00:02:12.881 --> 00:02:14.970
So this is a module article.

40
00:02:14.970 --> 00:02:19.723
This is a new module that we've written
that is basically just a way to move

41
00:02:19.723 --> 00:02:23.250
this hard coded data somewhere
outside of Main.elm so

42
00:02:23.250 --> 00:02:25.642
it's not cluttering up Main.elm.

43
00:02:25.642 --> 00:02:28.049
This is not really a good
use of Elm modules.

44
00:02:28.049 --> 00:02:32.691
As we'll learn in the advanced workshop,
there actually is quite a lot of useful

45
00:02:32.691 --> 00:02:36.803
functionality to them, and this is
not really such a great use of them.

46
00:02:36.803 --> 00:02:39.998
But I wanted to demonstrate if you
want to make a new Elm module,

47
00:02:39.998 --> 00:02:44.062
you name it the same thing as thing as
the file name without the .elm extension.

48
00:02:44.062 --> 00:02:48.656
So because this is Article.elm,
it's called module article.

49
00:02:48.656 --> 00:02:53.123
And we're able to import it
just by saying import Article.

50
00:02:53.123 --> 00:02:54.804
So there's no, once again,

51
00:02:54.804 --> 00:02:58.448
no need to introduce any kind of
special build process for this.

52
00:02:58.448 --> 00:03:03.699
Elm just has a module system built into
it, it just works right out the box.

53
00:03:03.699 --> 00:03:07.611
Okay, so
that's what's going on with those imports.

54
00:03:07.611 --> 00:03:09.107
If we look into the README,

55
00:03:09.107 --> 00:03:13.479
it also mentions that we're going to need
to install a new package for this one.

56
00:03:13.479 --> 00:03:15.495
Now for the rest of the workshop,
I done this for you.

57
00:03:15.495 --> 00:03:18.507
But I wanted to demonstrate what
it's like to install a new package.

58
00:03:18.507 --> 00:03:21.477
So on your command line,
you gonna wanna copy and

59
00:03:21.477 --> 00:03:25.534
paste this command elm install
elm/browser, which is the name of

60
00:03:25.534 --> 00:03:30.480
the package that includes that browser
that we're now using for the first time.

61
00:03:30.480 --> 00:03:34.891
Okay, so I say elm install elm/browser, it
says here is my plan, we're going to add

62
00:03:34.891 --> 00:03:38.841
elm/browser, and elm/virtual-dom
which is a transitive dependency.

63
00:03:38.841 --> 00:03:41.103
Would you like me to update
your elm.json accordingly?

64
00:03:41.103 --> 00:03:43.086
Yes I would, done.

65
00:03:43.086 --> 00:03:46.884
Okay, so again,
this loaded dependencies from local cache,

66
00:03:46.884 --> 00:03:50.469
because we actually already
had Elm browser downloaded and

67
00:03:50.469 --> 00:03:53.997
installed in our cache when we
did the setup from earlier.

68
00:03:53.997 --> 00:03:56.540
So we didn't actually need to even
go to the network to get that.

69
00:03:56.540 --> 00:03:59.314
It's like, well, that's already
cached in your home directory, so

70
00:03:59.314 --> 00:04:01.085
I'm not gonna bother downloading it again.

71
00:04:01.085 --> 00:04:02.179
This works offline.

72
00:04:02.179 --> 00:04:05.990
So it happens that you're ever on an
airplane or something, you have no WiFi,

73
00:04:05.990 --> 00:04:08.183
and you wanna work on
a brand new Elm project,

74
00:04:08.183 --> 00:04:10.986
you can actually just install
all of your dependencies.

75
00:04:10.986 --> 00:04:13.657
And it's all gonna work as long as
they're all things that you've ever

76
00:04:13.657 --> 00:04:14.467
downloaded before.

77
00:04:14.467 --> 00:04:17.640
They're all just gonna be read
straight of the cache, and

78
00:04:17.640 --> 00:04:21.721
it's not even gonna bother going to
the network to see if there's anything

79
00:04:21.721 --> 00:04:24.852
different because there
can't be anything different.

80
00:04:24.852 --> 00:04:30.749
So now we have Elm browser installed, and
we are ready to complete the exercise.

81
00:04:30.749 --> 00:04:32.393
We're not really gonna go over elm.json.

82
00:04:32.393 --> 00:04:35.274
But I'll briefly mention
what's going on in here.

83
00:04:35.274 --> 00:04:39.549
There's a source directory which lists, if
you want to have other directories besides

84
00:04:39.549 --> 00:04:41.930
the source directory,
you can list them there.

85
00:04:41.930 --> 00:04:44.594
This specifies what version of
Elm we're building again, and

86
00:04:44.594 --> 00:04:46.007
then here are our dependencies.

87
00:04:46.007 --> 00:04:49.048
We are not gonna get into
test-dependencies cuz we are not actually

88
00:04:49.048 --> 00:04:52.581
doing any test today, but dependencies
break down into direct and indirect.

89
00:04:52.581 --> 00:04:55.715
Direct dependencies are things that
we actually can use inside of our

90
00:04:55.715 --> 00:04:56.426
application.

91
00:04:56.426 --> 00:05:00.794
Indirect dependencies are essentially
things that our direct dependencies need,

92
00:05:00.794 --> 00:05:03.990
and this is how the elm package
installer has resolved them and

93
00:05:03.990 --> 00:05:07.330
figured out the versions that
are compatible with one another.

94
00:05:07.330 --> 00:05:10.931
So these things,
we cannot actually import in our project.

95
00:05:10.931 --> 00:05:14.756
The only reason they're in there is to
make sure that when different teams

96
00:05:14.756 --> 00:05:19.075
are working on the same code base, they're
all getting exactly the same version of

97
00:05:19.075 --> 00:05:21.311
these things resolved when they install.

98
00:05:21.311 --> 00:05:24.899
So in NPM, this is the equivalent or
this is a separate file

99
00:05:24.899 --> 00:05:29.530
called packagelock.json,
wherein Ruby there's like gemfile.lock.

100
00:05:29.530 --> 00:05:34.408
Elm just has this as part of elm.json, so
you don't have a separate file to worry

101
00:05:34.408 --> 00:05:37.439
about, it's just right
there in the elm.json.

102
00:05:37.439 --> 00:05:39.809
Okay, as for the actual exercise,

103
00:05:39.809 --> 00:05:45.657
we're gonna open source/Main.elm in our
editor, and once again resolve the todos.

104
00:05:45.657 --> 00:05:47.633
We're gonna use the same build
command as we did before.

105
00:05:47.633 --> 00:05:52.046
So if you've already got that on your
terminal, you can just pull it up like

106
00:05:52.046 --> 00:05:56.973
before, and that should just work now
that we've installed the browser package.

107
00:05:56.973 --> 00:06:01.176
So let's take a look at this Main.elm.

108
00:06:01.176 --> 00:06:05.472
All right, so you can see that we
have a couple of sections here.

109
00:06:05.472 --> 00:06:08.659
And I've done this comment heading thing.

110
00:06:08.659 --> 00:06:11.926
This is a convention in
Elm that's widely used,

111
00:06:11.926 --> 00:06:17.039
which is slice up your module by just
having these all caps comment headers.

112
00:06:17.039 --> 00:06:22.939
As I previously mentioned, Elm's module
system is used for more than just files.

113
00:06:22.939 --> 00:06:26.457
There's actually important boundaries
about which things modules do and

114
00:06:26.457 --> 00:06:27.191
do not expose.

115
00:06:27.191 --> 00:06:30.657
So its considered best practice not
to chop things up by moving them into

116
00:06:30.657 --> 00:06:33.659
different files, but
rather just to say, this is my module,

117
00:06:33.659 --> 00:06:35.826
I want this module to
do particular things.

118
00:06:35.826 --> 00:06:39.703
If I want different subsections within
that, I'll just gonna put a heading,

119
00:06:39.703 --> 00:06:41.773
like I would if I were
writing a blog post.

120
00:06:41.773 --> 00:06:45.171
So here's our section for the model,
we have this initialModel.

121
00:06:45.171 --> 00:06:49.408
The reason I named it initialModel is
because this top level model here is only

122
00:06:49.408 --> 00:06:50.919
gonna be used in one place.

123
00:06:50.919 --> 00:06:54.395
It's only gonna be used to
kick off our application.

124
00:06:54.395 --> 00:06:56.876
After that,
we're never gonna use it again.

125
00:06:56.876 --> 00:07:00.957
After that, we're only going to be working
with the current model, which is to say

126
00:07:00.957 --> 00:07:05.179
an argument that gets passed into update,
or an argument that gets passed into view.

127
00:07:05.179 --> 00:07:08.716
initialModel is only
used to kick things off.

128
00:07:08.716 --> 00:07:11.352
Okay, so we have a couple of to-dos here.

129
00:07:11.352 --> 00:07:14.864
The first one is we're going
to implement our update.

130
00:07:14.864 --> 00:07:18.117
Now update is going to be looking
at a field called msg.description,

131
00:07:18.117 --> 00:07:19.781
like we talked about in the slides.

132
00:07:19.781 --> 00:07:23.823
And it's gonna say if that
description is ClickedTag,

133
00:07:23.823 --> 00:07:26.919
then set the model's selectedTag field,

134
00:07:26.919 --> 00:07:31.912
which starts off being Elm,
to be whatever msg.data happens to be.

135
00:07:31.912 --> 00:07:36.011
So if we get a message that says
ClickedTag, and data is programming,

136
00:07:36.011 --> 00:07:39.356
then selectedTag should get
changed to be programming.

137
00:07:39.356 --> 00:07:41.185
We're gonna use record
update syntax to do that.

138
00:07:41.185 --> 00:07:45.121
Remember, you just need to return the new
model with the update applied to it.

139
00:07:45.121 --> 00:07:49.974
Another hint,
remember that if always needs an else.

140
00:07:49.974 --> 00:07:54.902
Okay, and then down here in the view,
we're going to introduce filtering.

141
00:07:54.902 --> 00:07:58.378
So we already have a little bit
of the syntax filled out here, so

142
00:07:58.378 --> 00:08:00.082
we have this list of articles,

143
00:08:00.082 --> 00:08:04.097
which is going to be used to render
those articles on the side of the feed.

144
00:08:04.097 --> 00:08:06.676
And we're already calling
List.filter on it.

145
00:08:06.676 --> 00:08:11.333
The only problem is List.filter is taking
the world's most boring is keepable

146
00:08:11.333 --> 00:08:12.036
function.

147
00:08:12.036 --> 00:08:15.129
Article, it takes an article and
then it always returns true.

148
00:08:15.129 --> 00:08:18.846
So we're gonna replace that with some
actual logic so that it will filter it

149
00:08:18.846 --> 00:08:22.802
out, based on whether the article should
or should not be rendered in the feed.

150
00:08:22.802 --> 00:08:27.653
And to figure that out, we're gonna
need to use these three ingredients,

151
00:08:27.653 --> 00:08:31.739
List.member, article.tags,
and model.selectedTags.

152
00:08:31.739 --> 00:08:35.641
So each of these articles has
a list of tags inside of it, and

153
00:08:35.641 --> 00:08:39.155
we're gonna use List.member to try and
determine,

154
00:08:39.155 --> 00:08:43.465
is the currently selected tag one
of those tags for this article?

155
00:08:43.465 --> 00:08:45.704
That's what's gonna be
our filter condition.

156
00:08:45.704 --> 00:08:49.923
If you wanna see the documentation for
List.member, there is a link right here.

157
00:08:49.923 --> 00:08:54.007
So this is the Elm package website,
this is where all documentation for

158
00:08:54.007 --> 00:08:55.241
Elm packages lives.

159
00:08:55.241 --> 00:09:00.233
And here is the member function, so
it has an example of how you can call it,

160
00:09:00.233 --> 00:09:05.167
passing these different arguments to
get back different return values.

161
00:09:05.167 --> 00:09:09.318
Okay, let's take ten minutes and
go through these.

162
00:09:09.318 --> 00:09:11.328
I'm sorry, I missed something,
the third to-do.

163
00:09:11.328 --> 00:09:15.195
[LAUGH] The third to-do is we're gonna add
an onClick handler which links the two

164
00:09:15.195 --> 00:09:15.781
together.

165
00:09:15.781 --> 00:09:19.507
So back in update, we talked about we're
gonna get a message that looks like this.

166
00:09:19.507 --> 00:09:22.731
It's gonna have a description and a data.

167
00:09:22.731 --> 00:09:28.237
Down here in this view,
we are rendering one particular tag.

168
00:09:28.237 --> 00:09:30.774
So viewTag takes the currently
selected tagName,

169
00:09:30.774 --> 00:09:32.900
which is gonna be passed
in from the model.

170
00:09:32.900 --> 00:09:37.033
And then it takes the tagName of this
particular tag that it's going to be

171
00:09:37.033 --> 00:09:37.659
viewing.

172
00:09:37.659 --> 00:09:42.867
So we wanna use that tagName to create
this onClick to make sure that when we

173
00:09:42.867 --> 00:09:48.342
send this message to model it corresponds
to the actual tag the user clicked.

