WEBVTT

1
00:00:00.108 --> 00:00:04.815
&gt;&gt; Richard Feldman: So let's see about
using Cmd to do an actual Http request.

2
00:00:04.815 --> 00:00:12.636
Http.getString is sort of the most basic
simple version of how to do Http in Elm.

3
00:00:12.636 --> 00:00:16.903
So this is close to what
Elm's Http.getString

4
00:00:16.903 --> 00:00:20.324
function looks like, but not quite.

5
00:00:20.324 --> 00:00:22.777
Let's just imagine hypothetically,
what if it did look like this?

6
00:00:22.777 --> 00:00:26.941
So it's a getString, so it's gonna
take a string for the URL, okay,

7
00:00:26.941 --> 00:00:29.710
that part's actually
how the real API looks.

8
00:00:29.710 --> 00:00:32.356
And then, what if it just gave us
back a command that said, hey,

9
00:00:32.356 --> 00:00:33.831
I'm gonna give you back a command.

10
00:00:33.831 --> 00:00:37.702
And it's got a string that's
the response that comes out of that.

11
00:00:37.702 --> 00:00:40.618
So fundamentally,
getString is saying give me a URL and

12
00:00:40.618 --> 00:00:44.100
I'm just gonna do a get request to
some server that's at that URL.

13
00:00:44.100 --> 00:00:46.700
I'm just gonna give you back
the raw string that comes back.

14
00:00:46.700 --> 00:00:51.135
The problem here is this is something
you're pretty serious assumption that this

15
00:00:51.135 --> 00:00:51.980
is gonna work.

16
00:00:51.980 --> 00:00:56.093
Like random number generation,
yeah, okay, that's gonna work.

17
00:00:56.093 --> 00:01:01.946
We can have a command that just says, tell
me what I wanna pick from these greetings.

18
00:01:01.946 --> 00:01:04.079
That is 100% of the time gonna work,

19
00:01:04.079 --> 00:01:06.732
it's always gonna send
a message back to update.

20
00:01:06.732 --> 00:01:09.735
Http, though,
a lot of stuff can go wrong, right?

21
00:01:09.735 --> 00:01:11.738
There's a bazillion
things that can go wrong,

22
00:01:11.738 --> 00:01:13.800
like this really always
gonna produce a string?

23
00:01:13.800 --> 00:01:15.945
What if the server's down?

24
00:01:15.945 --> 00:01:19.081
I mean, what if the server's up,
but I gave it an invalid URL, and

25
00:01:19.081 --> 00:01:20.824
it's pointing to the wrong server?

26
00:01:20.824 --> 00:01:24.694
What happens if I get a 401,
cuz I had to log in, or a 403 because this

27
00:01:24.694 --> 00:01:28.770
is some secret government website that
I'm just never gonna have access to.

28
00:01:28.770 --> 00:01:30.957
There's so many things that can go wrong,

29
00:01:30.957 --> 00:01:33.948
it could time out because I'm
on a super slow connection.

30
00:01:33.948 --> 00:01:39.105
Where it is not necessarily actually
ever going to give me back a string.

31
00:01:39.105 --> 00:01:44.389
So to do this, this is the actual
API forward, the Http request.

32
00:01:44.389 --> 00:01:46.854
When I say getString,
it says okay give me the URL and

33
00:01:46.854 --> 00:01:48.824
I'm gonna give you back a request value.

34
00:01:48.824 --> 00:01:52.524
And that request value,
is just a description of,

35
00:01:52.524 --> 00:01:56.750
okay here is the sort of parameters for
this HCDP request.

36
00:01:56.750 --> 00:01:59.630
But we haven't yet
specified how we're gonna handle,

37
00:01:59.630 --> 00:02:01.844
all the things that
could go wrong with it.

38
00:02:01.844 --> 00:02:04.672
So this is sort of an intermediate
value on the way to a command.

39
00:02:04.672 --> 00:02:06.894
It's a representation of, okay,
here's what I want to happen.

40
00:02:06.894 --> 00:02:10.401
But I haven't specified the details of
how I'm going to handle all the possible

41
00:02:10.401 --> 00:02:12.768
things that could go wrong
along the way to a command.

42
00:02:14.830 --> 00:02:17.447
&gt;&gt; Richard Feldman: So
this type parameter on request,

43
00:02:17.447 --> 00:02:21.032
this is only the result
if the request succeeds.

44
00:02:21.032 --> 00:02:23.523
So if the request succeeds, great,
we will get back our string.

45
00:02:23.523 --> 00:02:25.539
We know that from getString, and

46
00:02:25.539 --> 00:02:30.291
we'll see fancier things later that give
us more direct things and string, or

47
00:02:30.291 --> 00:02:34.190
like closer to what we actually want,
like articles and stuff.

48
00:02:34.190 --> 00:02:37.123
And if it fails,
HTTP has a custom error type,

49
00:02:37.123 --> 00:02:41.880
that can model all those different
scenarios for things that can go wrong.

50
00:02:41.880 --> 00:02:47.660
The way we actually go from a request to
a command is using the Http.send function.

51
00:02:47.660 --> 00:02:49.622
So sends job is basically,

52
00:02:49.622 --> 00:02:55.436
it accepts arguments that describe how
we can translate failure into a message.

53
00:02:55.436 --> 00:02:59.329
And also, how we can translate
success into a message.

54
00:02:59.329 --> 00:03:04.126
So send says, give me a function that's
gonna translate a failure into a message,

55
00:03:04.126 --> 00:03:08.320
and give me a function that's gonna
translate a success into a message.

56
00:03:08.320 --> 00:03:10.972
And then what I'm gonna do is, I'm gonna
perform the Http request, so I'm just

57
00:03:10.972 --> 00:03:13.550
gonna hold on to those two functions,
and then we're gonna see what happens.

58
00:03:13.550 --> 00:03:16.630
And if it fails, I'm gonna call
the failure one, and then great,

59
00:03:16.630 --> 00:03:20.428
I now know what message to send to update,
and then update knows okay, it failed.

60
00:03:20.428 --> 00:03:21.716
I'm gonna handle that.

61
00:03:21.716 --> 00:03:23.977
And if it succeeds, great,
then I'll call the other function.

62
00:03:23.977 --> 00:03:24.969
Now I've got a message.

63
00:03:24.969 --> 00:03:29.792
Send that message to update, and then,
again, update will be able to handle that.

64
00:03:29.792 --> 00:03:34.245
So this is a way of essentially specifying
update is going to need to handle both

65
00:03:34.245 --> 00:03:38.637
of these possibilities, in a way that's
sort of baked into the API for Http.

66
00:03:38.637 --> 00:03:42.638
So just an example of sort
of using it in action.

67
00:03:42.638 --> 00:03:44.126
Call Http.send.

68
00:03:44.126 --> 00:03:46.435
And we're gonna kinda clean
up this in a little bit.

69
00:03:46.435 --> 00:03:50.768
It's gonna be a little bit less code than
this, but I'm gonna write it all out for

70
00:03:50.768 --> 00:03:51.671
this first one.

71
00:03:51.671 --> 00:03:58.520
So the first argument, is here is how I'm
gonna translate failure into a message.

72
00:03:58.520 --> 00:04:01.934
I'm gonna say I get a result, and
this by the way is the same type

73
00:04:01.934 --> 00:04:05.299
of result that we saw when we
were dealing with JSON decoders.

74
00:04:05.299 --> 00:04:08.117
Which is to say it's either an okay or
an error,

75
00:04:08.117 --> 00:04:11.222
it's that custom type that
has those two variants.

76
00:04:11.222 --> 00:04:14.242
We're just gonna have a message
that holds onto that result.

77
00:04:14.242 --> 00:04:16.584
So we're gonna call it, CompletedLoadFeed.

78
00:04:16.584 --> 00:04:19.825
So this is what happens
when LoadFeed finishes.

79
00:04:19.825 --> 00:04:24.211
It's that HTTP request has completed,
it's gonna hold onto that result,

80
00:04:24.211 --> 00:04:28.253
which either has the error case,
in which case the request failed, or

81
00:04:28.253 --> 00:04:32.183
the okay case, which means that we
actually got a feed to work with.

82
00:04:32.183 --> 00:04:37.871
And then the other argument to Http.send,
is the actual hey here's the request that

83
00:04:37.871 --> 00:04:43.247
describes what I want to go and attempt
to do and that's gonna drive this result.

84
00:04:43.247 --> 00:04:45.799
By the way,
any time you notice this pattern,

85
00:04:45.799 --> 00:04:49.398
where you see an anonymous function
that takes one argument, and

86
00:04:49.398 --> 00:04:52.419
then passes that as the argument
to another function.

87
00:04:52.419 --> 00:04:54.423
You can just collapse that
into the function itself.

88
00:04:54.423 --> 00:04:56.923
There's no need to write
this whole thing out.

89
00:04:56.923 --> 00:05:01.387
We can just say Http.send,
CompletedLoadFeed and

90
00:05:01.387 --> 00:05:05.551
just sort of condense that,
right, like this.

91
00:05:05.551 --> 00:05:08.151
So it's a little bit more concise.

92
00:05:08.151 --> 00:05:11.050
And also,
the way that I would typically write this,

93
00:05:11.050 --> 00:05:14.411
is I would actually just reorder those and
do it as a pipeline.

94
00:05:14.411 --> 00:05:17.679
So this is essentially the same
thing as what we had before, but

95
00:05:17.679 --> 00:05:21.377
written in a pipeline style,
because I like to think of this as, okay,

96
00:05:21.377 --> 00:05:23.492
I wanna do Http.getString on this URL.

97
00:05:23.492 --> 00:05:25.965
And then I wanna pipe that to Http.send,
and

98
00:05:25.965 --> 00:05:30.274
then here's what I wanna do to handle
the failure and success possibilities.

99
00:05:30.274 --> 00:05:34.250
So this is typically how I would
actually do some Http requests in Elm.

100
00:05:34.250 --> 00:05:36.965
Start by saying,
here's the request I want.

101
00:05:36.965 --> 00:05:39.301
And then pipe that to
Http.send which says,

102
00:05:39.301 --> 00:05:43.602
here's the message that I want to get sent
to update that will translate failure and

103
00:05:43.602 --> 00:05:47.114
success into a message so
an update can handle both possibilities.

104
00:05:47.114 --> 00:05:49.265
Questions on that at a conceptual level?

105
00:05:51.365 --> 00:05:53.947
&gt;&gt; Speaker 2: So
getString is taking something and

106
00:05:53.947 --> 00:05:57.534
it's just gonna turn it
into this request object.

107
00:05:57.534 --> 00:06:01.229
Take a string that's gonna
turn into a request object.

108
00:06:01.229 --> 00:06:05.443
&gt;&gt; Richard Feldman: Right, so the string
that it takes is the URL to go and hit,

109
00:06:05.443 --> 00:06:10.879
and it's gonna produce a string which
completed load feed will hold on to.

110
00:06:10.879 --> 00:06:15.150
So the type of that is,
it's result,and there's an Http.error, so

111
00:06:15.150 --> 00:06:17.370
that's what it will get if it fails.

112
00:06:17.370 --> 00:06:18.932
That would be in the error branch.

113
00:06:18.932 --> 00:06:19.980
In the okay branch,

114
00:06:19.980 --> 00:06:23.939
it would be a row string of just actual
string that came back from the server.

115
00:06:23.939 --> 00:06:25.369
So we're gonna get one or the other.

116
00:06:25.369 --> 00:06:28.346
If it succeeds we'll get back a string,
that's why it's called getstring,

117
00:06:28.346 --> 00:06:30.161
cuz it just gets the raw
string from the server.

118
00:06:30.161 --> 00:06:35.289
And if it errors,
then we're gonna get an Http error.

119
00:06:35.289 --> 00:06:38.947
Now we're gonna see in a second, the
fancier version of this that's going to

120
00:06:38.947 --> 00:06:41.648
take that string and
actually like do something with it,

121
00:06:41.648 --> 00:06:44.091
like decode it from JSON,
or something like that.

122
00:06:44.091 --> 00:06:48.626
But fundamentally, getString is sort of
the simplest way we can ask a server for

123
00:06:48.626 --> 00:06:49.378
something.

124
00:06:49.378 --> 00:06:52.476
&gt;&gt; Speaker 2: Okay, so
it's specifically a way to request,

125
00:06:52.476 --> 00:06:55.194
knowing you're gonna get a string that?

126
00:06:55.194 --> 00:06:55.827
&gt;&gt; Richard Feldman: Exactly, right, yeah.

127
00:06:55.827 --> 00:06:59.814
So this is, Http requests,
hey server, what's in this URL,

128
00:06:59.814 --> 00:07:04.048
and server says, barf,
here is this whole string, deal with it.

129
00:07:04.048 --> 00:07:08.811
Not as useful as were about to work up to,
but starting simpler.

130
00:07:08.811 --> 00:07:12.767
[LAUGH] So Http.send returns the command,
at this point we have a command.

131
00:07:12.767 --> 00:07:14.005
Update can return it, and

132
00:07:14.005 --> 00:07:17.453
everything else is going to work the same
way that it has up to this point.

