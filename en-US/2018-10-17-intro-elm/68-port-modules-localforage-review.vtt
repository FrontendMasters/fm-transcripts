WEBVTT

1
00:00:00.000 --> 00:00:02.016
&gt;&gt; Richard Feldman: We'll see how
to actually make one of these.

2
00:00:02.016 --> 00:00:05.526
So, the way to do this is using
the port keyword on the Elm side and

3
00:00:05.526 --> 00:00:09.955
we're gonna make some changes directly
to index.html on the JavaScript side.

4
00:00:09.955 --> 00:00:13.077
It's worth noting that technically on the
JavaScript side if we wanted to we could

5
00:00:13.077 --> 00:00:14.629
use like a .js file and stuff like that.

6
00:00:14.629 --> 00:00:18.700
But we're just gonna write the JavaScript
side of this code directly into index.html

7
00:00:18.700 --> 00:00:21.442
because that way,
we don't have to introduce a new file.

8
00:00:21.442 --> 00:00:25.852
Okay, ports, if you're gonna use the port
keyword, which is the keyword that you

9
00:00:25.852 --> 00:00:29.332
use to talk to JavaScript,
you have to do it inside a port module.

10
00:00:29.332 --> 00:00:33.304
Which basically means, at the top of
your module where you say module article

11
00:00:33.304 --> 00:00:36.248
exposing whatever, or
module main exposing whatever.

12
00:00:36.248 --> 00:00:40.268
You add that port keyword at the top, and
this means that any time you're wondering

13
00:00:40.268 --> 00:00:43.428
whether a given module does or
does not do JavaScript interrupt,

14
00:00:43.428 --> 00:00:45.854
you can tell that from
the very first line of code.

15
00:00:45.854 --> 00:00:48.878
You just glance at it,
if it says port module, then yes,

16
00:00:48.878 --> 00:00:50.834
it's doing JavaScript interrupt.

17
00:00:50.834 --> 00:00:53.752
If it doesn't, then it's not.

18
00:00:53.752 --> 00:00:55.717
So here's how we would
create one of these things.

19
00:00:55.717 --> 00:01:00.974
We would say, port storeSession and
that's gonna take in our particular

20
00:01:00.974 --> 00:01:05.824
example a maybe string and
that's gonna return a command message.

21
00:01:05.824 --> 00:01:12.611
So this port key word essentially says,
hey, Elm make this function exist for me.

22
00:01:12.611 --> 00:01:17.476
This is one of the only cases in Elm where
we don't actually write out the definition

23
00:01:17.476 --> 00:01:18.597
of this function.

24
00:01:18.597 --> 00:01:20.334
We just write the type and

25
00:01:20.334 --> 00:01:24.311
Elm will generate a function
that does that thing for us.

26
00:01:24.311 --> 00:01:28.012
So the port keywords says I wanna
make something called storeSession.

27
00:01:28.012 --> 00:01:29.521
This gonna be a function.

28
00:01:29.521 --> 00:01:33.681
I want it to accept a Maybe string and
we'll get into why a Maybe string later,

29
00:01:33.681 --> 00:01:36.369
and then what it's going
to do is just going to send

30
00:01:36.369 --> 00:01:38.430
that Maybe string out to JavaScript.

31
00:01:38.430 --> 00:01:43.351
And it's then it's gonna return a command
which says okay, this is a command

32
00:01:43.351 --> 00:01:48.210
which when executed will send that value
to Java Script and then do nothing.

33
00:01:48.210 --> 00:01:52.407
We're not gonna get any message back
because this is fire and forget,

34
00:01:52.407 --> 00:01:54.197
just send it across the wall.

35
00:01:54.197 --> 00:01:59.404
The reverse of that is onSessionChange,
so this is the sort of the inbound port,

36
00:01:59.404 --> 00:02:02.250
this is when JavaScript
sends a value to us.

37
00:02:02.250 --> 00:02:04.799
And it has a slightly different syntax.

38
00:02:04.799 --> 00:02:09.787
First it accepts a message that says okay,
we're going to get in a string from

39
00:02:09.787 --> 00:02:13.721
JavaScript and we're going to
convert that into a message.

40
00:02:13.721 --> 00:02:18.424
And that'll give us back a subscription
with that particular message.

41
00:02:18.424 --> 00:02:23.279
So between the two, we now have Elm
creating the implementations for

42
00:02:23.279 --> 00:02:24.375
both of these.

43
00:02:24.375 --> 00:02:28.941
And we have, in the first case, a way to
generate a command that will say, okay,

44
00:02:28.941 --> 00:02:29.490
update.

45
00:02:29.490 --> 00:02:32.410
We are going to send this value out
to JavaScript, this Maybe String.

46
00:02:32.410 --> 00:02:35.410
And on the flip side we also
have a way to say, hey,

47
00:02:35.410 --> 00:02:40.504
whenever JavaScript sends us one of these
strings, wrap it up in this message type.

48
00:02:40.504 --> 00:02:44.060
And then that's gonna be what gets
send to update as our subscription.

49
00:02:44.060 --> 00:02:46.986
So as long as we
are subscribed to this thing,

50
00:02:46.986 --> 00:02:52.386
we will get those messages flowing into
update every time JavaScript sends us one.

51
00:02:52.386 --> 00:02:57.084
And with this one every time we want to
send something to JavaScript we can do so

52
00:02:57.084 --> 00:02:58.400
using that command.

53
00:02:58.400 --> 00:03:00.750
Okay, so here's the Elm side.

54
00:03:00.750 --> 00:03:04.911
On the JavaScript side, we're gonna start
with this one line of code which is

55
00:03:04.911 --> 00:03:08.176
basically what we always do to
start up and Elm application,

56
00:03:08.176 --> 00:03:09.661
we call Elm.Main.init.

57
00:03:09.661 --> 00:03:14.083
We're not really gonna talk too much about
flags, but essentially flags are our way

58
00:03:14.083 --> 00:03:17.395
to get some initial value from
JavaScript into Elm on start up.

59
00:03:17.395 --> 00:03:20.994
So this is not done with ports,
it's done with a separate mechanism,

60
00:03:20.994 --> 00:03:24.295
but essentially it follows
the same characteristics as these.

61
00:03:24.295 --> 00:03:26.861
These are made available to Elm,
these flags,

62
00:03:26.861 --> 00:03:30.661
sort of in the same way as when you
start up a command line application.

63
00:03:30.661 --> 00:03:33.311
You get those flags that are only
available on startup, and

64
00:03:33.311 --> 00:03:35.543
then if they want,
they can use them to get going.

65
00:03:35.543 --> 00:03:39.114
In our case, this is just an example
of passing in the initial session so

66
00:03:39.114 --> 00:03:43.060
that the very first time the page renders,
we can know if the user is logged in.

67
00:03:43.060 --> 00:03:47.023
So what we're doing here is we're
describing a way to storeSession

68
00:03:47.023 --> 00:03:47.933
information.

69
00:03:47.933 --> 00:03:50.934
Which is to say
the authentication information,

70
00:03:50.934 --> 00:03:54.792
the current users username,
their avatar, stuff like that and

71
00:03:54.792 --> 00:03:58.877
dealing with when it changes using
a library known as local forage.

72
00:03:58.877 --> 00:04:02.376
So localForage is a wrapper around
local storage and indexdb and

73
00:04:02.376 --> 00:04:04.461
a couple of different technologies.

74
00:04:04.461 --> 00:04:08.127
And were going to assume that we have
some business requirement to store our

75
00:04:08.127 --> 00:04:09.008
session in that.

76
00:04:09.008 --> 00:04:12.756
Now in the actual example of this thing,
the SPA example,

77
00:04:12.756 --> 00:04:16.212
the real world application,
it uses local storage.

78
00:04:16.212 --> 00:04:20.749
But for purposes of this exercise
we're gonna be using local forage and

79
00:04:20.749 --> 00:04:24.468
we're gonna be talking to it
using these APIs right here.

80
00:04:24.468 --> 00:04:29.252
Okay, so this right here,
starts up our Elm application, and

81
00:04:29.252 --> 00:04:33.691
here's how you subscribe to
this storeSession command.

82
00:04:33.691 --> 00:04:37.821
So we say app.ports which is basically
an object containing all of the ports

83
00:04:37.821 --> 00:04:40.799
that we've defined anywhere
on our Elm application.

84
00:04:40.799 --> 00:04:47.021
.storeSession which is to say that name
corresponds the name of the Elm function.

85
00:04:47.021 --> 00:04:51.014
.subscribe and
then we pass it a function that says okay,

86
00:04:51.014 --> 00:04:54.280
give me a string and
I will do something with it.

87
00:04:54.280 --> 00:04:57.280
So then right in here,
we write some js code.

88
00:04:57.280 --> 00:05:01.329
And then,
every time that command gets run,

89
00:05:01.329 --> 00:05:05.070
this JavaScript code will get executed.

90
00:05:05.070 --> 00:05:11.276
And it will get executed being passed the
string that was passed in to this command.

91
00:05:11.276 --> 00:05:14.226
Now, you might notice that on
the Elm side this is a maybe string,

92
00:05:14.226 --> 00:05:16.546
whereas on the JavaScript side,
we just said str.

93
00:05:16.546 --> 00:05:22.036
Now the reason for that is that if we want
to send a null value into JavaScript,

94
00:05:22.036 --> 00:05:23.483
this is how we do it.

95
00:05:23.483 --> 00:05:24.888
So when we're storing the session,

96
00:05:24.888 --> 00:05:27.213
there's really two different
use cases that we have there.

97
00:05:27.213 --> 00:05:31.332
One is we want to say, I just logged in,
or maybe I just signed up and

98
00:05:31.332 --> 00:05:34.860
I want to store this user as,
yeah, this is the new session.

99
00:05:34.860 --> 00:05:38.848
This is their authentication token,
this is their username etc.

100
00:05:38.848 --> 00:05:42.871
Please go persist that so that it will
still be around when we refresh the page.

101
00:05:42.871 --> 00:05:46.542
We also might want to use this for
logging out.

102
00:05:46.542 --> 00:05:50.180
So we log out we might wanna say,
hey,, just clear that sucker out.

103
00:05:50.180 --> 00:05:52.737
Well, I don't wanna store that anymore,
we're logged out,

104
00:05:52.737 --> 00:05:53.857
we're all done with that.

105
00:05:53.857 --> 00:05:55.479
So in that case we would send nothing.

106
00:05:55.479 --> 00:05:59.321
And say, yeah, we're just logged out,
just don't do anything more with that,

107
00:05:59.321 --> 00:06:00.667
just please clear that out.

108
00:06:00.667 --> 00:06:04.173
So on the JavaScript side we
can now compare this to null or

109
00:06:04.173 --> 00:06:06.300
not depending on what Elm sent us.

110
00:06:06.300 --> 00:06:09.533
But this is essentially the way to
specify, hey, I wanna send a null

111
00:06:09.533 --> 00:06:13.360
value from Elm to JavaScript, even though
Elm doesn't have a concept of null.

112
00:06:13.360 --> 00:06:17.186
The way that the port keyword works is
it knows when you send them Maybe, and

113
00:06:17.186 --> 00:06:20.919
then a primitive like a string,
then it means I might be sending it null.

114
00:06:20.919 --> 00:06:25.059
If I see nothing send null,
and I don't see nothing,

115
00:06:25.059 --> 00:06:28.741
if I see just,
then send that value unwrapped.

116
00:06:28.741 --> 00:06:32.521
The same thing on the other side, if we
wanted to we can accept a Maybe string

117
00:06:32.521 --> 00:06:36.303
from JavaScript and say, perhaps
JavaScript is going to send us a null

118
00:06:36.303 --> 00:06:39.625
session, which we can convert into
nothing in the case of Maybe.

119
00:06:39.625 --> 00:06:42.645
Okay, so
that's setting the thing in the session.

120
00:06:42.645 --> 00:06:46.809
So taking that command and then on the
JavaScript side every time that command

121
00:06:46.809 --> 00:06:51.051
gets run from Elm this callback will fire
and we can do whatever JS code we want.

122
00:06:51.051 --> 00:06:52.951
We could write arbitrary JS code here.

123
00:06:52.951 --> 00:06:56.196
It can do all the side effects in the
world, it can do all the HTTP requests and

124
00:06:56.196 --> 00:06:57.080
anything you want.

125
00:06:57.080 --> 00:07:00.077
And it's all fine because
essentially we've said yeah, well,

126
00:07:00.077 --> 00:07:03.794
this is the command, commands can do that,
commands can actually do whatever.

127
00:07:03.794 --> 00:07:08.494
Except in this case, whereas usually it's
the Elm run time executing the side effect

128
00:07:08.494 --> 00:07:09.544
or whatever else.

129
00:07:09.544 --> 00:07:13.580
In this case all the Elm run time is doing
is it's firing a JavaScript callback, and

130
00:07:13.580 --> 00:07:16.130
it's up to JavaScript to
do whatever else it wants.

131
00:07:16.130 --> 00:07:19.390
But the fundamental characteristics
are still the same.

132
00:07:19.390 --> 00:07:22.047
Finally, we have onSessionChange and

133
00:07:22.047 --> 00:07:27.208
here we say app.ports.onSessionChang.send
and we pass in some string.

134
00:07:27.208 --> 00:07:30.904
This is JavaScript saying hey Elm,
here's a piece of information.

135
00:07:30.904 --> 00:07:34.146
I'm gonna pass this string into you and
then Elms go say great,

136
00:07:34.146 --> 00:07:35.560
I've now got that string.

137
00:07:35.560 --> 00:07:39.186
Fortunately, I have this handy dandy
function that converts from a string to

138
00:07:39.186 --> 00:07:39.854
a message, so

139
00:07:39.854 --> 00:07:43.503
I'm gonna call this function to convert
it into my particular message type.

140
00:07:43.503 --> 00:07:46.926
And then that message is gonna go straight
into update with the current model and

141
00:07:46.926 --> 00:07:50.524
then from there update being brains of
our application it's gonna do it's thing.

142
00:07:50.524 --> 00:07:52.484
It's gonna handle that message and

143
00:07:52.484 --> 00:07:56.020
it's gonna resolve based on
whatever we want JavaScript to do.

144
00:07:56.020 --> 00:07:58.887
So in the exercise that we go through,

145
00:07:58.887 --> 00:08:04.274
we're gonna use localForage to
detect whenever the session changes.

146
00:08:04.274 --> 00:08:07.457
Which could be because it
changed in a different tab.

147
00:08:07.457 --> 00:08:09.927
That's something that can happen
with browser persistence,

148
00:08:09.927 --> 00:08:11.194
is you have multiple tabs open.

149
00:08:11.194 --> 00:08:14.430
Somebody logs out in one and
you wanna be logged out in all of them.

150
00:08:14.430 --> 00:08:19.090
And then, since each of those are going to
be subscribed to changes in the session,

151
00:08:19.090 --> 00:08:23.634
that's gonna be immediately reflected
as soon as the logout actually happens.

152
00:08:23.634 --> 00:08:24.784
Okay, cool, so

153
00:08:24.784 --> 00:08:30.559
that's what we're sort of building up to
is storing session data in localForage.

154
00:08:30.559 --> 00:08:34.669
The localForage API is very simple, so
I'm just gonna cover it very quickly.

155
00:08:34.669 --> 00:08:38.732
Here's how it works,
you say localForage.getItem,

156
00:08:38.732 --> 00:08:43.667
which is to say, some key value,
localForage is a key value store.

157
00:08:43.667 --> 00:08:47.537
So you parse it the key which in our case,
is gonna be the string session.

158
00:08:47.537 --> 00:08:51.825
And then it runs a callback that says,
I obtained the value at that key,

159
00:08:51.825 --> 00:08:56.388
which might be null, if it was missing and
then you run the code in that callback.

160
00:08:56.388 --> 00:09:02.132
So that's, in here, that's where we would
say, app.ports.onSesionChange.send.

161
00:09:02.132 --> 00:09:06.562
Also, you can setItem, very similar API
except here we're giving in the key and

162
00:09:06.562 --> 00:09:09.774
the value that we want to store
inside the storage system.

163
00:09:09.774 --> 00:09:14.389
And that also takes a callback which will

164
00:09:14.389 --> 00:09:19.010
execute based on whatever it's doing.

165
00:09:19.010 --> 00:09:21.462
I've already written
these into index.html.

166
00:09:21.462 --> 00:09:23.691
So there's no need to
actually change these things.

167
00:09:23.691 --> 00:09:26.026
But if you wanna go
look inside index.html,

168
00:09:26.026 --> 00:09:28.611
you can do that just to see
how things are wired up.

169
00:09:28.611 --> 00:09:32.253
And that'll be important to know what
names to use for the ports, because

170
00:09:32.253 --> 00:09:36.266
the port names need to correspond to the
names being used on the JavaScript side.

171
00:09:36.266 --> 00:09:39.635
Okay, one last note about
JavaScript interrupt via ports.

172
00:09:39.635 --> 00:09:42.568
There's a very important question to ask,
which is,

173
00:09:42.568 --> 00:09:44.814
who owns this particular piece of state?

174
00:09:44.814 --> 00:09:47.536
We're gonna cover this topic in
more depth in the advanced course.

175
00:09:47.536 --> 00:09:52.208
But it's very important not to have
multiple sources of truth as to who's in

176
00:09:52.208 --> 00:09:53.604
charge of that state.

177
00:09:53.604 --> 00:09:57.068
We really want it to be either Elm's in
charge of this particular piece of state

178
00:09:57.068 --> 00:09:57.910
or JavaScript is.

179
00:09:57.910 --> 00:10:01.528
In the case of our session,
we've made a conscious decision,

180
00:10:01.528 --> 00:10:04.889
we say you know what,
this session lives in localForage.

181
00:10:04.889 --> 00:10:08.380
It is localForage's job
to manage that session.

182
00:10:08.380 --> 00:10:11.181
We're gonna just sort of cache the current
session in the model, because we

183
00:10:11.181 --> 00:10:13.980
don't want to have to go and make
a round-trip and say, hey, JavaScript,

184
00:10:13.980 --> 00:10:17.166
what's the current value, what's the
current value, what's the current value.

185
00:10:17.166 --> 00:10:23.219
But is just a cache on top of that, we
view the source of truth as localForage.

186
00:10:23.219 --> 00:10:24.382
And it's important to pick one.

187
00:10:24.382 --> 00:10:27.627
If you sort of try to pick two and say,
well, Elm kind of in charge of it,

188
00:10:27.627 --> 00:10:29.977
then also,
JavaScript's kind of in charge of it.

189
00:10:29.977 --> 00:10:32.845
You can end up with some
really unfortunate bugs.

190
00:10:32.845 --> 00:10:36.185
So definitely important from a design
perspective to sort of pick one or

191
00:10:36.185 --> 00:10:36.748
the other.

192
00:10:36.748 --> 00:10:40.006
Okay, in the case of localForage,
JavaScript owns the state and

193
00:10:40.006 --> 00:10:41.497
Elm is just going to cache it.

194
00:10:41.497 --> 00:10:45.015
Cool, so we talked about
subscriptions which look like this.

195
00:10:45.015 --> 00:10:47.895
They're sort of like
the inverse of commands.

196
00:10:47.895 --> 00:10:50.804
They look like sub messages
instead of command message.

197
00:10:50.804 --> 00:10:54.271
We talked about some of the important
guarantees that Elm wants to preserve such

198
00:10:54.271 --> 00:10:55.677
as that all functions are pure.

199
00:10:55.677 --> 00:10:59.108
And we wanna preserve those guarantees
while we are inter-operating with

200
00:10:59.108 --> 00:11:02.329
JavaScript which has a different set
of guarantees that it abides by.

201
00:11:02.329 --> 00:11:06.096
We talked about how to send data to
JavaScript using a port that results in

202
00:11:06.096 --> 00:11:09.325
a command message that will send
that data out to JavaScript.

203
00:11:09.325 --> 00:11:13.728
And if JavaScript has wired up a callback
to that then that callback will execute

204
00:11:13.728 --> 00:11:16.959
receiving whatever value that
we sent over the wall to it.

205
00:11:16.959 --> 00:11:19.788
And finally,
we talked about how to receive data

206
00:11:19.788 --> 00:11:23.723
from JavaScript by specifying a port
that deals with a function that

207
00:11:23.723 --> 00:11:27.602
returns a message based on whatever
value we got from JavaScript.

208
00:11:27.602 --> 00:11:31.330
And then a subscription which in turn
says every time we get one of these from

209
00:11:31.330 --> 00:11:35.661
JavaScript, we're going to feed that to
update, then update's gonna do its thing.

