WEBVTT

1
00:00:00.380 --> 00:00:01.580
&gt;&gt; Richard Feldman: So
we've seen this different syntax,

2
00:00:01.580 --> 00:00:04.620
but we haven't really
seen what the benefit is.

3
00:00:04.620 --> 00:00:07.630
So so far we've seen some of the costs
of Elm, you have to learn a new syntax,

4
00:00:07.630 --> 00:00:10.230
but we haven't really seen
any of the benefits yet.

5
00:00:10.230 --> 00:00:11.800
So let's talk about those briefly.

6
00:00:11.800 --> 00:00:13.970
So in JavaScript let's say we
write our pluralized function,

7
00:00:13.970 --> 00:00:17.350
and we say pluralize "leaf",
"leaves" in one, it works out.

8
00:00:17.350 --> 00:00:21.140
If we say pluralize "leaf", "leaves" in 3
it again gives us the correct answer, but

9
00:00:21.140 --> 00:00:22.910
now let's see we make a mistake.

10
00:00:22.910 --> 00:00:26.110
So instead of returning singular,
we return singula.

11
00:00:26.110 --> 00:00:26.790
That's a mistake.

12
00:00:26.790 --> 00:00:27.730
Singula is not a thing.

13
00:00:27.730 --> 00:00:29.060
That doesn't exist.

14
00:00:29.060 --> 00:00:31.920
So, what's gonna happen if we do this?

15
00:00:31.920 --> 00:00:35.690
Well, if say pluralize leaf leaves in 3,
nothing's gonna happen.

16
00:00:35.690 --> 00:00:39.320
It's still gonna work because by
coincidence we didn't happen the traverse

17
00:00:39.320 --> 00:00:41.560
the path that led to the bug.

18
00:00:41.560 --> 00:00:45.380
If, on the other hand, we say pluralized
leaf leaves in one, it's not gonna work.

19
00:00:45.380 --> 00:00:47.390
What's gonna happen is we're
gonna get a runtime exception.

20
00:00:47.390 --> 00:00:48.610
Uncaught reference error.

21
00:00:48.610 --> 00:00:49.810
Singula is not defined.

22
00:00:49.810 --> 00:00:50.860
Which, yeah, okay, fair enough.

23
00:00:50.860 --> 00:00:51.790
Indeed it is not defined.

24
00:00:51.790 --> 00:00:55.490
So this would be an example of a crash.

25
00:00:55.490 --> 00:00:58.810
Not really what we want to give our
users in terms of user experience.

26
00:00:58.810 --> 00:01:00.900
Now typescript will do
a little bit better than that.

27
00:01:00.900 --> 00:01:05.440
If in typescript if we write
the same code, we'll get an error.

28
00:01:05.440 --> 00:01:09.340
So error TS2552, cannot find name singula,
did you mean singular?

29
00:01:09.340 --> 00:01:13.290
So, it identifies at compile time,
this is a mistake you made.

30
00:01:13.290 --> 00:01:17.210
I know that there's nothing
named singula in scope here, so

31
00:01:17.210 --> 00:01:21.870
you need to fix that before we will
compile the program and actually run it.

32
00:01:21.870 --> 00:01:23.420
How about Elm?

33
00:01:23.420 --> 00:01:24.690
If we make the same mistake in Elm,

34
00:01:24.690 --> 00:01:29.210
we say singula instead of singular
in the first branch of our if.

35
00:01:29.210 --> 00:01:30.110
Similar kind of thing.

36
00:01:30.110 --> 00:01:33.110
Cannot find variables singular, maybe
you want one of the following singular.

37
00:01:33.110 --> 00:01:37.820
So again this is much like type script Elm
is able to catch this at compile time and

38
00:01:37.820 --> 00:01:39.460
prevent that run time exception.

39
00:01:39.460 --> 00:01:41.290
Okay let's look at a different error.

40
00:01:41.290 --> 00:01:44.480
Let's say in JavaScript say if
quantity triple equals the string one.

41
00:01:44.480 --> 00:01:48.528
Now when we say pluralize leaf
leaves in three, it still works.

42
00:01:48.528 --> 00:01:51.600
Pluralize leaf leaves in 1
now it's back to the original

43
00:01:51.600 --> 00:01:55.380
broken case where things are not
working properly anymore.

44
00:01:55.380 --> 00:01:58.590
So these is also not what we want,
the whole reason we wrote these function

45
00:01:58.590 --> 00:02:01.450
was to avoid these edge
case bug from happening.

46
00:02:01.450 --> 00:02:04.640
And here we've made a mistake
that is still going to

47
00:02:04.640 --> 00:02:09.090
result in that bug being present, okay.

48
00:02:09.090 --> 00:02:13.060
So the root of that problem by
the way is that one, the string one,

49
00:02:13.060 --> 00:02:16.790
when compared with triple equals
to the number one returns false.

50
00:02:16.790 --> 00:02:20.300
Those are not considered to be
the same thing in JavaScript.

51
00:02:20.300 --> 00:02:23.150
And in Typescript, same thing.

52
00:02:23.150 --> 00:02:26.050
This will compile, this will run,
it just won't work properly.

53
00:02:26.050 --> 00:02:29.050
We will still has this bug
materialize at runtime.

54
00:02:29.050 --> 00:02:31.180
What about a Elm?

55
00:02:31.180 --> 00:02:33.090
With Elm, this actually won't compile.

56
00:02:33.090 --> 00:02:36.930
It'll say, the 3rd argument to function
pluralize is causing a mismatch.

57
00:02:36.930 --> 00:02:39.440
That is to say,
when we're calling pluralize up here,

58
00:02:39.440 --> 00:02:41.620
the 3rd argument is causing a mismatch.

59
00:02:41.620 --> 00:02:44.030
Function pluralize is expecting
the 3rd argument to be a string, but

60
00:02:44.030 --> 00:02:44.700
it is a number.

61
00:02:45.730 --> 00:02:49.360
So essentially Elm was able to figure out,
you know what this is gonna be a bug.

62
00:02:49.360 --> 00:02:52.780
If we write this expression,
this is always going to fail.

63
00:02:52.780 --> 00:02:53.730
Something is off there.

64
00:02:53.730 --> 00:02:55.250
I'm gonna tell you about
it at compile time and

65
00:02:55.250 --> 00:02:58.590
ask that you fix it before you
actually run this application.

66
00:02:58.590 --> 00:03:01.780
The way that Elm's able to do this is
using what's called type inference.

67
00:03:01.780 --> 00:03:05.280
So it essentially knows about all
the types that are in your program.

68
00:03:05.280 --> 00:03:10.340
By doing a process of sorting of with some
facts that it knows, one is a number,

69
00:03:10.340 --> 00:03:11.950
leaves is a string and
then going through and

70
00:03:11.950 --> 00:03:14.480
figuring out implications of those facts,
so it says okay.

71
00:03:14.480 --> 00:03:17.530
While seated,
you're comparing quantity to a string.

72
00:03:17.530 --> 00:03:19.450
Which means quantity must be string, but

73
00:03:19.450 --> 00:03:22.900
here I see that you're calling it passing
1 for quantity which is a number.

74
00:03:22.900 --> 00:03:24.710
So how can it be both a string and number?

75
00:03:24.710 --> 00:03:26.420
Something is off,
I'm gonna tell you about that.

76
00:03:26.420 --> 00:03:27.399
That's an error of compile time.

77
00:03:28.410 --> 00:03:31.020
Elm does type inference across everything.

78
00:03:31.020 --> 00:03:32.520
And I do mean everything.

79
00:03:32.520 --> 00:03:34.470
So there's no any type like
there is in TypeScript.

80
00:03:34.470 --> 00:03:38.760
There's no escape hatch where you can say,
trust me, I know what I'm doing.

81
00:03:38.760 --> 00:03:42.340
Elm's compiler really does do type
inference across 100% of every single

82
00:03:42.340 --> 00:03:48.000
value in your entire Elm program, and all
of the packages in the entire ecosystem.

83
00:03:48.000 --> 00:03:50.340
This is how we're able to
avoid runtime exceptions.

84
00:03:50.340 --> 00:03:53.020
Fundamentally, it's
the combination of Elm's

85
00:03:53.020 --> 00:03:56.430
insistence on doing type inference
across absolutely everything.

86
00:03:56.430 --> 00:03:58.310
And the way that
the libraries are designed,

87
00:03:58.310 --> 00:04:00.290
which we'll learn about through
the course of the workshop.

88
00:04:00.290 --> 00:04:02.580
This prevents this from happening.

89
00:04:02.580 --> 00:04:04.140
So yes, there is some new syntax to learn.

90
00:04:04.140 --> 00:04:06.620
There is some different
concepts to master.

91
00:04:06.620 --> 00:04:09.800
But ultimately,
the guarantees that this provides, and

92
00:04:09.800 --> 00:04:12.700
the reliability that results from
that is a pretty serious benefit.

