WEBVTT

1
00:00:00.000 --> 00:00:01.870
&gt;&gt; Richard Feldman: Let's talk about
some of the costs that Elm has.

2
00:00:01.870 --> 00:00:04.320
Number one it's learning
a new programming language.

3
00:00:04.320 --> 00:00:07.860
If you have a team of people who already
know and are comfortable with JavaScript

4
00:00:07.860 --> 00:00:11.360
learning a new programming language is of
course a cost of using this technology.

5
00:00:11.360 --> 00:00:15.148
And it's more work to learn a programming
language than it is to learn a library,

6
00:00:15.148 --> 00:00:18.230
a framework, something like that
because there's more there.

7
00:00:18.230 --> 00:00:20.189
There's also a smaller ecosystem.

8
00:00:20.189 --> 00:00:24.049
So, in the same way that Ruby has it's
own package ecosystem, Python has it's

9
00:00:24.049 --> 00:00:28.280
own package ecosystem, Java has it's own
package ecosystem, JavaScript does too.

10
00:00:28.280 --> 00:00:31.440
Elm also has it's own package
ecosystem that's totally separate

11
00:00:31.440 --> 00:00:33.390
from the JavaScript package ecosystem.

12
00:00:33.390 --> 00:00:36.370
Now it's a really nice ecosystem we'll see
some of the really nice characteristics

13
00:00:36.370 --> 00:00:40.290
that come from having a separate
ecosystem but it is a lot smaller, right.

14
00:00:40.290 --> 00:00:42.910
MPM is the biggest packaged
ecosystem in the world

15
00:00:42.910 --> 00:00:45.050
there's everything you could
possibly imagine on there.

16
00:00:45.050 --> 00:00:47.670
The same is not true of Elm's ecosystem.

17
00:00:47.670 --> 00:00:52.110
And finally, fewer Web APIs have
first-class support than JavaScript.

18
00:00:52.110 --> 00:00:56.010
Anytime the browser introduces a new
web API, like audio, video recording,

19
00:00:56.010 --> 00:00:58.760
stuff like that,
JavaScript has support for it on day one,

20
00:00:58.760 --> 00:01:01.490
as soon as browser's implemented,
JavaScript has support for it.

21
00:01:01.490 --> 00:01:05.050
Whereas Elm has to sorta implement
that on top of the JavaScript API, so

22
00:01:05.050 --> 00:01:06.780
there's a period of lag there.

23
00:01:06.780 --> 00:01:10.180
So if you want the absolute most
bleeding edge stuff, you're always gonna

24
00:01:10.180 --> 00:01:12.620
have that in JavaScript,
you're not always gonna have that in Elm.

25
00:01:12.620 --> 00:01:16.630
So not all the web APIs that are currently
out there, are covered by Elm, and

26
00:01:16.630 --> 00:01:19.260
thatâ€™s always going to be true,
to some extent, no matter what.

27
00:01:20.480 --> 00:01:23.617
Okay, so, given those costs,
why are companies choosing Elm,

28
00:01:23.617 --> 00:01:26.400
what are the benefits that
they are getting out of this?

29
00:01:26.400 --> 00:01:28.230
So I'm gonna talk about three things.

30
00:01:28.230 --> 00:01:30.370
One, is measurable technical advantages.

31
00:01:30.370 --> 00:01:35.060
Two is it makes hiring easier, this is a
counter intuitive result for most people.

32
00:01:35.060 --> 00:01:38.140
And three is, it's cohesive,
high-quality ecosystem.

33
00:01:38.140 --> 00:01:39.614
So we'll talk about each of these.

34
00:01:39.614 --> 00:01:43.770
So first of all measurable technical
advantages, one is bundle size.

35
00:01:43.770 --> 00:01:46.680
So this is something that's becoming
increasingly important to a lot

36
00:01:46.680 --> 00:01:49.270
of companies as single page
applications become more and

37
00:01:49.270 --> 00:01:54.340
more common as the way that people are
deploying their front-end applications.

38
00:01:54.340 --> 00:01:57.573
So we've got a lot of popular frameworks,
React, Angular, Vue, Ember,

39
00:01:57.573 --> 00:01:58.390
things like that.

40
00:01:58.390 --> 00:02:02.810
And then we've got some of the ones that
are sort of focused on smaller bundle

41
00:02:02.810 --> 00:02:06.885
size, like Preact, Svelte, or
even just writing raw JavaScript and

42
00:02:06.885 --> 00:02:09.183
Elm competes with the bottom row here.

43
00:02:09.183 --> 00:02:12.011
Elm is sort of a competitor to Preact,
and Svelte and

44
00:02:12.011 --> 00:02:15.355
just plain JavaScript in terms
of bundle sizes, it's much,

45
00:02:15.355 --> 00:02:19.175
much smaller than what you get with React,
Angular, Vue, or Ember.

46
00:02:19.175 --> 00:02:21.842
One of the differences,
though, as we'll see,

47
00:02:21.842 --> 00:02:25.972
Elm isn't sacrificing productivity to
get those gains, in fact, it's got

48
00:02:25.972 --> 00:02:30.378
quite a bit of productivity improvements
compared to, arguably, any of these.

49
00:02:30.378 --> 00:02:33.593
The way that Elm's able to achieve
these smaller bundle sizes is the fact,

50
00:02:33.593 --> 00:02:37.167
that it's a separate programming language,
it get's to play by separate rules,

51
00:02:37.167 --> 00:02:38.920
different rules than JavaScript does.

52
00:02:40.050 --> 00:02:42.630
Another is in terms of reliability.

53
00:02:42.630 --> 00:02:47.420
So this is a graph of our production
run time exceptions between 2015 and

54
00:02:47.420 --> 00:02:50.790
2018, which is when we've
been using Elm in production.

55
00:02:50.790 --> 00:02:54.325
So we have roll bar which detects
whenever our front end code crashes.

56
00:02:54.325 --> 00:02:58.119
[COUGH] This is a graph of the exceptions
that it's logged over that period of time.

57
00:02:58.119 --> 00:03:02.774
So JavaScript is about 60,000-ish and

58
00:03:02.774 --> 00:03:06.001
Elm this is the end of the graph.

59
00:03:06.001 --> 00:03:10.838
There actually, it has happened, for
a long time we had zero but eventually,

60
00:03:10.838 --> 00:03:15.767
despite Elm's sort of goal of no runtime
exceptions, we did actually hit one.

61
00:03:15.767 --> 00:03:20.635
It was a very sad day, but it's not enough
to actually put a pixel on the graph, so

62
00:03:20.635 --> 00:03:23.513
it's not literally zero but
it is negligible.

63
00:03:23.513 --> 00:03:26.497
Also worth noting that the thing
that actually caused the crash,

64
00:03:26.497 --> 00:03:28.370
no longer exists in the language.

65
00:03:28.370 --> 00:03:31.247
So it would no longer be possible
today [LAUGH] and we'd be,

66
00:03:31.247 --> 00:03:34.725
still have a completely unblemished
record if not for that one thing.

67
00:03:34.725 --> 00:03:37.767
So this is something that,
depending on who you ask,

68
00:03:37.767 --> 00:03:41.290
either sounds unbelievable
like there's some sorta trick.

69
00:03:41.290 --> 00:03:45.751
Like it must be swallowing errors or
it must be doing something else that's not

70
00:03:45.751 --> 00:03:49.505
quite exceptions but is essentially
the same thing as exceptions.

71
00:03:49.505 --> 00:03:53.595
But as experienced Elm programmers will
tell you, no it's just that the compiler

72
00:03:53.595 --> 00:03:56.510
catches them all at compile time and
tells you about them.

73
00:03:56.510 --> 00:04:00.940
And as we'll see over the course of
the workshop, it's really difficult

74
00:04:00.940 --> 00:04:04.733
to accidentally cause a production
runtime exception in Elm.

75
00:04:04.733 --> 00:04:08.068
Onboarding, this is something else
that people seem to worry about but

76
00:04:08.068 --> 00:04:11.960
we've had the experience of hiring people
straight out of a JavaScript boot camp,

77
00:04:11.960 --> 00:04:16.080
and having this be essentially their
first professional programming job ever.

78
00:04:16.080 --> 00:04:19.942
And they're writing production Elm in
their first week of their first job as

79
00:04:19.942 --> 00:04:20.733
a programmer.

80
00:04:20.733 --> 00:04:22.397
We haven't seen that be a problem and

81
00:04:22.397 --> 00:04:25.737
I don't think that other companies
have either, from what I've heard.

82
00:04:25.737 --> 00:04:30.539
And finally, we come to the ecosystem, so
the sort of the ecosystem advantage that,

83
00:04:30.539 --> 00:04:31.630
Elm has.

84
00:04:31.630 --> 00:04:34.447
So in JavaScript, let's say I'm
starting a new JavaScript project, and

85
00:04:34.447 --> 00:04:37.531
I start off with, yes, I'm going to use
JavaScript for this project, and I think

86
00:04:37.531 --> 00:04:40.600
I wanna be compatible with older browser,
so maybe I'm gonna introduce Babel.

87
00:04:40.600 --> 00:04:42.750
And I think actually,
I might want some type checking so

88
00:04:42.750 --> 00:04:45.498
maybe I'm gonna get TypeScript
involve although there's also Flow,

89
00:04:45.498 --> 00:04:48.400
which seems to be less popular than
TypeScript, but Facebook uses it.

90
00:04:48.400 --> 00:04:50.477
Facebook has a big,
high quality engineering team,

91
00:04:50.477 --> 00:04:52.008
so maybe I should look into that first.

92
00:04:52.008 --> 00:04:54.095
So it's not just that
you choose JavaScript,

93
00:04:54.095 --> 00:04:56.986
it's that you have to pick
a particular dialect of JavaScript,

94
00:04:56.986 --> 00:05:01.310
then once you've got your dialect set,
okay well, I'm gonna need to build my UI.

95
00:05:01.310 --> 00:05:04.523
It's pretty uncommon to build UIs
just using vanilla JavaScript, so

96
00:05:04.523 --> 00:05:08.061
I'll think about something like, okay,
maybe I'll use Angular or React or

97
00:05:08.061 --> 00:05:11.728
ViewJS or Amber, one of these different
technologies to handle my View Logic.

98
00:05:11.728 --> 00:05:14.348
Then I think I want a state
management solution for my apps, say,

99
00:05:14.348 --> 00:05:16.459
because a lot of these
aren't concerned with that.

100
00:05:16.459 --> 00:05:20.511
They don't come with an app state
management solution out the box so

101
00:05:20.511 --> 00:05:24.351
maybe I'm gonna get into something
like Redux, MobX or Relay or

102
00:05:24.351 --> 00:05:26.715
maybe I'll go the Observables route.

103
00:05:26.715 --> 00:05:30.549
And then I think okay, well, that's
interesting although Redux and TypeScript,

104
00:05:30.549 --> 00:05:32.440
do they necessarily play well together?

105
00:05:32.440 --> 00:05:35.958
[SOUND] Okay, well,
we'll deal with that when we come to it.

106
00:05:35.958 --> 00:05:38.537
But then I gotta think about async and
I like, okay,

107
00:05:38.537 --> 00:05:42.498
well maybe I wanna do like redux-sagas or
redux-thunks or redux-promises.

108
00:05:42.498 --> 00:05:46.890
Or maybe redux-bservables because I don't
necessarily need to use observables for

109
00:05:46.890 --> 00:05:49.943
async, even though I may or
may not be using them for state.

110
00:05:49.943 --> 00:05:53.229
And then I think I got utility
functions like maybe I want lodash,

111
00:05:53.229 --> 00:05:56.260
maybe I want jQuery, Immutable JS, Ramda.

112
00:05:56.260 --> 00:05:59.164
All of these are different alternatives
that may or may not mix and match well.

113
00:05:59.164 --> 00:06:01.300
If I'm using jQuery,
is that gonna work super with React?

114
00:06:01.300 --> 00:06:03.754
Not really designed to work together,
Immutable JS may be a better fit.

115
00:06:03.754 --> 00:06:07.034
Maybe jQuery has some stuff that I like,
kinda old school and

116
00:06:07.034 --> 00:06:11.080
familiar and Immutable JS and Redux,
a lot of those play together.

117
00:06:11.080 --> 00:06:14.961
And then I want some third party packages,
so I'm gonna use MPM or

118
00:06:14.961 --> 00:06:18.359
Yarn which is built on top of MPM but
it's different CLI.

119
00:06:18.359 --> 00:06:22.692
And then maybe I want dependently type so
that I can get TypeScript binding.

120
00:06:22.692 --> 00:06:25.368
So that doesn't necessarily play well with
flow but if I show slow then I can get

121
00:06:25.368 --> 00:06:28.110
flow type but that doesn't necessarily
play well with TypeScripts.

122
00:06:28.110 --> 00:06:32.445
And then finally I have ES6 modules which
if I want tree shaking I get ES6 modules

123
00:06:32.445 --> 00:06:35.887
but not all these packages use ES6 so
maybe the tree shaking is or

124
00:06:35.887 --> 00:06:36.995
isn't gonna work.

125
00:06:36.995 --> 00:06:40.808
Okay, so this is a lot of stuff and

126
00:06:40.808 --> 00:06:45.313
these things compound on one another.

127
00:06:45.313 --> 00:06:48.858
And deciding to build a new project in
JavaScript involves making a lot of

128
00:06:48.858 --> 00:06:52.461
decisions and accepting that not all
the decisions you make are going to be

129
00:06:52.461 --> 00:06:54.620
compatible with one another.

130
00:06:54.620 --> 00:06:57.837
In contrast, in Elm,
there's one dialect that's called Elm.

131
00:06:57.837 --> 00:07:00.152
There's no stack for
building different variants of Elm,

132
00:07:00.152 --> 00:07:02.720
there's just Elm that's it
that's what everyone uses.

133
00:07:02.720 --> 00:07:06.618
In terms of UI, you have a view function,
that's it, that's all there is.

134
00:07:06.618 --> 00:07:09.680
In terms of state,
you have a thing called model, that's it.

135
00:07:09.680 --> 00:07:11.432
Async is all done with update.

136
00:07:11.432 --> 00:07:12.340
Utilities?

137
00:07:12.340 --> 00:07:16.921
Elm ships with immutable functional core
libraries, and that's what everyone uses.

138
00:07:16.921 --> 00:07:19.738
As far as packages,
there's a package manager built in,

139
00:07:19.738 --> 00:07:23.186
you just use Elm install, and
every package in the entire Elm ecosystem

140
00:07:23.186 --> 00:07:27.920
follows all of these things and they
all work really, really well together.

141
00:07:27.920 --> 00:07:32.470
And all of these concepts are things
that are true for every Elm application,

142
00:07:32.470 --> 00:07:37.378
every Elm package in the entire ecosystem
and we're gonna learn all of them today.

143
00:07:37.378 --> 00:07:42.273
So, to sum up, so the reason that
companies are choosing Elm is number one,

144
00:07:42.273 --> 00:07:44.540
a cohesive ecosystem.

145
00:07:44.540 --> 00:07:47.080
Number two, it is fast,
it has a nice performance.

146
00:07:47.080 --> 00:07:49.700
It is reliable, no runtime exceptions.

147
00:07:49.700 --> 00:07:53.136
Tiny, tiny assets and of course,
no semicolon debates.

148
00:07:53.136 --> 00:07:54.590
Arguably the biggest benefit of all.

