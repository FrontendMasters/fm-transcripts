WEBVTT

1
00:00:00.000 --> 00:00:01.001
&gt;&gt; Richard Feldman: Let's move on and

2
00:00:01.001 --> 00:00:04.214
talk about some function
guarantees that we have in Elm.

3
00:00:04.214 --> 00:00:08.909
So one guarantee that we have is every Elm
function if you give it the same arguments

4
00:00:08.909 --> 00:00:12.121
you're gonna get the same
return value no matter what.

5
00:00:12.121 --> 00:00:15.771
Same arguments,
same return value no exceptions.

6
00:00:15.771 --> 00:00:20.123
So here's an example of a function in
JavaScript that does not have that

7
00:00:20.123 --> 00:00:21.292
characteristic.

8
00:00:21.292 --> 00:00:25.090
You call Math.random with the same
argument or just say no arguments.

9
00:00:25.090 --> 00:00:27.968
You expect to get back
a not the same result.

10
00:00:27.968 --> 00:00:30.615
In fact,
if you didn't give back the same result,

11
00:00:30.615 --> 00:00:33.274
Math.random would be very boring and
not useful.

12
00:00:33.274 --> 00:00:37.096
It's a very important property of that
function that it gives you back different

13
00:00:37.096 --> 00:00:38.618
results every time you call it.

14
00:00:38.618 --> 00:00:41.183
Or at least most of the time you call it.

15
00:00:41.183 --> 00:00:44.098
However, because elm has this guarantee,

16
00:00:44.098 --> 00:00:47.816
this can not possibly be the API for
Elm's randomness.

17
00:00:47.816 --> 00:00:50.703
This just wouldn't work because it
doesn't fit with Elm's guarantee.

18
00:00:50.703 --> 00:00:55.124
So, instead we have something
called random.generate

19
00:00:55.124 --> 00:00:58.170
which works a little bit differently.

20
00:00:58.170 --> 00:01:02.075
So to illustrate sort of how
random.generate works and how it's

21
00:01:02.075 --> 00:01:07.193
different from math.random, let's say
that we're going to implement a feature.

22
00:01:07.193 --> 00:01:10.298
So, you know how, like, in chat apps a lot
of the time you'll start up the chat app

23
00:01:10.298 --> 00:01:13.184
and the first thing it'll do is it'll
show you a randomly chosen greeting.

24
00:01:13.184 --> 00:01:14.786
Like, hey, how's it going?

25
00:01:14.786 --> 00:01:16.091
Or, today's a nice day.

26
00:01:16.091 --> 00:01:17.917
Or, you should get outside more.

27
00:01:17.917 --> 00:01:20.813
Something like that.

28
00:01:20.813 --> 00:01:25.506
So let's see if we wanted to pick one of
those at random to display to the user.

29
00:01:25.506 --> 00:01:28.374
Well just by the type
of this function here,

30
00:01:28.374 --> 00:01:32.869
pickGreeting list string to string,
I could tell you that this is not

31
00:01:32.869 --> 00:01:36.686
going to give me a different
greeting every time I call it.

32
00:01:36.686 --> 00:01:40.591
In fact I can be quite sure that if I give
it the same list of greetings it's gonna

33
00:01:40.591 --> 00:01:44.673
choose the same one every single time,
because again if you call an Elm function,

34
00:01:44.673 --> 00:01:48.046
pass the same arguments you have to
get the same results every time,

35
00:01:48.046 --> 00:01:49.672
that's a rule of the language.

36
00:01:49.672 --> 00:01:53.148
So if I call it passing the same fixed
list of greetings, well, I'm just,

37
00:01:53.148 --> 00:01:56.035
every user is gonna see that
same greeting every single time.

38
00:01:56.035 --> 00:01:59.278
It's unavoidable,
that's just a design characteristic.

39
00:01:59.278 --> 00:02:02.920
So that sort of can't be
how we're gonna do this.

40
00:02:02.920 --> 00:02:06.063
Okay, what we can do
instead is we can do this.

41
00:02:06.063 --> 00:02:10.553
pickGreeting takes a list of strings,
sort of the pool of potential

42
00:02:10.553 --> 00:02:14.670
greetings to show the user, and
it's gonna return a Cmd Msg.

43
00:02:14.670 --> 00:02:16.809
What is a command?

44
00:02:16.809 --> 00:02:21.500
Okay so going back to our Elm architecture
diagram just a quick recap of how

45
00:02:21.500 --> 00:02:24.007
we've ended up where we are right now.

46
00:02:24.007 --> 00:02:27.863
We saw model, view, and update and
how they relate to one another,

47
00:02:27.863 --> 00:02:32.346
view returns some HTMLs such as like,
you know, an h1 that has the text feed.

48
00:02:32.346 --> 00:02:35.650
Potentially those HTML
values have handlers on

49
00:02:35.650 --> 00:02:40.532
them that respond to user inputs by
sending messages through update.

50
00:02:40.532 --> 00:02:44.740
Initially we had our messages being
described as records with description and

51
00:02:44.740 --> 00:02:48.133
data but we kinda saw that that
didn't really scale very well.

52
00:02:48.133 --> 00:02:51.497
So we ended up refactoring it
a little bit later to this,

53
00:02:51.497 --> 00:02:56.007
where now we have custom types for
this and variance that hold onto whatever

54
00:02:56.007 --> 00:03:00.090
additional metadata we need about
the message that update's going

55
00:03:00.090 --> 00:03:03.625
to need to use with the current
model to return a new model.

56
00:03:03.625 --> 00:03:07.638
Okay, that's where we are right now.

57
00:03:07.638 --> 00:03:11.932
Commands essentially introduce
something new to this.

58
00:03:11.932 --> 00:03:14.746
It gives update a new capability.

59
00:03:14.746 --> 00:03:19.835
So previously, all update could do is it
would require a new model, and that's it.

60
00:03:19.835 --> 00:03:22.715
It would say, give me a message
on the current model, and

61
00:03:22.715 --> 00:03:25.296
I will give you back the new
model to transition to.

62
00:03:25.296 --> 00:03:29.820
It's still gonna be able to do that in
this new world we're about to move to, but

63
00:03:29.820 --> 00:03:32.601
it's gonna have one more
addition capability.

64
00:03:32.601 --> 00:03:37.550
And it's gonna be based
around this idea of the Msg.

65
00:03:37.550 --> 00:03:42.756
So Msg fundamentally its job is it's
how the Elm Runtime talks to update.

66
00:03:42.756 --> 00:03:47.170
Up to this point, the only thing it's
had to say to update is here is some

67
00:03:47.170 --> 00:03:51.230
user interaction that happened,
like the user clicked a thing.

68
00:03:51.230 --> 00:03:56.170
We saw on input in a previous exercise
when the user was typing into a thing.

69
00:03:56.170 --> 00:04:01.760
Fundamentally, the only thing the Elm
Runtime has had to say to update is,

70
00:04:01.760 --> 00:04:05.589
here is a piece of user
interaction that happened.

71
00:04:05.589 --> 00:04:11.323
Cmds introduce a second thing that
the Elm Runtime can say to update.

72
00:04:11.323 --> 00:04:15.096
So this is something that goes
essentially from update and

73
00:04:15.096 --> 00:04:19.639
then to the Elm Runtime and then
the Runtime sends a message to update as

74
00:04:19.639 --> 00:04:22.491
a result of what update
said to the Runtime.

75
00:04:22.491 --> 00:04:28.304
So whereas the user interaction case is
coming from view, view it says here's

76
00:04:28.304 --> 00:04:34.398
my message that I want the Runtime to send
to update in response to this user input.

77
00:04:34.398 --> 00:04:36.613
Commands come from update.

78
00:04:36.613 --> 00:04:42.689
So this is update saying hey I want you,
the Runtime, to go run this command.

79
00:04:42.689 --> 00:04:47.967
And when you're done, give me back this
message, and I'll continue on from there.

80
00:04:47.967 --> 00:04:49.081
So, essentially,

81
00:04:49.081 --> 00:04:52.362
a command is a description of
something that you want done.

82
00:04:52.362 --> 00:04:55.656
It's not a side effect, in the sense that,
when you instantiate a command,

83
00:04:55.656 --> 00:04:56.478
nothing happens.

84
00:04:56.478 --> 00:05:00.733
If you want, you can instantiate a
thousand commands in a row inside update.

85
00:05:00.733 --> 00:05:03.599
Right away and nothing will
happen as we lost any of them.

86
00:05:03.599 --> 00:05:06.966
It's basically just a description written
down and saying, hey dear Runtime,

87
00:05:06.966 --> 00:05:09.106
please do this and
then tell me about what happens.

88
00:05:09.106 --> 00:05:10.243
Thank you.

89
00:05:10.243 --> 00:05:14.450
And when update returns, now it's going
to return a tupple of the model, so

90
00:05:14.450 --> 00:05:15.514
just like before.

91
00:05:15.514 --> 00:05:17.650
So we're gonna still be
returning the new model.

92
00:05:17.650 --> 00:05:21.273
As well as optionally
some commands to run.

93
00:05:21.273 --> 00:05:24.401
And so the Runtime is gonna say okay
I know what to do with the new model,

94
00:05:24.401 --> 00:05:27.444
do the same thing as before,
pass it to view, continue that cycle.

95
00:05:27.444 --> 00:05:30.315
But also when we look at this
command you gave me, and

96
00:05:30.315 --> 00:05:34.886
the commands is gonna tell me possibly to
do something, so what's we're building

97
00:05:34.886 --> 00:05:38.539
up to is we're going to use it for
a http request, but in this case,

98
00:05:38.539 --> 00:05:42.785
we will also use if for randomness So
random.generate gives us back a command

99
00:05:42.785 --> 00:05:47.011
message that says hey, Runtime,
go randomly produce one of these values.

100
00:05:47.011 --> 00:05:49.472
Randomly pick from one of these greetings.

101
00:05:49.472 --> 00:05:51.748
Yeah, you can choose
a different one every time.

102
00:05:51.748 --> 00:05:54.016
I don't care, but when you're done,

103
00:05:54.016 --> 00:05:56.916
send me a message telling
me which one you picked.

104
00:05:57.939 --> 00:06:01.885
&gt;&gt; Richard Feldman: And so in this way
we sort of isolated that unpredictable,

105
00:06:01.885 --> 00:06:06.166
that the side effect-y kind of
element inside of the Runtime.

106
00:06:06.166 --> 00:06:08.645
It's the Runtime's job
to do all of that stuff.

107
00:06:08.645 --> 00:06:10.247
Update is not concerned with that.

108
00:06:10.247 --> 00:06:13.986
Update just says here is the description
of what I want done, and

109
00:06:13.986 --> 00:06:17.381
every single time you call
update with the same message and

110
00:06:17.381 --> 00:06:21.743
model you are 100% guaranteed to get
back the same model as a result, or

111
00:06:21.743 --> 00:06:25.850
the same model value as a result and
the same command value as a result.

112
00:06:25.850 --> 00:06:29.778
So update itself still obeys
this guarantee that Elm has.

113
00:06:29.778 --> 00:06:31.552
Same argument, same result.

114
00:06:31.552 --> 00:06:36.603
But we're still able to end up
with a randomly selected greeting.

115
00:06:36.603 --> 00:06:40.828
So, as an example here we got
pickGreeting, has a list of strings,

116
00:06:40.828 --> 00:06:46.317
it returns a command message-,update can
call this function, return that command,

117
00:06:46.317 --> 00:06:51.682
and say, hey, Runtime, when you're done,
give me back a SetGreeting5 message.

118
00:06:51.682 --> 00:06:55.999
And I'm gonna process that the same way I
would process any message that I got from

119
00:06:55.999 --> 00:06:56.580
the view.

