WEBVTT

1
00:00:00.000 --> 00:00:02.915
&gt;&gt; Richard Feldman: We gonna get started
with this, and go through this, and

2
00:00:02.915 --> 00:00:05.236
learn them over the course
of this workshop.

3
00:00:05.236 --> 00:00:09.243
The structure of the workshop is
essentially we're going to be working on

4
00:00:09.243 --> 00:00:10.672
a RealWorld example app.

5
00:00:10.672 --> 00:00:12.312
So if you haven't heard of RealWorld,

6
00:00:12.312 --> 00:00:14.358
it's sort of the bigger
cousin enough to do MBC.

7
00:00:14.358 --> 00:00:19.373
It's basically designed to be a Medium
clone called Conduit, like medium.com.

8
00:00:19.373 --> 00:00:22.389
Get it, Medium, Conduit?

9
00:00:22.389 --> 00:00:25.810
And essentially, you've got these
concepts of you can make a post.

10
00:00:25.810 --> 00:00:26.917
You can post an article.

11
00:00:26.917 --> 00:00:28.690
You can edit an article.

12
00:00:28.690 --> 00:00:31.888
You can see a feed of articles
of people that you follow.

13
00:00:31.888 --> 00:00:33.278
You can follow and unfollow people.

14
00:00:33.278 --> 00:00:34.274
You can like things.

15
00:00:34.274 --> 00:00:38.344
You can tag articles and
do a feed in terms of the tags.

16
00:00:38.344 --> 00:00:42.079
And it also got a lot of basic
web app stuff like login,

17
00:00:42.079 --> 00:00:44.579
logout, sign-up, and so forth.

18
00:00:44.579 --> 00:00:47.809
So we're gonna start off by just rendering
a basic static page, and then we're gonna,

19
00:00:47.809 --> 00:00:50.229
over the course of the workshop,
expand, expand, and expand.

20
00:00:50.229 --> 00:00:53.633
And eventually we're gonna transition
from the thing that we've built up

21
00:00:53.633 --> 00:00:57.540
from scratch, to actually working on the
fully completed version of this code base.

22
00:00:57.540 --> 00:01:01.632
And we're actually gonna learn how to do
things like fix bugs, and get a feel for

23
00:01:01.632 --> 00:01:03.220
what it feels like to modify and

24
00:01:03.220 --> 00:01:06.109
to work on to maintain
an existing larger Elm code base.

25
00:01:06.109 --> 00:01:08.826
Because that's really where
most of Elm's benefits come up.

26
00:01:08.826 --> 00:01:11.603
It's not when you're building
a toy application, but rather,

27
00:01:11.603 --> 00:01:15.038
when you're actually working on some
application that's got a substantial bit

28
00:01:15.038 --> 00:01:15.660
of heft to it.

29
00:01:15.660 --> 00:01:20.198
Most of Elm's benefits are sorta of, for
applications that get big and serious, and

30
00:01:20.198 --> 00:01:22.416
need to be maintained over the long term.

31
00:01:22.416 --> 00:01:26.052
So, we've got nine lessons and
nine exercises that go with them.

32
00:01:26.052 --> 00:01:29.818
And we're gonna start out with part one,
rendering a page.

33
00:01:29.818 --> 00:01:30.788
Before we get in to this,

34
00:01:30.788 --> 00:01:33.299
are there any questions on any of
the stuff we just talked about?

35
00:01:33.299 --> 00:01:34.306
All right, let's dive in.

36
00:01:34.306 --> 00:01:35.910
Talk about rendering a page.

37
00:01:35.910 --> 00:01:37.332
So we've got four things
we're gonna talk about here.

38
00:01:37.332 --> 00:01:38.526
First we're gonna talk about compiling.

39
00:01:38.526 --> 00:01:42.134
Just like how to build an Elm
application using the command line.

40
00:01:42.134 --> 00:01:45.043
We'll talk about functions with
the syntax and how Elm functions work.

41
00:01:45.043 --> 00:01:47.607
We'll talk about if-expressions,
pretty basic conditional.

42
00:01:47.607 --> 00:01:49.822
And finally,
we're gonna talk about the virtual DOM,

43
00:01:49.822 --> 00:01:51.530
which is how Elm accomplishes rendering.

44
00:01:51.530 --> 00:01:53.771
All right, let's start with compiling.

45
00:01:53.771 --> 00:01:57.302
So as previously noted Elm
compiles through JavaScript.

46
00:01:57.302 --> 00:02:01.446
The way that works is we will start
up with file called Main.elm and

47
00:02:01.446 --> 00:02:06.777
we will end up with a file called elm.js,
after running it through the elm compiler.

48
00:02:06.777 --> 00:02:10.759
So the way that works is you have your
basic elm executable, which you should all

49
00:02:10.759 --> 00:02:14.165
have on your path at this point
based on the workshop instructions.

50
00:02:14.165 --> 00:02:18.662
You say elm make Main.elm and that's gonna
tell the compiler read this Elm code,

51
00:02:18.662 --> 00:02:23.225
compile it, and then figure out what the
corresponding JavaScript should be, and

52
00:02:23.225 --> 00:02:23.898
output it.

53
00:02:23.898 --> 00:02:27.509
You'll then give it a --output flag to say
the name of the JavaScript file you want.

54
00:02:27.509 --> 00:02:29.100
And that's it you're done.

55
00:02:29.100 --> 00:02:33.547
So there's no need to have an entire
eco-system of build tools to build Elm

56
00:02:33.547 --> 00:02:34.544
applications.

57
00:02:34.544 --> 00:02:39.273
Really all you need to get up and running
with Elm is this one Elm executable.

58
00:02:39.273 --> 00:02:41.611
If, on the other hand,
you already have some build tools.

59
00:02:41.611 --> 00:02:44.942
Well, it's looks like, let's say you
have an existing JavaScript application

60
00:02:44.942 --> 00:02:46.497
with webpack and all that good stuff.

61
00:02:46.497 --> 00:02:48.772
Then you can introduce this using plugins.

62
00:02:48.772 --> 00:02:51.742
So there are plugins for webpack and
grunt and things like that,

63
00:02:51.742 --> 00:02:53.342
depending on what you're using.

64
00:02:53.342 --> 00:02:57.059
So you can either use it like this, like
we're going to use it in the workshop with

65
00:02:57.059 --> 00:02:59.642
just elm make and
that being the only tool that you need.

66
00:02:59.642 --> 00:03:04.306
Or, if you've already got a more elaborate
build process you can also incorporate

67
00:03:04.306 --> 00:03:06.848
this into that build
process using plugins.

68
00:03:06.848 --> 00:03:10.067
When you run elm make, you're probably
gonna see this message quite a bit.

69
00:03:10.067 --> 00:03:11.929
Dependencies loaded from local cache.

70
00:03:11.929 --> 00:03:12.995
Dependencies ready.

71
00:03:12.995 --> 00:03:15.975
So what this means is,
whenever elm runs elm make.

72
00:03:15.975 --> 00:03:18.850
The first thing that it does is
it looks at your dependencies,

73
00:03:18.850 --> 00:03:20.966
which you specified in your elm.json file.

74
00:03:20.966 --> 00:03:23.960
And it says, hey, are there any
packages that we need to download?

75
00:03:23.960 --> 00:03:27.619
And if there are any packages that it
needs to download, it will just download

76
00:03:27.619 --> 00:03:31.187
them right when you run make and
then make them available as it's running.

77
00:03:31.187 --> 00:03:35.148
All dependencies are downloaded
once to a local cache directory in

78
00:03:35.148 --> 00:03:36.497
your home directory.

79
00:03:36.497 --> 00:03:37.934
They're not downloaded per project.

80
00:03:37.934 --> 00:03:41.065
So when we go into these different parts,
we have exercises for

81
00:03:41.065 --> 00:03:42.493
part one through part nine.

82
00:03:42.493 --> 00:03:46.298
You're only getting the dependencies for
all of those packages once.

83
00:03:46.298 --> 00:03:49.954
And each time you run elm make in each of
those folders, it's just going to download

84
00:03:49.954 --> 00:03:53.160
any new packages that it needs,
that you've never downloaded before.

85
00:03:53.160 --> 00:03:56.487
Everything else is just gonna be from the
cache, so it's most common to see that,

86
00:03:56.487 --> 00:03:58.657
yeah, when you run a new project,
when you build it,

87
00:03:58.657 --> 00:04:01.987
you don't actually need to download any
new dependencies because as it happens,

88
00:04:01.987 --> 00:04:04.760
you've already used all those
dependencies at least once before.

89
00:04:04.760 --> 00:04:07.976
We'll see a little bit more of
that in the actual exercise.

90
00:04:07.976 --> 00:04:09.507
And then finally when
it's done it'll say cool.

91
00:04:09.507 --> 00:04:11.757
Success, compiled 1 module.

92
00:04:11.757 --> 00:04:13.937
You can have multiple modules, so

93
00:04:13.937 --> 00:04:18.760
Main.elm might import several other
modules with .elm file extensions.

94
00:04:18.760 --> 00:04:22.085
But at the end of the day all you need
to do is .elm make at your entry point.

95
00:04:22.085 --> 00:04:25.747
That's sort of the main file from which
everything else is going to get imported.

96
00:04:25.747 --> 00:04:28.592
So it might say compiled one
module if all you have is main.

97
00:04:28.592 --> 00:04:31.166
But if, let's say, you have 20 modules and

98
00:04:31.166 --> 00:04:34.874
maybe five of them change then it
would say compiled five modules.

99
00:04:34.874 --> 00:04:36.887
You don't need to run Elm make
on each of those modules.

100
00:04:36.887 --> 00:04:40.293
You just need to put it at the entry point
and it'll figure out all the other things

101
00:04:40.293 --> 00:04:42.967
that it needs to compile in order
to make that entry point work.

102
00:04:42.967 --> 00:04:46.637
Also worth noting that it's only going to
compile modules that have changed since

103
00:04:46.637 --> 00:04:49.570
the last time you ran it, or
if their dependencies have changed.

104
00:04:49.570 --> 00:04:52.820
So if you have 100 modules,
but only five of them changed,

105
00:04:52.820 --> 00:04:56.133
or maybe one of them changed,
but it had some dependencies that

106
00:04:56.133 --> 00:05:00.030
also needed to be updated, Elm's only
going to bother compiling those.

107
00:05:00.030 --> 00:05:05.013
So, it's sort of as efficient as possible
with your cpu, as well as your bandwidth,

108
00:05:05.013 --> 00:05:06.551
as well as your hard disk.

109
00:05:06.551 --> 00:05:09.113
Okay, so
once you've got your JavaScript file,

110
00:05:09.113 --> 00:05:12.110
we're gonna need to import
it into our index.html file.

111
00:05:12.110 --> 00:05:15.227
So this is done pretty similarly to how
you would import any JavaScript file.

112
00:05:15.227 --> 00:05:17.816
So, you add a script tag, src="elm.js".

113
00:05:17.816 --> 00:05:19.820
Maybe you also have a stylesheet with css.

114
00:05:19.820 --> 00:05:21.028
That's totally valid.

115
00:05:21.028 --> 00:05:23.720
In this workshop we're
going to have a css file,

116
00:05:23.720 --> 00:05:26.554
a stylesheet that sort of
styles our application.

117
00:05:26.554 --> 00:05:29.007
But it's also totally fine
not to have a stylesheet.

118
00:05:29.007 --> 00:05:32.242
You can do css in Elm,
just like you can in JavaScript.

119
00:05:32.242 --> 00:05:34.556
There's a library called elm.css for it,

120
00:05:34.556 --> 00:05:37.931
it's pretty nice I think the guy
who wrote it is very handsome and

121
00:05:37.931 --> 00:05:41.640
that's something that we use at work and
have been pretty happy with.

122
00:05:41.640 --> 00:05:43.563
But importing your JavaScript,

123
00:05:43.563 --> 00:05:47.072
your compile JavaScript is as
simple as adding a script tag.

124
00:05:47.072 --> 00:05:51.087
What that's gonna do is it's gonna
provide this Elm.main value.

125
00:05:51.087 --> 00:05:55.270
If you're using web pack or something like
that, this can be set up to be required.

126
00:05:55.270 --> 00:05:58.246
Depending on what your set up is.

127
00:05:58.246 --> 00:06:01.480
But, if you're not using something like
that it will just be made available as

128
00:06:01.480 --> 00:06:03.738
a global, which is how we'll do it for
this workshop.

129
00:06:03.738 --> 00:06:07.839
You call Elm.Main.init and
then you give it a node to render into.

130
00:06:07.839 --> 00:06:11.469
Now, this is the typical way that people
do things for incremental adoption of Elm.

131
00:06:11.469 --> 00:06:13.229
So, you have an existing Elm application.

132
00:06:13.229 --> 00:06:14.729
People will just say, you know what?

133
00:06:14.729 --> 00:06:16.106
I'm gonna make a new feature in Elm,

134
00:06:16.106 --> 00:06:18.070
it's just gonna be this one
part of the page though.

135
00:06:18.070 --> 00:06:22.344
It may be a sidebar or
one little widget on the page.

136
00:06:22.344 --> 00:06:25.608
And you can just call Elm.Main.init
on whatever node within

137
00:06:25.608 --> 00:06:28.820
the body that you want,
even if it's just one part of a page.

138
00:06:28.820 --> 00:06:32.689
As your applications get more elaborate,
you eventually get to the point where Elm

139
00:06:32.689 --> 00:06:35.839
is taking over the entire body and
doing routing and all that stuff,

140
00:06:35.839 --> 00:06:39.447
which is ultimately, what this example,
that we'll be working with does.

141
00:06:39.447 --> 00:06:42.942
But when you're using it at work and
just introducing it from the outset

142
00:06:42.942 --> 00:06:45.925
it's much more common to embed
it in a single node like this.

