WEBVTT

1
00:00:00.000 --> 00:00:03.751
&gt;&gt; Richard Feldman: This is another way
of representing our three possible tags.

2
00:00:03.751 --> 00:00:05.494
This is a custom type.

3
00:00:05.494 --> 00:00:09.094
So, we use this type keyword, and
then we give a name to that type, and

4
00:00:09.094 --> 00:00:11.550
then we specify
the different possibilities.

5
00:00:11.550 --> 00:00:14.572
So here we're saying,
tab has three possibilities.

6
00:00:14.572 --> 00:00:15.499
These are known as variance.

7
00:00:15.499 --> 00:00:19.420
One variance is your feed, another
is global feed, another is tag feed.

8
00:00:19.420 --> 00:00:22.571
A way that I can instantiate
these is I can say, okay,

9
00:00:22.571 --> 00:00:27.834
I'm gonna make something called yours, and
I'm gonna say, that is equal to YourFeed.

10
00:00:27.834 --> 00:00:29.831
So YourFeed is actually a value.

11
00:00:29.831 --> 00:00:31.736
It's a value whose type is Tab.

12
00:00:31.736 --> 00:00:33.725
That's why it's a custom type.

13
00:00:33.725 --> 00:00:36.248
We've created a new type out of thin air.

14
00:00:36.248 --> 00:00:40.410
So type alias, in contrast,
is just giving a name to an existing type.

15
00:00:40.410 --> 00:00:45.256
Custom types really are making a brand
new type that did not exist before.

16
00:00:45.256 --> 00:00:48.487
So, here we're saying yours
is equal to YourFeed.

17
00:00:48.487 --> 00:00:52.847
That means, that this now has the value
YourFeed and its type is Tab.

18
00:00:52.847 --> 00:00:58.833
We can do the same thing with global,
and these are now different values.

19
00:00:58.833 --> 00:01:02.697
So in some languages when you do
something like this, it will say,

20
00:01:02.697 --> 00:01:05.536
secretly under the hood,
this is just a number.

21
00:01:05.536 --> 00:01:08.742
This is the number zero, this the number
one, this is the number two, and

22
00:01:08.742 --> 00:01:10.267
we're just giving names to them.

23
00:01:10.267 --> 00:01:11.358
That's not how it is in Elm.

24
00:01:11.358 --> 00:01:15.267
In Elm, it really is the case,
these are just completely distinct values.

25
00:01:15.267 --> 00:01:18.685
Like if I said, yours equals equals
global, that would return false.

26
00:01:18.685 --> 00:01:22.458
It would say these are both tab values,
but they're different tab values.

27
00:01:22.458 --> 00:01:24.734
They're not equal to one another.

28
00:01:24.734 --> 00:01:26.057
Same thing with Tab.

29
00:01:26.057 --> 00:01:30.647
If I were to make a new one of these, I
would say, yeah, a TagFeed is not the same

30
00:01:30.647 --> 00:01:34.425
thing as a GlobalFeed,
which is not the same thing as YourFeed.

31
00:01:34.425 --> 00:01:37.638
YourFeed is equal to YourFeed,
so if I said yours = yours,

32
00:01:37.638 --> 00:01:39.003
that would return true.

33
00:01:39.003 --> 00:01:41.817
If I said global = global,
that would return true.

34
00:01:41.817 --> 00:01:44.818
And I don't need to use these
names,I just wrote them out,so that

35
00:01:44.818 --> 00:01:47.728
I could annotate them with type
to demonstrate how this relate.

36
00:01:47.728 --> 00:01:52.007
But if I just said capital
Y YourFeed == capital G GlobalFeed,

37
00:01:52.007 --> 00:01:53.759
that would return false.

38
00:01:53.759 --> 00:01:58.234
But If I said capital Y YourFeed
== capital Y YourFeed,

39
00:01:58.234 --> 00:02:00.199
that would return true.

40
00:02:00.199 --> 00:02:06.143
The reason for the capital letters here,
is that these are sort of reserved for

41
00:02:06.143 --> 00:02:11.022
Types and type annotations and
custom type variants like this.

42
00:02:11.022 --> 00:02:14.687
So when L, if you're a defining a new
value, like you're giving it a name,

43
00:02:14.687 --> 00:02:16.651
it has to start with a lowercase letter.

44
00:02:16.651 --> 00:02:20.652
If you're defining a new variant,that
starts an uppercase letter.

45
00:02:20.652 --> 00:02:23.378
We'll get to why that is momentarily.

46
00:02:23.378 --> 00:02:26.889
But, this is sort of the custom
type itself tab is the Type, And

47
00:02:26.889 --> 00:02:31.477
these are the variants, these three are
variants of the one ones that we defined.

48
00:02:31.477 --> 00:02:32.921
We can define as many or

49
00:02:32.921 --> 00:02:37.862
as few of those that we want with just
additional pipes and additional names.

50
00:02:37.862 --> 00:02:42.183
These language feature has various names
and different languages, sum types,

51
00:02:42.183 --> 00:02:46.377
union types, which is what they used to
be called in previous editions of ADT,

52
00:02:46.377 --> 00:02:48.554
which shorts for algebraic data types.

53
00:02:48.554 --> 00:02:51.766
That short calls them
discriminated unions,

54
00:02:51.766 --> 00:02:54.739
lots of different names for these things.

55
00:02:54.739 --> 00:02:56.810
So, this is one example of a custom type.

56
00:02:56.810 --> 00:03:00.622
Another example of a custom type
that we've seen before is Bool.

57
00:03:00.622 --> 00:03:03.991
This is how Bools defined,it has
two variants, one is called true,

58
00:03:03.991 --> 00:03:05.281
the others called false.

59
00:03:05.281 --> 00:03:09.808
And that's why Bool is True and
False are capitalized in Elm,

60
00:03:09.808 --> 00:03:12.256
is because this is a custom type.

61
00:03:12.256 --> 00:03:13.744
That's all it is.

62
00:03:13.744 --> 00:03:17.582
The essence of a custom type, is to define
these sort of different scenarios and

63
00:03:17.582 --> 00:03:19.258
just say, here's what they are.

64
00:03:19.258 --> 00:03:19.993
These are different.

65
00:03:19.993 --> 00:03:22.770
I'm not necessarily ascribing
any particular underlying

66
00:03:22.770 --> 00:03:23.997
representation to them.

67
00:03:23.997 --> 00:03:26.776
I'm just saying these
values are different.

