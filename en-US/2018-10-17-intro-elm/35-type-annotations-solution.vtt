WEBVTT

1
00:00:00.000 --> 00:00:03.511
&gt;&gt; Richard Feldman: So
let's go through the solutions here.

2
00:00:03.511 --> 00:00:06.390
So our first to do is we're
gonna change the annotation for

3
00:00:06.390 --> 00:00:08.817
all articles to be
allArticles : List Article.

4
00:00:08.817 --> 00:00:11.284
That's our goal here.

5
00:00:11.284 --> 00:00:15.842
So for that to be true we need to actually
have a definition of what an article is.

6
00:00:15.842 --> 00:00:22.385
And to do that we're gonna say type
alias Article = And that's it.

7
00:00:22.385 --> 00:00:25.017
So now we have defined what
it is to be an article.

8
00:00:25.017 --> 00:00:29.042
And we've said that allArticles is
a list of those, whatever that may be.

9
00:00:29.042 --> 00:00:32.759
To check our work,
we're just gonna use elm make again.

10
00:00:32.759 --> 00:00:35.891
Not because we're actually gonna
bring it up in the browser,

11
00:00:35.891 --> 00:00:38.917
just because the compiler will
tell us if we made a mistake.

12
00:00:38.917 --> 00:00:41.749
We can confirm this by changing
title to int and then recompiling.

13
00:00:41.749 --> 00:00:43.764
And then it's like, no, no, no, no, no.

14
00:00:43.764 --> 00:00:45.045
That's not what this is, and

15
00:00:45.045 --> 00:00:47.871
I'm going to actually highlight
the offending problem in here.

16
00:00:47.871 --> 00:00:51.916
Title, which I claimed was
an int is in fact a string.

17
00:00:51.916 --> 00:00:53.656
Hint: Want to convert
a String into an Int?

18
00:00:53.656 --> 00:00:55.563
Use the String.toInt function!

19
00:00:55.563 --> 00:00:56.586
That is a nice hint,

20
00:00:56.586 --> 00:01:00.693
although this case the problem is actually
just that I messed up the annotation.

21
00:01:00.693 --> 00:01:06.682
All right, place this comment,
with a type annotation for initialModel.

22
00:01:06.682 --> 00:01:09.244
This one is probably
the easiest one of the bunch.

23
00:01:09.244 --> 00:01:13.502
initialModel is a model,
sure enough, okay?

24
00:01:13.502 --> 00:01:16.981
Next one, replace this with
the type annotation for update.

25
00:01:16.981 --> 00:01:20.900
We saw what that one was on the slides,
no surprises here.

26
00:01:20.900 --> 00:01:25.915
Update takes a message and
a model, and returns a model.

27
00:01:25.915 --> 00:01:29.127
Confirm that that works,
yep, it's still good.

28
00:01:29.127 --> 00:01:30.700
Okay.

29
00:01:30.700 --> 00:01:33.363
This one we wanna replace
the type annotation for view.

30
00:01:33.363 --> 00:01:36.072
We also saw this one in the slides.

31
00:01:36.072 --> 00:01:38.727
Takes the model, returns HTML message.

32
00:01:38.727 --> 00:01:43.147
We do have our message type defined up
here just like we did on the slides,

33
00:01:43.147 --> 00:01:44.605
description and data.

34
00:01:44.605 --> 00:01:49.089
Okay, here we're going to replace this
one with another type annotation.

35
00:01:49.089 --> 00:01:51.201
But this one, view article,

36
00:01:51.201 --> 00:01:56.198
doesn't quite take the same argument
as our other view function did.

37
00:01:56.198 --> 00:01:59.837
So our main primary view function
which ends up calling this one,

38
00:01:59.837 --> 00:02:03.685
takes a model and returns HTML message,
this one does not, though.

39
00:02:03.685 --> 00:02:08.070
This one's a little bit different,
this just takes a single article.

40
00:02:08.070 --> 00:02:09.184
Let's confirm that.

41
00:02:09.184 --> 00:02:11.853
But if I try to claim that it takes
a whole model, it's like, no, no,

42
00:02:11.853 --> 00:02:12.414
no, no, no.

43
00:02:12.414 --> 00:02:18.113
That's a type mismatch, this really does
just take an article, not an entire model.

44
00:02:18.113 --> 00:02:19.135
This is pretty normal.

45
00:02:19.135 --> 00:02:23.737
Usually, when you're splitting up your
view into multiple smaller functions that

46
00:02:23.737 --> 00:02:26.857
help it out or helper functions
as we often refer to them.

47
00:02:26.857 --> 00:02:30.769
Usually, they tend to have narrower types
than the functions that are calling them.

48
00:02:30.769 --> 00:02:34.417
You only tend to see a whole lot
of view article, taking a model,

49
00:02:34.417 --> 00:02:39.012
which calls another function that takes
a model, it's usually getting more and

50
00:02:39.012 --> 00:02:41.530
more specific as you
break these things up.

51
00:02:41.530 --> 00:02:45.637
Ok, view banner is interesting because
it's actually not a function and

52
00:02:45.637 --> 00:02:49.825
we called it view because essentially
it's job is to describe some stuff.

53
00:02:49.825 --> 00:02:51.426
That goes into view.

54
00:02:51.426 --> 00:02:53.849
But, really it's just static HTML.

55
00:02:53.849 --> 00:02:57.931
It never changes there's nothing that it's
based on so it's just not a function.

56
00:02:57.931 --> 00:03:00.789
It's just a plain old chunk-a-static HTML,

57
00:03:00.789 --> 00:03:03.510
which is totally fine,
we can have that too.

58
00:03:03.510 --> 00:03:06.480
Confirm that everything still compiles and
it did.

59
00:03:06.480 --> 00:03:10.896
Okay, then we have a view tag
which takes two arguments,

60
00:03:10.896 --> 00:03:13.387
selected tag name and tag name.

61
00:03:13.387 --> 00:03:16.647
So both of those are strings.

62
00:03:16.647 --> 00:03:22.248
And here we can see something that is
sorta a red flag often in Elm programs.

63
00:03:22.248 --> 00:03:24.576
It's not necessarily a problem
that you have to fix.

64
00:03:24.576 --> 00:03:26.153
It's not something that
you have to change.

65
00:03:26.153 --> 00:03:29.691
But whenever I see two arguments
in a row of the same type,

66
00:03:29.691 --> 00:03:33.472
I know that I can mix those up and
the compiler can't help me.

67
00:03:33.472 --> 00:03:37.963
If I were to pass the selectedTagName
second accidentally and the tagName first,

68
00:03:37.963 --> 00:03:41.100
that would still compile
because they both are strings.

69
00:03:41.100 --> 00:03:43.632
The function will accept
them in either order,

70
00:03:43.632 --> 00:03:45.855
but it won't necessarily do what I want.

71
00:03:45.855 --> 00:03:48.389
There's a couple of different
techniques to fix this.

72
00:03:48.389 --> 00:03:52.142
One is you can change it to be like this.

73
00:03:52.142 --> 00:03:55.693
You can sort of fake named arguments and

74
00:03:55.693 --> 00:04:01.189
say this now takes a record which
has two string fields in it.

75
00:04:01.189 --> 00:04:04.216
And then I can essentially
say in here config, and

76
00:04:04.216 --> 00:04:08.051
then I can say config.selectedtagname or
config.tagname.

77
00:04:08.051 --> 00:04:12.213
Another thing I can do that's pretty
conducive to this pattern is you

78
00:04:12.213 --> 00:04:16.099
can actually do what's called
record field de-structuring.

79
00:04:16.099 --> 00:04:18.392
Which you can do inline anywhere.

80
00:04:18.392 --> 00:04:21.025
Basically, it works like this.

81
00:04:21.025 --> 00:04:26.162
And that is shorthand for saying, I don't
actually wanna name the argument itself.

82
00:04:26.162 --> 00:04:29.467
I just wanna pull these fields
off of it and name those.

83
00:04:29.467 --> 00:04:31.912
So essentially,
this is saying I want to take a record.

84
00:04:31.912 --> 00:04:35.295
I want to extract its selected tag
name field and put that in scope.

85
00:04:35.295 --> 00:04:37.797
I'm gonna extract its tag name field and
put that in scope.

86
00:04:37.797 --> 00:04:41.843
Then effectively, we've ended up
with the same thing as what we've

87
00:04:41.843 --> 00:04:46.252
had before except that now they are named
by virtue of coming in as a record.

88
00:04:46.252 --> 00:04:48.620
Either way of doing this is totally fine.

89
00:04:48.620 --> 00:04:52.026
It's just a difference in
how it's gonna get called,

90
00:04:52.026 --> 00:04:54.109
what the arguments are gonna be.

91
00:04:54.109 --> 00:04:56.436
One thing to note, though,
is that if you do this,

92
00:04:56.436 --> 00:04:58.618
you've now sacrificed partial application.

93
00:04:58.618 --> 00:05:02.853
We can no longer partially apply these
one at a time, like we could before,

94
00:05:02.853 --> 00:05:06.840
which depending on how we use it,
may or may not be more or less useful.

95
00:05:06.840 --> 00:05:11.317
And that's the last of our to-dos, which
means we're all good with the exercise.

96
00:05:11.317 --> 00:05:14.621
Any questions, yeah?

97
00:05:14.621 --> 00:05:20.078
&gt;&gt; Speaker 2: Some of the little parts
of the views, there's no onclick or

98
00:05:20.078 --> 00:05:25.110
anything, but
you still have the message for the HTML.

99
00:05:25.110 --> 00:05:26.166
&gt;&gt; Richard Feldman: Yes.

100
00:05:26.166 --> 00:05:27.030
&gt;&gt; Speaker 2: Yeah.

101
00:05:27.030 --> 00:05:29.674
&gt;&gt; Richard Feldman: That's true,
so, a good observation.

102
00:05:29.674 --> 00:05:37.403
So, the type parameter in HTML is based
on the events that it's handling.

103
00:05:37.403 --> 00:05:39.735
So if we don't have any onclick handlers,
for example,

104
00:05:39.735 --> 00:05:41.493
the banner is totally non-interactive.

105
00:05:41.493 --> 00:05:43.890
It doesn't actually produce any events.

106
00:05:43.890 --> 00:05:47.241
How do we determine what
this value ought to be.

107
00:05:47.241 --> 00:05:51.723
Short answer is that it has to agree with
view if it's going to be used in view.

108
00:05:51.723 --> 00:05:57.533
Which is to say that this type has to be
at least, if not literally HTML message,

109
00:05:57.533 --> 00:06:01.804
then it has to be something
compatible with HTML message.

110
00:06:01.804 --> 00:06:05.105
We haven't really gotten to the notion
of things that are compatible but

111
00:06:05.105 --> 00:06:06.900
not the same when it comes to types yet.

112
00:06:06.900 --> 00:06:11.149
We'll talk about those at the very end of
the workshop the advanced workshop gets

113
00:06:11.149 --> 00:06:13.099
into that topic in much more detail.

114
00:06:13.099 --> 00:06:16.988
But for right now, I think it's enough
to know that when you're getting

115
00:06:16.988 --> 00:06:19.411
started just make sure
that they all agree and

116
00:06:19.411 --> 00:06:22.169
this is a pretty decent way
to get them all to agree.

117
00:06:22.169 --> 00:06:25.794
Really, that comes up more when you're
sort of trying to reuse things across

118
00:06:25.794 --> 00:06:27.745
applications like if you have a package,

119
00:06:27.745 --> 00:06:30.664
you don't necessarily wanna
have the same message type for.

120
00:06:30.664 --> 00:06:35.590
You wanna be more flexible so that you
can re-use something across projects.

121
00:06:35.590 --> 00:06:37.683
That's when this comes
up a little bit more and

122
00:06:37.683 --> 00:06:39.408
there are some other circumstances.

123
00:06:39.408 --> 00:06:41.928
But true answer is,
we're just getting started.

124
00:06:41.928 --> 00:06:45.731
Pretty much you can get away
with just using HTML message for

125
00:06:45.731 --> 00:06:48.712
just about everything and
you'll be all set.

126
00:06:48.712 --> 00:06:50.287
Good question.

127
00:06:50.287 --> 00:06:51.784
Follow up?

128
00:06:51.784 --> 00:06:54.716
&gt;&gt; Speaker 2: Yeah, the other thing that
maybe we're not touching on right now,

129
00:06:54.716 --> 00:06:57.247
if you go all the way to the bottom,
just the parens there-

130
00:06:57.247 --> 00:07:00.128
&gt;&gt; Richard Feldman: Yes, sure, yeah,

131
00:07:00.128 --> 00:07:03.470
that type is called unit.

132
00:07:03.470 --> 00:07:07.878
It's basically a really boring type
that only has one value which is also

133
00:07:07.878 --> 00:07:08.751
called unit.

134
00:07:08.751 --> 00:07:12.619
And it basically means like
there's nothing going on there.

135
00:07:12.619 --> 00:07:14.638
So program has three type parameters.

136
00:07:14.638 --> 00:07:15.361
One is for the model.

137
00:07:15.361 --> 00:07:16.460
One is for the message.

138
00:07:16.460 --> 00:07:20.909
And this other one in the middle here is
used in the event that we're doing some

139
00:07:20.909 --> 00:07:23.661
JavaScript inner op,
which we're not doing.

140
00:07:23.661 --> 00:07:25.237
So there's there's
nothing that goes there.

141
00:07:25.237 --> 00:07:27.755
So, when you see that open paren
close paren, it means, hey,

142
00:07:27.755 --> 00:07:30.192
there's nothing of interest here,
don't worry about it.

143
00:07:30.192 --> 00:07:33.203
And we'd see something more
interesting there if we actually were

144
00:07:33.203 --> 00:07:35.580
doing JavaScript inner op,
which we are not, yet.

145
00:07:35.580 --> 00:07:37.456
That's the last section.

