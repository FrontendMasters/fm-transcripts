WEBVTT

1
00:00:00.030 --> 00:00:02.750
&gt;&gt; Richard Feldman: So to recap the things
we've talked about here, first,

2
00:00:02.750 --> 00:00:05.040
we talked about strings and
how you can combine them.

3
00:00:05.040 --> 00:00:09.500
So if we say the letter
"d" ++ String.fromInt 6,

4
00:00:09.500 --> 00:00:11.580
that will give us the string d6.

5
00:00:12.790 --> 00:00:17.190
If we have a let expression,
we can say, let x = 5 in x * 2.

6
00:00:17.190 --> 00:00:21.780
We can put as many different values
that we want inside that let expression.

7
00:00:21.780 --> 00:00:24.680
The entire expression evaluates
to what comes after in.

8
00:00:26.000 --> 00:00:29.140
We saw some stuff with lists,
in particular list.map,

9
00:00:29.140 --> 00:00:34.060
which is a useful way to transform a list
of one item into a list of another items.

10
00:00:34.060 --> 00:00:36.634
So we saw how we can use that
with numbers, with strings, and

11
00:00:36.634 --> 00:00:37.910
even with virtual DOM nodes.

12
00:00:38.920 --> 00:00:41.460
Also lists have to have
a consistent type which prevents

13
00:00:41.460 --> 00:00:44.240
run time exceptions that
can otherwise occur.

14
00:00:44.240 --> 00:00:46.040
And finally, we saw a partial application.

15
00:00:46.040 --> 00:00:48.800
We saw that when we called pluralize
passing "leaf" and "leaves".

16
00:00:48.800 --> 00:00:53.250
That gives us back a new function, which
accepts the final argument that pluralize

17
00:00:53.250 --> 00:00:55.780
wants and sort of finishes the job.

18
00:00:55.780 --> 00:00:58.970
And as we'll see later,
partial application and List.map and

19
00:00:58.970 --> 00:01:01.360
things like that can be
pretty useful together.

20
00:01:02.440 --> 00:01:05.624
Any questions about any of this
before we get to the exercises?

21
00:01:07.222 --> 00:01:08.200
&gt;&gt; Richard Feldman: Yes.

22
00:01:08.200 --> 00:01:11.872
&gt;&gt; Speaker 2: I have some kind of somewhat
related generic questions on some of

23
00:01:11.872 --> 00:01:12.930
this stuff.

24
00:01:12.930 --> 00:01:18.137
So List.map,
I'm just curious that some languages,

25
00:01:18.137 --> 00:01:21.730
they'll have a generic map.

26
00:01:21.730 --> 00:01:24.660
And in Elm,
everything kind of has its own.

27
00:01:24.660 --> 00:01:26.000
&gt;&gt; Richard Feldman: Yes.

28
00:01:26.000 --> 00:01:30.090
&gt;&gt; Speaker 2: I'm just curious what's
the difference or decision there?

29
00:01:30.090 --> 00:01:32.220
&gt;&gt; Richard Feldman: Some
languages will have a generic map,

30
00:01:32.220 --> 00:01:34.970
whereas Elm has a special purpose one.

31
00:01:34.970 --> 00:01:39.910
So this is really a question
of name resolution.

32
00:01:39.910 --> 00:01:43.650
So in some languages,
you'll have, syntactically,

33
00:01:43.650 --> 00:01:44.890
you'll just say the word, map.

34
00:01:44.890 --> 00:01:49.770
You won't say List.map or Set.map,
or whatever the data structure is.

35
00:01:50.910 --> 00:01:53.920
In both cases, they have different
implementations under the hood.

36
00:01:53.920 --> 00:01:57.440
They may have been arrived at using
different amounts of code sharing.

37
00:01:57.440 --> 00:02:00.610
But fundamentally, if you're going to
have a map function that works on a list,

38
00:02:00.610 --> 00:02:02.420
you're gonna have a different map
function that works on a set,

39
00:02:02.420 --> 00:02:03.724
cuz those are different data structures.

40
00:02:03.724 --> 00:02:09.030
In Elm sort of the style is encouraged is
to write everything out explicitly and

41
00:02:09.030 --> 00:02:10.910
say like this is a List.map.

42
00:02:10.910 --> 00:02:11.770
It's gonna work on a list.

43
00:02:11.770 --> 00:02:12.510
This is a Set.map.

44
00:02:12.510 --> 00:02:13.490
It's gonna work on a set.

45
00:02:14.510 --> 00:02:17.930
Whereas in other languages they have
different name resolution mechanisms that

46
00:02:17.930 --> 00:02:21.430
potentially let you just say map and
then maybe you're passing in a sent,

47
00:02:21.430 --> 00:02:22.840
maybe you're passing in a list.

48
00:02:22.840 --> 00:02:25.970
But it may be even in the same module.

49
00:02:25.970 --> 00:02:30.570
But basically the reason for this is is
it's sort of a has to do with sort of

50
00:02:30.570 --> 00:02:32.210
the design sensibilities around Elm.

51
00:02:33.530 --> 00:02:36.650
So, as an example like
Haskell's a language where

52
00:02:36.650 --> 00:02:37.650
it's a different design set.

53
00:02:37.650 --> 00:02:41.980
It's like in Haskell it's encouraged to
only use a map and Haskell supports that.

54
00:02:41.980 --> 00:02:43.500
Elm's compiler was written in Haskell but

55
00:02:43.500 --> 00:02:48.570
Evan decided to go a different
direction than that.

56
00:02:48.570 --> 00:02:54.950
&gt;&gt; Speaker 2: So like, under the hood
a list, does it actually compile

57
00:02:54.950 --> 00:03:01.150
to something in JavaScript that enforces
that the types within it are the same?

58
00:03:01.150 --> 00:03:02.170
&gt;&gt; Richard Feldman: No, no-
&gt;&gt; Speaker 2: We said, no,

59
00:03:02.170 --> 00:03:07.120
the compiler knows, okay,
I have already checked, so

60
00:03:07.120 --> 00:03:08.084
it can just be an array under the hood.

61
00:03:10.230 --> 00:03:14.990
&gt;&gt; Richard Feldman: So
the question was does Elm's compiler

62
00:03:14.990 --> 00:03:19.060
actually emit something that verifies
in the compiled JavaScript that

63
00:03:19.060 --> 00:03:20.530
the contents of the list are all the same?

64
00:03:20.530 --> 00:03:22.170
Or, is that only a compile time check?

65
00:03:22.170 --> 00:03:23.330
It's only a compile time check.

66
00:03:23.330 --> 00:03:27.580
However it does not actually compile
to literally a JavaScript array.

67
00:03:27.580 --> 00:03:31.556
It compiles to a linked list,
an immutable linked list in JavaScript,

68
00:03:31.556 --> 00:03:34.620
which is not represented as
a plain JavaScript array.

69
00:03:34.620 --> 00:03:38.450
So it has different characteristics as far
as how expensive it is to add things to

70
00:03:38.450 --> 00:03:41.510
the beginning versus the end versus
looking something up in the middle.

71
00:03:41.510 --> 00:03:46.470
So it's just implementation details that
matters from a performance perspective but

72
00:03:46.470 --> 00:03:50.390
not from how you actually use
it if you're just worried about

73
00:03:50.390 --> 00:03:51.880
will things break or not?

74
00:03:51.880 --> 00:03:52.960
The compile checks are enough.

75
00:03:54.110 --> 00:03:58.914
&gt;&gt; Speaker 2: So are there any things
like that that it compiles to where

76
00:03:58.914 --> 00:04:03.660
like newer language features or
something are gonna.

77
00:04:03.660 --> 00:04:08.680
I'm just kinda curious if browser
target is a thing that we would ever

78
00:04:08.680 --> 00:04:13.760
want to care about with Elm cuz
we would get less, or something?

79
00:04:13.760 --> 00:04:16.537
&gt;&gt; Richard Feldman: Browser target
is a thing that you would care about

80
00:04:16.537 --> 00:04:17.270
within Elm.

81
00:04:17.270 --> 00:04:18.754
Sorry, I don't really follow that.

82
00:04:18.754 --> 00:04:20.360
[LAUGH]
&gt;&gt; Speaker 2: Like, if it compiled to some

83
00:04:20.360 --> 00:04:25.460
newer language feature in JavaScript
that was better or something?

84
00:04:27.480 --> 00:04:28.650
&gt;&gt; Richard Feldman: Got it.

85
00:04:28.650 --> 00:04:32.500
So right now Elm targets mostly ES3.

86
00:04:32.500 --> 00:04:35.360
It compiles to ES3 compatible JavaScript.

87
00:04:35.360 --> 00:04:38.166
It doesn't, with the exception of,

88
00:04:38.166 --> 00:04:43.970
I think there's request animation frame
and some of stuff that's like ES5.

89
00:04:43.970 --> 00:04:47.060
But, the question is like sort of in the
long term, do you have to worry about Elm

90
00:04:47.060 --> 00:04:50.150
compiling to stuff that's not
backward compatible, etc.

91
00:04:50.150 --> 00:04:51.970
Honestly, I wouldn't worry
about that with JavaScript.

92
00:04:51.970 --> 00:04:57.390
However, Elm is explicitly designed
to compile to WebAssembly someday.

93
00:04:57.390 --> 00:04:59.700
WebAssembly's not really ready for it yet.

94
00:04:59.700 --> 00:05:03.840
It still needs a garbage collector and
some stuff like that.

95
00:05:03.840 --> 00:05:06.630
But we’ve been talking with Mozilla folks

96
00:05:06.630 --> 00:05:08.910
on several occasions about
how that would work.

97
00:05:08.910 --> 00:05:12.120
Not only is it designed to be
able to compile to WebAssembly,

98
00:05:12.120 --> 00:05:15.840
but it’s designed to be able
to compile to WebAssembly with

99
00:05:15.840 --> 00:05:18.910
all of your existing JavaScript
interrupt continuing to work.

100
00:05:18.910 --> 00:05:21.090
JavaScript interrupt,
not WebAssembly interrupt.

101
00:05:21.090 --> 00:05:26.430
So, the idea is that based on the current
design, you could, in some release,

102
00:05:26.430 --> 00:05:29.820
download a patch release of Elm,
where now Elm compiles to WebAssembly and

103
00:05:29.820 --> 00:05:32.110
everything's just absurdly faster and
smaller.

104
00:05:32.110 --> 00:05:35.810
But all of your existing code still works,
exactly the same way as it did before,

105
00:05:35.810 --> 00:05:38.250
including your JavaScript interrupt.

106
00:05:38.250 --> 00:05:41.990
So backwards compatibility is something
that Elm takes pretty seriously as far as

107
00:05:41.990 --> 00:05:43.480
browsers go.

108
00:05:43.480 --> 00:05:48.530
And generally the design is to try and
make it as compatible as with

109
00:05:48.530 --> 00:05:52.240
as many older browser features
as possible, sort of by default.

110
00:05:52.240 --> 00:05:56.170
And not to use any newer browser features,

111
00:05:56.170 --> 00:05:59.140
unless there's really no other alternative
to get that particular thing done.

