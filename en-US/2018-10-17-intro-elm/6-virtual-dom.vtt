WEBVTT

1
00:00:00.140 --> 00:00:01.970
&gt;&gt; Richard Feldman: So to recap,
this what we're gonna be building.

2
00:00:01.970 --> 00:00:04.560
This thing called Conduit,
this medium clone.

3
00:00:04.560 --> 00:00:08.869
And the way that we're gonna be doing
this is by using the virtual DOM.

4
00:00:08.869 --> 00:00:13.990
The virtual DOM is something
that is popularized by React.

5
00:00:13.990 --> 00:00:18.010
And it's something that elm uses as its
fundamental way of rendering things.

6
00:00:18.010 --> 00:00:21.320
So whereas in JavaScript, you can opt into
a virtual DOM by using something like

7
00:00:21.320 --> 00:00:25.050
React or
any of the virtual DOM systems out there.

8
00:00:25.050 --> 00:00:26.680
But in Elm, it's the only way to do it.

9
00:00:26.680 --> 00:00:27.930
All there is a is a virtual DOM.

10
00:00:27.930 --> 00:00:30.560
That is the fundamental
primitive of rendering in Elm.

11
00:00:30.560 --> 00:00:32.440
So what do we mean by the DOM?

12
00:00:32.440 --> 00:00:35.030
So the DOM is the Document Object Model.

13
00:00:35.030 --> 00:00:36.800
This is some HTML.

14
00:00:36.800 --> 00:00:40.290
HTML, the Hypertext Markup Language,
is a representation of the DOM.

15
00:00:40.290 --> 00:00:43.840
It's syntax that describes
a particular structure.

16
00:00:43.840 --> 00:00:45.000
So here we have an unordered list.

17
00:00:45.000 --> 00:00:46.770
It's got a class of languages.

18
00:00:46.770 --> 00:00:48.580
It's got two li's inside of it.

19
00:00:48.580 --> 00:00:51.380
One is Elm the other is JS.

20
00:00:51.380 --> 00:00:55.720
This HTML describes this DOM structure.

21
00:00:55.720 --> 00:00:58.780
So at the root,
we have root node that's a ul.

22
00:00:58.780 --> 00:01:01.650
It's got a class attribute of languages.

23
00:01:01.650 --> 00:01:03.850
Then it's got two child nodes.

24
00:01:03.850 --> 00:01:06.910
One is an Li, another is a different Li.

25
00:01:06.910 --> 00:01:11.610
Actually each of those Li's also
has a child node, a text node.

26
00:01:11.610 --> 00:01:14.670
So one is a text node
called Elm has element.

27
00:01:14.670 --> 00:01:17.180
There was a text node that has JS in it.

28
00:01:17.180 --> 00:01:18.960
I'm gonna be honest with you,
for most of my career,

29
00:01:18.960 --> 00:01:22.750
I did not know the text nodes existed,
I thought they were just magical strings.

30
00:01:22.750 --> 00:01:27.440
Turns out the DOM nodes,
I just didn't know that for a long time.

31
00:01:27.440 --> 00:01:32.200
So this HTML, in the upper left,
describes this DOM tree on the right

32
00:01:32.200 --> 00:01:34.800
that's going to actually exist
in the browser's memory.

33
00:01:34.800 --> 00:01:37.120
But there are lots of different ways
we can represent this DOM tree.

34
00:01:37.120 --> 00:01:41.360
We don't have to use HTML to do that,
in fact Elm doesn't use HTML to do that.

35
00:01:41.360 --> 00:01:43.810
Elm just uses plain function calls.

36
00:01:43.810 --> 00:01:47.320
So, here's how we could
represent this in Elm.

37
00:01:47.320 --> 00:01:48.765
So, we have a function called UL.

38
00:01:48.765 --> 00:01:51.780
It's being passed two arguments.

39
00:01:51.780 --> 00:01:54.040
The first is a list of attributes.

40
00:01:54.040 --> 00:01:57.490
In this case, we have only one attribute,
class languages.

41
00:01:57.490 --> 00:01:59.180
And then a list of child nodes.

42
00:01:59.180 --> 00:02:02.600
So, in this case we have two child nodes,
both of them are Li's.

43
00:02:02.600 --> 00:02:04.790
Each of the Li's has a list of attributes.

44
00:02:04.790 --> 00:02:08.900
But these don't have any attributes unlike
the ul, so they're just empty lists.

45
00:02:08.900 --> 00:02:11.990
And then they also have
a list of child nodes.

46
00:02:11.990 --> 00:02:16.070
And in this case both of them have
a text node for their child nodes.

47
00:02:16.070 --> 00:02:19.210
So Elm just uses plain function calls for
all of these.

48
00:02:19.210 --> 00:02:21.300
And because Elm uses whitespace for

49
00:02:21.300 --> 00:02:24.010
function applications
instead of parenthesis.

50
00:02:24.010 --> 00:02:29.620
We can see that this has pretty visually
similar structure to the underlying DOM,

51
00:02:29.620 --> 00:02:33.380
and also a pretty similar
structure to the HTML up here.

52
00:02:33.380 --> 00:02:35.650
So Elm doesn't really need
a separate templating language for

53
00:02:35.650 --> 00:02:39.960
this, because we can get something,
a little DSL that looks pretty similar,

54
00:02:39.960 --> 00:02:43.440
just by writing clean Elm code and
normal function calls.

55
00:02:43.440 --> 00:02:47.180
A little piece of trivia, this is actually
how React was originally designed.

56
00:02:47.180 --> 00:02:48.970
Jordan Walke,
when he originally made React,

57
00:02:48.970 --> 00:02:50.780
he just used it with plain function calls.

58
00:02:50.780 --> 00:02:54.850
But at Facebook, they had been doing a lot
of PHP templating on the server side.

59
00:02:54.850 --> 00:02:57.840
And when he made the first pull request
to introduce it to the company,

60
00:02:57.840 --> 00:03:02.240
people were this is weird,
we wanna see our PHP looking templates.

61
00:03:02.240 --> 00:03:05.570
So he actually invented jsx in
order to solve that problem and

62
00:03:05.570 --> 00:03:06.890
to get his pull request accepted.

63
00:03:06.890 --> 00:03:10.114
So he changed it from plain
function calls to a template.

64
00:03:10.114 --> 00:03:13.710
And that's become the norm in
a lot of virtual DOM systems,

65
00:03:13.710 --> 00:03:15.660
whereas Elm in some sense
goes back to the roots and

66
00:03:15.660 --> 00:03:19.260
says fundamentally the big
idea here is functions.

67
00:03:19.260 --> 00:03:22.490
We're just gonna use plain function
calls to describe the stuff, and

68
00:03:22.490 --> 00:03:24.640
that's how our whole
code base at work works.

69
00:03:24.640 --> 00:03:27.410
That's how all Elm code bases work,

70
00:03:27.410 --> 00:03:30.150
nothing more than plain function
calls to describe these things.

71
00:03:30.150 --> 00:03:33.200
So the one syntactic note has to do
with position of the commas here.

72
00:03:35.340 --> 00:03:37.730
So this is not quite idiomatic Elm code.

73
00:03:37.730 --> 00:03:42.300
The way that you would idiomatically write
this is with the comma on the left here.

74
00:03:42.300 --> 00:03:45.990
The first time I saw this, I thought, that
looks weird, I'm not gonna do it that way,

75
00:03:45.990 --> 00:03:48.270
I'm gonna do it a different way.

76
00:03:48.270 --> 00:03:52.280
And then I realized the benefit of doing
it this way, and I switched, and then

77
00:03:52.280 --> 00:03:55.800
got used to it, and subsequently think,
okay, yeah, this way actually is better.

78
00:03:55.800 --> 00:03:58.280
So let me explain the problem
that this solves.

79
00:03:58.280 --> 00:04:01.640
So let's say that I have
the comma on the end here, and

80
00:04:01.640 --> 00:04:04.670
this is more typically how
it looks in JavaScript.

81
00:04:06.610 --> 00:04:11.140
The problem is,
what happens if I forget that comma,

82
00:04:11.140 --> 00:04:13.690
if I leave it off,
accidentally just left it off.

83
00:04:13.690 --> 00:04:15.060
And I've definitively done this before.

84
00:04:16.360 --> 00:04:17.700
What is actually happening here?

85
00:04:17.700 --> 00:04:22.990
What is this code now do that's
different from what it did before?

86
00:04:22.990 --> 00:04:25.560
Well previously what we had was we had

87
00:04:25.560 --> 00:04:27.850
this is a function called
Li passing two arguments.

88
00:04:27.850 --> 00:04:30.230
And then this is a function
called Li passing two arguments.

89
00:04:30.230 --> 00:04:32.960
They're separated by a comma because
there are two elements on the list.

90
00:04:34.060 --> 00:04:35.930
This one doesn't do that anymore.

91
00:04:35.930 --> 00:04:37.090
In this one,

92
00:04:37.090 --> 00:04:40.560
we're gonna get a compile error that says
you are passing five arguments to Li.

93
00:04:40.560 --> 00:04:43.840
And you might be no I'm not,
what are you talking about?

94
00:04:43.840 --> 00:04:46.450
I'm passing two arguments to Li, twice.

95
00:04:46.450 --> 00:04:47.240
But actually,

96
00:04:47.240 --> 00:04:51.500
without the comma there, this error
accurately represents what's going on.

97
00:04:51.500 --> 00:04:55.450
We have Li, passing one argument,
two arguments.

98
00:04:55.450 --> 00:04:57.090
There's no comma so
we're just gonna keep going.

99
00:04:57.090 --> 00:04:58.190
It's just more whitespace.

100
00:04:58.190 --> 00:05:01.170
Three arguments, four arguments,
five arguments to Li.

101
00:05:02.490 --> 00:05:05.770
So getting this error message is
kind of confusing because it seems

102
00:05:05.770 --> 00:05:06.630
to be just wrong.

103
00:05:06.630 --> 00:05:08.120
It seems you are passing
all these arguments and

104
00:05:08.120 --> 00:05:09.920
it's no I'm not,
I'm looking at the code it looks fine.

105
00:05:09.920 --> 00:05:11.540
Especially if you have
a particularly long,

106
00:05:11.540 --> 00:05:15.830
complicated expression it can be
a really confusing error to get.

107
00:05:15.830 --> 00:05:22.179
But if you have this, instead

108
00:05:22.179 --> 00:05:29.090
we have the comma on the left
now we have this vertical line.

109
00:05:29.090 --> 00:05:33.410
This column of characters,
that makes it really,

110
00:05:33.410 --> 00:05:36.700
really obvious if you leave the comma out.

111
00:05:36.700 --> 00:05:39.270
And this works, no matter how
many things you add to the list.

112
00:05:39.270 --> 00:05:41.860
You can just keep adding to the list,
and keep adding commas.

113
00:05:41.860 --> 00:05:43.850
And if you ever forget
one of these commas,

114
00:05:43.850 --> 00:05:47.069
it's immediately, blindingly obvious,
that there's something missing there.

115
00:05:48.070 --> 00:05:51.990
So I reluctantly tried switching to
this style and then realized that,

116
00:05:51.990 --> 00:05:56.630
I just never, ever got that error ever
again, and I was, okay, that's worth it.

117
00:05:56.630 --> 00:05:59.210
The first time I was pair programming
with somebody at work and

118
00:05:59.210 --> 00:06:01.054
they got that error and
were confused by it.

119
00:06:01.054 --> 00:06:03.840
I was okay, yeah, we're switching,
we're gonna do it this way.

120
00:06:03.840 --> 00:06:08.492
And today we have Elm Format which is
a code formatting tool that something

121
00:06:08.492 --> 00:06:12.080
90% of Elm developers,
I think it's actually over 90%.

122
00:06:12.080 --> 00:06:14.400
It's really ubiquitously used.

123
00:06:14.400 --> 00:06:17.470
It's a prettier or go/format or gofump,

124
00:06:17.470 --> 00:06:20.140
I believe they pronounce
it in other languages.

125
00:06:20.140 --> 00:06:24.750
Where essentially the idea is to
enforce a common syntax across

126
00:06:24.750 --> 00:06:28.120
all Elm programs and
it will do it like this.

127
00:06:28.120 --> 00:06:33.110
Also worth nothing that Elm format
is unique, as far as I know, among

128
00:06:33.110 --> 00:06:38.940
front end code formatters in that it has
no configuration options at all by design.

129
00:06:38.940 --> 00:06:41.340
It cannot be configured in any way.

130
00:06:41.340 --> 00:06:44.650
And that's a design goal because
it prevents style arguments.

131
00:06:44.650 --> 00:06:47.740
It means that you can't get into an
argument about what you should configure

132
00:06:47.740 --> 00:06:49.020
it about, what should go where.

133
00:06:49.020 --> 00:06:52.520
Because there just aren't any
configuration options, it's pretty nice.

134
00:06:52.520 --> 00:06:56.050
So to recap the things we've
talked about in Part 1.

135
00:06:56.050 --> 00:06:59.040
First we talked about compiling,
so running Elm make,

136
00:06:59.040 --> 00:07:01.160
passing Main.elm,
which is our source file.

137
00:07:01.160 --> 00:07:04.050
And then output of elm.js,
which is the .js file

138
00:07:04.050 --> 00:07:08.630
that we're ultimately going to give to the
browser using a script tag in index.html.

139
00:07:08.630 --> 00:07:11.940
Talked about functions and how to
define them and also how to call them.

140
00:07:11.940 --> 00:07:15.280
So when we call them passing, for
example, pluralize "leaf" "leaves" 1.

141
00:07:15.280 --> 00:07:18.540
We don't use comas and
we don't use parenthesis.

142
00:07:18.540 --> 00:07:22.640
If we do use parenthesis it's only to
disambiguate between nested expressions.

143
00:07:22.640 --> 00:07:25.860
Not because function calling
actually needs any parenthesis.

144
00:07:25.860 --> 00:07:28.230
Talked about if expressions,
so if quantity == 1 then.

145
00:07:28.230 --> 00:07:32.010
We talked about how in Elm you use
double equals instead of triple equals,

146
00:07:32.010 --> 00:07:34.550
we have then instead of curly braces.

147
00:07:34.550 --> 00:07:36.770
Else is required because
if is an expression.

148
00:07:36.770 --> 00:07:39.230
So you can pick it up and
move it in different places,

149
00:07:39.230 --> 00:07:43.030
assign the result to a value
just like a JavaScript ternary.

150
00:07:43.030 --> 00:07:44.800
And finally,
we talked about the virtual DOM and how,

151
00:07:44.800 --> 00:07:48.010
in Elm, virtual DOM is done
using plain function calls.

152
00:07:48.010 --> 00:07:52.530
So Li passing a list of attributes and
also a list of child nodes.

153
00:07:52.530 --> 00:07:56.548
We also talked about how text nodes in Elm
are represented by a function called text.

