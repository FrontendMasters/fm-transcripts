WEBVTT

1
00:00:00.000 --> 00:00:03.041
&gt;&gt; Richard Feldman: Now another thing
that we sort of have an intuition for

2
00:00:03.041 --> 00:00:07.704
that it ought to work without necessarily
knowing how it ought to be represented is

3
00:00:07.704 --> 00:00:08.666
the following.

4
00:00:08.666 --> 00:00:13.981
So a and b is a list of strings, we also
have 1.1, 2.2, that's a list of floats.

5
00:00:13.981 --> 00:00:15.393
What is this?

6
00:00:15.393 --> 00:00:19.050
Well, it's not a list of floats or
a list of strings.

7
00:00:19.050 --> 00:00:23.776
This sounded silly, there's no floats
in it, there's no strings in it.

8
00:00:23.776 --> 00:00:27.649
This, the type of this is the list of a or
list of vowel or

9
00:00:27.649 --> 00:00:30.450
a list of element, whatever you want.

10
00:00:30.450 --> 00:00:33.899
Point being,
it's a list with an unbound type variable.

11
00:00:33.899 --> 00:00:37.622
Which is just to say this is a value
where it works with anything.

12
00:00:37.622 --> 00:00:39.720
It's a completely flexible list.

13
00:00:39.720 --> 00:00:44.184
If you want, you can stick a list.float
together with a list of a,

14
00:00:44.184 --> 00:00:46.594
a lowercase a, and that'll work.

15
00:00:46.594 --> 00:00:50.028
You can combine, you can attach
an empty list to anything you want.

16
00:00:50.028 --> 00:00:52.542
Cuz it's empty,
it's harmless, it, [LAUGH].

17
00:00:52.542 --> 00:00:56.446
You can combine it, you can smash
a million of them onto a list of floats or

18
00:00:56.446 --> 00:00:58.891
a list of strings and
that'll totally work.

19
00:00:58.891 --> 00:01:03.104
Because an empty list is compatible
with any other list type.

20
00:01:03.104 --> 00:01:06.384
So this is sort of an unbound
type variable, and

21
00:01:06.384 --> 00:01:11.387
it means that it works anytime you
expect a list with any type parameter.

22
00:01:11.387 --> 00:01:13.409
You can always give it an empty list,

23
00:01:13.409 --> 00:01:17.206
you always give it any list that
still has an unbound type parameter.

24
00:01:17.206 --> 00:01:22.651
So, an example of this, string.concat
says give me a list of strings,

25
00:01:22.651 --> 00:01:26.602
and I will smash them together and
give you a string.

26
00:01:26.602 --> 00:01:30.397
So, this is kinda like string.join,
but without a joining character.

27
00:01:30.397 --> 00:01:31.796
It's like give me a list of strings and

28
00:01:31.796 --> 00:01:33.603
I will smoosh them all
together into one string.

29
00:01:33.603 --> 00:01:35.328
Ooh, smoosh, is that too soon?

30
00:01:35.328 --> 00:01:37.215
All right.

31
00:01:37.215 --> 00:01:39.887
That joke's not gonna work,
[LAUGH] in a year.

32
00:01:39.887 --> 00:01:45.959
string.concat, ab and c, that'll
combine those two together into abc.

33
00:01:45.959 --> 00:01:48.420
I can also pass string.concat empty list,

34
00:01:48.420 --> 00:01:51.155
even though that's not
little list of strings.

35
00:01:51.155 --> 00:01:54.641
If I have a list with
an unbalanced type variable,

36
00:01:54.641 --> 00:01:59.956
I can provide that to any list, any
function that accepts a list of any type.

37
00:01:59.956 --> 00:02:02.306
So I can, of course, say yeah,
string.concat that, and

38
00:02:02.306 --> 00:02:03.857
it's gonna give me back empty string.

39
00:02:03.857 --> 00:02:08.227
That totally works even though it's
not literally a list of strings, and

40
00:02:08.227 --> 00:02:11.832
technically string.concat
says that's what it expects.

41
00:02:11.832 --> 00:02:13.568
Okay, another example of this,

42
00:02:13.568 --> 00:02:17.484
going with moving the type variable
to the other side, is String.lines.

43
00:02:17.484 --> 00:02:21.386
So this says given a string,
I will break it on new line characters and

44
00:02:21.386 --> 00:02:23.625
give you back a list of all of the lines.

45
00:02:23.625 --> 00:02:26.385
So I can say String.lines "A\nB", and

46
00:02:26.385 --> 00:02:31.307
that will give me back A and B because
there's one new line in between there.

47
00:02:31.307 --> 00:02:36.458
Again I can pass it
String.lines empty string and

48
00:02:36.458 --> 00:02:40.268
that will give me back an empty list.

49
00:02:40.268 --> 00:02:47.381
But this will not be an empty list
of that is of type, oop, list a.

50
00:02:47.381 --> 00:02:51.184
That will actually be an empty
list as a type List String.

51
00:02:51.184 --> 00:02:55.342
Because String.lines says,
I always return a lists of string.

52
00:02:55.342 --> 00:02:56.825
No matter what you give me,

53
00:02:56.825 --> 00:03:00.189
I will never give you back anything
other than list of string.

54
00:03:00.189 --> 00:03:03.769
All of which is to say that, despite
the fact that you have an empty list,

55
00:03:03.769 --> 00:03:07.075
it's not the case that there's
always an unbound type variable.

56
00:03:07.075 --> 00:03:08.381
It depends on how you got it.

57
00:03:08.381 --> 00:03:12.505
If you got it by just literally writing
open square bracket, close square bracket,

58
00:03:12.505 --> 00:03:14.548
yes, that has an unbound type variable.

59
00:03:14.548 --> 00:03:19.190
Now you can still end up with
an empty list that does in fact

60
00:03:19.190 --> 00:03:23.170
have a bound type variable,
as is the case here.

61
00:03:23.170 --> 00:03:29.614
Okay, so we can have that in
an unbound type variable with lists.

62
00:03:29.614 --> 00:03:31.579
We can also have it with HTML.

63
00:03:31.579 --> 00:03:35.064
And this gets back to something that
someone asked a question about,

64
00:03:35.064 --> 00:03:37.419
I think the the fourth,
part four exercises.

65
00:03:37.419 --> 00:03:40.860
So here we have a div
that says onClick Toggle.

66
00:03:40.860 --> 00:03:45.592
And that is an HTML message with
a concrete type variable of our message

67
00:03:45.592 --> 00:03:48.568
type, and that's because of the onClick.

68
00:03:48.568 --> 00:03:52.933
This right here is an image that
has a source attribute, but

69
00:03:52.933 --> 00:03:55.564
it doesn't do any event handling.

70
00:03:55.564 --> 00:03:58.766
Because it doesn't do any event handling,
technically speaking,

71
00:03:58.766 --> 00:04:01.870
we can annotate it like this,
HTML with an unbound type variable.

72
00:04:01.870 --> 00:04:06.539
That's totally legit because
the type variable specifies here is

73
00:04:06.539 --> 00:04:11.467
what type of message this thing can
produce in response to user input.

74
00:04:11.467 --> 00:04:15.346
But this image doesn't do anything
in response to user input,

75
00:04:15.346 --> 00:04:16.662
which is to say yeah,

76
00:04:16.662 --> 00:04:21.577
it responds to no user input with means
that it doesn't broadcast any message.

77
00:04:21.577 --> 00:04:26.608
Which means that it's compatible with
any HTML that we want to use it with.

78
00:04:26.608 --> 00:04:28.559
Now in the course of
building our application,

79
00:04:28.559 --> 00:04:31.147
we don't necessarily care about
that because we're probably

80
00:04:31.147 --> 00:04:34.248
only gonna have one message type that
we're dealing with at a time anyway.

81
00:04:34.248 --> 00:04:36.722
But this does matter
when we're reusing it.

82
00:04:36.722 --> 00:04:40.544
If I want to use this in one project and
then publish a package where it can be

83
00:04:40.544 --> 00:04:44.446
used in multiple different projects,
maybe one of them uses HTML string.

84
00:04:44.446 --> 00:04:46.649
One of them uses HTML
message that looks this way,

85
00:04:46.649 --> 00:04:49.907
another one uses Html message that
looks at it completely different way.

86
00:04:49.907 --> 00:04:53.716
Anytime I have something like this image
I can just drop it in anywhere and

87
00:04:53.716 --> 00:04:55.408
it's just totally gonna work.

88
00:04:55.408 --> 00:04:59.293
Now again as previously mentioned there's
other tactics to working with this when

89
00:04:59.293 --> 00:05:02.911
you're in that situation, which we'll
get into in the advanced workshop.

90
00:05:02.911 --> 00:05:08.221
But the point being this is an example
of a list with an unbound type variable,

91
00:05:08.221 --> 00:05:12.160
this is an example of HTML
with an unbound type variable.

92
00:05:12.160 --> 00:05:17.472
And yeah, we could also call it a message
with a lowercase m if we wanted to.

93
00:05:17.472 --> 00:05:22.288
Okay, all of which is to say
this is compatible with HTML

94
00:05:22.288 --> 00:05:25.474
that produces that type of message.

95
00:05:25.474 --> 00:05:28.420
This is compatible with HTML
that produces anything.

96
00:05:28.420 --> 00:05:33.601
And that also is, this pattern sort
of continues with commands, right?

97
00:05:33.601 --> 00:05:39.159
This is a command that produces messages
that have a type message with a capital M.

98
00:05:39.159 --> 00:05:41.799
Which means that it works
with update functions that

99
00:05:41.799 --> 00:05:43.601
accept message with the capital M.

100
00:05:43.601 --> 00:05:48.477
And command is a lower case m says,
I don't produce any messages,

101
00:05:48.477 --> 00:05:51.795
which means I work with
any update function.

102
00:05:51.795 --> 00:05:55.552
All of this is relevant because
this is what we're going to use,

103
00:05:55.552 --> 00:05:58.344
Cmd with a lowercase m,
to talk to JavaScript.

104
00:05:58.344 --> 00:06:02.291
It's a command where we're going to
send a value out to JavaScript, and

105
00:06:02.291 --> 00:06:04.048
it's gonna be fire and forget.

106
00:06:04.048 --> 00:06:06.065
We're gonna say here you go, JavaScript.

107
00:06:06.065 --> 00:06:10.337
Here is this command,
here is this piece of data, bye!

108
00:06:10.337 --> 00:06:13.732
And JavaScript is gonna have a callback
that's gonna listen to that and

109
00:06:13.732 --> 00:06:16.628
grab onto it and
maybe do some JavaScript stuff, maybe not.

110
00:06:16.628 --> 00:06:20.799
But the point is there's no callback here
on the Elm site, it's not like we send off

111
00:06:20.799 --> 00:06:24.386
to JavaScript and then JavaScript
definitely sends the message back.

112
00:06:24.386 --> 00:06:27.039
This lower case m indicates that,
yeah, you know what,

113
00:06:27.039 --> 00:06:28.713
this command can be used anywhere.

114
00:06:28.713 --> 00:06:31.697
It can be used across applications,
whatever,

115
00:06:31.697 --> 00:06:34.260
because it never produces any messages.

