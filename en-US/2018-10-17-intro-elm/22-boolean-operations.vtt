WEBVTT

1
00:00:00.194 --> 00:00:04.231
&gt;&gt; Richard Feldman: All right, [COUGH] so
let's put booleans to some use here.

2
00:00:04.231 --> 00:00:07.184
So let's talk about booleans for
a list membership.

3
00:00:07.184 --> 00:00:09.805
So let's say we've got this list,
1, 2, and 3.

4
00:00:09.805 --> 00:00:12.533
And I wanna call List.member on it,

5
00:00:12.533 --> 00:00:17.818
passing the number 1 as the thing
that I wanna check the membership of.

6
00:00:17.818 --> 00:00:23.583
So List.member 1 in the list [1, 2,
3] says is 1 a member of this list?

7
00:00:23.583 --> 00:00:27.434
And this function's going to return
true because, yes, indeed 1 is,

8
00:00:27.434 --> 00:00:31.365
in fact, a member of the list 1,
2, and 3, it's in there somewhere.

9
00:00:31.365 --> 00:00:35.855
You could also say List.member 9 in
this list, and that's gonna return false

10
00:00:35.855 --> 00:00:40.093
because the number 9 is not a member
of this list, it's nowhere in there.

11
00:00:40.093 --> 00:00:44.809
We're gonna use this a little bit
in the exercise in conjunction with

12
00:00:44.809 --> 00:00:46.118
filtering lists.

13
00:00:46.118 --> 00:00:51.998
So, again let's say we have a list [1,
2, 3], and we want strip it down

14
00:00:51.998 --> 00:00:57.877
to a smaller list that has fewer values in
it by looking at each of the values and

15
00:00:57.877 --> 00:01:02.417
deciding if it's keepable,
if we want to keep that value.

16
00:01:02.417 --> 00:01:05.282
So to do this, we'll write a little
function called is keepable,

17
00:01:05.282 --> 00:01:07.651
which is gonna accept one of
these numbers in the list.

18
00:01:07.651 --> 00:01:11.149
And it's gonna return either true or
false to specify whether or

19
00:01:11.149 --> 00:01:13.822
not we wanna keep it after
we perform our filter.

20
00:01:13.822 --> 00:01:17.618
So let's say we specify our
isKeepable function to be,

21
00:01:17.618 --> 00:01:20.705
keep it only if the number
is greater than 1.

22
00:01:20.705 --> 00:01:24.255
So we call List.filter,
passing this isKeepable function and

23
00:01:24.255 --> 00:01:25.973
then the list 1, 2, and 3.

24
00:01:25.973 --> 00:01:29.196
And what filters gonna do is it's
gonna iterate over this list and

25
00:01:29.196 --> 00:01:31.199
each one is gonna call isKeepable on it.

26
00:01:31.199 --> 00:01:33.349
So it's gonna say, is 1 greater than 1?

27
00:01:33.349 --> 00:01:36.709
Not it's not, so isKeepable returns false.

28
00:01:36.709 --> 00:01:40.024
Which means we are not going to keep that,
we're gonna drop it out of the list.

29
00:01:40.024 --> 00:01:41.488
Next one, 2, is 2 greater than 1?

30
00:01:41.488 --> 00:01:43.185
Yeah, that is keepable, true.

31
00:01:43.185 --> 00:01:44.215
Is that keepable?

32
00:01:44.215 --> 00:01:45.368
Also True.

33
00:01:45.368 --> 00:01:49.529
So the end result of this is gonna be,
it's gonna return a new list 2 and 3.

34
00:01:49.529 --> 00:01:52.934
It's gonna have dropped 1 because 1 was
not keepable according to the function

35
00:01:52.934 --> 00:01:53.641
that we passed.

36
00:01:53.641 --> 00:01:57.976
And we can pass whatever function we want
here to filter the list in whatever ways

37
00:01:57.976 --> 00:01:58.759
that we want.

38
00:01:58.759 --> 00:02:03.469
Okay, one way we could do it is
this way with a named function.

39
00:02:03.469 --> 00:02:06.392
We could also just write an anonymous
function, like we saw earlier.

40
00:02:06.392 --> 00:02:09.360
Just remember that backslash
syntax with the arrow.

41
00:02:09.360 --> 00:02:16.257
So saying, \num -&gt; num &gt; 1, same thing
as naming the function isKeepable.

42
00:02:16.257 --> 00:02:19.643
That would allow us to
do it in line like this.

43
00:02:19.643 --> 00:02:22.713
And again, we'll get the same answer.

44
00:02:22.713 --> 00:02:26.706
So anonymous functions are commonly
used with filter like this,

45
00:02:26.706 --> 00:02:29.037
just the same way that they are in map.

46
00:02:29.037 --> 00:02:32.194
In general, when you tend to be
iterating over things in Elm,

47
00:02:32.194 --> 00:02:35.855
anonymous functions are a pretty
common tool for the job of doing that.

