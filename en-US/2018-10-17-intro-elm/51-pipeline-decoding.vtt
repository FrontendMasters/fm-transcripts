WEBVTT

1
00:00:00.160 --> 00:00:03.070
&gt;&gt; Richard Feldman: So let's say we want
to specifically decode this into a user

2
00:00:03.070 --> 00:00:08.120
record, which we've given a type alias
with ID, first_name, and last_name.

3
00:00:08.120 --> 00:00:12.800
Note by the way, that when you're
decoding from JSON, which perhaps has

4
00:00:12.800 --> 00:00:18.620
this structure, you don't need to have the
same field names as you do in the JSON.

5
00:00:18.620 --> 00:00:22.010
So I actually chose slightly different
names here, this has user_id, but

6
00:00:22.010 --> 00:00:24.570
I don't really wanna
use underscores because

7
00:00:24.570 --> 00:00:27.440
camelCase is kind of
the convention in Elm.

8
00:00:27.440 --> 00:00:31.420
But maybe my back end's in Ruby which
is actually at work this is true of us.

9
00:00:31.420 --> 00:00:34.680
Our back ends in Ruby tends to be the case
that the back end provides things

10
00:00:34.680 --> 00:00:38.940
with underscores, but
we tend to use camelCase, totally fine.

11
00:00:38.940 --> 00:00:42.480
Also worth noting that we don't even need
to have the types line up necessarily.

12
00:00:42.480 --> 00:00:45.040
So maybe it's coming back from
the server as a string but

13
00:00:45.040 --> 00:00:47.510
maybe we want to actually map
that into a custom type and

14
00:00:47.510 --> 00:00:51.900
we wanna say, there should be exactly one
of these three particular set of strings.

15
00:00:51.900 --> 00:00:56.110
And I want to map that to a particular
custom type variant as I'm decoding.

16
00:00:56.110 --> 00:01:00.685
And if I can't map it to one of those
variance, I wanna error out and

17
00:01:00.685 --> 00:01:05.616
fail the decoding because that's how
I want to represent it in my code.

18
00:01:05.616 --> 00:01:09.154
So it's important to think first in terms
of how do I want this to look in my

19
00:01:09.154 --> 00:01:10.210
Elm code.

20
00:01:10.210 --> 00:01:14.094
And then second be like, okay,
now how do I get from whatever serialized

21
00:01:14.094 --> 00:01:17.596
representation I'm getting from
the server, be is JSON, XML,

22
00:01:17.596 --> 00:01:20.095
whatever the case may be,
protocol buffers.

23
00:01:20.095 --> 00:01:23.630
I'm going to map that into the type that
I want to use for my front end code.

24
00:01:24.960 --> 00:01:29.330
Okay, so to do this,
we're going to write a JSON decoder

25
00:01:29.330 --> 00:01:34.240
that's going to decode a user, so
this is gonna have the type decoder user.

26
00:01:34.240 --> 00:01:36.000
And just like we saw previously with int,

27
00:01:36.000 --> 00:01:39.980
which was a decoder int, this is going
to be something that we can pass to that

28
00:01:39.980 --> 00:01:45.490
decode string function to say,
decode this string as if it were a user.

29
00:01:45.490 --> 00:01:48.780
And the purpose of this decoder is
to specify sort of a schema for

30
00:01:48.780 --> 00:01:50.340
how we expect this JSON to look.

31
00:01:50.340 --> 00:01:53.510
It's gonna say,
I expect this to have this shape and

32
00:01:53.510 --> 00:01:55.390
here is what I want you
to do with these values.

33
00:01:56.490 --> 00:02:01.350
So we'll say user =, we always
start off with Json.Decode.succeed

34
00:02:01.350 --> 00:02:05.403
when we're doing things in
the style that we're about to.

35
00:02:05.403 --> 00:02:09.775
Now there's something sort of subtle to
notice here, the first thing is that,

36
00:02:09.775 --> 00:02:12.400
we are actually passing
it a value called User.

37
00:02:13.560 --> 00:02:15.030
What is that value?

38
00:02:15.030 --> 00:02:19.280
So we haven't defined, sorry,
usually up to this point,

39
00:02:19.280 --> 00:02:24.040
whenever we see a capital letter at
the beginning of a name like this,

40
00:02:24.040 --> 00:02:27.180
its because its been
a custom type variant.

41
00:02:27.180 --> 00:02:33.174
That's the only time we've seen a value
that has that upper case first letter.

42
00:02:33.174 --> 00:02:37.982
There is one other case in Elm where
that comes up which is specifically when

43
00:02:37.982 --> 00:02:40.130
you have a type alias of a record.

44
00:02:41.370 --> 00:02:44.720
And here's what that does in that case,
when I do a type alias of a record which

45
00:02:44.720 --> 00:02:48.810
is what we have here, Elm says you
know a pretty common use case for

46
00:02:48.810 --> 00:02:52.260
records is wanting to populate
all the fields in that record.

47
00:02:53.460 --> 00:02:58.610
So a user in this case is actually
a function, which takes three arguments,

48
00:02:58.610 --> 00:03:04.390
an int, a string, and a string,
and returns one of these records.

49
00:03:04.390 --> 00:03:08.210
So if I were to call user
passing int of five and

50
00:03:08.210 --> 00:03:10.750
then a string of Richard and
lastName a Feldman.

51
00:03:10.750 --> 00:03:12.810
It would give me back
one of these records,

52
00:03:12.810 --> 00:03:15.960
it will just drop those
arguments into the slots

53
00:03:15.960 --> 00:03:20.830
in the order which I have to find in
the type alias, and give me back a record.

54
00:03:20.830 --> 00:03:24.065
So this was also known as a record
constructor, it's purely a convenience,

55
00:03:24.065 --> 00:03:27.190
if we wanted to I could have
written that function by out hand.

56
00:03:27.190 --> 00:03:28.430
But in practice, this comes up so

57
00:03:28.430 --> 00:03:31.560
commonly that people tend not to
write out those functions by hand.

58
00:03:31.560 --> 00:03:34.110
They tend to use a type alias for
the record and

59
00:03:34.110 --> 00:03:38.140
then use that thing as representation
of the function we want.

60
00:03:39.760 --> 00:03:43.832
So succeed is essentially being
passed a function that says,

61
00:03:43.832 --> 00:03:48.781
if decoding succeeds, I want you to
use this function to build the result.

62
00:03:51.481 --> 00:03:54.831
&gt;&gt; Richard Feldman: Then we're gonna
pipe that to something called required,

63
00:03:54.831 --> 00:03:57.570
this is coming from a library.

64
00:03:57.570 --> 00:04:02.531
And required says, give me the field name,
so in this case, user_id.

65
00:04:02.531 --> 00:04:07.517
And then give me a decoder describing
the type of value you expect to

66
00:04:07.517 --> 00:04:09.040
find at that field.

67
00:04:10.680 --> 00:04:14.010
So, it says, ok, this is a required field,
it's called user_id and

68
00:04:14.010 --> 00:04:16.460
its an int, here's another one.

69
00:04:16.460 --> 00:04:19.350
We also require a first_name
field which is a string, and

70
00:04:19.350 --> 00:04:23.100
we require a last_name
field which is a string.

71
00:04:23.100 --> 00:04:28.540
So if you compared these three, you can
see that this is sort of a schema mapping

72
00:04:28.540 --> 00:04:33.430
from the expected JSON structure,
to the expected record structure.

73
00:04:34.770 --> 00:04:39.110
The way that it corresponds to the record
structure is this function right here.

74
00:04:39.110 --> 00:04:43.090
This user function accepts
these fields in this order, so

75
00:04:43.090 --> 00:04:45.070
an int, a string and a string.

76
00:04:45.070 --> 00:04:48.750
And as you can see, we've defined these
as an ent and a string and a string.

77
00:04:50.070 --> 00:04:54.665
So if all of these pass, if this user_id
field is present and it is an int, and

78
00:04:54.665 --> 00:04:57.943
this first_name field is present and
it's a string.

79
00:04:57.943 --> 00:05:02.195
And this last_name field is present and
it's a string, then that's going to be

80
00:05:02.195 --> 00:05:06.135
a successful decoding and it's going
to succeed by passing each of those as

81
00:05:06.135 --> 00:05:10.529
arguments in order to this function right
here which is gonna give us back a record.

82
00:05:12.470 --> 00:05:16.235
So this is very much a DSL that's
designed to look like a schema so

83
00:05:16.235 --> 00:05:18.534
that we can glance at it and say, okay,

84
00:05:18.534 --> 00:05:22.607
I understand that the structure of
my JSON is going to look like this.

85
00:05:22.607 --> 00:05:26.127
And the structure of my Elm record is
going to be the fields are organized with

86
00:05:26.127 --> 00:05:28.280
these types in this order.

87
00:05:28.280 --> 00:05:33.397
And if all goes according to plan, when
I feed my JSON string to this decoder,

88
00:05:33.397 --> 00:05:37.677
passing it to decode string like
we did a moment ago with the int.

89
00:05:37.677 --> 00:05:39.810
Even though this structure
is much more complex,

90
00:05:39.810 --> 00:05:43.059
even though the field names are different
over here than they are over here,

91
00:05:43.059 --> 00:05:45.783
I'm going to end up with exactly
the same outcome I did before.

92
00:05:45.783 --> 00:05:48.933
We're either gonna have okay,
in which case decoding succeeded and

93
00:05:48.933 --> 00:05:51.080
now I have one of these users.

94
00:05:51.080 --> 00:05:55.160
Or an error describing what went wrong
along the way, and there's a lot more that

95
00:05:55.160 --> 00:05:58.164
could go wrong with this than
there was in the integer case.

96
00:05:58.164 --> 00:06:01.414
For example, one of these fields could be
missing that's gonna fail decoding one of

97
00:06:01.414 --> 00:06:04.345
them could have a different field name
that won't be expected that's gonna

98
00:06:04.345 --> 00:06:05.120
fail decoding.

99
00:06:05.120 --> 00:06:08.190
They could have a different type than what
we expected this is supposed to be an Int

100
00:06:08.190 --> 00:06:09.809
if it's float that will fail decoding.

101
00:06:10.890 --> 00:06:15.190
So the end result is that, this boils it
down to one of two possible outcomes.

102
00:06:15.190 --> 00:06:18.600
Either it succeeds, in which case we have
the user we wanted, or it fails, and

103
00:06:18.600 --> 00:06:20.910
we will get an error message
explaining what went wrong.

104
00:06:22.230 --> 00:06:26.800
Questions about the concept of JSON
decoders as a schema mapping between in

105
00:06:26.800 --> 00:06:32.360
JSON and Elm type of some sort,
in this case, a type alias for a record?

106
00:06:32.360 --> 00:06:36.450
&gt;&gt; Speaker 2: So are instant strings
supposed to be uppercase there?

107
00:06:36.450 --> 00:06:41.660
&gt;&gt; Richard Feldman: Good question, so
these come from the Json.Decode module.

108
00:06:41.660 --> 00:06:46.505
So I could have written it out as
Json.Decode.ent, Json.Decode.string, etc.

109
00:06:46.505 --> 00:06:49.769
It's pretty common to import
these into the current scope,

110
00:06:49.769 --> 00:06:52.880
because it's intended to
be used kinda like a DSL.

111
00:06:52.880 --> 00:06:57.060
So much like the HTML,
we tend to import those and

112
00:06:57.060 --> 00:06:59.730
reference them unqualified without
mentioning the module name.

113
00:06:59.730 --> 00:07:00.988
Same thing with decoders,

114
00:07:00.988 --> 00:07:03.893
it's pretty common to reference
them unqualified like that.

115
00:07:03.893 --> 00:07:08.653
Worth noting that decoders are composable,
so this last argument to required,

116
00:07:08.653 --> 00:07:11.720
in each of these cases, is a decoder.

117
00:07:11.720 --> 00:07:15.580
We're using them to build up a decoder, so
it stands to reason that if inside this

118
00:07:15.580 --> 00:07:18.490
user, we had another record
that we also wanted to decode.

119
00:07:18.490 --> 00:07:21.540
If we had a record for that and
we wanted to pull that off of this object,

120
00:07:21.540 --> 00:07:26.720
we could do the same thing without having
to duplicate that logic across the two.

121
00:07:27.900 --> 00:07:32.580
Decoders are powerful enough that we can
basically decode any combination of JSON,

122
00:07:32.580 --> 00:07:33.830
whatever the shape is,

123
00:07:33.830 --> 00:07:37.730
even if it has absolutely nothing to do
with the representation we want in Elm.

124
00:07:37.730 --> 00:07:40.730
And we can still make sure that it
always ends up either succeeding and

125
00:07:40.730 --> 00:07:45.710
giving us exactly what we wanted, or
failing and telling us what went wrong.

126
00:07:45.710 --> 00:07:49.127
We're not gonna get into all the different
ways you can do this, because there's

127
00:07:49.127 --> 00:07:53.010
a potentially infinitely large number
of ways people can structure JSON.

128
00:07:53.010 --> 00:07:55.570
And especially when you
are doing a third arty API

129
00:07:55.570 --> 00:07:59.110
they often structure it
infinitely in complex ways.

130
00:07:59.110 --> 00:08:03.140
But, its worth noting this is
especially powerful that it can

131
00:08:03.140 --> 00:08:04.931
cover all those use cases.

132
00:08:04.931 --> 00:08:08.111
Although granted there is some more
learning to do before you can sort of

133
00:08:08.111 --> 00:08:11.650
harness that power and understand
how to use it in different cases.

134
00:08:11.650 --> 00:08:14.850
The critical thing is no matter what, not
only could it handle all of those cases,

135
00:08:14.850 --> 00:08:19.780
but under no circumstances will it give
you an invalid value like undefined, or

136
00:08:19.780 --> 00:08:21.960
will it give you something
that is incorrectly typed.

137
00:08:21.960 --> 00:08:25.652
It will always either succeed and
give you exactly what you wanted or

138
00:08:25.652 --> 00:08:28.676
it will fail, and
the compiler will make sure of that.

139
00:08:28.676 --> 00:08:31.210
Yes, so we have a string
which is a decoder string,

140
00:08:31.210 --> 00:08:35.390
that's sort of like a built-in primitive,
we have user which is a decoder user.

141
00:08:35.390 --> 00:08:40.462
Another way that we can combine
decoders is using the list function,

142
00:08:40.462 --> 00:08:42.920
so this is json.decode.list.

143
00:08:42.920 --> 00:08:47.480
And when I pass it a decoder,
it says, okay,

144
00:08:47.480 --> 00:08:51.960
I'm going to decode a list of those.

145
00:08:51.960 --> 00:08:54.520
So this essentially says,
given a decoder user,

146
00:08:54.520 --> 00:08:58.290
I will give you back
an decoder of lists of users.

147
00:08:58.290 --> 00:09:02.080
So this comes in handy when you
have json that has an array in it.

148
00:09:02.080 --> 00:09:06.670
So let's say I have a list of users in
my model that I want to decode out of

149
00:09:06.670 --> 00:09:11.190
an array of user objects in JSON,
this function would do that.

150
00:09:11.190 --> 00:09:15.352
There's quite a few functions like this in
decoder that sort of take one particular

151
00:09:15.352 --> 00:09:19.098
decoder and then turn it into a collection
such as a list, or a dictionary,

152
00:09:19.098 --> 00:09:22.259
or any of the other types of
collections that you can use in Elm.

153
00:09:23.928 --> 00:09:27.102
&gt;&gt; Richard Feldman: Int Decoder is
another example that we saw early like

154
00:09:27.102 --> 00:09:28.408
the String.toint.

