WEBVTT

1
00:00:00.077 --> 00:00:02.394
&gt;&gt; Richard Feldman: So
whereas maybe had this shape,

2
00:00:02.394 --> 00:00:07.617
it was just val was one of the variants,
and then nothing was the other one.

3
00:00:07.617 --> 00:00:11.700
Result looks like this, it's got
an okay value and an error value, so

4
00:00:11.700 --> 00:00:15.107
it actually has two type variables,
two different ones.

5
00:00:15.107 --> 00:00:21.066
And Ok holds onto an Ok value and
an error holds onto an error value.

6
00:00:21.066 --> 00:00:25.756
So, we can also have some more complex
JSON here, such as this JSON string which

7
00:00:25.756 --> 00:00:30.814
has user_id which is a number, first_name
and last_name which are both strings.

8
00:00:30.814 --> 00:00:34.013
And we might wanna say, yeah,
I actually want to decode this thing.

9
00:00:34.013 --> 00:00:38.029
Now this is significantly more
complex than just an integer, but

10
00:00:38.029 --> 00:00:40.083
there's actually the same API.

11
00:00:40.083 --> 00:00:42.037
We can use the same decode string on this.

12
00:00:42.037 --> 00:00:45.712
We're just going to pass
it different Decoders,

13
00:00:45.712 --> 00:00:50.270
that will specify how to decode
this more complex structure.

14
00:00:50.270 --> 00:00:54.872
So in JavaScript, the way that we would
do this, is we would essentially say, hey

15
00:00:54.872 --> 00:00:59.361
give me that thing, I'm just gonna turn
it from JSON into a JavaScript object.

16
00:00:59.361 --> 00:01:04.136
I'm gonna assume that that worked,
and then I'm just gonna say json.id.

17
00:01:04.136 --> 00:01:09.160
Just assume that it worked, and then I
can access this like id field from there.

18
00:01:09.160 --> 00:01:12.112
What's gonna give me back undefined
because there is no id field here.

19
00:01:12.112 --> 00:01:14.811
There's user_id but
there's no actual id field.

20
00:01:14.811 --> 00:01:17.962
So, we're gonna receive that this
is a source of potential problem.

21
00:01:17.962 --> 00:01:20.871
Because, as we all know,
if you've got undefined,

22
00:01:20.871 --> 00:01:23.847
that can also snake it's way
through your programs and

23
00:01:23.847 --> 00:01:27.999
eventually cause one time exceptions,
even worse stuff than not a number.

24
00:01:27.999 --> 00:01:31.484
So in type script, by the way,
this is also basically the same thing.

25
00:01:31.484 --> 00:01:33.715
They don't really do anything
differently in this regard.

26
00:01:33.715 --> 00:01:38.387
They will assume if you decodes some Json,
that It's just got the shape that you say

27
00:01:38.387 --> 00:01:42.547
it is, and that may cause problems,
that may cause run time exceptions.

28
00:01:42.547 --> 00:01:46.968
But, it's up to you to sort of get it
right and not to make mistakes like this,

29
00:01:46.968 --> 00:01:48.873
when dealing with data that may or

30
00:01:48.873 --> 00:01:52.026
may not actually have the shape
that you think it does.

31
00:01:52.026 --> 00:01:55.426
Also, you can add an int
annotation in type script saying,

32
00:01:55.426 --> 00:01:58.697
I promise that ID is an int,
which can also just be wrong.

33
00:01:58.697 --> 00:02:00.444
[LAUGH] Type script will accept that and

34
00:02:00.444 --> 00:02:03.936
say, from now on I'm going to assume
as I'm type checking your program,

35
00:02:03.936 --> 00:02:06.517
that id is an int,
well in in fact it turns out it's not.

36
00:02:06.517 --> 00:02:11.264
So, sometimes people say that typescript's
type system is unsound which is like

37
00:02:11.264 --> 00:02:12.380
an academic term.

38
00:02:12.380 --> 00:02:13.575
That's what they mean by this.

39
00:02:13.575 --> 00:02:17.661
They means that basically,
like you can say things that are wrong,

40
00:02:17.661 --> 00:02:22.190
that will have impact throughout you're
code base no matter how big it is.

41
00:02:22.190 --> 00:02:24.098
Okay, but in ELM we don't want to do this,

42
00:02:24.098 --> 00:02:26.755
we're going to do something
else to avoid these problems.

43
00:02:26.755 --> 00:02:30.903
To make it so that,
as you're decoding this JSON.

44
00:02:30.903 --> 00:02:34.652
We're going to either have,OK, which case
it succeeded and we definitely know what

45
00:02:34.652 --> 00:02:37.950
it's shape is, and it's definitely
going to work the way we expect it to.

46
00:02:37.950 --> 00:02:42.120
Or we're gonna have an error,
in which case decoding did not succeed.

47
00:02:42.120 --> 00:02:46.918
It was not in the shape that we expected,
and we have to handle that some other way.

