WEBVTT

1
00:00:00.089 --> 00:00:02.162
&gt;&gt; Richard Feldman: We can also
write a type alias for our message.

2
00:00:02.162 --> 00:00:06.235
So we could say, when we've got
our view that's taking a model and

3
00:00:06.235 --> 00:00:07.928
then returning some HTML.

4
00:00:07.928 --> 00:00:12.697
Which includes an onClick that
has one of these messages,

5
00:00:12.697 --> 00:00:15.726
we can use messages to refer to that.

6
00:00:15.726 --> 00:00:19.511
So if we have, for example, a slightly
different UI that's got something

7
00:00:19.511 --> 00:00:22.224
like a button that you can
press to clear everything.

8
00:00:22.224 --> 00:00:26.779
So you can click it, it's going to say
onClick, description = ClickedClear.

9
00:00:26.779 --> 00:00:31.578
Data = ALL, so it's like clear all
button and then the text is just an X.

10
00:00:31.578 --> 00:00:35.292
If I were to click that,
then it would send that message to model,

11
00:00:35.292 --> 00:00:38.136
now if I wanted to I could also say,
you know what?

12
00:00:38.136 --> 00:00:43.134
We don't need this data field here,
I mean, there's only one sort of way that

13
00:00:43.134 --> 00:00:47.022
you can like clear this thing,
which is to clear all of them.

14
00:00:47.022 --> 00:00:49.726
We don't actually need to
have this redundant field,

15
00:00:49.726 --> 00:00:52.264
I'm just going to make my
message type be a string.

16
00:00:52.264 --> 00:00:54.592
I'm not going to have
it be a record at all,

17
00:00:54.592 --> 00:00:57.916
I'm just going to say onClick
ClickedClear, that string.

18
00:00:57.916 --> 00:01:02.544
That's totally allowed if you want, Elm
does not enforce a particular format for

19
00:01:02.544 --> 00:01:03.691
your message type.

20
00:01:03.691 --> 00:01:07.524
It says you can choose whatever
type you want for your message.

21
00:01:07.524 --> 00:01:10.553
What it doesn't force is that
you have to be consistent.

22
00:01:10.553 --> 00:01:12.738
Whatever format you pick for your message,

23
00:01:12.738 --> 00:01:15.048
you have to use that
throughout your program.

24
00:01:15.048 --> 00:01:18.027
And the reason for that is that view and
update have to communicate.

25
00:01:18.027 --> 00:01:20.579
Whatever message type
that view is producing,

26
00:01:20.579 --> 00:01:23.719
that's the same message type
that update has to consume.

27
00:01:23.719 --> 00:01:27.134
Because it's going to get past that by
the runtimes, so those have to agree.

28
00:01:27.134 --> 00:01:32.220
Whatever format you choose has to be
consistent between view and update.

29
00:01:32.220 --> 00:01:36.523
Because of that,
HTML is actually a parameterized type, and

30
00:01:36.523 --> 00:01:39.930
it's parameterized on
the type of the message.

31
00:01:39.930 --> 00:01:42.611
So view is annotated as Model, and

32
00:01:42.611 --> 00:01:47.796
it takes a model as its argument,
and then it returns Html String.

33
00:01:47.796 --> 00:01:52.051
Which basically means a virtual dom node,

34
00:01:52.051 --> 00:01:55.723
which produces string of messages.

35
00:01:55.723 --> 00:01:59.176
And the reason that this produces string
of messages is because that's what we've

36
00:01:59.176 --> 00:02:00.420
defined as our message type.

37
00:02:00.420 --> 00:02:04.395
By virtue of the fact that we put
a string here and passed it to onClick.

38
00:02:06.704 --> 00:02:08.284
&gt;&gt; Richard Feldman: And correspondingly,

39
00:02:08.284 --> 00:02:12.632
this one up here is view that takes
the Model and returns Html Msg.

40
00:02:12.632 --> 00:02:16.051
Where Msg is that type alias of
the record that we've defined previously.

41
00:02:17.954 --> 00:02:21.830
&gt;&gt; Richard Feldman: Now if we want, we
could do a third type, we could say, like,

42
00:02:21.830 --> 00:02:24.602
this one is Html Msg,
which has the record.

43
00:02:24.602 --> 00:02:27.472
This one's Html String,
which has the string for onClick,

44
00:02:27.472 --> 00:02:30.747
right here in the middle, sure,
we could have Html Float if we want.

45
00:02:30.747 --> 00:02:34.630
That's totally allowed, again,
you can pick whatever format you want,

46
00:02:34.630 --> 00:02:36.241
but you have to be consistent.

47
00:02:36.241 --> 00:02:38.373
So if this is what we're doing for view,

48
00:02:38.373 --> 00:02:42.469
that means our update function is going
to take a float as its first argument.

49
00:02:42.469 --> 00:02:44.620
Here, update's going to take
a string as its first argument.

50
00:02:44.620 --> 00:02:47.661
And here, update's going to have to
take a message as its first argument.

51
00:02:47.661 --> 00:02:51.340
And if those disagree,
if the parameterized type.

52
00:02:51.340 --> 00:02:51.891
Or sorry,

53
00:02:51.891 --> 00:02:56.071
the type parameter on Html doesn't agree
with the first argumentative update.

54
00:02:56.071 --> 00:03:00.373
The program won't compile,
Elm will insist on those being consistent.

55
00:03:00.373 --> 00:03:04.952
Any questions about the relationship
between the Html type parameter view and

56
00:03:04.952 --> 00:03:05.512
update?

57
00:03:05.512 --> 00:03:08.196
&gt;&gt; Speaker 2: Then we're
doing the update function and

58
00:03:08.196 --> 00:03:11.116
we were doing the middle
case with the float.

59
00:03:11.116 --> 00:03:14.886
Then we pass in like float for
that first argument?

60
00:03:14.886 --> 00:03:15.494
&gt;&gt; Richard Feldman: Exactly.

61
00:03:15.494 --> 00:03:16.351
&gt;&gt; Speaker 2: Or update?

62
00:03:16.351 --> 00:03:17.051
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 2: Okay.

