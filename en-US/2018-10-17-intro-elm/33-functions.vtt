WEBVTT

1
00:00:00.000 --> 00:00:02.423
&gt;&gt; Richard Feldman: All right,
if this is our message type and

2
00:00:02.423 --> 00:00:05.194
we've seen that that's
the type of message and

3
00:00:05.194 --> 00:00:08.671
then we've seen that model
also we've given a type alias.

4
00:00:08.671 --> 00:00:10.544
What's the type of update?

5
00:00:10.544 --> 00:00:17.350
This is the type of update, update takes
a message and a model and returns a model.

6
00:00:17.350 --> 00:00:18.279
Now if you're like me,

7
00:00:18.279 --> 00:00:21.490
the first time you saw a type annotation
like this you thought, that looks weird.

8
00:00:21.490 --> 00:00:23.496
That doesn't look like
that's what it's saying,

9
00:00:23.496 --> 00:00:25.320
it looks like it's saying
it takes a message and

10
00:00:25.320 --> 00:00:28.352
then returns a model and then returns
another model, what's going on there?

11
00:00:28.352 --> 00:00:29.871
Why are there two arrows there,

12
00:00:29.871 --> 00:00:32.635
shouldn't there be something
like message comma model?

13
00:00:32.635 --> 00:00:36.487
So I thought this was very weird until
someone explained to me why it is that way

14
00:00:36.487 --> 00:00:39.470
and then afterwards I was like,
that's really cool.

15
00:00:39.470 --> 00:00:41.700
Not only do I understand this now, but

16
00:00:41.700 --> 00:00:46.023
I actually think this is how it should
be and any other way would be weird and

17
00:00:46.023 --> 00:00:49.183
a misrepresentation of
what's actually accurate.

18
00:00:49.183 --> 00:00:52.043
So I'm gonna explain what
was explained to me and

19
00:00:52.043 --> 00:00:54.500
we'll see if you have the same reaction.

20
00:00:54.500 --> 00:00:59.175
Okay, so Elm repl is a nice tool for
messing around with things and

21
00:00:59.175 --> 00:01:01.731
sort of playing around with stuff.

22
00:01:01.731 --> 00:01:03.882
It's a read eval print loop.

23
00:01:03.882 --> 00:01:07.554
And if you've never used a repl before,
the basic idea is you put in an expression

24
00:01:07.554 --> 00:01:11.496
such as, let's say, I wanna call our
pluralized function, passing leaf, leaves,

25
00:01:11.496 --> 00:01:13.446
and 3, and it just prints out the result.

26
00:01:13.446 --> 00:01:15.304
So in this case, 3 leaves.

27
00:01:15.304 --> 00:01:19.163
Also in Elm repl there's a nice little
feature where it will tell you the type

28
00:01:19.163 --> 00:01:20.140
that it returned.

29
00:01:20.140 --> 00:01:23.143
So because Elm does type inference,
it's like, hey I know the answer to that.

30
00:01:23.143 --> 00:01:26.433
So I'm just gonna let you know
not only what the value is but

31
00:01:26.433 --> 00:01:29.400
also what that value type
is right there in the repl.

32
00:01:29.400 --> 00:01:32.188
So if I called pluralize leaf,
leaves, and 3,

33
00:01:32.188 --> 00:01:34.709
comes back with three
leaves as the answer.

34
00:01:34.709 --> 00:01:37.700
I can also just put a plain function
in there and Elm repl will just say,

35
00:01:37.700 --> 00:01:39.439
well here's the tag for that function.

36
00:01:39.439 --> 00:01:42.037
So in this case it takes a string and
another string and then an int and

37
00:01:42.037 --> 00:01:42.773
returns a string.

38
00:01:42.773 --> 00:01:45.401
And there's that syntax at
the end with all the arrows.

39
00:01:45.401 --> 00:01:49.154
Okay, now here's an interesting question,

40
00:01:49.154 --> 00:01:53.302
what happens if I put in
pluralize leaf and leaves?

41
00:01:53.302 --> 00:01:55.676
Well, if you remember from
earlier on the workshop,

42
00:01:55.676 --> 00:01:57.329
we discussed spatial application.

43
00:01:57.329 --> 00:02:00.724
So when you call an Elm function and
you leave off an argument,

44
00:02:00.724 --> 00:02:04.069
Elm says,
you're not done calling this function yet.

45
00:02:04.069 --> 00:02:06.525
So I'm not gonna execute it,
I'm not gonna pass undefined or

46
00:02:06.525 --> 00:02:08.520
anything like that cuz
we don't have undefined.

47
00:02:08.520 --> 00:02:12.808
What I'm gonna do is I'm gonna say,
okay, you gave me this function,

48
00:02:12.808 --> 00:02:15.390
you gave me two out of
the three arguments.

49
00:02:15.390 --> 00:02:19.916
What I'm gonna give you back is a function
that takes the last argument and then,

50
00:02:19.916 --> 00:02:24.730
finally, finishes the job and returns the
thing that the overall function returns.

51
00:02:24.730 --> 00:02:29.164
So that's partial application, okay,
so the first thing makes sense to us.

52
00:02:29.164 --> 00:02:32.065
Obviously, if you pass all the arguments,
it gives us back a string.

53
00:02:32.065 --> 00:02:35.529
Also the last thing, I think,
more intuitive than the middle thing in

54
00:02:35.529 --> 00:02:38.595
the sense that if I call it passing
two out of three arguments.

55
00:02:38.595 --> 00:02:42.457
So it's gonna give me back a function that
clearly takes an int which is the final

56
00:02:42.457 --> 00:02:46.224
argument and then returns the string
that is the result of finishing the job.

57
00:02:46.224 --> 00:02:48.866
How do we square those
with that middle thing,

58
00:02:48.866 --> 00:02:52.133
where the multiple arguments
have the multiple arrows.

59
00:02:52.133 --> 00:02:55.461
Okay, lets think about what we know or

60
00:02:55.461 --> 00:03:00.350
what we've observed in a little
bit of a different way.

61
00:03:00.350 --> 00:03:03.282
So we're calling pluralize passing leaf,
leaves, and 3, and

62
00:03:03.282 --> 00:03:04.576
that gives us back a string.

63
00:03:04.576 --> 00:03:08.254
And we've also established that if you
call pluralize passing just leaf and

64
00:03:08.254 --> 00:03:09.871
leaves, and leaving off the 3.

65
00:03:09.871 --> 00:03:13.096
That gives us back a function that
takes an int and returns a string,

66
00:03:13.096 --> 00:03:14.751
because of partial application.

67
00:03:14.751 --> 00:03:18.902
Now, another way we could write this out,
is we could put parentheses around this,

68
00:03:18.902 --> 00:03:20.082
that's fine, right?

69
00:03:20.082 --> 00:03:22.914
I mean, parentheses are essentially
harmless in this case,

70
00:03:22.914 --> 00:03:26.027
we're just saying wanna put
parentheses around that expression.

71
00:03:26.027 --> 00:03:26.903
That's legit.

72
00:03:26.903 --> 00:03:32.286
Another way we could do this is we could
put the parentheses down there and

73
00:03:32.286 --> 00:03:34.328
also add a three on the end.

74
00:03:34.328 --> 00:03:36.928
So this is essentially we've
taken the previous one and

75
00:03:36.928 --> 00:03:40.481
said, well whats in those parentheses
is a function from into string.

76
00:03:40.481 --> 00:03:43.260
So let's take that function and
give it an int.

77
00:03:43.260 --> 00:03:45.402
Well, sure enough that
will give us a string.

78
00:03:45.402 --> 00:03:48.302
And actually if we look at this,
we can see the bottom one and

79
00:03:48.302 --> 00:03:50.046
the top one are basically the same.

80
00:03:50.046 --> 00:03:51.779
I mean, all we've done is we've
just added some parenthesis.

81
00:03:51.779 --> 00:03:56.468
So the first and third example here
are really the exact same thing.

82
00:03:56.468 --> 00:03:59.843
It's just in both cases we are taking
pluralize leaf and leaves and

83
00:03:59.843 --> 00:04:01.055
then giving it a three.

84
00:04:01.055 --> 00:04:04.463
We get the same answer either way,
with or without the parenthesis.

85
00:04:04.463 --> 00:04:08.597
Okay, so let's just get rid one of them so
we can just kinda see things in this way.

86
00:04:08.597 --> 00:04:14.182
All right, what happens if we get
it only one of the three arguments.

87
00:04:14.182 --> 00:04:16.785
Well, the way the partial
application works is that,

88
00:04:16.785 --> 00:04:20.918
anytime you partially apply a function,
however remaining arguments you leave off,

89
00:04:20.918 --> 00:04:24.106
that's how many arguments
the resulting function is gonna take.

90
00:04:24.106 --> 00:04:27.193
So if we call pluralize just passing leaf,

91
00:04:27.193 --> 00:04:31.566
it's gonna give us back a function
which takes a string, and

92
00:04:31.566 --> 00:04:36.132
then returns a function that takes
an int and returns a string.

93
00:04:36.132 --> 00:04:41.649
So we can see that in action by adding
some more parentheses down here,

94
00:04:41.649 --> 00:04:46.340
and say okay, what happens if
I call that thing in this way?

95
00:04:46.340 --> 00:04:49.595
Well, if I take this,
it's a function that takes the string and

96
00:04:49.595 --> 00:04:53.955
returns a function that returns, takes an
int and returns the string, is that true?

97
00:04:53.955 --> 00:04:57.091
Well yeah, we can see that from
the example down below now that I've added

98
00:04:57.091 --> 00:04:58.266
additional parenthesis.

99
00:04:58.266 --> 00:05:02.696
If I take this exact function, and I give
it a string like it asked for, well,

100
00:05:02.696 --> 00:05:07.349
sure enough, what I get back is a function
that takes an int and returns a string.

101
00:05:07.349 --> 00:05:11.428
And if I take that, and all those
parentheses, and I give it an int,

102
00:05:11.428 --> 00:05:13.657
well then sure enough I get a string.

103
00:05:13.657 --> 00:05:16.258
So we can start to see
a pattern develop here.

104
00:05:16.258 --> 00:05:18.606
Each time, we partially apply it one more.

105
00:05:18.606 --> 00:05:20.482
If we give it one more argument,

106
00:05:20.482 --> 00:05:23.960
it gives us back sort of the next
thing in the triangle here.

107
00:05:23.960 --> 00:05:28.273
Take that one step further and
not even partially apply it all.

108
00:05:28.273 --> 00:05:30.284
Let's just give it zero arguments.

109
00:05:30.284 --> 00:05:34.167
Well, to continue the pattern,
now we're like okay, well,

110
00:05:34.167 --> 00:05:37.904
give me that very first string and
I will give you back the next

111
00:05:37.904 --> 00:05:42.410
thing which is to say, a function that
takes an int and returns a string.

112
00:05:42.410 --> 00:05:45.969
So now we sort of like
built it all the way up and

113
00:05:45.969 --> 00:05:51.337
as we can see in each of these cases
when we give it one more argument.

114
00:05:51.337 --> 00:05:54.375
All we're doing is partially
applying it one more time and

115
00:05:54.375 --> 00:05:58.653
getting one more specific function until
eventually we run out of functions, and

116
00:05:58.653 --> 00:06:00.340
we're left with just a string.

117
00:06:00.340 --> 00:06:05.084
And what if I told you that if when
I just have pluralize by itself,

118
00:06:05.084 --> 00:06:09.851
you just don't need those parenthesis and
the type annotation.

119
00:06:09.851 --> 00:06:13.622
So the reason that we annotate it like
this is essentially that either of these

120
00:06:13.622 --> 00:06:14.675
is perfectly valid.

121
00:06:14.675 --> 00:06:18.667
And in fact, if you want to annotate your
types like this Elm will allow it because

122
00:06:18.667 --> 00:06:19.557
it's accurate.

123
00:06:19.557 --> 00:06:24.006
It's just that this looks nicer, so people
tend to do it without the parentheses and

124
00:06:24.006 --> 00:06:25.395
they mean the same thing.

125
00:06:25.395 --> 00:06:28.262
So that's why this is sort of
the canonical way of writing this, but

126
00:06:28.262 --> 00:06:30.895
it's actually also really the only
accurate way to write it.

127
00:06:30.895 --> 00:06:32.508
Because this actually is what is going on.

128
00:06:32.508 --> 00:06:36.679
It really is true that pluralize
a function that takes the string and

129
00:06:36.679 --> 00:06:40.573
returns a function that takes
the integer and return a string.

130
00:06:40.573 --> 00:06:44.474
It's just that the way that Elm calls it,
it's sort of masking that by making it

131
00:06:44.474 --> 00:06:47.913
look as if it's actually a function
that requires three arguments and

132
00:06:47.913 --> 00:06:49.155
takes three arguments.

133
00:06:49.155 --> 00:06:52.094
But when we start to look at what
happens when you partially apply it,

134
00:06:52.094 --> 00:06:54.930
we can kind of see the truth,
which is that really, essentially,

135
00:06:54.930 --> 00:06:57.179
every Elm function really
only takes one argument.

136
00:06:57.179 --> 00:07:00.864
It's just that quite a lot of Elm function
happen to take argument, then return

137
00:07:00.864 --> 00:07:04.780
another function which possible takes one
argument and returns another function.

138
00:07:04.780 --> 00:07:09.023
But the syntax makes it nice, so that
you have the ergonomics of calling with

139
00:07:09.023 --> 00:07:13.868
multiple arguments while still having this
nice guarantee under the hood that partial

140
00:07:13.868 --> 00:07:17.075
application just works
consistently across the board.

141
00:07:17.075 --> 00:07:21.053
In summary,
that's why updates type as this,

142
00:07:21.053 --> 00:07:24.340
[LAUGH] message, a model, and a model.

143
00:07:24.340 --> 00:07:27.567
Okay, to sum up,
we talked about type annotations, so

144
00:07:27.567 --> 00:07:31.290
we talked about record annotations,
primitive annotations.

145
00:07:31.290 --> 00:07:35.759
We can see int, Bool and
point which is a record that has both.

146
00:07:35.759 --> 00:07:38.503
We talked about type parameters,
parameterized types,

147
00:07:38.503 --> 00:07:41.310
we talked about List String
which is to say list of strings.

148
00:07:41.310 --> 00:07:46.319
And we talked about HTML message, which is
say some HTML that emits a message of that

149
00:07:46.319 --> 00:07:51.277
particular type when the user interacts
and sends that type of message to update.

150
00:07:51.277 --> 00:07:53.101
We talked about how it's really
important that those agree.

151
00:07:53.101 --> 00:07:56.245
And if HTML's parameter is on a different
type than what update expects,

152
00:07:56.245 --> 00:07:58.950
then it won't compile,
because those need to be consistent.

153
00:07:58.950 --> 00:08:03.272
We talked about type aliases which is
a way to give a name to a particular type.

154
00:08:03.272 --> 00:08:07.115
So that we can break our types down into
different named things rather than having

155
00:08:07.115 --> 00:08:09.781
to glob them all together
when we have complex records.

156
00:08:09.781 --> 00:08:12.961
And finally, we talked about how to
annotate function, which is to say,

157
00:08:12.961 --> 00:08:14.980
annotate them based on
partial application.

158
00:08:14.980 --> 00:08:16.900
If they have multiple arguments,

159
00:08:16.900 --> 00:08:21.281
then we're going to represent that
honestly by showing an arrow at each case.

160
00:08:21.281 --> 00:08:24.863
Because essentially every Elm function
really only has one argument,

161
00:08:24.863 --> 00:08:28.037
it's just that sometimes it
returns an additional function.

