WEBVTT

1
00:00:00.223 --> 00:00:02.721
&gt;&gt; Richard Feldman: All right,
let's get to our first exercise.

2
00:00:02.721 --> 00:00:06.603
So essentially, what we're gonna be doing
for part 1 is we're gonna be going from

3
00:00:06.603 --> 00:00:08.772
the thing on the left to
the thing on the right.

4
00:00:08.772 --> 00:00:12.386
So we're gonna start off with some TODOs,
we're gonna have a little really,

5
00:00:12.386 --> 00:00:14.923
really basic main.elm with
a little bit of code in it.

6
00:00:14.923 --> 00:00:17.819
And what we're going to do is we're gonna
build it out and do a little bit of

7
00:00:17.819 --> 00:00:20.609
rendering, such that we end up with
something that looks much nicer.

8
00:00:20.609 --> 00:00:23.305
That's going to be sort
of the starting point for

9
00:00:23.305 --> 00:00:26.481
our conduit application that
we're gonna be building.

10
00:00:26.481 --> 00:00:31.200
So there are some instructions
in part1/README.md.

11
00:00:31.200 --> 00:00:33.200
I'm gonna hop on over there.

12
00:00:33.200 --> 00:00:36.400
Worth noting that you should
have this server running

13
00:00:36.400 --> 00:00:38.480
from the introduction thing.

14
00:00:38.480 --> 00:00:42.697
We're not actually gonna use the server
for the first couple exercises, because

15
00:00:42.697 --> 00:00:47.095
I wanna demonstrate just like, if you were
really starting from scratch, and all you

16
00:00:47.095 --> 00:00:51.518
wanted to do was just build some plain
index.html main.elm, here's how you do it.

17
00:00:51.518 --> 00:00:54.970
But partway through the workshop, we
are gonna switch to using this server and

18
00:00:54.970 --> 00:00:57.688
this more fully fledged code base,
so you wanna make sure that

19
00:00:57.688 --> 00:01:00.900
you're leaving this running in
a separate tab for the entire workshop.

20
00:01:02.080 --> 00:01:06.070
Okay, so we're in this intro directory,
so you should have cloned the workshop by

21
00:01:06.070 --> 00:01:09.320
now, and then there are two
directories inside a route directory,

22
00:01:09.320 --> 00:01:11.617
one's called intro, one's called advance.

23
00:01:11.617 --> 00:01:14.553
As you may have guessed,
there are two workshops I'm doing here,

24
00:01:14.553 --> 00:01:17.342
one is the intro workshop, and
the other is advance workshop.

25
00:01:17.342 --> 00:01:21.222
Definitely wanna use the intro workshop
for this, because the advance one would be

26
00:01:21.222 --> 00:01:23.895
way too hard, [LAUGH], for
what you know about Elm so far.

27
00:01:25.155 --> 00:01:28.315
Inside this intro folder,
we can see we have a readme, and then,

28
00:01:28.315 --> 00:01:29.695
a bunch of other folders.

29
00:01:29.695 --> 00:01:33.571
So part one through part nine, those
correspond to the different lessons we’re

30
00:01:33.571 --> 00:01:37.276
going to do, then server holds onto all
the back end stuff that we’re gonna be

31
00:01:37.276 --> 00:01:39.567
using, and
when we get a little bit further on.

32
00:01:39.567 --> 00:01:42.331
So the readme explains sort
of how to get setup, and

33
00:01:42.331 --> 00:01:45.368
then each of these parts has
its own readme inside of it.

34
00:01:45.368 --> 00:01:49.053
So we're gonna cd into part1, and
when we do these other exercises,

35
00:01:49.053 --> 00:01:53.371
we're gonna up a directory and go back
into part2, go up, go into part3, etc.

36
00:01:53.371 --> 00:01:56.528
Inside this directory,
let me clear real quick,

37
00:01:56.528 --> 00:01:59.092
we can see a couple of different things.

38
00:01:59.092 --> 00:02:01.300
You may not have an Elm stuff directory.

39
00:02:01.300 --> 00:02:04.881
This is a temp directory that just
stores stuff that the compiler uses.

40
00:02:04.881 --> 00:02:08.452
So it's always safe to blow that away.

41
00:02:08.452 --> 00:02:11.210
So don't worry about it,
it goes in git ignore.

42
00:02:11.210 --> 00:02:14.222
Also, there's that elm.js file.

43
00:02:14.222 --> 00:02:17.013
You might not see that because you
haven't actually run Elm make yet.

44
00:02:17.013 --> 00:02:20.237
Again, that's also safe to remove and
that's also git ignored,

45
00:02:20.237 --> 00:02:23.992
because it's fundamentally something
that's generated by the compiler.

46
00:02:23.992 --> 00:02:26.162
So both of those can
always be gotten rid of.

47
00:02:26.162 --> 00:02:30.399
So this is probably what you're seeing,
main.elm,

48
00:02:30.399 --> 00:02:34.003
readme.md, elm.json, and index.html.

49
00:02:34.003 --> 00:02:38.063
We'll get into elm.json a little bit
later, that has your dependencies for

50
00:02:38.063 --> 00:02:39.133
your application.

51
00:02:39.133 --> 00:02:43.989
Index.html is just the basic plain HTML
page that is gonna import the .js file

52
00:02:43.989 --> 00:02:45.763
that we're gonna compile.

53
00:02:45.763 --> 00:02:48.460
And then finally, we have main.elm, which
is the things we're gonna be working on.

54
00:02:49.480 --> 00:02:52.756
So let's go ahead and
open this up in our editors.

55
00:02:52.756 --> 00:02:55.264
I'm gonna use Adam for this workshop,

56
00:02:55.264 --> 00:02:58.917
but there are a whole bunch of
editors you can use for Elm.

57
00:02:58.917 --> 00:03:01.367
They all have plug-ins and
stuff like that.

58
00:03:01.367 --> 00:03:05.061
But Adam's the one I'm going
to happen to choose here.

59
00:03:05.061 --> 00:03:07.217
So this is our Main.elm file.

60
00:03:07.217 --> 00:03:08.717
Let's not quite dive into this just yet.

61
00:03:08.717 --> 00:03:12.806
Let's first start by looking at the readme
because each of these parts has a slightly

62
00:03:12.806 --> 00:03:15.637
different readme that describes
what we're going to do.

63
00:03:15.637 --> 00:03:18.026
Okay, so first of all we have
some build instructions.

64
00:03:18.026 --> 00:03:24.272
So if we want to see the part1 directory
and run elm make Main.elm --output elm.js.

65
00:03:24.272 --> 00:03:25.792
Let's go ahead and do that.

66
00:03:25.792 --> 00:03:29.462
So, as previously noted on the slide,
dependencies loaded from local cache,

67
00:03:29.462 --> 00:03:32.003
dependencies ready,
success, compiled 1 module.

68
00:03:32.003 --> 00:03:35.516
So whenever we wanna rebuild our file,
we're just gonna keep doing that,

69
00:03:35.516 --> 00:03:39.159
just keep rewriting that command, and
it's just gonna keep rebuilding it.

70
00:03:39.159 --> 00:03:39.849
By the way,

71
00:03:39.849 --> 00:03:44.870
you notice the output message is a little
bit different on these subsequent runs.

72
00:03:44.870 --> 00:03:47.181
The first one, when it says,
dependencies loaded from local cache,

73
00:03:47.181 --> 00:03:47.932
dependencies ready.

74
00:03:47.932 --> 00:03:51.151
What that's talking about is
regenerating the elm-stuff directory.

75
00:03:51.151 --> 00:03:53.530
So that's something that it uses for
caching.

76
00:03:53.530 --> 00:03:57.164
On an application this small,
it's trivial, there's not much to cache.

77
00:03:57.164 --> 00:04:01.529
But on a bigger application, that
elm-stuff directory will save you a good

78
00:04:01.529 --> 00:04:04.202
bit of time as you do
incremental recompiles.

79
00:04:04.202 --> 00:04:06.254
Oops, go back to my editor.

80
00:04:06.254 --> 00:04:09.831
Okay, [COUGH] and then we're gonna
open index.html in the browser.

81
00:04:09.831 --> 00:04:13.360
So on MacOS,
you can just type open but otherwise,

82
00:04:13.360 --> 00:04:17.643
you may wanna open it like a directory,
something like that.

83
00:04:17.643 --> 00:04:20.429
In the future, we'll be going to local
host for the server but for now,

84
00:04:20.429 --> 00:04:21.783
we're just gonna do it like this.

85
00:04:21.783 --> 00:04:23.920
So as you can see,
we have a beautiful page here,

86
00:04:23.920 --> 00:04:26.006
it says TODO replace this
div with the banner and

87
00:04:26.006 --> 00:04:29.361
then in parentheses in the future,
we'll display a feed of articles here.

88
00:04:29.361 --> 00:04:32.493
Okay, so let's actually make this happen.

89
00:04:32.493 --> 00:04:35.229
So the way we're gonna do this is
open Main.elm in your editor and

90
00:04:35.229 --> 00:04:36.600
resolve the TODOs there.

91
00:04:36.600 --> 00:04:38.065
After you complete each one,

92
00:04:38.065 --> 00:04:41.765
re-run elm make Main.elm on the terminal
to recompile the elm.js file.

93
00:04:41.765 --> 00:04:44.927
Then refresh the browser
to see the results.

94
00:04:44.927 --> 00:04:46.836
There's ways to get live reloading and
stuff like that,

95
00:04:46.836 --> 00:04:49.398
but, again, for this workshop,
we're just gonna keep it really simple.

96
00:04:49.398 --> 00:04:52.328
So you can just understand
the underlying tools that all

97
00:04:52.328 --> 00:04:54.827
these other nicer tools
are building on top of.

98
00:04:54.827 --> 00:04:57.266
Okay, Main.elm, so inside this,

99
00:04:57.266 --> 00:05:01.602
we can see a bunch of different
concepts that we've seen before.

100
00:05:01.602 --> 00:05:05.723
So we've got these divs here with classes,
we've got some text.

101
00:05:05.723 --> 00:05:09.469
We're assigning some things to names,
so we've got a thing called feed,

102
00:05:09.469 --> 00:05:11.078
we've got a thing called main.

103
00:05:11.078 --> 00:05:14.410
Ultimately, all you need to do for
this exercise is to follow these TODOs.

104
00:05:14.410 --> 00:05:17.269
So whenever you see this little emoji and
a TODO,

105
00:05:17.269 --> 00:05:20.422
it's gonna describe what you
need to do in that case.

106
00:05:20.422 --> 00:05:24.793
As far as this stuff up top, we didn't
really talk about modules and imports.

107
00:05:24.793 --> 00:05:27.004
No need to worry about those for
the purpose of this exercise.

108
00:05:27.004 --> 00:05:31.110
All you need to do is focus on
the TODOs and resolving them.

