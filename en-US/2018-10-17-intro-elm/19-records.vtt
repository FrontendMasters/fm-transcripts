WEBVTT

1
00:00:00.050 --> 00:00:01.450
&gt;&gt; Richard Feldman: Let's
talk about a few things here.

2
00:00:01.450 --> 00:00:05.770
First is records, then record updates,
those go hand in hand.

3
00:00:05.770 --> 00:00:08.050
Booleans, those may be familiar.

4
00:00:08.050 --> 00:00:09.680
And finally, the Elm Architecture,

5
00:00:09.680 --> 00:00:12.400
which is what we're gonna use to
describe interaction in our application.

6
00:00:13.540 --> 00:00:14.420
So let's start with records.

7
00:00:14.420 --> 00:00:19.290
[COUGH] This is a record in Elm, it's got
a couple of fields, so name, x and y.

8
00:00:19.290 --> 00:00:23.239
It looks a little bit similar in
syntax to a JavaScript object,

9
00:00:23.239 --> 00:00:26.303
except that it's got
equals instead of a colon.

10
00:00:26.303 --> 00:00:29.663
There are a couple of pretty substantial
differences in terms of how records work,

11
00:00:29.663 --> 00:00:31.057
compared to JavaScript objects.

12
00:00:31.057 --> 00:00:34.047
But syntactically,
they got a lot of similarities, so

13
00:00:34.047 --> 00:00:36.738
the equals being sort of
the biggest difference.

14
00:00:36.738 --> 00:00:39.058
In terms of how you read
things off of record fields,

15
00:00:39.058 --> 00:00:42.034
that does look pretty much identical
to how it does in JavaScript.

16
00:00:42.034 --> 00:00:46.983
So record.name will evaluate to foo,
record.x will evaluate to 1,

17
00:00:46.983 --> 00:00:49.216
record.y will evaluate to 3.

18
00:00:49.216 --> 00:00:52.248
Some differences between Elm records and
JavaScript objects,

19
00:00:52.248 --> 00:00:54.340
records do not have prototypes.

20
00:00:54.340 --> 00:00:58.340
They also don't have this, and
they also don't have any mutation.

21
00:00:58.340 --> 00:01:01.930
So they're sort of pretty
bland in terms of feature set.

22
00:01:01.930 --> 00:01:05.550
Really all they do is hold on
to data in an immutable way.

23
00:01:05.550 --> 00:01:08.148
So you can read stuff off of there,
you can instantiate one, and

24
00:01:08.148 --> 00:01:10.140
that's pretty much all
you can do with a record.

25
00:01:11.730 --> 00:01:14.620
So basically records are sorta
of plain immutable data.

26
00:01:16.290 --> 00:01:20.643
Okay, if you want to do records
sorta of vertically like these

27
00:01:20.643 --> 00:01:25.510
you can say like a newRecord =
[name = "bar", x = 1, y = 3].

28
00:01:25.510 --> 00:01:30.647
So this is a record that is sorta of
the same shape as the original record,

29
00:01:30.647 --> 00:01:33.100
but it has a different name value.

30
00:01:33.100 --> 00:01:35.730
So the name field has been changed.

31
00:01:35.730 --> 00:01:40.960
You can use record update syntax
like this to sort of do the same

32
00:01:40.960 --> 00:01:45.730
thing as what we did down below except
with a little bit more conciseness to it.

33
00:01:45.730 --> 00:01:48.270
So here, since x and y were not changing,

34
00:01:48.270 --> 00:01:51.690
we didn't bother specifying them
again like we did down here.

35
00:01:51.690 --> 00:01:56.490
We just said record pipe name = "bar",
and that basically means,

36
00:01:56.490 --> 00:02:00.720
I wanna make a new version of this record
that is exactly the same as the old one,

37
00:02:00.720 --> 00:02:03.230
except that this one field has changed.

38
00:02:03.230 --> 00:02:05.390
If you want,
you can change multiple fields at once.

39
00:02:05.390 --> 00:02:10.320
You could add a comma here and
say x = 7 and change name and x.

40
00:02:10.320 --> 00:02:12.880
But essentially,
these are doing the same things.

41
00:02:12.880 --> 00:02:16.520
Since records are immutable,
when we say update, what we really mean is

42
00:02:16.520 --> 00:02:20.290
give me a new record that's also
immutable, it's just based on the old one.

43
00:02:20.290 --> 00:02:22.520
We're using the old one
as a starting point and

44
00:02:22.520 --> 00:02:25.830
then only changing a couple of things
like maybe one thing about it.

45
00:02:26.840 --> 00:02:29.120
Questions on records and record updates?

