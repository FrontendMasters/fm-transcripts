WEBVTT

1
00:00:00.050 --> 00:00:01.590
&gt;&gt; Richard Feldman: So
here's the equivalent Elm code,

2
00:00:01.590 --> 00:00:04.388
this also introduces something
new that we haven't seen before.

3
00:00:04.388 --> 00:00:09.736
So list.map \str arrow, we'll get
into what that means momentarily.

4
00:00:09.736 --> 00:00:11.171
String.toUpper str,

5
00:00:11.171 --> 00:00:16.270
so String.toUpper is Elm's equivalent
of .toUpperCase in JavaScript.

6
00:00:16.270 --> 00:00:20.310
We've seen ++ and
then of course we've seen lists.

7
00:00:20.310 --> 00:00:23.080
So, this right here is
an anonymous function.

8
00:00:23.080 --> 00:00:26.360
This is how you define a function in
line in Elm without giving it a name.

9
00:00:26.360 --> 00:00:27.970
Like we did previously with pluralize.

10
00:00:30.090 --> 00:00:31.030
So syntactically,

11
00:00:31.030 --> 00:00:34.980
what's going on here is, this little
\ is intended to look like a lambda.

12
00:00:34.980 --> 00:00:39.120
So lambda is usually the term for
functions in a lot of

13
00:00:39.120 --> 00:00:42.270
programming languages, and the history
of functions in general in math.

14
00:00:42.270 --> 00:00:44.010
So that's why the backslash is there.

15
00:00:44.010 --> 00:00:48.210
It's intended to look like a little
lambda sign, as sort of a historical nod.

16
00:00:48.210 --> 00:00:51.060
We got an arrow, which indicates
the end of the argument list and

17
00:00:51.060 --> 00:00:53.180
the beginning of
the function implementation.

18
00:00:53.180 --> 00:00:57.010
So, in JavaScript, you have the double
equals arrow, or the fat arrow.

19
00:00:57.010 --> 00:01:00.530
In Elm, it's just a small arrow with
a dash instead of an equal sign.

20
00:01:02.750 --> 00:01:06.350
Also, if we had multiple arguments here,
those would be separated by spaces,

21
00:01:06.350 --> 00:01:09.199
just like in a named function,
with no commas.

22
00:01:10.430 --> 00:01:12.300
This is going to uppercase the string.

23
00:01:12.300 --> 00:01:14.570
That's going to add
an exclamation point on the end.

24
00:01:14.570 --> 00:01:17.110
And if we run this, we're gonna get
the same thing that we did with the other

25
00:01:17.110 --> 00:01:18.900
implementation, POW!, ZAP!, BLAM!.

26
00:01:18.900 --> 00:01:23.042
With exclamation points and uppercase.

27
00:01:23.042 --> 00:01:24.820
If we tried to make
the same mistake as before.

28
00:01:24.820 --> 00:01:27.624
We tried to add 500 on there,
it's just not gonna compile.

29
00:01:27.624 --> 00:01:29.960
We're gonna get this error
message at compile time.

30
00:01:29.960 --> 00:01:32.790
The third and fourth entries in this
list are different types of values.

31
00:01:32.790 --> 00:01:35.550
Hint, every entry in a list needs
to be the same type of value.

32
00:01:36.860 --> 00:01:38.030
So this will not compile,

33
00:01:38.030 --> 00:01:41.764
that's one of the ways that Elm avoids
this particular type of runtime exception.

