WEBVTT

1
00:00:00.434 --> 00:00:02.188
&gt;&gt; Richard Feldman: Talking to servers.

2
00:00:02.188 --> 00:00:05.537
So we'll start off by talking about
all of these things at once I guess.

3
00:00:05.537 --> 00:00:10.149
[LAUGH] Tuples, randomness,
commands and http.

4
00:00:10.149 --> 00:00:12.349
Start with tuples.

5
00:00:12.349 --> 00:00:17.543
So tuples fundamentally serve
the same purpose as records.

6
00:00:17.543 --> 00:00:21.523
Anytime you have a tuple,
you could also have had a record and

7
00:00:21.523 --> 00:00:23.875
they would serve the same purpose.

8
00:00:23.875 --> 00:00:28.889
All they really do is they're sort
of more concise than records because

9
00:00:28.889 --> 00:00:34.753
instead of using field names, they use
field positions to describe their fields.

10
00:00:34.753 --> 00:00:39.248
So give you an example,
here is a tuple, that's 5, 7.

11
00:00:39.248 --> 00:00:44.692
We could say x = Tuple.first,
and that'll say, okay x is 5.

12
00:00:44.692 --> 00:00:48.341
We could also use this syntax to
define the contents of a tuple.

13
00:00:48.341 --> 00:00:50.772
This is what's known as
destructuring syntax.

14
00:00:50.772 --> 00:00:54.071
So we could say ( name, x,

15
00:00:54.071 --> 00:00:58.526
y ) = again ( "foo", 5, 7 ).

16
00:00:58.526 --> 00:01:02.676
And that's going to say foo goes into
the name slot, 5 goes into x and

17
00:01:02.676 --> 00:01:03.616
7 goes into y.

18
00:01:03.616 --> 00:01:06.633
So now I have name, x,
and y all in scope, and

19
00:01:06.633 --> 00:01:10.062
they have the corresponding
values to this tuple.

20
00:01:10.062 --> 00:01:14.018
Now, as you can imagine, we could very
easily have done this with a record.

21
00:01:14.018 --> 00:01:18.087
We could say x = and
then the record name .x.

22
00:01:18.087 --> 00:01:19.282
That's totally valid.

23
00:01:19.282 --> 00:01:23.995
But again, tuples serve the same purpose
as records, it's just that here we have

24
00:01:23.995 --> 00:01:28.297
this done by field order, we didn't
actually specify a name of x and y, and

25
00:01:28.297 --> 00:01:31.132
here we have the fields
that are actually named.

26
00:01:31.132 --> 00:01:34.731
That's the difference between tuples and
records.

27
00:01:34.731 --> 00:01:39.290
The larger example converting to
a record can be done the same way.

28
00:01:39.290 --> 00:01:43.786
You can use this curly brace syntax to
destructure records in the same way that

29
00:01:43.786 --> 00:01:45.390
you can tuples if you want.

30
00:01:45.390 --> 00:01:49.380
The only difference is that,
in the tuple example, name, x, y,

31
00:01:49.380 --> 00:01:52.875
refers to the positions,
whereas in the record example,

32
00:01:52.875 --> 00:01:57.326
it actually needs them to have the same
name as whatever's in the record.

33
00:01:57.326 --> 00:02:02.493
So name, x, y,
in this case refers to the field

34
00:02:02.493 --> 00:02:07.548
that is named x, and
the field that is named y.

35
00:02:07.548 --> 00:02:12.000
But because of that, in the tuple version,
you need to, if you're destructuring them,

36
00:02:12.000 --> 00:02:14.403
specify every single one
of the fields in there,

37
00:02:14.403 --> 00:02:16.472
whereas in the record version you do not.

38
00:02:16.472 --> 00:02:20.009
You can put them in any order and you can
only specify some of them if you want and

39
00:02:20.009 --> 00:02:22.140
leave others off, that's all totally fine.

40
00:02:22.140 --> 00:02:27.265
One other quick note is that tuples
have a three element maximum.

41
00:02:27.265 --> 00:02:30.386
You can't have tuples of more than
three elements, because at that point,

42
00:02:30.386 --> 00:02:32.258
let's be real,
you ought to be using names.

43
00:02:32.258 --> 00:02:34.140
That's just like too much in a row.

44
00:02:34.140 --> 00:02:39.181
So there's, that's just enforced by the,
sort of a language decision.

45
00:02:39.181 --> 00:02:42.810
There's no technical reason that it
couldn't be more than 3, in fact,

46
00:02:42.810 --> 00:02:46.378
it used to be more than 3, but then,
basically, like, you know what,

47
00:02:46.378 --> 00:02:50.301
probably if you're using more than 3,
something's gone wrong somewhere and

48
00:02:50.301 --> 00:02:52.086
it's time to start naming things.

49
00:02:52.086 --> 00:02:53.563
Okay, so both records and

50
00:02:53.563 --> 00:02:57.670
tuples in L are nothing more than
groups of values that travel together.

51
00:02:57.670 --> 00:03:00.829
Right, if I say I wanna call
a function called animate,

52
00:03:00.829 --> 00:03:04.051
I could pass it like name = "foo",
x = 1, y = 3, and

53
00:03:04.051 --> 00:03:08.175
maybe it's gonna do something with
those values to animate something.

54
00:03:08.175 --> 00:03:13.408
I could also parse it a tuple, either way
animate is getting the same information,

55
00:03:13.408 --> 00:03:18.743
it's getting the same string and the same
two numbers, just in a different format.

56
00:03:18.743 --> 00:03:22.432
Also I could just pass it as arguments,
that's also totally fine.

57
00:03:22.432 --> 00:03:26.494
All of these, essentially, are not going
to change the underlying behavior,

58
00:03:26.494 --> 00:03:30.615
they're just three different ways of
specifying the information that we want to

59
00:03:30.615 --> 00:03:31.537
pass to animate.

60
00:03:31.537 --> 00:03:35.035
Now I mentioned this because this is
different from say JavaScript objects

61
00:03:35.035 --> 00:03:38.700
where potentially the record could have
a prototype, and it could have this,

62
00:03:38.700 --> 00:03:41.699
it could have methods that are doing
things based on the identity

63
00:03:41.699 --> 00:03:42.948
of what you're passing.

64
00:03:42.948 --> 00:03:46.144
But in Elm, all three of these,
are essentially equivalent,

65
00:03:46.144 --> 00:03:50.137
there's really no difference except in
sort of the ergonomics of the design.

66
00:03:50.137 --> 00:03:54.041
In terms of the fundamental
characteristics of what we're doing,

67
00:03:54.041 --> 00:03:56.786
we're doing the same
thing in all three cases.

68
00:03:56.786 --> 00:04:00.621
It's just that sort of we want to have
a convince of having these values travel

69
00:04:00.621 --> 00:04:03.040
around, in some cases
where they're related,

70
00:04:03.040 --> 00:04:06.757
and it's more convenient to have them
travel around as opposed to having to

71
00:04:06.757 --> 00:04:09.541
pass them one by one as
arguments to a particular thing.

72
00:04:09.541 --> 00:04:14.262
Having said that, custom types can be
much more than just values that travel

73
00:04:14.262 --> 00:04:19.205
together, they can have custom shapes,
they can have data that fits different

74
00:04:19.205 --> 00:04:24.263
characteristics, and we'll talk some
more about that in the advanced course.

