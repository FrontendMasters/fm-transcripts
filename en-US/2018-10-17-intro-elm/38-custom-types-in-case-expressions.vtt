WEBVTT

1
00:00:00.000 --> 00:00:02.937
&gt;&gt; Richard Feldman: So Bool has two
variants, Tab has three variants.

2
00:00:02.937 --> 00:00:06.541
We could make others that have four
plus variants, however many we want.

3
00:00:06.541 --> 00:00:11.108
Again Bool is the custom type here and
the variants are True and False.

4
00:00:11.108 --> 00:00:17.970
Okay, so
how can we apply this to our Tab bar here?

5
00:00:17.970 --> 00:00:20.478
Well, we can do it like this.

6
00:00:20.478 --> 00:00:25.080
Case model.tab of, and
now we can say, quite direction,

7
00:00:25.080 --> 00:00:29.048
YourFeed -&gt;, GlobalFeed -&gt;, TagFeed -&gt;.

8
00:00:29.048 --> 00:00:32.316
Notice by the way that here we
did not include the underscore.

9
00:00:32.316 --> 00:00:36.501
We didn't have a default branch,
why is that?

10
00:00:36.501 --> 00:00:38.349
Well the purpose of
the default branch is to say,

11
00:00:38.349 --> 00:00:40.435
yeah, you have to account for
all the possibilities.

12
00:00:40.435 --> 00:00:42.068
This is a case expression,

13
00:00:42.068 --> 00:00:45.408
it has to evaluate to a value
just like an if expression.

14
00:00:45.408 --> 00:00:49.424
The thing is, we have accounted for
all the possibilities.

15
00:00:49.424 --> 00:00:53.818
In this custom type, there are only three
possibilities in the entire universe.

16
00:00:53.818 --> 00:00:56.761
There's YourFeed, GloablFeed,
and TagFeed and that's it.

17
00:00:56.761 --> 00:01:00.142
Strings, there's an infinite number
of theoretical possible strings.

18
00:01:00.142 --> 00:01:03.764
Granted you're gonna run out of memory
before [LAUGH] representing some of them.

19
00:01:03.764 --> 00:01:05.470
But here there's just these three.

20
00:01:05.470 --> 00:01:09.271
So if we enumerate these three,
that'll work.

21
00:01:09.271 --> 00:01:12.603
No matter what the Elm program is
going to be able to execute this and

22
00:01:12.603 --> 00:01:15.889
it's always going to be able to
take one of these three branches.

23
00:01:15.889 --> 00:01:20.209
Because we've defined that that's
all there is in this world.

24
00:01:20.209 --> 00:01:24.902
Also worth noting that it's not just that
this is one way to do it but, actually,

25
00:01:24.902 --> 00:01:27.525
if I were to try and
add an underscore branch,

26
00:01:27.525 --> 00:01:31.274
that would not compile because
that would be unreachable code.

27
00:01:31.274 --> 00:01:32.663
The compiler would say,

28
00:01:32.663 --> 00:01:37.098
hey this branch that you've written here
cannot possibly get run because all of

29
00:01:37.098 --> 00:01:40.889
these above it already completely
specify all the possibilities.

30
00:01:40.889 --> 00:01:43.995
So you should delete that code because
it's not going to do anything and

31
00:01:43.995 --> 00:01:45.878
if you think it is you
gotta bug somewhere.

32
00:01:45.878 --> 00:01:47.818
Also, we can't repeat any of these.

33
00:01:47.818 --> 00:01:49.483
I can't say YourFeed twice in there.

34
00:01:49.483 --> 00:01:52.944
It's gonna say, that's already
been covered by a previous case.

35
00:01:52.944 --> 00:01:57.512
Also, I can't just leave TagFeed off and
only specify YourFeed and GlobalFeed.

36
00:01:57.512 --> 00:01:59.132
If I do that, it's gonna say, nope.

37
00:01:59.132 --> 00:02:00.892
You've not accounted for
the possibility of a TagFeed.

38
00:02:00.892 --> 00:02:03.532
You need to incorporate that too.

39
00:02:03.532 --> 00:02:06.167
So working with custom types
is pretty nice and reliable,

40
00:02:06.167 --> 00:02:09.356
when it comes to how we can deal with
them in terms of case expressions.

41
00:02:09.356 --> 00:02:12.709
It's pretty hard to mess this up as
long as you don't use the underscore,

42
00:02:12.709 --> 00:02:15.050
you just say, YourFeed,
GlobalFeed, TagFeed.

43
00:02:15.050 --> 00:02:18.061
If I leave one off,
if I specify more than I should,

44
00:02:18.061 --> 00:02:21.773
if I specify cases that can't be reached,
in all those cases,

45
00:02:21.773 --> 00:02:25.784
Elm is gonna give me an error at
compile time so I can't mess that up.

46
00:02:25.784 --> 00:02:29.389
Cool, so having no default
case is actually a good thing,

47
00:02:29.389 --> 00:02:31.755
it lets the compiler help us out more.

48
00:02:31.755 --> 00:02:33.124
Sometimes it's the right tool for the job.

49
00:02:33.124 --> 00:02:36.577
Sometimes you wanna have a default case
because maybe you have 20 different

50
00:02:36.577 --> 00:02:38.593
variants and
you only care about one of them,

51
00:02:38.593 --> 00:02:41.056
you don't wanna specify on
19 if you don't have to.

52
00:02:41.056 --> 00:02:44.647
But usually when you have multiple
different ones and you actually do wanna

53
00:02:44.647 --> 00:02:48.533
do something different, it's best to use
it this way and not use a default case.

54
00:02:48.533 --> 00:02:51.921
That's different than in JavaScript where
usually the best practice is is to always

55
00:02:51.921 --> 00:02:52.789
have a default case.

56
00:02:52.789 --> 00:02:56.665
In Elm, it's actually better not to,
if you can get away with it.

