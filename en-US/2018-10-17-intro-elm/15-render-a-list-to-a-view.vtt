WEBVTT

1
00:00:00.016 --> 00:00:02.500
&gt;&gt; Richard Feldman: So, one of the ways
that we can use these concepts,

2
00:00:02.500 --> 00:00:05.080
like putting all of the things
we just talked about together,

3
00:00:05.080 --> 00:00:08.520
is we can think about how
to go from a list of names,

4
00:00:08.520 --> 00:00:13.780
which is a list of strings,
into a list of virtual DOM HTML values.

5
00:00:14.930 --> 00:00:18.170
So let's say we have these and
we want to, these names and

6
00:00:18.170 --> 00:00:20.670
we want to turn them into
something rendered on the screen.

7
00:00:20.670 --> 00:00:24.210
We want to put them as list
items inside an unordered list,

8
00:00:24.210 --> 00:00:27.310
where each of them has the text
of the particular name.

9
00:00:28.320 --> 00:00:31.990
So the goals to go from Erica to
a list item that has Erica in it,

10
00:00:33.010 --> 00:00:36.030
we can do that by writing
a function called viewName.

11
00:00:36.030 --> 00:00:38.170
And viewName takes a name, and

12
00:00:38.170 --> 00:00:41.990
just returns a li with no attributes and
the text of the name.

13
00:00:43.280 --> 00:00:47.180
So just by writing this one function, we
can then essentially do the same thing for

14
00:00:47.180 --> 00:00:52.460
each of those,
by calling list.map viewName names.

15
00:00:52.460 --> 00:00:55.230
This is essentially doing the same
thing we did previously with pluralize,

16
00:00:55.230 --> 00:01:00.250
except applying it virtual DOM values
rather than strings or numbers,

17
00:01:00.250 --> 00:01:01.560
like we did previously.

18
00:01:01.560 --> 00:01:05.680
It's the same basic idea, and, again,
because in Elm virtual DOM is done

19
00:01:05.680 --> 00:01:08.810
by using plain function calls,
we don't need to do anything else.

20
00:01:08.810 --> 00:01:10.575
There's no special syntax for doing this.

21
00:01:10.575 --> 00:01:14.860
List.map works the same way as
it does on strings, numbers, and

22
00:01:14.860 --> 00:01:16.510
on virtual DOM nodes.

23
00:01:18.280 --> 00:01:20.210
Any questions on how that works?

24
00:01:20.210 --> 00:01:24.060
&gt;&gt; Speaker 2: Could you use parends
in this case for the ul function?

25
00:01:24.060 --> 00:01:27.060
Cuz it takes in two arguments.

26
00:01:27.060 --> 00:01:28.660
&gt;&gt; Richard Feldman: Yes, exactly.

27
00:01:28.660 --> 00:01:30.690
So if I did not put
these parentheses here,

28
00:01:30.690 --> 00:01:33.620
then I would be passing
U L five arguments.

29
00:01:33.620 --> 00:01:36.550
I would be passing it,
empty list for its attributes.

30
00:01:36.550 --> 00:01:40.040
Then I’d be passing it, the list dot
map function, as a second argument, and

31
00:01:40.040 --> 00:01:43.560
then view name, as its fourth argument,
third argument, and

32
00:01:43.560 --> 00:01:44.620
then names is the fourth argument.

33
00:01:44.620 --> 00:01:46.870
So, it’d be hashing out, yeah,
four arguments instead of two.

34
00:01:46.870 --> 00:01:50.840
Whereas with the parentheses, it says,
okay, this right here, call list dot map,

35
00:01:50.840 --> 00:01:53.130
passing view new names,
take the result of that, and

36
00:01:53.130 --> 00:01:54.660
pass it as the second argument to U L.

37
00:01:54.660 --> 00:01:55.198
Exactly right.

38
00:01:55.198 --> 00:01:57.621
Other questions?

39
00:02:00.828 --> 00:02:01.510
&gt;&gt; Richard Feldman: Okay.

40
00:02:02.540 --> 00:02:07.400
Excellent, worth noting that
the parentheses, as previously noticed,

41
00:02:07.400 --> 00:02:11.990
are sort of a key to that working out.

42
00:02:11.990 --> 00:02:13.580
And the result of doing this is that,

43
00:02:13.580 --> 00:02:18.370
we're going to map each of these into
the list items, not just the first one.

