WEBVTT

1
00:00:00.000 --> 00:00:01.801
&gt;&gt; Richard Feldman: So,
here's our one and only TODO.

2
00:00:01.801 --> 00:00:04.769
When the user inputs a username,
update it in the model.

3
00:00:04.769 --> 00:00:07.530
We'll look at how the email
input below does this.

4
00:00:07.530 --> 00:00:13.532
Okay, so if we delete this, and
we compare these two fields on the form.

5
00:00:13.532 --> 00:00:17.042
So we've got right here,
Username, Email, and Password.

6
00:00:17.042 --> 00:00:20.192
And each of these has a sort
placeholder in there,

7
00:00:20.192 --> 00:00:24.850
so placeholder Username,
placeholder Email, placeholder Password.

8
00:00:24.850 --> 00:00:29.335
And then they've got a value which
corresponds to the form.username and

9
00:00:29.335 --> 00:00:33.456
form.email, which Elm is gonna fill
that in with whatever value is

10
00:00:33.456 --> 00:00:34.986
currently in the model.

11
00:00:34.986 --> 00:00:40.029
And then we see that email
has onInput EnteredEmail,

12
00:00:40.029 --> 00:00:43.287
but the Username branch does not.

13
00:00:43.287 --> 00:00:49.029
So we're gonna put something in there,
onInput EnteredUsername.

14
00:00:49.029 --> 00:00:52.188
onInput by the way, so
now that we're in solutions mode,

15
00:00:52.188 --> 00:00:55.034
I can actually explain what
some of these things do.

16
00:00:55.034 --> 00:00:59.726
onInput essentially is an event that
fires whenever the user types into

17
00:00:59.726 --> 00:01:03.018
a text box or,
when they edit it in some other way.

18
00:01:03.018 --> 00:01:06.584
For example, you can right-click and hit
cut, you can right-click and hit paste.

19
00:01:06.584 --> 00:01:10.732
There are various ways other than typing
on the keyboard that you can edit

20
00:01:10.732 --> 00:01:11.693
an input field.

21
00:01:11.693 --> 00:01:16.640
onInput is so named because the event
name that actually gets broadcast

22
00:01:16.640 --> 00:01:18.875
from download is called input.

23
00:01:18.875 --> 00:01:22.529
It's like quote input,
that's the name of the event.

24
00:01:22.529 --> 00:01:25.063
This sometimes surprises
people coming from React,

25
00:01:25.063 --> 00:01:26.816
because Raact calls this onChange.

26
00:01:26.816 --> 00:01:29.633
I think the reason they did that was that
they didn't like the name onInput, but

27
00:01:29.633 --> 00:01:31.120
Elm went with what the browser went with.

28
00:01:31.120 --> 00:01:33.993
So it's called onInput because
that's what the browser calls it.

29
00:01:33.993 --> 00:01:35.904
We didn't rename it to onChange.

30
00:01:35.904 --> 00:01:40.184
There's a separate change event that
only fires when it loses focus, but

31
00:01:40.184 --> 00:01:43.097
that's a separate event
in Elm's terminology.

32
00:01:43.097 --> 00:01:46.616
So onInput is a very common thing
that you end up using in practice for

33
00:01:46.616 --> 00:01:50.713
handling things like user input where
you wanna handle keystrokes as well as,

34
00:01:52.568 --> 00:01:54.215
&gt;&gt; Richard Feldman: When they edit, cut,

35
00:01:54.215 --> 00:01:57.263
and edit, paste and all that good stuff.

36
00:01:57.263 --> 00:02:02.313
Okay, onInput is also a function
which expects a function.

37
00:02:02.313 --> 00:02:04.577
So onClick wanted just a message, but

38
00:02:04.577 --> 00:02:07.850
onInput actually wants
a string to message function.

39
00:02:07.850 --> 00:02:13.413
Because it's going to be sending you
the string that the user is typing in,

40
00:02:13.413 --> 00:02:18.381
in other words,
event.target.value in JavaScript parlance.

41
00:02:18.381 --> 00:02:20.512
Now this right here is
not going to compile.

42
00:02:20.512 --> 00:02:23.523
If I go back over here into elm make and
I run this again,

43
00:02:23.523 --> 00:02:27.800
it's gonna say NAMING ERROR,
I cannot find EnteredUsername constructor.

44
00:02:27.800 --> 00:02:30.490
These names seem close though,
EnteredEmail, Username, EnteredPassword.

45
00:02:30.490 --> 00:02:35.019
Well, that's helpful, but unfortunately,
it's not that I mistyped it,

46
00:02:35.019 --> 00:02:37.677
it's just that, that thing does not exist.

47
00:02:37.677 --> 00:02:39.070
So let's go make it exist.

48
00:02:39.070 --> 00:02:42.748
So if I go back up here in my Msg custom
type, we have EnteredEmail which holds

49
00:02:42.748 --> 00:02:46.035
onto a string, we have EnteredPassword
which holds onto a string.

50
00:02:46.035 --> 00:02:50.683
Just gonna go ahead and
add another one for EnteredUsername.

51
00:02:50.683 --> 00:02:53.289
And once again,
we want that to hold on to a string.

52
00:02:53.289 --> 00:02:55.944
So this is sort of a, again,
description of what happened, right?

53
00:02:55.944 --> 00:02:59.182
User entered an email, user entered
a password, user entered a username,

54
00:02:59.182 --> 00:02:59.750
excellent.

55
00:02:59.750 --> 00:03:01.433
All right, so now we're done, right?

56
00:03:01.433 --> 00:03:02.583
No, what is this?

57
00:03:02.583 --> 00:03:06.730
Missing patterns, this case does not
have branches for all possibilities.

58
00:03:06.730 --> 00:03:09.444
So it's got EnteredEmail,
EnteredPassword, SubmittedForm,

59
00:03:09.444 --> 00:03:11.532
this is gonna be the case
inspection on our update.

60
00:03:11.532 --> 00:03:13.943
Missing possibilities
include EnteredUsername.

61
00:03:13.943 --> 00:03:19.678
So we did add it to our message type,
but we forgot to actually implement it.

62
00:03:19.678 --> 00:03:21.755
I would have to crash
if I saw one of those.

63
00:03:21.755 --> 00:03:22.597
Add branches for them.

64
00:03:22.597 --> 00:03:23.718
Okay, fair enough, fair enough.

65
00:03:23.718 --> 00:03:25.840
All right,
how do we add the branch for that?

66
00:03:25.840 --> 00:03:29.379
Well, we've got some nice modeling
here in the form of EnteredEmail and

67
00:03:29.379 --> 00:03:30.373
EnteredPassword.

68
00:03:30.373 --> 00:03:32.856
We can just basically copy and
paste what we did that, and

69
00:03:32.856 --> 00:03:36.091
do the same thing because we want this
fundamentally to work the same way.

70
00:03:36.091 --> 00:03:39.901
So we'll say EnteredUsername,
give the string that's held in there,

71
00:03:39.901 --> 00:03:41.092
the name of username.

72
00:03:41.092 --> 00:03:45.382
And then, we've got this updateForm
helper function, I'm not gonna jump into

73
00:03:45.382 --> 00:03:49.375
the implementation of that, although
it's not really doing a whole lot.

74
00:03:49.375 --> 00:03:53.745
Except to note that, we can just sort of
look at the pattern of this code and say,

75
00:03:53.745 --> 00:03:56.484
okay, it takes a form and
then it's doing a record

76
00:03:56.484 --> 00:04:00.423
update on that form to put whatever
changed value we have into the form.

77
00:04:00.423 --> 00:04:01.779
So it's just storing it.

78
00:04:01.779 --> 00:04:05.877
So form username = username,
everything else is the same.

79
00:04:05.877 --> 00:04:10.605
Recompile, hey, success and
let's see if it actually worked.

80
00:04:10.605 --> 00:04:12.502
So I'm going to register as rtfeldman.

81
00:04:12.502 --> 00:04:15.437
Email is rtfeldman@example.com.

82
00:04:15.437 --> 00:04:18.635
This is not my real email address,
don't send email there.

83
00:04:18.635 --> 00:04:20.693
Password is going to be blah blah.

84
00:04:20.693 --> 00:04:23.302
I don't mind saying that out loud
because this is my local server so

85
00:04:23.302 --> 00:04:24.666
it's not like anyone can hack me.

86
00:04:24.666 --> 00:04:27.630
And let's sign up and
promptly get a server error.

87
00:04:27.630 --> 00:04:31.102
Unfortunately, as much as Elm can
help with problems on the front-end,

88
00:04:31.102 --> 00:04:34.129
it still can't prevent things
from breaking on the back-end.

89
00:04:34.129 --> 00:04:38.490
But at least now we are able to
successfully type something in here,

90
00:04:38.490 --> 00:04:43.174
type in the email, and have it
successfully send the form to the server.

91
00:04:43.174 --> 00:04:45.752
Whereas before it was just
always clearing that thing out.

