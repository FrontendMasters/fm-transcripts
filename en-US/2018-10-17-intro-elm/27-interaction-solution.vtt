WEBVTT

1
00:00:00.440 --> 00:00:04.574
&gt;&gt; Richard Feldman: Our first TO DO is,
If msg.description is ClickedTag,

2
00:00:04.574 --> 00:00:08.803
then set the model's selectedTag
field to be msg.data.

3
00:00:08.803 --> 00:00:13.321
Actually before we go through these,
let me just go ahead and

4
00:00:13.321 --> 00:00:16.432
build this and bring it up in the browser.

5
00:00:16.432 --> 00:00:21.070
Got Part 3 Index.html, just so we can
kinda see the before and then the after.

6
00:00:21.070 --> 00:00:25.200
So before is that it's displaying
all of the articles in the feed and

7
00:00:25.200 --> 00:00:26.990
clicking on these things
doesn't do anything.

8
00:00:26.990 --> 00:00:29.630
So we're gonna make them actually work.

9
00:00:29.630 --> 00:00:33.380
So first one,
we're gonna wire up the update function.

10
00:00:33.380 --> 00:00:39.234
So when we get one of these messages, we
want to set the model selected tag field.

11
00:00:39.234 --> 00:00:43.387
So if message.description is clicks tag,

12
00:00:43.387 --> 00:00:49.907
then you want to set the model's
selectedTag field to be msg.data.

13
00:00:49.907 --> 00:00:55.713
So I'm gonna say model |
selectedTag = msg.data.

14
00:00:58.785 --> 00:01:01.665
&gt;&gt; Richard Feldman: So, we do need
an else here because every if has to come

15
00:01:01.665 --> 00:01:02.440
with an else.

16
00:01:03.690 --> 00:01:05.160
Now we've got one.

17
00:01:05.160 --> 00:01:08.120
So fundamentally, what this is doing is,
saying anytime that

18
00:01:08.120 --> 00:01:12.060
this function is called and messages
a record with a description field.

19
00:01:12.060 --> 00:01:15.690
That description field has clicked
tag as the string inside there.

20
00:01:15.690 --> 00:01:19.230
Then, we're going to return a new model
that is exactly the same as the old one.

21
00:01:19.230 --> 00:01:23.250
Except, that we've changed
the selected tag to the whatever is in

22
00:01:23.250 --> 00:01:25.290
the data field of the message.

23
00:01:25.290 --> 00:01:27.350
So that's the first
thing we're going to do.

24
00:01:27.350 --> 00:01:31.980
The next thing we're going to do is we're
going to use that currently selected tag

25
00:01:31.980 --> 00:01:36.880
inside the model to filter the articles
down to only the ones that include

26
00:01:36.880 --> 00:01:38.220
that currently selected tag.

27
00:01:39.270 --> 00:01:42.890
So here's our list out of filter, so
it's going to iterate through each element

28
00:01:42.890 --> 00:01:45.550
in the allArticles list
inside of our model.

29
00:01:45.550 --> 00:01:49.280
And then it's going to run this
anonymous function on each of them.

30
00:01:49.280 --> 00:01:51.450
That's gonna be our sort
of is keepable function.

31
00:01:51.450 --> 00:01:53.630
So we're gonna return True
if we should keep it and

32
00:01:53.630 --> 00:01:57.340
False if we should drop it, and
filter it out and not show it.

33
00:01:57.340 --> 00:01:58.510
So how do we know if we should keep it or
not?

34
00:01:59.510 --> 00:02:02.890
Well, each article has a tags field on it.

35
00:02:02.890 --> 00:02:07.800
So the tags is a list of strings that
tells us which tags the article has.

36
00:02:07.800 --> 00:02:10.160
We also know about
the selected tag on the model.

37
00:02:10.160 --> 00:02:12.930
So we wanna keep this article if and

38
00:02:12.930 --> 00:02:18.730
only if its tags list includes
the model selected tag.

39
00:02:18.730 --> 00:02:21.330
So how we're gonna do
that is with list.member.

40
00:02:21.330 --> 00:02:25.160
And as we saw before, list.member takes as
its first argument, the thing that we're

41
00:02:25.160 --> 00:02:30.570
gonna be checking for,
which in this case is model.selectedTag.

42
00:02:30.570 --> 00:02:37.280
When we're checking for that inside the
following List, the List of article.tags.

43
00:02:37.280 --> 00:02:42.310
So putting those together, we now have a
filter function that is going to check for

44
00:02:42.310 --> 00:02:43.526
each of these articles.

45
00:02:43.526 --> 00:02:49.730
Does that article's list of tags
include the selected tag in the model?

46
00:02:49.730 --> 00:02:51.030
If so, keep it.

47
00:02:51.030 --> 00:02:52.090
It shouldn't be filtered out.

48
00:02:53.410 --> 00:02:57.280
And if not, then it should be filtered
out and we will drop it from the list.

49
00:02:58.380 --> 00:03:03.100
Okay, and the last piece of
the puzzle is connecting view and

50
00:03:03.100 --> 00:03:06.490
update through an onClick
handler that's going to specify

51
00:03:06.490 --> 00:03:10.060
a message to send to update
every time the user clicks it.

52
00:03:11.070 --> 00:03:13.100
So here's our onClick handler.

53
00:03:13.100 --> 00:03:17.540
We're gonna give it a description, and
that description is going to be based on

54
00:03:17.540 --> 00:03:23.740
the one that we want inside of update,
which is to say ClicksTag.

55
00:03:23.740 --> 00:03:26.310
So it's really important that those line
up, so that when update receives this

56
00:03:26.310 --> 00:03:29.910
message as an argument,
it runs the appropriate logic.

57
00:03:29.910 --> 00:03:32.870
So we're gonna put that there for
description.

58
00:03:32.870 --> 00:03:37.382
And the data is going to change
depending on the current tag.

59
00:03:37.382 --> 00:03:38.322
So the data,

60
00:03:38.322 --> 00:03:43.800
the way that we use that in update was
that we said selectedtag=msg.data.

61
00:03:43.800 --> 00:03:47.717
So whatever we put in that data field is
gonna end up becoming our selected tag.

62
00:03:47.717 --> 00:03:52.450
And then later on, we use that selected
tag inside of our filter function.

63
00:03:52.450 --> 00:03:58.560
So we want this selected tag to be
one of the tags inside article.tags.

64
00:03:58.560 --> 00:04:02.110
Which means that it's going to need to
be something along the lines of Elm

65
00:04:02.110 --> 00:04:06.820
programming etc.,
depending on what the current tag is.

66
00:04:06.820 --> 00:04:10.720
So inside each of these tags we've got
the selected tag names which is the one in

67
00:04:10.720 --> 00:04:12.160
our application that's currently selected.

68
00:04:12.160 --> 00:04:15.310
Then we also have tagName,
which is what the current tag name for

69
00:04:15.310 --> 00:04:17.260
the tag that we’re rendering right now.

70
00:04:17.260 --> 00:04:19.320
And that’s the one we
wanna put as the data.

71
00:04:20.500 --> 00:04:22.910
So putting those together,
whenever the user clicks,

72
00:04:22.910 --> 00:04:26.970
it’s going to send a message to update,
that is, the Elm runtime’s gonna send this

73
00:04:26.970 --> 00:04:31.550
message to update, with the description
of ClickedTag and a data of tagName.

74
00:04:31.550 --> 00:04:34.770
Then update is going to look
at that descriptions AI,

75
00:04:34.770 --> 00:04:36.770
see I have receive a ClickedTag message.

76
00:04:36.770 --> 00:04:39.420
If we had other messages,
we can handle that with elses.

77
00:04:39.420 --> 00:04:42.650
And then update the model to
have that be the selected tag.

78
00:04:42.650 --> 00:04:48.060
And then based on that, view is then
gonna get called with that new model.

79
00:04:48.060 --> 00:04:51.730
It's going to re-run this filter function
which is going to check to see if

80
00:04:51.730 --> 00:04:52.640
the currently, or

81
00:04:52.640 --> 00:04:57.240
the new selected tag is in each of
the tags of each of these articles.

82
00:04:57.240 --> 00:05:01.370
And it's only going to render
the articles for which that's true.

83
00:05:01.370 --> 00:05:02.750
So let's see how that looks.

84
00:05:05.460 --> 00:05:08.540
Okay, so right away we can see that
instead of having that filter function

85
00:05:08.540 --> 00:05:11.110
return true,
even as soon as I refresh the page,

86
00:05:11.110 --> 00:05:13.860
on the very first load it looks
a little bit different now.

87
00:05:13.860 --> 00:05:17.820
Now, we only have articles being rendered
that have that tag of Elm on them.

88
00:05:18.820 --> 00:05:21.640
We change it to fun, we only get that one.

89
00:05:21.640 --> 00:05:23.310
Programming, we only get that one.

90
00:05:23.310 --> 00:05:25.120
And dragons, we only get that one.

91
00:05:25.120 --> 00:05:28.448
So there we have it,
fully interactive Elm application.

92
00:05:28.448 --> 00:05:30.437
Questions?

93
00:05:32.721 --> 00:05:34.420
&gt;&gt; Richard Feldman: Yeah?

94
00:05:34.420 --> 00:05:37.260
&gt;&gt; Speaker 2: So one of the things
that I think can be a little maybe

95
00:05:37.260 --> 00:05:38.740
confusing is the unclick.

96
00:05:38.740 --> 00:05:43.290
We're used to,
maybe if you're coming from JavaScript,

97
00:05:43.290 --> 00:05:47.500
to being a function, whereas here
it's just like, here's a record.

98
00:05:47.500 --> 00:05:48.500
&gt;&gt; Richard Feldman: Right.

99
00:05:48.500 --> 00:05:50.720
Yeah, so that's a great point.

100
00:05:50.720 --> 00:05:53.970
In JavaScript, onclick is usually
a handler that takes a function.

101
00:05:53.970 --> 00:05:57.050
Whereas in Elm, it does not take
a function, it just takes a value.

102
00:05:57.050 --> 00:06:00.720
All it wants to know is, what is
the message I should send to update?

103
00:06:00.720 --> 00:06:03.240
Which I guess is a pretty fundamental
difference between Elm and JavaScript is

104
00:06:03.240 --> 00:06:08.750
that in elm, the elm architecture is the
way that we describe how things interact.

105
00:06:08.750 --> 00:06:12.760
Whereas in JavaScript, it's more open
ended and you have event listers and

106
00:06:12.760 --> 00:06:13.720
stuff like that.

107
00:06:13.720 --> 00:06:16.665
So yeah, that is a definite
difference between the two.

