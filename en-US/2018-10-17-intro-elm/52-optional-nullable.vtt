WEBVTT

1
00:00:00.000 --> 00:00:02.830
&gt;&gt; Richard Feldman: Another thing that
could happen is that we can get some JSON

2
00:00:02.830 --> 00:00:03.826
that has null in it.

3
00:00:03.826 --> 00:00:08.011
That's not a concept in Elm,
Elm doesn't have null, but JavaScript and

4
00:00:08.011 --> 00:00:10.253
by extension JSON absolutely have it.

5
00:00:10.253 --> 00:00:13.244
So how do we handle it when we
receive something like that?

6
00:00:13.244 --> 00:00:14.946
Another question we might have is,

7
00:00:14.946 --> 00:00:17.395
what happens when we have
a field that is optional?

8
00:00:17.395 --> 00:00:20.764
In other words, sometimes it's going
to be present and sometimes it's not.

9
00:00:20.764 --> 00:00:23.624
So here we have a different data
structure that we're decoding into,

10
00:00:23.624 --> 00:00:24.840
a different version of user.

11
00:00:24.840 --> 00:00:27.890
And also some different JSON
that's going to be going into it.

12
00:00:27.890 --> 00:00:32.404
So in this JSON, we have a user ID,
which is an integer, just like before,

13
00:00:32.404 --> 00:00:35.358
we have a name field,
which in this case is null.

14
00:00:35.358 --> 00:00:39.889
And on the Elm side, we say, okay id is
going to be the integer, just like before,

15
00:00:39.889 --> 00:00:42.468
name is maybe going to be a string,
maybe not.

16
00:00:42.468 --> 00:00:46.990
But email is something we
explicitly expect to always be set.

17
00:00:46.990 --> 00:00:49.110
However, it's not present in the JSON,

18
00:00:49.110 --> 00:00:53.118
this JSON does not include an email
address, so how do we handle these things?

19
00:00:53.118 --> 00:00:55.708
Well we start off essentially
the same way as we did before.

20
00:00:55.708 --> 00:00:58.890
We're saying we're going to make a user
that's going to be a Decoder User.

21
00:00:58.890 --> 00:01:02.691
We'll start off with Json.Decode.succeed,
once again, passing in User,

22
00:01:02.691 --> 00:01:05.027
which is going to be
a function that takes an Int.

23
00:01:05.027 --> 00:01:09.752
And this time a Maybe String and then
a String and finally returns a User, so

24
00:01:09.752 --> 00:01:11.789
far, so good, same as before.

25
00:01:11.789 --> 00:01:14.694
The first step we're going to do is
we're going to decode the user_id again,

26
00:01:14.694 --> 00:01:16.423
same as before, because there's no change.

27
00:01:16.423 --> 00:01:20.688
It's present, it's always going to be
present, and it's going to decode directly

28
00:01:20.688 --> 00:01:23.610
from an Int on the JavaScript
side to an Int on the Elm side.

29
00:01:23.610 --> 00:01:28.030
No change there, there is necessarily
going to have to be a change here for

30
00:01:28.030 --> 00:01:28.898
two reasons.

31
00:01:28.898 --> 00:01:34.418
One is, on the name side,
on the JSON side, name is null,

32
00:01:34.418 --> 00:01:38.615
and on the Elm side,
name is a Maybe String.

33
00:01:38.615 --> 00:01:43.090
Fortunately there is a decoder
combinator called nullable.

34
00:01:43.090 --> 00:01:46.731
And so nullable is a function
that takes a decoder and

35
00:01:46.731 --> 00:01:50.883
returns a maybe version of
whatever that thing decodes to.

36
00:01:50.883 --> 00:01:55.127
So just like we saw you could have a list
string which gives you back a decoder of

37
00:01:55.127 --> 00:01:56.183
a list of strings.

38
00:01:56.183 --> 00:01:59.743
You say nullable string,
that takes a decoder string and

39
00:01:59.743 --> 00:02:02.350
gives you back a decoder of maybe string.

40
00:02:02.350 --> 00:02:06.079
And as you might guess, the way that
it decides whether to use a just or

41
00:02:06.079 --> 00:02:09.767
a nothing, depends on whether
the value is either null or not null.

42
00:02:09.767 --> 00:02:13.102
So, in this example,
because name is coming in as null,

43
00:02:13.102 --> 00:02:15.680
that will come in as
nothing on the Elm side.

44
00:02:15.680 --> 00:02:19.649
If on the other hand, name had come in as
a string, that would come in as just and

45
00:02:19.649 --> 00:02:21.286
then the string on the Elm side.

46
00:02:21.286 --> 00:02:25.820
So, an important implication of this is
that we have to say upfront whether or

47
00:02:25.820 --> 00:02:28.700
not we expect null to be
coming in from JSON here.

48
00:02:28.700 --> 00:02:31.050
So we're saying this is
explicitly nullable.

49
00:02:31.050 --> 00:02:34.811
Whereas Int, we say null is not okay,
if we'd had an Int in this field,

50
00:02:34.811 --> 00:02:36.271
this would fail to decode.

51
00:02:36.271 --> 00:02:41.081
Finally we have to deal with the fact that
email is something that we require on

52
00:02:41.081 --> 00:02:41.975
the Elm side.

53
00:02:41.975 --> 00:02:44.450
But which is not actually
present on the JavaScript side.

54
00:02:44.450 --> 00:02:48.049
One way we could do this, which is
something we'll see in the exercise,

55
00:02:48.049 --> 00:02:50.645
is there's something we
can say called hard coded.

56
00:02:50.645 --> 00:02:53.911
Which says, you know what, just ignore
the JSON, always put this value in, but

57
00:02:53.911 --> 00:02:55.946
we want to do something
slightly different here.

58
00:02:55.946 --> 00:02:59.257
What we want to say is,
here's what to do if email is present.

59
00:02:59.257 --> 00:03:01.635
And then also here's what to
do if email is not present,

60
00:03:01.635 --> 00:03:03.214
we're going to provide a fallback.

61
00:03:03.214 --> 00:03:06.021
And here, instead of saying required,
we say optional.

62
00:03:06.021 --> 00:03:09.082
So we're saying,
we have an optional field,

63
00:03:09.082 --> 00:03:13.872
called email, and if that field is
present, we expect it to be a string.

64
00:03:13.872 --> 00:03:17.428
And if that string is present, then
we're going to use that as our value and

65
00:03:17.428 --> 00:03:19.862
it's going to go into this
email thing right here.

66
00:03:19.862 --> 00:03:22.752
However, if that value is not present,

67
00:03:22.752 --> 00:03:27.433
we're going to fall back on
this default value, me@foo.com.

68
00:03:27.433 --> 00:03:33.654
So because the email field is not even
present in this JSON object, that's okay.

69
00:03:33.654 --> 00:03:35.770
It just means that we're going
to use this fall back and

70
00:03:35.770 --> 00:03:37.990
that value is going to be what's
going to get set to User.

71
00:03:37.990 --> 00:03:42.897
So between all these things we have
user_id being set the same way as before.

72
00:03:42.897 --> 00:03:44.347
We have this nullable string,

73
00:03:44.347 --> 00:03:47.541
which handles the possibility that
name is either null or not null.

74
00:03:47.541 --> 00:03:50.331
And that corresponds to
this name field up here.

75
00:03:50.331 --> 00:03:53.753
And finally we have the optional email
string, which is going to look for

76
00:03:53.753 --> 00:03:54.828
a field called email.

77
00:03:54.828 --> 00:03:57.611
But if it's not there,
it's going to fall back on this value.

78
00:03:57.611 --> 00:04:01.732
So in that way we're able to handle
even these edge cases of JSON of null,

79
00:04:01.732 --> 00:04:03.229
of fields being missing.

80
00:04:03.229 --> 00:04:07.125
And still consistently decode
into either this user or

81
00:04:07.125 --> 00:04:10.351
if anything went wrong
in any of these steps.

82
00:04:10.351 --> 00:04:13.827
Fail the decoding and then we will handle
that the same way that we did before.

