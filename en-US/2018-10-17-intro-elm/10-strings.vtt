WEBVTT

1
00:00:00.000 --> 00:00:02.009
&gt;&gt; Richard Feldman: Manipulating values.

2
00:00:02.009 --> 00:00:05.467
All right, so here we're gonna
talk about another four concepts.

3
00:00:05.467 --> 00:00:09.489
We're gonna talk about strings,
let-expressions, lists, and

4
00:00:09.489 --> 00:00:10.908
partial application.

5
00:00:10.908 --> 00:00:12.572
Let's start with strings.

6
00:00:12.572 --> 00:00:16.318
So strings in Elm look pretty similar
to JavaScript in terms of having quotes

7
00:00:16.318 --> 00:00:17.026
around them.

8
00:00:17.026 --> 00:00:21.734
One difference is that to combine strings
you use plus, plus instead of plus.

9
00:00:21.734 --> 00:00:25.120
Elm's big on being explicit and
using different things for

10
00:00:25.120 --> 00:00:30.077
different concepts, so you use plus, plus
for strings and plus is only for addition.

11
00:00:30.077 --> 00:00:33.877
So in JavaScript plus has two meanings,
it can be used either to add numbers or

12
00:00:33.877 --> 00:00:35.579
it can be used to combine strings.

13
00:00:35.579 --> 00:00:37.020
Elm, those are separate.

14
00:00:37.020 --> 00:00:38.155
Plus is only for addition.

15
00:00:38.155 --> 00:00:42.661
Plus, plus is for combining strings.

16
00:00:42.661 --> 00:00:47.462
We can use this plus, plus back in our
pluralized function from earlier when we

17
00:00:47.462 --> 00:00:50.533
had the quantity and
the singular and the plural.

18
00:00:50.533 --> 00:00:52.117
We can use this to make it so

19
00:00:52.117 --> 00:00:56.878
that it's going to display the number in
addition to the singular or a plural.

20
00:00:56.878 --> 00:01:00.261
So instead of just saying leaf or leaves,

21
00:01:00.261 --> 00:01:04.814
this version is going to return
five leaves or one leaf.

22
00:01:04.814 --> 00:01:09.766
Now this isn't quite right yet because
as I said previously plus, plus is for

23
00:01:09.766 --> 00:01:11.378
combining two strings.

24
00:01:11.378 --> 00:01:15.805
But quantity here is actually
not a string, it's a number.

25
00:01:15.805 --> 00:01:20.127
So this part will work over here
where we have a space plus,

26
00:01:20.127 --> 00:01:23.220
plus a string cuz those are both strings.

27
00:01:23.220 --> 00:01:25.417
But this one will not.

28
00:01:25.417 --> 00:01:29.316
So, what we do to convert it to
a from an Int to a string is we use

29
00:01:29.316 --> 00:01:33.761
String.fromInt quantity, and
everything else remains the same.

30
00:01:33.761 --> 00:01:37.702
So String.fromInt says give me an integer
and I will turn it into a string for you.

31
00:01:37.702 --> 00:01:42.480
It's similar to ToString in JavaScript,
except that Elm has some special purpose

32
00:01:42.480 --> 00:01:46.520
functions for converting from
different types of values to strings.

33
00:01:46.520 --> 00:01:47.943
So there's a String.fromInt.

34
00:01:47.943 --> 00:01:49.179
There's a String.from float.

35
00:01:49.179 --> 00:01:52.837
There's other ways to convert different
values to different types, but

36
00:01:52.837 --> 00:01:54.969
in our case quantity should be an integer.

37
00:01:54.969 --> 00:01:58.058
So we're gonna use String.fromInt.

38
00:01:58.058 --> 00:02:01.626
Also worth noting that you don't need
any parenthesis to disambiguate here.

39
00:02:01.626 --> 00:02:06.680
Because the plus, plus actually implicitly
groups things on either side of it.

40
00:02:06.680 --> 00:02:09.900
So everything to the left of this plus,
plus is gonna be one expression.

41
00:02:09.900 --> 00:02:12.313
Everything to the right of it
is gonna be another expression.

42
00:02:12.313 --> 00:02:14.564
The same is true of this other plus, plus.

43
00:02:14.564 --> 00:02:17.149
Everything to the left of it is
gonna be one expression, and

44
00:02:17.149 --> 00:02:19.127
everything to the right
is gonna be another.

45
00:02:19.127 --> 00:02:21.952
So anytime you see in-fix
operators such as plus,

46
00:02:21.952 --> 00:02:26.299
plus, or the normal arithmetic ones
like plus, minus, divided by and such.

47
00:02:26.299 --> 00:02:30.386
You can imagine that each of them
implicitly creates parenthesis around

48
00:02:30.386 --> 00:02:33.404
everything to left and
then everything to the right.

49
00:02:33.404 --> 00:02:39.192
So this whole thing is one expression
that's going to evaluate to a string.

