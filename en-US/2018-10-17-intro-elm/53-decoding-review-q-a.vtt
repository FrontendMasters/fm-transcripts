WEBVTT

1
00:00:00.000 --> 00:00:00.634
&gt;&gt; Richard Feldman: Yeah.

2
00:00:00.634 --> 00:00:04.992
&gt;&gt; Speaker 2: Kind of a general
question as far as succeed and user.

3
00:00:04.992 --> 00:00:10.270
So because user is a record,
if I guess just in general in Elm or

4
00:00:10.270 --> 00:00:13.530
Apple if I say user is that a function?

5
00:00:13.530 --> 00:00:15.941
&gt;&gt; Richard Feldman: Yes that would
be a function from Int to String to

6
00:00:15.941 --> 00:00:16.796
String to user.

7
00:00:16.796 --> 00:00:20.896
&gt;&gt; Speaker 2: So the ordering of how
you defined each item in the record is

8
00:00:20.896 --> 00:00:25.591
important and that's what's used for
each item in the pipeline.

9
00:00:25.591 --> 00:00:27.857
&gt;&gt; Richard Feldman: Exactly right yeah.

10
00:00:27.857 --> 00:00:32.753
So the order in which you defined these
corresponds to the argument order

11
00:00:32.753 --> 00:00:34.128
of in the function.

12
00:00:34.128 --> 00:00:34.657
Yeah?
&gt;&gt; Speaker 3: So

13
00:00:34.657 --> 00:00:39.332
how do you stumble upon like this
is gonna be a nullable string.

14
00:00:39.332 --> 00:00:41.116
You just have to know
your data really well?

15
00:00:41.116 --> 00:00:41.828
&gt;&gt; Richard Feldman: Yeah, for sure.

16
00:00:41.828 --> 00:00:45.449
So the question was,
how do you know that something is or

17
00:00:45.449 --> 00:00:47.309
is not going to be nullable?

18
00:00:47.309 --> 00:00:49.148
There's two possible approaches there.

19
00:00:49.148 --> 00:00:50.533
One is to know your data really well.

20
00:00:50.533 --> 00:00:53.992
So to have a schema from the backend and
be like,

21
00:00:53.992 --> 00:00:58.673
okay, I know this one can be null or
it can not be null, for sure.

22
00:00:58.673 --> 00:01:02.331
Another possibility is to be
pessimistic and to say you know what?

23
00:01:02.331 --> 00:01:06.327
I don't really know if the person
who implemented this is gonna be

24
00:01:06.327 --> 00:01:09.900
good about null or not, so
I'm just going to handle that.

25
00:01:09.900 --> 00:01:11.697
I'm gonna make all of these nullable.

26
00:01:11.697 --> 00:01:15.187
And then I'm going to decode them into,
usually if you're doing something like

27
00:01:15.187 --> 00:01:17.825
that, you're gonna make
an intermediate data structure.

28
00:01:17.825 --> 00:01:21.166
So I might call it like JSON user,
or something like that,

29
00:01:21.166 --> 00:01:22.877
where everything's maybe.

30
00:01:22.877 --> 00:01:24.411
And then, as a followup step,

31
00:01:24.411 --> 00:01:28.197
after decoding into that intermediate
representation, I'd say, okay.

32
00:01:28.197 --> 00:01:30.941
I'm gonna go through and resolve
all these maybes and be like, okay,

33
00:01:30.941 --> 00:01:33.280
if this one's none,
how do I wanna handle that or nothing?

34
00:01:33.280 --> 00:01:34.680
How do I wanna handle that if this one is?

35
00:01:34.680 --> 00:01:36.970
How do I wanna handle that?

36
00:01:36.970 --> 00:01:39.216
Some cases you may not be
able to handle it and so

37
00:01:39.216 --> 00:01:41.412
maybe you have to fail
decoding in that case.

38
00:01:41.412 --> 00:01:46.413
But, the point is it's also
possible to just be pessimistic and

39
00:01:46.413 --> 00:01:50.396
assume that it always
potentially could be null and

40
00:01:50.396 --> 00:01:54.582
figure out some reasonable default or
error to show.

41
00:01:54.582 --> 00:01:56.434
Great questions.

42
00:01:56.434 --> 00:01:56.952
Fun fact,

43
00:01:56.952 --> 00:02:00.587
we actually took the former approach
where we were very strict about this.

44
00:02:00.587 --> 00:02:03.490
And if decoding would ever fail when
we got data back from the server,

45
00:02:03.490 --> 00:02:04.655
we would log it as an error.

46
00:02:04.655 --> 00:02:08.839
And we actually ended up discovering bugs
in our Ruby code, where we thought that

47
00:02:08.839 --> 00:02:12.543
we were not possibly sending null but
accidentally we were sometimes.

48
00:02:12.543 --> 00:02:15.956
And because the decoder would fail then we
would get an error message about it oops,

49
00:02:15.956 --> 00:02:20.156
go fix that
&gt;&gt; Richard Feldman: It's the only time

50
00:02:20.156 --> 00:02:22.670
I've heard of frontend
discovering bugs in the backend.

51
00:02:22.670 --> 00:02:25.354
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Richard Feldman: Okay, so

52
00:02:25.354 --> 00:02:28.789
to recap we talked about
decoding as a general concept.

53
00:02:28.789 --> 00:02:31.745
So decodeString int 5.

54
00:02:31.745 --> 00:02:37.116
That will result in either giving us back
Ok, in which case we have the number five,

55
00:02:37.116 --> 00:02:42.440
or error in which case it'll explain why
the string that we gave didn't work out.

56
00:02:42.440 --> 00:02:45.683
Those are examples of
the two variants in result.

57
00:02:45.683 --> 00:02:48.470
So result has two type variables.

58
00:02:48.470 --> 00:02:52.027
One is the error type and
the other is the Ok type and

59
00:02:52.027 --> 00:02:55.340
two variants each of
which uses each of those.

60
00:02:55.340 --> 00:02:57.513
We talked about pipeline decoding,

61
00:02:57.513 --> 00:03:01.717
which is using the pipeline that we
learned from the previous section,

62
00:03:01.717 --> 00:03:06.498
in the context of specifying sort of the
schema for how we expect our JSON to look.

63
00:03:06.498 --> 00:03:09.329
And how we're going to
translate that schema,

64
00:03:09.329 --> 00:03:12.373
translate that JSON into
our particular Elm type,

65
00:03:12.373 --> 00:03:16.638
assuming everything actually lines up,
and it works out in practice.

66
00:03:16.638 --> 00:03:20.123
And finally, we talked about optional and
nullable, which are ways to deal

67
00:03:20.123 --> 00:03:23.621
with the possibility that we either
got null when we weren't expecting it.

68
00:03:23.621 --> 00:03:26.550
Or we got a missing field
that we thought was there but

69
00:03:26.550 --> 00:03:28.422
which we want to be resilient to.

70
00:03:28.422 --> 00:03:31.377
We want for it to be okay for
that field to be missing.

