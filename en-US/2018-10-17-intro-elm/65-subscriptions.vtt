WEBVTT

1
00:00:00.000 --> 00:00:03.138
&gt;&gt; Richard Feldman: In an Elm course, what
could possibly be the final frontier, but

2
00:00:03.138 --> 00:00:04.347
talking to JavaScript.

3
00:00:04.347 --> 00:00:05.967
So we're gonna talk about
a few concepts here.

4
00:00:05.967 --> 00:00:10.260
Subscriptions, guarantees,
sending data to JavaScript and

5
00:00:10.260 --> 00:00:12.609
receiving data from JavaScript.

6
00:00:12.609 --> 00:00:15.853
So let's start by talking
about subscriptions and

7
00:00:15.853 --> 00:00:19.782
in particular in the context of
responding to custom events.

8
00:00:19.782 --> 00:00:23.891
So here's something that it
is part of Elm's HTML API.

9
00:00:23.891 --> 00:00:25.533
It's this function called on.

10
00:00:25.533 --> 00:00:31.033
And this is sort of the general
most flexible version of on click,

11
00:00:31.033 --> 00:00:33.842
on input, on whatever you want.

12
00:00:33.842 --> 00:00:35.122
It takes a string.

13
00:00:35.122 --> 00:00:37.469
So for example, on "mousemove".

14
00:00:37.469 --> 00:00:42.705
Then it takes the Decoder, and the purpose
of this Decoder is not to decode JSON,

15
00:00:42.705 --> 00:00:46.255
but rather to decode an event
object from JavaScript.

16
00:00:46.255 --> 00:00:50.403
So as it turns out, because JSON
is the JavaScript object notation.

17
00:00:50.403 --> 00:00:53.579
When you want to deal with
a JavaScript object and

18
00:00:53.579 --> 00:00:57.065
describe how to traverse it and
pull values out of it,

19
00:00:57.065 --> 00:01:01.810
you can use the same exact JSON decoder
API that you used for actual JSON.

20
00:01:01.810 --> 00:01:06.050
So this is gonna say,
given a JavaScript event object from this

21
00:01:06.050 --> 00:01:10.850
particular event type, how can I
translate the fields in that object,

22
00:01:10.850 --> 00:01:14.623
the data inside that object
into some useful Elm value?

23
00:01:14.623 --> 00:01:17.113
So you give it on, you give it a string,

24
00:01:17.113 --> 00:01:21.116
a Decoder of whatever this message
you want to be is going to be.

25
00:01:21.116 --> 00:01:22.447
And then finally,

26
00:01:22.447 --> 00:01:28.197
it will give you back an HTML attribute
that responds to that particular message.

27
00:01:28.197 --> 00:01:30.385
So as an example, I might say,
I'm gonna make a div.

28
00:01:30.385 --> 00:01:34.192
I'm gonna say, on "mousemove" and then I'm
gonna give a custom mousePointDecoder,

29
00:01:34.192 --> 00:01:36.626
which is going to look into
the event object and get the x,

30
00:01:36.626 --> 00:01:37.867
y coordinates of the mouse.

31
00:01:37.867 --> 00:01:39.673
And maybe I'll display them on the screen.

32
00:01:39.673 --> 00:01:41.855
Maybe I'll use them for
some animation, who knows?

33
00:01:41.855 --> 00:01:44.213
Could use it for any purpose I want, but

34
00:01:44.213 --> 00:01:46.868
this thing is a very
flexible way to do that.

35
00:01:46.868 --> 00:01:49.137
This is a nice API for that.

36
00:01:49.137 --> 00:01:54.577
Okay, so we could use a similar kind
of concept to respond to Window Events

37
00:01:54.577 --> 00:01:59.845
that don't actually correspond to
any particular element in the DOM,

38
00:01:59.845 --> 00:02:03.291
but rather just to
the entire browser window.

39
00:02:03.291 --> 00:02:06.316
And to do that, we can't quite use this.

40
00:02:06.316 --> 00:02:11.149
Because this only works for
values that were putting into the DOM.

41
00:02:11.149 --> 00:02:14.634
This attribute is plenty useful if we've
got a div that we wanna stick it on, but

42
00:02:14.634 --> 00:02:18.187
we can't just take an attribute and just
put it on the window that doesn't work.

43
00:02:18.187 --> 00:02:20.675
The Window doesn't have attributes.

44
00:02:20.675 --> 00:02:22.770
So here's what we do instead.

45
00:02:22.770 --> 00:02:25.994
There's a function called
Browser.onMouseMove.

46
00:02:25.994 --> 00:02:28.181
And it has the same idea
of give me a Decoder and

47
00:02:28.181 --> 00:02:31.981
that will describe how to deal with this
event object that it's gonna get every

48
00:02:31.981 --> 00:02:34.592
time the user moves the mouse
anywhere in the window.

49
00:02:34.592 --> 00:02:38.344
But it gives back this new value that we
haven't seen before called a sub which is

50
00:02:38.344 --> 00:02:39.632
short for a subscription.

51
00:02:42.185 --> 00:02:45.359
&gt;&gt; Richard Feldman: So here is how
subscriptions fit into our view of the Elm

52
00:02:45.359 --> 00:02:46.326
architecture.

53
00:02:46.326 --> 00:02:48.638
So we started out with model,
view and update.

54
00:02:48.638 --> 00:02:50.283
We introduced commands to that and

55
00:02:50.283 --> 00:02:52.672
the commands are something
that update returns.

56
00:02:52.672 --> 00:02:55.055
Subscriptions are the final
piece of the puzzle.

57
00:02:55.055 --> 00:03:01.638
This is the last piece of the,
sort of Elm architecture that exists.

58
00:03:01.638 --> 00:03:06.576
And much like commands, subscriptions
is essentially one more way for

59
00:03:06.576 --> 00:03:09.958
messages to get sent from
the runtime to update.

60
00:03:09.958 --> 00:03:14.786
So we can now notice this sort of pattern
where essentially update is the brains of

61
00:03:14.786 --> 00:03:19.331
the Elm application and it receives
messages from a few different sources.

62
00:03:19.331 --> 00:03:22.393
One is from view, so
in response to user events.

63
00:03:22.393 --> 00:03:25.819
Another is from commands
that update itself sent off,

64
00:03:25.819 --> 00:03:28.729
whether they be randomness or
HTTP requests.

65
00:03:28.729 --> 00:03:31.413
And then finally, we have subscriptions.

66
00:03:31.413 --> 00:03:32.575
Now fundamentally,

67
00:03:32.575 --> 00:03:36.196
subscriptions are essentially
event listeners that are global.

68
00:03:36.196 --> 00:03:38.953
So whereas view will
respond to user inputs for

69
00:03:38.953 --> 00:03:43.830
things that happen in response to actions
on the DOM, subscriptions can be things

70
00:03:43.830 --> 00:03:48.495
like user inputs in the global context
which is to say like a global mouse move,

71
00:03:48.495 --> 00:03:50.573
but they can also be other things.

72
00:03:50.573 --> 00:03:55.343
They can be things like I want you
to just send a message to update

73
00:03:55.343 --> 00:03:58.133
every three seconds, for example.

74
00:03:58.133 --> 00:04:00.683
You can say it is sort
of based on a timer.

75
00:04:00.683 --> 00:04:03.480
You can also use this to
subscribe to WebSockets and say,

76
00:04:03.480 --> 00:04:07.207
every time the server sends me something,
regardless of what's going on,

77
00:04:07.207 --> 00:04:09.264
I want you to send this message to update.

78
00:04:09.264 --> 00:04:13.603
And again, fundamentally, this is going
to be sending message to update and

79
00:04:13.603 --> 00:04:18.093
that's the way that things are going to
happen in this world of subscriptions.

80
00:04:18.093 --> 00:04:21.295
There's nothing else
that they do other than

81
00:04:21.295 --> 00:04:25.856
specify things that result in
messages getting sent to update.

82
00:04:25.856 --> 00:04:30.406
The way that we specify with subscriptions
we care about is there's a function that

83
00:04:30.406 --> 00:04:32.551
we pass to our program that's called,

84
00:04:32.551 --> 00:04:36.133
usually subscriptions in the same
way that have update and view.

85
00:04:36.133 --> 00:04:38.863
But again,
it could be named whatever we want it,

86
00:04:38.863 --> 00:04:41.985
it just needs to sort of fit
the bill in terms of the types.

87
00:04:41.985 --> 00:04:45.769
And the purpose of that function
is it takes a model and

88
00:04:45.769 --> 00:04:50.829
then returns any subscriptions that
we care about based on that model.

89
00:04:50.829 --> 00:04:52.689
So you can sort of turn
subscriptions on and off.

90
00:04:52.689 --> 00:04:55.542
You could say, for example,
right now, I care about mouse moves.

91
00:04:55.542 --> 00:04:58.895
And every time the user moves the mouse,
I wanna send a message to update.

92
00:04:58.895 --> 00:05:00.776
You might also later say,
actually know what?

93
00:05:00.776 --> 00:05:03.940
Based on the current state of the model,
we don't care about that one anymore.

94
00:05:03.940 --> 00:05:06.713
We're gonna say, sub.none just like
command.none and you know what?

95
00:05:06.713 --> 00:05:09.357
Right now,
we're just not doing any of those.

96
00:05:09.357 --> 00:05:12.947
So that prevents us from sort of flooding
update with all of these spurious messages

97
00:05:12.947 --> 00:05:14.598
for things that we don't care about.

98
00:05:14.598 --> 00:05:18.599
It's a way to say, yeah, every time
the model changes, not only is the runtime

99
00:05:18.599 --> 00:05:22.121
gonna call a view to say give me a new
description of how I want the page to

100
00:05:22.121 --> 00:05:25.922
look, but also it's gonna take that
new model and pass it subscriptions.

101
00:05:25.922 --> 00:05:29.724
And say, hey, is there anything
you want to subscribe to or

102
00:05:29.724 --> 00:05:34.448
not subscribe to anymore based on how
the application state has changed?

103
00:05:34.448 --> 00:05:38.617
In practice, it's pretty common to have
subscriptions return the same thing,

104
00:05:38.617 --> 00:05:40.039
no matter what every time.

105
00:05:40.039 --> 00:05:44.486
You'll just say, we always care about
this, or we never care about this.

106
00:05:44.486 --> 00:05:49.478
But that flexibility is there if you
wanna have things that are toggled on and

107
00:05:49.478 --> 00:05:51.350
off based on circumstance.

