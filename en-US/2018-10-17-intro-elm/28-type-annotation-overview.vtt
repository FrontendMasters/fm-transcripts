WEBVTT

1
00:00:00.000 --> 00:00:02.361
&gt;&gt; Richard Feldman: So, we're gonna
talk about four different types of type

2
00:00:02.361 --> 00:00:04.190
annotations, or sort of four categories.

3
00:00:04.190 --> 00:00:06.448
One is annotating primitives.

4
00:00:06.448 --> 00:00:12.009
Talk about annotating type parameters,
type aliases, and typing functions.

5
00:00:12.009 --> 00:00:16.107
All right, so
let's start with a plain old declaration,

6
00:00:16.107 --> 00:00:18.710
of the type we've seen many before.

7
00:00:18.710 --> 00:00:22.472
So, username = the string rtfeldman.

8
00:00:22.472 --> 00:00:27.597
So something I could do here is I could,
if I wanted to, I could add a sort of

9
00:00:27.597 --> 00:00:33.009
comment here that says query or username,
this thing right here is a string.

10
00:00:33.009 --> 00:00:35.826
Another way I could do this is
I could write it like this.

11
00:00:35.826 --> 00:00:40.893
This is a type annotation that
says this username is a string.

12
00:00:40.893 --> 00:00:46.729
The bottom one is more of reliable in the
sense that the compiler will enforce it.

13
00:00:46.729 --> 00:00:51.402
It will actually check to see if this
username value is in fact a string.

14
00:00:51.402 --> 00:00:54.421
One of the things about comments
is they can get out of date.

15
00:00:54.421 --> 00:00:57.984
For example, maybe this thing
used to be called query and

16
00:00:57.984 --> 00:01:02.897
I renamed it to username but I forgot to
update the comma, the comment rather.

17
00:01:02.897 --> 00:01:04.552
I didn't actually intend for
this to be this way.

18
00:01:04.552 --> 00:01:07.033
I actually just forgot to
update it on the slide,

19
00:01:07.033 --> 00:01:10.011
which works out in a funny way
of demonstrating the point.

20
00:01:10.011 --> 00:01:12.610
If you have documentation
that can get out of date,

21
00:01:12.610 --> 00:01:14.792
chances are it's going to get out of date.

22
00:01:14.792 --> 00:01:16.729
We're human, we make mistakes.

23
00:01:16.729 --> 00:01:20.671
One of the nice ways that Elm's compiler
can help us out is it can actually fix

24
00:01:20.671 --> 00:01:21.972
things like this for us.

25
00:01:21.972 --> 00:01:23.009
It can catch them and

26
00:01:23.009 --> 00:01:26.866
give us an error message, if we try to
build our code and this is out of date.

27
00:01:26.866 --> 00:01:28.867
So as we've seen, we don't need these.

28
00:01:28.867 --> 00:01:33.961
I did Java programming for many years,
sort of earlier in my career.

29
00:01:33.961 --> 00:01:36.782
And I would have to write out
type annotations all the time,

30
00:01:36.782 --> 00:01:38.427
whereas Elm does type inference.

31
00:01:38.427 --> 00:01:40.974
It figures out what all they types are,
and it will tell us about

32
00:01:40.974 --> 00:01:44.261
errors regardless of whether or not we
actually put these annotations in there.

33
00:01:44.261 --> 00:01:47.612
They're optional, but
they can be a nice form of documentation.

34
00:01:47.612 --> 00:01:51.053
And it's usually considered best
practice to use them at least for

35
00:01:51.053 --> 00:01:52.655
your top level declarations.

36
00:01:52.655 --> 00:01:54.968
If you're doing them inside a let,
no real need.

37
00:01:54.968 --> 00:01:58.052
But at least at the top level,
functions and things like that.

38
00:01:58.052 --> 00:02:01.024
Generally speaking, it's a good idea
to annotate them just as a form of

39
00:02:01.024 --> 00:02:03.364
documentation for
whoever comes across the code next.

