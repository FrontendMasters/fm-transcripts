WEBVTT

1
00:00:00.000 --> 00:00:01.587
&gt;&gt; Richard Feldman: Remember
from our previous section,

2
00:00:01.587 --> 00:00:03.777
we talked about some of
these function guarantees.

3
00:00:03.777 --> 00:00:07.148
All right, so same arguments,
same return value, no side effects.

4
00:00:07.148 --> 00:00:11.759
In other words,
all Elm functions are pure.

5
00:00:11.759 --> 00:00:14.118
This is not quite true in JavaScript.

6
00:00:14.118 --> 00:00:16.816
It's not quite the case that all
JavaScript functions are pure.

7
00:00:16.816 --> 00:00:17.329
In fact,

8
00:00:17.329 --> 00:00:21.574
there's really no guarantees around
what are pure functions in JavaScript.

9
00:00:21.574 --> 00:00:25.666
Then which is why in a lot of JavaScript
libraries, you have things that say like

10
00:00:25.666 --> 00:00:28.612
in react like hey,
your render function should be pure.

11
00:00:28.612 --> 00:00:31.234
Please make sure you don't side
effects in your render functions or

12
00:00:31.234 --> 00:00:32.160
your Redux producers.

13
00:00:32.160 --> 00:00:34.611
Please make sure they are pure,
it's really important that it's purr.

14
00:00:34.611 --> 00:00:37.239
Because otherwise,
bad things are gonna happen.

15
00:00:37.239 --> 00:00:38.921
In Elm,
you don't have to worry about that,

16
00:00:38.921 --> 00:00:40.925
because all Elm functions
are guaranteed to be pure.

17
00:00:40.925 --> 00:00:44.789
However, this is a section about talking
to JavaScript which means that we have to

18
00:00:44.789 --> 00:00:47.365
deal with the fact that while
Elm functions are pure and

19
00:00:47.365 --> 00:00:50.165
we want to we able to rely on that and
put it out of our minds and

20
00:00:50.165 --> 00:00:54.029
not have to think about these things, not
have to have these worries, we also want

21
00:00:54.029 --> 00:00:57.581
to interoperate with a language where
those guarantees are not in effect.

22
00:00:57.581 --> 00:00:59.453
So how can we do that?

23
00:00:59.453 --> 00:01:03.509
All right, how can we deal with a world
where we have stuff like math.random or

24
00:01:03.509 --> 00:01:05.735
setting stuff in local storage directly?

25
00:01:05.735 --> 00:01:09.662
In other words, how can we access
the enormous JavaScript ecosystem?

26
00:01:09.662 --> 00:01:12.612
The largest in the world
with all these millions,

27
00:01:12.612 --> 00:01:17.598
it's not millions, but it's a large,
large number of packages while maintaining

28
00:01:17.598 --> 00:01:22.536
all the guarantees that let us code in Elm
without worrying about all those things.

29
00:01:22.536 --> 00:01:26.475
So the answer is that the way that Elm
talks to JavaScript is essentially using

30
00:01:26.475 --> 00:01:29.028
the metaphor of
client/server communication.

31
00:01:29.028 --> 00:01:30.379
It's message passing.

32
00:01:30.379 --> 00:01:33.835
It's sending immutable data
from Elm to JavaScript and

33
00:01:33.835 --> 00:01:37.225
the receiving immutable data
from JavaScript to Elm.

34
00:01:37.225 --> 00:01:40.904
And fortunately,
as we just saw in the previous section,

35
00:01:40.904 --> 00:01:44.595
we can do that in Elm without
losing any of our guarantees.

36
00:01:44.595 --> 00:01:48.896
We just did in the last exercise, HTTP
which is sending data from Elm to a server

37
00:01:48.896 --> 00:01:51.454
written in a completely
different language.

38
00:01:51.454 --> 00:01:52.958
We have no idea what language it is.

39
00:01:52.958 --> 00:01:53.725
It could be JavaScript.

40
00:01:53.725 --> 00:01:54.790
It could be PHP.

41
00:01:54.790 --> 00:01:59.683
It could be Python, Pearl,
Ruby Assembly, anything.

42
00:01:59.683 --> 00:02:02.677
We have no idea what the guarantees,
but we don't care.

43
00:02:02.677 --> 00:02:06.464
Because all we're doing is sending
immunity data into it like an HTTP post or

44
00:02:06.464 --> 00:02:09.423
a get and there were receiving
immutable data back from it,

45
00:02:09.423 --> 00:02:11.684
which we then decoded
into our application.

46
00:02:11.684 --> 00:02:15.804
And at no point, do we ever have to worry
about sacrificing any of these guarantees,

47
00:02:15.804 --> 00:02:17.959
any function period, anything like that?

48
00:02:17.959 --> 00:02:20.939
Now we're not literally doing
client/server communication to talk

49
00:02:20.939 --> 00:02:21.646
to JavaScript,

50
00:02:21.646 --> 00:02:24.877
because that would require going over
the network to go out to the network and

51
00:02:24.877 --> 00:02:27.674
then come back to the browser which
will be way too much overhead.

52
00:02:27.674 --> 00:02:29.310
But metaphorically,
that's what we're doing here.

53
00:02:29.310 --> 00:02:32.006
The API is designed to have
the same characteristics as

54
00:02:32.006 --> 00:02:33.708
client/server communication,

55
00:02:33.708 --> 00:02:37.404
so that we can freely communicate to
JavaScript without sacrificing any of

56
00:02:37.404 --> 00:02:41.409
these guarantees that we've had throughout
the course of the entire workshop.

57
00:02:41.409 --> 00:02:44.450
So basically, Elm sends data to JS and

58
00:02:44.450 --> 00:02:49.400
then JS can send data to Elm and
that's how they communicate.

59
00:02:49.400 --> 00:02:52.024
There's no direct function
calls at any point in this.

60
00:02:52.024 --> 00:02:55.180
So you cannot in the middle of an Elm
function say, hey, call math.random.

61
00:02:55.180 --> 00:02:56.281
I can't do it.

62
00:02:56.281 --> 00:02:59.106
Instead, we're gonna use commands and

63
00:02:59.106 --> 00:03:03.519
subscriptions exclusively to
communicate with JavaScript.

64
00:03:03.519 --> 00:03:06.037
So there sort of like
two ways that this goes.

65
00:03:06.037 --> 00:03:08.653
So when you send a command
from the Elm side,

66
00:03:08.653 --> 00:03:13.061
that's going to result in a callback
being fired on the JavaScript side.

67
00:03:13.061 --> 00:03:16.229
So here's our command that we're sending.

68
00:03:16.229 --> 00:03:19.903
It's not quite going to be a command with
a capital M like what we had before.

69
00:03:19.903 --> 00:03:22.707
It's going to actually result in
a command with a lower case M.

70
00:03:22.707 --> 00:03:25.050
So we're gonna go on a brief tangent and

71
00:03:25.050 --> 00:03:29.452
explain what that means when you have
a command with a type variable that is

72
00:03:29.452 --> 00:03:34.138
unbound which is to say a command where
the type variable has a lower case m, but

73
00:03:34.138 --> 00:03:37.350
there's no message anywhere
else in this function.

74
00:03:37.350 --> 00:03:40.202
Up to this point,
every time we've seen a type variable,

75
00:03:40.202 --> 00:03:41.610
there have been two of them.

76
00:03:41.610 --> 00:03:45.287
All right, we had list out reverse
had list elem to list elem.

77
00:03:45.287 --> 00:03:49.427
This is just command message, lower case
m, but there is no other message anywhere.

78
00:03:49.427 --> 00:03:51.458
It's like not corresponding to anything.

79
00:03:51.458 --> 00:03:52.916
What does that actually mean?

80
00:03:52.916 --> 00:03:58.462
Okay, so at this point, all of our
type variables have come in pairs,

81
00:03:58.462 --> 00:04:04.018
but list.length is one that we sort
of intuitively know how it works.

82
00:04:04.018 --> 00:04:05.954
But it doesn't come in a pair, right?

83
00:04:05.954 --> 00:04:09.615
List.length says,
you can give me a list of anything and

84
00:04:09.615 --> 00:04:12.676
I can tell you what the result is,
it's an Int.

85
00:04:12.676 --> 00:04:13.907
No matter what type of list you give me.

86
00:04:13.907 --> 00:04:17.750
You can give me a list of strings,
a list of integers, a list of floats,

87
00:04:17.750 --> 00:04:20.328
anything and
I'll tell you what the length is.

88
00:04:20.328 --> 00:04:23.166
So kind of intuitively we can figure out,
well, all right, that makes sense.

89
00:04:23.166 --> 00:04:26.250
I guess it's saying, it's a type variable,
because what it means is.

90
00:04:26.250 --> 00:04:27.097
This is flexible.

91
00:04:27.097 --> 00:04:31.882
We can give it any list we want and
it will be able to give us back an ent.

