WEBVTT

1
00:00:00.000 --> 00:00:00.733
&gt;&gt; Richard Feldman: All right so

2
00:00:00.733 --> 00:00:05.212
the first one is we're going to be
sending stuff from Elm to JavaScript.

3
00:00:05.212 --> 00:00:09.535
So to do this we've already added our port
module up at the top here which means that

4
00:00:09.535 --> 00:00:11.993
we are now allowed to use
ports in this module.

5
00:00:11.993 --> 00:00:16.684
So we're gonna say port and again we have
to make sure that our port names match

6
00:00:16.684 --> 00:00:19.732
up with what we're doing
on the JavaScript side.

7
00:00:19.732 --> 00:00:24.363
So because on the JavaScript side we are
subscribing to a stored session that means

8
00:00:24.363 --> 00:00:27.865
our port on the own side also
needs to be called Store session.

9
00:00:27.865 --> 00:00:32.795
So a store session is going to have
a type that pretty much matches this

10
00:00:32.795 --> 00:00:35.006
one right here conveniently.

11
00:00:35.006 --> 00:00:39.994
So it's gonna accept a maybe string and
then it's gonna return a command message.

12
00:00:39.994 --> 00:00:43.395
Now ordinarily this would be where we
implement the body of this if it were

13
00:00:43.395 --> 00:00:44.361
a normal function.

14
00:00:44.361 --> 00:00:48.617
But this is a port which means that we
don't actually need to do anything else.

15
00:00:48.617 --> 00:00:51.853
Elm's just generate the implementation for
us.

16
00:00:51.853 --> 00:00:55.581
So here, inside this function, which
is being called elsewhere in the code,

17
00:00:55.581 --> 00:00:59.041
all we're gonna do is we're just going
to handoff directly to the port.

18
00:00:59.041 --> 00:01:03.587
So we're gonna say storeSession
maybeAuthenticationToken, and that's it.

19
00:01:03.587 --> 00:01:09.589
So that should compile, oops,
we wanna be pack in part9.

20
00:01:09.589 --> 00:01:11.303
Okay, that compiled.

21
00:01:11.303 --> 00:01:14.763
And so we will see if it actually works.

22
00:01:14.763 --> 00:01:20.121
I guess we should demonstrate
the lack of it working.

23
00:01:20.121 --> 00:01:23.531
Actually now with half of it implemented
it's going to partially work so maybe not.

24
00:01:23.531 --> 00:01:28.041
We'll just come back and
see the entire thing work momentarily.

25
00:01:28.041 --> 00:01:30.345
Okay, so that's the command side and

26
00:01:30.345 --> 00:01:35.253
then on the subscription side we're going
to receive session from JavaScript.

27
00:01:35.253 --> 00:01:38.821
This is going to give us
a function which takes a value.

28
00:01:38.821 --> 00:01:41.995
Now this value type
refers to a Json value,

29
00:01:41.995 --> 00:01:46.234
which is to say it's in Json
that we have not yet decoded.

30
00:01:46.234 --> 00:01:50.436
It's not in the string form but rather
it's in sort of a raw Java Script object

31
00:01:50.436 --> 00:01:54.070
that needs to be decoded before we
can do something useful with it.

32
00:01:54.070 --> 00:01:57.196
But at this point it's
just sort of undecoded and

33
00:01:57.196 --> 00:02:00.716
something that's just
passing through our program.

34
00:02:00.716 --> 00:02:02.266
So in order to write a port for

35
00:02:02.266 --> 00:02:05.961
this, we're going to use a similar
tactic to what we did last time.

36
00:02:05.961 --> 00:02:09.764
We're gonna again go make sure that we
use the same name as what we did in

37
00:02:09.764 --> 00:02:14.082
JavaScript, which is to say on session
change and then it's going to take as its

38
00:02:14.082 --> 00:02:18.207
first argument a function that converts
this incoming value to a message and

39
00:02:18.207 --> 00:02:19.774
then returns a sub message.

40
00:02:19.774 --> 00:02:23.472
So I can say on session
change passing to message and

41
00:02:23.472 --> 00:02:25.880
that should compile no problem.

42
00:02:25.880 --> 00:02:30.534
No, it did not?

43
00:02:30.534 --> 00:02:33.453
Right [LAUGH], I can't just put
a type definition and have it work.

44
00:02:33.453 --> 00:02:35.085
I actually have to use the port keyword.

45
00:02:35.085 --> 00:02:37.765
Otherwise, it just looks like I'm just
writing a weird function that I didn't

46
00:02:37.765 --> 00:02:38.407
actually define.

47
00:02:38.407 --> 00:02:39.438
Okay, thanks compiler.

48
00:02:39.438 --> 00:02:43.587
So, based on that, I should now,
theoretically, be able to sign out,

49
00:02:43.587 --> 00:02:45.092
sign up for a new account.

50
00:02:45.092 --> 00:02:48.654
And actually,
let's put some console logs in here so

51
00:02:48.654 --> 00:02:52.941
we can actually see what's going
on as we're doing this stuff.

52
00:02:52.941 --> 00:02:56.469
So inside here, inside storage session,

53
00:02:56.469 --> 00:03:00.596
I'm going to say console.log
got a new session.

54
00:03:00.596 --> 00:03:05.667
A new session and then when we actually
set the session, in other words this

55
00:03:05.667 --> 00:03:10.512
is going to be sent into Elm through
a port, we can say session changed.

56
00:03:14.122 --> 00:03:19.699
&gt;&gt; Richard Feldman: And I don't need to
recompile it because that's just raw HTML.

57
00:03:19.699 --> 00:03:21.764
Got this email and this username.

58
00:03:24.088 --> 00:03:25.254
&gt;&gt; Richard Feldman: Have
an extremely secure

59
00:03:25.254 --> 00:03:26.981
password because not even I know it.

60
00:03:28.382 --> 00:03:30.338
&gt;&gt; Richard Feldman: You can zoom it
a little bit so we can see that.

61
00:03:30.338 --> 00:03:32.875
By the way this is a little
warning compiled in DEV mode.

62
00:03:32.875 --> 00:03:36.980
Follows advice for a better performance
and smaller assets, which is basically

63
00:03:36.980 --> 00:03:40.676
tell us here is how you can enable
the optimize flag to get better assets.

64
00:03:40.676 --> 00:03:43.585
Okay, sure enough,
we did in fact get a new session,

65
00:03:43.585 --> 00:03:46.182
which has some incredibly
readable info here.

66
00:03:46.182 --> 00:03:49.842
And the session was changed,
which led us to being logged in.

67
00:03:49.842 --> 00:03:53.468
Excellent, and
putting those things together, we now have

68
00:03:53.468 --> 00:03:58.386
successfully communicated from Elm to
JavaScript, and from JavaScript to Elm.

69
00:03:58.386 --> 00:04:00.272
And that's all there is to it.

70
00:04:00.272 --> 00:04:01.100
Questions?

71
00:04:04.459 --> 00:04:07.809
&gt;&gt; Speaker 2: So
the port takes a signature, is that right?

72
00:04:07.809 --> 00:04:09.813
&gt;&gt; Richard Feldman: Yes,
the port keyword, yes.

73
00:04:09.813 --> 00:04:13.154
It does expect only a signature, yeah.

74
00:04:13.154 --> 00:04:14.786
&gt;&gt; Speaker 2: That is odd for sure.

75
00:04:14.786 --> 00:04:15.792
&gt;&gt; Richard Feldman: That is odd for sure.

76
00:04:15.792 --> 00:04:18.350
Yeah, I mean essentially
it's code generation, right?

77
00:04:18.350 --> 00:04:22.256
It's the compiler saying, well if there's
only one possible implementation for

78
00:04:22.256 --> 00:04:25.322
any given type which is I'm gonna
send that thing to JavaScript so

79
00:04:25.322 --> 00:04:27.514
it's as I'm just gonna implement it for
you.

80
00:04:27.514 --> 00:04:31.072
One other note which is just sort of
outside the scope of this workshop,

81
00:04:31.072 --> 00:04:35.047
there is one other way to do JavaScript
interact with Elm which is through custom

82
00:04:35.047 --> 00:04:37.684
elements which are part of
the web components spec.

83
00:04:37.684 --> 00:04:40.249
We're not gonna get into
exactly how to do that but

84
00:04:40.249 --> 00:04:43.502
Luke Westby gave an awesome talk
on how to do this at Elm Europe.

85
00:04:43.502 --> 00:04:45.730
Okay, walks through the steps to do it.

86
00:04:45.730 --> 00:04:50.542
Basically that's a use case where you
want to specifically embed some piece

87
00:04:50.542 --> 00:04:52.655
of JavaScript inside your view.

88
00:04:52.655 --> 00:04:56.813
You have a third party widget or something
like that, like a date picker or what

89
00:04:56.813 --> 00:05:00.723
have you and you want to just to be able
to drop it in the middle of your view.

90
00:05:00.723 --> 00:05:02.712
Custom elements are a way
that you can do that.

91
00:05:02.712 --> 00:05:06.314
So, not something we're gonna cover here
but if you're curious about that and

92
00:05:06.314 --> 00:05:09.807
that sounds like it fits your use case I
highly recommend checking out his talk

93
00:05:09.807 --> 00:05:10.847
which we will link to.

