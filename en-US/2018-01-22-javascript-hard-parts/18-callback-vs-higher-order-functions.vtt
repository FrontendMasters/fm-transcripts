WEBVTT

1
00:00:00.000 --> 00:00:05.350
Which of these was our callback, and which
of these was our higher order function?

2
00:00:05.350 --> 00:00:07.033
Katy?
Just call on Katy.

3
00:00:07.033 --> 00:00:09.862
Katy, which is our higher order function,

4
00:00:09.862 --> 00:00:11.619
would you say?
&gt;&gt; The

5
00:00:11.619 --> 00:00:13.377
&gt;&gt; And which is our callback?

6
00:00:13.377 --> 00:00:14.753
&gt;&gt; The multiply by two.

7
00:00:14.753 --> 00:00:16.741
&gt;&gt; Yeah, and the placeholder for

8
00:00:16.741 --> 00:00:19.140
all those instructions, exactly.

9
00:00:19.140 --> 00:00:20.727
Our higher order function.

10
00:00:20.727 --> 00:00:22.841
We hear this esoteric sounding term,

11
00:00:22.841 --> 00:00:25.883
this obscure sophisticated
higher order functions.

12
00:00:25.883 --> 00:00:28.856
This is a function that can
take in another function.

13
00:00:28.856 --> 00:00:29.583
That's it.

14
00:00:29.583 --> 00:00:31.038
We've seen everything.

15
00:00:31.038 --> 00:00:32.823
This is higher order function.

16
00:00:32.823 --> 00:00:36.920
And our callback function is a little
baby function that can be passed in as

17
00:00:36.920 --> 00:00:37.515
an input.

18
00:00:37.515 --> 00:00:42.254
Higher order function, and it's a higher
order function because it It's so grand,

19
00:00:42.254 --> 00:00:45.033
it can have other functions inside it,
that's why.

20
00:00:45.033 --> 00:00:46.329
It's of a higher order.

21
00:00:46.329 --> 00:00:49.231
It can have whole other functions,
like a level above.

22
00:00:49.231 --> 00:00:52.443
Callback function is the little
baby one that gets passed in.

23
00:00:52.443 --> 00:00:56.521
So the outer function that takes in
the function is a higher-order function.

24
00:00:56.521 --> 00:00:59.054
Function we passed in is
our callback function.

25
00:00:59.054 --> 00:01:03.813
Just to note, higher-order functions,
I said takes in a function or, by the way,

26
00:01:03.813 --> 00:01:05.228
return out a function.

27
00:01:05.228 --> 00:01:08.977
Any function that can take in
a function or takes in a function or

28
00:01:08.977 --> 00:01:13.011
returns it out, by definition is
known as a high-order function.

29
00:01:13.011 --> 00:01:15.203
It's just a term we use to describe.

30
00:01:15.203 --> 00:01:18.388
We don't need to declare
it a high-order function.

31
00:01:18.388 --> 00:01:21.853
You just declare it a function,
if it takes in a function or

32
00:01:21.853 --> 00:01:25.648
returns out a function It's
a high order function.

33
00:01:25.648 --> 00:01:26.694
That's it.

34
00:01:26.694 --> 00:01:32.875
So, call backs and higher order functions
simplify our code and keep it dry.

35
00:01:32.875 --> 00:01:37.249
Look at this,
before we had an independent function,

36
00:01:37.249 --> 00:01:41.718
individual copy of a ran
too.And the only thing that was

37
00:01:41.718 --> 00:01:46.320
changing each time was his
little operator and operand.

38
00:01:46.320 --> 00:01:48.904
That we applied to each
element of the array.

39
00:01:48.904 --> 00:01:52.848
What a waste of all that code we're
writing, to get a new function for

40
00:01:52.848 --> 00:01:53.528
each time.

41
00:01:53.528 --> 00:01:57.200
So instead, we create a generalized
higher-order function,

42
00:01:57.200 --> 00:01:58.968
where we leave a placeholder.

43
00:01:58.968 --> 00:02:02.844
And all the repeated code is always
in that general single version of

44
00:02:02.844 --> 00:02:03.728
the function.

45
00:02:03.728 --> 00:02:08.216
Leave a placeholder, and only when we
invoke, call, execute the function,

46
00:02:08.216 --> 00:02:12.638
do we fill in What exactly we are going
to do to each element of the array.

47
00:02:12.638 --> 00:02:13.682
And that's it.

48
00:02:13.682 --> 00:02:16.963
We determined our data,
when we call our function.

49
00:02:16.963 --> 00:02:19.574
And we determined some of the specifics.

50
00:02:19.574 --> 00:02:24.422
The only bit that changes each time,
the specifics of our functionality only

51
00:02:24.422 --> 00:02:27.629
when we call, invoke,
execute our higher order.

52
00:02:27.629 --> 00:02:31.760
More general, parametrize,
such as me putting a place holder.

53
00:02:52.100 --> 00:02:54.964
Not here, here it lies tomorrow morning.

54
00:02:54.964 --> 00:02:59.660
Tomorrow morning we will see the other
powerful impact of call backs,

55
00:02:59.660 --> 00:03:03.481
which is in a synchronous
JavaScript tomorrow morning.

56
00:03:03.481 --> 00:03:05.152
But for now, we move on.

57
00:03:05.152 --> 00:03:10.408
We've done principles of JavaScript,
the thread, the execution context,

58
00:03:10.408 --> 00:03:15.275
the global one, the one we created
when we call a function The cool stat

59
00:03:15.275 --> 00:03:20.074
that keeps track of all of these guys,
now we've then seen how

60
00:03:20.074 --> 00:03:25.153
those principles can be used to
execute higher order functions.

61
00:03:25.153 --> 00:03:31.464
And then pass in a callback and execute
a callback inside, now we reach closure.

