WEBVTT

1
00:00:00.110 --> 00:00:01.470
Let's walk through this precisely.

2
00:00:01.470 --> 00:00:03.948
This is our final block of code.

3
00:00:03.948 --> 00:00:08.200
This is gonna give us all
the mysteries of closure in a second.

4
00:00:08.200 --> 00:00:13.312
So, line one, line one.

5
00:00:16.210 --> 00:00:17.020
No grinning in the back.

6
00:00:17.020 --> 00:00:18.780
&gt;&gt; It's gonna give us closure.

7
00:00:18.780 --> 00:00:20.997
It's gonna give us close, beautiful.

8
00:00:20.997 --> 00:00:21.865
&gt;&gt; [LAUGH]
&gt;&gt; Indeed.

9
00:00:21.865 --> 00:00:23.021
[SOUND]
&gt;&gt; [LAUGH]

10
00:00:23.021 --> 00:00:24.750
&gt;&gt; Ridiculous joke.

11
00:00:24.750 --> 00:00:26.082
All right.

12
00:00:26.082 --> 00:00:29.020
&gt;&gt; [LAUGH]
&gt;&gt; Okay, line one.

13
00:00:29.020 --> 00:00:29.900
It's true, very nice.

14
00:00:29.900 --> 00:00:31.860
Andrea, what do we do in line one?

15
00:00:31.860 --> 00:00:33.360
&gt;&gt; We're declaring the functionality.

16
00:00:33.360 --> 00:00:34.680
&gt;&gt; There it is in global memory.

17
00:00:34.680 --> 00:00:40.530
Now, all right, so we're solving our code,
we're in the global execution context.

18
00:00:40.530 --> 00:00:43.640
It's on the top of our call stack,
there it is.

19
00:00:43.640 --> 00:00:44.430
We're in global.

20
00:00:44.430 --> 00:00:46.120
We're storing staff in our global memory.

21
00:00:46.120 --> 00:00:49.560
Next line in our global execution context,
Griffin?

22
00:00:53.640 --> 00:00:54.460
We declared outer.

23
00:00:54.460 --> 00:00:55.410
What's our next line?

24
00:00:55.410 --> 00:00:57.750
&gt;&gt; Wouldn't that be the var new function?

25
00:00:57.750 --> 00:00:58.660
&gt;&gt; My new function yes.

26
00:00:58.660 --> 00:00:59.460
So, what's that actually?

27
00:00:59.460 --> 00:01:00.405
How do I say that poshly?

28
00:01:00.405 --> 00:01:02.410
&gt;&gt; [CROSSTALK]
&gt;&gt; Declaring myNewfunction to.

29
00:01:02.410 --> 00:01:02.940
&gt;&gt; Okay, perfect.

30
00:01:02.940 --> 00:01:09.290
As a variable myNewfunction and
it's going to be what initially?

31
00:01:09.290 --> 00:01:10.986
&gt;&gt; Undefined.

32
00:01:10.986 --> 00:01:15.415
&gt;&gt; Undefined because we've

33
00:01:15.415 --> 00:01:20.245
got to go figure out what gets

34
00:01:20.245 --> 00:01:25.890
returned from the call to outer.

35
00:01:27.100 --> 00:01:32.252
So over here, we've done this a few
times now, we are going to say

36
00:01:32.252 --> 00:01:37.140
whatever gets returned

37
00:01:37.140 --> 00:01:42.110
from the call to outer,
so we're gonna run outer.

38
00:01:42.110 --> 00:01:43.344
How do I know I'm running outer, Griffin?

39
00:01:43.344 --> 00:01:44.860
&gt;&gt; Parentheses.

40
00:01:44.860 --> 00:01:46.020
&gt;&gt; Parens, I'm gonna run it.

41
00:01:46.020 --> 00:01:50.650
Whatever comes out of outer,
store it in myNewFunction.

42
00:01:50.650 --> 00:01:52.780
How do I know what
the coming out of outer is?

43
00:01:52.780 --> 00:01:55.546
So what's the keyword that tells
me that's gonna be the output?

44
00:01:55.546 --> 00:01:56.840
&gt;&gt; Return.
&gt;&gt; Return statement, exactly.

45
00:01:56.840 --> 00:01:59.410
Whatever's after the return keyword,
that's the output.

46
00:01:59.410 --> 00:02:00.750
We've got to go figure that out.

47
00:02:00.750 --> 00:02:01.680
We don't know the answer yet.

48
00:02:01.680 --> 00:02:03.648
So we create, everybody together, a?

49
00:02:03.648 --> 00:02:05.070
&gt;&gt; Execution context.

50
00:02:05.070 --> 00:02:08.530
&gt;&gt; I thought it would be more
energetic this time then last time,

51
00:02:08.530 --> 00:02:09.100
but you've got it.

52
00:02:09.100 --> 00:02:10.115
Good, exactly.

53
00:02:10.115 --> 00:02:14.510
An execution context, I was so
energetic about it I made it big.

54
00:02:14.510 --> 00:02:18.090
There we go.
I've flung myself around.

55
00:02:18.090 --> 00:02:23.060
There it is,
a new execution context, all right.

56
00:02:23.060 --> 00:02:27.160
Inside of which we do what first?

57
00:02:27.160 --> 00:02:31.920
What's the first thing we do
inside of execution context?

58
00:02:31.920 --> 00:02:32.420
Shelby.

59
00:02:33.850 --> 00:02:36.850
&gt;&gt; We label counter as zero.

60
00:02:36.850 --> 00:02:40.520
&gt;&gt; Right, so we declare counter as zero.

61
00:02:40.520 --> 00:02:44.179
Remember the other name for this local
memory, not the execution content but

62
00:02:44.179 --> 00:02:48.350
just the memory bit of it, is variable
environment, just as a reminder.

63
00:02:48.350 --> 00:02:50.890
We're calling outer, so
call stack, what happens, Shelby?

64
00:02:52.320 --> 00:02:54.240
We're calling outer,
what happens when I call that, Shelby?

65
00:02:54.240 --> 00:02:55.510
&gt;&gt; We add the outer.

66
00:02:55.510 --> 00:02:58.460
&gt;&gt; The outer call, so
JavaScript knows that's where I am.

67
00:02:58.460 --> 00:03:04.960
Top of the call stack and
you're right, counter is set to zero.

68
00:03:04.960 --> 00:03:08.820
Okay, next line, Shelby,
inside of the call to outer.

69
00:03:08.820 --> 00:03:10.124
&gt;&gt; You execute the-
&gt;&gt; Whoop!

70
00:03:12.780 --> 00:03:13.465
What, go ahead?

71
00:03:13.465 --> 00:03:14.350
&gt;&gt; The increment counter?

72
00:03:14.350 --> 00:03:16.110
&gt;&gt; I execute it?

73
00:03:17.180 --> 00:03:18.080
&gt;&gt; Restart it?

74
00:03:18.080 --> 00:03:20.310
&gt;&gt; Am I declaring or am I executing it?

75
00:03:20.310 --> 00:03:21.440
&gt;&gt; You're declaring it.

76
00:03:21.440 --> 00:03:22.900
&gt;&gt; How do I know I'm declaring it?

77
00:03:22.900 --> 00:03:23.440
What keyword?

78
00:03:23.440 --> 00:03:24.280
&gt;&gt; Function.
&gt;&gt; Function,

79
00:03:24.280 --> 00:03:27.510
that says go store me under
this label in memory, okay.

80
00:03:27.510 --> 00:03:32.151
Right, increment counter is

81
00:03:32.151 --> 00:03:37.170
declared and stored in memory.

82
00:03:37.170 --> 00:03:39.130
There's the definition.

83
00:03:39.130 --> 00:03:40.360
There it is.
The whole thing

84
00:03:40.360 --> 00:03:42.750
as a description of that functionality,
increment counter.

85
00:03:42.750 --> 00:03:46.940
If I had a console log,
increment counter, Katie,

86
00:03:46.940 --> 00:03:50.190
if I had a console log increment counter,
what would I see in my console in full?

87
00:03:50.190 --> 00:03:53.750
&gt;&gt; You would see the whole function,
which is counter.

88
00:03:53.750 --> 00:03:59.970
&gt;&gt; Function increment counter parens open
curly braces counter++ close curly braces.

89
00:03:59.970 --> 00:04:01.090
It's the whole function.

90
00:04:01.090 --> 00:04:05.728
Okay, good, now am I going to call,
am I going to invoke,

91
00:04:05.728 --> 00:04:09.820
Lindsey, am I going to
invoke incrementCounter?

92
00:04:09.820 --> 00:04:11.920
Am I gonna run incrementCounter
at this point?

93
00:04:11.920 --> 00:04:12.750
&gt;&gt; No.
&gt;&gt; No.

94
00:04:12.750 --> 00:04:13.850
What am I gonna do with it instead?

95
00:04:13.850 --> 00:04:14.800
&gt;&gt; You're gonna return it.

96
00:04:14.800 --> 00:04:17.370
&gt;&gt; I'm gonna return out the whole function

97
00:04:17.370 --> 00:04:17.990
definition.

98
00:04:17.990 --> 00:04:23.670
So we said, whatever gets returned out or
running outer is gonna be stored

99
00:04:23.670 --> 00:04:27.980
in myNewFunc or whatever, myNewFunction.

100
00:04:27.980 --> 00:04:29.070
But we'll call it myNewFunc for now.

101
00:04:32.630 --> 00:04:35.020
Whatever gets returned that's
stored in myNewFunction.

102
00:04:35.020 --> 00:04:36.575
So what is returned out, Lindsay?

103
00:04:38.080 --> 00:04:39.400
&gt;&gt; The actual function right now.

104
00:04:39.400 --> 00:04:42.092
&gt;&gt; The actual function, and
let's call it the function value,

105
00:04:42.092 --> 00:04:44.730
because it's the whole
description of the function.

106
00:04:44.730 --> 00:04:47.330
Did we care about the label
incrementCounter out here?

107
00:04:47.330 --> 00:04:48.700
No, it's just the right hand side.

108
00:04:48.700 --> 00:04:54.090
The function gets, out it comes,
and stored in myNewFunction.

109
00:04:54.090 --> 00:04:59.180
It's this function definition here,
stored in myNewFunction.

110
00:04:59.180 --> 00:05:03.090
Little baby function, out it comes.

111
00:05:03.090 --> 00:05:05.500
Stored in myNewFunction, okay.

112
00:05:07.020 --> 00:05:10.550
So here comes the big moment.

113
00:05:12.114 --> 00:05:13.588
How, Mohammed?

114
00:05:13.588 --> 00:05:17.720
I always do this,
first we finish calling outer.

115
00:05:17.720 --> 00:05:21.895
We know that because we hit the return
statement, shown at the bottom,

116
00:05:21.895 --> 00:05:24.351
stored incrementCounter in myNewFunction,

117
00:05:24.351 --> 00:05:26.600
so we are back to-
&gt;&gt; The global.

118
00:05:26.600 --> 00:05:30.800
&gt;&gt; Global,
which means our call stack has popped.

119
00:05:30.800 --> 00:05:31.690
&gt;&gt; Off of that.

120
00:05:31.690 --> 00:05:32.900
&gt;&gt; The call to outer, right?

121
00:05:32.900 --> 00:05:36.350
So this guy is done, and this guy here.

122
00:05:36.350 --> 00:05:37.830
This is really important, folk.

123
00:05:38.960 --> 00:05:44.730
This execution context is done unless
we return something out where we did.

124
00:05:44.730 --> 00:05:48.590
We returned this guy, out, didn't we?

125
00:05:48.590 --> 00:05:49.810
Unless you return something out and

126
00:05:49.810 --> 00:05:55.100
stored it out here in a new label,
everything in here, hm, we'll see.

127
00:05:55.100 --> 00:05:56.800
Everything in here is gone.

128
00:05:56.800 --> 00:05:58.438
Gone, maybe not completely gone.

129
00:05:58.438 --> 00:06:02.190
[LAUGH] Stay tuned, but this is all gone.

130
00:06:02.190 --> 00:06:04.770
This execution context is done,
it's gone off the side.

131
00:06:04.770 --> 00:06:06.690
We cannot jump back in here.

132
00:06:06.690 --> 00:06:07.780
This isn't sticking around.

133
00:06:13.600 --> 00:06:14.410
This is gone.

134
00:06:16.030 --> 00:06:18.710
See that doesn't work,
that whole notion of,

135
00:06:18.710 --> 00:06:22.200
I don't know how to show that
this execution context is gone.

136
00:06:22.200 --> 00:06:24.710
It is gone, gone, gone.

137
00:06:24.710 --> 00:06:27.120
If I could fade it out that would help.

138
00:06:27.120 --> 00:06:27.846
It is gone.

139
00:06:27.846 --> 00:06:31.089
It's gone, gone.

140
00:06:31.089 --> 00:06:32.940
Okay, got it?

141
00:06:32.940 --> 00:06:37.840
So, then given that, how can I out here,
Mohammed, run the functionality that

142
00:06:37.840 --> 00:06:41.280
was previously known as incrementCounter
inside there, how can I run that out here?

143
00:06:42.280 --> 00:06:44.280
&gt;&gt; Put a parens around myNewFunction?

144
00:06:44.280 --> 00:06:46.684
&gt;&gt; Perfect,
because myNewFunction is the new label for

145
00:06:46.684 --> 00:06:49.465
that interior functionality
incrementCounter.

146
00:06:49.465 --> 00:06:53.190
MyNewFunction and
then some little parens on the end of it.

147
00:06:54.500 --> 00:06:57.470
Well we're probably already spotting,
when I ran incrementCounter inside,

148
00:06:57.470 --> 00:07:00.380
it made reference to something, uh-oh.

149
00:07:00.380 --> 00:07:02.538
We have problems, very clearly.

150
00:07:02.538 --> 00:07:06.320
We're running myNewFunction, there it is.

151
00:07:06.320 --> 00:07:09.000
Now we can run what was previously
known as incrementCounter

152
00:07:09.000 --> 00:07:12.040
in the global context even
though outer's finished running.

153
00:07:12.040 --> 00:07:14.450
If we're back to global, outer is done.

154
00:07:14.450 --> 00:07:18.054
We can't have two, three outer, or
a thread in outer pausing, hanging out,

155
00:07:18.054 --> 00:07:18.985
it's done.

156
00:07:18.985 --> 00:07:20.305
We're back to global, but

157
00:07:20.305 --> 00:07:24.385
we can run incrementCounter
globally through its new label.

158
00:07:24.385 --> 00:07:26.725
You returned out
the incrementCounter function and

159
00:07:26.725 --> 00:07:28.405
called it instead myNewFunction.

160
00:07:28.405 --> 00:07:32.947
MyNewFunction is really running the
counter++ incrementCounter functionality.

161
00:07:32.947 --> 00:07:34.220
There it is, so let's do that.

162
00:07:34.220 --> 00:07:37.965
Amin, myNewFunction is being called,
what do I create?

163
00:07:37.965 --> 00:07:39.725
A new-
&gt;&gt; Execution context.

164
00:07:39.725 --> 00:07:41.164
&gt;&gt; Good job, Amin.

165
00:07:42.722 --> 00:07:45.840
You wanted to say that, but
you are perfectly right.

166
00:07:45.840 --> 00:07:49.730
There it is, myNewFunction,
new execution context.

167
00:07:49.730 --> 00:07:53.680
And, it has its own call
to the local memory.

168
00:07:54.840 --> 00:07:58.015
And in terms of my call stacker meme,
what do I do?

169
00:07:58.015 --> 00:08:00.950
&gt;&gt; You put incrementCounter in there.

170
00:08:00.950 --> 00:08:02.280
&gt;&gt; Yeah, they're the same thing.

171
00:08:02.280 --> 00:08:03.590
We'll call it myNewFunction out here.

172
00:08:03.590 --> 00:08:05.970
Yeah, they're the same function,
just two different labels.

173
00:08:05.970 --> 00:08:08.160
You can have two labels for
the same functionality.

174
00:08:08.160 --> 00:08:08.660
There it is.

175
00:08:10.960 --> 00:08:14.251
What's the first line of code inside here,
Mohammed, say?

176
00:08:16.439 --> 00:08:18.753
&gt;&gt; Do you need a paren there?

177
00:08:19.960 --> 00:08:22.770
&gt;&gt; Well this is just, for
what is myNewFunction really?

178
00:08:23.830 --> 00:08:25.530
Andrea, what is myNewFunction really?

179
00:08:25.530 --> 00:08:26.330
&gt;&gt; IncrementCounter.

180
00:08:26.330 --> 00:08:29.250
&gt;&gt; So what's the first
line of code inside of it?

181
00:08:29.250 --> 00:08:31.798
&gt;&gt; Counter++.

182
00:08:31.798 --> 00:08:34.530
&gt;&gt; Counter++.

183
00:08:41.870 --> 00:08:44.000
&gt;&gt; We have serious issues we
can probably already spot.

184
00:08:44.000 --> 00:08:45.360
Where do I look for
counter first, Mohammed?

185
00:08:45.360 --> 00:08:46.530
&gt;&gt; Locally.

186
00:08:46.530 --> 00:08:47.780
&gt;&gt; Local, exactly.

187
00:08:47.780 --> 00:08:50.220
I know that because it's look,
there you go, top of my call stack.

188
00:08:50.220 --> 00:08:51.430
Woo hoo, top of my call stack.

189
00:08:52.480 --> 00:08:56.299
Where does my call stack and everything
we've prior known suggest I look next,

190
00:08:56.299 --> 00:08:57.320
Mohammad?

191
00:08:57.320 --> 00:08:58.270
&gt;&gt; In global.
&gt;&gt; In global.

192
00:08:58.270 --> 00:09:01.017
Do you find,
I see no counter in the global.

193
00:09:02.660 --> 00:09:03.576
There ain't no counters in the global.

194
00:09:07.350 --> 00:09:11.270
This would suggest we're gonna
get some sort of error, right?

195
00:09:11.270 --> 00:09:11.770
Let's see.

196
00:09:13.420 --> 00:09:14.310
It says we had some sort of error.

197
00:09:22.605 --> 00:09:23.940
We did a lot of work for just an error.

198
00:09:23.940 --> 00:09:26.810
Who thinks we're actually
gonna get an error?

199
00:09:26.810 --> 00:09:30.380
Raise your hand high and proud if
you're actually gonna get an error.

200
00:09:30.380 --> 00:09:33.690
Good, okay my playing along is,
thank you for playing along, but

201
00:09:33.690 --> 00:09:34.580
there might actually be an error.

202
00:09:34.580 --> 00:09:35.210
I appreciate it.

203
00:09:37.099 --> 00:09:40.590
&gt;&gt; [LAUGH]
&gt;&gt; [LAUGH] Yeah, I know.

204
00:09:41.740 --> 00:09:43.965
What a lot of work for nothing?

205
00:09:50.280 --> 00:09:51.180
You buy into this, Bob?

206
00:09:53.110 --> 00:09:54.142
No, not buying into it.

207
00:09:54.142 --> 00:09:58.206
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah, a lot of work,

208
00:09:58.206 --> 00:10:01.127
we did, for nothing.

209
00:10:03.498 --> 00:10:04.919
Okay.

