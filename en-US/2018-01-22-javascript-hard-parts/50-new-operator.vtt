WEBVTT

1
00:00:00.390 --> 00:00:01.993
&gt;&gt; Will Sentance: In the challenges,

2
00:00:01.993 --> 00:00:06.058
we started to encounter
this magic keyword, new.

3
00:00:06.058 --> 00:00:10.892
So we're gonna remind ourselves
that we wanted a function,

4
00:00:10.892 --> 00:00:17.160
that when called, when run, would
return out little baby objects, user1.

5
00:00:17.160 --> 00:00:20.577
Call them, first one user1, next one,
user2, user5,000, user whatever.

6
00:00:20.577 --> 00:00:24.589
But we wanna have available on each
of the objects our functionality.

7
00:00:24.589 --> 00:00:26.229
Have I mentioned this yet?

8
00:00:26.229 --> 00:00:27.550
I know, I mentioned this many times.

9
00:00:27.550 --> 00:00:28.981
This is our fundamental goal.

10
00:00:28.981 --> 00:00:33.381
Can I call this function on the object,
is it available right there on the object.

11
00:00:33.381 --> 00:00:34.728
That's all I want.

12
00:00:34.728 --> 00:00:39.718
But I don't wanna have multiple copies of
this function on user1, user2, user5000.

13
00:00:39.718 --> 00:00:44.705
So along comes this special shed store,
of the functions that I could ever

14
00:00:44.705 --> 00:00:48.809
want on user1 user,
it wouldn't just be increment login,

15
00:00:48.809 --> 00:00:54.537
it would increment login, logout and
change avatar, display avatar, etc, etc.

16
00:00:54.537 --> 00:00:57.686
All those functions on
user function store would

17
00:00:57.686 --> 00:01:00.921
be available when I call
user1.thatfunction.

18
00:01:00.921 --> 00:01:06.268
Cuz if I don't find that function
on user1, my prototypal nature

19
00:01:06.268 --> 00:01:11.707
of JavaScript means I check the _proto_
where I find a bond through

20
00:01:11.707 --> 00:01:17.541
the prototype chain to the next object up,
user function store, okay.

21
00:01:17.541 --> 00:01:21.470
But I'm sure you'll agree Mohamed,
quite a lot of space here.

22
00:01:21.470 --> 00:01:27.645
Of our typing has been taken up by
creating that new user object in here, and

23
00:01:27.645 --> 00:01:34.621
creating that bond to that shared function
store, and returning our other object.

24
00:01:34.621 --> 00:01:36.460
Who comes from a true OOP language?

25
00:01:36.460 --> 00:01:38.432
Do you do all that stuff by hand there?

26
00:01:38.432 --> 00:01:40.214
No, you do not.

27
00:01:40.214 --> 00:01:44.624
And JavaScript increasingly
wants us to feel liberated,

28
00:01:44.624 --> 00:01:49.754
from all this manual work of making
our prototype bonds, Mohamed.

29
00:01:51.901 --> 00:01:55.311
&gt;&gt; Will Sentance: All
these prototype bonds.

30
00:01:55.311 --> 00:01:58.066
I hate putting away from the pairing,
I'm sorry.

31
00:01:58.066 --> 00:02:02.713
I feel very bad, the pairing is where
the real value's at, it really is.

32
00:02:02.713 --> 00:02:06.219
But right now we're gonna see
our solution three in a moment.

33
00:02:06.219 --> 00:02:09.286
We're gonna get, let's see our
review with this approach problem.

34
00:02:09.286 --> 00:02:12.381
No problems, this a beautiful approach.

35
00:02:12.381 --> 00:02:14.712
I love this approach maybe
a little long-winded.

36
00:02:14.712 --> 00:02:19.283
We've declared a new variable with
an object associated with a bond to

37
00:02:19.283 --> 00:02:20.451
function store.

38
00:02:20.451 --> 00:02:23.396
We've returned that object.

39
00:02:23.396 --> 00:02:25.947
Six words it's not that bad but,

40
00:02:25.947 --> 00:02:30.793
I will say this is super sophisticated but
it is none standard.

41
00:02:30.793 --> 00:02:36.094
This is a non standard way of creating
our objects with shared functionality.

42
00:02:36.094 --> 00:02:39.180
This is a non standard way,
we have a standardized way.

43
00:02:39.180 --> 00:02:42.446
In the down side of this
approach yes six was but also,

44
00:02:42.446 --> 00:02:47.309
once you start creating objects in which
you have your data and functionality,

45
00:02:47.309 --> 00:02:49.647
you start doing this for everything.

46
00:02:49.647 --> 00:02:52.618
Are you creating a quiz
game you generate a quiz

47
00:02:52.618 --> 00:02:56.131
board as an object with
functionality attached to it.

48
00:02:56.131 --> 00:02:57.631
It's a single instance the of the quiz.

49
00:02:57.631 --> 00:02:58.861
You're not gonna create more of them.

50
00:02:58.861 --> 00:03:01.129
You just start thinking OOP for
everything and

51
00:03:01.129 --> 00:03:04.049
therefore if you are manually
doing this inside each time.

52
00:03:04.049 --> 00:03:07.329
Yeah, may be it is not as,
may be there is a better way.

53
00:03:07.329 --> 00:03:09.902
Another language you are not doing this,
if you are trying to achieve oop.

54
00:03:09.902 --> 00:03:12.917
But I will say if this way, sophisticated.

55
00:03:12.917 --> 00:03:17.796
We get to see every precise bit,
we get to manually set our bond to hey,

56
00:03:17.796 --> 00:03:23.277
we now know what's actually going on,
but a lot of this stuff gets automated.

57
00:03:23.277 --> 00:03:28.342
It's still happening under the hood,
but it's getting typed in for

58
00:03:28.342 --> 00:03:33.505
us, essentially, by JavaScript when
we use this magic keyword new.

59
00:03:33.505 --> 00:03:35.123
Not magic, I don't know why magic there.

60
00:03:35.123 --> 00:03:37.185
This keyword new.

61
00:03:37.185 --> 00:03:42.361
When we run this user created function,
with the new keyword

62
00:03:42.361 --> 00:03:47.031
in front of it,
it behaves in a totally under the hood,

63
00:03:47.031 --> 00:03:51.514
similar way to this,
not identical, but similar.

64
00:03:51.514 --> 00:03:56.417
But it's gonna automate so much of the
hard work we did here, declaring the and

65
00:03:56.417 --> 00:03:57.106
so forth.

66
00:03:57.106 --> 00:03:59.769
Let's see.
When we call the constructor function,

67
00:03:59.769 --> 00:04:03.739
this guy here is known as our
constructor function, with new in front,

68
00:04:03.739 --> 00:04:05.143
we automate two things.

69
00:04:05.143 --> 00:04:09.313
We automatically create
the new user object.

70
00:04:09.313 --> 00:04:13.129
We automatically return out that
user object when complete and

71
00:04:13.129 --> 00:04:14.933
store in user1 for example.

72
00:04:14.933 --> 00:04:19.656
Who can see why we have to rethink
how we write this code then?

73
00:04:19.656 --> 00:04:24.884
Cuz right now, I declare an object code
new user, it's an empty object, and

74
00:04:24.884 --> 00:04:29.962
then to fill in the properties name,
how do I refer to that object, Katie?

75
00:04:29.962 --> 00:04:33.974
What label do I use to refer to
the object to fill in the name property?

76
00:04:33.974 --> 00:04:34.790
&gt;&gt; Katie: New user.

77
00:04:34.790 --> 00:04:38.941
&gt;&gt; Will Sentance: New user,
if I'm automatically creating this line,

78
00:04:38.941 --> 00:04:42.740
JavaScript is going to
automate this line for us.

79
00:04:42.740 --> 00:04:45.815
What's the label for my object?

80
00:04:45.815 --> 00:04:48.881
That label's gone,
that's automatically done for me.

81
00:04:48.881 --> 00:04:53.609
The object is created for me by Java,
everything in red is stuff that the new

82
00:04:53.609 --> 00:04:57.889
keyword when I run the user created
function, instead of rekali but

83
00:04:57.889 --> 00:05:00.536
instead with a new keyword in front of it.

84
00:05:00.536 --> 00:05:02.441
I get an object automatically created.

85
00:05:02.441 --> 00:05:04.995
And that object gets automatically, again,

86
00:05:04.995 --> 00:05:08.803
everything in red is automatically
done for us, gets returned out.

87
00:05:08.803 --> 00:05:13.053
But how do I fill in properly that is
something that is being auto created.

88
00:05:13.053 --> 00:05:17.721
Anyone got an idea how JavaScript might
allow me to point to refer to that object?

89
00:05:17.721 --> 00:05:21.032
What might be a useful
place holder keyword or

90
00:05:21.032 --> 00:05:25.048
word that we could use to
point to that object, Katie?

91
00:05:25.048 --> 00:05:27.455
What do you think might be an useful word,
Griffin?

92
00:05:27.455 --> 00:05:28.033
&gt;&gt; Griffin: This.

93
00:05:28.033 --> 00:05:29.479
&gt;&gt; Will Sentance: It's this.

94
00:05:29.479 --> 00:05:31.327
It's a different use to the word this.

95
00:05:31.327 --> 00:05:37.227
Totally different use but it still refer,
JavaScript when we use new,

96
00:05:37.227 --> 00:05:42.260
create a new object by default and
gives it the label of this.

97
00:05:42.260 --> 00:05:45.615
So behind the scenes we are sought
of going, not new user but

98
00:05:45.615 --> 00:05:48.032
behind the scenes we're sought of going,

99
00:05:48.032 --> 00:05:51.816
this is equal to object.create
empty object but it is automatic.

100
00:05:51.816 --> 00:05:56.243
When we see which bit get cut in a second
that cuz we're not writing this JavaScript

101
00:05:56.243 --> 00:06:00.561
inserts this for us, because we use the
new keyword in front of using a creator.

102
00:06:00.561 --> 00:06:02.521
So who can now see another problem?

103
00:06:02.521 --> 00:06:04.783
We now know how you can
refer to our object, but

104
00:06:04.783 --> 00:06:08.497
who can see another problem but this
automation by automating this line, by

105
00:06:08.497 --> 00:06:12.921
automatically creating the object, what's
another problem here that someone can see?

106
00:06:12.921 --> 00:06:14.505
&gt;&gt; Speaker 4: There's still a bond.

107
00:06:14.505 --> 00:06:16.276
&gt;&gt; Will Sentance: How do we get that bond?

108
00:06:16.276 --> 00:06:18.227
Cuz before,
we manually made that bond, didn't we?

109
00:06:18.227 --> 00:06:23.370
We said object.create
parentheses user function store.

110
00:06:23.370 --> 00:06:25.790
Now, we don't get a chance
to make that bond.

111
00:06:25.790 --> 00:06:28.534
That's gonna be automatically done for us.

112
00:06:28.534 --> 00:06:32.063
The bond here is also gonna be automated.

113
00:06:32.063 --> 00:06:36.204
But if it's automated,
what's it gonna refer to?

114
00:06:36.204 --> 00:06:38.338
&gt;&gt; Speaker 5: This.

115
00:06:38.338 --> 00:06:39.668
&gt;&gt; Will Sentance: This
is this object here.

116
00:06:39.668 --> 00:06:44.565
We want something out here that is
gonna be a shared function store.

117
00:06:48.683 --> 00:06:51.241
&gt;&gt; Will Sentance: Something
like where do we end

118
00:06:51.241 --> 00:06:55.037
up actually storing our shared functions?

119
00:06:55.037 --> 00:06:58.400
Well Java is a default place and
it's a default place and

120
00:06:58.400 --> 00:07:03.269
it chooses the default place for the user
creator function of the other functions

121
00:07:03.269 --> 00:07:06.364
like quiz question creator,
gameboard creator.

122
00:07:06.364 --> 00:07:10.701
Anything that's gonna return an object
with all the data of the associated and

123
00:07:10.701 --> 00:07:12.024
it's a default place.

124
00:07:12.024 --> 00:07:16.073
Before I tell you what a default place is,
you need to know something.

125
00:07:16.073 --> 00:07:20.475
Which many of you already know
we've said it many times,

126
00:07:20.475 --> 00:07:24.154
functions in JavaScript
are really just what?

127
00:07:24.154 --> 00:07:25.647
Anyone remember?

128
00:07:25.647 --> 00:07:26.395
&gt;&gt; Group: Objects.

129
00:07:26.395 --> 00:07:30.611
&gt;&gt; Will Sentance: Objects,
okay so, if that's the case,

130
00:07:30.611 --> 00:07:33.507
user creator is a function.

131
00:07:33.507 --> 00:07:34.370
Yeah, no problem.

132
00:07:34.370 --> 00:07:36.823
It's a function.

133
00:07:36.823 --> 00:07:37.686
There it is.

134
00:07:37.686 --> 00:07:39.215
It's a function.

135
00:07:39.215 --> 00:07:42.803
So if I treat user creator as
a function and put parenths on the end,

136
00:07:42.803 --> 00:07:44.483
it runs it's functionality.

137
00:07:44.483 --> 00:07:48.810
Hurray but
what is user creator also Andrew?

138
00:07:48.810 --> 00:07:49.665
&gt;&gt; Andrew: An object.

139
00:07:49.665 --> 00:07:56.287
&gt;&gt; Will Sentance: An object,
it's also an Object.

140
00:07:56.287 --> 00:08:00.643
So if I treat user creator as an object,
it behaves as an object.

141
00:08:00.643 --> 00:08:04.939
If I try and store on user creator,

142
00:08:04.939 --> 00:08:13.546
user creator.andrew = 3 that has
no consequences on my function.

143
00:08:13.546 --> 00:08:19.745
The next line I can
still go userCreater ().

144
00:08:19.745 --> 00:08:23.252
If I treat it like an object,
it does its object stuff.

145
00:08:23.252 --> 00:08:27.033
If I treat it like a function,
it does its function stuff.

146
00:08:27.033 --> 00:08:30.083
Who feels that it's a bit weird.

147
00:08:30.083 --> 00:08:32.269
Raise your hands if you
think that's a bit weird.

148
00:08:32.269 --> 00:08:35.357
Feels a bit, no that's odd to me okay.

149
00:08:35.357 --> 00:08:39.595
At least we're being honest,
it is a bit weird.

150
00:08:39.595 --> 00:08:43.825
So if I did this line here
what would I have in using

151
00:08:43.825 --> 00:08:47.651
a creator in this object version, Andrew?

152
00:08:47.651 --> 00:08:48.460
&gt;&gt; Andrew: An Andrew.

153
00:08:48.460 --> 00:08:50.999
&gt;&gt; Will Sentance: Andrew as a property and
the value would be-

154
00:08:50.999 --> 00:08:51.548
&gt;&gt; Andrew: 3.

155
00:08:51.548 --> 00:08:54.114
&gt;&gt; Will Sentance: 3 yeah.

156
00:08:54.114 --> 00:08:55.734
Now, there is one way I've heard,

157
00:08:55.734 --> 00:08:58.225
I think it's quite a smart
way of thinking about this.

158
00:08:58.225 --> 00:09:03.481
In reality, userCreator, it's a function,
but it really is like an object first.

159
00:09:03.481 --> 00:09:05.118
It's an object first.

160
00:09:05.118 --> 00:09:09.144
With a special property on it called Call.

161
00:09:09.144 --> 00:09:12.045
Which is the running of the functionality.

162
00:09:12.045 --> 00:09:15.779
This is this not necessarily respective
of how we actually have it, but

163
00:09:15.779 --> 00:09:18.780
think of JavaScript functions
as really just an object.

164
00:09:18.780 --> 00:09:23.366
And when we do use a creator parenths,
what we're really doing is say

165
00:09:23.366 --> 00:09:28.360
go run user creator and it's cool
property, which is the functionality.

166
00:09:28.360 --> 00:09:30.919
And that sounds weird, but
that's really what we're doing.

167
00:09:30.919 --> 00:09:35.399
Think of it being
the functionality as sort of there

168
00:09:35.399 --> 00:09:39.161
under a call property, a run me property.

169
00:09:39.161 --> 00:09:41.424
So if you're thinking how can it
be both things at the same time?

170
00:09:41.424 --> 00:09:44.608
Well really it's just an object
with some functionality can be run.

171
00:09:44.608 --> 00:09:49.220
Even though we think of it as a function
first, it's really an object first.

172
00:09:49.220 --> 00:09:52.677
But we obviously use this
functionality far more, but

173
00:09:52.677 --> 00:09:56.447
it really is an object first
with functionality attached.

174
00:09:56.447 --> 00:09:58.691
But we always when we
add when we do parenths,

175
00:09:58.691 --> 00:10:00.593
we speak to it's functionality bit.

176
00:10:00.593 --> 00:10:04.388
Okay let's have thumbs on that,
cuz it really is important for

177
00:10:04.388 --> 00:10:09.043
us to understand this is our final piece
of knowledge we need to understand for

178
00:10:09.043 --> 00:10:13.145
us to be able to use the new key
word effectively let's have thumbs.

