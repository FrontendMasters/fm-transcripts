WEBVTT

1
00:00:00.160 --> 00:00:02.181
&gt;&gt; Will Sentance: We're gonna
go through it line by line and

2
00:00:02.181 --> 00:00:03.517
see it play out in actions.

3
00:00:03.517 --> 00:00:06.651
This is our final function,
for asynchronous JavaScript.

4
00:00:06.651 --> 00:00:10.121
Line one, Art, what are we creating?

5
00:00:10.121 --> 00:00:13.084
&gt;&gt; Art: We're declaring
the display function?

6
00:00:13.084 --> 00:00:16.191
&gt;&gt; Will Sentance: Exactly,
we're declaring,

7
00:00:16.191 --> 00:00:20.258
we're defining the display function.

8
00:00:20.258 --> 00:00:26.367
There it is, good, line two.

9
00:00:26.367 --> 00:00:31.378
So this line here is using
jQuery's library but

10
00:00:31.378 --> 00:00:35.262
we are really inside this function,

11
00:00:35.262 --> 00:00:39.033
we're going to do something else.

12
00:00:39.033 --> 00:00:41.620
This function does actually
create an execution

13
00:00:41.620 --> 00:00:43.581
context in the conventional sense.

14
00:00:43.581 --> 00:00:48.168
Unlike set which is built into JavaScript,
$.get is not built into JavaScript.

15
00:00:48.168 --> 00:00:51.522
But it wraps up some
built in functionality.

16
00:00:51.522 --> 00:00:55.521
So we're not going to look
into how $.get works,

17
00:00:55.521 --> 00:01:00.450
it's just a jQuery function, but
what it does do inside of it,

18
00:01:00.450 --> 00:01:04.449
which we can do ourselves
manually in JavaScript,

19
00:01:04.449 --> 00:01:07.992
is spin up and
speak to a web browser feature.

20
00:01:07.992 --> 00:01:12.915
API, web browser feature,
the one does web requests, date requests.

21
00:01:12.915 --> 00:01:15.315
That's what happens inside this $.get.

22
00:01:15.315 --> 00:01:19.011
So we gonna treat it like
it's a built in function.

23
00:01:19.011 --> 00:01:21.890
So is no going to create
an execution context in course like

24
00:01:21.890 --> 00:01:23.198
in a conventional sense.

25
00:01:23.198 --> 00:01:25.682
It is because it is not
a built in function,

26
00:01:25.682 --> 00:01:28.445
it's got inside itself
use built in function.

27
00:01:28.445 --> 00:01:32.729
But unlike the set time out which is
very simple single line, the setting up

28
00:01:32.729 --> 00:01:36.879
the built-in function that makes
a web request, is four or five lines.

29
00:01:36.879 --> 00:01:41.391
So we wrapped it in in this $.get.

30
00:01:41.391 --> 00:01:46.117
Just think of it just like I set time out,
it's not gonna do anything interesting in

31
00:01:46.117 --> 00:01:50.048
JavaScript land, it's going to
speak to web browser feature land.

32
00:01:50.048 --> 00:01:51.633
Just like setimeout does.

33
00:01:51.633 --> 00:01:55.823
Actually it does a few things,
but they are not important.

34
00:01:55.823 --> 00:02:01.615
All it does is spin up something in web
browser feature land, not JavaScript land.

35
00:02:01.615 --> 00:02:05.837
So on that note let's see that happen.

36
00:02:05.837 --> 00:02:11.054
$.get just like set time out,
we're gonna invoke it.

37
00:02:11.054 --> 00:02:16.101
We're gonna pass to it,
this string which is a URL,

38
00:02:16.101 --> 00:02:21.629
to somewhere on the internet,
is a pretend API address.

39
00:02:21.629 --> 00:02:26.589
Somewhere on the internet
where we have supposedly

40
00:02:26.589 --> 00:02:31.446
a single tweet,
which we can access from our API.

41
00:02:31.446 --> 00:02:34.849
How wonderfully convenient,
and unlikely that is?

42
00:02:34.849 --> 00:02:40.890
And we're gonna pass to it this
whole function definition not

43
00:02:40.890 --> 00:02:46.129
calling this function,
just this definition okay?

44
00:02:46.129 --> 00:02:49.068
Now, how do I know what
this is gonna look like?

45
00:02:49.068 --> 00:02:53.960
Well I go and look at the documentation
for JavaScript or in this case, jQuery,

46
00:02:53.960 --> 00:02:57.779
and look and see,
what do I expect to pass to this function?

47
00:02:57.779 --> 00:03:02.102
It says pass a URL, an API address
that I can go and get data from.

48
00:03:02.102 --> 00:03:07.274
And a function,
that will be run when this API request,

49
00:03:07.274 --> 00:03:10.477
this requested data is complete.

50
00:03:10.477 --> 00:03:14.919
So even though this does actually create
an execution context because inside

51
00:03:14.919 --> 00:03:17.855
a $.get is not a built in
function to Java script,

52
00:03:17.855 --> 00:03:21.636
inside of it it's using built in
functions that speak to API's.

53
00:03:21.636 --> 00:03:24.827
So we're just gonna treat
it the same way and

54
00:03:24.827 --> 00:03:29.658
rather than say it creates
an execution context we're gonna say,

55
00:03:29.658 --> 00:03:33.724
it speaks to, web browser,
feature, which feature?

56
00:03:33.724 --> 00:03:35.430
Well it speaks to another one.

57
00:03:35.430 --> 00:03:37.822
We can go on and
see a list of all these features on MDN.

58
00:03:37.822 --> 00:03:40.916
We've seen timer,

59
00:03:40.916 --> 00:03:46.561
this one is called xhrHttpRequest.

60
00:03:47.966 --> 00:03:49.211
&gt;&gt; Will Sentance: And what's it take in?

61
00:03:49.211 --> 00:03:54.005
Well, and remember this is not
a JavaScript function in the conventional

62
00:03:54.005 --> 00:03:57.346
sense, this is a browser feature,
a browser API.

63
00:03:57.346 --> 00:04:00.976
That sounds a bit confusing because it
itself is going to make a request to

64
00:04:00.976 --> 00:04:02.891
an API, but it's a browser feature.

65
00:04:02.891 --> 00:04:07.467
And it takes in reference for
our functionality and

66
00:04:07.467 --> 00:04:10.666
our URL that we're gonna speak to.

67
00:04:10.666 --> 00:04:17.035
And down here in web browser API land,

68
00:04:17.035 --> 00:04:22.416
we yes, create, look at this.

69
00:04:24.067 --> 00:04:28.128
&gt;&gt; Will Sentance: XhrHttpRequest
before we create a timer.

70
00:04:28.128 --> 00:04:30.911
Now we're gonna create an xhrHttpRequest.

71
00:04:30.911 --> 00:04:34.389
And associated with it is,

72
00:04:34.389 --> 00:04:39.841
our functionality which we call display.

73
00:04:39.841 --> 00:04:43.074
And we already clear,
it doesn't care it's called display,

74
00:04:43.074 --> 00:04:45.820
that's all in JavaScript,
that's just down here.

75
00:04:45.820 --> 00:04:47.687
And is it complete?

76
00:04:47.687 --> 00:04:52.482
Now before, our Timer completed instantly.

77
00:04:52.482 --> 00:04:55.781
This one ain't gonna complete instantly,
this one's gonna go do some work.

78
00:04:55.781 --> 00:04:59.208
So firstly, it's got to figure out
what is it going to be sending,

79
00:04:59.208 --> 00:05:00.445
where is it even going?

80
00:05:00.445 --> 00:05:01.801
Where is it even sending out information?

81
00:05:01.801 --> 00:05:06.738
Well, it's sending out to twitter.com.

82
00:05:06.738 --> 00:05:10.292
And we're not gonna get into exactly
how that API request works, but

83
00:05:10.292 --> 00:05:14.272
just now that this is a feature of
JavaScript, not of JavaScript I'm sorry,

84
00:05:14.272 --> 00:05:17.295
the feature of the browser Chrome or
Firefox, whatever.

85
00:05:17.295 --> 00:05:22.821
It's a feature of the browser, that allows
our web browser to speak to the Internet,

86
00:05:22.821 --> 00:05:27.535
and therefore to Twitter's server,
where this data is gonna be found.

87
00:05:27.535 --> 00:05:32.161
So it's gonna bundle up
a message to send off known

88
00:05:32.161 --> 00:05:35.585
as a HttpRequest, to get this data.

89
00:05:35.585 --> 00:05:42.093
It has a URL, it has a method,
a method which is I'm getting data,

90
00:05:42.093 --> 00:05:47.221
server expect me to be
wanting to receive some data.

91
00:05:47.221 --> 00:05:50.023
We know that because we used this get so

92
00:05:50.023 --> 00:05:54.589
in a way this get also makes it's way in,
to xhrHttpRequest.

93
00:05:54.589 --> 00:06:01.267
And we want to know exactly what
data we need while it's slash,

94
00:06:01.267 --> 00:06:05.563
we'll send /tweet/1, there we go.

95
00:06:05.563 --> 00:06:11.151
Those are the things, and this becomes

96
00:06:11.151 --> 00:06:16.399
a big old message that gets sent off to

97
00:06:16.399 --> 00:06:21.432
Twitters,
&gt;&gt; Will Sentance: Tweeter LLC so

98
00:06:21.432 --> 00:06:24.240
to speaks, servers.

99
00:06:24.240 --> 00:06:28.811
And at this point,
$.get has done its work.

100
00:06:28.811 --> 00:06:32.655
It's done its work and we are now back.

101
00:06:32.655 --> 00:06:34.980
It's done it's work in web browser,

102
00:06:34.980 --> 00:06:38.694
it's done it's job of setting
up this web browser feature.

103
00:06:38.694 --> 00:06:44.290
Web browser API features
in the background.

104
00:06:44.290 --> 00:06:46.178
And it's done it's work and

105
00:06:46.178 --> 00:06:51.458
it's gonna go back to the global execution
context where what do we encounter?

106
00:06:51.458 --> 00:06:54.270
Mohammad, what's the next line
in our global execution context?

107
00:06:54.270 --> 00:06:56.107
&gt;&gt; Mohammad: Log the me first.

108
00:06:56.107 --> 00:06:59.097
&gt;&gt; Will Sentance: Good, for
a man who's eyes were slowly falling shut,

109
00:06:59.097 --> 00:07:02.087
that was truly amazing stepping up there,
well done.

110
00:07:02.087 --> 00:07:05.241
Me first, there is it.

111
00:07:05.241 --> 00:07:08.452
And so me first happens at
maybe one millisecond, perfect.

112
00:07:08.452 --> 00:07:11.183
At one millisecond this occurs over here.

113
00:07:11.183 --> 00:07:15.925
Now, what's on our call
stack at this point?

114
00:07:15.925 --> 00:07:19.855
Well we're in global,

115
00:07:19.855 --> 00:07:24.179
we're always in global.

116
00:07:24.179 --> 00:07:30.318
We've done our console log me first,
me first,

117
00:07:30.318 --> 00:07:35.119
we've done our console log me first.

118
00:07:35.119 --> 00:07:36.258
There it is.

119
00:07:36.258 --> 00:07:43.029
Me first, but in the background
is our xhrHttpRequest complete?

120
00:07:43.029 --> 00:07:44.542
Artua, is it complete yet?

121
00:07:44.542 --> 00:07:46.434
&gt;&gt; Artua: It should be.

122
00:07:46.434 --> 00:07:47.700
&gt;&gt; Will Sentance: Would it
be complete immediately?

123
00:07:47.700 --> 00:07:48.434
&gt;&gt; Artua: No.

124
00:07:48.434 --> 00:07:50.256
&gt;&gt; Will Sentance: Yeah,
how long is it gonna take typically?

125
00:07:50.256 --> 00:07:53.529
Maybe a 100 milliseconds,
200 milliseconds, to go and

126
00:07:53.529 --> 00:07:56.381
get our data from Twitter's server and
bring it back.

127
00:07:56.381 --> 00:08:02.173
So, let's just say at 200 milliseconds,

128
00:08:02.173 --> 00:08:07.976
we get our data back
from Twitter's servers.

129
00:08:07.976 --> 00:08:13.099
And it comes back, and
it's passed into the form of

130
00:08:13.099 --> 00:08:18.222
an object with,
this is a little bit approximate,

131
00:08:18.222 --> 00:08:23.004
but an object with a property
post that says hi.

132
00:08:23.004 --> 00:08:26.213
Perfect, we've got our data
back at about 200 milliseconds.

133
00:08:26.213 --> 00:08:31.195
Now, at this point, Katie, what do you
think is going to happen, now that

134
00:08:31.195 --> 00:08:36.157
we've completed, we have now completed
&gt;&gt; Will Sentance: This

135
00:08:36.157 --> 00:08:39.530
background API request.

136
00:08:39.530 --> 00:08:43.821
Is background xhrHttpRequest is completed,
we've go back our data,

137
00:08:43.821 --> 00:08:47.966
we said go off to Twitter,
try get this data, this tweet, we did,

138
00:08:47.966 --> 00:08:52.987
back here in the data, what do we think is
gonna happen now, Katie, at this point?

139
00:08:52.987 --> 00:08:53.925
&gt;&gt; Katie: Push it the call stack.

140
00:08:53.925 --> 00:08:55.090
&gt;&gt; Will Sentance: Push it, being?

141
00:08:55.090 --> 00:08:57.030
&gt;&gt; Katie: The-
&gt;&gt; Will Sentance: What

142
00:08:57.030 --> 00:08:57.776
function now do we pass?

143
00:08:57.776 --> 00:08:58.429
&gt;&gt; Katie: Display.

144
00:08:58.429 --> 00:09:00.145
&gt;&gt; Will Sentance: Display function,
exactly, to call.

145
00:09:00.145 --> 00:09:02.135
And do we have anything
left to run in global?

146
00:09:02.135 --> 00:09:04.273
No, we don't, so no problem.

147
00:09:04.273 --> 00:09:07.865
Exactly, right on top, Shelby.

148
00:09:07.865 --> 00:09:09.931
I already said you were my favorite
person in the class, Shelby.

149
00:09:09.931 --> 00:09:12.855
Right on top we call our display function.

150
00:09:12.855 --> 00:09:15.569
We call our display function.

151
00:09:15.569 --> 00:09:18.245
Now we were waiting to run display.

152
00:09:18.245 --> 00:09:19.049
We wanted to defer.

153
00:09:19.049 --> 00:09:22.318
Why did we want to defer
display in the first place?

154
00:09:22.318 --> 00:09:23.616
&gt;&gt; Speaker 6: We were waiting-
&gt;&gt; Speaker 7: Take a while.

155
00:09:23.616 --> 00:09:24.423
&gt;&gt; Will Sentance: For
the data to come back.

156
00:09:24.423 --> 00:09:28.098
Yeah, so, yeah Shelby.

157
00:09:28.098 --> 00:09:30.583
&gt;&gt; Speaker 8: [LAUGH]
&gt;&gt; Will Sentance: So, exactly,

158
00:09:30.583 --> 00:09:32.967
exactly as you say.

159
00:09:32.967 --> 00:09:36.716
We were waiting for the display,
we were waiting for the data to come back.

160
00:09:36.716 --> 00:09:41.402
So this display functionality,
the way this

161
00:09:41.402 --> 00:09:46.337
xhrHttpRequest feature
of JavaScript works,

162
00:09:46.337 --> 00:09:52.995
is that this display functionality,
when the date comes back,

163
00:09:52.995 --> 00:09:59.180
it's going to bond itself to
this display functionality.

164
00:09:59.180 --> 00:10:03.665
So when we pushed display
to the core stat,

165
00:10:03.665 --> 00:10:10.656
its first parameter is gonna be
filled in with, what do you Katie?

166
00:10:10.656 --> 00:10:11.488
&gt;&gt; Katie: The data.

167
00:10:11.488 --> 00:10:13.360
&gt;&gt; Will Sentance: The data exactly.

168
00:10:13.360 --> 00:10:14.905
&gt;&gt; Katie: So post.

169
00:10:14.905 --> 00:10:18.665
&gt;&gt; Will Sentance: This object
here is going to fill in.

170
00:10:18.665 --> 00:10:22.833
I'm gonna calling the display,
right now it's just definition,

171
00:10:22.833 --> 00:10:27.802
I'm gonna call it this definition has a,
now this is not exactly how the function

172
00:10:27.802 --> 00:10:31.919
works but has a first argument
called data, something like that.

173
00:10:31.919 --> 00:10:36.502
That data, will be filled in with
the data that came back now.

174
00:10:36.502 --> 00:10:40.005
How do we know what whether it's
a first argument, the second argument,

175
00:10:40.005 --> 00:10:43.294
the first argument is actually error
argument, how do we even know?

176
00:10:43.294 --> 00:10:46.769
Documentation, documentation
of xhrHttpRequest or

177
00:10:46.769 --> 00:10:49.116
documentation.$.get will say.

178
00:10:49.116 --> 00:10:53.710
The first argument of the call back
function that gets executed when the data

179
00:10:53.710 --> 00:10:58.606
returns, will be populated on execution
with the data from the Twitter server.

180
00:10:58.606 --> 00:11:02.140
Or it will say, the first argument
actually is an error parameter,

181
00:11:02.140 --> 00:11:04.249
which would be filled in with any error.

182
00:11:04.249 --> 00:11:05.998
If an error comes back.

183
00:11:05.998 --> 00:11:11.010
When the display function ends up being
executed, the first argument will

184
00:11:11.010 --> 00:11:16.032
be filled with an error, the second
argument will be our data from the API.

185
00:11:16.032 --> 00:11:21.216
Different functionality, different
features will work in different ways.

186
00:11:21.216 --> 00:11:24.637
And that's not magic, it's just it's
out there ready for us to go and find,

187
00:11:24.637 --> 00:11:26.599
we have to go and
look at the documentation.

188
00:11:26.599 --> 00:11:30.156
So, Barb at this point Barb,

189
00:11:30.156 --> 00:11:36.355
we have completed our
Web Browser API feature.

190
00:11:36.355 --> 00:11:41.173
XhrHttpRequest is completed, we've got
our data back from Twitter server,

191
00:11:41.173 --> 00:11:45.267
we therefore now gonna pause our
call to display to our call stack.

192
00:11:45.267 --> 00:11:47.139
When we start executing a function Barb,

193
00:11:47.139 --> 00:11:49.181
executing a function we
go to brand new Barb?

194
00:11:49.181 --> 00:11:50.571
&gt;&gt; Barb: Execution context.

195
00:11:50.571 --> 00:11:52.572
&gt;&gt; Will Sentance: Excellent Barb, correct.

196
00:11:52.572 --> 00:11:57.689
And what is that execution context for,
but the call to display.

197
00:11:57.689 --> 00:12:02.180
There it is, and what's being passed,
what exact thing is being passed, Katie,

198
00:12:02.180 --> 00:12:02.899
to display?

199
00:12:02.899 --> 00:12:03.813
&gt;&gt; Katie: The object.

200
00:12:03.813 --> 00:12:09.909
&gt;&gt; Will Sentance: Exactly,
there it is with post is high.

201
00:12:09.909 --> 00:12:15.779
And we are creating a new execution
context with the functionality of display.

202
00:12:15.779 --> 00:12:17.963
Note, where are we calling display?

203
00:12:17.963 --> 00:12:20.511
Are we calling it inside $.get?

204
00:12:20.511 --> 00:12:21.640
No, we are definitely not.

205
00:12:21.640 --> 00:12:24.762
Easy confusion to think that somehow
display is being run inside.

206
00:12:24.762 --> 00:12:28.981
No, we did $.get, we moved, just like
I said, timeout, we moved straight on.

207
00:12:28.981 --> 00:12:33.206
All the $.get did was spin
up an xhrHttpRequest and

208
00:12:33.206 --> 00:12:38.016
pass a reference to the function
that we passed to $.get.

209
00:12:38.016 --> 00:12:42.439
Now again, $.get is actually
a JavaScript function, but

210
00:12:42.439 --> 00:12:46.689
inside of it it's behaving
just like a set timeout would,

211
00:12:46.689 --> 00:12:51.544
in that its only job is to spin out
a reference to create using the web

212
00:12:51.544 --> 00:12:56.604
browser feature XhrHttpRequest,
a request off to the Twitter API.

213
00:12:56.604 --> 00:12:58.646
And that's all happening here separately.

214
00:12:58.646 --> 00:13:02.756
And in JavaScript land,
we moved straight on, we did not wait for

215
00:13:02.756 --> 00:13:04.267
that data to come back.

216
00:13:04.267 --> 00:13:08.161
When we run console.log,
we're at about one millisecond.

217
00:13:08.161 --> 00:13:10.778
We are not 200 milliseconds later.

218
00:13:10.778 --> 00:13:15.653
But now, our data's come back,
we are at about 201 milliseconds,

219
00:13:15.653 --> 00:13:20.611
when we start calling the display
we're about 201 milliseconds when

220
00:13:20.611 --> 00:13:23.390
we start calling the display function.

221
00:13:23.390 --> 00:13:28.091
And we're executing it, so
Griffin what's the first thing inside our

222
00:13:28.091 --> 00:13:31.395
local memory of our display function,
Griffin?

223
00:13:31.395 --> 00:13:32.851
&gt;&gt; Griffin: That would be the data.

224
00:13:32.851 --> 00:13:35.420
&gt;&gt; Will Sentance: That would
be the data parameter.

225
00:13:35.420 --> 00:13:39.310
Which now has what value
associated with it?

226
00:13:39.310 --> 00:13:40.911
&gt;&gt; Griffin: That would be the post and
high.

227
00:13:40.911 --> 00:13:42.469
&gt;&gt; Will Sentance: So
the whole object, right?

228
00:13:42.469 --> 00:13:46.699
Yeah, with post is high.

229
00:13:46.699 --> 00:13:48.193
So when I hit the line,

230
00:13:48.193 --> 00:13:54.194
console.log(data.post) I do console look
for data, post, what do I console.log?

231
00:13:54.194 --> 00:13:54.826
&gt;&gt; Griffin: I.

232
00:13:54.826 --> 00:14:02.453
&gt;&gt; Will Sentance: I,
there it is at about 201 milliseconds.

233
00:14:02.453 --> 00:14:05.562
Me first was done at
about one millisecond.

234
00:14:05.562 --> 00:14:11.290
So again, going we've now used
a different background browser API.

235
00:14:11.290 --> 00:14:12.757
Now I'm not gonna give you all of them.

236
00:14:12.757 --> 00:14:16.916
Your job is to go and figure out,
they're all listed in MDN, but

237
00:14:16.916 --> 00:14:18.773
they all work this same way.

238
00:14:18.773 --> 00:14:23.068
As when you use a built-in function,
$.get,

239
00:14:23.068 --> 00:14:28.411
inside of it, uses a built-in
function that creates this,

240
00:14:28.411 --> 00:14:34.312
makes a reference, or
spins up a background web browser feature.

241
00:14:34.312 --> 00:14:39.587
In this case, it's the data request
feature, the httpRequest feature.

242
00:14:39.587 --> 00:14:40.970
It could be a timer.

243
00:14:40.970 --> 00:14:44.883
It could with a whole bunch of them,
a node is a whole bunch of them as well.

244
00:14:44.883 --> 00:14:48.289
They are all speaking to
a none JavaScript land,

245
00:14:48.289 --> 00:14:52.089
this is not JavaScript,
this is no JavaScript.

246
00:14:52.089 --> 00:14:56.493
Let's make sure we add in,

247
00:14:56.493 --> 00:15:02.622
our two other pieces of these puzzle.

248
00:15:02.622 --> 00:15:07.860
Actually what happens
between our completion and

249
00:15:07.860 --> 00:15:11.226
getting back on the call stack,

250
00:15:11.226 --> 00:15:17.335
well it's a display functionality
is queued up display,

251
00:15:17.335 --> 00:15:23.213
is queued up with its associated Data,
that came back.

252
00:15:23.213 --> 00:15:25.159
There's our associated data.

253
00:15:27.959 --> 00:15:30.947
&gt;&gt; Will Sentance: Well,
this is associated data and

254
00:15:30.947 --> 00:15:34.560
then we checked was the call stack clear?

255
00:15:34.560 --> 00:15:36.153
Let just go back a second.

256
00:15:36.153 --> 00:15:38.167
We checked was the call stack clear.

257
00:15:38.167 --> 00:15:41.322
We said, hold on,
is there something in the call back queue?

258
00:15:41.322 --> 00:15:43.058
Is the call stack clear?

259
00:15:43.058 --> 00:15:47.688
That's known as the event loop, that is
not literally I try to like desperately

260
00:15:47.688 --> 00:15:51.076
calling event loop,
because it's literally looping and

261
00:15:51.076 --> 00:15:55.496
checking but we can think of it in under
deep down the hood is not looping, but

262
00:15:55.496 --> 00:15:58.639
it's basically checking,
is the call stack clear?

263
00:15:58.639 --> 00:15:59.437
Is it clear?

264
00:15:59.437 --> 00:16:01.220
Every millisecond, is it checking?

265
00:16:01.220 --> 00:16:01.953
Is it clear?

266
00:16:01.953 --> 00:16:02.573
Is it clear?

267
00:16:02.573 --> 00:16:03.274
Is it clear?

268
00:16:03.274 --> 00:16:04.333
Is it, it's clear.

269
00:16:04.333 --> 00:16:06.596
Well, of course it's clear cuz
it's 200 milliseconds later, and

270
00:16:06.596 --> 00:16:07.735
there's nothing else in our code.

271
00:16:07.735 --> 00:16:09.801
Console log finished at one millisecond.

272
00:16:09.801 --> 00:16:10.850
So we're done.

273
00:16:10.850 --> 00:16:15.783
So it's definitely clear, and
instantly we can dequeue,

274
00:16:15.783 --> 00:16:19.149
display, and push it to the call stack.

275
00:16:19.149 --> 00:16:24.230
There it is display push to the call

276
00:16:24.230 --> 00:16:29.838
stack at about 201 milliseconds,

277
00:16:29.838 --> 00:16:34.221
201 milliseconds with our

278
00:16:34.221 --> 00:16:39.142
data that came back from the API.

279
00:16:39.142 --> 00:16:46.381
Those are all our parts, and look,
we took this display functionality,

280
00:16:46.381 --> 00:16:50.700
parsed to the callback queue, and then it,

281
00:16:50.700 --> 00:16:55.630
once the event loop said good,
we're good to go.

282
00:16:55.630 --> 00:17:00.079
Dequeued, display and added it,
pushed it to the call stack.

283
00:17:00.079 --> 00:17:03.636
Where it then got executed
just as we thought through.

284
00:17:03.636 --> 00:17:06.128
You can see how in this simple examples,

285
00:17:06.128 --> 00:17:09.728
this portion here doesn't
really have any consequence.

286
00:17:09.728 --> 00:17:14.749
But for more complex examples, where we
have things blocking in the main thread or

287
00:17:14.749 --> 00:17:18.971
where we have multiple request,
then this becomes very relevant and

288
00:17:18.971 --> 00:17:24.105
as each request completes, it's gonna
queue up the relevant call back function.

289
00:17:24.105 --> 00:17:27.913
That's been associated with that
particular web browser API.

290
00:17:27.913 --> 00:17:32.140
So we can spin up as many as we want,
we can have 30 xhrHttpRequests all going

291
00:17:32.140 --> 00:17:36.628
here as each one of them completes, there
function in order of their completion,

292
00:17:36.628 --> 00:17:39.905
it's going to be passed to
the call back queue, queued up.

293
00:17:39.905 --> 00:17:41.973
Not in order of when these
requests were made, but

294
00:17:41.973 --> 00:17:43.460
just in order of their completion.

