WEBVTT

1
00:00:00.000 --> 00:00:04.210
Line one is declaring
a function user creator.

2
00:00:04.210 --> 00:00:06.629
I imagine, is that right?

3
00:00:06.629 --> 00:00:07.155
&gt;&gt; Yes.

4
00:00:07.155 --> 00:00:09.575
&gt;&gt; Okay who shall I call upon?

5
00:00:09.575 --> 00:00:11.785
Bob do the honors for us.

6
00:00:11.785 --> 00:00:13.995
Line one what's it say?

7
00:00:13.995 --> 00:00:17.152
&gt;&gt; Declare user, creator function.

8
00:00:17.152 --> 00:00:17.888
&gt;&gt; Great.

9
00:00:17.888 --> 00:00:22.137
Store it as the whole Function definition.

10
00:00:22.137 --> 00:00:23.962
Thank you, Bob.

11
00:00:23.962 --> 00:00:25.057
Line two.

12
00:00:25.057 --> 00:00:29.931
Muhammad.&gt;&gt; Creates a variable called user

13
00:00:29.931 --> 00:00:34.561
function store.&gt;&gt; User function store.

14
00:00:34.561 --> 00:00:39.820
Yup, and
it is?&gt;&gt; Has a value of two functions.

15
00:00:39.820 --> 00:00:40.868
Well, what is it?

16
00:00:40.868 --> 00:00:41.588
&gt;&gt; A variable.

17
00:00:41.588 --> 00:00:42.112
&gt;&gt; Object.

18
00:00:42.112 --> 00:00:43.749
&gt;&gt; It's an object, isn't it?

19
00:00:43.749 --> 00:00:44.992
&gt;&gt; Yep?
&gt;&gt; Do you see that?

20
00:00:44.992 --> 00:00:47.739
Right, it's not got
the value of two functions,

21
00:00:47.739 --> 00:00:49.571
it's got the value of an object.

22
00:00:49.571 --> 00:00:52.384
Do you see you've got these
curly braces with two?

23
00:00:52.384 --> 00:00:56.247
Yeah, they're not properties of name,
score, name3, score2,

24
00:00:56.247 --> 00:00:58.537
but these are still just known as object.

25
00:00:58.537 --> 00:01:02.090
But it's got two functions stored in it,
does that make sense?

26
00:01:02.090 --> 00:01:05.676
What's the first property
in this object Muhammad?

27
00:01:05.676 --> 00:01:07.667
&gt;&gt; In this object, increment.

28
00:01:07.667 --> 00:01:10.535
&gt;&gt; Increment, that's our first property.

29
00:01:10.535 --> 00:01:12.286
There it is, increment.

30
00:01:12.286 --> 00:01:14.517
And increment is what Muhammad?

31
00:01:14.517 --> 00:01:15.711
&gt;&gt; It is a function.

32
00:01:15.711 --> 00:01:16.985
&gt;&gt; It's a function.

33
00:01:16.985 --> 00:01:17.622
Spot on.

34
00:01:17.622 --> 00:01:18.497
There it is.

35
00:01:18.497 --> 00:01:22.970
What's our second property
in this object Andrea?

36
00:01:22.970 --> 00:01:25.630
[INAUDIBLE] it's gonna be new user name.

37
00:01:25.630 --> 00:01:26.333
Or sorry.

38
00:01:26.333 --> 00:01:26.833
&gt;&gt; What?

39
00:01:27.977 --> 00:01:28.524
&gt;&gt; Sorry.

40
00:01:28.524 --> 00:01:31.577
&gt;&gt; So
we've got user function stores an object.

41
00:01:31.577 --> 00:01:34.939
&gt;&gt; It's gonna be-
&gt;&gt; With increment as an object on it.

42
00:01:34.939 --> 00:01:38.458
&gt;&gt; It's gonna be
&gt;&gt; I'm sorry, a function on it.

43
00:01:38.458 --> 00:01:39.552
Login, got it.

44
00:01:39.552 --> 00:01:41.860
&gt;&gt; Yep.
&gt;&gt; Login is the second property

45
00:01:41.860 --> 00:01:43.739
&gt;&gt; So do you see we've got user function

46
00:01:43.739 --> 00:01:47.497
store with increment is the first
property, and log in as the second one.

47
00:01:47.497 --> 00:01:51.253
It's a whole function we put it all in
one line, we can put it on two lines.

48
00:01:51.253 --> 00:01:54.831
But it's that's the whole function
definition stored under log in.

49
00:01:54.831 --> 00:01:57.196
Ok that's the whole
functionality of log in.

50
00:01:57.196 --> 00:01:58.710
Does that make sense Andrea?

51
00:01:58.710 --> 00:02:01.142
Great.
Next line Andrea.

52
00:02:01.142 --> 00:02:06.194
&gt;&gt; Then we are going to go to,
&gt;&gt; Left hand side first.

53
00:02:06.194 --> 00:02:07.796
&gt;&gt; Declere user.

54
00:02:07.796 --> 00:02:14.326
&gt;&gt; Declare user 1, good, and
what is going to be assigned to it?

55
00:02:14.326 --> 00:02:15.559
Who knows?

56
00:02:15.559 --> 00:02:17.560
It's going to be.

57
00:02:17.560 --> 00:02:20.784
The return value of calling user creator,
the returned out,

58
00:02:20.784 --> 00:02:24.442
return whatever comes out,
do we have an instinct what that might be?

59
00:02:24.442 --> 00:02:27.418
Where do think it's gonna be,
Mohammed, some sort of?

60
00:02:27.418 --> 00:02:29.960
&gt;&gt; Object.
&gt;&gt; Yeah, some sort of object, exactly,

61
00:02:29.960 --> 00:02:33.804
that's what we think but we don't know
that yet, right now it's gonna be

62
00:02:33.804 --> 00:02:38.300
undefined, we don't actually know what's
gonna be stored there, so we have to go.

63
00:02:38.300 --> 00:02:41.284
&gt;&gt; And call userCreator.

64
00:02:41.284 --> 00:02:46.505
When we call userCreator, we create a new

65
00:02:46.505 --> 00:02:52.622
execution context for
the call to userCreator.

66
00:02:52.622 --> 00:02:57.693
Here it is, our new execution context.

67
00:02:57.693 --> 00:02:59.350
There it is.

68
00:03:00.795 --> 00:03:05.126
Okay Let's make it bigger.

69
00:03:06.571 --> 00:03:09.098
It's slightly bigger.

70
00:03:10.543 --> 00:03:15.234
Let's make it wider, that's fair, wider.

71
00:03:15.234 --> 00:03:17.780
Not bigger, but wider.

72
00:03:19.462 --> 00:03:23.525
There's our execution context.

73
00:03:23.525 --> 00:03:29.408
We push the call to
userCreator to the call stack.

74
00:03:29.408 --> 00:03:33.471
userCreator ("Will", 3).

75
00:03:33.471 --> 00:03:37.270
Everyone see me grab the board?

76
00:03:37.270 --> 00:03:39.080
Stabilizing myself.

77
00:03:39.080 --> 00:03:43.459
No, it's because the board
shakes when I write on it.

78
00:03:43.459 --> 00:03:45.839
Calling user creator in I go.

79
00:03:45.839 --> 00:03:51.648
What's the first thing inside of,
these pens get knocked down so fast.

80
00:03:51.648 --> 00:03:57.390
What's the first thing inside of
there Mohammed, inside of the call.

81
00:03:57.390 --> 00:03:59.190
To user creator.

82
00:03:59.190 --> 00:04:00.390
Mohammed?

83
00:04:00.390 --> 00:04:03.151
&gt;&gt; We pass in the parameters?

84
00:04:03.151 --> 00:04:04.231
&gt;&gt; Perfect.

85
00:04:04.231 --> 00:04:10.112
So into our local memory first
goes what parameter first?

86
00:04:10.112 --> 00:04:12.873
&gt;&gt; The parameter label name?

87
00:04:12.873 --> 00:04:13.593
&gt;&gt; Name.

88
00:04:13.593 --> 00:04:16.353
And it gets assigned what?

89
00:04:16.353 --> 00:04:17.913
&gt;&gt; Value of Will?

90
00:04:17.913 --> 00:04:18.650
&gt;&gt; Will.

91
00:04:18.650 --> 00:04:21.722
That's perfect and then score is 3.

92
00:04:21.722 --> 00:04:25.466
That means everywhere
inside a user creator,

93
00:04:25.466 --> 00:04:30.938
now name will be Will and
score will be 3 wherever you reference it.

94
00:04:30.938 --> 00:04:34.298
Sheldon, what's the next line of code?

95
00:04:34.298 --> 00:04:40.260
What's the left-hand side of the next
line of code tell us to do Sheldon?

96
00:04:40.260 --> 00:04:43.050
Declare a new variable of new user.

97
00:04:43.050 --> 00:04:45.375
&gt;&gt; Yeah, a new user, exactly.

98
00:04:45.375 --> 00:04:48.816
&gt;&gt; As a user function store object.

99
00:04:48.816 --> 00:04:51.234
&gt;&gt; Hmm, that seems reasonable.

100
00:04:51.234 --> 00:04:53.094
What do we say?

101
00:04:53.094 --> 00:04:58.116
Whatever we parse into object.create,
what would it create?

102
00:04:58.116 --> 00:04:58.953
Griffin?

103
00:04:58.953 --> 00:05:01.650
&gt;&gt; That would be a, it would create.

104
00:05:01.650 --> 00:05:02.767
A empty.

105
00:05:02.767 --> 00:05:04.584
&gt;&gt; Empty object.

106
00:05:04.584 --> 00:05:09.616
Whatever I parse into object.create this

107
00:05:09.616 --> 00:05:14.089
line here saying, object.create.

108
00:05:14.089 --> 00:05:18.981
And then parsing in userFunctionStore.

109
00:05:18.981 --> 00:05:25.633
This user, all this does All this
function does is, create an empty object.

110
00:05:25.633 --> 00:05:31.272
We are going to see what this special user
function store thing does in a second.

111
00:05:31.272 --> 00:05:34.552
For now,
all it does is creates an empty user,

112
00:05:34.552 --> 00:05:37.749
empty object,
we are going to call new user.

113
00:05:37.749 --> 00:05:39.936
Sorry, not a new user object.

114
00:05:39.936 --> 00:05:41.230
An empty object.

115
00:05:41.230 --> 00:05:47.596
That we're gonna label newUser,
that's all it does.

116
00:05:47.596 --> 00:05:50.034
That's all it does.

117
00:05:50.034 --> 00:05:53.692
It does something else as well.

118
00:05:53.692 --> 00:05:57.890
Because when would be a smart time for

119
00:05:57.890 --> 00:06:02.114
us to make the bond To
this store of functions.

120
00:06:02.114 --> 00:06:06.300
Remember, our ultimate goal
is we're gonna do this.

121
00:06:06.300 --> 00:06:08.667
Write, user1.increment.

122
00:06:09.760 --> 00:06:12.763
And even if we don't find, on user1,

123
00:06:12.763 --> 00:06:16.949
an increment function,
still be somehow able to go and

124
00:06:16.949 --> 00:06:21.691
look In user function store, find
increment, and run that functionality.

125
00:06:21.691 --> 00:06:26.336
Andrew, what would be a good time to make
a special bond in this user one object

126
00:06:26.336 --> 00:06:28.552
to this shared user function store.

127
00:06:28.552 --> 00:06:31.553
When would be a good time to do that,
do you think?

128
00:06:31.553 --> 00:06:33.054
&gt;&gt; When you intialized it.

129
00:06:33.054 --> 00:06:35.485
&gt;&gt; When we initially defined that object.

130
00:06:35.485 --> 00:06:39.966
Before we return, remember this object
Is going to be returned out and

131
00:06:39.966 --> 00:06:41.749
stored in what variable?

132
00:06:41.749 --> 00:06:42.479
Griffin?

133
00:06:42.479 --> 00:06:44.828
&gt;&gt; It would be stored in the user one?

134
00:06:44.828 --> 00:06:46.287
&gt;&gt; User one, exactly.

135
00:06:46.287 --> 00:06:48.880
That's where it's gonna be stored.

136
00:06:48.880 --> 00:06:53.092
So this object we're giving birth
to in here called new user,

137
00:06:53.092 --> 00:06:55.846
is going to end up being called user one.

138
00:06:55.846 --> 00:06:59.160
We're gonna end up [INAUDIBLE]
increment on it But

139
00:06:59.160 --> 00:07:03.157
it's not gonna have hopefully directly
on it any increment function.

140
00:07:03.157 --> 00:07:06.021
Do we see if we add one, or
we're not gonna add one?

141
00:07:06.021 --> 00:07:09.216
But we know that we want to be
able to still run increment.

142
00:07:09.216 --> 00:07:13.276
So somehow, when we hit user one to
increment, we wanna be able to look at

143
00:07:13.276 --> 00:07:17.605
user one not find increment, and somehow
look up this userfunction store and

144
00:07:17.605 --> 00:07:22.980
find an increment Meaning we've got to
somehow make a bond between user one,

145
00:07:22.980 --> 00:07:27.157
that is new user, and
somehow this user function store.

146
00:07:27.157 --> 00:07:31.769
Well it turns out that bond is
made using this object.create,

147
00:07:31.769 --> 00:07:33.684
object creation format.

148
00:07:33.684 --> 00:07:38.817
We're gonna talk about where this
special bond is hidden in a moment.

149
00:07:38.817 --> 00:07:45.357
For now, Just know that when I use
object.create, I'm creating the object.

150
00:07:45.357 --> 00:07:47.427
But I do something else.

151
00:07:47.427 --> 00:07:54.230
Whatever I pass in to my parameters on
object.create I'm gonna have on that empty

152
00:07:54.230 --> 00:08:01.160
object somehow a special bond to the thing
I passed in that used the function store.

153
00:08:01.160 --> 00:08:04.221
Okay, we don't know how that happens yet,

154
00:08:04.221 --> 00:08:08.442
we just know somehow it's gonna
happen in that user object.

155
00:08:08.442 --> 00:08:10.262
So let's now keep going.

156
00:08:10.262 --> 00:08:14.152
We've now finished the line,
we use object.create.

157
00:08:14.152 --> 00:08:16.303
The new user became an object.

158
00:08:16.303 --> 00:08:20.060
This became an object but
somehow this special bond.

159
00:08:20.060 --> 00:08:21.488
To user function store.

160
00:08:21.488 --> 00:08:22.916
This is the same object.

161
00:08:22.916 --> 00:08:24.684
We just wrote it on both sides.

162
00:08:24.684 --> 00:08:27.676
Somehow I got a special bond
to user function store.

163
00:08:27.676 --> 00:08:29.716
All right, Katie, keep me going.

164
00:08:29.716 --> 00:08:33.184
Now we've finished with the line
that created the object and

165
00:08:33.184 --> 00:08:35.904
made this special bond
to user function store.

166
00:08:35.904 --> 00:08:37.604
What's our next line Katie?

167
00:08:37.604 --> 00:08:42.601
&gt;&gt; We are going to assign The name
input Will to newusers property name.

168
00:08:42.601 --> 00:08:43.883
&gt;&gt; Very nice, yes.

169
00:08:43.883 --> 00:08:47.557
&gt;&gt; And then create a new
property score and assign 3.

170
00:08:47.557 --> 00:08:50.805
&gt;&gt; Which is the score parameter,
or argument.

171
00:08:50.805 --> 00:08:52.172
Yes, there it is.

172
00:08:52.172 --> 00:08:54.906
And now what're we gonna do, Katie?

173
00:08:54.906 --> 00:08:57.385
&gt;&gt; We're gonna return that object.

174
00:08:57.385 --> 00:08:59.210
&gt;&gt; Return that object out.

175
00:08:59.210 --> 00:09:01.328
&gt;&gt; Just sign it.

176
00:09:01.328 --> 00:09:05.566
&gt;&gt; And what's in that object?

177
00:09:05.566 --> 00:09:10.686
Nothing but name Will, score 3.

178
00:09:10.686 --> 00:09:14.040
Name Will, score 3.

179
00:09:14.040 --> 00:09:17.396
There's the object,

180
00:09:17.396 --> 00:09:21.989
and still Because we don't
lose bonds after we make them.

181
00:09:21.989 --> 00:09:24.926
We never lose bonds after
we make them still.

182
00:09:24.926 --> 00:09:27.089
That we return down that object.

183
00:09:27.089 --> 00:09:28.556
Stored it in user one.

184
00:09:28.556 --> 00:09:30.025
There's the object.

185
00:09:30.025 --> 00:09:31.494
There's the object.

186
00:09:31.494 --> 00:09:32.963
There's the object.

187
00:09:32.963 --> 00:09:35.745
We don't return bonds
after we make them so

188
00:09:35.745 --> 00:09:41.525
it's still got it's still hidden
somehow bond Up to user function store.

189
00:09:41.525 --> 00:09:49.430
Okay, we're gonna talk in a moment how
has this been possible, how is this done?

190
00:09:49.430 --> 00:09:53.327
But for now, let's try and run, well,

191
00:09:53.327 --> 00:09:59.200
actually it's very important that I think,
we do one more.

192
00:09:59.200 --> 00:09:59.876
Of these.

193
00:09:59.876 --> 00:10:01.077
Nah, it's fine.

194
00:10:01.077 --> 00:10:05.133
Let's try and run user1.increment,
our fundamental goal.

195
00:10:05.133 --> 00:10:08.886
Can I be clear, does user 1
have an increment method on it?

196
00:10:08.886 --> 00:10:09.787
It doesn't.

197
00:10:09.787 --> 00:10:13.166
It's not on there, so
this should fail, in theory.

198
00:10:13.166 --> 00:10:17.400
Of course it doesn't because
we've done something really cool.

199
00:10:17.400 --> 00:10:20.515
So we're just going to skip for
now, creating a brand.

200
00:10:20.515 --> 00:10:24.821
If we brand the next line, User two is
the call to user creator with user five.

201
00:10:24.821 --> 00:10:29.132
We do a brand new excursion context inside
of which we create a brand new object

202
00:10:29.132 --> 00:10:32.249
which itself would have a bond
of user function store and

203
00:10:32.249 --> 00:10:34.569
would not have an increment method on it.

204
00:10:34.569 --> 00:10:37.600
We return that object out and
return it to method two.

205
00:10:37.600 --> 00:10:38.140
Okay.

206
00:10:38.140 --> 00:10:43.273
We're gonna skip that line for
now, and we're gonna encounter our

207
00:10:43.273 --> 00:10:48.315
all important line that is a measure
of are we doing good work here.

208
00:10:48.315 --> 00:10:50.385
Can we do this, all right.

209
00:10:50.385 --> 00:10:51.376
Big moment.

210
00:10:51.376 --> 00:10:52.546
Can we do this?

211
00:10:52.546 --> 00:10:54.617
What do I do first Lindsey?

212
00:10:54.617 --> 00:10:55.517
I look for.

213
00:10:55.517 --> 00:10:56.779
&gt;&gt; user1 object.

214
00:10:56.779 --> 00:10:58.250
&gt;&gt; And what do I find?

215
00:10:58.250 --> 00:10:59.095
Time it.

216
00:10:59.095 --> 00:11:02.371
&gt;&gt; Yes, and then I look for increment.

217
00:11:02.371 --> 00:11:04.486
&gt;&gt; The method increment?

218
00:11:04.486 --> 00:11:07.444
&gt;&gt; Yeah, do I find it on the object?

219
00:11:07.444 --> 00:11:09.344
&gt;&gt; No.
&gt;&gt; No, do I panic?

220
00:11:09.344 --> 00:11:11.668
&gt;&gt; No.
&gt;&gt; No, I don't panic.

221
00:11:11.668 --> 00:11:14.310
Where do I look, Lenzy next.

222
00:11:14.310 --> 00:11:16.001
&gt;&gt; The special bond.

223
00:11:16.001 --> 00:11:20.727
&gt;&gt; All the special bond where I
find Use the function store and

224
00:11:20.727 --> 00:11:23.651
what property do I final it,
&gt;&gt; Increment.

225
00:11:23.651 --> 00:11:27.493
&gt;&gt; Increment and
it's got some functionality to run, so

226
00:11:27.493 --> 00:11:32.505
I create an execution context to run
that functionality, there it is,

227
00:11:32.505 --> 00:11:37.433
I create an execution context to
run that functionality, all right.

228
00:11:37.433 --> 00:11:40.800
I add user1.increment to my call stack,
okay

229
00:11:40.800 --> 00:11:41.935
&gt;&gt; Here we go.

230
00:11:41.935 --> 00:11:45.343
I'm calling user1.increment.

231
00:11:45.343 --> 00:11:51.132
What's the code say for
the increment function, Lindsay?

232
00:11:51.132 --> 00:11:54.989
Do you see what the body of the code says?

233
00:11:54.989 --> 00:11:58.168
&gt;&gt; Yes, it says this.score ++.

234
00:11:58.168 --> 00:11:58.870
Okay.

235
00:11:58.870 --> 00:12:03.956
So now we're going to be introduced to
a special key word in JavaScript and

236
00:12:03.956 --> 00:12:07.156
in all [INAUDIBLE] languages
in general [COUGH].

237
00:12:07.156 --> 00:12:12.324
This increment function, is it only
going to be used by the User 1 object?

238
00:12:12.324 --> 00:12:17.760
It could be used by all of the objects
we return, user 500, user 1000.

239
00:12:17.760 --> 00:12:22.621
So how are we gonna make sure when
we run it that we're referring

240
00:12:22.621 --> 00:12:24.272
to the right object?

241
00:12:24.272 --> 00:12:29.776
Cuz we could call it in a moment on
instead use a 5001.increment and

242
00:12:29.776 --> 00:12:35.372
I want to make sure that the functionality
refers to the use of 5001.

243
00:12:35.372 --> 00:12:40.270
I can't right use the one,
user 5001 inside of increments

244
00:12:40.270 --> 00:12:41.188
&gt;&gt; Like I used to.

245
00:12:41.188 --> 00:12:44.016
So, what does JavaScript
help me out by doing?

246
00:12:44.016 --> 00:12:45.712
&gt;&gt; This.
&gt;&gt; The keyword of this.

247
00:12:45.712 --> 00:12:48.328
And the keyword this
is like a placeholder.

248
00:12:48.328 --> 00:12:51.722
And actually,
whenever I create an execution context,

249
00:12:51.722 --> 00:12:53.419
we don't usually say this.

250
00:12:53.419 --> 00:12:55.610
I fill in my arguments here, right?

251
00:12:55.610 --> 00:13:00.845
I fill in any variables and functions
I annoumce, and JavaScript always but

252
00:13:00.845 --> 00:13:05.404
most of the time it's not
that interesting for us,

253
00:13:05.404 --> 00:13:08.796
always also assign the value of this.

254
00:13:08.796 --> 00:13:15.476
And our basic fundamental rule is that
this will refer inside its execution

255
00:13:15.476 --> 00:13:21.312
context to whatever Is the left of the dot
where that function is being called upon.

256
00:13:21.312 --> 00:13:24.187
So what is to the left of the dot here,
Ketty?

257
00:13:24.187 --> 00:13:24.792
&gt;&gt; User1.

258
00:13:24.792 --> 00:13:27.062
&gt;&gt; So what's gonna be filled in this.

259
00:13:27.062 --> 00:13:28.196
&gt;.
The user1.

260
00:13:28.196 --> 00:13:28.877
&gt;&gt; Exactly.

261
00:13:28.877 --> 00:13:30.996
And so we will actually see here,

262
00:13:30.996 --> 00:13:34.707
this would have essentially
become user1.score++.

263
00:13:34.707 --> 00:13:37.540
Now, where would we look for user1 first?

264
00:13:37.540 --> 00:13:39.824
[INAUDIBLE]
&gt;&gt; Yeah, it's not there, right?

265
00:13:39.824 --> 00:13:41.676
There's only this, it's empty.

266
00:13:41.676 --> 00:13:42.971
So where do we look next?

267
00:13:42.971 --> 00:13:44.883
&gt;&gt; Global.
&gt;&gt; Do we panic and not find it?

268
00:13:44.883 --> 00:13:45.870
No, it's there.

269
00:13:45.870 --> 00:13:47.966
We find the score, what do we do with it?

270
00:13:47.966 --> 00:13:48.644
&gt;&gt; Connect it.

271
00:13:48.644 --> 00:13:50.496
&gt;&gt; Shit, we've achieved that goal.

272
00:13:50.496 --> 00:13:53.150
Although increment was not
on the user one object.

273
00:13:53.150 --> 00:13:56.340
We've achieved our goal of
running user one dot increment.

274
00:13:56.340 --> 00:14:00.280
Our functionality being available
right there on our object that

275
00:14:00.280 --> 00:14:01.568
has the data we need.

276
00:14:01.568 --> 00:14:04.143
I can now pass it to
user 1 anywhere I want.

277
00:14:04.143 --> 00:14:05.862
No problem, because look.

278
00:14:05.862 --> 00:14:10.016
Even though it's not on user 1,
increment was somehow available.

279
00:14:10.016 --> 00:14:13.167
All right,
let's talk about how it was available.

280
00:14:13.167 --> 00:14:15.602
Let's talk about how it was available.

281
00:14:15.602 --> 00:14:16.930
Well, it turns out.

282
00:14:16.930 --> 00:14:19.703
When I use object create and
use a function store,

283
00:14:19.703 --> 00:14:21.353
yes I create an empty object.

284
00:14:21.353 --> 00:14:25.842
Yes it's an empty object, it was empty
right until we filled in the properties.

285
00:14:25.842 --> 00:14:28.086
That leaves me with an empty object, but

286
00:14:28.086 --> 00:14:30.661
actually it does one
thing behind the scenes.

287
00:14:30.661 --> 00:14:35.086
JavaScript needs a way of knowing where
to go look for this user function store.

288
00:14:35.086 --> 00:14:37.040
It has a special hidden property.

289
00:14:37.040 --> 00:14:40.776
Now, it's not as hidden as square bracket,
square bracket,

290
00:14:40.776 --> 00:14:43.736
scope, square bracket,
you remember that one?

291
00:14:43.736 --> 00:14:45.568
Which you just can't access.

292
00:14:45.568 --> 00:14:47.893
This is one you could actually access.

293
00:14:47.893 --> 00:14:52.047
You can look in Chrome Dev Tools and
press a down arrow and see it there.

294
00:14:52.047 --> 00:14:54.935
But it has a hidden property,
which is this guy,

295
00:14:54.935 --> 00:14:59.156
__proto__ That is going to have,
in here, a reference to,

296
00:14:59.156 --> 00:15:03.380
not a copy obviously, but
a reference to user function store.

297
00:15:03.380 --> 00:15:08.802
It's actually through this, when I create
new user, using object dot create,

298
00:15:08.802 --> 00:15:12.548
and pass user function sort,
yes, I get empty object.

299
00:15:12.548 --> 00:15:13.984
This bit's hidden.

300
00:15:13.984 --> 00:15:18.757
If I were to console log new user At
this point I will see an empty object,

301
00:15:18.757 --> 00:15:23.072
definitely, but if I were to then click,
the little down arrow,

302
00:15:23.072 --> 00:15:27.622
I'd see, anyone ever clicked that
down arrow on the Chrome Dev Tools

303
00:15:27.622 --> 00:15:30.681
where you get to see
these random properties?

304
00:15:30.681 --> 00:15:31.858
Well one of them,

305
00:15:31.858 --> 00:15:37.981
_proto_ we can call it _proto_ like double
underscore That sounded ridiculous.

306
00:15:37.981 --> 00:15:42.651
School, it's linking to whatever was
parsed when we created this object

307
00:15:42.651 --> 00:15:44.611
through the object.create.

308
00:15:44.611 --> 00:15:45.740
What was parsed?

309
00:15:45.740 --> 00:15:47.171
User function store.

310
00:15:47.171 --> 00:15:52.362
So we get a link, and so when I return out
the object, this object, this guy here.

311
00:15:52.362 --> 00:15:56.995
When I return it out and
store it in user one Yes, it's user one.

312
00:15:56.995 --> 00:16:02.686
Just had this two properties but
it also has a special bond through

313
00:16:02.686 --> 00:16:09.102
underscore proto underscore that is
a reference to user function store.

314
00:16:09.102 --> 00:16:15.914
There it is,
a reference to user function store Where,

315
00:16:15.914 --> 00:16:22.479
what do you know,
there's the increment method on it.

316
00:16:22.479 --> 00:16:29.882
This reference, this bond is
known as a prototype chain bond.

317
00:16:29.882 --> 00:16:31.977
We are setting and

318
00:16:31.977 --> 00:16:36.810
I hate this phrase I hate the way we
phrase this, it's not helpful to me.

319
00:16:36.810 --> 00:16:40.600
But because it's actually scored,
an underscore, proto-underscore.

320
00:16:40.600 --> 00:16:44.389
And often, people still say,
you've seen a property-dot-prototype,

321
00:16:44.389 --> 00:16:45.749
this is not the same thing.

322
00:16:45.749 --> 00:16:49.357
We're doing to see what that is in
a moment, that's coming in a second.

323
00:16:49.357 --> 00:16:52.789
But people often say,
user1's prototype is user function store.

324
00:16:52.789 --> 00:16:56.371
I don't love that way of describing it But
certainly user ones,

325
00:16:56.371 --> 00:16:58.461
technically this is prototype.

326
00:16:58.461 --> 00:17:03.013
But we access it or it's stored,
it's referenced under this _proto,

327
00:17:03.013 --> 00:17:06.968
if you've ever seen a .prototype
property that's not this.

328
00:17:06.968 --> 00:17:09.131
We're gonna see that in a second.

329
00:17:09.131 --> 00:17:13.310
It's referenced _proto_ is the bond
to use the function store.

330
00:17:13.310 --> 00:17:16.952
So Griffin When I ran user1.increment,
and I went and

331
00:17:16.952 --> 00:17:20.825
signed the line of code I
thought was this.school.++.

332
00:17:20.825 --> 00:17:21.677
There it is.

333
00:17:21.677 --> 00:17:23.458
This was the user 1 right?

334
00:17:23.458 --> 00:17:26.480
So I'm actually doing user1.school.

335
00:17:26.480 --> 00:17:29.732
When I ran user1.increment,
where did I look.

336
00:17:29.732 --> 00:17:31.590
Forgot what I was gonna say.

337
00:17:31.590 --> 00:17:35.560
W,hen I ran user1.increment,
what did I look for first?

338
00:17:35.560 --> 00:17:37.135
You looked for user one.

339
00:17:37.135 --> 00:17:38.485
&gt;&gt; User one, exactly.

340
00:17:38.485 --> 00:17:41.335
I went off to my global memory,
did I find it?

341
00:17:41.335 --> 00:17:43.735
&gt;&gt; Yes.
&gt;&gt; And then it says dot increment.

342
00:17:43.735 --> 00:17:46.135
Did I find dot increment on my object?

343
00:17:46.135 --> 00:17:47.035
&gt;&gt; Nope.
&gt;&gt; No, so

344
00:17:47.035 --> 00:17:50.935
what did job descript interpret
do with this runtime moment?

345
00:17:50.935 --> 00:17:52.885
&gt;&gt; Check to see if you had a proto.

346
00:17:52.885 --> 00:17:57.030
&gt;&gt; Check in the underscore proto
underscore, and what did it find?

347
00:17:57.030 --> 00:18:02.212
A reference to a whole object and it when
into that object and what did it find.

348
00:18:02.212 --> 00:18:03.090
&gt;&gt; Increment.

349
00:18:03.090 --> 00:18:08.755
&gt;&gt; Exactly, and that functionality used it
to create excusion context, no problem.

350
00:18:08.755 --> 00:18:13.780
Okay lets have sums on this, this is
the prototypal nature of javascript.

351
00:18:13.780 --> 00:18:18.130
Now if were done just being
clear using 5001 dot increment.

352
00:18:18.130 --> 00:18:22.320
Suppose we had user 5001 will that
have an increment method on it?

353
00:18:22.320 --> 00:18:26.867
No, but JavaScript knows to check
the _proto_ in order to find a reference

354
00:18:26.867 --> 00:18:29.707
user function store,
uses the same function.

355
00:18:29.707 --> 00:18:33.470
Now of course that means that
this function better be generic,

356
00:18:33.470 --> 00:18:36.097
better be a general to
be used on any object,

357
00:18:36.097 --> 00:18:41.344
use any user object Because otherwise
we can't write like User5001.score.

358
00:18:41.344 --> 00:18:46.333
So instead we use this, which when the
increment function ends up being called

359
00:18:46.333 --> 00:18:50.490
on the user one object,
on the user 5001 object that this gets

360
00:18:50.490 --> 00:18:55.050
automatically filled in with whatever
object is to the left of the dot.

361
00:18:55.050 --> 00:18:58.153
Which turns out,
in this case, to be user1.

362
00:18:58.153 --> 00:19:01.898
And now this.score++
becomes user1.score++.

