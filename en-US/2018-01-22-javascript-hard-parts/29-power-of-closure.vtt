WEBVTT

1
00:00:00.000 --> 00:00:02.263
&gt;&gt; Speaker 1: We have achieved
something really remarkable here.

2
00:00:02.263 --> 00:00:04.919
We have given our function definitions.

3
00:00:04.919 --> 00:00:07.359
It ain't just function
definitions anymore.

4
00:00:07.359 --> 00:00:12.890
They're function definitions plus live
data stores attached to the back of them.

5
00:00:12.890 --> 00:00:16.590
They're all mini caches,
a persistent state,

6
00:00:16.590 --> 00:00:19.667
little state stores that were created.

7
00:00:19.667 --> 00:00:24.205
my keyword salad, were created by
the fact that these functions were

8
00:00:24.205 --> 00:00:28.208
themselves defined inside
another function being called.

9
00:00:28.208 --> 00:00:31.550
And they therefore, got this little
bond to their surrounding live memory.

10
00:00:31.550 --> 00:00:36.042
And that bond didn't go way when
that inner function returned out and

11
00:00:36.042 --> 00:00:38.788
stored in its new label, very profound.

12
00:00:38.788 --> 00:00:40.687
So what's this else do?

13
00:00:40.687 --> 00:00:46.303
Well, if you go back at the very
beginning we said, what does it say?

14
00:00:46.303 --> 00:00:51.253
We said, what if our functions
could hold on to live data/state

15
00:00:51.253 --> 00:00:53.460
between their executions?

16
00:00:53.460 --> 00:00:55.030
Well, what do you know?

17
00:00:55.030 --> 00:00:55.540
They can,

18
00:00:56.590 --> 00:01:01.970
this will let our function definitions
have an associated persistent memory.

19
00:01:01.970 --> 00:01:04.731
This would let us do things like, well,

20
00:01:04.731 --> 00:01:09.364
create these highly professional
functions like once, memoize,

21
00:01:09.364 --> 00:01:14.089
basically any function that needs
the memory of the past timers run.

22
00:01:14.089 --> 00:01:15.649
So one of them would be called once.

23
00:01:15.649 --> 00:01:21.072
So the onceified version of multiply
by 2 would say, first time you run me,

24
00:01:21.072 --> 00:01:26.692
I'm gonna multiply by 2 functions that's
got a memory of the last time I run.

25
00:01:26.692 --> 00:01:31.379
First time you run me,
with input of 3 multiplied by 2 return 6.

26
00:01:31.379 --> 00:01:32.462
Okay, fine good.

27
00:01:32.462 --> 00:01:37.628
But, don't just return, 6,
also have a little counter in my backpack,

28
00:01:37.628 --> 00:01:41.236
write the function in such
a way that when you run me,

29
00:01:41.236 --> 00:01:44.200
also increment my backpack counter to 1.

30
00:01:44.200 --> 00:01:47.841
Next time you run me with,
I dont know, anything 10, 11,

31
00:01:47.841 --> 00:01:51.510
whatever, with 10,
check my backpack first.

32
00:01:51.510 --> 00:01:55.034
Counter says 1, return out,
sorry I can only be run once,

33
00:01:55.034 --> 00:01:58.787
I've clearly been run one before,
my function gets a memory.

34
00:01:58.787 --> 00:02:03.523
This means that you can do stuff
like build a tic-tac-toe game but

35
00:02:03.523 --> 00:02:04.714
click the cell.

36
00:02:04.714 --> 00:02:08.644
You only wanna click once and
you can't ever click it again, because

37
00:02:08.644 --> 00:02:13.148
the functions's being called already once,
various situations like this.

38
00:02:13.148 --> 00:02:18.027
This turns out to be very useful in
professional engineering, to onceify,

39
00:02:18.027 --> 00:02:21.165
to make a function only be
allowed to be run once.

40
00:02:21.165 --> 00:02:24.921
That's one of your challenges by the way,
very demanding challenge.

41
00:02:24.921 --> 00:02:27.189
All right, what about memoize?

42
00:02:27.189 --> 00:02:32.587
Well, memoize says well, hold on,
supposed I build, as we said, nth prime.

43
00:02:32.587 --> 00:02:34.675
To the find the thousandth prime number,

44
00:02:34.675 --> 00:02:37.667
you've got to find all the prime
numbers up to that as well.

45
00:02:37.667 --> 00:02:42.411
It's a complicated demanding task,
it takes lots of steps, maybe two, three,

46
00:02:42.411 --> 00:02:43.321
four seconds.

47
00:02:43.321 --> 00:02:47.172
If you pass a thousand to nth prime,
you don't want to have to,

48
00:02:47.172 --> 00:02:50.659
if you end up passing a thousand
again to it, have to go and

49
00:02:50.659 --> 00:02:55.483
recalculate a thousand when you already
ran a thousand in it a few seconds ago.

50
00:02:55.483 --> 00:03:00.101
So you memoize the function as such that,
when you call it the first time with

51
00:03:00.101 --> 00:03:04.590
a thousand, you do all the hard work
to find the thousandth prime number.

52
00:03:04.590 --> 00:03:07.210
You do all the sieve thing,
anyone come from math,

53
00:03:07.210 --> 00:03:09.690
you do the sieve thing, whatever it is,
I don't know how you do it.

54
00:03:09.690 --> 00:03:14.990
But you find the thousandth prime
number and then yes, you return it out.

55
00:03:14.990 --> 00:03:16.330
Great, the function worked.

56
00:03:16.330 --> 00:03:20.400
But also, you have an object,
in the backpack,

57
00:03:20.400 --> 00:03:23.630
let's call it store, and it's an object.

58
00:03:23.630 --> 00:03:28.710
And in there, you make a key a thousand,
and you make a value

59
00:03:28.710 --> 00:03:32.680
the associated thousandth prime number
from the time you just run it then.

60
00:03:32.680 --> 00:03:37.590
Next time you run nth prime with the input
of 1,000, you don't do all the hard work

61
00:03:37.590 --> 00:03:41.036
first, you go look in the backpack,
look in the store.

62
00:03:41.036 --> 00:03:43.028
We already rounded a 1,000,

63
00:03:43.028 --> 00:03:46.875
we can just parse it one step
out to the 1,000th prime number,

64
00:03:46.875 --> 00:03:51.428
all bundled up in our persistent cache
on the back of our function, nth prime.

65
00:03:51.428 --> 00:03:54.851
This is very profound, very powerful.

66
00:03:54.851 --> 00:03:56.614
Our functions get to have little memories.

67
00:03:56.614 --> 00:04:00.874
Now, we can hold on to
data in global memory.

68
00:04:00.874 --> 00:04:03.684
We could say like have counter is zero,
but the problem with that,

69
00:04:03.684 --> 00:04:04.545
a couple of things.

70
00:04:04.545 --> 00:04:10.079
One, we want often independent live stores
associated with each other function.

71
00:04:10.079 --> 00:04:13.343
You can imagine how good that is for
modularizing our code.

72
00:04:13.343 --> 00:04:14.932
There you go.

73
00:04:14.932 --> 00:04:18.039
And another thing is,
when we write code at scale,

74
00:04:18.039 --> 00:04:21.304
and this is where closure
is particularly powerful.

75
00:04:21.304 --> 00:04:25.726
We do not want to,
what's called pollute our global memory.

76
00:04:25.726 --> 00:04:29.265
You got 100 engineers
work on the same team,

77
00:04:29.265 --> 00:04:34.850
10,000s of lines of code and
you've got a variable saying counter.

78
00:04:34.850 --> 00:04:38.870
This is not realistic, someone else
wants to call their variable counter.

79
00:04:38.870 --> 00:04:41.600
You got one saying results.

80
00:04:41.600 --> 00:04:44.245
I promise you, someone else on the team
wants to call their variable results.

81
00:04:45.570 --> 00:04:47.344
But you gotta hold on to data.

82
00:04:47.344 --> 00:04:52.170
Suppose you got a game, you want
player one's score not to be gone.

83
00:04:52.170 --> 00:04:56.490
You need to have player one equals 20,
but it gets super complicated.

84
00:04:56.490 --> 00:05:01.060
You don't necessarily want to
taint the global name space.

85
00:05:01.060 --> 00:05:06.030
You don't wanna put that counter 2,
counter 4 here, so what do you do?

86
00:05:06.030 --> 00:05:09.576
Well, one option is,
use what's called the module pattern.

87
00:05:09.576 --> 00:05:16.727
And the module pattern in JavaScript says,
If I store my data inside my function.

88
00:05:16.727 --> 00:05:19.339
But every time that function
finishes running, the data is gone.

89
00:05:19.339 --> 00:05:21.034
But I wanna hold on to data, okay?

90
00:05:21.034 --> 00:05:23.700
Store it in global, but that's dangerous,

91
00:05:23.700 --> 00:05:27.924
cuz it can get overwritten really easily,
is really hard to maintain.

92
00:05:27.924 --> 00:05:31.899
What if I wrote these functions in
such a way, the way Katie said,

93
00:05:31.899 --> 00:05:36.110
that there were really easy to
write to by parsing something in?

94
00:05:36.110 --> 00:05:40.560
That then, send off into the backpack and
easy to get the data out of?

95
00:05:40.560 --> 00:05:44.970
What if I store the data I want
to persist in the backpacks,

96
00:05:44.970 --> 00:05:49.057
on my functions?
&gt;&gt; Speaker 1: Therefore, for

97
00:05:49.057 --> 00:05:52.745
the life of my application,
I have that data around but

98
00:05:52.745 --> 00:05:55.724
it's persisting in a very protected area.

99
00:05:55.724 --> 00:06:00.605
So I just write this function in a really
clean way and then module pattern lets

100
00:06:00.605 --> 00:06:04.958
you do that, such that my data
sticks around but I'm not polluting,

101
00:06:04.958 --> 00:06:10.230
tainting the global memory itself,
and this is called the module pattern.

102
00:06:10.230 --> 00:06:13.820
That's advanced stuff,
it lies even in Codesmith.

103
00:06:13.820 --> 00:06:16.859
I think it is week seven of Codesmith,
it's very demanding stuff,

104
00:06:16.859 --> 00:06:18.440
the module pattern.

105
00:06:18.440 --> 00:06:23.840
But it is also super seasoned developer
profession type of code writing.

106
00:06:23.840 --> 00:06:30.314
And that relies fundamentally on using
our persistent lexical scope reference,

107
00:06:30.314 --> 00:06:34.837
our closed over variable environment,
all same thing.

108
00:06:34.837 --> 00:06:39.181
Our closure, our backpack or
our, did I say closed over

109
00:06:39.181 --> 00:06:44.183
variable environment, closed over,
I said that one already?

110
00:06:44.183 --> 00:06:45.099
What's the other one?

111
00:06:45.099 --> 00:06:49.332
Closed over environment,
persistent reference, closure, backpack,

112
00:06:49.332 --> 00:06:50.061
there you go.

113
00:06:50.061 --> 00:06:52.037
All those things,
they all mean the same thing.

114
00:06:52.037 --> 00:06:53.822
There we go folks, that's it.

115
00:06:53.822 --> 00:06:56.840
At this point we have
covered the end of day one.

116
00:06:56.840 --> 00:06:59.078
Thread execution context call stack,

117
00:06:59.078 --> 00:07:03.291
which gave us the foundations to tackle
quite a lot harder stuff, right?

118
00:07:03.291 --> 00:07:07.284
You're sitting there thinking,
I got what multiply by 2 does.

119
00:07:07.284 --> 00:07:11.946
But all those pieces gave us the pieces
to handle higher order functions and

120
00:07:11.946 --> 00:07:15.654
then the most esoteric of
JavaScript concepts, closure.

121
00:07:15.654 --> 00:07:19.842
All right, at this point,
we wait until tomorrow to continue.

122
00:07:19.842 --> 00:07:26.092
Tomorrow we will handle asynchronous
JavaScript and object oriented JavaScript.

