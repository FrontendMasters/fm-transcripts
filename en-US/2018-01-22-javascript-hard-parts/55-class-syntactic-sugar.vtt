WEBVTT

1
00:00:00.210 --> 00:00:02.960
&gt;&gt; Will Sentance: Solution 4,
our last solution.

2
00:00:02.960 --> 00:00:07.251
We're writing our shared methods
separately from our object

3
00:00:07.251 --> 00:00:12.381
constructor itself,
off in the User.prototype.increment.login.

4
00:00:12.381 --> 00:00:15.698
Other languages let us do this all in one
place, and people like Griffin go, what?

5
00:00:15.698 --> 00:00:20.022
[SOUND] I wanna do it all in one place.

6
00:00:20.022 --> 00:00:23.449
Even though I hope it's clear,
Griffin, that these functions,

7
00:00:23.449 --> 00:00:25.820
they're not attached to this object.

8
00:00:25.820 --> 00:00:28.210
They're just being given
a reference to them in this.

9
00:00:28.210 --> 00:00:30.082
They're attached to
userCreator in global memory.

10
00:00:30.082 --> 00:00:33.931
I could go console log,
userCreator.prototype.increment and

11
00:00:33.931 --> 00:00:35.405
I'd see that function.

12
00:00:35.405 --> 00:00:36.570
It's there in global memory.

13
00:00:36.570 --> 00:00:38.445
It is never on user1.

14
00:00:38.445 --> 00:00:40.837
Prototype is on the constructor function,
and

15
00:00:40.837 --> 00:00:44.840
I just happened to get a bond to those
shared functions on each of these objects,

16
00:00:44.840 --> 00:00:48.720
a reference to those shared
functions on each of these objects.

17
00:00:48.720 --> 00:00:50.710
So why are you complaining?

18
00:00:50.710 --> 00:00:52.500
Well, you're not the only one.

19
00:00:52.500 --> 00:00:53.590
Others complain, too.

20
00:00:53.590 --> 00:00:58.130
So year 2015 gave us
the class 'syntactic sugar'.

21
00:00:58.130 --> 00:01:02.230
It does not change anything about what
we did here, but it looks like Python.

22
00:01:04.430 --> 00:01:06.640
It is not like Python under the hood,
let's be really clear.

23
00:01:06.640 --> 00:01:10.490
This is why I find this getting
increasingly separate from the reality of

24
00:01:10.490 --> 00:01:13.840
how JavaScript's actually
working is somewhat problematic.

25
00:01:15.360 --> 00:01:19.930
Under the hood nothing's changed here,
but now the function that we,

26
00:01:19.930 --> 00:01:22.400
well, here we go, look at that,
how helpful is that?

27
00:01:22.400 --> 00:01:27.035
The function that we previously called,
so let's just remind ourselves,

28
00:01:27.035 --> 00:01:29.503
user is what we were calling userCreator.

29
00:01:29.503 --> 00:01:33.428
Typically people don't call them creator,
even though they are creating users they

30
00:01:33.428 --> 00:01:37.040
just say the name of the thing they're
gonna create, everyone clear on that?

31
00:01:37.040 --> 00:01:38.560
So they just call it user.

32
00:01:38.560 --> 00:01:40.886
So why put an uppercase letter for
the first letter?

33
00:01:40.886 --> 00:01:46.370
Well it's because what I think is
a flaw of the whole design of this,

34
00:01:46.370 --> 00:01:48.560
is that that userCreator
function up there,

35
00:01:48.560 --> 00:01:53.070
if I called it without the new keyword,
is it gonna work?

36
00:01:54.216 --> 00:01:56.600
If I ran that function at
the top without a new keyword,

37
00:01:56.600 --> 00:01:58.420
it's not gonna create
an empty object called this.

38
00:01:58.420 --> 00:02:01.570
So what am I sticking my this.name into?

39
00:02:01.570 --> 00:02:04.060
Actually by the way, the this,
there, will default to what?

40
00:02:05.300 --> 00:02:08.540
The global object, which is just
an object available in all of JavaScript,

41
00:02:08.540 --> 00:02:10.820
which definitely is not
what we wanted to point to.

42
00:02:10.820 --> 00:02:15.190
So, the problem with that function is,
if we don't tell our other developers in

43
00:02:15.190 --> 00:02:19.020
the team that it's the kind of function
that needs a new keyword in front of it,

44
00:02:19.020 --> 00:02:22.080
they're going to try and run it and
go, man, why is that not working?

45
00:02:22.080 --> 00:02:25.567
So instead, JavaScript developers
literally had to go, fine.

46
00:02:25.567 --> 00:02:30.060
We've got to come up with a way of making,
fixing JavaScript ourselves.

47
00:02:30.060 --> 00:02:34.101
And the one they use is any function like
this that needs to be run with a new

48
00:02:34.101 --> 00:02:36.496
keyword, we uppercase the first letter.

49
00:02:36.496 --> 00:02:39.056
So we wouldn't actually
call this userCreator.

50
00:02:39.056 --> 00:02:44.860
If we were to call it creator at all,
it would be UserCreator upper case U.

51
00:02:44.860 --> 00:02:47.400
Most of the time we just get rid of
the Creator bit and call it User.

52
00:02:47.400 --> 00:02:49.280
That it's gonna create users.

53
00:02:49.280 --> 00:02:54.180
So with that in mind,
we get a last solution here where,

54
00:02:55.330 --> 00:02:57.100
there's our solution 3 and 4.

55
00:02:57.100 --> 00:03:01.170
A function called User that when run,
it's just userCreator,

56
00:03:01.170 --> 00:03:04.300
when run with Eva and nine returns out,

57
00:03:05.860 --> 00:03:10.020
inside of it creates this as
an empty object and a bond to user.

58
00:03:10.020 --> 00:03:11.662
Let's actually switch these up now.

59
00:03:11.662 --> 00:03:15.010
So, no longer userCreator,
we're now going to call it,

60
00:03:15.010 --> 00:03:21.490
instead we're going to call it just User.

61
00:03:21.490 --> 00:03:24.420
It's the same,
nothing's changed, just User.

62
00:03:24.420 --> 00:03:25.870
There it is.

63
00:03:25.870 --> 00:03:29.250
Okay, so User has two parts to it, right?

64
00:03:29.250 --> 00:03:32.970
Its functionality that gets
run that creates an object,

65
00:03:32.970 --> 00:03:37.840
and its object self which has this

66
00:03:37.840 --> 00:03:41.640
prototype property which has an object on
it with a bunch of functions stored on it.

67
00:03:41.640 --> 00:03:43.720
Okay, it has two parts.

68
00:03:43.720 --> 00:03:48.010
At the moment, in solution 3,
we fill those parts out separately.

69
00:03:48.010 --> 00:03:49.970
We fill the function out at the top
by saying this is a function.

70
00:03:49.970 --> 00:03:55.700
And we fill out its associated methods,
these guys here.

71
00:03:55.700 --> 00:03:59.990
They're gonna be available on the objects
that get returned out of running User.

72
00:03:59.990 --> 00:04:04.605
We fill these functions up by going very
specifically, very precise, very explicit.

73
00:04:04.605 --> 00:04:07.286
User.prototype.increment as a function.

74
00:04:07.286 --> 00:04:09.220
User.prototype.login as a function.

75
00:04:09.220 --> 00:04:11.380
It's very explicit,
we say exactly what we do.

76
00:04:12.790 --> 00:04:19.150
Apparently, this is not what we want,
why, I like this.

77
00:04:19.150 --> 00:04:24.920
Instead we have a new solution 4
that says exactly the same thing.

78
00:04:24.920 --> 00:04:26.870
These are absolutely identical.

79
00:04:26.870 --> 00:04:29.550
There are ways in which
this new syntax class

80
00:04:29.550 --> 00:04:31.300
actually changes stuff under the hood.

81
00:04:31.300 --> 00:04:34.320
But for this, we don't need to
think of there being any ways.

82
00:04:34.320 --> 00:04:36.680
It's achieving the same thing.

83
00:04:36.680 --> 00:04:38.850
So instead, let's try it out.

