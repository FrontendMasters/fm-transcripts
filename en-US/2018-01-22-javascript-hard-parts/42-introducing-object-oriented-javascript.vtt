WEBVTT

1
00:00:00.260 --> 00:00:03.400
&gt;&gt; Will Sentance: At this point,
we have seen our asynchronous land.

2
00:00:03.400 --> 00:00:05.720
A lot of this is hidden from us.

3
00:00:05.720 --> 00:00:09.801
So we don't often know exactly how
some of these pieces are working but

4
00:00:09.801 --> 00:00:14.297
we just need to know that when we use
any of these built-in features, which we

5
00:00:14.297 --> 00:00:18.962
access with things like $.get, that we
access with things like set time out.

6
00:00:18.962 --> 00:00:23.834
They're all setting up things
in the web browser API land,

7
00:00:23.834 --> 00:00:29.960
with the associated referenced
callback function that got passed in.

8
00:00:29.960 --> 00:00:32.210
That is not like our regular callbacks.

9
00:00:32.210 --> 00:00:35.390
They get executed immediately
here inside their high

10
00:00:35.390 --> 00:00:37.430
order function being called, no.

11
00:00:37.430 --> 00:00:43.500
Instead, they get referenced
in the API space then

12
00:00:43.500 --> 00:00:47.460
when they complete whatever that looks
like, the timer, the timing's completed.

13
00:00:47.460 --> 00:00:53.310
If it's an HTTP request,
an XML HTTP request, API use,

14
00:00:53.310 --> 00:00:58.700
we get complete when the request
returns with data and

15
00:00:58.700 --> 00:01:03.832
then that associated function
added to the queue, queued up.

16
00:01:03.832 --> 00:01:07.800
And then, only when our event
loop is checked successfully,

17
00:01:07.800 --> 00:01:11.380
the core stack is empty, and
global has no more code to run,

18
00:01:11.380 --> 00:01:17.260
do we then pass a call to the display
function, to our call stack.

19
00:01:17.260 --> 00:01:20.686
And then, we call it,
with the data available to us,

20
00:01:20.686 --> 00:01:22.979
from the request return response.

21
00:01:22.979 --> 00:01:28.484
All right, so asynchronous callbacks.

22
00:01:28.484 --> 00:01:34.690
Web browser APIs, by the way, known
in node as background threads in C++,

23
00:01:34.690 --> 00:01:39.270
the callback queue and
our event loop allow us to defer our

24
00:01:39.270 --> 00:01:43.759
actions to display data
functionality until our work,

25
00:01:43.759 --> 00:01:48.810
maybe an API request,
maybe a timer, is completed.

26
00:01:48.810 --> 00:01:50.994
And then continue running
our code line-by-line.

27
00:01:50.994 --> 00:01:53.420
[INAUDIBLE] log me fast, instantly.

28
00:01:53.420 --> 00:01:58.330
Asynchronous JavaScript is the backbone
of the modern web, letting us build fast,

29
00:01:58.330 --> 00:02:02.530
dynamic, they're interactive
with things beyond theirselves,

30
00:02:02.530 --> 00:02:06.130
but non- blocking applications.

31
00:02:06.130 --> 00:02:10.460
We did not block the main thread while
we waited for that data to come back and

32
00:02:10.460 --> 00:02:14.660
then call the function display
to run with that data.

33
00:02:14.660 --> 00:02:19.550
Instead, we just said, continue on, and
when finally that API request completes,

34
00:02:19.550 --> 00:02:24.290
then bring the associated function back
into JavaScript via the callback cue event

35
00:02:24.290 --> 00:02:30.770
loop and then call stack, call it with
the data available as the argument.

36
00:02:30.770 --> 00:02:34.006
That's it,
this is our asynchronous JavaScript, okay?

37
00:02:34.006 --> 00:02:36.760
And now we move on.

38
00:02:37.840 --> 00:02:38.520
We're almost there.

39
00:02:38.520 --> 00:02:40.370
Part 1, principles, done.

40
00:02:40.370 --> 00:02:42.160
Part 2, higher order functions, done.

41
00:02:42.160 --> 00:02:44.410
Part 3, closures, done.

42
00:02:44.410 --> 00:02:49.417
Part 4, asynchronous JavaScript,
[SOUND] done.

43
00:02:49.417 --> 00:02:55.100
Done one final part,
object-oriented JavaScript.

44
00:02:55.100 --> 00:03:00.970
Approaches to OOP, object-oriented
programming, in JavaScript.

45
00:03:00.970 --> 00:03:06.090
OOP, an enormously popular paradigm for

46
00:03:06.090 --> 00:03:09.180
structuring our complex code.

47
00:03:10.300 --> 00:03:15.590
As we write more and more complex code at
scale we need to a way of structuring it.

48
00:03:15.590 --> 00:03:18.468
We've seen one,
which was our functional paradigm.

49
00:03:18.468 --> 00:03:23.466
But we said that there'd be an even
more popular alternative that's

50
00:03:23.466 --> 00:03:27.688
been the main go-to way of
thinking about structuring and

51
00:03:27.688 --> 00:03:32.097
writing our large scale code
bases over the last 25 years.

52
00:03:32.097 --> 00:03:34.760
It is the object-oriented paradigm.

53
00:03:36.450 --> 00:03:39.667
Why do we have a paradigm for
structuring our code?

54
00:03:39.667 --> 00:03:43.700
Let's remind us, it allows us to easily
add features of functionality ideally.

55
00:03:43.700 --> 00:03:45.060
When you've written some stuff,

56
00:03:45.060 --> 00:03:49.030
we don't have to rewrite the whole
thing again to make it do new stuff.

57
00:03:50.140 --> 00:03:55.350
Performant, it doesn't unnecessarily
use up a ton of memory, for example.

58
00:03:55.350 --> 00:03:58.960
Sometimes these may actually be
intentional with each other.

59
00:03:58.960 --> 00:04:02.590
And part of the principles
behind their best paradigms

60
00:04:02.590 --> 00:04:05.170
is to somehow reconcile these.

61
00:04:05.170 --> 00:04:09.400
For example, we want to make writing
code easy, adding features and

62
00:04:09.400 --> 00:04:10.880
functionality easy.

63
00:04:10.880 --> 00:04:15.540
That might have challenges in
terms of memory efficiency.

64
00:04:15.540 --> 00:04:19.370
We want it to be easy for us and
other developers to reason about,

65
00:04:19.370 --> 00:04:22.480
to think about exactly
how our code is working.

66
00:04:22.480 --> 00:04:25.430
These are all things we want
as we write large scale code.

67
00:04:25.430 --> 00:04:26.910
And the OOP paradigm,

68
00:04:26.910 --> 00:04:32.030
through a number of features of it,
makes these things possible for us.

69
00:04:32.030 --> 00:04:36.888
So I'll say this, for OOP, in JavaScript,

70
00:04:36.888 --> 00:04:40.730
whereas for our closures,
our higher order function, our a-sync,

71
00:04:40.730 --> 00:04:46.170
we can see them purposefully being
used for making a memo-wise function.

72
00:04:46.170 --> 00:04:48.440
Remember that one which remembers
the last time it was run?

73
00:04:48.440 --> 00:04:50.900
We can see them being useful
to use pretty immediately.

74
00:04:50.900 --> 00:04:52.349
The module person, yeah,

75
00:04:52.349 --> 00:04:56.260
we have to imagine why we wouldn't
want to pollute the global name space.

76
00:04:56.260 --> 00:04:59.050
Remember this from yesterday,
why we have a module pattern.

77
00:05:00.340 --> 00:05:03.290
OOP is harder to see instantly
why we would want it.

78
00:05:03.290 --> 00:05:09.590
So we're gonna focus on one particular
thing, which is that it's easy for us

79
00:05:09.590 --> 00:05:14.660
to add features, easy for other developers
to reason about if we achieve this goal.

80
00:05:16.250 --> 00:05:23.310
When we're running code, we're mainly
doing functionality to some data.

81
00:05:23.310 --> 00:05:24.630
That's most of the time what we're doing.

82
00:05:24.630 --> 00:05:27.990
We're applying some functionality
to some data, some information.

83
00:05:27.990 --> 00:05:28.900
That's mostly what we're doing.

84
00:05:30.420 --> 00:05:31.530
Well that's the case.

85
00:05:32.610 --> 00:05:37.400
It would be incredibly helpful if
all relevant possible functionality

86
00:05:37.400 --> 00:05:41.100
that could ever be applied to
a particular piece of data

87
00:05:41.100 --> 00:05:44.910
would be immediately available
to be run on that data.

88
00:05:44.910 --> 00:05:47.610
Not in some separate other
part of the application,

89
00:05:47.610 --> 00:05:53.190
not in some other random location,
but there on the data available.

90
00:05:53.190 --> 00:05:56.720
What I mean by that is suppose we
want to imagine we're building

91
00:05:56.720 --> 00:05:58.300
a mega scale application,

92
00:05:58.300 --> 00:06:01.840
a quiz game with lots of users all
playing together at the same time.

93
00:06:02.910 --> 00:06:04.890
Here's some of our users.

94
00:06:04.890 --> 00:06:08.380
Name, Will, score, 3.

95
00:06:08.380 --> 00:06:10.160
Name, Tim, score, 6.

96
00:06:10.160 --> 00:06:13.812
Okay, fine,
let's imagine there's actually 100, 200,

97
00:06:13.812 --> 00:06:16.420
5,000 users, each with a name and a score.

98
00:06:17.680 --> 00:06:20.790
My friend, Tim,
went to school in the city.

99
00:06:20.790 --> 00:06:23.110
Shoutout to Tim, there you go.

100
00:06:23.110 --> 00:06:24.440
And, look at this, so functionality,

101
00:06:24.440 --> 00:06:30.690
the ability to increase
the score of these users.

102
00:06:30.690 --> 00:06:36.300
And I want my Will user with that data
to be able to have the functionality and

103
00:06:36.300 --> 00:06:40.060
increase my score right there
available on that data.

104
00:06:40.060 --> 00:06:44.440
And I want to have my Tim user have that
functionality available sort of wrapped up

105
00:06:44.440 --> 00:06:51.070
somehow, bundled up, right there
on my name, Tim, score, 6, user.

106
00:06:52.690 --> 00:06:55.490
And there may not just be one piece of
functionality, there may be hundreds.

107
00:06:55.490 --> 00:06:58.410
But, what would be the best
way to store this data and

108
00:06:58.410 --> 00:07:03.800
functionality in one sort of
easily bundled altogether way?

109
00:07:03.800 --> 00:07:05.200
Griffin, what would be
a good way of doing it?

110
00:07:05.200 --> 00:07:06.930
&gt;&gt; Griffin: The objects?

111
00:07:06.930 --> 00:07:08.080
&gt;&gt; Will Sentance: In an object.

112
00:07:08.080 --> 00:07:11.190
That's a very nice way,
storing our functions as methods and

113
00:07:11.190 --> 00:07:14.300
our data as properties on objects.

114
00:07:14.300 --> 00:07:16.010
That's exactly right.

115
00:07:16.010 --> 00:07:18.920
Note we would in reality have a lot
of different relevant functionality,

116
00:07:18.920 --> 00:07:23.760
not just increase score but could be
ability to decrease score,To delete user,

117
00:07:23.760 --> 00:07:29.970
to log the user in, log it out, add
an avatar, get user score, display user.

118
00:07:29.970 --> 00:07:33.320
All that functionality could
be applied to this user.

119
00:07:33.320 --> 00:07:37.880
So we want to bundle up, in an object,

120
00:07:37.880 --> 00:07:42.220
our data associated with the user and
our functionality.

121
00:07:42.220 --> 00:07:46.258
So as we build our game,
we're gonna have users with data and

122
00:07:46.258 --> 00:07:49.610
relevant functionality that
could be applied to those users.

123
00:07:49.610 --> 00:07:54.130
It turns out that a really great way
of putting these all in one place

124
00:07:55.320 --> 00:07:57.670
is to use an object.

125
00:07:57.670 --> 00:07:59.780
Cuz what does that let us do?

126
00:07:59.780 --> 00:08:02.210
It let's us do this all
powerful line here.

127
00:08:02.210 --> 00:08:05.990
And throughout the rest our OOP session,

128
00:08:05.990 --> 00:08:10.890
we're gonna be measuring ourselves
against can I do this line here?

129
00:08:10.890 --> 00:08:15.470
As a developer writing functionality,
if I got my functions that could

130
00:08:15.470 --> 00:08:19.590
be applied to a user all over the place,
I've got all sorts of question marks.

131
00:08:19.590 --> 00:08:24.640
Is that function available to
run on this user at this moment?

132
00:08:24.640 --> 00:08:28.660
What about, if I got my functionality,
all the functionality that could ever

133
00:08:28.660 --> 00:08:33.350
be applied to that user, available
on the end of a dot, in other words,

134
00:08:33.350 --> 00:08:37.630
wrapped up available on that user1 object.

135
00:08:37.630 --> 00:08:43.330
This makes my life writing code
at scale far, far, far easier.

136
00:08:43.330 --> 00:08:46.770
So throughout our session we
are gonna be testing ourselves.

137
00:08:46.770 --> 00:08:54.361
Have we achieved this simplifying,
is simplifying gotten?

138
00:08:54.361 --> 00:08:59.050
Yeah, this simplifying goal of making sure

139
00:08:59.050 --> 00:09:03.193
the functionality that we could apply
to our user data, in this case user 1,

140
00:09:03.193 --> 00:09:07.670
Will 3,
is available right there on the user.

141
00:09:07.670 --> 00:09:10.950
The user 1 on increment,
we could imagine user 2.increment.

142
00:09:10.950 --> 00:09:13.970
Is that functionality
available on the user?

143
00:09:13.970 --> 00:09:16.150
This idea of binding together our data and

144
00:09:16.150 --> 00:09:20.440
functions that can manipulate that
data is known as encapsulation.

145
00:09:20.440 --> 00:09:24.710
Which is one of the core
features of the OOP paradigm.

