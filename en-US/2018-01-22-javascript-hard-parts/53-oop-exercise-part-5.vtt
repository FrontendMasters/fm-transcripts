WEBVTT

1
00:00:00.475 --> 00:00:02.668
&gt;&gt; Will Sentance: We're going to
walk through this line by line.

2
00:00:02.668 --> 00:00:04.928
Here it is, the pretty final version.

3
00:00:04.928 --> 00:00:07.143
We're going to walk through
it line by line, this is it.

4
00:00:07.143 --> 00:00:11.405
The final solution four is just
a pretty little wrapper of this.

5
00:00:11.405 --> 00:00:12.467
There's no change really.

6
00:00:12.467 --> 00:00:16.432
This is essentially our last
hard piece of JavaScript

7
00:00:16.432 --> 00:00:19.085
the hard parts we are almost there.

8
00:00:19.085 --> 00:00:23.019
Lindsey, what are we doing in a second,

9
00:00:23.019 --> 00:00:28.940
just still very slowly Lindsay,
what are we doing Lindsay?

10
00:00:28.940 --> 00:00:30.183
&gt;&gt; Lindsay: Line one.

11
00:00:30.183 --> 00:00:32.000
&gt;&gt; Will Sentance: Very slowly Lindsay.

12
00:00:32.000 --> 00:00:33.521
&gt;&gt; Lindsay: We are going to.

13
00:00:33.521 --> 00:00:35.814
&gt;&gt; Will Sentance: Good, that's slowly.

14
00:00:35.814 --> 00:00:39.371
All you can save fast an repeat
a few times, whichever you want.

15
00:00:39.371 --> 00:00:42.772
&gt;&gt; Lindsay: Declare [LAUGH], function.

16
00:00:42.772 --> 00:00:46.130
&gt;&gt; Will Sentance: Perfect,
you are really praying a lot.

17
00:00:46.130 --> 00:00:47.290
Declare function?

18
00:00:47.290 --> 00:00:48.187
&gt;&gt; Lindsay: Call user.

19
00:00:48.187 --> 00:00:53.050
&gt;&gt; Will Sentance: Call user,
great, call user.

20
00:00:53.050 --> 00:00:59.270
So now, guys, before we renamed it User,
it's the user creator function.

21
00:00:59.270 --> 00:01:02.460
Let me be really clear,
this function has not changed.

22
00:01:02.460 --> 00:01:06.300
I renamed it user because that's
the standard best practice.

23
00:01:06.300 --> 00:01:07.650
I don't love this.

24
00:01:07.650 --> 00:01:13.000
This looks now, but
this is exactly the same as user creator.

25
00:01:13.000 --> 00:01:19.220
It's, this function, when we said Here
we're getting rid of a bunch of stuff.

26
00:01:19.220 --> 00:01:21.870
I've also changed the name now to User.

27
00:01:21.870 --> 00:01:24.780
We'll talk about why it's got uppercase
for the first letter in a second,

28
00:01:24.780 --> 00:01:29.050
but this function could
equally be called UserCreator.

29
00:01:29.050 --> 00:01:32.561
It's job is gonna be to create users,
just as we did before.

30
00:01:32.561 --> 00:01:33.788
But when it gets run.

31
00:01:36.867 --> 00:01:37.712
&gt;&gt; Will Sentance: Actually you know what?

32
00:01:37.712 --> 00:01:43.318
The point that I want, I want to
actually live edit that, I think.

33
00:01:43.318 --> 00:01:44.444
Because.

34
00:01:48.418 --> 00:01:49.400
&gt;&gt; Will Sentance: There you go.

35
00:01:49.400 --> 00:01:52.120
I want to live edit that
because I think it is.

36
00:01:52.120 --> 00:01:55.630
We'll go back in a second and
change it back, but for

37
00:01:55.630 --> 00:02:00.510
now, let's rename this
userCreator throughout.

38
00:02:00.510 --> 00:02:02.890
Just so that we do not lose sight

39
00:02:02.890 --> 00:02:07.950
of the fact that this is just
a function that is creating users.

40
00:02:07.950 --> 00:02:10.080
People typically don't
name them like that.

41
00:02:10.080 --> 00:02:12.060
We'll see what they actually do,
but there we go.

42
00:02:12.060 --> 00:02:13.890
Let's not lose sight of this.

43
00:02:13.890 --> 00:02:17.660
All right, I'm one,
Lindsay, let's do it again.

44
00:02:17.660 --> 00:02:22.270
&gt;&gt; Lindsay: We're gonna declare
a function and name it User Creator.

45
00:02:22.270 --> 00:02:23.896
&gt;&gt; Will Sentance: User Creator, perfect.

46
00:02:23.896 --> 00:02:26.408
User Creator.

47
00:02:26.408 --> 00:02:29.200
All right, next line, Art.

48
00:02:31.260 --> 00:02:35.804
&gt;&gt; Art: I'm gonna take the userCreator and
[CROSSTALK].

49
00:02:35.804 --> 00:02:36.880
&gt;&gt; Will Sentance: This is so hard.

50
00:02:36.880 --> 00:02:38.750
Sorry, I gave you
the toughest question here.

51
00:02:38.750 --> 00:02:41.300
Just be really clear, by the way,

52
00:02:41.300 --> 00:02:44.810
is this userCreator function at the top
here a special type of function?

53
00:02:44.810 --> 00:02:47.780
I mean, it needs to be treated in
a special way but it is any old function.

54
00:02:47.780 --> 00:02:49.280
It's just a regular function.

55
00:02:49.280 --> 00:02:50.680
There it is stored in memory.

56
00:02:50.680 --> 00:02:53.230
Okay, now I gave out a tough one here.

57
00:02:53.230 --> 00:02:56.900
The next line says,
userCreator dot prototype dot increment.

58
00:02:56.900 --> 00:02:59.390
What the hell does that even mean.

59
00:02:59.390 --> 00:03:02.295
Well, userCreator is a function.

60
00:03:02.295 --> 00:03:04.440
What else is userCreator, Katie?

61
00:03:04.440 --> 00:03:05.100
&gt;&gt; Katie: An object.

62
00:03:05.100 --> 00:03:06.228
&gt;&gt; Will Sentance: An object.

63
00:03:06.228 --> 00:03:10.481
So in it's object version of itself so
to speak.

64
00:03:10.481 --> 00:03:12.699
What are we adding, Art?

65
00:03:12.699 --> 00:03:15.079
Or what are we referring to?

66
00:03:15.079 --> 00:03:18.060
You've got user creator
in it's object version.

67
00:03:18.060 --> 00:03:21.256
That object has by the way automatically,

68
00:03:21.256 --> 00:03:25.624
all functions have this,
a property on it for prototype.

69
00:03:25.624 --> 00:03:30.250
Which is automatically and object.

70
00:03:30.250 --> 00:03:34.970
So what in that second line
that we interpret KD are we

71
00:03:34.970 --> 00:03:37.240
adding to that prototype object?

72
00:03:38.410 --> 00:03:40.790
&gt;&gt; Katie: We're adding
a property called increment.

73
00:03:40.790 --> 00:03:45.355
&gt;&gt; Will Sentance: Spot on,
there it is, increment, which is?

74
00:03:45.355 --> 00:03:46.770
&gt;&gt; Katie: Which is a function.

75
00:03:46.770 --> 00:03:49.290
&gt;&gt; Will Sentance: A whole
function definition.

76
00:03:49.290 --> 00:03:53.730
One that we hope any objects that were to
get returned out of running userCreator

77
00:03:53.730 --> 00:03:55.635
would have access to this guy here.

78
00:03:55.635 --> 00:03:57.870
Griffin, what's the next
line telling us to do?

79
00:03:59.240 --> 00:04:01.880
&gt;&gt; Griffin: Go into
the userCreator object.

80
00:04:01.880 --> 00:04:02.490
&gt;&gt; Will Sentance: Yep.

81
00:04:02.490 --> 00:04:05.680
&gt;&gt; Griffin: And
then go into the prototype object.

82
00:04:05.680 --> 00:04:08.690
&gt;&gt; Will Sentance: Yes, property on it,
which is itself an object, yeah.

83
00:04:08.690 --> 00:04:09.770
And what?

84
00:04:09.770 --> 00:04:13.710
&gt;&gt; Griffin: Add the label
log in that is a function.

85
00:04:13.710 --> 00:04:14.660
&gt;&gt; Will Sentance: Very nice.

86
00:04:14.660 --> 00:04:17.590
I really like how Griffin
was really precise there.

87
00:04:17.590 --> 00:04:20.050
Was it standard.

88
00:04:20.050 --> 00:04:20.670
Who knows?

89
00:04:20.670 --> 00:04:23.000
It was very precise.

90
00:04:23.000 --> 00:04:23.653
There we are.

91
00:04:23.653 --> 00:04:26.468
User creator has a property prototype,

92
00:04:26.468 --> 00:04:32.094
which is an object in it's own right with
the property log in that we just added and

93
00:04:32.094 --> 00:04:37.610
associated the function value with
the property, the method log in.

94
00:04:37.610 --> 00:04:40.170
Ok now Mohammed next line.

95
00:04:42.320 --> 00:04:44.310
&gt;&gt; Mohammed: We're creating
a variable called user one,

96
00:04:44.310 --> 00:04:47.050
and
&gt;&gt; Will Sentance: Why do I always ask so

97
00:04:47.050 --> 00:04:48.260
many people the same thing.

98
00:04:48.260 --> 00:04:52.160
Yeah Good and we don't know
what it's gonna be yet, do we?

99
00:04:52.160 --> 00:04:53.680
By the way, let me be really clear.

100
00:04:53.680 --> 00:04:57.790
JavaScript at this point isn't going,
I tee myself up for an object.

101
00:04:57.790 --> 00:05:00.250
It does not know what's gonna be
stored there yet, it has no idea.

102
00:05:00.250 --> 00:05:05.400
In my optimizer,
to be honest, particular Java

103
00:05:05.400 --> 00:05:10.420
engines do smart things to optimize what
they do, but It is, for now, an undefined.

104
00:05:10.420 --> 00:05:11.798
We do not know what's gonna be returned.

105
00:05:11.798 --> 00:05:17.320
Okay, so now, what happens in that line?

106
00:05:17.320 --> 00:05:21.850
Let's do it all together, because we've
missed out doing this for a few times.

107
00:05:21.850 --> 00:05:23.850
We're gonna call the function
user creator, and

108
00:05:23.850 --> 00:05:25.810
create, together, a brand new.

109
00:05:25.810 --> 00:05:27.270
&gt;&gt; Group: Excecution context.

110
00:05:27.270 --> 00:05:28.420
&gt;&gt; Will Sentance: Beautiful.

111
00:05:28.420 --> 00:05:29.710
So there on the bottom is global.

112
00:05:29.710 --> 00:05:36.640
We're always in global's execution
context, and we add the userCreator

113
00:05:36.640 --> 00:05:41.460
execution context with Eva is, Eva and 9.

114
00:05:41.460 --> 00:05:47.130
Okay, new execution context for
userCreator.

115
00:05:48.260 --> 00:05:53.230
There it is with Eva and 9.

116
00:05:53.230 --> 00:05:57.200
So we're running the userCreator
functionality, and we say whatever gets

117
00:05:57.200 --> 00:06:01.170
returned out of running this function
is going to be assigned where, Katie?

118
00:06:01.170 --> 00:06:05.440
&gt;&gt; Katie: To the variable user1.

119
00:06:05.440 --> 00:06:06.190
&gt;&gt; Will Sentance: Perfect, user1.

120
00:06:06.190 --> 00:06:10.710
So let's create a big old
execution context for this.

121
00:06:10.710 --> 00:06:12.360
There it is.

122
00:06:12.360 --> 00:06:16.600
We've got execution context
in which we have our

123
00:06:17.670 --> 00:06:22.480
local memory where anything that gets
declared inside this function gets stored.

124
00:06:23.660 --> 00:06:27.210
All right, and we know that whatever is
gonna be returned out of this function

125
00:06:27.210 --> 00:06:31.550
call, whatever gets returned
out Will be stored in

126
00:06:31.550 --> 00:06:35.590
the user one label in the global
execution context memory.

127
00:06:35.590 --> 00:06:40.870
Good, okay, but we round this function

128
00:06:40.870 --> 00:06:44.080
all importantly with something very
special in front of it, didn't we?

129
00:06:44.080 --> 00:06:49.380
I'm gonna do it in red so that we can know
we're dealing with it the whole time.

130
00:06:49.380 --> 00:06:55.190
You ran it with this Showed him,
I think that's nicer.

131
00:06:55.190 --> 00:06:56.370
There we go.

132
00:06:56.370 --> 00:06:59.920
With this new keyword infront.

133
00:07:01.550 --> 00:07:05.830
Now is that new keyword gonna do
stuff in here automatically for us?

134
00:07:05.830 --> 00:07:07.260
&gt;&gt; Group: Yes, yes.
&gt;&gt; Will Sentance: Yes, exactly.

135
00:07:08.780 --> 00:07:11.859
What's the very first thing it's
gonna do automatically inside for us?

136
00:07:13.140 --> 00:07:14.740
Who wants to give it a shot?

137
00:07:14.740 --> 00:07:18.780
Griffin, what's the very first thing
the new keyword's gonna do automatically

138
00:07:18.780 --> 00:07:21.070
inside of here?

139
00:07:21.070 --> 00:07:22.370
What's it say?

140
00:07:23.440 --> 00:07:25.410
What's it gonna do automatically for
us, the first thing?

141
00:07:25.410 --> 00:07:27.390
&gt;&gt; Griffin: Create an empty object?

142
00:07:27.390 --> 00:07:29.880
&gt;&gt; Will Sentance: Create an empty object.

143
00:07:29.880 --> 00:07:33.860
And assign the object to what Label.

144
00:07:33.860 --> 00:07:35.351
&gt;&gt; Griffin: This.

145
00:07:35.351 --> 00:07:41.303
&gt;&gt; Will Sentance: Exactly, it's gonna say,

146
00:07:41.303 --> 00:07:46.520
this is an empty object.

147
00:07:46.520 --> 00:07:49.070
That we've already done.

148
00:07:49.070 --> 00:07:53.200
Before that,
what's our standard thing we do?

149
00:07:53.200 --> 00:07:58.410
When we enter our execution context,
Andrew, what's the first thing we fill in?

150
00:08:01.460 --> 00:08:03.576
What's the first thing we put in,
Mohammed?

151
00:08:03.576 --> 00:08:04.362
&gt;&gt; Mohammed: The parameters.

152
00:08:04.362 --> 00:08:05.952
&gt;&gt; Will Sentance: Parameters,
so what are they?

153
00:08:05.952 --> 00:08:07.019
&gt;&gt; Mohammed: Eva and 9.

154
00:08:07.019 --> 00:08:08.390
&gt;&gt; Will Sentance: So name is what?

155
00:08:08.390 --> 00:08:09.160
&gt;&gt; Mohammed: Eva.

156
00:08:09.160 --> 00:08:12.360
&gt;&gt; Will Sentance: Yeah, and score is
&gt;&gt; Mohammed: 9.

157
00:08:12.360 --> 00:08:15.121
&gt;&gt; Will Sentance: 9, okay.

158
00:08:15.121 --> 00:08:18.750
So those are the regular things we do,
and we start like Eva is filled in name.

159
00:08:18.750 --> 00:08:23.080
9 is filled in score, but
in the first line there,

160
00:08:23.080 --> 00:08:27.800
in before this .name,
this is going to be set to,

161
00:08:28.900 --> 00:08:31.720
an empty object that's been made for
us by JavaScript.

162
00:08:31.720 --> 00:08:35.450
We didn't say create an empty object, well
we did, only by using the new keyword.

163
00:08:35.450 --> 00:08:41.217
Inside, under there, you'll hear
people say the function's context,

164
00:08:41.217 --> 00:08:43.698
has been set to an empty object.

165
00:08:43.698 --> 00:08:46.470
People often refer to this as,
the context.

166
00:08:46.470 --> 00:08:46.980
I don't like that.

167
00:08:46.980 --> 00:08:48.650
This is our execution context.

168
00:08:48.650 --> 00:08:50.240
This is our context.

169
00:08:50.240 --> 00:08:51.832
I don't love that.

170
00:08:51.832 --> 00:08:54.874
It's very ambiguous,
confusing terminology.

171
00:08:54.874 --> 00:08:58.410
But yeah, the this keyword has
been set to an empty object.

172
00:08:58.410 --> 00:09:02.672
All right, is that all that
we automated at this stage?

173
00:09:02.672 --> 00:09:04.200
Lindsey, do we automate anything else?

174
00:09:07.500 --> 00:09:09.255
Okay, do you want to give it a shot?

175
00:09:09.255 --> 00:09:11.392
&gt;&gt; Lindsay: Did we also automate the bond?

176
00:09:11.392 --> 00:09:12.166
&gt;&gt; Will Sentance: We did.

177
00:09:12.166 --> 00:09:15.160
&gt;&gt; Lindsay: Between that empty object and
the object?

178
00:09:16.310 --> 00:09:20.633
&gt;&gt; Will Sentance: The user
creator.prototype object?

179
00:09:20.633 --> 00:09:25.475
I see, whenever we create any md-object,
yeah but this one we're gonna set,

180
00:09:25.475 --> 00:09:27.800
actually, the bond is gonna be made.

181
00:09:27.800 --> 00:09:29.866
Do you remember when we
made to function store?

182
00:09:29.866 --> 00:09:31.745
And we said all these objects
is when they get returned out.

183
00:09:31.745 --> 00:09:33.670
So this gets returned out to User 1.

184
00:09:33.670 --> 00:09:37.871
This object with new user, this used to
be called user manually set this would be

185
00:09:37.871 --> 00:09:41.836
New User, and we used to manually set
this to be to let user function store.

186
00:09:41.836 --> 00:09:44.480
Which was a collection of functions,

187
00:09:44.480 --> 00:09:48.788
now we don't get to do that manually so
instead what do we use?

188
00:09:48.788 --> 00:09:53.908
We use the fact that
JavaScript has this special

189
00:09:53.908 --> 00:09:59.413
prototype per object stored
on its function here.

190
00:09:59.413 --> 00:10:03.749
And by default this Is gonna link,

191
00:10:03.749 --> 00:10:09.134
this underscore proto underscore is going

192
00:10:09.134 --> 00:10:13.921
to link to usercreator.prototype,

193
00:10:13.921 --> 00:10:20.064
which is just, look at that,
just this object.

194
00:10:20.064 --> 00:10:24.852
And just like before, our object
that we're gonna return now, and

195
00:10:24.852 --> 00:10:26.210
store in user one.

196
00:10:26.210 --> 00:10:27.756
What's our overall goal?

197
00:10:27.756 --> 00:10:31.936
To write user1.increment, and

198
00:10:31.936 --> 00:10:37.996
call it that when we don't
find on user1 itself.

199
00:10:37.996 --> 00:10:42.156
If we don't find on this one itself
an increment property, somehow we're gonna

200
00:10:42.156 --> 00:10:46.310
look up through a chain to an object in
which we have the increment function.

201
00:10:46.310 --> 00:10:47.080
And what do you know?

202
00:10:47.080 --> 00:10:51.690
We can do that,
because we're declaring this object in by

203
00:10:51.690 --> 00:10:56.395
automatically with a keyword this,
and it's also getting

204
00:10:56.395 --> 00:11:01.195
automatically a bond to
the function that's being called,

205
00:11:01.195 --> 00:11:05.829
name.prototype, which is
where that object is stored.

206
00:11:05.829 --> 00:11:09.700
But just because we use what keyword,
Griffin?

207
00:11:09.700 --> 00:11:10.790
&gt;&gt; Griffin: New.

208
00:11:10.790 --> 00:11:13.076
&gt;&gt; Will Sentance: The new keyword,
exactly.

209
00:11:13.076 --> 00:11:15.390
All right, so
we've done a ton of automation already.

210
00:11:15.390 --> 00:11:18.850
We haven't had to write a single
line of code in here, but now we do.

211
00:11:18.850 --> 00:11:20.703
Cuz now we gotta do the property setting.

212
00:11:20.703 --> 00:11:25.250
So, at this point lets have Shelby,

213
00:11:25.250 --> 00:11:30.100
we hit the body of the function at last.

214
00:11:30.100 --> 00:11:33.004
All this was automated before we
even hit the body of the function.

215
00:11:33.004 --> 00:11:34.809
So in we go to the body of function now.

216
00:11:34.809 --> 00:11:35.385
Whats it say?

217
00:11:35.385 --> 00:11:36.640
This.name equals name.

218
00:11:36.640 --> 00:11:38.058
Well what do we look for first Shelby?

219
00:11:40.101 --> 00:11:41.070
&gt;&gt; Shelby: The parameter?

220
00:11:41.070 --> 00:11:42.174
&gt;&gt; Will Sentance: Well
we done have parameter.

221
00:11:42.174 --> 00:11:43.072
I see what you're saying.

222
00:11:43.072 --> 00:11:44.399
Let's do the left hand side first.

223
00:11:44.399 --> 00:11:46.628
What is this at this point?

224
00:11:48.684 --> 00:11:49.970
&gt;&gt; Will Sentance: Griffin
what is this at this point?

225
00:11:51.395 --> 00:11:53.195
&gt;&gt; Griffin: That would be user1?

226
00:11:53.195 --> 00:11:54.555
&gt;&gt; Will Sentance: User1?

227
00:11:54.555 --> 00:11:56.060
No.
&gt;&gt; Katie: Empty object.

228
00:11:56.060 --> 00:11:58.053
&gt;&gt; Will Sentance: It's an empty object,
it's user1.

229
00:11:58.053 --> 00:12:02.632
That empty object is gonna become user1
only when we return out of user creator.

230
00:12:02.632 --> 00:12:04.341
So, you're right it's gonna be user one.

231
00:12:04.341 --> 00:12:07.443
This object is gonna be returned out,
we go back to global it's gonna be stored

232
00:12:07.443 --> 00:12:10.630
in user1, but right now user1 doesn't
even know what's happening in here.

233
00:12:10.630 --> 00:12:13.304
User1 doesn't care what's happening
in here, until we return out, okay?

234
00:12:13.304 --> 00:12:17.757
So as you said Katie?

235
00:12:17.757 --> 00:12:18.773
&gt;&gt; Katie: This refers to an empty object

236
00:12:18.773 --> 00:12:19.402
so-
&gt;&gt; Will Sentance: And

237
00:12:19.402 --> 00:12:20.454
what do we stick into that empty object?

238
00:12:20.454 --> 00:12:22.779
&gt;&gt; Katie: The property name?

239
00:12:22.779 --> 00:12:26.386
&gt;&gt; Will Sentance: Perfect,
the property name to what value?

240
00:12:26.386 --> 00:12:28.210
&gt;&gt; Katie: Input name which is Eva.

241
00:12:31.150 --> 00:12:32.293
&gt;&gt; Will Sentance: There it is.

242
00:12:32.293 --> 00:12:36.160
Which is Eva and
what is the next line tell us to do?

243
00:12:36.160 --> 00:12:38.462
This.score.

244
00:12:38.462 --> 00:12:42.923
&gt;&gt; Katie: So we add score as a property to
the this object instead of equal to nine.

245
00:12:42.923 --> 00:12:44.781
&gt;&gt; Will Sentance: Very good job,
very good job Katie.

246
00:12:44.781 --> 00:12:49.033
And now, what's our final thing that gets
automated before we had to return stuff

247
00:12:49.033 --> 00:12:52.990
out manually, what's that final thing
that gets automated inside there?

248
00:12:52.990 --> 00:12:57.294
Lindsay, before we have to
manually return this object out,

249
00:12:57.294 --> 00:12:59.543
how do we get the object out now?

250
00:12:59.543 --> 00:13:00.131
Art?

251
00:13:00.131 --> 00:13:03.310
&gt;&gt; Art: Do the prototype of the bond,
&gt;&gt; Will Sentance: How do we get

252
00:13:03.310 --> 00:13:05.030
that object out?

253
00:13:05.030 --> 00:13:06.979
Andrea?

254
00:13:06.979 --> 00:13:08.510
&gt;&gt; Andrea: It's just automatic
we don't have to hit return.

255
00:13:08.510 --> 00:13:10.496
&gt;&gt; Will Sentance: We don't
have to write return at all,

256
00:13:10.496 --> 00:13:12.303
it's automatically returned out.

257
00:13:12.303 --> 00:13:13.304
There it is.

258
00:13:13.304 --> 00:13:14.807
I'm doing it in pink to show
that it's the automatic.

259
00:13:14.807 --> 00:13:17.530
So everything in pink is
done automatically for us.

260
00:13:17.530 --> 00:13:20.771
It's automatically
returning out that this.

261
00:13:20.771 --> 00:13:23.040
You can basically imagine inside of here.

262
00:13:23.040 --> 00:13:24.520
This is what JavaScript does.

263
00:13:24.520 --> 00:13:28.902
It goes, we can write this ourselves, but

264
00:13:28.902 --> 00:13:33.043
it goes, this equals object.create so

265
00:13:33.043 --> 00:13:38.888
create now the object,
object.create, and parse in,

266
00:13:38.888 --> 00:13:44.220
object.create and
parse in, go ahead Katie.

267
00:13:44.220 --> 00:13:45.174
&gt;&gt; Katie: User creator?

268
00:13:45.174 --> 00:13:50.120
&gt;&gt; Will Sentance: User creator,
but not the whole thing.

269
00:13:50.120 --> 00:13:53.130
Because user creator, the whole thing,
its only property is prototype.

270
00:13:53.130 --> 00:13:58.243
So it's usercreator.prototype, which is
this little baby object, or not a baby

271
00:13:58.243 --> 00:14:03.281
object, it's a big old object here with
all those functions we just stored on it,

272
00:14:03.281 --> 00:14:08.397
usercreated.prototype.increment, increment
is the label of that function,

273
00:14:08.397 --> 00:14:13.026
login is the label of that function
stored in this object within an object.

274
00:14:13.026 --> 00:14:17.682
So, usercreated is itself an object,
inside of it, it had a property object,

275
00:14:17.682 --> 00:14:20.126
a prototype, which in itself an object.

276
00:14:20.126 --> 00:14:23.320
That's the object that we're
making the bond for this too.

277
00:14:23.320 --> 00:14:26.470
So this is the first bit as automated,
and the end bit,

278
00:14:26.470 --> 00:14:28.730
and then we do our manual stuff.

279
00:14:28.730 --> 00:14:34.127
We do this.name = Eva,

280
00:14:34.127 --> 00:14:39.270
and this.score = 9.

281
00:14:39.270 --> 00:14:43.550
And then again, more automated stuff.

282
00:14:43.550 --> 00:14:46.802
Return what, Katie?

283
00:14:46.802 --> 00:14:47.721
&gt;&gt; Katie: Return this.

284
00:14:47.721 --> 00:14:49.030
&gt;&gt; Will Sentance: Return this.

285
00:14:49.030 --> 00:14:53.170
We don't have to write any of this
stuff in pink, it's all done for us.

286
00:14:53.170 --> 00:14:58.490
All we have to do is this stuff,
but let's be clear, Man.

287
00:14:58.490 --> 00:15:01.244
Do we now see what's going
on behind the new key word?

288
00:15:01.244 --> 00:15:02.930
A lot of stuff's going on
behind the new key word.

289
00:15:02.930 --> 00:15:06.140
Do you now see why this is senior
developer's favorite interview

290
00:15:06.140 --> 00:15:07.820
question to ask?

291
00:15:07.820 --> 00:15:10.497
Or VP' s to ask senior developers?

292
00:15:10.497 --> 00:15:15.228
This level of sophistication allows us,
we'll see in a second,

293
00:15:15.228 --> 00:15:19.364
to write far better Object
oriented code in JavaScript.

294
00:15:19.364 --> 00:15:25.050
So, you return out that object,
out it comes, and what's in it?

295
00:15:25.050 --> 00:15:33.190
But of course, only name,
which is Eva, and score, which is 9.

296
00:15:33.190 --> 00:15:38.305
Out of return, but of course,
it also has its little

297
00:15:38.305 --> 00:15:44.021
Bonus_proto_, which is pointing to where,
Griffin?

298
00:15:44.021 --> 00:15:45.675
&gt;&gt; Griffin: To the userCreator.

299
00:15:45.675 --> 00:15:48.770
&gt;&gt; Will Sentance: .prootype object.

300
00:15:48.770 --> 00:15:51.463
Here's our object of interest.

301
00:15:51.463 --> 00:15:52.677
There it is, that guy there.

302
00:15:52.677 --> 00:15:55.650
So now there it is, user 1.

303
00:15:55.650 --> 00:15:57.460
He's no longer undefined.

304
00:15:57.460 --> 00:16:01.816
We returned out the object from running
Use a creator with a new keyword in front

305
00:16:01.816 --> 00:16:04.980
of it and say whatever comes
out store in what, Katie?

306
00:16:04.980 --> 00:16:05.750
&gt;&gt; Katie: In user1?

307
00:16:05.750 --> 00:16:07.200
&gt;&gt; Will Sentance: There it is,
stored in user1.

308
00:16:07.200 --> 00:16:09.730
Lets just write it in
in our global memory.

309
00:16:09.730 --> 00:16:16.420
We have name is Eva, score is 9.

310
00:16:16.420 --> 00:16:21.120
And under the hood a little bond.

311
00:16:22.550 --> 00:16:23.390
I should use the green.

312
00:16:23.390 --> 00:16:27.245
A little bond proto is bonded to

313
00:16:27.245 --> 00:16:35.590
userCreator.prototype, which
is this guy here.

314
00:16:36.650 --> 00:16:41.560
There it is,
meaning now we do our all-important check.

315
00:16:41.560 --> 00:16:42.790
Final line there.

316
00:16:42.790 --> 00:16:44.710
Andrea, I'm looking at you.

317
00:16:45.780 --> 00:16:50.240
Andrea, what does JavaScript
do went it sees user1?

318
00:16:50.240 --> 00:16:51.070
Where's it go looking?

319
00:16:52.430 --> 00:16:55.068
&gt;&gt; Andrea: It's gonna go look-
&gt;&gt; Will Sentance: We're in

320
00:16:55.068 --> 00:16:58.840
the global execution context now,
so where does it go look for user1?

321
00:16:58.840 --> 00:16:59.680
&gt;&gt; Andrea: In the global.

322
00:16:59.680 --> 00:17:00.211
&gt;&gt; Will Sentance: Off it goes.

323
00:17:00.211 --> 00:17:00.926
Does it find it?

324
00:17:00.926 --> 00:17:02.066
&gt;&gt; Andrea: Yes.

325
00:17:02.066 --> 00:17:05.804
&gt;&gt; Will Sentance: Yes, hooray.

326
00:17:05.804 --> 00:17:06.977
Now that's not done yet is it?

327
00:17:06.977 --> 00:17:07.644
&gt;&gt; Andrea: No.

328
00:17:07.644 --> 00:17:10.330
&gt;&gt; Will Sentance: It's got this property,
increment.

329
00:17:10.330 --> 00:17:13.490
Now is it gonna be
successful looking here?

330
00:17:15.160 --> 00:17:17.340
All this work for nothing.

331
00:17:19.090 --> 00:17:19.770
Do we actually panic, Andrew?

332
00:17:19.770 --> 00:17:21.180
&gt;&gt; Andrew: No.

333
00:17:21.180 --> 00:17:22.830
&gt;&gt; Will Sentance: No, we don't.

334
00:17:22.830 --> 00:17:27.774
Because this object,
&gt;&gt; Will Sentance: When it was

335
00:17:27.774 --> 00:17:32.796
created under its author name,
this, got a special bond to

336
00:17:32.796 --> 00:17:38.710
userCreator.protoype, which is
an object full of functions.

337
00:17:38.710 --> 00:17:43.449
So when I don't find increment on user1,
where do I go looking, Andrea?

338
00:17:43.449 --> 00:17:46.679
&gt;&gt; Andrea: It's gonna have
that preference, proto, and

339
00:17:46.679 --> 00:17:49.030
it's gonna look at the protoype.

340
00:17:49.030 --> 00:17:53.234
&gt;&gt; Will Sentance: I wanna repeat,
it's gonna have that proto_proto_,

341
00:17:53.234 --> 00:17:58.690
which is a reference to this
userCreater.prototype location.

342
00:17:58.690 --> 00:17:59.220
Very well put, Andrea.

343
00:17:59.220 --> 00:18:01.957
And what does it find up there, Andrea?

344
00:18:01.957 --> 00:18:03.311
&gt;&gt; Andrea: It finds the increment.

345
00:18:03.311 --> 00:18:05.150
&gt;&gt; Will Sentance: And there it is,
it finds the increment of a function.

346
00:18:05.150 --> 00:18:08.325
It can use that functionality
to make an execution context.

347
00:18:08.325 --> 00:18:11.440
There is is, a new execution context.

348
00:18:11.440 --> 00:18:13.970
Let's just make sure we know
what's gonna happen in here.

349
00:18:13.970 --> 00:18:19.520
We push this guy now, cuz we have
the functionality now, we've found it.

350
00:18:19.520 --> 00:18:23.170
We've successfully found the function,
no problem. It wasn't on user1, directly.

351
00:18:23.170 --> 00:18:27.997
It was on user1's _proto_ reference,
from when user1 was born as this,

352
00:18:27.997 --> 00:18:30.740
inside the call to user a creator.

353
00:18:30.740 --> 00:18:34.520
And in we go, and the first line
probably says this.score++, right?

354
00:18:35.834 --> 00:18:38.580
Okay, and so what's the first thing
we do in our local execution context

355
00:18:38.580 --> 00:18:39.209
local memory?

356
00:18:42.420 --> 00:18:46.040
&gt;&gt; Will Sentance: Cuz we don't have a this
yet, do we, so what's the this set to?

357
00:18:46.040 --> 00:18:48.220
&gt;&gt; Andrea: It assigns it to user1.

358
00:18:48.220 --> 00:18:53.140
&gt;&gt; Will Sentance: Exactly, whatever's
left of the dot, which is user1.

359
00:18:53.140 --> 00:18:59.570
And so this line here basically
becomes user1.score++.

360
00:18:59.570 --> 00:19:02.510
And where do we look for user1 first?

361
00:19:02.510 --> 00:19:05.130
&gt;&gt; Andrea: In the local.
&gt;&gt; Will Sentance: And do we find it there?

362
00:19:05.130 --> 00:19:05.750
Where do we go?

363
00:19:06.770 --> 00:19:08.915
Global, and what do we find?

364
00:19:08.915 --> 00:19:09.569
Probably score.

365
00:19:09.569 --> 00:19:11.280
What do we do with it?

366
00:19:12.300 --> 00:19:14.310
&gt;&gt; Andrea: We increment it 1.

367
00:19:17.490 --> 00:19:18.889
&gt;&gt; Will Sentance: To 10.
All right,

368
00:19:18.889 --> 00:19:23.410
we have achieved our fundamental goal.

369
00:19:23.410 --> 00:19:25.810
And look at how much
less code we've written.

370
00:19:25.810 --> 00:19:32.890
But also, man, look at how much was going
on automatically for us behind the scenes.

371
00:19:32.890 --> 00:19:37.814
When we used that new key word,
we did all of this stuff here and

372
00:19:37.814 --> 00:19:41.620
more because we had to
do some automated stuff.

373
00:19:41.620 --> 00:19:45.530
And it's all now explicit.

374
00:19:45.530 --> 00:19:49.830
Now I will say this,
now do you see why I get nervous saying,

375
00:19:49.830 --> 00:19:52.264
we look in user1's prototype?

376
00:19:52.264 --> 00:19:57.760
I see, okay, it's called prototype,
that object full of functions.

377
00:19:57.760 --> 00:20:01.380
But to get to that bit we

378
00:20:01.380 --> 00:20:06.090
go to its proto property,
which is a reference to an object.

379
00:20:06.090 --> 00:20:07.300
We don't care it's called prototype,
really.

380
00:20:07.300 --> 00:20:11.510
It's this object we care about,
full of functions.

381
00:20:11.510 --> 00:20:16.100
It just happens to be stored
in userCreator.prototype.

382
00:20:16.100 --> 00:20:17.965
So let's distinguish very clearly,

383
00:20:17.965 --> 00:20:23.910
_proto_ is the property on the individual
object in which we returned out.

384
00:20:23.910 --> 00:20:28.830
If we did a new user2,
if we had run userCreator all over again,

385
00:20:28.830 --> 00:20:34.123
created a user2,
&gt;&gt; Will Sentance: Created a user2,

386
00:20:34.123 --> 00:20:37.038
it would have a new name.

387
00:20:37.038 --> 00:20:42.609
Let's say name, I don't know.

388
00:20:42.609 --> 00:20:46.300
Say name Art and score 12.

389
00:20:46.300 --> 00:20:54.480
It too would have an _proto with
a bond to this guy up here.

390
00:20:54.480 --> 00:20:59.712
If user2 had been created
by the line of code,

391
00:20:59.712 --> 00:21:07.420
user two = new user and
it called userCreator with Art and 12.

392
00:21:07.420 --> 00:21:09.000
That would have made user2.

393
00:21:09.000 --> 00:21:13.554
This object with its own proto bond up to
this shared function store that we just

394
00:21:13.554 --> 00:21:18.467
only use this shared function store, cuz
JavaScript needs a default place to know.

395
00:21:18.467 --> 00:21:22.431
Cuz we don't get when we create
the object using the new keyword,

396
00:21:22.431 --> 00:21:26.750
we don't get to set this automatically for
ourselves, manually.

397
00:21:26.750 --> 00:21:28.920
So we can't call it a nice name
like userFunctionStore and

398
00:21:28.920 --> 00:21:30.390
objectFullOfFunctions.

399
00:21:30.390 --> 00:21:33.630
We need to have a default place to put
all the functions we want each of these

400
00:21:33.630 --> 00:21:34.740
objects have access to.

401
00:21:34.740 --> 00:21:39.033
And the default place is just
the name of the constructing

402
00:21:39.033 --> 00:21:41.750
object's function.prototype.

403
00:21:41.750 --> 00:21:42.499
And it's this object.

