WEBVTT

1
00:00:00.410 --> 00:00:02.250
&gt;&gt; Will Sentance: What alternative
techniques do we have for

2
00:00:02.250 --> 00:00:04.190
creating objects?

3
00:00:04.190 --> 00:00:06.200
So we're gonna see all sorts
of sophisticated ways.

4
00:00:06.200 --> 00:00:08.950
But what about just declaring an object?

5
00:00:08.950 --> 00:00:11.550
What alternative way could
I declare an object?

6
00:00:11.550 --> 00:00:12.440
Andrea?

7
00:00:12.440 --> 00:00:15.600
Just declaring an object?
&gt;&gt; Andrea: Curly brackets?

8
00:00:15.600 --> 00:00:17.132
Empty [CROSSTALK]
&gt;&gt; Will Sentance: An empty object and

9
00:00:17.132 --> 00:00:19.740
then fill it in with dot notation.

10
00:00:19.740 --> 00:00:22.120
Yes spot on, using dot notation.

11
00:00:22.120 --> 00:00:25.240
We're just gonna encounter all of these
quickly to make sure we know, and

12
00:00:25.240 --> 00:00:31.050
the next one's gonna introduce us to a
very special approach to creating objects.

13
00:00:31.050 --> 00:00:32.640
So this one, what's happening?

14
00:00:34.400 --> 00:00:37.530
Shelby, what's happening in line one,

15
00:00:37.530 --> 00:00:41.425
Shelby?
&gt;&gt; Shelby: User2 is an empty object?

16
00:00:41.425 --> 00:00:42.025
&gt;&gt; Will Sentance: Yep, and

17
00:00:42.025 --> 00:00:47.300
then what do we do with it?
&gt;&gt; Will Sentance: Shelby?

18
00:00:47.300 --> 00:00:50.195
&gt;&gt; Shelby: Fill it with name Tim.

19
00:00:50.195 --> 00:00:50.733
&gt;&gt; Will Sentance: Yep,

20
00:00:50.733 --> 00:00:56.769
we add the property, assign the property,
name the value of Tim.

21
00:00:56.769 --> 00:00:57.270
Sound good?

22
00:00:57.270 --> 00:01:02.020
How would you say that to score?
&gt;&gt; Shelby: Assign the score property of 6.

23
00:01:02.020 --> 00:01:03.390
&gt;&gt; Will Sentance: Yes, perfect.

24
00:01:03.390 --> 00:01:07.050
And then increment method,
and there it is.

25
00:01:07.050 --> 00:01:11.180
Good, and
we could also call user2.increment and

26
00:01:11.180 --> 00:01:12.550
would reach the guy here.

27
00:01:12.550 --> 00:01:17.150
Good, all right, a quick note,
we didn't use square bracket notation.

28
00:01:17.150 --> 00:01:20.500
We only use square bracket
notation in one condition.

29
00:01:20.500 --> 00:01:22.010
What is that condition?

30
00:01:22.010 --> 00:01:26.380
Griffin?
&gt;&gt; Griffin: I'm gonna use an array, no?

31
00:01:26.380 --> 00:01:27.040
&gt;&gt; Will Sentance: No, for

32
00:01:27.040 --> 00:01:29.150
object assignment, for
object property assignment.

33
00:01:29.150 --> 00:01:30.820
That's a fair point, for arrays as well.

34
00:01:30.820 --> 00:01:34.500
But for assigning stuff to objects,
or accessing stuff in objects,

35
00:01:34.500 --> 00:01:37.020
only one condition, Andrew?
&gt;&gt; Andrew: A name is a variable?

36
00:01:37.020 --> 00:01:37.550
&gt;&gt; Will Sentance: It's a variable.

37
00:01:37.550 --> 00:01:41.565
We don't yet know what it's gonna be until
evaluation time, until the run time.

38
00:01:41.565 --> 00:01:44.867
Cuz then we couldn't put dot because,

39
00:01:44.867 --> 00:01:48.978
suppose we had future score,
dot future score.

40
00:01:48.978 --> 00:01:50.610
It's going to look for
a property dot future score.

41
00:01:50.610 --> 00:01:53.383
Whereas what we want to do is
fill in that future score and

42
00:01:53.383 --> 00:01:55.530
evaluate to an actual value later on.

43
00:01:55.530 --> 00:01:57.330
We use square bracket notation for that.

44
00:01:57.330 --> 00:01:59.910
You never use square brackets with quotes.

45
00:01:59.910 --> 00:02:01.190
It's just non-standard.

46
00:02:01.190 --> 00:02:02.950
Always dot notation by default.

47
00:02:02.950 --> 00:02:07.030
All right,
anyone know a final way of declaring,

48
00:02:08.260 --> 00:02:11.440
another very interesting
way of declaring an object?

49
00:02:11.440 --> 00:02:14.120
You remember my little quiz
I sent around at the start.

50
00:02:14.120 --> 00:02:17.710
I did shout out this way.

51
00:02:17.710 --> 00:02:21.427
Katie?
&gt;&gt; Katie: Is it the object prototype is

52
00:02:21.427 --> 00:02:24.580
a create?
&gt;&gt; Will Sentance: Not a prototype, but

53
00:02:24.580 --> 00:02:27.350
the object has a dot create method on it.

54
00:02:28.380 --> 00:02:28.880
She's right.

55
00:02:30.010 --> 00:02:34.510
We can use this built-in
function object.create.

56
00:02:34.510 --> 00:02:36.780
Now we're gonna use it in
a very boring way here.

57
00:02:36.780 --> 00:02:37.800
But it is gonna turn out,

58
00:02:37.800 --> 00:02:43.030
this is going to give us a very powerful
set of bonus features we can use later on.

59
00:02:43.030 --> 00:02:47.720
So remember our goal here the whole time
is I want to build an application, and

60
00:02:47.720 --> 00:02:50.020
I want to model my data and

61
00:02:50.020 --> 00:02:54.390
functionality within it in a way
that's easy to to reason about.

62
00:02:54.390 --> 00:02:58.000
So my application has users and
functionality.

63
00:02:58.000 --> 00:03:04.720
I've decided the best way to capture that
is to wrap up each user as an object.

64
00:03:04.720 --> 00:03:09.790
We're seeing user1, 2, and 3 and to have
the relevant functionality that could

65
00:03:09.790 --> 00:03:13.990
ever be applied to that object, that user
data, immediately there on the object.

66
00:03:13.990 --> 00:03:16.880
That's my goal throughout today.

67
00:03:16.880 --> 00:03:18.980
So what are we doing here in line one?

68
00:03:18.980 --> 00:03:22.120
I'm not gonna expect you to guess.

69
00:03:22.120 --> 00:03:26.960
I'm just gonna tell you that in
line one here, this actually.

70
00:03:26.960 --> 00:03:28.440
Well what do we think it's doing?

71
00:03:28.440 --> 00:03:29.220
What do you think, Shelby?

72
00:03:29.220 --> 00:03:30.620
What do you think this line one is doing?

73
00:03:32.610 --> 00:03:33.840
What's the left-hand side doing first?

74
00:03:33.840 --> 00:03:37.300
You can do that.
&gt;&gt; Shelby: Labeling a variable user3.

75
00:03:37.300 --> 00:03:38.100
&gt;&gt; Will Sentance: Sure, and

76
00:03:38.100 --> 00:03:40.780
what's the right-hand side gonna
leave us with, do you think,

77
00:03:40.780 --> 00:03:43.760
Shelby?
&gt;&gt; Shelby: Creating an empty

78
00:03:43.760 --> 00:03:44.542
object.
&gt;&gt; Will Sentance: She's right.

79
00:03:44.542 --> 00:03:47.062
It creates an empty object, good job.

80
00:03:47.062 --> 00:03:52.381
Empty object, note by the way,
so we're gonna add something.

81
00:03:52.381 --> 00:03:56.950
The null is not the reason
this creates an empty object.

82
00:03:56.950 --> 00:04:00.130
We're gonna see later on,
I don't mind what you've passed in there,

83
00:04:00.130 --> 00:04:04.140
it ain't gonna affect the fact
this is an empty object.

84
00:04:04.140 --> 00:04:08.210
If we pass something else in,
we get some bonus hidden stuff.

85
00:04:08.210 --> 00:04:11.320
We'll see that later on, but
this line, object.create,

86
00:04:11.320 --> 00:04:14.870
creates an empty object regardless.

87
00:04:14.870 --> 00:04:18.920
Okay, so we have an empty
object called user3, Shelby,

88
00:04:18.920 --> 00:04:23.890
what's the next line say?
&gt;&gt; Shelby: Assigning the property name

89
00:04:23.890 --> 00:04:25.700
Eva.
&gt;&gt; Will Sentance: Eva, Art,

90
00:04:25.700 --> 00:04:28.330
next line.
&gt;&gt; Art: We're assigning visit property

91
00:04:28.330 --> 00:04:29.540
score with a value of 9.
&gt;&gt; Will Sentance: Good,

92
00:04:29.540 --> 00:04:34.514
and then the final line, Griffin.
&gt;&gt; Griffin: It's gonna be

93
00:04:34.514 --> 00:04:38.182
assigning the function [INAUDIBLE].
&gt;&gt; Will Sentance: With the name of

94
00:04:38.182 --> 00:04:40.239
the increment.
&gt;&gt; Griffin: [INAUDIBLE]

95
00:04:40.239 --> 00:04:40.740
&gt;&gt; Will Sentance: Good!

