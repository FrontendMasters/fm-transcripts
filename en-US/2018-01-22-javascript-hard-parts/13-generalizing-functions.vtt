WEBVTT

1
00:00:00.000 --> 00:00:01.374
&gt;&gt; Will Sentance: So
you love that function,

2
00:00:01.374 --> 00:00:03.356
you'll love this function even more.

3
00:00:03.356 --> 00:00:08.169
copyArrayandDivideBy2,
copyArrayandMultiplyBy2.

4
00:00:08.169 --> 00:00:11.326
I'm going to point out my little thing.

5
00:00:11.326 --> 00:00:12.005
Look at that.

6
00:00:12.005 --> 00:00:17.619
Pointing at copyArrayandMultipleBy2 and
copyArrayandDivideBy2.

7
00:00:17.619 --> 00:00:20.808
Such a unique and different function.

8
00:00:20.808 --> 00:00:25.014
Look.
&gt;&gt; Group: [LAUGH]

9
00:00:25.014 --> 00:00:27.280
&gt;&gt; Will Sentance: Exactly.

10
00:00:27.280 --> 00:00:29.670
Look at this, your negative function.

11
00:00:29.670 --> 00:00:33.500
Okay, but we're gonna walk through
it line by line to feel the pain.

12
00:00:33.500 --> 00:00:39.510
To feel why we might have
an alternative approach to this.

13
00:00:39.510 --> 00:00:42.410
Can people already spot what
principle we're breaking?

14
00:00:42.410 --> 00:00:43.830
Don't say it, just think it.

15
00:00:43.830 --> 00:00:48.170
I was trying to be funny but okay we're
gonna go through the code line by line.

16
00:00:48.170 --> 00:00:49.410
Lindsay, line one.

17
00:00:49.410 --> 00:00:52.847
And the nice thing about this is for us,
even though it's going to be frustrating,

18
00:00:52.847 --> 00:00:55.956
we're also getting a practice to talk
through our code really precisely.

19
00:00:55.956 --> 00:01:00.654
So Lindsay, line one, actually we'll
switch out the bits that change.

20
00:01:00.654 --> 00:01:04.335
Line one, what are we doing?
&gt;&gt; Lindsay: Declaring a function

21
00:01:04.335 --> 00:01:07.549
copyArrayAndDivideBy2.
&gt;&gt; Will Sentance: DivideBy2, so

22
00:01:07.549 --> 00:01:10.015
I'm just gonna switch out our word here.

23
00:01:10.015 --> 00:01:12.693
I'm actually gonna use
a different color pen so we can

24
00:01:12.693 --> 00:01:16.336
really appreciate just how redundant so
much of what we're doing here.

25
00:01:16.336 --> 00:01:19.952
So this function here takes in an array,
empty output array,

26
00:01:19.952 --> 00:01:24.680
iterates through the input array,
takes each element, divides it by two.

27
00:01:24.680 --> 00:01:26.960
Pushes the divided element
into the output array,

28
00:01:26.960 --> 00:01:30.400
returns that new array full
of the divided elements.

29
00:01:30.400 --> 00:01:31.720
Feels very similar.

30
00:01:31.720 --> 00:01:38.772
Okay, declared, next line, Lindsay?
&gt;&gt; Lindsay: Declares

31
00:01:38.772 --> 00:01:42.065
my array.
&gt;&gt; Will Sentance: Good as the array 1, 2,

32
00:01:42.065 --> 00:01:42.935
3.
&gt;&gt; Lindsay: 1, 2, 3.

33
00:01:42.935 --> 00:01:44.748
&gt;&gt; Will Sentance: Okay, good.

34
00:01:44.748 --> 00:01:47.243
Barb, next line, we got that already,
nothing to change.

35
00:01:47.243 --> 00:01:52.390
Go to next line, Barb.
&gt;&gt; Barb: We declare results and

36
00:01:52.390 --> 00:01:54.546
call the function.
&gt;&gt; Will Sentance: Aha, so

37
00:01:54.546 --> 00:01:59.576
we declare result, what do we initially
assign to the variable result,

38
00:01:59.576 --> 00:02:01.830
Barb?
&gt;&gt; Barb: [INAUDIBLE]

39
00:02:01.830 --> 00:02:02.390
&gt;&gt; Will Sentance: Do we know yet what

40
00:02:02.390 --> 00:02:03.130
we're gonna store there?

41
00:02:04.520 --> 00:02:06.800
You might think we sort of assign copy,
rend, divide by.

42
00:02:06.800 --> 00:02:08.300
No, we don't even know
we're gonna store there.

43
00:02:08.300 --> 00:02:09.990
So what do we temporarily assign there?

44
00:02:12.500 --> 00:02:13.200
&gt;&gt; Barb: Undefined.
&gt;&gt; Will Sentance: Undefined.

45
00:02:13.200 --> 00:02:15.470
JavaScript's default,
you could think it would be null.

46
00:02:15.470 --> 00:02:16.940
JavaScript default is undefined for

47
00:02:16.940 --> 00:02:21.160
anything where you don't have
an actual value associated with it.

48
00:02:21.160 --> 00:02:24.730
So we've now gotta go
do the work of calling

49
00:02:24.730 --> 00:02:27.500
that copyArrayAndDivideBy2 function.

50
00:02:27.500 --> 00:02:28.820
Do all the code inside it.

51
00:02:28.820 --> 00:02:31.950
Whatever gets returned out, that's what's
gonna be stored in result in the end.

52
00:02:31.950 --> 00:02:36.050
So all together, recalling a function.

53
00:02:36.050 --> 00:02:38.870
We're executing a function
copyArrayAndDivideBy2.

54
00:02:38.870 --> 00:02:40.730
Barb, how do I know we're
executing a function?

55
00:02:40.730 --> 00:02:41.760
Remind me.
&gt;&gt; Barb: Parentheses.

56
00:02:41.760 --> 00:02:42.980
&gt;&gt; Will Sentance: Parentheses.

57
00:02:42.980 --> 00:02:45.380
There are certain things
I'm gonna drum into us.

58
00:02:45.380 --> 00:02:48.240
Because by the way, seasoned
developers get thrown by this stuff.

59
00:02:48.240 --> 00:02:51.730
And when we get to closures,
knowing what calls a function,

60
00:02:51.730 --> 00:02:57.520
what refers to a function and what defines
a function are vital distinctions to know.

61
00:02:57.520 --> 00:02:58.950
So calling a function.

62
00:02:58.950 --> 00:03:02.220
We are therefore invoking or
executing a function.

63
00:03:02.220 --> 00:03:05.672
If we execute a function, we create,
everyone together, a brand new?

64
00:03:05.672 --> 00:03:09.299
&gt;&gt; Group: Execution context.

65
00:03:09.299 --> 00:03:09.804
&gt;&gt; Will Sentance: Clara,

66
00:03:09.804 --> 00:03:12.147
we created a brand new?
&gt;&gt; Clara: Execution context.

67
00:03:12.147 --> 00:03:13.877
&gt;&gt; Will Sentance: Excellent, Clara.

68
00:03:13.877 --> 00:03:17.004
Everyone else was right,
Clara just looked disappointed.

69
00:03:17.004 --> 00:03:19.367
All right, there we go, exactly.

70
00:03:19.367 --> 00:03:20.109
A new execution context.

71
00:03:20.109 --> 00:03:22.865
We don't yet know what's gonna
be stored on result, and so

72
00:03:22.865 --> 00:03:25.540
we create a new execution
context to find out.

73
00:03:25.540 --> 00:03:27.740
To go run the functionality and find out.

74
00:03:27.740 --> 00:03:32.170
There it is, copy array,
divide by two, passing one two three,

75
00:03:32.170 --> 00:03:34.890
which is the value
associated with my array.

76
00:03:34.890 --> 00:03:36.378
We just skipped a step there.

77
00:03:36.378 --> 00:03:38.528
We actually parse in my array directly,
but

78
00:03:38.528 --> 00:03:41.037
I just sort of live turned
it into the one two three.

79
00:03:41.037 --> 00:03:46.452
It actually gets parsed in and
we go we declare.

80
00:03:46.452 --> 00:03:48.852
What do we do first, Art?

81
00:03:48.852 --> 00:03:52.467
What do we do first when we start
calling copy array and divide by 2?

82
00:03:52.467 --> 00:03:56.078
What do we do before we do
our output declaration?

83
00:03:56.078 --> 00:03:57.086
&gt;&gt; Art: Context parameters.

84
00:03:57.086 --> 00:03:59.528
&gt;&gt; Will Sentance: Aha, talk me through it.

85
00:03:59.528 --> 00:04:00.648
&gt;&gt; Art: So we would go for

86
00:04:00.648 --> 00:04:02.648
that array length, and go for

87
00:04:02.648 --> 00:04:05.833
each one, and then take that array value.
&gt;&gt; Will Sentance: No,

88
00:04:05.833 --> 00:04:07.034
what's the first thing we do, dude?

89
00:04:07.034 --> 00:04:09.332
We do output.

90
00:04:09.332 --> 00:04:11.240
We do something else.

91
00:04:11.240 --> 00:04:13.645
What's the first we do when
we start calling a function?

92
00:04:13.645 --> 00:04:15.922
We fill in our place holders, don't we?
&gt;&gt; Art: Yep.

93
00:04:15.922 --> 00:04:17.145
&gt;&gt; Will Sentance: So talk me through that.

94
00:04:17.145 --> 00:04:19.399
&gt;&gt; Art: So variable would be 1, 2, 3.

95
00:04:19.399 --> 00:04:20.808
&gt;&gt; Will Sentance: Array would be 1, 2,

96
00:04:20.808 --> 00:04:21.587
3, got it.

97
00:04:21.587 --> 00:04:27.617
So our parameter array
takes the argument 1, 2, 3.

98
00:04:27.617 --> 00:04:29.335
Okay.

99
00:04:29.335 --> 00:04:31.679
Well, myArray, which is 1,2,3.

100
00:04:31.679 --> 00:04:36.782
Now, everywhere inside that function,
array is 1,2,3.

101
00:04:36.782 --> 00:04:39.940
Okay, Clara,
next we declare outputs in empty Array.

102
00:04:39.940 --> 00:04:42.420
What do we do now when we hit
the body of this for loop, Clara?

103
00:04:42.420 --> 00:04:46.429
Try to be as precise as possible.
&gt;&gt; Clara: So you assess the i.

104
00:04:46.429 --> 00:04:48.100
You declare i.
&gt;&gt; Will Sentance: Yeah.

105
00:04:48.100 --> 00:04:49.054
&gt;&gt; Clara: Set to be 0.

106
00:04:50.080 --> 00:04:52.790
You start sorting.
&gt;&gt; Will Sentance: Yep,

107
00:04:52.790 --> 00:04:55.180
you take an array sub zero which is what?
&gt;&gt; Clara: Yep,

108
00:04:55.180 --> 00:04:56.250
which is 1.
&gt;&gt; Will Sentance: 1 and

109
00:04:56.250 --> 00:04:59.550
we do what with it?
&gt;&gt; Clara: You

110
00:04:59.550 --> 00:05:00.400
divide it by 2.
&gt;&gt; Will Sentance: And

111
00:05:00.400 --> 00:05:04.610
get?
&gt;&gt; Clara: And get half and then you-

112
00:05:04.610 --> 00:05:06.070
&gt;&gt; Will Sentance: Also known as

113
00:05:06.070 --> 00:05:08.150
nought .5 in British English.
&gt;&gt; Clara: Yes, American.

114
00:05:08.150 --> 00:05:09.414
&gt;&gt; Will Sentance: Because what's

115
00:05:09.414 --> 00:05:13.202
an incredibly tough
conversation about equity in

116
00:05:13.202 --> 00:05:16.638
the company after telling
someone they got.

117
00:05:16.638 --> 00:05:17.266
No, I can't, mate.

118
00:05:17.266 --> 00:05:19.715
It was so embarrassing,
cuz they didn't know what nought meant.

119
00:05:19.715 --> 00:05:21.802
They thought it meant like five or
something.

120
00:05:21.802 --> 00:05:24.832
It was really phew a tough day.

121
00:05:24.832 --> 00:05:29.606
All right, okay, and then what do
we do with that nor, with that 0.5,

122
00:05:29.606 --> 00:05:32.530
Clara?
&gt;&gt; Clara: That's pushed onto outputs.

123
00:05:32.530 --> 00:05:33.360
&gt;&gt; Will Sentance: Good, there it is.

124
00:05:33.360 --> 00:05:34.610
And we do that a few more times.

125
00:05:34.610 --> 00:05:36.380
We take sub 1, we get the 2.

126
00:05:36.380 --> 00:05:37.470
We divide 2 by 2.

127
00:05:37.470 --> 00:05:38.788
We get 1, 0.5, 1, 1.5.

128
00:05:38.788 --> 00:05:44.940
And then Clara, we hit the all
important return expression.

129
00:05:44.940 --> 00:05:47.800
&gt;&gt; Clara: Yep, return statements and

130
00:05:47.800 --> 00:05:53.750
your data is returned to your global-
&gt;&gt; Will Sentance: Execution

131
00:05:53.750 --> 00:05:56.040
context, where it is assigned to result.

132
00:05:56.040 --> 00:06:00.564
We didn't do our call stack, we forgot to,
but copy rate divided by two is added,

133
00:06:00.564 --> 00:06:02.148
pushed and then popped off.

