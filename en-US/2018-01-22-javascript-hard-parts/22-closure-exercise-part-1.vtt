WEBVTT

1
00:00:00.510 --> 00:00:05.110
&gt;&gt; Will: We just started encountering some
mysterious behaviors by JavaScript there,

2
00:00:05.110 --> 00:00:06.410
right, some mysterious behaviors.

3
00:00:06.410 --> 00:00:08.410
We're gonna see how all of those play out.

4
00:00:08.410 --> 00:00:11.890
They're all gonna rest on
this notion we saw here.

5
00:00:11.890 --> 00:00:14.980
So here we go.

6
00:00:14.980 --> 00:00:15.770
Before we do that,

7
00:00:17.090 --> 00:00:20.770
we have to understand that we're
gonna encounter this scenario here.

8
00:00:20.770 --> 00:00:21.900
Gonna encounter this side here.

9
00:00:21.900 --> 00:00:28.180
Calling a function in the same
scope as it was defined, okay.

10
00:00:28.180 --> 00:00:31.470
This is gonna start to answer,
I think it was Shelby's question or

11
00:00:31.470 --> 00:00:37.120
it was Katy's question about, about.

12
00:00:37.120 --> 00:00:38.050
Well, hold on.

13
00:00:38.050 --> 00:00:40.846
What if I don't find the value,

14
00:00:40.846 --> 00:00:45.618
the variable I'm looking for
inside my local memory?

15
00:00:45.618 --> 00:00:46.960
Where do I look next?

16
00:00:46.960 --> 00:00:49.937
We're going to see that play out here, and

17
00:00:49.937 --> 00:00:55.090
we're gonna discover way to find
your functions fundamentally

18
00:00:55.090 --> 00:01:00.890
determines what your function has
access to when you call the function.

19
00:01:00.890 --> 00:01:02.390
That sounds pretty obvious right now.

20
00:01:03.490 --> 00:01:10.140
It's gonna create a level of profundancy
we can't even yet imagine, all right.

21
00:01:10.140 --> 00:01:11.650
So lets walk through this.

22
00:01:11.650 --> 00:01:15.270
And as ever, I've not cleared
the whiteboard first unfortunately.

23
00:01:15.270 --> 00:01:21.460
So I'm just going to boldly go ahead and
say, Muhammad, can

24
00:01:21.460 --> 00:01:25.800
you speak very slowly and start walking
through what we're doing, Muhammad?

25
00:01:25.800 --> 00:01:30.240
Not literally slowly, that would be weird,
but go ahead, Muhammad.

26
00:01:30.240 --> 00:01:33.980
&gt;&gt; Muhammad: We are declaring
a function with the label outer.

27
00:01:35.350 --> 00:01:38.460
&gt;&gt; Will: Declaring a function
with the label outer, excellent.

28
00:01:38.460 --> 00:01:40.810
And where are are storing it, Muhammad?

29
00:01:40.810 --> 00:01:41.980
&gt;&gt; Muhammad: In the global memory.

30
00:01:41.980 --> 00:01:42.810
&gt;&gt; Will: In the global memory, perfect.

31
00:01:44.270 --> 00:01:48.950
Thank you so much for speaking slowly.

32
00:01:48.950 --> 00:01:51.877
There it is,
it's a whole function definition.

33
00:01:53.615 --> 00:01:54.320
&gt;&gt; Will: There it is.

34
00:01:54.320 --> 00:01:57.600
But I do these little
fs in my function now,

35
00:01:57.600 --> 00:02:01.250
because if you look at Chrome dev tools,
when you console logger function now,

36
00:02:01.250 --> 00:02:04.860
in the console it'll actually do
a little fancy f before the function.

37
00:02:04.860 --> 00:02:05.950
Interesting, I don't know why.

38
00:02:05.950 --> 00:02:11.597
All right, so
next line that we call, Lindsey?

39
00:02:11.597 --> 00:02:14.310
&gt;&gt; Lindsey: When you're
calling the function outer.

40
00:02:14.310 --> 00:02:15.900
&gt;&gt; Will: Calling function outer.

41
00:02:15.900 --> 00:02:17.330
Everyone together.

42
00:02:17.330 --> 00:02:21.890
Loud, clearly, and emphatically, when we
execute a function we create a brand new-

43
00:02:21.890 --> 00:02:23.200
&gt;&gt; All: Execution context.

44
00:02:24.280 --> 00:02:25.660
&gt;&gt; Will: See, it feels good, right.

45
00:02:25.660 --> 00:02:26.270
Feels really good.

46
00:02:26.270 --> 00:02:27.270
There it is.

47
00:02:27.270 --> 00:02:28.820
The new execution context.

48
00:02:31.220 --> 00:02:33.920
Draw it about this big.

49
00:02:33.920 --> 00:02:35.270
There it is.

50
00:02:35.270 --> 00:02:40.321
In which, so
what execution context reminders means

51
00:02:40.321 --> 00:02:45.160
is outer is some functionality
that we want to run.

52
00:02:46.310 --> 00:02:49.150
We wanna therefore go
through it line by line.

53
00:02:49.150 --> 00:02:52.130
So we've gotta pause our thread,
we only got one thread

54
00:02:52.130 --> 00:02:55.920
from running any code further down,
and take it inside the function.

55
00:02:55.920 --> 00:02:57.330
That's the left hand side here.

56
00:02:57.330 --> 00:03:00.280
So remember,
we're in the global execution context.

57
00:03:00.280 --> 00:03:01.840
We're gonna go inside the local one for

58
00:03:01.840 --> 00:03:06.410
outer, the thread's gonna go inside there,
out from global, into outer.

59
00:03:06.410 --> 00:03:11.830
And we want to store in outer any

60
00:03:11.830 --> 00:03:16.170
functions or variables that get
announced inside of outer's code.

61
00:03:16.170 --> 00:03:19.240
Well we need some space to do that,
so we do them in the local memory.

62
00:03:19.240 --> 00:03:20.880
This is the execution context.

63
00:03:20.880 --> 00:03:26.570
When we call a function,
we push it to the call stack.

64
00:03:26.570 --> 00:03:28.980
A stack of calls, to functions.

65
00:03:30.130 --> 00:03:31.211
In to outer we go.

66
00:03:31.211 --> 00:03:36.929
And what's the first thing we
do inside of outer, Andrew?

67
00:03:38.970 --> 00:03:40.960
We're calling out,
what's the first thing we do inside?

68
00:03:40.960 --> 00:03:42.700
&gt;&gt; Andrew: Let counter equal zero?

69
00:03:42.700 --> 00:03:45.888
&gt;&gt; Will: So we declare counter and
initialize it to zero.

70
00:03:45.888 --> 00:03:52.590
Counter is zero.

71
00:03:52.590 --> 00:03:55.420
That's freed up a little bit of memory for
the number zero and

72
00:03:55.420 --> 00:03:59.040
given it the label counter
inside of the code outer.

73
00:03:59.040 --> 00:03:59.830
Not out here.

74
00:03:59.830 --> 00:04:03.880
Let's be clear, if I have a console log
counter out here, there ain't no counter.

75
00:04:03.880 --> 00:04:05.740
Only inside of the code outer.

76
00:04:05.740 --> 00:04:10.120
All right, what's the next line
inside the code outer, Amine?

77
00:04:11.390 --> 00:04:14.680
&gt;&gt; Amine: Declare a function,
increment counter.

78
00:04:14.680 --> 00:04:17.380
&gt;&gt; Will: Good, and store it in?

79
00:04:17.380 --> 00:04:18.170
&gt;&gt; Amine: Local memory.

80
00:04:18.170 --> 00:04:19.460
&gt;&gt; Will: Local memory.

81
00:04:19.460 --> 00:04:20.290
Excellent, Amine.

82
00:04:21.630 --> 00:04:23.710
Thank you, and there it is.

83
00:04:23.710 --> 00:04:26.830
Increment counter stored in local memory
and it's the whole function definition.

84
00:04:26.830 --> 00:04:31.190
Let's not forget, if I had a console
log it, I would see function.

85
00:04:33.140 --> 00:04:35.030
Increment counter, counter plus, etc.

86
00:04:35.030 --> 00:04:37.850
Now, but what do I do next, Katie?

87
00:04:38.900 --> 00:04:41.630
&gt;&gt; Katie: We execute
that declared function.

88
00:04:41.630 --> 00:04:43.400
&gt;&gt; Will: Good,
we execute increment counter.

89
00:04:44.960 --> 00:04:47.540
And therefore, everyone together,
we create a brand new?

90
00:04:48.720 --> 00:04:50.370
&gt;&gt; All: Execution context.

91
00:04:50.370 --> 00:04:54.810
&gt;&gt; Will: Yeah, exactly, so I can really
pick on my son, Dominique, saying it.

92
00:04:54.810 --> 00:04:57.380
I shouldn't have said it into my mic so
loudly.

93
00:04:57.380 --> 00:04:59.180
Execution context, exactly.

94
00:04:59.180 --> 00:04:59.790
There it is.

95
00:05:01.010 --> 00:05:06.510
Which has it's own,
has it's own little baby local memory.

96
00:05:06.510 --> 00:05:12.310
Tiny little local memory for
increment counters, execution context.

97
00:05:12.310 --> 00:05:13.070
There it is.

98
00:05:13.070 --> 00:05:16.250
Local, and remember this is also
known as a variable environment.

99
00:05:16.250 --> 00:05:17.510
A variable environment.

100
00:05:17.510 --> 00:05:19.080
A variable environment.

101
00:05:19.080 --> 00:05:20.126
Posh name for the memory.

102
00:05:20.126 --> 00:05:26.910
Okay, so call stack.

103
00:05:26.910 --> 00:05:30.015
Lindsey, what happens when I a call stack?

104
00:05:30.015 --> 00:05:32.550
&gt;&gt; Lindsey: We push on
the increment counter.

105
00:05:32.550 --> 00:05:36.000
&gt;&gt; Will: Yes,
the code increment counter There it is.

106
00:05:36.000 --> 00:05:37.260
It's now on top of our call stack.

107
00:05:37.260 --> 00:05:39.460
We're a few layers in now.

108
00:05:39.460 --> 00:05:44.020
And what's the first sign of code inside
increment counter that we encounter,

109
00:05:44.020 --> 00:05:44.640
Lindsey?

110
00:05:44.640 --> 00:05:46.092
&gt;&gt; Lindsey: Counter++.

111
00:05:46.092 --> 00:05:52.541
&gt;&gt; Will: Counter++.

112
00:05:53.920 --> 00:05:58.739
Now, where do I go looking for
that counter first, Lindsey?

113
00:05:58.739 --> 00:05:59.573
&gt;&gt; Lindsey: Locally.

114
00:05:59.573 --> 00:06:01.260
&gt;&gt; Will: Locally, exactly.

115
00:06:01.260 --> 00:06:05.250
Partly because or so it might seem
because lowest of my call stack,

116
00:06:05.250 --> 00:06:08.120
increment encounter is where I look for
stuff first cuz that's where I am.

117
00:06:08.120 --> 00:06:08.710
I'm there.

118
00:06:08.710 --> 00:06:10.470
So I look locally.

119
00:06:10.470 --> 00:06:14.101
Do I find counter, Lindsay?

120
00:06:14.101 --> 00:06:15.560
&gt;&gt; Lindsey: No.
&gt;&gt; Will: No, so do I error?

121
00:06:17.050 --> 00:06:20.230
No, I don't error, it's not there but
where do I look next?

122
00:06:21.230 --> 00:06:22.390
&gt;&gt; Lindsey: In the outer.

123
00:06:22.390 --> 00:06:25.830
&gt;&gt; Will: Exactly, I look down my,
hold that thought looking down the call.

124
00:06:25.830 --> 00:06:29.233
So we're gonna see it's not quite that,
but it feels like I look down my

125
00:06:29.233 --> 00:06:33.790
call stack, right, and
what do I find the next level out?

126
00:06:33.790 --> 00:06:35.850
But, Lindsay.

127
00:06:35.850 --> 00:06:36.920
&gt;&gt; Lindsey: A counter.
&gt;&gt; Will: What do I do with it?

128
00:06:36.920 --> 00:06:39.140
&gt;&gt; Lindsey: I add one to it.

129
00:06:39.140 --> 00:06:43.805
&gt;&gt; Will: Increment it to one, perfect.

130
00:06:43.805 --> 00:06:48.900
There we go, and now increment count
is execution context comes to a close.

131
00:06:50.300 --> 00:06:54.251
Comes to a close, it's done.

132
00:06:54.251 --> 00:06:58.910
And increment counts is called,
Lindsey, on the call stack gets?

133
00:06:58.910 --> 00:06:59.530
&gt;&gt; Lindsey: Popped off.

134
00:06:59.530 --> 00:07:02.090
&gt;&gt; Will: Popped off, and back to outer.

135
00:07:02.090 --> 00:07:02.920
Anymore code to run in outer?

136
00:07:06.476 --> 00:07:07.010
&gt;&gt; Lindsey: No.

137
00:07:07.010 --> 00:07:09.290
&gt;&gt; Will: No, so
outer execution context, Lindsey?

138
00:07:09.290 --> 00:07:10.010
&gt;&gt; Lindsey: Gets popped off.

139
00:07:10.010 --> 00:07:14.520
&gt;&gt; Will: Popped off,
and outer is also done.

140
00:07:16.260 --> 00:07:17.920
I don't see that's
particularly clear is it?

141
00:07:19.100 --> 00:07:19.970
Well, all right.

142
00:07:19.970 --> 00:07:20.900
All done.

143
00:07:22.310 --> 00:07:23.070
Well what do we know?

144
00:07:23.070 --> 00:07:25.970
We said where we define our
functions determines what variables

145
00:07:25.970 --> 00:07:29.030
our function has access to
when I call the function.

146
00:07:29.030 --> 00:07:35.650
Well, I defined increment counter, and it
immediately had a rounded count for zero.

147
00:07:35.650 --> 00:07:40.000
I then called increment counter,
and what do you know?

148
00:07:40.000 --> 00:07:42.800
While I didn't find counter
inside increment counter,

149
00:07:42.800 --> 00:07:46.500
I looked one level up and
where, there I found it.

150
00:07:46.500 --> 00:07:50.720
Counter is zero, it feels very okay,
this is how JavaScript works.

151
00:07:53.080 --> 00:07:58.700
But what if I called my function
outside of where it was defined?

152
00:07:58.700 --> 00:08:01.360
So right now, we've got no problems here.

153
00:08:01.360 --> 00:08:04.450
I'm defining my function,
and what do you know?

154
00:08:04.450 --> 00:08:07.220
When I call it in the immediate
same scope in which it was

155
00:08:07.220 --> 00:08:11.648
defined,
&gt;&gt; Will: The encounter is not available in

156
00:08:11.648 --> 00:08:15.050
the local memory, but look down
the call stack, look one level out,

157
00:08:15.050 --> 00:08:16.530
there's counter, hurray.

158
00:08:16.530 --> 00:08:17.800
We have a problem.

159
00:08:19.600 --> 00:08:23.531
But what if I call this function out here,

160
00:08:23.531 --> 00:08:27.890
not where it was defined, but
outside of where it was defined?

161
00:08:27.890 --> 00:08:31.880
What if I ran it somewhere else,
outside of where it was defined?

162
00:08:31.880 --> 00:08:35.080
We may already see that we're going
to have some serious issues here.

163
00:08:36.400 --> 00:08:37.780
But is this gonna even work?

164
00:08:37.780 --> 00:08:38.490
Can I even do this?

165
00:08:38.490 --> 00:08:40.150
Can I even call increment counter outside.

166
00:08:40.150 --> 00:08:42.380
Will this even, will this work, Kara?

167
00:08:44.470 --> 00:08:46.640
Can I refer to,
have we defined increment counter?

168
00:08:46.640 --> 00:08:48.150
Does this work?

169
00:08:48.150 --> 00:08:50.090
This is my, the answer's no,
question voice.

170
00:08:50.090 --> 00:08:51.770
It doesn't look it's gonna work, is it?

171
00:08:51.770 --> 00:08:57.680
Because increment count was defined
inside of outer, not in global memory.

172
00:08:57.680 --> 00:09:02.340
So I was saying we're gonna get
something very special is gonna happen

173
00:09:02.340 --> 00:09:07.990
when I call my function outside
of where it was defined.

174
00:09:07.990 --> 00:09:09.370
But how do I even do that, Muhammad?

175
00:09:09.370 --> 00:09:13.170
How do I even call a function if
it was defined inside of outer?

176
00:09:13.170 --> 00:09:15.720
How do I even call it out here, Muhammad?

177
00:09:15.720 --> 00:09:19.380
&gt;&gt; Muhammad: You have to return it so
that it's able to be called outside.

178
00:09:20.510 --> 00:09:22.640
&gt;&gt; Will: Yeah, let's see that in action.

179
00:09:22.640 --> 00:09:26.130
There is a way to run a function outside
where it was defined, return the function,

180
00:09:26.130 --> 00:09:29.000
and assign it to a new variable and
then call it by that variable and

181
00:09:29.000 --> 00:09:29.520
then very nice.

