WEBVTT

1
00:00:00.000 --> 00:00:02.045
&gt;&gt; Will Sentance: Let's
have thumbs at this point.

2
00:00:02.045 --> 00:00:04.366
We're gonna go back to
the challenges in a second and

3
00:00:04.366 --> 00:00:06.758
then we're gonna have
closing thoughts after that.

4
00:00:06.758 --> 00:00:09.584
Everybody's thumbs out, man.

5
00:00:09.584 --> 00:00:13.978
Clarification, let's get into challenges,
everyone's thumbs out let's see it.

6
00:00:13.978 --> 00:00:15.896
Katie has a clarifying?
&gt;&gt; Katie: No

7
00:00:15.896 --> 00:00:17.469
&gt;&gt; Will Sentance: No, Katie is clear.

8
00:00:17.469 --> 00:00:20.463
Yeah people might, so
that's a good question from Justin there,

9
00:00:20.463 --> 00:00:21.482
I'm sorry, Julian.

10
00:00:21.482 --> 00:00:28.196
Do we in the end actually say,
user2 and user1's prototype is user?

11
00:00:28.196 --> 00:00:30.105
I really don't like that vagueness.

12
00:00:30.105 --> 00:00:33.093
Because it's definitely not,
it's user.prototype.

13
00:00:33.093 --> 00:00:36.371
That's the prototype of user1 and user2.

14
00:00:36.371 --> 00:00:38.439
It's this object here, not this object.

15
00:00:38.439 --> 00:00:41.365
It's the sub-object, the one
attached on the property prototype.

16
00:00:41.365 --> 00:00:48.451
So I prefer you said user1 and
user2's prototype is user.prototype,

17
00:00:48.451 --> 00:00:52.575
which is this object here, I prefer that.

18
00:00:52.575 --> 00:00:57.722
I also love instead, if you're gonna
say that, at least clarify and

19
00:00:57.722 --> 00:01:03.489
say that is to say, the reference made
in the _proto_reference on user1,

20
00:01:03.489 --> 00:01:06.174
is to the object user.prototype.

21
00:01:06.174 --> 00:01:10.056
I much prefer that more intuitive way.

22
00:01:10.056 --> 00:01:12.448
Victor says, what about the class
keywords define a class?

23
00:01:12.448 --> 00:01:13.843
Is there any difference?

24
00:01:13.843 --> 00:01:17.914
Victor, I hope we answered your question.

25
00:01:17.914 --> 00:01:22.473
In terms of performance,
I encourage using it, Victor.

26
00:01:22.473 --> 00:01:25.380
In terms of performance with this sort
of stuff, we're doing under the hood,

27
00:01:25.380 --> 00:01:26.053
similar things.

28
00:01:26.053 --> 00:01:27.513
All right, Julian,

29
00:01:27.513 --> 00:01:32.722
how should we do if we want to attach
a proto to an already declared function?

30
00:01:32.722 --> 00:01:34.272
Is there an accepted way to do that?

31
00:01:34.272 --> 00:01:38.284
Attach a new proto is not best practice.

32
00:01:38.284 --> 00:01:42.288
So Julian's question is, hold on,

33
00:01:42.288 --> 00:01:50.310
what if I wanna set a whole new guy here
as the proto to all of these objects.

34
00:01:50.310 --> 00:01:53.089
That's not best practice.

35
00:01:53.089 --> 00:01:57.250
We can do it by using a built
in method setPrototypeOf.

36
00:01:57.250 --> 00:02:00.703
But typically it's apparently
very poor performance.

37
00:02:00.703 --> 00:02:02.029
Under the hood,

38
00:02:02.029 --> 00:02:07.922
a whole bunch of things have to be
re-optimized to make that successful.

39
00:02:07.922 --> 00:02:12.366
We can do it, but what we tend to do
instead is it better to create a whole new

40
00:02:12.366 --> 00:02:15.113
object, and
have set a new prototype for it.

41
00:02:15.113 --> 00:02:17.882
But we can reset our
prototype if we wanted to.

42
00:02:17.882 --> 00:02:21.410
But not best practice, Lindsey.
&gt;&gt; Lindsey: What if you wanna

43
00:02:21.410 --> 00:02:24.542
add a new method later, would you use-
&gt;&gt; Will Sentance: Do we

44
00:02:24.542 --> 00:02:25.069
have access to there?

45
00:02:25.069 --> 00:02:27.411
Can we do it?
&gt;&gt; Lindsey: We just do it the old way,

46
00:02:27.411 --> 00:02:28.571
like user.prototype?
&gt;&gt; Will Sentance: Yeah,

47
00:02:28.571 --> 00:02:29.583
we can do it either way, absolutely, yeah.

48
00:02:29.583 --> 00:02:30.190
&gt;&gt; Lindsey: Okay.
&gt;&gt; Will Sentance: Absolutely

