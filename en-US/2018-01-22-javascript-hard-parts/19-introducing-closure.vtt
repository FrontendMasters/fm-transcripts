WEBVTT

1
00:00:00.460 --> 00:00:05.273
&gt;&gt; Will: Okay closure,
when our functions get called, remind me,

2
00:00:05.273 --> 00:00:07.908
Art, how do I call a function?
&gt;&gt; Speaker 2: Parenthesis.

3
00:00:07.908 --> 00:00:09.018
&gt;&gt; Will: Parenthesis.

4
00:00:09.018 --> 00:00:10.840
Broken record, exactly.

5
00:00:10.840 --> 00:00:15.756
When our functions get called,
we create a live store of

6
00:00:15.756 --> 00:00:20.776
data.
&gt;&gt; Will: Inside this function,

7
00:00:20.776 --> 00:00:23.190
array is no longer just array.

8
00:00:23.190 --> 00:00:25.569
It is actually the value 123.

9
00:00:25.569 --> 00:00:32.150
When I refer to array inside a copy
array manipulate, array is now 123.

10
00:00:32.150 --> 00:00:38.220
I've created a live name space
with names with associated data.

11
00:00:40.280 --> 00:00:42.190
Known as a local memory.

12
00:00:42.190 --> 00:00:48.620
Known poshly, the official term in the
Java script spec is variable environment.

13
00:00:50.040 --> 00:00:53.930
Variable environment, VE,
variable environment.

14
00:00:53.930 --> 00:00:59.460
Known often informally as my application
state, my function level states.

15
00:00:59.460 --> 00:01:04.120
My live data stored in memory
as my application runs, for

16
00:01:04.120 --> 00:01:05.380
that function execution context.

17
00:01:05.380 --> 00:01:07.400
Every time I call a function,
I create a live store.

18
00:01:07.400 --> 00:01:12.938
When that function finishes
executing part of the call stack,

19
00:01:12.938 --> 00:01:19.009
its local memory is [NOISE] deleted,
gone, except the return value.

20
00:01:19.009 --> 00:01:21.670
When we return out that value,
JavaScript holds onto that data.

21
00:01:21.670 --> 00:01:26.560
Everything else in here it's
what's called garbage collected.

22
00:01:26.560 --> 00:01:30.495
This is no longer data that is being used,
and therefore JavaScript is gonna

23
00:01:30.495 --> 00:01:34.540
automatically collect and
free up the memory.

24
00:01:34.540 --> 00:01:39.060
This is now garbage, and so it is
automatically collected and cleared away.

25
00:01:39.060 --> 00:01:43.470
In other languages we might have to
manually deallocate memory and say,

26
00:01:43.470 --> 00:01:47.670
we don't need this anymore, it's free for
you to use the rest of the application.

27
00:01:47.670 --> 00:01:50.390
In JavaScript it's
automatically deallocated,

28
00:01:50.390 --> 00:01:52.860
automatic garbage collection when
we finish running the function.

29
00:01:53.930 --> 00:01:55.510
It's local memory's deleted.

30
00:01:55.510 --> 00:02:00.260
But what if our functions could hold on,
somehow,

31
00:02:00.260 --> 00:02:03.530
to some live data between
their executions?

32
00:02:03.530 --> 00:02:07.068
What if the next time I
ran copy array manipulate,

33
00:02:07.068 --> 00:02:11.209
rather than it having no memory,
it starts from scratch?

34
00:02:11.209 --> 00:02:12.467
If I ran copy array manipulate again,

35
00:02:12.467 --> 00:02:14.290
it would have no memory
of this prior running.

36
00:02:14.290 --> 00:02:16.340
This whole data here, all gone.

37
00:02:16.340 --> 00:02:19.680
What if there a way that somehow
I could hold onto some data

38
00:02:20.800 --> 00:02:23.030
between my functions being invoked?

39
00:02:23.030 --> 00:02:28.540
So I run multiplyBy2, the first time and
I pass in two, the next

40
00:02:28.540 --> 00:02:32.100
time I run it with four, it doesn't
remember the previous time it was run.

41
00:02:32.100 --> 00:02:33.880
There's nothing inside there remembers.

42
00:02:33.880 --> 00:02:36.540
What if there are a way that
my multiplyBy2 could hold

43
00:02:36.540 --> 00:02:38.580
onto some live data?

44
00:02:38.580 --> 00:02:43.940
Somehow attached, associated to
the definition of the function.

45
00:02:43.940 --> 00:02:50.680
So if I were to define multiplyBy2 here,
&gt;&gt; Will: That were a function.

46
00:02:50.680 --> 00:02:55.750
When I invoke multiplyBy2,
when I run it, I have the input of 3 and

47
00:02:55.750 --> 00:02:58.270
create an execution context.

48
00:02:58.270 --> 00:03:01.530
Its local memory starts from scratch.

49
00:03:01.530 --> 00:03:05.330
If I ran it again, I don't know
let's say I run it again with three.

50
00:03:05.330 --> 00:03:09.640
It doesn't matter,
it's local memory starts from scratch.

51
00:03:09.640 --> 00:03:13.370
What if there were a way that between all
these different runnings of the function,

52
00:03:13.370 --> 00:03:15.820
I could somehow persist,

53
00:03:15.820 --> 00:03:20.790
hold on to some live data associated
with these function definitions.

54
00:03:20.790 --> 00:03:22.880
What if there were a way of doing that?

55
00:03:22.880 --> 00:03:24.890
That would allow me to
do some amazing things.

56
00:03:24.890 --> 00:03:29.040
That would let our function definitions
have an associated persistent memory.

57
00:03:29.040 --> 00:03:32.210
That would allow us to do
amazing things like maybe,

58
00:03:33.300 --> 00:03:37.410
actually maybe remember this
function's been run once before and

59
00:03:37.410 --> 00:03:39.820
say from now on, sorry,
you can't run me again.

60
00:03:39.820 --> 00:03:41.480
I've been run once before.

61
00:03:41.480 --> 00:03:45.170
Or maybe it will allow me to do something
like if the functionality were really

62
00:03:45.170 --> 00:03:49.000
heavy lifting and complicated and
takes two seconds to figure out,

63
00:03:49.000 --> 00:03:51.940
well maybe if I ran,
maybe the function was like n prime.

64
00:03:52.980 --> 00:03:58.330
And it says, run me with a thousand and
find the thousandth prime number.

65
00:03:58.330 --> 00:03:59.140
That's hard to find.

66
00:03:59.140 --> 00:04:00.379
That's a lot of steps to find.

67
00:04:01.400 --> 00:04:05.360
If I then run later in my application,
find a thousandth prime number again,

68
00:04:05.360 --> 00:04:07.740
I don't want to start that all over again.

69
00:04:07.740 --> 00:04:10.890
What if there were some way that my
function definition could hold on,

70
00:04:10.890 --> 00:04:12.020
a little memory,

71
00:04:12.020 --> 00:04:17.210
a little cache to the last time I was run
with a thousand, the resulting value.

72
00:04:17.210 --> 00:04:19.490
This would be amazingly powerful, right?

73
00:04:19.490 --> 00:04:23.240
This would change everything,
change everything.

74
00:04:23.240 --> 00:04:28.512
I think it might change a lot, I think
it would change how I'd write code.

75
00:04:28.512 --> 00:04:31.490
[LAUGH] We'll see,
this will be amazingly powerful, I think.

76
00:04:31.490 --> 00:04:33.470
I think it would be very
profound if we could do this.

77
00:04:33.470 --> 00:04:34.930
Who thinks it's possible?

78
00:04:34.930 --> 00:04:39.360
Or who thinks we're just in,
maybe it's possible, who knows?

79
00:04:39.360 --> 00:04:43.850
Or maybe we're just hoping around [LAUGH]
possible if our code could write itself.

80
00:04:43.850 --> 00:04:44.690
Who knows?

81
00:04:44.690 --> 00:04:46.030
We're not gonna discover that today.

82
00:04:46.030 --> 00:04:49.510
Alright, so this is what's to come.

83
00:04:49.510 --> 00:04:55.390
This is the essence of what we're
gonna get in this closure world.

84
00:04:55.390 --> 00:04:59.130
But, it all starts folks with
something that is gonna feel very,

85
00:04:59.130 --> 00:05:03.030
very disconnected from this profundity.

86
00:05:03.030 --> 00:05:05.430
And also by the way to some extent,
it's gonna feel like,

87
00:05:05.430 --> 00:05:08.160
hold on, why are we doing this at all?

88
00:05:08.160 --> 00:05:11.920
You're gonna really ask, I wonder, why
are we doing this particular thing at all?

89
00:05:11.920 --> 00:05:14.290
Returning a function from a function.

90
00:05:15.650 --> 00:05:17.760
We're gonna do that and
you're gonna think?

91
00:05:17.760 --> 00:05:19.380
Why are we returning
a function from a function?

92
00:05:19.380 --> 00:05:23.270
It's gonna feel very bizarre, but
this underlining principle is gonna let

93
00:05:24.980 --> 00:05:28.730
all of closure make sense for us.

94
00:05:28.730 --> 00:05:32.020
So here we go, it starts with returning,
it starts with

95
00:05:35.070 --> 00:05:38.590
us returning a function
from another function.

96
00:05:38.590 --> 00:05:40.850
Very well written sentence,
indeed, there you go.

