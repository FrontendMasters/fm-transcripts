WEBVTT

1
00:00:00.320 --> 00:00:00.860
&gt;&gt; Will Sentance: All right, so

2
00:00:00.860 --> 00:00:04.330
we achieved a lot yesterday,
we achieved a lot.

3
00:00:04.330 --> 00:00:09.270
Principles of JavaScript,
the core fundamental pieces,

4
00:00:09.270 --> 00:00:14.330
that our synchronicity
executing JavaScript does.

5
00:00:14.330 --> 00:00:18.920
Then higher order functions, then our
other type of higher order functions,

6
00:00:18.920 --> 00:00:20.870
the ones that return functions.

7
00:00:20.870 --> 00:00:23.655
Remember, any function that
takes in a function or

8
00:00:23.655 --> 00:00:26.387
returns a function is
a higher-order function.

9
00:00:26.387 --> 00:00:30.535
The return functions was
what gave us closures, or

10
00:00:30.535 --> 00:00:33.526
what we like to call the backpack, or

11
00:00:33.526 --> 00:00:39.140
what we like to call the persistent
lexical scope reference.

12
00:00:39.140 --> 00:00:40.890
And that was very
impressive by all of you.

13
00:00:40.890 --> 00:00:47.560
I was very, very excited to see
multiple people in this room

14
00:00:47.560 --> 00:00:52.540
complete some of those tough closure
challenges afterwards, all the way

15
00:00:52.540 --> 00:00:57.620
into those ones that take in a function,
wrap it, and then return out the wrap

16
00:00:57.620 --> 00:01:01.899
function that behaves the same way as the
input function, but with special nuances.

17
00:01:03.390 --> 00:01:06.210
If you'd known that was how it worked,
maybe that would have made it easy.

18
00:01:06.210 --> 00:01:10.010
But those are really tough challenges,
and I was really impressed to see so

19
00:01:10.010 --> 00:01:12.120
many of you complete those.

20
00:01:12.120 --> 00:01:18.110
All right, but now, today we move
on to a land of JavaScript that

21
00:01:18.110 --> 00:01:24.170
introduces pieces that we've already said,
we had all of the features of JavaScript.

22
00:01:24.170 --> 00:01:29.051
But part four and five are gonna
introduce us to two additional aspects of

23
00:01:29.051 --> 00:01:33.142
JavaScript that are gonna
complement what we already have.

24
00:01:33.142 --> 00:01:37.358
So we said we already have our memory
thread doing the code line by line,

25
00:01:37.358 --> 00:01:42.001
our core stack keeping track of these
memories and threads which is together,

26
00:01:42.001 --> 00:01:46.390
or memory and thread, which is together
known as an execution context.

27
00:01:46.390 --> 00:01:52.160
So these new parts are gonna
compliment those core features.

28
00:01:52.160 --> 00:01:55.200
The first one is asynchronous JavaScript.

29
00:01:56.355 --> 00:02:00.740
Asynchronicity, backbone of modern
web development in JavaScript.

30
00:02:00.740 --> 00:02:04.285
JavaScript is single threaded,

31
00:02:04.285 --> 00:02:08.848
that means doing one
line of code at a time.

32
00:02:08.848 --> 00:02:12.968
Not when I start running a function,
I can continue on with my code, for

33
00:02:12.968 --> 00:02:15.252
example, else outside the function.

34
00:02:15.252 --> 00:02:17.758
I can't do two things at the same time.

35
00:02:17.758 --> 00:02:21.354
At asynchronous, each line,
if it's displayed as the next line,

36
00:02:21.354 --> 00:02:22.310
it's gonna run.

37
00:02:23.340 --> 00:02:28.050
So we view in the world of JavaScript,
in the world of the Java engine, yeah.

38
00:02:28.050 --> 00:02:32.310
So then we have something that's
gonna happen, some issue might arise.

39
00:02:32.310 --> 00:02:40.042
What if we need to wait sometime before
we can execute certain portions of code?

40
00:02:40.042 --> 00:02:44.284
What if we have a block of code
that we know we're going to want

41
00:02:44.284 --> 00:02:49.275
to execute maybe when we get some fresh
data from a request to a server for

42
00:02:49.275 --> 00:02:52.740
our new tweets or whatever it might be?

43
00:02:52.740 --> 00:02:56.907
Or maybe for a timer to complete, and
then we want to execute this code.

44
00:02:56.907 --> 00:02:59.749
So we announce this cuz we
wanna have it not actually run,

45
00:02:59.749 --> 00:03:03.139
we've got to do some waiting,
we wanna wait until we run that code.

46
00:03:03.139 --> 00:03:07.210
So for example,
suppose it's the functionality that says,

47
00:03:07.210 --> 00:03:12.142
take the data you just got back from
the APIs, Spotify's API or whatever,

48
00:03:12.142 --> 00:03:14.589
or Twitter's API, take that data.

49
00:03:14.589 --> 00:03:17.550
You've had to wait for it,
but now it's come back.

50
00:03:17.550 --> 00:03:21.610
Now take that data, it could be five
tweets, and display it on the webpage.

51
00:03:24.840 --> 00:03:27.844
We're gonna do that waiting, we announced
the fact that we've gotta wait for

52
00:03:27.844 --> 00:03:28.490
that to happen.

53
00:03:29.840 --> 00:03:32.850
We've got a conundrum,
we wanna delay that running the code,

54
00:03:32.850 --> 00:03:35.930
there's no point in running
the functionality saying, display my data,

55
00:03:35.930 --> 00:03:38.600
display my tweets,
until the tweets are there.

56
00:03:38.600 --> 00:03:39.824
Let's be really clear,

57
00:03:39.824 --> 00:03:43.045
we can't display tweets if
the data hasn't arrived yet, okay?

58
00:03:43.045 --> 00:03:47.571
So we've got attention between
delaying that code executing,

59
00:03:47.571 --> 00:03:52.700
the bit for displaying the tweets,
but not wanting to block the thread.

60
00:03:52.700 --> 00:03:57.190
Remember, we said we're doing one
thing at a time and in order.

61
00:03:57.190 --> 00:03:59.000
So if the next thing is display tweets,

62
00:04:00.520 --> 00:04:03.445
we aren't doing the line after that
until the data displays the tweet.

63
00:04:03.445 --> 00:04:05.950
If it were there and
we can display the tweets.

64
00:04:05.950 --> 00:04:08.880
So our thread one thing at a time and
in order.

65
00:04:08.880 --> 00:04:12.450
So if the next thing is take the data,

66
00:04:12.450 --> 00:04:16.650
display the data on the page, and
we've had to wait 400 milliseconds for

67
00:04:16.650 --> 00:04:21.370
that data to come back, nothing is
happening, no code's happening afterwards.

68
00:04:21.370 --> 00:04:24.460
We've got a conundrum,
we can see this is a conundrum.

69
00:04:24.460 --> 00:04:25.400
What do we do?

70
00:04:27.802 --> 00:04:29.330
&gt;&gt; Will Sentance: Do not panic yet.

71
00:04:29.330 --> 00:04:33.870
Let's just see two examples to see just
how much of a confusing conundrum this is.

72
00:04:33.870 --> 00:04:36.310
Our existing world of JavaScript does not

73
00:04:37.660 --> 00:04:42.870
our existing world of JavaScript may
not have a solution for this situation.

74
00:04:42.870 --> 00:04:46.170
Our three core features may not
have a solution for this scenario.

75
00:04:49.150 --> 00:04:52.800
So let's look at the example, in what
order will our console logs appear?

76
00:04:52.800 --> 00:04:54.340
So we're defining a function printHello,

77
00:04:54.340 --> 00:04:56.830
inside of which we have
a console.log("Hello").

78
00:04:56.830 --> 00:05:01.721
Then we're calling this setTimeout
built-in JavaScript method,

79
00:05:01.721 --> 00:05:05.790
and it's gonna pass in that
printHello functionality.

80
00:05:05.790 --> 00:05:10.830
And a value of 1000 milliseconds
that's going to, in theory,

81
00:05:10.830 --> 00:05:15.340
delay the running of that printHello
function for 1000 milliseconds.

82
00:05:15.340 --> 00:05:19.303
And then this additional
console.log("Me first!").

83
00:05:19.303 --> 00:05:23.923
Okay, Katie, what order are these
console.logs gonna actually run in,

84
00:05:23.923 --> 00:05:24.815
do you think?

85
00:05:24.815 --> 00:05:28.650
&gt;&gt; Katie: I think is gonna do
Hello first and then Me first?

86
00:05:28.650 --> 00:05:29.690
&gt;&gt; Will Sentance: Well,
that might make sense, right?

87
00:05:29.690 --> 00:05:33.932
Because we've got stuff,
we've got a single threat in JavaScript.

88
00:05:33.932 --> 00:05:38.010
Thank you, Katie, for saying that, that's
very good, itâ€™s raised our attention.

89
00:05:39.190 --> 00:05:42.688
[SOUND] Maybe, we've got a single
threat in JavaScript, so for

90
00:05:42.688 --> 00:05:46.450
saying wait 1000 milliseconds
to run to printHello function,

91
00:05:46.450 --> 00:05:50.358
in which we're going to print hello,
console.log("Hello").

92
00:05:50.358 --> 00:05:53.680
Well, we should expect that to
come first before Me first.

93
00:05:53.680 --> 00:05:55.790
Who has a different opinion
on how this is gonna work?

94
00:05:55.790 --> 00:05:57.640
Yeah, go ahead, Lindsey.

95
00:05:57.640 --> 00:06:01.220
&gt;&gt; Lindsey: I think it will read
the first function, setTimeout.

96
00:06:01.220 --> 00:06:03.756
&gt;&gt; Will Sentance: But
Lindsey, this is impossible.

97
00:06:03.756 --> 00:06:09.080
No, it's not, obviously, but
this is impossible because clearly it says

98
00:06:09.080 --> 00:06:14.571
recalling setTimeout and if we are inside
of setTimeout doing that printing,

99
00:06:14.571 --> 00:06:17.850
it's being passed into setTimeout, right?

100
00:06:17.850 --> 00:06:20.920
Then it must be waiting inside
that function's execution context

101
00:06:20.920 --> 00:06:24.740
before going back to global and
encountering Me first.

102
00:06:24.740 --> 00:06:28.846
It must be inside a setTimeout,
new execution context inside of which we

103
00:06:28.846 --> 00:06:33.019
then wait 1000 milliseconds,
in theory, and then printHello, and

104
00:06:33.019 --> 00:06:37.288
then out we come at setTimeout, and
go out to global and hit console.log.

105
00:06:39.208 --> 00:06:41.080
&gt;&gt; Will Sentance: No,
it doesn't do that for some reason.

106
00:06:41.080 --> 00:06:47.145
For some reason, actually,
Lindsey's spot on, Me first happens first,

107
00:06:47.145 --> 00:06:52.296
and at least 1000 milliseconds
later Hello happens.

108
00:06:52.296 --> 00:06:55.221
It's not blocking, no blocking.

109
00:06:55.221 --> 00:06:57.910
And the other reason the other thing
is called a, how was it called?

110
00:06:59.000 --> 00:06:59.820
Something bang.

111
00:07:00.840 --> 00:07:01.441
&gt;&gt; class: Interabang.

112
00:07:01.441 --> 00:07:02.947
&gt;&gt; Will Sentance: Interabang,
I was reading the Wikipedia page

113
00:07:02.947 --> 00:07:03.647
about it, exactly.

114
00:07:03.647 --> 00:07:05.149
There you go, thank you, man.

115
00:07:05.149 --> 00:07:07.710
It's old, 1923 it was around.

116
00:07:07.710 --> 00:07:08.916
[SOUND] There we go.

117
00:07:08.916 --> 00:07:13.949
So then all right, so
we're saying 1000 milliseconds, fine,

118
00:07:13.949 --> 00:07:19.294
printHello goes off, and
somehow is run 1000 milliseconds later.

119
00:07:19.294 --> 00:07:22.380
Our JavaScript system is not
explaining this, in my opinion, yet.

120
00:07:23.830 --> 00:07:24.640
What about this one?

121
00:07:25.740 --> 00:07:28.550
In what order do our console
logs appear here, Lindsey?

122
00:07:28.550 --> 00:07:32.691
Declare printHello, Hello,
setTimeout, printHello,

123
00:07:32.691 --> 00:07:39.080
pass in zero millisecond wait this time,
and then this console.log("Me first!").

124
00:07:39.080 --> 00:07:41.674
Lindsey, what do you think
is gonna be the order here?

125
00:07:41.674 --> 00:07:43.565
Actually, let's give Katie a chance.

126
00:07:43.565 --> 00:07:46.620
What do you think, Katie,
is gonna be the order here?

127
00:07:46.620 --> 00:07:50.488
&gt;&gt; Now I think it's gonna do Hello and
then Me first.

128
00:07:50.488 --> 00:07:52.420
&gt;&gt; Will Sentance: That's
double down on it, Katie.

129
00:07:52.420 --> 00:07:53.398
Good shout.

130
00:07:53.398 --> 00:07:53.992
&gt;&gt; class: [LAUGH]
&gt;&gt; Will Sentance: What do

131
00:07:53.992 --> 00:07:54.777
you think, Lindsey?

132
00:07:54.777 --> 00:07:58.303
&gt;&gt; Lindsey: I think the same.

133
00:07:58.303 --> 00:08:02.932
&gt;&gt; Will Sentance: Even in this situation,
printHello is gonna come after.

134
00:08:02.932 --> 00:08:06.793
Man, do we think now that our current
system that was explaining JavaScript

135
00:08:06.793 --> 00:08:08.070
running is sufficient?

136
00:08:09.310 --> 00:08:11.070
It does not explain the situation,
does it?

137
00:08:12.250 --> 00:08:14.310
All right, I've got this expression.

138
00:08:14.310 --> 00:08:16.482
[LAUGH] Do you think it's sufficient?

139
00:08:16.482 --> 00:08:17.392
I don't know.
&gt;&gt; class: [LAUGH]

140
00:08:17.392 --> 00:08:18.286
&gt;&gt; Will Sentance: Our previous model of

141
00:08:18.286 --> 00:08:20.030
JavaScript execution is insufficient.

142
00:08:20.030 --> 00:08:22.030
There you go, there's your answer.

143
00:08:22.030 --> 00:08:25.830
We need to introduce three new
components of our platform, or

144
00:08:25.830 --> 00:08:26.740
thinking about JavaScript.

145
00:08:26.740 --> 00:08:30.960
Top three, we already have thread of
execution, memory/variable environments,

146
00:08:30.960 --> 00:08:36.640
and call stack that tracked those
execution contexts, that are, of course.

147
00:08:36.640 --> 00:08:39.530
Remember, execution context is just,
we're doing the code line by line,

148
00:08:40.570 --> 00:08:44.520
in the function or globally,
known as a thread of execution.

149
00:08:44.520 --> 00:08:46.980
Threading down, executing each line.

150
00:08:46.980 --> 00:08:51.111
And then the memory where you store stuff
that you encounter as you thread through,

151
00:08:51.111 --> 00:08:53.187
and that's known as execution context.

152
00:08:53.187 --> 00:08:56.030
And the call stack tracks
those execution contexts.

153
00:08:56.030 --> 00:09:02.130
We need to add three new pieces,
web browser built-in functionality.

154
00:09:02.130 --> 00:09:05.860
These are not APIs the way you think
of when you go to Twitter's API or

155
00:09:05.860 --> 00:09:07.030
Google Maps' API.

156
00:09:07.030 --> 00:09:11.552
Remember, API just means there is some
functionality or data out there that is

157
00:09:11.552 --> 00:09:15.797
not in my application, but I can access
it and interact with it in a clean,

158
00:09:15.797 --> 00:09:20.250
predictable manner, even though it may
be written in a different language,

159
00:09:20.250 --> 00:09:25.006
a different server, a different owner
of the data, whatever, I can interface.

160
00:09:25.006 --> 00:09:29.330
That's what API, the I stands for,
I can interface with that functionality.

161
00:09:29.330 --> 00:09:33.720
And it turns out we've got to look
at does our web browser, Chrome,

162
00:09:33.720 --> 00:09:38.480
Firefox, etc.,
what functionality do they give us

163
00:09:38.480 --> 00:09:43.520
outside of pure JavaScript
that we can interface with?

164
00:09:43.520 --> 00:09:47.410
Those of our web browser APIs,
our web browser functionality or

165
00:09:47.410 --> 00:09:50.880
features, that we in
JavaScript can interface with.

166
00:09:52.050 --> 00:09:54.730
Also note these are known
as background threads.

167
00:09:54.730 --> 00:09:58.140
We gotta add the callback, or
message, or task queue, and

168
00:09:58.140 --> 00:10:00.310
we have to add the event loop.

169
00:10:00.310 --> 00:10:04.425
Event loop and callback, message,
task queue, fascinating.

170
00:10:04.425 --> 00:10:05.880
We're obviously gonna look at them.

171
00:10:05.880 --> 00:10:10.190
They're not as, well,
they're vital for this, but

172
00:10:10.190 --> 00:10:15.170
it turns out that we're gonna start
off with our web browser APIs.

