WEBVTT

1
00:00:00.120 --> 00:00:01.671
&gt;&gt; Will Sentance: Yes Bob.
&gt;&gt; Barb: So

2
00:00:01.671 --> 00:00:06.010
if you just wanted to reset your counter,
you just start from outer again?

3
00:00:06.010 --> 00:00:06.536
&gt;&gt; Will Sentance: Bob,

4
00:00:06.536 --> 00:00:09.070
don't steal my punchline.

5
00:00:10.265 --> 00:00:11.770
Jesus, Bob, why are?

6
00:00:11.770 --> 00:00:16.235
Okay, you said it so complacently and
effortlessly as well.

7
00:00:16.235 --> 00:00:17.610
&gt;&gt; Barb: [LAUGH]

8
00:00:17.610 --> 00:00:18.320
&gt;&gt; Will Sentance: Good job, Bob.

9
00:00:18.320 --> 00:00:21.980
Okay, well, Bob's sort of giving it
away a bit there, but let's do that.

10
00:00:21.980 --> 00:00:26.415
Let's try,
&gt;&gt; Will Sentance: I'm really good, and

11
00:00:26.415 --> 00:00:30.556
people often ask that question and
I can cut in before they give it away, but

12
00:00:30.556 --> 00:00:32.120
this time Bob was too fast.

13
00:00:32.120 --> 00:00:32.960
Very good, Bob.

14
00:00:32.960 --> 00:00:34.956
So what if we run outer again?

15
00:00:34.956 --> 00:00:37.400
So we're gonna create a whole new
execution counter for outer, and

16
00:00:37.400 --> 00:00:40.670
we're going to do it here, in addition to
the first time we ran it, and we're gonna

17
00:00:40.670 --> 00:00:45.725
store the results in a function in
a new place holder, another function.

18
00:00:45.725 --> 00:00:49.360
So let's do this, folks, let's do this.

19
00:00:49.360 --> 00:00:52.632
This is our final piece of closures,

20
00:00:52.632 --> 00:00:56.756
we are almost there on
the most profound ayat.

21
00:00:56.756 --> 00:00:58.293
Cheers, Mohammad.

22
00:00:58.293 --> 00:01:03.780
We are now there on the most profound,
&gt;&gt; Will Sentance: Piece.

23
00:01:03.780 --> 00:01:08.494
So I told Mohammad, Mohammad had to run, I
told him he would be here halfway through,

24
00:01:08.494 --> 00:01:10.272
the closing pieces of closure.

25
00:01:10.272 --> 00:01:13.930
But also he got a little preview there
of the very final piece from Bob,

26
00:01:13.930 --> 00:01:15.380
which is excellent.

27
00:01:15.380 --> 00:01:19.876
So we're now gonna, we've declared outer,
we've called it, we've declared outer,

28
00:01:19.876 --> 00:01:23.725
we've called it, stored the results
in incrementCounter myNewFunction,

29
00:01:23.725 --> 00:01:26.887
run myNewFunction twice,
now we hit this bottom line here.

30
00:01:26.887 --> 00:01:30.190
God, I didn't edit my
slides consistently enough.

31
00:01:30.190 --> 00:01:34.170
Let's pretend it says, jeez,
okay we'll just have var, whatever.

32
00:01:34.170 --> 00:01:37.850
Forgive me for my inconsistent
variable declarations, it's very,

33
00:01:37.850 --> 00:01:40.030
very bad, very bad.

34
00:01:40.030 --> 00:01:41.960
Mike's looking up and
judging from there as well.

35
00:01:41.960 --> 00:01:43.580
All right, look at this line here.

36
00:01:43.580 --> 00:01:48.470
Let's pretend it says let, I could
obviously also say const, even better,

37
00:01:48.470 --> 00:01:51.550
but var anotherFunction
equals a call to outer.

38
00:01:51.550 --> 00:01:54.833
So,
&gt;&gt; Will Sentance: Kara, what's

39
00:01:54.833 --> 00:01:58.520
the left-hand side tell me to do, Kara?
&gt;&gt; Kara: The var

40
00:01:58.520 --> 00:01:59.940
anotherFunction?
&gt;&gt; Will Sentance: Yep.

41
00:01:59.940 --> 00:02:03.119
&gt;&gt; Kara: Set declaring anotherFunction

42
00:02:03.119 --> 00:02:04.576
equal to-
&gt;&gt; Will Sentance: Well,

43
00:02:04.576 --> 00:02:07.217
it's not declaring another, yes, sorry.

44
00:02:07.217 --> 00:02:10.270
Yes, yes, exactly,
anotherFunction is what?

45
00:02:10.270 --> 00:02:11.630
Just a place order for the incentive.

46
00:02:13.870 --> 00:02:17.491
What's also gonna be
stored in anotherFunction,

47
00:02:17.491 --> 00:02:20.140
Kara?
&gt;&gt; Kara: Outer?

48
00:02:22.304 --> 00:02:22.810
&gt;&gt; Will Sentance: Is it outer?

49
00:02:24.190 --> 00:02:25.200
&gt;&gt; Kara: Increment counter?

50
00:02:26.980 --> 00:02:27.850
&gt;&gt; Will Sentance: It will be, but

51
00:02:27.850 --> 00:02:29.730
let's be really precise on it, Kara.

52
00:02:29.730 --> 00:02:31.100
So-
&gt;&gt; Kara: It's calling outer.

53
00:02:31.100 --> 00:02:32.740
&gt;&gt; Will Sentance: It's calling outer.

54
00:02:32.740 --> 00:02:37.180
It's a constant thing to remind ourselves,
if I didn't have pareinds, what would I be

55
00:02:37.180 --> 00:02:41.444
storing in another function, Kara, if I
didn't have pareinds on the end of outer?

56
00:02:41.444 --> 00:02:43.610
What would I actually be storing?
&gt;&gt; Kara: The whole function.

57
00:02:43.610 --> 00:02:44.623
&gt;&gt; Will Sentance: The whole function,

58
00:02:44.623 --> 00:02:46.050
which function?
&gt;&gt; Kara: Outer.

59
00:02:46.050 --> 00:02:46.610
&gt;&gt; Will Sentance: The whole outer

60
00:02:46.610 --> 00:02:48.310
function, so
be as precise as you can guys.

61
00:02:48.310 --> 00:02:50.270
The whole outer function, exactly.

62
00:02:50.270 --> 00:02:53.790
But parends says,
go take that functionality,

63
00:02:53.790 --> 00:02:58.010
do it, whatever gets returned out,
store that in another function.

64
00:02:58.010 --> 00:02:59.030
So let's do that.

65
00:02:59.030 --> 00:03:01.640
So another function right now, blank, and

66
00:03:01.640 --> 00:03:04.270
let's do what we just
said we were gonna do.

67
00:03:04.270 --> 00:03:09.131
We're gonna run,
&gt;&gt; Will Sentance: The final,

68
00:03:09.131 --> 00:03:11.270
final thing to see.

69
00:03:13.090 --> 00:03:19.648
We're gonna run,
&gt;&gt; Will Sentance: Outer.

70
00:03:19.648 --> 00:03:23.720
And we said, whatever comes out of it,
from cooling it,

71
00:03:23.720 --> 00:03:29.800
is gonna be stored in another func,
perfect.

72
00:03:29.800 --> 00:03:33.900
All right, so the last time we're going
to say this, maybe not, not today,

73
00:03:33.900 --> 00:03:34.810
at least today.

74
00:03:34.810 --> 00:03:36.683
We're calling a function outer,

75
00:03:36.683 --> 00:03:40.450
let's make sure we've got mighty
functional five call stack.

76
00:03:40.450 --> 00:03:44.740
We're calling a function outer,
lets have an energetic committed.

77
00:03:44.740 --> 00:03:45.690
We're calling a new function out.

78
00:03:45.690 --> 00:03:47.000
We're executing a new function.

79
00:03:47.000 --> 00:03:47.700
What are we gonna create?

80
00:03:47.700 --> 00:03:52.306
We're gonna create together a brand new-
&gt;&gt; class: Execution context.

81
00:03:52.306 --> 00:03:53.870
&gt;&gt; Will Sentance: Energize me.

82
00:03:53.870 --> 00:03:57.930
There you go.
Execution context, there it is.

83
00:03:57.930 --> 00:04:03.430
And what's the first, I forced that.

84
00:04:03.430 --> 00:04:07.370
It was so
energizing my mind just got lost.

85
00:04:07.370 --> 00:04:08.080
There it is, that.

86
00:04:08.080 --> 00:04:09.890
Create a local memory inside.

87
00:04:09.890 --> 00:04:12.150
What's the first thing we do
inside that local memory, Art?

88
00:04:12.150 --> 00:04:14.560
&gt;&gt; Art: I would set that counter to zero.

89
00:04:14.560 --> 00:04:16.405
&gt;&gt; Will Sentance: Great, counter to zero.

90
00:04:16.405 --> 00:04:20.870
Next thing, Griffin?
&gt;&gt; Griffin: You would declare

91
00:04:20.870 --> 00:04:23.820
increment counter.
&gt;&gt; Will Sentance: Very good.

92
00:04:23.820 --> 00:04:30.300
Function, I'm gonna ask, I'm gonna as you,
Griffin, to be even more precise here.

93
00:04:30.300 --> 00:04:32.980
Let's be complete,
I'm not just declaring increment counter.

94
00:04:32.980 --> 00:04:35.110
What do I actually also do
at the same time, Griffin?

95
00:04:35.110 --> 00:04:38.460
Can you see if you can do this?
&gt;&gt; Griffin: You're declaring

96
00:04:38.460 --> 00:04:40.866
increment counter to the-
&gt;&gt; Will Sentance: Local net,

97
00:04:40.866 --> 00:04:42.049
something else.

98
00:04:42.049 --> 00:04:46.360
What else am I also doing behind
the scenes when I declare that function?

99
00:04:46.360 --> 00:04:47.710
&gt;&gt; Griffin: You're also creating your

100
00:04:47.710 --> 00:04:51.130
backpack?
&gt;&gt; Will Sentance: I'm creating my little

101
00:04:51.130 --> 00:04:53.490
hidden scope, square bracket,

102
00:04:53.490 --> 00:04:55.510
square bracket.
&gt;&gt; Griffin: Closure?

103
00:04:55.510 --> 00:04:56.250
&gt;&gt; Will Sentance: I don't wanna say

104
00:04:56.250 --> 00:05:00.180
closure, I wanna say just I'm
making a little hidden link

105
00:05:00.180 --> 00:05:04.396
to the entire surrounding local memory.

106
00:05:04.396 --> 00:05:07.720
This is why I hate the term closure
because this only becomes meaningful when

107
00:05:07.720 --> 00:05:09.460
we return this out, for now it's just.

108
00:05:09.460 --> 00:05:14.573
But yes, we're creating a bond,
a bond on the back of this function to

109
00:05:14.573 --> 00:05:20.399
through this square bracket property
to the entire surrounding local memory.

110
00:05:20.399 --> 00:05:24.820
Particularly, of course,
we want this going there.

111
00:05:24.820 --> 00:05:29.310
And now, when I return out, Andrea, now
I reach the final line of the body of my

112
00:05:29.310 --> 00:05:33.218
function outer, what's gonna happen?
&gt;&gt; Andrea: You're gonna return

113
00:05:33.218 --> 00:05:34.690
incrementCounter.
&gt;&gt; Will Sentance: Return

114
00:05:34.690 --> 00:05:36.490
incrementCounter out.

115
00:05:36.490 --> 00:05:42.446
And there it is, and what is the new label
I'm gonna give this function globally?

116
00:05:42.446 --> 00:05:43.149
&gt;&gt; Andrea: Another.

117
00:05:43.149 --> 00:05:44.424
&gt;&gt; Will Sentance: Another function,

118
00:05:44.424 --> 00:05:46.020
exactly.

119
00:05:46.020 --> 00:05:50.380
Another function, there it is, and
this function, couple of things.

120
00:05:50.380 --> 00:05:53.800
Firstly, outer execution context,
what happens to it,

121
00:05:53.800 --> 00:05:56.560
Andrea?
&gt;&gt; Andrea: Pops off.

122
00:05:56.560 --> 00:05:57.580
&gt;&gt; Will Sentance: Pops off the stack,

123
00:05:57.580 --> 00:06:00.680
the core stack, it pops off.

124
00:06:00.680 --> 00:06:01.590
There we go.

125
00:06:01.590 --> 00:06:02.910
It's done.

126
00:06:04.500 --> 00:06:09.470
And all its data, see,
that does show any indication being done.

127
00:06:09.470 --> 00:06:12.490
All its data gone, or is it?

128
00:06:12.490 --> 00:06:19.113
No, so we'll actually also,
Andrea, go called out.

129
00:06:19.113 --> 00:06:20.703
Out came the function increment counter,

130
00:06:20.703 --> 00:06:23.030
gave a new label.
&gt;&gt; Andrea: It took out the backpack.

131
00:06:23.030 --> 00:06:25.517
&gt;&gt; Will Sentance: The backpack.

132
00:06:25.517 --> 00:06:28.720
You could also use other words like
the closer of variable environments.

133
00:06:28.720 --> 00:06:32.522
Out came on the back,
people on front end masses are like,

134
00:06:32.522 --> 00:06:36.460
he's gotta stop calling it that.
&gt;&gt; class: [LAUGH]

135
00:06:36.460 --> 00:06:37.910
&gt;&gt; Will Sentance: There it is.

136
00:06:37.910 --> 00:06:43.440
And attach on the back of the function
definition is this backpack,

137
00:06:43.440 --> 00:06:47.998
or we might want to call it instead
our lexical scope reference,

138
00:06:47.998 --> 00:06:50.590
to the live data from when I was born.

139
00:06:50.590 --> 00:06:54.220
My increment counter was born it got
returned out, before this was done, and

140
00:06:54.220 --> 00:06:56.230
we got a new label and other function.

141
00:06:56.230 --> 00:07:01.050
I got a little bond to my surrounding
data and there is counter.

142
00:07:02.380 --> 00:07:06.450
There it is, so
I'm going to return now to that function.

143
00:07:08.030 --> 00:07:12.954
And it has its little
backpack with counter

144
00:07:12.954 --> 00:07:17.551
is zero.
&gt;&gt; Will Sentance: Little backpack.

145
00:07:17.551 --> 00:07:20.950
Closed over variable environment,
I like that term for it.

146
00:07:20.950 --> 00:07:24.670
And now I want to cool, I'm not gonna
actually draw the execution context for

147
00:07:24.670 --> 00:07:26.550
these, I just want to ask a question.

148
00:07:26.550 --> 00:07:28.110
I wanna call another function.

149
00:07:28.110 --> 00:07:30.810
This is our very final piece.

150
00:07:30.810 --> 00:07:34.730
I wanna call another function again,
and I wanna ask a question.

151
00:07:36.210 --> 00:07:41.920
If I were to run my new function once,

152
00:07:41.920 --> 00:07:46.220
again, let's get rid of our, and

153
00:07:46.220 --> 00:07:51.580
actually a bit like we were saying,
we're gonna return our counter.

154
00:07:52.584 --> 00:07:57.000
Sorry, we're gonna return our counter,
but just

155
00:07:58.780 --> 00:08:02.580
console log what counter is after
doing the counter plus plus.

156
00:08:02.580 --> 00:08:06.040
So run my new function once, run it again,

157
00:08:06.040 --> 00:08:08.820
then run another function once,
and run it again.

158
00:08:10.820 --> 00:08:18.207
And each time I would be console
logging what my value of counter is.

159
00:08:18.207 --> 00:08:21.630
Who thinks they have an idea of
what counter will be each time?

160
00:08:22.680 --> 00:08:27.580
Do you wanna go, Katie?
&gt;&gt; Katie: I think they will both be two.

161
00:08:27.580 --> 00:08:28.838
&gt;&gt; Will Sentance: So what did I see from

162
00:08:28.838 --> 00:08:30.393
the first call I'd see?

163
00:08:30.393 --> 00:08:31.377
&gt;&gt; Katie: One.
&gt;&gt; Will Sentance: Then?

164
00:08:31.377 --> 00:08:32.769
&gt;&gt; Katie: Then two.

165
00:08:32.769 --> 00:08:34.604
Then one, then two.
&gt;&gt; Will Sentance: And

166
00:08:34.604 --> 00:08:37.393
why is that?
&gt;&gt; Katie: Because they're actually both

167
00:08:37.393 --> 00:08:40.810
separate references to different-
&gt;&gt; Will Sentance: Original functions with

168
00:08:40.810 --> 00:08:42.520
different original backpacks.

169
00:08:42.520 --> 00:08:43.799
Let's give Katie big round of applause.

170
00:08:43.799 --> 00:08:46.471
Very good, Katie, very nice.
&gt;&gt; Kara: [APPLAUSE]

171
00:08:46.471 --> 00:08:49.140
&gt;&gt; Will Sentance: [APPLAUSE] Yeah, indeed.

172
00:08:49.140 --> 00:08:49.710
So that's it.

173
00:08:50.730 --> 00:08:53.070
That is it.
We're going to, one second, Andrew.

174
00:08:53.070 --> 00:08:56.290
Do you see now, Bob,
why your comment was so smart?

175
00:08:56.290 --> 00:08:58.210
That's it, that is all the closure.

176
00:08:58.210 --> 00:09:00.430
I'm gonna add a few clarifications.

177
00:09:00.430 --> 00:09:04.531
Let's be clear,
when someone tells you closure is created,

178
00:09:04.531 --> 00:09:08.300
this is why I hate the term closure, it's
created when you return the function out.

179
00:09:08.300 --> 00:09:11.590
It only becomes interesting
when I return the function out.

180
00:09:11.590 --> 00:09:13.902
Actually, all functions, including outer,

181
00:09:13.902 --> 00:09:16.963
get a reference, a square bracket,
square bracket, scope,

182
00:09:16.963 --> 00:09:21.270
square bracket, square bracket,
to their surrounding variable environment.

183
00:09:21.270 --> 00:09:24.460
But that only becomes interesting when
we're trying to run that function

184
00:09:25.600 --> 00:09:28.500
when the rest of the memory
seems to have gone.

185
00:09:28.500 --> 00:09:31.360
But that, in the global memory,
the global memory is always there.

186
00:09:31.360 --> 00:09:34.670
So going like, well out has got
a reference to this global memory,

187
00:09:34.670 --> 00:09:36.810
who cares, it's there anyway.

188
00:09:36.810 --> 00:09:40.632
But if I try and
run increment counter out here,

189
00:09:40.632 --> 00:09:45.640
under the new label mining function,
it would suggest that this data is gone.

190
00:09:45.640 --> 00:09:50.114
No, cuz when it was born, it got born
with that hidden scope property.

191
00:09:50.114 --> 00:09:52.820
Cuz lexical scope is the key

192
00:09:52.820 --> 00:09:57.320
feature of how I decide what's available
to me when I call my function.

193
00:09:57.320 --> 00:10:02.085
Is this what was available to me when I
was defined through this hidden backpack

194
00:10:02.085 --> 00:10:04.800
that gets attached to the function
before it gets returned out.

