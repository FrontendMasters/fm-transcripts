WEBVTT

1
00:00:00.000 --> 00:00:05.557
So let's see the first of these three new
components, we going to add in action.

2
00:00:05.557 --> 00:00:09.235
Let's see the first,
the Web Browser API in action.

3
00:00:09.235 --> 00:00:14.466
So we going to roll through this code by
line and doing so we going to introduce

4
00:00:14.466 --> 00:00:19.410
the first of these new features of
the platform in which we run our code.

5
00:00:19.410 --> 00:00:24.207
The web browser API is going to introduce
it as we walk through this code line

6
00:00:24.207 --> 00:00:24.816
by line.

7
00:00:24.816 --> 00:00:27.101
We're going to discover already,

8
00:00:27.101 --> 00:00:31.441
we can already figure out our
regular model doesn't explain this.

9
00:00:31.441 --> 00:00:36.161
We will be able to explain it fairly
reasonably just by adding the top one of

10
00:00:36.161 --> 00:00:37.304
that list there.

11
00:00:37.304 --> 00:00:39.010
So, why do we take it off.

12
00:00:39.010 --> 00:00:45.038
Let's kick it off with the very
first line we're executing our code.

13
00:00:45.038 --> 00:00:49.941
As soon as we start executing our code,
we create a global

14
00:00:49.941 --> 00:00:51.576
&gt;&gt; Execution context

15
00:00:51.576 --> 00:00:53.108
&gt;&gt; Good, exactly.

16
00:00:53.108 --> 00:00:56.989
Actually, that's in the morning.

17
00:00:56.989 --> 00:01:01.962
We create a global
&gt;&gt; Execution context Thanks Andrea.

18
00:01:01.962 --> 00:01:04.380
voluble tone Andrea.

19
00:01:04.380 --> 00:01:08.069
Alright, so we enter the global.

20
00:01:08.069 --> 00:01:14.048
How am I going to make sure I
don't run out of space here?

21
00:01:14.048 --> 00:01:16.084
Enter the global.

22
00:01:16.084 --> 00:01:20.300
We have our global memory, here it is.

23
00:01:20.300 --> 00:01:25.605
Global memory and what's the very first
thing inside the global memory, Andrea?

24
00:01:25.605 --> 00:01:27.498
&gt;&gt; Say that again, I'm sorry.

25
00:01:27.498 --> 00:01:30.300
&gt;&gt; What's the very first thing we do,
sorry,

26
00:01:30.300 --> 00:01:33.557
what's the very first we
do in executing our code?

27
00:01:33.557 --> 00:01:38.633
Create a global execution context,
what's the first line say to do, Andrea?

28
00:01:38.633 --> 00:01:40.962
&gt;&gt; It says to add printHello function?

29
00:01:40.962 --> 00:01:43.988
&gt;&gt; Yeah, so how do we,
what's a posh way, Shelby,

30
00:01:43.988 --> 00:01:47.305
of saying add the printHello function?

31
00:01:47.305 --> 00:01:49.972
Declare or define, exactly, Art, yeah.

32
00:01:49.972 --> 00:01:52.855
Declare or define,
we could say add, create.

33
00:01:52.855 --> 00:01:55.952
But if you do use,
I love using the intruder terms.

34
00:01:55.952 --> 00:01:58.626
But if you do, say this,
&gt;&gt; Let's add declare,

35
00:01:58.626 --> 00:02:01.403
always make sure you say all the,
the words at once.

36
00:02:01.403 --> 00:02:04.116
Not all words, but
many of the words for it at once.

37
00:02:04.116 --> 00:02:07.272
Cuz then you can both let
the person you're explaining to in

38
00:02:07.272 --> 00:02:10.241
an interview show that you
know the technical term, but

39
00:02:10.241 --> 00:02:13.339
also that you know intuitively
what that actually means.

40
00:02:13.339 --> 00:02:16.790
I tell you, a lot of developers they say,
I declare a function.

41
00:02:16.790 --> 00:02:21.699
&gt;&gt; They're not clear that that's
storing that function definition in

42
00:02:21.699 --> 00:02:25.083
memory as the value
associate with that label.

43
00:02:25.083 --> 00:02:27.113
They're not clear of that.

44
00:02:27.113 --> 00:02:31.851
So I don't mind the intuitive but
always have the precise as well.

45
00:02:31.851 --> 00:02:34.750
So we declare the function printHello.

46
00:02:34.750 --> 00:02:38.481
And it is the whole function definition.

47
00:02:38.481 --> 00:02:40.612
There it is, perfect.

48
00:02:40.612 --> 00:02:45.301
All right, so instantly we want to,
our next line,

49
00:02:45.301 --> 00:02:49.563
which Andrea what does it say,
that next line?

50
00:02:49.563 --> 00:02:52.866
What does it look like it's saying?

51
00:02:52.866 --> 00:02:55.370
&gt;&gt; It says that Time out and for.

52
00:02:55.370 --> 00:02:57.548
&gt;&gt; So what does prime tell us?

53
00:02:57.548 --> 00:02:58.590
&gt;&gt; To execute.

54
00:02:58.590 --> 00:03:01.242
&gt;&gt; Yeah, to execute the set timer.

55
00:03:01.242 --> 00:03:03.230
&gt;&gt; And to put down the call.

56
00:03:03.230 --> 00:03:04.083
&gt;&gt; Exactly.

57
00:03:04.083 --> 00:03:08.252
That normally means,
exactly push the call stack.

58
00:03:08.252 --> 00:03:10.867
Now.
&gt;&gt; We are going to see with our built in

59
00:03:10.867 --> 00:03:11.671
functions.

60
00:03:11.671 --> 00:03:15.250
Att the call stack represents
our calls to our functions.

61
00:03:15.250 --> 00:03:17.294
If you go into Chrome Dev tools and

62
00:03:17.294 --> 00:03:21.895
look at calls to functions you will see
that the functions that actually get

63
00:03:21.895 --> 00:03:26.569
represented in the call stack are the ones
that create execution contexts in

64
00:03:26.569 --> 00:03:31.050
the sense that we are declaring a function
multiply by two and we call it.

65
00:03:31.050 --> 00:03:34.162
&gt;&gt; We are creating a typical
execution content for

66
00:03:34.162 --> 00:03:37.039
a function that we as
a developer declared.

67
00:03:37.039 --> 00:03:42.012
We will not see in our call stacking crew
in dev tools, A call to set timeout.

68
00:03:42.012 --> 00:03:45.513
That's something already,
what's going on here.

69
00:03:45.513 --> 00:03:47.690
So let's just think about this.

70
00:03:47.690 --> 00:03:50.230
We are going to call this set timeout.

71
00:03:50.230 --> 00:03:57.791
And we're gonna parse it,
our print.Hello function, there it is.

72
00:03:57.791 --> 00:04:00.097
And this value of 0.

73
00:04:00.097 --> 00:04:06.123
Now we said that in this
scenario here the console.logs

74
00:04:06.123 --> 00:04:10.120
are gonna go in which order, Katie?

75
00:04:10.120 --> 00:04:12.621
Me first and then print hello.

76
00:04:12.621 --> 00:04:15.122
&gt;&gt; Me first and then print hello.

77
00:04:15.122 --> 00:04:17.911
Yeah, me first then hello.

78
00:04:17.911 --> 00:04:19.258
Seems very odd.

79
00:04:19.258 --> 00:04:25.706
So already we know that when call set
timeout, normally when call a function and

80
00:04:25.706 --> 00:04:30.407
we pass in it's callback function
We'll execute set time out.

81
00:04:30.407 --> 00:04:34.861
In we go, we'll call printHello inside,
and before we ever get out of

82
00:04:34.861 --> 00:04:39.694
set time out, we finish running
printHello so we'll have console logged.

83
00:04:39.694 --> 00:04:43.921
So this suggests, when I call set
time out, do you think, Katie,

84
00:04:43.921 --> 00:04:47.420
that I'm running printHello
inside of set time outs?

85
00:04:47.420 --> 00:04:49.018
No.
&gt;&gt; It can't be right?

86
00:04:49.018 --> 00:04:53.429
Because otherwise how do I get straight
out of say it time and move on?

87
00:04:53.429 --> 00:04:55.408
I'm not running print hello.

88
00:04:55.408 --> 00:04:59.670
Say it time doesn't behave like
a typical function being called.

89
00:04:59.670 --> 00:05:04.616
We're going to say, rather than it
behaving the way we're used to [INAUDIBLE]

90
00:05:04.616 --> 00:05:09.732
context with a variable environment inside
of it It ain't gonna do that stuff.

91
00:05:09.732 --> 00:05:12.903
It's gonna do something
completely different.

92
00:05:12.903 --> 00:05:18.487
It's going to we've said there were three
parts of our synchronized JavaScript land.

93
00:05:18.487 --> 00:05:23.315
We are now going to discover a new part
of our JavaScript land, or not even our

94
00:05:23.315 --> 00:05:27.950
JavaScript land, of our environment
in which JavaScript is being run.

95
00:05:27.950 --> 00:05:31.358
JavaScript isn't run in isolation.

96
00:05:31.358 --> 00:05:36.361
JavaScript is run,
JavaScript is run in a web browser.

97
00:05:36.361 --> 00:05:41.258
And so when I run my JavaScript,
I'm actually dealing

98
00:05:41.258 --> 00:05:45.624
with some things outside
of my JavaScript land.

99
00:05:45.624 --> 00:05:47.130
And one of them.

100
00:05:47.130 --> 00:05:49.173
Is our web browser APIs.

101
00:05:49.173 --> 00:05:50.730
Web browser APIs.

102
00:05:50.730 --> 00:05:55.204
To be really clear,
this is not like that Spotify API,

103
00:05:55.204 --> 00:06:00.070
except in the sense that it's
a bunch of functionality that

104
00:06:00.070 --> 00:06:03.766
we can interact with,
which is like any API,

105
00:06:03.766 --> 00:06:08.760
it's a bunch of functionality or
data we can interact with.

106
00:06:08.760 --> 00:06:09.994
These are APIs.

107
00:06:09.994 --> 00:06:12.640
Let's call them almost features.

108
00:06:12.640 --> 00:06:16.871
These are features or
functionality of our web browser.

109
00:06:16.871 --> 00:06:19.955
Our web browser is a JavaScript runtime.

110
00:06:19.955 --> 00:06:21.717
We can run JavaScript.

111
00:06:21.717 --> 00:06:27.006
This is the JavaScript runtime, and
a bunch of other built-in tools.

112
00:06:27.006 --> 00:06:28.090
And one of them

113
00:06:48.850 --> 00:06:51.109
In that single JavaScript thread.

114
00:06:51.109 --> 00:06:55.551
But it ain't gonna be doing anything
else while that time is running.

115
00:06:55.551 --> 00:07:00.141
So instead, JavaScript is run in
an environment in which we can spin up in

116
00:07:00.141 --> 00:07:04.660
the background much more flexible
number of threads doing stuff like,

117
00:07:04.660 --> 00:07:05.788
what do you know?

118
00:07:05.788 --> 00:07:06.570
Creating.

119
00:07:06.570 --> 00:07:08.237
A background timer.

120
00:07:08.237 --> 00:07:09.812
Not in Java script.

121
00:07:09.812 --> 00:07:13.612
But using our web browser
background features.

122
00:07:13.612 --> 00:07:18.892
So we can spin up a timer and
what happens when I run set time out?

123
00:07:18.892 --> 00:07:20.746
You know what happens.

124
00:07:20.746 --> 00:07:24.082
I don't get involved in Java script lang.

125
00:07:24.082 --> 00:07:27.720
When I run set timer
it's a built in function.

126
00:07:27.720 --> 00:07:29.020
It speaks.

127
00:07:29.020 --> 00:07:33.051
It doesn't behave in a typical way.

128
00:07:33.051 --> 00:07:39.681
It instead speaks to our web browser APIs,
web browser API.

129
00:07:39.681 --> 00:07:41.501
Which one?

130
00:07:41.501 --> 00:07:48.153
Well, of course, timer, and
it creates A timer, and here it is.

131
00:07:48.153 --> 00:07:54.311
It creates a timer,
All the way down in our web browser API.

132
00:07:54.311 --> 00:07:59.275
And this is why we call them APIs,
because they're not part

133
00:07:59.275 --> 00:08:04.240
of JavaScript,
they're an interface to our web browser.

134
00:08:04.240 --> 00:08:07.350
Remember, I stands for interface.

135
00:08:07.350 --> 00:08:09.443
An interface with our web browser.

136
00:08:09.443 --> 00:08:13.700
When we run setTimer behind the scenes,
it's making a communication.

137
00:08:13.700 --> 00:08:17.189
It's interfacing with our web browser and
saying, folk,

138
00:08:17.189 --> 00:08:20.048
do you mind setting up
a timer in the background?

139
00:08:20.048 --> 00:08:24.790
And remember, this one, well, I don't
know if we're starting with this one.

140
00:08:24.790 --> 00:08:26.464
Let's start with this one.

141
00:08:26.464 --> 00:08:29.825
This one has a property of 0 milliseconds.

142
00:08:29.825 --> 00:08:34.321
So this timer is going
to instantly complete.

143
00:08:34.321 --> 00:08:39.510
This timer's gonna instantly
complete in a moment.

144
00:08:39.510 --> 00:08:44.124
But for now,
there's a timer being created and

145
00:08:44.124 --> 00:08:47.776
we now have to Pass along,
because we also.

146
00:08:47.776 --> 00:08:48.790
Wait, okay.

147
00:08:48.790 --> 00:08:54.027
Time is being created down here and
the zero has been passed as a property,

148
00:08:54.027 --> 00:08:59.686
but also, what's the other core piece
of information the timer needs to know?

149
00:08:59.686 --> 00:09:01.967
&gt;&gt; What to do when the time's out.

150
00:09:01.967 --> 00:09:06.625
&gt;&gt; What do to when the time out,
which is So it has associated

151
00:09:06.625 --> 00:09:11.604
with it a reference to
that print Hello function.

152
00:09:11.604 --> 00:09:15.871
So it nows that okay, when I'm finished,

153
00:09:15.871 --> 00:09:20.256
this is the function
that I'm going to go and

154
00:09:20.256 --> 00:09:23.811
speak to, I'm going to go and run.

155
00:09:23.811 --> 00:09:25.730
[SOUND] There we go.

156
00:09:25.730 --> 00:09:30.715
And then it has, I guess,
a column saying complete or not.

157
00:09:30.715 --> 00:09:33.308
And what do we know initially?

158
00:09:33.308 --> 00:09:36.199
It is, of course, not complete.

159
00:09:36.199 --> 00:09:38.891
Okay, that's now been set up.

160
00:09:38.891 --> 00:09:41.684
Set timeout is now complete, and

161
00:09:41.684 --> 00:09:47.620
we go onto our global execution context,
where what do we encounter?

162
00:09:47.620 --> 00:09:51.002
What's the next line we encounter Griffin?

163
00:09:51.002 --> 00:09:53.049
&gt;&gt; That would be the console.

164
00:09:53.049 --> 00:09:55.185
&gt;&gt; It would be the console log.

165
00:09:55.185 --> 00:10:01.326
Let's just create a console for ourselves
over here and what's the console log?

166
00:10:01.326 --> 00:10:02.127
&gt;&gt; Me first?

167
00:10:02.127 --> 00:10:02.928
&gt;&gt; Me first.

168
00:10:02.928 --> 00:10:06.132
So what's our first thing in our console?

169
00:10:06.132 --> 00:10:06.933
&gt;&gt; Me first.

170
00:10:06.933 --> 00:10:07.740
&gt;&gt; Me first.

171
00:10:07.740 --> 00:10:09.476
And now, what happens?

172
00:10:09.476 --> 00:10:15.096
Our timer completes in the background,
our timer completes in the background.

173
00:10:15.096 --> 00:10:18.400
And so what is gonna happen,
do we think, Art,

174
00:10:18.400 --> 00:10:21.541
when our timer completes
in the background?

175
00:10:21.541 --> 00:10:23.112
How does that happen?

176
00:10:23.112 --> 00:10:26.690
How do I start executing
the printHello function?

177
00:10:26.690 --> 00:10:28.670
Go back to the global.

178
00:10:28.670 --> 00:10:35.131
&gt;&gt; It's gonna go back to our call,
it's gonna push our call to printHello,

179
00:10:35.131 --> 00:10:40.760
somehow, we'll see in a minute how,
across to our call stack.

180
00:10:40.760 --> 00:10:46.000
Where we then, so we're in global,
we're in global, and

181
00:10:46.000 --> 00:10:53.081
on the completion of the timer we push the
call to print hello to the call stat and

182
00:10:53.081 --> 00:10:58.552
well if we're calling print
hello Andrea what do we create?

183
00:10:58.552 --> 00:11:00.912
A new
&gt;&gt; Execution context.

184
00:11:00.912 --> 00:11:05.870
&gt;&gt; Yeah well now we've back
in regular javascript land.

185
00:11:05.870 --> 00:11:09.728
Print Hello, print contents,
by the way, in global.

186
00:11:09.728 --> 00:11:10.586
Look at that.

187
00:11:10.586 --> 00:11:12.872
Where is print Hello being executed?

188
00:11:12.872 --> 00:11:15.946
It ain't being executed
inside setTimeout is it?

189
00:11:15.946 --> 00:11:20.019
setTimeout didn't do any execution
print Hello, it just span up.

190
00:11:20.019 --> 00:11:24.816
It spoke, it's like setTimeout is almost
like Make an API request in the sense

191
00:11:24.816 --> 00:11:27.633
that it's speaking outside of JavaScript.

192
00:11:27.633 --> 00:11:32.078
It says go to speak to this built in
feature of the web browser, a timer.

193
00:11:32.078 --> 00:11:36.746
Where it spun a timer with zero
milliseconds wait a function and complete.

194
00:11:36.746 --> 00:11:41.638
But this was all happening separately
while set time [INAUDIBLE] set okay we're

195
00:11:41.638 --> 00:11:47.041
done and moved on And in the mean time,
hit console log at me first.

196
00:11:47.041 --> 00:11:51.373
This got hit before we then
completed the timer and

197
00:11:51.373 --> 00:11:54.880
passed print hello up to the call stack.

198
00:11:54.880 --> 00:11:58.182
Call print hello which then did what?

199
00:11:58.182 --> 00:12:01.100
Dave, what does print hello do?

200
00:12:01.100 --> 00:12:02.674
Print hello.

201
00:12:02.674 --> 00:12:06.086
&gt;&gt; [LAUGH] Brilliant.

202
00:12:06.086 --> 00:12:08.053
And look at that.

203
00:12:08.053 --> 00:12:13.035
Against all the odds,
against all the odds,

204
00:12:13.035 --> 00:12:19.740
our me first got printed before
our print hello fuction ran.

205
00:12:19.740 --> 00:12:23.442
Because we span up our web
browser API over here.

206
00:12:23.442 --> 00:12:26.150
Now, we're gonna see in a second.

207
00:12:26.150 --> 00:12:26.871
Hold on.

208
00:12:26.871 --> 00:12:31.658
Why even though it took Sarah
milliseconds did we end up running

209
00:12:31.658 --> 00:12:33.645
our console log me first?

210
00:12:33.645 --> 00:12:39.153
We're gonna see that in a moment, but
at this point let's have thumb and

211
00:12:39.153 --> 00:12:42.090
we'll walk through it one more time.

212
00:12:42.090 --> 00:12:44.314
I declared a function, printHello.

213
00:12:44.314 --> 00:12:45.704
I then ran setTimeout.

214
00:12:45.704 --> 00:12:49.181
Parsed in printHello functionality,
which, by the way,

215
00:12:49.181 --> 00:12:52.379
the design of setTimeout,
where does that come from?

216
00:12:52.379 --> 00:12:55.786
Well, we go and
look in the documentation of JavaScript.

217
00:12:55.786 --> 00:13:00.319
It says, the first thing that gets
parsed is a function that will be run On

218
00:13:00.319 --> 00:13:04.647
the completion of a timer of the length of
the value that gets passed to the second

219
00:13:04.647 --> 00:13:05.745
parameter, okay?

220
00:13:05.745 --> 00:13:08.781
You could look at the documentation
which set time out.

221
00:13:08.781 --> 00:13:11.623
The first thing that gets
passed is functionality,

222
00:13:11.623 --> 00:13:14.593
then we run on the completion
of a timer of this length.

223
00:13:14.593 --> 00:13:18.081
And we find well, we don't run
print hello inside set time out.

224
00:13:18.081 --> 00:13:21.191
No, no, no,
that would block the thread Instead we,

225
00:13:21.191 --> 00:13:25.969
in setTimeout, speak to a whole separate
area outside of JavaScript land.

226
00:13:25.969 --> 00:13:29.329
Up here is JavaScript,
this is just the web browser.

227
00:13:29.329 --> 00:13:33.061
And there, there's a feature called Timer,
no problem.

228
00:13:33.061 --> 00:13:34.777
We make Timer do its stuff.

229
00:13:34.777 --> 00:13:40.040
It's a very short timer, don't get me
wrong, it's a zero-millisecond timer.

230
00:13:40.040 --> 00:13:41.615
Attached to it is a function or

231
00:13:41.615 --> 00:13:44.828
a reference of the function that
was passed in a set time out.

232
00:13:44.828 --> 00:13:47.411
So we take into this,
we take a timer and we take,

233
00:13:47.411 --> 00:13:51.128
we pass in a function and this
important information into this timer,

234
00:13:51.128 --> 00:13:54.152
there's important information
in zero milliseconds.

235
00:13:54.152 --> 00:13:58.745
There's the function it's not complete
initial, it's not complete initially And

236
00:13:58.745 --> 00:14:01.177
then Set Timeout's done it's job.

237
00:14:01.177 --> 00:14:06.040
Set Timeout's done it's job of speaking
to the web browser API land, and

238
00:14:06.040 --> 00:14:10.276
so it moves straight on and
the next line is console log me first.

239
00:14:10.276 --> 00:14:13.021
And so we instantly console log me first.

240
00:14:13.021 --> 00:14:14.747
We didn't wait a second.

241
00:14:14.747 --> 00:14:18.406
And then Only then do we see,
timer's completed, and

242
00:14:18.406 --> 00:14:20.998
this function is now ready to be executed.

243
00:14:20.998 --> 00:14:23.806
Well, it's gotta get back into JavaScript.

244
00:14:23.806 --> 00:14:26.326
So how do you get it back into JavaScript?

245
00:14:26.326 --> 00:14:28.558
Well, you push it to the call stack.

246
00:14:28.558 --> 00:14:33.454
And so it gets called, we create that
function execution context inside of which

247
00:14:33.454 --> 00:14:36.119
it says, console.log("Hello"):.

248
00:14:36.119 --> 00:14:41.185
And so our ordering This ends up being,
this is first and this is second.

249
00:14:41.185 --> 00:14:45.774
And we could never have guessed
that from looking at this code in

250
00:14:45.774 --> 00:14:47.698
the conventional sense.

