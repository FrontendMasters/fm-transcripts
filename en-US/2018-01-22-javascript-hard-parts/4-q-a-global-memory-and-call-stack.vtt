WEBVTT

1
00:00:00.140 --> 00:00:02.920
&gt;&gt; Will Sentance: One more thing,
let's remind ourselves,

2
00:00:02.920 --> 00:00:08.150
we keep track of the functions being
called in JavaScript with a call stack.

3
00:00:08.150 --> 00:00:11.312
It tracks,
which execution content we are in?

4
00:00:11.312 --> 00:00:14.104
That is,
what function is currently being run?

5
00:00:14.104 --> 00:00:19.231
And when we finish writing that function,
where do we return to?

6
00:00:19.231 --> 00:00:20.315
The next thing down the stack.

7
00:00:20.315 --> 00:00:24.139
We start with one global
execution context, and

8
00:00:24.139 --> 00:00:29.090
then we can have many function
level execution context above.

9
00:00:29.090 --> 00:00:31.809
Well, I would love to see,
if everyone's thumbs up, okay?

10
00:00:31.809 --> 00:00:34.230
I wanna see Matt's clarification,
can you talk us through, Matt?

11
00:00:34.230 --> 00:00:39.845
&gt;&gt; Matt: Well, I guess I just wonder how
do we get from the function of multiply 2.

12
00:00:39.845 --> 00:00:46.474
And then we bounce down to
the constant of output multipleBy2.

13
00:00:46.474 --> 00:00:47.548
I guess-
&gt;&gt; Will Sentance: See,

14
00:00:47.548 --> 00:00:49.896
this is why clarification is so great.

15
00:00:49.896 --> 00:00:55.286
What a great clarification from Matt,
that was a confusion and

16
00:00:55.286 --> 00:01:00.220
interpretation that many,
many people will have.

17
00:01:00.220 --> 00:01:07.060
And there is based in a, yeah,
a misunderstanding, maybe?

18
00:01:07.060 --> 00:01:08.606
I don't know, whatever.

19
00:01:08.606 --> 00:01:10.290
Matt, great question.

20
00:01:10.290 --> 00:01:13.830
We do not jump back up to multipleBy2.

21
00:01:13.830 --> 00:01:18.200
When I run my 1, it says store, well,
what does line 1 say in the code?

22
00:01:18.200 --> 00:01:20.830
&gt;&gt; Matt: Store it in a function.

23
00:01:20.830 --> 00:01:22.305
&gt;&gt; Will Sentance: No,
what does line 1 say?

24
00:01:22.305 --> 00:01:23.780
&gt;&gt; Matt: [INAUDIBLE].

25
00:01:23.780 --> 00:01:26.660
&gt;&gt; Will Sentance: Yep,
what does line 2 say?

26
00:01:26.660 --> 00:01:29.642
&gt;&gt; Matt: Function is multiplied by 2.

27
00:01:29.642 --> 00:01:31.110
&gt;&gt; Will Sentance: Exactly,
it says go store.

28
00:01:31.110 --> 00:01:38.156
It says go store all the exact
function text in that function,

29
00:01:38.156 --> 00:01:44.560
definition, go store it in
the label multiplied by 2.

30
00:01:44.560 --> 00:01:48.895
After I've declared the function
multiplied by 2, Matt,

31
00:01:48.895 --> 00:01:50.936
what if I were to write this?

32
00:01:50.936 --> 00:01:56.358
console.log, to log to my

33
00:01:56.358 --> 00:02:01.800
console, multipleBy2.

34
00:02:01.800 --> 00:02:04.915
What would I see in my console, Matt?

35
00:02:04.915 --> 00:02:07.951
&gt;&gt; Matt: I don't know?

36
00:02:07.951 --> 00:02:09.581
&gt;&gt; Will Sentance: Have a think about it,
give it a shot.

37
00:02:09.581 --> 00:02:11.410
What would make sense?

38
00:02:11.410 --> 00:02:16.192
JavaScript sees the word multipleBy2,
where's he go looking for it?

39
00:02:16.192 --> 00:02:17.666
&gt;&gt; Matt: In the function.

40
00:02:17.666 --> 00:02:19.591
&gt;&gt; Will Sentance: Where's it going
looking for more multipleBy2, Andrea?

41
00:02:19.591 --> 00:02:20.888
&gt;&gt; Andrea: The global memory?
&gt;&gt; Will Sentance: The global memory,

42
00:02:20.888 --> 00:02:22.043
what does it find?

43
00:02:22.043 --> 00:02:26.442
&gt;&gt; Andrea: A function?

44
00:02:26.442 --> 00:02:28.282
&gt;&gt; Will Sentance: The whole
function definition.

45
00:02:28.282 --> 00:02:32.187
So if I were to console.log multipleBy2,
Clara, what would I see in my console?

46
00:02:32.187 --> 00:02:33.888
&gt;&gt; Clara: I don't remember exactly, but

47
00:02:33.888 --> 00:02:36.542
it says something like
this is a function object.

48
00:02:36.542 --> 00:02:38.135
&gt;&gt; Will Sentance: It will say
this is a function object but

49
00:02:38.135 --> 00:02:39.888
it will actually be as the whole function.

50
00:02:39.888 --> 00:02:41.989
Depending on your console,
it's really good point by Clara.

51
00:02:41.989 --> 00:02:47.149
Some basic, older consoles will just say,
function but

52
00:02:47.149 --> 00:02:52.749
from dev tools, we literally say,
[INAUDIBLE] console here.

53
00:02:52.749 --> 00:02:57.838
It will literally say,
function multipleBy2 num,

54
00:02:57.838 --> 00:03:04.450
and then it will have return,
it will have the whole code inside.

55
00:03:04.450 --> 00:03:08.855
So Matt, when we call multipleBy2
there in line 3, when we invoke,

56
00:03:08.855 --> 00:03:13.723
when we run it with did you see where
it says comes output equal yet?

57
00:03:13.723 --> 00:03:16.100
We're not jumping back into the function,
what are we doing?

58
00:03:16.100 --> 00:03:18.949
We're going into queue memory and
we're grabbing this definition to use it,

59
00:03:18.949 --> 00:03:19.777
does that make sense?

60
00:03:19.777 --> 00:03:20.850
&gt;&gt; Matt: It's already stored.

61
00:03:20.850 --> 00:03:23.958
&gt;&gt; Will Sentance: It's already stored,
the word function, the word const.

62
00:03:23.958 --> 00:03:25.899
All they're doing is saying, JavaScript,

63
00:03:25.899 --> 00:03:28.580
free up some space to store
this stuff that's following.

64
00:03:28.580 --> 00:03:29.305
Does that make sense now.

65
00:03:29.305 --> 00:03:30.910
Matt?
&gt;&gt; Matt: So that's the state?

66
00:03:30.910 --> 00:03:33.022
&gt;&gt; Will Sentance: That's our state,
that's our live data.

67
00:03:33.022 --> 00:03:37.866
That's how, and that live data can
include actual functionality, like that.

68
00:03:37.866 --> 00:03:41.979
Do you see that now, Matt,
that when you're calling multipleBy2,

69
00:03:41.979 --> 00:03:46.177
you're not going back in the code
back up to the definition earlier on.

70
00:03:46.177 --> 00:03:50.261
No, that definition is being grabbed,
stored under a label in memory.

71
00:03:50.261 --> 00:03:54.551
&gt;&gt; Matt: So
that's the definition of the synchronous,

72
00:03:54.551 --> 00:03:57.853
line by line reading of-
&gt;&gt; Will Sentance: I don't know,

73
00:03:57.853 --> 00:04:02.428
I will say, essentially,
we have taken our function definition,

74
00:04:02.428 --> 00:04:07.501
stored the what do I do line by line
in memory under the label multipleBy2.

75
00:04:07.501 --> 00:04:11.597
When I run multipleBy2, I go look in
memory, I find this code and I say,

76
00:04:11.597 --> 00:04:12.960
grab this code.

77
00:04:12.960 --> 00:04:17.407
Make some space to start going
through it line by line.

78
00:04:17.407 --> 00:04:19.820
And just start doing it line by line,
and storing stuff in memory there.

79
00:04:19.820 --> 00:04:23.834
When I finish running that function,
well, where do I go next?

80
00:04:23.834 --> 00:04:28.219
Well, we had multipleBy2 on the call
stack, I go back out to global.

81
00:04:28.219 --> 00:04:29.042
Art, go ahead.

82
00:04:29.042 --> 00:04:31.880
&gt;&gt; Art: I was just curious,
where did the call stack is located,

83
00:04:31.880 --> 00:04:33.960
is it also in the memory, the call stack?

84
00:04:33.960 --> 00:04:37.040
&gt;&gt; Will Sentance: It is also in
our memory, but for our purposes,

85
00:04:37.040 --> 00:04:40.967
we don't need to know exactly
where it's being stored, but

86
00:04:40.967 --> 00:04:43.595
it's there in our JavaScript runtime.

87
00:04:43.595 --> 00:04:47.502
It's part of the JavaScript
engine being run, make sense?

88
00:04:47.502 --> 00:04:48.473
&gt;&gt; Art: Makes sense.
&gt;&gt; Will Sentance: All right.

89
00:04:48.473 --> 00:04:49.981
Go ahead, Griffin.

90
00:04:49.981 --> 00:04:52.281
&gt;&gt; Griffin: Is there
a different call stack for

91
00:04:52.281 --> 00:04:57.526
each JavaScript file if you're importing
the stuff from one file to another?

92
00:04:57.526 --> 00:05:01.277
Does it import it into
that one's call stack?

93
00:05:01.277 --> 00:05:06.796
&gt;&gt; Will Sentance: If we have
one JavaScript application

94
00:05:06.796 --> 00:05:12.147
running, it has one call stack now.

95
00:05:12.147 --> 00:05:15.242
&gt;&gt; Griffin: Which is at the highest point,
or what-

96
00:05:15.242 --> 00:05:16.714
&gt;&gt; Will Sentance: When that's imported,

97
00:05:16.714 --> 00:05:18.536
you're taking code to be run,

98
00:05:18.536 --> 00:05:22.541
while it's being run in this environment,
a single environment.

99
00:05:22.541 --> 00:05:26.342
But you're doing an interesting question
which we're gonna go into here.

100
00:05:26.342 --> 00:05:31.084
But you can have multiple separate
JavaScript call stacks run to all this.

101
00:05:31.084 --> 00:05:37.599
And that happens when you use things like
web workers or other chart processes.

102
00:05:37.599 --> 00:05:40.879
Things which allow you to have multiple
background areas in JavaScript, but

103
00:05:40.879 --> 00:05:42.760
we don't need to worry about that for
here.

104
00:05:42.760 --> 00:05:43.411
&gt;&gt; Griffin: Okay.

105
00:05:43.411 --> 00:05:44.414
&gt;&gt; Will Sentance: Yeah, Mark?

106
00:05:44.414 --> 00:05:47.633
&gt;&gt; Mark: I don't know how
to pronounce his name, but

107
00:05:47.633 --> 00:05:52.869
he's asking about const num equals three,
why did you write that?

108
00:05:52.869 --> 00:05:56.219
&gt;&gt; Will Sentance: Good question,
just to show some basic data being stored.

109
00:05:56.219 --> 00:05:57.679
We did not use num is 3,

110
00:05:57.679 --> 00:06:02.795
we just wanted to have some evidence that
we can store data in memory, that's all.

111
00:06:02.795 --> 00:06:05.479
It was just for a pedagogical technique?

112
00:06:05.479 --> 00:06:07.260
Tell them that, all right?

113
00:06:07.260 --> 00:06:10.728
&gt;&gt; Mark: Is the global thread and
local thread different?

114
00:06:10.728 --> 00:06:14.595
&gt;&gt; Will Sentance: No,
it's the single thread.

115
00:06:14.595 --> 00:06:16.298
The thread is just a posh name.

116
00:06:16.298 --> 00:06:21.268
I think of the thread as some type
of fancy, mystique-driven thing.

117
00:06:21.268 --> 00:06:23.973
All it is is just a posh name for
we did line 1,

118
00:06:23.973 --> 00:06:28.629
then we did line 2, multiplyBy2,
then we did line 3, declaring output.

119
00:06:28.629 --> 00:06:31.512
That said,
we don't want to put it in output yet,

120
00:06:31.512 --> 00:06:34.096
we've gotta go run
the function multiplyBy2.

121
00:06:34.096 --> 00:06:37.011
And so we stopped doing the code
line by line globally, and

122
00:06:37.011 --> 00:06:40.118
started doing the code line by
line inside the function body.

123
00:06:40.118 --> 00:06:42.591
But it's just more code to be read and
done.

124
00:06:42.591 --> 00:06:46.593
So they are absolutely same thing, okay?

125
00:06:46.593 --> 00:06:47.861
Yes, go ahead, Clara.

126
00:06:47.861 --> 00:06:50.780
&gt;&gt; Clara: Is there any reason
you use const instead of var?

127
00:06:50.780 --> 00:06:53.070
&gt;&gt; Will Sentance: Because it's a default.

128
00:06:53.070 --> 00:06:58.426
There's a default
increasingly through ES2015.

129
00:06:58.426 --> 00:07:01.109
For anything, you should default to const,

130
00:07:01.109 --> 00:07:04.504
unless you're going to actually
reassign it in memory.

131
00:07:04.504 --> 00:07:07.777
Because this num is never touched,
we can use const.

132
00:07:07.777 --> 00:07:12.019
Because output is not being altered
any way here, we can use const.

133
00:07:12.019 --> 00:07:16.390
So it's a sort of default rule, but
you should always default to const for

134
00:07:16.390 --> 00:07:21.343
declaring what you previously would have
thought of as declaring your variables.

135
00:07:21.343 --> 00:07:27.457
And then use let as a backup, if you're
ever going to do some reassignment.

136
00:07:27.457 --> 00:07:31.193
And say, no, no, no, no,
right now is 4, we're gonna make it 5.

137
00:07:31.193 --> 00:07:35.441
Right now it's a string Will.,
we're gonna make it a string Clara.

138
00:07:35.441 --> 00:07:37.019
Then you can use let, but otherwise,

139
00:07:37.019 --> 00:07:39.151
you should be declaring
all your stuff with const.

140
00:07:39.151 --> 00:07:43.256
Okay, but think of it just it's vary,
it's var.

141
00:07:43.256 --> 00:07:45.627
It's var but
just has some special rules around it.

142
00:07:45.627 --> 00:07:49.320
Those special rules aren't
going to affect us here,

143
00:07:49.320 --> 00:07:52.284
not in any of the stuff we're doing today.

144
00:07:52.284 --> 00:07:55.579
But think of it as var just as
you know the behavior of var,

145
00:07:55.579 --> 00:07:57.305
think of it the same way here.

146
00:07:57.305 --> 00:07:58.886
It has some special properties but

147
00:07:58.886 --> 00:08:01.074
we don't need to worry
about those right here.

148
00:08:01.074 --> 00:08:04.898
Those special properties
being you can't change it.

149
00:08:04.898 --> 00:08:08.924
But besides that,
we don't need to worry about those here.

150
00:08:08.924 --> 00:08:10.760
All right, so here we go.

151
00:08:10.760 --> 00:08:11.287
&gt;&gt; Ameen: I have a question.

152
00:08:11.287 --> 00:08:13.277
&gt;&gt; Will Sentance: Go ahead, Ameen.

153
00:08:13.277 --> 00:08:17.490
&gt;&gt; Ameen: What about if the function
is declared after it's been called?

154
00:08:17.490 --> 00:08:21.644
&gt;&gt; Will Sentance: Yeah,
I wanna hold on that question, Ameen.

155
00:08:21.644 --> 00:08:26.467
This is a concept known as hoisting,
we don't need to in this,

156
00:08:26.467 --> 00:08:28.652
we're not gonna come to it.

157
00:08:28.652 --> 00:08:32.609
Again, it has no implications for
the things we're gonna see today.

158
00:08:32.609 --> 00:08:35.908
So part of the challenge we will face
when we're doing the hard parts, or

159
00:08:35.908 --> 00:08:38.955
the language, is figuring out which
bits do we wanna dive deep on.

160
00:08:38.955 --> 00:08:41.641
And which bits we can say,
you know what actually,

161
00:08:41.641 --> 00:08:46.217
that's not gonna have any implications for
how we're gonna solve these challenges.

162
00:08:46.217 --> 00:08:47.858
So on that one, we'll hold on it.

