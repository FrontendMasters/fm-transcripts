WEBVTT

1
00:00:00.100 --> 00:00:00.800
&gt;&gt; Will: Hold on.

2
00:00:00.800 --> 00:00:04.990
How much changed here from the last
time we wrote this function, copy array,

3
00:00:04.990 --> 00:00:07.960
and multiply each element by two?

4
00:00:07.960 --> 00:00:09.890
This time, copy and divide by two.

5
00:00:09.890 --> 00:00:13.170
How much changed here?

6
00:00:13.170 --> 00:00:16.740
We took in at the array, too in an array,
sorry, one, two, three, could be anything.

7
00:00:16.740 --> 00:00:18.130
Create an output array.

8
00:00:18.130 --> 00:00:20.075
Looped through the input array.

9
00:00:20.075 --> 00:00:23.700
[LAUGH] Took each element,
did something to it, and

10
00:00:23.700 --> 00:00:27.578
then what pushed the result,
multiplied, divided,

11
00:00:27.578 --> 00:00:33.004
whatever element to output, and
then returned out that full output array.

12
00:00:33.004 --> 00:00:36.334
A lot of this functionality was the same.

13
00:00:36.334 --> 00:00:42.880
But wait, we have a new function,
copy array and add three.

14
00:00:45.200 --> 00:00:48.036
Who thinks that we're gonna go through
this one the whole way through as well?

15
00:00:48.036 --> 00:00:51.023
No we're not, because it's boring,
come on, Jesus.

16
00:00:51.023 --> 00:00:53.510
What principle are we
breaking at this point?

17
00:00:53.510 --> 00:00:55.951
What principle are we breaking everyone?
&gt;&gt; Speaker 2: Drive.

18
00:00:55.951 --> 00:00:57.487
&gt;&gt; Will: Drive, we're repeating ourselves

19
00:00:57.487 --> 00:01:00.560
constantly, all this stuff's the same,
everything's the same.

20
00:01:00.560 --> 00:01:03.650
Which is the only bit
that's actually changed?

21
00:01:03.650 --> 00:01:07.129
Lindsey, what's the only bit here in
each function that's actually changed?

22
00:01:07.129 --> 00:01:08.568
&gt;&gt; Speaker 2: It's what you're doing to

23
00:01:08.568 --> 00:01:10.830
the array, or to the-
&gt;&gt; Will: Not to the array, to-

24
00:01:10.830 --> 00:01:11.760
&gt;&gt; Speaker 2: To the element.

25
00:01:11.760 --> 00:01:13.120
&gt;&gt; Will: Individual element of the array

26
00:01:13.120 --> 00:01:14.300
each time you loop.

27
00:01:14.300 --> 00:01:18.312
That's the only thing that's changed here,
right, divide by two,

28
00:01:18.312 --> 00:01:20.021
multiply by two, add three.

29
00:01:20.021 --> 00:01:21.770
What could we do here?

30
00:01:21.770 --> 00:01:25.720
We saw with our earlier function.

31
00:01:25.720 --> 00:01:30.430
What can we learn from how we
handled 10 squared, 9 squared,

32
00:01:30.430 --> 00:01:32.300
100 squared, 200 squared?

33
00:01:32.300 --> 00:01:36.300
We handled that in a certain way so
that we didn't have to rewrite a function.

34
00:01:36.300 --> 00:01:39.265
We're creating a brand new function for
10 squared, a brand new function for

35
00:01:39.265 --> 00:01:40.540
9 squared, a brand new function for
100 squared.

36
00:01:42.440 --> 00:01:47.700
What could we learn from that, for how we
could avoid creating a brand new function?

37
00:01:47.700 --> 00:01:51.390
We want the functionality to take
an array and add three to each element.

38
00:01:51.390 --> 00:01:54.470
Take an array, divide each element
by two and put in the array.

39
00:01:54.470 --> 00:01:55.530
We want that functionality but

40
00:01:55.530 --> 00:01:59.060
we don't wanna rewrite all
the repetitive functionality.

41
00:01:59.060 --> 00:02:03.036
What could we do, Andrea?
&gt;&gt; Speaker 2: We can make a generic call

42
00:02:03.036 --> 00:02:07.121
back.
&gt;&gt; Will: We can make a generic callback.

43
00:02:07.121 --> 00:02:09.380
I always get confused when fancy words.

44
00:02:09.380 --> 00:02:12.240
What would we intuitively do?

45
00:02:12.240 --> 00:02:14.790
What can we actually-
&gt;&gt; Speaker 2: Add another parameter.

46
00:02:15.820 --> 00:02:16.660
&gt;&gt; Will: Very nice, Andrea.

47
00:02:16.660 --> 00:02:19.620
Can we hear that really loudly so
all of our audience can celebrate?

48
00:02:19.620 --> 00:02:23.185
Andrea, from Minneapolis.
&gt;&gt; Speaker 2: Add a parameter.

49
00:02:23.185 --> 00:02:24.840
&gt;&gt; Will: Very nice, Andrea.

50
00:02:24.840 --> 00:02:30.510
Indeed we add a parameter,
leave a place holder in our definition.

51
00:02:30.510 --> 00:02:32.640
We've already got a place holder for
our data.

52
00:02:32.640 --> 00:02:37.411
But we're gonna pass not just in 1, 2,
3, but 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, or

53
00:02:37.411 --> 00:02:39.470
I don't know, 100, 200, 300.

54
00:02:39.470 --> 00:02:42.320
Our function is general to any data.

55
00:02:44.230 --> 00:02:48.725
What if we also made it general to
any specific functionality bait

56
00:02:48.725 --> 00:02:51.597
that's gonna be applied to any element?

57
00:02:51.597 --> 00:02:55.563
Now you might think we can leave a place
holder and just pass in directly,

58
00:02:55.563 --> 00:02:58.580
add three, or pass in directly,
multiply by two.

59
00:02:58.580 --> 00:03:01.580
We can't pass functionality
operators around like that.

60
00:03:01.580 --> 00:03:03.360
So how do we pass functionality around?

61
00:03:03.360 --> 00:03:05.720
How do we wrap up
functionality in JavaScript,

62
00:03:05.720 --> 00:03:06.860
Clara?
&gt;&gt; Speaker 2: In a function.

63
00:03:06.860 --> 00:03:08.340
&gt;&gt; Will: In functions, exactly.

64
00:03:09.390 --> 00:03:11.809
The quick and dry, what can we do?

65
00:03:11.809 --> 00:03:18.196
We could generalize our functions so that
we pass in the specific instruction, only,

66
00:03:18.196 --> 00:03:23.897
the specific instruction only when we run,
copy, array, and manipulate.

67
00:03:23.897 --> 00:03:29.158
So right now, before we said,
take the element when

68
00:03:29.158 --> 00:03:34.669
I is zero take array zero number one and
add three to it.

69
00:03:34.669 --> 00:03:41.602
Now we say, when array I, when I is zero,
array zero is one, take that one and

70
00:03:41.602 --> 00:03:47.580
throw it in as the input to leave
a place holder here instructions,

71
00:03:47.580 --> 00:03:52.491
in to which we can add our
multiply by two functionality

72
00:03:52.491 --> 00:03:56.910
only when we run copy,
array, and manipulate.

73
00:03:56.910 --> 00:04:01.045
And leave a place holder in our copy, we
used to call it copy, array, two or three,

74
00:04:01.045 --> 00:04:01.607
whatever.

75
00:04:01.607 --> 00:04:05.828
Now just put a general function and
leave a placeholder for the specific bit

76
00:04:05.828 --> 00:04:10.384
of functionality that we're gonna apply
to, the specific bit of functionality

77
00:04:10.384 --> 00:04:15.380
we're going to apply to the individual
element, and just leave it blank for now.

78
00:04:15.380 --> 00:04:16.910
Say instructions,
we know what it's gonna be.

79
00:04:16.910 --> 00:04:20.726
Just like we don't know what array's
gonna be until we call the function,

80
00:04:20.726 --> 00:04:23.530
it could be a 2, 4, 6, 100, 10, whatever.

81
00:04:23.530 --> 00:04:26.420
I mean, just the number one passed
into a single element of an array.

82
00:04:26.420 --> 00:04:27.440
It could be anything.

83
00:04:28.600 --> 00:04:33.234
In the same way we leave
blank what functionality were

84
00:04:33.234 --> 00:04:37.130
gonna apply to that individual element.

85
00:04:37.130 --> 00:04:41.040
So when we call copy, array, and
manipulate, we fill in an array with one

86
00:04:41.040 --> 00:04:46.240
two three and we fill an instructions
with this multiply by two functionality.

87
00:04:46.240 --> 00:04:49.670
The word instructions inside copy,
array, and manipulate,

88
00:04:49.670 --> 00:04:52.990
the word instructions will
literally be replaced.

89
00:04:52.990 --> 00:04:56.580
Just like array will literally be
replaced with one, two, three.

90
00:04:56.580 --> 00:04:59.890
Instructions will literally be
replaced with what, Mohammad?

91
00:04:59.890 --> 00:05:02.060
&gt;&gt; Speaker 2: The function you're passing

92
00:05:02.060 --> 00:05:02.590
through there.
&gt;&gt; Will: Which

93
00:05:02.590 --> 00:05:03.320
is?
&gt;&gt; Speaker 2: The

94
00:05:03.320 --> 00:05:04.430
parameter.
&gt;&gt; Will: Which is

95
00:05:04.430 --> 00:05:05.230
what?
&gt;&gt; Speaker 2: Multiplied.

96
00:05:05.230 --> 00:05:06.070
&gt;&gt; Will: Which is multiplied.

97
00:05:06.070 --> 00:05:09.076
Everything has a value, it's not
like the function that we passed in,

98
00:05:09.076 --> 00:05:10.910
it is with multiplied by two.

99
00:05:10.910 --> 00:05:13.670
That is what's filling in
the instructions placeholder.

100
00:05:13.670 --> 00:05:15.260
This up here is the function definition.

101
00:05:15.260 --> 00:05:18.890
It says when you use me, fill in my
placeholders with actual values.

102
00:05:18.890 --> 00:05:23.830
And when we used it, we do, one, two,
three takes an array, it takes on

103
00:05:23.830 --> 00:05:27.950
the position of array, and multiply by
two fills in the blank of instructions.

104
00:05:27.950 --> 00:05:32.510
So we'd actually see inside this function
when it's called output dot push

105
00:05:32.510 --> 00:05:36.950
parens multiplied by two open parens.

106
00:05:36.950 --> 00:05:41.230
Well i is zero, array zero is one,
one inside the parens.

107
00:05:41.230 --> 00:05:43.700
Now, we're just seeing multiply by two,
parens one.

108
00:05:43.700 --> 00:05:44.780
We know how to do that.

109
00:05:44.780 --> 00:05:46.290
That's multiply by two with parens one.

110
00:05:46.290 --> 00:05:48.870
That's gonna be evaluating to two.

111
00:05:48.870 --> 00:05:50.210
Everything gets filled in.

