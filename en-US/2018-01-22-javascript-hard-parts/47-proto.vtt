WEBVTT

1
00:00:00.000 --> 00:00:05.868
So we realize, this approach that produces
our objects towards one in user1,

2
00:00:05.868 --> 00:00:08.758
one in user2, it creates a big issue.

3
00:00:08.758 --> 00:00:14.803
Our functions are yeah, hooray, are
available right on our objects, success.

4
00:00:14.803 --> 00:00:19.719
But that she got copies of them,
they're all the same function And

5
00:00:19.719 --> 00:00:22.381
if you've got a thousand functions,

6
00:00:22.381 --> 00:00:27.538
you've got a copy of each of those
functions on every single user object.

7
00:00:27.538 --> 00:00:32.362
This is gonna take millions of lines
of memory, when we don't need.

8
00:00:32.362 --> 00:00:35.690
We just have a single
version of that function.

9
00:00:35.690 --> 00:00:37.686
What would be our solution?

10
00:00:37.686 --> 00:00:43.273
Store our increment function In just
one object as imagined we could

11
00:00:43.273 --> 00:00:49.566
sort of store it in just one object
let's call it I don't know store or

12
00:00:49.566 --> 00:00:53.474
function let's call it function store and

13
00:00:53.474 --> 00:00:57.620
in that one object
supposed there we were to.

14
00:00:57.620 --> 00:01:01.206
Store the increment functionality.

15
00:01:02.551 --> 00:01:08.153
The increment functionality,
and somehow if I didn't and

16
00:01:08.153 --> 00:01:12.185
then not store it on
each of these objects.

17
00:01:12.185 --> 00:01:14.649
Keep these object clear.

18
00:01:14.649 --> 00:01:19.807
And somehow if I were to find On
my user tool, my user1 object,

19
00:01:19.807 --> 00:01:24.516
the increment function,
somehow JavaScript would know to go and

20
00:01:24.516 --> 00:01:30.334
look instead in this function store where
I have my single copy of that function.

21
00:01:30.334 --> 00:01:34.016
Store the increment function
in just one object and

22
00:01:34.016 --> 00:01:39.096
have the interpreter When we do
something like User 2 dot increment,

23
00:01:39.096 --> 00:01:43.297
look up at User 2,
there's no increment function on it.

24
00:01:43.297 --> 00:01:47.843
We don't want a unique increment
function on User 2 objects.

25
00:01:47.843 --> 00:01:53.160
But instead look up to this object
shared to check if increments there.

26
00:01:53.160 --> 00:01:53.673
It is.

27
00:01:53.673 --> 00:01:55.860
And run that functionality.

28
00:01:55.860 --> 00:02:00.271
That's going to be our,
what about that as an approach?

29
00:02:00.271 --> 00:02:03.722
Approach, all together if all you believe

30
00:02:03.722 --> 00:02:05.566
good approach?
&gt;&gt; Yes.

31
00:02:05.566 --> 00:02:07.492
&gt;&gt; Controlling personality.

32
00:02:07.492 --> 00:02:08.294
All right.

33
00:02:08.294 --> 00:02:10.621
Good but how can we make that link?

34
00:02:10.621 --> 00:02:12.467
What's that famous word?

35
00:02:12.467 --> 00:02:16.398
People like to shout out words and
mine might not be right Or

36
00:02:16.398 --> 00:02:18.323
how might we make that link?
&gt;&gt; Bond.

37
00:02:18.323 --> 00:02:20.055
&gt;&gt; Bond, okay, is having a bond,

38
00:02:20.055 --> 00:02:21.852
what sort of bond?
&gt;&gt; A reference.

39
00:02:21.852 --> 00:02:22.558
&gt;&gt; Reference,

40
00:02:22.558 --> 00:02:24.033
what's the special word?

41
00:02:24.033 --> 00:02:25.125
&gt;&gt; [INAUDIBLE]
&gt;&gt; No

42
00:02:25.125 --> 00:02:26.089
&gt;&gt; [LAUGH]

43
00:02:26.089 --> 00:02:28.013
&gt;&gt; It's got as many words as you like.

44
00:02:28.013 --> 00:02:28.655
&gt;&gt; Back pack.

45
00:02:28.655 --> 00:02:29.425
&gt;&gt; Back pack no,

46
00:02:29.425 --> 00:02:33.148
back pack what's that favorite word
you heard about in JavaScript?

47
00:02:33.148 --> 00:02:33.854
&gt;&gt; Prototype.

48
00:02:33.854 --> 00:02:34.460
&gt;&gt; Prototype

49
00:02:34.460 --> 00:02:35.800
&gt;&gt; Exactly, good job.

50
00:02:35.800 --> 00:02:38.629
We're gonna see that all play out, though.

51
00:02:38.629 --> 00:02:42.651
Using the prototypal nature of
JavaScript solution to in full,

52
00:02:42.651 --> 00:02:44.362
we are gonna somehow use a.

53
00:02:44.362 --> 00:02:47.862
I said that we've seen all
the features of JavaScript.

54
00:02:47.862 --> 00:02:49.128
There's one more.

55
00:02:49.128 --> 00:02:52.479
It's called its prototypal nature,
which is that,

56
00:02:52.479 --> 00:02:57.215
when I call a method on an object I
first go look at that object if I don't

57
00:02:57.215 --> 00:03:02.262
find on that object the method i don't
panic I use the prototypal nature

58
00:03:02.262 --> 00:03:06.971
of java script to look up to the next
object up to the prototype chain

59
00:03:06.971 --> 00:03:11.847
the next object that I bonded this
object to here we call it function so

60
00:03:11.847 --> 00:03:15.750
and I can use the functionality
that's stored there.

61
00:03:15.750 --> 00:03:16.950
The single version.

62
00:03:16.950 --> 00:03:19.613
We're going to walk
through this line by line.

63
00:03:19.613 --> 00:03:21.144
See it all play out in full.

64
00:03:21.144 --> 00:03:24.076
But know that's fundamentally
what we're doing.

65
00:03:24.076 --> 00:03:28.138
We're going to somehow make a bond to
a shared function store in which all

66
00:03:28.138 --> 00:03:31.534
the functions that we'd want
to have available on user two.

67
00:03:31.534 --> 00:03:33.930
We want to be able to
do this dot increment.

68
00:03:33.930 --> 00:03:35.440
That's always our goal.

69
00:03:35.440 --> 00:03:39.115
But we don't want to have
the increment function on user two.

70
00:03:39.115 --> 00:03:44.201
So we're going to use a special prototypal
nature, a special bonus feature of Java.

71
00:03:44.201 --> 00:03:45.896
I think this is the last one.

72
00:03:45.896 --> 00:03:49.289
This is the last true feature
of Java Script that lets us,

73
00:03:49.289 --> 00:03:52.420
when we access user two and
don't find increments.

74
00:03:52.420 --> 00:03:55.890
Go look at this function store
through this special hidden bond.

75
00:03:55.890 --> 00:03:58.413
You see how this hidden bond works,
but first,

76
00:03:58.413 --> 00:04:00.767
let's walk through this code line by line.

