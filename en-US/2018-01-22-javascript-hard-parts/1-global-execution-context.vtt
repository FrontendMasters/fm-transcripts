WEBVTT

1
00:00:00.270 --> 00:00:01.590
&gt;&gt; Will Sentance: So
we start off with the underlying

2
00:00:01.590 --> 00:00:03.618
principles that will let
the hard parts follow.

3
00:00:03.618 --> 00:00:08.200
These tools, we're already seeing them,
the execution of our code playing out.

4
00:00:08.200 --> 00:00:12.120
All the tools that will let all
those complex pieces to come

5
00:00:12.120 --> 00:00:12.988
work more naturally.

6
00:00:12.988 --> 00:00:18.540
So we asked,
what happens when JavaScript executes,

7
00:00:18.540 --> 00:00:21.480
that is runs, our code?

8
00:00:21.480 --> 00:00:22.730
Let's mix it up.

9
00:00:22.730 --> 00:00:26.438
Mohammed, what happens when
JavaScript is just doing our code?

10
00:00:26.438 --> 00:00:28.190
It's like we write the code anywhere.

11
00:00:28.190 --> 00:00:30.747
We can write it on a paper napkin.

12
00:00:30.747 --> 00:00:34.250
But then we've gotta run it somewhere
that does something with the code.

13
00:00:34.250 --> 00:00:35.060
What does it do?

14
00:00:35.060 --> 00:00:38.580
What are the two basic things it does,
Mohammed?

15
00:00:38.580 --> 00:00:40.653
&gt;&gt; Mohammed: It processes it line by line?

16
00:00:40.653 --> 00:00:41.262
&gt;&gt; Will Sentance: Line by line.

17
00:00:41.262 --> 00:00:44.060
It takes line 1, it says, do it!

18
00:00:44.060 --> 00:00:49.370
Now actually, it traditionally was
done as an interpreted language,

19
00:00:49.370 --> 00:00:50.650
which means line by line.

20
00:00:50.650 --> 00:00:54.475
Now it uses what's called
just in time compilation,

21
00:00:54.475 --> 00:00:57.625
at least in the Chrome JavaScript runtime.

22
00:00:57.625 --> 00:01:01.560
But it is essentially, yes, taking line 1,
then line 2, then line 3, yep.

23
00:01:01.560 --> 00:01:03.650
And what else does it do, Muhammad?

24
00:01:03.650 --> 00:01:06.830
&gt;&gt; Mohammed: It creates
memory of variables.

25
00:01:06.830 --> 00:01:08.080
&gt;&gt; Will Sentance: It creates, yes, right.

26
00:01:08.080 --> 00:01:12.870
It assigns data to labels,
known as variables or consts, or whatever,

27
00:01:12.870 --> 00:01:18.880
in memory and makes those available by
them, and the data available by the name.

28
00:01:18.880 --> 00:01:27.330
Okay, so we, ourselves, can understand
all of JavaScript if we do that process.

29
00:01:27.330 --> 00:01:31.860
If we ourselves go through and
store the data, go through and

30
00:01:31.860 --> 00:01:34.950
run the code, line by line,
we can understand all of JavaScript.

31
00:01:34.950 --> 00:01:38.750
So let's do it, let's do it line by line.

32
00:01:38.750 --> 00:01:39.995
Let's start with Barb.

33
00:01:39.995 --> 00:01:43.150
Barb, what are we doing with
the very first line of code here?

34
00:01:44.350 --> 00:01:48.640
&gt;&gt; Barb: Store 3 and the num variable?

35
00:01:48.640 --> 00:01:49.600
&gt;&gt; Will Sentance: Yeah, exactly.

36
00:01:49.600 --> 00:01:55.580
There it is, num is initialized to 3.

37
00:01:55.580 --> 00:01:58.860
Excellent, good job, Barb, very nice.

38
00:01:58.860 --> 00:02:01.450
Clara, next line of code,
what's happening?

39
00:02:01.450 --> 00:02:03.934
&gt;&gt; Clara: So
creating the name MultiplyBy2 and

40
00:02:03.934 --> 00:02:07.550
associating with that function definition.

41
00:02:07.550 --> 00:02:09.140
&gt;&gt; Will Sentance: Very nice, I like that.

42
00:02:09.140 --> 00:02:12.361
And storing it in this global memory.

43
00:02:12.361 --> 00:02:16.810
So I'm gonna draw my functions, if you
haven't heard this before, like this.

44
00:02:16.810 --> 00:02:21.677
This is little boxes, little boxes with
an f in like maybe you did at high school.

45
00:02:21.677 --> 00:02:23.000
Did anyone actually do
this in high school?

46
00:02:23.000 --> 00:02:25.600
Ever draw a function as a black box?

47
00:02:25.600 --> 00:02:27.212
No, nobody actually did.

48
00:02:27.212 --> 00:02:28.790
I don't know where I got that idea from.

49
00:02:28.790 --> 00:02:30.810
I'm convinced it's a thing.

50
00:02:30.810 --> 00:02:32.079
I'm convinced of it,
now I actually did it.

51
00:02:32.079 --> 00:02:35.596
Okay, and the final line here,
Lindsey says do what?

52
00:02:35.596 --> 00:02:37.160
Or not final.

53
00:02:37.160 --> 00:02:38.346
Next line, Lindsey.

54
00:02:38.346 --> 00:02:39.480
You're gonna get it right now, aren't you?

55
00:02:39.480 --> 00:02:41.020
Lindsey, what's the next line say?

56
00:02:41.020 --> 00:02:44.200
&gt;&gt; Lindsey: It stores the string,
Will, in the variable name.

57
00:02:44.200 --> 00:02:47.240
&gt;&gt; Will Sentance: Brilliant,
Lindsey, that's exactly right.

58
00:02:47.240 --> 00:02:50.400
And Lindsey, I don't understand.

59
00:02:50.400 --> 00:02:53.910
Why did you skip over the body
of the multipleBy2 function?

60
00:02:53.910 --> 00:02:55.340
&gt;&gt; Lindsey: Because this
function was never called.

61
00:02:55.340 --> 00:02:56.150
&gt;&gt; Will Sentance: It's never called.

62
00:02:56.150 --> 00:02:59.020
We never go and initialize
the stuff inside that function and

63
00:02:59.020 --> 00:03:00.430
memory until it's called.

64
00:03:00.430 --> 00:03:05.910
And by the way, that's not surprising,
because if you look at this const result,

65
00:03:05.910 --> 00:03:10.750
what would we even store in memory under
result if we haven't called the function?

66
00:03:10.750 --> 00:03:12.600
There's no such thing
as hypothetical values.

67
00:03:12.600 --> 00:03:15.868
You can't sort of store in
memory input number with 2.

68
00:03:15.868 --> 00:03:16.930
It's not just hypothetical.

69
00:03:16.930 --> 00:03:18.900
Until you actually call the function,

70
00:03:18.900 --> 00:03:22.210
nothing in that function makes sense,
right?

71
00:03:22.210 --> 00:03:25.520
So you do not go inside your functions,
ever.

72
00:03:25.520 --> 00:03:28.850
The thread or execution will
never go inside the function.

73
00:03:28.850 --> 00:03:31.911
The thread will never weave
its way inside the function if

74
00:03:31.911 --> 00:03:33.518
you never call the function.

75
00:03:33.518 --> 00:03:36.300
As soon as you call the function,
in you weave.

76
00:03:36.300 --> 00:03:37.594
Okay, good?

77
00:03:37.594 --> 00:03:38.150
So there we go.

78
00:03:39.210 --> 00:03:44.300
We start, when we run our code,
create a global execution context.

79
00:03:44.300 --> 00:03:49.340
Execution context is a very fancy
sounding name for two very simple things.

80
00:03:50.370 --> 00:03:53.250
Reading the code line after line,
doing it line after line.

81
00:03:53.250 --> 00:03:54.360
That's what we're doing here.

82
00:03:54.360 --> 00:03:55.990
I'm not always writing it all out.

83
00:03:55.990 --> 00:03:58.753
But essentially we're going through
the code line by line here.

84
00:03:58.753 --> 00:04:03.772
And by the way, if we execute any
functions, if we run any functions

85
00:04:03.772 --> 00:04:08.794
inside here, we start running them
here and creating a memory where

86
00:04:08.794 --> 00:04:14.100
every single piece of data we announce
with it's label will be stored.

87
00:04:14.100 --> 00:04:16.580
All right, so there we go.

88
00:04:16.580 --> 00:04:20.471
That's known as a global
execution context and it's global.

89
00:04:20.471 --> 00:04:25.420
It's global because we've just
started running the whole file.

90
00:04:25.420 --> 00:04:27.705
It's not within
an individual function yet.

91
00:04:27.705 --> 00:04:30.675
It's at the whole file, the global level.

92
00:04:30.675 --> 00:04:34.030
Okay, so the thread.

93
00:04:34.030 --> 00:04:38.841
Lets remind ourselves, this thread of
execution that takes the code line

94
00:04:38.841 --> 00:04:42.893
after line, how many things can
it do at a time in JavaScript?

95
00:04:42.893 --> 00:04:43.680
Amin?
&gt;&gt; Amin: One.

96
00:04:43.680 --> 00:04:44.870
&gt;&gt; Will Sentance: One.

97
00:04:44.870 --> 00:04:47.630
What's the posh name for
doing one thing at a time, Amin?

98
00:04:47.630 --> 00:04:48.240
&gt;&gt; Amin: Single thread, I think.

99
00:04:48.240 --> 00:04:49.540
&gt;&gt; Will Sentance: Singled threaded.

100
00:04:49.540 --> 00:04:55.440
That just means we'd first do line 1,
num 3 in memory.

101
00:04:55.440 --> 00:04:57.310
Then line 2, multiplyBy2, the function.

102
00:04:57.310 --> 00:04:59.240
Then line 3, name is Will.

103
00:04:59.240 --> 00:05:01.550
We're not doing multiple things at a time.

104
00:05:01.550 --> 00:05:05.720
And which order do we do these things?

105
00:05:05.720 --> 00:05:07.910
Well, we do them synchronously.

106
00:05:07.910 --> 00:05:12.182
That means one, after another,
after another of not unpredictably,

107
00:05:12.182 --> 00:05:16.041
suddenly going and grabbing
the last line and running that one.

108
00:05:16.041 --> 00:05:17.390
We're doing it one after another.

