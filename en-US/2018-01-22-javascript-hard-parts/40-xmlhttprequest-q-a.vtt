WEBVTT

1
00:00:00.350 --> 00:00:01.708
&gt;&gt; Will: Let's have questions and

2
00:00:01.708 --> 00:00:05.232
see if our online audience have
any interesting questions as well.

3
00:00:05.232 --> 00:00:10.053
Nathan, if the display
function returned to function

4
00:00:10.053 --> 00:00:14.854
then you could save
the data via Lexical scope.

5
00:00:14.854 --> 00:00:21.180
I mean,
you can just by returning out that data.

6
00:00:21.180 --> 00:00:23.540
Okay, I see the issue.

7
00:00:23.540 --> 00:00:28.330
What our friend Nathan is asking is,
hold on,

8
00:00:28.330 --> 00:00:33.030
we're able to console log our data
at this point, but how do I return?

9
00:00:33.030 --> 00:00:37.210
Because display can't evaluate,
display doesn't get to say,

10
00:00:37.210 --> 00:00:39.320
assign the result of
display to a variable.

11
00:00:41.380 --> 00:00:42.320
That's a bit of an issue.

12
00:00:44.030 --> 00:00:46.774
That's a bit of an issue?

13
00:00:46.774 --> 00:00:48.080
Do you see what we've got there?

14
00:00:48.080 --> 00:00:50.890
Our display is being called, but

15
00:00:50.890 --> 00:00:55.080
we don't get to see, assign its result,
its return value anywhere.

16
00:00:55.080 --> 00:00:57.807
So how do we hold onto this data?

17
00:00:57.807 --> 00:00:59.415
&gt;&gt; Andrew: Variable?

18
00:00:59.415 --> 00:01:03.730
&gt;&gt; Will: Well, looks like display
is running in global, it is.

19
00:01:03.730 --> 00:01:07.900
But we're not able to assign its result,
its return value anywhere.

20
00:01:11.050 --> 00:01:13.650
That's very frustrating.

21
00:01:13.650 --> 00:01:16.031
That's very frustrating, right?

22
00:01:16.031 --> 00:01:17.520
But why would we?

23
00:01:17.520 --> 00:01:20.520
Because this function is being
called at the very end once

24
00:01:20.520 --> 00:01:23.060
everything's been done
in synchronous land.

25
00:01:23.060 --> 00:01:26.190
So we've now entered, most of the time
in our JavaScript applications,

26
00:01:26.190 --> 00:01:31.720
we're actually dealing in not in our
original set of synchronous code,

27
00:01:31.720 --> 00:01:36.270
cuz we are dealing with lots of
interesting interactions like this.

28
00:01:36.270 --> 00:01:38.740
So how do we actually save our data?

29
00:01:38.740 --> 00:01:41.812
Well, we usually wanna
use our data in some way.

30
00:01:41.812 --> 00:01:44.540
The reason we want to return out
data is typically to use it.

31
00:01:44.540 --> 00:01:48.570
Well, instead of returning
it out of display to use it,

32
00:01:48.570 --> 00:01:54.010
instead we make a brand new request
in here to maybe another place.

33
00:01:54.010 --> 00:01:57.760
So typically, we wanna use that data to
say for example, display it on the page,

34
00:01:57.760 --> 00:02:02.400
or we want to store it to a database,
or all of these things.

35
00:02:02.400 --> 00:02:06.490
So inside of this function call, we have
access to the data, we can't return out.

36
00:02:06.490 --> 00:02:09.652
So where's our returned from display?

37
00:02:09.652 --> 00:02:13.190
As soon as I wrote instead of
consolelogdata.post, return.

38
00:02:13.190 --> 00:02:14.560
Well, where's that gonna return to?

39
00:02:14.560 --> 00:02:18.990
Cuz display is being called and
it's not storing that result anywhere.

40
00:02:18.990 --> 00:02:23.552
And there's no way of writing this
function such that it's like,

41
00:02:23.552 --> 00:02:27.711
result somewhere's gonna,
there's no way of doing that.

42
00:02:27.711 --> 00:02:29.320
So you've got a bit of a conundrum here.

43
00:02:29.320 --> 00:02:33.410
How do we even, well we've have access
to the data inside the call to display.

44
00:02:33.410 --> 00:02:35.060
So what do we do?

45
00:02:35.060 --> 00:02:38.680
We can use the data inside here including

46
00:02:38.680 --> 00:02:43.960
by passing it to the call
of another function.

47
00:02:43.960 --> 00:02:47.140
And then another function inside of there,
and another function inside of there,

48
00:02:47.140 --> 00:02:52.180
and that of course,
is known as callback hell.

49
00:02:52.180 --> 00:02:53.540
And it makes sense why we have to do it,
right?

50
00:02:53.540 --> 00:02:56.854
Because we've got to use this data
somehow, maybe say we do a database.

51
00:02:56.854 --> 00:03:00.522
But we can't return out of
this function so instead,

52
00:03:00.522 --> 00:03:04.100
we use that data inside of this function.

53
00:03:04.100 --> 00:03:06.310
That's frustrating and hard.

54
00:03:06.310 --> 00:03:09.950
But it is where callback
hell becomes challenging.

55
00:03:09.950 --> 00:03:11.360
Now that's all changing.

56
00:03:11.360 --> 00:03:14.470
We're looking underlying
principles of JavaScript here.

57
00:03:14.470 --> 00:03:15.440
That's all changing.

58
00:03:15.440 --> 00:03:20.240
Increasingly now, we wrap this whole
behavior in a different format.

59
00:03:20.240 --> 00:03:23.820
What is that different format that makes
us feel less like, I'm doing this, and

60
00:03:23.820 --> 00:03:24.890
then inside, and then inside,

61
00:03:24.890 --> 00:03:28.660
and then inside, but
rather more procedural step-by-step.

62
00:03:28.660 --> 00:03:30.250
What's that new format called?

63
00:03:31.250 --> 00:03:32.910
Promises, exactly.

64
00:03:32.910 --> 00:03:35.930
But they are doing some stuff
slightly differently under the hood,

65
00:03:35.930 --> 00:03:36.800
I'll grant you that.

66
00:03:36.800 --> 00:03:40.510
But they're still the same idea
that my function is going to

67
00:03:40.510 --> 00:03:44.990
have data passed to it from my API,
my callback function.

68
00:03:44.990 --> 00:03:50.350
And from there, I'm going to use it
in another call to another function.

69
00:03:50.350 --> 00:03:52.690
So it's still that same
underlying principle.

70
00:03:52.690 --> 00:03:54.830
Promises give us an extra layer for that.

71
00:03:54.830 --> 00:03:57.060
But it's still this same
underlying principle.

72
00:03:57.060 --> 00:03:58.480
All right,
any more questions at this point?

73
00:03:58.480 --> 00:04:03.526
Otherwise, we're gonna go back to one
final set of pairing before lunch.

74
00:04:03.526 --> 00:04:05.646
It's lunch, so
we're gonna pair through lunch.

75
00:04:05.646 --> 00:04:06.162
Andrew?

76
00:04:06.162 --> 00:04:10.153
&gt;&gt; Andrew: I wanna clarify why display
went to the call stack before global was

77
00:04:10.153 --> 00:04:10.660
off it?

78
00:04:12.120 --> 00:04:15.570
&gt;&gt; Will: So,
global has finished it's execution.

79
00:04:15.570 --> 00:04:17.330
&gt;&gt; Andrew: So it did go away.

80
00:04:17.330 --> 00:04:21.510
&gt;&gt; Will: It went away in the sense that,
global never fully goes away,

81
00:04:21.510 --> 00:04:25.140
it's always there,
it just has no more code to execute in it.

82
00:04:25.140 --> 00:04:26.530
Okay, makes sense, Andrew, yeah.

83
00:04:26.530 --> 00:04:27.990
That's a good clarification.

84
00:04:27.990 --> 00:04:32.220
We've finished running all
of the steps in Global, but

85
00:04:32.220 --> 00:04:37.120
the application's still running, Global is
still always in the bottom of course app.

