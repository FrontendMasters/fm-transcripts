WEBVTT

1
00:00:00.000 --> 00:00:04.101
&gt;&gt; Will Sentance: So, before we get
into how high order functions work,

2
00:00:04.101 --> 00:00:07.488
we are going to see a metaphor,
a metaphor for

3
00:00:07.488 --> 00:00:11.424
why we have a high order
function in the first place.

4
00:00:11.424 --> 00:00:16.401
So, function 10 squared, no input, returns
10*10, sounds like a very useful function,

5
00:00:16.401 --> 00:00:18.016
I am sure you can already agree.

6
00:00:18.016 --> 00:00:22.237
What is the syntax of this function, Kara?

7
00:00:22.237 --> 00:00:23.902
What is the wording of this function?

8
00:00:23.902 --> 00:00:28.309
It's a function 10 squared,
no input and returns 10 by 10,

9
00:00:28.309 --> 00:00:30.444
how do we declare the function?

10
00:00:30.444 --> 00:00:33.086
What's the first word for
to declare a function, Kara?

11
00:00:33.086 --> 00:00:34.578
&gt;&gt; Kara: Function.

12
00:00:34.578 --> 00:00:37.823
&gt;&gt; Will Sentance: Function
great there it is function, and

13
00:00:37.823 --> 00:00:40.054
what could we call it, Kara?

14
00:00:40.054 --> 00:00:41.255
&gt;&gt; Clara: 10squared.

15
00:00:41.255 --> 00:00:42.683
&gt;&gt; Will Sentance: Nice Clara.

16
00:00:42.683 --> 00:00:49.472
Ambiguous name, 10 squared, and
does it take any parameters?

17
00:00:49.472 --> 00:00:52.159
Cray, any parameters for it?

18
00:00:52.159 --> 00:00:53.835
No, correct.

19
00:00:53.835 --> 00:00:57.812
And then in the body of the function,
what do we add?

20
00:00:57.812 --> 00:00:59.714
Whatever returned.

21
00:00:59.714 --> 00:01:04.732
10 by 10, such a useful function.

22
00:01:04.732 --> 00:01:06.756
Do you agree?

23
00:01:06.756 --> 00:01:08.920
No, it's a terribly useless function.

24
00:01:08.920 --> 00:01:10.153
&gt;&gt; Group: [LAUGH]
&gt;&gt; Will Sentance: This is a useless

25
00:01:10.153 --> 00:01:11.137
function, come on.

26
00:01:11.137 --> 00:01:12.656
It's a useless function.

27
00:01:12.656 --> 00:01:16.270
10 squared evaluates to 100, perfect.

28
00:01:16.270 --> 00:01:19.421
Now, what if though,
here's a more useful function, 9 squared.

29
00:01:19.421 --> 00:01:23.006
Griffin, how would I make 9 squared?

30
00:01:23.006 --> 00:01:25.399
&gt;&gt; Griffin: Same thing,
you just change the inputs.

31
00:01:25.399 --> 00:01:30.367
&gt;&gt; Will Sentance: Yeah,
what about 100 squared, Lindsey?

32
00:01:30.367 --> 00:01:31.891
&gt;&gt; Lindsey: Same thing,
you just change the numbers.

33
00:01:31.891 --> 00:01:33.363
&gt;&gt; Will Sentance: Yeah,
I don't want to really drag this out.

34
00:01:33.363 --> 00:01:35.361
Barb, what about 2,000 squared?

35
00:01:35.361 --> 00:01:38.196
&gt;&gt; Group: [LAUGH]
&gt;&gt; Barb: Same thing.

36
00:01:38.196 --> 00:01:39.868
&gt;&gt; Will Sentance: How much
longer can I drag this out?

37
00:01:39.868 --> 00:01:42.103
We could go for a while.

38
00:01:42.103 --> 00:01:43.809
We're breaking some
sort of principle here.

39
00:01:43.809 --> 00:01:47.080
What principle are we breaking
as I cover all these functions?

40
00:01:47.080 --> 00:01:48.482
What principle are we breaking everyone?

41
00:01:48.482 --> 00:01:49.140
&gt;&gt; Group: Don't repeat yourself.

42
00:01:49.140 --> 00:01:50.235
&gt;&gt; Will Sentance: Don't repeat yourself.

43
00:01:50.235 --> 00:01:54.542
As developers the reason we have functions
in the first place, is to wrap up some

44
00:01:54.542 --> 00:01:59.550
functionality that we wanna reuse and then
we can refer to it just by it's label.

45
00:01:59.550 --> 00:02:03.742
And only write out the functionality once.

46
00:02:03.742 --> 00:02:09.570
So we're constantly try to avoid repeating
ourselves, not because we're lazy but

47
00:02:09.570 --> 00:02:14.755
also because it makes for far more
readable code, far more reusable code.

48
00:02:14.755 --> 00:02:18.900
We don't wanna be rewriting code because
it makes it hard, well, this functionality

49
00:02:18.900 --> 00:02:22.970
is the same as here, but I've gotta change
it in both places, this is problematic.

50
00:02:22.970 --> 00:02:26.480
So instead I write, what could I do here?

51
00:02:26.480 --> 00:02:29.248
Right now, 9 squared, 9 squared.

52
00:02:29.248 --> 00:02:29.788
We've got a problem.

53
00:02:29.788 --> 00:02:32.040
We're breaking this dry principle.

54
00:02:32.040 --> 00:02:34.818
What could be do instead here, Griffin.

55
00:02:34.818 --> 00:02:38.920
&gt;&gt; Griffin: You could do function
n squared for input of n.

56
00:02:38.920 --> 00:02:43.817
&gt;&gt; Will Sentance: So tell me more
abstractly what am I, [LAUGH] here we go.

57
00:02:43.817 --> 00:02:45.650
No, nobody get that pun, all right.

58
00:02:45.650 --> 00:02:48.877
Tell me more abstractly, abstractly, no.

59
00:02:48.877 --> 00:02:50.818
Tell me more.

60
00:02:50.818 --> 00:02:53.613
What are we doing here in a sense?

61
00:02:53.613 --> 00:02:56.168
&gt;&gt; Griffin: Would you be
I guess modulizing it and

62
00:02:56.168 --> 00:02:58.402
being able-
&gt;&gt; Will Sentance: I like that,

63
00:02:58.402 --> 00:03:01.050
you're making your code more resusable.

64
00:03:01.050 --> 00:03:03.971
&gt;&gt; Griffin: Yeah you're able
to call that function any time

65
00:03:03.971 --> 00:03:05.657
you want a number squared.

66
00:03:05.657 --> 00:03:07.913
&gt;&gt; Will Sentance: Very nice,
that's exactly right,

67
00:03:07.913 --> 00:03:09.958
we can generalize the function.

68
00:03:09.958 --> 00:03:11.047
We can create a function.

69
00:03:11.047 --> 00:03:13.690
It's gonna be so yeah, yeah, obviously
we're not gonna create 10 squared,

70
00:03:13.690 --> 00:03:14.270
100 squared.

71
00:03:14.270 --> 00:03:18.814
No, this is the very essence of
why we have high order functions.

72
00:03:18.814 --> 00:03:24.010
We're gonna see in a second here
we've created a function squareNum,

73
00:03:24.010 --> 00:03:25.835
and left a place holder.

74
00:03:25.835 --> 00:03:29.262
You see every now and then I realize
I should be pointing up here because

75
00:03:29.262 --> 00:03:32.354
everyone online just like well
yeah to the edge of my computer.

76
00:03:32.354 --> 00:03:33.465
There it is.

77
00:03:33.465 --> 00:03:36.130
Here, squareNum function.

78
00:03:36.130 --> 00:03:41.827
I left a placeholder and then it's
only when I invoke call, execute,

79
00:03:41.827 --> 00:03:48.317
run that squareNum function with 10,
9, 100, I get to it dynamically.

80
00:03:48.317 --> 00:03:52.920
At the same time, create the function
effectively 10 squared, 9 squared.

81
00:03:52.920 --> 00:03:55.227
And then call it at the same time.

82
00:03:55.227 --> 00:03:57.200
So at my definition stage of the function.

83
00:03:57.200 --> 00:04:00.003
So functions have 2 stages,
definition and execution.

84
00:04:00.003 --> 00:04:03.340
And my definition stage, where I stored
a memory, I leave a placeholder.

85
00:04:03.340 --> 00:04:07.607
Like a kinda I don't know yet
what data I'm gonna apply this to yet.

86
00:04:07.607 --> 00:04:08.845
So just leave it blank for now.

87
00:04:08.845 --> 00:04:14.140
And I'll figure out when I run
the function, what actual specific number,

88
00:04:14.140 --> 00:04:17.712
my data,
I'm gonna apply this functionality to.

89
00:04:17.712 --> 00:04:20.976
Okay, this is making our function
cleaner and more efficient.

90
00:04:20.976 --> 00:04:24.124
But this is obvious.

91
00:04:24.124 --> 00:04:27.694
It turns out well its obvious but
it's fairly obvious.

92
00:04:27.694 --> 00:04:32.705
It turns out,
we may not only want to leave some

93
00:04:32.705 --> 00:04:37.858
of our data general until
we call the function.

94
00:04:37.858 --> 00:04:41.571
In other words leave a placeholder for
some of our data,

95
00:04:41.571 --> 00:04:46.232
in the definition and only when we
run the function determine what data

96
00:04:46.232 --> 00:04:49.870
I wanna apply my multiply
by itself functionality to.

97
00:04:51.680 --> 00:04:55.605
It turns out I might also
want to leave a placeholder.

98
00:04:55.605 --> 00:04:59.868
I might want to leave for now unknown,

99
00:04:59.868 --> 00:05:06.674
some of my specific functionality
until I call my function.

100
00:05:06.674 --> 00:05:10.432
I may not just wanna say,
leave a placeholder for my data,

101
00:05:10.432 --> 00:05:14.575
I may also wanna leave a placeholder
to be determined later, for

102
00:05:14.575 --> 00:05:19.564
some of my actual specific functionality,
and then only determine what that

103
00:05:19.564 --> 00:05:25.160
functionality is, when I actually go
ahead and call, run the function.

104
00:05:25.160 --> 00:05:29.592
Here I determine my data,
10,9,8 when I run the function.

105
00:05:29.592 --> 00:05:33.755
What if I were to determine
some of my functionality,

106
00:05:33.755 --> 00:05:36.073
only when I run the function.

107
00:05:36.073 --> 00:05:37.621
That's very powerful and

108
00:05:37.621 --> 00:05:41.850
that is what we're gonna see is
the essence of higher order functions.

