WEBVTT

1
00:00:00.321 --> 00:00:02.910
&gt;&gt; Will: We are gonna
map through this folk,

2
00:00:02.910 --> 00:00:05.942
line by line as we begin
to go through OOP.

3
00:00:05.942 --> 00:00:08.214
Andrew, what are we doing?

4
00:00:08.214 --> 00:00:10.449
&gt;&gt; Andrew: Defining user
one as that object.

5
00:00:10.449 --> 00:00:13.290
&gt;&gt; Will: As that object,
excellent, there it is.

6
00:00:17.328 --> 00:00:20.490
&gt;&gt; Will: Okay, now,
what properties are we storing on it?

7
00:00:20.490 --> 00:00:23.342
Andrew, sorry Katie.

8
00:00:23.342 --> 00:00:25.017
&gt;&gt; Andrew: Name scoring increment.

9
00:00:25.017 --> 00:00:26.778
&gt;&gt; Will: Yep, and
what's the value in each?

10
00:00:26.778 --> 00:00:28.987
I'm really just dragging
this out right now, Andrew.

11
00:00:28.987 --> 00:00:29.871
So help me out.

12
00:00:29.871 --> 00:00:32.751
&gt;&gt; Andrew: [LAUGH] Well,
three and that function.

13
00:00:32.751 --> 00:00:34.246
&gt;&gt; Will: Well, what do we say?

14
00:00:34.246 --> 00:00:35.016
Andrew, you're right.

15
00:00:35.016 --> 00:00:40.259
Yes, we've declared the user1 object,
there it is.

16
00:00:42.220 --> 00:00:46.930
Draw objects like this with name, will

17
00:00:49.690 --> 00:00:53.730
score 3 and increment is what, Andrew?

18
00:00:55.180 --> 00:00:56.510
&gt;&gt; Andrew: That function.

19
00:00:56.510 --> 00:00:58.600
&gt;&gt; Will: That function definition,
and we call them methods, don't we,

20
00:00:58.600 --> 00:01:00.410
when they're on object.

21
00:01:00.410 --> 00:01:02.450
Is it being called at this point?

22
00:01:02.450 --> 00:01:05.820
No, we just defined it,
associated the anonymous function value,

23
00:01:05.820 --> 00:01:09.070
the function value with
the property increment.

24
00:01:09.070 --> 00:01:12.840
And now we hit the next line of code.

25
00:01:12.840 --> 00:01:16.960
Andrew, what's the next line of code
in the global execution context

26
00:01:16.960 --> 00:01:17.560
tell us to do?

27
00:01:19.060 --> 00:01:20.880
&gt;&gt; Andrew: Increment user 1.

28
00:01:20.880 --> 00:01:23.630
&gt;&gt; Will: Yeah,
let's be really precise here.

29
00:01:23.630 --> 00:01:24.910
I want to be really precise here.

30
00:01:24.910 --> 00:01:27.210
Firstly what does it,
when it sees this line,

31
00:01:27.210 --> 00:01:29.990
what's the first thing JavaScript
has to work out, Andrew?

32
00:01:29.990 --> 00:01:32.110
&gt;&gt; Andrew: Get that object from.

33
00:01:32.110 --> 00:01:33.040
&gt;&gt; Will: User 1 object, exactly.

34
00:01:33.040 --> 00:01:36.440
Gotta go look for it and
see does this guy exist?

35
00:01:36.440 --> 00:01:37.680
Yep, there is it.

36
00:01:37.680 --> 00:01:40.263
And then does this
increment property exist?

37
00:01:40.263 --> 00:01:41.306
There it is.

38
00:01:41.306 --> 00:01:43.807
And does the function code,
it's a function, great.

39
00:01:43.807 --> 00:01:47.744
So I can start creating everyone together,
a new?

40
00:01:47.744 --> 00:01:49.259
&gt;&gt; Speaker 3: Execution context.

41
00:01:49.259 --> 00:01:56.135
&gt;&gt; Will: Excellent,
beautiful such rich mellifluous tones.

42
00:01:56.135 --> 00:01:59.034
Okay, indeed.

43
00:01:59.034 --> 00:02:00.294
So in we go.

44
00:02:03.012 --> 00:02:10.990
&gt;&gt; Will: Call stack gets user1.increment
on the top of it, global, just below.

45
00:02:12.790 --> 00:02:15.940
And we have our local memory, okay.

46
00:02:15.940 --> 00:02:20.880
Now, we know we got
the increment code from user1

47
00:02:20.880 --> 00:02:25.760
function and
in here It says user1.score++.

48
00:02:25.760 --> 00:02:28.220
So there's nothing being
declared in local.

49
00:02:28.220 --> 00:02:32.550
Is user1.score++ is user1 here in local?

50
00:02:32.550 --> 00:02:34.470
No it's not, so where do we look for
user1 in global,

51
00:02:34.470 --> 00:02:36.640
cuz it's next on the call stack?

52
00:02:36.640 --> 00:02:38.720
And what do we find?

53
00:02:38.720 --> 00:02:41.380
We find score and we increment it to 4.

54
00:02:41.380 --> 00:02:46.870
Perfect, our fundamental
goal of running a method

55
00:02:46.870 --> 00:02:52.105
directly on our data
encapsulated in an object so

56
00:02:52.105 --> 00:02:56.583
it's all bundled together in one place.

57
00:02:56.583 --> 00:02:57.852
Which makes our lives so easy.

58
00:02:57.852 --> 00:03:01.071
Cuz I can move this object use
the one anywhere in my code, and

59
00:03:01.071 --> 00:03:04.310
know the functionalities is
gonna be available right on it.

60
00:03:04.310 --> 00:03:06.792
This is wonderful for writing code scale.

61
00:03:06.792 --> 00:03:08.196
We've achieved it here.

