WEBVTT

1
00:00:00.000 --> 00:00:03.193
&gt;&gt; Will Sentance: Okay, so at this point,
we are already feeling, yeah,

2
00:00:03.193 --> 00:00:04.264
thank you so much.

3
00:00:04.264 --> 00:00:09.242
I could tell straightaway
that calling multiplyBy2(4)

4
00:00:09.242 --> 00:00:12.273
is going to return an 8 into output.

5
00:00:12.273 --> 00:00:13.952
Why have I built all this for that?

6
00:00:13.952 --> 00:00:17.639
Well, because there's even more
than what's going on behind

7
00:00:17.639 --> 00:00:19.805
the scenes here that we need to know.

8
00:00:19.805 --> 00:00:22.865
Those are the heart bits
follow more easily.

9
00:00:22.865 --> 00:00:24.516
It's known as our, well, what?

10
00:00:24.516 --> 00:00:29.018
What is the way we got these
execution contexts being created?

11
00:00:29.018 --> 00:00:31.596
One here, this one we said closed.

12
00:00:31.596 --> 00:00:33.536
Actually now, this one we said closed.

13
00:00:33.536 --> 00:00:39.082
And already, I'm kinda struggling to keep
track of it, am I in the global one?

14
00:00:39.082 --> 00:00:42.013
Am I in this?
What if I ran another function inside of

15
00:00:42.013 --> 00:00:43.049
multiplyBy2?

16
00:00:43.049 --> 00:00:45.003
What if I ran multiplyBy2 recursively?

17
00:00:45.003 --> 00:00:50.069
Inside of here I ran multiplyBy2 and
then inside of that I run multiplyBy2.

18
00:00:50.069 --> 00:00:55.132
How am I gonna keep track of all
these where am I, in my execution?

19
00:00:55.132 --> 00:00:58.242
Which function am I being,
am I inside at the moment?

20
00:00:58.242 --> 00:01:00.273
How can I keep track of it?

21
00:01:00.273 --> 00:01:01.683
Griffin,
&gt;&gt; Griffin: Is it the state?

22
00:01:01.683 --> 00:01:03.580
&gt;&gt; Will Sentance: State, Ameen?

23
00:01:03.580 --> 00:01:04.190
&gt;&gt; Amin: Call stack.

24
00:01:04.190 --> 00:01:06.330
&gt;&gt; Will Sentance: Call stack,
Ameen is spot on.

25
00:01:06.330 --> 00:01:13.440
It's called the call stack,
call stack, there it is.

26
00:01:15.070 --> 00:01:18.390
And it's a special data structure.

27
00:01:18.390 --> 00:01:22.520
That just means a way of storing
information, of storing data.

28
00:01:22.520 --> 00:01:28.750
Special data structure that allows
us to track where am I currently?

29
00:01:28.750 --> 00:01:30.840
Where is JavaScript currently?

30
00:01:30.840 --> 00:01:36.680
Where is the thread of
execution currently in my code?

31
00:01:36.680 --> 00:01:39.450
Am I running through line one,
line two, line three?

32
00:01:39.450 --> 00:01:45.574
Global land, global execution context, am
I running inside of a call to multiplyBy2?

33
00:01:45.574 --> 00:01:48.580
The first one, or the second, okay?

34
00:01:48.580 --> 00:01:49.798
So it keeps track of it.

35
00:01:49.798 --> 00:01:54.889
What does it add immediately
when it starts running my code?

36
00:01:54.889 --> 00:01:58.890
What's the first execution
context on my call stack?

37
00:01:58.890 --> 00:01:59.877
Art?
Dave,

38
00:01:59.877 --> 00:02:05.034
what's the first one of my call stack?

39
00:02:05.034 --> 00:02:06.441
Which one do we start in, Art?

40
00:02:06.441 --> 00:02:08.823
Where do we start in our code?

41
00:02:08.823 --> 00:02:09.726
Griffin?

42
00:02:09.726 --> 00:02:11.400
&gt;&gt; Griffin: Global.
&gt;&gt; Will Sentance: Global, so

43
00:02:11.400 --> 00:02:15.237
that's the very first one we add

44
00:02:15.237 --> 00:02:20.222
is our global execution context, okay?

45
00:02:20.222 --> 00:02:24.557
Now, Shellby,
I hit the line multiplyBy2(4),

46
00:02:24.557 --> 00:02:29.775
what happens to my call stack do
you think Shellby at that point?

47
00:02:29.775 --> 00:02:30.948
&gt;&gt; Shelby: It goes to local?

48
00:02:30.948 --> 00:02:33.422
&gt;&gt; Will Sentance: It goes to local,
so what does that mean,

49
00:02:33.422 --> 00:02:35.910
Ameen, in terms of my actual call stack?

50
00:02:35.910 --> 00:02:41.060
So we said when we entered,
we added global to the call stack.

51
00:02:41.060 --> 00:02:42.880
Let me just tell you what that means.

52
00:02:42.880 --> 00:02:47.820
Whatever is top of the call stack
is where JavaScript thread,

53
00:02:47.820 --> 00:02:50.580
where is currently is running my code.

54
00:02:50.580 --> 00:02:56.010
Whatever is top, so
JavaScript never has to worry where am I.

55
00:02:56.010 --> 00:02:58.310
Where am I in the code right now?

56
00:02:58.310 --> 00:03:01.500
Whatever is top of the call stack,
that's where I am.

57
00:03:01.500 --> 00:03:06.900
And a stack is a very good way of
storing this, because when I start

58
00:03:06.900 --> 00:03:12.508
calling multiplyBy2(4),
I add it to the top of the call stack.

59
00:03:12.508 --> 00:03:16.478
And the stack is a data
structure of the format,

60
00:03:16.478 --> 00:03:21.946
the last thing you put into it is
the first thing you take out of it.

61
00:03:21.946 --> 00:03:25.543
So when I add multiplyBy2
on to top of global,

62
00:03:25.543 --> 00:03:29.428
that means I've started
running multiplyBy2.

63
00:03:29.428 --> 00:03:33.959
When I finish running multiplyBy2,
I close that execution context,

64
00:03:33.959 --> 00:03:35.249
I go back to global.

65
00:03:35.249 --> 00:03:39.010
What happens to my multiplyBy2 on
top of the call stack, Andrea?

66
00:03:39.010 --> 00:03:41.340
&gt;&gt; Andrea: It goes away.

67
00:03:41.340 --> 00:03:45.250
&gt;&gt; Will Sentance: It goes away because
it was the last thing that was put in.

68
00:03:45.250 --> 00:03:47.090
So it's the first thing
that gets taken out.

69
00:03:47.090 --> 00:03:51.540
So this is a great format for
tracking our execution context and

70
00:03:51.540 --> 00:03:53.260
where we are in our code.

71
00:03:53.260 --> 00:03:55.370
Because as soon as I start
writing a function, I go inside.

72
00:03:55.370 --> 00:03:57.890
When I finish it I close that one out.

73
00:03:57.890 --> 00:04:02.140
So I created then it's inevitably
the next one I take off.

74
00:04:02.140 --> 00:04:03.796
The next one I remove.

75
00:04:03.796 --> 00:04:05.380
So last in, first out.

76
00:04:05.380 --> 00:04:08.280
It's a stack of calls to functions.

77
00:04:08.280 --> 00:04:12.710
Starts global and
then we add multiplyBy2(4).

78
00:04:12.710 --> 00:04:16.240
And what's the posh name for
adding to a stack?

79
00:04:16.240 --> 00:04:19.410
Who knows what the fancy,
technical name for adding to a stack is?

80
00:04:19.410 --> 00:04:20.401
Andrew?

81
00:04:20.401 --> 00:04:22.560
Anyone know?

82
00:04:22.560 --> 00:04:23.250
&gt;&gt; Clara: Pushing.

83
00:04:23.250 --> 00:04:24.810
&gt;&gt; Will Sentance: Pushing, Clara is right.

84
00:04:24.810 --> 00:04:28.731
We push onto the stack and
now we're inside multiplyBy2.

85
00:04:28.731 --> 00:04:31.035
When I finish executing multiplyBy2 and
I return that,

86
00:04:31.035 --> 00:04:33.150
how do I know I've finished
executing a function?

87
00:04:33.150 --> 00:04:33.822
&gt;&gt; Clara: Return.
&gt;&gt; Will Sentance: Return,

88
00:04:33.822 --> 00:04:38.093
what if it doesn't say return,
just a closing curly brace?

89
00:04:38.093 --> 00:04:39.186
Means implicit return.

90
00:04:39.186 --> 00:04:42.955
An implicit return defaults
to returning what?

91
00:04:42.955 --> 00:04:46.726
If I don't write the word return,
what do I default to, Mohammad?

92
00:04:46.726 --> 00:04:48.148
&gt;&gt; Mohammad: The variable?

93
00:04:48.148 --> 00:04:49.559
&gt;&gt; Will Sentance: What's the default,

94
00:04:49.559 --> 00:04:54.543
Griffin, return value of a function if
I don't return something explicitly?

95
00:04:54.543 --> 00:04:55.544
Clara?

96
00:04:55.544 --> 00:04:57.981
&gt;&gt; Clara: Undefined?
&gt;&gt; Will Sentance: Undefined, correct.

97
00:04:57.981 --> 00:05:00.862
Exactly, so out I come, and

98
00:05:00.862 --> 00:05:06.875
this execution context gets removed,
erased, deleted.

99
00:05:06.875 --> 00:05:11.103
So it gets taken off the call stack,
and we go back to global.

100
00:05:11.103 --> 00:05:16.460
And what's the posh term for
being taken off a call stack?

101
00:05:16.460 --> 00:05:17.960
Remove from a stack, Clara?

102
00:05:17.960 --> 00:05:18.540
&gt;&gt; Clara: Popping.

103
00:05:18.540 --> 00:05:22.375
&gt;&gt; Will Sentance: Popping, I popped the
call to multiplyBy2 off the call stack,

104
00:05:22.375 --> 00:05:23.900
and where do I go?

105
00:05:23.900 --> 00:05:25.570
Where do I go next?

106
00:05:25.570 --> 00:05:29.107
We may think, Griffin, I asked you,
we finished running multiplyBy2,

107
00:05:29.107 --> 00:05:32.491
we go back into global, but
JavaScript doesn't know that by default.

108
00:05:32.491 --> 00:05:36.395
It only knows that because, look at that,
it got rid of the call to multiplyBy2, and

109
00:05:36.395 --> 00:05:37.490
where did it go back to?

110
00:05:37.490 --> 00:05:39.563
What's at the top of the call stack now?

111
00:05:39.563 --> 00:05:40.449
&gt;&gt; Speaker 8: Global.
&gt;&gt; Will Sentance: Global.

112
00:05:40.449 --> 00:05:41.604
So now, let's go back there.

113
00:05:41.604 --> 00:05:45.475
But wait, the next line says,
spin up a new execution context,

114
00:05:45.475 --> 00:05:50.135
because the parens, the parens say make
execution context So at this point,

115
00:05:50.135 --> 00:05:52.950
what's gonna happen to my call stack,
Dave?

116
00:05:54.000 --> 00:05:56.410
&gt;&gt; Dave: The local is gonna go
to the top of the call stack.

117
00:05:56.410 --> 00:05:58.500
&gt;&gt; Will Sentance: Very good job,
Dave, very nice.

118
00:05:58.500 --> 00:06:07.030
I'm gonna add the execution called as the
call to multiplyBy2(10) to my call stack.

119
00:06:07.030 --> 00:06:09.090
There it is, top of the call stack.

120
00:06:09.090 --> 00:06:13.416
All right, then I finish running
the call to multiplyBy2.

121
00:06:13.416 --> 00:06:15.534
Matthew, what happens to my call stack?

122
00:06:15.534 --> 00:06:20.082
I've finished running multiplyBy2(10).

123
00:06:20.082 --> 00:06:21.735
What happens to my call stack?

124
00:06:21.735 --> 00:06:24.312
&gt;&gt; Matthew: Local is removed, global is-
&gt;&gt; Will Sentance: It's left, and

125
00:06:24.312 --> 00:06:25.334
it's therefore top of the call stack.

126
00:06:25.334 --> 00:06:26.500
&gt;&gt; Matthew: Right.

127
00:06:26.500 --> 00:06:32.199
&gt;&gt; Will Sentance: And therefore we know
that is where our code is now running.

128
00:06:32.199 --> 00:06:35.524
Okay folk, when you execute a function,

129
00:06:35.524 --> 00:06:40.810
you create a new execution context,
it comprises the thread.

130
00:06:40.810 --> 00:06:45.642
We go through the code inside the function
line by line by line by line.

131
00:06:45.642 --> 00:06:51.745
And a local memory where anything defined
inside the function is stored there,

132
00:06:51.745 --> 00:06:52.936
not in global.

133
00:06:52.936 --> 00:06:57.257
Anything defined inside the function,
do we still result in global?

134
00:06:57.257 --> 00:07:00.081
No, we stored it in the local memory.

135
00:07:00.081 --> 00:07:04.794
By the way we stored in the local
memory because the call to multiplyBy2,

136
00:07:04.794 --> 00:07:08.685
that execution context was top
of the call stack, perfect.

137
00:07:08.685 --> 00:07:12.554
This top of the call stack means
that's where my thread is, and

138
00:07:12.554 --> 00:07:15.412
that's where I'm storing myself in memory.

139
00:07:15.412 --> 00:07:18.388
Top of the call stack means everything,
and

140
00:07:18.388 --> 00:07:23.539
when we finish running multiplyBy2(4),
we jump back out into global,

141
00:07:23.539 --> 00:07:27.275
and we pop off the call to
multiplyBy2 from the stack.

142
00:07:27.275 --> 00:07:33.600
Okay, this call stack let's us keep
track of all these execution contexts.

143
00:07:33.600 --> 00:07:36.134
We have the global one to start,
this little baby one here for

144
00:07:36.134 --> 00:07:39.480
the running of multiplyBy2, then we
have another, then we go back to global.

145
00:07:39.480 --> 00:07:43.360
Then we do another little baby one here
for running multiplyBy2 again, okay?

146
00:07:43.360 --> 00:07:48.400
This local memory by the way
has a very fancy name.

147
00:07:48.400 --> 00:07:51.455
Does anyone what the fancy name for
the local memory is?

148
00:07:51.455 --> 00:07:53.195
Shelby?

149
00:07:53.195 --> 00:07:56.225
&gt;&gt; Will Sentance: I mean,
it's only a knowledge question.

150
00:07:56.225 --> 00:07:57.061
You do know this.

151
00:07:57.061 --> 00:07:59.703
It's called a variable environment.

152
00:07:59.703 --> 00:08:01.213
I like that name, I guess,

153
00:08:01.213 --> 00:08:04.579
because it's like the environment
of available variants.

154
00:08:04.579 --> 00:08:07.977
Sort of,
the environment is the stuff around you.

155
00:08:07.977 --> 00:08:12.587
It's the available variables around you,
it's the available data.

156
00:08:12.587 --> 00:08:14.285
This is live data stored in memory.

157
00:08:14.285 --> 00:08:19.831
Sitting there, live in memory,
stored inside the running and multiplyBy2.

