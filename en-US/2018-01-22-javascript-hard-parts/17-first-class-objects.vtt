WEBVTT

1
00:00:00.750 --> 00:00:02.280
&gt;&gt; Will: So how is this all possible?

2
00:00:02.280 --> 00:00:05.537
Who comes from a language where
the notion at least regularly,

3
00:00:05.537 --> 00:00:08.498
there other alternative land or
function as attribute.

4
00:00:08.498 --> 00:00:12.416
But the basic notion of
passing a function in or

5
00:00:12.416 --> 00:00:18.456
around into another function is
anathema to their day to day behavior.

6
00:00:18.456 --> 00:00:20.400
I [INAUDIBLE] use the word anathema.

7
00:00:20.400 --> 00:00:22.880
Who comes from a language where
that's just a bizarre thing to do?

8
00:00:22.880 --> 00:00:24.636
Raise your hand if you come from
a language that is unusual?

9
00:00:24.636 --> 00:00:26.330
Right?

10
00:00:26.330 --> 00:00:27.160
What is the language?
&gt;&gt; Speaker 2: HP.

11
00:00:27.160 --> 00:00:27.880
&gt;&gt; Will: Yeah, exactly.

12
00:00:27.880 --> 00:00:29.340
That's not the behavior
you do by standard.

13
00:00:29.340 --> 00:00:32.630
There are ways of doing it,
but it is not standard.

14
00:00:32.630 --> 00:00:33.840
How is it possible?

15
00:00:33.840 --> 00:00:40.209
Well, it's because in JavaScript functions
are what's called first-class objects.

16
00:00:40.209 --> 00:00:43.400
Now that's fairly obscure-sounding.

17
00:00:43.400 --> 00:00:46.030
What it just means is they
are first-class citizens.

18
00:00:46.030 --> 00:00:48.590
That means they behave just like objects.

19
00:00:48.590 --> 00:00:50.510
They are actually, literally, objects.

20
00:00:50.510 --> 00:00:54.370
How we know we can pass an object
into a function, right?

21
00:00:54.370 --> 00:00:55.950
No problem passing
an object into a function.

22
00:00:57.430 --> 00:00:59.840
I could pass an object in,
I mean this is an object.

23
00:00:59.840 --> 00:01:01.460
An array is also an object in JavaScript.

24
00:01:01.460 --> 00:01:06.211
I can pass objects in because objects
can be values on the right hand side

25
00:01:06.211 --> 00:01:07.620
of a label.

26
00:01:07.620 --> 00:01:13.012
In JavaScript, just the same,
just the same, our functions are objects,

27
00:01:13.012 --> 00:01:17.150
which means they can treated
like any JavaScript object.

28
00:01:17.150 --> 00:01:20.830
They can be assigned to variables,
known as function expressions.

29
00:01:20.830 --> 00:01:23.400
They can be properties of other objects.

30
00:01:23.400 --> 00:01:26.480
What was it called when a function's
a property of an object?

31
00:01:26.480 --> 00:01:27.780
What's a special name?

32
00:01:27.780 --> 00:01:29.650
&gt;&gt; Speaker 2: Method?
&gt;&gt; Will: Method, exactly.

33
00:01:29.650 --> 00:01:33.850
They can be passed as
arguments into functions.

34
00:01:35.720 --> 00:01:37.640
There it is, the function.

35
00:01:37.640 --> 00:01:39.140
We left a placeholder for it.

36
00:01:40.640 --> 00:01:45.070
Instructions, and we passed in an actual
function definition as a whole.

37
00:01:45.070 --> 00:01:47.116
What a bizarre behavior.

38
00:01:47.116 --> 00:01:51.200
JavaScript, no problem cuz its
functions are just like objects.

39
00:01:53.050 --> 00:01:56.216
And they can even be returned
as values from functions.

40
00:01:56.216 --> 00:01:59.960
They could be our output, not an array but
a whole function definition.

41
00:01:59.960 --> 00:02:05.700
Which we can then call, invoke,
execute out here under a new label.

42
00:02:05.700 --> 00:02:09.710
That gives for me the most
beautiful concept in JavaScript.

43
00:02:09.710 --> 00:02:12.290
Which so often we're doing hard parts,
is like a,

44
00:02:12.290 --> 00:02:16.500
well I'm afraid we can't look at that, but
today we are gonna be doing altogether.

45
00:02:16.500 --> 00:02:19.430
When we return a function from a function

46
00:02:19.430 --> 00:02:23.490
we see come to light a special
concept in JavaScript.

47
00:02:23.490 --> 00:02:25.227
What is that concept, Ameen?

48
00:02:25.227 --> 00:02:27.550
When we return a function from a function?

49
00:02:27.550 --> 00:02:28.395
&gt;&gt; Speaker 2: High order function.

50
00:02:28.395 --> 00:02:30.209
&gt;&gt; Will: It is a high order
function by definition but

51
00:02:30.209 --> 00:02:33.258
what is the special thing we return
a function from a function, Lindsey?

52
00:02:33.258 --> 00:02:34.400
Andrea?

53
00:02:34.400 --> 00:02:38.510
It is a magical world of, closure,
and we'll see that in a second.

54
00:02:39.790 --> 00:02:44.000
JavaScript functions have one bonus
property besides just being objects.

55
00:02:44.000 --> 00:02:45.160
What's the bonus property they have?

56
00:02:46.670 --> 00:02:48.241
Clara?

57
00:02:48.241 --> 00:02:50.523
&gt;&gt; Speaker 2: Dunno.
&gt;&gt; Will: Katie?

58
00:02:50.523 --> 00:02:52.532
They can be evoked.

59
00:02:52.532 --> 00:02:53.330
They can have parens on the end of them.

60
00:02:53.330 --> 00:02:55.270
You can't do that for objects.

61
00:02:55.270 --> 00:02:58.650
That's the only bonus thing for
a function, you can run it.

62
00:02:58.650 --> 00:03:00.035
It has functionality that can be run.

63
00:03:00.035 --> 00:03:04.060
Now that sounds, the only, it's also
the most profound, it's everything.

64
00:03:04.060 --> 00:03:06.630
But it is also the only difference
they have from objects.

