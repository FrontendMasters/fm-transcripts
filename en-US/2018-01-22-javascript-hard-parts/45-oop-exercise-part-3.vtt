WEBVTT

1
00:00:00.590 --> 00:00:01.490
&gt;&gt; Will Sentance: Okay.

2
00:00:01.490 --> 00:00:02.840
Our code is getting repetitive.

3
00:00:02.840 --> 00:00:08.930
We are creating brand new objects by
hand for every single different user.

4
00:00:08.930 --> 00:00:11.070
Imagine our game, new user signing in,

5
00:00:11.070 --> 00:00:14.750
we're not going to be manually
filling them out by hand each time.

6
00:00:14.750 --> 00:00:17.720
Develop a behind the scenes, there's got
to be something different we can do here.

7
00:00:19.990 --> 00:00:25.650
What do we do when we have the same
functionality being done again and again.

8
00:00:25.650 --> 00:00:27.720
We're just writing it,
repeating it out again and again.

9
00:00:27.720 --> 00:00:29.550
What do we usually do when that happens?

10
00:00:29.550 --> 00:00:30.490
&gt;&gt; Lindsey: Make it generic?

11
00:00:30.490 --> 00:00:31.120
&gt;&gt; Dave: Modulize?

12
00:00:31.120 --> 00:00:32.630
&gt;&gt; Will Sentance: Make it generic,
modulize.

13
00:00:33.990 --> 00:00:38.820
How do we wrap up repeatedly used
functionality in JavaScript Lindsey.

14
00:00:38.820 --> 00:00:39.863
&gt;&gt; Lindsey: Classes?

15
00:00:39.863 --> 00:00:43.710
&gt;&gt; Will Sentance: How do we wrap up just
regular, if I wanna create Function, yeah.

16
00:00:43.710 --> 00:00:47.135
There are fancier things to come, but in
its basic form, if we wanna repeatedly do

17
00:00:47.135 --> 00:00:49.683
something, how do we make sure
we only have to write it once?

18
00:00:49.683 --> 00:00:52.530
Lindsey, if you wanna
repeatedly do something,

19
00:00:52.530 --> 00:00:55.185
how do we make sure we
only wanna write it once?

20
00:00:59.170 --> 00:01:00.028
&gt;&gt; Lindsey: Generalize the function.

21
00:01:00.028 --> 00:01:01.059
&gt;&gt; Will Sentance: We just
store it in a function.

22
00:01:02.250 --> 00:01:04.749
It was such an obvious question,
cuz someone literally said it twice, but

23
00:01:04.749 --> 00:01:06.267
you couldn't imagine I
was asking it again.

24
00:01:06.267 --> 00:01:09.665
But exactly right,
we just wrap up what we're doing and

25
00:01:09.665 --> 00:01:15.027
store it in a function,
&gt;&gt; Will Sentance: So if our goal here,

26
00:01:15.027 --> 00:01:19.981
the whole rest of this OOP session
is how can I create Users,

27
00:01:19.981 --> 00:01:25.970
user objects, which represent
each individual user's data.

28
00:01:25.970 --> 00:01:30.630
Where, also, all the functionality
is available on each of those users.

29
00:01:30.630 --> 00:01:35.699
Will, score three, Tim, six, Lindsey,

30
00:01:35.699 --> 00:01:40.022
12,
&gt;&gt; Will Sentance: Shelby Fifteen, exactly,

31
00:01:40.022 --> 00:01:45.630
and each of them has a functionality
to increase their score.

32
00:01:45.630 --> 00:01:48.950
How do I make sure that I can
create these objects easily?

33
00:01:48.950 --> 00:01:52.640
Well, the very simplest first way is
rather than manually writing them out each

34
00:01:52.640 --> 00:01:59.260
time, is to wrap them in a function,
to create a user creator function.

35
00:01:59.260 --> 00:02:02.630
But when it gets run with
particular arguments,

36
00:02:02.630 --> 00:02:07.320
it goes inside, creates a new object,
fills in the object with those arguments,

37
00:02:07.320 --> 00:02:11.400
returns out the filled in object,
and stores it in user one.

38
00:02:11.400 --> 00:02:15.600
We're gonna muddle through this and
see are we ending up in the same position

39
00:02:15.600 --> 00:02:18.430
as we did when we manually
made our objects.

40
00:02:18.430 --> 00:02:24.500
All right.
So line one, Bob.

41
00:02:24.500 --> 00:02:29.078
Bob, what's happening in
line one of our code here?

42
00:02:29.078 --> 00:02:31.902
&gt;&gt; Barb: Declare function user creator.

43
00:02:31.902 --> 00:02:33.720
&gt;&gt; Will Sentance: User creator.

44
00:02:33.720 --> 00:02:35.617
Good, good, good, good.

45
00:02:38.541 --> 00:02:41.623
&gt;&gt; Will Sentance: Declare
a function use Creator and

46
00:02:41.623 --> 00:02:45.029
store it in our global memory, okay.

47
00:02:48.260 --> 00:02:52.004
&gt;&gt; Will Sentance: Store it in
our global memory, userCreator,

48
00:02:52.004 --> 00:02:56.520
there it is, and
it's the whole function definition.

49
00:02:56.520 --> 00:02:58.643
And it's a big ole function and
it has a lot of stuff.

50
00:02:58.643 --> 00:03:04.296
Okay, next line that we call or
do we run, Muhammad.

51
00:03:04.296 --> 00:03:07.060
&gt;&gt; Muhammed: We do let user1.

52
00:03:07.060 --> 00:03:08.067
&gt;&gt; Will Sentance: Okay,
so we declare user1.

53
00:03:08.067 --> 00:03:11.380
Do we know what's gonna
be stored in user1 yet?

54
00:03:11.380 --> 00:03:12.490
&gt;&gt; Muhammed: Not yet.
&gt;&gt; Will Sentance: We don't.

55
00:03:13.560 --> 00:03:15.060
It's undefined for now.

56
00:03:15.060 --> 00:03:16.765
But we're gonna go and

57
00:03:16.765 --> 00:03:22.157
run this userCreator function that
we just declared Let's go call it.

58
00:03:22.157 --> 00:03:27.224
Here it is, and we're calling it with,
will and 3, and

59
00:03:27.224 --> 00:03:32.715
we say whatever is gonna come out
of this function being called

60
00:03:32.715 --> 00:03:39.280
is gonna be stored in the place,
currently just a placeholder, user1.

61
00:03:39.280 --> 00:03:44.980
Okay, so now, we call this function,
everyone together?

62
00:03:44.980 --> 00:03:48.840
We create a new
&gt;&gt; class: Execution contest.

63
00:03:48.840 --> 00:03:51.510
&gt;&gt; Will Sentance: You're very kind to
show such energy each time everyone.

64
00:03:51.510 --> 00:03:52.420
There it is.

65
00:03:52.420 --> 00:03:59.840
userCreator has execution context
with will and 3 passed in.

66
00:03:59.840 --> 00:04:03.790
And so we have our local memory.

67
00:04:04.820 --> 00:04:06.400
Of our execution context.

68
00:04:06.400 --> 00:04:11.070
We have the call to userCreator function.

69
00:04:11.070 --> 00:04:15.187
Top of the call stack,and here we go.

70
00:04:15.187 --> 00:04:18.621
Dave, first thing we do inside
the call to userCreator is handle

71
00:04:18.621 --> 00:04:20.450
our arguments isn't it?

72
00:04:20.450 --> 00:04:22.490
So tell me a bit about that.

73
00:04:22.490 --> 00:04:24.390
What's the first one we handle?

74
00:04:24.390 --> 00:04:25.250
&gt;&gt; Dave: Will.

75
00:04:25.250 --> 00:04:26.990
&gt;&gt; Will Sentance: And
what's it filling in?

76
00:04:26.990 --> 00:04:28.290
&gt;&gt; Dave: Name.
&gt;&gt; Will Sentance: Name, exactly.

77
00:04:28.290 --> 00:04:29.900
So name, try that again.

78
00:04:29.900 --> 00:04:33.700
The name parameter is assigned
the argument, the value Will.

79
00:04:35.100 --> 00:04:39.906
&gt;&gt; Dave: Name is the parameter and the
value is Will, is that what I should say?

80
00:04:39.906 --> 00:04:40.610
&gt;&gt; Will Sentance: Yeah, that's fine.

81
00:04:41.620 --> 00:04:46.681
There it is and score therefore is, 3.

82
00:04:46.681 --> 00:04:53.293
Okay, Lindsey into the function body
we go, what's it tell use to do?

83
00:04:53.293 --> 00:04:58.060
&gt;&gt; Lindsey: To create a new empty object.

84
00:04:58.060 --> 00:04:58.598
New user.

85
00:04:58.598 --> 00:04:59.980
&gt;&gt; Will Sentance: New user.

86
00:04:59.980 --> 00:05:01.270
There it is.

87
00:05:01.270 --> 00:05:02.900
New empty object, new user.

88
00:05:02.900 --> 00:05:04.620
And what do we do in the next line?

89
00:05:04.620 --> 00:05:08.572
Lindsey?
&gt;&gt; Lindsey: We create a new property of

90
00:05:08.572 --> 00:05:09.920
name
&gt;&gt; Will Sentance: Yeah.

91
00:05:10.930 --> 00:05:12.650
And assign it what value?

92
00:05:12.650 --> 00:05:13.490
&gt;&gt; Lindsey: Name.

93
00:05:13.490 --> 00:05:14.720
&gt;&gt; Will Sentance: Yeah.
Which is?

94
00:05:14.720 --> 00:05:16.360
&gt;&gt; Lindsey: Will.
&gt;&gt; Will Sentance: Yeah, so let's.

95
00:05:16.360 --> 00:05:19.727
It's easy to get confused between these,
the name is the auto.

96
00:05:19.727 --> 00:05:20.839
When we do new user dot names,

97
00:05:20.839 --> 00:05:23.130
it's not because new user
already had a name property.

98
00:05:23.130 --> 00:05:25.680
We are automatically creating the name
property in that sort of step.

99
00:05:25.680 --> 00:05:30.300
You can imagine, we have to declare name
with a property, we just announce it and

100
00:05:30.300 --> 00:05:34.090
assign to it the value of the name
in local memory, which is will.

101
00:05:34.090 --> 00:05:35.900
Okay, next line Lindsey.

102
00:05:35.900 --> 00:05:37.220
&gt;&gt; Lindsey: Create the property score.

103
00:05:37.220 --> 00:05:38.127
&gt;&gt; Will Sentance: And assign it the value?

104
00:05:38.127 --> 00:05:40.480
&gt;&gt; Lindsey: Of three.

105
00:05:40.480 --> 00:05:41.500
&gt;&gt; Will Sentance: Three, perfect.

106
00:05:41.500 --> 00:05:45.610
And then the property increment, and

107
00:05:45.610 --> 00:05:49.450
assign it the func or declare, and
decide it the function that we see there.

108
00:05:49.450 --> 00:05:50.696
And then, what do we do, we.

109
00:05:52.380 --> 00:05:53.350
&gt;&gt; Will Sentance: Lindsey?

110
00:05:53.350 --> 00:05:55.450
&gt;&gt; Lindsey: We return the new user.

111
00:05:55.450 --> 00:06:01.330
&gt;&gt; Will Sentance: We return out that whole
object to the value, which is the object.

112
00:06:01.330 --> 00:06:06.290
Out it comes and
it gets stored in what variable?

113
00:06:06.290 --> 00:06:06.800
&gt;&gt; Lindsey: User1.

114
00:06:06.800 --> 00:06:08.925
&gt;&gt; Will Sentance: User1, exactly.

115
00:06:08.925 --> 00:06:13.507
User1 is now that whole object,
this is looking good.

116
00:06:13.507 --> 00:06:16.170
It looks like we've achieved
what we did before.

117
00:06:16.170 --> 00:06:19.300
Very nice.

118
00:06:19.300 --> 00:06:21.070
Score 3 and increment.

119
00:06:21.070 --> 00:06:26.090
We returned out the object and
stored it in user1.

120
00:06:26.090 --> 00:06:29.660
Good, we've achieved what we did before
and we wrapped up the functionality and

121
00:06:29.660 --> 00:06:31.680
then called it with the actual values.

122
00:06:31.680 --> 00:06:35.190
Okay, let's do this one more time to make
sure we're really generating our two

123
00:06:35.190 --> 00:06:36.170
objects.

124
00:06:36.170 --> 00:06:38.780
So back to global execution context.

125
00:06:38.780 --> 00:06:41.360
Where we encounter what line?

126
00:06:41.360 --> 00:06:42.270
Who's not been called on for a bit?

127
00:06:42.270 --> 00:06:43.720
Mohammed, what line do we encounter?

128
00:06:43.720 --> 00:06:45.300
I asked you this question before,
didn't I?

129
00:06:45.300 --> 00:06:48.780
See, I have this amazing ability
to ask exactly the same person.

130
00:06:48.780 --> 00:06:51.840
Katy, what is the next line we encounter?

131
00:06:53.180 --> 00:06:55.740
&gt;&gt; Katy: We set the variable user2-
&gt;&gt; Will Sentance: Yep.

132
00:06:55.740 --> 00:06:58.234
&gt;&gt; Katy: To, well-
&gt;&gt; Will Sentance: Well,

133
00:06:58.234 --> 00:06:59.430
what's the posh way of saying?

134
00:06:59.430 --> 00:07:00.280
We don't yet know, do we?

135
00:07:00.280 --> 00:07:01.520
&gt;&gt; Katy: We declare it.

136
00:07:01.520 --> 00:07:02.427
&gt;&gt; Will Sentance: We declare it, and

137
00:07:02.427 --> 00:07:05.736
it's gonna be eventually the return
value of calling userCreator.

138
00:07:05.736 --> 00:07:07.490
The return value, the output.

139
00:07:07.490 --> 00:07:11.020
So, there we go, we've gotta go call.

140
00:07:11.020 --> 00:07:14.310
What do we do when we call a function,
Katie?

141
00:07:14.310 --> 00:07:15.530
Create a new.

142
00:07:15.530 --> 00:07:19.600
&gt;&gt; Katy: Paranetheses, execution-
&gt;&gt; Will Sentance: Execution

143
00:07:19.600 --> 00:07:20.579
context, there it is.

144
00:07:22.280 --> 00:07:27.290
And push the call of the function,
userCreator to the top

145
00:07:27.290 --> 00:07:30.690
of our cool stack with these arguments.

146
00:07:30.690 --> 00:07:34.630
In we go, get a little local memory, and

147
00:07:34.630 --> 00:07:38.620
Katy, just told me through
filling in the parameters.

148
00:07:39.940 --> 00:07:44.380
&gt;&gt; Katy: Reset the name parameter or
input to 10?

149
00:07:44.380 --> 00:07:46.990
&gt;&gt; Will Sentance: Yep.
&gt;&gt; Katy: And then we set the score input

150
00:07:46.990 --> 00:07:49.040
to value five.

151
00:07:49.040 --> 00:07:51.930
&gt;&gt; Will Sentance: Look at that,
unprecedented, way of doing it.

152
00:07:51.930 --> 00:07:53.600
Well, I mean that's fine, that's fine.

153
00:07:53.600 --> 00:07:55.226
I think there's nothing wrong with that.

154
00:07:55.226 --> 00:07:56.930
That's the same thing as I just did there.

155
00:07:58.130 --> 00:07:59.000
And then we do what?

156
00:07:59.000 --> 00:08:00.680
We declare what Katie?

157
00:08:00.680 --> 00:08:03.590
&gt;&gt; Katy: We declare newUser
as an empty object.

158
00:08:03.590 --> 00:08:05.400
&gt;&gt; Will Sentance: Yeah, there it is.

159
00:08:05.400 --> 00:08:06.530
And what do we store in it?

160
00:08:06.530 --> 00:08:09.170
&gt;&gt; Katy: And
then we store the name property.

161
00:08:09.170 --> 00:08:10.330
&gt;&gt; Will Sentance: Yeah, with what value?

162
00:08:10.330 --> 00:08:11.390
&gt;&gt; Katy: And the value of 10.

163
00:08:11.390 --> 00:08:15.190
&gt;&gt; Will Sentance: So
this name here is score's all there,

164
00:08:15.190 --> 00:08:18.310
then score, which is 5,
and then, look at this.

165
00:08:18.310 --> 00:08:23.270
We declare a function increment,
we declare our function increment.

166
00:08:23.270 --> 00:08:27.180
Then we hit the end of that function body,
and what does it tell us to do?

167
00:08:27.180 --> 00:08:27.680
Andrea?

168
00:08:30.480 --> 00:08:32.060
&gt;&gt; Andrea: Return user2.

169
00:08:32.060 --> 00:08:39.270
&gt;&gt; Will Sentance: Exactly,
return out into user2.

170
00:08:39.270 --> 00:08:40.920
This whole function and that's what we do.

171
00:08:40.920 --> 00:08:43.660
So this whole object, that's what we do.

172
00:08:43.660 --> 00:08:48.700
Name Tim, here's your turned out score.

173
00:08:48.700 --> 00:08:53.140
Five and increment is a function.

174
00:08:54.630 --> 00:08:59.300
Have we achieved exactly the same as we
did when we declared our object manually?

175
00:08:59.300 --> 00:09:04.000
We have,
we said our goal here today was to,

176
00:09:04.000 --> 00:09:08.990
well one thing me to add.

177
00:09:08.990 --> 00:09:15.060
Can we fulfill our fundamental goal of
running our functionality that's relevant

178
00:09:15.060 --> 00:09:21.880
to our object, our user data, individual
user data, immediately on the user itself?

179
00:09:21.880 --> 00:09:22.840
Can we do it?

180
00:09:22.840 --> 00:09:25.850
Let's test it out with user2.increment.

181
00:09:25.850 --> 00:09:28.929
We can skip user1,
we'll just do user2.increment.

182
00:09:28.929 --> 00:09:35.610
Let's see, user2.increment, there it is.

183
00:09:35.610 --> 00:09:38.693
We finished running user creator first and
the second time,

184
00:09:38.693 --> 00:09:40.333
we now hit user2.increment.

185
00:09:40.333 --> 00:09:43.040
Let's be really precise about this.

186
00:09:43.040 --> 00:09:45.840
Lindsey, when JavaScript sees
this line what does it do first?

187
00:09:47.240 --> 00:09:49.250
&gt;&gt; Lindsey: It-
&gt;&gt; Will Sentance: What's the left,

188
00:09:49.250 --> 00:09:50.710
what this bit say?

189
00:09:50.710 --> 00:09:52.900
&gt;&gt; Lindsey: It finds the object user2.

190
00:09:52.900 --> 00:09:54.170
&gt;&gt; Will Sentance: Go ahead.
Say that again.

191
00:09:54.170 --> 00:09:55.620
&gt;&gt; Lindsey: It finds the object user2.

192
00:09:55.620 --> 00:09:57.270
&gt;&gt; Will Sentance: Exactly,
it says what's user2?

193
00:09:57.270 --> 00:09:59.000
Let me look at them here.

194
00:09:59.000 --> 00:10:00.380
Don't worry, there's user2.

195
00:10:00.380 --> 00:10:02.600
And then it says, we're looking for

196
00:10:02.600 --> 00:10:05.120
a property called increment
which supposedly is a function.

197
00:10:05.120 --> 00:10:08.400
Let's see, yes there it is,
and it's a function, great.

198
00:10:08.400 --> 00:10:11.300
So now we can create a new execution.

199
00:10:11.300 --> 00:10:14.130
We've achieved our fundamental goal.

200
00:10:14.130 --> 00:10:16.640
Our fundamental goal was,

201
00:10:16.640 --> 00:10:21.380
can I bundle my functionality that
could ever be relevant to my user?

202
00:10:21.380 --> 00:10:22.760
Right now, we've just got increment.

203
00:10:22.760 --> 00:10:25.230
But we could easily have a hundred
different functions that could be relevant

204
00:10:25.230 --> 00:10:29.860
to each user being attached
directly to the user1 object,

205
00:10:29.860 --> 00:10:33.000
the user2 object, has all
the functionality available, hooray.

