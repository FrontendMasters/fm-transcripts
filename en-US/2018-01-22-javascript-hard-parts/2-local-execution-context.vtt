WEBVTT

1
00:00:00.220 --> 00:00:04.750
&gt;&gt; Will Sentance: Now,
we introduce executing, or running, or

2
00:00:04.750 --> 00:00:06.840
invoking, or calling a function.

3
00:00:08.040 --> 00:00:10.420
So what happens when we do this?

4
00:00:10.420 --> 00:00:12.720
This is not the same as
defining a function.

5
00:00:14.200 --> 00:00:18.040
But how do we tell JavaScript
to define a function?

6
00:00:18.040 --> 00:00:19.950
Keyword, function.

7
00:00:19.950 --> 00:00:23.379
How do I tell JavaScript
to call a function, Art?

8
00:00:23.379 --> 00:00:24.900
How do I tell JavaScript
to call a function?

9
00:00:26.995 --> 00:00:29.690
&gt;&gt; Will Sentance: All I have to
do is add parenthesis, that's it.

10
00:00:29.690 --> 00:00:33.350
I take the name of the function and
I add parens, not an input.

11
00:00:33.350 --> 00:00:36.770
Adding parens is enough it say, it just
says go run the code of that function.

12
00:00:36.770 --> 00:00:40.787
It may not have actually therefore
an argument path with actual value, but

13
00:00:40.787 --> 00:00:42.583
it's still running a function.

14
00:00:42.583 --> 00:00:44.561
So let's keep going.

15
00:00:44.561 --> 00:00:48.097
Line 1, num is 3.

16
00:00:48.097 --> 00:00:49.931
Line 2, multiplyBy2 as a function.

17
00:00:49.931 --> 00:00:52.135
We may be thinking, man, yeah,
I know how this is working.

18
00:00:52.135 --> 00:00:55.205
I can look at this straight away and
figure it out.

19
00:00:55.205 --> 00:00:59.729
Getting this level of precision
down now is what makes closure,

20
00:00:59.729 --> 00:01:04.185
higher order functions, OOP,
all flow much more naturally.

21
00:01:04.185 --> 00:01:11.065
So what's our next line of code after
declaring multiply by 2 ,Clara?

22
00:01:11.065 --> 00:01:15.917
&gt;&gt; Clara: After declaring the function
then you'll declared in your outputs

23
00:01:15.917 --> 00:01:16.861
constants.

24
00:01:16.861 --> 00:01:22.344
&gt;&gt; Will Sentance: Perfect there it is, and
what are we going to assign to it Clara?

25
00:01:22.344 --> 00:01:25.905
&gt;&gt; Clara: So eventually would be
the return value of the function.

26
00:01:25.905 --> 00:01:29.342
&gt;&gt; Will Sentance: Correct eventually
it would be the return value of calling

27
00:01:29.342 --> 00:01:34.054
the multiplyBy2 function with the input
of 4, but we haven't done that yet.

28
00:01:34.054 --> 00:01:35.674
We've got to go do that work.

29
00:01:35.674 --> 00:01:38.875
But JavaScript likes to have
everything over value even when it's in

30
00:01:38.875 --> 00:01:39.763
the waiting game.

31
00:01:39.763 --> 00:01:41.424
So what's its Default waiting value.

32
00:01:41.424 --> 00:01:42.473
&gt;&gt; Clara: Undefined.

33
00:01:42.473 --> 00:01:44.476
&gt;&gt; Will Sentance: Undefined,
I'm gonna draw it as an old dotted line,

34
00:01:44.476 --> 00:01:46.088
we don't know what's gonna be there yet.

35
00:01:46.088 --> 00:01:51.210
So just to be really clear, what's
definitely not there is multiplyBy2.

36
00:01:51.210 --> 00:01:54.159
Output has no interest in multipleBy2,

37
00:01:54.159 --> 00:01:59.803
it only gets interested in multiply 2 in
the sense of it's run multiplyBy2 and

38
00:01:59.803 --> 00:02:03.525
the values come back as a return value,
the result.

39
00:02:03.525 --> 00:02:06.929
Whatever is in the return, or
whatever's after the return

40
00:02:06.929 --> 00:02:11.440
keyword inside the function,
that is what's gonna be stored in output.

41
00:02:11.440 --> 00:02:13.930
So you gotta go do some work.

42
00:02:13.930 --> 00:02:15.619
So let's do that work.

43
00:02:15.619 --> 00:02:21.377
We're gonna see what happens
when I run multiplyBy2,

44
00:02:21.377 --> 00:02:25.174
and assign the result of calling it,

45
00:02:25.174 --> 00:02:30.460
with the input of 4,
assign the result to output.

46
00:02:30.460 --> 00:02:35.419
So who knows what we do when we start
with an outcome we create a global

47
00:02:35.419 --> 00:02:36.985
execution context.

48
00:02:36.985 --> 00:02:39.129
What about when we start
running a function?

49
00:02:39.129 --> 00:02:40.650
What do we create, Lindsay?

50
00:02:40.650 --> 00:02:42.791
How do we start running that function?

51
00:02:42.791 --> 00:02:43.650
&gt;&gt; Lindsay: A local.

52
00:02:43.650 --> 00:02:45.021
&gt;&gt; Will Sentance: Local what?

53
00:02:45.021 --> 00:02:46.505
&gt;&gt; Lindsay: Execution.

54
00:02:46.505 --> 00:02:49.621
&gt;&gt; Will Sentance: Everyone together,
we create a local?

55
00:02:49.621 --> 00:02:51.430
&gt;&gt; Lindsay: Execution content.

56
00:02:51.430 --> 00:02:56.760
&gt;&gt; Will Sentance: Excellent, perfect,
good job Linsey and the team.

57
00:02:56.760 --> 00:02:57.381
There we are.

58
00:02:57.381 --> 00:02:59.090
What's in it?

59
00:02:59.090 --> 00:03:00.249
Llet's have a look.

60
00:03:00.249 --> 00:03:01.789
Here's our local execution context.

61
00:03:01.789 --> 00:03:06.122
And it has, just like a global one,
had a global memory and

62
00:03:06.122 --> 00:03:10.552
a global thread in which we
are doing all this work, right.

63
00:03:10.552 --> 00:03:13.908
We are doing work line by line.

64
00:03:13.908 --> 00:03:17.902
Now we got a local one and we just got
a local memory and a local thread and

65
00:03:17.902 --> 00:03:22.335
a local thread just means doing the code
inside the function now line by line.

66
00:03:22.335 --> 00:03:23.483
Before we were doing the code globally,

67
00:03:23.483 --> 00:03:25.185
now we're doing the code inside
the function line by line.

68
00:03:25.185 --> 00:03:28.085
And we paused doing the code globally.

69
00:03:28.085 --> 00:03:31.466
We're not hitting the line new output.

70
00:03:31.466 --> 00:03:36.573
We're just paused before this line here,
we're waiting to go back

71
00:03:36.573 --> 00:03:41.593
to this global execution context
while we're busy inside running

72
00:03:41.593 --> 00:03:46.720
this local execution context for
multiplyBy2 with an input of 4.

73
00:03:46.720 --> 00:03:53.302
So Andrea, what's the first thing we do
inside of multiplyBy2 with the input of 4?

74
00:03:53.302 --> 00:03:59.823
&gt;&gt; Andrea: We take four and we put it in
input number and then we times it by two.

75
00:03:59.823 --> 00:04:03.120
&gt;&gt; Will Sentance: Yes, very good, well
yes, we take four put it in input number.

76
00:04:03.120 --> 00:04:06.210
What's the posh way of saying we
take four and put it in inputNumber.

77
00:04:06.210 --> 00:04:08.420
Andrew, you wanna give a shot?

78
00:04:08.420 --> 00:04:12.258
&gt;&gt; Andrew: We assign it to the-
&gt;&gt; Will Sentance: What's a posh word for

79
00:04:12.258 --> 00:04:13.091
the input, the placeholder?

80
00:04:13.091 --> 00:04:14.003
&gt;&gt; Andrew: Parameter?

81
00:04:14.003 --> 00:04:15.750
&gt;&gt; Will Sentance: Parameter, exactly.

82
00:04:15.750 --> 00:04:19.950
So we take the parameter inputNumber,

83
00:04:19.950 --> 00:04:24.670
assign it our argument value, which is 4.

84
00:04:24.670 --> 00:04:29.380
Hooray, okay next line, Andrew?

85
00:04:29.380 --> 00:04:30.640
&gt;&gt; Andrew: Would be the constant result.

86
00:04:30.640 --> 00:04:32.093
&gt;&gt; Will Sentance: Good, there it is.

87
00:04:32.093 --> 00:04:35.557
Also stored in our local memory and
what do we assign to it?

88
00:04:35.557 --> 00:04:38.442
&gt;&gt; Andrew: Four times two.

89
00:04:38.442 --> 00:04:40.433
&gt;&gt; Will Sentance: Yep, and
the posh word, by the way,

90
00:04:40.433 --> 00:04:42.821
for saying that is the evaluated resulted.

91
00:04:42.821 --> 00:04:45.320
Evaluate means they did the work,
did the calculation.

92
00:04:45.320 --> 00:04:48.445
The evaluated result of input number,

93
00:04:48.445 --> 00:04:53.380
which is you look at that memory,
4 by 2, which gives us 8.

94
00:04:53.380 --> 00:05:00.630
Excellent, good, and now what do
we do with that result, Andrew?

95
00:05:00.630 --> 00:05:01.639
&gt;&gt; Andrew: Return it.

96
00:05:01.639 --> 00:05:06.667
&gt;&gt; Will Sentance: Exactly, so we already
said, whatever gets returned out

97
00:05:06.667 --> 00:05:13.968
of calling this multipliedBy2 function,
will be stored in this output variable.

98
00:05:13.968 --> 00:05:17.705
We turned out, put the value 8.

99
00:05:17.705 --> 00:05:21.562
I'm gonna store that 8 in output,

100
00:05:21.562 --> 00:05:25.425
there it is, all right, perfect.

101
00:05:29.502 --> 00:05:31.779
&gt;&gt; Will Sentance: Beautiful,
very, very nice.

102
00:05:31.779 --> 00:05:32.900
Andrew, go ahead.

103
00:05:32.900 --> 00:05:37.137
&gt;&gt; Andrew: Were you saying that
the output, when it's officially or

104
00:05:37.137 --> 00:05:43.286
when it's first put out, is designed as
undefined, until it's changed to eight?

105
00:05:43.286 --> 00:05:47.092
&gt;&gt; Will Sentance: Correct, until it gets
it's return value of eight assigned to it.

106
00:05:47.092 --> 00:05:47.668
All right,

107
00:05:47.668 --> 00:05:51.133
until it gets return multipliedBy2
return value of 8 assigned to it.

108
00:05:51.133 --> 00:05:58.020
Okay, so now what's happened
to this execution context?

109
00:05:58.020 --> 00:06:00.439
Griffin, ee finished
calling multiply by two,

110
00:06:00.439 --> 00:06:03.629
what do you think happens to
this execution context, Griffin?

111
00:06:03.629 --> 00:06:04.489
&gt;&gt; Griffin: It gets erased.

112
00:06:04.489 --> 00:06:08.776
&gt;&gt; Will Sentance: Erased, gets removed,
except for the return value out,

113
00:06:08.776 --> 00:06:10.973
which gets stored in output.

114
00:06:10.973 --> 00:06:16.186
I've never figured out a way of
indicating that it gets erased, but

115
00:06:16.186 --> 00:06:22.880
I'm gonna do this, I'm gonna write DONE
like that, that execution context is done.

116
00:06:22.880 --> 00:06:24.280
That's not great, I grant you.

117
00:06:24.280 --> 00:06:26.468
I'll come up with a better way
doing it but, there we go.

118
00:06:26.468 --> 00:06:30.158
So now which execution context
do we go back to Griffin?

119
00:06:30.158 --> 00:06:31.120
&gt;&gt; Griffin: Global.

120
00:06:31.120 --> 00:06:32.498
&gt;&gt; Will Sentance: Global.

121
00:06:32.498 --> 00:06:35.840
Now, JavaScript doesn't
know that by default.

122
00:06:35.840 --> 00:06:39.620
It needs to keep track
of that fact somehow.

123
00:06:39.620 --> 00:06:43.892
We are gonna see that bonus thing that
it uses to keep track of which execution

124
00:06:43.892 --> 00:06:47.025
context it is in and
which one to go to next, in a moment,

125
00:06:47.025 --> 00:06:50.328
raise your hand if you think
you know what that's called.

126
00:06:50.328 --> 00:06:51.650
The place it keeps track of that.

127
00:06:51.650 --> 00:06:53.570
Okay, we'll come to it in a second.

128
00:06:53.570 --> 00:06:55.569
For now we're back in global.

129
00:06:55.569 --> 00:07:02.465
And what's the next line, Shelby, in the
global execution context tell us to do?

130
00:07:02.465 --> 00:07:04.106
&gt;&gt; Shelby: New output is the new variable?

131
00:07:04.106 --> 00:07:06.333
&gt;&gt; Will Sentance: New
output is the new constant.

132
00:07:06.333 --> 00:07:08.606
There it is, newOutput.

133
00:07:08.606 --> 00:07:10.133
And what are we assigning it.

134
00:07:10.133 --> 00:07:15.843
&gt;&gt; Shelby: We are gonna pass
the parameter of ten into input.

135
00:07:15.843 --> 00:07:18.520
&gt;&gt; Will Sentance: Yeah, because we don't
yet know do we what we gonna assign it.

136
00:07:18.520 --> 00:07:25.101
For now, it's undefine because
we've gonna cool multiplyBy2.

137
00:07:25.101 --> 00:07:27.694
Figure out what comes
out at the bottom and

138
00:07:27.694 --> 00:07:30.666
that's what's gonna be
stored in new output.

139
00:07:30.666 --> 00:07:37.964
So Clara, talk me through as in
a complete form as you can Clara,

140
00:07:37.964 --> 00:07:43.656
this final line in our
global execution context.

141
00:07:43.656 --> 00:07:48.858
New output is the return value of
multiplied by 2 when called with 10.

142
00:07:48.858 --> 00:07:51.125
Talk me through this as
completely as you can Clara.

143
00:07:51.125 --> 00:07:55.263
&gt;&gt; Clara: All right, so
once you started your new local execution-

144
00:07:55.263 --> 00:07:57.345
&gt;&gt; Will Sentance: That's the first thing,

145
00:07:57.345 --> 00:07:58.010
got it?

146
00:07:58.010 --> 00:07:59.811
Doing that now.

147
00:07:59.811 --> 00:08:01.950
Excellent, it's got a,
what is it comprise?

148
00:08:01.950 --> 00:08:03.748
What is it an execution
called it's comprise?

149
00:08:03.748 --> 00:08:04.673
&gt;&gt; Clara: Local memory.

150
00:08:04.673 --> 00:08:05.743
&gt;&gt; Will Sentance: Local memory,

151
00:08:05.743 --> 00:08:09.538
which has a portion name we'll
say what is in a second.

152
00:08:09.538 --> 00:08:10.724
But local memory and

153
00:08:10.724 --> 00:08:14.290
the thread jumps inside To run
the code inside the function.

154
00:08:14.290 --> 00:08:15.031
Clara, go ahead.

155
00:08:15.031 --> 00:08:20.500
&gt;&gt; Clara: Right, so your parameter,
input number, so the value 10.

156
00:08:20.500 --> 00:08:22.870
&gt;&gt; Will Sentance: Yeah.

157
00:08:22.870 --> 00:08:26.660
&gt;&gt; Clara: And
then setting up your constant results.

158
00:08:26.660 --> 00:08:27.720
&gt;&gt; Will Sentance: Yeah,
and assign it with what?

159
00:08:27.720 --> 00:08:28.302
&gt;&gt; Clara: Some maths.

160
00:08:28.302 --> 00:08:30.224
&gt;&gt; Will Sentance: Yeah,
good, exactly, get 20, and

161
00:08:30.224 --> 00:08:33.212
what's the final line of
the boolean function tell us to do?

162
00:08:33.212 --> 00:08:34.154
&gt;&gt; Clara: Returning result.

163
00:08:34.154 --> 00:08:36.010
&gt;&gt; Will Sentance: Returning result, and

164
00:08:36.010 --> 00:08:40.937
I realize already we're reaching
the extremity of the board.

165
00:08:40.937 --> 00:08:41.772
There we go.

166
00:08:41.772 --> 00:08:45.729
So the result value is gonna be returned,
and

167
00:08:45.729 --> 00:08:50.429
where did we say that result
value is gonna be stored?

168
00:08:50.429 --> 00:08:51.820
&gt;&gt; Clara: That's gonna
go to your newOutput.

169
00:08:51.820 --> 00:08:52.511
&gt;&gt; Will Sentance: There it is.

170
00:08:52.511 --> 00:08:53.569
&gt;&gt; Clara: In the global context.

171
00:08:53.569 --> 00:08:55.921
&gt;&gt; Will Sentance: In the global
execution context memory.

172
00:08:55.921 --> 00:09:00.280
And so out returned 20, and
we store 20 in newOutput.

173
00:09:00.280 --> 00:09:02.710
What happens to this execution context,
Clara?

174
00:09:02.710 --> 00:09:03.790
&gt;&gt; Clara: It goes away.
&gt;&gt; Will Sentance: Goes away.

