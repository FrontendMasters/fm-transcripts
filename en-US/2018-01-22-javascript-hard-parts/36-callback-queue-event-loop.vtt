WEBVTT

1
00:00:00.000 --> 00:00:04.897
Because we're interacting with the outside
world, we have to add two strict rules.

2
00:00:04.897 --> 00:00:09.115
We have two rules for the execution
of our asynchroneously delayed code.

3
00:00:09.115 --> 00:00:11.700
Print hello, is asynchroneously delayed.

4
00:00:11.700 --> 00:00:15.236
It's saying, we're gonna delay
this code and run it later.

5
00:00:15.236 --> 00:00:18.367
That asynchronicity is not
happening in JavaScript.

6
00:00:18.367 --> 00:00:20.570
JavaScript has one thread so it can't

7
00:00:41.080 --> 00:00:45.292
Add the function to the Queup
stack in other words execute that

8
00:00:45.292 --> 00:00:48.937
function only when the Queup
stack is totally empty.

9
00:00:48.937 --> 00:00:53.716
So what is that process called if
the cheque is the Queup stack empty and

10
00:00:53.716 --> 00:00:59.224
is that the callback Queup that process is
known as something called has come from

11
00:00:59.224 --> 00:01:04.972
your side in general standard compute
science concept Where you're checking

12
00:01:04.972 --> 00:01:10.505
is something empty in order to
pass some functionality to be run.

13
00:01:10.505 --> 00:01:12.919
It's called an event loop.

14
00:01:12.919 --> 00:01:17.444
The event loop is just
the process of going, hold on.

15
00:01:17.444 --> 00:01:19.455
Is my call stack empty?

16
00:01:19.455 --> 00:01:23.300
Does my callback queue
have a function in it?

17
00:01:23.300 --> 00:01:24.327
Don't worry.

18
00:01:24.327 --> 00:01:29.857
Call stack was not empty, was not empty,
check, check, check, check, check.

19
00:01:29.857 --> 00:01:33.333
Still not empty, block for
one second is on the way.

20
00:01:33.333 --> 00:01:35.624
Check, check, still not empty.

21
00:01:35.624 --> 00:01:38.547
Still block one, aha, don't panic.

22
00:01:38.547 --> 00:01:43.603
Now the call stack's empty, block for
one second has finished executing.

23
00:01:43.603 --> 00:01:46.710
I can add print hello's
call to my call stack.

24
00:01:46.710 --> 00:01:47.526
Hooray.

25
00:01:47.526 --> 00:01:53.850
The event loop is just a posh name for
that checking is my call stack empty?

26
00:01:53.850 --> 00:01:58.950
Well if it is I can add my callback
function that was deferred

27
00:01:58.950 --> 00:02:05.380
from using this built in set time out
that speaks in the web browser API's.

28
00:02:05.380 --> 00:02:07.820
Stores a reference of that function.

29
00:02:07.820 --> 00:02:11.175
And on completion of my API,
completes instantly.

30
00:02:11.175 --> 00:02:16.128
Pushes that function, to the call back
queue, where it waits ready to go back

31
00:02:16.128 --> 00:02:19.633
to the call stack,
when the event loop says it is okay.

32
00:02:19.633 --> 00:02:21.233
And it was, it was okay.

33
00:02:21.233 --> 00:02:23.520
Because we went back to global, and

34
00:02:23.520 --> 00:02:28.290
at that moment the event loop said,
take that print hello function!

35
00:02:28.290 --> 00:02:34.050
And push it to the call stack where it can
be run in conventional JavaScript land.

36
00:02:34.050 --> 00:02:40.657
But didn't it take awhile to get back into
that world, to go over 1,000 milliseconds?

37
00:02:40.657 --> 00:02:46.418
Even though the function printHello looked
like it was only gonna be deferred for

38
00:02:46.418 --> 00:02:50.680
0 milliseconds,
it took over 1,000 milliseconds.

39
00:02:50.680 --> 00:02:51.796
All right folks.

40
00:02:51.796 --> 00:02:54.998
We're gonna have to look
at one more API like this.

41
00:02:54.998 --> 00:02:59.464
Besides timer, there's a whole bunch
of different API's we can use.

42
00:02:59.464 --> 00:03:01.771
Timer and whole bunch of other ones.

43
00:03:01.771 --> 00:03:05.196
We're gonna look at one more
after some more pairing.

44
00:03:05.196 --> 00:03:06.610
But first, thumbs and

45
00:03:06.610 --> 00:03:10.880
clarification questions on this
addition of our two final pieces.

46
00:03:10.880 --> 00:03:15.782
Of the JavaScript platform at event loop,
and our callback Hugh,

47
00:03:15.782 --> 00:03:17.882
or our message or task Hugh.

48
00:03:17.882 --> 00:03:23.310
These are messages, tasks that are gonna
be passed back to JavaScript's

49
00:03:23.310 --> 00:03:28.584
call stack only when the event loop
says you're good to go, it's clear

