WEBVTT

1
00:00:00.000 --> 00:00:03.050
&gt;&gt; Will Sentance: This time you spend
pairing through the challenges, and for

2
00:00:03.050 --> 00:00:05.940
our online viewers the time you
spend hopefully pairing, but

3
00:00:05.940 --> 00:00:10.030
maybe soloing through the challenges
is the real valuable stuff.

4
00:00:10.030 --> 00:00:12.480
Not so much what we do here.

5
00:00:12.480 --> 00:00:17.880
So, nevertheless though, right or wrongly
we are going to do some more stuff here.

6
00:00:17.880 --> 00:00:18.637
Rightly or wrongly,.

7
00:00:18.637 --> 00:00:24.010
So, you're already there
encountering in those challenges

8
00:00:24.010 --> 00:00:30.220
more than just a timer built in
browser feature, built in browser API.

9
00:00:30.220 --> 00:00:34.091
And that the browser API they're
becoming more than just a timer.

10
00:00:34.091 --> 00:00:35.619
Which other ones were we encountering?

11
00:00:35.619 --> 00:00:37.783
Andrea?
&gt;&gt; Andrea: Sorry,

12
00:00:37.783 --> 00:00:40.611
I'm [INAUDIBLE]
&gt;&gt; Will Sentance: It's

13
00:00:40.611 --> 00:00:42.076
ajax functionality, right?

14
00:00:42.076 --> 00:00:45.840
This
&gt;&gt; Will Sentance: Well, here you go.

15
00:00:45.840 --> 00:00:49.920
There are many things where
waiting would block our thread.

16
00:00:49.920 --> 00:00:51.210
We're waiting for something,

17
00:00:51.210 --> 00:00:56.270
here we were waiting for a timer to
complete, but there's other things.

18
00:00:56.270 --> 00:01:00.030
And therefore we use
browser functionality,

19
00:01:00.030 --> 00:01:05.430
built in browser functionality
interfaces with those functions instead.

20
00:01:05.430 --> 00:01:07.680
So, things we could wait for,
a timer to finish running,

21
00:01:07.680 --> 00:01:13.290
new information from a server,
an indication that a portion of the page

22
00:01:13.290 --> 00:01:18.230
has loaded, user interactions,
waiting for users to click on something.

23
00:01:18.230 --> 00:01:22.605
Writing or reading to a file system in
note when you write to your computer or

24
00:01:22.605 --> 00:01:24.370
writing/reading to a database in note.

25
00:01:24.370 --> 00:01:28.690
All of these are thing
we have to wait for, and

26
00:01:28.690 --> 00:01:31.470
we got a functionality we
can't wait in the main thread.

27
00:01:31.470 --> 00:01:36.590
So what we do, for each of these,
we have a web browser feature that

28
00:01:36.590 --> 00:01:41.410
we can spin up in the background, where we
can have a reference of the functionality

29
00:01:41.410 --> 00:01:47.250
that we want to call only when
that background feature completes.

30
00:01:47.250 --> 00:01:50.228
And then parse that functionality
back to the main call stack.

31
00:01:50.228 --> 00:01:54.818
Okay, I wanna add a few bonus things in
relation to what our wonderful online

32
00:01:54.818 --> 00:01:55.904
audience asked.

33
00:01:55.904 --> 00:02:03.023
They said hold on, what if,
&gt;&gt; Will Sentance: When I call,

34
00:02:03.023 --> 00:02:06.818
when I store printHello,
or reference printHello,

35
00:02:06.818 --> 00:02:11.090
when I use set time out,
what if my block for one second.

36
00:02:11.090 --> 00:02:16.600
Maybe I call a function recursively, and
my core stack's getting fuller and fuller.

37
00:02:16.600 --> 00:02:19.160
Will my printHello ever be invoked?

38
00:02:19.160 --> 00:02:20.450
Will it ever be added to the call stack?

39
00:02:20.450 --> 00:02:21.950
What do we think?

40
00:02:21.950 --> 00:02:26.200
If I were to call a function,
maybe block for one second and

41
00:02:26.200 --> 00:02:30.650
inside call a block for one second and
inside, basically it's recursively

42
00:02:30.650 --> 00:02:34.580
call a function until it's filling up the
call stack until it hits stack overflow,

43
00:02:34.580 --> 00:02:37.840
and there's no more space
to fill up any higher.

44
00:02:37.840 --> 00:02:41.930
Will I ever actually get a chance to
push printHello to the call stack.

45
00:02:41.930 --> 00:02:43.245
What do you think Katie?
&gt;&gt; Katie: No.

46
00:02:43.245 --> 00:02:44.220
&gt;&gt; Will Sentance: I won't.

47
00:02:44.220 --> 00:02:46.610
So will I ever see console log hello?

48
00:02:46.610 --> 00:02:48.220
I'll never see it.

49
00:02:49.220 --> 00:02:53.990
If I were to run for block one second,
three, four, five times here, even if my

50
00:02:53.990 --> 00:02:58.930
time is finished, I will not insert My
printHello function on to my call stack,

51
00:02:58.930 --> 00:03:02.720
until my call stack's empty which include

52
00:03:02.720 --> 00:03:06.490
my global execution context finishing
all of it's code to be run.

53
00:03:06.490 --> 00:03:10.360
Let's be really clear on that, it includes
me finishing all of my global code.

54
00:03:10.360 --> 00:03:15.400
If I had block for one second running
ten times, all of those would run before

55
00:03:15.400 --> 00:03:18.530
my printHello ever got out
of back to the call stack.

56
00:03:18.530 --> 00:03:21.527
These are a few of the questions
that came from online,

57
00:03:21.527 --> 00:03:23.760
although it's good questions, okay.

58
00:03:23.760 --> 00:03:24.900
One final thing,

59
00:03:24.900 --> 00:03:29.580
we parse reference to printHello,
not the actual copy of the function.

60
00:03:29.580 --> 00:03:32.270
We're actually copying the function into
the web API, just a reference to it,

61
00:03:32.270 --> 00:03:34.280
just where it is stored
in JavaScript's memory.

62
00:03:34.280 --> 00:03:37.070
Okay, so we wanna add to that.

63
00:03:38.150 --> 00:03:41.190
There are many thing we can end up waiting
for, here we're waiting for a time up but

64
00:03:41.190 --> 00:03:42.340
what about all these other things?

65
00:03:42.340 --> 00:03:45.270
Well, let's see one of them before
we go back to the challenges.

66
00:03:47.060 --> 00:03:52.095
So some of our API, some of our
built in features of the browser,

67
00:03:52.095 --> 00:03:58.082
they actually speak to somewhere else
outside of the browser like a server.

68
00:03:58.082 --> 00:04:03.001
Therefore they actually come back with
data, the design of the web browser API.

69
00:04:03.001 --> 00:04:05.320
Let me be really clear one more time.

70
00:04:05.320 --> 00:04:08.820
Web browser API's are not,
Mohammed, are not

71
00:04:09.930 --> 00:04:15.350
the API that you're speaking to for
Bands in Town.

72
00:04:15.350 --> 00:04:20.670
That your JavaScript speaks
to the web browser API for

73
00:04:20.670 --> 00:04:25.820
speaking to the band's in town
API on someone else's computer.

74
00:04:25.820 --> 00:04:28.070
So what other browser APIs do we have?

75
00:04:28.070 --> 00:04:33.460
Well, we have one called XHR HTTP request.

76
00:04:33.460 --> 00:04:39.370
Which is this special one that allows you
to speak to an API like Bands in Town.

77
00:04:39.370 --> 00:04:43.560
So this web browser,
Chrome's built-in API,

78
00:04:43.560 --> 00:04:48.980
a functionality feature of the browser,
is there to let us speak to the network.

79
00:04:48.980 --> 00:04:52.010
JavaScript cannot speak to the Internet.

80
00:04:52.010 --> 00:04:56.930
It speaks to the Internet by speaking
to the web browser features.

81
00:04:56.930 --> 00:05:03.190
One of which is timer,
another of which is XHR HTTP requests.

82
00:05:03.190 --> 00:05:06.820
A little special feature that
can speak to the Internet.

83
00:05:06.820 --> 00:05:08.990
Can speak to Twitter's API.

84
00:05:08.990 --> 00:05:11.442
Can speak to Bands and Towns API.

85
00:05:11.442 --> 00:05:13.159
We're gonna see that one in action here,

86
00:05:13.159 --> 00:05:15.671
we're gonna walk through this
code just the same way we did.

87
00:05:15.671 --> 00:05:19.707
By the way, that one is designed
to be able to receive data and

88
00:05:19.707 --> 00:05:24.222
make sure the function that gets
passed back into JavaScript land is

89
00:05:24.222 --> 00:05:28.913
already pre-bundled with the return
data from the Bands in Town API.

90
00:05:28.913 --> 00:05:30.400
We're gonna walk through this one in full.

91
00:05:30.400 --> 00:05:33.370
Yeah, Mark go ahead.
&gt;&gt; Mark: Just a question on the setTimeout

92
00:05:33.370 --> 00:05:35.830
stuff.
&gt;&gt; Will Sentance: Okay, go for

93
00:05:35.830 --> 00:05:36.720
it.
&gt;&gt; Mark: Okay,

94
00:05:36.720 --> 00:05:41.550
well, what happens if the setTimeout
is inside a function,

95
00:05:41.550 --> 00:05:45.090
does that function sit on the call
stack until the timer runs, or

96
00:05:45.090 --> 00:05:49.180
does it get popped out immediately?
&gt;&gt; Will Sentance: Wherever setTimeout's

97
00:05:49.180 --> 00:05:53.140
declared or executed, if setTimeout
is being executed inside a function,

98
00:05:53.140 --> 00:05:56.110
well that function when it gets called

99
00:05:56.110 --> 00:06:00.550
will inside it create an execution context
where it'll then call set timeout.

100
00:06:00.550 --> 00:06:04.737
Which will then speak to the web
browser land, instantly complete,

101
00:06:04.737 --> 00:06:09.213
go back into the function in which
it's being called execution context,

102
00:06:09.213 --> 00:06:12.555
which will then run in
JavaScript complete whatever.

103
00:06:12.555 --> 00:06:16.818
And then only then we're gonna call
back function that was parsed to set

104
00:06:16.818 --> 00:06:19.888
timer out be finally parsed
back to the call stack.

105
00:06:19.888 --> 00:06:25.188
So, it doesn't make any difference where
you call setTimeout, if you call it inside

106
00:06:25.188 --> 00:06:30.358
a function fine, it's still speaking to
our web browser APIs, okay, all right.

107
00:06:30.358 --> 00:06:33.111
I wanna look at that pairing as well
to see if there is anything I can add.

108
00:06:33.111 --> 00:06:39.115
So, we're now going to
use a different API,

109
00:06:39.115 --> 00:06:43.340
a different web browser API.

110
00:06:43.340 --> 00:06:49.158
This one is for interacting with
other computers on the network,

111
00:06:49.158 --> 00:06:51.817
other servers, other APIs.

112
00:06:51.817 --> 00:06:56.617
This one is for speaking outside of our,
not just JavaScript, but

113
00:06:56.617 --> 00:06:58.944
outside of our whole computer.

114
00:06:58.944 --> 00:07:02.520
We're gonna go through it line by line and
see it play out in action.

115
00:07:02.520 --> 00:07:05.390
This is our final function for
asynchronous JavaScript.

