WEBVTT

1
00:00:00.000 --> 00:00:03.041
Class user has a function at the top,
the first one,

2
00:00:03.041 --> 00:00:07.678
which is just the functionality version
of user that we did earlier that creates

3
00:00:07.678 --> 00:00:09.960
inside of an empty object, whatever.

4
00:00:09.960 --> 00:00:13.142
That's this bit here and
we rename that portion of it.

5
00:00:13.142 --> 00:00:14.594
We rename it what Katie?

6
00:00:14.594 --> 00:00:16.770
Can you see what it says we rename it?

7
00:00:16.770 --> 00:00:21.435
What did we name that bit that
previously was just a regular function?

8
00:00:21.435 --> 00:00:23.173
What did we name that bit?

9
00:00:23.173 --> 00:00:24.439
&gt;&gt; The constructor?

10
00:00:24.439 --> 00:00:25.468
&gt;&gt; Constructor.

11
00:00:25.468 --> 00:00:29.264
So we rename this bit,
I don't know why, constructor.

12
00:00:29.264 --> 00:00:33.217
I mean, I do know why, but
we rename that bit constructor.

13
00:00:33.217 --> 00:00:38.059
And rather than having to manually
populate the --set of shared functions

14
00:00:38.059 --> 00:00:41.949
that the objects that get returned
out of calling user get a bond to.

15
00:00:41.949 --> 00:00:46.179
Rather than manually populating them,
Griffin, what do we do instead?

16
00:00:46.179 --> 00:00:48.909
We just announced that
it's functions there.

17
00:00:48.909 --> 00:00:53.140
We just say, but all that's doing
when we announce those two functions,

18
00:00:53.140 --> 00:00:57.781
is actually, under the hood, saying
user.prototype centered to increment,

19
00:00:57.781 --> 00:01:04.190
user.prototype centered to login-- That's
literally doing exactly the same thing.

20
00:01:04.190 --> 00:01:09.978
So we're just going to walk through
it to make sure it's really clear.

21
00:01:09.978 --> 00:01:14.896
Lindsey, what's the top line
telling you to do?&gt;&gt; Carry

22
00:01:14.896 --> 00:01:20.510
a function.&gt;&gt; The very top
line.&gt;&gt; Declaring a-&gt;&gt; Class.

23
00:01:20.510 --> 00:01:23.643
A class,
I'm gonna call it a class I guess.

24
00:01:23.643 --> 00:01:28.131
And it has two parts to it,
what's the first part tell it to do?

25
00:01:28.131 --> 00:01:31.605
We go straight in and
do this stuff immediately.

26
00:01:31.605 --> 00:01:34.994
What's the first part tell us to do,
Lindsey?

27
00:01:34.994 --> 00:01:36.434
&gt;&gt; Run a constructor.

28
00:01:36.434 --> 00:01:38.128
&gt;&gt; Well not run, create.

29
00:01:38.128 --> 00:01:38.806
&gt;&gt; Create.

30
00:01:38.806 --> 00:01:39.950
&gt;&gt; So at this point

31
00:01:58.560 --> 00:01:59.304
There it is.

32
00:01:59.304 --> 00:02:03.642
It's given the label constructor which
means now we can specifically say,

33
00:02:03.642 --> 00:02:07.572
when I call user I'm calling this
bit the constructor portion of it.

34
00:02:07.572 --> 00:02:10.486
But we can see it's absolutely identical,
okay.

35
00:02:10.486 --> 00:02:14.549
And then we get to just lift off the
functions that we want to get stored in

36
00:02:14.549 --> 00:02:15.905
the user.prototype.

37
00:02:15.905 --> 00:02:19.410
We don't even do commas between
them you just list them off.

38
00:02:19.410 --> 00:02:22.196
&gt;&gt; And what's the first one say, Lindsey?

39
00:02:22.196 --> 00:02:23.072
&gt;&gt; Increment.

40
00:02:23.072 --> 00:02:27.769
&gt;&gt; Increment, which gets stored
automatically because this new syntax

41
00:02:27.769 --> 00:02:32.387
class says store it increment
in the user.prototype.increment.

42
00:02:32.387 --> 00:02:33.262
There it is.

43
00:02:33.262 --> 00:02:37.100
And then login gets stored,
user.prototype.login.

44
00:02:37.100 --> 00:02:38.790
And at the end of that block,

45
00:02:38.790 --> 00:02:43.581
you've achieved exactly the same thing
in practice as we did in solution three.

46
00:02:43.581 --> 00:02:46.258
But, it is a little bit
more like our python or

47
00:02:46.258 --> 00:02:51.191
other languages where we've listed all of
our functions that are gonna be shared by

48
00:02:51.191 --> 00:02:54.292
the resulting objects that
come from running user.

49
00:02:54.292 --> 00:02:55.730
But, it's all a mask.

50
00:02:55.730 --> 00:03:00.657
It's all a mask for how JavaScript's
actually working under the hood.

51
00:03:00.657 --> 00:03:05.017
Under the hood, it's doing all of this,
and it's important.

52
00:03:05.017 --> 00:03:08.409
There's levels of under
the hood we wanna reach.

53
00:03:08.409 --> 00:03:11.479
There's levels that we don't wanna reach.

54
00:03:11.479 --> 00:03:15.710
There's levels where we don't
need to go that deep because.

55
00:03:15.710 --> 00:03:19.539
Doing so doesn't help us write cleaner,
better code, easier to debug,

56
00:03:19.539 --> 00:03:20.466
more efficient.

57
00:03:20.466 --> 00:03:22.749
We just don't need to
know most of the time.

58
00:03:22.749 --> 00:03:24.475
This is a level we do need to know.

59
00:03:24.475 --> 00:03:27.006
if we don't realize that
when we are doing this.

60
00:03:27.006 --> 00:03:31.515
If we think when we come to JavaScript
coming from Python, that the is behaving

61
00:03:31.515 --> 00:03:35.531
the same as [SOUND] Python, we're gonna
get incredibly upset when we discover

62
00:03:35.531 --> 00:03:40.143
that, actually, under the hood We have
this prototype prototype property that

63
00:03:40.143 --> 00:03:45.118
has a bunch of shared function on it, and
that's actually where our functions are.

64
00:03:45.118 --> 00:03:49.813
We're gonna get very upset when we try and
understand what's happening inside

65
00:03:49.813 --> 00:03:53.315
the core to user with a new keyword,
and it's saying this.

66
00:03:53.315 --> 00:03:56.257
What is this,
it's this auto created object,

67
00:03:56.257 --> 00:03:58.359
well we want to change the product.

68
00:03:58.359 --> 00:03:59.450
How do we do that?

69
00:03:59.450 --> 00:04:04.280
&gt;&gt; None of it's going to work the way
we expect from other languages because

70
00:04:04.280 --> 00:04:07.131
it's wrapping up a prototypal language.

71
00:04:07.131 --> 00:04:09.744
Jobs are inherently a typal language.

72
00:04:09.744 --> 00:04:14.574
It does not behave in the typical
classical style that is known from other

73
00:04:14.574 --> 00:04:15.445
languages.

74
00:04:15.445 --> 00:04:18.057
And yet, we didn't know that I guess.

75
00:04:18.057 --> 00:04:18.927
Maybe we do?

76
00:04:18.927 --> 00:04:19.590
But now.

77
00:04:19.590 --> 00:04:24.020
Benefits, this approach,
this final version,

78
00:04:24.020 --> 00:04:28.450
this solution four emerging
as the new standard.

79
00:04:28.450 --> 00:04:33.617
Feels more like the sound of
other languages like Python.

80
00:04:33.617 --> 00:04:36.043
It emulates very closely.

81
00:04:36.043 --> 00:04:37.110
Problems.

82
00:04:37.110 --> 00:04:41.743
Not even 99%, 99.9% of developers
have no idea how it works, and

83
00:04:41.743 --> 00:04:47.124
that means it's hard to debug but its also
every senior, or every VP of engineering,

84
00:04:47.124 --> 00:04:51.389
every senior developer's favorite
itnerview question for mid and

85
00:04:51.389 --> 00:04:54.710
senir developers,
how is the new keyword working?

86
00:04:54.710 --> 00:04:59.708
Well, man, one of our favorite problems
is a set of codesmith in the first couple

87
00:04:59.708 --> 00:05:02.501
of weeks,
is rebuild the new keyword for us.

88
00:05:02.501 --> 00:05:03.825
We have everything.

89
00:05:03.825 --> 00:05:05.809
We can rebuild the new keyword.

90
00:05:05.809 --> 00:05:08.161
We wouldn't rebuild it that way, but

91
00:05:08.161 --> 00:05:13.190
we can create a function that achieves
the same as a new keyword, no problem now.

92
00:05:13.190 --> 00:05:16.366
Because we know every single piece.

93
00:05:16.366 --> 00:05:20.464
Solution two was just bundled up,
wrapped up,

94
00:05:20.464 --> 00:05:24.665
given some fancy automatons
by solution three,

95
00:05:24.665 --> 00:05:29.274
just automated bunch of,
got rid off bunch of stuff,

96
00:05:29.274 --> 00:05:33.290
automated it with a new keyword,
these it is.

97
00:05:33.290 --> 00:05:38.215
And then solution four said,
even that was too long winded.

98
00:05:38.215 --> 00:05:40.533
Let's make it even easier.

99
00:05:40.533 --> 00:05:44.590
Now, to find me a clause,
I'll put increment and

100
00:05:44.590 --> 00:05:48.358
login in the prototype
in user dot prototype.

101
00:05:48.358 --> 00:05:50.773
I'll put it in their for you.

102
00:05:50.773 --> 00:05:52.897
Just list them off there.

103
00:05:52.897 --> 00:05:54.475
I'll o it for you.

