WEBVTT

1
00:00:00.540 --> 00:00:04.604
&gt;&gt; Will Sentance: And we left off before
lunch encountering the premise that we

2
00:00:04.604 --> 00:00:07.877
could generalize our
functions by adding what?

3
00:00:07.877 --> 00:00:10.439
How do I generalize my function, Amin?
&gt;&gt; Amin: Parameters?

4
00:00:10.439 --> 00:00:11.405
&gt;&gt; Will Sentance: Parameters,

5
00:00:11.405 --> 00:00:17.050
I can parametize my functions,
that's where we left off before lunch.

6
00:00:17.050 --> 00:00:21.000
To allow us to determine the data
we wanna apply the functionality to

7
00:00:21.000 --> 00:00:22.600
when we call the function.

8
00:00:22.600 --> 00:00:27.425
And we said, who knows,
we may actually want to determine some of

9
00:00:27.425 --> 00:00:33.159
the functionality we want to apply to
our data only when we call our function.

10
00:00:33.159 --> 00:00:38.454
Here we go, we look at this function here,
copy an array and multiply by 2.

11
00:00:38.454 --> 00:00:41.660
We're gonna walk through our code here
with that same level of precision that we

12
00:00:41.660 --> 00:00:42.940
did before.

13
00:00:42.940 --> 00:00:45.569
And now it's gonna start
to get a little bit harder.

14
00:00:45.569 --> 00:00:49.279
Not dramatically, but a little bit
harder as we execute this code.

15
00:00:49.279 --> 00:00:53.763
This, though, is our penultimate function

16
00:00:53.763 --> 00:00:58.248
before we reach our
higher order functions.

17
00:00:58.248 --> 00:01:02.349
So Griffin, what a nice name, by the way.
&gt;&gt; Griffin: Thank you.

18
00:01:02.349 --> 00:01:04.208
&gt;&gt; Will Sentance: Like a Harry Potter

19
00:01:04.208 --> 00:01:07.227
house, all right, Griffin,

20
00:01:07.227 --> 00:01:12.137
what are we doing in line one, Griffin?
&gt;&gt; Griffin: We are saying

21
00:01:12.137 --> 00:01:15.695
that copyArray and
multiply by 2 is a function.

22
00:01:15.695 --> 00:01:20.809
And then we're saving all the text that
is that function into our global memory.

23
00:01:20.809 --> 00:01:21.859
&gt;&gt; Will Sentance: Yeah, exactly,

24
00:01:21.859 --> 00:01:23.400
that's very intuitive.

25
00:01:23.400 --> 00:01:27.390
I'm not gonna cut that, I think, but
just know, how would we say that formally?

26
00:01:27.390 --> 00:01:31.481
What's the formal way of saying we are
making a function, creating a function,

27
00:01:31.481 --> 00:01:33.239
what's the formal term for that?

28
00:01:33.239 --> 00:01:34.995
Two of them begin with d.
&gt;&gt; Griffin: Declare.

29
00:01:34.995 --> 00:01:36.562
&gt;&gt; Will Sentance: Declaring or defining,

30
00:01:36.562 --> 00:01:38.651
so we're declaring a function,

31
00:01:38.651 --> 00:01:42.170
which means just storing it
under that label in memory.

32
00:01:42.170 --> 00:01:45.660
We're declaring the funciton, so I don't
mind you left your intuitive description.

33
00:01:45.660 --> 00:01:51.258
We're storing it under the table,
copyArrayMultiply,

34
00:01:51.258 --> 00:01:57.311
I'm just shortening it slightly
just to make it easy to write,

35
00:01:57.311 --> 00:01:59.953
copyArrayMultiplyBy2.

36
00:01:59.953 --> 00:02:05.494
And just as Griffin said, it's our
entire function description definition.

37
00:02:05.494 --> 00:02:09.194
The whole, this is what I do,
stored in memory under that label.

38
00:02:09.194 --> 00:02:16.171
Okay, next line,
&gt;&gt; Will Sentance: Next line,

39
00:02:16.171 --> 00:02:21.027
Dave, what's the next line
that's gonna be called or

40
00:02:21.027 --> 00:02:26.148
gonna be run in this block of code?
&gt;&gt; Dave: The declaration of myArray?

41
00:02:26.148 --> 00:02:27.832
&gt;&gt; Will Sentance: Is he right, he is so

42
00:02:27.832 --> 00:02:28.628
spot on.

43
00:02:28.628 --> 00:02:34.040
What did you do there Dave, different
to what you might otherwise have done?

44
00:02:34.040 --> 00:02:38.005
Where did you not go for your, where did
JavaScript not go for its next line?

45
00:02:38.005 --> 00:02:39.283
&gt;&gt; Dave: The function's never called,

46
00:02:39.283 --> 00:02:40.204
so I-
&gt;&gt; Will Sentance: The function hadn't

47
00:02:40.204 --> 00:02:41.953
been called yet, so
we did not go inside the function.

48
00:02:41.953 --> 00:02:45.138
Dave, spot on, so tell me again,
what's the next line,

49
00:02:45.138 --> 00:02:47.751
sorry?
&gt;&gt; Dave: Makes an array called myArray

50
00:02:47.751 --> 00:02:50.664
that has those values in it.
&gt;&gt; Will Sentance: Good, and

51
00:02:50.664 --> 00:02:55.222
stores those values, perfect,
Dave, such precision,

52
00:02:55.222 --> 00:02:58.674
those values, 1, 2, 3, okay, good.

53
00:02:58.674 --> 00:03:02.792
Dave's like, god, I got through that line.

54
00:03:02.792 --> 00:03:05.449
All right, Dave, but don't panic,
when you do well, you get called on again.

55
00:03:05.449 --> 00:03:10.935
Dave, next line, what are you gonna do,
left-hand side first.

56
00:03:10.935 --> 00:03:13.694
So think very precise,
what's the left hand say, Dave?

57
00:03:13.694 --> 00:03:14.889
&gt;&gt; Dave: Let result.

58
00:03:14.889 --> 00:03:17.637
&gt;&gt; Will Sentance: Okay, what's that mean,

59
00:03:17.637 --> 00:03:21.345
just means create a label, result.

60
00:03:21.345 --> 00:03:29.835
Okay, now,
what is gonna be assigned to result?

61
00:03:29.835 --> 00:03:34.590
Andrea, go ahead, Andrea,
what's ultimately gonna be

62
00:03:34.590 --> 00:03:37.178
assigned to result?
&gt;&gt; Andrea: The function,

63
00:03:37.178 --> 00:03:40.263
copyArrayAndMultiply?
&gt;&gt; Will Sentance: Is it, what's actually

64
00:03:40.263 --> 00:03:43.139
gonna be assigned to result?
&gt;&gt; Andrea: Well, undefined.

65
00:03:43.139 --> 00:03:43.770
&gt;&gt; Will Sentance: Undefined,

66
00:03:43.770 --> 00:03:46.596
but it's not even ever gonna
be copyArrayMultiplyBy2.

67
00:03:46.596 --> 00:03:49.300
What do these parens on
the end tell us to do?

68
00:03:49.300 --> 00:03:55.180
They say,
take my function description, and

69
00:03:55.180 --> 00:03:59.530
go run my function description,
passing in this value

70
00:03:59.530 --> 00:04:04.630
to fill in my placeholder array
inside this function definition.

71
00:04:04.630 --> 00:04:09.910
So what's gonna be assigned
to result is the output.

72
00:04:09.910 --> 00:04:11.876
I can't do this with a cursor,
this is too annoying.

73
00:04:11.876 --> 00:04:15.483
It's gonna be assigned
the output of calling,

74
00:04:15.483 --> 00:04:21.087
copyArrayAndMultiplyBy2 with the input
of my array, the output of it.

75
00:04:21.087 --> 00:04:25.171
That whole block of code from
here to here, that whole block,

76
00:04:25.171 --> 00:04:28.392
that whole expression,
that whole statement,

77
00:04:28.392 --> 00:04:32.963
copyArrayAndMultiplyBy2 open parens,
myArray, close parens.

78
00:04:32.963 --> 00:04:37.133
That's gonna literally become
to JavaScript the output value,

79
00:04:37.133 --> 00:04:39.150
it's gonna evaluate down.

80
00:04:39.150 --> 00:04:42.120
Before we move on to
the next line in global,

81
00:04:42.120 --> 00:04:48.390
that block is gonna become the returned
value from running that function.

82
00:04:48.390 --> 00:04:50.953
And then that, yeah,
it's gonna be stored in result.

83
00:04:50.953 --> 00:04:54.570
So result does not care about
copyArrayAndMultiplyBy2,

84
00:04:54.570 --> 00:04:56.169
it does not care about it.

85
00:04:56.169 --> 00:04:57.692
It only cares about,

86
00:04:57.692 --> 00:05:02.783
what does that statement become once
it's been run with those parens?

87
00:05:02.783 --> 00:05:08.486
And just remind me, Matt, how do I
know I'm running that function there?

88
00:05:10.077 --> 00:05:13.202
&gt;&gt; Matt: I don't

89
00:05:13.202 --> 00:05:17.092
know.
&gt;&gt; Will Sentance: What symbols tell me I'm

90
00:05:17.092 --> 00:05:19.067
running a function, Amin?
&gt;&gt; Amin: Parentheses.

91
00:05:19.067 --> 00:05:20.155
&gt;&gt; Will Sentance: Parentheses,

92
00:05:20.155 --> 00:05:22.580
exactly, parens say, go run me,

93
00:05:22.580 --> 00:05:27.840
go look up my description in memory and
do me, do my code, run my code.

94
00:05:27.840 --> 00:05:31.754
Okay, all right, so
let's go run that code.

95
00:05:31.754 --> 00:05:36.396
In the global execution context, we're
still in the global execution context

96
00:05:36.396 --> 00:05:39.523
right now, but
now we hit this all-important line.

97
00:05:39.523 --> 00:05:46.148
Result is gonna be the return,
the output, the returned value,

98
00:05:46.148 --> 00:05:53.018
of calling this copyArrayMultiplyBy2
function with what input,

99
00:05:53.018 --> 00:05:58.543
Art?
&gt;&gt; Will Sentance: What's

100
00:05:58.543 --> 00:06:01.439
the input?
&gt;&gt; Group: The array?

101
00:06:01.439 --> 00:06:02.924
&gt;&gt; Will Sentance: Yeah, you can't see it

102
00:06:02.924 --> 00:06:04.047
from that angle.

103
00:06:04.047 --> 00:06:06.660
Forgive Art,
he can't quite see from that angle.

104
00:06:06.660 --> 00:06:09.876
What's being passed to
copyArrayAndMultiplyBy2?

105
00:06:09.876 --> 00:06:10.409
&gt;&gt; Art: myArray.

106
00:06:10.409 --> 00:06:11.901
&gt;&gt; Will Sentance: myArray,

107
00:06:11.901 --> 00:06:16.048
which is what value?
&gt;&gt; Art: 1, 2, 3.

108
00:06:16.048 --> 00:06:17.049
&gt;&gt; Will Sentance: 1, 2, 3, so

109
00:06:17.049 --> 00:06:21.084
we'll pass in 1, 2, 3, there it is,
and everyone together.

110
00:06:21.084 --> 00:06:24.914
We're calling a function,
we're executing a function,

111
00:06:24.914 --> 00:06:28.983
we create a brand new?
&gt;&gt; Group: Execution context.

112
00:06:28.983 --> 00:06:30.524
&gt;&gt; Will Sentance: Again, a brand new?

113
00:06:30.524 --> 00:06:32.676
&gt;&gt; Group: Execution context [LAUGH].

114
00:06:32.676 --> 00:06:34.903
&gt;&gt; Will Sentance: Good, there we go,

115
00:06:34.903 --> 00:06:39.760
a brand new execution context, here it is.

116
00:06:41.310 --> 00:06:43.640
And what's in an execution context,
I mean,

117
00:06:43.640 --> 00:06:50.267
what goes into an execution context?
&gt;&gt; Amin: Declarations for

118
00:06:50.267 --> 00:06:51.966
that function
&gt;&gt; Will Sentance: Okay, so

119
00:06:51.966 --> 00:06:57.050
all of our stuff that gets announced,
any variables, any functions.

120
00:06:57.050 --> 00:07:00.149
They're all gonna be
stored by name in this

121
00:07:00.149 --> 00:07:04.896
execution context in the local memory,
that's this side here.

122
00:07:04.896 --> 00:07:09.189
And we're gonna go through the code
line by line in the function on the left

123
00:07:09.189 --> 00:07:09.889
hand side.

124
00:07:09.889 --> 00:07:11.252
We're not gonna write it out line by line,
some of it,

125
00:07:11.252 --> 00:07:12.250
we might write out where it's useful.

126
00:07:12.250 --> 00:07:15.399
We're gonna go through the code
line by line on the left hand side.

127
00:07:15.399 --> 00:07:19.871
Okay, Art, first thing inside
copyArrayAndMultiplyBy2.

128
00:07:19.871 --> 00:07:22.660
What's the first thing we're
gonna put in our local memory?

129
00:07:22.660 --> 00:07:23.571
&gt;&gt; Art: The output array?

130
00:07:23.571 --> 00:07:24.585
&gt;&gt; Will Sentance: That's the second

131
00:07:24.585 --> 00:07:26.870
thing we're gonna do, isn't it?

132
00:07:26.870 --> 00:07:30.700
Output is declared as an empty array.

133
00:07:30.700 --> 00:07:33.135
What's the first thing we're gonna do,
Griffin?

134
00:07:33.135 --> 00:07:33.830
&gt;&gt; Griffin: We're gonna set

135
00:07:33.830 --> 00:07:35.513
the parameters.
&gt;&gt; Will Sentance: Does that make sense,

136
00:07:35.513 --> 00:07:36.624
Art?
&gt;&gt; Art: Yes.

137
00:07:36.624 --> 00:07:37.224
&gt;&gt; Will Sentance: So give it a shot,

138
00:07:37.224 --> 00:07:40.161
what's the first thing we're gonna do?
&gt;&gt; Art: Set that parameters to array.

139
00:07:40.161 --> 00:07:40.796
&gt;&gt; Will Sentance: Array, and

140
00:07:40.796 --> 00:07:43.573
array is assigned what?
&gt;&gt; Art: myArray.

141
00:07:43.573 --> 00:07:44.743
&gt;&gt; Will Sentance: myArray, which is?

142
00:07:44.743 --> 00:07:45.851
&gt;&gt; Art: 1, 2, 3.

143
00:07:45.851 --> 00:07:46.866
&gt;&gt; Will Sentance: 1, 2, 3, so

144
00:07:46.866 --> 00:07:51.888
now throughout the internals of this
function, wherever you see the word array,

145
00:07:51.888 --> 00:07:55.260
it is no longer hypothetical array,
what is it, Art?

146
00:07:55.260 --> 00:07:56.129
&gt;&gt; Art: 1, 2, 3.

147
00:07:56.129 --> 00:07:57.653
&gt;&gt; Will Sentance: 1, 2, 3, it is 1, 2, 3.

148
00:07:57.653 --> 00:08:00.678
Wherever you see that word array
inside this function call,

149
00:08:00.678 --> 00:08:04.000
cuz we're now running this
function with an actual value.

150
00:08:04.000 --> 00:08:08.016
Wherever you see the word array,
what's its value,

151
00:08:08.016 --> 00:08:08.612
Barb?
&gt;&gt; Barb: 1, 2,

152
00:08:08.612 --> 00:08:11.270
3.
&gt;&gt; Will Sentance: What's its value, Dave?

153
00:08:11.270 --> 00:08:12.102
&gt;&gt; Dave: 1, 2,

154
00:08:12.102 --> 00:08:12.980
3.
&gt;&gt; Will Sentance: Good,

155
00:08:12.980 --> 00:08:17.680
our parameter has taken on actual
value inside the function body.

156
00:08:17.680 --> 00:08:22.290
Okay, but we've created a new execution
context, and we've forgotten something.

157
00:08:22.290 --> 00:08:25.870
We've called a function, and
we're not keeping track of where we are.

158
00:08:25.870 --> 00:08:29.326
JavaScript, when it finishes running
this function, won't know where to go.

159
00:08:29.326 --> 00:08:32.580
We've gotta keep track of it,
what do we need to use?

160
00:08:32.580 --> 00:08:37.998
What special data structure do we need
to use to determine where we are,

161
00:08:37.998 --> 00:08:39.746
Mohammed?
&gt;&gt; Mohammed: Call stack.

162
00:08:39.746 --> 00:08:40.386
&gt;&gt; Will Sentance: Call stack,

163
00:08:40.386 --> 00:08:43.280
brilliant, exactly,
a gifted man over here.

164
00:08:43.280 --> 00:08:47.731
And what's the first thing, when we
start running any code in JavaScript, we

165
00:08:47.731 --> 00:08:51.229
instantly create what execution context?
&gt;&gt; Group: Global.

166
00:08:51.229 --> 00:08:52.333
&gt;&gt; Will Sentance: The global one, exactly,

167
00:08:52.333 --> 00:08:57.081
that's bottom of the call stack, good.
&gt;&gt; Will Sentance: We started running

168
00:08:57.081 --> 00:08:58.239
copyArrayMultiplyBy2.

169
00:08:58.239 --> 00:09:01.282
Mohammed, what do I do to my
call stack at this point?

170
00:09:01.282 --> 00:09:02.303
&gt;&gt; Mohammed: You push local

171
00:09:02.303 --> 00:09:04.659
copyArrayMultiplyBy2.
&gt;&gt; Will Sentance: Yeah,

172
00:09:04.659 --> 00:09:06.497
I push the execution context, or

173
00:09:06.497 --> 00:09:10.710
I push the call to copyArrayMultiplyBy2,
I push it to the call stack next.

174
00:09:10.710 --> 00:09:13.320
Yeah, absolutely, very good, Mohammed.

175
00:09:13.320 --> 00:09:16.870
There it is, multiply it by 2,
and now JavaScript checks,

176
00:09:16.870 --> 00:09:19.178
where am I, what's on the call stack?

177
00:09:19.178 --> 00:09:21.622
copyArrayMultiplyBy2, I've paused global,

178
00:09:21.622 --> 00:09:24.132
I'm not running any more
code in global right now.

179
00:09:24.132 --> 00:09:25.710
I'm not having two of these
running at the same time.

180
00:09:25.710 --> 00:09:28.650
This one's on hold until I
finish with this one here.

181
00:09:28.650 --> 00:09:30.230
I'm not running any code global,

182
00:09:30.230 --> 00:09:33.999
I've gotta finish what I'm doing inside
of the call to copyArrayMultiplyBy2.

183
00:09:33.999 --> 00:09:38.113
It's synchronous execution,
one thing at a time one after another,

184
00:09:38.113 --> 00:09:41.471
pausing any code running out
here until I finish in here.

185
00:09:41.471 --> 00:09:45.447
So in we go, we've done array is 1,
2, 3, output's empty array, and

186
00:09:45.447 --> 00:09:49.810
I'm actually gonna write these on
the left-hand side here as well.

187
00:09:49.810 --> 00:09:54.240
Not because, I know,
it just helps sort of to visualize.

188
00:09:54.240 --> 00:09:58.827
I'm not making copies, I'm just making,
it's like a little working area for

189
00:09:58.827 --> 00:10:00.685
us, output's an empty array.

190
00:10:00.685 --> 00:10:05.232
Okay, so at this point, Andrew,
I hit the body of the for loop,

191
00:10:05.232 --> 00:10:09.967
I'm hitting the inside of the for
loop, output.put, so forth.

192
00:10:09.967 --> 00:10:12.488
I don't to like to talk about for
loops in hypotheticals either.

193
00:10:12.488 --> 00:10:18.346
It's very tempting to go, we loop
through the array and take each element.

194
00:10:18.346 --> 00:10:22.842
That can get very confusing fast,
I like to say the zeroth time,

195
00:10:22.842 --> 00:10:24.516
the time when i is zero.

196
00:10:24.516 --> 00:10:29.052
The first time we hit the body of the for
loop, what is the value of i, zero.

197
00:10:29.052 --> 00:10:33.970
What is the value of array sub zero,
in other words, array at index zero?

198
00:10:33.970 --> 00:10:39.515
Well, that is 1, and then now we know
that 1, what are we gonna do to it?

199
00:10:39.515 --> 00:10:41.493
By 2, now that bit is evaluated,

200
00:10:41.493 --> 00:10:44.436
this portion is here is
evaluated to the number 2.

201
00:10:44.436 --> 00:10:45.800
And so forth, we're gonna do it that way.

202
00:10:45.800 --> 00:10:50.951
And that's gonna ensure we really
know how our for loop is executing.

203
00:10:50.951 --> 00:10:55.943
So into the for loop we go, into the for
loop we go, Lindsay, what is our

204
00:10:55.943 --> 00:11:00.854
value of i in the for loop, Lindsay?
&gt;&gt; Lindsay: One.

205
00:11:00.854 --> 00:11:01.435
&gt;&gt; Will Sentance: Value of i,

206
00:11:01.435 --> 00:11:04.263
the first time we said, let i equal zero.
&gt;&gt; Lindsay: Zero.

207
00:11:04.263 --> 00:11:05.849
&gt;&gt; Will Sentance: Zero, perfect,

208
00:11:05.849 --> 00:11:09.761
what is array 0, array square bracket 0,

209
00:11:09.761 --> 00:11:16.444
possibly known as array sub 0,
more typically, we say array at index 0.

210
00:11:16.444 --> 00:11:19.910
So what is array at index 0 at this point,
Lindsay?

211
00:11:19.910 --> 00:11:20.510
&gt;&gt; Lindsay: 1.

212
00:11:20.510 --> 00:11:23.474
&gt;&gt; Will Sentance: 1, spot on, Lindsay,

213
00:11:23.474 --> 00:11:27.581
very nice, 1, so index 0 is 1.

214
00:11:27.581 --> 00:11:30.536
And what do we do with that 1, Lindsay?
&gt;&gt; Lindsay: We multiply it by 2.

215
00:11:30.536 --> 00:11:31.802
&gt;&gt; Will Sentance: Multiply it by 2, and

216
00:11:31.802 --> 00:11:34.209
then what do we, that's evaluated to 2.

217
00:11:34.209 --> 00:11:37.818
That means this little portion here now,
this was 0,

218
00:11:37.818 --> 00:11:40.727
this together was 1, this together is 2.

219
00:11:40.727 --> 00:11:47.997
What do we do with that 2 now, Lindsay?
&gt;&gt; Lindsay: We push it into the output.

220
00:11:47.997 --> 00:11:48.940
&gt;&gt; Will Sentance: Perfect, there it is,

221
00:11:48.940 --> 00:11:51.453
good, but as the for loops,
we're gonna hit this line again.

222
00:11:51.453 --> 00:11:55.866
Which this time, Barb, this time,
Barb, what's the value?

223
00:11:55.866 --> 00:11:56.904
&gt;&gt; Barb: 1.

224
00:11:56.904 --> 00:11:57.449
&gt;&gt; Will Sentance: Good, yes,

225
00:11:57.449 --> 00:11:59.240
you got ahead of me, very good, it's 1.

226
00:11:59.240 --> 00:12:04.469
So we take the array sub 1,
which is the value 2,

227
00:12:04.469 --> 00:12:10.579
2 by 2, we get 4,
we push that 4 into our output array.

228
00:12:10.579 --> 00:12:14.724
Into our output array, and
than finally with our 3 and we get 6.

229
00:12:14.724 --> 00:12:18.458
Now we hit the all-important line,
Art, we finished our for loop.

230
00:12:18.458 --> 00:12:23.437
Just to be clear why we finished our for
loop, we finished it cuz now we've done 2,

231
00:12:23.437 --> 00:12:26.304
4, 6,
we've set our i is now of the value 2.

232
00:12:26.304 --> 00:12:29.194
Let's see if after we've
incremented it to 3,

233
00:12:29.194 --> 00:12:31.807
should we still run the body of the for
loop?

234
00:12:31.807 --> 00:12:36.924
Well, 3 is no longer less than
the length of the array, that was 3,

235
00:12:36.924 --> 00:12:41.355
so we just skip over the body of the for
loop and continue on.

236
00:12:41.355 --> 00:12:44.518
And so we hit what line, Art?
&gt;&gt; Art: Return output.

237
00:12:44.518 --> 00:12:45.270
&gt;&gt; Will Sentance: Return, so

238
00:12:45.270 --> 00:12:49.089
talk me through what happens there.
&gt;&gt; Art: So we're moving away from

239
00:12:49.089 --> 00:12:51.874
the local into the global.
&gt;&gt; Will Sentance: Yeah, so

240
00:12:51.874 --> 00:12:56.200
JavaScript sees return output.

241
00:12:56.200 --> 00:13:00.834
Be really clear, which side of this
does JavaScript return out, Mohammed,

242
00:13:00.834 --> 00:13:01.913
which side is it?

243
00:13:01.913 --> 00:13:02.778
The label output or

244
00:13:02.778 --> 00:13:05.482
the value associated with it?
&gt;&gt; Mohammed: The value associated with

245
00:13:05.482 --> 00:13:06.126
it.
&gt;&gt; Will Sentance: Yeah,

246
00:13:06.126 --> 00:13:09.174
JavaScript sees return output and
it goes, output.

247
00:13:09.174 --> 00:13:13.377
Well, I can't just pass out a word, a
label, I gotta go figure out what that is.

248
00:13:13.377 --> 00:13:16.056
So it goes and looks in memory,
let's be really clear.

249
00:13:16.056 --> 00:13:19.507
It goes and looks in memory and
says, what's output at?

250
00:13:19.507 --> 00:13:24.160
It's the value, variable, value,
variable, value, the value (2, 4,

251
00:13:24.160 --> 00:13:26.250
6), the array (2, 4, 6).

252
00:13:26.250 --> 00:13:30.861
Take that out, does that value have
a label, Mohammed, out here, globally?

253
00:13:30.861 --> 00:13:31.965
&gt;&gt; Mohammed: It does,

254
00:13:31.965 --> 00:13:33.345
it's-
&gt;&gt; Will Sentance: Does it get returned out

255
00:13:33.345 --> 00:13:34.508
with a label?
&gt;&gt; Mohammed: No.

256
00:13:34.508 --> 00:13:35.548
&gt;&gt; Will Sentance: No, you're just gonna

257
00:13:35.548 --> 00:13:36.539
return out the value.

258
00:13:36.539 --> 00:13:41.514
Out returns 2, 4, 6,
give me one second, return out 2,

259
00:13:41.514 --> 00:13:44.501
4, 6, and it's in the ether now.

260
00:13:44.501 --> 00:13:49.284
That means this portion of code here,
copyArrayMultiplyBy2 (1,

261
00:13:49.284 --> 00:13:53.314
2, 3) has evaluated to what, Mohammed?
&gt;&gt; Mohammed: 2, 4, 6.

262
00:13:53.314 --> 00:13:53.962
&gt;&gt; Will Sentance: 2, 4, 6,

263
00:13:53.962 --> 00:13:58.160
yeah, this little block has literally
become, to JavaScript's eyes, the 2, 4, 6.

264
00:13:58.160 --> 00:14:02.540
And now, it's out in the ether
unless we hold onto it somehow.

265
00:14:02.540 --> 00:14:05.940
How do we hold onto it, Mohammed?
&gt;&gt; Mohammed: We label it with

266
00:14:05.940 --> 00:14:06.903
the result.
&gt;&gt; Will Sentance: Exactly, and

267
00:14:06.903 --> 00:14:07.466
how do we assign it?

268
00:14:07.466 --> 00:14:10.676
We assign it to the variable, don't we?
&gt;&gt; Mohammed: A label, yeah.

269
00:14:10.676 --> 00:14:12.155
&gt;&gt; Will Sentance: Yeah, exactly,

270
00:14:12.155 --> 00:14:16.698
we assign it a label, and
that is result, there it is.

271
00:14:16.698 --> 00:14:20.499
Now in result, we have 2, 4, 6,

272
00:14:20.499 --> 00:14:25.484
call stack, what happened to it, Griffin?
&gt;&gt; Griffin: That

273
00:14:25.484 --> 00:14:29.466
copyArrayAndMultiplyBy2 got popped off.
&gt;&gt; Will Sentance: Got popped off,

274
00:14:29.466 --> 00:14:31.207
popped off, everybody.

275
00:14:31.207 --> 00:14:34.350
When we remove it from the stack,
it gets popped off.

276
00:14:34.350 --> 00:14:36.253
&gt;&gt; Griffin: Then we went back into

277
00:14:36.253 --> 00:14:37.959
the global.
&gt;&gt; Will Sentance: Because?

278
00:14:37.959 --> 00:14:38.988
&gt;&gt; Griffin: Cuz then that would now be

279
00:14:38.988 --> 00:14:41.689
the top of the call stack.
&gt;&gt; Will Sentance: Spot on, very good job,

280
00:14:41.689 --> 00:14:46.021
Griffin, yep, exactly right,
yep, and we're back in global.

281
00:14:46.021 --> 00:14:49.161
When you create a function
called copyArrayAndMultiplyBy2,

282
00:14:49.161 --> 00:14:52.601
it takes in an array, in this case,
1, 2, 3, could be anything.

283
00:14:52.601 --> 00:14:58.083
When we then call copyArrayMultiplyBy2
with that specific array, 1, 2, 3.

284
00:14:58.083 --> 00:15:02.245
We jump inside,
we've got a new empty output array.

285
00:15:02.245 --> 00:15:05.492
We got our 1, 2, 3, and
empty output array, brand new.

286
00:15:05.492 --> 00:15:10.094
We take each element of the input array,
multiply the element by 2, and

287
00:15:10.094 --> 00:15:13.970
push to the output array
that multiplied element.

288
00:15:13.970 --> 00:15:17.880
That new output array,
we then return out and

289
00:15:17.880 --> 00:15:21.260
store in global memory
under the label result.

