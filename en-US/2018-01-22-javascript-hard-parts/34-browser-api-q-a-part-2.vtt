WEBVTT

1
00:00:00.410 --> 00:00:04.130
&gt;&gt; Speaker 1: So I have a question about
using the time out function console

2
00:00:04.130 --> 00:00:06.836
log.
&gt;&gt; Will Sentance: When you were asked to

3
00:00:06.836 --> 00:00:11.790
setTimeout on a console log,
some of you passed the call to the console

4
00:00:11.790 --> 00:00:17.200
log built in function straight in,
instead of a function declaration.

5
00:00:17.200 --> 00:00:24.274
When I write this,
when I write console.log('hello'),

6
00:00:24.274 --> 00:00:27.484
is that storing a function?

7
00:00:27.484 --> 00:00:28.651
&gt;&gt; Speaker 3: No.
&gt;&gt; Will Sentance: Is that

8
00:00:28.651 --> 00:00:29.177
declaring a function?

9
00:00:29.177 --> 00:00:31.900
No, right?
It's saying do this immediately, right?

10
00:00:31.900 --> 00:00:33.296
It's saying, run this.

11
00:00:33.296 --> 00:00:38.099
So if I pass in a thing being called
into that place in which I should be

12
00:00:38.099 --> 00:00:40.790
passing a function definition.

13
00:00:40.790 --> 00:00:45.100
So I should be passing a function
definition in the setTimeout,

14
00:00:45.100 --> 00:00:46.380
what's gonna be passed down here?

15
00:00:46.380 --> 00:00:49.515
If I pass, though, a running of
a function, it's just gonna do it.

16
00:00:49.515 --> 00:00:52.028
And now that's gonna
evaluate to something,

17
00:00:52.028 --> 00:00:55.600
which will then be passed in here,
but that's no use to us.

18
00:00:55.600 --> 00:01:00.766
So if I pass an immediate invocation,
immediately running the function

19
00:01:00.766 --> 00:01:05.859
into my call to setTimeout, then yeah,
I'm gonna do it immediately.

20
00:01:05.859 --> 00:01:07.270
So it's gonna happen first.

21
00:01:07.270 --> 00:01:08.190
Does that make sense, everyone?

22
00:01:08.190 --> 00:01:11.390
If I were to,
instead of defining printHello

23
00:01:11.390 --> 00:01:15.590
as wrapping a printing of console
log Hello, console logging Hello.

24
00:01:15.590 --> 00:01:18.710
But instead just pass in
console log Hello, well,

25
00:01:18.710 --> 00:01:23.530
it's gonna do it immediately before
I even start doing setTimeout.

26
00:01:23.530 --> 00:01:25.670
It's got ahead of its
parameter being done.

27
00:01:25.670 --> 00:01:29.230
If it says invoke it, it's gonna do that
before I even start doing setTimeout.

28
00:01:29.230 --> 00:01:30.500
So it's gonna be immediate.

29
00:01:30.500 --> 00:01:32.660
Does that make sense as
to why that happened?

30
00:01:32.660 --> 00:01:34.380
Okay, because that happened
to Lindsay as well.

