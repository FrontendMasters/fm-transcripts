WEBVTT

1
00:00:00.000 --> 00:00:01.516
&gt;&gt; Will Sentance: Clarification,
throw it out there.

2
00:00:01.516 --> 00:00:02.748
Dave has one.

3
00:00:02.748 --> 00:00:05.779
Andrew, do you want to go?
&gt;&gt; Andrew: So if I were to take,

4
00:00:05.779 --> 00:00:11.897
after you say, let my new function equal
outer and then I say let my new function

5
00:00:11.897 --> 00:00:16.834
two equal my new function, would that be-
&gt;&gt; Will Sentance: They're both labels to

6
00:00:16.834 --> 00:00:20.316
the same function,
with the same backpack, yeah.

7
00:00:20.316 --> 00:00:21.766
And by the way, what about this cool one?

8
00:00:21.766 --> 00:00:26.859
What if I were to return out not
a function but an object for the methods?

9
00:00:26.859 --> 00:00:30.697
They all share the same
reference the same persistent

10
00:00:30.697 --> 00:00:35.478
local memory from where they were born,
very, very cool, okay.

11
00:00:35.478 --> 00:00:40.215
All right, I'm gonna leave it at that for
now, we're gonna come back together in

12
00:00:40.215 --> 00:00:44.886
about ten minutes after you've done some
pairings through these challenges and

13
00:00:44.886 --> 00:00:47.167
talk about what this empowers us to do.

14
00:00:47.167 --> 00:00:52.244
This allows us to have functions that
remember the previous time they were run.

15
00:00:52.244 --> 00:00:55.089
Functions aren't just functions
with some static text in them.

16
00:00:55.089 --> 00:01:00.720
Now, they're functions with some
static instructions to be run,

17
00:01:00.720 --> 00:01:04.489
and a persistent store
of data on their back.

18
00:01:04.489 --> 00:01:09.401
Before we do the actual I wanna add one
more thing, what if I had defined counter

19
00:01:09.401 --> 00:01:13.356
not here, not here, but
instead counter equals 0 globally?

20
00:01:13.356 --> 00:01:17.088
And I ran my new function, my new
function, other function, other function.

21
00:01:17.088 --> 00:01:20.946
Assign it globally,
what would I see at the end Andrea?

22
00:01:20.946 --> 00:01:21.946
&gt;&gt; Andrea: It would be four.

23
00:01:21.946 --> 00:01:22.514
&gt;&gt; Will Sentance: Four, one,

24
00:01:22.514 --> 00:01:23.450
two, three, four.

25
00:01:23.450 --> 00:01:28.870
Spot on, what if I define counter
inside of increment counter?

26
00:01:28.870 --> 00:01:32.440
So when I run my new function,
before I do counter plus plus,

27
00:01:32.440 --> 00:01:35.040
I do counter equals zero, counter is zero.

28
00:01:35.040 --> 00:01:37.872
What would I see then Katie,
if I ran my new function, my new function,

29
00:01:37.872 --> 00:01:40.180
my new function, my new function?
&gt;&gt; Katie: It would be one.

30
00:01:40.180 --> 00:01:41.420
&gt;&gt; Will Sentance: One, one, one, one,

31
00:01:41.420 --> 00:01:41.985
exactly.

32
00:01:41.985 --> 00:01:43.285
I'd never even reach my back,

33
00:01:43.285 --> 00:01:45.742
even if I define my backpack
version I never even reach it.

34
00:01:45.742 --> 00:01:49.750
As soon as JavaScript would hits it,
it's found a variable with that name,

35
00:01:49.750 --> 00:01:51.335
done as you go out the chain.

36
00:01:51.335 --> 00:01:55.157
All right, I wanna add that point,
for now folk, back to your pairing and

37
00:01:55.157 --> 00:01:58.745
in about ten minutes, we'll talk
about what this empowers us to do.

