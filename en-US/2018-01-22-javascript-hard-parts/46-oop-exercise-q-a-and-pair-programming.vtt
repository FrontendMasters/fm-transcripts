WEBVTT

1
00:00:00.000 --> 00:00:02.835
&gt;&gt; Will Sentance: We've achieved our goal,
though, or have we?

2
00:00:02.835 --> 00:00:07.825
We've achieved our basic goal that we've
bundled up our functions that can be

3
00:00:07.825 --> 00:00:12.069
used on the user data in one user object,
user1, user2, user.

4
00:00:12.069 --> 00:00:17.144
Who can see, though that while this
approach fundamentally solves our basic

5
00:00:17.144 --> 00:00:22.234
problem of is my functionality gonna be
available on my data, when I need it.

6
00:00:22.234 --> 00:00:24.258
Wherever I pass that user2 object,

7
00:00:24.258 --> 00:00:27.170
the functionality increment
is available on it.

8
00:00:27.170 --> 00:00:30.530
Wherever I pass a user1, by the way,
there could be 1,000 user objects.

9
00:00:30.530 --> 00:00:33.730
User 400, user 1,000,
there could be 1,000 functions.

10
00:00:34.820 --> 00:00:42.760
I can know safely in this model that
if I do user2002.displayavatar.

11
00:00:42.760 --> 00:00:45.385
Whatever of the hundreds of
function that use in this function,

12
00:00:45.385 --> 00:00:48.820
I'll know, don't worry, it will be there.

13
00:00:48.820 --> 00:00:52.180
So, I have achieved that goal which
we said is a fundamental goal.

14
00:00:52.180 --> 00:00:56.640
Anyone see any issue with this approach?

15
00:00:56.640 --> 00:00:57.170
Yeah, Dave.

16
00:00:59.140 --> 00:01:01.877
&gt;&gt; Dave: If you're gonna update
the functionality, you have to go and-

17
00:01:01.877 --> 00:01:02.986
&gt;&gt; Will Sentance: Yeah, that's a good one,

18
00:01:02.986 --> 00:01:04.102
that's a really good one.

19
00:01:04.102 --> 00:01:07.160
So maintenance of this is a bit of a pain,
right?

20
00:01:07.160 --> 00:01:13.080
Because I can't go adding to all my
user objects because I've already

21
00:01:13.080 --> 00:01:18.650
generated them, and they were created
inside of this individual function.

22
00:01:18.650 --> 00:01:19.900
Andrew, what do you see as a problem?

23
00:01:19.900 --> 00:01:21.120
&gt;&gt; Andrew: If you have thousands of users,

24
00:01:21.120 --> 00:01:23.520
you have to have different
variable names for everyone?

25
00:01:23.520 --> 00:01:26.055
&gt;&gt; Will Sentance: Okay, that's sort
of inherent cuz you're appointed

26
00:01:26.055 --> 00:01:27.000
different labels.

27
00:01:27.000 --> 00:01:29.290
Now can store them in an array or
something like that, but

28
00:01:29.290 --> 00:01:32.163
ultimately they're all gonna have
their own space for their own data.

29
00:01:32.163 --> 00:01:34.430
What do you think, Griffin?

30
00:01:34.430 --> 00:01:39.138
&gt;&gt; Griffin: Any functions that then would
call those user functions its sends it

31
00:01:39.138 --> 00:01:43.940
user1, it's not generic enough just
to be able to call it end user.

32
00:01:43.940 --> 00:01:46.110
You'd have to make it function for
each user.

33
00:01:46.110 --> 00:01:47.973
&gt;&gt; Will Sentance: You're getting so
close there, right?

34
00:01:47.973 --> 00:01:51.175
So you're saying something like this

35
00:01:51.175 --> 00:01:55.785
increment function is a new version for
every single.

36
00:01:55.785 --> 00:02:00.547
But the problem with that is not my
genericness, the problem with that is

37
00:02:00.547 --> 00:02:05.702
suppose I have 1000 functions that
are being declared inside of what I call

38
00:02:05.702 --> 00:02:10.860
user creator, get attached to the new
user and then get stored in user1.

39
00:02:10.860 --> 00:02:13.620
This is another brand new user object
with all those functions again.

40
00:02:13.620 --> 00:02:18.329
All my data is unique in each user, but
this functionality is increment function

41
00:02:18.329 --> 00:02:22.151
here, so doesn't need to be a brand
new version versus this one.

42
00:02:22.151 --> 00:02:27.203
What about over 1,000 functions each
one with 100 licence code in them and

43
00:02:27.203 --> 00:02:31.596
then a 1,000 users,
I'm getting a 1000 times by 100 times

44
00:02:31.596 --> 00:02:35.860
1,000 in the lines of code just
to describe the same functions.

45
00:02:35.860 --> 00:02:40.623
If I have a 1000 functions I wanna
be able to use on my users and

46
00:02:40.623 --> 00:02:45.400
I copy them across every single
user that's filling in memory.

47
00:02:45.400 --> 00:02:49.270
That's saying declare this function, store
in the user, this is an actual copy of

48
00:02:49.270 --> 00:02:52.163
the function increment that's
attached to the user object.

49
00:02:52.163 --> 00:02:55.463
If there's a 1000 of those functions,
and then on here,

50
00:02:55.463 --> 00:03:00.150
an actual brand new copy of that
function increment is actually user1.

51
00:03:00.150 --> 00:03:02.510
Griffin, is that gonna
be good on my memory?

52
00:03:02.510 --> 00:03:04.590
That is absolutely unusable.

53
00:03:05.670 --> 00:03:11.960
This approach may be simple, it's simple,
but it has a fundamental problem.

54
00:03:11.960 --> 00:03:16.548
Each time we create a new user,
we make space in our computers memory for

55
00:03:16.548 --> 00:03:17.473
all our data.

56
00:03:17.473 --> 00:03:21.590
And functions, data no problem,
yeah like name, will, score,

57
00:03:21.590 --> 00:03:26.312
three I've got a brand new space in
memory for name, will, score, three.

58
00:03:26.312 --> 00:03:27.779
Name, team, score, five.

59
00:03:27.779 --> 00:03:31.637
But my functions they are the same
on every single object user1,

60
00:03:31.637 --> 00:03:34.035
user2, user400, user1000.

61
00:03:34.035 --> 00:03:35.764
Why are they making copies?

62
00:03:35.764 --> 00:03:38.969
Our functions just copied,
is there a better way?

63
00:03:40.940 --> 00:03:45.510
We're gonna see, thank goodness,
there is a better way in JavaScript.

64
00:03:45.510 --> 00:03:51.760
But this at least is a very intuitive,
straightforward in some essence way.

65
00:03:51.760 --> 00:03:53.670
So, what is the better way?

66
00:03:53.670 --> 00:03:54.860
&gt;&gt; multiple: Classes.

67
00:03:54.860 --> 00:03:55.460
&gt;&gt; Student: Inheritance?

68
00:03:55.460 --> 00:03:59.680
&gt;&gt; Will Sentance: Inheritance, everyone's
shouting out words from the land of OP.

69
00:03:59.680 --> 00:04:02.090
Probably one of those words
are gonna be correct, maybe.

70
00:04:02.090 --> 00:04:04.669
One of those words are gonna be correct,
but how are they working.

71
00:04:04.669 --> 00:04:08.180
What we gonna do today is under
the hood how they're working.

72
00:04:08.180 --> 00:04:13.360
I wanna stress to all of you and online,
when I sit down with other senior

73
00:04:13.360 --> 00:04:19.230
engineers and say what questions do you
ask senior developers in interview?

74
00:04:19.230 --> 00:04:22.101
One of the classic questions and
there's a great core answer saying out,

75
00:04:22.101 --> 00:04:23.453
how can I spot a senior developer.

76
00:04:23.453 --> 00:04:29.095
I don't think it's necessarily a great way
to spot a senior JavaScript developer but

77
00:04:29.095 --> 00:04:34.343
the answer, the top voted answers is ask
them to rebuild how the new keywords and

78
00:04:34.343 --> 00:04:39.070
how classes which is one of the words
shouted out are actually working.

79
00:04:40.290 --> 00:04:43.970
We're gonna to see under the hood
how those are actually working.

80
00:04:43.970 --> 00:04:48.690
It is a classic senior developer for
JavaScript interview question.

81
00:04:48.690 --> 00:04:53.800
We're gonna go through it, we're gonna
build up the different ways of achieving

82
00:04:53.800 --> 00:04:59.990
this fundamental goal of calling our
functionality immediately on our data.

83
00:04:59.990 --> 00:05:05.229
But not being incredibly inefficient
with space like we have been here.

84
00:05:05.229 --> 00:05:10.687
That's our tension,
we're gonna resolve it today, all right.

85
00:05:10.687 --> 00:05:14.510
So at this point,
we're gonna get into pairs,

86
00:05:14.510 --> 00:05:18.630
after the pairing we're
gonna see how this works.

87
00:05:18.630 --> 00:05:21.469
What is our better way of achieving this,
but

88
00:05:21.469 --> 00:05:24.400
it lies on the other side of the pairing.

89
00:05:24.400 --> 00:05:28.690
For now folk, I think stay in
the same page we're in, we don't need

90
00:05:28.690 --> 00:05:33.340
to go through these go to csbin.io/oop
we'll get started on pairing on oop and

91
00:05:33.340 --> 00:05:36.870
we'll start to see afterwards,
how we can do it better.

92
00:05:36.870 --> 00:05:38.580
Everybody, to your pairs.

