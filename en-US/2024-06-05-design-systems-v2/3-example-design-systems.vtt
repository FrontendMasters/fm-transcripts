WEBVTT

1
00:00:00.000 --> 00:00:03.410
So we have a button,
we have a story for that button, but

2
00:00:03.410 --> 00:00:08.067
I wouldn't go as far to say that we have
even the inklings of a design system.

3
00:00:08.067 --> 00:00:12.349
We have verified that
HTML works at this point.

4
00:00:12.349 --> 00:00:17.671
And so now we wanna think about what
does the styling of a button look.

5
00:00:17.671 --> 00:00:24.656
And this is where we get a little bit into
the philosophy of design systems as well.

6
00:00:24.656 --> 00:00:29.070
Which is, I think the designers at
my company spend a lot of times when

7
00:00:29.070 --> 00:00:33.942
they think about the design system,
thinking about the design language and

8
00:00:33.942 --> 00:00:37.918
the visual consistency and
stuff along those lines, right?

9
00:00:37.918 --> 00:00:42.542
I am lucky enough to have a design
team these days, right in always.

10
00:00:42.542 --> 00:00:45.700
And so it means that I don't necessarily
have to think about these things as much.

11
00:00:45.700 --> 00:00:49.441
I have to think about the one,
how do we actually implement that?

12
00:00:49.441 --> 00:00:56.027
And then two, again, in the same way that
designers are thinking about the visual

13
00:00:56.027 --> 00:01:01.277
language for our users,
I as the leader of the engineering team,

14
00:01:01.277 --> 00:01:06.259
think about what is the maintainable
code base here, right?

15
00:01:06.259 --> 00:01:08.512
We have done a lot of back and forth and

16
00:01:08.512 --> 00:01:13.692
a lot of time of rethinking what are our
standards and rules for components, right?

17
00:01:13.692 --> 00:01:15.113
What are our best practices?

18
00:01:15.113 --> 00:01:20.039
When you grab a component, even in
our internal design system, any given

19
00:01:20.039 --> 00:01:25.213
person should basically be able to guess
how it works, and have a good sense.

20
00:01:25.213 --> 00:01:27.278
You don't need various different props for

21
00:01:27.278 --> 00:01:30.356
the menu button that has the drop-down
from the regular button.

22
00:01:30.356 --> 00:01:35.412
They shouldn't look different visually,
that's what design cares about and

23
00:01:35.412 --> 00:01:40.098
your API's shouldn't be different for
anyone in the engineering side.

24
00:01:40.098 --> 00:01:44.025
We deal with it in a very small level and
little startup, right,

25
00:01:44.025 --> 00:01:48.187
with a seven person engineering team and
a four person design team.

26
00:01:48.187 --> 00:01:52.181
But at a company like Twilio, where not
only did you have Twilio, right, but

27
00:01:52.181 --> 00:01:55.209
you had all of his acquisitions
along the way too, right?

28
00:01:55.209 --> 00:01:59.297
And so I worked at SendGrid, which Twilio
acquired, they later acquired segment, so

29
00:01:59.297 --> 00:02:00.081
on and so forth.

30
00:02:00.081 --> 00:02:04.094
So you didn't have one design language,
you had many design languages,

31
00:02:04.094 --> 00:02:05.852
but one design system, right?

32
00:02:05.852 --> 00:02:08.899
And then you could pass a theme to it,
right?

33
00:02:08.899 --> 00:02:11.913
I definitely will make
references to Twilio's paste,

34
00:02:11.913 --> 00:02:15.963
one point because I worked very closely
with that team for years and years.

35
00:02:15.963 --> 00:02:18.476
And then we'll also talk about
the one that I work on today.

36
00:02:18.476 --> 00:02:23.532
But there are lots of different
ways that various different design

37
00:02:23.532 --> 00:02:28.691
systems handle, what are the different
types of buttons as we saw?

38
00:02:28.691 --> 00:02:33.587
So one of the things I did for
us on the course website is I

39
00:02:33.587 --> 00:02:38.389
looked at the big ones,
the kinda very popular ones.

40
00:02:38.389 --> 00:02:42.697
So Microsoft's Fluent design system,
which if you use Visual Studio Code,

41
00:02:42.697 --> 00:02:44.495
you've seen, right, [LAUGH].

42
00:02:44.495 --> 00:02:45.875
That's what's in there.

43
00:02:45.875 --> 00:02:52.253
Atlassian's design system,
if you've used Jira, you've seen that one.

44
00:02:52.253 --> 00:02:58.726
IBM's Carbon design system, which I
don't use a lot of IBM products, but

45
00:02:58.726 --> 00:03:03.885
it is a very built out and
very kind of robust design system.

46
00:03:03.885 --> 00:03:08.652
And one thing that I will point out if
we kinda go into these design systems

47
00:03:08.652 --> 00:03:12.416
that you will see is,
this is IBM's design system.

48
00:03:12.416 --> 00:03:14.704
What's it using?

49
00:03:14.704 --> 00:03:17.704
What, does it look familiar to us, right?

50
00:03:17.704 --> 00:03:22.799
If I go into Microsoft's design system,
what's this one using?

51
00:03:22.799 --> 00:03:27.560
Right, the reason I linked all these
is cuz when in doubt, if you need

52
00:03:27.560 --> 00:03:32.829
inspiration of how to structure some
stuff, just steal the ideas, right?

53
00:03:32.829 --> 00:03:38.632
If I go into Twilio paste design system,
they have a site but

54
00:03:38.632 --> 00:03:42.588
this is just a themed storybook as well.

55
00:03:42.588 --> 00:03:46.099
And so storybook is
effectively the lingua franca,

56
00:03:46.099 --> 00:03:49.624
you can get some ideas of
how to handle stuff as well.

57
00:03:49.624 --> 00:03:53.505
But there's lots of different ways
of thinking about these buttons, and

58
00:03:53.505 --> 00:03:54.889
lots of different props.

59
00:03:54.889 --> 00:03:59.179
So you can look at, Microsoft Fluent has
an appearance prop for your primary or

60
00:03:59.179 --> 00:04:00.291
secondary button.

61
00:04:00.291 --> 00:04:05.835
Atlassian uses appearance, IBM uses a kind
property, but you can see this primary,

62
00:04:05.835 --> 00:04:10.924
secondary, danger, ghost, tertiary,
different flavors of that as well.

63
00:04:10.924 --> 00:04:12.918
GitHub uses variant, which is,

64
00:04:12.918 --> 00:04:17.921
unless somebody counter argues that we
should use appearance, well, I can do it.

65
00:04:17.921 --> 00:04:19.406
I'll deviate from the script.

66
00:04:19.406 --> 00:04:21.285
But variant is definitely
the most popular.

67
00:04:21.285 --> 00:04:23.715
Twilio's paste uses variant,

68
00:04:23.715 --> 00:04:28.395
shopify's Polaris system uses variant,
GitLabs pajamas.

69
00:04:28.395 --> 00:04:32.708
Side quest is your design system
needs a cool name by the way.

70
00:04:32.708 --> 00:04:36.266
Ours is called Holocene,
I forgot the reason for that.

71
00:04:36.266 --> 00:04:39.831
Adobe Spectrum, so
variant is the most popular one for

72
00:04:39.831 --> 00:04:44.261
these primary, secondary,
dangerous, ghost buttons, right?

73
00:04:44.261 --> 00:04:48.440
And so that's probably what
we're gonna stick with, right?

74
00:04:48.440 --> 00:04:51.076
And so we're gonna implement this idea,

75
00:04:51.076 --> 00:04:56.138
we're gonna start with a CSS module that
kinda just has some pre-written CSS.

76
00:04:56.138 --> 00:05:00.816
Later on we're gonna talk about
strategies for kind of taking what

77
00:05:00.816 --> 00:05:05.672
would be called design tokens on
the design level of a design system.

78
00:05:05.672 --> 00:05:07.875
Like what color is a primary button,

79
00:05:07.875 --> 00:05:11.508
what is the color spectrum that
we use in this design system?

80
00:05:11.508 --> 00:05:15.578
Because that is both important for
the designers to have a consistent visual

81
00:05:15.578 --> 00:05:20.094
design language, and it is also incredibly
important for you when you refactor, or

82
00:05:20.094 --> 00:05:23.987
for you when your designers change
the visual design language, right?

83
00:05:23.987 --> 00:05:28.453
And there's lots of cases
where that happens.

84
00:05:28.453 --> 00:05:32.893
For when I worked at Twilio,
their brand color is red, right?

85
00:05:32.893 --> 00:05:37.455
And so like most SaaS companies didn't
have a lot of designers early on, right?

86
00:05:37.455 --> 00:05:39.761
And so they thought their
primary buttons should be red.

87
00:05:39.761 --> 00:05:42.909
&gt;&gt; [LAUGH]
&gt;&gt; They're giggling already,

88
00:05:42.909 --> 00:05:44.642
says what the problem is here.

89
00:05:44.642 --> 00:05:48.026
Red means things,
red means dangerous, right?

90
00:05:48.026 --> 00:05:52.561
And so then there was this big,
this is when we're still kind of,

91
00:05:52.561 --> 00:05:56.197
in the initial kind of
phases of implementing pace.

92
00:05:56.197 --> 00:05:59.931
Okay, so then how do you across many,
many, many, many,

93
00:05:59.931 --> 00:06:04.730
many microfront ends change all the
buttons to red without a design system.

94
00:06:04.730 --> 00:06:06.833
Their code wasn't structured
that way originally, right?

95
00:06:06.833 --> 00:06:09.593
It is now, right, but
originally it wasn't, right?

96
00:06:09.593 --> 00:06:12.431
And so how do we also,
when we begin our design system,

97
00:06:12.431 --> 00:06:15.415
think about all of the things
that could happen, right?

98
00:06:15.415 --> 00:06:18.071
It could be everything from you
start out with a red button, right,

99
00:06:18.071 --> 00:06:20.276
which we were all smart enough
to giggle about, right?

100
00:06:20.276 --> 00:06:24.826
But there's also things like, your brand
color's blue, and then they announced

101
00:06:24.826 --> 00:06:28.865
the rebranding and now your brand
color is a more different blue, right?

102
00:06:28.865 --> 00:06:33.405
And what we wanna do is think about
as we implemented a design system,

103
00:06:33.405 --> 00:06:36.223
how to defensively structure our code, so

104
00:06:36.223 --> 00:06:41.233
that we have the ability to lie to our
bosses and say that we'll take weeks and

105
00:06:41.233 --> 00:06:45.647
then do it in 10 minutes and
then go stare at the sun or something.

106
00:06:45.647 --> 00:06:46.182
&gt;&gt; [LAUGH]
&gt;&gt; Cool, so

107
00:06:46.182 --> 00:06:50.067
we are gonna say the variant and we're
gonna start out with the CSS module and

108
00:06:50.067 --> 00:06:53.118
then we'll figure out how to
refactor that in a little bit.

109
00:06:53.118 --> 00:06:57.219
So like any of these, and
if you don't like variant, and

110
00:06:57.219 --> 00:07:02.015
there's reasons not to like variant
that we will discover later.

111
00:07:02.015 --> 00:07:05.550
If you wanna make a kind appearance,
that'll work as well, but

112
00:07:05.550 --> 00:07:08.560
these are the decisions that
you need to make as a team,

113
00:07:08.560 --> 00:07:11.123
because you know it's
the only wrong answer.

114
00:07:11.123 --> 00:07:13.596
Different components
using different props.

115
00:07:13.596 --> 00:07:17.703
So whatever makes you happy is if
you're like, Steve use variant because

116
00:07:17.703 --> 00:07:22.206
of a decision he made, because most of you
use variant early on, but I hate that,

117
00:07:22.206 --> 00:07:24.084
use appearance, I don't care.

118
00:07:24.084 --> 00:07:26.518
I'm not gonna say you have to use variant,
variant is not meaningful.

119
00:07:26.518 --> 00:07:29.077
There are lots of different options.

120
00:07:29.077 --> 00:07:34.124
A different option is to kind
of do this where you kind of,

121
00:07:34.124 --> 00:07:38.761
this is really a bullying for
primary or secondary.

122
00:07:38.761 --> 00:07:40.987
I love this aesthetically and

123
00:07:40.987 --> 00:07:46.333
I insist on this in the first design
system I tried to build in 2017.

124
00:07:46.333 --> 00:07:49.741
I personally ended up regretting it,
because one,

125
00:07:49.741 --> 00:07:54.553
you deal with this use case,
which TypeScript can save you from, right?

126
00:07:54.553 --> 00:07:59.294
Absolutely, but then also trying to pass
booleans around in code if you want to be

127
00:07:59.294 --> 00:08:02.500
kind of, if you do you wanna
use the spread operator and

128
00:08:02.500 --> 00:08:06.475
stuff like that, like actually
having strings and unions is just,

129
00:08:06.475 --> 00:08:08.941
I love the way this looks aesthetically.

130
00:08:08.941 --> 00:08:12.727
But I will tell you as somebody who has
built out an entire design system and

131
00:08:12.727 --> 00:08:15.550
SendGrid for this,
that I lived to regret it, right?

132
00:08:15.550 --> 00:08:19.384
I looked at a lot of things and
the first design system that I built,

133
00:08:19.384 --> 00:08:22.073
is a story that I'll
tell you some other time.

134
00:08:22.073 --> 00:08:25.385
So we're gonna go with the variant one and
we're gonna go ahead and

135
00:08:25.385 --> 00:08:26.877
just kind of implement that.

136
00:08:26.877 --> 00:08:31.058
And this will involve a little bit of
TypeScript, a little bit of storybook, and

137
00:08:31.058 --> 00:08:32.963
then a little bit of CSS modules, and

138
00:08:32.963 --> 00:08:35.631
we'll kind of refactor some
of that as we go along.

139
00:08:35.631 --> 00:08:38.923
In my design system, I'm gonna say
that I've got three primary ones.

140
00:08:38.923 --> 00:08:42.077
We also have what's called a ghost button,
and you might have

141
00:08:42.077 --> 00:08:45.731
seen that in some of the other design
systems that we scrolled through.

142
00:08:45.731 --> 00:08:49.160
A ghost button is basically a button
that doesn't look like a button, right?

143
00:08:49.160 --> 00:08:52.587
Later on in this workshop, we'll also
deal with the fact of the one of the most

144
00:08:52.587 --> 00:08:56.545
insidious things in web development, which
is, we all know there's two real buttons,

145
00:08:56.545 --> 00:08:59.433
there's buttons, and
there's links that look like buttons.

146
00:08:59.433 --> 00:08:59.947
Right, and

147
00:08:59.947 --> 00:09:03.348
ideally we'd like to keep a consistent
design language across both of those.

148
00:09:03.348 --> 00:09:05.079
So we'll look at a strategy for
dealing with that.

149
00:09:05.079 --> 00:09:09.091
But we're gonna be hand wavy over that for
a hot minute and get to it later.

