WEBVTT

1
00:00:00.020 --> 00:00:03.144
But now we get to the victory
lap portion of the show,

2
00:00:03.144 --> 00:00:07.901
which are little things where you're like,
yeah, Steve explained this super

3
00:00:07.901 --> 00:00:12.516
well because he's really great at what
he does and I'm excited to use this and

4
00:00:12.516 --> 00:00:17.760
I thought a little bit about the one or
two places that you will maybe hit a wall.

5
00:00:17.760 --> 00:00:23.084
And just to talk about them
a little bit so that you don't

6
00:00:23.084 --> 00:00:28.087
hit a wall because I am
a responsible practitioner.

7
00:00:28.087 --> 00:00:31.828
Theoretically, if we're
implementing a design system,

8
00:00:31.828 --> 00:00:35.418
all of our components ought
to be totally independent and

9
00:00:35.418 --> 00:00:40.350
not rely on any of the context and all
the things that we're supposed to do, and

10
00:00:40.350 --> 00:00:44.880
maybe if you're starting with
a greenfield project, you can do that.

11
00:00:44.880 --> 00:00:49.755
But if you're not, you might have things
that are expecting to be in a certain

12
00:00:49.755 --> 00:00:54.181
React or Svelte context,
I assume other frameworks have context, or

13
00:00:54.181 --> 00:00:57.638
do hit an API call or
something along those lines.

14
00:00:57.638 --> 00:00:59.008
What should you do?

15
00:00:59.008 --> 00:01:03.472
You should refactor those components to
use dependency injection where you pass in

16
00:01:03.472 --> 00:01:07.358
the fetch that we can pass in a mock,
because in the same story book test,

17
00:01:07.358 --> 00:01:11.208
you can get those mock functions and
you can make sure it was called.

18
00:01:11.208 --> 00:01:13.618
You should totally refactor all your code.

19
00:01:13.618 --> 00:01:14.528
Of course you should.

20
00:01:14.528 --> 00:01:16.259
You're not going to, [LAUGH] so

21
00:01:16.259 --> 00:01:19.398
let's talk about how to
navigate some of those things.

22
00:01:21.595 --> 00:01:29.405
There's a case of, we need something's
gonna be in the context API.

23
00:01:29.405 --> 00:01:35.755
There is or this is also similarly true
if we were going to not be realistic.

24
00:01:36.845 --> 00:01:43.070
I believe I have never, I managed to
just avoid the whole CSS and JS craze,

25
00:01:43.070 --> 00:01:48.092
but I have seen screenshots of
emotion code and I know that it

26
00:01:48.092 --> 00:01:54.566
involves some amount of a context
that wraps around the entire thing.

27
00:01:54.566 --> 00:01:57.902
Or if you're using Redux and there's just
something in there there's a time where

28
00:01:57.902 --> 00:02:00.108
you need to wrap that component
in some kind of parent.

29
00:02:01.168 --> 00:02:03.837
Could you use that render thing that we
saw in the very beginning of the workshop

30
00:02:03.837 --> 00:02:04.938
that you totally forgot about?

31
00:02:04.938 --> 00:02:09.048
Yes, but the component story
format is better to not.

32
00:02:09.048 --> 00:02:12.249
But if we do need to wrap a set of stories
in the context, we can do that, so

33
00:02:12.249 --> 00:02:14.098
let's look at what's involved in that.

34
00:02:14.098 --> 00:02:19.074
I have a component in here
that maybe is intentionally

35
00:02:19.074 --> 00:02:22.742
not involved in best practices.

36
00:02:22.742 --> 00:02:25.062
We've got this task list.

37
00:02:25.062 --> 00:02:25.832
It's a to-do app.

38
00:02:25.832 --> 00:02:30.992
What's a workshop unless somebody has
a to-do app at some point or another?

39
00:02:30.992 --> 00:02:33.962
And that's the task.

40
00:02:33.962 --> 00:02:38.930
There is, I do believe, yeah, it is,
it expects to have access to some task

41
00:02:38.930 --> 00:02:43.589
list context, or some Emotion, CSS,
and JS, I've just like I said,

42
00:02:43.589 --> 00:02:49.315
never used CSS and JS and was not going to
like learn it just for this one example.

43
00:02:49.315 --> 00:02:56.909
But anything where there's something that
their component expects to have access to,

44
00:02:56.909 --> 00:03:01.524
and by itself as you pull it in,
if I were to go ahead and

45
00:03:01.524 --> 00:03:06.880
pull in some of the stories in here,
this will break, right?

46
00:03:06.880 --> 00:03:11.241
Because you're gonna find out that
useContext, it couldn't get the structure

47
00:03:11.241 --> 00:03:15.809
of the property because there's no, it's
not inside of a tasks context provider.

48
00:03:15.809 --> 00:03:20.229
Could have been Emotion, could have
been anything, it doesn't really matter.

49
00:03:20.229 --> 00:03:24.774
It's the first example
I could come up with.

50
00:03:24.774 --> 00:03:27.739
And so we want to put it
inside of a context, right?

51
00:03:27.739 --> 00:03:33.368
We accidentally saw how to do this

52
00:03:33.368 --> 00:03:39.113
earlier when we did the theming.

53
00:03:39.113 --> 00:03:43.416
Theoretically, because my light and
dark mode theme in the way that I have it

54
00:03:43.416 --> 00:03:47.193
implemented in Tailwind,
it was just a CSS selector.

55
00:03:47.193 --> 00:03:52.154
All that theme add-on is
doing is it's wrapping

56
00:03:52.154 --> 00:03:56.223
it in a div with that CSS selector.

57
00:03:56.223 --> 00:04:01.118
And if we can wrap our stories in
a div with the right CSS selector,

58
00:04:01.118 --> 00:04:07.861
one would posit that we could also wrap
the stories in a context provider, right?

59
00:04:07.861 --> 00:04:09.571
Seems to make sense.

60
00:04:09.571 --> 00:04:13.916
This is in preview.js because I always
want to be able to switch into dark mode.

61
00:04:13.916 --> 00:04:16.462
Only my task list needs that provider, so

62
00:04:16.462 --> 00:04:20.119
I can actually go down a level
into the stories themselves.

63
00:04:20.119 --> 00:04:24.723
Cool, and so what we can do here is,

64
00:04:24.723 --> 00:04:27.946
where is that task list,

65
00:04:27.946 --> 00:04:34.550
alphabetical order is
a thing in the stories.

66
00:04:34.550 --> 00:04:37.530
We can also add what is called
a decorator in here as well.

67
00:04:37.530 --> 00:04:41.968
And all a decorator does is it wraps and
hugs your story.

68
00:04:41.968 --> 00:04:43.882
And at this point, before we wrapped and

69
00:04:43.882 --> 00:04:47.537
hugged it in a parent element that had
a dark mode class on it, or in this case,

70
00:04:47.537 --> 00:04:51.168
data attribute, and now we're gonna
wrap and hug it in a context provider.

71
00:04:53.178 --> 00:04:55.496
So we can do decorators.

72
00:04:57.689 --> 00:05:02.292
That is an array because you could
have more than one, they go in order,

73
00:05:02.292 --> 00:05:06.357
I think all the way from preview,
then to meta, then to story,

74
00:05:06.357 --> 00:05:09.453
but then in order in that array as well.

75
00:05:09.453 --> 00:05:14.633
And they are just a function that
takes technically two arguments.

76
00:05:14.633 --> 00:05:18.762
It takes a story and a context which is
more metadata than you ever thought you

77
00:05:18.762 --> 00:05:20.515
needed to know about the story.

78
00:05:20.515 --> 00:05:24.997
That's the args, the arg types, the name
of the stories, what component, everything

79
00:05:24.997 --> 00:05:29.365
you can console log it later if you want
or console log it now, I don't care.

80
00:05:29.365 --> 00:05:34.345
And you can go ahead and basically we'll

81
00:05:34.345 --> 00:05:38.894
start with the autofilled example.

82
00:05:38.894 --> 00:05:40.541
This wraps in a div.

83
00:05:40.541 --> 00:05:43.038
I don't need a div,
I need a context provider.

84
00:05:43.038 --> 00:05:47.350
But you know what,
let's console log it just to see real,

85
00:05:47.350 --> 00:05:52.018
I'll show you everything
in context real quick.

86
00:05:52.018 --> 00:05:55.108
It's still going to blow up on this one,
so maybe we do it right.

87
00:05:55.108 --> 00:06:00.524
I was like, we go see, but I don't know
if it runs if the entire thing still

88
00:06:00.524 --> 00:06:07.029
explodes, we don't have a context, so that
ad hoc decision maybe isn't the best one.

89
00:06:07.029 --> 00:06:12.380
But we've got in TaskListProvider,
we do export this task list constant,

90
00:06:12.380 --> 00:06:16.992
we do export this TaskListProvider,
so we can just pull that in.

91
00:06:16.992 --> 00:06:22.757
So we say import { TaskListProvider } and

92
00:06:22.757 --> 00:06:26.931
then through the magic of React

93
00:06:35.388 --> 00:06:36.936
Provider.

94
00:06:36.936 --> 00:06:38.401
I'll talk about that in a second.

95
00:06:38.401 --> 00:06:41.078
I'm just gonna say that tasks

96
00:06:45.924 --> 00:06:51.683
Equals Yeah, perfect.

97
00:06:51.683 --> 00:06:54.143
Now we have a provider
that takes some tasks, and

98
00:06:54.143 --> 00:06:57.983
if we go back to the story, look,
it works now because we are now wrapped in

99
00:06:57.983 --> 00:07:00.943
the context that we ought
to have been wrapped in.

100
00:07:00.943 --> 00:07:05.916
And every story, if we add more of them,
will also work, and I will add this one to

101
00:07:05.916 --> 00:07:10.451
the live coding branch because if one
wanted a practice session of writing

102
00:07:10.451 --> 00:07:14.840
a bunch of those tests to make sure it
works, this is a great place to go do

103
00:07:14.840 --> 00:07:19.008
that because there are buttons to hit and
there are various labels,

104
00:07:19.008 --> 00:07:24.166
there's input fields, there's buttons
that are disabled that turned enabled.

105
00:07:24.166 --> 00:07:27.595
You could, this is kind of,
we start with a very little button,

106
00:07:27.595 --> 00:07:29.575
we work up higher and higher levels.

107
00:07:29.575 --> 00:07:31.498
This is a fully component that works.

108
00:07:32.538 --> 00:07:35.148
We use a provider in this case,
let's console log that.

109
00:07:36.878 --> 00:07:41.804
Context now, again, it could be,
look, we did already,

110
00:07:41.804 --> 00:07:44.572
it could be your theme provider.

111
00:07:44.572 --> 00:07:46.525
I have never used the context
of the theme, but

112
00:07:46.525 --> 00:07:48.539
I know every example
I've ever seen does that.

113
00:07:48.539 --> 00:07:50.139
I use Tailwind, so whatever.

114
00:07:50.139 --> 00:07:55.676
We go to the console,
and we get this object.

115
00:07:57.659 --> 00:08:02.088
And this is all of
the things we have in there.

116
00:08:02.088 --> 00:08:05.614
We have all the args that it got,
in this case, none of them,

117
00:08:05.614 --> 00:08:10.041
the canvas element that we saw in those
play tests that we wrapped around, so

118
00:08:10.041 --> 00:08:11.721
now you can see what that is.

119
00:08:11.721 --> 00:08:16.717
So we can look at this context object,
we didn't pass any args to that

120
00:08:16.717 --> 00:08:20.607
primary story, but if we did,
they would be in here.

121
00:08:20.607 --> 00:08:24.916
You can see the canvas element,
which we saw in our play tests,

122
00:08:24.916 --> 00:08:28.980
the ID of the component,
which is what's in the URL up top,

123
00:08:28.980 --> 00:08:33.724
like the kind, the name,
more things than you ever wanted, right?

124
00:08:33.724 --> 00:08:38.324
But it's all in here, and you have access,
so if there are other fun things that you

125
00:08:38.324 --> 00:08:41.432
seek to do, you have access
to it in the context object.

