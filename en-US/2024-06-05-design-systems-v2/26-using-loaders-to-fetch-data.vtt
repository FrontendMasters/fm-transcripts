WEBVTT

1
00:00:00.240 --> 00:00:01.935
What's the second wall
that we might run into?

2
00:00:03.744 --> 00:00:08.529
What if you have a component and
some of have a good reason,

3
00:00:08.529 --> 00:00:12.446
maybe or maybe not,
that calls an API, right?

4
00:00:12.446 --> 00:00:18.766
Or needed some data, or
expected to have some data from an API.

5
00:00:18.766 --> 00:00:23.010
I joked that you shouldn't do this and
we do it on purpose.

6
00:00:23.010 --> 00:00:28.114
I think I mentioned during the break for
our website CMS, we use Contentful, right?

7
00:00:28.114 --> 00:00:33.584
Which is all our blog posts,
all of the copy on our website because I

8
00:00:33.584 --> 00:00:39.459
got tired of tickets saying can you
change the wording of this heading?

9
00:00:39.459 --> 00:00:44.009
Nobody on the product marketing
team wants to ask me to do that and

10
00:00:44.009 --> 00:00:47.901
nobody on the engineering
team wants to do it, right?

11
00:00:47.901 --> 00:00:50.737
And so right now everyone
go into Contentful, but,

12
00:00:50.737 --> 00:00:54.992
sometimes if someone's working on a new
page or something along those lines,

13
00:00:54.992 --> 00:00:58.407
you can actually see the components
with a given blog posts with

14
00:00:58.407 --> 00:01:00.944
a given card with
whatever you're changing.

15
00:01:00.944 --> 00:01:05.303
So we actually do have it hit
the API in certain situations for

16
00:01:05.303 --> 00:01:11.287
the process of our friends in marketing to
being able to see stuff in the storybook,

17
00:01:11.287 --> 00:01:15.320
I think designers as well,
to see it with real content.

18
00:01:15.320 --> 00:01:18.873
They'll have it in their Figma design, but
then sometimes you wanna see it with some

19
00:01:18.873 --> 00:01:21.242
real things, so
we'll have that in storybook as well.

20
00:01:21.242 --> 00:01:23.830
So I lied, we do do it on purpose.

21
00:01:23.830 --> 00:01:25.531
Ross did it, he's the best.

22
00:01:25.531 --> 00:01:27.958
That is the concept of a loader, right?

23
00:01:27.958 --> 00:01:31.078
A loader runs before the story.

24
00:01:31.078 --> 00:01:34.562
I was like, I was going to try to
try to explain what a loader is, but

25
00:01:34.562 --> 00:01:36.630
I can't explain it without the words.

26
00:01:36.630 --> 00:01:40.292
It loads [LAUGH] data.

27
00:01:40.292 --> 00:01:43.819
Also, API, sure, sure, sure, that's great.

28
00:01:43.819 --> 00:01:49.580
A place where I considered using
it is the application I work

29
00:01:49.580 --> 00:01:55.586
on is the dashboard for
distributed system tooling, right?

30
00:01:55.586 --> 00:02:01.006
Sometimes I just want to read fixture
data off the file system, right?

31
00:02:01.006 --> 00:02:05.732
I have a whole bunch of cached API
requests that are just JSON files, and so

32
00:02:05.732 --> 00:02:09.162
I could theoretically be
able to run through, okay,

33
00:02:09.162 --> 00:02:13.659
now show it with this kind of event,
this kind of weird situation, and

34
00:02:13.659 --> 00:02:16.581
that fixture, and stuff along those lines.

35
00:02:16.581 --> 00:02:20.049
That is an issue, that is area where it is
on the roadmap, for like next month or so

36
00:02:20.049 --> 00:02:21.783
we have not done it yet, I'll tell you,

37
00:02:21.783 --> 00:02:23.937
it's a good idea next time
we'll talk to you all.

38
00:02:23.937 --> 00:02:25.567
But that's the plan.

39
00:02:25.567 --> 00:02:29.204
And so this would work
the exact same way as well.

40
00:02:29.204 --> 00:02:35.163
So here we'll say loaders,
and that is an array as well.

41
00:02:35.163 --> 00:02:40.053
Sure it could just be an array that I
pass through, that seems fine, I guess.

42
00:02:40.053 --> 00:02:44.543
Let's actually do this instead.

43
00:02:44.543 --> 00:02:46.700
We're gonna make it a function.

44
00:02:46.700 --> 00:02:52.633
And, let's say const

45
00:02:52.633 --> 00:02:58.571
tasks = await fetch.

46
00:02:58.571 --> 00:03:01.931
This is just a, I mean,
the URL tells you what it is, right?

47
00:03:01.931 --> 00:03:06.747
It's a fake API that happens to have
tasks that are exactly the same

48
00:03:06.747 --> 00:03:08.126
as what is in here.

49
00:03:08.126 --> 00:03:12.065
It's almost like I did it intentionally,
return tasks, right?

50
00:03:12.065 --> 00:03:17.528
And so I do think I need to
parse the response to JSON now.

51
00:03:17.528 --> 00:03:18.347
Then,

52
00:03:25.366 --> 00:03:33.475
Response.json, And
then we'll pass that through.

53
00:03:33.475 --> 00:03:39.247
And then, in our context, It is,

54
00:03:42.677 --> 00:03:48.214
context.loaded.tasks.

55
00:03:48.214 --> 00:03:55.401
This API gives me 200,
I could slice it, not going to.

56
00:03:55.401 --> 00:04:02.088
So now you can see that it hit the API,
as well and that's super great.

57
00:04:02.088 --> 00:04:06.240
The thing that you can do
is there's both an add-on,

58
00:04:08.153 --> 00:04:12.245
But this is also outside of really what
we're supposed to talk about today, so

59
00:04:12.245 --> 00:04:16.343
I'll just kinda make a mention to it,
something called Mock Service Worker.

60
00:04:16.343 --> 00:04:18.089
This is great for local development too.

61
00:04:18.089 --> 00:04:23.203
It basically, you installed it in
development, and it uses a service worker

62
00:04:23.203 --> 00:04:28.256
to intercept all of your API calls and
just respond to them locally, right?

63
00:04:28.256 --> 00:04:32.678
So if you, and this is great when we, for
a given component in a design system,

64
00:04:32.678 --> 00:04:34.420
maybe not that important, but

65
00:04:34.420 --> 00:04:39.050
if you're testing entire pages, entire
things that have a lot going on, right?

66
00:04:39.050 --> 00:04:42.830
It can theoretically, and we use this
in development, right, storybook aside,

67
00:04:42.830 --> 00:04:46.286
which is like, I don't use it that much
cuz I work in an open source project,

68
00:04:46.286 --> 00:04:47.966
which you can just run on your files.

69
00:04:47.966 --> 00:04:52.462
I have a CLI,
I can actually run my product locally.

70
00:04:52.462 --> 00:04:55.748
In past lives,
it's a little bit more important, but

71
00:04:55.748 --> 00:04:59.677
you can actually just have it
intercept all of the API requests and

72
00:04:59.677 --> 00:05:02.833
give you back mock data and
stuff along those lines.

73
00:05:02.833 --> 00:05:05.247
And it's great for
developing it on an airplane and

74
00:05:05.247 --> 00:05:08.462
stuff along those lines because you
hate to see that stuff not work.

75
00:05:08.462 --> 00:05:10.169
And you can kind of turn it off and
turn it on.

76
00:05:10.169 --> 00:05:14.990
So you can, if it is calling a real API
and you don't want that for some reason,

77
00:05:14.990 --> 00:05:19.612
because nobody wants to see their test
fail because the backend went down.

78
00:05:21.516 --> 00:05:23.131
Everyone's nodding because it happens.

79
00:05:23.131 --> 00:05:24.418
Why are my tests failing?

80
00:05:24.418 --> 00:05:26.534
Because of you.

81
00:05:26.534 --> 00:05:28.521
And so this is a way to kind of
do that in both in development.

82
00:05:28.521 --> 00:05:31.348
It's also great for
like loading up a bunch of like, again,

83
00:05:31.348 --> 00:05:34.675
I need to load up a whole bunch of
different, fictitious states based on

84
00:05:34.675 --> 00:05:37.909
every bug report that we've ever gotten,
stuff along those lines.

85
00:05:37.909 --> 00:05:40.115
But, kind of to summarize and

86
00:05:40.115 --> 00:05:45.243
there are some plugins that one can
look at, they're not that cool.

87
00:05:45.243 --> 00:05:47.375
Storybook and figment and
figment storybook,

88
00:05:47.375 --> 00:05:49.298
do you want to get lucky
guess what they do?

89
00:05:49.298 --> 00:05:53.997
Nothing more than show
you one inside the other.

90
00:05:53.997 --> 00:05:57.932
They seem really cool, I think I used them
once and then like, I can just open up two

91
00:05:57.932 --> 00:06:01.322
windows it's fine rather than try
to connect them all, all the time.

