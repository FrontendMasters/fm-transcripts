WEBVTT

1
00:00:00.000 --> 00:00:04.490
Okay, so what we're gonna do
is like start to think about

2
00:00:04.490 --> 00:00:07.305
this idea of a variant in this case.

3
00:00:07.305 --> 00:00:12.232
And so that starts on my end with a little
bit of type script to make sure that

4
00:00:12.232 --> 00:00:15.095
we are actually getting what we think, and

5
00:00:15.095 --> 00:00:18.377
I stop clicking on the badge in this case,
okay?

6
00:00:18.377 --> 00:00:23.741
So, in React and typescript, I can kind
of create a type for the button props.

7
00:00:23.741 --> 00:00:27.241
I'll say type ButtonProps.

8
00:00:27.241 --> 00:00:31.686
And let's go ahead, and what I usually
choose to do and the reason that I like

9
00:00:31.686 --> 00:00:36.219
the kind of passing a string in is that
you can kind of just create a union type.

10
00:00:36.219 --> 00:00:40.619
So for us, we're going to say we've got,
not dangerous,

11
00:00:40.619 --> 00:00:45.463
let's go with destructive,
I think what I promise to do, cool?

12
00:00:45.463 --> 00:00:50.073
And so we've got this type,
you don't have to export the type.

13
00:00:50.073 --> 00:00:54.533
I choose to export the type so that if I
wanna have higher order components later

14
00:00:54.533 --> 00:00:57.842
on that kind of then take some
of the same props as a button,

15
00:00:57.842 --> 00:00:59.411
I have access to that type.

16
00:00:59.411 --> 00:01:03.254
That's the decision you can make,
you could not make as well.

17
00:01:03.254 --> 00:01:07.625
And so then we actually say
that it's ButtonProps, and

18
00:01:07.625 --> 00:01:12.467
this is gonna break, as you can see,
but there's children.

19
00:01:12.467 --> 00:01:17.255
And when we think about the lowest
level of our design system, right?

20
00:01:17.255 --> 00:01:20.250
We're basically creating
stylistic wrappers and

21
00:01:20.250 --> 00:01:24.434
sometimes convenience wrappers
over basic HTML components, right?

22
00:01:24.434 --> 00:01:28.887
And what we don't wanna have to do is
re implement HTML and all of the specs.

23
00:01:28.887 --> 00:01:35.851
What I don't wanna have to do is, I don't
wanna have to say className is a string.

24
00:01:35.851 --> 00:01:40.816
And one can look at the MDN docs to
see how many things you would have

25
00:01:40.816 --> 00:01:44.706
to do particularly with input fields,
all right?

26
00:01:44.706 --> 00:01:47.995
Sometimes you want to actually
say maybe you can't pass checked,

27
00:01:47.995 --> 00:01:51.884
because they're all like, you can take
any prop you want to in an input field.

28
00:01:51.884 --> 00:01:55.173
You might choose to get
a little bit more nuanced, but

29
00:01:55.173 --> 00:01:59.704
as the kind of lowest level of our design
system when we go to implement it,

30
00:01:59.704 --> 00:02:03.012
we wanna say like yes,
this is a superset of a button.

31
00:02:03.012 --> 00:02:07.538
This is a button that takes all the normal
HTML props that a button takes, right?

32
00:02:07.538 --> 00:02:14.694
ID, className, what have you ARIA,
labels, so on and so forth, right?

33
00:02:14.694 --> 00:02:18.923
And then also these additional
things that I use as well.

34
00:02:18.923 --> 00:02:22.833
And every framework has
some ways of doing this.

35
00:02:22.833 --> 00:02:26.033
One of the reasons I chose react for
this workshop is that,

36
00:02:26.033 --> 00:02:29.821
like reacts is actually for all
the smack that I can talk about react on

37
00:02:29.821 --> 00:02:32.522
a given day has a pretty
decent way of doing this.

38
00:02:32.522 --> 00:02:36.062
Where we can say component type, or

39
00:02:36.062 --> 00:02:41.964
component props rather,
no I think it's component type.

40
00:02:41.964 --> 00:02:45.851
Nop, it's component props,
that good old IntelliSense works.

41
00:02:45.851 --> 00:02:49.110
And so you can pass it just
the name of the HTML tag.

42
00:02:49.110 --> 00:02:54.741
So this will actually reference all of
the HTML props that a button takes.

43
00:02:54.741 --> 00:02:59.281
So we're saying everything
that a button takes, right.

44
00:02:59.281 --> 00:03:02.425
And also this new idea of a variant.

45
00:03:02.425 --> 00:03:06.319
And that's really, like I said, you can
use appearance, you can use variant,

46
00:03:06.319 --> 00:03:07.185
you can use kind.

47
00:03:07.185 --> 00:03:09.370
The only thing that you've
got to think about is,

48
00:03:09.370 --> 00:03:12.295
what's now gonna conflict with
what's already in HTML, right?

49
00:03:12.295 --> 00:03:17.367
So, like, ID is a bad idea,
[LAUGH] but generally speaking,

50
00:03:17.367 --> 00:03:21.749
and then also you gotta
think about reserved words.

51
00:03:21.749 --> 00:03:28.721
And stuff like type can get
a little dicey as well.

52
00:03:28.721 --> 00:03:31.245
So now you can see that we
don't have an error anymore.

53
00:03:31.245 --> 00:03:37.192
And this now takes everything that
a button takes plus this new special one.

54
00:03:37.192 --> 00:03:42.443
And generally speaking JSX,
like React, Svelte, Ember types are,

55
00:03:42.443 --> 00:03:47.170
like HTML will take literally
any attribute and not complain.

56
00:03:47.170 --> 00:03:51.489
So variant is currently getting
passed into this component, and

57
00:03:51.489 --> 00:03:54.407
we don't have an error because it's fine.

58
00:03:54.407 --> 00:03:57.949
We will kind of intercept
that in a second.

59
00:03:57.949 --> 00:04:04.125
So yes, we gonna take a look just to
save us from writing too much CSS,

60
00:04:04.125 --> 00:04:09.784
I started us out with some basic
CSS that we can use here as well.

61
00:04:09.784 --> 00:04:15.523
You can grab a version of the CSS
as well from the course webpage.

62
00:04:15.523 --> 00:04:19.014
So let's go grab that and pass it in.

63
00:04:19.014 --> 00:04:22.488
Undoing the design system
add one little thing.

64
00:04:22.488 --> 00:04:25.514
So here's our CSS and
we'll kind of paste it in.

65
00:04:25.514 --> 00:04:29.733
Again, lots of little things in here
as well to make it all nice and

66
00:04:29.733 --> 00:04:31.277
match along with that.

67
00:04:31.277 --> 00:04:36.064
But what I want to draw your attention
to is we've got some of the basics of

68
00:04:36.064 --> 00:04:40.396
a button in this case,
that background colour so on and so forth.

69
00:04:40.396 --> 00:04:45.718
And then in here,
we also have the idea of the secondary

70
00:04:45.718 --> 00:04:50.116
button which is just
a few little overrides,

71
00:04:50.116 --> 00:04:54.415
colors along with the destructive colors.

72
00:04:54.415 --> 00:05:00.060
And if I wanted to have the ghost one as
well, that is all here that we can use.

73
00:05:00.060 --> 00:05:05.213
Neat, so we're gonna grab that.

74
00:05:05.213 --> 00:05:07.136
We'll paste it in here.

75
00:05:07.136 --> 00:05:11.475
And we've got this in place, and
now we want to pull this in.

76
00:05:11.475 --> 00:05:15.407
Now, one of the things I'm going to deal
with real quick is that past Steve and

77
00:05:15.407 --> 00:05:18.082
current Steve have a different
philosophy on this.

78
00:05:18.082 --> 00:05:23.870
And so I've got the regular button
I'm calling this button-secondary.

79
00:05:23.870 --> 00:05:28.536
I'm actually gonna keep them as
just secondary and destructive.

80
00:05:28.536 --> 00:05:30.998
I'm using CSS modules, so
I know that they're scoped.

81
00:05:30.998 --> 00:05:37.245
If this was just in a global CSS file,
you would want more whether or

82
00:05:37.245 --> 00:05:40.938
not it's full on BemO or CSS whatever.

83
00:05:40.938 --> 00:05:46.306
There's probably lots of secondary things,
lots of disabled things,

84
00:05:46.306 --> 00:05:49.826
lots of dangerous things
in your application,

85
00:05:49.826 --> 00:05:54.143
but I don't have to deal with
that in this CSS module here.

86
00:05:54.143 --> 00:05:59.125
So we've got the CSS and
now what we can do is, and this is like,

87
00:05:59.125 --> 00:06:04.773
you get this for free in Vite, I think
you get it for free in Webpack too.

88
00:06:04.773 --> 00:06:10.903
Most modern things have
some way of importing CSS.

89
00:06:10.903 --> 00:06:13.823
So I'm going to import styles and
yeah, under the hood Vite or

90
00:06:13.823 --> 00:06:17.252
Webpack or what have you is actually
turning into a JavaScript object and

91
00:06:17.252 --> 00:06:19.464
it's hashing the classes and
all that stuff.

92
00:06:19.464 --> 00:06:22.130
But that's a different story for
a different day,

93
00:06:22.130 --> 00:06:23.743
what we have are these styles.

94
00:06:23.743 --> 00:06:29.092
So now I can pass in className, and

95
00:06:29.092 --> 00:06:34.638
I can say styles.button, right?

96
00:06:34.638 --> 00:06:38.716
And I should see, look, my button
started looking like a button, right?

97
00:06:38.716 --> 00:06:41.574
Like we're doing the thing, and
we've got the secondary button, and

98
00:06:41.574 --> 00:06:43.292
it doesn't look like a secondary button.

99
00:06:43.292 --> 00:06:45.096
So we've got to deal with
that in a moment, right?

100
00:06:45.096 --> 00:06:48.425
But we have the concept of some
button that looks like a button.

101
00:06:48.425 --> 00:06:49.765
We're killing it.

102
00:06:49.765 --> 00:06:54.725
And so we've got that in place, now we
need to think about the variants, right?

103
00:06:54.725 --> 00:06:58.402
And we know that's a prop
that's being passed in.

104
00:06:58.402 --> 00:07:01.894
So we can actually say,
what I'll do a lot of times in this case,

105
00:07:01.894 --> 00:07:04.370
is I'll do a little bit
destructuring here.

106
00:07:04.370 --> 00:07:09.180
Again, mostly framework agnostic, it
might be args and another one where we'll

107
00:07:09.180 --> 00:07:13.725
take all the props, but I want my variant
and IntelliSense helps us out here.

108
00:07:13.725 --> 00:07:16.990
So now the props is going
to be everything, but

109
00:07:16.990 --> 00:07:19.604
variant, we've got that in place.

110
00:07:19.604 --> 00:07:22.825
So what I can do is I can start like
we'll refactor this in a second.

111
00:07:22.825 --> 00:07:27.748
I'll show you some really useful utility
libraries that will make this a lot easier

112
00:07:27.748 --> 00:07:28.323
for you.

113
00:07:28.323 --> 00:07:31.740
But let's just do it the kind of most
straightforward way because yeah,

114
00:07:31.740 --> 00:07:34.606
it's one of those things which
is like you might not need it.

115
00:07:34.606 --> 00:07:43.132
So we'll say that let className
equal that styles.button.

116
00:07:43.132 --> 00:07:49.067
And I have one screen right now
because I'm plugged in here.

117
00:07:49.067 --> 00:07:53.390
But what I will typically
do is I will have the main

118
00:07:53.390 --> 00:07:58.143
screen as my editor or
even a larger 27 inch screen.

119
00:07:58.143 --> 00:08:02.318
I will have storybook right next to this
and like hot module reloading is a thing.

120
00:08:02.318 --> 00:08:05.073
And you don't have to worry about
the entire page or scrolling or

121
00:08:05.073 --> 00:08:06.358
anything along those lines.

122
00:08:06.358 --> 00:08:11.589
So, the important thing that you should
see here is nothing has changed.

123
00:08:11.589 --> 00:08:14.665
However, we go into controls,
this is pretty cool.

124
00:08:14.665 --> 00:08:17.664
Not only did it add the control for
variant,

125
00:08:17.664 --> 00:08:20.919
which is not mentioned in
any of my stories yet.

126
00:08:20.919 --> 00:08:24.443
It will be, but
it's not mentioned in any of my stories.

127
00:08:24.443 --> 00:08:29.801
But it knew my three variants, right?

128
00:08:29.801 --> 00:08:31.878
And this is like what I
was talking about before.

129
00:08:31.878 --> 00:08:37.146
One of the reasons why, even if you don't
use TypeScript in your larger Codebase,

130
00:08:37.146 --> 00:08:41.224
you might consider it for
the design system portion of the show.

131
00:08:41.224 --> 00:08:43.464
That said, if one wanted to write JS Doc,

132
00:08:43.464 --> 00:08:46.920
which I do a lot these days because
I realized that I don't always

133
00:08:46.920 --> 00:08:50.248
want to compile Typescript to JavaScript,
particularly for

134
00:08:50.248 --> 00:08:54.152
scripts and stuff like that that run
in CICD and stuff along those lines.

135
00:08:54.152 --> 00:08:57.776
You can also write JS Doc,
it's just a little bit more verbose.

136
00:08:57.776 --> 00:08:59.936
Both will work.

137
00:08:59.936 --> 00:09:04.311
The nice part about writing JS Doc is you
can run it like a JavaScript file on node

138
00:09:04.311 --> 00:09:07.979
and you can still have TypeScript
check it, which is super cool.

139
00:09:07.979 --> 00:09:12.762
But we'll just use TypeScript, but the
fact of the matter is that React Doc Gen

140
00:09:12.762 --> 00:09:17.111
went through the file and was able to
figure out roughly what the options

141
00:09:17.111 --> 00:09:20.617
were and automatically populate
the control with that.

142
00:09:20.617 --> 00:09:22.178
Now, can it do it for all the things?

143
00:09:22.178 --> 00:09:26.019
It cannot, and sometimes we'll learn
how to give it hints later, but

144
00:09:26.019 --> 00:09:27.656
we've got the basis in here.

145
00:09:27.656 --> 00:09:32.372
So then we want to say, well,

146
00:09:32.372 --> 00:09:37.095
if the variant is secondary.

147
00:09:37.095 --> 00:09:39.146
Again, Tele Sense is my friend here.

148
00:09:39.146 --> 00:09:44.112
We'll say that the className,
and we'll just append a space and

149
00:09:44.112 --> 00:09:46.012
say style-secondary.

150
00:09:46.012 --> 00:09:48.072
You can make an array and
join them all at the end.

151
00:09:48.072 --> 00:09:52.031
Whatever makes you happy is I'm going to
replace this with library in a hot minute.

152
00:09:52.031 --> 00:09:56.523
So we'll say variant destructive, then
add the className of destructive, right?

153
00:09:56.523 --> 00:10:01.429
So now, if one was developing,
is it primary, is it secondary,

154
00:10:01.429 --> 00:10:06.350
we can see that we have all the variants
of the button in this case.

155
00:10:06.350 --> 00:10:09.417
So I'm gonna do the first one and
I'm gonna cut you loose for a second and

156
00:10:09.417 --> 00:10:11.892
I will make a branch and
push it up so you can follow along.

157
00:10:11.892 --> 00:10:16.397
But I am gonna do the first one here where
I actually set the variant in this case

158
00:10:16.397 --> 00:10:19.791
now, mine has kind of set that
if you don't say a variant,

159
00:10:19.791 --> 00:10:22.662
like the initial styles
are the primary button.

160
00:10:22.662 --> 00:10:27.976
But let's go take a look at what that
looks like in our storybook now.

161
00:10:27.976 --> 00:10:32.955
So I could say something like args.

162
00:10:32.955 --> 00:10:37.253
I can say that the variant
here is primary.

163
00:10:37.253 --> 00:10:39.641
And I can go down here, and

164
00:10:39.641 --> 00:10:45.517
say that the variant here is secondary and
get all that in place.

165
00:10:45.517 --> 00:10:49.498
And now if we go to the stories, we can
see that we've got the primary button,

166
00:10:49.498 --> 00:10:51.288
we've got the secondary button.

167
00:10:51.288 --> 00:10:54.458
And if you pay attention to
the controls on the right pane,

168
00:10:54.458 --> 00:10:57.447
you can see that it has like
filled in the stuff for you.

169
00:10:57.447 --> 00:11:01.076
You can always go ahead and change this
and see it all live and in real time.

170
00:11:01.076 --> 00:11:04.952
This is for me, I'm gonna make a hard
pitch on why this is important for

171
00:11:04.952 --> 00:11:08.701
testing accessibility audits and
all those things, but I just want

172
00:11:08.701 --> 00:11:13.171
to sell you on the initial fact that as
a development experience, taking each and

173
00:11:13.171 --> 00:11:17.643
every little component, even if you don't
quote unquote have a design system,

174
00:11:17.643 --> 00:11:20.175
you're just building components, right?

175
00:11:20.175 --> 00:11:25.122
Things that are not even reusable, we will
break out into various things as well.

176
00:11:25.122 --> 00:11:27.892
And we'll see with all the various
tools up in here and a hot minute,

177
00:11:27.892 --> 00:11:28.725
we'll take a look.

178
00:11:28.725 --> 00:11:32.235
But what I would like to have you
do right now, is just go ahead and

179
00:11:32.235 --> 00:11:33.797
add the destructive story.

180
00:11:33.797 --> 00:11:38.353
&gt;&gt; What's your thought process regarding
I will create a separate story versus,

181
00:11:38.353 --> 00:11:40.465
I will let the user use the controls.

182
00:11:40.465 --> 00:11:43.252
&gt;&gt; Yes.
&gt;&gt; If we have five props with six values

183
00:11:43.252 --> 00:11:45.940
for each prop, it becomes 30 stories.

184
00:11:45.940 --> 00:11:46.440
&gt;&gt; Yeah.

185
00:11:47.490 --> 00:11:53.157
So yeah, the question is, at what point do
we have one story and we click around and

186
00:11:53.157 --> 00:11:59.023
stuff along those lines, and it will
point do we have a ton of stuff Stories.

187
00:11:59.023 --> 00:12:04.006
And so one of the heuristics that I use
in my thought process around that is

188
00:12:04.006 --> 00:12:08.991
later on, we're going to see
the ability to write like, effectively,

189
00:12:08.991 --> 00:12:11.383
like integration tests, right?

190
00:12:11.383 --> 00:12:14.421
Like, we wanna write a test that
then types into this field.

191
00:12:14.421 --> 00:12:17.303
Well, by definition,
that's got to be a story.

192
00:12:17.303 --> 00:12:19.577
Visual regression tests,
that's got to be its own story.

193
00:12:19.577 --> 00:12:23.317
So it's like,
do I want to test this thing, right?

194
00:12:23.317 --> 00:12:28.027
Is my like heuristic for
whether or not I write a story.

195
00:12:28.027 --> 00:12:31.585
And I have found that on
one hand in the beginning,

196
00:12:31.585 --> 00:12:36.951
I was like somewhat conservative about
the number of stories that I wrote.

197
00:12:36.951 --> 00:12:40.578
And I did realize the stories arefree,
they don't really cost me anything.

198
00:12:40.578 --> 00:12:43.159
Yeah, there's some like
visual clutter there.

199
00:12:43.159 --> 00:12:46.251
But the main heuristic that I use is,
because like actually,

200
00:12:46.251 --> 00:12:50.116
if I wanted to see a secondary button go
in here and clicking on it every time and

201
00:12:50.116 --> 00:12:51.937
yes, it is stored in the URL.

202
00:12:51.937 --> 00:12:53.982
And you could theoretically
like if I refresh,

203
00:12:53.982 --> 00:12:56.517
it was all staying there
while I'm developing.

204
00:12:56.517 --> 00:12:59.857
But like, if I want to have
a visual regression test, or

205
00:12:59.857 --> 00:13:02.642
if I wanna write
an accessibility audit test.

206
00:13:02.642 --> 00:13:05.639
If I want to test it in any
way in automatic fashion,

207
00:13:05.639 --> 00:13:08.096
then I want it to be its own story, right?

208
00:13:08.096 --> 00:13:12.915
I might not like for some of the little
tiny little things like will I write

209
00:13:12.915 --> 00:13:17.023
one for when you've got the idea
of like a button with an icon,

210
00:13:17.023 --> 00:13:21.769
I'll probably have story that is
button with icon will I write a story?

211
00:13:21.769 --> 00:13:26.225
If I have a whole bunch of stories to
the icons, I got the buttons, right?

212
00:13:26.225 --> 00:13:28.012
We'll see this later on like,

213
00:13:28.012 --> 00:13:31.812
we're going to do the various of
button than we do sizes, right?

214
00:13:31.812 --> 00:13:35.327
Already if you take primary,
secondary destructive small,

215
00:13:35.327 --> 00:13:39.595
medium large up to nine, you add in
the ghost, you're up to 12, right?

216
00:13:39.595 --> 00:13:41.919
So on and so forth, right?

217
00:13:41.919 --> 00:13:45.868
You add an icons and
then you double all that, you up to 24.

218
00:13:45.868 --> 00:13:50.296
What I will normally do is
I'll probably have a story for

219
00:13:50.296 --> 00:13:54.644
my primary, my secondary and
my destructive button.

220
00:13:54.644 --> 00:13:57.474
Maybe one for those in the disabled state,
because I might

221
00:13:57.474 --> 00:14:00.725
not see that you can't click on it or
something along those lines.

222
00:14:00.725 --> 00:14:04.955
And then I'll have a story for
a small, medium, and

223
00:14:04.955 --> 00:14:09.292
large button, but
while I do destructive and large?

224
00:14:09.292 --> 00:14:14.329
No, because generally speaking, I feel
like I know how that's going to play out.

225
00:14:14.329 --> 00:14:18.764
If I have one for a destructive button and
I have one for a large button.

226
00:14:18.764 --> 00:14:22.035
I don't until I get burned by it one time,
then I add a story.

227
00:14:22.035 --> 00:14:25.049
It's the same way you add a unit
test when you find a bug or

228
00:14:25.049 --> 00:14:26.726
something along those lines.

229
00:14:26.726 --> 00:14:29.904
So I kind of like,
do I need to like run a,

230
00:14:29.904 --> 00:14:33.287
I got on a May test is my heuristic,
right?

231
00:14:33.287 --> 00:14:35.797
And then did I deal with a bug
around this, is my other one.

