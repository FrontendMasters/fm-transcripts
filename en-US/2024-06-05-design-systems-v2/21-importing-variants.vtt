WEBVTT

1
00:00:00.000 --> 00:00:03.532
So we got a question before,
which is, we made a select for

2
00:00:03.532 --> 00:00:08.145
the various call out variants, and
there was a question of, I use an array of

3
00:00:08.145 --> 00:00:12.498
the ones that are in there, but
I'm already getting my types for free.

4
00:00:12.498 --> 00:00:15.489
Couldn't I get those values for free?

5
00:00:15.489 --> 00:00:19.060
And this is a trick that I use
not just in design system,

6
00:00:19.060 --> 00:00:23.968
e-storybook key things but a trick that
I use all throughout my code base.

7
00:00:23.968 --> 00:00:27.988
I use it a lot with types you know
we're gonna get the types from CVA but

8
00:00:27.988 --> 00:00:30.010
I'll show you the general trick.

9
00:00:30.010 --> 00:00:34.174
And we can kind of all these fun little
extra components you can look at and

10
00:00:34.174 --> 00:00:36.165
play with at some various points.

11
00:00:36.165 --> 00:00:43.477
Sue, yeah, it was call out variants, the
big, yeah, what I could do is write this,

12
00:00:43.477 --> 00:00:49.894
I don't have access to this object
because it's just passed in directly.

13
00:00:49.894 --> 00:00:54.794
But one could if one needed like types,
the types I can use, but

14
00:00:54.794 --> 00:01:00.085
I don't have a way to like,
get my hands on the actual keys, right?

15
00:01:00.085 --> 00:01:04.535
And so a trick that I will do
is you can just grab this,

16
00:01:06.277 --> 00:01:11.516
Right, and you can say,
Let's just call it variant.

17
00:01:11.516 --> 00:01:13.955
Again, naming stuff is hard.

18
00:01:15.640 --> 00:01:20.188
And we could export that wholesale,

19
00:01:22.721 --> 00:01:27.059
And then we can just basically instead of
typing it in there and having a kind of

20
00:01:27.059 --> 00:01:31.218
hard code is not the right word,
it's now a value that we're passing in.

21
00:01:31.218 --> 00:01:32.036
Same code.

22
00:01:32.036 --> 00:01:36.436
But now, we can get our hands on this,
so we could say something like,

23
00:01:40.439 --> 00:01:43.362
I'm not thinking about naming things,
I will do this, but

24
00:01:43.362 --> 00:01:46.239
I'm not gonna think about
the naming portion of the show.

25
00:01:48.838 --> 00:01:50.654
Object keys.

26
00:01:53.403 --> 00:01:56.145
You can't use an oncon on something
you didn't type directly.

27
00:01:56.145 --> 00:02:01.324
So this is now a list of strings,
but it is our variations,

28
00:02:01.324 --> 00:02:05.362
now various variations, you like that one?

29
00:02:05.362 --> 00:02:07.982
So now we could pass that
into the select options.

30
00:02:07.982 --> 00:02:12.968
Let's say I had something where
the type was something like this and

31
00:02:12.968 --> 00:02:17.257
this is designed since otherwise like,
this is cool, but

32
00:02:17.257 --> 00:02:21.214
I can't access this,
I couldn't pass this type in.

33
00:02:21.214 --> 00:02:24.156
I can't derive a JavaScript
object from a type,

34
00:02:24.156 --> 00:02:27.242
because that's not the value
prop of type script,

35
00:02:27.242 --> 00:02:32.438
it's a superset over JavaScript, right,
and I can't do magical things like that.

36
00:02:32.438 --> 00:02:36.552
So what I will do a lot of times if I both
want to use it as a set of values, and

37
00:02:36.552 --> 00:02:40.219
then also need as a type,
I will handle this in the opposite way.

38
00:02:40.219 --> 00:02:48.879
So what I'll do is I'll say,
I didn't use that somewhere else, did I?

39
00:02:48.879 --> 00:02:52.735
Did I call something else variations,
whatever.

40
00:02:52.735 --> 00:02:57.629
And what I would do is I'll
turn this to an array instead,

41
00:02:59.592 --> 00:03:04.266
And Now just like this,

42
00:03:04.266 --> 00:03:08.338
it is, I can't read the correct blocks,
where's the other one?

43
00:03:10.097 --> 00:03:11.621
Goodbye.

44
00:03:11.621 --> 00:03:13.094
Problem solved.

45
00:03:13.094 --> 00:03:16.473
If I look at it right now it is
technically an array of strings.

46
00:03:16.473 --> 00:03:22.807
Gross as const now makes it
an array of primary information,

47
00:03:22.807 --> 00:03:26.421
success, danger, and warning.

48
00:03:26.421 --> 00:03:33.806
And so what I'll do then is I'll say
type variations is based on that,

49
00:03:33.806 --> 00:03:39.204
and so now I can derive my
union type from the array.

50
00:03:39.204 --> 00:03:43.025
So now I can issue iterate over it as
values, right, and do all sorts of stuff

51
00:03:43.025 --> 00:03:46.938
with the actual values of the type, but
still get it as a type at the same time.

52
00:03:46.938 --> 00:03:51.150
I do this all throughout my code base,
cuz a lot of times I need both.

53
00:03:51.150 --> 00:03:54.738
Right, and so this will give me
a union type based on an array so

54
00:03:54.738 --> 00:03:59.507
I can do all my JavaScript stuff, and
interpolation and stuff along those lines.

55
00:03:59.507 --> 00:04:04.630
The reason that I did not do it here for
us is because tailwind tries

56
00:04:04.630 --> 00:04:10.053
to basically cut out any CSS class
that it doesn't detect you using.

57
00:04:10.053 --> 00:04:11.717
The way that it detects you whether or

58
00:04:11.717 --> 00:04:14.840
not you're using CSS class is it
just regexes your entire code base.

59
00:04:14.840 --> 00:04:19.349
So if you start getting fancy with string
interpolation, it will not find the class.

60
00:04:19.349 --> 00:04:22.085
They'll say,
they're never using BG primary 200,

61
00:04:22.085 --> 00:04:24.935
rip that out of the style sheet,
and then you'll wonder why

62
00:04:24.935 --> 00:04:28.592
you don't have a ring of danger 500 on
a text area or something like that.

63
00:04:28.592 --> 00:04:32.921
So being really fancy with
metaprogramming and stuff.

64
00:04:32.921 --> 00:04:37.751
In the case of tailwind classes, bad news
bears, but for lots of other very useful

65
00:04:37.751 --> 00:04:42.386
things, I'll both have a type and
be able to iterate it over simultaneously.

