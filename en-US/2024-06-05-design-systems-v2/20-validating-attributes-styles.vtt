WEBVTT

1
00:00:00.000 --> 00:00:02.202
So yeah, we've got all that in place and
we can test all that.

2
00:00:02.202 --> 00:00:06.188
We can do other tests
while we're in here and

3
00:00:06.188 --> 00:00:09.751
just kinda like all sorts of fun stuff.

4
00:00:09.751 --> 00:00:12.445
Let's see,
that's just like does it have account?

5
00:00:12.445 --> 00:00:15.526
Let's make another test because it's like,

6
00:00:15.526 --> 00:00:19.407
could you jam a whole bunch of
expectations into one test?

7
00:00:19.407 --> 00:00:21.929
Great, but then when it fails,
now you gotta figure out why.

8
00:00:21.929 --> 00:00:26.090
Versus if you had a story called,
with text too long and

9
00:00:26.090 --> 00:00:30.524
your CICD breaks and
it says text area text too long fails,

10
00:00:30.524 --> 00:00:35.592
you know what it might've been,
versus you have one thing that's

11
00:00:35.592 --> 00:00:40.062
got like a thousand things now
you gotta figure it all out.

12
00:00:40.062 --> 00:00:45.352
So we'll say X were not

13
00:00:45.352 --> 00:00:50.651
length too long nope.

14
00:00:50.651 --> 00:00:55.621
All right, so we got that in place and
we'll say that the args has a max

15
00:00:55.621 --> 00:00:59.545
length of, I'll stick with 104.

16
00:00:59.545 --> 00:01:03.196
I don't know why I'm committed
to something I hate.

17
00:01:03.196 --> 00:01:09.316
So now what we'll say is that the console

18
00:01:09.316 --> 00:01:14.716
input value is H plus A repeat 140

19
00:01:14.716 --> 00:01:20.296
times plus Y exclamation point a very

20
00:01:20.296 --> 00:01:25.158
long you know what even better.

21
00:01:27.920 --> 00:01:34.210
Cool so,
by definition be 142 as well in there.

22
00:01:34.210 --> 00:01:37.947
And yeah, like you could theoretically
start on the variable and keep it,

23
00:01:37.947 --> 00:01:39.860
but let's not get carried away here.

24
00:01:39.860 --> 00:01:42.979
And so now what we can do is,

25
00:01:42.979 --> 00:01:48.679
let's keep a version of
that initial test right,

26
00:01:48.679 --> 00:01:52.357
I don't hate that idea in here.

27
00:01:52.357 --> 00:01:55.597
We do need to bring in
the the act of typing,

28
00:01:55.597 --> 00:02:00.288
because otherwise SAS will fail for
a very different reason.

29
00:02:00.288 --> 00:02:04.672
And then we'll also say that we expect

30
00:02:04.672 --> 00:02:09.202
the text area to have the ARIA invalid.

31
00:02:09.202 --> 00:02:10.411
I wrote that code.

32
00:02:10.411 --> 00:02:15.262
I know that it will put an ARIA tag on
there that should set invalid to true,

33
00:02:15.262 --> 00:02:19.883
because I found out the hard way
where it's not technically invalid in

34
00:02:19.883 --> 00:02:21.469
the DOM and I got angry.

35
00:02:21.469 --> 00:02:25.164
[LAUGH] That's how I know there's
an ARIA tag in there now.

36
00:02:25.164 --> 00:02:29.091
And I can say, I can even do stuff like,

37
00:02:29.091 --> 00:02:33.613
remember in light mode
that it didn't work.

38
00:02:33.613 --> 00:02:35.432
So hopefully my test,

39
00:02:35.432 --> 00:02:41.003
I know that it should apply this
class of ring danger 500, right?

40
00:02:41.003 --> 00:02:45.732
Now, I didn't see it, and so that's
a different story to look at in a second,

41
00:02:45.732 --> 00:02:48.458
but hopefully a test
should fail otherwise,

42
00:02:48.458 --> 00:02:52.428
I'm gonna be scratching my head
because I didn't see a red ring.

43
00:02:52.428 --> 00:02:54.714
And let's start with those.

44
00:02:54.714 --> 00:03:00.479
It's in dark mode, so theoretically it
will fail this time, or it will pass.

45
00:03:00.479 --> 00:03:04.803
All right and so you can see that types
of like with a longer string you can

46
00:03:04.803 --> 00:03:09.705
definitely see the act of typing so they
are real-ish user directions you can see

47
00:03:09.705 --> 00:03:14.245
that like it does have the right length
in there that the ARIA tag is actually

48
00:03:14.245 --> 00:03:16.944
invalid now that it does
have that red ring.

49
00:03:28.273 --> 00:03:31.014
The class is there,
I don't know why it's not red.

50
00:03:31.014 --> 00:03:34.344
We can deal with that momentarily.

51
00:03:34.344 --> 00:03:37.333
I might just see my class order.

52
00:03:37.333 --> 00:03:39.163
We'll talk about in a second.

53
00:03:39.163 --> 00:03:43.110
I have I have an idea
that is a distraction.

54
00:03:43.110 --> 00:03:46.540
I'm not ignoring it, I'm just trying to
stay focused for a minute here, cool.

55
00:03:46.540 --> 00:03:51.018
So we can like, here's a test where

56
00:03:51.018 --> 00:03:56.106
we're gonna hopefully catch it if not.

57
00:03:56.106 --> 00:04:01.391
You can even say expect the text area

58
00:04:06.208 --> 00:04:07.598
Let's say two,

59
00:04:13.621 --> 00:04:17.969
That's the count really so
that we can expect the count to turn red,

60
00:04:17.969 --> 00:04:22.242
I don't necessarily off the top of
my head know the exact syntax for

61
00:04:22.242 --> 00:04:26.994
the border color at test, that can't
be the right color we'll find out.

62
00:04:26.994 --> 00:04:30.341
So yeah, the rail color,
this is about this color here.

63
00:04:30.341 --> 00:04:36.544
You can actually say like class aside
is the color that I expect right?

64
00:04:36.544 --> 00:04:39.991
And this is something I would store in
a variable somewhere generated from

65
00:04:39.991 --> 00:04:41.381
the design system, be like,

66
00:04:41.381 --> 00:04:44.173
all my blue buttons the color
blue they're supposed to be?

67
00:04:44.173 --> 00:04:47.747
You can actually write
something here as well.

68
00:04:47.747 --> 00:04:49.531
So let's actually grab this color.

69
00:04:49.531 --> 00:04:55.196
I was like, yeah,
there's no way it's that color.

70
00:04:58.934 --> 00:05:03.463
So we're gonna expect the detects area and
I don't know I'm like,

71
00:05:03.463 --> 00:05:07.365
before it's kinda live coding,
I'm truly live coding.

72
00:05:07.365 --> 00:05:12.371
Cuz now it's like I'm bothered
by this yeah, border color.

73
00:05:12.371 --> 00:05:15.489
But that one does fail
cuz it's not in fact red.

74
00:05:15.489 --> 00:05:20.280
Here is my quick hypothesis
that it's not important, but

75
00:05:20.280 --> 00:05:24.386
we're gonna talk about
it anyway 'cause again,

76
00:05:24.386 --> 00:05:30.174
just not dealing with it feels like
irresponsible as a professional.

77
00:05:30.174 --> 00:05:33.900
The classes can sometimes
conflict with each other,

78
00:05:33.900 --> 00:05:38.283
CX will just kind of like put them
on top of each other and hope for

79
00:05:38.283 --> 00:05:42.750
the best, but if you have two
classes that are styling the ring,

80
00:05:42.750 --> 00:05:46.019
it could be like,
the other one could win out.

81
00:05:46.019 --> 00:05:51.150
So, there is a useful tool, which I
believe I have installed in package JSON.

82
00:05:51.150 --> 00:05:55.805
This is Tailwind specific to be clear.

83
00:05:55.805 --> 00:06:02.506
No, that's all it's called,
Called to win the merge,

84
00:06:02.506 --> 00:06:08.377
if not all MPM install it nope which
is basically it tries to de doop and

85
00:06:08.377 --> 00:06:13.351
actually take the order seriously,
and stuff like that.

86
00:06:13.351 --> 00:06:19.867
Yeah, well, we'll try this for a second so
you can use this tw merge instead and

87
00:06:19.867 --> 00:06:24.744
that will try to like de-conflict
your tailwind classes.

88
00:06:24.744 --> 00:06:27.688
I hate this where it calls it tw merge so

89
00:06:27.688 --> 00:06:32.840
a lot of times i'll do it as merge
because that's me as a person that

90
00:06:32.840 --> 00:06:37.908
you're all learning about
simultaneously cool, cool, cool.

91
00:06:40.468 --> 00:06:41.668
I will look at that later.

92
00:06:41.668 --> 00:06:45.870
It's not super important why
the classes are not totally silent but

93
00:06:45.870 --> 00:06:50.441
it does validate that the system works
right like me going into a weird like

94
00:06:50.441 --> 00:06:55.378
styling issue, not the best use of our
time, but maybe I did it intentionally to

95
00:06:55.378 --> 00:06:59.682
demonstrate what a real life situation
might be is totally planned.

96
00:06:59.682 --> 00:07:03.906
It's very cool ,and there are other things
that we can do in here as well just

97
00:07:03.906 --> 00:07:08.460
to kinda show you and again like you could
do all they have all the different nuances

98
00:07:08.460 --> 00:07:12.816
and like what everything you know from
every component testing thing that like

99
00:07:12.816 --> 00:07:17.172
either on front of masters you've done
applies here but it's nice to see it and

100
00:07:17.172 --> 00:07:19.489
get the sense and the step through stuff.

101
00:07:19.489 --> 00:07:22.911
It's like, I like writing component
tests now there, I said it.

102
00:07:22.911 --> 00:07:26.770
Actually why don't you do this one as a
challenge because I looked at my notes it

103
00:07:26.770 --> 00:07:28.594
says quick exercise you do this one.

104
00:07:28.594 --> 00:07:31.240
So I'm gonna listen to past me and
what he said,

105
00:07:31.240 --> 00:07:35.475
you know it'd be great shouldn't be
able to type in a disabled one Georgia,

106
00:07:35.475 --> 00:07:40.042
right could we write a play test that says
like hey, this thing should literally,

107
00:07:40.042 --> 00:07:43.444
if it has the prop disabled,
it should be disabled, right?

108
00:07:43.444 --> 00:07:48.928
As a bonus, even the act of trying to type
in it should not change the content of it,

109
00:07:48.928 --> 00:07:49.494
right?

110
00:07:49.494 --> 00:07:52.642
Or anything you wanna try with
the disabled one, if another one makes you

111
00:07:52.642 --> 00:07:55.281
happy, but looking at my notes,
it says, quick exercise.

112
00:07:55.281 --> 00:07:57.044
Can you write a test to check for
the following?

113
00:07:57.044 --> 00:07:59.221
Its disabled text area is in fact,
disabled.

114
00:07:59.221 --> 00:08:05.735
Typing the text area does not
change the value of the text area.

115
00:08:07.053 --> 00:08:08.881
All right, so some base and

116
00:08:08.881 --> 00:08:13.186
yeah are we technically testing
built-in DOM functionality?

117
00:08:13.186 --> 00:08:20.198
Sure but I think it makes our point so
let's go with it.

118
00:08:20.198 --> 00:08:24.503
So in this case, we're gonna say play.

119
00:08:24.503 --> 00:08:27.059
We'll have an async function here.

120
00:08:27.059 --> 00:08:31.850
Don't know what I typed before to well.

121
00:08:31.850 --> 00:08:34.146
Fine, whatever, we can expect to be
disabled that seems to make sense.

122
00:08:34.146 --> 00:08:38.143
If you pass this table
that should be beaut.

123
00:08:38.143 --> 00:08:42.106
And somebody says they feel stupid,
but honestly, we've all been bitten.

124
00:08:42.106 --> 00:08:43.242
We've all been bitten.

125
00:08:43.242 --> 00:08:46.539
Like we know, sometimes these so
many tests are great.

126
00:08:46.539 --> 00:08:50.290
And we'll say a wait, we'll say user
event to type something in there.

127
00:08:50.290 --> 00:08:53.575
But then we should expect it not to have
any value because it was disabled and

128
00:08:53.575 --> 00:08:55.313
you shouldn't be able to type into it.

129
00:08:55.313 --> 00:08:59.752
Right, and even little stuff like that
first of all, not that hard to write, but

130
00:08:59.752 --> 00:09:03.409
then also we can go in there the test
automatically runs even the act

131
00:09:03.409 --> 00:09:05.595
of looking at it runs the test, right?

132
00:09:05.595 --> 00:09:08.294
And we can see that
everything that we tried,

133
00:09:08.294 --> 00:09:13.278
like executed like it typed the character
found the thing and tried to type into it.

134
00:09:13.278 --> 00:09:15.375
Right, nothing changed, right?

135
00:09:15.375 --> 00:09:21.554
So we get that initial
validation in there as well.

