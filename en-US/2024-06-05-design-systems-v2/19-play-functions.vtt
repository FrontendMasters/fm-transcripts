WEBVTT

1
00:00:00.000 --> 00:00:02.839
What we're gonna talk about next
is all the promises I made to you

2
00:00:02.839 --> 00:00:05.749
about testing things and
validating things that work the way do.

3
00:00:05.749 --> 00:00:09.406
What if you can pull a lot of what you
have in your test suite because we're all

4
00:00:09.406 --> 00:00:10.904
maybe you're better than me.

5
00:00:10.904 --> 00:00:15.471
We're all really good at writing unit
tests we're kinda good at writing those

6
00:00:15.471 --> 00:00:18.252
large like playwright
tests component tests.

7
00:00:18.252 --> 00:00:22.953
And what if we could use storybook
to make testing easier, right and

8
00:00:22.953 --> 00:00:26.758
have, that things actually
work the way that we want.

9
00:00:26.758 --> 00:00:31.440
And there's a lot of really great
functionality that will take the tests

10
00:00:31.440 --> 00:00:33.522
that you hate writing the most.

11
00:00:33.522 --> 00:00:36.926
You're gonna like them, but
they're gonna be a lot better.

12
00:00:36.926 --> 00:00:39.558
And we'll show some of
the tooling involved so

13
00:00:39.558 --> 00:00:43.686
you can make sure you're not breaking
stuff cuz two components, fine.

14
00:00:43.686 --> 00:00:46.010
60 components not fine, right?

15
00:00:46.010 --> 00:00:48.800
Especially if you've structured things
do large scale color changes and

16
00:00:48.800 --> 00:00:49.482
stuff like that.

17
00:00:49.482 --> 00:00:54.128
Kinda one of things we're talking about is
there's I've talked a lot of stuff about

18
00:00:54.128 --> 00:00:57.741
this idea of testing our components and
stuff along those lines.

19
00:00:57.741 --> 00:00:59.402
Yeah, there's a lot of visual tests.

20
00:00:59.402 --> 00:01:02.219
There's also this idea of interaction,

21
00:01:02.219 --> 00:01:05.762
there's some things that call out button,
right?

22
00:01:05.762 --> 00:01:07.192
All right, fine, right?

23
00:01:07.192 --> 00:01:09.211
I can look at those and I can see them.

24
00:01:09.211 --> 00:01:15.859
But there's a lot of our UI that
you have to actually have to touch.

25
00:01:15.859 --> 00:01:19.088
These will always vary somewhat, right.

26
00:01:19.088 --> 00:01:23.280
And could you just write stories that
put the component in that state?

27
00:01:23.280 --> 00:01:27.753
You could argue a lot of times you should,
right, cuz that's easy.

28
00:01:27.753 --> 00:01:33.372
But sometimes, there's no real way to say,
hey, if the input field is disabled,

29
00:01:33.372 --> 00:01:37.646
they shouldn't be able to click on it and
type into it, right.

30
00:01:37.646 --> 00:01:44.107
You can't really set
the scene like that too much.

31
00:01:44.107 --> 00:01:47.920
If they click on this thing or
a little to do list,

32
00:01:47.920 --> 00:01:51.548
okay, they enter something in and
hit enter.

33
00:01:51.548 --> 00:01:53.885
I would like to see it on the page, right?

34
00:01:53.885 --> 00:01:59.540
All those things are one
level kind of above and

35
00:01:59.540 --> 00:02:06.073
beyond what you might see in
a just regular old story.

36
00:02:06.073 --> 00:02:09.260
So we got a whole bunch of different
use cases that we could do here.

37
00:02:09.260 --> 00:02:14.298
Let's consider this text area
that is effectively an old school

38
00:02:14.298 --> 00:02:18.871
Twitter textbox where it should
at least get yell at you and

39
00:02:18.871 --> 00:02:24.586
change its state in the situation
where you go under 140 characters.

40
00:02:24.586 --> 00:02:27.917
You go hey Steve, isn't it 280 now listen,

41
00:02:27.917 --> 00:02:33.345
put it 140 this textbox was annoying
enough I regret that it wasn't 10.

42
00:02:33.345 --> 00:02:34.573
So leave me alone.

43
00:02:34.573 --> 00:02:37.534
But we wanna be able to simulate that,

44
00:02:37.534 --> 00:02:42.159
okay that we can that it does
change state as we go in there and

45
00:02:42.159 --> 00:02:47.079
that this count reflects the number
of things in there as well.

46
00:02:47.079 --> 00:02:54.780
Luckily, the integration of this
in storybook is shockingly easy.

47
00:02:54.780 --> 00:02:55.974
So, let's take a look at it.

48
00:02:55.974 --> 00:02:58.546
That text component does exist.

49
00:02:58.546 --> 00:03:02.091
So, we've got a task list that will
play around with anyway, later.

50
00:03:02.091 --> 00:03:06.028
But we've got this text area,
and it's mostly set up already.

51
00:03:06.028 --> 00:03:10.339
And what we wanna do is actually
create some stories around it.

52
00:03:10.339 --> 00:03:17.940
So let's go ahead and we'll say yeah
called default, like that suggestion.

53
00:03:17.940 --> 00:03:21.319
Let's see what it looks like in
storybook with no args because yeah,

54
00:03:21.319 --> 00:03:23.197
it's not really a primary text area.

55
00:03:23.197 --> 00:03:26.787
It's just like a text area
if we didn't do anything and

56
00:03:26.787 --> 00:03:29.683
here it exists now, there's my text area.

57
00:03:29.683 --> 00:03:33.356
Okay, I could I've got
disabled not disabled,

58
00:03:33.356 --> 00:03:37.401
required to get the font little dot,
that's great.

59
00:03:37.401 --> 00:03:44.032
Some placeholder tags, all that kind
of fun stuff, it's all wired up.

60
00:03:44.032 --> 00:03:46.429
It's got a dark mode, whatever.

61
00:03:46.429 --> 00:03:49.546
So you can go look at that code if
you just wanna see in other examples

62
00:03:49.546 --> 00:03:51.727
that is in there for
you as an exercise reader.

63
00:03:51.727 --> 00:03:56.830
But we want to create a second story and
say export car show what the disabled

64
00:03:56.830 --> 00:04:01.940
one litre so we'll go make that since,
the auto complete was there for me.

65
00:04:01.940 --> 00:04:06.671
But what I want is export cost with count,

66
00:04:06.671 --> 00:04:10.329
and that'll be a story as well.

67
00:04:10.329 --> 00:04:16.007
I'm just hijacking the max length,
which is a built-in

68
00:04:16.007 --> 00:04:21.817
property on text areas that
I don't think does anything.

69
00:04:21.817 --> 00:04:24.618
Things that I learned preparing for

70
00:04:24.618 --> 00:04:28.919
this is how input fields you
can have a validity check?

71
00:04:28.919 --> 00:04:33.444
Blowing past the max length on
a text area does not trigger

72
00:04:33.444 --> 00:04:36.473
the DOM's invalid pseudo selector.

73
00:04:36.473 --> 00:04:37.961
So that's fun.

74
00:04:37.961 --> 00:04:41.305
So we'll say 140 characters and

75
00:04:41.305 --> 00:04:47.104
what I should have then is you
notice the space in here as well.

76
00:04:47.104 --> 00:04:54.885
So if you use a cyclic Pascal case
if you start with a capital letter.

77
00:04:54.885 --> 00:04:59.967
We've got that in place where
we get this little count here,

78
00:04:59.967 --> 00:05:06.460
and ideally big count goes up, and
this is where I regret 140 characters.

79
00:05:06.460 --> 00:05:14.722
The whole thing should, we'll take
a look at why that part didn't turn red.

80
00:05:14.722 --> 00:05:16.841
It does in dark mode.

81
00:05:16.841 --> 00:05:21.755
It's the way you need visual regression
tests that you didn't undo to get back to

82
00:05:21.755 --> 00:05:24.006
the starting point of the workshop.

83
00:05:24.006 --> 00:05:25.241
But yeah, so, [LAUGH] you know what?

84
00:05:25.241 --> 00:05:26.584
We'll work on it in dark mode.

85
00:05:26.584 --> 00:05:29.038
We'll put it back in there, too.

86
00:05:29.038 --> 00:05:37.399
So it turns red, but at least these turn
red down here as well, so on and so forth.

87
00:05:37.399 --> 00:05:39.462
We'll debug that in a moment,
that's annoying.

88
00:05:39.462 --> 00:05:43.214
So what we wanna do is to say, hey,
one want to type in this field and

89
00:05:43.214 --> 00:05:47.113
like that count should reflect
whatever you typed in there, right?

90
00:05:47.113 --> 00:05:50.201
To if they blow past the amount,
I wanna validate that,

91
00:05:50.201 --> 00:05:53.632
it does have the additional CSS
classes that I'm expecting.

92
00:05:53.632 --> 00:05:57.450
And I don't want it to context switch and

93
00:05:57.450 --> 00:06:01.841
deal with also then
writing component tests.

94
00:06:01.841 --> 00:06:04.264
Because those are always
the ones that I skip.

95
00:06:04.264 --> 00:06:08.472
But also the idea of breaking this stuff
out in storybook means that it's also

96
00:06:08.472 --> 00:06:10.876
isolated, easy to component test as well.

97
00:06:10.876 --> 00:06:15.943
And so we've got the storybook test and
you see I have some basic things in here.

98
00:06:15.943 --> 00:06:20.808
I think that it is true
that storybook seven and

99
00:06:20.808 --> 00:06:24.178
earlier used testing library,

100
00:06:24.178 --> 00:06:28.936
I think eight might be
something different.

101
00:06:28.936 --> 00:06:30.819
It doesn't really matter,
it's abstracted away.

102
00:06:30.819 --> 00:06:34.262
It's under at storybook test and what it
is under the hood is not super important.

103
00:06:34.262 --> 00:06:37.790
But if you've ever used something
like testing library, which is

104
00:06:37.790 --> 00:06:42.271
framework agnostic in so far that there is
a flavor for most of the puppy frameworks.

105
00:06:42.271 --> 00:06:47.172
Including just a regular, it is a set
of libraries for go find the selector,

106
00:06:47.172 --> 00:06:50.016
and then simulate a click so
on and so forth.

107
00:06:50.016 --> 00:06:54.751
So, we've got to expect, which is if
you've ever used any testing library,

108
00:06:54.751 --> 00:06:57.137
it does exactly what you think it does.

109
00:06:57.137 --> 00:07:03.680
Within just help scope the selector and
user event simulates user events, okay.

110
00:07:03.680 --> 00:07:07.011
So let's start with
the easiest possible thing.

111
00:07:07.011 --> 00:07:08.981
We're gonna say play.

112
00:07:08.981 --> 00:07:13.244
And there are you have container in here.

113
00:07:13.244 --> 00:07:17.182
I think you've also got
what args were passed in.

114
00:07:17.182 --> 00:07:21.072
What are types,
you get a lot of metadata, as well.

115
00:07:21.072 --> 00:07:23.964
I don't actually want the container
I want the canvas element.

116
00:07:23.964 --> 00:07:29.522
That is the playground that I am in,
right.

117
00:07:29.522 --> 00:07:34.401
So we have that and we'll say is canvas

118
00:07:34.401 --> 00:07:39.131
equals that within canvas element.

119
00:07:39.131 --> 00:07:45.848
So this is now everything I now we're only
looking Inside of our storybook canvas.

120
00:07:45.848 --> 00:07:51.680
So what we'll do here is we'll say,
don't ruin the surprise,

121
00:07:51.680 --> 00:07:56.324
const text area equals
canvas get by role text box,

122
00:07:56.324 --> 00:07:59.898
text areas have the aria role text box.

123
00:07:59.898 --> 00:08:04.789
If you wanna ask me why isn't text area,
I don't make the rules around here,

124
00:08:04.789 --> 00:08:06.606
I just tell you the answers.

125
00:08:06.606 --> 00:08:10.557
And let's just start by
doing something really easy.

126
00:08:10.557 --> 00:08:15.856
We'll go and just to demonstrate this sure
we'll do a weight user event dot type.

127
00:08:15.856 --> 00:08:18.996
And if you're not running a test and
you're not waiting for to be filled in,

128
00:08:18.996 --> 00:08:21.165
you can skip the await but
it's not hurting anyone.

129
00:08:21.165 --> 00:08:25.218
But If you do forget the await
asked me how I know this,

130
00:08:25.218 --> 00:08:30.728
your tests will fail and you will lose
at least 10 minutes of your life.

131
00:08:30.728 --> 00:08:34.980
Before you remember why your tests fail
when it's clearly in the box because

132
00:08:34.980 --> 00:08:37.516
JavaScript is hard and
asynchrony is weird.

133
00:08:37.516 --> 00:08:41.007
This is Ruby,
we wouldn't have these problems, but

134
00:08:41.007 --> 00:08:43.655
we'd have a different set of problems.

135
00:08:43.655 --> 00:08:48.814
Cool, and you look back at our story,
the cursor is flashing in there, right?

136
00:08:48.814 --> 00:08:50.898
Because we went in there,
we typed, hello world.

137
00:08:50.898 --> 00:08:54.306
I'm gonna, if you watch very carefully,

138
00:08:54.306 --> 00:08:57.817
you can see the letters go in there,
right?

139
00:08:57.817 --> 00:09:02.183
And so
it is simulating that user event and

140
00:09:02.183 --> 00:09:07.188
who thinks that passes
an accessibility test?

141
00:09:07.188 --> 00:09:10.269
And so we've got that in there as well.

142
00:09:10.269 --> 00:09:11.695
So we've got 13.

143
00:09:11.695 --> 00:09:13.021
That feels right.

144
00:09:13.021 --> 00:09:15.644
Do I really wanna count the number
of letters in hello world?

145
00:09:15.644 --> 00:09:21.028
I do, so what we'll say

146
00:09:21.028 --> 00:09:29.115
is cons input value is hello world.

147
00:09:29.115 --> 00:09:30.444
I'll put that in there.

148
00:09:33.453 --> 00:09:35.975
I don't like magic numbers.

149
00:09:35.975 --> 00:09:41.510
And we'll say that we expect
the we need to count and

150
00:09:41.510 --> 00:09:46.402
one thing that I know
that you don't know that

151
00:09:46.402 --> 00:09:50.650
I know is that the actual count itself,

152
00:09:50.650 --> 00:09:54.657
I have this data dash test ID length.

153
00:09:54.657 --> 00:09:56.135
So this is not magic.

154
00:09:56.135 --> 00:10:01.335
I put a data attribute to select it

155
00:10:01.335 --> 00:10:06.535
easily with my tests in here and so

156
00:10:06.535 --> 00:10:13.594
what I'll say is cons
count equals canvas dot

157
00:10:13.594 --> 00:10:19.198
get by test id length, there we go.

158
00:10:19.198 --> 00:10:22.611
I am better at typing when I'm not
standing on a podium I promise you.

159
00:10:22.611 --> 00:10:27.448
Cool, and then we wanna say that

160
00:10:27.448 --> 00:10:31.927
we expect that count to have,

161
00:10:31.927 --> 00:10:37.303
it's only that to have text content

162
00:10:37.303 --> 00:10:41.791
that is equal to input value.

163
00:10:43.633 --> 00:10:48.666
And because Typescript has saved
my butt so many times, but

164
00:10:48.666 --> 00:10:55.611
when it gets angry at me, it's like,
lengths that could actually be undefined,

165
00:10:55.611 --> 00:10:59.653
I'm, I know that it's not,
it's a DOM node.

166
00:10:59.653 --> 00:11:04.351
So we'll say, too strange to
keep Typescript happy with me.

167
00:11:04.351 --> 00:11:09.931
And what should happen now is if we go
in here and we look at interactions,

168
00:11:09.931 --> 00:11:13.772
first of all,
if it couldn't find the text area,

169
00:11:13.772 --> 00:11:20.096
the test would fail everything that you
do technically counts as an expectation.

170
00:11:20.096 --> 00:11:23.854
So you can see that,
it did successfully type in there, right?

171
00:11:23.854 --> 00:11:26.370
And so if he couldn't type in there for

172
00:11:26.370 --> 00:11:31.169
some reason like your test would fail but
then to it did go look in there and

173
00:11:31.169 --> 00:11:34.804
saw that the text count was in fact,
correct, right?

174
00:11:34.804 --> 00:11:36.367
So now you can refactor away and

175
00:11:36.367 --> 00:11:40.291
this is not even really just the design
of this is the functionality, right?

176
00:11:40.291 --> 00:11:45.219
And this test will run every single time
you change the code in your browser,

177
00:11:45.219 --> 00:11:45.766
right?

178
00:11:45.766 --> 00:11:49.904
And again,
if you were not on a 14-inch laptop,

179
00:11:49.904 --> 00:11:54.234
zoomed in to an unreasonable,
to a text resolution or

180
00:11:54.234 --> 00:12:00.605
screen resolution from 2008, then you
would be able to work side by side.

181
00:12:00.605 --> 00:12:05.115
But, you can also do things
like go back a step and

182
00:12:05.115 --> 00:12:08.315
step through everything as well.

183
00:12:08.315 --> 00:12:11.445
Really kind of a powerful set of tooling.

