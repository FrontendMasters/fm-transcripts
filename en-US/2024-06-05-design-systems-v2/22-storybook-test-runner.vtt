WEBVTT

1
00:00:00.000 --> 00:00:03.187
All right, this testing is so
super cool, right?

2
00:00:03.187 --> 00:00:04.147
Has one problem.

3
00:00:04.147 --> 00:00:06.942
When do my tests run?

4
00:00:06.942 --> 00:00:08.348
When I look at them.

5
00:00:08.348 --> 00:00:10.854
Which is the age old
philosophical question.

6
00:00:10.854 --> 00:00:16.165
[LAUGH] If you write tests and
you don't look at them, do they ever run?

7
00:00:16.165 --> 00:00:20.197
And so that's all great and wonderful, but
it'd be great if we could also run through

8
00:00:20.197 --> 00:00:22.838
all the tests, right, and
CI/CD and stuff like that.

9
00:00:22.838 --> 00:00:24.668
Cuz ain't nobody going there and

10
00:00:24.668 --> 00:00:28.792
clicking on every single story to make
sure you didn't mess something up.

11
00:00:28.792 --> 00:00:32.554
So that is an easily solved problem.

12
00:00:32.554 --> 00:00:38.481
I forget if it's installed in this repo,
but one can do an npm.

13
00:00:38.481 --> 00:00:41.888
Let's do this in my slightly
bigger terminal for

14
00:00:41.888 --> 00:00:45.150
those watching on smaller screens.

15
00:00:45.150 --> 00:00:55.054
We can do npm install
-d@storybook/test runner.

16
00:00:55.054 --> 00:00:57.082
Might already be installed in the script,
but I forget.

17
00:00:57.082 --> 00:01:01.062
I was using npm just mostly
cuz I use it every day.

18
00:01:01.062 --> 00:01:03.865
All right,
it looks like it was already in there.

19
00:01:03.865 --> 00:01:05.325
So maybe that was my issue.

20
00:01:05.325 --> 00:01:10.347
We've already got test runner present
in this repo, but if one didn't,

21
00:01:10.347 --> 00:01:15.944
one could theoretically install it like
that with our favorite package manager.

22
00:01:15.944 --> 00:01:17.669
I heard some people are using yarn.

23
00:01:17.669 --> 00:01:18.359
I use pm pm,

24
00:01:18.359 --> 00:01:23.215
we live in a world where there's four
different package managers for JavaScript.

25
00:01:23.215 --> 00:01:26.893
I have muscle memory, so I stuck with
what I was least likely to screw up.

26
00:01:26.893 --> 00:01:28.562
I don't really care.

27
00:01:28.562 --> 00:01:33.303
We used some features of it, whatever.

28
00:01:33.303 --> 00:01:39.215
So the test runner goes to the browser and
clicks stuff.

29
00:01:39.215 --> 00:01:41.209
So it does use Playwright.

30
00:01:41.209 --> 00:01:46.258
If you have never run it on
a given project, you do need to

31
00:01:46.258 --> 00:01:51.416
do an npx playwright install,
and that will download all

32
00:01:51.416 --> 00:01:57.231
the various browsers that Playwright uses,
so on and so forth.

33
00:01:57.231 --> 00:01:58.703
This is not my first time in this repo.

34
00:01:58.703 --> 00:02:02.070
As you can imagine,
I have it installed already.

35
00:02:02.070 --> 00:02:09.645
And then you can either create
a npm script in your package JSON,

36
00:02:09.645 --> 00:02:13.860
or you can do npx test-storybook.

37
00:02:13.860 --> 00:02:18.382
And that will do what you
think it's doing, except for

38
00:02:18.382 --> 00:02:21.050
my failing test for the stupid.

39
00:02:21.050 --> 00:02:26.316
Again, the system works theoretically for
my stupid ring in there.

40
00:02:26.316 --> 00:02:32.046
But what it will do is also
the console logs are a bit much.

41
00:02:32.046 --> 00:02:34.282
So let's go handle that at least.

42
00:02:34.282 --> 00:02:38.554
I have a little bit of self respect.

43
00:02:38.554 --> 00:02:40.125
I know where that one is.
Here it is.

44
00:02:44.984 --> 00:02:49.931
And let's get rid of that one known
failing test for a hot minute.

45
00:02:49.931 --> 00:02:51.450
Cuz that's how you solve failing tests,
right?

46
00:02:51.450 --> 00:02:56.937
You just delete them, [LAUGH], obviously.

47
00:03:00.149 --> 00:03:02.109
So you can see it'll run through,
basically,

48
00:03:02.109 --> 00:03:03.783
all of the play functions that you have.

49
00:03:03.783 --> 00:03:05.985
And again,
those could be tested expectations.

50
00:03:05.985 --> 00:03:08.734
They could also just be like,
you'll click on this thing.

51
00:03:08.734 --> 00:03:13.023
If all of a sudden it's not there anymore,
that test will fail, right?

52
00:03:13.023 --> 00:03:15.357
And so you can run this in CI/CD.

53
00:03:15.357 --> 00:03:19.500
Either I link to it in the course website,
but also there's a Github action,

54
00:03:19.500 --> 00:03:21.308
you copy, you paste it in there.

55
00:03:21.308 --> 00:03:22.887
And so
you can run through all these tests.

56
00:03:22.887 --> 00:03:26.130
And this is gonna be useful because we can
also use it for accessibility audits and

57
00:03:26.130 --> 00:03:27.144
other things like that.

58
00:03:27.144 --> 00:03:30.435
But it basically will run through
every test, put it in your CI/CD,

59
00:03:30.435 --> 00:03:31.646
stop thinking about it.

60
00:03:31.646 --> 00:03:34.963
But also being able to do in the browser
is nice when you're debugging.

61
00:03:34.963 --> 00:03:35.667
So both are good.

62
00:03:35.667 --> 00:03:36.816
Use both, it's great.

63
00:03:36.816 --> 00:03:38.684
Life is good.

