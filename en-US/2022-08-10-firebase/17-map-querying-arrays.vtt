WEBVTT

1
00:00:00.000 --> 00:00:01.506
Array queries.

2
00:00:01.506 --> 00:00:06.095
So arrays are a very interesting type in
Firestore, because you can query on them

3
00:00:06.095 --> 00:00:09.617
and there's a lot of power when
you're doing array queries.

4
00:00:09.617 --> 00:00:14.042
So when people started initially
modelling their data in Firestore,

5
00:00:14.042 --> 00:00:17.723
they might use an object or
a map to query their documents.

6
00:00:17.723 --> 00:00:22.743
So maybe let's say you wanted to,
a new requirement comes down and

7
00:00:22.743 --> 00:00:27.687
expenses now should be able to be
tagged by multiple categories.

8
00:00:27.687 --> 00:00:34.031
So not just one category, it could be
food or food and transportation, right?

9
00:00:34.031 --> 00:00:35.883
Maybe it's like a party bus, I don't know.

10
00:00:35.883 --> 00:00:39.127
But you have multiple tagging for
a single expense.

11
00:00:39.127 --> 00:00:42.097
So maybe you have it as
a categories object and

12
00:00:42.097 --> 00:00:44.608
then you put the name of the category.

13
00:00:44.608 --> 00:00:47.405
But then you're writing something
weird where it's like where

14
00:00:47.405 --> 00:00:48.603
categories.fun = true.

15
00:00:48.603 --> 00:00:51.511
And it works, but
it's weird, and this is what

16
00:00:51.511 --> 00:00:56.328
your document would have a categories
object that looks something like that.

17
00:00:56.328 --> 00:01:02.162
But instead, we could just store it as an
array, and so it has a list of categories.

18
00:01:02.162 --> 00:01:06.311
And then we can use
special array operators.

19
00:01:06.311 --> 00:01:08.138
So this is array contains.

20
00:01:08.138 --> 00:01:14.832
So it says hey, get expenses
where the category contains fun,

21
00:01:14.832 --> 00:01:21.668
so it can have another category to it,
but it has to contain fun.

22
00:01:21.668 --> 00:01:26.801
And then we also have array-contains-any,
which is more of your or style operations.

23
00:01:26.801 --> 00:01:32.529
Where you can say hey, give me categories
where any of the fields within array or

24
00:01:32.529 --> 00:01:37.246
any of the elements within the array
of categories is fun or kids.

25
00:01:37.246 --> 00:01:40.717
And so this is,
to answer the question earlier,

26
00:01:40.717 --> 00:01:46.233
this is one of the places where you can
do an or style query and limited to 25.

27
00:01:46.233 --> 00:01:50.775
So this is in the querying
arrays page in the same project,

28
00:01:50.775 --> 00:01:54.031
just in this in pages/QueryingArrays.

29
00:01:54.031 --> 00:01:57.359
And let's write this expense right here.

30
00:01:57.359 --> 00:02:05.995
So get the first 100 categories that
are categorized as fun and kids.

31
00:02:08.053 --> 00:02:12.312
So now we're no longer dealing with
single categories, multiple categories.

32
00:02:12.312 --> 00:02:16.946
So expensesCol, where categories,

33
00:02:16.946 --> 00:02:23.907
where it equals this because
it must equal exactly that.

34
00:02:23.907 --> 00:02:28.023
With array contains, it's not an array
one, and I always get that confused cuz

35
00:02:28.023 --> 00:02:30.804
the array contains any is
all the multiple or values.

36
00:02:30.804 --> 00:02:36.348
Array-contains is single values,
whereas you can actually

37
00:02:36.348 --> 00:02:42.689
this is where the syntax, this is what,
array-contains looks like this.

38
00:02:42.689 --> 00:02:47.539
And so array-contains is usually used for
one value because now it's saying

39
00:02:47.539 --> 00:02:51.056
the array must contain
something that looks like that.

40
00:02:51.056 --> 00:02:58.294
Okay, so on equals we have that, so
now we're gonna do the second one,

41
00:02:58.294 --> 00:03:05.551
get the first 25 categories that
are categorized as ONLY fun OR kids.

42
00:03:05.551 --> 00:03:08.598
So within this I can say,

43
00:03:14.258 --> 00:03:18.133
expensesCol and

44
00:03:18.133 --> 00:03:22.841
where categories,

45
00:03:25.058 --> 00:03:32.028
And array-contains-any, fun, kids.

46
00:03:46.229 --> 00:03:47.056
Limit 25.
All right, so

47
00:03:47.056 --> 00:03:50.218
now the only thing I meant to say
as only it's just fun or kids.

48
00:03:50.218 --> 00:03:54.370
And so within here we have fun,
taxes, kids,

49
00:03:54.370 --> 00:03:58.852
utilities, kids, healthcare, fun, houses.

50
00:03:58.852 --> 00:04:03.070
But no matter what,
it's going to be fun and

51
00:04:03.070 --> 00:04:07.292
kids is just going to be the results,
yeah.

52
00:04:07.292 --> 00:04:09.517
And so this one is fun,
just single one of fun.

53
00:04:09.517 --> 00:04:12.636
So now, I can query based upon multiple or
values.

54
00:04:19.137 --> 00:04:23.564
And so this is an array-contains one
where it says give me the first ten

55
00:04:23.564 --> 00:04:26.354
categories that contain the fun category.

56
00:04:26.354 --> 00:04:32.012
So where, categories,

57
00:04:32.012 --> 00:04:34.943
array-contains, fun.

58
00:04:38.830 --> 00:04:43.286
And so right here, it's fun, taxes, fun,

59
00:04:43.286 --> 00:04:48.108
housing, each field is
guaranteed to have fun.

60
00:04:48.108 --> 00:04:48.923
I like this query.

61
00:04:48.923 --> 00:04:50.677
This one right here is more advanced.

62
00:04:50.677 --> 00:04:55.819
It says, get the first 25 expenses
that occurred in January,

63
00:04:55.819 --> 00:05:02.118
2021, but not on 12/30,
12/26, 12/23, 12/28.

64
00:05:02.118 --> 00:05:05.909
So this is just like the one
we did in the previous one,

65
00:05:05.909 --> 00:05:08.451
but it has more restrictions on it.

66
00:05:08.451 --> 00:05:13.926
So getting to that, we can just copy
this over for the sake of time.

67
00:05:17.740 --> 00:05:22.956
And so get the first, so you can get
rid of food for this, get the first 25.

68
00:05:22.956 --> 00:05:30.531
So limit 25 that occurred within January,
but not on.

69
00:05:30.531 --> 00:05:35.597
So in this case, instead of not equals,

70
00:05:35.597 --> 00:05:42.004
I can say not-in, and
then this has to all be date.

71
00:05:42.004 --> 00:05:48.111
So what I'm gonna do here is
just format it out like this,

72
00:05:48.111 --> 00:05:52.197
so we have 12/26, 12/30.

73
00:05:54.902 --> 00:05:57.785
12/23 and 12/28.

74
00:06:05.906 --> 00:06:10.327
So now when I refresh,
let's look for those dates.

75
00:06:10.327 --> 00:06:13.644
I only needed the first 25 and
I think there's more than that, so

76
00:06:13.644 --> 00:06:14.778
up until like 250.

77
00:06:17.044 --> 00:06:20.578
Yeah, so we have all these dates,
still, more, wow!

78
00:06:20.578 --> 00:06:22.658
This is big.

79
00:06:22.658 --> 00:06:24.107
Let's do 350.

80
00:06:29.431 --> 00:06:36.762
Man, this is still,
this is a huge collection, wow, 450.

81
00:06:36.762 --> 00:06:37.978
All right, that's more like it.

82
00:06:37.978 --> 00:06:41.793
So here, we don't have 12/26, 30, 23, 28.

83
00:06:41.793 --> 00:06:47.366
So 29 to 27, so we're skipping out of 28.

84
00:06:47.366 --> 00:06:50.539
Same here, when we get to 24,
we don't have 23.

85
00:06:50.539 --> 00:06:54.094
We go straight to 22 and
then we also skipped over 26.

86
00:06:54.094 --> 00:06:58.101
So now we've limited out specific dates.

87
00:06:58.101 --> 00:07:02.282
So that is querying with both, not in, in,

88
00:07:02.282 --> 00:07:06.584
with querying with array values for
arrays.

89
00:07:06.584 --> 00:07:09.642
It's a really powerful way of
getting more out of your query.

90
00:07:09.642 --> 00:07:13.127
So if you're structuring your
data in Firestore by saying, hey,

91
00:07:13.127 --> 00:07:14.681
let me store this as an array,

92
00:07:14.681 --> 00:07:18.247
there's a lot more querying power
that you're gonna get out of it.

93
00:07:18.247 --> 00:07:22.233
But one thing that I think was
serendipitous that happened was.

94
00:07:22.233 --> 00:07:26.494
You notice how to keep increasing this
limit to get more, and more, and more?

95
00:07:26.494 --> 00:07:30.747
Well, there's gonna be a lot of times
in your queries where you want to

96
00:07:30.747 --> 00:07:35.450
continue the range, where you say, hey,
I got the first page, so to speak.

97
00:07:35.450 --> 00:07:38.292
So I wanna get the second page or
the third page.

98
00:07:38.292 --> 00:07:42.475
On FireStore we have a whole set
of operators that we call cursors,

99
00:07:42.475 --> 00:07:45.401
that allow us to not
only increase the window.

100
00:07:45.401 --> 00:07:49.201
Because you can feasibly see how
every time you click the button,

101
00:07:49.201 --> 00:07:51.287
you could just increase the limit.

102
00:07:51.287 --> 00:07:57.330
But then you'd go from
reading 0 to 100 to 0 to 450.

103
00:07:57.330 --> 00:08:00.970
And you're just increasing this range
that might not be needed for the page,

104
00:08:00.970 --> 00:08:04.004
cuz you're only ever showing maybe
a hundred results at a time.

105
00:08:04.004 --> 00:08:07.068
So what we're gonna look into
doing next is called cursoring.

106
00:08:07.068 --> 00:08:11.884
Which is keeping an active window of
a hundred or whatever end amount of

107
00:08:11.884 --> 00:08:16.059
documents you want in a query
from one section on to the next.

108
00:08:16.059 --> 00:08:21.497
&gt;&gt; Is it possible to query
where category equals fun or

109
00:08:21.497 --> 00:08:25.551
food or where an author equals David?

110
00:08:25.551 --> 00:08:28.766
&gt;&gt; Yes, that right there, you could do,

111
00:08:28.766 --> 00:08:34.429
based on a composite query because
you have categories as one field.

112
00:08:34.429 --> 00:08:38.993
And then author name
would be another field.

113
00:08:38.993 --> 00:08:43.361
And so within those, you would have
to create a composite query for

114
00:08:43.361 --> 00:08:46.020
production, but yes, you can do that.

