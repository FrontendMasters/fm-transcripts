WEBVTT

1
00:00:00.000 --> 00:00:04.587
And so now let's let's go and let's say
that I'm gonna skip over these expenses

2
00:00:04.587 --> 00:00:07.430
ones for
now because it's the same kind of thing.

3
00:00:07.430 --> 00:00:11.976
And for the sake of time, let's get
into some more structural things.

4
00:00:11.976 --> 00:00:15.812
So I want to make sure that a user
must have a first name and an email.

5
00:00:15.812 --> 00:00:20.056
So now I'm starting to look at
things that are more like schema.

6
00:00:20.056 --> 00:00:24.899
So inside of my rules file, I wanna say,

7
00:00:24.899 --> 00:00:29.743
allow read, write if isUserOwned, but

8
00:00:29.743 --> 00:00:35.169
I also will say,
allow read if isUserOwned.

9
00:00:35.169 --> 00:00:40.170
But I'm gonna split it out and say,
allow write if isUserOwned, but

10
00:00:40.170 --> 00:00:44.927
also also if, write some other
functions so it says isUserObject

11
00:00:46.791 --> 00:00:52.742
And so up here I'll write
a function called, isUserObject.

12
00:00:52.742 --> 00:00:57.748
And forth here I can check to see,
okay, is the data that's coming in,

13
00:00:57.748 --> 00:01:01.098
does it have what the data
that I want it to have?

14
00:01:01.098 --> 00:01:03.329
And there's multiple ways
of actually doing this.

15
00:01:03.329 --> 00:01:07.091
There's sort of, hey, I just wanna make
sure the keys exist kind of way and

16
00:01:07.091 --> 00:01:11.119
there's also I wanna make sure that the
values the data types are what they are.

17
00:01:11.119 --> 00:01:15.323
So one way to do that is I can say,
all right,

18
00:01:15.323 --> 00:01:20.329
let's return request.resource,
this is the data

19
00:01:20.329 --> 00:01:25.349
that is being attempted to
be saved to the database.

20
00:01:25.349 --> 00:01:31.839
And then I can call .data, and then now
I have this special object called .keys.

21
00:01:31.839 --> 00:01:36.467
And keys is a list type so
fire this this SciGirls is a full

22
00:01:36.467 --> 00:01:41.596
language full of all of these
types that are embedded into it.

23
00:01:41.596 --> 00:01:46.520
And so with keys,
I can call .hasAll, and I can say,

24
00:01:46.520 --> 00:01:52.547
make sure that it has first, and
also make sure that it has email.

25
00:01:54.532 --> 00:01:58.542
And now, when I write that in,

26
00:01:58.542 --> 00:02:02.411
let's write a test for that.

27
00:02:02.411 --> 00:02:07.485
So I can say a user must have a email,
so let's do as an authenticated user.

28
00:02:12.080 --> 00:02:17.258
Name is David as an email, so
I will expect this to work,

29
00:02:17.258 --> 00:02:20.909
so let's like comment on these tests.

30
00:02:20.909 --> 00:02:23.540
So that's what we do at test anyways,
right?

31
00:02:23.540 --> 00:02:27.335
We just comment them out,
we don't want them anymore.

32
00:02:27.335 --> 00:02:32.055
Alright, and now it's the NPM run test.

33
00:02:32.055 --> 00:02:32.865
What's that?

34
00:02:32.865 --> 00:02:34.887
We have permission denied.

35
00:02:34.887 --> 00:02:39.977
I thought I could get there but
it won't let me get there, why is that?

36
00:02:39.977 --> 00:02:45.496
That's interesting, well, when you're
debugging these kinds of problems.

37
00:02:45.496 --> 00:02:49.601
One of the things you can do is you
go into the FireStore emulator and

38
00:02:49.601 --> 00:02:52.180
we can click this thing called Requests.

39
00:02:52.180 --> 00:02:56.272
And this is the request monitor and
while the emulator runs and

40
00:02:56.272 --> 00:03:00.206
while you process requests against it,
it will log each and

41
00:03:00.206 --> 00:03:03.443
every one of these and
tell you their operation.

42
00:03:03.443 --> 00:03:08.605
So I tried to write this one, and we can
see that it even tells us on the line

43
00:03:08.605 --> 00:03:13.787
that it failed on, and it gives us
all the information of what happened.

44
00:03:13.787 --> 00:03:17.786
So in this case,
we can see that we look at requests.auth.

45
00:03:17.786 --> 00:03:22.166
Okay, I'm david_123, so
that worked, I like that.

46
00:03:22.166 --> 00:03:27.077
So if I look at requests.resource,
it has a name and an email.

47
00:03:27.077 --> 00:03:33.279
I call it name, that's a problem
because I was gonna call it first.

48
00:03:33.279 --> 00:03:38.011
So it rejected it because it says, hey,
you have to have all of these keys.

49
00:03:38.011 --> 00:03:43.056
You can have more than these keys if you
want, but you have to have these keys.

50
00:03:43.056 --> 00:03:46.713
Sorry, okay, cool,
I see where I messed up there.

51
00:03:46.713 --> 00:03:53.247
So now instead of name let
me change that to first.

52
00:03:53.247 --> 00:03:58.002
Now let's save and
let's run this test again, hey,

53
00:03:58.002 --> 00:04:04.142
look at that six test failed,
I don't know why that one's running.

54
00:04:04.142 --> 00:04:06.443
Why is that happening?

55
00:04:06.443 --> 00:04:12.405
That's weird,
let me look why as to that is.

56
00:04:12.405 --> 00:04:19.717
Well, we can see in the request.resource,
in that second test we wrote,

57
00:04:19.717 --> 00:04:24.426
we are writing name, so,
our test is now invalid.

58
00:04:24.426 --> 00:04:29.253
So We actually in this test, we can see
that we can either change this just to say

59
00:04:29.253 --> 00:04:33.517
first, so it keeps the same types or
we could just use the other test.

60
00:04:33.517 --> 00:04:38.079
I don't like to have duplicate tests
because this test test one thing,

61
00:04:38.079 --> 00:04:42.567
whereas this test right here tests
both the authenticated context and

62
00:04:42.567 --> 00:04:44.179
the shape of the object.

63
00:04:44.179 --> 00:04:47.625
So it kinda is a nice two for one, you
could do them separately if you wanted to,

64
00:04:47.625 --> 00:04:50.047
but you always run the risk
of them getting out of sync.

65
00:04:50.047 --> 00:04:53.464
That's it's more of a testing
thing than a Firebase thing.

66
00:04:53.464 --> 00:04:58.191
But always be aware that sometimes
you can write tests as you lock down

67
00:04:58.191 --> 00:05:00.812
your schema that will fail upstream.

68
00:05:00.812 --> 00:05:02.622
So just something important to know.

69
00:05:02.622 --> 00:05:06.404
Another thing we can do is we also can
check types in the sense of saying hey

70
00:05:06.404 --> 00:05:08.888
an expense has to have
a cost greater than zero.

71
00:05:08.888 --> 00:05:11.543
We don't want people putting
negative costs in and

72
00:05:11.543 --> 00:05:14.888
get money back on their expense reports or
something like that.

73
00:05:14.888 --> 00:05:17.790
So how would we do something like that?

74
00:05:17.790 --> 00:05:20.097
Well, the same thing with expenses.

75
00:05:20.097 --> 00:05:26.177
We can say okay,
allow read if it's UserOwned,

76
00:05:26.177 --> 00:05:30.034
but we'll allow write if it's

77
00:05:30.034 --> 00:05:34.944
isUserOwned(request.data.UID.

78
00:05:34.944 --> 00:05:40.391
And I will write a function up here and

79
00:05:40.391 --> 00:05:46.191
say, function costs more than zero and

80
00:05:46.191 --> 00:05:53.403
we'll return request.resource.data.cost

81
00:05:53.403 --> 00:05:56.761
is greater than zero.

82
00:05:56.761 --> 00:06:02.144
I also could say like is number and

83
00:06:02.144 --> 00:06:04.835
then chain on and

84
00:06:04.835 --> 00:06:10.996
say request.resource.data &gt; 0.

85
00:06:10.996 --> 00:06:15.140
And this is operator right here will check
to see to make sure that it is that type.

86
00:06:15.140 --> 00:06:18.838
So if someone tried to put a cost
in as a string, it would reject it.

87
00:06:18.838 --> 00:06:22.137
And so you can also in the same
way where I'm specifying keys,

88
00:06:22.137 --> 00:06:24.556
I'm not checking to see
if first is a string.

89
00:06:24.556 --> 00:06:28.678
I'm not checking to see if an email is
an email, but I could do that all in here.

90
00:06:28.678 --> 00:06:33.011
And so instead of using keys,
I could say, request.data.cost,

91
00:06:33.011 --> 00:06:36.286
this number and
request.data.first is string.

92
00:06:36.286 --> 00:06:40.898
And I can even, inside of email,
I can even do a regex in there and

93
00:06:40.898 --> 00:06:43.897
say and it matches this regex of an email.

94
00:06:43.897 --> 00:06:48.852
Which I can't write regex hope there's a
Frontend Masters course on that because I

95
00:06:48.852 --> 00:06:50.990
really need to brush up on my regex.

96
00:06:50.990 --> 00:06:55.630
But you can do that, you can write regex
and say, boom, only allow this for

97
00:06:55.630 --> 00:06:56.967
authorized emails.

98
00:06:56.967 --> 00:07:03.768
So now that we have that we'll say,
&amp;&amp; costsMoreThanZero.

99
00:07:03.768 --> 00:07:09.515
So I'm gonna save, and now let's see here.

100
00:07:09.515 --> 00:07:12.341
I will just start from scratch here.

101
00:07:12.341 --> 00:07:16.877
So expenses have to be user owned,
so we'll say,

102
00:07:16.877 --> 00:07:21.413
const is testEnv.authenticatedcontext(),

103
00:07:21.413 --> 00:07:25.951
and we can pass in the user ID,
so david_123.

104
00:07:25.951 --> 00:07:31.963
And then we can say, const user expenseDoc

105
00:07:31.963 --> 00:07:41.315
= context.firestore.doc('expenses/some
expense').

106
00:07:41.315 --> 00:07:45.133
I can check to see if something succeeds.

107
00:07:45.133 --> 00:07:49.376
And actually I wanna see if it fails,
so, I'm gonna pay some field code.

108
00:07:53.669 --> 00:07:58.167
And I'm gonna say,

109
00:07:58.167 --> 00:08:06.906
expect that a cost of -11 is denied.

110
00:08:06.906 --> 00:08:10.951
Now, let's run our tests.

111
00:08:10.951 --> 00:08:14.850
And we can see that, yeah, it passes.

112
00:08:14.850 --> 00:08:15.905
So that's great.

113
00:08:15.905 --> 00:08:19.578
So I'm starting to be able to do more and
more complex things.

114
00:08:19.578 --> 00:08:24.512
Another thing that you can
do is you can specify that

115
00:08:24.512 --> 00:08:27.736
only certain keys have updated.

116
00:08:27.736 --> 00:08:32.647
So let's say it was really important to
you that, hey, after your expense gets

117
00:08:32.647 --> 00:08:37.727
created, we do not allow that date to be
changed due to whatever auditing reason.

118
00:08:37.727 --> 00:08:42.311
And that needs ID 79 form
in order to be updated or

119
00:08:42.311 --> 00:08:45.593
whatever that sounds legitimate.

120
00:08:45.593 --> 00:08:50.022
But we wanna make sure that
we can update dates, so

121
00:08:50.022 --> 00:08:54.247
to do that keys also has
even more that we can do.

122
00:08:54.247 --> 00:08:58.435
So we can say function

123
00:08:58.435 --> 00:09:03.558
dateIsNotUpdated().

124
00:09:03.558 --> 00:09:06.999
And what we can do here say, okay,

125
00:09:06.999 --> 00:09:11.636
requests.resource.data.keys(), and

126
00:09:11.636 --> 00:09:17.475
then we actually can do something
every day called a diff.

127
00:09:17.475 --> 00:09:21.182
And with a diff,
what is the syntax for diff?

128
00:09:21.182 --> 00:09:27.463
So with this we can say,
we can call data.diff, that's a diff and

129
00:09:27.463 --> 00:09:34.575
then unchanged keys My gosh,
where's my code?

130
00:09:34.575 --> 00:09:38.924
Here it is, data.diff.

131
00:09:38.924 --> 00:09:43.204
And then we can check the unchanged
keys and we could say, hasOnly,

132
00:09:43.204 --> 00:09:47.201
and it could be hasOnly('first") or
something like that.

133
00:09:47.201 --> 00:09:50.576
We only allow first to the, or
in this case what I think, yeah,

134
00:09:50.576 --> 00:09:52.943
has only created at or
something like that.

135
00:09:52.943 --> 00:09:57.998
So, there's also a bunch of other
operators that you can use in this case,

136
00:09:57.998 --> 00:10:02.429
but we can say, hey,
we'll only allow these ones to be updated.

137
00:10:02.429 --> 00:10:06.607
So it'd be like first and RX will be,

138
00:10:06.607 --> 00:10:10.895
would be 'cost', 'category' and 'uid'.

139
00:10:10.895 --> 00:10:13.756
Maybe we can allow who changes it or
maybe we don't allow that.

140
00:10:13.756 --> 00:10:16.984
So only costs and
category can change afterwards.

141
00:10:16.984 --> 00:10:20.643
And so with expenses I could say,

142
00:10:20.643 --> 00:10:25.217
allow write, but I also can say this for,

143
00:10:25.217 --> 00:10:30.314
if UserOwned,
push like the end on that side,

144
00:10:30.314 --> 00:10:36.870
&amp;&amp; costMoreThanZero()
&amp;&amp; dateIsNotUpdated().

145
00:10:36.870 --> 00:10:39.441
So that's one thing you can do.

146
00:10:39.441 --> 00:10:44.247
I'm not gonna run this test because
I do want to cover one more

147
00:10:44.247 --> 00:10:47.369
very important bit of security rules.

148
00:10:47.369 --> 00:10:50.185
And that is Role Based Access Control.

