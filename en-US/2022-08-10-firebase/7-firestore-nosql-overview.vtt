WEBVTT

1
00:00:00.000 --> 00:00:02.155
So this entire time
we've been very general.

2
00:00:02.155 --> 00:00:05.099
I've been like well I'm gonna
create with the emulators,

3
00:00:05.099 --> 00:00:07.456
I created a Firebase project,
I'm gonna do this.

4
00:00:07.456 --> 00:00:12.152
I wanted to show a very general
workflow of what the Firebase ecosystem

5
00:00:12.152 --> 00:00:16.926
looks like but now you have a good idea
of when we're using what tools and

6
00:00:16.926 --> 00:00:22.500
how we deploy websites and how we connect
out to databases and sign in users.

7
00:00:22.500 --> 00:00:27.379
I wanna get very focused so from here on
out we're going to be very focused on

8
00:00:27.379 --> 00:00:32.260
individual Firebase services and
I wanna start out with a very big one.

9
00:00:32.260 --> 00:00:35.300
This section is all about Firestore.

10
00:00:35.300 --> 00:00:41.350
So Firestore is a NoSQL database with
real time and offline capabilities.

11
00:00:41.350 --> 00:00:46.321
And whenever I teach NoSQL
databases I always am a little bit

12
00:00:46.321 --> 00:00:51.700
hesitant because most developers
come from an SQL background.

13
00:00:51.700 --> 00:00:57.481
And what I've learned is cuz I too came
from an SQL background, is that NoSQL can

14
00:00:57.481 --> 00:01:03.627
be a little bit jarring at first to SQL
developers because they're very different.

15
00:01:03.627 --> 00:01:07.013
And it's not that one is
better than the other,

16
00:01:07.013 --> 00:01:13.370
they're both two totally different tools
that are great for different purposes.

17
00:01:13.370 --> 00:01:16.640
It's that they prioritize
different things.

18
00:01:18.770 --> 00:01:24.549
So what I wanna do to explain Firestore
is I wanna talk about how SQL databases

19
00:01:24.549 --> 00:01:30.346
work at high level and then sort of map
those concepts on to NoSQL databases.

20
00:01:30.346 --> 00:01:34.627
And now just a quick show of hands or
maybe in the chat,

21
00:01:34.627 --> 00:01:38.531
who here comes from
background whether at work or

22
00:01:38.531 --> 00:01:44.550
whether from just learning, that you
primarily use SQL or SQL databases?

23
00:01:44.550 --> 00:01:48.670
Okay, who here is NoSQL databases?

24
00:01:48.670 --> 00:01:52.730
We actually got a good mix here, wow.

25
00:01:52.730 --> 00:01:55.490
When I first started doing this,
that was not the case.

26
00:01:55.490 --> 00:01:59.029
It was about 90 to 100% of people.

27
00:01:59.029 --> 00:02:05.761
So in the SQL world, we have all of our
data formatted and structured in tables.

28
00:02:05.761 --> 00:02:10.610
And with tables we have
two aspects of them.

29
00:02:10.610 --> 00:02:12.573
We have rows and we have columns.

30
00:02:12.573 --> 00:02:14.790
Columns are individual data types.

31
00:02:14.790 --> 00:02:18.609
So first name is a string,
high score here is a number.

32
00:02:18.609 --> 00:02:23.281
And some columns are more important
than others, well all columns are very

33
00:02:23.281 --> 00:02:27.371
important but some are more
significant I would say than others.

34
00:02:27.371 --> 00:02:32.023
And in this case the UID column is
very important because it uniquely

35
00:02:32.023 --> 00:02:35.544
identifies a user and
that is called a primary key.

36
00:02:35.544 --> 00:02:40.774
So having that primary key I can find
a user row which is what we usually

37
00:02:40.774 --> 00:02:45.390
retrieve back into our system and
hydrate into our objects.

38
00:02:46.630 --> 00:02:53.180
Now this is just a table of users but what
if I wanna store data that this user owns?

39
00:02:54.230 --> 00:02:58.688
Well I could go out and
if I'm making an expense tracking app,

40
00:02:58.688 --> 00:03:04.290
I could create a table called TBL expenses
and it has its own primary key of ID.

41
00:03:04.290 --> 00:03:08.649
I can store the cost of the expense,
the category, the date but

42
00:03:08.649 --> 00:03:14.408
then to assign the users ownership of that
record I create another column of UID that

43
00:03:14.408 --> 00:03:19.938
shares or relates that user back to TBL
users, this is known as the foreign key.

44
00:03:19.938 --> 00:03:25.403
And what's great about this is that all
my data, just looking at it, it's nice,

45
00:03:25.403 --> 00:03:31.125
it's squeaky clean, there's null columns,
everything is very well structured.

46
00:03:31.125 --> 00:03:36.368
There's no duplicated data everywhere,
it's highly what we call normalized.

47
00:03:36.368 --> 00:03:41.498
And if I wanna get this data back I just
create this little query where I say,

48
00:03:41.498 --> 00:03:46.556
select these fields from TBL expenses
where the user ID equals this user.

49
00:03:51.086 --> 00:03:55.961
Now one of the things about columns
with SQL is that all columns

50
00:03:55.961 --> 00:04:00.953
must exist on all rows,
you can't have a conditional column.

51
00:04:00.953 --> 00:04:06.108
And so let's say that we're building
this expense tracker app and

52
00:04:06.108 --> 00:04:10.169
there's a new feature that's
gonna come out to it.

53
00:04:10.169 --> 00:04:14.987
And someone says, hey, expenses,
they need to be approved but

54
00:04:14.987 --> 00:04:19.900
not all expenses, only business
expenses have to be approved.

55
00:04:19.900 --> 00:04:24.060
And so we need to store a field
that's shows whether that's the case.

56
00:04:24.060 --> 00:04:29.114
So I could say all right,
let me add an approval column but

57
00:04:29.114 --> 00:04:33.115
if it's true the expense
has been approved,

58
00:04:33.115 --> 00:04:37.260
if it's false it's been not approved.

59
00:04:37.260 --> 00:04:40.459
But what do I do about the cases
where it's a personal expense and

60
00:04:40.459 --> 00:04:43.020
it doesn't have to be approved?

61
00:04:43.020 --> 00:04:47.810
Well I guess I can make it nullable so
it doesn't apply to those categories.

62
00:04:47.810 --> 00:04:53.096
But now I'm I kind of in
a situation I don't like because

63
00:04:53.096 --> 00:04:58.059
this column type is Boolean but
it has three states.

64
00:04:58.059 --> 00:05:00.618
It has true, false and null and

65
00:05:00.618 --> 00:05:05.265
if the a column has three
states is it really a Boolean?

66
00:05:05.265 --> 00:05:07.089
Is a nullable Boolean still a Boolean?

67
00:05:07.089 --> 00:05:08.885
True, false and null, I don't know.

68
00:05:08.885 --> 00:05:10.965
Those are the kinda questions that
I think keep you up at night.

69
00:05:12.145 --> 00:05:16.667
So maybe I wanna rethink my data
structure differently and I say okay,

70
00:05:16.667 --> 00:05:21.421
well what if we go and let's just create
another table called TBL business

71
00:05:21.421 --> 00:05:26.270
expenses, and then that has an approval
table and TBL expenses doesn't.

72
00:05:26.270 --> 00:05:30.420
And now if someone says get me
all of the expenses together,

73
00:05:30.420 --> 00:05:32.540
I can write a query for that.

74
00:05:32.540 --> 00:05:36.006
And I say okay,
let me select the ID, the cost,

75
00:05:36.006 --> 00:05:39.561
the UID from the TBL expenses,
from this user and

76
00:05:39.561 --> 00:05:45.740
then let me union it from the business
expenses and so this all comes back.

77
00:05:45.740 --> 00:05:49.196
But now as my data model changes I
might end up having to do more and

78
00:05:49.196 --> 00:05:51.420
more things like this.

79
00:05:51.420 --> 00:05:55.660
And so the pro here is that the data
integrity I have is really high.

80
00:05:55.660 --> 00:05:57.504
As long as I keep my data normalized,

81
00:05:57.504 --> 00:06:00.239
as long as I keep structuring
everything out that way,

82
00:06:00.239 --> 00:06:05.010
all my columns they make sense, I can be
very sure of the data that's in there.

83
00:06:05.010 --> 00:06:09.940
But some of the cons are is that as
the data model grows our queries

84
00:06:09.940 --> 00:06:14.962
become more complex and the more
complex of a query is the harder it

85
00:06:14.962 --> 00:06:20.371
becomes to scale that query and
get it to respond in a very fast nature.

86
00:06:20.371 --> 00:06:24.777
And these highly normalized
data structures can

87
00:06:24.777 --> 00:06:28.219
lead us into writing slower queries.

88
00:06:29.220 --> 00:06:31.380
And to scale this up traditionally,

89
00:06:31.380 --> 00:06:36.200
in SQL databases you have to scale
what is referred to as vertically.

90
00:06:36.200 --> 00:06:40.844
So the two sort of main ideas or
methodologies of scaling within Cloud

91
00:06:40.844 --> 00:06:46.040
computing is you have vertically
scaling and horizontally scaling.

92
00:06:46.040 --> 00:06:48.517
Vertically scaling is when you say okay,

93
00:06:48.517 --> 00:06:52.357
on SQL databases I'm going to
just get a bigger better machine.

94
00:06:52.357 --> 00:06:54.713
I actually am not a hardware person so

95
00:06:54.713 --> 00:06:59.197
I don't know if they're bigger per say but
they're more expensive,

96
00:06:59.197 --> 00:07:03.073
they're more powerful machines and
so as my dataset grows,

97
00:07:03.073 --> 00:07:08.985
as my queries need to become more powerful
I need to get better machines to scale up.

98
00:07:08.985 --> 00:07:12.775
Whereas with NoSQL data bases
the data model is different.

99
00:07:12.775 --> 00:07:15.507
The way the database forms
is a lot different so

100
00:07:15.507 --> 00:07:18.949
I can actually scale what is
referred as to horizontally.

101
00:07:18.949 --> 00:07:22.091
And this means that instead
of getting bigger, better,

102
00:07:22.091 --> 00:07:25.241
faster machines I can just
get more machines in general.

103
00:07:25.241 --> 00:07:28.748
I can just reproduce my data
across multiple machines and

104
00:07:28.748 --> 00:07:33.569
the way that Cloud providers works and
specifically to with Cloud Firestore is

105
00:07:33.569 --> 00:07:38.240
that scaling up happens kind of
just completely transparent to you.

106
00:07:38.240 --> 00:07:41.783
Is that you are just getting data and
maybe you are spiking through a ton

107
00:07:41.783 --> 00:07:45.020
of traffic or your data is
growing at an incredible rate.

108
00:07:45.020 --> 00:07:49.103
Well in the background it's
horizontally scaling for you and

109
00:07:49.103 --> 00:07:52.257
you don't have to make
any of those decisions.

110
00:07:52.257 --> 00:07:57.632
So when it comes to looking
at SQL verse NoSQL is that

111
00:07:57.632 --> 00:08:05.880
in the NoSQL world is that we prioritize
reading data over writing data.

112
00:08:05.880 --> 00:08:11.026
So we prioritize getting a very very fast
read from the database, rather than making

113
00:08:11.026 --> 00:08:16.330
sure that all of our data is written
in a very great and normalized format.

114
00:08:16.330 --> 00:08:21.202
And to think about this go think
about the top five apps that you use

115
00:08:21.202 --> 00:08:25.986
on your phone and how often would
you say that you consume content

116
00:08:25.986 --> 00:08:29.989
from those apps versus enter
in data into those apps.

117
00:08:29.989 --> 00:08:34.363
So think about any social media app,
how often are you scrolling and

118
00:08:34.363 --> 00:08:39.275
seeing every post versus how many times
are you actually posting yourself or

119
00:08:39.275 --> 00:08:43.330
even just entering a like on the post or
something that?

120
00:08:43.330 --> 00:08:46.947
It's usually magnitudes higher
that we are consuming, so

121
00:08:46.947 --> 00:08:52.100
reading the content from any given system
than we are actually writing data into it.

122
00:08:54.740 --> 00:08:59.441
So as we go through this section
we're going to move away from but

123
00:08:59.441 --> 00:09:03.535
not entirely forget
the principles of normalization,

124
00:09:03.535 --> 00:09:09.220
having high integrity but
rigid models and even things like joints.

125
00:09:09.220 --> 00:09:12.812
And what we're going to get out of it in
return is we're gonna get fast queries,

126
00:09:12.812 --> 00:09:15.776
denormalization, we're gonna
learn some principles of that.

127
00:09:15.776 --> 00:09:18.926
And then all of our queries that we're
going to operate are all gonna work in

128
00:09:18.926 --> 00:09:19.433
real time.

129
00:09:22.123 --> 00:09:25.117
So we saw how data is
structured in SQL databases,

130
00:09:25.117 --> 00:09:28.080
how is it structured in Firestore?

131
00:09:28.080 --> 00:09:31.137
Everything in Firestore
is done with hierarchy.

132
00:09:31.137 --> 00:09:34.895
We have collection, document,
collection, document and

133
00:09:34.895 --> 00:09:37.420
it all flows down a tree like that.

134
00:09:37.420 --> 00:09:40.920
You can't store documents at the top
level, everything starts with collections.

135
00:09:43.080 --> 00:09:45.928
So if we think about tables,
while we always move from tables to

136
00:09:45.928 --> 00:09:48.024
collections they're not
exactly the same but

137
00:09:48.024 --> 00:09:50.840
we can kind of think about
them in that same idea.

138
00:09:50.840 --> 00:09:53.616
So in this case we have
an expenses collection and

139
00:09:53.616 --> 00:09:57.400
then within here we have two
documents with generated IDs.

140
00:09:57.400 --> 00:10:02.120
And the documents have IDs and
we can think about them as primary keys.

141
00:10:02.120 --> 00:10:06.961
And within there we have data which
is sort of in this object format and

142
00:10:06.961 --> 00:10:13.220
this is the cost UID category, we refer
to these as fields instead of columns.

143
00:10:13.220 --> 00:10:17.983
And what we noticed here is that in the
case of our business expenses versus our

144
00:10:17.983 --> 00:10:22.895
regular expenses is that I can actually
say approved true on the second document

145
00:10:22.895 --> 00:10:26.660
rather than on the first document and
that's fine.

146
00:10:26.660 --> 00:10:32.950
Documents do not have to conform to any
type of schema, column format or anything.

147
00:10:32.950 --> 00:10:35.786
You could have a collection
called grab bag and

148
00:10:35.786 --> 00:10:40.077
every single document could follow
a completely different schema and

149
00:10:40.077 --> 00:10:45.270
different structure entirely, there's
nothing stopping you from doing that.

150
00:10:45.270 --> 00:10:49.539
There are ways which we'll see what
security rules, to actually enforce that

151
00:10:49.539 --> 00:10:53.871
documents do follow a certain structure
and data types but at the database level

152
00:10:53.871 --> 00:10:58.610
there's nothing preventing you from just
putting whatever data structure you want.

153
00:10:58.610 --> 00:11:03.104
So you have total flexibility now and
you don't have to worry about

154
00:11:03.104 --> 00:11:06.966
adhering to different columns
as your data model grows.

155
00:11:06.966 --> 00:11:10.316
And then as far as thinking about data and
rows and

156
00:11:10.316 --> 00:11:14.819
a table, while rows are individual
documents within the table.

157
00:11:14.819 --> 00:11:19.333
So we have this document ID and
then all that document data and

158
00:11:19.333 --> 00:11:25.104
just like with columns in SQL is that all
of our fields can have complex types.

159
00:11:25.104 --> 00:11:29.442
It's not just JSON,
it's not just strings and numbers and

160
00:11:29.442 --> 00:11:33.782
Boolean, you can store timestamps and
geo coordinates and

161
00:11:33.782 --> 00:11:38.760
binary data and lots of complex
types inside of a Firestore document

