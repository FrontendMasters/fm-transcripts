WEBVTT

1
00:00:00.000 --> 00:00:05.023
All right, so I'm going to show how we
can have a better sort of development

2
00:00:05.023 --> 00:00:10.236
workflow with security rules and how we
can actually do some testing with it.

3
00:00:10.236 --> 00:00:17.038
So I'm gonna cd into, what is it,
5-security-rules, cd start.

4
00:00:17.038 --> 00:00:18.149
Cd is not a command.

5
00:00:18.149 --> 00:00:22.945
I can't see my, all right,
so let's code into that.

6
00:00:28.216 --> 00:00:32.975
All right, so, The way this works is

7
00:00:32.975 --> 00:00:37.056
that we have a Firebase
rules testing library.

8
00:00:37.056 --> 00:00:41.181
So it's a library that's completely
dedicated to making sure that your rules

9
00:00:41.181 --> 00:00:43.063
work the way that they should work.

10
00:00:43.063 --> 00:00:46.947
And then this right here,
is I'm using a test framework called Ava.

11
00:00:46.947 --> 00:00:51.012
But the most important thing is
that we have this method called

12
00:00:51.012 --> 00:00:53.135
initializeTestEnvironment.

13
00:00:53.135 --> 00:00:55.164
And this contains a ton of power.

14
00:00:55.164 --> 00:00:58.898
Because what it allows us to do
is we just pass in a project ID,

15
00:00:58.898 --> 00:01:01.993
we use Node's readFileSync
to read in our rules.

16
00:01:01.993 --> 00:01:06.635
We pass in where the emulator lives,
so localhost and port 8080.

17
00:01:06.635 --> 00:01:11.554
And then now, look at that,
we get to write tests that assert

18
00:01:11.554 --> 00:01:16.093
that our rules are going to
be working in specific ways.

19
00:01:16.093 --> 00:01:20.177
So, in this case, and what's really
cool is I can say, all right,

20
00:01:20.177 --> 00:01:23.276
I'm going to create
an unauthenticated context.

21
00:01:23.276 --> 00:01:26.479
And so, that gives me a context
where I have access to Firestore.

22
00:01:26.479 --> 00:01:29.563
And this uses a different, but
similar API that does chaining.

23
00:01:29.563 --> 00:01:32.741
So you can call firestore.doc.

24
00:01:32.741 --> 00:01:35.137
And then you could say
firestore.collection.doc.

25
00:01:35.137 --> 00:01:38.846
It's very jQuery-esque, for
those of you who are like me and

26
00:01:38.846 --> 00:01:40.570
miss the old days of jQuery.

27
00:01:40.570 --> 00:01:44.997
And then what we can do is we have,
stop covering up the boxes.

28
00:01:44.997 --> 00:01:47.184
We have, my gosh.

29
00:01:47.184 --> 00:01:52.296
We have assertFails, which is a test
method provided by our library that says,

30
00:01:52.296 --> 00:01:56.034
hey, I wanna make sure that
when I run this userDoc.set,

31
00:01:56.034 --> 00:01:59.647
that it fails because this
is an unauthenticated user.

32
00:01:59.647 --> 00:02:00.990
It shouldn't happen.

33
00:02:00.990 --> 00:02:05.680
And then I have this little special thing
I wrote to make it work with this test

34
00:02:05.680 --> 00:02:09.802
library that just says the result.code
is permissioned to that.

35
00:02:09.802 --> 00:02:11.130
That's all that is.

36
00:02:11.130 --> 00:02:16.454
And so right now, where I write my rules,
is I write them in this file.

37
00:02:16.454 --> 00:02:18.835
And I just have read true, write true.

38
00:02:18.835 --> 00:02:20.511
So that's not gonna work.

39
00:02:20.511 --> 00:02:23.292
And so what I'm gonna do first
is I'm gonna run the emulators.

40
00:02:23.292 --> 00:02:26.940
So I'm gonna say,
firebase emulators:start.

41
00:02:26.940 --> 00:02:34.294
And I'm only gonna run firestore,
not function, sorry, firestore.

42
00:02:35.769 --> 00:02:38.211
Awesome, so now we're running Firestore.

43
00:02:38.211 --> 00:02:40.909
And I'm gonna open up another tab.

44
00:02:40.909 --> 00:02:43.136
And let's run a test.

45
00:02:43.136 --> 00:02:46.353
So I'm gonna say, npm test.

46
00:02:46.353 --> 00:02:49.081
And I have all these rules,
and all ten of them failed.

47
00:02:49.081 --> 00:02:53.532
And we can see that this one rejects that
said, hey, I expected this to fail but

48
00:02:53.532 --> 00:02:54.418
it succeeded.

49
00:02:54.418 --> 00:02:57.628
And this kind of information is so
important.

50
00:02:57.628 --> 00:03:01.738
Because if you have a very important
rules file, which all rules file rules

51
00:03:01.738 --> 00:03:05.849
are important, you wanna know that any
change that you might make to them,

52
00:03:05.849 --> 00:03:08.214
might come cause a problem in your system.

53
00:03:08.214 --> 00:03:10.866
And this is exactly where you can do that.

54
00:03:10.866 --> 00:03:17.527
And so here, I can write rules and
I can test the rules at the same time.

55
00:03:17.527 --> 00:03:22.063
So to kind of get a head-start on myself,
I'm going to copy this,

56
00:03:22.063 --> 00:03:24.014
which we wrote previously.

57
00:03:26.119 --> 00:03:29.221
And just for reference, for
those who are watching, when you create

58
00:03:29.221 --> 00:03:32.609
a firestore.rules file, it's gonna
not have any syntax highlighting.

59
00:03:32.609 --> 00:03:34.581
This is really cool.

60
00:03:34.581 --> 00:03:37.808
It's a community-made one, but it's so

61
00:03:37.808 --> 00:03:42.838
good that we've just been able to
use this as our recommended one.

62
00:03:42.838 --> 00:03:46.769
And you just install this into VSCode and
you get nice syntax highlighting.

63
00:03:46.769 --> 00:03:48.118
And it even has a little bit
of IntelliSense into it.

64
00:03:48.118 --> 00:03:50.258
It's really nice.

65
00:03:50.258 --> 00:03:56.145
So now, if I go and I run my rules again,

66
00:03:56.145 --> 00:03:59.185
nine tests failed.

67
00:03:59.185 --> 00:04:00.448
All right, great.

68
00:04:00.448 --> 00:04:02.309
So I'm working my way up.

69
00:04:02.309 --> 00:04:08.046
And so it's very TDD to do it this way,
which is test-driven development.

70
00:04:08.046 --> 00:04:10.395
But I can write out these tests that say,

71
00:04:10.395 --> 00:04:13.652
these are the things that
are most important for my app.

72
00:04:13.652 --> 00:04:17.589
And I actually find that writing
security rules this way with TDD,

73
00:04:17.589 --> 00:04:19.355
I'm not a big TDD developer.

74
00:04:19.355 --> 00:04:22.206
I don't know if someone's gonna [SOUND],
but

75
00:04:22.206 --> 00:04:26.340
I'm not a big TDD developer unless
I'm writing security rules.

76
00:04:26.340 --> 00:04:31.322
Because it's really easy for me to map out
all the requirements of my security rules.

77
00:04:31.322 --> 00:04:36.040
And then from there, I can start
writing rules that satisfy those and

78
00:04:36.040 --> 00:04:40.768
makes me feel better that I'm getting
everything in the right spot.

79
00:04:40.768 --> 00:04:44.492
So what I can do now is that I wanna say,
okay,

80
00:04:44.492 --> 00:04:50.390
I've tested that an unauthenticated
user fails to write to a profile.

81
00:04:50.390 --> 00:04:53.919
But I also wanna test to see
if an authenticated user.

82
00:04:53.919 --> 00:04:56.427
So I'm gonna paste in similar code.

83
00:04:56.427 --> 00:05:00.085
And instead of calling
an unauthenticatedContext,

84
00:05:00.085 --> 00:05:03.588
I'm gonna say
testEnv.authenticatedContext.

85
00:05:03.588 --> 00:05:05.782
And this is going to be david_123.

86
00:05:05.782 --> 00:05:11.710
And so now we'll be logged
in a mock way of this user.

87
00:05:11.710 --> 00:05:15.359
And so
if I try to access user at david_123,

88
00:05:15.359 --> 00:05:19.474
instead of assertFails,
I can say assertSucceeds.

89
00:05:19.474 --> 00:05:24.430
And then I think with this,
the way this works is it returns void.

90
00:05:24.430 --> 00:05:30.365
Because successful ones don't throw any
errors or anything, they just return void.

91
00:05:30.365 --> 00:05:36.984
So I can say, what is it,
t.is (result, undefined).

92
00:05:39.527 --> 00:05:43.196
So now we save.

93
00:05:43.196 --> 00:05:44.339
Look at, eight tests failed.

94
00:05:44.339 --> 00:05:48.230
I'm just making my way up the tree.

95
00:05:48.230 --> 00:05:51.490
Every test-driven developer
would be really happy with me.

