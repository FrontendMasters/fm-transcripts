WEBVTT

1
00:00:00.413 --> 00:00:06.129
Now, composite queries, they involve
querying on more than one field.

2
00:00:06.129 --> 00:00:11.390
And so the thing about composite queries
is that in Firestore if you wanna

3
00:00:11.390 --> 00:00:16.493
use composite queries, the way you
have to create a composite index.

4
00:00:16.493 --> 00:00:19.945
And you can create them
manually in the console, or

5
00:00:19.945 --> 00:00:24.921
you can just run your query, and
then we'll spit out a link that says hey,

6
00:00:24.921 --> 00:00:28.871
we can't run this query until
you have a composite index.

7
00:00:28.871 --> 00:00:32.379
So click on this link and then it takes
you out to the firebase console, and

8
00:00:32.379 --> 00:00:33.748
it will generate it for you.

9
00:00:33.748 --> 00:00:36.124
You just wanna say yes,
this is the query I want, and

10
00:00:36.124 --> 00:00:37.914
it kinda pops up a little box like this.

11
00:00:37.914 --> 00:00:42.293
You say, create index, and
it's because in this case,

12
00:00:42.293 --> 00:00:47.504
what I'd be doing is I would be
querying on both category and costs.

13
00:00:47.504 --> 00:00:49.144
So that's two fields.

14
00:00:49.144 --> 00:00:53.119
And this requires a composite
index because, well,

15
00:00:53.119 --> 00:00:56.223
let's take a look at how indexing works.

16
00:00:56.223 --> 00:01:02.650
So a lot of databases behind the scenes,
they handle this whole index list.

17
00:01:02.650 --> 00:01:07.123
Where what they do is they take a value
and they associate it with the ID, and

18
00:01:07.123 --> 00:01:09.111
they sort it in a specific order.

19
00:01:09.111 --> 00:01:10.058
So in this case,

20
00:01:10.058 --> 00:01:14.203
this is behind the scenes what a cost
index would look like in Firestore.

21
00:01:14.203 --> 00:01:18.257
Is we have a cost of $0.54 and
it's associated with this ID.

22
00:01:18.257 --> 00:01:23.607
And as you can see as we go down the list,
the indexes are getting greater.

23
00:01:23.607 --> 00:01:26.269
So this is an ascending index.

24
00:01:26.269 --> 00:01:30.451
And if I wanna get where costs
is between $1 and $1.20,

25
00:01:30.451 --> 00:01:34.890
well, that's pretty easy because
I have this nice sorted list.

26
00:01:34.890 --> 00:01:38.474
So it becomes a very fast
operation to do these things.

27
00:01:40.706 --> 00:01:42.809
Well, what happens if I'm
dealing with multiple indexes?

28
00:01:42.809 --> 00:01:45.765
So that's why querying is so fast and so

29
00:01:45.765 --> 00:01:50.344
easy with one field is because
I can easily sort by one field.

30
00:01:50.344 --> 00:01:56.192
But if I wanna do multiple, well, if I
wanna see where category is equal to food,

31
00:01:56.192 --> 00:02:00.406
I have this ordered category
index where I can say, okay,

32
00:02:00.406 --> 00:02:02.918
it's easy to find all IDs of food.

33
00:02:02.918 --> 00:02:05.317
And then for cost,
I have the same ordered index.

34
00:02:05.317 --> 00:02:09.687
So it's easy to find that,
but how do I know,

35
00:02:09.687 --> 00:02:13.140
do those have the category of food?

36
00:02:13.140 --> 00:02:16.295
How do I put those together?

37
00:02:16.295 --> 00:02:19.193
And so
that's why we create composite indexes.

38
00:02:19.193 --> 00:02:24.536
So composite indexes allow you to say,
okay, where category is equal to food,

39
00:02:24.536 --> 00:02:28.392
and where cost is greater than $1 and
less than 220.

40
00:02:28.392 --> 00:02:32.434
And behind the scenes what it
does is it kinda this is a gross

41
00:02:32.434 --> 00:02:34.422
oversimplification of it.

42
00:02:34.422 --> 00:02:41.064
But it concatenates or kinda combos these
together where we have category and

43
00:02:41.064 --> 00:02:47.512
costs food and $1.05, food and
112, and so these are all sorted.

44
00:02:47.512 --> 00:02:50.638
That's what happens when you
create the composite index,

45
00:02:50.638 --> 00:02:52.522
it creates a nice big sword for you.

46
00:02:52.522 --> 00:02:56.438
And then now your queries
are very fast because there

47
00:02:56.438 --> 00:03:00.277
is a custom composite index for
you to query off of.

48
00:03:02.085 --> 00:03:05.032
Now big question that people get when
they learn about composite indexes,

49
00:03:05.032 --> 00:03:07.664
they're like, well,
why don't I have to manually create them?

50
00:03:07.664 --> 00:03:12.464
Why is it that if this is so fast, if this
is good, why don't we just create one on

51
00:03:12.464 --> 00:03:17.354
every single document, and so that way
we could composite index on everything?

52
00:03:17.354 --> 00:03:19.761
Well, the math is not in our favor here.

53
00:03:19.761 --> 00:03:23.921
If you had a document of 20 fields,
it would create this.

54
00:03:23.921 --> 00:03:27.876
I don't know what that number,
was that says troops.

55
00:03:27.876 --> 00:03:30.638
It's a lot, the zeros tell the story.

56
00:03:30.638 --> 00:03:35.114
Someone who knows that you can
let me know, it's a big amount.

57
00:03:35.114 --> 00:03:39.482
So, and that's a lot to keep track of,
that's a lot to sort, and

58
00:03:39.482 --> 00:03:42.669
that's gonna definitely
not be performance.

59
00:03:42.669 --> 00:03:48.131
So we don't do it for every single one,
that's why you specify the fields

60
00:03:48.131 --> 00:03:53.257
we do it on, and I think you can
cover up to 200 composite indexes.

61
00:03:53.257 --> 00:03:55.134
I will have to fact check myself on.

62
00:03:55.134 --> 00:03:59.733
But it's a fair amount that unless you're
running a super high scale application,

63
00:03:59.733 --> 00:04:06.187
most people don't run into that 200 limit
&gt;&gt; Are they're no all in the queries?

64
00:04:06.187 --> 00:04:13.191
&gt;&gt; There is all support that we're
gonna get to in the very next section.

65
00:04:13.191 --> 00:04:18.307
So yes, there is a type of or
support where you can say

66
00:04:18.307 --> 00:04:23.772
get me all the expenses that
are in the category of food or

67
00:04:23.772 --> 00:04:29.261
clothes for whatever reason
you need to run that query.

68
00:04:29.261 --> 00:04:31.349
But yes, there is a way of doing that, and

69
00:04:31.349 --> 00:04:33.748
we're gonna do that in
the very next exercise.

70
00:04:33.748 --> 00:04:36.863
So all queries, yes,
there's support for this.

71
00:04:36.863 --> 00:04:39.640
&gt;&gt; Is there a way to order by date?

72
00:04:39.640 --> 00:04:43.814
&gt;&gt; Yes, so how I specified
order by cost in that section?

73
00:04:43.814 --> 00:04:47.521
You can just use that order by date and
then specify whether descending or

74
00:04:47.521 --> 00:04:48.199
ascending.

75
00:04:48.199 --> 00:04:52.361
For simple queries, just if you're
just squaring on date, all you have to

76
00:04:52.361 --> 00:04:56.542
do is that order by and you don't need
to create a composite index for that.

77
00:04:56.542 --> 00:05:00.959
But if you combine date with other fields,
then you will need to create a composite

78
00:05:00.959 --> 00:05:03.852
index at that point, but
you can still order by date.

79
00:05:03.852 --> 00:05:11.848
&gt;&gt; Is it possible to get
them by a random order?

80
00:05:11.848 --> 00:05:17.494
&gt;&gt; Via random order, a lot of times your
collections will be in random order.

81
00:05:17.494 --> 00:05:22.962
Because documents are gonna be inserted
into collections with generated IDs,

82
00:05:22.962 --> 00:05:25.338
and those IDs are not sequential.

83
00:05:25.338 --> 00:05:30.994
So in the real time database we have
a certain construct called push IDs.

84
00:05:30.994 --> 00:05:35.400
And push IDs all have a bit of a timestamp
element to them they're generated string,

85
00:05:35.400 --> 00:05:38.143
but they're done in a way
where they're sortable.

86
00:05:38.143 --> 00:05:42.133
So as you push new items on to real
time databases and of collection,

87
00:05:42.133 --> 00:05:44.730
we kinda call them like nodes or
locations.

88
00:05:44.730 --> 00:05:50.022
So as you push it on to a child node,
each push sequentially pushes them on,

89
00:05:50.022 --> 00:05:52.713
so they're kinda in a certain order.

90
00:05:52.713 --> 00:05:55.074
With fire store,
there is absolutely no order,

91
00:05:55.074 --> 00:05:57.621
those generated IDs do not
follow a specific order.

92
00:05:57.621 --> 00:06:04.451
So I can add ten records on one by one,
and they can be in some mismatched order.

93
00:06:04.451 --> 00:06:06.995
And that's why we write an order
query where you can order by cost

94
00:06:06.995 --> 00:06:07.661
sorted by this.

95
00:06:07.661 --> 00:06:10.465
So if you're using generated IDs, yes,

96
00:06:10.465 --> 00:06:14.000
you will just by default
have a fairly random order.

