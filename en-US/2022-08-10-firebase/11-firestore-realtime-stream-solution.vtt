WEBVTT

1
00:00:00.135 --> 00:00:02.035
So how was that exercise?

2
00:00:02.035 --> 00:00:04.320
It's good,
we got stuff going to the screen?

3
00:00:04.320 --> 00:00:07.399
All right, I'm gonna take you
through what I do in this case.

4
00:00:07.399 --> 00:00:11.731
So I have my document snapshot being
passed in every time it's being

5
00:00:11.731 --> 00:00:12.651
mapped over.

6
00:00:12.651 --> 00:00:18.162
So I can do something
like a D structure and

7
00:00:18.162 --> 00:00:21.947
call docsnapshots.data.

8
00:00:21.947 --> 00:00:24.313
And what are we getting out of that?

9
00:00:24.313 --> 00:00:28.470
I need to get the uid,
the typo of Fist which should be first.

10
00:00:28.470 --> 00:00:33.034
So I could say uid, first, last, so first,

11
00:00:33.034 --> 00:00:37.970
last, highscore, city, highscore and city.

12
00:00:37.970 --> 00:00:42.023
And from here I want to also get,
actually do I want the ID?

13
00:00:42.023 --> 00:00:44.263
No, I have everything I need except for
fromCache.

14
00:00:44.263 --> 00:00:50.352
So if I wanna see if it's from the cache,

15
00:00:50.352 --> 00:00:55.733
I can say docSnapshot.metadata.

16
00:00:55.733 --> 00:01:00.791
And this right here will tell
me if it was from cache.

17
00:01:00.791 --> 00:01:02.675
Let's see here.

18
00:01:02.675 --> 00:01:07.246
I usually use TypeScript, so I get really
scared when things don't give me types,

19
00:01:07.246 --> 00:01:09.547
but this is just in the JavaScript world.

20
00:01:09.547 --> 00:01:14.446
So from here, I can return uid, last,

21
00:01:14.446 --> 00:01:19.645
first, highscore, city, fromCache.

22
00:01:22.589 --> 00:01:29.073
So now when I save, Refresh, look at that.

23
00:01:29.073 --> 00:01:34.473
Now, this all says false from cache and
no matter what I do,

24
00:01:34.473 --> 00:01:40.484
it says true now, I think it's because I,
let me make sure so I don't.

25
00:01:40.484 --> 00:01:42.909
Did I do this, yes, I enabled persistence.

26
00:01:42.909 --> 00:01:47.640
I didn't need to have it enabled for
this demo, so let me comment that out.

27
00:01:50.925 --> 00:01:56.840
No matter what I do, when I refresh,
it's gonna say false.

28
00:01:56.840 --> 00:02:01.899
And it's because I don't have any
offline persistence being enabled.

29
00:02:01.899 --> 00:02:06.543
And just as we saw here,
I have this enable offline section,

30
00:02:06.543 --> 00:02:08.909
which you can take a look into,

31
00:02:08.909 --> 00:02:15.027
which is just sort of like our initialized
app just with better structure to it.

32
00:02:15.027 --> 00:02:19.822
And I call enable multitab persistence,
pass in firestore.

33
00:02:19.822 --> 00:02:24.466
And from there,
I have offline tab persistence.

34
00:02:24.466 --> 00:02:26.746
And then now when I refresh, true.

35
00:02:26.746 --> 00:02:31.645
So it's only syncing changes that happen
behind the scenes from the server.

36
00:02:31.645 --> 00:02:37.489
It's not doing new reads every single
time, it's only getting the updates.

37
00:02:37.489 --> 00:02:41.365
And so the cache is really good for
knowing that.

38
00:02:41.365 --> 00:02:46.579
And if I even did has pending rights,
we could see from there.

39
00:02:46.579 --> 00:02:52.223
Let's see if I wanted
to just do console.log,

40
00:02:52.223 --> 00:02:57.875
let's just do all of docsnapshot.metadata.

41
00:03:02.014 --> 00:03:03.935
Save, let's open this up.

42
00:03:05.286 --> 00:03:08.789
And we can see that all across
the board has pending writes is

43
00:03:08.789 --> 00:03:11.321
false because we're not doing anything.

44
00:03:11.321 --> 00:03:15.961
So that is how we we read
data from a real-time stream.

45
00:03:15.961 --> 00:03:20.503
But we also can take other bits of
the document snapshot to surface more of

46
00:03:20.503 --> 00:03:25.199
a functional and usable object for
our interface to be able to do things on.

47
00:03:25.199 --> 00:03:28.878
And so this is sort of the basis of what
we're gonna be doing throughout the next

48
00:03:28.878 --> 00:03:29.450
sections.

49
00:03:29.450 --> 00:03:33.888
Because all we've done right now as
we've said, get me data at a collection.

50
00:03:33.888 --> 00:03:40.773
And what we can see though is that
this user's collection, it is big.

51
00:03:40.773 --> 00:03:42.881
I scroll through, I think it's 250 users.

52
00:03:42.881 --> 00:03:46.649
And this expenses,
I believe it's 2,500 maybe,

53
00:03:46.649 --> 00:03:50.265
depending on how I loaded in,
5,000 expenses.

54
00:03:50.265 --> 00:03:53.915
Probably don't wanna be reading all
these back to the client in real time.

55
00:03:53.915 --> 00:03:58.542
So what we're gonna be doing when we get
back is we're gonna be talking about

56
00:03:58.542 --> 00:04:00.077
querying in Firestore.

57
00:04:00.077 --> 00:04:02.630
And we're gonna take a look at
things like simple queries, or

58
00:04:02.630 --> 00:04:04.407
just doing simple limits and simple ways.

59
00:04:04.407 --> 00:04:07.223
And we're even gonna be
doing more complex things.

60
00:04:07.223 --> 00:04:11.621
And we're gonna be doing a lot of
comparisons to how that works in the SQL

61
00:04:11.621 --> 00:04:13.540
world versus the NoSQL world.

