WEBVTT

1
00:00:00.108 --> 00:00:02.876
So Firebase authentication,
what is Firebase authentication?

2
00:00:02.876 --> 00:00:07.108
It's a serverless authentication provider
that integrates into security rules.

3
00:00:07.108 --> 00:00:09.308
So we haven't secured anything so far.

4
00:00:09.308 --> 00:00:10.585
We've seen how we could query things.

5
00:00:10.585 --> 00:00:14.443
We've seen all these things that
we can do with the database, but

6
00:00:14.443 --> 00:00:16.560
it's been largely left insecure.

7
00:00:16.560 --> 00:00:19.463
And that's because we don't
know how to secure it.

8
00:00:19.463 --> 00:00:22.032
We don't have anything
to secure it against.

9
00:00:22.032 --> 00:00:25.559
So with Firebase authentication,
you can log users in with just

10
00:00:25.559 --> 00:00:29.957
a plethora of providers, email password
,anonymous, which we saw earlier.

11
00:00:29.957 --> 00:00:34.527
A bunch of social authentication, so
Google, Twitter, Facebook, Apple,

12
00:00:34.527 --> 00:00:35.785
Microsoft, Yahoo.

13
00:00:35.785 --> 00:00:39.540
There's a really cool one that I really
like to use, which is email link,

14
00:00:39.540 --> 00:00:43.721
which is, instead of user entering their
password, they enter in their email and

15
00:00:43.721 --> 00:00:45.014
then we send them a link.

16
00:00:45.014 --> 00:00:48.970
And when they click on that, we log
them in, so passwordless authentication.

17
00:00:48.970 --> 00:00:52.995
You can use SMS,
your own custom authentication system.

18
00:00:52.995 --> 00:00:56.301
So if you have your own back end that
can integrate it in with Firebase

19
00:00:56.301 --> 00:00:58.804
authentication, we just
use that to sign tokens.

20
00:00:58.804 --> 00:01:04.375
And then also for native apps, there's
Game Center, so for Android Game Center,

21
00:01:04.375 --> 00:01:08.528
or sorry, Apple Game Center and
then Android's Play Games.

22
00:01:08.528 --> 00:01:12.246
But that's mostly for
Android and iOS development.

23
00:01:12.246 --> 00:01:15.797
So I'm not gonna painstakingly, like I
made you all go through for Firestore,

24
00:01:15.797 --> 00:01:18.347
I'm not gonna go through every
possible thing it can do.

25
00:01:18.347 --> 00:01:21.734
I'm just going to talk about these
six things for the most part.

26
00:01:21.734 --> 00:01:25.083
I'm gonna talk about how the general
sign in process works, so

27
00:01:25.083 --> 00:01:26.291
how I can log a user in.

28
00:01:26.291 --> 00:01:29.442
How I can observe their
authentication state.

29
00:01:29.442 --> 00:01:31.928
How I can use multiple
providers to merge an account,

30
00:01:31.928 --> 00:01:35.740
because no one likes it where they can't
remember if they signed in with Google for

31
00:01:35.740 --> 00:01:37.576
that one, or do I sign in with Twitter?

32
00:01:37.576 --> 00:01:41.069
Did I provide an email or password?

33
00:01:41.069 --> 00:01:45.303
With Firebase authentication, you can
actually, if a user attempts to sign in

34
00:01:45.303 --> 00:01:48.732
with a different provider and
they have the same email address.

35
00:01:48.732 --> 00:01:50.705
We can flag that for you and say, hey,

36
00:01:50.705 --> 00:01:54.850
this user exists in your system with this
email, would you like to link them in?

37
00:01:54.850 --> 00:01:56.502
And that's a really nice way, so

38
00:01:56.502 --> 00:01:59.394
users aren't accidentally
creating too many accounts.

39
00:01:59.394 --> 00:02:02.280
Then we're gonna briefly talk
about auth ties into security.

40
00:02:02.280 --> 00:02:07.693
And while we're gonna be using the Auth
Emulator, and we're gonna dive a little

41
00:02:07.693 --> 00:02:12.726
bit into how you can script out users and
stuff like that with the Admin SDK.

42
00:02:12.726 --> 00:02:18.149
And I think it's like almost the law that
if you give a talk about authorization,

43
00:02:18.149 --> 00:02:23.438
you have to include a slide that says,
authentication is not authorization.

44
00:02:23.438 --> 00:02:27.797
And in this section, we are just worried
about authentication, who the user is.

45
00:02:27.797 --> 00:02:32.252
And in the next section,
we're gonna worry about what they can do.

46
00:02:32.252 --> 00:02:35.942
And the most important thing to look out
for in this whole process is the uid key,

47
00:02:35.942 --> 00:02:39.907
cuz that's gonna tell us who they are, and
it's also going to, in the next section,

48
00:02:39.907 --> 00:02:41.531
allow us to write what they can do.

49
00:02:41.531 --> 00:02:43.475
So let's get into it.

50
00:02:45.103 --> 00:02:49.939
So I'm going to go into
the authentication section,

51
00:02:49.939 --> 00:02:52.848
which is 4-firebase-auth.

52
00:02:57.007 --> 00:03:00.707
I'm gonna open yet another VS Code.

53
00:03:00.707 --> 00:03:04.412
So just to show what's going
on here in my Firebase file,

54
00:03:04.412 --> 00:03:07.206
I am still connected out to the emulators.

55
00:03:07.206 --> 00:03:10.514
That is important to note, so I'm not
gonna be working against production.

56
00:03:14.470 --> 00:03:19.053
And then now inside of app, I pre-imported
all these things that I needed, just so

57
00:03:19.053 --> 00:03:20.900
we can write it a little quicker.

58
00:03:20.900 --> 00:03:23.248
And the way this works is,
what I'm gonna use,

59
00:03:23.248 --> 00:03:30.054
I'm gonna do npm run dev I'm sorry,
I need to be inside of start.

60
00:03:30.054 --> 00:03:31.973
That's why it's mad at me.

61
00:03:31.973 --> 00:03:35.823
Okay, so now, npm run dev.

62
00:03:38.926 --> 00:03:43.121
Great, so now we're back on local host
3,000, and we have this beautiful UI.

63
00:03:43.121 --> 00:03:45.334
And we're gonna do a couple things.

64
00:03:45.334 --> 00:03:48.659
We're gonna do talk about
creating accounts, signing in,

65
00:03:48.659 --> 00:03:52.505
signing in with social, and
there's a couple hidden ones over here,

66
00:03:52.505 --> 00:03:55.718
we'll see here in just a second,
once a user is logged in.

67
00:03:55.718 --> 00:03:59.618
So each one of these functions is bound
to a button or an event handler or

68
00:03:59.618 --> 00:04:00.883
something like that.

69
00:04:00.883 --> 00:04:05.302
And it calls this getFormDetails function,
which is really great, because what it

70
00:04:05.302 --> 00:04:09.927
does is, if you've used form data before,
it's awesome, you pass in form elements.

71
00:04:09.927 --> 00:04:16.208
And it allows you to use this map-like
API to get the values within the form.

72
00:04:16.208 --> 00:04:21.896
It's one of my most favorite things
that is in modern browser development.

73
00:04:21.896 --> 00:04:25.866
And so now,
since I can get their email and password,

74
00:04:25.866 --> 00:04:30.645
I'm gonna call a method called
signInWithEmailAndPassword.

75
00:04:30.645 --> 00:04:32.771
And actually, before I do sign in,
let's keep that,

76
00:04:32.771 --> 00:04:34.120
I wanna do createAccounts first.

77
00:04:34.120 --> 00:04:39.741
So I'm gonna say createUserWith,
we first pass in auth,

78
00:04:39.741 --> 00:04:43.307
and then email, and then password.

79
00:04:43.307 --> 00:04:46.226
Now, what I can do is,
and I'll do this for now,

80
00:04:46.226 --> 00:04:50.016
even though I said this is not
the way to do it, but just for now.

81
00:04:50.016 --> 00:04:54.223
I'll say user, and
we'll see why, actually,

82
00:04:54.223 --> 00:04:59.569
results we'll await this, and
this will give back our user.

83
00:05:02.276 --> 00:05:06.880
So now, if I go into the emulator,
I'm gonna enter a new one.

84
00:05:06.880 --> 00:05:13.279
So david@email.com,
enter in a really secret password,

85
00:05:13.279 --> 00:05:18.678
which is 1234FIREBASE, 1234FIREBASE.

86
00:05:18.678 --> 00:05:21.021
And actually, no, it'll trigger for me.

87
00:05:21.021 --> 00:05:23.690
So if I create, now, we have other things.

88
00:05:23.690 --> 00:05:28.161
So a user exists, so
I'll wanna be able to sign out.

89
00:05:28.161 --> 00:05:29.561
I might wanna be able to link, and

90
00:05:29.561 --> 00:05:31.720
then I might wanna get their
expenses by their UID.

91
00:05:31.720 --> 00:05:37.597
But if I refresh, now that's gone,
has the user logged out?

92
00:05:37.597 --> 00:05:40.875
No, user is still actively logged in.

93
00:05:40.875 --> 00:05:44.983
The issue is, and this is one of the big
reasons why I say we don't do this,

94
00:05:44.983 --> 00:05:48.827
is because when we refresh the page,
in order to get this user again,

95
00:05:48.827 --> 00:05:52.046
we'd have to run this function
again to get that output.

96
00:05:52.046 --> 00:05:57.672
So instead of having to get this user
returned back, what I'd rather do is just

97
00:05:57.672 --> 00:06:03.146
call it in the same way I'd call setDoc or
updateDoc or something like that.

98
00:06:03.146 --> 00:06:07.132
And then what I can do is I can call

99
00:06:07.132 --> 00:06:12.020
a method called onAuthStateChanged.

100
00:06:12.020 --> 00:06:17.895
I'll pass in authentication and
then this will give me a potential user.

101
00:06:17.895 --> 00:06:23.268
So this is a lot like on Snapshot, and
it's a lot on Snapshot in a way we're

102
00:06:23.268 --> 00:06:28.579
gonna log a user in, this is where
I'm going to see their state results.

103
00:06:28.579 --> 00:06:31.791
And if they are already logged in,
then when the page runs,

104
00:06:31.791 --> 00:06:34.308
it will fire this off
with that logged in user.

105
00:06:34.308 --> 00:06:37.859
And this will be null if
there is no logged in user.

106
00:06:37.859 --> 00:06:42.967
So now, all I have to do is
say state.user = user, and

107
00:06:42.967 --> 00:06:48.979
everything's on the page no matter
how many times I refresh it.

108
00:06:48.979 --> 00:06:53.757
So that is why we usually,
in many cases, just like this,

109
00:06:53.757 --> 00:06:56.106
we do not await the results.

110
00:06:56.106 --> 00:07:02.542
We always dispatch the option with
signing in, same thing with documents.

111
00:07:02.542 --> 00:07:07.393
And we listen to that in the listener,
so in this case onAuthStateChanged.

112
00:07:10.215 --> 00:07:14.564
So now that we have that,
let's work on signing in a user.

113
00:07:14.564 --> 00:07:21.330
So it's very similar, sign in,
auth, email, password.

114
00:07:23.109 --> 00:07:27.005
And I'm actually gonna implement sign out
because it's always good to be able to

115
00:07:27.005 --> 00:07:28.276
sign people out quickly.

116
00:07:28.276 --> 00:07:32.932
And so sign out, you just call
sign out with Auth, that's it, and

117
00:07:32.932 --> 00:07:37.438
it will trigger the onAuthStateChanged,
just make that null.

118
00:07:37.438 --> 00:07:39.472
So everything is gone.

119
00:07:39.472 --> 00:07:42.066
So I can sign in, but
let's say I wanna create this user.

120
00:07:42.066 --> 00:07:45.827
This user exists, and so
because this is email,

121
00:07:45.827 --> 00:07:49.516
there's error that says
email already in use.

122
00:07:49.516 --> 00:07:52.643
And that's because in
Firebase authentication,

123
00:07:52.643 --> 00:07:57.803
we have a one account per email address
policy, unless you don't want that policy,

124
00:07:57.803 --> 00:08:00.946
and which you can opt out of it for
whatever reason.

125
00:08:00.946 --> 00:08:05.829
But we put it by default, because it's
really important to have emails as

126
00:08:05.829 --> 00:08:08.365
sort of unique identifiers of users.

127
00:08:08.365 --> 00:08:09.549
Because that way,

128
00:08:09.549 --> 00:08:13.695
it's easy to pick up when to link
users across separate accounts.

129
00:08:13.695 --> 00:08:18.746
So if I try to log in with email and
password, and my email is david@gmail.com,

130
00:08:18.746 --> 00:08:22.758
and then I log in with Google and
my email is david@email.com,

131
00:08:22.758 --> 00:08:27.395
Firebase Auth will let me know, hey,
this is a duplicate user, likely.

132
00:08:27.395 --> 00:08:32.155
And then I can prompt the user to
link those two accounts together, so

133
00:08:32.155 --> 00:08:35.289
it's less confusing for the user, that is.

134
00:08:35.289 --> 00:08:37.658
So I can do that with linking.

135
00:08:37.658 --> 00:08:43.118
So instead of worrying about whether
they're creating multiple accounts,

136
00:08:43.118 --> 00:08:47.247
I can call this method,
you just call linkWithRedirect.

137
00:08:47.247 --> 00:08:52.502
And then here, we pass in
the currently authenticated user,

138
00:08:52.502 --> 00:08:57.367
which we can synchronously
get auth.getCurrentUser.

139
00:08:57.367 --> 00:09:01.211
And so auth.currentUser is
a synchronously provided

140
00:09:01.211 --> 00:09:05.312
value that is populated after
the user has been logged in.

141
00:09:05.312 --> 00:09:07.457
And then it says, well, what provider?

142
00:09:07.457 --> 00:09:14.770
So we can call a new GoogleAuthProvider,
which is imported up top.

143
00:09:14.770 --> 00:09:19.668
And then this will go out to
link that user with Google.

144
00:09:19.668 --> 00:09:24.970
And what's interesting here is
that if I try to await this,

145
00:09:29.670 --> 00:09:33.595
This TypeScript will tell me, cuz VS Code
is awesome and shows me cool stuff like

146
00:09:33.595 --> 00:09:37.130
that, will give me the result as never,
so it will never get back here.

147
00:09:37.130 --> 00:09:42.334
And that's because we are doing what
is referred to as a redirect flow.

148
00:09:42.334 --> 00:09:44.824
So when you try to log in
with a social provider,

149
00:09:44.824 --> 00:09:47.583
you're not logging in
straight through your site.

150
00:09:47.583 --> 00:09:51.904
It has to redirect out to that social
provider or whatever Auth provider,

151
00:09:51.904 --> 00:09:56.292
login with their system, then there's
sort of a dance back and forth, and

152
00:09:56.292 --> 00:09:57.491
then it comes back.

153
00:09:57.491 --> 00:10:00.712
So if we're gonna redirect out
to a whole different page,

154
00:10:00.712 --> 00:10:05.183
we aren't going to be able to run any code
that happens after that redirect call,

155
00:10:05.183 --> 00:10:07.966
because we're no longer
operating on that page.

156
00:10:07.966 --> 00:10:11.154
And then when we come back,
we want to know,

157
00:10:11.154 --> 00:10:14.350
were there any problems with this process?

158
00:10:14.350 --> 00:10:19.729
So to do that, we can actually call
a method called getRedirectResults.

159
00:10:19.729 --> 00:10:23.760
This takes in a promise and
we can actually await it.

160
00:10:23.760 --> 00:10:27.541
So we can try it in here.

161
00:10:28.719 --> 00:10:33.362
And then catch any errors that might
have happened when logging in with

162
00:10:33.362 --> 00:10:36.361
a social provider or
linking in the account.

163
00:10:36.361 --> 00:10:39.947
So did anything bad happen?

164
00:10:44.079 --> 00:10:48.154
So we are logged in still.

165
00:10:48.154 --> 00:10:52.333
And so let's say we wanna sign in or
link with Google.

166
00:10:52.333 --> 00:10:54.665
Now, we're running locally.

167
00:10:54.665 --> 00:10:59.111
So one of the conveniences of the
Authentication Emulator is that instead of

168
00:10:59.111 --> 00:11:03.071
actually going out to Google,
Apple, or whatever Auth provider,

169
00:11:03.071 --> 00:11:06.898
we intercept that process when
you're running on the emulator.

170
00:11:06.898 --> 00:11:11.311
And we say, hey,
why don't we just create this manually or

171
00:11:11.311 --> 00:11:13.440
from anything that exists?

172
00:11:13.440 --> 00:11:15.525
So I can click, add a new account.

173
00:11:15.525 --> 00:11:17.946
I can auto-generate this information.

174
00:11:17.946 --> 00:11:19.655
Orange olive,
I don't know if I like that name.

175
00:11:19.655 --> 00:11:20.439
What's a good one?

176
00:11:20.439 --> 00:11:22.335
Peach grass, I like that one.

177
00:11:22.335 --> 00:11:26.013
And I can then come in here,
sign in with Google.

178
00:11:26.013 --> 00:11:30.026
And then now,
I have these accounts linked in.

179
00:11:32.896 --> 00:11:34.688
So let me go look for it.

180
00:11:34.688 --> 00:11:35.520
Where is it?

181
00:11:37.227 --> 00:11:41.317
I wanna call it, sorry, I need to refresh.

182
00:11:41.317 --> 00:11:44.588
Just like that, here,
we logged in with this user and

183
00:11:44.588 --> 00:11:46.848
we can see that has the G right there.

184
00:11:46.848 --> 00:11:51.865
And edit user, and I guess,
it just shows that one email.

185
00:11:51.865 --> 00:11:56.333
But we can see that we have this user was
only originally email and password, but

186
00:11:56.333 --> 00:11:58.945
now they're linked in
with a Google account.

187
00:11:59.971 --> 00:12:03.225
All right, so we did link,
we kinda went through,

188
00:12:03.225 --> 00:12:07.024
social login works very similar,
I skipped over that one.

189
00:12:07.024 --> 00:12:10.251
But with social login,
it's the same thing,

190
00:12:10.251 --> 00:12:15.547
you would just say signInWithRedirect,
and we'd pass an Auth container,

191
00:12:15.547 --> 00:12:18.711
and then we'd say new GoogleAuthProvider.

192
00:12:18.711 --> 00:12:23.015
And this does the same thing,
it's gonna go out to Google,

193
00:12:23.015 --> 00:12:25.952
it's going to do the whole OAuth dance.

194
00:12:25.952 --> 00:12:31.655
And then it will come back with
getRedirectResult to sign the user in.

195
00:12:31.655 --> 00:12:37.471
And now, from there, if I wanted to get
the user's data, I can easily do that.

196
00:12:37.471 --> 00:12:44.199
I can get from my Firestore instance,
and do I have Firestore import?

197
00:12:44.199 --> 00:12:51.162
I do, so I can do, inside of here,
I can have my user data,

198
00:12:51.162 --> 00:12:55.865
and I could say, what is this, state.

199
00:12:58.651 --> 00:13:04.834
State.expenses is what
we're going to sign into.

200
00:13:04.834 --> 00:13:08.820
And so now, I can say, all right, well,
let's go out and get this user's expenses.

201
00:13:08.820 --> 00:13:15.922
So state.expenses is a collection
of passing the Firestore instance.

202
00:13:15.922 --> 00:13:22.060
And I'll say expenses/, showing off
this one as a generalized data.

203
00:13:22.060 --> 00:13:27.003
We're gonna say expenses,
my gosh, big bucks.

204
00:13:27.003 --> 00:13:30.578
I'll write a query in this case for that.

205
00:13:30.578 --> 00:13:36.132
And I'll say where

206
00:13:36.132 --> 00:13:43.648
uid ==, User.uid.

207
00:13:47.509 --> 00:13:49.984
Wait, no, I need to run this first.

208
00:13:49.984 --> 00:13:54.696
I'll just create the query,
I think it const userQuery = this.

209
00:13:54.696 --> 00:13:59.492
And then we can say const snapshot

210
00:13:59.492 --> 00:14:03.780
is getDocs of the userQuery.

211
00:14:06.435 --> 00:14:09.563
We're gonna await it in this case.

212
00:14:09.563 --> 00:14:16.637
And then now, I can say
snapshot.docs.map(d =&gt; d.data()).

213
00:14:20.306 --> 00:14:23.578
So we're getting this, we're probably
binding something wrong here.

214
00:14:23.578 --> 00:14:25.977
What is it looking for?

215
00:14:25.977 --> 00:14:30.699
Expense.text, that's right,

216
00:14:30.699 --> 00:14:33.995
I got too clever with this.

217
00:14:33.995 --> 00:14:39.223
What I'll do is, I'll just say,
return a value of text,

218
00:14:39.223 --> 00:14:44.361
that is the d.data.cost,
we'll just it's d.cost.

219
00:14:44.361 --> 00:14:50.119
And then, all right, here are some
expenses that belong to that user.

220
00:14:50.119 --> 00:14:53.805
So that's really
authentication in a nutshell.

221
00:14:53.805 --> 00:14:58.229
We can sign users in with multiple
providers, we can link them in.

222
00:14:58.229 --> 00:15:01.445
We can, also with that UID,

223
00:15:01.445 --> 00:15:06.014
begin to assign ownership of that data.

224
00:15:06.014 --> 00:15:11.995
You can see how there'll be a process
saying, hey, when I create a new document,

225
00:15:11.995 --> 00:15:16.434
let me either create a hierarchy
of users/uid/expenses.

226
00:15:16.434 --> 00:15:20.075
Or expenses and attach the UID,
whatever you'll end up needing to do.

227
00:15:20.075 --> 00:15:24.300
But that UID is how we get that
user's data associated with it, and

228
00:15:24.300 --> 00:15:27.554
that all spits out with
Firebase authentication.

229
00:15:27.554 --> 00:15:29.279
And that still doesn't get
us anywhere with security.

230
00:15:29.279 --> 00:15:32.370
So that is where we're
gonna move on to next.

