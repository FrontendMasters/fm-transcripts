WEBVTT

1
00:00:00.955 --> 00:00:05.671
And then when this email joins or in this
email when this user joins,with that

2
00:00:05.671 --> 00:00:08.371
email they'll have a user record created.

3
00:00:08.371 --> 00:00:12.320
And one of the things I could do
is say hey welcome to the system.

4
00:00:12.320 --> 00:00:16.469
Let me look to see if you have any
collaborator requests that are sitting

5
00:00:16.469 --> 00:00:17.610
around.

6
00:00:17.610 --> 00:00:21.530
And let me just add you
as a rule to all of this.

7
00:00:21.530 --> 00:00:23.380
This is something you could
also do on the client.

8
00:00:23.380 --> 00:00:24.362
But it's also a nice,

9
00:00:24.362 --> 00:00:27.790
actually that you couldn't do it on
the client because of the security model.

10
00:00:27.790 --> 00:00:31.594
But there are certain ways where sometimes
you can add things on the client to

11
00:00:31.594 --> 00:00:33.091
bootstrap up their data set.

12
00:00:33.091 --> 00:00:38.240
And other ways to write this query,
I can use a collection group query.

13
00:00:38.240 --> 00:00:42.136
Because I can assume that all
budgets are going to have

14
00:00:42.136 --> 00:00:45.610
a sub-collection of collaboratorRequests.

15
00:00:45.610 --> 00:00:50.592
So by writing a collection group query,
I'll look across all budgets and say

16
00:00:50.592 --> 00:00:56.370
how many budgets have invited you probably
anywhere between one to three max.

17
00:00:56.370 --> 00:00:59.254
But that way I can structure
my data nested like that and

18
00:00:59.254 --> 00:01:01.460
then still search across all of them.

19
00:01:01.460 --> 00:01:06.670
So to write a collection group query,
I'll write a groupQuery.

20
00:01:06.670 --> 00:01:10.840
And that's firestore.collectionGroup.

21
00:01:10.840 --> 00:01:13.769
And that is, I'm just gonna copy of it and

22
00:01:13.769 --> 00:01:17.722
because I type out everything
collaboratorRequests.

23
00:01:22.342 --> 00:01:29.769
And then from here, I want to do
collaboratorRequests.where and

24
00:01:29.769 --> 00:01:33.360
I can say the uid, my goodness.

25
00:01:35.050 --> 00:01:41.005
Write that down here where
the uid is equal to the new is,

26
00:01:41.005 --> 00:01:45.185
my gosh, is equal to the new users uid,

27
00:01:45.185 --> 00:01:50.830
which we're getting back
here on the create.

28
00:01:50.830 --> 00:01:53.930
So that gets all of
the collaboratorRequests.

29
00:01:55.250 --> 00:02:00.390
So let's get those const snapshots,
groupQuery.get and

30
00:02:00.390 --> 00:02:05.851
we're basically gonna do the same
thing as we're doing here.

31
00:02:05.851 --> 00:02:12.910
We are going to add them, but
we're gonna do that in a loop.

32
00:02:12.910 --> 00:02:14.860
So we're gonna say snapshots.

33
00:02:14.860 --> 00:02:16.460
We could do this in a batch as well.

34
00:02:16.460 --> 00:02:22.340
So const batch is firestore.batch and

35
00:02:22.340 --> 00:02:27.180
then now for snapshots.docs.

36
00:02:27.180 --> 00:02:29.402
I need to await it thank you VS code.

37
00:02:32.393 --> 00:02:34.215
.docs.map.

38
00:02:42.241 --> 00:02:45.360
And for here,
I need to know what budget I meant.

39
00:02:45.360 --> 00:02:49.180
So the way this works is is
this is a document reference.

40
00:02:49.180 --> 00:02:54.315
And so each document reference
this is at the document level

41
00:02:54.315 --> 00:02:59.758
of collaboratorRequests because
we are here doing queries for

42
00:02:59.758 --> 00:03:05.010
collaborator extra as my query for
collaboratorRequests.

43
00:03:05.010 --> 00:03:11.310
So I know that the parent of
collaboratorRequests is the budget ID.

44
00:03:11.310 --> 00:03:18.041
So I wanna kinda get the parent
document right here.

45
00:03:18.041 --> 00:03:22.715
So I can say budgetDoc is d.ref.parent.

46
00:03:22.715 --> 00:03:28.418
And so
now I know I'm at the budget level and

47
00:03:28.418 --> 00:03:34.122
then from there I can
say the collaborate or

48
00:03:34.122 --> 00:03:39.033
call or I can use a collaborator Doc is

49
00:03:39.033 --> 00:03:43.961
budgetDoc.doc of the user's uid.

50
00:03:43.961 --> 00:03:49.146
So user records user that uid now,
which is just this right here,

51
00:03:49.146 --> 00:03:52.558
once again, it's going to be user.uid.

52
00:03:52.558 --> 00:04:00.659
And then from here I can
just say collaborator.

53
00:04:00.659 --> 00:04:06.754
I say batch.set of the collaboratorDoc and

54
00:04:06.754 --> 00:04:11.701
then set the role to collaborator.

55
00:04:14.005 --> 00:04:16.827
And then instead of returning this one,

56
00:04:16.827 --> 00:04:20.400
I'll return a whole batch
return batch.commit.

57
00:04:22.603 --> 00:04:26.561
So basically what's going on here
is I'm getting all of the potential

58
00:04:26.561 --> 00:04:30.993
collaboratorRequests across all sub
collections where their uid is equals to

59
00:04:30.993 --> 00:04:32.700
the new user.

60
00:04:32.700 --> 00:04:34.968
I'm going to run that query,

61
00:04:34.968 --> 00:04:39.050
create a batch loop through
all of the query results,

62
00:04:39.050 --> 00:04:45.508
get a reference out to that collaborators
sub-collection underneath the budget.

63
00:04:45.508 --> 00:04:51.770
And then set it within the batch and
then return it as batch.commit.

64
00:04:51.770 --> 00:04:54.277
So let's save and let's create a user.

65
00:04:57.825 --> 00:05:02.726
All right, so let's go into
authentication, let's add a user,

66
00:05:02.726 --> 00:05:08.520
let's set this as Darla East, my dog's
name is Darla, for what it's worth.

67
00:05:09.790 --> 00:05:12.713
So, while I'm thinking up of
things to use for demo data,

68
00:05:12.713 --> 00:05:15.110
I just look at the furry
creature on the ground.

69
00:05:15.110 --> 00:05:18.842
And then I'm like that's what I'm doing.

70
00:05:18.842 --> 00:05:23.635
Darla@example.com and password

71
00:05:23.635 --> 00:05:29.398
1234Firebase and let's save fresh.

72
00:05:29.398 --> 00:05:32.925
We have Darla right here.

73
00:05:35.281 --> 00:05:36.930
I made a mistake.

74
00:05:36.930 --> 00:05:38.060
I'll have to do this again.

75
00:05:38.060 --> 00:05:42.684
I did not add the user to
the collaboratorRequests.

76
00:05:42.684 --> 00:05:47.458
All right, so we'll do another so

77
00:05:47.458 --> 00:05:52.075
darla.again@example.com.

78
00:05:55.653 --> 00:06:01.589
So now we gonna wait for
this user to be created.

79
00:06:01.589 --> 00:06:05.132
And I can copy that right here,

80
00:06:05.132 --> 00:06:10.856
then we can go into authentication,
clear that,

81
00:06:10.856 --> 00:06:18.376
add a user Darla again Darla@again.com,
1234Firebase.

82
00:06:21.437 --> 00:06:25.306
Save, all right, so
let's go out to FireStore,

83
00:06:25.306 --> 00:06:30.746
collaboratorRequests that's their,
see, won't see anything yet

84
00:06:30.746 --> 00:06:36.300
it should be there some probably,
yes there is what the old one, okay?

85
00:06:36.300 --> 00:06:41.064
So it says users created, so it
triggered it, so I did something, right?

86
00:06:41.064 --> 00:06:46.129
One of the mistakes I made was that I
said, where uid is equal to user.uid

87
00:06:46.129 --> 00:06:50.820
that's not, we have to talk where
email is equal to user.email.

88
00:06:50.820 --> 00:06:54.380
I was thinking in uids and
I couldn't get past that.

89
00:06:54.380 --> 00:06:57.149
So this will pull back the collection.

90
00:06:57.149 --> 00:07:03.158
This will go through and
get those snapshots, we'll create a batch.

91
00:07:03.158 --> 00:07:08.020
Loop through each snapshot,
go through and get the .parent.

92
00:07:08.020 --> 00:07:12.412
So we can create collaborators so
we can get to the budget,

93
00:07:12.412 --> 00:07:17.440
go to its collaborators and
then get the doc of the new user's uid.

94
00:07:18.500 --> 00:07:24.080
And then from there, we can set that
roll of collaborator in the batch.

95
00:07:25.180 --> 00:07:29.089
So now, let's go and
then return that shot commit

96
00:07:29.089 --> 00:07:34.210
because functions need your
promise to be returned.

97
00:07:34.210 --> 00:07:36.140
Now, save and let's trigger it.

98
00:07:38.300 --> 00:07:42.536
All right, so let's go through we
have a collaborator across for

99
00:07:42.536 --> 00:07:44.706
darla.again@example.com.

100
00:07:44.706 --> 00:07:50.565
So I'm gonna copy that, authentication
I'm gonna delete the user so

101
00:07:50.565 --> 00:07:53.870
we can trigger it one more time.

102
00:07:53.870 --> 00:08:00.980
So Darla, again and that's
darla.again@example.com, 1234Firebase.

103
00:08:02.170 --> 00:08:04.480
Now, when I save we have a new user.

104
00:08:04.480 --> 00:08:07.761
If I go into Firestore, go to good budget,

105
00:08:07.761 --> 00:08:12.220
go to collaborators,
we have the two now have a new one.

106
00:08:12.220 --> 00:08:16.630
For each one,
you can see that our logs were good.

107
00:08:16.630 --> 00:08:20.792
So that is a lot of power
at your fingertips with

108
00:08:20.792 --> 00:08:24.543
Firestore versus with Cloud Functions.

109
00:08:24.543 --> 00:08:28.577
And one of the things
to that you can do with

110
00:08:28.577 --> 00:08:34.175
Cloud Functions is are we
did an onCreate off trigger.

111
00:08:34.175 --> 00:08:38.185
You can do an onDelete off trigger where
you can clean up anything that's going on.

112
00:08:38.185 --> 00:08:41.111
But also something that I'm
not gonna cover today but

113
00:08:41.111 --> 00:08:45.143
I just wanna talk about because it's
super cool is there's like a new type

114
00:08:45.143 --> 00:08:48.470
of function called before create and
before sign in.

115
00:08:48.470 --> 00:08:50.270
And these are blocking functions.

116
00:08:50.270 --> 00:08:53.473
So the way that these
work these are v2 only.

117
00:08:53.473 --> 00:09:00.018
But when a user goes to create an account,
you can block on that account creation and

118
00:09:00.018 --> 00:09:04.411
you can say, hey,
I'm now only gonna allow this user,

119
00:09:04.411 --> 00:09:08.272
if their email is a part
of my company's domain.

120
00:09:08.272 --> 00:09:13.290
Or if they belong to a GitHub
repository that I can check in the API.

121
00:09:13.290 --> 00:09:15.600
So you can do a lot of
custom checks in here.

122
00:09:15.600 --> 00:09:19.303
And the same thing with before signing
every time before user signs in,

123
00:09:19.303 --> 00:09:22.140
you can do some custom
checking there as well.

124
00:09:22.140 --> 00:09:27.580
And so the token will not be issued
until that sign in function returns.

125
00:09:27.580 --> 00:09:31.120
So it's a really nice way of doing
a lot of complex custom logic.

