WEBVTT

1
00:00:00.249 --> 00:00:06.549
We talked about, sorry, Firebase
updating optimistically or the like of.

2
00:00:06.549 --> 00:00:11.323
I'm just kind of curious, is there,
like you mentioned offline,

3
00:00:11.323 --> 00:00:15.848
is the datastore offline that
then syncs whenever possible, or

4
00:00:15.848 --> 00:00:17.732
what happens if you-
&gt;&gt; Yeah.

5
00:00:17.732 --> 00:00:20.957
&gt;&gt; Update and
then the user closes the tab, right, and

6
00:00:20.957 --> 00:00:24.266
they come back to that tab,
is that data still there?

7
00:00:24.266 --> 00:00:28.476
&gt;&gt; Yeah, and when we get to the very next
sections, Firestore, we're gonna get a lot

8
00:00:28.476 --> 00:00:32.531
more into that, but that's a very good
question to be curious about right now.

9
00:00:32.531 --> 00:00:37.437
So yes, and that's a lot of the reason why
those writes can happen without awaiting

10
00:00:37.437 --> 00:00:41.444
them, cuz they are themselves not
dependent on the network state.

11
00:00:41.444 --> 00:00:45.703
When you write that, it will create an
entry, what we call a pending write, and

12
00:00:45.703 --> 00:00:48.754
then there's a whole queue of
writes that gets sent off to

13
00:00:48.754 --> 00:00:50.304
a server behind the scenes.

14
00:00:50.304 --> 00:00:54.534
But all of that gets synchronized
in a cache in IndexedDB.

15
00:00:54.534 --> 00:00:58.601
And so you have to enable offline,
which we'll see, but

16
00:00:58.601 --> 00:01:04.109
if you have offline enabled and then you
run that command, it write a setDoc or

17
00:01:04.109 --> 00:01:08.708
something like that,
it enters that in this background queue.

18
00:01:08.708 --> 00:01:12.465
And if the user just closed the tab
before it happened, that's fine,

19
00:01:12.465 --> 00:01:16.167
it's sitting in IndexedDB for
the next time they open back up again.

20
00:01:16.167 --> 00:01:19.655
It just says, oop, is there any
pending writes left in the queue?

21
00:01:19.655 --> 00:01:22.834
There are,
let me take off from there, yeah.

22
00:01:22.834 --> 00:01:27.505
And there's information that we see as
well within snapshots about the state of

23
00:01:27.505 --> 00:01:31.897
that data, whether it is appending
write or whether it's from the cache or

24
00:01:31.897 --> 00:01:33.446
from the network as well.

25
00:01:33.446 --> 00:01:38.564
So you can build a lot of really
powerful offline UI with the cloud with

26
00:01:38.564 --> 00:01:43.518
a cross through, you can say,
hey, this one hasn't synced yet.

27
00:01:43.518 --> 00:01:48.653
Okay, so now this is a nice method,
because it has everything initialized,

28
00:01:48.653 --> 00:01:51.026
cuz it's everything that we need.

29
00:01:51.026 --> 00:01:54.935
And if we're using more services,
we can just add more and more into it.

30
00:01:54.935 --> 00:01:57.352
And everything kinda comes
back through initialize.

31
00:01:57.352 --> 00:02:01.304
And cool thing about initialize is that
initialize app, as long as you pass

32
00:02:01.304 --> 00:02:05.399
through the same configuration object,
you can call it over and over again.

33
00:02:05.399 --> 00:02:09.866
And it notices that and says, hey,
I'm not gonna reinitialize an app for you,

34
00:02:09.866 --> 00:02:12.875
I'm just gonna give you
the one I know already exist.

35
00:02:12.875 --> 00:02:17.540
So what I want to do at this point
though is I have everything together, so

36
00:02:17.540 --> 00:02:19.837
I want to connect out to emulators.

37
00:02:19.837 --> 00:02:24.732
And each emulator supporting service
has what we call the connect API,

38
00:02:24.732 --> 00:02:27.505
because they all start with connect, so

39
00:02:27.505 --> 00:02:31.683
connect to Firestore emulator,
Connect to Auth emulator.

40
00:02:31.683 --> 00:02:34.990
And what I can do within here is to say,
okay,

41
00:02:34.990 --> 00:02:39.792
let's connect to AuthEmulator,
I'll pass on the auth object.

42
00:02:39.792 --> 00:02:45.906
I need to say this runs on localhost,

43
00:02:45.906 --> 00:02:49.466
what is it, 999.

44
00:02:49.466 --> 00:02:53.818
We're gonna set this up in just a minute,
I'm doing a lot of this from memory.

45
00:02:53.818 --> 00:02:56.071
And then the same thing with Firestore,

46
00:02:56.071 --> 00:02:58.861
they're a little different
in their signature.

47
00:02:58.861 --> 00:03:02.608
So I pass in Firestore,
the host is local host,

48
00:03:02.608 --> 00:03:08.062
the port number usually is 8080,
and I think that's all I need.

49
00:03:08.062 --> 00:03:12.918
So now, what this will do is it'll say,
hey, let me connect out to the emulators.

50
00:03:12.918 --> 00:03:19.606
And I can even say if location.hostname is

51
00:03:19.606 --> 00:03:26.034
equal to localhost, Then do this.

52
00:03:26.034 --> 00:03:32.405
So I'm not accidentally trying to connect
out to emulators while in production.

53
00:03:32.405 --> 00:03:36.394
There are more advanced ways of actually
just removing this with Webpack and

54
00:03:36.394 --> 00:03:37.715
other cool build tools.

55
00:03:37.715 --> 00:03:41.483
But this is sort of a very simple approach
of saying, hey, one of my local hosts, let

56
00:03:41.483 --> 00:03:45.379
me connect out to emulators, otherwise,
let me connect out to production services.

57
00:03:48.605 --> 00:03:51.063
So to get the emulators up and running,

58
00:03:51.063 --> 00:03:55.682
you can know if you have emulators set
up because firebase.json is sort of

59
00:03:55.682 --> 00:03:59.791
a manifest of all these things
that you're running in Firebase.

60
00:03:59.791 --> 00:04:02.898
This is the hosting key
cuz we set up our hosting.

61
00:04:02.898 --> 00:04:04.767
We set our public folder was dist,

62
00:04:04.767 --> 00:04:08.322
we automatically wanna ignore
node modules and stuff like that.

63
00:04:08.322 --> 00:04:11.643
And then this rewrite right
here sets up a rewrite for

64
00:04:11.643 --> 00:04:16.562
a single page app, so they always go
home and do client side routing instead.

65
00:04:16.562 --> 00:04:20.425
So what we also wanna do is we
wanna set up emulators, and

66
00:04:20.425 --> 00:04:25.625
you can see that the emulators would
be configured in here, and we don't.

67
00:04:25.625 --> 00:04:29.921
So what we can say is npx
firebase init emulators.

68
00:04:32.714 --> 00:04:37.169
And when this runs, it says, o,h great,
what emulators would you like to set up?

69
00:04:37.169 --> 00:04:42.036
Well, I want the authentication emulator,
and I want the Firestore emulator.

70
00:04:42.036 --> 00:04:44.499
I hit Enter and it's gonna say,
hey, what ports do you want?

71
00:04:44.499 --> 00:04:47.959
And if you look at that,
auth runs on 999, that's our default one,

72
00:04:47.959 --> 00:04:50.859
I always use that one,
you can use which one you would like.

73
00:04:50.859 --> 00:04:53.482
Firestore runs an 8080.

74
00:04:53.482 --> 00:04:56.881
And in hosting,
I like to never run things on port 5000,

75
00:04:56.881 --> 00:04:59.357
because everything runs on port 5000.

76
00:04:59.357 --> 00:05:02.678
So I don't know, 5032, that sounds good.

77
00:05:02.678 --> 00:05:05.282
And then it says,
would you like to enable the Emulator UI?

78
00:05:05.282 --> 00:05:10.216
Which yes, it's awesome, and we're
gonna leave the Emulator UI port empty,

79
00:05:10.216 --> 00:05:13.473
so it connects to whatever
available port is there.

80
00:05:13.473 --> 00:05:17.015
And if you need to download
the emulators there, it will do it, and

81
00:05:17.015 --> 00:05:19.180
then now I can connect out to emulators.

82
00:05:23.538 --> 00:05:27.450
And so what I can do now is I can actually
take a look and run at the emulators.

83
00:05:27.450 --> 00:05:34.855
So I can say npx firebase, man,
I wish this was a little bigger,

84
00:05:34.855 --> 00:05:39.215
I can say npx firebase emulators start.

85
00:05:42.025 --> 00:05:43.044
And it's gonna run.

86
00:05:43.044 --> 00:05:47.744
And this is why we need Java,
because these emulators,

87
00:05:47.744 --> 00:05:50.148
they expect a Java runtime.

88
00:05:50.148 --> 00:05:51.291
And so it goes, awesome.

89
00:05:51.291 --> 00:05:54.061
Look at that, I am up and running,

90
00:05:54.061 --> 00:05:59.519
I have an authentication emulator and
Firestore and also hosting.

91
00:05:59.519 --> 00:06:04.763
And if we go into local host 4000,
we can see that this

92
00:06:04.763 --> 00:06:11.553
is a local running UI that allows us
to manage all of these things offline.

93
00:06:11.553 --> 00:06:16.381
There's a lot of other emulators as well,
but with auth, we can add users.

94
00:06:16.381 --> 00:06:21.268
With Firestore, we have a very similar
data viewer, we can start adding or

95
00:06:21.268 --> 00:06:24.929
seeding in data, and
we're doing all of this locally.

96
00:06:24.929 --> 00:06:27.275
And so at no point do you
have to worry about, oops,

97
00:06:27.275 --> 00:06:29.035
I'm writing this out to production.

98
00:06:33.835 --> 00:06:35.770
All right, so back to the config.

99
00:06:35.770 --> 00:06:43.090
So now, if I go into my components,
let's go into here,

100
00:06:43.090 --> 00:06:47.820
instead of calling initializeApp,

101
00:06:47.820 --> 00:06:53.932
I can just import
initialize from./firebase

102
00:06:58.738 --> 00:07:02.258
And I don't even need a config anymore cuz
it's doing all that behind the scenes.

103
00:07:02.258 --> 00:07:06.053
And that's gonna import
from this firebaseApp.

104
00:07:06.053 --> 00:07:11.242
Also, firestore and
auth will return from that.

105
00:07:11.242 --> 00:07:14.442
I can delete auth from there, and

106
00:07:14.442 --> 00:07:20.170
I don't even think I need, yes,
I do need auth right here.

107
00:07:20.170 --> 00:07:24.795
And so I can press that in
to sign in anonymously.

108
00:07:24.795 --> 00:07:27.789
And we could have everything
working there, but

109
00:07:27.789 --> 00:07:31.012
this will actually work
from their local emulator.

110
00:07:31.012 --> 00:07:35.749
So I'm running the emulator
in one tab right here,

111
00:07:35.749 --> 00:07:40.059
and so I can go and
run my dev server in another.

112
00:07:40.059 --> 00:07:45.939
So this will be on 3001, it's ../firebase,

113
00:07:45.939 --> 00:07:49.064
I believe, my bad, awesome.

114
00:07:49.064 --> 00:07:52.294
So this right here says
running in emulator mode.

115
00:07:52.294 --> 00:07:54.194
Do not use with production credential.

116
00:07:54.194 --> 00:07:56.411
So we know we're connected
out to the emulator.

117
00:07:56.411 --> 00:08:00.124
And this is kind of an annoying
little banner, and when most people,

118
00:08:00.124 --> 00:08:03.593
you set up the emulator,
they ask how do I get rid of that banner?

119
00:08:03.593 --> 00:08:08.460
And to get rid of that banner, it's pretty
easy, you just come into the connect.

120
00:08:08.460 --> 00:08:14.534
And we have a configuration object as the
last parameter where you can say disable,

121
00:08:14.534 --> 00:08:18.895
I do not need all of that VS Code,
disableWarnings is true.

122
00:08:18.895 --> 00:08:22.771
And then now, if I refresh, look at that,

123
00:08:22.771 --> 00:08:27.744
it's gone, but
we are connected out to the emulator.

124
00:08:27.744 --> 00:08:30.655
If I click sign in, we got signed in.

125
00:08:30.655 --> 00:08:35.733
And if I come out to authentication,
look at that,

126
00:08:35.733 --> 00:08:38.984
this is right in my local emulator.

127
00:08:38.984 --> 00:08:41.825
So the same thing can
happen with Firestore,

128
00:08:41.825 --> 00:08:46.629
if I start writing data in Firestore,
we'll see everything happen there.

129
00:08:46.629 --> 00:08:49.093
For the sake of time,
I wanna get to the other stuff, so

130
00:08:49.093 --> 00:08:53.023
I'm gonna move forward without connecting
out to, actually, yeah, to Firestore.

131
00:08:53.023 --> 00:08:58.115
But one of the things I'm going to show
now is you can also, where we talked about

132
00:08:58.115 --> 00:09:02.908
deploying, every time I deployed,
it went to markdown-me.web.app.

133
00:09:02.908 --> 00:09:06.903
So let's say someone was like, hey, let's
add a new feature, and I deployed it,

134
00:09:06.903 --> 00:09:10.288
well, if I deploy it to production and
it breaks, that's not great.

135
00:09:10.288 --> 00:09:13.359
I want some sort of collaborative
environment for doing deployments.

136
00:09:13.359 --> 00:09:17.326
So I can use a feature of Firebase
hosting called preview channels.

137
00:09:17.326 --> 00:09:23.613
And so I could say npx firebase
hosting:channel:deploy,

138
00:09:23.613 --> 00:09:28.056
and I can give it any name I want,
staging.

139
00:09:28.056 --> 00:09:32.852
And so what this will need to do is
it'll need to be the built version,

140
00:09:32.852 --> 00:09:36.755
which I may have needed to run build,
but that's fine.

141
00:09:36.755 --> 00:09:39.913
So then it's gonna go out,
it's gonna do a deployment.

142
00:09:39.913 --> 00:09:43.467
But instead of going
out to a specific URL,

143
00:09:43.467 --> 00:09:47.330
I'm using a different
project at this point.

144
00:09:47.330 --> 00:09:51.766
But as you can see,
it goes out to this URL,

145
00:09:51.766 --> 00:09:56.215
which sort of gives me some generated URL.

146
00:09:56.215 --> 00:09:58.877
And what's great about this
is that I have a new change,

147
00:09:58.877 --> 00:10:02.443
I wanna send it to a coworker, to a
friend, or whoever to test it out for me,

148
00:10:02.443 --> 00:10:06.153
I just send out this preview channel,
I give it to someone and they can use it.

149
00:10:06.153 --> 00:10:10.904
And the default setting for
preview channels is in seven days,

150
00:10:10.904 --> 00:10:12.614
they just disappear.

151
00:10:12.614 --> 00:10:15.814
So you can configure that to be shorter or
longer.

152
00:10:15.814 --> 00:10:21.347
And also with Firebase CLI, you can set
this to work up with GitHub actions.

153
00:10:21.347 --> 00:10:24.318
So out of the box,
every time someone sends a pull request,

154
00:10:24.318 --> 00:10:26.051
it will create a preview channel.

155
00:10:26.051 --> 00:10:30.245
And every time a commit
happens to that pull request,

156
00:10:30.245 --> 00:10:33.797
it will rerun and
deploy the latest changes.

157
00:10:33.797 --> 00:10:37.833
So it's a really nice way of doing PRs and
doing collaborative like,

158
00:10:37.833 --> 00:10:39.998
hey, I changed background to blue.

159
00:10:39.998 --> 00:10:42.574
Wait, no, change it to cyan or whatever,

160
00:10:42.574 --> 00:10:45.663
just really nice way of
seeing different changes.

161
00:10:45.663 --> 00:10:49.587
So yeah, so that right there allows
me to have local environments and

162
00:10:49.587 --> 00:10:50.949
staged environments.

163
00:10:50.949 --> 00:10:54.675
And so this keeps us from just pushing
all changes to one project with all these

164
00:10:54.675 --> 00:10:56.295
cloud connected environments.

165
00:10:56.295 --> 00:10:59.504
So that is a bit of a best practice.

166
00:10:59.504 --> 00:11:04.849
But also a great part about having
the local emulators is that what

167
00:11:04.849 --> 00:11:09.996
we saw here in the console is
that our security rules say, hey,

168
00:11:09.996 --> 00:11:15.357
anyone can read and write data at
this location before this date.

169
00:11:15.357 --> 00:11:16.150
That's not great,

170
00:11:16.150 --> 00:11:18.863
I don't like that, I don't want
people to be able to read and write.

171
00:11:18.863 --> 00:11:23.590
So what I actually can do for now since
I'm in development mode, I can say,

172
00:11:23.590 --> 00:11:26.078
hey, allowed read and write is false.

173
00:11:26.078 --> 00:11:29.488
And so now, no one is going to
be able to read and write, so

174
00:11:29.488 --> 00:11:31.847
this database will fail for everyone.

175
00:11:31.847 --> 00:11:38.221
And what I can do is locally,
I can create a local set of rules.

176
00:11:38.221 --> 00:11:40.455
I'll go back to the console just for
you, Mark.

177
00:11:40.455 --> 00:11:44.918
And I can say npx firebase init firestore,
and

178
00:11:44.918 --> 00:11:50.186
then now it's going to set
up local Firestore rules for

179
00:11:50.186 --> 00:11:53.749
me, indexes which we'll get into.

180
00:11:53.749 --> 00:11:58.969
And then now, I have this new
firestore.rules file, and I can develop

181
00:11:58.969 --> 00:12:04.716
all of my security rules locally, and
they work against the emulator as well.

182
00:12:04.716 --> 00:12:09.544
So any changes I make, which we'll get
all into security rules here in a minute,

183
00:12:09.544 --> 00:12:13.236
to these security rules,
I can make sure, if there's a bug,

184
00:12:13.236 --> 00:12:16.439
I will find it locally before
I find it in production.

185
00:12:16.439 --> 00:12:20.643
And if my production data is not ready to
be read yet, I can lock it all down and

186
00:12:20.643 --> 00:12:23.562
then just keep running off
this local environment.

187
00:12:23.562 --> 00:12:25.662
So, yes.

188
00:12:25.662 --> 00:12:29.263
&gt;&gt; Can I populate users and
data in my development environment, so

189
00:12:29.263 --> 00:12:31.073
I don't have to recreate them?

190
00:12:31.073 --> 00:12:35.595
&gt;&gt; Absolutely, so one of the things
that we'll be using a lot

191
00:12:35.595 --> 00:12:40.671
throughout this whole section is,
so Firebase has a server SDK,

192
00:12:40.671 --> 00:12:45.399
we call the Admin SDK that is
very similar to the client SDKs.

193
00:12:45.399 --> 00:12:52.114
But it has a lot more powerful actions,
because it's some server, it can do a lot.

194
00:12:52.114 --> 00:12:55.525
You can use that to write data if
you wanna do your own scripting.

195
00:12:55.525 --> 00:13:01.504
And with the emulators,
you can write a command

196
00:13:01.504 --> 00:13:07.486
where you say firebase emulators:start,
and

197
00:13:07.486 --> 00:13:12.583
you can say import=./seed or local.

198
00:13:12.583 --> 00:13:18.315
And then also one of my favorite
bits is you can say export-on-exit,

199
00:13:18.315 --> 00:13:21.229
and when you turn off the terminal,

200
00:13:21.229 --> 00:13:25.816
whatever existed gets spit
out into that .local file.

201
00:13:25.816 --> 00:13:28.897
So you can seed it all up one
time with some commands or

202
00:13:28.897 --> 00:13:30.521
you can manually enter it.

203
00:13:30.521 --> 00:13:35.021
And when it cuts out, it will export
it all out and you won't have to do

204
00:13:35.021 --> 00:13:39.462
a receipt every time, it just reads
off of that file or set of files.

205
00:13:39.462 --> 00:13:41.230
And it does the same for the Auth as well,

206
00:13:41.230 --> 00:13:43.578
you'll see it'll spit out
all of your user records.

207
00:13:43.578 --> 00:13:45.187
So I use that totally.

208
00:13:45.187 --> 00:13:48.716
And actually as we get into some of
the more exercises, I'll point out to you

209
00:13:48.716 --> 00:13:52.262
where they are, so you see, yeah,
I'm reading in from that section.

210
00:13:52.262 --> 00:13:54.734
So a great question.

211
00:13:54.734 --> 00:13:58.880
Awesome, so this is a bit of a better
practice than what we were doing before.

212
00:13:58.880 --> 00:14:03.332
We're connecting out to emulators,
we're deploying to different environments,

213
00:14:03.332 --> 00:14:05.139
we are not talking to production.

214
00:14:05.139 --> 00:14:08.419
And so we don't have to worry
about security from the get go,

215
00:14:08.419 --> 00:14:11.234
is someone gonna be talking
to my database and all that?

216
00:14:11.234 --> 00:14:14.280
Nope, we can work all locally until
we're ready to get to production.

