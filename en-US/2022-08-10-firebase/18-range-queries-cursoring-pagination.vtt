WEBVTT

1
00:00:00.387 --> 00:00:05.238
All right, so with range queries, this
allows you to paginate through results.

2
00:00:05.238 --> 00:00:08.389
And so this, you have the startAt.

3
00:00:08.389 --> 00:00:11.259
And so in this case,
we're back at expenses again.

4
00:00:11.259 --> 00:00:15.754
And we're ordering by date,
cuz when you're doing ranges, or

5
00:00:15.754 --> 00:00:19.512
cursors, you need to know
what you're ordering by.

6
00:00:19.512 --> 00:00:23.882
And we can actually startAt
the first of the year,

7
00:00:23.882 --> 00:00:27.118
and then limit to the last ten items.

8
00:00:27.118 --> 00:00:30.277
And so what this will do is
it will actually, in a way,

9
00:00:30.277 --> 00:00:33.036
maybe do the opposite of
what you would think.

10
00:00:33.036 --> 00:00:35.271
Is that it would start at
the beginning of the year, but

11
00:00:35.271 --> 00:00:37.421
let's say we're all the way
up to the 31st today.

12
00:00:37.421 --> 00:00:39.891
So any expenses it would have,

13
00:00:39.891 --> 00:00:45.216
it would the last ten from today back,
because it's the last one.

14
00:00:45.216 --> 00:00:48.398
So startAT is a way for
you to order by something,

15
00:00:48.398 --> 00:00:50.735
and then curse your way through it.

16
00:00:50.735 --> 00:00:55.224
And then we also have the ability to
combine it with startingAt and endingAt.

17
00:00:55.224 --> 00:01:00.613
And you can still limit within that range,
so this one orders by date again.

18
00:01:00.613 --> 00:01:05.785
It starts at the first of the year,
but it ends at the first of February,

19
00:01:05.785 --> 00:01:08.731
and then we get the last ten of February.

20
00:01:08.731 --> 00:01:15.257
So that helps us figure out ranges, but
how do we move within those ranges?

21
00:01:15.257 --> 00:01:18.008
Well, from this query, we are doing the
same thing where we're ordering by date.

22
00:01:18.008 --> 00:01:21.266
We're starting at
the first of the year and

23
00:01:21.266 --> 00:01:25.985
then ending at the first of February,
limiting the last ten.

24
00:01:25.985 --> 00:01:28.595
And imagine that later on the line,

25
00:01:28.595 --> 00:01:33.474
you click a button to get the next page,
so increasing the window.

26
00:01:33.474 --> 00:01:36.049
What you would do is,
I'm only getting this.

27
00:01:36.049 --> 00:01:38.831
This is a one time get,
which is why you see await.

28
00:01:38.831 --> 00:01:41.128
We have a method called getDocs.

29
00:01:41.128 --> 00:01:43.505
If you don't wanna do real-time updates,

30
00:01:43.505 --> 00:01:46.148
allows you to get all your
information one time.

31
00:01:46.148 --> 00:01:47.305
This gets back my data.

32
00:01:47.305 --> 00:01:51.610
Normally, I would actually have
this within the initial query.

33
00:01:51.610 --> 00:01:56.342
And then I would save that last document,
or the first document, in this case.

34
00:01:56.342 --> 00:02:00.700
And I get this docs, which by the way,
this is a newcomer to JavaScript,

35
00:02:00.700 --> 00:02:02.563
the at method, it's so cool.

36
00:02:02.563 --> 00:02:06.188
You get at an index in an array no more
like array brackets, just, I don't know.

37
00:02:06.188 --> 00:02:09.619
I discovered this the other week, and
I'm just trying to spread the joy.

38
00:02:09.619 --> 00:02:14.099
So the at operator and your arrays,
it's new, it's great, it's awesome.

39
00:02:14.099 --> 00:02:17.987
But then we get the first document
of that query, and then now we can

40
00:02:17.987 --> 00:02:22.164
say startAt the beginning of the year,
just like we're doing up here.

41
00:02:22.164 --> 00:02:25.667
But moving the array,
we can end before the first doc.

42
00:02:25.667 --> 00:02:28.794
So now that first ten we had,
they're gone, and

43
00:02:28.794 --> 00:02:32.391
now we have moved on to the next
ten using that document.

44
00:02:32.391 --> 00:02:35.751
So as you're cursing through or
paging through results,

45
00:02:35.751 --> 00:02:38.022
this is how you create all these pages.

46
00:02:38.022 --> 00:02:42.267
Is that you keep track of where you are,
what was the first, or what was the last,

47
00:02:42.267 --> 00:02:44.641
depending on your query on the document,
and

48
00:02:44.641 --> 00:02:46.973
you pass that to one of
the range functions.

49
00:02:46.973 --> 00:02:50.232
And then that way,
Firestore's smart enough to say, okay,

50
00:02:50.232 --> 00:02:52.873
I'm gonna get all
the documents beyond this way.

51
00:02:52.873 --> 00:02:56.792
And this is actually exactly what
we do in the Firestore console, or

52
00:02:56.792 --> 00:02:59.836
in the emulator when you
see us just scroll through.

53
00:02:59.836 --> 00:03:01.792
We are listening to scroll events, and

54
00:03:01.792 --> 00:03:06.190
we're saying, you're about to hit a scroll
point, so let's change the window.

55
00:03:06.190 --> 00:03:10.731
So that's how we can keep all of your
data kind of rendering in the browser.

56
00:03:14.172 --> 00:03:17.087
So let's go through and work on that.

57
00:03:17.087 --> 00:03:21.178
So this is back to the same page,
same app, that is.

58
00:03:21.178 --> 00:03:24.600
I'm gonna go to ranges and cursory, and

59
00:03:24.600 --> 00:03:30.549
there's nothing there right now,
and go into ranges and cursoring.

60
00:03:30.549 --> 00:03:35.896
So first one, always easy, get the first
20 categories that are in 2022.

61
00:03:35.896 --> 00:03:38.608
So you could do this with greater than or
equal to on a wearable.

62
00:03:38.608 --> 00:03:40.385
We're gonna do this on a range now.

63
00:03:40.385 --> 00:03:43.772
So I'm gonna say where,
I started where, I'm sorry, where,

64
00:03:43.772 --> 00:03:47.056
I just said don't do it where,
I'm gonna first say orderBy.

65
00:03:47.056 --> 00:03:52.151
And we got reversed 20 categories in 2022.

66
00:03:52.151 --> 00:03:54.799
Why did I say categories?

67
00:03:54.799 --> 00:03:58.869
Expenses, that's what I wanna say,
expenses.

68
00:03:58.869 --> 00:04:05.312
So we're gonna say orderBy(dat),

69
00:04:05.312 --> 00:04:11.554
and we're going to say startAt(new

70
00:04:11.554 --> 00:04:16.993
Date(1/1/2022) and

71
00:04:16.993 --> 00:04:22.023
limit to, not limit to,

72
00:04:22.023 --> 00:04:25.061
limit(20).

73
00:04:25.061 --> 00:04:27.102
And make sure you always
include the collection.

74
00:04:27.102 --> 00:04:29.141
I do this all the time,
I always forget the collection.

75
00:04:32.566 --> 00:04:38.549
All right, so this starts at 1/1, and as
I scroll through, goes only down to 1/2.

76
00:04:38.549 --> 00:04:40.881
So all right, we're cursing through that.

77
00:04:47.343 --> 00:04:52.578
And so now,
this one's a little more complicated.

78
00:04:53.832 --> 00:04:54.815
Break that up.

79
00:04:54.815 --> 00:05:00.658
I get the first 20 expenses that contain
the category of transportation or

80
00:05:00.658 --> 00:05:04.775
housing, and
that costs between 100 and 120.

81
00:05:04.775 --> 00:05:10.279
So to do that, I can say, all right,
what do I want to order by?

82
00:05:10.279 --> 00:05:13.772
And then I'm gonna order by cost,
in this case,

83
00:05:13.772 --> 00:05:16.936
because I'm ranging in between these two.

84
00:05:16.936 --> 00:05:20.060
So I can say orderBy(cost),

85
00:05:20.060 --> 00:05:24.757
and I'll say start at 100, end at 120.

86
00:05:24.757 --> 00:05:27.437
And we can still do other
queries on this as well.

87
00:05:27.437 --> 00:05:30.878
So I can still use where, and

88
00:05:30.878 --> 00:05:35.757
I can say where('categories') is,

89
00:05:35.757 --> 00:05:40.924
what is it, 'array-contains-any',

90
00:05:40.924 --> 00:05:47.683
of, let's copy this,
transportation, or housing.

91
00:05:47.683 --> 00:05:48.970
And what's the limit?

92
00:05:48.970 --> 00:05:50.470
Limit the first 20.

93
00:05:58.497 --> 00:05:59.207
What did I do wrong here?

94
00:05:59.207 --> 00:06:02.171
I probably did the same thing again,
didn't I?

95
00:06:02.171 --> 00:06:05.054
Start, startAt.

96
00:06:05.054 --> 00:06:10.403
And I still need the collection,
keep forgetting that.

97
00:06:10.403 --> 00:06:15.330
All right, So

98
00:06:15.330 --> 00:06:18.345
our categories had transportation or
housing.

99
00:06:18.345 --> 00:06:23.479
We started at 100, and we're just doing
the first 20, but we would stop at 120.

100
00:06:23.479 --> 00:06:28.329
Now, I'm gonna skip to
this complicated one.

101
00:06:28.329 --> 00:06:29.854
I'm gonna skip over this third one,

102
00:06:29.854 --> 00:06:32.222
cuz it's more or
less the same of what we've been doing.

103
00:06:32.222 --> 00:06:38.144
What we're gonna to focus on is
we're going to get the first

104
00:06:38.144 --> 00:06:44.318
ten expenses that contain
the category of food, fun, kids.

105
00:06:47.375 --> 00:06:50.499
Food, fun, or kids, it should be written,

106
00:06:50.499 --> 00:06:55.372
that cost between 120, and
then we're going to get the next 10.

107
00:06:55.372 --> 00:06:58.522
So we're going to orderBy('cost'),

108
00:07:01.310 --> 00:07:04.855
startAt, what was it, 100.

109
00:07:06.743 --> 00:07:12.047
EndAt(120), And

110
00:07:12.047 --> 00:07:16.684
then we can say where('categories',

111
00:07:16.684 --> 00:07:24.815
'array-contains-any', ['Food',
'fun', or 'kids']),

112
00:07:29.831 --> 00:07:33.559
And limit to the first 10.

113
00:07:33.559 --> 00:07:37.538
So this will go out, and let's pretend
we click some button or something,

114
00:07:37.538 --> 00:07:38.877
we'll get the results.

115
00:07:38.877 --> 00:07:45.129
We'll grab the last document, and
then from here, we can do more or

116
00:07:45.129 --> 00:07:50.183
less the same,
except we want to start at the last doc.

117
00:07:50.183 --> 00:07:55.963
expensesCol always needs to be
put in there, same up here.

118
00:08:02.500 --> 00:08:07.161
And so now,
this is the ten to kinda show it for

119
00:08:07.161 --> 00:08:12.458
a fact,
this should probably be my console.log,

120
00:08:13.875 --> 00:08:17.240
consol.log = results.docs., my gosh,

121
00:08:17.240 --> 00:08:21.338
docs.map(d.data), just to
kinda show what happened.

122
00:08:21.338 --> 00:08:27.517
You can see we get our
first array of these ones,

123
00:08:27.517 --> 00:08:33.233
and then it goes on to
the next array as well,

124
00:08:33.233 --> 00:08:37.420
so we're able to page through.

