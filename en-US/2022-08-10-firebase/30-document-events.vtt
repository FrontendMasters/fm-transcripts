WEBVTT

1
00:00:00.590 --> 00:00:07.286
Another type of event that
we'll look at is documents.

2
00:00:07.286 --> 00:00:11.854
So one of the things that we
could do is we could say,

3
00:00:11.854 --> 00:00:16.317
hey, whenever a user writes
out to a document, so

4
00:00:16.317 --> 00:00:20.491
documents of uid, and
we provide a wildcard.

5
00:00:20.491 --> 00:00:25.885
Whenever these things are updated,
we'll get the change back.

6
00:00:25.885 --> 00:00:31.153
And just like how I mentioned before, we
could say hey, whenever someone mentions

7
00:00:31.153 --> 00:00:35.907
change, let's update all of their
expenses with their new user profile.

8
00:00:35.907 --> 00:00:39.856
So I can use the Admin SDK for that, so

9
00:00:39.856 --> 00:00:43.687
const firestore is getFirestore.

10
00:00:43.687 --> 00:00:48.578
It has a very similar but not totally
similar API because they're different

11
00:00:48.578 --> 00:00:53.179
feature sets than the Client SDK,
but it's the same type of concepts.

12
00:00:53.179 --> 00:00:58.716
And I can say, all right, now that I have
Firestore, right, not onCreate, right?

13
00:00:58.716 --> 00:01:05.003
And here I can say,
all right let's get the user,

14
00:01:05.003 --> 00:01:09.362
or I should say, expensesQuery.

15
00:01:09.362 --> 00:01:14.177
And that's gonna be
firestore.collection('expenses').

16
00:01:14.177 --> 00:01:17.747
And if I happen to fan out, I could do, or

17
00:01:17.747 --> 00:01:23.417
if I had to use subcollection hierarchy,
I could do it that way,

18
00:01:23.417 --> 00:01:28.357
but I can just say .where
where('uid') is = = to.

19
00:01:28.357 --> 00:01:32.302
And within here actually,

20
00:01:32.302 --> 00:01:39.161
I can get the context and
say context.Params,

21
00:01:39.161 --> 00:01:43.976
and one of the params will be uid.

22
00:01:45.944 --> 00:01:50.520
So now, I have the query.

23
00:01:50.520 --> 00:01:54.767
If I wanna get all the data,
I can say snapshot and

24
00:01:54.767 --> 00:01:58.091
I'll write, expensesQuery.get.

25
00:01:58.091 --> 00:02:03.259
This will do a one-time
get of all these expenses.

26
00:02:03.259 --> 00:02:09.128
And then now, I'll have the ability
to say snapshot.forEach,

27
00:02:09.128 --> 00:02:14.473
and I can loop through and
I'll say forEach(snapshot).

28
00:02:14.473 --> 00:02:18.658
This will give me every expense
that belongs to that user.

29
00:02:18.658 --> 00:02:23.426
And before talked about using batches, so

30
00:02:23.426 --> 00:02:28.600
I could say const batch
is firestore.batch.

31
00:02:28.600 --> 00:02:36.118
And now within each one I could
say batch.update(snapshot).ref,

32
00:02:36.118 --> 00:02:41.128
because this is the reference
of that expense,

33
00:02:41.128 --> 00:02:45.897
so where that expense
lives in the database.

34
00:02:45.897 --> 00:02:48.428
And we wanna update it with
a new piece of data, and

35
00:02:48.428 --> 00:02:50.190
we wanna update it with a new user.

36
00:02:50.190 --> 00:02:54.021
So to get the new user,
that is the change that is happening.

37
00:02:54.021 --> 00:02:56.901
A user was updated, it's the change.

38
00:02:56.901 --> 00:03:01.810
And so changes are interesting because
you can get the state before, and

39
00:03:01.810 --> 00:03:04.480
you can get the state after the change.

40
00:03:04.480 --> 00:03:07.994
And so that's really useful for
any type of, hey,

41
00:03:07.994 --> 00:03:11.768
don't allow this to happen,
or allow this to happen.

42
00:03:11.768 --> 00:03:14.978
There's so many good uses for this.

43
00:03:14.978 --> 00:03:17.273
I want to get the new change.

44
00:03:17.273 --> 00:03:23.078
So change, and I wanna get the after.

45
00:03:23.078 --> 00:03:27.980
And I believe, yeah,
after is also a snapshot, so

46
00:03:27.980 --> 00:03:31.630
let's say user = after.data().

47
00:03:31.630 --> 00:03:38.197
So now,
each one will get added to the batch.

48
00:03:38.197 --> 00:03:40.953
I need to, yeah, this should work.

49
00:03:40.953 --> 00:03:43.317
Feel like might be doing something
wrong but we'll figure that out,

50
00:03:43.317 --> 00:03:44.547
we're doing everything locally.

51
00:03:44.547 --> 00:03:50.076
And now I can say await batch.commit().

52
00:03:50.076 --> 00:03:54.186
And something to point out
here is that this will

53
00:03:54.186 --> 00:03:57.384
atomically update all of this data.

54
00:03:57.384 --> 00:04:00.784
But if there are more than 500,
it will throw an error.

55
00:04:00.784 --> 00:04:03.058
I know that there's, not in this case.

56
00:04:03.058 --> 00:04:05.170
So there's a couple of
things that I could do.

57
00:04:05.170 --> 00:04:07.679
Maybe it's not important that
it all happens atomically, so

58
00:04:07.679 --> 00:04:08.895
I could just read through it.

59
00:04:08.895 --> 00:04:12.250
Also we learned how to do cursors,
so we could curse through it and

60
00:04:12.250 --> 00:04:16.044
say, hey, let's create batches and
cursors, so it happens over time.

61
00:04:16.044 --> 00:04:20.134
But in general, if you are doing more
than 500 or really more than I'd

62
00:04:20.134 --> 00:04:24.960
say like 1,000 or so, this kind of thing
should be more of a cron job style thing,

63
00:04:24.960 --> 00:04:28.806
or done on something that's meant
to be a much more longer process.

64
00:04:28.806 --> 00:04:32.561
Cloud functions are only supposed to
be running for certain set of time.

65
00:04:32.561 --> 00:04:35.435
I can't remember what
their max timeout is, but

66
00:04:35.435 --> 00:04:39.161
in general it's not supposed to
be a very long server process.

67
00:04:39.161 --> 00:04:42.026
There are other tools for that, though.

68
00:04:42.026 --> 00:04:47.654
So now let's go through,
emulators are running, that's great.

69
00:04:47.654 --> 00:04:52.254
And now I wanna go into the admin SDK,
and what I wanna do is,

70
00:04:52.254 --> 00:04:57.266
as I zoom out here, Store,

71
00:04:57.266 --> 00:05:02.542
great, so
let's say we go into the first user and,

72
00:05:02.542 --> 00:05:07.956
let's see here, and
this user changes their city.

73
00:05:07.956 --> 00:05:16.145
So they no longer live in Maputo,
they now live in, Washington DC.

74
00:05:16.145 --> 00:05:20.067
Now we save, and
maybe some things are happening.

75
00:05:20.067 --> 00:05:26.381
Let's copy this uid, cuz it's important.

76
00:05:26.381 --> 00:05:28.313
And let's go into the logs.

77
00:05:28.313 --> 00:05:31.417
So the logs will show me
if anything happened.

78
00:05:31.417 --> 00:05:34.899
It says beginning execution
of update user expenses,

79
00:05:39.385 --> 00:05:43.782
Right in here, but we didn't see any
errors, so let's see if it worked.

80
00:05:46.338 --> 00:05:51.365
It's now in Firestore, I can go into
expenses and zoom out a little.

81
00:05:51.365 --> 00:05:56.772
And no no, don't delete,
that would have been bad.

82
00:05:56.772 --> 00:06:01.154
Man, I accidentally copied that ID.

83
00:06:01.154 --> 00:06:03.570
All right, let's do it on another
user cuz I'm gonna lose their ID.

84
00:06:03.570 --> 00:06:10.084
So user moved from
Santiago to Washington DC.

85
00:06:10.084 --> 00:06:14.864
Let's get their ID, Check the logs again.

86
00:06:14.864 --> 00:06:17.244
All right, that looks good.

87
00:06:17.244 --> 00:06:19.903
Now let's go to expenses and
let's run a filter.

88
00:06:19.903 --> 00:06:27.638
And so I can say where UID is
equal to this string, apply.

89
00:06:27.638 --> 00:06:33.292
And so now if we go into user,
look at that, they're now Washington DC.

90
00:06:33.292 --> 00:06:35.751
So that fanned out all of those updates.

91
00:06:35.751 --> 00:06:40.748
So if I expect that to be a rare operation
where profiles don't change that much,

92
00:06:40.748 --> 00:06:43.697
or maybe I only wanna
update on certain fields.

93
00:06:43.697 --> 00:06:45.924
So as you can see,
we can check to see what field.

94
00:06:45.924 --> 00:06:49.862
Maybe I only wanna update if
they change their industry, or

95
00:06:49.862 --> 00:06:52.555
if they change their names or whatever.

96
00:06:52.555 --> 00:06:54.658
So you can then fan out
all of those updates.

97
00:06:54.658 --> 00:06:58.962
So that is a really good use case for
being able to keep data denormalized

98
00:06:58.962 --> 00:07:03.430
across places, and just kind of
happens automatically as events occur.

