WEBVTT

1
00:00:00.050 --> 00:00:03.304
So now that we can kinda
see how to construct data,

2
00:00:03.304 --> 00:00:05.482
let's look at retrieving data.

3
00:00:05.482 --> 00:00:09.380
It all starts with a reference,
which we saw in the quick example.

4
00:00:09.380 --> 00:00:12.702
We can create a collection reference.

5
00:00:12.702 --> 00:00:18.511
So we pass in collection, and
then we pass in our FireStore example or

6
00:00:18.511 --> 00:00:24.436
a FireStore instance, and then we
have now a reference out for users.

7
00:00:24.436 --> 00:00:29.330
And then what we tend to do is the sort
of the naming convention that I use is

8
00:00:29.330 --> 00:00:33.597
the name of the reference, and
then Col if it's a collection.

9
00:00:33.597 --> 00:00:39.720
Or if I wanna get a single document,
I can write a full path out to it.

10
00:00:39.720 --> 00:00:44.916
So users/david would get me to
the document, a single document of David.

11
00:00:44.916 --> 00:00:47.199
And then I'll just say userDoc or
davidDoc,

12
00:00:47.199 --> 00:00:49.610
usually you don't know the ID name.

13
00:00:49.610 --> 00:00:50.904
And now from there,

14
00:00:50.904 --> 00:00:55.254
I have the beginnings of being able
to access data at that location.

15
00:00:58.037 --> 00:01:01.403
And then if I want to get this data and
in real time, I call that

16
00:01:01.403 --> 00:01:06.270
method with onSnapshot, and then it
returns back to me the data snapshot.

17
00:01:06.270 --> 00:01:08.584
And snapshot is a very fitting name for

18
00:01:08.584 --> 00:01:12.210
this because we're not getting
the data as is in that spot.

19
00:01:12.210 --> 00:01:17.139
We're getting the data as it was when
that transaction fired because this is

20
00:01:17.139 --> 00:01:20.690
a real time system, so
things can change all the time.

21
00:01:20.690 --> 00:01:23.340
So at that point,
that is what the data look like.

22
00:01:23.340 --> 00:01:26.277
Another update happened, well,
that's gonna call back again, and

23
00:01:26.277 --> 00:01:28.730
that's what the data
looks like at that point.

24
00:01:28.730 --> 00:01:33.636
And also, like I mentioned, the snapshot
is gonna have tons of other information

25
00:01:33.636 --> 00:01:36.423
that we can use to build
really powerful apps.

26
00:01:36.423 --> 00:01:39.636
So within documents, it's simple,
if you're listening to

27
00:01:39.636 --> 00:01:43.303
onSnapshot with a document,
it's going to come back with just data.

28
00:01:43.303 --> 00:01:47.655
And that's just the shape of
the data that's being stored there.

29
00:01:47.655 --> 00:01:51.592
With a collection,
it's a whole list of documents, and so

30
00:01:51.592 --> 00:01:56.106
you get that back as an array and
you can map over them or do whatever.

31
00:01:56.106 --> 00:01:58.863
You can reduce,
it's just a JavaScript array, so

32
00:01:58.863 --> 00:02:01.114
whatever array tricks you'd like to do.

33
00:02:01.114 --> 00:02:05.904
What I find is most common is that people
do map over and just return the data back.

34
00:02:05.904 --> 00:02:11.106
Again, this is my will sentence
execution context moment.

35
00:02:11.106 --> 00:02:15.340
Right here,
we do not await writes that happen or

36
00:02:15.340 --> 00:02:19.090
any updates that happen in Firebase.

37
00:02:19.090 --> 00:02:26.230
When I update the name of this userDoc,
I'm not waiting for it to get back.

38
00:02:26.230 --> 00:02:30.257
Well, I do care, but I do not care
to track that it succeeded or

39
00:02:30.257 --> 00:02:31.889
it errored in this case.

40
00:02:33.270 --> 00:02:36.573
What I care to do is get
when this update fires.

41
00:02:36.573 --> 00:02:39.917
So the first time onSnapshot runs,
it's just gonna have my name.

42
00:02:39.917 --> 00:02:43.770
But then when I update it with an
exclamation mark, it's gonna fire again.

43
00:02:43.770 --> 00:02:48.106
What's important note here is that even
if this transaction fails, cuz a lot of

44
00:02:48.106 --> 00:02:52.651
people, they wanna wait to see, hey, if it
fails, I wanna be able to try it again.

45
00:02:52.651 --> 00:02:54.590
You don't have to do that.

46
00:02:54.590 --> 00:03:00.201
If this fails for network reasons,
it will sit in a background queue and

47
00:03:00.201 --> 00:03:04.730
waits to keep trying until
it's able to do it again.

48
00:03:04.730 --> 00:03:09.227
So you don't actually have to worry
about managing the state of or

49
00:03:09.227 --> 00:03:13.090
the network success of any
of your writes to Firestore.

50
00:03:13.090 --> 00:03:17.046
Firestore handles all of that
behind the scenes for you.

51
00:03:17.046 --> 00:03:21.334
&gt;&gt; Are the docs out of date?

52
00:03:21.334 --> 00:03:28.388
On the Add Data docs,
they use await setDoc in multiple places.

53
00:03:28.388 --> 00:03:33.347
&gt;&gt; So they show you in the docs that you
can do it because there are times where

54
00:03:33.347 --> 00:03:35.637
you do want to await the results.

55
00:03:35.637 --> 00:03:39.185
But that is only when you are saying,

56
00:03:39.185 --> 00:03:44.109
it is paramount in some
situation that I understand

57
00:03:44.109 --> 00:03:48.471
that I received this
update from the server.

58
00:03:48.471 --> 00:03:51.266
Because that's what await does is it says,
hey,

59
00:03:51.266 --> 00:03:55.540
I want to know that the server
acknowledged that this happened.

60
00:03:55.540 --> 00:03:59.143
There are situations where
that is important, but for

61
00:03:59.143 --> 00:04:03.490
the most part,
if you're using onSnapshot, it is not.

62
00:04:03.490 --> 00:04:09.376
If you are not using onSnapshot, though,
if you are just doing a traditional, which

63
00:04:09.376 --> 00:04:15.130
is possible we actually have a subset of
Firestore library called Firestore Lite.

64
00:04:15.130 --> 00:04:18.632
Which is a much smaller version
that doesn't have the offline

65
00:04:18.632 --> 00:04:23.478
capabilities in real time streaming, that
you do follow more of a request response,

66
00:04:23.478 --> 00:04:26.180
because it is basically a REST wrapper.

67
00:04:26.180 --> 00:04:30.029
But in this world of real time updates,
while you can await and

68
00:04:30.029 --> 00:04:33.731
there might be cases too and
we document that that happens,

69
00:04:33.731 --> 00:04:36.043
we recommend that you don't await.

70
00:04:36.043 --> 00:04:38.152
And if you do care about
listening to errors,

71
00:04:38.152 --> 00:04:39.825
you do that in the second callback.

72
00:04:39.825 --> 00:04:40.900
That's a good question.

73
00:04:40.900 --> 00:04:46.480
Our documentation documents everything
that we expose within the library.

74
00:04:50.415 --> 00:04:53.400
So writing data,
we can do that mutation functions.

75
00:04:53.400 --> 00:04:57.300
Calling setDoc,
this does something destructively.

76
00:04:57.300 --> 00:05:01.020
So whatever data existed there
before gets overwritten.

77
00:05:01.020 --> 00:05:06.479
So this could have had name was Mark,
but then if I call with David,

78
00:05:06.479 --> 00:05:09.905
it's just going to erase that entirely.

79
00:05:09.905 --> 00:05:13.500
And this is good for
when you're doing create style operations.

80
00:05:14.790 --> 00:05:18.849
And then we have updateDoc,
which is a lot easier on the doc,

81
00:05:18.849 --> 00:05:21.804
where it doesn't do a destructive update.

82
00:05:21.804 --> 00:05:26.308
It just looks at the delta of the
difference and it updates that document.

83
00:05:26.308 --> 00:05:30.722
But the catch with updateDoc is
that the document must exist for

84
00:05:30.722 --> 00:05:33.980
it to be updated or
you're gonna get an error.

85
00:05:35.600 --> 00:05:38.399
So to get the best of both worlds here is

86
00:05:38.399 --> 00:05:43.385
there's actually a second option
within setDoc called merge, and

87
00:05:43.385 --> 00:05:48.760
it operates like an update, but
for a document that may not exist.

88
00:05:48.760 --> 00:05:52.800
So in this case,
I have a path of users/new_user_maybe.

89
00:05:52.800 --> 00:05:58.540
And I can write the name, and
maybe this user exists, maybe they don't.

90
00:05:58.540 --> 00:06:01.308
But what I wanna do is I'm gonna merge it,
so if they do exist,

91
00:06:01.308 --> 00:06:03.170
it's just gonna update the name.

92
00:06:03.170 --> 00:06:08.180
So it's gonna act like an update, but it
won't error if the document doesn't exist.

93
00:06:08.180 --> 00:06:12.589
I find that the vast majority of times,
this is what I'm using when

94
00:06:12.589 --> 00:06:17.184
I'm building my apps is merge true
kinda just tends to get you there.

95
00:06:17.184 --> 00:06:21.211
There are certain cases, though, where
each one you want that specific behavior,

96
00:06:21.211 --> 00:06:24.000
but this is sort of the nice
middle ground behavior, yes.

97
00:06:25.350 --> 00:06:29.303
&gt;&gt; If you have the path incorrect and it
keeps trying to get real time updates in

98
00:06:29.303 --> 00:06:33.240
the queue, is there any way to
stop listening to the updates?

99
00:06:33.240 --> 00:06:37.770
Or could this cause a slowdown if
the connection is open for too long?

100
00:06:37.770 --> 00:06:39.230
&gt;&gt; That's a great question.

101
00:06:39.230 --> 00:06:45.150
If there's nothing there,
you're not gonna get anything back.

102
00:06:45.150 --> 00:06:50.540
And you're only going to get updates
when something happens to that document.

103
00:06:50.540 --> 00:06:55.813
So in general, you should limit the amount
of things that you are subscribing

104
00:06:55.813 --> 00:07:00.130
to cuz that's just opening
yourself up to receiving updates.

105
00:07:00.130 --> 00:07:01.915
But if there's nothing there and
it doesn't exist,

106
00:07:01.915 --> 00:07:03.310
you're not going to be getting updates.

107
00:07:03.310 --> 00:07:08.038
So if it's null forever, you're just
never gonna get updates back from that.

108
00:07:08.038 --> 00:07:08.883
It's a good question.

109
00:07:10.994 --> 00:07:15.004
And then deleting documents also, create
a document out to what you want to delete,

110
00:07:15.004 --> 00:07:16.823
pass it in, and then it gets deleted.

111
00:07:19.334 --> 00:07:24.172
So one thing too that's very important to
understand is that when you're working

112
00:07:24.172 --> 00:07:28.254
with a real time system, how you
name your paths are very important.

113
00:07:28.254 --> 00:07:32.280
And not just for the collection name,
but specifically for document names.

114
00:07:32.280 --> 00:07:36.760
So collection of users make sense,
that's what I would name a table of users.

115
00:07:36.760 --> 00:07:43.490
But this path right here of some-name,
this operates a lot like my primary key.

116
00:07:43.490 --> 00:07:48.514
So how do I make sure that in
a real time system that I'm not

117
00:07:48.514 --> 00:07:53.239
overriding all these updates
on certain documents?

118
00:07:53.239 --> 00:07:57.910
Well, one of the things that we
provide is the way to generate IDs.

119
00:07:57.910 --> 00:08:00.640
And so we do that on a client base.

120
00:08:00.640 --> 00:08:03.371
And so in this case,
rather than writing out to and

121
00:08:03.371 --> 00:08:06.373
having to think up of a name for
every type of document.

122
00:08:06.373 --> 00:08:10.744
Or for even me having to think about
what the primary key, so to speak,

123
00:08:10.744 --> 00:08:13.871
of this collection or for
this document would be.

124
00:08:13.871 --> 00:08:16.018
What I'd rather do is instead of that,

125
00:08:16.018 --> 00:08:19.088
I can pass in users column to
this method called addDoc.

126
00:08:19.088 --> 00:08:22.090
And what that will do is it
will add this new user, but

127
00:08:22.090 --> 00:08:25.210
it will automatically generate a key for
them.

128
00:08:25.210 --> 00:08:29.570
And generated keys in real time systems
are great because if you are constantly

129
00:08:29.570 --> 00:08:33.548
trying to write to the same document,
you get lots of race conditions.

130
00:08:33.548 --> 00:08:35.878
Because one person tried
to write something here.

131
00:08:35.878 --> 00:08:38.740
Wait, another real time update came in,
write it there.

132
00:08:38.740 --> 00:08:39.955
There are ways to do this,

133
00:08:39.955 --> 00:08:43.951
which we're gonna see at the very end of
this section atomically with transactions.

134
00:08:43.951 --> 00:08:49.445
But for the most part, if you distribute
all of your documents to have generated

135
00:08:49.445 --> 00:08:54.290
IDs, you don't see as many flickering
updates and race conditions.

136
00:08:56.560 --> 00:09:01.190
And then, yes, a lot of times too when
people get started with Firebase,

137
00:09:01.190 --> 00:09:04.701
they think that generated ID
happens on the server, but

138
00:09:04.701 --> 00:09:07.260
it actually happens within the client.

139
00:09:07.260 --> 00:09:12.282
So just by creating a blank document
with a parent of a user collection,

140
00:09:12.282 --> 00:09:15.394
I call .id on it, and
it has a generated ID.

141
00:09:15.394 --> 00:09:16.890
And then from there, I could set it.

142
00:09:18.090 --> 00:09:23.665
But I get access to that ID,
I find that that ID is really great for

143
00:09:23.665 --> 00:09:26.572
syncing it with DOM element IDs.

144
00:09:26.572 --> 00:09:31.071
So that way you can find it and
update its data quite easily.

