WEBVTT

1
00:00:00.000 --> 00:00:03.640
All right, so at this point in our app,
we've done all these great things but

2
00:00:03.640 --> 00:00:06.440
nothing is secure, and
that's quite a long time to get to,

3
00:00:06.440 --> 00:00:08.012
we still having nothing secure.

4
00:00:08.012 --> 00:00:09.831
But it's okay,
cuz we're gonna fix that now.

5
00:00:09.831 --> 00:00:15.023
So with security rules, they determine
access to a Firebase resource

6
00:00:15.023 --> 00:00:19.953
like firestore, and it says,
hey, can this operation succeed?

7
00:00:19.953 --> 00:00:22.337
And what is really great
about security rules is,

8
00:00:22.337 --> 00:00:24.891
is you've ever written security code,
or check it,

9
00:00:24.891 --> 00:00:28.667
any type of server checking code, you
can find that it can happen everywhere.

10
00:00:28.667 --> 00:00:33.041
You can say if I'm running an MVC system,
when the post request comes in,

11
00:00:33.041 --> 00:00:35.908
I'm gonna check all this
information about them.

12
00:00:35.908 --> 00:00:37.825
And then when I send it
off to the database,

13
00:00:37.825 --> 00:00:40.025
I might check some more
information about them.

14
00:00:40.025 --> 00:00:43.244
And so there might be multiple
levels of security checks going on.

15
00:00:43.244 --> 00:00:47.534
And keeping those in the same state
can be difficult and can lead to bugs.

16
00:00:47.534 --> 00:00:52.027
With Firebase, there is one place
to write security logic, and

17
00:00:52.027 --> 00:00:53.785
that is Security Rules.

18
00:00:53.785 --> 00:00:56.957
So you only need to write your
security logic right there, and

19
00:00:56.957 --> 00:01:00.380
from there on out, you don't have
to worry about any other spots.

20
00:01:00.380 --> 00:01:03.431
You still have to do client side
validation, that is more of a UI,

21
00:01:03.431 --> 00:01:05.209
that is more of a user feedback thing.

22
00:01:05.209 --> 00:01:08.280
A client-side validation is not security.

23
00:01:08.280 --> 00:01:12.880
And a lot of times, yes, the code you're
gonna write in this security rules is

24
00:01:12.880 --> 00:01:17.848
very similar to client-side validation,
but they are still two separate topics.

25
00:01:17.848 --> 00:01:21.204
And so the thing about security rules is
that they are done in a custom language.

26
00:01:21.204 --> 00:01:21.873
Why is that?

27
00:01:21.873 --> 00:01:24.330
Why and we choose JavaScript or Dart?

28
00:01:24.330 --> 00:01:28.914
A lot of people like Dart, or Go, or
Rust, people like those quite a bit.

29
00:01:28.914 --> 00:01:33.730
Well, if you think about how security
rules work, they have to run each and

30
00:01:33.730 --> 00:01:38.547
every time a request goes into your
database, and that operation cannot be

31
00:01:38.547 --> 00:01:42.381
allowed or rejected until it
computes the results of that.

32
00:01:42.381 --> 00:01:46.734
So what we did was, we had a whole team
of people who wrote something to be as

33
00:01:46.734 --> 00:01:51.248
fast as possible executing, and
that involves creating our own language.

34
00:01:51.248 --> 00:01:54.478
So while it is a sort of
like a new DSL to learn,

35
00:01:54.478 --> 00:01:59.663
it is operate just lightning fast so
it doesn't lock up your database for

36
00:01:59.663 --> 00:02:04.350
all these crazy extended points of time,
they act very quickly.

37
00:02:04.350 --> 00:02:08.871
So the whole premise behind
security rules is, Matching.

38
00:02:08.871 --> 00:02:13.974
So if you've ever written router code
before with Express JS in this case,

39
00:02:13.974 --> 00:02:16.493
I can get the user of david_123.

40
00:02:16.493 --> 00:02:18.806
So if I make a get request to that,

41
00:02:18.806 --> 00:02:22.287
I can get that response
that matches at that path.

42
00:02:22.287 --> 00:02:24.013
Security rules works the same way.

43
00:02:24.013 --> 00:02:28.267
I say match @ /users of the document,
david_123.

44
00:02:28.267 --> 00:02:29.381
That matches right there.

45
00:02:29.381 --> 00:02:34.061
And now from here, I can do some sort
of action based upon allowing a read or

46
00:02:34.061 --> 00:02:35.735
a write at this location.

47
00:02:35.735 --> 00:02:39.717
And what's important to understand is
that, all matches that occur happen at

48
00:02:39.717 --> 00:02:42.931
the document level,
we don't match at the collection level.

49
00:02:42.931 --> 00:02:44.834
And you might think, well,

50
00:02:44.834 --> 00:02:49.366
how can I secure a whole collection
if I have to match out a document?

51
00:02:49.366 --> 00:02:52.023
And you can do that through
the use of Wildcards.

52
00:02:52.023 --> 00:02:56.654
So just like routers that you've used
before, you've probably used :id or

53
00:02:56.654 --> 00:02:59.871
whatever they use,
sometimes referred to as a slug.

54
00:02:59.871 --> 00:03:04.170
And from there, I can get whatever
variable would be held in that id.

55
00:03:04.170 --> 00:03:10.551
So in the case of /users:id, it could be
/users david_123 or something like that.

56
00:03:10.551 --> 00:03:15.080
And then I can use that id to go off
into the back end and get their value.

57
00:03:15.080 --> 00:03:17.456
I can do the same thing in security rules.

58
00:03:17.456 --> 00:03:20.649
I can say, hey, match users at this uid.

59
00:03:20.649 --> 00:03:25.129
And then from there, I can even use
that uid value to check some important

60
00:03:25.129 --> 00:03:29.039
information to see whether that
operation should be allowed.

61
00:03:29.039 --> 00:03:31.310
So, that is a lot of getting into that.

62
00:03:31.310 --> 00:03:37.184
So I am going to just start writing
some rules, cuz I think rules are great.

63
00:03:37.184 --> 00:03:38.779
Look at that, I've rules right up here.

64
00:03:38.779 --> 00:03:42.214
I'm gonna do, actually no,
I don't want it in this database though,

65
00:03:42.214 --> 00:03:45.157
I want it in this one,
cuz the other one has a ton of data in it.

66
00:03:45.157 --> 00:03:47.064
All right, great, let's go to rules.

67
00:03:50.877 --> 00:03:54.197
Someway for me it is very zoomed in,
all right, so

68
00:03:54.197 --> 00:03:58.320
the way rules work is that,
we always specify rules version.

69
00:03:58.320 --> 00:03:59.872
This is on rules version 2.

70
00:03:59.872 --> 00:04:02.901
There's rule version 1 as well,
and then there's only 1 and 2.

71
00:04:02.901 --> 00:04:04.160
They have different rules.

72
00:04:04.160 --> 00:04:06.729
So you always specify that
you wanna be on what version.

73
00:04:06.729 --> 00:04:09.845
I recommend being on 2 because it's
sort of like our latest and greatest,

74
00:04:09.845 --> 00:04:11.190
it doesn't change very often.

75
00:04:11.190 --> 00:04:14.395
Often it's happened twice in five,
six years.

76
00:04:14.395 --> 00:04:17.308
And then we specify what
service this needs to be on.

77
00:04:17.308 --> 00:04:19.225
So we're saying, Service Cloud FireStore,

78
00:04:19.225 --> 00:04:21.201
because we can also have
other services there.

79
00:04:21.201 --> 00:04:25.556
We have Firebase Storage which
uses the same types of rules, so

80
00:04:25.556 --> 00:04:29.347
there's different services
in which we can match on.

81
00:04:29.347 --> 00:04:34.306
Then we always have this,
this is basically a wildcard that matches

82
00:04:34.306 --> 00:04:38.230
all of the documents that
live within your database.

83
00:04:38.230 --> 00:04:39.466
And then from here,

84
00:04:39.466 --> 00:04:43.700
we can start matching at paths that
we care about in our application.

85
00:04:43.700 --> 00:04:49.916
So this right here, this =**, this is
referred to as the recursive wildcard.

86
00:04:49.916 --> 00:04:55.585
I could change this to anything I
wanted to, it's just a variable.

87
00:04:55.585 --> 00:04:59.848
But what this recursive wildcard does and
you will probably not write this too much,

88
00:04:59.848 --> 00:05:02.742
but it's important to kind of
just get familiar with it.

89
00:05:02.742 --> 00:05:10.815
Is it says, I'm going to apply these
rules to every single path below me.

90
00:05:10.815 --> 00:05:13.710
And in this case,
this is every spot in the database.

91
00:05:13.710 --> 00:05:19.770
So this is saying, every single spot
in the database will allow a read or

92
00:05:19.770 --> 00:05:25.429
write if the time that the request
came in is less than June 18th.

93
00:05:25.429 --> 00:05:28.353
I don't wanna do that because
that's super permissive.

94
00:05:28.353 --> 00:05:35.537
So let's start by saying,
okay, let's match for users.

95
00:05:35.537 --> 00:05:40.486
So let's match for user id,
and let's say I want to say

96
00:05:40.486 --> 00:05:45.228
only users can read and
write to their own profiles.

97
00:05:45.228 --> 00:05:47.950
I don't want anybody coming out and
reading their profiles or

98
00:05:47.950 --> 00:05:49.475
being able to edit their profile.

99
00:05:49.475 --> 00:05:52.520
Well, the heart of security rules is,
allow.

100
00:05:52.520 --> 00:05:57.478
Allow is a statement that says,
I'm going to allow some sort

101
00:05:57.478 --> 00:06:01.869
of permission if some
expression evaluates to true.

102
00:06:01.869 --> 00:06:05.794
And that is all security rules are,
matched at a path and state,

103
00:06:05.794 --> 00:06:09.372
what permission can be allowed
based on some expression?

104
00:06:09.372 --> 00:06:13.601
So a permission tends to
be a crud style operation.

105
00:06:13.601 --> 00:06:18.522
We have read, we have write,
and we even have more granular.

106
00:06:18.522 --> 00:06:22.172
For read you can say, get,
only allowing get on this document, but

107
00:06:22.172 --> 00:06:25.203
you can also say allow listing
on the collection level.

108
00:06:25.203 --> 00:06:28.890
So I'm not gonna allow people to just
be able to list whatever they want out

109
00:06:28.890 --> 00:06:29.968
of this collection.

110
00:06:29.968 --> 00:06:34.412
It tends to be less common but
it's still very powerful to use for

111
00:06:34.412 --> 00:06:35.985
restricting access.

112
00:06:35.985 --> 00:06:40.879
And then for writing, you can also say,
I'm gonna allow create which is very

113
00:06:40.879 --> 00:06:45.924
helpful for first time creation of
documents, and then you can say, I'm gonna

114
00:06:45.924 --> 00:06:50.919
allow only updates or I'm only gonna
allow deletes if certain things happen.

115
00:06:50.919 --> 00:06:53.766
And these things
are lumped into writes and

116
00:06:53.766 --> 00:06:57.490
just like the get in the list
that's lumped into reads.

117
00:06:57.490 --> 00:07:01.772
So I can say, allow read or
write if something happens.

118
00:07:01.772 --> 00:07:04.920
So, what do I care about happening?

119
00:07:04.920 --> 00:07:09.722
Well, I know who the user is because
I've captured their variable of who

120
00:07:09.722 --> 00:07:11.151
they are in this uid.

121
00:07:11.151 --> 00:07:15.994
But in order to restrict, I need to
know who is the authenticated user,

122
00:07:15.994 --> 00:07:19.969
because anyone could try to
access that / user / 123.

123
00:07:19.969 --> 00:07:23.105
But only want user 123 to
be able to read their data.

124
00:07:23.105 --> 00:07:26.149
So to get the currently
authenticated user,

125
00:07:26.149 --> 00:07:31.128
I can have access to special variables
that exist within security roles.

126
00:07:31.128 --> 00:07:33.229
And there are a ton of these things.

127
00:07:33.229 --> 00:07:37.760
The most important one that you're
probably gonna use is the request object.

128
00:07:37.760 --> 00:07:40.071
And the request has all
different sorts of things.

129
00:07:40.071 --> 00:07:44.877
I can say, hey, get me the request
that authenticated user and

130
00:07:44.877 --> 00:07:46.788
then I can get their uid.

131
00:07:46.788 --> 00:07:51.014
I can even tap into their token and
potentially see what their email is,

132
00:07:51.014 --> 00:07:55.031
is their email verified,
potentially do they have a phone number,

133
00:07:55.031 --> 00:07:59.068
all these types of things and
I can even write rules based upon that.

134
00:07:59.068 --> 00:08:04.828
But I'm going to say,
if request that uid is == uid.

135
00:08:04.828 --> 00:08:09.635
And so now if anyone who's
not that authenticated user,

136
00:08:09.635 --> 00:08:13.352
they can't read or write to their profile.

137
00:08:13.352 --> 00:08:17.930
That's great, but how do I know
to feel comfortable about this?

138
00:08:17.930 --> 00:08:22.988
I just wrote something in a new language I
haven't seen before, using some variables

139
00:08:22.988 --> 00:08:27.639
I've never seen before, I like some sort
of assurance that my data is secure.

140
00:08:27.639 --> 00:08:31.479
For I can use this rules playground and
this says,

141
00:08:31.479 --> 00:08:36.691
I haven't even published my changes,
but it will run some tests and

142
00:08:36.691 --> 00:08:40.270
show me whether the read or
write was allowed.

143
00:08:40.270 --> 00:08:45.176
So in this case let's say,
I want to get users david_ 123,

144
00:08:45.176 --> 00:08:47.499
and I'm not authenticated.

145
00:08:47.499 --> 00:08:48.750
So I'm not gonna check this.

146
00:08:48.750 --> 00:08:53.346
And I click run, it says, no, it can't.

147
00:08:53.346 --> 00:08:56.373
And it shows me right on the line,
it says, no value error.

148
00:08:56.373 --> 00:08:59.357
And that's because
the user does not exist.

149
00:08:59.357 --> 00:09:05.413
You can do some no coalescing and say,
hey, is off not equal null as well,

150
00:09:05.413 --> 00:09:09.432
if you don't like that it
has a null value error.

151
00:09:09.432 --> 00:09:13.058
But also what's really great
about the rules playground is,

152
00:09:13.058 --> 00:09:17.170
as we hover over these things,
it tells us a lot more information, and

153
00:09:17.170 --> 00:09:21.441
we can see that off was null, so
that was through a null error for the uid.

154
00:09:21.441 --> 00:09:25.315
And we can even see the uid was david_123.

155
00:09:25.315 --> 00:09:28.344
So it is a really nice way to be very
interactive with what's going on with

156
00:09:28.344 --> 00:09:28.897
your rules.

157
00:09:28.897 --> 00:09:34.552
So now lets authenticate, I'm going
to give myself a uid of oavid_123,

158
00:09:34.552 --> 00:09:37.256
and I think that's all I need, yep.

159
00:09:37.256 --> 00:09:42.417
And then so now dismiss and
then when I run, hey, look at that.

160
00:09:42.417 --> 00:09:44.687
It allowed it, and
it showed right on the line.

161
00:09:44.687 --> 00:09:49.213
And again, I can check to see,
okay, my uid was david_123, and

162
00:09:49.213 --> 00:09:52.914
I can even see the result of
this operation right here.

163
00:09:52.914 --> 00:09:54.343
Yeah, that evaluates out to true.

164
00:09:54.343 --> 00:09:57.497
I guess that makes sense
because that's david_123.

165
00:09:57.497 --> 00:10:04.385
So this right here is the most
common security rule you'll see.

166
00:10:04.385 --> 00:10:07.853
And so much so, that what I like
to do with security rules is,

167
00:10:07.853 --> 00:10:09.695
I like to write it as a function.

168
00:10:09.695 --> 00:10:12.698
Cuz security rules you're gonna be
doing things over and over again.

169
00:10:12.698 --> 00:10:17.571
You can imagine that you're
gonna want to check this, so

170
00:10:17.571 --> 00:10:25.026
you can write a function called,
IsUserOwned, and you can just rereturn.

171
00:10:25.026 --> 00:10:29.798
From within here,
you can say return if request.auth.uid.

172
00:10:29.798 --> 00:10:34.492
You can return from within here,
and then you can say,

173
00:10:34.492 --> 00:10:37.770
is user owned and then pass the new id.

174
00:10:37.770 --> 00:10:41.731
I needed to know I needed to pass
the uid into here because, yeah,

175
00:10:41.731 --> 00:10:44.552
you need to know the scoping
of that variable.

176
00:10:44.552 --> 00:10:46.887
And so now, this is great.

177
00:10:46.887 --> 00:10:51.748
And then anywhere else along the path so

178
00:10:51.748 --> 00:10:58.081
if I wanna do the same thing
with expenses I can say,

179
00:10:58.081 --> 00:11:02.059
match expenses of expenseid and

180
00:11:02.059 --> 00:11:07.674
I can say allow write,
read if is user owned.

181
00:11:07.674 --> 00:11:10.786
And the interesting thing
here is I'm passing in uid.

182
00:11:10.786 --> 00:11:13.106
Well, what's the uid for an expense?

183
00:11:13.106 --> 00:11:17.870
We don't have the uid at the pack level,
how do we access that?

184
00:11:17.870 --> 00:11:24.044
Well, we can also access the resource
that lives at that path.

185
00:11:24.044 --> 00:11:27.450
So in this case I can say, hey,

186
00:11:27.450 --> 00:11:32.824
allow let's just simplify this to read for
now,

187
00:11:32.824 --> 00:11:39.116
allow read if the resource
that exists at that location,

188
00:11:39.116 --> 00:11:44.123
if it's data property
of .uid is that user.

189
00:11:44.123 --> 00:11:50.243
Then it will say, is the current
authenticated user equal to that user?

190
00:11:50.243 --> 00:11:57.019
And so the same thing here, if I say,
I would need to know data that exists.

191
00:11:57.019 --> 00:12:01.417
So I can come out here,
let's go find a document of expenses.

192
00:12:01.417 --> 00:12:06.488
So let's just grab the first one,
has a uid of here,

193
00:12:06.488 --> 00:12:12.958
and so I'm gonna wanna get that,
right, where is my, here it is.

194
00:12:12.958 --> 00:12:17.089
I'm gonna say, let's get expenses of,

195
00:12:17.089 --> 00:12:21.928
where is the uid, it's in david_123,

196
00:12:21.928 --> 00:12:28.317
I'm gonna paste in this uid right here,
so I copied from there.

197
00:12:28.317 --> 00:12:32.748
And then I'm also going
to copy the document id

198
00:12:37.050 --> 00:12:41.656
So now if I try to get this
document id and I run against that,

199
00:12:41.656 --> 00:12:46.448
hey, we can see that it allowed
it because the resource is that

200
00:12:46.448 --> 00:12:51.175
whole document right here and
it has the uid right down here.

201
00:12:51.175 --> 00:12:55.588
So that is a really powerful thing
about security rules is that,

202
00:12:55.588 --> 00:13:00.165
you can access data at that resource and
tap into its properties and

203
00:13:00.165 --> 00:13:02.719
do all these powerful expressions.

204
00:13:02.719 --> 00:13:07.315
I would say 50% of the time, this is
a lot of the rules you're gonna write,

205
00:13:07.315 --> 00:13:12.231
cuz you wanna make sure that that those
rules are secure for those specific users.

206
00:13:12.231 --> 00:13:16.301
And at this point this would actually be
a fairly secure app if I went off and

207
00:13:16.301 --> 00:13:17.231
I published it.

208
00:13:17.231 --> 00:13:22.461
But what we'll get into is that,
modifying all of these rules in one little

209
00:13:22.461 --> 00:13:27.789
text editor and a console seems kind
of bad for collaborative development.

210
00:13:27.789 --> 00:13:30.236
So suppose we're going on
a team where we would say,

211
00:13:30.236 --> 00:13:33.689
I'm the only person that can edit
the file, or I'm the only person who can

212
00:13:33.689 --> 00:13:36.828
edit the file on Tuesdays cuz I
don't want any problems to happen.

213
00:13:36.828 --> 00:13:40.920
So we have a whole development process
where you can write your rules locally,

214
00:13:40.920 --> 00:13:42.842
test them against the emulator, and

215
00:13:42.842 --> 00:13:46.562
you can even write unit tests which
are more like integration tests that

216
00:13:46.562 --> 00:13:50.288
make sure that any changes that you
have made to your rules do not break.

217
00:13:50.288 --> 00:13:54.258
And then from there, you can even deploy
your rules with the Firebase CLI and

218
00:13:54.258 --> 00:13:57.565
keep your rules stored in source
control where they should be.

219
00:13:57.565 --> 00:14:01.760
So this is a nice way to test but this is
not the recommended way for production

