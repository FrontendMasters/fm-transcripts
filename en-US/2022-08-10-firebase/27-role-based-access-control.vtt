WEBVTT

1
00:00:00.038 --> 00:00:03.547
Role Based Access Control
allows you to say, okay,

2
00:00:03.547 --> 00:00:06.736
only allow this action if
this user is an admin or

3
00:00:06.736 --> 00:00:10.992
if they're a collaborator, or
if they're this type of user.

4
00:00:10.992 --> 00:00:16.280
And within Firestore you can actually
look up data within security rules and

5
00:00:16.280 --> 00:00:18.932
then make a decision based upon that.

6
00:00:18.932 --> 00:00:24.180
So, let's say that there was a new feature
that was added to the expenses and

7
00:00:24.180 --> 00:00:29.674
they said hey, every expense has a budget
ID, which means that it is associated

8
00:00:29.674 --> 00:00:34.605
with a specific budget and
multiple users can collaborate on budgets.

9
00:00:34.605 --> 00:00:39.204
In that case, what we can do
is I have to always copy and

10
00:00:39.204 --> 00:00:44.948
paste this cuz this is such a long string,
is we can go and get data.

11
00:00:44.948 --> 00:00:51.740
And so let's say we wanted to
only allow matching on budgets,

12
00:00:51.740 --> 00:00:59.328
budget ID, so you can only modify
a budget if you are a collaborator.

13
00:00:59.328 --> 00:01:05.377
So allow read if is collaborator.

14
00:01:08.211 --> 00:01:13.091
Well, one of the things you can do is you
can write a function called isCollaborator

15
00:01:13.091 --> 00:01:16.312
and then we're gonna paste
in this really big string.

16
00:01:16.312 --> 00:01:21.308
So this is a get method that says get
data at this path in the database.

17
00:01:21.308 --> 00:01:26.191
Firestore requires you to have a fully
qualified path in order to get it.

18
00:01:26.191 --> 00:01:31.400
So that includes what is referred
to as a path type in Firestore.

19
00:01:31.400 --> 00:01:36.073
And then, getting the request that
resource.aut.uid using the syntax like

20
00:01:36.073 --> 00:01:40.268
an interpolate that user, and
let's say it was referring to admins.

21
00:01:40.268 --> 00:01:45.070
An admins document that listed out
all the users who were admins,

22
00:01:45.070 --> 00:01:47.523
I could say is this user in admin?

23
00:01:47.523 --> 00:01:53.823
And so
I can say if this user.role = admin,

24
00:01:53.823 --> 00:01:58.931
then I know that they're an admin or

25
00:01:58.931 --> 00:02:04.039
if their role is, I can actually say

26
00:02:04.039 --> 00:02:08.658
role in admin or collaborator.

27
00:02:08.658 --> 00:02:13.300
And this allows me to know whether
that person has a specific role.

28
00:02:13.300 --> 00:02:19.214
And so without having to do any more
logic within your app yourself,

29
00:02:19.214 --> 00:02:25.561
you can actually enforce it entire
base of roles within security roles.

30
00:02:25.561 --> 00:02:28.892
So you look up that user do they have the
role because the security roles they're

31
00:02:28.892 --> 00:02:30.394
allowed to look up data at any path.

32
00:02:30.394 --> 00:02:34.875
And says yes, this admin exists,
yes, they have the role of admin,

33
00:02:34.875 --> 00:02:36.671
I will allow this to occur.

34
00:02:36.671 --> 00:02:41.664
And you can even using hierarchy
say within the budgets of this

35
00:02:41.664 --> 00:02:45.130
budget ID it has specific collaborators.

36
00:02:45.130 --> 00:02:49.741
So you can even scope each one's
role down to a specific budget.

37
00:02:49.741 --> 00:02:55.422
So their role in one budget might
have a different role in another.

38
00:02:55.422 --> 00:02:59.110
And so you'll see that a lot
in project based stuff.

39
00:02:59.110 --> 00:03:03.800
So we're not going to get into these
because it's more of an advanced use case,

40
00:03:03.800 --> 00:03:08.210
the code does exist in the final use case,
as you can see how it's written,

41
00:03:08.210 --> 00:03:10.953
cuz I really wanna dive
into Cloud functions.

