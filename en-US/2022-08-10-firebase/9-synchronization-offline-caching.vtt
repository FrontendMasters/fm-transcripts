WEBVTT

1
00:00:00.470 --> 00:00:04.726
Another thing about serverless systems,
real time systems,

2
00:00:04.726 --> 00:00:08.760
is that you should never
really trust local dates.

3
00:00:08.760 --> 00:00:12.206
So, let's say this is an app
that tracks marathon results.

4
00:00:12.206 --> 00:00:17.729
And let's say we created this very
sophisticated system which when I cross

5
00:00:17.729 --> 00:00:23.438
the start time it marks my start, when I
cross the finish line it marks my end.

6
00:00:23.438 --> 00:00:27.994
And let's say that we had a code that
kind of ran like this says, let's update

7
00:00:27.994 --> 00:00:32.754
the David doc, we have his name and let's
write the time that they finished at, and

8
00:00:32.754 --> 00:00:36.993
then I could calculate the time based
upon the start at and end at, right?

9
00:00:36.993 --> 00:00:41.012
Well, what if I set my phone to
start before the race started?

10
00:00:41.012 --> 00:00:45.123
Or maybe what it I set it to, like
just break the world record, and so my

11
00:00:45.123 --> 00:00:49.934
phone could have a different date and time
on it than what my server expects, and so

12
00:00:49.934 --> 00:00:54.705
you can never really trust a local date
because a user's clock can be different.

13
00:00:54.705 --> 00:00:59.425
A user can even to intercept and
try to write malicious dates to you.

14
00:00:59.425 --> 00:01:00.460
So what do we do?

15
00:01:02.220 --> 00:01:04.976
Firestore has a concept
of server timestamps, and

16
00:01:04.976 --> 00:01:07.960
you just import that from
the Firebase library.

17
00:01:07.960 --> 00:01:12.907
And what this does is, this acts as
a placeholder, and it says when I get

18
00:01:12.907 --> 00:01:17.570
up to the server, insert what
the server time is in this spot.

19
00:01:17.570 --> 00:01:21.928
So, we can always be confident
that what dates you see,

20
00:01:21.928 --> 00:01:26.954
what server timestamps are bona fide,
real not spoofed dates.

21
00:01:26.954 --> 00:01:29.682
So, in this case,
when the user crosses the finish line,

22
00:01:29.682 --> 00:01:31.920
I know that that was
the real time that they did.

23
00:01:35.781 --> 00:01:40.164
And another thing with real-time
systems are incrementing values, and

24
00:01:40.164 --> 00:01:44.406
something like just adding plus one
like another, like another view or

25
00:01:44.406 --> 00:01:48.803
something like that is surprisingly
more complicated than you realize.

26
00:01:48.803 --> 00:01:52.345
Because the first thing you need to do
is you have to know what's the state of

27
00:01:52.345 --> 00:01:53.450
the data, okay?

28
00:01:53.450 --> 00:01:54.387
How many likes are there?

29
00:01:54.387 --> 00:01:55.248
Are there seven right now?

30
00:01:55.248 --> 00:01:56.430
Okay, great.

31
00:01:56.430 --> 00:02:00.690
Now, I wanna add to eight likes,
all right, now I want to write to that.

32
00:02:00.690 --> 00:02:03.370
But while I'm doing that,
what if 10 other people liked it?

33
00:02:03.370 --> 00:02:07.010
And so I went from seven to eight but
someone else went from eight or

34
00:02:07.010 --> 00:02:11.950
someone went to nine, and then I
overwrite, and then it goes back to eight.

35
00:02:11.950 --> 00:02:17.550
So, incrementing is very difficult because
so much can happen in a real time system.

36
00:02:17.550 --> 00:02:21.720
So, how do we know that we
can do those writes in order?

37
00:02:21.720 --> 00:02:27.190
Yeah, so how do we know that something
didn't happen during that process?

38
00:02:27.190 --> 00:02:30.498
Well, Firestore provides an increment
function that handles a lot of

39
00:02:30.498 --> 00:02:31.930
the complexity for you.

40
00:02:31.930 --> 00:02:36.860
We'll see at the very end at how you
do these atomic transactions in depth.

41
00:02:36.860 --> 00:02:41.665
But this is a nice convenience method
where you can import decrement or

42
00:02:41.665 --> 00:02:47.040
increment, and you add a number, and
it will actually handle that process for

43
00:02:47.040 --> 00:02:52.254
you, well, actually queue up the proper
ordering rather than running into

44
00:02:52.254 --> 00:02:58.466
any race conditions, But
it's important to that,

45
00:02:58.466 --> 00:03:02.838
especially for increments and
decrements and things like that and

46
00:03:02.838 --> 00:03:07.599
for all Firestore documents, is that
Firestore does have a limit of only

47
00:03:07.599 --> 00:03:12.384
being able to reliably handle one
write per second to a single document.

48
00:03:12.384 --> 00:03:16.339
So, if you have all of these
writes going to a single document,

49
00:03:16.339 --> 00:03:20.220
It will do its best but
at one point it might fail and say, hey,

50
00:03:20.220 --> 00:03:22.705
these needs to happen at a slower pace.

51
00:03:22.705 --> 00:03:25.795
This tends to not be
a problem in many systems and

52
00:03:25.795 --> 00:03:30.664
this also tends to be something why we
use generated IDs, and we distribute

53
00:03:30.664 --> 00:03:35.711
out those updates through a whole list
rather than on one specific document.

54
00:03:35.711 --> 00:03:40.410
But this is something to know if you're
building a very highly real-time system.

55
00:03:41.440 --> 00:03:42.560
Yes.

56
00:03:42.560 --> 00:03:47.060
&gt;&gt; Is there a limit to the number of
paths that we can listen to for updates?

57
00:03:47.060 --> 00:03:49.779
Does Firebase handle that for us, or

58
00:03:49.779 --> 00:03:55.800
is that something that we need to
optimize and manage multiple listeners?

59
00:03:55.800 --> 00:04:00.436
&gt;&gt; You know, I don't think I've been asked
that question in many years or if ever,

60
00:04:00.436 --> 00:04:03.859
that the number of listeners
on paths in your application.

61
00:04:03.859 --> 00:04:05.764
I will need to check that.

62
00:04:05.764 --> 00:04:11.055
I do not believe you are limited to the
number of paths that you can listen to.

63
00:04:11.055 --> 00:04:15.555
You are limited to how far down you
can nest within collection documents

64
00:04:15.555 --> 00:04:19.980
collection, or what can fit into
a document, like a document can only

65
00:04:19.980 --> 00:04:24.855
be up to one megabyte in size, and also
you can put nested objects into those,

66
00:04:24.855 --> 00:04:29.671
and I think that goes to some really
long number that most people don't use.

67
00:04:29.671 --> 00:04:34.632
So you do have limitations on pathing and
storage, but I do not believe you have

68
00:04:34.632 --> 00:04:39.517
any limitations on what you can listen
to and any limitations that we would put

69
00:04:39.517 --> 00:04:44.404
on it as well, you would probably run
into slowdown in the browser beforehand

70
00:04:44.404 --> 00:04:49.483
because the browser would just be doing so
much or just processing so much data.

71
00:04:49.483 --> 00:04:51.062
That's a very good question.

72
00:04:54.267 --> 00:04:57.507
And again, back to it again,
in CRUD systems or

73
00:04:57.507 --> 00:05:02.530
in request response systems, we tend
to say let me fetch data, or I mean,

74
00:05:02.530 --> 00:05:08.060
post data in this case where you create a
new user, and now I have this new user ID.

75
00:05:08.060 --> 00:05:12.939
In Firestore systems, we do not await for
these responses, we just make them, and

76
00:05:12.939 --> 00:05:15.600
we let the cache behind
the system handle it.

77
00:05:17.530 --> 00:05:22.474
So, right here updateDoc and then wait for
the response, updateDoc wait for

78
00:05:22.474 --> 00:05:23.475
the response.

79
00:05:23.475 --> 00:05:28.919
And this keeps all of our UI snappy, we're
not waiting on anything because what's

80
00:05:28.919 --> 00:05:34.597
actually happening behind the scenes here
is that when I call updateDoc with David!,

81
00:05:34.597 --> 00:05:40.490
this callback right here on the second
time, it does not go through the server.

82
00:05:40.490 --> 00:05:44.778
It actually fires off locally before
the server confirms that this write was

83
00:05:44.778 --> 00:05:45.930
allowed.

84
00:05:45.930 --> 00:05:50.533
And this, we call this latency
compensation, there's other fancy terms

85
00:05:50.533 --> 00:05:55.139
for this called optimistic concurrency
control where we basically assume

86
00:05:55.139 --> 00:05:59.836
that it's going to be good and if it's
not good then we can roll back from it.

87
00:05:59.836 --> 00:06:03.684
And so in security rules in
Firestore when you go offline, and

88
00:06:03.684 --> 00:06:08.642
you start making lots of updates, well I
can't verify that any of those updates

89
00:06:08.642 --> 00:06:12.434
work against the server because
I don't have a connection.

90
00:06:12.434 --> 00:06:16.616
So it's going to fire off locally and
the app will continue to work, but

91
00:06:16.616 --> 00:06:19.265
then as soon as the app
regains connections,

92
00:06:19.265 --> 00:06:23.099
all of those pending rights that
are pending to the server go off,

93
00:06:23.099 --> 00:06:27.214
the server sees which ones were allowed,
which ones were denied, and

94
00:06:27.214 --> 00:06:31.960
it will actually write back to the client
and reconcile the state for you.

95
00:06:31.960 --> 00:06:36.031
So, what you might see in an app is if
you had ten rights, and let's say two of

96
00:06:36.031 --> 00:06:40.037
them had bad types, or for some reason
they were rejected, Firestore will

97
00:06:40.037 --> 00:06:44.196
just pluck those two out of the cache and
then your list of ten will go to eight.

98
00:06:44.196 --> 00:06:48.296
So, all those things are handled behind
the scenes and those are cases where in

99
00:06:48.296 --> 00:06:51.776
traditional systems, or
CRUD systems you would be listening, or

100
00:06:51.776 --> 00:06:55.814
you'd be checking to see the results from
the server if there was a problem and

101
00:06:55.814 --> 00:06:59.390
then redoing the state yourself,
you don't do that in Firestore.

102
00:06:59.390 --> 00:07:01.840
It just automatically does the state for
you, and

103
00:07:01.840 --> 00:07:05.473
that's just another example of why you
tend to not listen to the results.

104
00:07:07.832 --> 00:07:10.181
&gt;&gt; Is there a way we got
the synchronization going on,

105
00:07:10.181 --> 00:07:12.367
it kinda happens seamlessly,
we don't know,

106
00:07:12.367 --> 00:07:15.722
the user doesn't know [INAUDIBLE]
it's invisible and that's awesome.

107
00:07:15.722 --> 00:07:19.483
Is there a way to indicate because you
haven't gotten updates in a while to say,

108
00:07:19.483 --> 00:07:23.132
hey, you, you haven't talked to
Firestore in fact, you're kinda offline

109
00:07:23.132 --> 00:07:26.695
that maybe isn't the internet connection
but as a Firestore connection?

110
00:07:26.695 --> 00:07:33.695
&gt;&gt; Yes, absolutely, we are getting
right to that, so we will get here.

111
00:07:33.695 --> 00:07:35.695
Yeah, give me like two slides.

112
00:07:35.695 --> 00:07:37.455
Yeah, that's a great question.

113
00:07:37.455 --> 00:07:42.289
And so yes, we can await from mutation
functions, or I can await for this, but

114
00:07:42.289 --> 00:07:46.335
when I'm offline, this part right here,
it will hang offline.

115
00:07:46.335 --> 00:07:51.561
And so I want my app to continue to
working offline, but it won't if I await.

116
00:07:51.561 --> 00:07:54.674
And that is because I'm opting into
the behavior of saying wait for

117
00:07:54.674 --> 00:07:57.853
the result from the server before
I can continue on this operation.

118
00:08:00.668 --> 00:08:02.905
So if you've ever used like
a Redux system before,

119
00:08:02.905 --> 00:08:06.810
this is like a good way of thinking about
it, with Redux, you dispatch an update.

120
00:08:06.810 --> 00:08:11.263
At no point in Redux do you say let me
add something and then get it back,

121
00:08:11.263 --> 00:08:14.357
you say I want to dispatch
that a user was added and

122
00:08:14.357 --> 00:08:19.292
then that goes through a reducer and
then that gets called through the store.

123
00:08:19.292 --> 00:08:23.986
And so it's this constant flow where
you're never directly manipulating state,

124
00:08:23.986 --> 00:08:27.809
you're always dispatching new
different types of state updates,

125
00:08:27.809 --> 00:08:32.235
and Firebase works the same exact way,
you dispatch updates to Firebase, and

126
00:08:32.235 --> 00:08:34.736
it synchronizes them back across clients.

127
00:08:38.083 --> 00:08:42.474
And what's really powerful here, too, is
that we also have document change types.

128
00:08:42.474 --> 00:08:46.604
So within Snapshots, I told you
there's lots of really useful methods.

129
00:08:46.604 --> 00:08:51.074
There's the doc changes array,
which will tell me you from what I've

130
00:08:51.074 --> 00:08:54.344
started listening what
kind of changes occurred?

131
00:08:54.344 --> 00:08:58.667
There's three types of changes,
I can see documents that were added,

132
00:08:58.667 --> 00:09:00.044
modified or removed.

133
00:09:00.044 --> 00:09:03.441
And whereas when I showed you
the Firestore console, and

134
00:09:03.441 --> 00:09:06.058
we saw it lighting up
like a Christmas tree,

135
00:09:06.058 --> 00:09:10.940
it actually uses this underneath the hood
to say, hey, when something is added,

136
00:09:10.940 --> 00:09:15.679
let me enter it in as green when something
is modified, let me flash it orange and

137
00:09:15.679 --> 00:09:20.930
when it's removed, let me then highlight
it as red and delete it from the DOM.

138
00:09:20.930 --> 00:09:25.462
So, this is really powerful because
it allows us to know what kind of

139
00:09:25.462 --> 00:09:26.740
events happened.

140
00:09:26.740 --> 00:09:32.569
So for any very stateful style apps, you
can indicate what changes are going on.

141
00:09:32.569 --> 00:09:37.509
And this looks like actually a really
complicated bit of code if you don't

142
00:09:37.509 --> 00:09:42.687
like the reduce method, but it's
actually pretty simple what's going on,

143
00:09:42.687 --> 00:09:47.307
is that we're passing on this blank
object of added, modified, and

144
00:09:47.307 --> 00:09:50.752
removed arrays, and so
it's an object of arrays.

145
00:09:50.752 --> 00:09:55.692
And then as we reduce over doc changes, we
can say hey let, me go into the object of

146
00:09:55.692 --> 00:10:00.657
either added, so current.type, is it
added, is it modified, is it removed?

147
00:10:00.657 --> 00:10:03.780
And then let me add that snapshot into it.

148
00:10:03.780 --> 00:10:08.436
And so now, I'll have a whole object of
what has been added, removed or deleted.

149
00:10:08.436 --> 00:10:11.863
And then from there, I can do lots of
really cool stateful things within my app.

150
00:10:15.210 --> 00:10:19.068
So now,
getting into all the questions of offline.

151
00:10:19.068 --> 00:10:22.168
So, when we do offline with Firestore,

152
00:10:22.168 --> 00:10:27.650
we need to opt into that behavior before
we see any of the benefits of it.

153
00:10:27.650 --> 00:10:32.946
And we can do that by importing,
there's actually two offline behaviors,

154
00:10:32.946 --> 00:10:37.430
there's multi tab persistence and
just regular persistence.

155
00:10:37.430 --> 00:10:42.861
When Firestore at first launched, it only
launched with regular persistence and

156
00:10:42.861 --> 00:10:45.850
if you opened up another
tab of that same app,

157
00:10:45.850 --> 00:10:50.807
it would not be able to sync those
changes because syncing real time updates

158
00:10:50.807 --> 00:10:54.134
offline across multiple
tabs is very difficult.

159
00:10:54.134 --> 00:10:59.479
If you actually go to many popular apps,
I'm not sure about Google Docs anymore.

160
00:10:59.479 --> 00:11:04.141
I know for a while if you opened up Google
Docs in two tabs, it would say like, hey,

161
00:11:04.141 --> 00:11:08.347
we can't sync offline changes across
two tabs, we'll only work in one.

162
00:11:08.347 --> 00:11:11.038
It was a pretty difficult
problem to solve, and

163
00:11:11.038 --> 00:11:14.818
eventually we got around to doing
it in a very predictable manner.

164
00:11:14.818 --> 00:11:19.593
And so now we have enabled multi
tab IndexedDB persistence,

165
00:11:19.593 --> 00:11:25.127
where all tabs actually sync across
the same cache across the system.

166
00:11:25.127 --> 00:11:29.447
So, you can see really cool things with
that, whereas if one tab is connected to

167
00:11:29.447 --> 00:11:33.896
the internet, and another tab is not
because you've disabled it with Dev Tools,

168
00:11:33.896 --> 00:11:38.087
it will still write all of your updates
in the offline tab online because it's

169
00:11:38.087 --> 00:11:41.013
syncing to a cache that is
connected to the internet.

170
00:11:41.013 --> 00:11:45.869
So, it is very powerful and a really
cool way of showing real time updates.

171
00:11:48.294 --> 00:11:54.004
So, to your question of how can I tell
users, hey this data might be stale or

172
00:11:54.004 --> 00:11:58.372
hey these rights haven't
happened to the database yet?

173
00:11:58.372 --> 00:12:01.481
That is all in SnapshotMetadata.

174
00:12:01.481 --> 00:12:04.921
So, here in on Snapshot,
the first time it fires,

175
00:12:04.921 --> 00:12:09.801
I'm gonna get my first name of myself and
the very first time I'm going to

176
00:12:09.801 --> 00:12:14.121
see that it's gonna say from cache
is false on the metadata, and

177
00:12:14.121 --> 00:12:19.568
has any pending rights is false because
I got my data, nothing has happened yet.

178
00:12:19.568 --> 00:12:22.089
Now I'm gonna call updateDoc, and

179
00:12:22.089 --> 00:12:28.370
I'm gonna have data David with exclamation
mark and I have new updates that come in.

180
00:12:28.370 --> 00:12:34.350
So, I'll get my new state of data, so
my new name, and then, on the second time,

181
00:12:34.350 --> 00:12:40.162
I will have FromCache is true because this
data has been updated from the cache,

182
00:12:40.162 --> 00:12:44.240
and then hasPendingWrite is
also true because it says,

183
00:12:44.240 --> 00:12:47.307
hey this write is going off to the server.

184
00:12:47.307 --> 00:12:52.228
And so, one way of telling users whether
their data is synchronized with the server

185
00:12:52.228 --> 00:12:54.701
or not is you do it from hasPendingWrite.

186
00:12:54.701 --> 00:12:58.355
FromCache is not as reliable or
is not an indicator, I should say,

187
00:12:58.355 --> 00:13:02.732
of whether it's from the server or not
because certain data can be from the cache

188
00:13:02.732 --> 00:13:05.106
from that document and certain cannot be.

189
00:13:05.106 --> 00:13:09.918
But with hasPendingWrite, you know that
hey, not all the data within this document

190
00:13:09.918 --> 00:13:13.920
has been synchronized with the server yet,
and this is what I use.

191
00:13:13.920 --> 00:13:19.293
So if you were creating like a photos
grid and you wanted photos to upload,

192
00:13:19.293 --> 00:13:25.350
you could make that photo open opacity
0.7 because it has pending writes.

193
00:13:25.350 --> 00:13:28.455
And so it's a really good way of letting
the user know, hey, you're writing data,

194
00:13:28.455 --> 00:13:30.098
but it's not quite saved
on the server yet.

