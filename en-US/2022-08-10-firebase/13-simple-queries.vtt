WEBVTT

1
00:00:00.990 --> 00:00:03.818
And so, those are simple queries,
as I see it's simple,

2
00:00:03.818 --> 00:00:05.510
just a bunch of little operators.

3
00:00:05.510 --> 00:00:09.075
So I'm gonna go through now using that
same project that you have set up,

4
00:00:09.075 --> 00:00:11.600
you don't have to NPM install or
do anything else.

5
00:00:11.600 --> 00:00:14.710
We're gonna go back to this
foundational querying section, and

6
00:00:14.710 --> 00:00:18.680
I'm gonna write some queries and
then you are gonna write some queries.

7
00:00:18.680 --> 00:00:23.150
And then then I'll write some more queries
in your query, so that's where we're at.

8
00:00:25.520 --> 00:00:29.455
All right, so in this project we are at
this page called Real Time streams,

9
00:00:29.455 --> 00:00:32.570
we're gonna move on to
foundational queries.

10
00:00:32.570 --> 00:00:34.325
And so just to make this simple,

11
00:00:34.325 --> 00:00:38.754
I have all these commented out ones we're
going to just gonna focus on the query.

12
00:00:38.754 --> 00:00:43.176
And then that query kind of gets, it goes
straight to that bind to table function

13
00:00:43.176 --> 00:00:45.100
that we worked on in the last time.

14
00:00:46.520 --> 00:00:49.056
So we wanna get the first 200 expenses,

15
00:00:49.056 --> 00:00:53.861
well the first thing we do is wanna make
sure that we have an expenses collection.

16
00:00:53.861 --> 00:00:57.754
So we have that written here,
and then from here,

17
00:00:57.754 --> 00:01:02.180
we pass that in and
we wanna now start restricting.

18
00:01:02.180 --> 00:01:06.751
So we wanted to restrict, so
we use the operator limit,

19
00:01:06.751 --> 00:01:09.490
and we limit to the first 200.

20
00:01:09.490 --> 00:01:14.504
So now I'll save and
this is running right,

21
00:01:14.504 --> 00:01:19.580
this is, no one has it, probably no user.

22
00:01:19.580 --> 00:01:21.880
Yeah, one second,
I think we just rerun everything.

23
00:01:21.880 --> 00:01:25.660
This was sitting for a very long time and
bad things happen when things sit for

24
00:01:25.660 --> 00:01:26.560
a very long time.

25
00:01:26.560 --> 00:01:30.382
All right, so I'm just doing NPM run
dev to boot up the emulators and

26
00:01:30.382 --> 00:01:31.332
the dev server.

27
00:01:33.981 --> 00:01:36.342
Let's see here and we are good.

28
00:01:43.905 --> 00:01:48.469
So I'm gonna go to fundamental queering,
and here we go,

29
00:01:48.469 --> 00:01:51.460
we have UID cost category from cache.

30
00:01:51.460 --> 00:01:54.520
It was our first read so it's false, and

31
00:01:54.520 --> 00:01:59.770
we can see that we just have,
it's about 200 expenses.

32
00:01:59.770 --> 00:02:03.984
And it's kinda hard to see if it was
200 just from all that scroll, so

33
00:02:03.984 --> 00:02:07.160
if it is limited to 20 I
want to do a refresh, sorry.

34
00:02:09.160 --> 00:02:11.944
We can see that our from cache is true,

35
00:02:11.944 --> 00:02:17.959
which is interesting to see here because
not only did I change the query entirely.

36
00:02:17.959 --> 00:02:22.616
But I still served from the cache
because as fire stores database,

37
00:02:22.616 --> 00:02:28.560
the underlying cache was able to say,
I've seen these documents before.

38
00:02:28.560 --> 00:02:32.610
They haven't received any updates, no need
to go out and refetch all this stuff,

39
00:02:32.610 --> 00:02:34.920
it tries to be as efficient as possible.

40
00:02:34.920 --> 00:02:37.330
There are still some cases
where it might believe for

41
00:02:37.330 --> 00:02:41.460
some reason something's invalid, so we'll
do a fetch or something behind the scenes.

42
00:02:41.460 --> 00:02:45.870
So it does try to do its best
though to make sure that it's only

43
00:02:45.870 --> 00:02:49.858
reading data in real time
when updates are occurring.

44
00:02:51.392 --> 00:02:53.325
So that's a very simple query,

45
00:02:53.325 --> 00:02:57.250
but now let's get all expenses
that are categorized as pets.

46
00:02:57.250 --> 00:03:01.922
So I'm gonna comment this one out again,
so each expense so

47
00:03:01.922 --> 00:03:08.750
we always start by saying expenses call so
what collection we're carrying on.

48
00:03:08.750 --> 00:03:15.985
And then we're going to say where
category is equal equal to pets.

49
00:03:17.640 --> 00:03:21.201
And I don't wanna actually get all even
though I wrote it all here, I don't know

50
00:03:21.201 --> 00:03:25.770
what I was thinking, it's limit to 20
because it's easier to read through it.

51
00:03:25.770 --> 00:03:30.351
Saving when to go refresh I disabled the
HMR on this because I don't know I feel

52
00:03:30.351 --> 00:03:35.073
like weird things happen when you're
doing real time queries with HMR it's too

53
00:03:35.073 --> 00:03:37.840
much that's updating and
it's hard to tell.

54
00:03:37.840 --> 00:03:41.371
So I like to do a nice hard
refresh to see what's new.

55
00:03:41.371 --> 00:03:45.801
So right here, we have 20 and
they're all categorized as pets.

56
00:03:50.370 --> 00:03:53.420
Now, we're gonna do something
a little bit more intensive.

57
00:03:53.420 --> 00:04:01.270
We're gonna get all expenses less than
$200 ordered from greatest to least.

58
00:04:02.290 --> 00:04:07.365
So again, expenses column where costs,

59
00:04:07.365 --> 00:04:14.619
did I say greater than 200 or
expenses less than 200.

60
00:04:16.797 --> 00:04:24.066
And we're going to do an order by cost and
then from greatest to least.

61
00:04:24.066 --> 00:04:27.601
So that is going to be
in descending value, so

62
00:04:27.601 --> 00:04:33.100
the greatest are on top and the less or
the least ones are in the bottom.

63
00:04:33.100 --> 00:04:36.603
And if you're anything like me
you forget it ascending and

64
00:04:36.603 --> 00:04:39.894
descending at least once every
three to four months and

65
00:04:39.894 --> 00:04:43.270
have to write a query like
that's how that works again.

66
00:04:43.270 --> 00:04:47.909
So now let's refresh,
and then we have 199.93

67
00:04:47.909 --> 00:04:52.973
because we didn't say equal to and
then as we scroll down.

68
00:04:54.971 --> 00:04:55.670
Did I limit?

69
00:04:55.670 --> 00:04:56.380
What did I?

70
00:04:56.380 --> 00:04:57.460
I didn't do any limiting.

71
00:04:57.460 --> 00:05:01.463
So we can see these just go forever and
let's see how far this goes down so

72
00:05:01.463 --> 00:05:03.662
all this I put a ton of expenses in here,

73
00:05:03.662 --> 00:05:06.980
goes all the way down to
our cheapest expense $1.06.

74
00:05:06.980 --> 00:05:11.587
So we read a ton of data.

75
00:05:13.848 --> 00:05:16.285
Let's comment that out.

76
00:05:16.285 --> 00:05:19.680
So now we wanna get number good dates,

77
00:05:19.680 --> 00:05:25.100
dates are in JavaScript always
not fun to work with, right?

78
00:05:25.100 --> 00:05:28.930
Like that's why we have like six different
date libraries that we always reach for

79
00:05:28.930 --> 00:05:31.262
every time someone asks
us to format date though,

80
00:05:31.262 --> 00:05:33.500
the browser API has gotten
a lot better at that.

81
00:05:33.500 --> 00:05:36.332
So I don't wanna throw shade
at that JavaScript dates and

82
00:05:36.332 --> 00:05:38.404
formatting them has gotten a lot easier.

83
00:05:38.404 --> 00:05:42.991
But with Fire Store querying by dates is
actually really easy because Fire Store

84
00:05:42.991 --> 00:05:46.221
itself will work with a native
JavaScript date object.

85
00:05:46.221 --> 00:05:49.849
So you don't have to do any formulation or
any kind of weird formatting.

86
00:05:49.849 --> 00:05:54.200
So I could say expenses call where and
date and

87
00:05:54.200 --> 00:06:01.542
what was that again get all expenses
that occurred before July of 2020.

88
00:06:01.542 --> 00:06:06.518
So I can say it's less
than it's a new date, and

89
00:06:06.518 --> 00:06:11.754
then I just insert a date, so 6/1/2021.

90
00:06:13.783 --> 00:06:19.190
And I am gonna limit this one so
limit to 20.

91
00:06:19.190 --> 00:06:22.892
So let's save and refresh, and

92
00:06:22.892 --> 00:06:28.510
let's say we have ourselves this is May.

93
00:06:28.510 --> 00:06:32.856
There's a ton of expensive,
so these all go in May, so

94
00:06:32.856 --> 00:06:38.350
we don't have any ones that are from June,
and we can even do a range.

95
00:06:38.350 --> 00:06:42.030
So let's say I wanna get all queries,
how many do I have left here?

96
00:06:42.030 --> 00:06:44.846
Let's see.

97
00:06:44.846 --> 00:06:48.395
All right, I'm gonna do these two and then
I'm go ask you all to do seven and eight,

98
00:06:48.395 --> 00:06:49.270
so let's see here.

99
00:06:49.270 --> 00:06:57.551
So we're gonna get all expenses between
July of 2021 and October of 2021.

100
00:06:57.551 --> 00:07:06.119
So like always specify the collection
that we're querying against and

101
00:07:06.119 --> 00:07:10.267
then we want to know where date is.

102
00:07:10.267 --> 00:07:16.840
So to be between,
we'll have to say is less than.

103
00:07:19.641 --> 00:07:23.940
Let's see here right we make sure so it's
October 21, June, July, August, October.

104
00:07:23.940 --> 00:07:31.380
So less than a new date of 10/1/2021 but

105
00:07:31.380 --> 00:07:36.642
greater than, let's say, six,

106
00:07:36.642 --> 00:07:43.366
what are the dates or days in July 6/31?

107
00:07:43.366 --> 00:07:47.801
There's smarter ways to do this, but
we'll just go with that for now.

108
00:07:47.801 --> 00:07:54.423
Save and let me limit again limit to we'll
do a little more this time, limit to 100.

109
00:07:57.533 --> 00:08:00.600
All right, cool, and so this is June and

110
00:08:00.600 --> 00:08:05.758
going down we have a ton of expenses so
it only gets us to 07/09.

111
00:08:09.031 --> 00:08:10.330
But it's all composite queries.

112
00:08:10.330 --> 00:08:11.300
So actually, all right.

113
00:08:11.300 --> 00:08:15.660
I'm gonna wait for the exercise to do
on composite queries because composite

114
00:08:15.660 --> 00:08:18.960
queries I think are the real
flex some of the muscles here.

115
00:08:18.960 --> 00:08:23.010
So those are simple queries as
you can see the entire time.

116
00:08:23.010 --> 00:08:26.898
What made them simple, is that even
though we have multiple ranges here, so

117
00:08:26.898 --> 00:08:30.370
greater than or less than date,
it's still just on date.

118
00:08:30.370 --> 00:08:33.905
And the same thing date here,
cost, category,

119
00:08:33.905 --> 00:08:37.710
these are all simple queries
because it's one field

