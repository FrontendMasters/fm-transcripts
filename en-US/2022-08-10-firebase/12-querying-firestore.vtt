WEBVTT

1
00:00:00.245 --> 00:00:03.877
All right, moving on from,
we were just doing general reads.

2
00:00:03.877 --> 00:00:07.802
If there users, let's read users,
if there's expenses, let's read expenses.

3
00:00:07.802 --> 00:00:09.529
That's probably not what
you're always gonna want.

4
00:00:09.529 --> 00:00:11.018
You're gonna wanna narrow it down,

5
00:00:11.018 --> 00:00:13.285
you're gonna wanna limit
the amount that you get back.

6
00:00:13.285 --> 00:00:17.202
So we're going to start
focusing on queries.

7
00:00:17.202 --> 00:00:20.197
Now queries in FireStore,
there are two types.

8
00:00:20.197 --> 00:00:23.001
There are simple and composite.

9
00:00:23.001 --> 00:00:26.803
We're gonna start by talking
about simple queries.

10
00:00:26.803 --> 00:00:30.973
And what is important, I'm never sure if
I'm jumping ahead of my slides here, but

11
00:00:30.973 --> 00:00:34.861
I'll say it as many times, cuz I think
it's a really cool spot of FireStore.

12
00:00:34.861 --> 00:00:39.619
Is that FireStore,
one of the goals of the database design

13
00:00:39.619 --> 00:00:44.486
is to ensure that all of your
queries run just blazing fast.

14
00:00:44.486 --> 00:00:49.692
As a matter of fact, in Firestore,
the time it takes to run

15
00:00:49.692 --> 00:00:56.624
a query is not proportional to the amount
of documents that it looks through.

16
00:00:56.624 --> 00:00:59.904
So if you run a query that
looks across 60 documents,

17
00:00:59.904 --> 00:01:04.269
it can run just as fast as a query
that looks across 6 million documents.

18
00:01:04.269 --> 00:01:06.574
What usually takes time
with Firestore is if,

19
00:01:06.574 --> 00:01:11.069
instead of returning back 60 documents,
you wanna return back 6,000 documents,

20
00:01:11.069 --> 00:01:13.924
because that's just the bandwidth
issue at that point.

21
00:01:13.924 --> 00:01:18.664
So Firestore is meant to just,
whatever queries we support,

22
00:01:18.664 --> 00:01:24.693
we support them, because we have a very
scalable and fast way of running them.

23
00:01:24.693 --> 00:01:30.370
So simple queries in Firestore,
they operate on one field.

24
00:01:30.370 --> 00:01:35.549
So in this case, we have an example,
we were getting an expensive collection.

25
00:01:35.549 --> 00:01:40.579
And we're gonna write a query,
we say, hey, get all expenses where

26
00:01:40.579 --> 00:01:46.074
the cost is greater than 200 and
limit that to the first 100 results.

27
00:01:46.074 --> 00:01:50.722
So now I know that I will
get anywhere between 0 and

28
00:01:50.722 --> 00:01:55.600
100 results,
that cost is greater than 200.

29
00:01:55.600 --> 00:01:59.597
And while the syntax
is a little different,

30
00:01:59.597 --> 00:02:02.412
it reads a lot like a SQL query.

31
00:02:02.412 --> 00:02:08.501
It's select from expenses where cost
is greater than 200, limit, 100.

32
00:02:08.501 --> 00:02:13.130
It's just that with a JavaScript API.

33
00:02:13.130 --> 00:02:17.034
And with querying,
we have lots of different operators.

34
00:02:17.034 --> 00:02:20.395
The most basic one is the equals operator.

35
00:02:20.395 --> 00:02:25.195
And just because a lot of us here
are watching, are JavaScript developers,

36
00:02:25.195 --> 00:02:28.350
always make sure you are not
using triple equals.

37
00:02:28.350 --> 00:02:31.328
We don't do triple equals,
we just do double equals,

38
00:02:31.328 --> 00:02:33.418
that is a JavaScript specific thing.

39
00:02:33.418 --> 00:02:37.425
I can't tell you how many times I've
written a bug trying to do a triple equal.

40
00:02:37.425 --> 00:02:41.689
So double equals for equality operators.

41
00:02:41.689 --> 00:02:45.404
So this says, hey, give me all expenses,
limit to the first 100 that are food.

42
00:02:47.723 --> 00:02:52.668
And then what's really interesting
about equals is that, in FireStore,

43
00:02:52.668 --> 00:02:55.343
we can store objects within documents.

44
00:02:55.343 --> 00:03:01.173
So in this case, I can actually query
based upon the subfields of that object.

45
00:03:01.173 --> 00:03:04.467
So if I wanted to say,
get all of the expenses,

46
00:03:04.467 --> 00:03:10.047
where the user.city is equal to Maputo,
which is the capital of Mozambique,

47
00:03:10.047 --> 00:03:14.799
then I can limit that to the top 100,
and I get all of those back.

48
00:03:14.799 --> 00:03:19.653
And I believe you can chain this
down to 20 levels deep in an object

49
00:03:19.653 --> 00:03:22.179
before it stops letting you do it.

50
00:03:22.179 --> 00:03:27.466
But you could say user.city.name.lat.long.

51
00:03:27.466 --> 00:03:35.158
You can still run a query even if you have
a complex object stored in your document.

52
00:03:35.158 --> 00:03:39.173
And something that also works in a really
expressive way is with equal equal,

53
00:03:39.173 --> 00:03:42.221
we're just checking, hey,
is it equal to this value?.

54
00:03:42.221 --> 00:03:47.492
But we also can check to see if there's
multiple values with the in operator.

55
00:03:47.492 --> 00:03:49.638
So in this case, we're saying,

56
00:03:49.638 --> 00:03:55.172
let's get all the expenses where the city
is in Maputo, Buenos Aires, or Santiago.

57
00:03:55.172 --> 00:03:59.734
And so that way, all my results
will be restricted to these three.

58
00:03:59.734 --> 00:04:05.645
And in operators, you pass in this array,
and it can take what I recall correctly,

59
00:04:05.645 --> 00:04:09.542
you can provide up to ten
values in there to limit from.

60
00:04:09.542 --> 00:04:13.664
So this is a really nice way if you can
imagine a UI where you have a drop-down

61
00:04:13.664 --> 00:04:18.378
list, where you're like, show me the city,
that city, this city, that city, and

62
00:04:18.378 --> 00:04:21.737
then the query will respond
based upon those restrictions.

63
00:04:21.737 --> 00:04:24.917
And we also have the ability to do
greater than or less than, and I can see

64
00:04:24.917 --> 00:04:28.317
already that I have a syntax error,
because I don't have my nice ligature.

65
00:04:28.317 --> 00:04:31.088
But let's pretend I got that right.

66
00:04:31.088 --> 00:04:34.509
And in this case,
we're operating against expenses again.

67
00:04:34.509 --> 00:04:39.419
We're saying, hey, give me where
the cost is greater than 200, but

68
00:04:39.419 --> 00:04:43.123
it's less than or greater than or
equal to 200, but

69
00:04:43.123 --> 00:04:47.809
less than and equal to 210, and
limit to the first 100 as well.

70
00:04:49.366 --> 00:04:53.603
And just as where I wanna
find where things are equal,

71
00:04:53.603 --> 00:04:57.003
I can also find where
things are not equal.

72
00:04:57.003 --> 00:05:00.830
So I can say,
give me back the first 30 expenses,

73
00:05:00.830 --> 00:05:04.659
where the category of them
is not transportation.

74
00:05:07.183 --> 00:05:11.430
And similarly where we had the in
operator, we have the not-in operator.

75
00:05:11.430 --> 00:05:14.985
So I could say, hey,
let's get all the expenses from

76
00:05:14.985 --> 00:05:19.253
users who are not in all of these
cities and then limit to 100.

77
00:05:22.770 --> 00:05:24.905
What was this one?

78
00:05:24.905 --> 00:05:31.091
I think this is just a, this is,
I meant to change the title.

79
00:05:31.091 --> 00:05:33.729
This shouldn't say not-in,
I believe this should say ordering.

80
00:05:33.729 --> 00:05:36.418
So in this case,
another interesting thing which you

81
00:05:36.418 --> 00:05:39.057
can do with queries is you
can specify the ordering.

82
00:05:39.057 --> 00:05:43.719
So in this case, I'm saying, where cost
is greater than or equal to 200 or

83
00:05:43.719 --> 00:05:46.316
where cost is less than or equal to 210.

84
00:05:46.316 --> 00:05:51.409
And then I can order by cost, and
I can specify an ordering a direction.

85
00:05:51.409 --> 00:05:56.677
So by default, it's ascending order, but
if I want to do it from a descending

86
00:05:56.677 --> 00:06:01.070
value, just do des, and
it changes the ordering of that query.

