WEBVTT

1
00:00:00.586 --> 00:00:03.303
So I'm gonna show off how
collection group queries work.

2
00:00:06.900 --> 00:00:10.326
All right, collection group queries,

3
00:00:10.326 --> 00:00:14.568
that is in this colour
collection group queries.

4
00:00:14.568 --> 00:00:20.817
So I wanna get the first 100 expenses
across all users that are under $100.

5
00:00:20.817 --> 00:00:25.840
So what I've done in the emulator
is if we go to users,

6
00:00:25.840 --> 00:00:30.543
each user does have
an expensive sub collection.

7
00:00:30.543 --> 00:00:34.501
I've sort of preloaded all of this with
everything we could possibly need.

8
00:00:34.501 --> 00:00:40.843
So this user actually does have all
of their expenses loaded within here.

9
00:00:40.843 --> 00:00:44.449
So within here, I can say, okay, well,

10
00:00:44.449 --> 00:00:50.117
let me start with the expenses column and
what I want to do actually

11
00:00:50.117 --> 00:00:55.289
instead of expenses column I
want to do a collection group.

12
00:00:55.289 --> 00:00:59.570
So what I'm gonna say is create a,

13
00:00:59.570 --> 00:01:05.041
Expenses group that is a collection group.

14
00:01:05.041 --> 00:01:09.752
No not capital c, being imported,
okay, yeah, it's being imported.

15
00:01:09.752 --> 00:01:13.847
Collection group of FireStore,

16
00:01:13.847 --> 00:01:18.381
it's passing in FireStore first and

17
00:01:18.381 --> 00:01:22.488
then passing in R ID of expenses.

18
00:01:23.512 --> 00:01:29.122
So I'll say expenses group and

19
00:01:29.122 --> 00:01:34.731
I want to limit first 100 and

20
00:01:34.731 --> 00:01:40.123
I want to say where cost is less

21
00:01:40.123 --> 00:01:45.236
than 100 So now,

22
00:01:45.236 --> 00:01:51.384
this really does the same thing as we had
before, but allows us to have flexibility.

23
00:01:51.384 --> 00:01:56.112
So I can get by a specific user or I can
get within, without running a query or

24
00:01:56.112 --> 00:01:59.802
I can get everything by running
a collection group query.

25
00:01:59.802 --> 00:02:02.197
And so by structuring my data this way,

26
00:02:02.197 --> 00:02:07.288
it's almost like I have two collections
of all expenses and individual expenses.

27
00:02:07.288 --> 00:02:11.608
And when you start to think about your
data being structured that way and

28
00:02:11.608 --> 00:02:12.690
the no SQL world.

29
00:02:12.690 --> 00:02:16.135
You'll find that a lot of your
queries become really based upon

30
00:02:16.135 --> 00:02:20.113
where they are located, rather than
all the constraints that you need.

31
00:02:20.113 --> 00:02:23.328
And that gives you extra fields and
extra things to query on.

32
00:02:23.328 --> 00:02:27.447
Because the goal is in the know SQL world
is to make sure that all those reads

33
00:02:27.447 --> 00:02:28.849
are as fast as possible.

34
00:02:32.548 --> 00:02:38.223
So the second one, Is I

35
00:02:38.223 --> 00:02:42.765
wanna get the first 100 expenses
across all users from any date range,

36
00:02:42.765 --> 00:02:45.634
I think that you can make
up whatever you want.

37
00:02:45.634 --> 00:02:49.213
So to do that it's, again,

38
00:02:49.213 --> 00:02:53.989
expenses group and I'm going to say,

39
00:02:53.989 --> 00:03:00.124
where first 100 expenses, so limit 100.

40
00:03:02.124 --> 00:03:07.473
And I'll say where date is equal

41
00:03:07.473 --> 00:03:13.620
to new date 12/15/2021.

42
00:03:16.770 --> 00:03:21.122
And just like that, all the expenses,
so, collection group queries

43
00:03:21.122 --> 00:03:25.274
are super powerful and that way it
gives you way more flexibility.

44
00:03:25.274 --> 00:03:29.498
Just make sure that you take advantage of
the hierarchy that FireStore provides you

45
00:03:29.498 --> 00:03:31.440
and you can do a lot of amazing things.

