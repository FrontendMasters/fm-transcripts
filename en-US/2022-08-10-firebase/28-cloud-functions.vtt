WEBVTT

1
00:00:00.120 --> 00:00:04.309
So now we're getting into one of the
really fun parts of, or is in my opinion,

2
00:00:04.309 --> 00:00:07.250
in Firebase, and that's Cloud Functions.

3
00:00:07.250 --> 00:00:09.062
So Cloud Functions are a way for

4
00:00:09.062 --> 00:00:12.190
you to write server code
without running a server.

5
00:00:12.190 --> 00:00:16.734
So you write a snippet of server code,
and we will run that code in

6
00:00:16.734 --> 00:00:21.635
response to some event that happens
within the Firebase ecosystem.

7
00:00:21.635 --> 00:00:24.921
And there's a whole set of events that
we're gonna go through here in just

8
00:00:24.921 --> 00:00:25.931
a minute to check out.

9
00:00:25.931 --> 00:00:29.220
And it's really cool and
it allows you to do very powerful things.

10
00:00:29.220 --> 00:00:34.168
So the way to think about it is
that sometimes you might need to

11
00:00:34.168 --> 00:00:38.551
get data that's located on
a server somewhere else.

12
00:00:38.551 --> 00:00:42.784
Or sometimes you might wanna do something
that's very private like make a payment.

13
00:00:42.784 --> 00:00:46.359
And that's gonna have private API keys and
things like that that need to be hosted

14
00:00:46.359 --> 00:00:49.550
on a server, and you can't have
those embedded in the client.

15
00:00:49.550 --> 00:00:55.610
And that is something that is really
the whole use case for Cloud Functions.

16
00:00:55.610 --> 00:00:59.910
So whenever a document gets created
in Firestore, let's trigger that.

17
00:00:59.910 --> 00:01:04.840
And let's call an external API to get that
data and return it back into Firestore.

18
00:01:04.840 --> 00:01:08.340
Or, hey, a user got created
in Firebase authentication.

19
00:01:08.340 --> 00:01:11.212
Let's send a welcome email out to them.

20
00:01:11.212 --> 00:01:17.144
And maybe I have an account setup with
SendGrid or something like that So

21
00:01:17.144 --> 00:01:22.770
it's really important to think about
sort of the triggering mechanism

22
00:01:22.770 --> 00:01:27.750
here is that we have this server
code that lives up in the cloud.

23
00:01:27.750 --> 00:01:33.635
But in order to access it, we do something
usually via the Firebase JavaScript SDK.

24
00:01:33.635 --> 00:01:34.753
So I added a document.

25
00:01:34.753 --> 00:01:36.478
I created a user.

26
00:01:36.478 --> 00:01:38.629
So all of these things are trigger based.

27
00:01:38.629 --> 00:01:43.807
They are actions that begin on the client,
but then take over on the server.

28
00:01:45.841 --> 00:01:51.000
And one thing about functions are is
that functions are trusted environments.

29
00:01:51.000 --> 00:01:55.718
So that means that we're going
to be using the Admin SDK,

30
00:01:55.718 --> 00:02:01.029
which is a server-side SDK that's
very similar to what you'll

31
00:02:01.029 --> 00:02:06.159
see on the client side,
except it has ultimate permissions.

32
00:02:06.159 --> 00:02:09.840
It gets created with something
special called a service account.

33
00:02:09.840 --> 00:02:14.486
And a service account is a special kind
of user that has access to do whatever.

34
00:02:14.486 --> 00:02:16.627
It actually bypasses security rules.

35
00:02:16.627 --> 00:02:21.906
It is basically a mega admin user and
it has the ability to do all these things.

36
00:02:21.906 --> 00:02:23.952
So you can use this service account or

37
00:02:23.952 --> 00:02:27.714
this Admin SDK with the service
account inside of a cloud function,

38
00:02:27.714 --> 00:02:31.485
and you have access to do whatever
you need to do within your system.

39
00:02:34.221 --> 00:02:38.962
So inevitably when we talk functions, and
before I get into showing the code form,

40
00:02:38.962 --> 00:02:41.417
it's important to talk about cold start.

41
00:02:41.417 --> 00:02:48.201
So cold start is a very talked
about thing in serverless space.

42
00:02:48.201 --> 00:02:53.076
And basically, cold start is the time it
takes from your function from not being

43
00:02:53.076 --> 00:02:55.422
booted up at all to running your code.

44
00:02:55.422 --> 00:02:59.554
And so this is really important because
certain things might be more time

45
00:02:59.554 --> 00:03:00.986
sensitive than others.

46
00:03:00.986 --> 00:03:05.254
And with cold start is that it
can range anywhere between 500

47
00:03:05.254 --> 00:03:09.454
milliseconds to higher,
depending on what your use case is.

48
00:03:09.454 --> 00:03:14.232
You might be doing something very complex
inside of a cloud function that takes five

49
00:03:14.232 --> 00:03:15.540
seconds to complete.

50
00:03:15.540 --> 00:03:20.175
So obviously, the cold start may be
only 500 milliseconds, but then the full

51
00:03:20.175 --> 00:03:24.422
running time plus cold start is gonna
be those extra five seconds as well.

52
00:03:24.422 --> 00:03:29.460
Also, something that can affect cold start
is if you have a lot of node modules.

53
00:03:29.460 --> 00:03:33.678
So if you install a ton of node
modules into your cloud function, and

54
00:03:33.678 --> 00:03:36.638
you deploy it out,
those have to be installed.

55
00:03:36.638 --> 00:03:39.690
Those have to be booted up for
your runtime to work.

56
00:03:39.690 --> 00:03:44.414
So one of the best practices for really
reducing cold start is also making sure if

57
00:03:44.414 --> 00:03:49.159
you don't need that module or if I could
get something that works a bit lighter.

58
00:03:49.159 --> 00:03:51.813
That's a really good way
of reducing cold start.

59
00:03:51.813 --> 00:03:56.323
And then there's also ways to
pay your way out of cold start.

60
00:03:56.323 --> 00:04:01.901
Cloud Functions has a feature called min
instances, which allows you to reserve

61
00:04:01.901 --> 00:04:07.670
a specific amount of instances that will
kind of always be warm and ready to go.

62
00:04:07.670 --> 00:04:12.535
So if you expect a lot of traffic,
you can reserve 20 cloud functions.

63
00:04:12.535 --> 00:04:15.104
And then when those requests comes in,
it's ready to pick them up and

64
00:04:15.104 --> 00:04:16.712
you don't have to worry about cold start.

65
00:04:16.712 --> 00:04:19.140
But you pay to keep
around those instances.

66
00:04:20.940 --> 00:04:23.515
And this is something I consider
not including into it, but

67
00:04:23.515 --> 00:04:27.680
I think it's worth checking out because if
you go and check out more documentation.

68
00:04:27.680 --> 00:04:31.730
Very recently,
just like the other month, in fact,

69
00:04:31.730 --> 00:04:38.370
Cloud Functions got a really big reboot,
where we call it Cloud Functions v2.

70
00:04:38.370 --> 00:04:43.440
And it has a lot of great implications for
cold start because it actually

71
00:04:43.440 --> 00:04:49.240
has a lot of new features that make
cold start a lot easier to manage.

72
00:04:49.240 --> 00:04:54.582
So in Cloud Functions v1 world,
every time a function is invoked,

73
00:04:54.582 --> 00:05:01.410
it creates an instance, and you can handle
one request to a function per instance.

74
00:05:01.410 --> 00:05:05.810
So if another request comes in,
it has to spin up another function,

75
00:05:05.810 --> 00:05:07.442
and so on, and so forth.

76
00:05:07.442 --> 00:05:11.482
Whereas with Cloud Functions v2,
we have concurrency,

77
00:05:11.482 --> 00:05:14.538
which means that
a function can be invoked.

78
00:05:14.538 --> 00:05:19.176
And if another request comes in,
that function says, I'm alive, I'm active,

79
00:05:19.176 --> 00:05:20.647
I can take that one as well.

80
00:05:20.647 --> 00:05:21.990
That sounds good.

81
00:05:21.990 --> 00:05:23.790
And by default, I believe it's 80.

82
00:05:23.790 --> 00:05:27.160
And I think it can go
up to 1,000 functions.

83
00:05:27.160 --> 00:05:33.801
So that way, it can really lessen
the amount of cold start that you incur.

84
00:05:33.801 --> 00:05:38.723
It also means that the way you write your
functions just programmatically matters.

85
00:05:38.723 --> 00:05:43.350
Because if you are only ever dealing with
one request per function, then you can

86
00:05:43.350 --> 00:05:48.170
almost think about each function as
a sandbox for that user's information.

87
00:05:48.170 --> 00:05:52.691
So it runs that one time,
you can get that user's information,

88
00:05:52.691 --> 00:05:55.250
and this function tears down.

89
00:05:55.250 --> 00:05:57.890
Whereas a concurrent function
is gonna spin up, and

90
00:05:57.890 --> 00:05:59.810
it can take multiple requests.

91
00:05:59.810 --> 00:06:01.190
So if you create an app,

92
00:06:01.190 --> 00:06:04.640
a Firebase app that's associated
with a certain name or for

93
00:06:04.640 --> 00:06:09.203
the user, well, that better be pertinent
for another request that comes in.

94
00:06:09.203 --> 00:06:14.247
Or if you create a global state inside of
that function that's called current user,

95
00:06:14.247 --> 00:06:18.026
well, that current user could
be somebody else that comes in.

96
00:06:18.026 --> 00:06:20.716
So those are just really
important dichotomies to keep in

97
00:06:20.716 --> 00:06:24.365
mind when you're thinking about
Cloud Functions v1 versus v2.

98
00:06:24.365 --> 00:06:27.206
Both are still heavily supported and

99
00:06:27.206 --> 00:06:31.540
have really cool use cases for
one versus the other.

100
00:06:31.540 --> 00:06:33.527
And v2 is still very early on.

101
00:06:33.527 --> 00:06:37.348
Not all triggers that we're gonna be going
over today are currently supported in v2,

102
00:06:37.348 --> 00:06:38.930
but it's just a good thing to know.

103
00:06:40.970 --> 00:06:44.636
So the way we set up functions
is kinda the Firebase CLI

104
00:06:44.636 --> 00:06:46.570
handles a lot of it for you.

105
00:06:46.570 --> 00:06:50.937
You write Firebase init functions, and
then it goes through this whole process

106
00:06:50.937 --> 00:06:53.999
where it generates out your
folder structure for you and

107
00:06:53.999 --> 00:06:56.556
even boilerplates a little function for
you.

108
00:06:56.556 --> 00:06:59.170
And it actually creates this
very function right here.

109
00:06:59.170 --> 00:07:02.500
And this is the signature of a function.

110
00:07:02.500 --> 00:07:06.687
You require functions from
the firebase-functions SDK.

111
00:07:06.687 --> 00:07:09.158
You create a name, so exports.helloWorld.

112
00:07:09.158 --> 00:07:15.350
And we specify the type of trigger,
which is an HTTPS trigger.

113
00:07:15.350 --> 00:07:18.640
And then on request, let's do something.

114
00:07:18.640 --> 00:07:22.680
And so if I were to deploy this trigger,
I would get a URL handed back to me.

115
00:07:22.680 --> 00:07:26.941
And anytime someone sent any type
of request, post, get, put, patch,

116
00:07:26.941 --> 00:07:31.220
whatever, it will trigger that,
and I can do something with it.

117
00:07:31.220 --> 00:07:33.761
And that's what to do to deploy,
just say firebase deploy.

118
00:07:33.761 --> 00:07:37.380
And if you wanna be very specific and not
accidentally deploy your Firebase hosting

119
00:07:37.380 --> 00:07:39.250
site, you can say deploy only functions.

120
00:07:40.430 --> 00:07:44.240
And so that's a lot of showing, it's time

