WEBVTT

1
00:00:00.242 --> 00:00:02.818
So that's the heavy part
of all the query and

2
00:00:02.818 --> 00:00:07.424
now I'm gonna talk a bit more about
what we haven't seen and that's joining.

3
00:00:07.424 --> 00:00:12.581
So in SQL tables, or SQL tables,
we see that we always join by having

4
00:00:12.581 --> 00:00:18.568
a foreign key, so in this case, we have
tbl users with the UID of David 123.

5
00:00:18.568 --> 00:00:22.588
And then that joins out to the UID
in the expense of David 123,

6
00:00:22.588 --> 00:00:27.460
and we can see that David 123,
there's just two expenses in that table.

7
00:00:27.460 --> 00:00:30.799
And so writing a query,
I can get that user back, so

8
00:00:30.799 --> 00:00:33.373
I can select all the properties I want.

9
00:00:33.373 --> 00:00:38.513
And I can actually enter join and
I can get back a whole column of the ID,

10
00:00:38.513 --> 00:00:43.494
the cost, the date, the user's UID and
their first and last name.

11
00:00:43.494 --> 00:00:45.240
And it comes back as one big result set.

12
00:00:46.320 --> 00:00:50.240
So anytime I need to get data, since it's
all denormalized I have to query and

13
00:00:50.240 --> 00:00:51.580
combine it all together.

14
00:00:53.010 --> 00:00:57.817
With no SQL, depending on your use case,
this is a lot different.

15
00:00:57.817 --> 00:01:01.881
In the same way where you saw
that I queried to get that user,

16
00:01:01.881 --> 00:01:06.616
it's very common to say, all right,
when I have a user's expense.

17
00:01:06.616 --> 00:01:11.012
Or when I go to expenses,
instead of just putting the UID for user,

18
00:01:11.012 --> 00:01:16.690
I'm gonna put the whole user object in
there or things that I feel that I need.

19
00:01:16.690 --> 00:01:19.960
I've first written there twice,
should be first and last.

20
00:01:19.960 --> 00:01:24.370
When you look at that, a lot of people
who are used to very highly normalized

21
00:01:24.370 --> 00:01:27.740
structures are like, whoa,
that's duplicated data.

22
00:01:29.050 --> 00:01:33.807
What happens when David needs to move
from Washington DC to New York City,

23
00:01:33.807 --> 00:01:35.659
do I have to update all that?

24
00:01:35.659 --> 00:01:37.811
And the answer is, well it depends.

25
00:01:37.811 --> 00:01:43.671
And a lot of systems,
how often is someone moving cities?

26
00:01:43.671 --> 00:01:46.383
So how often is someone
updating their profile?

27
00:01:46.383 --> 00:01:49.763
So in cases like that where you
know that data rarely changes,

28
00:01:49.763 --> 00:01:52.626
denormalizing it tends to
be a really great option.

29
00:01:52.626 --> 00:01:55.407
Because then I don't have
to worry about querying,

30
00:01:55.407 --> 00:01:58.350
I'm still prioritizing
my reads over my writes.

31
00:01:58.350 --> 00:02:02.462
And if they do update something, I can
trigger a system known as fan out where

32
00:02:02.462 --> 00:02:06.332
I say, okay, let me find all their
expenses and let me update all that.

33
00:02:06.332 --> 00:02:10.096
You can do that when they update their
profiles, or you could do that even

34
00:02:10.096 --> 00:02:13.504
on like a crown job style basis
depending on what your system has.

35
00:02:13.504 --> 00:02:18.801
And this is something that's very common
in no SQL systems, is just copying data,

36
00:02:18.801 --> 00:02:23.290
but being aware of where it is by,
in this case, we have the UID.

37
00:02:23.290 --> 00:02:26.810
So at any point in time, if I need to
fan out that update, I can do that.

38
00:02:29.050 --> 00:02:33.535
And then what this allows me to do, is I
can still write a query like that where I

39
00:02:33.535 --> 00:02:37.400
can say user.uid = David 123 but
I get back the whole record.

40
00:02:37.400 --> 00:02:41.010
And so instead of doing a join,
it's all readily available for me.

41
00:02:41.010 --> 00:02:46.176
Also, another thing about
denormalization is that a lot of people,

42
00:02:46.176 --> 00:02:51.710
when they think they come on to a no
SQL database, they get kind of afraid.

43
00:02:51.710 --> 00:02:53.730
They're like,
I'm gonna have to copy data everywhere,

44
00:02:53.730 --> 00:02:55.016
I'm gonna update data everywhere.

45
00:02:55.016 --> 00:02:56.335
That's kind of frustrating.

46
00:02:56.335 --> 00:02:57.456
I'm used to normalized systems.

47
00:02:57.456 --> 00:02:58.681
I don't like that.

48
00:02:58.681 --> 00:03:02.873
Well denormalization,
tends to be most useful when a,

49
00:03:02.873 --> 00:03:09.304
data that's embedded is rarely updated,
because then it's pretty easy to manage.

50
00:03:09.304 --> 00:03:12.688
And also when you're dealing
with one to many relationships.

51
00:03:12.688 --> 00:03:18.161
Because you can do somewhat of
a join with Firestore by saying,

52
00:03:18.161 --> 00:03:23.620
okay if I have one user,
I can get many of their expenses.

53
00:03:23.620 --> 00:03:28.245
So, in this case, I'm querying for
the active users expenses, and

54
00:03:28.245 --> 00:03:33.130
I'm getting the current user with
something like Firebase off.

55
00:03:33.130 --> 00:03:37.873
And so, I can get that user information
from the database, and then because I have

56
00:03:37.873 --> 00:03:41.400
their user information,
I can create a realtime listener.

57
00:03:42.620 --> 00:03:45.190
And then now I can merge
those two things together.

58
00:03:45.190 --> 00:03:49.327
So those are two separate calls,
but I have authentication

59
00:03:49.327 --> 00:03:53.890
information from one and
I can combine their expenses in as well.

60
00:03:53.890 --> 00:03:56.795
So this is another way,
this works really well.

61
00:03:56.795 --> 00:04:01.920
If you have a one to many situation, this
is what I tend to do most of the time.

62
00:04:01.920 --> 00:04:04.510
When it's say, we just get something.

63
00:04:04.510 --> 00:04:08.541
I have the active user,
I have a way to get their data.

64
00:04:08.541 --> 00:04:12.745
If it's one user, many objects,
that's pretty easy to put together.

65
00:04:12.745 --> 00:04:17.321
Denormalization tends to be more important
when you have a many to many situation.

66
00:04:17.321 --> 00:04:21.705
If a expense could have many owners and

67
00:04:21.705 --> 00:04:28.292
then I would start looking
more into embedding the dock.

68
00:04:28.292 --> 00:04:33.142
Because I would have to do a multiway
read to get all of that user's

69
00:04:33.142 --> 00:04:37.919
information back because they're
located in separate spots.

70
00:04:37.919 --> 00:04:43.375
But if I know that I'll have two users per
expense I can just embed them in there and

71
00:04:43.375 --> 00:04:44.900
there's no join.

72
00:04:44.900 --> 00:04:46.414
So many to many relationships,

73
00:04:46.414 --> 00:04:50.123
I find that that tends to be a good place
to denormalize and copy your data over.

74
00:04:50.123 --> 00:04:54.165
One to many you can get away
a lot with just saying, hey,

75
00:04:54.165 --> 00:04:57.440
I'm gonna do something that's like a join.

76
00:04:57.440 --> 00:05:00.120
So it's important to take away here
is that a lot of people think like

77
00:05:00.120 --> 00:05:00.647
when I join.

78
00:05:00.647 --> 00:05:04.323
Or when I start with a no SQL database,
I have to let go of all these normalized

79
00:05:04.323 --> 00:05:07.480
standards that I have or
all these things I'm used to.

80
00:05:07.480 --> 00:05:08.593
And to a degree, yes,

81
00:05:08.593 --> 00:05:12.774
you have a whole new world of flexibility
where you don't need all the same columns.

82
00:05:12.774 --> 00:05:16.044
You don't need to follow a very
strict data structure anymore.

83
00:05:16.044 --> 00:05:18.002
So use that to your advantage.

84
00:05:18.002 --> 00:05:20.227
However, it doesn't mean
that all of a sudden,

85
00:05:20.227 --> 00:05:23.610
data just has to be copied everywhere,
and everything needs to do that.

86
00:05:23.610 --> 00:05:29.021
It's more of a spectrum, where you say,
okay, I'm going keep these separate and

87
00:05:29.021 --> 00:05:33.134
I'll do a query for these, but
these ones I'm gonna embed on.

88
00:05:33.134 --> 00:05:38.409
So it's more of a spectrum rather than
just saying, now that I'm using no SQL,

89
00:05:38.409 --> 00:05:42.287
I'm gonna go all the way with
denormalizing everything.

90
00:05:44.551 --> 00:05:48.281
And one of the things that's gonna help
out a lot with denormalization and

91
00:05:48.281 --> 00:05:51.220
just with querying in
general is hierarchy.

92
00:05:51.220 --> 00:05:56.103
So, in Firestore, as we've seen,
we have collections and

93
00:05:56.103 --> 00:06:02.450
documents, but documents can
have sub-collections themselves.

94
00:06:02.450 --> 00:06:07.965
And so, this right here creates a very
logical path for us to read data, and

95
00:06:07.965 --> 00:06:13.325
it makes it easier to read data without
writing any queries whatsoever.

96
00:06:13.325 --> 00:06:17.645
So, let's say within the users collection,
I decided,

97
00:06:17.645 --> 00:06:22.333
okay I don't want to store expenses
out as its own collection.

98
00:06:22.333 --> 00:06:27.008
I'm going to embed expenses
within each user's document.

99
00:06:27.008 --> 00:06:31.540
So I would have this new path
where I'd say slash users,

100
00:06:31.540 --> 00:06:35.218
slash the user ID, but
then slash expenses.

101
00:06:35.218 --> 00:06:39.456
And so now if I want to get us a user's
expenses, I can do that without writing

102
00:06:39.456 --> 00:06:42.516
a single query because of
the way I structured my data.

103
00:06:42.516 --> 00:06:47.147
And it's this kind of hierarchy is
really the hallmark of no SQL databases.

104
00:06:47.147 --> 00:06:53.589
I'm able to find paths that kind of
do my most common queries for me.

105
00:06:53.589 --> 00:06:56.729
And since Firestore does
have limited queries,

106
00:06:56.729 --> 00:07:01.180
this is also one less field that I
have to worry about restricting on.

107
00:07:01.180 --> 00:07:04.320
So I don't have to say where
the UID is equal to this.

108
00:07:04.320 --> 00:07:08.665
I can just say hey, UID is already
taken care of in the path for me,

109
00:07:08.665 --> 00:07:12.854
I now have two more fields that I
get to do composite queries by.

110
00:07:14.442 --> 00:07:16.168
And this is really what
the query looks like.

111
00:07:16.168 --> 00:07:23.150
it's just get me David 123's expenses,
and queries in Firestore are shallow.

112
00:07:23.150 --> 00:07:27.415
So just because I'm getting back a user
document doesn't mean I'm getting back all

113
00:07:27.415 --> 00:07:28.620
of their queries.

114
00:07:28.620 --> 00:07:31.364
If I get back a user document,
I just get that document.

115
00:07:31.364 --> 00:07:33.631
If I want to get their queries,

116
00:07:33.631 --> 00:07:37.566
I will need to further nest
down like I'm doing here.

117
00:07:37.566 --> 00:07:42.157
Yes, so yeah, you only get the document,
you do not get it sub collection.

118
00:07:42.157 --> 00:07:46.689
So that allows you to follow the structure
without worrying about just vacuuming up

119
00:07:46.689 --> 00:07:47.799
all the data below.

120
00:07:47.799 --> 00:07:49.350
The real time database and

121
00:07:49.350 --> 00:07:52.531
the other database we have
does not work the same way.

122
00:07:52.531 --> 00:07:54.819
Queries are deep.

123
00:07:54.819 --> 00:07:59.013
So in the way that if you query one thing,
you do get all of the data underneath it.

124
00:07:59.013 --> 00:08:02.697
So it has a bit of a different data
structuring pattern where you wanna keep

125
00:08:02.697 --> 00:08:04.489
things flat as possible at the top.

126
00:08:06.675 --> 00:08:09.740
But now if we break everything out though,

127
00:08:09.740 --> 00:08:13.927
into if we embed use expenses
as a sub collection of users.

128
00:08:13.927 --> 00:08:18.274
What if we still have a requirement in our
document or within our app to say, well,

129
00:08:18.274 --> 00:08:21.590
I still need to see all
the expenses across all users.

130
00:08:21.590 --> 00:08:25.113
Would I have to query across all,
get all my user IDs and

131
00:08:25.113 --> 00:08:29.412
then create a bunch of separate
queries and put them all together?

132
00:08:29.412 --> 00:08:33.657
Well, Firestore knows that
this is a big issue, so

133
00:08:33.657 --> 00:08:38.420
if we're using this common
expenses sub-collection.

134
00:08:38.420 --> 00:08:41.508
Where we have David 123 has expenses and

135
00:08:41.508 --> 00:08:45.807
Darla 999 has expenses,
and Juan 217 has expenses.

136
00:08:45.807 --> 00:08:51.689
Well, couldn't I just query across
all sub-collections called expenses?

137
00:08:51.689 --> 00:08:56.278
And that's exactly what you can
do with a collection group query?

138
00:08:56.278 --> 00:09:02.091
So right here you can see we're using
this function called collection group and

139
00:09:02.091 --> 00:09:06.355
it's just has one field or
one path on it called expenses.

140
00:09:06.355 --> 00:09:10.506
And it will look across the database for
any sub-collection named expenses, and

141
00:09:10.506 --> 00:09:12.560
it will perform a query on it.

142
00:09:12.560 --> 00:09:15.260
So by the fact that I'm
structuring my data this way,

143
00:09:15.260 --> 00:09:17.600
I'm getting a lot of
the best of both worlds.

144
00:09:17.600 --> 00:09:22.208
I can get all of my user data back if
I want, or I can get all collections

145
00:09:22.208 --> 00:09:26.838
just for one user with a simple read
by following the hierarchy path.

146
00:09:26.838 --> 00:09:31.179
Or I can get all expenses back for
all users with

147
00:09:31.179 --> 00:09:36.310
collection group queries,
so allows me to do either.

148
00:09:36.310 --> 00:09:39.645
And collection group queries, also,
they work just like other queries.

149
00:09:39.645 --> 00:09:42.602
You can continue to restrict,
and do other things.

150
00:09:42.602 --> 00:09:47.270
So in this case, I can say hey,
get me the category,

151
00:09:47.270 --> 00:09:53.535
give me any expenses across all users
where category contains food and

152
00:09:53.535 --> 00:09:57.510
the cost is between $200 and $210.

153
00:09:57.510 --> 00:10:02.040
So that allows me to do
both of those things.

154
00:10:02.040 --> 00:10:05.150
So, I'm gonna show off how
collection group queries work.

