WEBVTT

1
00:00:01.050 --> 00:00:02.591
All right, which one is this?

2
00:00:02.591 --> 00:00:07.980
Yes, so this one right here,
this is a very advanced use case.

3
00:00:07.980 --> 00:00:12.606
Let's say the user has a feature
called budgets, which I kind of talked

4
00:00:12.606 --> 00:00:17.018
about earlier, where multiple
users can collaborate on a budget.

5
00:00:17.018 --> 00:00:20.891
And so budgets have a budget ID, but also,

6
00:00:20.891 --> 00:00:26.174
how through the UI would I be
able to add a user to my budget?

7
00:00:26.174 --> 00:00:28.390
I would need to know their UID, and

8
00:00:28.390 --> 00:00:31.912
how would I get their UID
from the client application?

9
00:00:31.912 --> 00:00:36.382
Well my security rules won't allow
it because I say only users can know

10
00:00:36.382 --> 00:00:38.978
information about their own profiles.

11
00:00:38.978 --> 00:00:44.763
So how could I ever as a user say,
hey, I'm gonna enter in their email,

12
00:00:44.763 --> 00:00:50.640
I want to get their UID and
say that they can collaborate with me?

13
00:00:50.640 --> 00:00:54.647
So instead of opening up access
to a user's information,

14
00:00:54.647 --> 00:00:58.652
I can use cloud functions to say,
write a request to create

15
00:00:58.652 --> 00:01:03.510
a subcollection within the budget
called collaborator requests.

16
00:01:03.510 --> 00:01:07.842
And then it's going to have
a document ID of the email.

17
00:01:07.842 --> 00:01:12.155
And then when this new
email document is created,

18
00:01:12.155 --> 00:01:18.531
I can look up the user with the admin
SDK to see, hey, what is their email?

19
00:01:18.531 --> 00:01:21.780
And then from there,
I can say, hey, they exist,

20
00:01:21.780 --> 00:01:24.363
that's great, let me add them for you.

21
00:01:24.363 --> 00:01:26.800
So the admin SDK,
it's a trusted environment or

22
00:01:26.800 --> 00:01:30.437
the functions are a trusted environment
that are running the admin SDK.

23
00:01:30.437 --> 00:01:34.698
It is handling all of
the important trusted actions

24
00:01:34.698 --> 00:01:39.440
that the client users
shouldn't have access to.

25
00:01:39.440 --> 00:01:43.471
So this way I can still add users, I just
say, request that I have a collaborator,

26
00:01:43.471 --> 00:01:47.460
that function will trigger and say,
of course, let me add that for you.

27
00:01:47.460 --> 00:01:52.769
And then that gets added into,
not into collaboratorRequests,

28
00:01:52.769 --> 00:01:56.448
will write it into
the collaborators field.

29
00:01:56.448 --> 00:01:59.806
And then that new user will be
able to access and do everything.

30
00:01:59.806 --> 00:02:04.708
So it automatically handles some of
the stuff for role-based security as well.

31
00:02:04.708 --> 00:02:11.436
And the way that that would work is
is that let's get the email first,

32
00:02:11.436 --> 00:02:16.460
so the email,
it's going to be context.params.

33
00:02:16.460 --> 00:02:21.484
So we have the email, and we wanna

34
00:02:21.484 --> 00:02:27.231
write to /budgets/{budgetId}.

35
00:02:27.231 --> 00:02:31.738
And this is gonna be a sub collection
of collaborators, collaborators, and

36
00:02:31.738 --> 00:02:33.920
it's going to be keyed off the UID.

37
00:02:33.920 --> 00:02:39.734
So this way I can write a security rule
that says, hey, we find the collaborators

38
00:02:39.734 --> 00:02:44.970
by their UID, and it's really easy
to match on security roles this way.

39
00:02:45.990 --> 00:02:48.513
So I need a document to be
able to write to this place.

40
00:02:48.513 --> 00:02:56.943
So I'm gonna say uidDoc =
firestore.collection('budgets'),

41
00:02:56.943 --> 00:03:03.129
but how do I know what
the document ID is or budget ID?

42
00:03:03.129 --> 00:03:04.302
I can get that from params.

43
00:03:06.698 --> 00:03:10.512
And say, .doc(budgetId), and

44
00:03:10.512 --> 00:03:15.480
then .collection('collaborators').

45
00:03:17.984 --> 00:03:21.375
So this is the UID doc.

46
00:03:21.375 --> 00:03:23.531
I need to get the UID, though, so

47
00:03:23.531 --> 00:03:28.890
the way I can do that is actually
with the admin SDK for Firebase auth.

48
00:03:28.890 --> 00:03:33.314
So doing that I can say,
auth = getAuth();.

49
00:03:35.410 --> 00:03:39.879
And one thing that I accidentally glossed
over I wanna talk about is that functions

50
00:03:39.879 --> 00:03:43.180
actually carries a lot of
environment variables for you.

51
00:03:43.180 --> 00:03:47.100
So I can call the functions SDK,
call this config function.

52
00:03:47.100 --> 00:03:51.541
And at runtime it populates all of the,
like a service account and

53
00:03:51.541 --> 00:03:55.514
all this important information
into the Firebase field.

54
00:03:55.514 --> 00:04:00.211
So I can actually initialize a Firebase
app without having to know what my

55
00:04:00.211 --> 00:04:02.836
security account is or setting that up.

56
00:04:02.836 --> 00:04:07.007
We can do that on your behalf,
you just tap into this function, and

57
00:04:07.007 --> 00:04:09.406
then it's properly authenticated.

58
00:04:11.922 --> 00:04:15.003
So now that I have the admin SDK,

59
00:04:15.003 --> 00:04:20.725
I can say auth.getUserByEmail,
so I can get their email.

60
00:04:22.334 --> 00:04:25.641
And get the result back.

61
00:04:29.075 --> 00:04:33.779
And this comes back as a user record,
so I'll just write userRecord.

62
00:04:33.779 --> 00:04:38.880
And then now I can call .doc of the user

63
00:04:38.880 --> 00:04:43.514
record, no, userRecord.uid.

64
00:04:45.837 --> 00:04:50.851
So I have this uidDoc, and so from here,

65
00:04:50.851 --> 00:04:54.832
I can just say uidDoc.set, and

66
00:04:54.832 --> 00:04:59.414
I'll set the role to collaborator.

67
00:05:03.173 --> 00:05:07.142
Now, something that's actually
really important to understand with

68
00:05:07.142 --> 00:05:10.644
functions are is that functions
need to know when to tear down,

69
00:05:10.644 --> 00:05:13.320
how long should they be running for?

70
00:05:13.320 --> 00:05:16.922
So what I did right here is when I said,
await batch.commit,

71
00:05:16.922 --> 00:05:20.248
one of the things I think it
still works for this case, but

72
00:05:20.248 --> 00:05:23.522
what I should really say
is return batch.commit().

73
00:05:23.522 --> 00:05:26.977
Because it's returning the promise,
and once that promise resolves,

74
00:05:26.977 --> 00:05:30.530
functions goes, I have no other
work to do, let me tear down.

75
00:05:30.530 --> 00:05:32.136
So that's less time they're running,

76
00:05:32.136 --> 00:05:34.740
that's less time that you're
being billed for and everything.

77
00:05:34.740 --> 00:05:39.284
So that's a best practice is to always
return a promise from a function,

78
00:05:39.284 --> 00:05:41.965
unless you're doing an HTTPS function and

79
00:05:41.965 --> 00:05:46.599
there's no returning a promise there,
it's just request-response.

80
00:05:46.599 --> 00:05:49.550
So in this case I can return the set, and

81
00:05:49.550 --> 00:05:53.229
that tells me that I'm
done with this function.

82
00:05:55.020 --> 00:05:56.634
So now let's go and test this.

83
00:05:56.634 --> 00:05:57.486
So I'm gonna save.

84
00:05:57.486 --> 00:05:59.749
And one thing to notice too
is this whole entire time,

85
00:05:59.749 --> 00:06:02.023
I'm not tearing down the emulator and
re-running.

86
00:06:02.023 --> 00:06:04.755
When I write my code hot
reloads everything for me.

87
00:06:08.411 --> 00:06:11.850
Let me clear, no, let me clear this.

88
00:06:14.286 --> 00:06:18.713
All right, so
I'm going to create a budget.

89
00:06:18.713 --> 00:06:24.221
So budgets, I'll create a budget ID,
I'll call it good_budget.

90
00:06:24.221 --> 00:06:29.690
Name, don't really need a name,
but Good Budget, Save.

91
00:06:30.690 --> 00:06:33.424
Now within good_budget, I'm gonna copy and

92
00:06:33.424 --> 00:06:37.783
paste it because I know I'm gonna
get it wrong, collaboratorRequests.

93
00:06:39.854 --> 00:06:43.410
Next, and so
the document ID is going to be an email.

94
00:06:43.410 --> 00:06:48.369
So david@example.com, and I can just, for

95
00:06:48.369 --> 00:06:54.358
data duplication sake,
just put it in there as a field.

96
00:06:54.358 --> 00:07:01.387
Now when I save, one second,
I'm gonna go in and go, there it is.

97
00:07:01.387 --> 00:07:04.814
There's collaboratorRequests,
and if I go to Logs,

98
00:07:04.814 --> 00:07:07.205
you're gonna see we have it in there.

99
00:07:07.205 --> 00:07:12.505
Say go to Logs, we got an error,
there is no user record corresponding.

100
00:07:12.505 --> 00:07:16.619
Well, that's not great because,
well, the user doesn't exist, so

101
00:07:16.619 --> 00:07:18.139
it's not able to do that.

102
00:07:18.139 --> 00:07:22.974
So something I should do is I should
try and catch that, and if it doesn't

103
00:07:22.974 --> 00:07:27.668
exist say, maybe I could send an email
out to invite that user to join.

104
00:07:27.668 --> 00:07:31.576
In this case, I'm going to keep
this as is just to show it working.

105
00:07:31.576 --> 00:07:38.389
And I'm going to grab a user,
let's invite this user, this uid.

106
00:07:38.389 --> 00:07:39.640
Or what's their email, actually?

107
00:07:39.640 --> 00:07:43.885
I want this email, let's see, this one.

108
00:07:43.885 --> 00:07:48.563
And let's go into budgets,
collaboratorsRequests,

109
00:07:48.563 --> 00:07:50.656
we'll add another one.

110
00:07:53.742 --> 00:07:57.092
Save, and then now we have that.

111
00:07:57.092 --> 00:07:59.159
We go into collaboratorRequests,

112
00:07:59.159 --> 00:08:01.727
it automatically popped
up with collaborators.

113
00:08:01.727 --> 00:08:04.932
That's the same UID, and
the role is collaborator.

114
00:08:04.932 --> 00:08:07.938
And so now that would work
with our security rules.

115
00:08:07.938 --> 00:08:13.126
So in the case that if the user was not
authenticated, what I'd really wanna

116
00:08:13.126 --> 00:08:19.025
do here is try, Catch the error,

117
00:08:19.025 --> 00:08:24.004
and right now I'll return Promise.resolve

118
00:08:24.004 --> 00:08:28.333
to make sure that it knows to tear down.

119
00:08:28.333 --> 00:08:31.970
But what I could really do is
say send an email to join.

