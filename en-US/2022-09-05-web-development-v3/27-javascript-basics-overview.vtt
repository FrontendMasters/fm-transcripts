WEBVTT

1
00:00:00.599 --> 00:00:04.750
So let's write our very first bit of code.

2
00:00:04.750 --> 00:00:07.042
We're gonna write JavaScript.

3
00:00:07.042 --> 00:00:11.709
JavaScript is a simple language
to start with because it's

4
00:00:11.709 --> 00:00:14.424
what's called single threaded.

5
00:00:14.424 --> 00:00:17.311
It means that only one thing
is ever happening at a time.

6
00:00:17.311 --> 00:00:22.056
You can never have two things happening at
the same time unlike something like Go,

7
00:00:22.056 --> 00:00:26.073
right, which has this ability to
split out and be multi-threaded.

8
00:00:26.073 --> 00:00:31.126
It's powerful, but that power comes
at the cost of being complicated.

9
00:00:31.126 --> 00:00:33.577
So that's why I like
teaching JavaScript first.

10
00:00:35.606 --> 00:00:39.323
So in general, it means that it goes line
by line, which we would expect, right?

11
00:00:39.323 --> 00:00:42.372
It executes Line 1,
then Line 2, then Line 3.

12
00:00:42.372 --> 00:00:45.061
So let's take an example here.

13
00:00:45.061 --> 00:00:49.418
You have a variable here that we've
created called monthly rent, right?

14
00:00:49.418 --> 00:00:51.740
And we've just assigned that to be $500.

15
00:00:51.740 --> 00:00:54.635
That's probably a bit
low [LAUGH] these days,

16
00:00:54.635 --> 00:00:58.073
depending on where you live,
certainly in Seattle.

17
00:00:58.073 --> 00:01:02.556
And then if we wanted to calculate what
the yearly rent would be, we'd say,

18
00:01:02.556 --> 00:01:05.301
const yearlyRent = monthlyRent times 12.

19
00:01:05.301 --> 00:01:06.828
I think that makes sense.

20
00:01:06.828 --> 00:01:11.571
The asterisk here represents
multiplication in JavaScript.

21
00:01:11.571 --> 00:01:14.249
And then, if I wanna show that
down here the results, all I

22
00:01:14.249 --> 00:01:17.926
do is this console log function, which
we'll talk about how that works later.

23
00:01:17.926 --> 00:01:21.130
But just for now,
know that if you put console.log(), and

24
00:01:21.130 --> 00:01:24.779
then anything between the parentheses,
it's gonna get displayed.

25
00:01:24.779 --> 00:01:28.276
That's enough for now and
then we'll talk about that later.

26
00:01:28.276 --> 00:01:33.027
So 500 times 12 is 6000, right?

27
00:01:33.027 --> 00:01:36.169
So that's what this number is here.

28
00:01:36.169 --> 00:01:38.986
You might ask what this undefined is?

29
00:01:38.986 --> 00:01:45.250
It's just a byproduct of the way that
this particular little widget is working.

30
00:01:45.250 --> 00:01:46.914
It actually just returns
whatever the last line is.

31
00:01:46.914 --> 00:01:50.892
So if I put lol here, something like that,
it'll just be that last line.

32
00:01:50.892 --> 00:01:54.693
So, in other words, never worry about
the last line in any of these things.

33
00:01:57.177 --> 00:02:04.026
Okay, So this is called a variable.

34
00:02:04.026 --> 00:02:08.501
If you've taken algebra, you've used
words to represent numbers before.

35
00:02:08.501 --> 00:02:11.107
This is just where we're
storing something, right?

36
00:02:11.107 --> 00:02:16.522
So we have this number of 500, and we're
storing that inside of this variable here.

37
00:02:18.309 --> 00:02:22.900
Const is a reserved word
in JavaScript that's

38
00:02:22.900 --> 00:02:27.851
just denoting that this is
going to be a variable.

39
00:02:27.851 --> 00:02:30.164
In particular, it's the type of
variable that doesn't change.

40
00:02:30.164 --> 00:02:35.661
So if I could try and say here,
monthlyRent = 1, it's gonna say,

41
00:02:35.661 --> 00:02:41.075
hey, you can't reassign this
because it's a constant, right?

42
00:02:41.075 --> 00:02:43.619
That's what constant's for.

43
00:02:43.619 --> 00:02:48.155
If you wanna have something that's
what we call mutable or changeable.

44
00:02:48.155 --> 00:02:54.685
Mutable is just the stupid computer
science term that means it's changeable.

45
00:02:54.685 --> 00:02:58.043
You say let.

46
00:02:58.043 --> 00:03:00.083
And let is just the way that you say like,

47
00:03:00.083 --> 00:03:02.367
I have a variable here
it might change later.

48
00:03:02.367 --> 00:03:08.436
If you have const here you say, I have
a variable here, it will not change later.

49
00:03:08.436 --> 00:03:11.492
I tend to use const by default.

50
00:03:11.492 --> 00:03:16.099
You could use let, there's lots of
people out there that prefer let.

51
00:03:16.099 --> 00:03:18.624
You will also see frequently var as well,

52
00:03:18.624 --> 00:03:21.376
this is just the old way
of doing JavaScript.

53
00:03:21.376 --> 00:03:25.445
You shouldn't use var anymore, but
you might see it in Stack Overflow or

54
00:03:25.445 --> 00:03:26.723
something like that.

55
00:03:26.723 --> 00:03:29.481
Const or
let are the two ways of doing that now.

56
00:03:29.481 --> 00:03:34.151
&gt;&gt; When did people start doing var,
I mean, not using var and

57
00:03:34.151 --> 00:03:36.068
like constant and let?

58
00:03:36.068 --> 00:03:37.587
&gt;&gt; 2015.

59
00:03:37.587 --> 00:03:45.497
[LAUGH] So in 2015 we got a big
revision of JavaScript called ES6.

60
00:03:45.497 --> 00:03:49.307
ES stands for ECMAScript, which is
the technical name of what JavaScript is,

61
00:03:49.307 --> 00:03:51.633
cuz JavaScript is
a trademark owned by Oracle.

62
00:03:51.633 --> 00:03:56.549
And they do not lease that to
the founding body of JavaScript, so

63
00:03:56.549 --> 00:04:00.192
they use the termECMAScript,
which stands for

64
00:04:00.192 --> 00:04:04.126
a European Computer
Manufacturing Association.

65
00:04:04.126 --> 00:04:05.716
But they've since dropped that now.

66
00:04:05.716 --> 00:04:08.434
Now, literally the name
of the company is ACMA.

67
00:04:08.434 --> 00:04:11.823
Because it's not the European computer,
they don't do anything with that anymore.

68
00:04:11.823 --> 00:04:14.763
It's actually just a standardization body.

69
00:04:14.763 --> 00:04:19.144
And they've standardize a bunch of things,
one of which is JavaScript.

70
00:04:19.144 --> 00:04:25.404
So ES6 came out in 2015,
that's where const and let came from.

71
00:04:25.404 --> 00:04:27.752
Now they release new versions
of JavaScript every year.

72
00:04:32.331 --> 00:04:33.863
By the way, it's not incorrect to say var.

73
00:04:33.863 --> 00:04:38.360
You can totally just continue
doing var forever, it would work.

74
00:04:38.360 --> 00:04:41.733
It's not gonna stop working.

75
00:04:41.733 --> 00:04:45.153
It has some weird things that it does
that you wouldn't expect in const and

76
00:04:45.153 --> 00:04:47.980
let reined that in to make it
more predictable or intuitive.

77
00:04:47.980 --> 00:04:48.577
Let's go with that.

78
00:04:48.577 --> 00:04:49.960
It makes it more intuitive.

79
00:04:54.454 --> 00:04:56.651
Yeah, sometimes you'll see like
this gets into a weird state,

80
00:04:56.651 --> 00:04:57.676
like missing variable name.

81
00:04:57.676 --> 00:05:00.012
I don't know what happened here.

82
00:05:00.012 --> 00:05:02.075
Yeah, just a byproduct of like,

83
00:05:02.075 --> 00:05:06.735
this code is actually executing live
on the fly and inside of your browser.

84
00:05:10.099 --> 00:05:15.233
So another thing you might notice here
is how these variables are called.

85
00:05:15.233 --> 00:05:17.805
I squished the words together.

86
00:05:17.805 --> 00:05:21.098
This is called camel casing,
in case you're wondering.

87
00:05:21.098 --> 00:05:25.224
Cuz it's like a camel where there's
the bumps on the back of the camel, right?

88
00:05:25.224 --> 00:05:27.375
These variable names have to be one word,
right?

89
00:05:27.375 --> 00:05:30.165
So if we wanna have multiple
words in a variable name,

90
00:05:30.165 --> 00:05:32.093
we have to squish them all together.

91
00:05:32.093 --> 00:05:35.739
And the way by convention that most
people do that in JavaScript is

92
00:05:35.739 --> 00:05:36.877
with camel casing.

93
00:05:36.877 --> 00:05:42.129
Technically you can do,
I think this is called snake casing.

94
00:05:42.129 --> 00:05:45.474
You'll see a lot of other
programming languages do

95
00:05:45.474 --> 00:05:47.665
it this way with the underscore.

96
00:05:47.665 --> 00:05:50.105
It's valid JavaScript,
you totally can, but

97
00:05:50.105 --> 00:05:52.606
people will know that
you're not a JavaScript.

98
00:05:52.606 --> 00:05:55.682
No one writes JavaScript this way,
everyone uses camel case.

99
00:05:55.682 --> 00:05:58.014
So just go ahead and stick to camel case.

100
00:06:01.912 --> 00:06:09.379
Okay, another thing is,
not all variable names are okay.

101
00:06:09.379 --> 00:06:13.424
So I can't say const const equals 5,
right?

102
00:06:13.424 --> 00:06:16.084
This const here is a reserved word, right?

103
00:06:16.084 --> 00:06:18.827
Because it obviously it means
that this is a variable, right?

104
00:06:18.827 --> 00:06:21.253
So it's gonna be like,
I don't understand this, you broke it.

105
00:06:21.253 --> 00:06:28.763
So I can't do let, I can't do for,
I can't do var, I can't do if, right?

106
00:06:28.763 --> 00:06:31.848
These are all significant words
in the JavaScript grammar.

107
00:06:31.848 --> 00:06:34.412
So it won't let you use
those as variable names.

108
00:06:34.412 --> 00:06:38.848
So I'm just trying to head off some of the
things that I expect people to run into.

109
00:06:38.848 --> 00:06:42.606
And this one of the things that when I was
getting started in programming I was like,

110
00:06:42.606 --> 00:06:44.231
why can't I call this var, right?

111
00:06:44.231 --> 00:06:48.416
I wanna call this var but it won't let me.

112
00:06:48.416 --> 00:06:50.122
That's why.

113
00:06:52.345 --> 00:06:54.560
Let's talk about the semicolon
versus a second.

114
00:06:54.560 --> 00:06:58.157
That's just like we saw in CSS where it's
like a period at the end of the sentence.

115
00:06:58.157 --> 00:07:00.498
You are saying, I am done with this.

116
00:07:00.498 --> 00:07:03.118
Technically in JavaScript
they are all optional.

117
00:07:06.718 --> 00:07:08.017
So this actually works.

118
00:07:08.017 --> 00:07:10.690
You can leave off all the semicolons and
that's fine.

119
00:07:10.690 --> 00:07:14.253
There are people out there
that never write semicolons.

120
00:07:14.253 --> 00:07:15.481
I don't care.

121
00:07:15.481 --> 00:07:18.542
[LAUGH] People love to argue
about these kinds of things, and

122
00:07:18.542 --> 00:07:21.971
they'll have like these holy wars of like,
we should use commas,

123
00:07:21.971 --> 00:07:24.439
or we should use semicolons and
we shouldn't.

124
00:07:24.439 --> 00:07:25.961
I really just don't care.

125
00:07:27.627 --> 00:07:31.018
You're welcome to form an opinion on it.

126
00:07:31.018 --> 00:07:34.830
I'm putting them in because I think it
makes things a little bit more clear for

127
00:07:34.830 --> 00:07:38.954
students learning of like this is a full
statement, full period, and a sentence.

128
00:07:38.954 --> 00:07:41.294
Technically you can have multiple
statements on a line, right?

129
00:07:41.294 --> 00:07:44.659
This is var because I have
these semicolons here.

130
00:07:44.659 --> 00:07:46.503
You would never do this, by the way.

131
00:07:46.503 --> 00:07:48.279
Absolutely never do this.

132
00:07:48.279 --> 00:07:50.963
Every statement is on its own line,
period, end of sentence.

133
00:07:50.963 --> 00:07:53.172
Never do anything besides that.

134
00:07:53.172 --> 00:07:58.419
But I am telling you that it is
possible because of semicolons.

135
00:07:58.419 --> 00:08:00.475
If you want an opinion
to go with right now,

136
00:08:00.475 --> 00:08:04.432
technically there's some weird things you
can run into that are extremely rare.

137
00:08:04.432 --> 00:08:07.534
That putting semicolons will
prevent you from ever hitting.

138
00:08:07.534 --> 00:08:13.223
So it's maybe just the tiny tiniest
bit more safe to do it this way.

139
00:08:13.223 --> 00:08:16.437
But at that after that point it's up to
you if you wanna put semicolons or not.

140
00:08:16.437 --> 00:08:18.321
I forget them all the time
to be honest with you.

141
00:08:21.257 --> 00:08:29.226
Okay, I think that's, Most of it.

142
00:08:29.226 --> 00:08:31.310
What's fun about this now
is I have this formula.

143
00:08:31.310 --> 00:08:36.279
So let's say they raised my rent and
now it's 600 a month.

144
00:08:36.279 --> 00:08:38.532
I just have to change monthly rent.

145
00:08:38.532 --> 00:08:42.114
And because this yearly rent is based on
monthly rent, now let's say this number

146
00:08:42.114 --> 00:08:45.447
just changed, and then have to go down and
change the monthly rent as well.

147
00:08:45.447 --> 00:08:50.149
I could have calculated this in
my head and say this is 7200.

148
00:08:50.149 --> 00:08:55.283
But now if they raise my rent again,
6550, this is now not right, right?

149
00:08:55.283 --> 00:08:57.748
Yearly rent is now incorrect.

150
00:08:57.748 --> 00:09:04.941
By making this a formula,
Now I'm guaranteed that monthly

151
00:09:04.941 --> 00:09:08.221
rent is always going to be correct as
long as I have the correct monthly rate.

152
00:09:17.824 --> 00:09:18.838
Cool.

153
00:09:22.451 --> 00:09:24.414
So, right now we have
this console log here.

154
00:09:24.414 --> 00:09:26.515
This is logging into our
little results pane.

155
00:09:26.515 --> 00:09:32.875
But if you do this in your code, right, so
you actually have your JavaScript running.

156
00:09:32.875 --> 00:09:36.517
This is JavaScript console here.

157
00:09:36.517 --> 00:09:41.468
So, unfortunately it's really littered
because this evaluation software that I'm

158
00:09:41.468 --> 00:09:43.648
using just dumps out a bunch of stuff.

159
00:09:43.648 --> 00:09:46.236
It's called Eclipse.

160
00:09:46.236 --> 00:09:46.850
But let's see.

161
00:09:46.850 --> 00:09:49.415
You can just trash all that for
the moment.

162
00:09:51.196 --> 00:09:56.030
And now if I change this,
it actually does intercept it.

163
00:09:56.030 --> 00:09:57.002
I didn't realize that.

164
00:09:57.002 --> 00:10:03.376
Okay, but typically it would just dump it
out here into your JavaScript console.

165
00:10:03.376 --> 00:10:08.068
So if I say like, let monthlRent = 5,

166
00:10:08.068 --> 00:10:12.075
let's make this a bit bigger.

167
00:10:12.075 --> 00:10:13.357
It already exists!

168
00:10:13.357 --> 00:10:17.557
So I have monthly rent here,
which is we've set here.

169
00:10:17.557 --> 00:10:21.399
And monthly rent times 12, right, so

170
00:10:21.399 --> 00:10:26.489
I use this all the time to just open and
try things out.

171
00:10:26.489 --> 00:10:31.191
It's kind of fun, it's called a REPL,
which stands for, man,

172
00:10:31.191 --> 00:10:33.925
I can't remember what REPL stands for.

173
00:10:33.925 --> 00:10:42.044
Read execute something loop.

174
00:10:42.044 --> 00:10:44.097
I forgot what the P stands for.

175
00:10:44.097 --> 00:10:45.973
&gt;&gt; I think eval print loop.

176
00:10:45.973 --> 00:10:47.287
&gt;&gt; Print, eval.

177
00:10:47.287 --> 00:10:49.628
Yeah, close enough, read eval print loop.

178
00:10:49.628 --> 00:10:54.197
Yeah that makes sense,
which just means it's an interactive code.

179
00:10:54.197 --> 00:10:56.576
So I can put code in,
it'll immediately run it for me.

180
00:10:56.576 --> 00:10:57.364
It's kind of fun.

181
00:10:59.943 --> 00:11:02.887
And you can get there really easily
by just like saying inspect here,

182
00:11:02.887 --> 00:11:04.320
just like we were doing for that.

183
00:11:04.320 --> 00:11:06.566
And then there's a button up here for
console.

184
00:11:06.566 --> 00:11:07.628
You just click on that.

185
00:11:10.548 --> 00:11:16.674
Okay, So
let's make a little experiment folder.

186
00:11:16.674 --> 00:11:18.292
Let's do that really quick.

187
00:11:18.292 --> 00:11:20.041
I'm just gonna make a new
folder on my desktop.

188
00:11:20.041 --> 00:11:25.023
We'll call it JS Experiments.

189
00:11:25.023 --> 00:11:27.896
And I'm gonna open this in VS Code.

190
00:11:32.166 --> 00:11:34.928
Yeah, so a really easy way of doing
that is just to make the folder and

191
00:11:34.928 --> 00:11:36.345
then drag it onto the VS Code icon.

192
00:11:36.345 --> 00:11:37.893
VS Code will open the folder for you.

193
00:11:37.893 --> 00:11:40.254
So I have nothing in here at the moment.

194
00:11:40.254 --> 00:11:44.926
We'll make a new file,
we'll call it index.html.

195
00:11:45.968 --> 00:11:51.501
We'll put our HTML 5 in here,
call this JS Experiments.

196
00:11:54.180 --> 00:11:56.178
And then I just wanna make a script here.

197
00:11:56.178 --> 00:12:02.486
So script, and then you say,
source equals whatever you wanna call it.

198
00:12:02.486 --> 00:12:08.124
We'll call mine like experiments.js or
something like that.

199
00:12:08.124 --> 00:12:13.362
This right here will link out to
an external JavaScript file, right?

200
00:12:16.553 --> 00:12:21.176
Here we'll just call this the same thing,
experiments.js.

201
00:12:21.176 --> 00:12:25.570
And now I can start writing JavaScript
here that will be run in the browser.

202
00:12:27.405 --> 00:12:32.371
So you can put like a little h1 in
there just to know that you open

203
00:12:32.371 --> 00:12:34.077
the page correctly.

204
00:12:36.351 --> 00:12:42.903
And here in the experiments.js
you can just say console.log("

205
00:12:42.903 --> 00:12:48.408
hello from experiments "),
or something like that.

206
00:12:48.408 --> 00:12:53.583
And again, remember, anything that you
put into console.log(), we'll talk about

207
00:12:53.583 --> 00:12:58.072
what this is in a second, but this is
a bunch of words or string of characters.

208
00:12:59.940 --> 00:13:04.265
Now, if we open this index.html, we would
expect to see logged out in our little

209
00:13:04.265 --> 00:13:06.885
JavaScript console,
hello from experiments.

210
00:13:10.333 --> 00:13:11.672
So, let's go open it.

211
00:13:13.639 --> 00:13:18.404
So I have my desktop,
we're looking at JS Experiments,

212
00:13:18.404 --> 00:13:21.495
and I'm gonna open my index.html.

213
00:13:21.495 --> 00:13:25.382
So you can see the Hello here, we expect
that that's, what I put in my h1.

214
00:13:25.382 --> 00:13:29.544
But I feel like I look in my console,
hello from experiments.

215
00:13:31.796 --> 00:13:36.732
So if you're having a hard
time finding the dev tools,

216
00:13:36.732 --> 00:13:43.079
I think you can click Tools,
Browser Tools, Web Development Tools.

217
00:13:45.503 --> 00:13:50.263
Or like I said before, you can say, right
click, Inspect, and then go to Console.

218
00:13:52.674 --> 00:13:57.853
Or what I do by having now a recent
Mac is Option + Command + I,

219
00:13:57.853 --> 00:14:01.459
and that'll open and close your console.

220
00:14:03.714 --> 00:14:06.345
I don't remember what it is on Windows.

221
00:14:11.771 --> 00:14:16.051
Yeah, I'm gonna guess
it's Ctrl + Option + I.

222
00:14:18.177 --> 00:14:19.889
Someone's gonna say,
you crashed my computer.

223
00:14:19.889 --> 00:14:21.089
I don't know what the heck, but

224
00:14:21.089 --> 00:14:23.457
that will just be my guess of what
I would try if I was on Windows.

225
00:14:23.457 --> 00:14:24.080
What am I talking about?

226
00:14:24.080 --> 00:14:26.295
I literally have a Windows
computer right here.

227
00:14:26.295 --> 00:14:28.394
It's like I forgot.

228
00:14:28.394 --> 00:14:29.522
Ctrl + Shift + I.

229
00:14:29.522 --> 00:14:32.220
Yep, there it is.

230
00:14:32.220 --> 00:14:37.316
Ctrl + Shift + I will open your dev tools,
On Windows.

