WEBVTT

1
00:00:00.530 --> 00:00:04.817
Function is actually a mathematical term,
right?

2
00:00:04.817 --> 00:00:11.326
If you've done, Calculus before,

3
00:00:11.326 --> 00:00:18.336
you'll probably remember seeing
things like f(x) = x + 2, right?

4
00:00:18.336 --> 00:00:22.244
This is called a function in math.

5
00:00:22.244 --> 00:00:26.331
If you haven't, then you can just ignore
me for the next second and tell this for

6
00:00:26.331 --> 00:00:29.688
my people that have taken calculus before,
I did in high school.

7
00:00:29.688 --> 00:00:31.718
This is called a function, right?

8
00:00:31.718 --> 00:00:33.735
So you have x, that's a function of y.

9
00:00:33.735 --> 00:00:35.861
Sorry, basically,
the f(x) is the same thing as y.

10
00:00:35.861 --> 00:00:37.961
It's the same idea here in JavaScript,

11
00:00:37.961 --> 00:00:41.124
that given some sort of input
you can get some sort of output.

12
00:00:41.124 --> 00:00:47.379
And that's really all a function is,
given some input, it does a thing.

13
00:00:47.379 --> 00:00:52.354
So, an example here is, I have this
function called addTwo that accepts

14
00:00:52.354 --> 00:00:56.039
a number and
what it returns is that same number + 2.

15
00:00:56.039 --> 00:01:00.667
I can then call addTwo anywhere,
and I can give it something, and

16
00:01:00.667 --> 00:01:03.037
what do you think it's gonna do?

17
00:01:03.037 --> 00:01:04.979
What is final answer here going to be?

18
00:01:06.227 --> 00:01:07.745
7, right?

19
00:01:07.745 --> 00:01:14.574
Cuz it's gonna take 5,
this number here is going to be 5.

20
00:01:14.574 --> 00:01:16.819
It's gonna take 5, it's gonna add 2,
and it's gonna return that.

21
00:01:16.819 --> 00:01:22.208
So whatever returns back here is
going to be final answer, Okay?

22
00:01:22.208 --> 00:01:26.526
What happens if I do that
again underneath here?

23
00:01:26.526 --> 00:01:31.473
OtherAnswer = addTwo with,
I don't know, 10.

24
00:01:31.473 --> 00:01:37.495
And let's say, console.log(otherAnswer).

25
00:01:37.495 --> 00:01:42.874
What do you think
the second log is gonna be?

26
00:01:42.874 --> 00:01:45.134
So I've now made this reusable function,

27
00:01:45.134 --> 00:01:49.293
this compacted little bit of code that's
usable over and over and over again.

28
00:01:49.293 --> 00:01:52.538
This is a fundamental
concept of programming,

29
00:01:52.538 --> 00:01:55.873
because now we don't
have to repeat ourselves.

30
00:01:55.873 --> 00:02:00.560
We can make these like little utility
functions that can encapsulate

31
00:02:00.560 --> 00:02:04.451
some piece of logic that we
can reuse over and over again.

32
00:02:04.451 --> 00:02:07.012
Obviously, addTwo is super contrite,
right?

33
00:02:07.012 --> 00:02:10.629
I could have just done here, right?

34
00:02:10.629 --> 00:02:13.014
I could just put 5 + 2 here, right?

35
00:02:13.014 --> 00:02:14.382
And that's the same thing.

36
00:02:14.382 --> 00:02:19.165
But the concept here that I want you
to learn is that you can put logic into

37
00:02:19.165 --> 00:02:21.413
these functions and reuse them.

38
00:02:25.062 --> 00:02:31.232
So, this is called a parameter,
this number thing.

39
00:02:31.232 --> 00:02:33.632
It's things that it accepts, right?

40
00:02:33.632 --> 00:02:35.136
This here now has a bunch of parameters.

41
00:02:35.136 --> 00:02:39.797
It has firstName, lastName,
honorific, and honorific is a title,

42
00:02:39.797 --> 00:02:44.542
right, that someone has, like Doctor or
Lord or something like that.

43
00:02:44.542 --> 00:02:47.495
And then a greeting.

44
00:02:47.495 --> 00:02:49.329
And then it makes the string out of it,
right?

45
00:02:49.329 --> 00:02:52.151
So it says, greeting, honorific, lastName.

46
00:02:52.151 --> 00:02:54.577
I'm extremely pleased you could join us,
firstName.

47
00:02:54.577 --> 00:02:59.237
I hope you enjoy your stay,
honorific, lastName.

48
00:02:59.237 --> 00:03:04.294
So if I call it once here with Brian,
so Brian will go into firstName, right?

49
00:03:04.294 --> 00:03:07.262
Holt will go into lastName.

50
00:03:07.262 --> 00:03:10.490
Lord will go into the honorific, and
salutations will go into the greeting.

51
00:03:10.490 --> 00:03:11.911
And I get salutations Lord Holt,

52
00:03:11.911 --> 00:03:14.106
I'm extremely pleased you could join us,
Brian.

53
00:03:14.106 --> 00:03:16.911
I hope you enjoy your stay, Lord Holt.

54
00:03:16.911 --> 00:03:20.535
I can then call it again with
a different set of parameters.

55
00:03:22.007 --> 00:03:25.566
Jack, Sparrow, Captain, and A-hoy.

56
00:03:25.566 --> 00:03:27.828
So then it would be,
A-hoy Captain Sparrow,

57
00:03:27.828 --> 00:03:30.270
I'm extremely pleased you could join us,
Jack!

58
00:03:30.270 --> 00:03:34.225
I hope you enjoy your stay,
Captain Sparrow, right?

59
00:03:34.225 --> 00:03:36.107
So hopefully, you're starting
to see some of the value here,

60
00:03:36.107 --> 00:03:37.929
like I could have rewritten
this string multiple times out.

61
00:03:37.929 --> 00:03:42.782
You can imagine this is a hotel bar that
welcomes you to stay at your hotel, and

62
00:03:42.782 --> 00:03:47.893
it allows you to choose your greeting and
call yourself Captain, I guess.

63
00:03:47.893 --> 00:03:51.538
But here, I'm encapsulating logics,
I don't have to repeat myself a lot.

64
00:03:51.538 --> 00:03:54.304
I can kind of just make
this template function and

65
00:03:54.304 --> 00:03:56.269
then reuse it over and over again.

66
00:04:01.073 --> 00:04:05.835
So, something that you're probably
grasping here is the way that you

67
00:04:05.835 --> 00:04:08.185
call a function or use a function.

68
00:04:08.185 --> 00:04:14.538
But the terminology of using a function is
to call a function is these parentheses.

69
00:04:14.538 --> 00:04:18.971
So when you see these parentheses
at the end of something,

70
00:04:18.971 --> 00:04:23.042
your brain should be going off,
that's a function,

71
00:04:23.042 --> 00:04:27.673
that's calling a function,
it's doing function things.

72
00:04:27.673 --> 00:04:31.899
So, even in here, what is log?

73
00:04:31.899 --> 00:04:33.849
Log is a function, right?

74
00:04:33.849 --> 00:04:41.628
And we'll talk about the dot part here in
the next section, but that's what log is.

75
00:04:41.628 --> 00:04:47.882
Log is just a function that's
available to us, Okay?

76
00:04:47.882 --> 00:04:52.903
Let's try another one with
various different parameters,

77
00:04:52.903 --> 00:04:57.146
myHomeCity, myHomeState,
and myHomeCountry.

78
00:04:57.146 --> 00:05:04.153
And you can log out your home by saying,
myHomeCity, myHomeState, myHomeCountry.

79
00:05:04.153 --> 00:05:09.431
That's gonna call this function
here with city, state, and country.

80
00:05:09.431 --> 00:05:12.169
It's then going to log out.

81
00:05:12.169 --> 00:05:17.360
Directly, you are from city,
state, country.

82
00:05:17.360 --> 00:05:19.322
Again, I could do it one
more time here as well.

83
00:05:22.868 --> 00:05:27.225
Oops, And

84
00:05:27.225 --> 00:05:31.753
instead of this, we could put,
I don't know, you're from Olympia.

85
00:05:34.114 --> 00:05:39.466
Instead of Washington, or
you can be from Minneapolis,

86
00:05:42.677 --> 00:05:45.355
Minnesota, right?

87
00:05:48.191 --> 00:05:52.408
Or we could go, as you are from,

88
00:05:52.408 --> 00:05:55.846
I don't know, Bergamo,

89
00:05:55.846 --> 00:06:02.117
which is also in the Lombardi in Italy,
right?

90
00:06:06.869 --> 00:06:09.190
So, a couple things to
demonstrate here is,

91
00:06:09.190 --> 00:06:12.008
notice these other functions
return things, right?

92
00:06:12.008 --> 00:06:14.166
So this returns a string, right?

93
00:06:14.166 --> 00:06:17.334
And then I use that string somewhere else.

94
00:06:17.334 --> 00:06:20.178
I don't necessarily have
to return anything, right?

95
00:06:20.178 --> 00:06:24.733
So this function doesn't return anything,
it just does some logging directly.

96
00:06:24.733 --> 00:06:28.455
And then here, we're just showing
you that you can reuse it over and

97
00:06:28.455 --> 00:06:30.691
over again with different parameters.

98
00:06:30.691 --> 00:06:32.826
So I wanted to show you in JavaScripts,

99
00:06:32.826 --> 00:06:35.364
there's a couple ways
of writing functions.

100
00:06:35.364 --> 00:06:38.570
So far, you've been seeing
me use this one the most.

101
00:06:38.570 --> 00:06:42.503
All of these are equally valid,
I'm fine with whatever you choose.

102
00:06:42.503 --> 00:06:48.697
So, a function bark,
which does console.logwolf.

103
00:06:48.697 --> 00:06:51.150
You can assign it to a variable.

104
00:06:51.150 --> 00:06:54.517
So that's one of the things about
JavaScript, you can call functions first

105
00:06:54.517 --> 00:06:57.576
class citizens in JavaScript,
which is not true of every language.

106
00:06:57.576 --> 00:07:00.854
You don't really have to really
worry too much about that.

107
00:07:00.854 --> 00:07:04.728
But I now have a variable called meow.

108
00:07:04.728 --> 00:07:09.923
So for example,
if I say console.log(meow),

109
00:07:09.923 --> 00:07:15.870
it actually just logs out
that meow is function, right?

110
00:07:15.870 --> 00:07:22.173
Because I didn't put the parentheses here,
if I do this, well, even if I do that,

111
00:07:22.173 --> 00:07:27.860
it's gonna be undefined because meow
doesn't return anything, right?

112
00:07:27.860 --> 00:07:30.438
But notice,
it calls meow twice now, right?

113
00:07:30.438 --> 00:07:33.719
To invoke a function,
even if it doesn't take any parameters,

114
00:07:33.719 --> 00:07:36.169
you still have to put
empty parentheses there.

115
00:07:39.344 --> 00:07:41.647
But now, meow is this function
that I can pass around and

116
00:07:41.647 --> 00:07:46.571
use in different places, Okay?

117
00:07:46.571 --> 00:07:48.220
So that's all this is doing here.

118
00:07:48.220 --> 00:07:52.282
Is it's making a function, and
then it's assigning it to meow, and

119
00:07:52.282 --> 00:07:53.831
then I can use that later.

120
00:07:57.095 --> 00:08:01.319
This is the new way of doing functions
in JavaScript as of, again, 2015,

121
00:08:01.319 --> 00:08:04.007
which doesn't feel like
it's that new to us, but

122
00:08:04.007 --> 00:08:06.897
it's very new in terms of
the programming language.

123
00:08:06.897 --> 00:08:07.827
Is this arrow function?

124
00:08:07.827 --> 00:08:11.712
So, this is just an equal sign and
an angle bracket put together, so

125
00:08:11.712 --> 00:08:14.657
it looks like an arrow
when they're put together.

126
00:08:14.657 --> 00:08:19.399
And then my font just combines
them together to make

127
00:08:19.399 --> 00:08:22.765
it actually look like an arrow.

128
00:08:22.765 --> 00:08:24.544
This is just shorthand for
writing a function.

129
00:08:27.385 --> 00:08:31.971
So for example, if chirp took
any parameters, this would be,

130
00:08:31.971 --> 00:08:36.311
I don't know, birdNoise or
something like that, right?

131
00:08:40.380 --> 00:08:42.952
So that you would put those parameters
here inside of the parentheses.

132
00:08:42.952 --> 00:08:48.081
If it's empty parentheses, that just means
that it doesn't take any parameters,

133
00:08:48.081 --> 00:08:51.122
just like these didn't
take any parameters.

134
00:08:51.122 --> 00:08:52.604
Another question you might ask.

135
00:08:52.604 --> 00:08:55.864
Do I put a space here or do I not?

136
00:08:55.864 --> 00:08:57.955
Doesn't matter, personal preference.

137
00:08:57.955 --> 00:09:02.010
You can notice I didn't put it here and
I did put it here.

138
00:09:04.922 --> 00:09:05.754
Pure accident.

139
00:09:05.754 --> 00:09:07.409
I didn't do it with any rhyme or reason.

140
00:09:07.409 --> 00:09:09.184
You can see, for the most part,
I'm just writing code.

141
00:09:09.184 --> 00:09:11.354
I don't really care where
that whitespace goes.

142
00:09:11.354 --> 00:09:15.879
Some people are adamant, it must not go
there, and some people are adamant that it

143
00:09:15.879 --> 00:09:19.104
must go there,
some people will put all of this together.

144
00:09:19.104 --> 00:09:22.160
I would say that's pretty gross,
I really don't like that.

145
00:09:22.160 --> 00:09:25.682
That's really compact and
makes it kind of hard for me to read.

146
00:09:25.682 --> 00:09:29.919
I tend to put more whitespace because I
think it gives it some space to breathe,

147
00:09:29.919 --> 00:09:31.856
makes it easier for my eyes to read.

148
00:09:35.803 --> 00:09:39.618
We can see down here, you call them
all the same way, bark, meow, chirp,

149
00:09:39.618 --> 00:09:41.025
they all work the same way.

150
00:09:41.025 --> 00:09:46.362
&gt;&gt; Is the convention always cons for
shorthand functions?

151
00:09:46.362 --> 00:09:48.288
&gt;&gt; Nope, you could totally do let here.

152
00:09:48.288 --> 00:09:52.024
You could totally do var.

153
00:09:52.024 --> 00:09:52.978
All those work.

154
00:09:52.978 --> 00:09:56.174
It's a good question.

155
00:09:56.174 --> 00:09:59.573
I just do const by default,
always, personal preference.

156
00:09:59.573 --> 00:10:02.878
You can use let all the time, there's lots
of programmers that use let all the time.

157
00:10:02.878 --> 00:10:07.155
I would just say it's incorrect
to do var all the time now,

158
00:10:07.155 --> 00:10:09.784
just cuz it's arguably constant.

159
00:10:09.784 --> 00:10:11.519
Yeah, constant are more useful.

160
00:10:11.519 --> 00:10:16.103
The one thing I'll say is there are some
subtle differences between all three

161
00:10:16.103 --> 00:10:19.219
of these,
kind of outside the scope of this course.

162
00:10:19.219 --> 00:10:23.428
I would invite you to take some of
the more advanced JavaScript courses in

163
00:10:23.428 --> 00:10:26.673
Fronted Masters,
if you're really interested in it.

164
00:10:26.673 --> 00:10:30.769
But for now, just know that most
of the time that they're the same.

