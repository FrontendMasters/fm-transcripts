WEBVTT

1
00:00:01.250 --> 00:00:03.719
Let's do the math operators next.

2
00:00:06.813 --> 00:00:10.011
They're gonna be kind of linked side
by side anyway, so that's totally fine.

3
00:00:12.972 --> 00:00:17.336
So we're gonna do a function here,
and let's just call it handleMath.

4
00:00:20.442 --> 00:00:26.370
Okay, it's gonna take
in some sort of value,

5
00:00:26.370 --> 00:00:32.909
and we'll put this down
here as handleMath, yep.

6
00:00:32.909 --> 00:00:40.488
handleMath, and it's gonna take
in the symbol that we got here.

7
00:00:42.266 --> 00:00:42.766
Okay?

8
00:00:47.553 --> 00:00:53.202
So if the buffer is straight up zero,
and you hit plus or minus or

9
00:00:53.202 --> 00:00:58.868
times or divide, all of those
things end up being zero anyway.

10
00:00:58.868 --> 00:01:01.940
So you actually just don't
end up doing anything.

11
00:01:01.940 --> 00:01:03.400
So let's handle that first.

12
00:01:03.400 --> 00:01:09.280
So if buffer === 0,
we're just gonna do nothing.

13
00:01:09.280 --> 00:01:12.238
So do nothing and return.

14
00:01:14.899 --> 00:01:19.181
Okay, that's the first
case we wanna worry about.

15
00:01:19.181 --> 00:01:24.386
Other than that,
we have to do some sort of,

16
00:01:24.386 --> 00:01:28.336
let's say I do 5 plus 5 plus 5.

17
00:01:28.336 --> 00:01:32.427
If I hit, let's say, 5 plus 5,
and then I hit plus again,

18
00:01:32.427 --> 00:01:37.296
I have to do the addition of
the first two things, right?

19
00:01:37.296 --> 00:01:39.510
So I'm gonna do that.

20
00:01:39.510 --> 00:01:45.695
I'm gonna say const intBuffer is
assigned parseInt of the buffer.

21
00:01:49.235 --> 00:01:54.322
And I'm gonna say if, and
I need some sort of running total.

22
00:01:54.322 --> 00:02:01.548
So I'm gonna say runningTotal
is gonna be assigned 0,

23
00:02:01.548 --> 00:02:05.851
or if it is, then runningTotal is

24
00:02:05.851 --> 00:02:10.327
assigned the intBuffer, right?

25
00:02:10.327 --> 00:02:12.327
Otherwise, I have to go do math, right?

26
00:02:12.327 --> 00:02:17.591
So I'm gonna make some function here
called flushOperation of the intBuffer.

27
00:02:22.202 --> 00:02:26.325
Okay, so obviously,
I'm gonna need some sort of running total.

28
00:02:26.325 --> 00:02:30.112
So I'm gonna say let runningTotal,
and we're gonna start that at 0.

29
00:02:30.112 --> 00:02:35.701
Because if I do 5 plus 5 plus 10 plus 30,
I have to keep some sort of background

30
00:02:35.701 --> 00:02:41.138
value of something off screen that
contains some sort of running total, okay?

31
00:02:41.138 --> 00:02:44.561
So we'll start that at 0.

32
00:02:45.865 --> 00:02:46.560
Yep.

33
00:02:48.655 --> 00:02:52.168
We're also gonna need some sort
of concept of previous operator.

34
00:02:52.168 --> 00:02:57.153
So if I do 5 plus, and
then I start typing math numbers,

35
00:02:57.153 --> 00:03:03.958
I have to keep track of the fact that the
last thing that I tried to do was plus.

36
00:03:03.958 --> 00:03:08.616
So I'm gonna have some sort of
previous operator or math symbol or

37
00:03:08.616 --> 00:03:10.656
whatever you wanna call it.

38
00:03:10.656 --> 00:03:12.645
I'm just gonna call it an operator.

39
00:03:12.645 --> 00:03:19.002
And that's just not gonna have
anything associated with it at first.

40
00:03:20.179 --> 00:03:24.854
Okay, and then down here under handleMath,

41
00:03:24.854 --> 00:03:32.738
I have to say previousOperator is
assigned whatever the value was, right?

42
00:03:32.738 --> 00:03:37.501
So whatever gets passed in here,
so I'm storing plus or times or

43
00:03:37.501 --> 00:03:39.894
divide or something like that.

44
00:03:42.133 --> 00:03:48.690
And then if I hit 56 plus,
what should the screen go to?

45
00:03:48.690 --> 00:03:52.856
The screen should go to zero cuz we're
about to put in a new number, right?

46
00:03:52.856 --> 00:03:57.727
So I'm gonna say buffer is assigned 0.

47
00:04:00.855 --> 00:04:05.347
Okay, that's pretty much it for this.

48
00:04:05.347 --> 00:04:10.718
I just have to go code this
flushOperation function.

49
00:04:10.718 --> 00:04:13.241
And all that's gonna do is if
it's supposed to do addition,

50
00:04:13.241 --> 00:04:14.139
it'll do addition.

51
00:04:14.139 --> 00:04:16.235
If it does division, it'll do division.

52
00:04:16.235 --> 00:04:17.565
It should be pretty straightforward.

53
00:04:17.565 --> 00:04:22.246
So I'm gonna say function flushOperation.

54
00:04:22.246 --> 00:04:24.579
It's gonna take in some sort of intBuffer,
right?

55
00:04:24.579 --> 00:04:28.912
So it's gonna take in
whatever I pass in here.

56
00:04:28.912 --> 00:04:31.269
And then here, I'm gonna say if, and

57
00:04:31.269 --> 00:04:34.298
I'm just gonna do a bunch
of if statements here.

58
00:04:34.298 --> 00:04:37.336
You could do a switch here as well,
that'd be totally fine.

59
00:04:37.336 --> 00:04:40.463
If it's equal to plus, then do plus.

60
00:04:40.463 --> 00:04:45.286
So runningTotal += intBuffer.

61
00:04:48.517 --> 00:04:54.349
Okay, else if previousOperator

62
00:04:54.349 --> 00:04:59.137
=== -, then do minus,

63
00:04:59.137 --> 00:05:04.772
runningTotal -= intBuffer.

64
00:05:04.772 --> 00:05:10.195
And I can probably just copy and
paste this a few times.

65
00:05:13.820 --> 00:05:19.780
Okay, if it's times, then do times.

66
00:05:21.849 --> 00:05:27.796
And if it's division,
Except this isn't gonna be that.

67
00:05:27.796 --> 00:05:29.660
That's actually gonna be an x, right?

68
00:05:29.660 --> 00:05:31.896
So I actually have to go
grab the correct thing here.

69
00:05:34.928 --> 00:05:42.360
So x, then we'll do, cuz this is the sign
for multiplication in JavaScript,

70
00:05:42.360 --> 00:05:46.653
by the same token here, we'll do division.

71
00:05:46.653 --> 00:05:51.357
If it's division,
then we'll do slash equals, because again,

72
00:05:51.357 --> 00:05:54.304
slash equals is division in JavaScript.

73
00:05:57.430 --> 00:06:00.070
So that works.

74
00:06:00.070 --> 00:06:03.093
You also totally could just make
this an else if you want to,

75
00:06:03.093 --> 00:06:06.380
because there's only four
possible values here.

76
00:06:06.380 --> 00:06:08.209
Totally up to you.

77
00:06:08.209 --> 00:06:12.536
I'm gonna say probably it's better
to be explicit where possible,

78
00:06:12.536 --> 00:06:15.755
cuz what happens if something
weird gets in there?

79
00:06:15.755 --> 00:06:17.555
You don't wanna just do
division by default.

80
00:06:17.555 --> 00:06:19.168
So that's kind of up to you.

81
00:06:19.168 --> 00:06:21.675
It doesn't really matter.

82
00:06:24.418 --> 00:06:27.486
Just to be extra clear here,
just remember,

83
00:06:27.486 --> 00:06:31.363
this is the same thing as
runningTotal / intBuffer, but

84
00:06:31.363 --> 00:06:35.507
you can also just do slash equals and
that does totally work.

85
00:06:40.075 --> 00:06:41.299
Okay.

86
00:06:47.832 --> 00:06:52.972
That all sounds good,
pretty happy with that.

87
00:06:52.972 --> 00:06:58.052
The nice thing about this flush
operator function that we built is now

88
00:06:58.052 --> 00:07:04.026
we have the ability to do our math, so we
can actually reuse this with our equals.

89
00:07:06.278 --> 00:07:09.388
But let's go ahead and make sure that this
works the way that we anticipate it cuz I

90
00:07:09.388 --> 00:07:12.250
wanna make sure that the runningTotal
is getting calculated correctly.

91
00:07:12.250 --> 00:07:15.976
So I'm gonna say console.log
runningTotal here.

92
00:07:18.229 --> 00:07:22.757
So if I say 5 plus 5

93
00:07:22.757 --> 00:07:27.851
plus 6 plus 12 plus

94
00:07:27.851 --> 00:07:32.955
25 minus 5 minus,

95
00:07:35.122 --> 00:07:38.622
9, minus 7, right,

96
00:07:38.622 --> 00:07:44.224
it is working the way I anticipate it,

97
00:07:44.224 --> 00:07:48.437
times 2 divided by 2 plus.

98
00:07:48.437 --> 00:07:53.405
Yeah, so everything's working
the way I anticipate it, cool.

99
00:07:53.405 --> 00:07:56.167
Maybe we'll try that one
more time just to make sure.

100
00:07:56.167 --> 00:08:01.003
5 times 2 plus, okay, cool.

101
00:08:01.003 --> 00:08:03.496
It's not flushing the operator until
I'm pressing the button, right?

102
00:08:03.496 --> 00:08:10.441
So I'm gonna say 5 divided by 5 plus,
which is good, okay, all good.

103
00:08:13.157 --> 00:08:17.468
So runningTotal, looking good,
don't need to log that out anymore.

104
00:08:17.468 --> 00:08:22.921
Let's go do the equal signs, and I think
we're pretty close to done at that point.

105
00:08:25.265 --> 00:08:29.448
So equals here.

106
00:08:33.021 --> 00:08:38.556
So first thing to check for,
if I just hit equals right now,

107
00:08:38.556 --> 00:08:43.662
even if I hit 5 equals,
what would I expect to happen?

108
00:08:43.662 --> 00:08:45.962
Nothing, because equals at this
point doesn't mean anything.

109
00:08:45.962 --> 00:08:48.307
You haven't done any sort of operation.

110
00:08:48.307 --> 00:08:53.134
So if the previousOperator is null or

111
00:08:53.134 --> 00:08:57.806
something like that or undefined,

112
00:08:57.806 --> 00:09:02.022
you can put it however you want.

113
00:09:02.022 --> 00:09:05.064
Let's just make it null cuz that
might be an interesting thing for

114
00:09:05.064 --> 00:09:06.017
you to experience.

115
00:09:06.017 --> 00:09:11.489
Null is another kind of data point
we have not a number we've seen.

116
00:09:11.489 --> 00:09:13.147
You've probably seen undefined.

117
00:09:13.147 --> 00:09:16.242
So null is basically
the absence of anything.

118
00:09:16.242 --> 00:09:17.442
So it's different from zero.

119
00:09:17.442 --> 00:09:19.892
If you have zero of something,
you have zero quantity of something.

120
00:09:19.892 --> 00:09:21.700
If you have null, you have nothing.

121
00:09:21.700 --> 00:09:23.690
You have no concept of anything.

122
00:09:23.690 --> 00:09:25.680
So we have no previous operator.

123
00:09:25.680 --> 00:09:30.300
So we'll actually make this null to start
out with because there's nothing there.

124
00:09:31.850 --> 00:09:32.850
You don't have to use null here.

125
00:09:32.850 --> 00:09:34.990
I'm just showing you a use case
where null could be useful.

126
00:09:36.850 --> 00:09:41.684
So if previousOperator is null, right,

127
00:09:41.684 --> 00:09:45.420
you need two numbers to do math.

128
00:09:45.420 --> 00:09:46.940
Then we'll just return right away.

129
00:09:48.430 --> 00:09:51.248
Otherwise, what we wanna do is we
just wanna flush the operation right

130
00:09:51.248 --> 00:09:51.880
away, right?

131
00:09:51.880 --> 00:09:57.952
We wanna say flushOperation with
the parseInt of the buffer.

132
00:10:02.380 --> 00:10:03.064
Okay?

133
00:10:07.165 --> 00:10:10.244
So now the buffer,

134
00:10:13.728 --> 00:10:18.085
We wanna set the buffer,
we wanna set the screen, right?

135
00:10:18.085 --> 00:10:24.040
So if I say 5 plus 5 equals,
I wanna see 10 here.

136
00:10:24.040 --> 00:10:25.905
Where is 10 coming from?

137
00:10:25.905 --> 00:10:29.203
10 is gonna be the running total, right,
because that's where I'm keeping track of

138
00:10:29.203 --> 00:10:31.359
all the math, right,
the running total of everything.

139
00:10:31.359 --> 00:10:39.478
So I want to see,
The running total here in the buffer.

140
00:10:39.478 --> 00:10:46.130
So what I'm going to do in the,
where was I, in the handle symbol here.

141
00:10:49.650 --> 00:10:57.673
So what I'm gonna do now is I'm gonna
say buffer is assigned the runningTotal.

142
00:11:01.188 --> 00:11:05.984
And then runningTotal is going
to be assigned a 0, right?

143
00:11:12.639 --> 00:11:14.820
Okay, I do have a little bit
of a weird problem here.

144
00:11:16.670 --> 00:11:18.460
The buffer,
I always want that to be a string.

145
00:11:18.460 --> 00:11:22.110
If you remember up here, I'm just kinda
keeping it consistently a string.

146
00:11:22.110 --> 00:11:23.280
So let me show you how to do that.

147
00:11:24.890 --> 00:11:27.594
If I wanna make a number of string,

148
00:11:27.594 --> 00:11:31.335
I'm gonna show you a little
cheat to do it here.

149
00:11:31.335 --> 00:11:35.861
You can just say empty string
plus runningTotal here.

150
00:11:38.086 --> 00:11:39.289
Whatever the first thing is,

151
00:11:39.289 --> 00:11:41.750
it's going to convert everything
else behind it into that.

152
00:11:41.750 --> 00:11:44.169
So I have this empty string
which has nothing in it, and

153
00:11:44.169 --> 00:11:47.390
then I'm gonna add runningTotal,
it'll make that a string.

154
00:11:47.390 --> 00:11:50.969
So buffer will maintain being a string,
which is a positive thing.

155
00:11:52.210 --> 00:11:54.764
Okay, runningTotal is going to be
assigned 0 because at this point,

156
00:11:54.764 --> 00:11:55.980
we've done all our math.

157
00:11:55.980 --> 00:11:56.739
We're happy with it.

158
00:11:56.739 --> 00:11:58.030
We don't have to do anything else.

159
00:11:59.760 --> 00:12:06.253
Okay, one last thing, if you hit equals,
so if I say 5 plus 5 equals,

160
00:12:06.253 --> 00:12:12.660
the previous operator at this point
is going to be null again, right?

161
00:12:12.660 --> 00:12:16.465
So I'm gonna say previousOperator = null
cuz we've now flushed out the operation.

162
00:12:16.465 --> 00:12:19.011
We don't wanna keep track of
any sort of previous operator.

163
00:12:23.330 --> 00:12:25.308
Okay, so make sure that works.

164
00:12:29.117 --> 00:12:37.733
5 plus 5, and
I expect now this to be equal to 10.

165
00:12:42.469 --> 00:12:49.827
Plus 9 plus 23 equals,
divide by 6 equals 7.

166
00:12:49.827 --> 00:12:50.995
All the stuff is working.

167
00:12:57.374 --> 00:13:00.922
Times by 12 equals,

168
00:13:00.922 --> 00:13:05.969
times by 5 equals, all right.

169
00:13:08.005 --> 00:13:10.404
Cool, so that is the calculator.

170
00:13:13.170 --> 00:13:15.540
Pretty happy with it,
how everything came out.

171
00:13:15.540 --> 00:13:18.848
There's probably bugs in here somewhere,
but bugs are bugs and

172
00:13:18.848 --> 00:13:20.080
they show up in places.

173
00:13:21.300 --> 00:13:24.680
Debugging is just as big
a skill as writing code.

174
00:13:24.680 --> 00:13:25.770
It's this whole separate thing.

175
00:13:25.770 --> 00:13:28.744
So that's always a good thing
to get used to as well.

176
00:13:28.744 --> 00:13:30.664
You can see I used console.log everywhere.

177
00:13:30.664 --> 00:13:31.896
That's just a habit of mine.

178
00:13:31.896 --> 00:13:38.402
There's other techniques of debugging,
but yeah, happy about this.

179
00:13:41.066 --> 00:13:44.042
All right, so that's the calculator.

180
00:13:44.042 --> 00:13:49.096
And if you want, you can look at
my version of the calculator here,

181
00:13:49.096 --> 00:13:53.356
going through the HTML,
the JavaScript, and the CSS.

182
00:13:53.356 --> 00:13:55.280
It's basically what you and
I just coded together.

183
00:13:56.650 --> 00:13:58.630
And yeah, good job.

184
00:13:58.630 --> 00:14:00.487
That's a pretty hard project.

