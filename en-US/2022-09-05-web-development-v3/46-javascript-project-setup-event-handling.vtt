WEBVTT

1
00:00:00.210 --> 00:00:01.740
Let's do this together.

2
00:00:01.740 --> 00:00:08.580
So this is the JavaScript
portion of the course.

3
00:00:08.580 --> 00:00:10.850
So I'm gonna assume that you
did the HTML and CSS yourself.

4
00:00:12.390 --> 00:00:15.442
If not, you can go ahead and check out my,
in fact we'll go through maybe

5
00:00:15.442 --> 00:00:18.940
a little bit of like some of
the highlights of how I chose to do it.

6
00:00:18.940 --> 00:00:23.321
But just know that there's a bunch of
different correct ways to do this, right?

7
00:00:23.321 --> 00:00:30.182
So what I want you to do,
is we're gonna go back to my desktop and

8
00:00:30.182 --> 00:00:35.370
we can close this one,
gonna make a new folder.

9
00:00:35.370 --> 00:00:36.130
New folder.

10
00:00:36.130 --> 00:00:40.116
We're gonna call this one, calculator.

11
00:00:43.110 --> 00:00:48.927
Okay and I'm gonna drag and
drop this onto my VS code and

12
00:00:48.927 --> 00:00:55.259
I now have this calculator
project I'm going to make a new.

13
00:00:55.259 --> 00:00:58.837
We'll make this an index.html and

14
00:00:58.837 --> 00:01:03.732
I'm just going to grab
this directly from here.

15
00:01:07.895 --> 00:01:11.610
So just to kind of go
over what I did here.

16
00:01:11.610 --> 00:01:14.156
We'll make this called style.css.

17
00:01:16.636 --> 00:01:20.452
I chose to do this I have the little
screen class up here, right,

18
00:01:20.452 --> 00:01:22.940
which has the number 0 to start out with.

19
00:01:22.940 --> 00:01:27.820
I put it all into like a calc div, you
could have called it whatever you wanted.

20
00:01:27.820 --> 00:01:30.910
And I put this into rows of buttons.

21
00:01:30.910 --> 00:01:34.090
You could have totally done this with grid
it would have been very acceptable to do

22
00:01:34.090 --> 00:01:34.760
this with grid.

23
00:01:34.760 --> 00:01:36.509
I chose to end up doing with flex.

24
00:01:36.509 --> 00:01:38.821
That's because I very familiar to flex and

25
00:01:38.821 --> 00:01:42.940
I could do flex in my sleep I still have
to look up grid every time that I use it.

26
00:01:44.430 --> 00:01:48.260
But yeah,
this ends up just being rows of buttons.

27
00:01:48.260 --> 00:01:54.920
And if you look over here,
It's every one of these rows is in a div.

28
00:01:54.920 --> 00:01:59.425
And then you can see down
here my 0 has a triple class,

29
00:01:59.425 --> 00:02:02.218
which makes it span all of that.

30
00:02:02.218 --> 00:02:03.999
So, great.

31
00:02:06.891 --> 00:02:11.691
Let's make another file here
we're gonna call this style.css.

32
00:02:13.917 --> 00:02:21.460
And we're gonna grab the CSS here,
Paste that all in here,

33
00:02:22.570 --> 00:02:26.850
And it's basically what I just told you.

34
00:02:26.850 --> 00:02:29.440
I did it in flex in the different rows.

35
00:02:30.600 --> 00:02:33.755
And I think it just basically did
these widths and I just guessed and

36
00:02:33.755 --> 00:02:36.190
checked to make sure that
everything was correct.

37
00:02:36.190 --> 00:02:39.904
And you can see here, this is flex
it's stretch, it's space between.

38
00:02:39.904 --> 00:02:44.085
Nothing too surprising here.

39
00:02:45.906 --> 00:02:48.618
Awesome, now you and

40
00:02:48.618 --> 00:02:54.503
I are going to code
calculator.js together.

41
00:02:54.503 --> 00:02:58.741
Let me make sure that that is
the correct yep calculator.js.

42
00:03:02.208 --> 00:03:10.781
So, Let's go over how I would handle this.

43
00:03:10.781 --> 00:03:13.129
So again,
just looking at our project here.

44
00:03:15.616 --> 00:03:19.620
You could attach an individual event
listener to every one of these buttons.

45
00:03:20.840 --> 00:03:23.660
I would get really sick
of that really quickly.

46
00:03:23.660 --> 00:03:26.706
But the nice thing about doing it
that way is you could say, all right,

47
00:03:26.706 --> 00:03:30.220
if someone clicks the 7 button, then run
whatever the seventh function is, and

48
00:03:30.220 --> 00:03:32.440
you can make every event
listener very specific.

49
00:03:32.440 --> 00:03:34.640
Honestly, it's a super
valid way of doing this.

50
00:03:34.640 --> 00:03:41.670
I don't know how many buttons do I
have here, 15 or something like that.

51
00:03:41.670 --> 00:03:43.390
I don't know, I'm not going to count.

52
00:03:43.390 --> 00:03:45.620
But it wouldn't be that
many event listeners.

53
00:03:46.870 --> 00:03:51.028
Still, at the end of the day, I chose
to do this with one event listener and

54
00:03:51.028 --> 00:03:55.273
then I just have an event listener that
delegates to various other things.

55
00:03:57.512 --> 00:03:59.560
So let's go ahead and do it that way.

56
00:04:00.890 --> 00:04:06.570
I think the first thing I'm going to do
here is I'm going to make a function.

57
00:04:06.570 --> 00:04:09.650
It'll be the last function on here,
called init.

58
00:04:09.650 --> 00:04:11.840
This is just like a personal
choice of doing code.

59
00:04:11.840 --> 00:04:16.729
I always have a function that
inits everything initialized.

60
00:04:16.729 --> 00:04:20.790
So this is gonna say
document.querySelector.

61
00:04:22.110 --> 00:04:26.837
I'm going to pick up .calc-buttons
which if you remember correctly is

62
00:04:26.837 --> 00:04:28.161
this section here.

63
00:04:28.161 --> 00:04:33.527
So I'm gonna add one event listener that
listens to all of the buttons up here,

64
00:04:33.527 --> 00:04:36.550
which will work because of event bubbling.

65
00:04:37.860 --> 00:04:39.050
So .calc-buttons.

66
00:04:41.130 --> 00:04:47.092
So with that, I'm going to add
an event listener, listen for

67
00:04:47.092 --> 00:04:53.638
clicks, and then I'm gonna add
a function that takes in the event.

68
00:04:53.638 --> 00:04:58.377
And all I'm gonna do is
I'm just going to call

69
00:04:58.377 --> 00:05:03.131
a buttonClick with event.target.value.

70
00:05:06.415 --> 00:05:13.328
Or not even the value but
inner text rather.

71
00:05:17.279 --> 00:05:19.014
So may let's maybe put
that on multiple lines.

72
00:05:19.014 --> 00:05:20.602
So just be kind of clear.

73
00:05:22.722 --> 00:05:25.510
So I'm gonna find the .calc-buttons.

74
00:05:25.510 --> 00:05:29.693
I'm going to add an event listener
that every time someone clicks on it,

75
00:05:29.693 --> 00:05:34.580
it's just gonna run some function called
buttonClick with the innerText, right?

76
00:05:34.580 --> 00:05:39.420
And the innerText is gonna be C, or
back arrow, or divide, or 9 or 8, right?

77
00:05:39.420 --> 00:05:44.136
So it's gonna be the whatever
is the text of the event.target.

78
00:05:44.136 --> 00:05:46.841
The event.target if you remember,

79
00:05:46.841 --> 00:05:51.790
is going to be whatever is
the div that was clicked, right?

80
00:05:51.790 --> 00:05:56.243
Or in this case, the button All right,

81
00:05:56.243 --> 00:06:00.550
because if I remember correctly the way
I did this, these are all buttons.

82
00:06:00.550 --> 00:06:01.520
They are all buttons.

83
00:06:02.890 --> 00:06:05.290
And one of the beneficial
things about doing that.

84
00:06:06.400 --> 00:06:08.940
It's kind of hard to see but you can
see there's like a little blue outline.

85
00:06:08.940 --> 00:06:11.580
I can tab through all of these now.

86
00:06:11.580 --> 00:06:15.168
That's just the natural things
that buttons allow you to do,

87
00:06:15.168 --> 00:06:16.480
is they're tapable.

88
00:06:17.680 --> 00:06:20.210
This is helpful for
people that don't have mice.

89
00:06:20.210 --> 00:06:23.064
So it's another accessibility thing that
you should use a button here as opposed to

90
00:06:23.064 --> 00:06:23.851
something like a div.

91
00:06:26.852 --> 00:06:33.090
Okay, so I invented a function here called
buttonClick that doesn't exist yet.

92
00:06:33.090 --> 00:06:37.520
You'll find that I do this very frequently
when I code, is I'll just say like, hey,

93
00:06:37.520 --> 00:06:40.292
I'll write this function
here called button click,

94
00:06:40.292 --> 00:06:44.300
it's gonna do what I want it to do,
and then I'll come back later.

95
00:06:44.300 --> 00:06:46.450
And I'll code button click.

96
00:06:46.450 --> 00:06:49.683
So I'm gonna make a function
here called button click, and

97
00:06:49.683 --> 00:06:52.028
it's going to take in the innerText here.

98
00:06:52.028 --> 00:06:55.499
So, let's see yeah,

99
00:06:55.499 --> 00:07:00.260
I think I called it value here.

100
00:07:00.260 --> 00:07:05.440
So this will be 8 or 9 or
divide or something like that.

101
00:07:05.440 --> 00:07:10.435
And then here I'm going to make like a
routing function that it's going to either

102
00:07:10.435 --> 00:07:14.194
handle the math or handle the number or
something like that.

103
00:07:16.641 --> 00:07:21.847
Okay, So

104
00:07:21.847 --> 00:07:26.305
the first thing I need to figure out,
I can handle 0, 1, 2, 3, 4,

105
00:07:26.305 --> 00:07:30.130
5, 6, 7, 8, 9 all the,
exactly the same way, right?

106
00:07:30.130 --> 00:07:31.950
They're all just numbers.

107
00:07:31.950 --> 00:07:35.065
All it does is append to the calculator.

108
00:07:38.462 --> 00:07:44.760
And let's actually open this here, so
I'm gonna open calculator &gt; index.html.

109
00:07:46.070 --> 00:07:47.890
So this is mine.

110
00:07:47.890 --> 00:07:50.999
We'll just make this a little bigger,
so you can see, and

111
00:07:50.999 --> 00:07:53.605
then I'm gonna open my
console here to the side.

112
00:07:56.158 --> 00:07:58.531
Okay, so
let's just make sure it works, right?

113
00:07:58.531 --> 00:08:00.930
So I'm gonna say console.log value.

114
00:08:04.452 --> 00:08:09.695
Now, if I refresh the page and
I click it's now working.

115
00:08:09.695 --> 00:08:14.590
One of the dangers of doing init function.

116
00:08:14.590 --> 00:08:17.460
So I wrote this function called a init,
right?

117
00:08:17.460 --> 00:08:19.996
That's supposed to initialize my code.

118
00:08:19.996 --> 00:08:23.320
You have to call it, right?

119
00:08:23.320 --> 00:08:26.985
This I just created the function and
never actually ran.

120
00:08:26.985 --> 00:08:31.960
But now if I do this and
I refresh the page, I have hi right so

121
00:08:31.960 --> 00:08:33.596
that got run here.

122
00:08:33.596 --> 00:08:38.096
9, 8, 7, 5, 0, equals, divides,

123
00:08:38.096 --> 00:08:42.256
back, all that kind of stuff all works.

124
00:08:46.233 --> 00:08:47.099
Okay.

125
00:08:51.526 --> 00:08:54.860
Cool, good so far, so
we're getting the correct value over here.

126
00:08:56.120 --> 00:09:00.620
So, the way I'm mentally parsing
this out is I have symbols.

127
00:09:00.620 --> 00:09:03.860
So all of these things here
are basically along the sides.

128
00:09:03.860 --> 00:09:06.230
And I have numbers.

129
00:09:06.230 --> 00:09:08.040
And those get handled differently.

130
00:09:08.040 --> 00:09:10.860
The symbols have to do something and
then the numbers do a different thing.

131
00:09:11.930 --> 00:09:18.547
So I think I'm gonna create a function
here called function handleNumbers,

132
00:09:18.547 --> 00:09:22.430
or number right and
we'll put a number here.

133
00:09:24.080 --> 00:09:27.569
I'll create another function
here called handleSymbol or

134
00:09:27.569 --> 00:09:30.296
something like that and
this will be a symbol.

135
00:09:34.814 --> 00:09:39.514
So I'm gonna do something and
I'm gonna check is value a number,

136
00:09:39.514 --> 00:09:44.020
so, Let's see how I could do that.

137
00:09:44.020 --> 00:09:48.528
There's a couple of ways you could figure
out if something is a number or not, but

138
00:09:48.528 --> 00:09:51.130
let's talk about the thing
called parseInt.

139
00:09:53.280 --> 00:09:56.640
If I give it a string, right?

140
00:09:56.640 --> 00:09:57.560
With a 5 in it.

141
00:09:58.690 --> 00:09:59.670
It'll give me back 5, right?

142
00:09:59.670 --> 00:10:03.715
It'll give me back the number 5,
as opposed to the string 5, right?

143
00:10:06.146 --> 00:10:09.895
Or I don't know if some long number
it'll give me back the number.

144
00:10:09.895 --> 00:10:11.975
What happens if I give it a string?

145
00:10:13.765 --> 00:10:18.305
I get this thing back called NaN,
which stands for not a number.

146
00:10:18.305 --> 00:10:20.095
I think that makes sense, right?

147
00:10:21.395 --> 00:10:28.380
So there is a function called isNaN and
is not a number, not a number.

148
00:10:28.380 --> 00:10:36.549
That's true is not a number is 5 not a
number no 5 is definitely a number, right?

149
00:10:36.549 --> 00:10:43.157
So I can kind of combine those two So

150
00:10:43.157 --> 00:10:47.001
parseInt which will return me 5, right?

151
00:10:47.001 --> 00:10:53.295
Is that not a number, no 5 is a number.

152
00:10:53.295 --> 00:10:56.005
Is lol not a number, right?
It is not a number, right?

153
00:10:56.005 --> 00:11:02.040
So I can take this thought
process over here and

154
00:11:02.040 --> 00:11:07.520
say if value is not a number, right?

155
00:11:07.520 --> 00:11:08.720
Then I know I have a symbol.

156
00:11:10.460 --> 00:11:14.000
So I can say handleSymbol with value.

157
00:11:15.120 --> 00:11:16.680
Otherwise it's a number.

158
00:11:16.680 --> 00:11:22.528
So I can say handleNumber with value.

159
00:11:27.278 --> 00:11:33.127
So now let's just make
sure that I'm working here

160
00:11:33.127 --> 00:11:38.849
console.log number and console.log symbol.

161
00:11:38.849 --> 00:11:45.600
So refresh the page here,
I can get rid of that.

162
00:11:45.600 --> 00:11:50.065
If I press 8 I expect that to
say number number if I press C,

163
00:11:50.065 --> 00:11:54.470
I expect it to symbol,
number, number, number.

164
00:11:54.470 --> 00:12:00.840
You can see that every time I press this,
this number 3 goes up, right?

165
00:12:00.840 --> 00:12:04.070
Symbol, number, symbol, number, symbol.

166
00:12:05.550 --> 00:12:06.390
All right, cool.

167
00:12:06.390 --> 00:12:09.812
So everything's working the way I expect
it I'm now routing different ways based

168
00:12:09.812 --> 00:12:11.600
on if it's number or symbol.

169
00:12:11.600 --> 00:12:12.480
So that's positive.

170
00:12:14.810 --> 00:12:16.233
Let's just go with numbers, right?

171
00:12:16.233 --> 00:12:19.941
That's probably what I would do next make
sure that the typing of numbers works okay

172
00:12:22.741 --> 00:12:28.690
So the next thing I'll do is I have to
keep track of what number is up here.

173
00:12:31.170 --> 00:12:34.927
Now you could use the DOM as a source
of truth and I could query the DOM

174
00:12:34.927 --> 00:12:38.975
every single time that's burdensome,
I'd rather not do it that way.

175
00:12:40.805 --> 00:12:44.593
But I could say like document.screen,
so .getelement or

176
00:12:44.593 --> 00:12:47.323
document.queryselector.screen, and

177
00:12:47.323 --> 00:12:52.587
then get the innerText out of that and
then use that every single time.

178
00:12:52.587 --> 00:12:54.207
I don't wanna do that.

179
00:12:54.207 --> 00:12:58.207
So what I'm going to do is I'm going
to create just a variable here.

180
00:12:58.207 --> 00:13:00.825
I'm going to call it buffer.

181
00:13:00.825 --> 00:13:03.867
You can call it screen.
You can call it whatever you want.

182
00:13:03.867 --> 00:13:06.787
But key here,
I'm going to keep it as a string.

183
00:13:06.787 --> 00:13:08.269
And I'll show you why in just a second.

184
00:13:10.800 --> 00:13:15.193
Okay, so now I'm gonna ask myself,

185
00:13:15.193 --> 00:13:20.170
if I press 8, what do I expect to happen?

186
00:13:22.930 --> 00:13:26.940
I expect that 8 is going to replace the 0,
right?

187
00:13:26.940 --> 00:13:30.905
So it'll be just 8 on the screen.

188
00:13:30.905 --> 00:13:37.021
So I'm gonna say here in
number I'll delete this and

189
00:13:37.021 --> 00:13:41.480
I'll say if buffer triple equals 0.

190
00:13:41.480 --> 00:13:49.282
Then buffer is just assigned the number,
right?

191
00:13:49.282 --> 00:13:50.810
All right,
they end up being the same thing.

192
00:13:52.330 --> 00:13:58.430
Else so let's say press 8,
and then I press 9.

193
00:13:58.430 --> 00:14:00.030
What do I expect to happen?

194
00:14:00.030 --> 00:14:01.630
I don't expect it to replace it.

195
00:14:01.630 --> 00:14:02.740
I expect it to be 89.

196
00:14:02.740 --> 00:14:05.480
So it's just going to add to the end.

197
00:14:05.480 --> 00:14:06.120
So I'm just gonna do that.

198
00:14:06.120 --> 00:14:10.610
I'm gonna say buffer += number.

199
00:14:11.670 --> 00:14:17.880
And again, just remember, this is
the same as buffer = buffer + number.

200
00:14:17.880 --> 00:14:20.190
You can do these with strings
in case that wasn't obvious.

201
00:14:21.470 --> 00:14:25.143
It's probably not obvious, so that's okay.

202
00:14:25.143 --> 00:14:26.960
But this is the exact same thing.

203
00:14:26.960 --> 00:14:28.570
Line 15 line 16, do the same thing.

204
00:14:28.570 --> 00:14:31.027
I'm just adding number onto the end.

205
00:14:34.073 --> 00:14:37.996
Okay, so I'm not rerendering this yet, so

206
00:14:37.996 --> 00:14:42.140
the screen's not updating, this buffer is.

207
00:14:42.140 --> 00:14:46.050
So let's just console.log that and
see what that looks like over time.

208
00:14:46.050 --> 00:14:50.809
So, If I refresh this, now,

209
00:14:50.809 --> 00:14:54.980
I expect I hit 8,
I'll see 8 logged out, I do.

210
00:14:54.980 --> 00:14:59.170
If I just hit 5,
I expect to see 85 logged out.

211
00:15:01.080 --> 00:15:04.670
Now if I press 0, I expect 850.

212
00:15:04.670 --> 00:15:06.320
Cool, right?

213
00:15:06.320 --> 00:15:07.800
It's doing what I expect it to do.

214
00:15:09.150 --> 00:15:12.780
Now I need something that's going
to update this over time, right?

215
00:15:14.600 --> 00:15:16.920
So I'm going to write a function
here called rerender.

216
00:15:16.920 --> 00:15:19.480
It's going to be a really dumb function.

217
00:15:21.020 --> 00:15:23.910
But now I'll have some ability to
make this rerender whenever I want.

218
00:15:23.910 --> 00:15:27.510
This is actually going to end up just
being a one liner which is totally fine.

219
00:15:27.510 --> 00:15:32.345
I'm gonna say screen and
I'll go make screen later,

220
00:15:32.345 --> 00:15:35.470
.inner text is assigned buffer.

221
00:15:37.980 --> 00:15:43.083
Okay, so I have this and then up here
at the top, I'm just going to go create

222
00:15:43.083 --> 00:15:48.674
that variable, which I'm going to call
screen because that's what I called it.

223
00:15:48.674 --> 00:15:54.884
Const screen is assigned
document.querySelector and

224
00:15:54.884 --> 00:15:58.191
I called it .screen I did okay

225
00:16:04.178 --> 00:16:09.420
Okay, so now I have screen here I have
this function down here called rerender.

226
00:16:09.420 --> 00:16:15.140
So now anytime I call rerender, it'll just
make buffer and screen be the same thing.

227
00:16:15.140 --> 00:16:17.543
You could do this in any number of places,
but

228
00:16:17.543 --> 00:16:21.600
basically every time that someone
clicks the button, you wanna rerender.

229
00:16:21.600 --> 00:16:23.882
So I'm just gonna make
that happen at the end of,

230
00:16:25.951 --> 00:16:28.720
Every time someone interacts with
it at the end of buttonClick here.

231
00:16:30.940 --> 00:16:34.030
Okay, now I can drop this.

232
00:16:35.210 --> 00:16:36.790
That was the console.log here.

233
00:16:36.790 --> 00:16:38.209
We don't need that anymore.

234
00:16:41.633 --> 00:16:49.065
Refresh, so now if I press 5 actually
expect it to see it expressed here.

235
00:16:49.065 --> 00:16:53.569
5, 56, 562, 561, awesome,

236
00:16:53.569 --> 00:16:57.697
right working the way we expect it to.

237
00:17:02.417 --> 00:17:04.738
Very cool, very happy with that.

238
00:17:07.008 --> 00:17:10.185
And kind of just by benefit
of this logic here,

239
00:17:10.185 --> 00:17:13.610
if I keep pressing zero
what do I expect to happen?

240
00:17:15.710 --> 00:17:19.230
Nothing, right, which is exactly
what's happening, correct, right?

241
00:17:19.230 --> 00:17:20.280
Because what's happening here?

242
00:17:20.280 --> 00:17:25.240
If I press 0, it's asking, hey,
if buffer is equal to 0, which it is,

243
00:17:25.240 --> 00:17:28.940
didn't replace it and
replaces it with 0, right?

244
00:17:28.940 --> 00:17:31.730
So next time around, it'll work
just the way that we expect it to.

245
00:17:32.870 --> 00:17:37.431
So that's works That's
called like looking for

246
00:17:37.431 --> 00:17:40.140
edge cases, right,
like that's something like QA

247
00:17:40.140 --> 00:17:44.278
engineers are very good at doing like
they'll try everything to make it break.

248
00:17:44.278 --> 00:17:48.404
That's a good kind of mindset to get into
of like how can I break this, right?

249
00:17:48.404 --> 00:17:50.321
How can I throw a wrench into this?

250
00:17:53.823 --> 00:17:58.690
Okay, cool we are now done with all
of the number parts of this, right?

251
00:17:58.690 --> 00:18:00.410
So that's all working
the way we expect it to.

252
00:18:01.600 --> 00:18:09.713
So now we have to go do
the symbol part of this.

253
00:18:09.713 --> 00:18:14.691
So we'll go code up the stub
that's what I would call this here

254
00:18:14.691 --> 00:18:18.632
this handleSymbol right
now is a function stub.

255
00:18:18.632 --> 00:18:22.057
We're basically saying that here's
a function it's gonna work later.

256
00:18:22.057 --> 00:18:26.190
But for now we're just going to make
a function that kind of holds its place.

257
00:18:26.190 --> 00:18:29.010
My thing that I did with stubs is
I always put a console.log here so

258
00:18:29.010 --> 00:18:32.100
that I know that this stub is
being called correctly, right?

259
00:18:32.100 --> 00:18:36.565
So, that later if I come back tomorrow and
start working on this, I know that if I

260
00:18:36.565 --> 00:18:41.180
press this, the stub is just going to log
out, hey, you called the stub, right?

261
00:18:41.180 --> 00:18:45.183
So, it's kind of like communication
with your future self.

