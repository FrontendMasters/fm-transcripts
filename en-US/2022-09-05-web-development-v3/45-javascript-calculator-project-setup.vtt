WEBVTT

1
00:00:00.771 --> 00:00:03.471
Here is your project.

2
00:00:03.471 --> 00:00:05.792
You are gonna make a calculator.

3
00:00:09.591 --> 00:00:14.539
And I'm gonna make you do all the CSS too,
cause this is some fun CSS.

4
00:00:14.539 --> 00:00:16.244
I think it is.

5
00:00:16.244 --> 00:00:17.148
I want you to think about a calculator.

6
00:00:17.148 --> 00:00:20.749
I imagine all of us have
used a calculator before.

7
00:00:20.749 --> 00:00:24.813
And I love this thought experiment
because it forces you to break down.

8
00:00:24.813 --> 00:00:28.537
It's like wait, how does
a calculator actually work, right?

9
00:00:28.537 --> 00:00:30.079
You're into it.

10
00:00:30.079 --> 00:00:34.392
How to work with a calculator just by
having used one probably since you were

11
00:00:34.392 --> 00:00:34.947
a child.

12
00:00:34.947 --> 00:00:39.506
But we actually have to like sit down and
think about like the logical process,

13
00:00:39.506 --> 00:00:42.909
like wait, if I hit 25 plus,
it stores 25 somewhere.

14
00:00:42.909 --> 00:00:43.758
Where does it store it?

15
00:00:43.758 --> 00:00:45.793
I don't know, it's black magic, right?

16
00:00:45.793 --> 00:00:49.966
Do the magic gremlins of
the calculator store them?

17
00:00:49.966 --> 00:00:51.305
I don't know.

18
00:00:51.305 --> 00:00:54.072
Or if I hit Clear,
that does something as well, right?

19
00:00:54.072 --> 00:00:59.945
But I want you to write a calculator.

20
00:00:59.945 --> 00:01:06.640
So like 25 plus 3 equals 28, right?

21
00:01:06.640 --> 00:01:11.807
Or 80, clear, 80 divided by 4 equals 20.

22
00:01:13.166 --> 00:01:17.005
So this is mostly based
on the iOS calculator.

23
00:01:17.005 --> 00:01:20.252
It looks like one of you have iOS.

24
00:01:22.777 --> 00:01:26.102
So this is my implementation of it.

25
00:01:26.102 --> 00:01:30.758
Notice I had like fun little hover states
that if you hover over it lightens it

26
00:01:30.758 --> 00:01:33.468
a little bit so it looks clickable, right?

27
00:01:33.468 --> 00:01:34.259
Same thing with the orange ones.

28
00:01:34.259 --> 00:01:39.752
If you push it, it gets darker so
that it looks like a press down button,

29
00:01:39.752 --> 00:01:42.327
all sorts of fun stuff like that.

30
00:01:42.327 --> 00:01:45.737
This is a super incomplete,
very naive implementation of a calculator.

31
00:01:45.737 --> 00:01:49.294
And that's what we're going for.

32
00:01:49.294 --> 00:01:51.563
So make it look somewhat like this.

33
00:01:51.563 --> 00:01:54.169
I ended up using grid.

34
00:01:54.169 --> 00:01:57.442
Should function like a normal calculator.

35
00:01:57.442 --> 00:02:02.185
Don't implement the percent or period,
just assume everything is an integer.

36
00:02:02.185 --> 00:02:07.184
Again, I don't want you to
go off the rails on this.

37
00:02:07.184 --> 00:02:08.361
C means clear.

38
00:02:08.361 --> 00:02:14.396
So if I have 58 and
I just hit C, it goes back to 0.

39
00:02:14.396 --> 00:02:17.844
Doing the back arrow will be extra credit.

40
00:02:17.844 --> 00:02:20.905
So if I do 25, and it's like,
I actually meant to do 26,

41
00:02:20.905 --> 00:02:22.434
I can hit back arrow 6, right?

42
00:02:28.001 --> 00:02:32.386
Don't worry if the number is too long for
the screen, I don't care, right?

43
00:02:32.386 --> 00:02:35.546
So if someone does 26 times 666699888,

44
00:02:35.546 --> 00:02:38.791
right, equals, times,
yeah, whatever you want.

45
00:02:42.951 --> 00:02:49.537
So, yeah, don't worry too much
about overflow on the screen.

46
00:02:49.537 --> 00:02:55.128
And then calculators tend
to have funny behaviors

47
00:02:55.128 --> 00:03:00.862
when you hit 0,
like if I hit 25 times 3 equals.

48
00:03:00.862 --> 00:03:03.851
If this was a calculator and I hit 7,

49
00:03:03.851 --> 00:03:08.681
you would expect it to clear it and
it'd just be 7, right?

50
00:03:08.681 --> 00:03:10.228
I think mine just adds it.

51
00:03:10.228 --> 00:03:14.389
So I don't care what you do after
someone hits equals, that's up to you.

52
00:03:18.174 --> 00:03:19.514
So you can make it work how you
would expect a calculate to work.

53
00:03:19.514 --> 00:03:23.939
Or you can just follow my way,
which is just to keep adding things.

54
00:03:23.939 --> 00:03:25.134
That's super fine for me.

55
00:03:26.456 --> 00:03:32.990
And that is it for
the product requirements.

56
00:03:32.990 --> 00:03:35.473
So I gave you a list of things,
I gave you a design.

57
00:03:35.473 --> 00:03:40.170
At this point I would be expected to like
you as the developer that I hired to work

58
00:03:40.170 --> 00:03:44.526
on my special calculator project to
go out and be able to implement this.

59
00:03:44.526 --> 00:03:46.409
Some tips and tricks.

60
00:03:46.409 --> 00:03:47.503
This is a big problem, right?

61
00:03:47.503 --> 00:03:51.941
A calculator is a non-trivial
problem to work on.

62
00:03:51.941 --> 00:03:55.297
It's easier if you take this and break it
down into smaller problems and smaller

63
00:03:55.297 --> 00:03:59.075
problems, because big problems are hard to
solve, small problems are easier to solve.

64
00:03:59.075 --> 00:04:01.768
So try and
make big problems small problems.

65
00:04:01.768 --> 00:04:03.902
The way you do that is make functions.

66
00:04:03.902 --> 00:04:07.593
Make functions that call other other
functions, that call other functions and

67
00:04:07.593 --> 00:04:09.698
have very small, very succinct functions.

68
00:04:09.698 --> 00:04:14.545
Don't have big functions,
have little functions.

69
00:04:14.545 --> 00:04:16.845
Personally, I wrote all the HTML and
CSS first.

70
00:04:16.845 --> 00:04:20.525
I found that easier,
you don't have to do it that way.

71
00:04:20.525 --> 00:04:24.956
Once I did that then I
did all the JavaScript.

72
00:04:25.969 --> 00:04:27.176
For the font of the results screen, so

73
00:04:27.176 --> 00:04:28.625
like this part right
here I used model space.

74
00:04:28.625 --> 00:04:31.012
I found that to be a good looking font for
that.

75
00:04:31.012 --> 00:04:32.235
Feel free to do whatever you want.

76
00:04:33.979 --> 00:04:36.169
There's so
many correct ways to write this.

77
00:04:36.169 --> 00:04:37.105
I wrote it one way.

78
00:04:37.105 --> 00:04:38.281
There are other ways to do it.

79
00:04:38.281 --> 00:04:42.542
Feel free to do it your way,
you do not have to do it my way.

80
00:04:42.542 --> 00:04:46.096
It's a good idea to make these buttons,

81
00:04:46.096 --> 00:04:51.438
because now if I hit Tab,
you can see the blue outline there.

82
00:04:51.438 --> 00:04:52.933
So this is actually pretty accessible.

83
00:04:52.933 --> 00:04:57.264
So if I hit 8, 9 times 9, and

84
00:04:57.264 --> 00:05:01.097
then I go down here and hit,

85
00:05:01.097 --> 00:05:06.111
all the way down equals, it works.

86
00:05:06.111 --> 00:05:09.345
I didn't have to do anything
extra to do that, but

87
00:05:09.345 --> 00:05:14.581
going through things via tab is a big
thing if someone can't use a mouse, right?

88
00:05:14.581 --> 00:05:16.051
So that's a good idea to use buttons,
you just get that for free.

89
00:05:16.051 --> 00:05:22.172
I didn't have to do anything extra,
buttons will just do that.

90
00:05:29.823 --> 00:05:30.711
I talked about how to get
the spacing here nicely.

91
00:05:30.711 --> 00:05:36.014
You can do this with flex,
you can do it with grid as well.

92
00:05:36.014 --> 00:05:39.885
Both of those will work.

93
00:05:39.885 --> 00:05:41.355
Sometimes I do the math
to get things right.

94
00:05:41.355 --> 00:05:44.077
Sometimes I just guess and check.

95
00:05:44.077 --> 00:05:45.530
That's up to you.

96
00:05:45.530 --> 00:05:48.908
And you can add a class and
you get these orange buttons.

97
00:05:48.908 --> 00:05:52.939
Or you can put them in rows and
add last child or like nth child.

98
00:05:52.939 --> 00:05:55.726
All valid ways to get
the orange buttons on the side.

99
00:06:00.797 --> 00:06:02.537
And again, no wrong way to do this.

100
00:06:02.537 --> 00:06:06.981
It took me about 80 lines of JavaScript.

101
00:06:06.981 --> 00:06:08.055
So if you're writing 500,

102
00:06:08.055 --> 00:06:10.964
you've probably asked yourself questions
about how you can make things simpler.

103
00:06:10.964 --> 00:06:15.879
I use console.log() everywhere
when I'm writing code.

104
00:06:15.879 --> 00:06:19.290
It's just an easy way of debugging.

105
00:06:19.290 --> 00:06:23.174
Many small functions is
preferable to one large function.

106
00:06:23.174 --> 00:06:27.725
In general, what you should do is
you should have some sort of event

107
00:06:27.725 --> 00:06:30.666
listener way for the user to do something.

108
00:06:30.666 --> 00:06:35.660
And then if they say, okay, I see that
they pressed plus delegate to a plus

109
00:06:35.660 --> 00:06:39.385
function, or
delegate to a number function, right?

110
00:06:39.385 --> 00:06:44.403
It's much more preferable
to have smaller functions.

111
00:06:44.403 --> 00:06:48.287
And you can have one event listener for
everything, or

112
00:06:48.287 --> 00:06:53.699
you can just go ahead and add an event
listener for every individual button.

113
00:06:53.699 --> 00:06:54.503
That is very much up to you.

114
00:06:54.503 --> 00:06:55.965
Yeah, one more thing that I wanna call,

115
00:06:55.965 --> 00:06:58.420
because this will almost certainly
be a problem for you, is types.

116
00:06:58.420 --> 00:07:00.838
So we've talked a little bit about like
the difference between string 4 and

117
00:07:00.838 --> 00:07:01.496
number 4, right?

118
00:07:01.496 --> 00:07:06.142
So if I bring this up and I say, console,

119
00:07:06.142 --> 00:07:09.984
4 is double equal to 4, right?

120
00:07:09.984 --> 00:07:15.218
But 4 is not triple equals to 4, right?

121
00:07:15.218 --> 00:07:17.869
That's because this is a number 4 and
this is a string 4.

122
00:07:17.869 --> 00:07:20.163
So these are double equals true, but

123
00:07:20.163 --> 00:07:24.458
they're not triple equals true
because they're not the same type.

124
00:07:26.735 --> 00:07:33.617
So if I have this div right here, sorry,
is this a div, or it might be a paragraph?

125
00:07:33.617 --> 00:07:35.069
This is a div, okay?

126
00:07:35.069 --> 00:07:41.680
So I have a div here that
just contains the number 10.

127
00:07:41.680 --> 00:07:47.436
And if I say document.querySelector, and
I grab out of it the inner text of it.

128
00:07:47.436 --> 00:07:49.330
What is the inner text of this?

129
00:07:49.330 --> 00:07:53.097
Is this going to be number 10 or
string 10?

130
00:07:55.473 --> 00:07:58.430
Inner text is a strong hint here.

131
00:07:58.430 --> 00:08:00.428
It's string, right?

132
00:08:00.428 --> 00:08:02.614
So the DOM is always gonna
give you back strings.

133
00:08:02.614 --> 00:08:05.918
It never gives you back numbers, right?

134
00:08:05.918 --> 00:08:10.265
So if you're trying to say,
if number is triple equals to this,

135
00:08:10.265 --> 00:08:14.217
it's never gonna be true
because it's not the same type.

136
00:08:14.217 --> 00:08:16.559
So this is what I was showing you here,
console.log.

137
00:08:16.559 --> 00:08:18.171
So I have number 10 here, right?

138
00:08:18.171 --> 00:08:20.785
Num, type of num is going to be 10,
number.

139
00:08:20.785 --> 00:08:24.662
Typeof just shows you what
type something is, right?

140
00:08:27.838 --> 00:08:31.105
Okay, and then if I come back here and
say typeof( inner text).

141
00:08:31.105 --> 00:08:34.296
Despite the fact that I literally
set it right here, right?

142
00:08:34.296 --> 00:08:37.206
I set inner texts to be num.

143
00:08:37.206 --> 00:08:40.808
And then I ask for it back,
it already converts it to a string.

144
00:08:40.808 --> 00:08:42.211
So you can see here it is a string.

145
00:08:46.743 --> 00:08:50.803
So there's a bunch of, yeah, and

146
00:08:50.803 --> 00:08:54.447
a funny example of doing this.

147
00:08:54.447 --> 00:09:00.879
If I say 5 + 5, If they're strings,

148
00:09:00.879 --> 00:09:05.642
it thinks like, the way I add those
together, that's string concatenation, so

149
00:09:05.642 --> 00:09:07.223
5 + 5 is 55 for strings.

150
00:09:07.223 --> 00:09:11.583
Not 5+5 like that, right?

151
00:09:14.890 --> 00:09:18.418
So there's a couple of
easy ways to do that.

152
00:09:18.418 --> 00:09:21.425
If I have 5 like this and
I want it to be a number,

153
00:09:21.425 --> 00:09:24.884
the easiest way,
if I just add a plus in the front of it,

154
00:09:24.884 --> 00:09:28.890
this simplicity converts anything
inside of this to a number.

155
00:09:30.521 --> 00:09:32.182
It's called the unary plus.

156
00:09:32.182 --> 00:09:36.386
Not that you really need to care about
that, but that's what that is called.

157
00:09:36.386 --> 00:09:41.880
Pretty sure you can also say, To,

158
00:09:41.880 --> 00:09:47.758
what is the function, value of?

159
00:09:50.083 --> 00:09:51.519
No, that's not the one.

160
00:09:51.519 --> 00:09:53.624
I think new number does work though.

161
00:09:56.308 --> 00:10:01.341
Or, See,

162
00:10:01.341 --> 00:10:04.129
I have my own problems trying
to remember what this is.

163
00:10:04.129 --> 00:10:06.783
ParseInt, that's really
the one I'm looking for.

164
00:10:10.411 --> 00:10:11.417
So, you can do that as well.

165
00:10:11.417 --> 00:10:16.274
You can take a string and
you can pass it on to Number.parseInt() it

166
00:10:16.274 --> 00:10:19.809
will turn it into an integer for
you, or a number.

167
00:10:19.809 --> 00:10:21.433
So a couple of ways of doing that.

168
00:10:21.433 --> 00:10:26.218
You can either do the plus this way,
it's a little clever.

169
00:10:26.218 --> 00:10:29.408
But if someone's reading your code they
may not be familiar with that trick in

170
00:10:29.408 --> 00:10:32.323
JavaScript, whereas like
Number.parseInt() is very explicit.

171
00:10:32.323 --> 00:10:34.418
You are passing an int and
getting back a number.

172
00:10:40.250 --> 00:10:43.367
Okay, you can also use the typeof
operator if you need to.

173
00:10:48.927 --> 00:10:52.349
Yeah, typeof is a weird one.

174
00:10:52.349 --> 00:10:57.441
But if you're just worrying
about numbers like typeof(5),

175
00:10:57.441 --> 00:11:03.962
if you're just using like that, it's
totally fine to use typeof as well, okay?

176
00:11:03.962 --> 00:11:06.784
And then you should end up
with something like this.

177
00:11:09.817 --> 00:11:15.267
Okay, there's my HTML, there's my CSS,
there's my JavaScript.

178
00:11:15.267 --> 00:11:18.364
I'm gonna encourage you to try and
do this on your own.

179
00:11:18.364 --> 00:11:20.470
I'm going to imagine this will
take you longer than an hour.

180
00:11:20.470 --> 00:11:22.479
Certainly it took me longer
than an hour to do this.

181
00:11:22.479 --> 00:11:26.142
It might take you several hours,
it might take you a couple of days and

182
00:11:26.142 --> 00:11:27.290
coming back to this.

183
00:11:27.290 --> 00:11:29.115
All of those are totally acceptable.

184
00:11:29.115 --> 00:11:31.489
So this is not a simple thing.

185
00:11:31.489 --> 00:11:33.105
But I have given you all the tools
that you need to be able to do this.

186
00:11:33.105 --> 00:11:35.406
So, good luck.

