WEBVTT

1
00:00:00.000 --> 00:00:02.515
The next thing you should know,

2
00:00:02.515 --> 00:00:07.087
I'm gonna give you the most
basic intro to Git and GitHub.

3
00:00:07.087 --> 00:00:10.531
There is an entire course on
Frontend Masters for Git.

4
00:00:10.531 --> 00:00:13.141
But it's really critical for
developers to get up and

5
00:00:13.141 --> 00:00:15.411
going with Git fairly
early in their careers.

6
00:00:15.411 --> 00:00:18.257
So I'm gonna show you how to
do this all with VS Code,

7
00:00:18.257 --> 00:00:20.732
because VS Code can handle all of Git for
you.

8
00:00:23.508 --> 00:00:26.369
But it's a way for
you to be able to share your code.

9
00:00:26.369 --> 00:00:30.680
So if you look at this on
complete-intro-to-web-dev,

10
00:00:30.680 --> 00:00:36.640
this is all of the code for that entire
course website that we've been using here.

11
00:00:36.640 --> 00:00:38.101
It's all available here.

12
00:00:38.101 --> 00:00:43.062
If you wanna look at my CSS,
right, this is the CSS for

13
00:00:43.062 --> 00:00:47.154
that entire website, right here, right?

14
00:00:47.154 --> 00:00:50.696
It's a superpower that I can
share all of this code with you.

15
00:00:50.696 --> 00:00:55.540
You can look at it, you can dissect it,
you can fix things and open pull requests.

16
00:00:55.540 --> 00:00:59.099
It's a way for
coders to collaborate with each other.

17
00:00:59.099 --> 00:01:03.148
Just like we have Google Docs so
that multiple people can work on the same

18
00:01:03.148 --> 00:01:07.819
Word Document, we have GitHub, so multiple
coders can all work on the same code.

19
00:01:07.819 --> 00:01:11.257
So I wanna disambiguate a little
bit what Git is versus GitHub.

20
00:01:11.257 --> 00:01:14.448
GitHub is a product which
is owned by Microsoft, and

21
00:01:14.448 --> 00:01:18.156
it's a central repository for
all of people to use with Git.

22
00:01:18.156 --> 00:01:20.785
You do not have to use Git with GitHub.

23
00:01:20.785 --> 00:01:26.273
Git is just the tool that allows you
to commit new updates to your code or

24
00:01:26.273 --> 00:01:28.890
change things or delete things.

25
00:01:28.890 --> 00:01:30.738
It's just like a local tool.

26
00:01:30.738 --> 00:01:32.388
Git is very old.

27
00:01:32.388 --> 00:01:37.770
Git was created by the same person
that created Linux, Linus Torvalds.

28
00:01:37.770 --> 00:01:41.136
And he likes to say that Git
was named after himself, right,

29
00:01:41.136 --> 00:01:42.526
cuz he's a Git, right?

30
00:01:42.526 --> 00:01:44.957
I don't know if you're familiar with,

31
00:01:44.957 --> 00:01:48.467
I think it's British slang
where git is an idiot, right?

32
00:01:48.467 --> 00:01:51.805
So Git's quite old,
they invented it for Linux.

33
00:01:51.805 --> 00:01:55.637
It's a little difficult to use sometimes,
so

34
00:01:55.637 --> 00:02:00.464
that's why I'm gonna show you
how to do this with VS Code.

35
00:02:00.464 --> 00:02:02.479
So GitHub is just this product.

36
00:02:02.479 --> 00:02:06.680
Again, it was bought by
Microsoft maybe five years ago,

37
00:02:06.680 --> 00:02:09.577
four years ago, something like that.

38
00:02:09.577 --> 00:02:12.646
And you and
I are going to take one of your projects.

39
00:02:12.646 --> 00:02:15.398
Let's go and
maybe let's do your Word Masters 1,

40
00:02:15.398 --> 00:02:18.033
cuz that's probably a fun
one to keep a track of.

41
00:02:18.033 --> 00:02:22.272
So let's open that one here, Word Masters.

42
00:02:22.272 --> 00:02:26.517
You and I are going to put this on GitHub.

43
00:02:26.517 --> 00:02:33.786
First things first, we have to start a Git
repo, what's called a knit, a Git repo.

44
00:02:33.786 --> 00:02:38.186
So we're gonna go to this little
tab here with the three dots here,

45
00:02:38.186 --> 00:02:39.768
the source control 1.

46
00:02:39.768 --> 00:02:41.180
And there's a button here.

47
00:02:43.432 --> 00:02:46.255
There's just a directly
published to GitHub button.

48
00:02:46.255 --> 00:02:49.228
Didn't know that,
we're gonna do the long way.

49
00:02:49.228 --> 00:02:52.217
Initialize Repository, so
you're gonna click that.

50
00:02:52.217 --> 00:02:57.166
And all of a sudden,
this becomes a Git repo, okay?

51
00:02:57.166 --> 00:03:01.471
So far, so good, we don't have anything
stored in our Git repo, right?

52
00:03:01.471 --> 00:03:05.026
It'd be like an empty folder, you have
a folder, but there's nothing in it.

53
00:03:07.314 --> 00:03:08.618
So as you can see here,

54
00:03:08.618 --> 00:03:13.243
these are all the various different
changes I've made since last time I saved.

55
00:03:13.243 --> 00:03:16.469
I've never saved, so there's no changes.

56
00:03:16.469 --> 00:03:21.732
So what I'm gonna do is I'm gonna
say this is my initial code commit.

57
00:03:21.732 --> 00:03:24.114
It's some message that you're leaving for
your future self.

58
00:03:24.114 --> 00:03:27.866
It's like this is what I
did when I save this, and

59
00:03:27.866 --> 00:03:30.991
I'm gonna click the checkmark up here.

60
00:03:34.680 --> 00:03:39.433
So let's do it a little bit different.

61
00:03:39.433 --> 00:03:41.910
So we're not gonna click
the checkmark yet.

62
00:03:41.910 --> 00:03:45.470
What we're gonna do instead,
we're gonna click + on all of these.

63
00:03:48.542 --> 00:03:56.435
And so now, these are all what are called
staged commits, Or staged changes rather.

64
00:03:56.435 --> 00:03:58.637
So there's kinda three statuses in Git.

65
00:03:58.637 --> 00:04:03.905
There's unstaged, there's staged,
and there's committed.

66
00:04:03.905 --> 00:04:07.030
Before you can commit something,
you have to stage it.

67
00:04:07.030 --> 00:04:09.849
And that's basically,
the only reason that you'll stage things

68
00:04:09.849 --> 00:04:12.615
is you wanna bundle up all of your
changes into one bigger commit,

69
00:04:12.615 --> 00:04:15.351
right, so that you can commit
a whole feature at a time, right?

70
00:04:15.351 --> 00:04:20.422
Let's say I added a new
login flow to my website.

71
00:04:20.422 --> 00:04:24.050
I could add the 30 files I had
to change to the stage, and

72
00:04:24.050 --> 00:04:28.905
then I'll hit Commit to commit all of
them at once into one package, right?

73
00:04:28.905 --> 00:04:31.801
That's the idea behind staged commits.

74
00:04:31.801 --> 00:04:34.681
Okay, so now I have all of these,
you can see it says,

75
00:04:34.681 --> 00:04:36.539
they are staged changes, right?

76
00:04:36.539 --> 00:04:44.226
And I put a message up here of initial
code commit or something like that.

77
00:04:44.226 --> 00:04:45.863
And then I'll hit Check.

78
00:04:49.589 --> 00:04:53.422
Okay, That made a commit.

79
00:04:55.132 --> 00:04:59.644
So now, if you click on these,
you can view.

80
00:05:06.831 --> 00:05:07.900
Yeah, anyway.

81
00:05:10.295 --> 00:05:13.236
No, that's not what I wanted to do,
I don't want us to do that.

82
00:05:13.236 --> 00:05:18.845
Okay, Cool,
I've now made my first commit, right?

83
00:05:18.845 --> 00:05:23.395
What's cool about this, let's say I do
a bunch of stuff and, I don't know,

84
00:05:23.395 --> 00:05:28.029
let's say I do something really dumb and
accidentally delete a bunch of code.

85
00:05:28.029 --> 00:05:31.828
And now, I'm like, I've saved it,
it's gone, I'm really upset.

86
00:05:31.828 --> 00:05:35.395
The nice thing about Git is it
keeps your entire commit record,

87
00:05:35.395 --> 00:05:36.886
every single one of them.

88
00:05:36.886 --> 00:05:40.527
So I can say, I broke this,
I wanna go back to the way it was.

89
00:05:40.527 --> 00:05:43.509
So you can see here,
I have these changes here.

90
00:05:43.509 --> 00:05:48.014
There's this back arrow 1,
which is discard everything.

91
00:05:48.014 --> 00:05:52.715
So if I click Discard here, it's gonna be,
are you sure you wanna discard this?

92
00:05:52.715 --> 00:05:54.993
This will take me back
to where it was before.

93
00:05:54.993 --> 00:05:57.674
So it's like a safety thing as well,
right?

94
00:05:57.674 --> 00:06:02.796
I have definitely deleted code before and
used Git to save me.

95
00:06:04.765 --> 00:06:06.089
So that's positive.

96
00:06:08.867 --> 00:06:09.769
All right, so

97
00:06:09.769 --> 00:06:14.294
the next thing that we're gonna do
is we're gonna come back to GitHub.

98
00:06:14.294 --> 00:06:20.646
If you don't have a GitHub account here,
It'll look something like this.

99
00:06:20.646 --> 00:06:24.590
You'll have to sign up for GitHub,
which you should definitely do,

100
00:06:24.590 --> 00:06:26.972
all coders should have a GitHub account.

101
00:06:26.972 --> 00:06:29.277
It's basically the modern resume for
a developer.

102
00:06:30.862 --> 00:06:33.972
Then we're gonna click up here and
say, create a new repository.

103
00:06:33.972 --> 00:06:38.552
A repository is like one project,
you can think of this that way.

104
00:06:38.552 --> 00:06:42.018
And I'm going to create
good old wordy-masters.

105
00:06:44.611 --> 00:06:48.257
Make it public, you can ignore
probably the rest of this stuff and

106
00:06:48.257 --> 00:06:50.063
just click Create Repository.

107
00:06:53.756 --> 00:07:00.719
Okay, and then here,
Usually HTTPS is the one that people want.

108
00:07:00.719 --> 00:07:01.881
Go ahead and do that.

109
00:07:01.881 --> 00:07:05.831
Click on HTTPS and copy that.

110
00:07:05.831 --> 00:07:07.368
I end up using the SSH one more, but

111
00:07:07.368 --> 00:07:09.440
you have to set up some
stuff to make that work.

112
00:07:09.440 --> 00:07:10.312
Let's ignore that.

113
00:07:10.312 --> 00:07:13.767
Just click the HTTPS one, copy that.

114
00:07:15.647 --> 00:07:21.047
Come back over to your repository here,
and then we need to add a remote.

115
00:07:23.384 --> 00:07:26.451
Or we can click Publish Branch,
I think this is actually what we want.

116
00:07:30.895 --> 00:07:32.619
This'll actually go ahead and create.

117
00:07:32.619 --> 00:07:35.149
I'm signed into GitHub here, so
it's doing a bunch of stuff for me.

118
00:07:35.149 --> 00:07:38.965
I don't wanna do that,
I wanna add a remote.

119
00:07:38.965 --> 00:07:42.649
So this three dots up here, click that.

120
00:07:42.649 --> 00:07:44.644
Click Remote and click Add Remote.

121
00:07:44.644 --> 00:07:46.964
Remote is somewhere to push to, right?

122
00:07:46.964 --> 00:07:50.106
Typically, you're gonna have one,
maybe two remotes.

123
00:07:50.106 --> 00:07:55.731
One will be on GitHub and
another one might be an upstream one.

124
00:07:55.731 --> 00:08:01.752
So if I have my own copy of the project,
another is the company's copy, right?

125
00:08:01.752 --> 00:08:05.356
You might have two, but
typically, you'll just have one.

126
00:08:05.356 --> 00:08:10.670
But suffice to say a remote is
where you're going to push to.

127
00:08:10.670 --> 00:08:13.253
I copied that URL up here.

128
00:08:15.700 --> 00:08:17.604
And you can click that.

129
00:08:17.604 --> 00:08:24.207
Remote name, you're almost always gonna
call it origin, just by convention.

130
00:08:24.207 --> 00:08:28.089
The only one that you might have,
if you have your copied, call that origin,

131
00:08:28.089 --> 00:08:30.971
if there's a company copied,
you'd call it upstream.

132
00:08:30.971 --> 00:08:33.131
We're gonna call this one origin.

133
00:08:33.131 --> 00:08:34.463
And there we go.

134
00:08:36.690 --> 00:08:40.023
So I have that, that's fine.

135
00:08:42.541 --> 00:08:48.741
And then now, we're going to say Push.

136
00:08:52.526 --> 00:08:56.523
It might say that this has no branch
called either main or master,

137
00:08:56.523 --> 00:08:59.151
depending on what version of Git you have.

138
00:08:59.151 --> 00:09:04.139
And you're just gonna say OK,
you're gonna be creating a new branch.

139
00:09:04.139 --> 00:09:06.200
Okay, so now I've done that.

140
00:09:06.200 --> 00:09:11.296
And if I go back over here and
I would just refresh the page,

141
00:09:11.296 --> 00:09:16.188
you can now see my Word Master's
code hosted on GitHub.

142
00:09:16.188 --> 00:09:19.106
Now, some of you might
be seeing some errors.

143
00:09:19.106 --> 00:09:24.330
The one that I saw earlier was
one that looked like this.

144
00:09:27.330 --> 00:09:31.168
So if you do that,
you might have to run this first line.

145
00:09:31.168 --> 00:09:34.735
Just copy git config pull.rebase false.

146
00:09:34.735 --> 00:09:35.806
That might help.

147
00:09:35.806 --> 00:09:41.800
Some of you might be seeing you
have to set up Git, in which case,

148
00:09:41.800 --> 00:09:48.247
you have to GitHub set up, username and
password, set up username.

149
00:09:54.157 --> 00:09:57.361
So if you have that problem
setting your username in Git,

150
00:09:57.361 --> 00:10:01.389
we'll link this in the course notes and
I'll link it in my dock as well.

151
00:10:01.389 --> 00:10:05.581
You'll basically just have to copy and
paste this, and

152
00:10:05.581 --> 00:10:11.300
you might have to set your email as well,
so git config user.email as well.

153
00:10:13.229 --> 00:10:15.394
So instead of user.name,
it will be user.email,

154
00:10:15.394 --> 00:10:16.929
then you just set your email as well.

155
00:10:16.929 --> 00:10:20.653
In any case, now you have code
that you can share with people.

156
00:10:20.653 --> 00:10:23.054
No, I'm gonna leave
this basically at that.

157
00:10:23.054 --> 00:10:25.609
There's a ton more that
you can learn about Git.

158
00:10:25.609 --> 00:10:30.451
You can pull the code back down,
you can fork other people's repositories,

159
00:10:30.451 --> 00:10:32.995
you can make varying branches on stuff.

160
00:10:32.995 --> 00:10:37.292
But if you don't know Git,
you should definitely take a UNIX course.

161
00:10:37.292 --> 00:10:45.787
That will help you become more accustomed
to a pretty hard to use tool sometimes.

162
00:10:45.787 --> 00:10:48.955
I showed you how to do this
in Visual Studio Code, but

163
00:10:48.955 --> 00:10:52.929
there's also a GitHub desktop
client that makes it really easy.

164
00:10:52.929 --> 00:10:56.727
Or me personally, I end up doing
everything in the command line anyway, so

165
00:10:56.727 --> 00:10:59.215
you can also learn to just
do in the command line.

166
00:10:59.215 --> 00:11:04.047
All of them are super valid,
modern tools for Git are pretty good.

