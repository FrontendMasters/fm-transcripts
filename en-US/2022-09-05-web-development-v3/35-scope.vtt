WEBVTT

1
00:00:00.020 --> 00:00:00.922
Scope.

2
00:00:00.922 --> 00:00:04.241
This is hard for a lot of new developers.

3
00:00:04.241 --> 00:00:07.517
So we're just gonna go through a bunch
of examples cuz I think that that makes

4
00:00:07.517 --> 00:00:09.014
this the easiest thing possible.

5
00:00:09.014 --> 00:00:12.500
You've might have already
hit some scope problems but

6
00:00:12.500 --> 00:00:14.931
let's just talk about what scope is.

7
00:00:14.931 --> 00:00:17.864
Variables have this idea of scope.

8
00:00:17.864 --> 00:00:20.798
So there's a time where
a variable is used and

9
00:00:20.798 --> 00:00:25.278
then as soon as the variable stops
being used, the JavaScript engine

10
00:00:25.278 --> 00:00:29.387
will clean it up and not allow
you to use that variable anymore.

11
00:00:29.387 --> 00:00:36.282
So let's just take an example that I have
this function here called addFive and

12
00:00:36.282 --> 00:00:42.980
then I declare a variable again inside
of this function of addFive, right?

13
00:00:42.980 --> 00:00:48.199
If I try and
console.log some variable down here

14
00:00:48.199 --> 00:00:53.425
outside of the function,
it's not gonna work.

15
00:00:53.425 --> 00:00:56.861
It's out of scope.

16
00:00:56.861 --> 00:01:01.541
This function only exists
inside of this block.

17
00:01:01.541 --> 00:01:07.459
So if I call right here,
console.log some variable.

18
00:01:09.516 --> 00:01:12.533
This works, line three works, right?

19
00:01:12.533 --> 00:01:15.537
Cuz I call it addFfive here.

20
00:01:15.537 --> 00:01:19.608
And then this line does get run.

21
00:01:19.608 --> 00:01:24.697
This does work but then the function
concludes and it comes back down here.

22
00:01:24.697 --> 00:01:29.372
This time it's out of scope,
thrown away and no longer used.

23
00:01:29.372 --> 00:01:33.907
Does that make sense?

24
00:01:33.907 --> 00:01:38.920
Kind of the best rule of thumb
is variables are in scope for

25
00:01:38.920 --> 00:01:43.208
whatever the curly braces
are that surround it.

26
00:01:43.208 --> 00:01:48.255
So another example of this would be like,

27
00:01:48.255 --> 00:01:52.014
if true const thing equals 5.

28
00:01:52.014 --> 00:01:56.237
I don't know, something like that.

29
00:01:56.237 --> 00:02:00.915
So this block does get run
because if true is always true,

30
00:02:00.915 --> 00:02:03.358
this is always gonna get run.

31
00:02:03.358 --> 00:02:08.210
Or you can do 2 plus 2 triple
equals 4 that's, right.

32
00:02:08.210 --> 00:02:10.669
If something that's
definitely gonna be true.

33
00:02:10.669 --> 00:02:14.041
If I run console.log thing down here,
what do you think's gonna happen?

34
00:02:20.221 --> 00:02:21.294
It's not defined, right?

35
00:02:21.294 --> 00:02:25.451
So, this was in scope
between these curly braces.

36
00:02:25.451 --> 00:02:28.807
So this existed in this
short span of time.

37
00:02:28.807 --> 00:02:33.598
But then as soon as this curly
brace happens here, it's gone.

38
00:02:33.598 --> 00:02:37.405
It's been thrown away.

39
00:02:37.405 --> 00:02:41.179
If I move this console.log
inside of the if statement,

40
00:02:41.179 --> 00:02:43.764
what do you think's going to happen?

41
00:02:43.764 --> 00:02:46.709
It's gonna work.

42
00:02:46.709 --> 00:02:51.694
So you can see here five gets logged
out here because we're inside of

43
00:02:51.694 --> 00:02:53.097
the curly braces.

44
00:02:57.182 --> 00:02:57.843
How do you feel about that?

45
00:02:57.843 --> 00:03:01.797
Good so far?

46
00:03:01.797 --> 00:03:05.553
So this is why I want
you to use constant let.

47
00:03:05.553 --> 00:03:07.065
Lets the same thing,

48
00:03:07.065 --> 00:03:11.866
everything that I just told you
about const equally applies to let.

49
00:03:14.134 --> 00:03:18.306
Var is a little different,
the scoping and var works differently.

50
00:03:18.306 --> 00:03:21.757
We're not going to talk about it
cuz I don't wanna confuse you but

51
00:03:21.757 --> 00:03:25.291
old we don't use it anymore just
know that var works differently.

52
00:03:25.291 --> 00:03:30.448
Const is more predictable and
how these things work.

53
00:03:30.448 --> 00:03:35.178
Okay, so
going back to our original example here,

54
00:03:35.178 --> 00:03:39.693
some variable exists
here doesn't exist here.

55
00:03:42.500 --> 00:03:43.804
Cool.

56
00:03:47.293 --> 00:03:48.803
The same thing will apply to i, right?

57
00:03:48.803 --> 00:03:51.782
So I have this let i equals 0.

58
00:03:51.782 --> 00:03:57.474
Once this for loop is finished,
i goes out of scope, right?

59
00:03:57.474 --> 00:04:01.010
So I can say down here, console.log i and

60
00:04:01.010 --> 00:04:05.060
we get i on every iteration of the loop,
right?

61
00:04:05.060 --> 00:04:08.884
But then this one down here after
it finishes the loop i is not

62
00:04:08.884 --> 00:04:11.880
defined anymore at the end
of this i goes away.

63
00:04:11.880 --> 00:04:15.644
So i is out of scope.

64
00:04:15.644 --> 00:04:20.766
i is only in scope for
the loop that it's defined for.

65
00:04:20.766 --> 00:04:24.846
This may seem like an inconvenience for
you, but trust me, it prevents this like

66
00:04:24.846 --> 00:04:28.334
pollution of variables that would
make this really hard otherwise.

67
00:04:28.334 --> 00:04:32.160
Scope actually makes us
your life long term easier.

68
00:04:32.160 --> 00:04:34.142
Has some quirky rules for sure.

69
00:04:38.026 --> 00:04:38.526
Okay?

70
00:04:42.062 --> 00:04:45.199
Just a huge part of this that I
just really wanna emphasize too,

71
00:04:45.199 --> 00:04:47.813
it matters where the variable is declared,
right?

72
00:04:47.813 --> 00:04:50.883
So when you say let or
const equals something,

73
00:04:50.883 --> 00:04:56.014
that's where you're creating the variable,
that's the act of creation.

74
00:04:56.014 --> 00:05:01.077
So it matters where the variable is
created where its scope will be respected,

75
00:05:01.077 --> 00:05:01.624
right?

76
00:05:01.624 --> 00:05:04.682
So for
example here if I say underneath this or

77
00:05:04.682 --> 00:05:09.602
above it let's say console.log
friends at your party, what's that?

78
00:05:09.602 --> 00:05:11.067
What's going to happen then?

79
00:05:15.901 --> 00:05:17.606
It's gonna work, right?

80
00:05:22.570 --> 00:05:27.551
Because this was created
outside of the four loop.

81
00:05:27.551 --> 00:05:30.886
Even though there's like a four loop
between it that's totally fine.

82
00:05:30.886 --> 00:05:32.596
It was created outside of it.

83
00:05:32.596 --> 00:05:34.046
And this is in the same scope of it.

84
00:05:34.046 --> 00:05:36.011
So this works.

85
00:05:36.011 --> 00:05:39.909
It's just i that's inside of
this that it doesn't work.

86
00:05:39.909 --> 00:05:43.740
In fact, that's literally why I say the
left friends at your party equals zero.

87
00:05:43.740 --> 00:05:46.942
That's why I declared up here.

88
00:05:46.942 --> 00:05:48.060
If I did this here and
then it doesn't work, right?

89
00:05:48.060 --> 00:05:51.244
You have to have something that's
going to be durable beyond that scope.

90
00:05:51.244 --> 00:05:54.811
What I want you to do later maybe after
you take this class just take a look at

91
00:05:54.811 --> 00:05:58.498
this again and see if you can find the
answers yourself cuz I think that'll be

92
00:05:58.498 --> 00:05:59.848
a useful exercise for you.

93
00:05:59.848 --> 00:06:01.715
And then you can check
your work down here.

94
00:06:09.885 --> 00:06:14.299
Cool, the reason why, principally, that
you and I did this together is this was so

95
00:06:14.299 --> 00:06:17.029
frustrating for
me when I was learning how to code.

96
00:06:17.029 --> 00:06:20.098
But like I was like I was trying to log
out a variable that I had created inside

97
00:06:20.098 --> 00:06:22.067
of a function is like,
why doesn't this work?

98
00:06:22.067 --> 00:06:23.907
I expected this to work.

99
00:06:23.907 --> 00:06:28.372
And once I kind of got grasped,
I mean the cheat here is to look for

100
00:06:28.372 --> 00:06:30.292
the curly braces, right?

101
00:06:30.292 --> 00:06:34.121
Curly braces are really the thing that are
really going to denote like this will be

102
00:06:34.121 --> 00:06:37.442
in scope are out of scope, and
it just matters of where your constant or

103
00:06:37.442 --> 00:06:38.484
your let is, right?

104
00:06:43.423 --> 00:06:46.243
Another thing that I really
don't get into here that I

105
00:06:46.243 --> 00:06:49.136
probably could have cheated
with a little bit as well.

106
00:06:49.136 --> 00:06:51.396
And let's just take a look
what this would look like.

107
00:06:51.396 --> 00:06:57.960
If I do console.log my name and

108
00:06:57.960 --> 00:07:04.271
then I say const my name equals

109
00:07:04.271 --> 00:07:09.581
Brian, will this work?

110
00:07:13.459 --> 00:07:18.240
No, cuz I create the variable here, right?

111
00:07:18.240 --> 00:07:21.785
This will get run first and
it's gonna run this and

112
00:07:21.785 --> 00:07:26.269
say you haven't told me what my
name is yet, therefore error.

113
00:07:26.269 --> 00:07:27.523
Just to prove my point.

114
00:07:37.447 --> 00:07:41.494
Cancel, it's gonna say I don't know what
my name is it's a reference error, right?

115
00:07:41.494 --> 00:07:44.299
Cuz it doesn't know what's going on there.

116
00:07:44.299 --> 00:07:46.190
So you have to create something
before you can use it.

117
00:07:46.190 --> 00:07:49.078
I think that intuitively
that makes some sense.

118
00:07:54.215 --> 00:07:58.223
The only warning is functions work
a little bit different than that.

119
00:07:58.223 --> 00:08:06.772
So if I say hi, And
I say function, say hi.

120
00:08:13.220 --> 00:08:16.092
This does work.

121
00:08:16.092 --> 00:08:20.963
Weirdly enough, All

122
00:08:20.963 --> 00:08:25.204
functions get what's
called hoisted to the top.

123
00:08:25.204 --> 00:08:29.902
So the way the code will actually execute
on this all the definitions get put to

124
00:08:29.902 --> 00:08:31.428
the top automatically.

125
00:08:31.428 --> 00:08:35.629
Functions as the only case of this
happening this way is the only thing that

126
00:08:35.629 --> 00:08:40.059
you ever have to care about hoisting
with but that's actually what happens.

127
00:08:40.059 --> 00:08:44.940
Well, var does a similar thing that's why
I'm telling you to not use var please just

128
00:08:44.940 --> 00:08:49.269
ignore var but you can kind of in the back
of your brain know that var does some

129
00:08:49.269 --> 00:08:51.157
similar Black magic witchery.

130
00:08:52.900 --> 00:08:56.305
So I like constantly as they work
the way that you expect them to.

131
00:08:57.936 --> 00:09:01.685
But with functions and
only functions declared this way.

132
00:09:05.934 --> 00:09:06.808
So not all functions,,

133
00:09:06.808 --> 00:09:09.729
it's just the functions that are declared
this way yeah that are written this way.

134
00:09:09.729 --> 00:09:14.657
I should say where's his function name
blah those ones will get hoisted to

135
00:09:14.657 --> 00:09:15.302
the top.

136
00:09:18.514 --> 00:09:22.398
Okay, yeah, sorry to get on
the depth in the weeds with you but

137
00:09:22.398 --> 00:09:27.722
I know I'm gonna save someone's in trouble
by going over this a little bit up front.

138
00:09:27.722 --> 00:09:31.592
So I'm trying to head off problems
that I know people are gonna face when

139
00:09:31.592 --> 00:09:33.541
they start writing their own code.

140
00:09:33.541 --> 00:09:35.684
I'm trying to make this
least frustrating possible.

141
00:09:38.237 --> 00:09:38.914
Okay.

142
00:09:41.264 --> 00:09:44.673
Any questions about scope?

143
00:09:44.673 --> 00:09:49.372
If it's kind of mind melting
is it's a weird concept to

144
00:09:49.372 --> 00:09:53.877
graph it's very feels kind of artificial,
right?

145
00:09:53.877 --> 00:09:57.686
So I'm okay if you feel like this
is weird and you don't like it.

146
00:09:57.686 --> 00:10:00.478
It's one of the weirder things
you have to learn today.

147
00:10:00.478 --> 00:10:04.380
For the most part like you just define
variables and then use them and

148
00:10:04.380 --> 00:10:08.921
the intuitive flow that typically works
most attend to whether you expect it.

149
00:10:08.921 --> 00:10:11.543
It's just really frustrating when you get
into a situation where it doesn't work

150
00:10:11.543 --> 00:10:12.120
the way you expect

