WEBVTT

1
00:00:00.320 --> 00:00:04.065
We are gonna start talking to an API.

2
00:00:04.065 --> 00:00:09.143
API stands for
application programming interface,

3
00:00:09.143 --> 00:00:12.340
but everyone just says API.

4
00:00:12.340 --> 00:00:15.020
The word API is kinda
overloaded in programming.

5
00:00:15.020 --> 00:00:18.268
So the way that we're gonna be
talking about API, when I say API for,

6
00:00:18.268 --> 00:00:22.020
like the rest of this course, what I mean
is that there is a server somewhere else

7
00:00:22.020 --> 00:00:23.816
that you and I are gonna be talking to.

8
00:00:23.816 --> 00:00:26.470
That is the kind of API that
we're going to talk about.

9
00:00:28.818 --> 00:00:29.933
It can be confusing for

10
00:00:29.933 --> 00:00:34.360
people new to programming that people
use API to mean other things as well.

11
00:00:34.360 --> 00:00:39.493
So, for example, if I have a library
that you install on your computer

12
00:00:39.493 --> 00:00:44.979
that I wrote and it's a dog object that
has two methods on it, eat and bark.

13
00:00:44.979 --> 00:00:48.915
You could conceivably call eat and
bark the API of the library that I wrote,

14
00:00:48.915 --> 00:00:51.678
which has nothing to do
about talking with a server.

15
00:00:51.678 --> 00:00:56.457
It's actually just the name of
the methods on the object that I wrote,

16
00:00:56.457 --> 00:00:59.870
you could call that
the API of that as well.

17
00:00:59.870 --> 00:01:01.960
We're not talking about that.

18
00:01:01.960 --> 00:01:06.340
So, in other words, I'm just trying to
warn you that API is an overloaded term.

19
00:01:06.340 --> 00:01:07.430
You just have to be aware of that.

20
00:01:08.670 --> 00:01:13.176
So, again, rest of the course API
means talking to a server, or

21
00:01:13.176 --> 00:01:15.080
the backend, right?

22
00:01:15.080 --> 00:01:18.187
You can use the term API and
backend basically interchangeably for

23
00:01:18.187 --> 00:01:19.474
what we're gonna do here.

24
00:01:21.799 --> 00:01:22.719
Okay?

25
00:01:25.470 --> 00:01:30.550
So let's fathom for a second that you are
now writing a weather application, right?

26
00:01:30.550 --> 00:01:32.240
That's some nice page
that someone opens up and

27
00:01:32.240 --> 00:01:33.643
they can check the weather for the day.

28
00:01:36.496 --> 00:01:40.520
But you you want your user to be able to
check multiple different zip codes right?

29
00:01:40.520 --> 00:01:45.460
Cuz like today I'm in Minneapolis and
it's lovely weather today, thankfully.

30
00:01:45.460 --> 00:01:49.530
But you could conceive that I'm
gonna go home soon, back to Seattle.

31
00:01:49.530 --> 00:01:51.410
I would want to check
the weather in Seattle.

32
00:01:51.410 --> 00:01:53.040
I don't wanna refresh the page, right?

33
00:01:53.040 --> 00:01:56.396
I just wanna put in the zip code and
I wanna get them the new weather.

34
00:01:56.396 --> 00:01:58.320
What is the workflow
if you're coding that?

35
00:02:00.300 --> 00:02:03.118
Well, the user navigates your page and
we'll have some default zip code, right?

36
00:02:03.118 --> 00:02:07.851
It might come down with already like
one set of weather pre-populated.

37
00:02:07.851 --> 00:02:12.620
Let's say they type in 98109 that is a zip
code in Seattle, in case you're curious,

38
00:02:12.620 --> 00:02:15.661
not the one that I live in,
I was very careful about that.

39
00:02:15.661 --> 00:02:20.811
[LAUGH] Your app is going to then make
a call to something like api.com or

40
00:02:20.811 --> 00:02:25.790
api.example.com, and ask for
the weather and then it'll ask for

41
00:02:25.790 --> 00:02:27.556
some zip code, right?

42
00:02:27.556 --> 00:02:32.151
And the response will be like,
it's 75 degrees Fahrenheit, or

43
00:02:32.151 --> 00:02:33.717
something like that.

44
00:02:35.422 --> 00:02:37.743
Your app will then decode
that using JSON.parse.

45
00:02:37.743 --> 00:02:39.994
And now you have an object
of the current weather,

46
00:02:39.994 --> 00:02:43.165
you can use that to do whatever updating
in your DOM that you need to do.

47
00:02:45.917 --> 00:02:49.757
That's it, I mean that's
the whole process that you and

48
00:02:49.757 --> 00:02:51.922
I are gonna be walking through.

49
00:02:51.922 --> 00:02:54.854
So a few things, who makes the API?

50
00:02:54.854 --> 00:02:56.297
It depends, right?

51
00:02:56.297 --> 00:03:00.282
Are you going be using some sort of
service like if we were doing this,

52
00:03:00.282 --> 00:03:03.317
we could use like Dark Sky
which is a API for weather.

53
00:03:03.317 --> 00:03:04.575
I think Apple owns them now.

54
00:03:05.915 --> 00:03:09.359
Apple bought one of them,
I think they bought, I don't

55
00:03:09.359 --> 00:03:14.286
know maybe it was Weather Underground,
anyway, that doesn't matter [LAUGH].

56
00:03:14.286 --> 00:03:16.710
So it could be some sort of service
that you're calling out to.

57
00:03:16.710 --> 00:03:19.430
It could be like your
backend team at your job.

58
00:03:19.430 --> 00:03:20.602
It could be someone, right?

59
00:03:20.602 --> 00:03:21.981
Someone writes the API.

60
00:03:21.981 --> 00:03:26.413
There's a server somewhere that
you're making a request to.

61
00:03:26.413 --> 00:03:28.520
There's a bunch of them that
are publicly available for free.

62
00:03:28.520 --> 00:03:33.480
I left you a link here if you
go to this is written by Todd.

63
00:03:34.780 --> 00:03:37.130
Todd is a good guy.

64
00:03:37.130 --> 00:03:40.927
He just put in here a bunch of publicly
available API's that you can go mess

65
00:03:40.927 --> 00:03:41.670
around with.

66
00:03:43.830 --> 00:03:47.700
For music,
there's the famous Star Wars API, right?

67
00:03:47.700 --> 00:03:50.670
People use that for a lot of example apps.

68
00:03:50.670 --> 00:03:51.690
All sorts of fun stuff.

69
00:03:51.690 --> 00:03:53.550
I'll let you poke around that.

70
00:03:53.550 --> 00:03:56.637
Today we're going to be
using one called dog.ceo,

71
00:03:56.637 --> 00:04:01.279
which objectively is the greatest name for
a website I've ever conceived of.

72
00:04:01.279 --> 00:04:06.393
It's just an API to get dog pictures,
which is just lovely, right?

73
00:04:06.393 --> 00:04:08.431
I think that's what we need
in our lives right now.

74
00:04:10.336 --> 00:04:17.183
All right, so if you call this particular
API dog.ceo/api/breads/image.random,

75
00:04:17.183 --> 00:04:21.878
it just gives you a random picture
of some lovely dog, right?

76
00:04:21.878 --> 00:04:25.088
And you can see here, this is actually the
JSON that it's sending back to you, right?

77
00:04:25.088 --> 00:04:26.559
The message and the status.

78
00:04:26.559 --> 00:04:31.124
We can actually just open this
directly in our browser here.

79
00:04:31.124 --> 00:04:35.692
Not with that, right?

80
00:04:35.692 --> 00:04:39.960
And you can see here,
that's probably pretty hard to see.

81
00:04:39.960 --> 00:04:41.810
This is the JSON that we're getting back.

82
00:04:45.160 --> 00:04:47.200
Now yours probably looks
something like this.

83
00:04:47.200 --> 00:04:49.898
I have an extension installed.

84
00:04:49.898 --> 00:04:54.130
Actually this meant it might be
built into Firefox now, maybe.

85
00:04:54.130 --> 00:04:58.156
Anyway, if it's not looking like this,
if it looks like this,

86
00:04:58.156 --> 00:05:02.271
you can just Google like, Chrome or
Firefox extension for JSON.

87
00:05:02.271 --> 00:05:05.467
It's like a pretty printer or
something like that, and

88
00:05:05.467 --> 00:05:07.237
it will make it look like this.

89
00:05:07.237 --> 00:05:08.970
Yeah, this is the message
I'm getting back.

90
00:05:08.970 --> 00:05:11.360
If I do raw data,
this is actually what it's sending, right?

91
00:05:11.360 --> 00:05:12.831
Which is a message.

92
00:05:12.831 --> 00:05:15.230
And yeah, this is JSON, right?

93
00:05:15.230 --> 00:05:16.070
This looks really familiar.

94
00:05:16.070 --> 00:05:19.170
This is literally what you and
I were just looking at.

95
00:05:19.170 --> 00:05:26.600
And then I have a little extension
here that prints it out nicely for me.

96
00:05:26.600 --> 00:05:30.147
And if I refresh the page again,
cuz it's random,

97
00:05:30.147 --> 00:05:33.047
notice that the message keeps changing.

98
00:05:33.047 --> 00:05:37.849
And these are just JPEGs, so if I click
on this and open it, it's just a dog.

99
00:05:42.212 --> 00:05:46.644
Okay, so you and I are gonna mess
around with this API a little, right?

100
00:05:46.644 --> 00:05:51.545
You can imagine that maybe you're building
a different application for fun apps, so

101
00:05:51.545 --> 00:05:55.696
that someone can open it and see a new
picture of the dog every single day,

102
00:05:55.696 --> 00:05:56.871
which is kinda fun.

103
00:05:59.114 --> 00:06:04.328
Okay, let's talk a little bit
about this portion right here.

104
00:06:04.328 --> 00:06:08.505
The question mark zip equals this.

105
00:06:08.505 --> 00:06:11.790
So this first part,
this is a normal URL, right?

106
00:06:11.790 --> 00:06:12.961
We're very used to seeing these.

107
00:06:12.961 --> 00:06:17.850
I go to google.com/flights or
something like that, right?

108
00:06:17.850 --> 00:06:21.918
That's an address that our computer goes
through to try and get information back.

109
00:06:21.918 --> 00:06:24.093
This is called a query string here,

110
00:06:24.093 --> 00:06:27.293
this is basically adding
additional information.

111
00:06:27.293 --> 00:06:33.010
So in this particular case,
if I have some sort of weather API, right?

112
00:06:33.010 --> 00:06:36.160
I can also provide it with the zip code
immediately so that when the page loads,

113
00:06:36.160 --> 00:06:39.250
I get the zip code in particular
that I'm looking for.

114
00:06:39.250 --> 00:06:43.391
So it's just basically passing
information additionally to the server so

115
00:06:43.391 --> 00:06:47.360
that you can get some sort of
specific outcome out of it.

116
00:06:47.360 --> 00:06:52.765
It's a variable that the browser's
able to give to the webpage.

117
00:06:52.765 --> 00:06:54.750
And it's just key value pairs.

118
00:06:54.750 --> 00:06:56.900
So if I have, I have it here, right?

119
00:06:58.610 --> 00:06:59.688
It's just key values and

120
00:06:59.688 --> 00:07:03.340
then all the different key values
are separated by ampersands.

121
00:07:03.340 --> 00:07:06.638
So if I wanted to say,
give me zip 98109 and

122
00:07:06.638 --> 00:07:10.026
I want to see tomorrow
you say &amp;day=tomorrow.

123
00:07:14.875 --> 00:07:17.710
So you might ask me,
what variables can you send?

124
00:07:17.710 --> 00:07:19.030
You can send whatever variables you want.

125
00:07:19.030 --> 00:07:21.440
It depends on whatever your
server expects, right?

126
00:07:21.440 --> 00:07:25.910
So in this particular case, a weather
API would make sense to send zip codes.

127
00:07:25.910 --> 00:07:28.815
But if I want to ask for
a specific breed from dog.ceo,

128
00:07:28.815 --> 00:07:31.690
then it might be called breed equals blah.

129
00:07:31.690 --> 00:07:33.678
It just depends on whatever
your server expects.

