WEBVTT

1
00:00:00.635 --> 00:00:04.334
Let's do the most contrived example
I can possibly think of, that you and

2
00:00:04.334 --> 00:00:06.611
I are gonna work through
this piece by piece.

3
00:00:10.433 --> 00:00:14.044
So down here,
I have a bunch of console logs.

4
00:00:14.044 --> 00:00:15.217
And you and I are gonna go through and

5
00:00:15.217 --> 00:00:17.894
we're going to identify which one is gonna
work and which one's not gonna work.

6
00:00:20.542 --> 00:00:24.647
So const A = "A" up here,
and then I have let F.

7
00:00:24.647 --> 00:00:27.068
Now, notice I don't assign
F anything up here.

8
00:00:27.068 --> 00:00:30.188
All I do is just declare, hey, world,

9
00:00:30.188 --> 00:00:34.360
there's an F variable,
and it exists here, okay?

10
00:00:34.360 --> 00:00:38.705
I have a function called doStuff.

11
00:00:38.705 --> 00:00:41.934
But it's not called yet, so
we'll come back to that when it's called.

12
00:00:41.934 --> 00:00:48.168
I have a let E = here, and
then a while loop where it increases E.

13
00:00:51.004 --> 00:00:54.683
So the first thing that we
have here is a console.log(A).

14
00:00:54.683 --> 00:00:58.106
Is this one going to work?

15
00:00:58.106 --> 00:01:01.468
Or let me rephrase that question,
is A defined here?

16
00:01:05.488 --> 00:01:07.976
And when I say, is A defined,

17
00:01:07.976 --> 00:01:13.663
that is synonymous with asking
the question, is A in scope, okay?

18
00:01:13.663 --> 00:01:16.071
Where is A defined?

19
00:01:16.071 --> 00:01:16.795
Here.

20
00:01:18.924 --> 00:01:21.641
So this will work, right?

21
00:01:21.641 --> 00:01:24.977
Because this exists outside of
the scope of this, so therefore,

22
00:01:24.977 --> 00:01:26.744
it'll be in scope inside of here.

23
00:01:26.744 --> 00:01:30.844
So we're good,
everything's fine there, okay?

24
00:01:30.844 --> 00:01:34.872
And then I define a variable
here called G, okay?

25
00:01:34.872 --> 00:01:37.376
I'm then gonna try and
console log(E) here.

26
00:01:37.376 --> 00:01:40.831
Is E defined?

27
00:01:40.831 --> 00:01:43.742
It is defined, right,
cuz we declare it here, and so

28
00:01:43.742 --> 00:01:46.282
it exists outside of this while loop,
right?

29
00:01:46.282 --> 00:01:48.897
So it exists in the same
scope as this console.log.

30
00:01:51.776 --> 00:01:53.881
So that one works, that's okay.

31
00:01:53.881 --> 00:01:55.425
How about console.log(G)?

32
00:01:57.867 --> 00:02:03.009
G is defined in here,
which is inside of this scope.

33
00:02:03.009 --> 00:02:04.593
Once this goes out of scope,

34
00:02:04.593 --> 00:02:07.959
everything that was declared
inside of it gets thrown away.

35
00:02:07.959 --> 00:02:09.195
So this doesn't work, right?

36
00:02:09.195 --> 00:02:12.991
This is not defined here,
you'll get an error here, okay?

37
00:02:15.308 --> 00:02:20.122
We then called doStuff with
B as the parameter, okay?

38
00:02:20.122 --> 00:02:23.072
So we're gonna go here
to our function doStuff.

39
00:02:23.072 --> 00:02:25.424
This is gonna be equal to B.

40
00:02:25.424 --> 00:02:28.055
First thing we're gonna do
here is console.log(B).

41
00:02:28.055 --> 00:02:30.421
Is this gonna work?

42
00:02:30.421 --> 00:02:35.805
Yeah, the parameter here, it comes from
here, so that's in scope that works.

43
00:02:35.805 --> 00:02:39.523
I declare C, I declare H.

44
00:02:39.523 --> 00:02:43.949
I do an if statement here,
this will run, so I declare D here, and

45
00:02:43.949 --> 00:02:46.538
then I declare H to be something else.

46
00:02:46.538 --> 00:02:49.731
So I did a let here.

47
00:02:49.731 --> 00:02:51.189
It was assigned something and

48
00:02:51.189 --> 00:02:53.876
then I re-assigned H to be
literally something else.

49
00:02:55.837 --> 00:02:58.397
So I'm gonna call console.log(D) here.

50
00:02:58.397 --> 00:03:02.487
Okay, so where did D come from?

51
00:03:02.487 --> 00:03:03.773
Where did D come from?

52
00:03:03.773 --> 00:03:04.532
It's there.

53
00:03:06.461 --> 00:03:08.067
Is D defined here?

54
00:03:10.728 --> 00:03:15.087
Well, we have this if statement,
that's where we declare D.

55
00:03:15.087 --> 00:03:19.071
So as soon as this if statement
finishes or this if block,

56
00:03:19.071 --> 00:03:22.400
right, it's gone, right, D is thrown away.

57
00:03:22.400 --> 00:03:26.015
So this is gonna be an error, okay?

58
00:03:27.921 --> 00:03:31.943
H, So where does H come from?

59
00:03:31.943 --> 00:03:35.568
H is up here, right?

60
00:03:35.568 --> 00:03:38.747
But then H is redeclared
here to be something else.

61
00:03:38.747 --> 00:03:39.987
So is H in scope?

62
00:03:42.173 --> 00:03:45.413
H is in scope because it
matters where it's created,

63
00:03:45.413 --> 00:03:47.725
where it's declared the first time.

64
00:03:47.725 --> 00:03:51.933
You can modify and re-modify it,
that's totally fine.

65
00:03:51.933 --> 00:03:54.340
So H is still in scope,
because it was created here.

66
00:03:54.340 --> 00:03:58.271
It didn't end, the scope that
contains H has not ended yet, right?

67
00:03:58.271 --> 00:03:59.607
So H still exists.

68
00:03:59.607 --> 00:04:04.504
So here, this works, this is okay, okay?

69
00:04:04.504 --> 00:04:08.761
And then here, I have F = F.

70
00:04:08.761 --> 00:04:14.157
So we have let F here, this created F,
but it did nothing with it, right?

71
00:04:14.157 --> 00:04:16.249
Here's when I said F for
the very first time.

72
00:04:19.673 --> 00:04:22.779
Which is fine, you can totally do that,
you can declare things and

73
00:04:22.779 --> 00:04:24.008
not use them until later.

74
00:04:24.008 --> 00:04:27.755
You usually do that when you're trying
to declare them outside of the scope and

75
00:04:27.755 --> 00:04:28.963
then define them later.

76
00:04:30.920 --> 00:04:35.631
Okay, so our doStuff now has finished,
so we're gonna come back to here, right?

77
00:04:36.967 --> 00:04:39.936
So console.log(B), is this gonna work?

78
00:04:42.839 --> 00:04:46.362
Well, B is the name of the parameter here.

79
00:04:46.362 --> 00:04:48.187
And this function has finished, right?

80
00:04:48.187 --> 00:04:50.220
We're done with that function.

81
00:04:50.220 --> 00:04:53.121
So B is not in scope anymore.

82
00:04:53.121 --> 00:04:54.682
So B went away, so this doesn't work.

83
00:04:54.682 --> 00:04:55.686
This is broken.

84
00:04:58.247 --> 00:05:01.727
Okay, C, let's go find C.

85
00:05:04.045 --> 00:05:08.358
Here, this is created inside
of the doStuff function.

86
00:05:10.892 --> 00:05:14.179
So this function has been run and
it's already finished, so

87
00:05:14.179 --> 00:05:15.476
it's out of scope now.

88
00:05:15.476 --> 00:05:17.458
So it's been thrown away.

89
00:05:17.458 --> 00:05:18.826
So this doesn't work.

90
00:05:20.983 --> 00:05:22.068
And what about F?

91
00:05:26.048 --> 00:05:28.893
Well, F is created here, right?

92
00:05:28.893 --> 00:05:34.590
And we've changed the value of it here,
but what matters is where it was created.

93
00:05:34.590 --> 00:05:37.019
So it was created here.

94
00:05:37.019 --> 00:05:41.629
This block is still going, nothing
has changed in that perspective, so

95
00:05:41.629 --> 00:05:43.680
this is still in scope, right?

96
00:05:43.680 --> 00:05:47.175
So F here works, it's in scope.

97
00:05:51.388 --> 00:05:56.033
I just showed you, I don't know,
15 different permutations of this scope

98
00:05:56.033 --> 00:06:00.463
problem, just to kind of show you
the process that I mentally go through of

99
00:06:00.463 --> 00:06:03.543
saying, why does this exist or
not exist, right?

100
00:06:03.543 --> 00:06:06.218
And I do this again down here.

101
00:06:06.218 --> 00:06:09.532
This is the exact same thing, but I just
went and left notes on every single line.

102
00:06:09.532 --> 00:06:13.759
So if you wanna go back and
review this later, the answer key is here.

103
00:06:15.888 --> 00:06:17.972
All right, this works,
B parameter is still in scope.

