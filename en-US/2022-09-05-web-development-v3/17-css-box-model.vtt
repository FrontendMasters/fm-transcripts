WEBVTT

1
00:00:00.000 --> 00:00:04.657
Layout, everything to this point we've
been doing is making this change colors,

2
00:00:04.657 --> 00:00:07.795
maybe making it change widths,
those kinds of things.

3
00:00:07.795 --> 00:00:12.760
I wanna show you how to
move things around, right?

4
00:00:12.760 --> 00:00:16.044
So notice, this is centered on the page,
for example, right?

5
00:00:16.044 --> 00:00:19.692
How do I do stuff like that?

6
00:00:19.692 --> 00:00:24.031
So my CSS didn't like this apparently,
which is fine.

7
00:00:24.031 --> 00:00:26.649
But I had Box 1 and Box 2 and
they're next to each other.

8
00:00:26.649 --> 00:00:28.683
So how did I do that?

9
00:00:28.683 --> 00:00:29.670
All right, cuz these are just divs.

10
00:00:29.670 --> 00:00:31.324
If you would expect,

11
00:00:39.825 --> 00:00:41.346
I don't know why that's there,
it doesn't need to be.

12
00:00:44.786 --> 00:00:48.227
If I do float left here,
if I get rid of that,

13
00:00:48.227 --> 00:00:53.540
notice that they just go there,
and that's totally fine, right?

14
00:00:53.540 --> 00:00:59.255
So these divs by default will take
the entire line onto themselves.

15
00:00:59.255 --> 00:01:03.759
And if I want them to float next to each
other, and you can do this float: left,

16
00:01:03.759 --> 00:01:06.233
and this will move them
next to each other.

17
00:01:06.233 --> 00:01:08.905
Now, there's something pushing this
down and I'm not really sure what it is.

18
00:01:13.835 --> 00:01:16.610
Is it the style tag?

19
00:01:16.610 --> 00:01:17.604
No, it shouldn't be.

20
00:01:21.603 --> 00:01:24.360
But, I mean,
this is always something with CSS.

21
00:01:24.360 --> 00:01:27.270
What's the mystery thing
breaking it this time?

22
00:01:27.270 --> 00:01:30.630
But in any case, typically those would
be just right next to each other.

23
00:01:30.630 --> 00:01:32.642
I wonder if this looks
different in Chrome.

24
00:01:35.456 --> 00:01:39.266
Nope, same, interesting.

25
00:01:46.530 --> 00:01:48.791
But that's float left.

26
00:01:48.791 --> 00:01:52.820
You can also do float right, and
this will float on the other way, right?

27
00:01:52.820 --> 00:01:55.282
Notice that this one comes first, right?

28
00:01:55.282 --> 00:02:00.660
Because that will float right first and
the next one will float next to it.

29
00:02:00.660 --> 00:02:04.250
We'll get into flex here in just a little
bit, but this is saying Box 1 and Box 2.

30
00:02:04.250 --> 00:02:06.786
Notice that they're centered,
that's what the flex is doing.

31
00:02:10.209 --> 00:02:13.089
And yeah, nice border background.

32
00:02:13.089 --> 00:02:15.267
And then we'll talk about margins, right?

33
00:02:15.267 --> 00:02:18.090
So notice that there's
a space between them.

34
00:02:18.090 --> 00:02:20.295
That's what margin does.

35
00:02:20.295 --> 00:02:25.343
So if I get rid of this, notice that
they're just smooshed up against

36
00:02:25.343 --> 00:02:30.751
each other, so that margin allows them
to be spaced away from each other.

37
00:02:30.751 --> 00:02:33.033
And then you got nice
rounded corners there,

38
00:02:33.033 --> 00:02:35.084
that's coming from the border radius.

39
00:02:35.084 --> 00:02:39.942
And then line items, these three lines
make it so that these things are centered.

40
00:02:42.156 --> 00:02:46.210
So float, you used to have to
do everything with float and

41
00:02:46.210 --> 00:02:51.630
it was such a pain, as you can see here,
I am already having an issue with it.

42
00:02:51.630 --> 00:02:55.469
You don't have to do float anymore,
there's so many more useful ways of doing

43
00:02:55.469 --> 00:02:59.615
things like this, like flex, we'll have
a whole chapter on flex when we get there.

44
00:03:03.000 --> 00:03:08.910
So, along those lines,
let's talk about the box model.

45
00:03:08.910 --> 00:03:13.332
It's one of the most confusing things
about people that people have a hard time

46
00:03:13.332 --> 00:03:14.343
grasping in CSS.

47
00:03:14.343 --> 00:03:17.529
So I just wanted to spend a whole
bunch of time talking about it.

48
00:03:19.800 --> 00:03:24.980
So everything in CSS has a display
property, whether it's set or not.

49
00:03:24.980 --> 00:03:30.244
So every div, for example,
by default is display block.

50
00:03:30.244 --> 00:03:31.626
It's just by default that way.

51
00:03:33.178 --> 00:03:38.896
Everything that's a span, for example, is
display inline, which means treat it text.

52
00:03:38.896 --> 00:03:42.531
So if you try and set width on
something that has display inline,

53
00:03:42.531 --> 00:03:46.387
it just ignores it because text
doesn't have width per se, right?

54
00:03:46.387 --> 00:03:51.778
It's just flows in how text flows.

55
00:03:51.778 --> 00:03:56.482
So I don't know, inspect this here,
this is a little bit of,

56
00:03:56.482 --> 00:03:59.290
it's a code thing, which is a span.

57
00:03:59.290 --> 00:04:04.194
If I try and say on this,
width: 1,000 pixels,

58
00:04:06.693 --> 00:04:08.440
Actually, that's really nice.

59
00:04:08.440 --> 00:04:09.334
Firefox says,

60
00:04:09.334 --> 00:04:13.818
hey, this actually has no effect on
this because you're on display inline.

61
00:04:13.818 --> 00:04:17.065
These dev tools are great.
I didn't know I would do that.

62
00:04:17.065 --> 00:04:22.231
However, if I say display: block,
now, because it's in block mode,

63
00:04:22.231 --> 00:04:27.401
it's actually gonna respect that
width because it's actually gonna,

64
00:04:27.401 --> 00:04:30.720
and notice it took the whole line now,
right?

65
00:04:30.720 --> 00:04:34.120
Or if I go back to inline,
like it was before,

66
00:04:34.120 --> 00:04:38.420
implicitly, Notice that it
doesn't have its own line.

67
00:04:38.420 --> 00:04:41.350
So blocks by default will take
their entire line onto themselves.

68
00:04:41.350 --> 00:04:44.340
You can make their height and
width change.

69
00:04:44.340 --> 00:04:47.527
Whereas display inline will
just make it flow like text and

70
00:04:47.527 --> 00:04:49.683
has no height or width, it just flows.

71
00:04:53.446 --> 00:04:56.313
Now, those are just two, right?

72
00:04:56.313 --> 00:04:56.985
We saw display flex.

73
00:04:56.985 --> 00:05:01.925
There's also a hybrid here
called display: inline-block,

74
00:05:01.925 --> 00:05:05.744
which is like,
I want you to flow into the text but

75
00:05:05.744 --> 00:05:09.390
I also want you to respect my width and
height.

76
00:05:09.390 --> 00:05:14.871
So just to hammer home,
border: 1px solid black.

77
00:05:14.871 --> 00:05:17.978
Let's make not 1,000 pixels,
but let's make it 50 pixels.

78
00:05:24.716 --> 00:05:29.130
So you can see there, it's actually
gonna respect my width there.

79
00:05:29.130 --> 00:05:32.945
That's what the inline block does,
it's like, all right, still flowing with

80
00:05:32.945 --> 00:05:36.549
the text, but I want you to respect
whatever height and width I'm setting.

81
00:05:36.549 --> 00:05:40.286
So a good example of when you might
want that is an image where the text

82
00:05:40.286 --> 00:05:41.742
wraps around it, right?

83
00:05:41.742 --> 00:05:44.783
You're like, I want this to flow into
the text and be with the text, but

84
00:05:44.783 --> 00:05:47.640
I also want you to respect what my
width and height would look like.

85
00:05:51.022 --> 00:05:53.022
Okay, so that's display.

86
00:05:56.100 --> 00:05:57.871
There's inline, there's block.

87
00:05:57.871 --> 00:05:59.748
There's inline block.

88
00:05:59.748 --> 00:06:02.253
There's flex,
which works a lot like block, but

89
00:06:02.253 --> 00:06:04.230
allows you to do some flex properties.

90
00:06:04.230 --> 00:06:05.950
We'll talk about that.

91
00:06:05.950 --> 00:06:09.963
It also has an inline flex, which is
the same thing of, treat it like block,

92
00:06:09.963 --> 00:06:13.365
flow with everything, but
also have my interior width as flex.

93
00:06:13.365 --> 00:06:17.056
There's another section on grid and
inline grid, same sort of thing.

94
00:06:17.056 --> 00:06:22.748
And there's also display table,
which is act like a table.

95
00:06:22.748 --> 00:06:29.534
You almost never wanna do display table,
just use table if you need a table.

96
00:06:29.534 --> 00:06:33.514
If you're doing something with display
table, ask yourself some questions cuz

97
00:06:33.514 --> 00:06:36.862
you're probably doing something funky and
you could do it better.

98
00:06:39.386 --> 00:06:40.150
That might be it.

99
00:06:40.150 --> 00:06:42.270
I think that's it.

100
00:06:42.270 --> 00:06:47.235
Okay, So height, width,

101
00:06:47.235 --> 00:06:50.320
padding, border and margin.

102
00:06:50.320 --> 00:06:54.202
People often get pretty confused about
what's the difference between all

103
00:06:54.202 --> 00:06:54.760
of these.

104
00:06:57.020 --> 00:06:59.300
So I have this little example here.

105
00:06:59.300 --> 00:07:01.420
This is a block, right?

106
00:07:01.420 --> 00:07:05.534
I have the interior content,
and everything around that,

107
00:07:05.534 --> 00:07:10.551
you can think of being what the actual
height and width of everything is,

108
00:07:10.551 --> 00:07:15.040
right,, Of just the interior content.

109
00:07:15.040 --> 00:07:19.439
Everything inside of the red would
include the content plus the padding.

110
00:07:19.439 --> 00:07:23.738
So that's the size of the actual
element itself, okay?

111
00:07:23.738 --> 00:07:27.806
And then everything in the blue here,
you can think they're margins.

112
00:07:27.806 --> 00:07:32.098
So that's how far away is
this from everything else?

113
00:07:32.098 --> 00:07:33.654
So it pushes things away from it,

114
00:07:33.654 --> 00:07:36.390
whereas padding pushes
the interior things inside of it.

115
00:07:36.390 --> 00:07:40.915
So if I had this here,
the example, the border here,

116
00:07:40.915 --> 00:07:45.152
3 pixels red,
that's where the border will be.

117
00:07:45.152 --> 00:07:47.314
I have an interior padding of 5 pixels,

118
00:07:47.314 --> 00:07:50.952
which is pushing it in that little
dotted line a little bit, right?

119
00:07:50.952 --> 00:07:54.937
And I have a margin of 25,
which is the blue part,

120
00:07:54.937 --> 00:07:58.287
which is pushing everything away from it.

121
00:07:58.287 --> 00:08:01.106
So everything that's white
is inside of the element,

122
00:08:01.106 --> 00:08:03.813
everything that's blue is
outside of the element.

123
00:08:05.691 --> 00:08:08.690
That makes sense?

124
00:08:08.690 --> 00:08:12.846
So anyway, think of padding
as the interior spacing, so

125
00:08:12.846 --> 00:08:17.695
you wanna push your things inside it,
so you have more space inside

126
00:08:17.695 --> 00:08:22.039
of your element, and
margin pushes everything else away.

127
00:08:22.039 --> 00:08:23.860
Sometimes it doesn't make a difference,
right?

128
00:08:23.860 --> 00:08:28.495
So for example,
this space between these two text blocks,

129
00:08:28.495 --> 00:08:32.492
does it matter if I use padding or
margin to do that?

130
00:08:32.492 --> 00:08:35.127
No, it really doesn't
matter which one it does.

131
00:08:35.127 --> 00:08:39.194
But sometimes if you have backgrounds,
so for example, if I,

132
00:08:39.194 --> 00:08:44.492
this has to be margin between these two
boxes here, because otherwise it'll just

133
00:08:44.492 --> 00:08:49.740
make the box wider instead of pushing away
and having a whitespace between them.

134
00:08:49.740 --> 00:08:51.651
That's why padding ends up
being really important.

135
00:08:56.969 --> 00:09:02.776
It'll make more sense as
you go along with things.

136
00:09:02.776 --> 00:09:05.069
So margin space outside.

137
00:09:05.069 --> 00:09:09.150
So if you give something a background
color, for example, the margin doesn't get

138
00:09:09.150 --> 00:09:12.430
the background color, right,
cuz it's outside of the element.

139
00:09:12.430 --> 00:09:15.924
The border is the border,
right, the border is that.

140
00:09:15.924 --> 00:09:18.759
And then padding,
if you give it a background color,

141
00:09:18.759 --> 00:09:21.658
it will get that color cuz
it's inside of the element.

142
00:09:25.024 --> 00:09:30.455
Okay, So

143
00:09:30.455 --> 00:09:33.774
this doesn't have a set width, right?

144
00:09:33.774 --> 00:09:39.310
So it'll actually just take up 100%
of the width that it can by default.

145
00:09:39.310 --> 00:09:42.099
If I give it a width,
you can do it if you want to.

146
00:09:45.168 --> 00:09:51.924
And I say width: 50px,
let's do 500 pixels, maybe.

147
00:09:55.330 --> 00:09:57.679
Then it'll actually adhere
to whatever I'm doing.

148
00:09:57.679 --> 00:10:01.220
And I can do that in pixels,
I can do that in percentages.

149
00:10:01.220 --> 00:10:06.088
And then if it's a percentage,
it'll change with how wide the content is,

150
00:10:06.088 --> 00:10:06.629
right?

151
00:10:09.301 --> 00:10:10.422
So that can be useful as well.

152
00:10:14.862 --> 00:10:17.446
All those kinda things.

153
00:10:19.585 --> 00:10:20.790
Height, same thing.

154
00:10:20.790 --> 00:10:25.187
You can't do height in percentage,
which people find kinda strange.

155
00:10:25.187 --> 00:10:27.374
Height can only be in pixels.

156
00:10:27.374 --> 00:10:31.828
The only thing that you can,
well, there's some other tips and

157
00:10:31.828 --> 00:10:36.378
tricks to kind of do it, but
it's kind of advanced CSS use cases.

158
00:10:36.378 --> 00:10:39.463
For now, you kinda just have to
set it absolute to say like,

159
00:10:39.463 --> 00:10:41.517
this is gonna be 100 pixels height.

160
00:10:46.994 --> 00:10:51.154
One thing I'm going to
advise you of right now,

161
00:10:51.154 --> 00:10:55.005
just put this one line
in every CSS project.

162
00:10:55.005 --> 00:10:57.746
This star right here is
called the wildcard.

163
00:10:57.746 --> 00:11:00.475
I want you to never use it besides for
this purpose,

164
00:11:00.475 --> 00:11:02.833
which means select literally everything.

165
00:11:05.181 --> 00:11:07.864
Select everything and
make it box-sizing: border-box.

166
00:11:07.864 --> 00:11:10.074
It just makes measuring everything simple.

167
00:11:10.074 --> 00:11:13.625
There's a whole article on, yeah,

168
00:11:13.625 --> 00:11:19.915
I linked to it right here from a really
cool guy named Paul Irish that said,

169
00:11:19.915 --> 00:11:24.087
this is fine, you can go ahead and
do it this way.

170
00:11:24.087 --> 00:11:28.283
What it does is if I say width
100 pixels of this red box,

171
00:11:28.283 --> 00:11:31.551
do you expect it to include the border or
not?

172
00:11:31.551 --> 00:11:35.949
So if I have a 3 pixel border,
if I say a width 100 pixels,

173
00:11:35.949 --> 00:11:39.229
should the width actually be 100 pixels or

174
00:11:39.229 --> 00:11:43.993
should it be 106 pixels,
cuz you have a border on either side?

175
00:11:43.993 --> 00:11:47.254
Me, I want it to be 100 pixels and
I want it to include the border,

176
00:11:47.254 --> 00:11:50.187
because it makes everything
way easier to measure, right?

177
00:11:50.187 --> 00:11:52.899
And I don't have to go do
math every single time, okay,

178
00:11:52.899 --> 00:11:54.999
what's the border plus the content area?

179
00:11:54.999 --> 00:11:56.180
I don't have to worry about any of that.

180
00:11:56.180 --> 00:11:59.470
If you do border box,
that's what that does.

181
00:11:59.470 --> 00:12:06.004
It includes everything including
the border in your widths.

182
00:12:06.004 --> 00:12:09.128
If you don't do it that way,
then by default,

183
00:12:09.128 --> 00:12:13.710
everything is content box, I think,
is the name of that property.

184
00:12:13.710 --> 00:12:17.041
It doesn't matter, you'll have to account
for the border every single time.

185
00:12:17.041 --> 00:12:20.473
I'm intentionally not covering
floats a lot because,

186
00:12:22.243 --> 00:12:24.405
You never have to use floats anymore.

187
00:12:24.405 --> 00:12:30.285
You used to have to use them literally
all the time, but now with flex and

188
00:12:30.285 --> 00:12:36.365
grid, you can pretty much always get
away with not using floats anymore.

189
00:12:36.365 --> 00:12:37.390
And they're a pain, they're so painful.

190
00:12:37.390 --> 00:12:40.731
And before floats,
we had to use tables for everything.

191
00:12:40.731 --> 00:12:42.926
It was a dark time.

192
00:12:45.077 --> 00:12:46.534
Yeah, you don't wanna
go back to those days.

193
00:12:48.873 --> 00:12:53.210
Okay, So

194
00:12:53.210 --> 00:12:59.408
we're gonna talk about float and

195
00:12:59.408 --> 00:13:03.840
flex for just a second.

196
00:13:03.840 --> 00:13:08.826
So I got these three boxes here that
I intentionally made different sizes

197
00:13:08.826 --> 00:13:12.924
to kinda demonstrate to you
what's different about them.

198
00:13:12.924 --> 00:13:17.745
They have to use same CSS, and
I'll be using the same CSS for

199
00:13:17.745 --> 00:13:19.971
all these the entire time.

200
00:13:19.971 --> 00:13:24.723
By default, if you don't do
anything with no floats, no flex,

201
00:13:24.723 --> 00:13:28.599
nothing else,
this is what they look like, right?

202
00:13:28.599 --> 00:13:32.667
They're spaced out, they by default have
a little bit of margin underneath them.

203
00:13:32.667 --> 00:13:37.599
And yeah, they get laid out by default
just like that, just one each after

204
00:13:37.599 --> 00:13:42.548
the other, they all wanna take
the entire line unto themselves, right?

205
00:13:42.548 --> 00:13:45.836
If I float left,
this is what ends up happening.

206
00:13:45.836 --> 00:13:48.920
And again, I have something
here that's pushing them down,

207
00:13:48.920 --> 00:13:50.472
which is really interesting.

208
00:13:50.472 --> 00:13:54.634
Typically, it wouldn't happen, they would
just be all top aligned with each other.

209
00:13:56.043 --> 00:13:58.705
But they'll all try and fit onto a line.

210
00:13:58.705 --> 00:14:04.697
And then if I,
Start making the browser expand,

211
00:14:04.697 --> 00:14:09.164
I know, it will not be able to fit,
it starts pushing them onto the next line.

212
00:14:09.164 --> 00:14:12.135
So it tries to fit everything, and
then once it runs out of space,

213
00:14:12.135 --> 00:14:18.116
it'll push it down to the next line,
Which is kinda fun, right?

214
00:14:20.720 --> 00:14:25.294
Here, now if I try and say float: right,

215
00:14:25.294 --> 00:14:28.967
same thing, goes the other way.

216
00:14:28.967 --> 00:14:31.739
And I think you can float: center.

217
00:14:31.739 --> 00:14:33.463
No, maybe not.

218
00:14:33.463 --> 00:14:33.963
Middle?

219
00:14:38.173 --> 00:14:39.786
No, you don't,
you can actually do it that way.

220
00:14:39.786 --> 00:14:44.648
So yeah,
you just have to float left or min.

221
00:14:44.648 --> 00:14:47.593
As you can see,
it's limited in its usefulness and

222
00:14:47.593 --> 00:14:51.305
it ends up being really hard to
get things exactly where you are.

223
00:14:51.305 --> 00:14:55.535
And obviously, it's been long since I've
had to do floats that I don't remember

224
00:14:55.535 --> 00:14:59.660
exactly all the nuances, cuz there's
a ton of nuance in how things will float.

225
00:14:59.660 --> 00:15:02.399
So I want you to know
that they are out there.

226
00:15:02.399 --> 00:15:06.465
I show you that because if you start
working at a company that's 20 years old,

227
00:15:06.465 --> 00:15:09.090
you're probably gonna see
floated code in there.

228
00:15:09.090 --> 00:15:12.090
These days, you don't have to use it,
you can use modem flex.

229
00:15:12.090 --> 00:15:15.415
And now, we can even use grid,
which is a relative newcomer.

230
00:15:17.933 --> 00:15:21.081
The problem when they release new CSS,
we have to wait five or

231
00:15:21.081 --> 00:15:23.739
six years before everyone's
browser catches up,

232
00:15:23.739 --> 00:15:28.273
because there's lots of people out there
that don't update their browser very much.

233
00:15:28.273 --> 00:15:31.845
And so if you try and
ship code to them that uses modern CSS and

234
00:15:31.845 --> 00:15:35.862
the browser doesn't understand it,
you have a problem, right?

235
00:15:35.862 --> 00:15:38.283
Because the browser won't recognize it and
therefore won't apply it.

