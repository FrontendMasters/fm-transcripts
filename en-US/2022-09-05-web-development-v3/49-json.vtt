WEBVTT

1
00:00:00.500 --> 00:00:03.160
Let's talk about talking to servers.

2
00:00:03.160 --> 00:00:06.981
So everything that we're doing so far,
the calculator project is a really good

3
00:00:06.981 --> 00:00:09.386
example, it all happens in the browser,
right?

4
00:00:09.386 --> 00:00:10.979
It's not reaching out to any servers.

5
00:00:10.979 --> 00:00:15.731
Once all the HTML, CSS, and JavaScript
is on your computer, it's just there.

6
00:00:15.731 --> 00:00:18.870
So for something like a calculator,
you don't need to talk to a server, right?

7
00:00:18.870 --> 00:00:22.086
You can do a math inside of a browser.

8
00:00:22.086 --> 00:00:24.817
But let's say you have a social network.

9
00:00:24.817 --> 00:00:26.844
Well you need the social part of it,
right?

10
00:00:26.844 --> 00:00:30.475
Which means the data has to
leave the person's browser and

11
00:00:30.475 --> 00:00:33.030
be stored somewhere, right?

12
00:00:33.030 --> 00:00:34.925
So you have some sort of backend,

13
00:00:34.925 --> 00:00:40.013
whether that's something that you wrote in
Node.js, or PHP, or something like that.

14
00:00:40.013 --> 00:00:45.084
Whether that's just calling out to a CMS,
or some sort of managed service,

15
00:00:45.084 --> 00:00:49.780
or you could do something like lambdas,
where it's all serverless.

16
00:00:49.780 --> 00:00:54.140
Doesn't matter, stuff has to leave your
browser, and then it has to come back.

17
00:00:54.140 --> 00:00:56.561
So we're gonna talk about that,

18
00:00:56.561 --> 00:01:01.152
because it's a critical part
of doing frontend development.

19
00:01:01.152 --> 00:01:05.380
99% of all apps have to talk
to a server at some point.

20
00:01:08.609 --> 00:01:09.750
Not this one, right?

21
00:01:09.750 --> 00:01:12.490
I guess my course website doesn't
really have to talk to a server.

22
00:01:12.490 --> 00:01:16.050
There is no backend for
this particular project, right?

23
00:01:16.050 --> 00:01:19.240
I guess the most backending thing is
that it has some analytics on it,

24
00:01:19.240 --> 00:01:20.619
but that would be it, right?

25
00:01:23.676 --> 00:01:25.529
So let's get into it.

26
00:01:25.529 --> 00:01:27.628
The first thing we're
gonna talk about is JSON.

27
00:01:31.090 --> 00:01:34.202
So we're not gonna be writing
any backends today, by the way.

28
00:01:34.202 --> 00:01:36.522
If you wanna get into backend development,

29
00:01:36.522 --> 00:01:38.975
lots of awesome courses
in Frontend Masters.

30
00:01:38.975 --> 00:01:42.350
I think there's a whole
learning path on Node.js,

31
00:01:42.350 --> 00:01:46.350
a great way to get started,
because you now know JavaScript.

32
00:01:46.350 --> 00:01:50.541
You're just gonna apply JavaScript in
a different context, right, which is cool.

33
00:01:50.541 --> 00:01:53.347
But we're just going to be
using other people's backends.

34
00:01:53.347 --> 00:01:55.433
We're not actually going to
be writing our own backend.

35
00:02:00.048 --> 00:02:01.388
And maybe for someone,

36
00:02:01.388 --> 00:02:05.344
it might be helpful to clarify
backend versus frontend terminology.

37
00:02:05.344 --> 00:02:07.565
The frontend is everything that
happens in a browser, right?

38
00:02:07.565 --> 00:02:11.175
So everything that you and I have
been doing over the past couple days,

39
00:02:11.175 --> 00:02:15.658
frontend coding, cuz it's code that we're
writing, HTML, CSS, and JavaScript.

40
00:02:15.658 --> 00:02:19.906
And we're intending to send that code to
someone's computer while it will run on

41
00:02:19.906 --> 00:02:21.285
their computer, right?

42
00:02:21.285 --> 00:02:25.427
If I code my calculator, and
then you later load my calculator,

43
00:02:25.427 --> 00:02:30.123
that code is being executed on your
computer, not my computer, right?

44
00:02:30.123 --> 00:02:32.359
The backend does totally different.

45
00:02:32.359 --> 00:02:35.347
This is going to be that I
wrote a bunch of code, and

46
00:02:35.347 --> 00:02:38.762
then I put it on a server that
lives in Microsoft Azure, or

47
00:02:38.762 --> 00:02:43.050
Amazon Web Services, or DigitalOcean,
or a computer in my basement.

48
00:02:43.050 --> 00:02:44.410
I've literally done that before.

49
00:02:47.150 --> 00:02:49.526
That code is executing on my computer, and

50
00:02:49.526 --> 00:02:52.562
then it's sending new
information from my computer.

51
00:02:52.562 --> 00:02:57.024
That is backend development, make sense?

52
00:02:57.024 --> 00:03:01.768
Okay, so we're not gonna code backend
today, that's outside the scope of what

53
00:03:01.768 --> 00:03:06.325
we're talking about, but we are going
to be using someone else's backend.

54
00:03:08.623 --> 00:03:14.427
Okay, so imagine that you're

55
00:03:14.427 --> 00:03:18.674
writing a bit of code,

56
00:03:21.246 --> 00:03:25.257
And you load this webpage, you load this,
maybe it's a pet adoption app.

57
00:03:25.257 --> 00:03:30.582
That's something that we code in
the React application for my React class.

58
00:03:30.582 --> 00:03:33.767
Someone scrolls down to
the bottom of the page, and

59
00:03:33.767 --> 00:03:37.570
you wanna get more dogs to show
them at the bottom, right?

60
00:03:37.570 --> 00:03:41.620
The infinite scroll, I think we've
all used infinite scroll apps before.

61
00:03:41.620 --> 00:03:44.130
It's not reloading the page, right?

62
00:03:45.640 --> 00:03:47.730
So how do we get more
information into the browser?

63
00:03:48.940 --> 00:03:53.590
We have to have some way to request data
from a server without refreshing the page.

64
00:03:53.590 --> 00:03:56.583
Everything that we've done so far,
we will just refresh the page or

65
00:03:56.583 --> 00:03:57.642
go to a different page.

66
00:03:57.642 --> 00:04:03.488
You have to use a technique that's
called AJAX, right there, AJAX.

67
00:04:05.579 --> 00:04:10.133
So AJAX is an acronym that
is not accurate [LAUGH].

68
00:04:10.133 --> 00:04:14.570
It stands for
Asynchronous JavaScript and XML.

69
00:04:14.570 --> 00:04:16.623
And this has nothing to
do with XML anymore.

70
00:04:16.623 --> 00:04:18.146
It used to, right?

71
00:04:18.146 --> 00:04:22.755
When this came out, it was absolutely
revolutionary that you could request data

72
00:04:22.755 --> 00:04:25.140
from a server without refreshing a page.

73
00:04:25.140 --> 00:04:31.404
Late 90s, maybe mid 90s, that was
revolutionary that that could happen.

74
00:04:31.404 --> 00:04:34.689
And so they call that technique AJAX
because they were requesting, and

75
00:04:34.689 --> 00:04:36.780
it was coming back in XML at the time,
right?

76
00:04:38.070 --> 00:04:39.689
No one uses XML anymore.

77
00:04:39.689 --> 00:04:47.500
If you have to use XML, my apologies,
[LAUGH] you have problems.

78
00:04:47.500 --> 00:04:50.570
But now it's almost always
a different thing called JSON.

79
00:04:50.570 --> 00:04:54.905
And AJAJ just doesn't have the same ring,
so we just keep calling it AJAX.

80
00:04:54.905 --> 00:04:58.191
Now I'd probably just call it
fetch rather than AJAX, but

81
00:04:58.191 --> 00:05:01.400
AJAX is the terminology
that you'll see everywhere.

82
00:05:01.400 --> 00:05:03.920
All that means is that we're
requesting data from a server without

83
00:05:03.920 --> 00:05:04.782
refreshing the page.

84
00:05:06.971 --> 00:05:11.933
Before we get too much into AJAX,
I wanna get you familiar with JSON.

85
00:05:13.943 --> 00:05:18.023
So your application,
your frontend application has to

86
00:05:18.023 --> 00:05:22.490
speak the same language as
the backend server, right?

87
00:05:22.490 --> 00:05:24.634
It'd be like if I picked
up the phone right now and

88
00:05:24.634 --> 00:05:27.458
tried to call someone in Mandarin Chinese,
we have to agree upon

89
00:05:27.458 --> 00:05:30.469
a language that we're not going
to communicate very well, right?

90
00:05:31.590 --> 00:05:34.533
And if I don't speak Mandarin,
and they don't speak English,

91
00:05:34.533 --> 00:05:35.850
nothing is going to happen.

92
00:05:37.010 --> 00:05:39.110
It's the same thing with computers, and

93
00:05:39.110 --> 00:05:42.470
it's totally the same idea if my
frontend calls your backend, and

94
00:05:42.470 --> 00:05:45.905
they don't have the same sort of
protocol to speak with each other.

95
00:05:45.905 --> 00:05:48.997
Nothing can happen because
my frontend will not

96
00:05:48.997 --> 00:05:52.792
understand what the backend is saying,
or vice-versa.

97
00:05:52.792 --> 00:05:56.055
There used to be several ways
of sending that information.

98
00:05:56.055 --> 00:06:01.830
One of them was XML that was very
popular back in years and years ago.

99
00:06:01.830 --> 00:06:06.628
But we've all kind of standardized
around this thing called JSON,

100
00:06:06.628 --> 00:06:10.010
which stands for
JavaScript Object Notation.

101
00:06:12.250 --> 00:06:16.074
Luckily for us,
we're coding JavaScript already, and

102
00:06:16.074 --> 00:06:19.668
this will make JSON look very,
very familiar to you.

103
00:06:19.668 --> 00:06:22.616
What does this look like right here?

104
00:06:22.616 --> 00:06:25.296
It just looks like a JavaScript object,
right?

105
00:06:25.296 --> 00:06:27.981
There's a reason why it's called
JavaScript Object Notation.

106
00:06:27.981 --> 00:06:31.159
It's because that I can
literally copy this.

107
00:06:33.347 --> 00:06:40.795
And I can say, luna =, and
I can just straight up paste this, right?

108
00:06:40.795 --> 00:06:44.620
And now I have a luna
object here in JavaScript.

109
00:06:44.620 --> 00:06:50.116
So this JSON is actually valid JavaScript,
which is kind of cool, right?

110
00:06:52.199 --> 00:06:57.312
Now, someone might ask me the question,
is all JSON valid JavaScript?

111
00:06:57.312 --> 00:07:02.066
Technically, you can have valid
JSON that is not valid JavaScript.

112
00:07:02.066 --> 00:07:03.673
It's really hard to do.

113
00:07:03.673 --> 00:07:08.626
So you can kind of operate on
the assumption almost all JSON is

114
00:07:08.626 --> 00:07:10.287
valid JavaScript.

115
00:07:13.866 --> 00:07:18.892
And this is not necessarily directly how
you and I would write JavaScript, right?

116
00:07:18.892 --> 00:07:23.582
If I was gonna do this, Technically,

117
00:07:23.582 --> 00:07:27.266
these quotes here are optional,
right, in JavaScript.

118
00:07:29.862 --> 00:07:32.398
Right, so I have name and age here that
don't have the quotes around them,

119
00:07:32.398 --> 00:07:33.211
whereas these ones do.

120
00:07:33.211 --> 00:07:36.520
It doesn't matter, both of these
are totally valid in JavaScript.

121
00:07:36.520 --> 00:07:40.283
In JSON, the quotes around the key and
the value are required,

122
00:07:40.283 --> 00:07:44.690
so you actually have to have these
quotes on both sides, just so you know.

123
00:07:46.320 --> 00:07:47.980
So not all JavaScript is valid.JSON.

124
00:07:47.980 --> 00:07:49.560
I think that tracks, right?

125
00:07:51.090 --> 00:07:53.400
Now, you're asking me why
are we talking about this?

126
00:07:53.400 --> 00:07:57.038
This is a really useful way for servers
and frontends to send information back and

127
00:07:57.038 --> 00:07:58.740
forth to each other, right?

128
00:07:58.740 --> 00:08:01.260
So I can say, hey, give me luna, right?

129
00:08:01.260 --> 00:08:03.892
And that server can then pull
this out of its database and

130
00:08:03.892 --> 00:08:05.184
send it down to me, right?

131
00:08:09.214 --> 00:08:12.766
Okay, so let's say we have some sort of,

132
00:08:15.777 --> 00:08:19.348
Response from a service to pretend that
we made some call to a server, and

133
00:08:19.348 --> 00:08:22.995
we got this response back from the server,
something like this, right?

134
00:08:22.995 --> 00:08:27.604
Notice this is a string,
cuz it'll come back as a string, right?

135
00:08:27.604 --> 00:08:30.463
Your server is not gonna be
able to send an object down,

136
00:08:30.463 --> 00:08:33.207
because an object is a native
JavaScript datatype.

137
00:08:33.207 --> 00:08:35.940
It's gonna send you a string, and

138
00:08:35.940 --> 00:08:40.379
then it's up to you to parse
that string into an object.

139
00:08:40.379 --> 00:08:44.105
So again, if I say
console.log(responseFromServer) here,

140
00:08:44.105 --> 00:08:46.814
notice that this is a weird
looking string, and

141
00:08:46.814 --> 00:08:49.469
it has all these escape backslashes,
right?

142
00:08:49.469 --> 00:08:55.798
So there is a built in to
the JavaScript language called JSON,

143
00:08:55.798 --> 00:09:00.071
all caps, you say JSON.parse, right?

144
00:09:00.071 --> 00:09:04.375
Parse is just saying, I promise what
I'm giving you now is valid JSON,

145
00:09:04.375 --> 00:09:07.120
you should turn this into an object,
right?

146
00:09:07.120 --> 00:09:08.110
That's what that means there.

147
00:09:09.420 --> 00:09:14.030
And then now,
if I say console.log(responseObject.name),

148
00:09:14.030 --> 00:09:18.730
I'm actually able to get Luna out of it,
location.city, right?

149
00:09:18.730 --> 00:09:23.436
I can actually pull things out of it as
if it was a normal JavaScript object,

150
00:09:23.436 --> 00:09:27.936
because now this response object is
a normal valid JavaScript object.

151
00:09:27.936 --> 00:09:30.410
Does that make sense, cool.

152
00:09:32.793 --> 00:09:38.755
Yeah, we talked about escape
characters earlier in the course.

153
00:09:38.755 --> 00:09:45.609
What happens if I wanna have a string of
one double quote, how would you do that?

154
00:09:45.609 --> 00:09:52.961
If I wanna say let doubleQuote =,
how would I have one double quote?

155
00:09:52.961 --> 00:09:57.698
If I put one quote here, Yeah,
so you have to escape it.

156
00:09:57.698 --> 00:09:59.874
I have to put a backslash there.

157
00:09:59.874 --> 00:10:05.200
And so now if I say doubleQuote,
this is actually just one double quote.

158
00:10:05.200 --> 00:10:06.618
This backslash would not show up.

159
00:10:09.149 --> 00:10:14.295
Now, an even easier way to do that,
by the way, would just be to use single

160
00:10:14.295 --> 00:10:19.029
quotes and put one double quote in there,
same thing or backticks.

161
00:10:19.029 --> 00:10:24.070
But this particular language that we're
using here just always uses double quotes,

162
00:10:24.070 --> 00:10:28.259
so it has to always escape all of
its double quotes, that's why.

163
00:10:28.259 --> 00:10:33.399
A valid thing to talk about as well
with JSON, it's always double quotes.

164
00:10:33.399 --> 00:10:36.708
You cannot use single quotes in JSON or
backticks.

165
00:10:36.708 --> 00:10:38.943
Always, always, always double quotes.

166
00:10:38.943 --> 00:10:42.128
And notice that the 10 here is a number,
right?

167
00:10:42.128 --> 00:10:45.623
So it doesn't have quotes around it
because you can have numbers in JSON.

168
00:10:48.474 --> 00:10:53.684
So JSON can have strings, numbers,

169
00:10:53.684 --> 00:10:59.241
objects, and arrays, and booleans.

170
00:10:59.241 --> 00:11:00.225
I think that's it.

171
00:11:02.726 --> 00:11:07.951
Right, you can have objects of objects,
the nesting there is infinite.

172
00:11:07.951 --> 00:11:12.785
But at the end of the day you can only
have strings, numbers, Booleans, objects,

173
00:11:12.785 --> 00:11:13.510
arrays.

174
00:11:13.510 --> 00:11:17.655
Another thing that bears mentioning,
commas here are not optional, right?

175
00:11:17.655 --> 00:11:19.586
So I have to have comma, comma, comma.

176
00:11:19.586 --> 00:11:23.569
And if you remember in JavaScript
the final comma is optional,

177
00:11:23.569 --> 00:11:27.563
in JSON it's not,
you must leave off the final comma, right?

178
00:11:27.563 --> 00:11:31.556
So notice I don't have a comma here,
I don't have a comma here.

179
00:11:31.556 --> 00:11:33.627
JSON will not allow you to do that.

180
00:11:36.973 --> 00:11:41.441
They're all things you kinda just get
used to by doing it over and over again,

181
00:11:41.441 --> 00:11:46.010
but I'm trying to think about how you
could run into trouble with this, okay?

182
00:11:48.080 --> 00:11:49.498
So let's go in the opposite direction.

183
00:11:49.498 --> 00:11:53.008
Let's say I have Luna here,
or my dog object, and

184
00:11:53.008 --> 00:11:57.363
I want to encode this into JSON so
that I can send it to a server.

185
00:11:57.363 --> 00:11:58.238
How would I do that?

186
00:12:00.642 --> 00:12:05.855
Well, there's JSON.stringify, which is my
favorite name of a function in JavaScript.

187
00:12:08.023 --> 00:12:13.677
All it does is it takes an object and
it turns it into a string of JSON, right?

188
00:12:13.677 --> 00:12:21.152
So if I have const myObj
= {name: "Brian"}, right?

189
00:12:23.682 --> 00:12:28.136
So if I just log this out,
it's a object that has Brian on.

190
00:12:28.136 --> 00:12:34.259
If I say my object.name,
if I say JSON.stringify and

191
00:12:34.259 --> 00:12:37.861
I give it my object, I get this.

192
00:12:37.861 --> 00:12:40.256
It's a string containing all of this,
right?

193
00:12:43.629 --> 00:12:44.872
Makes sense?

194
00:12:46.823 --> 00:12:48.559
Cuz you have to think
about how a server and

195
00:12:48.559 --> 00:12:50.599
a client are gonna
communicate with each other.

196
00:12:50.599 --> 00:12:53.194
They're just gonna send each
other strings of information.

197
00:12:53.194 --> 00:12:56.522
And then it's up to either side
of it to turn that into data, or

198
00:12:56.522 --> 00:12:57.810
understand that data.

199
00:12:58.940 --> 00:13:03.618
So something that's useful sometimes is
notice here I just said stringify with no

200
00:13:03.618 --> 00:13:05.669
additional options here, right?

201
00:13:05.669 --> 00:13:06.758
And that worked.

202
00:13:06.758 --> 00:13:10.660
It makes it as compact as possible,
so there's no extra whitespace in it.

203
00:13:10.660 --> 00:13:13.120
Sometimes I actually do wanna
see the whitespace, right?

204
00:13:13.120 --> 00:13:15.660
I'm actually trying to understand
what's going on in my code.

205
00:13:16.920 --> 00:13:22.057
So if I do JSON.stringify(dog, null) or
you can put whatever you want here,

206
00:13:22.057 --> 00:13:25.827
usually, I just put null,
it doesn't sound important.

207
00:13:25.827 --> 00:13:31.863
And then if I put 4 here,
then you get this.

208
00:13:31.863 --> 00:13:37.359
It indents your JSON with
extra optional whitespace,

209
00:13:37.359 --> 00:13:41.544
and that makes it easier to read, right?

210
00:13:41.544 --> 00:13:43.048
I can put 2 here, right?

211
00:13:43.048 --> 00:13:47.588
And notice that it just
indents it with 2 now.

212
00:13:47.588 --> 00:13:52.245
Or I can put 1,
which makes it really strange to read.

213
00:13:52.245 --> 00:13:57.083
Or I can put 6, which makes it
super indented, whatever you want.

214
00:13:57.083 --> 00:14:00.256
That's just how much you're
gonna indent the code with.

215
00:14:03.499 --> 00:14:11.753
Just wanted to show that to you because,
Yeah, we're looking down here, right?

216
00:14:11.753 --> 00:14:13.611
So notice, this is all very close here.

217
00:14:13.611 --> 00:14:17.364
This is a little bit further,
further, further, right?

218
00:14:17.364 --> 00:14:19.940
So notice it's getting more and
more indented as I go.

219
00:14:23.806 --> 00:14:24.736
Cool.

220
00:14:29.015 --> 00:14:32.528
So yeah, you might ask,
why is there a null there?

221
00:14:32.528 --> 00:14:34.729
Back in the day,
they thought it'd be good ideas.

222
00:14:34.729 --> 00:14:38.654
What happens if I need to modify something
as it's being translated into JSON?

223
00:14:38.654 --> 00:14:42.882
They give you the ability to put
a function there that can modify things as

224
00:14:42.882 --> 00:14:43.446
it goes.

225
00:14:43.446 --> 00:14:46.176
Literally, no one uses it.

226
00:14:46.176 --> 00:14:49.908
So I'm just telling you that for
your curiosity.

227
00:14:49.908 --> 00:14:52.231
But this will always be null,
if you ever use it.

228
00:14:52.231 --> 00:14:54.851
No one uses the replacer function.

229
00:14:54.851 --> 00:15:00.707
I would venture to say that 95% of people
don't even know what the null is there,

230
00:15:00.707 --> 00:15:02.473
they just always put it.

231
00:15:02.473 --> 00:15:04.039
I just happened to look it up one time.

232
00:15:07.238 --> 00:15:09.791
Okay, questions about JSON?

233
00:15:12.449 --> 00:15:13.664
I know this was a little abstract.

234
00:15:13.664 --> 00:15:15.370
We're about to start using JSON, but

235
00:15:15.370 --> 00:15:18.368
it's important that you understand
how it works, essentially.

