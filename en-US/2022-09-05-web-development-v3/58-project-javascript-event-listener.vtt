WEBVTT

1
00:00:00.110 --> 00:00:04.637
The first thing I'm gonna do is I'm
just gonna go query the DOM for

2
00:00:04.637 --> 00:00:08.602
all of the things that I know
I'm definitely gonna need.

3
00:00:08.602 --> 00:00:11.436
I'm gonna need all of the letters for
sure so

4
00:00:11.436 --> 00:00:15.890
I'm gonna say const letters equals
document.query selector all.

5
00:00:17.890 --> 00:00:23.719
And I'm gonna ask for .scoreboard-letter.

6
00:00:25.696 --> 00:00:28.982
So, if I just say console.logletters, and

7
00:00:28.982 --> 00:00:33.746
I come back over here and refresh and
I open this into the console.

8
00:00:33.746 --> 00:00:38.148
I now have a node list,
which is a array like right?

9
00:00:38.148 --> 00:00:42.245
It's not quite an array but for all
intensive purposes it's very array like.

10
00:00:42.245 --> 00:00:47.880
I have all of the letters here,
in an array like thing, but

11
00:00:47.880 --> 00:00:53.635
what's important here is that
they're in order, right?

12
00:00:58.365 --> 00:01:01.921
Which is important now because if
I have to modify the zero a thing,

13
00:01:01.921 --> 00:01:05.813
I can just go modify this one and
I know exactly which one I'm modifying.

14
00:01:05.813 --> 00:01:09.670
So that's gonna become important
with my approach to this later.

15
00:01:09.670 --> 00:01:14.205
Again, I'm doing my approach, you could
have done this a totally different way.

16
00:01:14.205 --> 00:01:19.485
And then I'm going to grab the loading
div as well because I'll have to hide and

17
00:01:19.485 --> 00:01:20.768
show that as well.

18
00:01:25.809 --> 00:01:29.238
You could do get element by ID or
query selector up to you,

19
00:01:29.238 --> 00:01:31.029
query selector will do that.

20
00:01:34.869 --> 00:01:38.357
.info-bar like that,

21
00:01:38.357 --> 00:01:42.842
which is this info-bar appears

22
00:01:42.842 --> 00:01:47.501
this loading indicator, okay?

23
00:01:50.527 --> 00:01:54.762
So what can we do first?

24
00:01:54.762 --> 00:01:55.893
What would I do first?

25
00:01:59.369 --> 00:02:02.648
I might grab the word of the day first.

26
00:02:02.648 --> 00:02:04.780
Or you could work on typing.

27
00:02:04.780 --> 00:02:06.650
Maybe we work on typing,
that might be a good thing.

28
00:02:06.650 --> 00:02:07.965
Let's do that.

29
00:02:11.231 --> 00:02:17.657
Okay, as you can see there's tons
of ways that we could do this,

30
00:02:17.657 --> 00:02:22.662
so I'm gonna make an async
function called init.

31
00:02:25.166 --> 00:02:28.940
And then I'm going to call init down here.

32
00:02:28.940 --> 00:02:33.555
Part of the reason why I'm doing it this
way is now inside of my init function,

33
00:02:33.555 --> 00:02:36.331
I can do await wherever I want,
which is nice.

34
00:02:46.465 --> 00:02:47.297
Okay.

35
00:02:51.556 --> 00:02:55.531
So let's do our event listener here,

36
00:02:55.531 --> 00:03:00.251
I'm going to document getElement, sorry,

37
00:03:00.251 --> 00:03:03.743
document.addEventListener.

38
00:03:05.518 --> 00:03:09.840
We're gonna listen for a keydown.

39
00:03:12.113 --> 00:03:16.013
We're gonna listen for keydown because
we wanna catch backspace and enter,

40
00:03:16.013 --> 00:03:18.356
which I think doesn't
activate on key press.

41
00:03:18.356 --> 00:03:22.950
Some of it's a little finicky on
which one will fire on which event.

42
00:03:22.950 --> 00:03:26.010
But I remember that keydown
is one that I'm looking for.

43
00:03:26.010 --> 00:03:31.768
I'm gonna write a function
here just it takes an event.

44
00:03:34.714 --> 00:03:39.555
In my notes here actually named this
function which is optional by the way.

45
00:03:39.555 --> 00:03:42.753
I call it handleKeyPress.

46
00:03:42.753 --> 00:03:44.425
Why would I name this?

47
00:03:44.425 --> 00:03:46.824
The only reason is like
when there's an error and

48
00:03:46.824 --> 00:03:50.568
that you see like the whole stack trace
that it prints out into your console,

49
00:03:50.568 --> 00:03:52.752
it'll print the name of whatever's here.

50
00:03:52.752 --> 00:03:56.270
If I don't have this,
it'll just say anonymous function.

51
00:03:56.270 --> 00:03:58.890
But if I have this,
it'll say handleKeyPress.

52
00:03:58.890 --> 00:04:01.970
It helps me debug code later stuff breaks.

53
00:04:01.970 --> 00:04:03.495
So, the name here is optional,

54
00:04:03.495 --> 00:04:07.118
it could just totally be an anonymous
function which would be totally fine.

55
00:04:11.057 --> 00:04:13.581
And then the first thing I'm looking for
here is const.

56
00:04:16.186 --> 00:04:20.123
Action = event.key.

57
00:04:22.890 --> 00:04:25.297
And then let's just take
a look at what that is.

58
00:04:28.894 --> 00:04:29.823
Refresh the page.

59
00:04:32.494 --> 00:04:33.972
So if I start typing in here,

60
00:04:33.972 --> 00:04:37.434
you can see I'm getting all
the letters that the person is typing.

61
00:04:37.434 --> 00:04:38.974
If I hit Enter, I get enter.

62
00:04:38.974 --> 00:04:42.335
If I hit Backspace, I get backspace.

63
00:04:43.426 --> 00:04:46.101
All the things.

64
00:04:46.101 --> 00:04:50.500
I can do, dog, it's up to what
I'm actually typing anything so

65
00:04:50.500 --> 00:04:53.196
it doesn't know what to do about that.

66
00:04:56.093 --> 00:05:00.391
You can see that if I hold it,
it's gonna give me many events, right?

67
00:05:00.391 --> 00:05:05.097
So this was 74 key presses of
F just because I held it down.

68
00:05:05.097 --> 00:05:11.898
That spacebar plus all the things,

69
00:05:11.898 --> 00:05:15.302
okay, good so far

70
00:05:18.288 --> 00:05:22.027
Now I'm gonna make this just
delegate to other functions, right?

71
00:05:22.027 --> 00:05:24.076
Because I want to keep my
event listener kind of simple.

72
00:05:28.544 --> 00:05:33.134
So I'm gonna say,
if action triple equals enter,

73
00:05:33.134 --> 00:05:39.236
then we'll make some function
here that'll handle that, right?

74
00:05:40.991 --> 00:05:44.931
I called this commit, don't do that.

75
00:05:44.931 --> 00:05:46.770
And we'll go write
a function called commit.

76
00:05:49.030 --> 00:05:52.410
But this is basically the users
trying to commit a guess, right?

77
00:05:52.410 --> 00:05:58.224
They're trying to guess something, okay?

78
00:05:58.224 --> 00:06:03.924
Else if, by the way, you could
totally use a switch statement here,

79
00:06:03.924 --> 00:06:06.001
would be totally valid.

80
00:06:06.001 --> 00:06:12.246
If action is triple equal to backspace,
they're trying to do, erase something.

81
00:06:12.246 --> 00:06:16.015
So, we'll call some backspace function,
that we go right.

82
00:06:16.015 --> 00:06:20.210
I find that I do this very often.

83
00:06:20.210 --> 00:06:22.057
I kind of write skeleton code,
is like, okay,

84
00:06:22.057 --> 00:06:24.010
I know I have to have some
function that does this.

85
00:06:24.010 --> 00:06:27.070
And so I kind of treat commit
like a black box, right?

86
00:06:27.070 --> 00:06:28.721
Like I'm trying to do something and

87
00:06:28.721 --> 00:06:31.812
then later I'll go make it do
the thing that I told myself I'll do.

88
00:06:31.812 --> 00:06:35.831
But I'll write the skeleton of the code
first to kind of lay myself out.

89
00:06:40.716 --> 00:06:46.735
Basically, I'm relying on future
Brian to fix past Brian's problems.

90
00:06:46.735 --> 00:06:50.287
And then here, remember that is letter
function I showed you before we got

91
00:06:50.287 --> 00:06:52.850
started, we're gonna use that here.

92
00:06:52.850 --> 00:06:54.355
Otherwise if this is a letter.

93
00:06:58.578 --> 00:07:04.677
Then we're going to go do add letter,

94
00:07:04.677 --> 00:07:12.452
with action.toUppercase Remember here,

95
00:07:12.452 --> 00:07:16.883
like if we look here at the correct word,
all right, the one that I have up here,

96
00:07:16.883 --> 00:07:21.068
everything is in uppercase, even if
I do lowercase or uppercase, right?

97
00:07:21.068 --> 00:07:24.870
Everything's uppercase, so
I'm just gonna call this right here.

98
00:07:24.870 --> 00:07:27.050
So everything that I'm
dealing with is uppercase.

99
00:07:28.280 --> 00:07:30.530
That's just a good advice for you.

100
00:07:30.530 --> 00:07:33.671
Just pick a lane, make everything
lowercase, make everything uppercase, and

101
00:07:33.671 --> 00:07:34.693
then just be consistent.

102
00:07:37.862 --> 00:07:42.736
Okay, if it's not enter,
if it's not backspace, and

103
00:07:42.736 --> 00:07:48.022
if it's not a letter,
it's like a symbol, it's a number,

104
00:07:48.022 --> 00:07:52.709
it's a space bar,
it's an arrow key, what do we do?

105
00:07:55.103 --> 00:07:57.330
Ignore it, right?

106
00:07:57.330 --> 00:08:00.500
Like if you do spacebar on this, let's do,

107
00:08:00.500 --> 00:08:05.401
what would you expect it to do it
just doesn't do anything, right?

108
00:08:05.401 --> 00:08:06.887
It just ignores it.

109
00:08:09.118 --> 00:08:11.919
So, that's we're gonna do.

110
00:08:11.919 --> 00:08:12.887
Do nothing.

111
00:08:18.750 --> 00:08:22.005
Now, you could say, do I have to for
that else do nothing?

112
00:08:22.005 --> 00:08:24.040
No, you could just leave it off.

113
00:08:24.040 --> 00:08:25.800
You can make it implicit.

114
00:08:25.800 --> 00:08:28.875
I'd like to put it in there and
put this do nothing in there, so

115
00:08:28.875 --> 00:08:31.970
I'm very explicitly telling
future person reading my code.

116
00:08:33.020 --> 00:08:36.650
I know that I did not put an else here and
I am expecting it to do nothing.

117
00:08:38.240 --> 00:08:39.430
&gt;&gt; Is that the same thing as return?

118
00:08:40.440 --> 00:08:45.600
&gt;&gt; No, so this is just a comment, right?

119
00:08:45.600 --> 00:08:47.900
I'm just leaving a comment.

120
00:08:47.900 --> 00:08:49.580
This can be anything, right?

121
00:08:49.580 --> 00:08:52.825
I'm leaving a future comment for
someone just saying, I mean,

122
00:08:52.825 --> 00:08:56.520
this block does nothing,
this entire if statement does nothing.

123
00:08:56.520 --> 00:08:59.916
If I put like for example,
return right here, it actually,

124
00:08:59.916 --> 00:09:03.260
you can see this actually grayed
out my code there, right?

125
00:09:05.440 --> 00:09:08.060
It's because this ends now, right?

126
00:09:08.060 --> 00:09:10.693
None of this code gets run,
if I put return here and

127
00:09:10.693 --> 00:09:14.541
I had something underneath it,
it would not run the code underneath it.

128
00:09:14.541 --> 00:09:15.505
That makes sense?

129
00:09:15.505 --> 00:09:17.410
Yeah, good question.

130
00:09:19.430 --> 00:09:23.705
So you only want to put return there when
you're explicitly trying to short circuit

131
00:09:23.705 --> 00:09:24.570
and exit early.

132
00:09:27.090 --> 00:09:30.694
Now, I'm actually not gonna put any code
underneath this because I don't need to do

133
00:09:30.694 --> 00:09:31.840
anything else.

134
00:09:31.840 --> 00:09:35.200
So, implicitly there's a term
return here at the end.

135
00:09:36.730 --> 00:09:39.290
Or which would essentially do
a return undefined, right?

136
00:09:39.290 --> 00:09:41.301
Because if you don't return anything,
then return it undefined.

137
00:09:43.009 --> 00:09:44.322
But we don't need that.

138
00:09:44.322 --> 00:09:46.224
We can leave that implicit.

139
00:09:50.937 --> 00:09:53.605
Okay, good so far?

140
00:09:53.605 --> 00:09:57.727
So now we have to just go and do commit,
and backspace, and isLetter, and

141
00:09:57.727 --> 00:09:58.470
addLetter.

142
00:09:58.470 --> 00:10:00.269
We have to go do all of these things,
right?

143
00:10:00.269 --> 00:10:04.484
But we now have a skeleton of
how we expect our code to work.

144
00:10:07.426 --> 00:10:11.655
Another piece of advice I'm just
gonna give you right now is like,

145
00:10:11.655 --> 00:10:14.837
I try not to do very much
in these event listeners.

146
00:10:14.837 --> 00:10:17.240
I try to just delegate things out.

147
00:10:17.240 --> 00:10:19.970
So that's just kind of
a good habit to get into.

