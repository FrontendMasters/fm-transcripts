WEBVTT

1
00:00:00.000 --> 00:00:04.244
So let's talk about numbers and
strings and booleans.

2
00:00:04.244 --> 00:00:07.898
So JavaScript has a lot of these
different kind of data types.

3
00:00:07.898 --> 00:00:10.235
You don't really have to worry
too much about data types then,

4
00:00:10.235 --> 00:00:12.234
JavaScript is what's called
the dynamic language.

5
00:00:12.234 --> 00:00:15.003
That means it's pretty fast and loose.

6
00:00:15.003 --> 00:00:16.660
If we were in C++ or Java,

7
00:00:16.660 --> 00:00:20.204
this would be a lot more picky
about what we did about this.

8
00:00:20.204 --> 00:00:23.005
If that means nothing to you, that's fine.

9
00:00:23.005 --> 00:00:24.177
That's probably actually good.

10
00:00:24.177 --> 00:00:24.849
[LAUGH] But

11
00:00:24.849 --> 00:00:30.743
let's talk about all the different kinds
of things that you can use in JavaScript.

12
00:00:30.743 --> 00:00:36.386
So for example,
here I have const myName = "Brian Holt".

13
00:00:36.386 --> 00:00:41.256
Now, these double quotes are really
important cuz this denotes to JavaScript,

14
00:00:41.256 --> 00:00:43.553
I'm gonna give you a string, right?

15
00:00:43.553 --> 00:00:45.343
A string of characters.

16
00:00:45.343 --> 00:00:49.162
So, a string of characters is just
words or letters or numbers or

17
00:00:49.162 --> 00:00:50.800
literally anything here.

18
00:00:50.800 --> 00:00:55.972
So I can put whatever that can be numbers,
it can be that kind of stuff,

19
00:00:55.972 --> 00:01:00.108
I think I can even put emojis here,
if I want to, right?

20
00:01:00.108 --> 00:01:02.785
It's totally fine with
all of those things.

21
00:01:02.785 --> 00:01:06.377
So basically, any sort of text
you would imagine, totally fine,

22
00:01:06.377 --> 00:01:09.403
you can put that all here as
long as you have your quotes.

23
00:01:09.403 --> 00:01:12.711
Even an empty string where there's
nothing in between it, totally okay.

24
00:01:14.443 --> 00:01:15.802
Even whitespace, right?

25
00:01:15.802 --> 00:01:19.284
You can see down here,
it's just logging out all this whitespace.

26
00:01:23.689 --> 00:01:27.953
So there's that double quotes is okay,
you can also do single quotes.

27
00:01:30.720 --> 00:01:36.063
Sometimes those are useful if
I need double quotes inside

28
00:01:36.063 --> 00:01:43.562
of my string, Right?

29
00:01:43.562 --> 00:01:45.788
Because when you put this single quote,

30
00:01:45.788 --> 00:01:49.137
it's only gonna end it when
there's another single quote.

31
00:01:49.137 --> 00:01:52.890
Now, you might ask here,
why are there backslashes here?

32
00:01:52.890 --> 00:01:57.665
It's because it has to escape them.

33
00:01:57.665 --> 00:02:01.337
So notice here,
it has double quote here and

34
00:02:01.337 --> 00:02:05.215
a double quote here to
denote the full string.

35
00:02:05.215 --> 00:02:08.724
How does it know that
the string is not ending here?

36
00:02:08.724 --> 00:02:10.513
Well, it has to escape it, right?

37
00:02:10.513 --> 00:02:14.382
So for example,
here I have single quotes up here.

38
00:02:14.382 --> 00:02:18.404
If I put, I don't do that,
it thinks it ends here,

39
00:02:18.404 --> 00:02:22.160
right, because it hits
another single quote.

40
00:02:22.160 --> 00:02:24.280
So how do I prevent that?

41
00:02:24.280 --> 00:02:27.617
If I put a backslash,
then it's okay with that.

42
00:02:27.617 --> 00:02:31.229
Now, you might think like, well, I don't
want that backslash to show up in my code.

43
00:02:31.229 --> 00:02:32.591
It's totally fine, it will not.

44
00:02:32.591 --> 00:02:35.548
It's just this particular
software that does it.

45
00:02:35.548 --> 00:02:39.508
So for example, if I say,
we're just going back here.

46
00:02:43.868 --> 00:02:48.678
We'll put semicolons, don't do that.

47
00:02:48.678 --> 00:02:53.045
If I save that and
reevaluate that here in my experiments,

48
00:02:54.269 --> 00:02:56.725
Totally fine, nothing's amiss, right?

49
00:02:59.146 --> 00:03:01.021
The next thing people ask me is,

50
00:03:01.021 --> 00:03:05.200
how do I do a backslash then have
a backslash escape something, right?

51
00:03:05.200 --> 00:03:07.808
If I do that, but not here rather.

52
00:03:10.612 --> 00:03:13.928
You just put a double backslash, which
will end up being a single backslash.

53
00:03:15.974 --> 00:03:21.346
Okay, the other one I'll call out really
quickly is I showed you single quotes,

54
00:03:21.346 --> 00:03:23.254
I showed you double quotes.

55
00:03:23.254 --> 00:03:25.219
You can also use what
are called backticks.

56
00:03:25.219 --> 00:03:30.095
So you know on your tilde key, which is
right next to your 1 key on your keyboard.

57
00:03:30.095 --> 00:03:38.106
You can also do, Backticks like this.

58
00:03:38.106 --> 00:03:39.759
This is also valid as well.

59
00:03:43.942 --> 00:03:46.312
Which ends up being really nice because,

60
00:03:46.312 --> 00:03:50.316
how many of you have ever used
a backtick for literally anything else?

61
00:03:50.316 --> 00:03:56.654
I actually frankly don't know
what it's for beyond coding.

62
00:03:56.654 --> 00:04:00.780
Someone's gonna tell me in the comments,
I'm sure, but I actually don't notice for

63
00:04:00.780 --> 00:04:03.057
I've never really thought
about that before.

64
00:04:03.057 --> 00:04:06.216
So it's really nice for strings because
you never have to use backticks for

65
00:04:06.216 --> 00:04:07.380
literally anything else.

66
00:04:11.894 --> 00:04:15.196
The other nice thing about backticks
is you can do multiple lines of it.

67
00:04:17.653 --> 00:04:20.308
Whereas with single quotes and
double quotes, it doesn't work, but

68
00:04:20.308 --> 00:04:21.353
with backticks, it does.

69
00:04:29.487 --> 00:04:33.643
So, that is a string, right?

70
00:04:33.643 --> 00:04:37.778
It's just an arbitrary collection of

71
00:04:37.778 --> 00:04:43.124
characters, Okay?

72
00:04:43.124 --> 00:04:47.361
So let's get on to a bit more complicated
example here, I have const firstName,

73
00:04:47.361 --> 00:04:48.685
Brian lastName, Holt.

74
00:04:48.685 --> 00:04:51.303
Now, what happens if I wanna
put the strings together?

75
00:04:51.303 --> 00:04:54.944
This is called string concatenation.

76
00:04:54.944 --> 00:04:59.302
So sentence = Hello, and then I can just
put a plus sign here and JavaScript isn't

77
00:04:59.302 --> 00:05:03.616
smart enough to say, you're putting
two strings together, I can do that.

78
00:05:03.616 --> 00:05:08.729
So, this first sentence says, Hello, and
then notice that there's this space here.

79
00:05:08.729 --> 00:05:11.333
Why do I have a space there?

80
00:05:11.333 --> 00:05:14.300
Cuz if I don't have a space there,
it's literally gonna shove them together

81
00:05:14.300 --> 00:05:16.506
because you didn't tell it
to put a space there, right?

82
00:05:16.506 --> 00:05:20.548
So you actually have to put
that literal space there, or

83
00:05:20.548 --> 00:05:23.821
it'll try and smash those things together.

84
00:05:23.821 --> 00:05:28.799
So same thing here, I do Hello +
firstName +, I have to put a space there,

85
00:05:28.799 --> 00:05:32.289
or else this space right here won't exist,
right?

86
00:05:32.289 --> 00:05:34.600
If I just get rid of that entire
little thing right there,

87
00:05:34.600 --> 00:05:36.633
it's gonna shove Brian Holt
straight together.

88
00:05:39.391 --> 00:05:43.521
So it gets a little burdensome because you
have to do a lot of concatenation to get

89
00:05:43.521 --> 00:05:45.196
the exact string that you want.

90
00:05:45.196 --> 00:05:48.816
So I wanted to show you how to
do this with the backticks.

91
00:05:48.816 --> 00:05:53.494
So, notice these are double quotes,
notice these are backticks again,

92
00:05:53.494 --> 00:05:56.369
that same one that I
showed you on your tilde.

93
00:05:56.369 --> 00:06:00.986
You can do this special syntax here with
the dollar sign in the curly braces to

94
00:06:00.986 --> 00:06:03.669
just put variables inside of your strings.

95
00:06:06.785 --> 00:06:07.670
And that makes this.

96
00:06:11.306 --> 00:06:12.703
Yeah, I need a plus sign here.

97
00:06:14.948 --> 00:06:18.163
So sentence are 4 and 5.

98
00:06:20.009 --> 00:06:22.849
Obviously, they log out
the exact same thing.

99
00:06:25.808 --> 00:06:28.212
In your opinion,
which one do you think's more readable?

100
00:06:30.129 --> 00:06:35.619
I think the one on line five
looks more readable to me.

101
00:06:35.619 --> 00:06:40.091
So again, this is called a template
string, by the way, what I'm showing you.

102
00:06:40.091 --> 00:06:44.073
This is brand new with, again, as of 2015.

103
00:06:44.073 --> 00:06:45.752
You have to use backticks so

104
00:06:45.752 --> 00:06:49.038
these templates won't work
in single quotes right?

105
00:06:49.038 --> 00:06:55.430
So if I do this, it's literally going to
put that string into my string, right?

106
00:06:55.430 --> 00:07:02.298
So one, you must be using backticks, and
then use dollar sign and then curly brace.

107
00:07:07.233 --> 00:07:09.816
Which if you've ever
done bash programming,

108
00:07:09.816 --> 00:07:12.473
that's how you do it in bash as well,
fun fact.

109
00:07:12.473 --> 00:07:16.916
If you don't know what bash is, there's
a whole course on introduction to Linux in

110
00:07:16.916 --> 00:07:19.651
the CLI, I'm told very attractive,
gentlemen.

111
00:07:21.522 --> 00:07:22.859
It's me, I did it.

112
00:07:27.108 --> 00:07:29.399
Okay, so that is strings and

113
00:07:29.399 --> 00:07:33.793
string concatenation and
putting strings together.

114
00:07:36.103 --> 00:07:40.123
Strings are very useful, obviously, you
use strings everywhere because you need.

115
00:07:40.123 --> 00:07:44.964
So yeah, again, when I just say string,
I'm talking about words, characters,

116
00:07:44.964 --> 00:07:46.219
this kind of things.

117
00:07:46.219 --> 00:07:50.839
Things that go between quotes,
that's what a string is.

118
00:07:50.839 --> 00:07:53.128
And that's common amongst
all programming languages.

119
00:07:53.128 --> 00:07:55.927
Let's talk about booleans.

120
00:07:55.927 --> 00:07:59.874
Booleans are just true or false.

121
00:07:59.874 --> 00:08:03.039
So if I come in here and say,

122
00:08:03.039 --> 00:08:07.996
let isBrianCool = true, now I have this,

123
00:08:07.996 --> 00:08:13.113
isBrianCool, and you can see that is true.

124
00:08:13.113 --> 00:08:15.508
I mean, it says it in my browser,
it's undenied,

125
00:08:15.508 --> 00:08:17.590
everything that is on
the Internet is true.

126
00:08:17.590 --> 00:08:22.757
So therefore, Brian is cool because
it's on the Internet now, okay?

127
00:08:22.757 --> 00:08:27.778
And then by the same token, you can say,

128
00:08:27.778 --> 00:08:32.077
let isSkyGreen = false, right?

129
00:08:32.077 --> 00:08:39.452
And then you have this, Other variable
isSkyGreen, and it is equivalent to false.

130
00:08:39.452 --> 00:08:44.462
So that is called boolean, it can either
be true or it can be false, and that's it.

131
00:08:44.462 --> 00:08:46.448
It's a boolean variable.

132
00:08:46.448 --> 00:08:51.629
I think boolean is actually
the name of some mathematician

133
00:08:51.629 --> 00:08:56.387
that came up with the concept
of these binary things,

134
00:08:56.387 --> 00:09:01.373
and so they named it after
the mathematician, I think.

135
00:09:03.488 --> 00:09:08.197
And by the same token,
you can also have numbers, right?

136
00:09:08.197 --> 00:09:12.852
So let x =, or let's say,
let age =, I don't know,

137
00:09:12.852 --> 00:09:16.112
25 or something like that, right?

138
00:09:16.112 --> 00:09:18.497
I mean,
we were already using that up here or

139
00:09:18.497 --> 00:09:22.439
in the previous one when we're talking
about rents and stuff like that.

140
00:09:22.439 --> 00:09:27.525
JavaScript just has one type of number,
lots of other languages will separate

141
00:09:27.525 --> 00:09:32.010
integers from what are called
floating points or decimals, right?

142
00:09:32.010 --> 00:09:35.333
JavaScript doesn't do that, JavaScript
just has the one type called numbers.

143
00:09:35.333 --> 00:09:38.845
So if I say, let, I don't know,

144
00:09:38.845 --> 00:09:44.881
babyWeight = 10.5 or
something like that, right?

145
00:09:44.881 --> 00:09:52.949
It doesn't differentiate between this
being an integer and this being a decimal.

146
00:09:57.607 --> 00:10:02.047
It actually makes it kind of hard
sometimes because it makes JavaScript

147
00:10:02.047 --> 00:10:03.900
a little imprecise, right?

148
00:10:03.900 --> 00:10:07.232
You don't really have to worry about that
today, but sometimes asking is like,

149
00:10:07.232 --> 00:10:09.003
is this number equivalent to this number?

150
00:10:09.003 --> 00:10:13.093
Sometimes you think it should be and
it's off by 0.0000001, right,

151
00:10:13.093 --> 00:10:15.850
which makes it not equal,
but you'd expect it to be.

